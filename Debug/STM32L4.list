
STM32L4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ff88  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003124  08010118  08010118  00020118  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801323c  0801323c  0002323c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08013244  08013244  00023244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08013248  08013248  00023248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000138c  20000000  0801324c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000c5b8  2000138c  080145d8  0003138c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000d944  080145d8  0003d944  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0003138c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000774bd  00000000  00000000  000313bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000d60a  00000000  00000000  000a8879  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00029eef  00000000  00000000  000b5e83  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00002d10  00000000  00000000  000dfd78  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00004550  00000000  00000000  000e2a88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001c41d  00000000  00000000  000e6fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000fbb1  00000000  00000000  001033f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00112fa6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008d80  00000000  00000000  00113024  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000138c 	.word	0x2000138c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010100 	.word	0x08010100

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20001390 	.word	0x20001390
 80001cc:	08010100 	.word	0x08010100

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f092 0f00 	teq	r2, #0
 800058a:	bf14      	ite	ne
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	4770      	bxeq	lr
 8000592:	b530      	push	{r4, r5, lr}
 8000594:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000598:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800059c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a0:	e720      	b.n	80003e4 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_ul2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	e00a      	b.n	80005ca <__aeabi_l2d+0x16>

080005b4 <__aeabi_l2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005c2:	d502      	bpl.n	80005ca <__aeabi_l2d+0x16>
 80005c4:	4240      	negs	r0, r0
 80005c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ce:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d6:	f43f aedc 	beq.w	8000392 <__adddf3+0xe6>
 80005da:	f04f 0203 	mov.w	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005f2:	f1c2 0320 	rsb	r3, r2, #32
 80005f6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 fe03 	lsl.w	lr, r1, r3
 8000602:	ea40 000e 	orr.w	r0, r0, lr
 8000606:	fa21 f102 	lsr.w	r1, r1, r2
 800060a:	4414      	add	r4, r2
 800060c:	e6c1      	b.n	8000392 <__adddf3+0xe6>
 800060e:	bf00      	nop

08000610 <__aeabi_dmul>:
 8000610:	b570      	push	{r4, r5, r6, lr}
 8000612:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000616:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800061a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061e:	bf1d      	ittte	ne
 8000620:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000624:	ea94 0f0c 	teqne	r4, ip
 8000628:	ea95 0f0c 	teqne	r5, ip
 800062c:	f000 f8de 	bleq	80007ec <__aeabi_dmul+0x1dc>
 8000630:	442c      	add	r4, r5
 8000632:	ea81 0603 	eor.w	r6, r1, r3
 8000636:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800063a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000642:	bf18      	it	ne
 8000644:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000648:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800064c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000650:	d038      	beq.n	80006c4 <__aeabi_dmul+0xb4>
 8000652:	fba0 ce02 	umull	ip, lr, r0, r2
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000662:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000666:	f04f 0600 	mov.w	r6, #0
 800066a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066e:	f09c 0f00 	teq	ip, #0
 8000672:	bf18      	it	ne
 8000674:	f04e 0e01 	orrne.w	lr, lr, #1
 8000678:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800067c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000680:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000684:	d204      	bcs.n	8000690 <__aeabi_dmul+0x80>
 8000686:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800068a:	416d      	adcs	r5, r5
 800068c:	eb46 0606 	adc.w	r6, r6, r6
 8000690:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000694:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000698:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800069c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a8:	bf88      	it	hi
 80006aa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ae:	d81e      	bhi.n	80006ee <__aeabi_dmul+0xde>
 80006b0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b4:	bf08      	it	eq
 80006b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ba:	f150 0000 	adcs.w	r0, r0, #0
 80006be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c8:	ea46 0101 	orr.w	r1, r6, r1
 80006cc:	ea40 0002 	orr.w	r0, r0, r2
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d8:	bfc2      	ittt	gt
 80006da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	popgt	{r4, r5, r6, pc}
 80006e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e8:	f04f 0e00 	mov.w	lr, #0
 80006ec:	3c01      	subs	r4, #1
 80006ee:	f300 80ab 	bgt.w	8000848 <__aeabi_dmul+0x238>
 80006f2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f6:	bfde      	ittt	le
 80006f8:	2000      	movle	r0, #0
 80006fa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd70      	pople	{r4, r5, r6, pc}
 8000700:	f1c4 0400 	rsb	r4, r4, #0
 8000704:	3c20      	subs	r4, #32
 8000706:	da35      	bge.n	8000774 <__aeabi_dmul+0x164>
 8000708:	340c      	adds	r4, #12
 800070a:	dc1b      	bgt.n	8000744 <__aeabi_dmul+0x134>
 800070c:	f104 0414 	add.w	r4, r4, #20
 8000710:	f1c4 0520 	rsb	r5, r4, #32
 8000714:	fa00 f305 	lsl.w	r3, r0, r5
 8000718:	fa20 f004 	lsr.w	r0, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea40 0002 	orr.w	r0, r0, r2
 8000724:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000728:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800072c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000730:	fa21 f604 	lsr.w	r6, r1, r4
 8000734:	eb42 0106 	adc.w	r1, r2, r6
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f1c4 040c 	rsb	r4, r4, #12
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f304 	lsl.w	r3, r0, r4
 8000750:	fa20 f005 	lsr.w	r0, r0, r5
 8000754:	fa01 f204 	lsl.w	r2, r1, r4
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000764:	f141 0100 	adc.w	r1, r1, #0
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 0520 	rsb	r5, r4, #32
 8000778:	fa00 f205 	lsl.w	r2, r0, r5
 800077c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000780:	fa20 f304 	lsr.w	r3, r0, r4
 8000784:	fa01 f205 	lsl.w	r2, r1, r5
 8000788:	ea43 0302 	orr.w	r3, r3, r2
 800078c:	fa21 f004 	lsr.w	r0, r1, r4
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	fa21 f204 	lsr.w	r2, r1, r4
 8000798:	ea20 0002 	bic.w	r0, r0, r2
 800079c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f094 0f00 	teq	r4, #0
 80007b0:	d10f      	bne.n	80007d2 <__aeabi_dmul+0x1c2>
 80007b2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b6:	0040      	lsls	r0, r0, #1
 80007b8:	eb41 0101 	adc.w	r1, r1, r1
 80007bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3c01      	subeq	r4, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1a6>
 80007c6:	ea41 0106 	orr.w	r1, r1, r6
 80007ca:	f095 0f00 	teq	r5, #0
 80007ce:	bf18      	it	ne
 80007d0:	4770      	bxne	lr
 80007d2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d6:	0052      	lsls	r2, r2, #1
 80007d8:	eb43 0303 	adc.w	r3, r3, r3
 80007dc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3d01      	subeq	r5, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1c6>
 80007e6:	ea43 0306 	orr.w	r3, r3, r6
 80007ea:	4770      	bx	lr
 80007ec:	ea94 0f0c 	teq	r4, ip
 80007f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f4:	bf18      	it	ne
 80007f6:	ea95 0f0c 	teqne	r5, ip
 80007fa:	d00c      	beq.n	8000816 <__aeabi_dmul+0x206>
 80007fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000800:	bf18      	it	ne
 8000802:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000806:	d1d1      	bne.n	80007ac <__aeabi_dmul+0x19c>
 8000808:	ea81 0103 	eor.w	r1, r1, r3
 800080c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000810:	f04f 0000 	mov.w	r0, #0
 8000814:	bd70      	pop	{r4, r5, r6, pc}
 8000816:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081a:	bf06      	itte	eq
 800081c:	4610      	moveq	r0, r2
 800081e:	4619      	moveq	r1, r3
 8000820:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000824:	d019      	beq.n	800085a <__aeabi_dmul+0x24a>
 8000826:	ea94 0f0c 	teq	r4, ip
 800082a:	d102      	bne.n	8000832 <__aeabi_dmul+0x222>
 800082c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000830:	d113      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000832:	ea95 0f0c 	teq	r5, ip
 8000836:	d105      	bne.n	8000844 <__aeabi_dmul+0x234>
 8000838:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800083c:	bf1c      	itt	ne
 800083e:	4610      	movne	r0, r2
 8000840:	4619      	movne	r1, r3
 8000842:	d10a      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000844:	ea81 0103 	eor.w	r1, r1, r3
 8000848:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800084c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000850:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000854:	f04f 0000 	mov.w	r0, #0
 8000858:	bd70      	pop	{r4, r5, r6, pc}
 800085a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000862:	bd70      	pop	{r4, r5, r6, pc}

08000864 <__aeabi_ddiv>:
 8000864:	b570      	push	{r4, r5, r6, lr}
 8000866:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800086a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000872:	bf1d      	ittte	ne
 8000874:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000878:	ea94 0f0c 	teqne	r4, ip
 800087c:	ea95 0f0c 	teqne	r5, ip
 8000880:	f000 f8a7 	bleq	80009d2 <__aeabi_ddiv+0x16e>
 8000884:	eba4 0405 	sub.w	r4, r4, r5
 8000888:	ea81 0e03 	eor.w	lr, r1, r3
 800088c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000890:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000894:	f000 8088 	beq.w	80009a8 <__aeabi_ddiv+0x144>
 8000898:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800089c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008bc:	429d      	cmp	r5, r3
 80008be:	bf08      	it	eq
 80008c0:	4296      	cmpeq	r6, r2
 80008c2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ca:	d202      	bcs.n	80008d2 <__aeabi_ddiv+0x6e>
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d2:	1ab6      	subs	r6, r6, r2
 80008d4:	eb65 0503 	sbc.w	r5, r5, r3
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008e2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000940:	ea55 0e06 	orrs.w	lr, r5, r6
 8000944:	d018      	beq.n	8000978 <__aeabi_ddiv+0x114>
 8000946:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800094a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000952:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000956:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800095a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000962:	d1c0      	bne.n	80008e6 <__aeabi_ddiv+0x82>
 8000964:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000968:	d10b      	bne.n	8000982 <__aeabi_ddiv+0x11e>
 800096a:	ea41 0100 	orr.w	r1, r1, r0
 800096e:	f04f 0000 	mov.w	r0, #0
 8000972:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000976:	e7b6      	b.n	80008e6 <__aeabi_ddiv+0x82>
 8000978:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800097c:	bf04      	itt	eq
 800097e:	4301      	orreq	r1, r0
 8000980:	2000      	moveq	r0, #0
 8000982:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000986:	bf88      	it	hi
 8000988:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800098c:	f63f aeaf 	bhi.w	80006ee <__aeabi_dmul+0xde>
 8000990:	ebb5 0c03 	subs.w	ip, r5, r3
 8000994:	bf04      	itt	eq
 8000996:	ebb6 0c02 	subseq.w	ip, r6, r2
 800099a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099e:	f150 0000 	adcs.w	r0, r0, #0
 80009a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	pop	{r4, r5, r6, pc}
 80009a8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009ac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b4:	bfc2      	ittt	gt
 80009b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009be:	bd70      	popgt	{r4, r5, r6, pc}
 80009c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c4:	f04f 0e00 	mov.w	lr, #0
 80009c8:	3c01      	subs	r4, #1
 80009ca:	e690      	b.n	80006ee <__aeabi_dmul+0xde>
 80009cc:	ea45 0e06 	orr.w	lr, r5, r6
 80009d0:	e68d      	b.n	80006ee <__aeabi_dmul+0xde>
 80009d2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d6:	ea94 0f0c 	teq	r4, ip
 80009da:	bf08      	it	eq
 80009dc:	ea95 0f0c 	teqeq	r5, ip
 80009e0:	f43f af3b 	beq.w	800085a <__aeabi_dmul+0x24a>
 80009e4:	ea94 0f0c 	teq	r4, ip
 80009e8:	d10a      	bne.n	8000a00 <__aeabi_ddiv+0x19c>
 80009ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ee:	f47f af34 	bne.w	800085a <__aeabi_dmul+0x24a>
 80009f2:	ea95 0f0c 	teq	r5, ip
 80009f6:	f47f af25 	bne.w	8000844 <__aeabi_dmul+0x234>
 80009fa:	4610      	mov	r0, r2
 80009fc:	4619      	mov	r1, r3
 80009fe:	e72c      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a00:	ea95 0f0c 	teq	r5, ip
 8000a04:	d106      	bne.n	8000a14 <__aeabi_ddiv+0x1b0>
 8000a06:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a0a:	f43f aefd 	beq.w	8000808 <__aeabi_dmul+0x1f8>
 8000a0e:	4610      	mov	r0, r2
 8000a10:	4619      	mov	r1, r3
 8000a12:	e722      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a18:	bf18      	it	ne
 8000a1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1e:	f47f aec5 	bne.w	80007ac <__aeabi_dmul+0x19c>
 8000a22:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a26:	f47f af0d 	bne.w	8000844 <__aeabi_dmul+0x234>
 8000a2a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2e:	f47f aeeb 	bne.w	8000808 <__aeabi_dmul+0x1f8>
 8000a32:	e712      	b.n	800085a <__aeabi_dmul+0x24a>

08000a34 <__gedf2>:
 8000a34:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a38:	e006      	b.n	8000a48 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__ledf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	e002      	b.n	8000a48 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__cmpdf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a58:	bf18      	it	ne
 8000a5a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5e:	d01b      	beq.n	8000a98 <__cmpdf2+0x54>
 8000a60:	b001      	add	sp, #4
 8000a62:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a66:	bf0c      	ite	eq
 8000a68:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a6c:	ea91 0f03 	teqne	r1, r3
 8000a70:	bf02      	ittt	eq
 8000a72:	ea90 0f02 	teqeq	r0, r2
 8000a76:	2000      	moveq	r0, #0
 8000a78:	4770      	bxeq	lr
 8000a7a:	f110 0f00 	cmn.w	r0, #0
 8000a7e:	ea91 0f03 	teq	r1, r3
 8000a82:	bf58      	it	pl
 8000a84:	4299      	cmppl	r1, r3
 8000a86:	bf08      	it	eq
 8000a88:	4290      	cmpeq	r0, r2
 8000a8a:	bf2c      	ite	cs
 8000a8c:	17d8      	asrcs	r0, r3, #31
 8000a8e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a92:	f040 0001 	orr.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d102      	bne.n	8000aa8 <__cmpdf2+0x64>
 8000aa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa6:	d107      	bne.n	8000ab8 <__cmpdf2+0x74>
 8000aa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d1d6      	bne.n	8000a60 <__cmpdf2+0x1c>
 8000ab2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab6:	d0d3      	beq.n	8000a60 <__cmpdf2+0x1c>
 8000ab8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdrcmple>:
 8000ac0:	4684      	mov	ip, r0
 8000ac2:	4610      	mov	r0, r2
 8000ac4:	4662      	mov	r2, ip
 8000ac6:	468c      	mov	ip, r1
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4663      	mov	r3, ip
 8000acc:	e000      	b.n	8000ad0 <__aeabi_cdcmpeq>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_cdcmpeq>:
 8000ad0:	b501      	push	{r0, lr}
 8000ad2:	f7ff ffb7 	bl	8000a44 <__cmpdf2>
 8000ad6:	2800      	cmp	r0, #0
 8000ad8:	bf48      	it	mi
 8000ada:	f110 0f00 	cmnmi.w	r0, #0
 8000ade:	bd01      	pop	{r0, pc}

08000ae0 <__aeabi_dcmpeq>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff fff4 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000ae8:	bf0c      	ite	eq
 8000aea:	2001      	moveq	r0, #1
 8000aec:	2000      	movne	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmplt>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffea 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000afc:	bf34      	ite	cc
 8000afe:	2001      	movcc	r0, #1
 8000b00:	2000      	movcs	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmple>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffe0 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000b10:	bf94      	ite	ls
 8000b12:	2001      	movls	r0, #1
 8000b14:	2000      	movhi	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpge>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffce 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b24:	bf94      	ite	ls
 8000b26:	2001      	movls	r0, #1
 8000b28:	2000      	movhi	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmpgt>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffc4 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b38:	bf34      	ite	cc
 8000b3a:	2001      	movcc	r0, #1
 8000b3c:	2000      	movcs	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpun>:
 8000b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x10>
 8000b4e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b52:	d10a      	bne.n	8000b6a <__aeabi_dcmpun+0x26>
 8000b54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	d102      	bne.n	8000b64 <__aeabi_dcmpun+0x20>
 8000b5e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b62:	d102      	bne.n	8000b6a <__aeabi_dcmpun+0x26>
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	f04f 0001 	mov.w	r0, #1
 8000b6e:	4770      	bx	lr

08000b70 <__aeabi_d2iz>:
 8000b70:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b74:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b78:	d215      	bcs.n	8000ba6 <__aeabi_d2iz+0x36>
 8000b7a:	d511      	bpl.n	8000ba0 <__aeabi_d2iz+0x30>
 8000b7c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b84:	d912      	bls.n	8000bac <__aeabi_d2iz+0x3c>
 8000b86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b92:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b96:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000baa:	d105      	bne.n	8000bb8 <__aeabi_d2iz+0x48>
 8000bac:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb0:	bf08      	it	eq
 8000bb2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_uldivmod>:
 8000bc0:	b953      	cbnz	r3, 8000bd8 <__aeabi_uldivmod+0x18>
 8000bc2:	b94a      	cbnz	r2, 8000bd8 <__aeabi_uldivmod+0x18>
 8000bc4:	2900      	cmp	r1, #0
 8000bc6:	bf08      	it	eq
 8000bc8:	2800      	cmpeq	r0, #0
 8000bca:	bf1c      	itt	ne
 8000bcc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bd0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bd4:	f000 b97a 	b.w	8000ecc <__aeabi_idiv0>
 8000bd8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bdc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be0:	f000 f806 	bl	8000bf0 <__udivmoddi4>
 8000be4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bec:	b004      	add	sp, #16
 8000bee:	4770      	bx	lr

08000bf0 <__udivmoddi4>:
 8000bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf4:	468c      	mov	ip, r1
 8000bf6:	460d      	mov	r5, r1
 8000bf8:	4604      	mov	r4, r0
 8000bfa:	9e08      	ldr	r6, [sp, #32]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d151      	bne.n	8000ca4 <__udivmoddi4+0xb4>
 8000c00:	428a      	cmp	r2, r1
 8000c02:	4617      	mov	r7, r2
 8000c04:	d96d      	bls.n	8000ce2 <__udivmoddi4+0xf2>
 8000c06:	fab2 fe82 	clz	lr, r2
 8000c0a:	f1be 0f00 	cmp.w	lr, #0
 8000c0e:	d00b      	beq.n	8000c28 <__udivmoddi4+0x38>
 8000c10:	f1ce 0c20 	rsb	ip, lr, #32
 8000c14:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c18:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c1c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c20:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c24:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c28:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c2c:	0c25      	lsrs	r5, r4, #16
 8000c2e:	fbbc f8fa 	udiv	r8, ip, sl
 8000c32:	fa1f f987 	uxth.w	r9, r7
 8000c36:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c3a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c3e:	fb08 f309 	mul.w	r3, r8, r9
 8000c42:	42ab      	cmp	r3, r5
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x6c>
 8000c46:	19ed      	adds	r5, r5, r7
 8000c48:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000c4c:	f080 8123 	bcs.w	8000e96 <__udivmoddi4+0x2a6>
 8000c50:	42ab      	cmp	r3, r5
 8000c52:	f240 8120 	bls.w	8000e96 <__udivmoddi4+0x2a6>
 8000c56:	f1a8 0802 	sub.w	r8, r8, #2
 8000c5a:	443d      	add	r5, r7
 8000c5c:	1aed      	subs	r5, r5, r3
 8000c5e:	b2a4      	uxth	r4, r4
 8000c60:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c64:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c68:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c6c:	fb00 f909 	mul.w	r9, r0, r9
 8000c70:	45a1      	cmp	r9, r4
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x98>
 8000c74:	19e4      	adds	r4, r4, r7
 8000c76:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c7a:	f080 810a 	bcs.w	8000e92 <__udivmoddi4+0x2a2>
 8000c7e:	45a1      	cmp	r9, r4
 8000c80:	f240 8107 	bls.w	8000e92 <__udivmoddi4+0x2a2>
 8000c84:	3802      	subs	r0, #2
 8000c86:	443c      	add	r4, r7
 8000c88:	eba4 0409 	sub.w	r4, r4, r9
 8000c8c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c90:	2100      	movs	r1, #0
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	d061      	beq.n	8000d5a <__udivmoddi4+0x16a>
 8000c96:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	6034      	str	r4, [r6, #0]
 8000c9e:	6073      	str	r3, [r6, #4]
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	428b      	cmp	r3, r1
 8000ca6:	d907      	bls.n	8000cb8 <__udivmoddi4+0xc8>
 8000ca8:	2e00      	cmp	r6, #0
 8000caa:	d054      	beq.n	8000d56 <__udivmoddi4+0x166>
 8000cac:	2100      	movs	r1, #0
 8000cae:	e886 0021 	stmia.w	r6, {r0, r5}
 8000cb2:	4608      	mov	r0, r1
 8000cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb8:	fab3 f183 	clz	r1, r3
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	f040 808e 	bne.w	8000dde <__udivmoddi4+0x1ee>
 8000cc2:	42ab      	cmp	r3, r5
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xdc>
 8000cc6:	4282      	cmp	r2, r0
 8000cc8:	f200 80fa 	bhi.w	8000ec0 <__udivmoddi4+0x2d0>
 8000ccc:	1a84      	subs	r4, r0, r2
 8000cce:	eb65 0503 	sbc.w	r5, r5, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	46ac      	mov	ip, r5
 8000cd6:	2e00      	cmp	r6, #0
 8000cd8:	d03f      	beq.n	8000d5a <__udivmoddi4+0x16a>
 8000cda:	e886 1010 	stmia.w	r6, {r4, ip}
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	b912      	cbnz	r2, 8000cea <__udivmoddi4+0xfa>
 8000ce4:	2701      	movs	r7, #1
 8000ce6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000cea:	fab7 fe87 	clz	lr, r7
 8000cee:	f1be 0f00 	cmp.w	lr, #0
 8000cf2:	d134      	bne.n	8000d5e <__udivmoddi4+0x16e>
 8000cf4:	1beb      	subs	r3, r5, r7
 8000cf6:	0c3a      	lsrs	r2, r7, #16
 8000cf8:	fa1f fc87 	uxth.w	ip, r7
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	fbb3 f8f2 	udiv	r8, r3, r2
 8000d02:	0c25      	lsrs	r5, r4, #16
 8000d04:	fb02 3318 	mls	r3, r2, r8, r3
 8000d08:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d0c:	fb0c f308 	mul.w	r3, ip, r8
 8000d10:	42ab      	cmp	r3, r5
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x134>
 8000d14:	19ed      	adds	r5, r5, r7
 8000d16:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x132>
 8000d1c:	42ab      	cmp	r3, r5
 8000d1e:	f200 80d1 	bhi.w	8000ec4 <__udivmoddi4+0x2d4>
 8000d22:	4680      	mov	r8, r0
 8000d24:	1aed      	subs	r5, r5, r3
 8000d26:	b2a3      	uxth	r3, r4
 8000d28:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d2c:	fb02 5510 	mls	r5, r2, r0, r5
 8000d30:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d34:	fb0c fc00 	mul.w	ip, ip, r0
 8000d38:	45a4      	cmp	ip, r4
 8000d3a:	d907      	bls.n	8000d4c <__udivmoddi4+0x15c>
 8000d3c:	19e4      	adds	r4, r4, r7
 8000d3e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x15a>
 8000d44:	45a4      	cmp	ip, r4
 8000d46:	f200 80b8 	bhi.w	8000eba <__udivmoddi4+0x2ca>
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	eba4 040c 	sub.w	r4, r4, ip
 8000d50:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d54:	e79d      	b.n	8000c92 <__udivmoddi4+0xa2>
 8000d56:	4631      	mov	r1, r6
 8000d58:	4630      	mov	r0, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	f1ce 0420 	rsb	r4, lr, #32
 8000d62:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d66:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d6a:	fa20 f804 	lsr.w	r8, r0, r4
 8000d6e:	0c3a      	lsrs	r2, r7, #16
 8000d70:	fa25 f404 	lsr.w	r4, r5, r4
 8000d74:	ea48 0803 	orr.w	r8, r8, r3
 8000d78:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d7c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d80:	fb02 4411 	mls	r4, r2, r1, r4
 8000d84:	fa1f fc87 	uxth.w	ip, r7
 8000d88:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000d8c:	fb01 f30c 	mul.w	r3, r1, ip
 8000d90:	42ab      	cmp	r3, r5
 8000d92:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d96:	d909      	bls.n	8000dac <__udivmoddi4+0x1bc>
 8000d98:	19ed      	adds	r5, r5, r7
 8000d9a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 8000d9e:	f080 808a 	bcs.w	8000eb6 <__udivmoddi4+0x2c6>
 8000da2:	42ab      	cmp	r3, r5
 8000da4:	f240 8087 	bls.w	8000eb6 <__udivmoddi4+0x2c6>
 8000da8:	3902      	subs	r1, #2
 8000daa:	443d      	add	r5, r7
 8000dac:	1aeb      	subs	r3, r5, r3
 8000dae:	fa1f f588 	uxth.w	r5, r8
 8000db2:	fbb3 f0f2 	udiv	r0, r3, r2
 8000db6:	fb02 3310 	mls	r3, r2, r0, r3
 8000dba:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dbe:	fb00 f30c 	mul.w	r3, r0, ip
 8000dc2:	42ab      	cmp	r3, r5
 8000dc4:	d907      	bls.n	8000dd6 <__udivmoddi4+0x1e6>
 8000dc6:	19ed      	adds	r5, r5, r7
 8000dc8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000dcc:	d26f      	bcs.n	8000eae <__udivmoddi4+0x2be>
 8000dce:	42ab      	cmp	r3, r5
 8000dd0:	d96d      	bls.n	8000eae <__udivmoddi4+0x2be>
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	443d      	add	r5, r7
 8000dd6:	1aeb      	subs	r3, r5, r3
 8000dd8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ddc:	e78f      	b.n	8000cfe <__udivmoddi4+0x10e>
 8000dde:	f1c1 0720 	rsb	r7, r1, #32
 8000de2:	fa22 f807 	lsr.w	r8, r2, r7
 8000de6:	408b      	lsls	r3, r1
 8000de8:	fa05 f401 	lsl.w	r4, r5, r1
 8000dec:	ea48 0303 	orr.w	r3, r8, r3
 8000df0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000df4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000df8:	40fd      	lsrs	r5, r7
 8000dfa:	ea4e 0e04 	orr.w	lr, lr, r4
 8000dfe:	fbb5 f9fc 	udiv	r9, r5, ip
 8000e02:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000e06:	fb0c 5519 	mls	r5, ip, r9, r5
 8000e0a:	fa1f f883 	uxth.w	r8, r3
 8000e0e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e12:	fb09 f408 	mul.w	r4, r9, r8
 8000e16:	42ac      	cmp	r4, r5
 8000e18:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x244>
 8000e22:	18ed      	adds	r5, r5, r3
 8000e24:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e28:	d243      	bcs.n	8000eb2 <__udivmoddi4+0x2c2>
 8000e2a:	42ac      	cmp	r4, r5
 8000e2c:	d941      	bls.n	8000eb2 <__udivmoddi4+0x2c2>
 8000e2e:	f1a9 0902 	sub.w	r9, r9, #2
 8000e32:	441d      	add	r5, r3
 8000e34:	1b2d      	subs	r5, r5, r4
 8000e36:	fa1f fe8e 	uxth.w	lr, lr
 8000e3a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e3e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e42:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e46:	fb00 f808 	mul.w	r8, r0, r8
 8000e4a:	45a0      	cmp	r8, r4
 8000e4c:	d907      	bls.n	8000e5e <__udivmoddi4+0x26e>
 8000e4e:	18e4      	adds	r4, r4, r3
 8000e50:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000e54:	d229      	bcs.n	8000eaa <__udivmoddi4+0x2ba>
 8000e56:	45a0      	cmp	r8, r4
 8000e58:	d927      	bls.n	8000eaa <__udivmoddi4+0x2ba>
 8000e5a:	3802      	subs	r0, #2
 8000e5c:	441c      	add	r4, r3
 8000e5e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e62:	eba4 0408 	sub.w	r4, r4, r8
 8000e66:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6a:	454c      	cmp	r4, r9
 8000e6c:	46c6      	mov	lr, r8
 8000e6e:	464d      	mov	r5, r9
 8000e70:	d315      	bcc.n	8000e9e <__udivmoddi4+0x2ae>
 8000e72:	d012      	beq.n	8000e9a <__udivmoddi4+0x2aa>
 8000e74:	b156      	cbz	r6, 8000e8c <__udivmoddi4+0x29c>
 8000e76:	ebba 030e 	subs.w	r3, sl, lr
 8000e7a:	eb64 0405 	sbc.w	r4, r4, r5
 8000e7e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e82:	40cb      	lsrs	r3, r1
 8000e84:	431f      	orrs	r7, r3
 8000e86:	40cc      	lsrs	r4, r1
 8000e88:	6037      	str	r7, [r6, #0]
 8000e8a:	6074      	str	r4, [r6, #4]
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	4618      	mov	r0, r3
 8000e94:	e6f8      	b.n	8000c88 <__udivmoddi4+0x98>
 8000e96:	4690      	mov	r8, r2
 8000e98:	e6e0      	b.n	8000c5c <__udivmoddi4+0x6c>
 8000e9a:	45c2      	cmp	sl, r8
 8000e9c:	d2ea      	bcs.n	8000e74 <__udivmoddi4+0x284>
 8000e9e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ea2:	eb69 0503 	sbc.w	r5, r9, r3
 8000ea6:	3801      	subs	r0, #1
 8000ea8:	e7e4      	b.n	8000e74 <__udivmoddi4+0x284>
 8000eaa:	4628      	mov	r0, r5
 8000eac:	e7d7      	b.n	8000e5e <__udivmoddi4+0x26e>
 8000eae:	4640      	mov	r0, r8
 8000eb0:	e791      	b.n	8000dd6 <__udivmoddi4+0x1e6>
 8000eb2:	4681      	mov	r9, r0
 8000eb4:	e7be      	b.n	8000e34 <__udivmoddi4+0x244>
 8000eb6:	4601      	mov	r1, r0
 8000eb8:	e778      	b.n	8000dac <__udivmoddi4+0x1bc>
 8000eba:	3802      	subs	r0, #2
 8000ebc:	443c      	add	r4, r7
 8000ebe:	e745      	b.n	8000d4c <__udivmoddi4+0x15c>
 8000ec0:	4608      	mov	r0, r1
 8000ec2:	e708      	b.n	8000cd6 <__udivmoddi4+0xe6>
 8000ec4:	f1a8 0802 	sub.w	r8, r8, #2
 8000ec8:	443d      	add	r5, r7
 8000eca:	e72b      	b.n	8000d24 <__udivmoddi4+0x134>

08000ecc <__aeabi_idiv0>:
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop

08000ed0 <ST7735_write>:
uint16_t scr_width;
uint16_t scr_height;
uint8_t buf_tft[4096] = {0};

void ST7735_write(uint8_t data)
{
 8000ed0:	b507      	push	{r0, r1, r2, lr}
 8000ed2:	a902      	add	r1, sp, #8
	HAL_SPI_Transmit(&_SPI_PORT, (uint8_t *)&data, 1, HAL_MAX_DELAY);
 8000ed4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
{
 8000ed8:	f801 0d01 	strb.w	r0, [r1, #-1]!
	HAL_SPI_Transmit(&_SPI_PORT, (uint8_t *)&data, 1, HAL_MAX_DELAY);
 8000edc:	2201      	movs	r2, #1
 8000ede:	4803      	ldr	r0, [pc, #12]	; (8000eec <ST7735_write+0x1c>)
 8000ee0:	f003 ff4f 	bl	8004d82 <HAL_SPI_Transmit>
}
 8000ee4:	b003      	add	sp, #12
 8000ee6:	f85d fb04 	ldr.w	pc, [sp], #4
 8000eea:	bf00      	nop
 8000eec:	2000c694 	.word	0x2000c694

08000ef0 <ST7735_cmd>:
	tmp[0] = color >> 8;
	tmp[1] = color;
	HAL_SPI_Transmit(&_SPI_PORT, (uint8_t *)&tmp[0], 2, HAL_MAX_DELAY);
}

void ST7735_cmd(uint8_t cmd) {
 8000ef0:	b510      	push	{r4, lr}
	A0_L();
 8000ef2:	2200      	movs	r2, #0
void ST7735_cmd(uint8_t cmd) {
 8000ef4:	4604      	mov	r4, r0
	A0_L();
 8000ef6:	2180      	movs	r1, #128	; 0x80
 8000ef8:	4803      	ldr	r0, [pc, #12]	; (8000f08 <ST7735_cmd+0x18>)
 8000efa:	f002 f863 	bl	8002fc4 <HAL_GPIO_WritePin>
	ST7735_write(cmd);
 8000efe:	4620      	mov	r0, r4
}
 8000f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ST7735_write(cmd);
 8000f04:	f7ff bfe4 	b.w	8000ed0 <ST7735_write>
 8000f08:	48000400 	.word	0x48000400

08000f0c <ST7735_data>:

void ST7735_data(uint8_t data) {
 8000f0c:	b510      	push	{r4, lr}
	A0_H();
 8000f0e:	2201      	movs	r2, #1
void ST7735_data(uint8_t data) {
 8000f10:	4604      	mov	r4, r0
	A0_H();
 8000f12:	2180      	movs	r1, #128	; 0x80
 8000f14:	4803      	ldr	r0, [pc, #12]	; (8000f24 <ST7735_data+0x18>)
 8000f16:	f002 f855 	bl	8002fc4 <HAL_GPIO_WritePin>
	ST7735_write(data);
 8000f1a:	4620      	mov	r0, r4
}
 8000f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ST7735_write(data);
 8000f20:	f7ff bfd6 	b.w	8000ed0 <ST7735_write>
 8000f24:	48000400 	.word	0x48000400

08000f28 <ST7735_Orientation>:
	CS_H();

	ST7735_Orientation(scr_CCW);
}

void ST7735_Orientation(ScrOrientation_TypeDef orientation) {
 8000f28:	b510      	push	{r4, lr}
	CS_L();
 8000f2a:	2200      	movs	r2, #0
void ST7735_Orientation(ScrOrientation_TypeDef orientation) {
 8000f2c:	4604      	mov	r4, r0
	CS_L();
 8000f2e:	2120      	movs	r1, #32
 8000f30:	4815      	ldr	r0, [pc, #84]	; (8000f88 <ST7735_Orientation+0x60>)
 8000f32:	f002 f847 	bl	8002fc4 <HAL_GPIO_WritePin>
	ST7735_cmd(0x36); // Memory data access control:
 8000f36:	2036      	movs	r0, #54	; 0x36
 8000f38:	f7ff ffda 	bl	8000ef0 <ST7735_cmd>
	switch(orientation) {
 8000f3c:	2c02      	cmp	r4, #2
 8000f3e:	4a13      	ldr	r2, [pc, #76]	; (8000f8c <ST7735_Orientation+0x64>)
 8000f40:	4b13      	ldr	r3, [pc, #76]	; (8000f90 <ST7735_Orientation+0x68>)
 8000f42:	d011      	beq.n	8000f68 <ST7735_Orientation+0x40>
 8000f44:	2c03      	cmp	r4, #3
 8000f46:	f04f 0180 	mov.w	r1, #128	; 0x80
 8000f4a:	d013      	beq.n	8000f74 <ST7735_Orientation+0x4c>
 8000f4c:	2c01      	cmp	r4, #1
 8000f4e:	d116      	bne.n	8000f7e <ST7735_Orientation+0x56>
	case scr_CW:
		scr_width  = TFT_H;
 8000f50:	20a0      	movs	r0, #160	; 0xa0
 8000f52:	8010      	strh	r0, [r2, #0]
		scr_height = TFT_W;
 8000f54:	8019      	strh	r1, [r3, #0]
		ST7735_data(0xc0); // X-Mirror,Y-Mirror: Bottom to top; Right to left; RGB
		break;
	default:
		scr_width  = TFT_W;
		scr_height = TFT_H;
		ST7735_data(0x00); // Normal: Top to Bottom; Left to Right; RGB
 8000f56:	f7ff ffd9 	bl	8000f0c <ST7735_data>
		break;
	}
	CS_H();
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	2120      	movs	r1, #32
 8000f5e:	480a      	ldr	r0, [pc, #40]	; (8000f88 <ST7735_Orientation+0x60>)
}
 8000f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	CS_H();
 8000f64:	f002 b82e 	b.w	8002fc4 <HAL_GPIO_WritePin>
		scr_width  = TFT_H;
 8000f68:	21a0      	movs	r1, #160	; 0xa0
 8000f6a:	8011      	strh	r1, [r2, #0]
		scr_height = TFT_W;
 8000f6c:	2280      	movs	r2, #128	; 0x80
 8000f6e:	801a      	strh	r2, [r3, #0]
		ST7735_data(0x60); // X-Y Exchange,X-Mirror
 8000f70:	2060      	movs	r0, #96	; 0x60
 8000f72:	e7f0      	b.n	8000f56 <ST7735_Orientation+0x2e>
		scr_width  = TFT_W;
 8000f74:	8011      	strh	r1, [r2, #0]
		scr_height = TFT_H;
 8000f76:	22a0      	movs	r2, #160	; 0xa0
 8000f78:	801a      	strh	r2, [r3, #0]
		ST7735_data(0xc0); // X-Mirror,Y-Mirror: Bottom to top; Right to left; RGB
 8000f7a:	20c0      	movs	r0, #192	; 0xc0
 8000f7c:	e7eb      	b.n	8000f56 <ST7735_Orientation+0x2e>
		scr_width  = TFT_W;
 8000f7e:	8011      	strh	r1, [r2, #0]
		scr_height = TFT_H;
 8000f80:	22a0      	movs	r2, #160	; 0xa0
 8000f82:	801a      	strh	r2, [r3, #0]
		ST7735_data(0x00); // Normal: Top to Bottom; Left to Right; RGB
 8000f84:	2000      	movs	r0, #0
 8000f86:	e7e6      	b.n	8000f56 <ST7735_Orientation+0x2e>
 8000f88:	48000400 	.word	0x48000400
 8000f8c:	2000c398 	.word	0x2000c398
 8000f90:	2000c39a 	.word	0x2000c39a

08000f94 <ST7735_Init>:
void ST7735_Init(void) {
 8000f94:	b510      	push	{r4, lr}
	CS_H();
 8000f96:	4c45      	ldr	r4, [pc, #276]	; (80010ac <ST7735_Init+0x118>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	4620      	mov	r0, r4
 8000f9c:	2120      	movs	r1, #32
 8000f9e:	f002 f811 	bl	8002fc4 <HAL_GPIO_WritePin>
	RST_H();
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	2140      	movs	r1, #64	; 0x40
 8000fa6:	4620      	mov	r0, r4
 8000fa8:	f002 f80c 	bl	8002fc4 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000fac:	2005      	movs	r0, #5
 8000fae:	f001 fa9f 	bl	80024f0 <HAL_Delay>
	RST_L();
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2140      	movs	r1, #64	; 0x40
 8000fb6:	4620      	mov	r0, r4
 8000fb8:	f002 f804 	bl	8002fc4 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000fbc:	2005      	movs	r0, #5
 8000fbe:	f001 fa97 	bl	80024f0 <HAL_Delay>
	RST_H();
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	2140      	movs	r1, #64	; 0x40
 8000fc6:	4620      	mov	r0, r4
 8000fc8:	f001 fffc 	bl	8002fc4 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000fcc:	2005      	movs	r0, #5
 8000fce:	f001 fa8f 	bl	80024f0 <HAL_Delay>
	CS_L();
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2120      	movs	r1, #32
 8000fd6:	4620      	mov	r0, r4
 8000fd8:	f001 fff4 	bl	8002fc4 <HAL_GPIO_WritePin>
	ST7735_cmd(0x11); 	// Sleep out & booster on
 8000fdc:	2011      	movs	r0, #17
 8000fde:	f7ff ff87 	bl	8000ef0 <ST7735_cmd>
	HAL_Delay(25); 		// Datasheet says what display wakes about 120ms (may be much faster actually)
 8000fe2:	2019      	movs	r0, #25
 8000fe4:	f001 fa84 	bl	80024f0 <HAL_Delay>
	ST7735_cmd(0xb1);   // In normal mode (full colors):
 8000fe8:	20b1      	movs	r0, #177	; 0xb1
 8000fea:	f7ff ff81 	bl	8000ef0 <ST7735_cmd>
	A0_H();
 8000fee:	2201      	movs	r2, #1
 8000ff0:	2180      	movs	r1, #128	; 0x80
 8000ff2:	4620      	mov	r0, r4
 8000ff4:	f001 ffe6 	bl	8002fc4 <HAL_GPIO_WritePin>
	ST7735_write(0x05); //   RTNA set 1-line period: RTNA2, RTNA0
 8000ff8:	2005      	movs	r0, #5
 8000ffa:	f7ff ff69 	bl	8000ed0 <ST7735_write>
	ST7735_write(0x3c); //   Front porch: FPA5,FPA4,FPA3,FPA2
 8000ffe:	203c      	movs	r0, #60	; 0x3c
 8001000:	f7ff ff66 	bl	8000ed0 <ST7735_write>
	ST7735_write(0x3c); //   Back porch: BPA5,BPA4,BPA3,BPA2
 8001004:	203c      	movs	r0, #60	; 0x3c
 8001006:	f7ff ff63 	bl	8000ed0 <ST7735_write>
	ST7735_cmd(0xb2);   // In idle mode (8-colors):
 800100a:	20b2      	movs	r0, #178	; 0xb2
 800100c:	f7ff ff70 	bl	8000ef0 <ST7735_cmd>
	A0_H();
 8001010:	2201      	movs	r2, #1
 8001012:	2180      	movs	r1, #128	; 0x80
 8001014:	4620      	mov	r0, r4
 8001016:	f001 ffd5 	bl	8002fc4 <HAL_GPIO_WritePin>
	ST7735_write(0x05); //   RTNB set 1-line period: RTNAB, RTNB0
 800101a:	2005      	movs	r0, #5
 800101c:	f7ff ff58 	bl	8000ed0 <ST7735_write>
	ST7735_write(0x3c); //   Front porch: FPB5,FPB4,FPB3,FPB2
 8001020:	203c      	movs	r0, #60	; 0x3c
 8001022:	f7ff ff55 	bl	8000ed0 <ST7735_write>
	ST7735_write(0x3c); //   Back porch: BPB5,BPB4,BPB3,BPB2
 8001026:	203c      	movs	r0, #60	; 0x3c
 8001028:	f7ff ff52 	bl	8000ed0 <ST7735_write>
	ST7735_cmd(0xb3);   // In partial mode + full colors:
 800102c:	20b3      	movs	r0, #179	; 0xb3
 800102e:	f7ff ff5f 	bl	8000ef0 <ST7735_cmd>
	A0_H();
 8001032:	2201      	movs	r2, #1
 8001034:	2180      	movs	r1, #128	; 0x80
 8001036:	4620      	mov	r0, r4
 8001038:	f001 ffc4 	bl	8002fc4 <HAL_GPIO_WritePin>
	ST7735_write(0x05); //   RTNC set 1-line period: RTNC2, RTNC0
 800103c:	2005      	movs	r0, #5
 800103e:	f7ff ff47 	bl	8000ed0 <ST7735_write>
	ST7735_write(0x3c); //   Front porch: FPC5,FPC4,FPC3,FPC2
 8001042:	203c      	movs	r0, #60	; 0x3c
 8001044:	f7ff ff44 	bl	8000ed0 <ST7735_write>
	ST7735_write(0x3c); //   Back porch: BPC5,BPC4,BPC3,BPC2
 8001048:	203c      	movs	r0, #60	; 0x3c
 800104a:	f7ff ff41 	bl	8000ed0 <ST7735_write>
	ST7735_write(0x05); //   RTND set 1-line period: RTND2, RTND0
 800104e:	2005      	movs	r0, #5
 8001050:	f7ff ff3e 	bl	8000ed0 <ST7735_write>
	ST7735_write(0x3c); //   Front porch: FPD5,FPD4,FPD3,FPD2
 8001054:	203c      	movs	r0, #60	; 0x3c
 8001056:	f7ff ff3b 	bl	8000ed0 <ST7735_write>
	ST7735_write(0x3c); //   Back porch: BPD5,BPD4,BPD3,BPD2
 800105a:	203c      	movs	r0, #60	; 0x3c
 800105c:	f7ff ff38 	bl	8000ed0 <ST7735_write>
	ST7735_cmd(0xB4);   // Display dot inversion control:
 8001060:	20b4      	movs	r0, #180	; 0xb4
 8001062:	f7ff ff45 	bl	8000ef0 <ST7735_cmd>
	ST7735_data(0x03);  //   NLB,NLC
 8001066:	2003      	movs	r0, #3
 8001068:	f7ff ff50 	bl	8000f0c <ST7735_data>
	ST7735_cmd(0x3a);   // Interface pixel format
 800106c:	203a      	movs	r0, #58	; 0x3a
 800106e:	f7ff ff3f 	bl	8000ef0 <ST7735_cmd>
	ST7735_data(0x05);  // 16-bit/pixel RGB 5-6-5 (65k colors)
 8001072:	2005      	movs	r0, #5
 8001074:	f7ff ff4a 	bl	8000f0c <ST7735_data>
	ST7735_cmd(0x20);   // Display inversion off
 8001078:	2020      	movs	r0, #32
 800107a:	f7ff ff39 	bl	8000ef0 <ST7735_cmd>
	ST7735_cmd(0x13);   // Partial mode off
 800107e:	2013      	movs	r0, #19
 8001080:	f7ff ff36 	bl	8000ef0 <ST7735_cmd>
	ST7735_cmd(0x26);   // Gamma curve set:
 8001084:	2026      	movs	r0, #38	; 0x26
 8001086:	f7ff ff33 	bl	8000ef0 <ST7735_cmd>
	ST7735_data(0x01);  //   Gamma curve 1 (G2.2) or (G1.0)
 800108a:	2001      	movs	r0, #1
 800108c:	f7ff ff3e 	bl	8000f0c <ST7735_data>
	ST7735_cmd(0x29);   // Display on
 8001090:	2029      	movs	r0, #41	; 0x29
 8001092:	f7ff ff2d 	bl	8000ef0 <ST7735_cmd>
	CS_H();
 8001096:	4620      	mov	r0, r4
 8001098:	2201      	movs	r2, #1
 800109a:	2120      	movs	r1, #32
 800109c:	f001 ff92 	bl	8002fc4 <HAL_GPIO_WritePin>
	ST7735_Orientation(scr_CCW);
 80010a0:	2002      	movs	r0, #2
}
 80010a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ST7735_Orientation(scr_CCW);
 80010a6:	f7ff bf3f 	b.w	8000f28 <ST7735_Orientation>
 80010aa:	bf00      	nop
 80010ac:	48000400 	.word	0x48000400

080010b0 <ST7735_AddrSet>:

void ST7735_AddrSet(uint16_t XS, uint16_t YS, uint16_t XE, uint16_t YE) {
 80010b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ST7735_cmd(0x2a); // Column address set
	A0_H();
 80010b4:	4e19      	ldr	r6, [pc, #100]	; (800111c <ST7735_AddrSet+0x6c>)
void ST7735_AddrSet(uint16_t XS, uint16_t YS, uint16_t XE, uint16_t YE) {
 80010b6:	4680      	mov	r8, r0
	ST7735_cmd(0x2a); // Column address set
 80010b8:	202a      	movs	r0, #42	; 0x2a
void ST7735_AddrSet(uint16_t XS, uint16_t YS, uint16_t XE, uint16_t YE) {
 80010ba:	461c      	mov	r4, r3
 80010bc:	460d      	mov	r5, r1
 80010be:	4617      	mov	r7, r2
	ST7735_cmd(0x2a); // Column address set
 80010c0:	f7ff ff16 	bl	8000ef0 <ST7735_cmd>
	A0_H();
 80010c4:	2201      	movs	r2, #1
 80010c6:	2180      	movs	r1, #128	; 0x80
 80010c8:	4630      	mov	r0, r6
 80010ca:	f001 ff7b 	bl	8002fc4 <HAL_GPIO_WritePin>
	ST7735_write(XS >> 8);
 80010ce:	ea4f 2018 	mov.w	r0, r8, lsr #8
 80010d2:	f7ff fefd 	bl	8000ed0 <ST7735_write>
	ST7735_write(XS);
 80010d6:	fa5f f088 	uxtb.w	r0, r8
 80010da:	f7ff fef9 	bl	8000ed0 <ST7735_write>
	ST7735_write(XE >> 8);
 80010de:	0a38      	lsrs	r0, r7, #8
 80010e0:	f7ff fef6 	bl	8000ed0 <ST7735_write>
	ST7735_write(XE);
 80010e4:	b2f8      	uxtb	r0, r7
 80010e6:	f7ff fef3 	bl	8000ed0 <ST7735_write>

	ST7735_cmd(0x2b); // Row address set
 80010ea:	202b      	movs	r0, #43	; 0x2b
 80010ec:	f7ff ff00 	bl	8000ef0 <ST7735_cmd>
	A0_H();
 80010f0:	2201      	movs	r2, #1
 80010f2:	2180      	movs	r1, #128	; 0x80
 80010f4:	4630      	mov	r0, r6
 80010f6:	f001 ff65 	bl	8002fc4 <HAL_GPIO_WritePin>
	ST7735_write(YS >> 8);
 80010fa:	0a28      	lsrs	r0, r5, #8
 80010fc:	f7ff fee8 	bl	8000ed0 <ST7735_write>
	ST7735_write(YS);
 8001100:	b2e8      	uxtb	r0, r5
 8001102:	f7ff fee5 	bl	8000ed0 <ST7735_write>
	ST7735_write(YE >> 8);
 8001106:	0a20      	lsrs	r0, r4, #8
 8001108:	f7ff fee2 	bl	8000ed0 <ST7735_write>
	ST7735_write(YE);
 800110c:	b2e0      	uxtb	r0, r4
 800110e:	f7ff fedf 	bl	8000ed0 <ST7735_write>

	ST7735_cmd(0x2c); // Memory write
 8001112:	202c      	movs	r0, #44	; 0x2c
}
 8001114:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ST7735_cmd(0x2c); // Memory write
 8001118:	f7ff beea 	b.w	8000ef0 <ST7735_cmd>
 800111c:	48000400 	.word	0x48000400

08001120 <ST7735_Clear>:

void ST7735_Clear(uint16_t color) {
 8001120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	CH = color >> 8;
	CL = (uint8_t)color;

	CS_L();
	ST7735_AddrSet(0, 0, scr_width - 1, scr_height - 1);
 8001124:	4c17      	ldr	r4, [pc, #92]	; (8001184 <ST7735_Clear+0x64>)
 8001126:	4d18      	ldr	r5, [pc, #96]	; (8001188 <ST7735_Clear+0x68>)
	CS_L();
 8001128:	2200      	movs	r2, #0
 800112a:	2120      	movs	r1, #32
	CH = color >> 8;
 800112c:	ea4f 2810 	mov.w	r8, r0, lsr #8
	CL = (uint8_t)color;
 8001130:	b2c6      	uxtb	r6, r0
	CS_L();
 8001132:	4816      	ldr	r0, [pc, #88]	; (800118c <ST7735_Clear+0x6c>)
 8001134:	f001 ff46 	bl	8002fc4 <HAL_GPIO_WritePin>
	ST7735_AddrSet(0, 0, scr_width - 1, scr_height - 1);
 8001138:	8823      	ldrh	r3, [r4, #0]
 800113a:	882a      	ldrh	r2, [r5, #0]
 800113c:	2100      	movs	r1, #0
 800113e:	3b01      	subs	r3, #1
 8001140:	3a01      	subs	r2, #1
 8001142:	4608      	mov	r0, r1
 8001144:	b29b      	uxth	r3, r3
 8001146:	b292      	uxth	r2, r2
 8001148:	f7ff ffb2 	bl	80010b0 <ST7735_AddrSet>
	A0_H();
 800114c:	2201      	movs	r2, #1
 800114e:	2180      	movs	r1, #128	; 0x80
 8001150:	480e      	ldr	r0, [pc, #56]	; (800118c <ST7735_Clear+0x6c>)
 8001152:	f001 ff37 	bl	8002fc4 <HAL_GPIO_WritePin>
	for (i = 0; i < scr_width * scr_height; i++) {
 8001156:	2700      	movs	r7, #0
 8001158:	8829      	ldrh	r1, [r5, #0]
 800115a:	8823      	ldrh	r3, [r4, #0]
 800115c:	b2ba      	uxth	r2, r7
 800115e:	434b      	muls	r3, r1
 8001160:	429a      	cmp	r2, r3
 8001162:	f107 0701 	add.w	r7, r7, #1
 8001166:	db06      	blt.n	8001176 <ST7735_Clear+0x56>
		ST7735_write(CH);
		ST7735_write(CL);
	}
	CS_H();
 8001168:	2201      	movs	r2, #1
 800116a:	2120      	movs	r1, #32
 800116c:	4807      	ldr	r0, [pc, #28]	; (800118c <ST7735_Clear+0x6c>)
}
 800116e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	CS_H();
 8001172:	f001 bf27 	b.w	8002fc4 <HAL_GPIO_WritePin>
		ST7735_write(CH);
 8001176:	4640      	mov	r0, r8
 8001178:	f7ff feaa 	bl	8000ed0 <ST7735_write>
		ST7735_write(CL);
 800117c:	4630      	mov	r0, r6
 800117e:	f7ff fea7 	bl	8000ed0 <ST7735_write>
 8001182:	e7e9      	b.n	8001158 <ST7735_Clear+0x38>
 8001184:	2000c39a 	.word	0x2000c39a
 8001188:	2000c398 	.word	0x2000c398
 800118c:	48000400 	.word	0x48000400

08001190 <ST7735_Flush_3>:

void ST7735_Flush_3(lv_disp_drv_t * disp_drv, const lv_area_t * area, lv_color_t * color_p)
{
 8001190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t size;
	uint16_t teste = 0;

    size = ( ((area->x2 - area->x1) + 1)  * ((area->y2 - area->y1) + 1) );
 8001192:	f9b1 3000 	ldrsh.w	r3, [r1]
 8001196:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
{
 800119a:	4617      	mov	r7, r2
    size = ( ((area->x2 - area->x1) + 1)  * ((area->y2 - area->y1) + 1) );
 800119c:	1ae4      	subs	r4, r4, r3
 800119e:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 80011a2:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80011a6:	1a9b      	subs	r3, r3, r2
 80011a8:	3301      	adds	r3, #1
{
 80011aa:	460e      	mov	r6, r1

	CS_L();
 80011ac:	2200      	movs	r2, #0
 80011ae:	2120      	movs	r1, #32
{
 80011b0:	4605      	mov	r5, r0
    size = ( ((area->x2 - area->x1) + 1)  * ((area->y2 - area->y1) + 1) );
 80011b2:	3401      	adds	r4, #1
	CS_L();
 80011b4:	482c      	ldr	r0, [pc, #176]	; (8001268 <ST7735_Flush_3+0xd8>)
    size = ( ((area->x2 - area->x1) + 1)  * ((area->y2 - area->y1) + 1) );
 80011b6:	fb14 f403 	smulbb	r4, r4, r3
	CS_L();
 80011ba:	f001 ff03 	bl	8002fc4 <HAL_GPIO_WritePin>
    ST7735_cmd(0x2a); // Column address set
 80011be:	202a      	movs	r0, #42	; 0x2a
 80011c0:	f7ff fe96 	bl	8000ef0 <ST7735_cmd>
	A0_H();
 80011c4:	2201      	movs	r2, #1
 80011c6:	2180      	movs	r1, #128	; 0x80
 80011c8:	4827      	ldr	r0, [pc, #156]	; (8001268 <ST7735_Flush_3+0xd8>)
 80011ca:	f001 fefb 	bl	8002fc4 <HAL_GPIO_WritePin>
	ST7735_write(area->x1 >> 8);
 80011ce:	7870      	ldrb	r0, [r6, #1]
 80011d0:	f7ff fe7e 	bl	8000ed0 <ST7735_write>
	ST7735_write(area->x1);
 80011d4:	7830      	ldrb	r0, [r6, #0]
 80011d6:	f7ff fe7b 	bl	8000ed0 <ST7735_write>
	ST7735_write(area->x2 >> 8);
 80011da:	7970      	ldrb	r0, [r6, #5]
 80011dc:	f7ff fe78 	bl	8000ed0 <ST7735_write>
	ST7735_write(area->x2);
 80011e0:	7930      	ldrb	r0, [r6, #4]
 80011e2:	f7ff fe75 	bl	8000ed0 <ST7735_write>

	ST7735_cmd(0x2b); // Row address set
 80011e6:	202b      	movs	r0, #43	; 0x2b
 80011e8:	f7ff fe82 	bl	8000ef0 <ST7735_cmd>
	A0_H();
 80011ec:	2201      	movs	r2, #1
 80011ee:	2180      	movs	r1, #128	; 0x80
 80011f0:	481d      	ldr	r0, [pc, #116]	; (8001268 <ST7735_Flush_3+0xd8>)
 80011f2:	f001 fee7 	bl	8002fc4 <HAL_GPIO_WritePin>
	ST7735_write(area->y1 >> 8);
 80011f6:	78f0      	ldrb	r0, [r6, #3]
 80011f8:	f7ff fe6a 	bl	8000ed0 <ST7735_write>
	ST7735_write(area->y1);
 80011fc:	78b0      	ldrb	r0, [r6, #2]
 80011fe:	f7ff fe67 	bl	8000ed0 <ST7735_write>
	ST7735_write(area->y2 >> 8);
 8001202:	79f0      	ldrb	r0, [r6, #7]
 8001204:	f7ff fe64 	bl	8000ed0 <ST7735_write>
	ST7735_write(area->y2);
 8001208:	79b0      	ldrb	r0, [r6, #6]
 800120a:	f7ff fe61 	bl	8000ed0 <ST7735_write>

	ST7735_cmd(0x2c); // Memory write
 800120e:	202c      	movs	r0, #44	; 0x2c
 8001210:	f7ff fe6e 	bl	8000ef0 <ST7735_cmd>
	A0_H();
 8001214:	2201      	movs	r2, #1
 8001216:	4814      	ldr	r0, [pc, #80]	; (8001268 <ST7735_Flush_3+0xd8>)
 8001218:	2180      	movs	r1, #128	; 0x80
 800121a:	f001 fed3 	bl	8002fc4 <HAL_GPIO_WritePin>
//		HAL_SPI_Transmit(&_SPI_PORT, (uint8_t *)&tmp[0], 2, HAL_MAX_DELAY);
//		color_p++;
//		teste++;
//	}
	for(uint16_t x = 0; x <= size-1; x++) {
		buf_tft[(x*2) + 0] = color_p->full >> 8;
 800121e:	4813      	ldr	r0, [pc, #76]	; (800126c <ST7735_Flush_3+0xdc>)
    size = ( ((area->x2 - area->x1) + 1)  * ((area->y2 - area->y1) + 1) );
 8001220:	b2a4      	uxth	r4, r4
	for(uint16_t x = 0; x <= size-1; x++) {
 8001222:	2200      	movs	r2, #0
 8001224:	b293      	uxth	r3, r2
 8001226:	429c      	cmp	r4, r3
 8001228:	f102 0201 	add.w	r2, r2, #1
 800122c:	dc12      	bgt.n	8001254 <ST7735_Flush_3+0xc4>
		buf_tft[(x*2) + 1] = color_p->full;
		color_p++;
		teste++;
	}
	HAL_SPI_Transmit(&_SPI_PORT, (uint8_t *)&buf_tft[0], (size-1)*2, HAL_MAX_DELAY);
 800122e:	1e62      	subs	r2, r4, #1
 8001230:	0052      	lsls	r2, r2, #1
 8001232:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001236:	b292      	uxth	r2, r2
 8001238:	490c      	ldr	r1, [pc, #48]	; (800126c <ST7735_Flush_3+0xdc>)
 800123a:	480d      	ldr	r0, [pc, #52]	; (8001270 <ST7735_Flush_3+0xe0>)
 800123c:	f003 fda1 	bl	8004d82 <HAL_SPI_Transmit>

	CS_H();
 8001240:	4809      	ldr	r0, [pc, #36]	; (8001268 <ST7735_Flush_3+0xd8>)
 8001242:	2201      	movs	r2, #1
 8001244:	2120      	movs	r1, #32
 8001246:	f001 febd 	bl	8002fc4 <HAL_GPIO_WritePin>

//	sprintf(buffer, "ST7735-Flush3 X1: %d X2: %d Y1: %d Y2: %d Size: %d Teste: %d\n", area->x1, area->x2, area->y1, area->y2, size, teste);
//    LV_LOG_ERROR(buffer);
//    logI(buffer);

	lv_disp_flush_ready(disp_drv);                  /* Tell you are ready with the flushing*/
 800124a:	4628      	mov	r0, r5
}
 800124c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lv_disp_flush_ready(disp_drv);                  /* Tell you are ready with the flushing*/
 8001250:	f00b b990 	b.w	800c574 <lv_disp_flush_ready>
		buf_tft[(x*2) + 0] = color_p->full >> 8;
 8001254:	8839      	ldrh	r1, [r7, #0]
 8001256:	0a09      	lsrs	r1, r1, #8
 8001258:	f800 1013 	strb.w	r1, [r0, r3, lsl #1]
		buf_tft[(x*2) + 1] = color_p->full;
 800125c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001260:	f837 1b02 	ldrh.w	r1, [r7], #2
 8001264:	7059      	strb	r1, [r3, #1]
 8001266:	e7dd      	b.n	8001224 <ST7735_Flush_3+0x94>
 8001268:	48000400 	.word	0x48000400
 800126c:	200013a8 	.word	0x200013a8
 8001270:	2000c694 	.word	0x2000c694

08001274 <ST7735_PutChar5x7>:
		ST7735_write(CL);
	}
	CS_H();
}

void ST7735_PutChar5x7(uint16_t X, uint16_t Y, uint8_t chr, uint16_t color) {
 8001274:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	uint16_t i,j;
	uint8_t buffer[5];
    uint8_t CH = color >> 8;
 8001278:	ea4f 2813 	mov.w	r8, r3, lsr #8
    uint8_t CL = (uint8_t)color;
 800127c:	b2df      	uxtb	r7, r3

	memcpy(buffer,&Font5x7[(chr - 32) * 5],5);
 800127e:	f1a2 0320 	sub.w	r3, r2, #32
 8001282:	4a20      	ldr	r2, [pc, #128]	; (8001304 <ST7735_PutChar5x7+0x90>)
 8001284:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001288:	441a      	add	r2, r3
void ST7735_PutChar5x7(uint16_t X, uint16_t Y, uint8_t chr, uint16_t color) {
 800128a:	4604      	mov	r4, r0
	memcpy(buffer,&Font5x7[(chr - 32) * 5],5);
 800128c:	6810      	ldr	r0, [r2, #0]
 800128e:	7913      	ldrb	r3, [r2, #4]
 8001290:	9000      	str	r0, [sp, #0]
void ST7735_PutChar5x7(uint16_t X, uint16_t Y, uint8_t chr, uint16_t color) {
 8001292:	460d      	mov	r5, r1

	CS_L();
 8001294:	2200      	movs	r2, #0
 8001296:	2120      	movs	r1, #32
 8001298:	481b      	ldr	r0, [pc, #108]	; (8001308 <ST7735_PutChar5x7+0x94>)
	memcpy(buffer,&Font5x7[(chr - 32) * 5],5);
 800129a:	f88d 3004 	strb.w	r3, [sp, #4]
	CS_L();
 800129e:	f001 fe91 	bl	8002fc4 <HAL_GPIO_WritePin>
	ST7735_AddrSet(X,Y,X + 4,Y + 6);
 80012a2:	1dab      	adds	r3, r5, #6
 80012a4:	1d22      	adds	r2, r4, #4
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	b292      	uxth	r2, r2
 80012aa:	4629      	mov	r1, r5
 80012ac:	4620      	mov	r0, r4
 80012ae:	f7ff feff 	bl	80010b0 <ST7735_AddrSet>
	A0_H();
 80012b2:	2201      	movs	r2, #1
 80012b4:	2180      	movs	r1, #128	; 0x80
 80012b6:	4814      	ldr	r0, [pc, #80]	; (8001308 <ST7735_PutChar5x7+0x94>)
 80012b8:	f001 fe84 	bl	8002fc4 <HAL_GPIO_WritePin>
 80012bc:	2600      	movs	r6, #0
 80012be:	f04f 0a01 	mov.w	sl, #1
 80012c2:	fa0a f906 	lsl.w	r9, sl, r6
	for (j = 0; j < 7; j++) {
        for (i = 0; i < 5; i++) {
    		if ((buffer[i] >> j) & 0x01) {
 80012c6:	2500      	movs	r5, #0
 80012c8:	f81d 4005 	ldrb.w	r4, [sp, r5]
 80012cc:	ea14 0409 	ands.w	r4, r4, r9
 80012d0:	d013      	beq.n	80012fa <ST7735_PutChar5x7+0x86>
    			ST7735_write(CH);
 80012d2:	4640      	mov	r0, r8
 80012d4:	f7ff fdfc 	bl	8000ed0 <ST7735_write>
    			ST7735_write(CL);
 80012d8:	4638      	mov	r0, r7
 80012da:	3501      	adds	r5, #1
    		} else {
    			ST7735_write(0x00);
    			ST7735_write(0x00);
 80012dc:	f7ff fdf8 	bl	8000ed0 <ST7735_write>
        for (i = 0; i < 5; i++) {
 80012e0:	2d05      	cmp	r5, #5
 80012e2:	d1f1      	bne.n	80012c8 <ST7735_PutChar5x7+0x54>
 80012e4:	3601      	adds	r6, #1
	for (j = 0; j < 7; j++) {
 80012e6:	2e07      	cmp	r6, #7
 80012e8:	d1eb      	bne.n	80012c2 <ST7735_PutChar5x7+0x4e>
    		}
    	}
    }
	CS_H();
 80012ea:	4807      	ldr	r0, [pc, #28]	; (8001308 <ST7735_PutChar5x7+0x94>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	2120      	movs	r1, #32
}
 80012f0:	b002      	add	sp, #8
 80012f2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	CS_H();
 80012f6:	f001 be65 	b.w	8002fc4 <HAL_GPIO_WritePin>
    			ST7735_write(0x00);
 80012fa:	4620      	mov	r0, r4
 80012fc:	f7ff fde8 	bl	8000ed0 <ST7735_write>
    			ST7735_write(0x00);
 8001300:	4620      	mov	r0, r4
 8001302:	e7ea      	b.n	80012da <ST7735_PutChar5x7+0x66>
 8001304:	08010146 	.word	0x08010146
 8001308:	48000400 	.word	0x48000400

0800130c <ST7735_PutStr5x7>:

void ST7735_PutStr5x7(uint8_t X, uint8_t Y, char *str, uint16_t color) {
 800130c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    while (*str) {
        ST7735_PutChar5x7(X,Y,*str++,color);
        if (X < scr_width - 6) { X += 6; } else if (Y < scr_height - 8) { X = 0; Y += 8; } else { X = 0; Y = 0; }
 8001310:	f8df 8048 	ldr.w	r8, [pc, #72]	; 800135c <ST7735_PutStr5x7+0x50>
 8001314:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8001360 <ST7735_PutStr5x7+0x54>
void ST7735_PutStr5x7(uint8_t X, uint8_t Y, char *str, uint16_t color) {
 8001318:	4604      	mov	r4, r0
 800131a:	460d      	mov	r5, r1
 800131c:	461f      	mov	r7, r3
 800131e:	1e56      	subs	r6, r2, #1
    while (*str) {
 8001320:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8001324:	b90a      	cbnz	r2, 800132a <ST7735_PutStr5x7+0x1e>
    };
}
 8001326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ST7735_PutChar5x7(X,Y,*str++,color);
 800132a:	463b      	mov	r3, r7
 800132c:	4629      	mov	r1, r5
 800132e:	4620      	mov	r0, r4
 8001330:	f7ff ffa0 	bl	8001274 <ST7735_PutChar5x7>
        if (X < scr_width - 6) { X += 6; } else if (Y < scr_height - 8) { X = 0; Y += 8; } else { X = 0; Y = 0; }
 8001334:	f8b8 3000 	ldrh.w	r3, [r8]
 8001338:	3b06      	subs	r3, #6
 800133a:	429c      	cmp	r4, r3
 800133c:	da02      	bge.n	8001344 <ST7735_PutStr5x7+0x38>
 800133e:	3406      	adds	r4, #6
 8001340:	b2e4      	uxtb	r4, r4
 8001342:	e7ed      	b.n	8001320 <ST7735_PutStr5x7+0x14>
 8001344:	f8b9 3000 	ldrh.w	r3, [r9]
 8001348:	3b08      	subs	r3, #8
 800134a:	429d      	cmp	r5, r3
 800134c:	bfb7      	itett	lt
 800134e:	3508      	addlt	r5, #8
 8001350:	2500      	movge	r5, #0
 8001352:	b2ed      	uxtblt	r5, r5
 8001354:	2400      	movlt	r4, #0
 8001356:	bfa8      	it	ge
 8001358:	462c      	movge	r4, r5
 800135a:	e7e1      	b.n	8001320 <ST7735_PutStr5x7+0x14>
 800135c:	2000c398 	.word	0x2000c398
 8001360:	2000c39a 	.word	0x2000c39a

08001364 <ClearLog>:

/** Clear the duration parameter and the click count parameter of the button.
 */
void ClearLog(uint8_t key, uint8_t index)
{
	if(index < 8)
 8001364:	2907      	cmp	r1, #7
 8001366:	d807      	bhi.n	8001378 <ClearLog+0x14>
	{
		bt[key]->click[index] = bt[key]->duration[index] = 0;
 8001368:	4b04      	ldr	r3, [pc, #16]	; (800137c <ClearLog+0x18>)
 800136a:	2260      	movs	r2, #96	; 0x60
 800136c:	fb02 3000 	mla	r0, r2, r0, r3
 8001370:	4401      	add	r1, r0
 8001372:	2300      	movs	r3, #0
 8001374:	728b      	strb	r3, [r1, #10]
 8001376:	708b      	strb	r3, [r1, #2]
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	2000c3b4 	.word	0x2000c3b4

08001380 <KeyboardInit>:
{
 8001380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001384:	2500      	movs	r5, #0
 8001386:	4c0d      	ldr	r4, [pc, #52]	; (80013bc <KeyboardInit+0x3c>)
 8001388:	4680      	mov	r8, r0
		bt[x]->old_state = bt[x]->new_state = 0;
 800138a:	462e      	mov	r6, r5
 800138c:	fa5f f985 	uxtb.w	r9, r5
 8001390:	7066      	strb	r6, [r4, #1]
 8001392:	7026      	strb	r6, [r4, #0]
		bt[x]->mask = mask;
 8001394:	f884 8012 	strb.w	r8, [r4, #18]
		bt[x]->mode = 0;
 8001398:	74e6      	strb	r6, [r4, #19]
		bt[x]->flag = 0;
 800139a:	6166      	str	r6, [r4, #20]
		for(i = 0; i < 8; i++) {
 800139c:	2700      	movs	r7, #0
			ClearLog(x, i);
 800139e:	b2f9      	uxtb	r1, r7
 80013a0:	4648      	mov	r0, r9
		for(i = 0; i < 8; i++) {
 80013a2:	3701      	adds	r7, #1
			ClearLog(x, i);
 80013a4:	f7ff ffde 	bl	8001364 <ClearLog>
		for(i = 0; i < 8; i++) {
 80013a8:	2f08      	cmp	r7, #8
 80013aa:	d1f8      	bne.n	800139e <KeyboardInit+0x1e>
 80013ac:	3501      	adds	r5, #1
	for(x = 0; x < 6; x++) {
 80013ae:	2d06      	cmp	r5, #6
 80013b0:	f104 0460 	add.w	r4, r4, #96	; 0x60
 80013b4:	d1ea      	bne.n	800138c <KeyboardInit+0xc>
}
 80013b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80013ba:	bf00      	nop
 80013bc:	2000c3b4 	.word	0x2000c3b4

080013c0 <KeyboardSetMode>:
	}
}

void KeyboardSetMode(uint8_t key, uint8_t mode, bool flag)
{
 80013c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i;

	// clear data
	bt[key]->old_state = bt[key]->new_state = 0;
 80013c2:	4e0c      	ldr	r6, [pc, #48]	; (80013f4 <KeyboardSetMode+0x34>)
{
 80013c4:	460f      	mov	r7, r1
	bt[key]->old_state = bt[key]->new_state = 0;
 80013c6:	2160      	movs	r1, #96	; 0x60
 80013c8:	4341      	muls	r1, r0
 80013ca:	2400      	movs	r4, #0
{
 80013cc:	4605      	mov	r5, r0
	bt[key]->old_state = bt[key]->new_state = 0;
 80013ce:	1870      	adds	r0, r6, r1
	// this looks weird but correct
	bt[key]->flag = !flag;
 80013d0:	f082 0201 	eor.w	r2, r2, #1
	bt[key]->old_state = bt[key]->new_state = 0;
 80013d4:	5474      	strb	r4, [r6, r1]
 80013d6:	7044      	strb	r4, [r0, #1]
	bt[key]->flag = !flag;
 80013d8:	6142      	str	r2, [r0, #20]

	// clear log
	for(i = 0; i < 8; i++)
	{
		ClearLog(key, i);
 80013da:	b2e1      	uxtb	r1, r4
 80013dc:	4628      	mov	r0, r5
	for(i = 0; i < 8; i++)
 80013de:	3401      	adds	r4, #1
		ClearLog(key, i);
 80013e0:	f7ff ffc0 	bl	8001364 <ClearLog>
	for(i = 0; i < 8; i++)
 80013e4:	2c08      	cmp	r4, #8
 80013e6:	d1f8      	bne.n	80013da <KeyboardSetMode+0x1a>
	}

	// change mode
	bt[key]->mode = mode;
 80013e8:	2360      	movs	r3, #96	; 0x60
 80013ea:	fb03 6505 	mla	r5, r3, r5, r6
 80013ee:	74ef      	strb	r7, [r5, #19]
 80013f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013f2:	bf00      	nop
 80013f4:	2000c3b4 	.word	0x2000c3b4

080013f8 <PushButton_Read>:
	bt[key]->old_state = bt[key]->new_state;
}


uint8_t PushButton_Read(uint8_t key)
{
 80013f8:	b508      	push	{r3, lr}
	uint8_t ret = 0x00;

	switch(key) {
 80013fa:	2803      	cmp	r0, #3
 80013fc:	d815      	bhi.n	800142a <PushButton_Read+0x32>
 80013fe:	e8df f000 	tbb	[pc, r0]
 8001402:	0b02      	.short	0x0b02
 8001404:	110e      	.short	0x110e
		case 0:			// Down
			ret = !(HAL_GPIO_ReadPin(KEY_DN_GPIO_Port, KEY_DN_Pin));
 8001406:	f44f 5180 	mov.w	r1, #4096	; 0x1000
			break;
		case 2:			// Enter
			ret = !(HAL_GPIO_ReadPin(KEY_ENTER_GPIO_Port, KEY_ENTER_Pin));
			break;
		case 3:			// Esc
			ret = !(HAL_GPIO_ReadPin(KEY_ESC_GPIO_Port, KEY_ESC_Pin));
 800140a:	4809      	ldr	r0, [pc, #36]	; (8001430 <PushButton_Read+0x38>)
 800140c:	f001 fdd4 	bl	8002fb8 <HAL_GPIO_ReadPin>
 8001410:	fab0 f080 	clz	r0, r0
 8001414:	0940      	lsrs	r0, r0, #5
			break;
 8001416:	bd08      	pop	{r3, pc}
			ret = !(HAL_GPIO_ReadPin(KEY_UP_GPIO_Port, KEY_UP_Pin));
 8001418:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800141c:	e7f5      	b.n	800140a <PushButton_Read+0x12>
			ret = !(HAL_GPIO_ReadPin(KEY_ENTER_GPIO_Port, KEY_ENTER_Pin));
 800141e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001422:	e7f2      	b.n	800140a <PushButton_Read+0x12>
			ret = !(HAL_GPIO_ReadPin(KEY_ESC_GPIO_Port, KEY_ESC_Pin));
 8001424:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001428:	e7ef      	b.n	800140a <PushButton_Read+0x12>
	uint8_t ret = 0x00;
 800142a:	2000      	movs	r0, #0
		default:
			break;
	}
	return ret;
}
 800142c:	bd08      	pop	{r3, pc}
 800142e:	bf00      	nop
 8001430:	48000400 	.word	0x48000400

08001434 <Evt_EnQueue>:
 *
 * \param  event data in an array of uint8_t
 * \return false if the queue is full
 */
bool Evt_EnQueue(uint8_t *event)
{
 8001434:	b530      	push	{r4, r5, lr}
	unsigned i;
	uint8_t next = ADVANCE_QPTR(evt_queue.head);
 8001436:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <Evt_EnQueue+0x34>)
 8001438:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80

	// queue is full
	if(next == evt_queue.tail)
 800143c:	f893 4081 	ldrb.w	r4, [r3, #129]	; 0x81
	uint8_t next = ADVANCE_QPTR(evt_queue.head);
 8001440:	1c51      	adds	r1, r2, #1
 8001442:	f001 0107 	and.w	r1, r1, #7
	if(next == evt_queue.tail)
 8001446:	428c      	cmp	r4, r1
 8001448:	d00b      	beq.n	8001462 <Evt_EnQueue+0x2e>
 800144a:	eb03 1402 	add.w	r4, r3, r2, lsl #4
 800144e:	2200      	movs	r2, #0
	}

	// copy event bytes into the buffer
	for(i = 0; i < EVT_QWIDTH; i++)
	{
		evt_queue.buff[evt_queue.head][i] = event[i];
 8001450:	5c85      	ldrb	r5, [r0, r2]
 8001452:	54a5      	strb	r5, [r4, r2]
	for(i = 0; i < EVT_QWIDTH; i++)
 8001454:	3201      	adds	r2, #1
 8001456:	2a10      	cmp	r2, #16
 8001458:	d1fa      	bne.n	8001450 <Evt_EnQueue+0x1c>
	}
	// move to the next positition
	evt_queue.head = next;
 800145a:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80

	//logI("I - Evt_EnQueue OK\n\r");
	return true;
 800145e:	2001      	movs	r0, #1
 8001460:	bd30      	pop	{r4, r5, pc}
		return false;
 8001462:	2000      	movs	r0, #0
}
 8001464:	bd30      	pop	{r4, r5, pc}
 8001466:	bf00      	nop
 8001468:	200023a8 	.word	0x200023a8

0800146c <KeyboardRead>:
{
 800146c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800146e:	4604      	mov	r4, r0
	bt[key]->new_state = PushButton_Read(key);
 8001470:	4e42      	ldr	r6, [pc, #264]	; (800157c <KeyboardRead+0x110>)
 8001472:	f7ff ffc1 	bl	80013f8 <PushButton_Read>
 8001476:	2260      	movs	r2, #96	; 0x60
 8001478:	4362      	muls	r2, r4
 800147a:	18b3      	adds	r3, r6, r2
	diff_state = bt[key]->old_state ^ bt[key]->new_state;
 800147c:	5cb2      	ldrb	r2, [r6, r2]
	if(((bt[key]->mode >> i) & 0x01)  == PUSHBTN_MODE_UDOWN) {
 800147e:	7cd9      	ldrb	r1, [r3, #19]
	bt[key]->new_state = PushButton_Read(key);
 8001480:	7058      	strb	r0, [r3, #1]
	if(((bt[key]->mode >> i) & 0x01)  == PUSHBTN_MODE_UDOWN) {
 8001482:	07c9      	lsls	r1, r1, #31
 8001484:	d521      	bpl.n	80014ca <KeyboardRead+0x5e>
		if(((bt[key]->new_state >> i) & 0x01) == 0x01) {
 8001486:	f010 0101 	ands.w	r1, r0, #1
 800148a:	d011      	beq.n	80014b0 <KeyboardRead+0x44>
			event[0] = EVT_PBTN_INPUT;
 800148c:	2310      	movs	r3, #16
 800148e:	f88d 3000 	strb.w	r3, [sp]
			event[1] = (uint8_t)key;
 8001492:	f88d 4001 	strb.w	r4, [sp, #1]
			event[2] = PBTN_DOWN;
 8001496:	2305      	movs	r3, #5
				Evt_EnQueue(event);
 8001498:	4668      	mov	r0, sp
				event[2] = PBTN_ENDN;
 800149a:	f88d 3002 	strb.w	r3, [sp, #2]
				Evt_EnQueue(event);
 800149e:	f7ff ffc9 	bl	8001434 <Evt_EnQueue>
	bt[key]->old_state = bt[key]->new_state;
 80014a2:	2360      	movs	r3, #96	; 0x60
 80014a4:	435c      	muls	r4, r3
 80014a6:	1933      	adds	r3, r6, r4
 80014a8:	785b      	ldrb	r3, [r3, #1]
 80014aa:	5533      	strb	r3, [r6, r4]
}
 80014ac:	b004      	add	sp, #16
 80014ae:	bd70      	pop	{r4, r5, r6, pc}
			if(((bt[key]->old_state >> i) & 0x01) == 0x01) {
 80014b0:	07d3      	lsls	r3, r2, #31
 80014b2:	d5f6      	bpl.n	80014a2 <KeyboardRead+0x36>
				KeyboardSetMode(key, PUSHBTN_MODE_CLICK, true);
 80014b4:	2201      	movs	r2, #1
 80014b6:	4620      	mov	r0, r4
 80014b8:	f7ff ff82 	bl	80013c0 <KeyboardSetMode>
				event[0] = EVT_PBTN_INPUT;
 80014bc:	2310      	movs	r3, #16
 80014be:	f88d 3000 	strb.w	r3, [sp]
				event[1] = (uint8_t)key;
 80014c2:	f88d 4001 	strb.w	r4, [sp, #1]
				event[2] = PBTN_ENDN;
 80014c6:	2306      	movs	r3, #6
 80014c8:	e7e6      	b.n	8001498 <KeyboardRead+0x2c>
	diff_state = bt[key]->old_state ^ bt[key]->new_state;
 80014ca:	4042      	eors	r2, r0
		if((diff_state >> i) & 0x01) {
 80014cc:	07d5      	lsls	r5, r2, #31
 80014ce:	d520      	bpl.n	8001512 <KeyboardRead+0xa6>
			bt[key]->duration[i] = 1;
 80014d0:	2201      	movs	r2, #1
 80014d2:	729a      	strb	r2, [r3, #10]
			if(((bt[key]->new_state >> i) & 0x01) == 0x00) {
 80014d4:	4002      	ands	r2, r0
 80014d6:	d107      	bne.n	80014e8 <KeyboardRead+0x7c>
				if(bt[key]->flag) {
 80014d8:	6959      	ldr	r1, [r3, #20]
 80014da:	b111      	cbz	r1, 80014e2 <KeyboardRead+0x76>
					bt[key]->flag = false;
 80014dc:	615a      	str	r2, [r3, #20]
				bt[key]->duration[i]++;
 80014de:	729a      	strb	r2, [r3, #10]
 80014e0:	e002      	b.n	80014e8 <KeyboardRead+0x7c>
					bt[key]->click[i]++;
 80014e2:	789a      	ldrb	r2, [r3, #2]
 80014e4:	3201      	adds	r2, #1
 80014e6:	709a      	strb	r2, [r3, #2]
		if(bt[key]->click[i] >= 3) {
 80014e8:	2560      	movs	r5, #96	; 0x60
 80014ea:	fb05 6504 	mla	r5, r5, r4, r6
 80014ee:	78aa      	ldrb	r2, [r5, #2]
 80014f0:	2a02      	cmp	r2, #2
 80014f2:	d915      	bls.n	8001520 <KeyboardRead+0xb4>
			event[0] = EVT_PBTN_INPUT;
 80014f4:	2310      	movs	r3, #16
 80014f6:	f88d 3000 	strb.w	r3, [sp]
			Evt_EnQueue(event);
 80014fa:	4668      	mov	r0, sp
			event[2] = PBTN_TCLK;
 80014fc:	2304      	movs	r3, #4
 80014fe:	f88d 3002 	strb.w	r3, [sp, #2]
			event[1] = (uint8_t)key;
 8001502:	f88d 4001 	strb.w	r4, [sp, #1]
			Evt_EnQueue(event);
 8001506:	f7ff ff95 	bl	8001434 <Evt_EnQueue>
			bt[key]->click[i] = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	70ab      	strb	r3, [r5, #2]
			bt[key]->duration[i] = 0;
 800150e:	72ab      	strb	r3, [r5, #10]
 8001510:	e7c7      	b.n	80014a2 <KeyboardRead+0x36>
			if((bt[key]->duration[i] > 0) && (bt[key]->duration[i] < PUSHBTN_TO_MAX)) {
 8001512:	7a9a      	ldrb	r2, [r3, #10]
 8001514:	1e51      	subs	r1, r2, #1
 8001516:	b2c9      	uxtb	r1, r1
 8001518:	29fd      	cmp	r1, #253	; 0xfd
 800151a:	d8e5      	bhi.n	80014e8 <KeyboardRead+0x7c>
				bt[key]->duration[i]++;
 800151c:	3201      	adds	r2, #1
 800151e:	e7de      	b.n	80014de <KeyboardRead+0x72>
		else if((bt[key]->duration[i] > PUSHBTN_TO_SHORT) &&	(((bt[key]->new_state >> i) & 0x01) == 0x00)) {
 8001520:	7aab      	ldrb	r3, [r5, #10]
 8001522:	2b03      	cmp	r3, #3
 8001524:	d9bd      	bls.n	80014a2 <KeyboardRead+0x36>
 8001526:	07c1      	lsls	r1, r0, #31
 8001528:	d414      	bmi.n	8001554 <KeyboardRead+0xe8>
 800152a:	2310      	movs	r3, #16
			if(bt[key]->click[i] == 2) {
 800152c:	2a02      	cmp	r2, #2
				event[0] = EVT_PBTN_INPUT;
 800152e:	f88d 3000 	strb.w	r3, [sp]
				Evt_EnQueue(event);
 8001532:	4668      	mov	r0, sp
				event[2] = PBTN_DCLK;
 8001534:	bf0c      	ite	eq
 8001536:	2303      	moveq	r3, #3
				event[2] = PBTN_SCLK;
 8001538:	2301      	movne	r3, #1
 800153a:	f88d 3002 	strb.w	r3, [sp, #2]
				event[1] = (uint8_t)key;
 800153e:	f88d 4001 	strb.w	r4, [sp, #1]
				Evt_EnQueue(event);
 8001542:	f7ff ff77 	bl	8001434 <Evt_EnQueue>
			bt[key]->click[i] = 0;
 8001546:	2360      	movs	r3, #96	; 0x60
 8001548:	fb03 6304 	mla	r3, r3, r4, r6
 800154c:	2200      	movs	r2, #0
 800154e:	709a      	strb	r2, [r3, #2]
			bt[key]->duration[i] = 0;
 8001550:	729a      	strb	r2, [r3, #10]
 8001552:	e7a6      	b.n	80014a2 <KeyboardRead+0x36>
		else if((bt[key]->duration[i] > PUSHBTN_TO_LONG) && (((bt[key]->new_state >> i) & 0x01) == 0x01)) {
 8001554:	2b0a      	cmp	r3, #10
 8001556:	d9a4      	bls.n	80014a2 <KeyboardRead+0x36>
			event[0] = EVT_PBTN_INPUT;
 8001558:	2310      	movs	r3, #16
 800155a:	f88d 3000 	strb.w	r3, [sp]
			Evt_EnQueue(event);
 800155e:	4668      	mov	r0, sp
			event[2] = PBTN_LCLK;
 8001560:	2302      	movs	r3, #2
 8001562:	f88d 3002 	strb.w	r3, [sp, #2]
			event[1] = (uint8_t)key;
 8001566:	f88d 4001 	strb.w	r4, [sp, #1]
			Evt_EnQueue(event);
 800156a:	f7ff ff63 	bl	8001434 <Evt_EnQueue>
			bt[key]->click[i] = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	70ab      	strb	r3, [r5, #2]
			bt[key]->duration[i] = 0;
 8001572:	72ab      	strb	r3, [r5, #10]
			bt[key]->flag = true;
 8001574:	2301      	movs	r3, #1
 8001576:	616b      	str	r3, [r5, #20]
 8001578:	e793      	b.n	80014a2 <KeyboardRead+0x36>
 800157a:	bf00      	nop
 800157c:	2000c3b4 	.word	0x2000c3b4

08001580 <Key_Read>:
{
 8001580:	b510      	push	{r4, lr}
 8001582:	2400      	movs	r4, #0
		KeyboardRead(x);
 8001584:	b2e0      	uxtb	r0, r4
 8001586:	3401      	adds	r4, #1
 8001588:	f7ff ff70 	bl	800146c <KeyboardRead>
	for(x = 0; x < 6; x++) {
 800158c:	2c06      	cmp	r4, #6
 800158e:	d1f9      	bne.n	8001584 <Key_Read+0x4>
}
 8001590:	bd10      	pop	{r4, pc}
	...

08001594 <Evt_DeQueue>:

	// disable all timers
	//UsrTimer_Enable(false);

	// queue is not empty
	if(evt_queue.tail != evt_queue.head)
 8001594:	4b0d      	ldr	r3, [pc, #52]	; (80015cc <Evt_DeQueue+0x38>)
 8001596:	f893 1081 	ldrb.w	r1, [r3, #129]	; 0x81
 800159a:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800159e:	4291      	cmp	r1, r2
 80015a0:	d012      	beq.n	80015c8 <Evt_DeQueue+0x34>
 80015a2:	2200      	movs	r2, #0
	{
		// copy event bytes into the buffer
		for(i = 0; i < EVT_QWIDTH; i++)
		{
			event[i] = evt_queue.buff[evt_queue.tail][i];
 80015a4:	f893 1081 	ldrb.w	r1, [r3, #129]	; 0x81
 80015a8:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 80015ac:	5c89      	ldrb	r1, [r1, r2]
 80015ae:	5481      	strb	r1, [r0, r2]
 80015b0:	3201      	adds	r2, #1
		for(i = 0; i < EVT_QWIDTH; i++)
 80015b2:	2a10      	cmp	r2, #16
 80015b4:	d1f6      	bne.n	80015a4 <Evt_DeQueue+0x10>
		}
		// move to the next position
		evt_queue.tail = ADVANCE_QPTR(evt_queue.tail);
 80015b6:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 80015ba:	3201      	adds	r2, #1
 80015bc:	f002 0207 	and.w	r2, r2, #7
 80015c0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
		// set flag
		flag = true;
 80015c4:	2001      	movs	r0, #1
 80015c6:	4770      	bx	lr
	bool flag = false;
 80015c8:	2000      	movs	r0, #0
	// enable all timers
	//UsrTimer_Enable(true);

	// return with the flag
	return flag;
}
 80015ca:	4770      	bx	lr
 80015cc:	200023a8 	.word	0x200023a8

080015d0 <Evt_InitQueue>:
 * the data in the queue.
 */
void Evt_InitQueue(void)
{
	// clear queue by resetting the pointers
	evt_queue.head = evt_queue.tail = 0;
 80015d0:	4b03      	ldr	r3, [pc, #12]	; (80015e0 <Evt_InitQueue+0x10>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
 80015d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	200023a8 	.word	0x200023a8

080015e4 <KeyboardEvent>:
}

// Eventos Teclado
void KeyboardEvent(void)
{
 80015e4:	b530      	push	{r4, r5, lr}
	uint8_t event[EVT_QWIDTH];
	const char* teclas[] = {"KEY-DOWN", "KEY-UP", "KEY-ENTER", "KEY-ESC", "KEY-ROTARY", "KEY-USER"};
 80015e6:	4d2c      	ldr	r5, [pc, #176]	; (8001698 <KeyboardEvent+0xb4>)
 80015e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
 80015ea:	b08b      	sub	sp, #44	; 0x2c
	const char* teclas[] = {"KEY-DOWN", "KEY-UP", "KEY-ENTER", "KEY-ESC", "KEY-ROTARY", "KEY-USER"};
 80015ec:	ac04      	add	r4, sp, #16
 80015ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015f0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80015f4:	e884 0003 	stmia.w	r4, {r0, r1}

	// check event queue
	if(Evt_DeQueue(event)) {
 80015f8:	4668      	mov	r0, sp
 80015fa:	f7ff ffcb 	bl	8001594 <Evt_DeQueue>
 80015fe:	b188      	cbz	r0, 8001624 <KeyboardEvent+0x40>
		switch(event[0]) {
 8001600:	f89d 3000 	ldrb.w	r3, [sp]
 8001604:	2b10      	cmp	r3, #16
 8001606:	d10d      	bne.n	8001624 <KeyboardEvent+0x40>
			// pushbutton event ================================================
			// event[1]: button id
			// event[2]: PBTN_SCLK, _DCLK, _TCLK, _LCLK, _DOWN, _ENDN
			case EVT_PBTN_INPUT:
				if(event[2] == PBTN_SCLK) {
 8001608:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d10b      	bne.n	8001628 <KeyboardEvent+0x44>
					}
					else if(event[1] == 3) {
						// KEY_ESC PWM++

					}
					logI("\r\nButton %s: single click.", teclas[event[1]]);
 8001610:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8001614:	4821      	ldr	r0, [pc, #132]	; (800169c <KeyboardEvent+0xb8>)
 8001616:	aa0a      	add	r2, sp, #40	; 0x28
 8001618:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800161c:	f853 1c18 	ldr.w	r1, [r3, #-24]
				}
				else if(event[2] == PBTN_DOWN) {
					logI("\r\nButton %s: is being pressed.", teclas[event[1]]);
				}
				else if(event[2] == PBTN_ENDN) {
					logI("\r\nButton %s: has been released.", teclas[event[1]]);
 8001620:	f000 f86a 	bl	80016f8 <logI>
					//logI("\r\n --> Switch to click mode.");
				}
				break;
		}
	}
}
 8001624:	b00b      	add	sp, #44	; 0x2c
 8001626:	bd30      	pop	{r4, r5, pc}
				else if(event[2] == PBTN_LCLK) {
 8001628:	2b02      	cmp	r3, #2
 800162a:	d108      	bne.n	800163e <KeyboardEvent+0x5a>
					logI("\r\nButton %s: long click.", teclas[event[1]]);
 800162c:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8001630:	481b      	ldr	r0, [pc, #108]	; (80016a0 <KeyboardEvent+0xbc>)
 8001632:	aa0a      	add	r2, sp, #40	; 0x28
 8001634:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001638:	f853 1c18 	ldr.w	r1, [r3, #-24]
 800163c:	e7f0      	b.n	8001620 <KeyboardEvent+0x3c>
				else if(event[2] == PBTN_DCLK) {
 800163e:	2b03      	cmp	r3, #3
 8001640:	d108      	bne.n	8001654 <KeyboardEvent+0x70>
					logI("\r\nButton %s: double click.", teclas[event[1]]);
 8001642:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8001646:	4817      	ldr	r0, [pc, #92]	; (80016a4 <KeyboardEvent+0xc0>)
 8001648:	aa0a      	add	r2, sp, #40	; 0x28
 800164a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800164e:	f853 1c18 	ldr.w	r1, [r3, #-24]
 8001652:	e7e5      	b.n	8001620 <KeyboardEvent+0x3c>
				else if(event[2] == PBTN_TCLK) {
 8001654:	2b04      	cmp	r3, #4
 8001656:	d108      	bne.n	800166a <KeyboardEvent+0x86>
					logI("\r\nButton %s: triple click.", teclas[event[1]]);
 8001658:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800165c:	4812      	ldr	r0, [pc, #72]	; (80016a8 <KeyboardEvent+0xc4>)
 800165e:	aa0a      	add	r2, sp, #40	; 0x28
 8001660:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001664:	f853 1c18 	ldr.w	r1, [r3, #-24]
 8001668:	e7da      	b.n	8001620 <KeyboardEvent+0x3c>
				else if(event[2] == PBTN_DOWN) {
 800166a:	2b05      	cmp	r3, #5
 800166c:	d108      	bne.n	8001680 <KeyboardEvent+0x9c>
					logI("\r\nButton %s: is being pressed.", teclas[event[1]]);
 800166e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8001672:	480e      	ldr	r0, [pc, #56]	; (80016ac <KeyboardEvent+0xc8>)
 8001674:	aa0a      	add	r2, sp, #40	; 0x28
 8001676:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800167a:	f853 1c18 	ldr.w	r1, [r3, #-24]
 800167e:	e7cf      	b.n	8001620 <KeyboardEvent+0x3c>
				else if(event[2] == PBTN_ENDN) {
 8001680:	2b06      	cmp	r3, #6
 8001682:	d1cf      	bne.n	8001624 <KeyboardEvent+0x40>
					logI("\r\nButton %s: has been released.", teclas[event[1]]);
 8001684:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8001688:	4809      	ldr	r0, [pc, #36]	; (80016b0 <KeyboardEvent+0xcc>)
 800168a:	aa0a      	add	r2, sp, #40	; 0x28
 800168c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001690:	f853 1c18 	ldr.w	r1, [r3, #-24]
 8001694:	e7c4      	b.n	8001620 <KeyboardEvent+0x3c>
 8001696:	bf00      	nop
 8001698:	08010118 	.word	0x08010118
 800169c:	08010326 	.word	0x08010326
 80016a0:	08010341 	.word	0x08010341
 80016a4:	0801035a 	.word	0x0801035a
 80016a8:	08010375 	.word	0x08010375
 80016ac:	08010390 	.word	0x08010390
 80016b0:	080103af 	.word	0x080103af

080016b4 <HAL_printf_valist>:
/** Custom printf function in order to use HAL_UART_Transmit()
 * @param *fmt String to print
 * @param argp Parameters list
 */
void HAL_printf_valist(const char *fmt, va_list argp)
{
 80016b4:	b500      	push	{lr}
 80016b6:	b0c1      	sub	sp, #260	; 0x104
  char string[PRINT_BUFFER_SIZE];

  if (vsprintf(string, fmt, argp) > 0) {
 80016b8:	460a      	mov	r2, r1
 80016ba:	4601      	mov	r1, r0
 80016bc:	4668      	mov	r0, sp
 80016be:	f00d f88b 	bl	800e7d8 <vsprintf>
 80016c2:	2800      	cmp	r0, #0
 80016c4:	dd0f      	ble.n	80016e6 <HAL_printf_valist+0x32>
    HAL_UART_Transmit(&huart2, (uint8_t*)string, strlen(string), HAL_MAX_DELAY); // send message via UART
 80016c6:	4668      	mov	r0, sp
 80016c8:	f7fe fd8c 	bl	80001e4 <strlen>
 80016cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016d0:	b282      	uxth	r2, r0
 80016d2:	4669      	mov	r1, sp
  } else {
	HAL_UART_Transmit(&huart2, (uint8_t*)"E - Print\n", 14, HAL_MAX_DELAY);
 80016d4:	4806      	ldr	r0, [pc, #24]	; (80016f0 <HAL_printf_valist+0x3c>)
 80016d6:	f004 fbbe 	bl	8005e56 <HAL_UART_Transmit>
  }
  HAL_Delay(10);
 80016da:	200a      	movs	r0, #10
 80016dc:	f000 ff08 	bl	80024f0 <HAL_Delay>
}
 80016e0:	b041      	add	sp, #260	; 0x104
 80016e2:	f85d fb04 	ldr.w	pc, [sp], #4
	HAL_UART_Transmit(&huart2, (uint8_t*)"E - Print\n", 14, HAL_MAX_DELAY);
 80016e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016ea:	220e      	movs	r2, #14
 80016ec:	4901      	ldr	r1, [pc, #4]	; (80016f4 <HAL_printf_valist+0x40>)
 80016ee:	e7f1      	b.n	80016d4 <HAL_printf_valist+0x20>
 80016f0:	2000c780 	.word	0x2000c780
 80016f4:	08010405 	.word	0x08010405

080016f8 <logI>:
/** LOG procedure - Info
 * @param *fmt String to print
 * @param ... Parameters list
 */
void logI(const char* fmt, ...)
{
 80016f8:	b40f      	push	{r0, r1, r2, r3}
 80016fa:	b507      	push	{r0, r1, r2, lr}
 80016fc:	a904      	add	r1, sp, #16
 80016fe:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list argp;

	va_start(argp, fmt);
 8001702:	9101      	str	r1, [sp, #4]
	HAL_printf_valist(fmt, argp);
 8001704:	f7ff ffd6 	bl	80016b4 <HAL_printf_valist>
	logUSB(fmt, argp);
	va_end(argp);
}
 8001708:	b003      	add	sp, #12
 800170a:	f85d eb04 	ldr.w	lr, [sp], #4
 800170e:	b004      	add	sp, #16
 8001710:	4770      	bx	lr
	...

08001714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001718:	b0b8      	sub	sp, #224	; 0xe0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800171a:	2244      	movs	r2, #68	; 0x44
 800171c:	2100      	movs	r1, #0
 800171e:	a805      	add	r0, sp, #20
 8001720:	f00c f823 	bl	800d76a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001724:	2214      	movs	r2, #20
 8001726:	2100      	movs	r1, #0
 8001728:	4668      	mov	r0, sp
 800172a:	f00c f81e 	bl	800d76a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800172e:	2100      	movs	r1, #0
 8001730:	2288      	movs	r2, #136	; 0x88
 8001732:	a816      	add	r0, sp, #88	; 0x58
 8001734:	f00c f819 	bl	800d76a <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8001738:	f002 f96e 	bl	8003a18 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800173c:	4a25      	ldr	r2, [pc, #148]	; (80017d4 <SystemClock_Config+0xc0>)
 800173e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001742:	f023 0318 	bic.w	r3, r3, #24
 8001746:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800174a:	2305      	movs	r3, #5
 800174c:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800174e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001752:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001754:	2603      	movs	r6, #3
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001756:	2701      	movs	r7, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001758:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 16;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800175a:	f04f 0807 	mov.w	r8, #7
  RCC_OscInitStruct.PLL.PLLN = 16;
 800175e:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001760:	a805      	add	r0, sp, #20
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001762:	2500      	movs	r5, #0
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001764:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001766:	9707      	str	r7, [sp, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001768:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800176a:	9610      	str	r6, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800176c:	9711      	str	r7, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800176e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001772:	9414      	str	r4, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001774:	9415      	str	r4, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001776:	f002 faab 	bl	8003cd0 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800177a:	4631      	mov	r1, r6
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800177c:	230f      	movs	r3, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800177e:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001780:	e88d 0048 	stmia.w	sp, {r3, r6}
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001784:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001786:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001788:	9504      	str	r5, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800178a:	f002 fd03 	bl	8004194 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 800178e:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <SystemClock_Config+0xc4>)
 8001790:	9316      	str	r3, [sp, #88]	; 0x58
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001792:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001796:	9334      	str	r3, [sp, #208]	; 0xd0
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001798:	f44f 7380 	mov.w	r3, #256	; 0x100
 800179c:	9337      	str	r3, [sp, #220]	; 0xdc
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800179e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80017a2:	9331      	str	r3, [sp, #196]	; 0xc4
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
  PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 80017a4:	230c      	movs	r3, #12
 80017a6:	9319      	str	r3, [sp, #100]	; 0x64
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017a8:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 80017aa:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 80017ae:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80017b0:	9525      	str	r5, [sp, #148]	; 0x94
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80017b2:	952a      	str	r5, [sp, #168]	; 0xa8
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 80017b4:	9617      	str	r6, [sp, #92]	; 0x5c
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80017b6:	9718      	str	r7, [sp, #96]	; 0x60
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80017b8:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80017bc:	941b      	str	r4, [sp, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80017be:	941c      	str	r4, [sp, #112]	; 0x70
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017c0:	f002 fed2 	bl	8004568 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80017c4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80017c8:	f002 f936 	bl	8003a38 <HAL_PWREx_ControlVoltageScaling>
  {
    Error_Handler();
  }
}
 80017cc:	b038      	add	sp, #224	; 0xe0
 80017ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80017d2:	bf00      	nop
 80017d4:	40021000 	.word	0x40021000
 80017d8:	00026042 	.word	0x00026042
 80017dc:	00000000 	.word	0x00000000

080017e0 <main>:
{
 80017e0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80017e4:	b09b      	sub	sp, #108	; 0x6c
  HAL_Init();
 80017e6:	f000 fe5b 	bl	80024a0 <HAL_Init>
  SystemClock_Config();
 80017ea:	f7ff ff93 	bl	8001714 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ee:	2214      	movs	r2, #20
 80017f0:	2100      	movs	r1, #0
 80017f2:	a80f      	add	r0, sp, #60	; 0x3c
 80017f4:	f00b ffb9 	bl	800d76a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017f8:	4bb7      	ldr	r3, [pc, #732]	; (8001ad8 <main+0x2f8>)
  huart2.Instance = USART2;
 80017fa:	f8df 8328 	ldr.w	r8, [pc, #808]	; 8001b24 <main+0x344>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  hi2c1.Instance = I2C1;
 8001800:	4db6      	ldr	r5, [pc, #728]	; (8001adc <main+0x2fc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001802:	f042 0204 	orr.w	r2, r2, #4
 8001806:	64da      	str	r2, [r3, #76]	; 0x4c
 8001808:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800180a:	f002 0204 	and.w	r2, r2, #4
 800180e:	9203      	str	r2, [sp, #12]
 8001810:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001812:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001814:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001818:	64da      	str	r2, [r3, #76]	; 0x4c
 800181a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800181c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001820:	9204      	str	r2, [sp, #16]
 8001822:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001824:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001826:	f042 0201 	orr.w	r2, r2, #1
 800182a:	64da      	str	r2, [r3, #76]	; 0x4c
 800182c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800182e:	f002 0201 	and.w	r2, r2, #1
 8001832:	9205      	str	r2, [sp, #20]
 8001834:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001836:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001838:	f042 0202 	orr.w	r2, r2, #2
 800183c:	64da      	str	r2, [r3, #76]	; 0x4c
 800183e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001840:	f002 0202 	and.w	r2, r2, #2
 8001844:	9206      	str	r2, [sp, #24]
 8001846:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001848:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800184a:	f042 0208 	orr.w	r2, r2, #8
 800184e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001852:	f003 0308 	and.w	r3, r3, #8
 8001856:	9307      	str	r3, [sp, #28]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001858:	2200      	movs	r2, #0
 800185a:	2120      	movs	r1, #32
 800185c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001860:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001862:	f001 fbaf 	bl	8002fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8001866:	2200      	movs	r2, #0
 8001868:	2104      	movs	r1, #4
 800186a:	489d      	ldr	r0, [pc, #628]	; (8001ae0 <main+0x300>)
 800186c:	f001 fbaa 	bl	8002fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_FLASH_GPIO_Port, CS_FLASH_Pin, GPIO_PIN_SET);
 8001870:	2201      	movs	r2, #1
 8001872:	2104      	movs	r1, #4
 8001874:	489b      	ldr	r0, [pc, #620]	; (8001ae4 <main+0x304>)
 8001876:	f001 fba5 	bl	8002fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin, GPIO_PIN_SET);
 800187a:	2201      	movs	r2, #1
 800187c:	21e0      	movs	r1, #224	; 0xe0
 800187e:	4898      	ldr	r0, [pc, #608]	; (8001ae0 <main+0x300>)
 8001880:	f001 fba0 	bl	8002fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001884:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001888:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = B1_Pin;
 800188a:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800188c:	a90f      	add	r1, sp, #60	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800188e:	4b96      	ldr	r3, [pc, #600]	; (8001ae8 <main+0x308>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001890:	4896      	ldr	r0, [pc, #600]	; (8001aec <main+0x30c>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001892:	9310      	str	r3, [sp, #64]	; 0x40

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2400      	movs	r4, #0
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001896:	9611      	str	r6, [sp, #68]	; 0x44
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001898:	f001 fab2 	bl	8002e00 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 800189c:	2320      	movs	r3, #32
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800189e:	a90f      	add	r1, sp, #60	; 0x3c
 80018a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = LD2_Pin;
 80018a4:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a8:	9412      	str	r4, [sp, #72]	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018aa:	9610      	str	r6, [sp, #64]	; 0x40
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80018ac:	f001 faa8 	bl	8002e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZER_Pin TFT_CS_Pin TFT_RST_Pin TFT_DC_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin;
 80018b0:	23e4      	movs	r3, #228	; 0xe4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b2:	a90f      	add	r1, sp, #60	; 0x3c
 80018b4:	488a      	ldr	r0, [pc, #552]	; (8001ae0 <main+0x300>)
  GPIO_InitStruct.Pin = BUZZER_Pin|TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin;
 80018b6:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ba:	9412      	str	r4, [sp, #72]	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018bc:	9610      	str	r6, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018be:	f001 fa9f 	bl	8002e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY_DN_Pin KEY_UP_Pin KEY_ENTER_Pin KEY_ESC_Pin */
  GPIO_InitStruct.Pin = KEY_DN_Pin|KEY_UP_Pin|KEY_ENTER_Pin|KEY_ESC_Pin;
 80018c2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c6:	a90f      	add	r1, sp, #60	; 0x3c
 80018c8:	4885      	ldr	r0, [pc, #532]	; (8001ae0 <main+0x300>)
  GPIO_InitStruct.Pin = KEY_DN_Pin|KEY_UP_Pin|KEY_ENTER_Pin|KEY_ESC_Pin;
 80018ca:	930f      	str	r3, [sp, #60]	; 0x3c

  /*Configure GPIO pins : ENC_B_Pin ENC_A_Pin SW_ENC_Pin */
  GPIO_InitStruct.Pin = ENC_B_Pin|ENC_A_Pin|SW_ENC_Pin;
 80018cc:	f44f 67e0 	mov.w	r7, #1792	; 0x700
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018d0:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018d2:	9611      	str	r6, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d4:	f001 fa94 	bl	8002e00 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d8:	a90f      	add	r1, sp, #60	; 0x3c
 80018da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000

  /*Configure GPIO pin : CS_FLASH_Pin */
  GPIO_InitStruct.Pin = CS_FLASH_Pin;
 80018de:	f04f 0904 	mov.w	r9, #4
  GPIO_InitStruct.Pin = ENC_B_Pin|ENC_A_Pin|SW_ENC_Pin;
 80018e2:	970f      	str	r7, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018e4:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018e6:	9611      	str	r6, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e8:	f001 fa8a 	bl	8002e00 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(CS_FLASH_GPIO_Port, &GPIO_InitStruct);
 80018ec:	a90f      	add	r1, sp, #60	; 0x3c
 80018ee:	487d      	ldr	r0, [pc, #500]	; (8001ae4 <main+0x304>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f2:	9412      	str	r4, [sp, #72]	; 0x48
  GPIO_InitStruct.Pin = CS_FLASH_Pin;
 80018f4:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f8:	9610      	str	r6, [sp, #64]	; 0x40
  HAL_GPIO_Init(CS_FLASH_GPIO_Port, &GPIO_InitStruct);
 80018fa:	f001 fa81 	bl	8002e00 <HAL_GPIO_Init>
  huart2.Init.BaudRate = 115200;
 80018fe:	4a7c      	ldr	r2, [pc, #496]	; (8001af0 <main+0x310>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001900:	f8c8 4008 	str.w	r4, [r8, #8]
  huart2.Init.BaudRate = 115200;
 8001904:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001908:	f04f 0a0c 	mov.w	sl, #12
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800190c:	4640      	mov	r0, r8
  huart2.Init.BaudRate = 115200;
 800190e:	e888 000c 	stmia.w	r8, {r2, r3}
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001912:	f8c8 400c 	str.w	r4, [r8, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001916:	f8c8 4010 	str.w	r4, [r8, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800191a:	f8c8 4018 	str.w	r4, [r8, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800191e:	f8c8 401c 	str.w	r4, [r8, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001922:	f8c8 4020 	str.w	r4, [r8, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001926:	f8c8 4024 	str.w	r4, [r8, #36]	; 0x24
  huart2.Init.Mode = UART_MODE_TX_RX;
 800192a:	f8c8 a014 	str.w	sl, [r8, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800192e:	f004 fb19 	bl	8005f64 <HAL_UART_Init>
  hi2c1.Init.Timing = 0x00602072;
 8001932:	4b70      	ldr	r3, [pc, #448]	; (8001af4 <main+0x314>)
 8001934:	4970      	ldr	r1, [pc, #448]	; (8001af8 <main+0x318>)
  hi2c1.Init.OwnAddress1 = 0;
 8001936:	60ac      	str	r4, [r5, #8]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001938:	4628      	mov	r0, r5
  hi2c1.Init.Timing = 0x00602072;
 800193a:	e885 000a 	stmia.w	r5, {r1, r3}
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800193e:	612c      	str	r4, [r5, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001940:	616c      	str	r4, [r5, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001942:	61ac      	str	r4, [r5, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001944:	61ec      	str	r4, [r5, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001946:	622c      	str	r4, [r5, #32]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001948:	60ee      	str	r6, [r5, #12]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800194a:	f001 fb46 	bl	8002fda <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800194e:	4621      	mov	r1, r4
 8001950:	4628      	mov	r0, r5
 8001952:	f001 fb93 	bl	800307c <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 1) != HAL_OK)
 8001956:	4631      	mov	r1, r6
 8001958:	4628      	mov	r0, r5
 800195a:	f001 fbb5 	bl	80030c8 <HAL_I2CEx_ConfigDigitalFilter>
  hqspi.Instance = QUADSPI;
 800195e:	4867      	ldr	r0, [pc, #412]	; (8001afc <main+0x31c>)
 8001960:	4b67      	ldr	r3, [pc, #412]	; (8001b00 <main+0x320>)
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001962:	6184      	str	r4, [r0, #24]
  hqspi.Init.FifoThreshold = 4;
 8001964:	e880 0218 	stmia.w	r0, {r3, r4, r9}
  hqspi.Init.FlashSize = 23;
 8001968:	2317      	movs	r3, #23
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800196a:	2510      	movs	r5, #16
  hqspi.Init.FlashSize = 23;
 800196c:	6103      	str	r3, [r0, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_2_CYCLE;
 800196e:	f44f 7380 	mov.w	r3, #256	; 0x100
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001972:	60c5      	str	r5, [r0, #12]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_2_CYCLE;
 8001974:	6143      	str	r3, [r0, #20]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001976:	f002 f8c3 	bl	8003b00 <HAL_QSPI_Init>
  hspi3.Instance = SPI3;
 800197a:	4862      	ldr	r0, [pc, #392]	; (8001b04 <main+0x324>)
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800197c:	4b62      	ldr	r3, [pc, #392]	; (8001b08 <main+0x328>)
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800197e:	6084      	str	r4, [r0, #8]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001980:	f44f 7e82 	mov.w	lr, #260	; 0x104
 8001984:	e880 4008 	stmia.w	r0, {r3, lr}
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001988:	f44f 7300 	mov.w	r3, #512	; 0x200
  hspi3.Init.CRCPolynomial = 7;
 800198c:	2207      	movs	r2, #7
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800198e:	6183      	str	r3, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001990:	2308      	movs	r3, #8
 8001992:	61c3      	str	r3, [r0, #28]
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001994:	6343      	str	r3, [r0, #52]	; 0x34
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001996:	60c7      	str	r7, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001998:	6104      	str	r4, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800199a:	6144      	str	r4, [r0, #20]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800199c:	6204      	str	r4, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800199e:	6244      	str	r4, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019a0:	6284      	str	r4, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80019a2:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80019a4:	6304      	str	r4, [r0, #48]	; 0x30
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80019a6:	f003 f99b 	bl	8004ce0 <HAL_SPI_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019aa:	462a      	mov	r2, r5
 80019ac:	4621      	mov	r1, r4
 80019ae:	a80b      	add	r0, sp, #44	; 0x2c
 80019b0:	f00b fedb 	bl	800d76a <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019b4:	221c      	movs	r2, #28
 80019b6:	4621      	mov	r1, r4
 80019b8:	a80f      	add	r0, sp, #60	; 0x3c
  htim3.Instance = TIM3;
 80019ba:	4f54      	ldr	r7, [pc, #336]	; (8001b0c <main+0x32c>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019bc:	9408      	str	r4, [sp, #32]
 80019be:	9409      	str	r4, [sp, #36]	; 0x24
 80019c0:	940a      	str	r4, [sp, #40]	; 0x28
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019c2:	f00b fed2 	bl	800d76a <memset>
  htim3.Instance = TIM3;
 80019c6:	4b52      	ldr	r3, [pc, #328]	; (8001b10 <main+0x330>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019c8:	60bc      	str	r4, [r7, #8]
  htim3.Init.Prescaler = 1;
 80019ca:	e887 0048 	stmia.w	r7, {r3, r6}
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80019ce:	4638      	mov	r0, r7
  htim3.Init.Period = 4095;
 80019d0:	f640 73ff 	movw	r3, #4095	; 0xfff
 80019d4:	60fb      	str	r3, [r7, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019d6:	613c      	str	r4, [r7, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019d8:	61bc      	str	r4, [r7, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80019da:	f003 fe13 	bl	8005604 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80019e2:	a90b      	add	r1, sp, #44	; 0x2c
 80019e4:	4638      	mov	r0, r7
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019e6:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80019e8:	f003 ff16 	bl	8005818 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80019ec:	4638      	mov	r0, r7
 80019ee:	f003 fe23 	bl	8005638 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019f2:	a908      	add	r1, sp, #32
 80019f4:	4638      	mov	r0, r7
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019f6:	9408      	str	r4, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019f8:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019fa:	f003 ffe1 	bl	80059c0 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019fe:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a00:	4622      	mov	r2, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a02:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a04:	a90f      	add	r1, sp, #60	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001a06:	2302      	movs	r3, #2
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a08:	4638      	mov	r0, r7
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001a0a:	9311      	str	r3, [sp, #68]	; 0x44
  sConfigOC.Pulse = 0;
 8001a0c:	9410      	str	r4, [sp, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a0e:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a10:	f003 fe72 	bl	80056f8 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a14:	464a      	mov	r2, r9
 8001a16:	a90f      	add	r1, sp, #60	; 0x3c
 8001a18:	4638      	mov	r0, r7
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a1a:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a1c:	f003 fe6c 	bl	80056f8 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim3);
 8001a20:	4638      	mov	r0, r7
 8001a22:	f000 fae1 	bl	8001fe8 <HAL_TIM_MspPostInit>
  RTC_TimeTypeDef sTime = {0};
 8001a26:	4621      	mov	r1, r4
 8001a28:	2214      	movs	r2, #20
 8001a2a:	a80f      	add	r0, sp, #60	; 0x3c
 8001a2c:	f00b fe9d 	bl	800d76a <memset>
  hrtc.Instance = RTC;
 8001a30:	4d38      	ldr	r5, [pc, #224]	; (8001b14 <main+0x334>)
 8001a32:	4b39      	ldr	r3, [pc, #228]	; (8001b18 <main+0x338>)
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a34:	612c      	str	r4, [r5, #16]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001a36:	e885 0018 	stmia.w	r5, {r3, r4}
  hrtc.Init.AsynchPrediv = 127;
 8001a3a:	f04f 0b7f 	mov.w	fp, #127	; 0x7f
  hrtc.Init.SynchPrediv = 255;
 8001a3e:	23ff      	movs	r3, #255	; 0xff
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a40:	4628      	mov	r0, r5
  hrtc.Init.SynchPrediv = 255;
 8001a42:	60eb      	str	r3, [r5, #12]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001a44:	616c      	str	r4, [r5, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a46:	61ac      	str	r4, [r5, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a48:	61ec      	str	r4, [r5, #28]
  RTC_DateTypeDef sDate = {0};
 8001a4a:	940b      	str	r4, [sp, #44]	; 0x2c
  hrtc.Init.AsynchPrediv = 127;
 8001a4c:	f8c5 b008 	str.w	fp, [r5, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a50:	f002 ffce 	bl	80049f0 <HAL_RTC_Init>
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001a54:	4632      	mov	r2, r6
 8001a56:	a90f      	add	r1, sp, #60	; 0x3c
 8001a58:	4628      	mov	r0, r5
  sTime.Hours = 0x0;
 8001a5a:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
  sTime.Minutes = 0x0;
 8001a5e:	f88d 403d 	strb.w	r4, [sp, #61]	; 0x3d
  sTime.Seconds = 0x0;
 8001a62:	f88d 403e 	strb.w	r4, [sp, #62]	; 0x3e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001a66:	9412      	str	r4, [sp, #72]	; 0x48
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001a68:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001a6a:	f003 f813 	bl	8004a94 <HAL_RTC_SetTime>
  sDate.Year = 0x19;
 8001a6e:	2319      	movs	r3, #25
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001a70:	4632      	mov	r2, r6
 8001a72:	a90b      	add	r1, sp, #44	; 0x2c
 8001a74:	4628      	mov	r0, r5
  sDate.Year = 0x19;
 8001a76:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001a7a:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8001a7e:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
  sDate.Date = 0x1;
 8001a82:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001a86:	f003 f864 	bl	8004b52 <HAL_RTC_SetDate>
  MX_FATFS_Init();
 8001a8a:	f004 ff09 	bl	80068a0 <MX_FATFS_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 8001a8e:	2318      	movs	r3, #24
  hadc1.Instance = ADC1;
 8001a90:	4d22      	ldr	r5, [pc, #136]	; (8001b1c <main+0x33c>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8001a92:	9301      	str	r3, [sp, #4]
 8001a94:	461a      	mov	r2, r3
 8001a96:	4621      	mov	r1, r4
 8001a98:	a80f      	add	r0, sp, #60	; 0x3c
  ADC_MultiModeTypeDef multimode = {0};
 8001a9a:	940b      	str	r4, [sp, #44]	; 0x2c
 8001a9c:	940c      	str	r4, [sp, #48]	; 0x30
 8001a9e:	940d      	str	r4, [sp, #52]	; 0x34
  ADC_ChannelConfTypeDef sConfig = {0};
 8001aa0:	f00b fe63 	bl	800d76a <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001aa4:	4a1e      	ldr	r2, [pc, #120]	; (8001b20 <main+0x340>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001aa6:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001aa8:	f44f 2c80 	mov.w	ip, #262144	; 0x40000
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001aac:	4628      	mov	r0, r5
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001aae:	e885 1004 	stmia.w	r5, {r2, ip}
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ab2:	60ec      	str	r4, [r5, #12]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001ab4:	762c      	strb	r4, [r5, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001ab6:	766c      	strb	r4, [r5, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ab8:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001abc:	62ac      	str	r4, [r5, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001abe:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001ac0:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001ac4:	636c      	str	r4, [r5, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001ac6:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001aca:	612e      	str	r6, [r5, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001acc:	f8c5 9014 	str.w	r9, [r5, #20]
  hadc1.Init.NbrOfConversion = 4;
 8001ad0:	f8c5 901c 	str.w	r9, [r5, #28]
 8001ad4:	e028      	b.n	8001b28 <main+0x348>
 8001ad6:	bf00      	nop
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	2000c608 	.word	0x2000c608
 8001ae0:	48000400 	.word	0x48000400
 8001ae4:	48000c00 	.word	0x48000c00
 8001ae8:	10210000 	.word	0x10210000
 8001aec:	48000800 	.word	0x48000800
 8001af0:	40004400 	.word	0x40004400
 8001af4:	00602072 	.word	0x00602072
 8001af8:	40005400 	.word	0x40005400
 8001afc:	2000c800 	.word	0x2000c800
 8001b00:	a0001000 	.word	0xa0001000
 8001b04:	2000c694 	.word	0x2000c694
 8001b08:	40003c00 	.word	0x40003c00
 8001b0c:	2000c654 	.word	0x2000c654
 8001b10:	40000400 	.word	0x40000400
 8001b14:	2000c75c 	.word	0x2000c75c
 8001b18:	40002800 	.word	0x40002800
 8001b1c:	2000c6f8 	.word	0x2000c6f8
 8001b20:	50040000 	.word	0x50040000
 8001b24:	2000c780 	.word	0x2000c780
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b28:	f000 fd10 	bl	800254c <HAL_ADC_Init>
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001b2c:	a90b      	add	r1, sp, #44	; 0x2c
 8001b2e:	4628      	mov	r0, r5
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001b30:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001b32:	f000 ffc9 	bl	8002ac8 <HAL_ADCEx_MultiModeConfigChannel>
  sConfig.Channel = ADC_CHANNEL_1;
 8001b36:	4a54      	ldr	r2, [pc, #336]	; (8001c88 <main+0x4a8>)
 8001b38:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b3a:	a90f      	add	r1, sp, #60	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b3c:	2206      	movs	r2, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b3e:	4628      	mov	r0, r5
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b40:	9210      	str	r2, [sp, #64]	; 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8001b42:	9211      	str	r2, [sp, #68]	; 0x44
  sConfig.Offset = 0;
 8001b44:	9414      	str	r4, [sp, #80]	; 0x50
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001b46:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001b4a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b4e:	f000 fddd 	bl	800270c <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_2;
 8001b52:	4a4e      	ldr	r2, [pc, #312]	; (8001c8c <main+0x4ac>)
 8001b54:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b56:	a90f      	add	r1, sp, #60	; 0x3c
 8001b58:	4628      	mov	r0, r5
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001b5a:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b5e:	f000 fdd5 	bl	800270c <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_3;
 8001b62:	4a4b      	ldr	r2, [pc, #300]	; (8001c90 <main+0x4b0>)
 8001b64:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b66:	a90f      	add	r1, sp, #60	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001b68:	2212      	movs	r2, #18
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b6a:	4628      	mov	r0, r5
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001b6c:	9210      	str	r2, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b6e:	f000 fdcd 	bl	800270c <HAL_ADC_ConfigChannel>
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001b72:	9b01      	ldr	r3, [sp, #4]
  sConfig.Channel = ADC_CHANNEL_4;
 8001b74:	4a47      	ldr	r2, [pc, #284]	; (8001c94 <main+0x4b4>)
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001b76:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b78:	a90f      	add	r1, sp, #60	; 0x3c
 8001b7a:	4628      	mov	r0, r5
  hdac1.Instance = DAC1;
 8001b7c:	4d46      	ldr	r5, [pc, #280]	; (8001c98 <main+0x4b8>)
  sConfig.Channel = ADC_CHANNEL_4;
 8001b7e:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b80:	f000 fdc4 	bl	800270c <HAL_ADC_ConfigChannel>
  DAC_ChannelConfTypeDef sConfig = {0};
 8001b84:	4621      	mov	r1, r4
 8001b86:	2224      	movs	r2, #36	; 0x24
 8001b88:	a80f      	add	r0, sp, #60	; 0x3c
 8001b8a:	f00b fdee 	bl	800d76a <memset>
  hdac1.Instance = DAC1;
 8001b8e:	4b43      	ldr	r3, [pc, #268]	; (8001c9c <main+0x4bc>)
 8001b90:	602b      	str	r3, [r5, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001b92:	4628      	mov	r0, r5
 8001b94:	f001 f864 	bl	8002c60 <HAL_DAC_Init>
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001b98:	4622      	mov	r2, r4
 8001b9a:	a90f      	add	r1, sp, #60	; 0x3c
 8001b9c:	4628      	mov	r0, r5
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001b9e:	940f      	str	r4, [sp, #60]	; 0x3c
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001ba0:	9410      	str	r4, [sp, #64]	; 0x40
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001ba2:	9411      	str	r4, [sp, #68]	; 0x44
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001ba4:	9412      	str	r4, [sp, #72]	; 0x48
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001ba6:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001ba8:	f001 f8a0 	bl	8002cec <HAL_DAC_ConfigChannel>
  MX_USB_DEVICE_Init();
 8001bac:	f005 febc 	bl	8007928 <MX_USB_DEVICE_Init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001bb0:	4621      	mov	r1, r4
 8001bb2:	4638      	mov	r0, r7
 8001bb4:	f003 fed2 	bl	800595c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001bb8:	4649      	mov	r1, r9
 8001bba:	4638      	mov	r0, r7
 8001bbc:	f003 fece 	bl	800595c <HAL_TIM_PWM_Start>
  __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);			    // PWM_CH1 = 0
 8001bc0:	683b      	ldr	r3, [r7, #0]
  __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 3200);		    // PWM_CH2 = 4095 100% brilho
 8001bc2:	f44f 6248 	mov.w	r2, #3200	; 0xc80
  __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);			    // PWM_CH1 = 0
 8001bc6:	635c      	str	r4, [r3, #52]	; 0x34
  __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 3200);		    // PWM_CH2 = 4095 100% brilho
 8001bc8:	639a      	str	r2, [r3, #56]	; 0x38
  ST7735_Init();
 8001bca:	f7ff f9e3 	bl	8000f94 <ST7735_Init>
  ST7735_Clear(0x0000);
 8001bce:	4620      	mov	r0, r4
 8001bd0:	f7ff faa6 	bl	8001120 <ST7735_Clear>
  ST7735_PutStr5x7(40, 0, "STM32L476RG Board", 0xFFFF);
 8001bd4:	4621      	mov	r1, r4
 8001bd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bda:	4a31      	ldr	r2, [pc, #196]	; (8001ca0 <main+0x4c0>)
  lv_disp_buf_init(&disp_buf, buf, buf2, LV_HOR_RES_MAX * 10);    //Initialize the display buffer
 8001bdc:	4c31      	ldr	r4, [pc, #196]	; (8001ca4 <main+0x4c4>)
  ST7735_PutStr5x7(40, 0, "STM32L476RG Board", 0xFFFF);
 8001bde:	2028      	movs	r0, #40	; 0x28
 8001be0:	f7ff fb94 	bl	800130c <ST7735_PutStr5x7>
  tft_backlight(100);
 8001be4:	2064      	movs	r0, #100	; 0x64
 8001be6:	f000 f895 	bl	8001d14 <tft_backlight>
  Evt_InitQueue();
 8001bea:	f7ff fcf1 	bl	80015d0 <Evt_InitQueue>
  KeyboardInit(0x01);
 8001bee:	4630      	mov	r0, r6
 8001bf0:	f7ff fbc6 	bl	8001380 <KeyboardInit>
  W25qxx_Init();
 8001bf4:	f000 fb7c 	bl	80022f0 <W25qxx_Init>
  temperatura = (float)(2000 *(3.30/4095.0));
 8001bf8:	4b2b      	ldr	r3, [pc, #172]	; (8001ca8 <main+0x4c8>)
 8001bfa:	4a2c      	ldr	r2, [pc, #176]	; (8001cac <main+0x4cc>)
  sprintf(buffer, "Temperatura: %0.1f°C\n", temperatura);
 8001bfc:	492c      	ldr	r1, [pc, #176]	; (8001cb0 <main+0x4d0>)
  temperatura = (float)(2000 *(3.30/4095.0));
 8001bfe:	601a      	str	r2, [r3, #0]
  sprintf(buffer, "Temperatura: %0.1f°C\n", temperatura);
 8001c00:	482c      	ldr	r0, [pc, #176]	; (8001cb4 <main+0x4d4>)
 8001c02:	a31f      	add	r3, pc, #124	; (adr r3, 8001c80 <main+0x4a0>)
 8001c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c08:	f00b fdd4 	bl	800d7b4 <sprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY); // send message via UART
 8001c0c:	4829      	ldr	r0, [pc, #164]	; (8001cb4 <main+0x4d4>)
 8001c0e:	f7fe fae9 	bl	80001e4 <strlen>
 8001c12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c16:	b282      	uxth	r2, r0
 8001c18:	4926      	ldr	r1, [pc, #152]	; (8001cb4 <main+0x4d4>)
 8001c1a:	4640      	mov	r0, r8
 8001c1c:	f004 f91b 	bl	8005e56 <HAL_UART_Transmit>
  lv_disp_buf_init(&disp_buf, buf, buf2, LV_HOR_RES_MAX * 10);    //Initialize the display buffer
 8001c20:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8001c24:	4a24      	ldr	r2, [pc, #144]	; (8001cb8 <main+0x4d8>)
 8001c26:	4925      	ldr	r1, [pc, #148]	; (8001cbc <main+0x4dc>)
 8001c28:	4620      	mov	r0, r4
 8001c2a:	f00a fbf4 	bl	800c416 <lv_disp_buf_init>
  lv_init();
 8001c2e:	f006 fa77 	bl	8008120 <lv_init>
  lv_disp_drv_init(&disp_drv);          //Basic initialization
 8001c32:	a80f      	add	r0, sp, #60	; 0x3c
 8001c34:	f00a fbce 	bl	800c3d4 <lv_disp_drv_init>
  disp_drv.hor_res = 160;               //Set the horizontal resolution
 8001c38:	23a0      	movs	r3, #160	; 0xa0
 8001c3a:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
  disp_drv.ver_res = 128;               //Set the vertical resolution
 8001c3e:	2380      	movs	r3, #128	; 0x80
 8001c40:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  lv_disp_drv_register(&disp_drv);      //Finally register the driver
 8001c44:	a80f      	add	r0, sp, #60	; 0x3c
  disp_drv.flush_cb = ST7735_Flush_3;	//Set your driver function
 8001c46:	4b1e      	ldr	r3, [pc, #120]	; (8001cc0 <main+0x4e0>)
  disp_drv.buffer = &disp_buf;          //Assign the buffer to teh display
 8001c48:	9410      	str	r4, [sp, #64]	; 0x40
  disp_drv.flush_cb = ST7735_Flush_3;	//Set your driver function
 8001c4a:	9312      	str	r3, [sp, #72]	; 0x48
  lv_disp_drv_register(&disp_drv);      //Finally register the driver
 8001c4c:	f00a fbf2 	bl	800c434 <lv_disp_drv_register>
	  if(HAL_GetTick() - timer_loop >= 500) {
 8001c50:	4c1c      	ldr	r4, [pc, #112]	; (8001cc4 <main+0x4e4>)
 8001c52:	f000 fc47 	bl	80024e4 <HAL_GetTick>
 8001c56:	6823      	ldr	r3, [r4, #0]
 8001c58:	1ac0      	subs	r0, r0, r3
 8001c5a:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8001c5e:	d307      	bcc.n	8001c70 <main+0x490>
		  timer_loop = HAL_GetTick();
 8001c60:	f000 fc40 	bl	80024e4 <HAL_GetTick>
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001c64:	2120      	movs	r1, #32
		  timer_loop = HAL_GetTick();
 8001c66:	6020      	str	r0, [r4, #0]
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001c68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c6c:	f001 f9af 	bl	8002fce <HAL_GPIO_TogglePin>
	  KeyboardEvent();
 8001c70:	f7ff fcb8 	bl	80015e4 <KeyboardEvent>
	  lv_task_handler();
 8001c74:	f00b f9de 	bl	800d034 <lv_task_handler>
	  if(HAL_GetTick() - timer_loop >= 500) {
 8001c78:	e7eb      	b.n	8001c52 <main+0x472>
 8001c7a:	bf00      	nop
 8001c7c:	f3af 8000 	nop.w
 8001c80:	a0000000 	.word	0xa0000000
 8001c84:	3ff9c99c 	.word	0x3ff9c99c
 8001c88:	04300002 	.word	0x04300002
 8001c8c:	08600004 	.word	0x08600004
 8001c90:	0c900008 	.word	0x0c900008
 8001c94:	10c00010 	.word	0x10c00010
 8001c98:	2000c5f4 	.word	0x2000c5f4
 8001c9c:	40007400 	.word	0x40007400
 8001ca0:	08010410 	.word	0x08010410
 8001ca4:	20003f20 	.word	0x20003f20
 8001ca8:	20003f3c 	.word	0x20003f3c
 8001cac:	3fce4ce5 	.word	0x3fce4ce5
 8001cb0:	08010422 	.word	0x08010422
 8001cb4:	20003d2a 	.word	0x20003d2a
 8001cb8:	200030aa 	.word	0x200030aa
 8001cbc:	2000242a 	.word	0x2000242a
 8001cc0:	08001191 	.word	0x08001191
 8001cc4:	20003f48 	.word	0x20003f48

08001cc8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cc8:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001cca:	4c0f      	ldr	r4, [pc, #60]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001ccc:	6803      	ldr	r3, [r0, #0]
 8001cce:	42a3      	cmp	r3, r4
{
 8001cd0:	4605      	mov	r5, r0
  if (htim->Instance == TIM6) {
 8001cd2:	d101      	bne.n	8001cd8 <HAL_TIM_PeriodElapsedCallback+0x10>
    HAL_IncTick();
 8001cd4:	f000 fbfa 	bl	80024cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM6) {
 8001cd8:	682b      	ldr	r3, [r5, #0]
 8001cda:	42a3      	cmp	r3, r4
 8001cdc:	d102      	bne.n	8001ce4 <HAL_TIM_PeriodElapsedCallback+0x1c>
	  lv_tick_inc(1);
 8001cde:	2001      	movs	r0, #1
 8001ce0:	f00a fc72 	bl	800c5c8 <lv_tick_inc>
  }
  if (htim->Instance == TIM6) {
 8001ce4:	682b      	ldr	r3, [r5, #0]
 8001ce6:	42a3      	cmp	r3, r4
 8001ce8:	d10c      	bne.n	8001d04 <HAL_TIM_PeriodElapsedCallback+0x3c>
 	  timer_key++;
 8001cea:	4a08      	ldr	r2, [pc, #32]	; (8001d0c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001cec:	6813      	ldr	r3, [r2, #0]
 8001cee:	3301      	adds	r3, #1
 	  if(timer_key >= 40) {
 8001cf0:	2b27      	cmp	r3, #39	; 0x27
 8001cf2:	d801      	bhi.n	8001cf8 <HAL_TIM_PeriodElapsedCallback+0x30>
 	  timer_key++;
 8001cf4:	6013      	str	r3, [r2, #0]
 8001cf6:	bd38      	pop	{r3, r4, r5, pc}
 		  timer_key = 0;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	6013      	str	r3, [r2, #0]
 		  Key_Read();
 	  }
   }
  /* USER CODE END Callback 1 */
}
 8001cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 		  Key_Read();
 8001d00:	f7ff bc3e 	b.w	8001580 <Key_Read>
 8001d04:	bd38      	pop	{r3, r4, r5, pc}
 8001d06:	bf00      	nop
 8001d08:	40001000 	.word	0x40001000
 8001d0c:	20003f44 	.word	0x20003f44

08001d10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d10:	4770      	bx	lr
	...

08001d14 <tft_backlight>:
	}
}

void tft_backlight(uint16_t value)
{
	if(value >= 0 && value <= 100) {
 8001d14:	2864      	cmp	r0, #100	; 0x64
 8001d16:	d809      	bhi.n	8001d2c <tft_backlight+0x18>
		tft_pwm = value * 32;
 8001d18:	0141      	lsls	r1, r0, #5
 8001d1a:	4b05      	ldr	r3, [pc, #20]	; (8001d30 <tft_backlight+0x1c>)
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, tft_pwm);		// PWM_CH2 = TFT
		logI("I - TFT_PWM: %ld\n\r", tft_pwm);
 8001d1c:	4805      	ldr	r0, [pc, #20]	; (8001d34 <tft_backlight+0x20>)
		tft_pwm = value * 32;
 8001d1e:	b289      	uxth	r1, r1
 8001d20:	8019      	strh	r1, [r3, #0]
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, tft_pwm);		// PWM_CH2 = TFT
 8001d22:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <tft_backlight+0x24>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	6399      	str	r1, [r3, #56]	; 0x38
		logI("I - TFT_PWM: %ld\n\r", tft_pwm);
 8001d28:	f7ff bce6 	b.w	80016f8 <logI>
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	20003f40 	.word	0x20003f40
 8001d34:	08010439 	.word	0x08010439
 8001d38:	2000c654 	.word	0x2000c654

08001d3c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d3c:	4b0a      	ldr	r3, [pc, #40]	; (8001d68 <HAL_MspInit+0x2c>)
 8001d3e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d40:	f042 0201 	orr.w	r2, r2, #1
 8001d44:	661a      	str	r2, [r3, #96]	; 0x60
 8001d46:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8001d48:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d4a:	f002 0201 	and.w	r2, r2, #1
 8001d4e:	9200      	str	r2, [sp, #0]
 8001d50:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d52:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d54:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d58:	659a      	str	r2, [r3, #88]	; 0x58
 8001d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d60:	9301      	str	r3, [sp, #4]
 8001d62:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d64:	b002      	add	sp, #8
 8001d66:	4770      	bx	lr
 8001d68:	40021000 	.word	0x40021000

08001d6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d6c:	b510      	push	{r4, lr}
 8001d6e:	4604      	mov	r4, r0
 8001d70:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d72:	2214      	movs	r2, #20
 8001d74:	2100      	movs	r1, #0
 8001d76:	a803      	add	r0, sp, #12
 8001d78:	f00b fcf7 	bl	800d76a <memset>
  if(hadc->Instance==ADC1)
 8001d7c:	6822      	ldr	r2, [r4, #0]
 8001d7e:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <HAL_ADC_MspInit+0x58>)
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d11d      	bne.n	8001dc0 <HAL_ADC_MspInit+0x54>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001d84:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8001d88:	f5a3 33f8 	sub.w	r3, r3, #126976	; 0x1f000
    PC3     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d8c:	a903      	add	r1, sp, #12
    __HAL_RCC_ADC_CLK_ENABLE();
 8001d8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d90:	480d      	ldr	r0, [pc, #52]	; (8001dc8 <HAL_ADC_MspInit+0x5c>)
    __HAL_RCC_ADC_CLK_ENABLE();
 8001d92:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d96:	64da      	str	r2, [r3, #76]	; 0x4c
 8001d98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d9a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001d9e:	9201      	str	r2, [sp, #4]
 8001da0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001da2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001da4:	f042 0204 	orr.w	r2, r2, #4
 8001da8:	64da      	str	r2, [r3, #76]	; 0x4c
 8001daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dac:	f003 0304 	and.w	r3, r3, #4
 8001db0:	9302      	str	r3, [sp, #8]
 8001db2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001db4:	230f      	movs	r3, #15
 8001db6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001db8:	230b      	movs	r3, #11
 8001dba:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dbc:	f001 f820 	bl	8002e00 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001dc0:	b008      	add	sp, #32
 8001dc2:	bd10      	pop	{r4, pc}
 8001dc4:	50040000 	.word	0x50040000
 8001dc8:	48000800 	.word	0x48000800

08001dcc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001dcc:	b510      	push	{r4, lr}
 8001dce:	4604      	mov	r4, r0
 8001dd0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd2:	2214      	movs	r2, #20
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	a803      	add	r0, sp, #12
 8001dd8:	f00b fcc7 	bl	800d76a <memset>
  if(hdac->Instance==DAC1)
 8001ddc:	6822      	ldr	r2, [r4, #0]
 8001dde:	4b15      	ldr	r3, [pc, #84]	; (8001e34 <HAL_DAC_MspInit+0x68>)
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d124      	bne.n	8001e2e <HAL_DAC_MspInit+0x62>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001de4:	f503 33ce 	add.w	r3, r3, #105472	; 0x19c00
    PA4     ------> DAC1_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de8:	a903      	add	r1, sp, #12
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001dea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001dec:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001df0:	659a      	str	r2, [r3, #88]	; 0x58
 8001df2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001df4:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8001df8:	9201      	str	r2, [sp, #4]
 8001dfa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001dfe:	f042 0201 	orr.w	r2, r2, #1
 8001e02:	64da      	str	r2, [r3, #76]	; 0x4c
 8001e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	9302      	str	r3, [sp, #8]
 8001e0c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001e0e:	2310      	movs	r3, #16
 8001e10:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e16:	2303      	movs	r3, #3
 8001e18:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e1a:	f000 fff1 	bl	8002e00 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001e1e:	2200      	movs	r2, #0
 8001e20:	2036      	movs	r0, #54	; 0x36
 8001e22:	4611      	mov	r1, r2
 8001e24:	f000 feda 	bl	8002bdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001e28:	2036      	movs	r0, #54	; 0x36
 8001e2a:	f000 ff0b 	bl	8002c44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001e2e:	b008      	add	sp, #32
 8001e30:	bd10      	pop	{r4, pc}
 8001e32:	bf00      	nop
 8001e34:	40007400 	.word	0x40007400

08001e38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e38:	b510      	push	{r4, lr}
 8001e3a:	4604      	mov	r4, r0
 8001e3c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e3e:	2214      	movs	r2, #20
 8001e40:	2100      	movs	r1, #0
 8001e42:	a803      	add	r0, sp, #12
 8001e44:	f00b fc91 	bl	800d76a <memset>
  if(hi2c->Instance==I2C1)
 8001e48:	6822      	ldr	r2, [r4, #0]
 8001e4a:	4b13      	ldr	r3, [pc, #76]	; (8001e98 <HAL_I2C_MspInit+0x60>)
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d121      	bne.n	8001e94 <HAL_I2C_MspInit+0x5c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e50:	4c12      	ldr	r4, [pc, #72]	; (8001e9c <HAL_I2C_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e52:	4813      	ldr	r0, [pc, #76]	; (8001ea0 <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e54:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001e56:	f043 0302 	orr.w	r3, r3, #2
 8001e5a:	64e3      	str	r3, [r4, #76]	; 0x4c
 8001e5c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	9301      	str	r3, [sp, #4]
 8001e64:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e66:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e6a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e6c:	2312      	movs	r3, #18
 8001e6e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e70:	2301      	movs	r3, #1
 8001e72:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e74:	2303      	movs	r3, #3
 8001e76:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e78:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e7a:	2304      	movs	r3, #4
 8001e7c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e7e:	f000 ffbf 	bl	8002e00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001e84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e88:	65a3      	str	r3, [r4, #88]	; 0x58
 8001e8a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001e8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e90:	9302      	str	r3, [sp, #8]
 8001e92:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e94:	b008      	add	sp, #32
 8001e96:	bd10      	pop	{r4, pc}
 8001e98:	40005400 	.word	0x40005400
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	48000400 	.word	0x48000400

08001ea4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001ea4:	b570      	push	{r4, r5, r6, lr}
 8001ea6:	4604      	mov	r4, r0
 8001ea8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eaa:	2214      	movs	r2, #20
 8001eac:	2100      	movs	r1, #0
 8001eae:	a803      	add	r0, sp, #12
 8001eb0:	f00b fc5b 	bl	800d76a <memset>
  if(hqspi->Instance==QUADSPI)
 8001eb4:	6822      	ldr	r2, [r4, #0]
 8001eb6:	4b1e      	ldr	r3, [pc, #120]	; (8001f30 <HAL_QSPI_MspInit+0x8c>)
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d137      	bne.n	8001f2c <HAL_QSPI_MspInit+0x88>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001ebc:	f103 4320 	add.w	r3, r3, #2684354560	; 0xa0000000
 8001ec0:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
    PB1     ------> QUADSPI_BK1_IO0
    PB10     ------> QUADSPI_CLK
    PB11     ------> QUADSPI_NCS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec4:	2602      	movs	r6, #2
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001ec6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ec8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ecc:	651a      	str	r2, [r3, #80]	; 0x50
 8001ece:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ed0:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001ed4:	9200      	str	r2, [sp, #0]
 8001ed6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001eda:	f042 0201 	orr.w	r2, r2, #1
 8001ede:	64da      	str	r2, [r3, #76]	; 0x4c
 8001ee0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ee2:	f002 0201 	and.w	r2, r2, #1
 8001ee6:	9201      	str	r2, [sp, #4]
 8001ee8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001eec:	f042 0202 	orr.w	r2, r2, #2
 8001ef0:	64da      	str	r2, [r3, #76]	; 0x4c
 8001ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef4:	9604      	str	r6, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	9302      	str	r3, [sp, #8]
 8001efc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001efe:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f00:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001f02:	240a      	movs	r4, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f04:	a903      	add	r1, sp, #12
 8001f06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f0a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f0c:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001f0e:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f10:	f000 ff76 	bl	8002e00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 8001f14:	f640 4303 	movw	r3, #3075	; 0xc03
 8001f18:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f1a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1c:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f1e:	4805      	ldr	r0, [pc, #20]	; (8001f34 <HAL_QSPI_MspInit+0x90>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f20:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f22:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f24:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001f26:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f28:	f000 ff6a 	bl	8002e00 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001f2c:	b008      	add	sp, #32
 8001f2e:	bd70      	pop	{r4, r5, r6, pc}
 8001f30:	a0001000 	.word	0xa0001000
 8001f34:	48000400 	.word	0x48000400

08001f38 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8001f38:	6802      	ldr	r2, [r0, #0]
 8001f3a:	4b05      	ldr	r3, [pc, #20]	; (8001f50 <HAL_RTC_MspInit+0x18>)
 8001f3c:	429a      	cmp	r2, r3
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001f3e:	bf01      	itttt	eq
 8001f40:	4a04      	ldreq	r2, [pc, #16]	; (8001f54 <HAL_RTC_MspInit+0x1c>)
 8001f42:	f8d2 3090 	ldreq.w	r3, [r2, #144]	; 0x90
 8001f46:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
 8001f4a:	f8c2 3090 	streq.w	r3, [r2, #144]	; 0x90
 8001f4e:	4770      	bx	lr
 8001f50:	40002800 	.word	0x40002800
 8001f54:	40021000 	.word	0x40021000

08001f58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f58:	b510      	push	{r4, lr}
 8001f5a:	4604      	mov	r4, r0
 8001f5c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5e:	2214      	movs	r2, #20
 8001f60:	2100      	movs	r1, #0
 8001f62:	a803      	add	r0, sp, #12
 8001f64:	f00b fc01 	bl	800d76a <memset>
  if(hspi->Instance==SPI3)
 8001f68:	6822      	ldr	r2, [r4, #0]
 8001f6a:	4b13      	ldr	r3, [pc, #76]	; (8001fb8 <HAL_SPI_MspInit+0x60>)
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d120      	bne.n	8001fb2 <HAL_SPI_MspInit+0x5a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001f70:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f74:	a903      	add	r1, sp, #12
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001f76:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f78:	4810      	ldr	r0, [pc, #64]	; (8001fbc <HAL_SPI_MspInit+0x64>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001f7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f7e:	659a      	str	r2, [r3, #88]	; 0x58
 8001f80:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001f82:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8001f86:	9201      	str	r2, [sp, #4]
 8001f88:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f8c:	f042 0204 	orr.w	r2, r2, #4
 8001f90:	64da      	str	r2, [r3, #76]	; 0x4c
 8001f92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f94:	f003 0304 	and.w	r3, r3, #4
 8001f98:	9302      	str	r3, [sp, #8]
 8001f9a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001f9c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001fa0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001faa:	2306      	movs	r3, #6
 8001fac:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fae:	f000 ff27 	bl	8002e00 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001fb2:	b008      	add	sp, #32
 8001fb4:	bd10      	pop	{r4, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40003c00 	.word	0x40003c00
 8001fbc:	48000800 	.word	0x48000800

08001fc0 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM3)
 8001fc0:	6802      	ldr	r2, [r0, #0]
 8001fc2:	4b08      	ldr	r3, [pc, #32]	; (8001fe4 <HAL_TIM_Base_MspInit+0x24>)
 8001fc4:	429a      	cmp	r2, r3
{
 8001fc6:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM3)
 8001fc8:	d10a      	bne.n	8001fe0 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fca:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8001fce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001fd0:	f042 0202 	orr.w	r2, r2, #2
 8001fd4:	659a      	str	r2, [r3, #88]	; 0x58
 8001fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	9301      	str	r3, [sp, #4]
 8001fde:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001fe0:	b002      	add	sp, #8
 8001fe2:	4770      	bx	lr
 8001fe4:	40000400 	.word	0x40000400

08001fe8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fe8:	b510      	push	{r4, lr}
 8001fea:	4604      	mov	r4, r0
 8001fec:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fee:	2214      	movs	r2, #20
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	a801      	add	r0, sp, #4
 8001ff4:	f00b fbb9 	bl	800d76a <memset>
  if(htim->Instance==TIM3)
 8001ff8:	6822      	ldr	r2, [r4, #0]
 8001ffa:	4b0c      	ldr	r3, [pc, #48]	; (800202c <HAL_TIM_MspPostInit+0x44>)
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d113      	bne.n	8002028 <HAL_TIM_MspPostInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002000:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
    GPIO_InitStruct.Pin = PWM_LED_Pin|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002004:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002006:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002008:	4809      	ldr	r0, [pc, #36]	; (8002030 <HAL_TIM_MspPostInit+0x48>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800200a:	f042 0204 	orr.w	r2, r2, #4
 800200e:	64da      	str	r2, [r3, #76]	; 0x4c
 8002010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002012:	f003 0304 	and.w	r3, r3, #4
 8002016:	9300      	str	r3, [sp, #0]
 8002018:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = PWM_LED_Pin|GPIO_PIN_7;
 800201a:	23c0      	movs	r3, #192	; 0xc0
 800201c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201e:	2302      	movs	r3, #2
 8002020:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002022:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002024:	f000 feec 	bl	8002e00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002028:	b006      	add	sp, #24
 800202a:	bd10      	pop	{r4, pc}
 800202c:	40000400 	.word	0x40000400
 8002030:	48000800 	.word	0x48000800

08002034 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002034:	b510      	push	{r4, lr}
 8002036:	4604      	mov	r4, r0
 8002038:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800203a:	2214      	movs	r2, #20
 800203c:	2100      	movs	r1, #0
 800203e:	a803      	add	r0, sp, #12
 8002040:	f00b fb93 	bl	800d76a <memset>
  if(huart->Instance==USART2)
 8002044:	6822      	ldr	r2, [r4, #0]
 8002046:	4b13      	ldr	r3, [pc, #76]	; (8002094 <HAL_UART_MspInit+0x60>)
 8002048:	429a      	cmp	r2, r3
 800204a:	d120      	bne.n	800208e <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800204c:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002050:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 8002052:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002054:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002058:	659a      	str	r2, [r3, #88]	; 0x58
 800205a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800205c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002060:	9201      	str	r2, [sp, #4]
 8002062:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002064:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002066:	f042 0201 	orr.w	r2, r2, #1
 800206a:	64da      	str	r2, [r3, #76]	; 0x4c
 800206c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	9302      	str	r3, [sp, #8]
 8002074:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002076:	230c      	movs	r3, #12
 8002078:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207a:	2302      	movs	r3, #2
 800207c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800207e:	2303      	movs	r3, #3
 8002080:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002082:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002086:	2307      	movs	r3, #7
 8002088:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800208a:	f000 feb9 	bl	8002e00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800208e:	b008      	add	sp, #32
 8002090:	bd10      	pop	{r4, pc}
 8002092:	bf00      	nop
 8002094:	40004400 	.word	0x40004400

08002098 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002098:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800209a:	4601      	mov	r1, r0
{
 800209c:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800209e:	2200      	movs	r2, #0
 80020a0:	2036      	movs	r0, #54	; 0x36
 80020a2:	f000 fd9b 	bl	8002bdc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 80020a6:	2036      	movs	r0, #54	; 0x36
 80020a8:	f000 fdcc 	bl	8002c44 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80020ac:	4b14      	ldr	r3, [pc, #80]	; (8002100 <HAL_InitTick+0x68>)
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80020ae:	4c15      	ldr	r4, [pc, #84]	; (8002104 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 80020b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80020b2:	f042 0210 	orr.w	r2, r2, #16
 80020b6:	659a      	str	r2, [r3, #88]	; 0x58
 80020b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ba:	f003 0310 	and.w	r3, r3, #16
 80020be:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020c0:	a901      	add	r1, sp, #4
 80020c2:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 80020c4:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020c6:	f002 f925 	bl	8004314 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80020ca:	f002 f8ff 	bl	80042cc <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 80020ce:	4b0e      	ldr	r3, [pc, #56]	; (8002108 <HAL_InitTick+0x70>)
 80020d0:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80020d2:	f240 33e7 	movw	r3, #999	; 0x3e7
 80020d6:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80020d8:	4b0c      	ldr	r3, [pc, #48]	; (800210c <HAL_InitTick+0x74>)
 80020da:	fbb0 f0f3 	udiv	r0, r0, r3
 80020de:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
 80020e0:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 80020e2:	6060      	str	r0, [r4, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80020e4:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 80020e6:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020e8:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80020ea:	f003 fa8b 	bl	8005604 <HAL_TIM_Base_Init>
 80020ee:	b920      	cbnz	r0, 80020fa <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80020f0:	4620      	mov	r0, r4
 80020f2:	f003 f955 	bl	80053a0 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 80020f6:	b008      	add	sp, #32
 80020f8:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 80020fa:	2001      	movs	r0, #1
 80020fc:	e7fb      	b.n	80020f6 <HAL_InitTick+0x5e>
 80020fe:	bf00      	nop
 8002100:	40021000 	.word	0x40021000
 8002104:	2000c844 	.word	0x2000c844
 8002108:	40001000 	.word	0x40001000
 800210c:	000f4240 	.word	0x000f4240

08002110 <NMI_Handler>:
 8002110:	4770      	bx	lr

08002112 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002112:	e7fe      	b.n	8002112 <HardFault_Handler>

08002114 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002114:	e7fe      	b.n	8002114 <MemManage_Handler>

08002116 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002116:	e7fe      	b.n	8002116 <BusFault_Handler>

08002118 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002118:	e7fe      	b.n	8002118 <UsageFault_Handler>

0800211a <SVC_Handler>:
 800211a:	4770      	bx	lr

0800211c <DebugMon_Handler>:
 800211c:	4770      	bx	lr

0800211e <PendSV_Handler>:
 800211e:	4770      	bx	lr

08002120 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002120:	4770      	bx	lr
	...

08002124 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002124:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002126:	4804      	ldr	r0, [pc, #16]	; (8002138 <TIM6_DAC_IRQHandler+0x14>)
 8002128:	f003 f955 	bl	80053d6 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 800212c:	4803      	ldr	r0, [pc, #12]	; (800213c <TIM6_DAC_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800212e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_DAC_IRQHandler(&hdac1);
 8002132:	f000 bda9 	b.w	8002c88 <HAL_DAC_IRQHandler>
 8002136:	bf00      	nop
 8002138:	2000c844 	.word	0x2000c844
 800213c:	2000c5f4 	.word	0x2000c5f4

08002140 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002140:	4801      	ldr	r0, [pc, #4]	; (8002148 <OTG_FS_IRQHandler+0x8>)
 8002142:	f001 b88f 	b.w	8003264 <HAL_PCD_IRQHandler>
 8002146:	bf00      	nop
 8002148:	2000d1b4 	.word	0x2000d1b4

0800214c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 800214c:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800214e:	4b0a      	ldr	r3, [pc, #40]	; (8002178 <_sbrk+0x2c>)
 8002150:	6819      	ldr	r1, [r3, #0]
{
 8002152:	4602      	mov	r2, r0
	if (heap_end == 0)
 8002154:	b909      	cbnz	r1, 800215a <_sbrk+0xe>
		heap_end = &end;
 8002156:	4909      	ldr	r1, [pc, #36]	; (800217c <_sbrk+0x30>)
 8002158:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800215a:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800215c:	4669      	mov	r1, sp
 800215e:	4402      	add	r2, r0
 8002160:	428a      	cmp	r2, r1
 8002162:	d906      	bls.n	8002172 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8002164:	f00b f8be 	bl	800d2e4 <__errno>
 8002168:	230c      	movs	r3, #12
 800216a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800216c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002170:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8002172:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8002174:	bd08      	pop	{r3, pc}
 8002176:	bf00      	nop
 8002178:	20003f4c 	.word	0x20003f4c
 800217c:	2000d944 	.word	0x2000d944

08002180 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002180:	490f      	ldr	r1, [pc, #60]	; (80021c0 <SystemInit+0x40>)
 8002182:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002186:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800218a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800218e:	4b0d      	ldr	r3, [pc, #52]	; (80021c4 <SystemInit+0x44>)
 8002190:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002192:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8002194:	f042 0201 	orr.w	r2, r2, #1
 8002198:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 800219a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 80021a2:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80021a6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80021a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021ac:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80021b4:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80021b6:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80021b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80021bc:	608b      	str	r3, [r1, #8]
 80021be:	4770      	bx	lr
 80021c0:	e000ed00 	.word	0xe000ed00
 80021c4:	40021000 	.word	0x40021000

080021c8 <W25qxx_Spi>:
#define	W25qxx_Delay(delay)		HAL_Delay(delay)
#endif

//###################################################################################################################
uint8_t	W25qxx_Spi(uint8_t	Data)
{
 80021c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t	ret;
	HAL_SPI_TransmitReceive(&hspi3, &Data, &ret, 1, 10);
 80021ca:	230a      	movs	r3, #10
{
 80021cc:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_SPI_TransmitReceive(&hspi3, &Data, &ret, 1, 10);
 80021d0:	9300      	str	r3, [sp, #0]
 80021d2:	f10d 0217 	add.w	r2, sp, #23
 80021d6:	2301      	movs	r3, #1
 80021d8:	f10d 010f 	add.w	r1, sp, #15
 80021dc:	4803      	ldr	r0, [pc, #12]	; (80021ec <W25qxx_Spi+0x24>)
 80021de:	f002 fe8e 	bl	8004efe <HAL_SPI_TransmitReceive>
	//HAL_SPI_TransmitReceive(&hspi2, &Data, &ret, 1, 10);
	return ret;
}
 80021e2:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80021e6:	b007      	add	sp, #28
 80021e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80021ec:	2000c694 	.word	0x2000c694

080021f0 <W25qxx_ReadID>:

//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 80021f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80021f2:	4d0f      	ldr	r5, [pc, #60]	; (8002230 <W25qxx_ReadID+0x40>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	2104      	movs	r1, #4
 80021f8:	4628      	mov	r0, r5
 80021fa:	f000 fee3 	bl	8002fc4 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x9F);
 80021fe:	209f      	movs	r0, #159	; 0x9f
 8002200:	f7ff ffe2 	bl	80021c8 <W25qxx_Spi>
  Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002204:	20a5      	movs	r0, #165	; 0xa5
 8002206:	f7ff ffdf 	bl	80021c8 <W25qxx_Spi>
 800220a:	4607      	mov	r7, r0
  Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800220c:	20a5      	movs	r0, #165	; 0xa5
 800220e:	f7ff ffdb 	bl	80021c8 <W25qxx_Spi>
 8002212:	4604      	mov	r4, r0
  Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002214:	20a5      	movs	r0, #165	; 0xa5
 8002216:	f7ff ffd7 	bl	80021c8 <W25qxx_Spi>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 800221a:	2201      	movs	r2, #1
  Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800221c:	4606      	mov	r6, r0
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 800221e:	2104      	movs	r1, #4
 8002220:	4628      	mov	r0, r5
 8002222:	f000 fecf 	bl	8002fc4 <HAL_GPIO_WritePin>
  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8002226:	0220      	lsls	r0, r4, #8
 8002228:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
  return Temp;
}
 800222c:	4330      	orrs	r0, r6
 800222e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002230:	48000c00 	.word	0x48000c00

08002234 <W25qxx_ReadUniqID>:

//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8002234:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8002236:	2200      	movs	r2, #0
 8002238:	2104      	movs	r1, #4
 800223a:	4811      	ldr	r0, [pc, #68]	; (8002280 <W25qxx_ReadUniqID+0x4c>)
  W25qxx_Spi(0x4B);
	for(uint8_t	i=0;i<4;i++)
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
	for(uint8_t	i=0;i<8;i++)
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800223c:	4d11      	ldr	r5, [pc, #68]	; (8002284 <W25qxx_ReadUniqID+0x50>)
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 800223e:	f000 fec1 	bl	8002fc4 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x4B);
 8002242:	204b      	movs	r0, #75	; 0x4b
 8002244:	f7ff ffc0 	bl	80021c8 <W25qxx_Spi>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002248:	20a5      	movs	r0, #165	; 0xa5
 800224a:	f7ff ffbd 	bl	80021c8 <W25qxx_Spi>
 800224e:	20a5      	movs	r0, #165	; 0xa5
 8002250:	f7ff ffba 	bl	80021c8 <W25qxx_Spi>
 8002254:	20a5      	movs	r0, #165	; 0xa5
 8002256:	f7ff ffb7 	bl	80021c8 <W25qxx_Spi>
 800225a:	20a5      	movs	r0, #165	; 0xa5
 800225c:	f7ff ffb4 	bl	80021c8 <W25qxx_Spi>
 8002260:	2400      	movs	r4, #0
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002262:	20a5      	movs	r0, #165	; 0xa5
 8002264:	f7ff ffb0 	bl	80021c8 <W25qxx_Spi>
 8002268:	1963      	adds	r3, r4, r5
 800226a:	3401      	adds	r4, #1
	for(uint8_t	i=0;i<8;i++)
 800226c:	2c08      	cmp	r4, #8
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800226e:	7058      	strb	r0, [r3, #1]
	for(uint8_t	i=0;i<8;i++)
 8002270:	d1f7      	bne.n	8002262 <W25qxx_ReadUniqID+0x2e>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8002272:	2201      	movs	r2, #1
 8002274:	2104      	movs	r1, #4
 8002276:	4802      	ldr	r0, [pc, #8]	; (8002280 <W25qxx_ReadUniqID+0x4c>)
}
 8002278:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 800227c:	f000 bea2 	b.w	8002fc4 <HAL_GPIO_WritePin>
 8002280:	48000c00 	.word	0x48000c00
 8002284:	2000c884 	.word	0x2000c884

08002288 <W25qxx_ReadStatusRegister>:
  W25qxx_Delay(1);
}

//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t	SelectStatusRegister_1_2_3)
{
 8002288:	b538      	push	{r3, r4, r5, lr}
	uint8_t	status=0;

	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 800228a:	2200      	movs	r2, #0
{
 800228c:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 800228e:	2104      	movs	r1, #4
 8002290:	4815      	ldr	r0, [pc, #84]	; (80022e8 <W25qxx_ReadStatusRegister+0x60>)
 8002292:	4d16      	ldr	r5, [pc, #88]	; (80022ec <W25qxx_ReadStatusRegister+0x64>)
 8002294:	f000 fe96 	bl	8002fc4 <HAL_GPIO_WritePin>
	if(SelectStatusRegister_1_2_3==1)
 8002298:	2c01      	cmp	r4, #1
 800229a:	d10f      	bne.n	80022bc <W25qxx_ReadStatusRegister+0x34>
	{
		W25qxx_Spi(0x05);
 800229c:	2005      	movs	r0, #5
 800229e:	f7ff ff93 	bl	80021c8 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80022a2:	20a5      	movs	r0, #165	; 0xa5
 80022a4:	f7ff ff90 	bl	80021c8 <W25qxx_Spi>
 80022a8:	4604      	mov	r4, r0
		w25qxx.StatusRegister1 = status;
 80022aa:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
	{
		W25qxx_Spi(0x15);
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);
		w25qxx.StatusRegister3 = status;
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 80022ae:	2201      	movs	r2, #1
 80022b0:	2104      	movs	r1, #4
 80022b2:	480d      	ldr	r0, [pc, #52]	; (80022e8 <W25qxx_ReadStatusRegister+0x60>)
 80022b4:	f000 fe86 	bl	8002fc4 <HAL_GPIO_WritePin>

	return status;
}
 80022b8:	4620      	mov	r0, r4
 80022ba:	bd38      	pop	{r3, r4, r5, pc}
	else if(SelectStatusRegister_1_2_3==2)
 80022bc:	2c02      	cmp	r4, #2
 80022be:	d109      	bne.n	80022d4 <W25qxx_ReadStatusRegister+0x4c>
		W25qxx_Spi(0x35);
 80022c0:	2035      	movs	r0, #53	; 0x35
 80022c2:	f7ff ff81 	bl	80021c8 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80022c6:	20a5      	movs	r0, #165	; 0xa5
 80022c8:	f7ff ff7e 	bl	80021c8 <W25qxx_Spi>
 80022cc:	4604      	mov	r4, r0
		w25qxx.StatusRegister2 = status;
 80022ce:	f885 0025 	strb.w	r0, [r5, #37]	; 0x25
 80022d2:	e7ec      	b.n	80022ae <W25qxx_ReadStatusRegister+0x26>
		W25qxx_Spi(0x15);
 80022d4:	2015      	movs	r0, #21
 80022d6:	f7ff ff77 	bl	80021c8 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80022da:	20a5      	movs	r0, #165	; 0xa5
 80022dc:	f7ff ff74 	bl	80021c8 <W25qxx_Spi>
 80022e0:	4604      	mov	r4, r0
		w25qxx.StatusRegister3 = status;
 80022e2:	f885 0026 	strb.w	r0, [r5, #38]	; 0x26
 80022e6:	e7e2      	b.n	80022ae <W25qxx_ReadStatusRegister+0x26>
 80022e8:	48000c00 	.word	0x48000c00
 80022ec:	2000c884 	.word	0x2000c884

080022f0 <W25qxx_Init>:
 HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
}

//###################################################################################################################
bool	W25qxx_Init(void)
{
 80022f0:	b538      	push	{r3, r4, r5, lr}
	w25qxx.Lock=1;
 80022f2:	4c55      	ldr	r4, [pc, #340]	; (8002448 <W25qxx_Init+0x158>)
 80022f4:	2301      	movs	r3, #1
 80022f6:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	while(HAL_GetTick()<100)
 80022fa:	f000 f8f3 	bl	80024e4 <HAL_GetTick>
 80022fe:	2863      	cmp	r0, #99	; 0x63
 8002300:	d917      	bls.n	8002332 <W25qxx_Init+0x42>
		W25qxx_Delay(1);
	uint32_t	id;
	#if (_W25QXX_DEBUG==1)

	logI("w25qxx Init Begin...\r\n");
 8002302:	4852      	ldr	r0, [pc, #328]	; (800244c <W25qxx_Init+0x15c>)
 8002304:	f7ff f9f8 	bl	80016f8 <logI>
	#endif
	id=W25qxx_ReadID();
 8002308:	f7ff ff72 	bl	80021f0 <W25qxx_ReadID>
 800230c:	4605      	mov	r5, r0

	#if (_W25QXX_DEBUG==1)
	logI("w25qxx ID:0x%X\r\n",id);
 800230e:	4601      	mov	r1, r0
 8002310:	484f      	ldr	r0, [pc, #316]	; (8002450 <W25qxx_Init+0x160>)
 8002312:	f7ff f9f1 	bl	80016f8 <logI>
	#endif
	switch(id&0x0000FFFF)
 8002316:	b2a8      	uxth	r0, r5
 8002318:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
 800231c:	3811      	subs	r0, #17
 800231e:	2809      	cmp	r0, #9
 8002320:	f200 808b 	bhi.w	800243a <W25qxx_Init+0x14a>
 8002324:	e8df f000 	tbb	[pc, r0]
 8002328:	71777d83 	.word	0x71777d83
 800232c:	585f656b 	.word	0x585f656b
 8002330:	0951      	.short	0x0951
		W25qxx_Delay(1);
 8002332:	2001      	movs	r0, #1
 8002334:	f000 f8dc 	bl	80024f0 <HAL_Delay>
 8002338:	e7df      	b.n	80022fa <W25qxx_Init+0xa>
	{
		case 0x401A:	// 	w25q512
			w25qxx.ID=W25Q512;
 800233a:	230a      	movs	r3, #10
 800233c:	7023      	strb	r3, [r4, #0]
			w25qxx.BlockCount=1024;
			#if (_W25QXX_DEBUG==1)
			logI("w25qxx Chip: w25q512\r\n");
 800233e:	4845      	ldr	r0, [pc, #276]	; (8002454 <W25qxx_Init+0x164>)
			w25qxx.BlockCount=1024;
 8002340:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002344:	61e3      	str	r3, [r4, #28]
		break;
		case 0x4011:	//	w25q10
			w25qxx.ID=W25Q10;
			w25qxx.BlockCount=2;
			#if (_W25QXX_DEBUG==1)
			logI("w25qxx Chip: w25q10\r\n");
 8002346:	f7ff f9d7 	bl	80016f8 <logI>
				#endif
			w25qxx.Lock=0;
			return false;

	}
	w25qxx.PageSize=256;
 800234a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800234e:	8163      	strh	r3, [r4, #10]
	w25qxx.SectorSize=0x1000;
 8002350:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002354:	6123      	str	r3, [r4, #16]
	w25qxx.SectorCount=w25qxx.BlockCount*16;
 8002356:	69e3      	ldr	r3, [r4, #28]
 8002358:	011a      	lsls	r2, r3, #4
	w25qxx.PageCount=(w25qxx.SectorCount*w25qxx.SectorSize)/w25qxx.PageSize;
 800235a:	041b      	lsls	r3, r3, #16
	w25qxx.SectorCount=w25qxx.BlockCount*16;
 800235c:	6162      	str	r2, [r4, #20]
	w25qxx.PageCount=(w25qxx.SectorCount*w25qxx.SectorSize)/w25qxx.PageSize;
 800235e:	0a1a      	lsrs	r2, r3, #8
 8002360:	60e2      	str	r2, [r4, #12]
	w25qxx.BlockSize=w25qxx.SectorSize*16;
	w25qxx.CapacityInKiloByte=(w25qxx.SectorCount*w25qxx.SectorSize)/1024;
 8002362:	0a9b      	lsrs	r3, r3, #10
	w25qxx.BlockSize=w25qxx.SectorSize*16;
 8002364:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	w25qxx.CapacityInKiloByte=(w25qxx.SectorCount*w25qxx.SectorSize)/1024;
 8002368:	6223      	str	r3, [r4, #32]
	w25qxx.BlockSize=w25qxx.SectorSize*16;
 800236a:	61a2      	str	r2, [r4, #24]
	W25qxx_ReadUniqID();
 800236c:	f7ff ff62 	bl	8002234 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8002370:	2001      	movs	r0, #1
 8002372:	f7ff ff89 	bl	8002288 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8002376:	2002      	movs	r0, #2
 8002378:	f7ff ff86 	bl	8002288 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 800237c:	2003      	movs	r0, #3
 800237e:	f7ff ff83 	bl	8002288 <W25qxx_ReadStatusRegister>
	#if (_W25QXX_DEBUG==1)
	logI("w25qxx Page Size: %d Bytes\r\n",w25qxx.PageSize);
 8002382:	8961      	ldrh	r1, [r4, #10]
 8002384:	4834      	ldr	r0, [pc, #208]	; (8002458 <W25qxx_Init+0x168>)
 8002386:	f7ff f9b7 	bl	80016f8 <logI>
	logI("w25qxx Page Count: %d\r\n",w25qxx.PageCount);
 800238a:	68e1      	ldr	r1, [r4, #12]
 800238c:	4833      	ldr	r0, [pc, #204]	; (800245c <W25qxx_Init+0x16c>)
 800238e:	f7ff f9b3 	bl	80016f8 <logI>
	logI("w25qxx Sector Size: %d Bytes\r\n",w25qxx.SectorSize);
 8002392:	6921      	ldr	r1, [r4, #16]
 8002394:	4832      	ldr	r0, [pc, #200]	; (8002460 <W25qxx_Init+0x170>)
 8002396:	f7ff f9af 	bl	80016f8 <logI>
	logI("w25qxx Sector Count: %d\r\n",w25qxx.SectorCount);
 800239a:	6961      	ldr	r1, [r4, #20]
 800239c:	4831      	ldr	r0, [pc, #196]	; (8002464 <W25qxx_Init+0x174>)
 800239e:	f7ff f9ab 	bl	80016f8 <logI>
	logI("w25qxx Block Size: %d Bytes\r\n",w25qxx.BlockSize);
 80023a2:	69a1      	ldr	r1, [r4, #24]
 80023a4:	4830      	ldr	r0, [pc, #192]	; (8002468 <W25qxx_Init+0x178>)
 80023a6:	f7ff f9a7 	bl	80016f8 <logI>
	logI("w25qxx Block Count: %d\r\n",w25qxx.BlockCount);
 80023aa:	69e1      	ldr	r1, [r4, #28]
 80023ac:	482f      	ldr	r0, [pc, #188]	; (800246c <W25qxx_Init+0x17c>)
 80023ae:	f7ff f9a3 	bl	80016f8 <logI>
	logI("w25qxx Capacity: %d KiloBytes\r\n",w25qxx.CapacityInKiloByte);
 80023b2:	6a21      	ldr	r1, [r4, #32]
 80023b4:	482e      	ldr	r0, [pc, #184]	; (8002470 <W25qxx_Init+0x180>)
 80023b6:	f7ff f99f 	bl	80016f8 <logI>
	logI("w25qxx Init Done\r\n");
 80023ba:	482e      	ldr	r0, [pc, #184]	; (8002474 <W25qxx_Init+0x184>)
 80023bc:	f7ff f99c 	bl	80016f8 <logI>
	#endif
	w25qxx.Lock=0;
 80023c0:	2300      	movs	r3, #0
 80023c2:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	return true;
 80023c6:	2001      	movs	r0, #1
}
 80023c8:	bd38      	pop	{r3, r4, r5, pc}
			w25qxx.ID=W25Q256;
 80023ca:	2309      	movs	r3, #9
 80023cc:	7023      	strb	r3, [r4, #0]
			w25qxx.BlockCount=512;
 80023ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023d2:	61e3      	str	r3, [r4, #28]
			logI("w25qxx Chip: w25q256\r\n");
 80023d4:	4828      	ldr	r0, [pc, #160]	; (8002478 <W25qxx_Init+0x188>)
 80023d6:	e7b6      	b.n	8002346 <W25qxx_Init+0x56>
			w25qxx.ID=W25Q128;
 80023d8:	2308      	movs	r3, #8
 80023da:	7023      	strb	r3, [r4, #0]
			w25qxx.BlockCount=256;
 80023dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023e0:	61e3      	str	r3, [r4, #28]
			logI("w25qxx Chip: w25q128\r\n");
 80023e2:	4826      	ldr	r0, [pc, #152]	; (800247c <W25qxx_Init+0x18c>)
 80023e4:	e7af      	b.n	8002346 <W25qxx_Init+0x56>
			w25qxx.ID=W25Q64;
 80023e6:	2307      	movs	r3, #7
 80023e8:	7023      	strb	r3, [r4, #0]
			w25qxx.BlockCount=128;
 80023ea:	2380      	movs	r3, #128	; 0x80
 80023ec:	61e3      	str	r3, [r4, #28]
			logI("w25qxx Chip: w25q64\r\n");
 80023ee:	4824      	ldr	r0, [pc, #144]	; (8002480 <W25qxx_Init+0x190>)
 80023f0:	e7a9      	b.n	8002346 <W25qxx_Init+0x56>
			w25qxx.ID=W25Q32;
 80023f2:	2306      	movs	r3, #6
 80023f4:	7023      	strb	r3, [r4, #0]
			w25qxx.BlockCount=64;
 80023f6:	2340      	movs	r3, #64	; 0x40
 80023f8:	61e3      	str	r3, [r4, #28]
			logI("w25qxx Chip: w25q32\r\n");
 80023fa:	4822      	ldr	r0, [pc, #136]	; (8002484 <W25qxx_Init+0x194>)
 80023fc:	e7a3      	b.n	8002346 <W25qxx_Init+0x56>
			w25qxx.ID=W25Q16;
 80023fe:	2305      	movs	r3, #5
 8002400:	7023      	strb	r3, [r4, #0]
			w25qxx.BlockCount=32;
 8002402:	2320      	movs	r3, #32
 8002404:	61e3      	str	r3, [r4, #28]
			logI("w25qxx Chip: w25q16\r\n");
 8002406:	4820      	ldr	r0, [pc, #128]	; (8002488 <W25qxx_Init+0x198>)
 8002408:	e79d      	b.n	8002346 <W25qxx_Init+0x56>
			w25qxx.ID=W25Q80;
 800240a:	2304      	movs	r3, #4
 800240c:	7023      	strb	r3, [r4, #0]
			w25qxx.BlockCount=16;
 800240e:	2310      	movs	r3, #16
 8002410:	61e3      	str	r3, [r4, #28]
			logI("w25qxx Chip: w25q80\r\n");
 8002412:	481e      	ldr	r0, [pc, #120]	; (800248c <W25qxx_Init+0x19c>)
 8002414:	e797      	b.n	8002346 <W25qxx_Init+0x56>
			w25qxx.ID=W25Q40;
 8002416:	2303      	movs	r3, #3
 8002418:	7023      	strb	r3, [r4, #0]
			w25qxx.BlockCount=8;
 800241a:	2308      	movs	r3, #8
 800241c:	61e3      	str	r3, [r4, #28]
			logI("w25qxx Chip: w25q40\r\n");
 800241e:	481c      	ldr	r0, [pc, #112]	; (8002490 <W25qxx_Init+0x1a0>)
 8002420:	e791      	b.n	8002346 <W25qxx_Init+0x56>
			w25qxx.ID=W25Q20;
 8002422:	2302      	movs	r3, #2
 8002424:	7023      	strb	r3, [r4, #0]
			w25qxx.BlockCount=4;
 8002426:	2304      	movs	r3, #4
 8002428:	61e3      	str	r3, [r4, #28]
			logI("w25qxx Chip: w25q20\r\n");
 800242a:	481a      	ldr	r0, [pc, #104]	; (8002494 <W25qxx_Init+0x1a4>)
 800242c:	e78b      	b.n	8002346 <W25qxx_Init+0x56>
			w25qxx.ID=W25Q10;
 800242e:	2301      	movs	r3, #1
 8002430:	7023      	strb	r3, [r4, #0]
			w25qxx.BlockCount=2;
 8002432:	2302      	movs	r3, #2
 8002434:	61e3      	str	r3, [r4, #28]
			logI("w25qxx Chip: w25q10\r\n");
 8002436:	4818      	ldr	r0, [pc, #96]	; (8002498 <W25qxx_Init+0x1a8>)
 8002438:	e785      	b.n	8002346 <W25qxx_Init+0x56>
				logI("w25qxx Unknown ID\r\n");
 800243a:	4818      	ldr	r0, [pc, #96]	; (800249c <W25qxx_Init+0x1ac>)
 800243c:	f7ff f95c 	bl	80016f8 <logI>
			w25qxx.Lock=0;
 8002440:	2000      	movs	r0, #0
 8002442:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
			return false;
 8002446:	bd38      	pop	{r3, r4, r5, pc}
 8002448:	2000c884 	.word	0x2000c884
 800244c:	08010494 	.word	0x08010494
 8002450:	080104ab 	.word	0x080104ab
 8002454:	080104bc 	.word	0x080104bc
 8002458:	080105af 	.word	0x080105af
 800245c:	080105cc 	.word	0x080105cc
 8002460:	080105e4 	.word	0x080105e4
 8002464:	08010603 	.word	0x08010603
 8002468:	0801061d 	.word	0x0801061d
 800246c:	0801063b 	.word	0x0801063b
 8002470:	08010654 	.word	0x08010654
 8002474:	08010674 	.word	0x08010674
 8002478:	080104d3 	.word	0x080104d3
 800247c:	080104ea 	.word	0x080104ea
 8002480:	08010501 	.word	0x08010501
 8002484:	08010517 	.word	0x08010517
 8002488:	0801052d 	.word	0x0801052d
 800248c:	08010543 	.word	0x08010543
 8002490:	08010559 	.word	0x08010559
 8002494:	0801056f 	.word	0x0801056f
 8002498:	08010585 	.word	0x08010585
 800249c:	0801059b 	.word	0x0801059b

080024a0 <HAL_Init>:
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024a0:	4a09      	ldr	r2, [pc, #36]	; (80024c8 <HAL_Init+0x28>)
 80024a2:	6813      	ldr	r3, [r2, #0]
 80024a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 80024a8:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024aa:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024ac:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024ae:	f000 fb83 	bl	8002bb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024b2:	2000      	movs	r0, #0
 80024b4:	f7ff fdf0 	bl	8002098 <HAL_InitTick>
 80024b8:	4604      	mov	r4, r0
 80024ba:	b918      	cbnz	r0, 80024c4 <HAL_Init+0x24>
    status = HAL_ERROR;
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80024bc:	f7ff fc3e 	bl	8001d3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 80024c0:	4620      	mov	r0, r4
 80024c2:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80024c4:	2401      	movs	r4, #1
 80024c6:	e7fb      	b.n	80024c0 <HAL_Init+0x20>
 80024c8:	40022000 	.word	0x40022000

080024cc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80024cc:	4a03      	ldr	r2, [pc, #12]	; (80024dc <HAL_IncTick+0x10>)
 80024ce:	4904      	ldr	r1, [pc, #16]	; (80024e0 <HAL_IncTick+0x14>)
 80024d0:	6813      	ldr	r3, [r2, #0]
 80024d2:	6809      	ldr	r1, [r1, #0]
 80024d4:	440b      	add	r3, r1
 80024d6:	6013      	str	r3, [r2, #0]
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	2000c8ac 	.word	0x2000c8ac
 80024e0:	20000004 	.word	0x20000004

080024e4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80024e4:	4b01      	ldr	r3, [pc, #4]	; (80024ec <HAL_GetTick+0x8>)
 80024e6:	6818      	ldr	r0, [r3, #0]
}
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	2000c8ac 	.word	0x2000c8ac

080024f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024f0:	b538      	push	{r3, r4, r5, lr}
 80024f2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80024f4:	f7ff fff6 	bl	80024e4 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024f8:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80024fa:	bf1c      	itt	ne
 80024fc:	4b05      	ldrne	r3, [pc, #20]	; (8002514 <HAL_Delay+0x24>)
 80024fe:	681b      	ldrne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8002500:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8002502:	bf18      	it	ne
 8002504:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002506:	f7ff ffed 	bl	80024e4 <HAL_GetTick>
 800250a:	1b40      	subs	r0, r0, r5
 800250c:	4284      	cmp	r4, r0
 800250e:	d8fa      	bhi.n	8002506 <HAL_Delay+0x16>
  {
  }
}
 8002510:	bd38      	pop	{r3, r4, r5, pc}
 8002512:	bf00      	nop
 8002514:	20000004 	.word	0x20000004

08002518 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002518:	b530      	push	{r4, r5, lr}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800251a:	0dcc      	lsrs	r4, r1, #23
 800251c:	f004 0404 	and.w	r4, r4, #4
 8002520:	3014      	adds	r0, #20

  MODIFY_REG(*preg,
 8002522:	f3c1 5104 	ubfx	r1, r1, #20, #5
 8002526:	5823      	ldr	r3, [r4, r0]
 8002528:	2507      	movs	r5, #7
 800252a:	408d      	lsls	r5, r1
 800252c:	ea23 0305 	bic.w	r3, r3, r5
 8002530:	fa02 f101 	lsl.w	r1, r2, r1
 8002534:	4319      	orrs	r1, r3
 8002536:	5021      	str	r1, [r4, r0]
 8002538:	bd30      	pop	{r4, r5, pc}

0800253a <LL_ADC_IsEnabled>:
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800253a:	6880      	ldr	r0, [r0, #8]
}
 800253c:	f000 0001 	and.w	r0, r0, #1
 8002540:	4770      	bx	lr

08002542 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002542:	6880      	ldr	r0, [r0, #8]
}
 8002544:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8002548:	4770      	bx	lr
	...

0800254c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800254c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800254e:	2300      	movs	r3, #0
 8002550:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002552:	4604      	mov	r4, r0
 8002554:	2800      	cmp	r0, #0
 8002556:	f000 8085 	beq.w	8002664 <HAL_ADC_Init+0x118>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800255a:	6d45      	ldr	r5, [r0, #84]	; 0x54
 800255c:	b925      	cbnz	r5, 8002568 <HAL_ADC_Init+0x1c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800255e:	f7ff fc05 	bl	8001d6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002562:	65a5      	str	r5, [r4, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002564:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002568:	6820      	ldr	r0, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800256a:	6883      	ldr	r3, [r0, #8]
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	d47b      	bmi.n	8002668 <HAL_ADC_Init+0x11c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002570:	6883      	ldr	r3, [r0, #8]
 8002572:	00dd      	lsls	r5, r3, #3
 8002574:	d57f      	bpl.n	8002676 <HAL_ADC_Init+0x12a>
 8002576:	6883      	ldr	r3, [r0, #8]
 8002578:	00d9      	lsls	r1, r3, #3
 800257a:	f140 808a 	bpl.w	8002692 <HAL_ADC_Init+0x146>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800257e:	2100      	movs	r1, #0

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002580:	f7ff ffdf 	bl	8002542 <LL_ADC_REG_IsConversionOngoing>

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002584:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002586:	f013 0f10 	tst.w	r3, #16
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800258a:	6d63      	ldr	r3, [r4, #84]	; 0x54
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800258c:	d167      	bne.n	800265e <HAL_ADC_Init+0x112>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800258e:	2800      	cmp	r0, #0
 8002590:	d165      	bne.n	800265e <HAL_ADC_Init+0x112>
    ADC_STATE_CLR_SET(hadc->State,
 8002592:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002596:	f043 0302 	orr.w	r3, r3, #2
 800259a:	6563      	str	r3, [r4, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800259c:	6820      	ldr	r0, [r4, #0]
 800259e:	f7ff ffcc 	bl	800253a <LL_ADC_IsEnabled>
 80025a2:	b998      	cbnz	r0, 80025cc <HAL_ADC_Init+0x80>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025a4:	4852      	ldr	r0, [pc, #328]	; (80026f0 <HAL_ADC_Init+0x1a4>)
 80025a6:	f7ff ffc8 	bl	800253a <LL_ADC_IsEnabled>
 80025aa:	4603      	mov	r3, r0
 80025ac:	4851      	ldr	r0, [pc, #324]	; (80026f4 <HAL_ADC_Init+0x1a8>)
 80025ae:	f7ff ffc4 	bl	800253a <LL_ADC_IsEnabled>
 80025b2:	4303      	orrs	r3, r0
 80025b4:	4850      	ldr	r0, [pc, #320]	; (80026f8 <HAL_ADC_Init+0x1ac>)
 80025b6:	f7ff ffc0 	bl	800253a <LL_ADC_IsEnabled>
 80025ba:	4303      	orrs	r3, r0
 80025bc:	d106      	bne.n	80025cc <HAL_ADC_Init+0x80>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80025be:	4a4f      	ldr	r2, [pc, #316]	; (80026fc <HAL_ADC_Init+0x1b0>)
 80025c0:	6860      	ldr	r0, [r4, #4]
 80025c2:	6893      	ldr	r3, [r2, #8]
 80025c4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80025c8:	4303      	orrs	r3, r0
 80025ca:	6093      	str	r3, [r2, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 80025cc:	68e0      	ldr	r0, [r4, #12]
 80025ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80025d0:	f894 2020 	ldrb.w	r2, [r4, #32]
                hadc->Init.DataAlign                                                   |
 80025d4:	4303      	orrs	r3, r0
 80025d6:	68a0      	ldr	r0, [r4, #8]
 80025d8:	4303      	orrs	r3, r0
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025da:	7e60      	ldrb	r0, [r4, #25]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025dc:	2a01      	cmp	r2, #1
                hadc->Init.DataAlign                                                   |
 80025de:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80025e6:	bf02      	ittt	eq
 80025e8:	6a62      	ldreq	r2, [r4, #36]	; 0x24
 80025ea:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
 80025ee:	ea43 4342 	orreq.w	r3, r3, r2, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025f2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80025f4:	b122      	cbz	r2, 8002600 <HAL_ADC_Init+0xb4>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 80025f6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025f8:	f402 7270 	and.w	r2, r2, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80025fc:	4302      	orrs	r2, r0
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025fe:	4313      	orrs	r3, r2
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002600:	6820      	ldr	r0, [r4, #0]
 8002602:	4a3f      	ldr	r2, [pc, #252]	; (8002700 <HAL_ADC_Init+0x1b4>)
 8002604:	68c5      	ldr	r5, [r0, #12]
 8002606:	402a      	ands	r2, r5
 8002608:	4313      	orrs	r3, r2
 800260a:	60c3      	str	r3, [r0, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800260c:	f7ff ff99 	bl	8002542 <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002610:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	0712      	lsls	r2, r2, #28
 8002616:	d546      	bpl.n	80026a6 <HAL_ADC_Init+0x15a>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002618:	6922      	ldr	r2, [r4, #16]
 800261a:	2a01      	cmp	r2, #1
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800261c:	bf05      	ittet	eq
 800261e:	6b18      	ldreq	r0, [r3, #48]	; 0x30
 8002620:	69e2      	ldreq	r2, [r4, #28]
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002622:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002624:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
 8002628:	bf06      	itte	eq
 800262a:	f020 000f 	biceq.w	r0, r0, #15
 800262e:	4302      	orreq	r2, r0
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002630:	f022 020f 	bicne.w	r2, r2, #15
 8002634:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002636:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002638:	f023 0303 	bic.w	r3, r3, #3
 800263c:	f043 0301 	orr.w	r3, r3, #1
 8002640:	6563      	str	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8002642:	4608      	mov	r0, r1
 8002644:	b003      	add	sp, #12
 8002646:	bd30      	pop	{r4, r5, pc}
      wait_loop_index--;
 8002648:	9b01      	ldr	r3, [sp, #4]
 800264a:	3b01      	subs	r3, #1
 800264c:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800264e:	9b01      	ldr	r3, [sp, #4]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1f9      	bne.n	8002648 <HAL_ADC_Init+0xfc>
 8002654:	e78f      	b.n	8002576 <HAL_ADC_Init+0x2a>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002656:	691a      	ldr	r2, [r3, #16]
 8002658:	f022 0201 	bic.w	r2, r2, #1
 800265c:	e045      	b.n	80026ea <HAL_ADC_Init+0x19e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800265e:	f043 0310 	orr.w	r3, r3, #16
 8002662:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 8002664:	2101      	movs	r1, #1
 8002666:	e7ec      	b.n	8002642 <HAL_ADC_Init+0xf6>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002668:	6883      	ldr	r3, [r0, #8]
 800266a:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800266e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002672:	6083      	str	r3, [r0, #8]
 8002674:	e77c      	b.n	8002570 <HAL_ADC_Init+0x24>
  MODIFY_REG(ADCx->CR,
 8002676:	6883      	ldr	r3, [r0, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002678:	4a22      	ldr	r2, [pc, #136]	; (8002704 <HAL_ADC_Init+0x1b8>)
 800267a:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800267e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002686:	6083      	str	r3, [r0, #8]
 8002688:	4b1f      	ldr	r3, [pc, #124]	; (8002708 <HAL_ADC_Init+0x1bc>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002690:	e7dc      	b.n	800264c <HAL_ADC_Init+0x100>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002692:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002694:	f043 0310 	orr.w	r3, r3, #16
 8002698:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800269a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800269c:	f043 0301 	orr.w	r3, r3, #1
 80026a0:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 80026a2:	2101      	movs	r1, #1
 80026a4:	e76c      	b.n	8002580 <HAL_ADC_Init+0x34>
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026a6:	2800      	cmp	r0, #0
 80026a8:	d1b6      	bne.n	8002618 <HAL_ADC_Init+0xcc>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80026aa:	68d8      	ldr	r0, [r3, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80026ac:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80026b0:	7e25      	ldrb	r5, [r4, #24]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80026b2:	0052      	lsls	r2, r2, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80026b4:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80026b8:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80026bc:	f020 0002 	bic.w	r0, r0, #2
 80026c0:	4302      	orrs	r2, r0
 80026c2:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 80026c4:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 80026c8:	2a01      	cmp	r2, #1
 80026ca:	d1c4      	bne.n	8002656 <HAL_ADC_Init+0x10a>
        MODIFY_REG(hadc->Instance->CFGR2,
 80026cc:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80026ce:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80026d0:	6918      	ldr	r0, [r3, #16]
 80026d2:	432a      	orrs	r2, r5
 80026d4:	6c65      	ldr	r5, [r4, #68]	; 0x44
 80026d6:	f042 0201 	orr.w	r2, r2, #1
 80026da:	432a      	orrs	r2, r5
 80026dc:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80026de:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 80026e2:	432a      	orrs	r2, r5
 80026e4:	f020 0004 	bic.w	r0, r0, #4
 80026e8:	4302      	orrs	r2, r0
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80026ea:	611a      	str	r2, [r3, #16]
 80026ec:	e794      	b.n	8002618 <HAL_ADC_Init+0xcc>
 80026ee:	bf00      	nop
 80026f0:	50040000 	.word	0x50040000
 80026f4:	50040100 	.word	0x50040100
 80026f8:	50040200 	.word	0x50040200
 80026fc:	50040300 	.word	0x50040300
 8002700:	fff0c007 	.word	0xfff0c007
 8002704:	00030d40 	.word	0x00030d40
 8002708:	20000000 	.word	0x20000000

0800270c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800270c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800270e:	2300      	movs	r3, #0
 8002710:	9301      	str	r3, [sp, #4]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002712:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8002716:	2b01      	cmp	r3, #1
{
 8002718:	4605      	mov	r5, r0
 800271a:	460c      	mov	r4, r1
  __HAL_LOCK(hadc);
 800271c:	f000 8184 	beq.w	8002a28 <HAL_ADC_ConfigChannel+0x31c>
 8002720:	2301      	movs	r3, #1
 8002722:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002726:	6800      	ldr	r0, [r0, #0]
 8002728:	f7ff ff0b 	bl	8002542 <LL_ADC_REG_IsConversionOngoing>
 800272c:	2800      	cmp	r0, #0
 800272e:	f040 8175 	bne.w	8002a1c <HAL_ADC_ConfigChannel+0x310>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002732:	684b      	ldr	r3, [r1, #4]
 8002734:	2b05      	cmp	r3, #5
 8002736:	d808      	bhi.n	800274a <HAL_ADC_ConfigChannel+0x3e>
    {
      switch (sConfig->Rank)
 8002738:	3b02      	subs	r3, #2
 800273a:	2b03      	cmp	r3, #3
 800273c:	d866      	bhi.n	800280c <HAL_ADC_ConfigChannel+0x100>
 800273e:	e8df f003 	tbb	[pc, r3]
 8002742:	5e02      	.short	0x5e02
 8002744:	6260      	.short	0x6260
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8002746:	230c      	movs	r3, #12
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8002748:	6063      	str	r3, [r4, #4]
      }
    }
    #endif
    
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800274a:	6862      	ldr	r2, [r4, #4]
 800274c:	6828      	ldr	r0, [r5, #0]
  MODIFY_REG(*preg,
 800274e:	6823      	ldr	r3, [r4, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002750:	0991      	lsrs	r1, r2, #6
 8002752:	f001 010c 	and.w	r1, r1, #12
 8002756:	f100 0730 	add.w	r7, r0, #48	; 0x30
  MODIFY_REG(*preg,
 800275a:	f002 021f 	and.w	r2, r2, #31
 800275e:	59ce      	ldr	r6, [r1, r7]
 8002760:	f04f 0e1f 	mov.w	lr, #31
 8002764:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8002768:	4093      	lsls	r3, r2
 800276a:	fa0e f202 	lsl.w	r2, lr, r2
 800276e:	ea26 0202 	bic.w	r2, r6, r2
 8002772:	4313      	orrs	r3, r2
 8002774:	51cb      	str	r3, [r1, r7]
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002776:	f7ff fee4 	bl	8002542 <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800277a:	682b      	ldr	r3, [r5, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800277c:	689a      	ldr	r2, [r3, #8]
 800277e:	0711      	lsls	r1, r2, #28
 8002780:	f140 8154 	bpl.w	8002a2c <HAL_ADC_ConfigChannel+0x320>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002784:	6828      	ldr	r0, [r5, #0]
 8002786:	f7ff fed8 	bl	800253a <LL_ADC_IsEnabled>
 800278a:	2800      	cmp	r0, #0
 800278c:	f040 80d3 	bne.w	8002936 <HAL_ADC_ConfigChannel+0x22a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002790:	68e6      	ldr	r6, [r4, #12]
 8002792:	6828      	ldr	r0, [r5, #0]
 8002794:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8002796:	4aba      	ldr	r2, [pc, #744]	; (8002a80 <HAL_ADC_ConfigChannel+0x374>)
 8002798:	f8d0 10b0 	ldr.w	r1, [r0, #176]	; 0xb0
 800279c:	f006 0e18 	and.w	lr, r6, #24
 80027a0:	f3c3 0712 	ubfx	r7, r3, #0, #19
 80027a4:	fa22 f20e 	lsr.w	r2, r2, lr
 80027a8:	401a      	ands	r2, r3
 80027aa:	ea21 0107 	bic.w	r1, r1, r7
 80027ae:	430a      	orrs	r2, r1
 80027b0:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80027b4:	4ab3      	ldr	r2, [pc, #716]	; (8002a84 <HAL_ADC_ConfigChannel+0x378>)
 80027b6:	4296      	cmp	r6, r2
 80027b8:	f040 80bd 	bne.w	8002936 <HAL_ADC_ConfigChannel+0x22a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027bc:	2f00      	cmp	r7, #0
 80027be:	f040 808f 	bne.w	80028e0 <HAL_ADC_ConfigChannel+0x1d4>
 80027c2:	0e9e      	lsrs	r6, r3, #26
 80027c4:	3601      	adds	r6, #1
 80027c6:	f006 021f 	and.w	r2, r6, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027ca:	2a09      	cmp	r2, #9
 80027cc:	f04f 0101 	mov.w	r1, #1
 80027d0:	ea4f 6686 	mov.w	r6, r6, lsl #26
 80027d4:	f240 809e 	bls.w	8002914 <HAL_ADC_ConfigChannel+0x208>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027d8:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 80027dc:	4091      	lsls	r1, r2
 80027de:	ea41 0206 	orr.w	r2, r1, r6
 80027e2:	2f00      	cmp	r7, #0
 80027e4:	f040 80c7 	bne.w	8002976 <HAL_ADC_ConfigChannel+0x26a>
 80027e8:	0e9b      	lsrs	r3, r3, #26
 80027ea:	3301      	adds	r3, #1
 80027ec:	f003 031f 	and.w	r3, r3, #31
 80027f0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80027f4:	391e      	subs	r1, #30
 80027f6:	0509      	lsls	r1, r1, #20
 80027f8:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 80027fc:	e097      	b.n	800292e <HAL_ADC_ConfigChannel+0x222>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 80027fe:	2312      	movs	r3, #18
 8002800:	e7a2      	b.n	8002748 <HAL_ADC_ConfigChannel+0x3c>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8002802:	2318      	movs	r3, #24
 8002804:	e7a0      	b.n	8002748 <HAL_ADC_ConfigChannel+0x3c>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8002806:	f44f 7380 	mov.w	r3, #256	; 0x100
 800280a:	e79d      	b.n	8002748 <HAL_ADC_ConfigChannel+0x3c>
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 800280c:	2306      	movs	r3, #6
 800280e:	e79b      	b.n	8002748 <HAL_ADC_ConfigChannel+0x3c>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002810:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8002812:	6e19      	ldr	r1, [r3, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002814:	f3c2 0612 	ubfx	r6, r2, #0, #19
 8002818:	f3c1 6184 	ubfx	r1, r1, #26, #5
 800281c:	2e00      	cmp	r6, #0
 800281e:	d13e      	bne.n	800289e <HAL_ADC_ConfigChannel+0x192>
 8002820:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8002824:	428a      	cmp	r2, r1
  MODIFY_REG(*preg,
 8002826:	bf02      	ittt	eq
 8002828:	6e1a      	ldreq	r2, [r3, #96]	; 0x60
 800282a:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 800282e:	661a      	streq	r2, [r3, #96]	; 0x60
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002830:	6e5a      	ldr	r2, [r3, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002832:	6822      	ldr	r2, [r4, #0]
 8002834:	6e5e      	ldr	r6, [r3, #100]	; 0x64
 8002836:	f3c2 0712 	ubfx	r7, r2, #0, #19
 800283a:	f3c6 6684 	ubfx	r6, r6, #26, #5
 800283e:	f100 010c 	add.w	r1, r0, #12
 8002842:	bb8f      	cbnz	r7, 80028a8 <HAL_ADC_ConfigChannel+0x19c>
 8002844:	f3c2 6784 	ubfx	r7, r2, #26, #5
 8002848:	42be      	cmp	r6, r7
 800284a:	f040 8112 	bne.w	8002a72 <HAL_ADC_ConfigChannel+0x366>
  MODIFY_REG(*preg,
 800284e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002850:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002854:	665a      	str	r2, [r3, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002856:	6822      	ldr	r2, [r4, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002858:	6883      	ldr	r3, [r0, #8]
 800285a:	6883      	ldr	r3, [r0, #8]
 800285c:	f3c2 0712 	ubfx	r7, r2, #0, #19
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002860:	f100 0608 	add.w	r6, r0, #8
 8002864:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8002868:	bb57      	cbnz	r7, 80028c0 <HAL_ADC_ConfigChannel+0x1b4>
 800286a:	f3c2 6284 	ubfx	r2, r2, #26, #5
 800286e:	4293      	cmp	r3, r2
 8002870:	f040 811c 	bne.w	8002aac <HAL_ADC_ConfigChannel+0x3a0>
  MODIFY_REG(*preg,
 8002874:	6833      	ldr	r3, [r6, #0]
 8002876:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800287a:	6033      	str	r3, [r6, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800287c:	68c3      	ldr	r3, [r0, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800287e:	6823      	ldr	r3, [r4, #0]
 8002880:	68c2      	ldr	r2, [r0, #12]
 8002882:	f3c3 0012 	ubfx	r0, r3, #0, #19
 8002886:	f3c2 6284 	ubfx	r2, r2, #26, #5
 800288a:	bb20      	cbnz	r0, 80028d6 <HAL_ADC_ConfigChannel+0x1ca>
 800288c:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8002890:	4293      	cmp	r3, r2
  MODIFY_REG(*preg,
 8002892:	bf02      	ittt	eq
 8002894:	680b      	ldreq	r3, [r1, #0]
 8002896:	f023 4300 	biceq.w	r3, r3, #2147483648	; 0x80000000
 800289a:	600b      	streq	r3, [r1, #0]
 800289c:	e772      	b.n	8002784 <HAL_ADC_ConfigChannel+0x78>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289e:	fa92 f2a2 	rbit	r2, r2
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028a2:	fab2 f282 	clz	r2, r2
 80028a6:	e7bd      	b.n	8002824 <HAL_ADC_ConfigChannel+0x118>
 80028a8:	fa92 f7a2 	rbit	r7, r2
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028ac:	fab7 f787 	clz	r7, r7
 80028b0:	42be      	cmp	r6, r7
 80028b2:	d0cc      	beq.n	800284e <HAL_ADC_ConfigChannel+0x142>
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028b4:	f103 0668 	add.w	r6, r3, #104	; 0x68
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80028b8:	6e9f      	ldr	r7, [r3, #104]	; 0x68
 80028ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028bc:	f3c3 6384 	ubfx	r3, r3, #26, #5
 80028c0:	fa92 f2a2 	rbit	r2, r2
 80028c4:	fab2 f282 	clz	r2, r2
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d0d3      	beq.n	8002874 <HAL_ADC_ConfigChannel+0x168>
 80028cc:	68c3      	ldr	r3, [r0, #12]
 80028ce:	68c2      	ldr	r2, [r0, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028d0:	6823      	ldr	r3, [r4, #0]
 80028d2:	f3c2 6284 	ubfx	r2, r2, #26, #5
 80028d6:	fa93 f3a3 	rbit	r3, r3
 80028da:	fab3 f383 	clz	r3, r3
 80028de:	e7d7      	b.n	8002890 <HAL_ADC_ConfigChannel+0x184>
 80028e0:	fa93 f2a3 	rbit	r2, r3
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80028e4:	fab2 f282 	clz	r2, r2
 80028e8:	3201      	adds	r2, #1
 80028ea:	f002 021f 	and.w	r2, r2, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028ee:	2a09      	cmp	r2, #9
 80028f0:	d830      	bhi.n	8002954 <HAL_ADC_ConfigChannel+0x248>
 80028f2:	fa93 f6a3 	rbit	r6, r3
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80028f6:	fab6 f686 	clz	r6, r6
 80028fa:	3601      	adds	r6, #1
 80028fc:	06b6      	lsls	r6, r6, #26
 80028fe:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8002902:	fa93 f1a3 	rbit	r1, r3
 8002906:	fab1 f181 	clz	r1, r1
 800290a:	3101      	adds	r1, #1
 800290c:	f001 021f 	and.w	r2, r1, #31
 8002910:	2101      	movs	r1, #1
 8002912:	e001      	b.n	8002918 <HAL_ADC_ConfigChannel+0x20c>
 8002914:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8002918:	4091      	lsls	r1, r2
 800291a:	ea41 0206 	orr.w	r2, r1, r6
 800291e:	b9a7      	cbnz	r7, 800294a <HAL_ADC_ConfigChannel+0x23e>
 8002920:	0e99      	lsrs	r1, r3, #26
 8002922:	3101      	adds	r1, #1
 8002924:	f001 011f 	and.w	r1, r1, #31
 8002928:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800292c:	0509      	lsls	r1, r1, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800292e:	4311      	orrs	r1, r2
 8002930:	68a2      	ldr	r2, [r4, #8]
 8002932:	f7ff fdf1 	bl	8002518 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002936:	6822      	ldr	r2, [r4, #0]
 8002938:	4b53      	ldr	r3, [pc, #332]	; (8002a88 <HAL_ADC_ConfigChannel+0x37c>)
 800293a:	421a      	tst	r2, r3
 800293c:	d120      	bne.n	8002980 <HAL_ADC_ConfigChannel+0x274>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800293e:	2000      	movs	r0, #0

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002940:	2300      	movs	r3, #0
 8002942:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8002946:	b003      	add	sp, #12
 8002948:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800294a:	fa93 f1a3 	rbit	r1, r3
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800294e:	fab1 f181 	clz	r1, r1
 8002952:	e7e6      	b.n	8002922 <HAL_ADC_ConfigChannel+0x216>
 8002954:	fa93 f2a3 	rbit	r2, r3
 8002958:	fab2 f282 	clz	r2, r2
 800295c:	3201      	adds	r2, #1
 800295e:	0692      	lsls	r2, r2, #26
 8002960:	f002 46f8 	and.w	r6, r2, #2080374784	; 0x7c000000
 8002964:	fa93 f1a3 	rbit	r1, r3
 8002968:	fab1 f181 	clz	r1, r1
 800296c:	3101      	adds	r1, #1
 800296e:	f001 021f 	and.w	r2, r1, #31
 8002972:	2101      	movs	r1, #1
 8002974:	e732      	b.n	80027dc <HAL_ADC_ConfigChannel+0xd0>
 8002976:	fa93 f3a3 	rbit	r3, r3
 800297a:	fab3 f383 	clz	r3, r3
 800297e:	e734      	b.n	80027ea <HAL_ADC_ConfigChannel+0xde>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002980:	4942      	ldr	r1, [pc, #264]	; (8002a8c <HAL_ADC_ConfigChannel+0x380>)
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002982:	4b43      	ldr	r3, [pc, #268]	; (8002a90 <HAL_ADC_ConfigChannel+0x384>)
 8002984:	6888      	ldr	r0, [r1, #8]
 8002986:	429a      	cmp	r2, r3
 8002988:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 800298c:	460c      	mov	r4, r1
 800298e:	d11e      	bne.n	80029ce <HAL_ADC_ConfigChannel+0x2c2>
 8002990:	0202      	lsls	r2, r0, #8
 8002992:	d4d4      	bmi.n	800293e <HAL_ADC_ConfigChannel+0x232>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002994:	682b      	ldr	r3, [r5, #0]
 8002996:	4a3f      	ldr	r2, [pc, #252]	; (8002a94 <HAL_ADC_ConfigChannel+0x388>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d003      	beq.n	80029a4 <HAL_ADC_ConfigChannel+0x298>
 800299c:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d1cc      	bne.n	800293e <HAL_ADC_ConfigChannel+0x232>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80029a4:	68a3      	ldr	r3, [r4, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80029a6:	4a3c      	ldr	r2, [pc, #240]	; (8002a98 <HAL_ADC_ConfigChannel+0x38c>)
 80029a8:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 80029ac:	4333      	orrs	r3, r6
 80029ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029b2:	60a3      	str	r3, [r4, #8]
 80029b4:	4b39      	ldr	r3, [pc, #228]	; (8002a9c <HAL_ADC_ConfigChannel+0x390>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	fbb3 f2f2 	udiv	r2, r3, r2
 80029bc:	230c      	movs	r3, #12
 80029be:	4353      	muls	r3, r2
            wait_loop_index--;
 80029c0:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 80029c2:	9b01      	ldr	r3, [sp, #4]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d0ba      	beq.n	800293e <HAL_ADC_ConfigChannel+0x232>
            wait_loop_index--;
 80029c8:	9b01      	ldr	r3, [sp, #4]
 80029ca:	3b01      	subs	r3, #1
 80029cc:	e7f8      	b.n	80029c0 <HAL_ADC_ConfigChannel+0x2b4>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80029ce:	4b34      	ldr	r3, [pc, #208]	; (8002aa0 <HAL_ADC_ConfigChannel+0x394>)
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d111      	bne.n	80029f8 <HAL_ADC_ConfigChannel+0x2ec>
 80029d4:	01c3      	lsls	r3, r0, #7
 80029d6:	d4b2      	bmi.n	800293e <HAL_ADC_ConfigChannel+0x232>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029d8:	682b      	ldr	r3, [r5, #0]
 80029da:	4a2e      	ldr	r2, [pc, #184]	; (8002a94 <HAL_ADC_ConfigChannel+0x388>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d003      	beq.n	80029e8 <HAL_ADC_ConfigChannel+0x2dc>
 80029e0:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d1aa      	bne.n	800293e <HAL_ADC_ConfigChannel+0x232>
 80029e8:	68a3      	ldr	r3, [r4, #8]
 80029ea:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 80029ee:	4333      	orrs	r3, r6
 80029f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029f4:	60a3      	str	r3, [r4, #8]
 80029f6:	e7a2      	b.n	800293e <HAL_ADC_ConfigChannel+0x232>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80029f8:	4b2a      	ldr	r3, [pc, #168]	; (8002aa4 <HAL_ADC_ConfigChannel+0x398>)
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d19f      	bne.n	800293e <HAL_ADC_ConfigChannel+0x232>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80029fe:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8002a02:	d19c      	bne.n	800293e <HAL_ADC_ConfigChannel+0x232>
        if (ADC_VREFINT_INSTANCE(hadc))
 8002a04:	682a      	ldr	r2, [r5, #0]
 8002a06:	4b23      	ldr	r3, [pc, #140]	; (8002a94 <HAL_ADC_ConfigChannel+0x388>)
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d198      	bne.n	800293e <HAL_ADC_ConfigChannel+0x232>
 8002a0c:	688b      	ldr	r3, [r1, #8]
 8002a0e:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8002a12:	4333      	orrs	r3, r6
 8002a14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a18:	608b      	str	r3, [r1, #8]
 8002a1a:	e791      	b.n	8002940 <HAL_ADC_ConfigChannel+0x234>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a1c:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 8002a1e:	f042 0220 	orr.w	r2, r2, #32
 8002a22:	656a      	str	r2, [r5, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8002a24:	4618      	mov	r0, r3
 8002a26:	e78b      	b.n	8002940 <HAL_ADC_ConfigChannel+0x234>
  __HAL_LOCK(hadc);
 8002a28:	2002      	movs	r0, #2
 8002a2a:	e78c      	b.n	8002946 <HAL_ADC_ConfigChannel+0x23a>
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a2c:	2800      	cmp	r0, #0
 8002a2e:	f47f aea9 	bne.w	8002784 <HAL_ADC_ConfigChannel+0x78>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002a32:	4618      	mov	r0, r3
 8002a34:	68a2      	ldr	r2, [r4, #8]
 8002a36:	6821      	ldr	r1, [r4, #0]
 8002a38:	f7ff fd6e 	bl	8002518 <LL_ADC_SetChannelSamplingTime>
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a3c:	6926      	ldr	r6, [r4, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002a3e:	682b      	ldr	r3, [r5, #0]
 8002a40:	6822      	ldr	r2, [r4, #0]
 8002a42:	68d9      	ldr	r1, [r3, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a44:	2e04      	cmp	r6, #4
 8002a46:	f103 0060 	add.w	r0, r3, #96	; 0x60
 8002a4a:	f43f aee1 	beq.w	8002810 <HAL_ADC_ConfigChannel+0x104>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002a4e:	f3c1 03c1 	ubfx	r3, r1, #3, #2
 8002a52:	0059      	lsls	r1, r3, #1
 8002a54:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(*preg,
 8002a56:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 8002a5a:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8002a5e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a62:	408b      	lsls	r3, r1
 8002a64:	4313      	orrs	r3, r2
 8002a66:	4a10      	ldr	r2, [pc, #64]	; (8002aa8 <HAL_ADC_ConfigChannel+0x39c>)
 8002a68:	403a      	ands	r2, r7
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
 8002a70:	e688      	b.n	8002784 <HAL_ADC_ConfigChannel+0x78>
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a72:	f103 0668 	add.w	r6, r3, #104	; 0x68
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002a76:	6e9f      	ldr	r7, [r3, #104]	; 0x68
 8002a78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a7a:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8002a7e:	e6f4      	b.n	800286a <HAL_ADC_ConfigChannel+0x15e>
 8002a80:	0007ffff 	.word	0x0007ffff
 8002a84:	407f0000 	.word	0x407f0000
 8002a88:	80080000 	.word	0x80080000
 8002a8c:	50040300 	.word	0x50040300
 8002a90:	c7520000 	.word	0xc7520000
 8002a94:	50040000 	.word	0x50040000
 8002a98:	00030d40 	.word	0x00030d40
 8002a9c:	20000000 	.word	0x20000000
 8002aa0:	cb840000 	.word	0xcb840000
 8002aa4:	80000001 	.word	0x80000001
 8002aa8:	03fff000 	.word	0x03fff000
 8002aac:	68c3      	ldr	r3, [r0, #12]
 8002aae:	68c2      	ldr	r2, [r0, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ab0:	6823      	ldr	r3, [r4, #0]
 8002ab2:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8002ab6:	e6e9      	b.n	800288c <HAL_ADC_ConfigChannel+0x180>

08002ab8 <LL_ADC_IsEnabled>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ab8:	6880      	ldr	r0, [r0, #8]
}
 8002aba:	f000 0001 	and.w	r0, r0, #1
 8002abe:	4770      	bx	lr

08002ac0 <LL_ADC_REG_IsConversionOngoing>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ac0:	6880      	ldr	r0, [r0, #8]
}
 8002ac2:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8002ac6:	4770      	bx	lr

08002ac8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002ac8:	b530      	push	{r4, r5, lr}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002aca:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8002ace:	2b01      	cmp	r3, #1
{
 8002ad0:	b09b      	sub	sp, #108	; 0x6c
 8002ad2:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 8002ad4:	d066      	beq.n	8002ba4 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002adc:	4b32      	ldr	r3, [pc, #200]	; (8002ba8 <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
 8002ade:	6800      	ldr	r0, [r0, #0]
 8002ae0:	4298      	cmp	r0, r3
 8002ae2:	bf0c      	ite	eq
 8002ae4:	f503 7380 	addeq.w	r3, r3, #256	; 0x100
 8002ae8:	2300      	movne	r3, #0
 8002aea:	9301      	str	r3, [sp, #4]

  if (tmphadcSlave.Instance == NULL)
 8002aec:	9801      	ldr	r0, [sp, #4]
 8002aee:	b940      	cbnz	r0, 8002b02 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002af0:	6d53      	ldr	r3, [r2, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002af2:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002af6:	f043 0320 	orr.w	r3, r3, #32
 8002afa:	6553      	str	r3, [r2, #84]	; 0x54

    return HAL_ERROR;
 8002afc:	2001      	movs	r0, #1
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8002afe:	b01b      	add	sp, #108	; 0x6c
 8002b00:	bd30      	pop	{r4, r5, pc}
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002b02:	f7ff ffdd 	bl	8002ac0 <LL_ADC_REG_IsConversionOngoing>
 8002b06:	4603      	mov	r3, r0
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b08:	6810      	ldr	r0, [r2, #0]
 8002b0a:	f7ff ffd9 	bl	8002ac0 <LL_ADC_REG_IsConversionOngoing>
 8002b0e:	2800      	cmp	r0, #0
 8002b10:	d142      	bne.n	8002b98 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d140      	bne.n	8002b98 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b16:	680b      	ldr	r3, [r1, #0]
 8002b18:	4c24      	ldr	r4, [pc, #144]	; (8002bac <HAL_ADCEx_MultiModeConfigChannel+0xe4>)
 8002b1a:	b333      	cbz	r3, 8002b6a <HAL_ADCEx_MultiModeConfigChannel+0xa2>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002b1c:	68a3      	ldr	r3, [r4, #8]
 8002b1e:	6848      	ldr	r0, [r1, #4]
 8002b20:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002b24:	4303      	orrs	r3, r0
 8002b26:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
 8002b2a:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
 8002b2e:	60a3      	str	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b30:	481d      	ldr	r0, [pc, #116]	; (8002ba8 <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
 8002b32:	f7ff ffc1 	bl	8002ab8 <LL_ADC_IsEnabled>
 8002b36:	4603      	mov	r3, r0
 8002b38:	481d      	ldr	r0, [pc, #116]	; (8002bb0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>)
 8002b3a:	f7ff ffbd 	bl	8002ab8 <LL_ADC_IsEnabled>
 8002b3e:	4303      	orrs	r3, r0
 8002b40:	481c      	ldr	r0, [pc, #112]	; (8002bb4 <HAL_ADCEx_MultiModeConfigChannel+0xec>)
 8002b42:	f7ff ffb9 	bl	8002ab8 <LL_ADC_IsEnabled>
 8002b46:	4318      	orrs	r0, r3
 8002b48:	d004      	beq.n	8002b54 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b4a:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
  return tmp_hal_status;
 8002b52:	e7d4      	b.n	8002afe <HAL_ADCEx_MultiModeConfigChannel+0x36>
        MODIFY_REG(tmpADC_Common->CCR,
 8002b54:	680b      	ldr	r3, [r1, #0]
 8002b56:	68a5      	ldr	r5, [r4, #8]
 8002b58:	6889      	ldr	r1, [r1, #8]
 8002b5a:	430b      	orrs	r3, r1
 8002b5c:	f425 6171 	bic.w	r1, r5, #3856	; 0xf10
 8002b60:	f021 010f 	bic.w	r1, r1, #15
 8002b64:	430b      	orrs	r3, r1
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002b66:	60a3      	str	r3, [r4, #8]
 8002b68:	e7f0      	b.n	8002b4c <HAL_ADCEx_MultiModeConfigChannel+0x84>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002b6a:	68a3      	ldr	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b6c:	480e      	ldr	r0, [pc, #56]	; (8002ba8 <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002b6e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002b72:	60a3      	str	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b74:	f7ff ffa0 	bl	8002ab8 <LL_ADC_IsEnabled>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	480d      	ldr	r0, [pc, #52]	; (8002bb0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>)
 8002b7c:	f7ff ff9c 	bl	8002ab8 <LL_ADC_IsEnabled>
 8002b80:	4303      	orrs	r3, r0
 8002b82:	480c      	ldr	r0, [pc, #48]	; (8002bb4 <HAL_ADCEx_MultiModeConfigChannel+0xec>)
 8002b84:	f7ff ff98 	bl	8002ab8 <LL_ADC_IsEnabled>
 8002b88:	4318      	orrs	r0, r3
 8002b8a:	d1de      	bne.n	8002b4a <HAL_ADCEx_MultiModeConfigChannel+0x82>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002b8c:	68a3      	ldr	r3, [r4, #8]
 8002b8e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002b92:	f023 030f 	bic.w	r3, r3, #15
 8002b96:	e7e6      	b.n	8002b66 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b98:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002b9a:	f043 0320 	orr.w	r3, r3, #32
 8002b9e:	6553      	str	r3, [r2, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8002ba0:	2001      	movs	r0, #1
 8002ba2:	e7d3      	b.n	8002b4c <HAL_ADCEx_MultiModeConfigChannel+0x84>
  __HAL_LOCK(hadc);
 8002ba4:	2002      	movs	r0, #2
 8002ba6:	e7aa      	b.n	8002afe <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002ba8:	50040000 	.word	0x50040000
 8002bac:	50040300 	.word	0x50040300
 8002bb0:	50040100 	.word	0x50040100
 8002bb4:	50040200 	.word	0x50040200

08002bb8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bb8:	4a07      	ldr	r2, [pc, #28]	; (8002bd8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002bba:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bbc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002bc0:	041b      	lsls	r3, r3, #16
 8002bc2:	0c1b      	lsrs	r3, r3, #16
 8002bc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bc8:	0200      	lsls	r0, r0, #8
 8002bca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bce:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8002bd2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8002bd4:	60d3      	str	r3, [r2, #12]
 8002bd6:	4770      	bx	lr
 8002bd8:	e000ed00 	.word	0xe000ed00

08002bdc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bdc:	4b17      	ldr	r3, [pc, #92]	; (8002c3c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bde:	b530      	push	{r4, r5, lr}
 8002be0:	68dc      	ldr	r4, [r3, #12]
 8002be2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002be6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bea:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bec:	2b04      	cmp	r3, #4
 8002bee:	bf28      	it	cs
 8002bf0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bf2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bf4:	f04f 0501 	mov.w	r5, #1
 8002bf8:	fa05 f303 	lsl.w	r3, r5, r3
 8002bfc:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c00:	bf8c      	ite	hi
 8002c02:	3c03      	subhi	r4, #3
 8002c04:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c06:	4019      	ands	r1, r3
 8002c08:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c0a:	fa05 f404 	lsl.w	r4, r5, r4
 8002c0e:	3c01      	subs	r4, #1
 8002c10:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8002c12:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c14:	ea42 0201 	orr.w	r2, r2, r1
 8002c18:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c1c:	bfad      	iteet	ge
 8002c1e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c22:	f000 000f 	andlt.w	r0, r0, #15
 8002c26:	4b06      	ldrlt	r3, [pc, #24]	; (8002c40 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c28:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c2c:	bfb5      	itete	lt
 8002c2e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c30:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c32:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c34:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8002c38:	bd30      	pop	{r4, r5, pc}
 8002c3a:	bf00      	nop
 8002c3c:	e000ed00 	.word	0xe000ed00
 8002c40:	e000ed14 	.word	0xe000ed14

08002c44 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002c44:	2800      	cmp	r0, #0
 8002c46:	db08      	blt.n	8002c5a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c48:	0942      	lsrs	r2, r0, #5
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	f000 001f 	and.w	r0, r0, #31
 8002c50:	fa03 f000 	lsl.w	r0, r3, r0
 8002c54:	4b01      	ldr	r3, [pc, #4]	; (8002c5c <HAL_NVIC_EnableIRQ+0x18>)
 8002c56:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8002c5a:	4770      	bx	lr
 8002c5c:	e000e100 	.word	0xe000e100

08002c60 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002c60:	b510      	push	{r4, lr}
  /* Check DAC handle */
  if (hdac == NULL)
 8002c62:	4604      	mov	r4, r0
 8002c64:	b168      	cbz	r0, 8002c82 <HAL_DAC_Init+0x22>
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002c66:	7903      	ldrb	r3, [r0, #4]
 8002c68:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c6c:	b913      	cbnz	r3, 8002c74 <HAL_DAC_Init+0x14>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002c6e:	7142      	strb	r2, [r0, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002c70:	f7ff f8ac 	bl	8001dcc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c74:	2302      	movs	r3, #2
 8002c76:	7123      	strb	r3, [r4, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002c78:	2000      	movs	r0, #0

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002c7a:	2301      	movs	r3, #1
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002c7c:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8002c7e:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8002c80:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 8002c82:	2001      	movs	r0, #1
}
 8002c84:	bd10      	pop	{r4, pc}

08002c86 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002c86:	4770      	bx	lr

08002c88 <HAL_DAC_IRQHandler>:
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002c88:	6803      	ldr	r3, [r0, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	0491      	lsls	r1, r2, #18
{
 8002c8e:	b510      	push	{r4, lr}
 8002c90:	4604      	mov	r4, r0
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002c92:	d511      	bpl.n	8002cb8 <HAL_DAC_IRQHandler+0x30>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002c94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c96:	0492      	lsls	r2, r2, #18
 8002c98:	d50e      	bpl.n	8002cb8 <HAL_DAC_IRQHandler+0x30>
      hdac->State = HAL_DAC_STATE_ERROR;
 8002c9a:	2204      	movs	r2, #4
 8002c9c:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002c9e:	6902      	ldr	r2, [r0, #16]
 8002ca0:	f042 0201 	orr.w	r2, r2, #1
 8002ca4:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002ca6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002caa:	635a      	str	r2, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002cb2:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002cb4:	f7ff ffe7 	bl	8002c86 <HAL_DAC_DMAUnderrunCallbackCh1>
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002cb8:	6823      	ldr	r3, [r4, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	0091      	lsls	r1, r2, #2
 8002cbe:	d514      	bpl.n	8002cea <HAL_DAC_IRQHandler+0x62>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002cc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cc2:	0092      	lsls	r2, r2, #2
 8002cc4:	d511      	bpl.n	8002cea <HAL_DAC_IRQHandler+0x62>
      hdac->State = HAL_DAC_STATE_ERROR;
 8002cc6:	2204      	movs	r2, #4
 8002cc8:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002cca:	6922      	ldr	r2, [r4, #16]
 8002ccc:	f042 0202 	orr.w	r2, r2, #2
 8002cd0:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002cd2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002cd6:	635a      	str	r2, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002cde:	4620      	mov	r0, r4
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002ce0:	601a      	str	r2, [r3, #0]
}
 8002ce2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002ce6:	f000 b88a 	b.w	8002dfe <HAL_DACEx_DMAUnderrunCallbackCh2>
 8002cea:	bd10      	pop	{r4, pc}

08002cec <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002cee:	7943      	ldrb	r3, [r0, #5]
 8002cf0:	2b01      	cmp	r3, #1
{
 8002cf2:	4604      	mov	r4, r0
 8002cf4:	460d      	mov	r5, r1
 8002cf6:	4616      	mov	r6, r2
 8002cf8:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hdac);
 8002cfc:	d063      	beq.n	8002dc6 <HAL_DAC_ConfigChannel+0xda>
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8002cfe:	680b      	ldr	r3, [r1, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d00:	7120      	strb	r0, [r4, #4]
  __HAL_LOCK(hdac);
 8002d02:	2201      	movs	r2, #1

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002d04:	2b04      	cmp	r3, #4
  __HAL_LOCK(hdac);
 8002d06:	7162      	strb	r2, [r4, #5]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002d08:	d125      	bne.n	8002d56 <HAL_DAC_ConfigChannel+0x6a>
  /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8002d0a:	2e00      	cmp	r6, #0
 8002d0c:	d16c      	bne.n	8002de8 <HAL_DAC_ConfigChannel+0xfc>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8002d0e:	f7ff fbe9 	bl	80024e4 <HAL_GetTick>
 8002d12:	4607      	mov	r7, r0

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002d14:	6823      	ldr	r3, [r4, #0]
 8002d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d18:	041b      	lsls	r3, r3, #16
 8002d1a:	d455      	bmi.n	8002dc8 <HAL_DAC_ConfigChannel+0xdc>
          hdac->State = HAL_DAC_STATE_TIMEOUT;

          return HAL_TIMEOUT;
        }
      }
      HAL_Delay(1);
 8002d1c:	2001      	movs	r0, #1
 8002d1e:	f7ff fbe7 	bl	80024f0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002d22:	6823      	ldr	r3, [r4, #0]
 8002d24:	69aa      	ldr	r2, [r5, #24]
 8002d26:	641a      	str	r2, [r3, #64]	; 0x40
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002d28:	6821      	ldr	r1, [r4, #0]
 8002d2a:	f006 0010 	and.w	r0, r6, #16
 8002d2e:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8002d30:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8002d34:	4083      	lsls	r3, r0
 8002d36:	ea22 0203 	bic.w	r2, r2, r3
 8002d3a:	69eb      	ldr	r3, [r5, #28]
 8002d3c:	4083      	lsls	r3, r0
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	648a      	str	r2, [r1, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002d42:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8002d44:	22ff      	movs	r2, #255	; 0xff
 8002d46:	4082      	lsls	r2, r0
 8002d48:	ea23 0302 	bic.w	r3, r3, r2
 8002d4c:	6a2a      	ldr	r2, [r5, #32]
 8002d4e:	fa02 f000 	lsl.w	r0, r2, r0
 8002d52:	4303      	orrs	r3, r0
 8002d54:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002d56:	692b      	ldr	r3, [r5, #16]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	f006 0210 	and.w	r2, r6, #16
 8002d5e:	6823      	ldr	r3, [r4, #0]
 8002d60:	d108      	bne.n	8002d74 <HAL_DAC_ConfigChannel+0x88>
  /* USER TRIMMING */
  {
  /* Get the DAC CCR value */
  tmpreg1 = hdac->Instance->CCR;
 8002d62:	6b99      	ldr	r1, [r3, #56]	; 0x38
  /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002d64:	201f      	movs	r0, #31
 8002d66:	4090      	lsls	r0, r2
 8002d68:	ea21 0000 	bic.w	r0, r1, r0
  /* Configure for the selected trimming offset */
  tmpreg2 = sConfig->DAC_TrimmingValue;
  /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002d6c:	6969      	ldr	r1, [r5, #20]
 8002d6e:	4091      	lsls	r1, r2
 8002d70:	4301      	orrs	r1, r0
  /* Write to DAC CCR */
  hdac->Instance->CCR = tmpreg1;
 8002d72:	6399      	str	r1, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002d74:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002d76:	68ae      	ldr	r6, [r5, #8]
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002d78:	2007      	movs	r0, #7
 8002d7a:	4090      	lsls	r0, r2
 8002d7c:	ea21 0000 	bic.w	r0, r1, r0
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002d80:	6829      	ldr	r1, [r5, #0]
 8002d82:	4331      	orrs	r1, r6
 8002d84:	68ee      	ldr	r6, [r5, #12]
 8002d86:	4331      	orrs	r1, r6
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002d88:	4091      	lsls	r1, r2
 8002d8a:	4301      	orrs	r1, r0
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002d8c:	63d9      	str	r1, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002d8e:	6819      	ldr	r1, [r3, #0]
 8002d90:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002d94:	4090      	lsls	r0, r2
 8002d96:	ea21 0100 	bic.w	r1, r1, r0
 8002d9a:	6019      	str	r1, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002d9c:	6819      	ldr	r1, [r3, #0]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002d9e:	f640 70fc 	movw	r0, #4092	; 0xffc
 8002da2:	4090      	lsls	r0, r2
 8002da4:	ea21 0000 	bic.w	r0, r1, r0
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002da8:	6869      	ldr	r1, [r5, #4]
 8002daa:	4091      	lsls	r1, r2
 8002dac:	4301      	orrs	r1, r0
  }

#endif /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002dae:	6019      	str	r1, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002db0:	6819      	ldr	r1, [r3, #0]
 8002db2:	20c0      	movs	r0, #192	; 0xc0
 8002db4:	fa00 f202 	lsl.w	r2, r0, r2
 8002db8:	ea21 0202 	bic.w	r2, r1, r2
 8002dbc:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002dbe:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_READY;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	7123      	strb	r3, [r4, #4]
  __HAL_UNLOCK(hdac);
 8002dc4:	7160      	strb	r0, [r4, #5]

  /* Return function status */
  return HAL_OK;
}
 8002dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002dc8:	f7ff fb8c 	bl	80024e4 <HAL_GetTick>
 8002dcc:	1bc0      	subs	r0, r0, r7
 8002dce:	2801      	cmp	r0, #1
 8002dd0:	d9a0      	bls.n	8002d14 <HAL_DAC_ConfigChannel+0x28>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002dd2:	6923      	ldr	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002dd4:	2003      	movs	r0, #3
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002dd6:	f043 0308 	orr.w	r3, r3, #8
 8002dda:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002ddc:	7120      	strb	r0, [r4, #4]
          return HAL_TIMEOUT;
 8002dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002de0:	f7ff fb80 	bl	80024e4 <HAL_GetTick>
 8002de4:	2801      	cmp	r0, #1
 8002de6:	d8f4      	bhi.n	8002dd2 <HAL_DAC_ConfigChannel+0xe6>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002de8:	6823      	ldr	r3, [r4, #0]
 8002dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	dbf7      	blt.n	8002de0 <HAL_DAC_ConfigChannel+0xf4>
      HAL_Delay(1U);
 8002df0:	2001      	movs	r0, #1
 8002df2:	f7ff fb7d 	bl	80024f0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002df6:	6823      	ldr	r3, [r4, #0]
 8002df8:	69aa      	ldr	r2, [r5, #24]
 8002dfa:	645a      	str	r2, [r3, #68]	; 0x44
 8002dfc:	e794      	b.n	8002d28 <HAL_DAC_ConfigChannel+0x3c>

08002dfe <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002dfe:	4770      	bx	lr

08002e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e04:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e06:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e08:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002fb4 <HAL_GPIO_Init+0x1b4>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002e0c:	4c67      	ldr	r4, [pc, #412]	; (8002fac <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e0e:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00u;
 8002e10:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e12:	9a01      	ldr	r2, [sp, #4]
 8002e14:	40da      	lsrs	r2, r3
 8002e16:	d102      	bne.n	8002e1e <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 8002e18:	b005      	add	sp, #20
 8002e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e1e:	2601      	movs	r6, #1
    if (iocurrent != 0x00u)
 8002e20:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e22:	409e      	lsls	r6, r3
    if (iocurrent != 0x00u)
 8002e24:	ea12 0e06 	ands.w	lr, r2, r6
 8002e28:	f000 80b1 	beq.w	8002f8e <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e2c:	684a      	ldr	r2, [r1, #4]
 8002e2e:	f022 0710 	bic.w	r7, r2, #16
 8002e32:	2f02      	cmp	r7, #2
 8002e34:	d116      	bne.n	8002e64 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 8002e36:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8002e3a:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e3e:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8002e42:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e46:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8002e4a:	f04f 0c0f 	mov.w	ip, #15
 8002e4e:	fa0c fc0a 	lsl.w	ip, ip, sl
 8002e52:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e56:	690d      	ldr	r5, [r1, #16]
 8002e58:	fa05 f50a 	lsl.w	r5, r5, sl
 8002e5c:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 8002e60:	f8c9 5020 	str.w	r5, [r9, #32]
 8002e64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e68:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8002e6a:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e6e:	fa05 f50c 	lsl.w	r5, r5, ip
 8002e72:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e74:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e78:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e7c:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e80:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e82:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e86:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8002e88:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e8c:	d811      	bhi.n	8002eb2 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8002e8e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e90:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e94:	68cf      	ldr	r7, [r1, #12]
 8002e96:	fa07 f70c 	lsl.w	r7, r7, ip
 8002e9a:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8002e9e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002ea0:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ea2:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002ea6:	f3c2 1700 	ubfx	r7, r2, #4, #1
 8002eaa:	409f      	lsls	r7, r3
 8002eac:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 8002eb0:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002eb2:	f1ba 0f03 	cmp.w	sl, #3
 8002eb6:	d107      	bne.n	8002ec8 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 8002eb8:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002eba:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002ebe:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 8002ec2:	409f      	lsls	r7, r3
 8002ec4:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 8002ec6:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8002ec8:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002eca:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002ecc:	688e      	ldr	r6, [r1, #8]
 8002ece:	fa06 f60c 	lsl.w	r6, r6, ip
 8002ed2:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 8002ed4:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ed6:	00d5      	lsls	r5, r2, #3
 8002ed8:	d559      	bpl.n	8002f8e <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eda:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8002ede:	f045 0501 	orr.w	r5, r5, #1
 8002ee2:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 8002ee6:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8002eea:	f023 0603 	bic.w	r6, r3, #3
 8002eee:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8002ef2:	f005 0501 	and.w	r5, r5, #1
 8002ef6:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8002efa:	9503      	str	r5, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002efc:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f00:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8002f02:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f04:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8002f08:	270f      	movs	r7, #15
 8002f0a:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f0e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f12:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f16:	d03c      	beq.n	8002f92 <HAL_GPIO_Init+0x192>
 8002f18:	4d25      	ldr	r5, [pc, #148]	; (8002fb0 <HAL_GPIO_Init+0x1b0>)
 8002f1a:	42a8      	cmp	r0, r5
 8002f1c:	d03b      	beq.n	8002f96 <HAL_GPIO_Init+0x196>
 8002f1e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002f22:	42a8      	cmp	r0, r5
 8002f24:	d039      	beq.n	8002f9a <HAL_GPIO_Init+0x19a>
 8002f26:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002f2a:	42a8      	cmp	r0, r5
 8002f2c:	d037      	beq.n	8002f9e <HAL_GPIO_Init+0x19e>
 8002f2e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002f32:	42a8      	cmp	r0, r5
 8002f34:	d035      	beq.n	8002fa2 <HAL_GPIO_Init+0x1a2>
 8002f36:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002f3a:	42a8      	cmp	r0, r5
 8002f3c:	d033      	beq.n	8002fa6 <HAL_GPIO_Init+0x1a6>
 8002f3e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002f42:	42a8      	cmp	r0, r5
 8002f44:	bf14      	ite	ne
 8002f46:	2507      	movne	r5, #7
 8002f48:	2506      	moveq	r5, #6
 8002f4a:	fa05 f50c 	lsl.w	r5, r5, ip
 8002f4e:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f50:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 8002f52:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8002f54:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f58:	03d7      	lsls	r7, r2, #15
        temp &= ~(iocurrent);
 8002f5a:	bf54      	ite	pl
 8002f5c:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8002f5e:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 8002f62:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 8002f64:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f66:	0397      	lsls	r7, r2, #14
        temp &= ~(iocurrent);
 8002f68:	bf54      	ite	pl
 8002f6a:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8002f6c:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 8002f70:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 8002f72:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f74:	02d7      	lsls	r7, r2, #11
        temp &= ~(iocurrent);
 8002f76:	bf54      	ite	pl
 8002f78:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8002f7a:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 8002f7e:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8002f80:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f82:	0292      	lsls	r2, r2, #10
        temp &= ~(iocurrent);
 8002f84:	bf54      	ite	pl
 8002f86:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8002f88:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 8002f8c:	60e5      	str	r5, [r4, #12]
    position++;
 8002f8e:	3301      	adds	r3, #1
 8002f90:	e73f      	b.n	8002e12 <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f92:	2500      	movs	r5, #0
 8002f94:	e7d9      	b.n	8002f4a <HAL_GPIO_Init+0x14a>
 8002f96:	2501      	movs	r5, #1
 8002f98:	e7d7      	b.n	8002f4a <HAL_GPIO_Init+0x14a>
 8002f9a:	2502      	movs	r5, #2
 8002f9c:	e7d5      	b.n	8002f4a <HAL_GPIO_Init+0x14a>
 8002f9e:	2503      	movs	r5, #3
 8002fa0:	e7d3      	b.n	8002f4a <HAL_GPIO_Init+0x14a>
 8002fa2:	2504      	movs	r5, #4
 8002fa4:	e7d1      	b.n	8002f4a <HAL_GPIO_Init+0x14a>
 8002fa6:	2505      	movs	r5, #5
 8002fa8:	e7cf      	b.n	8002f4a <HAL_GPIO_Init+0x14a>
 8002faa:	bf00      	nop
 8002fac:	40010400 	.word	0x40010400
 8002fb0:	48000400 	.word	0x48000400
 8002fb4:	40021000 	.word	0x40021000

08002fb8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002fb8:	6903      	ldr	r3, [r0, #16]
 8002fba:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002fbc:	bf14      	ite	ne
 8002fbe:	2001      	movne	r0, #1
 8002fc0:	2000      	moveq	r0, #0
 8002fc2:	4770      	bx	lr

08002fc4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fc4:	b10a      	cbz	r2, 8002fca <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002fc6:	6181      	str	r1, [r0, #24]
 8002fc8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002fca:	6281      	str	r1, [r0, #40]	; 0x28
 8002fcc:	4770      	bx	lr

08002fce <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002fce:	6943      	ldr	r3, [r0, #20]
 8002fd0:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002fd2:	bf14      	ite	ne
 8002fd4:	6281      	strne	r1, [r0, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002fd6:	6181      	streq	r1, [r0, #24]
 8002fd8:	4770      	bx	lr

08002fda <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fda:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fdc:	4604      	mov	r4, r0
 8002fde:	2800      	cmp	r0, #0
 8002fe0:	d04a      	beq.n	8003078 <HAL_I2C_Init+0x9e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fe2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002fe6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002fea:	b91b      	cbnz	r3, 8002ff4 <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fec:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002ff0:	f7fe ff22 	bl	8001e38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ff4:	2324      	movs	r3, #36	; 0x24
 8002ff6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ffa:	6823      	ldr	r3, [r4, #0]
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ffc:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	f022 0201 	bic.w	r2, r2, #1
 8003004:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003006:	6862      	ldr	r2, [r4, #4]
 8003008:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800300c:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800300e:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003010:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003012:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003016:	609a      	str	r2, [r3, #8]
 8003018:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800301a:	d124      	bne.n	8003066 <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800301c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003020:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003022:	685a      	ldr	r2, [r3, #4]
  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003024:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003026:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800302a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800302e:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003030:	68da      	ldr	r2, [r3, #12]
 8003032:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003036:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003038:	6922      	ldr	r2, [r4, #16]
 800303a:	430a      	orrs	r2, r1
 800303c:	69a1      	ldr	r1, [r4, #24]
 800303e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003042:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003044:	6a21      	ldr	r1, [r4, #32]
 8003046:	69e2      	ldr	r2, [r4, #28]
 8003048:	430a      	orrs	r2, r1
 800304a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	f042 0201 	orr.w	r2, r2, #1
 8003052:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003054:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8003056:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003058:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800305a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800305e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003060:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
 8003064:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003066:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800306a:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800306c:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800306e:	bf04      	itt	eq
 8003070:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8003074:	605a      	streq	r2, [r3, #4]
 8003076:	e7d4      	b.n	8003022 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8003078:	2001      	movs	r0, #1
}
 800307a:	bd10      	pop	{r4, pc}

0800307c <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800307c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8003080:	b2d2      	uxtb	r2, r2
 8003082:	2a20      	cmp	r2, #32
{
 8003084:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003086:	d11d      	bne.n	80030c4 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003088:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800308c:	2b01      	cmp	r3, #1
 800308e:	d019      	beq.n	80030c4 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003090:	2324      	movs	r3, #36	; 0x24
 8003092:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003096:	6803      	ldr	r3, [r0, #0]
 8003098:	681c      	ldr	r4, [r3, #0]
 800309a:	f024 0401 	bic.w	r4, r4, #1
 800309e:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80030a0:	681c      	ldr	r4, [r3, #0]
 80030a2:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 80030a6:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80030a8:	681c      	ldr	r4, [r3, #0]
 80030aa:	4321      	orrs	r1, r4
 80030ac:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030ae:	6819      	ldr	r1, [r3, #0]
 80030b0:	f041 0101 	orr.w	r1, r1, #1
 80030b4:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030b6:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80030b8:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80030bc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80030c0:	4618      	mov	r0, r3
 80030c2:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 80030c4:	2002      	movs	r0, #2
  }
}
 80030c6:	bd10      	pop	{r4, pc}

080030c8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80030c8:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030ca:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 80030ce:	b2e4      	uxtb	r4, r4
 80030d0:	2c20      	cmp	r4, #32
 80030d2:	d11c      	bne.n	800310e <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030d4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d018      	beq.n	800310e <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030dc:	2324      	movs	r3, #36	; 0x24
 80030de:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030e2:	6803      	ldr	r3, [r0, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	f022 0201 	bic.w	r2, r2, #1
 80030ea:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80030ec:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80030ee:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80030f2:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80030f6:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	f042 0201 	orr.w	r2, r2, #1
 80030fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003100:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003102:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003106:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800310a:	4618      	mov	r0, r3
 800310c:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 800310e:	2002      	movs	r0, #2
  }
}
 8003110:	bd10      	pop	{r4, pc}

08003112 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003112:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003114:	4604      	mov	r4, r0
{
 8003116:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 8003118:	b360      	cbz	r0, 8003174 <HAL_PCD_Init+0x62>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800311a:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
  USBx = hpcd->Instance;
 800311e:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003120:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003124:	b91b      	cbnz	r3, 800312e <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003126:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800312a:	f004 fcb7 	bl	8007a9c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800312e:	2303      	movs	r3, #3
 8003130:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003134:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003136:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003138:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_PCD_DISABLE(hpcd);
 800313c:	f855 0b10 	ldr.w	r0, [r5], #16
    hpcd->Init.dma_enable = 0U;
 8003140:	bf08      	it	eq
 8003142:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 8003144:	f003 f806 	bl	8006154 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003148:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800314a:	466e      	mov	r6, sp
 800314c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800314e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003150:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003152:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003156:	e886 0003 	stmia.w	r6, {r0, r1}
 800315a:	4625      	mov	r5, r4
 800315c:	1d27      	adds	r7, r4, #4
 800315e:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8003162:	f855 0b10 	ldr.w	r0, [r5], #16
 8003166:	f002 ff43 	bl	8005ff0 <USB_CoreInit>
 800316a:	4606      	mov	r6, r0
 800316c:	b120      	cbz	r0, 8003178 <HAL_PCD_Init+0x66>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800316e:	2302      	movs	r3, #2
 8003170:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8003174:	2501      	movs	r5, #1
 8003176:	e056      	b.n	8003226 <HAL_PCD_Init+0x114>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003178:	4601      	mov	r1, r0
 800317a:	6820      	ldr	r0, [r4, #0]
 800317c:	f002 fff0 	bl	8006160 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003180:	4630      	mov	r0, r6
 8003182:	f8d4 e004 	ldr.w	lr, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003186:	261c      	movs	r6, #28
 8003188:	f04f 0c01 	mov.w	ip, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800318c:	4601      	mov	r1, r0
 800318e:	b2c2      	uxtb	r2, r0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003190:	4596      	cmp	lr, r2
 8003192:	f100 0001 	add.w	r0, r0, #1
 8003196:	d81c      	bhi.n	80031d2 <HAL_PCD_Init+0xc0>
 8003198:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800319a:	261c      	movs	r6, #28
 800319c:	4619      	mov	r1, r3
 800319e:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031a0:	4586      	cmp	lr, r0
 80031a2:	f103 0301 	add.w	r3, r3, #1
 80031a6:	d822      	bhi.n	80031ee <HAL_PCD_Init+0xdc>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031aa:	466e      	mov	r6, sp
 80031ac:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80031ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031b0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80031b2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80031b6:	e886 0003 	stmia.w	r6, {r0, r1}
 80031ba:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80031be:	6820      	ldr	r0, [r4, #0]
 80031c0:	f003 f810 	bl	80061e4 <USB_DevInit>
 80031c4:	2301      	movs	r3, #1
 80031c6:	4605      	mov	r5, r0
 80031c8:	b300      	cbz	r0, 800320c <HAL_PCD_Init+0xfa>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031ca:	2202      	movs	r2, #2
 80031cc:	f884 23bd 	strb.w	r2, [r4, #957]	; 0x3bd
 80031d0:	e7d0      	b.n	8003174 <HAL_PCD_Init+0x62>
    hpcd->IN_ep[i].is_in = 1U;
 80031d2:	fb06 4302 	mla	r3, r6, r2, r4
 80031d6:	f883 c03d 	strb.w	ip, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 80031da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 80031de:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80031e2:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 80031e6:	6459      	str	r1, [r3, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 80031e8:	6499      	str	r1, [r3, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 80031ea:	6519      	str	r1, [r3, #80]	; 0x50
 80031ec:	e7cf      	b.n	800318e <HAL_PCD_Init+0x7c>
    hpcd->OUT_ep[i].is_in = 0U;
 80031ee:	fb06 4200 	mla	r2, r6, r0, r4
 80031f2:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 80031f6:	f882 01fc 	strb.w	r0, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80031fa:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 80031fe:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003202:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003206:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
 800320a:	e7c8      	b.n	800319e <HAL_PCD_Init+0x8c>
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 800320c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003210:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003214:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003216:	2b01      	cmp	r3, #1
 8003218:	d102      	bne.n	8003220 <HAL_PCD_Init+0x10e>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800321a:	4620      	mov	r0, r4
 800321c:	f000 fbe8 	bl	80039f0 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8003220:	6820      	ldr	r0, [r4, #0]
 8003222:	f003 fac1 	bl	80067a8 <USB_DevDisconnect>

  return HAL_OK;
}
 8003226:	4628      	mov	r0, r5
 8003228:	b00b      	add	sp, #44	; 0x2c
 800322a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800322c <HAL_PCD_Start>:
{
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800322c:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8003230:	2b01      	cmp	r3, #1
{
 8003232:	b510      	push	{r4, lr}
 8003234:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003236:	d013      	beq.n	8003260 <HAL_PCD_Start+0x34>
 8003238:	2301      	movs	r3, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800323a:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 800323c:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8003240:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003242:	2b01      	cmp	r3, #1
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003244:	bf02      	ittt	eq
 8003246:	6b83      	ldreq	r3, [r0, #56]	; 0x38
 8003248:	f443 3380 	orreq.w	r3, r3, #65536	; 0x10000
 800324c:	6383      	streq	r3, [r0, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  (void)USB_DevConnect(hpcd->Instance);
 800324e:	f003 fa9f 	bl	8006790 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8003252:	6820      	ldr	r0, [r4, #0]
 8003254:	f002 ff78 	bl	8006148 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8003258:	2000      	movs	r0, #0
 800325a:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 800325e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8003260:	2002      	movs	r0, #2
}
 8003262:	bd10      	pop	{r4, pc}

08003264 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003268:	6806      	ldr	r6, [r0, #0]
{
 800326a:	b085      	sub	sp, #20
 800326c:	4604      	mov	r4, r0
  uint32_t i, ep_intr, epint, epnum = 0U;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800326e:	4630      	mov	r0, r6
 8003270:	f003 fad5 	bl	800681e <USB_GetMode>
 8003274:	9000      	str	r0, [sp, #0]
 8003276:	2800      	cmp	r0, #0
 8003278:	f040 814a 	bne.w	8003510 <HAL_PCD_IRQHandler+0x2ac>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800327c:	6820      	ldr	r0, [r4, #0]
 800327e:	f003 fa9f 	bl	80067c0 <USB_ReadInterrupts>
 8003282:	2800      	cmp	r0, #0
 8003284:	f000 8144 	beq.w	8003510 <HAL_PCD_IRQHandler+0x2ac>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003288:	6820      	ldr	r0, [r4, #0]
 800328a:	f003 fa99 	bl	80067c0 <USB_ReadInterrupts>
 800328e:	0785      	lsls	r5, r0, #30
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003290:	bf48      	it	mi
 8003292:	6822      	ldrmi	r2, [r4, #0]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003294:	6820      	ldr	r0, [r4, #0]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003296:	bf42      	ittt	mi
 8003298:	6953      	ldrmi	r3, [r2, #20]
 800329a:	f003 0302 	andmi.w	r3, r3, #2
 800329e:	6153      	strmi	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80032a0:	f003 fa8e 	bl	80067c0 <USB_ReadInterrupts>
 80032a4:	f410 2500 	ands.w	r5, r0, #524288	; 0x80000
 80032a8:	d00e      	beq.n	80032c8 <HAL_PCD_IRQHandler+0x64>
    {
      epnum = 0U;

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80032aa:	6820      	ldr	r0, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;


  if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80032ac:	f8df a480 	ldr.w	sl, [pc, #1152]	; 8003730 <HAL_PCD_IRQHandler+0x4cc>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80032b0:	f003 fa8a 	bl	80067c8 <USB_ReadDevAllOutEpInterrupt>
 80032b4:	f506 6730 	add.w	r7, r6, #2816	; 0xb00
 80032b8:	4680      	mov	r8, r0
      epnum = 0U;
 80032ba:	2500      	movs	r5, #0
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032bc:	f04f 0920 	mov.w	r9, #32
      while (ep_intr != 0U)
 80032c0:	f1b8 0f00 	cmp.w	r8, #0
 80032c4:	f040 8127 	bne.w	8003516 <HAL_PCD_IRQHandler+0x2b2>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80032c8:	6820      	ldr	r0, [r4, #0]
 80032ca:	f003 fa79 	bl	80067c0 <USB_ReadInterrupts>
 80032ce:	0342      	lsls	r2, r0, #13
 80032d0:	d50b      	bpl.n	80032ea <HAL_PCD_IRQHandler+0x86>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80032d2:	6820      	ldr	r0, [r4, #0]
 80032d4:	f003 fa80 	bl	80067d8 <USB_ReadDevAllInEpInterrupt>
 80032d8:	4627      	mov	r7, r4
 80032da:	4683      	mov	fp, r0
 80032dc:	f506 6a10 	add.w	sl, r6, #2304	; 0x900
      epnum = 0U;
 80032e0:	2500      	movs	r5, #0
      while (ep_intr != 0U)
 80032e2:	f1bb 0f00 	cmp.w	fp, #0
 80032e6:	f040 8168 	bne.w	80035ba <HAL_PCD_IRQHandler+0x356>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80032ea:	6820      	ldr	r0, [r4, #0]
 80032ec:	f003 fa68 	bl	80067c0 <USB_ReadInterrupts>
 80032f0:	2800      	cmp	r0, #0
 80032f2:	da15      	bge.n	8003320 <HAL_PCD_IRQHandler+0xbc>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80032f4:	f8d6 3804 	ldr.w	r3, [r6, #2052]	; 0x804
 80032f8:	f023 0301 	bic.w	r3, r3, #1
 80032fc:	f8c6 3804 	str.w	r3, [r6, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 8003300:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8003304:	2b01      	cmp	r3, #1
 8003306:	f040 81de 	bne.w	80036c6 <HAL_PCD_IRQHandler+0x462>
        hpcd->LPM_State = LPM_L0;
 800330a:	2100      	movs	r1, #0
 800330c:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003310:	4620      	mov	r0, r4
 8003312:	f004 fd47 	bl	8007da4 <HAL_PCDEx_LPM_Callback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003316:	6822      	ldr	r2, [r4, #0]
 8003318:	6953      	ldr	r3, [r2, #20]
 800331a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800331e:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003320:	6820      	ldr	r0, [r4, #0]
 8003322:	f003 fa4d 	bl	80067c0 <USB_ReadInterrupts>
 8003326:	0503      	lsls	r3, r0, #20
 8003328:	d50b      	bpl.n	8003342 <HAL_PCD_IRQHandler+0xde>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800332a:	f8d6 3808 	ldr.w	r3, [r6, #2056]	; 0x808
 800332e:	07df      	lsls	r7, r3, #31
 8003330:	d502      	bpl.n	8003338 <HAL_PCD_IRQHandler+0xd4>
        HAL_PCD_SuspendCallback(hpcd);
 8003332:	4620      	mov	r0, r4
 8003334:	f004 fc2e 	bl	8007b94 <HAL_PCD_SuspendCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003338:	6822      	ldr	r2, [r4, #0]
 800333a:	6953      	ldr	r3, [r2, #20]
 800333c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003340:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003342:	6820      	ldr	r0, [r4, #0]
 8003344:	f003 fa3c 	bl	80067c0 <USB_ReadInterrupts>
 8003348:	0100      	lsls	r0, r0, #4
 800334a:	d514      	bpl.n	8003376 <HAL_PCD_IRQHandler+0x112>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800334c:	6823      	ldr	r3, [r4, #0]
 800334e:	695a      	ldr	r2, [r3, #20]
 8003350:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003354:	615a      	str	r2, [r3, #20]
      if (hpcd->LPM_State == LPM_L0)
 8003356:	f894 23f4 	ldrb.w	r2, [r4, #1012]	; 0x3f4
 800335a:	2a00      	cmp	r2, #0
 800335c:	f040 81b7 	bne.w	80036ce <HAL_PCD_IRQHandler+0x46a>
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
        hpcd->LPM_State = LPM_L1;
 8003362:	2101      	movs	r1, #1
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003364:	f3c3 0383 	ubfx	r3, r3, #2, #4
        hpcd->LPM_State = LPM_L1;
 8003368:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800336c:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003370:	4620      	mov	r0, r4
 8003372:	f004 fd17 	bl	8007da4 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003376:	6820      	ldr	r0, [r4, #0]
 8003378:	f003 fa22 	bl	80067c0 <USB_ReadInterrupts>
 800337c:	04c1      	lsls	r1, r0, #19
 800337e:	d534      	bpl.n	80033ea <HAL_PCD_IRQHandler+0x186>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003380:	f506 6700 	add.w	r7, r6, #2048	; 0x800
 8003384:	687b      	ldr	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003386:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003388:	f023 0301 	bic.w	r3, r3, #1
 800338c:	607b      	str	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800338e:	2110      	movs	r1, #16
 8003390:	f002 fefe 	bl	8006190 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003394:	6860      	ldr	r0, [r4, #4]
 8003396:	f506 6310 	add.w	r3, r6, #2304	; 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800339a:	f64f 317f 	movw	r1, #64383	; 0xfb7f
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800339e:	9a00      	ldr	r2, [sp, #0]
 80033a0:	4282      	cmp	r2, r0
 80033a2:	f040 8198 	bne.w	80036d6 <HAL_PCD_IRQHandler+0x472>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80033ac:	61fb      	str	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80033ae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 81a2 	beq.w	80036fa <HAL_PCD_IRQHandler+0x496>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80033b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033ba:	f043 030b 	orr.w	r3, r3, #11
 80033be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80033c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033c4:	f043 030b 	orr.w	r3, r3, #11
 80033c8:	647b      	str	r3, [r7, #68]	; 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80033ca:	f8d6 3800 	ldr.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80033ce:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80033d0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80033d4:	f8c6 3800 	str.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80033d8:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 80033dc:	f003 fa3e 	bl	800685c <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80033e0:	6822      	ldr	r2, [r4, #0]
 80033e2:	6953      	ldr	r3, [r2, #20]
 80033e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033e8:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80033ea:	6820      	ldr	r0, [r4, #0]
 80033ec:	f003 f9e8 	bl	80067c0 <USB_ReadInterrupts>
 80033f0:	0482      	lsls	r2, r0, #18
 80033f2:	d516      	bpl.n	8003422 <HAL_PCD_IRQHandler+0x1be>
      (void)USB_ActivateSetup(hpcd->Instance);
 80033f4:	6820      	ldr	r0, [r4, #0]
 80033f6:	f003 fa16 	bl	8006826 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80033fa:	6820      	ldr	r0, [r4, #0]
 80033fc:	f002 ff9a 	bl	8006334 <USB_GetDevSpeed>
 8003400:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003402:	6827      	ldr	r7, [r4, #0]
 8003404:	f000 ff5c 	bl	80042c0 <HAL_RCC_GetHCLKFreq>
 8003408:	7b22      	ldrb	r2, [r4, #12]
 800340a:	4601      	mov	r1, r0
 800340c:	4638      	mov	r0, r7
 800340e:	f002 fe27 	bl	8006060 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8003412:	4620      	mov	r0, r4
 8003414:	f004 fbab 	bl	8007b6e <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003418:	6822      	ldr	r2, [r4, #0]
 800341a:	6953      	ldr	r3, [r2, #20]
 800341c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003420:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003422:	6820      	ldr	r0, [r4, #0]
 8003424:	f003 f9cc 	bl	80067c0 <USB_ReadInterrupts>
 8003428:	06c3      	lsls	r3, r0, #27
 800342a:	d52b      	bpl.n	8003484 <HAL_PCD_IRQHandler+0x220>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800342c:	6822      	ldr	r2, [r4, #0]
 800342e:	6993      	ldr	r3, [r2, #24]
 8003430:	f023 0310 	bic.w	r3, r3, #16
 8003434:	6193      	str	r3, [r2, #24]
      temp = USBx->GRXSTSP;
 8003436:	6a37      	ldr	r7, [r6, #32]
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003438:	f3c7 4343 	ubfx	r3, r7, #17, #4
 800343c:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800343e:	f007 090f 	and.w	r9, r7, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003442:	f040 8165 	bne.w	8003710 <HAL_PCD_IRQHandler+0x4ac>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003446:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800344a:	421f      	tst	r7, r3
 800344c:	d015      	beq.n	800347a <HAL_PCD_IRQHandler+0x216>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800344e:	f04f 081c 	mov.w	r8, #28
 8003452:	fb08 4809 	mla	r8, r8, r9, r4
 8003456:	f3c7 170a 	ubfx	r7, r7, #4, #11
 800345a:	463a      	mov	r2, r7
 800345c:	f8d8 1208 	ldr.w	r1, [r8, #520]	; 0x208
 8003460:	4630      	mov	r0, r6
 8003462:	f003 f91f 	bl	80066a4 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003466:	f8d8 3208 	ldr.w	r3, [r8, #520]	; 0x208
 800346a:	443b      	add	r3, r7
 800346c:	f8c8 3208 	str.w	r3, [r8, #520]	; 0x208
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003470:	f8d8 3214 	ldr.w	r3, [r8, #532]	; 0x214
 8003474:	441f      	add	r7, r3
 8003476:	f8c8 7214 	str.w	r7, [r8, #532]	; 0x214
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800347a:	6822      	ldr	r2, [r4, #0]
 800347c:	6993      	ldr	r3, [r2, #24]
 800347e:	f043 0310 	orr.w	r3, r3, #16
 8003482:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003484:	6820      	ldr	r0, [r4, #0]
 8003486:	f003 f99b 	bl	80067c0 <USB_ReadInterrupts>
 800348a:	0707      	lsls	r7, r0, #28
 800348c:	d507      	bpl.n	800349e <HAL_PCD_IRQHandler+0x23a>
      HAL_PCD_SOFCallback(hpcd);
 800348e:	4620      	mov	r0, r4
 8003490:	f004 fb69 	bl	8007b66 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003494:	6822      	ldr	r2, [r4, #0]
 8003496:	6953      	ldr	r3, [r2, #20]
 8003498:	f003 0308 	and.w	r3, r3, #8
 800349c:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800349e:	6820      	ldr	r0, [r4, #0]
 80034a0:	f003 f98e 	bl	80067c0 <USB_ReadInterrupts>
 80034a4:	02c6      	lsls	r6, r0, #11
 80034a6:	d508      	bpl.n	80034ba <HAL_PCD_IRQHandler+0x256>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80034a8:	b2e9      	uxtb	r1, r5
 80034aa:	4620      	mov	r0, r4
 80034ac:	f004 fba8 	bl	8007c00 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80034b0:	6822      	ldr	r2, [r4, #0]
 80034b2:	6953      	ldr	r3, [r2, #20]
 80034b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034b8:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80034ba:	6820      	ldr	r0, [r4, #0]
 80034bc:	f003 f980 	bl	80067c0 <USB_ReadInterrupts>
 80034c0:	0280      	lsls	r0, r0, #10
 80034c2:	d508      	bpl.n	80034d6 <HAL_PCD_IRQHandler+0x272>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80034c4:	b2e9      	uxtb	r1, r5
 80034c6:	4620      	mov	r0, r4
 80034c8:	f004 fb96 	bl	8007bf8 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80034cc:	6822      	ldr	r2, [r4, #0]
 80034ce:	6953      	ldr	r3, [r2, #20]
 80034d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034d4:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80034d6:	6820      	ldr	r0, [r4, #0]
 80034d8:	f003 f972 	bl	80067c0 <USB_ReadInterrupts>
 80034dc:	0041      	lsls	r1, r0, #1
 80034de:	d507      	bpl.n	80034f0 <HAL_PCD_IRQHandler+0x28c>
      HAL_PCD_ConnectCallback(hpcd);
 80034e0:	4620      	mov	r0, r4
 80034e2:	f004 fb91 	bl	8007c08 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80034e6:	6822      	ldr	r2, [r4, #0]
 80034e8:	6953      	ldr	r3, [r2, #20]
 80034ea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80034ee:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80034f0:	6820      	ldr	r0, [r4, #0]
 80034f2:	f003 f965 	bl	80067c0 <USB_ReadInterrupts>
 80034f6:	0742      	lsls	r2, r0, #29
 80034f8:	d50a      	bpl.n	8003510 <HAL_PCD_IRQHandler+0x2ac>
      temp = hpcd->Instance->GOTGINT;
 80034fa:	6823      	ldr	r3, [r4, #0]
 80034fc:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80034fe:	076b      	lsls	r3, r5, #29
 8003500:	d502      	bpl.n	8003508 <HAL_PCD_IRQHandler+0x2a4>
        HAL_PCD_DisconnectCallback(hpcd);
 8003502:	4620      	mov	r0, r4
 8003504:	f004 fb84 	bl	8007c10 <HAL_PCD_DisconnectCallback>
      hpcd->Instance->GOTGINT |= temp;
 8003508:	6823      	ldr	r3, [r4, #0]
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	4315      	orrs	r5, r2
 800350e:	605d      	str	r5, [r3, #4]
}
 8003510:	b005      	add	sp, #20
 8003512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((ep_intr & 0x1U) != 0U)
 8003516:	f018 0f01 	tst.w	r8, #1
 800351a:	d040      	beq.n	800359e <HAL_PCD_IRQHandler+0x33a>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800351c:	b2ea      	uxtb	r2, r5
 800351e:	4611      	mov	r1, r2
 8003520:	6820      	ldr	r0, [r4, #0]
 8003522:	9201      	str	r2, [sp, #4]
 8003524:	f003 f960 	bl	80067e8 <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003528:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800352c:	4683      	mov	fp, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800352e:	9a01      	ldr	r2, [sp, #4]
 8003530:	d00f      	beq.n	8003552 <HAL_PCD_IRQHandler+0x2ee>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003532:	2101      	movs	r1, #1
 8003534:	60b9      	str	r1, [r7, #8]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003536:	6821      	ldr	r1, [r4, #0]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003538:	6c08      	ldr	r0, [r1, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800353a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800353e:	eb01 1145 	add.w	r1, r1, r5, lsl #5
  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003542:	4550      	cmp	r0, sl
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003544:	688b      	ldr	r3, [r1, #8]
  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003546:	d133      	bne.n	80035b0 <HAL_PCD_IRQHandler+0x34c>
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003548:	0418      	lsls	r0, r3, #16
 800354a:	d52d      	bpl.n	80035a8 <HAL_PCD_IRQHandler+0x344>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800354c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003550:	608a      	str	r2, [r1, #8]
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003552:	f01b 0f08 	tst.w	fp, #8
 8003556:	d012      	beq.n	800357e <HAL_PCD_IRQHandler+0x31a>
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003558:	6822      	ldr	r2, [r4, #0]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800355a:	6c11      	ldr	r1, [r2, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800355c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003560:	eb02 1245 	add.w	r2, r2, r5, lsl #5
  if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8003564:	4551      	cmp	r1, sl
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003566:	6890      	ldr	r0, [r2, #8]
  if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8003568:	d104      	bne.n	8003574 <HAL_PCD_IRQHandler+0x310>
 800356a:	0401      	lsls	r1, r0, #16
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800356c:	bf44      	itt	mi
 800356e:	f44f 4100 	movmi.w	r1, #32768	; 0x8000
 8003572:	6091      	strmi	r1, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003574:	4620      	mov	r0, r4
 8003576:	f004 fadf 	bl	8007b38 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800357a:	2208      	movs	r2, #8
 800357c:	60ba      	str	r2, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800357e:	f01b 0f10 	tst.w	fp, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003582:	bf1c      	itt	ne
 8003584:	2210      	movne	r2, #16
 8003586:	60ba      	strne	r2, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003588:	f01b 0f20 	tst.w	fp, #32
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800358c:	bf18      	it	ne
 800358e:	f8c7 9008 	strne.w	r9, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003592:	f41b 5f00 	tst.w	fp, #8192	; 0x2000
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003596:	bf1c      	itt	ne
 8003598:	f44f 5300 	movne.w	r3, #8192	; 0x2000
 800359c:	60bb      	strne	r3, [r7, #8]
        epnum++;
 800359e:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 80035a0:	ea4f 0858 	mov.w	r8, r8, lsr #1
 80035a4:	3720      	adds	r7, #32
 80035a6:	e68b      	b.n	80032c0 <HAL_PCD_IRQHandler+0x5c>
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80035a8:	0698      	lsls	r0, r3, #26
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80035aa:	bf48      	it	mi
 80035ac:	f8c1 9008 	strmi.w	r9, [r1, #8]
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035b0:	4611      	mov	r1, r2
 80035b2:	4620      	mov	r0, r4
 80035b4:	f004 fac6 	bl	8007b44 <HAL_PCD_DataOutStageCallback>
 80035b8:	e7cb      	b.n	8003552 <HAL_PCD_IRQHandler+0x2ee>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80035ba:	f01b 0f01 	tst.w	fp, #1
 80035be:	d07b      	beq.n	80036b8 <HAL_PCD_IRQHandler+0x454>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80035c0:	b2eb      	uxtb	r3, r5
 80035c2:	4619      	mov	r1, r3
 80035c4:	6820      	ldr	r0, [r4, #0]
 80035c6:	9301      	str	r3, [sp, #4]
 80035c8:	f003 f917 	bl	80067fa <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80035cc:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80035d0:	4680      	mov	r8, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80035d2:	d010      	beq.n	80035f6 <HAL_PCD_IRQHandler+0x392>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80035d4:	f8d6 3834 	ldr.w	r3, [r6, #2100]	; 0x834
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80035d8:	9901      	ldr	r1, [sp, #4]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80035da:	2001      	movs	r0, #1
 80035dc:	f005 020f 	and.w	r2, r5, #15
 80035e0:	fa00 f202 	lsl.w	r2, r0, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80035e4:	ea23 0302 	bic.w	r3, r3, r2
 80035e8:	f8c6 3834 	str.w	r3, [r6, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80035ec:	f8ca 0008 	str.w	r0, [sl, #8]
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80035f0:	4620      	mov	r0, r4
 80035f2:	f004 fab0 	bl	8007b56 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80035f6:	f018 0f08 	tst.w	r8, #8
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80035fa:	bf1c      	itt	ne
 80035fc:	2308      	movne	r3, #8
 80035fe:	f8ca 3008 	strne.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003602:	f018 0f10 	tst.w	r8, #16
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003606:	bf1c      	itt	ne
 8003608:	2310      	movne	r3, #16
 800360a:	f8ca 3008 	strne.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800360e:	f018 0f40 	tst.w	r8, #64	; 0x40
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003612:	bf1c      	itt	ne
 8003614:	2340      	movne	r3, #64	; 0x40
 8003616:	f8ca 3008 	strne.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800361a:	f018 0f02 	tst.w	r8, #2
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800361e:	bf1c      	itt	ne
 8003620:	2302      	movne	r3, #2
 8003622:	f8ca 3008 	strne.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003626:	f018 0f80 	tst.w	r8, #128	; 0x80
 800362a:	d045      	beq.n	80036b8 <HAL_PCD_IRQHandler+0x454>
  if (ep->xfer_count > ep->xfer_len)
 800362c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800362e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003630:	429a      	cmp	r2, r3
 8003632:	d841      	bhi.n	80036b8 <HAL_PCD_IRQHandler+0x454>
  len = ep->xfer_len - ep->xfer_count;
 8003634:	eba3 0802 	sub.w	r8, r3, r2
  len32b = (len + 3U) / 4U;
 8003638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800363a:	6821      	ldr	r1, [r4, #0]
 800363c:	9102      	str	r1, [sp, #8]
  len32b = (len + 3U) / 4U;
 800363e:	4598      	cmp	r8, r3
 8003640:	bf28      	it	cs
 8003642:	4698      	movcs	r8, r3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003644:	f501 6310 	add.w	r3, r1, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 8003648:	f108 0803 	add.w	r8, r8, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800364c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
  len32b = (len + 3U) / 4U;
 8003650:	ea4f 0898 	mov.w	r8, r8, lsr #2
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003654:	9303      	str	r3, [sp, #12]
 8003656:	9b03      	ldr	r3, [sp, #12]
 8003658:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	b29b      	uxth	r3, r3
 800365e:	4543      	cmp	r3, r8
 8003660:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003662:	d327      	bcc.n	80036b4 <HAL_PCD_IRQHandler+0x450>
 8003664:	4293      	cmp	r3, r2
 8003666:	d925      	bls.n	80036b4 <HAL_PCD_IRQHandler+0x450>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003668:	b963      	cbnz	r3, 8003684 <HAL_PCD_IRQHandler+0x420>
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800366a:	9b02      	ldr	r3, [sp, #8]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800366c:	f005 010f 	and.w	r1, r5, #15
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003670:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003674:	2001      	movs	r0, #1
 8003676:	fa00 f101 	lsl.w	r1, r0, r1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800367a:	ea22 0201 	bic.w	r2, r2, r1
 800367e:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
 8003682:	e019      	b.n	80036b8 <HAL_PCD_IRQHandler+0x454>
    len = ep->xfer_len - ep->xfer_count;
 8003684:	eba3 0902 	sub.w	r9, r3, r2
 8003688:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 800368a:	9a01      	ldr	r2, [sp, #4]
 800368c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800368e:	9802      	ldr	r0, [sp, #8]
 8003690:	4599      	cmp	r9, r3
 8003692:	bf28      	it	cs
 8003694:	4699      	movcs	r9, r3
 8003696:	fa1f f389 	uxth.w	r3, r9
 800369a:	f002 ff3b 	bl	8006514 <USB_WritePacket>
    ep->xfer_buff  += len;
 800369e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036a0:	444b      	add	r3, r9
 80036a2:	64bb      	str	r3, [r7, #72]	; 0x48
    ep->xfer_count += len;
 80036a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    len32b = (len + 3U) / 4U;
 80036a6:	f109 0803 	add.w	r8, r9, #3
    ep->xfer_count += len;
 80036aa:	444b      	add	r3, r9
    len32b = (len + 3U) / 4U;
 80036ac:	ea4f 0898 	mov.w	r8, r8, lsr #2
    ep->xfer_count += len;
 80036b0:	657b      	str	r3, [r7, #84]	; 0x54
 80036b2:	e7d0      	b.n	8003656 <HAL_PCD_IRQHandler+0x3f2>
  if (ep->xfer_len <= ep->xfer_count)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d9d8      	bls.n	800366a <HAL_PCD_IRQHandler+0x406>
        epnum++;
 80036b8:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 80036ba:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
 80036be:	371c      	adds	r7, #28
 80036c0:	f10a 0a20 	add.w	sl, sl, #32
 80036c4:	e60d      	b.n	80032e2 <HAL_PCD_IRQHandler+0x7e>
        HAL_PCD_ResumeCallback(hpcd);
 80036c6:	4620      	mov	r0, r4
 80036c8:	f004 fa7c 	bl	8007bc4 <HAL_PCD_ResumeCallback>
 80036cc:	e623      	b.n	8003316 <HAL_PCD_IRQHandler+0xb2>
        HAL_PCD_SuspendCallback(hpcd);
 80036ce:	4620      	mov	r0, r4
 80036d0:	f004 fa60 	bl	8007b94 <HAL_PCD_SuspendCallback>
 80036d4:	e64f      	b.n	8003376 <HAL_PCD_IRQHandler+0x112>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80036d6:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80036de:	601a      	str	r2, [r3, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80036e0:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80036e4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80036e8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80036ec:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036f0:	9a00      	ldr	r2, [sp, #0]
 80036f2:	3201      	adds	r2, #1
 80036f4:	9200      	str	r2, [sp, #0]
 80036f6:	3320      	adds	r3, #32
 80036f8:	e651      	b.n	800339e <HAL_PCD_IRQHandler+0x13a>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003700:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003704:	617b      	str	r3, [r7, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	f043 030b 	orr.w	r3, r3, #11
 800370c:	613b      	str	r3, [r7, #16]
 800370e:	e65c      	b.n	80033ca <HAL_PCD_IRQHandler+0x166>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003710:	2b06      	cmp	r3, #6
 8003712:	f47f aeb2 	bne.w	800347a <HAL_PCD_IRQHandler+0x216>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003716:	2208      	movs	r2, #8
 8003718:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 800371c:	4630      	mov	r0, r6
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800371e:	f04f 081c 	mov.w	r8, #28
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003722:	f002 ffbf 	bl	80066a4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003726:	fb08 4809 	mla	r8, r8, r9, r4
 800372a:	f3c7 170a 	ubfx	r7, r7, #4, #11
 800372e:	e69f      	b.n	8003470 <HAL_PCD_IRQHandler+0x20c>
 8003730:	4f54310a 	.word	0x4f54310a

08003734 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8003734:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8003738:	2a01      	cmp	r2, #1
{
 800373a:	b510      	push	{r4, lr}
 800373c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800373e:	d00b      	beq.n	8003758 <HAL_PCD_SetAddress+0x24>
 8003740:	2201      	movs	r2, #1
 8003742:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003746:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800374a:	6800      	ldr	r0, [r0, #0]
 800374c:	f003 f810 	bl	8006770 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003750:	2000      	movs	r0, #0
 8003752:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8003756:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8003758:	2002      	movs	r0, #2
}
 800375a:	bd10      	pop	{r4, pc}

0800375c <HAL_PCD_EP_Open>:
{
 800375c:	b570      	push	{r4, r5, r6, lr}
 800375e:	4604      	mov	r4, r0
 8003760:	f001 000f 	and.w	r0, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 8003764:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003768:	f04f 061c 	mov.w	r6, #28
 800376c:	b2c5      	uxtb	r5, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800376e:	fb06 4105 	mla	r1, r6, r5, r4
    ep->is_in = 1U;
 8003772:	bf15      	itete	ne
 8003774:	fb06 4505 	mlane	r5, r6, r5, r4
    ep->is_in = 0U;
 8003778:	fb06 4505 	mlaeq	r5, r6, r5, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800377c:	313c      	addne	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800377e:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 1U;
 8003782:	bf15      	itete	ne
 8003784:	2601      	movne	r6, #1
    ep->is_in = 0U;
 8003786:	2600      	moveq	r6, #0
    ep->is_in = 1U;
 8003788:	f885 603d 	strbne.w	r6, [r5, #61]	; 0x3d
    ep->is_in = 0U;
 800378c:	f885 61fd 	strbeq.w	r6, [r5, #509]	; 0x1fd
  ep->maxpacket = ep_mps;
 8003790:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 8003792:	784a      	ldrb	r2, [r1, #1]
  ep->type = ep_type;
 8003794:	70cb      	strb	r3, [r1, #3]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003796:	b2c0      	uxtb	r0, r0
 8003798:	7008      	strb	r0, [r1, #0]
  if (ep->is_in != 0U)
 800379a:	b102      	cbz	r2, 800379e <HAL_PCD_EP_Open+0x42>
    ep->tx_fifo_num = ep->num;
 800379c:	80c8      	strh	r0, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 800379e:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 80037a0:	bf04      	itt	eq
 80037a2:	2300      	moveq	r3, #0
 80037a4:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 80037a6:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d009      	beq.n	80037c2 <HAL_PCD_EP_Open+0x66>
 80037ae:	2301      	movs	r3, #1
 80037b0:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80037b4:	6820      	ldr	r0, [r4, #0]
 80037b6:	f002 fdc7 	bl	8006348 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037ba:	2000      	movs	r0, #0
 80037bc:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return ret;
 80037c0:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 80037c2:	2002      	movs	r0, #2
}
 80037c4:	bd70      	pop	{r4, r5, r6, pc}

080037c6 <HAL_PCD_EP_Close>:
{
 80037c6:	f001 030f 	and.w	r3, r1, #15
 80037ca:	b2da      	uxtb	r2, r3
 80037cc:	b510      	push	{r4, lr}
 80037ce:	4604      	mov	r4, r0
 80037d0:	201c      	movs	r0, #28
  if ((ep_addr & 0x80U) == 0x80U)
 80037d2:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037d6:	fb00 4102 	mla	r1, r0, r2, r4
 80037da:	bf19      	ittee	ne
 80037dc:	313c      	addne	r1, #60	; 0x3c
    ep->is_in = 1U;
 80037de:	fb00 4202 	mlane	r2, r0, r2, r4
    ep->is_in = 0U;
 80037e2:	fb00 4202 	mlaeq	r2, r0, r2, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037e6:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 1U;
 80037ea:	bf15      	itete	ne
 80037ec:	2001      	movne	r0, #1
    ep->is_in = 0U;
 80037ee:	2000      	moveq	r0, #0
    ep->is_in = 1U;
 80037f0:	f882 003d 	strbne.w	r0, [r2, #61]	; 0x3d
    ep->is_in = 0U;
 80037f4:	f882 01fd 	strbeq.w	r0, [r2, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 80037f8:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80037fa:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d009      	beq.n	8003816 <HAL_PCD_EP_Close+0x50>
 8003802:	2301      	movs	r3, #1
 8003804:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003808:	6820      	ldr	r0, [r4, #0]
 800380a:	f002 fddf 	bl	80063cc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800380e:	2000      	movs	r0, #0
 8003810:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8003814:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8003816:	2002      	movs	r0, #2
}
 8003818:	bd10      	pop	{r4, pc}

0800381a <HAL_PCD_EP_Receive>:
{
 800381a:	b538      	push	{r3, r4, r5, lr}
 800381c:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003820:	241c      	movs	r4, #28
 8003822:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 8003826:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800382a:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_len = len;
 800382e:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->xfer_count = 0U;
 8003832:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 8003834:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_count = 0U;
 8003838:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
  ep->is_in = 0U;
 800383c:	f884 31fd 	strb.w	r3, [r4, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 8003840:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003844:	6800      	ldr	r0, [r0, #0]
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003846:	b91d      	cbnz	r5, 8003850 <HAL_PCD_EP_Receive+0x36>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003848:	f002 fdf2 	bl	8006430 <USB_EP0StartXfer>
}
 800384c:	2000      	movs	r0, #0
 800384e:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003850:	f002 fe70 	bl	8006534 <USB_EPStartXfer>
 8003854:	e7fa      	b.n	800384c <HAL_PCD_EP_Receive+0x32>

08003856 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003856:	231c      	movs	r3, #28
 8003858:	f001 010f 	and.w	r1, r1, #15
 800385c:	fb03 0101 	mla	r1, r3, r1, r0
}
 8003860:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 8003864:	4770      	bx	lr

08003866 <HAL_PCD_EP_Transmit>:
{
 8003866:	b538      	push	{r3, r4, r5, lr}
 8003868:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800386c:	241c      	movs	r4, #28
 800386e:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 8003872:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003876:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_len = len;
 8003878:	6523      	str	r3, [r4, #80]	; 0x50
  ep->xfer_count = 0U;
 800387a:	2300      	movs	r3, #0
 800387c:	6563      	str	r3, [r4, #84]	; 0x54
  ep->is_in = 1U;
 800387e:	2301      	movs	r3, #1
  ep->xfer_buff = pBuf;
 8003880:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->is_in = 1U;
 8003882:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 8003886:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800388a:	6800      	ldr	r0, [r0, #0]
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800388c:	b91d      	cbnz	r5, 8003896 <HAL_PCD_EP_Transmit+0x30>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800388e:	f002 fdcf 	bl	8006430 <USB_EP0StartXfer>
}
 8003892:	2000      	movs	r0, #0
 8003894:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003896:	f002 fe4d 	bl	8006534 <USB_EPStartXfer>
 800389a:	e7fa      	b.n	8003892 <HAL_PCD_EP_Transmit+0x2c>

0800389c <HAL_PCD_EP_SetStall>:
{
 800389c:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800389e:	6843      	ldr	r3, [r0, #4]
 80038a0:	f001 050f 	and.w	r5, r1, #15
 80038a4:	429d      	cmp	r5, r3
{
 80038a6:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80038a8:	d82d      	bhi.n	8003906 <HAL_PCD_EP_SetStall+0x6a>
  if ((0x80U & ep_addr) == 0x80U)
 80038aa:	f011 0f80 	tst.w	r1, #128	; 0x80
 80038ae:	f04f 021c 	mov.w	r2, #28
 80038b2:	d01e      	beq.n	80038f2 <HAL_PCD_EP_SetStall+0x56>
    ep->is_in = 1U;
 80038b4:	fb02 0105 	mla	r1, r2, r5, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038b8:	fb02 0305 	mla	r3, r2, r5, r0
    ep->is_in = 1U;
 80038bc:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038be:	333c      	adds	r3, #60	; 0x3c
    ep->is_in = 1U;
 80038c0:	f881 203d 	strb.w	r2, [r1, #61]	; 0x3d
  ep->is_stall = 1U;
 80038c4:	2201      	movs	r2, #1
 80038c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038c8:	701d      	strb	r5, [r3, #0]
  __HAL_LOCK(hpcd);
 80038ca:	f894 13bc 	ldrb.w	r1, [r4, #956]	; 0x3bc
 80038ce:	4291      	cmp	r1, r2
 80038d0:	d01b      	beq.n	800390a <HAL_PCD_EP_SetStall+0x6e>
 80038d2:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80038d6:	4619      	mov	r1, r3
 80038d8:	6820      	ldr	r0, [r4, #0]
 80038da:	f002 fef1 	bl	80066c0 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038de:	b925      	cbnz	r5, 80038ea <HAL_PCD_EP_SetStall+0x4e>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80038e0:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 80038e4:	6820      	ldr	r0, [r4, #0]
 80038e6:	f002 ffb9 	bl	800685c <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 80038ea:	2000      	movs	r0, #0
 80038ec:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 80038f0:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 80038f2:	fb02 0301 	mla	r3, r2, r1, r0
    ep->is_in = 0U;
 80038f6:	fb02 0101 	mla	r1, r2, r1, r0
 80038fa:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 80038fc:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
    ep->is_in = 0U;
 8003900:	f881 21fd 	strb.w	r2, [r1, #509]	; 0x1fd
 8003904:	e7de      	b.n	80038c4 <HAL_PCD_EP_SetStall+0x28>
    return HAL_ERROR;
 8003906:	2001      	movs	r0, #1
 8003908:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 800390a:	2002      	movs	r0, #2
}
 800390c:	bd38      	pop	{r3, r4, r5, pc}

0800390e <HAL_PCD_EP_ClrStall>:
{
 800390e:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003910:	6843      	ldr	r3, [r0, #4]
 8003912:	f001 020f 	and.w	r2, r1, #15
 8003916:	429a      	cmp	r2, r3
{
 8003918:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800391a:	d826      	bhi.n	800396a <HAL_PCD_EP_ClrStall+0x5c>
 800391c:	231c      	movs	r3, #28
  if ((0x80U & ep_addr) == 0x80U)
 800391e:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003922:	fb03 0102 	mla	r1, r3, r2, r0
 8003926:	bf19      	ittee	ne
 8003928:	313c      	addne	r1, #60	; 0x3c
    ep->is_in = 1U;
 800392a:	fb03 0302 	mlane	r3, r3, r2, r0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800392e:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 8003932:	fb03 4302 	mlaeq	r3, r3, r2, r4
    ep->is_in = 1U;
 8003936:	bf14      	ite	ne
 8003938:	2001      	movne	r0, #1
    ep->is_in = 0U;
 800393a:	2000      	moveq	r0, #0
  ep->is_stall = 0U;
 800393c:	f04f 0500 	mov.w	r5, #0
    ep->is_in = 1U;
 8003940:	bf14      	ite	ne
 8003942:	f883 003d 	strbne.w	r0, [r3, #61]	; 0x3d
    ep->is_in = 0U;
 8003946:	f883 01fd 	strbeq.w	r0, [r3, #509]	; 0x1fd
  ep->is_stall = 0U;
 800394a:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800394c:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 800394e:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8003952:	2b01      	cmp	r3, #1
 8003954:	d00b      	beq.n	800396e <HAL_PCD_EP_ClrStall+0x60>
 8003956:	2301      	movs	r3, #1
 8003958:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800395c:	6820      	ldr	r0, [r4, #0]
 800395e:	f002 fedc 	bl	800671a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003962:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
  return HAL_OK;
 8003966:	4628      	mov	r0, r5
 8003968:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800396a:	2001      	movs	r0, #1
 800396c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 800396e:	2002      	movs	r0, #2
}
 8003970:	bd38      	pop	{r3, r4, r5, pc}

08003972 <HAL_PCD_EP_Flush>:
  __HAL_LOCK(hpcd);
 8003972:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8003976:	2b01      	cmp	r3, #1
{
 8003978:	b510      	push	{r4, lr}
 800397a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800397c:	d011      	beq.n	80039a2 <HAL_PCD_EP_Flush+0x30>
 800397e:	2301      	movs	r3, #1
 8003980:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  if ((ep_addr & 0x80U) == 0x80U)
 8003984:	060b      	lsls	r3, r1, #24
 8003986:	d508      	bpl.n	800399a <HAL_PCD_EP_Flush+0x28>
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8003988:	f001 010f 	and.w	r1, r1, #15
 800398c:	6800      	ldr	r0, [r0, #0]
 800398e:	f002 fbff 	bl	8006190 <USB_FlushTxFifo>
  __HAL_UNLOCK(hpcd);
 8003992:	2000      	movs	r0, #0
 8003994:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8003998:	bd10      	pop	{r4, pc}
    (void)USB_FlushRxFifo(hpcd->Instance);
 800399a:	6800      	ldr	r0, [r0, #0]
 800399c:	f002 fc0a 	bl	80061b4 <USB_FlushRxFifo>
 80039a0:	e7f7      	b.n	8003992 <HAL_PCD_EP_Flush+0x20>
  __HAL_LOCK(hpcd);
 80039a2:	2002      	movs	r0, #2
}
 80039a4:	bd10      	pop	{r4, pc}

080039a6 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80039a6:	b570      	push	{r4, r5, r6, lr}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80039a8:	6804      	ldr	r4, [r0, #0]
 80039aa:	6a63      	ldr	r3, [r4, #36]	; 0x24

  if (fifo == 0U)
 80039ac:	b921      	cbnz	r1, 80039b8 <HAL_PCDEx_SetTxFiFo+0x12>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80039ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80039b2:	62a3      	str	r3, [r4, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 80039b4:	2000      	movs	r0, #0
 80039b6:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80039b8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 80039ba:	1e4d      	subs	r5, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80039bc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80039c0:	2000      	movs	r0, #0
 80039c2:	1c46      	adds	r6, r0, #1
 80039c4:	b2c0      	uxtb	r0, r0
 80039c6:	4285      	cmp	r5, r0
 80039c8:	d806      	bhi.n	80039d8 <HAL_PCDEx_SetTxFiFo+0x32>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80039ca:	313f      	adds	r1, #63	; 0x3f
 80039cc:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80039d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80039d4:	6063      	str	r3, [r4, #4]
 80039d6:	e7ed      	b.n	80039b4 <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80039d8:	3040      	adds	r0, #64	; 0x40
 80039da:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80039de:	6840      	ldr	r0, [r0, #4]
 80039e0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80039e4:	4630      	mov	r0, r6
 80039e6:	e7ec      	b.n	80039c2 <HAL_PCDEx_SetTxFiFo+0x1c>

080039e8 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 80039e8:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 80039ea:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 80039ec:	6259      	str	r1, [r3, #36]	; 0x24
}
 80039ee:	4770      	bx	lr

080039f0 <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039f0:	6802      	ldr	r2, [r0, #0]
{
 80039f2:	4603      	mov	r3, r0

  hpcd->lpm_active = 1U;
 80039f4:	2101      	movs	r1, #1
 80039f6:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80039fa:	2000      	movs	r0, #0
 80039fc:	f883 03f4 	strb.w	r0, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003a00:	6993      	ldr	r3, [r2, #24]
 8003a02:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003a06:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003a08:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003a0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a0e:	f043 0303 	orr.w	r3, r3, #3
 8003a12:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8003a14:	4770      	bx	lr
	...

08003a18 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a18:	4a02      	ldr	r2, [pc, #8]	; (8003a24 <HAL_PWR_EnableBkUpAccess+0xc>)
 8003a1a:	6813      	ldr	r3, [r2, #0]
 8003a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a20:	6013      	str	r3, [r2, #0]
 8003a22:	4770      	bx	lr
 8003a24:	40007000 	.word	0x40007000

08003a28 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003a28:	4b02      	ldr	r3, [pc, #8]	; (8003a34 <HAL_PWREx_GetVoltageRange+0xc>)
 8003a2a:	6818      	ldr	r0, [r3, #0]
#endif
}
 8003a2c:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	40007000 	.word	0x40007000

08003a38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a38:	4b17      	ldr	r3, [pc, #92]	; (8003a98 <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a3a:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a3c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a40:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a44:	d11c      	bne.n	8003a80 <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a46:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8003a4a:	d015      	beq.n	8003a78 <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8003a52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a56:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a58:	4a10      	ldr	r2, [pc, #64]	; (8003a9c <HAL_PWREx_ControlVoltageScaling+0x64>)
 8003a5a:	6811      	ldr	r1, [r2, #0]
 8003a5c:	2232      	movs	r2, #50	; 0x32
 8003a5e:	434a      	muls	r2, r1
 8003a60:	490f      	ldr	r1, [pc, #60]	; (8003aa0 <HAL_PWREx_ControlVoltageScaling+0x68>)
 8003a62:	fbb2 f2f1 	udiv	r2, r2, r1
 8003a66:	4619      	mov	r1, r3
 8003a68:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a6a:	6958      	ldr	r0, [r3, #20]
 8003a6c:	0540      	lsls	r0, r0, #21
 8003a6e:	d500      	bpl.n	8003a72 <HAL_PWREx_ControlVoltageScaling+0x3a>
 8003a70:	b922      	cbnz	r2, 8003a7c <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a72:	694b      	ldr	r3, [r1, #20]
 8003a74:	055b      	lsls	r3, r3, #21
 8003a76:	d40d      	bmi.n	8003a94 <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003a78:	2000      	movs	r0, #0
 8003a7a:	4770      	bx	lr
        wait_loop_index--;
 8003a7c:	3a01      	subs	r2, #1
 8003a7e:	e7f4      	b.n	8003a6a <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a80:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a84:	bf1f      	itttt	ne
 8003a86:	681a      	ldrne	r2, [r3, #0]
 8003a88:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8003a8c:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8003a90:	601a      	strne	r2, [r3, #0]
 8003a92:	e7f1      	b.n	8003a78 <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 8003a94:	2003      	movs	r0, #3
}
 8003a96:	4770      	bx	lr
 8003a98:	40007000 	.word	0x40007000
 8003a9c:	20000000 	.word	0x20000000
 8003aa0:	000f4240 	.word	0x000f4240

08003aa4 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003aa4:	4a02      	ldr	r2, [pc, #8]	; (8003ab0 <HAL_PWREx_EnableVddUSB+0xc>)
 8003aa6:	6853      	ldr	r3, [r2, #4]
 8003aa8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003aac:	6053      	str	r3, [r2, #4]
 8003aae:	4770      	bx	lr
 8003ab0:	40007000 	.word	0x40007000

08003ab4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ab8:	9d06      	ldr	r5, [sp, #24]
 8003aba:	4604      	mov	r4, r0
 8003abc:	460f      	mov	r7, r1
 8003abe:	4616      	mov	r6, r2
 8003ac0:	4698      	mov	r8, r3
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003ac2:	6821      	ldr	r1, [r4, #0]
 8003ac4:	688a      	ldr	r2, [r1, #8]
 8003ac6:	423a      	tst	r2, r7
 8003ac8:	bf14      	ite	ne
 8003aca:	2201      	movne	r2, #1
 8003acc:	2200      	moveq	r2, #0
 8003ace:	42b2      	cmp	r2, r6
 8003ad0:	d102      	bne.n	8003ad8 <QSPI_WaitFlagStateUntilTimeout+0x24>

        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8003ad2:	2000      	movs	r0, #0
}
 8003ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8003ad8:	1c6b      	adds	r3, r5, #1
 8003ada:	d0f3      	beq.n	8003ac4 <QSPI_WaitFlagStateUntilTimeout+0x10>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003adc:	f7fe fd02 	bl	80024e4 <HAL_GetTick>
 8003ae0:	eba0 0008 	sub.w	r0, r0, r8
 8003ae4:	4285      	cmp	r5, r0
 8003ae6:	d301      	bcc.n	8003aec <QSPI_WaitFlagStateUntilTimeout+0x38>
 8003ae8:	2d00      	cmp	r5, #0
 8003aea:	d1ea      	bne.n	8003ac2 <QSPI_WaitFlagStateUntilTimeout+0xe>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003aec:	2304      	movs	r3, #4
 8003aee:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003af2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003af4:	f043 0301 	orr.w	r3, r3, #1
 8003af8:	63e3      	str	r3, [r4, #60]	; 0x3c
 8003afa:	2001      	movs	r0, #1
 8003afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003b00 <HAL_QSPI_Init>:
{
 8003b00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b02:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003b04:	f7fe fcee 	bl	80024e4 <HAL_GetTick>
 8003b08:	4605      	mov	r5, r0
  if(hqspi == NULL)
 8003b0a:	2c00      	cmp	r4, #0
 8003b0c:	d049      	beq.n	8003ba2 <HAL_QSPI_Init+0xa2>
  __HAL_LOCK(hqspi);
 8003b0e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d047      	beq.n	8003ba6 <HAL_QSPI_Init+0xa6>
 8003b16:	2301      	movs	r3, #1
 8003b18:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003b1c:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8003b20:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 8003b24:	b93a      	cbnz	r2, 8003b36 <HAL_QSPI_Init+0x36>
    hqspi->Lock = HAL_UNLOCKED;
 8003b26:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    HAL_QSPI_MspInit(hqspi);
 8003b2a:	4620      	mov	r0, r4
 8003b2c:	f7fe f9ba 	bl	8001ea4 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8003b30:	f241 3388 	movw	r3, #5000	; 0x1388
 8003b34:	6423      	str	r3, [r4, #64]	; 0x40
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003b36:	6820      	ldr	r0, [r4, #0]
 8003b38:	68a1      	ldr	r1, [r4, #8]
 8003b3a:	6802      	ldr	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003b3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003b3e:	3901      	subs	r1, #1
 8003b40:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8003b44:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003b48:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003b4a:	2120      	movs	r1, #32
 8003b4c:	9300      	str	r3, [sp, #0]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	462b      	mov	r3, r5
 8003b52:	4620      	mov	r0, r4
 8003b54:	f7ff ffae 	bl	8003ab4 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8003b58:	b9f0      	cbnz	r0, 8003b98 <HAL_QSPI_Init+0x98>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8003b5a:	6822      	ldr	r2, [r4, #0]
 8003b5c:	6865      	ldr	r5, [r4, #4]
 8003b5e:	6811      	ldr	r1, [r2, #0]
 8003b60:	68e3      	ldr	r3, [r4, #12]
 8003b62:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8003b66:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8003b6a:	f021 0110 	bic.w	r1, r1, #16
 8003b6e:	430b      	orrs	r3, r1
 8003b70:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003b72:	69a1      	ldr	r1, [r4, #24]
 8003b74:	6963      	ldr	r3, [r4, #20]
 8003b76:	6855      	ldr	r5, [r2, #4]
 8003b78:	430b      	orrs	r3, r1
 8003b7a:	6921      	ldr	r1, [r4, #16]
 8003b7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8003b80:	490a      	ldr	r1, [pc, #40]	; (8003bac <HAL_QSPI_Init+0xac>)
 8003b82:	4029      	ands	r1, r5
 8003b84:	430b      	orrs	r3, r1
 8003b86:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8003b88:	6813      	ldr	r3, [r2, #0]
 8003b8a:	f043 0301 	orr.w	r3, r3, #1
 8003b8e:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 8003b90:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003b92:	63e0      	str	r0, [r4, #60]	; 0x3c
    hqspi->State = HAL_QSPI_STATE_READY;
 8003b94:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(hqspi);
 8003b98:	2300      	movs	r3, #0
 8003b9a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 8003b9e:	b003      	add	sp, #12
 8003ba0:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8003ba2:	2001      	movs	r0, #1
 8003ba4:	e7fb      	b.n	8003b9e <HAL_QSPI_Init+0x9e>
  __HAL_LOCK(hqspi);
 8003ba6:	2002      	movs	r0, #2
 8003ba8:	e7f9      	b.n	8003b9e <HAL_QSPI_Init+0x9e>
 8003baa:	bf00      	nop
 8003bac:	ffe0f8fe 	.word	0xffe0f8fe

08003bb0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003bb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003bb2:	4d1e      	ldr	r5, [pc, #120]	; (8003c2c <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8003bb4:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003bb6:	00da      	lsls	r2, r3, #3
{
 8003bb8:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003bba:	d518      	bpl.n	8003bee <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003bbc:	f7ff ff34 	bl	8003a28 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bc0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003bc4:	d123      	bne.n	8003c0e <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003bc6:	2c80      	cmp	r4, #128	; 0x80
 8003bc8:	d929      	bls.n	8003c1e <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003bca:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003bcc:	bf8c      	ite	hi
 8003bce:	2002      	movhi	r0, #2
 8003bd0:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003bd2:	4a17      	ldr	r2, [pc, #92]	; (8003c30 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8003bd4:	6813      	ldr	r3, [r2, #0]
 8003bd6:	f023 0307 	bic.w	r3, r3, #7
 8003bda:	4303      	orrs	r3, r0
 8003bdc:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003bde:	6813      	ldr	r3, [r2, #0]
 8003be0:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8003be4:	1a18      	subs	r0, r3, r0
 8003be6:	bf18      	it	ne
 8003be8:	2001      	movne	r0, #1
 8003bea:	b003      	add	sp, #12
 8003bec:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bee:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bf4:	65ab      	str	r3, [r5, #88]	; 0x58
 8003bf6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bfc:	9301      	str	r3, [sp, #4]
 8003bfe:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8003c00:	f7ff ff12 	bl	8003a28 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8003c04:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003c06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c0a:	65ab      	str	r3, [r5, #88]	; 0x58
 8003c0c:	e7d8      	b.n	8003bc0 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8003c0e:	2c80      	cmp	r4, #128	; 0x80
 8003c10:	d807      	bhi.n	8003c22 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8003c12:	d008      	beq.n	8003c26 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8003c14:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8003c18:	4258      	negs	r0, r3
 8003c1a:	4158      	adcs	r0, r3
 8003c1c:	e7d9      	b.n	8003bd2 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003c1e:	2000      	movs	r0, #0
 8003c20:	e7d7      	b.n	8003bd2 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8003c22:	2003      	movs	r0, #3
 8003c24:	e7d5      	b.n	8003bd2 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c26:	2002      	movs	r0, #2
 8003c28:	e7d3      	b.n	8003bd2 <RCC_SetFlashLatencyFromMSIRange+0x22>
 8003c2a:	bf00      	nop
 8003c2c:	40021000 	.word	0x40021000
 8003c30:	40022000 	.word	0x40022000

08003c34 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c34:	4b22      	ldr	r3, [pc, #136]	; (8003cc0 <HAL_RCC_GetSysClockFreq+0x8c>)
 8003c36:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c38:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c3a:	f012 020c 	ands.w	r2, r2, #12
 8003c3e:	d005      	beq.n	8003c4c <HAL_RCC_GetSysClockFreq+0x18>
 8003c40:	2a0c      	cmp	r2, #12
 8003c42:	d115      	bne.n	8003c70 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c44:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003c48:	2901      	cmp	r1, #1
 8003c4a:	d118      	bne.n	8003c7e <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003c4c:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8003c4e:	481d      	ldr	r0, [pc, #116]	; (8003cc4 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003c50:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c52:	bf55      	itete	pl
 8003c54:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c58:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c5a:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c5e:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8003c62:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c66:	b34a      	cbz	r2, 8003cbc <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003c68:	2a0c      	cmp	r2, #12
 8003c6a:	d009      	beq.n	8003c80 <HAL_RCC_GetSysClockFreq+0x4c>
 8003c6c:	2000      	movs	r0, #0
  return sysclockfreq;
 8003c6e:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003c70:	2a04      	cmp	r2, #4
 8003c72:	d022      	beq.n	8003cba <HAL_RCC_GetSysClockFreq+0x86>
 8003c74:	2a08      	cmp	r2, #8
 8003c76:	4814      	ldr	r0, [pc, #80]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003c78:	bf18      	it	ne
 8003c7a:	2000      	movne	r0, #0
 8003c7c:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003c7e:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c80:	68da      	ldr	r2, [r3, #12]
 8003c82:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8003c86:	2a02      	cmp	r2, #2
 8003c88:	d015      	beq.n	8003cb6 <HAL_RCC_GetSysClockFreq+0x82>
      pllvco = HSE_VALUE;
 8003c8a:	490f      	ldr	r1, [pc, #60]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003c8c:	2a03      	cmp	r2, #3
 8003c8e:	bf08      	it	eq
 8003c90:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c92:	68da      	ldr	r2, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003c94:	68d9      	ldr	r1, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003c9c:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ca0:	f3c2 1202 	ubfx	r2, r2, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ca4:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003ca6:	4348      	muls	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ca8:	3201      	adds	r2, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003caa:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003cac:	fbb0 f0f2 	udiv	r0, r0, r2
    sysclockfreq = pllvco / pllr;
 8003cb0:	fbb0 f0f3 	udiv	r0, r0, r3
 8003cb4:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8003cb6:	4805      	ldr	r0, [pc, #20]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x98>)
 8003cb8:	e7eb      	b.n	8003c92 <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8003cba:	4804      	ldr	r0, [pc, #16]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x98>)
}
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	40021000 	.word	0x40021000
 8003cc4:	08010464 	.word	0x08010464
 8003cc8:	007a1200 	.word	0x007a1200
 8003ccc:	00f42400 	.word	0x00f42400

08003cd0 <HAL_RCC_OscConfig>:
{
 8003cd0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8003cd4:	4605      	mov	r5, r0
 8003cd6:	b908      	cbnz	r0, 8003cdc <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8003cd8:	2001      	movs	r0, #1
 8003cda:	e047      	b.n	8003d6c <HAL_RCC_OscConfig+0x9c>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cdc:	4ca6      	ldr	r4, [pc, #664]	; (8003f78 <HAL_RCC_OscConfig+0x2a8>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003cde:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ce0:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ce2:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003ce4:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ce6:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cea:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003cee:	d573      	bpl.n	8003dd8 <HAL_RCC_OscConfig+0x108>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003cf0:	b11e      	cbz	r6, 8003cfa <HAL_RCC_OscConfig+0x2a>
 8003cf2:	2e0c      	cmp	r6, #12
 8003cf4:	d152      	bne.n	8003d9c <HAL_RCC_OscConfig+0xcc>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003cf6:	2f01      	cmp	r7, #1
 8003cf8:	d150      	bne.n	8003d9c <HAL_RCC_OscConfig+0xcc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003cfa:	6823      	ldr	r3, [r4, #0]
 8003cfc:	0798      	lsls	r0, r3, #30
 8003cfe:	d502      	bpl.n	8003d06 <HAL_RCC_OscConfig+0x36>
 8003d00:	69ab      	ldr	r3, [r5, #24]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d0e8      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003d06:	6823      	ldr	r3, [r4, #0]
 8003d08:	6a28      	ldr	r0, [r5, #32]
 8003d0a:	0719      	lsls	r1, r3, #28
 8003d0c:	bf56      	itet	pl
 8003d0e:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8003d12:	6823      	ldrmi	r3, [r4, #0]
 8003d14:	091b      	lsrpl	r3, r3, #4
 8003d16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d1a:	4283      	cmp	r3, r0
 8003d1c:	d229      	bcs.n	8003d72 <HAL_RCC_OscConfig+0xa2>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d1e:	f7ff ff47 	bl	8003bb0 <RCC_SetFlashLatencyFromMSIRange>
 8003d22:	2800      	cmp	r0, #0
 8003d24:	d1d8      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d26:	6823      	ldr	r3, [r4, #0]
 8003d28:	f043 0308 	orr.w	r3, r3, #8
 8003d2c:	6023      	str	r3, [r4, #0]
 8003d2e:	6823      	ldr	r3, [r4, #0]
 8003d30:	6a2a      	ldr	r2, [r5, #32]
 8003d32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d36:	4313      	orrs	r3, r2
 8003d38:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d3a:	6863      	ldr	r3, [r4, #4]
 8003d3c:	69ea      	ldr	r2, [r5, #28]
 8003d3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d42:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003d46:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d48:	f7ff ff74 	bl	8003c34 <HAL_RCC_GetSysClockFreq>
 8003d4c:	68a3      	ldr	r3, [r4, #8]
 8003d4e:	4a8b      	ldr	r2, [pc, #556]	; (8003f7c <HAL_RCC_OscConfig+0x2ac>)
 8003d50:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003d54:	5cd3      	ldrb	r3, [r2, r3]
 8003d56:	f003 031f 	and.w	r3, r3, #31
 8003d5a:	40d8      	lsrs	r0, r3
 8003d5c:	4b88      	ldr	r3, [pc, #544]	; (8003f80 <HAL_RCC_OscConfig+0x2b0>)
 8003d5e:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8003d60:	4b88      	ldr	r3, [pc, #544]	; (8003f84 <HAL_RCC_OscConfig+0x2b4>)
 8003d62:	6818      	ldr	r0, [r3, #0]
 8003d64:	f7fe f998 	bl	8002098 <HAL_InitTick>
        if(status != HAL_OK)
 8003d68:	2800      	cmp	r0, #0
 8003d6a:	d035      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x108>
}
 8003d6c:	b003      	add	sp, #12
 8003d6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d72:	6823      	ldr	r3, [r4, #0]
 8003d74:	f043 0308 	orr.w	r3, r3, #8
 8003d78:	6023      	str	r3, [r4, #0]
 8003d7a:	6823      	ldr	r3, [r4, #0]
 8003d7c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d80:	4303      	orrs	r3, r0
 8003d82:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d84:	6863      	ldr	r3, [r4, #4]
 8003d86:	69ea      	ldr	r2, [r5, #28]
 8003d88:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d8c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003d90:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d92:	f7ff ff0d 	bl	8003bb0 <RCC_SetFlashLatencyFromMSIRange>
 8003d96:	2800      	cmp	r0, #0
 8003d98:	d0d6      	beq.n	8003d48 <HAL_RCC_OscConfig+0x78>
 8003d9a:	e79d      	b.n	8003cd8 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003d9c:	69ab      	ldr	r3, [r5, #24]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d036      	beq.n	8003e10 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_MSI_ENABLE();
 8003da2:	6823      	ldr	r3, [r4, #0]
 8003da4:	f043 0301 	orr.w	r3, r3, #1
 8003da8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003daa:	f7fe fb9b 	bl	80024e4 <HAL_GetTick>
 8003dae:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003db0:	6823      	ldr	r3, [r4, #0]
 8003db2:	079a      	lsls	r2, r3, #30
 8003db4:	d524      	bpl.n	8003e00 <HAL_RCC_OscConfig+0x130>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003db6:	6823      	ldr	r3, [r4, #0]
 8003db8:	f043 0308 	orr.w	r3, r3, #8
 8003dbc:	6023      	str	r3, [r4, #0]
 8003dbe:	6823      	ldr	r3, [r4, #0]
 8003dc0:	6a2a      	ldr	r2, [r5, #32]
 8003dc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003dca:	6863      	ldr	r3, [r4, #4]
 8003dcc:	69ea      	ldr	r2, [r5, #28]
 8003dce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dd2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003dd6:	6063      	str	r3, [r4, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dd8:	682b      	ldr	r3, [r5, #0]
 8003dda:	07d8      	lsls	r0, r3, #31
 8003ddc:	d429      	bmi.n	8003e32 <HAL_RCC_OscConfig+0x162>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dde:	682b      	ldr	r3, [r5, #0]
 8003de0:	0799      	lsls	r1, r3, #30
 8003de2:	d467      	bmi.n	8003eb4 <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003de4:	682b      	ldr	r3, [r5, #0]
 8003de6:	0718      	lsls	r0, r3, #28
 8003de8:	f100 809c 	bmi.w	8003f24 <HAL_RCC_OscConfig+0x254>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dec:	682b      	ldr	r3, [r5, #0]
 8003dee:	0759      	lsls	r1, r3, #29
 8003df0:	f100 80ca 	bmi.w	8003f88 <HAL_RCC_OscConfig+0x2b8>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003df4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8003df6:	2800      	cmp	r0, #0
 8003df8:	f040 8133 	bne.w	8004062 <HAL_RCC_OscConfig+0x392>
  return HAL_OK;
 8003dfc:	2000      	movs	r0, #0
 8003dfe:	e7b5      	b.n	8003d6c <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e00:	f7fe fb70 	bl	80024e4 <HAL_GetTick>
 8003e04:	eba0 0008 	sub.w	r0, r0, r8
 8003e08:	2802      	cmp	r0, #2
 8003e0a:	d9d1      	bls.n	8003db0 <HAL_RCC_OscConfig+0xe0>
            return HAL_TIMEOUT;
 8003e0c:	2003      	movs	r0, #3
 8003e0e:	e7ad      	b.n	8003d6c <HAL_RCC_OscConfig+0x9c>
        __HAL_RCC_MSI_DISABLE();
 8003e10:	6823      	ldr	r3, [r4, #0]
 8003e12:	f023 0301 	bic.w	r3, r3, #1
 8003e16:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003e18:	f7fe fb64 	bl	80024e4 <HAL_GetTick>
 8003e1c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e1e:	6823      	ldr	r3, [r4, #0]
 8003e20:	079b      	lsls	r3, r3, #30
 8003e22:	d5d9      	bpl.n	8003dd8 <HAL_RCC_OscConfig+0x108>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e24:	f7fe fb5e 	bl	80024e4 <HAL_GetTick>
 8003e28:	eba0 0008 	sub.w	r0, r0, r8
 8003e2c:	2802      	cmp	r0, #2
 8003e2e:	d9f6      	bls.n	8003e1e <HAL_RCC_OscConfig+0x14e>
 8003e30:	e7ec      	b.n	8003e0c <HAL_RCC_OscConfig+0x13c>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003e32:	2e08      	cmp	r6, #8
 8003e34:	d003      	beq.n	8003e3e <HAL_RCC_OscConfig+0x16e>
 8003e36:	2e0c      	cmp	r6, #12
 8003e38:	d108      	bne.n	8003e4c <HAL_RCC_OscConfig+0x17c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003e3a:	2f03      	cmp	r7, #3
 8003e3c:	d106      	bne.n	8003e4c <HAL_RCC_OscConfig+0x17c>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e3e:	6823      	ldr	r3, [r4, #0]
 8003e40:	039a      	lsls	r2, r3, #14
 8003e42:	d5cc      	bpl.n	8003dde <HAL_RCC_OscConfig+0x10e>
 8003e44:	686b      	ldr	r3, [r5, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d1c9      	bne.n	8003dde <HAL_RCC_OscConfig+0x10e>
 8003e4a:	e745      	b.n	8003cd8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e4c:	686b      	ldr	r3, [r5, #4]
 8003e4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e52:	d110      	bne.n	8003e76 <HAL_RCC_OscConfig+0x1a6>
 8003e54:	6823      	ldr	r3, [r4, #0]
 8003e56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e5a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003e5c:	f7fe fb42 	bl	80024e4 <HAL_GetTick>
 8003e60:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e62:	6823      	ldr	r3, [r4, #0]
 8003e64:	039b      	lsls	r3, r3, #14
 8003e66:	d4ba      	bmi.n	8003dde <HAL_RCC_OscConfig+0x10e>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e68:	f7fe fb3c 	bl	80024e4 <HAL_GetTick>
 8003e6c:	eba0 0008 	sub.w	r0, r0, r8
 8003e70:	2864      	cmp	r0, #100	; 0x64
 8003e72:	d9f6      	bls.n	8003e62 <HAL_RCC_OscConfig+0x192>
 8003e74:	e7ca      	b.n	8003e0c <HAL_RCC_OscConfig+0x13c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e76:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e7a:	d104      	bne.n	8003e86 <HAL_RCC_OscConfig+0x1b6>
 8003e7c:	6823      	ldr	r3, [r4, #0]
 8003e7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e82:	6023      	str	r3, [r4, #0]
 8003e84:	e7e6      	b.n	8003e54 <HAL_RCC_OscConfig+0x184>
 8003e86:	6822      	ldr	r2, [r4, #0]
 8003e88:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003e8c:	6022      	str	r2, [r4, #0]
 8003e8e:	6822      	ldr	r2, [r4, #0]
 8003e90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e94:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1e0      	bne.n	8003e5c <HAL_RCC_OscConfig+0x18c>
        tickstart = HAL_GetTick();
 8003e9a:	f7fe fb23 	bl	80024e4 <HAL_GetTick>
 8003e9e:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ea0:	6823      	ldr	r3, [r4, #0]
 8003ea2:	0398      	lsls	r0, r3, #14
 8003ea4:	d59b      	bpl.n	8003dde <HAL_RCC_OscConfig+0x10e>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ea6:	f7fe fb1d 	bl	80024e4 <HAL_GetTick>
 8003eaa:	eba0 0008 	sub.w	r0, r0, r8
 8003eae:	2864      	cmp	r0, #100	; 0x64
 8003eb0:	d9f6      	bls.n	8003ea0 <HAL_RCC_OscConfig+0x1d0>
 8003eb2:	e7ab      	b.n	8003e0c <HAL_RCC_OscConfig+0x13c>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003eb4:	2e04      	cmp	r6, #4
 8003eb6:	d003      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x1f0>
 8003eb8:	2e0c      	cmp	r6, #12
 8003eba:	d110      	bne.n	8003ede <HAL_RCC_OscConfig+0x20e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003ebc:	2f02      	cmp	r7, #2
 8003ebe:	d10e      	bne.n	8003ede <HAL_RCC_OscConfig+0x20e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ec0:	6823      	ldr	r3, [r4, #0]
 8003ec2:	0559      	lsls	r1, r3, #21
 8003ec4:	d503      	bpl.n	8003ece <HAL_RCC_OscConfig+0x1fe>
 8003ec6:	68eb      	ldr	r3, [r5, #12]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f43f af05 	beq.w	8003cd8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ece:	6863      	ldr	r3, [r4, #4]
 8003ed0:	692a      	ldr	r2, [r5, #16]
 8003ed2:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8003ed6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003eda:	6063      	str	r3, [r4, #4]
 8003edc:	e782      	b.n	8003de4 <HAL_RCC_OscConfig+0x114>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ede:	68eb      	ldr	r3, [r5, #12]
 8003ee0:	b17b      	cbz	r3, 8003f02 <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_HSI_ENABLE();
 8003ee2:	6823      	ldr	r3, [r4, #0]
 8003ee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ee8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003eea:	f7fe fafb 	bl	80024e4 <HAL_GetTick>
 8003eee:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ef0:	6823      	ldr	r3, [r4, #0]
 8003ef2:	055a      	lsls	r2, r3, #21
 8003ef4:	d4eb      	bmi.n	8003ece <HAL_RCC_OscConfig+0x1fe>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ef6:	f7fe faf5 	bl	80024e4 <HAL_GetTick>
 8003efa:	1bc0      	subs	r0, r0, r7
 8003efc:	2802      	cmp	r0, #2
 8003efe:	d9f7      	bls.n	8003ef0 <HAL_RCC_OscConfig+0x220>
 8003f00:	e784      	b.n	8003e0c <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_DISABLE();
 8003f02:	6823      	ldr	r3, [r4, #0]
 8003f04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f08:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003f0a:	f7fe faeb 	bl	80024e4 <HAL_GetTick>
 8003f0e:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f10:	6823      	ldr	r3, [r4, #0]
 8003f12:	055b      	lsls	r3, r3, #21
 8003f14:	f57f af66 	bpl.w	8003de4 <HAL_RCC_OscConfig+0x114>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f18:	f7fe fae4 	bl	80024e4 <HAL_GetTick>
 8003f1c:	1bc0      	subs	r0, r0, r7
 8003f1e:	2802      	cmp	r0, #2
 8003f20:	d9f6      	bls.n	8003f10 <HAL_RCC_OscConfig+0x240>
 8003f22:	e773      	b.n	8003e0c <HAL_RCC_OscConfig+0x13c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f24:	696b      	ldr	r3, [r5, #20]
 8003f26:	b19b      	cbz	r3, 8003f50 <HAL_RCC_OscConfig+0x280>
      __HAL_RCC_LSI_ENABLE();
 8003f28:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003f2c:	f043 0301 	orr.w	r3, r3, #1
 8003f30:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003f34:	f7fe fad6 	bl	80024e4 <HAL_GetTick>
 8003f38:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f3a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003f3e:	079a      	lsls	r2, r3, #30
 8003f40:	f53f af54 	bmi.w	8003dec <HAL_RCC_OscConfig+0x11c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f44:	f7fe face 	bl	80024e4 <HAL_GetTick>
 8003f48:	1bc0      	subs	r0, r0, r7
 8003f4a:	2802      	cmp	r0, #2
 8003f4c:	d9f5      	bls.n	8003f3a <HAL_RCC_OscConfig+0x26a>
 8003f4e:	e75d      	b.n	8003e0c <HAL_RCC_OscConfig+0x13c>
      __HAL_RCC_LSI_DISABLE();
 8003f50:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003f54:	f023 0301 	bic.w	r3, r3, #1
 8003f58:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003f5c:	f7fe fac2 	bl	80024e4 <HAL_GetTick>
 8003f60:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f62:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003f66:	079b      	lsls	r3, r3, #30
 8003f68:	f57f af40 	bpl.w	8003dec <HAL_RCC_OscConfig+0x11c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f6c:	f7fe faba 	bl	80024e4 <HAL_GetTick>
 8003f70:	1bc0      	subs	r0, r0, r7
 8003f72:	2802      	cmp	r0, #2
 8003f74:	d9f5      	bls.n	8003f62 <HAL_RCC_OscConfig+0x292>
 8003f76:	e749      	b.n	8003e0c <HAL_RCC_OscConfig+0x13c>
 8003f78:	40021000 	.word	0x40021000
 8003f7c:	0801044c 	.word	0x0801044c
 8003f80:	20000000 	.word	0x20000000
 8003f84:	20000008 	.word	0x20000008
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003f88:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f8a:	00d8      	lsls	r0, r3, #3
 8003f8c:	d429      	bmi.n	8003fe2 <HAL_RCC_OscConfig+0x312>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f94:	65a3      	str	r3, [r4, #88]	; 0x58
 8003f96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f9c:	9301      	str	r3, [sp, #4]
 8003f9e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003fa0:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fa4:	4f79      	ldr	r7, [pc, #484]	; (800418c <HAL_RCC_OscConfig+0x4bc>)
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	05d9      	lsls	r1, r3, #23
 8003faa:	d51d      	bpl.n	8003fe8 <HAL_RCC_OscConfig+0x318>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fac:	68ab      	ldr	r3, [r5, #8]
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d12b      	bne.n	800400a <HAL_RCC_OscConfig+0x33a>
 8003fb2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003fb6:	f043 0301 	orr.w	r3, r3, #1
 8003fba:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8003fbe:	f7fe fa91 	bl	80024e4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fc2:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003fc6:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fc8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003fcc:	079b      	lsls	r3, r3, #30
 8003fce:	d542      	bpl.n	8004056 <HAL_RCC_OscConfig+0x386>
    if(pwrclkchanged == SET)
 8003fd0:	f1b8 0f00 	cmp.w	r8, #0
 8003fd4:	f43f af0e 	beq.w	8003df4 <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fd8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003fda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fde:	65a3      	str	r3, [r4, #88]	; 0x58
 8003fe0:	e708      	b.n	8003df4 <HAL_RCC_OscConfig+0x124>
    FlagStatus       pwrclkchanged = RESET;
 8003fe2:	f04f 0800 	mov.w	r8, #0
 8003fe6:	e7dd      	b.n	8003fa4 <HAL_RCC_OscConfig+0x2d4>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fee:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8003ff0:	f7fe fa78 	bl	80024e4 <HAL_GetTick>
 8003ff4:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	05da      	lsls	r2, r3, #23
 8003ffa:	d4d7      	bmi.n	8003fac <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ffc:	f7fe fa72 	bl	80024e4 <HAL_GetTick>
 8004000:	eba0 0009 	sub.w	r0, r0, r9
 8004004:	2802      	cmp	r0, #2
 8004006:	d9f6      	bls.n	8003ff6 <HAL_RCC_OscConfig+0x326>
 8004008:	e700      	b.n	8003e0c <HAL_RCC_OscConfig+0x13c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800400a:	2b05      	cmp	r3, #5
 800400c:	d106      	bne.n	800401c <HAL_RCC_OscConfig+0x34c>
 800400e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004012:	f043 0304 	orr.w	r3, r3, #4
 8004016:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800401a:	e7ca      	b.n	8003fb2 <HAL_RCC_OscConfig+0x2e2>
 800401c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8004020:	f022 0201 	bic.w	r2, r2, #1
 8004024:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8004028:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800402c:	f022 0204 	bic.w	r2, r2, #4
 8004030:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1c2      	bne.n	8003fbe <HAL_RCC_OscConfig+0x2ee>
      tickstart = HAL_GetTick();
 8004038:	f7fe fa54 	bl	80024e4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800403c:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004040:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004042:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004046:	0798      	lsls	r0, r3, #30
 8004048:	d5c2      	bpl.n	8003fd0 <HAL_RCC_OscConfig+0x300>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800404a:	f7fe fa4b 	bl	80024e4 <HAL_GetTick>
 800404e:	1bc0      	subs	r0, r0, r7
 8004050:	4548      	cmp	r0, r9
 8004052:	d9f6      	bls.n	8004042 <HAL_RCC_OscConfig+0x372>
 8004054:	e6da      	b.n	8003e0c <HAL_RCC_OscConfig+0x13c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004056:	f7fe fa45 	bl	80024e4 <HAL_GetTick>
 800405a:	1bc0      	subs	r0, r0, r7
 800405c:	4548      	cmp	r0, r9
 800405e:	d9b3      	bls.n	8003fc8 <HAL_RCC_OscConfig+0x2f8>
 8004060:	e6d4      	b.n	8003e0c <HAL_RCC_OscConfig+0x13c>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004062:	2e0c      	cmp	r6, #12
 8004064:	d05c      	beq.n	8004120 <HAL_RCC_OscConfig+0x450>
        __HAL_RCC_PLL_DISABLE();
 8004066:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004068:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800406a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800406e:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004070:	d13b      	bne.n	80040ea <HAL_RCC_OscConfig+0x41a>
        tickstart = HAL_GetTick();
 8004072:	f7fe fa37 	bl	80024e4 <HAL_GetTick>
 8004076:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004078:	6823      	ldr	r3, [r4, #0]
 800407a:	0199      	lsls	r1, r3, #6
 800407c:	d42f      	bmi.n	80040de <HAL_RCC_OscConfig+0x40e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800407e:	68e2      	ldr	r2, [r4, #12]
 8004080:	4b43      	ldr	r3, [pc, #268]	; (8004190 <HAL_RCC_OscConfig+0x4c0>)
 8004082:	4013      	ands	r3, r2
 8004084:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8004086:	4313      	orrs	r3, r2
 8004088:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800408a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800408e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8004090:	3a01      	subs	r2, #1
 8004092:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8004096:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8004098:	0912      	lsrs	r2, r2, #4
 800409a:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 800409e:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80040a0:	0852      	lsrs	r2, r2, #1
 80040a2:	3a01      	subs	r2, #1
 80040a4:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80040a8:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80040aa:	0852      	lsrs	r2, r2, #1
 80040ac:	3a01      	subs	r2, #1
 80040ae:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80040b2:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 80040b4:	6823      	ldr	r3, [r4, #0]
 80040b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040ba:	6023      	str	r3, [r4, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040bc:	68e3      	ldr	r3, [r4, #12]
 80040be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040c2:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80040c4:	f7fe fa0e 	bl	80024e4 <HAL_GetTick>
 80040c8:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040ca:	6823      	ldr	r3, [r4, #0]
 80040cc:	019a      	lsls	r2, r3, #6
 80040ce:	f53f ae95 	bmi.w	8003dfc <HAL_RCC_OscConfig+0x12c>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040d2:	f7fe fa07 	bl	80024e4 <HAL_GetTick>
 80040d6:	1b40      	subs	r0, r0, r5
 80040d8:	2802      	cmp	r0, #2
 80040da:	d9f6      	bls.n	80040ca <HAL_RCC_OscConfig+0x3fa>
 80040dc:	e696      	b.n	8003e0c <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040de:	f7fe fa01 	bl	80024e4 <HAL_GetTick>
 80040e2:	1b80      	subs	r0, r0, r6
 80040e4:	2802      	cmp	r0, #2
 80040e6:	d9c7      	bls.n	8004078 <HAL_RCC_OscConfig+0x3a8>
 80040e8:	e690      	b.n	8003e0c <HAL_RCC_OscConfig+0x13c>
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80040ea:	6823      	ldr	r3, [r4, #0]
 80040ec:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80040f0:	bf02      	ittt	eq
 80040f2:	68e3      	ldreq	r3, [r4, #12]
 80040f4:	f023 0303 	biceq.w	r3, r3, #3
 80040f8:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80040fa:	68e3      	ldr	r3, [r4, #12]
 80040fc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004100:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004104:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8004106:	f7fe f9ed 	bl	80024e4 <HAL_GetTick>
 800410a:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800410c:	6823      	ldr	r3, [r4, #0]
 800410e:	019b      	lsls	r3, r3, #6
 8004110:	f57f ae74 	bpl.w	8003dfc <HAL_RCC_OscConfig+0x12c>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004114:	f7fe f9e6 	bl	80024e4 <HAL_GetTick>
 8004118:	1b40      	subs	r0, r0, r5
 800411a:	2802      	cmp	r0, #2
 800411c:	d9f6      	bls.n	800410c <HAL_RCC_OscConfig+0x43c>
 800411e:	e675      	b.n	8003e0c <HAL_RCC_OscConfig+0x13c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004120:	2801      	cmp	r0, #1
 8004122:	f43f ae23 	beq.w	8003d6c <HAL_RCC_OscConfig+0x9c>
        pll_config = RCC->PLLCFGR;
 8004126:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004128:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800412a:	f003 0103 	and.w	r1, r3, #3
 800412e:	4291      	cmp	r1, r2
 8004130:	f47f add2 	bne.w	8003cd8 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004134:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8004136:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800413a:	3901      	subs	r1, #1
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800413c:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8004140:	f47f adca 	bne.w	8003cd8 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004144:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8004146:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800414a:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 800414e:	f47f adc3 	bne.w	8003cd8 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004152:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8004154:	3a07      	subs	r2, #7
 8004156:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 800415a:	bf18      	it	ne
 800415c:	2201      	movne	r2, #1
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800415e:	4291      	cmp	r1, r2
 8004160:	f47f adba 	bne.w	8003cd8 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004164:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8004166:	0852      	lsrs	r2, r2, #1
 8004168:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 800416c:	3a01      	subs	r2, #1
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800416e:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8004172:	f47f adb1 	bne.w	8003cd8 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004176:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8004178:	0852      	lsrs	r2, r2, #1
 800417a:	3a01      	subs	r2, #1
 800417c:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004180:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
    return HAL_ERROR;
 8004184:	bf14      	ite	ne
 8004186:	2001      	movne	r0, #1
 8004188:	2000      	moveq	r0, #0
 800418a:	e5ef      	b.n	8003d6c <HAL_RCC_OscConfig+0x9c>
 800418c:	40007000 	.word	0x40007000
 8004190:	f99d808c 	.word	0xf99d808c

08004194 <HAL_RCC_ClockConfig>:
{
 8004194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004198:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 800419a:	4604      	mov	r4, r0
 800419c:	b910      	cbnz	r0, 80041a4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800419e:	2001      	movs	r0, #1
 80041a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041a4:	4a41      	ldr	r2, [pc, #260]	; (80042ac <HAL_RCC_ClockConfig+0x118>)
 80041a6:	6813      	ldr	r3, [r2, #0]
 80041a8:	f003 0307 	and.w	r3, r3, #7
 80041ac:	428b      	cmp	r3, r1
 80041ae:	d32a      	bcc.n	8004206 <HAL_RCC_ClockConfig+0x72>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041b0:	6823      	ldr	r3, [r4, #0]
 80041b2:	07d9      	lsls	r1, r3, #31
 80041b4:	d432      	bmi.n	800421c <HAL_RCC_ClockConfig+0x88>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041b6:	6821      	ldr	r1, [r4, #0]
 80041b8:	078a      	lsls	r2, r1, #30
 80041ba:	d45c      	bmi.n	8004276 <HAL_RCC_ClockConfig+0xe2>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041bc:	4a3b      	ldr	r2, [pc, #236]	; (80042ac <HAL_RCC_ClockConfig+0x118>)
 80041be:	6813      	ldr	r3, [r2, #0]
 80041c0:	f003 0307 	and.w	r3, r3, #7
 80041c4:	429e      	cmp	r6, r3
 80041c6:	d35e      	bcc.n	8004286 <HAL_RCC_ClockConfig+0xf2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041c8:	f011 0f04 	tst.w	r1, #4
 80041cc:	4d38      	ldr	r5, [pc, #224]	; (80042b0 <HAL_RCC_ClockConfig+0x11c>)
 80041ce:	d165      	bne.n	800429c <HAL_RCC_ClockConfig+0x108>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041d0:	070b      	lsls	r3, r1, #28
 80041d2:	d506      	bpl.n	80041e2 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041d4:	68ab      	ldr	r3, [r5, #8]
 80041d6:	6922      	ldr	r2, [r4, #16]
 80041d8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80041dc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80041e0:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041e2:	f7ff fd27 	bl	8003c34 <HAL_RCC_GetSysClockFreq>
 80041e6:	68ab      	ldr	r3, [r5, #8]
 80041e8:	4a32      	ldr	r2, [pc, #200]	; (80042b4 <HAL_RCC_ClockConfig+0x120>)
 80041ea:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 80041ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041f2:	5cd3      	ldrb	r3, [r2, r3]
 80041f4:	f003 031f 	and.w	r3, r3, #31
 80041f8:	40d8      	lsrs	r0, r3
 80041fa:	4b2f      	ldr	r3, [pc, #188]	; (80042b8 <HAL_RCC_ClockConfig+0x124>)
 80041fc:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 80041fe:	4b2f      	ldr	r3, [pc, #188]	; (80042bc <HAL_RCC_ClockConfig+0x128>)
 8004200:	6818      	ldr	r0, [r3, #0]
 8004202:	f7fd bf49 	b.w	8002098 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004206:	6813      	ldr	r3, [r2, #0]
 8004208:	f023 0307 	bic.w	r3, r3, #7
 800420c:	430b      	orrs	r3, r1
 800420e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004210:	6813      	ldr	r3, [r2, #0]
 8004212:	f003 0307 	and.w	r3, r3, #7
 8004216:	4299      	cmp	r1, r3
 8004218:	d1c1      	bne.n	800419e <HAL_RCC_ClockConfig+0xa>
 800421a:	e7c9      	b.n	80041b0 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800421c:	6862      	ldr	r2, [r4, #4]
 800421e:	4d24      	ldr	r5, [pc, #144]	; (80042b0 <HAL_RCC_ClockConfig+0x11c>)
 8004220:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004222:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004224:	d11b      	bne.n	800425e <HAL_RCC_ClockConfig+0xca>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004226:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800422a:	d0b8      	beq.n	800419e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800422c:	68ab      	ldr	r3, [r5, #8]
 800422e:	f023 0303 	bic.w	r3, r3, #3
 8004232:	4313      	orrs	r3, r2
 8004234:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8004236:	f7fe f955 	bl	80024e4 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800423a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800423e:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004240:	68ab      	ldr	r3, [r5, #8]
 8004242:	6862      	ldr	r2, [r4, #4]
 8004244:	f003 030c 	and.w	r3, r3, #12
 8004248:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800424c:	d0b3      	beq.n	80041b6 <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800424e:	f7fe f949 	bl	80024e4 <HAL_GetTick>
 8004252:	1bc0      	subs	r0, r0, r7
 8004254:	4540      	cmp	r0, r8
 8004256:	d9f3      	bls.n	8004240 <HAL_RCC_ClockConfig+0xac>
        return HAL_TIMEOUT;
 8004258:	2003      	movs	r0, #3
}
 800425a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800425e:	2a02      	cmp	r2, #2
 8004260:	d102      	bne.n	8004268 <HAL_RCC_ClockConfig+0xd4>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004262:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004266:	e7e0      	b.n	800422a <HAL_RCC_ClockConfig+0x96>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004268:	b912      	cbnz	r2, 8004270 <HAL_RCC_ClockConfig+0xdc>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800426a:	f013 0f02 	tst.w	r3, #2
 800426e:	e7dc      	b.n	800422a <HAL_RCC_ClockConfig+0x96>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004270:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004274:	e7d9      	b.n	800422a <HAL_RCC_ClockConfig+0x96>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004276:	4a0e      	ldr	r2, [pc, #56]	; (80042b0 <HAL_RCC_ClockConfig+0x11c>)
 8004278:	68a0      	ldr	r0, [r4, #8]
 800427a:	6893      	ldr	r3, [r2, #8]
 800427c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004280:	4303      	orrs	r3, r0
 8004282:	6093      	str	r3, [r2, #8]
 8004284:	e79a      	b.n	80041bc <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004286:	6813      	ldr	r3, [r2, #0]
 8004288:	f023 0307 	bic.w	r3, r3, #7
 800428c:	4333      	orrs	r3, r6
 800428e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004290:	6813      	ldr	r3, [r2, #0]
 8004292:	f003 0307 	and.w	r3, r3, #7
 8004296:	429e      	cmp	r6, r3
 8004298:	d181      	bne.n	800419e <HAL_RCC_ClockConfig+0xa>
 800429a:	e795      	b.n	80041c8 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800429c:	68ab      	ldr	r3, [r5, #8]
 800429e:	68e2      	ldr	r2, [r4, #12]
 80042a0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80042a4:	4313      	orrs	r3, r2
 80042a6:	60ab      	str	r3, [r5, #8]
 80042a8:	e792      	b.n	80041d0 <HAL_RCC_ClockConfig+0x3c>
 80042aa:	bf00      	nop
 80042ac:	40022000 	.word	0x40022000
 80042b0:	40021000 	.word	0x40021000
 80042b4:	0801044c 	.word	0x0801044c
 80042b8:	20000000 	.word	0x20000000
 80042bc:	20000008 	.word	0x20000008

080042c0 <HAL_RCC_GetHCLKFreq>:
}
 80042c0:	4b01      	ldr	r3, [pc, #4]	; (80042c8 <HAL_RCC_GetHCLKFreq+0x8>)
 80042c2:	6818      	ldr	r0, [r3, #0]
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	20000000 	.word	0x20000000

080042cc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80042cc:	4b05      	ldr	r3, [pc, #20]	; (80042e4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80042ce:	4a06      	ldr	r2, [pc, #24]	; (80042e8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80042d6:	5cd3      	ldrb	r3, [r2, r3]
 80042d8:	4a04      	ldr	r2, [pc, #16]	; (80042ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80042da:	6810      	ldr	r0, [r2, #0]
 80042dc:	f003 031f 	and.w	r3, r3, #31
}
 80042e0:	40d8      	lsrs	r0, r3
 80042e2:	4770      	bx	lr
 80042e4:	40021000 	.word	0x40021000
 80042e8:	0801045c 	.word	0x0801045c
 80042ec:	20000000 	.word	0x20000000

080042f0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80042f0:	4b05      	ldr	r3, [pc, #20]	; (8004308 <HAL_RCC_GetPCLK2Freq+0x18>)
 80042f2:	4a06      	ldr	r2, [pc, #24]	; (800430c <HAL_RCC_GetPCLK2Freq+0x1c>)
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80042fa:	5cd3      	ldrb	r3, [r2, r3]
 80042fc:	4a04      	ldr	r2, [pc, #16]	; (8004310 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042fe:	6810      	ldr	r0, [r2, #0]
 8004300:	f003 031f 	and.w	r3, r3, #31
}
 8004304:	40d8      	lsrs	r0, r3
 8004306:	4770      	bx	lr
 8004308:	40021000 	.word	0x40021000
 800430c:	0801045c 	.word	0x0801045c
 8004310:	20000000 	.word	0x20000000

08004314 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004314:	230f      	movs	r3, #15
 8004316:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004318:	4b0b      	ldr	r3, [pc, #44]	; (8004348 <HAL_RCC_GetClockConfig+0x34>)
 800431a:	689a      	ldr	r2, [r3, #8]
 800431c:	f002 0203 	and.w	r2, r2, #3
 8004320:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004322:	689a      	ldr	r2, [r3, #8]
 8004324:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8004328:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800432a:	689a      	ldr	r2, [r3, #8]
 800432c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8004330:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	08db      	lsrs	r3, r3, #3
 8004336:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800433a:	6103      	str	r3, [r0, #16]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800433c:	4b03      	ldr	r3, [pc, #12]	; (800434c <HAL_RCC_GetClockConfig+0x38>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0307 	and.w	r3, r3, #7
 8004344:	600b      	str	r3, [r1, #0]
 8004346:	4770      	bx	lr
 8004348:	40021000 	.word	0x40021000
 800434c:	40022000 	.word	0x40022000

08004350 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004352:	4b45      	ldr	r3, [pc, #276]	; (8004468 <RCCEx_PLLSAI1_Config+0x118>)
 8004354:	68da      	ldr	r2, [r3, #12]
 8004356:	f012 0f03 	tst.w	r2, #3
{
 800435a:	4605      	mov	r5, r0
 800435c:	460e      	mov	r6, r1
 800435e:	461c      	mov	r4, r3
 8004360:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004362:	d02a      	beq.n	80043ba <RCCEx_PLLSAI1_Config+0x6a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004364:	68da      	ldr	r2, [r3, #12]
 8004366:	f002 0203 	and.w	r2, r2, #3
 800436a:	4282      	cmp	r2, r0
 800436c:	d13c      	bne.n	80043e8 <RCCEx_PLLSAI1_Config+0x98>
       ||
 800436e:	2a00      	cmp	r2, #0
 8004370:	d03a      	beq.n	80043e8 <RCCEx_PLLSAI1_Config+0x98>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004372:	68db      	ldr	r3, [r3, #12]
       ||
 8004374:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004376:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800437a:	3301      	adds	r3, #1
       ||
 800437c:	4293      	cmp	r3, r2
 800437e:	d133      	bne.n	80043e8 <RCCEx_PLLSAI1_Config+0x98>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004380:	6823      	ldr	r3, [r4, #0]
 8004382:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004386:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004388:	f7fe f8ac 	bl	80024e4 <HAL_GetTick>
 800438c:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800438e:	6823      	ldr	r3, [r4, #0]
 8004390:	011a      	lsls	r2, r3, #4
 8004392:	d432      	bmi.n	80043fa <RCCEx_PLLSAI1_Config+0xaa>
 8004394:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004396:	2e00      	cmp	r6, #0
 8004398:	d036      	beq.n	8004408 <RCCEx_PLLSAI1_Config+0xb8>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800439a:	2e01      	cmp	r6, #1
 800439c:	d150      	bne.n	8004440 <RCCEx_PLLSAI1_Config+0xf0>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800439e:	6922      	ldr	r2, [r4, #16]
 80043a0:	6928      	ldr	r0, [r5, #16]
 80043a2:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80043a6:	0840      	lsrs	r0, r0, #1
 80043a8:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80043ac:	3801      	subs	r0, #1
 80043ae:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 80043b2:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 80043b6:	6122      	str	r2, [r4, #16]
 80043b8:	e032      	b.n	8004420 <RCCEx_PLLSAI1_Config+0xd0>
    switch(PllSai1->PLLSAI1Source)
 80043ba:	2802      	cmp	r0, #2
 80043bc:	d010      	beq.n	80043e0 <RCCEx_PLLSAI1_Config+0x90>
 80043be:	2803      	cmp	r0, #3
 80043c0:	d014      	beq.n	80043ec <RCCEx_PLLSAI1_Config+0x9c>
 80043c2:	2801      	cmp	r0, #1
 80043c4:	d110      	bne.n	80043e8 <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	079f      	lsls	r7, r3, #30
 80043ca:	d538      	bpl.n	800443e <RCCEx_PLLSAI1_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80043cc:	68e3      	ldr	r3, [r4, #12]
 80043ce:	686a      	ldr	r2, [r5, #4]
 80043d0:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 80043d4:	3a01      	subs	r2, #1
 80043d6:	4318      	orrs	r0, r3
 80043d8:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80043dc:	60e0      	str	r0, [r4, #12]
 80043de:	e7cf      	b.n	8004380 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80043e6:	d1f1      	bne.n	80043cc <RCCEx_PLLSAI1_Config+0x7c>
 80043e8:	2001      	movs	r0, #1
 80043ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	0391      	lsls	r1, r2, #14
 80043f0:	d4ec      	bmi.n	80043cc <RCCEx_PLLSAI1_Config+0x7c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80043f8:	e7f5      	b.n	80043e6 <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043fa:	f7fe f873 	bl	80024e4 <HAL_GetTick>
 80043fe:	1bc0      	subs	r0, r0, r7
 8004400:	2802      	cmp	r0, #2
 8004402:	d9c4      	bls.n	800438e <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 8004404:	2003      	movs	r0, #3
 8004406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004408:	6921      	ldr	r1, [r4, #16]
 800440a:	68eb      	ldr	r3, [r5, #12]
 800440c:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 8004410:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8004414:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8004418:	091b      	lsrs	r3, r3, #4
 800441a:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 800441e:	6121      	str	r1, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004420:	6823      	ldr	r3, [r4, #0]
 8004422:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004426:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004428:	f7fe f85c 	bl	80024e4 <HAL_GetTick>
 800442c:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800442e:	6823      	ldr	r3, [r4, #0]
 8004430:	011b      	lsls	r3, r3, #4
 8004432:	d513      	bpl.n	800445c <RCCEx_PLLSAI1_Config+0x10c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004434:	6923      	ldr	r3, [r4, #16]
 8004436:	69aa      	ldr	r2, [r5, #24]
 8004438:	4313      	orrs	r3, r2
 800443a:	6123      	str	r3, [r4, #16]
 800443c:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 800443e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004440:	6923      	ldr	r3, [r4, #16]
 8004442:	6968      	ldr	r0, [r5, #20]
 8004444:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004448:	0840      	lsrs	r0, r0, #1
 800444a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800444e:	3801      	subs	r0, #1
 8004450:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8004454:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8004458:	6123      	str	r3, [r4, #16]
 800445a:	e7e1      	b.n	8004420 <RCCEx_PLLSAI1_Config+0xd0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800445c:	f7fe f842 	bl	80024e4 <HAL_GetTick>
 8004460:	1b80      	subs	r0, r0, r6
 8004462:	2802      	cmp	r0, #2
 8004464:	d9e3      	bls.n	800442e <RCCEx_PLLSAI1_Config+0xde>
 8004466:	e7cd      	b.n	8004404 <RCCEx_PLLSAI1_Config+0xb4>
 8004468:	40021000 	.word	0x40021000

0800446c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800446c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800446e:	4b3d      	ldr	r3, [pc, #244]	; (8004564 <RCCEx_PLLSAI2_Config+0xf8>)
 8004470:	68da      	ldr	r2, [r3, #12]
 8004472:	f012 0f03 	tst.w	r2, #3
{
 8004476:	4605      	mov	r5, r0
 8004478:	460e      	mov	r6, r1
 800447a:	461c      	mov	r4, r3
 800447c:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800447e:	d028      	beq.n	80044d2 <RCCEx_PLLSAI2_Config+0x66>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004480:	68da      	ldr	r2, [r3, #12]
 8004482:	f002 0203 	and.w	r2, r2, #3
 8004486:	4282      	cmp	r2, r0
 8004488:	d13a      	bne.n	8004500 <RCCEx_PLLSAI2_Config+0x94>
       ||
 800448a:	2a00      	cmp	r2, #0
 800448c:	d038      	beq.n	8004500 <RCCEx_PLLSAI2_Config+0x94>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800448e:	68db      	ldr	r3, [r3, #12]
       ||
 8004490:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004492:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004496:	3301      	adds	r3, #1
       ||
 8004498:	4293      	cmp	r3, r2
 800449a:	d131      	bne.n	8004500 <RCCEx_PLLSAI2_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800449c:	6823      	ldr	r3, [r4, #0]
 800449e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044a2:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044a4:	f7fe f81e 	bl	80024e4 <HAL_GetTick>
 80044a8:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80044aa:	6823      	ldr	r3, [r4, #0]
 80044ac:	009a      	lsls	r2, r3, #2
 80044ae:	d430      	bmi.n	8004512 <RCCEx_PLLSAI2_Config+0xa6>
 80044b0:	68a8      	ldr	r0, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80044b2:	2e00      	cmp	r6, #0
 80044b4:	d034      	beq.n	8004520 <RCCEx_PLLSAI2_Config+0xb4>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80044b6:	6963      	ldr	r3, [r4, #20]
 80044b8:	6929      	ldr	r1, [r5, #16]
 80044ba:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80044be:	0849      	lsrs	r1, r1, #1
 80044c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80044c4:	3901      	subs	r1, #1
 80044c6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80044ca:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 80044ce:	6163      	str	r3, [r4, #20]
 80044d0:	e032      	b.n	8004538 <RCCEx_PLLSAI2_Config+0xcc>
    switch(PllSai2->PLLSAI2Source)
 80044d2:	2802      	cmp	r0, #2
 80044d4:	d010      	beq.n	80044f8 <RCCEx_PLLSAI2_Config+0x8c>
 80044d6:	2803      	cmp	r0, #3
 80044d8:	d014      	beq.n	8004504 <RCCEx_PLLSAI2_Config+0x98>
 80044da:	2801      	cmp	r0, #1
 80044dc:	d110      	bne.n	8004500 <RCCEx_PLLSAI2_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	079f      	lsls	r7, r3, #30
 80044e2:	d538      	bpl.n	8004556 <RCCEx_PLLSAI2_Config+0xea>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80044e4:	68e3      	ldr	r3, [r4, #12]
 80044e6:	686a      	ldr	r2, [r5, #4]
 80044e8:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 80044ec:	3a01      	subs	r2, #1
 80044ee:	4318      	orrs	r0, r3
 80044f0:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80044f4:	60e0      	str	r0, [r4, #12]
 80044f6:	e7d1      	b.n	800449c <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80044fe:	d1f1      	bne.n	80044e4 <RCCEx_PLLSAI2_Config+0x78>
 8004500:	2001      	movs	r0, #1
 8004502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	0391      	lsls	r1, r2, #14
 8004508:	d4ec      	bmi.n	80044e4 <RCCEx_PLLSAI2_Config+0x78>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004510:	e7f5      	b.n	80044fe <RCCEx_PLLSAI2_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004512:	f7fd ffe7 	bl	80024e4 <HAL_GetTick>
 8004516:	1bc0      	subs	r0, r0, r7
 8004518:	2802      	cmp	r0, #2
 800451a:	d9c6      	bls.n	80044aa <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 800451c:	2003      	movs	r0, #3
 800451e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004520:	6962      	ldr	r2, [r4, #20]
 8004522:	68eb      	ldr	r3, [r5, #12]
 8004524:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 8004528:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800452c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8004530:	091b      	lsrs	r3, r3, #4
 8004532:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 8004536:	6162      	str	r2, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004538:	6823      	ldr	r3, [r4, #0]
 800453a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800453e:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004540:	f7fd ffd0 	bl	80024e4 <HAL_GetTick>
 8004544:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004546:	6823      	ldr	r3, [r4, #0]
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	d505      	bpl.n	8004558 <RCCEx_PLLSAI2_Config+0xec>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800454c:	6963      	ldr	r3, [r4, #20]
 800454e:	696a      	ldr	r2, [r5, #20]
 8004550:	4313      	orrs	r3, r2
 8004552:	6163      	str	r3, [r4, #20]
 8004554:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8004556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004558:	f7fd ffc4 	bl	80024e4 <HAL_GetTick>
 800455c:	1b80      	subs	r0, r0, r6
 800455e:	2802      	cmp	r0, #2
 8004560:	d9f1      	bls.n	8004546 <RCCEx_PLLSAI2_Config+0xda>
 8004562:	e7db      	b.n	800451c <RCCEx_PLLSAI2_Config+0xb0>
 8004564:	40021000 	.word	0x40021000

08004568 <HAL_RCCEx_PeriphCLKConfig>:
{
 8004568:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800456c:	6806      	ldr	r6, [r0, #0]
 800456e:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 8004572:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004574:	d024      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8004576:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8004578:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800457c:	d02c      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x70>
 800457e:	d802      	bhi.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004580:	b1c1      	cbz	r1, 80045b4 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 8004582:	2601      	movs	r6, #1
 8004584:	e01c      	b.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8004586:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800458a:	d00d      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800458c:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8004590:	d1f7      	bne.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004592:	4a4d      	ldr	r2, [pc, #308]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004594:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8004596:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800459a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800459e:	430b      	orrs	r3, r1
 80045a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80045a4:	2600      	movs	r6, #0
 80045a6:	e00b      	b.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80045a8:	4a47      	ldr	r2, [pc, #284]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045aa:	68d3      	ldr	r3, [r2, #12]
 80045ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045b0:	60d3      	str	r3, [r2, #12]
      break;
 80045b2:	e7ee      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80045b4:	3004      	adds	r0, #4
 80045b6:	f7ff fecb 	bl	8004350 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80045ba:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80045bc:	2800      	cmp	r0, #0
 80045be:	d0e8      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80045c0:	6823      	ldr	r3, [r4, #0]
 80045c2:	04d8      	lsls	r0, r3, #19
 80045c4:	d506      	bpl.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 80045c6:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80045c8:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 80045cc:	d074      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x150>
 80045ce:	d808      	bhi.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80045d0:	b1a9      	cbz	r1, 80045fe <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 80045d2:	2601      	movs	r6, #1
 80045d4:	4635      	mov	r5, r6
 80045d6:	e021      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80045d8:	2100      	movs	r1, #0
 80045da:	3020      	adds	r0, #32
 80045dc:	f7ff ff46 	bl	800446c <RCCEx_PLLSAI2_Config>
 80045e0:	e7eb      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 80045e2:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 80045e6:	d004      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 80045e8:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 80045ec:	d1f1      	bne.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80045ee:	4635      	mov	r5, r6
 80045f0:	e009      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80045f2:	4a35      	ldr	r2, [pc, #212]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045f4:	68d3      	ldr	r3, [r2, #12]
 80045f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045fa:	60d3      	str	r3, [r2, #12]
 80045fc:	e7f7      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80045fe:	1d20      	adds	r0, r4, #4
 8004600:	f7ff fea6 	bl	8004350 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004604:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004606:	2d00      	cmp	r5, #0
 8004608:	d15c      	bne.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800460a:	4a2f      	ldr	r2, [pc, #188]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800460c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800460e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004612:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8004616:	430b      	orrs	r3, r1
 8004618:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800461c:	6823      	ldr	r3, [r4, #0]
 800461e:	0399      	lsls	r1, r3, #14
 8004620:	f140 814f 	bpl.w	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004624:	4f28      	ldr	r7, [pc, #160]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004626:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004628:	00da      	lsls	r2, r3, #3
 800462a:	f140 8176 	bpl.w	800491a <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 800462e:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004632:	f8df 9098 	ldr.w	r9, [pc, #152]	; 80046cc <HAL_RCCEx_PeriphCLKConfig+0x164>
 8004636:	f8d9 3000 	ldr.w	r3, [r9]
 800463a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800463e:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 8004642:	f7fd ff4f 	bl	80024e4 <HAL_GetTick>
 8004646:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004648:	f8d9 3000 	ldr.w	r3, [r9]
 800464c:	05db      	lsls	r3, r3, #23
 800464e:	d53f      	bpl.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x168>
    if(ret == HAL_OK)
 8004650:	2d00      	cmp	r5, #0
 8004652:	d144      	bne.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004654:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004658:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800465c:	d015      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x122>
 800465e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8004662:	4293      	cmp	r3, r2
 8004664:	d011      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x122>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004666:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 800466a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800466e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004672:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004676:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800467a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 800467e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004682:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8004686:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800468a:	07d8      	lsls	r0, r3, #31
 800468c:	d509      	bpl.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
        tickstart = HAL_GetTick();
 800468e:	f7fd ff29 	bl	80024e4 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004692:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8004696:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004698:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800469c:	0799      	lsls	r1, r3, #30
 800469e:	f140 8109 	bpl.w	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80046a6:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80046aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ae:	4313      	orrs	r3, r2
 80046b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80046b4:	4635      	mov	r5, r6
 80046b6:	e012      	b.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x176>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80046b8:	2100      	movs	r1, #0
 80046ba:	f104 0020 	add.w	r0, r4, #32
 80046be:	f7ff fed5 	bl	800446c <RCCEx_PLLSAI2_Config>
 80046c2:	e79f      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 80046c4:	462e      	mov	r6, r5
 80046c6:	e7a9      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0xb4>
 80046c8:	40021000 	.word	0x40021000
 80046cc:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046d0:	f7fd ff08 	bl	80024e4 <HAL_GetTick>
 80046d4:	eba0 000a 	sub.w	r0, r0, sl
 80046d8:	2802      	cmp	r0, #2
 80046da:	d9b5      	bls.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = HAL_TIMEOUT;
 80046dc:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 80046de:	f1b8 0f00 	cmp.w	r8, #0
 80046e2:	d003      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x184>
      __HAL_RCC_PWR_CLK_DISABLE();
 80046e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046ea:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046ec:	6823      	ldr	r3, [r4, #0]
 80046ee:	07da      	lsls	r2, r3, #31
 80046f0:	d508      	bpl.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046f2:	4990      	ldr	r1, [pc, #576]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80046f4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80046f6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80046fa:	f022 0203 	bic.w	r2, r2, #3
 80046fe:	4302      	orrs	r2, r0
 8004700:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004704:	079f      	lsls	r7, r3, #30
 8004706:	d508      	bpl.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004708:	498a      	ldr	r1, [pc, #552]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800470a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800470c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004710:	f022 020c 	bic.w	r2, r2, #12
 8004714:	4302      	orrs	r2, r0
 8004716:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800471a:	075e      	lsls	r6, r3, #29
 800471c:	d508      	bpl.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800471e:	4985      	ldr	r1, [pc, #532]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004720:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004722:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004726:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800472a:	4302      	orrs	r2, r0
 800472c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004730:	0718      	lsls	r0, r3, #28
 8004732:	d508      	bpl.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004734:	497f      	ldr	r1, [pc, #508]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004736:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8004738:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800473c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004740:	4302      	orrs	r2, r0
 8004742:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004746:	06d9      	lsls	r1, r3, #27
 8004748:	d508      	bpl.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800474a:	497a      	ldr	r1, [pc, #488]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800474c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800474e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004752:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004756:	4302      	orrs	r2, r0
 8004758:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800475c:	069a      	lsls	r2, r3, #26
 800475e:	d508      	bpl.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004760:	4974      	ldr	r1, [pc, #464]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004762:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8004764:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004768:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800476c:	4302      	orrs	r2, r0
 800476e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004772:	059f      	lsls	r7, r3, #22
 8004774:	d508      	bpl.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004776:	496f      	ldr	r1, [pc, #444]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004778:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800477a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800477e:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8004782:	4302      	orrs	r2, r0
 8004784:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004788:	055e      	lsls	r6, r3, #21
 800478a:	d508      	bpl.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800478c:	4969      	ldr	r1, [pc, #420]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800478e:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8004790:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004794:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004798:	4302      	orrs	r2, r0
 800479a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800479e:	0658      	lsls	r0, r3, #25
 80047a0:	d508      	bpl.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047a2:	4964      	ldr	r1, [pc, #400]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80047a4:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80047a6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80047aa:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80047ae:	4302      	orrs	r2, r0
 80047b0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047b4:	0619      	lsls	r1, r3, #24
 80047b6:	d508      	bpl.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x262>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047b8:	495e      	ldr	r1, [pc, #376]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80047ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80047bc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80047c0:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80047c4:	4302      	orrs	r2, r0
 80047c6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047ca:	05da      	lsls	r2, r3, #23
 80047cc:	d508      	bpl.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x278>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047ce:	4959      	ldr	r1, [pc, #356]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80047d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047d2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80047d6:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80047da:	4302      	orrs	r2, r0
 80047dc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80047e0:	049b      	lsls	r3, r3, #18
 80047e2:	d50f      	bpl.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047e4:	4a53      	ldr	r2, [pc, #332]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80047e6:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80047e8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80047ec:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80047f0:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80047f2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047f6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80047fa:	d164      	bne.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047fc:	68d3      	ldr	r3, [r2, #12]
 80047fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004802:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004804:	6823      	ldr	r3, [r4, #0]
 8004806:	031f      	lsls	r7, r3, #12
 8004808:	d50f      	bpl.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800480a:	4a4a      	ldr	r2, [pc, #296]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800480c:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800480e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004812:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004816:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004818:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800481c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004820:	d15c      	bne.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x374>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004822:	68d3      	ldr	r3, [r2, #12]
 8004824:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004828:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800482a:	6823      	ldr	r3, [r4, #0]
 800482c:	035e      	lsls	r6, r3, #13
 800482e:	d50f      	bpl.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004830:	4a40      	ldr	r2, [pc, #256]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004832:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8004834:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004838:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800483c:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800483e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004842:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004846:	d154      	bne.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x38a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004848:	68d3      	ldr	r3, [r2, #12]
 800484a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800484e:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004850:	6823      	ldr	r3, [r4, #0]
 8004852:	0458      	lsls	r0, r3, #17
 8004854:	d512      	bpl.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x314>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004856:	4937      	ldr	r1, [pc, #220]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004858:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800485a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800485e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8004862:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004864:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004868:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800486c:	d14c      	bne.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800486e:	2102      	movs	r1, #2
 8004870:	1d20      	adds	r0, r4, #4
 8004872:	f7ff fd6d 	bl	8004350 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8004876:	2800      	cmp	r0, #0
 8004878:	bf18      	it	ne
 800487a:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800487c:	6822      	ldr	r2, [r4, #0]
 800487e:	0411      	lsls	r1, r2, #16
 8004880:	d508      	bpl.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004882:	492c      	ldr	r1, [pc, #176]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004884:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8004886:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800488a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800488e:	4303      	orrs	r3, r0
 8004890:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004894:	03d3      	lsls	r3, r2, #15
 8004896:	d509      	bpl.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004898:	4a26      	ldr	r2, [pc, #152]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800489a:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800489e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80048a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80048a6:	430b      	orrs	r3, r1
 80048a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 80048ac:	4628      	mov	r0, r5
 80048ae:	b002      	add	sp, #8
 80048b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048b4:	f7fd fe16 	bl	80024e4 <HAL_GetTick>
 80048b8:	1b40      	subs	r0, r0, r5
 80048ba:	4548      	cmp	r0, r9
 80048bc:	f67f aeec 	bls.w	8004698 <HAL_RCCEx_PeriphCLKConfig+0x130>
 80048c0:	e70c      	b.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x174>
 80048c2:	4635      	mov	r5, r6
 80048c4:	e712      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x184>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80048c6:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80048ca:	d19b      	bne.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048cc:	2101      	movs	r1, #1
 80048ce:	1d20      	adds	r0, r4, #4
 80048d0:	f7ff fd3e 	bl	8004350 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 80048d4:	2800      	cmp	r0, #0
 80048d6:	bf18      	it	ne
 80048d8:	4605      	movne	r5, r0
 80048da:	e793      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80048dc:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80048e0:	d1a3      	bne.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048e2:	2101      	movs	r1, #1
 80048e4:	1d20      	adds	r0, r4, #4
 80048e6:	f7ff fd33 	bl	8004350 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80048ea:	2800      	cmp	r0, #0
 80048ec:	bf18      	it	ne
 80048ee:	4605      	movne	r5, r0
 80048f0:	e79b      	b.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80048f2:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80048f6:	d1ab      	bne.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048f8:	2101      	movs	r1, #1
 80048fa:	1d20      	adds	r0, r4, #4
 80048fc:	f7ff fd28 	bl	8004350 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8004900:	2800      	cmp	r0, #0
 8004902:	bf18      	it	ne
 8004904:	4605      	movne	r5, r0
 8004906:	e7a3      	b.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004908:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800490c:	d1b6      	bne.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x314>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800490e:	2102      	movs	r1, #2
 8004910:	f104 0020 	add.w	r0, r4, #32
 8004914:	f7ff fdaa 	bl	800446c <RCCEx_PLLSAI2_Config>
 8004918:	e7ad      	b.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 800491a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800491c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004920:	65bb      	str	r3, [r7, #88]	; 0x58
 8004922:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004928:	9301      	str	r3, [sp, #4]
 800492a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800492c:	f04f 0801 	mov.w	r8, #1
 8004930:	e67f      	b.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0xca>
 8004932:	bf00      	nop
 8004934:	40021000 	.word	0x40021000

08004938 <HAL_RTC_WaitForSynchro>:

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004938:	6802      	ldr	r2, [r0, #0]
{
 800493a:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800493c:	68d3      	ldr	r3, [r2, #12]
 800493e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004942:	60d3      	str	r3, [r2, #12]
{
 8004944:	4604      	mov	r4, r0
#endif

  tickstart = HAL_GetTick();
 8004946:	f7fd fdcd 	bl	80024e4 <HAL_GetTick>
 800494a:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800494c:	6823      	ldr	r3, [r4, #0]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	069b      	lsls	r3, r3, #26
 8004952:	d501      	bpl.n	8004958 <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8004954:	2000      	movs	r0, #0
 8004956:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004958:	f7fd fdc4 	bl	80024e4 <HAL_GetTick>
 800495c:	1b40      	subs	r0, r0, r5
 800495e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004962:	d9f3      	bls.n	800494c <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 8004964:	2003      	movs	r0, #3
}
 8004966:	bd38      	pop	{r3, r4, r5, pc}

08004968 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800496a:	6803      	ldr	r3, [r0, #0]
 800496c:	68dc      	ldr	r4, [r3, #12]
 800496e:	f014 0440 	ands.w	r4, r4, #64	; 0x40
{
 8004972:	4605      	mov	r5, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004974:	d118      	bne.n	80049a8 <RTC_EnterInitMode+0x40>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004976:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800497a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800497c:	f7fd fdb2 	bl	80024e4 <HAL_GetTick>
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
      {
        status = HAL_TIMEOUT;
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004980:	2703      	movs	r7, #3
    tickstart = HAL_GetTick();
 8004982:	4606      	mov	r6, r0
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004984:	682b      	ldr	r3, [r5, #0]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	065b      	lsls	r3, r3, #25
 800498a:	d401      	bmi.n	8004990 <RTC_EnterInitMode+0x28>
 800498c:	2c03      	cmp	r4, #3
 800498e:	d101      	bne.n	8004994 <RTC_EnterInitMode+0x2c>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) */

  return status;
}
 8004990:	4620      	mov	r0, r4
 8004992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004994:	f7fd fda6 	bl	80024e4 <HAL_GetTick>
 8004998:	1b80      	subs	r0, r0, r6
 800499a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800499e:	bf84      	itt	hi
 80049a0:	f885 7021 	strbhi.w	r7, [r5, #33]	; 0x21
        status = HAL_TIMEOUT;
 80049a4:	2403      	movhi	r4, #3
 80049a6:	e7ed      	b.n	8004984 <RTC_EnterInitMode+0x1c>
  HAL_StatusTypeDef status = HAL_OK;
 80049a8:	2400      	movs	r4, #0
 80049aa:	e7f1      	b.n	8004990 <RTC_EnterInitMode+0x28>

080049ac <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80049ac:	b538      	push	{r3, r4, r5, lr}
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80049ae:	4c0f      	ldr	r4, [pc, #60]	; (80049ec <RTC_ExitInitMode+0x40>)
 80049b0:	68e3      	ldr	r3, [r4, #12]
 80049b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049b6:	60e3      	str	r3, [r4, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80049b8:	68a3      	ldr	r3, [r4, #8]
 80049ba:	069b      	lsls	r3, r3, #26
{
 80049bc:	4605      	mov	r5, r0
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80049be:	d406      	bmi.n	80049ce <RTC_ExitInitMode+0x22>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80049c0:	f7ff ffba 	bl	8004938 <HAL_RTC_WaitForSynchro>
 80049c4:	b188      	cbz	r0, 80049ea <RTC_ExitInitMode+0x3e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80049c6:	2003      	movs	r0, #3
 80049c8:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
 80049cc:	bd38      	pop	{r3, r4, r5, pc}
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80049ce:	68a3      	ldr	r3, [r4, #8]
 80049d0:	f023 0320 	bic.w	r3, r3, #32
 80049d4:	60a3      	str	r3, [r4, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80049d6:	f7ff ffaf 	bl	8004938 <HAL_RTC_WaitForSynchro>
 80049da:	b110      	cbz	r0, 80049e2 <RTC_ExitInitMode+0x36>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80049dc:	2003      	movs	r0, #3
 80049de:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80049e2:	68a3      	ldr	r3, [r4, #8]
 80049e4:	f043 0320 	orr.w	r3, r3, #32
 80049e8:	60a3      	str	r3, [r4, #8]
  }

  return status;
}
 80049ea:	bd38      	pop	{r3, r4, r5, pc}
 80049ec:	40002800 	.word	0x40002800

080049f0 <HAL_RTC_Init>:
{
 80049f0:	b538      	push	{r3, r4, r5, lr}
  if (hrtc != NULL)
 80049f2:	4604      	mov	r4, r0
 80049f4:	2800      	cmp	r0, #0
 80049f6:	d040      	beq.n	8004a7a <HAL_RTC_Init+0x8a>
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80049f8:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80049fc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004a00:	b91b      	cbnz	r3, 8004a0a <HAL_RTC_Init+0x1a>
      hrtc->Lock = HAL_UNLOCKED;
 8004a02:	f880 2020 	strb.w	r2, [r0, #32]
      HAL_RTC_MspInit(hrtc);
 8004a06:	f7fd fa97 	bl	8001f38 <HAL_RTC_MspInit>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004a0a:	2302      	movs	r3, #2
 8004a0c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a10:	6823      	ldr	r3, [r4, #0]
 8004a12:	22ca      	movs	r2, #202	; 0xca
 8004a14:	625a      	str	r2, [r3, #36]	; 0x24
 8004a16:	2253      	movs	r2, #83	; 0x53
 8004a18:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 8004a1a:	4620      	mov	r0, r4
 8004a1c:	f7ff ffa4 	bl	8004968 <RTC_EnterInitMode>
    if (status == HAL_OK)
 8004a20:	2800      	cmp	r0, #0
 8004a22:	d12b      	bne.n	8004a7c <HAL_RTC_Init+0x8c>
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004a24:	6823      	ldr	r3, [r4, #0]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004a26:	6920      	ldr	r0, [r4, #16]
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004a28:	689a      	ldr	r2, [r3, #8]
 8004a2a:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8004a2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a32:	609a      	str	r2, [r3, #8]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004a34:	6862      	ldr	r2, [r4, #4]
 8004a36:	6899      	ldr	r1, [r3, #8]
 8004a38:	4302      	orrs	r2, r0
 8004a3a:	69a0      	ldr	r0, [r4, #24]
 8004a3c:	4302      	orrs	r2, r0
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	609a      	str	r2, [r3, #8]
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004a42:	68e2      	ldr	r2, [r4, #12]
 8004a44:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004a46:	691a      	ldr	r2, [r3, #16]
 8004a48:	68a1      	ldr	r1, [r4, #8]
 8004a4a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004a4e:	611a      	str	r2, [r3, #16]
      status = RTC_ExitInitMode(hrtc);
 8004a50:	4620      	mov	r0, r4
 8004a52:	f7ff ffab 	bl	80049ac <RTC_ExitInitMode>
      if (status == HAL_OK)
 8004a56:	b988      	cbnz	r0, 8004a7c <HAL_RTC_Init+0x8c>
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004a58:	6823      	ldr	r3, [r4, #0]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004a5a:	6965      	ldr	r5, [r4, #20]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004a5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a5e:	f022 0203 	bic.w	r2, r2, #3
 8004a62:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004a64:	69e2      	ldr	r2, [r4, #28]
 8004a66:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004a68:	432a      	orrs	r2, r5
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	64da      	str	r2, [r3, #76]	; 0x4c
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a6e:	22ff      	movs	r2, #255	; 0xff
 8004a70:	625a      	str	r2, [r3, #36]	; 0x24
          hrtc->State = HAL_RTC_STATE_READY;
 8004a72:	2301      	movs	r3, #1
 8004a74:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 8004a78:	bd38      	pop	{r3, r4, r5, pc}
  HAL_StatusTypeDef status = HAL_ERROR;
 8004a7a:	2001      	movs	r0, #1
}
 8004a7c:	bd38      	pop	{r3, r4, r5, pc}

08004a7e <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8004a7e:	2300      	movs	r3, #0
  uint8_t temp = Value;

  while (temp >= 10U)
 8004a80:	2809      	cmp	r0, #9
 8004a82:	d803      	bhi.n	8004a8c <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    temp -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8004a84:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8004a88:	b2c0      	uxtb	r0, r0
 8004a8a:	4770      	bx	lr
    temp -= 10U;
 8004a8c:	380a      	subs	r0, #10
    bcdhigh++;
 8004a8e:	3301      	adds	r3, #1
    temp -= 10U;
 8004a90:	b2c0      	uxtb	r0, r0
 8004a92:	e7f5      	b.n	8004a80 <RTC_ByteToBcd2+0x2>

08004a94 <HAL_RTC_SetTime>:
{
 8004a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8004a96:	f890 3020 	ldrb.w	r3, [r0, #32]
 8004a9a:	2b01      	cmp	r3, #1
{
 8004a9c:	4605      	mov	r5, r0
 8004a9e:	460e      	mov	r6, r1
 8004aa0:	4617      	mov	r7, r2
 8004aa2:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hrtc);
 8004aa6:	d052      	beq.n	8004b4e <HAL_RTC_SetTime+0xba>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004aa8:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  __HAL_LOCK(hrtc);
 8004aac:	2201      	movs	r2, #1
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004aae:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hrtc);
 8004ab0:	f880 2020 	strb.w	r2, [r0, #32]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ab4:	22ca      	movs	r2, #202	; 0xca
 8004ab6:	625a      	str	r2, [r3, #36]	; 0x24
 8004ab8:	2253      	movs	r2, #83	; 0x53
 8004aba:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 8004abc:	f7ff ff54 	bl	8004968 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8004ac0:	bb68      	cbnz	r0, 8004b1e <HAL_RTC_SetTime+0x8a>
 8004ac2:	682b      	ldr	r3, [r5, #0]
 8004ac4:	7830      	ldrb	r0, [r6, #0]
 8004ac6:	7874      	ldrb	r4, [r6, #1]
 8004ac8:	78b1      	ldrb	r1, [r6, #2]
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004aca:	689b      	ldr	r3, [r3, #8]
    if (Format == RTC_FORMAT_BIN)
 8004acc:	bb97      	cbnz	r7, 8004b34 <HAL_RTC_SetTime+0xa0>
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004ace:	f013 0340 	ands.w	r3, r3, #64	; 0x40
        sTime->TimeFormat = 0x00U;
 8004ad2:	bf08      	it	eq
 8004ad4:	70f3      	strbeq	r3, [r6, #3]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004ad6:	f7ff ffd2 	bl	8004a7e <RTC_ByteToBcd2>
 8004ada:	4602      	mov	r2, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004adc:	4620      	mov	r0, r4
 8004ade:	f7ff ffce 	bl	8004a7e <RTC_ByteToBcd2>
 8004ae2:	4604      	mov	r4, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004ae4:	4608      	mov	r0, r1
 8004ae6:	f7ff ffca 	bl	8004a7e <RTC_ByteToBcd2>
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004aea:	78f3      	ldrb	r3, [r6, #3]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004aec:	ea40 5083 	orr.w	r0, r0, r3, lsl #22
 8004af0:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8004af4:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004af8:	682b      	ldr	r3, [r5, #0]
 8004afa:	f000 307f 	and.w	r0, r0, #2139062143	; 0x7f7f7f7f
 8004afe:	f020 40fe 	bic.w	r0, r0, #2130706432	; 0x7f000000
 8004b02:	6018      	str	r0, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004b04:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004b06:	6930      	ldr	r0, [r6, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004b08:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b0c:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004b0e:	68f2      	ldr	r2, [r6, #12]
 8004b10:	6899      	ldr	r1, [r3, #8]
 8004b12:	4302      	orrs	r2, r0
 8004b14:	430a      	orrs	r2, r1
 8004b16:	609a      	str	r2, [r3, #8]
    status = RTC_ExitInitMode(hrtc);
 8004b18:	4628      	mov	r0, r5
 8004b1a:	f7ff ff47 	bl	80049ac <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b1e:	682b      	ldr	r3, [r5, #0]
 8004b20:	22ff      	movs	r2, #255	; 0xff
 8004b22:	625a      	str	r2, [r3, #36]	; 0x24
  if (status == HAL_OK)
 8004b24:	b910      	cbnz	r0, 8004b2c <HAL_RTC_SetTime+0x98>
    hrtc->State = HAL_RTC_STATE_READY;
 8004b26:	2301      	movs	r3, #1
 8004b28:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
  __HAL_UNLOCK(hrtc);
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	f885 3020 	strb.w	r3, [r5, #32]
  return status;
 8004b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004b34:	f013 0340 	ands.w	r3, r3, #64	; 0x40
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004b38:	ea4f 2404 	mov.w	r4, r4, lsl #8
        sTime->TimeFormat = 0x00U;
 8004b3c:	bf08      	it	eq
 8004b3e:	70f3      	strbeq	r3, [r6, #3]
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004b40:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004b44:	78f4      	ldrb	r4, [r6, #3]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004b46:	4308      	orrs	r0, r1
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004b48:	ea40 5084 	orr.w	r0, r0, r4, lsl #22
 8004b4c:	e7d4      	b.n	8004af8 <HAL_RTC_SetTime+0x64>
  __HAL_LOCK(hrtc);
 8004b4e:	4618      	mov	r0, r3
}
 8004b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004b52 <HAL_RTC_SetDate>:
{
 8004b52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8004b54:	f890 3020 	ldrb.w	r3, [r0, #32]
 8004b58:	2b01      	cmp	r3, #1
{
 8004b5a:	4605      	mov	r5, r0
 8004b5c:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 8004b60:	d043      	beq.n	8004bea <HAL_RTC_SetDate+0x98>
 8004b62:	2301      	movs	r3, #1
 8004b64:	f885 3020 	strb.w	r3, [r5, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b68:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
 8004b6c:	784b      	ldrb	r3, [r1, #1]
 8004b6e:	78c8      	ldrb	r0, [r1, #3]
 8004b70:	788e      	ldrb	r6, [r1, #2]
 8004b72:	780c      	ldrb	r4, [r1, #0]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004b74:	bb92      	cbnz	r2, 8004bdc <HAL_RTC_SetDate+0x8a>
 8004b76:	06da      	lsls	r2, r3, #27
 8004b78:	d503      	bpl.n	8004b82 <HAL_RTC_SetDate+0x30>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004b7a:	f023 0310 	bic.w	r3, r3, #16
 8004b7e:	330a      	adds	r3, #10
 8004b80:	704b      	strb	r3, [r1, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004b82:	f7ff ff7c 	bl	8004a7e <RTC_ByteToBcd2>
 8004b86:	4607      	mov	r7, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004b88:	7848      	ldrb	r0, [r1, #1]
 8004b8a:	f7ff ff78 	bl	8004a7e <RTC_ByteToBcd2>
 8004b8e:	4602      	mov	r2, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8004b90:	4630      	mov	r0, r6
 8004b92:	f7ff ff74 	bl	8004a7e <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004b96:	ea40 3044 	orr.w	r0, r0, r4, lsl #13
 8004b9a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8004b9e:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ba2:	682b      	ldr	r3, [r5, #0]
 8004ba4:	22ca      	movs	r2, #202	; 0xca
 8004ba6:	625a      	str	r2, [r3, #36]	; 0x24
 8004ba8:	2253      	movs	r2, #83	; 0x53
 8004baa:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 8004bac:	4628      	mov	r0, r5
 8004bae:	f7ff fedb 	bl	8004968 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8004bb2:	b940      	cbnz	r0, 8004bc6 <HAL_RTC_SetDate+0x74>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004bb4:	682b      	ldr	r3, [r5, #0]
 8004bb6:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 8004bba:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 8004bbe:	605c      	str	r4, [r3, #4]
    status = RTC_ExitInitMode(hrtc);
 8004bc0:	4628      	mov	r0, r5
 8004bc2:	f7ff fef3 	bl	80049ac <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bc6:	682b      	ldr	r3, [r5, #0]
 8004bc8:	22ff      	movs	r2, #255	; 0xff
 8004bca:	625a      	str	r2, [r3, #36]	; 0x24
  if (status == HAL_OK)
 8004bcc:	b910      	cbnz	r0, 8004bd4 <HAL_RTC_SetDate+0x82>
    hrtc->State = HAL_RTC_STATE_READY ;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
  __HAL_UNLOCK(hrtc);
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	f885 3020 	strb.w	r3, [r5, #32]
  return status;
 8004bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004bdc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004bde:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004be2:	4330      	orrs	r0, r6
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004be4:	ea40 3444 	orr.w	r4, r0, r4, lsl #13
 8004be8:	e7db      	b.n	8004ba2 <HAL_RTC_SetDate+0x50>
}
 8004bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004bec <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004bec:	6803      	ldr	r3, [r0, #0]
 8004bee:	685a      	ldr	r2, [r3, #4]
 8004bf0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004bf4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bf6:	6842      	ldr	r2, [r0, #4]
 8004bf8:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8004bfc:	d10a      	bne.n	8004c14 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
 8004bfe:	6882      	ldr	r2, [r0, #8]
 8004c00:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8004c04:	d002      	beq.n	8004c0c <SPI_WaitFifoStateUntilTimeout.part.1+0x20>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c06:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8004c0a:	d103      	bne.n	8004c14 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c14:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8004c16:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8004c1a:	d107      	bne.n	8004c2c <SPI_WaitFifoStateUntilTimeout.part.1+0x40>
        {
          SPI_RESET_CRC(hspi);
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c22:	601a      	str	r2, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c2a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c32:	2300      	movs	r3, #0
 8004c34:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      }
    }
  }

  return HAL_OK;
}
 8004c38:	2003      	movs	r0, #3
 8004c3a:	4770      	bx	lr

08004c3c <SPI_WaitFlagStateUntilTimeout.constprop.10>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8004c3c:	b570      	push	{r4, r5, r6, lr}
 8004c3e:	4604      	mov	r4, r0
 8004c40:	460d      	mov	r5, r1
 8004c42:	4616      	mov	r6, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c44:	6823      	ldr	r3, [r4, #0]
 8004c46:	6898      	ldr	r0, [r3, #8]
 8004c48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004c4c:	d100      	bne.n	8004c50 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x14>
}
 8004c4e:	bd70      	pop	{r4, r5, r6, pc}
    if (Timeout != HAL_MAX_DELAY)
 8004c50:	1c6a      	adds	r2, r5, #1
 8004c52:	d0f8      	beq.n	8004c46 <SPI_WaitFlagStateUntilTimeout.constprop.10+0xa>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004c54:	f7fd fc46 	bl	80024e4 <HAL_GetTick>
 8004c58:	1b80      	subs	r0, r0, r6
 8004c5a:	4285      	cmp	r5, r0
 8004c5c:	d8f2      	bhi.n	8004c44 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x8>
 8004c5e:	4620      	mov	r0, r4
}
 8004c60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004c64:	f7ff bfc2 	b.w	8004bec <SPI_WaitFifoStateUntilTimeout.part.1>

08004c68 <SPI_WaitFifoStateUntilTimeout.constprop.11>:
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8004c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c6a:	4605      	mov	r5, r0
 8004c6c:	460c      	mov	r4, r1
 8004c6e:	4616      	mov	r6, r2
 8004c70:	461f      	mov	r7, r3
  while ((hspi->Instance->SR & Fifo) != State)
 8004c72:	6829      	ldr	r1, [r5, #0]
 8004c74:	6888      	ldr	r0, [r1, #8]
 8004c76:	4020      	ands	r0, r4
 8004c78:	d100      	bne.n	8004c7c <SPI_WaitFifoStateUntilTimeout.constprop.11+0x14>
}
 8004c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004c7c:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004c80:	bf08      	it	eq
 8004c82:	7b0b      	ldrbeq	r3, [r1, #12]
    if (Timeout != HAL_MAX_DELAY)
 8004c84:	1c73      	adds	r3, r6, #1
 8004c86:	d0f5      	beq.n	8004c74 <SPI_WaitFifoStateUntilTimeout.constprop.11+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004c88:	f7fd fc2c 	bl	80024e4 <HAL_GetTick>
 8004c8c:	1bc0      	subs	r0, r0, r7
 8004c8e:	4286      	cmp	r6, r0
 8004c90:	d8ef      	bhi.n	8004c72 <SPI_WaitFifoStateUntilTimeout.constprop.11+0xa>
 8004c92:	4628      	mov	r0, r5
}
 8004c94:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004c98:	f7ff bfa8 	b.w	8004bec <SPI_WaitFifoStateUntilTimeout.part.1>

08004c9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c9c:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c9e:	4613      	mov	r3, r2
{
 8004ca0:	460d      	mov	r5, r1
 8004ca2:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ca4:	460a      	mov	r2, r1
 8004ca6:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 8004caa:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004cac:	f7ff ffdc 	bl	8004c68 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8004cb0:	b128      	cbz	r0, 8004cbe <SPI_EndRxTxTransaction+0x22>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cb2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004cb4:	f043 0320 	orr.w	r3, r3, #32
 8004cb8:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8004cba:	2003      	movs	r0, #3
 8004cbc:	e00f      	b.n	8004cde <SPI_EndRxTxTransaction+0x42>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004cbe:	4632      	mov	r2, r6
 8004cc0:	4629      	mov	r1, r5
 8004cc2:	4620      	mov	r0, r4
 8004cc4:	f7ff ffba 	bl	8004c3c <SPI_WaitFlagStateUntilTimeout.constprop.10>
 8004cc8:	2800      	cmp	r0, #0
 8004cca:	d1f2      	bne.n	8004cb2 <SPI_EndRxTxTransaction+0x16>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ccc:	4633      	mov	r3, r6
 8004cce:	462a      	mov	r2, r5
 8004cd0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004cd4:	4620      	mov	r0, r4
 8004cd6:	f7ff ffc7 	bl	8004c68 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8004cda:	2800      	cmp	r0, #0
 8004cdc:	d1e9      	bne.n	8004cb2 <SPI_EndRxTxTransaction+0x16>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8004cde:	bd70      	pop	{r4, r5, r6, pc}

08004ce0 <HAL_SPI_Init>:
{
 8004ce0:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 8004ce2:	4604      	mov	r4, r0
 8004ce4:	2800      	cmp	r0, #0
 8004ce6:	d04a      	beq.n	8004d7e <HAL_SPI_Init+0x9e>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004cec:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8004cf0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004cf4:	b91b      	cbnz	r3, 8004cfe <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8004cf6:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8004cfa:	f7fd f92d 	bl	8001f58 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8004cfe:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8004d00:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8004d02:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8004d06:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d08:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8004d0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d0e:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8004d12:	600b      	str	r3, [r1, #0]
 8004d14:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d18:	d92e      	bls.n	8004d78 <HAL_SPI_Init+0x98>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004d1a:	4618      	mov	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004d1c:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d20:	bf18      	it	ne
 8004d22:	62a3      	strne	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004d24:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004d26:	b92b      	cbnz	r3, 8004d34 <HAL_SPI_Init+0x54>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d28:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004d2c:	bf8c      	ite	hi
 8004d2e:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004d30:	2301      	movls	r3, #1
 8004d32:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004d34:	68a6      	ldr	r6, [r4, #8]
 8004d36:	6863      	ldr	r3, [r4, #4]
 8004d38:	69a5      	ldr	r5, [r4, #24]
 8004d3a:	4333      	orrs	r3, r6
 8004d3c:	6926      	ldr	r6, [r4, #16]
 8004d3e:	4333      	orrs	r3, r6
 8004d40:	6966      	ldr	r6, [r4, #20]
 8004d42:	4333      	orrs	r3, r6
 8004d44:	69e6      	ldr	r6, [r4, #28]
 8004d46:	4333      	orrs	r3, r6
 8004d48:	6a26      	ldr	r6, [r4, #32]
 8004d4a:	4333      	orrs	r3, r6
 8004d4c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004d4e:	4333      	orrs	r3, r6
 8004d50:	f405 7600 	and.w	r6, r5, #512	; 0x200
 8004d54:	4333      	orrs	r3, r6
 8004d56:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004d58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d5a:	431a      	orrs	r2, r3
 8004d5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004d5e:	0c2d      	lsrs	r5, r5, #16
 8004d60:	431a      	orrs	r2, r3
 8004d62:	f005 0504 	and.w	r5, r5, #4
 8004d66:	432a      	orrs	r2, r5
 8004d68:	4302      	orrs	r2, r0
  hspi->State     = HAL_SPI_STATE_READY;
 8004d6a:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d6c:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004d6e:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d70:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004d72:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  return HAL_OK;
 8004d76:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004d78:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004d7c:	e7d0      	b.n	8004d20 <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 8004d7e:	2001      	movs	r0, #1
}
 8004d80:	bd70      	pop	{r4, r5, r6, pc}

08004d82 <HAL_SPI_Transmit>:
{
 8004d82:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004d86:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8004d88:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8004d8c:	2b01      	cmp	r3, #1
{
 8004d8e:	4604      	mov	r4, r0
 8004d90:	460d      	mov	r5, r1
 8004d92:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8004d94:	f000 80b1 	beq.w	8004efa <HAL_SPI_Transmit+0x178>
 8004d98:	2301      	movs	r3, #1
 8004d9a:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8004d9e:	f7fd fba1 	bl	80024e4 <HAL_GetTick>
 8004da2:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8004da4:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8004da8:	b2c0      	uxtb	r0, r0
 8004daa:	2801      	cmp	r0, #1
 8004dac:	f040 80a3 	bne.w	8004ef6 <HAL_SPI_Transmit+0x174>
  if ((pData == NULL) || (Size == 0U))
 8004db0:	2d00      	cmp	r5, #0
 8004db2:	d05f      	beq.n	8004e74 <HAL_SPI_Transmit+0xf2>
 8004db4:	f1b8 0f00 	cmp.w	r8, #0
 8004db8:	d05c      	beq.n	8004e74 <HAL_SPI_Transmit+0xf2>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dc0:	2000      	movs	r0, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dc2:	68a3      	ldr	r3, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dc4:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004dc6:	6420      	str	r0, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 8004dc8:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->RxXferSize  = 0U;
 8004dcc:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004dd0:	f8a4 0046 	strh.w	r0, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004dd4:	6520      	str	r0, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004dd6:	64e0      	str	r0, [r4, #76]	; 0x4c
 8004dd8:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004dda:	63a5      	str	r5, [r4, #56]	; 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ddc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8004de0:	bf08      	it	eq
 8004de2:	6803      	ldreq	r3, [r0, #0]
  hspi->TxXferSize  = Size;
 8004de4:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
    SPI_1LINE_TX(hspi);
 8004de8:	bf04      	itt	eq
 8004dea:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8004dee:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004df0:	6803      	ldr	r3, [r0, #0]
 8004df2:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8004df4:	bf5e      	ittt	pl
 8004df6:	6803      	ldrpl	r3, [r0, #0]
 8004df8:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8004dfc:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004dfe:	68e3      	ldr	r3, [r4, #12]
 8004e00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e04:	6863      	ldr	r3, [r4, #4]
 8004e06:	d93e      	bls.n	8004e86 <HAL_SPI_Transmit+0x104>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e08:	b113      	cbz	r3, 8004e10 <HAL_SPI_Transmit+0x8e>
 8004e0a:	f1b8 0f01 	cmp.w	r8, #1
 8004e0e:	d107      	bne.n	8004e20 <HAL_SPI_Transmit+0x9e>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e10:	f835 3b02 	ldrh.w	r3, [r5], #2
 8004e14:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e16:	63a5      	str	r5, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8004e18:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8004e20:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	b9a3      	cbnz	r3, 8004e50 <HAL_SPI_Transmit+0xce>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e26:	463a      	mov	r2, r7
 8004e28:	4631      	mov	r1, r6
 8004e2a:	4620      	mov	r0, r4
 8004e2c:	f7ff ff36 	bl	8004c9c <SPI_EndRxTxTransaction>
 8004e30:	2800      	cmp	r0, #0
 8004e32:	d15d      	bne.n	8004ef0 <HAL_SPI_Transmit+0x16e>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e34:	68a3      	ldr	r3, [r4, #8]
 8004e36:	b933      	cbnz	r3, 8004e46 <HAL_SPI_Transmit+0xc4>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e38:	9301      	str	r3, [sp, #4]
 8004e3a:	6823      	ldr	r3, [r4, #0]
 8004e3c:	68da      	ldr	r2, [r3, #12]
 8004e3e:	9201      	str	r2, [sp, #4]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	9301      	str	r3, [sp, #4]
 8004e44:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e46:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 8004e48:	3000      	adds	r0, #0
 8004e4a:	bf18      	it	ne
 8004e4c:	2001      	movne	r0, #1
 8004e4e:	e011      	b.n	8004e74 <HAL_SPI_Transmit+0xf2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e50:	6822      	ldr	r2, [r4, #0]
 8004e52:	6893      	ldr	r3, [r2, #8]
 8004e54:	0798      	lsls	r0, r3, #30
 8004e56:	d505      	bpl.n	8004e64 <HAL_SPI_Transmit+0xe2>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e58:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004e5a:	f833 1b02 	ldrh.w	r1, [r3], #2
 8004e5e:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e60:	63a3      	str	r3, [r4, #56]	; 0x38
 8004e62:	e7d9      	b.n	8004e18 <HAL_SPI_Transmit+0x96>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e64:	f7fd fb3e 	bl	80024e4 <HAL_GetTick>
 8004e68:	1bc0      	subs	r0, r0, r7
 8004e6a:	42b0      	cmp	r0, r6
 8004e6c:	d3d8      	bcc.n	8004e20 <HAL_SPI_Transmit+0x9e>
 8004e6e:	1c71      	adds	r1, r6, #1
 8004e70:	d0d6      	beq.n	8004e20 <HAL_SPI_Transmit+0x9e>
          errorcode = HAL_TIMEOUT;
 8004e72:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8004e74:	2301      	movs	r3, #1
 8004e76:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8004e80:	b002      	add	sp, #8
 8004e82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e86:	b113      	cbz	r3, 8004e8e <HAL_SPI_Transmit+0x10c>
 8004e88:	f1b8 0f01 	cmp.w	r8, #1
 8004e8c:	d113      	bne.n	8004eb6 <HAL_SPI_Transmit+0x134>
      if (hspi->TxXferCount > 1U)
 8004e8e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d906      	bls.n	8004ea4 <HAL_SPI_Transmit+0x122>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e96:	f835 3b02 	ldrh.w	r3, [r5], #2
 8004e9a:	60c3      	str	r3, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e9c:	63a5      	str	r5, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004e9e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004ea0:	3b02      	subs	r3, #2
 8004ea2:	e006      	b.n	8004eb2 <HAL_SPI_Transmit+0x130>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ea4:	782b      	ldrb	r3, [r5, #0]
 8004ea6:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr ++;
 8004ea8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004eaa:	3301      	adds	r3, #1
 8004eac:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8004eae:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8004eb6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d0b3      	beq.n	8004e26 <HAL_SPI_Transmit+0xa4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ebe:	6823      	ldr	r3, [r4, #0]
 8004ec0:	689a      	ldr	r2, [r3, #8]
 8004ec2:	0792      	lsls	r2, r2, #30
 8004ec4:	d50c      	bpl.n	8004ee0 <HAL_SPI_Transmit+0x15e>
        if (hspi->TxXferCount > 1U)
 8004ec6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8004ec8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004eca:	b292      	uxth	r2, r2
 8004ecc:	2a01      	cmp	r2, #1
 8004ece:	d904      	bls.n	8004eda <HAL_SPI_Transmit+0x158>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ed0:	f830 2b02 	ldrh.w	r2, [r0], #2
 8004ed4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ed6:	63a0      	str	r0, [r4, #56]	; 0x38
 8004ed8:	e7e1      	b.n	8004e9e <HAL_SPI_Transmit+0x11c>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004eda:	7802      	ldrb	r2, [r0, #0]
 8004edc:	731a      	strb	r2, [r3, #12]
 8004ede:	e7e3      	b.n	8004ea8 <HAL_SPI_Transmit+0x126>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ee0:	f7fd fb00 	bl	80024e4 <HAL_GetTick>
 8004ee4:	1bc0      	subs	r0, r0, r7
 8004ee6:	4286      	cmp	r6, r0
 8004ee8:	d8e5      	bhi.n	8004eb6 <HAL_SPI_Transmit+0x134>
 8004eea:	1c73      	adds	r3, r6, #1
 8004eec:	d0e3      	beq.n	8004eb6 <HAL_SPI_Transmit+0x134>
 8004eee:	e7c0      	b.n	8004e72 <HAL_SPI_Transmit+0xf0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ef0:	2320      	movs	r3, #32
 8004ef2:	6623      	str	r3, [r4, #96]	; 0x60
 8004ef4:	e79e      	b.n	8004e34 <HAL_SPI_Transmit+0xb2>
    errorcode = HAL_BUSY;
 8004ef6:	2002      	movs	r0, #2
 8004ef8:	e7bc      	b.n	8004e74 <HAL_SPI_Transmit+0xf2>
  __HAL_LOCK(hspi);
 8004efa:	2002      	movs	r0, #2
 8004efc:	e7c0      	b.n	8004e80 <HAL_SPI_Transmit+0xfe>

08004efe <HAL_SPI_TransmitReceive>:
{
 8004efe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f02:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8004f04:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 8004f08:	9f08      	ldr	r7, [sp, #32]
  __HAL_LOCK(hspi);
 8004f0a:	2b01      	cmp	r3, #1
{
 8004f0c:	4604      	mov	r4, r0
 8004f0e:	460d      	mov	r5, r1
 8004f10:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8004f12:	f000 8115 	beq.w	8005140 <HAL_SPI_TransmitReceive+0x242>
 8004f16:	2301      	movs	r3, #1
 8004f18:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8004f1c:	f7fd fae2 	bl	80024e4 <HAL_GetTick>
  tmp_state           = hspi->State;
 8004f20:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tmp_mode            = hspi->Init.Mode;
 8004f24:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8004f26:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004f28:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8004f2a:	4680      	mov	r8, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004f2c:	d00a      	beq.n	8004f44 <HAL_SPI_TransmitReceive+0x46>
 8004f2e:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8004f32:	f040 8103 	bne.w	800513c <HAL_SPI_TransmitReceive+0x23e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004f36:	68a0      	ldr	r0, [r4, #8]
 8004f38:	2800      	cmp	r0, #0
 8004f3a:	f040 80ff 	bne.w	800513c <HAL_SPI_TransmitReceive+0x23e>
 8004f3e:	2b04      	cmp	r3, #4
 8004f40:	f040 80fc 	bne.w	800513c <HAL_SPI_TransmitReceive+0x23e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004f44:	2d00      	cmp	r5, #0
 8004f46:	d049      	beq.n	8004fdc <HAL_SPI_TransmitReceive+0xde>
 8004f48:	f1b9 0f00 	cmp.w	r9, #0
 8004f4c:	d046      	beq.n	8004fdc <HAL_SPI_TransmitReceive+0xde>
 8004f4e:	2e00      	cmp	r6, #0
 8004f50:	d044      	beq.n	8004fdc <HAL_SPI_TransmitReceive+0xde>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004f52:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004f56:	68e2      	ldr	r2, [r4, #12]
 8004f58:	6820      	ldr	r0, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004f5a:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004f5e:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004f60:	bf1c      	itt	ne
 8004f62:	2305      	movne	r3, #5
 8004f64:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	6623      	str	r3, [r4, #96]	; 0x60
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004f6c:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  hspi->RxXferCount = Size;
 8004f70:	f8a4 6046 	strh.w	r6, [r4, #70]	; 0x46
  hspi->TxXferCount = Size;
 8004f74:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004f76:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004f78:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxXferSize  = Size;
 8004f7a:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004f7e:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004f80:	87a6      	strh	r6, [r4, #60]	; 0x3c
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f82:	6843      	ldr	r3, [r0, #4]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004f84:	d801      	bhi.n	8004f8a <HAL_SPI_TransmitReceive+0x8c>
 8004f86:	2e01      	cmp	r6, #1
 8004f88:	d92a      	bls.n	8004fe0 <HAL_SPI_TransmitReceive+0xe2>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f8e:	6043      	str	r3, [r0, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f90:	6803      	ldr	r3, [r0, #0]
 8004f92:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8004f94:	bf5e      	ittt	pl
 8004f96:	6803      	ldrpl	r3, [r0, #0]
 8004f98:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8004f9c:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f9e:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 8004fa2:	d956      	bls.n	8005052 <HAL_SPI_TransmitReceive+0x154>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fa4:	b109      	cbz	r1, 8004faa <HAL_SPI_TransmitReceive+0xac>
 8004fa6:	2e01      	cmp	r6, #1
 8004fa8:	d107      	bne.n	8004fba <HAL_SPI_TransmitReceive+0xbc>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004faa:	f835 3b02 	ldrh.w	r3, [r5], #2
 8004fae:	60c3      	str	r3, [r0, #12]
      hspi->TxXferCount--;
 8004fb0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fb2:	63a5      	str	r5, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8004fb4:	3b01      	subs	r3, #1
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8004fba:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fbc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	b98b      	cbnz	r3, 8004fe6 <HAL_SPI_TransmitReceive+0xe8>
 8004fc2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	b96b      	cbnz	r3, 8004fe6 <HAL_SPI_TransmitReceive+0xe8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fca:	4642      	mov	r2, r8
 8004fcc:	4639      	mov	r1, r7
 8004fce:	4620      	mov	r0, r4
 8004fd0:	f7ff fe64 	bl	8004c9c <SPI_EndRxTxTransaction>
 8004fd4:	2800      	cmp	r0, #0
 8004fd6:	d034      	beq.n	8005042 <HAL_SPI_TransmitReceive+0x144>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fd8:	2320      	movs	r3, #32
 8004fda:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8004fdc:	2001      	movs	r0, #1
 8004fde:	e030      	b.n	8005042 <HAL_SPI_TransmitReceive+0x144>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004fe0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004fe4:	e7d3      	b.n	8004f8e <HAL_SPI_TransmitReceive+0x90>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004fe6:	6822      	ldr	r2, [r4, #0]
 8004fe8:	6893      	ldr	r3, [r2, #8]
 8004fea:	0799      	lsls	r1, r3, #30
 8004fec:	d50d      	bpl.n	800500a <HAL_SPI_TransmitReceive+0x10c>
 8004fee:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	b153      	cbz	r3, 800500a <HAL_SPI_TransmitReceive+0x10c>
 8004ff4:	b14d      	cbz	r5, 800500a <HAL_SPI_TransmitReceive+0x10c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ff6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004ff8:	f833 1b02 	ldrh.w	r1, [r3], #2
 8004ffc:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ffe:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8005000:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005002:	3b01      	subs	r3, #1
 8005004:	b29b      	uxth	r3, r3
 8005006:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8005008:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800500a:	6893      	ldr	r3, [r2, #8]
 800500c:	07db      	lsls	r3, r3, #31
 800500e:	d50f      	bpl.n	8005030 <HAL_SPI_TransmitReceive+0x132>
 8005010:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005014:	b29b      	uxth	r3, r3
 8005016:	b15b      	cbz	r3, 8005030 <HAL_SPI_TransmitReceive+0x132>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005018:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800501a:	68d2      	ldr	r2, [r2, #12]
 800501c:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005020:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8005022:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005026:	3b01      	subs	r3, #1
 8005028:	b29b      	uxth	r3, r3
 800502a:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 800502e:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005030:	f7fd fa58 	bl	80024e4 <HAL_GetTick>
 8005034:	eba0 0008 	sub.w	r0, r0, r8
 8005038:	4287      	cmp	r7, r0
 800503a:	d8bf      	bhi.n	8004fbc <HAL_SPI_TransmitReceive+0xbe>
 800503c:	1c7e      	adds	r6, r7, #1
 800503e:	d0bd      	beq.n	8004fbc <HAL_SPI_TransmitReceive+0xbe>
        errorcode = HAL_TIMEOUT;
 8005040:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8005042:	2301      	movs	r3, #1
 8005044:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005048:	2300      	movs	r3, #0
 800504a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 800504e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005052:	b109      	cbz	r1, 8005058 <HAL_SPI_TransmitReceive+0x15a>
 8005054:	2e01      	cmp	r6, #1
 8005056:	d10b      	bne.n	8005070 <HAL_SPI_TransmitReceive+0x172>
      if (hspi->TxXferCount > 1U)
 8005058:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800505a:	b29b      	uxth	r3, r3
 800505c:	2b01      	cmp	r3, #1
 800505e:	d951      	bls.n	8005104 <HAL_SPI_TransmitReceive+0x206>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005060:	f835 3b02 	ldrh.w	r3, [r5], #2
 8005064:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount -= 2U;
 8005066:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005068:	63a5      	str	r5, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800506a:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 800506c:	b29b      	uxth	r3, r3
 800506e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8005070:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005072:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005074:	b29b      	uxth	r3, r3
 8005076:	b923      	cbnz	r3, 8005082 <HAL_SPI_TransmitReceive+0x184>
 8005078:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800507c:	b29b      	uxth	r3, r3
 800507e:	2b00      	cmp	r3, #0
 8005080:	d0a3      	beq.n	8004fca <HAL_SPI_TransmitReceive+0xcc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005082:	6822      	ldr	r2, [r4, #0]
 8005084:	6893      	ldr	r3, [r2, #8]
 8005086:	0798      	lsls	r0, r3, #30
 8005088:	d511      	bpl.n	80050ae <HAL_SPI_TransmitReceive+0x1b0>
 800508a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800508c:	b29b      	uxth	r3, r3
 800508e:	b173      	cbz	r3, 80050ae <HAL_SPI_TransmitReceive+0x1b0>
 8005090:	b16d      	cbz	r5, 80050ae <HAL_SPI_TransmitReceive+0x1b0>
        if (hspi->TxXferCount > 1U)
 8005092:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005094:	b29b      	uxth	r3, r3
 8005096:	2b01      	cmp	r3, #1
 8005098:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800509a:	d93b      	bls.n	8005114 <HAL_SPI_TransmitReceive+0x216>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800509c:	f833 1b02 	ldrh.w	r1, [r3], #2
 80050a0:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80050a2:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80050a4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80050a6:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 80050ac:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050ae:	6822      	ldr	r2, [r4, #0]
 80050b0:	6893      	ldr	r3, [r2, #8]
 80050b2:	07d9      	lsls	r1, r3, #31
 80050b4:	d51d      	bpl.n	80050f2 <HAL_SPI_TransmitReceive+0x1f4>
 80050b6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	b1cb      	cbz	r3, 80050f2 <HAL_SPI_TransmitReceive+0x1f4>
        if (hspi->RxXferCount > 1U)
 80050be:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80050c8:	d92c      	bls.n	8005124 <HAL_SPI_TransmitReceive+0x226>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80050ca:	68d1      	ldr	r1, [r2, #12]
 80050cc:	f823 1b02 	strh.w	r1, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80050d0:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80050d2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80050d6:	3b02      	subs	r3, #2
 80050d8:	b29b      	uxth	r3, r3
 80050da:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80050de:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d803      	bhi.n	80050f0 <HAL_SPI_TransmitReceive+0x1f2>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80050e8:	6853      	ldr	r3, [r2, #4]
 80050ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80050ee:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 80050f0:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80050f2:	f7fd f9f7 	bl	80024e4 <HAL_GetTick>
 80050f6:	eba0 0008 	sub.w	r0, r0, r8
 80050fa:	4287      	cmp	r7, r0
 80050fc:	d8b9      	bhi.n	8005072 <HAL_SPI_TransmitReceive+0x174>
 80050fe:	1c7b      	adds	r3, r7, #1
 8005100:	d0b7      	beq.n	8005072 <HAL_SPI_TransmitReceive+0x174>
 8005102:	e79d      	b.n	8005040 <HAL_SPI_TransmitReceive+0x142>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005104:	782b      	ldrb	r3, [r5, #0]
 8005106:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr++;
 8005108:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800510a:	3301      	adds	r3, #1
 800510c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800510e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005110:	3b01      	subs	r3, #1
 8005112:	e7ab      	b.n	800506c <HAL_SPI_TransmitReceive+0x16e>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8005118:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800511a:	3301      	adds	r3, #1
 800511c:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800511e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005120:	3b01      	subs	r3, #1
 8005122:	e7c1      	b.n	80050a8 <HAL_SPI_TransmitReceive+0x1aa>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005124:	7b12      	ldrb	r2, [r2, #12]
 8005126:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005128:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800512a:	3301      	adds	r3, #1
 800512c:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 800512e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005132:	3b01      	subs	r3, #1
 8005134:	b29b      	uxth	r3, r3
 8005136:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800513a:	e7d9      	b.n	80050f0 <HAL_SPI_TransmitReceive+0x1f2>
    errorcode = HAL_BUSY;
 800513c:	2002      	movs	r0, #2
 800513e:	e780      	b.n	8005042 <HAL_SPI_TransmitReceive+0x144>
  __HAL_LOCK(hspi);
 8005140:	2002      	movs	r0, #2
}
 8005142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08005148 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005148:	6a03      	ldr	r3, [r0, #32]
 800514a:	f023 0301 	bic.w	r3, r3, #1
 800514e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005150:	6a03      	ldr	r3, [r0, #32]
{
 8005152:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005154:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005156:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005158:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800515a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800515e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005162:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005164:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8005166:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800516a:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800516c:	4d1b      	ldr	r5, [pc, #108]	; (80051dc <TIM_OC1_SetConfig+0x94>)
 800516e:	42a8      	cmp	r0, r5
 8005170:	d00f      	beq.n	8005192 <TIM_OC1_SetConfig+0x4a>
 8005172:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005176:	42a8      	cmp	r0, r5
 8005178:	d00b      	beq.n	8005192 <TIM_OC1_SetConfig+0x4a>
 800517a:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800517e:	42a8      	cmp	r0, r5
 8005180:	d007      	beq.n	8005192 <TIM_OC1_SetConfig+0x4a>
 8005182:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005186:	42a8      	cmp	r0, r5
 8005188:	d003      	beq.n	8005192 <TIM_OC1_SetConfig+0x4a>
 800518a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800518e:	42a8      	cmp	r0, r5
 8005190:	d11e      	bne.n	80051d0 <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005192:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8005194:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8005198:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800519a:	4d10      	ldr	r5, [pc, #64]	; (80051dc <TIM_OC1_SetConfig+0x94>)
 800519c:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 800519e:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051a2:	d00f      	beq.n	80051c4 <TIM_OC1_SetConfig+0x7c>
 80051a4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80051a8:	42a8      	cmp	r0, r5
 80051aa:	d00b      	beq.n	80051c4 <TIM_OC1_SetConfig+0x7c>
 80051ac:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80051b0:	42a8      	cmp	r0, r5
 80051b2:	d007      	beq.n	80051c4 <TIM_OC1_SetConfig+0x7c>
 80051b4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80051b8:	42a8      	cmp	r0, r5
 80051ba:	d003      	beq.n	80051c4 <TIM_OC1_SetConfig+0x7c>
 80051bc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80051c0:	42a8      	cmp	r0, r5
 80051c2:	d105      	bne.n	80051d0 <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051c4:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051c8:	698e      	ldr	r6, [r1, #24]
 80051ca:	694c      	ldr	r4, [r1, #20]
 80051cc:	4334      	orrs	r4, r6
 80051ce:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051d0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051d2:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051d4:	684a      	ldr	r2, [r1, #4]
 80051d6:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051d8:	6203      	str	r3, [r0, #32]
 80051da:	bd70      	pop	{r4, r5, r6, pc}
 80051dc:	40012c00 	.word	0x40012c00

080051e0 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051e0:	6a03      	ldr	r3, [r0, #32]
 80051e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051e6:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051e8:	6a03      	ldr	r3, [r0, #32]
{
 80051ea:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051ec:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051ee:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051f0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051f2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80051f6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80051fa:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051fc:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80051fe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005202:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005206:	4d16      	ldr	r5, [pc, #88]	; (8005260 <TIM_OC3_SetConfig+0x80>)
 8005208:	42a8      	cmp	r0, r5
 800520a:	d003      	beq.n	8005214 <TIM_OC3_SetConfig+0x34>
 800520c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005210:	42a8      	cmp	r0, r5
 8005212:	d10d      	bne.n	8005230 <TIM_OC3_SetConfig+0x50>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005214:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8005216:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800521a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800521e:	4d10      	ldr	r5, [pc, #64]	; (8005260 <TIM_OC3_SetConfig+0x80>)
 8005220:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8005222:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005226:	d00e      	beq.n	8005246 <TIM_OC3_SetConfig+0x66>
 8005228:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800522c:	42a8      	cmp	r0, r5
 800522e:	d00a      	beq.n	8005246 <TIM_OC3_SetConfig+0x66>
 8005230:	4d0c      	ldr	r5, [pc, #48]	; (8005264 <TIM_OC3_SetConfig+0x84>)
 8005232:	42a8      	cmp	r0, r5
 8005234:	d007      	beq.n	8005246 <TIM_OC3_SetConfig+0x66>
 8005236:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800523a:	42a8      	cmp	r0, r5
 800523c:	d003      	beq.n	8005246 <TIM_OC3_SetConfig+0x66>
 800523e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005242:	42a8      	cmp	r0, r5
 8005244:	d106      	bne.n	8005254 <TIM_OC3_SetConfig+0x74>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005246:	f424 5540 	bic.w	r5, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800524a:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800524c:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800524e:	4334      	orrs	r4, r6
 8005250:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005254:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005256:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005258:	684a      	ldr	r2, [r1, #4]
 800525a:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800525c:	6203      	str	r3, [r0, #32]
 800525e:	bd70      	pop	{r4, r5, r6, pc}
 8005260:	40012c00 	.word	0x40012c00
 8005264:	40014000 	.word	0x40014000

08005268 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005268:	6a03      	ldr	r3, [r0, #32]
 800526a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800526e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005270:	6a03      	ldr	r3, [r0, #32]
{
 8005272:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005274:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005276:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005278:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800527a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800527e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005282:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005286:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8005288:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800528c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005290:	4d0e      	ldr	r5, [pc, #56]	; (80052cc <TIM_OC4_SetConfig+0x64>)
 8005292:	42a8      	cmp	r0, r5
 8005294:	d00f      	beq.n	80052b6 <TIM_OC4_SetConfig+0x4e>
 8005296:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800529a:	42a8      	cmp	r0, r5
 800529c:	d00b      	beq.n	80052b6 <TIM_OC4_SetConfig+0x4e>
 800529e:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80052a2:	42a8      	cmp	r0, r5
 80052a4:	d007      	beq.n	80052b6 <TIM_OC4_SetConfig+0x4e>
 80052a6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80052aa:	42a8      	cmp	r0, r5
 80052ac:	d003      	beq.n	80052b6 <TIM_OC4_SetConfig+0x4e>
 80052ae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80052b2:	42a8      	cmp	r0, r5
 80052b4:	d104      	bne.n	80052c0 <TIM_OC4_SetConfig+0x58>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052b6:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052b8:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052bc:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052c0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052c2:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052c4:	684a      	ldr	r2, [r1, #4]
 80052c6:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052c8:	6203      	str	r3, [r0, #32]
 80052ca:	bd30      	pop	{r4, r5, pc}
 80052cc:	40012c00 	.word	0x40012c00

080052d0 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80052d0:	6a03      	ldr	r3, [r0, #32]
 80052d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052d6:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052d8:	6a03      	ldr	r3, [r0, #32]
{
 80052da:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052dc:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80052de:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052e0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80052e2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80052e6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 80052ea:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80052ec:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 80052ee:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80052f2:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052f6:	4d0f      	ldr	r5, [pc, #60]	; (8005334 <TIM_OC5_SetConfig+0x64>)
 80052f8:	42a8      	cmp	r0, r5
 80052fa:	d00f      	beq.n	800531c <TIM_OC5_SetConfig+0x4c>
 80052fc:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005300:	42a8      	cmp	r0, r5
 8005302:	d00b      	beq.n	800531c <TIM_OC5_SetConfig+0x4c>
 8005304:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005308:	42a8      	cmp	r0, r5
 800530a:	d007      	beq.n	800531c <TIM_OC5_SetConfig+0x4c>
 800530c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005310:	42a8      	cmp	r0, r5
 8005312:	d003      	beq.n	800531c <TIM_OC5_SetConfig+0x4c>
 8005314:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005318:	42a8      	cmp	r0, r5
 800531a:	d104      	bne.n	8005326 <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800531c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 800531e:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005322:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005326:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005328:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800532a:	684a      	ldr	r2, [r1, #4]
 800532c:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800532e:	6203      	str	r3, [r0, #32]
 8005330:	bd30      	pop	{r4, r5, pc}
 8005332:	bf00      	nop
 8005334:	40012c00 	.word	0x40012c00

08005338 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005338:	6a03      	ldr	r3, [r0, #32]
 800533a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800533e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005340:	6a03      	ldr	r3, [r0, #32]
{
 8005342:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005344:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005346:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005348:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800534a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800534e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005352:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005356:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005358:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800535c:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005360:	4d0e      	ldr	r5, [pc, #56]	; (800539c <TIM_OC6_SetConfig+0x64>)
 8005362:	42a8      	cmp	r0, r5
 8005364:	d00f      	beq.n	8005386 <TIM_OC6_SetConfig+0x4e>
 8005366:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800536a:	42a8      	cmp	r0, r5
 800536c:	d00b      	beq.n	8005386 <TIM_OC6_SetConfig+0x4e>
 800536e:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005372:	42a8      	cmp	r0, r5
 8005374:	d007      	beq.n	8005386 <TIM_OC6_SetConfig+0x4e>
 8005376:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800537a:	42a8      	cmp	r0, r5
 800537c:	d003      	beq.n	8005386 <TIM_OC6_SetConfig+0x4e>
 800537e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005382:	42a8      	cmp	r0, r5
 8005384:	d104      	bne.n	8005390 <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005386:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005388:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800538c:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005390:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005392:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005394:	684a      	ldr	r2, [r1, #4]
 8005396:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005398:	6203      	str	r3, [r0, #32]
 800539a:	bd30      	pop	{r4, r5, pc}
 800539c:	40012c00 	.word	0x40012c00

080053a0 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053a0:	6803      	ldr	r3, [r0, #0]
 80053a2:	68da      	ldr	r2, [r3, #12]
 80053a4:	f042 0201 	orr.w	r2, r2, #1
 80053a8:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053aa:	6899      	ldr	r1, [r3, #8]
 80053ac:	4a06      	ldr	r2, [pc, #24]	; (80053c8 <HAL_TIM_Base_Start_IT+0x28>)
 80053ae:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053b0:	2a06      	cmp	r2, #6
 80053b2:	d006      	beq.n	80053c2 <HAL_TIM_Base_Start_IT+0x22>
 80053b4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    __HAL_TIM_ENABLE(htim);
 80053b8:	bf1e      	ittt	ne
 80053ba:	681a      	ldrne	r2, [r3, #0]
 80053bc:	f042 0201 	orrne.w	r2, r2, #1
 80053c0:	601a      	strne	r2, [r3, #0]
}
 80053c2:	2000      	movs	r0, #0
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	00010007 	.word	0x00010007

080053cc <HAL_TIM_PWM_MspInit>:
 80053cc:	4770      	bx	lr

080053ce <HAL_TIM_OC_DelayElapsedCallback>:
 80053ce:	4770      	bx	lr

080053d0 <HAL_TIM_IC_CaptureCallback>:
 80053d0:	4770      	bx	lr

080053d2 <HAL_TIM_PWM_PulseFinishedCallback>:
 80053d2:	4770      	bx	lr

080053d4 <HAL_TIM_TriggerCallback>:
 80053d4:	4770      	bx	lr

080053d6 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053d6:	6803      	ldr	r3, [r0, #0]
 80053d8:	691a      	ldr	r2, [r3, #16]
 80053da:	0791      	lsls	r1, r2, #30
{
 80053dc:	b510      	push	{r4, lr}
 80053de:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053e0:	d50f      	bpl.n	8005402 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053e2:	68da      	ldr	r2, [r3, #12]
 80053e4:	0792      	lsls	r2, r2, #30
 80053e6:	d50c      	bpl.n	8005402 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053e8:	f06f 0202 	mvn.w	r2, #2
 80053ec:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053ee:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053f0:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053f2:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053f4:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053f6:	f000 8085 	beq.w	8005504 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 80053fa:	f7ff ffe9 	bl	80053d0 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053fe:	2300      	movs	r3, #0
 8005400:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005402:	6823      	ldr	r3, [r4, #0]
 8005404:	691a      	ldr	r2, [r3, #16]
 8005406:	0752      	lsls	r2, r2, #29
 8005408:	d510      	bpl.n	800542c <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800540a:	68da      	ldr	r2, [r3, #12]
 800540c:	0750      	lsls	r0, r2, #29
 800540e:	d50d      	bpl.n	800542c <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005410:	f06f 0204 	mvn.w	r2, #4
 8005414:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005416:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005418:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800541a:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800541e:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8005420:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005422:	d075      	beq.n	8005510 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8005424:	f7ff ffd4 	bl	80053d0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005428:	2300      	movs	r3, #0
 800542a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800542c:	6823      	ldr	r3, [r4, #0]
 800542e:	691a      	ldr	r2, [r3, #16]
 8005430:	0711      	lsls	r1, r2, #28
 8005432:	d50f      	bpl.n	8005454 <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005434:	68da      	ldr	r2, [r3, #12]
 8005436:	0712      	lsls	r2, r2, #28
 8005438:	d50c      	bpl.n	8005454 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800543a:	f06f 0208 	mvn.w	r2, #8
 800543e:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005440:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005442:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005444:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005446:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8005448:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800544a:	d067      	beq.n	800551c <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800544c:	f7ff ffc0 	bl	80053d0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005450:	2300      	movs	r3, #0
 8005452:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005454:	6823      	ldr	r3, [r4, #0]
 8005456:	691a      	ldr	r2, [r3, #16]
 8005458:	06d0      	lsls	r0, r2, #27
 800545a:	d510      	bpl.n	800547e <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800545c:	68da      	ldr	r2, [r3, #12]
 800545e:	06d1      	lsls	r1, r2, #27
 8005460:	d50d      	bpl.n	800547e <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005462:	f06f 0210 	mvn.w	r2, #16
 8005466:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005468:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800546a:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800546c:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005470:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8005472:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005474:	d058      	beq.n	8005528 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8005476:	f7ff ffab 	bl	80053d0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800547a:	2300      	movs	r3, #0
 800547c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800547e:	6823      	ldr	r3, [r4, #0]
 8005480:	691a      	ldr	r2, [r3, #16]
 8005482:	07d2      	lsls	r2, r2, #31
 8005484:	d508      	bpl.n	8005498 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005486:	68da      	ldr	r2, [r3, #12]
 8005488:	07d0      	lsls	r0, r2, #31
 800548a:	d505      	bpl.n	8005498 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800548c:	f06f 0201 	mvn.w	r2, #1
 8005490:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005492:	4620      	mov	r0, r4
 8005494:	f7fc fc18 	bl	8001cc8 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005498:	6823      	ldr	r3, [r4, #0]
 800549a:	691a      	ldr	r2, [r3, #16]
 800549c:	0611      	lsls	r1, r2, #24
 800549e:	d508      	bpl.n	80054b2 <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054a0:	68da      	ldr	r2, [r3, #12]
 80054a2:	0612      	lsls	r2, r2, #24
 80054a4:	d505      	bpl.n	80054b2 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054a6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80054aa:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80054ac:	4620      	mov	r0, r4
 80054ae:	f000 fab4 	bl	8005a1a <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80054b2:	6823      	ldr	r3, [r4, #0]
 80054b4:	691a      	ldr	r2, [r3, #16]
 80054b6:	05d0      	lsls	r0, r2, #23
 80054b8:	d508      	bpl.n	80054cc <HAL_TIM_IRQHandler+0xf6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054ba:	68da      	ldr	r2, [r3, #12]
 80054bc:	0611      	lsls	r1, r2, #24
 80054be:	d505      	bpl.n	80054cc <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80054c0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80054c4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80054c6:	4620      	mov	r0, r4
 80054c8:	f000 faa8 	bl	8005a1c <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054cc:	6823      	ldr	r3, [r4, #0]
 80054ce:	691a      	ldr	r2, [r3, #16]
 80054d0:	0652      	lsls	r2, r2, #25
 80054d2:	d508      	bpl.n	80054e6 <HAL_TIM_IRQHandler+0x110>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054d4:	68da      	ldr	r2, [r3, #12]
 80054d6:	0650      	lsls	r0, r2, #25
 80054d8:	d505      	bpl.n	80054e6 <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054de:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80054e0:	4620      	mov	r0, r4
 80054e2:	f7ff ff77 	bl	80053d4 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054e6:	6823      	ldr	r3, [r4, #0]
 80054e8:	691a      	ldr	r2, [r3, #16]
 80054ea:	0691      	lsls	r1, r2, #26
 80054ec:	d522      	bpl.n	8005534 <HAL_TIM_IRQHandler+0x15e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054ee:	68da      	ldr	r2, [r3, #12]
 80054f0:	0692      	lsls	r2, r2, #26
 80054f2:	d51f      	bpl.n	8005534 <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80054f4:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80054f8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80054fa:	611a      	str	r2, [r3, #16]
}
 80054fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8005500:	f000 ba8a 	b.w	8005a18 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005504:	f7ff ff63 	bl	80053ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005508:	4620      	mov	r0, r4
 800550a:	f7ff ff62 	bl	80053d2 <HAL_TIM_PWM_PulseFinishedCallback>
 800550e:	e776      	b.n	80053fe <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005510:	f7ff ff5d 	bl	80053ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005514:	4620      	mov	r0, r4
 8005516:	f7ff ff5c 	bl	80053d2 <HAL_TIM_PWM_PulseFinishedCallback>
 800551a:	e785      	b.n	8005428 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800551c:	f7ff ff57 	bl	80053ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005520:	4620      	mov	r0, r4
 8005522:	f7ff ff56 	bl	80053d2 <HAL_TIM_PWM_PulseFinishedCallback>
 8005526:	e793      	b.n	8005450 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005528:	f7ff ff51 	bl	80053ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800552c:	4620      	mov	r0, r4
 800552e:	f7ff ff50 	bl	80053d2 <HAL_TIM_PWM_PulseFinishedCallback>
 8005532:	e7a2      	b.n	800547a <HAL_TIM_IRQHandler+0xa4>
 8005534:	bd10      	pop	{r4, pc}
	...

08005538 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005538:	4a30      	ldr	r2, [pc, #192]	; (80055fc <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800553a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800553c:	4290      	cmp	r0, r2
 800553e:	d012      	beq.n	8005566 <TIM_Base_SetConfig+0x2e>
 8005540:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005544:	d00f      	beq.n	8005566 <TIM_Base_SetConfig+0x2e>
 8005546:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800554a:	4290      	cmp	r0, r2
 800554c:	d00b      	beq.n	8005566 <TIM_Base_SetConfig+0x2e>
 800554e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005552:	4290      	cmp	r0, r2
 8005554:	d007      	beq.n	8005566 <TIM_Base_SetConfig+0x2e>
 8005556:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800555a:	4290      	cmp	r0, r2
 800555c:	d003      	beq.n	8005566 <TIM_Base_SetConfig+0x2e>
 800555e:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8005562:	4290      	cmp	r0, r2
 8005564:	d119      	bne.n	800559a <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 8005566:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005568:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800556c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800556e:	4a23      	ldr	r2, [pc, #140]	; (80055fc <TIM_Base_SetConfig+0xc4>)
 8005570:	4290      	cmp	r0, r2
 8005572:	d01d      	beq.n	80055b0 <TIM_Base_SetConfig+0x78>
 8005574:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005578:	d01a      	beq.n	80055b0 <TIM_Base_SetConfig+0x78>
 800557a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800557e:	4290      	cmp	r0, r2
 8005580:	d016      	beq.n	80055b0 <TIM_Base_SetConfig+0x78>
 8005582:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005586:	4290      	cmp	r0, r2
 8005588:	d012      	beq.n	80055b0 <TIM_Base_SetConfig+0x78>
 800558a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800558e:	4290      	cmp	r0, r2
 8005590:	d00e      	beq.n	80055b0 <TIM_Base_SetConfig+0x78>
 8005592:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8005596:	4290      	cmp	r0, r2
 8005598:	d00a      	beq.n	80055b0 <TIM_Base_SetConfig+0x78>
 800559a:	4a19      	ldr	r2, [pc, #100]	; (8005600 <TIM_Base_SetConfig+0xc8>)
 800559c:	4290      	cmp	r0, r2
 800559e:	d007      	beq.n	80055b0 <TIM_Base_SetConfig+0x78>
 80055a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055a4:	4290      	cmp	r0, r2
 80055a6:	d003      	beq.n	80055b0 <TIM_Base_SetConfig+0x78>
 80055a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055ac:	4290      	cmp	r0, r2
 80055ae:	d103      	bne.n	80055b8 <TIM_Base_SetConfig+0x80>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055b0:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80055b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055b6:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055b8:	694a      	ldr	r2, [r1, #20]
 80055ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055be:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80055c0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055c2:	688b      	ldr	r3, [r1, #8]
 80055c4:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80055c6:	680b      	ldr	r3, [r1, #0]
 80055c8:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055ca:	4b0c      	ldr	r3, [pc, #48]	; (80055fc <TIM_Base_SetConfig+0xc4>)
 80055cc:	4298      	cmp	r0, r3
 80055ce:	d00f      	beq.n	80055f0 <TIM_Base_SetConfig+0xb8>
 80055d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055d4:	4298      	cmp	r0, r3
 80055d6:	d00b      	beq.n	80055f0 <TIM_Base_SetConfig+0xb8>
 80055d8:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80055dc:	4298      	cmp	r0, r3
 80055de:	d007      	beq.n	80055f0 <TIM_Base_SetConfig+0xb8>
 80055e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055e4:	4298      	cmp	r0, r3
 80055e6:	d003      	beq.n	80055f0 <TIM_Base_SetConfig+0xb8>
 80055e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055ec:	4298      	cmp	r0, r3
 80055ee:	d101      	bne.n	80055f4 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 80055f0:	690b      	ldr	r3, [r1, #16]
 80055f2:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80055f4:	2301      	movs	r3, #1
 80055f6:	6143      	str	r3, [r0, #20]
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	40012c00 	.word	0x40012c00
 8005600:	40014000 	.word	0x40014000

08005604 <HAL_TIM_Base_Init>:
{
 8005604:	b510      	push	{r4, lr}
  if (htim == NULL)
 8005606:	4604      	mov	r4, r0
 8005608:	b1a0      	cbz	r0, 8005634 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800560a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800560e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005612:	b91b      	cbnz	r3, 800561c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8005614:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005618:	f7fc fcd2 	bl	8001fc0 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800561c:	2302      	movs	r3, #2
 800561e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005622:	6820      	ldr	r0, [r4, #0]
 8005624:	1d21      	adds	r1, r4, #4
 8005626:	f7ff ff87 	bl	8005538 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800562a:	2301      	movs	r3, #1
 800562c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005630:	2000      	movs	r0, #0
 8005632:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005634:	2001      	movs	r0, #1
}
 8005636:	bd10      	pop	{r4, pc}

08005638 <HAL_TIM_PWM_Init>:
{
 8005638:	b510      	push	{r4, lr}
  if (htim == NULL)
 800563a:	4604      	mov	r4, r0
 800563c:	b1a0      	cbz	r0, 8005668 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800563e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005642:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005646:	b91b      	cbnz	r3, 8005650 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8005648:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800564c:	f7ff febe 	bl	80053cc <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8005650:	2302      	movs	r3, #2
 8005652:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005656:	6820      	ldr	r0, [r4, #0]
 8005658:	1d21      	adds	r1, r4, #4
 800565a:	f7ff ff6d 	bl	8005538 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800565e:	2301      	movs	r3, #1
 8005660:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005664:	2000      	movs	r0, #0
 8005666:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005668:	2001      	movs	r0, #1
}
 800566a:	bd10      	pop	{r4, pc}

0800566c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800566c:	6a03      	ldr	r3, [r0, #32]
 800566e:	f023 0310 	bic.w	r3, r3, #16
 8005672:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8005674:	6a03      	ldr	r3, [r0, #32]
{
 8005676:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 8005678:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800567a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800567c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800567e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005682:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005686:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800568a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 800568c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005690:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005694:	4d16      	ldr	r5, [pc, #88]	; (80056f0 <TIM_OC2_SetConfig+0x84>)
 8005696:	42a8      	cmp	r0, r5
 8005698:	d003      	beq.n	80056a2 <TIM_OC2_SetConfig+0x36>
 800569a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800569e:	42a8      	cmp	r0, r5
 80056a0:	d10d      	bne.n	80056be <TIM_OC2_SetConfig+0x52>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056a2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80056a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056a8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056ac:	4d10      	ldr	r5, [pc, #64]	; (80056f0 <TIM_OC2_SetConfig+0x84>)
 80056ae:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 80056b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056b4:	d00e      	beq.n	80056d4 <TIM_OC2_SetConfig+0x68>
 80056b6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80056ba:	42a8      	cmp	r0, r5
 80056bc:	d00a      	beq.n	80056d4 <TIM_OC2_SetConfig+0x68>
 80056be:	4d0d      	ldr	r5, [pc, #52]	; (80056f4 <TIM_OC2_SetConfig+0x88>)
 80056c0:	42a8      	cmp	r0, r5
 80056c2:	d007      	beq.n	80056d4 <TIM_OC2_SetConfig+0x68>
 80056c4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80056c8:	42a8      	cmp	r0, r5
 80056ca:	d003      	beq.n	80056d4 <TIM_OC2_SetConfig+0x68>
 80056cc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80056d0:	42a8      	cmp	r0, r5
 80056d2:	d106      	bne.n	80056e2 <TIM_OC2_SetConfig+0x76>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80056d4:	f424 6540 	bic.w	r5, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80056d8:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80056da:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80056dc:	4334      	orrs	r4, r6
 80056de:	ea45 0484 	orr.w	r4, r5, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 80056e2:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80056e4:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80056e6:	684a      	ldr	r2, [r1, #4]
 80056e8:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80056ea:	6203      	str	r3, [r0, #32]
 80056ec:	bd70      	pop	{r4, r5, r6, pc}
 80056ee:	bf00      	nop
 80056f0:	40012c00 	.word	0x40012c00
 80056f4:	40014000 	.word	0x40014000

080056f8 <HAL_TIM_PWM_ConfigChannel>:
{
 80056f8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80056fa:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80056fe:	2b01      	cmp	r3, #1
{
 8005700:	4604      	mov	r4, r0
 8005702:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8005706:	d010      	beq.n	800572a <HAL_TIM_PWM_ConfigChannel+0x32>
 8005708:	2301      	movs	r3, #1
  switch (Channel)
 800570a:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 800570c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8005710:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 8005714:	d043      	beq.n	800579e <HAL_TIM_PWM_ConfigChannel+0xa6>
 8005716:	d809      	bhi.n	800572c <HAL_TIM_PWM_ConfigChannel+0x34>
 8005718:	b1fa      	cbz	r2, 800575a <HAL_TIM_PWM_ConfigChannel+0x62>
 800571a:	2a04      	cmp	r2, #4
 800571c:	d02e      	beq.n	800577c <HAL_TIM_PWM_ConfigChannel+0x84>
  htim->State = HAL_TIM_STATE_READY;
 800571e:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8005720:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005722:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005726:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800572a:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 800572c:	2a10      	cmp	r2, #16
 800572e:	d047      	beq.n	80057c0 <HAL_TIM_PWM_ConfigChannel+0xc8>
 8005730:	2a14      	cmp	r2, #20
 8005732:	d056      	beq.n	80057e2 <HAL_TIM_PWM_ConfigChannel+0xea>
 8005734:	2a0c      	cmp	r2, #12
 8005736:	d1f2      	bne.n	800571e <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005738:	6820      	ldr	r0, [r4, #0]
 800573a:	f7ff fd95 	bl	8005268 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800573e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005740:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005742:	69da      	ldr	r2, [r3, #28]
 8005744:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005748:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800574a:	69da      	ldr	r2, [r3, #28]
 800574c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005750:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005752:	69da      	ldr	r2, [r3, #28]
 8005754:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005758:	e030      	b.n	80057bc <HAL_TIM_PWM_ConfigChannel+0xc4>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800575a:	6820      	ldr	r0, [r4, #0]
 800575c:	f7ff fcf4 	bl	8005148 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005760:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005762:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005764:	699a      	ldr	r2, [r3, #24]
 8005766:	f042 0208 	orr.w	r2, r2, #8
 800576a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800576c:	699a      	ldr	r2, [r3, #24]
 800576e:	f022 0204 	bic.w	r2, r2, #4
 8005772:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005774:	699a      	ldr	r2, [r3, #24]
 8005776:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005778:	619a      	str	r2, [r3, #24]
      break;
 800577a:	e7d0      	b.n	800571e <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800577c:	6820      	ldr	r0, [r4, #0]
 800577e:	f7ff ff75 	bl	800566c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005782:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005784:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005786:	699a      	ldr	r2, [r3, #24]
 8005788:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800578c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800578e:	699a      	ldr	r2, [r3, #24]
 8005790:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005794:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005796:	699a      	ldr	r2, [r3, #24]
 8005798:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800579c:	e7ec      	b.n	8005778 <HAL_TIM_PWM_ConfigChannel+0x80>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800579e:	6820      	ldr	r0, [r4, #0]
 80057a0:	f7ff fd1e 	bl	80051e0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80057a4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80057a6:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80057a8:	69da      	ldr	r2, [r3, #28]
 80057aa:	f042 0208 	orr.w	r2, r2, #8
 80057ae:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80057b0:	69da      	ldr	r2, [r3, #28]
 80057b2:	f022 0204 	bic.w	r2, r2, #4
 80057b6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80057b8:	69da      	ldr	r2, [r3, #28]
 80057ba:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057bc:	61da      	str	r2, [r3, #28]
      break;
 80057be:	e7ae      	b.n	800571e <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80057c0:	6820      	ldr	r0, [r4, #0]
 80057c2:	f7ff fd85 	bl	80052d0 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80057c6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80057c8:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80057ca:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057cc:	f042 0208 	orr.w	r2, r2, #8
 80057d0:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80057d2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057d4:	f022 0204 	bic.w	r2, r2, #4
 80057d8:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80057da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057dc:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80057de:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80057e0:	e79d      	b.n	800571e <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80057e2:	6820      	ldr	r0, [r4, #0]
 80057e4:	f7ff fda8 	bl	8005338 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80057e8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80057ea:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80057ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80057f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80057fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057fe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005802:	e7ec      	b.n	80057de <HAL_TIM_PWM_ConfigChannel+0xe6>

08005804 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005804:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005806:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005808:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800580a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800580e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8005812:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005814:	6083      	str	r3, [r0, #8]
 8005816:	bd10      	pop	{r4, pc}

08005818 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8005818:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800581c:	2b01      	cmp	r3, #1
{
 800581e:	b570      	push	{r4, r5, r6, lr}
 8005820:	4604      	mov	r4, r0
 8005822:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8005826:	d017      	beq.n	8005858 <HAL_TIM_ConfigClockSource+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 8005828:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800582c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 800582e:	2301      	movs	r3, #1
 8005830:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8005834:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005836:	4b41      	ldr	r3, [pc, #260]	; (800593c <HAL_TIM_ConfigClockSource+0x124>)
 8005838:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 800583a:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800583c:	680b      	ldr	r3, [r1, #0]
 800583e:	2b40      	cmp	r3, #64	; 0x40
 8005840:	d065      	beq.n	800590e <HAL_TIM_ConfigClockSource+0xf6>
 8005842:	d815      	bhi.n	8005870 <HAL_TIM_ConfigClockSource+0x58>
 8005844:	2b10      	cmp	r3, #16
 8005846:	d00c      	beq.n	8005862 <HAL_TIM_ConfigClockSource+0x4a>
 8005848:	d807      	bhi.n	800585a <HAL_TIM_ConfigClockSource+0x42>
 800584a:	b153      	cbz	r3, 8005862 <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_READY;
 800584c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800584e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005850:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005854:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8005858:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800585a:	2b20      	cmp	r3, #32
 800585c:	d001      	beq.n	8005862 <HAL_TIM_ConfigClockSource+0x4a>
 800585e:	2b30      	cmp	r3, #48	; 0x30
 8005860:	d1f4      	bne.n	800584c <HAL_TIM_ConfigClockSource+0x34>
  tmpsmcr = TIMx->SMCR;
 8005862:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005864:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8005868:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800586c:	4313      	orrs	r3, r2
 800586e:	e01a      	b.n	80058a6 <HAL_TIM_ConfigClockSource+0x8e>
  switch (sClockSourceConfig->ClockSource)
 8005870:	2b60      	cmp	r3, #96	; 0x60
 8005872:	d034      	beq.n	80058de <HAL_TIM_ConfigClockSource+0xc6>
 8005874:	d819      	bhi.n	80058aa <HAL_TIM_ConfigClockSource+0x92>
 8005876:	2b50      	cmp	r3, #80	; 0x50
 8005878:	d1e8      	bne.n	800584c <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800587a:	684a      	ldr	r2, [r1, #4]
 800587c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800587e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005880:	6a05      	ldr	r5, [r0, #32]
 8005882:	f025 0501 	bic.w	r5, r5, #1
 8005886:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005888:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800588a:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800588e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005892:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8005896:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8005898:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800589a:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800589c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800589e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058a2:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80058a6:	6083      	str	r3, [r0, #8]
 80058a8:	e7d0      	b.n	800584c <HAL_TIM_ConfigClockSource+0x34>
  switch (sClockSourceConfig->ClockSource)
 80058aa:	2b70      	cmp	r3, #112	; 0x70
 80058ac:	d00c      	beq.n	80058c8 <HAL_TIM_ConfigClockSource+0xb0>
 80058ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058b2:	d1cb      	bne.n	800584c <HAL_TIM_ConfigClockSource+0x34>
      TIM_ETR_SetConfig(htim->Instance,
 80058b4:	68cb      	ldr	r3, [r1, #12]
 80058b6:	684a      	ldr	r2, [r1, #4]
 80058b8:	6889      	ldr	r1, [r1, #8]
 80058ba:	f7ff ffa3 	bl	8005804 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058be:	6822      	ldr	r2, [r4, #0]
 80058c0:	6893      	ldr	r3, [r2, #8]
 80058c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058c6:	e008      	b.n	80058da <HAL_TIM_ConfigClockSource+0xc2>
      TIM_ETR_SetConfig(htim->Instance,
 80058c8:	68cb      	ldr	r3, [r1, #12]
 80058ca:	684a      	ldr	r2, [r1, #4]
 80058cc:	6889      	ldr	r1, [r1, #8]
 80058ce:	f7ff ff99 	bl	8005804 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80058d2:	6822      	ldr	r2, [r4, #0]
 80058d4:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058d6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058da:	6093      	str	r3, [r2, #8]
      break;
 80058dc:	e7b6      	b.n	800584c <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80058de:	684d      	ldr	r5, [r1, #4]
 80058e0:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058e2:	6a01      	ldr	r1, [r0, #32]
 80058e4:	f021 0110 	bic.w	r1, r1, #16
 80058e8:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058ea:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80058ec:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058ee:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80058f6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058fa:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80058fe:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8005900:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005902:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005904:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005908:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 800590c:	e7cb      	b.n	80058a6 <HAL_TIM_ConfigClockSource+0x8e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800590e:	684a      	ldr	r2, [r1, #4]
 8005910:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8005912:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005914:	6a05      	ldr	r5, [r0, #32]
 8005916:	f025 0501 	bic.w	r5, r5, #1
 800591a:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800591c:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800591e:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005922:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005926:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800592a:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 800592c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800592e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005930:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005936:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 800593a:	e7b4      	b.n	80058a6 <HAL_TIM_ConfigClockSource+0x8e>
 800593c:	fffe0088 	.word	0xfffe0088

08005940 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005940:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005942:	f001 011f 	and.w	r1, r1, #31
{
 8005946:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005948:	2401      	movs	r4, #1
 800594a:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800594c:	ea23 0304 	bic.w	r3, r3, r4
 8005950:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005952:	6a03      	ldr	r3, [r0, #32]
 8005954:	408a      	lsls	r2, r1
 8005956:	431a      	orrs	r2, r3
 8005958:	6202      	str	r2, [r0, #32]
 800595a:	bd10      	pop	{r4, pc}

0800595c <HAL_TIM_PWM_Start>:
{
 800595c:	b510      	push	{r4, lr}
 800595e:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005960:	2201      	movs	r2, #1
 8005962:	6800      	ldr	r0, [r0, #0]
 8005964:	f7ff ffec 	bl	8005940 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005968:	6823      	ldr	r3, [r4, #0]
 800596a:	4a13      	ldr	r2, [pc, #76]	; (80059b8 <HAL_TIM_PWM_Start+0x5c>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d01d      	beq.n	80059ac <HAL_TIM_PWM_Start+0x50>
 8005970:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005974:	4293      	cmp	r3, r2
 8005976:	d019      	beq.n	80059ac <HAL_TIM_PWM_Start+0x50>
 8005978:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800597c:	4293      	cmp	r3, r2
 800597e:	d015      	beq.n	80059ac <HAL_TIM_PWM_Start+0x50>
 8005980:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005984:	4293      	cmp	r3, r2
 8005986:	d011      	beq.n	80059ac <HAL_TIM_PWM_Start+0x50>
 8005988:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800598c:	4293      	cmp	r3, r2
 800598e:	d00d      	beq.n	80059ac <HAL_TIM_PWM_Start+0x50>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005990:	6899      	ldr	r1, [r3, #8]
 8005992:	4a0a      	ldr	r2, [pc, #40]	; (80059bc <HAL_TIM_PWM_Start+0x60>)
 8005994:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005996:	2a06      	cmp	r2, #6
 8005998:	d006      	beq.n	80059a8 <HAL_TIM_PWM_Start+0x4c>
 800599a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800599e:	d003      	beq.n	80059a8 <HAL_TIM_PWM_Start+0x4c>
    __HAL_TIM_ENABLE(htim);
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	f042 0201 	orr.w	r2, r2, #1
 80059a6:	601a      	str	r2, [r3, #0]
}
 80059a8:	2000      	movs	r0, #0
 80059aa:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 80059ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059b2:	645a      	str	r2, [r3, #68]	; 0x44
 80059b4:	e7ec      	b.n	8005990 <HAL_TIM_PWM_Start+0x34>
 80059b6:	bf00      	nop
 80059b8:	40012c00 	.word	0x40012c00
 80059bc:	00010007 	.word	0x00010007

080059c0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059c0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80059c4:	2b01      	cmp	r3, #1
{
 80059c6:	b530      	push	{r4, r5, lr}
 80059c8:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80059cc:	d01f      	beq.n	8005a0e <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059ce:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80059d0:	4d10      	ldr	r5, [pc, #64]	; (8005a14 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
  htim->State = HAL_TIM_STATE_BUSY;
 80059d2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80059d6:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 80059d8:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 80059da:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80059dc:	d003      	beq.n	80059e6 <HAL_TIMEx_MasterConfigSynchronization+0x26>
 80059de:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80059e2:	42aa      	cmp	r2, r5
 80059e4:	d103      	bne.n	80059ee <HAL_TIMEx_MasterConfigSynchronization+0x2e>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80059e6:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80059e8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80059ec:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059ee:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059f0:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80059f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059f6:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 80059f8:	f024 0480 	bic.w	r4, r4, #128	; 0x80

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059fc:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059fe:	4321      	orrs	r1, r4

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a00:	2301      	movs	r3, #1
  htim->Instance->SMCR = tmpsmcr;
 8005a02:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8005a04:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a08:	2300      	movs	r3, #0
 8005a0a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8005a0e:	4618      	mov	r0, r3

  return HAL_OK;
}
 8005a10:	bd30      	pop	{r4, r5, pc}
 8005a12:	bf00      	nop
 8005a14:	40012c00 	.word	0x40012c00

08005a18 <HAL_TIMEx_CommutCallback>:
 8005a18:	4770      	bx	lr

08005a1a <HAL_TIMEx_BreakCallback>:
 8005a1a:	4770      	bx	lr

08005a1c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a1c:	4770      	bx	lr
	...

08005a20 <UART_SetConfig>:
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a20:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a22:	69c1      	ldr	r1, [r0, #28]
{
 8005a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a26:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a28:	6883      	ldr	r3, [r0, #8]
 8005a2a:	6900      	ldr	r0, [r0, #16]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a2c:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a2e:	4303      	orrs	r3, r0
 8005a30:	6960      	ldr	r0, [r4, #20]
 8005a32:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a34:	48ba      	ldr	r0, [pc, #744]	; (8005d20 <UART_SetConfig+0x300>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a36:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a38:	4028      	ands	r0, r5
 8005a3a:	4303      	orrs	r3, r0
 8005a3c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a3e:	6853      	ldr	r3, [r2, #4]
 8005a40:	68e0      	ldr	r0, [r4, #12]
 8005a42:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005a46:	4303      	orrs	r3, r0
 8005a48:	6053      	str	r3, [r2, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a4a:	4bb6      	ldr	r3, [pc, #728]	; (8005d24 <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a4c:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a4e:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005a50:	bf1c      	itt	ne
 8005a52:	6a23      	ldrne	r3, [r4, #32]
 8005a54:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a56:	6893      	ldr	r3, [r2, #8]
 8005a58:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005a5c:	4303      	orrs	r3, r0
 8005a5e:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a60:	4bb1      	ldr	r3, [pc, #708]	; (8005d28 <UART_SetConfig+0x308>)
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d119      	bne.n	8005a9a <UART_SetConfig+0x7a>
 8005a66:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8005a6a:	4ab0      	ldr	r2, [pc, #704]	; (8005d2c <UART_SetConfig+0x30c>)
 8005a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a70:	f003 0303 	and.w	r3, r3, #3
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a74:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005a78:	5cd3      	ldrb	r3, [r2, r3]
 8005a7a:	f040 8138 	bne.w	8005cee <UART_SetConfig+0x2ce>
  {
    switch (clocksource)
 8005a7e:	2b08      	cmp	r3, #8
 8005a80:	f200 808f 	bhi.w	8005ba2 <UART_SetConfig+0x182>
 8005a84:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005a88:	00ca011a 	.word	0x00ca011a
 8005a8c:	008d00f9 	.word	0x008d00f9
 8005a90:	008d0114 	.word	0x008d0114
 8005a94:	008d008d 	.word	0x008d008d
 8005a98:	0036      	.short	0x0036
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a9a:	4ba5      	ldr	r3, [pc, #660]	; (8005d30 <UART_SetConfig+0x310>)
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d107      	bne.n	8005ab0 <UART_SetConfig+0x90>
 8005aa0:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8005aa4:	4aa3      	ldr	r2, [pc, #652]	; (8005d34 <UART_SetConfig+0x314>)
 8005aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aaa:	f003 030c 	and.w	r3, r3, #12
 8005aae:	e7e1      	b.n	8005a74 <UART_SetConfig+0x54>
 8005ab0:	4ba1      	ldr	r3, [pc, #644]	; (8005d38 <UART_SetConfig+0x318>)
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d123      	bne.n	8005afe <UART_SetConfig+0xde>
 8005ab6:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8005aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005abe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005ac2:	2b10      	cmp	r3, #16
 8005ac4:	f000 80f1 	beq.w	8005caa <UART_SetConfig+0x28a>
 8005ac8:	d80b      	bhi.n	8005ae2 <UART_SetConfig+0xc2>
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	f000 80f3 	beq.w	8005cb6 <UART_SetConfig+0x296>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ad0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005ad4:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8005ad8:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005adc:	f000 80f8 	beq.w	8005cd0 <UART_SetConfig+0x2b0>
 8005ae0:	e0a8      	b.n	8005c34 <UART_SetConfig+0x214>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ae2:	2b20      	cmp	r3, #32
 8005ae4:	f000 80c6 	beq.w	8005c74 <UART_SetConfig+0x254>
 8005ae8:	2b30      	cmp	r3, #48	; 0x30
 8005aea:	d1f1      	bne.n	8005ad0 <UART_SetConfig+0xb0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005aec:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005af0:	f040 80b8 	bne.w	8005c64 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005af4:	6860      	ldr	r0, [r4, #4]
 8005af6:	0843      	lsrs	r3, r0, #1
 8005af8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8005afc:	e0c3      	b.n	8005c86 <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005afe:	4b8f      	ldr	r3, [pc, #572]	; (8005d3c <UART_SetConfig+0x31c>)
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d11e      	bne.n	8005b42 <UART_SetConfig+0x122>
 8005b04:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8005b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b0c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005b10:	2b40      	cmp	r3, #64	; 0x40
 8005b12:	f000 80bb 	beq.w	8005c8c <UART_SetConfig+0x26c>
 8005b16:	d80a      	bhi.n	8005b2e <UART_SetConfig+0x10e>
 8005b18:	b97b      	cbnz	r3, 8005b3a <UART_SetConfig+0x11a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b1a:	4b82      	ldr	r3, [pc, #520]	; (8005d24 <UART_SetConfig+0x304>)
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	f040 80ca 	bne.w	8005cb6 <UART_SetConfig+0x296>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8005b22:	f7fe fbd3 	bl	80042cc <HAL_RCC_GetPCLK1Freq>
        break;
 8005b26:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 8005b28:	bbb0      	cbnz	r0, 8005b98 <UART_SetConfig+0x178>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	e03a      	b.n	8005ba4 <UART_SetConfig+0x184>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b2e:	2b80      	cmp	r3, #128	; 0x80
 8005b30:	f000 809d 	beq.w	8005c6e <UART_SetConfig+0x24e>
 8005b34:	2bc0      	cmp	r3, #192	; 0xc0
 8005b36:	f000 80b0 	beq.w	8005c9a <UART_SetConfig+0x27a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b3a:	4b7a      	ldr	r3, [pc, #488]	; (8005d24 <UART_SetConfig+0x304>)
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d1c7      	bne.n	8005ad0 <UART_SetConfig+0xb0>
 8005b40:	e02f      	b.n	8005ba2 <UART_SetConfig+0x182>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b42:	4b7f      	ldr	r3, [pc, #508]	; (8005d40 <UART_SetConfig+0x320>)
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d111      	bne.n	8005b6c <UART_SetConfig+0x14c>
 8005b48:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8005b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b58:	f000 8098 	beq.w	8005c8c <UART_SetConfig+0x26c>
 8005b5c:	d9dc      	bls.n	8005b18 <UART_SetConfig+0xf8>
 8005b5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b62:	f000 8084 	beq.w	8005c6e <UART_SetConfig+0x24e>
 8005b66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b6a:	e7e4      	b.n	8005b36 <UART_SetConfig+0x116>
 8005b6c:	4b6d      	ldr	r3, [pc, #436]	; (8005d24 <UART_SetConfig+0x304>)
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d1ae      	bne.n	8005ad0 <UART_SetConfig+0xb0>
 8005b72:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8005b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b7a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005b7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b82:	f000 8083 	beq.w	8005c8c <UART_SetConfig+0x26c>
 8005b86:	d9c7      	bls.n	8005b18 <UART_SetConfig+0xf8>
 8005b88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b8c:	d06f      	beq.n	8005c6e <UART_SetConfig+0x24e>
 8005b8e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b92:	e7d0      	b.n	8005b36 <UART_SetConfig+0x116>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8005b94:	486b      	ldr	r0, [pc, #428]	; (8005d44 <UART_SetConfig+0x324>)
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b96:	2302      	movs	r3, #2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b98:	6862      	ldr	r2, [r4, #4]
 8005b9a:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8005b9e:	4281      	cmp	r1, r0
 8005ba0:	d905      	bls.n	8005bae <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 8005ba2:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8005ba8:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8005baa:	4610      	mov	r0, r2
 8005bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005bae:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8005bb2:	d8f6      	bhi.n	8005ba2 <UART_SetConfig+0x182>
        switch (clocksource)
 8005bb4:	2b08      	cmp	r3, #8
 8005bb6:	d82e      	bhi.n	8005c16 <UART_SetConfig+0x1f6>
 8005bb8:	e8df f003 	tbb	[pc, r3]
 8005bbc:	2d1c2d05 	.word	0x2d1c2d05
 8005bc0:	2d2d2d24 	.word	0x2d2d2d24
 8005bc4:	27          	.byte	0x27
 8005bc5:	00          	.byte	0x00
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005bc6:	f7fe fb81 	bl	80042cc <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005bca:	6862      	ldr	r2, [r4, #4]
 8005bcc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005bd0:	0856      	lsrs	r6, r2, #1
 8005bd2:	2700      	movs	r7, #0
 8005bd4:	fbe1 6700 	umlal	r6, r7, r1, r0
 8005bd8:	2300      	movs	r3, #0
 8005bda:	4630      	mov	r0, r6
 8005bdc:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8005bde:	f7fa ffef 	bl	8000bc0 <__aeabi_uldivmod>
            break;
 8005be2:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005be4:	4b58      	ldr	r3, [pc, #352]	; (8005d48 <UART_SetConfig+0x328>)
 8005be6:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8005bea:	4299      	cmp	r1, r3
 8005bec:	d8d9      	bhi.n	8005ba2 <UART_SetConfig+0x182>
          huart->Instance->BRR = usartdiv;
 8005bee:	6823      	ldr	r3, [r4, #0]
 8005bf0:	60d8      	str	r0, [r3, #12]
 8005bf2:	e7d7      	b.n	8005ba4 <UART_SetConfig+0x184>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8005bf4:	4855      	ldr	r0, [pc, #340]	; (8005d4c <UART_SetConfig+0x32c>)
 8005bf6:	0855      	lsrs	r5, r2, #1
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	2100      	movs	r1, #0
 8005bfc:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8005bfe:	f141 0100 	adc.w	r1, r1, #0
 8005c02:	e7ec      	b.n	8005bde <UART_SetConfig+0x1be>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005c04:	f7fe f816 	bl	8003c34 <HAL_RCC_GetSysClockFreq>
 8005c08:	e7df      	b.n	8005bca <UART_SetConfig+0x1aa>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8005c0a:	0850      	lsrs	r0, r2, #1
 8005c0c:	2100      	movs	r1, #0
 8005c0e:	2300      	movs	r3, #0
 8005c10:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8005c14:	e7f3      	b.n	8005bfe <UART_SetConfig+0x1de>
            ret = HAL_ERROR;
 8005c16:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8005c18:	2000      	movs	r0, #0
 8005c1a:	e7e3      	b.n	8005be4 <UART_SetConfig+0x1c4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005c1c:	f7fe fb68 	bl	80042f0 <HAL_RCC_GetPCLK2Freq>
 8005c20:	e04e      	b.n	8005cc0 <UART_SetConfig+0x2a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005c22:	f7fe fb53 	bl	80042cc <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005c26:	6862      	ldr	r2, [r4, #4]
 8005c28:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8005c2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c30:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c32:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c34:	f1a3 0010 	sub.w	r0, r3, #16
 8005c38:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8005c3c:	4288      	cmp	r0, r1
 8005c3e:	d8b0      	bhi.n	8005ba2 <UART_SetConfig+0x182>
      huart->Instance->BRR = usartdiv;
 8005c40:	6821      	ldr	r1, [r4, #0]
 8005c42:	60cb      	str	r3, [r1, #12]
 8005c44:	e7ae      	b.n	8005ba4 <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005c46:	f7fe fb53 	bl	80042f0 <HAL_RCC_GetPCLK2Freq>
 8005c4a:	e7ec      	b.n	8005c26 <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005c4c:	6860      	ldr	r0, [r4, #4]
 8005c4e:	0843      	lsrs	r3, r0, #1
 8005c50:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8005c54:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005c58:	fbb3 f3f0 	udiv	r3, r3, r0
 8005c5c:	e7e8      	b.n	8005c30 <UART_SetConfig+0x210>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005c5e:	f7fd ffe9 	bl	8003c34 <HAL_RCC_GetSysClockFreq>
 8005c62:	e7e0      	b.n	8005c26 <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005c64:	6860      	ldr	r0, [r4, #4]
 8005c66:	0843      	lsrs	r3, r0, #1
 8005c68:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005c6c:	e7f4      	b.n	8005c58 <UART_SetConfig+0x238>
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c6e:	4b2d      	ldr	r3, [pc, #180]	; (8005d24 <UART_SetConfig+0x304>)
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d08f      	beq.n	8005b94 <UART_SetConfig+0x174>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c74:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005c78:	d1e8      	bne.n	8005c4c <UART_SetConfig+0x22c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005c7a:	6860      	ldr	r0, [r4, #4]
 8005c7c:	0843      	lsrs	r3, r0, #1
 8005c7e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8005c82:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005c86:	fbb3 f3f0 	udiv	r3, r3, r0
 8005c8a:	e01f      	b.n	8005ccc <UART_SetConfig+0x2ac>
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c8c:	4b25      	ldr	r3, [pc, #148]	; (8005d24 <UART_SetConfig+0x304>)
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d10b      	bne.n	8005caa <UART_SetConfig+0x28a>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8005c92:	f7fd ffcf 	bl	8003c34 <HAL_RCC_GetSysClockFreq>
        break;
 8005c96:	2304      	movs	r3, #4
 8005c98:	e746      	b.n	8005b28 <UART_SetConfig+0x108>
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c9a:	4b22      	ldr	r3, [pc, #136]	; (8005d24 <UART_SetConfig+0x304>)
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	f47f af25 	bne.w	8005aec <UART_SetConfig+0xcc>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8005ca2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ca6:	2308      	movs	r3, #8
 8005ca8:	e776      	b.n	8005b98 <UART_SetConfig+0x178>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005caa:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005cae:	d1d6      	bne.n	8005c5e <UART_SetConfig+0x23e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005cb0:	f7fd ffc0 	bl	8003c34 <HAL_RCC_GetSysClockFreq>
 8005cb4:	e004      	b.n	8005cc0 <UART_SetConfig+0x2a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cb6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005cba:	d1b2      	bne.n	8005c22 <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005cbc:	f7fe fb06 	bl	80042cc <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005cc0:	6861      	ldr	r1, [r4, #4]
 8005cc2:	084a      	lsrs	r2, r1, #1
 8005cc4:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8005cc8:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ccc:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005cce:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cd0:	f1a3 0010 	sub.w	r0, r3, #16
 8005cd4:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8005cd8:	4288      	cmp	r0, r1
 8005cda:	f63f af62 	bhi.w	8005ba2 <UART_SetConfig+0x182>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005cde:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8005ce2:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ce4:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8005ce8:	430b      	orrs	r3, r1
 8005cea:	60c3      	str	r3, [r0, #12]
 8005cec:	e75a      	b.n	8005ba4 <UART_SetConfig+0x184>
    switch (clocksource)
 8005cee:	2b08      	cmp	r3, #8
 8005cf0:	f63f af57 	bhi.w	8005ba2 <UART_SetConfig+0x182>
 8005cf4:	a201      	add	r2, pc, #4	; (adr r2, 8005cfc <UART_SetConfig+0x2dc>)
 8005cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cfa:	bf00      	nop
 8005cfc:	08005c23 	.word	0x08005c23
 8005d00:	08005c47 	.word	0x08005c47
 8005d04:	08005c4d 	.word	0x08005c4d
 8005d08:	08005ba3 	.word	0x08005ba3
 8005d0c:	08005c5f 	.word	0x08005c5f
 8005d10:	08005ba3 	.word	0x08005ba3
 8005d14:	08005ba3 	.word	0x08005ba3
 8005d18:	08005ba3 	.word	0x08005ba3
 8005d1c:	08005c65 	.word	0x08005c65
 8005d20:	efff69f3 	.word	0xefff69f3
 8005d24:	40008000 	.word	0x40008000
 8005d28:	40013800 	.word	0x40013800
 8005d2c:	08010687 	.word	0x08010687
 8005d30:	40004400 	.word	0x40004400
 8005d34:	0801068b 	.word	0x0801068b
 8005d38:	40004800 	.word	0x40004800
 8005d3c:	40004c00 	.word	0x40004c00
 8005d40:	40005000 	.word	0x40005000
 8005d44:	00f42400 	.word	0x00f42400
 8005d48:	000ffcff 	.word	0x000ffcff
 8005d4c:	f4240000 	.word	0xf4240000

08005d50 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d50:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005d52:	07da      	lsls	r2, r3, #31
{
 8005d54:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d56:	d506      	bpl.n	8005d66 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d58:	6801      	ldr	r1, [r0, #0]
 8005d5a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8005d5c:	684a      	ldr	r2, [r1, #4]
 8005d5e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005d62:	4322      	orrs	r2, r4
 8005d64:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d66:	079c      	lsls	r4, r3, #30
 8005d68:	d506      	bpl.n	8005d78 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d6a:	6801      	ldr	r1, [r0, #0]
 8005d6c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8005d6e:	684a      	ldr	r2, [r1, #4]
 8005d70:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005d74:	4322      	orrs	r2, r4
 8005d76:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d78:	0759      	lsls	r1, r3, #29
 8005d7a:	d506      	bpl.n	8005d8a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d7c:	6801      	ldr	r1, [r0, #0]
 8005d7e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8005d80:	684a      	ldr	r2, [r1, #4]
 8005d82:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005d86:	4322      	orrs	r2, r4
 8005d88:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d8a:	071a      	lsls	r2, r3, #28
 8005d8c:	d506      	bpl.n	8005d9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d8e:	6801      	ldr	r1, [r0, #0]
 8005d90:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005d92:	684a      	ldr	r2, [r1, #4]
 8005d94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d98:	4322      	orrs	r2, r4
 8005d9a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d9c:	06dc      	lsls	r4, r3, #27
 8005d9e:	d506      	bpl.n	8005dae <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005da0:	6801      	ldr	r1, [r0, #0]
 8005da2:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8005da4:	688a      	ldr	r2, [r1, #8]
 8005da6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005daa:	4322      	orrs	r2, r4
 8005dac:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005dae:	0699      	lsls	r1, r3, #26
 8005db0:	d506      	bpl.n	8005dc0 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005db2:	6801      	ldr	r1, [r0, #0]
 8005db4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8005db6:	688a      	ldr	r2, [r1, #8]
 8005db8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005dbc:	4322      	orrs	r2, r4
 8005dbe:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005dc0:	065a      	lsls	r2, r3, #25
 8005dc2:	d50f      	bpl.n	8005de4 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005dc4:	6801      	ldr	r1, [r0, #0]
 8005dc6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8005dc8:	684a      	ldr	r2, [r1, #4]
 8005dca:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8005dce:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005dd0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005dd4:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005dd6:	d105      	bne.n	8005de4 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005dd8:	684a      	ldr	r2, [r1, #4]
 8005dda:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8005ddc:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8005de0:	4322      	orrs	r2, r4
 8005de2:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005de4:	061b      	lsls	r3, r3, #24
 8005de6:	d506      	bpl.n	8005df6 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005de8:	6802      	ldr	r2, [r0, #0]
 8005dea:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005dec:	6853      	ldr	r3, [r2, #4]
 8005dee:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005df2:	430b      	orrs	r3, r1
 8005df4:	6053      	str	r3, [r2, #4]
 8005df6:	bd10      	pop	{r4, pc}

08005df8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dfc:	9d06      	ldr	r5, [sp, #24]
 8005dfe:	4604      	mov	r4, r0
 8005e00:	460f      	mov	r7, r1
 8005e02:	4616      	mov	r6, r2
 8005e04:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e06:	6821      	ldr	r1, [r4, #0]
 8005e08:	69ca      	ldr	r2, [r1, #28]
 8005e0a:	ea37 0302 	bics.w	r3, r7, r2
 8005e0e:	bf0c      	ite	eq
 8005e10:	2201      	moveq	r2, #1
 8005e12:	2200      	movne	r2, #0
 8005e14:	42b2      	cmp	r2, r6
 8005e16:	d002      	beq.n	8005e1e <UART_WaitOnFlagUntilTimeout+0x26>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8005e18:	2000      	movs	r0, #0
}
 8005e1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8005e1e:	1c6b      	adds	r3, r5, #1
 8005e20:	d0f2      	beq.n	8005e08 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e22:	f7fc fb5f 	bl	80024e4 <HAL_GetTick>
 8005e26:	eba0 0008 	sub.w	r0, r0, r8
 8005e2a:	4285      	cmp	r5, r0
 8005e2c:	d301      	bcc.n	8005e32 <UART_WaitOnFlagUntilTimeout+0x3a>
 8005e2e:	2d00      	cmp	r5, #0
 8005e30:	d1e9      	bne.n	8005e06 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e32:	6823      	ldr	r3, [r4, #0]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005e3a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e3c:	689a      	ldr	r2, [r3, #8]
 8005e3e:	f022 0201 	bic.w	r2, r2, #1
 8005e42:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8005e44:	2320      	movs	r3, #32
 8005e46:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005e48:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 8005e50:	2003      	movs	r0, #3
 8005e52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005e56 <HAL_UART_Transmit>:
{
 8005e56:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005e5a:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8005e5c:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8005e5e:	2b20      	cmp	r3, #32
{
 8005e60:	4604      	mov	r4, r0
 8005e62:	460e      	mov	r6, r1
 8005e64:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8005e66:	d14b      	bne.n	8005f00 <HAL_UART_Transmit+0xaa>
    if ((pData == NULL) || (Size == 0U))
 8005e68:	2900      	cmp	r1, #0
 8005e6a:	d047      	beq.n	8005efc <HAL_UART_Transmit+0xa6>
 8005e6c:	2a00      	cmp	r2, #0
 8005e6e:	d045      	beq.n	8005efc <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 8005e70:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d043      	beq.n	8005f00 <HAL_UART_Transmit+0xaa>
 8005e78:	2301      	movs	r3, #1
 8005e7a:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e7e:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e80:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e82:	67c5      	str	r5, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e84:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 8005e86:	f7fc fb2d 	bl	80024e4 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e8a:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 8005e8c:	f8a4 9050 	strh.w	r9, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8005e94:	4607      	mov	r7, r0
    huart->TxXferCount = Size;
 8005e96:	f8a4 9052 	strh.w	r9, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e9a:	d103      	bne.n	8005ea4 <HAL_UART_Transmit+0x4e>
 8005e9c:	6923      	ldr	r3, [r4, #16]
 8005e9e:	b90b      	cbnz	r3, 8005ea4 <HAL_UART_Transmit+0x4e>
 8005ea0:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8005ea2:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 8005ea4:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ea8:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8005eac:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005eae:	463b      	mov	r3, r7
    while (huart->TxXferCount > 0U)
 8005eb0:	b94a      	cbnz	r2, 8005ec6 <HAL_UART_Transmit+0x70>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005eb2:	2140      	movs	r1, #64	; 0x40
 8005eb4:	4620      	mov	r0, r4
 8005eb6:	f7ff ff9f 	bl	8005df8 <UART_WaitOnFlagUntilTimeout>
 8005eba:	b950      	cbnz	r0, 8005ed2 <HAL_UART_Transmit+0x7c>
    huart->gState = HAL_UART_STATE_READY;
 8005ebc:	2320      	movs	r3, #32
 8005ebe:	6763      	str	r3, [r4, #116]	; 0x74
    __HAL_UNLOCK(huart);
 8005ec0:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    return HAL_OK;
 8005ec4:	e006      	b.n	8005ed4 <HAL_UART_Transmit+0x7e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	2180      	movs	r1, #128	; 0x80
 8005eca:	4620      	mov	r0, r4
 8005ecc:	f7ff ff94 	bl	8005df8 <UART_WaitOnFlagUntilTimeout>
 8005ed0:	b118      	cbz	r0, 8005eda <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 8005ed2:	2003      	movs	r0, #3
}
 8005ed4:	b003      	add	sp, #12
 8005ed6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005eda:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8005edc:	b95e      	cbnz	r6, 8005ef6 <HAL_UART_Transmit+0xa0>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ede:	f835 3b02 	ldrh.w	r3, [r5], #2
 8005ee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ee6:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8005ee8:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8005eec:	3b01      	subs	r3, #1
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8005ef4:	e7d6      	b.n	8005ea4 <HAL_UART_Transmit+0x4e>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ef6:	f816 3b01 	ldrb.w	r3, [r6], #1
 8005efa:	e7f4      	b.n	8005ee6 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8005efc:	2001      	movs	r0, #1
 8005efe:	e7e9      	b.n	8005ed4 <HAL_UART_Transmit+0x7e>
    return HAL_BUSY;
 8005f00:	2002      	movs	r0, #2
 8005f02:	e7e7      	b.n	8005ed4 <HAL_UART_Transmit+0x7e>

08005f04 <UART_CheckIdleState>:
{
 8005f04:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f06:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f08:	2600      	movs	r6, #0
 8005f0a:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8005f0c:	f7fc faea 	bl	80024e4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f10:	6823      	ldr	r3, [r4, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8005f16:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f18:	d415      	bmi.n	8005f46 <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f1a:	6823      	ldr	r3, [r4, #0]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	075b      	lsls	r3, r3, #29
 8005f20:	d50a      	bpl.n	8005f38 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f22:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f26:	9300      	str	r3, [sp, #0]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	462b      	mov	r3, r5
 8005f2c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f30:	4620      	mov	r0, r4
 8005f32:	f7ff ff61 	bl	8005df8 <UART_WaitOnFlagUntilTimeout>
 8005f36:	b990      	cbnz	r0, 8005f5e <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 8005f38:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8005f3a:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8005f3c:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 8005f3e:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8005f42:	67a3      	str	r3, [r4, #120]	; 0x78
  return HAL_OK;
 8005f44:	e00c      	b.n	8005f60 <UART_CheckIdleState+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f46:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f4a:	9300      	str	r3, [sp, #0]
 8005f4c:	4632      	mov	r2, r6
 8005f4e:	4603      	mov	r3, r0
 8005f50:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f54:	4620      	mov	r0, r4
 8005f56:	f7ff ff4f 	bl	8005df8 <UART_WaitOnFlagUntilTimeout>
 8005f5a:	2800      	cmp	r0, #0
 8005f5c:	d0dd      	beq.n	8005f1a <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8005f5e:	2003      	movs	r0, #3
}
 8005f60:	b002      	add	sp, #8
 8005f62:	bd70      	pop	{r4, r5, r6, pc}

08005f64 <HAL_UART_Init>:
{
 8005f64:	b510      	push	{r4, lr}
  if (huart == NULL)
 8005f66:	4604      	mov	r4, r0
 8005f68:	b340      	cbz	r0, 8005fbc <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8005f6a:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8005f6c:	b91b      	cbnz	r3, 8005f76 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8005f6e:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8005f72:	f7fc f85f 	bl	8002034 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8005f76:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005f78:	2324      	movs	r3, #36	; 0x24
 8005f7a:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8005f7c:	6813      	ldr	r3, [r2, #0]
 8005f7e:	f023 0301 	bic.w	r3, r3, #1
 8005f82:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f84:	4620      	mov	r0, r4
 8005f86:	f7ff fd4b 	bl	8005a20 <UART_SetConfig>
 8005f8a:	2801      	cmp	r0, #1
 8005f8c:	d016      	beq.n	8005fbc <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f90:	b113      	cbz	r3, 8005f98 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8005f92:	4620      	mov	r0, r4
 8005f94:	f7ff fedc 	bl	8005d50 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f98:	6823      	ldr	r3, [r4, #0]
 8005f9a:	685a      	ldr	r2, [r3, #4]
 8005f9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005fa0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fa2:	689a      	ldr	r2, [r3, #8]
 8005fa4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005fa8:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8005fb0:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8005fb2:	601a      	str	r2, [r3, #0]
}
 8005fb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8005fb8:	f7ff bfa4 	b.w	8005f04 <UART_CheckIdleState>
}
 8005fbc:	2001      	movs	r0, #1
 8005fbe:	bd10      	pop	{r4, pc}

08005fc0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005fc0:	4b0a      	ldr	r3, [pc, #40]	; (8005fec <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005fc2:	3b01      	subs	r3, #1
 8005fc4:	d101      	bne.n	8005fca <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 8005fc6:	2003      	movs	r0, #3
 8005fc8:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005fca:	6902      	ldr	r2, [r0, #16]
 8005fcc:	2a00      	cmp	r2, #0
 8005fce:	daf8      	bge.n	8005fc2 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005fd0:	6903      	ldr	r3, [r0, #16]
 8005fd2:	4a06      	ldr	r2, [pc, #24]	; (8005fec <USB_CoreReset+0x2c>)
 8005fd4:	f043 0301 	orr.w	r3, r3, #1
 8005fd8:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8005fda:	3a01      	subs	r2, #1
 8005fdc:	d0f3      	beq.n	8005fc6 <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005fde:	6903      	ldr	r3, [r0, #16]
 8005fe0:	f013 0301 	ands.w	r3, r3, #1
 8005fe4:	d1f9      	bne.n	8005fda <USB_CoreReset+0x1a>

  return HAL_OK;
 8005fe6:	4618      	mov	r0, r3
}
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop
 8005fec:	00030d41 	.word	0x00030d41

08005ff0 <USB_CoreInit>:
{
 8005ff0:	b084      	sub	sp, #16
 8005ff2:	b538      	push	{r3, r4, r5, lr}
 8005ff4:	ad05      	add	r5, sp, #20
 8005ff6:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005ffa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ffc:	2b01      	cmp	r3, #1
{
 8005ffe:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006000:	d119      	bne.n	8006036 <USB_CoreInit+0x46>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006002:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006004:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006008:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800600a:	68c3      	ldr	r3, [r0, #12]
 800600c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006010:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006014:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006016:	68c3      	ldr	r3, [r0, #12]
 8006018:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800601c:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 800601e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006020:	2b01      	cmp	r3, #1
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006022:	bf02      	ittt	eq
 8006024:	68c3      	ldreq	r3, [r0, #12]
 8006026:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 800602a:	60c3      	streq	r3, [r0, #12]
}
 800602c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006030:	b004      	add	sp, #16
    ret = USB_CoreReset(USBx);
 8006032:	f7ff bfc5 	b.w	8005fc0 <USB_CoreReset>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006036:	68c3      	ldr	r3, [r0, #12]
 8006038:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800603c:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 800603e:	f7ff ffbf 	bl	8005fc0 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8006042:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006044:	b93b      	cbnz	r3, 8006056 <USB_CoreInit+0x66>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006046:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800604c:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800604e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006052:	b004      	add	sp, #16
 8006054:	4770      	bx	lr
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006056:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006058:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800605c:	e7f6      	b.n	800604c <USB_CoreInit+0x5c>
	...

08006060 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8006060:	2a02      	cmp	r2, #2
 8006062:	d158      	bne.n	8006116 <USB_SetTurnaroundTime+0xb6>
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006064:	4b2e      	ldr	r3, [pc, #184]	; (8006120 <USB_SetTurnaroundTime+0xc0>)
 8006066:	4a2f      	ldr	r2, [pc, #188]	; (8006124 <USB_SetTurnaroundTime+0xc4>)
 8006068:	440b      	add	r3, r1
 800606a:	4293      	cmp	r3, r2
 800606c:	d947      	bls.n	80060fe <USB_SetTurnaroundTime+0x9e>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800606e:	4b2e      	ldr	r3, [pc, #184]	; (8006128 <USB_SetTurnaroundTime+0xc8>)
 8006070:	4a2e      	ldr	r2, [pc, #184]	; (800612c <USB_SetTurnaroundTime+0xcc>)
 8006072:	440b      	add	r3, r1
 8006074:	4293      	cmp	r3, r2
 8006076:	d944      	bls.n	8006102 <USB_SetTurnaroundTime+0xa2>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006078:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 800607c:	4a2c      	ldr	r2, [pc, #176]	; (8006130 <USB_SetTurnaroundTime+0xd0>)
 800607e:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 8006082:	4293      	cmp	r3, r2
 8006084:	d93f      	bls.n	8006106 <USB_SetTurnaroundTime+0xa6>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006086:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 800608a:	f502 32c3 	add.w	r2, r2, #99840	; 0x18600
 800608e:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 8006092:	32a0      	adds	r2, #160	; 0xa0
 8006094:	4293      	cmp	r3, r2
 8006096:	d938      	bls.n	800610a <USB_SetTurnaroundTime+0xaa>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006098:	4b26      	ldr	r3, [pc, #152]	; (8006134 <USB_SetTurnaroundTime+0xd4>)
 800609a:	4a27      	ldr	r2, [pc, #156]	; (8006138 <USB_SetTurnaroundTime+0xd8>)
 800609c:	440b      	add	r3, r1
 800609e:	4293      	cmp	r3, r2
 80060a0:	d935      	bls.n	800610e <USB_SetTurnaroundTime+0xae>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80060a2:	4b26      	ldr	r3, [pc, #152]	; (800613c <USB_SetTurnaroundTime+0xdc>)
 80060a4:	f502 2292 	add.w	r2, r2, #299008	; 0x49000
 80060a8:	440b      	add	r3, r1
 80060aa:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d92f      	bls.n	8006112 <USB_SetTurnaroundTime+0xb2>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80060b2:	4b23      	ldr	r3, [pc, #140]	; (8006140 <USB_SetTurnaroundTime+0xe0>)
 80060b4:	f502 22c3 	add.w	r2, r2, #399360	; 0x61800
 80060b8:	440b      	add	r3, r1
 80060ba:	f502 7220 	add.w	r2, r2, #640	; 0x280
 80060be:	4293      	cmp	r3, r2
 80060c0:	d929      	bls.n	8006116 <USB_SetTurnaroundTime+0xb6>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80060c2:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 80060c6:	f502 12b7 	add.w	r2, r2, #1499136	; 0x16e000
 80060ca:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 80060ce:	f502 7258 	add.w	r2, r2, #864	; 0x360
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d921      	bls.n	800611a <USB_SetTurnaroundTime+0xba>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80060d6:	4b1b      	ldr	r3, [pc, #108]	; (8006144 <USB_SetTurnaroundTime+0xe4>)
      UsbTrd = 0x6U;
 80060d8:	f502 2212 	add.w	r2, r2, #598016	; 0x92000
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80060dc:	440b      	add	r3, r1
      UsbTrd = 0x6U;
 80060de:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
 80060e2:	4293      	cmp	r3, r2
 80060e4:	bf94      	ite	ls
 80060e6:	2307      	movls	r3, #7
 80060e8:	2306      	movhi	r3, #6
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80060ea:	68c2      	ldr	r2, [r0, #12]
 80060ec:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 80060f0:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80060f2:	68c2      	ldr	r2, [r0, #12]
 80060f4:	ea42 2383 	orr.w	r3, r2, r3, lsl #10
 80060f8:	60c3      	str	r3, [r0, #12]
}
 80060fa:	2000      	movs	r0, #0
 80060fc:	4770      	bx	lr
      UsbTrd = 0xFU;
 80060fe:	230f      	movs	r3, #15
 8006100:	e7f3      	b.n	80060ea <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xEU;
 8006102:	230e      	movs	r3, #14
 8006104:	e7f1      	b.n	80060ea <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xDU;
 8006106:	230d      	movs	r3, #13
 8006108:	e7ef      	b.n	80060ea <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xCU;
 800610a:	230c      	movs	r3, #12
 800610c:	e7ed      	b.n	80060ea <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xBU;
 800610e:	230b      	movs	r3, #11
 8006110:	e7eb      	b.n	80060ea <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xAU;
 8006112:	230a      	movs	r3, #10
 8006114:	e7e9      	b.n	80060ea <USB_SetTurnaroundTime+0x8a>
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006116:	2309      	movs	r3, #9
 8006118:	e7e7      	b.n	80060ea <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0x8U;
 800611a:	2308      	movs	r3, #8
 800611c:	e7e5      	b.n	80060ea <USB_SetTurnaroundTime+0x8a>
 800611e:	bf00      	nop
 8006120:	ff275340 	.word	0xff275340
 8006124:	000c34ff 	.word	0x000c34ff
 8006128:	ff1b1e40 	.word	0xff1b1e40
 800612c:	000f423f 	.word	0x000f423f
 8006130:	00124f7f 	.word	0x00124f7f
 8006134:	fee5b660 	.word	0xfee5b660
 8006138:	0016e35f 	.word	0x0016e35f
 800613c:	feced300 	.word	0xfeced300
 8006140:	feb35bc0 	.word	0xfeb35bc0
 8006144:	fe5954e0 	.word	0xfe5954e0

08006148 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006148:	6883      	ldr	r3, [r0, #8]
 800614a:	f043 0301 	orr.w	r3, r3, #1
 800614e:	6083      	str	r3, [r0, #8]
}
 8006150:	2000      	movs	r0, #0
 8006152:	4770      	bx	lr

08006154 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006154:	6883      	ldr	r3, [r0, #8]
 8006156:	f023 0301 	bic.w	r3, r3, #1
 800615a:	6083      	str	r3, [r0, #8]
}
 800615c:	2000      	movs	r0, #0
 800615e:	4770      	bx	lr

08006160 <USB_SetCurrentMode>:
{
 8006160:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006162:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8006164:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006166:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800616a:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800616c:	d108      	bne.n	8006180 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800616e:	68c3      	ldr	r3, [r0, #12]
 8006170:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006174:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8006176:	2032      	movs	r0, #50	; 0x32
 8006178:	f7fc f9ba 	bl	80024f0 <HAL_Delay>
  return HAL_OK;
 800617c:	2000      	movs	r0, #0
 800617e:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 8006180:	b919      	cbnz	r1, 800618a <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006182:	68c3      	ldr	r3, [r0, #12]
 8006184:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006188:	e7f4      	b.n	8006174 <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 800618a:	2001      	movs	r0, #1
}
 800618c:	bd08      	pop	{r3, pc}
	...

08006190 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006190:	0189      	lsls	r1, r1, #6
 8006192:	f041 0120 	orr.w	r1, r1, #32
 8006196:	4a06      	ldr	r2, [pc, #24]	; (80061b0 <USB_FlushTxFifo+0x20>)
 8006198:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 800619a:	3a01      	subs	r2, #1
 800619c:	d005      	beq.n	80061aa <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800619e:	6903      	ldr	r3, [r0, #16]
 80061a0:	f013 0320 	ands.w	r3, r3, #32
 80061a4:	d1f9      	bne.n	800619a <USB_FlushTxFifo+0xa>
  return HAL_OK;
 80061a6:	4618      	mov	r0, r3
 80061a8:	4770      	bx	lr
      return HAL_TIMEOUT;
 80061aa:	2003      	movs	r0, #3
}
 80061ac:	4770      	bx	lr
 80061ae:	bf00      	nop
 80061b0:	00030d41 	.word	0x00030d41

080061b4 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80061b4:	2310      	movs	r3, #16
 80061b6:	4a06      	ldr	r2, [pc, #24]	; (80061d0 <USB_FlushRxFifo+0x1c>)
 80061b8:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 80061ba:	3a01      	subs	r2, #1
 80061bc:	d005      	beq.n	80061ca <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80061be:	6903      	ldr	r3, [r0, #16]
 80061c0:	f013 0310 	ands.w	r3, r3, #16
 80061c4:	d1f9      	bne.n	80061ba <USB_FlushRxFifo+0x6>
  return HAL_OK;
 80061c6:	4618      	mov	r0, r3
 80061c8:	4770      	bx	lr
      return HAL_TIMEOUT;
 80061ca:	2003      	movs	r0, #3
}
 80061cc:	4770      	bx	lr
 80061ce:	bf00      	nop
 80061d0:	00030d41 	.word	0x00030d41

080061d4 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 80061d4:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80061d8:	4319      	orrs	r1, r3
 80061da:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 80061de:	2000      	movs	r0, #0
 80061e0:	4770      	bx	lr
	...

080061e4 <USB_DevInit>:
{
 80061e4:	b084      	sub	sp, #16
 80061e6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061ea:	4604      	mov	r4, r0
 80061ec:	a809      	add	r0, sp, #36	; 0x24
 80061ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 80061f2:	2300      	movs	r3, #0
 80061f4:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80061f6:	460f      	mov	r7, r1
    USBx->DIEPTXF[i] = 0U;
 80061f8:	4619      	mov	r1, r3
 80061fa:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80061fe:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 8006202:	3301      	adds	r3, #1
 8006204:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 8006206:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8006208:	d1f7      	bne.n	80061fa <USB_DevInit+0x16>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800620a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  if (cfg.vbus_sensing_enable == 0U)
 800620c:	2e00      	cmp	r6, #0
 800620e:	d162      	bne.n	80062d6 <USB_DevInit+0xf2>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006210:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006214:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006216:	6823      	ldr	r3, [r4, #0]
 8006218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800621c:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800621e:	6823      	ldr	r3, [r4, #0]
 8006220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006224:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 8006226:	2300      	movs	r3, #0
 8006228:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800622c:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8006230:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006234:	2103      	movs	r1, #3
 8006236:	4620      	mov	r0, r4
 8006238:	f7ff ffcc 	bl	80061d4 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800623c:	2110      	movs	r1, #16
 800623e:	4620      	mov	r0, r4
 8006240:	f7ff ffa6 	bl	8006190 <USB_FlushTxFifo>
 8006244:	4601      	mov	r1, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006246:	4620      	mov	r0, r4
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006248:	f504 6500 	add.w	r5, r4, #2048	; 0x800
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800624c:	f7ff ffb2 	bl	80061b4 <USB_FlushRxFifo>
 8006250:	2800      	cmp	r0, #0
 8006252:	d144      	bne.n	80062de <USB_DevInit+0xfa>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006254:	1c08      	adds	r0, r1, #0
 8006256:	bf18      	it	ne
 8006258:	2001      	movne	r0, #1
  USBx_DEVICE->DIEPMSK = 0U;
 800625a:	2300      	movs	r3, #0
 800625c:	612b      	str	r3, [r5, #16]
 800625e:	f504 6210 	add.w	r2, r4, #2304	; 0x900
  USBx_DEVICE->DOEPMSK = 0U;
 8006262:	616b      	str	r3, [r5, #20]
      USBx_INEP(i)->DIEPCTL = 0U;
 8006264:	4619      	mov	r1, r3
  USBx_DEVICE->DAINTMSK = 0U;
 8006266:	61eb      	str	r3, [r5, #28]
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006268:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800626c:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006270:	f64f 387f 	movw	r8, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006274:	42bb      	cmp	r3, r7
 8006276:	d134      	bne.n	80062e2 <USB_DevInit+0xfe>
 8006278:	2100      	movs	r1, #0
 800627a:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800627e:	460f      	mov	r7, r1
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006280:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006284:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006288:	f64f 387f 	movw	r8, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800628c:	428b      	cmp	r3, r1
 800628e:	d13b      	bne.n	8006308 <USB_DevInit+0x124>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006290:	692b      	ldr	r3, [r5, #16]
 8006292:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006296:	612b      	str	r3, [r5, #16]
  USBx->GINTMSK = 0U;
 8006298:	2300      	movs	r3, #0
 800629a:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800629c:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 80062a0:	6163      	str	r3, [r4, #20]
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80062a2:	69a3      	ldr	r3, [r4, #24]
 80062a4:	f043 0310 	orr.w	r3, r3, #16
 80062a8:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80062aa:	69a2      	ldr	r2, [r4, #24]
 80062ac:	4b20      	ldr	r3, [pc, #128]	; (8006330 <USB_DevInit+0x14c>)
 80062ae:	4313      	orrs	r3, r2
 80062b0:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 80062b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80062b4:	b11b      	cbz	r3, 80062be <USB_DevInit+0xda>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80062b6:	69a3      	ldr	r3, [r4, #24]
 80062b8:	f043 0308 	orr.w	r3, r3, #8
 80062bc:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 80062be:	2e01      	cmp	r6, #1
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80062c0:	bf01      	itttt	eq
 80062c2:	69a3      	ldreq	r3, [r4, #24]
 80062c4:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 80062c8:	f043 0304 	orreq.w	r3, r3, #4
 80062cc:	61a3      	streq	r3, [r4, #24]
}
 80062ce:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062d2:	b004      	add	sp, #16
 80062d4:	4770      	bx	lr
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80062d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80062da:	63a3      	str	r3, [r4, #56]	; 0x38
 80062dc:	e7a3      	b.n	8006226 <USB_DevInit+0x42>
 80062de:	2001      	movs	r0, #1
 80062e0:	e7bb      	b.n	800625a <USB_DevInit+0x76>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80062e2:	f8d2 9000 	ldr.w	r9, [r2]
 80062e6:	f1b9 0f00 	cmp.w	r9, #0
 80062ea:	da0b      	bge.n	8006304 <USB_DevInit+0x120>
      if (i == 0U)
 80062ec:	b93b      	cbnz	r3, 80062fe <USB_DevInit+0x11a>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80062ee:	f8c2 c000 	str.w	ip, [r2]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 80062f2:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062f4:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80062f6:	f8c2 8008 	str.w	r8, [r2, #8]
 80062fa:	3220      	adds	r2, #32
 80062fc:	e7ba      	b.n	8006274 <USB_DevInit+0x90>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80062fe:	f8c2 e000 	str.w	lr, [r2]
 8006302:	e7f6      	b.n	80062f2 <USB_DevInit+0x10e>
      USBx_INEP(i)->DIEPCTL = 0U;
 8006304:	6011      	str	r1, [r2, #0]
 8006306:	e7f4      	b.n	80062f2 <USB_DevInit+0x10e>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006308:	f8d2 9000 	ldr.w	r9, [r2]
 800630c:	f1b9 0f00 	cmp.w	r9, #0
 8006310:	da0b      	bge.n	800632a <USB_DevInit+0x146>
      if (i == 0U)
 8006312:	b939      	cbnz	r1, 8006324 <USB_DevInit+0x140>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006314:	f8c2 c000 	str.w	ip, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006318:	6117      	str	r7, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800631a:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800631c:	f8c2 8008 	str.w	r8, [r2, #8]
 8006320:	3220      	adds	r2, #32
 8006322:	e7b3      	b.n	800628c <USB_DevInit+0xa8>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006324:	f8c2 e000 	str.w	lr, [r2]
 8006328:	e7f6      	b.n	8006318 <USB_DevInit+0x134>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800632a:	6017      	str	r7, [r2, #0]
 800632c:	e7f4      	b.n	8006318 <USB_DevInit+0x134>
 800632e:	bf00      	nop
 8006330:	803c3800 	.word	0x803c3800

08006334 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006334:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006338:	f013 0f02 	tst.w	r3, #2
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800633c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
}
 8006340:	bf14      	ite	ne
 8006342:	2002      	movne	r0, #2
 8006344:	200f      	moveq	r0, #15
 8006346:	4770      	bx	lr

08006348 <USB_ActivateEndpoint>:
{
 8006348:	b570      	push	{r4, r5, r6, lr}
  if (ep->is_in == 1U)
 800634a:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800634c:	780c      	ldrb	r4, [r1, #0]
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800634e:	f8d0 681c 	ldr.w	r6, [r0, #2076]	; 0x81c
 8006352:	f500 6300 	add.w	r3, r0, #2048	; 0x800
  if (ep->is_in == 1U)
 8006356:	2a01      	cmp	r2, #1
 8006358:	f004 050f 	and.w	r5, r4, #15
 800635c:	d11b      	bne.n	8006396 <USB_ActivateEndpoint+0x4e>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800635e:	40aa      	lsls	r2, r5
 8006360:	4332      	orrs	r2, r6
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006362:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006366:	61da      	str	r2, [r3, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006368:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800636c:	041a      	lsls	r2, r3, #16
 800636e:	d410      	bmi.n	8006392 <USB_ActivateEndpoint+0x4a>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006370:	688b      	ldr	r3, [r1, #8]
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006372:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006374:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8006378:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800637c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006380:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006384:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8006388:	ea43 5384 	orr.w	r3, r3, r4, lsl #22
 800638c:	4313      	orrs	r3, r2
 800638e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8006392:	2000      	movs	r0, #0
 8006394:	bd70      	pop	{r4, r5, r6, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006396:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800639a:	40aa      	lsls	r2, r5
 800639c:	4332      	orrs	r2, r6
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800639e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80063a2:	61da      	str	r2, [r3, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80063a4:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80063a8:	041b      	lsls	r3, r3, #16
 80063aa:	d4f2      	bmi.n	8006392 <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80063ac:	688b      	ldr	r3, [r1, #8]
                                    ((uint32_t)ep->type << 18) |
 80063ae:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80063b0:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 80063b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80063b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063c0:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 80063c4:	4313      	orrs	r3, r2
 80063c6:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 80063ca:	e7e2      	b.n	8006392 <USB_ActivateEndpoint+0x4a>

080063cc <USB_DeactivateEndpoint>:
{
 80063cc:	b530      	push	{r4, r5, lr}
  if (ep->is_in == 1U)
 80063ce:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80063d0:	780c      	ldrb	r4, [r1, #0]
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80063d2:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 80063d6:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  if (ep->is_in == 1U)
 80063da:	2b01      	cmp	r3, #1
 80063dc:	f004 050f 	and.w	r5, r4, #15
 80063e0:	d110      	bne.n	8006404 <USB_DeactivateEndpoint+0x38>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80063e2:	40ab      	lsls	r3, r5
 80063e4:	43db      	mvns	r3, r3
 80063e6:	4019      	ands	r1, r3
 80063e8:	63d1      	str	r1, [r2, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80063ea:	69d1      	ldr	r1, [r2, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80063ec:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80063f0:	400b      	ands	r3, r1
 80063f2:	61d3      	str	r3, [r2, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80063f4:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 80063f8:	4b0b      	ldr	r3, [pc, #44]	; (8006428 <USB_DeactivateEndpoint+0x5c>)
 80063fa:	4013      	ands	r3, r2
 80063fc:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8006400:	2000      	movs	r0, #0
 8006402:	bd30      	pop	{r4, r5, pc}
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006404:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006408:	40ab      	lsls	r3, r5
 800640a:	43db      	mvns	r3, r3
 800640c:	4019      	ands	r1, r3
 800640e:	63d1      	str	r1, [r2, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006410:	69d1      	ldr	r1, [r2, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006412:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006416:	400b      	ands	r3, r1
 8006418:	61d3      	str	r3, [r2, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800641a:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800641e:	4b03      	ldr	r3, [pc, #12]	; (800642c <USB_DeactivateEndpoint+0x60>)
 8006420:	4013      	ands	r3, r2
 8006422:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8006426:	e7eb      	b.n	8006400 <USB_DeactivateEndpoint+0x34>
 8006428:	ec337800 	.word	0xec337800
 800642c:	eff37800 	.word	0xeff37800

08006430 <USB_EP0StartXfer>:
{
 8006430:	b570      	push	{r4, r5, r6, lr}
  if (ep->is_in == 1U)
 8006432:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8006434:	780a      	ldrb	r2, [r1, #0]
 8006436:	694d      	ldr	r5, [r1, #20]
 8006438:	4e35      	ldr	r6, [pc, #212]	; (8006510 <USB_EP0StartXfer+0xe0>)
  if (ep->is_in == 1U)
 800643a:	2b01      	cmp	r3, #1
 800643c:	f04f 0320 	mov.w	r3, #32
 8006440:	d145      	bne.n	80064ce <USB_EP0StartXfer+0x9e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006442:	fb13 0302 	smlabb	r3, r3, r2, r0
    if (ep->xfer_len == 0U)
 8006446:	bb45      	cbnz	r5, 800649a <USB_EP0StartXfer+0x6a>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006448:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 800644c:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8006450:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8006454:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006458:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 800645c:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8006460:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006464:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 8006468:	4026      	ands	r6, r4
 800646a:	f8c3 6910 	str.w	r6, [r3, #2320]	; 0x910
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800646e:	eb00 1242 	add.w	r2, r0, r2, lsl #5
    if (ep->xfer_len > 0U)
 8006472:	694b      	ldr	r3, [r1, #20]
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006474:	f8d2 4900 	ldr.w	r4, [r2, #2304]	; 0x900
 8006478:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 800647c:	f8c2 4900 	str.w	r4, [r2, #2304]	; 0x900
    if (ep->xfer_len > 0U)
 8006480:	b14b      	cbz	r3, 8006496 <USB_EP0StartXfer+0x66>
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006482:	780a      	ldrb	r2, [r1, #0]
 8006484:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 8006488:	f002 010f 	and.w	r1, r2, #15
 800648c:	2201      	movs	r2, #1
 800648e:	408a      	lsls	r2, r1
 8006490:	431a      	orrs	r2, r3
 8006492:	f8c0 2834 	str.w	r2, [r0, #2100]	; 0x834
}
 8006496:	2000      	movs	r0, #0
 8006498:	bd70      	pop	{r4, r5, r6, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800649a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800649e:	691c      	ldr	r4, [r3, #16]
 80064a0:	4026      	ands	r6, r4
 80064a2:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80064a4:	691c      	ldr	r4, [r3, #16]
 80064a6:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 80064aa:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 80064ae:	611c      	str	r4, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 80064b0:	688c      	ldr	r4, [r1, #8]
 80064b2:	42a5      	cmp	r5, r4
        ep->xfer_len = ep->maxpacket;
 80064b4:	bf88      	it	hi
 80064b6:	614c      	strhi	r4, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80064b8:	691c      	ldr	r4, [r3, #16]
 80064ba:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 80064be:	611c      	str	r4, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80064c0:	694c      	ldr	r4, [r1, #20]
 80064c2:	691d      	ldr	r5, [r3, #16]
 80064c4:	f3c4 0412 	ubfx	r4, r4, #0, #19
 80064c8:	432c      	orrs	r4, r5
 80064ca:	611c      	str	r4, [r3, #16]
 80064cc:	e7cf      	b.n	800646e <USB_EP0StartXfer+0x3e>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80064ce:	fb13 0002 	smlabb	r0, r3, r2, r0
 80064d2:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 80064d6:	691a      	ldr	r2, [r3, #16]
 80064d8:	4032      	ands	r2, r6
 80064da:	611a      	str	r2, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80064dc:	691a      	ldr	r2, [r3, #16]
 80064de:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 80064e2:	f422 12c0 	bic.w	r2, r2, #1572864	; 0x180000
 80064e6:	611a      	str	r2, [r3, #16]
 80064e8:	688a      	ldr	r2, [r1, #8]
    if (ep->xfer_len > 0U)
 80064ea:	b105      	cbz	r5, 80064ee <USB_EP0StartXfer+0xbe>
      ep->xfer_len = ep->maxpacket;
 80064ec:	614a      	str	r2, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80064ee:	6919      	ldr	r1, [r3, #16]
 80064f0:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
 80064f4:	6119      	str	r1, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80064f6:	6919      	ldr	r1, [r3, #16]
 80064f8:	f3c2 0212 	ubfx	r2, r2, #0, #19
 80064fc:	430a      	orrs	r2, r1
 80064fe:	611a      	str	r2, [r3, #16]
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006500:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8006504:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006508:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800650c:	e7c3      	b.n	8006496 <USB_EP0StartXfer+0x66>
 800650e:	bf00      	nop
 8006510:	fff80000 	.word	0xfff80000

08006514 <USB_WritePacket>:
  count32b = ((uint32_t)len + 3U) / 4U;
 8006514:	3303      	adds	r3, #3
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006516:	eb00 3202 	add.w	r2, r0, r2, lsl #12
 800651a:	f023 0303 	bic.w	r3, r3, #3
 800651e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006522:	440b      	add	r3, r1
  for (i = 0U; i < count32b; i++)
 8006524:	4299      	cmp	r1, r3
 8006526:	d101      	bne.n	800652c <USB_WritePacket+0x18>
}
 8006528:	2000      	movs	r0, #0
 800652a:	4770      	bx	lr
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800652c:	f851 0b04 	ldr.w	r0, [r1], #4
 8006530:	6010      	str	r0, [r2, #0]
 8006532:	e7f7      	b.n	8006524 <USB_WritePacket+0x10>

08006534 <USB_EPStartXfer>:
{
 8006534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 8006536:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8006538:	780d      	ldrb	r5, [r1, #0]
 800653a:	4e58      	ldr	r6, [pc, #352]	; (800669c <USB_EPStartXfer+0x168>)
  if (ep->is_in == 1U)
 800653c:	2b01      	cmp	r3, #1
 800653e:	f04f 0220 	mov.w	r2, #32
 8006542:	694b      	ldr	r3, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006544:	fb12 0205 	smlabb	r2, r2, r5, r0
  if (ep->is_in == 1U)
 8006548:	d16a      	bne.n	8006620 <USB_EPStartXfer+0xec>
    if (ep->xfer_len == 0U)
 800654a:	bb3b      	cbnz	r3, 800659c <USB_EPStartXfer+0x68>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800654c:	f502 6410 	add.w	r4, r2, #2304	; 0x900
 8006550:	f8d2 2910 	ldr.w	r2, [r2, #2320]	; 0x910
 8006554:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 8006558:	f422 12c0 	bic.w	r2, r2, #1572864	; 0x180000
 800655c:	6122      	str	r2, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800655e:	6922      	ldr	r2, [r4, #16]
 8006560:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8006564:	6122      	str	r2, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006566:	6922      	ldr	r2, [r4, #16]
 8006568:	4016      	ands	r6, r2
 800656a:	6126      	str	r6, [r4, #16]
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800656c:	eb00 1245 	add.w	r2, r0, r5, lsl #5
 8006570:	f8d2 4900 	ldr.w	r4, [r2, #2304]	; 0x900
 8006574:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8006578:	f8c2 4900 	str.w	r4, [r2, #2304]	; 0x900
    if (ep->type != EP_TYPE_ISOC)
 800657c:	78cc      	ldrb	r4, [r1, #3]
 800657e:	2c01      	cmp	r4, #1
 8006580:	d03b      	beq.n	80065fa <USB_EPStartXfer+0xc6>
      if (ep->xfer_len > 0U)
 8006582:	b14b      	cbz	r3, 8006598 <USB_EPStartXfer+0x64>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006584:	780b      	ldrb	r3, [r1, #0]
 8006586:	f8d0 4834 	ldr.w	r4, [r0, #2100]	; 0x834
 800658a:	f003 020f 	and.w	r2, r3, #15
 800658e:	2301      	movs	r3, #1
 8006590:	4093      	lsls	r3, r2
 8006592:	4323      	orrs	r3, r4
 8006594:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
}
 8006598:	2000      	movs	r0, #0
 800659a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800659c:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 80065a0:	4034      	ands	r4, r6
 80065a2:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80065a6:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80065aa:	688e      	ldr	r6, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80065ac:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 80065b0:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 80065b4:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80065b8:	199c      	adds	r4, r3, r6
 80065ba:	3c01      	subs	r4, #1
 80065bc:	fbb4 f6f6 	udiv	r6, r4, r6
 80065c0:	4c37      	ldr	r4, [pc, #220]	; (80066a0 <USB_EPStartXfer+0x16c>)
 80065c2:	f8d2 7910 	ldr.w	r7, [r2, #2320]	; 0x910
 80065c6:	ea04 44c6 	and.w	r4, r4, r6, lsl #19
 80065ca:	433c      	orrs	r4, r7
 80065cc:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80065d0:	f8d2 6910 	ldr.w	r6, [r2, #2320]	; 0x910
 80065d4:	f3c3 0412 	ubfx	r4, r3, #0, #19
 80065d8:	4334      	orrs	r4, r6
 80065da:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      if (ep->type == EP_TYPE_ISOC)
 80065de:	78cc      	ldrb	r4, [r1, #3]
 80065e0:	2c01      	cmp	r4, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80065e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 80065e6:	d1c1      	bne.n	800656c <USB_EPStartXfer+0x38>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80065e8:	6914      	ldr	r4, [r2, #16]
 80065ea:	f024 44c0 	bic.w	r4, r4, #1610612736	; 0x60000000
 80065ee:	6114      	str	r4, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80065f0:	6914      	ldr	r4, [r2, #16]
 80065f2:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 80065f6:	6114      	str	r4, [r2, #16]
 80065f8:	e7b8      	b.n	800656c <USB_EPStartXfer+0x38>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80065fa:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 80065fe:	f414 7f80 	tst.w	r4, #256	; 0x100
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006602:	f8d2 4900 	ldr.w	r4, [r2, #2304]	; 0x900
 8006606:	bf0c      	ite	eq
 8006608:	f044 5400 	orreq.w	r4, r4, #536870912	; 0x20000000
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800660c:	f044 5480 	orrne.w	r4, r4, #268435456	; 0x10000000
 8006610:	f8c2 4900 	str.w	r4, [r2, #2304]	; 0x900
      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8006614:	780a      	ldrb	r2, [r1, #0]
 8006616:	68c9      	ldr	r1, [r1, #12]
 8006618:	b29b      	uxth	r3, r3
 800661a:	f7ff ff7b 	bl	8006514 <USB_WritePacket>
 800661e:	e7bb      	b.n	8006598 <USB_EPStartXfer+0x64>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006620:	f502 6530 	add.w	r5, r2, #2816	; 0xb00
 8006624:	692c      	ldr	r4, [r5, #16]
 8006626:	4034      	ands	r4, r6
 8006628:	612c      	str	r4, [r5, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800662a:	692c      	ldr	r4, [r5, #16]
 800662c:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8006630:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8006634:	612c      	str	r4, [r5, #16]
 8006636:	688c      	ldr	r4, [r1, #8]
    if (ep->xfer_len == 0U)
 8006638:	b9fb      	cbnz	r3, 800667a <USB_EPStartXfer+0x146>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800663a:	692b      	ldr	r3, [r5, #16]
 800663c:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8006640:	431c      	orrs	r4, r3
 8006642:	612c      	str	r4, [r5, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006644:	692b      	ldr	r3, [r5, #16]
 8006646:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800664a:	612b      	str	r3, [r5, #16]
    if (ep->type == EP_TYPE_ISOC)
 800664c:	78cb      	ldrb	r3, [r1, #3]
 800664e:	2b01      	cmp	r3, #1
 8006650:	d10c      	bne.n	800666c <USB_EPStartXfer+0x138>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006652:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8006656:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800665a:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 800665e:	bf0c      	ite	eq
 8006660:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006664:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8006668:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800666c:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8006670:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006674:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
 8006678:	e78e      	b.n	8006598 <USB_EPStartXfer+0x64>
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800667a:	4e09      	ldr	r6, [pc, #36]	; (80066a0 <USB_EPStartXfer+0x16c>)
 800667c:	692f      	ldr	r7, [r5, #16]
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800667e:	4423      	add	r3, r4
 8006680:	3b01      	subs	r3, #1
 8006682:	fbb3 f3f4 	udiv	r3, r3, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006686:	ea06 46c3 	and.w	r6, r6, r3, lsl #19
 800668a:	433e      	orrs	r6, r7
 800668c:	612e      	str	r6, [r5, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800668e:	b29b      	uxth	r3, r3
 8006690:	692e      	ldr	r6, [r5, #16]
 8006692:	4363      	muls	r3, r4
 8006694:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006698:	4333      	orrs	r3, r6
 800669a:	e7d6      	b.n	800664a <USB_EPStartXfer+0x116>
 800669c:	fff80000 	.word	0xfff80000
 80066a0:	1ff80000 	.word	0x1ff80000

080066a4 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80066a4:	3203      	adds	r2, #3
 80066a6:	f022 0203 	bic.w	r2, r2, #3
 80066aa:	440a      	add	r2, r1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80066ac:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for (i = 0U; i < count32b; i++)
 80066b0:	4291      	cmp	r1, r2
 80066b2:	d101      	bne.n	80066b8 <USB_ReadPacket+0x14>
}
 80066b4:	4608      	mov	r0, r1
 80066b6:	4770      	bx	lr
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80066b8:	6803      	ldr	r3, [r0, #0]
 80066ba:	f841 3b04 	str.w	r3, [r1], #4
 80066be:	e7f7      	b.n	80066b0 <USB_ReadPacket+0xc>

080066c0 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 80066c0:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80066c2:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	f04f 0320 	mov.w	r3, #32
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80066ca:	fb13 0002 	smlabb	r0, r3, r2, r0
  if (ep->is_in == 1U)
 80066ce:	d112      	bne.n	80066f6 <USB_EPSetStall+0x36>
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80066d0:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	db06      	blt.n	80066e6 <USB_EPSetStall+0x26>
 80066d8:	b12a      	cbz	r2, 80066e6 <USB_EPSetStall+0x26>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80066da:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80066de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80066e2:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80066e6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80066ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80066ee:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 80066f2:	2000      	movs	r0, #0
 80066f4:	4770      	bx	lr
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80066f6:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	db06      	blt.n	800670c <USB_EPSetStall+0x4c>
 80066fe:	b12a      	cbz	r2, 800670c <USB_EPSetStall+0x4c>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006700:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8006704:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006708:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800670c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8006710:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006714:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8006718:	e7eb      	b.n	80066f2 <USB_EPSetStall+0x32>

0800671a <USB_EPClearStall>:
  if (ep->is_in == 1U)
 800671a:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800671c:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 800671e:	2b01      	cmp	r3, #1
 8006720:	f04f 0320 	mov.w	r3, #32
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006724:	fb13 0002 	smlabb	r0, r3, r2, r0
  if (ep->is_in == 1U)
 8006728:	d111      	bne.n	800674e <USB_EPClearStall+0x34>
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800672a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800672e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006732:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006736:	78cb      	ldrb	r3, [r1, #3]
 8006738:	3b02      	subs	r3, #2
 800673a:	2b01      	cmp	r3, #1
 800673c:	d805      	bhi.n	800674a <USB_EPClearStall+0x30>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800673e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8006742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006746:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800674a:	2000      	movs	r0, #0
 800674c:	4770      	bx	lr
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800674e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8006752:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006756:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800675a:	78cb      	ldrb	r3, [r1, #3]
 800675c:	3b02      	subs	r3, #2
 800675e:	2b01      	cmp	r3, #1
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006760:	bf9e      	ittt	ls
 8006762:	f8d0 3b00 	ldrls.w	r3, [r0, #2816]	; 0xb00
 8006766:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
 800676a:	f8c0 3b00 	strls.w	r3, [r0, #2816]	; 0xb00
 800676e:	e7ec      	b.n	800674a <USB_EPClearStall+0x30>

08006770 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006770:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8006774:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006778:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800677c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8006780:	0109      	lsls	r1, r1, #4
 8006782:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8006786:	4319      	orrs	r1, r3
 8006788:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 800678c:	2000      	movs	r0, #0
 800678e:	4770      	bx	lr

08006790 <USB_DevConnect>:
{
 8006790:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006792:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8006796:	f023 0302 	bic.w	r3, r3, #2
 800679a:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 800679e:	2003      	movs	r0, #3
 80067a0:	f7fb fea6 	bl	80024f0 <HAL_Delay>
}
 80067a4:	2000      	movs	r0, #0
 80067a6:	bd08      	pop	{r3, pc}

080067a8 <USB_DevDisconnect>:
{
 80067a8:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80067aa:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80067ae:	f043 0302 	orr.w	r3, r3, #2
 80067b2:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 80067b6:	2003      	movs	r0, #3
 80067b8:	f7fb fe9a 	bl	80024f0 <HAL_Delay>
}
 80067bc:	2000      	movs	r0, #0
 80067be:	bd08      	pop	{r3, pc}

080067c0 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 80067c0:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 80067c2:	6980      	ldr	r0, [r0, #24]
}
 80067c4:	4010      	ands	r0, r2
 80067c6:	4770      	bx	lr

080067c8 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 80067c8:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 80067cc:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80067d0:	69c0      	ldr	r0, [r0, #28]
 80067d2:	4018      	ands	r0, r3
}
 80067d4:	0c00      	lsrs	r0, r0, #16
 80067d6:	4770      	bx	lr

080067d8 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 80067d8:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 80067dc:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80067e0:	69c0      	ldr	r0, [r0, #28]
 80067e2:	4018      	ands	r0, r3
}
 80067e4:	b280      	uxth	r0, r0
 80067e6:	4770      	bx	lr

080067e8 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80067e8:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80067ec:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80067f0:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80067f4:	6940      	ldr	r0, [r0, #20]
}
 80067f6:	4010      	ands	r0, r2
 80067f8:	4770      	bx	lr

080067fa <USB_ReadDevInEPInterrupt>:
{
 80067fa:	b510      	push	{r4, lr}
  msk = USBx_DEVICE->DIEPMSK;
 80067fc:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006800:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006804:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006808:	f001 010f 	and.w	r1, r1, #15
 800680c:	40cb      	lsrs	r3, r1
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800680e:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006812:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006814:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006816:	b2db      	uxtb	r3, r3
 8006818:	4323      	orrs	r3, r4
}
 800681a:	4018      	ands	r0, r3
 800681c:	bd10      	pop	{r4, pc}

0800681e <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800681e:	6940      	ldr	r0, [r0, #20]
}
 8006820:	f000 0001 	and.w	r0, r0, #1
 8006824:	4770      	bx	lr

08006826 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006826:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800682a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800682e:	f023 0307 	bic.w	r3, r3, #7
 8006832:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8006836:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 800683a:	689a      	ldr	r2, [r3, #8]
 800683c:	f002 0206 	and.w	r2, r2, #6
 8006840:	2a04      	cmp	r2, #4
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8006842:	bf02      	ittt	eq
 8006844:	f8d0 2900 	ldreq.w	r2, [r0, #2304]	; 0x900
 8006848:	f042 0203 	orreq.w	r2, r2, #3
 800684c:	f8c0 2900 	streq.w	r2, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006850:	685a      	ldr	r2, [r3, #4]
 8006852:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006856:	605a      	str	r2, [r3, #4]
}
 8006858:	2000      	movs	r0, #0
 800685a:	4770      	bx	lr

0800685c <USB_EP0_OutStart>:
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800685c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800685e:	4b0f      	ldr	r3, [pc, #60]	; (800689c <USB_EP0_OutStart+0x40>)
 8006860:	429a      	cmp	r2, r3
 8006862:	d903      	bls.n	800686c <USB_EP0_OutStart+0x10>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006864:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8006868:	2b00      	cmp	r3, #0
 800686a:	db14      	blt.n	8006896 <USB_EP0_OutStart+0x3a>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800686c:	2300      	movs	r3, #0
 800686e:	f8c0 3b10 	str.w	r3, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006872:	f8d0 3b10 	ldr.w	r3, [r0, #2832]	; 0xb10
 8006876:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800687a:	f8c0 3b10 	str.w	r3, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800687e:	f8d0 3b10 	ldr.w	r3, [r0, #2832]	; 0xb10
 8006882:	f043 0318 	orr.w	r3, r3, #24
 8006886:	f8c0 3b10 	str.w	r3, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800688a:	f8d0 3b10 	ldr.w	r3, [r0, #2832]	; 0xb10
 800688e:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006892:	f8c0 3b10 	str.w	r3, [r0, #2832]	; 0xb10
}
 8006896:	2000      	movs	r0, #0
 8006898:	4770      	bx	lr
 800689a:	bf00      	nop
 800689c:	4f54300a 	.word	0x4f54300a

080068a0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80068a0:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80068a2:	4903      	ldr	r1, [pc, #12]	; (80068b0 <MX_FATFS_Init+0x10>)
 80068a4:	4803      	ldr	r0, [pc, #12]	; (80068b4 <MX_FATFS_Init+0x14>)
 80068a6:	f001 f83b 	bl	8007920 <FATFS_LinkDriver>
 80068aa:	4b03      	ldr	r3, [pc, #12]	; (80068b8 <MX_FATFS_Init+0x18>)
 80068ac:	7018      	strb	r0, [r3, #0]
 80068ae:	bd08      	pop	{r3, pc}
 80068b0:	2000c8b0 	.word	0x2000c8b0
 80068b4:	20000010 	.word	0x20000010
 80068b8:	2000c8b4 	.word	0x2000c8b4

080068bc <USER_status>:
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 80068bc:	4b02      	ldr	r3, [pc, #8]	; (80068c8 <USER_status+0xc>)
 80068be:	2201      	movs	r2, #1
 80068c0:	701a      	strb	r2, [r3, #0]
    return Stat;
 80068c2:	7818      	ldrb	r0, [r3, #0]
  /* USER CODE END STATUS */
}
 80068c4:	4770      	bx	lr
 80068c6:	bf00      	nop
 80068c8:	2000000c 	.word	0x2000000c

080068cc <USER_write>:
{ 
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
  /* USER CODE END WRITE */
}
 80068cc:	2000      	movs	r0, #0
 80068ce:	4770      	bx	lr

080068d0 <USER_ioctl>:
{
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
    return res;
  /* USER CODE END IOCTL */
}
 80068d0:	2001      	movs	r0, #1
 80068d2:	4770      	bx	lr

080068d4 <USER_read>:
 80068d4:	2000      	movs	r0, #0
 80068d6:	4770      	bx	lr

080068d8 <USER_initialize>:
 80068d8:	4b02      	ldr	r3, [pc, #8]	; (80068e4 <USER_initialize+0xc>)
 80068da:	2201      	movs	r2, #1
 80068dc:	701a      	strb	r2, [r3, #0]
 80068de:	7818      	ldrb	r0, [r3, #0]
 80068e0:	4770      	bx	lr
 80068e2:	bf00      	nop
 80068e4:	2000000c 	.word	0x2000000c

080068e8 <USBD_MSC_GetHSCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_CfgHSDesc);
 80068e8:	2320      	movs	r3, #32
 80068ea:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_CfgHSDesc;
}
 80068ec:	4800      	ldr	r0, [pc, #0]	; (80068f0 <USBD_MSC_GetHSCfgDesc+0x8>)
 80068ee:	4770      	bx	lr
 80068f0:	2000007c 	.word	0x2000007c

080068f4 <USBD_MSC_GetFSCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_CfgFSDesc);
 80068f4:	2320      	movs	r3, #32
 80068f6:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_CfgFSDesc;
}
 80068f8:	4800      	ldr	r0, [pc, #0]	; (80068fc <USBD_MSC_GetFSCfgDesc+0x8>)
 80068fa:	4770      	bx	lr
 80068fc:	2000005c 	.word	0x2000005c

08006900 <USBD_MSC_GetOtherSpeedCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_OtherSpeedCfgDesc);
 8006900:	2320      	movs	r3, #32
 8006902:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_OtherSpeedCfgDesc;
}
 8006904:	4800      	ldr	r0, [pc, #0]	; (8006908 <USBD_MSC_GetOtherSpeedCfgDesc+0x8>)
 8006906:	4770      	bx	lr
 8006908:	200000a8 	.word	0x200000a8

0800690c <USBD_MSC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_MSC_DeviceQualifierDesc);
 800690c:	230a      	movs	r3, #10
 800690e:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_DeviceQualifierDesc;
}
 8006910:	4800      	ldr	r0, [pc, #0]	; (8006914 <USBD_MSC_GetDeviceQualifierDescriptor+0x8>)
 8006912:	4770      	bx	lr
 8006914:	2000009c 	.word	0x2000009c

08006918 <USBD_MSC_Init>:
{
 8006918:	b538      	push	{r3, r4, r5, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800691a:	7c03      	ldrb	r3, [r0, #16]
{
 800691c:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800691e:	b9e3      	cbnz	r3, 800695a <USBD_MSC_Init+0x42>
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8006920:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006924:	2202      	movs	r2, #2
 8006926:	2101      	movs	r1, #1
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006928:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800692a:	f001 f9b1 	bl	8007c90 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800692e:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8006932:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8006936:	2202      	movs	r2, #2
 8006938:	2181      	movs	r1, #129	; 0x81
 800693a:	4620      	mov	r0, r4
 800693c:	f001 f9a8 	bl	8007c90 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8006940:	62e5      	str	r5, [r4, #44]	; 0x2c
  pdev->pClassData = USBD_malloc(sizeof (USBD_MSC_BOT_HandleTypeDef));
 8006942:	f44f 701b 	mov.w	r0, #620	; 0x26c
 8006946:	f001 fa5f 	bl	8007e08 <USBD_static_malloc>
 800694a:	f8c4 0290 	str.w	r0, [r4, #656]	; 0x290
  if(pdev->pClassData == NULL)
 800694e:	b170      	cbz	r0, 800696e <USBD_MSC_Init+0x56>
  MSC_BOT_Init(pdev);
 8006950:	4620      	mov	r0, r4
 8006952:	f000 f8ea 	bl	8006b2a <MSC_BOT_Init>
  return USBD_OK;
 8006956:	2000      	movs	r0, #0
 8006958:	bd38      	pop	{r3, r4, r5, pc}
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800695a:	2340      	movs	r3, #64	; 0x40
 800695c:	2202      	movs	r2, #2
 800695e:	2101      	movs	r1, #1
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006960:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8006962:	f001 f995 	bl	8007c90 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006966:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800696a:	2340      	movs	r3, #64	; 0x40
 800696c:	e7e3      	b.n	8006936 <USBD_MSC_Init+0x1e>
    return USBD_FAIL;
 800696e:	2002      	movs	r0, #2
}
 8006970:	bd38      	pop	{r3, r4, r5, pc}

08006972 <USBD_MSC_DeInit>:
{
 8006972:	b538      	push	{r3, r4, r5, lr}
 8006974:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 8006976:	2101      	movs	r1, #1
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 8006978:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 800697a:	f001 f999 	bl	8007cb0 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 800697e:	2181      	movs	r1, #129	; 0x81
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 8006980:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 8006984:	4620      	mov	r0, r4
 8006986:	f001 f993 	bl	8007cb0 <USBD_LL_CloseEP>
  MSC_BOT_DeInit(pdev);
 800698a:	4620      	mov	r0, r4
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 800698c:	62e5      	str	r5, [r4, #44]	; 0x2c
  MSC_BOT_DeInit(pdev);
 800698e:	f000 f8f7 	bl	8006b80 <MSC_BOT_DeInit>
  if(pdev->pClassData != NULL)
 8006992:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
 8006996:	b118      	cbz	r0, 80069a0 <USBD_MSC_DeInit+0x2e>
    USBD_free(pdev->pClassData);
 8006998:	f001 fa3a 	bl	8007e10 <USBD_static_free>
    pdev->pClassData  = NULL;
 800699c:	f8c4 5290 	str.w	r5, [r4, #656]	; 0x290
}
 80069a0:	2000      	movs	r0, #0
 80069a2:	bd38      	pop	{r3, r4, r5, pc}

080069a4 <USBD_MSC_Setup>:
{
 80069a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint16_t status_info = 0U;
 80069a8:	2300      	movs	r3, #0
 80069aa:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069ae:	780b      	ldrb	r3, [r1, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 80069b0:	f8d0 7290 	ldr.w	r7, [r0, #656]	; 0x290
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069b4:	f013 0260 	ands.w	r2, r3, #96	; 0x60
{
 80069b8:	4604      	mov	r4, r0
 80069ba:	460e      	mov	r6, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069bc:	d02d      	beq.n	8006a1a <USBD_MSC_Setup+0x76>
 80069be:	2a20      	cmp	r2, #32
 80069c0:	d104      	bne.n	80069cc <USBD_MSC_Setup+0x28>
    switch (req->bRequest)
 80069c2:	784a      	ldrb	r2, [r1, #1]
 80069c4:	2afe      	cmp	r2, #254	; 0xfe
 80069c6:	d005      	beq.n	80069d4 <USBD_MSC_Setup+0x30>
 80069c8:	2aff      	cmp	r2, #255	; 0xff
 80069ca:	d018      	beq.n	80069fe <USBD_MSC_Setup+0x5a>
    USBD_CtlError (pdev, req);
 80069cc:	f000 ff2b 	bl	8007826 <USBD_CtlError>
    ret = USBD_FAIL;
 80069d0:	2002      	movs	r0, #2
    break;
 80069d2:	e01f      	b.n	8006a14 <USBD_MSC_Setup+0x70>
      if((req->wValue  == 0U) && (req->wLength == 1U) &&
 80069d4:	884d      	ldrh	r5, [r1, #2]
 80069d6:	2d00      	cmp	r5, #0
 80069d8:	d175      	bne.n	8006ac6 <USBD_MSC_Setup+0x122>
 80069da:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 80069de:	f1b8 0f01 	cmp.w	r8, #1
 80069e2:	d170      	bne.n	8006ac6 <USBD_MSC_Setup+0x122>
 80069e4:	061a      	lsls	r2, r3, #24
 80069e6:	d56e      	bpl.n	8006ac6 <USBD_MSC_Setup+0x122>
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 80069e8:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 80069ec:	699b      	ldr	r3, [r3, #24]
 80069ee:	4798      	blx	r3
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hmsc->max_lun, 1U);
 80069f0:	4642      	mov	r2, r8
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 80069f2:	6038      	str	r0, [r7, #0]
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hmsc->max_lun, 1U);
 80069f4:	4639      	mov	r1, r7
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hmsc->interface, 1U);
 80069f6:	4620      	mov	r0, r4
 80069f8:	f000 ff3c 	bl	8007874 <USBD_CtlSendData>
 80069fc:	e009      	b.n	8006a12 <USBD_MSC_Setup+0x6e>
      if((req->wValue  == 0U) && (req->wLength == 0U) &&
 80069fe:	884a      	ldrh	r2, [r1, #2]
 8006a00:	2a00      	cmp	r2, #0
 8006a02:	d160      	bne.n	8006ac6 <USBD_MSC_Setup+0x122>
 8006a04:	88cd      	ldrh	r5, [r1, #6]
 8006a06:	2d00      	cmp	r5, #0
 8006a08:	d15d      	bne.n	8006ac6 <USBD_MSC_Setup+0x122>
 8006a0a:	061b      	lsls	r3, r3, #24
 8006a0c:	d45b      	bmi.n	8006ac6 <USBD_MSC_Setup+0x122>
        MSC_BOT_Reset(pdev);
 8006a0e:	f000 f8ac 	bl	8006b6a <MSC_BOT_Reset>
  uint8_t ret = USBD_OK;
 8006a12:	2000      	movs	r0, #0
}
 8006a14:	b002      	add	sp, #8
 8006a16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (req->bRequest)
 8006a1a:	784b      	ldrb	r3, [r1, #1]
 8006a1c:	2b0b      	cmp	r3, #11
 8006a1e:	d852      	bhi.n	8006ac6 <USBD_MSC_Setup+0x122>
 8006a20:	e8df f003 	tbb	[pc, r3]
 8006a24:	51511c06 	.word	0x51511c06
 8006a28:	51515151 	.word	0x51515151
 8006a2c:	150e5151 	.word	0x150e5151
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a30:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8006a34:	2b03      	cmp	r3, #3
 8006a36:	d146      	bne.n	8006ac6 <USBD_MSC_Setup+0x122>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8006a38:	2202      	movs	r2, #2
 8006a3a:	f10d 0106 	add.w	r1, sp, #6
 8006a3e:	e7da      	b.n	80069f6 <USBD_MSC_Setup+0x52>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a40:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8006a44:	2b03      	cmp	r3, #3
 8006a46:	d13e      	bne.n	8006ac6 <USBD_MSC_Setup+0x122>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hmsc->interface, 1U);
 8006a48:	2201      	movs	r2, #1
 8006a4a:	1d39      	adds	r1, r7, #4
 8006a4c:	e7d3      	b.n	80069f6 <USBD_MSC_Setup+0x52>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a4e:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8006a52:	2b03      	cmp	r3, #3
 8006a54:	d137      	bne.n	8006ac6 <USBD_MSC_Setup+0x122>
        hmsc->interface = (uint8_t)(req->wValue);
 8006a56:	788b      	ldrb	r3, [r1, #2]
 8006a58:	607b      	str	r3, [r7, #4]
 8006a5a:	e7da      	b.n	8006a12 <USBD_MSC_Setup+0x6e>
      USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8006a5c:	7909      	ldrb	r1, [r1, #4]
 8006a5e:	f001 f935 	bl	8007ccc <USBD_LL_FlushEP>
      USBD_LL_CloseEP (pdev , (uint8_t)req->wIndex);
 8006a62:	7931      	ldrb	r1, [r6, #4]
 8006a64:	4620      	mov	r0, r4
 8006a66:	f001 f923 	bl	8007cb0 <USBD_LL_CloseEP>
      if((((uint8_t)req->wIndex) & 0x80U) == 0x80U)
 8006a6a:	88b3      	ldrh	r3, [r6, #4]
 8006a6c:	7c22      	ldrb	r2, [r4, #16]
 8006a6e:	2114      	movs	r1, #20
 8006a70:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006a74:	f003 030f 	and.w	r3, r3, #15
        pdev->ep_in[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8006a78:	fb01 4303 	mla	r3, r1, r3, r4
 8006a7c:	f04f 0100 	mov.w	r1, #0
      if((((uint8_t)req->wIndex) & 0x80U) == 0x80U)
 8006a80:	d011      	beq.n	8006aa6 <USBD_MSC_Setup+0x102>
        pdev->ep_in[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8006a82:	6199      	str	r1, [r3, #24]
        if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006a84:	b96a      	cbnz	r2, 8006aa2 <USBD_MSC_Setup+0xfe>
          USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8006a86:	f44f 7300 	mov.w	r3, #512	; 0x200
          USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8006a8a:	2202      	movs	r2, #2
 8006a8c:	2181      	movs	r1, #129	; 0x81
 8006a8e:	4620      	mov	r0, r4
 8006a90:	f001 f8fe 	bl	8007c90 <USBD_LL_OpenEP>
        pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8006a94:	2301      	movs	r3, #1
 8006a96:	62e3      	str	r3, [r4, #44]	; 0x2c
      MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8006a98:	7931      	ldrb	r1, [r6, #4]
 8006a9a:	4620      	mov	r0, r4
 8006a9c:	f000 f91a 	bl	8006cd4 <MSC_BOT_CplClrFeature>
 8006aa0:	e7b7      	b.n	8006a12 <USBD_MSC_Setup+0x6e>
          USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8006aa2:	2340      	movs	r3, #64	; 0x40
 8006aa4:	e7f1      	b.n	8006a8a <USBD_MSC_Setup+0xe6>
        pdev->ep_out[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8006aa6:	f8c3 1144 	str.w	r1, [r3, #324]	; 0x144
        if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006aaa:	b952      	cbnz	r2, 8006ac2 <USBD_MSC_Setup+0x11e>
          USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8006aac:	f44f 7300 	mov.w	r3, #512	; 0x200
          USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8006ab0:	2202      	movs	r2, #2
 8006ab2:	2101      	movs	r1, #1
 8006ab4:	4620      	mov	r0, r4
 8006ab6:	f001 f8eb 	bl	8007c90 <USBD_LL_OpenEP>
        pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006aba:	2301      	movs	r3, #1
 8006abc:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
 8006ac0:	e7ea      	b.n	8006a98 <USBD_MSC_Setup+0xf4>
          USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8006ac2:	2340      	movs	r3, #64	; 0x40
 8006ac4:	e7f4      	b.n	8006ab0 <USBD_MSC_Setup+0x10c>
      USBD_CtlError (pdev, req);
 8006ac6:	4631      	mov	r1, r6
 8006ac8:	4620      	mov	r0, r4
 8006aca:	e77f      	b.n	80069cc <USBD_MSC_Setup+0x28>

08006acc <USBD_MSC_DataIn>:
{
 8006acc:	b508      	push	{r3, lr}
  MSC_BOT_DataIn(pdev , epnum);
 8006ace:	f000 f879 	bl	8006bc4 <MSC_BOT_DataIn>
}
 8006ad2:	2000      	movs	r0, #0
 8006ad4:	bd08      	pop	{r3, pc}

08006ad6 <USBD_MSC_DataOut>:
{
 8006ad6:	b508      	push	{r3, lr}
  MSC_BOT_DataOut(pdev , epnum);
 8006ad8:	f000 f890 	bl	8006bfc <MSC_BOT_DataOut>
}
 8006adc:	2000      	movs	r0, #0
 8006ade:	bd08      	pop	{r3, pc}

08006ae0 <USBD_MSC_RegisterStorage>:
* @retval status
*/
uint8_t  USBD_MSC_RegisterStorage  (USBD_HandleTypeDef   *pdev,
                                    USBD_StorageTypeDef *fops)
{
  if(fops != NULL)
 8006ae0:	b109      	cbz	r1, 8006ae6 <USBD_MSC_RegisterStorage+0x6>
  {
    pdev->pUserData = fops;
 8006ae2:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  }
  return USBD_OK;
}
 8006ae6:	2000      	movs	r0, #0
 8006ae8:	4770      	bx	lr

08006aea <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort (USBD_HandleTypeDef  *pdev)
{
 8006aea:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006aec:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290

  if ((hmsc->cbw.bmFlags == 0U) &&
 8006af0:	f894 3218 	ldrb.w	r3, [r4, #536]	; 0x218
{
 8006af4:	4605      	mov	r5, r0
  if ((hmsc->cbw.bmFlags == 0U) &&
 8006af6:	b93b      	cbnz	r3, 8006b08 <MSC_BOT_Abort+0x1e>
 8006af8:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8006afc:	b123      	cbz	r3, 8006b08 <MSC_BOT_Abort+0x1e>
      (hmsc->cbw.dDataLength != 0U) &&
 8006afe:	7a63      	ldrb	r3, [r4, #9]
 8006b00:	b913      	cbnz	r3, 8006b08 <MSC_BOT_Abort+0x1e>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR );
 8006b02:	2101      	movs	r1, #1
 8006b04:	f001 f8f0 	bl	8007ce8 <USBD_LL_StallEP>
  }

  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8006b08:	2181      	movs	r1, #129	; 0x81
 8006b0a:	4628      	mov	r0, r5
 8006b0c:	f001 f8ec 	bl	8007ce8 <USBD_LL_StallEP>

  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8006b10:	7a63      	ldrb	r3, [r4, #9]
 8006b12:	2b02      	cmp	r3, #2
 8006b14:	d108      	bne.n	8006b28 <MSC_BOT_Abort+0x3e>
  {
    USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006b16:	f504 7203 	add.w	r2, r4, #524	; 0x20c
 8006b1a:	4628      	mov	r0, r5
 8006b1c:	231f      	movs	r3, #31
 8006b1e:	2101      	movs	r1, #1
                            USBD_BOT_CBW_LENGTH);
  }
}
 8006b20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006b24:	f001 b92c 	b.w	8007d80 <USBD_LL_PrepareReceive>
 8006b28:	bd70      	pop	{r4, r5, r6, pc}

08006b2a <MSC_BOT_Init>:
{
 8006b2a:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006b2c:	f8d0 5290 	ldr.w	r5, [r0, #656]	; 0x290
{
 8006b30:	4604      	mov	r4, r0
  hmsc->bot_state = USBD_BOT_IDLE;
 8006b32:	2000      	movs	r0, #0
 8006b34:	7228      	strb	r0, [r5, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8006b36:	7268      	strb	r0, [r5, #9]
  hmsc->scsi_sense_tail = 0U;
 8006b38:	f885 025d 	strb.w	r0, [r5, #605]	; 0x25d
  hmsc->scsi_sense_head = 0U;
 8006b3c:	f885 025c 	strb.w	r0, [r5, #604]	; 0x25c
  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8006b40:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4798      	blx	r3
  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8006b48:	2101      	movs	r1, #1
 8006b4a:	4620      	mov	r0, r4
 8006b4c:	f001 f8be 	bl	8007ccc <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8006b50:	2181      	movs	r1, #129	; 0x81
 8006b52:	4620      	mov	r0, r4
 8006b54:	f001 f8ba 	bl	8007ccc <USBD_LL_FlushEP>
  USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006b58:	f505 7203 	add.w	r2, r5, #524	; 0x20c
 8006b5c:	4620      	mov	r0, r4
 8006b5e:	231f      	movs	r3, #31
 8006b60:	2101      	movs	r1, #1
}
 8006b62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006b66:	f001 b90b 	b.w	8007d80 <USBD_LL_PrepareReceive>

08006b6a <MSC_BOT_Reset>:
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006b6a:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290
  hmsc->bot_state  = USBD_BOT_IDLE;
 8006b6e:	2300      	movs	r3, #0
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8006b70:	2101      	movs	r1, #1
  hmsc->bot_state  = USBD_BOT_IDLE;
 8006b72:	7213      	strb	r3, [r2, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8006b74:	7251      	strb	r1, [r2, #9]
  USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006b76:	231f      	movs	r3, #31
 8006b78:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006b7c:	f001 b900 	b.w	8007d80 <USBD_LL_PrepareReceive>

08006b80 <MSC_BOT_DeInit>:
  hmsc->bot_state  = USBD_BOT_IDLE;
 8006b80:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290
 8006b84:	2200      	movs	r2, #0
 8006b86:	721a      	strb	r2, [r3, #8]
 8006b88:	4770      	bx	lr
	...

08006b8c <MSC_BOT_SendCSW>:
{
 8006b8c:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006b8e:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8006b92:	4b0b      	ldr	r3, [pc, #44]	; (8006bc0 <MSC_BOT_SendCSW+0x34>)
 8006b94:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
  hmsc->bot_state = USBD_BOT_IDLE;
 8006b98:	2300      	movs	r3, #0
{
 8006b9a:	4605      	mov	r5, r0
  hmsc->csw.bStatus = CSW_Status;
 8006b9c:	f884 1238 	strb.w	r1, [r4, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_IDLE;
 8006ba0:	7223      	strb	r3, [r4, #8]
  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, (uint8_t *)(void *)&hmsc->csw,
 8006ba2:	f504 720b 	add.w	r2, r4, #556	; 0x22c
 8006ba6:	230d      	movs	r3, #13
 8006ba8:	2181      	movs	r1, #129	; 0x81
 8006baa:	f001 f8db 	bl	8007d64 <USBD_LL_Transmit>
  USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006bae:	f504 7203 	add.w	r2, r4, #524	; 0x20c
 8006bb2:	4628      	mov	r0, r5
 8006bb4:	231f      	movs	r3, #31
 8006bb6:	2101      	movs	r1, #1
}
 8006bb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006bbc:	f001 b8e0 	b.w	8007d80 <USBD_LL_PrepareReceive>
 8006bc0:	53425355 	.word	0x53425355

08006bc4 <MSC_BOT_DataIn>:
{
 8006bc4:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006bc6:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290
  switch (hmsc->bot_state)
 8006bca:	7a1a      	ldrb	r2, [r3, #8]
 8006bcc:	2a02      	cmp	r2, #2
{
 8006bce:	4604      	mov	r4, r0
  switch (hmsc->bot_state)
 8006bd0:	d003      	beq.n	8006bda <MSC_BOT_DataIn+0x16>
 8006bd2:	d312      	bcc.n	8006bfa <MSC_BOT_DataIn+0x36>
 8006bd4:	2a04      	cmp	r2, #4
 8006bd6:	d90e      	bls.n	8006bf6 <MSC_BOT_DataIn+0x32>
 8006bd8:	bd10      	pop	{r4, pc}
    if(SCSI_ProcessCmd(pdev,
 8006bda:	f203 221b 	addw	r2, r3, #539	; 0x21b
 8006bde:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8006be2:	f000 f8a3 	bl	8006d2c <SCSI_ProcessCmd>
 8006be6:	2800      	cmp	r0, #0
 8006be8:	da07      	bge.n	8006bfa <MSC_BOT_DataIn+0x36>
      MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8006bea:	2101      	movs	r1, #1
 8006bec:	4620      	mov	r0, r4
}
 8006bee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 8006bf2:	f7ff bfcb 	b.w	8006b8c <MSC_BOT_SendCSW>
 8006bf6:	2100      	movs	r1, #0
 8006bf8:	e7f9      	b.n	8006bee <MSC_BOT_DataIn+0x2a>
 8006bfa:	bd10      	pop	{r4, pc}

08006bfc <MSC_BOT_DataOut>:
{
 8006bfc:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006bfe:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
  switch (hmsc->bot_state)
 8006c02:	7a23      	ldrb	r3, [r4, #8]
{
 8006c04:	4605      	mov	r5, r0
  switch (hmsc->bot_state)
 8006c06:	b113      	cbz	r3, 8006c0e <MSC_BOT_DataOut+0x12>
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d058      	beq.n	8006cbe <MSC_BOT_DataOut+0xc2>
 8006c0c:	bd70      	pop	{r4, r5, r6, pc}
  hmsc->csw.dTag = hmsc->cbw.dTag;
 8006c0e:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 8006c12:	f8c4 3230 	str.w	r3, [r4, #560]	; 0x230
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8006c16:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8006c1a:	f8c4 3234 	str.w	r3, [r4, #564]	; 0x234
  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8006c1e:	2101      	movs	r1, #1
 8006c20:	f001 f8bc 	bl	8007d9c <USBD_LL_GetRxDataSize>
 8006c24:	281f      	cmp	r0, #31
 8006c26:	f894 1219 	ldrb.w	r1, [r4, #537]	; 0x219
 8006c2a:	d10b      	bne.n	8006c44 <MSC_BOT_DataOut+0x48>
 8006c2c:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 8006c30:	4b27      	ldr	r3, [pc, #156]	; (8006cd0 <MSC_BOT_DataOut+0xd4>)
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d106      	bne.n	8006c44 <MSC_BOT_DataOut+0x48>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8006c36:	2901      	cmp	r1, #1
 8006c38:	d804      	bhi.n	8006c44 <MSC_BOT_DataOut+0x48>
        (hmsc->cbw.bLUN > 1U) ||
 8006c3a:	f894 321a 	ldrb.w	r3, [r4, #538]	; 0x21a
 8006c3e:	3b01      	subs	r3, #1
 8006c40:	2b0f      	cmp	r3, #15
 8006c42:	d90b      	bls.n	8006c5c <MSC_BOT_DataOut+0x60>
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006c44:	2320      	movs	r3, #32
 8006c46:	2205      	movs	r2, #5
 8006c48:	4628      	mov	r0, r5
 8006c4a:	f000 fa9d 	bl	8007188 <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8006c4e:	2302      	movs	r3, #2
 8006c50:	7263      	strb	r3, [r4, #9]
        MSC_BOT_Abort(pdev);
 8006c52:	4628      	mov	r0, r5
}
 8006c54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        MSC_BOT_Abort(pdev);
 8006c58:	f7ff bf47 	b.w	8006aea <MSC_BOT_Abort>
    if(SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006c5c:	f204 221b 	addw	r2, r4, #539	; 0x21b
 8006c60:	4628      	mov	r0, r5
 8006c62:	f000 f863 	bl	8006d2c <SCSI_ProcessCmd>
 8006c66:	2800      	cmp	r0, #0
 8006c68:	7a23      	ldrb	r3, [r4, #8]
 8006c6a:	da07      	bge.n	8006c7c <MSC_BOT_DataOut+0x80>
      if(hmsc->bot_state == USBD_BOT_NO_DATA)
 8006c6c:	2b05      	cmp	r3, #5
 8006c6e:	d1f0      	bne.n	8006c52 <MSC_BOT_DataOut+0x56>
        MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8006c70:	2101      	movs	r1, #1
        MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 8006c72:	4628      	mov	r0, r5
}
 8006c74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 8006c78:	f7ff bf88 	b.w	8006b8c <MSC_BOT_SendCSW>
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8006c7c:	3b01      	subs	r3, #1
 8006c7e:	2b02      	cmp	r3, #2
 8006c80:	d925      	bls.n	8006cce <MSC_BOT_DataOut+0xd2>
      if (hmsc->bot_data_length > 0U)
 8006c82:	8963      	ldrh	r3, [r4, #10]
 8006c84:	b1cb      	cbz	r3, 8006cba <MSC_BOT_DataOut+0xbe>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006c86:	f8d5 1290 	ldr.w	r1, [r5, #656]	; 0x290
  hmsc->csw.dDataResidue -= len;
 8006c8a:	f8d1 0234 	ldr.w	r0, [r1, #564]	; 0x234
  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 8006c8e:	f8d1 6214 	ldr.w	r6, [r1, #532]	; 0x214
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8006c92:	f104 020c 	add.w	r2, r4, #12
  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 8006c96:	461c      	mov	r4, r3
  hmsc->csw.dDataResidue -= len;
 8006c98:	1b00      	subs	r0, r0, r4
 8006c9a:	f8c1 0234 	str.w	r0, [r1, #564]	; 0x234
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8006c9e:	2000      	movs	r0, #0
 8006ca0:	f881 0238 	strb.w	r0, [r1, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8006ca4:	2004      	movs	r0, #4
 8006ca6:	7208      	strb	r0, [r1, #8]
  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 8006ca8:	429e      	cmp	r6, r3
 8006caa:	bf38      	it	cc
 8006cac:	b2b3      	uxthcc	r3, r6
  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8006cae:	4628      	mov	r0, r5
 8006cb0:	2181      	movs	r1, #129	; 0x81
}
 8006cb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8006cb6:	f001 b855 	b.w	8007d64 <USBD_LL_Transmit>
        MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 8006cba:	4619      	mov	r1, r3
 8006cbc:	e7d9      	b.n	8006c72 <MSC_BOT_DataOut+0x76>
    if(SCSI_ProcessCmd(pdev,
 8006cbe:	f204 221b 	addw	r2, r4, #539	; 0x21b
 8006cc2:	f894 1219 	ldrb.w	r1, [r4, #537]	; 0x219
 8006cc6:	f000 f831 	bl	8006d2c <SCSI_ProcessCmd>
 8006cca:	2800      	cmp	r0, #0
 8006ccc:	dbd0      	blt.n	8006c70 <MSC_BOT_DataOut+0x74>
 8006cce:	bd70      	pop	{r4, r5, r6, pc}
 8006cd0:	43425355 	.word	0x43425355

08006cd4 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature (USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8006cd4:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006cd6:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290

  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR)/* Bad CBW Signature */
 8006cda:	7a63      	ldrb	r3, [r4, #9]
 8006cdc:	2b02      	cmp	r3, #2
 8006cde:	d105      	bne.n	8006cec <MSC_BOT_CplClrFeature+0x18>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8006ce0:	2181      	movs	r1, #129	; 0x81
 8006ce2:	f001 f801 	bl	8007ce8 <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	7263      	strb	r3, [r4, #9]
 8006cea:	bd10      	pop	{r4, pc}
  }
  else if(((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8006cec:	060a      	lsls	r2, r1, #24
 8006cee:	d506      	bpl.n	8006cfe <MSC_BOT_CplClrFeature+0x2a>
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d004      	beq.n	8006cfe <MSC_BOT_CplClrFeature+0x2a>
  {
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8006cf4:	2101      	movs	r1, #1
  }
  else
  {
    return;
  }
}
 8006cf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8006cfa:	f7ff bf47 	b.w	8006b8c <MSC_BOT_SendCSW>
 8006cfe:	bd10      	pop	{r4, pc}

08006d00 <SCSI_SenseCode.constprop.8>:
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006d00:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 8006d04:	f892 325d 	ldrb.w	r3, [r2, #605]	; 0x25d
 8006d08:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
  hmsc->scsi_sense_tail++;
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	b2db      	uxtb	r3, r3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 8006d10:	f880 123c 	strb.w	r1, [r0, #572]	; 0x23c
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8006d14:	2b04      	cmp	r3, #4
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 8006d16:	f04f 0100 	mov.w	r1, #0
 8006d1a:	f880 1240 	strb.w	r1, [r0, #576]	; 0x240
  hmsc->scsi_sense_tail++;
 8006d1e:	bf14      	ite	ne
 8006d20:	f882 325d 	strbne.w	r3, [r2, #605]	; 0x25d
  {
    hmsc->scsi_sense_tail = 0U;
 8006d24:	f882 125d 	strbeq.w	r1, [r2, #605]	; 0x25d
 8006d28:	4770      	bx	lr
	...

08006d2c <SCSI_ProcessCmd>:
{
 8006d2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  switch (cmd[0])
 8006d30:	7813      	ldrb	r3, [r2, #0]
 8006d32:	2b1e      	cmp	r3, #30
{
 8006d34:	4605      	mov	r5, r0
 8006d36:	460c      	mov	r4, r1
 8006d38:	4617      	mov	r7, r2
  switch (cmd[0])
 8006d3a:	d016      	beq.n	8006d6a <SCSI_ProcessCmd+0x3e>
 8006d3c:	d81a      	bhi.n	8006d74 <SCSI_ProcessCmd+0x48>
 8006d3e:	2b12      	cmp	r3, #18
 8006d40:	f000 80e3 	beq.w	8006f0a <SCSI_ProcessCmd+0x1de>
 8006d44:	d80c      	bhi.n	8006d60 <SCSI_ProcessCmd+0x34>
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	f000 8092 	beq.w	8006e70 <SCSI_ProcessCmd+0x144>
 8006d4c:	2b03      	cmp	r3, #3
 8006d4e:	f000 80ad 	beq.w	8006eac <SCSI_ProcessCmd+0x180>
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8006d52:	2105      	movs	r1, #5
 8006d54:	4628      	mov	r0, r5
 8006d56:	f7ff ffd3 	bl	8006d00 <SCSI_SenseCode.constprop.8>
    return -1;
 8006d5a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006d5e:	e0a1      	b.n	8006ea4 <SCSI_ProcessCmd+0x178>
  switch (cmd[0])
 8006d60:	2b1a      	cmp	r3, #26
 8006d62:	f000 80fa 	beq.w	8006f5a <SCSI_ProcessCmd+0x22e>
 8006d66:	2b1b      	cmp	r3, #27
 8006d68:	d1f3      	bne.n	8006d52 <SCSI_ProcessCmd+0x26>
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
  hmsc->bot_data_length = 0U;
 8006d6a:	f8d5 3290 	ldr.w	r3, [r5, #656]	; 0x290
 8006d6e:	2400      	movs	r4, #0
  if(SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
                            hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */
  }
  hmsc->bot_data_length = 0U;
 8006d70:	815c      	strh	r4, [r3, #10]
 8006d72:	e097      	b.n	8006ea4 <SCSI_ProcessCmd+0x178>
  switch (cmd[0])
 8006d74:	2b28      	cmp	r3, #40	; 0x28
 8006d76:	f000 813a 	beq.w	8006fee <SCSI_ProcessCmd+0x2c2>
 8006d7a:	d827      	bhi.n	8006dcc <SCSI_ProcessCmd+0xa0>
 8006d7c:	2b23      	cmp	r3, #35	; 0x23
 8006d7e:	f000 810a 	beq.w	8006f96 <SCSI_ProcessCmd+0x26a>
 8006d82:	2b25      	cmp	r3, #37	; 0x25
 8006d84:	d1e5      	bne.n	8006d52 <SCSI_ProcessCmd+0x26>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006d86:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 8006d8a:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8006d8e:	f206 225e 	addw	r2, r6, #606	; 0x25e
 8006d92:	4620      	mov	r0, r4
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	f506 7118 	add.w	r1, r6, #608	; 0x260
 8006d9a:	4798      	blx	r3
 8006d9c:	4604      	mov	r4, r0
 8006d9e:	2800      	cmp	r0, #0
 8006da0:	f040 810d 	bne.w	8006fbe <SCSI_ProcessCmd+0x292>
    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8006da4:	f8d6 3260 	ldr.w	r3, [r6, #608]	; 0x260
    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8006da8:	7430      	strb	r0, [r6, #16]
    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8006daa:	3b01      	subs	r3, #1
 8006dac:	0e1a      	lsrs	r2, r3, #24
 8006dae:	7332      	strb	r2, [r6, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8006db0:	0c1a      	lsrs	r2, r3, #16
 8006db2:	7372      	strb	r2, [r6, #13]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8006db4:	73f3      	strb	r3, [r6, #15]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8006db6:	0a1a      	lsrs	r2, r3, #8
    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8006db8:	f8b6 325e 	ldrh.w	r3, [r6, #606]	; 0x25e
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8006dbc:	73b2      	strb	r2, [r6, #14]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8006dbe:	74f3      	strb	r3, [r6, #19]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8006dc0:	0a1a      	lsrs	r2, r3, #8
    hmsc->bot_data_length = 8U;
 8006dc2:	2308      	movs	r3, #8
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8006dc4:	7470      	strb	r0, [r6, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8006dc6:	74b2      	strb	r2, [r6, #18]
    hmsc->bot_data_length = 8U;
 8006dc8:	8173      	strh	r3, [r6, #10]
 8006dca:	e06b      	b.n	8006ea4 <SCSI_ProcessCmd+0x178>
  switch (cmd[0])
 8006dcc:	2b2f      	cmp	r3, #47	; 0x2f
 8006dce:	f000 81c2 	beq.w	8007156 <SCSI_ProcessCmd+0x42a>
 8006dd2:	2b5a      	cmp	r3, #90	; 0x5a
 8006dd4:	f000 80d0 	beq.w	8006f78 <SCSI_ProcessCmd+0x24c>
 8006dd8:	2b2a      	cmp	r3, #42	; 0x2a
 8006dda:	d1ba      	bne.n	8006d52 <SCSI_ProcessCmd+0x26>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 8006ddc:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8006de0:	7a33      	ldrb	r3, [r6, #8]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	f040 8177 	bne.w	80070d6 <SCSI_ProcessCmd+0x3aa>
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8006de8:	f996 3218 	ldrsb.w	r3, [r6, #536]	; 0x218
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	db44      	blt.n	8006e7a <SCSI_ProcessCmd+0x14e>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8006df0:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8006df4:	4608      	mov	r0, r1
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	4798      	blx	r3
 8006dfa:	2800      	cmp	r0, #0
 8006dfc:	f040 80df 	bne.w	8006fbe <SCSI_ProcessCmd+0x292>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8006e00:	f8d5 3294 	ldr.w	r3, [r5, #660]	; 0x294
 8006e04:	4620      	mov	r0, r4
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	4798      	blx	r3
 8006e0a:	4604      	mov	r4, r0
 8006e0c:	2800      	cmp	r0, #0
 8006e0e:	f040 80d6 	bne.w	8006fbe <SCSI_ProcessCmd+0x292>
                          ((uint32_t)params[3] << 16) |
 8006e12:	78fa      	ldrb	r2, [r7, #3]
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006e14:	78bb      	ldrb	r3, [r7, #2]
                          ((uint32_t)params[3] << 16) |
 8006e16:	0412      	lsls	r2, r2, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006e18:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
                           (uint32_t)params[5];
 8006e1c:	797b      	ldrb	r3, [r7, #5]
                          ((uint32_t)params[4] << 8) |
 8006e1e:	431a      	orrs	r2, r3
 8006e20:	793b      	ldrb	r3, [r7, #4]
 8006e22:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006e26:	f8c6 2264 	str.w	r2, [r6, #612]	; 0x264
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8006e2a:	79f9      	ldrb	r1, [r7, #7]
                          (uint32_t)params[8];
 8006e2c:	7a3b      	ldrb	r3, [r7, #8]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8006e2e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
static int8_t SCSI_CheckAddressRange (USBD_HandleTypeDef *pdev, uint8_t lun,
                                      uint32_t blk_offset, uint32_t blk_nbr)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8006e32:	f8d5 1290 	ldr.w	r1, [r5, #656]	; 0x290
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8006e36:	f8c6 3268 	str.w	r3, [r6, #616]	; 0x268
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8006e3a:	f8d1 1260 	ldr.w	r1, [r1, #608]	; 0x260
 8006e3e:	441a      	add	r2, r3
 8006e40:	428a      	cmp	r2, r1
 8006e42:	d81a      	bhi.n	8006e7a <SCSI_ProcessCmd+0x14e>
    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8006e44:	f8b6 225e 	ldrh.w	r2, [r6, #606]	; 0x25e
 8006e48:	4353      	muls	r3, r2
    if (hmsc->cbw.dDataLength != len)
 8006e4a:	f8d6 2214 	ldr.w	r2, [r6, #532]	; 0x214
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d113      	bne.n	8006e7a <SCSI_ProcessCmd+0x14e>
    len = MIN(len, MSC_MEDIA_PACKET);
 8006e52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8006e56:	f04f 0101 	mov.w	r1, #1
    len = MIN(len, MSC_MEDIA_PACKET);
 8006e5a:	bf28      	it	cs
 8006e5c:	f44f 7300 	movcs.w	r3, #512	; 0x200
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8006e60:	7231      	strb	r1, [r6, #8]
    USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	f106 020c 	add.w	r2, r6, #12
 8006e68:	4628      	mov	r0, r5
 8006e6a:	f000 ff89 	bl	8007d80 <USBD_LL_PrepareReceive>
 8006e6e:	e019      	b.n	8006ea4 <SCSI_ProcessCmd+0x178>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006e70:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
  if (hmsc->cbw.dDataLength != 0U)
 8006e74:	f8d6 7214 	ldr.w	r7, [r6, #532]	; 0x214
 8006e78:	b127      	cbz	r7, 8006e84 <SCSI_ProcessCmd+0x158>
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006e7a:	2105      	movs	r1, #5
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
                              hmsc->bot_data,
                              hmsc->scsi_blk_addr,
                              (len / hmsc->scsi_blk_size)) < 0)
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8006e7c:	4628      	mov	r0, r5
 8006e7e:	f7ff ff3f 	bl	8006d00 <SCSI_SenseCode.constprop.8>
 8006e82:	e00c      	b.n	8006e9e <SCSI_ProcessCmd+0x172>
  if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8006e84:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8006e88:	4608      	mov	r0, r1
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	4798      	blx	r3
 8006e8e:	4604      	mov	r4, r0
 8006e90:	b138      	cbz	r0, 8006ea2 <SCSI_ProcessCmd+0x176>
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006e92:	2102      	movs	r1, #2
 8006e94:	4628      	mov	r0, r5
 8006e96:	f7ff ff33 	bl	8006d00 <SCSI_SenseCode.constprop.8>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8006e9a:	2305      	movs	r3, #5
 8006e9c:	7233      	strb	r3, [r6, #8]
  return 0;
 8006e9e:	2400      	movs	r4, #0
 8006ea0:	e000      	b.n	8006ea4 <SCSI_ProcessCmd+0x178>
  hmsc->bot_data_length = 0U;
 8006ea2:	8170      	strh	r0, [r6, #10]
}
 8006ea4:	4620      	mov	r0, r4
 8006ea6:	b003      	add	sp, #12
 8006ea8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006eac:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290
    hmsc->bot_data[i] = 0U;
 8006eb0:	2000      	movs	r0, #0
 8006eb2:	f103 020c 	add.w	r2, r3, #12
 8006eb6:	f103 011e 	add.w	r1, r3, #30
 8006eba:	f802 0b01 	strb.w	r0, [r2], #1
  for(i = 0U ;i < REQUEST_SENSE_DATA_LEN; i++)
 8006ebe:	428a      	cmp	r2, r1
 8006ec0:	d1fb      	bne.n	8006eba <SCSI_ProcessCmd+0x18e>
  hmsc->bot_data[0]	= 0x70U;
 8006ec2:	2270      	movs	r2, #112	; 0x70
 8006ec4:	731a      	strb	r2, [r3, #12]
  hmsc->bot_data[7]	= REQUEST_SENSE_DATA_LEN - 6U;
 8006ec6:	220c      	movs	r2, #12
 8006ec8:	74da      	strb	r2, [r3, #19]
  if((hmsc->scsi_sense_head != hmsc->scsi_sense_tail)) {
 8006eca:	f893 125d 	ldrb.w	r1, [r3, #605]	; 0x25d
 8006ece:	f893 225c 	ldrb.w	r2, [r3, #604]	; 0x25c
 8006ed2:	4291      	cmp	r1, r2
 8006ed4:	d012      	beq.n	8006efc <SCSI_ProcessCmd+0x1d0>
 8006ed6:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
    hmsc->scsi_sense_head++;
 8006eda:	3201      	adds	r2, #1
    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8006edc:	f891 423c 	ldrb.w	r4, [r1, #572]	; 0x23c
 8006ee0:	739c      	strb	r4, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8006ee2:	f891 4241 	ldrb.w	r4, [r1, #577]	; 0x241
 8006ee6:	761c      	strb	r4, [r3, #24]
    hmsc->scsi_sense_head++;
 8006ee8:	b2d2      	uxtb	r2, r2
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8006eea:	f891 1240 	ldrb.w	r1, [r1, #576]	; 0x240
 8006eee:	7659      	strb	r1, [r3, #25]
    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8006ef0:	2a04      	cmp	r2, #4
    hmsc->scsi_sense_head++;
 8006ef2:	bf14      	ite	ne
 8006ef4:	f883 225c 	strbne.w	r2, [r3, #604]	; 0x25c
      hmsc->scsi_sense_head = 0U;
 8006ef8:	f883 025c 	strbeq.w	r0, [r3, #604]	; 0x25c
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8006efc:	2212      	movs	r2, #18
 8006efe:	815a      	strh	r2, [r3, #10]
  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8006f00:	793a      	ldrb	r2, [r7, #4]
 8006f02:	2a12      	cmp	r2, #18
    hmsc->bot_data_length = params[4];
 8006f04:	bf98      	it	ls
 8006f06:	815a      	strhls	r2, [r3, #10]
 8006f08:	e7c9      	b.n	8006e9e <SCSI_ProcessCmd+0x172>
  if (params[1] & 0x01U)/*Evpd is set*/
 8006f0a:	787b      	ldrb	r3, [r7, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006f0c:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290
  if (params[1] & 0x01U)/*Evpd is set*/
 8006f10:	07db      	lsls	r3, r3, #31
 8006f12:	d50c      	bpl.n	8006f2e <SCSI_ProcessCmd+0x202>
    hmsc->bot_data_length = len;
 8006f14:	2307      	movs	r3, #7
 8006f16:	4999      	ldr	r1, [pc, #612]	; (800717c <SCSI_ProcessCmd+0x450>)
 8006f18:	8153      	strh	r3, [r2, #10]
 8006f1a:	f102 0312 	add.w	r3, r2, #18
 8006f1e:	320b      	adds	r2, #11
      hmsc->bot_data[len] = MSC_Page00_Inquiry_Data[len];
 8006f20:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
 8006f24:	f803 0901 	strb.w	r0, [r3], #-1
    while (len)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d1f9      	bne.n	8006f20 <SCSI_ProcessCmd+0x1f4>
 8006f2c:	e7b7      	b.n	8006e9e <SCSI_ProcessCmd+0x172>
    pPage = (uint8_t *)(void *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8006f2e:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8006f32:	69db      	ldr	r3, [r3, #28]
 8006f34:	eb01 04c1 	add.w	r4, r1, r1, lsl #3
 8006f38:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006f3c:	7939      	ldrb	r1, [r7, #4]
    len = (uint16_t)pPage[4] + 5U;
 8006f3e:	7923      	ldrb	r3, [r4, #4]
 8006f40:	3305      	adds	r3, #5
 8006f42:	428b      	cmp	r3, r1
 8006f44:	bf28      	it	cs
 8006f46:	460b      	movcs	r3, r1
    hmsc->bot_data_length = len;
 8006f48:	8153      	strh	r3, [r2, #10]
    while (len)
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d0a7      	beq.n	8006e9e <SCSI_ProcessCmd+0x172>
      len--;
 8006f4e:	3b01      	subs	r3, #1
 8006f50:	b29b      	uxth	r3, r3
      hmsc->bot_data[len] = pPage[len];
 8006f52:	18d1      	adds	r1, r2, r3
 8006f54:	5ce0      	ldrb	r0, [r4, r3]
 8006f56:	7308      	strb	r0, [r1, #12]
 8006f58:	e7f7      	b.n	8006f4a <SCSI_ProcessCmd+0x21e>
 8006f5a:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290
 8006f5e:	4988      	ldr	r1, [pc, #544]	; (8007180 <SCSI_ProcessCmd+0x454>)
  hmsc->bot_data_length = len;
 8006f60:	2208      	movs	r2, #8
 8006f62:	815a      	strh	r2, [r3, #10]
 8006f64:	f103 0213 	add.w	r2, r3, #19
 8006f68:	330b      	adds	r3, #11
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 8006f6a:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
 8006f6e:	f802 0901 	strb.w	r0, [r2], #-1
  while (len)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d1f9      	bne.n	8006f6a <SCSI_ProcessCmd+0x23e>
 8006f76:	e792      	b.n	8006e9e <SCSI_ProcessCmd+0x172>
 8006f78:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290
 8006f7c:	4981      	ldr	r1, [pc, #516]	; (8007184 <SCSI_ProcessCmd+0x458>)
  hmsc->bot_data_length = len;
 8006f7e:	2208      	movs	r2, #8
 8006f80:	815a      	strh	r2, [r3, #10]
 8006f82:	f103 0213 	add.w	r2, r3, #19
 8006f86:	330b      	adds	r3, #11
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 8006f88:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
 8006f8c:	f802 0901 	strb.w	r0, [r2], #-1
  while (len)
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d1f9      	bne.n	8006f88 <SCSI_ProcessCmd+0x25c>
 8006f94:	e783      	b.n	8006e9e <SCSI_ProcessCmd+0x172>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006f96:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
    hmsc->bot_data[i] = 0U;
 8006f9a:	2100      	movs	r1, #0
 8006f9c:	f106 030c 	add.w	r3, r6, #12
 8006fa0:	f106 0218 	add.w	r2, r6, #24
 8006fa4:	f803 1b01 	strb.w	r1, [r3], #1
  for(i = 0U; i < 12U ; i++)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d1fb      	bne.n	8006fa4 <SCSI_ProcessCmd+0x278>
  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0U)
 8006fac:	f8d5 3294 	ldr.w	r3, [r5, #660]	; 0x294
 8006fb0:	f10d 0202 	add.w	r2, sp, #2
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	a901      	add	r1, sp, #4
 8006fb8:	4620      	mov	r0, r4
 8006fba:	4798      	blx	r3
 8006fbc:	b108      	cbz	r0, 8006fc2 <SCSI_ProcessCmd+0x296>
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006fbe:	2102      	movs	r1, #2
 8006fc0:	e75c      	b.n	8006e7c <SCSI_ProcessCmd+0x150>
    hmsc->bot_data[3] = 0x08U;
 8006fc2:	2308      	movs	r3, #8
 8006fc4:	73f3      	strb	r3, [r6, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8006fc6:	9b01      	ldr	r3, [sp, #4]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8006fc8:	7570      	strb	r0, [r6, #21]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8006fca:	3b01      	subs	r3, #1
 8006fcc:	0e1a      	lsrs	r2, r3, #24
 8006fce:	7432      	strb	r2, [r6, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8006fd0:	0c1a      	lsrs	r2, r3, #16
 8006fd2:	7472      	strb	r2, [r6, #17]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8006fd4:	74f3      	strb	r3, [r6, #19]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8006fd6:	0a1a      	lsrs	r2, r3, #8
    hmsc->bot_data[8] = 0x02U;
 8006fd8:	2302      	movs	r3, #2
 8006fda:	7533      	strb	r3, [r6, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8006fdc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8006fe0:	74b2      	strb	r2, [r6, #18]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 8006fe2:	75f3      	strb	r3, [r6, #23]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8006fe4:	0a1a      	lsrs	r2, r3, #8
    hmsc->bot_data_length = 12U;
 8006fe6:	230c      	movs	r3, #12
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8006fe8:	75b2      	strb	r2, [r6, #22]
    hmsc->bot_data_length = 12U;
 8006fea:	8173      	strh	r3, [r6, #10]
 8006fec:	e757      	b.n	8006e9e <SCSI_ProcessCmd+0x172>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 8006fee:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
  if(hmsc->bot_state == USBD_BOT_IDLE)  /* Idle */
 8006ff2:	7a33      	ldrb	r3, [r6, #8]
 8006ff4:	bb7b      	cbnz	r3, 8007056 <SCSI_ProcessCmd+0x32a>
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8006ff6:	f996 3218 	ldrsb.w	r3, [r6, #536]	; 0x218
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	f6bf af3d 	bge.w	8006e7a <SCSI_ProcessCmd+0x14e>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8007000:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8007004:	4608      	mov	r0, r1
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	4798      	blx	r3
 800700a:	2800      	cmp	r0, #0
 800700c:	d1d7      	bne.n	8006fbe <SCSI_ProcessCmd+0x292>
                          ((uint32_t)params[3] << 16) |
 800700e:	78fb      	ldrb	r3, [r7, #3]
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007010:	78ba      	ldrb	r2, [r7, #2]
                          ((uint32_t)params[3] << 16) |
 8007012:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007014:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                           (uint32_t)params[5];
 8007018:	797a      	ldrb	r2, [r7, #5]
                          ((uint32_t)params[4] <<  8) |
 800701a:	4313      	orrs	r3, r2
 800701c:	793a      	ldrb	r2, [r7, #4]
 800701e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007022:	f8c6 3264 	str.w	r3, [r6, #612]	; 0x264
    hmsc->scsi_blk_len =  ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8007026:	79f9      	ldrb	r1, [r7, #7]
 8007028:	7a3a      	ldrb	r2, [r7, #8]
 800702a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800702e:	f8d5 1290 	ldr.w	r1, [r5, #656]	; 0x290
    hmsc->scsi_blk_len =  ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8007032:	f8c6 2268 	str.w	r2, [r6, #616]	; 0x268
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8007036:	f8d1 1260 	ldr.w	r1, [r1, #608]	; 0x260
 800703a:	4413      	add	r3, r2
 800703c:	428b      	cmp	r3, r1
 800703e:	f63f af1c 	bhi.w	8006e7a <SCSI_ProcessCmd+0x14e>
    hmsc->bot_state = USBD_BOT_DATA_IN;
 8007042:	2302      	movs	r3, #2
 8007044:	7233      	strb	r3, [r6, #8]
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8007046:	f8b6 325e 	ldrh.w	r3, [r6, #606]	; 0x25e
 800704a:	435a      	muls	r2, r3
 800704c:	f8d6 3214 	ldr.w	r3, [r6, #532]	; 0x214
 8007050:	4293      	cmp	r3, r2
 8007052:	f47f af12 	bne.w	8006e7a <SCSI_ProcessCmd+0x14e>
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8007056:	f44f 7300 	mov.w	r3, #512	; 0x200
 800705a:	8173      	strh	r3, [r6, #10]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800705c:	f8d5 6290 	ldr.w	r6, [r5, #656]	; 0x290
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8007060:	f8d5 2294 	ldr.w	r2, [r5, #660]	; 0x294
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007064:	f8b6 325e 	ldrh.w	r3, [r6, #606]	; 0x25e
 8007068:	f8d6 7268 	ldr.w	r7, [r6, #616]	; 0x268
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 800706c:	f8d2 9010 	ldr.w	r9, [r2, #16]
 8007070:	f8d6 2264 	ldr.w	r2, [r6, #612]	; 0x264
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007074:	435f      	muls	r7, r3
  len = MIN(len, MSC_MEDIA_PACKET);
 8007076:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
                              hmsc->bot_data,
 800707a:	f106 080c 	add.w	r8, r6, #12
  len = MIN(len, MSC_MEDIA_PACKET);
 800707e:	bf28      	it	cs
 8007080:	f44f 7700 	movcs.w	r7, #512	; 0x200
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8007084:	4641      	mov	r1, r8
                              (len / hmsc->scsi_blk_size)) < 0)
 8007086:	fbb7 f3f3 	udiv	r3, r7, r3
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 800708a:	4620      	mov	r0, r4
 800708c:	b29b      	uxth	r3, r3
 800708e:	47c8      	blx	r9
 8007090:	2800      	cmp	r0, #0
 8007092:	da01      	bge.n	8007098 <SCSI_ProcessCmd+0x36c>
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8007094:	2104      	movs	r1, #4
 8007096:	e6f1      	b.n	8006e7c <SCSI_ProcessCmd+0x150>
    return -1;
  }

  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8007098:	b2bb      	uxth	r3, r7
 800709a:	4642      	mov	r2, r8
 800709c:	2181      	movs	r1, #129	; 0x81
 800709e:	4628      	mov	r0, r5
 80070a0:	f000 fe60 	bl	8007d64 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80070a4:	f8b6 425e 	ldrh.w	r4, [r6, #606]	; 0x25e
 80070a8:	f8d6 2264 	ldr.w	r2, [r6, #612]	; 0x264
 80070ac:	fbb7 f3f4 	udiv	r3, r7, r4
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80070b0:	f8d6 4268 	ldr.w	r4, [r6, #616]	; 0x268
  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80070b4:	441a      	add	r2, r3
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80070b6:	1ae4      	subs	r4, r4, r3

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 80070b8:	f8d6 3234 	ldr.w	r3, [r6, #564]	; 0x234
  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80070bc:	f8c6 2264 	str.w	r2, [r6, #612]	; 0x264
  hmsc->csw.dDataResidue -= len;
 80070c0:	1bdf      	subs	r7, r3, r7
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80070c2:	f8c6 4268 	str.w	r4, [r6, #616]	; 0x268
  hmsc->csw.dDataResidue -= len;
 80070c6:	f8c6 7234 	str.w	r7, [r6, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 80070ca:	2c00      	cmp	r4, #0
 80070cc:	f47f aee7 	bne.w	8006e9e <SCSI_ProcessCmd+0x172>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 80070d0:	2303      	movs	r3, #3
 80070d2:	7233      	strb	r3, [r6, #8]
 80070d4:	e6e6      	b.n	8006ea4 <SCSI_ProcessCmd+0x178>
*/

static int8_t SCSI_ProcessWrite (USBD_HandleTypeDef  *pdev, uint8_t lun)
{
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80070d6:	f8b6 325e 	ldrh.w	r3, [r6, #606]	; 0x25e
 80070da:	f8d6 7268 	ldr.w	r7, [r6, #616]	; 0x268

  len = MIN(len, MSC_MEDIA_PACKET);

  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 80070de:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80070e2:	435f      	muls	r7, r3
  len = MIN(len, MSC_MEDIA_PACKET);
 80070e4:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 80070e8:	f106 080c 	add.w	r8, r6, #12
  len = MIN(len, MSC_MEDIA_PACKET);
 80070ec:	bf28      	it	cs
 80070ee:	f44f 7700 	movcs.w	r7, #512	; 0x200
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 80070f2:	f8d2 9014 	ldr.w	r9, [r2, #20]
                             hmsc->scsi_blk_addr,
                             (len / hmsc->scsi_blk_size)) < 0)
 80070f6:	fbb7 f3f3 	udiv	r3, r7, r3
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 80070fa:	f8d6 2264 	ldr.w	r2, [r6, #612]	; 0x264
 80070fe:	b29b      	uxth	r3, r3
 8007100:	4641      	mov	r1, r8
 8007102:	4620      	mov	r0, r4
 8007104:	47c8      	blx	r9
 8007106:	2800      	cmp	r0, #0
 8007108:	dbc4      	blt.n	8007094 <SCSI_ProcessCmd+0x368>
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);

    return -1;
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800710a:	f8d6 2264 	ldr.w	r2, [r6, #612]	; 0x264
 800710e:	f8b6 125e 	ldrh.w	r1, [r6, #606]	; 0x25e
 8007112:	fbb7 f0f1 	udiv	r0, r7, r1
 8007116:	4402      	add	r2, r0
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8007118:	f8d6 3268 	ldr.w	r3, [r6, #616]	; 0x268
  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800711c:	f8c6 2264 	str.w	r2, [r6, #612]	; 0x264

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8007120:	f8d6 2234 	ldr.w	r2, [r6, #564]	; 0x234
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8007124:	1a1b      	subs	r3, r3, r0
  hmsc->csw.dDataResidue -= len;
 8007126:	1bd7      	subs	r7, r2, r7
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8007128:	f8c6 3268 	str.w	r3, [r6, #616]	; 0x268
  hmsc->csw.dDataResidue -= len;
 800712c:	f8c6 7234 	str.w	r7, [r6, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 8007130:	b923      	cbnz	r3, 800713c <SCSI_ProcessCmd+0x410>
  {
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 8007132:	2100      	movs	r1, #0
 8007134:	4628      	mov	r0, r5
 8007136:	f7ff fd29 	bl	8006b8c <MSC_BOT_SendCSW>
 800713a:	e6b0      	b.n	8006e9e <SCSI_ProcessCmd+0x172>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800713c:	434b      	muls	r3, r1
 800713e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007142:	bf28      	it	cs
 8007144:	f44f 7300 	movcs.w	r3, #512	; 0x200
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8007148:	b29b      	uxth	r3, r3
 800714a:	4642      	mov	r2, r8
 800714c:	2101      	movs	r1, #1
 800714e:	4628      	mov	r0, r5
 8007150:	f000 fe16 	bl	8007d80 <USBD_LL_PrepareReceive>
 8007154:	e6a3      	b.n	8006e9e <SCSI_ProcessCmd+0x172>
  if ((params[1]& 0x02U) == 0x02U)
 8007156:	7854      	ldrb	r4, [r2, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 8007158:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290
  if ((params[1]& 0x02U) == 0x02U)
 800715c:	f014 0402 	ands.w	r4, r4, #2
 8007160:	f47f ae8b 	bne.w	8006e7a <SCSI_ProcessCmd+0x14e>
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8007164:	f8d3 1268 	ldr.w	r1, [r3, #616]	; 0x268
 8007168:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800716c:	440a      	add	r2, r1
 800716e:	f8d3 1260 	ldr.w	r1, [r3, #608]	; 0x260
 8007172:	428a      	cmp	r2, r1
 8007174:	f67f adfc 	bls.w	8006d70 <SCSI_ProcessCmd+0x44>
 8007178:	e67f      	b.n	8006e7a <SCSI_ProcessCmd+0x14e>
 800717a:	bf00      	nop
 800717c:	080106af 	.word	0x080106af
 8007180:	080106a8 	.word	0x080106a8
 8007184:	080106a0 	.word	0x080106a0

08007188 <SCSI_SenseCode>:
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8007188:	f8d0 1290 	ldr.w	r1, [r0, #656]	; 0x290
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 800718c:	f891 325d 	ldrb.w	r3, [r1, #605]	; 0x25d
 8007190:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
  hmsc->scsi_sense_tail++;
 8007194:	3301      	adds	r3, #1
 8007196:	b2db      	uxtb	r3, r3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 8007198:	f880 223c 	strb.w	r2, [r0, #572]	; 0x23c
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800719c:	2b04      	cmp	r3, #4
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 800719e:	f04f 0200 	mov.w	r2, #0
 80071a2:	f880 2240 	strb.w	r2, [r0, #576]	; 0x240
  hmsc->scsi_sense_tail++;
 80071a6:	bf14      	ite	ne
 80071a8:	f881 325d 	strbne.w	r3, [r1, #605]	; 0x25d
    hmsc->scsi_sense_tail = 0U;
 80071ac:	f881 225d 	strbeq.w	r2, [r1, #605]	; 0x25d
 80071b0:	4770      	bx	lr

080071b2 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80071b2:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80071b4:	b180      	cbz	r0, 80071d8 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80071b6:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80071ba:	b113      	cbz	r3, 80071c2 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 80071bc:	2300      	movs	r3, #0
 80071be:	f8c0 328c 	str.w	r3, [r0, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80071c2:	b109      	cbz	r1, 80071c8 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 80071c4:	f8c0 1288 	str.w	r1, [r0, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80071c8:	2301      	movs	r3, #1
 80071ca:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  pdev->id = id;
 80071ce:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80071d0:	f000 fd22 	bl	8007c18 <USBD_LL_Init>

  return USBD_OK;
 80071d4:	2000      	movs	r0, #0
 80071d6:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 80071d8:	2002      	movs	r0, #2
}
 80071da:	bd08      	pop	{r3, pc}

080071dc <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 80071dc:	b119      	cbz	r1, 80071e6 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80071de:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
    status = USBD_OK;
 80071e2:	2000      	movs	r0, #0
 80071e4:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80071e6:	2002      	movs	r0, #2
  }

  return status;
}
 80071e8:	4770      	bx	lr

080071ea <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80071ea:	b508      	push	{r3, lr}

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80071ec:	f000 fd42 	bl	8007c74 <USBD_LL_Start>

  return USBD_OK;
}
 80071f0:	2000      	movs	r0, #0
 80071f2:	bd08      	pop	{r3, pc}

080071f4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80071f4:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;

  if(pdev->pClass != NULL)
 80071f6:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80071fa:	b90b      	cbnz	r3, 8007200 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80071fc:	2002      	movs	r0, #2
 80071fe:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4798      	blx	r3
 8007204:	2800      	cmp	r0, #0
 8007206:	d1f9      	bne.n	80071fc <USBD_SetClassConfig+0x8>
      ret = USBD_OK;
    }
  }

  return ret;
}
 8007208:	bd08      	pop	{r3, pc}

0800720a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800720a:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800720c:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	4798      	blx	r3
  return USBD_OK;
}
 8007214:	2000      	movs	r0, #0
 8007216:	bd08      	pop	{r3, pc}

08007218 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007218:	b538      	push	{r3, r4, r5, lr}
 800721a:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800721c:	f500 7520 	add.w	r5, r0, #640	; 0x280
 8007220:	4628      	mov	r0, r5
 8007222:	f000 faec 	bl	80077fe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007226:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8007228:	f894 1280 	ldrb.w	r1, [r4, #640]	; 0x280
  pdev->ep0_state = USBD_EP0_SETUP;
 800722c:	f8c4 326c 	str.w	r3, [r4, #620]	; 0x26c
  pdev->ep0_data_len = pdev->request.wLength;
 8007230:	f8b4 3286 	ldrh.w	r3, [r4, #646]	; 0x286
 8007234:	f8c4 3270 	str.w	r3, [r4, #624]	; 0x270
  switch (pdev->request.bmRequest & 0x1FU)
 8007238:	f001 031f 	and.w	r3, r1, #31
 800723c:	2b01      	cmp	r3, #1
 800723e:	d00e      	beq.n	800725e <USBD_LL_SetupStage+0x46>
 8007240:	d307      	bcc.n	8007252 <USBD_LL_SetupStage+0x3a>
 8007242:	2b02      	cmp	r3, #2
 8007244:	d010      	beq.n	8007268 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
    break;

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007246:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800724a:	4620      	mov	r0, r4
 800724c:	f000 fd4c 	bl	8007ce8 <USBD_LL_StallEP>
    break;
 8007250:	e003      	b.n	800725a <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 8007252:	4629      	mov	r1, r5
 8007254:	4620      	mov	r0, r4
 8007256:	f000 f903 	bl	8007460 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 800725a:	2000      	movs	r0, #0
 800725c:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 800725e:	4629      	mov	r1, r5
 8007260:	4620      	mov	r0, r4
 8007262:	f000 fa1f 	bl	80076a4 <USBD_StdItfReq>
    break;
 8007266:	e7f8      	b.n	800725a <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);
 8007268:	4629      	mov	r1, r5
 800726a:	4620      	mov	r0, r4
 800726c:	f000 fa3f 	bl	80076ee <USBD_StdEPReq>
    break;
 8007270:	e7f3      	b.n	800725a <USBD_LL_SetupStage+0x42>

08007272 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007272:	b570      	push	{r4, r5, r6, lr}
 8007274:	4605      	mov	r5, r0
 8007276:	4616      	mov	r6, r2
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8007278:	bb49      	cbnz	r1, 80072ce <USBD_LL_DataOutStage+0x5c>
  {
    pep = &pdev->ep_out[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800727a:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 800727e:	2b03      	cmp	r3, #3
 8007280:	d11e      	bne.n	80072c0 <USBD_LL_DataOutStage+0x4e>
    {
      if(pep->rem_length > pep->maxpacket)
 8007282:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8007286:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 800728a:	4293      	cmp	r3, r2
 800728c:	d90b      	bls.n	80072a6 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 800728e:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx (pdev,
 8007290:	429a      	cmp	r2, r3
        pep->rem_length -=  pep->maxpacket;
 8007292:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
        USBD_CtlContinueRx (pdev,
 8007296:	bf8c      	ite	hi
 8007298:	b29a      	uxthhi	r2, r3
 800729a:	b292      	uxthls	r2, r2
 800729c:	4631      	mov	r1, r6
 800729e:	f000 fafe 	bl	800789e <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80072a2:	2000      	movs	r0, #0
    pdev->pClass->DataOut(pdev, epnum);
 80072a4:	bd70      	pop	{r4, r5, r6, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80072a6:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80072aa:	691b      	ldr	r3, [r3, #16]
 80072ac:	b123      	cbz	r3, 80072b8 <USBD_LL_DataOutStage+0x46>
 80072ae:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80072b2:	2a03      	cmp	r2, #3
 80072b4:	d100      	bne.n	80072b8 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 80072b6:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80072b8:	4628      	mov	r0, r5
 80072ba:	f000 faf8 	bl	80078ae <USBD_CtlSendStatus>
 80072be:	e7f0      	b.n	80072a2 <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80072c0:	2b05      	cmp	r3, #5
 80072c2:	d1ee      	bne.n	80072a2 <USBD_LL_DataOutStage+0x30>
        pdev->ep0_state = USBD_EP0_IDLE;
 80072c4:	f8c5 126c 	str.w	r1, [r5, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 80072c8:	f000 fd0e 	bl	8007ce8 <USBD_LL_StallEP>
 80072cc:	e7e9      	b.n	80072a2 <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL) &&
 80072ce:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80072d2:	699b      	ldr	r3, [r3, #24]
 80072d4:	b12b      	cbz	r3, 80072e2 <USBD_LL_DataOutStage+0x70>
 80072d6:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80072da:	2a03      	cmp	r2, #3
 80072dc:	d101      	bne.n	80072e2 <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 80072de:	4798      	blx	r3
 80072e0:	e7df      	b.n	80072a2 <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 80072e2:	2002      	movs	r0, #2
}
 80072e4:	bd70      	pop	{r4, r5, r6, pc}

080072e6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 80072e6:	b570      	push	{r4, r5, r6, lr}
 80072e8:	4613      	mov	r3, r2
 80072ea:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 80072ec:	460e      	mov	r6, r1
 80072ee:	2900      	cmp	r1, #0
 80072f0:	d148      	bne.n	8007384 <USBD_LL_DataInStage+0x9e>
  {
    pep = &pdev->ep_in[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80072f2:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 80072f6:	2a02      	cmp	r2, #2
 80072f8:	d13d      	bne.n	8007376 <USBD_LL_DataInStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 80072fa:	6a05      	ldr	r5, [r0, #32]
 80072fc:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80072fe:	4295      	cmp	r5, r2
 8007300:	d914      	bls.n	800732c <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 8007302:	1aaa      	subs	r2, r5, r2
 8007304:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8007306:	4619      	mov	r1, r3
 8007308:	b292      	uxth	r2, r2
 800730a:	f000 fac0 	bl	800788e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800730e:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007310:	461a      	mov	r2, r3
 8007312:	4619      	mov	r1, r3
 8007314:	4620      	mov	r0, r4
 8007316:	f000 fd33 	bl	8007d80 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 800731a:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 800731e:	2b01      	cmp	r3, #1
 8007320:	f04f 0000 	mov.w	r0, #0
 8007324:	d13a      	bne.n	800739c <USBD_LL_DataInStage+0xb6>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8007326:	f884 0278 	strb.w	r0, [r4, #632]	; 0x278
 800732a:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0U) &&
 800732c:	69c3      	ldr	r3, [r0, #28]
 800732e:	fbb3 f5f2 	udiv	r5, r3, r2
 8007332:	fb02 3515 	mls	r5, r2, r5, r3
 8007336:	b965      	cbnz	r5, 8007352 <USBD_LL_DataInStage+0x6c>
 8007338:	429a      	cmp	r2, r3
 800733a:	d80a      	bhi.n	8007352 <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 800733c:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8007340:	4293      	cmp	r3, r2
 8007342:	d206      	bcs.n	8007352 <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007344:	462a      	mov	r2, r5
 8007346:	f000 faa2 	bl	800788e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800734a:	f8c4 5270 	str.w	r5, [r4, #624]	; 0x270
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800734e:	462b      	mov	r3, r5
 8007350:	e7de      	b.n	8007310 <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8007352:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	b12b      	cbz	r3, 8007366 <USBD_LL_DataInStage+0x80>
 800735a:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
 800735e:	2a03      	cmp	r2, #3
 8007360:	d101      	bne.n	8007366 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev);
 8007362:	4620      	mov	r0, r4
 8007364:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8007366:	2180      	movs	r1, #128	; 0x80
 8007368:	4620      	mov	r0, r4
 800736a:	f000 fcbd 	bl	8007ce8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800736e:	4620      	mov	r0, r4
 8007370:	f000 faa8 	bl	80078c4 <USBD_CtlReceiveStatus>
 8007374:	e7d1      	b.n	800731a <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007376:	f032 0304 	bics.w	r3, r2, #4
 800737a:	d1ce      	bne.n	800731a <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 800737c:	2180      	movs	r1, #128	; 0x80
 800737e:	f000 fcb3 	bl	8007ce8 <USBD_LL_StallEP>
 8007382:	e7ca      	b.n	800731a <USBD_LL_DataInStage+0x34>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8007384:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8007388:	695b      	ldr	r3, [r3, #20]
 800738a:	b133      	cbz	r3, 800739a <USBD_LL_DataInStage+0xb4>
 800738c:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8007390:	2a03      	cmp	r2, #3
 8007392:	d102      	bne.n	800739a <USBD_LL_DataInStage+0xb4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007394:	4798      	blx	r3
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8007396:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 8007398:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 800739a:	2002      	movs	r0, #2
}
 800739c:	bd70      	pop	{r4, r5, r6, pc}

0800739e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800739e:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80073a0:	2200      	movs	r2, #0
{
 80073a2:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80073a4:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80073a6:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80073a8:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80073aa:	2340      	movs	r3, #64	; 0x40
 80073ac:	f000 fc70 	bl	8007c90 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80073b0:	4633      	mov	r3, r6
 80073b2:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80073b4:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80073b8:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80073bc:	2200      	movs	r2, #0
 80073be:	4620      	mov	r0, r4
 80073c0:	f000 fc66 	bl	8007c90 <USBD_LL_OpenEP>
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config= 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 80073c4:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80073c8:	61a5      	str	r5, [r4, #24]
  pdev->ep0_state = USBD_EP0_IDLE;
 80073ca:	2100      	movs	r1, #0
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80073cc:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 80073ce:	f884 5274 	strb.w	r5, [r4, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 80073d2:	f8c4 126c 	str.w	r1, [r4, #620]	; 0x26c
  pdev->dev_config= 0U;
 80073d6:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 80073d8:	f8c4 127c 	str.w	r1, [r4, #636]	; 0x27c
  if (pdev->pClassData)
 80073dc:	b123      	cbz	r3, 80073e8 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80073de:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 80073e2:	4620      	mov	r0, r4
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	4798      	blx	r3
  }

  return USBD_OK;
}
 80073e8:	2000      	movs	r0, #0
 80073ea:	bd70      	pop	{r4, r5, r6, pc}

080073ec <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80073ec:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 80073ee:	2000      	movs	r0, #0
 80073f0:	4770      	bx	lr

080073f2 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80073f2:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80073f6:	f880 3275 	strb.w	r3, [r0, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80073fa:	2304      	movs	r3, #4
 80073fc:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 8007400:	2000      	movs	r0, #0
 8007402:	4770      	bx	lr

08007404 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;
 8007404:	f890 3275 	ldrb.w	r3, [r0, #629]	; 0x275
 8007408:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 800740c:	2000      	movs	r0, #0
 800740e:	4770      	bx	lr

08007410 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8007410:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8007412:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8007416:	2a03      	cmp	r2, #3
 8007418:	d104      	bne.n	8007424 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 800741a:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800741e:	69db      	ldr	r3, [r3, #28]
 8007420:	b103      	cbz	r3, 8007424 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8007422:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8007424:	2000      	movs	r0, #0
 8007426:	bd08      	pop	{r3, pc}

08007428 <USBD_LL_IsoINIncomplete>:
 8007428:	2000      	movs	r0, #0
 800742a:	4770      	bx	lr

0800742c <USBD_LL_IsoOUTIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 800742c:	2000      	movs	r0, #0
 800742e:	4770      	bx	lr

08007430 <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 8007430:	2000      	movs	r0, #0
 8007432:	4770      	bx	lr

08007434 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8007434:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007436:	2201      	movs	r2, #1
 8007438:	f880 2274 	strb.w	r2, [r0, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800743c:	f8d0 228c 	ldr.w	r2, [r0, #652]	; 0x28c
 8007440:	7901      	ldrb	r1, [r0, #4]
 8007442:	6852      	ldr	r2, [r2, #4]
 8007444:	4790      	blx	r2

  return USBD_OK;
}
 8007446:	2000      	movs	r0, #0
 8007448:	bd08      	pop	{r3, pc}

0800744a <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 800744a:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80U);
 800744c:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 800744e:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 8007450:	f000 fc4a 	bl	8007ce8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8007454:	4620      	mov	r0, r4
 8007456:	2100      	movs	r1, #0
}
 8007458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 800745c:	f000 bc44 	b.w	8007ce8 <USBD_LL_StallEP>

08007460 <USBD_StdDevReq>:
{
 8007460:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007462:	780b      	ldrb	r3, [r1, #0]
 8007464:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007468:	2b20      	cmp	r3, #32
{
 800746a:	4604      	mov	r4, r0
 800746c:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800746e:	d014      	beq.n	800749a <USBD_StdDevReq+0x3a>
 8007470:	2b40      	cmp	r3, #64	; 0x40
 8007472:	d012      	beq.n	800749a <USBD_StdDevReq+0x3a>
 8007474:	2b00      	cmp	r3, #0
 8007476:	f040 8095 	bne.w	80075a4 <USBD_StdDevReq+0x144>
    switch (req->bRequest)
 800747a:	784b      	ldrb	r3, [r1, #1]
 800747c:	2b09      	cmp	r3, #9
 800747e:	f200 8090 	bhi.w	80075a2 <USBD_StdDevReq+0x142>
 8007482:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007486:	00e7      	.short	0x00e7
 8007488:	008e0101 	.word	0x008e0101
 800748c:	008e00fa 	.word	0x008e00fa
 8007490:	00130082 	.word	0x00130082
 8007494:	00d2008e 	.word	0x00d2008e
 8007498:	00a0      	.short	0x00a0
    pdev->pClass->Setup(pdev, req);
 800749a:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800749e:	4629      	mov	r1, r5
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	4620      	mov	r0, r4
 80074a4:	4798      	blx	r3
}
 80074a6:	2000      	movs	r0, #0
 80074a8:	b003      	add	sp, #12
 80074aa:	bd30      	pop	{r4, r5, pc}
  switch (req->wValue >> 8)
 80074ac:	884b      	ldrh	r3, [r1, #2]
 80074ae:	0a1a      	lsrs	r2, r3, #8
 80074b0:	3a01      	subs	r2, #1
 80074b2:	2a0e      	cmp	r2, #14
 80074b4:	d875      	bhi.n	80075a2 <USBD_StdDevReq+0x142>
 80074b6:	e8df f002 	tbb	[pc, r2]
 80074ba:	2824      	.short	0x2824
 80074bc:	55747435 	.word	0x55747435
 80074c0:	7474745e 	.word	0x7474745e
 80074c4:	74747474 	.word	0x74747474
 80074c8:	08          	.byte	0x08
 80074c9:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80074ca:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80074ce:	69db      	ldr	r3, [r3, #28]
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80074d0:	7c20      	ldrb	r0, [r4, #16]
 80074d2:	f10d 0106 	add.w	r1, sp, #6
 80074d6:	4798      	blx	r3
  if((len != 0U) && (req->wLength != 0U))
 80074d8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80074dc:	b152      	cbz	r2, 80074f4 <USBD_StdDevReq+0x94>
 80074de:	88eb      	ldrh	r3, [r5, #6]
 80074e0:	b143      	cbz	r3, 80074f4 <USBD_StdDevReq+0x94>
    len = MIN(len, req->wLength);
 80074e2:	429a      	cmp	r2, r3
 80074e4:	bf28      	it	cs
 80074e6:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, pbuf, len);
 80074e8:	4601      	mov	r1, r0
 80074ea:	4620      	mov	r0, r4
    len = MIN(len, req->wLength);
 80074ec:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, pbuf, len);
 80074f0:	f000 f9c0 	bl	8007874 <USBD_CtlSendData>
  if(req->wLength == 0U)
 80074f4:	88eb      	ldrh	r3, [r5, #6]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d1d5      	bne.n	80074a6 <USBD_StdDevReq+0x46>
    USBD_CtlSendStatus(pdev);
 80074fa:	4620      	mov	r0, r4
 80074fc:	f000 f9d7 	bl	80078ae <USBD_CtlSendStatus>
 8007500:	e7d1      	b.n	80074a6 <USBD_StdDevReq+0x46>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007502:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	e7e2      	b.n	80074d0 <USBD_StdDevReq+0x70>
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800750a:	7c02      	ldrb	r2, [r0, #16]
 800750c:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8007510:	b932      	cbnz	r2, 8007520 <USBD_StdDevReq+0xc0>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007514:	f10d 0006 	add.w	r0, sp, #6
 8007518:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800751a:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800751c:	7043      	strb	r3, [r0, #1]
 800751e:	e7db      	b.n	80074d8 <USBD_StdDevReq+0x78>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007522:	e7f7      	b.n	8007514 <USBD_StdDevReq+0xb4>
    switch ((uint8_t)(req->wValue))
 8007524:	b2db      	uxtb	r3, r3
 8007526:	2b05      	cmp	r3, #5
 8007528:	d83b      	bhi.n	80075a2 <USBD_StdDevReq+0x142>
 800752a:	e8df f003 	tbb	[pc, r3]
 800752e:	0703      	.short	0x0703
 8007530:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007534:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	e7c9      	b.n	80074d0 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800753c:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	e7c5      	b.n	80074d0 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007544:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8007548:	68db      	ldr	r3, [r3, #12]
 800754a:	e7c1      	b.n	80074d0 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800754c:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8007550:	691b      	ldr	r3, [r3, #16]
 8007552:	e7bd      	b.n	80074d0 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007554:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8007558:	695b      	ldr	r3, [r3, #20]
 800755a:	e7b9      	b.n	80074d0 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800755c:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8007560:	699b      	ldr	r3, [r3, #24]
 8007562:	e7b5      	b.n	80074d0 <USBD_StdDevReq+0x70>
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8007564:	7c03      	ldrb	r3, [r0, #16]
 8007566:	b9e3      	cbnz	r3, 80075a2 <USBD_StdDevReq+0x142>
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007568:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800756c:	f10d 0006 	add.w	r0, sp, #6
 8007570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007572:	4798      	blx	r3
 8007574:	e7b0      	b.n	80074d8 <USBD_StdDevReq+0x78>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8007576:	7c03      	ldrb	r3, [r0, #16]
 8007578:	b99b      	cbnz	r3, 80075a2 <USBD_StdDevReq+0x142>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800757a:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800757e:	f10d 0006 	add.w	r0, sp, #6
 8007582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007584:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007586:	2307      	movs	r3, #7
 8007588:	e7c8      	b.n	800751c <USBD_StdDevReq+0xbc>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800758a:	888b      	ldrh	r3, [r1, #4]
 800758c:	b94b      	cbnz	r3, 80075a2 <USBD_StdDevReq+0x142>
 800758e:	88cb      	ldrh	r3, [r1, #6]
 8007590:	b93b      	cbnz	r3, 80075a2 <USBD_StdDevReq+0x142>
 8007592:	884d      	ldrh	r5, [r1, #2]
 8007594:	2d7f      	cmp	r5, #127	; 0x7f
 8007596:	d804      	bhi.n	80075a2 <USBD_StdDevReq+0x142>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007598:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800759c:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800759e:	b2e9      	uxtb	r1, r5
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075a0:	d103      	bne.n	80075aa <USBD_StdDevReq+0x14a>
      USBD_CtlError(pdev, req);
 80075a2:	4620      	mov	r0, r4
    USBD_CtlError(pdev, req);
 80075a4:	f7ff ff51 	bl	800744a <USBD_CtlError.constprop.1>
    break;
 80075a8:	e77d      	b.n	80074a6 <USBD_StdDevReq+0x46>
      pdev->dev_address = dev_addr;
 80075aa:	f880 1276 	strb.w	r1, [r0, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80075ae:	f000 fbcb 	bl	8007d48 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80075b2:	4620      	mov	r0, r4
 80075b4:	f000 f97b 	bl	80078ae <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80075b8:	b11d      	cbz	r5, 80075c2 <USBD_StdDevReq+0x162>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80075ba:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 80075bc:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 80075c0:	e771      	b.n	80074a6 <USBD_StdDevReq+0x46>
 80075c2:	2301      	movs	r3, #1
 80075c4:	e7fa      	b.n	80075bc <USBD_StdDevReq+0x15c>
  cfgidx = (uint8_t)(req->wValue);
 80075c6:	7889      	ldrb	r1, [r1, #2]
 80075c8:	4d35      	ldr	r5, [pc, #212]	; (80076a0 <USBD_StdDevReq+0x240>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80075ca:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 80075cc:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80075ce:	d8e8      	bhi.n	80075a2 <USBD_StdDevReq+0x142>
    switch (pdev->dev_state)
 80075d0:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80075d4:	2b02      	cmp	r3, #2
 80075d6:	d008      	beq.n	80075ea <USBD_StdDevReq+0x18a>
 80075d8:	2b03      	cmp	r3, #3
 80075da:	d014      	beq.n	8007606 <USBD_StdDevReq+0x1a6>
      USBD_CtlError(pdev, req);
 80075dc:	f7ff ff35 	bl	800744a <USBD_CtlError.constprop.1>
      USBD_ClrClassConfig(pdev, cfgidx);
 80075e0:	7829      	ldrb	r1, [r5, #0]
 80075e2:	4620      	mov	r0, r4
 80075e4:	f7ff fe11 	bl	800720a <USBD_ClrClassConfig>
 80075e8:	e75d      	b.n	80074a6 <USBD_StdDevReq+0x46>
      if (cfgidx)
 80075ea:	2900      	cmp	r1, #0
 80075ec:	d085      	beq.n	80074fa <USBD_StdDevReq+0x9a>
        pdev->dev_config = cfgidx;
 80075ee:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80075f0:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 80075f2:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80075f4:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80075f8:	4620      	mov	r0, r4
 80075fa:	f7ff fdfb 	bl	80071f4 <USBD_SetClassConfig>
 80075fe:	2802      	cmp	r0, #2
 8007600:	f47f af7b 	bne.w	80074fa <USBD_StdDevReq+0x9a>
 8007604:	e7cd      	b.n	80075a2 <USBD_StdDevReq+0x142>
      if (cfgidx == 0U)
 8007606:	b931      	cbnz	r1, 8007616 <USBD_StdDevReq+0x1b6>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007608:	2302      	movs	r3, #2
 800760a:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800760e:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8007610:	f7ff fdfb 	bl	800720a <USBD_ClrClassConfig>
 8007614:	e771      	b.n	80074fa <USBD_StdDevReq+0x9a>
      else if (cfgidx != pdev->dev_config)
 8007616:	6841      	ldr	r1, [r0, #4]
 8007618:	2901      	cmp	r1, #1
 800761a:	f43f af6e 	beq.w	80074fa <USBD_StdDevReq+0x9a>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800761e:	b2c9      	uxtb	r1, r1
 8007620:	f7ff fdf3 	bl	800720a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007624:	7829      	ldrb	r1, [r5, #0]
 8007626:	6061      	str	r1, [r4, #4]
 8007628:	e7e6      	b.n	80075f8 <USBD_StdDevReq+0x198>
  if (req->wLength != 1U)
 800762a:	88ca      	ldrh	r2, [r1, #6]
 800762c:	2a01      	cmp	r2, #1
 800762e:	d1b8      	bne.n	80075a2 <USBD_StdDevReq+0x142>
    switch (pdev->dev_state)
 8007630:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8007634:	2b00      	cmp	r3, #0
 8007636:	d0b4      	beq.n	80075a2 <USBD_StdDevReq+0x142>
 8007638:	2b02      	cmp	r3, #2
 800763a:	d903      	bls.n	8007644 <USBD_StdDevReq+0x1e4>
 800763c:	2b03      	cmp	r3, #3
 800763e:	d1b0      	bne.n	80075a2 <USBD_StdDevReq+0x142>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007640:	1d01      	adds	r1, r0, #4
 8007642:	e003      	b.n	800764c <USBD_StdDevReq+0x1ec>
      pdev->dev_default_config = 0U;
 8007644:	4601      	mov	r1, r0
 8007646:	2300      	movs	r3, #0
 8007648:	f841 3f08 	str.w	r3, [r1, #8]!
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800764c:	4620      	mov	r0, r4
 800764e:	f000 f911 	bl	8007874 <USBD_CtlSendData>
 8007652:	e728      	b.n	80074a6 <USBD_StdDevReq+0x46>
  switch (pdev->dev_state)
 8007654:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8007658:	3b01      	subs	r3, #1
 800765a:	2b02      	cmp	r3, #2
 800765c:	d8a1      	bhi.n	80075a2 <USBD_StdDevReq+0x142>
    if(req->wLength != 0x2U)
 800765e:	88cb      	ldrh	r3, [r1, #6]
 8007660:	2b02      	cmp	r3, #2
 8007662:	d19e      	bne.n	80075a2 <USBD_StdDevReq+0x142>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007664:	2301      	movs	r3, #1
 8007666:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup)
 8007668:	f8d0 327c 	ldr.w	r3, [r0, #636]	; 0x27c
 800766c:	b10b      	cbz	r3, 8007672 <USBD_StdDevReq+0x212>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800766e:	2303      	movs	r3, #3
 8007670:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007672:	2202      	movs	r2, #2
 8007674:	f104 010c 	add.w	r1, r4, #12
 8007678:	e7e8      	b.n	800764c <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800767a:	884b      	ldrh	r3, [r1, #2]
 800767c:	2b01      	cmp	r3, #1
 800767e:	f47f af12 	bne.w	80074a6 <USBD_StdDevReq+0x46>
    pdev->dev_remote_wakeup = 1U;
 8007682:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
 8007686:	e738      	b.n	80074fa <USBD_StdDevReq+0x9a>
  switch (pdev->dev_state)
 8007688:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800768c:	3b01      	subs	r3, #1
 800768e:	2b02      	cmp	r3, #2
 8007690:	d887      	bhi.n	80075a2 <USBD_StdDevReq+0x142>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007692:	884b      	ldrh	r3, [r1, #2]
 8007694:	2b01      	cmp	r3, #1
 8007696:	f47f af06 	bne.w	80074a6 <USBD_StdDevReq+0x46>
      pdev->dev_remote_wakeup = 0U;
 800769a:	2300      	movs	r3, #0
 800769c:	e7f1      	b.n	8007682 <USBD_StdDevReq+0x222>
 800769e:	bf00      	nop
 80076a0:	20003f50 	.word	0x20003f50

080076a4 <USBD_StdItfReq>:
{
 80076a4:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076a6:	780b      	ldrb	r3, [r1, #0]
 80076a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80076ac:	2b20      	cmp	r3, #32
{
 80076ae:	4604      	mov	r4, r0
 80076b0:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076b2:	d002      	beq.n	80076ba <USBD_StdItfReq+0x16>
 80076b4:	2b40      	cmp	r3, #64	; 0x40
 80076b6:	d000      	beq.n	80076ba <USBD_StdItfReq+0x16>
 80076b8:	b9b3      	cbnz	r3, 80076e8 <USBD_StdItfReq+0x44>
    switch (pdev->dev_state)
 80076ba:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 80076be:	3b01      	subs	r3, #1
 80076c0:	2b02      	cmp	r3, #2
 80076c2:	d810      	bhi.n	80076e6 <USBD_StdItfReq+0x42>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80076c4:	792b      	ldrb	r3, [r5, #4]
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d80d      	bhi.n	80076e6 <USBD_StdItfReq+0x42>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80076ca:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 80076ce:	4629      	mov	r1, r5
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	4620      	mov	r0, r4
 80076d4:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 80076d6:	88eb      	ldrh	r3, [r5, #6]
 80076d8:	b91b      	cbnz	r3, 80076e2 <USBD_StdItfReq+0x3e>
 80076da:	b910      	cbnz	r0, 80076e2 <USBD_StdItfReq+0x3e>
          USBD_CtlSendStatus(pdev);
 80076dc:	4620      	mov	r0, r4
 80076de:	f000 f8e6 	bl	80078ae <USBD_CtlSendStatus>
}
 80076e2:	2000      	movs	r0, #0
 80076e4:	bd38      	pop	{r3, r4, r5, pc}
      USBD_CtlError(pdev, req);
 80076e6:	4620      	mov	r0, r4
    USBD_CtlError(pdev, req);
 80076e8:	f7ff feaf 	bl	800744a <USBD_CtlError.constprop.1>
    break;
 80076ec:	e7f9      	b.n	80076e2 <USBD_StdItfReq+0x3e>

080076ee <USBD_StdEPReq>:
{
 80076ee:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076f0:	780a      	ldrb	r2, [r1, #0]
 80076f2:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80076f6:	2a20      	cmp	r2, #32
{
 80076f8:	4604      	mov	r4, r0
 80076fa:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076fc:	d013      	beq.n	8007726 <USBD_StdEPReq+0x38>
 80076fe:	2a40      	cmp	r2, #64	; 0x40
 8007700:	d011      	beq.n	8007726 <USBD_StdEPReq+0x38>
 8007702:	b96a      	cbnz	r2, 8007720 <USBD_StdEPReq+0x32>
    switch (req->bRequest)
 8007704:	785d      	ldrb	r5, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8007706:	888a      	ldrh	r2, [r1, #4]
    switch (req->bRequest)
 8007708:	2d01      	cmp	r5, #1
  ep_addr  = LOBYTE(req->wIndex);
 800770a:	b2d1      	uxtb	r1, r2
    switch (req->bRequest)
 800770c:	d01f      	beq.n	800774e <USBD_StdEPReq+0x60>
 800770e:	d335      	bcc.n	800777c <USBD_StdEPReq+0x8e>
 8007710:	2d03      	cmp	r5, #3
 8007712:	d105      	bne.n	8007720 <USBD_StdEPReq+0x32>
      switch (pdev->dev_state)
 8007714:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8007718:	2a02      	cmp	r2, #2
 800771a:	d026      	beq.n	800776a <USBD_StdEPReq+0x7c>
 800771c:	2a03      	cmp	r2, #3
 800771e:	d00a      	beq.n	8007736 <USBD_StdEPReq+0x48>
    USBD_CtlError(pdev, req);
 8007720:	f7ff fe93 	bl	800744a <USBD_CtlError.constprop.1>
    break;
 8007724:	e005      	b.n	8007732 <USBD_StdEPReq+0x44>
    pdev->pClass->Setup (pdev, req);
 8007726:	f8d4 228c 	ldr.w	r2, [r4, #652]	; 0x28c
 800772a:	4619      	mov	r1, r3
 800772c:	6892      	ldr	r2, [r2, #8]
 800772e:	4620      	mov	r0, r4
 8007730:	4790      	blx	r2
}
 8007732:	2000      	movs	r0, #0
 8007734:	bd38      	pop	{r3, r4, r5, pc}
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007736:	885a      	ldrh	r2, [r3, #2]
 8007738:	b92a      	cbnz	r2, 8007746 <USBD_StdEPReq+0x58>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800773a:	064a      	lsls	r2, r1, #25
 800773c:	d003      	beq.n	8007746 <USBD_StdEPReq+0x58>
 800773e:	88db      	ldrh	r3, [r3, #6]
 8007740:	b90b      	cbnz	r3, 8007746 <USBD_StdEPReq+0x58>
            USBD_LL_StallEP(pdev, ep_addr);
 8007742:	f000 fad1 	bl	8007ce8 <USBD_LL_StallEP>
        USBD_CtlSendStatus(pdev);
 8007746:	4620      	mov	r0, r4
 8007748:	f000 f8b1 	bl	80078ae <USBD_CtlSendStatus>
        break;
 800774c:	e7f1      	b.n	8007732 <USBD_StdEPReq+0x44>
      switch (pdev->dev_state)
 800774e:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8007752:	2a02      	cmp	r2, #2
 8007754:	d009      	beq.n	800776a <USBD_StdEPReq+0x7c>
 8007756:	2a03      	cmp	r2, #3
 8007758:	d1e2      	bne.n	8007720 <USBD_StdEPReq+0x32>
        if (req->wValue == USB_FEATURE_EP_HALT)
 800775a:	885b      	ldrh	r3, [r3, #2]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d1e8      	bne.n	8007732 <USBD_StdEPReq+0x44>
          if ((ep_addr & 0x7FU) != 0x00U)
 8007760:	064d      	lsls	r5, r1, #25
 8007762:	d0f0      	beq.n	8007746 <USBD_StdEPReq+0x58>
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8007764:	f000 face 	bl	8007d04 <USBD_LL_ClearStallEP>
 8007768:	e7ed      	b.n	8007746 <USBD_StdEPReq+0x58>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800776a:	064b      	lsls	r3, r1, #25
 800776c:	d017      	beq.n	800779e <USBD_StdEPReq+0xb0>
          USBD_LL_StallEP(pdev, ep_addr);
 800776e:	f000 fabb 	bl	8007ce8 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8007772:	2180      	movs	r1, #128	; 0x80
 8007774:	4620      	mov	r0, r4
 8007776:	f000 fab7 	bl	8007ce8 <USBD_LL_StallEP>
 800777a:	e7da      	b.n	8007732 <USBD_StdEPReq+0x44>
      switch (pdev->dev_state)
 800777c:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8007780:	2b02      	cmp	r3, #2
 8007782:	d00e      	beq.n	80077a2 <USBD_StdEPReq+0xb4>
 8007784:	2b03      	cmp	r3, #3
 8007786:	d1cb      	bne.n	8007720 <USBD_StdEPReq+0x32>
        if((ep_addr & 0x80U) == 0x80U)
 8007788:	f012 0f80 	tst.w	r2, #128	; 0x80
 800778c:	f04f 0314 	mov.w	r3, #20
 8007790:	f001 020f 	and.w	r2, r1, #15
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007794:	fb03 0202 	mla	r2, r3, r2, r0
        if((ep_addr & 0x80U) == 0x80U)
 8007798:	d012      	beq.n	80077c0 <USBD_StdEPReq+0xd2>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800779a:	6992      	ldr	r2, [r2, #24]
 800779c:	b9da      	cbnz	r2, 80077d6 <USBD_StdEPReq+0xe8>
          USBD_CtlError(pdev, req);
 800779e:	4620      	mov	r0, r4
 80077a0:	e7be      	b.n	8007720 <USBD_StdEPReq+0x32>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80077a2:	0649      	lsls	r1, r1, #25
 80077a4:	d1fb      	bne.n	800779e <USBD_StdEPReq+0xb0>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80077a6:	0613      	lsls	r3, r2, #24
 80077a8:	bf4c      	ite	mi
 80077aa:	f100 0114 	addmi.w	r1, r0, #20
 80077ae:	f500 71a0 	addpl.w	r1, r0, #320	; 0x140
          pep->status = 0x0000U;
 80077b2:	2300      	movs	r3, #0
 80077b4:	600b      	str	r3, [r1, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80077b6:	2202      	movs	r2, #2
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80077b8:	4620      	mov	r0, r4
 80077ba:	f000 f85b 	bl	8007874 <USBD_CtlSendData>
          break;
 80077be:	e7b8      	b.n	8007732 <USBD_StdEPReq+0x44>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80077c0:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
 80077c4:	2a00      	cmp	r2, #0
 80077c6:	d0ea      	beq.n	800779e <USBD_StdEPReq+0xb0>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80077c8:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80077cc:	fb03 0505 	mla	r5, r3, r5, r0
 80077d0:	f505 75a0 	add.w	r5, r5, #320	; 0x140
 80077d4:	e004      	b.n	80077e0 <USBD_StdEPReq+0xf2>
 80077d6:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80077da:	fb05 3503 	mla	r5, r5, r3, r3
 80077de:	4405      	add	r5, r0
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80077e0:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 80077e4:	d103      	bne.n	80077ee <USBD_StdEPReq+0x100>
            pep->status = 0x0001U;
 80077e6:	602b      	str	r3, [r5, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80077e8:	2202      	movs	r2, #2
 80077ea:	4629      	mov	r1, r5
 80077ec:	e7e4      	b.n	80077b8 <USBD_StdEPReq+0xca>
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 80077ee:	4620      	mov	r0, r4
 80077f0:	f000 fa96 	bl	8007d20 <USBD_LL_IsStallEP>
 80077f4:	b108      	cbz	r0, 80077fa <USBD_StdEPReq+0x10c>
            pep->status = 0x0001U;
 80077f6:	2301      	movs	r3, #1
 80077f8:	e7f5      	b.n	80077e6 <USBD_StdEPReq+0xf8>
            pep->status = 0x0000U;
 80077fa:	6028      	str	r0, [r5, #0]
 80077fc:	e7f4      	b.n	80077e8 <USBD_StdEPReq+0xfa>

080077fe <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 80077fe:	780b      	ldrb	r3, [r1, #0]
 8007800:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8007802:	784b      	ldrb	r3, [r1, #1]
 8007804:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8007806:	78ca      	ldrb	r2, [r1, #3]
 8007808:	788b      	ldrb	r3, [r1, #2]
 800780a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800780e:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8007810:	794a      	ldrb	r2, [r1, #5]
 8007812:	790b      	ldrb	r3, [r1, #4]
 8007814:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8007818:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800781a:	79ca      	ldrb	r2, [r1, #7]
 800781c:	798b      	ldrb	r3, [r1, #6]
 800781e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8007822:	80c3      	strh	r3, [r0, #6]
 8007824:	4770      	bx	lr

08007826 <USBD_CtlError>:
{
 8007826:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev , 0x80U);
 8007828:	2180      	movs	r1, #128	; 0x80
{
 800782a:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 800782c:	f000 fa5c 	bl	8007ce8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8007830:	4620      	mov	r0, r4
 8007832:	2100      	movs	r1, #0
}
 8007834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 8007838:	f000 ba56 	b.w	8007ce8 <USBD_LL_StallEP>

0800783c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800783c:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 800783e:	b188      	cbz	r0, 8007864 <USBD_GetString+0x28>
 8007840:	4605      	mov	r5, r0
 8007842:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0U;

    while (*buf != '\0')
 8007844:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007848:	b2db      	uxtb	r3, r3
 800784a:	2c00      	cmp	r4, #0
 800784c:	d1f9      	bne.n	8007842 <USBD_GetString+0x6>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800784e:	3301      	adds	r3, #1
 8007850:	005b      	lsls	r3, r3, #1
 8007852:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007854:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007856:	2303      	movs	r3, #3
 8007858:	704b      	strb	r3, [r1, #1]
 800785a:	3801      	subs	r0, #1
 800785c:	2302      	movs	r3, #2
    while (*desc != '\0')
 800785e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8007862:	b905      	cbnz	r5, 8007866 <USBD_GetString+0x2a>
 8007864:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8007866:	1c5a      	adds	r2, r3, #1
 8007868:	b2d2      	uxtb	r2, r2
 800786a:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0U;
 800786c:	3302      	adds	r3, #2
 800786e:	b2db      	uxtb	r3, r3
 8007870:	548c      	strb	r4, [r1, r2]
 8007872:	e7f4      	b.n	800785e <USBD_GetString+0x22>

08007874 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8007874:	b510      	push	{r4, lr}
 8007876:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007878:	2202      	movs	r2, #2
 800787a:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800787e:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8007880:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 8007882:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8007884:	2100      	movs	r1, #0
 8007886:	f000 fa6d 	bl	8007d64 <USBD_LL_Transmit>

  return USBD_OK;
}
 800788a:	2000      	movs	r0, #0
 800788c:	bd10      	pop	{r4, pc}

0800788e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800788e:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8007890:	4613      	mov	r3, r2
 8007892:	460a      	mov	r2, r1
 8007894:	2100      	movs	r1, #0
 8007896:	f000 fa65 	bl	8007d64 <USBD_LL_Transmit>

  return USBD_OK;
}
 800789a:	2000      	movs	r0, #0
 800789c:	bd08      	pop	{r3, pc}

0800789e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800789e:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80078a0:	4613      	mov	r3, r2
 80078a2:	460a      	mov	r2, r1
 80078a4:	2100      	movs	r1, #0
 80078a6:	f000 fa6b 	bl	8007d80 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80078aa:	2000      	movs	r0, #0
 80078ac:	bd08      	pop	{r3, pc}

080078ae <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 80078ae:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80078b0:	2304      	movs	r3, #4
 80078b2:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80078b6:	2300      	movs	r3, #0
 80078b8:	461a      	mov	r2, r3
 80078ba:	4619      	mov	r1, r3
 80078bc:	f000 fa52 	bl	8007d64 <USBD_LL_Transmit>

  return USBD_OK;
}
 80078c0:	2000      	movs	r0, #0
 80078c2:	bd08      	pop	{r3, pc}

080078c4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80078c4:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80078c6:	2305      	movs	r3, #5
 80078c8:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80078cc:	2300      	movs	r3, #0
 80078ce:	461a      	mov	r2, r3
 80078d0:	4619      	mov	r1, r3
 80078d2:	f000 fa55 	bl	8007d80 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80078d6:	2000      	movs	r0, #0
 80078d8:	bd08      	pop	{r3, pc}
	...

080078dc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80078dc:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 80078de:	4b0f      	ldr	r3, [pc, #60]	; (800791c <FATFS_LinkDriverEx+0x40>)
 80078e0:	7a5d      	ldrb	r5, [r3, #9]
 80078e2:	f005 04ff 	and.w	r4, r5, #255	; 0xff
 80078e6:	b9b5      	cbnz	r5, 8007916 <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 80078e8:	7a5d      	ldrb	r5, [r3, #9]
 80078ea:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 80078ec:	7a5d      	ldrb	r5, [r3, #9]
 80078ee:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80078f2:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 80078f4:	7a58      	ldrb	r0, [r3, #9]
 80078f6:	4418      	add	r0, r3
 80078f8:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 80078fa:	7a5a      	ldrb	r2, [r3, #9]
 80078fc:	b2d2      	uxtb	r2, r2
 80078fe:	1c50      	adds	r0, r2, #1
 8007900:	b2c0      	uxtb	r0, r0
 8007902:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 8007904:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 8007906:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 8007908:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800790a:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 800790c:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 800790e:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8007910:	70cc      	strb	r4, [r1, #3]
 8007912:	4620      	mov	r0, r4
 8007914:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 8007916:	2001      	movs	r0, #1
    ret = 0;
  }

  return ret;
}
 8007918:	bd30      	pop	{r4, r5, pc}
 800791a:	bf00      	nop
 800791c:	20003f54 	.word	0x20003f54

08007920 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 8007920:	2200      	movs	r2, #0
 8007922:	f7ff bfdb 	b.w	80078dc <FATFS_LinkDriverEx>
	...

08007928 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007928:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800792a:	2200      	movs	r2, #0
 800792c:	490e      	ldr	r1, [pc, #56]	; (8007968 <MX_USB_DEVICE_Init+0x40>)
 800792e:	480f      	ldr	r0, [pc, #60]	; (800796c <MX_USB_DEVICE_Init+0x44>)
 8007930:	f7ff fc3f 	bl	80071b2 <USBD_Init>
 8007934:	b108      	cbz	r0, 800793a <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 8007936:	f7fa f9eb 	bl	8001d10 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 800793a:	490d      	ldr	r1, [pc, #52]	; (8007970 <MX_USB_DEVICE_Init+0x48>)
 800793c:	480b      	ldr	r0, [pc, #44]	; (800796c <MX_USB_DEVICE_Init+0x44>)
 800793e:	f7ff fc4d 	bl	80071dc <USBD_RegisterClass>
 8007942:	b108      	cbz	r0, 8007948 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 8007944:	f7fa f9e4 	bl	8001d10 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8007948:	490a      	ldr	r1, [pc, #40]	; (8007974 <MX_USB_DEVICE_Init+0x4c>)
 800794a:	4808      	ldr	r0, [pc, #32]	; (800796c <MX_USB_DEVICE_Init+0x44>)
 800794c:	f7ff f8c8 	bl	8006ae0 <USBD_MSC_RegisterStorage>
 8007950:	b108      	cbz	r0, 8007956 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8007952:	f7fa f9dd 	bl	8001d10 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007956:	4805      	ldr	r0, [pc, #20]	; (800796c <MX_USB_DEVICE_Init+0x44>)
 8007958:	f7ff fc47 	bl	80071ea <USBD_Start>
 800795c:	b118      	cbz	r0, 8007966 <MX_USB_DEVICE_Init+0x3e>
    Error_Handler();
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800795e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8007962:	f7fa b9d5 	b.w	8001d10 <Error_Handler>
 8007966:	bd08      	pop	{r3, pc}
 8007968:	200000c8 	.word	0x200000c8
 800796c:	2000cd18 	.word	0x2000cd18
 8007970:	20000024 	.word	0x20000024
 8007974:	20000128 	.word	0x20000128

08007978 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007978:	2312      	movs	r3, #18
 800797a:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 800797c:	4800      	ldr	r0, [pc, #0]	; (8007980 <USBD_FS_DeviceDescriptor+0x8>)
 800797e:	4770      	bx	lr
 8007980:	200000f4 	.word	0x200000f4

08007984 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007984:	2304      	movs	r3, #4
 8007986:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8007988:	4800      	ldr	r0, [pc, #0]	; (800798c <USBD_FS_LangIDStrDescriptor+0x8>)
 800798a:	4770      	bx	lr
 800798c:	20000108 	.word	0x20000108

08007990 <USBD_FS_USR_BOSDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8007990:	230c      	movs	r3, #12
 8007992:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
}
 8007994:	4800      	ldr	r0, [pc, #0]	; (8007998 <USBD_FS_USR_BOSDescriptor+0x8>)
 8007996:	4770      	bx	lr
 8007998:	200000e8 	.word	0x200000e8

0800799c <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 800799c:	2300      	movs	r3, #0
{
 800799e:	b530      	push	{r4, r5, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 80079a0:	461d      	mov	r5, r3
  for (idx = 0; idx < len; idx++)
 80079a2:	b2dc      	uxtb	r4, r3
 80079a4:	42a2      	cmp	r2, r4
 80079a6:	d800      	bhi.n	80079aa <IntToUnicode+0xe>
  }
}
 80079a8:	bd30      	pop	{r4, r5, pc}
    if (((value >> 28)) < 0xA)
 80079aa:	0f04      	lsrs	r4, r0, #28
 80079ac:	2c09      	cmp	r4, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 80079ae:	bf94      	ite	ls
 80079b0:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80079b2:	3437      	addhi	r4, #55	; 0x37
 80079b4:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 80079b8:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    value = value << 4;
 80079bc:	0100      	lsls	r0, r0, #4
    pbuf[2 * idx + 1] = 0;
 80079be:	7065      	strb	r5, [r4, #1]
 80079c0:	3301      	adds	r3, #1
 80079c2:	e7ee      	b.n	80079a2 <IntToUnicode+0x6>

080079c4 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 80079c4:	231a      	movs	r3, #26
{
 80079c6:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 80079c8:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80079ca:	4b09      	ldr	r3, [pc, #36]	; (80079f0 <USBD_FS_SerialStrDescriptor+0x2c>)
 80079cc:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80079ce:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 80079d0:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 80079d2:	18c0      	adds	r0, r0, r3
 80079d4:	d00a      	beq.n	80079ec <USBD_FS_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80079d6:	4b07      	ldr	r3, [pc, #28]	; (80079f4 <USBD_FS_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80079d8:	4907      	ldr	r1, [pc, #28]	; (80079f8 <USBD_FS_SerialStrDescriptor+0x34>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80079da:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80079dc:	2208      	movs	r2, #8
 80079de:	f7ff ffdd 	bl	800799c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80079e2:	2204      	movs	r2, #4
 80079e4:	4905      	ldr	r1, [pc, #20]	; (80079fc <USBD_FS_SerialStrDescriptor+0x38>)
 80079e6:	4620      	mov	r0, r4
 80079e8:	f7ff ffd8 	bl	800799c <IntToUnicode>
}
 80079ec:	4804      	ldr	r0, [pc, #16]	; (8007a00 <USBD_FS_SerialStrDescriptor+0x3c>)
 80079ee:	bd10      	pop	{r4, pc}
 80079f0:	1fff7590 	.word	0x1fff7590
 80079f4:	1fff7594 	.word	0x1fff7594
 80079f8:	2000010e 	.word	0x2000010e
 80079fc:	2000011e 	.word	0x2000011e
 8007a00:	2000010c 	.word	0x2000010c

08007a04 <USBD_FS_ManufacturerStrDescriptor>:
{
 8007a04:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007a06:	4c04      	ldr	r4, [pc, #16]	; (8007a18 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8007a08:	4804      	ldr	r0, [pc, #16]	; (8007a1c <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8007a0a:	460a      	mov	r2, r1
 8007a0c:	4621      	mov	r1, r4
 8007a0e:	f7ff ff15 	bl	800783c <USBD_GetString>
}
 8007a12:	4620      	mov	r0, r4
 8007a14:	bd10      	pop	{r4, pc}
 8007a16:	bf00      	nop
 8007a18:	2000cfb4 	.word	0x2000cfb4
 8007a1c:	080106c8 	.word	0x080106c8

08007a20 <USBD_FS_ProductStrDescriptor>:
{
 8007a20:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007a22:	4c04      	ldr	r4, [pc, #16]	; (8007a34 <USBD_FS_ProductStrDescriptor+0x14>)
 8007a24:	4804      	ldr	r0, [pc, #16]	; (8007a38 <USBD_FS_ProductStrDescriptor+0x18>)
 8007a26:	460a      	mov	r2, r1
 8007a28:	4621      	mov	r1, r4
 8007a2a:	f7ff ff07 	bl	800783c <USBD_GetString>
}
 8007a2e:	4620      	mov	r0, r4
 8007a30:	bd10      	pop	{r4, pc}
 8007a32:	bf00      	nop
 8007a34:	2000cfb4 	.word	0x2000cfb4
 8007a38:	080106db 	.word	0x080106db

08007a3c <USBD_FS_ConfigStrDescriptor>:
{
 8007a3c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007a3e:	4c04      	ldr	r4, [pc, #16]	; (8007a50 <USBD_FS_ConfigStrDescriptor+0x14>)
 8007a40:	4804      	ldr	r0, [pc, #16]	; (8007a54 <USBD_FS_ConfigStrDescriptor+0x18>)
 8007a42:	460a      	mov	r2, r1
 8007a44:	4621      	mov	r1, r4
 8007a46:	f7ff fef9 	bl	800783c <USBD_GetString>
}
 8007a4a:	4620      	mov	r0, r4
 8007a4c:	bd10      	pop	{r4, pc}
 8007a4e:	bf00      	nop
 8007a50:	2000cfb4 	.word	0x2000cfb4
 8007a54:	080106af 	.word	0x080106af

08007a58 <USBD_FS_InterfaceStrDescriptor>:
{
 8007a58:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007a5a:	4c04      	ldr	r4, [pc, #16]	; (8007a6c <USBD_FS_InterfaceStrDescriptor+0x14>)
 8007a5c:	4804      	ldr	r0, [pc, #16]	; (8007a70 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8007a5e:	460a      	mov	r2, r1
 8007a60:	4621      	mov	r1, r4
 8007a62:	f7ff feeb 	bl	800783c <USBD_GetString>
}
 8007a66:	4620      	mov	r0, r4
 8007a68:	bd10      	pop	{r4, pc}
 8007a6a:	bf00      	nop
 8007a6c:	2000cfb4 	.word	0x2000cfb4
 8007a70:	080106ba 	.word	0x080106ba

08007a74 <STORAGE_GetCapacity_FS>:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 8007a74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007a78:	600b      	str	r3, [r1, #0]
  *block_size = STORAGE_BLK_SIZ;
 8007a7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a7e:	8013      	strh	r3, [r2, #0]
  return (USBD_OK);
  /* USER CODE END 3 */
}
 8007a80:	2000      	movs	r0, #0
 8007a82:	4770      	bx	lr

08007a84 <STORAGE_IsWriteProtected_FS>:
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
  /* USER CODE END 5 */
}
 8007a84:	2000      	movs	r0, #0
 8007a86:	4770      	bx	lr

08007a88 <STORAGE_Write_FS>:
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
  /* USER CODE BEGIN 7 */
  return (USBD_OK);
  /* USER CODE END 7 */
}
 8007a88:	2000      	movs	r0, #0
 8007a8a:	4770      	bx	lr

08007a8c <STORAGE_GetMaxLun_FS>:
int8_t STORAGE_GetMaxLun_FS(void)
{
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
  /* USER CODE END 8 */
}
 8007a8c:	2000      	movs	r0, #0
 8007a8e:	4770      	bx	lr

08007a90 <STORAGE_Read_FS>:
 8007a90:	2000      	movs	r0, #0
 8007a92:	4770      	bx	lr

08007a94 <STORAGE_Init_FS>:
 8007a94:	2000      	movs	r0, #0
 8007a96:	4770      	bx	lr

08007a98 <STORAGE_IsReady_FS>:
 8007a98:	2000      	movs	r0, #0
 8007a9a:	4770      	bx	lr

08007a9c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007a9c:	b510      	push	{r4, lr}
 8007a9e:	4604      	mov	r4, r0
 8007aa0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007aa2:	2214      	movs	r2, #20
 8007aa4:	2100      	movs	r1, #0
 8007aa6:	a803      	add	r0, sp, #12
 8007aa8:	f005 fe5f 	bl	800d76a <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8007aac:	6823      	ldr	r3, [r4, #0]
 8007aae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ab2:	d13a      	bne.n	8007b2a <HAL_PCD_MspInit+0x8e>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ab4:	4c1f      	ldr	r4, [pc, #124]	; (8007b34 <HAL_PCD_MspInit+0x98>)
 8007ab6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007ab8:	f043 0301 	orr.w	r3, r3, #1
 8007abc:	64e3      	str	r3, [r4, #76]	; 0x4c
 8007abe:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007ac0:	f003 0301 	and.w	r3, r3, #1
 8007ac4:	9300      	str	r3, [sp, #0]
 8007ac6:	9b00      	ldr	r3, [sp, #0]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007ac8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007acc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ace:	2302      	movs	r3, #2
 8007ad0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ad2:	2303      	movs	r3, #3
 8007ad4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ad6:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007ad8:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ada:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007ade:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ae0:	f7fb f98e 	bl	8002e00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007ae4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007ae6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007aea:	64e3      	str	r3, [r4, #76]	; 0x4c
 8007aec:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007aee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007af2:	9301      	str	r3, [sp, #4]
 8007af4:	9b01      	ldr	r3, [sp, #4]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007af6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007af8:	00db      	lsls	r3, r3, #3
 8007afa:	d418      	bmi.n	8007b2e <HAL_PCD_MspInit+0x92>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007afc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b02:	65a3      	str	r3, [r4, #88]	; 0x58
 8007b04:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b0a:	9302      	str	r3, [sp, #8]
 8007b0c:	9b02      	ldr	r3, [sp, #8]
      HAL_PWREx_EnableVddUSB();
 8007b0e:	f7fb ffc9 	bl	8003aa4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b12:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b18:	65a3      	str	r3, [r4, #88]	; 0x58
    {
      HAL_PWREx_EnableVddUSB();
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	2043      	movs	r0, #67	; 0x43
 8007b1e:	4611      	mov	r1, r2
 8007b20:	f7fb f85c 	bl	8002bdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007b24:	2043      	movs	r0, #67	; 0x43
 8007b26:	f7fb f88d 	bl	8002c44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007b2a:	b008      	add	sp, #32
 8007b2c:	bd10      	pop	{r4, pc}
      HAL_PWREx_EnableVddUSB();
 8007b2e:	f7fb ffb9 	bl	8003aa4 <HAL_PWREx_EnableVddUSB>
 8007b32:	e7f2      	b.n	8007b1a <HAL_PCD_MspInit+0x7e>
 8007b34:	40021000 	.word	0x40021000

08007b38 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007b38:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 8007b3c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8007b40:	f7ff bb6a 	b.w	8007218 <USBD_LL_SetupStage>

08007b44 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007b44:	231c      	movs	r3, #28
 8007b46:	fb03 0301 	mla	r3, r3, r1, r0
 8007b4a:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8007b4e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007b52:	f7ff bb8e 	b.w	8007272 <USBD_LL_DataOutStage>

08007b56 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007b56:	231c      	movs	r3, #28
 8007b58:	fb03 0301 	mla	r3, r3, r1, r0
 8007b5c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8007b60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007b62:	f7ff bbc0 	b.w	80072e6 <USBD_LL_DataInStage>

08007b66 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007b66:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8007b6a:	f7ff bc51 	b.w	8007410 <USBD_LL_SOF>

08007b6e <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007b6e:	68c3      	ldr	r3, [r0, #12]
 8007b70:	2b02      	cmp	r3, #2
{ 
 8007b72:	b510      	push	{r4, lr}
 8007b74:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007b76:	d001      	beq.n	8007b7c <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8007b78:	f7fa f8ca 	bl	8001d10 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007b7c:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 8007b80:	2101      	movs	r1, #1
 8007b82:	f7ff fc33 	bl	80073ec <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007b86:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
}
 8007b8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007b8e:	f7ff bc06 	b.w	800739e <USBD_LL_Reset>
	...

08007b94 <HAL_PCD_SuspendCallback>:
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007b94:	6802      	ldr	r2, [r0, #0]
 8007b96:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
{
 8007b9a:	b510      	push	{r4, lr}
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007b9c:	f043 0301 	orr.w	r3, r3, #1
{
 8007ba0:	4604      	mov	r4, r0
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007ba2:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007ba6:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8007baa:	f7ff fc22 	bl	80073f2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007bae:	6a23      	ldr	r3, [r4, #32]
 8007bb0:	b123      	cbz	r3, 8007bbc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007bb2:	4a03      	ldr	r2, [pc, #12]	; (8007bc0 <HAL_PCD_SuspendCallback+0x2c>)
 8007bb4:	6913      	ldr	r3, [r2, #16]
 8007bb6:	f043 0306 	orr.w	r3, r3, #6
 8007bba:	6113      	str	r3, [r2, #16]
 8007bbc:	bd10      	pop	{r4, pc}
 8007bbe:	bf00      	nop
 8007bc0:	e000ed00 	.word	0xe000ed00

08007bc4 <HAL_PCD_ResumeCallback>:
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007bc4:	6802      	ldr	r2, [r0, #0]
 8007bc6:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8007bca:	f023 0301 	bic.w	r3, r3, #1
{
 8007bce:	b510      	push	{r4, lr}
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007bd0:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8007bd4:	6a03      	ldr	r3, [r0, #32]
{
 8007bd6:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 8007bd8:	b133      	cbz	r3, 8007be8 <HAL_PCD_ResumeCallback+0x24>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007bda:	4a06      	ldr	r2, [pc, #24]	; (8007bf4 <HAL_PCD_ResumeCallback+0x30>)
 8007bdc:	6913      	ldr	r3, [r2, #16]
 8007bde:	f023 0306 	bic.w	r3, r3, #6
 8007be2:	6113      	str	r3, [r2, #16]
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 8007be4:	f7f9 fd96 	bl	8001714 <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007be8:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
}
 8007bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007bf0:	f7ff bc08 	b.w	8007404 <USBD_LL_Resume>
 8007bf4:	e000ed00 	.word	0xe000ed00

08007bf8 <HAL_PCD_ISOOUTIncompleteCallback>:
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007bf8:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8007bfc:	f7ff bc16 	b.w	800742c <USBD_LL_IsoOUTIncomplete>

08007c00 <HAL_PCD_ISOINIncompleteCallback>:
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007c00:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8007c04:	f7ff bc10 	b.w	8007428 <USBD_LL_IsoINIncomplete>

08007c08 <HAL_PCD_ConnectCallback>:
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007c08:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8007c0c:	f7ff bc10 	b.w	8007430 <USBD_LL_DevConnected>

08007c10 <HAL_PCD_DisconnectCallback>:
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007c10:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8007c14:	f7ff bc0e 	b.w	8007434 <USBD_LL_DevDisconnected>

08007c18 <USBD_LL_Init>:
{
 8007c18:	b508      	push	{r3, lr}
  if (pdev->id == DEVICE_FS) {
 8007c1a:	7802      	ldrb	r2, [r0, #0]
 8007c1c:	bb32      	cbnz	r2, 8007c6c <USBD_LL_Init+0x54>
  hpcd_USB_OTG_FS.pData = pdev;
 8007c1e:	4b14      	ldr	r3, [pc, #80]	; (8007c70 <USBD_LL_Init+0x58>)
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8007c20:	2106      	movs	r1, #6
  hpcd_USB_OTG_FS.pData = pdev;
 8007c22:	f8c3 0404 	str.w	r0, [r3, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007c26:	f8c0 3298 	str.w	r3, [r0, #664]	; 0x298
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8007c2a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007c2e:	e883 0003 	stmia.w	r3, {r0, r1}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007c32:	2102      	movs	r1, #2
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007c34:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007c36:	60d9      	str	r1, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007c38:	6199      	str	r1, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007c3a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007c3c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007c3e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8007c40:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007c42:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007c44:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007c46:	f7fb fa64 	bl	8003112 <HAL_PCD_Init>
 8007c4a:	b108      	cbz	r0, 8007c50 <USBD_LL_Init+0x38>
    Error_Handler( );
 8007c4c:	f7fa f860 	bl	8001d10 <Error_Handler>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007c50:	2180      	movs	r1, #128	; 0x80
 8007c52:	4807      	ldr	r0, [pc, #28]	; (8007c70 <USBD_LL_Init+0x58>)
 8007c54:	f7fb fec8 	bl	80039e8 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007c58:	2240      	movs	r2, #64	; 0x40
 8007c5a:	2100      	movs	r1, #0
 8007c5c:	4804      	ldr	r0, [pc, #16]	; (8007c70 <USBD_LL_Init+0x58>)
 8007c5e:	f7fb fea2 	bl	80039a6 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007c62:	2280      	movs	r2, #128	; 0x80
 8007c64:	2101      	movs	r1, #1
 8007c66:	4802      	ldr	r0, [pc, #8]	; (8007c70 <USBD_LL_Init+0x58>)
 8007c68:	f7fb fe9d 	bl	80039a6 <HAL_PCDEx_SetTxFiFo>
}
 8007c6c:	2000      	movs	r0, #0
 8007c6e:	bd08      	pop	{r3, pc}
 8007c70:	2000d1b4 	.word	0x2000d1b4

08007c74 <USBD_LL_Start>:
{
 8007c74:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8007c76:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8007c7a:	f7fb fad7 	bl	800322c <HAL_PCD_Start>
 8007c7e:	2803      	cmp	r0, #3
 8007c80:	bf9a      	itte	ls
 8007c82:	4b02      	ldrls	r3, [pc, #8]	; (8007c8c <USBD_LL_Start+0x18>)
 8007c84:	5c18      	ldrbls	r0, [r3, r0]
 8007c86:	2002      	movhi	r0, #2
}
 8007c88:	bd08      	pop	{r3, pc}
 8007c8a:	bf00      	nop
 8007c8c:	08010712 	.word	0x08010712

08007c90 <USBD_LL_OpenEP>:
{
 8007c90:	b510      	push	{r4, lr}
 8007c92:	461c      	mov	r4, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007c94:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8007c98:	4613      	mov	r3, r2
 8007c9a:	4622      	mov	r2, r4
 8007c9c:	f7fb fd5e 	bl	800375c <HAL_PCD_EP_Open>
 8007ca0:	2803      	cmp	r0, #3
 8007ca2:	bf9a      	itte	ls
 8007ca4:	4b01      	ldrls	r3, [pc, #4]	; (8007cac <USBD_LL_OpenEP+0x1c>)
 8007ca6:	5c18      	ldrbls	r0, [r3, r0]
 8007ca8:	2002      	movhi	r0, #2
}
 8007caa:	bd10      	pop	{r4, pc}
 8007cac:	08010712 	.word	0x08010712

08007cb0 <USBD_LL_CloseEP>:
{
 8007cb0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007cb2:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8007cb6:	f7fb fd86 	bl	80037c6 <HAL_PCD_EP_Close>
 8007cba:	2803      	cmp	r0, #3
 8007cbc:	bf9a      	itte	ls
 8007cbe:	4b02      	ldrls	r3, [pc, #8]	; (8007cc8 <USBD_LL_CloseEP+0x18>)
 8007cc0:	5c18      	ldrbls	r0, [r3, r0]
 8007cc2:	2002      	movhi	r0, #2
}
 8007cc4:	bd08      	pop	{r3, pc}
 8007cc6:	bf00      	nop
 8007cc8:	08010712 	.word	0x08010712

08007ccc <USBD_LL_FlushEP>:
{
 8007ccc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8007cce:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8007cd2:	f7fb fe4e 	bl	8003972 <HAL_PCD_EP_Flush>
 8007cd6:	2803      	cmp	r0, #3
 8007cd8:	bf9a      	itte	ls
 8007cda:	4b02      	ldrls	r3, [pc, #8]	; (8007ce4 <USBD_LL_FlushEP+0x18>)
 8007cdc:	5c18      	ldrbls	r0, [r3, r0]
 8007cde:	2002      	movhi	r0, #2
}
 8007ce0:	bd08      	pop	{r3, pc}
 8007ce2:	bf00      	nop
 8007ce4:	08010712 	.word	0x08010712

08007ce8 <USBD_LL_StallEP>:
{
 8007ce8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007cea:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8007cee:	f7fb fdd5 	bl	800389c <HAL_PCD_EP_SetStall>
 8007cf2:	2803      	cmp	r0, #3
 8007cf4:	bf9a      	itte	ls
 8007cf6:	4b02      	ldrls	r3, [pc, #8]	; (8007d00 <USBD_LL_StallEP+0x18>)
 8007cf8:	5c18      	ldrbls	r0, [r3, r0]
 8007cfa:	2002      	movhi	r0, #2
}
 8007cfc:	bd08      	pop	{r3, pc}
 8007cfe:	bf00      	nop
 8007d00:	08010712 	.word	0x08010712

08007d04 <USBD_LL_ClearStallEP>:
{
 8007d04:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8007d06:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8007d0a:	f7fb fe00 	bl	800390e <HAL_PCD_EP_ClrStall>
 8007d0e:	2803      	cmp	r0, #3
 8007d10:	bf9a      	itte	ls
 8007d12:	4b02      	ldrls	r3, [pc, #8]	; (8007d1c <USBD_LL_ClearStallEP+0x18>)
 8007d14:	5c18      	ldrbls	r0, [r3, r0]
 8007d16:	2002      	movhi	r0, #2
}
 8007d18:	bd08      	pop	{r3, pc}
 8007d1a:	bf00      	nop
 8007d1c:	08010712 	.word	0x08010712

08007d20 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 8007d20:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007d24:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 8007d28:	f04f 021c 	mov.w	r2, #28
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8007d2c:	bf1b      	ittet	ne
 8007d2e:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8007d32:	fb02 3101 	mlane	r1, r2, r1, r3
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8007d36:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8007d3a:	f891 003e 	ldrbne.w	r0, [r1, #62]	; 0x3e
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8007d3e:	bf08      	it	eq
 8007d40:	f891 01fe 	ldrbeq.w	r0, [r1, #510]	; 0x1fe
}
 8007d44:	4770      	bx	lr
	...

08007d48 <USBD_LL_SetUSBAddress>:
{
 8007d48:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007d4a:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8007d4e:	f7fb fcf1 	bl	8003734 <HAL_PCD_SetAddress>
 8007d52:	2803      	cmp	r0, #3
 8007d54:	bf9a      	itte	ls
 8007d56:	4b02      	ldrls	r3, [pc, #8]	; (8007d60 <USBD_LL_SetUSBAddress+0x18>)
 8007d58:	5c18      	ldrbls	r0, [r3, r0]
 8007d5a:	2002      	movhi	r0, #2
}
 8007d5c:	bd08      	pop	{r3, pc}
 8007d5e:	bf00      	nop
 8007d60:	08010712 	.word	0x08010712

08007d64 <USBD_LL_Transmit>:
{
 8007d64:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007d66:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8007d6a:	f7fb fd7c 	bl	8003866 <HAL_PCD_EP_Transmit>
 8007d6e:	2803      	cmp	r0, #3
 8007d70:	bf9a      	itte	ls
 8007d72:	4b02      	ldrls	r3, [pc, #8]	; (8007d7c <USBD_LL_Transmit+0x18>)
 8007d74:	5c18      	ldrbls	r0, [r3, r0]
 8007d76:	2002      	movhi	r0, #2
}
 8007d78:	bd08      	pop	{r3, pc}
 8007d7a:	bf00      	nop
 8007d7c:	08010712 	.word	0x08010712

08007d80 <USBD_LL_PrepareReceive>:
{
 8007d80:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007d82:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8007d86:	f7fb fd48 	bl	800381a <HAL_PCD_EP_Receive>
 8007d8a:	2803      	cmp	r0, #3
 8007d8c:	bf9a      	itte	ls
 8007d8e:	4b02      	ldrls	r3, [pc, #8]	; (8007d98 <USBD_LL_PrepareReceive+0x18>)
 8007d90:	5c18      	ldrbls	r0, [r3, r0]
 8007d92:	2002      	movhi	r0, #2
}
 8007d94:	bd08      	pop	{r3, pc}
 8007d96:	bf00      	nop
 8007d98:	08010712 	.word	0x08010712

08007d9c <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007d9c:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8007da0:	f7fb bd59 	b.w	8003856 <HAL_PCD_EP_GetRxCount>

08007da4 <HAL_PCDEx_LPM_Callback>:
{
 8007da4:	b510      	push	{r4, lr}
 8007da6:	4604      	mov	r4, r0
  switch (msg)
 8007da8:	b111      	cbz	r1, 8007db0 <HAL_PCDEx_LPM_Callback+0xc>
 8007daa:	2901      	cmp	r1, #1
 8007dac:	d016      	beq.n	8007ddc <HAL_PCDEx_LPM_Callback+0x38>
 8007dae:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 8007db0:	6a03      	ldr	r3, [r0, #32]
 8007db2:	b133      	cbz	r3, 8007dc2 <HAL_PCDEx_LPM_Callback+0x1e>
  SystemClock_Config();
 8007db4:	f7f9 fcae 	bl	8001714 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007db8:	4a12      	ldr	r2, [pc, #72]	; (8007e04 <HAL_PCDEx_LPM_Callback+0x60>)
 8007dba:	6913      	ldr	r3, [r2, #16]
 8007dbc:	f023 0306 	bic.w	r3, r3, #6
 8007dc0:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007dc2:	6822      	ldr	r2, [r4, #0]
    USBD_LL_Resume(hpcd->pData);
 8007dc4:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007dc8:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8007dcc:	f023 0301 	bic.w	r3, r3, #1
 8007dd0:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
}
 8007dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    USBD_LL_Resume(hpcd->pData);
 8007dd8:	f7ff bb14 	b.w	8007404 <USBD_LL_Resume>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007ddc:	6802      	ldr	r2, [r0, #0]
    USBD_LL_Suspend(hpcd->pData);
 8007dde:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007de2:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8007de6:	f043 0301 	orr.w	r3, r3, #1
 8007dea:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Suspend(hpcd->pData);
 8007dee:	f7ff fb00 	bl	80073f2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8007df2:	6a23      	ldr	r3, [r4, #32]
 8007df4:	b123      	cbz	r3, 8007e00 <HAL_PCDEx_LPM_Callback+0x5c>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007df6:	4a03      	ldr	r2, [pc, #12]	; (8007e04 <HAL_PCDEx_LPM_Callback+0x60>)
 8007df8:	6913      	ldr	r3, [r2, #16]
 8007dfa:	f043 0306 	orr.w	r3, r3, #6
 8007dfe:	6113      	str	r3, [r2, #16]
 8007e00:	bd10      	pop	{r4, pc}
 8007e02:	bf00      	nop
 8007e04:	e000ed00 	.word	0xe000ed00

08007e08 <USBD_static_malloc>:
}
 8007e08:	4800      	ldr	r0, [pc, #0]	; (8007e0c <USBD_static_malloc+0x4>)
 8007e0a:	4770      	bx	lr
 8007e0c:	20003f60 	.word	0x20003f60

08007e10 <USBD_static_free>:
{
 8007e10:	4770      	bx	lr
	...

08007e14 <lv_disp_get_scr_act>:
 * @param disp pointer to display which active screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
 8007e14:	b510      	push	{r4, lr}
    if(!disp) disp = lv_disp_get_default();
 8007e16:	4604      	mov	r4, r0
 8007e18:	b958      	cbnz	r0, 8007e32 <lv_disp_get_scr_act+0x1e>
 8007e1a:	f004 fb7b 	bl	800c514 <lv_disp_get_default>
    if(!disp) {
 8007e1e:	4604      	mov	r4, r0
 8007e20:	b938      	cbnz	r0, 8007e32 <lv_disp_get_scr_act+0x1e>
        LV_LOG_WARN("lv_scr_act: no display registered to get its top layer");
 8007e22:	4b05      	ldr	r3, [pc, #20]	; (8007e38 <lv_disp_get_scr_act+0x24>)
 8007e24:	4905      	ldr	r1, [pc, #20]	; (8007e3c <lv_disp_get_scr_act+0x28>)
 8007e26:	222e      	movs	r2, #46	; 0x2e
 8007e28:	2002      	movs	r0, #2
 8007e2a:	f004 ff6b 	bl	800cd04 <lv_log_add>
        return NULL;
 8007e2e:	4620      	mov	r0, r4
 8007e30:	bd10      	pop	{r4, pc}
    }

    return disp->act_scr;
 8007e32:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
 8007e34:	bd10      	pop	{r4, pc}
 8007e36:	bf00      	nop
 8007e38:	08010788 	.word	0x08010788
 8007e3c:	080107bf 	.word	0x080107bf

08007e40 <lv_disp_get_layer_top>:
 * Return with the top layer. (Same on every screen and it is above the normal screen layer)
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
 8007e40:	b510      	push	{r4, lr}
    if(!disp) disp = lv_disp_get_default();
 8007e42:	4604      	mov	r4, r0
 8007e44:	b958      	cbnz	r0, 8007e5e <lv_disp_get_layer_top+0x1e>
 8007e46:	f004 fb65 	bl	800c514 <lv_disp_get_default>
    if(!disp) {
 8007e4a:	4604      	mov	r4, r0
 8007e4c:	b938      	cbnz	r0, 8007e5e <lv_disp_get_layer_top+0x1e>
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
 8007e4e:	4b05      	ldr	r3, [pc, #20]	; (8007e64 <lv_disp_get_layer_top+0x24>)
 8007e50:	4905      	ldr	r1, [pc, #20]	; (8007e68 <lv_disp_get_layer_top+0x28>)
 8007e52:	224b      	movs	r2, #75	; 0x4b
 8007e54:	2002      	movs	r0, #2
 8007e56:	f004 ff55 	bl	800cd04 <lv_log_add>
        return NULL;
 8007e5a:	4620      	mov	r0, r4
 8007e5c:	bd10      	pop	{r4, pc}
    }

    return disp->top_layer;
 8007e5e:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
 8007e60:	bd10      	pop	{r4, pc}
 8007e62:	bf00      	nop
 8007e64:	0801074f 	.word	0x0801074f
 8007e68:	080107bf 	.word	0x080107bf

08007e6c <lv_disp_get_layer_sys>:
 * layer)
 * @param disp pointer to display which sys. layer  should be get. (NULL to use the default screen)
 * @return pointer to the sys layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
 8007e6c:	b510      	push	{r4, lr}
    if(!disp) disp = lv_disp_get_default();
 8007e6e:	4604      	mov	r4, r0
 8007e70:	b958      	cbnz	r0, 8007e8a <lv_disp_get_layer_sys+0x1e>
 8007e72:	f004 fb4f 	bl	800c514 <lv_disp_get_default>
    if(!disp) {
 8007e76:	4604      	mov	r4, r0
 8007e78:	b938      	cbnz	r0, 8007e8a <lv_disp_get_layer_sys+0x1e>
        LV_LOG_WARN("lv_layer_sys: no display registered to get its top layer");
 8007e7a:	4b05      	ldr	r3, [pc, #20]	; (8007e90 <lv_disp_get_layer_sys+0x24>)
 8007e7c:	4905      	ldr	r1, [pc, #20]	; (8007e94 <lv_disp_get_layer_sys+0x28>)
 8007e7e:	225c      	movs	r2, #92	; 0x5c
 8007e80:	2002      	movs	r0, #2
 8007e82:	f004 ff3f 	bl	800cd04 <lv_log_add>
        return NULL;
 8007e86:	4620      	mov	r0, r4
 8007e88:	bd10      	pop	{r4, pc}
    }

    return disp->sys_layer;
 8007e8a:	6c60      	ldr	r0, [r4, #68]	; 0x44
}
 8007e8c:	bd10      	pop	{r4, pc}
 8007e8e:	bf00      	nop
 8007e90:	08010716 	.word	0x08010716
 8007e94:	080107bf 	.word	0x080107bf

08007e98 <obj_to_foreground>:

    if(group->focus_cb) group->focus_cb(group);
}

static void obj_to_foreground(lv_obj_t * obj)
{
 8007e98:	b510      	push	{r4, lr}
    /*Search for 'top' attribute*/
    lv_obj_t * i        = obj;
    lv_obj_t * last_top = NULL;
 8007e9a:	2400      	movs	r4, #0
    while(i != NULL) {
 8007e9c:	b928      	cbnz	r0, 8007eaa <obj_to_foreground+0x12>
        if(i->top != 0) last_top = i;
        i = lv_obj_get_parent(i);
    }

    if(last_top != NULL) {
 8007e9e:	b16c      	cbz	r4, 8007ebc <obj_to_foreground+0x24>
        /*Move the last_top object to the foreground*/
        lv_obj_move_foreground(last_top);
 8007ea0:	4620      	mov	r0, r4
    }
}
 8007ea2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        lv_obj_move_foreground(last_top);
 8007ea6:	f000 ba43 	b.w	8008330 <lv_obj_move_foreground>
        if(i->top != 0) last_top = i;
 8007eaa:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8007eae:	f013 0f20 	tst.w	r3, #32
 8007eb2:	bf18      	it	ne
 8007eb4:	4604      	movne	r4, r0
        i = lv_obj_get_parent(i);
 8007eb6:	f000 fc17 	bl	80086e8 <lv_obj_get_parent>
 8007eba:	e7ef      	b.n	8007e9c <obj_to_foreground+0x4>
 8007ebc:	bd10      	pop	{r4, pc}

08007ebe <focus_next_core.part.0>:
static void focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
 8007ebe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    lv_obj_t ** obj_next     = group->obj_focus;
 8007ec2:	68c5      	ldr	r5, [r0, #12]
static void focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
 8007ec4:	4604      	mov	r4, r0
 8007ec6:	4689      	mov	r9, r1
 8007ec8:	4692      	mov	sl, r2
    bool can_begin           = true;
 8007eca:	2701      	movs	r7, #1
    lv_obj_t ** obj_sentinel = NULL;
 8007ecc:	2600      	movs	r6, #0
        if(obj_next == NULL) {
 8007ece:	2d00      	cmp	r5, #0
 8007ed0:	d14d      	bne.n	8007f6e <focus_next_core.part.0+0xb0>
            if(group->wrap || obj_sentinel == NULL) {
 8007ed2:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8007ed6:	06db      	lsls	r3, r3, #27
 8007ed8:	d403      	bmi.n	8007ee2 <focus_next_core.part.0+0x24>
 8007eda:	2e00      	cmp	r6, #0
 8007edc:	d056      	beq.n	8007f8c <focus_next_core.part.0+0xce>
 8007ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                if(!can_begin) return;
 8007ee2:	2f00      	cmp	r7, #0
 8007ee4:	d054      	beq.n	8007f90 <focus_next_core.part.0+0xd2>
                obj_next  = begin(&group->obj_ll);
 8007ee6:	4620      	mov	r0, r4
 8007ee8:	47c8      	blx	r9
 8007eea:	4605      	mov	r5, r0
        if(obj_sentinel == NULL) {
 8007eec:	2e00      	cmp	r6, #0
 8007eee:	d13a      	bne.n	8007f66 <focus_next_core.part.0+0xa8>
            if(obj_sentinel == NULL) return; /*Group is empty*/
 8007ef0:	2d00      	cmp	r5, #0
 8007ef2:	d04d      	beq.n	8007f90 <focus_next_core.part.0+0xd2>
 8007ef4:	462e      	mov	r6, r5
 8007ef6:	2700      	movs	r7, #0
        if(!lv_obj_get_hidden(*obj_next)) break;
 8007ef8:	6828      	ldr	r0, [r5, #0]
 8007efa:	f000 fc7b 	bl	80087f4 <lv_obj_get_hidden>
 8007efe:	4680      	mov	r8, r0
 8007f00:	2800      	cmp	r0, #0
 8007f02:	d1e4      	bne.n	8007ece <focus_next_core.part.0+0x10>
    if(obj_next == group->obj_focus) return; /*There's only one visible object and it's already focused*/
 8007f04:	68e3      	ldr	r3, [r4, #12]
 8007f06:	42ab      	cmp	r3, r5
 8007f08:	d042      	beq.n	8007f90 <focus_next_core.part.0+0xd2>
    if(group->obj_focus) {
 8007f0a:	b183      	cbz	r3, 8007f2e <focus_next_core.part.0+0x70>
        (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
 8007f0c:	6818      	ldr	r0, [r3, #0]
 8007f0e:	4642      	mov	r2, r8
 8007f10:	69c3      	ldr	r3, [r0, #28]
 8007f12:	2110      	movs	r1, #16
 8007f14:	4798      	blx	r3
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, NULL);
 8007f16:	68e3      	ldr	r3, [r4, #12]
 8007f18:	4642      	mov	r2, r8
 8007f1a:	210d      	movs	r1, #13
 8007f1c:	6818      	ldr	r0, [r3, #0]
 8007f1e:	f000 f97b 	bl	8008218 <lv_event_send>
        if(res != LV_RES_OK) return;
 8007f22:	2801      	cmp	r0, #1
 8007f24:	d134      	bne.n	8007f90 <focus_next_core.part.0+0xd2>
        lv_obj_invalidate(*group->obj_focus);
 8007f26:	68e3      	ldr	r3, [r4, #12]
 8007f28:	6818      	ldr	r0, [r3, #0]
 8007f2a:	f000 f9b1 	bl	8008290 <lv_obj_invalidate>
    (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_FOCUS, NULL);
 8007f2e:	6828      	ldr	r0, [r5, #0]
    group->obj_focus = obj_next;
 8007f30:	60e5      	str	r5, [r4, #12]
    (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_FOCUS, NULL);
 8007f32:	69c3      	ldr	r3, [r0, #28]
 8007f34:	2200      	movs	r2, #0
 8007f36:	210f      	movs	r1, #15
 8007f38:	4798      	blx	r3
    lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, NULL);
 8007f3a:	68e3      	ldr	r3, [r4, #12]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	210c      	movs	r1, #12
 8007f40:	6818      	ldr	r0, [r3, #0]
 8007f42:	f000 f969 	bl	8008218 <lv_event_send>
    if(res != LV_RES_OK) return;
 8007f46:	2801      	cmp	r0, #1
 8007f48:	d122      	bne.n	8007f90 <focus_next_core.part.0+0xd2>
    obj_to_foreground(*group->obj_focus);
 8007f4a:	68e3      	ldr	r3, [r4, #12]
 8007f4c:	6818      	ldr	r0, [r3, #0]
 8007f4e:	f7ff ffa3 	bl	8007e98 <obj_to_foreground>
    lv_obj_invalidate(*group->obj_focus);
 8007f52:	68e3      	ldr	r3, [r4, #12]
 8007f54:	6818      	ldr	r0, [r3, #0]
 8007f56:	f000 f99b 	bl	8008290 <lv_obj_invalidate>
    if(group->focus_cb) group->focus_cb(group);
 8007f5a:	69a3      	ldr	r3, [r4, #24]
 8007f5c:	b1c3      	cbz	r3, 8007f90 <focus_next_core.part.0+0xd2>
 8007f5e:	4620      	mov	r0, r4
}
 8007f60:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if(group->focus_cb) group->focus_cb(group);
 8007f64:	4718      	bx	r3
        if(obj_sentinel == NULL) {
 8007f66:	2700      	movs	r7, #0
        if(obj_next == NULL) continue;
 8007f68:	2d00      	cmp	r5, #0
 8007f6a:	d1c5      	bne.n	8007ef8 <focus_next_core.part.0+0x3a>
 8007f6c:	e7b1      	b.n	8007ed2 <focus_next_core.part.0+0x14>
            obj_next = move(&group->obj_ll, obj_next);
 8007f6e:	4629      	mov	r1, r5
 8007f70:	4620      	mov	r0, r4
 8007f72:	47d0      	blx	sl
        if(obj_sentinel == NULL) {
 8007f74:	2e00      	cmp	r6, #0
 8007f76:	bf08      	it	eq
 8007f78:	462e      	moveq	r6, r5
            if(obj_next == obj_sentinel) return;
 8007f7a:	42b0      	cmp	r0, r6
            obj_next = move(&group->obj_ll, obj_next);
 8007f7c:	4605      	mov	r5, r0
            if(obj_next == obj_sentinel) return;
 8007f7e:	d1f3      	bne.n	8007f68 <focus_next_core.part.0+0xaa>
 8007f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                obj_next  = begin(&group->obj_ll);
 8007f84:	4620      	mov	r0, r4
 8007f86:	47c8      	blx	r9
 8007f88:	4605      	mov	r5, r0
 8007f8a:	e7b1      	b.n	8007ef0 <focus_next_core.part.0+0x32>
                if(!can_begin) return;
 8007f8c:	2f00      	cmp	r7, #0
 8007f8e:	d1f9      	bne.n	8007f84 <focus_next_core.part.0+0xc6>
 8007f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007f94 <lv_group_init>:
    lv_ll_init(&LV_GC_ROOT(_lv_group_ll), sizeof(lv_group_t));
 8007f94:	2160      	movs	r1, #96	; 0x60
 8007f96:	4801      	ldr	r0, [pc, #4]	; (8007f9c <lv_group_init+0x8>)
 8007f98:	f004 bd79 	b.w	800ca8e <lv_ll_init>
 8007f9c:	2000d91c 	.word	0x2000d91c

08007fa0 <lv_group_focus_next>:
    if(group->frozen) return;
 8007fa0:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8007fa4:	07db      	lsls	r3, r3, #31
 8007fa6:	d403      	bmi.n	8007fb0 <lv_group_focus_next+0x10>
 8007fa8:	4a02      	ldr	r2, [pc, #8]	; (8007fb4 <lv_group_focus_next+0x14>)
 8007faa:	4903      	ldr	r1, [pc, #12]	; (8007fb8 <lv_group_focus_next+0x18>)
 8007fac:	f7ff bf87 	b.w	8007ebe <focus_next_core.part.0>
 8007fb0:	4770      	bx	lr
 8007fb2:	bf00      	nop
 8007fb4:	0800cb27 	.word	0x0800cb27
 8007fb8:	0800cb1b 	.word	0x0800cb1b

08007fbc <lv_group_focus_prev>:
 8007fbc:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8007fc0:	07db      	lsls	r3, r3, #31
 8007fc2:	d403      	bmi.n	8007fcc <lv_group_focus_prev+0x10>
 8007fc4:	4a02      	ldr	r2, [pc, #8]	; (8007fd0 <lv_group_focus_prev+0x14>)
 8007fc6:	4903      	ldr	r1, [pc, #12]	; (8007fd4 <lv_group_focus_prev+0x18>)
 8007fc8:	f7ff bf79 	b.w	8007ebe <focus_next_core.part.0>
 8007fcc:	4770      	bx	lr
 8007fce:	bf00      	nop
 8007fd0:	0800cb31 	.word	0x0800cb31
 8007fd4:	0800cb21 	.word	0x0800cb21

08007fd8 <lv_group_refocus>:
{
 8007fd8:	b538      	push	{r3, r4, r5, lr}
    uint8_t temp_wrap = g->wrap;
 8007fda:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8007fde:	f3c3 1500 	ubfx	r5, r3, #4, #1
    g->wrap           = 1;
 8007fe2:	f043 0310 	orr.w	r3, r3, #16
 8007fe6:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 8007fea:	071b      	lsls	r3, r3, #28
{
 8007fec:	4604      	mov	r4, r0
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 8007fee:	d408      	bmi.n	8008002 <lv_group_refocus+0x2a>
        lv_group_focus_next(g);
 8007ff0:	f7ff ffd6 	bl	8007fa0 <lv_group_focus_next>
    g->wrap = temp_wrap;
 8007ff4:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8007ff8:	f365 1304 	bfi	r3, r5, #4, #1
 8007ffc:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 8008000:	bd38      	pop	{r3, r4, r5, pc}
        lv_group_focus_prev(g);
 8008002:	f7ff ffdb 	bl	8007fbc <lv_group_focus_prev>
 8008006:	e7f5      	b.n	8007ff4 <lv_group_refocus+0x1c>

08008008 <lv_group_add_obj>:
{
 8008008:	b570      	push	{r4, r5, r6, lr}
 800800a:	460c      	mov	r4, r1
    if(group == NULL) return;
 800800c:	4605      	mov	r5, r0
 800800e:	b358      	cbz	r0, 8008068 <lv_group_add_obj+0x60>
    LV_LL_READ(group->obj_ll, obj_i)
 8008010:	f004 fd83 	bl	800cb1a <lv_ll_get_head>
 8008014:	b9a8      	cbnz	r0, 8008042 <lv_group_add_obj+0x3a>
    if(obj->group_p) {
 8008016:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008018:	b133      	cbz	r3, 8008028 <lv_group_add_obj+0x20>
        if(lv_obj_is_focused(obj)) {
 800801a:	4620      	mov	r0, r4
 800801c:	f000 fc4c 	bl	80088b8 <lv_obj_is_focused>
 8008020:	b110      	cbz	r0, 8008028 <lv_group_add_obj+0x20>
            lv_group_refocus(obj->group_p);
 8008022:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008024:	f7ff ffd8 	bl	8007fd8 <lv_group_refocus>
    obj->group_p     = group;
 8008028:	62e5      	str	r5, [r4, #44]	; 0x2c
    lv_obj_t ** next = lv_ll_ins_tail(&group->obj_ll);
 800802a:	4628      	mov	r0, r5
 800802c:	f004 fd57 	bl	800cade <lv_ll_ins_tail>
    lv_mem_assert(next);
 8008030:	4606      	mov	r6, r0
 8008032:	b970      	cbnz	r0, 8008052 <lv_group_add_obj+0x4a>
 8008034:	4b0d      	ldr	r3, [pc, #52]	; (800806c <lv_group_add_obj+0x64>)
 8008036:	490e      	ldr	r1, [pc, #56]	; (8008070 <lv_group_add_obj+0x68>)
 8008038:	228d      	movs	r2, #141	; 0x8d
 800803a:	2003      	movs	r0, #3
 800803c:	f004 fe62 	bl	800cd04 <lv_log_add>
 8008040:	e7fe      	b.n	8008040 <lv_group_add_obj+0x38>
        if((*obj_i) == obj) {
 8008042:	6803      	ldr	r3, [r0, #0]
 8008044:	42a3      	cmp	r3, r4
 8008046:	d00f      	beq.n	8008068 <lv_group_add_obj+0x60>
    LV_LL_READ(group->obj_ll, obj_i)
 8008048:	4601      	mov	r1, r0
 800804a:	4628      	mov	r0, r5
 800804c:	f004 fd6b 	bl	800cb26 <lv_ll_get_next>
 8008050:	e7e0      	b.n	8008014 <lv_group_add_obj+0xc>
    *next = obj;
 8008052:	6004      	str	r4, [r0, #0]
    if(lv_ll_get_head(&group->obj_ll) == next) {
 8008054:	4628      	mov	r0, r5
 8008056:	f004 fd60 	bl	800cb1a <lv_ll_get_head>
 800805a:	4286      	cmp	r6, r0
 800805c:	d104      	bne.n	8008068 <lv_group_add_obj+0x60>
        lv_group_refocus(group);
 800805e:	4628      	mov	r0, r5
}
 8008060:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        lv_group_refocus(group);
 8008064:	f7ff bfb8 	b.w	8007fd8 <lv_group_refocus>
 8008068:	bd70      	pop	{r4, r5, r6, pc}
 800806a:	bf00      	nop
 800806c:	080107dd 	.word	0x080107dd
 8008070:	080107ec 	.word	0x080107ec

08008074 <lv_group_mod_style>:
{
 8008074:	b538      	push	{r3, r4, r5, lr}
 8008076:	4604      	mov	r4, r0
    lv_style_copy(&group->style_tmp, style);
 8008078:	f100 051c 	add.w	r5, r0, #28
 800807c:	4628      	mov	r0, r5
 800807e:	f000 ff61 	bl	8008f44 <lv_style_copy>
    if(group->editing) {
 8008082:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8008086:	079b      	lsls	r3, r3, #30
        if(group->style_mod_edit_cb) group->style_mod_edit_cb(group, &group->style_tmp);
 8008088:	bf4c      	ite	mi
 800808a:	6963      	ldrmi	r3, [r4, #20]
        if(group->style_mod_cb) group->style_mod_cb(group, &group->style_tmp);
 800808c:	6923      	ldrpl	r3, [r4, #16]
 800808e:	b113      	cbz	r3, 8008096 <lv_group_mod_style+0x22>
 8008090:	4629      	mov	r1, r5
 8008092:	4620      	mov	r0, r4
 8008094:	4798      	blx	r3
}
 8008096:	4628      	mov	r0, r5
 8008098:	bd38      	pop	{r3, r4, r5, pc}

0800809a <lv_group_get_focused>:
    if(!group) return NULL;
 800809a:	b110      	cbz	r0, 80080a2 <lv_group_get_focused+0x8>
    if(group->obj_focus == NULL) return NULL;
 800809c:	68c0      	ldr	r0, [r0, #12]
 800809e:	b100      	cbz	r0, 80080a2 <lv_group_get_focused+0x8>
    return *group->obj_focus;
 80080a0:	6800      	ldr	r0, [r0, #0]
}
 80080a2:	4770      	bx	lr

080080a4 <lv_indev_reset.part.1>:
}
/**
 * Reset one or all input devices
 * @param indev pointer to an input device to reset or NULL to reset all of them
 */
void lv_indev_reset(lv_indev_t * indev)
 80080a4:	b508      	push	{r3, lr}
{
    if(indev)
        indev->proc.reset_query = 1;
    else {
        lv_indev_t * i = lv_indev_get_next(NULL);
 80080a6:	2000      	movs	r0, #0
        while(i) {
            i->proc.reset_query = 1;

            i = lv_indev_get_next(i);
 80080a8:	f004 fa84 	bl	800c5b4 <lv_indev_get_next>
        while(i) {
 80080ac:	b900      	cbnz	r0, 80080b0 <lv_indev_reset.part.1+0xc>
        }
    }
}
 80080ae:	bd08      	pop	{r3, pc}
            i->proc.reset_query = 1;
 80080b0:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80080b4:	f043 0302 	orr.w	r3, r3, #2
 80080b8:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
 80080bc:	e7f4      	b.n	80080a8 <lv_indev_reset.part.1+0x4>

080080be <lv_indev_init>:
{
 80080be:	f7ff bff1 	b.w	80080a4 <lv_indev_reset.part.1>
	...

080080c4 <lv_indev_get_act>:
}
 80080c4:	4b01      	ldr	r3, [pc, #4]	; (80080cc <lv_indev_get_act+0x8>)
 80080c6:	6818      	ldr	r0, [r3, #0]
 80080c8:	4770      	bx	lr
 80080ca:	bf00      	nop
 80080cc:	200041d0 	.word	0x200041d0

080080d0 <refresh_children_position>:
 * @param obj pointer to an object which children will be repositioned
 * @param x_diff x coordinate shift
 * @param y_diff y coordinate shift
 */
static void refresh_children_position(lv_obj_t * obj, lv_coord_t x_diff, lv_coord_t y_diff)
{
 80080d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    lv_obj_t * i;
    LV_LL_READ(obj->child_ll, i)
 80080d4:	1d05      	adds	r5, r0, #4
 80080d6:	4628      	mov	r0, r5
{
 80080d8:	460e      	mov	r6, r1
 80080da:	4617      	mov	r7, r2
    LV_LL_READ(obj->child_ll, i)
 80080dc:	f004 fd1d 	bl	800cb1a <lv_ll_get_head>
    {
        i->coords.x1 += x_diff;
 80080e0:	fa1f f886 	uxth.w	r8, r6
    LV_LL_READ(obj->child_ll, i)
 80080e4:	4604      	mov	r4, r0
        i->coords.y1 += y_diff;
 80080e6:	fa1f f987 	uxth.w	r9, r7
    LV_LL_READ(obj->child_ll, i)
 80080ea:	b90c      	cbnz	r4, 80080f0 <refresh_children_position+0x20>
        i->coords.x2 += x_diff;
        i->coords.y2 += y_diff;

        refresh_children_position(i, x_diff, y_diff);
    }
}
 80080ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        i->coords.x1 += x_diff;
 80080f0:	8a23      	ldrh	r3, [r4, #16]
 80080f2:	4443      	add	r3, r8
 80080f4:	8223      	strh	r3, [r4, #16]
        i->coords.y1 += y_diff;
 80080f6:	8a63      	ldrh	r3, [r4, #18]
 80080f8:	444b      	add	r3, r9
 80080fa:	8263      	strh	r3, [r4, #18]
        i->coords.x2 += x_diff;
 80080fc:	8aa3      	ldrh	r3, [r4, #20]
 80080fe:	4443      	add	r3, r8
 8008100:	82a3      	strh	r3, [r4, #20]
        i->coords.y2 += y_diff;
 8008102:	8ae3      	ldrh	r3, [r4, #22]
 8008104:	444b      	add	r3, r9
 8008106:	82e3      	strh	r3, [r4, #22]
        refresh_children_position(i, x_diff, y_diff);
 8008108:	4620      	mov	r0, r4
 800810a:	463a      	mov	r2, r7
 800810c:	4631      	mov	r1, r6
 800810e:	f7ff ffdf 	bl	80080d0 <refresh_children_position>
    LV_LL_READ(obj->child_ll, i)
 8008112:	4621      	mov	r1, r4
 8008114:	4628      	mov	r0, r5
 8008116:	f004 fd06 	bl	800cb26 <lv_ll_get_next>
 800811a:	4604      	mov	r4, r0
 800811c:	e7e5      	b.n	80080ea <refresh_children_position+0x1a>
	...

08008120 <lv_init>:
{
 8008120:	b510      	push	{r4, lr}
    if(lv_initialized) {
 8008122:	4c16      	ldr	r4, [pc, #88]	; (800817c <lv_init+0x5c>)
 8008124:	7823      	ldrb	r3, [r4, #0]
 8008126:	b13b      	cbz	r3, 8008138 <lv_init+0x18>
        LV_LOG_WARN("lv_init: already inited");
 8008128:	4b15      	ldr	r3, [pc, #84]	; (8008180 <lv_init+0x60>)
 800812a:	4916      	ldr	r1, [pc, #88]	; (8008184 <lv_init+0x64>)
 800812c:	224d      	movs	r2, #77	; 0x4d
 800812e:	2002      	movs	r0, #2
}
 8008130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LV_LOG_WARN("lv_init: already inited");
 8008134:	f004 bde6 	b.w	800cd04 <lv_log_add>
    lv_mem_init();
 8008138:	f004 fe2a 	bl	800cd90 <lv_mem_init>
    lv_task_core_init();
 800813c:	f004 fedc 	bl	800cef8 <lv_task_core_init>
    lv_fs_init();
 8008140:	f004 fbf0 	bl	800c924 <lv_fs_init>
    lv_anim_core_init();
 8008144:	f004 faf2 	bl	800c72c <lv_anim_core_init>
    lv_group_init();
 8008148:	f7ff ff24 	bl	8007f94 <lv_group_init>
    lv_style_init();
 800814c:	f000 ff04 	bl	8008f58 <lv_style_init>
    lv_refr_init();
 8008150:	f000 fce0 	bl	8008b14 <lv_refr_init>
    lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
 8008154:	f44f 71b8 	mov.w	r1, #368	; 0x170
 8008158:	480b      	ldr	r0, [pc, #44]	; (8008188 <lv_init+0x68>)
 800815a:	f004 fc98 	bl	800ca8e <lv_ll_init>
    lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
 800815e:	2160      	movs	r1, #96	; 0x60
 8008160:	480a      	ldr	r0, [pc, #40]	; (800818c <lv_init+0x6c>)
 8008162:	f004 fc94 	bl	800ca8e <lv_ll_init>
    lv_indev_init();
 8008166:	f7ff ffaa 	bl	80080be <lv_indev_init>
    lv_img_decoder_init();
 800816a:	f003 fff5 	bl	800c158 <lv_img_decoder_init>
    lv_img_cache_set_size(LV_IMG_CACHE_DEF_SIZE);
 800816e:	2001      	movs	r0, #1
 8008170:	f003 fc8c 	bl	800ba8c <lv_img_cache_set_size>
    lv_initialized = true;
 8008174:	2301      	movs	r3, #1
 8008176:	7023      	strb	r3, [r4, #0]
 8008178:	bd10      	pop	{r4, pc}
 800817a:	bf00      	nop
 800817c:	200041dc 	.word	0x200041dc
 8008180:	0801080b 	.word	0x0801080b
 8008184:	08010823 	.word	0x08010823
 8008188:	2000d8e4 	.word	0x2000d8e4
 800818c:	2000d8d4 	.word	0x2000d8d4

08008190 <lv_event_send_func>:
{
 8008190:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    if(event_temp_data_head) {
 8008194:	4c1e      	ldr	r4, [pc, #120]	; (8008210 <lv_event_send_func+0x80>)
    event_temp_data.obj     = obj;
 8008196:	9101      	str	r1, [sp, #4]
{
 8008198:	4698      	mov	r8, r3
    event_temp_data.deleted = false;
 800819a:	2300      	movs	r3, #0
 800819c:	f88d 3008 	strb.w	r3, [sp, #8]
    event_temp_data.prev    = NULL;
 80081a0:	9303      	str	r3, [sp, #12]
    if(event_temp_data_head) {
 80081a2:	6823      	ldr	r3, [r4, #0]
{
 80081a4:	4681      	mov	r9, r0
 80081a6:	460d      	mov	r5, r1
 80081a8:	4617      	mov	r7, r2
    if(event_temp_data_head) {
 80081aa:	b103      	cbz	r3, 80081ae <lv_event_send_func+0x1e>
        event_temp_data.prev = event_temp_data_head;
 80081ac:	9303      	str	r3, [sp, #12]
    const void * event_act_data_save = event_act_data;
 80081ae:	4e19      	ldr	r6, [pc, #100]	; (8008214 <lv_event_send_func+0x84>)
    event_temp_data_head = &event_temp_data;
 80081b0:	ab01      	add	r3, sp, #4
    const void * event_act_data_save = event_act_data;
 80081b2:	f8d6 a000 	ldr.w	sl, [r6]
    event_temp_data_head = &event_temp_data;
 80081b6:	6023      	str	r3, [r4, #0]
    event_act_data                   = data;
 80081b8:	f8c6 8000 	str.w	r8, [r6]
    lv_indev_t * indev_act = lv_indev_get_act();
 80081bc:	f7ff ff82 	bl	80080c4 <lv_indev_get_act>
    if(indev_act) {
 80081c0:	b118      	cbz	r0, 80081ca <lv_event_send_func+0x3a>
        if(indev_act->driver.feedback_cb) indev_act->driver.feedback_cb(&indev_act->driver, event);
 80081c2:	6883      	ldr	r3, [r0, #8]
 80081c4:	b10b      	cbz	r3, 80081ca <lv_event_send_func+0x3a>
 80081c6:	4639      	mov	r1, r7
 80081c8:	4798      	blx	r3
    if(event_xcb) event_xcb(obj, event);
 80081ca:	f1b9 0f00 	cmp.w	r9, #0
 80081ce:	d002      	beq.n	80081d6 <lv_event_send_func+0x46>
 80081d0:	4639      	mov	r1, r7
 80081d2:	4628      	mov	r0, r5
 80081d4:	47c8      	blx	r9
    event_temp_data_head = event_temp_data_head->prev;
 80081d6:	6823      	ldr	r3, [r4, #0]
    event_act_data = event_act_data_save;
 80081d8:	f8c6 a000 	str.w	sl, [r6]
    event_temp_data_head = event_temp_data_head->prev;
 80081dc:	689b      	ldr	r3, [r3, #8]
 80081de:	6023      	str	r3, [r4, #0]
    if(event_temp_data.deleted) {
 80081e0:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80081e4:	b983      	cbnz	r3, 8008208 <lv_event_send_func+0x78>
    if(obj) {
 80081e6:	b18d      	cbz	r5, 800820c <lv_event_send_func+0x7c>
        if(obj->parent_event && obj->par) {
 80081e8:	f995 3030 	ldrsb.w	r3, [r5, #48]	; 0x30
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	da0d      	bge.n	800820c <lv_event_send_func+0x7c>
 80081f0:	6828      	ldr	r0, [r5, #0]
 80081f2:	b158      	cbz	r0, 800820c <lv_event_send_func+0x7c>
            lv_res_t res = lv_event_send(obj->par, event, data);
 80081f4:	4642      	mov	r2, r8
 80081f6:	4639      	mov	r1, r7
 80081f8:	f000 f80e 	bl	8008218 <lv_event_send>
        return LV_RES_INV;
 80081fc:	1e43      	subs	r3, r0, #1
 80081fe:	4258      	negs	r0, r3
 8008200:	4158      	adcs	r0, r3
}
 8008202:	b004      	add	sp, #16
 8008204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return LV_RES_INV;
 8008208:	2000      	movs	r0, #0
 800820a:	e7fa      	b.n	8008202 <lv_event_send_func+0x72>
    return LV_RES_OK;
 800820c:	2001      	movs	r0, #1
 800820e:	e7f8      	b.n	8008202 <lv_event_send_func+0x72>
 8008210:	200041d8 	.word	0x200041d8
 8008214:	200041d4 	.word	0x200041d4

08008218 <lv_event_send>:
{
 8008218:	4613      	mov	r3, r2
    if(obj == NULL) return LV_RES_OK;
 800821a:	b120      	cbz	r0, 8008226 <lv_event_send+0xe>
    res = lv_event_send_func(obj->event_cb, obj, event, data);
 800821c:	460a      	mov	r2, r1
 800821e:	4601      	mov	r1, r0
 8008220:	6980      	ldr	r0, [r0, #24]
 8008222:	f7ff bfb5 	b.w	8008190 <lv_event_send_func>
}
 8008226:	2001      	movs	r0, #1
 8008228:	4770      	bx	lr
	...

0800822c <lv_obj_get_disp>:
{
 800822c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(obj->par == NULL)
 800822e:	6803      	ldr	r3, [r0, #0]
{
 8008230:	4605      	mov	r5, r0
    if(obj->par == NULL)
 8008232:	b97b      	cbnz	r3, 8008254 <lv_obj_get_disp+0x28>
    LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d)
 8008234:	4813      	ldr	r0, [pc, #76]	; (8008284 <lv_obj_get_disp+0x58>)
 8008236:	4f13      	ldr	r7, [pc, #76]	; (8008284 <lv_obj_get_disp+0x58>)
 8008238:	f004 fc6f 	bl	800cb1a <lv_ll_get_head>
 800823c:	4604      	mov	r4, r0
 800823e:	b96c      	cbnz	r4, 800825c <lv_obj_get_disp+0x30>
    LV_LOG_WARN("lv_scr_get_disp: screen not found")
 8008240:	4b11      	ldr	r3, [pc, #68]	; (8008288 <lv_obj_get_disp+0x5c>)
 8008242:	4912      	ldr	r1, [pc, #72]	; (800828c <lv_obj_get_disp+0x60>)
 8008244:	f240 52db 	movw	r2, #1499	; 0x5db
 8008248:	2002      	movs	r0, #2
 800824a:	f004 fd5b 	bl	800cd04 <lv_log_add>
}
 800824e:	4620      	mov	r0, r4
 8008250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } while(par != NULL);
 8008252:	461d      	mov	r5, r3
    return obj->par;
 8008254:	682b      	ldr	r3, [r5, #0]
    } while(par != NULL);
 8008256:	2b00      	cmp	r3, #0
 8008258:	d1fb      	bne.n	8008252 <lv_obj_get_disp+0x26>
 800825a:	e7eb      	b.n	8008234 <lv_obj_get_disp+0x8>
        LV_LL_READ(d->scr_ll, s)
 800825c:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008260:	4630      	mov	r0, r6
 8008262:	f004 fc5a 	bl	800cb1a <lv_ll_get_head>
 8008266:	b928      	cbnz	r0, 8008274 <lv_obj_get_disp+0x48>
    LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d)
 8008268:	4621      	mov	r1, r4
 800826a:	4638      	mov	r0, r7
 800826c:	f004 fc5b 	bl	800cb26 <lv_ll_get_next>
 8008270:	4604      	mov	r4, r0
 8008272:	e7e4      	b.n	800823e <lv_obj_get_disp+0x12>
            if(s == scr) return d;
 8008274:	4285      	cmp	r5, r0
 8008276:	d0ea      	beq.n	800824e <lv_obj_get_disp+0x22>
        LV_LL_READ(d->scr_ll, s)
 8008278:	4601      	mov	r1, r0
 800827a:	4630      	mov	r0, r6
 800827c:	f004 fc53 	bl	800cb26 <lv_ll_get_next>
 8008280:	e7f1      	b.n	8008266 <lv_obj_get_disp+0x3a>
 8008282:	bf00      	nop
 8008284:	2000d8e4 	.word	0x2000d8e4
 8008288:	08010890 	.word	0x08010890
 800828c:	08010823 	.word	0x08010823

08008290 <lv_obj_invalidate>:
    return obj->hidden == 0 ? false : true;
 8008290:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
    if(lv_obj_get_hidden(obj)) return;
 8008294:	06da      	lsls	r2, r3, #27
{
 8008296:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008298:	4604      	mov	r4, r0
    if(lv_obj_get_hidden(obj)) return;
 800829a:	d439      	bmi.n	8008310 <lv_obj_invalidate+0x80>
 800829c:	4605      	mov	r5, r0
    return obj->par;
 800829e:	682b      	ldr	r3, [r5, #0]
    } while(par != NULL);
 80082a0:	bb53      	cbnz	r3, 80082f8 <lv_obj_invalidate+0x68>
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
 80082a2:	4628      	mov	r0, r5
 80082a4:	f7ff ffc2 	bl	800822c <lv_obj_get_disp>
 80082a8:	4606      	mov	r6, r0
    if(obj_scr == lv_disp_get_scr_act(disp) || obj_scr == lv_disp_get_layer_top(disp) ||
 80082aa:	f7ff fdb3 	bl	8007e14 <lv_disp_get_scr_act>
 80082ae:	4285      	cmp	r5, r0
 80082b0:	d124      	bne.n	80082fc <lv_obj_invalidate+0x6c>
        lv_coord_t ext_size = obj->ext_draw_pad;
 80082b2:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
    return obj->par;
 80082b6:	6825      	ldr	r5, [r4, #0]
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    memcpy(dest, src, sizeof(lv_area_t));
 80082b8:	f854 0f10 	ldr.w	r0, [r4, #16]!
 80082bc:	6861      	ldr	r1, [r4, #4]
 80082be:	466a      	mov	r2, sp
 80082c0:	c203      	stmia	r2!, {r0, r1}
        area_trunc.x1 -= ext_size;
 80082c2:	f8bd 2000 	ldrh.w	r2, [sp]
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	1ad2      	subs	r2, r2, r3
 80082ca:	f8ad 2000 	strh.w	r2, [sp]
        area_trunc.y1 -= ext_size;
 80082ce:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80082d2:	1ad2      	subs	r2, r2, r3
 80082d4:	f8ad 2002 	strh.w	r2, [sp, #2]
        area_trunc.x2 += ext_size;
 80082d8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80082dc:	441a      	add	r2, r3
 80082de:	f8ad 2004 	strh.w	r2, [sp, #4]
        area_trunc.y2 += ext_size;
 80082e2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80082e6:	4413      	add	r3, r2
 80082e8:	f8ad 3006 	strh.w	r3, [sp, #6]
        while(par != NULL) {
 80082ec:	b995      	cbnz	r5, 8008314 <lv_obj_invalidate+0x84>
        if(union_ok) lv_inv_area(disp, &area_trunc);
 80082ee:	4669      	mov	r1, sp
 80082f0:	4630      	mov	r0, r6
 80082f2:	f000 fc11 	bl	8008b18 <lv_inv_area>
 80082f6:	e00b      	b.n	8008310 <lv_obj_invalidate+0x80>
    } while(par != NULL);
 80082f8:	461d      	mov	r5, r3
 80082fa:	e7d0      	b.n	800829e <lv_obj_invalidate+0xe>
    if(obj_scr == lv_disp_get_scr_act(disp) || obj_scr == lv_disp_get_layer_top(disp) ||
 80082fc:	4630      	mov	r0, r6
 80082fe:	f7ff fd9f 	bl	8007e40 <lv_disp_get_layer_top>
 8008302:	4285      	cmp	r5, r0
 8008304:	d0d5      	beq.n	80082b2 <lv_obj_invalidate+0x22>
       obj_scr == lv_disp_get_layer_sys(disp)) {
 8008306:	4630      	mov	r0, r6
 8008308:	f7ff fdb0 	bl	8007e6c <lv_disp_get_layer_sys>
    if(obj_scr == lv_disp_get_scr_act(disp) || obj_scr == lv_disp_get_layer_top(disp) ||
 800830c:	4285      	cmp	r5, r0
 800830e:	d0d0      	beq.n	80082b2 <lv_obj_invalidate+0x22>
}
 8008310:	b002      	add	sp, #8
 8008312:	bd70      	pop	{r4, r5, r6, pc}
            union_ok = lv_area_intersect(&area_trunc, &area_trunc, &par->coords);
 8008314:	f105 0210 	add.w	r2, r5, #16
 8008318:	4669      	mov	r1, sp
 800831a:	4668      	mov	r0, sp
 800831c:	f004 fa33 	bl	800c786 <lv_area_intersect>
            if(union_ok == false) break;       /*If no common parts with parent break;*/
 8008320:	2800      	cmp	r0, #0
 8008322:	d0f5      	beq.n	8008310 <lv_obj_invalidate+0x80>
    return obj->hidden == 0 ? false : true;
 8008324:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
            if(lv_obj_get_hidden(par)) return; /*If the parent is hidden then the child is hidden and won't be drawn*/
 8008328:	06db      	lsls	r3, r3, #27
 800832a:	d4f1      	bmi.n	8008310 <lv_obj_invalidate+0x80>
    return obj->par;
 800832c:	682d      	ldr	r5, [r5, #0]
 800832e:	e7dd      	b.n	80082ec <lv_obj_invalidate+0x5c>

08008330 <lv_obj_move_foreground>:
{
 8008330:	b570      	push	{r4, r5, r6, lr}
    return obj->par;
 8008332:	6804      	ldr	r4, [r0, #0]
    if(lv_ll_get_head(&parent->child_ll) == obj) return;
 8008334:	1d26      	adds	r6, r4, #4
{
 8008336:	4605      	mov	r5, r0
    if(lv_ll_get_head(&parent->child_ll) == obj) return;
 8008338:	4630      	mov	r0, r6
 800833a:	f004 fbee 	bl	800cb1a <lv_ll_get_head>
 800833e:	4285      	cmp	r5, r0
 8008340:	d012      	beq.n	8008368 <lv_obj_move_foreground+0x38>
    lv_obj_invalidate(parent);
 8008342:	4620      	mov	r0, r4
 8008344:	f7ff ffa4 	bl	8008290 <lv_obj_invalidate>
    lv_ll_chg_list(&parent->child_ll, &parent->child_ll, obj, true);
 8008348:	462a      	mov	r2, r5
 800834a:	4631      	mov	r1, r6
 800834c:	4630      	mov	r0, r6
 800834e:	2301      	movs	r3, #1
 8008350:	f004 fc5c 	bl	800cc0c <lv_ll_chg_list>
    parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, obj);
 8008354:	69e3      	ldr	r3, [r4, #28]
 8008356:	462a      	mov	r2, r5
 8008358:	4620      	mov	r0, r4
 800835a:	2101      	movs	r1, #1
 800835c:	4798      	blx	r3
    lv_obj_invalidate(parent);
 800835e:	4620      	mov	r0, r4
}
 8008360:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_invalidate(parent);
 8008364:	f7ff bf94 	b.w	8008290 <lv_obj_invalidate>
 8008368:	bd70      	pop	{r4, r5, r6, pc}

0800836a <lv_obj_set_pos>:
{
 800836a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    lv_obj_t * par = obj->par;
 800836e:	6806      	ldr	r6, [r0, #0]
    diff.x = x - obj->coords.x1;
 8008370:	8a03      	ldrh	r3, [r0, #16]
 8008372:	f8b6 8010 	ldrh.w	r8, [r6, #16]
    diff.y = y - obj->coords.y1;
 8008376:	8a75      	ldrh	r5, [r6, #18]
    diff.x = x - obj->coords.x1;
 8008378:	eba8 0803 	sub.w	r8, r8, r3
    diff.y = y - obj->coords.y1;
 800837c:	8a43      	ldrh	r3, [r0, #18]
    diff.x = x - obj->coords.x1;
 800837e:	4488      	add	r8, r1
    diff.y = y - obj->coords.y1;
 8008380:	1aed      	subs	r5, r5, r3
    diff.x = x - obj->coords.x1;
 8008382:	fa1f f888 	uxth.w	r8, r8
    diff.y = y - obj->coords.y1;
 8008386:	4415      	add	r5, r2
 8008388:	b2ad      	uxth	r5, r5
    diff.x = x - obj->coords.x1;
 800838a:	fa0f f788 	sxth.w	r7, r8
{
 800838e:	4604      	mov	r4, r0
    diff.y = y - obj->coords.y1;
 8008390:	fa0f f985 	sxth.w	r9, r5
    if(diff.x == 0 && diff.y == 0) return;
 8008394:	b917      	cbnz	r7, 800839c <lv_obj_set_pos+0x32>
 8008396:	f1b9 0f00 	cmp.w	r9, #0
 800839a:	d026      	beq.n	80083ea <lv_obj_set_pos+0x80>
    lv_obj_invalidate(obj);
 800839c:	4620      	mov	r0, r4
 800839e:	f7ff ff77 	bl	8008290 <lv_obj_invalidate>
 80083a2:	4622      	mov	r2, r4
 80083a4:	466b      	mov	r3, sp
 80083a6:	f852 0f10 	ldr.w	r0, [r2, #16]!
 80083aa:	6851      	ldr	r1, [r2, #4]
    obj->coords.y2 += diff.y;
 80083ac:	8ae2      	ldrh	r2, [r4, #22]
 80083ae:	c303      	stmia	r3!, {r0, r1}
    obj->coords.x1 += diff.x;
 80083b0:	8a23      	ldrh	r3, [r4, #16]
    obj->coords.x2 += diff.x;
 80083b2:	8aa1      	ldrh	r1, [r4, #20]
    obj->coords.x1 += diff.x;
 80083b4:	4443      	add	r3, r8
 80083b6:	8223      	strh	r3, [r4, #16]
    obj->coords.y1 += diff.y;
 80083b8:	8a63      	ldrh	r3, [r4, #18]
    obj->coords.x2 += diff.x;
 80083ba:	4441      	add	r1, r8
    obj->coords.y1 += diff.y;
 80083bc:	442b      	add	r3, r5
    obj->coords.y2 += diff.y;
 80083be:	4415      	add	r5, r2
    obj->coords.y1 += diff.y;
 80083c0:	8263      	strh	r3, [r4, #18]
    obj->coords.x2 += diff.x;
 80083c2:	82a1      	strh	r1, [r4, #20]
    refresh_children_position(obj, diff.x, diff.y);
 80083c4:	464a      	mov	r2, r9
 80083c6:	4639      	mov	r1, r7
 80083c8:	4620      	mov	r0, r4
    obj->coords.y2 += diff.y;
 80083ca:	82e5      	strh	r5, [r4, #22]
    refresh_children_position(obj, diff.x, diff.y);
 80083cc:	f7ff fe80 	bl	80080d0 <refresh_children_position>
    obj->signal_cb(obj, LV_SIGNAL_CORD_CHG, &ori);
 80083d0:	69e3      	ldr	r3, [r4, #28]
 80083d2:	466a      	mov	r2, sp
 80083d4:	2102      	movs	r1, #2
 80083d6:	4620      	mov	r0, r4
 80083d8:	4798      	blx	r3
    par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
 80083da:	69f3      	ldr	r3, [r6, #28]
 80083dc:	4622      	mov	r2, r4
 80083de:	2101      	movs	r1, #1
 80083e0:	4630      	mov	r0, r6
 80083e2:	4798      	blx	r3
    lv_obj_invalidate(obj);
 80083e4:	4620      	mov	r0, r4
 80083e6:	f7ff ff53 	bl	8008290 <lv_obj_invalidate>
}
 80083ea:	b003      	add	sp, #12
 80083ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080083f0 <lv_obj_create>:
{
 80083f0:	b570      	push	{r4, r5, r6, lr}
 80083f2:	460d      	mov	r5, r1
    if(parent == NULL) {
 80083f4:	4606      	mov	r6, r0
 80083f6:	2800      	cmp	r0, #0
 80083f8:	f040 80f6 	bne.w	80085e8 <lv_obj_create+0x1f8>
        lv_disp_t * disp = lv_disp_get_default();
 80083fc:	f004 f88a 	bl	800c514 <lv_disp_get_default>
        if(!disp) {
 8008400:	4604      	mov	r4, r0
 8008402:	b938      	cbnz	r0, 8008414 <lv_obj_create+0x24>
            LV_LOG_WARN("lv_obj_create: not display created to so far. No place to assign the new screen");
 8008404:	4ba4      	ldr	r3, [pc, #656]	; (8008698 <lv_obj_create+0x2a8>)
 8008406:	49a5      	ldr	r1, [pc, #660]	; (800869c <lv_obj_create+0x2ac>)
 8008408:	228a      	movs	r2, #138	; 0x8a
 800840a:	2002      	movs	r0, #2
 800840c:	f004 fc7a 	bl	800cd04 <lv_log_add>
}
 8008410:	4620      	mov	r0, r4
 8008412:	bd70      	pop	{r4, r5, r6, pc}
        new_obj = lv_ll_ins_head(&disp->scr_ll);
 8008414:	3030      	adds	r0, #48	; 0x30
 8008416:	f004 fb44 	bl	800caa2 <lv_ll_ins_head>
        lv_mem_assert(new_obj);
 800841a:	4604      	mov	r4, r0
 800841c:	b930      	cbnz	r0, 800842c <lv_obj_create+0x3c>
 800841e:	4ba0      	ldr	r3, [pc, #640]	; (80086a0 <lv_obj_create+0x2b0>)
 8008420:	499e      	ldr	r1, [pc, #632]	; (800869c <lv_obj_create+0x2ac>)
 8008422:	228f      	movs	r2, #143	; 0x8f
 8008424:	2003      	movs	r0, #3
 8008426:	f004 fc6d 	bl	800cd04 <lv_log_add>
 800842a:	e7fe      	b.n	800842a <lv_obj_create+0x3a>
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 800842c:	2148      	movs	r1, #72	; 0x48
        new_obj->par = NULL; /*Screens has no a parent*/
 800842e:	f840 6b04 	str.w	r6, [r0], #4
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 8008432:	f004 fb2c 	bl	800ca8e <lv_ll_init>
        new_obj->coords.x1    = 0;
 8008436:	8226      	strh	r6, [r4, #16]
        new_obj->coords.y1    = 0;
 8008438:	8266      	strh	r6, [r4, #18]
        new_obj->coords.x2    = lv_disp_get_hor_res(NULL) - 1;
 800843a:	4630      	mov	r0, r6
 800843c:	f004 f870 	bl	800c520 <lv_disp_get_hor_res>
 8008440:	3801      	subs	r0, #1
 8008442:	82a0      	strh	r0, [r4, #20]
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
 8008444:	4630      	mov	r0, r6
 8008446:	f004 f87b 	bl	800c540 <lv_disp_get_ver_res>
        new_obj->realign.auto_realign = 0;
 800844a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
        new_obj->ext_draw_pad = 0;
 800844e:	86a6      	strh	r6, [r4, #52]	; 0x34
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
 8008450:	3801      	subs	r0, #1
        new_obj->realign.auto_realign = 0;
 8008452:	f366 0300 	bfi	r3, r6, #0, #1
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
 8008456:	82e0      	strh	r0, [r4, #22]
        new_obj->realign.align        = LV_ALIGN_CENTER;
 8008458:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
        new_obj->realign.xofs         = 0;
 800845c:	87a6      	strh	r6, [r4, #60]	; 0x3c
        new_obj->realign.yofs         = 0;
 800845e:	87e6      	strh	r6, [r4, #62]	; 0x3e
        new_obj->realign.base         = NULL;
 8008460:	63a6      	str	r6, [r4, #56]	; 0x38
        new_obj->realign.auto_realign = 0;
 8008462:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        lv_theme_t * th = lv_theme_get_current();
 8008466:	f004 fee1 	bl	800d22c <lv_theme_get_current>
        if(th) {
 800846a:	2800      	cmp	r0, #0
 800846c:	f000 80ba 	beq.w	80085e4 <lv_obj_create+0x1f4>
            new_obj->style_p = th->style.scr;
 8008470:	6803      	ldr	r3, [r0, #0]
        new_obj->click        = 0;
 8008472:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
            new_obj->style_p = &lv_style_scr;
 8008476:	62a3      	str	r3, [r4, #40]	; 0x28
    obj->signal_cb = signal_cb;
 8008478:	4b8a      	ldr	r3, [pc, #552]	; (80086a4 <lv_obj_create+0x2b4>)
 800847a:	61e3      	str	r3, [r4, #28]
    obj->design_cb = design_cb;
 800847c:	4b8a      	ldr	r3, [pc, #552]	; (80086a8 <lv_obj_create+0x2b8>)
 800847e:	6223      	str	r3, [r4, #32]
        new_obj->parent_event = 0;
 8008480:	f002 0280 	and.w	r2, r2, #128	; 0x80
        new_obj->event_cb = NULL;
 8008484:	2300      	movs	r3, #0
        new_obj->parent_event = 0;
 8008486:	f363 12c7 	bfi	r2, r3, #7, #1
 800848a:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->reserved     = 0;
 800848e:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
        new_obj->event_cb = NULL;
 8008492:	61a3      	str	r3, [r4, #24]
        new_obj->opa_scale    = LV_OPA_COVER;
 8008494:	21ff      	movs	r1, #255	; 0xff
        new_obj->reserved     = 0;
 8008496:	f363 0287 	bfi	r2, r3, #2, #6
        memset(&new_obj->user_data, 0, sizeof(lv_obj_user_data_t));
 800849a:	6463      	str	r3, [r4, #68]	; 0x44
        new_obj->group_p = NULL;
 800849c:	62e3      	str	r3, [r4, #44]	; 0x2c
        new_obj->protect      = LV_PROTECT_NONE;
 800849e:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
        new_obj->opa_scale    = LV_OPA_COVER;
 80084a2:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
        new_obj->reserved     = 0;
 80084a6:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
        new_obj->ext_attr = NULL;
 80084aa:	6263      	str	r3, [r4, #36]	; 0x24
    if(copy != NULL) {
 80084ac:	2d00      	cmp	r5, #0
 80084ae:	f000 80ef 	beq.w	8008690 <lv_obj_create+0x2a0>
 80084b2:	462a      	mov	r2, r5
 80084b4:	f852 3f10 	ldr.w	r3, [r2, #16]!
 80084b8:	6123      	str	r3, [r4, #16]
 80084ba:	6853      	ldr	r3, [r2, #4]
 80084bc:	6163      	str	r3, [r4, #20]
        new_obj->ext_draw_pad = copy->ext_draw_pad;
 80084be:	f9b5 3034 	ldrsh.w	r3, [r5, #52]	; 0x34
 80084c2:	86a3      	strh	r3, [r4, #52]	; 0x34
        memcpy(&new_obj->user_data, &copy->user_data, sizeof(lv_obj_user_data_t));
 80084c4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80084c6:	6463      	str	r3, [r4, #68]	; 0x44
        new_obj->realign.align        = copy->realign.align;
 80084c8:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 80084cc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        new_obj->realign.xofs         = copy->realign.xofs;
 80084d0:	f9b5 303c 	ldrsh.w	r3, [r5, #60]	; 0x3c
 80084d4:	87a3      	strh	r3, [r4, #60]	; 0x3c
        new_obj->realign.yofs         = copy->realign.yofs;
 80084d6:	f9b5 303e 	ldrsh.w	r3, [r5, #62]	; 0x3e
 80084da:	87e3      	strh	r3, [r4, #62]	; 0x3e
        new_obj->realign.base         = copy->realign.base;
 80084dc:	6bab      	ldr	r3, [r5, #56]	; 0x38
        new_obj->realign.auto_realign = copy->realign.auto_realign;
 80084de:	f895 2041 	ldrb.w	r2, [r5, #65]	; 0x41
        new_obj->realign.base         = copy->realign.base;
 80084e2:	63a3      	str	r3, [r4, #56]	; 0x38
        new_obj->realign.auto_realign = copy->realign.auto_realign;
 80084e4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80084e8:	f362 0300 	bfi	r3, r2, #0, #1
 80084ec:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        new_obj->event_cb = copy->event_cb;
 80084f0:	69ab      	ldr	r3, [r5, #24]
        new_obj->click        = copy->click;
 80084f2:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
        new_obj->event_cb = copy->event_cb;
 80084f6:	61a3      	str	r3, [r4, #24]
        new_obj->click        = copy->click;
 80084f8:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80084fc:	f362 0300 	bfi	r3, r2, #0, #1
 8008500:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        new_obj->drag         = copy->drag;
 8008504:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8008508:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 800850c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008510:	f363 0241 	bfi	r2, r3, #1, #1
 8008514:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->drag_dir     = copy->drag_dir;
 8008518:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
 800851c:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8008520:	f362 0301 	bfi	r3, r2, #0, #2
 8008524:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
        new_obj->drag_throw   = copy->drag_throw;
 8008528:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800852c:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8008530:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008534:	f363 0282 	bfi	r2, r3, #2, #1
 8008538:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->drag_parent  = copy->drag_parent;
 800853c:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8008540:	b2d2      	uxtb	r2, r2
 8008542:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008546:	f363 02c3 	bfi	r2, r3, #3, #1
 800854a:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->hidden       = copy->hidden;
 800854e:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8008552:	b2d2      	uxtb	r2, r2
 8008554:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008558:	f363 1204 	bfi	r2, r3, #4, #1
 800855c:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->top          = copy->top;
 8008560:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8008564:	b2d2      	uxtb	r2, r2
 8008566:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800856a:	f363 1245 	bfi	r2, r3, #5, #1
 800856e:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->parent_event = copy->parent_event;
 8008572:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8008576:	b2d2      	uxtb	r2, r2
 8008578:	09db      	lsrs	r3, r3, #7
 800857a:	f363 12c7 	bfi	r2, r3, #7, #1
 800857e:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->opa_scale_en = copy->opa_scale_en;
 8008582:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8008586:	b2d2      	uxtb	r2, r2
 8008588:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800858c:	f363 1286 	bfi	r2, r3, #6, #1
 8008590:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->protect      = copy->protect;
 8008594:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
 8008598:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
        new_obj->opa_scale    = copy->opa_scale;
 800859c:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
 80085a0:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
        if(copy->group_p != NULL) {
 80085a4:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
        new_obj->style_p = copy->style_p;
 80085a6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80085a8:	62a3      	str	r3, [r4, #40]	; 0x28
        if(copy->group_p != NULL) {
 80085aa:	b110      	cbz	r0, 80085b2 <lv_obj_create+0x1c2>
            lv_group_add_obj(copy->group_p, new_obj);
 80085ac:	4621      	mov	r1, r4
 80085ae:	f7ff fd2b 	bl	8008008 <lv_group_add_obj>
    return obj->par;
 80085b2:	682b      	ldr	r3, [r5, #0]
        if(lv_obj_get_parent(copy) != NULL && parent != NULL) {
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d066      	beq.n	8008686 <lv_obj_create+0x296>
 80085b8:	2e00      	cmp	r6, #0
 80085ba:	d064      	beq.n	8008686 <lv_obj_create+0x296>
    rel_y             = obj->coords.y1 - parent->coords.y1;
 80085bc:	8a59      	ldrh	r1, [r3, #18]
 80085be:	8a6a      	ldrh	r2, [r5, #18]
    rel_x             = obj->coords.x1 - parent->coords.x1;
 80085c0:	8a1b      	ldrh	r3, [r3, #16]
    rel_y             = obj->coords.y1 - parent->coords.y1;
 80085c2:	1a52      	subs	r2, r2, r1
    rel_x             = obj->coords.x1 - parent->coords.x1;
 80085c4:	8a29      	ldrh	r1, [r5, #16]
 80085c6:	1ac9      	subs	r1, r1, r3
            lv_obj_set_pos(new_obj, lv_obj_get_x(copy), lv_obj_get_y(copy));
 80085c8:	b212      	sxth	r2, r2
 80085ca:	b209      	sxth	r1, r1
 80085cc:	4620      	mov	r0, r4
 80085ce:	f7ff fecc 	bl	800836a <lv_obj_set_pos>
        parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, new_obj);
 80085d2:	69f3      	ldr	r3, [r6, #28]
 80085d4:	4622      	mov	r2, r4
 80085d6:	2101      	movs	r1, #1
 80085d8:	4630      	mov	r0, r6
 80085da:	4798      	blx	r3
        lv_obj_invalidate(new_obj);
 80085dc:	4620      	mov	r0, r4
 80085de:	f7ff fe57 	bl	8008290 <lv_obj_invalidate>
 80085e2:	e715      	b.n	8008410 <lv_obj_create+0x20>
            new_obj->style_p = &lv_style_scr;
 80085e4:	4b31      	ldr	r3, [pc, #196]	; (80086ac <lv_obj_create+0x2bc>)
 80085e6:	e744      	b.n	8008472 <lv_obj_create+0x82>
        new_obj = lv_ll_ins_head(&parent->child_ll);
 80085e8:	3004      	adds	r0, #4
 80085ea:	f004 fa5a 	bl	800caa2 <lv_ll_ins_head>
        lv_mem_assert(new_obj);
 80085ee:	4604      	mov	r4, r0
 80085f0:	b930      	cbnz	r0, 8008600 <lv_obj_create+0x210>
 80085f2:	4b2b      	ldr	r3, [pc, #172]	; (80086a0 <lv_obj_create+0x2b0>)
 80085f4:	4929      	ldr	r1, [pc, #164]	; (800869c <lv_obj_create+0x2ac>)
 80085f6:	22d8      	movs	r2, #216	; 0xd8
 80085f8:	2003      	movs	r0, #3
 80085fa:	f004 fb83 	bl	800cd04 <lv_log_add>
 80085fe:	e7fe      	b.n	80085fe <lv_obj_create+0x20e>
        new_obj->par = parent; /*Set the parent*/
 8008600:	f840 6b04 	str.w	r6, [r0], #4
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 8008604:	2148      	movs	r1, #72	; 0x48
 8008606:	f004 fa42 	bl	800ca8e <lv_ll_init>
        new_obj->coords.x1    = parent->coords.x1;
 800860a:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
 800860e:	8223      	strh	r3, [r4, #16]
        new_obj->coords.y1    = parent->coords.y1;
 8008610:	f9b6 3012 	ldrsh.w	r3, [r6, #18]
 8008614:	8263      	strh	r3, [r4, #18]
        new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
 8008616:	8a33      	ldrh	r3, [r6, #16]
        new_obj->realign.auto_realign = 0;
 8008618:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
        new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
 800861c:	3319      	adds	r3, #25
 800861e:	82a3      	strh	r3, [r4, #20]
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
 8008620:	8a73      	ldrh	r3, [r6, #18]
 8008622:	3310      	adds	r3, #16
 8008624:	82e3      	strh	r3, [r4, #22]
        new_obj->ext_draw_pad = 0;
 8008626:	2300      	movs	r3, #0
        new_obj->realign.auto_realign = 0;
 8008628:	f363 0200 	bfi	r2, r3, #0, #1
        new_obj->ext_draw_pad = 0;
 800862c:	86a3      	strh	r3, [r4, #52]	; 0x34
        new_obj->realign.align        = LV_ALIGN_CENTER;
 800862e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        new_obj->realign.xofs         = 0;
 8008632:	87a3      	strh	r3, [r4, #60]	; 0x3c
        new_obj->realign.yofs         = 0;
 8008634:	87e3      	strh	r3, [r4, #62]	; 0x3e
        new_obj->realign.base         = NULL;
 8008636:	63a3      	str	r3, [r4, #56]	; 0x38
        new_obj->realign.auto_realign = 0;
 8008638:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        lv_theme_t * th = lv_theme_get_current();
 800863c:	f004 fdf6 	bl	800d22c <lv_theme_get_current>
        if(th) {
 8008640:	b1f8      	cbz	r0, 8008682 <lv_obj_create+0x292>
            new_obj->style_p = th->style.panel;
 8008642:	6883      	ldr	r3, [r0, #8]
        new_obj->click        = 1;
 8008644:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
        new_obj->drag_dir     = LV_DRAG_DIR_ALL;
 8008648:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
            new_obj->style_p = &lv_style_plain_color;
 800864c:	62a3      	str	r3, [r4, #40]	; 0x28
    obj->signal_cb = signal_cb;
 800864e:	4b15      	ldr	r3, [pc, #84]	; (80086a4 <lv_obj_create+0x2b4>)
 8008650:	61e3      	str	r3, [r4, #28]
        new_obj->drag         = 0;
 8008652:	f042 0201 	orr.w	r2, r2, #1
    obj->design_cb = design_cb;
 8008656:	4b14      	ldr	r3, [pc, #80]	; (80086a8 <lv_obj_create+0x2b8>)
 8008658:	6223      	str	r3, [r4, #32]
        new_obj->drag_dir     = LV_DRAG_DIR_ALL;
 800865a:	f041 0103 	orr.w	r1, r1, #3
        new_obj->event_cb = NULL;
 800865e:	2300      	movs	r3, #0
        new_obj->parent_event = 0;
 8008660:	f002 0281 	and.w	r2, r2, #129	; 0x81
        new_obj->drag_dir     = LV_DRAG_DIR_ALL;
 8008664:	f884 1031 	strb.w	r1, [r4, #49]	; 0x31
        new_obj->parent_event = 0;
 8008668:	f363 12c7 	bfi	r2, r3, #7, #1
        new_obj->opa_scale    = LV_OPA_COVER;
 800866c:	21ff      	movs	r1, #255	; 0xff
        new_obj->event_cb = NULL;
 800866e:	61a3      	str	r3, [r4, #24]
        memset(&new_obj->user_data, 0, sizeof(lv_obj_user_data_t));
 8008670:	6463      	str	r3, [r4, #68]	; 0x44
        new_obj->group_p = NULL;
 8008672:	62e3      	str	r3, [r4, #44]	; 0x2c
        new_obj->protect      = LV_PROTECT_NONE;
 8008674:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
        new_obj->opa_scale    = LV_OPA_COVER;
 8008678:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
        new_obj->parent_event = 0;
 800867c:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
 8008680:	e713      	b.n	80084aa <lv_obj_create+0xba>
            new_obj->style_p = &lv_style_plain_color;
 8008682:	4b0b      	ldr	r3, [pc, #44]	; (80086b0 <lv_obj_create+0x2c0>)
 8008684:	e7de      	b.n	8008644 <lv_obj_create+0x254>
            lv_obj_set_pos(new_obj, 0, 0);
 8008686:	2200      	movs	r2, #0
 8008688:	4611      	mov	r1, r2
 800868a:	4620      	mov	r0, r4
 800868c:	f7ff fe6d 	bl	800836a <lv_obj_set_pos>
    if(parent != NULL) {
 8008690:	2e00      	cmp	r6, #0
 8008692:	d19e      	bne.n	80085d2 <lv_obj_create+0x1e2>
 8008694:	e6bc      	b.n	8008410 <lv_obj_create+0x20>
 8008696:	bf00      	nop
 8008698:	08010840 	.word	0x08010840
 800869c:	08010823 	.word	0x08010823
 80086a0:	080107dd 	.word	0x080107dd
 80086a4:	080087a9 	.word	0x080087a9
 80086a8:	08008817 	.word	0x08008817
 80086ac:	2000d814 	.word	0x2000d814
 80086b0:	2000d88c 	.word	0x2000d88c

080086b4 <lv_obj_refresh_style>:
{
 80086b4:	b510      	push	{r4, lr}
 80086b6:	4604      	mov	r4, r0
    lv_obj_invalidate(obj);
 80086b8:	f7ff fdea 	bl	8008290 <lv_obj_invalidate>
    obj->signal_cb(obj, LV_SIGNAL_STYLE_CHG, NULL);
 80086bc:	69e3      	ldr	r3, [r4, #28]
 80086be:	4620      	mov	r0, r4
 80086c0:	2200      	movs	r2, #0
 80086c2:	2104      	movs	r1, #4
 80086c4:	4798      	blx	r3
    lv_obj_invalidate(obj);
 80086c6:	4620      	mov	r0, r4
}
 80086c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_invalidate(obj);
 80086cc:	f7ff bde0 	b.w	8008290 <lv_obj_invalidate>

080086d0 <lv_obj_refresh_ext_draw_pad>:
{
 80086d0:	b510      	push	{r4, lr}
    obj->ext_draw_pad = 0;
 80086d2:	2200      	movs	r2, #0
{
 80086d4:	4604      	mov	r4, r0
    obj->ext_draw_pad = 0;
 80086d6:	8682      	strh	r2, [r0, #52]	; 0x34
    obj->signal_cb(obj, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
 80086d8:	69c3      	ldr	r3, [r0, #28]
 80086da:	2105      	movs	r1, #5
 80086dc:	4798      	blx	r3
    lv_obj_invalidate(obj);
 80086de:	4620      	mov	r0, r4
}
 80086e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_invalidate(obj);
 80086e4:	f7ff bdd4 	b.w	8008290 <lv_obj_invalidate>

080086e8 <lv_obj_get_parent>:
}
 80086e8:	6800      	ldr	r0, [r0, #0]
 80086ea:	4770      	bx	lr

080086ec <lv_obj_get_child>:
{
 80086ec:	3004      	adds	r0, #4
    if(child == NULL) {
 80086ee:	b909      	cbnz	r1, 80086f4 <lv_obj_get_child+0x8>
        result = lv_ll_get_head(&obj->child_ll);
 80086f0:	f004 ba13 	b.w	800cb1a <lv_ll_get_head>
        result = lv_ll_get_next(&obj->child_ll, child);
 80086f4:	f004 ba17 	b.w	800cb26 <lv_ll_get_next>

080086f8 <refresh_children_style>:
 * Recursively refresh the style of the children. Go deeper until a not NULL style is found
 * because the NULL styles are inherited from the parent
 * @param obj pointer to an object
 */
static void refresh_children_style(lv_obj_t * obj)
{
 80086f8:	b538      	push	{r3, r4, r5, lr}
 80086fa:	4605      	mov	r5, r0
        result = lv_ll_get_head(&obj->child_ll);
 80086fc:	3004      	adds	r0, #4
 80086fe:	f004 fa0c 	bl	800cb1a <lv_ll_get_head>
            lv_obj_refresh_style(child);   /*Notify the child about the style change*/
        } else if(child->style_p->glass) {
            /*Children with 'glass' parent might be effected if their style == NULL*/
            refresh_children_style(child);
        }
        child = lv_obj_get_child(obj, child);
 8008702:	4604      	mov	r4, r0
    while(child != NULL) {
 8008704:	b900      	cbnz	r0, 8008708 <refresh_children_style+0x10>
    }
}
 8008706:	bd38      	pop	{r3, r4, r5, pc}
        if(child->style_p == NULL) {
 8008708:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800870a:	b953      	cbnz	r3, 8008722 <refresh_children_style+0x2a>
            refresh_children_style(child); /*Check children too*/
 800870c:	4620      	mov	r0, r4
 800870e:	f7ff fff3 	bl	80086f8 <refresh_children_style>
            lv_obj_refresh_style(child);   /*Notify the child about the style change*/
 8008712:	4620      	mov	r0, r4
 8008714:	f7ff ffce 	bl	80086b4 <lv_obj_refresh_style>
        child = lv_obj_get_child(obj, child);
 8008718:	4621      	mov	r1, r4
 800871a:	4628      	mov	r0, r5
 800871c:	f7ff ffe6 	bl	80086ec <lv_obj_get_child>
 8008720:	e7ef      	b.n	8008702 <refresh_children_style+0xa>
        } else if(child->style_p->glass) {
 8008722:	781b      	ldrb	r3, [r3, #0]
 8008724:	07db      	lsls	r3, r3, #31
 8008726:	d5f7      	bpl.n	8008718 <refresh_children_style+0x20>
            refresh_children_style(child);
 8008728:	4620      	mov	r0, r4
 800872a:	f7ff ffe5 	bl	80086f8 <refresh_children_style>
 800872e:	e7f3      	b.n	8008718 <refresh_children_style+0x20>

08008730 <lv_obj_set_style>:
{
 8008730:	b510      	push	{r4, lr}
 8008732:	4604      	mov	r4, r0
    obj->style_p = style;
 8008734:	6281      	str	r1, [r0, #40]	; 0x28
    refresh_children_style(obj);
 8008736:	f7ff ffdf 	bl	80086f8 <refresh_children_style>
    lv_obj_refresh_style(obj);
 800873a:	4620      	mov	r0, r4
}
 800873c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_refresh_style(obj);
 8008740:	f7ff bfb8 	b.w	80086b4 <lv_obj_refresh_style>

08008744 <lv_obj_get_coords>:
 8008744:	f850 3f10 	ldr.w	r3, [r0, #16]!
 8008748:	600b      	str	r3, [r1, #0]
 800874a:	6843      	ldr	r3, [r0, #4]
 800874c:	604b      	str	r3, [r1, #4]
 800874e:	4770      	bx	lr

08008750 <lv_obj_get_style>:
{
 8008750:	b570      	push	{r4, r5, r6, lr}
    const lv_style_t * style_act = obj->style_p;
 8008752:	6a85      	ldr	r5, [r0, #40]	; 0x28
{
 8008754:	4606      	mov	r6, r0
    if(style_act == NULL) {
 8008756:	b98d      	cbnz	r5, 800877c <lv_obj_get_style+0x2c>
        lv_obj_t * par = obj->par;
 8008758:	6804      	ldr	r4, [r0, #0]
        while(par) {
 800875a:	b17c      	cbz	r4, 800877c <lv_obj_get_style+0x2c>
            if(par->style_p) {
 800875c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800875e:	b1fb      	cbz	r3, 80087a0 <lv_obj_get_style+0x50>
                if(par->style_p->glass == 0) {
 8008760:	781b      	ldrb	r3, [r3, #0]
 8008762:	07db      	lsls	r3, r3, #31
 8008764:	d41c      	bmi.n	80087a0 <lv_obj_get_style+0x50>
    return obj->group_p;
 8008766:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
                    if(lv_group_get_focused(g) == par) {
 8008768:	4628      	mov	r0, r5
 800876a:	f7ff fc96 	bl	800809a <lv_group_get_focused>
 800876e:	4284      	cmp	r4, r0
 8008770:	d114      	bne.n	800879c <lv_obj_get_style+0x4c>
                        style_act = lv_group_mod_style(g, par->style_p);
 8008772:	4628      	mov	r0, r5
 8008774:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8008776:	f7ff fc7d 	bl	8008074 <lv_group_mod_style>
 800877a:	4605      	mov	r5, r0
    if(obj->group_p) {
 800877c:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800877e:	b140      	cbz	r0, 8008792 <lv_obj_get_style+0x42>
        if(lv_group_get_focused(obj->group_p) == obj) {
 8008780:	f7ff fc8b 	bl	800809a <lv_group_get_focused>
 8008784:	4286      	cmp	r6, r0
 8008786:	d104      	bne.n	8008792 <lv_obj_get_style+0x42>
            style_act = lv_group_mod_style(obj->group_p, style_act);
 8008788:	4629      	mov	r1, r5
 800878a:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800878c:	f7ff fc72 	bl	8008074 <lv_group_mod_style>
 8008790:	4605      	mov	r5, r0
}
 8008792:	4804      	ldr	r0, [pc, #16]	; (80087a4 <lv_obj_get_style+0x54>)
 8008794:	2d00      	cmp	r5, #0
 8008796:	bf18      	it	ne
 8008798:	4628      	movne	r0, r5
 800879a:	bd70      	pop	{r4, r5, r6, pc}
                        style_act = par->style_p;
 800879c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800879e:	e7ed      	b.n	800877c <lv_obj_get_style+0x2c>
            par = par->par;
 80087a0:	6824      	ldr	r4, [r4, #0]
 80087a2:	e7da      	b.n	800875a <lv_obj_get_style+0xa>
 80087a4:	2000d79c 	.word	0x2000d79c

080087a8 <lv_obj_signal>:
{
 80087a8:	b570      	push	{r4, r5, r6, lr}
 80087aa:	460c      	mov	r4, r1
 80087ac:	4605      	mov	r5, r0
 80087ae:	4616      	mov	r6, r2
    const lv_style_t * style = lv_obj_get_style(obj);
 80087b0:	f7ff ffce 	bl	8008750 <lv_obj_get_style>
    if(sign == LV_SIGNAL_CHILD_CHG) {
 80087b4:	2c01      	cmp	r4, #1
 80087b6:	d105      	bne.n	80087c4 <lv_obj_signal+0x1c>
        if(lv_obj_is_protected(obj, LV_PROTECT_CHILD_CHG) != false) res = LV_RES_INV;
 80087b8:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
 80087bc:	43c0      	mvns	r0, r0
 80087be:	f000 0001 	and.w	r0, r0, #1
 80087c2:	bd70      	pop	{r4, r5, r6, pc}
    } else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 80087c4:	2c05      	cmp	r4, #5
 80087c6:	d108      	bne.n	80087da <lv_obj_signal+0x32>
        if(style->body.shadow.width > obj->ext_draw_pad) obj->ext_draw_pad = style->body.shadow.width;
 80087c8:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
 80087cc:	f9b5 2034 	ldrsh.w	r2, [r5, #52]	; 0x34
 80087d0:	429a      	cmp	r2, r3
 80087d2:	da00      	bge.n	80087d6 <lv_obj_signal+0x2e>
 80087d4:	86ab      	strh	r3, [r5, #52]	; 0x34
    lv_res_t res = LV_RES_OK;
 80087d6:	2001      	movs	r0, #1
}
 80087d8:	bd70      	pop	{r4, r5, r6, pc}
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 80087da:	2c04      	cmp	r4, #4
 80087dc:	d103      	bne.n	80087e6 <lv_obj_signal+0x3e>
        lv_obj_refresh_ext_draw_pad(obj);
 80087de:	4628      	mov	r0, r5
 80087e0:	f7ff ff76 	bl	80086d0 <lv_obj_refresh_ext_draw_pad>
 80087e4:	e7f7      	b.n	80087d6 <lv_obj_signal+0x2e>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 80087e6:	2c06      	cmp	r4, #6
        buf->type[0]        = "lv_obj";
 80087e8:	bf04      	itt	eq
 80087ea:	4b01      	ldreq	r3, [pc, #4]	; (80087f0 <lv_obj_signal+0x48>)
 80087ec:	6033      	streq	r3, [r6, #0]
 80087ee:	e7f2      	b.n	80087d6 <lv_obj_signal+0x2e>
 80087f0:	080108b2 	.word	0x080108b2

080087f4 <lv_obj_get_hidden>:
    return obj->hidden == 0 ? false : true;
 80087f4:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
}
 80087f8:	f3c0 1000 	ubfx	r0, r0, #4, #1
 80087fc:	4770      	bx	lr

080087fe <lv_obj_get_opa_scale>:
    while(parent) {
 80087fe:	b908      	cbnz	r0, 8008804 <lv_obj_get_opa_scale+0x6>
    return LV_OPA_COVER;
 8008800:	20ff      	movs	r0, #255	; 0xff
}
 8008802:	4770      	bx	lr
        if(parent->opa_scale_en) return parent->opa_scale;
 8008804:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8008808:	065b      	lsls	r3, r3, #25
 800880a:	d502      	bpl.n	8008812 <lv_obj_get_opa_scale+0x14>
 800880c:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
 8008810:	4770      	bx	lr
    return obj->par;
 8008812:	6800      	ldr	r0, [r0, #0]
 8008814:	e7f3      	b.n	80087fe <lv_obj_get_opa_scale>

08008816 <lv_obj_design>:
    if(mode == LV_DESIGN_COVER_CHK) {
 8008816:	2a02      	cmp	r2, #2
{
 8008818:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800881a:	4604      	mov	r4, r0
 800881c:	460e      	mov	r6, r1
    if(mode == LV_DESIGN_COVER_CHK) {
 800881e:	d13c      	bne.n	800889a <lv_obj_design+0x84>
        if(lv_area_is_in(mask_p, &obj->coords) == false) return false;
 8008820:	f100 0510 	add.w	r5, r0, #16
 8008824:	4629      	mov	r1, r5
 8008826:	4630      	mov	r0, r6
 8008828:	f004 f816 	bl	800c858 <lv_area_is_in>
 800882c:	b390      	cbz	r0, 8008894 <lv_obj_design+0x7e>
        const lv_style_t * style = lv_obj_get_style(obj);
 800882e:	4620      	mov	r0, r4
 8008830:	f7ff ff8e 	bl	8008750 <lv_obj_get_style>
        if(style->body.opa < LV_OPA_MAX) return false;
 8008834:	7a03      	ldrb	r3, [r0, #8]
 8008836:	2bfa      	cmp	r3, #250	; 0xfa
 8008838:	d92c      	bls.n	8008894 <lv_obj_design+0x7e>
        lv_coord_t r = style->body.radius;
 800883a:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
        if(r == LV_RADIUS_CIRCLE) return false;
 800883e:	f647 4318 	movw	r3, #31768	; 0x7c18
 8008842:	429c      	cmp	r4, r3
 8008844:	d026      	beq.n	8008894 <lv_obj_design+0x7e>
 8008846:	6828      	ldr	r0, [r5, #0]
 8008848:	6869      	ldr	r1, [r5, #4]
 800884a:	466b      	mov	r3, sp
 800884c:	c303      	stmia	r3!, {r0, r1}
        area_tmp.x1 += r;
 800884e:	f8bd 3000 	ldrh.w	r3, [sp]
 8008852:	b2a4      	uxth	r4, r4
 8008854:	4423      	add	r3, r4
 8008856:	f8ad 3000 	strh.w	r3, [sp]
        area_tmp.x2 -= r;
 800885a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 800885e:	4669      	mov	r1, sp
        area_tmp.x2 -= r;
 8008860:	1b1b      	subs	r3, r3, r4
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 8008862:	4630      	mov	r0, r6
        area_tmp.x2 -= r;
 8008864:	f8ad 3004 	strh.w	r3, [sp, #4]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 8008868:	f003 fff6 	bl	800c858 <lv_area_is_in>
 800886c:	b190      	cbz	r0, 8008894 <lv_obj_design+0x7e>
 800886e:	6828      	ldr	r0, [r5, #0]
 8008870:	6869      	ldr	r1, [r5, #4]
 8008872:	466b      	mov	r3, sp
 8008874:	c303      	stmia	r3!, {r0, r1}
        area_tmp.y1 += r;
 8008876:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800887a:	4423      	add	r3, r4
 800887c:	f8ad 3002 	strh.w	r3, [sp, #2]
        area_tmp.y2 -= r;
 8008880:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 8008884:	4669      	mov	r1, sp
        area_tmp.y2 -= r;
 8008886:	1b1c      	subs	r4, r3, r4
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 8008888:	4630      	mov	r0, r6
        area_tmp.y2 -= r;
 800888a:	f8ad 4006 	strh.w	r4, [sp, #6]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 800888e:	f003 ffe3 	bl	800c858 <lv_area_is_in>
 8008892:	b900      	cbnz	r0, 8008896 <lv_obj_design+0x80>
        if(lv_area_is_in(mask_p, &obj->coords) == false) return false;
 8008894:	2000      	movs	r0, #0
}
 8008896:	b002      	add	sp, #8
 8008898:	bd70      	pop	{r4, r5, r6, pc}
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 800889a:	b95a      	cbnz	r2, 80088b4 <lv_obj_design+0x9e>
        const lv_style_t * style = lv_obj_get_style(obj);
 800889c:	f7ff ff58 	bl	8008750 <lv_obj_get_style>
 80088a0:	4602      	mov	r2, r0
        lv_draw_rect(&obj->coords, mask_p, style, lv_obj_get_opa_scale(obj));
 80088a2:	4620      	mov	r0, r4
 80088a4:	f7ff ffab 	bl	80087fe <lv_obj_get_opa_scale>
 80088a8:	4631      	mov	r1, r6
 80088aa:	4603      	mov	r3, r0
 80088ac:	f104 0010 	add.w	r0, r4, #16
 80088b0:	f001 f9be 	bl	8009c30 <lv_draw_rect>
    return true;
 80088b4:	2001      	movs	r0, #1
 80088b6:	e7ee      	b.n	8008896 <lv_obj_design+0x80>

080088b8 <lv_obj_is_focused>:
{
 80088b8:	b510      	push	{r4, lr}
 80088ba:	4604      	mov	r4, r0
    if(obj->group_p) {
 80088bc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80088be:	b120      	cbz	r0, 80088ca <lv_obj_is_focused+0x12>
        if(lv_group_get_focused(obj->group_p) == obj) return true;
 80088c0:	f7ff fbeb 	bl	800809a <lv_group_get_focused>
 80088c4:	1a23      	subs	r3, r4, r0
 80088c6:	4258      	negs	r0, r3
 80088c8:	4158      	adcs	r0, r3
}
 80088ca:	bd10      	pop	{r4, pc}

080088cc <lv_refr_vdb_flush>:

/**
 * Flush the content of the VDB
 */
static void lv_refr_vdb_flush(void)
{
 80088cc:	b538      	push	{r3, r4, r5, lr}
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 80088ce:	4d10      	ldr	r5, [pc, #64]	; (8008910 <lv_refr_vdb_flush+0x44>)
 80088d0:	6828      	ldr	r0, [r5, #0]
 80088d2:	f003 fe55 	bl	800c580 <lv_disp_get_buf>
 80088d6:	4604      	mov	r4, r0

    /*In double buffered mode wait until the other buffer is flushed before flushing the current
     * one*/
    if(lv_disp_is_double_buf(disp_refr)) {
 80088d8:	6828      	ldr	r0, [r5, #0]
 80088da:	f003 fe53 	bl	800c584 <lv_disp_is_double_buf>
 80088de:	b110      	cbz	r0, 80088e6 <lv_refr_vdb_flush+0x1a>
        while(vdb->flushing)
 80088e0:	69a3      	ldr	r3, [r4, #24]
 80088e2:	07db      	lsls	r3, r3, #31
 80088e4:	d4fc      	bmi.n	80088e0 <lv_refr_vdb_flush+0x14>
            ;
    }

    vdb->flushing = 1;
 80088e6:	7e23      	ldrb	r3, [r4, #24]
    return disp_refr;
 80088e8:	6828      	ldr	r0, [r5, #0]
    vdb->flushing = 1;
 80088ea:	f043 0301 	orr.w	r3, r3, #1
 80088ee:	7623      	strb	r3, [r4, #24]

    /*Flush the rendered content to the display*/
    lv_disp_t * disp = lv_refr_get_disp_refreshing();
    if(disp->driver.flush_cb) disp->driver.flush_cb(&disp->driver, &vdb->area, vdb->buf_act);
 80088f0:	68c3      	ldr	r3, [r0, #12]
 80088f2:	b11b      	cbz	r3, 80088fc <lv_refr_vdb_flush+0x30>
 80088f4:	68a2      	ldr	r2, [r4, #8]
 80088f6:	f104 0110 	add.w	r1, r4, #16
 80088fa:	4798      	blx	r3

    if(vdb->buf1 && vdb->buf2) {
 80088fc:	6823      	ldr	r3, [r4, #0]
 80088fe:	b133      	cbz	r3, 800890e <lv_refr_vdb_flush+0x42>
 8008900:	6862      	ldr	r2, [r4, #4]
 8008902:	b122      	cbz	r2, 800890e <lv_refr_vdb_flush+0x42>
        if(vdb->buf_act == vdb->buf1)
 8008904:	68a1      	ldr	r1, [r4, #8]
            vdb->buf_act = vdb->buf2;
 8008906:	428b      	cmp	r3, r1
 8008908:	bf08      	it	eq
 800890a:	4613      	moveq	r3, r2
 800890c:	60a3      	str	r3, [r4, #8]
 800890e:	bd38      	pop	{r3, r4, r5, pc}
 8008910:	200041e0 	.word	0x200041e0

08008914 <lv_refr_get_top_obj>:
{
 8008914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008916:	460c      	mov	r4, r1
    if(lv_area_is_in(area_p, &obj->coords) && obj->hidden == 0) {
 8008918:	3110      	adds	r1, #16
{
 800891a:	4606      	mov	r6, r0
    if(lv_area_is_in(area_p, &obj->coords) && obj->hidden == 0) {
 800891c:	f003 ff9c 	bl	800c858 <lv_area_is_in>
 8008920:	b908      	cbnz	r0, 8008926 <lv_refr_get_top_obj+0x12>
    lv_obj_t * found_p = NULL;
 8008922:	2000      	movs	r0, #0
 8008924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(lv_area_is_in(area_p, &obj->coords) && obj->hidden == 0) {
 8008926:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800892a:	06db      	lsls	r3, r3, #27
 800892c:	d4f9      	bmi.n	8008922 <lv_refr_get_top_obj+0xe>
        LV_LL_READ(obj->child_ll, i)
 800892e:	1d27      	adds	r7, r4, #4
 8008930:	4638      	mov	r0, r7
 8008932:	f004 f8f2 	bl	800cb1a <lv_ll_get_head>
 8008936:	4605      	mov	r5, r0
 8008938:	b998      	cbnz	r0, 8008962 <lv_refr_get_top_obj+0x4e>
            const lv_style_t * style = lv_obj_get_style(obj);
 800893a:	4620      	mov	r0, r4
 800893c:	f7ff ff08 	bl	8008750 <lv_obj_get_style>
            if(style->body.opa == LV_OPA_COVER && obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK) != false &&
 8008940:	7a03      	ldrb	r3, [r0, #8]
 8008942:	2bff      	cmp	r3, #255	; 0xff
 8008944:	d1ed      	bne.n	8008922 <lv_refr_get_top_obj+0xe>
 8008946:	6a23      	ldr	r3, [r4, #32]
 8008948:	2202      	movs	r2, #2
 800894a:	4631      	mov	r1, r6
 800894c:	4620      	mov	r0, r4
 800894e:	4798      	blx	r3
 8008950:	2800      	cmp	r0, #0
 8008952:	d0e6      	beq.n	8008922 <lv_refr_get_top_obj+0xe>
               lv_obj_get_opa_scale(obj) == LV_OPA_COVER) {
 8008954:	4620      	mov	r0, r4
 8008956:	f7ff ff52 	bl	80087fe <lv_obj_get_opa_scale>
            if(style->body.opa == LV_OPA_COVER && obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK) != false &&
 800895a:	28ff      	cmp	r0, #255	; 0xff
 800895c:	d1e1      	bne.n	8008922 <lv_refr_get_top_obj+0xe>
 800895e:	4620      	mov	r0, r4
    return found_p;
 8008960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            found_p = lv_refr_get_top_obj(area_p, i);
 8008962:	4629      	mov	r1, r5
 8008964:	4630      	mov	r0, r6
 8008966:	f7ff ffd5 	bl	8008914 <lv_refr_get_top_obj>
            if(found_p != NULL) {
 800896a:	b920      	cbnz	r0, 8008976 <lv_refr_get_top_obj+0x62>
        LV_LL_READ(obj->child_ll, i)
 800896c:	4629      	mov	r1, r5
 800896e:	4638      	mov	r0, r7
 8008970:	f004 f8d9 	bl	800cb26 <lv_ll_get_next>
 8008974:	e7df      	b.n	8008936 <lv_refr_get_top_obj+0x22>
}
 8008976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008978 <lv_refr_obj>:
{
 8008978:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(obj->hidden != 0) return;
 800897a:	f890 6030 	ldrb.w	r6, [r0, #48]	; 0x30
 800897e:	f016 0610 	ands.w	r6, r6, #16
{
 8008982:	b08b      	sub	sp, #44	; 0x2c
 8008984:	4604      	mov	r4, r0
 8008986:	460f      	mov	r7, r1
    if(obj->hidden != 0) return;
 8008988:	d139      	bne.n	80089fe <lv_refr_obj+0x86>
    lv_coord_t ext_size = obj->ext_draw_pad;
 800898a:	f9b0 5034 	ldrsh.w	r5, [r0, #52]	; 0x34
    lv_obj_get_coords(obj, &obj_area);
 800898e:	a904      	add	r1, sp, #16
 8008990:	f7ff fed8 	bl	8008744 <lv_obj_get_coords>
    obj_area.x1 -= ext_size;
 8008994:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8008998:	b2ab      	uxth	r3, r5
 800899a:	1ad2      	subs	r2, r2, r3
 800899c:	f8ad 2010 	strh.w	r2, [sp, #16]
    obj_area.y1 -= ext_size;
 80089a0:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80089a4:	1ad2      	subs	r2, r2, r3
 80089a6:	f8ad 2012 	strh.w	r2, [sp, #18]
    obj_area.x2 += ext_size;
 80089aa:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80089ae:	441a      	add	r2, r3
 80089b0:	f8ad 2014 	strh.w	r2, [sp, #20]
    obj_area.y2 += ext_size;
 80089b4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    union_ok = lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 80089b8:	4639      	mov	r1, r7
    obj_area.y2 += ext_size;
 80089ba:	4413      	add	r3, r2
    union_ok = lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 80089bc:	a802      	add	r0, sp, #8
 80089be:	aa04      	add	r2, sp, #16
    obj_area.y2 += ext_size;
 80089c0:	f8ad 3016 	strh.w	r3, [sp, #22]
    union_ok = lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 80089c4:	f003 fedf 	bl	800c786 <lv_area_intersect>
    if(union_ok != false) {
 80089c8:	b1c8      	cbz	r0, 80089fe <lv_refr_obj+0x86>
        obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_MAIN);
 80089ca:	4632      	mov	r2, r6
 80089cc:	6a23      	ldr	r3, [r4, #32]
 80089ce:	a902      	add	r1, sp, #8
 80089d0:	4620      	mov	r0, r4
 80089d2:	4798      	blx	r3
        lv_obj_get_coords(obj, &obj_area);
 80089d4:	a904      	add	r1, sp, #16
 80089d6:	4620      	mov	r0, r4
 80089d8:	f7ff feb4 	bl	8008744 <lv_obj_get_coords>
        union_ok = lv_area_intersect(&obj_mask, mask_ori_p, &obj_area);
 80089dc:	aa04      	add	r2, sp, #16
 80089de:	4639      	mov	r1, r7
 80089e0:	4668      	mov	r0, sp
 80089e2:	f003 fed0 	bl	800c786 <lv_area_intersect>
        if(union_ok != false) {
 80089e6:	b128      	cbz	r0, 80089f4 <lv_refr_obj+0x7c>
            LV_LL_READ_BACK(obj->child_ll, child_p)
 80089e8:	1d26      	adds	r6, r4, #4
 80089ea:	4630      	mov	r0, r6
 80089ec:	f004 f898 	bl	800cb20 <lv_ll_get_tail>
 80089f0:	4605      	mov	r5, r0
 80089f2:	b930      	cbnz	r0, 8008a02 <lv_refr_obj+0x8a>
        obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_POST);
 80089f4:	6a23      	ldr	r3, [r4, #32]
 80089f6:	2201      	movs	r2, #1
 80089f8:	a902      	add	r1, sp, #8
 80089fa:	4620      	mov	r0, r4
 80089fc:	4798      	blx	r3
}
 80089fe:	b00b      	add	sp, #44	; 0x2c
 8008a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
                lv_obj_get_coords(child_p, &child_area);
 8008a02:	a908      	add	r1, sp, #32
 8008a04:	4628      	mov	r0, r5
 8008a06:	f7ff fe9d 	bl	8008744 <lv_obj_get_coords>
                child_area.x1 -= ext_size;
 8008a0a:	8eab      	ldrh	r3, [r5, #52]	; 0x34
 8008a0c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8008a10:	1ad2      	subs	r2, r2, r3
 8008a12:	f8ad 2020 	strh.w	r2, [sp, #32]
                child_area.y1 -= ext_size;
 8008a16:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8008a1a:	1ad2      	subs	r2, r2, r3
 8008a1c:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
                child_area.x2 += ext_size;
 8008a20:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8008a24:	441a      	add	r2, r3
 8008a26:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
                child_area.y2 += ext_size;
 8008a2a:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
                union_ok = lv_area_intersect(&mask_child, &obj_mask, &child_area);
 8008a2e:	4669      	mov	r1, sp
                child_area.y2 += ext_size;
 8008a30:	4413      	add	r3, r2
                union_ok = lv_area_intersect(&mask_child, &obj_mask, &child_area);
 8008a32:	a806      	add	r0, sp, #24
 8008a34:	aa08      	add	r2, sp, #32
                child_area.y2 += ext_size;
 8008a36:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
                union_ok = lv_area_intersect(&mask_child, &obj_mask, &child_area);
 8008a3a:	f003 fea4 	bl	800c786 <lv_area_intersect>
                if(union_ok) {
 8008a3e:	b118      	cbz	r0, 8008a48 <lv_refr_obj+0xd0>
                    lv_refr_obj(child_p, &mask_child);
 8008a40:	a906      	add	r1, sp, #24
 8008a42:	4628      	mov	r0, r5
 8008a44:	f7ff ff98 	bl	8008978 <lv_refr_obj>
            LV_LL_READ_BACK(obj->child_ll, child_p)
 8008a48:	4629      	mov	r1, r5
 8008a4a:	4630      	mov	r0, r6
 8008a4c:	f004 f870 	bl	800cb30 <lv_ll_get_prev>
 8008a50:	e7ce      	b.n	80089f0 <lv_refr_obj+0x78>
	...

08008a54 <lv_refr_obj_and_children>:
{
 8008a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a56:	460e      	mov	r6, r1
    if(top_p == NULL) top_p = lv_disp_get_scr_act(disp_refr);
 8008a58:	4605      	mov	r5, r0
 8008a5a:	b920      	cbnz	r0, 8008a66 <lv_refr_obj_and_children+0x12>
 8008a5c:	4b12      	ldr	r3, [pc, #72]	; (8008aa8 <lv_refr_obj_and_children+0x54>)
 8008a5e:	6818      	ldr	r0, [r3, #0]
 8008a60:	f7ff f9d8 	bl	8007e14 <lv_disp_get_scr_act>
 8008a64:	4605      	mov	r5, r0
    lv_refr_obj(top_p, mask_p);
 8008a66:	4628      	mov	r0, r5
 8008a68:	4631      	mov	r1, r6
 8008a6a:	f7ff ff85 	bl	8008978 <lv_refr_obj>
    par = lv_obj_get_parent(top_p);
 8008a6e:	4628      	mov	r0, r5
 8008a70:	f7ff fe3a 	bl	80086e8 <lv_obj_get_parent>
        par = lv_obj_get_parent(par);
 8008a74:	4604      	mov	r4, r0
    while(par != NULL) {
 8008a76:	b900      	cbnz	r0, 8008a7a <lv_refr_obj_and_children+0x26>
}
 8008a78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_obj_t * i = lv_ll_get_prev(&(par->child_ll), border_p);
 8008a7a:	1d27      	adds	r7, r4, #4
            i = lv_ll_get_prev(&(par->child_ll), i);
 8008a7c:	4629      	mov	r1, r5
 8008a7e:	4638      	mov	r0, r7
 8008a80:	f004 f856 	bl	800cb30 <lv_ll_get_prev>
 8008a84:	4605      	mov	r5, r0
        while(i != NULL) {
 8008a86:	b948      	cbnz	r0, 8008a9c <lv_refr_obj_and_children+0x48>
        par->design_cb(par, mask_p, LV_DESIGN_DRAW_POST);
 8008a88:	6a23      	ldr	r3, [r4, #32]
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	4631      	mov	r1, r6
 8008a8e:	4620      	mov	r0, r4
 8008a90:	4798      	blx	r3
        par = lv_obj_get_parent(par);
 8008a92:	4620      	mov	r0, r4
 8008a94:	f7ff fe28 	bl	80086e8 <lv_obj_get_parent>
 8008a98:	4625      	mov	r5, r4
 8008a9a:	e7eb      	b.n	8008a74 <lv_refr_obj_and_children+0x20>
            lv_refr_obj(i, mask_p);
 8008a9c:	4631      	mov	r1, r6
 8008a9e:	4628      	mov	r0, r5
 8008aa0:	f7ff ff6a 	bl	8008978 <lv_refr_obj>
 8008aa4:	e7ea      	b.n	8008a7c <lv_refr_obj_and_children+0x28>
 8008aa6:	bf00      	nop
 8008aa8:	200041e0 	.word	0x200041e0

08008aac <lv_refr_area_part>:
{
 8008aac:	b573      	push	{r0, r1, r4, r5, r6, lr}
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8008aae:	4c18      	ldr	r4, [pc, #96]	; (8008b10 <lv_refr_area_part+0x64>)
{
 8008ab0:	4606      	mov	r6, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8008ab2:	6820      	ldr	r0, [r4, #0]
 8008ab4:	f003 fd64 	bl	800c580 <lv_disp_get_buf>
 8008ab8:	4605      	mov	r5, r0
    if(lv_disp_is_double_buf(disp_refr) == false) {
 8008aba:	6820      	ldr	r0, [r4, #0]
 8008abc:	f003 fd62 	bl	800c584 <lv_disp_is_double_buf>
 8008ac0:	b910      	cbnz	r0, 8008ac8 <lv_refr_area_part+0x1c>
        while(vdb->flushing)
 8008ac2:	69ab      	ldr	r3, [r5, #24]
 8008ac4:	07db      	lsls	r3, r3, #31
 8008ac6:	d4fc      	bmi.n	8008ac2 <lv_refr_area_part+0x16>
    lv_area_intersect(&start_mask, area_p, &vdb->area);
 8008ac8:	f105 0210 	add.w	r2, r5, #16
 8008acc:	4631      	mov	r1, r6
 8008ace:	4668      	mov	r0, sp
 8008ad0:	f003 fe59 	bl	800c786 <lv_area_intersect>
    top_p = lv_refr_get_top_obj(&start_mask, lv_disp_get_scr_act(disp_refr));
 8008ad4:	6820      	ldr	r0, [r4, #0]
 8008ad6:	f7ff f99d 	bl	8007e14 <lv_disp_get_scr_act>
 8008ada:	4601      	mov	r1, r0
 8008adc:	4668      	mov	r0, sp
 8008ade:	f7ff ff19 	bl	8008914 <lv_refr_get_top_obj>
    lv_refr_obj_and_children(top_p, &start_mask);
 8008ae2:	4669      	mov	r1, sp
 8008ae4:	f7ff ffb6 	bl	8008a54 <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_disp_get_layer_top(disp_refr), &start_mask);
 8008ae8:	6820      	ldr	r0, [r4, #0]
 8008aea:	f7ff f9a9 	bl	8007e40 <lv_disp_get_layer_top>
 8008aee:	4669      	mov	r1, sp
 8008af0:	f7ff ffb0 	bl	8008a54 <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_disp_get_layer_sys(disp_refr), &start_mask);
 8008af4:	6820      	ldr	r0, [r4, #0]
 8008af6:	f7ff f9b9 	bl	8007e6c <lv_disp_get_layer_sys>
 8008afa:	4669      	mov	r1, sp
 8008afc:	f7ff ffaa 	bl	8008a54 <lv_refr_obj_and_children>
    if(lv_disp_is_true_double_buf(disp_refr) == false) {
 8008b00:	6820      	ldr	r0, [r4, #0]
 8008b02:	f003 fd47 	bl	800c594 <lv_disp_is_true_double_buf>
 8008b06:	b908      	cbnz	r0, 8008b0c <lv_refr_area_part+0x60>
        lv_refr_vdb_flush();
 8008b08:	f7ff fee0 	bl	80088cc <lv_refr_vdb_flush>
}
 8008b0c:	b002      	add	sp, #8
 8008b0e:	bd70      	pop	{r4, r5, r6, pc}
 8008b10:	200041e0 	.word	0x200041e0

08008b14 <lv_refr_init>:
{
 8008b14:	4770      	bx	lr
	...

08008b18 <lv_inv_area>:
{
 8008b18:	b530      	push	{r4, r5, lr}
 8008b1a:	460d      	mov	r5, r1
 8008b1c:	b085      	sub	sp, #20
    if(!disp) disp = lv_disp_get_default();
 8008b1e:	4604      	mov	r4, r0
 8008b20:	b920      	cbnz	r0, 8008b2c <lv_inv_area+0x14>
 8008b22:	f003 fcf7 	bl	800c514 <lv_disp_get_default>
    if(!disp) return;
 8008b26:	4604      	mov	r4, r0
 8008b28:	2800      	cmp	r0, #0
 8008b2a:	d046      	beq.n	8008bba <lv_inv_area+0xa2>
    if(area_p == NULL) {
 8008b2c:	b935      	cbnz	r5, 8008b3c <lv_inv_area+0x24>
        disp->inv_p = 0;
 8008b2e:	f8b4 3168 	ldrh.w	r3, [r4, #360]	; 0x168
 8008b32:	f365 0309 	bfi	r3, r5, #0, #10
        disp->inv_p++;
 8008b36:	f8a4 3168 	strh.w	r3, [r4, #360]	; 0x168
 8008b3a:	e03e      	b.n	8008bba <lv_inv_area+0xa2>
    scr_area.x1 = 0;
 8008b3c:	2300      	movs	r3, #0
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 8008b3e:	4620      	mov	r0, r4
    scr_area.x1 = 0;
 8008b40:	f8ad 3000 	strh.w	r3, [sp]
    scr_area.y1 = 0;
 8008b44:	f8ad 3002 	strh.w	r3, [sp, #2]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 8008b48:	f003 fcea 	bl	800c520 <lv_disp_get_hor_res>
 8008b4c:	3801      	subs	r0, #1
 8008b4e:	f8ad 0004 	strh.w	r0, [sp, #4]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
 8008b52:	4620      	mov	r0, r4
 8008b54:	f003 fcf4 	bl	800c540 <lv_disp_get_ver_res>
 8008b58:	3801      	subs	r0, #1
 8008b5a:	f8ad 0006 	strh.w	r0, [sp, #6]
    suc = lv_area_intersect(&com_area, area_p, &scr_area);
 8008b5e:	466a      	mov	r2, sp
 8008b60:	4629      	mov	r1, r5
 8008b62:	a802      	add	r0, sp, #8
 8008b64:	f003 fe0f 	bl	800c786 <lv_area_intersect>
    if(suc != false) {
 8008b68:	b338      	cbz	r0, 8008bba <lv_inv_area+0xa2>
        if(disp->driver.rounder_cb) disp->driver.rounder_cb(&disp_refr->driver, &com_area);
 8008b6a:	6923      	ldr	r3, [r4, #16]
 8008b6c:	b11b      	cbz	r3, 8008b76 <lv_inv_area+0x5e>
 8008b6e:	4a19      	ldr	r2, [pc, #100]	; (8008bd4 <lv_inv_area+0xbc>)
 8008b70:	a902      	add	r1, sp, #8
 8008b72:	6810      	ldr	r0, [r2, #0]
 8008b74:	4798      	blx	r3
{
 8008b76:	2500      	movs	r5, #0
        for(i = 0; i < disp->inv_p; i++) {
 8008b78:	f8b4 2168 	ldrh.w	r2, [r4, #360]	; 0x168
 8008b7c:	b2a9      	uxth	r1, r5
 8008b7e:	f3c2 0309 	ubfx	r3, r2, #0, #10
 8008b82:	4299      	cmp	r1, r3
 8008b84:	db10      	blt.n	8008ba8 <lv_inv_area+0x90>
        if(disp->inv_p < LV_INV_BUF_SIZE) {
 8008b86:	2b1f      	cmp	r3, #31
 8008b88:	dc19      	bgt.n	8008bbe <lv_inv_area+0xa6>
            lv_area_copy(&disp->inv_areas[disp->inv_p], &com_area);
 8008b8a:	f103 0209 	add.w	r2, r3, #9
 8008b8e:	ab02      	add	r3, sp, #8
 8008b90:	cb03      	ldmia	r3!, {r0, r1}
 8008b92:	eb04 05c2 	add.w	r5, r4, r2, lsl #3
 8008b96:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 8008b9a:	6069      	str	r1, [r5, #4]
        disp->inv_p++;
 8008b9c:	f8b4 3168 	ldrh.w	r3, [r4, #360]	; 0x168
 8008ba0:	1c5a      	adds	r2, r3, #1
 8008ba2:	f362 0309 	bfi	r3, r2, #0, #10
 8008ba6:	e7c6      	b.n	8008b36 <lv_inv_area+0x1e>
            if(lv_area_is_in(&com_area, &disp->inv_areas[i]) != false) return;
 8008ba8:	3109      	adds	r1, #9
 8008baa:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8008bae:	a802      	add	r0, sp, #8
 8008bb0:	f003 fe52 	bl	800c858 <lv_area_is_in>
 8008bb4:	3501      	adds	r5, #1
 8008bb6:	2800      	cmp	r0, #0
 8008bb8:	d0de      	beq.n	8008b78 <lv_inv_area+0x60>
}
 8008bba:	b005      	add	sp, #20
 8008bbc:	bd30      	pop	{r4, r5, pc}
            disp->inv_p = 0;
 8008bbe:	4613      	mov	r3, r2
 8008bc0:	f36f 0309 	bfc	r3, #0, #10
 8008bc4:	f8a4 3168 	strh.w	r3, [r4, #360]	; 0x168
 8008bc8:	466b      	mov	r3, sp
 8008bca:	cb03      	ldmia	r3!, {r0, r1}
 8008bcc:	64a0      	str	r0, [r4, #72]	; 0x48
 8008bce:	64e1      	str	r1, [r4, #76]	; 0x4c
 8008bd0:	e7e4      	b.n	8008b9c <lv_inv_area+0x84>
 8008bd2:	bf00      	nop
 8008bd4:	200041e0 	.word	0x200041e0

08008bd8 <lv_refr_get_disp_refreshing>:
}
 8008bd8:	4b01      	ldr	r3, [pc, #4]	; (8008be0 <lv_refr_get_disp_refreshing+0x8>)
 8008bda:	6818      	ldr	r0, [r3, #0]
 8008bdc:	4770      	bx	lr
 8008bde:	bf00      	nop
 8008be0:	200041e0 	.word	0x200041e0

08008be4 <lv_disp_refr_task>:
{
 8008be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008be8:	b089      	sub	sp, #36	; 0x24
 8008bea:	4604      	mov	r4, r0
    uint32_t start = lv_tick_get();
 8008bec:	f003 fcf8 	bl	800c5e0 <lv_tick_get>
    disp_refr = task->user_data;
 8008bf0:	4bba      	ldr	r3, [pc, #744]	; (8008edc <lv_disp_refr_task+0x2f8>)
 8008bf2:	68e2      	ldr	r2, [r4, #12]
    uint32_t start = lv_tick_get();
 8008bf4:	9002      	str	r0, [sp, #8]
    disp_refr = task->user_data;
 8008bf6:	601a      	str	r2, [r3, #0]
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 8008bf8:	2600      	movs	r6, #0
 8008bfa:	469b      	mov	fp, r3
                disp_refr->inv_area_joined[join_from] = 1;
 8008bfc:	2701      	movs	r7, #1
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 8008bfe:	f8db 3000 	ldr.w	r3, [fp]
 8008c02:	f8b3 2168 	ldrh.w	r2, [r3, #360]	; 0x168
 8008c06:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008c0a:	4296      	cmp	r6, r2
 8008c0c:	d330      	bcc.n	8008c70 <lv_disp_refr_task+0x8c>
    px_num = 0;
 8008c0e:	4bb4      	ldr	r3, [pc, #720]	; (8008ee0 <lv_disp_refr_task+0x2fc>)
 8008c10:	9300      	str	r3, [sp, #0]
 8008c12:	2500      	movs	r5, #0
 8008c14:	601d      	str	r5, [r3, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
 8008c16:	f8db 4000 	ldr.w	r4, [fp]
 8008c1a:	f8b4 3168 	ldrh.w	r3, [r4, #360]	; 0x168
 8008c1e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8008c22:	4295      	cmp	r5, r2
 8008c24:	d36d      	bcc.n	8008d02 <lv_disp_refr_task+0x11e>
    if(disp_refr->inv_p != 0) {
 8008c26:	b1f2      	cbz	r2, 8008c66 <lv_disp_refr_task+0x82>
        if(lv_disp_is_true_double_buf(disp_refr)) {
 8008c28:	4620      	mov	r0, r4
 8008c2a:	f003 fcb3 	bl	800c594 <lv_disp_is_true_double_buf>
 8008c2e:	2800      	cmp	r0, #0
 8008c30:	f040 812b 	bne.w	8008e8a <lv_disp_refr_task+0x2a6>
        memset(disp_refr->inv_areas, 0, sizeof(disp_refr->inv_areas));
 8008c34:	f8db 4000 	ldr.w	r4, [fp]
 8008c38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008c3c:	2100      	movs	r1, #0
 8008c3e:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8008c42:	f004 fd92 	bl	800d76a <memset>
        memset(disp_refr->inv_area_joined, 0, sizeof(disp_refr->inv_area_joined));
 8008c46:	2220      	movs	r2, #32
 8008c48:	2100      	movs	r1, #0
 8008c4a:	f504 70a4 	add.w	r0, r4, #328	; 0x148
 8008c4e:	f004 fd8c 	bl	800d76a <memset>
        disp_refr->inv_p = 0;
 8008c52:	f8b4 3168 	ldrh.w	r3, [r4, #360]	; 0x168
        if(disp_refr->driver.monitor_cb) {
 8008c56:	69a5      	ldr	r5, [r4, #24]
        disp_refr->inv_p = 0;
 8008c58:	f36f 0309 	bfc	r3, #0, #10
 8008c5c:	f8a4 3168 	strh.w	r3, [r4, #360]	; 0x168
        if(disp_refr->driver.monitor_cb) {
 8008c60:	2d00      	cmp	r5, #0
 8008c62:	f040 8166 	bne.w	8008f32 <lv_disp_refr_task+0x34e>
    lv_draw_free_buf();
 8008c66:	f000 fd57 	bl	8009718 <lv_draw_free_buf>
}
 8008c6a:	b009      	add	sp, #36	; 0x24
 8008c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
 8008c70:	4433      	add	r3, r6
 8008c72:	f893 4148 	ldrb.w	r4, [r3, #328]	; 0x148
 8008c76:	b954      	cbnz	r4, 8008c8e <lv_disp_refr_task+0xaa>
 8008c78:	f106 0509 	add.w	r5, r6, #9
 8008c7c:	00ed      	lsls	r5, r5, #3
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 8008c7e:	f8db 0000 	ldr.w	r0, [fp]
 8008c82:	f8b0 3168 	ldrh.w	r3, [r0, #360]	; 0x168
 8008c86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c8a:	429c      	cmp	r4, r3
 8008c8c:	d301      	bcc.n	8008c92 <lv_disp_refr_task+0xae>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 8008c8e:	3601      	adds	r6, #1
 8008c90:	e7b5      	b.n	8008bfe <lv_disp_refr_task+0x1a>
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
 8008c92:	1903      	adds	r3, r0, r4
 8008c94:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 8008c98:	bb8b      	cbnz	r3, 8008cfe <lv_disp_refr_task+0x11a>
 8008c9a:	42a6      	cmp	r6, r4
 8008c9c:	d02f      	beq.n	8008cfe <lv_disp_refr_task+0x11a>
 8008c9e:	f104 0809 	add.w	r8, r4, #9
 8008ca2:	ea4f 08c8 	mov.w	r8, r8, lsl #3
            if(lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
 8008ca6:	eb00 0108 	add.w	r1, r0, r8
 8008caa:	4428      	add	r0, r5
 8008cac:	f003 fdb7 	bl	800c81e <lv_area_is_on>
 8008cb0:	b328      	cbz	r0, 8008cfe <lv_disp_refr_task+0x11a>
            lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
 8008cb2:	f8db 1000 	ldr.w	r1, [fp]
 8008cb6:	a806      	add	r0, sp, #24
 8008cb8:	eb01 0208 	add.w	r2, r1, r8
 8008cbc:	4429      	add	r1, r5
 8008cbe:	f003 fd8c 	bl	800c7da <lv_area_join>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 8008cc2:	a806      	add	r0, sp, #24
 8008cc4:	f003 fd51 	bl	800c76a <lv_area_get_size>
 8008cc8:	4682      	mov	sl, r0
 8008cca:	f8db 0000 	ldr.w	r0, [fp]
 8008cce:	4428      	add	r0, r5
 8008cd0:	f003 fd4b 	bl	800c76a <lv_area_get_size>
 8008cd4:	4681      	mov	r9, r0
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
 8008cd6:	f8db 0000 	ldr.w	r0, [fp]
 8008cda:	4440      	add	r0, r8
 8008cdc:	f003 fd45 	bl	800c76a <lv_area_get_size>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 8008ce0:	4448      	add	r0, r9
 8008ce2:	4582      	cmp	sl, r0
 8008ce4:	d20b      	bcs.n	8008cfe <lv_disp_refr_task+0x11a>
 8008ce6:	aa06      	add	r2, sp, #24
 8008ce8:	ca03      	ldmia	r2!, {r0, r1}
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
 8008cea:	f8db 3000 	ldr.w	r3, [fp]
 8008cee:	5158      	str	r0, [r3, r5]
 8008cf0:	eb03 0e05 	add.w	lr, r3, r5
                disp_refr->inv_area_joined[join_from] = 1;
 8008cf4:	4423      	add	r3, r4
 8008cf6:	f8ce 1004 	str.w	r1, [lr, #4]
 8008cfa:	f883 7148 	strb.w	r7, [r3, #328]	; 0x148
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 8008cfe:	3401      	adds	r4, #1
 8008d00:	e7bd      	b.n	8008c7e <lv_disp_refr_task+0x9a>
        if(disp_refr->inv_area_joined[i] == 0) {
 8008d02:	1963      	adds	r3, r4, r5
 8008d04:	f893 6148 	ldrb.w	r6, [r3, #328]	; 0x148
 8008d08:	2e00      	cmp	r6, #0
 8008d0a:	f040 8083 	bne.w	8008e14 <lv_disp_refr_task+0x230>
 8008d0e:	f105 0909 	add.w	r9, r5, #9
 8008d12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
    if(lv_disp_is_true_double_buf(disp_refr)) {
 8008d16:	4620      	mov	r0, r4
 8008d18:	9301      	str	r3, [sp, #4]
            lv_refr_area(&disp_refr->inv_areas[i]);
 8008d1a:	eb04 0803 	add.w	r8, r4, r3
    if(lv_disp_is_true_double_buf(disp_refr)) {
 8008d1e:	f003 fc39 	bl	800c594 <lv_disp_is_true_double_buf>
 8008d22:	b1b0      	cbz	r0, 8008d52 <lv_disp_refr_task+0x16e>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8008d24:	f8db 0000 	ldr.w	r0, [fp]
 8008d28:	f003 fc2a 	bl	800c580 <lv_disp_get_buf>
 8008d2c:	4604      	mov	r4, r0
        vdb->area.x1        = 0;
 8008d2e:	8206      	strh	r6, [r0, #16]
        vdb->area.x2        = lv_disp_get_hor_res(disp_refr) - 1;
 8008d30:	f8db 0000 	ldr.w	r0, [fp]
 8008d34:	f003 fbf4 	bl	800c520 <lv_disp_get_hor_res>
 8008d38:	3801      	subs	r0, #1
 8008d3a:	82a0      	strh	r0, [r4, #20]
        vdb->area.y1        = 0;
 8008d3c:	8266      	strh	r6, [r4, #18]
        vdb->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
 8008d3e:	f8db 0000 	ldr.w	r0, [fp]
 8008d42:	f003 fbfd 	bl	800c540 <lv_disp_get_ver_res>
 8008d46:	3801      	subs	r0, #1
 8008d48:	82e0      	strh	r0, [r4, #22]
            lv_refr_area_part(area_p);
 8008d4a:	4640      	mov	r0, r8
 8008d4c:	f7ff feae 	bl	8008aac <lv_refr_area_part>
 8008d50:	e053      	b.n	8008dfa <lv_disp_refr_task+0x216>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8008d52:	f8db 0000 	ldr.w	r0, [fp]
 8008d56:	f003 fc13 	bl	800c580 <lv_disp_get_buf>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return area_p->x2 - area_p->x1 + 1;
 8008d5a:	f8b8 6004 	ldrh.w	r6, [r8, #4]
 8008d5e:	f834 3039 	ldrh.w	r3, [r4, r9, lsl #3]
 8008d62:	f9b8 a006 	ldrsh.w	sl, [r8, #6]
 8008d66:	3601      	adds	r6, #1
 8008d68:	1af6      	subs	r6, r6, r3
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 8008d6a:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 8008d6e:	4607      	mov	r7, r0
 8008d70:	f10a 0901 	add.w	r9, sl, #1
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? y2 = lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 8008d74:	f8db 0000 	ldr.w	r0, [fp]
 8008d78:	eba9 0903 	sub.w	r9, r9, r3
 8008d7c:	f003 fbe0 	bl	800c540 <lv_disp_get_ver_res>
        lv_coord_t y2 =
 8008d80:	4582      	cmp	sl, r0
    return area_p->x2 - area_p->x1 + 1;
 8008d82:	b236      	sxth	r6, r6
    return area_p->y2 - area_p->y1 + 1;
 8008d84:	fa0f f989 	sxth.w	r9, r9
 8008d88:	db46      	blt.n	8008e18 <lv_disp_refr_task+0x234>
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? y2 = lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 8008d8a:	f8db 0000 	ldr.w	r0, [fp]
 8008d8e:	f003 fbd7 	bl	800c540 <lv_disp_get_ver_res>
 8008d92:	3801      	subs	r0, #1
 8008d94:	fa0f fa80 	sxth.w	sl, r0
        int32_t max_row = (uint32_t)vdb->size / w;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	fbb3 f6f6 	udiv	r6, r3, r6
        if(disp_refr->driver.rounder_cb) {
 8008d9e:	f8db 3000 	ldr.w	r3, [fp]
 8008da2:	691b      	ldr	r3, [r3, #16]
 8008da4:	45b1      	cmp	r9, r6
 8008da6:	bfa8      	it	ge
 8008da8:	46b1      	movge	r9, r6
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d03a      	beq.n	8008e24 <lv_disp_refr_task+0x240>
            tmp.x1 = 0;
 8008dae:	f04f 0300 	mov.w	r3, #0
            lv_coord_t y_tmp = max_row - 1;
 8008db2:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
            tmp.x1 = 0;
 8008db6:	f8ad 3018 	strh.w	r3, [sp, #24]
            tmp.x2 = 0;
 8008dba:	f8ad 301c 	strh.w	r3, [sp, #28]
            tmp.y1 = 0;
 8008dbe:	f8ad 301a 	strh.w	r3, [sp, #26]
            lv_coord_t y_tmp = max_row - 1;
 8008dc2:	b236      	sxth	r6, r6
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
 8008dc4:	f8db 0000 	ldr.w	r0, [fp]
                tmp.y2 = y_tmp;
 8008dc8:	f8ad 601e 	strh.w	r6, [sp, #30]
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
 8008dcc:	6903      	ldr	r3, [r0, #16]
 8008dce:	a906      	add	r1, sp, #24
 8008dd0:	4798      	blx	r3
 8008dd2:	f9bd 201e 	ldrsh.w	r2, [sp, #30]
 8008dd6:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8008dda:	3201      	adds	r2, #1
 8008ddc:	1ad3      	subs	r3, r2, r3
                if(lv_area_get_height(&tmp) <= max_row) break;
 8008dde:	b21b      	sxth	r3, r3
 8008de0:	454b      	cmp	r3, r9
 8008de2:	dd1c      	ble.n	8008e1e <lv_disp_refr_task+0x23a>
 8008de4:	3e01      	subs	r6, #1
 8008de6:	b236      	sxth	r6, r6
            } while(y_tmp != 0);
 8008de8:	2e00      	cmp	r6, #0
 8008dea:	d1eb      	bne.n	8008dc4 <lv_disp_refr_task+0x1e0>
                LV_LOG_WARN("Can't set VDB height using the round function. (Wrong round_cb or to "
 8008dec:	4b3d      	ldr	r3, [pc, #244]	; (8008ee4 <lv_disp_refr_task+0x300>)
 8008dee:	493e      	ldr	r1, [pc, #248]	; (8008ee8 <lv_disp_refr_task+0x304>)
 8008df0:	f240 124f 	movw	r2, #335	; 0x14f
 8008df4:	2002      	movs	r0, #2
 8008df6:	f003 ff85 	bl	800cd04 <lv_log_add>
            if(disp_refr->driver.monitor_cb) px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
 8008dfa:	f8db 0000 	ldr.w	r0, [fp]
 8008dfe:	6983      	ldr	r3, [r0, #24]
 8008e00:	b143      	cbz	r3, 8008e14 <lv_disp_refr_task+0x230>
 8008e02:	9b01      	ldr	r3, [sp, #4]
 8008e04:	4418      	add	r0, r3
 8008e06:	f003 fcb0 	bl	800c76a <lv_area_get_size>
 8008e0a:	9b00      	ldr	r3, [sp, #0]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4418      	add	r0, r3
 8008e10:	9b00      	ldr	r3, [sp, #0]
 8008e12:	6018      	str	r0, [r3, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
 8008e14:	3501      	adds	r5, #1
 8008e16:	e6fe      	b.n	8008c16 <lv_disp_refr_task+0x32>
        lv_coord_t y2 =
 8008e18:	f9b8 a006 	ldrsh.w	sl, [r8, #6]
 8008e1c:	e7bc      	b.n	8008d98 <lv_disp_refr_task+0x1b4>
            if(y_tmp == 0) {
 8008e1e:	2e00      	cmp	r6, #0
 8008e20:	d0e4      	beq.n	8008dec <lv_disp_refr_task+0x208>
                max_row = tmp.y2 + 1;
 8008e22:	4691      	mov	r9, r2
 8008e24:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
            vdb->area.y2 = row + max_row - 1;
 8008e28:	fa1f f389 	uxth.w	r3, r9
 8008e2c:	1e59      	subs	r1, r3, #1
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 8008e2e:	f9b4 604a 	ldrsh.w	r6, [r4, #74]	; 0x4a
 8008e32:	9103      	str	r1, [sp, #12]
        lv_coord_t row_last = 0;
 8008e34:	2200      	movs	r2, #0
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 8008e36:	eb06 0109 	add.w	r1, r6, r9
 8008e3a:	3901      	subs	r1, #1
 8008e3c:	4551      	cmp	r1, sl
 8008e3e:	dd0b      	ble.n	8008e58 <lv_disp_refr_task+0x274>
        if(y2 != row_last) {
 8008e40:	4592      	cmp	sl, r2
 8008e42:	d0da      	beq.n	8008dfa <lv_disp_refr_task+0x216>
            vdb->area.x1 = area_p->x1;
 8008e44:	f9b4 3048 	ldrsh.w	r3, [r4, #72]	; 0x48
 8008e48:	823b      	strh	r3, [r7, #16]
            vdb->area.x2 = area_p->x2;
 8008e4a:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	; 0x4c
 8008e4e:	82bb      	strh	r3, [r7, #20]
            vdb->area.y1 = row;
 8008e50:	827e      	strh	r6, [r7, #18]
            vdb->area.y2 = y2;
 8008e52:	f8a7 a016 	strh.w	sl, [r7, #22]
 8008e56:	e778      	b.n	8008d4a <lv_disp_refr_task+0x166>
            vdb->area.x1 = area_p->x1;
 8008e58:	f9b4 1048 	ldrsh.w	r1, [r4, #72]	; 0x48
 8008e5c:	9305      	str	r3, [sp, #20]
 8008e5e:	8239      	strh	r1, [r7, #16]
 8008e60:	9b03      	ldr	r3, [sp, #12]
            vdb->area.x2 = area_p->x2;
 8008e62:	f9b4 104c 	ldrsh.w	r1, [r4, #76]	; 0x4c
            vdb->area.y1 = row;
 8008e66:	827e      	strh	r6, [r7, #18]
 8008e68:	b2b6      	uxth	r6, r6
 8008e6a:	18f2      	adds	r2, r6, r3
 8008e6c:	b212      	sxth	r2, r2
            vdb->area.y2 = row + max_row - 1;
 8008e6e:	4552      	cmp	r2, sl
 8008e70:	bfa8      	it	ge
 8008e72:	4652      	movge	r2, sl
 8008e74:	82fa      	strh	r2, [r7, #22]
            vdb->area.x2 = area_p->x2;
 8008e76:	82b9      	strh	r1, [r7, #20]
            lv_refr_area_part(area_p);
 8008e78:	4640      	mov	r0, r8
            row_last = vdb->area.y2;
 8008e7a:	9204      	str	r2, [sp, #16]
            lv_refr_area_part(area_p);
 8008e7c:	f7ff fe16 	bl	8008aac <lv_refr_area_part>
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 8008e80:	9b05      	ldr	r3, [sp, #20]
 8008e82:	9a04      	ldr	r2, [sp, #16]
 8008e84:	441e      	add	r6, r3
 8008e86:	b236      	sxth	r6, r6
 8008e88:	e7d5      	b.n	8008e36 <lv_disp_refr_task+0x252>
            lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8008e8a:	f8db 0000 	ldr.w	r0, [fp]
 8008e8e:	f003 fb77 	bl	800c580 <lv_disp_get_buf>
 8008e92:	4604      	mov	r4, r0
            lv_refr_vdb_flush();
 8008e94:	f7ff fd1a 	bl	80088cc <lv_refr_vdb_flush>
            while(vdb->flushing)
 8008e98:	69a3      	ldr	r3, [r4, #24]
 8008e9a:	07db      	lsls	r3, r3, #31
 8008e9c:	d4fc      	bmi.n	8008e98 <lv_disp_refr_task+0x2b4>
            uint8_t * buf_act = (uint8_t *)vdb->buf_act;
 8008e9e:	68a3      	ldr	r3, [r4, #8]
            uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
 8008ea0:	6827      	ldr	r7, [r4, #0]
            lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
 8008ea2:	f8db 0000 	ldr.w	r0, [fp]
            uint8_t * buf_act = (uint8_t *)vdb->buf_act;
 8008ea6:	9301      	str	r3, [sp, #4]
            uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
 8008ea8:	42bb      	cmp	r3, r7
 8008eaa:	bf08      	it	eq
 8008eac:	6867      	ldreq	r7, [r4, #4]
            lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
 8008eae:	f003 fb37 	bl	800c520 <lv_disp_get_hor_res>
            for(a = 0; a < disp_refr->inv_p; a++) {
 8008eb2:	2600      	movs	r6, #0
            lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
 8008eb4:	4682      	mov	sl, r0
                        start_offs += hres * sizeof(lv_color_t);
 8008eb6:	ea4f 0940 	mov.w	r9, r0, lsl #1
            for(a = 0; a < disp_refr->inv_p; a++) {
 8008eba:	f8db 1000 	ldr.w	r1, [fp]
 8008ebe:	f8b1 3168 	ldrh.w	r3, [r1, #360]	; 0x168
 8008ec2:	b2b2      	uxth	r2, r6
 8008ec4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	f6bf aeb3 	bge.w	8008c34 <lv_disp_refr_task+0x50>
                if(disp_refr->inv_area_joined[a] == 0) {
 8008ece:	188b      	adds	r3, r1, r2
 8008ed0:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 8008ed4:	b153      	cbz	r3, 8008eec <lv_disp_refr_task+0x308>
 8008ed6:	3601      	adds	r6, #1
 8008ed8:	e7ef      	b.n	8008eba <lv_disp_refr_task+0x2d6>
 8008eda:	bf00      	nop
 8008edc:	200041e0 	.word	0x200041e0
 8008ee0:	200041e4 	.word	0x200041e4
 8008ee4:	080108b9 	.word	0x080108b9
 8008ee8:	08010909 	.word	0x08010909
 8008eec:	eb01 08c2 	add.w	r8, r1, r2, lsl #3
                        (hres * disp_refr->inv_areas[a].y1 + disp_refr->inv_areas[a].x1) * sizeof(lv_color_t);
 8008ef0:	f9b8 3048 	ldrsh.w	r3, [r8, #72]	; 0x48
 8008ef4:	f9b8 504a 	ldrsh.w	r5, [r8, #74]	; 0x4a
    return area_p->x2 - area_p->x1 + 1;
 8008ef8:	f8b8 204c 	ldrh.w	r2, [r8, #76]	; 0x4c
 8008efc:	fb0a 3405 	mla	r4, sl, r5, r3
 8008f00:	f1c3 0301 	rsb	r3, r3, #1
 8008f04:	4413      	add	r3, r2
                    uint32_t line_length = lv_area_get_width(&disp_refr->inv_areas[a]) * sizeof(lv_color_t);
 8008f06:	b21b      	sxth	r3, r3
 8008f08:	005b      	lsls	r3, r3, #1
 8008f0a:	9303      	str	r3, [sp, #12]
 8008f0c:	9b01      	ldr	r3, [sp, #4]
                    uint32_t start_offs =
 8008f0e:	0064      	lsls	r4, r4, #1
 8008f10:	4423      	add	r3, r4
 8008f12:	443c      	add	r4, r7
                    for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
 8008f14:	f9b8 204e 	ldrsh.w	r2, [r8, #78]	; 0x4e
 8008f18:	42aa      	cmp	r2, r5
 8008f1a:	dbdc      	blt.n	8008ed6 <lv_disp_refr_task+0x2f2>
                        memcpy(buf_act + start_offs, buf_ina + start_offs, line_length);
 8008f1c:	4621      	mov	r1, r4
 8008f1e:	4618      	mov	r0, r3
 8008f20:	9a03      	ldr	r2, [sp, #12]
 8008f22:	f004 fc17 	bl	800d754 <memcpy>
 8008f26:	3501      	adds	r5, #1
 8008f28:	4603      	mov	r3, r0
 8008f2a:	b22d      	sxth	r5, r5
 8008f2c:	444b      	add	r3, r9
 8008f2e:	444c      	add	r4, r9
 8008f30:	e7f0      	b.n	8008f14 <lv_disp_refr_task+0x330>
            disp_refr->driver.monitor_cb(&disp_refr->driver, lv_tick_elaps(start), px_num);
 8008f32:	9802      	ldr	r0, [sp, #8]
 8008f34:	f003 fb62 	bl	800c5fc <lv_tick_elaps>
 8008f38:	9b00      	ldr	r3, [sp, #0]
 8008f3a:	4601      	mov	r1, r0
 8008f3c:	681a      	ldr	r2, [r3, #0]
 8008f3e:	4620      	mov	r0, r4
 8008f40:	47a8      	blx	r5
 8008f42:	e690      	b.n	8008c66 <lv_disp_refr_task+0x82>

08008f44 <lv_style_copy>:
 * @param dest pointer to the destination style
 * @param src pointer to the source style
 */
void lv_style_copy(lv_style_t * dest, const lv_style_t * src)
{
    memcpy(dest, src, sizeof(lv_style_t));
 8008f44:	f101 033c 	add.w	r3, r1, #60	; 0x3c
 8008f48:	f851 2b04 	ldr.w	r2, [r1], #4
 8008f4c:	f840 2b04 	str.w	r2, [r0], #4
 8008f50:	4299      	cmp	r1, r3
 8008f52:	d1f9      	bne.n	8008f48 <lv_style_copy+0x4>
}
 8008f54:	4770      	bx	lr
	...

08008f58 <lv_style_init>:
    lv_style_scr.glass               = 0;
 8008f58:	49d7      	ldr	r1, [pc, #860]	; (80092b8 <lv_style_init+0x360>)
{
 8008f5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_style_scr.glass               = 0;
 8008f5e:	780b      	ldrb	r3, [r1, #0]
    lv_style_scr.body.main_color     = LV_COLOR_WHITE;
 8008f60:	f8df 9370 	ldr.w	r9, [pc, #880]	; 80092d4 <lv_style_init+0x37c>
    lv_style_copy(&lv_style_plain, &lv_style_scr);
 8008f64:	4dd5      	ldr	r5, [pc, #852]	; (80092bc <lv_style_init+0x364>)
    lv_style_scr.body.main_color     = LV_COLOR_WHITE;
 8008f66:	f8b9 b000 	ldrh.w	fp, [r9]
 8008f6a:	f8a1 b002 	strh.w	fp, [r1, #2]
    lv_style_scr.glass               = 0;
 8008f6e:	f36f 0300 	bfc	r3, #0, #1
 8008f72:	700b      	strb	r3, [r1, #0]
    lv_style_scr.body.border.color = LV_COLOR_BLACK;
 8008f74:	7a8b      	ldrb	r3, [r1, #10]
    lv_style_scr.body.grad_color     = LV_COLOR_WHITE;
 8008f76:	f8a1 b004 	strh.w	fp, [r1, #4]
    lv_style_scr.body.radius         = 0;
 8008f7a:	2600      	movs	r6, #0
    lv_style_scr.body.border.color = LV_COLOR_BLACK;
 8008f7c:	f366 0304 	bfi	r3, r6, #0, #5
 8008f80:	728b      	strb	r3, [r1, #10]
 8008f82:	894b      	ldrh	r3, [r1, #10]
    lv_style_scr.body.radius         = 0;
 8008f84:	80ce      	strh	r6, [r1, #6]
    lv_style_scr.body.border.color = LV_COLOR_BLACK;
 8008f86:	f366 134a 	bfi	r3, r6, #5, #6
 8008f8a:	814b      	strh	r3, [r1, #10]
 8008f8c:	0a1b      	lsrs	r3, r3, #8
 8008f8e:	f366 03c7 	bfi	r3, r6, #3, #5
 8008f92:	72cb      	strb	r3, [r1, #11]
    lv_style_scr.body.border.part  = LV_BORDER_FULL;
 8008f94:	230f      	movs	r3, #15
{
 8008f96:	b085      	sub	sp, #20
    lv_style_scr.body.border.part  = LV_BORDER_FULL;
 8008f98:	738b      	strb	r3, [r1, #14]
    lv_style_scr.body.shadow.color = LV_COLOR_GRAY;
 8008f9a:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 8008f9e:	f8ad 3004 	strh.w	r3, [sp, #4]
 8008fa2:	b29b      	uxth	r3, r3
 8008fa4:	820b      	strh	r3, [r1, #16]
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
 8008fa6:	f891 3020 	ldrb.w	r3, [r1, #32]
    lv_style_scr.body.padding.left   = 0;
 8008faa:	834e      	strh	r6, [r1, #26]
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
 8008fac:	2206      	movs	r2, #6
 8008fae:	f362 0304 	bfi	r3, r2, #0, #5
 8008fb2:	f881 3020 	strb.w	r3, [r1, #32]
 8008fb6:	8c0b      	ldrh	r3, [r1, #32]
    lv_style_scr.body.padding.right  = 0;
 8008fb8:	838e      	strh	r6, [r1, #28]
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
 8008fba:	220c      	movs	r2, #12
 8008fbc:	f362 134a 	bfi	r3, r2, #5, #6
 8008fc0:	840b      	strh	r3, [r1, #32]
 8008fc2:	2206      	movs	r2, #6
 8008fc4:	0a1b      	lsrs	r3, r3, #8
    lv_style_scr.body.padding.inner  = LV_DPI / 20;
 8008fc6:	f04f 0801 	mov.w	r8, #1
    lv_style_scr.body.opa            = LV_OPA_COVER;
 8008fca:	24ff      	movs	r4, #255	; 0xff
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
 8008fcc:	f362 03c7 	bfi	r3, r2, #3, #5
    lv_style_scr.body.opa            = LV_OPA_COVER;
 8008fd0:	720c      	strb	r4, [r1, #8]
    lv_style_scr.body.padding.top    = 0;
 8008fd2:	82ce      	strh	r6, [r1, #22]
    lv_style_scr.body.padding.bottom = 0;
 8008fd4:	830e      	strh	r6, [r1, #24]
    lv_style_scr.body.padding.inner  = LV_DPI / 20;
 8008fd6:	f8a1 801e 	strh.w	r8, [r1, #30]
    lv_style_scr.body.border.opa   = LV_OPA_COVER;
 8008fda:	73cc      	strb	r4, [r1, #15]
    lv_style_scr.body.border.width = 0;
 8008fdc:	818e      	strh	r6, [r1, #12]
    lv_style_scr.body.shadow.type  = LV_SHADOW_FULL;
 8008fde:	f881 8014 	strb.w	r8, [r1, #20]
    lv_style_scr.body.shadow.width = 0;
 8008fe2:	824e      	strh	r6, [r1, #18]
    lv_style_scr.text.opa          = LV_OPA_COVER;
 8008fe4:	f881 402c 	strb.w	r4, [r1, #44]	; 0x2c
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
 8008fe8:	f881 3021 	strb.w	r3, [r1, #33]	; 0x21
    lv_style_scr.text.sel_color    = lv_color_make(0x55, 0x96, 0xd8);
 8008fec:	f891 3022 	ldrb.w	r3, [r1, #34]	; 0x22
    lv_style_scr.image.opa     = LV_OPA_COVER;
 8008ff0:	f881 4033 	strb.w	r4, [r1, #51]	; 0x33
    lv_style_scr.text.sel_color    = lv_color_make(0x55, 0x96, 0xd8);
 8008ff4:	221b      	movs	r2, #27
 8008ff6:	f362 0304 	bfi	r3, r2, #0, #5
 8008ffa:	f881 3022 	strb.w	r3, [r1, #34]	; 0x22
 8008ffe:	8c4a      	ldrh	r2, [r1, #34]	; 0x22
    lv_style_scr.line.opa     = LV_OPA_COVER;
 8009000:	f881 4038 	strb.w	r4, [r1, #56]	; 0x38
    lv_style_scr.text.sel_color    = lv_color_make(0x55, 0x96, 0xd8);
 8009004:	2325      	movs	r3, #37	; 0x25
 8009006:	f363 124a 	bfi	r2, r3, #5, #6
 800900a:	9303      	str	r3, [sp, #12]
 800900c:	0a10      	lsrs	r0, r2, #8
 800900e:	844a      	strh	r2, [r1, #34]	; 0x22
 8009010:	220a      	movs	r2, #10
 8009012:	f362 00c7 	bfi	r0, r2, #3, #5
 8009016:	9202      	str	r2, [sp, #8]
 8009018:	f881 0023 	strb.w	r0, [r1, #35]	; 0x23
    lv_style_scr.text.font         = LV_FONT_DEFAULT;
 800901c:	48a8      	ldr	r0, [pc, #672]	; (80092c0 <lv_style_init+0x368>)
 800901e:	6248      	str	r0, [r1, #36]	; 0x24
    lv_style_scr.image.color   = lv_color_make(0x20, 0x20, 0x20);
 8009020:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
    lv_style_copy(&lv_style_plain_color, &lv_style_plain);
 8009024:	4ca7      	ldr	r4, [pc, #668]	; (80092c4 <lv_style_init+0x36c>)
    lv_style_scr.text.letter_space = 0;
 8009026:	850e      	strh	r6, [r1, #40]	; 0x28
    lv_style_scr.image.color   = lv_color_make(0x20, 0x20, 0x20);
 8009028:	2704      	movs	r7, #4
 800902a:	f367 0004 	bfi	r0, r7, #0, #5
 800902e:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
 8009032:	8e08      	ldrh	r0, [r1, #48]	; 0x30
    lv_style_scr.image.intense = LV_OPA_TRANSP;
 8009034:	f881 6032 	strb.w	r6, [r1, #50]	; 0x32
    lv_style_scr.image.color   = lv_color_make(0x20, 0x20, 0x20);
 8009038:	f04f 0a08 	mov.w	sl, #8
 800903c:	f36a 104a 	bfi	r0, sl, #5, #6
 8009040:	8608      	strh	r0, [r1, #48]	; 0x30
 8009042:	fa20 f00a 	lsr.w	r0, r0, sl
 8009046:	f367 00c7 	bfi	r0, r7, #3, #5
 800904a:	f881 0031 	strb.w	r0, [r1, #49]	; 0x31
    lv_style_scr.line.color   = lv_color_make(0x20, 0x20, 0x20);
 800904e:	f891 0034 	ldrb.w	r0, [r1, #52]	; 0x34
 8009052:	f367 0004 	bfi	r0, r7, #0, #5
 8009056:	f881 0034 	strb.w	r0, [r1, #52]	; 0x34
 800905a:	8e88      	ldrh	r0, [r1, #52]	; 0x34
 800905c:	f36a 104a 	bfi	r0, sl, #5, #6
 8009060:	8688      	strh	r0, [r1, #52]	; 0x34
 8009062:	fa20 f00a 	lsr.w	r0, r0, sl
 8009066:	f367 00c7 	bfi	r0, r7, #3, #5
 800906a:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
    lv_style_scr.line.rounded = 0;
 800906e:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 8009072:	f366 0000 	bfi	r0, r6, #0, #1
    lv_style_scr.text.line_space   = 2;
 8009076:	f04f 0302 	mov.w	r3, #2
    lv_style_scr.line.rounded = 0;
 800907a:	f881 0039 	strb.w	r0, [r1, #57]	; 0x39
    lv_style_copy(&lv_style_plain, &lv_style_scr);
 800907e:	4628      	mov	r0, r5
    lv_style_scr.text.line_space   = 2;
 8009080:	854b      	strh	r3, [r1, #42]	; 0x2a
    lv_style_scr.line.width   = 2;
 8009082:	86cb      	strh	r3, [r1, #54]	; 0x36
    lv_style_copy(&lv_style_plain, &lv_style_scr);
 8009084:	f7ff ff5e 	bl	8008f44 <lv_style_copy>
    lv_style_copy(&lv_style_plain_color, &lv_style_plain);
 8009088:	4629      	mov	r1, r5
 800908a:	4620      	mov	r0, r4
    lv_style_plain.body.padding.left   = LV_DPI / 20;
 800908c:	f8a5 801a 	strh.w	r8, [r5, #26]
    lv_style_plain.body.padding.right  = LV_DPI / 20;
 8009090:	f8a5 801c 	strh.w	r8, [r5, #28]
    lv_style_plain.body.padding.top    = LV_DPI / 20;
 8009094:	f8a5 8016 	strh.w	r8, [r5, #22]
    lv_style_plain.body.padding.bottom = LV_DPI / 20;
 8009098:	f8a5 8018 	strh.w	r8, [r5, #24]
    lv_style_copy(&lv_style_plain_color, &lv_style_plain);
 800909c:	f7ff ff52 	bl	8008f44 <lv_style_copy>
    lv_style_plain_color.text.color      = lv_color_make(0xf0, 0xf0, 0xf0);
 80090a0:	f894 1020 	ldrb.w	r1, [r4, #32]
 80090a4:	231e      	movs	r3, #30
 80090a6:	f363 0104 	bfi	r1, r3, #0, #5
 80090aa:	f884 1020 	strb.w	r1, [r4, #32]
 80090ae:	8c21      	ldrh	r1, [r4, #32]
 80090b0:	203c      	movs	r0, #60	; 0x3c
 80090b2:	f360 114a 	bfi	r1, r0, #5, #6
 80090b6:	8421      	strh	r1, [r4, #32]
 80090b8:	fa21 f10a 	lsr.w	r1, r1, sl
 80090bc:	f363 01c7 	bfi	r1, r3, #3, #5
 80090c0:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    lv_style_plain_color.image.color     = lv_color_make(0xf0, 0xf0, 0xf0);
 80090c4:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 80090c8:	f363 0104 	bfi	r1, r3, #0, #5
 80090cc:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
 80090d0:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 80090d2:	f360 114a 	bfi	r1, r0, #5, #6
 80090d6:	8621      	strh	r1, [r4, #48]	; 0x30
 80090d8:	fa21 f10a 	lsr.w	r1, r1, sl
 80090dc:	f363 01c7 	bfi	r1, r3, #3, #5
 80090e0:	f884 1031 	strb.w	r1, [r4, #49]	; 0x31
    lv_style_plain_color.line.color      = lv_color_make(0xf0, 0xf0, 0xf0);
 80090e4:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
 80090e8:	f363 0104 	bfi	r1, r3, #0, #5
 80090ec:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 80090f0:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 80090f2:	f360 114a 	bfi	r1, r0, #5, #6
 80090f6:	86a1      	strh	r1, [r4, #52]	; 0x34
 80090f8:	fa21 f10a 	lsr.w	r1, r1, sl
 80090fc:	f363 01c7 	bfi	r1, r3, #3, #5
 8009100:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    lv_style_plain_color.body.main_color = lv_color_make(0x55, 0x96, 0xd8);
 8009104:	78a1      	ldrb	r1, [r4, #2]
 8009106:	231b      	movs	r3, #27
 8009108:	f363 0104 	bfi	r1, r3, #0, #5
 800910c:	70a1      	strb	r1, [r4, #2]
 800910e:	8861      	ldrh	r1, [r4, #2]
 8009110:	9b03      	ldr	r3, [sp, #12]
 8009112:	f363 114a 	bfi	r1, r3, #5, #6
 8009116:	8061      	strh	r1, [r4, #2]
 8009118:	9a02      	ldr	r2, [sp, #8]
 800911a:	fa21 f10a 	lsr.w	r1, r1, sl
 800911e:	f362 01c7 	bfi	r1, r2, #3, #5
 8009122:	70e1      	strb	r1, [r4, #3]
    lv_style_plain_color.body.grad_color = lv_style_plain_color.body.main_color;
 8009124:	8863      	ldrh	r3, [r4, #2]
 8009126:	80a3      	strh	r3, [r4, #4]
    lv_style_copy(&lv_style_pretty, &lv_style_plain);
 8009128:	4b67      	ldr	r3, [pc, #412]	; (80092c8 <lv_style_init+0x370>)
 800912a:	9302      	str	r3, [sp, #8]
 800912c:	4629      	mov	r1, r5
 800912e:	4618      	mov	r0, r3
 8009130:	f7ff ff08 	bl	8008f44 <lv_style_copy>
    lv_style_pretty.text.color        = lv_color_make(0x20, 0x20, 0x20);
 8009134:	9b02      	ldr	r3, [sp, #8]
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
 8009136:	4c65      	ldr	r4, [pc, #404]	; (80092cc <lv_style_init+0x374>)
    lv_style_pretty.text.color        = lv_color_make(0x20, 0x20, 0x20);
 8009138:	f893 2020 	ldrb.w	r2, [r3, #32]
    lv_style_pretty.body.main_color   = LV_COLOR_WHITE;
 800913c:	f8a3 b002 	strh.w	fp, [r3, #2]
    lv_style_pretty.text.color        = lv_color_make(0x20, 0x20, 0x20);
 8009140:	f367 0204 	bfi	r2, r7, #0, #5
 8009144:	f883 2020 	strb.w	r2, [r3, #32]
 8009148:	8c1a      	ldrh	r2, [r3, #32]
    lv_style_pretty.body.radius       = LV_DPI / 15;
 800914a:	f8a3 8006 	strh.w	r8, [r3, #6]
    lv_style_pretty.text.color        = lv_color_make(0x20, 0x20, 0x20);
 800914e:	f36a 124a 	bfi	r2, sl, #5, #6
 8009152:	841a      	strh	r2, [r3, #32]
 8009154:	fa22 f20a 	lsr.w	r2, r2, sl
 8009158:	f367 02c7 	bfi	r2, r7, #3, #5
 800915c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    lv_style_pretty.image.color       = lv_color_make(0x20, 0x20, 0x20);
 8009160:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    lv_style_pretty.body.border.width = LV_DPI / 50 >= 1 ? LV_DPI / 50 : 1;
 8009164:	f8a3 800c 	strh.w	r8, [r3, #12]
    lv_style_pretty.image.color       = lv_color_make(0x20, 0x20, 0x20);
 8009168:	f367 0204 	bfi	r2, r7, #0, #5
 800916c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8009170:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8009172:	f36a 124a 	bfi	r2, sl, #5, #6
 8009176:	861a      	strh	r2, [r3, #48]	; 0x30
 8009178:	fa22 f20a 	lsr.w	r2, r2, sl
 800917c:	f367 02c7 	bfi	r2, r7, #3, #5
 8009180:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    lv_style_pretty.line.color        = lv_color_make(0x20, 0x20, 0x20);
 8009184:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8009188:	f367 0204 	bfi	r2, r7, #0, #5
 800918c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8009190:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8009192:	f36a 124a 	bfi	r2, sl, #5, #6
 8009196:	869a      	strh	r2, [r3, #52]	; 0x34
 8009198:	fa22 f20a 	lsr.w	r2, r2, sl
 800919c:	f367 02c7 	bfi	r2, r7, #3, #5
 80091a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    lv_style_pretty.body.grad_color   = LV_COLOR_SILVER;
 80091a4:	f8b9 2004 	ldrh.w	r2, [r9, #4]
 80091a8:	809a      	strh	r2, [r3, #4]
    lv_style_pretty.body.border.color = lv_color_make(0x40, 0x40, 0x40);
 80091aa:	7a9a      	ldrb	r2, [r3, #10]
 80091ac:	f36a 0204 	bfi	r2, sl, #0, #5
 80091b0:	729a      	strb	r2, [r3, #10]
 80091b2:	895a      	ldrh	r2, [r3, #10]
 80091b4:	2110      	movs	r1, #16
 80091b6:	f361 124a 	bfi	r2, r1, #5, #6
 80091ba:	815a      	strh	r2, [r3, #10]
 80091bc:	fa22 f20a 	lsr.w	r2, r2, sl
 80091c0:	f36a 02c7 	bfi	r2, sl, #3, #5
 80091c4:	72da      	strb	r2, [r3, #11]
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
 80091c6:	4619      	mov	r1, r3
    lv_style_pretty.body.border.opa   = LV_OPA_30;
 80091c8:	224c      	movs	r2, #76	; 0x4c
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
 80091ca:	4620      	mov	r0, r4
    lv_style_pretty.body.border.opa   = LV_OPA_30;
 80091cc:	73da      	strb	r2, [r3, #15]
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
 80091ce:	f7ff feb9 	bl	8008f44 <lv_style_copy>
    lv_style_pretty_color.text.color        = lv_color_make(0xe0, 0xe0, 0xe0);
 80091d2:	f894 3020 	ldrb.w	r3, [r4, #32]
 80091d6:	f04f 0b1c 	mov.w	fp, #28
 80091da:	f36b 0304 	bfi	r3, fp, #0, #5
 80091de:	f884 3020 	strb.w	r3, [r4, #32]
 80091e2:	8c23      	ldrh	r3, [r4, #32]
 80091e4:	2238      	movs	r2, #56	; 0x38
 80091e6:	f362 134a 	bfi	r3, r2, #5, #6
 80091ea:	8423      	strh	r3, [r4, #32]
 80091ec:	fa23 f30a 	lsr.w	r3, r3, sl
 80091f0:	f36b 03c7 	bfi	r3, fp, #3, #5
 80091f4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    lv_style_pretty_color.image.color       = lv_color_make(0xe0, 0xe0, 0xe0);
 80091f8:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80091fc:	f36b 0304 	bfi	r3, fp, #0, #5
 8009200:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 8009204:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8009206:	f362 134a 	bfi	r3, r2, #5, #6
 800920a:	8623      	strh	r3, [r4, #48]	; 0x30
 800920c:	fa23 f30a 	lsr.w	r3, r3, sl
 8009210:	f36b 03c7 	bfi	r3, fp, #3, #5
 8009214:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    lv_style_pretty_color.line.color        = lv_color_make(0xc0, 0xc0, 0xc0);
 8009218:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800921c:	f04f 0918 	mov.w	r9, #24
 8009220:	f369 0304 	bfi	r3, r9, #0, #5
 8009224:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8009228:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800922a:	2230      	movs	r2, #48	; 0x30
 800922c:	f362 134a 	bfi	r3, r2, #5, #6
 8009230:	86a3      	strh	r3, [r4, #52]	; 0x34
 8009232:	fa23 f30a 	lsr.w	r3, r3, sl
 8009236:	f369 03c7 	bfi	r3, r9, #3, #5
 800923a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    lv_style_pretty_color.body.main_color   = lv_color_make(0x6b, 0x9a, 0xc7);
 800923e:	78a3      	ldrb	r3, [r4, #2]
 8009240:	f369 0304 	bfi	r3, r9, #0, #5
 8009244:	70a3      	strb	r3, [r4, #2]
 8009246:	8863      	ldrh	r3, [r4, #2]
 8009248:	2226      	movs	r2, #38	; 0x26
 800924a:	f362 134a 	bfi	r3, r2, #5, #6
 800924e:	8063      	strh	r3, [r4, #2]
 8009250:	220d      	movs	r2, #13
 8009252:	fa23 f30a 	lsr.w	r3, r3, sl
 8009256:	f362 03c7 	bfi	r3, r2, #3, #5
 800925a:	70e3      	strb	r3, [r4, #3]
    lv_style_pretty_color.body.grad_color   = lv_color_make(0x2b, 0x59, 0x8b);
 800925c:	7923      	ldrb	r3, [r4, #4]
 800925e:	2211      	movs	r2, #17
 8009260:	f362 0304 	bfi	r3, r2, #0, #5
 8009264:	7123      	strb	r3, [r4, #4]
 8009266:	88a3      	ldrh	r3, [r4, #4]
 8009268:	2216      	movs	r2, #22
 800926a:	f362 134a 	bfi	r3, r2, #5, #6
 800926e:	80a3      	strh	r3, [r4, #4]
 8009270:	2205      	movs	r2, #5
 8009272:	fa23 f30a 	lsr.w	r3, r3, sl
 8009276:	f362 03c7 	bfi	r3, r2, #3, #5
 800927a:	7163      	strb	r3, [r4, #5]
    lv_style_pretty_color.body.border.color = lv_color_make(0x15, 0x2c, 0x42);
 800927c:	7aa3      	ldrb	r3, [r4, #10]
 800927e:	f36a 0304 	bfi	r3, sl, #0, #5
 8009282:	72a3      	strb	r3, [r4, #10]
 8009284:	8962      	ldrh	r2, [r4, #10]
 8009286:	230b      	movs	r3, #11
 8009288:	f363 124a 	bfi	r2, r3, #5, #6
 800928c:	9302      	str	r3, [sp, #8]
 800928e:	2302      	movs	r3, #2
 8009290:	8162      	strh	r2, [r4, #10]
 8009292:	fa22 f20a 	lsr.w	r2, r2, sl
    lv_style_copy(&lv_style_transp, &lv_style_plain);
 8009296:	f8df a040 	ldr.w	sl, [pc, #64]	; 80092d8 <lv_style_init+0x380>
    lv_style_pretty_color.body.border.color = lv_color_make(0x15, 0x2c, 0x42);
 800929a:	f363 02c7 	bfi	r2, r3, #3, #5
 800929e:	72e2      	strb	r2, [r4, #11]
    lv_style_copy(&lv_style_transp, &lv_style_plain);
 80092a0:	4629      	mov	r1, r5
 80092a2:	4650      	mov	r0, sl
 80092a4:	f7ff fe4e 	bl	8008f44 <lv_style_copy>
    lv_style_transp.glass             = 1;
 80092a8:	f89a 2000 	ldrb.w	r2, [sl]
    lv_style_copy(&lv_style_transp_fit, &lv_style_transp);
 80092ac:	4c08      	ldr	r4, [pc, #32]	; (80092d0 <lv_style_init+0x378>)
    lv_style_transp.body.border.width = 0;
 80092ae:	f8aa 600c 	strh.w	r6, [sl, #12]
    lv_style_transp.glass             = 1;
 80092b2:	ea42 0208 	orr.w	r2, r2, r8
 80092b6:	e011      	b.n	80092dc <lv_style_init+0x384>
 80092b8:	2000d814 	.word	0x2000d814
 80092bc:	2000d79c 	.word	0x2000d79c
 80092c0:	20000ca4 	.word	0x20000ca4
 80092c4:	2000d88c 	.word	0x2000d88c
 80092c8:	2000d6ac 	.word	0x2000d6ac
 80092cc:	2000d5bc 	.word	0x2000d5bc
 80092d0:	2000d760 	.word	0x2000d760
 80092d4:	08010130 	.word	0x08010130
 80092d8:	2000d5f8 	.word	0x2000d5f8
 80092dc:	f88a 2000 	strb.w	r2, [sl]
    lv_style_transp.body.opa          = LV_OPA_TRANSP;
 80092e0:	f88a 6008 	strb.w	r6, [sl, #8]
    lv_style_copy(&lv_style_transp_fit, &lv_style_transp);
 80092e4:	4651      	mov	r1, sl
 80092e6:	4620      	mov	r0, r4
    lv_style_copy(&lv_style_transp_tight, &lv_style_transp_fit);
 80092e8:	f8df a394 	ldr.w	sl, [pc, #916]	; 8009680 <lv_style_init+0x728>
    lv_style_copy(&lv_style_transp_fit, &lv_style_transp);
 80092ec:	f7ff fe2a 	bl	8008f44 <lv_style_copy>
    lv_style_transp_fit.body.padding.left   = 0;
 80092f0:	8366      	strh	r6, [r4, #26]
    lv_style_transp_fit.body.padding.right  = 0;
 80092f2:	83a6      	strh	r6, [r4, #28]
    lv_style_transp_fit.body.padding.top    = 0;
 80092f4:	82e6      	strh	r6, [r4, #22]
    lv_style_transp_fit.body.padding.bottom = 0;
 80092f6:	8326      	strh	r6, [r4, #24]
    lv_style_copy(&lv_style_transp_tight, &lv_style_transp_fit);
 80092f8:	4621      	mov	r1, r4
    lv_style_copy(&lv_style_btn_rel, &lv_style_plain);
 80092fa:	4cdd      	ldr	r4, [pc, #884]	; (8009670 <lv_style_init+0x718>)
    lv_style_copy(&lv_style_transp_tight, &lv_style_transp_fit);
 80092fc:	4650      	mov	r0, sl
 80092fe:	f7ff fe21 	bl	8008f44 <lv_style_copy>
    lv_style_copy(&lv_style_btn_rel, &lv_style_plain);
 8009302:	4629      	mov	r1, r5
 8009304:	4620      	mov	r0, r4
    lv_style_transp_tight.body.padding.inner = 0;
 8009306:	f8aa 601e 	strh.w	r6, [sl, #30]
    lv_style_copy(&lv_style_btn_rel, &lv_style_plain);
 800930a:	f7ff fe1b 	bl	8008f44 <lv_style_copy>
    lv_style_btn_rel.body.main_color     = lv_color_make(0x76, 0xa2, 0xd0);
 800930e:	78a2      	ldrb	r2, [r4, #2]
    lv_style_btn_rel.body.radius         = LV_DPI / 15;
 8009310:	f8a4 8006 	strh.w	r8, [r4, #6]
    lv_style_btn_rel.body.main_color     = lv_color_make(0x76, 0xa2, 0xd0);
 8009314:	211a      	movs	r1, #26
 8009316:	f361 0204 	bfi	r2, r1, #0, #5
 800931a:	70a2      	strb	r2, [r4, #2]
 800931c:	8862      	ldrh	r2, [r4, #2]
    lv_style_btn_rel.body.border.width   = LV_DPI / 50 >= 1 ? LV_DPI / 50 : 1;
 800931e:	f8a4 800c 	strh.w	r8, [r4, #12]
    lv_style_btn_rel.body.main_color     = lv_color_make(0x76, 0xa2, 0xd0);
 8009322:	2128      	movs	r1, #40	; 0x28
 8009324:	f361 124a 	bfi	r2, r1, #5, #6
 8009328:	f04f 0a0e 	mov.w	sl, #14
 800932c:	8062      	strh	r2, [r4, #2]
 800932e:	0a12      	lsrs	r2, r2, #8
 8009330:	f36a 02c7 	bfi	r2, sl, #3, #5
 8009334:	70e2      	strb	r2, [r4, #3]
    lv_style_btn_rel.body.grad_color     = lv_color_make(0x19, 0x3a, 0x5d);
 8009336:	9b02      	ldr	r3, [sp, #8]
 8009338:	7922      	ldrb	r2, [r4, #4]
    lv_style_btn_rel.body.padding.top    = LV_DPI / 6;
 800933a:	82e7      	strh	r7, [r4, #22]
    lv_style_btn_rel.body.grad_color     = lv_color_make(0x19, 0x3a, 0x5d);
 800933c:	f363 0204 	bfi	r2, r3, #0, #5
 8009340:	7122      	strb	r2, [r4, #4]
 8009342:	88a3      	ldrh	r3, [r4, #4]
    lv_style_btn_rel.body.padding.bottom = LV_DPI / 6;
 8009344:	8327      	strh	r7, [r4, #24]
    lv_style_btn_rel.body.grad_color     = lv_color_make(0x19, 0x3a, 0x5d);
 8009346:	f36a 134a 	bfi	r3, sl, #5, #6
 800934a:	80a3      	strh	r3, [r4, #4]
 800934c:	2203      	movs	r2, #3
 800934e:	0a1b      	lsrs	r3, r3, #8
 8009350:	f362 03c7 	bfi	r3, r2, #3, #5
 8009354:	7163      	strb	r3, [r4, #5]
    lv_style_btn_rel.body.padding.left   = LV_DPI / 4;
 8009356:	f04f 0306 	mov.w	r3, #6
 800935a:	8363      	strh	r3, [r4, #26]
    lv_style_btn_rel.body.padding.right  = LV_DPI / 4;
 800935c:	83a3      	strh	r3, [r4, #28]
    lv_style_btn_rel.body.padding.inner  = LV_DPI / 10;
 800935e:	f04f 0302 	mov.w	r3, #2
 8009362:	83e3      	strh	r3, [r4, #30]
    lv_style_btn_rel.body.border.color   = lv_color_make(0x0b, 0x19, 0x28);
 8009364:	7aa3      	ldrb	r3, [r4, #10]
    lv_style_btn_rel.body.shadow.width   = 0;
 8009366:	8266      	strh	r6, [r4, #18]
    lv_style_btn_rel.body.border.color   = lv_color_make(0x0b, 0x19, 0x28);
 8009368:	2205      	movs	r2, #5
 800936a:	f362 0304 	bfi	r3, r2, #0, #5
 800936e:	72a3      	strb	r3, [r4, #10]
 8009370:	8963      	ldrh	r3, [r4, #10]
    lv_style_copy(&lv_style_btn_pr, &lv_style_btn_rel);
 8009372:	4dc0      	ldr	r5, [pc, #768]	; (8009674 <lv_style_init+0x71c>)
    lv_style_btn_rel.body.border.color   = lv_color_make(0x0b, 0x19, 0x28);
 8009374:	2206      	movs	r2, #6
 8009376:	f362 134a 	bfi	r3, r2, #5, #6
 800937a:	8163      	strh	r3, [r4, #10]
 800937c:	0a1b      	lsrs	r3, r3, #8
 800937e:	f368 03c7 	bfi	r3, r8, #3, #5
 8009382:	72e3      	strb	r3, [r4, #11]
    lv_style_btn_rel.body.border.opa     = LV_OPA_70;
 8009384:	23b2      	movs	r3, #178	; 0xb2
 8009386:	73e3      	strb	r3, [r4, #15]
    lv_style_btn_rel.body.shadow.color   = LV_COLOR_GRAY;
 8009388:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800938c:	8223      	strh	r3, [r4, #16]
    lv_style_btn_rel.text.color          = lv_color_make(0xff, 0xff, 0xff);
 800938e:	f894 3020 	ldrb.w	r3, [r4, #32]
 8009392:	f043 031f 	orr.w	r3, r3, #31
 8009396:	f884 3020 	strb.w	r3, [r4, #32]
 800939a:	8c23      	ldrh	r3, [r4, #32]
 800939c:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 80093a0:	8423      	strh	r3, [r4, #32]
 80093a2:	0a1b      	lsrs	r3, r3, #8
 80093a4:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 80093a8:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    lv_style_btn_rel.image.color         = lv_color_make(0xff, 0xff, 0xff);
 80093ac:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80093b0:	f043 031f 	orr.w	r3, r3, #31
 80093b4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 80093b8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80093ba:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 80093be:	8623      	strh	r3, [r4, #48]	; 0x30
 80093c0:	0a1b      	lsrs	r3, r3, #8
 80093c2:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 80093c6:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    lv_style_copy(&lv_style_btn_pr, &lv_style_btn_rel);
 80093ca:	4621      	mov	r1, r4
 80093cc:	4628      	mov	r0, r5
 80093ce:	f7ff fdb9 	bl	8008f44 <lv_style_copy>
    lv_style_btn_pr.body.main_color = lv_color_make(0x33, 0x62, 0x94);
 80093d2:	78ab      	ldrb	r3, [r5, #2]
 80093d4:	2212      	movs	r2, #18
 80093d6:	f362 0304 	bfi	r3, r2, #0, #5
 80093da:	70ab      	strb	r3, [r5, #2]
 80093dc:	886b      	ldrh	r3, [r5, #2]
 80093de:	f369 134a 	bfi	r3, r9, #5, #6
 80093e2:	806b      	strh	r3, [r5, #2]
 80093e4:	2206      	movs	r2, #6
 80093e6:	0a1b      	lsrs	r3, r3, #8
 80093e8:	f362 03c7 	bfi	r3, r2, #3, #5
 80093ec:	70eb      	strb	r3, [r5, #3]
    lv_style_btn_pr.body.grad_color = lv_color_make(0x10, 0x26, 0x3c);
 80093ee:	792b      	ldrb	r3, [r5, #4]
 80093f0:	2207      	movs	r2, #7
 80093f2:	f362 0304 	bfi	r3, r2, #0, #5
 80093f6:	712b      	strb	r3, [r5, #4]
 80093f8:	88ab      	ldrh	r3, [r5, #4]
 80093fa:	2209      	movs	r2, #9
 80093fc:	f362 134a 	bfi	r3, r2, #5, #6
 8009400:	80ab      	strh	r3, [r5, #4]
 8009402:	2202      	movs	r2, #2
 8009404:	0a1b      	lsrs	r3, r3, #8
 8009406:	f362 03c7 	bfi	r3, r2, #3, #5
 800940a:	716b      	strb	r3, [r5, #5]
    lv_style_btn_pr.text.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 800940c:	f895 3020 	ldrb.w	r3, [r5, #32]
 8009410:	f369 0304 	bfi	r3, r9, #0, #5
 8009414:	f885 3020 	strb.w	r3, [r5, #32]
 8009418:	8c2b      	ldrh	r3, [r5, #32]
 800941a:	222d      	movs	r2, #45	; 0x2d
 800941c:	f362 134a 	bfi	r3, r2, #5, #6
 8009420:	842b      	strh	r3, [r5, #32]
 8009422:	0a19      	lsrs	r1, r3, #8
 8009424:	2314      	movs	r3, #20
 8009426:	f363 01c7 	bfi	r1, r3, #3, #5
 800942a:	f885 1021 	strb.w	r1, [r5, #33]	; 0x21
    lv_style_btn_pr.image.color     = lv_color_make(0xa4, 0xb5, 0xc6);
 800942e:	f895 1030 	ldrb.w	r1, [r5, #48]	; 0x30
 8009432:	f369 0104 	bfi	r1, r9, #0, #5
 8009436:	f885 1030 	strb.w	r1, [r5, #48]	; 0x30
 800943a:	8e29      	ldrh	r1, [r5, #48]	; 0x30
 800943c:	f362 114a 	bfi	r1, r2, #5, #6
 8009440:	8629      	strh	r1, [r5, #48]	; 0x30
 8009442:	0a09      	lsrs	r1, r1, #8
 8009444:	f363 01c7 	bfi	r1, r3, #3, #5
 8009448:	f885 1031 	strb.w	r1, [r5, #49]	; 0x31
    lv_style_btn_pr.line.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 800944c:	f895 1034 	ldrb.w	r1, [r5, #52]	; 0x34
 8009450:	f369 0104 	bfi	r1, r9, #0, #5
 8009454:	f885 1034 	strb.w	r1, [r5, #52]	; 0x34
 8009458:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 800945a:	9202      	str	r2, [sp, #8]
 800945c:	f362 114a 	bfi	r1, r2, #5, #6
 8009460:	86a9      	strh	r1, [r5, #52]	; 0x34
 8009462:	0a09      	lsrs	r1, r1, #8
 8009464:	f363 01c7 	bfi	r1, r3, #3, #5
 8009468:	9301      	str	r3, [sp, #4]
 800946a:	f885 1035 	strb.w	r1, [r5, #53]	; 0x35
    lv_style_copy(&lv_style_btn_tgl_rel, &lv_style_btn_rel);
 800946e:	4d82      	ldr	r5, [pc, #520]	; (8009678 <lv_style_init+0x720>)
 8009470:	4621      	mov	r1, r4
 8009472:	4628      	mov	r0, r5
 8009474:	f7ff fd66 	bl	8008f44 <lv_style_copy>
    lv_style_btn_tgl_rel.body.main_color   = lv_color_make(0x0a, 0x11, 0x22);
 8009478:	78a9      	ldrb	r1, [r5, #2]
 800947a:	f367 0104 	bfi	r1, r7, #0, #5
 800947e:	70a9      	strb	r1, [r5, #2]
 8009480:	8869      	ldrh	r1, [r5, #2]
 8009482:	f367 114a 	bfi	r1, r7, #5, #6
 8009486:	8069      	strh	r1, [r5, #2]
 8009488:	0a09      	lsrs	r1, r1, #8
 800948a:	f368 01c7 	bfi	r1, r8, #3, #5
 800948e:	70e9      	strb	r1, [r5, #3]
    lv_style_btn_tgl_rel.body.grad_color   = lv_color_make(0x37, 0x62, 0x90);
 8009490:	7929      	ldrb	r1, [r5, #4]
 8009492:	2312      	movs	r3, #18
 8009494:	f363 0104 	bfi	r1, r3, #0, #5
 8009498:	7129      	strb	r1, [r5, #4]
 800949a:	88a9      	ldrh	r1, [r5, #4]
 800949c:	f369 114a 	bfi	r1, r9, #5, #6
 80094a0:	80a9      	strh	r1, [r5, #4]
 80094a2:	2306      	movs	r3, #6
 80094a4:	0a09      	lsrs	r1, r1, #8
 80094a6:	f363 01c7 	bfi	r1, r3, #3, #5
 80094aa:	7169      	strb	r1, [r5, #5]
    lv_style_btn_tgl_rel.body.border.color = lv_color_make(0x01, 0x07, 0x0d);
 80094ac:	7aa9      	ldrb	r1, [r5, #10]
 80094ae:	f368 0104 	bfi	r1, r8, #0, #5
 80094b2:	72a9      	strb	r1, [r5, #10]
 80094b4:	8969      	ldrh	r1, [r5, #10]
 80094b6:	f368 114a 	bfi	r1, r8, #5, #6
 80094ba:	8169      	strh	r1, [r5, #10]
 80094bc:	0a09      	lsrs	r1, r1, #8
 80094be:	f366 01c7 	bfi	r1, r6, #3, #5
 80094c2:	72e9      	strb	r1, [r5, #11]
    lv_style_btn_tgl_rel.text.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 80094c4:	f895 1020 	ldrb.w	r1, [r5, #32]
    lv_style_copy(&lv_style_btn_tgl_pr, &lv_style_btn_tgl_rel);
 80094c8:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 8009684 <lv_style_init+0x72c>
    lv_style_btn_tgl_rel.text.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 80094cc:	231e      	movs	r3, #30
 80094ce:	f363 0104 	bfi	r1, r3, #0, #5
 80094d2:	f885 1020 	strb.w	r1, [r5, #32]
 80094d6:	8c29      	ldrh	r1, [r5, #32]
 80094d8:	f04f 0e37 	mov.w	lr, #55	; 0x37
 80094dc:	f36e 114a 	bfi	r1, lr, #5, #6
 80094e0:	8429      	strh	r1, [r5, #32]
 80094e2:	2019      	movs	r0, #25
 80094e4:	0a09      	lsrs	r1, r1, #8
 80094e6:	f360 01c7 	bfi	r1, r0, #3, #5
 80094ea:	f885 1021 	strb.w	r1, [r5, #33]	; 0x21
    lv_style_btn_tgl_rel.image.color       = lv_color_make(0xc8, 0xdd, 0xf4);
 80094ee:	f895 1030 	ldrb.w	r1, [r5, #48]	; 0x30
 80094f2:	f363 0104 	bfi	r1, r3, #0, #5
 80094f6:	f885 1030 	strb.w	r1, [r5, #48]	; 0x30
 80094fa:	8e29      	ldrh	r1, [r5, #48]	; 0x30
 80094fc:	f36e 114a 	bfi	r1, lr, #5, #6
 8009500:	8629      	strh	r1, [r5, #48]	; 0x30
 8009502:	0a09      	lsrs	r1, r1, #8
 8009504:	f360 01c7 	bfi	r1, r0, #3, #5
 8009508:	f885 1031 	strb.w	r1, [r5, #49]	; 0x31
    lv_style_btn_tgl_rel.line.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 800950c:	f895 1034 	ldrb.w	r1, [r5, #52]	; 0x34
 8009510:	f363 0104 	bfi	r1, r3, #0, #5
 8009514:	f885 1034 	strb.w	r1, [r5, #52]	; 0x34
 8009518:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 800951a:	f36e 114a 	bfi	r1, lr, #5, #6
 800951e:	86a9      	strh	r1, [r5, #52]	; 0x34
 8009520:	0a09      	lsrs	r1, r1, #8
 8009522:	f360 01c7 	bfi	r1, r0, #3, #5
 8009526:	f885 1035 	strb.w	r1, [r5, #53]	; 0x35
    lv_style_copy(&lv_style_btn_tgl_pr, &lv_style_btn_tgl_rel);
 800952a:	4640      	mov	r0, r8
 800952c:	4629      	mov	r1, r5
 800952e:	f7ff fd09 	bl	8008f44 <lv_style_copy>
    lv_style_btn_tgl_pr.body.main_color = lv_color_make(0x02, 0x14, 0x27);
 8009532:	f898 1002 	ldrb.w	r1, [r8, #2]
    lv_style_copy(&lv_style_btn_ina, &lv_style_btn_rel);
 8009536:	4d51      	ldr	r5, [pc, #324]	; (800967c <lv_style_init+0x724>)
    lv_style_btn_tgl_pr.body.main_color = lv_color_make(0x02, 0x14, 0x27);
 8009538:	f367 0104 	bfi	r1, r7, #0, #5
 800953c:	f888 1002 	strb.w	r1, [r8, #2]
 8009540:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 8009544:	2305      	movs	r3, #5
 8009546:	f363 114a 	bfi	r1, r3, #5, #6
 800954a:	f8a8 1002 	strh.w	r1, [r8, #2]
 800954e:	0a09      	lsrs	r1, r1, #8
 8009550:	f366 01c7 	bfi	r1, r6, #3, #5
 8009554:	f888 1003 	strb.w	r1, [r8, #3]
    lv_style_btn_tgl_pr.body.grad_color = lv_color_make(0x2b, 0x4c, 0x70);
 8009558:	f898 1004 	ldrb.w	r1, [r8, #4]
 800955c:	f36a 0104 	bfi	r1, sl, #0, #5
 8009560:	f888 1004 	strb.w	r1, [r8, #4]
 8009564:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8009568:	2013      	movs	r0, #19
 800956a:	f360 114a 	bfi	r1, r0, #5, #6
 800956e:	f8a8 1004 	strh.w	r1, [r8, #4]
 8009572:	0a09      	lsrs	r1, r1, #8
 8009574:	f363 01c7 	bfi	r1, r3, #3, #5
 8009578:	f888 1005 	strb.w	r1, [r8, #5]
    lv_style_btn_tgl_pr.text.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 800957c:	f898 1020 	ldrb.w	r1, [r8, #32]
 8009580:	9a02      	ldr	r2, [sp, #8]
 8009582:	f369 0104 	bfi	r1, r9, #0, #5
 8009586:	f888 1020 	strb.w	r1, [r8, #32]
 800958a:	f8b8 1020 	ldrh.w	r1, [r8, #32]
 800958e:	f362 114a 	bfi	r1, r2, #5, #6
 8009592:	f8a8 1020 	strh.w	r1, [r8, #32]
 8009596:	9b01      	ldr	r3, [sp, #4]
 8009598:	0a09      	lsrs	r1, r1, #8
 800959a:	f363 01c7 	bfi	r1, r3, #3, #5
 800959e:	f888 1021 	strb.w	r1, [r8, #33]	; 0x21
    lv_style_btn_tgl_pr.image.color     = lv_color_make(0xa4, 0xb5, 0xc6);
 80095a2:	f898 1030 	ldrb.w	r1, [r8, #48]	; 0x30
 80095a6:	f369 0104 	bfi	r1, r9, #0, #5
 80095aa:	f888 1030 	strb.w	r1, [r8, #48]	; 0x30
 80095ae:	f8b8 1030 	ldrh.w	r1, [r8, #48]	; 0x30
 80095b2:	f362 114a 	bfi	r1, r2, #5, #6
 80095b6:	f8a8 1030 	strh.w	r1, [r8, #48]	; 0x30
 80095ba:	0a09      	lsrs	r1, r1, #8
 80095bc:	f363 01c7 	bfi	r1, r3, #3, #5
 80095c0:	f888 1031 	strb.w	r1, [r8, #49]	; 0x31
    lv_style_btn_tgl_pr.line.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 80095c4:	f898 1034 	ldrb.w	r1, [r8, #52]	; 0x34
 80095c8:	f369 0104 	bfi	r1, r9, #0, #5
 80095cc:	f888 1034 	strb.w	r1, [r8, #52]	; 0x34
 80095d0:	f8b8 1034 	ldrh.w	r1, [r8, #52]	; 0x34
 80095d4:	f362 114a 	bfi	r1, r2, #5, #6
 80095d8:	f8a8 1034 	strh.w	r1, [r8, #52]	; 0x34
 80095dc:	0a09      	lsrs	r1, r1, #8
 80095de:	f363 01c7 	bfi	r1, r3, #3, #5
 80095e2:	f888 1035 	strb.w	r1, [r8, #53]	; 0x35
    lv_style_copy(&lv_style_btn_ina, &lv_style_btn_rel);
 80095e6:	4628      	mov	r0, r5
 80095e8:	4621      	mov	r1, r4
 80095ea:	f7ff fcab 	bl	8008f44 <lv_style_copy>
    lv_style_btn_ina.body.main_color   = lv_color_make(0xd8, 0xd8, 0xd8);
 80095ee:	78ab      	ldrb	r3, [r5, #2]
 80095f0:	221b      	movs	r2, #27
 80095f2:	f362 0304 	bfi	r3, r2, #0, #5
 80095f6:	70ab      	strb	r3, [r5, #2]
 80095f8:	886b      	ldrh	r3, [r5, #2]
 80095fa:	2236      	movs	r2, #54	; 0x36
 80095fc:	f362 134a 	bfi	r3, r2, #5, #6
 8009600:	211b      	movs	r1, #27
 8009602:	806b      	strh	r3, [r5, #2]
 8009604:	0a1b      	lsrs	r3, r3, #8
 8009606:	f361 03c7 	bfi	r3, r1, #3, #5
 800960a:	70eb      	strb	r3, [r5, #3]
    lv_style_btn_ina.body.grad_color   = lv_color_make(0xd8, 0xd8, 0xd8);
 800960c:	792b      	ldrb	r3, [r5, #4]
 800960e:	f361 0304 	bfi	r3, r1, #0, #5
 8009612:	712b      	strb	r3, [r5, #4]
 8009614:	88ab      	ldrh	r3, [r5, #4]
 8009616:	f362 134a 	bfi	r3, r2, #5, #6
 800961a:	80ab      	strh	r3, [r5, #4]
 800961c:	0a1b      	lsrs	r3, r3, #8
 800961e:	f361 03c7 	bfi	r3, r1, #3, #5
 8009622:	716b      	strb	r3, [r5, #5]
    lv_style_btn_ina.body.border.color = lv_color_make(0x90, 0x90, 0x90);
 8009624:	7aab      	ldrb	r3, [r5, #10]
 8009626:	2212      	movs	r2, #18
 8009628:	f362 0304 	bfi	r3, r2, #0, #5
 800962c:	72ab      	strb	r3, [r5, #10]
 800962e:	896b      	ldrh	r3, [r5, #10]
 8009630:	2224      	movs	r2, #36	; 0x24
 8009632:	f362 134a 	bfi	r3, r2, #5, #6
 8009636:	816b      	strh	r3, [r5, #10]
 8009638:	2212      	movs	r2, #18
 800963a:	0a1b      	lsrs	r3, r3, #8
 800963c:	f362 03c7 	bfi	r3, r2, #3, #5
 8009640:	72eb      	strb	r3, [r5, #11]
    lv_style_btn_ina.text.color        = lv_color_make(0x70, 0x70, 0x70);
 8009642:	f895 3020 	ldrb.w	r3, [r5, #32]
 8009646:	f36a 0304 	bfi	r3, sl, #0, #5
 800964a:	f885 3020 	strb.w	r3, [r5, #32]
 800964e:	8c2b      	ldrh	r3, [r5, #32]
 8009650:	f36b 134a 	bfi	r3, fp, #5, #6
 8009654:	842b      	strh	r3, [r5, #32]
 8009656:	0a1b      	lsrs	r3, r3, #8
 8009658:	f36a 03c7 	bfi	r3, sl, #3, #5
 800965c:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
    lv_style_btn_ina.image.color       = lv_color_make(0x70, 0x70, 0x70);
 8009660:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8009664:	f36a 0304 	bfi	r3, sl, #0, #5
 8009668:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 800966c:	e00c      	b.n	8009688 <lv_style_init+0x730>
 800966e:	bf00      	nop
 8009670:	2000d634 	.word	0x2000d634
 8009674:	2000d670 	.word	0x2000d670
 8009678:	2000d7d8 	.word	0x2000d7d8
 800967c:	2000d724 	.word	0x2000d724
 8009680:	2000d6e8 	.word	0x2000d6e8
 8009684:	2000d850 	.word	0x2000d850
 8009688:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 800968a:	f36b 134a 	bfi	r3, fp, #5, #6
 800968e:	862b      	strh	r3, [r5, #48]	; 0x30
 8009690:	0a1b      	lsrs	r3, r3, #8
 8009692:	f36a 03c7 	bfi	r3, sl, #3, #5
 8009696:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
    lv_style_btn_ina.line.color        = lv_color_make(0x70, 0x70, 0x70);
 800969a:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 800969e:	f36a 0304 	bfi	r3, sl, #0, #5
 80096a2:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
 80096a6:	8eab      	ldrh	r3, [r5, #52]	; 0x34
 80096a8:	f36b 134a 	bfi	r3, fp, #5, #6
 80096ac:	86ab      	strh	r3, [r5, #52]	; 0x34
 80096ae:	0a1b      	lsrs	r3, r3, #8
 80096b0:	f36a 03c7 	bfi	r3, sl, #3, #5
 80096b4:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
}
 80096b8:	b005      	add	sp, #20
 80096ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096be:	bf00      	nop

080096c0 <lv_draw_get_buf>:
 * Be careful to not use the buffer while other processes are using it.
 * @param size the required size
 */
void * lv_draw_get_buf(uint32_t size)
{
    if(size <= draw_buf_size) return LV_GC_ROOT(_lv_draw_buf);
 80096c0:	4b11      	ldr	r3, [pc, #68]	; (8009708 <lv_draw_get_buf+0x48>)
 80096c2:	681a      	ldr	r2, [r3, #0]
 80096c4:	4282      	cmp	r2, r0
{
 80096c6:	b510      	push	{r4, lr}
 80096c8:	4601      	mov	r1, r0
 80096ca:	4c10      	ldr	r4, [pc, #64]	; (800970c <lv_draw_get_buf+0x4c>)
    if(size <= draw_buf_size) return LV_GC_ROOT(_lv_draw_buf);
 80096cc:	d301      	bcc.n	80096d2 <lv_draw_get_buf+0x12>
 80096ce:	6820      	ldr	r0, [r4, #0]
 80096d0:	bd10      	pop	{r4, pc}

    LV_LOG_TRACE("lv_draw_get_buf: allocate");

    draw_buf_size = size;
 80096d2:	6018      	str	r0, [r3, #0]

    if(LV_GC_ROOT(_lv_draw_buf) == NULL) {
 80096d4:	6823      	ldr	r3, [r4, #0]
 80096d6:	b953      	cbnz	r3, 80096ee <lv_draw_get_buf+0x2e>
        LV_GC_ROOT(_lv_draw_buf) = lv_mem_alloc(size);
 80096d8:	f003 fb6c 	bl	800cdb4 <lv_mem_alloc>
 80096dc:	6020      	str	r0, [r4, #0]
        lv_mem_assert(LV_GC_ROOT(_lv_draw_buf));
 80096de:	b990      	cbnz	r0, 8009706 <lv_draw_get_buf+0x46>
 80096e0:	4b0b      	ldr	r3, [pc, #44]	; (8009710 <lv_draw_get_buf+0x50>)
 80096e2:	490c      	ldr	r1, [pc, #48]	; (8009714 <lv_draw_get_buf+0x54>)
 80096e4:	223f      	movs	r2, #63	; 0x3f
 80096e6:	2003      	movs	r0, #3
 80096e8:	f003 fb0c 	bl	800cd04 <lv_log_add>
 80096ec:	e7fe      	b.n	80096ec <lv_draw_get_buf+0x2c>
        return LV_GC_ROOT(_lv_draw_buf);
    }

    LV_GC_ROOT(_lv_draw_buf) = lv_mem_realloc(LV_GC_ROOT(_lv_draw_buf), size);
 80096ee:	4618      	mov	r0, r3
 80096f0:	f003 fbcc 	bl	800ce8c <lv_mem_realloc>
 80096f4:	6020      	str	r0, [r4, #0]
    lv_mem_assert(LV_GC_ROOT(_lv_draw_buf));
 80096f6:	b930      	cbnz	r0, 8009706 <lv_draw_get_buf+0x46>
 80096f8:	4b05      	ldr	r3, [pc, #20]	; (8009710 <lv_draw_get_buf+0x50>)
 80096fa:	4906      	ldr	r1, [pc, #24]	; (8009714 <lv_draw_get_buf+0x54>)
 80096fc:	2244      	movs	r2, #68	; 0x44
 80096fe:	2003      	movs	r0, #3
 8009700:	f003 fb00 	bl	800cd04 <lv_log_add>
 8009704:	e7fe      	b.n	8009704 <lv_draw_get_buf+0x44>
    return LV_GC_ROOT(_lv_draw_buf);
}
 8009706:	bd10      	pop	{r4, pc}
 8009708:	200041e8 	.word	0x200041e8
 800970c:	2000d8e0 	.word	0x2000d8e0
 8009710:	080107dd 	.word	0x080107dd
 8009714:	08010927 	.word	0x08010927

08009718 <lv_draw_free_buf>:

/**
 * Free the draw buffer
 */
void lv_draw_free_buf(void)
{
 8009718:	b510      	push	{r4, lr}
    if(LV_GC_ROOT(_lv_draw_buf)) {
 800971a:	4c05      	ldr	r4, [pc, #20]	; (8009730 <lv_draw_free_buf+0x18>)
 800971c:	6820      	ldr	r0, [r4, #0]
 800971e:	b128      	cbz	r0, 800972c <lv_draw_free_buf+0x14>
        lv_mem_free(LV_GC_ROOT(_lv_draw_buf));
 8009720:	f003 fb8a 	bl	800ce38 <lv_mem_free>
        LV_GC_ROOT(_lv_draw_buf) = NULL;
        draw_buf_size = 0;
 8009724:	4a03      	ldr	r2, [pc, #12]	; (8009734 <lv_draw_free_buf+0x1c>)
        LV_GC_ROOT(_lv_draw_buf) = NULL;
 8009726:	2300      	movs	r3, #0
 8009728:	6023      	str	r3, [r4, #0]
        draw_buf_size = 0;
 800972a:	6013      	str	r3, [r2, #0]
 800972c:	bd10      	pop	{r4, pc}
 800972e:	bf00      	nop
 8009730:	2000d8e0 	.word	0x2000d8e0
 8009734:	200041e8 	.word	0x200041e8

08009738 <lv_draw_aa_get_opa>:
    static const lv_opa_t seg7[7] = {18, 55, 91, 128, 164, 200, 237};
    static const lv_opa_t seg8[8] = {16, 48, 80, 112, 143, 175, 207, 239};

    static const lv_opa_t * seg_map[] = {seg1, seg2, seg3, seg4, seg5, seg6, seg7, seg8};

    if(seg == 0)
 8009738:	b188      	cbz	r0, 800975e <lv_draw_aa_get_opa+0x26>
        return LV_OPA_TRANSP;
    else if(seg < 8)
 800973a:	2807      	cmp	r0, #7
 800973c:	dc08      	bgt.n	8009750 <lv_draw_aa_get_opa+0x18>
        return (uint32_t)((uint32_t)seg_map[seg - 1][px_id] * base_opa) >> 8;
 800973e:	3801      	subs	r0, #1
 8009740:	4b07      	ldr	r3, [pc, #28]	; (8009760 <lv_draw_aa_get_opa+0x28>)
 8009742:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8009746:	5c58      	ldrb	r0, [r3, r1]
 8009748:	fb10 f002 	smulbb	r0, r0, r2
 800974c:	0a00      	lsrs	r0, r0, #8
 800974e:	4770      	bx	lr
    else {
        return ((px_id * 2 + 1) * base_opa) / (2 * seg);
 8009750:	0049      	lsls	r1, r1, #1
 8009752:	fb01 2202 	mla	r2, r1, r2, r2
 8009756:	0040      	lsls	r0, r0, #1
 8009758:	fb92 f0f0 	sdiv	r0, r2, r0
 800975c:	b2c0      	uxtb	r0, r0
    }
}
 800975e:	4770      	bx	lr
 8009760:	0801096c 	.word	0x0801096c

08009764 <lv_color_mix>:
static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 8009764:	f1c2 03ff 	rsb	r3, r2, #255	; 0xff
{
 8009768:	b570      	push	{r4, r5, r6, lr}
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 800976a:	b294      	uxth	r4, r2
 800976c:	b29a      	uxth	r2, r3
 800976e:	f3c1 23c4 	ubfx	r3, r1, #11, #5
 8009772:	fb13 f302 	smulbb	r3, r3, r2
 8009776:	f3c0 25c4 	ubfx	r5, r0, #11, #5
    uint16_t g_2   = (c2.ch.green_h << 3) + c2.ch.green_l;
    uint16_t g_out = (uint16_t)((uint16_t)g_1 * mix + (g_2 * (255 - mix))) >> 8;
    ret.ch.green_h = g_out >> 3;
    ret.ch.green_l = g_out & 0x7;
#else
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 800977a:	f3c1 1645 	ubfx	r6, r1, #5, #6
#endif
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 800977e:	f001 011f 	and.w	r1, r1, #31
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 8009782:	fb05 3504 	mla	r5, r5, r4, r3
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 8009786:	fb16 f602 	smulbb	r6, r6, r2
 800978a:	f3c0 1345 	ubfx	r3, r0, #5, #6
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 800978e:	fb11 f202 	smulbb	r2, r1, r2
 8009792:	f000 001f 	and.w	r0, r0, #31
 8009796:	fb00 2204 	mla	r2, r0, r4, r2
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 800979a:	fb03 6304 	mla	r3, r3, r4, r6
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 800979e:	f3c2 2207 	ubfx	r2, r2, #8, #8
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 80097a2:	f04f 0000 	mov.w	r0, #0
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 80097a6:	f3c3 2305 	ubfx	r3, r3, #8, #6
    return ret;
 80097aa:	f362 0004 	bfi	r0, r2, #0, #5
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 80097ae:	f3c5 2504 	ubfx	r5, r5, #8, #5
    return ret;
 80097b2:	f363 104a 	bfi	r0, r3, #5, #6
 80097b6:	f365 20cf 	bfi	r0, r5, #11, #5
}
 80097ba:	bd70      	pop	{r4, r5, r6, pc}

080097bc <sw_color_fill>:
 * @param color fill color
 * @param opa opacity (0, LV_OPA_TRANSP: transparent ... 255, LV_OPA_COVER, fully cover)
 */
static void sw_color_fill(lv_color_t * mem, lv_coord_t mem_width, const lv_area_t * fill_area, lv_color_t color,
                          lv_opa_t opa)
{
 80097bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097c0:	b087      	sub	sp, #28
 80097c2:	4699      	mov	r9, r3
 80097c4:	9005      	str	r0, [sp, #20]
 80097c6:	9104      	str	r1, [sp, #16]
 80097c8:	4614      	mov	r4, r2
 80097ca:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
    /*Set all row in vdb to the given color*/
    lv_coord_t row;
    lv_coord_t col;

    lv_disp_t * disp = lv_refr_get_disp_refreshing();
 80097ce:	f7ff fa03 	bl	8008bd8 <lv_refr_get_disp_refreshing>
    if(disp->driver.set_px_cb) {
 80097d2:	6943      	ldr	r3, [r0, #20]
    lv_disp_t * disp = lv_refr_get_disp_refreshing();
 80097d4:	4683      	mov	fp, r0
    if(disp->driver.set_px_cb) {
 80097d6:	b313      	cbz	r3, 800981e <sw_color_fill+0x62>
        for(col = fill_area->x1; col <= fill_area->x2; col++) {
 80097d8:	f9b4 6000 	ldrsh.w	r6, [r4]
 80097dc:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80097e0:	42b3      	cmp	r3, r6
 80097e2:	da02      	bge.n	80097ea <sw_color_fill+0x2e>
                }
                mem += mem_width;
            }
        }
    }
}
 80097e4:	b007      	add	sp, #28
 80097e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 80097ea:	f9b4 7002 	ldrsh.w	r7, [r4, #2]
 80097ee:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80097f2:	42bb      	cmp	r3, r7
 80097f4:	da02      	bge.n	80097fc <sw_color_fill+0x40>
 80097f6:	3601      	adds	r6, #1
 80097f8:	b236      	sxth	r6, r6
 80097fa:	e7ef      	b.n	80097dc <sw_color_fill+0x20>
                disp->driver.set_px_cb(&disp->driver, (uint8_t *)mem, mem_width, col, row, color, opa);
 80097fc:	9700      	str	r7, [sp, #0]
 80097fe:	f8cd a008 	str.w	sl, [sp, #8]
 8009802:	f8ad 9004 	strh.w	r9, [sp, #4]
 8009806:	4633      	mov	r3, r6
 8009808:	9a04      	ldr	r2, [sp, #16]
 800980a:	9905      	ldr	r1, [sp, #20]
 800980c:	f8db 5014 	ldr.w	r5, [fp, #20]
 8009810:	4658      	mov	r0, fp
 8009812:	f107 0801 	add.w	r8, r7, #1
 8009816:	47a8      	blx	r5
 8009818:	fa0f f788 	sxth.w	r7, r8
 800981c:	e7e7      	b.n	80097ee <sw_color_fill+0x32>
        mem += fill_area->y1 * mem_width; /*Go to the first row*/
 800981e:	9a04      	ldr	r2, [sp, #16]
 8009820:	f9b4 7002 	ldrsh.w	r7, [r4, #2]
 8009824:	fb07 f602 	mul.w	r6, r7, r2
 8009828:	9a05      	ldr	r2, [sp, #20]
        if(opa == LV_OPA_COVER) {
 800982a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
        mem += fill_area->y1 * mem_width; /*Go to the first row*/
 800982e:	eb02 0646 	add.w	r6, r2, r6, lsl #1
        if(opa == LV_OPA_COVER) {
 8009832:	d127      	bne.n	8009884 <sw_color_fill+0xc8>
            for(col = fill_area->x1; col <= fill_area->x2; col++) {
 8009834:	f9b4 1000 	ldrsh.w	r1, [r4]
 8009838:	460a      	mov	r2, r1
 800983a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800983e:	429a      	cmp	r2, r3
 8009840:	dd1b      	ble.n	800987a <sw_color_fill+0xbe>
            lv_coord_t copy_size   = (fill_area->x2 - fill_area->x1 + 1) * sizeof(lv_color_t);
 8009842:	eba3 0901 	sub.w	r9, r3, r1
 8009846:	f109 0901 	add.w	r9, r9, #1
            mem += mem_width;
 800984a:	9b04      	ldr	r3, [sp, #16]
            lv_coord_t copy_size   = (fill_area->x2 - fill_area->x1 + 1) * sizeof(lv_color_t);
 800984c:	ea4f 0949 	mov.w	r9, r9, lsl #1
            lv_color_t * mem_first = &mem[fill_area->x1];
 8009850:	eb06 0841 	add.w	r8, r6, r1, lsl #1
            lv_coord_t copy_size   = (fill_area->x2 - fill_area->x1 + 1) * sizeof(lv_color_t);
 8009854:	fa0f f989 	sxth.w	r9, r9
            mem += mem_width;
 8009858:	005d      	lsls	r5, r3, #1
 800985a:	3701      	adds	r7, #1
            for(row = fill_area->y1 + 1; row <= fill_area->y2; row++) {
 800985c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8009860:	b23f      	sxth	r7, r7
 8009862:	42bb      	cmp	r3, r7
                mem += mem_width;
 8009864:	442e      	add	r6, r5
            for(row = fill_area->y1 + 1; row <= fill_area->y2; row++) {
 8009866:	dbbd      	blt.n	80097e4 <sw_color_fill+0x28>
                memcpy(&mem[fill_area->x1], mem_first, copy_size);
 8009868:	f9b4 0000 	ldrsh.w	r0, [r4]
 800986c:	464a      	mov	r2, r9
 800986e:	4641      	mov	r1, r8
 8009870:	eb06 0040 	add.w	r0, r6, r0, lsl #1
 8009874:	f003 ff6e 	bl	800d754 <memcpy>
 8009878:	e7ef      	b.n	800985a <sw_color_fill+0x9e>
                mem[col] = color;
 800987a:	f826 9012 	strh.w	r9, [r6, r2, lsl #1]
 800987e:	3201      	adds	r2, #1
 8009880:	b212      	sxth	r2, r2
 8009882:	e7da      	b.n	800983a <sw_color_fill+0x7e>
            lv_color_t bg_tmp  = LV_COLOR_BLACK;
 8009884:	f04f 0800 	mov.w	r8, #0
 8009888:	f363 0804 	bfi	r8, r3, #0, #5
 800988c:	f363 184a 	bfi	r8, r3, #5, #6
 8009890:	f363 28cf 	bfi	r8, r3, #11, #5
            lv_color_t opa_tmp = lv_color_mix(color, bg_tmp, opa);
 8009894:	4652      	mov	r2, sl
 8009896:	4641      	mov	r1, r8
 8009898:	4648      	mov	r0, r9
 800989a:	f7ff ff63 	bl	8009764 <lv_color_mix>
                mem += mem_width;
 800989e:	9b04      	ldr	r3, [sp, #16]
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 80098a0:	f9b4 b002 	ldrsh.w	fp, [r4, #2]
                mem += mem_width;
 80098a4:	005d      	lsls	r5, r3, #1
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 80098a6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80098aa:	455b      	cmp	r3, fp
 80098ac:	db9a      	blt.n	80097e4 <sw_color_fill+0x28>
                for(col = fill_area->x1; col <= fill_area->x2; col++) {
 80098ae:	f9b4 7000 	ldrsh.w	r7, [r4]
 80098b2:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80098b6:	42bb      	cmp	r3, r7
 80098b8:	da05      	bge.n	80098c6 <sw_color_fill+0x10a>
 80098ba:	f10b 0b01 	add.w	fp, fp, #1
                mem += mem_width;
 80098be:	442e      	add	r6, r5
 80098c0:	fa0f fb8b 	sxth.w	fp, fp
 80098c4:	e7ef      	b.n	80098a6 <sw_color_fill+0xea>
                        if(mem[col].full != bg_tmp.full) {
 80098c6:	f836 1017 	ldrh.w	r1, [r6, r7, lsl #1]
 80098ca:	fa1f f288 	uxth.w	r2, r8
 80098ce:	4291      	cmp	r1, r2
 80098d0:	eb06 0347 	add.w	r3, r6, r7, lsl #1
 80098d4:	d006      	beq.n	80098e4 <sw_color_fill+0x128>
                            opa_tmp = lv_color_mix(color, bg_tmp, opa);
 80098d6:	4652      	mov	r2, sl
 80098d8:	4648      	mov	r0, r9
 80098da:	9304      	str	r3, [sp, #16]
                            bg_tmp  = mem[col];
 80098dc:	4688      	mov	r8, r1
                            opa_tmp = lv_color_mix(color, bg_tmp, opa);
 80098de:	f7ff ff41 	bl	8009764 <lv_color_mix>
 80098e2:	9b04      	ldr	r3, [sp, #16]
                        mem[col] = opa_tmp;
 80098e4:	8018      	strh	r0, [r3, #0]
 80098e6:	3701      	adds	r7, #1
 80098e8:	b23f      	sxth	r7, r7
 80098ea:	e7e2      	b.n	80098b2 <sw_color_fill+0xf6>

080098ec <lv_draw_px>:
{
 80098ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80098f0:	b085      	sub	sp, #20
 80098f2:	4606      	mov	r6, r0
 80098f4:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
    if(opa < LV_OPA_MIN) return;
 80098f8:	f1b9 0f0f 	cmp.w	r9, #15
{
 80098fc:	460d      	mov	r5, r1
 80098fe:	461f      	mov	r7, r3
    if(opa < LV_OPA_MIN) return;
 8009900:	d92e      	bls.n	8009960 <lv_draw_px+0x74>
    if(x < mask_p->x1 || x > mask_p->x2 || y < mask_p->y1 || y > mask_p->y2) {
 8009902:	f9b2 3000 	ldrsh.w	r3, [r2]
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 8009906:	f1b9 0ffc 	cmp.w	r9, #252	; 0xfc
 800990a:	bf28      	it	cs
 800990c:	f04f 09ff 	movcs.w	r9, #255	; 0xff
    if(x < mask_p->x1 || x > mask_p->x2 || y < mask_p->y1 || y > mask_p->y2) {
 8009910:	4283      	cmp	r3, r0
 8009912:	dc25      	bgt.n	8009960 <lv_draw_px+0x74>
 8009914:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8009918:	4283      	cmp	r3, r0
 800991a:	db21      	blt.n	8009960 <lv_draw_px+0x74>
 800991c:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8009920:	428b      	cmp	r3, r1
 8009922:	dc1d      	bgt.n	8009960 <lv_draw_px+0x74>
 8009924:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8009928:	428b      	cmp	r3, r1
 800992a:	db19      	blt.n	8009960 <lv_draw_px+0x74>
    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
 800992c:	f7ff f954 	bl	8008bd8 <lv_refr_get_disp_refreshing>
 8009930:	4680      	mov	r8, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8009932:	f002 fe25 	bl	800c580 <lv_disp_get_buf>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return area_p->x2 - area_p->x1 + 1;
 8009936:	8a82      	ldrh	r2, [r0, #20]
 8009938:	8a04      	ldrh	r4, [r0, #16]
 800993a:	3201      	adds	r2, #1
 800993c:	1b12      	subs	r2, r2, r4
    x -= vdb->area.x1;
 800993e:	1b36      	subs	r6, r6, r4
    y -= vdb->area.y1;
 8009940:	8a44      	ldrh	r4, [r0, #18]
 8009942:	1b2c      	subs	r4, r5, r4
    if(disp->driver.set_px_cb) {
 8009944:	f8d8 5014 	ldr.w	r5, [r8, #20]
 8009948:	b212      	sxth	r2, r2
    x -= vdb->area.x1;
 800994a:	b233      	sxth	r3, r6
    y -= vdb->area.y1;
 800994c:	b224      	sxth	r4, r4
    if(disp->driver.set_px_cb) {
 800994e:	b155      	cbz	r5, 8009966 <lv_draw_px+0x7a>
        disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, x, y, color, opa);
 8009950:	f8cd 9008 	str.w	r9, [sp, #8]
 8009954:	f8ad 7004 	strh.w	r7, [sp, #4]
 8009958:	9400      	str	r4, [sp, #0]
 800995a:	6881      	ldr	r1, [r0, #8]
 800995c:	4640      	mov	r0, r8
 800995e:	47a8      	blx	r5
}
 8009960:	b005      	add	sp, #20
 8009962:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            if(opa == LV_OPA_COVER) {
 8009966:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
        lv_color_t * vdb_px_p = vdb->buf_act;
 800996a:	6885      	ldr	r5, [r0, #8]
        vdb_px_p += y * vdb_width + x;
 800996c:	fb02 3404 	mla	r4, r2, r4, r3
            if(opa == LV_OPA_COVER) {
 8009970:	d102      	bne.n	8009978 <lv_draw_px+0x8c>
                *vdb_px_p = color;
 8009972:	f825 7014 	strh.w	r7, [r5, r4, lsl #1]
 8009976:	e7f3      	b.n	8009960 <lv_draw_px+0x74>
                *vdb_px_p = lv_color_mix(color, *vdb_px_p, opa);
 8009978:	464a      	mov	r2, r9
 800997a:	f835 1014 	ldrh.w	r1, [r5, r4, lsl #1]
 800997e:	4638      	mov	r0, r7
 8009980:	f7ff fef0 	bl	8009764 <lv_color_mix>
 8009984:	f825 0014 	strh.w	r0, [r5, r4, lsl #1]
 8009988:	e7ea      	b.n	8009960 <lv_draw_px+0x74>
	...

0800998c <lv_draw_fill>:
{
 800998c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(opa < LV_OPA_MIN) return;
 8009990:	2b0f      	cmp	r3, #15
{
 8009992:	b087      	sub	sp, #28
 8009994:	4692      	mov	sl, r2
 8009996:	4699      	mov	r9, r3
    if(opa < LV_OPA_MIN) return;
 8009998:	d950      	bls.n	8009a3c <lv_draw_fill+0xb0>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800999a:	2bfc      	cmp	r3, #252	; 0xfc
 800999c:	fa1f fb82 	uxth.w	fp, r2
    union_ok = lv_area_intersect(&res_a, cords_p, mask_p);
 80099a0:	460a      	mov	r2, r1
 80099a2:	4601      	mov	r1, r0
 80099a4:	a802      	add	r0, sp, #8
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 80099a6:	bf28      	it	cs
 80099a8:	f04f 09ff 	movcs.w	r9, #255	; 0xff
    union_ok = lv_area_intersect(&res_a, cords_p, mask_p);
 80099ac:	f002 feeb 	bl	800c786 <lv_area_intersect>
    if(union_ok == false) {
 80099b0:	2800      	cmp	r0, #0
 80099b2:	d043      	beq.n	8009a3c <lv_draw_fill+0xb0>
    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
 80099b4:	f7ff f910 	bl	8008bd8 <lv_refr_get_disp_refreshing>
 80099b8:	4680      	mov	r8, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 80099ba:	f002 fde1 	bl	800c580 <lv_disp_get_buf>
    vdb_rel_a.y1 = res_a.y1 - vdb->area.y1;
 80099be:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80099c2:	8a41      	ldrh	r1, [r0, #18]
    vdb_rel_a.x1 = res_a.x1 - vdb->area.x1;
 80099c4:	f8b0 c010 	ldrh.w	ip, [r0, #16]
    vdb_rel_a.x2 = res_a.x2 - vdb->area.x1;
 80099c8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    vdb_rel_a.x1 = res_a.x1 - vdb->area.x1;
 80099cc:	f8bd 4008 	ldrh.w	r4, [sp, #8]
    vdb_rel_a.y1 = res_a.y1 - vdb->area.y1;
 80099d0:	1a5b      	subs	r3, r3, r1
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 80099d2:	4607      	mov	r7, r0
    vdb_rel_a.y1 = res_a.y1 - vdb->area.y1;
 80099d4:	fa1f fe83 	uxth.w	lr, r3
    vdb_rel_a.x2 = res_a.x2 - vdb->area.x1;
 80099d8:	eba2 020c 	sub.w	r2, r2, ip
    vdb_rel_a.y2 = res_a.y2 - vdb->area.y1;
 80099dc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    lv_color_t * vdb_buf_tmp = vdb->buf_act;
 80099e0:	6880      	ldr	r0, [r0, #8]
    vdb_rel_a.x1 = res_a.x1 - vdb->area.x1;
 80099e2:	eba4 040c 	sub.w	r4, r4, ip
    vdb_rel_a.x2 = res_a.x2 - vdb->area.x1;
 80099e6:	b292      	uxth	r2, r2
    vdb_rel_a.x1 = res_a.x1 - vdb->area.x1;
 80099e8:	b2a6      	uxth	r6, r4
    vdb_rel_a.y2 = res_a.y2 - vdb->area.y1;
 80099ea:	1a5b      	subs	r3, r3, r1
 80099ec:	1c54      	adds	r4, r2, #1
 80099ee:	8ab9      	ldrh	r1, [r7, #20]
    vdb_rel_a.x1 = res_a.x1 - vdb->area.x1;
 80099f0:	f8ad 6010 	strh.w	r6, [sp, #16]
 80099f4:	1ba4      	subs	r4, r4, r6
 80099f6:	3101      	adds	r1, #1
 80099f8:	b224      	sxth	r4, r4
    vdb_rel_a.y1 = res_a.y1 - vdb->area.y1;
 80099fa:	fa0f f58e 	sxth.w	r5, lr
    vdb_rel_a.y2 = res_a.y2 - vdb->area.y1;
 80099fe:	b29b      	uxth	r3, r3
 8009a00:	eba1 010c 	sub.w	r1, r1, ip
    if(w < VFILL_HW_ACC_SIZE_LIMIT) {
 8009a04:	2c31      	cmp	r4, #49	; 0x31
    vdb_rel_a.y1 = res_a.y1 - vdb->area.y1;
 8009a06:	f8ad 5012 	strh.w	r5, [sp, #18]
    vdb_rel_a.x2 = res_a.x2 - vdb->area.x1;
 8009a0a:	f8ad 2014 	strh.w	r2, [sp, #20]
    vdb_rel_a.y2 = res_a.y2 - vdb->area.y1;
 8009a0e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009a12:	b209      	sxth	r1, r1
    if(w < VFILL_HW_ACC_SIZE_LIMIT) {
 8009a14:	dc02      	bgt.n	8009a1c <lv_draw_fill+0x90>
            sw_color_fill(vdb->buf_act, vdb_width, &vdb_rel_a, color, opa);
 8009a16:	f8cd 9000 	str.w	r9, [sp]
 8009a1a:	e04a      	b.n	8009ab2 <lv_draw_fill+0x126>
    vdb_buf_tmp += vdb_width * vdb_rel_a.y1;
 8009a1c:	006f      	lsls	r7, r5, #1
    else if(opa == LV_OPA_COVER) {
 8009a1e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    vdb_buf_tmp += vdb_width * vdb_rel_a.y1;
 8009a22:	fb01 0707 	mla	r7, r1, r7, r0
    else if(opa == LV_OPA_COVER) {
 8009a26:	d149      	bne.n	8009abc <lv_draw_fill+0x130>
        if(disp->driver.gpu_fill_cb) {
 8009a28:	f8d8 6020 	ldr.w	r6, [r8, #32]
 8009a2c:	b14e      	cbz	r6, 8009a42 <lv_draw_fill+0xb6>
            disp->driver.gpu_fill_cb(&disp->driver, vdb->buf_act, vdb_width, &vdb_rel_a, color);
 8009a2e:	460a      	mov	r2, r1
 8009a30:	f8ad a000 	strh.w	sl, [sp]
 8009a34:	4601      	mov	r1, r0
 8009a36:	ab04      	add	r3, sp, #16
 8009a38:	4640      	mov	r0, r8
 8009a3a:	47b0      	blx	r6
}
 8009a3c:	b007      	add	sp, #28
 8009a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 8009a42:	3301      	adds	r3, #1
 8009a44:	eba3 030e 	sub.w	r3, r3, lr
        else if(lv_area_get_height(&vdb_rel_a) > VFILL_HW_ACC_SIZE_LIMIT && disp->driver.gpu_blend_cb) {
 8009a48:	b21b      	sxth	r3, r3
 8009a4a:	2b32      	cmp	r3, #50	; 0x32
 8009a4c:	dd2f      	ble.n	8009aae <lv_draw_fill+0x122>
 8009a4e:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8009a52:	b363      	cbz	r3, 8009aae <lv_draw_fill+0x122>
            if(color_array_tmp[0].full != color.full || last_width != w) {
 8009a54:	4b32      	ldr	r3, [pc, #200]	; (8009b20 <lv_draw_fill+0x194>)
 8009a56:	881a      	ldrh	r2, [r3, #0]
 8009a58:	455a      	cmp	r2, fp
 8009a5a:	d104      	bne.n	8009a66 <lv_draw_fill+0xda>
 8009a5c:	4a31      	ldr	r2, [pc, #196]	; (8009b24 <lv_draw_fill+0x198>)
 8009a5e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8009a62:	42a2      	cmp	r2, r4
 8009a64:	d006      	beq.n	8009a74 <lv_draw_fill+0xe8>
                for(i = 0; i < w; i++) {
 8009a66:	b2b2      	uxth	r2, r6
 8009a68:	42a2      	cmp	r2, r4
 8009a6a:	f106 0601 	add.w	r6, r6, #1
 8009a6e:	db1b      	blt.n	8009aa8 <lv_draw_fill+0x11c>
                last_width = w;
 8009a70:	4b2c      	ldr	r3, [pc, #176]	; (8009b24 <lv_draw_fill+0x198>)
 8009a72:	801c      	strh	r4, [r3, #0]
                disp->driver.gpu_blend_cb(&disp->driver, &vdb_buf_tmp[vdb_rel_a.x1], color_array_tmp, w, opa);
 8009a74:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 8009b20 <lv_draw_fill+0x194>
                vdb_buf_tmp += vdb_width;
 8009a78:	ea4f 0941 	mov.w	r9, r1, lsl #1
                disp->driver.gpu_blend_cb(&disp->driver, &vdb_buf_tmp[vdb_rel_a.x1], color_array_tmp, w, opa);
 8009a7c:	f04f 0aff 	mov.w	sl, #255	; 0xff
            for(row = vdb_rel_a.y1; row <= vdb_rel_a.y2; row++) {
 8009a80:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8009a84:	42ab      	cmp	r3, r5
 8009a86:	dbd9      	blt.n	8009a3c <lv_draw_fill+0xb0>
                disp->driver.gpu_blend_cb(&disp->driver, &vdb_buf_tmp[vdb_rel_a.x1], color_array_tmp, w, opa);
 8009a88:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 8009a8c:	f8cd a000 	str.w	sl, [sp]
 8009a90:	eb07 0141 	add.w	r1, r7, r1, lsl #1
 8009a94:	4623      	mov	r3, r4
 8009a96:	465a      	mov	r2, fp
 8009a98:	4640      	mov	r0, r8
 8009a9a:	f8d8 601c 	ldr.w	r6, [r8, #28]
 8009a9e:	3501      	adds	r5, #1
 8009aa0:	47b0      	blx	r6
                vdb_buf_tmp += vdb_width;
 8009aa2:	444f      	add	r7, r9
 8009aa4:	b22d      	sxth	r5, r5
 8009aa6:	e7eb      	b.n	8009a80 <lv_draw_fill+0xf4>
                    color_array_tmp[i].full = color.full;
 8009aa8:	f823 b012 	strh.w	fp, [r3, r2, lsl #1]
 8009aac:	e7db      	b.n	8009a66 <lv_draw_fill+0xda>
            sw_color_fill(vdb->buf_act, vdb_width, &vdb_rel_a, color, opa);
 8009aae:	23ff      	movs	r3, #255	; 0xff
 8009ab0:	9300      	str	r3, [sp, #0]
            sw_color_fill(vdb->buf_act, vdb_width, &vdb_rel_a, color, opa);
 8009ab2:	4653      	mov	r3, sl
 8009ab4:	aa04      	add	r2, sp, #16
 8009ab6:	f7ff fe81 	bl	80097bc <sw_color_fill>
 8009aba:	e7bf      	b.n	8009a3c <lv_draw_fill+0xb0>
        if(disp->driver.gpu_blend_cb) {
 8009abc:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d0a8      	beq.n	8009a16 <lv_draw_fill+0x8a>
            if(color_array_tmp[0].full != color.full || last_width != w) {
 8009ac4:	4b16      	ldr	r3, [pc, #88]	; (8009b20 <lv_draw_fill+0x194>)
 8009ac6:	881a      	ldrh	r2, [r3, #0]
 8009ac8:	455a      	cmp	r2, fp
 8009aca:	461a      	mov	r2, r3
 8009acc:	d104      	bne.n	8009ad8 <lv_draw_fill+0x14c>
 8009ace:	4b15      	ldr	r3, [pc, #84]	; (8009b24 <lv_draw_fill+0x198>)
 8009ad0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009ad4:	42a3      	cmp	r3, r4
 8009ad6:	d007      	beq.n	8009ae8 <lv_draw_fill+0x15c>
 8009ad8:	2300      	movs	r3, #0
                for(i = 0; i < w; i++) {
 8009ada:	b298      	uxth	r0, r3
 8009adc:	42a0      	cmp	r0, r4
 8009ade:	f103 0301 	add.w	r3, r3, #1
 8009ae2:	db19      	blt.n	8009b18 <lv_draw_fill+0x18c>
                last_width = w;
 8009ae4:	4b0f      	ldr	r3, [pc, #60]	; (8009b24 <lv_draw_fill+0x198>)
 8009ae6:	801c      	strh	r4, [r3, #0]
                disp->driver.gpu_blend_cb(&disp->driver, &vdb_buf_tmp[vdb_rel_a.x1], color_array_tmp, w, opa);
 8009ae8:	f8df b034 	ldr.w	fp, [pc, #52]	; 8009b20 <lv_draw_fill+0x194>
                vdb_buf_tmp += vdb_width;
 8009aec:	ea4f 0a41 	mov.w	sl, r1, lsl #1
            for(row = vdb_rel_a.y1; row <= vdb_rel_a.y2; row++) {
 8009af0:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8009af4:	42ab      	cmp	r3, r5
 8009af6:	dba1      	blt.n	8009a3c <lv_draw_fill+0xb0>
                disp->driver.gpu_blend_cb(&disp->driver, &vdb_buf_tmp[vdb_rel_a.x1], color_array_tmp, w, opa);
 8009af8:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 8009afc:	f8cd 9000 	str.w	r9, [sp]
 8009b00:	eb07 0141 	add.w	r1, r7, r1, lsl #1
 8009b04:	4623      	mov	r3, r4
 8009b06:	465a      	mov	r2, fp
 8009b08:	4640      	mov	r0, r8
 8009b0a:	f8d8 601c 	ldr.w	r6, [r8, #28]
 8009b0e:	3501      	adds	r5, #1
 8009b10:	47b0      	blx	r6
                vdb_buf_tmp += vdb_width;
 8009b12:	4457      	add	r7, sl
 8009b14:	b22d      	sxth	r5, r5
 8009b16:	e7eb      	b.n	8009af0 <lv_draw_fill+0x164>
                    color_array_tmp[i].full = color.full;
 8009b18:	f822 b010 	strh.w	fp, [r2, r0, lsl #1]
 8009b1c:	e7dd      	b.n	8009ada <lv_draw_fill+0x14e>
 8009b1e:	bf00      	nop
 8009b20:	200041ec 	.word	0x200041ec
 8009b24:	20000148 	.word	0x20000148

08009b28 <lv_img_color_format_get_px_size>:
 * Get the pixel size of a color format in bits
 * @param cf a color format (`LV_IMG_CF_...`)
 * @return the pixel size in bits
 */
uint8_t lv_img_color_format_get_px_size(lv_img_cf_t cf)
{
 8009b28:	3804      	subs	r0, #4
 8009b2a:	b2c0      	uxtb	r0, r0
 8009b2c:	280a      	cmp	r0, #10
 8009b2e:	bf9a      	itte	ls
 8009b30:	4b01      	ldrls	r3, [pc, #4]	; (8009b38 <lv_img_color_format_get_px_size+0x10>)
 8009b32:	5c18      	ldrbls	r0, [r3, r0]
 8009b34:	2000      	movhi	r0, #0
        case LV_IMG_CF_ALPHA_8BIT: px_size = 8; break;
        default: px_size = 0; break;
    }

    return px_size;
}
 8009b36:	4770      	bx	lr
 8009b38:	0801098c 	.word	0x0801098c

08009b3c <lv_img_src_get_type>:
 */
lv_img_src_t lv_img_src_get_type(const void * src)
{
    lv_img_src_t img_src_type = LV_IMG_SRC_UNKNOWN;

    if(src == NULL) return img_src_type;
 8009b3c:	b150      	cbz	r0, 8009b54 <lv_img_src_get_type+0x18>
    const uint8_t * u8_p = src;

    /*The first byte shows the type of the image source*/
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 8009b3e:	7803      	ldrb	r3, [r0, #0]
 8009b40:	f1a3 0220 	sub.w	r2, r3, #32
 8009b44:	2a5f      	cmp	r2, #95	; 0x5f
 8009b46:	d907      	bls.n	8009b58 <lv_img_src_get_type+0x1c>
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
    } else if(u8_p[0] >= 0x80) {
 8009b48:	f013 0f80 	tst.w	r3, #128	; 0x80
        img_src_type = LV_IMG_SRC_SYMBOL; /*Symbols begins after 0x7F*/
    } else {
        img_src_type = LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is design to the first byte < 0x20*/
 8009b4c:	bf14      	ite	ne
 8009b4e:	2002      	movne	r0, #2
 8009b50:	2000      	moveq	r0, #0
 8009b52:	4770      	bx	lr
    if(src == NULL) return img_src_type;
 8009b54:	2003      	movs	r0, #3
 8009b56:	4770      	bx	lr
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
 8009b58:	2001      	movs	r0, #1
    if(LV_IMG_SRC_UNKNOWN == img_src_type) {
        LV_LOG_WARN("lv_img_src_get_type: unknown image type");
    }

    return img_src_type;
}
 8009b5a:	4770      	bx	lr

08009b5c <lv_color_mix>:
static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 8009b5c:	f1c2 03ff 	rsb	r3, r2, #255	; 0xff
{
 8009b60:	b570      	push	{r4, r5, r6, lr}
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 8009b62:	b294      	uxth	r4, r2
 8009b64:	b29a      	uxth	r2, r3
 8009b66:	f3c1 23c4 	ubfx	r3, r1, #11, #5
 8009b6a:	fb13 f302 	smulbb	r3, r3, r2
 8009b6e:	f3c0 25c4 	ubfx	r5, r0, #11, #5
    uint16_t g_2   = (c2.ch.green_h << 3) + c2.ch.green_l;
    uint16_t g_out = (uint16_t)((uint16_t)g_1 * mix + (g_2 * (255 - mix))) >> 8;
    ret.ch.green_h = g_out >> 3;
    ret.ch.green_l = g_out & 0x7;
#else
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 8009b72:	f3c1 1645 	ubfx	r6, r1, #5, #6
#endif
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 8009b76:	f001 011f 	and.w	r1, r1, #31
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 8009b7a:	fb05 3504 	mla	r5, r5, r4, r3
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 8009b7e:	fb16 f602 	smulbb	r6, r6, r2
 8009b82:	f3c0 1345 	ubfx	r3, r0, #5, #6
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 8009b86:	fb11 f202 	smulbb	r2, r1, r2
 8009b8a:	f000 001f 	and.w	r0, r0, #31
 8009b8e:	fb00 2204 	mla	r2, r0, r4, r2
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 8009b92:	fb03 6304 	mla	r3, r3, r4, r6
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 8009b96:	f3c2 2207 	ubfx	r2, r2, #8, #8
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 8009b9a:	f04f 0000 	mov.w	r0, #0
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 8009b9e:	f3c3 2305 	ubfx	r3, r3, #8, #6
    return ret;
 8009ba2:	f362 0004 	bfi	r0, r2, #0, #5
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 8009ba6:	f3c5 2504 	ubfx	r5, r5, #8, #5
    return ret;
 8009baa:	f363 104a 	bfi	r0, r3, #5, #6
 8009bae:	f365 20cf 	bfi	r0, r5, #11, #5
}
 8009bb2:	bd70      	pop	{r4, r5, r6, pc}

08009bb4 <lv_draw_cont_radius_corr>:
}

#endif

static uint16_t lv_draw_cont_radius_corr(uint16_t r, lv_coord_t w, lv_coord_t h)
{
 8009bb4:	b570      	push	{r4, r5, r6, lr}
 8009bb6:	460e      	mov	r6, r1
 8009bb8:	4604      	mov	r4, r0
 8009bba:	4615      	mov	r5, r2
    bool aa = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8009bbc:	f7ff f80c 	bl	8008bd8 <lv_refr_get_disp_refreshing>
 8009bc0:	f002 fcce 	bl	800c560 <lv_disp_get_antialiasing>

    if(r >= (w >> 1)) {
 8009bc4:	1071      	asrs	r1, r6, #1
 8009bc6:	428c      	cmp	r4, r1
 8009bc8:	db03      	blt.n	8009bd2 <lv_draw_cont_radius_corr+0x1e>
        r = (w >> 1);
 8009bca:	b28c      	uxth	r4, r1
        if(r != 0) r--;
 8009bcc:	b10c      	cbz	r4, 8009bd2 <lv_draw_cont_radius_corr+0x1e>
 8009bce:	3c01      	subs	r4, #1
 8009bd0:	b2a4      	uxth	r4, r4
    }
    if(r >= (h >> 1)) {
 8009bd2:	106a      	asrs	r2, r5, #1
 8009bd4:	4294      	cmp	r4, r2
 8009bd6:	db03      	blt.n	8009be0 <lv_draw_cont_radius_corr+0x2c>
        r = (h >> 1);
 8009bd8:	b294      	uxth	r4, r2
        if(r != 0) r--;
 8009bda:	b124      	cbz	r4, 8009be6 <lv_draw_cont_radius_corr+0x32>
 8009bdc:	3c01      	subs	r4, #1
 8009bde:	b2a4      	uxth	r4, r4
    }

    if(r > 0) r -= aa;
 8009be0:	b10c      	cbz	r4, 8009be6 <lv_draw_cont_radius_corr+0x32>
 8009be2:	1a24      	subs	r4, r4, r0
 8009be4:	b2a4      	uxth	r4, r4

    return r;
}
 8009be6:	4620      	mov	r0, r4
 8009be8:	bd70      	pop	{r4, r5, r6, pc}
	...

08009bec <antialias_get_opa_circ>:
#if CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD < 1
    if(seg == 1) return 170;
#endif

#if CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD < 2
    if(seg == 2) return (opa_map2[px_id] * opa) >> 8;
 8009bec:	2802      	cmp	r0, #2
 8009bee:	d105      	bne.n	8009bfc <antialias_get_opa_circ+0x10>
 8009bf0:	4b0b      	ldr	r3, [pc, #44]	; (8009c20 <antialias_get_opa_circ+0x34>)
#if CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD < 4
    if(seg == 4) return (opa_map4[px_id] * opa) >> 8;
#endif

    uint8_t id = (uint32_t)((uint32_t)px_id * (sizeof(opa_map8) - 1)) / (seg - 1);
    return (uint32_t)((uint32_t)opa_map8[id] * opa) >> 8;
 8009bf2:	5c58      	ldrb	r0, [r3, r1]
 8009bf4:	fb10 f002 	smulbb	r0, r0, r2
 8009bf8:	0a00      	lsrs	r0, r0, #8
}
 8009bfa:	4770      	bx	lr
    if(seg == 3) return (opa_map3[px_id] * opa) >> 8;
 8009bfc:	2803      	cmp	r0, #3
 8009bfe:	d101      	bne.n	8009c04 <antialias_get_opa_circ+0x18>
 8009c00:	4b08      	ldr	r3, [pc, #32]	; (8009c24 <antialias_get_opa_circ+0x38>)
 8009c02:	e7f6      	b.n	8009bf2 <antialias_get_opa_circ+0x6>
    if(seg == 4) return (opa_map4[px_id] * opa) >> 8;
 8009c04:	2804      	cmp	r0, #4
    uint8_t id = (uint32_t)((uint32_t)px_id * (sizeof(opa_map8) - 1)) / (seg - 1);
 8009c06:	bf1b      	ittet	ne
 8009c08:	ebc1 01c1 	rsbne	r1, r1, r1, lsl #3
 8009c0c:	f100 33ff 	addne.w	r3, r0, #4294967295	; 0xffffffff
    if(seg == 4) return (opa_map4[px_id] * opa) >> 8;
 8009c10:	4b05      	ldreq	r3, [pc, #20]	; (8009c28 <antialias_get_opa_circ+0x3c>)
    uint8_t id = (uint32_t)((uint32_t)px_id * (sizeof(opa_map8) - 1)) / (seg - 1);
 8009c12:	fbb1 f1f3 	udivne	r1, r1, r3
    return (uint32_t)((uint32_t)opa_map8[id] * opa) >> 8;
 8009c16:	bf1c      	itt	ne
 8009c18:	4b04      	ldrne	r3, [pc, #16]	; (8009c2c <antialias_get_opa_circ+0x40>)
 8009c1a:	b2c9      	uxtbne	r1, r1
 8009c1c:	e7e9      	b.n	8009bf2 <antialias_get_opa_circ+0x6>
 8009c1e:	bf00      	nop
 8009c20:	08010997 	.word	0x08010997
 8009c24:	08010999 	.word	0x08010999
 8009c28:	0801099c 	.word	0x0801099c
 8009c2c:	080109a0 	.word	0x080109a0

08009c30 <lv_draw_rect>:
{
 8009c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c34:	b0a9      	sub	sp, #164	; 0xa4
 8009c36:	4682      	mov	sl, r0
 8009c38:	9202      	str	r2, [sp, #8]
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 8009c3a:	88c2      	ldrh	r2, [r0, #6]
 8009c3c:	9308      	str	r3, [sp, #32]
 8009c3e:	8843      	ldrh	r3, [r0, #2]
 8009c40:	3201      	adds	r2, #1
 8009c42:	1ad2      	subs	r2, r2, r3
 8009c44:	b212      	sxth	r2, r2
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 8009c46:	2a00      	cmp	r2, #0
{
 8009c48:	468b      	mov	fp, r1
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 8009c4a:	f340 869c 	ble.w	800a986 <lv_draw_rect+0xd56>
    return area_p->x2 - area_p->x1 + 1;
 8009c4e:	8881      	ldrh	r1, [r0, #4]
 8009c50:	8803      	ldrh	r3, [r0, #0]
 8009c52:	3101      	adds	r1, #1
 8009c54:	1ac9      	subs	r1, r1, r3
 8009c56:	b209      	sxth	r1, r1
 8009c58:	2900      	cmp	r1, #0
 8009c5a:	f340 8694 	ble.w	800a986 <lv_draw_rect+0xd56>
    if(style->body.shadow.width != 0) {
 8009c5e:	9b02      	ldr	r3, [sp, #8]
 8009c60:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	f000 82d3 	beq.w	800a210 <lv_draw_rect+0x5e0>
    radius            = lv_draw_cont_radius_corr(radius, width, height);
 8009c6a:	9b02      	ldr	r3, [sp, #8]
 8009c6c:	88d8      	ldrh	r0, [r3, #6]
 8009c6e:	f7ff ffa1 	bl	8009bb4 <lv_draw_cont_radius_corr>
    memcpy(dest, src, sizeof(lv_area_t));
 8009c72:	f8da 1004 	ldr.w	r1, [sl, #4]
 8009c76:	4604      	mov	r4, r0
 8009c78:	f8da 0000 	ldr.w	r0, [sl]
 8009c7c:	ab1e      	add	r3, sp, #120	; 0x78
 8009c7e:	c303      	stmia	r3!, {r0, r1}
    area_tmp.x1 += radius;
 8009c80:	f8bd 3078 	ldrh.w	r3, [sp, #120]	; 0x78
 8009c84:	4423      	add	r3, r4
 8009c86:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
    area_tmp.x2 -= radius;
 8009c8a:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 8009c8e:	a91e      	add	r1, sp, #120	; 0x78
    area_tmp.x2 -= radius;
 8009c90:	1b1b      	subs	r3, r3, r4
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 8009c92:	4658      	mov	r0, fp
    area_tmp.x2 -= radius;
 8009c94:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 8009c98:	f002 fdde 	bl	800c858 <lv_area_is_in>
 8009c9c:	2800      	cmp	r0, #0
 8009c9e:	f040 82b7 	bne.w	800a210 <lv_draw_rect+0x5e0>
 8009ca2:	f8da 0000 	ldr.w	r0, [sl]
 8009ca6:	f8da 1004 	ldr.w	r1, [sl, #4]
 8009caa:	ab1e      	add	r3, sp, #120	; 0x78
 8009cac:	c303      	stmia	r3!, {r0, r1}
    area_tmp.y1 += radius;
 8009cae:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
 8009cb2:	4423      	add	r3, r4
 8009cb4:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
    area_tmp.y2 -= radius;
 8009cb8:	f8bd 307e 	ldrh.w	r3, [sp, #126]	; 0x7e
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 8009cbc:	a91e      	add	r1, sp, #120	; 0x78
    area_tmp.y2 -= radius;
 8009cbe:	1b1c      	subs	r4, r3, r4
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 8009cc0:	4658      	mov	r0, fp
    area_tmp.y2 -= radius;
 8009cc2:	f8ad 407e 	strh.w	r4, [sp, #126]	; 0x7e
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 8009cc6:	f002 fdc7 	bl	800c858 <lv_area_is_in>
 8009cca:	4605      	mov	r5, r0
 8009ccc:	2800      	cmp	r0, #0
 8009cce:	f040 829f 	bne.w	800a210 <lv_draw_rect+0x5e0>
    if(style->body.shadow.type == LV_SHADOW_FULL) {
 8009cd2:	9b02      	ldr	r3, [sp, #8]
 8009cd4:	7d1b      	ldrb	r3, [r3, #20]
 8009cd6:	2b01      	cmp	r3, #1
 8009cd8:	f040 8212 	bne.w	800a100 <lv_draw_rect+0x4d0>
    bool aa = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8009cdc:	f7fe ff7c 	bl	8008bd8 <lv_refr_get_disp_refreshing>
 8009ce0:	f002 fc3e 	bl	800c560 <lv_disp_get_antialiasing>
    lv_coord_t swidth = style->body.shadow.width;
 8009ce4:	9b02      	ldr	r3, [sp, #8]
    return area_p->y2 - area_p->y1 + 1;
 8009ce6:	f8ba 2006 	ldrh.w	r2, [sl, #6]
 8009cea:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8009cee:	9304      	str	r3, [sp, #16]
 8009cf0:	f8ba 3002 	ldrh.w	r3, [sl, #2]
    return area_p->x2 - area_p->x1 + 1;
 8009cf4:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    return area_p->y2 - area_p->y1 + 1;
 8009cf8:	3201      	adds	r2, #1
 8009cfa:	1ad2      	subs	r2, r2, r3
    return area_p->x2 - area_p->x1 + 1;
 8009cfc:	f8ba 3000 	ldrh.w	r3, [sl]
 8009d00:	3101      	adds	r1, #1
 8009d02:	1ac9      	subs	r1, r1, r3
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8009d04:	9b02      	ldr	r3, [sp, #8]
 8009d06:	b209      	sxth	r1, r1
    bool aa = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8009d08:	4604      	mov	r4, r0
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8009d0a:	b212      	sxth	r2, r2
 8009d0c:	88d8      	ldrh	r0, [r3, #6]
 8009d0e:	f7ff ff51 	bl	8009bb4 <lv_draw_cont_radius_corr>
    radius += aa;
 8009d12:	b2a4      	uxth	r4, r4
 8009d14:	4420      	add	r0, r4
 8009d16:	b283      	uxth	r3, r0
 8009d18:	9305      	str	r3, [sp, #20]
    int16_t filter_width = 2 * swidth + 1;
 8009d1a:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    radius += aa;
 8009d1e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
 8009d22:	9a04      	ldr	r2, [sp, #16]
    radius += aa;
 8009d24:	9309      	str	r3, [sp, #36]	; 0x24
    int16_t filter_width = 2 * swidth + 1;
 8009d26:	ea4f 0846 	mov.w	r8, r6, lsl #1
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
 8009d2a:	4413      	add	r3, r2
    int16_t filter_width = 2 * swidth + 1;
 8009d2c:	f108 0801 	add.w	r8, r8, #1
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
 8009d30:	1d18      	adds	r0, r3, #4
    int16_t filter_width = 2 * swidth + 1;
 8009d32:	fa0f f888 	sxth.w	r8, r8
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
 8009d36:	f020 0003 	bic.w	r0, r0, #3
    uint32_t line_1d_blur_size = (filter_width + 3) & ~0x3;     /*Round to 4*/
 8009d3a:	f108 0703 	add.w	r7, r8, #3
    curve_x_size *= sizeof(lv_coord_t);
 8009d3e:	ea4f 0940 	mov.w	r9, r0, lsl #1
    uint32_t line_1d_blur_size = (filter_width + 3) & ~0x3;     /*Round to 4*/
 8009d42:	f027 0703 	bic.w	r7, r7, #3
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size + line_2d_blur_size);
 8009d46:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8009d4a:	4438      	add	r0, r7
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
 8009d4c:	930a      	str	r3, [sp, #40]	; 0x28
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size + line_2d_blur_size);
 8009d4e:	f7ff fcb7 	bl	80096c0 <lv_draw_get_buf>
    uint32_t * line_1d_blur = (uint32_t *)&draw_buf[curve_x_size];
 8009d52:	4603      	mov	r3, r0
 8009d54:	444b      	add	r3, r9
 8009d56:	930b      	str	r3, [sp, #44]	; 0x2c
    lv_opa_t * line_2d_blur = (lv_opa_t *)&draw_buf[curve_x_size + line_1d_blur_size];
 8009d58:	4603      	mov	r3, r0
 8009d5a:	443b      	add	r3, r7
    memset(curve_x, 0, curve_x_size);
 8009d5c:	4629      	mov	r1, r5
 8009d5e:	464a      	mov	r2, r9
    lv_circ_init(&circ, &circ_tmp, radius);
 8009d60:	f10d 0772 	add.w	r7, sp, #114	; 0x72
 8009d64:	ad1d      	add	r5, sp, #116	; 0x74
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size + line_2d_blur_size);
 8009d66:	9003      	str	r0, [sp, #12]
    lv_opa_t * line_2d_blur = (lv_opa_t *)&draw_buf[curve_x_size + line_1d_blur_size];
 8009d68:	930c      	str	r3, [sp, #48]	; 0x30
    memset(curve_x, 0, curve_x_size);
 8009d6a:	f003 fcfe 	bl	800d76a <memset>
    lv_circ_init(&circ, &circ_tmp, radius);
 8009d6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d70:	4639      	mov	r1, r7
 8009d72:	4628      	mov	r0, r5
 8009d74:	f002 fd8d 	bl	800c892 <lv_circ_init>
    while(lv_circ_cont(&circ)) {
 8009d78:	4628      	mov	r0, r5
 8009d7a:	f002 fd91 	bl	800c8a0 <lv_circ_cont>
 8009d7e:	2800      	cmp	r0, #0
 8009d80:	d15a      	bne.n	8009e38 <lv_draw_rect+0x208>
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 8009d82:	9b08      	ldr	r3, [sp, #32]
 8009d84:	2bff      	cmp	r3, #255	; 0xff
 8009d86:	9b02      	ldr	r3, [sp, #8]
 8009d88:	bf18      	it	ne
 8009d8a:	9a08      	ldrne	r2, [sp, #32]
 8009d8c:	7a1b      	ldrb	r3, [r3, #8]
 8009d8e:	bf1c      	itt	ne
 8009d90:	4353      	mulne	r3, r2
 8009d92:	f3c3 2307 	ubfxne	r3, r3, #8, #8
 8009d96:	005b      	lsls	r3, r3, #1
 8009d98:	ea4f 2208 	mov.w	r2, r8, lsl #8
 8009d9c:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 8009da0:	4359      	muls	r1, r3
                             (filter_width * filter_width);
 8009da2:	fb08 f508 	mul.w	r5, r8, r8
 8009da6:	4353      	muls	r3, r2
 8009da8:	2200      	movs	r2, #0
    for(line = 0; line < filter_width; line++) {
 8009daa:	b210      	sxth	r0, r2
 8009dac:	4580      	cmp	r8, r0
 8009dae:	dc55      	bgt.n	8009e5c <lv_draw_rect+0x22c>
    ofs_rb.x = coords->x2 - radius - aa;
 8009db0:	9a05      	ldr	r2, [sp, #20]
 8009db2:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 8009db6:	1a9b      	subs	r3, r3, r2
 8009db8:	1b1b      	subs	r3, r3, r4
 8009dba:	b29b      	uxth	r3, r3
 8009dbc:	930e      	str	r3, [sp, #56]	; 0x38
 8009dbe:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
 8009dc2:	9314      	str	r3, [sp, #80]	; 0x50
    ofs_rb.y = coords->y2 - radius - aa;
 8009dc4:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 8009dc8:	1a9b      	subs	r3, r3, r2
 8009dca:	1b1b      	subs	r3, r3, r4
 8009dcc:	b29b      	uxth	r3, r3
 8009dce:	930f      	str	r3, [sp, #60]	; 0x3c
 8009dd0:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8009dd4:	9310      	str	r3, [sp, #64]	; 0x40
    ofs_rt.y = coords->y1 + radius + aa;
 8009dd6:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 8009dda:	4423      	add	r3, r4
 8009ddc:	4413      	add	r3, r2
 8009dde:	b29b      	uxth	r3, r3
 8009de0:	9311      	str	r3, [sp, #68]	; 0x44
 8009de2:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
 8009de6:	9312      	str	r3, [sp, #72]	; 0x48
    ofs_lb.x = coords->x1 + radius + aa;
 8009de8:	f8ba 3000 	ldrh.w	r3, [sl]
 8009dec:	441c      	add	r4, r3
 8009dee:	4414      	add	r4, r2
 8009df0:	b2a3      	uxth	r3, r4
 8009df2:	9313      	str	r3, [sp, #76]	; 0x4c
 8009df4:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 8009df8:	9315      	str	r3, [sp, #84]	; 0x54
            for(line_rel = -swidth; line_rel <= swidth; line_rel++) {
 8009dfa:	4276      	negs	r6, r6
    ofs_lb.x = coords->x1 + radius + aa;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	9307      	str	r3, [sp, #28]
            for(line_rel = -swidth; line_rel <= swidth; line_rel++) {
 8009e00:	b233      	sxth	r3, r6
 8009e02:	9318      	str	r3, [sp, #96]	; 0x60
 8009e04:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8009e08:	9306      	str	r3, [sp, #24]
    for(line = 0; line <= radius + swidth; line++) { /*Check all rows and make the 1D blur to 2D*/
 8009e0a:	9a06      	ldr	r2, [sp, #24]
 8009e0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	f2c0 81fe 	blt.w	800a210 <lv_draw_rect+0x5e0>
                    col_rel = curve_x[line + line_rel] - curve_x[line] - col;
 8009e14:	9b03      	ldr	r3, [sp, #12]
 8009e16:	eb03 0542 	add.w	r5, r3, r2, lsl #1
                if(col_rel < -swidth) { /*Outside of the blurred area. */
 8009e1a:	9b04      	ldr	r3, [sp, #16]
                    col_rel = curve_x[line + line_rel] - curve_x[line] - col;
 8009e1c:	2000      	movs	r0, #0
                if(col_rel < -swidth) { /*Outside of the blurred area. */
 8009e1e:	425c      	negs	r4, r3
        for(col = 0; col <= radius + swidth; col++) { /*Check all pixels in a 1D blur line (from the origo to last
 8009e20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e22:	fa1f f980 	uxth.w	r9, r0
 8009e26:	454a      	cmp	r2, r9
 8009e28:	db3b      	blt.n	8009ea2 <lv_draw_rect+0x272>
            for(line_rel = -swidth; line_rel <= swidth; line_rel++) {
 8009e2a:	9a18      	ldr	r2, [sp, #96]	; 0x60
            uint32_t px_opa_sum = 0;
 8009e2c:	2100      	movs	r1, #0
            for(line_rel = -swidth; line_rel <= swidth; line_rel++) {
 8009e2e:	9b04      	ldr	r3, [sp, #16]
 8009e30:	4293      	cmp	r3, r2
 8009e32:	da1b      	bge.n	8009e6c <lv_draw_rect+0x23c>
                } else if(line + line_rel > radius) { /*Above the radius, here won't be more 1D blur*/
 8009e34:	2200      	movs	r2, #0
 8009e36:	e029      	b.n	8009e8c <lv_draw_rect+0x25c>
        curve_x[LV_CIRC_OCT1_Y(circ)] = LV_CIRC_OCT1_X(circ);
 8009e38:	f9bd 3076 	ldrsh.w	r3, [sp, #118]	; 0x76
 8009e3c:	9903      	ldr	r1, [sp, #12]
 8009e3e:	f9bd 2074 	ldrsh.w	r2, [sp, #116]	; 0x74
 8009e42:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        curve_x[LV_CIRC_OCT2_Y(circ)] = LV_CIRC_OCT2_X(circ);
 8009e46:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	; 0x74
 8009e4a:	f9bd 2076 	ldrsh.w	r2, [sp, #118]	; 0x76
 8009e4e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        lv_circ_next(&circ, &circ_tmp);
 8009e52:	4628      	mov	r0, r5
 8009e54:	4639      	mov	r1, r7
 8009e56:	f002 fd2c 	bl	800c8b2 <lv_circ_next>
 8009e5a:	e78d      	b.n	8009d78 <lv_draw_rect+0x148>
        line_1d_blur[line] = (uint32_t)((uint32_t)(filter_width - line) * (opa * 2) << SHADOW_OPA_EXTRA_PRECISION) /
 8009e5c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8009e5e:	fbb3 f0f5 	udiv	r0, r3, r5
 8009e62:	440b      	add	r3, r1
 8009e64:	f847 0022 	str.w	r0, [r7, r2, lsl #2]
 8009e68:	3201      	adds	r2, #1
 8009e6a:	e79e      	b.n	8009daa <lv_draw_rect+0x17a>
                if(line + line_rel < 0) { /*Below the radius, here is the blur of the edge */
 8009e6c:	9b06      	ldr	r3, [sp, #24]
 8009e6e:	18d3      	adds	r3, r2, r3
 8009e70:	f140 80a9 	bpl.w	8009fc6 <lv_draw_rect+0x396>
                    col_rel = radius - curve_x[line] - col;
 8009e74:	882b      	ldrh	r3, [r5, #0]
 8009e76:	9e05      	ldr	r6, [sp, #20]
 8009e78:	1af3      	subs	r3, r6, r3
                    col_rel = curve_x[line + line_rel] - curve_x[line] - col;
 8009e7a:	eba3 0309 	sub.w	r3, r3, r9
 8009e7e:	b21b      	sxth	r3, r3
                if(col_rel < -swidth) { /*Outside of the blurred area. */
 8009e80:	42a3      	cmp	r3, r4
 8009e82:	f280 80aa 	bge.w	8009fda <lv_draw_rect+0x3aa>
                    if(line_rel == -swidth)
 8009e86:	1b16      	subs	r6, r2, r4
 8009e88:	4272      	negs	r2, r6
 8009e8a:	4172      	adcs	r2, r6
            line_2d_blur[col] = px_opa_sum >> SHADOW_OPA_EXTRA_PRECISION;
 8009e8c:	b283      	uxth	r3, r0
 8009e8e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009e90:	0a09      	lsrs	r1, r1, #8
 8009e92:	54f1      	strb	r1, [r6, r3]
 8009e94:	3001      	adds	r0, #1
            if(line_ready) {
 8009e96:	2a00      	cmp	r2, #0
 8009e98:	d0c2      	beq.n	8009e20 <lv_draw_rect+0x1f0>
                col++; /*To make this line to the last one ( drawing will go to '< col')*/
 8009e9a:	f109 0301 	add.w	r3, r9, #1
 8009e9e:	fa1f f983 	uxth.w	r9, r3
        point_rt.x = curve_x[line] + ofs_rt.x + 1;
 8009ea2:	9b03      	ldr	r3, [sp, #12]
 8009ea4:	9a06      	ldr	r2, [sp, #24]
 8009ea6:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 8009eaa:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8009eae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009eb0:	1c5a      	adds	r2, r3, #1
 8009eb2:	440a      	add	r2, r1
 8009eb4:	b293      	uxth	r3, r2
 8009eb6:	9316      	str	r3, [sp, #88]	; 0x58
 8009eb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009eba:	1b1d      	subs	r5, r3, r4
 8009ebc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ebe:	441c      	add	r4, r3
        point_lt.x = ofs_lt.x - curve_x[line] - 1;
 8009ec0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009ec2:	3b01      	subs	r3, #1
 8009ec4:	1a5b      	subs	r3, r3, r1
 8009ec6:	b29b      	uxth	r3, r3
 8009ec8:	9317      	str	r3, [sp, #92]	; 0x5c
 8009eca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ecc:	1c5e      	adds	r6, r3, #1
 8009ece:	2300      	movs	r3, #0
 8009ed0:	b22d      	sxth	r5, r5
 8009ed2:	b224      	sxth	r4, r4
 8009ed4:	930d      	str	r3, [sp, #52]	; 0x34
 8009ed6:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8009eda:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009edc:	eba2 0803 	sub.w	r8, r2, r3
 8009ee0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009ee2:	18d7      	adds	r7, r2, r3
        for(d = 1; d < col; d++) {
 8009ee4:	3301      	adds	r3, #1
 8009ee6:	b29b      	uxth	r3, r3
 8009ee8:	4599      	cmp	r9, r3
 8009eea:	fa0f f888 	sxth.w	r8, r8
 8009eee:	b23f      	sxth	r7, r7
 8009ef0:	f200 8082 	bhi.w	8009ff8 <lv_draw_rect+0x3c8>
        if(line == 0) lv_draw_shadow_full_straight(coords, mask, style, line_2d_blur);
 8009ef4:	9b06      	ldr	r3, [sp, #24]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d161      	bne.n	8009fbe <lv_draw_rect+0x38e>
    bool aa           = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8009efa:	f7fe fe6d 	bl	8008bd8 <lv_refr_get_disp_refreshing>
 8009efe:	f002 fb2f 	bl	800c560 <lv_disp_get_antialiasing>
    lv_coord_t swidth = style->body.shadow.width;
 8009f02:	9b02      	ldr	r3, [sp, #8]
    return area_p->y2 - area_p->y1 + 1;
 8009f04:	f8ba 2006 	ldrh.w	r2, [sl, #6]
 8009f08:	f9b3 8012 	ldrsh.w	r8, [r3, #18]
 8009f0c:	f8ba 3002 	ldrh.w	r3, [sl, #2]
    return area_p->x2 - area_p->x1 + 1;
 8009f10:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    return area_p->y2 - area_p->y1 + 1;
 8009f14:	3201      	adds	r2, #1
 8009f16:	1ad2      	subs	r2, r2, r3
    return area_p->x2 - area_p->x1 + 1;
 8009f18:	f8ba 3000 	ldrh.w	r3, [sl]
 8009f1c:	3101      	adds	r1, #1
 8009f1e:	1ac9      	subs	r1, r1, r3
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8009f20:	9b02      	ldr	r3, [sp, #8]
    bool aa           = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8009f22:	4604      	mov	r4, r0
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8009f24:	b212      	sxth	r2, r2
 8009f26:	b209      	sxth	r1, r1
 8009f28:	88d8      	ldrh	r0, [r3, #6]
 8009f2a:	f7ff fe43 	bl	8009bb4 <lv_draw_cont_radius_corr>
    right_area.x1 = coords->x2 + 1 - aa;
 8009f2e:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    right_area.y1 = coords->y1 + radius + aa;
 8009f32:	f8ba 5002 	ldrh.w	r5, [sl, #2]
    radius += aa;
 8009f36:	b2a3      	uxth	r3, r4
    right_area.x1 = coords->x2 + 1 - aa;
 8009f38:	1c4a      	adds	r2, r1, #1
 8009f3a:	1ad2      	subs	r2, r2, r3
 8009f3c:	b212      	sxth	r2, r2
    radius += aa;
 8009f3e:	4418      	add	r0, r3
    left_area.x1 = coords->x1 - 1 + aa;
 8009f40:	f8ba 4000 	ldrh.w	r4, [sl]
    right_area.x1 = coords->x2 + 1 - aa;
 8009f44:	f8ad 2080 	strh.w	r2, [sp, #128]	; 0x80
    right_area.x2 = right_area.x1;
 8009f48:	f8ad 2084 	strh.w	r2, [sp, #132]	; 0x84
    right_area.y2 = coords->y2 - radius - aa;
 8009f4c:	f8ba 2006 	ldrh.w	r2, [sl, #6]
    radius += aa;
 8009f50:	b280      	uxth	r0, r0
    right_area.y1 = coords->y1 + radius + aa;
 8009f52:	eb03 0e05 	add.w	lr, r3, r5
    right_area.y2 = coords->y2 - radius - aa;
 8009f56:	1a16      	subs	r6, r2, r0
    left_area.x1 = coords->x1 - 1 + aa;
 8009f58:	1e67      	subs	r7, r4, #1
    top_area.y1 = coords->y1 - 1 + aa;
 8009f5a:	3d01      	subs	r5, #1
    top_area.x1 = coords->x1 + radius + aa;
 8009f5c:	441c      	add	r4, r3
    top_area.x2 = coords->x2 - radius - aa;
 8009f5e:	1a09      	subs	r1, r1, r0
    bottom_area.y1 = coords->y2 + 1 - aa;
 8009f60:	3201      	adds	r2, #1
    right_area.y2 = coords->y2 - radius - aa;
 8009f62:	1af6      	subs	r6, r6, r3
    left_area.x1 = coords->x1 - 1 + aa;
 8009f64:	441f      	add	r7, r3
    top_area.y1 = coords->y1 - 1 + aa;
 8009f66:	441d      	add	r5, r3
    top_area.x2 = coords->x2 - radius - aa;
 8009f68:	1ac9      	subs	r1, r1, r3
    right_area.y1 = coords->y1 + radius + aa;
 8009f6a:	4486      	add	lr, r0
    top_area.x1 = coords->x1 + radius + aa;
 8009f6c:	4404      	add	r4, r0
    bottom_area.y1 = coords->y2 + 1 - aa;
 8009f6e:	1ad3      	subs	r3, r2, r3
    top_area.x1 = coords->x1 + radius + aa;
 8009f70:	b224      	sxth	r4, r4
    right_area.y1 = coords->y1 + radius + aa;
 8009f72:	fa0f fe8e 	sxth.w	lr, lr
    right_area.y2 = coords->y2 - radius - aa;
 8009f76:	b236      	sxth	r6, r6
    left_area.x1 = coords->x1 - 1 + aa;
 8009f78:	b23f      	sxth	r7, r7
    top_area.y1 = coords->y1 - 1 + aa;
 8009f7a:	b22d      	sxth	r5, r5
    top_area.x2 = coords->x2 - radius - aa;
 8009f7c:	b209      	sxth	r1, r1
    bottom_area.y1 = coords->y2 + 1 - aa;
 8009f7e:	b21b      	sxth	r3, r3
    top_area.x1 = coords->x1 + radius + aa;
 8009f80:	f8ad 4090 	strh.w	r4, [sp, #144]	; 0x90
    bottom_area.x1 = coords->x1 + radius + aa;
 8009f84:	f8ad 4098 	strh.w	r4, [sp, #152]	; 0x98
    right_area.y1 = coords->y1 + radius + aa;
 8009f88:	f8ad e082 	strh.w	lr, [sp, #130]	; 0x82
    right_area.y2 = coords->y2 - radius - aa;
 8009f8c:	f8ad 6086 	strh.w	r6, [sp, #134]	; 0x86
    left_area.x1 = coords->x1 - 1 + aa;
 8009f90:	f8ad 7088 	strh.w	r7, [sp, #136]	; 0x88
    left_area.y1 = coords->y1 + radius + aa;
 8009f94:	f8ad e08a 	strh.w	lr, [sp, #138]	; 0x8a
    left_area.x2 = left_area.x1;
 8009f98:	f8ad 708c 	strh.w	r7, [sp, #140]	; 0x8c
    left_area.y2 = coords->y2 - radius - aa;
 8009f9c:	f8ad 608e 	strh.w	r6, [sp, #142]	; 0x8e
    top_area.y1 = coords->y1 - 1 + aa;
 8009fa0:	f8ad 5092 	strh.w	r5, [sp, #146]	; 0x92
    top_area.x2 = coords->x2 - radius - aa;
 8009fa4:	f8ad 1094 	strh.w	r1, [sp, #148]	; 0x94
    top_area.y2 = top_area.y1;
 8009fa8:	f8ad 5096 	strh.w	r5, [sp, #150]	; 0x96
    bottom_area.y1 = coords->y2 + 1 - aa;
 8009fac:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
    bottom_area.x2 = coords->x2 - radius - aa;
 8009fb0:	f8ad 109c 	strh.w	r1, [sp, #156]	; 0x9c
    bottom_area.y2 = bottom_area.y1;
 8009fb4:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
    for(d = 1 /*+ LV_ANTIALIAS*/; d <= swidth /* - LV_ANTIALIAS*/; d++) {
 8009fb8:	2401      	movs	r4, #1
 8009fba:	45a0      	cmp	r8, r4
 8009fbc:	da57      	bge.n	800a06e <lv_draw_rect+0x43e>
 8009fbe:	9b07      	ldr	r3, [sp, #28]
 8009fc0:	3301      	adds	r3, #1
 8009fc2:	9307      	str	r3, [sp, #28]
 8009fc4:	e71e      	b.n	8009e04 <lv_draw_rect+0x1d4>
                } else if(line + line_rel > radius) { /*Above the radius, here won't be more 1D blur*/
 8009fc6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009fc8:	429e      	cmp	r6, r3
 8009fca:	f6ff af33 	blt.w	8009e34 <lv_draw_rect+0x204>
                    col_rel = curve_x[line + line_rel] - curve_x[line] - col;
 8009fce:	9e03      	ldr	r6, [sp, #12]
 8009fd0:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8009fd4:	882e      	ldrh	r6, [r5, #0]
 8009fd6:	1b9b      	subs	r3, r3, r6
 8009fd8:	e74f      	b.n	8009e7a <lv_draw_rect+0x24a>
                } else if(col_rel > swidth)
 8009fda:	9e04      	ldr	r6, [sp, #16]
 8009fdc:	429e      	cmp	r6, r3
                    px_opa_sum += line_1d_blur[swidth - col_rel]; /*On the 1D blur (+ swidth to align to the center)*/
 8009fde:	bfa9      	itett	ge
 8009fe0:	9e04      	ldrge	r6, [sp, #16]
                    px_opa_sum += line_1d_blur[0]; /*Inside the not blurred area*/
 8009fe2:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
                    px_opa_sum += line_1d_blur[swidth - col_rel]; /*On the 1D blur (+ swidth to align to the center)*/
 8009fe4:	1af3      	subge	r3, r6, r3
 8009fe6:	9e0b      	ldrge	r6, [sp, #44]	; 0x2c
                    px_opa_sum += line_1d_blur[0]; /*Inside the not blurred area*/
 8009fe8:	bfb4      	ite	lt
 8009fea:	681b      	ldrlt	r3, [r3, #0]
                    px_opa_sum += line_1d_blur[swidth - col_rel]; /*On the 1D blur (+ swidth to align to the center)*/
 8009fec:	f856 3023 	ldrge.w	r3, [r6, r3, lsl #2]
 8009ff0:	3201      	adds	r2, #1
 8009ff2:	4419      	add	r1, r3
 8009ff4:	b212      	sxth	r2, r2
 8009ff6:	e71a      	b.n	8009e2e <lv_draw_rect+0x1fe>
            if(point_lt.x < ofs_lt.x && point_lt.y < ofs_lt.y) {
 8009ff8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ffa:	4543      	cmp	r3, r8
 8009ffc:	dd17      	ble.n	800a02e <lv_draw_rect+0x3fe>
 8009ffe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a000:	42ab      	cmp	r3, r5
 800a002:	dd08      	ble.n	800a016 <lv_draw_rect+0x3e6>
                lv_draw_px(point_lt.x, point_lt.y, mask, style->body.shadow.color, line_2d_blur[d]);
 800a004:	7833      	ldrb	r3, [r6, #0]
 800a006:	9300      	str	r3, [sp, #0]
 800a008:	9b02      	ldr	r3, [sp, #8]
 800a00a:	465a      	mov	r2, fp
 800a00c:	8a1b      	ldrh	r3, [r3, #16]
 800a00e:	4629      	mov	r1, r5
 800a010:	4640      	mov	r0, r8
 800a012:	f7ff fc6b 	bl	80098ec <lv_draw_px>
            if(point_lb.x < ofs_lb.x && point_lb.y > ofs_lb.y) {
 800a016:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a018:	42a3      	cmp	r3, r4
 800a01a:	da08      	bge.n	800a02e <lv_draw_rect+0x3fe>
                lv_draw_px(point_lb.x, point_lb.y, mask, style->body.shadow.color, line_2d_blur[d]);
 800a01c:	7833      	ldrb	r3, [r6, #0]
 800a01e:	9300      	str	r3, [sp, #0]
 800a020:	9b02      	ldr	r3, [sp, #8]
 800a022:	465a      	mov	r2, fp
 800a024:	8a1b      	ldrh	r3, [r3, #16]
 800a026:	4621      	mov	r1, r4
 800a028:	4640      	mov	r0, r8
 800a02a:	f7ff fc5f 	bl	80098ec <lv_draw_px>
            if(point_rt.x > ofs_rt.x && point_rt.y < ofs_rt.y) {
 800a02e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a030:	42bb      	cmp	r3, r7
 800a032:	da17      	bge.n	800a064 <lv_draw_rect+0x434>
 800a034:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a036:	42ab      	cmp	r3, r5
 800a038:	dd08      	ble.n	800a04c <lv_draw_rect+0x41c>
                lv_draw_px(point_rt.x, point_rt.y, mask, style->body.shadow.color, line_2d_blur[d]);
 800a03a:	7833      	ldrb	r3, [r6, #0]
 800a03c:	9300      	str	r3, [sp, #0]
 800a03e:	9b02      	ldr	r3, [sp, #8]
 800a040:	465a      	mov	r2, fp
 800a042:	8a1b      	ldrh	r3, [r3, #16]
 800a044:	4629      	mov	r1, r5
 800a046:	4638      	mov	r0, r7
 800a048:	f7ff fc50 	bl	80098ec <lv_draw_px>
            if(point_rb.x > ofs_rb.x && point_rb.y > ofs_rb.y) {
 800a04c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a04e:	42a3      	cmp	r3, r4
 800a050:	da08      	bge.n	800a064 <lv_draw_rect+0x434>
                lv_draw_px(point_rb.x, point_rb.y, mask, style->body.shadow.color, line_2d_blur[d]);
 800a052:	7833      	ldrb	r3, [r6, #0]
 800a054:	9300      	str	r3, [sp, #0]
 800a056:	9b02      	ldr	r3, [sp, #8]
 800a058:	465a      	mov	r2, fp
 800a05a:	8a1b      	ldrh	r3, [r3, #16]
 800a05c:	4621      	mov	r1, r4
 800a05e:	4638      	mov	r0, r7
 800a060:	f7ff fc44 	bl	80098ec <lv_draw_px>
 800a064:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a066:	3301      	adds	r3, #1
 800a068:	930d      	str	r3, [sp, #52]	; 0x34
 800a06a:	3601      	adds	r6, #1
 800a06c:	e733      	b.n	8009ed6 <lv_draw_rect+0x2a6>
        opa_act = map[d];
 800a06e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        lv_draw_fill(&right_area, mask, style->body.shadow.color, opa_act);
 800a070:	9a02      	ldr	r2, [sp, #8]
        opa_act = map[d];
 800a072:	5d1d      	ldrb	r5, [r3, r4]
        lv_draw_fill(&right_area, mask, style->body.shadow.color, opa_act);
 800a074:	8a12      	ldrh	r2, [r2, #16]
 800a076:	462b      	mov	r3, r5
 800a078:	4659      	mov	r1, fp
 800a07a:	a820      	add	r0, sp, #128	; 0x80
 800a07c:	f7ff fc86 	bl	800998c <lv_draw_fill>
        right_area.x1++;
 800a080:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
        lv_draw_fill(&left_area, mask, style->body.shadow.color, opa_act);
 800a084:	9a02      	ldr	r2, [sp, #8]
        right_area.x1++;
 800a086:	3301      	adds	r3, #1
 800a088:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
        right_area.x2++;
 800a08c:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
        lv_draw_fill(&left_area, mask, style->body.shadow.color, opa_act);
 800a090:	8a12      	ldrh	r2, [r2, #16]
        right_area.x2++;
 800a092:	3301      	adds	r3, #1
 800a094:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
        lv_draw_fill(&left_area, mask, style->body.shadow.color, opa_act);
 800a098:	4659      	mov	r1, fp
 800a09a:	462b      	mov	r3, r5
 800a09c:	a822      	add	r0, sp, #136	; 0x88
 800a09e:	f7ff fc75 	bl	800998c <lv_draw_fill>
        left_area.x1--;
 800a0a2:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
        lv_draw_fill(&top_area, mask, style->body.shadow.color, opa_act);
 800a0a6:	9a02      	ldr	r2, [sp, #8]
        left_area.x1--;
 800a0a8:	3b01      	subs	r3, #1
 800a0aa:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
        left_area.x2--;
 800a0ae:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
        lv_draw_fill(&top_area, mask, style->body.shadow.color, opa_act);
 800a0b2:	8a12      	ldrh	r2, [r2, #16]
        left_area.x2--;
 800a0b4:	3b01      	subs	r3, #1
 800a0b6:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
        lv_draw_fill(&top_area, mask, style->body.shadow.color, opa_act);
 800a0ba:	4659      	mov	r1, fp
 800a0bc:	462b      	mov	r3, r5
 800a0be:	a824      	add	r0, sp, #144	; 0x90
 800a0c0:	f7ff fc64 	bl	800998c <lv_draw_fill>
        top_area.y1--;
 800a0c4:	f8bd 3092 	ldrh.w	r3, [sp, #146]	; 0x92
        lv_draw_fill(&bottom_area, mask, style->body.shadow.color, opa_act);
 800a0c8:	9a02      	ldr	r2, [sp, #8]
        top_area.y1--;
 800a0ca:	3b01      	subs	r3, #1
 800a0cc:	f8ad 3092 	strh.w	r3, [sp, #146]	; 0x92
        top_area.y2--;
 800a0d0:	f8bd 3096 	ldrh.w	r3, [sp, #150]	; 0x96
        lv_draw_fill(&bottom_area, mask, style->body.shadow.color, opa_act);
 800a0d4:	8a12      	ldrh	r2, [r2, #16]
        top_area.y2--;
 800a0d6:	3b01      	subs	r3, #1
 800a0d8:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
        lv_draw_fill(&bottom_area, mask, style->body.shadow.color, opa_act);
 800a0dc:	4659      	mov	r1, fp
 800a0de:	462b      	mov	r3, r5
 800a0e0:	a826      	add	r0, sp, #152	; 0x98
 800a0e2:	f7ff fc53 	bl	800998c <lv_draw_fill>
        bottom_area.y1++;
 800a0e6:	f8bd 309a 	ldrh.w	r3, [sp, #154]	; 0x9a
 800a0ea:	3301      	adds	r3, #1
 800a0ec:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
        bottom_area.y2++;
 800a0f0:	f8bd 309e 	ldrh.w	r3, [sp, #158]	; 0x9e
 800a0f4:	3401      	adds	r4, #1
 800a0f6:	3301      	adds	r3, #1
 800a0f8:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
 800a0fc:	b224      	sxth	r4, r4
 800a0fe:	e75c      	b.n	8009fba <lv_draw_rect+0x38a>
    } else if(style->body.shadow.type == LV_SHADOW_BOTTOM) {
 800a100:	2b00      	cmp	r3, #0
 800a102:	f040 8085 	bne.w	800a210 <lv_draw_rect+0x5e0>
    bool aa           = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800a106:	f7fe fd67 	bl	8008bd8 <lv_refr_get_disp_refreshing>
 800a10a:	f002 fa29 	bl	800c560 <lv_disp_get_antialiasing>
    lv_coord_t swidth = style->body.shadow.width;
 800a10e:	9b02      	ldr	r3, [sp, #8]
    return area_p->y2 - area_p->y1 + 1;
 800a110:	f8ba 2006 	ldrh.w	r2, [sl, #6]
 800a114:	f9b3 4012 	ldrsh.w	r4, [r3, #18]
 800a118:	f8ba 3002 	ldrh.w	r3, [sl, #2]
    return area_p->x2 - area_p->x1 + 1;
 800a11c:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    return area_p->y2 - area_p->y1 + 1;
 800a120:	3201      	adds	r2, #1
 800a122:	1ad2      	subs	r2, r2, r3
    return area_p->x2 - area_p->x1 + 1;
 800a124:	f8ba 3000 	ldrh.w	r3, [sl]
 800a128:	3101      	adds	r1, #1
 800a12a:	1ac9      	subs	r1, r1, r3
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800a12c:	9b02      	ldr	r3, [sp, #8]
 800a12e:	b212      	sxth	r2, r2
 800a130:	b209      	sxth	r1, r1
    bool aa           = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800a132:	4680      	mov	r8, r0
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800a134:	88d8      	ldrh	r0, [r3, #6]
 800a136:	f7ff fd3d 	bl	8009bb4 <lv_draw_cont_radius_corr>
    radius += aa * SHADOW_BOTTOM_AA_EXTRA_RADIUS;
 800a13a:	fa1f f888 	uxth.w	r8, r8
 800a13e:	eb08 0548 	add.w	r5, r8, r8, lsl #1
 800a142:	4405      	add	r5, r0
 800a144:	b2ad      	uxth	r5, r5
 800a146:	b22b      	sxth	r3, r5
    swidth += aa;
 800a148:	eb08 0004 	add.w	r0, r8, r4
 800a14c:	b280      	uxth	r0, r0
    uint32_t curve_x_size = ((radius + 1) + 3) & ~0x3; /*Round to 4*/
 800a14e:	1d1c      	adds	r4, r3, #4
    swidth += aa;
 800a150:	b206      	sxth	r6, r0
    uint32_t curve_x_size = ((radius + 1) + 3) & ~0x3; /*Round to 4*/
 800a152:	f024 0403 	bic.w	r4, r4, #3
    lv_opa_t line_1d_blur_size = (swidth + 3) & ~0x3;     /*Round to 4*/
 800a156:	3003      	adds	r0, #3
    curve_x_size *= sizeof(lv_coord_t);
 800a158:	0064      	lsls	r4, r4, #1
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size);
 800a15a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 800a15e:	4420      	add	r0, r4
    radius += aa * SHADOW_BOTTOM_AA_EXTRA_RADIUS;
 800a160:	9303      	str	r3, [sp, #12]
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size);
 800a162:	f7ff faad 	bl	80096c0 <lv_draw_get_buf>
    lv_circ_init(&circ, &circ_tmp, radius);
 800a166:	f10d 0990 	add.w	r9, sp, #144	; 0x90
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size);
 800a16a:	4607      	mov	r7, r0
    lv_opa_t * line_1d_blur = (lv_opa_t *)&draw_buf[curve_x_size];
 800a16c:	4404      	add	r4, r0
    lv_circ_init(&circ, &circ_tmp, radius);
 800a16e:	9a03      	ldr	r2, [sp, #12]
 800a170:	a922      	add	r1, sp, #136	; 0x88
 800a172:	4648      	mov	r0, r9
 800a174:	f002 fb8d 	bl	800c892 <lv_circ_init>
    while(lv_circ_cont(&circ)) {
 800a178:	4648      	mov	r0, r9
 800a17a:	f002 fb91 	bl	800c8a0 <lv_circ_cont>
 800a17e:	2800      	cmp	r0, #0
 800a180:	f040 8404 	bne.w	800a98c <lv_draw_rect+0xd5c>
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 800a184:	9b08      	ldr	r3, [sp, #32]
 800a186:	2bff      	cmp	r3, #255	; 0xff
 800a188:	9b02      	ldr	r3, [sp, #8]
 800a18a:	bf18      	it	ne
 800a18c:	9a08      	ldrne	r2, [sp, #32]
 800a18e:	7a1b      	ldrb	r3, [r3, #8]
 800a190:	bf1c      	itt	ne
 800a192:	4353      	mulne	r3, r2
 800a194:	f3c3 2307 	ubfxne	r3, r3, #8, #8
 800a198:	fb13 f006 	smulbb	r0, r3, r6
    ofs_lb.x = coords->x1 + radius + aa;
 800a19c:	4621      	mov	r1, r4
    for(col = 0; col < swidth; col++) {
 800a19e:	1b0a      	subs	r2, r1, r4
 800a1a0:	b212      	sxth	r2, r2
 800a1a2:	4296      	cmp	r6, r2
 800a1a4:	f300 8404 	bgt.w	800a9b0 <lv_draw_rect+0xd80>
    ofs_l.x = coords->x1 + radius;
 800a1a8:	f8ba 3000 	ldrh.w	r3, [sl]
    ofs_r.x = coords->x2 - radius;
 800a1ac:	f8ba 0004 	ldrh.w	r0, [sl, #4]
    ofs_l.x = coords->x1 + radius;
 800a1b0:	442b      	add	r3, r5
 800a1b2:	b29b      	uxth	r3, r3
 800a1b4:	9304      	str	r3, [sp, #16]
 800a1b6:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 800a1ba:	930b      	str	r3, [sp, #44]	; 0x2c
 800a1bc:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 800a1c0:	3301      	adds	r3, #1
 800a1c2:	eba3 0808 	sub.w	r8, r3, r8
 800a1c6:	fa1f f388 	uxth.w	r3, r8
 800a1ca:	9305      	str	r3, [sp, #20]
    ofs_l.y = coords->y2 - radius + 1 - aa;
 800a1cc:	1b5b      	subs	r3, r3, r5
 800a1ce:	b29b      	uxth	r3, r3
    ofs_r.x = coords->x2 - radius;
 800a1d0:	1b45      	subs	r5, r0, r5
    ofs_l.y = coords->y2 - radius + 1 - aa;
 800a1d2:	930c      	str	r3, [sp, #48]	; 0x30
    ofs_r.x = coords->x2 - radius;
 800a1d4:	b2ab      	uxth	r3, r5
 800a1d6:	9306      	str	r3, [sp, #24]
 800a1d8:	f04f 0800 	mov.w	r8, #0
    for(col = 0; col <= radius; col++) {
 800a1dc:	9a03      	ldr	r2, [sp, #12]
 800a1de:	fa0f f388 	sxth.w	r3, r8
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	f280 83ec 	bge.w	800a9c0 <lv_draw_rect+0xd90>
    area_mid.x1 = ofs_l.x + 1;
 800a1e8:	9b04      	ldr	r3, [sp, #16]
    area_mid.y1 = ofs_l.y + radius;
 800a1ea:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 800a1ee:	f8ad 809a 	strh.w	r8, [sp, #154]	; 0x9a
    area_mid.x1 = ofs_l.x + 1;
 800a1f2:	3301      	adds	r3, #1
 800a1f4:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
    area_mid.x2 = ofs_r.x - 1;
 800a1f8:	9b06      	ldr	r3, [sp, #24]
    area_mid.y2 = area_mid.y1;
 800a1fa:	f8ad 809e 	strh.w	r8, [sp, #158]	; 0x9e
    area_mid.x2 = ofs_r.x - 1;
 800a1fe:	1e5d      	subs	r5, r3, #1
 800a200:	f8ad 509c 	strh.w	r5, [sp, #156]	; 0x9c
    area_mid.y2 = area_mid.y1;
 800a204:	2300      	movs	r3, #0
 800a206:	1c5d      	adds	r5, r3, #1
    for(d = 0; d < swidth; d++) {
 800a208:	b29b      	uxth	r3, r3
 800a20a:	42b3      	cmp	r3, r6
 800a20c:	f2c0 8420 	blt.w	800aa50 <lv_draw_rect+0xe20>
    if(lv_area_is_on(coords, mask) == false) return;
 800a210:	4659      	mov	r1, fp
 800a212:	4650      	mov	r0, sl
 800a214:	f002 fb03 	bl	800c81e <lv_area_is_on>
 800a218:	2800      	cmp	r0, #0
 800a21a:	f000 83b4 	beq.w	800a986 <lv_draw_rect+0xd56>
    if(style->body.opa > LV_OPA_MIN) {
 800a21e:	9b02      	ldr	r3, [sp, #8]
 800a220:	7a1b      	ldrb	r3, [r3, #8]
 800a222:	2b10      	cmp	r3, #16
 800a224:	f240 81e9 	bls.w	800a5fa <lv_draw_rect+0x9ca>
    uint16_t radius = style->body.radius;
 800a228:	9b02      	ldr	r3, [sp, #8]
 800a22a:	88dd      	ldrh	r5, [r3, #6]
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800a22c:	f7fe fcd4 	bl	8008bd8 <lv_refr_get_disp_refreshing>
 800a230:	f002 f996 	bl	800c560 <lv_disp_get_antialiasing>
    lv_color_t mcolor = style->body.main_color;
 800a234:	9b02      	ldr	r3, [sp, #8]
    return area_p->y2 - area_p->y1 + 1;
 800a236:	f8ba 6006 	ldrh.w	r6, [sl, #6]
 800a23a:	f8b3 8002 	ldrh.w	r8, [r3, #2]
    lv_color_t gcolor = style->body.grad_color;
 800a23e:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 800a242:	f8ba 3002 	ldrh.w	r3, [sl, #2]
    return area_p->x2 - area_p->x1 + 1;
 800a246:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    return area_p->y2 - area_p->y1 + 1;
 800a24a:	3601      	adds	r6, #1
 800a24c:	1af6      	subs	r6, r6, r3
    return area_p->x2 - area_p->x1 + 1;
 800a24e:	f8ba 3000 	ldrh.w	r3, [sl]
 800a252:	3101      	adds	r1, #1
 800a254:	1ac9      	subs	r1, r1, r3
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 800a256:	9b08      	ldr	r3, [sp, #32]
 800a258:	2bff      	cmp	r3, #255	; 0xff
 800a25a:	9b02      	ldr	r3, [sp, #8]
 800a25c:	7a1f      	ldrb	r7, [r3, #8]
 800a25e:	bf18      	it	ne
 800a260:	9b08      	ldrne	r3, [sp, #32]
    return area_p->y2 - area_p->y1 + 1;
 800a262:	b236      	sxth	r6, r6
 800a264:	bf18      	it	ne
 800a266:	435f      	mulne	r7, r3
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800a268:	4604      	mov	r4, r0
    return area_p->x2 - area_p->x1 + 1;
 800a26a:	b209      	sxth	r1, r1
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800a26c:	4632      	mov	r2, r6
 800a26e:	4628      	mov	r0, r5
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 800a270:	bf18      	it	ne
 800a272:	f3c7 2707 	ubfxne	r7, r7, #8, #8
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800a276:	f7ff fc9d 	bl	8009bb4 <lv_draw_cont_radius_corr>
    if(radius > height / 2) return;
 800a27a:	2302      	movs	r3, #2
 800a27c:	fb96 f3f3 	sdiv	r3, r6, r3
 800a280:	4298      	cmp	r0, r3
 800a282:	dc29      	bgt.n	800a2d8 <lv_draw_rect+0x6a8>
    work_area.x1 = coords->x1;
 800a284:	f8ba 3000 	ldrh.w	r3, [sl]
 800a288:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
    work_area.x2 = coords->x2;
 800a28c:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 800a290:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
 800a294:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 800a298:	f8ba 5006 	ldrh.w	r5, [sl, #6]
        work_area.y1 = coords->y1 + radius;
 800a29c:	4403      	add	r3, r0
    if(mcolor.full == gcolor.full) {
 800a29e:	45c8      	cmp	r8, r9
        work_area.y1 = coords->y1 + radius;
 800a2a0:	b29b      	uxth	r3, r3
    if(mcolor.full == gcolor.full) {
 800a2a2:	f040 83ee 	bne.w	800aa82 <lv_draw_rect+0xe52>
        if(style->body.radius != 0) {
 800a2a6:	9a02      	ldr	r2, [sp, #8]
        work_area.y1 = coords->y1 + radius;
 800a2a8:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
        work_area.y2 = coords->y2 - radius;
 800a2ac:	1a2d      	subs	r5, r5, r0
        if(style->body.radius != 0) {
 800a2ae:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
        work_area.y2 = coords->y2 - radius;
 800a2b2:	b2ad      	uxth	r5, r5
 800a2b4:	f8ad 509e 	strh.w	r5, [sp, #158]	; 0x9e
        if(style->body.radius != 0) {
 800a2b8:	b142      	cbz	r2, 800a2cc <lv_draw_rect+0x69c>
            if(aa) {
 800a2ba:	2c00      	cmp	r4, #0
 800a2bc:	f000 83dc 	beq.w	800aa78 <lv_draw_rect+0xe48>
                work_area.y1 += 2;
 800a2c0:	3302      	adds	r3, #2
 800a2c2:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
                work_area.y2 -= 2;
 800a2c6:	3d02      	subs	r5, #2
                work_area.y2 -= 1;
 800a2c8:	f8ad 509e 	strh.w	r5, [sp, #158]	; 0x9e
        lv_draw_fill(&work_area, mask, mcolor, opa);
 800a2cc:	463b      	mov	r3, r7
 800a2ce:	4642      	mov	r2, r8
 800a2d0:	4659      	mov	r1, fp
 800a2d2:	a826      	add	r0, sp, #152	; 0x98
 800a2d4:	f7ff fb5a 	bl	800998c <lv_draw_fill>
        if(style->body.radius != 0) {
 800a2d8:	9b02      	ldr	r3, [sp, #8]
 800a2da:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 800a2de:	2c00      	cmp	r4, #0
 800a2e0:	f000 818b 	beq.w	800a5fa <lv_draw_rect+0x9ca>
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800a2e4:	f7fe fc78 	bl	8008bd8 <lv_refr_get_disp_refreshing>
 800a2e8:	f002 f93a 	bl	800c560 <lv_disp_get_antialiasing>
    lv_color_t mcolor = style->body.main_color;
 800a2ec:	9b02      	ldr	r3, [sp, #8]
    return area_p->y2 - area_p->y1 + 1;
 800a2ee:	f8ba 2002 	ldrh.w	r2, [sl, #2]
 800a2f2:	885b      	ldrh	r3, [r3, #2]
 800a2f4:	9303      	str	r3, [sp, #12]
    lv_color_t gcolor = style->body.grad_color;
 800a2f6:	9b02      	ldr	r3, [sp, #8]
    return area_p->x2 - area_p->x1 + 1;
 800a2f8:	f8ba 1004 	ldrh.w	r1, [sl, #4]
 800a2fc:	f8b3 9004 	ldrh.w	r9, [r3, #4]
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 800a300:	9b08      	ldr	r3, [sp, #32]
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800a302:	9014      	str	r0, [sp, #80]	; 0x50
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 800a304:	2bff      	cmp	r3, #255	; 0xff
 800a306:	9b02      	ldr	r3, [sp, #8]
 800a308:	7a1e      	ldrb	r6, [r3, #8]
 800a30a:	bf17      	itett	ne
 800a30c:	9b08      	ldrne	r3, [sp, #32]
 800a30e:	9604      	streq	r6, [sp, #16]
 800a310:	435e      	mulne	r6, r3
 800a312:	f3c6 2307 	ubfxne	r3, r6, #8, #8
 800a316:	bf18      	it	ne
 800a318:	9304      	strne	r3, [sp, #16]
    return area_p->y2 - area_p->y1 + 1;
 800a31a:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 800a31e:	3301      	adds	r3, #1
 800a320:	1a9b      	subs	r3, r3, r2
 800a322:	b21b      	sxth	r3, r3
 800a324:	9305      	str	r3, [sp, #20]
    return area_p->x2 - area_p->x1 + 1;
 800a326:	f8ba 3000 	ldrh.w	r3, [sl]
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800a32a:	9a05      	ldr	r2, [sp, #20]
 800a32c:	3101      	adds	r1, #1
 800a32e:	1ac9      	subs	r1, r1, r3
    uint16_t radius = style->body.radius;
 800a330:	b2a4      	uxth	r4, r4
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800a332:	b209      	sxth	r1, r1
 800a334:	4620      	mov	r0, r4
 800a336:	f7ff fc3d 	bl	8009bb4 <lv_draw_cont_radius_corr>
    lt_origo.x = coords->x1 + radius + aa;
 800a33a:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 800a33e:	f8ba 7000 	ldrh.w	r7, [sl]
    lt_origo.y = coords->y1 + radius + aa;
 800a342:	f8ba 4002 	ldrh.w	r4, [sl, #2]
    lb_origo.y = coords->y2 - radius - aa;
 800a346:	f8ba 8006 	ldrh.w	r8, [sl, #6]
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800a34a:	9009      	str	r0, [sp, #36]	; 0x24
    lt_origo.x = coords->x1 + radius + aa;
 800a34c:	442f      	add	r7, r5
 800a34e:	4407      	add	r7, r0
    lt_origo.y = coords->y1 + radius + aa;
 800a350:	442c      	add	r4, r5
 800a352:	4404      	add	r4, r0
    lt_origo.x = coords->x1 + radius + aa;
 800a354:	b2bb      	uxth	r3, r7
 800a356:	9306      	str	r3, [sp, #24]
    lt_origo.y = coords->y1 + radius + aa;
 800a358:	b2a3      	uxth	r3, r4
 800a35a:	930a      	str	r3, [sp, #40]	; 0x28
    lb_origo.y = coords->y2 - radius - aa;
 800a35c:	eba8 0800 	sub.w	r8, r8, r0
    lt_origo.y = coords->y1 + radius + aa;
 800a360:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 800a364:	9315      	str	r3, [sp, #84]	; 0x54
    lb_origo.y = coords->y2 - radius - aa;
 800a366:	eba8 0805 	sub.w	r8, r8, r5
 800a36a:	fa1f f388 	uxth.w	r3, r8
 800a36e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a370:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 800a374:	9316      	str	r3, [sp, #88]	; 0x58
    rt_origo.x = coords->x2 - radius - aa;
 800a376:	f8ba 3004 	ldrh.w	r3, [sl, #4]
    lv_circ_init(&cir, &cir_tmp, radius);
 800a37a:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
    rt_origo.x = coords->x2 - radius - aa;
 800a37e:	1a1b      	subs	r3, r3, r0
    lv_circ_init(&cir, &cir_tmp, radius);
 800a380:	ac1e      	add	r4, sp, #120	; 0x78
    rt_origo.x = coords->x2 - radius - aa;
 800a382:	1b5d      	subs	r5, r3, r5
 800a384:	b2ab      	uxth	r3, r5
    lv_circ_init(&cir, &cir_tmp, radius);
 800a386:	4642      	mov	r2, r8
 800a388:	a91d      	add	r1, sp, #116	; 0x74
 800a38a:	4620      	mov	r0, r4
    rt_origo.x = coords->x2 - radius - aa;
 800a38c:	9307      	str	r3, [sp, #28]
    lv_circ_init(&cir, &cir_tmp, radius);
 800a38e:	f002 fa80 	bl	800c892 <lv_circ_init>
    lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 800a392:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a394:	f8bd 207a 	ldrh.w	r2, [sp, #122]	; 0x7a
 800a398:	f8bd 1078 	ldrh.w	r1, [sp, #120]	; 0x78
 800a39c:	9806      	ldr	r0, [sp, #24]
 800a39e:	441a      	add	r2, r3
                rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
 800a3a0:	9b07      	ldr	r3, [sp, #28]
    lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 800a3a2:	b212      	sxth	r2, r2
                rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
 800a3a4:	440b      	add	r3, r1
    lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 800a3a6:	1a41      	subs	r1, r0, r1
 800a3a8:	9200      	str	r2, [sp, #0]
 800a3aa:	b21b      	sxth	r3, r3
 800a3ac:	b209      	sxth	r1, r1
 800a3ae:	a824      	add	r0, sp, #144	; 0x90
 800a3b0:	f002 f9d4 	bl	800c75c <lv_area_set>
    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 800a3b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3b6:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
 800a3ba:	f8bd 107a 	ldrh.w	r1, [sp, #122]	; 0x7a
 800a3be:	9806      	ldr	r0, [sp, #24]
 800a3c0:	441a      	add	r2, r3
                rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
 800a3c2:	9b07      	ldr	r3, [sp, #28]
    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 800a3c4:	b212      	sxth	r2, r2
                rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
 800a3c6:	440b      	add	r3, r1
    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 800a3c8:	1a41      	subs	r1, r0, r1
 800a3ca:	9200      	str	r2, [sp, #0]
 800a3cc:	b21b      	sxth	r3, r3
 800a3ce:	b209      	sxth	r1, r1
 800a3d0:	a826      	add	r0, sp, #152	; 0x98
 800a3d2:	f002 f9c3 	bl	800c75c <lv_area_set>
    lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800a3d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3d8:	f8bd 207a 	ldrh.w	r2, [sp, #122]	; 0x7a
 800a3dc:	f8bd 1078 	ldrh.w	r1, [sp, #120]	; 0x78
 800a3e0:	9806      	ldr	r0, [sp, #24]
 800a3e2:	1a9a      	subs	r2, r3, r2
                rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
 800a3e4:	9b07      	ldr	r3, [sp, #28]
    lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800a3e6:	b212      	sxth	r2, r2
                rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
 800a3e8:	440b      	add	r3, r1
    lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800a3ea:	1a41      	subs	r1, r0, r1
 800a3ec:	9200      	str	r2, [sp, #0]
 800a3ee:	b21b      	sxth	r3, r3
 800a3f0:	b209      	sxth	r1, r1
 800a3f2:	a822      	add	r0, sp, #136	; 0x88
 800a3f4:	f002 f9b2 	bl	800c75c <lv_area_set>
    lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800a3f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3fa:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
 800a3fe:	f8bd 107a 	ldrh.w	r1, [sp, #122]	; 0x7a
 800a402:	9806      	ldr	r0, [sp, #24]
 800a404:	1a9a      	subs	r2, r3, r2
                rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
 800a406:	9b07      	ldr	r3, [sp, #28]
    lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800a408:	b212      	sxth	r2, r2
                rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
 800a40a:	440b      	add	r3, r1
    lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800a40c:	1a41      	subs	r1, r0, r1
 800a40e:	b21b      	sxth	r3, r3
 800a410:	9200      	str	r2, [sp, #0]
 800a412:	b209      	sxth	r1, r1
 800a414:	a820      	add	r0, sp, #128	; 0x80
 800a416:	f002 f9a1 	bl	800c75c <lv_area_set>
    lv_coord_t out_y_seg_start = 0;
 800a41a:	2300      	movs	r3, #0
 800a41c:	930e      	str	r3, [sp, #56]	; 0x38
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800a41e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    while(lv_circ_cont(&cir)) {
 800a420:	9419      	str	r4, [sp, #100]	; 0x64
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800a422:	3301      	adds	r3, #1
 800a424:	931b      	str	r3, [sp, #108]	; 0x6c
    while(lv_circ_cont(&cir)) {
 800a426:	9819      	ldr	r0, [sp, #100]	; 0x64
 800a428:	f002 fa3a 	bl	800c8a0 <lv_circ_cont>
 800a42c:	2800      	cmp	r0, #0
 800a42e:	f040 8357 	bne.w	800aae0 <lv_draw_rect+0xeb0>
    if(mcolor.full == gcolor.full)
 800a432:	9b03      	ldr	r3, [sp, #12]
 800a434:	454b      	cmp	r3, r9
 800a436:	f040 84fc 	bne.w	800ae32 <lv_draw_rect+0x1202>
        act_color = mcolor;
 800a43a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    lv_draw_fill(&edge_top_area, mask, act_color, opa);
 800a43e:	9b04      	ldr	r3, [sp, #16]
 800a440:	4659      	mov	r1, fp
 800a442:	a820      	add	r0, sp, #128	; 0x80
 800a444:	f7ff faa2 	bl	800998c <lv_draw_fill>
    if(edge_top_area.y1 != mid_top_area.y1) {
 800a448:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
 800a44c:	f9bd 2082 	ldrsh.w	r2, [sp, #130]	; 0x82
 800a450:	429a      	cmp	r2, r3
 800a452:	d00a      	beq.n	800a46a <lv_draw_rect+0x83a>
        if(mcolor.full == gcolor.full)
 800a454:	9a03      	ldr	r2, [sp, #12]
 800a456:	454a      	cmp	r2, r9
 800a458:	f040 84fe 	bne.w	800ae58 <lv_draw_rect+0x1228>
            act_color = mcolor;
 800a45c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
        lv_draw_fill(&mid_top_area, mask, act_color, opa);
 800a460:	9b04      	ldr	r3, [sp, #16]
 800a462:	4659      	mov	r1, fp
 800a464:	a822      	add	r0, sp, #136	; 0x88
 800a466:	f7ff fa91 	bl	800998c <lv_draw_fill>
    if(mcolor.full == gcolor.full)
 800a46a:	9b03      	ldr	r3, [sp, #12]
 800a46c:	454b      	cmp	r3, r9
 800a46e:	f040 8504 	bne.w	800ae7a <lv_draw_rect+0x124a>
        act_color = mcolor;
 800a472:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    lv_draw_fill(&mid_bot_area, mask, act_color, opa);
 800a476:	9b04      	ldr	r3, [sp, #16]
 800a478:	4659      	mov	r1, fp
 800a47a:	a824      	add	r0, sp, #144	; 0x90
 800a47c:	f7ff fa86 	bl	800998c <lv_draw_fill>
    if(edge_bot_area.y1 != mid_bot_area.y1) {
 800a480:	f9bd 309a 	ldrsh.w	r3, [sp, #154]	; 0x9a
 800a484:	f9bd 2092 	ldrsh.w	r2, [sp, #146]	; 0x92
 800a488:	429a      	cmp	r2, r3
 800a48a:	d00a      	beq.n	800a4a2 <lv_draw_rect+0x872>
        if(mcolor.full == gcolor.full)
 800a48c:	9a03      	ldr	r2, [sp, #12]
 800a48e:	454a      	cmp	r2, r9
 800a490:	f040 8506 	bne.w	800aea0 <lv_draw_rect+0x1270>
            act_color = mcolor;
 800a494:	f8bd 200c 	ldrh.w	r2, [sp, #12]
        lv_draw_fill(&edge_bot_area, mask, act_color, opa);
 800a498:	9b04      	ldr	r3, [sp, #16]
 800a49a:	4659      	mov	r1, fp
 800a49c:	a826      	add	r0, sp, #152	; 0x98
 800a49e:	f7ff fa75 	bl	800998c <lv_draw_fill>
    if(aa) {
 800a4a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	f000 80a8 	beq.w	800a5fa <lv_draw_rect+0x9ca>
        edge_top_area.x1 = coords->x1 + radius + 2;
 800a4aa:	f8ba 3000 	ldrh.w	r3, [sl]
 800a4ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4b0:	3302      	adds	r3, #2
 800a4b2:	4413      	add	r3, r2
 800a4b4:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
        edge_top_area.x2 = coords->x2 - radius - 2;
 800a4b8:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 800a4bc:	3b02      	subs	r3, #2
 800a4be:	1a9b      	subs	r3, r3, r2
        lv_draw_fill(&edge_top_area, mask, style->body.main_color, opa);
 800a4c0:	9a02      	ldr	r2, [sp, #8]
        edge_top_area.x2 = coords->x2 - radius - 2;
 800a4c2:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
        edge_top_area.y1 = coords->y1;
 800a4c6:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
 800a4ca:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
        edge_top_area.y2 = coords->y1;
 800a4ce:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
        lv_draw_fill(&edge_top_area, mask, style->body.main_color, opa);
 800a4d2:	8852      	ldrh	r2, [r2, #2]
 800a4d4:	9b04      	ldr	r3, [sp, #16]
 800a4d6:	4659      	mov	r1, fp
 800a4d8:	a820      	add	r0, sp, #128	; 0x80
 800a4da:	f7ff fa57 	bl	800998c <lv_draw_fill>
        lv_draw_fill(&edge_top_area, mask, style->body.grad_color, opa);
 800a4de:	9a02      	ldr	r2, [sp, #8]
        edge_top_area.y1 = coords->y2;
 800a4e0:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 800a4e4:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
        edge_top_area.y2 = coords->y2;
 800a4e8:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
        lv_draw_fill(&edge_top_area, mask, style->body.grad_color, opa);
 800a4ec:	8892      	ldrh	r2, [r2, #4]
 800a4ee:	9b04      	ldr	r3, [sp, #16]
 800a4f0:	4659      	mov	r1, fp
 800a4f2:	a820      	add	r0, sp, #128	; 0x80
 800a4f4:	f7ff fa4a 	bl	800998c <lv_draw_fill>
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800a4f8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800a4fc:	930f      	str	r3, [sp, #60]	; 0x3c
 800a4fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a500:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
        aa_color_hor_bottom = lv_color_mix(gcolor, mcolor, mix);
 800a504:	f8bd 100c 	ldrh.w	r1, [sp, #12]
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800a508:	1a9b      	subs	r3, r3, r2
 800a50a:	b21b      	sxth	r3, r3
 800a50c:	9313      	str	r3, [sp, #76]	; 0x4c
        mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 800a50e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a510:	eba3 0408 	sub.w	r4, r3, r8
 800a514:	ebc4 2404 	rsb	r4, r4, r4, lsl #8
 800a518:	9b05      	ldr	r3, [sp, #20]
 800a51a:	fbb4 f4f3 	udiv	r4, r4, r3
 800a51e:	b2e4      	uxtb	r4, r4
        aa_color_hor_bottom = lv_color_mix(gcolor, mcolor, mix);
 800a520:	4622      	mov	r2, r4
 800a522:	4648      	mov	r0, r9
 800a524:	f7ff fb1a 	bl	8009b5c <lv_color_mix>
        aa_color_hor_top    = lv_color_mix(mcolor, gcolor, mix);
 800a528:	4622      	mov	r2, r4
        aa_color_hor_bottom = lv_color_mix(gcolor, mcolor, mix);
 800a52a:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
        aa_color_hor_top    = lv_color_mix(mcolor, gcolor, mix);
 800a52e:	4649      	mov	r1, r9
 800a530:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 800a534:	f7ff fb12 	bl	8009b5c <lv_color_mix>
 800a538:	2300      	movs	r3, #0
 800a53a:	9310      	str	r3, [sp, #64]	; 0x40
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800a53c:	fa1f f388 	uxth.w	r3, r8
 800a540:	9312      	str	r3, [sp, #72]	; 0x48
 800a542:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a544:	9a12      	ldr	r2, [sp, #72]	; 0x48
        aa_color_hor_top    = lv_color_mix(mcolor, gcolor, mix);
 800a546:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800a54a:	3301      	adds	r3, #1
 800a54c:	18d3      	adds	r3, r2, r3
 800a54e:	9316      	str	r3, [sp, #88]	; 0x58
 800a550:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
        for(i = 0; i < seg_size; i++) {
 800a554:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a556:	428b      	cmp	r3, r1
 800a558:	f300 84b3 	bgt.w	800aec2 <lv_draw_rect+0x1292>
        if(LV_MATH_ABS(aa_p.x - aa_p.y) == seg_size) {
 800a55c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a55e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a560:	eba8 0303 	sub.w	r3, r8, r3
 800a564:	2b00      	cmp	r3, #0
 800a566:	bfb8      	it	lt
 800a568:	425b      	neglt	r3, r3
 800a56a:	4293      	cmp	r3, r2
 800a56c:	d145      	bne.n	800a5fa <lv_draw_rect+0x9ca>
            mix                 = (uint32_t)((uint32_t)(out_x_last)*255) / height;
 800a56e:	9b05      	ldr	r3, [sp, #20]
            aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 800a570:	f8bd 100c 	ldrh.w	r1, [sp, #12]
            mix                 = (uint32_t)((uint32_t)(out_x_last)*255) / height;
 800a574:	ebc8 2408 	rsb	r4, r8, r8, lsl #8
 800a578:	fbb4 f4f3 	udiv	r4, r4, r3
 800a57c:	b2e4      	uxtb	r4, r4
            aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 800a57e:	4622      	mov	r2, r4
 800a580:	4648      	mov	r0, r9
 800a582:	f7ff faeb 	bl	8009b5c <lv_color_mix>
            aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 800a586:	4622      	mov	r2, r4
            aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 800a588:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
            aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 800a58c:	4649      	mov	r1, r9
 800a58e:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 800a592:	f7ff fae3 	bl	8009b5c <lv_color_mix>
            lv_opa_t aa_opa = opa >> 1;
 800a596:	9b04      	ldr	r3, [sp, #16]
            aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 800a598:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
            lv_opa_t aa_opa = opa >> 1;
 800a59c:	085e      	lsrs	r6, r3, #1
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p), rb_origo.y + LV_CIRC_OCT2_Y(aa_p), mask, aa_color_hor_bottom,
 800a59e:	9b07      	ldr	r3, [sp, #28]
 800a5a0:	9600      	str	r6, [sp, #0]
 800a5a2:	fa1f f488 	uxth.w	r4, r8
 800a5a6:	4423      	add	r3, r4
 800a5a8:	b21d      	sxth	r5, r3
 800a5aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5ac:	4423      	add	r3, r4
 800a5ae:	fa0f f883 	sxth.w	r8, r3
 800a5b2:	465a      	mov	r2, fp
 800a5b4:	b283      	uxth	r3, r0
 800a5b6:	4641      	mov	r1, r8
 800a5b8:	4628      	mov	r0, r5
 800a5ba:	f7ff f997 	bl	80098ec <lv_draw_px>
            lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p), lb_origo.y + LV_CIRC_OCT4_Y(aa_p), mask, aa_color_hor_bottom,
 800a5be:	9b06      	ldr	r3, [sp, #24]
 800a5c0:	9600      	str	r6, [sp, #0]
 800a5c2:	1b1f      	subs	r7, r3, r4
 800a5c4:	b23f      	sxth	r7, r7
 800a5c6:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 800a5ca:	465a      	mov	r2, fp
 800a5cc:	4641      	mov	r1, r8
 800a5ce:	4638      	mov	r0, r7
 800a5d0:	f7ff f98c 	bl	80098ec <lv_draw_px>
            lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p), lt_origo.y + LV_CIRC_OCT6_Y(aa_p), mask, aa_color_hor_top,
 800a5d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5d6:	9600      	str	r6, [sp, #0]
 800a5d8:	1b1c      	subs	r4, r3, r4
 800a5da:	b224      	sxth	r4, r4
 800a5dc:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800a5e0:	465a      	mov	r2, fp
 800a5e2:	4621      	mov	r1, r4
 800a5e4:	4638      	mov	r0, r7
 800a5e6:	f7ff f981 	bl	80098ec <lv_draw_px>
            lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p), rt_origo.y + LV_CIRC_OCT8_Y(aa_p), mask, aa_color_hor_top,
 800a5ea:	9600      	str	r6, [sp, #0]
 800a5ec:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800a5f0:	465a      	mov	r2, fp
 800a5f2:	4621      	mov	r1, r4
 800a5f4:	4628      	mov	r0, r5
 800a5f6:	f7ff f979 	bl	80098ec <lv_draw_px>
    if(style->body.border.width != 0 && style->body.border.part != LV_BORDER_NONE &&
 800a5fa:	9b02      	ldr	r3, [sp, #8]
 800a5fc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800a600:	2b00      	cmp	r3, #0
 800a602:	f000 81c0 	beq.w	800a986 <lv_draw_rect+0xd56>
 800a606:	9b02      	ldr	r3, [sp, #8]
 800a608:	7b9b      	ldrb	r3, [r3, #14]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	f000 81bb 	beq.w	800a986 <lv_draw_rect+0xd56>
 800a610:	9b02      	ldr	r3, [sp, #8]
 800a612:	7bdb      	ldrb	r3, [r3, #15]
 800a614:	2b0f      	cmp	r3, #15
 800a616:	f240 81b6 	bls.w	800a986 <lv_draw_rect+0xd56>
    uint16_t radius = style->body.radius;
 800a61a:	9b02      	ldr	r3, [sp, #8]
 800a61c:	f8b3 9006 	ldrh.w	r9, [r3, #6]
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800a620:	f7fe fada 	bl	8008bd8 <lv_refr_get_disp_refreshing>
 800a624:	f001 ff9c 	bl	800c560 <lv_disp_get_antialiasing>
 800a628:	f8ba 1004 	ldrh.w	r1, [sl, #4]
 800a62c:	f8ba 3000 	ldrh.w	r3, [sl]
    return area_p->y2 - area_p->y1 + 1;
 800a630:	f8ba 2006 	ldrh.w	r2, [sl, #6]
    return area_p->x2 - area_p->x1 + 1;
 800a634:	3101      	adds	r1, #1
 800a636:	1ac9      	subs	r1, r1, r3
    return area_p->y2 - area_p->y1 + 1;
 800a638:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 800a63c:	4680      	mov	r8, r0
 800a63e:	3201      	adds	r2, #1
    lv_opa_t opa      = opa_scale == LV_OPA_COVER ? style->body.border.opa
 800a640:	9808      	ldr	r0, [sp, #32]
 800a642:	1ad2      	subs	r2, r2, r3
    lv_coord_t bwidth = style->body.border.width;
 800a644:	9b02      	ldr	r3, [sp, #8]
    lv_opa_t opa      = opa_scale == LV_OPA_COVER ? style->body.border.opa
 800a646:	28ff      	cmp	r0, #255	; 0xff
 800a648:	9802      	ldr	r0, [sp, #8]
    lv_coord_t bwidth = style->body.border.width;
 800a64a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800a64e:	7bc4      	ldrb	r4, [r0, #15]
    lv_opa_t opa      = opa_scale == LV_OPA_COVER ? style->body.border.opa
 800a650:	bf18      	it	ne
 800a652:	9808      	ldrne	r0, [sp, #32]
    bwidth--;
 800a654:	b29b      	uxth	r3, r3
    lv_opa_t opa      = opa_scale == LV_OPA_COVER ? style->body.border.opa
 800a656:	bf18      	it	ne
 800a658:	4344      	mulne	r4, r0
    bwidth--;
 800a65a:	f103 36ff 	add.w	r6, r3, #4294967295	; 0xffffffff
    lv_border_part_t part = style->body.border.part;
 800a65e:	9802      	ldr	r0, [sp, #8]
    bwidth--;
 800a660:	9303      	str	r3, [sp, #12]
 800a662:	b2b6      	uxth	r6, r6
 800a664:	b212      	sxth	r2, r2
    lv_border_part_t part = style->body.border.part;
 800a666:	7b85      	ldrb	r5, [r0, #14]
    lv_color_t color      = style->body.border.color;
 800a668:	8947      	ldrh	r7, [r0, #10]
    bwidth--;
 800a66a:	b233      	sxth	r3, r6
    return area_p->x2 - area_p->x1 + 1;
 800a66c:	b209      	sxth	r1, r1
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800a66e:	4648      	mov	r0, r9
    lv_opa_t opa      = opa_scale == LV_OPA_COVER ? style->body.border.opa
 800a670:	bf18      	it	ne
 800a672:	f3c4 2407 	ubfxne	r4, r4, #8, #8
    bwidth--;
 800a676:	9304      	str	r3, [sp, #16]
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800a678:	f7ff fa9c 	bl	8009bb4 <lv_draw_cont_radius_corr>
    if(radius < bwidth) {
 800a67c:	9b04      	ldr	r3, [sp, #16]
 800a67e:	4298      	cmp	r0, r3
        length_corr = bwidth - radius - aa;
 800a680:	bfbd      	ittte	lt
 800a682:	1a32      	sublt	r2, r6, r0
 800a684:	eba2 0208 	sublt.w	r2, r2, r8
 800a688:	b212      	sxthlt	r2, r2
    lv_coord_t length_corr = 0;
 800a68a:	2200      	movge	r2, #0
 800a68c:	9204      	str	r2, [sp, #16]
    if(style->body.radius == 0) {
 800a68e:	9a02      	ldr	r2, [sp, #8]
 800a690:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
        corner_size = radius + aa;
 800a694:	bfa8      	it	ge
 800a696:	eb00 0308 	addge.w	r3, r0, r8
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800a69a:	4681      	mov	r9, r0
        corner_size = radius + aa;
 800a69c:	bfa8      	it	ge
 800a69e:	b21b      	sxthge	r3, r3
 800a6a0:	f005 0202 	and.w	r2, r5, #2
    if(style->body.radius == 0) {
 800a6a4:	2900      	cmp	r1, #0
 800a6a6:	f040 849b 	bne.w	800afe0 <lv_draw_rect+0x13b0>
        if(part & LV_BORDER_TOP) {
 800a6aa:	f002 08ff 	and.w	r8, r2, #255	; 0xff
 800a6ae:	b1a2      	cbz	r2, 800a6da <lv_draw_rect+0xaaa>
            work_area.x1 = coords->x1;
 800a6b0:	f8ba 3000 	ldrh.w	r3, [sl]
 800a6b4:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            work_area.x2 = coords->x2;
 800a6b8:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 800a6bc:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            work_area.y1 = coords->y1;
 800a6c0:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
 800a6c4:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            work_area.y2 = coords->y1 + bwidth;
 800a6c8:	4433      	add	r3, r6
 800a6ca:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&work_area, mask, color, opa);
 800a6ce:	463a      	mov	r2, r7
 800a6d0:	4623      	mov	r3, r4
 800a6d2:	4659      	mov	r1, fp
 800a6d4:	a826      	add	r0, sp, #152	; 0x98
 800a6d6:	f7ff f959 	bl	800998c <lv_draw_fill>
        if(part & LV_BORDER_RIGHT) {
 800a6da:	0729      	lsls	r1, r5, #28
 800a6dc:	d520      	bpl.n	800a720 <lv_draw_rect+0xaf0>
            work_area.x1 = coords->x2 - bwidth;
 800a6de:	f9ba 3004 	ldrsh.w	r3, [sl, #4]
            work_area.x2 = coords->x2;
 800a6e2:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            work_area.x1 = coords->x2 - bwidth;
 800a6e6:	1b9a      	subs	r2, r3, r6
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 800a6e8:	f1b8 0f00 	cmp.w	r8, #0
            work_area.x1 = coords->x2 - bwidth;
 800a6ec:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 800a6f0:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 800a6f4:	9a03      	ldr	r2, [sp, #12]
 800a6f6:	bf08      	it	eq
 800a6f8:	2200      	moveq	r2, #0
 800a6fa:	4413      	add	r3, r2
 800a6fc:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 800a700:	9a03      	ldr	r2, [sp, #12]
 800a702:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 800a706:	f015 0f01 	tst.w	r5, #1
 800a70a:	bf08      	it	eq
 800a70c:	2200      	moveq	r2, #0
 800a70e:	1a9b      	subs	r3, r3, r2
 800a710:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&work_area, mask, color, opa);
 800a714:	463a      	mov	r2, r7
 800a716:	4623      	mov	r3, r4
 800a718:	4659      	mov	r1, fp
 800a71a:	a826      	add	r0, sp, #152	; 0x98
 800a71c:	f7ff f936 	bl	800998c <lv_draw_fill>
        if(part & LV_BORDER_LEFT) {
 800a720:	f015 0f04 	tst.w	r5, #4
 800a724:	f005 0501 	and.w	r5, r5, #1
 800a728:	d020      	beq.n	800a76c <lv_draw_rect+0xb3c>
            work_area.x1 = coords->x1;
 800a72a:	f9ba 3000 	ldrsh.w	r3, [sl]
 800a72e:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            work_area.x2 = coords->x1 + bwidth;
 800a732:	4433      	add	r3, r6
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 800a734:	9a03      	ldr	r2, [sp, #12]
            work_area.x2 = coords->x1 + bwidth;
 800a736:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 800a73a:	f1b8 0f00 	cmp.w	r8, #0
 800a73e:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 800a742:	bf08      	it	eq
 800a744:	2200      	moveq	r2, #0
 800a746:	4413      	add	r3, r2
 800a748:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 800a74c:	9a03      	ldr	r2, [sp, #12]
 800a74e:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 800a752:	2d00      	cmp	r5, #0
 800a754:	bf08      	it	eq
 800a756:	2200      	moveq	r2, #0
 800a758:	1a9b      	subs	r3, r3, r2
 800a75a:	9203      	str	r2, [sp, #12]
 800a75c:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&work_area, mask, color, opa);
 800a760:	463a      	mov	r2, r7
 800a762:	4623      	mov	r3, r4
 800a764:	4659      	mov	r1, fp
 800a766:	a826      	add	r0, sp, #152	; 0x98
 800a768:	f7ff f910 	bl	800998c <lv_draw_fill>
        if(part & LV_BORDER_BOTTOM) {
 800a76c:	b1a5      	cbz	r5, 800a798 <lv_draw_rect+0xb68>
            work_area.x1 = coords->x1;
 800a76e:	f8ba 3000 	ldrh.w	r3, [sl]
 800a772:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            work_area.x2 = coords->x2;
 800a776:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 800a77a:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            work_area.y1 = coords->y2 - bwidth;
 800a77e:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 800a782:	1b9e      	subs	r6, r3, r6
 800a784:	f8ad 609a 	strh.w	r6, [sp, #154]	; 0x9a
            work_area.y2 = coords->y2;
 800a788:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&work_area, mask, color, opa);
 800a78c:	463a      	mov	r2, r7
 800a78e:	4623      	mov	r3, r4
 800a790:	4659      	mov	r1, fp
 800a792:	a826      	add	r0, sp, #152	; 0x98
 800a794:	f7ff f8fa 	bl	800998c <lv_draw_fill>
        if(style->body.radius != 0) {
 800a798:	9b02      	ldr	r3, [sp, #8]
 800a79a:	f9b3 5006 	ldrsh.w	r5, [r3, #6]
 800a79e:	2d00      	cmp	r5, #0
 800a7a0:	f000 80f1 	beq.w	800a986 <lv_draw_rect+0xd56>
    bool aa               = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800a7a4:	f7fe fa18 	bl	8008bd8 <lv_refr_get_disp_refreshing>
 800a7a8:	f001 feda 	bl	800c560 <lv_disp_get_antialiasing>
    lv_coord_t bwidth     = style->body.border.width;
 800a7ac:	9b02      	ldr	r3, [sp, #8]
    bool aa               = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800a7ae:	900e      	str	r0, [sp, #56]	; 0x38
    lv_coord_t bwidth     = style->body.border.width;
 800a7b0:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
    lv_color_t color      = style->body.border.color;
 800a7b4:	895b      	ldrh	r3, [r3, #10]
 800a7b6:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
    lv_border_part_t part = style->body.border.part;
 800a7ba:	9b02      	ldr	r3, [sp, #8]
 800a7bc:	7b9b      	ldrb	r3, [r3, #14]
 800a7be:	9305      	str	r3, [sp, #20]
    lv_opa_t opa          = opa_scale == LV_OPA_COVER ? style->body.border.opa
 800a7c0:	9b08      	ldr	r3, [sp, #32]
 800a7c2:	2bff      	cmp	r3, #255	; 0xff
 800a7c4:	9b02      	ldr	r3, [sp, #8]
 800a7c6:	bf18      	it	ne
 800a7c8:	9a08      	ldrne	r2, [sp, #32]
 800a7ca:	7bdb      	ldrb	r3, [r3, #15]
 800a7cc:	bf1c      	itt	ne
 800a7ce:	4353      	mulne	r3, r2
 800a7d0:	f3c3 2307 	ubfxne	r3, r3, #8, #8
 800a7d4:	9307      	str	r3, [sp, #28]
    if(aa) bwidth--; /*Because of anti-aliasing the border seems one pixel ticker*/
 800a7d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    uint16_t radius       = style->body.radius;
 800a7d8:	b2ad      	uxth	r5, r5
    bwidth--;
 800a7da:	b2a4      	uxth	r4, r4
    if(aa) bwidth--; /*Because of anti-aliasing the border seems one pixel ticker*/
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	f040 854f 	bne.w	800b280 <lv_draw_rect+0x1650>
    bwidth--;
 800a7e2:	3c01      	subs	r4, #1
    return area_p->y2 - area_p->y1 + 1;
 800a7e4:	f8ba 2006 	ldrh.w	r2, [sl, #6]
 800a7e8:	f8ba 3002 	ldrh.w	r3, [sl, #2]
    return area_p->x2 - area_p->x1 + 1;
 800a7ec:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    return area_p->y2 - area_p->y1 + 1;
 800a7f0:	3201      	adds	r2, #1
 800a7f2:	1ad2      	subs	r2, r2, r3
    return area_p->x2 - area_p->x1 + 1;
 800a7f4:	f8ba 3000 	ldrh.w	r3, [sl]
 800a7f8:	3101      	adds	r1, #1
 800a7fa:	1ac9      	subs	r1, r1, r3
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800a7fc:	b212      	sxth	r2, r2
 800a7fe:	b209      	sxth	r1, r1
 800a800:	4628      	mov	r0, r5
 800a802:	f7ff f9d7 	bl	8009bb4 <lv_draw_cont_radius_corr>
    lt_origo.x = coords->x1 + radius + aa;
 800a806:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800a80a:	f8ba 2000 	ldrh.w	r2, [sl]
 800a80e:	441a      	add	r2, r3
 800a810:	4402      	add	r2, r0
 800a812:	b292      	uxth	r2, r2
 800a814:	9206      	str	r2, [sp, #24]
    lt_origo.y = coords->y1 + radius + aa;
 800a816:	f8ba 2002 	ldrh.w	r2, [sl, #2]
 800a81a:	441a      	add	r2, r3
 800a81c:	4402      	add	r2, r0
 800a81e:	b292      	uxth	r2, r2
 800a820:	9203      	str	r2, [sp, #12]
 800a822:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 800a826:	9211      	str	r2, [sp, #68]	; 0x44
    lb_origo.y = coords->y2 - radius - aa;
 800a828:	f8ba 2006 	ldrh.w	r2, [sl, #6]
 800a82c:	1a12      	subs	r2, r2, r0
 800a82e:	1ad2      	subs	r2, r2, r3
 800a830:	b292      	uxth	r2, r2
 800a832:	9204      	str	r2, [sp, #16]
 800a834:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800a838:	9212      	str	r2, [sp, #72]	; 0x48
    rt_origo.x = coords->x2 - radius - aa;
 800a83a:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 800a83e:	1a12      	subs	r2, r2, r0
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800a840:	4605      	mov	r5, r0
    rt_origo.x = coords->x2 - radius - aa;
 800a842:	1ad3      	subs	r3, r2, r3
    lv_circ_init(&cir_out, &tmp_out, radius);
 800a844:	fa0f f980 	sxth.w	r9, r0
    if(aa) bwidth--; /*Because of anti-aliasing the border seems one pixel ticker*/
 800a848:	b2a4      	uxth	r4, r4
    rt_origo.x = coords->x2 - radius - aa;
 800a84a:	b29b      	uxth	r3, r3
    lv_circ_init(&cir_out, &tmp_out, radius);
 800a84c:	464a      	mov	r2, r9
 800a84e:	a91e      	add	r1, sp, #120	; 0x78
 800a850:	a822      	add	r0, sp, #136	; 0x88
    lv_coord_t radius_in = radius - bwidth;
 800a852:	1b2c      	subs	r4, r5, r4
    rt_origo.x = coords->x2 - radius - aa;
 800a854:	9309      	str	r3, [sp, #36]	; 0x24
    lv_circ_init(&cir_out, &tmp_out, radius);
 800a856:	f002 f81c 	bl	800c892 <lv_circ_init>
    lv_coord_t radius_in = radius - bwidth;
 800a85a:	b223      	sxth	r3, r4
    lv_circ_init(&cir_in, &tmp_in, radius_in);
 800a85c:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 800a860:	a920      	add	r1, sp, #128	; 0x80
 800a862:	a824      	add	r0, sp, #144	; 0x90
    lv_coord_t radius_in = radius - bwidth;
 800a864:	9308      	str	r3, [sp, #32]
    lv_circ_init(&cir_in, &tmp_in, radius_in);
 800a866:	f002 f814 	bl	800c892 <lv_circ_init>
    lv_coord_t in_y_seg_start = 0;
 800a86a:	2300      	movs	r3, #0
 800a86c:	930c      	str	r3, [sp, #48]	; 0x30
    lv_coord_t out_y_seg_start = 0;
 800a86e:	930f      	str	r3, [sp, #60]	; 0x3c
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800a870:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a872:	3b01      	subs	r3, #1
 800a874:	9316      	str	r3, [sp, #88]	; 0x58
 800a876:	9b05      	ldr	r3, [sp, #20]
 800a878:	f003 0309 	and.w	r3, r3, #9
 800a87c:	9310      	str	r3, [sp, #64]	; 0x40
    while(cir_out.y <= cir_out.x) {
 800a87e:	f9bd a08a 	ldrsh.w	sl, [sp, #138]	; 0x8a
 800a882:	f9bd 2088 	ldrsh.w	r2, [sp, #136]	; 0x88
 800a886:	4552      	cmp	r2, sl
 800a888:	f280 84fd 	bge.w	800b286 <lv_draw_rect+0x1656>
    if(aa) {
 800a88c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d079      	beq.n	800a986 <lv_draw_rect+0xd56>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800a892:	9b09      	ldr	r3, [sp, #36]	; 0x24
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800a894:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800a898:	fa1f f789 	uxth.w	r7, r9
 800a89c:	3301      	adds	r3, #1
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800a89e:	ebaa 0a05 	sub.w	sl, sl, r5
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800a8a2:	18fb      	adds	r3, r7, r3
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800a8a4:	fa0f fa8a 	sxth.w	sl, sl
 800a8a8:	2600      	movs	r6, #0
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800a8aa:	930a      	str	r3, [sp, #40]	; 0x28
 800a8ac:	b231      	sxth	r1, r6
        for(i = 0; i < seg_size; i++) {
 800a8ae:	458a      	cmp	sl, r1
 800a8b0:	f300 877e 	bgt.w	800b7b0 <lv_draw_rect+0x1b80>
        if(LV_MATH_ABS(aa_p.x - aa_p.y) == seg_size) {
 800a8b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a8b6:	eba9 0503 	sub.w	r5, r9, r3
 800a8ba:	2d00      	cmp	r5, #0
 800a8bc:	bfb8      	it	lt
 800a8be:	426d      	neglt	r5, r5
 800a8c0:	4555      	cmp	r5, sl
 800a8c2:	d14d      	bne.n	800a960 <lv_draw_rect+0xd30>
            lv_opa_t aa_opa = opa >> 1;
 800a8c4:	9b07      	ldr	r3, [sp, #28]
 800a8c6:	085c      	lsrs	r4, r3, #1
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800a8c8:	9b05      	ldr	r3, [sp, #20]
 800a8ca:	f003 0309 	and.w	r3, r3, #9
 800a8ce:	2b09      	cmp	r3, #9
 800a8d0:	d10d      	bne.n	800a8ee <lv_draw_rect+0xcbe>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p), rb_origo.y + LV_CIRC_OCT2_Y(aa_p), mask,
 800a8d2:	9b04      	ldr	r3, [sp, #16]
 800a8d4:	9400      	str	r4, [sp, #0]
 800a8d6:	fa1f f089 	uxth.w	r0, r9
 800a8da:	1819      	adds	r1, r3, r0
 800a8dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8de:	4418      	add	r0, r3
 800a8e0:	9b02      	ldr	r3, [sp, #8]
 800a8e2:	465a      	mov	r2, fp
 800a8e4:	895b      	ldrh	r3, [r3, #10]
 800a8e6:	b209      	sxth	r1, r1
 800a8e8:	b200      	sxth	r0, r0
 800a8ea:	f7fe ffff 	bl	80098ec <lv_draw_px>
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800a8ee:	9b05      	ldr	r3, [sp, #20]
 800a8f0:	f003 0305 	and.w	r3, r3, #5
 800a8f4:	2b05      	cmp	r3, #5
 800a8f6:	d10d      	bne.n	800a914 <lv_draw_rect+0xce4>
                lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p), lb_origo.y + LV_CIRC_OCT4_Y(aa_p), mask,
 800a8f8:	9b04      	ldr	r3, [sp, #16]
 800a8fa:	9400      	str	r4, [sp, #0]
 800a8fc:	fa1f f089 	uxth.w	r0, r9
 800a900:	1819      	adds	r1, r3, r0
 800a902:	9b06      	ldr	r3, [sp, #24]
 800a904:	1a18      	subs	r0, r3, r0
 800a906:	9b02      	ldr	r3, [sp, #8]
 800a908:	465a      	mov	r2, fp
 800a90a:	895b      	ldrh	r3, [r3, #10]
 800a90c:	b209      	sxth	r1, r1
 800a90e:	b200      	sxth	r0, r0
 800a910:	f7fe ffec 	bl	80098ec <lv_draw_px>
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800a914:	9b05      	ldr	r3, [sp, #20]
 800a916:	f003 0306 	and.w	r3, r3, #6
 800a91a:	2b06      	cmp	r3, #6
 800a91c:	d10d      	bne.n	800a93a <lv_draw_rect+0xd0a>
                lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p), lt_origo.y + LV_CIRC_OCT6_Y(aa_p), mask,
 800a91e:	9b03      	ldr	r3, [sp, #12]
 800a920:	9400      	str	r4, [sp, #0]
 800a922:	fa1f f089 	uxth.w	r0, r9
 800a926:	1a19      	subs	r1, r3, r0
 800a928:	9b06      	ldr	r3, [sp, #24]
 800a92a:	1a18      	subs	r0, r3, r0
 800a92c:	9b02      	ldr	r3, [sp, #8]
 800a92e:	465a      	mov	r2, fp
 800a930:	895b      	ldrh	r3, [r3, #10]
 800a932:	b209      	sxth	r1, r1
 800a934:	b200      	sxth	r0, r0
 800a936:	f7fe ffd9 	bl	80098ec <lv_draw_px>
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800a93a:	9b05      	ldr	r3, [sp, #20]
 800a93c:	f003 030a 	and.w	r3, r3, #10
 800a940:	2b0a      	cmp	r3, #10
 800a942:	d10d      	bne.n	800a960 <lv_draw_rect+0xd30>
                lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p), rt_origo.y + LV_CIRC_OCT8_Y(aa_p), mask,
 800a944:	9b03      	ldr	r3, [sp, #12]
 800a946:	9400      	str	r4, [sp, #0]
 800a948:	fa1f f789 	uxth.w	r7, r9
 800a94c:	1bd9      	subs	r1, r3, r7
 800a94e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a950:	441f      	add	r7, r3
 800a952:	9b02      	ldr	r3, [sp, #8]
 800a954:	465a      	mov	r2, fp
 800a956:	895b      	ldrh	r3, [r3, #10]
 800a958:	b209      	sxth	r1, r1
 800a95a:	b238      	sxth	r0, r7
 800a95c:	f7fe ffc6 	bl	80098ec <lv_draw_px>
        seg_size     = in_y_seg_end - in_y_seg_start;
 800a960:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 800a964:	f8bd 3092 	ldrh.w	r3, [sp, #146]	; 0x92
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800a968:	9a08      	ldr	r2, [sp, #32]
        seg_size     = in_y_seg_end - in_y_seg_start;
 800a96a:	1b5b      	subs	r3, r3, r5
 800a96c:	b21b      	sxth	r3, r3
 800a96e:	930a      	str	r3, [sp, #40]	; 0x28
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800a970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a972:	3b01      	subs	r3, #1
 800a974:	4413      	add	r3, r2
 800a976:	b21b      	sxth	r3, r3
        seg_size     = in_y_seg_end - in_y_seg_start;
 800a978:	2400      	movs	r4, #0
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800a97a:	930b      	str	r3, [sp, #44]	; 0x2c
        for(i = 0; i < seg_size; i++) {
 800a97c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a97e:	b221      	sxth	r1, r4
 800a980:	428b      	cmp	r3, r1
 800a982:	f300 87b0 	bgt.w	800b8e6 <lv_draw_rect+0x1cb6>
}
 800a986:	b029      	add	sp, #164	; 0xa4
 800a988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        curve_x[LV_CIRC_OCT1_Y(circ)] = LV_CIRC_OCT1_X(circ);
 800a98c:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 800a990:	f9bd 2090 	ldrsh.w	r2, [sp, #144]	; 0x90
 800a994:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
        curve_x[LV_CIRC_OCT2_Y(circ)] = LV_CIRC_OCT2_X(circ);
 800a998:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 800a99c:	f9bd 2092 	ldrsh.w	r2, [sp, #146]	; 0x92
 800a9a0:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
        lv_circ_next(&circ, &circ_tmp);
 800a9a4:	a922      	add	r1, sp, #136	; 0x88
 800a9a6:	4648      	mov	r0, r9
 800a9a8:	f001 ff83 	bl	800c8b2 <lv_circ_next>
 800a9ac:	f7ff bbe4 	b.w	800a178 <lv_draw_rect+0x548>
        line_1d_blur[col] = (uint32_t)((uint32_t)(swidth - col) * opa / 2) / (swidth);
 800a9b0:	0842      	lsrs	r2, r0, #1
 800a9b2:	1ac0      	subs	r0, r0, r3
 800a9b4:	fbb2 f2f6 	udiv	r2, r2, r6
 800a9b8:	f801 2b01 	strb.w	r2, [r1], #1
 800a9bc:	f7ff bbef 	b.w	800a19e <lv_draw_rect+0x56e>
        point_l.y = ofs_l.y + curve_x[col];
 800a9c0:	f837 5013 	ldrh.w	r5, [r7, r3, lsl #1]
 800a9c4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a9c6:	9904      	ldr	r1, [sp, #16]
 800a9c8:	4428      	add	r0, r5
 800a9ca:	b280      	uxth	r0, r0
 800a9cc:	900d      	str	r0, [sp, #52]	; 0x34
 800a9ce:	9806      	ldr	r0, [sp, #24]
 800a9d0:	fa1f f288 	uxth.w	r2, r8
 800a9d4:	1a89      	subs	r1, r1, r2
 800a9d6:	4402      	add	r2, r0
 800a9d8:	b209      	sxth	r1, r1
 800a9da:	b212      	sxth	r2, r2
 800a9dc:	910e      	str	r1, [sp, #56]	; 0x38
 800a9de:	920a      	str	r2, [sp, #40]	; 0x28
 800a9e0:	0059      	lsls	r1, r3, #1
        int16_t diff = col == 0 ? 0 : curve_x[col - 1] - curve_x[col];
 800a9e2:	b123      	cbz	r3, 800a9ee <lv_draw_rect+0xdbe>
 800a9e4:	187a      	adds	r2, r7, r1
 800a9e6:	f832 3c02 	ldrh.w	r3, [r2, #-2]
 800a9ea:	1b5b      	subs	r3, r3, r5
 800a9ec:	b29b      	uxth	r3, r3
 800a9ee:	b21b      	sxth	r3, r3
 800a9f0:	9307      	str	r3, [sp, #28]
 800a9f2:	f04f 0900 	mov.w	r9, #0
 800a9f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a9f8:	444b      	add	r3, r9
 800a9fa:	b21b      	sxth	r3, r3
 800a9fc:	9309      	str	r3, [sp, #36]	; 0x24
        for(d = 0; d < swidth; d++) {
 800a9fe:	fa1f f389 	uxth.w	r3, r9
 800aa02:	42b3      	cmp	r3, r6
 800aa04:	db03      	blt.n	800aa0e <lv_draw_rect+0xdde>
 800aa06:	f108 0801 	add.w	r8, r8, #1
 800aa0a:	f7ff bbe7 	b.w	800a1dc <lv_draw_rect+0x5ac>
            if(diff == 0) {
 800aa0e:	9a07      	ldr	r2, [sp, #28]
                px_opa = line_1d_blur[d];
 800aa10:	5ce5      	ldrb	r5, [r4, r3]
            if(diff == 0) {
 800aa12:	b9b2      	cbnz	r2, 800aa42 <lv_draw_rect+0xe12>
            lv_draw_px(point_l.x, point_l.y, mask, style->body.shadow.color, px_opa);
 800aa14:	9b02      	ldr	r3, [sp, #8]
 800aa16:	9500      	str	r5, [sp, #0]
 800aa18:	8a1b      	ldrh	r3, [r3, #16]
 800aa1a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aa1c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800aa1e:	465a      	mov	r2, fp
 800aa20:	f7fe ff64 	bl	80098ec <lv_draw_px>
            if(point_r.x > ofs_l.x) {
 800aa24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa28:	4293      	cmp	r3, r2
 800aa2a:	da07      	bge.n	800aa3c <lv_draw_rect+0xe0c>
                lv_draw_px(point_r.x, point_r.y, mask, style->body.shadow.color, px_opa);
 800aa2c:	9b02      	ldr	r3, [sp, #8]
 800aa2e:	9500      	str	r5, [sp, #0]
 800aa30:	8a1b      	ldrh	r3, [r3, #16]
 800aa32:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aa34:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aa36:	465a      	mov	r2, fp
 800aa38:	f7fe ff58 	bl	80098ec <lv_draw_px>
 800aa3c:	f109 0901 	add.w	r9, r9, #1
 800aa40:	e7d9      	b.n	800a9f6 <lv_draw_rect+0xdc6>
                px_opa = (uint16_t)((uint16_t)line_1d_blur[d] + line_1d_blur[d - diff]) >> 1;
 800aa42:	9a07      	ldr	r2, [sp, #28]
 800aa44:	1a9b      	subs	r3, r3, r2
 800aa46:	5ce3      	ldrb	r3, [r4, r3]
 800aa48:	441d      	add	r5, r3
 800aa4a:	f3c5 0547 	ubfx	r5, r5, #1, #8
 800aa4e:	e7e1      	b.n	800aa14 <lv_draw_rect+0xde4>
        lv_draw_fill(&area_mid, mask, style->body.shadow.color, line_1d_blur[d]);
 800aa50:	9a02      	ldr	r2, [sp, #8]
 800aa52:	5ce3      	ldrb	r3, [r4, r3]
 800aa54:	8a12      	ldrh	r2, [r2, #16]
 800aa56:	4659      	mov	r1, fp
 800aa58:	a826      	add	r0, sp, #152	; 0x98
 800aa5a:	f7fe ff97 	bl	800998c <lv_draw_fill>
        area_mid.y1++;
 800aa5e:	f8bd 309a 	ldrh.w	r3, [sp, #154]	; 0x9a
 800aa62:	3301      	adds	r3, #1
 800aa64:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
        area_mid.y2++;
 800aa68:	f8bd 309e 	ldrh.w	r3, [sp, #158]	; 0x9e
 800aa6c:	3301      	adds	r3, #1
 800aa6e:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
 800aa72:	462b      	mov	r3, r5
 800aa74:	f7ff bbc7 	b.w	800a206 <lv_draw_rect+0x5d6>
                work_area.y1 += 1;
 800aa78:	3301      	adds	r3, #1
 800aa7a:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
                work_area.y2 -= 1;
 800aa7e:	3d01      	subs	r5, #1
 800aa80:	e422      	b.n	800a2c8 <lv_draw_rect+0x698>
        if(style->body.radius != 0) {
 800aa82:	9a02      	ldr	r2, [sp, #8]
 800aa84:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
        lv_coord_t row_end   = coords->y2 - radius;
 800aa88:	1a2d      	subs	r5, r5, r0
 800aa8a:	b2ad      	uxth	r5, r5
        if(style->body.radius != 0) {
 800aa8c:	b9fa      	cbnz	r2, 800aace <lv_draw_rect+0xe9e>
        lv_coord_t row_start = coords->y1 + radius;
 800aa8e:	b21c      	sxth	r4, r3
                row_end -= 1;
 800aa90:	b22d      	sxth	r5, r5
 800aa92:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
        for(row = row_start; row <= row_end; row++) {
 800aa96:	42ac      	cmp	r4, r5
 800aa98:	f73f ac1e 	bgt.w	800a2d8 <lv_draw_rect+0x6a8>
            mix          = (uint32_t)((uint32_t)(coords->y2 - work_area.y1) * 255) / height;
 800aa9c:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
            work_area.y1 = row;
 800aaa0:	f8ad 409a 	strh.w	r4, [sp, #154]	; 0x9a
            mix          = (uint32_t)((uint32_t)(coords->y2 - work_area.y1) * 255) / height;
 800aaa4:	1b12      	subs	r2, r2, r4
            act_color    = lv_color_mix(mcolor, gcolor, mix);
 800aaa6:	4649      	mov	r1, r9
            mix          = (uint32_t)((uint32_t)(coords->y2 - work_area.y1) * 255) / height;
 800aaa8:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
            act_color    = lv_color_mix(mcolor, gcolor, mix);
 800aaac:	4640      	mov	r0, r8
            mix          = (uint32_t)((uint32_t)(coords->y2 - work_area.y1) * 255) / height;
 800aaae:	fbb2 f2f6 	udiv	r2, r2, r6
            act_color    = lv_color_mix(mcolor, gcolor, mix);
 800aab2:	b2d2      	uxtb	r2, r2
            work_area.y2 = row;
 800aab4:	f8ad 409e 	strh.w	r4, [sp, #158]	; 0x9e
            act_color    = lv_color_mix(mcolor, gcolor, mix);
 800aab8:	f7ff f850 	bl	8009b5c <lv_color_mix>
 800aabc:	3401      	adds	r4, #1
            lv_draw_fill(&work_area, mask, act_color, opa);
 800aabe:	4602      	mov	r2, r0
 800aac0:	463b      	mov	r3, r7
 800aac2:	4659      	mov	r1, fp
 800aac4:	a826      	add	r0, sp, #152	; 0x98
 800aac6:	f7fe ff61 	bl	800998c <lv_draw_fill>
 800aaca:	b224      	sxth	r4, r4
 800aacc:	e7e3      	b.n	800aa96 <lv_draw_rect+0xe66>
            if(aa) {
 800aace:	b11c      	cbz	r4, 800aad8 <lv_draw_rect+0xea8>
                row_start += 2;
 800aad0:	1c9c      	adds	r4, r3, #2
 800aad2:	b224      	sxth	r4, r4
                row_end -= 2;
 800aad4:	3d02      	subs	r5, #2
 800aad6:	e7db      	b.n	800aa90 <lv_draw_rect+0xe60>
                row_start += 1;
 800aad8:	1c5c      	adds	r4, r3, #1
 800aada:	b224      	sxth	r4, r4
                row_end -= 1;
 800aadc:	3d01      	subs	r5, #1
 800aade:	e7d7      	b.n	800aa90 <lv_draw_rect+0xe60>
        if(aa) {
 800aae0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d039      	beq.n	800ab5a <lv_draw_rect+0xf2a>
            if(out_x_last != cir.x) {
 800aae6:	f9bd 3078 	ldrsh.w	r3, [sp, #120]	; 0x78
 800aaea:	4543      	cmp	r3, r8
 800aaec:	d035      	beq.n	800ab5a <lv_draw_rect+0xf2a>
                out_y_seg_end       = cir.y;
 800aaee:	f9bd 307a 	ldrsh.w	r3, [sp, #122]	; 0x7a
 800aaf2:	9317      	str	r3, [sp, #92]	; 0x5c
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800aaf4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800aaf8:	930f      	str	r3, [sp, #60]	; 0x3c
 800aafa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800aafc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
                aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 800aafe:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800ab02:	1a9b      	subs	r3, r3, r2
 800ab04:	b21b      	sxth	r3, r3
 800ab06:	9311      	str	r3, [sp, #68]	; 0x44
                mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 800ab08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab0a:	eba3 0408 	sub.w	r4, r3, r8
 800ab0e:	ebc4 2404 	rsb	r4, r4, r4, lsl #8
 800ab12:	9b05      	ldr	r3, [sp, #20]
 800ab14:	fbb4 f4f3 	udiv	r4, r4, r3
 800ab18:	b2e4      	uxtb	r4, r4
                aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 800ab1a:	4622      	mov	r2, r4
 800ab1c:	4648      	mov	r0, r9
 800ab1e:	f7ff f81d 	bl	8009b5c <lv_color_mix>
                aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 800ab22:	4622      	mov	r2, r4
                aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 800ab24:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
                aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 800ab28:	4649      	mov	r1, r9
 800ab2a:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 800ab2e:	f7ff f815 	bl	8009b5c <lv_color_mix>
 800ab32:	2300      	movs	r3, #0
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800ab34:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
                aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 800ab36:	9310      	str	r3, [sp, #64]	; 0x40
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800ab38:	fa1f f388 	uxth.w	r3, r8
 800ab3c:	9313      	str	r3, [sp, #76]	; 0x4c
 800ab3e:	4413      	add	r3, r2
                aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 800ab40:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800ab44:	931a      	str	r3, [sp, #104]	; 0x68
 800ab46:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
                for(i = 0; i < seg_size; i++) {
 800ab4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ab4c:	428b      	cmp	r3, r1
 800ab4e:	f300 8090 	bgt.w	800ac72 <lv_draw_rect+0x1042>
                out_y_seg_start = out_y_seg_end;
 800ab52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
                out_x_last      = cir.x;
 800ab54:	f9bd 8078 	ldrsh.w	r8, [sp, #120]	; 0x78
                out_y_seg_start = out_y_seg_end;
 800ab58:	930e      	str	r3, [sp, #56]	; 0x38
        if(mid_bot_area.y1 != LV_CIRC_OCT4_Y(cir) + lb_origo.y) mid_bot_refr = 1;
 800ab5a:	f9bd 407a 	ldrsh.w	r4, [sp, #122]	; 0x7a
 800ab5e:	9b16      	ldr	r3, [sp, #88]	; 0x58
        if(edge_bot_area.y1 != LV_CIRC_OCT2_Y(cir) + lb_origo.y) edge_bot_refr = 1;
 800ab60:	9a16      	ldr	r2, [sp, #88]	; 0x58
        if(edge_top_area.y1 != LV_CIRC_OCT7_Y(cir) + lt_origo.y) edge_top_refr = 1;
 800ab62:	f9bd 1082 	ldrsh.w	r1, [sp, #130]	; 0x82
        if(mid_bot_area.y1 != LV_CIRC_OCT4_Y(cir) + lb_origo.y) mid_bot_refr = 1;
 800ab66:	f9bd 7092 	ldrsh.w	r7, [sp, #146]	; 0x92
        if(mid_top_area.y1 != LV_CIRC_OCT8_Y(cir) + lt_origo.y) mid_top_refr = 1;
 800ab6a:	f9bd 608a 	ldrsh.w	r6, [sp, #138]	; 0x8a
        if(mid_bot_area.y1 != LV_CIRC_OCT4_Y(cir) + lb_origo.y) mid_bot_refr = 1;
 800ab6e:	18e5      	adds	r5, r4, r3
        if(edge_bot_area.y1 != LV_CIRC_OCT2_Y(cir) + lb_origo.y) edge_bot_refr = 1;
 800ab70:	f9bd 309a 	ldrsh.w	r3, [sp, #154]	; 0x9a
 800ab74:	930c      	str	r3, [sp, #48]	; 0x30
 800ab76:	f9bd 3078 	ldrsh.w	r3, [sp, #120]	; 0x78
 800ab7a:	441a      	add	r2, r3
 800ab7c:	920d      	str	r2, [sp, #52]	; 0x34
        if(mid_top_area.y1 != LV_CIRC_OCT8_Y(cir) + lt_origo.y) mid_top_refr = 1;
 800ab7e:	9a15      	ldr	r2, [sp, #84]	; 0x54
        if(edge_top_area.y1 != LV_CIRC_OCT7_Y(cir) + lt_origo.y) edge_top_refr = 1;
 800ab80:	1ad3      	subs	r3, r2, r3
 800ab82:	4299      	cmp	r1, r3
        if(mid_top_area.y1 != LV_CIRC_OCT8_Y(cir) + lt_origo.y) mid_top_refr = 1;
 800ab84:	eba2 0404 	sub.w	r4, r2, r4
        if(edge_top_area.y1 != LV_CIRC_OCT7_Y(cir) + lt_origo.y) edge_top_refr = 1;
 800ab88:	f040 874d 	bne.w	800ba26 <lv_draw_rect+0x1df6>
        if(mid_top_refr != 0) {
 800ab8c:	42a6      	cmp	r6, r4
 800ab8e:	d00a      	beq.n	800aba6 <lv_draw_rect+0xf76>
            if(mcolor.full == gcolor.full)
 800ab90:	9b03      	ldr	r3, [sp, #12]
 800ab92:	454b      	cmp	r3, r9
 800ab94:	f040 8117 	bne.w	800adc6 <lv_draw_rect+0x1196>
                act_color = mcolor;
 800ab98:	f8bd 200c 	ldrh.w	r2, [sp, #12]
            lv_draw_fill(&mid_top_area, mask, act_color, opa);
 800ab9c:	9b04      	ldr	r3, [sp, #16]
 800ab9e:	4659      	mov	r1, fp
 800aba0:	a822      	add	r0, sp, #136	; 0x88
 800aba2:	f7fe fef3 	bl	800998c <lv_draw_fill>
        if(mid_bot_refr != 0) {
 800aba6:	42af      	cmp	r7, r5
 800aba8:	d00a      	beq.n	800abc0 <lv_draw_rect+0xf90>
            if(mcolor.full == gcolor.full)
 800abaa:	9b03      	ldr	r3, [sp, #12]
 800abac:	454b      	cmp	r3, r9
 800abae:	f040 811c 	bne.w	800adea <lv_draw_rect+0x11ba>
                act_color = mcolor;
 800abb2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
            lv_draw_fill(&mid_bot_area, mask, act_color, opa);
 800abb6:	9b04      	ldr	r3, [sp, #16]
 800abb8:	4659      	mov	r1, fp
 800abba:	a824      	add	r0, sp, #144	; 0x90
 800abbc:	f7fe fee6 	bl	800998c <lv_draw_fill>
        if(edge_bot_refr != 0) {
 800abc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800abc2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800abc4:	4293      	cmp	r3, r2
 800abc6:	d00a      	beq.n	800abde <lv_draw_rect+0xfae>
            if(mcolor.full == gcolor.full)
 800abc8:	9b03      	ldr	r3, [sp, #12]
 800abca:	454b      	cmp	r3, r9
 800abcc:	f040 811f 	bne.w	800ae0e <lv_draw_rect+0x11de>
                act_color = mcolor;
 800abd0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
            lv_draw_fill(&edge_bot_area, mask, act_color, opa);
 800abd4:	9b04      	ldr	r3, [sp, #16]
 800abd6:	4659      	mov	r1, fp
 800abd8:	a826      	add	r0, sp, #152	; 0x98
 800abda:	f7fe fed7 	bl	800998c <lv_draw_fill>
        lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 800abde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abe0:	f8bd 207a 	ldrh.w	r2, [sp, #122]	; 0x7a
 800abe4:	f8bd 1078 	ldrh.w	r1, [sp, #120]	; 0x78
 800abe8:	9806      	ldr	r0, [sp, #24]
 800abea:	441a      	add	r2, r3
                    rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
 800abec:	9b07      	ldr	r3, [sp, #28]
        lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 800abee:	b212      	sxth	r2, r2
                    rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
 800abf0:	440b      	add	r3, r1
        lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 800abf2:	1a41      	subs	r1, r0, r1
 800abf4:	9200      	str	r2, [sp, #0]
 800abf6:	a824      	add	r0, sp, #144	; 0x90
 800abf8:	b21b      	sxth	r3, r3
 800abfa:	b209      	sxth	r1, r1
 800abfc:	f001 fdae 	bl	800c75c <lv_area_set>
        lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 800ac00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac02:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
 800ac06:	f8bd 107a 	ldrh.w	r1, [sp, #122]	; 0x7a
 800ac0a:	9806      	ldr	r0, [sp, #24]
 800ac0c:	441a      	add	r2, r3
                    rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
 800ac0e:	9b07      	ldr	r3, [sp, #28]
        lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 800ac10:	b212      	sxth	r2, r2
                    rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
 800ac12:	440b      	add	r3, r1
        lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 800ac14:	1a41      	subs	r1, r0, r1
 800ac16:	9200      	str	r2, [sp, #0]
 800ac18:	a826      	add	r0, sp, #152	; 0x98
 800ac1a:	b21b      	sxth	r3, r3
 800ac1c:	b209      	sxth	r1, r1
 800ac1e:	f001 fd9d 	bl	800c75c <lv_area_set>
        lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800ac22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac24:	f8bd 207a 	ldrh.w	r2, [sp, #122]	; 0x7a
 800ac28:	f8bd 1078 	ldrh.w	r1, [sp, #120]	; 0x78
 800ac2c:	9806      	ldr	r0, [sp, #24]
 800ac2e:	1a9a      	subs	r2, r3, r2
                    rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
 800ac30:	9b07      	ldr	r3, [sp, #28]
        lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800ac32:	b212      	sxth	r2, r2
                    rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
 800ac34:	440b      	add	r3, r1
        lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800ac36:	1a41      	subs	r1, r0, r1
 800ac38:	9200      	str	r2, [sp, #0]
 800ac3a:	a822      	add	r0, sp, #136	; 0x88
 800ac3c:	b21b      	sxth	r3, r3
 800ac3e:	b209      	sxth	r1, r1
 800ac40:	f001 fd8c 	bl	800c75c <lv_area_set>
        lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800ac44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac46:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
 800ac4a:	f8bd 107a 	ldrh.w	r1, [sp, #122]	; 0x7a
 800ac4e:	9806      	ldr	r0, [sp, #24]
 800ac50:	1a9a      	subs	r2, r3, r2
                    rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
 800ac52:	9b07      	ldr	r3, [sp, #28]
        lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800ac54:	b212      	sxth	r2, r2
                    rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
 800ac56:	440b      	add	r3, r1
        lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800ac58:	1a41      	subs	r1, r0, r1
 800ac5a:	9200      	str	r2, [sp, #0]
 800ac5c:	a820      	add	r0, sp, #128	; 0x80
 800ac5e:	b21b      	sxth	r3, r3
 800ac60:	b209      	sxth	r1, r1
 800ac62:	f001 fd7b 	bl	800c75c <lv_area_set>
        lv_circ_next(&cir, &cir_tmp);
 800ac66:	a91d      	add	r1, sp, #116	; 0x74
 800ac68:	9819      	ldr	r0, [sp, #100]	; 0x64
 800ac6a:	f001 fe22 	bl	800c8b2 <lv_circ_next>
 800ac6e:	f7ff bbda 	b.w	800a426 <lv_draw_rect+0x7f6>
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 800ac72:	9b11      	ldr	r3, [sp, #68]	; 0x44
                        aa_opa = antialias_get_opa_circ(seg_size, i, opa);
 800ac74:	9a04      	ldr	r2, [sp, #16]
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 800ac76:	2b01      	cmp	r3, #1
 800ac78:	f000 808d 	beq.w	800ad96 <lv_draw_rect+0x1166>
                        aa_opa = antialias_get_opa_circ(seg_size, i, opa);
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	f7fe ffb5 	bl	8009bec <antialias_get_opa_circ>
 800ac82:	4605      	mov	r5, r0
 800ac84:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800ac88:	9312      	str	r3, [sp, #72]	; 0x48
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800ac8a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ac8c:	9b07      	ldr	r3, [sp, #28]
 800ac8e:	f9bd 6068 	ldrsh.w	r6, [sp, #104]	; 0x68
 800ac92:	9500      	str	r5, [sp, #0]
 800ac94:	189c      	adds	r4, r3, r2
 800ac96:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ac98:	441c      	add	r4, r3
 800ac9a:	b224      	sxth	r4, r4
 800ac9c:	4631      	mov	r1, r6
 800ac9e:	4620      	mov	r0, r4
 800aca0:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 800aca4:	465a      	mov	r2, fp
 800aca6:	f7fe fe21 	bl	80098ec <lv_draw_px>
                    lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 800acaa:	9b06      	ldr	r3, [sp, #24]
 800acac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800acae:	9500      	str	r5, [sp, #0]
 800acb0:	1a9f      	subs	r7, r3, r2
 800acb2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800acb4:	1aff      	subs	r7, r7, r3
 800acb6:	b23f      	sxth	r7, r7
 800acb8:	4631      	mov	r1, r6
 800acba:	4638      	mov	r0, r7
 800acbc:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 800acc0:	465a      	mov	r2, fp
 800acc2:	f7fe fe13 	bl	80098ec <lv_draw_px>
                    lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 800acc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acc8:	9500      	str	r5, [sp, #0]
 800acca:	1e5e      	subs	r6, r3, #1
 800accc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800acce:	1af6      	subs	r6, r6, r3
 800acd0:	b236      	sxth	r6, r6
 800acd2:	4631      	mov	r1, r6
 800acd4:	4638      	mov	r0, r7
 800acd6:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800acda:	465a      	mov	r2, fp
 800acdc:	f7fe fe06 	bl	80098ec <lv_draw_px>
                    lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 800ace0:	4631      	mov	r1, r6
 800ace2:	4620      	mov	r0, r4
 800ace4:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800ace8:	9500      	str	r5, [sp, #0]
 800acea:	465a      	mov	r2, fp
 800acec:	f7fe fdfe 	bl	80098ec <lv_draw_px>
                    mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 800acf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acf2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
                    aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 800acf4:	f8bd 000c 	ldrh.w	r0, [sp, #12]
                    mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 800acf8:	1a9e      	subs	r6, r3, r2
 800acfa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800acfc:	441e      	add	r6, r3
 800acfe:	ebc6 2606 	rsb	r6, r6, r6, lsl #8
 800ad02:	9b05      	ldr	r3, [sp, #20]
 800ad04:	fbb6 f6f3 	udiv	r6, r6, r3
 800ad08:	b2f6      	uxtb	r6, r6
                    aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 800ad0a:	4632      	mov	r2, r6
 800ad0c:	4649      	mov	r1, r9
 800ad0e:	f7fe ff25 	bl	8009b5c <lv_color_mix>
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800ad12:	9b07      	ldr	r3, [sp, #28]
 800ad14:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ad16:	9500      	str	r5, [sp, #0]
 800ad18:	1c5f      	adds	r7, r3, #1
 800ad1a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ad1c:	441f      	add	r7, r3
 800ad1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad20:	4413      	add	r3, r2
 800ad22:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ad24:	4413      	add	r3, r2
 800ad26:	b21b      	sxth	r3, r3
 800ad28:	9318      	str	r3, [sp, #96]	; 0x60
 800ad2a:	b23f      	sxth	r7, r7
                    aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 800ad2c:	4604      	mov	r4, r0
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800ad2e:	4603      	mov	r3, r0
 800ad30:	465a      	mov	r2, fp
 800ad32:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ad34:	4638      	mov	r0, r7
 800ad36:	f7fe fdd9 	bl	80098ec <lv_draw_px>
                    lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 800ad3a:	9b06      	ldr	r3, [sp, #24]
 800ad3c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ad3e:	9500      	str	r5, [sp, #0]
 800ad40:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800ad44:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ad46:	eba8 0803 	sub.w	r8, r8, r3
 800ad4a:	fa0f f888 	sxth.w	r8, r8
 800ad4e:	4623      	mov	r3, r4
 800ad50:	465a      	mov	r2, fp
 800ad52:	4640      	mov	r0, r8
 800ad54:	f7fe fdca 	bl	80098ec <lv_draw_px>
                    aa_color_ver = lv_color_mix(gcolor, mcolor, mix);
 800ad58:	4632      	mov	r2, r6
 800ad5a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800ad5e:	4648      	mov	r0, r9
 800ad60:	f7fe fefc 	bl	8009b5c <lv_color_mix>
                    lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 800ad64:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ad66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad68:	9500      	str	r5, [sp, #0]
 800ad6a:	1a9b      	subs	r3, r3, r2
 800ad6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ad6e:	1a9b      	subs	r3, r3, r2
 800ad70:	b21e      	sxth	r6, r3
                    aa_color_ver = lv_color_mix(gcolor, mcolor, mix);
 800ad72:	4604      	mov	r4, r0
                    lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 800ad74:	4603      	mov	r3, r0
 800ad76:	465a      	mov	r2, fp
 800ad78:	4631      	mov	r1, r6
 800ad7a:	4640      	mov	r0, r8
 800ad7c:	f7fe fdb6 	bl	80098ec <lv_draw_px>
                    lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 800ad80:	4623      	mov	r3, r4
 800ad82:	9500      	str	r5, [sp, #0]
 800ad84:	465a      	mov	r2, fp
 800ad86:	4631      	mov	r1, r6
 800ad88:	4638      	mov	r0, r7
 800ad8a:	f7fe fdaf 	bl	80098ec <lv_draw_px>
 800ad8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ad90:	3301      	adds	r3, #1
 800ad92:	9310      	str	r3, [sp, #64]	; 0x40
 800ad94:	e6d7      	b.n	800ab46 <lv_draw_rect+0xf16>
                        aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800ad96:	9811      	ldr	r0, [sp, #68]	; 0x44
 800ad98:	f7fe fcce 	bl	8009738 <lv_draw_aa_get_opa>
 800ad9c:	9b04      	ldr	r3, [sp, #16]
 800ad9e:	1a18      	subs	r0, r3, r0
 800ada0:	b2c5      	uxtb	r5, r0
 800ada2:	e76f      	b.n	800ac84 <lv_draw_rect+0x1054>
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
 800ada4:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
 800ada8:	9b05      	ldr	r3, [sp, #20]
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800adaa:	f8bd 000c 	ldrh.w	r0, [sp, #12]
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
 800adae:	1a52      	subs	r2, r2, r1
 800adb0:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800adb4:	4649      	mov	r1, r9
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
 800adb6:	fbb2 f2f3 	udiv	r2, r2, r3
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800adba:	b2d2      	uxtb	r2, r2
 800adbc:	f7fe fece 	bl	8009b5c <lv_color_mix>
 800adc0:	4602      	mov	r2, r0
 800adc2:	f000 be36 	b.w	800ba32 <lv_draw_rect+0x1e02>
                mix       = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
 800adc6:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
 800adca:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800adce:	f8bd 000c 	ldrh.w	r0, [sp, #12]
                mix       = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
 800add2:	1ad2      	subs	r2, r2, r3
 800add4:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 800add8:	9b05      	ldr	r3, [sp, #20]
 800adda:	fbb2 f2f3 	udiv	r2, r2, r3
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800adde:	4649      	mov	r1, r9
 800ade0:	b2d2      	uxtb	r2, r2
 800ade2:	f7fe febb 	bl	8009b5c <lv_color_mix>
 800ade6:	4602      	mov	r2, r0
 800ade8:	e6d8      	b.n	800ab9c <lv_draw_rect+0xf6c>
                mix       = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 800adea:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 800adee:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800adf2:	f8bd 000c 	ldrh.w	r0, [sp, #12]
                mix       = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 800adf6:	1ad2      	subs	r2, r2, r3
 800adf8:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 800adfc:	9b05      	ldr	r3, [sp, #20]
 800adfe:	fbb2 f2f3 	udiv	r2, r2, r3
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800ae02:	4649      	mov	r1, r9
 800ae04:	b2d2      	uxtb	r2, r2
 800ae06:	f7fe fea9 	bl	8009b5c <lv_color_mix>
 800ae0a:	4602      	mov	r2, r0
 800ae0c:	e6d3      	b.n	800abb6 <lv_draw_rect+0xf86>
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
 800ae0e:	f9bd 309a 	ldrsh.w	r3, [sp, #154]	; 0x9a
 800ae12:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800ae16:	f8bd 000c 	ldrh.w	r0, [sp, #12]
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
 800ae1a:	1ad2      	subs	r2, r2, r3
 800ae1c:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 800ae20:	9b05      	ldr	r3, [sp, #20]
 800ae22:	fbb2 f2f3 	udiv	r2, r2, r3
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800ae26:	4649      	mov	r1, r9
 800ae28:	b2d2      	uxtb	r2, r2
 800ae2a:	f7fe fe97 	bl	8009b5c <lv_color_mix>
 800ae2e:	4602      	mov	r2, r0
 800ae30:	e6d0      	b.n	800abd4 <lv_draw_rect+0xfa4>
        mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
 800ae32:	f9bd 3082 	ldrsh.w	r3, [sp, #130]	; 0x82
 800ae36:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
        act_color = lv_color_mix(mcolor, gcolor, mix);
 800ae3a:	f8bd 000c 	ldrh.w	r0, [sp, #12]
        mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
 800ae3e:	1ad2      	subs	r2, r2, r3
 800ae40:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 800ae44:	9b05      	ldr	r3, [sp, #20]
 800ae46:	fbb2 f2f3 	udiv	r2, r2, r3
        act_color = lv_color_mix(mcolor, gcolor, mix);
 800ae4a:	4649      	mov	r1, r9
 800ae4c:	b2d2      	uxtb	r2, r2
 800ae4e:	f7fe fe85 	bl	8009b5c <lv_color_mix>
 800ae52:	4602      	mov	r2, r0
 800ae54:	f7ff baf3 	b.w	800a43e <lv_draw_rect+0x80e>
            mix       = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
 800ae58:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
            act_color = lv_color_mix(mcolor, gcolor, mix);
 800ae5c:	f8bd 000c 	ldrh.w	r0, [sp, #12]
            mix       = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
 800ae60:	1ad2      	subs	r2, r2, r3
 800ae62:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 800ae66:	9b05      	ldr	r3, [sp, #20]
 800ae68:	fbb2 f2f3 	udiv	r2, r2, r3
            act_color = lv_color_mix(mcolor, gcolor, mix);
 800ae6c:	4649      	mov	r1, r9
 800ae6e:	b2d2      	uxtb	r2, r2
 800ae70:	f7fe fe74 	bl	8009b5c <lv_color_mix>
 800ae74:	4602      	mov	r2, r0
 800ae76:	f7ff baf3 	b.w	800a460 <lv_draw_rect+0x830>
        mix       = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 800ae7a:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 800ae7e:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
        act_color = lv_color_mix(mcolor, gcolor, mix);
 800ae82:	f8bd 000c 	ldrh.w	r0, [sp, #12]
        mix       = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 800ae86:	1ad2      	subs	r2, r2, r3
 800ae88:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 800ae8c:	9b05      	ldr	r3, [sp, #20]
 800ae8e:	fbb2 f2f3 	udiv	r2, r2, r3
        act_color = lv_color_mix(mcolor, gcolor, mix);
 800ae92:	4649      	mov	r1, r9
 800ae94:	b2d2      	uxtb	r2, r2
 800ae96:	f7fe fe61 	bl	8009b5c <lv_color_mix>
 800ae9a:	4602      	mov	r2, r0
 800ae9c:	f7ff baeb 	b.w	800a476 <lv_draw_rect+0x846>
            mix       = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
 800aea0:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
            act_color = lv_color_mix(mcolor, gcolor, mix);
 800aea4:	f8bd 000c 	ldrh.w	r0, [sp, #12]
            mix       = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
 800aea8:	1ad2      	subs	r2, r2, r3
 800aeaa:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 800aeae:	9b05      	ldr	r3, [sp, #20]
 800aeb0:	fbb2 f2f3 	udiv	r2, r2, r3
            act_color = lv_color_mix(mcolor, gcolor, mix);
 800aeb4:	4649      	mov	r1, r9
 800aeb6:	b2d2      	uxtb	r2, r2
 800aeb8:	f7fe fe50 	bl	8009b5c <lv_color_mix>
 800aebc:	4602      	mov	r2, r0
 800aebe:	f7ff baeb 	b.w	800a498 <lv_draw_rect+0x868>
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800aec2:	9a04      	ldr	r2, [sp, #16]
 800aec4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800aec6:	f7fe fc37 	bl	8009738 <lv_draw_aa_get_opa>
 800aeca:	9b04      	ldr	r3, [sp, #16]
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800aecc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800aece:	f9bd 5058 	ldrsh.w	r5, [sp, #88]	; 0x58
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800aed2:	1a18      	subs	r0, r3, r0
 800aed4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800aed8:	9311      	str	r3, [sp, #68]	; 0x44
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800aeda:	9b07      	ldr	r3, [sp, #28]
 800aedc:	189c      	adds	r4, r3, r2
 800aede:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aee0:	441c      	add	r4, r3
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800aee2:	b2c6      	uxtb	r6, r0
 800aee4:	b224      	sxth	r4, r4
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800aee6:	4629      	mov	r1, r5
 800aee8:	4620      	mov	r0, r4
 800aeea:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800aeee:	9600      	str	r6, [sp, #0]
 800aef0:	465a      	mov	r2, fp
 800aef2:	f7fe fcfb 	bl	80098ec <lv_draw_px>
            lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 800aef6:	9b06      	ldr	r3, [sp, #24]
 800aef8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800aefa:	9600      	str	r6, [sp, #0]
 800aefc:	1a9f      	subs	r7, r3, r2
 800aefe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800af00:	1aff      	subs	r7, r7, r3
 800af02:	b23f      	sxth	r7, r7
 800af04:	4629      	mov	r1, r5
 800af06:	4638      	mov	r0, r7
 800af08:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800af0c:	465a      	mov	r2, fp
 800af0e:	f7fe fced 	bl	80098ec <lv_draw_px>
            lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 800af12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af14:	9600      	str	r6, [sp, #0]
 800af16:	1e5d      	subs	r5, r3, #1
 800af18:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800af1a:	1aed      	subs	r5, r5, r3
 800af1c:	b22d      	sxth	r5, r5
 800af1e:	4629      	mov	r1, r5
 800af20:	4638      	mov	r0, r7
 800af22:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 800af26:	465a      	mov	r2, fp
 800af28:	f7fe fce0 	bl	80098ec <lv_draw_px>
            lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 800af2c:	4629      	mov	r1, r5
 800af2e:	4620      	mov	r0, r4
 800af30:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 800af34:	9600      	str	r6, [sp, #0]
 800af36:	465a      	mov	r2, fp
 800af38:	f7fe fcd8 	bl	80098ec <lv_draw_px>
            mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 800af3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
            aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 800af40:	f8bd 000c 	ldrh.w	r0, [sp, #12]
            mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 800af44:	1a9d      	subs	r5, r3, r2
 800af46:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800af48:	441d      	add	r5, r3
 800af4a:	ebc5 2505 	rsb	r5, r5, r5, lsl #8
 800af4e:	9b05      	ldr	r3, [sp, #20]
 800af50:	fbb5 f5f3 	udiv	r5, r5, r3
 800af54:	b2ed      	uxtb	r5, r5
            aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 800af56:	462a      	mov	r2, r5
 800af58:	4649      	mov	r1, r9
 800af5a:	f7fe fdff 	bl	8009b5c <lv_color_mix>
            lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, aa_color_ver,
 800af5e:	9b07      	ldr	r3, [sp, #28]
 800af60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800af62:	9600      	str	r6, [sp, #0]
 800af64:	1c5f      	adds	r7, r3, #1
 800af66:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800af68:	441f      	add	r7, r3
 800af6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af6c:	4413      	add	r3, r2
 800af6e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800af70:	4413      	add	r3, r2
 800af72:	b21b      	sxth	r3, r3
 800af74:	9315      	str	r3, [sp, #84]	; 0x54
 800af76:	b23f      	sxth	r7, r7
            aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 800af78:	4604      	mov	r4, r0
            lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, aa_color_ver,
 800af7a:	4603      	mov	r3, r0
 800af7c:	465a      	mov	r2, fp
 800af7e:	9915      	ldr	r1, [sp, #84]	; 0x54
 800af80:	4638      	mov	r0, r7
 800af82:	f7fe fcb3 	bl	80098ec <lv_draw_px>
            lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask, aa_color_ver,
 800af86:	9b06      	ldr	r3, [sp, #24]
 800af88:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800af8a:	9915      	ldr	r1, [sp, #84]	; 0x54
 800af8c:	9600      	str	r6, [sp, #0]
 800af8e:	3b01      	subs	r3, #1
 800af90:	1a9b      	subs	r3, r3, r2
 800af92:	b21b      	sxth	r3, r3
 800af94:	9314      	str	r3, [sp, #80]	; 0x50
 800af96:	465a      	mov	r2, fp
 800af98:	4623      	mov	r3, r4
 800af9a:	9814      	ldr	r0, [sp, #80]	; 0x50
 800af9c:	f7fe fca6 	bl	80098ec <lv_draw_px>
            aa_color_ver = lv_color_mix(gcolor, mcolor, mix);
 800afa0:	462a      	mov	r2, r5
 800afa2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800afa6:	4648      	mov	r0, r9
 800afa8:	f7fe fdd8 	bl	8009b5c <lv_color_mix>
            lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask, aa_color_ver,
 800afac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800afae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afb0:	9600      	str	r6, [sp, #0]
 800afb2:	1a9b      	subs	r3, r3, r2
 800afb4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800afb6:	1a9b      	subs	r3, r3, r2
 800afb8:	b21d      	sxth	r5, r3
            aa_color_ver = lv_color_mix(gcolor, mcolor, mix);
 800afba:	4604      	mov	r4, r0
            lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask, aa_color_ver,
 800afbc:	4603      	mov	r3, r0
 800afbe:	465a      	mov	r2, fp
 800afc0:	4629      	mov	r1, r5
 800afc2:	9814      	ldr	r0, [sp, #80]	; 0x50
 800afc4:	f7fe fc92 	bl	80098ec <lv_draw_px>
            lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask, aa_color_ver,
 800afc8:	4623      	mov	r3, r4
 800afca:	9600      	str	r6, [sp, #0]
 800afcc:	465a      	mov	r2, fp
 800afce:	4629      	mov	r1, r5
 800afd0:	4638      	mov	r0, r7
 800afd2:	f7fe fc8b 	bl	80098ec <lv_draw_px>
 800afd6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800afd8:	3301      	adds	r3, #1
 800afda:	9310      	str	r3, [sp, #64]	; 0x40
 800afdc:	f7ff bab8 	b.w	800a550 <lv_draw_rect+0x920>
    corner_size++;
 800afe0:	3301      	adds	r3, #1
 800afe2:	b29b      	uxth	r3, r3
 800afe4:	9303      	str	r3, [sp, #12]
    if(part & LV_BORDER_TOP)
 800afe6:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 800afea:	9305      	str	r3, [sp, #20]
 800afec:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 800aff0:	2a00      	cmp	r2, #0
 800aff2:	f000 8143 	beq.w	800b27c <lv_draw_rect+0x164c>
        work_area.y1 = coords->y1 + corner_size;
 800aff6:	9a03      	ldr	r2, [sp, #12]
 800aff8:	4413      	add	r3, r2
        work_area.y1 = coords->y1 + radius;
 800affa:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
    if(part & LV_BORDER_BOTTOM)
 800affe:	f015 0301 	ands.w	r3, r5, #1
        work_area.y2 = coords->y2 - corner_size;
 800b002:	bf18      	it	ne
 800b004:	9a03      	ldrne	r2, [sp, #12]
    if(part & LV_BORDER_BOTTOM)
 800b006:	9306      	str	r3, [sp, #24]
 800b008:	f8ba 3006 	ldrh.w	r3, [sl, #6]
        work_area.y2 = coords->y2 - corner_size;
 800b00c:	bf14      	ite	ne
 800b00e:	1a9b      	subne	r3, r3, r2
        work_area.y2 = coords->y2 - radius;
 800b010:	eba3 0309 	subeq.w	r3, r3, r9
    if(part & LV_BORDER_LEFT) {
 800b014:	076a      	lsls	r2, r5, #29
        work_area.y2 = coords->y2 - radius;
 800b016:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
    if(part & LV_BORDER_LEFT) {
 800b01a:	d50c      	bpl.n	800b036 <lv_draw_rect+0x1406>
        work_area.x1 = coords->x1;
 800b01c:	f9ba 3000 	ldrsh.w	r3, [sl]
 800b020:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
        work_area.x2 = work_area.x1 + bwidth;
 800b024:	4433      	add	r3, r6
 800b026:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
        lv_draw_fill(&work_area, mask, color, opa);
 800b02a:	463a      	mov	r2, r7
 800b02c:	4623      	mov	r3, r4
 800b02e:	4659      	mov	r1, fp
 800b030:	a826      	add	r0, sp, #152	; 0x98
 800b032:	f7fe fcab 	bl	800998c <lv_draw_fill>
    if(part & LV_BORDER_RIGHT) {
 800b036:	072b      	lsls	r3, r5, #28
 800b038:	d50c      	bpl.n	800b054 <lv_draw_rect+0x1424>
        work_area.x2 = coords->x2;
 800b03a:	f9ba 3004 	ldrsh.w	r3, [sl, #4]
 800b03e:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
        work_area.x1 = work_area.x2 - bwidth;
 800b042:	a828      	add	r0, sp, #160	; 0xa0
 800b044:	1b9b      	subs	r3, r3, r6
 800b046:	f820 3d08 	strh.w	r3, [r0, #-8]!
        lv_draw_fill(&work_area, mask, color, opa);
 800b04a:	463a      	mov	r2, r7
 800b04c:	4623      	mov	r3, r4
 800b04e:	4659      	mov	r1, fp
 800b050:	f7fe fc9c 	bl	800998c <lv_draw_fill>
    work_area.x1 = coords->x1 + corner_size - length_corr;
 800b054:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800b058:	9a03      	ldr	r2, [sp, #12]
 800b05a:	f8ba 1000 	ldrh.w	r1, [sl]
 800b05e:	1ad2      	subs	r2, r2, r3
 800b060:	440a      	add	r2, r1
 800b062:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
    work_area.x2 = coords->x2 - corner_size + length_corr;
 800b066:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 800b06a:	4413      	add	r3, r2
 800b06c:	9a03      	ldr	r2, [sp, #12]
 800b06e:	1a9b      	subs	r3, r3, r2
 800b070:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
    if(part & LV_BORDER_TOP) {
 800b074:	9b05      	ldr	r3, [sp, #20]
 800b076:	b163      	cbz	r3, 800b092 <lv_draw_rect+0x1462>
        work_area.y1 = coords->y1;
 800b078:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
 800b07c:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
        work_area.y2 = coords->y1 + bwidth;
 800b080:	4433      	add	r3, r6
 800b082:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
        lv_draw_fill(&work_area, mask, color, opa);
 800b086:	463a      	mov	r2, r7
 800b088:	4623      	mov	r3, r4
 800b08a:	4659      	mov	r1, fp
 800b08c:	a826      	add	r0, sp, #152	; 0x98
 800b08e:	f7fe fc7d 	bl	800998c <lv_draw_fill>
    if(part & LV_BORDER_BOTTOM) {
 800b092:	9b06      	ldr	r3, [sp, #24]
 800b094:	b163      	cbz	r3, 800b0b0 <lv_draw_rect+0x1480>
        work_area.y2 = coords->y2;
 800b096:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 800b09a:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
        work_area.y1 = work_area.y2 - bwidth;
 800b09e:	1b9b      	subs	r3, r3, r6
 800b0a0:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
        lv_draw_fill(&work_area, mask, color, opa);
 800b0a4:	463a      	mov	r2, r7
 800b0a6:	4623      	mov	r3, r4
 800b0a8:	4659      	mov	r1, fp
 800b0aa:	a826      	add	r0, sp, #152	; 0x98
 800b0ac:	f7fe fc6e 	bl	800998c <lv_draw_fill>
    if(length_corr != 0) {
 800b0b0:	9b04      	ldr	r3, [sp, #16]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d07b      	beq.n	800b1ae <lv_draw_rect+0x157e>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800b0b6:	f005 0306 	and.w	r3, r5, #6
 800b0ba:	2b06      	cmp	r3, #6
 800b0bc:	d119      	bne.n	800b0f2 <lv_draw_rect+0x14c2>
            work_area.x1 = coords->x1;
 800b0be:	f9ba 2000 	ldrsh.w	r2, [sl]
 800b0c2:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
            work_area.x2 = coords->x1 + radius + aa;
 800b0c6:	fa1f f388 	uxth.w	r3, r8
 800b0ca:	441a      	add	r2, r3
 800b0cc:	444a      	add	r2, r9
 800b0ce:	f8ad 209c 	strh.w	r2, [sp, #156]	; 0x9c
            work_area.y1 = coords->y1 + radius + 1 + aa;
 800b0d2:	f8ba 2002 	ldrh.w	r2, [sl, #2]
 800b0d6:	1c51      	adds	r1, r2, #1
 800b0d8:	440b      	add	r3, r1
 800b0da:	444b      	add	r3, r9
            work_area.y2 = coords->y1 + bwidth;
 800b0dc:	4432      	add	r2, r6
            work_area.y1 = coords->y1 + radius + 1 + aa;
 800b0de:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            work_area.y2 = coords->y1 + bwidth;
 800b0e2:	f8ad 209e 	strh.w	r2, [sp, #158]	; 0x9e
            lv_draw_fill(&work_area, mask, color, opa);
 800b0e6:	4623      	mov	r3, r4
 800b0e8:	463a      	mov	r2, r7
 800b0ea:	4659      	mov	r1, fp
 800b0ec:	a826      	add	r0, sp, #152	; 0x98
 800b0ee:	f7fe fc4d 	bl	800998c <lv_draw_fill>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800b0f2:	f005 030a 	and.w	r3, r5, #10
 800b0f6:	2b0a      	cmp	r3, #10
 800b0f8:	d11a      	bne.n	800b130 <lv_draw_rect+0x1500>
            work_area.x1 = coords->x2 - radius - aa;
 800b0fa:	f9ba 1004 	ldrsh.w	r1, [sl, #4]
            work_area.x2 = coords->x2;
 800b0fe:	f8ad 109c 	strh.w	r1, [sp, #156]	; 0x9c
            work_area.x1 = coords->x2 - radius - aa;
 800b102:	fa1f f388 	uxth.w	r3, r8
 800b106:	eba1 0209 	sub.w	r2, r1, r9
 800b10a:	1ad2      	subs	r2, r2, r3
 800b10c:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
            work_area.y1 = coords->y1 + radius + 1 + aa;
 800b110:	f8ba 2002 	ldrh.w	r2, [sl, #2]
 800b114:	1c51      	adds	r1, r2, #1
 800b116:	440b      	add	r3, r1
 800b118:	444b      	add	r3, r9
            work_area.y2 = coords->y1 + bwidth;
 800b11a:	4432      	add	r2, r6
            work_area.y1 = coords->y1 + radius + 1 + aa;
 800b11c:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            work_area.y2 = coords->y1 + bwidth;
 800b120:	f8ad 209e 	strh.w	r2, [sp, #158]	; 0x9e
            lv_draw_fill(&work_area, mask, color, opa);
 800b124:	4623      	mov	r3, r4
 800b126:	463a      	mov	r2, r7
 800b128:	4659      	mov	r1, fp
 800b12a:	a826      	add	r0, sp, #152	; 0x98
 800b12c:	f7fe fc2e 	bl	800998c <lv_draw_fill>
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800b130:	f005 0305 	and.w	r3, r5, #5
 800b134:	2b05      	cmp	r3, #5
 800b136:	d11a      	bne.n	800b16e <lv_draw_rect+0x153e>
            work_area.x1 = coords->x1;
 800b138:	f9ba 2000 	ldrsh.w	r2, [sl]
            work_area.y1 = coords->y2 - bwidth;
 800b13c:	f8ba 3006 	ldrh.w	r3, [sl, #6]
            work_area.x1 = coords->x1;
 800b140:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
            work_area.x2 = coords->x1 + radius + aa;
 800b144:	fa1f f188 	uxth.w	r1, r8
 800b148:	440a      	add	r2, r1
 800b14a:	444a      	add	r2, r9
            work_area.y2 = coords->y2 - radius - 1 - aa;
 800b14c:	43c9      	mvns	r1, r1
            work_area.x2 = coords->x1 + radius + aa;
 800b14e:	f8ad 209c 	strh.w	r2, [sp, #156]	; 0x9c
            work_area.y1 = coords->y2 - bwidth;
 800b152:	1b9a      	subs	r2, r3, r6
            work_area.y2 = coords->y2 - radius - 1 - aa;
 800b154:	440b      	add	r3, r1
 800b156:	eba3 0309 	sub.w	r3, r3, r9
            work_area.y1 = coords->y2 - bwidth;
 800b15a:	f8ad 209a 	strh.w	r2, [sp, #154]	; 0x9a
            work_area.y2 = coords->y2 - radius - 1 - aa;
 800b15e:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&work_area, mask, color, opa);
 800b162:	463a      	mov	r2, r7
 800b164:	4623      	mov	r3, r4
 800b166:	4659      	mov	r1, fp
 800b168:	a826      	add	r0, sp, #152	; 0x98
 800b16a:	f7fe fc0f 	bl	800998c <lv_draw_fill>
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800b16e:	f005 0309 	and.w	r3, r5, #9
 800b172:	2b09      	cmp	r3, #9
 800b174:	d11b      	bne.n	800b1ae <lv_draw_rect+0x157e>
            work_area.x1 = coords->x2 - radius - aa;
 800b176:	f9ba 1004 	ldrsh.w	r1, [sl, #4]
            work_area.x2 = coords->x2;
 800b17a:	f8ad 109c 	strh.w	r1, [sp, #156]	; 0x9c
            work_area.x1 = coords->x2 - radius - aa;
 800b17e:	eba1 0309 	sub.w	r3, r1, r9
 800b182:	fa1f f288 	uxth.w	r2, r8
 800b186:	1a9b      	subs	r3, r3, r2
 800b188:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            work_area.y1 = coords->y2 - bwidth;
 800b18c:	f8ba 3006 	ldrh.w	r3, [sl, #6]
            work_area.y2 = coords->y2 - radius - 1 - aa;
 800b190:	43d2      	mvns	r2, r2
            work_area.y1 = coords->y2 - bwidth;
 800b192:	1b9e      	subs	r6, r3, r6
            work_area.y2 = coords->y2 - radius - 1 - aa;
 800b194:	4413      	add	r3, r2
 800b196:	eba3 0909 	sub.w	r9, r3, r9
            lv_draw_fill(&work_area, mask, color, opa);
 800b19a:	463a      	mov	r2, r7
 800b19c:	4623      	mov	r3, r4
 800b19e:	4659      	mov	r1, fp
 800b1a0:	a826      	add	r0, sp, #152	; 0x98
            work_area.y1 = coords->y2 - bwidth;
 800b1a2:	f8ad 609a 	strh.w	r6, [sp, #154]	; 0x9a
            work_area.y2 = coords->y2 - radius - 1 - aa;
 800b1a6:	f8ad 909e 	strh.w	r9, [sp, #158]	; 0x9e
            lv_draw_fill(&work_area, mask, color, opa);
 800b1aa:	f7fe fbef 	bl	800998c <lv_draw_fill>
    if(style->body.radius == 0) {
 800b1ae:	9b02      	ldr	r3, [sp, #8]
 800b1b0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	f47f aaef 	bne.w	800a798 <lv_draw_rect+0xb68>
        if(part & (LV_BORDER_TOP | LV_BORDER_LEFT)) {
 800b1ba:	f015 0f06 	tst.w	r5, #6
 800b1be:	d015      	beq.n	800b1ec <lv_draw_rect+0x15bc>
            work_area.x1 = coords->x1;
 800b1c0:	f9ba 2000 	ldrsh.w	r2, [sl]
 800b1c4:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
            work_area.x2 = coords->x1 + aa;
 800b1c8:	fa1f f388 	uxth.w	r3, r8
 800b1cc:	441a      	add	r2, r3
 800b1ce:	f8ad 209c 	strh.w	r2, [sp, #156]	; 0x9c
            work_area.y1 = coords->y1;
 800b1d2:	f9ba 2002 	ldrsh.w	r2, [sl, #2]
 800b1d6:	f8ad 209a 	strh.w	r2, [sp, #154]	; 0x9a
            work_area.y2 = coords->y1 + aa;
 800b1da:	4413      	add	r3, r2
 800b1dc:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&work_area, mask, color, opa);
 800b1e0:	463a      	mov	r2, r7
 800b1e2:	4623      	mov	r3, r4
 800b1e4:	4659      	mov	r1, fp
 800b1e6:	a826      	add	r0, sp, #152	; 0x98
 800b1e8:	f7fe fbd0 	bl	800998c <lv_draw_fill>
        if(part & (LV_BORDER_TOP | LV_BORDER_RIGHT)) {
 800b1ec:	f015 0f0a 	tst.w	r5, #10
 800b1f0:	d015      	beq.n	800b21e <lv_draw_rect+0x15ee>
            work_area.x1 = coords->x2 - aa;
 800b1f2:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
            work_area.x2 = coords->x2;
 800b1f6:	f8ad 209c 	strh.w	r2, [sp, #156]	; 0x9c
            work_area.x1 = coords->x2 - aa;
 800b1fa:	fa1f f388 	uxth.w	r3, r8
 800b1fe:	1ad1      	subs	r1, r2, r3
            work_area.y1 = coords->y1;
 800b200:	f9ba 2002 	ldrsh.w	r2, [sl, #2]
            work_area.x1 = coords->x2 - aa;
 800b204:	f8ad 1098 	strh.w	r1, [sp, #152]	; 0x98
            work_area.y2 = coords->y1 + aa;
 800b208:	4413      	add	r3, r2
            work_area.y1 = coords->y1;
 800b20a:	f8ad 209a 	strh.w	r2, [sp, #154]	; 0x9a
            work_area.y2 = coords->y1 + aa;
 800b20e:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&work_area, mask, color, opa);
 800b212:	463a      	mov	r2, r7
 800b214:	4623      	mov	r3, r4
 800b216:	4659      	mov	r1, fp
 800b218:	a826      	add	r0, sp, #152	; 0x98
 800b21a:	f7fe fbb7 	bl	800998c <lv_draw_fill>
        if(part & (LV_BORDER_BOTTOM | LV_BORDER_LEFT)) {
 800b21e:	f015 0f05 	tst.w	r5, #5
 800b222:	d015      	beq.n	800b250 <lv_draw_rect+0x1620>
            work_area.x1 = coords->x1;
 800b224:	f9ba 2000 	ldrsh.w	r2, [sl]
 800b228:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
            work_area.x2 = coords->x1 + aa;
 800b22c:	fa1f f388 	uxth.w	r3, r8
 800b230:	441a      	add	r2, r3
 800b232:	f8ad 209c 	strh.w	r2, [sp, #156]	; 0x9c
            work_area.y1 = coords->y2 - aa;
 800b236:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
            work_area.y2 = coords->y2;
 800b23a:	f8ad 209e 	strh.w	r2, [sp, #158]	; 0x9e
            work_area.y1 = coords->y2 - aa;
 800b23e:	1ad3      	subs	r3, r2, r3
 800b240:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            lv_draw_fill(&work_area, mask, color, opa);
 800b244:	463a      	mov	r2, r7
 800b246:	4623      	mov	r3, r4
 800b248:	4659      	mov	r1, fp
 800b24a:	a826      	add	r0, sp, #152	; 0x98
 800b24c:	f7fe fb9e 	bl	800998c <lv_draw_fill>
        if(part & (LV_BORDER_BOTTOM | LV_BORDER_RIGHT)) {
 800b250:	f015 0f09 	tst.w	r5, #9
 800b254:	f43f aaa0 	beq.w	800a798 <lv_draw_rect+0xb68>
            work_area.x1 = coords->x2 - aa;
 800b258:	f9ba 3004 	ldrsh.w	r3, [sl, #4]
            work_area.x2 = coords->x2;
 800b25c:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            work_area.x1 = coords->x2 - aa;
 800b260:	fa1f f888 	uxth.w	r8, r8
 800b264:	eba3 0208 	sub.w	r2, r3, r8
            work_area.y1 = coords->y2 - aa;
 800b268:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
            work_area.x1 = coords->x2 - aa;
 800b26c:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
            work_area.y1 = coords->y2 - aa;
 800b270:	eba3 0808 	sub.w	r8, r3, r8
 800b274:	f8ad 809a 	strh.w	r8, [sp, #154]	; 0x9a
 800b278:	f7ff ba86 	b.w	800a788 <lv_draw_rect+0xb58>
        work_area.y1 = coords->y1 + radius;
 800b27c:	4403      	add	r3, r0
 800b27e:	e6bc      	b.n	800affa <lv_draw_rect+0x13ca>
    if(aa) bwidth--; /*Because of anti-aliasing the border seems one pixel ticker*/
 800b280:	3c02      	subs	r4, #2
 800b282:	f7ff baaf 	b.w	800a7e4 <lv_draw_rect+0xbb4>
        if(cir_in.y < cir_in.x) {
 800b286:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 800b28a:	f9bd 1092 	ldrsh.w	r1, [sp, #146]	; 0x92
 800b28e:	4299      	cmp	r1, r3
 800b290:	f280 8140 	bge.w	800b514 <lv_draw_rect+0x18e4>
            act_w1 = cir_out.x - cir_in.x;
 800b294:	1ad3      	subs	r3, r2, r3
 800b296:	b21b      	sxth	r3, r3
 800b298:	930b      	str	r3, [sp, #44]	; 0x2c
            act_w2 = act_w1 - 1;
 800b29a:	930d      	str	r3, [sp, #52]	; 0x34
        if(aa) {
 800b29c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b29e:	b393      	cbz	r3, 800b306 <lv_draw_rect+0x16d6>
            if(out_x_last != cir_out.x) {
 800b2a0:	454a      	cmp	r2, r9
 800b2a2:	d014      	beq.n	800b2ce <lv_draw_rect+0x169e>
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800b2a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800b2a6:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800b2aa:	fa1f f789 	uxth.w	r7, r9
 800b2ae:	3301      	adds	r3, #1
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800b2b0:	ebaa 0805 	sub.w	r8, sl, r5
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800b2b4:	18fb      	adds	r3, r7, r3
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800b2b6:	fa0f f888 	sxth.w	r8, r8
 800b2ba:	2600      	movs	r6, #0
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800b2bc:	930f      	str	r3, [sp, #60]	; 0x3c
 800b2be:	b231      	sxth	r1, r6
                for(i = 0; i < seg_size; i++) {
 800b2c0:	4588      	cmp	r8, r1
 800b2c2:	f300 812f 	bgt.w	800b524 <lv_draw_rect+0x18f4>
                out_x_last      = cir_out.x;
 800b2c6:	f9bd 9088 	ldrsh.w	r9, [sp, #136]	; 0x88
 800b2ca:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
            if(in_x_last != cir_in.x) {
 800b2ce:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 800b2d2:	9a08      	ldr	r2, [sp, #32]
 800b2d4:	4293      	cmp	r3, r2
 800b2d6:	d016      	beq.n	800b306 <lv_draw_rect+0x16d6>
                in_y_seg_end        = cir_out.y;
 800b2d8:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
                lv_coord_t seg_size = in_y_seg_end - in_y_seg_start;
 800b2dc:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
                in_y_seg_end        = cir_out.y;
 800b2e0:	9313      	str	r3, [sp, #76]	; 0x4c
                lv_coord_t seg_size = in_y_seg_end - in_y_seg_start;
 800b2e2:	eba3 0a06 	sub.w	sl, r3, r6
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800b2e6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b2e8:	4413      	add	r3, r2
 800b2ea:	b21b      	sxth	r3, r3
                lv_coord_t seg_size = in_y_seg_end - in_y_seg_start;
 800b2ec:	fa0f fa8a 	sxth.w	sl, sl
 800b2f0:	2400      	movs	r4, #0
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800b2f2:	9315      	str	r3, [sp, #84]	; 0x54
 800b2f4:	b221      	sxth	r1, r4
                for(i = 0; i < seg_size; i++) {
 800b2f6:	458a      	cmp	sl, r1
 800b2f8:	f300 81b4 	bgt.w	800b664 <lv_draw_rect+0x1a34>
                in_x_last      = cir_in.x;
 800b2fc:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 800b300:	9308      	str	r3, [sp, #32]
                in_y_seg_start = in_y_seg_end;
 800b302:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b304:	930c      	str	r3, [sp, #48]	; 0x30
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800b306:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b308:	2b09      	cmp	r3, #9
 800b30a:	d135      	bne.n	800b378 <lv_draw_rect+0x1748>
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT1_X(cir_out) - act_w2;
 800b30c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b30e:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 800b312:	4413      	add	r3, r2
 800b314:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b316:	b29b      	uxth	r3, r3
 800b318:	1a9a      	subs	r2, r3, r2
 800b31a:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
            circ_area.x2 = rb_origo.x + LV_CIRC_OCT1_X(cir_out);
 800b31e:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
 800b322:	9a04      	ldr	r2, [sp, #16]
 800b324:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
 800b328:	4413      	add	r3, r2
 800b32a:	b21b      	sxth	r3, r3
 800b32c:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            circ_area.y2 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
 800b330:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&circ_area, mask, color, opa);
 800b334:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 800b338:	9b07      	ldr	r3, [sp, #28]
 800b33a:	4659      	mov	r1, fp
 800b33c:	a826      	add	r0, sp, #152	; 0x98
 800b33e:	f7fe fb25 	bl	800998c <lv_draw_fill>
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
 800b342:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b344:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
 800b348:	4413      	add	r3, r2
 800b34a:	b21b      	sxth	r3, r3
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out) - act_w1;
 800b34c:	9a04      	ldr	r2, [sp, #16]
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
 800b34e:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            circ_area.x2 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
 800b352:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out) - act_w1;
 800b356:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 800b35a:	4413      	add	r3, r2
 800b35c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b35e:	b29b      	uxth	r3, r3
 800b360:	1a9a      	subs	r2, r3, r2
 800b362:	f8ad 209a 	strh.w	r2, [sp, #154]	; 0x9a
            circ_area.y2 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out);
 800b366:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&circ_area, mask, color, opa);
 800b36a:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 800b36e:	9b07      	ldr	r3, [sp, #28]
 800b370:	4659      	mov	r1, fp
 800b372:	a826      	add	r0, sp, #152	; 0x98
 800b374:	f7fe fb0a 	bl	800998c <lv_draw_fill>
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800b378:	9b05      	ldr	r3, [sp, #20]
 800b37a:	f003 0305 	and.w	r3, r3, #5
 800b37e:	2b05      	cmp	r3, #5
 800b380:	d135      	bne.n	800b3ee <lv_draw_rect+0x17be>
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
 800b382:	9a06      	ldr	r2, [sp, #24]
 800b384:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
 800b388:	1ad3      	subs	r3, r2, r3
 800b38a:	b21b      	sxth	r3, r3
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out) - act_w2;
 800b38c:	9a04      	ldr	r2, [sp, #16]
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
 800b38e:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            circ_area.x2 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
 800b392:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out) - act_w2;
 800b396:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 800b39a:	4413      	add	r3, r2
 800b39c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b39e:	b29b      	uxth	r3, r3
 800b3a0:	1a9a      	subs	r2, r3, r2
 800b3a2:	f8ad 209a 	strh.w	r2, [sp, #154]	; 0x9a
            circ_area.y2 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out);
 800b3a6:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&circ_area, mask, color, opa);
 800b3aa:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 800b3ae:	9b07      	ldr	r3, [sp, #28]
 800b3b0:	4659      	mov	r1, fp
 800b3b2:	a826      	add	r0, sp, #152	; 0x98
 800b3b4:	f7fe faea 	bl	800998c <lv_draw_fill>
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT4_X(cir_out);
 800b3b8:	9a06      	ldr	r2, [sp, #24]
 800b3ba:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 800b3be:	1ad3      	subs	r3, r2, r3
            circ_area.x2 = lb_origo.x + LV_CIRC_OCT4_X(cir_out) + act_w1;
 800b3c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT4_X(cir_out);
 800b3c2:	b29b      	uxth	r3, r3
 800b3c4:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            circ_area.x2 = lb_origo.x + LV_CIRC_OCT4_X(cir_out) + act_w1;
 800b3c8:	4413      	add	r3, r2
 800b3ca:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT4_Y(cir_out);
 800b3ce:	9a04      	ldr	r2, [sp, #16]
 800b3d0:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
 800b3d4:	4413      	add	r3, r2
 800b3d6:	b21b      	sxth	r3, r3
 800b3d8:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            circ_area.y2 = lb_origo.y + LV_CIRC_OCT4_Y(cir_out);
 800b3dc:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&circ_area, mask, color, opa);
 800b3e0:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 800b3e4:	9b07      	ldr	r3, [sp, #28]
 800b3e6:	4659      	mov	r1, fp
 800b3e8:	a826      	add	r0, sp, #152	; 0x98
 800b3ea:	f7fe facf 	bl	800998c <lv_draw_fill>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800b3ee:	9b05      	ldr	r3, [sp, #20]
 800b3f0:	f003 0306 	and.w	r3, r3, #6
 800b3f4:	2b06      	cmp	r3, #6
 800b3f6:	d13b      	bne.n	800b470 <lv_draw_rect+0x1840>
            if(lb_origo.y + LV_CIRC_OCT4_Y(cir_out) > lt_origo.y + LV_CIRC_OCT5_Y(cir_out)) {
 800b3f8:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
 800b3fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b3fe:	18d1      	adds	r1, r2, r3
 800b400:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b402:	1ad2      	subs	r2, r2, r3
 800b404:	4291      	cmp	r1, r2
 800b406:	dd18      	ble.n	800b43a <lv_draw_rect+0x180a>
                circ_area.x1 = lt_origo.x + LV_CIRC_OCT5_X(cir_out);
 800b408:	9906      	ldr	r1, [sp, #24]
 800b40a:	f8bd 2088 	ldrh.w	r2, [sp, #136]	; 0x88
 800b40e:	1a8a      	subs	r2, r1, r2
                circ_area.x2 = lt_origo.x + LV_CIRC_OCT5_X(cir_out) + act_w2;
 800b410:	990d      	ldr	r1, [sp, #52]	; 0x34
                circ_area.x1 = lt_origo.x + LV_CIRC_OCT5_X(cir_out);
 800b412:	b292      	uxth	r2, r2
 800b414:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
                circ_area.x2 = lt_origo.x + LV_CIRC_OCT5_X(cir_out) + act_w2;
 800b418:	440a      	add	r2, r1
 800b41a:	f8ad 209c 	strh.w	r2, [sp, #156]	; 0x9c
                circ_area.y1 = lt_origo.y + LV_CIRC_OCT5_Y(cir_out);
 800b41e:	9a03      	ldr	r2, [sp, #12]
 800b420:	1ad3      	subs	r3, r2, r3
 800b422:	b21b      	sxth	r3, r3
 800b424:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
                circ_area.y2 = lt_origo.y + LV_CIRC_OCT5_Y(cir_out);
 800b428:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
                lv_draw_fill(&circ_area, mask, color, opa);
 800b42c:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 800b430:	9b07      	ldr	r3, [sp, #28]
 800b432:	4659      	mov	r1, fp
 800b434:	a826      	add	r0, sp, #152	; 0x98
 800b436:	f7fe faa9 	bl	800998c <lv_draw_fill>
            circ_area.x1 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
 800b43a:	9a06      	ldr	r2, [sp, #24]
 800b43c:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
 800b440:	1ad3      	subs	r3, r2, r3
 800b442:	b21b      	sxth	r3, r3
            circ_area.y1 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out);
 800b444:	9a03      	ldr	r2, [sp, #12]
            circ_area.x1 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
 800b446:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            circ_area.x2 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
 800b44a:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            circ_area.y1 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out);
 800b44e:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 800b452:	1ad3      	subs	r3, r2, r3
            circ_area.y2 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out) + act_w1;
 800b454:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
            circ_area.y1 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out);
 800b456:	b29b      	uxth	r3, r3
 800b458:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            circ_area.y2 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out) + act_w1;
 800b45c:	4413      	add	r3, r2
 800b45e:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&circ_area, mask, color, opa);
 800b462:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 800b466:	9b07      	ldr	r3, [sp, #28]
 800b468:	4659      	mov	r1, fp
 800b46a:	a826      	add	r0, sp, #152	; 0x98
 800b46c:	f7fe fa8e 	bl	800998c <lv_draw_fill>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800b470:	9b05      	ldr	r3, [sp, #20]
 800b472:	f003 030a 	and.w	r3, r3, #10
 800b476:	2b0a      	cmp	r3, #10
 800b478:	d13b      	bne.n	800b4f2 <lv_draw_rect+0x18c2>
            circ_area.x1 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
 800b47a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b47c:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
 800b480:	4413      	add	r3, r2
 800b482:	b21b      	sxth	r3, r3
            circ_area.y1 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out);
 800b484:	9a03      	ldr	r2, [sp, #12]
            circ_area.x1 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
 800b486:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            circ_area.x2 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
 800b48a:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            circ_area.y1 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out);
 800b48e:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 800b492:	1ad3      	subs	r3, r2, r3
            circ_area.y2 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out) + act_w2;
 800b494:	9a0d      	ldr	r2, [sp, #52]	; 0x34
            circ_area.y1 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out);
 800b496:	b29b      	uxth	r3, r3
 800b498:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            circ_area.y2 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out) + act_w2;
 800b49c:	4413      	add	r3, r2
 800b49e:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&circ_area, mask, color, opa);
 800b4a2:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 800b4a6:	9b07      	ldr	r3, [sp, #28]
 800b4a8:	4659      	mov	r1, fp
 800b4aa:	a826      	add	r0, sp, #152	; 0x98
 800b4ac:	f7fe fa6e 	bl	800998c <lv_draw_fill>
            if(rb_origo.y + LV_CIRC_OCT1_Y(cir_out) > rt_origo.y + LV_CIRC_OCT8_Y(cir_out)) {
 800b4b0:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
 800b4b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b4b6:	18d1      	adds	r1, r2, r3
 800b4b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b4ba:	1ad2      	subs	r2, r2, r3
 800b4bc:	4291      	cmp	r1, r2
 800b4be:	dd18      	ble.n	800b4f2 <lv_draw_rect+0x18c2>
                circ_area.x1 = rt_origo.x + LV_CIRC_OCT8_X(cir_out) - act_w1;
 800b4c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4c2:	f8bd 1088 	ldrh.w	r1, [sp, #136]	; 0x88
 800b4c6:	4411      	add	r1, r2
 800b4c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b4ca:	b289      	uxth	r1, r1
 800b4cc:	1a8a      	subs	r2, r1, r2
 800b4ce:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
                circ_area.y1 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
 800b4d2:	9a03      	ldr	r2, [sp, #12]
                circ_area.x2 = rt_origo.x + LV_CIRC_OCT8_X(cir_out);
 800b4d4:	f8ad 109c 	strh.w	r1, [sp, #156]	; 0x9c
                circ_area.y1 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
 800b4d8:	1ad3      	subs	r3, r2, r3
 800b4da:	b21b      	sxth	r3, r3
 800b4dc:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
                circ_area.y2 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
 800b4e0:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
                lv_draw_fill(&circ_area, mask, color, opa);
 800b4e4:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 800b4e8:	9b07      	ldr	r3, [sp, #28]
 800b4ea:	4659      	mov	r1, fp
 800b4ec:	a826      	add	r0, sp, #152	; 0x98
 800b4ee:	f7fe fa4d 	bl	800998c <lv_draw_fill>
        lv_circ_next(&cir_out, &tmp_out);
 800b4f2:	a91e      	add	r1, sp, #120	; 0x78
 800b4f4:	a822      	add	r0, sp, #136	; 0x88
 800b4f6:	f001 f9dc 	bl	800c8b2 <lv_circ_next>
        if(cir_in.y < cir_in.x) {
 800b4fa:	f9bd 2092 	ldrsh.w	r2, [sp, #146]	; 0x92
 800b4fe:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 800b502:	429a      	cmp	r2, r3
 800b504:	f6bf a9bb 	bge.w	800a87e <lv_draw_rect+0xc4e>
            lv_circ_next(&cir_in, &tmp_in);
 800b508:	a920      	add	r1, sp, #128	; 0x80
 800b50a:	a824      	add	r0, sp, #144	; 0x90
 800b50c:	f001 f9d1 	bl	800c8b2 <lv_circ_next>
 800b510:	f7ff b9b5 	b.w	800a87e <lv_draw_rect+0xc4e>
            act_w1 = cir_out.x - cir_out.y;
 800b514:	eba2 030a 	sub.w	r3, r2, sl
 800b518:	b29b      	uxth	r3, r3
 800b51a:	b219      	sxth	r1, r3
            act_w2 = act_w1 - 1;
 800b51c:	3b01      	subs	r3, #1
            act_w1 = cir_out.x - cir_out.y;
 800b51e:	910b      	str	r1, [sp, #44]	; 0x2c
            act_w2 = act_w1 - 1;
 800b520:	b21b      	sxth	r3, r3
 800b522:	e6ba      	b.n	800b29a <lv_draw_rect+0x166a>
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 800b524:	f1b8 0f01 	cmp.w	r8, #1
                        aa_opa = antialias_get_opa_circ(seg_size, i, opa);
 800b528:	9a07      	ldr	r2, [sp, #28]
 800b52a:	4640      	mov	r0, r8
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 800b52c:	f000 8094 	beq.w	800b658 <lv_draw_rect+0x1a28>
                        aa_opa = antialias_get_opa_circ(seg_size, i, opa);
 800b530:	f7fe fb5c 	bl	8009bec <antialias_get_opa_circ>
 800b534:	4604      	mov	r4, r0
                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800b536:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b538:	2b09      	cmp	r3, #9
 800b53a:	d11b      	bne.n	800b574 <lv_draw_rect+0x1944>
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800b53c:	9b04      	ldr	r3, [sp, #16]
 800b53e:	9400      	str	r4, [sp, #0]
 800b540:	fa1f f986 	uxth.w	r9, r6
 800b544:	1959      	adds	r1, r3, r5
 800b546:	9b02      	ldr	r3, [sp, #8]
 800b548:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 800b54c:	895b      	ldrh	r3, [r3, #10]
 800b54e:	4449      	add	r1, r9
 800b550:	465a      	mov	r2, fp
 800b552:	b209      	sxth	r1, r1
 800b554:	f7fe f9ca 	bl	80098ec <lv_draw_px>
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800b558:	9b04      	ldr	r3, [sp, #16]
 800b55a:	9400      	str	r4, [sp, #0]
 800b55c:	1c59      	adds	r1, r3, #1
 800b55e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b560:	1958      	adds	r0, r3, r5
 800b562:	9b02      	ldr	r3, [sp, #8]
 800b564:	4439      	add	r1, r7
 800b566:	4448      	add	r0, r9
 800b568:	895b      	ldrh	r3, [r3, #10]
 800b56a:	465a      	mov	r2, fp
 800b56c:	b209      	sxth	r1, r1
 800b56e:	b200      	sxth	r0, r0
 800b570:	f7fe f9bc 	bl	80098ec <lv_draw_px>
                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800b574:	9b05      	ldr	r3, [sp, #20]
 800b576:	f003 0305 	and.w	r3, r3, #5
 800b57a:	2b05      	cmp	r3, #5
 800b57c:	d120      	bne.n	800b5c0 <lv_draw_rect+0x1990>
                        lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 800b57e:	9b04      	ldr	r3, [sp, #16]
 800b580:	9400      	str	r4, [sp, #0]
 800b582:	f103 0e01 	add.w	lr, r3, #1
 800b586:	9b06      	ldr	r3, [sp, #24]
 800b588:	fa1f f986 	uxth.w	r9, r6
 800b58c:	1b58      	subs	r0, r3, r5
 800b58e:	9b02      	ldr	r3, [sp, #8]
 800b590:	44be      	add	lr, r7
 800b592:	eba0 0009 	sub.w	r0, r0, r9
 800b596:	895b      	ldrh	r3, [r3, #10]
 800b598:	465a      	mov	r2, fp
 800b59a:	fa0f f18e 	sxth.w	r1, lr
 800b59e:	b200      	sxth	r0, r0
 800b5a0:	f7fe f9a4 	bl	80098ec <lv_draw_px>
                        lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 800b5a4:	9b04      	ldr	r3, [sp, #16]
 800b5a6:	9400      	str	r4, [sp, #0]
 800b5a8:	1959      	adds	r1, r3, r5
 800b5aa:	9b06      	ldr	r3, [sp, #24]
 800b5ac:	1e58      	subs	r0, r3, #1
 800b5ae:	9b02      	ldr	r3, [sp, #8]
 800b5b0:	4449      	add	r1, r9
 800b5b2:	1bc0      	subs	r0, r0, r7
 800b5b4:	895b      	ldrh	r3, [r3, #10]
 800b5b6:	465a      	mov	r2, fp
 800b5b8:	b209      	sxth	r1, r1
 800b5ba:	b200      	sxth	r0, r0
 800b5bc:	f7fe f996 	bl	80098ec <lv_draw_px>
                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800b5c0:	9b05      	ldr	r3, [sp, #20]
 800b5c2:	f003 0306 	and.w	r3, r3, #6
 800b5c6:	2b06      	cmp	r3, #6
 800b5c8:	d11f      	bne.n	800b60a <lv_draw_rect+0x19da>
                        lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 800b5ca:	9b03      	ldr	r3, [sp, #12]
 800b5cc:	9400      	str	r4, [sp, #0]
 800b5ce:	1b59      	subs	r1, r3, r5
 800b5d0:	9b06      	ldr	r3, [sp, #24]
 800b5d2:	fa1f f986 	uxth.w	r9, r6
 800b5d6:	1e58      	subs	r0, r3, #1
 800b5d8:	9b02      	ldr	r3, [sp, #8]
 800b5da:	eba1 0109 	sub.w	r1, r1, r9
 800b5de:	1bc0      	subs	r0, r0, r7
 800b5e0:	895b      	ldrh	r3, [r3, #10]
 800b5e2:	465a      	mov	r2, fp
 800b5e4:	b209      	sxth	r1, r1
 800b5e6:	b200      	sxth	r0, r0
 800b5e8:	f7fe f980 	bl	80098ec <lv_draw_px>
                        lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 800b5ec:	9b03      	ldr	r3, [sp, #12]
 800b5ee:	9400      	str	r4, [sp, #0]
 800b5f0:	1e59      	subs	r1, r3, #1
 800b5f2:	9b06      	ldr	r3, [sp, #24]
 800b5f4:	1b58      	subs	r0, r3, r5
 800b5f6:	9b02      	ldr	r3, [sp, #8]
 800b5f8:	1bc9      	subs	r1, r1, r7
 800b5fa:	eba0 0009 	sub.w	r0, r0, r9
 800b5fe:	895b      	ldrh	r3, [r3, #10]
 800b600:	465a      	mov	r2, fp
 800b602:	b209      	sxth	r1, r1
 800b604:	b200      	sxth	r0, r0
 800b606:	f7fe f971 	bl	80098ec <lv_draw_px>
                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800b60a:	9b05      	ldr	r3, [sp, #20]
 800b60c:	f003 030a 	and.w	r3, r3, #10
 800b610:	2b0a      	cmp	r3, #10
 800b612:	d11f      	bne.n	800b654 <lv_draw_rect+0x1a24>
                        lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 800b614:	9b03      	ldr	r3, [sp, #12]
 800b616:	9400      	str	r4, [sp, #0]
 800b618:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
 800b61c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b61e:	fa1f f986 	uxth.w	r9, r6
 800b622:	1958      	adds	r0, r3, r5
 800b624:	9b02      	ldr	r3, [sp, #8]
 800b626:	ebae 0e07 	sub.w	lr, lr, r7
 800b62a:	4448      	add	r0, r9
 800b62c:	895b      	ldrh	r3, [r3, #10]
 800b62e:	465a      	mov	r2, fp
 800b630:	fa0f f18e 	sxth.w	r1, lr
 800b634:	b200      	sxth	r0, r0
 800b636:	f7fe f959 	bl	80098ec <lv_draw_px>
                        lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 800b63a:	9b03      	ldr	r3, [sp, #12]
 800b63c:	9400      	str	r4, [sp, #0]
 800b63e:	1b59      	subs	r1, r3, r5
 800b640:	9b02      	ldr	r3, [sp, #8]
 800b642:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 800b646:	895b      	ldrh	r3, [r3, #10]
 800b648:	eba1 0109 	sub.w	r1, r1, r9
 800b64c:	465a      	mov	r2, fp
 800b64e:	b209      	sxth	r1, r1
 800b650:	f7fe f94c 	bl	80098ec <lv_draw_px>
 800b654:	3601      	adds	r6, #1
 800b656:	e632      	b.n	800b2be <lv_draw_rect+0x168e>
                        aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800b658:	f7fe f86e 	bl	8009738 <lv_draw_aa_get_opa>
 800b65c:	9b07      	ldr	r3, [sp, #28]
 800b65e:	1a18      	subs	r0, r3, r0
 800b660:	b2c4      	uxtb	r4, r0
 800b662:	e768      	b.n	800b536 <lv_draw_rect+0x1906>
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 800b664:	f1ba 0f01 	cmp.w	sl, #1
                        aa_opa = opa - antialias_get_opa_circ(seg_size, i, opa);
 800b668:	9a07      	ldr	r2, [sp, #28]
 800b66a:	4650      	mov	r0, sl
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 800b66c:	f000 809c 	beq.w	800b7a8 <lv_draw_rect+0x1b78>
                        aa_opa = opa - antialias_get_opa_circ(seg_size, i, opa);
 800b670:	f7fe fabc 	bl	8009bec <antialias_get_opa_circ>
 800b674:	9b07      	ldr	r3, [sp, #28]
 800b676:	1a18      	subs	r0, r3, r0
 800b678:	b2c5      	uxtb	r5, r0
                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800b67a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b67c:	2b09      	cmp	r3, #9
 800b67e:	d10a      	bne.n	800b696 <lv_draw_rect+0x1a66>
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800b680:	9b04      	ldr	r3, [sp, #16]
 800b682:	9500      	str	r5, [sp, #0]
 800b684:	1999      	adds	r1, r3, r6
 800b686:	9b02      	ldr	r3, [sp, #8]
 800b688:	9815      	ldr	r0, [sp, #84]	; 0x54
 800b68a:	895b      	ldrh	r3, [r3, #10]
 800b68c:	4421      	add	r1, r4
 800b68e:	465a      	mov	r2, fp
 800b690:	b209      	sxth	r1, r1
 800b692:	f7fe f92b 	bl	80098ec <lv_draw_px>
 800b696:	9b05      	ldr	r3, [sp, #20]
 800b698:	f003 0305 	and.w	r3, r3, #5
                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800b69c:	2b05      	cmp	r3, #5
 800b69e:	9314      	str	r3, [sp, #80]	; 0x50
 800b6a0:	d10e      	bne.n	800b6c0 <lv_draw_rect+0x1a90>
                        lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) - 1, mask,
 800b6a2:	9b04      	ldr	r3, [sp, #16]
 800b6a4:	9500      	str	r5, [sp, #0]
 800b6a6:	1e59      	subs	r1, r3, #1
 800b6a8:	9b08      	ldr	r3, [sp, #32]
 800b6aa:	4419      	add	r1, r3
 800b6ac:	9b06      	ldr	r3, [sp, #24]
 800b6ae:	1b98      	subs	r0, r3, r6
 800b6b0:	9b02      	ldr	r3, [sp, #8]
 800b6b2:	1b00      	subs	r0, r0, r4
 800b6b4:	895b      	ldrh	r3, [r3, #10]
 800b6b6:	465a      	mov	r2, fp
 800b6b8:	b209      	sxth	r1, r1
 800b6ba:	b200      	sxth	r0, r0
 800b6bc:	f7fe f916 	bl	80098ec <lv_draw_px>
 800b6c0:	9b05      	ldr	r3, [sp, #20]
 800b6c2:	f003 0806 	and.w	r8, r3, #6
                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800b6c6:	f1b8 0f06 	cmp.w	r8, #6
 800b6ca:	d10e      	bne.n	800b6ea <lv_draw_rect+0x1aba>
                        lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) + 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 800b6cc:	9b03      	ldr	r3, [sp, #12]
 800b6ce:	9500      	str	r5, [sp, #0]
 800b6d0:	1b99      	subs	r1, r3, r6
 800b6d2:	9b06      	ldr	r3, [sp, #24]
 800b6d4:	1c58      	adds	r0, r3, #1
 800b6d6:	9b08      	ldr	r3, [sp, #32]
 800b6d8:	1ac0      	subs	r0, r0, r3
 800b6da:	9b02      	ldr	r3, [sp, #8]
 800b6dc:	1b09      	subs	r1, r1, r4
 800b6de:	895b      	ldrh	r3, [r3, #10]
 800b6e0:	465a      	mov	r2, fp
 800b6e2:	b209      	sxth	r1, r1
 800b6e4:	b200      	sxth	r0, r0
 800b6e6:	f7fe f901 	bl	80098ec <lv_draw_px>
 800b6ea:	9b05      	ldr	r3, [sp, #20]
 800b6ec:	f003 070a 	and.w	r7, r3, #10
                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800b6f0:	2f0a      	cmp	r7, #10
 800b6f2:	d10e      	bne.n	800b712 <lv_draw_rect+0x1ae2>
                        lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) + 1, mask,
 800b6f4:	9b03      	ldr	r3, [sp, #12]
 800b6f6:	9500      	str	r5, [sp, #0]
 800b6f8:	1c59      	adds	r1, r3, #1
 800b6fa:	9b08      	ldr	r3, [sp, #32]
 800b6fc:	1ac9      	subs	r1, r1, r3
 800b6fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b700:	1998      	adds	r0, r3, r6
 800b702:	9b02      	ldr	r3, [sp, #8]
 800b704:	4420      	add	r0, r4
 800b706:	895b      	ldrh	r3, [r3, #10]
 800b708:	465a      	mov	r2, fp
 800b70a:	b209      	sxth	r1, r1
 800b70c:	b200      	sxth	r0, r0
 800b70e:	f7fe f8ed 	bl	80098ec <lv_draw_px>
                    if(LV_CIRC_OCT1_X(aa_p) - 1 != LV_CIRC_OCT2_X(aa_p) + i) {
 800b712:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b714:	9a08      	ldr	r2, [sp, #32]
 800b716:	4423      	add	r3, r4
 800b718:	3a01      	subs	r2, #1
 800b71a:	4293      	cmp	r3, r2
 800b71c:	d042      	beq.n	800b7a4 <lv_draw_rect+0x1b74>
                        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800b71e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b720:	2b09      	cmp	r3, #9
 800b722:	d10e      	bne.n	800b742 <lv_draw_rect+0x1b12>
                            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) - 1,
 800b724:	9b04      	ldr	r3, [sp, #16]
 800b726:	9500      	str	r5, [sp, #0]
 800b728:	1e59      	subs	r1, r3, #1
 800b72a:	9b08      	ldr	r3, [sp, #32]
 800b72c:	4419      	add	r1, r3
 800b72e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b730:	1998      	adds	r0, r3, r6
 800b732:	9b02      	ldr	r3, [sp, #8]
 800b734:	4420      	add	r0, r4
 800b736:	895b      	ldrh	r3, [r3, #10]
 800b738:	465a      	mov	r2, fp
 800b73a:	b209      	sxth	r1, r1
 800b73c:	b200      	sxth	r0, r0
 800b73e:	f7fe f8d5 	bl	80098ec <lv_draw_px>
                        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800b742:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b744:	2b05      	cmp	r3, #5
 800b746:	d10e      	bne.n	800b766 <lv_draw_rect+0x1b36>
                            lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) + 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i,
 800b748:	9b04      	ldr	r3, [sp, #16]
 800b74a:	9500      	str	r5, [sp, #0]
 800b74c:	1999      	adds	r1, r3, r6
 800b74e:	9b06      	ldr	r3, [sp, #24]
 800b750:	1c58      	adds	r0, r3, #1
 800b752:	9b08      	ldr	r3, [sp, #32]
 800b754:	1ac0      	subs	r0, r0, r3
 800b756:	9b02      	ldr	r3, [sp, #8]
 800b758:	4421      	add	r1, r4
 800b75a:	895b      	ldrh	r3, [r3, #10]
 800b75c:	465a      	mov	r2, fp
 800b75e:	b209      	sxth	r1, r1
 800b760:	b200      	sxth	r0, r0
 800b762:	f7fe f8c3 	bl	80098ec <lv_draw_px>
                        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800b766:	f1b8 0f06 	cmp.w	r8, #6
 800b76a:	d10e      	bne.n	800b78a <lv_draw_rect+0x1b5a>
                            lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) + 1,
 800b76c:	9b03      	ldr	r3, [sp, #12]
 800b76e:	9500      	str	r5, [sp, #0]
 800b770:	1c59      	adds	r1, r3, #1
 800b772:	9b08      	ldr	r3, [sp, #32]
 800b774:	1ac9      	subs	r1, r1, r3
 800b776:	9b06      	ldr	r3, [sp, #24]
 800b778:	1b98      	subs	r0, r3, r6
 800b77a:	9b02      	ldr	r3, [sp, #8]
 800b77c:	1b00      	subs	r0, r0, r4
 800b77e:	895b      	ldrh	r3, [r3, #10]
 800b780:	465a      	mov	r2, fp
 800b782:	b209      	sxth	r1, r1
 800b784:	b200      	sxth	r0, r0
 800b786:	f7fe f8b1 	bl	80098ec <lv_draw_px>
                        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800b78a:	2f0a      	cmp	r7, #10
 800b78c:	d10a      	bne.n	800b7a4 <lv_draw_rect+0x1b74>
                            lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) - 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i,
 800b78e:	9b03      	ldr	r3, [sp, #12]
 800b790:	9500      	str	r5, [sp, #0]
 800b792:	1b99      	subs	r1, r3, r6
 800b794:	9b02      	ldr	r3, [sp, #8]
 800b796:	9815      	ldr	r0, [sp, #84]	; 0x54
 800b798:	895b      	ldrh	r3, [r3, #10]
 800b79a:	1b09      	subs	r1, r1, r4
 800b79c:	465a      	mov	r2, fp
 800b79e:	b209      	sxth	r1, r1
 800b7a0:	f7fe f8a4 	bl	80098ec <lv_draw_px>
 800b7a4:	3401      	adds	r4, #1
 800b7a6:	e5a5      	b.n	800b2f4 <lv_draw_rect+0x16c4>
                        aa_opa = lv_draw_aa_get_opa(seg_size, i, opa);
 800b7a8:	f7fd ffc6 	bl	8009738 <lv_draw_aa_get_opa>
 800b7ac:	4605      	mov	r5, r0
 800b7ae:	e764      	b.n	800b67a <lv_draw_rect+0x1a4a>
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800b7b0:	9a07      	ldr	r2, [sp, #28]
 800b7b2:	4650      	mov	r0, sl
 800b7b4:	f7fd ffc0 	bl	8009738 <lv_draw_aa_get_opa>
 800b7b8:	9b07      	ldr	r3, [sp, #28]
 800b7ba:	1a18      	subs	r0, r3, r0
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800b7bc:	9b05      	ldr	r3, [sp, #20]
 800b7be:	f003 0309 	and.w	r3, r3, #9
 800b7c2:	2b09      	cmp	r3, #9
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800b7c4:	b2c4      	uxtb	r4, r0
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800b7c6:	d11b      	bne.n	800b800 <lv_draw_rect+0x1bd0>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800b7c8:	9b04      	ldr	r3, [sp, #16]
 800b7ca:	9400      	str	r4, [sp, #0]
 800b7cc:	fa1f f886 	uxth.w	r8, r6
 800b7d0:	1959      	adds	r1, r3, r5
 800b7d2:	9b02      	ldr	r3, [sp, #8]
 800b7d4:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 800b7d8:	895b      	ldrh	r3, [r3, #10]
 800b7da:	4441      	add	r1, r8
 800b7dc:	465a      	mov	r2, fp
 800b7de:	b209      	sxth	r1, r1
 800b7e0:	f7fe f884 	bl	80098ec <lv_draw_px>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800b7e4:	9b04      	ldr	r3, [sp, #16]
 800b7e6:	9400      	str	r4, [sp, #0]
 800b7e8:	1c59      	adds	r1, r3, #1
 800b7ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7ec:	1958      	adds	r0, r3, r5
 800b7ee:	9b02      	ldr	r3, [sp, #8]
 800b7f0:	4439      	add	r1, r7
 800b7f2:	4440      	add	r0, r8
 800b7f4:	895b      	ldrh	r3, [r3, #10]
 800b7f6:	465a      	mov	r2, fp
 800b7f8:	b209      	sxth	r1, r1
 800b7fa:	b200      	sxth	r0, r0
 800b7fc:	f7fe f876 	bl	80098ec <lv_draw_px>
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800b800:	9b05      	ldr	r3, [sp, #20]
 800b802:	f003 0305 	and.w	r3, r3, #5
 800b806:	2b05      	cmp	r3, #5
 800b808:	d120      	bne.n	800b84c <lv_draw_rect+0x1c1c>
                lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 800b80a:	9b04      	ldr	r3, [sp, #16]
 800b80c:	9400      	str	r4, [sp, #0]
 800b80e:	f103 0e01 	add.w	lr, r3, #1
 800b812:	9b06      	ldr	r3, [sp, #24]
 800b814:	fa1f f886 	uxth.w	r8, r6
 800b818:	1b58      	subs	r0, r3, r5
 800b81a:	9b02      	ldr	r3, [sp, #8]
 800b81c:	44be      	add	lr, r7
 800b81e:	eba0 0008 	sub.w	r0, r0, r8
 800b822:	895b      	ldrh	r3, [r3, #10]
 800b824:	465a      	mov	r2, fp
 800b826:	fa0f f18e 	sxth.w	r1, lr
 800b82a:	b200      	sxth	r0, r0
 800b82c:	f7fe f85e 	bl	80098ec <lv_draw_px>
                lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 800b830:	9b04      	ldr	r3, [sp, #16]
 800b832:	9400      	str	r4, [sp, #0]
 800b834:	1959      	adds	r1, r3, r5
 800b836:	9b06      	ldr	r3, [sp, #24]
 800b838:	1e58      	subs	r0, r3, #1
 800b83a:	9b02      	ldr	r3, [sp, #8]
 800b83c:	4441      	add	r1, r8
 800b83e:	1bc0      	subs	r0, r0, r7
 800b840:	895b      	ldrh	r3, [r3, #10]
 800b842:	465a      	mov	r2, fp
 800b844:	b209      	sxth	r1, r1
 800b846:	b200      	sxth	r0, r0
 800b848:	f7fe f850 	bl	80098ec <lv_draw_px>
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800b84c:	9b05      	ldr	r3, [sp, #20]
 800b84e:	f003 0306 	and.w	r3, r3, #6
 800b852:	2b06      	cmp	r3, #6
 800b854:	d11f      	bne.n	800b896 <lv_draw_rect+0x1c66>
                lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 800b856:	9b03      	ldr	r3, [sp, #12]
 800b858:	9400      	str	r4, [sp, #0]
 800b85a:	1b59      	subs	r1, r3, r5
 800b85c:	9b06      	ldr	r3, [sp, #24]
 800b85e:	fa1f f886 	uxth.w	r8, r6
 800b862:	1e58      	subs	r0, r3, #1
 800b864:	9b02      	ldr	r3, [sp, #8]
 800b866:	eba1 0108 	sub.w	r1, r1, r8
 800b86a:	1bc0      	subs	r0, r0, r7
 800b86c:	895b      	ldrh	r3, [r3, #10]
 800b86e:	465a      	mov	r2, fp
 800b870:	b209      	sxth	r1, r1
 800b872:	b200      	sxth	r0, r0
 800b874:	f7fe f83a 	bl	80098ec <lv_draw_px>
                lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 800b878:	9b03      	ldr	r3, [sp, #12]
 800b87a:	9400      	str	r4, [sp, #0]
 800b87c:	1e59      	subs	r1, r3, #1
 800b87e:	9b06      	ldr	r3, [sp, #24]
 800b880:	1b58      	subs	r0, r3, r5
 800b882:	9b02      	ldr	r3, [sp, #8]
 800b884:	1bc9      	subs	r1, r1, r7
 800b886:	eba0 0008 	sub.w	r0, r0, r8
 800b88a:	895b      	ldrh	r3, [r3, #10]
 800b88c:	465a      	mov	r2, fp
 800b88e:	b209      	sxth	r1, r1
 800b890:	b200      	sxth	r0, r0
 800b892:	f7fe f82b 	bl	80098ec <lv_draw_px>
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800b896:	9b05      	ldr	r3, [sp, #20]
 800b898:	f003 030a 	and.w	r3, r3, #10
 800b89c:	2b0a      	cmp	r3, #10
 800b89e:	d11f      	bne.n	800b8e0 <lv_draw_rect+0x1cb0>
                lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 800b8a0:	9b03      	ldr	r3, [sp, #12]
 800b8a2:	9400      	str	r4, [sp, #0]
 800b8a4:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
 800b8a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8aa:	fa1f f886 	uxth.w	r8, r6
 800b8ae:	1958      	adds	r0, r3, r5
 800b8b0:	9b02      	ldr	r3, [sp, #8]
 800b8b2:	ebae 0e07 	sub.w	lr, lr, r7
 800b8b6:	4440      	add	r0, r8
 800b8b8:	895b      	ldrh	r3, [r3, #10]
 800b8ba:	465a      	mov	r2, fp
 800b8bc:	fa0f f18e 	sxth.w	r1, lr
 800b8c0:	b200      	sxth	r0, r0
 800b8c2:	f7fe f813 	bl	80098ec <lv_draw_px>
                lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 800b8c6:	9b03      	ldr	r3, [sp, #12]
 800b8c8:	9400      	str	r4, [sp, #0]
 800b8ca:	1b59      	subs	r1, r3, r5
 800b8cc:	9b02      	ldr	r3, [sp, #8]
 800b8ce:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 800b8d2:	895b      	ldrh	r3, [r3, #10]
 800b8d4:	eba1 0108 	sub.w	r1, r1, r8
 800b8d8:	465a      	mov	r2, fp
 800b8da:	b209      	sxth	r1, r1
 800b8dc:	f7fe f806 	bl	80098ec <lv_draw_px>
 800b8e0:	3601      	adds	r6, #1
 800b8e2:	f7fe bfe3 	b.w	800a8ac <lv_draw_rect+0xc7c>
            lv_opa_t aa_opa = lv_draw_aa_get_opa(seg_size, i, opa);
 800b8e6:	9a07      	ldr	r2, [sp, #28]
 800b8e8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b8ea:	f7fd ff25 	bl	8009738 <lv_draw_aa_get_opa>
 800b8ee:	9b05      	ldr	r3, [sp, #20]
 800b8f0:	f003 0909 	and.w	r9, r3, #9
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800b8f4:	f1b9 0f09 	cmp.w	r9, #9
            lv_opa_t aa_opa = lv_draw_aa_get_opa(seg_size, i, opa);
 800b8f8:	4606      	mov	r6, r0
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800b8fa:	d10a      	bne.n	800b912 <lv_draw_rect+0x1ce2>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800b8fc:	9b04      	ldr	r3, [sp, #16]
 800b8fe:	9000      	str	r0, [sp, #0]
 800b900:	1959      	adds	r1, r3, r5
 800b902:	9b02      	ldr	r3, [sp, #8]
 800b904:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b906:	895b      	ldrh	r3, [r3, #10]
 800b908:	4421      	add	r1, r4
 800b90a:	465a      	mov	r2, fp
 800b90c:	b209      	sxth	r1, r1
 800b90e:	f7fd ffed 	bl	80098ec <lv_draw_px>
 800b912:	9b05      	ldr	r3, [sp, #20]
 800b914:	f003 0a05 	and.w	sl, r3, #5
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800b918:	f1ba 0f05 	cmp.w	sl, #5
 800b91c:	d10e      	bne.n	800b93c <lv_draw_rect+0x1d0c>
                lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) - 1, mask,
 800b91e:	9b04      	ldr	r3, [sp, #16]
 800b920:	9600      	str	r6, [sp, #0]
 800b922:	1e59      	subs	r1, r3, #1
 800b924:	9b08      	ldr	r3, [sp, #32]
 800b926:	4419      	add	r1, r3
 800b928:	9b06      	ldr	r3, [sp, #24]
 800b92a:	1b58      	subs	r0, r3, r5
 800b92c:	9b02      	ldr	r3, [sp, #8]
 800b92e:	1b00      	subs	r0, r0, r4
 800b930:	895b      	ldrh	r3, [r3, #10]
 800b932:	465a      	mov	r2, fp
 800b934:	b209      	sxth	r1, r1
 800b936:	b200      	sxth	r0, r0
 800b938:	f7fd ffd8 	bl	80098ec <lv_draw_px>
 800b93c:	9b05      	ldr	r3, [sp, #20]
 800b93e:	f003 0806 	and.w	r8, r3, #6
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800b942:	f1b8 0f06 	cmp.w	r8, #6
 800b946:	d10e      	bne.n	800b966 <lv_draw_rect+0x1d36>
                lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) + 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 800b948:	9b03      	ldr	r3, [sp, #12]
 800b94a:	9600      	str	r6, [sp, #0]
 800b94c:	1b59      	subs	r1, r3, r5
 800b94e:	9b06      	ldr	r3, [sp, #24]
 800b950:	1c58      	adds	r0, r3, #1
 800b952:	9b08      	ldr	r3, [sp, #32]
 800b954:	1ac0      	subs	r0, r0, r3
 800b956:	9b02      	ldr	r3, [sp, #8]
 800b958:	1b09      	subs	r1, r1, r4
 800b95a:	895b      	ldrh	r3, [r3, #10]
 800b95c:	465a      	mov	r2, fp
 800b95e:	b209      	sxth	r1, r1
 800b960:	b200      	sxth	r0, r0
 800b962:	f7fd ffc3 	bl	80098ec <lv_draw_px>
 800b966:	9b05      	ldr	r3, [sp, #20]
 800b968:	f003 070a 	and.w	r7, r3, #10
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800b96c:	2f0a      	cmp	r7, #10
 800b96e:	d10e      	bne.n	800b98e <lv_draw_rect+0x1d5e>
                lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) + 1, mask,
 800b970:	9b03      	ldr	r3, [sp, #12]
 800b972:	9600      	str	r6, [sp, #0]
 800b974:	1c59      	adds	r1, r3, #1
 800b976:	9b08      	ldr	r3, [sp, #32]
 800b978:	1ac9      	subs	r1, r1, r3
 800b97a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b97c:	1958      	adds	r0, r3, r5
 800b97e:	9b02      	ldr	r3, [sp, #8]
 800b980:	4420      	add	r0, r4
 800b982:	895b      	ldrh	r3, [r3, #10]
 800b984:	465a      	mov	r2, fp
 800b986:	b209      	sxth	r1, r1
 800b988:	b200      	sxth	r0, r0
 800b98a:	f7fd ffaf 	bl	80098ec <lv_draw_px>
            if(LV_CIRC_OCT1_X(aa_p) - 1 != LV_CIRC_OCT2_X(aa_p) + i) {
 800b98e:	9b08      	ldr	r3, [sp, #32]
 800b990:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b992:	3b01      	subs	r3, #1
 800b994:	4422      	add	r2, r4
 800b996:	4293      	cmp	r3, r2
 800b998:	d042      	beq.n	800ba20 <lv_draw_rect+0x1df0>
                if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800b99a:	f1b9 0f09 	cmp.w	r9, #9
 800b99e:	d10e      	bne.n	800b9be <lv_draw_rect+0x1d8e>
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) - 1, mask,
 800b9a0:	9b04      	ldr	r3, [sp, #16]
 800b9a2:	9600      	str	r6, [sp, #0]
 800b9a4:	1e59      	subs	r1, r3, #1
 800b9a6:	9b08      	ldr	r3, [sp, #32]
 800b9a8:	4419      	add	r1, r3
 800b9aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9ac:	1958      	adds	r0, r3, r5
 800b9ae:	9b02      	ldr	r3, [sp, #8]
 800b9b0:	4420      	add	r0, r4
 800b9b2:	895b      	ldrh	r3, [r3, #10]
 800b9b4:	465a      	mov	r2, fp
 800b9b6:	b209      	sxth	r1, r1
 800b9b8:	b200      	sxth	r0, r0
 800b9ba:	f7fd ff97 	bl	80098ec <lv_draw_px>
                if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800b9be:	f1ba 0f05 	cmp.w	sl, #5
 800b9c2:	d10e      	bne.n	800b9e2 <lv_draw_rect+0x1db2>
                    lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) + 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 800b9c4:	9b04      	ldr	r3, [sp, #16]
 800b9c6:	9600      	str	r6, [sp, #0]
 800b9c8:	1959      	adds	r1, r3, r5
 800b9ca:	9b06      	ldr	r3, [sp, #24]
 800b9cc:	1c58      	adds	r0, r3, #1
 800b9ce:	9b08      	ldr	r3, [sp, #32]
 800b9d0:	1ac0      	subs	r0, r0, r3
 800b9d2:	9b02      	ldr	r3, [sp, #8]
 800b9d4:	4421      	add	r1, r4
 800b9d6:	895b      	ldrh	r3, [r3, #10]
 800b9d8:	465a      	mov	r2, fp
 800b9da:	b209      	sxth	r1, r1
 800b9dc:	b200      	sxth	r0, r0
 800b9de:	f7fd ff85 	bl	80098ec <lv_draw_px>
                if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800b9e2:	f1b8 0f06 	cmp.w	r8, #6
 800b9e6:	d10e      	bne.n	800ba06 <lv_draw_rect+0x1dd6>
                    lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) + 1, mask,
 800b9e8:	9b03      	ldr	r3, [sp, #12]
 800b9ea:	9600      	str	r6, [sp, #0]
 800b9ec:	1c59      	adds	r1, r3, #1
 800b9ee:	9b08      	ldr	r3, [sp, #32]
 800b9f0:	1ac9      	subs	r1, r1, r3
 800b9f2:	9b06      	ldr	r3, [sp, #24]
 800b9f4:	1b58      	subs	r0, r3, r5
 800b9f6:	9b02      	ldr	r3, [sp, #8]
 800b9f8:	1b00      	subs	r0, r0, r4
 800b9fa:	895b      	ldrh	r3, [r3, #10]
 800b9fc:	465a      	mov	r2, fp
 800b9fe:	b209      	sxth	r1, r1
 800ba00:	b200      	sxth	r0, r0
 800ba02:	f7fd ff73 	bl	80098ec <lv_draw_px>
                if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800ba06:	2f0a      	cmp	r7, #10
 800ba08:	d10a      	bne.n	800ba20 <lv_draw_rect+0x1df0>
                    lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) - 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 800ba0a:	9b03      	ldr	r3, [sp, #12]
 800ba0c:	9600      	str	r6, [sp, #0]
 800ba0e:	1b59      	subs	r1, r3, r5
 800ba10:	9b02      	ldr	r3, [sp, #8]
 800ba12:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ba14:	895b      	ldrh	r3, [r3, #10]
 800ba16:	1b09      	subs	r1, r1, r4
 800ba18:	465a      	mov	r2, fp
 800ba1a:	b209      	sxth	r1, r1
 800ba1c:	f7fd ff66 	bl	80098ec <lv_draw_px>
 800ba20:	3401      	adds	r4, #1
 800ba22:	f7fe bfab 	b.w	800a97c <lv_draw_rect+0xd4c>
            if(mcolor.full == gcolor.full)
 800ba26:	9b03      	ldr	r3, [sp, #12]
 800ba28:	454b      	cmp	r3, r9
 800ba2a:	f47f a9bb 	bne.w	800ada4 <lv_draw_rect+0x1174>
                act_color = mcolor;
 800ba2e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
            lv_draw_fill(&edge_top_area, mask, act_color, opa);
 800ba32:	9b04      	ldr	r3, [sp, #16]
 800ba34:	4659      	mov	r1, fp
 800ba36:	a820      	add	r0, sp, #128	; 0x80
 800ba38:	f7fd ffa8 	bl	800998c <lv_draw_fill>
 800ba3c:	f7ff b8a6 	b.w	800ab8c <lv_draw_rect+0xf5c>

0800ba40 <lv_img_cache_invalidate_src>:
 * Invalidate an image source in the cache.
 * Useful if the image source is updated therefore it needs to be cached again.
 * @param src an image source path to a file or pointer to an `lv_img_dsc_t` variable.
 */
void lv_img_cache_invalidate_src(const void * src)
{
 800ba40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 800ba44:	4b0f      	ldr	r3, [pc, #60]	; (800ba84 <lv_img_cache_invalidate_src+0x44>)

    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
 800ba46:	4f10      	ldr	r7, [pc, #64]	; (800ba88 <lv_img_cache_invalidate_src+0x48>)
    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 800ba48:	f8d3 8000 	ldr.w	r8, [r3]
{
 800ba4c:	4606      	mov	r6, r0
    for(i = 0; i < entry_cnt; i++) {
 800ba4e:	2500      	movs	r5, #0
        if(cache[i].dec_dsc.src == src || src == NULL) {
 800ba50:	f04f 0928 	mov.w	r9, #40	; 0x28
    for(i = 0; i < entry_cnt; i++) {
 800ba54:	883a      	ldrh	r2, [r7, #0]
 800ba56:	b2ab      	uxth	r3, r5
 800ba58:	429a      	cmp	r2, r3
 800ba5a:	d801      	bhi.n	800ba60 <lv_img_cache_invalidate_src+0x20>

            memset(&cache[i].dec_dsc, 0, sizeof(lv_img_decoder_dsc_t));
            memset(&cache[i], 0, sizeof(lv_img_cache_entry_t));
        }
    }
}
 800ba5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(cache[i].dec_dsc.src == src || src == NULL) {
 800ba60:	b2ac      	uxth	r4, r5
 800ba62:	fb09 8404 	mla	r4, r9, r4, r8
 800ba66:	6863      	ldr	r3, [r4, #4]
 800ba68:	42b3      	cmp	r3, r6
 800ba6a:	d000      	beq.n	800ba6e <lv_img_cache_invalidate_src+0x2e>
 800ba6c:	b946      	cbnz	r6, 800ba80 <lv_img_cache_invalidate_src+0x40>
            if(cache[i].dec_dsc.src != NULL) {
 800ba6e:	b113      	cbz	r3, 800ba76 <lv_img_cache_invalidate_src+0x36>
                lv_img_decoder_close(&cache[i].dec_dsc);
 800ba70:	4620      	mov	r0, r4
 800ba72:	f000 fb51 	bl	800c118 <lv_img_decoder_close>
            memset(&cache[i], 0, sizeof(lv_img_cache_entry_t));
 800ba76:	2228      	movs	r2, #40	; 0x28
 800ba78:	2100      	movs	r1, #0
 800ba7a:	4620      	mov	r0, r4
 800ba7c:	f001 fe75 	bl	800d76a <memset>
 800ba80:	3501      	adds	r5, #1
 800ba82:	e7e7      	b.n	800ba54 <lv_img_cache_invalidate_src+0x14>
 800ba84:	2000d90c 	.word	0x2000d90c
 800ba88:	2000432c 	.word	0x2000432c

0800ba8c <lv_img_cache_set_size>:
{
 800ba8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
 800ba90:	4c17      	ldr	r4, [pc, #92]	; (800baf0 <lv_img_cache_set_size+0x64>)
 800ba92:	6823      	ldr	r3, [r4, #0]
{
 800ba94:	4680      	mov	r8, r0
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
 800ba96:	b12b      	cbz	r3, 800baa4 <lv_img_cache_set_size+0x18>
        lv_img_cache_invalidate_src(NULL);
 800ba98:	2000      	movs	r0, #0
 800ba9a:	f7ff ffd1 	bl	800ba40 <lv_img_cache_invalidate_src>
        lv_mem_free(LV_GC_ROOT(_lv_img_cache_array));
 800ba9e:	6820      	ldr	r0, [r4, #0]
 800baa0:	f001 f9ca 	bl	800ce38 <lv_mem_free>
    LV_GC_ROOT(_lv_img_cache_array) = lv_mem_alloc(sizeof(lv_img_cache_entry_t) * new_entry_cnt);
 800baa4:	2628      	movs	r6, #40	; 0x28
 800baa6:	fb06 f008 	mul.w	r0, r6, r8
 800baaa:	f001 f983 	bl	800cdb4 <lv_mem_alloc>
 800baae:	6020      	str	r0, [r4, #0]
    lv_mem_assert(LV_GC_ROOT(_lv_img_cache_array));
 800bab0:	b930      	cbnz	r0, 800bac0 <lv_img_cache_set_size+0x34>
 800bab2:	4b10      	ldr	r3, [pc, #64]	; (800baf4 <lv_img_cache_set_size+0x68>)
 800bab4:	4910      	ldr	r1, [pc, #64]	; (800baf8 <lv_img_cache_set_size+0x6c>)
 800bab6:	229b      	movs	r2, #155	; 0x9b
 800bab8:	2003      	movs	r0, #3
 800baba:	f001 f923 	bl	800cd04 <lv_log_add>
 800babe:	e7fe      	b.n	800babe <lv_img_cache_set_size+0x32>
    entry_cnt = new_entry_cnt;
 800bac0:	4b0e      	ldr	r3, [pc, #56]	; (800bafc <lv_img_cache_set_size+0x70>)
    for(i = 0; i < entry_cnt; i++) {
 800bac2:	2500      	movs	r5, #0
    entry_cnt = new_entry_cnt;
 800bac4:	f8a3 8000 	strh.w	r8, [r3]
    for(i = 0; i < entry_cnt; i++) {
 800bac8:	45a8      	cmp	r8, r5
 800baca:	d101      	bne.n	800bad0 <lv_img_cache_set_size+0x44>
}
 800bacc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        memset(&LV_GC_ROOT(_lv_img_cache_array)[i].dec_dsc, 0, sizeof(lv_img_decoder_dsc_t));
 800bad0:	6820      	ldr	r0, [r4, #0]
 800bad2:	fb06 f705 	mul.w	r7, r6, r5
 800bad6:	2224      	movs	r2, #36	; 0x24
 800bad8:	2100      	movs	r1, #0
 800bada:	4438      	add	r0, r7
 800badc:	f001 fe45 	bl	800d76a <memset>
        memset(&LV_GC_ROOT(_lv_img_cache_array)[i], 0, sizeof(lv_img_cache_entry_t));
 800bae0:	6820      	ldr	r0, [r4, #0]
 800bae2:	2228      	movs	r2, #40	; 0x28
 800bae4:	2100      	movs	r1, #0
 800bae6:	4438      	add	r0, r7
 800bae8:	f001 fe3f 	bl	800d76a <memset>
 800baec:	3501      	adds	r5, #1
 800baee:	e7eb      	b.n	800bac8 <lv_img_cache_set_size+0x3c>
 800baf0:	2000d90c 	.word	0x2000d90c
 800baf4:	080107dd 	.word	0x080107dd
 800baf8:	080109cf 	.word	0x080109cf
 800bafc:	2000432c 	.word	0x2000432c

0800bb00 <lv_img_decoder_built_in_close>:

    return res;
}

static void lv_img_decoder_built_in_close(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
 800bb00:	b538      	push	{r3, r4, r5, lr}
    (void)decoder; /*Unused*/

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800bb02:	6a0c      	ldr	r4, [r1, #32]
{
 800bb04:	460d      	mov	r5, r1
    if(user_data) {
 800bb06:	b17c      	cbz	r4, 800bb28 <lv_img_decoder_built_in_close+0x28>
#if LV_USE_FILESYSTEM
        if(user_data->f) {
 800bb08:	6820      	ldr	r0, [r4, #0]
 800bb0a:	b120      	cbz	r0, 800bb16 <lv_img_decoder_built_in_close+0x16>
            lv_fs_close(user_data->f);
 800bb0c:	f000 ff56 	bl	800c9bc <lv_fs_close>
            lv_mem_free(user_data->f);
 800bb10:	6820      	ldr	r0, [r4, #0]
 800bb12:	f001 f991 	bl	800ce38 <lv_mem_free>
        }
#endif
        if(user_data->palette) lv_mem_free(user_data->palette);
 800bb16:	6860      	ldr	r0, [r4, #4]
 800bb18:	b108      	cbz	r0, 800bb1e <lv_img_decoder_built_in_close+0x1e>
 800bb1a:	f001 f98d 	bl	800ce38 <lv_mem_free>

        lv_mem_free(user_data);
 800bb1e:	4620      	mov	r0, r4
 800bb20:	f001 f98a 	bl	800ce38 <lv_mem_free>

        dsc->user_data = NULL;
 800bb24:	2300      	movs	r3, #0
 800bb26:	622b      	str	r3, [r5, #32]
 800bb28:	bd38      	pop	{r3, r4, r5, pc}
	...

0800bb2c <lv_img_decoder_built_in_open>:
{
 800bb2c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 800bb30:	7b0b      	ldrb	r3, [r1, #12]
 800bb32:	2b01      	cmp	r3, #1
{
 800bb34:	4606      	mov	r6, r0
 800bb36:	460c      	mov	r4, r1
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 800bb38:	d14d      	bne.n	800bbd6 <lv_img_decoder_built_in_open+0xaa>
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
 800bb3a:	6848      	ldr	r0, [r1, #4]
 800bb3c:	f000 ff82 	bl	800ca44 <lv_fs_get_ext>
 800bb40:	496c      	ldr	r1, [pc, #432]	; (800bcf4 <lv_img_decoder_built_in_open+0x1c8>)
 800bb42:	f7f4 fb45 	bl	80001d0 <strcmp>
 800bb46:	b960      	cbnz	r0, 800bb62 <lv_img_decoder_built_in_open+0x36>
        lv_fs_res_t res = lv_fs_open(&f, dsc->src, LV_FS_MODE_RD);
 800bb48:	2202      	movs	r2, #2
 800bb4a:	6861      	ldr	r1, [r4, #4]
 800bb4c:	4668      	mov	r0, sp
 800bb4e:	f000 feef 	bl	800c930 <lv_fs_open>
        if(res != LV_FS_RES_OK) {
 800bb52:	b140      	cbz	r0, 800bb66 <lv_img_decoder_built_in_open+0x3a>
            LV_LOG_WARN("Built-in image decoder can't open the file");
 800bb54:	4b68      	ldr	r3, [pc, #416]	; (800bcf8 <lv_img_decoder_built_in_open+0x1cc>)
 800bb56:	f44f 729b 	mov.w	r2, #310	; 0x136
        LV_LOG_WARN("Image decoder open: unknown color format")
 800bb5a:	4968      	ldr	r1, [pc, #416]	; (800bcfc <lv_img_decoder_built_in_open+0x1d0>)
 800bb5c:	2002      	movs	r0, #2
 800bb5e:	f001 f8d1 	bl	800cd04 <lv_log_add>
        return LV_RES_INV;
 800bb62:	2000      	movs	r0, #0
 800bb64:	e044      	b.n	800bbf0 <lv_img_decoder_built_in_open+0xc4>
        if(dsc->user_data == NULL) {
 800bb66:	6a23      	ldr	r3, [r4, #32]
 800bb68:	b9cb      	cbnz	r3, 800bb9e <lv_img_decoder_built_in_open+0x72>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 800bb6a:	2008      	movs	r0, #8
 800bb6c:	f001 f922 	bl	800cdb4 <lv_mem_alloc>
 800bb70:	6220      	str	r0, [r4, #32]
            if(dsc->user_data == NULL) {
 800bb72:	b980      	cbnz	r0, 800bb96 <lv_img_decoder_built_in_open+0x6a>
                LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
 800bb74:	4b62      	ldr	r3, [pc, #392]	; (800bd00 <lv_img_decoder_built_in_open+0x1d4>)
 800bb76:	4961      	ldr	r1, [pc, #388]	; (800bcfc <lv_img_decoder_built_in_open+0x1d0>)
 800bb78:	f44f 729f 	mov.w	r2, #318	; 0x13e
 800bb7c:	2003      	movs	r0, #3
 800bb7e:	f001 f8c1 	bl	800cd04 <lv_log_add>
                lv_mem_assert(dsc->user_data);
 800bb82:	6a23      	ldr	r3, [r4, #32]
 800bb84:	b93b      	cbnz	r3, 800bb96 <lv_img_decoder_built_in_open+0x6a>
 800bb86:	4b5f      	ldr	r3, [pc, #380]	; (800bd04 <lv_img_decoder_built_in_open+0x1d8>)
 800bb88:	495c      	ldr	r1, [pc, #368]	; (800bcfc <lv_img_decoder_built_in_open+0x1d0>)
 800bb8a:	f240 123f 	movw	r2, #319	; 0x13f
 800bb8e:	2003      	movs	r0, #3
 800bb90:	f001 f8b8 	bl	800cd04 <lv_log_add>
 800bb94:	e7fe      	b.n	800bb94 <lv_img_decoder_built_in_open+0x68>
            memset(dsc->user_data, 0, sizeof(lv_img_decoder_built_in_data_t));
 800bb96:	6a23      	ldr	r3, [r4, #32]
 800bb98:	2200      	movs	r2, #0
 800bb9a:	601a      	str	r2, [r3, #0]
 800bb9c:	605a      	str	r2, [r3, #4]
        user_data->f                               = lv_mem_alloc(sizeof(f));
 800bb9e:	2008      	movs	r0, #8
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800bba0:	6a25      	ldr	r5, [r4, #32]
        user_data->f                               = lv_mem_alloc(sizeof(f));
 800bba2:	f001 f907 	bl	800cdb4 <lv_mem_alloc>
 800bba6:	6028      	str	r0, [r5, #0]
        if(user_data->f == NULL) {
 800bba8:	b980      	cbnz	r0, 800bbcc <lv_img_decoder_built_in_open+0xa0>
            LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
 800bbaa:	4b55      	ldr	r3, [pc, #340]	; (800bd00 <lv_img_decoder_built_in_open+0x1d4>)
 800bbac:	4953      	ldr	r1, [pc, #332]	; (800bcfc <lv_img_decoder_built_in_open+0x1d0>)
 800bbae:	f240 1247 	movw	r2, #327	; 0x147
 800bbb2:	2003      	movs	r0, #3
 800bbb4:	f001 f8a6 	bl	800cd04 <lv_log_add>
            lv_mem_assert(user_data->f);
 800bbb8:	682b      	ldr	r3, [r5, #0]
 800bbba:	b93b      	cbnz	r3, 800bbcc <lv_img_decoder_built_in_open+0xa0>
 800bbbc:	4b51      	ldr	r3, [pc, #324]	; (800bd04 <lv_img_decoder_built_in_open+0x1d8>)
 800bbbe:	494f      	ldr	r1, [pc, #316]	; (800bcfc <lv_img_decoder_built_in_open+0x1d0>)
 800bbc0:	f44f 72a4 	mov.w	r2, #328	; 0x148
 800bbc4:	2003      	movs	r0, #3
 800bbc6:	f001 f89d 	bl	800cd04 <lv_log_add>
 800bbca:	e7fe      	b.n	800bbca <lv_img_decoder_built_in_open+0x9e>
        memcpy(user_data->f, &f, sizeof(f));
 800bbcc:	466b      	mov	r3, sp
 800bbce:	cb03      	ldmia	r3!, {r0, r1}
 800bbd0:	682a      	ldr	r2, [r5, #0]
 800bbd2:	6010      	str	r0, [r2, #0]
 800bbd4:	6051      	str	r1, [r2, #4]
    lv_img_cf_t cf = dsc->header.cf;
 800bbd6:	7c20      	ldrb	r0, [r4, #16]
 800bbd8:	f000 001f 	and.w	r0, r0, #31
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 800bbdc:	1f03      	subs	r3, r0, #4
 800bbde:	2b02      	cmp	r3, #2
 800bbe0:	d809      	bhi.n	800bbf6 <lv_img_decoder_built_in_open+0xca>
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800bbe2:	7b23      	ldrb	r3, [r4, #12]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d151      	bne.n	800bc8c <lv_img_decoder_built_in_open+0x160>
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
 800bbe8:	6863      	ldr	r3, [r4, #4]
 800bbea:	689b      	ldr	r3, [r3, #8]
            dsc->img_data = NULL;
 800bbec:	6163      	str	r3, [r4, #20]
            return LV_RES_OK;
 800bbee:	2001      	movs	r0, #1
}
 800bbf0:	b002      	add	sp, #8
 800bbf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(cf == LV_IMG_CF_INDEXED_1BIT || cf == LV_IMG_CF_INDEXED_2BIT || cf == LV_IMG_CF_INDEXED_4BIT ||
 800bbf6:	1fc3      	subs	r3, r0, #7
 800bbf8:	2b03      	cmp	r3, #3
 800bbfa:	d870      	bhi.n	800bcde <lv_img_decoder_built_in_open+0x1b2>
        uint8_t px_size       = lv_img_color_format_get_px_size(cf);
 800bbfc:	f7fd ff94 	bl	8009b28 <lv_img_color_format_get_px_size>
        if(dsc->user_data == NULL) {
 800bc00:	6a23      	ldr	r3, [r4, #32]
        uint32_t palette_size = 1 << px_size;
 800bc02:	2601      	movs	r6, #1
        uint8_t px_size       = lv_img_color_format_get_px_size(cf);
 800bc04:	4680      	mov	r8, r0
        uint32_t palette_size = 1 << px_size;
 800bc06:	4086      	lsls	r6, r0
        if(dsc->user_data == NULL) {
 800bc08:	b9cb      	cbnz	r3, 800bc3e <lv_img_decoder_built_in_open+0x112>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 800bc0a:	2008      	movs	r0, #8
 800bc0c:	f001 f8d2 	bl	800cdb4 <lv_mem_alloc>
 800bc10:	6220      	str	r0, [r4, #32]
            if(dsc->user_data == NULL) {
 800bc12:	b980      	cbnz	r0, 800bc36 <lv_img_decoder_built_in_open+0x10a>
                LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
 800bc14:	4b3a      	ldr	r3, [pc, #232]	; (800bd00 <lv_img_decoder_built_in_open+0x1d4>)
 800bc16:	4939      	ldr	r1, [pc, #228]	; (800bcfc <lv_img_decoder_built_in_open+0x1d0>)
 800bc18:	f240 126d 	movw	r2, #365	; 0x16d
 800bc1c:	2003      	movs	r0, #3
 800bc1e:	f001 f871 	bl	800cd04 <lv_log_add>
                lv_mem_assert(dsc->user_data);
 800bc22:	6a23      	ldr	r3, [r4, #32]
 800bc24:	b93b      	cbnz	r3, 800bc36 <lv_img_decoder_built_in_open+0x10a>
 800bc26:	4b37      	ldr	r3, [pc, #220]	; (800bd04 <lv_img_decoder_built_in_open+0x1d8>)
 800bc28:	4934      	ldr	r1, [pc, #208]	; (800bcfc <lv_img_decoder_built_in_open+0x1d0>)
 800bc2a:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800bc2e:	2003      	movs	r0, #3
 800bc30:	f001 f868 	bl	800cd04 <lv_log_add>
 800bc34:	e7fe      	b.n	800bc34 <lv_img_decoder_built_in_open+0x108>
            memset(dsc->user_data, 0, sizeof(lv_img_decoder_built_in_data_t));
 800bc36:	6a23      	ldr	r3, [r4, #32]
 800bc38:	2200      	movs	r2, #0
 800bc3a:	601a      	str	r2, [r3, #0]
 800bc3c:	605a      	str	r2, [r3, #4]
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 800bc3e:	2702      	movs	r7, #2
 800bc40:	fa07 f708 	lsl.w	r7, r7, r8
 800bc44:	4638      	mov	r0, r7
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800bc46:	6a25      	ldr	r5, [r4, #32]
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 800bc48:	f001 f8b4 	bl	800cdb4 <lv_mem_alloc>
 800bc4c:	6068      	str	r0, [r5, #4]
        if(user_data->palette == NULL) {
 800bc4e:	b980      	cbnz	r0, 800bc72 <lv_img_decoder_built_in_open+0x146>
            LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
 800bc50:	4b2b      	ldr	r3, [pc, #172]	; (800bd00 <lv_img_decoder_built_in_open+0x1d4>)
 800bc52:	492a      	ldr	r1, [pc, #168]	; (800bcfc <lv_img_decoder_built_in_open+0x1d0>)
 800bc54:	f44f 72bb 	mov.w	r2, #374	; 0x176
 800bc58:	2003      	movs	r0, #3
 800bc5a:	f001 f853 	bl	800cd04 <lv_log_add>
            lv_mem_assert(user_data->f);
 800bc5e:	682b      	ldr	r3, [r5, #0]
 800bc60:	b93b      	cbnz	r3, 800bc72 <lv_img_decoder_built_in_open+0x146>
 800bc62:	4b28      	ldr	r3, [pc, #160]	; (800bd04 <lv_img_decoder_built_in_open+0x1d8>)
 800bc64:	4925      	ldr	r1, [pc, #148]	; (800bcfc <lv_img_decoder_built_in_open+0x1d0>)
 800bc66:	f44f 72bc 	mov.w	r2, #376	; 0x178
 800bc6a:	2003      	movs	r0, #3
 800bc6c:	f001 f84a 	bl	800cd04 <lv_log_add>
 800bc70:	e7fe      	b.n	800bc70 <lv_img_decoder_built_in_open+0x144>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 800bc72:	7b23      	ldrb	r3, [r4, #12]
 800bc74:	2b01      	cmp	r3, #1
 800bc76:	d10b      	bne.n	800bc90 <lv_img_decoder_built_in_open+0x164>
            lv_fs_seek(user_data->f, 4); /*Skip the header*/
 800bc78:	2104      	movs	r1, #4
 800bc7a:	6828      	ldr	r0, [r5, #0]
 800bc7c:	f000 fed0 	bl	800ca20 <lv_fs_seek>
            lv_fs_read(user_data->f, user_data->palette, palette_size * sizeof(lv_color_t), NULL);
 800bc80:	2300      	movs	r3, #0
 800bc82:	463a      	mov	r2, r7
 800bc84:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bc88:	f000 fead 	bl	800c9e6 <lv_fs_read>
            dsc->img_data = NULL;
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	e7ad      	b.n	800bbec <lv_img_decoder_built_in_open+0xc0>
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
 800bc90:	6863      	ldr	r3, [r4, #4]
 800bc92:	6899      	ldr	r1, [r3, #8]
            for(i = 0; i < palette_size; i++) {
 800bc94:	2300      	movs	r3, #0
 800bc96:	42b3      	cmp	r3, r6
 800bc98:	f101 0104 	add.w	r1, r1, #4
 800bc9c:	d0f6      	beq.n	800bc8c <lv_img_decoder_built_in_open+0x160>
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
 800bc9e:	6868      	ldr	r0, [r5, #4]
#if LV_COLOR_16_SWAP == 0
#define LV_COLOR_MAKE(r8, g8, b8) ((lv_color_t){{b8 >> 3, g8 >> 2, r8 >> 3}})
static inline lv_color_t lv_color_make(uint8_t r8, uint8_t g8, uint8_t b8)
{
    lv_color_t color;
    color.ch.blue  = (uint16_t)(b8 >> 3);
 800bca0:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 800bca4:	f810 8013 	ldrb.w	r8, [r0, r3, lsl #1]
    color.ch.green = (uint16_t)(g8 >> 2);
 800bca8:	f811 ec03 	ldrb.w	lr, [r1, #-3]
    color.ch.red   = (uint16_t)(r8 >> 3);
 800bcac:	f811 7c02 	ldrb.w	r7, [r1, #-2]
    color.ch.blue  = (uint16_t)(b8 >> 3);
 800bcb0:	08d2      	lsrs	r2, r2, #3
 800bcb2:	f362 0804 	bfi	r8, r2, #0, #5
 800bcb6:	f800 8013 	strb.w	r8, [r0, r3, lsl #1]
 800bcba:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
    color.ch.green = (uint16_t)(g8 >> 2);
 800bcbe:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
 800bcc2:	f36e 124a 	bfi	r2, lr, #5, #6
 800bcc6:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 800bcca:	eb00 0c43 	add.w	ip, r0, r3, lsl #1
    color.ch.red   = (uint16_t)(r8 >> 3);
 800bcce:	08ff      	lsrs	r7, r7, #3
 800bcd0:	0a12      	lsrs	r2, r2, #8
 800bcd2:	f367 02c7 	bfi	r2, r7, #3, #5
 800bcd6:	f88c 2001 	strb.w	r2, [ip, #1]
            for(i = 0; i < palette_size; i++) {
 800bcda:	3301      	adds	r3, #1
 800bcdc:	e7db      	b.n	800bc96 <lv_img_decoder_built_in_open+0x16a>
    else if(cf == LV_IMG_CF_ALPHA_1BIT || cf == LV_IMG_CF_ALPHA_2BIT || cf == LV_IMG_CF_ALPHA_4BIT ||
 800bcde:	380b      	subs	r0, #11
 800bce0:	2803      	cmp	r0, #3
 800bce2:	d9d3      	bls.n	800bc8c <lv_img_decoder_built_in_open+0x160>
        lv_img_decoder_built_in_close(decoder, dsc);
 800bce4:	4621      	mov	r1, r4
 800bce6:	4630      	mov	r0, r6
 800bce8:	f7ff ff0a 	bl	800bb00 <lv_img_decoder_built_in_close>
        LV_LOG_WARN("Image decoder open: unknown color format")
 800bcec:	4b06      	ldr	r3, [pc, #24]	; (800bd08 <lv_img_decoder_built_in_open+0x1dc>)
 800bcee:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
 800bcf2:	e732      	b.n	800bb5a <lv_img_decoder_built_in_open+0x2e>
 800bcf4:	08010a42 	.word	0x08010a42
 800bcf8:	08010a46 	.word	0x08010a46
 800bcfc:	08010a71 	.word	0x08010a71
 800bd00:	08010a96 	.word	0x08010a96
 800bd04:	080107dd 	.word	0x080107dd
 800bd08:	08010abf 	.word	0x08010abf

0800bd0c <lv_img_decoder_built_in_read_line>:
{
 800bd0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800bd10:	7c08      	ldrb	r0, [r1, #16]
{
 800bd12:	469b      	mov	fp, r3
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800bd14:	f000 031f 	and.w	r3, r0, #31
{
 800bd18:	b0b1      	sub	sp, #196	; 0xc4
 800bd1a:	4614      	mov	r4, r2
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800bd1c:	1f1a      	subs	r2, r3, #4
 800bd1e:	2a02      	cmp	r2, #2
{
 800bd20:	460d      	mov	r5, r1
 800bd22:	f9bd 80e8 	ldrsh.w	r8, [sp, #232]	; 0xe8
 800bd26:	f8dd 90ec 	ldr.w	r9, [sp, #236]	; 0xec
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800bd2a:	d82f      	bhi.n	800bd8c <lv_img_decoder_built_in_read_line+0x80>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 800bd2c:	7b0e      	ldrb	r6, [r1, #12]
 800bd2e:	2e01      	cmp	r6, #1
 800bd30:	d117      	bne.n	800bd62 <lv_img_decoder_built_in_read_line+0x56>
                                                        lv_coord_t len, uint8_t * buf)
{
#if LV_USE_FILESYSTEM
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
    lv_fs_res_t res;
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 800bd32:	4618      	mov	r0, r3
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800bd34:	6a0f      	ldr	r7, [r1, #32]
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 800bd36:	f7fd fef7 	bl	8009b28 <lv_img_color_format_get_px_size>

    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 800bd3a:	6929      	ldr	r1, [r5, #16]
 800bd3c:	f3c1 218a 	ubfx	r1, r1, #10, #11
 800bd40:	fb1b 4101 	smlabb	r1, fp, r1, r4
 800bd44:	4341      	muls	r1, r0
 800bd46:	10c9      	asrs	r1, r1, #3
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 800bd48:	4682      	mov	sl, r0
    pos += 4; /*Skip the header*/
    res = lv_fs_seek(user_data->f, pos);
 800bd4a:	3104      	adds	r1, #4
 800bd4c:	6838      	ldr	r0, [r7, #0]
 800bd4e:	f000 fe67 	bl	800ca20 <lv_fs_seek>
    if(res != LV_FS_RES_OK) {
 800bd52:	b140      	cbz	r0, 800bd66 <lv_img_decoder_built_in_read_line+0x5a>
        LV_LOG_WARN("Built-in image decoder seek failed");
 800bd54:	4bb9      	ldr	r3, [pc, #740]	; (800c03c <lv_img_decoder_built_in_read_line+0x330>)
 800bd56:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
        LV_LOG_WARN("Built-in image decoder read not supports the color format");
 800bd5a:	49b9      	ldr	r1, [pc, #740]	; (800c040 <lv_img_decoder_built_in_read_line+0x334>)
 800bd5c:	2002      	movs	r0, #2
 800bd5e:	f000 ffd1 	bl	800cd04 <lv_log_add>
    lv_res_t res = LV_RES_INV;
 800bd62:	2000      	movs	r0, #0
 800bd64:	e076      	b.n	800be54 <lv_img_decoder_built_in_read_line+0x148>
        return LV_RES_INV;
    }
    uint32_t btr = len * (px_size >> 3);
    uint32_t br  = 0;
 800bd66:	ab30      	add	r3, sp, #192	; 0xc0
    uint32_t btr = len * (px_size >> 3);
 800bd68:	f3ca 0ac7 	ubfx	sl, sl, #3, #8
 800bd6c:	fb1a f808 	smulbb	r8, sl, r8
    uint32_t br  = 0;
 800bd70:	f843 0da0 	str.w	r0, [r3, #-160]!
    lv_fs_read(user_data->f, buf, btr, &br);
 800bd74:	4642      	mov	r2, r8
 800bd76:	4649      	mov	r1, r9
 800bd78:	6838      	ldr	r0, [r7, #0]
 800bd7a:	f000 fe34 	bl	800c9e6 <lv_fs_read>
    if(res != LV_FS_RES_OK || btr != br) {
 800bd7e:	9b08      	ldr	r3, [sp, #32]
 800bd80:	4598      	cmp	r8, r3
 800bd82:	d066      	beq.n	800be52 <lv_img_decoder_built_in_read_line+0x146>
        LV_LOG_WARN("Built-in image decoder read failed");
 800bd84:	4baf      	ldr	r3, [pc, #700]	; (800c044 <lv_img_decoder_built_in_read_line+0x338>)
 800bd86:	f240 12ef 	movw	r2, #495	; 0x1ef
 800bd8a:	e7e6      	b.n	800bd5a <lv_img_decoder_built_in_read_line+0x4e>
    } else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 800bd8c:	f1a3 020b 	sub.w	r2, r3, #11
 800bd90:	2a03      	cmp	r2, #3
 800bd92:	f200 80c2 	bhi.w	800bf1a <lv_img_decoder_built_in_read_line+0x20e>
static lv_res_t lv_img_decoder_built_in_line_alpha(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                   lv_coord_t len, uint8_t * buf)
{

#if LV_IMG_CF_ALPHA
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 800bd96:	2200      	movs	r2, #0
 800bd98:	23ff      	movs	r3, #255	; 0xff
 800bd9a:	f88d 2008 	strb.w	r2, [sp, #8]
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 800bd9e:	f88d 200c 	strb.w	r2, [sp, #12]
 800bda2:	2255      	movs	r2, #85	; 0x55
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 800bda4:	f88d 3009 	strb.w	r3, [sp, #9]
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 800bda8:	f88d 200d 	strb.w	r2, [sp, #13]
 800bdac:	f88d 300f 	strb.w	r3, [sp, #15]
 800bdb0:	22aa      	movs	r2, #170	; 0xaa
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 800bdb2:	4ba5      	ldr	r3, [pc, #660]	; (800c048 <lv_img_decoder_built_in_read_line+0x33c>)
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 800bdb4:	f88d 200e 	strb.w	r2, [sp, #14]
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 800bdb8:	aa04      	add	r2, sp, #16
 800bdba:	f103 0e10 	add.w	lr, r3, #16
 800bdbe:	4617      	mov	r7, r2
 800bdc0:	6818      	ldr	r0, [r3, #0]
 800bdc2:	6859      	ldr	r1, [r3, #4]
 800bdc4:	4616      	mov	r6, r2
 800bdc6:	c603      	stmia	r6!, {r0, r1}
 800bdc8:	3308      	adds	r3, #8
 800bdca:	4573      	cmp	r3, lr
 800bdcc:	4632      	mov	r2, r6
 800bdce:	d1f7      	bne.n	800bdc0 <lv_img_decoder_built_in_read_line+0xb4>
                                           68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255};

    /*Simply fill the buffer with the color. Later only the alpha value will be modified.*/
    lv_color_t bg_color = dsc->style->image.color;
 800bdd0:	68ab      	ldr	r3, [r5, #8]
 800bdd2:	8e19      	ldrh	r1, [r3, #48]	; 0x30
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full;
#elif LV_COLOR_DEPTH == 16
        /*Because of Alpha byte 16 bit color can start on odd address which can cause crash*/
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	0a0e      	lsrs	r6, r1, #8
 800bdd8:	464b      	mov	r3, r9
    for(i = 0; i < len; i++) {
 800bdda:	b210      	sxth	r0, r2
 800bddc:	4580      	cmp	r8, r0
 800bdde:	f103 0303 	add.w	r3, r3, #3
 800bde2:	dc13      	bgt.n	800be0c <lv_img_decoder_built_in_read_line+0x100>
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
    }

    const lv_opa_t * opa_table = NULL;
    uint8_t px_size            = lv_img_color_format_get_px_size(dsc->header.cf);
 800bde4:	7c28      	ldrb	r0, [r5, #16]
 800bde6:	f000 001f 	and.w	r0, r0, #31
 800bdea:	f7fd fe9d 	bl	8009b28 <lv_img_color_format_get_px_size>
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/

    lv_coord_t w = 0;
    uint32_t ofs = 0;
    int8_t pos   = 0;
    switch(dsc->header.cf) {
 800bdee:	7c2b      	ldrb	r3, [r5, #16]
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 800bdf0:	2601      	movs	r6, #1
 800bdf2:	4086      	lsls	r6, r0
    switch(dsc->header.cf) {
 800bdf4:	f003 031f 	and.w	r3, r3, #31
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 800bdf8:	3e01      	subs	r6, #1
    switch(dsc->header.cf) {
 800bdfa:	3b0b      	subs	r3, #11
    uint8_t px_size            = lv_img_color_format_get_px_size(dsc->header.cf);
 800bdfc:	4682      	mov	sl, r0
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 800bdfe:	b2b6      	uxth	r6, r6
    switch(dsc->header.cf) {
 800be00:	2b03      	cmp	r3, #3
 800be02:	d858      	bhi.n	800beb6 <lv_img_decoder_built_in_read_line+0x1aa>
 800be04:	e8df f003 	tbb	[pc, r3]
 800be08:	4e3c2908 	.word	0x4e3c2908
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
 800be0c:	f803 1c03 	strb.w	r1, [r3, #-3]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
 800be10:	f803 6c02 	strb.w	r6, [r3, #-2]
 800be14:	3201      	adds	r2, #1
 800be16:	e7e0      	b.n	800bdda <lv_img_decoder_built_in_read_line+0xce>
        case LV_IMG_CF_ALPHA_1BIT:
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 800be18:	692b      	ldr	r3, [r5, #16]
 800be1a:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800be1e:	10da      	asrs	r2, r3, #3
            if(dsc->header.w & 0x7) w++;
 800be20:	075b      	lsls	r3, r3, #29
            ofs += w * y + (x >> 3); /*First pixel*/
 800be22:	ea4f 01e4 	mov.w	r1, r4, asr #3
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 800be26:	bf0c      	ite	eq
 800be28:	b212      	sxtheq	r2, r2
            if(dsc->header.w & 0x7) w++;
 800be2a:	3201      	addne	r2, #1
            pos       = 7 - (x & 0x7);
 800be2c:	43e4      	mvns	r4, r4
            ofs += w * y + (x >> 3); /*First pixel*/
 800be2e:	fb02 110b 	mla	r1, r2, fp, r1
            pos       = 7 - (x & 0x7);
 800be32:	f004 0407 	and.w	r4, r4, #7
            opa_table = alpha1_opa_table;
 800be36:	af02      	add	r7, sp, #8
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
    uint8_t fs_buf[LV_HOR_RES_MAX];
#endif

    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800be38:	7b2b      	ldrb	r3, [r5, #12]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d13f      	bne.n	800bebe <lv_img_decoder_built_in_read_line+0x1b2>
        const lv_img_dsc_t * img_dsc = dsc->src;

        data_tmp = img_dsc->data + ofs;
 800be3e:	686b      	ldr	r3, [r5, #4]
 800be40:	689b      	ldr	r3, [r3, #8]
 800be42:	4419      	add	r1, r3
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];

        pos -= px_size;
        if(pos < 0) {
            pos = 8 - px_size;
 800be44:	f1ca 0008 	rsb	r0, sl, #8
        data_tmp = fs_buf;
 800be48:	2300      	movs	r3, #0
            pos = 8 - px_size;
 800be4a:	b240      	sxtb	r0, r0
    for(i = 0; i < len; i++) {
 800be4c:	b21a      	sxth	r2, r3
 800be4e:	4590      	cmp	r8, r2
 800be50:	dc46      	bgt.n	800bee0 <lv_img_decoder_built_in_read_line+0x1d4>
        res = lv_img_decoder_built_in_line_indexed(dsc, x, y, len, buf);
 800be52:	2001      	movs	r0, #1
}
 800be54:	b031      	add	sp, #196	; 0xc4
 800be56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800be5a:	692b      	ldr	r3, [r5, #16]
 800be5c:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800be60:	109a      	asrs	r2, r3, #2
            if(dsc->header.w & 0x3) w++;
 800be62:	079f      	lsls	r7, r3, #30
            ofs += w * y + (x >> 2); /*First pixel*/
 800be64:	ea4f 01a4 	mov.w	r1, r4, asr #2
            pos       = 6 - ((x & 0x3) * 2);
 800be68:	ea6f 0404 	mvn.w	r4, r4
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800be6c:	bf0c      	ite	eq
 800be6e:	b212      	sxtheq	r2, r2
            if(dsc->header.w & 0x3) w++;
 800be70:	3201      	addne	r2, #1
            pos       = 6 - ((x & 0x3) * 2);
 800be72:	f004 0403 	and.w	r4, r4, #3
            ofs += w * y + (x >> 2); /*First pixel*/
 800be76:	fb02 110b 	mla	r1, r2, fp, r1
            pos       = 6 - ((x & 0x3) * 2);
 800be7a:	0064      	lsls	r4, r4, #1
            opa_table = alpha2_opa_table;
 800be7c:	af03      	add	r7, sp, #12
 800be7e:	e7db      	b.n	800be38 <lv_img_decoder_built_in_read_line+0x12c>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800be80:	692b      	ldr	r3, [r5, #16]
 800be82:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800be86:	105a      	asrs	r2, r3, #1
            if(dsc->header.w & 0x1) w++;
 800be88:	07d8      	lsls	r0, r3, #31
            ofs += w * y + (x >> 1); /*First pixel*/
 800be8a:	ea4f 0164 	mov.w	r1, r4, asr #1
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800be8e:	bf54      	ite	pl
 800be90:	b212      	sxthpl	r2, r2
            if(dsc->header.w & 0x1) w++;
 800be92:	3201      	addmi	r2, #1
            pos       = 4 - ((x & 0x1) * 4);
 800be94:	f014 0f01 	tst.w	r4, #1
            ofs += w * y + (x >> 1); /*First pixel*/
 800be98:	fb02 110b 	mla	r1, r2, fp, r1
            pos       = 4 - ((x & 0x1) * 4);
 800be9c:	bf0c      	ite	eq
 800be9e:	2404      	moveq	r4, #4
 800bea0:	2400      	movne	r4, #0
 800bea2:	e7c9      	b.n	800be38 <lv_img_decoder_built_in_read_line+0x12c>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 800bea4:	6929      	ldr	r1, [r5, #16]
 800bea6:	f3c1 218a 	ubfx	r1, r1, #10, #11
 800beaa:	b20a      	sxth	r2, r1
            ofs += w * y + x;  /*First pixel*/
 800beac:	fb1b 4101 	smlabb	r1, fp, r1, r4
            pos = 0;
 800beb0:	2400      	movs	r4, #0
    const lv_opa_t * opa_table = NULL;
 800beb2:	4627      	mov	r7, r4
 800beb4:	e7c0      	b.n	800be38 <lv_img_decoder_built_in_read_line+0x12c>
    int8_t pos   = 0;
 800beb6:	2400      	movs	r4, #0
    uint32_t ofs = 0;
 800beb8:	4621      	mov	r1, r4
    lv_coord_t w = 0;
 800beba:	4622      	mov	r2, r4
 800bebc:	e7f9      	b.n	800beb2 <lv_img_decoder_built_in_read_line+0x1a6>
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800bebe:	f8d5 b020 	ldr.w	fp, [r5, #32]
 800bec2:	9201      	str	r2, [sp, #4]
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
 800bec4:	3104      	adds	r1, #4
 800bec6:	f8db 0000 	ldr.w	r0, [fp]
 800beca:	f000 fda9 	bl	800ca20 <lv_fs_seek>
        lv_fs_read(user_data->f, fs_buf, w, NULL);
 800bece:	a908      	add	r1, sp, #32
 800bed0:	2300      	movs	r3, #0
 800bed2:	9a01      	ldr	r2, [sp, #4]
 800bed4:	f8db 0000 	ldr.w	r0, [fp]
 800bed8:	f000 fd85 	bl	800c9e6 <lv_fs_read>
        data_tmp = fs_buf;
 800bedc:	a908      	add	r1, sp, #32
 800bede:	e7b1      	b.n	800be44 <lv_img_decoder_built_in_read_line+0x138>
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
 800bee0:	780a      	ldrb	r2, [r1, #0]
 800bee2:	fa06 fe04 	lsl.w	lr, r6, r4
 800bee6:	ea02 020e 	and.w	r2, r2, lr
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 800beea:	f895 e010 	ldrb.w	lr, [r5, #16]
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
 800beee:	4122      	asrs	r2, r4
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 800bef0:	f00e 0e1f 	and.w	lr, lr, #31
 800bef4:	f1be 0f0e 	cmp.w	lr, #14
 800bef8:	b2d2      	uxtb	r2, r2
 800befa:	eb03 0e43 	add.w	lr, r3, r3, lsl #1
        pos -= px_size;
 800befe:	eba4 040a 	sub.w	r4, r4, sl
 800bf02:	b264      	sxtb	r4, r4
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 800bf04:	44ce      	add	lr, r9
 800bf06:	bf18      	it	ne
 800bf08:	5cba      	ldrbne	r2, [r7, r2]
 800bf0a:	f88e 2002 	strb.w	r2, [lr, #2]
        if(pos < 0) {
 800bf0e:	2c00      	cmp	r4, #0
            pos = 8 - px_size;
 800bf10:	bfbc      	itt	lt
 800bf12:	4604      	movlt	r4, r0
            data_tmp++;
 800bf14:	3101      	addlt	r1, #1
 800bf16:	3301      	adds	r3, #1
 800bf18:	e798      	b.n	800be4c <lv_img_decoder_built_in_read_line+0x140>
    } else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
 800bf1a:	3b07      	subs	r3, #7
 800bf1c:	2b03      	cmp	r3, #3
 800bf1e:	f200 8095 	bhi.w	800c04c <lv_img_decoder_built_in_read_line+0x340>
static lv_res_t lv_img_decoder_built_in_line_indexed(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                     lv_coord_t len, uint8_t * buf)
{

#if LV_IMG_CF_INDEXED
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 800bf22:	f000 001f 	and.w	r0, r0, #31
 800bf26:	f7fd fdff 	bl	8009b28 <lv_img_color_format_get_px_size>
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/

    lv_coord_t w = 0;
    int8_t pos   = 0;
    uint32_t ofs = 0;
    switch(dsc->header.cf) {
 800bf2a:	7c2b      	ldrb	r3, [r5, #16]
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 800bf2c:	2701      	movs	r7, #1
 800bf2e:	4087      	lsls	r7, r0
    switch(dsc->header.cf) {
 800bf30:	f003 031f 	and.w	r3, r3, #31
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 800bf34:	3f01      	subs	r7, #1
    switch(dsc->header.cf) {
 800bf36:	3b07      	subs	r3, #7
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 800bf38:	4682      	mov	sl, r0
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 800bf3a:	b2bf      	uxth	r7, r7
    switch(dsc->header.cf) {
 800bf3c:	2b03      	cmp	r3, #3
 800bf3e:	d86b      	bhi.n	800c018 <lv_img_decoder_built_in_read_line+0x30c>
 800bf40:	e8df f003 	tbb	[pc, r3]
 800bf44:	604c3902 	.word	0x604c3902
        case LV_IMG_CF_INDEXED_1BIT:
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 800bf48:	692b      	ldr	r3, [r5, #16]
 800bf4a:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800bf4e:	10de      	asrs	r6, r3, #3
            if(dsc->header.w & 0x7) w++;
 800bf50:	0759      	lsls	r1, r3, #29
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 800bf52:	bf08      	it	eq
 800bf54:	b236      	sxtheq	r6, r6
            ofs += w * y + (x >> 3); /*First pixel*/
 800bf56:	ea4f 01e4 	mov.w	r1, r4, asr #3
            if(dsc->header.w & 0x7) w++;
 800bf5a:	bf18      	it	ne
 800bf5c:	3601      	addne	r6, #1
            ofs += w * y + (x >> 3); /*First pixel*/
 800bf5e:	fb06 1b0b 	mla	fp, r6, fp, r1
            ofs += 8;                /*Skip the palette*/
            pos = 7 - (x & 0x7);
 800bf62:	43e4      	mvns	r4, r4
            ofs += 8;                /*Skip the palette*/
 800bf64:	f10b 0108 	add.w	r1, fp, #8
            pos = 7 - (x & 0x7);
 800bf68:	f004 0407 	and.w	r4, r4, #7

#if LV_USE_FILESYSTEM
    uint8_t fs_buf[LV_HOR_RES_MAX];
#endif
    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800bf6c:	7b2b      	ldrb	r3, [r5, #12]
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800bf6e:	f8d5 b020 	ldr.w	fp, [r5, #32]
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d154      	bne.n	800c020 <lv_img_decoder_built_in_read_line+0x314>
        const lv_img_dsc_t * img_dsc = dsc->src;
        data_tmp                     = img_dsc->data + ofs;
 800bf76:	686b      	ldr	r3, [r5, #4]
 800bf78:	689b      	ldr	r3, [r3, #8]
 800bf7a:	4419      	add	r1, r3
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
        cbuf[i] = user_data->palette[val_act];

        pos -= px_size;
        if(pos < 0) {
            pos = 8 - px_size;
 800bf7c:	f1ca 0508 	rsb	r5, sl, #8
        data_tmp = fs_buf;
 800bf80:	2300      	movs	r3, #0
            pos = 8 - px_size;
 800bf82:	b26d      	sxtb	r5, r5
    for(i = 0; i < len; i++) {
 800bf84:	b21a      	sxth	r2, r3
 800bf86:	4590      	cmp	r8, r2
 800bf88:	f77f af63 	ble.w	800be52 <lv_img_decoder_built_in_read_line+0x146>
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
 800bf8c:	7808      	ldrb	r0, [r1, #0]
 800bf8e:	fa07 f204 	lsl.w	r2, r7, r4
 800bf92:	4010      	ands	r0, r2
 800bf94:	4120      	asrs	r0, r4
        cbuf[i] = user_data->palette[val_act];
 800bf96:	f8db 2004 	ldr.w	r2, [fp, #4]
 800bf9a:	b2c0      	uxtb	r0, r0
        pos -= px_size;
 800bf9c:	eba4 040a 	sub.w	r4, r4, sl
 800bfa0:	b264      	sxtb	r4, r4
        if(pos < 0) {
 800bfa2:	2c00      	cmp	r4, #0
        cbuf[i] = user_data->palette[val_act];
 800bfa4:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 800bfa8:	f829 2013 	strh.w	r2, [r9, r3, lsl #1]
            pos = 8 - px_size;
 800bfac:	bfbc      	itt	lt
 800bfae:	462c      	movlt	r4, r5
            data_tmp++;
 800bfb0:	3101      	addlt	r1, #1
 800bfb2:	3301      	adds	r3, #1
 800bfb4:	e7e6      	b.n	800bf84 <lv_img_decoder_built_in_read_line+0x278>
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800bfb6:	692b      	ldr	r3, [r5, #16]
 800bfb8:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800bfbc:	109e      	asrs	r6, r3, #2
            if(dsc->header.w & 0x3) w++;
 800bfbe:	079a      	lsls	r2, r3, #30
            ofs += w * y + (x >> 2); /*First pixel*/
 800bfc0:	ea4f 01a4 	mov.w	r1, r4, asr #2
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800bfc4:	bf0c      	ite	eq
 800bfc6:	b236      	sxtheq	r6, r6
            if(dsc->header.w & 0x3) w++;
 800bfc8:	3601      	addne	r6, #1
            pos = 6 - ((x & 0x3) * 2);
 800bfca:	43e4      	mvns	r4, r4
            ofs += w * y + (x >> 2); /*First pixel*/
 800bfcc:	fb06 1b0b 	mla	fp, r6, fp, r1
            pos = 6 - ((x & 0x3) * 2);
 800bfd0:	f004 0403 	and.w	r4, r4, #3
            ofs += 16;               /*Skip the palette*/
 800bfd4:	f10b 0110 	add.w	r1, fp, #16
            pos = 6 - ((x & 0x3) * 2);
 800bfd8:	0064      	lsls	r4, r4, #1
 800bfda:	e7c7      	b.n	800bf6c <lv_img_decoder_built_in_read_line+0x260>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800bfdc:	692b      	ldr	r3, [r5, #16]
 800bfde:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800bfe2:	105e      	asrs	r6, r3, #1
            if(dsc->header.w & 0x1) w++;
 800bfe4:	07db      	lsls	r3, r3, #31
            ofs += w * y + (x >> 1); /*First pixel*/
 800bfe6:	ea4f 0164 	mov.w	r1, r4, asr #1
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800bfea:	bf54      	ite	pl
 800bfec:	b236      	sxthpl	r6, r6
            if(dsc->header.w & 0x1) w++;
 800bfee:	3601      	addmi	r6, #1
            ofs += w * y + (x >> 1); /*First pixel*/
 800bff0:	fb06 1b0b 	mla	fp, r6, fp, r1
            pos = 4 - ((x & 0x1) * 4);
 800bff4:	f014 0f01 	tst.w	r4, #1
            ofs += 64;               /*Skip the palette*/
 800bff8:	f10b 0140 	add.w	r1, fp, #64	; 0x40
            pos = 4 - ((x & 0x1) * 4);
 800bffc:	bf0c      	ite	eq
 800bffe:	2404      	moveq	r4, #4
 800c000:	2400      	movne	r4, #0
 800c002:	e7b3      	b.n	800bf6c <lv_img_decoder_built_in_read_line+0x260>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 800c004:	6929      	ldr	r1, [r5, #16]
 800c006:	f3c1 218a 	ubfx	r1, r1, #10, #11
            ofs += w * y + x;  /*First pixel*/
 800c00a:	fb1b 4401 	smlabb	r4, fp, r1, r4
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 800c00e:	b20e      	sxth	r6, r1
            ofs += 1024;       /*Skip the palette*/
 800c010:	f504 6180 	add.w	r1, r4, #1024	; 0x400
            pos = 0;
 800c014:	2400      	movs	r4, #0
 800c016:	e7a9      	b.n	800bf6c <lv_img_decoder_built_in_read_line+0x260>
    uint32_t ofs = 0;
 800c018:	2100      	movs	r1, #0
    int8_t pos   = 0;
 800c01a:	460c      	mov	r4, r1
    lv_coord_t w = 0;
 800c01c:	460e      	mov	r6, r1
 800c01e:	e7a5      	b.n	800bf6c <lv_img_decoder_built_in_read_line+0x260>
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
 800c020:	3104      	adds	r1, #4
 800c022:	f8db 0000 	ldr.w	r0, [fp]
 800c026:	f000 fcfb 	bl	800ca20 <lv_fs_seek>
        lv_fs_read(user_data->f, fs_buf, w, NULL);
 800c02a:	a908      	add	r1, sp, #32
 800c02c:	2300      	movs	r3, #0
 800c02e:	4632      	mov	r2, r6
 800c030:	f8db 0000 	ldr.w	r0, [fp]
 800c034:	f000 fcd7 	bl	800c9e6 <lv_fs_read>
        data_tmp = fs_buf;
 800c038:	a908      	add	r1, sp, #32
 800c03a:	e79f      	b.n	800bf7c <lv_img_decoder_built_in_read_line+0x270>
 800c03c:	08010ae8 	.word	0x08010ae8
 800c040:	08010a71 	.word	0x08010a71
 800c044:	08010b0b 	.word	0x08010b0b
 800c048:	08010136 	.word	0x08010136
        LV_LOG_WARN("Built-in image decoder read not supports the color format");
 800c04c:	4b01      	ldr	r3, [pc, #4]	; (800c054 <lv_img_decoder_built_in_read_line+0x348>)
 800c04e:	f240 12c1 	movw	r2, #449	; 0x1c1
 800c052:	e682      	b.n	800bd5a <lv_img_decoder_built_in_read_line+0x4e>
 800c054:	08010b2e 	.word	0x08010b2e

0800c058 <lv_img_decoder_built_in_info>:
{
 800c058:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    lv_img_src_t src_type = lv_img_src_get_type(src);
 800c05a:	4608      	mov	r0, r1
{
 800c05c:	460e      	mov	r6, r1
 800c05e:	4614      	mov	r4, r2
    lv_img_src_t src_type = lv_img_src_get_type(src);
 800c060:	f7fd fd6c 	bl	8009b3c <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 800c064:	b9a8      	cbnz	r0, 800c092 <lv_img_decoder_built_in_info+0x3a>
        header->w  = ((lv_img_dsc_t *)src)->header.w;
 800c066:	6833      	ldr	r3, [r6, #0]
 800c068:	6822      	ldr	r2, [r4, #0]
 800c06a:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800c06e:	f363 2294 	bfi	r2, r3, #10, #11
 800c072:	6022      	str	r2, [r4, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 800c074:	8873      	ldrh	r3, [r6, #2]
 800c076:	8862      	ldrh	r2, [r4, #2]
 800c078:	f3c3 134a 	ubfx	r3, r3, #5, #11
 800c07c:	f363 124f 	bfi	r2, r3, #5, #11
 800c080:	8062      	strh	r2, [r4, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 800c082:	7832      	ldrb	r2, [r6, #0]
 800c084:	7823      	ldrb	r3, [r4, #0]
 800c086:	f362 0304 	bfi	r3, r2, #0, #5
 800c08a:	7023      	strb	r3, [r4, #0]
    return LV_RES_OK;
 800c08c:	2001      	movs	r0, #1
}
 800c08e:	b004      	add	sp, #16
 800c090:	bd70      	pop	{r4, r5, r6, pc}
    else if(src_type == LV_IMG_SRC_FILE) {
 800c092:	2801      	cmp	r0, #1
 800c094:	d123      	bne.n	800c0de <lv_img_decoder_built_in_info+0x86>
        res = lv_fs_open(&file, src, LV_FS_MODE_RD);
 800c096:	2202      	movs	r2, #2
 800c098:	4631      	mov	r1, r6
 800c09a:	a802      	add	r0, sp, #8
 800c09c:	f000 fc48 	bl	800c930 <lv_fs_open>
        if(res == LV_FS_RES_OK) {
 800c0a0:	b168      	cbz	r0, 800c0be <lv_img_decoder_built_in_info+0x66>
            header->w  = LV_DPI;
 800c0a2:	6823      	ldr	r3, [r4, #0]
 800c0a4:	2119      	movs	r1, #25
 800c0a6:	f361 2394 	bfi	r3, r1, #10, #11
            header->h  = LV_DPI;
 800c0aa:	0c1a      	lsrs	r2, r3, #16
            header->w  = LV_DPI;
 800c0ac:	6023      	str	r3, [r4, #0]
            header->h  = LV_DPI;
 800c0ae:	f361 124f 	bfi	r2, r1, #5, #11
            header->cf = LV_IMG_CF_UNKNOWN;
 800c0b2:	f36f 0304 	bfc	r3, #0, #5
            header->h  = LV_DPI;
 800c0b6:	8062      	strh	r2, [r4, #2]
            header->cf = LV_IMG_CF_UNKNOWN;
 800c0b8:	7023      	strb	r3, [r4, #0]
        return LV_RES_INV;
 800c0ba:	2000      	movs	r0, #0
 800c0bc:	e7e7      	b.n	800c08e <lv_img_decoder_built_in_info+0x36>
            res = lv_fs_read(&file, header, sizeof(lv_img_header_t), &rn);
 800c0be:	ab01      	add	r3, sp, #4
 800c0c0:	2204      	movs	r2, #4
 800c0c2:	4621      	mov	r1, r4
 800c0c4:	a802      	add	r0, sp, #8
 800c0c6:	f000 fc8e 	bl	800c9e6 <lv_fs_read>
 800c0ca:	4606      	mov	r6, r0
            lv_fs_close(&file);
 800c0cc:	a802      	add	r0, sp, #8
 800c0ce:	f000 fc75 	bl	800c9bc <lv_fs_close>
        if(res != LV_FS_RES_OK || rn != sizeof(lv_img_header_t)) {
 800c0d2:	2e00      	cmp	r6, #0
 800c0d4:	d1e5      	bne.n	800c0a2 <lv_img_decoder_built_in_info+0x4a>
 800c0d6:	9b01      	ldr	r3, [sp, #4]
 800c0d8:	2b04      	cmp	r3, #4
 800c0da:	d1e2      	bne.n	800c0a2 <lv_img_decoder_built_in_info+0x4a>
 800c0dc:	e7d6      	b.n	800c08c <lv_img_decoder_built_in_info+0x34>
    else if(src_type == LV_IMG_SRC_SYMBOL) {
 800c0de:	2802      	cmp	r0, #2
 800c0e0:	d10d      	bne.n	800c0fe <lv_img_decoder_built_in_info+0xa6>
        header->w = 1;
 800c0e2:	6823      	ldr	r3, [r4, #0]
 800c0e4:	2001      	movs	r0, #1
 800c0e6:	f360 2394 	bfi	r3, r0, #10, #11
        header->h = 1;
 800c0ea:	0c1a      	lsrs	r2, r3, #16
 800c0ec:	f360 124f 	bfi	r2, r0, #5, #11
        header->w = 1;
 800c0f0:	6023      	str	r3, [r4, #0]
        header->h = 1;
 800c0f2:	8062      	strh	r2, [r4, #2]
        header->cf = LV_IMG_CF_ALPHA_1BIT;
 800c0f4:	220b      	movs	r2, #11
 800c0f6:	f362 0304 	bfi	r3, r2, #0, #5
 800c0fa:	7023      	strb	r3, [r4, #0]
 800c0fc:	e7c7      	b.n	800c08e <lv_img_decoder_built_in_info+0x36>
        LV_LOG_WARN("Image get info found unknown src type");
 800c0fe:	4b04      	ldr	r3, [pc, #16]	; (800c110 <lv_img_decoder_built_in_info+0xb8>)
 800c100:	4904      	ldr	r1, [pc, #16]	; (800c114 <lv_img_decoder_built_in_info+0xbc>)
 800c102:	f44f 7292 	mov.w	r2, #292	; 0x124
 800c106:	2002      	movs	r0, #2
 800c108:	f000 fdfc 	bl	800cd04 <lv_log_add>
 800c10c:	e7d5      	b.n	800c0ba <lv_img_decoder_built_in_info+0x62>
 800c10e:	bf00      	nop
 800c110:	08010a1c 	.word	0x08010a1c
 800c114:	08010a71 	.word	0x08010a71

0800c118 <lv_img_decoder_close>:
{
 800c118:	4601      	mov	r1, r0
    if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
 800c11a:	6800      	ldr	r0, [r0, #0]
 800c11c:	68c3      	ldr	r3, [r0, #12]
 800c11e:	b103      	cbz	r3, 800c122 <lv_img_decoder_close+0xa>
 800c120:	4718      	bx	r3
 800c122:	4770      	bx	lr

0800c124 <lv_img_decoder_create>:
{
 800c124:	b510      	push	{r4, lr}
    decoder = lv_ll_ins_head(&LV_GC_ROOT(_lv_img_defoder_ll));
 800c126:	4809      	ldr	r0, [pc, #36]	; (800c14c <lv_img_decoder_create+0x28>)
 800c128:	f000 fcbb 	bl	800caa2 <lv_ll_ins_head>
    lv_mem_assert(decoder);
 800c12c:	4604      	mov	r4, r0
 800c12e:	b930      	cbnz	r0, 800c13e <lv_img_decoder_create+0x1a>
 800c130:	4b07      	ldr	r3, [pc, #28]	; (800c150 <lv_img_decoder_create+0x2c>)
 800c132:	4908      	ldr	r1, [pc, #32]	; (800c154 <lv_img_decoder_create+0x30>)
 800c134:	22bf      	movs	r2, #191	; 0xbf
 800c136:	2003      	movs	r0, #3
 800c138:	f000 fde4 	bl	800cd04 <lv_log_add>
 800c13c:	e7fe      	b.n	800c13c <lv_img_decoder_create+0x18>
    memset(decoder, 0, sizeof(lv_img_decoder_t));
 800c13e:	2214      	movs	r2, #20
 800c140:	2100      	movs	r1, #0
 800c142:	f001 fb12 	bl	800d76a <memset>
}
 800c146:	4620      	mov	r0, r4
 800c148:	bd10      	pop	{r4, pc}
 800c14a:	bf00      	nop
 800c14c:	2000d8f0 	.word	0x2000d8f0
 800c150:	080107dd 	.word	0x080107dd
 800c154:	08010a71 	.word	0x08010a71

0800c158 <lv_img_decoder_init>:
{
 800c158:	b508      	push	{r3, lr}
    lv_ll_init(&LV_GC_ROOT(_lv_img_defoder_ll), sizeof(lv_img_decoder_t));
 800c15a:	2114      	movs	r1, #20
 800c15c:	480d      	ldr	r0, [pc, #52]	; (800c194 <lv_img_decoder_init+0x3c>)
 800c15e:	f000 fc96 	bl	800ca8e <lv_ll_init>
    decoder = lv_img_decoder_create();
 800c162:	f7ff ffdf 	bl	800c124 <lv_img_decoder_create>
    if(decoder == NULL) {
 800c166:	b960      	cbnz	r0, 800c182 <lv_img_decoder_init+0x2a>
        LV_LOG_WARN("lv_img_decoder_init: out of memory");
 800c168:	4b0b      	ldr	r3, [pc, #44]	; (800c198 <lv_img_decoder_init+0x40>)
 800c16a:	490c      	ldr	r1, [pc, #48]	; (800c19c <lv_img_decoder_init+0x44>)
 800c16c:	224a      	movs	r2, #74	; 0x4a
 800c16e:	2002      	movs	r0, #2
 800c170:	f000 fdc8 	bl	800cd04 <lv_log_add>
        lv_mem_assert(decoder);
 800c174:	4b0a      	ldr	r3, [pc, #40]	; (800c1a0 <lv_img_decoder_init+0x48>)
 800c176:	4909      	ldr	r1, [pc, #36]	; (800c19c <lv_img_decoder_init+0x44>)
 800c178:	224b      	movs	r2, #75	; 0x4b
 800c17a:	2003      	movs	r0, #3
 800c17c:	f000 fdc2 	bl	800cd04 <lv_log_add>
 800c180:	e7fe      	b.n	800c180 <lv_img_decoder_init+0x28>
    decoder->info_cb = info_cb;
 800c182:	4b08      	ldr	r3, [pc, #32]	; (800c1a4 <lv_img_decoder_init+0x4c>)
 800c184:	6003      	str	r3, [r0, #0]
    decoder->open_cb = open_cb;
 800c186:	4b08      	ldr	r3, [pc, #32]	; (800c1a8 <lv_img_decoder_init+0x50>)
 800c188:	6043      	str	r3, [r0, #4]
    decoder->read_line_cb = read_line_cb;
 800c18a:	4b08      	ldr	r3, [pc, #32]	; (800c1ac <lv_img_decoder_init+0x54>)
 800c18c:	6083      	str	r3, [r0, #8]
    decoder->close_cb = close_cb;
 800c18e:	4b08      	ldr	r3, [pc, #32]	; (800c1b0 <lv_img_decoder_init+0x58>)
 800c190:	60c3      	str	r3, [r0, #12]
 800c192:	bd08      	pop	{r3, pc}
 800c194:	2000d8f0 	.word	0x2000d8f0
 800c198:	08010b68 	.word	0x08010b68
 800c19c:	08010a71 	.word	0x08010a71
 800c1a0:	080107dd 	.word	0x080107dd
 800c1a4:	0800c059 	.word	0x0800c059
 800c1a8:	0800bb2d 	.word	0x0800bb2d
 800c1ac:	0800bd0d 	.word	0x0800bd0d
 800c1b0:	0800bb01 	.word	0x0800bb01

0800c1b4 <kern_pair_8_compare>:
{
    const uint8_t * ref8_p = ref;
    const uint8_t * element8_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
 800c1b4:	7803      	ldrb	r3, [r0, #0]
 800c1b6:	780a      	ldrb	r2, [r1, #0]
 800c1b8:	4293      	cmp	r3, r2
 800c1ba:	bf11      	iteee	ne
 800c1bc:	1a98      	subne	r0, r3, r2
    else return (int32_t) ref8_p[1] - element8_p[1];
 800c1be:	784b      	ldrbeq	r3, [r1, #1]
 800c1c0:	7840      	ldrbeq	r0, [r0, #1]
 800c1c2:	1ac0      	subeq	r0, r0, r3

}
 800c1c4:	4770      	bx	lr

0800c1c6 <kern_pair_16_compare>:
{
    const uint16_t * ref16_p = ref;
    const uint16_t * element16_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
 800c1c6:	8803      	ldrh	r3, [r0, #0]
 800c1c8:	880a      	ldrh	r2, [r1, #0]
 800c1ca:	4293      	cmp	r3, r2
 800c1cc:	bf11      	iteee	ne
 800c1ce:	1a98      	subne	r0, r3, r2
    else return (int32_t) ref16_p[1] - element16_p[1];
 800c1d0:	884b      	ldrheq	r3, [r1, #2]
 800c1d2:	8840      	ldrheq	r0, [r0, #2]
 800c1d4:	1ac0      	subeq	r0, r0, r3
}
 800c1d6:	4770      	bx	lr

0800c1d8 <unicode_list_compare>:
 *  @retval > 0   Reference is less than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
    return (*(uint16_t *)ref) - (*(uint16_t *)element);
 800c1d8:	8800      	ldrh	r0, [r0, #0]
 800c1da:	880b      	ldrh	r3, [r1, #0]
}
 800c1dc:	1ac0      	subs	r0, r0, r3
 800c1de:	4770      	bx	lr

0800c1e0 <get_glyph_dsc_id.isra.0.part.1>:
static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
 800c1e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 800c1e2:	6804      	ldr	r4, [r0, #0]
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
 800c1e4:	6963      	ldr	r3, [r4, #20]
 800c1e6:	428b      	cmp	r3, r1
static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
 800c1e8:	b085      	sub	sp, #20
 800c1ea:	460d      	mov	r5, r1
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
 800c1ec:	d00b      	beq.n	800c206 <get_glyph_dsc_id.isra.0.part.1+0x26>
 800c1ee:	2700      	movs	r7, #0
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 800c1f0:	f04f 0e14 	mov.w	lr, #20
    for(i = 0; i < fdsc->cmap_num; i++) {
 800c1f4:	8a63      	ldrh	r3, [r4, #18]
 800c1f6:	b2be      	uxth	r6, r7
 800c1f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c1fc:	429e      	cmp	r6, r3
 800c1fe:	db05      	blt.n	800c20c <get_glyph_dsc_id.isra.0.part.1+0x2c>
    fdsc->last_letter = letter;
 800c200:	6165      	str	r5, [r4, #20]
    fdsc->last_glyph_id = 0;
 800c202:	2000      	movs	r0, #0
 800c204:	e015      	b.n	800c232 <get_glyph_dsc_id.isra.0.part.1+0x52>
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
 800c206:	69a0      	ldr	r0, [r4, #24]
}
 800c208:	b005      	add	sp, #20
 800c20a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 800c20c:	68a3      	ldr	r3, [r4, #8]
 800c20e:	fb0e f606 	mul.w	r6, lr, r6
 800c212:	1999      	adds	r1, r3, r6
 800c214:	599a      	ldr	r2, [r3, r6]
        if(rcp > fdsc->cmaps[i].range_length) continue;
 800c216:	888b      	ldrh	r3, [r1, #4]
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 800c218:	1aaa      	subs	r2, r5, r2
        if(rcp > fdsc->cmaps[i].range_length) continue;
 800c21a:	429a      	cmp	r2, r3
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 800c21c:	9203      	str	r2, [sp, #12]
 800c21e:	f107 0701 	add.w	r7, r7, #1
        if(rcp > fdsc->cmaps[i].range_length) continue;
 800c222:	d8e7      	bhi.n	800c1f4 <get_glyph_dsc_id.isra.0.part.1+0x14>
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
 800c224:	7c8b      	ldrb	r3, [r1, #18]
 800c226:	f013 0303 	ands.w	r3, r3, #3
 800c22a:	d104      	bne.n	800c236 <get_glyph_dsc_id.isra.0.part.1+0x56>
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
 800c22c:	88c8      	ldrh	r0, [r1, #6]
 800c22e:	4410      	add	r0, r2
        fdsc->last_letter = letter;
 800c230:	6165      	str	r5, [r4, #20]
    fdsc->last_glyph_id = 0;
 800c232:	61a0      	str	r0, [r4, #24]
 800c234:	e7e8      	b.n	800c208 <get_glyph_dsc_id.isra.0.part.1+0x28>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
 800c236:	2b01      	cmp	r3, #1
 800c238:	d104      	bne.n	800c244 <get_glyph_dsc_id.isra.0.part.1+0x64>
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
 800c23a:	68cb      	ldr	r3, [r1, #12]
 800c23c:	5c98      	ldrb	r0, [r3, r2]
 800c23e:	88cb      	ldrh	r3, [r1, #6]
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 800c240:	4418      	add	r0, r3
 800c242:	e7f5      	b.n	800c230 <get_glyph_dsc_id.isra.0.part.1+0x50>
 800c244:	4811      	ldr	r0, [pc, #68]	; (800c28c <get_glyph_dsc_id.isra.0.part.1+0xac>)
 800c246:	8a0a      	ldrh	r2, [r1, #16]
            uint8_t * p = lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length, sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);
 800c248:	9000      	str	r0, [sp, #0]
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
 800c24a:	2b02      	cmp	r3, #2
 800c24c:	d10e      	bne.n	800c26c <get_glyph_dsc_id.isra.0.part.1+0x8c>
            uint8_t * p = lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length, sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);
 800c24e:	6889      	ldr	r1, [r1, #8]
 800c250:	a803      	add	r0, sp, #12
 800c252:	f000 ffcc 	bl	800d1ee <lv_utils_bsearch>
            if(p) {
 800c256:	b908      	cbnz	r0, 800c25c <get_glyph_dsc_id.isra.0.part.1+0x7c>
        uint32_t glyph_id = 0;
 800c258:	2000      	movs	r0, #0
 800c25a:	e7e9      	b.n	800c230 <get_glyph_dsc_id.isra.0.part.1+0x50>
                uint32_t ofs = (uintptr_t)p - (uintptr_t) fdsc->cmaps[i].unicode_list;
 800c25c:	68a3      	ldr	r3, [r4, #8]
 800c25e:	441e      	add	r6, r3
 800c260:	68b3      	ldr	r3, [r6, #8]
 800c262:	1ac3      	subs	r3, r0, r3
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
 800c264:	88f0      	ldrh	r0, [r6, #6]
 800c266:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800c26a:	e7e1      	b.n	800c230 <get_glyph_dsc_id.isra.0.part.1+0x50>
            uint8_t * p = lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length, sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);
 800c26c:	2302      	movs	r3, #2
 800c26e:	6889      	ldr	r1, [r1, #8]
 800c270:	a803      	add	r0, sp, #12
 800c272:	f000 ffbc 	bl	800d1ee <lv_utils_bsearch>
            if(p) {
 800c276:	2800      	cmp	r0, #0
 800c278:	d0ee      	beq.n	800c258 <get_glyph_dsc_id.isra.0.part.1+0x78>
                uint32_t ofs = (uintptr_t)p - (uintptr_t) fdsc->cmaps[i].unicode_list;
 800c27a:	68a3      	ldr	r3, [r4, #8]
 800c27c:	441e      	add	r6, r3
 800c27e:	68b3      	ldr	r3, [r6, #8]
 800c280:	1ac0      	subs	r0, r0, r3
                ofs = ofs >> 1;     /*The list stores `uint16_t` so the get the index divide by 2*/
 800c282:	0840      	lsrs	r0, r0, #1
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 800c284:	68f3      	ldr	r3, [r6, #12]
 800c286:	5c18      	ldrb	r0, [r3, r0]
 800c288:	88f3      	ldrh	r3, [r6, #6]
 800c28a:	e7d9      	b.n	800c240 <get_glyph_dsc_id.isra.0.part.1+0x60>
 800c28c:	0800c1d9 	.word	0x0800c1d9

0800c290 <lv_font_get_bitmap_fmt_txt>:
{
 800c290:	b510      	push	{r4, lr}
    if(letter == '\0') return 0;
 800c292:	b909      	cbnz	r1, 800c298 <lv_font_get_bitmap_fmt_txt+0x8>
    if(!gid) return false;
 800c294:	2000      	movs	r0, #0
 800c296:	bd10      	pop	{r4, pc}
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 800c298:	f850 4f0c 	ldr.w	r4, [r0, #12]!
 800c29c:	f7ff ffa0 	bl	800c1e0 <get_glyph_dsc_id.isra.0.part.1>
    if(!gid) return false;
 800c2a0:	2800      	cmp	r0, #0
 800c2a2:	d0f7      	beq.n	800c294 <lv_font_get_bitmap_fmt_txt+0x4>
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 800c2a4:	6863      	ldr	r3, [r4, #4]
 800c2a6:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
    if(gdsc) return &fdsc->glyph_bitmap[gdsc->bitmap_index];
 800c2aa:	2a00      	cmp	r2, #0
 800c2ac:	d0f2      	beq.n	800c294 <lv_font_get_bitmap_fmt_txt+0x4>
 800c2ae:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 800c2b2:	6820      	ldr	r0, [r4, #0]
 800c2b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c2b8:	4418      	add	r0, r3
}
 800c2ba:	bd10      	pop	{r4, pc}

0800c2bc <lv_font_get_glyph_dsc_fmt_txt>:
{
 800c2bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c2c0:	4680      	mov	r8, r0
 800c2c2:	b085      	sub	sp, #20
 800c2c4:	460c      	mov	r4, r1
 800c2c6:	4699      	mov	r9, r3
    if(letter == '\0') return 0;
 800c2c8:	b91a      	cbnz	r2, 800c2d2 <lv_font_get_glyph_dsc_fmt_txt+0x16>
    if(!gid) return false;
 800c2ca:	2000      	movs	r0, #0
}
 800c2cc:	b005      	add	sp, #20
 800c2ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 800c2d2:	4607      	mov	r7, r0
 800c2d4:	4611      	mov	r1, r2
 800c2d6:	f857 5f0c 	ldr.w	r5, [r7, #12]!
 800c2da:	4638      	mov	r0, r7
 800c2dc:	f7ff ff80 	bl	800c1e0 <get_glyph_dsc_id.isra.0.part.1>
    if(!gid) return false;
 800c2e0:	4606      	mov	r6, r0
 800c2e2:	2800      	cmp	r0, #0
 800c2e4:	d0f1      	beq.n	800c2ca <lv_font_get_glyph_dsc_fmt_txt+0xe>
    if(fdsc->kern_dsc) {
 800c2e6:	68eb      	ldr	r3, [r5, #12]
 800c2e8:	b9db      	cbnz	r3, 800c322 <lv_font_get_glyph_dsc_fmt_txt+0x66>
    int8_t kvalue = 0;
 800c2ea:	2000      	movs	r0, #0
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 800c2ec:	686b      	ldr	r3, [r5, #4]
 800c2ee:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    uint32_t adv_w = gdsc->adv_w + ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 800c2f2:	8a2b      	ldrh	r3, [r5, #16]
 800c2f4:	4358      	muls	r0, r3
 800c2f6:	8873      	ldrh	r3, [r6, #2]
 800c2f8:	f3c3 130b 	ubfx	r3, r3, #4, #12
 800c2fc:	eb03 1020 	add.w	r0, r3, r0, asr #4
    adv_w  = (adv_w + (1 << 3)) >> 4;
 800c300:	3008      	adds	r0, #8
 800c302:	0900      	lsrs	r0, r0, #4
    dsc_out->adv_w = adv_w;
 800c304:	8020      	strh	r0, [r4, #0]
    dsc_out->box_h = gdsc->box_h;
 800c306:	7973      	ldrb	r3, [r6, #5]
 800c308:	70e3      	strb	r3, [r4, #3]
    dsc_out->box_w = gdsc->box_w;
 800c30a:	7933      	ldrb	r3, [r6, #4]
 800c30c:	70a3      	strb	r3, [r4, #2]
    dsc_out->ofs_x = gdsc->ofs_x;
 800c30e:	79b3      	ldrb	r3, [r6, #6]
 800c310:	7123      	strb	r3, [r4, #4]
    dsc_out->ofs_y = gdsc->ofs_y;
 800c312:	79f3      	ldrb	r3, [r6, #7]
 800c314:	7163      	strb	r3, [r4, #5]
    dsc_out->bpp   = fdsc->bpp;
 800c316:	7ceb      	ldrb	r3, [r5, #19]
 800c318:	f3c3 0382 	ubfx	r3, r3, #2, #3
 800c31c:	71a3      	strb	r3, [r4, #6]
    return true;
 800c31e:	2001      	movs	r0, #1
 800c320:	e7d4      	b.n	800c2cc <lv_font_get_glyph_dsc_fmt_txt+0x10>
    if(letter == '\0') return 0;
 800c322:	f1b9 0f00 	cmp.w	r9, #0
 800c326:	d0e0      	beq.n	800c2ea <lv_font_get_glyph_dsc_fmt_txt+0x2e>
 800c328:	4649      	mov	r1, r9
 800c32a:	4638      	mov	r0, r7
 800c32c:	f7ff ff58 	bl	800c1e0 <get_glyph_dsc_id.isra.0.part.1>
        if(gid_next) {
 800c330:	2800      	cmp	r0, #0
 800c332:	d0da      	beq.n	800c2ea <lv_font_get_glyph_dsc_fmt_txt+0x2e>
 800c334:	f8d8 300c 	ldr.w	r3, [r8, #12]
    if(fdsc->kern_classes == 0) {
 800c338:	7cda      	ldrb	r2, [r3, #19]
 800c33a:	68df      	ldr	r7, [r3, #12]
 800c33c:	f012 0f20 	tst.w	r2, #32
 800c340:	d133      	bne.n	800c3aa <lv_font_get_glyph_dsc_fmt_txt+0xee>
        if(kdsc->glyph_ids_size == 0) {
 800c342:	7afb      	ldrb	r3, [r7, #11]
 800c344:	f013 0303 	ands.w	r3, r3, #3
 800c348:	d117      	bne.n	800c37a <lv_font_get_glyph_dsc_fmt_txt+0xbe>
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 800c34a:	eb06 2300 	add.w	r3, r6, r0, lsl #8
 800c34e:	a804      	add	r0, sp, #16
            const uint8_t * g_ids = kdsc->glyph_ids;
 800c350:	f8d7 8000 	ldr.w	r8, [r7]
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 800c354:	68ba      	ldr	r2, [r7, #8]
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 800c356:	f820 3d04 	strh.w	r3, [r0, #-4]!
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 800c35a:	4b1c      	ldr	r3, [pc, #112]	; (800c3cc <lv_font_get_glyph_dsc_fmt_txt+0x110>)
 800c35c:	9300      	str	r3, [sp, #0]
 800c35e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800c362:	2302      	movs	r3, #2
 800c364:	4641      	mov	r1, r8
 800c366:	f000 ff42 	bl	800d1ee <lv_utils_bsearch>
            if(kid_p) {
 800c36a:	2800      	cmp	r0, #0
 800c36c:	d0be      	beq.n	800c2ec <lv_font_get_glyph_dsc_fmt_txt+0x30>
                uintptr_t ofs = (uintptr_t)kid_p - (uintptr_t)g_ids;
 800c36e:	eba0 0008 	sub.w	r0, r0, r8
                ofs = ofs >> 1;     /*ofs is for pair, divide by 2 to refer as a single value*/
 800c372:	0840      	lsrs	r0, r0, #1
                value = kdsc->values[ofs];
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	5618      	ldrsb	r0, [r3, r0]
 800c378:	e7b8      	b.n	800c2ec <lv_font_get_glyph_dsc_fmt_txt+0x30>
        } else if(kdsc->glyph_ids_size == 1) {
 800c37a:	2b01      	cmp	r3, #1
 800c37c:	d1b5      	bne.n	800c2ea <lv_font_get_glyph_dsc_fmt_txt+0x2e>
            uint32_t g_id_both = (uint32_t)((uint32_t)gid_right << 8) + gid_left; /*Create one number from the ids*/
 800c37e:	eb06 2300 	add.w	r3, r6, r0, lsl #8
 800c382:	a804      	add	r0, sp, #16
            const uint16_t * g_ids = kdsc->glyph_ids;
 800c384:	f8d7 8000 	ldr.w	r8, [r7]
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 800c388:	68ba      	ldr	r2, [r7, #8]
            uint32_t g_id_both = (uint32_t)((uint32_t)gid_right << 8) + gid_left; /*Create one number from the ids*/
 800c38a:	f840 3d04 	str.w	r3, [r0, #-4]!
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 800c38e:	4b10      	ldr	r3, [pc, #64]	; (800c3d0 <lv_font_get_glyph_dsc_fmt_txt+0x114>)
 800c390:	9300      	str	r3, [sp, #0]
 800c392:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800c396:	2304      	movs	r3, #4
 800c398:	4641      	mov	r1, r8
 800c39a:	f000 ff28 	bl	800d1ee <lv_utils_bsearch>
            if(kid_p) {
 800c39e:	2800      	cmp	r0, #0
 800c3a0:	d0a4      	beq.n	800c2ec <lv_font_get_glyph_dsc_fmt_txt+0x30>
                uintptr_t ofs = (uintptr_t)kid_p - (uintptr_t)g_ids;
 800c3a2:	eba0 0008 	sub.w	r0, r0, r8
                ofs = ofs >> 4;     /*ofs is 4 byte pairs, divide by 4 to refer as a single value*/
 800c3a6:	0900      	lsrs	r0, r0, #4
 800c3a8:	e7e4      	b.n	800c374 <lv_font_get_glyph_dsc_fmt_txt+0xb8>
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
 800c3aa:	687a      	ldr	r2, [r7, #4]
 800c3ac:	5d93      	ldrb	r3, [r2, r6]
        if(left_class > 0 && right_class > 0) {
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d09b      	beq.n	800c2ea <lv_font_get_glyph_dsc_fmt_txt+0x2e>
        uint8_t right_class = kdsc->left_class_mapping[gid_right];
 800c3b2:	5c11      	ldrb	r1, [r2, r0]
        if(left_class > 0 && right_class > 0) {
 800c3b4:	2900      	cmp	r1, #0
 800c3b6:	d098      	beq.n	800c2ea <lv_font_get_glyph_dsc_fmt_txt+0x2e>
            value = kdsc->class_pair_values[(left_class-1)* kdsc->right_class_cnt + (right_class-1)];
 800c3b8:	683a      	ldr	r2, [r7, #0]
 800c3ba:	7b78      	ldrb	r0, [r7, #13]
 800c3bc:	3b01      	subs	r3, #1
 800c3be:	440a      	add	r2, r1
 800c3c0:	fb00 2303 	mla	r3, r0, r3, r2
 800c3c4:	f913 0c01 	ldrsb.w	r0, [r3, #-1]
 800c3c8:	e790      	b.n	800c2ec <lv_font_get_glyph_dsc_fmt_txt+0x30>
 800c3ca:	bf00      	nop
 800c3cc:	0800c1b5 	.word	0x0800c1b5
 800c3d0:	0800c1c7 	.word	0x0800c1c7

0800c3d4 <lv_disp_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_disp_drv_init(lv_disp_drv_t * driver)
{
 800c3d4:	b510      	push	{r4, lr}
    memset(driver, 0, sizeof(lv_disp_drv_t));
 800c3d6:	222c      	movs	r2, #44	; 0x2c
{
 800c3d8:	4604      	mov	r4, r0
    memset(driver, 0, sizeof(lv_disp_drv_t));
 800c3da:	2100      	movs	r1, #0
 800c3dc:	f001 f9c5 	bl	800d76a <memset>

    driver->flush_cb         = NULL;
    driver->hor_res          = LV_HOR_RES_MAX;
 800c3e0:	23a0      	movs	r3, #160	; 0xa0
 800c3e2:	8023      	strh	r3, [r4, #0]
    driver->ver_res          = LV_VER_RES_MAX;
 800c3e4:	2380      	movs	r3, #128	; 0x80
    driver->flush_cb         = NULL;
 800c3e6:	2200      	movs	r2, #0
    driver->ver_res          = LV_VER_RES_MAX;
 800c3e8:	8063      	strh	r3, [r4, #2]
    driver->buffer           = NULL;
    driver->rotated          = 0;
    driver->color_chroma_key = LV_COLOR_TRANSP;
 800c3ea:	f04f 0300 	mov.w	r3, #0
 800c3ee:	f362 0304 	bfi	r3, r2, #0, #5
 800c3f2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 800c3f6:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
#if LV_COLOR_SCREEN_TRANSP
    driver->screen_transp = 1;
#endif

#if LV_USE_GPU
    driver->gpu_blend_cb = NULL;
 800c3f8:	61e2      	str	r2, [r4, #28]
    driver->color_chroma_key = LV_COLOR_TRANSP;
 800c3fa:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800c3fe:	84a3      	strh	r3, [r4, #36]	; 0x24
 800c400:	0a1b      	lsrs	r3, r3, #8
 800c402:	f362 03c7 	bfi	r3, r2, #3, #5
 800c406:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
    driver->antialiasing = true;
 800c40a:	2301      	movs	r3, #1
 800c40c:	7223      	strb	r3, [r4, #8]
    driver->gpu_fill_cb  = NULL;
 800c40e:	6222      	str	r2, [r4, #32]
#endif

#if LV_USE_USER_DATA
    driver->user_data = NULL;
 800c410:	62a2      	str	r2, [r4, #40]	; 0x28
#endif

    driver->set_px_cb = NULL;
 800c412:	6162      	str	r2, [r4, #20]
 800c414:	bd10      	pop	{r4, pc}

0800c416 <lv_disp_buf_init>:
 *             It lets LittlevGL to render next frame into the other buffer while previous is being
 * sent. Set to `NULL` if unused.
 * @param size_in_px_cnt size of the `buf1` and `buf2` in pixel count.
 */
void lv_disp_buf_init(lv_disp_buf_t * disp_buf, void * buf1, void * buf2, uint32_t size_in_px_cnt)
{
 800c416:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c418:	4604      	mov	r4, r0
 800c41a:	460d      	mov	r5, r1
 800c41c:	4617      	mov	r7, r2
 800c41e:	461e      	mov	r6, r3
    memset(disp_buf, 0, sizeof(lv_disp_buf_t));
 800c420:	221c      	movs	r2, #28
 800c422:	2100      	movs	r1, #0
 800c424:	f001 f9a1 	bl	800d76a <memset>

    disp_buf->buf1    = buf1;
    disp_buf->buf2    = buf2;
 800c428:	e884 00a0 	stmia.w	r4, {r5, r7}
    disp_buf->buf_act = disp_buf->buf1;
 800c42c:	60a5      	str	r5, [r4, #8]
    disp_buf->size    = size_in_px_cnt;
 800c42e:	60e6      	str	r6, [r4, #12]
 800c430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c434 <lv_disp_drv_register>:
 * Automatically set the first display as active.
 * @param driver pointer to an initialized 'lv_disp_drv_t' variable (can be local variable)
 * @return pointer to the new display or NULL on error
 */
lv_disp_t * lv_disp_drv_register(lv_disp_drv_t * driver)
{
 800c434:	b570      	push	{r4, r5, r6, lr}
 800c436:	4605      	mov	r5, r0
    lv_disp_t * disp = lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
 800c438:	4830      	ldr	r0, [pc, #192]	; (800c4fc <lv_disp_drv_register+0xc8>)
 800c43a:	f000 fb32 	bl	800caa2 <lv_ll_ins_head>
    if(!disp) {
 800c43e:	4604      	mov	r4, r0
 800c440:	b930      	cbnz	r0, 800c450 <lv_disp_drv_register+0x1c>
        lv_mem_assert(disp);
 800c442:	4b2f      	ldr	r3, [pc, #188]	; (800c500 <lv_disp_drv_register+0xcc>)
 800c444:	492f      	ldr	r1, [pc, #188]	; (800c504 <lv_disp_drv_register+0xd0>)
 800c446:	2279      	movs	r2, #121	; 0x79
 800c448:	2003      	movs	r0, #3
 800c44a:	f000 fc5b 	bl	800cd04 <lv_log_add>
 800c44e:	e7fe      	b.n	800c44e <lv_disp_drv_register+0x1a>
        return NULL;
    }

    memcpy(&disp->driver, driver, sizeof(lv_disp_drv_t));
 800c450:	4628      	mov	r0, r5
 800c452:	4623      	mov	r3, r4
 800c454:	f105 022c 	add.w	r2, r5, #44	; 0x2c
 800c458:	f850 1b04 	ldr.w	r1, [r0], #4
 800c45c:	f843 1b04 	str.w	r1, [r3], #4
 800c460:	4290      	cmp	r0, r2
 800c462:	d1f9      	bne.n	800c458 <lv_disp_drv_register+0x24>
    memset(&disp->inv_area_joined, 0, sizeof(disp->inv_area_joined));
 800c464:	2220      	movs	r2, #32
 800c466:	2100      	movs	r1, #0
 800c468:	f504 70a4 	add.w	r0, r4, #328	; 0x148
 800c46c:	f001 f97d 	bl	800d76a <memset>
    memset(&disp->inv_areas, 0, sizeof(disp->inv_areas));
    lv_ll_init(&disp->scr_ll, sizeof(lv_obj_t));

    if(disp_def == NULL) disp_def = disp;
 800c470:	4d25      	ldr	r5, [pc, #148]	; (800c508 <lv_disp_drv_register+0xd4>)
    memset(&disp->inv_areas, 0, sizeof(disp->inv_areas));
 800c472:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c476:	2100      	movs	r1, #0
 800c478:	f104 0048 	add.w	r0, r4, #72	; 0x48
 800c47c:	f001 f975 	bl	800d76a <memset>
    lv_ll_init(&disp->scr_ll, sizeof(lv_obj_t));
 800c480:	2148      	movs	r1, #72	; 0x48
 800c482:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800c486:	f000 fb02 	bl	800ca8e <lv_ll_init>
    if(disp_def == NULL) disp_def = disp;
 800c48a:	682b      	ldr	r3, [r5, #0]
 800c48c:	b903      	cbnz	r3, 800c490 <lv_disp_drv_register+0x5c>
 800c48e:	602c      	str	r4, [r5, #0]

    lv_disp_t * disp_def_tmp = disp_def;
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
                                        new display*/

    disp->inv_p = 0;
 800c490:	f8b4 3168 	ldrh.w	r3, [r4, #360]	; 0x168
    lv_disp_t * disp_def_tmp = disp_def;
 800c494:	682e      	ldr	r6, [r5, #0]
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
 800c496:	602c      	str	r4, [r5, #0]
    disp->inv_p = 0;
 800c498:	f36f 0309 	bfc	r3, #0, #10

    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
 800c49c:	2100      	movs	r1, #0
    disp->inv_p = 0;
 800c49e:	f8a4 3168 	strh.w	r3, [r4, #360]	; 0x168
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
 800c4a2:	4608      	mov	r0, r1
 800c4a4:	f7fb ffa4 	bl	80083f0 <lv_obj_create>
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 800c4a8:	2100      	movs	r1, #0
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
 800c4aa:	63e0      	str	r0, [r4, #60]	; 0x3c
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 800c4ac:	4608      	mov	r0, r1
 800c4ae:	f7fb ff9f 	bl	80083f0 <lv_obj_create>
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 800c4b2:	2100      	movs	r1, #0
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 800c4b4:	6420      	str	r0, [r4, #64]	; 0x40
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 800c4b6:	4608      	mov	r0, r1
 800c4b8:	f7fb ff9a 	bl	80083f0 <lv_obj_create>
    lv_obj_set_style(disp->top_layer, &lv_style_transp);
 800c4bc:	4913      	ldr	r1, [pc, #76]	; (800c50c <lv_disp_drv_register+0xd8>)
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 800c4be:	6460      	str	r0, [r4, #68]	; 0x44
    lv_obj_set_style(disp->top_layer, &lv_style_transp);
 800c4c0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800c4c2:	f7fc f935 	bl	8008730 <lv_obj_set_style>
    lv_obj_set_style(disp->sys_layer, &lv_style_transp);
 800c4c6:	4911      	ldr	r1, [pc, #68]	; (800c50c <lv_disp_drv_register+0xd8>)
 800c4c8:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800c4ca:	f7fc f931 	bl	8008730 <lv_obj_set_style>

    lv_obj_invalidate(disp->act_scr);
 800c4ce:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800c4d0:	f7fb fede 	bl	8008290 <lv_obj_invalidate>

    disp_def = disp_def_tmp; /*Revert the default display*/

    /*Create a refresh task*/
    disp->refr_task = lv_task_create(lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, disp);
 800c4d4:	4623      	mov	r3, r4
 800c4d6:	2203      	movs	r2, #3
 800c4d8:	211e      	movs	r1, #30
 800c4da:	480d      	ldr	r0, [pc, #52]	; (800c510 <lv_disp_drv_register+0xdc>)
    disp_def = disp_def_tmp; /*Revert the default display*/
 800c4dc:	602e      	str	r6, [r5, #0]
    disp->refr_task = lv_task_create(lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, disp);
 800c4de:	f000 fe5d 	bl	800d19c <lv_task_create>
 800c4e2:	62e0      	str	r0, [r4, #44]	; 0x2c
    lv_mem_assert(disp->refr_task);
 800c4e4:	b930      	cbnz	r0, 800c4f4 <lv_disp_drv_register+0xc0>
 800c4e6:	4b06      	ldr	r3, [pc, #24]	; (800c500 <lv_disp_drv_register+0xcc>)
 800c4e8:	4906      	ldr	r1, [pc, #24]	; (800c504 <lv_disp_drv_register+0xd0>)
 800c4ea:	2296      	movs	r2, #150	; 0x96
 800c4ec:	2003      	movs	r0, #3
 800c4ee:	f000 fc09 	bl	800cd04 <lv_log_add>
 800c4f2:	e7fe      	b.n	800c4f2 <lv_disp_drv_register+0xbe>
    if(disp->refr_task == NULL) return NULL;

    lv_task_ready(disp->refr_task); /*Be sure the screen will be refreshed immediately on start up*/
 800c4f4:	f000 fe72 	bl	800d1dc <lv_task_ready>

    return disp;
}
 800c4f8:	4620      	mov	r0, r4
 800c4fa:	bd70      	pop	{r4, r5, r6, pc}
 800c4fc:	2000d8e4 	.word	0x2000d8e4
 800c500:	080107dd 	.word	0x080107dd
 800c504:	08012f46 	.word	0x08012f46
 800c508:	20004330 	.word	0x20004330
 800c50c:	2000d5f8 	.word	0x2000d5f8
 800c510:	08008be5 	.word	0x08008be5

0800c514 <lv_disp_get_default>:
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
    return disp_def;
}
 800c514:	4b01      	ldr	r3, [pc, #4]	; (800c51c <lv_disp_get_default+0x8>)
 800c516:	6818      	ldr	r0, [r3, #0]
 800c518:	4770      	bx	lr
 800c51a:	bf00      	nop
 800c51c:	20004330 	.word	0x20004330

0800c520 <lv_disp_get_hor_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
 800c520:	b910      	cbnz	r0, 800c528 <lv_disp_get_hor_res+0x8>
    return disp_def;
 800c522:	4b06      	ldr	r3, [pc, #24]	; (800c53c <lv_disp_get_hor_res+0x1c>)
 800c524:	6818      	ldr	r0, [r3, #0]

    if(disp == NULL)
 800c526:	b138      	cbz	r0, 800c538 <lv_disp_get_hor_res+0x18>
        return LV_HOR_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.hor_res : disp->driver.ver_res;
 800c528:	7a03      	ldrb	r3, [r0, #8]
 800c52a:	079b      	lsls	r3, r3, #30
 800c52c:	bf54      	ite	pl
 800c52e:	f9b0 0000 	ldrshpl.w	r0, [r0]
 800c532:	f9b0 0002 	ldrshmi.w	r0, [r0, #2]
 800c536:	4770      	bx	lr
        return LV_HOR_RES_MAX;
 800c538:	20a0      	movs	r0, #160	; 0xa0
}
 800c53a:	4770      	bx	lr
 800c53c:	20004330 	.word	0x20004330

0800c540 <lv_disp_get_ver_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
 800c540:	b910      	cbnz	r0, 800c548 <lv_disp_get_ver_res+0x8>
    return disp_def;
 800c542:	4b06      	ldr	r3, [pc, #24]	; (800c55c <lv_disp_get_ver_res+0x1c>)
 800c544:	6818      	ldr	r0, [r3, #0]

    if(disp == NULL)
 800c546:	b138      	cbz	r0, 800c558 <lv_disp_get_ver_res+0x18>
        return LV_VER_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.ver_res : disp->driver.hor_res;
 800c548:	7a03      	ldrb	r3, [r0, #8]
 800c54a:	079b      	lsls	r3, r3, #30
 800c54c:	bf54      	ite	pl
 800c54e:	f9b0 0002 	ldrshpl.w	r0, [r0, #2]
 800c552:	f9b0 0000 	ldrshmi.w	r0, [r0]
 800c556:	4770      	bx	lr
        return LV_VER_RES_MAX;
 800c558:	2080      	movs	r0, #128	; 0x80
}
 800c55a:	4770      	bx	lr
 800c55c:	20004330 	.word	0x20004330

0800c560 <lv_disp_get_antialiasing>:
bool lv_disp_get_antialiasing(lv_disp_t * disp)
{
#if LV_ANTIALIAS == 0
    return false;
#else
    if(disp == NULL) disp = lv_disp_get_default();
 800c560:	b910      	cbnz	r0, 800c568 <lv_disp_get_antialiasing+0x8>
    return disp_def;
 800c562:	4b03      	ldr	r3, [pc, #12]	; (800c570 <lv_disp_get_antialiasing+0x10>)
 800c564:	6818      	ldr	r0, [r3, #0]
    if(disp == NULL) return false;
 800c566:	b110      	cbz	r0, 800c56e <lv_disp_get_antialiasing+0xe>

    return disp->driver.antialiasing ? true : false;
 800c568:	7a00      	ldrb	r0, [r0, #8]
 800c56a:	f000 0001 	and.w	r0, r0, #1
#endif
}
 800c56e:	4770      	bx	lr
 800c570:	20004330 	.word	0x20004330

0800c574 <lv_disp_flush_ready>:
 * Call in the display driver's `flush_cb` function when the flushing is finished
 * @param disp_drv pointer to display driver in `flush_cb` where this function is called
 */
LV_ATTRIBUTE_FLUSH_READY void lv_disp_flush_ready(lv_disp_drv_t * disp_drv)
{
    disp_drv->buffer->flushing = 0;
 800c574:	6842      	ldr	r2, [r0, #4]
 800c576:	7e13      	ldrb	r3, [r2, #24]
 800c578:	f36f 0300 	bfc	r3, #0, #1
 800c57c:	7613      	strb	r3, [r2, #24]
 800c57e:	4770      	bx	lr

0800c580 <lv_disp_get_buf>:
 * @return pointer to the internal buffers
 */
lv_disp_buf_t * lv_disp_get_buf(lv_disp_t * disp)
{
    return disp->driver.buffer;
}
 800c580:	6840      	ldr	r0, [r0, #4]
 800c582:	4770      	bx	lr

0800c584 <lv_disp_is_double_buf>:
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_double_buf(lv_disp_t * disp)
{
    if(disp->driver.buffer->buf1 && disp->driver.buffer->buf2)
 800c584:	6843      	ldr	r3, [r0, #4]
 800c586:	6818      	ldr	r0, [r3, #0]
 800c588:	b118      	cbz	r0, 800c592 <lv_disp_is_double_buf+0xe>
 800c58a:	6858      	ldr	r0, [r3, #4]
 800c58c:	3000      	adds	r0, #0
 800c58e:	bf18      	it	ne
 800c590:	2001      	movne	r0, #1
        return true;
    else
        return false;
}
 800c592:	4770      	bx	lr

0800c594 <lv_disp_is_true_double_buf>:
 * `size` is screen sized)
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_true_double_buf(lv_disp_t * disp)
{
 800c594:	b508      	push	{r3, lr}
 800c596:	4602      	mov	r2, r0
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;

    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
 800c598:	f7ff fff4 	bl	800c584 <lv_disp_is_double_buf>
 800c59c:	b140      	cbz	r0, 800c5b0 <lv_disp_is_true_double_buf+0x1c>
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;
 800c59e:	8853      	ldrh	r3, [r2, #2]
 800c5a0:	8810      	ldrh	r0, [r2, #0]
 800c5a2:	fb10 f003 	smulbb	r0, r0, r3
    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
 800c5a6:	6853      	ldr	r3, [r2, #4]
 800c5a8:	68db      	ldr	r3, [r3, #12]
 800c5aa:	1ac3      	subs	r3, r0, r3
 800c5ac:	4258      	negs	r0, r3
 800c5ae:	4158      	adcs	r0, r3
        return true;
    } else {
        return false;
    }
}
 800c5b0:	bd08      	pop	{r3, pc}
	...

0800c5b4 <lv_indev_get_next>:
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
    if(indev == NULL)
 800c5b4:	4601      	mov	r1, r0
        return lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 800c5b6:	4803      	ldr	r0, [pc, #12]	; (800c5c4 <lv_indev_get_next+0x10>)
    if(indev == NULL)
 800c5b8:	b909      	cbnz	r1, 800c5be <lv_indev_get_next+0xa>
        return lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 800c5ba:	f000 baae 	b.w	800cb1a <lv_ll_get_head>
    else
        return lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
 800c5be:	f000 bab2 	b.w	800cb26 <lv_ll_get_next>
 800c5c2:	bf00      	nop
 800c5c4:	2000d8d4 	.word	0x2000d8d4

0800c5c8 <lv_tick_inc>:
 * You have to call this function periodically
 * @param tick_period the call period of this function in milliseconds
 */
LV_ATTRIBUTE_TICK_INC void lv_tick_inc(uint32_t tick_period)
{
    tick_irq_flag = 0;
 800c5c8:	4b03      	ldr	r3, [pc, #12]	; (800c5d8 <lv_tick_inc+0x10>)
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	701a      	strb	r2, [r3, #0]
    sys_time += tick_period;
 800c5ce:	4a03      	ldr	r2, [pc, #12]	; (800c5dc <lv_tick_inc+0x14>)
 800c5d0:	6813      	ldr	r3, [r2, #0]
 800c5d2:	4418      	add	r0, r3
 800c5d4:	6010      	str	r0, [r2, #0]
 800c5d6:	4770      	bx	lr
 800c5d8:	20004338 	.word	0x20004338
 800c5dc:	20004334 	.word	0x20004334

0800c5e0 <lv_tick_get>:
uint32_t lv_tick_get(void)
{
#if LV_TICK_CUSTOM == 0
    uint32_t result;
    do {
        tick_irq_flag = 1;
 800c5e0:	4b04      	ldr	r3, [pc, #16]	; (800c5f4 <lv_tick_get+0x14>)
 800c5e2:	f04f 0101 	mov.w	r1, #1
 800c5e6:	7019      	strb	r1, [r3, #0]
        result        = sys_time;
    } while(!tick_irq_flag); /*'lv_tick_inc()' clears this flag which can be in an interrupt.
 800c5e8:	781a      	ldrb	r2, [r3, #0]
 800c5ea:	2a00      	cmp	r2, #0
 800c5ec:	d0fb      	beq.n	800c5e6 <lv_tick_get+0x6>

    return result;
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
 800c5ee:	4b02      	ldr	r3, [pc, #8]	; (800c5f8 <lv_tick_get+0x18>)
 800c5f0:	6818      	ldr	r0, [r3, #0]
 800c5f2:	4770      	bx	lr
 800c5f4:	20004338 	.word	0x20004338
 800c5f8:	20004334 	.word	0x20004334

0800c5fc <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of systick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
 800c5fc:	b510      	push	{r4, lr}
 800c5fe:	4604      	mov	r4, r0
    uint32_t act_time = lv_tick_get();
 800c600:	f7ff ffee 	bl	800c5e0 <lv_tick_get>
        prev_tick = UINT32_MAX - prev_tick + 1;
        prev_tick += act_time;
    }

    return prev_tick;
}
 800c604:	1b00      	subs	r0, r0, r4
 800c606:	bd10      	pop	{r4, pc}

0800c608 <anim_task>:
/**
 * Periodically handle the animations.
 * @param param unused
 */
static void anim_task(lv_task_t * param)
{
 800c608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    (void)param;

    lv_anim_t * a;
    LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a)
 800c60c:	4844      	ldr	r0, [pc, #272]	; (800c720 <anim_task+0x118>)
 800c60e:	4c44      	ldr	r4, [pc, #272]	; (800c720 <anim_task+0x118>)
{
 800c610:	b08a      	sub	sp, #40	; 0x28
    LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a)
 800c612:	f000 fa82 	bl	800cb1a <lv_ll_get_head>
 800c616:	b988      	cbnz	r0, 800c63c <anim_task+0x34>
    {
        a->has_run = 0;
    }

    uint32_t elaps = lv_tick_elaps(last_task_run);
 800c618:	4d42      	ldr	r5, [pc, #264]	; (800c724 <anim_task+0x11c>)
    while(a != NULL) {
        /*It can be set by `lv_anim_del()` typically in `end_cb`. If set then an animation delete
         * happened in `anim_ready_handler` which could make this linked list reading corrupt
         * because the list is changed meanwhile
         */
        anim_list_changed = false;
 800c61a:	4e43      	ldr	r6, [pc, #268]	; (800c728 <anim_task+0x120>)
    uint32_t elaps = lv_tick_elaps(last_task_run);
 800c61c:	6828      	ldr	r0, [r5, #0]
        /* If the linked list changed due to anim. delete then it's not safe to continue
         * the reading of the list from here -> start from the head*/
        if(anim_list_changed)
            a = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
        else
            a = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 800c61e:	4f40      	ldr	r7, [pc, #256]	; (800c720 <anim_task+0x118>)
    uint32_t elaps = lv_tick_elaps(last_task_run);
 800c620:	f7ff ffec 	bl	800c5fc <lv_tick_elaps>
 800c624:	4680      	mov	r8, r0
    a = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 800c626:	483e      	ldr	r0, [pc, #248]	; (800c720 <anim_task+0x118>)
 800c628:	f000 fa77 	bl	800cb1a <lv_ll_get_head>
 800c62c:	4604      	mov	r4, r0
    while(a != NULL) {
 800c62e:	b984      	cbnz	r4, 800c652 <anim_task+0x4a>
    }

    last_task_run = lv_tick_get();
 800c630:	f7ff ffd6 	bl	800c5e0 <lv_tick_get>
 800c634:	6028      	str	r0, [r5, #0]
}
 800c636:	b00a      	add	sp, #40	; 0x28
 800c638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        a->has_run = 0;
 800c63c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800c640:	f36f 03c3 	bfc	r3, #3, #1
 800c644:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a)
 800c648:	4601      	mov	r1, r0
 800c64a:	4620      	mov	r0, r4
 800c64c:	f000 fa6b 	bl	800cb26 <lv_ll_get_next>
 800c650:	e7e1      	b.n	800c616 <anim_task+0xe>
        anim_list_changed = false;
 800c652:	2300      	movs	r3, #0
 800c654:	7033      	strb	r3, [r6, #0]
        if(!a->has_run) {
 800c656:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800c65a:	0718      	lsls	r0, r3, #28
 800c65c:	d45b      	bmi.n	800c716 <anim_task+0x10e>
            a->has_run = 1; /*The list readying might be reseted so need to know which anim has run already*/
 800c65e:	f043 0308 	orr.w	r3, r3, #8
 800c662:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
            a->act_time += elaps;
 800c666:	8b63      	ldrh	r3, [r4, #26]
 800c668:	4443      	add	r3, r8
 800c66a:	b21b      	sxth	r3, r3
            if(a->act_time >= 0) {
 800c66c:	2b00      	cmp	r3, #0
            a->act_time += elaps;
 800c66e:	8363      	strh	r3, [r4, #26]
            if(a->act_time >= 0) {
 800c670:	db51      	blt.n	800c716 <anim_task+0x10e>
                if(a->act_time > a->time) a->act_time = a->time;
 800c672:	8b22      	ldrh	r2, [r4, #24]
 800c674:	4293      	cmp	r3, r2
 800c676:	bfc8      	it	gt
 800c678:	8362      	strhgt	r2, [r4, #26]
                new_value = a->path_cb(a);
 800c67a:	68a3      	ldr	r3, [r4, #8]
 800c67c:	4620      	mov	r0, r4
 800c67e:	4798      	blx	r3
                if(a->exec_cb) a->exec_cb(a->var, new_value);
 800c680:	6863      	ldr	r3, [r4, #4]
                new_value = a->path_cb(a);
 800c682:	4601      	mov	r1, r0
                if(a->exec_cb) a->exec_cb(a->var, new_value);
 800c684:	b10b      	cbz	r3, 800c68a <anim_task+0x82>
 800c686:	6820      	ldr	r0, [r4, #0]
 800c688:	4798      	blx	r3
                if(a->act_time >= a->time) {
 800c68a:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
 800c68e:	8b23      	ldrh	r3, [r4, #24]
 800c690:	429a      	cmp	r2, r3
 800c692:	db20      	blt.n	800c6d6 <anim_task+0xce>
{

    /*Delete the animation if
     * - no repeat and no play back (simple one shot animation)
     * - no repeat, play back is enabled and play back is ready */
    if((a->repeat == 0 && a->playback == 0) || (a->repeat == 0 && a->playback == 1 && a->playback_now == 1)) {
 800c694:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800c698:	0799      	lsls	r1, r3, #30
 800c69a:	d003      	beq.n	800c6a4 <anim_task+0x9c>
 800c69c:	f003 0207 	and.w	r2, r3, #7
 800c6a0:	2a05      	cmp	r2, #5
 800c6a2:	d11f      	bne.n	800c6e4 <anim_task+0xdc>

        /*Create copy from the animation and delete the animation from the list.
         * This way the `ready_cb` will see the animations like it's animation is ready deleted*/
        lv_anim_t a_tmp;
        memcpy(&a_tmp, a, sizeof(lv_anim_t));
 800c6a4:	4623      	mov	r3, r4
 800c6a6:	46ee      	mov	lr, sp
 800c6a8:	f104 0c28 	add.w	ip, r4, #40	; 0x28
 800c6ac:	6818      	ldr	r0, [r3, #0]
 800c6ae:	6859      	ldr	r1, [r3, #4]
 800c6b0:	4672      	mov	r2, lr
 800c6b2:	c203      	stmia	r2!, {r0, r1}
 800c6b4:	3308      	adds	r3, #8
 800c6b6:	4563      	cmp	r3, ip
 800c6b8:	4696      	mov	lr, r2
 800c6ba:	d1f7      	bne.n	800c6ac <anim_task+0xa4>
        lv_ll_rem(&LV_GC_ROOT(_lv_anim_ll), a);
 800c6bc:	4621      	mov	r1, r4
 800c6be:	4638      	mov	r0, r7
 800c6c0:	f000 fa6a 	bl	800cb98 <lv_ll_rem>
        lv_mem_free(a);
 800c6c4:	4620      	mov	r0, r4
 800c6c6:	f000 fbb7 	bl	800ce38 <lv_mem_free>
        anim_list_changed = true;
 800c6ca:	2301      	movs	r3, #1
 800c6cc:	7033      	strb	r3, [r6, #0]

        /* Call the callback function at the end*/
        if(a_tmp.ready_cb != NULL) a_tmp.ready_cb(&a_tmp);
 800c6ce:	9b03      	ldr	r3, [sp, #12]
 800c6d0:	b10b      	cbz	r3, 800c6d6 <anim_task+0xce>
 800c6d2:	4668      	mov	r0, sp
 800c6d4:	4798      	blx	r3
        if(anim_list_changed)
 800c6d6:	7833      	ldrb	r3, [r6, #0]
 800c6d8:	b1eb      	cbz	r3, 800c716 <anim_task+0x10e>
            a = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 800c6da:	4638      	mov	r0, r7
 800c6dc:	f000 fa1d 	bl	800cb1a <lv_ll_get_head>
            a = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 800c6e0:	4604      	mov	r4, r0
 800c6e2:	e7a4      	b.n	800c62e <anim_task+0x26>
    }
    /*If the animation is not deleted then restart it*/
    else {
        a->act_time = -a->repeat_pause; /*Restart the animation*/
 800c6e4:	8be2      	ldrh	r2, [r4, #30]
 800c6e6:	4252      	negs	r2, r2
 800c6e8:	8362      	strh	r2, [r4, #26]
        /*Swap the start and end values in play back mode*/
        if(a->playback != 0) {
 800c6ea:	07da      	lsls	r2, r3, #31
 800c6ec:	d5f3      	bpl.n	800c6d6 <anim_task+0xce>
            /*If now turning back use the 'playback_pause*/
            if(a->playback_now == 0) a->act_time = -a->playback_pause;
 800c6ee:	f013 0304 	ands.w	r3, r3, #4
 800c6f2:	bf02      	ittt	eq
 800c6f4:	8ba2      	ldrheq	r2, [r4, #28]
 800c6f6:	4252      	negeq	r2, r2
 800c6f8:	8362      	strheq	r2, [r4, #26]

            /*Toggle the play back state*/
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 800c6fa:	fab3 f383 	clz	r3, r3
 800c6fe:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 800c702:	095b      	lsrs	r3, r3, #5
 800c704:	f363 0282 	bfi	r2, r3, #2, #1
 800c708:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
            /*Swap the start and end values*/
            int32_t tmp;
            tmp      = a->start;
 800c70c:	6923      	ldr	r3, [r4, #16]
            a->start = a->end;
 800c70e:	6962      	ldr	r2, [r4, #20]
 800c710:	6122      	str	r2, [r4, #16]
            a->end   = tmp;
 800c712:	6163      	str	r3, [r4, #20]
 800c714:	e7df      	b.n	800c6d6 <anim_task+0xce>
            a = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 800c716:	4621      	mov	r1, r4
 800c718:	4638      	mov	r0, r7
 800c71a:	f000 fa04 	bl	800cb26 <lv_ll_get_next>
 800c71e:	e7df      	b.n	800c6e0 <anim_task+0xd8>
 800c720:	2000d910 	.word	0x2000d910
 800c724:	2000433c 	.word	0x2000433c
 800c728:	20004339 	.word	0x20004339

0800c72c <lv_anim_core_init>:
{
 800c72c:	b510      	push	{r4, lr}
    lv_ll_init(&LV_GC_ROOT(_lv_anim_ll), sizeof(lv_anim_t));
 800c72e:	2128      	movs	r1, #40	; 0x28
 800c730:	4807      	ldr	r0, [pc, #28]	; (800c750 <lv_anim_core_init+0x24>)
 800c732:	f000 f9ac 	bl	800ca8e <lv_ll_init>
    last_task_run = lv_tick_get();
 800c736:	f7ff ff53 	bl	800c5e0 <lv_tick_get>
 800c73a:	4b06      	ldr	r3, [pc, #24]	; (800c754 <lv_anim_core_init+0x28>)
    lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, NULL);
 800c73c:	2203      	movs	r2, #3
    last_task_run = lv_tick_get();
 800c73e:	6018      	str	r0, [r3, #0]
    lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, NULL);
 800c740:	211e      	movs	r1, #30
 800c742:	2300      	movs	r3, #0
 800c744:	4804      	ldr	r0, [pc, #16]	; (800c758 <lv_anim_core_init+0x2c>)
}
 800c746:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, NULL);
 800c74a:	f000 bd27 	b.w	800d19c <lv_task_create>
 800c74e:	bf00      	nop
 800c750:	2000d910 	.word	0x2000d910
 800c754:	2000433c 	.word	0x2000433c
 800c758:	0800c609 	.word	0x0800c609

0800c75c <lv_area_set>:
 */
void lv_area_set(lv_area_t * area_p, lv_coord_t x1, lv_coord_t y1, lv_coord_t x2, lv_coord_t y2)
{
    area_p->x1 = x1;
    area_p->y1 = y1;
    area_p->x2 = x2;
 800c75c:	8083      	strh	r3, [r0, #4]
    area_p->y2 = y2;
 800c75e:	f9bd 3000 	ldrsh.w	r3, [sp]
    area_p->x1 = x1;
 800c762:	8001      	strh	r1, [r0, #0]
    area_p->y1 = y1;
 800c764:	8042      	strh	r2, [r0, #2]
    area_p->y2 = y2;
 800c766:	80c3      	strh	r3, [r0, #6]
 800c768:	4770      	bx	lr

0800c76a <lv_area_get_size>:
 */
uint32_t lv_area_get_size(const lv_area_t * area_p)
{
    uint32_t size;

    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
 800c76a:	f9b0 3000 	ldrsh.w	r3, [r0]
 800c76e:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800c772:	1ad2      	subs	r2, r2, r3
 800c774:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800c778:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 800c77c:	1a18      	subs	r0, r3, r0
 800c77e:	3001      	adds	r0, #1

    return size;
}
 800c780:	fb02 0000 	mla	r0, r2, r0, r0
 800c784:	4770      	bx	lr

0800c786 <lv_area_intersect>:
 * @return false: the two area has NO common parts, res_p is invalid
 */
bool lv_area_intersect(lv_area_t * res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
    /* Get the smaller area from 'a1_p' and 'a2_p' */
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 800c786:	f9b1 3000 	ldrsh.w	r3, [r1]
{
 800c78a:	b570      	push	{r4, r5, r6, lr}
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 800c78c:	f9b2 5000 	ldrsh.w	r5, [r2]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 800c790:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 800c794:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 800c798:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 800c79c:	429d      	cmp	r5, r3
 800c79e:	bfb8      	it	lt
 800c7a0:	461d      	movlt	r5, r3
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 800c7a2:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 800c7a6:	8005      	strh	r5, [r0, #0]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 800c7a8:	42a3      	cmp	r3, r4
 800c7aa:	bfb8      	it	lt
 800c7ac:	4623      	movlt	r3, r4
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 800c7ae:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 800c7b2:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 800c7b6:	8043      	strh	r3, [r0, #2]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 800c7b8:	42b4      	cmp	r4, r6
 800c7ba:	bfa8      	it	ge
 800c7bc:	4634      	movge	r4, r6
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 800c7be:	428a      	cmp	r2, r1
 800c7c0:	bfa8      	it	ge
 800c7c2:	460a      	movge	r2, r1

    /*If x1 or y1 greater then x2 or y2 then the areas union is empty*/
    bool union_ok = true;
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
 800c7c4:	42a5      	cmp	r5, r4
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 800c7c6:	8084      	strh	r4, [r0, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 800c7c8:	80c2      	strh	r2, [r0, #6]
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
 800c7ca:	dc04      	bgt.n	800c7d6 <lv_area_intersect+0x50>
 800c7cc:	4293      	cmp	r3, r2
 800c7ce:	bfcc      	ite	gt
 800c7d0:	2000      	movgt	r0, #0
 800c7d2:	2001      	movle	r0, #1
 800c7d4:	bd70      	pop	{r4, r5, r6, pc}
        union_ok = false;
 800c7d6:	2000      	movs	r0, #0
    }

    return union_ok;
}
 800c7d8:	bd70      	pop	{r4, r5, r6, pc}

0800c7da <lv_area_join>:
 * @param a1_p pointer to the first area
 * @param a2_p pointer to the second area
 */
void lv_area_join(lv_area_t * a_res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
 800c7da:	f9b2 3000 	ldrsh.w	r3, [r2]
{
 800c7de:	b510      	push	{r4, lr}
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
 800c7e0:	f9b1 4000 	ldrsh.w	r4, [r1]
 800c7e4:	42a3      	cmp	r3, r4
 800c7e6:	bfa8      	it	ge
 800c7e8:	4623      	movge	r3, r4
 800c7ea:	8003      	strh	r3, [r0, #0]
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
 800c7ec:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 800c7f0:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 800c7f4:	42a3      	cmp	r3, r4
 800c7f6:	bfa8      	it	ge
 800c7f8:	4623      	movge	r3, r4
 800c7fa:	8043      	strh	r3, [r0, #2]
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
 800c7fc:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 800c800:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 800c804:	42a3      	cmp	r3, r4
 800c806:	bfb8      	it	lt
 800c808:	4623      	movlt	r3, r4
 800c80a:	8083      	strh	r3, [r0, #4]
    a_res_p->y2 = LV_MATH_MAX(a1_p->y2, a2_p->y2);
 800c80c:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 800c810:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 800c814:	4293      	cmp	r3, r2
 800c816:	bfb8      	it	lt
 800c818:	4613      	movlt	r3, r2
 800c81a:	80c3      	strh	r3, [r0, #6]
 800c81c:	bd10      	pop	{r4, pc}

0800c81e <lv_area_is_on>:
 * @param a2_p pointer to an other area
 * @return false: a1_p and a2_p has no common parts
 */
bool lv_area_is_on(const lv_area_t * a1_p, const lv_area_t * a2_p)
{
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
 800c81e:	f9b0 2000 	ldrsh.w	r2, [r0]
 800c822:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800c826:	429a      	cmp	r2, r3
 800c828:	dc14      	bgt.n	800c854 <lv_area_is_on+0x36>
 800c82a:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800c82e:	f9b1 3000 	ldrsh.w	r3, [r1]
 800c832:	429a      	cmp	r2, r3
 800c834:	db0e      	blt.n	800c854 <lv_area_is_on+0x36>
 800c836:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800c83a:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800c83e:	429a      	cmp	r2, r3
 800c840:	dc08      	bgt.n	800c854 <lv_area_is_on+0x36>
 800c842:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800c846:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800c84a:	4298      	cmp	r0, r3
 800c84c:	bfb4      	ite	lt
 800c84e:	2000      	movlt	r0, #0
 800c850:	2001      	movge	r0, #1
 800c852:	4770      	bx	lr
        return true;
    } else {
        return false;
 800c854:	2000      	movs	r0, #0
    }
}
 800c856:	4770      	bx	lr

0800c858 <lv_area_is_in>:
 */
bool lv_area_is_in(const lv_area_t * ain_p, const lv_area_t * aholder_p)
{
    bool is_in = false;

    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 800c858:	f9b0 2000 	ldrsh.w	r2, [r0]
 800c85c:	f9b1 3000 	ldrsh.w	r3, [r1]
 800c860:	429a      	cmp	r2, r3
 800c862:	db14      	blt.n	800c88e <lv_area_is_in+0x36>
 800c864:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800c868:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800c86c:	429a      	cmp	r2, r3
 800c86e:	db0e      	blt.n	800c88e <lv_area_is_in+0x36>
 800c870:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800c874:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800c878:	429a      	cmp	r2, r3
 800c87a:	dc08      	bgt.n	800c88e <lv_area_is_in+0x36>
 800c87c:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800c880:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800c884:	4298      	cmp	r0, r3
 800c886:	bfcc      	ite	gt
 800c888:	2000      	movgt	r0, #0
 800c88a:	2001      	movle	r0, #1
 800c88c:	4770      	bx	lr
    bool is_in = false;
 800c88e:	2000      	movs	r0, #0
       ain_p->y2 <= aholder_p->y2) {
        is_in = true;
    }

    return is_in;
}
 800c890:	4770      	bx	lr

0800c892 <lv_circ_init>:
 * @param tmp point to a variable. It will store temporary data
 * @param radius radius of the circle
 */
void lv_circ_init(lv_point_t * c, lv_coord_t * tmp, lv_coord_t radius)
{
    c->x = radius;
 800c892:	8002      	strh	r2, [r0, #0]
    c->y = 0;
 800c894:	2300      	movs	r3, #0
    *tmp = 1 - radius;
 800c896:	f1c2 0201 	rsb	r2, r2, #1
    c->y = 0;
 800c89a:	8043      	strh	r3, [r0, #2]
    *tmp = 1 - radius;
 800c89c:	800a      	strh	r2, [r1, #0]
 800c89e:	4770      	bx	lr

0800c8a0 <lv_circ_cont>:
 * @param c same as in circ_init
 * @return true if the circle is not ready yet
 */
bool lv_circ_cont(lv_point_t * c)
{
    return c->y <= c->x ? true : false;
 800c8a0:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800c8a4:	f9b0 0000 	ldrsh.w	r0, [r0]
}
 800c8a8:	4282      	cmp	r2, r0
 800c8aa:	bfcc      	ite	gt
 800c8ac:	2000      	movgt	r0, #0
 800c8ae:	2001      	movle	r0, #1
 800c8b0:	4770      	bx	lr

0800c8b2 <lv_circ_next>:
 * @param c same as in circ_init. The next point stored here.
 * @param tmp same as in circ_init.
 */
void lv_circ_next(lv_point_t * c, lv_coord_t * tmp)
{
    c->y++;
 800c8b2:	8842      	ldrh	r2, [r0, #2]
 800c8b4:	3201      	adds	r2, #1
{
 800c8b6:	b530      	push	{r4, r5, lr}
    c->y++;
 800c8b8:	b294      	uxth	r4, r2
 800c8ba:	b225      	sxth	r5, r4
 800c8bc:	8045      	strh	r5, [r0, #2]

    if(*tmp <= 0) {
 800c8be:	f9b1 2000 	ldrsh.w	r2, [r1]
 800c8c2:	2a00      	cmp	r2, #0
 800c8c4:	dc04      	bgt.n	800c8d0 <lv_circ_next+0x1e>
        (*tmp) += 2 * c->y + 1; // Change in decision criterion for y -> y+1
 800c8c6:	3201      	adds	r2, #1
 800c8c8:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 800c8cc:	800a      	strh	r2, [r1, #0]
 800c8ce:	bd30      	pop	{r4, r5, pc}
    } else {
        c->x--;
 800c8d0:	8803      	ldrh	r3, [r0, #0]
 800c8d2:	3b01      	subs	r3, #1
 800c8d4:	b21b      	sxth	r3, r3
 800c8d6:	8003      	strh	r3, [r0, #0]
        (*tmp) += 2 * (c->y - c->x) + 1; // Change for y -> y+1, x -> x-1
 800c8d8:	1aed      	subs	r5, r5, r3
 800c8da:	880b      	ldrh	r3, [r1, #0]
 800c8dc:	3301      	adds	r3, #1
 800c8de:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 800c8e2:	800b      	strh	r3, [r1, #0]
 800c8e4:	bd30      	pop	{r4, r5, pc}

0800c8e6 <lv_fs_get_real_path>:
static const char * lv_fs_get_real_path(const char * path)
{
    /* Example path: "S:/folder/file.txt"
     * Leave the letter and the : / \ characters*/

    path++; /*Ignore the driver letter*/
 800c8e6:	1c42      	adds	r2, r0, #1
 800c8e8:	4610      	mov	r0, r2

    while(*path != '\0') {
 800c8ea:	f812 3b01 	ldrb.w	r3, [r2], #1
 800c8ee:	b12b      	cbz	r3, 800c8fc <lv_fs_get_real_path+0x16>
        if(*path == ':' || *path == '\\' || *path == '/') {
 800c8f0:	2b3a      	cmp	r3, #58	; 0x3a
 800c8f2:	d0f9      	beq.n	800c8e8 <lv_fs_get_real_path+0x2>
 800c8f4:	2b5c      	cmp	r3, #92	; 0x5c
 800c8f6:	d0f7      	beq.n	800c8e8 <lv_fs_get_real_path+0x2>
 800c8f8:	2b2f      	cmp	r3, #47	; 0x2f
 800c8fa:	d0f5      	beq.n	800c8e8 <lv_fs_get_real_path+0x2>
            break;
        }
    }

    return path;
}
 800c8fc:	4770      	bx	lr
	...

0800c900 <lv_fs_get_drv>:
 * Give a pointer to a driver from its letter
 * @param letter the driver letter
 * @return pointer to a driver or NULL if not found
 */
static lv_fs_drv_t * lv_fs_get_drv(char letter)
{
 800c900:	b538      	push	{r3, r4, r5, lr}
 800c902:	4604      	mov	r4, r0
    lv_fs_drv_t * drv;

    LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv)
 800c904:	4806      	ldr	r0, [pc, #24]	; (800c920 <lv_fs_get_drv+0x20>)
 800c906:	4d06      	ldr	r5, [pc, #24]	; (800c920 <lv_fs_get_drv+0x20>)
 800c908:	f000 f907 	bl	800cb1a <lv_ll_get_head>
 800c90c:	b900      	cbnz	r0, 800c910 <lv_fs_get_drv+0x10>
            return drv;
        }
    }

    return NULL;
}
 800c90e:	bd38      	pop	{r3, r4, r5, pc}
        if(drv->letter == letter) {
 800c910:	7803      	ldrb	r3, [r0, #0]
 800c912:	42a3      	cmp	r3, r4
 800c914:	d0fb      	beq.n	800c90e <lv_fs_get_drv+0xe>
    LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv)
 800c916:	4601      	mov	r1, r0
 800c918:	4628      	mov	r0, r5
 800c91a:	f000 f904 	bl	800cb26 <lv_ll_get_next>
 800c91e:	e7f5      	b.n	800c90c <lv_fs_get_drv+0xc>
 800c920:	2000d8fc 	.word	0x2000d8fc

0800c924 <lv_fs_init>:
    lv_ll_init(&LV_GC_ROOT(_lv_drv_ll), sizeof(lv_fs_drv_t));
 800c924:	2148      	movs	r1, #72	; 0x48
 800c926:	4801      	ldr	r0, [pc, #4]	; (800c92c <lv_fs_init+0x8>)
 800c928:	f000 b8b1 	b.w	800ca8e <lv_ll_init>
 800c92c:	2000d8fc 	.word	0x2000d8fc

0800c930 <lv_fs_open>:
    file_p->drv    = NULL;
 800c930:	2300      	movs	r3, #0
{
 800c932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c936:	4604      	mov	r4, r0
 800c938:	4690      	mov	r8, r2
    file_p->drv    = NULL;
 800c93a:	6043      	str	r3, [r0, #4]
    file_p->file_d = NULL;
 800c93c:	6003      	str	r3, [r0, #0]
    if(path == NULL) return LV_FS_RES_INV_PARAM;
 800c93e:	460d      	mov	r5, r1
 800c940:	2900      	cmp	r1, #0
 800c942:	d033      	beq.n	800c9ac <lv_fs_open+0x7c>
    file_p->drv = lv_fs_get_drv(letter);
 800c944:	7808      	ldrb	r0, [r1, #0]
 800c946:	f7ff ffdb 	bl	800c900 <lv_fs_get_drv>
 800c94a:	6060      	str	r0, [r4, #4]
    if(file_p->drv == NULL) {
 800c94c:	b920      	cbnz	r0, 800c958 <lv_fs_open+0x28>
        file_p->file_d = NULL;
 800c94e:	6020      	str	r0, [r4, #0]
        return LV_FS_RES_NOT_EX;
 800c950:	2503      	movs	r5, #3
}
 800c952:	4628      	mov	r0, r5
 800c954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(file_p->drv->ready_cb != NULL) {
 800c958:	6883      	ldr	r3, [r0, #8]
 800c95a:	b12b      	cbz	r3, 800c968 <lv_fs_open+0x38>
        if(file_p->drv->ready_cb(file_p->drv) == false) {
 800c95c:	4798      	blx	r3
 800c95e:	b918      	cbnz	r0, 800c968 <lv_fs_open+0x38>
            file_p->drv    = NULL;
 800c960:	6060      	str	r0, [r4, #4]
            file_p->file_d = NULL;
 800c962:	6020      	str	r0, [r4, #0]
            return LV_FS_RES_HW_ERR;
 800c964:	2501      	movs	r5, #1
 800c966:	e7f4      	b.n	800c952 <lv_fs_open+0x22>
    file_p->file_d = lv_mem_alloc(file_p->drv->file_size);
 800c968:	6863      	ldr	r3, [r4, #4]
 800c96a:	8858      	ldrh	r0, [r3, #2]
 800c96c:	f000 fa22 	bl	800cdb4 <lv_mem_alloc>
 800c970:	4601      	mov	r1, r0
 800c972:	6020      	str	r0, [r4, #0]
    lv_mem_assert(file_p->file_d);
 800c974:	b930      	cbnz	r0, 800c984 <lv_fs_open+0x54>
 800c976:	4b0f      	ldr	r3, [pc, #60]	; (800c9b4 <lv_fs_open+0x84>)
 800c978:	490f      	ldr	r1, [pc, #60]	; (800c9b8 <lv_fs_open+0x88>)
 800c97a:	226f      	movs	r2, #111	; 0x6f
 800c97c:	2003      	movs	r0, #3
 800c97e:	f000 f9c1 	bl	800cd04 <lv_log_add>
 800c982:	e7fe      	b.n	800c982 <lv_fs_open+0x52>
    if(file_p->drv->open_cb == NULL) {
 800c984:	6867      	ldr	r7, [r4, #4]
 800c986:	68fe      	ldr	r6, [r7, #12]
 800c988:	b196      	cbz	r6, 800c9b0 <lv_fs_open+0x80>
    const char * real_path = lv_fs_get_real_path(path);
 800c98a:	4628      	mov	r0, r5
 800c98c:	f7ff ffab 	bl	800c8e6 <lv_fs_get_real_path>
    lv_fs_res_t res        = file_p->drv->open_cb(file_p->drv, file_p->file_d, real_path, mode);
 800c990:	4643      	mov	r3, r8
 800c992:	4602      	mov	r2, r0
 800c994:	4638      	mov	r0, r7
 800c996:	47b0      	blx	r6
    if(res != LV_FS_RES_OK) {
 800c998:	4605      	mov	r5, r0
 800c99a:	2800      	cmp	r0, #0
 800c99c:	d0d9      	beq.n	800c952 <lv_fs_open+0x22>
        lv_mem_free(file_p->file_d);
 800c99e:	6820      	ldr	r0, [r4, #0]
 800c9a0:	f000 fa4a 	bl	800ce38 <lv_mem_free>
        file_p->file_d = NULL;
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	6023      	str	r3, [r4, #0]
        file_p->drv    = NULL;
 800c9a8:	6063      	str	r3, [r4, #4]
 800c9aa:	e7d2      	b.n	800c952 <lv_fs_open+0x22>
    if(path == NULL) return LV_FS_RES_INV_PARAM;
 800c9ac:	250b      	movs	r5, #11
 800c9ae:	e7d0      	b.n	800c952 <lv_fs_open+0x22>
        return LV_FS_RES_NOT_IMP;
 800c9b0:	2509      	movs	r5, #9
 800c9b2:	e7ce      	b.n	800c952 <lv_fs_open+0x22>
 800c9b4:	080107dd 	.word	0x080107dd
 800c9b8:	08012f67 	.word	0x08012f67

0800c9bc <lv_fs_close>:
{
 800c9bc:	b538      	push	{r3, r4, r5, lr}
 800c9be:	4604      	mov	r4, r0
    if(file_p->drv == NULL) {
 800c9c0:	6840      	ldr	r0, [r0, #4]
 800c9c2:	b160      	cbz	r0, 800c9de <lv_fs_close+0x22>
    if(file_p->drv->close_cb == NULL) {
 800c9c4:	6903      	ldr	r3, [r0, #16]
 800c9c6:	b163      	cbz	r3, 800c9e2 <lv_fs_close+0x26>
    lv_fs_res_t res = file_p->drv->close_cb(file_p->drv, file_p->file_d);
 800c9c8:	6821      	ldr	r1, [r4, #0]
 800c9ca:	4798      	blx	r3
 800c9cc:	4605      	mov	r5, r0
    lv_mem_free(file_p->file_d); /*Clean up*/
 800c9ce:	6820      	ldr	r0, [r4, #0]
 800c9d0:	f000 fa32 	bl	800ce38 <lv_mem_free>
    file_p->file_d = NULL;
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	6023      	str	r3, [r4, #0]
    file_p->drv    = NULL;
 800c9d8:	6063      	str	r3, [r4, #4]
}
 800c9da:	4628      	mov	r0, r5
 800c9dc:	bd38      	pop	{r3, r4, r5, pc}
        return LV_FS_RES_INV_PARAM;
 800c9de:	250b      	movs	r5, #11
 800c9e0:	e7fb      	b.n	800c9da <lv_fs_close+0x1e>
        return LV_FS_RES_NOT_IMP;
 800c9e2:	2509      	movs	r5, #9
 800c9e4:	e7f9      	b.n	800c9da <lv_fs_close+0x1e>

0800c9e6 <lv_fs_read>:
{
 800c9e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9e8:	4606      	mov	r6, r0
 800c9ea:	b085      	sub	sp, #20
    if(br != NULL) *br = 0;
 800c9ec:	461c      	mov	r4, r3
 800c9ee:	b10b      	cbz	r3, 800c9f4 <lv_fs_read+0xe>
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	6023      	str	r3, [r4, #0]
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 800c9f4:	6870      	ldr	r0, [r6, #4]
 800c9f6:	b178      	cbz	r0, 800ca18 <lv_fs_read+0x32>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 800c9f8:	6985      	ldr	r5, [r0, #24]
 800c9fa:	b17d      	cbz	r5, 800ca1c <lv_fs_read+0x36>
    uint32_t br_tmp = 0;
 800c9fc:	ab04      	add	r3, sp, #16
 800c9fe:	2700      	movs	r7, #0
 800ca00:	f843 7d04 	str.w	r7, [r3, #-4]!
    lv_fs_res_t res = file_p->drv->read_cb(file_p->drv, file_p->file_d, buf, btr, &br_tmp);
 800ca04:	9300      	str	r3, [sp, #0]
 800ca06:	4613      	mov	r3, r2
 800ca08:	460a      	mov	r2, r1
 800ca0a:	6831      	ldr	r1, [r6, #0]
 800ca0c:	47a8      	blx	r5
    if(br != NULL) *br = br_tmp;
 800ca0e:	b10c      	cbz	r4, 800ca14 <lv_fs_read+0x2e>
 800ca10:	9b03      	ldr	r3, [sp, #12]
 800ca12:	6023      	str	r3, [r4, #0]
}
 800ca14:	b005      	add	sp, #20
 800ca16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 800ca18:	200b      	movs	r0, #11
 800ca1a:	e7fb      	b.n	800ca14 <lv_fs_read+0x2e>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 800ca1c:	2009      	movs	r0, #9
 800ca1e:	e7f9      	b.n	800ca14 <lv_fs_read+0x2e>

0800ca20 <lv_fs_seek>:
    if(file_p->drv == NULL) {
 800ca20:	6843      	ldr	r3, [r0, #4]
{
 800ca22:	b410      	push	{r4}
 800ca24:	460a      	mov	r2, r1
    if(file_p->drv == NULL) {
 800ca26:	b13b      	cbz	r3, 800ca38 <lv_fs_seek+0x18>
    if(file_p->drv->seek_cb == NULL) {
 800ca28:	6a1c      	ldr	r4, [r3, #32]
 800ca2a:	b14c      	cbz	r4, 800ca40 <lv_fs_seek+0x20>
    lv_fs_res_t res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos);
 800ca2c:	6801      	ldr	r1, [r0, #0]
 800ca2e:	4618      	mov	r0, r3
 800ca30:	4623      	mov	r3, r4
}
 800ca32:	f85d 4b04 	ldr.w	r4, [sp], #4
    lv_fs_res_t res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos);
 800ca36:	4718      	bx	r3
        return LV_FS_RES_INV_PARAM;
 800ca38:	200b      	movs	r0, #11
}
 800ca3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca3e:	4770      	bx	lr
        return LV_FS_RES_NOT_IMP;
 800ca40:	2009      	movs	r0, #9
 800ca42:	e7fa      	b.n	800ca3a <lv_fs_seek+0x1a>

0800ca44 <lv_fs_get_ext>:
{
 800ca44:	b510      	push	{r4, lr}
 800ca46:	4604      	mov	r4, r0
    for(i = strlen(fn); i > 0; i--) {
 800ca48:	f7f3 fbcc 	bl	80001e4 <strlen>
 800ca4c:	b280      	uxth	r0, r0
 800ca4e:	b908      	cbnz	r0, 800ca54 <lv_fs_get_ext+0x10>
            return ""; /*No extension if a '\' or '/' found*/
 800ca50:	4806      	ldr	r0, [pc, #24]	; (800ca6c <lv_fs_get_ext+0x28>)
}
 800ca52:	bd10      	pop	{r4, pc}
        if(fn[i] == '.') {
 800ca54:	5c23      	ldrb	r3, [r4, r0]
 800ca56:	2b2e      	cmp	r3, #46	; 0x2e
 800ca58:	d102      	bne.n	800ca60 <lv_fs_get_ext+0x1c>
            return &fn[i + 1];
 800ca5a:	3001      	adds	r0, #1
 800ca5c:	4420      	add	r0, r4
 800ca5e:	bd10      	pop	{r4, pc}
        } else if(fn[i] == '/' || fn[i] == '\\') {
 800ca60:	2b2f      	cmp	r3, #47	; 0x2f
 800ca62:	d0f5      	beq.n	800ca50 <lv_fs_get_ext+0xc>
 800ca64:	2b5c      	cmp	r3, #92	; 0x5c
 800ca66:	d0f3      	beq.n	800ca50 <lv_fs_get_ext+0xc>
    for(i = strlen(fn); i > 0; i--) {
 800ca68:	3801      	subs	r0, #1
 800ca6a:	e7ef      	b.n	800ca4c <lv_fs_get_ext+0x8>
 800ca6c:	080104aa 	.word	0x080104aa

0800ca70 <node_set_next.isra.0>:
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
{
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 800ca70:	b131      	cbz	r1, 800ca80 <node_set_next.isra.0+0x10>
 800ca72:	6803      	ldr	r3, [r0, #0]

    uint32_t node_p_size = sizeof(lv_ll_node_t *);
    if(next)
 800ca74:	b112      	cbz	r2, 800ca7c <node_set_next.isra.0+0xc>
        memcpy(act + LL_NEXT_P_OFFSET(ll_p), &next, node_p_size);
 800ca76:	4419      	add	r1, r3
 800ca78:	604a      	str	r2, [r1, #4]
 800ca7a:	4770      	bx	lr
    else
        memset(act + LL_NEXT_P_OFFSET(ll_p), 0, node_p_size);
 800ca7c:	3304      	adds	r3, #4
 800ca7e:	50ca      	str	r2, [r1, r3]
 800ca80:	4770      	bx	lr

0800ca82 <node_set_prev.isra.2>:
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 800ca82:	b119      	cbz	r1, 800ca8c <node_set_prev.isra.2+0xa>
 800ca84:	6803      	ldr	r3, [r0, #0]
        memcpy(act + LL_PREV_P_OFFSET(ll_p), &prev, node_p_size);
 800ca86:	50ca      	str	r2, [r1, r3]
    if(prev)
 800ca88:	b102      	cbz	r2, 800ca8c <node_set_prev.isra.2+0xa>
 800ca8a:	4770      	bx	lr
 800ca8c:	4770      	bx	lr

0800ca8e <lv_ll_init>:
    ll_p->head = NULL;
 800ca8e:	2300      	movs	r3, #0
 800ca90:	6043      	str	r3, [r0, #4]
    ll_p->tail = NULL;
 800ca92:	6083      	str	r3, [r0, #8]
    if(node_size & 0x3) {
 800ca94:	078b      	lsls	r3, r1, #30
        node_size = node_size & (~0x3);
 800ca96:	bf1c      	itt	ne
 800ca98:	f021 0103 	bicne.w	r1, r1, #3
        node_size += 4;
 800ca9c:	3104      	addne	r1, #4
    ll_p->n_size = node_size;
 800ca9e:	6001      	str	r1, [r0, #0]
 800caa0:	4770      	bx	lr

0800caa2 <lv_ll_ins_head>:
{
 800caa2:	b538      	push	{r3, r4, r5, lr}
 800caa4:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 800caa6:	6800      	ldr	r0, [r0, #0]
 800caa8:	3008      	adds	r0, #8
 800caaa:	f000 f983 	bl	800cdb4 <lv_mem_alloc>
    if(n_new != NULL) {
 800caae:	4605      	mov	r5, r0
 800cab0:	b198      	cbz	r0, 800cada <lv_ll_ins_head+0x38>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
 800cab2:	4601      	mov	r1, r0
 800cab4:	2200      	movs	r2, #0
 800cab6:	4620      	mov	r0, r4
 800cab8:	f7ff ffe3 	bl	800ca82 <node_set_prev.isra.2>
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
 800cabc:	4629      	mov	r1, r5
 800cabe:	6862      	ldr	r2, [r4, #4]
 800cac0:	4620      	mov	r0, r4
 800cac2:	f7ff ffd5 	bl	800ca70 <node_set_next.isra.0>
        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
 800cac6:	6861      	ldr	r1, [r4, #4]
 800cac8:	b119      	cbz	r1, 800cad2 <lv_ll_ins_head+0x30>
            node_set_prev(ll_p, ll_p->head, n_new);
 800caca:	462a      	mov	r2, r5
 800cacc:	4620      	mov	r0, r4
 800cace:	f7ff ffd8 	bl	800ca82 <node_set_prev.isra.2>
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 800cad2:	68a3      	ldr	r3, [r4, #8]
        ll_p->head = n_new;      /*Set the new head in the dsc.*/
 800cad4:	6065      	str	r5, [r4, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 800cad6:	b903      	cbnz	r3, 800cada <lv_ll_ins_head+0x38>
            ll_p->tail = n_new;
 800cad8:	60a5      	str	r5, [r4, #8]
}
 800cada:	4628      	mov	r0, r5
 800cadc:	bd38      	pop	{r3, r4, r5, pc}

0800cade <lv_ll_ins_tail>:
{
 800cade:	b538      	push	{r3, r4, r5, lr}
 800cae0:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 800cae2:	6800      	ldr	r0, [r0, #0]
 800cae4:	3008      	adds	r0, #8
 800cae6:	f000 f965 	bl	800cdb4 <lv_mem_alloc>
    if(n_new == NULL) return NULL;
 800caea:	4605      	mov	r5, r0
 800caec:	b198      	cbz	r0, 800cb16 <lv_ll_ins_tail+0x38>
        node_set_next(ll_p, n_new, NULL);       /*No next after the new tail*/
 800caee:	4601      	mov	r1, r0
 800caf0:	2200      	movs	r2, #0
 800caf2:	4620      	mov	r0, r4
 800caf4:	f7ff ffbc 	bl	800ca70 <node_set_next.isra.0>
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is tho old tail*/
 800caf8:	4629      	mov	r1, r5
 800cafa:	68a2      	ldr	r2, [r4, #8]
 800cafc:	4620      	mov	r0, r4
 800cafe:	f7ff ffc0 	bl	800ca82 <node_set_prev.isra.2>
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
 800cb02:	68a1      	ldr	r1, [r4, #8]
 800cb04:	b119      	cbz	r1, 800cb0e <lv_ll_ins_tail+0x30>
            node_set_next(ll_p, ll_p->tail, n_new);
 800cb06:	462a      	mov	r2, r5
 800cb08:	4620      	mov	r0, r4
 800cb0a:	f7ff ffb1 	bl	800ca70 <node_set_next.isra.0>
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 800cb0e:	6863      	ldr	r3, [r4, #4]
        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
 800cb10:	60a5      	str	r5, [r4, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 800cb12:	b903      	cbnz	r3, 800cb16 <lv_ll_ins_tail+0x38>
            ll_p->head = n_new;
 800cb14:	6065      	str	r5, [r4, #4]
}
 800cb16:	4628      	mov	r0, r5
 800cb18:	bd38      	pop	{r3, r4, r5, pc}

0800cb1a <lv_ll_get_head>:
    if(ll_p != NULL) {
 800cb1a:	b100      	cbz	r0, 800cb1e <lv_ll_get_head+0x4>
        head = ll_p->head;
 800cb1c:	6840      	ldr	r0, [r0, #4]
}
 800cb1e:	4770      	bx	lr

0800cb20 <lv_ll_get_tail>:
    if(ll_p != NULL) {
 800cb20:	b100      	cbz	r0, 800cb24 <lv_ll_get_tail+0x4>
        tail = ll_p->tail;
 800cb22:	6880      	ldr	r0, [r0, #8]
}
 800cb24:	4770      	bx	lr

0800cb26 <lv_ll_get_next>:
    if(ll_p != NULL) {
 800cb26:	b110      	cbz	r0, 800cb2e <lv_ll_get_next+0x8>
        memcpy(&next, n_act_d + LL_NEXT_P_OFFSET(ll_p), sizeof(void *));
 800cb28:	6803      	ldr	r3, [r0, #0]
 800cb2a:	4419      	add	r1, r3
 800cb2c:	6848      	ldr	r0, [r1, #4]
}
 800cb2e:	4770      	bx	lr

0800cb30 <lv_ll_get_prev>:
    if(ll_p != NULL) {
 800cb30:	b108      	cbz	r0, 800cb36 <lv_ll_get_prev+0x6>
        memcpy(&prev, n_act_d + LL_PREV_P_OFFSET(ll_p), sizeof(void *));
 800cb32:	6803      	ldr	r3, [r0, #0]
 800cb34:	58c8      	ldr	r0, [r1, r3]
}
 800cb36:	4770      	bx	lr

0800cb38 <lv_ll_ins_prev>:
{
 800cb38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb3a:	460c      	mov	r4, r1
    if(NULL == ll_p || NULL == n_act) return NULL;
 800cb3c:	4605      	mov	r5, r0
 800cb3e:	b340      	cbz	r0, 800cb92 <lv_ll_ins_prev+0x5a>
 800cb40:	b341      	cbz	r1, 800cb94 <lv_ll_ins_prev+0x5c>
    if(lv_ll_get_head(ll_p) == n_act) {
 800cb42:	6843      	ldr	r3, [r0, #4]
 800cb44:	4299      	cmp	r1, r3
 800cb46:	d103      	bne.n	800cb50 <lv_ll_ins_prev+0x18>
}
 800cb48:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        n_new = lv_ll_ins_head(ll_p);
 800cb4c:	f7ff bfa9 	b.w	800caa2 <lv_ll_ins_head>
        n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 800cb50:	6800      	ldr	r0, [r0, #0]
 800cb52:	3008      	adds	r0, #8
 800cb54:	f000 f92e 	bl	800cdb4 <lv_mem_alloc>
        if(n_new == NULL) return NULL;
 800cb58:	4606      	mov	r6, r0
 800cb5a:	b1c0      	cbz	r0, 800cb8e <lv_ll_ins_prev+0x56>
        n_prev = lv_ll_get_prev(ll_p, n_act);
 800cb5c:	4621      	mov	r1, r4
 800cb5e:	4628      	mov	r0, r5
 800cb60:	f7ff ffe6 	bl	800cb30 <lv_ll_get_prev>
        node_set_next(ll_p, n_prev, n_new);
 800cb64:	4632      	mov	r2, r6
 800cb66:	4601      	mov	r1, r0
        n_prev = lv_ll_get_prev(ll_p, n_act);
 800cb68:	4607      	mov	r7, r0
        node_set_next(ll_p, n_prev, n_new);
 800cb6a:	4628      	mov	r0, r5
 800cb6c:	f7ff ff80 	bl	800ca70 <node_set_next.isra.0>
        node_set_prev(ll_p, n_new, n_prev);
 800cb70:	463a      	mov	r2, r7
 800cb72:	4631      	mov	r1, r6
 800cb74:	4628      	mov	r0, r5
 800cb76:	f7ff ff84 	bl	800ca82 <node_set_prev.isra.2>
        node_set_prev(ll_p, n_act, n_new);
 800cb7a:	4632      	mov	r2, r6
 800cb7c:	4621      	mov	r1, r4
 800cb7e:	4628      	mov	r0, r5
 800cb80:	f7ff ff7f 	bl	800ca82 <node_set_prev.isra.2>
        node_set_next(ll_p, n_new, n_act);
 800cb84:	4622      	mov	r2, r4
 800cb86:	4631      	mov	r1, r6
 800cb88:	4628      	mov	r0, r5
 800cb8a:	f7ff ff71 	bl	800ca70 <node_set_next.isra.0>
        if(n_new == NULL) return NULL;
 800cb8e:	4634      	mov	r4, r6
 800cb90:	e000      	b.n	800cb94 <lv_ll_ins_prev+0x5c>
    if(NULL == ll_p || NULL == n_act) return NULL;
 800cb92:	4604      	mov	r4, r0
}
 800cb94:	4620      	mov	r0, r4
 800cb96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cb98 <lv_ll_rem>:
{
 800cb98:	b570      	push	{r4, r5, r6, lr}
 800cb9a:	460a      	mov	r2, r1
    if(ll_p != NULL) {
 800cb9c:	4604      	mov	r4, r0
 800cb9e:	b308      	cbz	r0, 800cbe4 <lv_ll_rem+0x4c>
    if(lv_ll_get_head(ll_p) == node_p) {
 800cba0:	6843      	ldr	r3, [r0, #4]
 800cba2:	4299      	cmp	r1, r3
 800cba4:	d10e      	bne.n	800cbc4 <lv_ll_rem+0x2c>
        ll_p->head = lv_ll_get_next(ll_p, node_p);
 800cba6:	4611      	mov	r1, r2
 800cba8:	4620      	mov	r0, r4
 800cbaa:	f7ff ffbc 	bl	800cb26 <lv_ll_get_next>
 800cbae:	4601      	mov	r1, r0
 800cbb0:	6060      	str	r0, [r4, #4]
        if(ll_p->head == NULL) {
 800cbb2:	b908      	cbnz	r0, 800cbb8 <lv_ll_rem+0x20>
            ll_p->tail = NULL;
 800cbb4:	60a0      	str	r0, [r4, #8]
 800cbb6:	bd70      	pop	{r4, r5, r6, pc}
            node_set_prev(ll_p, ll_p->head, NULL);
 800cbb8:	2200      	movs	r2, #0
        node_set_prev(ll_p, n_next, n_prev);
 800cbba:	4620      	mov	r0, r4
}
 800cbbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        node_set_prev(ll_p, n_next, n_prev);
 800cbc0:	f7ff bf5f 	b.w	800ca82 <node_set_prev.isra.2>
    } else if(lv_ll_get_tail(ll_p) == node_p) {
 800cbc4:	6883      	ldr	r3, [r0, #8]
 800cbc6:	4299      	cmp	r1, r3
 800cbc8:	d10e      	bne.n	800cbe8 <lv_ll_rem+0x50>
        ll_p->tail = lv_ll_get_prev(ll_p, node_p);
 800cbca:	f7ff ffb1 	bl	800cb30 <lv_ll_get_prev>
 800cbce:	4601      	mov	r1, r0
 800cbd0:	60a0      	str	r0, [r4, #8]
        if(ll_p->tail == NULL) {
 800cbd2:	b908      	cbnz	r0, 800cbd8 <lv_ll_rem+0x40>
            ll_p->head = NULL;
 800cbd4:	6060      	str	r0, [r4, #4]
 800cbd6:	bd70      	pop	{r4, r5, r6, pc}
            node_set_next(ll_p, ll_p->tail, NULL);
 800cbd8:	4620      	mov	r0, r4
 800cbda:	2200      	movs	r2, #0
}
 800cbdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            node_set_next(ll_p, ll_p->tail, NULL);
 800cbe0:	f7ff bf46 	b.w	800ca70 <node_set_next.isra.0>
    if(lv_ll_get_head(ll_p) == node_p) {
 800cbe4:	2900      	cmp	r1, #0
 800cbe6:	d0de      	beq.n	800cba6 <lv_ll_rem+0xe>
        lv_ll_node_t * n_prev = lv_ll_get_prev(ll_p, node_p);
 800cbe8:	4611      	mov	r1, r2
 800cbea:	4620      	mov	r0, r4
 800cbec:	f7ff ffa0 	bl	800cb30 <lv_ll_get_prev>
 800cbf0:	4606      	mov	r6, r0
        lv_ll_node_t * n_next = lv_ll_get_next(ll_p, node_p);
 800cbf2:	4611      	mov	r1, r2
 800cbf4:	4620      	mov	r0, r4
 800cbf6:	f7ff ff96 	bl	800cb26 <lv_ll_get_next>
        node_set_next(ll_p, n_prev, n_next);
 800cbfa:	4631      	mov	r1, r6
 800cbfc:	4602      	mov	r2, r0
        lv_ll_node_t * n_next = lv_ll_get_next(ll_p, node_p);
 800cbfe:	4605      	mov	r5, r0
        node_set_next(ll_p, n_prev, n_next);
 800cc00:	4620      	mov	r0, r4
 800cc02:	f7ff ff35 	bl	800ca70 <node_set_next.isra.0>
        node_set_prev(ll_p, n_next, n_prev);
 800cc06:	4632      	mov	r2, r6
 800cc08:	4629      	mov	r1, r5
 800cc0a:	e7d6      	b.n	800cbba <lv_ll_rem+0x22>

0800cc0c <lv_ll_chg_list>:
{
 800cc0c:	b570      	push	{r4, r5, r6, lr}
 800cc0e:	460c      	mov	r4, r1
 800cc10:	461e      	mov	r6, r3
    lv_ll_rem(ll_ori_p, node);
 800cc12:	4611      	mov	r1, r2
{
 800cc14:	4615      	mov	r5, r2
    lv_ll_rem(ll_ori_p, node);
 800cc16:	f7ff ffbf 	bl	800cb98 <lv_ll_rem>
    if(head) {
 800cc1a:	b1a6      	cbz	r6, 800cc46 <lv_ll_chg_list+0x3a>
        node_set_prev(ll_new_p, node, NULL);
 800cc1c:	2200      	movs	r2, #0
 800cc1e:	4629      	mov	r1, r5
 800cc20:	4620      	mov	r0, r4
 800cc22:	f7ff ff2e 	bl	800ca82 <node_set_prev.isra.2>
        node_set_next(ll_new_p, node, ll_new_p->head);
 800cc26:	4629      	mov	r1, r5
 800cc28:	6862      	ldr	r2, [r4, #4]
 800cc2a:	4620      	mov	r0, r4
 800cc2c:	f7ff ff20 	bl	800ca70 <node_set_next.isra.0>
        if(ll_new_p->head != NULL) { /*If there is old head then before it goes the new*/
 800cc30:	6861      	ldr	r1, [r4, #4]
 800cc32:	b119      	cbz	r1, 800cc3c <lv_ll_chg_list+0x30>
            node_set_prev(ll_new_p, ll_new_p->head, node);
 800cc34:	462a      	mov	r2, r5
 800cc36:	4620      	mov	r0, r4
 800cc38:	f7ff ff23 	bl	800ca82 <node_set_prev.isra.2>
        if(ll_new_p->tail == NULL) { /*If there is no tail (first node) set the tail too*/
 800cc3c:	68a3      	ldr	r3, [r4, #8]
        ll_new_p->head = node;       /*Set the new head in the dsc.*/
 800cc3e:	6065      	str	r5, [r4, #4]
        if(ll_new_p->tail == NULL) { /*If there is no tail (first node) set the tail too*/
 800cc40:	b9ab      	cbnz	r3, 800cc6e <lv_ll_chg_list+0x62>
            ll_new_p->tail = node;
 800cc42:	60a5      	str	r5, [r4, #8]
 800cc44:	bd70      	pop	{r4, r5, r6, pc}
        node_set_prev(ll_new_p, node, ll_new_p->tail);
 800cc46:	68a2      	ldr	r2, [r4, #8]
 800cc48:	4629      	mov	r1, r5
 800cc4a:	4620      	mov	r0, r4
 800cc4c:	f7ff ff19 	bl	800ca82 <node_set_prev.isra.2>
        node_set_next(ll_new_p, node, NULL);
 800cc50:	4629      	mov	r1, r5
 800cc52:	4632      	mov	r2, r6
 800cc54:	4620      	mov	r0, r4
 800cc56:	f7ff ff0b 	bl	800ca70 <node_set_next.isra.0>
        if(ll_new_p->tail != NULL) { /*If there is old tail then after it goes the new*/
 800cc5a:	68a1      	ldr	r1, [r4, #8]
 800cc5c:	b119      	cbz	r1, 800cc66 <lv_ll_chg_list+0x5a>
            node_set_next(ll_new_p, ll_new_p->tail, node);
 800cc5e:	462a      	mov	r2, r5
 800cc60:	4620      	mov	r0, r4
 800cc62:	f7ff ff05 	bl	800ca70 <node_set_next.isra.0>
        if(ll_new_p->head == NULL) { /*If there is no head (first node) set the head too*/
 800cc66:	6863      	ldr	r3, [r4, #4]
        ll_new_p->tail = node;       /*Set the new tail in the dsc.*/
 800cc68:	60a5      	str	r5, [r4, #8]
        if(ll_new_p->head == NULL) { /*If there is no head (first node) set the head too*/
 800cc6a:	b903      	cbnz	r3, 800cc6e <lv_ll_chg_list+0x62>
            ll_new_p->head = node;
 800cc6c:	6065      	str	r5, [r4, #4]
 800cc6e:	bd70      	pop	{r4, r5, r6, pc}

0800cc70 <lv_ll_move_before>:
    if(n_act == n_after) return; /*Can't move before itself*/
 800cc70:	4291      	cmp	r1, r2
{
 800cc72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc74:	4605      	mov	r5, r0
 800cc76:	460c      	mov	r4, r1
 800cc78:	4616      	mov	r6, r2
    if(n_act == n_after) return; /*Can't move before itself*/
 800cc7a:	d042      	beq.n	800cd02 <lv_ll_move_before+0x92>
    if(n_after != NULL)
 800cc7c:	b132      	cbz	r2, 800cc8c <lv_ll_move_before+0x1c>
        n_before = lv_ll_get_prev(ll_p, n_after);
 800cc7e:	4611      	mov	r1, r2
 800cc80:	f7ff ff56 	bl	800cb30 <lv_ll_get_prev>
    if(n_act == n_before) return; /*Already before `n_after`*/
 800cc84:	4284      	cmp	r4, r0
        n_before = lv_ll_get_prev(ll_p, n_after);
 800cc86:	4607      	mov	r7, r0
    if(n_act == n_before) return; /*Already before `n_after`*/
 800cc88:	d121      	bne.n	800ccce <lv_ll_move_before+0x5e>
 800cc8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(ll_p != NULL) {
 800cc8c:	b100      	cbz	r0, 800cc90 <lv_ll_move_before+0x20>
        tail = ll_p->tail;
 800cc8e:	6886      	ldr	r6, [r0, #8]
    if(n_act == n_before) return; /*Already before `n_after`*/
 800cc90:	42b4      	cmp	r4, r6
 800cc92:	d100      	bne.n	800cc96 <lv_ll_move_before+0x26>
 800cc94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_ll_rem(ll_p, n_act);
 800cc96:	4621      	mov	r1, r4
 800cc98:	4628      	mov	r0, r5
 800cc9a:	f7ff ff7d 	bl	800cb98 <lv_ll_rem>
    node_set_next(ll_p, n_before, n_act);
 800cc9e:	4622      	mov	r2, r4
 800cca0:	4631      	mov	r1, r6
 800cca2:	4628      	mov	r0, r5
 800cca4:	f7ff fee4 	bl	800ca70 <node_set_next.isra.0>
    node_set_prev(ll_p, n_act, n_before);
 800cca8:	4632      	mov	r2, r6
 800ccaa:	4621      	mov	r1, r4
 800ccac:	4628      	mov	r0, r5
 800ccae:	f7ff fee8 	bl	800ca82 <node_set_prev.isra.2>
    node_set_prev(ll_p, n_after, n_act);
 800ccb2:	4622      	mov	r2, r4
 800ccb4:	2100      	movs	r1, #0
 800ccb6:	4628      	mov	r0, r5
 800ccb8:	f7ff fee3 	bl	800ca82 <node_set_prev.isra.2>
    node_set_next(ll_p, n_act, n_after);
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	4621      	mov	r1, r4
 800ccc0:	4628      	mov	r0, r5
 800ccc2:	f7ff fed5 	bl	800ca70 <node_set_next.isra.0>
    if(n_after == NULL) ll_p->tail = n_act;
 800ccc6:	60ac      	str	r4, [r5, #8]
    if(n_before == NULL) ll_p->head = n_act;
 800ccc8:	b9de      	cbnz	r6, 800cd02 <lv_ll_move_before+0x92>
 800ccca:	606c      	str	r4, [r5, #4]
 800cccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_ll_rem(ll_p, n_act);
 800ccce:	4621      	mov	r1, r4
 800ccd0:	4628      	mov	r0, r5
 800ccd2:	f7ff ff61 	bl	800cb98 <lv_ll_rem>
    node_set_next(ll_p, n_before, n_act);
 800ccd6:	4622      	mov	r2, r4
 800ccd8:	4639      	mov	r1, r7
 800ccda:	4628      	mov	r0, r5
 800ccdc:	f7ff fec8 	bl	800ca70 <node_set_next.isra.0>
    node_set_prev(ll_p, n_act, n_before);
 800cce0:	463a      	mov	r2, r7
 800cce2:	4621      	mov	r1, r4
 800cce4:	4628      	mov	r0, r5
 800cce6:	f7ff fecc 	bl	800ca82 <node_set_prev.isra.2>
    node_set_prev(ll_p, n_after, n_act);
 800ccea:	4631      	mov	r1, r6
 800ccec:	4622      	mov	r2, r4
 800ccee:	4628      	mov	r0, r5
 800ccf0:	f7ff fec7 	bl	800ca82 <node_set_prev.isra.2>
    node_set_next(ll_p, n_act, n_after);
 800ccf4:	4632      	mov	r2, r6
 800ccf6:	4621      	mov	r1, r4
 800ccf8:	4628      	mov	r0, r5
 800ccfa:	f7ff feb9 	bl	800ca70 <node_set_next.isra.0>
 800ccfe:	463e      	mov	r6, r7
 800cd00:	e7e2      	b.n	800ccc8 <lv_ll_move_before+0x58>
 800cd02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cd04 <lv_log_add>:
 * @param file name of the file when the log added
 * @param line line number in the source code where the log added
 * @param dsc description of the log
 */
void lv_log_add(lv_log_level_t level, const char * file, int line, const char * dsc)
{
 800cd04:	b410      	push	{r4}
    if(level >= _LV_LOG_LEVEL_NUM) return; /*Invalid level*/

    if(level >= LV_LOG_LEVEL) {
 800cd06:	1e84      	subs	r4, r0, #2
 800cd08:	b2e4      	uxtb	r4, r4
 800cd0a:	2c01      	cmp	r4, #1
 800cd0c:	d806      	bhi.n	800cd1c <lv_log_add+0x18>

#if LV_LOG_PRINTF
        static const char * lvl_prefix[] = {"Trace", "Info", "Warn", "Error"};
        printf("%s: %s \t(%s #%d)\n", lvl_prefix[level], dsc, file, line);
#else
        if(custom_print_cb) custom_print_cb(level, file, line, dsc);
 800cd0e:	4c05      	ldr	r4, [pc, #20]	; (800cd24 <lv_log_add+0x20>)
 800cd10:	6824      	ldr	r4, [r4, #0]
 800cd12:	b11c      	cbz	r4, 800cd1c <lv_log_add+0x18>
 800cd14:	46a4      	mov	ip, r4
#endif
    }
}
 800cd16:	f85d 4b04 	ldr.w	r4, [sp], #4
        if(custom_print_cb) custom_print_cb(level, file, line, dsc);
 800cd1a:	4760      	bx	ip
}
 800cd1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd20:	4770      	bx	lr
 800cd22:	bf00      	nop
 800cd24:	20004340 	.word	0x20004340

0800cd28 <ent_get_next>:
 * Give the next entry after 'act_e'
 * @param act_e pointer to an entry
 * @return pointer to an entry after 'act_e'
 */
static lv_mem_ent_t * ent_get_next(lv_mem_ent_t * act_e)
{
 800cd28:	4a07      	ldr	r2, [pc, #28]	; (800cd48 <ent_get_next+0x20>)
    lv_mem_ent_t * next_e = NULL;

    if(act_e == NULL) { /*NULL means: get the first entry*/
 800cd2a:	b908      	cbnz	r0, 800cd30 <ent_get_next+0x8>
        next_e = (lv_mem_ent_t *)work_mem;
 800cd2c:	6810      	ldr	r0, [r2, #0]
 800cd2e:	4770      	bx	lr
    } else { /*Get the next entry */
        uint8_t * data = &act_e->first_data;
 800cd30:	1d03      	adds	r3, r0, #4
        next_e         = (lv_mem_ent_t *)&data[act_e->header.s.d_size];
 800cd32:	6800      	ldr	r0, [r0, #0]
 800cd34:	eb03 0050 	add.w	r0, r3, r0, lsr #1

        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 800cd38:	6813      	ldr	r3, [r2, #0]
 800cd3a:	1d01      	adds	r1, r0, #4
 800cd3c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800cd40:	4299      	cmp	r1, r3
 800cd42:	bf28      	it	cs
 800cd44:	2000      	movcs	r0, #0
    }

    return next_e;
}
 800cd46:	4770      	bx	lr
 800cd48:	20004344 	.word	0x20004344

0800cd4c <ent_trunc>:
        size = size & (~0x7);
        size += 8;
    }
#else
    /*Round the size up to 4*/
    if(size & 0x3) {
 800cd4c:	078b      	lsls	r3, r1, #30
        size = size & (~0x3);
 800cd4e:	bf18      	it	ne
 800cd50:	f021 0103 	bicne.w	r1, r1, #3
        size += 4;
    }
#endif

    /*Don't let empty space only for a header without data*/
    if(e->header.s.d_size == size + sizeof(lv_mem_header_t)) {
 800cd54:	6803      	ldr	r3, [r0, #0]
        size += 4;
 800cd56:	bf18      	it	ne
 800cd58:	3104      	addne	r1, #4
    if(e->header.s.d_size == size + sizeof(lv_mem_header_t)) {
 800cd5a:	f3c3 035e 	ubfx	r3, r3, #1, #31
 800cd5e:	1d0a      	adds	r2, r1, #4
 800cd60:	4293      	cmp	r3, r2
{
 800cd62:	b510      	push	{r4, lr}
    if(e->header.s.d_size == size + sizeof(lv_mem_header_t)) {
 800cd64:	d011      	beq.n	800cd8a <ent_trunc+0x3e>
        size = e->header.s.d_size;
    }

    /* Create the new entry after the current if there is space for it */
    if(e->header.s.d_size != size) {
 800cd66:	4299      	cmp	r1, r3
 800cd68:	d00a      	beq.n	800cd80 <ent_trunc+0x34>
        uint8_t * e_data             = &e->first_data;
 800cd6a:	1d02      	adds	r2, r0, #4
        lv_mem_ent_t * after_new_e   = (lv_mem_ent_t *)&e_data[size];
        after_new_e->header.s.used   = 0;
        after_new_e->header.s.d_size = e->header.s.d_size - size - sizeof(lv_mem_header_t);
 800cd6c:	3b04      	subs	r3, #4
        after_new_e->header.s.used   = 0;
 800cd6e:	5c54      	ldrb	r4, [r2, r1]
 800cd70:	f36f 0400 	bfc	r4, #0, #1
 800cd74:	5454      	strb	r4, [r2, r1]
        after_new_e->header.s.d_size = e->header.s.d_size - size - sizeof(lv_mem_header_t);
 800cd76:	5854      	ldr	r4, [r2, r1]
 800cd78:	1a5b      	subs	r3, r3, r1
 800cd7a:	f363 045f 	bfi	r4, r3, #1, #31
 800cd7e:	5054      	str	r4, [r2, r1]
    }

    /* Set the new size for the original entry */
    e->header.s.d_size = size;
 800cd80:	6803      	ldr	r3, [r0, #0]
 800cd82:	f361 035f 	bfi	r3, r1, #1, #31
 800cd86:	6003      	str	r3, [r0, #0]
 800cd88:	bd10      	pop	{r4, pc}
 800cd8a:	4619      	mov	r1, r3
 800cd8c:	e7f8      	b.n	800cd80 <ent_trunc+0x34>
	...

0800cd90 <lv_mem_init>:
    work_mem = (uint8_t *)work_mem_int;
 800cd90:	4b06      	ldr	r3, [pc, #24]	; (800cdac <lv_mem_init+0x1c>)
 800cd92:	4a07      	ldr	r2, [pc, #28]	; (800cdb0 <lv_mem_init+0x20>)
 800cd94:	6013      	str	r3, [r2, #0]
    full->header.s.used = 0;
 800cd96:	781a      	ldrb	r2, [r3, #0]
 800cd98:	f36f 0200 	bfc	r2, #0, #1
 800cd9c:	701a      	strb	r2, [r3, #0]
    full->header.s.d_size = LV_MEM_SIZE - sizeof(lv_mem_header_t);
 800cd9e:	681a      	ldr	r2, [r3, #0]
 800cda0:	f647 71fc 	movw	r1, #32764	; 0x7ffc
 800cda4:	f361 025f 	bfi	r2, r1, #1, #31
 800cda8:	601a      	str	r2, [r3, #0]
 800cdaa:	4770      	bx	lr
 800cdac:	20004348 	.word	0x20004348
 800cdb0:	20004344 	.word	0x20004344

0800cdb4 <lv_mem_alloc>:
{
 800cdb4:	b538      	push	{r3, r4, r5, lr}
    if(size == 0) {
 800cdb6:	4605      	mov	r5, r0
 800cdb8:	b300      	cbz	r0, 800cdfc <lv_mem_alloc+0x48>
    if(size & 0x3) {
 800cdba:	0782      	lsls	r2, r0, #30
        size = size & (~0x3);
 800cdbc:	bf1c      	itt	ne
 800cdbe:	f020 0503 	bicne.w	r5, r0, #3
        size += 4;
 800cdc2:	3504      	addne	r5, #4
    lv_mem_ent_t * e = NULL;
 800cdc4:	2400      	movs	r4, #0
        e = ent_get_next(e);
 800cdc6:	4620      	mov	r0, r4
 800cdc8:	f7ff ffae 	bl	800cd28 <ent_get_next>
        if(e != NULL) {
 800cdcc:	4604      	mov	r4, r0
 800cdce:	b1b8      	cbz	r0, 800ce00 <lv_mem_alloc+0x4c>
    if(e->header.s.used == 0 && e->header.s.d_size >= size) {
 800cdd0:	7803      	ldrb	r3, [r0, #0]
 800cdd2:	07db      	lsls	r3, r3, #31
 800cdd4:	d4f7      	bmi.n	800cdc6 <lv_mem_alloc+0x12>
 800cdd6:	6803      	ldr	r3, [r0, #0]
 800cdd8:	ebb5 0f53 	cmp.w	r5, r3, lsr #1
 800cddc:	d8f3      	bhi.n	800cdc6 <lv_mem_alloc+0x12>
        ent_trunc(e, size),
 800cdde:	4629      	mov	r1, r5
 800cde0:	f7ff ffb4 	bl	800cd4c <ent_trunc>
            e->header.s.used = 1;
 800cde4:	7803      	ldrb	r3, [r0, #0]
 800cde6:	f043 0301 	orr.w	r3, r3, #1
 800cdea:	f804 3b04 	strb.w	r3, [r4], #4
    if(alloc != NULL) memset(alloc, 0xaa, size);
 800cdee:	462a      	mov	r2, r5
 800cdf0:	21aa      	movs	r1, #170	; 0xaa
 800cdf2:	4620      	mov	r0, r4
 800cdf4:	f000 fcb9 	bl	800d76a <memset>
}
 800cdf8:	4620      	mov	r0, r4
 800cdfa:	bd38      	pop	{r3, r4, r5, pc}
        return &zero_mem;
 800cdfc:	4c04      	ldr	r4, [pc, #16]	; (800ce10 <lv_mem_alloc+0x5c>)
 800cdfe:	e7fb      	b.n	800cdf8 <lv_mem_alloc+0x44>
    if(alloc == NULL) LV_LOG_WARN("Couldn't allocate memory");
 800ce00:	4b04      	ldr	r3, [pc, #16]	; (800ce14 <lv_mem_alloc+0x60>)
 800ce02:	4905      	ldr	r1, [pc, #20]	; (800ce18 <lv_mem_alloc+0x64>)
 800ce04:	22a5      	movs	r2, #165	; 0xa5
 800ce06:	2002      	movs	r0, #2
 800ce08:	f7ff ff7c 	bl	800cd04 <lv_log_add>
 800ce0c:	e7f4      	b.n	800cdf8 <lv_mem_alloc+0x44>
 800ce0e:	bf00      	nop
 800ce10:	2000c348 	.word	0x2000c348
 800ce14:	08012f83 	.word	0x08012f83
 800ce18:	08012f9c 	.word	0x08012f9c

0800ce1c <lv_mem_get_size>:
    if(data == NULL) return 0;
 800ce1c:	b140      	cbz	r0, 800ce30 <lv_mem_get_size+0x14>
    if(data == &zero_mem) return 0;
 800ce1e:	4b05      	ldr	r3, [pc, #20]	; (800ce34 <lv_mem_get_size+0x18>)
 800ce20:	4298      	cmp	r0, r3
 800ce22:	d004      	beq.n	800ce2e <lv_mem_get_size+0x12>
    return e->header.s.d_size;
 800ce24:	f850 0c04 	ldr.w	r0, [r0, #-4]
 800ce28:	f3c0 005e 	ubfx	r0, r0, #1, #31
 800ce2c:	4770      	bx	lr
    if(data == NULL) return 0;
 800ce2e:	2000      	movs	r0, #0
}
 800ce30:	4770      	bx	lr
 800ce32:	bf00      	nop
 800ce34:	2000c348 	.word	0x2000c348

0800ce38 <lv_mem_free>:
    if(data == &zero_mem) return;
 800ce38:	4b13      	ldr	r3, [pc, #76]	; (800ce88 <lv_mem_free+0x50>)
 800ce3a:	4298      	cmp	r0, r3
{
 800ce3c:	b510      	push	{r4, lr}
 800ce3e:	4604      	mov	r4, r0
    if(data == &zero_mem) return;
 800ce40:	d011      	beq.n	800ce66 <lv_mem_free+0x2e>
    if(data == NULL) return;
 800ce42:	b180      	cbz	r0, 800ce66 <lv_mem_free+0x2e>
    memset((void *)data, 0xbb, lv_mem_get_size(data));
 800ce44:	f7ff ffea 	bl	800ce1c <lv_mem_get_size>
 800ce48:	21bb      	movs	r1, #187	; 0xbb
 800ce4a:	4602      	mov	r2, r0
 800ce4c:	4620      	mov	r0, r4
 800ce4e:	f000 fc8c 	bl	800d76a <memset>
    e->header.s.used = 0;
 800ce52:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 800ce56:	4620      	mov	r0, r4
 800ce58:	f36f 0300 	bfc	r3, #0, #1
 800ce5c:	f800 3d04 	strb.w	r3, [r0, #-4]!
        e_next = ent_get_next(e_next);
 800ce60:	f7ff ff62 	bl	800cd28 <ent_get_next>
    while(e_next != NULL) {
 800ce64:	b900      	cbnz	r0, 800ce68 <lv_mem_free+0x30>
 800ce66:	bd10      	pop	{r4, pc}
        if(e_next->header.s.used == 0) {
 800ce68:	7803      	ldrb	r3, [r0, #0]
 800ce6a:	07db      	lsls	r3, r3, #31
 800ce6c:	d4fb      	bmi.n	800ce66 <lv_mem_free+0x2e>
            e->header.s.d_size += e_next->header.s.d_size + sizeof(e->header);
 800ce6e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800ce72:	6801      	ldr	r1, [r0, #0]
 800ce74:	f3c3 025e 	ubfx	r2, r3, #1, #31
 800ce78:	3204      	adds	r2, #4
 800ce7a:	eb02 0251 	add.w	r2, r2, r1, lsr #1
 800ce7e:	f362 035f 	bfi	r3, r2, #1, #31
 800ce82:	f844 3c04 	str.w	r3, [r4, #-4]
 800ce86:	e7eb      	b.n	800ce60 <lv_mem_free+0x28>
 800ce88:	2000c348 	.word	0x2000c348

0800ce8c <lv_mem_realloc>:
{
 800ce8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce8e:	460d      	mov	r5, r1
    if(data_p != NULL) {
 800ce90:	4604      	mov	r4, r0
 800ce92:	b128      	cbz	r0, 800cea0 <lv_mem_realloc+0x14>
        if(e->header.s.used == 0) {
 800ce94:	f810 3c04 	ldrb.w	r3, [r0, #-4]
            data_p = NULL;
 800ce98:	f013 0f01 	tst.w	r3, #1
 800ce9c:	bf08      	it	eq
 800ce9e:	2400      	moveq	r4, #0
    uint32_t old_size = lv_mem_get_size(data_p);
 800cea0:	4620      	mov	r0, r4
 800cea2:	f7ff ffbb 	bl	800ce1c <lv_mem_get_size>
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
 800cea6:	42a8      	cmp	r0, r5
    uint32_t old_size = lv_mem_get_size(data_p);
 800cea8:	4607      	mov	r7, r0
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
 800ceaa:	d004      	beq.n	800ceb6 <lv_mem_realloc+0x2a>
    if(new_size < old_size) {
 800ceac:	d905      	bls.n	800ceba <lv_mem_realloc+0x2e>
        ent_trunc(e, new_size);
 800ceae:	4629      	mov	r1, r5
 800ceb0:	1f20      	subs	r0, r4, #4
 800ceb2:	f7ff ff4b 	bl	800cd4c <ent_trunc>
 800ceb6:	4626      	mov	r6, r4
 800ceb8:	e010      	b.n	800cedc <lv_mem_realloc+0x50>
    new_p = lv_mem_alloc(new_size);
 800ceba:	4628      	mov	r0, r5
 800cebc:	f7ff ff7a 	bl	800cdb4 <lv_mem_alloc>
    if(new_p != NULL && data_p != NULL) {
 800cec0:	4606      	mov	r6, r0
 800cec2:	b168      	cbz	r0, 800cee0 <lv_mem_realloc+0x54>
 800cec4:	b154      	cbz	r4, 800cedc <lv_mem_realloc+0x50>
        if(old_size != 0) {
 800cec6:	b14f      	cbz	r7, 800cedc <lv_mem_realloc+0x50>
            memcpy(new_p, data_p, LV_MATH_MIN(new_size, old_size));
 800cec8:	42af      	cmp	r7, r5
 800ceca:	463a      	mov	r2, r7
 800cecc:	4621      	mov	r1, r4
 800cece:	bf28      	it	cs
 800ced0:	462a      	movcs	r2, r5
 800ced2:	f000 fc3f 	bl	800d754 <memcpy>
            lv_mem_free(data_p);
 800ced6:	4620      	mov	r0, r4
 800ced8:	f7ff ffae 	bl	800ce38 <lv_mem_free>
}
 800cedc:	4630      	mov	r0, r6
 800cede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(new_p == NULL) LV_LOG_WARN("Couldn't allocate memory");
 800cee0:	4b03      	ldr	r3, [pc, #12]	; (800cef0 <lv_mem_realloc+0x64>)
 800cee2:	4904      	ldr	r1, [pc, #16]	; (800cef4 <lv_mem_realloc+0x68>)
 800cee4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cee8:	2002      	movs	r0, #2
 800ceea:	f7ff ff0b 	bl	800cd04 <lv_log_add>
 800ceee:	e7f5      	b.n	800cedc <lv_mem_realloc+0x50>
 800cef0:	08012f83 	.word	0x08012f83
 800cef4:	08012f9c 	.word	0x08012f9c

0800cef8 <lv_task_core_init>:

/**
 * Init the lv_task module
 */
void lv_task_core_init(void)
{
 800cef8:	b508      	push	{r3, lr}
    lv_ll_init(&LV_GC_ROOT(_lv_task_ll), sizeof(lv_task_t));
 800cefa:	2114      	movs	r1, #20
 800cefc:	4803      	ldr	r0, [pc, #12]	; (800cf0c <lv_task_core_init+0x14>)
 800cefe:	f7ff fdc6 	bl	800ca8e <lv_ll_init>
 * Enable or disable the whole lv_task handling
 * @param en: true: lv_task handling is running, false: lv_task handling is suspended
 */
void lv_task_enable(bool en)
{
    lv_task_run = en;
 800cf02:	4b03      	ldr	r3, [pc, #12]	; (800cf10 <lv_task_core_init+0x18>)
 800cf04:	2201      	movs	r2, #1
 800cf06:	701a      	strb	r2, [r3, #0]
 800cf08:	bd08      	pop	{r3, pc}
 800cf0a:	bf00      	nop
 800cf0c:	2000d8c8 	.word	0x2000d8c8
 800cf10:	2000c35c 	.word	0x2000c35c

0800cf14 <lv_task_create_basic>:
{
 800cf14:	b538      	push	{r3, r4, r5, lr}
    tmp = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 800cf16:	4825      	ldr	r0, [pc, #148]	; (800cfac <lv_task_create_basic+0x98>)
 800cf18:	f7ff fdff 	bl	800cb1a <lv_ll_get_head>
    if(NULL == tmp) {
 800cf1c:	4601      	mov	r1, r0
 800cf1e:	b958      	cbnz	r0, 800cf38 <lv_task_create_basic+0x24>
        new_task = lv_ll_ins_head(&LV_GC_ROOT(_lv_task_ll));
 800cf20:	4822      	ldr	r0, [pc, #136]	; (800cfac <lv_task_create_basic+0x98>)
 800cf22:	f7ff fdbe 	bl	800caa2 <lv_ll_ins_head>
        lv_mem_assert(new_task);
 800cf26:	4604      	mov	r4, r0
 800cf28:	bb18      	cbnz	r0, 800cf72 <lv_task_create_basic+0x5e>
 800cf2a:	4b21      	ldr	r3, [pc, #132]	; (800cfb0 <lv_task_create_basic+0x9c>)
 800cf2c:	4921      	ldr	r1, [pc, #132]	; (800cfb4 <lv_task_create_basic+0xa0>)
 800cf2e:	22b0      	movs	r2, #176	; 0xb0
 800cf30:	2003      	movs	r0, #3
 800cf32:	f7ff fee7 	bl	800cd04 <lv_log_add>
 800cf36:	e7fe      	b.n	800cf36 <lv_task_create_basic+0x22>
            tmp = lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
 800cf38:	4c1c      	ldr	r4, [pc, #112]	; (800cfac <lv_task_create_basic+0x98>)
            if(tmp->prio <= DEF_PRIO) {
 800cf3a:	7c0b      	ldrb	r3, [r1, #16]
 800cf3c:	f003 0307 	and.w	r3, r3, #7
 800cf40:	2b03      	cmp	r3, #3
 800cf42:	dc0b      	bgt.n	800cf5c <lv_task_create_basic+0x48>
                new_task = lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
 800cf44:	4819      	ldr	r0, [pc, #100]	; (800cfac <lv_task_create_basic+0x98>)
 800cf46:	f7ff fdf7 	bl	800cb38 <lv_ll_ins_prev>
                lv_mem_assert(new_task);
 800cf4a:	4604      	mov	r4, r0
 800cf4c:	b988      	cbnz	r0, 800cf72 <lv_task_create_basic+0x5e>
 800cf4e:	4b18      	ldr	r3, [pc, #96]	; (800cfb0 <lv_task_create_basic+0x9c>)
 800cf50:	4918      	ldr	r1, [pc, #96]	; (800cfb4 <lv_task_create_basic+0xa0>)
 800cf52:	22b8      	movs	r2, #184	; 0xb8
 800cf54:	2003      	movs	r0, #3
 800cf56:	f7ff fed5 	bl	800cd04 <lv_log_add>
 800cf5a:	e7fe      	b.n	800cf5a <lv_task_create_basic+0x46>
            tmp = lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
 800cf5c:	4620      	mov	r0, r4
 800cf5e:	f7ff fde2 	bl	800cb26 <lv_ll_get_next>
        } while(tmp != NULL);
 800cf62:	4601      	mov	r1, r0
 800cf64:	2800      	cmp	r0, #0
 800cf66:	d1e8      	bne.n	800cf3a <lv_task_create_basic+0x26>
            new_task = lv_ll_ins_tail(&LV_GC_ROOT(_lv_task_ll));
 800cf68:	4810      	ldr	r0, [pc, #64]	; (800cfac <lv_task_create_basic+0x98>)
 800cf6a:	f7ff fdb8 	bl	800cade <lv_ll_ins_tail>
            lv_mem_assert(new_task);
 800cf6e:	4604      	mov	r4, r0
 800cf70:	b1a0      	cbz	r0, 800cf9c <lv_task_create_basic+0x88>
    new_task->period  = DEF_PERIOD;
 800cf72:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800cf76:	6023      	str	r3, [r4, #0]
    new_task->prio    = DEF_PRIO;
 800cf78:	7c23      	ldrb	r3, [r4, #16]
 800cf7a:	2203      	movs	r2, #3
    new_task->task_cb = NULL;
 800cf7c:	2500      	movs	r5, #0
    new_task->prio    = DEF_PRIO;
 800cf7e:	f362 0302 	bfi	r3, r2, #0, #3
    new_task->once     = 0;
 800cf82:	f365 03c3 	bfi	r3, r5, #3, #1
 800cf86:	7423      	strb	r3, [r4, #16]
    new_task->task_cb = NULL;
 800cf88:	60a5      	str	r5, [r4, #8]
    new_task->last_run = lv_tick_get();
 800cf8a:	f7ff fb29 	bl	800c5e0 <lv_tick_get>
    task_created = true;
 800cf8e:	4b0a      	ldr	r3, [pc, #40]	; (800cfb8 <lv_task_create_basic+0xa4>)
    new_task->last_run = lv_tick_get();
 800cf90:	6060      	str	r0, [r4, #4]
    task_created = true;
 800cf92:	2201      	movs	r2, #1
    new_task->user_data = NULL;
 800cf94:	60e5      	str	r5, [r4, #12]
    task_created = true;
 800cf96:	701a      	strb	r2, [r3, #0]
}
 800cf98:	4620      	mov	r0, r4
 800cf9a:	bd38      	pop	{r3, r4, r5, pc}
            lv_mem_assert(new_task);
 800cf9c:	4b04      	ldr	r3, [pc, #16]	; (800cfb0 <lv_task_create_basic+0x9c>)
 800cf9e:	4905      	ldr	r1, [pc, #20]	; (800cfb4 <lv_task_create_basic+0xa0>)
 800cfa0:	22c2      	movs	r2, #194	; 0xc2
 800cfa2:	2003      	movs	r0, #3
 800cfa4:	f7ff feae 	bl	800cd04 <lv_log_add>
 800cfa8:	e7fe      	b.n	800cfa8 <lv_task_create_basic+0x94>
 800cfaa:	bf00      	nop
 800cfac:	2000d8c8 	.word	0x2000d8c8
 800cfb0:	080107dd 	.word	0x080107dd
 800cfb4:	08012fb9 	.word	0x08012fb9
 800cfb8:	2000c35d 	.word	0x2000c35d

0800cfbc <lv_task_del>:
{
 800cfbc:	b510      	push	{r4, lr}
    lv_ll_rem(&LV_GC_ROOT(_lv_task_ll), task);
 800cfbe:	4601      	mov	r1, r0
{
 800cfc0:	4604      	mov	r4, r0
    lv_ll_rem(&LV_GC_ROOT(_lv_task_ll), task);
 800cfc2:	4807      	ldr	r0, [pc, #28]	; (800cfe0 <lv_task_del+0x24>)
 800cfc4:	f7ff fde8 	bl	800cb98 <lv_ll_rem>
    lv_mem_free(task);
 800cfc8:	4620      	mov	r0, r4
 800cfca:	f7ff ff35 	bl	800ce38 <lv_mem_free>
    if(LV_GC_ROOT(_lv_task_act) == task) task_deleted = true; /*The active task was deleted*/
 800cfce:	4b05      	ldr	r3, [pc, #20]	; (800cfe4 <lv_task_del+0x28>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	429c      	cmp	r4, r3
 800cfd4:	bf02      	ittt	eq
 800cfd6:	4b04      	ldreq	r3, [pc, #16]	; (800cfe8 <lv_task_del+0x2c>)
 800cfd8:	2201      	moveq	r2, #1
 800cfda:	701a      	strbeq	r2, [r3, #0]
 800cfdc:	bd10      	pop	{r4, pc}
 800cfde:	bf00      	nop
 800cfe0:	2000d8c8 	.word	0x2000d8c8
 800cfe4:	2000d908 	.word	0x2000d908
 800cfe8:	2000c35e 	.word	0x2000c35e

0800cfec <lv_task_exec>:
 * Execute task if its the priority is appropriate
 * @param task pointer to lv_task
 * @return true: execute, false: not executed
 */
static bool lv_task_exec(lv_task_t * task)
{
 800cfec:	b538      	push	{r3, r4, r5, lr}
 800cfee:	4604      	mov	r4, r0
    bool exec = false;

    /*Execute if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(task->last_run);
 800cff0:	6840      	ldr	r0, [r0, #4]
 800cff2:	f7ff fb03 	bl	800c5fc <lv_tick_elaps>
    if(elp >= task->period) {
 800cff6:	6823      	ldr	r3, [r4, #0]
 800cff8:	4298      	cmp	r0, r3
 800cffa:	d315      	bcc.n	800d028 <lv_task_exec+0x3c>
        task->last_run = lv_tick_get();
 800cffc:	f7ff faf0 	bl	800c5e0 <lv_tick_get>
        task_deleted   = false;
 800d000:	4d0a      	ldr	r5, [pc, #40]	; (800d02c <lv_task_exec+0x40>)
        task_created   = false;
 800d002:	490b      	ldr	r1, [pc, #44]	; (800d030 <lv_task_exec+0x44>)
        task->last_run = lv_tick_get();
 800d004:	6060      	str	r0, [r4, #4]
        task_deleted   = false;
 800d006:	2200      	movs	r2, #0
 800d008:	702a      	strb	r2, [r5, #0]
        task_created   = false;
 800d00a:	700a      	strb	r2, [r1, #0]
        if(task->task_cb) task->task_cb(task);
 800d00c:	68a2      	ldr	r2, [r4, #8]
 800d00e:	b10a      	cbz	r2, 800d014 <lv_task_exec+0x28>
 800d010:	4620      	mov	r0, r4
 800d012:	4790      	blx	r2

        /*Delete if it was a one shot lv_task*/
        if(task_deleted == false) { /*The task might be deleted by itself as well*/
 800d014:	7828      	ldrb	r0, [r5, #0]
 800d016:	b930      	cbnz	r0, 800d026 <lv_task_exec+0x3a>
            if(task->once != 0) {
 800d018:	7c23      	ldrb	r3, [r4, #16]
 800d01a:	071b      	lsls	r3, r3, #28
 800d01c:	d502      	bpl.n	800d024 <lv_task_exec+0x38>
                lv_task_del(task);
 800d01e:	4620      	mov	r0, r4
 800d020:	f7ff ffcc 	bl	800cfbc <lv_task_del>
            }
        }
        exec = true;
 800d024:	2001      	movs	r0, #1
    }

    return exec;
}
 800d026:	bd38      	pop	{r3, r4, r5, pc}
    bool exec = false;
 800d028:	2000      	movs	r0, #0
 800d02a:	bd38      	pop	{r3, r4, r5, pc}
 800d02c:	2000c35e 	.word	0x2000c35e
 800d030:	2000c35d 	.word	0x2000c35d

0800d034 <lv_task_handler>:
{
 800d034:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(task_handler_mutex) return;
 800d038:	4d3a      	ldr	r5, [pc, #232]	; (800d124 <lv_task_handler+0xf0>)
 800d03a:	782c      	ldrb	r4, [r5, #0]
 800d03c:	b934      	cbnz	r4, 800d04c <lv_task_handler+0x18>
    task_handler_mutex = true;
 800d03e:	2301      	movs	r3, #1
 800d040:	702b      	strb	r3, [r5, #0]
    if(lv_task_run == false) {
 800d042:	4b39      	ldr	r3, [pc, #228]	; (800d128 <lv_task_handler+0xf4>)
 800d044:	781b      	ldrb	r3, [r3, #0]
 800d046:	b923      	cbnz	r3, 800d052 <lv_task_handler+0x1e>
        task_handler_mutex = false; /*Release mutex*/
 800d048:	2300      	movs	r3, #0
 800d04a:	702b      	strb	r3, [r5, #0]
}
 800d04c:	b003      	add	sp, #12
 800d04e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    handler_start = lv_tick_get();
 800d052:	f7ff fac5 	bl	800c5e0 <lv_tick_get>
 800d056:	4b35      	ldr	r3, [pc, #212]	; (800d12c <lv_task_handler+0xf8>)
        task_deleted             = false;
 800d058:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 800d148 <lv_task_handler+0x114>
    handler_start = lv_tick_get();
 800d05c:	6018      	str	r0, [r3, #0]
 800d05e:	469b      	mov	fp, r3
        task_deleted             = false;
 800d060:	46a1      	mov	r9, r4
        task_created             = false;
 800d062:	4e33      	ldr	r6, [pc, #204]	; (800d130 <lv_task_handler+0xfc>)
        LV_GC_ROOT(_lv_task_act) = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 800d064:	4833      	ldr	r0, [pc, #204]	; (800d134 <lv_task_handler+0x100>)
        task_created             = false;
 800d066:	f886 9000 	strb.w	r9, [r6]
        task_deleted             = false;
 800d06a:	f888 9000 	strb.w	r9, [r8]
        LV_GC_ROOT(_lv_task_act) = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 800d06e:	f7ff fd54 	bl	800cb1a <lv_ll_get_head>
 800d072:	4f31      	ldr	r7, [pc, #196]	; (800d138 <lv_task_handler+0x104>)
 800d074:	9601      	str	r6, [sp, #4]
 800d076:	6038      	str	r0, [r7, #0]
 800d078:	463e      	mov	r6, r7
        while(LV_GC_ROOT(_lv_task_act)) {
 800d07a:	6831      	ldr	r1, [r6, #0]
 800d07c:	bb29      	cbnz	r1, 800d0ca <lv_task_handler+0x96>
    busy_time += lv_tick_elaps(handler_start);
 800d07e:	4c2f      	ldr	r4, [pc, #188]	; (800d13c <lv_task_handler+0x108>)
 800d080:	f8db 0000 	ldr.w	r0, [fp]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 800d084:	4e2e      	ldr	r6, [pc, #184]	; (800d140 <lv_task_handler+0x10c>)
    busy_time += lv_tick_elaps(handler_start);
 800d086:	f7ff fab9 	bl	800c5fc <lv_tick_elaps>
 800d08a:	6823      	ldr	r3, [r4, #0]
 800d08c:	4418      	add	r0, r3
 800d08e:	6020      	str	r0, [r4, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 800d090:	6830      	ldr	r0, [r6, #0]
 800d092:	f7ff fab3 	bl	800c5fc <lv_tick_elaps>
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
 800d096:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 800d09a:	d3d5      	bcc.n	800d048 <lv_task_handler+0x14>
        idle_last         = (uint32_t)((uint32_t)busy_time * 100) / IDLE_MEAS_PERIOD; /*Calculate the busy percentage*/
 800d09c:	6822      	ldr	r2, [r4, #0]
 800d09e:	2364      	movs	r3, #100	; 0x64
 800d0a0:	4353      	muls	r3, r2
 800d0a2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800d0a6:	fbb3 f3f2 	udiv	r3, r3, r2
 800d0aa:	b2db      	uxtb	r3, r3
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last;                    /*But we need idle time*/
 800d0ac:	2b64      	cmp	r3, #100	; 0x64
 800d0ae:	bf98      	it	ls
 800d0b0:	f1c3 0364 	rsbls	r3, r3, #100	; 0x64
 800d0b4:	4a23      	ldr	r2, [pc, #140]	; (800d144 <lv_task_handler+0x110>)
 800d0b6:	bf94      	ite	ls
 800d0b8:	b2db      	uxtbls	r3, r3
 800d0ba:	2300      	movhi	r3, #0
 800d0bc:	7013      	strb	r3, [r2, #0]
        busy_time         = 0;
 800d0be:	2300      	movs	r3, #0
 800d0c0:	6023      	str	r3, [r4, #0]
        idle_period_start = lv_tick_get();
 800d0c2:	f7ff fa8d 	bl	800c5e0 <lv_tick_get>
 800d0c6:	6030      	str	r0, [r6, #0]
 800d0c8:	e7be      	b.n	800d048 <lv_task_handler+0x14>
            next = lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), LV_GC_ROOT(_lv_task_act));
 800d0ca:	481a      	ldr	r0, [pc, #104]	; (800d134 <lv_task_handler+0x100>)
 800d0cc:	f7ff fd2b 	bl	800cb26 <lv_ll_get_next>
 800d0d0:	4682      	mov	sl, r0
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_OFF) {
 800d0d2:	6830      	ldr	r0, [r6, #0]
 800d0d4:	7c03      	ldrb	r3, [r0, #16]
 800d0d6:	f013 0207 	ands.w	r2, r3, #7
 800d0da:	d0d0      	beq.n	800d07e <lv_task_handler+0x4a>
            if(LV_GC_ROOT(_lv_task_act) == task_interrupter) {
 800d0dc:	4284      	cmp	r4, r0
 800d0de:	d103      	bne.n	800d0e8 <lv_task_handler+0xb4>
                LV_GC_ROOT(_lv_task_act) = next;
 800d0e0:	f8c6 a000 	str.w	sl, [r6]
                task_interrupter = NULL; /*From this point only task after the interrupter comes, so
 800d0e4:	2400      	movs	r4, #0
                continue; /*Load the next task*/
 800d0e6:	e7c8      	b.n	800d07a <lv_task_handler+0x46>
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_HIGHEST) {
 800d0e8:	2a05      	cmp	r2, #5
 800d0ea:	d10c      	bne.n	800d106 <lv_task_handler+0xd2>
                lv_task_exec(LV_GC_ROOT(_lv_task_act));
 800d0ec:	f7ff ff7e 	bl	800cfec <lv_task_exec>
            if(task_deleted) break; /*If a task was deleted then this or the next item might be corrupted*/
 800d0f0:	f898 3000 	ldrb.w	r3, [r8]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d1c2      	bne.n	800d07e <lv_task_handler+0x4a>
            if(task_created) break; /*If a task was created then this or the next item might be corrupted*/
 800d0f8:	9b01      	ldr	r3, [sp, #4]
 800d0fa:	781b      	ldrb	r3, [r3, #0]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d1be      	bne.n	800d07e <lv_task_handler+0x4a>
            LV_GC_ROOT(_lv_task_act) = next; /*Load the next task*/
 800d100:	f8c6 a000 	str.w	sl, [r6]
 800d104:	e7b9      	b.n	800d07a <lv_task_handler+0x46>
            else if(task_interrupter) {
 800d106:	b134      	cbz	r4, 800d116 <lv_task_handler+0xe2>
                if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio > task_interrupter->prio) {
 800d108:	7c22      	ldrb	r2, [r4, #16]
 800d10a:	f003 0307 	and.w	r3, r3, #7
 800d10e:	f002 0207 	and.w	r2, r2, #7
 800d112:	4293      	cmp	r3, r2
 800d114:	ddec      	ble.n	800d0f0 <lv_task_handler+0xbc>
                if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
 800d116:	f7ff ff69 	bl	800cfec <lv_task_exec>
 800d11a:	2800      	cmp	r0, #0
 800d11c:	d0e8      	beq.n	800d0f0 <lv_task_handler+0xbc>
                    task_interrupter = LV_GC_ROOT(_lv_task_act); /*Check all tasks again from the highest priority */
 800d11e:	683c      	ldr	r4, [r7, #0]
                    break;
 800d120:	e79f      	b.n	800d062 <lv_task_handler+0x2e>
 800d122:	bf00      	nop
 800d124:	2000c35f 	.word	0x2000c35f
 800d128:	2000c35c 	.word	0x2000c35c
 800d12c:	2000c350 	.word	0x2000c350
 800d130:	2000c35d 	.word	0x2000c35d
 800d134:	2000d8c8 	.word	0x2000d8c8
 800d138:	2000d908 	.word	0x2000d908
 800d13c:	2000c34c 	.word	0x2000c34c
 800d140:	2000c358 	.word	0x2000c358
 800d144:	2000c354 	.word	0x2000c354
 800d148:	2000c35e 	.word	0x2000c35e

0800d14c <lv_task_set_prio>:
    if(task->prio == prio) return;
 800d14c:	7c03      	ldrb	r3, [r0, #16]
 800d14e:	f003 0307 	and.w	r3, r3, #7
 800d152:	428b      	cmp	r3, r1
{
 800d154:	b570      	push	{r4, r5, r6, lr}
 800d156:	4604      	mov	r4, r0
 800d158:	460d      	mov	r5, r1
    if(task->prio == prio) return;
 800d15a:	d01b      	beq.n	800d194 <lv_task_set_prio+0x48>
    LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i)
 800d15c:	480e      	ldr	r0, [pc, #56]	; (800d198 <lv_task_set_prio+0x4c>)
 800d15e:	4e0e      	ldr	r6, [pc, #56]	; (800d198 <lv_task_set_prio+0x4c>)
 800d160:	f7ff fcdb 	bl	800cb1a <lv_ll_get_head>
 800d164:	4602      	mov	r2, r0
 800d166:	b132      	cbz	r2, 800d176 <lv_task_set_prio+0x2a>
        if(i->prio <= prio) {
 800d168:	7c13      	ldrb	r3, [r2, #16]
 800d16a:	f003 0307 	and.w	r3, r3, #7
 800d16e:	429d      	cmp	r5, r3
 800d170:	db0a      	blt.n	800d188 <lv_task_set_prio+0x3c>
            if(i != task) lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, i);
 800d172:	42a2      	cmp	r2, r4
 800d174:	d003      	beq.n	800d17e <lv_task_set_prio+0x32>
        lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, NULL);
 800d176:	4621      	mov	r1, r4
 800d178:	4807      	ldr	r0, [pc, #28]	; (800d198 <lv_task_set_prio+0x4c>)
 800d17a:	f7ff fd79 	bl	800cc70 <lv_ll_move_before>
    task->prio = prio;
 800d17e:	7c23      	ldrb	r3, [r4, #16]
 800d180:	f365 0302 	bfi	r3, r5, #0, #3
 800d184:	7423      	strb	r3, [r4, #16]
 800d186:	bd70      	pop	{r4, r5, r6, pc}
    LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i)
 800d188:	4611      	mov	r1, r2
 800d18a:	4630      	mov	r0, r6
 800d18c:	f7ff fccb 	bl	800cb26 <lv_ll_get_next>
 800d190:	4602      	mov	r2, r0
 800d192:	e7e8      	b.n	800d166 <lv_task_set_prio+0x1a>
 800d194:	bd70      	pop	{r4, r5, r6, pc}
 800d196:	bf00      	nop
 800d198:	2000d8c8 	.word	0x2000d8c8

0800d19c <lv_task_create>:
{
 800d19c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1a0:	4680      	mov	r8, r0
 800d1a2:	460f      	mov	r7, r1
 800d1a4:	4616      	mov	r6, r2
 800d1a6:	461d      	mov	r5, r3
    lv_task_t * new_task = lv_task_create_basic();
 800d1a8:	f7ff feb4 	bl	800cf14 <lv_task_create_basic>
    lv_mem_assert(new_task);
 800d1ac:	4604      	mov	r4, r0
 800d1ae:	b930      	cbnz	r0, 800d1be <lv_task_create+0x22>
 800d1b0:	4b08      	ldr	r3, [pc, #32]	; (800d1d4 <lv_task_create+0x38>)
 800d1b2:	4909      	ldr	r1, [pc, #36]	; (800d1d8 <lv_task_create+0x3c>)
 800d1b4:	22e2      	movs	r2, #226	; 0xe2
 800d1b6:	2003      	movs	r0, #3
 800d1b8:	f7ff fda4 	bl	800cd04 <lv_log_add>
 800d1bc:	e7fe      	b.n	800d1bc <lv_task_create+0x20>
    task->task_cb = task_cb;
 800d1be:	f8c0 8008 	str.w	r8, [r0, #8]
    task->period = period;
 800d1c2:	6007      	str	r7, [r0, #0]
    lv_task_set_prio(new_task, prio);
 800d1c4:	4631      	mov	r1, r6
 800d1c6:	f7ff ffc1 	bl	800d14c <lv_task_set_prio>
    new_task->user_data = user_data;
 800d1ca:	60e5      	str	r5, [r4, #12]
}
 800d1cc:	4620      	mov	r0, r4
 800d1ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1d2:	bf00      	nop
 800d1d4:	080107dd 	.word	0x080107dd
 800d1d8:	08012fb9 	.word	0x08012fb9

0800d1dc <lv_task_ready>:
{
 800d1dc:	b510      	push	{r4, lr}
 800d1de:	4604      	mov	r4, r0
    task->last_run = lv_tick_get() - task->period - 1;
 800d1e0:	f7ff f9fe 	bl	800c5e0 <lv_tick_get>
 800d1e4:	6823      	ldr	r3, [r4, #0]
 800d1e6:	43db      	mvns	r3, r3
 800d1e8:	4403      	add	r3, r0
 800d1ea:	6063      	str	r3, [r4, #4]
 800d1ec:	bd10      	pop	{r4, pc}

0800d1ee <lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                        int32_t (*cmp)(const void * pRef, const void * pElement))
{
 800d1ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1f2:	9d08      	ldr	r5, [sp, #32]
 800d1f4:	4681      	mov	r9, r0
 800d1f6:	4688      	mov	r8, r1
 800d1f8:	4614      	mov	r4, r2
 800d1fa:	469a      	mov	sl, r3
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
 800d1fc:	b914      	cbnz	r4, 800d204 <lv_utils_bsearch+0x16>
            middle = base;
        } else {
            return (char *)middle;
        }
    }
    return NULL;
 800d1fe:	4620      	mov	r0, r4
 800d200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        middle += (n / 2) * size;
 800d204:	0867      	lsrs	r7, r4, #1
 800d206:	fb0a 8607 	mla	r6, sl, r7, r8
        if((c = (*cmp)(key, middle)) > 0) {
 800d20a:	4631      	mov	r1, r6
 800d20c:	4648      	mov	r0, r9
 800d20e:	47a8      	blx	r5
 800d210:	2800      	cmp	r0, #0
 800d212:	dd07      	ble.n	800d224 <lv_utils_bsearch+0x36>
 800d214:	43e1      	mvns	r1, r4
 800d216:	f001 0101 	and.w	r1, r1, #1
            n    = (n / 2) - ((n & 1) == 0);
 800d21a:	1a7f      	subs	r7, r7, r1
            base = (middle += size);
 800d21c:	eb06 080a 	add.w	r8, r6, sl
 800d220:	463c      	mov	r4, r7
 800d222:	e7eb      	b.n	800d1fc <lv_utils_bsearch+0xe>
        } else if(c < 0) {
 800d224:	d1fc      	bne.n	800d220 <lv_utils_bsearch+0x32>
        middle += (n / 2) * size;
 800d226:	4630      	mov	r0, r6
}
 800d228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800d22c <lv_theme_get_current>:
    if(!inited)
        return NULL;
    else
        return &current_theme;
#endif
}
 800d22c:	4b01      	ldr	r3, [pc, #4]	; (800d234 <lv_theme_get_current+0x8>)
 800d22e:	6818      	ldr	r0, [r3, #0]
 800d230:	4770      	bx	lr
 800d232:	bf00      	nop
 800d234:	2000c360 	.word	0x2000c360

0800d238 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800d238:	f8df d034 	ldr.w	sp, [pc, #52]	; 800d270 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800d23c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800d23e:	e003      	b.n	800d248 <LoopCopyDataInit>

0800d240 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800d240:	4b0c      	ldr	r3, [pc, #48]	; (800d274 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800d242:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800d244:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800d246:	3104      	adds	r1, #4

0800d248 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800d248:	480b      	ldr	r0, [pc, #44]	; (800d278 <LoopForever+0xa>)
	ldr	r3, =_edata
 800d24a:	4b0c      	ldr	r3, [pc, #48]	; (800d27c <LoopForever+0xe>)
	adds	r2, r0, r1
 800d24c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800d24e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800d250:	d3f6      	bcc.n	800d240 <CopyDataInit>
	ldr	r2, =_sbss
 800d252:	4a0b      	ldr	r2, [pc, #44]	; (800d280 <LoopForever+0x12>)
	b	LoopFillZerobss
 800d254:	e002      	b.n	800d25c <LoopFillZerobss>

0800d256 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800d256:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800d258:	f842 3b04 	str.w	r3, [r2], #4

0800d25c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800d25c:	4b09      	ldr	r3, [pc, #36]	; (800d284 <LoopForever+0x16>)
	cmp	r2, r3
 800d25e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800d260:	d3f9      	bcc.n	800d256 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800d262:	f7f4 ff8d 	bl	8002180 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800d266:	f000 f843 	bl	800d2f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800d26a:	f7f4 fab9 	bl	80017e0 <main>

0800d26e <LoopForever>:

LoopForever:
    b LoopForever
 800d26e:	e7fe      	b.n	800d26e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800d270:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800d274:	0801324c 	.word	0x0801324c
	ldr	r0, =_sdata
 800d278:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800d27c:	2000138c 	.word	0x2000138c
	ldr	r2, =_sbss
 800d280:	2000138c 	.word	0x2000138c
	ldr	r3, = _ebss
 800d284:	2000d944 	.word	0x2000d944

0800d288 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800d288:	e7fe      	b.n	800d288 <ADC1_2_IRQHandler>

0800d28a <_calloc_r>:
 800d28a:	b510      	push	{r4, lr}
 800d28c:	4351      	muls	r1, r2
 800d28e:	f000 f853 	bl	800d338 <_malloc_r>
 800d292:	4604      	mov	r4, r0
 800d294:	b198      	cbz	r0, 800d2be <_calloc_r+0x34>
 800d296:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800d29a:	f022 0203 	bic.w	r2, r2, #3
 800d29e:	3a04      	subs	r2, #4
 800d2a0:	2a24      	cmp	r2, #36	; 0x24
 800d2a2:	d81b      	bhi.n	800d2dc <_calloc_r+0x52>
 800d2a4:	2a13      	cmp	r2, #19
 800d2a6:	d917      	bls.n	800d2d8 <_calloc_r+0x4e>
 800d2a8:	2100      	movs	r1, #0
 800d2aa:	2a1b      	cmp	r2, #27
 800d2ac:	6001      	str	r1, [r0, #0]
 800d2ae:	6041      	str	r1, [r0, #4]
 800d2b0:	d807      	bhi.n	800d2c2 <_calloc_r+0x38>
 800d2b2:	f100 0308 	add.w	r3, r0, #8
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	601a      	str	r2, [r3, #0]
 800d2ba:	605a      	str	r2, [r3, #4]
 800d2bc:	609a      	str	r2, [r3, #8]
 800d2be:	4620      	mov	r0, r4
 800d2c0:	bd10      	pop	{r4, pc}
 800d2c2:	2a24      	cmp	r2, #36	; 0x24
 800d2c4:	6081      	str	r1, [r0, #8]
 800d2c6:	60c1      	str	r1, [r0, #12]
 800d2c8:	bf11      	iteee	ne
 800d2ca:	f100 0310 	addne.w	r3, r0, #16
 800d2ce:	6101      	streq	r1, [r0, #16]
 800d2d0:	f100 0318 	addeq.w	r3, r0, #24
 800d2d4:	6141      	streq	r1, [r0, #20]
 800d2d6:	e7ee      	b.n	800d2b6 <_calloc_r+0x2c>
 800d2d8:	4603      	mov	r3, r0
 800d2da:	e7ec      	b.n	800d2b6 <_calloc_r+0x2c>
 800d2dc:	2100      	movs	r1, #0
 800d2de:	f000 fa44 	bl	800d76a <memset>
 800d2e2:	e7ec      	b.n	800d2be <_calloc_r+0x34>

0800d2e4 <__errno>:
 800d2e4:	4b01      	ldr	r3, [pc, #4]	; (800d2ec <__errno+0x8>)
 800d2e6:	6818      	ldr	r0, [r3, #0]
 800d2e8:	4770      	bx	lr
 800d2ea:	bf00      	nop
 800d2ec:	20000d1c 	.word	0x20000d1c

0800d2f0 <__libc_init_array>:
 800d2f0:	b570      	push	{r4, r5, r6, lr}
 800d2f2:	4e0d      	ldr	r6, [pc, #52]	; (800d328 <__libc_init_array+0x38>)
 800d2f4:	4c0d      	ldr	r4, [pc, #52]	; (800d32c <__libc_init_array+0x3c>)
 800d2f6:	1ba4      	subs	r4, r4, r6
 800d2f8:	10a4      	asrs	r4, r4, #2
 800d2fa:	2500      	movs	r5, #0
 800d2fc:	42a5      	cmp	r5, r4
 800d2fe:	d109      	bne.n	800d314 <__libc_init_array+0x24>
 800d300:	4e0b      	ldr	r6, [pc, #44]	; (800d330 <__libc_init_array+0x40>)
 800d302:	4c0c      	ldr	r4, [pc, #48]	; (800d334 <__libc_init_array+0x44>)
 800d304:	f002 fefc 	bl	8010100 <_init>
 800d308:	1ba4      	subs	r4, r4, r6
 800d30a:	10a4      	asrs	r4, r4, #2
 800d30c:	2500      	movs	r5, #0
 800d30e:	42a5      	cmp	r5, r4
 800d310:	d105      	bne.n	800d31e <__libc_init_array+0x2e>
 800d312:	bd70      	pop	{r4, r5, r6, pc}
 800d314:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d318:	4798      	blx	r3
 800d31a:	3501      	adds	r5, #1
 800d31c:	e7ee      	b.n	800d2fc <__libc_init_array+0xc>
 800d31e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d322:	4798      	blx	r3
 800d324:	3501      	adds	r5, #1
 800d326:	e7f2      	b.n	800d30e <__libc_init_array+0x1e>
 800d328:	08013244 	.word	0x08013244
 800d32c:	08013244 	.word	0x08013244
 800d330:	08013244 	.word	0x08013244
 800d334:	08013248 	.word	0x08013248

0800d338 <_malloc_r>:
 800d338:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d33c:	f101 040b 	add.w	r4, r1, #11
 800d340:	2c16      	cmp	r4, #22
 800d342:	4681      	mov	r9, r0
 800d344:	d907      	bls.n	800d356 <_malloc_r+0x1e>
 800d346:	f034 0407 	bics.w	r4, r4, #7
 800d34a:	d505      	bpl.n	800d358 <_malloc_r+0x20>
 800d34c:	230c      	movs	r3, #12
 800d34e:	f8c9 3000 	str.w	r3, [r9]
 800d352:	2600      	movs	r6, #0
 800d354:	e131      	b.n	800d5ba <_malloc_r+0x282>
 800d356:	2410      	movs	r4, #16
 800d358:	428c      	cmp	r4, r1
 800d35a:	d3f7      	bcc.n	800d34c <_malloc_r+0x14>
 800d35c:	4648      	mov	r0, r9
 800d35e:	f000 fa0d 	bl	800d77c <__malloc_lock>
 800d362:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 800d366:	4d9c      	ldr	r5, [pc, #624]	; (800d5d8 <_malloc_r+0x2a0>)
 800d368:	d236      	bcs.n	800d3d8 <_malloc_r+0xa0>
 800d36a:	f104 0208 	add.w	r2, r4, #8
 800d36e:	442a      	add	r2, r5
 800d370:	f1a2 0108 	sub.w	r1, r2, #8
 800d374:	6856      	ldr	r6, [r2, #4]
 800d376:	428e      	cmp	r6, r1
 800d378:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 800d37c:	d102      	bne.n	800d384 <_malloc_r+0x4c>
 800d37e:	68d6      	ldr	r6, [r2, #12]
 800d380:	42b2      	cmp	r2, r6
 800d382:	d010      	beq.n	800d3a6 <_malloc_r+0x6e>
 800d384:	6873      	ldr	r3, [r6, #4]
 800d386:	68f2      	ldr	r2, [r6, #12]
 800d388:	68b1      	ldr	r1, [r6, #8]
 800d38a:	f023 0303 	bic.w	r3, r3, #3
 800d38e:	60ca      	str	r2, [r1, #12]
 800d390:	4433      	add	r3, r6
 800d392:	6091      	str	r1, [r2, #8]
 800d394:	685a      	ldr	r2, [r3, #4]
 800d396:	f042 0201 	orr.w	r2, r2, #1
 800d39a:	605a      	str	r2, [r3, #4]
 800d39c:	4648      	mov	r0, r9
 800d39e:	f000 f9f3 	bl	800d788 <__malloc_unlock>
 800d3a2:	3608      	adds	r6, #8
 800d3a4:	e109      	b.n	800d5ba <_malloc_r+0x282>
 800d3a6:	3302      	adds	r3, #2
 800d3a8:	4a8c      	ldr	r2, [pc, #560]	; (800d5dc <_malloc_r+0x2a4>)
 800d3aa:	692e      	ldr	r6, [r5, #16]
 800d3ac:	4296      	cmp	r6, r2
 800d3ae:	4611      	mov	r1, r2
 800d3b0:	d06d      	beq.n	800d48e <_malloc_r+0x156>
 800d3b2:	6870      	ldr	r0, [r6, #4]
 800d3b4:	f020 0003 	bic.w	r0, r0, #3
 800d3b8:	1b07      	subs	r7, r0, r4
 800d3ba:	2f0f      	cmp	r7, #15
 800d3bc:	dd47      	ble.n	800d44e <_malloc_r+0x116>
 800d3be:	1933      	adds	r3, r6, r4
 800d3c0:	f044 0401 	orr.w	r4, r4, #1
 800d3c4:	6074      	str	r4, [r6, #4]
 800d3c6:	616b      	str	r3, [r5, #20]
 800d3c8:	612b      	str	r3, [r5, #16]
 800d3ca:	60da      	str	r2, [r3, #12]
 800d3cc:	609a      	str	r2, [r3, #8]
 800d3ce:	f047 0201 	orr.w	r2, r7, #1
 800d3d2:	605a      	str	r2, [r3, #4]
 800d3d4:	5037      	str	r7, [r6, r0]
 800d3d6:	e7e1      	b.n	800d39c <_malloc_r+0x64>
 800d3d8:	0a63      	lsrs	r3, r4, #9
 800d3da:	d02a      	beq.n	800d432 <_malloc_r+0xfa>
 800d3dc:	2b04      	cmp	r3, #4
 800d3de:	d812      	bhi.n	800d406 <_malloc_r+0xce>
 800d3e0:	09a3      	lsrs	r3, r4, #6
 800d3e2:	3338      	adds	r3, #56	; 0x38
 800d3e4:	1c5a      	adds	r2, r3, #1
 800d3e6:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800d3ea:	f1a2 0008 	sub.w	r0, r2, #8
 800d3ee:	6856      	ldr	r6, [r2, #4]
 800d3f0:	4286      	cmp	r6, r0
 800d3f2:	d006      	beq.n	800d402 <_malloc_r+0xca>
 800d3f4:	6872      	ldr	r2, [r6, #4]
 800d3f6:	f022 0203 	bic.w	r2, r2, #3
 800d3fa:	1b11      	subs	r1, r2, r4
 800d3fc:	290f      	cmp	r1, #15
 800d3fe:	dd1c      	ble.n	800d43a <_malloc_r+0x102>
 800d400:	3b01      	subs	r3, #1
 800d402:	3301      	adds	r3, #1
 800d404:	e7d0      	b.n	800d3a8 <_malloc_r+0x70>
 800d406:	2b14      	cmp	r3, #20
 800d408:	d801      	bhi.n	800d40e <_malloc_r+0xd6>
 800d40a:	335b      	adds	r3, #91	; 0x5b
 800d40c:	e7ea      	b.n	800d3e4 <_malloc_r+0xac>
 800d40e:	2b54      	cmp	r3, #84	; 0x54
 800d410:	d802      	bhi.n	800d418 <_malloc_r+0xe0>
 800d412:	0b23      	lsrs	r3, r4, #12
 800d414:	336e      	adds	r3, #110	; 0x6e
 800d416:	e7e5      	b.n	800d3e4 <_malloc_r+0xac>
 800d418:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800d41c:	d802      	bhi.n	800d424 <_malloc_r+0xec>
 800d41e:	0be3      	lsrs	r3, r4, #15
 800d420:	3377      	adds	r3, #119	; 0x77
 800d422:	e7df      	b.n	800d3e4 <_malloc_r+0xac>
 800d424:	f240 5254 	movw	r2, #1364	; 0x554
 800d428:	4293      	cmp	r3, r2
 800d42a:	d804      	bhi.n	800d436 <_malloc_r+0xfe>
 800d42c:	0ca3      	lsrs	r3, r4, #18
 800d42e:	337c      	adds	r3, #124	; 0x7c
 800d430:	e7d8      	b.n	800d3e4 <_malloc_r+0xac>
 800d432:	233f      	movs	r3, #63	; 0x3f
 800d434:	e7d6      	b.n	800d3e4 <_malloc_r+0xac>
 800d436:	237e      	movs	r3, #126	; 0x7e
 800d438:	e7d4      	b.n	800d3e4 <_malloc_r+0xac>
 800d43a:	2900      	cmp	r1, #0
 800d43c:	68f1      	ldr	r1, [r6, #12]
 800d43e:	db04      	blt.n	800d44a <_malloc_r+0x112>
 800d440:	68b3      	ldr	r3, [r6, #8]
 800d442:	60d9      	str	r1, [r3, #12]
 800d444:	608b      	str	r3, [r1, #8]
 800d446:	18b3      	adds	r3, r6, r2
 800d448:	e7a4      	b.n	800d394 <_malloc_r+0x5c>
 800d44a:	460e      	mov	r6, r1
 800d44c:	e7d0      	b.n	800d3f0 <_malloc_r+0xb8>
 800d44e:	2f00      	cmp	r7, #0
 800d450:	616a      	str	r2, [r5, #20]
 800d452:	612a      	str	r2, [r5, #16]
 800d454:	db05      	blt.n	800d462 <_malloc_r+0x12a>
 800d456:	4430      	add	r0, r6
 800d458:	6843      	ldr	r3, [r0, #4]
 800d45a:	f043 0301 	orr.w	r3, r3, #1
 800d45e:	6043      	str	r3, [r0, #4]
 800d460:	e79c      	b.n	800d39c <_malloc_r+0x64>
 800d462:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800d466:	d244      	bcs.n	800d4f2 <_malloc_r+0x1ba>
 800d468:	08c0      	lsrs	r0, r0, #3
 800d46a:	1087      	asrs	r7, r0, #2
 800d46c:	2201      	movs	r2, #1
 800d46e:	fa02 f707 	lsl.w	r7, r2, r7
 800d472:	686a      	ldr	r2, [r5, #4]
 800d474:	3001      	adds	r0, #1
 800d476:	433a      	orrs	r2, r7
 800d478:	606a      	str	r2, [r5, #4]
 800d47a:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800d47e:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 800d482:	60b7      	str	r7, [r6, #8]
 800d484:	3a08      	subs	r2, #8
 800d486:	60f2      	str	r2, [r6, #12]
 800d488:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 800d48c:	60fe      	str	r6, [r7, #12]
 800d48e:	2001      	movs	r0, #1
 800d490:	109a      	asrs	r2, r3, #2
 800d492:	fa00 f202 	lsl.w	r2, r0, r2
 800d496:	6868      	ldr	r0, [r5, #4]
 800d498:	4282      	cmp	r2, r0
 800d49a:	f200 80a1 	bhi.w	800d5e0 <_malloc_r+0x2a8>
 800d49e:	4202      	tst	r2, r0
 800d4a0:	d106      	bne.n	800d4b0 <_malloc_r+0x178>
 800d4a2:	f023 0303 	bic.w	r3, r3, #3
 800d4a6:	0052      	lsls	r2, r2, #1
 800d4a8:	4202      	tst	r2, r0
 800d4aa:	f103 0304 	add.w	r3, r3, #4
 800d4ae:	d0fa      	beq.n	800d4a6 <_malloc_r+0x16e>
 800d4b0:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 800d4b4:	46e0      	mov	r8, ip
 800d4b6:	469e      	mov	lr, r3
 800d4b8:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800d4bc:	4546      	cmp	r6, r8
 800d4be:	d153      	bne.n	800d568 <_malloc_r+0x230>
 800d4c0:	f10e 0e01 	add.w	lr, lr, #1
 800d4c4:	f01e 0f03 	tst.w	lr, #3
 800d4c8:	f108 0808 	add.w	r8, r8, #8
 800d4cc:	d1f4      	bne.n	800d4b8 <_malloc_r+0x180>
 800d4ce:	0798      	lsls	r0, r3, #30
 800d4d0:	d179      	bne.n	800d5c6 <_malloc_r+0x28e>
 800d4d2:	686b      	ldr	r3, [r5, #4]
 800d4d4:	ea23 0302 	bic.w	r3, r3, r2
 800d4d8:	606b      	str	r3, [r5, #4]
 800d4da:	6868      	ldr	r0, [r5, #4]
 800d4dc:	0052      	lsls	r2, r2, #1
 800d4de:	4282      	cmp	r2, r0
 800d4e0:	d87e      	bhi.n	800d5e0 <_malloc_r+0x2a8>
 800d4e2:	2a00      	cmp	r2, #0
 800d4e4:	d07c      	beq.n	800d5e0 <_malloc_r+0x2a8>
 800d4e6:	4673      	mov	r3, lr
 800d4e8:	4202      	tst	r2, r0
 800d4ea:	d1e1      	bne.n	800d4b0 <_malloc_r+0x178>
 800d4ec:	3304      	adds	r3, #4
 800d4ee:	0052      	lsls	r2, r2, #1
 800d4f0:	e7fa      	b.n	800d4e8 <_malloc_r+0x1b0>
 800d4f2:	0a42      	lsrs	r2, r0, #9
 800d4f4:	2a04      	cmp	r2, #4
 800d4f6:	d815      	bhi.n	800d524 <_malloc_r+0x1ec>
 800d4f8:	0982      	lsrs	r2, r0, #6
 800d4fa:	3238      	adds	r2, #56	; 0x38
 800d4fc:	1c57      	adds	r7, r2, #1
 800d4fe:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 800d502:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 800d506:	45be      	cmp	lr, r7
 800d508:	d126      	bne.n	800d558 <_malloc_r+0x220>
 800d50a:	2001      	movs	r0, #1
 800d50c:	1092      	asrs	r2, r2, #2
 800d50e:	fa00 f202 	lsl.w	r2, r0, r2
 800d512:	6868      	ldr	r0, [r5, #4]
 800d514:	4310      	orrs	r0, r2
 800d516:	6068      	str	r0, [r5, #4]
 800d518:	f8c6 e00c 	str.w	lr, [r6, #12]
 800d51c:	60b7      	str	r7, [r6, #8]
 800d51e:	f8ce 6008 	str.w	r6, [lr, #8]
 800d522:	e7b3      	b.n	800d48c <_malloc_r+0x154>
 800d524:	2a14      	cmp	r2, #20
 800d526:	d801      	bhi.n	800d52c <_malloc_r+0x1f4>
 800d528:	325b      	adds	r2, #91	; 0x5b
 800d52a:	e7e7      	b.n	800d4fc <_malloc_r+0x1c4>
 800d52c:	2a54      	cmp	r2, #84	; 0x54
 800d52e:	d802      	bhi.n	800d536 <_malloc_r+0x1fe>
 800d530:	0b02      	lsrs	r2, r0, #12
 800d532:	326e      	adds	r2, #110	; 0x6e
 800d534:	e7e2      	b.n	800d4fc <_malloc_r+0x1c4>
 800d536:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800d53a:	d802      	bhi.n	800d542 <_malloc_r+0x20a>
 800d53c:	0bc2      	lsrs	r2, r0, #15
 800d53e:	3277      	adds	r2, #119	; 0x77
 800d540:	e7dc      	b.n	800d4fc <_malloc_r+0x1c4>
 800d542:	f240 5754 	movw	r7, #1364	; 0x554
 800d546:	42ba      	cmp	r2, r7
 800d548:	bf9a      	itte	ls
 800d54a:	0c82      	lsrls	r2, r0, #18
 800d54c:	327c      	addls	r2, #124	; 0x7c
 800d54e:	227e      	movhi	r2, #126	; 0x7e
 800d550:	e7d4      	b.n	800d4fc <_malloc_r+0x1c4>
 800d552:	68bf      	ldr	r7, [r7, #8]
 800d554:	45be      	cmp	lr, r7
 800d556:	d004      	beq.n	800d562 <_malloc_r+0x22a>
 800d558:	687a      	ldr	r2, [r7, #4]
 800d55a:	f022 0203 	bic.w	r2, r2, #3
 800d55e:	4290      	cmp	r0, r2
 800d560:	d3f7      	bcc.n	800d552 <_malloc_r+0x21a>
 800d562:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 800d566:	e7d7      	b.n	800d518 <_malloc_r+0x1e0>
 800d568:	6870      	ldr	r0, [r6, #4]
 800d56a:	68f7      	ldr	r7, [r6, #12]
 800d56c:	f020 0003 	bic.w	r0, r0, #3
 800d570:	eba0 0a04 	sub.w	sl, r0, r4
 800d574:	f1ba 0f0f 	cmp.w	sl, #15
 800d578:	dd10      	ble.n	800d59c <_malloc_r+0x264>
 800d57a:	68b2      	ldr	r2, [r6, #8]
 800d57c:	1933      	adds	r3, r6, r4
 800d57e:	f044 0401 	orr.w	r4, r4, #1
 800d582:	6074      	str	r4, [r6, #4]
 800d584:	60d7      	str	r7, [r2, #12]
 800d586:	60ba      	str	r2, [r7, #8]
 800d588:	f04a 0201 	orr.w	r2, sl, #1
 800d58c:	616b      	str	r3, [r5, #20]
 800d58e:	612b      	str	r3, [r5, #16]
 800d590:	60d9      	str	r1, [r3, #12]
 800d592:	6099      	str	r1, [r3, #8]
 800d594:	605a      	str	r2, [r3, #4]
 800d596:	f846 a000 	str.w	sl, [r6, r0]
 800d59a:	e6ff      	b.n	800d39c <_malloc_r+0x64>
 800d59c:	f1ba 0f00 	cmp.w	sl, #0
 800d5a0:	db0f      	blt.n	800d5c2 <_malloc_r+0x28a>
 800d5a2:	4430      	add	r0, r6
 800d5a4:	6843      	ldr	r3, [r0, #4]
 800d5a6:	f043 0301 	orr.w	r3, r3, #1
 800d5aa:	6043      	str	r3, [r0, #4]
 800d5ac:	f856 3f08 	ldr.w	r3, [r6, #8]!
 800d5b0:	4648      	mov	r0, r9
 800d5b2:	60df      	str	r7, [r3, #12]
 800d5b4:	60bb      	str	r3, [r7, #8]
 800d5b6:	f000 f8e7 	bl	800d788 <__malloc_unlock>
 800d5ba:	4630      	mov	r0, r6
 800d5bc:	b003      	add	sp, #12
 800d5be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5c2:	463e      	mov	r6, r7
 800d5c4:	e77a      	b.n	800d4bc <_malloc_r+0x184>
 800d5c6:	f85c 0908 	ldr.w	r0, [ip], #-8
 800d5ca:	4584      	cmp	ip, r0
 800d5cc:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800d5d0:	f43f af7d 	beq.w	800d4ce <_malloc_r+0x196>
 800d5d4:	e781      	b.n	800d4da <_malloc_r+0x1a2>
 800d5d6:	bf00      	nop
 800d5d8:	20000e10 	.word	0x20000e10
 800d5dc:	20000e18 	.word	0x20000e18
 800d5e0:	f8d5 b008 	ldr.w	fp, [r5, #8]
 800d5e4:	f8db 6004 	ldr.w	r6, [fp, #4]
 800d5e8:	f026 0603 	bic.w	r6, r6, #3
 800d5ec:	42b4      	cmp	r4, r6
 800d5ee:	d803      	bhi.n	800d5f8 <_malloc_r+0x2c0>
 800d5f0:	1b33      	subs	r3, r6, r4
 800d5f2:	2b0f      	cmp	r3, #15
 800d5f4:	f300 8096 	bgt.w	800d724 <_malloc_r+0x3ec>
 800d5f8:	4a4f      	ldr	r2, [pc, #316]	; (800d738 <_malloc_r+0x400>)
 800d5fa:	6817      	ldr	r7, [r2, #0]
 800d5fc:	4a4f      	ldr	r2, [pc, #316]	; (800d73c <_malloc_r+0x404>)
 800d5fe:	6811      	ldr	r1, [r2, #0]
 800d600:	3710      	adds	r7, #16
 800d602:	3101      	adds	r1, #1
 800d604:	eb0b 0306 	add.w	r3, fp, r6
 800d608:	4427      	add	r7, r4
 800d60a:	d005      	beq.n	800d618 <_malloc_r+0x2e0>
 800d60c:	494c      	ldr	r1, [pc, #304]	; (800d740 <_malloc_r+0x408>)
 800d60e:	3901      	subs	r1, #1
 800d610:	440f      	add	r7, r1
 800d612:	3101      	adds	r1, #1
 800d614:	4249      	negs	r1, r1
 800d616:	400f      	ands	r7, r1
 800d618:	4639      	mov	r1, r7
 800d61a:	4648      	mov	r0, r9
 800d61c:	9201      	str	r2, [sp, #4]
 800d61e:	9300      	str	r3, [sp, #0]
 800d620:	f000 f8b8 	bl	800d794 <_sbrk_r>
 800d624:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800d628:	4680      	mov	r8, r0
 800d62a:	d056      	beq.n	800d6da <_malloc_r+0x3a2>
 800d62c:	9b00      	ldr	r3, [sp, #0]
 800d62e:	9a01      	ldr	r2, [sp, #4]
 800d630:	4283      	cmp	r3, r0
 800d632:	d901      	bls.n	800d638 <_malloc_r+0x300>
 800d634:	45ab      	cmp	fp, r5
 800d636:	d150      	bne.n	800d6da <_malloc_r+0x3a2>
 800d638:	4842      	ldr	r0, [pc, #264]	; (800d744 <_malloc_r+0x40c>)
 800d63a:	6801      	ldr	r1, [r0, #0]
 800d63c:	4543      	cmp	r3, r8
 800d63e:	eb07 0e01 	add.w	lr, r7, r1
 800d642:	f8c0 e000 	str.w	lr, [r0]
 800d646:	4940      	ldr	r1, [pc, #256]	; (800d748 <_malloc_r+0x410>)
 800d648:	4682      	mov	sl, r0
 800d64a:	d113      	bne.n	800d674 <_malloc_r+0x33c>
 800d64c:	420b      	tst	r3, r1
 800d64e:	d111      	bne.n	800d674 <_malloc_r+0x33c>
 800d650:	68ab      	ldr	r3, [r5, #8]
 800d652:	443e      	add	r6, r7
 800d654:	f046 0601 	orr.w	r6, r6, #1
 800d658:	605e      	str	r6, [r3, #4]
 800d65a:	4a3c      	ldr	r2, [pc, #240]	; (800d74c <_malloc_r+0x414>)
 800d65c:	f8da 3000 	ldr.w	r3, [sl]
 800d660:	6811      	ldr	r1, [r2, #0]
 800d662:	428b      	cmp	r3, r1
 800d664:	bf88      	it	hi
 800d666:	6013      	strhi	r3, [r2, #0]
 800d668:	4a39      	ldr	r2, [pc, #228]	; (800d750 <_malloc_r+0x418>)
 800d66a:	6811      	ldr	r1, [r2, #0]
 800d66c:	428b      	cmp	r3, r1
 800d66e:	bf88      	it	hi
 800d670:	6013      	strhi	r3, [r2, #0]
 800d672:	e032      	b.n	800d6da <_malloc_r+0x3a2>
 800d674:	6810      	ldr	r0, [r2, #0]
 800d676:	3001      	adds	r0, #1
 800d678:	bf1b      	ittet	ne
 800d67a:	eba8 0303 	subne.w	r3, r8, r3
 800d67e:	4473      	addne	r3, lr
 800d680:	f8c2 8000 	streq.w	r8, [r2]
 800d684:	f8ca 3000 	strne.w	r3, [sl]
 800d688:	f018 0007 	ands.w	r0, r8, #7
 800d68c:	bf1c      	itt	ne
 800d68e:	f1c0 0008 	rsbne	r0, r0, #8
 800d692:	4480      	addne	r8, r0
 800d694:	4b2a      	ldr	r3, [pc, #168]	; (800d740 <_malloc_r+0x408>)
 800d696:	4447      	add	r7, r8
 800d698:	4418      	add	r0, r3
 800d69a:	400f      	ands	r7, r1
 800d69c:	1bc7      	subs	r7, r0, r7
 800d69e:	4639      	mov	r1, r7
 800d6a0:	4648      	mov	r0, r9
 800d6a2:	f000 f877 	bl	800d794 <_sbrk_r>
 800d6a6:	1c43      	adds	r3, r0, #1
 800d6a8:	bf08      	it	eq
 800d6aa:	4640      	moveq	r0, r8
 800d6ac:	f8da 3000 	ldr.w	r3, [sl]
 800d6b0:	f8c5 8008 	str.w	r8, [r5, #8]
 800d6b4:	bf08      	it	eq
 800d6b6:	2700      	moveq	r7, #0
 800d6b8:	eba0 0008 	sub.w	r0, r0, r8
 800d6bc:	443b      	add	r3, r7
 800d6be:	4407      	add	r7, r0
 800d6c0:	f047 0701 	orr.w	r7, r7, #1
 800d6c4:	45ab      	cmp	fp, r5
 800d6c6:	f8ca 3000 	str.w	r3, [sl]
 800d6ca:	f8c8 7004 	str.w	r7, [r8, #4]
 800d6ce:	d0c4      	beq.n	800d65a <_malloc_r+0x322>
 800d6d0:	2e0f      	cmp	r6, #15
 800d6d2:	d810      	bhi.n	800d6f6 <_malloc_r+0x3be>
 800d6d4:	2301      	movs	r3, #1
 800d6d6:	f8c8 3004 	str.w	r3, [r8, #4]
 800d6da:	68ab      	ldr	r3, [r5, #8]
 800d6dc:	685a      	ldr	r2, [r3, #4]
 800d6de:	f022 0203 	bic.w	r2, r2, #3
 800d6e2:	4294      	cmp	r4, r2
 800d6e4:	eba2 0304 	sub.w	r3, r2, r4
 800d6e8:	d801      	bhi.n	800d6ee <_malloc_r+0x3b6>
 800d6ea:	2b0f      	cmp	r3, #15
 800d6ec:	dc1a      	bgt.n	800d724 <_malloc_r+0x3ec>
 800d6ee:	4648      	mov	r0, r9
 800d6f0:	f000 f84a 	bl	800d788 <__malloc_unlock>
 800d6f4:	e62d      	b.n	800d352 <_malloc_r+0x1a>
 800d6f6:	f8db 3004 	ldr.w	r3, [fp, #4]
 800d6fa:	3e0c      	subs	r6, #12
 800d6fc:	f026 0607 	bic.w	r6, r6, #7
 800d700:	f003 0301 	and.w	r3, r3, #1
 800d704:	4333      	orrs	r3, r6
 800d706:	f8cb 3004 	str.w	r3, [fp, #4]
 800d70a:	eb0b 0306 	add.w	r3, fp, r6
 800d70e:	2205      	movs	r2, #5
 800d710:	2e0f      	cmp	r6, #15
 800d712:	605a      	str	r2, [r3, #4]
 800d714:	609a      	str	r2, [r3, #8]
 800d716:	d9a0      	bls.n	800d65a <_malloc_r+0x322>
 800d718:	f10b 0108 	add.w	r1, fp, #8
 800d71c:	4648      	mov	r0, r9
 800d71e:	f001 ff17 	bl	800f550 <_free_r>
 800d722:	e79a      	b.n	800d65a <_malloc_r+0x322>
 800d724:	68ae      	ldr	r6, [r5, #8]
 800d726:	f044 0201 	orr.w	r2, r4, #1
 800d72a:	4434      	add	r4, r6
 800d72c:	f043 0301 	orr.w	r3, r3, #1
 800d730:	6072      	str	r2, [r6, #4]
 800d732:	60ac      	str	r4, [r5, #8]
 800d734:	6063      	str	r3, [r4, #4]
 800d736:	e631      	b.n	800d39c <_malloc_r+0x64>
 800d738:	2000c394 	.word	0x2000c394
 800d73c:	20001218 	.word	0x20001218
 800d740:	00001000 	.word	0x00001000
 800d744:	2000c364 	.word	0x2000c364
 800d748:	00000fff 	.word	0x00000fff
 800d74c:	2000c38c 	.word	0x2000c38c
 800d750:	2000c390 	.word	0x2000c390

0800d754 <memcpy>:
 800d754:	b510      	push	{r4, lr}
 800d756:	1e43      	subs	r3, r0, #1
 800d758:	440a      	add	r2, r1
 800d75a:	4291      	cmp	r1, r2
 800d75c:	d100      	bne.n	800d760 <memcpy+0xc>
 800d75e:	bd10      	pop	{r4, pc}
 800d760:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d764:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d768:	e7f7      	b.n	800d75a <memcpy+0x6>

0800d76a <memset>:
 800d76a:	4402      	add	r2, r0
 800d76c:	4603      	mov	r3, r0
 800d76e:	4293      	cmp	r3, r2
 800d770:	d100      	bne.n	800d774 <memset+0xa>
 800d772:	4770      	bx	lr
 800d774:	f803 1b01 	strb.w	r1, [r3], #1
 800d778:	e7f9      	b.n	800d76e <memset+0x4>
	...

0800d77c <__malloc_lock>:
 800d77c:	4801      	ldr	r0, [pc, #4]	; (800d784 <__malloc_lock+0x8>)
 800d77e:	f001 bfb1 	b.w	800f6e4 <__retarget_lock_acquire_recursive>
 800d782:	bf00      	nop
 800d784:	2000d938 	.word	0x2000d938

0800d788 <__malloc_unlock>:
 800d788:	4801      	ldr	r0, [pc, #4]	; (800d790 <__malloc_unlock+0x8>)
 800d78a:	f001 bfac 	b.w	800f6e6 <__retarget_lock_release_recursive>
 800d78e:	bf00      	nop
 800d790:	2000d938 	.word	0x2000d938

0800d794 <_sbrk_r>:
 800d794:	b538      	push	{r3, r4, r5, lr}
 800d796:	4c06      	ldr	r4, [pc, #24]	; (800d7b0 <_sbrk_r+0x1c>)
 800d798:	2300      	movs	r3, #0
 800d79a:	4605      	mov	r5, r0
 800d79c:	4608      	mov	r0, r1
 800d79e:	6023      	str	r3, [r4, #0]
 800d7a0:	f7f4 fcd4 	bl	800214c <_sbrk>
 800d7a4:	1c43      	adds	r3, r0, #1
 800d7a6:	d102      	bne.n	800d7ae <_sbrk_r+0x1a>
 800d7a8:	6823      	ldr	r3, [r4, #0]
 800d7aa:	b103      	cbz	r3, 800d7ae <_sbrk_r+0x1a>
 800d7ac:	602b      	str	r3, [r5, #0]
 800d7ae:	bd38      	pop	{r3, r4, r5, pc}
 800d7b0:	2000d940 	.word	0x2000d940

0800d7b4 <sprintf>:
 800d7b4:	b40e      	push	{r1, r2, r3}
 800d7b6:	b500      	push	{lr}
 800d7b8:	b09c      	sub	sp, #112	; 0x70
 800d7ba:	f44f 7102 	mov.w	r1, #520	; 0x208
 800d7be:	ab1d      	add	r3, sp, #116	; 0x74
 800d7c0:	f8ad 1014 	strh.w	r1, [sp, #20]
 800d7c4:	9002      	str	r0, [sp, #8]
 800d7c6:	9006      	str	r0, [sp, #24]
 800d7c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d7cc:	480a      	ldr	r0, [pc, #40]	; (800d7f8 <sprintf+0x44>)
 800d7ce:	9104      	str	r1, [sp, #16]
 800d7d0:	9107      	str	r1, [sp, #28]
 800d7d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d7d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7da:	f8ad 1016 	strh.w	r1, [sp, #22]
 800d7de:	6800      	ldr	r0, [r0, #0]
 800d7e0:	9301      	str	r3, [sp, #4]
 800d7e2:	a902      	add	r1, sp, #8
 800d7e4:	f000 f80c 	bl	800d800 <_svfprintf_r>
 800d7e8:	9b02      	ldr	r3, [sp, #8]
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	701a      	strb	r2, [r3, #0]
 800d7ee:	b01c      	add	sp, #112	; 0x70
 800d7f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d7f4:	b003      	add	sp, #12
 800d7f6:	4770      	bx	lr
 800d7f8:	20000d1c 	.word	0x20000d1c
 800d7fc:	00000000 	.word	0x00000000

0800d800 <_svfprintf_r>:
 800d800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d804:	b0bd      	sub	sp, #244	; 0xf4
 800d806:	468a      	mov	sl, r1
 800d808:	4615      	mov	r5, r2
 800d80a:	461f      	mov	r7, r3
 800d80c:	4683      	mov	fp, r0
 800d80e:	f001 ff5b 	bl	800f6c8 <_localeconv_r>
 800d812:	6803      	ldr	r3, [r0, #0]
 800d814:	930d      	str	r3, [sp, #52]	; 0x34
 800d816:	4618      	mov	r0, r3
 800d818:	f7f2 fce4 	bl	80001e4 <strlen>
 800d81c:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800d820:	9008      	str	r0, [sp, #32]
 800d822:	061b      	lsls	r3, r3, #24
 800d824:	d518      	bpl.n	800d858 <_svfprintf_r+0x58>
 800d826:	f8da 3010 	ldr.w	r3, [sl, #16]
 800d82a:	b9ab      	cbnz	r3, 800d858 <_svfprintf_r+0x58>
 800d82c:	2140      	movs	r1, #64	; 0x40
 800d82e:	4658      	mov	r0, fp
 800d830:	f7ff fd82 	bl	800d338 <_malloc_r>
 800d834:	f8ca 0000 	str.w	r0, [sl]
 800d838:	f8ca 0010 	str.w	r0, [sl, #16]
 800d83c:	b948      	cbnz	r0, 800d852 <_svfprintf_r+0x52>
 800d83e:	230c      	movs	r3, #12
 800d840:	f8cb 3000 	str.w	r3, [fp]
 800d844:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d848:	9309      	str	r3, [sp, #36]	; 0x24
 800d84a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d84c:	b03d      	add	sp, #244	; 0xf4
 800d84e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d852:	2340      	movs	r3, #64	; 0x40
 800d854:	f8ca 3014 	str.w	r3, [sl, #20]
 800d858:	ed9f 7b99 	vldr	d7, [pc, #612]	; 800dac0 <_svfprintf_r+0x2c0>
 800d85c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d860:	2300      	movs	r3, #0
 800d862:	ac2c      	add	r4, sp, #176	; 0xb0
 800d864:	941f      	str	r4, [sp, #124]	; 0x7c
 800d866:	9321      	str	r3, [sp, #132]	; 0x84
 800d868:	9320      	str	r3, [sp, #128]	; 0x80
 800d86a:	9505      	str	r5, [sp, #20]
 800d86c:	9303      	str	r3, [sp, #12]
 800d86e:	9311      	str	r3, [sp, #68]	; 0x44
 800d870:	9310      	str	r3, [sp, #64]	; 0x40
 800d872:	9309      	str	r3, [sp, #36]	; 0x24
 800d874:	9d05      	ldr	r5, [sp, #20]
 800d876:	462b      	mov	r3, r5
 800d878:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d87c:	b112      	cbz	r2, 800d884 <_svfprintf_r+0x84>
 800d87e:	2a25      	cmp	r2, #37	; 0x25
 800d880:	f040 8083 	bne.w	800d98a <_svfprintf_r+0x18a>
 800d884:	9b05      	ldr	r3, [sp, #20]
 800d886:	1aee      	subs	r6, r5, r3
 800d888:	d00d      	beq.n	800d8a6 <_svfprintf_r+0xa6>
 800d88a:	e884 0048 	stmia.w	r4, {r3, r6}
 800d88e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d890:	4433      	add	r3, r6
 800d892:	9321      	str	r3, [sp, #132]	; 0x84
 800d894:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d896:	3301      	adds	r3, #1
 800d898:	2b07      	cmp	r3, #7
 800d89a:	9320      	str	r3, [sp, #128]	; 0x80
 800d89c:	dc77      	bgt.n	800d98e <_svfprintf_r+0x18e>
 800d89e:	3408      	adds	r4, #8
 800d8a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8a2:	4433      	add	r3, r6
 800d8a4:	9309      	str	r3, [sp, #36]	; 0x24
 800d8a6:	782b      	ldrb	r3, [r5, #0]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	f000 8729 	beq.w	800e700 <_svfprintf_r+0xf00>
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	1c69      	adds	r1, r5, #1
 800d8b2:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800d8b6:	461a      	mov	r2, r3
 800d8b8:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800d8bc:	930a      	str	r3, [sp, #40]	; 0x28
 800d8be:	461d      	mov	r5, r3
 800d8c0:	200a      	movs	r0, #10
 800d8c2:	1c4e      	adds	r6, r1, #1
 800d8c4:	7809      	ldrb	r1, [r1, #0]
 800d8c6:	9605      	str	r6, [sp, #20]
 800d8c8:	9102      	str	r1, [sp, #8]
 800d8ca:	9902      	ldr	r1, [sp, #8]
 800d8cc:	3920      	subs	r1, #32
 800d8ce:	2958      	cmp	r1, #88	; 0x58
 800d8d0:	f200 8418 	bhi.w	800e104 <_svfprintf_r+0x904>
 800d8d4:	e8df f011 	tbh	[pc, r1, lsl #1]
 800d8d8:	041600a6 	.word	0x041600a6
 800d8dc:	00ab0416 	.word	0x00ab0416
 800d8e0:	04160416 	.word	0x04160416
 800d8e4:	04160416 	.word	0x04160416
 800d8e8:	04160416 	.word	0x04160416
 800d8ec:	006500ae 	.word	0x006500ae
 800d8f0:	00b70416 	.word	0x00b70416
 800d8f4:	041600ba 	.word	0x041600ba
 800d8f8:	00da00d7 	.word	0x00da00d7
 800d8fc:	00da00da 	.word	0x00da00da
 800d900:	00da00da 	.word	0x00da00da
 800d904:	00da00da 	.word	0x00da00da
 800d908:	00da00da 	.word	0x00da00da
 800d90c:	04160416 	.word	0x04160416
 800d910:	04160416 	.word	0x04160416
 800d914:	04160416 	.word	0x04160416
 800d918:	04160416 	.word	0x04160416
 800d91c:	04160416 	.word	0x04160416
 800d920:	012b0115 	.word	0x012b0115
 800d924:	012b0416 	.word	0x012b0416
 800d928:	04160416 	.word	0x04160416
 800d92c:	04160416 	.word	0x04160416
 800d930:	041600ed 	.word	0x041600ed
 800d934:	03400416 	.word	0x03400416
 800d938:	04160416 	.word	0x04160416
 800d93c:	04160416 	.word	0x04160416
 800d940:	03a80416 	.word	0x03a80416
 800d944:	04160416 	.word	0x04160416
 800d948:	04160086 	.word	0x04160086
 800d94c:	04160416 	.word	0x04160416
 800d950:	04160416 	.word	0x04160416
 800d954:	04160416 	.word	0x04160416
 800d958:	04160416 	.word	0x04160416
 800d95c:	01070416 	.word	0x01070416
 800d960:	012b006b 	.word	0x012b006b
 800d964:	012b012b 	.word	0x012b012b
 800d968:	006b00f0 	.word	0x006b00f0
 800d96c:	04160416 	.word	0x04160416
 800d970:	041600fa 	.word	0x041600fa
 800d974:	03420322 	.word	0x03420322
 800d978:	01010376 	.word	0x01010376
 800d97c:	03870416 	.word	0x03870416
 800d980:	03aa0416 	.word	0x03aa0416
 800d984:	04160416 	.word	0x04160416
 800d988:	03c2      	.short	0x03c2
 800d98a:	461d      	mov	r5, r3
 800d98c:	e773      	b.n	800d876 <_svfprintf_r+0x76>
 800d98e:	aa1f      	add	r2, sp, #124	; 0x7c
 800d990:	4651      	mov	r1, sl
 800d992:	4658      	mov	r0, fp
 800d994:	f002 f980 	bl	800fc98 <__ssprint_r>
 800d998:	2800      	cmp	r0, #0
 800d99a:	f040 8692 	bne.w	800e6c2 <_svfprintf_r+0xec2>
 800d99e:	ac2c      	add	r4, sp, #176	; 0xb0
 800d9a0:	e77e      	b.n	800d8a0 <_svfprintf_r+0xa0>
 800d9a2:	2301      	movs	r3, #1
 800d9a4:	222b      	movs	r2, #43	; 0x2b
 800d9a6:	9905      	ldr	r1, [sp, #20]
 800d9a8:	e78b      	b.n	800d8c2 <_svfprintf_r+0xc2>
 800d9aa:	460f      	mov	r7, r1
 800d9ac:	e7fb      	b.n	800d9a6 <_svfprintf_r+0x1a6>
 800d9ae:	b10b      	cbz	r3, 800d9b4 <_svfprintf_r+0x1b4>
 800d9b0:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800d9b4:	06ae      	lsls	r6, r5, #26
 800d9b6:	f140 80aa 	bpl.w	800db0e <_svfprintf_r+0x30e>
 800d9ba:	3707      	adds	r7, #7
 800d9bc:	f027 0707 	bic.w	r7, r7, #7
 800d9c0:	f107 0308 	add.w	r3, r7, #8
 800d9c4:	e9d7 6700 	ldrd	r6, r7, [r7]
 800d9c8:	9304      	str	r3, [sp, #16]
 800d9ca:	2e00      	cmp	r6, #0
 800d9cc:	f177 0300 	sbcs.w	r3, r7, #0
 800d9d0:	da06      	bge.n	800d9e0 <_svfprintf_r+0x1e0>
 800d9d2:	4276      	negs	r6, r6
 800d9d4:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800d9d8:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800d9dc:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800d9e0:	2301      	movs	r3, #1
 800d9e2:	e2ca      	b.n	800df7a <_svfprintf_r+0x77a>
 800d9e4:	b10b      	cbz	r3, 800d9ea <_svfprintf_r+0x1ea>
 800d9e6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800d9ea:	4b37      	ldr	r3, [pc, #220]	; (800dac8 <_svfprintf_r+0x2c8>)
 800d9ec:	9311      	str	r3, [sp, #68]	; 0x44
 800d9ee:	06ab      	lsls	r3, r5, #26
 800d9f0:	f140 8339 	bpl.w	800e066 <_svfprintf_r+0x866>
 800d9f4:	3707      	adds	r7, #7
 800d9f6:	f027 0707 	bic.w	r7, r7, #7
 800d9fa:	f107 0308 	add.w	r3, r7, #8
 800d9fe:	e9d7 6700 	ldrd	r6, r7, [r7]
 800da02:	9304      	str	r3, [sp, #16]
 800da04:	07e8      	lsls	r0, r5, #31
 800da06:	d50b      	bpl.n	800da20 <_svfprintf_r+0x220>
 800da08:	ea56 0307 	orrs.w	r3, r6, r7
 800da0c:	d008      	beq.n	800da20 <_svfprintf_r+0x220>
 800da0e:	2330      	movs	r3, #48	; 0x30
 800da10:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800da14:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800da18:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 800da1c:	f045 0502 	orr.w	r5, r5, #2
 800da20:	2302      	movs	r3, #2
 800da22:	e2a7      	b.n	800df74 <_svfprintf_r+0x774>
 800da24:	2a00      	cmp	r2, #0
 800da26:	d1be      	bne.n	800d9a6 <_svfprintf_r+0x1a6>
 800da28:	2301      	movs	r3, #1
 800da2a:	2220      	movs	r2, #32
 800da2c:	e7bb      	b.n	800d9a6 <_svfprintf_r+0x1a6>
 800da2e:	f045 0501 	orr.w	r5, r5, #1
 800da32:	e7b8      	b.n	800d9a6 <_svfprintf_r+0x1a6>
 800da34:	683e      	ldr	r6, [r7, #0]
 800da36:	960a      	str	r6, [sp, #40]	; 0x28
 800da38:	2e00      	cmp	r6, #0
 800da3a:	f107 0104 	add.w	r1, r7, #4
 800da3e:	dab4      	bge.n	800d9aa <_svfprintf_r+0x1aa>
 800da40:	4276      	negs	r6, r6
 800da42:	960a      	str	r6, [sp, #40]	; 0x28
 800da44:	460f      	mov	r7, r1
 800da46:	f045 0504 	orr.w	r5, r5, #4
 800da4a:	e7ac      	b.n	800d9a6 <_svfprintf_r+0x1a6>
 800da4c:	9905      	ldr	r1, [sp, #20]
 800da4e:	1c4e      	adds	r6, r1, #1
 800da50:	7809      	ldrb	r1, [r1, #0]
 800da52:	9102      	str	r1, [sp, #8]
 800da54:	292a      	cmp	r1, #42	; 0x2a
 800da56:	d010      	beq.n	800da7a <_svfprintf_r+0x27a>
 800da58:	f04f 0900 	mov.w	r9, #0
 800da5c:	9605      	str	r6, [sp, #20]
 800da5e:	9902      	ldr	r1, [sp, #8]
 800da60:	3930      	subs	r1, #48	; 0x30
 800da62:	2909      	cmp	r1, #9
 800da64:	f63f af31 	bhi.w	800d8ca <_svfprintf_r+0xca>
 800da68:	fb00 1909 	mla	r9, r0, r9, r1
 800da6c:	9905      	ldr	r1, [sp, #20]
 800da6e:	460e      	mov	r6, r1
 800da70:	f816 1b01 	ldrb.w	r1, [r6], #1
 800da74:	9102      	str	r1, [sp, #8]
 800da76:	9605      	str	r6, [sp, #20]
 800da78:	e7f1      	b.n	800da5e <_svfprintf_r+0x25e>
 800da7a:	6839      	ldr	r1, [r7, #0]
 800da7c:	9605      	str	r6, [sp, #20]
 800da7e:	ea41 79e1 	orr.w	r9, r1, r1, asr #31
 800da82:	3704      	adds	r7, #4
 800da84:	e78f      	b.n	800d9a6 <_svfprintf_r+0x1a6>
 800da86:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 800da8a:	e78c      	b.n	800d9a6 <_svfprintf_r+0x1a6>
 800da8c:	2100      	movs	r1, #0
 800da8e:	910a      	str	r1, [sp, #40]	; 0x28
 800da90:	9902      	ldr	r1, [sp, #8]
 800da92:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800da94:	3930      	subs	r1, #48	; 0x30
 800da96:	fb00 1106 	mla	r1, r0, r6, r1
 800da9a:	910a      	str	r1, [sp, #40]	; 0x28
 800da9c:	9905      	ldr	r1, [sp, #20]
 800da9e:	460e      	mov	r6, r1
 800daa0:	f816 1b01 	ldrb.w	r1, [r6], #1
 800daa4:	9102      	str	r1, [sp, #8]
 800daa6:	9902      	ldr	r1, [sp, #8]
 800daa8:	9605      	str	r6, [sp, #20]
 800daaa:	3930      	subs	r1, #48	; 0x30
 800daac:	2909      	cmp	r1, #9
 800daae:	d9ef      	bls.n	800da90 <_svfprintf_r+0x290>
 800dab0:	e70b      	b.n	800d8ca <_svfprintf_r+0xca>
 800dab2:	f045 0508 	orr.w	r5, r5, #8
 800dab6:	e776      	b.n	800d9a6 <_svfprintf_r+0x1a6>
 800dab8:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 800dabc:	e773      	b.n	800d9a6 <_svfprintf_r+0x1a6>
 800dabe:	bf00      	nop
	...
 800dac8:	08012fe7 	.word	0x08012fe7
 800dacc:	9905      	ldr	r1, [sp, #20]
 800dace:	7809      	ldrb	r1, [r1, #0]
 800dad0:	296c      	cmp	r1, #108	; 0x6c
 800dad2:	d105      	bne.n	800dae0 <_svfprintf_r+0x2e0>
 800dad4:	9905      	ldr	r1, [sp, #20]
 800dad6:	3101      	adds	r1, #1
 800dad8:	9105      	str	r1, [sp, #20]
 800dada:	f045 0520 	orr.w	r5, r5, #32
 800dade:	e762      	b.n	800d9a6 <_svfprintf_r+0x1a6>
 800dae0:	f045 0510 	orr.w	r5, r5, #16
 800dae4:	e75f      	b.n	800d9a6 <_svfprintf_r+0x1a6>
 800dae6:	1d3b      	adds	r3, r7, #4
 800dae8:	9304      	str	r3, [sp, #16]
 800daea:	2600      	movs	r6, #0
 800daec:	683b      	ldr	r3, [r7, #0]
 800daee:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 800daf2:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 800daf6:	f04f 0901 	mov.w	r9, #1
 800dafa:	4637      	mov	r7, r6
 800dafc:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 800db00:	e11b      	b.n	800dd3a <_svfprintf_r+0x53a>
 800db02:	b10b      	cbz	r3, 800db08 <_svfprintf_r+0x308>
 800db04:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800db08:	f045 0510 	orr.w	r5, r5, #16
 800db0c:	e752      	b.n	800d9b4 <_svfprintf_r+0x1b4>
 800db0e:	f015 0f10 	tst.w	r5, #16
 800db12:	f107 0304 	add.w	r3, r7, #4
 800db16:	d003      	beq.n	800db20 <_svfprintf_r+0x320>
 800db18:	683e      	ldr	r6, [r7, #0]
 800db1a:	9304      	str	r3, [sp, #16]
 800db1c:	17f7      	asrs	r7, r6, #31
 800db1e:	e754      	b.n	800d9ca <_svfprintf_r+0x1ca>
 800db20:	683e      	ldr	r6, [r7, #0]
 800db22:	9304      	str	r3, [sp, #16]
 800db24:	f015 0f40 	tst.w	r5, #64	; 0x40
 800db28:	bf18      	it	ne
 800db2a:	b236      	sxthne	r6, r6
 800db2c:	e7f6      	b.n	800db1c <_svfprintf_r+0x31c>
 800db2e:	b10b      	cbz	r3, 800db34 <_svfprintf_r+0x334>
 800db30:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800db34:	3707      	adds	r7, #7
 800db36:	f027 0707 	bic.w	r7, r7, #7
 800db3a:	f107 0308 	add.w	r3, r7, #8
 800db3e:	9304      	str	r3, [sp, #16]
 800db40:	ed97 7b00 	vldr	d7, [r7]
 800db44:	ed8d 7b06 	vstr	d7, [sp, #24]
 800db48:	9b06      	ldr	r3, [sp, #24]
 800db4a:	9312      	str	r3, [sp, #72]	; 0x48
 800db4c:	9b07      	ldr	r3, [sp, #28]
 800db4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800db52:	9313      	str	r3, [sp, #76]	; 0x4c
 800db54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800db58:	4b4a      	ldr	r3, [pc, #296]	; (800dc84 <_svfprintf_r+0x484>)
 800db5a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800db5e:	f7f2 fff1 	bl	8000b44 <__aeabi_dcmpun>
 800db62:	2800      	cmp	r0, #0
 800db64:	f040 85d5 	bne.w	800e712 <_svfprintf_r+0xf12>
 800db68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800db6c:	4b45      	ldr	r3, [pc, #276]	; (800dc84 <_svfprintf_r+0x484>)
 800db6e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800db72:	f7f2 ffc9 	bl	8000b08 <__aeabi_dcmple>
 800db76:	2800      	cmp	r0, #0
 800db78:	f040 85cb 	bne.w	800e712 <_svfprintf_r+0xf12>
 800db7c:	2200      	movs	r2, #0
 800db7e:	2300      	movs	r3, #0
 800db80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800db84:	f7f2 ffb6 	bl	8000af4 <__aeabi_dcmplt>
 800db88:	b110      	cbz	r0, 800db90 <_svfprintf_r+0x390>
 800db8a:	232d      	movs	r3, #45	; 0x2d
 800db8c:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800db90:	4b3d      	ldr	r3, [pc, #244]	; (800dc88 <_svfprintf_r+0x488>)
 800db92:	4a3e      	ldr	r2, [pc, #248]	; (800dc8c <_svfprintf_r+0x48c>)
 800db94:	9902      	ldr	r1, [sp, #8]
 800db96:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 800db9a:	2947      	cmp	r1, #71	; 0x47
 800db9c:	bfcc      	ite	gt
 800db9e:	4690      	movgt	r8, r2
 800dba0:	4698      	movle	r8, r3
 800dba2:	f04f 0903 	mov.w	r9, #3
 800dba6:	2600      	movs	r6, #0
 800dba8:	4637      	mov	r7, r6
 800dbaa:	e0c6      	b.n	800dd3a <_svfprintf_r+0x53a>
 800dbac:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 800dbb0:	d022      	beq.n	800dbf8 <_svfprintf_r+0x3f8>
 800dbb2:	9b02      	ldr	r3, [sp, #8]
 800dbb4:	f023 0320 	bic.w	r3, r3, #32
 800dbb8:	2b47      	cmp	r3, #71	; 0x47
 800dbba:	d104      	bne.n	800dbc6 <_svfprintf_r+0x3c6>
 800dbbc:	f1b9 0f00 	cmp.w	r9, #0
 800dbc0:	bf08      	it	eq
 800dbc2:	f04f 0901 	moveq.w	r9, #1
 800dbc6:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 800dbca:	930c      	str	r3, [sp, #48]	; 0x30
 800dbcc:	9b07      	ldr	r3, [sp, #28]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	da15      	bge.n	800dbfe <_svfprintf_r+0x3fe>
 800dbd2:	9b06      	ldr	r3, [sp, #24]
 800dbd4:	930e      	str	r3, [sp, #56]	; 0x38
 800dbd6:	9b07      	ldr	r3, [sp, #28]
 800dbd8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800dbdc:	930f      	str	r3, [sp, #60]	; 0x3c
 800dbde:	232d      	movs	r3, #45	; 0x2d
 800dbe0:	930b      	str	r3, [sp, #44]	; 0x2c
 800dbe2:	9b02      	ldr	r3, [sp, #8]
 800dbe4:	f023 0720 	bic.w	r7, r3, #32
 800dbe8:	2f46      	cmp	r7, #70	; 0x46
 800dbea:	d00e      	beq.n	800dc0a <_svfprintf_r+0x40a>
 800dbec:	2f45      	cmp	r7, #69	; 0x45
 800dbee:	d146      	bne.n	800dc7e <_svfprintf_r+0x47e>
 800dbf0:	f109 0601 	add.w	r6, r9, #1
 800dbf4:	2102      	movs	r1, #2
 800dbf6:	e00a      	b.n	800dc0e <_svfprintf_r+0x40e>
 800dbf8:	f04f 0906 	mov.w	r9, #6
 800dbfc:	e7e3      	b.n	800dbc6 <_svfprintf_r+0x3c6>
 800dbfe:	ed9d 7b06 	vldr	d7, [sp, #24]
 800dc02:	2300      	movs	r3, #0
 800dc04:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800dc08:	e7ea      	b.n	800dbe0 <_svfprintf_r+0x3e0>
 800dc0a:	464e      	mov	r6, r9
 800dc0c:	2103      	movs	r1, #3
 800dc0e:	ab1d      	add	r3, sp, #116	; 0x74
 800dc10:	9301      	str	r3, [sp, #4]
 800dc12:	ab1a      	add	r3, sp, #104	; 0x68
 800dc14:	9300      	str	r3, [sp, #0]
 800dc16:	4632      	mov	r2, r6
 800dc18:	ab19      	add	r3, sp, #100	; 0x64
 800dc1a:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 800dc1e:	4658      	mov	r0, fp
 800dc20:	f000 fe72 	bl	800e908 <_dtoa_r>
 800dc24:	2f47      	cmp	r7, #71	; 0x47
 800dc26:	4680      	mov	r8, r0
 800dc28:	d102      	bne.n	800dc30 <_svfprintf_r+0x430>
 800dc2a:	07e8      	lsls	r0, r5, #31
 800dc2c:	f140 857e 	bpl.w	800e72c <_svfprintf_r+0xf2c>
 800dc30:	eb08 0306 	add.w	r3, r8, r6
 800dc34:	2f46      	cmp	r7, #70	; 0x46
 800dc36:	9303      	str	r3, [sp, #12]
 800dc38:	d111      	bne.n	800dc5e <_svfprintf_r+0x45e>
 800dc3a:	f898 3000 	ldrb.w	r3, [r8]
 800dc3e:	2b30      	cmp	r3, #48	; 0x30
 800dc40:	d109      	bne.n	800dc56 <_svfprintf_r+0x456>
 800dc42:	2200      	movs	r2, #0
 800dc44:	2300      	movs	r3, #0
 800dc46:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800dc4a:	f7f2 ff49 	bl	8000ae0 <__aeabi_dcmpeq>
 800dc4e:	b910      	cbnz	r0, 800dc56 <_svfprintf_r+0x456>
 800dc50:	f1c6 0601 	rsb	r6, r6, #1
 800dc54:	9619      	str	r6, [sp, #100]	; 0x64
 800dc56:	9a03      	ldr	r2, [sp, #12]
 800dc58:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dc5a:	441a      	add	r2, r3
 800dc5c:	9203      	str	r2, [sp, #12]
 800dc5e:	2200      	movs	r2, #0
 800dc60:	2300      	movs	r3, #0
 800dc62:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800dc66:	f7f2 ff3b 	bl	8000ae0 <__aeabi_dcmpeq>
 800dc6a:	b988      	cbnz	r0, 800dc90 <_svfprintf_r+0x490>
 800dc6c:	2230      	movs	r2, #48	; 0x30
 800dc6e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dc70:	9903      	ldr	r1, [sp, #12]
 800dc72:	4299      	cmp	r1, r3
 800dc74:	d90e      	bls.n	800dc94 <_svfprintf_r+0x494>
 800dc76:	1c59      	adds	r1, r3, #1
 800dc78:	911d      	str	r1, [sp, #116]	; 0x74
 800dc7a:	701a      	strb	r2, [r3, #0]
 800dc7c:	e7f7      	b.n	800dc6e <_svfprintf_r+0x46e>
 800dc7e:	464e      	mov	r6, r9
 800dc80:	e7b8      	b.n	800dbf4 <_svfprintf_r+0x3f4>
 800dc82:	bf00      	nop
 800dc84:	7fefffff 	.word	0x7fefffff
 800dc88:	08012fd7 	.word	0x08012fd7
 800dc8c:	08012fdb 	.word	0x08012fdb
 800dc90:	9b03      	ldr	r3, [sp, #12]
 800dc92:	931d      	str	r3, [sp, #116]	; 0x74
 800dc94:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dc96:	2f47      	cmp	r7, #71	; 0x47
 800dc98:	eba3 0308 	sub.w	r3, r3, r8
 800dc9c:	9303      	str	r3, [sp, #12]
 800dc9e:	f040 80fa 	bne.w	800de96 <_svfprintf_r+0x696>
 800dca2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dca4:	1cd9      	adds	r1, r3, #3
 800dca6:	db02      	blt.n	800dcae <_svfprintf_r+0x4ae>
 800dca8:	4599      	cmp	r9, r3
 800dcaa:	f280 8120 	bge.w	800deee <_svfprintf_r+0x6ee>
 800dcae:	9b02      	ldr	r3, [sp, #8]
 800dcb0:	3b02      	subs	r3, #2
 800dcb2:	9302      	str	r3, [sp, #8]
 800dcb4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800dcb6:	f89d 1008 	ldrb.w	r1, [sp, #8]
 800dcba:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 800dcbe:	1e53      	subs	r3, r2, #1
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	9319      	str	r3, [sp, #100]	; 0x64
 800dcc4:	bfb6      	itet	lt
 800dcc6:	f1c2 0301 	rsblt	r3, r2, #1
 800dcca:	222b      	movge	r2, #43	; 0x2b
 800dccc:	222d      	movlt	r2, #45	; 0x2d
 800dcce:	2b09      	cmp	r3, #9
 800dcd0:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 800dcd4:	f340 80fb 	ble.w	800dece <_svfprintf_r+0x6ce>
 800dcd8:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 800dcdc:	260a      	movs	r6, #10
 800dcde:	fb93 f0f6 	sdiv	r0, r3, r6
 800dce2:	fb06 3310 	mls	r3, r6, r0, r3
 800dce6:	3330      	adds	r3, #48	; 0x30
 800dce8:	2809      	cmp	r0, #9
 800dcea:	f802 3c01 	strb.w	r3, [r2, #-1]
 800dcee:	f102 31ff 	add.w	r1, r2, #4294967295	; 0xffffffff
 800dcf2:	4603      	mov	r3, r0
 800dcf4:	f300 80e4 	bgt.w	800dec0 <_svfprintf_r+0x6c0>
 800dcf8:	3330      	adds	r3, #48	; 0x30
 800dcfa:	f801 3c01 	strb.w	r3, [r1, #-1]
 800dcfe:	3a02      	subs	r2, #2
 800dd00:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 800dd04:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 800dd08:	4282      	cmp	r2, r0
 800dd0a:	4619      	mov	r1, r3
 800dd0c:	f0c0 80da 	bcc.w	800dec4 <_svfprintf_r+0x6c4>
 800dd10:	9a03      	ldr	r2, [sp, #12]
 800dd12:	ab1b      	add	r3, sp, #108	; 0x6c
 800dd14:	1acb      	subs	r3, r1, r3
 800dd16:	2a01      	cmp	r2, #1
 800dd18:	9310      	str	r3, [sp, #64]	; 0x40
 800dd1a:	eb03 0902 	add.w	r9, r3, r2
 800dd1e:	dc02      	bgt.n	800dd26 <_svfprintf_r+0x526>
 800dd20:	f015 0701 	ands.w	r7, r5, #1
 800dd24:	d002      	beq.n	800dd2c <_svfprintf_r+0x52c>
 800dd26:	9b08      	ldr	r3, [sp, #32]
 800dd28:	2700      	movs	r7, #0
 800dd2a:	4499      	add	r9, r3
 800dd2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd2e:	b113      	cbz	r3, 800dd36 <_svfprintf_r+0x536>
 800dd30:	232d      	movs	r3, #45	; 0x2d
 800dd32:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800dd36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dd38:	2600      	movs	r6, #0
 800dd3a:	454e      	cmp	r6, r9
 800dd3c:	4633      	mov	r3, r6
 800dd3e:	bfb8      	it	lt
 800dd40:	464b      	movlt	r3, r9
 800dd42:	930b      	str	r3, [sp, #44]	; 0x2c
 800dd44:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 800dd48:	b113      	cbz	r3, 800dd50 <_svfprintf_r+0x550>
 800dd4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd4c:	3301      	adds	r3, #1
 800dd4e:	930b      	str	r3, [sp, #44]	; 0x2c
 800dd50:	f015 0302 	ands.w	r3, r5, #2
 800dd54:	9314      	str	r3, [sp, #80]	; 0x50
 800dd56:	bf1e      	ittt	ne
 800dd58:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 800dd5a:	3302      	addne	r3, #2
 800dd5c:	930b      	strne	r3, [sp, #44]	; 0x2c
 800dd5e:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 800dd62:	9315      	str	r3, [sp, #84]	; 0x54
 800dd64:	d118      	bne.n	800dd98 <_svfprintf_r+0x598>
 800dd66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dd6a:	1a9b      	subs	r3, r3, r2
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	930c      	str	r3, [sp, #48]	; 0x30
 800dd70:	dd12      	ble.n	800dd98 <_svfprintf_r+0x598>
 800dd72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dd74:	2b10      	cmp	r3, #16
 800dd76:	4ba9      	ldr	r3, [pc, #676]	; (800e01c <_svfprintf_r+0x81c>)
 800dd78:	6023      	str	r3, [r4, #0]
 800dd7a:	f300 81d5 	bgt.w	800e128 <_svfprintf_r+0x928>
 800dd7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dd80:	6063      	str	r3, [r4, #4]
 800dd82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dd84:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dd86:	4413      	add	r3, r2
 800dd88:	9321      	str	r3, [sp, #132]	; 0x84
 800dd8a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800dd8c:	3301      	adds	r3, #1
 800dd8e:	2b07      	cmp	r3, #7
 800dd90:	9320      	str	r3, [sp, #128]	; 0x80
 800dd92:	f300 81e2 	bgt.w	800e15a <_svfprintf_r+0x95a>
 800dd96:	3408      	adds	r4, #8
 800dd98:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 800dd9c:	b173      	cbz	r3, 800ddbc <_svfprintf_r+0x5bc>
 800dd9e:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 800dda2:	6023      	str	r3, [r4, #0]
 800dda4:	2301      	movs	r3, #1
 800dda6:	6063      	str	r3, [r4, #4]
 800dda8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ddaa:	3301      	adds	r3, #1
 800ddac:	9321      	str	r3, [sp, #132]	; 0x84
 800ddae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ddb0:	3301      	adds	r3, #1
 800ddb2:	2b07      	cmp	r3, #7
 800ddb4:	9320      	str	r3, [sp, #128]	; 0x80
 800ddb6:	f300 81da 	bgt.w	800e16e <_svfprintf_r+0x96e>
 800ddba:	3408      	adds	r4, #8
 800ddbc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ddbe:	b16b      	cbz	r3, 800dddc <_svfprintf_r+0x5dc>
 800ddc0:	ab18      	add	r3, sp, #96	; 0x60
 800ddc2:	6023      	str	r3, [r4, #0]
 800ddc4:	2302      	movs	r3, #2
 800ddc6:	6063      	str	r3, [r4, #4]
 800ddc8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ddca:	3302      	adds	r3, #2
 800ddcc:	9321      	str	r3, [sp, #132]	; 0x84
 800ddce:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ddd0:	3301      	adds	r3, #1
 800ddd2:	2b07      	cmp	r3, #7
 800ddd4:	9320      	str	r3, [sp, #128]	; 0x80
 800ddd6:	f300 81d4 	bgt.w	800e182 <_svfprintf_r+0x982>
 800ddda:	3408      	adds	r4, #8
 800dddc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ddde:	2b80      	cmp	r3, #128	; 0x80
 800dde0:	d114      	bne.n	800de0c <_svfprintf_r+0x60c>
 800dde2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dde4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dde6:	1a9b      	subs	r3, r3, r2
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	dd0f      	ble.n	800de0c <_svfprintf_r+0x60c>
 800ddec:	4a8c      	ldr	r2, [pc, #560]	; (800e020 <_svfprintf_r+0x820>)
 800ddee:	6022      	str	r2, [r4, #0]
 800ddf0:	2b10      	cmp	r3, #16
 800ddf2:	f300 81d0 	bgt.w	800e196 <_svfprintf_r+0x996>
 800ddf6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ddf8:	6063      	str	r3, [r4, #4]
 800ddfa:	4413      	add	r3, r2
 800ddfc:	9321      	str	r3, [sp, #132]	; 0x84
 800ddfe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800de00:	3301      	adds	r3, #1
 800de02:	2b07      	cmp	r3, #7
 800de04:	9320      	str	r3, [sp, #128]	; 0x80
 800de06:	f300 81df 	bgt.w	800e1c8 <_svfprintf_r+0x9c8>
 800de0a:	3408      	adds	r4, #8
 800de0c:	eba6 0609 	sub.w	r6, r6, r9
 800de10:	2e00      	cmp	r6, #0
 800de12:	dd0f      	ble.n	800de34 <_svfprintf_r+0x634>
 800de14:	4b82      	ldr	r3, [pc, #520]	; (800e020 <_svfprintf_r+0x820>)
 800de16:	6023      	str	r3, [r4, #0]
 800de18:	2e10      	cmp	r6, #16
 800de1a:	f300 81df 	bgt.w	800e1dc <_svfprintf_r+0x9dc>
 800de1e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800de20:	9821      	ldr	r0, [sp, #132]	; 0x84
 800de22:	6066      	str	r6, [r4, #4]
 800de24:	3301      	adds	r3, #1
 800de26:	4406      	add	r6, r0
 800de28:	2b07      	cmp	r3, #7
 800de2a:	9621      	str	r6, [sp, #132]	; 0x84
 800de2c:	9320      	str	r3, [sp, #128]	; 0x80
 800de2e:	f300 81ec 	bgt.w	800e20a <_svfprintf_r+0xa0a>
 800de32:	3408      	adds	r4, #8
 800de34:	05eb      	lsls	r3, r5, #23
 800de36:	f100 81f2 	bmi.w	800e21e <_svfprintf_r+0xa1e>
 800de3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800de3c:	e884 0300 	stmia.w	r4, {r8, r9}
 800de40:	444b      	add	r3, r9
 800de42:	9321      	str	r3, [sp, #132]	; 0x84
 800de44:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800de46:	3301      	adds	r3, #1
 800de48:	2b07      	cmp	r3, #7
 800de4a:	9320      	str	r3, [sp, #128]	; 0x80
 800de4c:	f340 8419 	ble.w	800e682 <_svfprintf_r+0xe82>
 800de50:	aa1f      	add	r2, sp, #124	; 0x7c
 800de52:	4651      	mov	r1, sl
 800de54:	4658      	mov	r0, fp
 800de56:	f001 ff1f 	bl	800fc98 <__ssprint_r>
 800de5a:	2800      	cmp	r0, #0
 800de5c:	f040 8431 	bne.w	800e6c2 <_svfprintf_r+0xec2>
 800de60:	ac2c      	add	r4, sp, #176	; 0xb0
 800de62:	076b      	lsls	r3, r5, #29
 800de64:	f100 8410 	bmi.w	800e688 <_svfprintf_r+0xe88>
 800de68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800de6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800de6e:	428a      	cmp	r2, r1
 800de70:	bfac      	ite	ge
 800de72:	189b      	addge	r3, r3, r2
 800de74:	185b      	addlt	r3, r3, r1
 800de76:	9309      	str	r3, [sp, #36]	; 0x24
 800de78:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800de7a:	b13b      	cbz	r3, 800de8c <_svfprintf_r+0x68c>
 800de7c:	aa1f      	add	r2, sp, #124	; 0x7c
 800de7e:	4651      	mov	r1, sl
 800de80:	4658      	mov	r0, fp
 800de82:	f001 ff09 	bl	800fc98 <__ssprint_r>
 800de86:	2800      	cmp	r0, #0
 800de88:	f040 841b 	bne.w	800e6c2 <_svfprintf_r+0xec2>
 800de8c:	2300      	movs	r3, #0
 800de8e:	9320      	str	r3, [sp, #128]	; 0x80
 800de90:	9f04      	ldr	r7, [sp, #16]
 800de92:	ac2c      	add	r4, sp, #176	; 0xb0
 800de94:	e4ee      	b.n	800d874 <_svfprintf_r+0x74>
 800de96:	9b02      	ldr	r3, [sp, #8]
 800de98:	2b65      	cmp	r3, #101	; 0x65
 800de9a:	f77f af0b 	ble.w	800dcb4 <_svfprintf_r+0x4b4>
 800de9e:	9b02      	ldr	r3, [sp, #8]
 800dea0:	2b66      	cmp	r3, #102	; 0x66
 800dea2:	d124      	bne.n	800deee <_svfprintf_r+0x6ee>
 800dea4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	dd19      	ble.n	800dede <_svfprintf_r+0x6de>
 800deaa:	f1b9 0f00 	cmp.w	r9, #0
 800deae:	d101      	bne.n	800deb4 <_svfprintf_r+0x6b4>
 800deb0:	07ea      	lsls	r2, r5, #31
 800deb2:	d502      	bpl.n	800deba <_svfprintf_r+0x6ba>
 800deb4:	9a08      	ldr	r2, [sp, #32]
 800deb6:	4413      	add	r3, r2
 800deb8:	444b      	add	r3, r9
 800deba:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800debc:	4699      	mov	r9, r3
 800debe:	e735      	b.n	800dd2c <_svfprintf_r+0x52c>
 800dec0:	460a      	mov	r2, r1
 800dec2:	e70c      	b.n	800dcde <_svfprintf_r+0x4de>
 800dec4:	f812 1b01 	ldrb.w	r1, [r2], #1
 800dec8:	f803 1b01 	strb.w	r1, [r3], #1
 800decc:	e71c      	b.n	800dd08 <_svfprintf_r+0x508>
 800dece:	2230      	movs	r2, #48	; 0x30
 800ded0:	4413      	add	r3, r2
 800ded2:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 800ded6:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800deda:	a91c      	add	r1, sp, #112	; 0x70
 800dedc:	e718      	b.n	800dd10 <_svfprintf_r+0x510>
 800dede:	f1b9 0f00 	cmp.w	r9, #0
 800dee2:	d101      	bne.n	800dee8 <_svfprintf_r+0x6e8>
 800dee4:	07eb      	lsls	r3, r5, #31
 800dee6:	d515      	bpl.n	800df14 <_svfprintf_r+0x714>
 800dee8:	9b08      	ldr	r3, [sp, #32]
 800deea:	3301      	adds	r3, #1
 800deec:	e7e4      	b.n	800deb8 <_svfprintf_r+0x6b8>
 800deee:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800def0:	9b03      	ldr	r3, [sp, #12]
 800def2:	429a      	cmp	r2, r3
 800def4:	db06      	blt.n	800df04 <_svfprintf_r+0x704>
 800def6:	07ef      	lsls	r7, r5, #31
 800def8:	d50e      	bpl.n	800df18 <_svfprintf_r+0x718>
 800defa:	9b08      	ldr	r3, [sp, #32]
 800defc:	4413      	add	r3, r2
 800defe:	2267      	movs	r2, #103	; 0x67
 800df00:	9202      	str	r2, [sp, #8]
 800df02:	e7da      	b.n	800deba <_svfprintf_r+0x6ba>
 800df04:	9b03      	ldr	r3, [sp, #12]
 800df06:	9908      	ldr	r1, [sp, #32]
 800df08:	2a00      	cmp	r2, #0
 800df0a:	440b      	add	r3, r1
 800df0c:	dcf7      	bgt.n	800defe <_svfprintf_r+0x6fe>
 800df0e:	f1c2 0201 	rsb	r2, r2, #1
 800df12:	e7f3      	b.n	800defc <_svfprintf_r+0x6fc>
 800df14:	2301      	movs	r3, #1
 800df16:	e7d0      	b.n	800deba <_svfprintf_r+0x6ba>
 800df18:	4613      	mov	r3, r2
 800df1a:	e7f0      	b.n	800defe <_svfprintf_r+0x6fe>
 800df1c:	b10b      	cbz	r3, 800df22 <_svfprintf_r+0x722>
 800df1e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800df22:	f015 0f20 	tst.w	r5, #32
 800df26:	f107 0304 	add.w	r3, r7, #4
 800df2a:	d008      	beq.n	800df3e <_svfprintf_r+0x73e>
 800df2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800df2e:	683a      	ldr	r2, [r7, #0]
 800df30:	17ce      	asrs	r6, r1, #31
 800df32:	4608      	mov	r0, r1
 800df34:	4631      	mov	r1, r6
 800df36:	e9c2 0100 	strd	r0, r1, [r2]
 800df3a:	461f      	mov	r7, r3
 800df3c:	e49a      	b.n	800d874 <_svfprintf_r+0x74>
 800df3e:	06ee      	lsls	r6, r5, #27
 800df40:	d503      	bpl.n	800df4a <_svfprintf_r+0x74a>
 800df42:	683a      	ldr	r2, [r7, #0]
 800df44:	9909      	ldr	r1, [sp, #36]	; 0x24
 800df46:	6011      	str	r1, [r2, #0]
 800df48:	e7f7      	b.n	800df3a <_svfprintf_r+0x73a>
 800df4a:	0668      	lsls	r0, r5, #25
 800df4c:	d5f9      	bpl.n	800df42 <_svfprintf_r+0x742>
 800df4e:	683a      	ldr	r2, [r7, #0]
 800df50:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 800df54:	8011      	strh	r1, [r2, #0]
 800df56:	e7f0      	b.n	800df3a <_svfprintf_r+0x73a>
 800df58:	f045 0510 	orr.w	r5, r5, #16
 800df5c:	f015 0320 	ands.w	r3, r5, #32
 800df60:	d022      	beq.n	800dfa8 <_svfprintf_r+0x7a8>
 800df62:	3707      	adds	r7, #7
 800df64:	f027 0707 	bic.w	r7, r7, #7
 800df68:	f107 0308 	add.w	r3, r7, #8
 800df6c:	e9d7 6700 	ldrd	r6, r7, [r7]
 800df70:	9304      	str	r3, [sp, #16]
 800df72:	2300      	movs	r3, #0
 800df74:	2200      	movs	r2, #0
 800df76:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800df7a:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 800df7e:	f000 83db 	beq.w	800e738 <_svfprintf_r+0xf38>
 800df82:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 800df86:	920b      	str	r2, [sp, #44]	; 0x2c
 800df88:	ea56 0207 	orrs.w	r2, r6, r7
 800df8c:	f040 83d9 	bne.w	800e742 <_svfprintf_r+0xf42>
 800df90:	f1b9 0f00 	cmp.w	r9, #0
 800df94:	f000 80aa 	beq.w	800e0ec <_svfprintf_r+0x8ec>
 800df98:	2b01      	cmp	r3, #1
 800df9a:	d076      	beq.n	800e08a <_svfprintf_r+0x88a>
 800df9c:	2b02      	cmp	r3, #2
 800df9e:	f000 8091 	beq.w	800e0c4 <_svfprintf_r+0x8c4>
 800dfa2:	2600      	movs	r6, #0
 800dfa4:	2700      	movs	r7, #0
 800dfa6:	e3d2      	b.n	800e74e <_svfprintf_r+0xf4e>
 800dfa8:	1d3a      	adds	r2, r7, #4
 800dfaa:	f015 0110 	ands.w	r1, r5, #16
 800dfae:	9204      	str	r2, [sp, #16]
 800dfb0:	d002      	beq.n	800dfb8 <_svfprintf_r+0x7b8>
 800dfb2:	683e      	ldr	r6, [r7, #0]
 800dfb4:	2700      	movs	r7, #0
 800dfb6:	e7dd      	b.n	800df74 <_svfprintf_r+0x774>
 800dfb8:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 800dfbc:	d0f9      	beq.n	800dfb2 <_svfprintf_r+0x7b2>
 800dfbe:	883e      	ldrh	r6, [r7, #0]
 800dfc0:	2700      	movs	r7, #0
 800dfc2:	e7d6      	b.n	800df72 <_svfprintf_r+0x772>
 800dfc4:	1d3b      	adds	r3, r7, #4
 800dfc6:	9304      	str	r3, [sp, #16]
 800dfc8:	2330      	movs	r3, #48	; 0x30
 800dfca:	2278      	movs	r2, #120	; 0x78
 800dfcc:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800dfd0:	4b14      	ldr	r3, [pc, #80]	; (800e024 <_svfprintf_r+0x824>)
 800dfd2:	683e      	ldr	r6, [r7, #0]
 800dfd4:	9311      	str	r3, [sp, #68]	; 0x44
 800dfd6:	2700      	movs	r7, #0
 800dfd8:	f045 0502 	orr.w	r5, r5, #2
 800dfdc:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 800dfe0:	2302      	movs	r3, #2
 800dfe2:	9202      	str	r2, [sp, #8]
 800dfe4:	e7c6      	b.n	800df74 <_svfprintf_r+0x774>
 800dfe6:	1d3b      	adds	r3, r7, #4
 800dfe8:	2600      	movs	r6, #0
 800dfea:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 800dfee:	9304      	str	r3, [sp, #16]
 800dff0:	f8d7 8000 	ldr.w	r8, [r7]
 800dff4:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 800dff8:	d00a      	beq.n	800e010 <_svfprintf_r+0x810>
 800dffa:	464a      	mov	r2, r9
 800dffc:	4631      	mov	r1, r6
 800dffe:	4640      	mov	r0, r8
 800e000:	f7f2 f8fe 	bl	8000200 <memchr>
 800e004:	2800      	cmp	r0, #0
 800e006:	f000 808d 	beq.w	800e124 <_svfprintf_r+0x924>
 800e00a:	eba0 0908 	sub.w	r9, r0, r8
 800e00e:	e5cb      	b.n	800dba8 <_svfprintf_r+0x3a8>
 800e010:	4640      	mov	r0, r8
 800e012:	f7f2 f8e7 	bl	80001e4 <strlen>
 800e016:	4681      	mov	r9, r0
 800e018:	e5c6      	b.n	800dba8 <_svfprintf_r+0x3a8>
 800e01a:	bf00      	nop
 800e01c:	08013009 	.word	0x08013009
 800e020:	08013019 	.word	0x08013019
 800e024:	08012ff8 	.word	0x08012ff8
 800e028:	f045 0510 	orr.w	r5, r5, #16
 800e02c:	06a9      	lsls	r1, r5, #26
 800e02e:	d509      	bpl.n	800e044 <_svfprintf_r+0x844>
 800e030:	3707      	adds	r7, #7
 800e032:	f027 0707 	bic.w	r7, r7, #7
 800e036:	f107 0308 	add.w	r3, r7, #8
 800e03a:	e9d7 6700 	ldrd	r6, r7, [r7]
 800e03e:	9304      	str	r3, [sp, #16]
 800e040:	2301      	movs	r3, #1
 800e042:	e797      	b.n	800df74 <_svfprintf_r+0x774>
 800e044:	1d3b      	adds	r3, r7, #4
 800e046:	f015 0f10 	tst.w	r5, #16
 800e04a:	9304      	str	r3, [sp, #16]
 800e04c:	d001      	beq.n	800e052 <_svfprintf_r+0x852>
 800e04e:	683e      	ldr	r6, [r7, #0]
 800e050:	e002      	b.n	800e058 <_svfprintf_r+0x858>
 800e052:	066a      	lsls	r2, r5, #25
 800e054:	d5fb      	bpl.n	800e04e <_svfprintf_r+0x84e>
 800e056:	883e      	ldrh	r6, [r7, #0]
 800e058:	2700      	movs	r7, #0
 800e05a:	e7f1      	b.n	800e040 <_svfprintf_r+0x840>
 800e05c:	b10b      	cbz	r3, 800e062 <_svfprintf_r+0x862>
 800e05e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800e062:	4ba3      	ldr	r3, [pc, #652]	; (800e2f0 <_svfprintf_r+0xaf0>)
 800e064:	e4c2      	b.n	800d9ec <_svfprintf_r+0x1ec>
 800e066:	1d3b      	adds	r3, r7, #4
 800e068:	f015 0f10 	tst.w	r5, #16
 800e06c:	9304      	str	r3, [sp, #16]
 800e06e:	d001      	beq.n	800e074 <_svfprintf_r+0x874>
 800e070:	683e      	ldr	r6, [r7, #0]
 800e072:	e002      	b.n	800e07a <_svfprintf_r+0x87a>
 800e074:	066e      	lsls	r6, r5, #25
 800e076:	d5fb      	bpl.n	800e070 <_svfprintf_r+0x870>
 800e078:	883e      	ldrh	r6, [r7, #0]
 800e07a:	2700      	movs	r7, #0
 800e07c:	e4c2      	b.n	800da04 <_svfprintf_r+0x204>
 800e07e:	4643      	mov	r3, r8
 800e080:	e366      	b.n	800e750 <_svfprintf_r+0xf50>
 800e082:	2f00      	cmp	r7, #0
 800e084:	bf08      	it	eq
 800e086:	2e0a      	cmpeq	r6, #10
 800e088:	d205      	bcs.n	800e096 <_svfprintf_r+0x896>
 800e08a:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 800e08e:	3630      	adds	r6, #48	; 0x30
 800e090:	f808 6d41 	strb.w	r6, [r8, #-65]!
 800e094:	e377      	b.n	800e786 <_svfprintf_r+0xf86>
 800e096:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800e09a:	4630      	mov	r0, r6
 800e09c:	4639      	mov	r1, r7
 800e09e:	220a      	movs	r2, #10
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	f7f2 fd8d 	bl	8000bc0 <__aeabi_uldivmod>
 800e0a6:	3230      	adds	r2, #48	; 0x30
 800e0a8:	f808 2d01 	strb.w	r2, [r8, #-1]!
 800e0ac:	2300      	movs	r3, #0
 800e0ae:	4630      	mov	r0, r6
 800e0b0:	4639      	mov	r1, r7
 800e0b2:	220a      	movs	r2, #10
 800e0b4:	f7f2 fd84 	bl	8000bc0 <__aeabi_uldivmod>
 800e0b8:	4606      	mov	r6, r0
 800e0ba:	460f      	mov	r7, r1
 800e0bc:	ea56 0307 	orrs.w	r3, r6, r7
 800e0c0:	d1eb      	bne.n	800e09a <_svfprintf_r+0x89a>
 800e0c2:	e360      	b.n	800e786 <_svfprintf_r+0xf86>
 800e0c4:	2600      	movs	r6, #0
 800e0c6:	2700      	movs	r7, #0
 800e0c8:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800e0cc:	f006 030f 	and.w	r3, r6, #15
 800e0d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e0d2:	5cd3      	ldrb	r3, [r2, r3]
 800e0d4:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800e0d8:	0933      	lsrs	r3, r6, #4
 800e0da:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 800e0de:	093a      	lsrs	r2, r7, #4
 800e0e0:	461e      	mov	r6, r3
 800e0e2:	4617      	mov	r7, r2
 800e0e4:	ea56 0307 	orrs.w	r3, r6, r7
 800e0e8:	d1f0      	bne.n	800e0cc <_svfprintf_r+0x8cc>
 800e0ea:	e34c      	b.n	800e786 <_svfprintf_r+0xf86>
 800e0ec:	b93b      	cbnz	r3, 800e0fe <_svfprintf_r+0x8fe>
 800e0ee:	07ea      	lsls	r2, r5, #31
 800e0f0:	d505      	bpl.n	800e0fe <_svfprintf_r+0x8fe>
 800e0f2:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 800e0f6:	2330      	movs	r3, #48	; 0x30
 800e0f8:	f808 3d41 	strb.w	r3, [r8, #-65]!
 800e0fc:	e343      	b.n	800e786 <_svfprintf_r+0xf86>
 800e0fe:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800e102:	e340      	b.n	800e786 <_svfprintf_r+0xf86>
 800e104:	b10b      	cbz	r3, 800e10a <_svfprintf_r+0x90a>
 800e106:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800e10a:	9b02      	ldr	r3, [sp, #8]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	f000 82f7 	beq.w	800e700 <_svfprintf_r+0xf00>
 800e112:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800e116:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 800e11a:	2600      	movs	r6, #0
 800e11c:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 800e120:	9704      	str	r7, [sp, #16]
 800e122:	e4e8      	b.n	800daf6 <_svfprintf_r+0x2f6>
 800e124:	4606      	mov	r6, r0
 800e126:	e53f      	b.n	800dba8 <_svfprintf_r+0x3a8>
 800e128:	2310      	movs	r3, #16
 800e12a:	6063      	str	r3, [r4, #4]
 800e12c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e12e:	3310      	adds	r3, #16
 800e130:	9321      	str	r3, [sp, #132]	; 0x84
 800e132:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e134:	3301      	adds	r3, #1
 800e136:	2b07      	cmp	r3, #7
 800e138:	9320      	str	r3, [sp, #128]	; 0x80
 800e13a:	dc04      	bgt.n	800e146 <_svfprintf_r+0x946>
 800e13c:	3408      	adds	r4, #8
 800e13e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e140:	3b10      	subs	r3, #16
 800e142:	930c      	str	r3, [sp, #48]	; 0x30
 800e144:	e615      	b.n	800dd72 <_svfprintf_r+0x572>
 800e146:	aa1f      	add	r2, sp, #124	; 0x7c
 800e148:	4651      	mov	r1, sl
 800e14a:	4658      	mov	r0, fp
 800e14c:	f001 fda4 	bl	800fc98 <__ssprint_r>
 800e150:	2800      	cmp	r0, #0
 800e152:	f040 82b6 	bne.w	800e6c2 <_svfprintf_r+0xec2>
 800e156:	ac2c      	add	r4, sp, #176	; 0xb0
 800e158:	e7f1      	b.n	800e13e <_svfprintf_r+0x93e>
 800e15a:	aa1f      	add	r2, sp, #124	; 0x7c
 800e15c:	4651      	mov	r1, sl
 800e15e:	4658      	mov	r0, fp
 800e160:	f001 fd9a 	bl	800fc98 <__ssprint_r>
 800e164:	2800      	cmp	r0, #0
 800e166:	f040 82ac 	bne.w	800e6c2 <_svfprintf_r+0xec2>
 800e16a:	ac2c      	add	r4, sp, #176	; 0xb0
 800e16c:	e614      	b.n	800dd98 <_svfprintf_r+0x598>
 800e16e:	aa1f      	add	r2, sp, #124	; 0x7c
 800e170:	4651      	mov	r1, sl
 800e172:	4658      	mov	r0, fp
 800e174:	f001 fd90 	bl	800fc98 <__ssprint_r>
 800e178:	2800      	cmp	r0, #0
 800e17a:	f040 82a2 	bne.w	800e6c2 <_svfprintf_r+0xec2>
 800e17e:	ac2c      	add	r4, sp, #176	; 0xb0
 800e180:	e61c      	b.n	800ddbc <_svfprintf_r+0x5bc>
 800e182:	aa1f      	add	r2, sp, #124	; 0x7c
 800e184:	4651      	mov	r1, sl
 800e186:	4658      	mov	r0, fp
 800e188:	f001 fd86 	bl	800fc98 <__ssprint_r>
 800e18c:	2800      	cmp	r0, #0
 800e18e:	f040 8298 	bne.w	800e6c2 <_svfprintf_r+0xec2>
 800e192:	ac2c      	add	r4, sp, #176	; 0xb0
 800e194:	e622      	b.n	800dddc <_svfprintf_r+0x5dc>
 800e196:	2210      	movs	r2, #16
 800e198:	6062      	str	r2, [r4, #4]
 800e19a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e19c:	3210      	adds	r2, #16
 800e19e:	9221      	str	r2, [sp, #132]	; 0x84
 800e1a0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e1a2:	3201      	adds	r2, #1
 800e1a4:	2a07      	cmp	r2, #7
 800e1a6:	9220      	str	r2, [sp, #128]	; 0x80
 800e1a8:	dc02      	bgt.n	800e1b0 <_svfprintf_r+0x9b0>
 800e1aa:	3408      	adds	r4, #8
 800e1ac:	3b10      	subs	r3, #16
 800e1ae:	e61d      	b.n	800ddec <_svfprintf_r+0x5ec>
 800e1b0:	aa1f      	add	r2, sp, #124	; 0x7c
 800e1b2:	4651      	mov	r1, sl
 800e1b4:	4658      	mov	r0, fp
 800e1b6:	930c      	str	r3, [sp, #48]	; 0x30
 800e1b8:	f001 fd6e 	bl	800fc98 <__ssprint_r>
 800e1bc:	2800      	cmp	r0, #0
 800e1be:	f040 8280 	bne.w	800e6c2 <_svfprintf_r+0xec2>
 800e1c2:	ac2c      	add	r4, sp, #176	; 0xb0
 800e1c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e1c6:	e7f1      	b.n	800e1ac <_svfprintf_r+0x9ac>
 800e1c8:	aa1f      	add	r2, sp, #124	; 0x7c
 800e1ca:	4651      	mov	r1, sl
 800e1cc:	4658      	mov	r0, fp
 800e1ce:	f001 fd63 	bl	800fc98 <__ssprint_r>
 800e1d2:	2800      	cmp	r0, #0
 800e1d4:	f040 8275 	bne.w	800e6c2 <_svfprintf_r+0xec2>
 800e1d8:	ac2c      	add	r4, sp, #176	; 0xb0
 800e1da:	e617      	b.n	800de0c <_svfprintf_r+0x60c>
 800e1dc:	2310      	movs	r3, #16
 800e1de:	6063      	str	r3, [r4, #4]
 800e1e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e1e2:	3310      	adds	r3, #16
 800e1e4:	9321      	str	r3, [sp, #132]	; 0x84
 800e1e6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e1e8:	3301      	adds	r3, #1
 800e1ea:	2b07      	cmp	r3, #7
 800e1ec:	9320      	str	r3, [sp, #128]	; 0x80
 800e1ee:	dc02      	bgt.n	800e1f6 <_svfprintf_r+0x9f6>
 800e1f0:	3408      	adds	r4, #8
 800e1f2:	3e10      	subs	r6, #16
 800e1f4:	e60e      	b.n	800de14 <_svfprintf_r+0x614>
 800e1f6:	aa1f      	add	r2, sp, #124	; 0x7c
 800e1f8:	4651      	mov	r1, sl
 800e1fa:	4658      	mov	r0, fp
 800e1fc:	f001 fd4c 	bl	800fc98 <__ssprint_r>
 800e200:	2800      	cmp	r0, #0
 800e202:	f040 825e 	bne.w	800e6c2 <_svfprintf_r+0xec2>
 800e206:	ac2c      	add	r4, sp, #176	; 0xb0
 800e208:	e7f3      	b.n	800e1f2 <_svfprintf_r+0x9f2>
 800e20a:	aa1f      	add	r2, sp, #124	; 0x7c
 800e20c:	4651      	mov	r1, sl
 800e20e:	4658      	mov	r0, fp
 800e210:	f001 fd42 	bl	800fc98 <__ssprint_r>
 800e214:	2800      	cmp	r0, #0
 800e216:	f040 8254 	bne.w	800e6c2 <_svfprintf_r+0xec2>
 800e21a:	ac2c      	add	r4, sp, #176	; 0xb0
 800e21c:	e60a      	b.n	800de34 <_svfprintf_r+0x634>
 800e21e:	9b02      	ldr	r3, [sp, #8]
 800e220:	2b65      	cmp	r3, #101	; 0x65
 800e222:	f340 81a9 	ble.w	800e578 <_svfprintf_r+0xd78>
 800e226:	2200      	movs	r2, #0
 800e228:	2300      	movs	r3, #0
 800e22a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e22e:	f7f2 fc57 	bl	8000ae0 <__aeabi_dcmpeq>
 800e232:	2800      	cmp	r0, #0
 800e234:	d062      	beq.n	800e2fc <_svfprintf_r+0xafc>
 800e236:	4b2f      	ldr	r3, [pc, #188]	; (800e2f4 <_svfprintf_r+0xaf4>)
 800e238:	6023      	str	r3, [r4, #0]
 800e23a:	2301      	movs	r3, #1
 800e23c:	6063      	str	r3, [r4, #4]
 800e23e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e240:	3301      	adds	r3, #1
 800e242:	9321      	str	r3, [sp, #132]	; 0x84
 800e244:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e246:	3301      	adds	r3, #1
 800e248:	2b07      	cmp	r3, #7
 800e24a:	9320      	str	r3, [sp, #128]	; 0x80
 800e24c:	dc25      	bgt.n	800e29a <_svfprintf_r+0xa9a>
 800e24e:	3408      	adds	r4, #8
 800e250:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e252:	9a03      	ldr	r2, [sp, #12]
 800e254:	4293      	cmp	r3, r2
 800e256:	db02      	blt.n	800e25e <_svfprintf_r+0xa5e>
 800e258:	07ee      	lsls	r6, r5, #31
 800e25a:	f57f ae02 	bpl.w	800de62 <_svfprintf_r+0x662>
 800e25e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e260:	6023      	str	r3, [r4, #0]
 800e262:	9b08      	ldr	r3, [sp, #32]
 800e264:	6063      	str	r3, [r4, #4]
 800e266:	9a08      	ldr	r2, [sp, #32]
 800e268:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e26a:	4413      	add	r3, r2
 800e26c:	9321      	str	r3, [sp, #132]	; 0x84
 800e26e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e270:	3301      	adds	r3, #1
 800e272:	2b07      	cmp	r3, #7
 800e274:	9320      	str	r3, [sp, #128]	; 0x80
 800e276:	dc1a      	bgt.n	800e2ae <_svfprintf_r+0xaae>
 800e278:	3408      	adds	r4, #8
 800e27a:	9b03      	ldr	r3, [sp, #12]
 800e27c:	1e5e      	subs	r6, r3, #1
 800e27e:	2e00      	cmp	r6, #0
 800e280:	f77f adef 	ble.w	800de62 <_svfprintf_r+0x662>
 800e284:	4f1c      	ldr	r7, [pc, #112]	; (800e2f8 <_svfprintf_r+0xaf8>)
 800e286:	f04f 0810 	mov.w	r8, #16
 800e28a:	2e10      	cmp	r6, #16
 800e28c:	6027      	str	r7, [r4, #0]
 800e28e:	dc18      	bgt.n	800e2c2 <_svfprintf_r+0xac2>
 800e290:	6066      	str	r6, [r4, #4]
 800e292:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e294:	441e      	add	r6, r3
 800e296:	9621      	str	r6, [sp, #132]	; 0x84
 800e298:	e5d4      	b.n	800de44 <_svfprintf_r+0x644>
 800e29a:	aa1f      	add	r2, sp, #124	; 0x7c
 800e29c:	4651      	mov	r1, sl
 800e29e:	4658      	mov	r0, fp
 800e2a0:	f001 fcfa 	bl	800fc98 <__ssprint_r>
 800e2a4:	2800      	cmp	r0, #0
 800e2a6:	f040 820c 	bne.w	800e6c2 <_svfprintf_r+0xec2>
 800e2aa:	ac2c      	add	r4, sp, #176	; 0xb0
 800e2ac:	e7d0      	b.n	800e250 <_svfprintf_r+0xa50>
 800e2ae:	aa1f      	add	r2, sp, #124	; 0x7c
 800e2b0:	4651      	mov	r1, sl
 800e2b2:	4658      	mov	r0, fp
 800e2b4:	f001 fcf0 	bl	800fc98 <__ssprint_r>
 800e2b8:	2800      	cmp	r0, #0
 800e2ba:	f040 8202 	bne.w	800e6c2 <_svfprintf_r+0xec2>
 800e2be:	ac2c      	add	r4, sp, #176	; 0xb0
 800e2c0:	e7db      	b.n	800e27a <_svfprintf_r+0xa7a>
 800e2c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e2c4:	f8c4 8004 	str.w	r8, [r4, #4]
 800e2c8:	3310      	adds	r3, #16
 800e2ca:	9321      	str	r3, [sp, #132]	; 0x84
 800e2cc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e2ce:	3301      	adds	r3, #1
 800e2d0:	2b07      	cmp	r3, #7
 800e2d2:	9320      	str	r3, [sp, #128]	; 0x80
 800e2d4:	dc02      	bgt.n	800e2dc <_svfprintf_r+0xadc>
 800e2d6:	3408      	adds	r4, #8
 800e2d8:	3e10      	subs	r6, #16
 800e2da:	e7d6      	b.n	800e28a <_svfprintf_r+0xa8a>
 800e2dc:	aa1f      	add	r2, sp, #124	; 0x7c
 800e2de:	4651      	mov	r1, sl
 800e2e0:	4658      	mov	r0, fp
 800e2e2:	f001 fcd9 	bl	800fc98 <__ssprint_r>
 800e2e6:	2800      	cmp	r0, #0
 800e2e8:	f040 81eb 	bne.w	800e6c2 <_svfprintf_r+0xec2>
 800e2ec:	ac2c      	add	r4, sp, #176	; 0xb0
 800e2ee:	e7f3      	b.n	800e2d8 <_svfprintf_r+0xad8>
 800e2f0:	08012ff8 	.word	0x08012ff8
 800e2f4:	080109cd 	.word	0x080109cd
 800e2f8:	08013019 	.word	0x08013019
 800e2fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	dc7a      	bgt.n	800e3f8 <_svfprintf_r+0xbf8>
 800e302:	4b9b      	ldr	r3, [pc, #620]	; (800e570 <_svfprintf_r+0xd70>)
 800e304:	6023      	str	r3, [r4, #0]
 800e306:	2301      	movs	r3, #1
 800e308:	6063      	str	r3, [r4, #4]
 800e30a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e30c:	3301      	adds	r3, #1
 800e30e:	9321      	str	r3, [sp, #132]	; 0x84
 800e310:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e312:	3301      	adds	r3, #1
 800e314:	2b07      	cmp	r3, #7
 800e316:	9320      	str	r3, [sp, #128]	; 0x80
 800e318:	dc44      	bgt.n	800e3a4 <_svfprintf_r+0xba4>
 800e31a:	3408      	adds	r4, #8
 800e31c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e31e:	b923      	cbnz	r3, 800e32a <_svfprintf_r+0xb2a>
 800e320:	9b03      	ldr	r3, [sp, #12]
 800e322:	b913      	cbnz	r3, 800e32a <_svfprintf_r+0xb2a>
 800e324:	07e8      	lsls	r0, r5, #31
 800e326:	f57f ad9c 	bpl.w	800de62 <_svfprintf_r+0x662>
 800e32a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e32c:	6023      	str	r3, [r4, #0]
 800e32e:	9b08      	ldr	r3, [sp, #32]
 800e330:	6063      	str	r3, [r4, #4]
 800e332:	9a08      	ldr	r2, [sp, #32]
 800e334:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e336:	4413      	add	r3, r2
 800e338:	9321      	str	r3, [sp, #132]	; 0x84
 800e33a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e33c:	3301      	adds	r3, #1
 800e33e:	2b07      	cmp	r3, #7
 800e340:	9320      	str	r3, [sp, #128]	; 0x80
 800e342:	dc39      	bgt.n	800e3b8 <_svfprintf_r+0xbb8>
 800e344:	f104 0308 	add.w	r3, r4, #8
 800e348:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800e34a:	2e00      	cmp	r6, #0
 800e34c:	da19      	bge.n	800e382 <_svfprintf_r+0xb82>
 800e34e:	4f89      	ldr	r7, [pc, #548]	; (800e574 <_svfprintf_r+0xd74>)
 800e350:	4276      	negs	r6, r6
 800e352:	2410      	movs	r4, #16
 800e354:	2e10      	cmp	r6, #16
 800e356:	601f      	str	r7, [r3, #0]
 800e358:	dc38      	bgt.n	800e3cc <_svfprintf_r+0xbcc>
 800e35a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e35c:	605e      	str	r6, [r3, #4]
 800e35e:	4416      	add	r6, r2
 800e360:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e362:	9621      	str	r6, [sp, #132]	; 0x84
 800e364:	3201      	adds	r2, #1
 800e366:	2a07      	cmp	r2, #7
 800e368:	f103 0308 	add.w	r3, r3, #8
 800e36c:	9220      	str	r2, [sp, #128]	; 0x80
 800e36e:	dd08      	ble.n	800e382 <_svfprintf_r+0xb82>
 800e370:	aa1f      	add	r2, sp, #124	; 0x7c
 800e372:	4651      	mov	r1, sl
 800e374:	4658      	mov	r0, fp
 800e376:	f001 fc8f 	bl	800fc98 <__ssprint_r>
 800e37a:	2800      	cmp	r0, #0
 800e37c:	f040 81a1 	bne.w	800e6c2 <_svfprintf_r+0xec2>
 800e380:	ab2c      	add	r3, sp, #176	; 0xb0
 800e382:	9a03      	ldr	r2, [sp, #12]
 800e384:	605a      	str	r2, [r3, #4]
 800e386:	9903      	ldr	r1, [sp, #12]
 800e388:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e38a:	f8c3 8000 	str.w	r8, [r3]
 800e38e:	440a      	add	r2, r1
 800e390:	9221      	str	r2, [sp, #132]	; 0x84
 800e392:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e394:	3201      	adds	r2, #1
 800e396:	2a07      	cmp	r2, #7
 800e398:	9220      	str	r2, [sp, #128]	; 0x80
 800e39a:	f73f ad59 	bgt.w	800de50 <_svfprintf_r+0x650>
 800e39e:	f103 0408 	add.w	r4, r3, #8
 800e3a2:	e55e      	b.n	800de62 <_svfprintf_r+0x662>
 800e3a4:	aa1f      	add	r2, sp, #124	; 0x7c
 800e3a6:	4651      	mov	r1, sl
 800e3a8:	4658      	mov	r0, fp
 800e3aa:	f001 fc75 	bl	800fc98 <__ssprint_r>
 800e3ae:	2800      	cmp	r0, #0
 800e3b0:	f040 8187 	bne.w	800e6c2 <_svfprintf_r+0xec2>
 800e3b4:	ac2c      	add	r4, sp, #176	; 0xb0
 800e3b6:	e7b1      	b.n	800e31c <_svfprintf_r+0xb1c>
 800e3b8:	aa1f      	add	r2, sp, #124	; 0x7c
 800e3ba:	4651      	mov	r1, sl
 800e3bc:	4658      	mov	r0, fp
 800e3be:	f001 fc6b 	bl	800fc98 <__ssprint_r>
 800e3c2:	2800      	cmp	r0, #0
 800e3c4:	f040 817d 	bne.w	800e6c2 <_svfprintf_r+0xec2>
 800e3c8:	ab2c      	add	r3, sp, #176	; 0xb0
 800e3ca:	e7bd      	b.n	800e348 <_svfprintf_r+0xb48>
 800e3cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e3ce:	605c      	str	r4, [r3, #4]
 800e3d0:	3210      	adds	r2, #16
 800e3d2:	9221      	str	r2, [sp, #132]	; 0x84
 800e3d4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e3d6:	3201      	adds	r2, #1
 800e3d8:	2a07      	cmp	r2, #7
 800e3da:	9220      	str	r2, [sp, #128]	; 0x80
 800e3dc:	dc02      	bgt.n	800e3e4 <_svfprintf_r+0xbe4>
 800e3de:	3308      	adds	r3, #8
 800e3e0:	3e10      	subs	r6, #16
 800e3e2:	e7b7      	b.n	800e354 <_svfprintf_r+0xb54>
 800e3e4:	aa1f      	add	r2, sp, #124	; 0x7c
 800e3e6:	4651      	mov	r1, sl
 800e3e8:	4658      	mov	r0, fp
 800e3ea:	f001 fc55 	bl	800fc98 <__ssprint_r>
 800e3ee:	2800      	cmp	r0, #0
 800e3f0:	f040 8167 	bne.w	800e6c2 <_svfprintf_r+0xec2>
 800e3f4:	ab2c      	add	r3, sp, #176	; 0xb0
 800e3f6:	e7f3      	b.n	800e3e0 <_svfprintf_r+0xbe0>
 800e3f8:	9b03      	ldr	r3, [sp, #12]
 800e3fa:	42bb      	cmp	r3, r7
 800e3fc:	bfa8      	it	ge
 800e3fe:	463b      	movge	r3, r7
 800e400:	2b00      	cmp	r3, #0
 800e402:	461e      	mov	r6, r3
 800e404:	dd0b      	ble.n	800e41e <_svfprintf_r+0xc1e>
 800e406:	6063      	str	r3, [r4, #4]
 800e408:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e40a:	f8c4 8000 	str.w	r8, [r4]
 800e40e:	4433      	add	r3, r6
 800e410:	9321      	str	r3, [sp, #132]	; 0x84
 800e412:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e414:	3301      	adds	r3, #1
 800e416:	2b07      	cmp	r3, #7
 800e418:	9320      	str	r3, [sp, #128]	; 0x80
 800e41a:	dc5f      	bgt.n	800e4dc <_svfprintf_r+0xcdc>
 800e41c:	3408      	adds	r4, #8
 800e41e:	2e00      	cmp	r6, #0
 800e420:	bfac      	ite	ge
 800e422:	1bbe      	subge	r6, r7, r6
 800e424:	463e      	movlt	r6, r7
 800e426:	2e00      	cmp	r6, #0
 800e428:	dd0f      	ble.n	800e44a <_svfprintf_r+0xc4a>
 800e42a:	f8df 9148 	ldr.w	r9, [pc, #328]	; 800e574 <_svfprintf_r+0xd74>
 800e42e:	f8c4 9000 	str.w	r9, [r4]
 800e432:	2e10      	cmp	r6, #16
 800e434:	dc5c      	bgt.n	800e4f0 <_svfprintf_r+0xcf0>
 800e436:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e438:	6066      	str	r6, [r4, #4]
 800e43a:	441e      	add	r6, r3
 800e43c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e43e:	9621      	str	r6, [sp, #132]	; 0x84
 800e440:	3301      	adds	r3, #1
 800e442:	2b07      	cmp	r3, #7
 800e444:	9320      	str	r3, [sp, #128]	; 0x80
 800e446:	dc6a      	bgt.n	800e51e <_svfprintf_r+0xd1e>
 800e448:	3408      	adds	r4, #8
 800e44a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e44c:	9a03      	ldr	r2, [sp, #12]
 800e44e:	4293      	cmp	r3, r2
 800e450:	db01      	blt.n	800e456 <_svfprintf_r+0xc56>
 800e452:	07e9      	lsls	r1, r5, #31
 800e454:	d50d      	bpl.n	800e472 <_svfprintf_r+0xc72>
 800e456:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e458:	6023      	str	r3, [r4, #0]
 800e45a:	9b08      	ldr	r3, [sp, #32]
 800e45c:	6063      	str	r3, [r4, #4]
 800e45e:	9a08      	ldr	r2, [sp, #32]
 800e460:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e462:	4413      	add	r3, r2
 800e464:	9321      	str	r3, [sp, #132]	; 0x84
 800e466:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e468:	3301      	adds	r3, #1
 800e46a:	2b07      	cmp	r3, #7
 800e46c:	9320      	str	r3, [sp, #128]	; 0x80
 800e46e:	dc60      	bgt.n	800e532 <_svfprintf_r+0xd32>
 800e470:	3408      	adds	r4, #8
 800e472:	9b03      	ldr	r3, [sp, #12]
 800e474:	9a03      	ldr	r2, [sp, #12]
 800e476:	1bde      	subs	r6, r3, r7
 800e478:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e47a:	1ad3      	subs	r3, r2, r3
 800e47c:	429e      	cmp	r6, r3
 800e47e:	bfa8      	it	ge
 800e480:	461e      	movge	r6, r3
 800e482:	2e00      	cmp	r6, #0
 800e484:	dd0b      	ble.n	800e49e <_svfprintf_r+0xc9e>
 800e486:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e488:	6066      	str	r6, [r4, #4]
 800e48a:	4433      	add	r3, r6
 800e48c:	9321      	str	r3, [sp, #132]	; 0x84
 800e48e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e490:	3301      	adds	r3, #1
 800e492:	4447      	add	r7, r8
 800e494:	2b07      	cmp	r3, #7
 800e496:	6027      	str	r7, [r4, #0]
 800e498:	9320      	str	r3, [sp, #128]	; 0x80
 800e49a:	dc54      	bgt.n	800e546 <_svfprintf_r+0xd46>
 800e49c:	3408      	adds	r4, #8
 800e49e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e4a0:	9a03      	ldr	r2, [sp, #12]
 800e4a2:	2e00      	cmp	r6, #0
 800e4a4:	eba2 0303 	sub.w	r3, r2, r3
 800e4a8:	bfac      	ite	ge
 800e4aa:	1b9e      	subge	r6, r3, r6
 800e4ac:	461e      	movlt	r6, r3
 800e4ae:	2e00      	cmp	r6, #0
 800e4b0:	f77f acd7 	ble.w	800de62 <_svfprintf_r+0x662>
 800e4b4:	4f2f      	ldr	r7, [pc, #188]	; (800e574 <_svfprintf_r+0xd74>)
 800e4b6:	f04f 0810 	mov.w	r8, #16
 800e4ba:	2e10      	cmp	r6, #16
 800e4bc:	6027      	str	r7, [r4, #0]
 800e4be:	f77f aee7 	ble.w	800e290 <_svfprintf_r+0xa90>
 800e4c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e4c4:	f8c4 8004 	str.w	r8, [r4, #4]
 800e4c8:	3310      	adds	r3, #16
 800e4ca:	9321      	str	r3, [sp, #132]	; 0x84
 800e4cc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e4ce:	3301      	adds	r3, #1
 800e4d0:	2b07      	cmp	r3, #7
 800e4d2:	9320      	str	r3, [sp, #128]	; 0x80
 800e4d4:	dc41      	bgt.n	800e55a <_svfprintf_r+0xd5a>
 800e4d6:	3408      	adds	r4, #8
 800e4d8:	3e10      	subs	r6, #16
 800e4da:	e7ee      	b.n	800e4ba <_svfprintf_r+0xcba>
 800e4dc:	aa1f      	add	r2, sp, #124	; 0x7c
 800e4de:	4651      	mov	r1, sl
 800e4e0:	4658      	mov	r0, fp
 800e4e2:	f001 fbd9 	bl	800fc98 <__ssprint_r>
 800e4e6:	2800      	cmp	r0, #0
 800e4e8:	f040 80eb 	bne.w	800e6c2 <_svfprintf_r+0xec2>
 800e4ec:	ac2c      	add	r4, sp, #176	; 0xb0
 800e4ee:	e796      	b.n	800e41e <_svfprintf_r+0xc1e>
 800e4f0:	2310      	movs	r3, #16
 800e4f2:	6063      	str	r3, [r4, #4]
 800e4f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e4f6:	3310      	adds	r3, #16
 800e4f8:	9321      	str	r3, [sp, #132]	; 0x84
 800e4fa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e4fc:	3301      	adds	r3, #1
 800e4fe:	2b07      	cmp	r3, #7
 800e500:	9320      	str	r3, [sp, #128]	; 0x80
 800e502:	dc02      	bgt.n	800e50a <_svfprintf_r+0xd0a>
 800e504:	3408      	adds	r4, #8
 800e506:	3e10      	subs	r6, #16
 800e508:	e791      	b.n	800e42e <_svfprintf_r+0xc2e>
 800e50a:	aa1f      	add	r2, sp, #124	; 0x7c
 800e50c:	4651      	mov	r1, sl
 800e50e:	4658      	mov	r0, fp
 800e510:	f001 fbc2 	bl	800fc98 <__ssprint_r>
 800e514:	2800      	cmp	r0, #0
 800e516:	f040 80d4 	bne.w	800e6c2 <_svfprintf_r+0xec2>
 800e51a:	ac2c      	add	r4, sp, #176	; 0xb0
 800e51c:	e7f3      	b.n	800e506 <_svfprintf_r+0xd06>
 800e51e:	aa1f      	add	r2, sp, #124	; 0x7c
 800e520:	4651      	mov	r1, sl
 800e522:	4658      	mov	r0, fp
 800e524:	f001 fbb8 	bl	800fc98 <__ssprint_r>
 800e528:	2800      	cmp	r0, #0
 800e52a:	f040 80ca 	bne.w	800e6c2 <_svfprintf_r+0xec2>
 800e52e:	ac2c      	add	r4, sp, #176	; 0xb0
 800e530:	e78b      	b.n	800e44a <_svfprintf_r+0xc4a>
 800e532:	aa1f      	add	r2, sp, #124	; 0x7c
 800e534:	4651      	mov	r1, sl
 800e536:	4658      	mov	r0, fp
 800e538:	f001 fbae 	bl	800fc98 <__ssprint_r>
 800e53c:	2800      	cmp	r0, #0
 800e53e:	f040 80c0 	bne.w	800e6c2 <_svfprintf_r+0xec2>
 800e542:	ac2c      	add	r4, sp, #176	; 0xb0
 800e544:	e795      	b.n	800e472 <_svfprintf_r+0xc72>
 800e546:	aa1f      	add	r2, sp, #124	; 0x7c
 800e548:	4651      	mov	r1, sl
 800e54a:	4658      	mov	r0, fp
 800e54c:	f001 fba4 	bl	800fc98 <__ssprint_r>
 800e550:	2800      	cmp	r0, #0
 800e552:	f040 80b6 	bne.w	800e6c2 <_svfprintf_r+0xec2>
 800e556:	ac2c      	add	r4, sp, #176	; 0xb0
 800e558:	e7a1      	b.n	800e49e <_svfprintf_r+0xc9e>
 800e55a:	aa1f      	add	r2, sp, #124	; 0x7c
 800e55c:	4651      	mov	r1, sl
 800e55e:	4658      	mov	r0, fp
 800e560:	f001 fb9a 	bl	800fc98 <__ssprint_r>
 800e564:	2800      	cmp	r0, #0
 800e566:	f040 80ac 	bne.w	800e6c2 <_svfprintf_r+0xec2>
 800e56a:	ac2c      	add	r4, sp, #176	; 0xb0
 800e56c:	e7b4      	b.n	800e4d8 <_svfprintf_r+0xcd8>
 800e56e:	bf00      	nop
 800e570:	080109cd 	.word	0x080109cd
 800e574:	08013019 	.word	0x08013019
 800e578:	9b03      	ldr	r3, [sp, #12]
 800e57a:	2b01      	cmp	r3, #1
 800e57c:	dc01      	bgt.n	800e582 <_svfprintf_r+0xd82>
 800e57e:	07ea      	lsls	r2, r5, #31
 800e580:	d576      	bpl.n	800e670 <_svfprintf_r+0xe70>
 800e582:	2301      	movs	r3, #1
 800e584:	6063      	str	r3, [r4, #4]
 800e586:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e588:	f8c4 8000 	str.w	r8, [r4]
 800e58c:	3301      	adds	r3, #1
 800e58e:	9321      	str	r3, [sp, #132]	; 0x84
 800e590:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e592:	3301      	adds	r3, #1
 800e594:	2b07      	cmp	r3, #7
 800e596:	9320      	str	r3, [sp, #128]	; 0x80
 800e598:	dc36      	bgt.n	800e608 <_svfprintf_r+0xe08>
 800e59a:	3408      	adds	r4, #8
 800e59c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e59e:	6023      	str	r3, [r4, #0]
 800e5a0:	9b08      	ldr	r3, [sp, #32]
 800e5a2:	6063      	str	r3, [r4, #4]
 800e5a4:	9a08      	ldr	r2, [sp, #32]
 800e5a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e5a8:	4413      	add	r3, r2
 800e5aa:	9321      	str	r3, [sp, #132]	; 0x84
 800e5ac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e5ae:	3301      	adds	r3, #1
 800e5b0:	2b07      	cmp	r3, #7
 800e5b2:	9320      	str	r3, [sp, #128]	; 0x80
 800e5b4:	dc31      	bgt.n	800e61a <_svfprintf_r+0xe1a>
 800e5b6:	3408      	adds	r4, #8
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e5c0:	f7f2 fa8e 	bl	8000ae0 <__aeabi_dcmpeq>
 800e5c4:	9b03      	ldr	r3, [sp, #12]
 800e5c6:	1e5e      	subs	r6, r3, #1
 800e5c8:	2800      	cmp	r0, #0
 800e5ca:	d12f      	bne.n	800e62c <_svfprintf_r+0xe2c>
 800e5cc:	f108 0301 	add.w	r3, r8, #1
 800e5d0:	e884 0048 	stmia.w	r4, {r3, r6}
 800e5d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e5d6:	9a03      	ldr	r2, [sp, #12]
 800e5d8:	3b01      	subs	r3, #1
 800e5da:	4413      	add	r3, r2
 800e5dc:	9321      	str	r3, [sp, #132]	; 0x84
 800e5de:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e5e0:	3301      	adds	r3, #1
 800e5e2:	2b07      	cmp	r3, #7
 800e5e4:	9320      	str	r3, [sp, #128]	; 0x80
 800e5e6:	dd4a      	ble.n	800e67e <_svfprintf_r+0xe7e>
 800e5e8:	aa1f      	add	r2, sp, #124	; 0x7c
 800e5ea:	4651      	mov	r1, sl
 800e5ec:	4658      	mov	r0, fp
 800e5ee:	f001 fb53 	bl	800fc98 <__ssprint_r>
 800e5f2:	2800      	cmp	r0, #0
 800e5f4:	d165      	bne.n	800e6c2 <_svfprintf_r+0xec2>
 800e5f6:	ac2c      	add	r4, sp, #176	; 0xb0
 800e5f8:	ab1b      	add	r3, sp, #108	; 0x6c
 800e5fa:	6023      	str	r3, [r4, #0]
 800e5fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e5fe:	6063      	str	r3, [r4, #4]
 800e600:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e602:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e604:	4413      	add	r3, r2
 800e606:	e41c      	b.n	800de42 <_svfprintf_r+0x642>
 800e608:	aa1f      	add	r2, sp, #124	; 0x7c
 800e60a:	4651      	mov	r1, sl
 800e60c:	4658      	mov	r0, fp
 800e60e:	f001 fb43 	bl	800fc98 <__ssprint_r>
 800e612:	2800      	cmp	r0, #0
 800e614:	d155      	bne.n	800e6c2 <_svfprintf_r+0xec2>
 800e616:	ac2c      	add	r4, sp, #176	; 0xb0
 800e618:	e7c0      	b.n	800e59c <_svfprintf_r+0xd9c>
 800e61a:	aa1f      	add	r2, sp, #124	; 0x7c
 800e61c:	4651      	mov	r1, sl
 800e61e:	4658      	mov	r0, fp
 800e620:	f001 fb3a 	bl	800fc98 <__ssprint_r>
 800e624:	2800      	cmp	r0, #0
 800e626:	d14c      	bne.n	800e6c2 <_svfprintf_r+0xec2>
 800e628:	ac2c      	add	r4, sp, #176	; 0xb0
 800e62a:	e7c5      	b.n	800e5b8 <_svfprintf_r+0xdb8>
 800e62c:	2e00      	cmp	r6, #0
 800e62e:	dde3      	ble.n	800e5f8 <_svfprintf_r+0xdf8>
 800e630:	4f59      	ldr	r7, [pc, #356]	; (800e798 <_svfprintf_r+0xf98>)
 800e632:	f04f 0810 	mov.w	r8, #16
 800e636:	2e10      	cmp	r6, #16
 800e638:	6027      	str	r7, [r4, #0]
 800e63a:	dc04      	bgt.n	800e646 <_svfprintf_r+0xe46>
 800e63c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e63e:	6066      	str	r6, [r4, #4]
 800e640:	441e      	add	r6, r3
 800e642:	9621      	str	r6, [sp, #132]	; 0x84
 800e644:	e7cb      	b.n	800e5de <_svfprintf_r+0xdde>
 800e646:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e648:	f8c4 8004 	str.w	r8, [r4, #4]
 800e64c:	3310      	adds	r3, #16
 800e64e:	9321      	str	r3, [sp, #132]	; 0x84
 800e650:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e652:	3301      	adds	r3, #1
 800e654:	2b07      	cmp	r3, #7
 800e656:	9320      	str	r3, [sp, #128]	; 0x80
 800e658:	dc02      	bgt.n	800e660 <_svfprintf_r+0xe60>
 800e65a:	3408      	adds	r4, #8
 800e65c:	3e10      	subs	r6, #16
 800e65e:	e7ea      	b.n	800e636 <_svfprintf_r+0xe36>
 800e660:	aa1f      	add	r2, sp, #124	; 0x7c
 800e662:	4651      	mov	r1, sl
 800e664:	4658      	mov	r0, fp
 800e666:	f001 fb17 	bl	800fc98 <__ssprint_r>
 800e66a:	bb50      	cbnz	r0, 800e6c2 <_svfprintf_r+0xec2>
 800e66c:	ac2c      	add	r4, sp, #176	; 0xb0
 800e66e:	e7f5      	b.n	800e65c <_svfprintf_r+0xe5c>
 800e670:	2301      	movs	r3, #1
 800e672:	6063      	str	r3, [r4, #4]
 800e674:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e676:	f8c4 8000 	str.w	r8, [r4]
 800e67a:	3301      	adds	r3, #1
 800e67c:	e7ae      	b.n	800e5dc <_svfprintf_r+0xddc>
 800e67e:	3408      	adds	r4, #8
 800e680:	e7ba      	b.n	800e5f8 <_svfprintf_r+0xdf8>
 800e682:	3408      	adds	r4, #8
 800e684:	f7ff bbed 	b.w	800de62 <_svfprintf_r+0x662>
 800e688:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e68a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e68c:	1a9d      	subs	r5, r3, r2
 800e68e:	2d00      	cmp	r5, #0
 800e690:	f77f abea 	ble.w	800de68 <_svfprintf_r+0x668>
 800e694:	2610      	movs	r6, #16
 800e696:	4b41      	ldr	r3, [pc, #260]	; (800e79c <_svfprintf_r+0xf9c>)
 800e698:	6023      	str	r3, [r4, #0]
 800e69a:	2d10      	cmp	r5, #16
 800e69c:	dc1b      	bgt.n	800e6d6 <_svfprintf_r+0xed6>
 800e69e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e6a0:	6065      	str	r5, [r4, #4]
 800e6a2:	441d      	add	r5, r3
 800e6a4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e6a6:	9521      	str	r5, [sp, #132]	; 0x84
 800e6a8:	3301      	adds	r3, #1
 800e6aa:	2b07      	cmp	r3, #7
 800e6ac:	9320      	str	r3, [sp, #128]	; 0x80
 800e6ae:	f77f abdb 	ble.w	800de68 <_svfprintf_r+0x668>
 800e6b2:	aa1f      	add	r2, sp, #124	; 0x7c
 800e6b4:	4651      	mov	r1, sl
 800e6b6:	4658      	mov	r0, fp
 800e6b8:	f001 faee 	bl	800fc98 <__ssprint_r>
 800e6bc:	2800      	cmp	r0, #0
 800e6be:	f43f abd3 	beq.w	800de68 <_svfprintf_r+0x668>
 800e6c2:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800e6c6:	f013 0f40 	tst.w	r3, #64	; 0x40
 800e6ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6cc:	bf18      	it	ne
 800e6ce:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 800e6d2:	f7ff b8b9 	b.w	800d848 <_svfprintf_r+0x48>
 800e6d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e6d8:	6066      	str	r6, [r4, #4]
 800e6da:	3310      	adds	r3, #16
 800e6dc:	9321      	str	r3, [sp, #132]	; 0x84
 800e6de:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e6e0:	3301      	adds	r3, #1
 800e6e2:	2b07      	cmp	r3, #7
 800e6e4:	9320      	str	r3, [sp, #128]	; 0x80
 800e6e6:	dc02      	bgt.n	800e6ee <_svfprintf_r+0xeee>
 800e6e8:	3408      	adds	r4, #8
 800e6ea:	3d10      	subs	r5, #16
 800e6ec:	e7d3      	b.n	800e696 <_svfprintf_r+0xe96>
 800e6ee:	aa1f      	add	r2, sp, #124	; 0x7c
 800e6f0:	4651      	mov	r1, sl
 800e6f2:	4658      	mov	r0, fp
 800e6f4:	f001 fad0 	bl	800fc98 <__ssprint_r>
 800e6f8:	2800      	cmp	r0, #0
 800e6fa:	d1e2      	bne.n	800e6c2 <_svfprintf_r+0xec2>
 800e6fc:	ac2c      	add	r4, sp, #176	; 0xb0
 800e6fe:	e7f4      	b.n	800e6ea <_svfprintf_r+0xeea>
 800e700:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e702:	2b00      	cmp	r3, #0
 800e704:	d0dd      	beq.n	800e6c2 <_svfprintf_r+0xec2>
 800e706:	aa1f      	add	r2, sp, #124	; 0x7c
 800e708:	4651      	mov	r1, sl
 800e70a:	4658      	mov	r0, fp
 800e70c:	f001 fac4 	bl	800fc98 <__ssprint_r>
 800e710:	e7d7      	b.n	800e6c2 <_svfprintf_r+0xec2>
 800e712:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e716:	4610      	mov	r0, r2
 800e718:	4619      	mov	r1, r3
 800e71a:	f7f2 fa13 	bl	8000b44 <__aeabi_dcmpun>
 800e71e:	2800      	cmp	r0, #0
 800e720:	f43f aa44 	beq.w	800dbac <_svfprintf_r+0x3ac>
 800e724:	4b1e      	ldr	r3, [pc, #120]	; (800e7a0 <_svfprintf_r+0xfa0>)
 800e726:	4a1f      	ldr	r2, [pc, #124]	; (800e7a4 <_svfprintf_r+0xfa4>)
 800e728:	f7ff ba34 	b.w	800db94 <_svfprintf_r+0x394>
 800e72c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e72e:	eba3 0308 	sub.w	r3, r3, r8
 800e732:	9303      	str	r3, [sp, #12]
 800e734:	f7ff bab5 	b.w	800dca2 <_svfprintf_r+0x4a2>
 800e738:	ea56 0207 	orrs.w	r2, r6, r7
 800e73c:	950b      	str	r5, [sp, #44]	; 0x2c
 800e73e:	f43f ac2b 	beq.w	800df98 <_svfprintf_r+0x798>
 800e742:	2b01      	cmp	r3, #1
 800e744:	f43f ac9d 	beq.w	800e082 <_svfprintf_r+0x882>
 800e748:	2b02      	cmp	r3, #2
 800e74a:	f43f acbd 	beq.w	800e0c8 <_svfprintf_r+0x8c8>
 800e74e:	ab2c      	add	r3, sp, #176	; 0xb0
 800e750:	08f1      	lsrs	r1, r6, #3
 800e752:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 800e756:	08f8      	lsrs	r0, r7, #3
 800e758:	f006 0207 	and.w	r2, r6, #7
 800e75c:	4607      	mov	r7, r0
 800e75e:	460e      	mov	r6, r1
 800e760:	3230      	adds	r2, #48	; 0x30
 800e762:	ea56 0107 	orrs.w	r1, r6, r7
 800e766:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800e76a:	f803 2c01 	strb.w	r2, [r3, #-1]
 800e76e:	f47f ac86 	bne.w	800e07e <_svfprintf_r+0x87e>
 800e772:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e774:	07c9      	lsls	r1, r1, #31
 800e776:	d506      	bpl.n	800e786 <_svfprintf_r+0xf86>
 800e778:	2a30      	cmp	r2, #48	; 0x30
 800e77a:	d004      	beq.n	800e786 <_svfprintf_r+0xf86>
 800e77c:	2230      	movs	r2, #48	; 0x30
 800e77e:	f808 2c01 	strb.w	r2, [r8, #-1]
 800e782:	f1a3 0802 	sub.w	r8, r3, #2
 800e786:	464e      	mov	r6, r9
 800e788:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 800e78c:	eba9 0908 	sub.w	r9, r9, r8
 800e790:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800e792:	2700      	movs	r7, #0
 800e794:	f7ff bad1 	b.w	800dd3a <_svfprintf_r+0x53a>
 800e798:	08013019 	.word	0x08013019
 800e79c:	08013009 	.word	0x08013009
 800e7a0:	08012fdf 	.word	0x08012fdf
 800e7a4:	08012fe3 	.word	0x08012fe3

0800e7a8 <_vsprintf_r>:
 800e7a8:	b510      	push	{r4, lr}
 800e7aa:	b09a      	sub	sp, #104	; 0x68
 800e7ac:	f44f 7402 	mov.w	r4, #520	; 0x208
 800e7b0:	9100      	str	r1, [sp, #0]
 800e7b2:	9104      	str	r1, [sp, #16]
 800e7b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e7b8:	9102      	str	r1, [sp, #8]
 800e7ba:	9105      	str	r1, [sp, #20]
 800e7bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e7c0:	f8ad 100e 	strh.w	r1, [sp, #14]
 800e7c4:	4669      	mov	r1, sp
 800e7c6:	f8ad 400c 	strh.w	r4, [sp, #12]
 800e7ca:	f7ff f819 	bl	800d800 <_svfprintf_r>
 800e7ce:	9b00      	ldr	r3, [sp, #0]
 800e7d0:	2200      	movs	r2, #0
 800e7d2:	701a      	strb	r2, [r3, #0]
 800e7d4:	b01a      	add	sp, #104	; 0x68
 800e7d6:	bd10      	pop	{r4, pc}

0800e7d8 <vsprintf>:
 800e7d8:	4613      	mov	r3, r2
 800e7da:	460a      	mov	r2, r1
 800e7dc:	4601      	mov	r1, r0
 800e7de:	4802      	ldr	r0, [pc, #8]	; (800e7e8 <vsprintf+0x10>)
 800e7e0:	6800      	ldr	r0, [r0, #0]
 800e7e2:	f7ff bfe1 	b.w	800e7a8 <_vsprintf_r>
 800e7e6:	bf00      	nop
 800e7e8:	20000d1c 	.word	0x20000d1c

0800e7ec <quorem>:
 800e7ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7f0:	6903      	ldr	r3, [r0, #16]
 800e7f2:	690c      	ldr	r4, [r1, #16]
 800e7f4:	429c      	cmp	r4, r3
 800e7f6:	4680      	mov	r8, r0
 800e7f8:	f300 8082 	bgt.w	800e900 <quorem+0x114>
 800e7fc:	3c01      	subs	r4, #1
 800e7fe:	f101 0714 	add.w	r7, r1, #20
 800e802:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800e806:	f100 0614 	add.w	r6, r0, #20
 800e80a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800e80e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800e812:	eb06 030e 	add.w	r3, r6, lr
 800e816:	3501      	adds	r5, #1
 800e818:	eb07 090e 	add.w	r9, r7, lr
 800e81c:	9301      	str	r3, [sp, #4]
 800e81e:	fbb0 f5f5 	udiv	r5, r0, r5
 800e822:	b395      	cbz	r5, 800e88a <quorem+0x9e>
 800e824:	f04f 0a00 	mov.w	sl, #0
 800e828:	4638      	mov	r0, r7
 800e82a:	46b4      	mov	ip, r6
 800e82c:	46d3      	mov	fp, sl
 800e82e:	f850 2b04 	ldr.w	r2, [r0], #4
 800e832:	b293      	uxth	r3, r2
 800e834:	fb05 a303 	mla	r3, r5, r3, sl
 800e838:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e83c:	b29b      	uxth	r3, r3
 800e83e:	ebab 0303 	sub.w	r3, fp, r3
 800e842:	0c12      	lsrs	r2, r2, #16
 800e844:	f8bc b000 	ldrh.w	fp, [ip]
 800e848:	fb05 a202 	mla	r2, r5, r2, sl
 800e84c:	fa13 f38b 	uxtah	r3, r3, fp
 800e850:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800e854:	fa1f fb82 	uxth.w	fp, r2
 800e858:	f8dc 2000 	ldr.w	r2, [ip]
 800e85c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800e860:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e864:	b29b      	uxth	r3, r3
 800e866:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e86a:	4581      	cmp	r9, r0
 800e86c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800e870:	f84c 3b04 	str.w	r3, [ip], #4
 800e874:	d2db      	bcs.n	800e82e <quorem+0x42>
 800e876:	f856 300e 	ldr.w	r3, [r6, lr]
 800e87a:	b933      	cbnz	r3, 800e88a <quorem+0x9e>
 800e87c:	9b01      	ldr	r3, [sp, #4]
 800e87e:	3b04      	subs	r3, #4
 800e880:	429e      	cmp	r6, r3
 800e882:	461a      	mov	r2, r3
 800e884:	d330      	bcc.n	800e8e8 <quorem+0xfc>
 800e886:	f8c8 4010 	str.w	r4, [r8, #16]
 800e88a:	4640      	mov	r0, r8
 800e88c:	f001 f93d 	bl	800fb0a <__mcmp>
 800e890:	2800      	cmp	r0, #0
 800e892:	db25      	blt.n	800e8e0 <quorem+0xf4>
 800e894:	3501      	adds	r5, #1
 800e896:	4630      	mov	r0, r6
 800e898:	f04f 0e00 	mov.w	lr, #0
 800e89c:	f857 2b04 	ldr.w	r2, [r7], #4
 800e8a0:	f8d0 c000 	ldr.w	ip, [r0]
 800e8a4:	b293      	uxth	r3, r2
 800e8a6:	ebae 0303 	sub.w	r3, lr, r3
 800e8aa:	0c12      	lsrs	r2, r2, #16
 800e8ac:	fa13 f38c 	uxtah	r3, r3, ip
 800e8b0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800e8b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e8b8:	b29b      	uxth	r3, r3
 800e8ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e8be:	45b9      	cmp	r9, r7
 800e8c0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800e8c4:	f840 3b04 	str.w	r3, [r0], #4
 800e8c8:	d2e8      	bcs.n	800e89c <quorem+0xb0>
 800e8ca:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800e8ce:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800e8d2:	b92a      	cbnz	r2, 800e8e0 <quorem+0xf4>
 800e8d4:	3b04      	subs	r3, #4
 800e8d6:	429e      	cmp	r6, r3
 800e8d8:	461a      	mov	r2, r3
 800e8da:	d30b      	bcc.n	800e8f4 <quorem+0x108>
 800e8dc:	f8c8 4010 	str.w	r4, [r8, #16]
 800e8e0:	4628      	mov	r0, r5
 800e8e2:	b003      	add	sp, #12
 800e8e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8e8:	6812      	ldr	r2, [r2, #0]
 800e8ea:	3b04      	subs	r3, #4
 800e8ec:	2a00      	cmp	r2, #0
 800e8ee:	d1ca      	bne.n	800e886 <quorem+0x9a>
 800e8f0:	3c01      	subs	r4, #1
 800e8f2:	e7c5      	b.n	800e880 <quorem+0x94>
 800e8f4:	6812      	ldr	r2, [r2, #0]
 800e8f6:	3b04      	subs	r3, #4
 800e8f8:	2a00      	cmp	r2, #0
 800e8fa:	d1ef      	bne.n	800e8dc <quorem+0xf0>
 800e8fc:	3c01      	subs	r4, #1
 800e8fe:	e7ea      	b.n	800e8d6 <quorem+0xea>
 800e900:	2000      	movs	r0, #0
 800e902:	e7ee      	b.n	800e8e2 <quorem+0xf6>
 800e904:	0000      	movs	r0, r0
	...

0800e908 <_dtoa_r>:
 800e908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e90c:	ec57 6b10 	vmov	r6, r7, d0
 800e910:	b097      	sub	sp, #92	; 0x5c
 800e912:	e9cd 6700 	strd	r6, r7, [sp]
 800e916:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e918:	9107      	str	r1, [sp, #28]
 800e91a:	4604      	mov	r4, r0
 800e91c:	920a      	str	r2, [sp, #40]	; 0x28
 800e91e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e920:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800e922:	b93e      	cbnz	r6, 800e934 <_dtoa_r+0x2c>
 800e924:	2010      	movs	r0, #16
 800e926:	f000 fedf 	bl	800f6e8 <malloc>
 800e92a:	6260      	str	r0, [r4, #36]	; 0x24
 800e92c:	6046      	str	r6, [r0, #4]
 800e92e:	6086      	str	r6, [r0, #8]
 800e930:	6006      	str	r6, [r0, #0]
 800e932:	60c6      	str	r6, [r0, #12]
 800e934:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e936:	6819      	ldr	r1, [r3, #0]
 800e938:	b151      	cbz	r1, 800e950 <_dtoa_r+0x48>
 800e93a:	685a      	ldr	r2, [r3, #4]
 800e93c:	604a      	str	r2, [r1, #4]
 800e93e:	2301      	movs	r3, #1
 800e940:	4093      	lsls	r3, r2
 800e942:	608b      	str	r3, [r1, #8]
 800e944:	4620      	mov	r0, r4
 800e946:	f000 ff0b 	bl	800f760 <_Bfree>
 800e94a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e94c:	2200      	movs	r2, #0
 800e94e:	601a      	str	r2, [r3, #0]
 800e950:	9b01      	ldr	r3, [sp, #4]
 800e952:	2b00      	cmp	r3, #0
 800e954:	bfbf      	itttt	lt
 800e956:	2301      	movlt	r3, #1
 800e958:	602b      	strlt	r3, [r5, #0]
 800e95a:	9b01      	ldrlt	r3, [sp, #4]
 800e95c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e960:	bfb2      	itee	lt
 800e962:	9301      	strlt	r3, [sp, #4]
 800e964:	2300      	movge	r3, #0
 800e966:	602b      	strge	r3, [r5, #0]
 800e968:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e96c:	4ba8      	ldr	r3, [pc, #672]	; (800ec10 <_dtoa_r+0x308>)
 800e96e:	ea33 0308 	bics.w	r3, r3, r8
 800e972:	d11b      	bne.n	800e9ac <_dtoa_r+0xa4>
 800e974:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e976:	f242 730f 	movw	r3, #9999	; 0x270f
 800e97a:	6013      	str	r3, [r2, #0]
 800e97c:	9b00      	ldr	r3, [sp, #0]
 800e97e:	b923      	cbnz	r3, 800e98a <_dtoa_r+0x82>
 800e980:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800e984:	2800      	cmp	r0, #0
 800e986:	f000 8578 	beq.w	800f47a <_dtoa_r+0xb72>
 800e98a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e98c:	b953      	cbnz	r3, 800e9a4 <_dtoa_r+0x9c>
 800e98e:	4ba1      	ldr	r3, [pc, #644]	; (800ec14 <_dtoa_r+0x30c>)
 800e990:	e021      	b.n	800e9d6 <_dtoa_r+0xce>
 800e992:	4ba1      	ldr	r3, [pc, #644]	; (800ec18 <_dtoa_r+0x310>)
 800e994:	9302      	str	r3, [sp, #8]
 800e996:	3308      	adds	r3, #8
 800e998:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e99a:	6013      	str	r3, [r2, #0]
 800e99c:	9802      	ldr	r0, [sp, #8]
 800e99e:	b017      	add	sp, #92	; 0x5c
 800e9a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9a4:	4b9b      	ldr	r3, [pc, #620]	; (800ec14 <_dtoa_r+0x30c>)
 800e9a6:	9302      	str	r3, [sp, #8]
 800e9a8:	3303      	adds	r3, #3
 800e9aa:	e7f5      	b.n	800e998 <_dtoa_r+0x90>
 800e9ac:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	4630      	mov	r0, r6
 800e9b6:	4639      	mov	r1, r7
 800e9b8:	f7f2 f892 	bl	8000ae0 <__aeabi_dcmpeq>
 800e9bc:	4681      	mov	r9, r0
 800e9be:	b160      	cbz	r0, 800e9da <_dtoa_r+0xd2>
 800e9c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e9c2:	2301      	movs	r3, #1
 800e9c4:	6013      	str	r3, [r2, #0]
 800e9c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	f000 8553 	beq.w	800f474 <_dtoa_r+0xb6c>
 800e9ce:	4b93      	ldr	r3, [pc, #588]	; (800ec1c <_dtoa_r+0x314>)
 800e9d0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e9d2:	6013      	str	r3, [r2, #0]
 800e9d4:	3b01      	subs	r3, #1
 800e9d6:	9302      	str	r3, [sp, #8]
 800e9d8:	e7e0      	b.n	800e99c <_dtoa_r+0x94>
 800e9da:	aa14      	add	r2, sp, #80	; 0x50
 800e9dc:	a915      	add	r1, sp, #84	; 0x54
 800e9de:	ec47 6b10 	vmov	d0, r6, r7
 800e9e2:	4620      	mov	r0, r4
 800e9e4:	f001 f909 	bl	800fbfa <__d2b>
 800e9e8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800e9ec:	4682      	mov	sl, r0
 800e9ee:	2d00      	cmp	r5, #0
 800e9f0:	d07e      	beq.n	800eaf0 <_dtoa_r+0x1e8>
 800e9f2:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e9f6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800e9fa:	4630      	mov	r0, r6
 800e9fc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800ea00:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ea04:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 800ea08:	2200      	movs	r2, #0
 800ea0a:	4b85      	ldr	r3, [pc, #532]	; (800ec20 <_dtoa_r+0x318>)
 800ea0c:	f7f1 fc4c 	bl	80002a8 <__aeabi_dsub>
 800ea10:	a379      	add	r3, pc, #484	; (adr r3, 800ebf8 <_dtoa_r+0x2f0>)
 800ea12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea16:	f7f1 fdfb 	bl	8000610 <__aeabi_dmul>
 800ea1a:	a379      	add	r3, pc, #484	; (adr r3, 800ec00 <_dtoa_r+0x2f8>)
 800ea1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea20:	f7f1 fc44 	bl	80002ac <__adddf3>
 800ea24:	4606      	mov	r6, r0
 800ea26:	4628      	mov	r0, r5
 800ea28:	460f      	mov	r7, r1
 800ea2a:	f7f1 fd8b 	bl	8000544 <__aeabi_i2d>
 800ea2e:	a376      	add	r3, pc, #472	; (adr r3, 800ec08 <_dtoa_r+0x300>)
 800ea30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea34:	f7f1 fdec 	bl	8000610 <__aeabi_dmul>
 800ea38:	4602      	mov	r2, r0
 800ea3a:	460b      	mov	r3, r1
 800ea3c:	4630      	mov	r0, r6
 800ea3e:	4639      	mov	r1, r7
 800ea40:	f7f1 fc34 	bl	80002ac <__adddf3>
 800ea44:	4606      	mov	r6, r0
 800ea46:	460f      	mov	r7, r1
 800ea48:	f7f2 f892 	bl	8000b70 <__aeabi_d2iz>
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	4683      	mov	fp, r0
 800ea50:	2300      	movs	r3, #0
 800ea52:	4630      	mov	r0, r6
 800ea54:	4639      	mov	r1, r7
 800ea56:	f7f2 f84d 	bl	8000af4 <__aeabi_dcmplt>
 800ea5a:	b158      	cbz	r0, 800ea74 <_dtoa_r+0x16c>
 800ea5c:	4658      	mov	r0, fp
 800ea5e:	f7f1 fd71 	bl	8000544 <__aeabi_i2d>
 800ea62:	4602      	mov	r2, r0
 800ea64:	460b      	mov	r3, r1
 800ea66:	4630      	mov	r0, r6
 800ea68:	4639      	mov	r1, r7
 800ea6a:	f7f2 f839 	bl	8000ae0 <__aeabi_dcmpeq>
 800ea6e:	b908      	cbnz	r0, 800ea74 <_dtoa_r+0x16c>
 800ea70:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800ea74:	f1bb 0f16 	cmp.w	fp, #22
 800ea78:	d859      	bhi.n	800eb2e <_dtoa_r+0x226>
 800ea7a:	496a      	ldr	r1, [pc, #424]	; (800ec24 <_dtoa_r+0x31c>)
 800ea7c:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800ea80:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea84:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ea88:	f7f2 f852 	bl	8000b30 <__aeabi_dcmpgt>
 800ea8c:	2800      	cmp	r0, #0
 800ea8e:	d050      	beq.n	800eb32 <_dtoa_r+0x22a>
 800ea90:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800ea94:	2300      	movs	r3, #0
 800ea96:	930e      	str	r3, [sp, #56]	; 0x38
 800ea98:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ea9a:	1b5d      	subs	r5, r3, r5
 800ea9c:	1e6b      	subs	r3, r5, #1
 800ea9e:	9306      	str	r3, [sp, #24]
 800eaa0:	bf45      	ittet	mi
 800eaa2:	f1c5 0301 	rsbmi	r3, r5, #1
 800eaa6:	9305      	strmi	r3, [sp, #20]
 800eaa8:	2300      	movpl	r3, #0
 800eaaa:	2300      	movmi	r3, #0
 800eaac:	bf4c      	ite	mi
 800eaae:	9306      	strmi	r3, [sp, #24]
 800eab0:	9305      	strpl	r3, [sp, #20]
 800eab2:	f1bb 0f00 	cmp.w	fp, #0
 800eab6:	db3e      	blt.n	800eb36 <_dtoa_r+0x22e>
 800eab8:	9b06      	ldr	r3, [sp, #24]
 800eaba:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800eabe:	445b      	add	r3, fp
 800eac0:	9306      	str	r3, [sp, #24]
 800eac2:	2300      	movs	r3, #0
 800eac4:	9308      	str	r3, [sp, #32]
 800eac6:	9b07      	ldr	r3, [sp, #28]
 800eac8:	2b09      	cmp	r3, #9
 800eaca:	f200 80af 	bhi.w	800ec2c <_dtoa_r+0x324>
 800eace:	2b05      	cmp	r3, #5
 800ead0:	bfc4      	itt	gt
 800ead2:	3b04      	subgt	r3, #4
 800ead4:	9307      	strgt	r3, [sp, #28]
 800ead6:	9b07      	ldr	r3, [sp, #28]
 800ead8:	f1a3 0302 	sub.w	r3, r3, #2
 800eadc:	bfcc      	ite	gt
 800eade:	2600      	movgt	r6, #0
 800eae0:	2601      	movle	r6, #1
 800eae2:	2b03      	cmp	r3, #3
 800eae4:	f200 80ae 	bhi.w	800ec44 <_dtoa_r+0x33c>
 800eae8:	e8df f003 	tbb	[pc, r3]
 800eaec:	772f8482 	.word	0x772f8482
 800eaf0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800eaf2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800eaf4:	441d      	add	r5, r3
 800eaf6:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800eafa:	2b20      	cmp	r3, #32
 800eafc:	dd11      	ble.n	800eb22 <_dtoa_r+0x21a>
 800eafe:	9a00      	ldr	r2, [sp, #0]
 800eb00:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800eb04:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800eb08:	fa22 f000 	lsr.w	r0, r2, r0
 800eb0c:	fa08 f303 	lsl.w	r3, r8, r3
 800eb10:	4318      	orrs	r0, r3
 800eb12:	f7f1 fd07 	bl	8000524 <__aeabi_ui2d>
 800eb16:	2301      	movs	r3, #1
 800eb18:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800eb1c:	3d01      	subs	r5, #1
 800eb1e:	9312      	str	r3, [sp, #72]	; 0x48
 800eb20:	e772      	b.n	800ea08 <_dtoa_r+0x100>
 800eb22:	f1c3 0020 	rsb	r0, r3, #32
 800eb26:	9b00      	ldr	r3, [sp, #0]
 800eb28:	fa03 f000 	lsl.w	r0, r3, r0
 800eb2c:	e7f1      	b.n	800eb12 <_dtoa_r+0x20a>
 800eb2e:	2301      	movs	r3, #1
 800eb30:	e7b1      	b.n	800ea96 <_dtoa_r+0x18e>
 800eb32:	900e      	str	r0, [sp, #56]	; 0x38
 800eb34:	e7b0      	b.n	800ea98 <_dtoa_r+0x190>
 800eb36:	9b05      	ldr	r3, [sp, #20]
 800eb38:	eba3 030b 	sub.w	r3, r3, fp
 800eb3c:	9305      	str	r3, [sp, #20]
 800eb3e:	f1cb 0300 	rsb	r3, fp, #0
 800eb42:	9308      	str	r3, [sp, #32]
 800eb44:	2300      	movs	r3, #0
 800eb46:	930b      	str	r3, [sp, #44]	; 0x2c
 800eb48:	e7bd      	b.n	800eac6 <_dtoa_r+0x1be>
 800eb4a:	2301      	movs	r3, #1
 800eb4c:	9309      	str	r3, [sp, #36]	; 0x24
 800eb4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	dd7a      	ble.n	800ec4a <_dtoa_r+0x342>
 800eb54:	9304      	str	r3, [sp, #16]
 800eb56:	9303      	str	r3, [sp, #12]
 800eb58:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800eb5a:	2200      	movs	r2, #0
 800eb5c:	606a      	str	r2, [r5, #4]
 800eb5e:	2104      	movs	r1, #4
 800eb60:	f101 0214 	add.w	r2, r1, #20
 800eb64:	429a      	cmp	r2, r3
 800eb66:	d975      	bls.n	800ec54 <_dtoa_r+0x34c>
 800eb68:	6869      	ldr	r1, [r5, #4]
 800eb6a:	4620      	mov	r0, r4
 800eb6c:	f000 fdc4 	bl	800f6f8 <_Balloc>
 800eb70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb72:	6028      	str	r0, [r5, #0]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	9302      	str	r3, [sp, #8]
 800eb78:	9b03      	ldr	r3, [sp, #12]
 800eb7a:	2b0e      	cmp	r3, #14
 800eb7c:	f200 80e5 	bhi.w	800ed4a <_dtoa_r+0x442>
 800eb80:	2e00      	cmp	r6, #0
 800eb82:	f000 80e2 	beq.w	800ed4a <_dtoa_r+0x442>
 800eb86:	ed9d 7b00 	vldr	d7, [sp]
 800eb8a:	f1bb 0f00 	cmp.w	fp, #0
 800eb8e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800eb92:	dd74      	ble.n	800ec7e <_dtoa_r+0x376>
 800eb94:	4a23      	ldr	r2, [pc, #140]	; (800ec24 <_dtoa_r+0x31c>)
 800eb96:	f00b 030f 	and.w	r3, fp, #15
 800eb9a:	ea4f 162b 	mov.w	r6, fp, asr #4
 800eb9e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800eba2:	06f0      	lsls	r0, r6, #27
 800eba4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800eba8:	d559      	bpl.n	800ec5e <_dtoa_r+0x356>
 800ebaa:	4b1f      	ldr	r3, [pc, #124]	; (800ec28 <_dtoa_r+0x320>)
 800ebac:	ec51 0b17 	vmov	r0, r1, d7
 800ebb0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ebb4:	f7f1 fe56 	bl	8000864 <__aeabi_ddiv>
 800ebb8:	e9cd 0100 	strd	r0, r1, [sp]
 800ebbc:	f006 060f 	and.w	r6, r6, #15
 800ebc0:	2503      	movs	r5, #3
 800ebc2:	4f19      	ldr	r7, [pc, #100]	; (800ec28 <_dtoa_r+0x320>)
 800ebc4:	2e00      	cmp	r6, #0
 800ebc6:	d14c      	bne.n	800ec62 <_dtoa_r+0x35a>
 800ebc8:	4642      	mov	r2, r8
 800ebca:	464b      	mov	r3, r9
 800ebcc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ebd0:	f7f1 fe48 	bl	8000864 <__aeabi_ddiv>
 800ebd4:	e9cd 0100 	strd	r0, r1, [sp]
 800ebd8:	e06a      	b.n	800ecb0 <_dtoa_r+0x3a8>
 800ebda:	2301      	movs	r3, #1
 800ebdc:	9309      	str	r3, [sp, #36]	; 0x24
 800ebde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebe0:	445b      	add	r3, fp
 800ebe2:	9304      	str	r3, [sp, #16]
 800ebe4:	3301      	adds	r3, #1
 800ebe6:	2b01      	cmp	r3, #1
 800ebe8:	9303      	str	r3, [sp, #12]
 800ebea:	bfb8      	it	lt
 800ebec:	2301      	movlt	r3, #1
 800ebee:	e7b3      	b.n	800eb58 <_dtoa_r+0x250>
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	e7ab      	b.n	800eb4c <_dtoa_r+0x244>
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	e7f1      	b.n	800ebdc <_dtoa_r+0x2d4>
 800ebf8:	636f4361 	.word	0x636f4361
 800ebfc:	3fd287a7 	.word	0x3fd287a7
 800ec00:	8b60c8b3 	.word	0x8b60c8b3
 800ec04:	3fc68a28 	.word	0x3fc68a28
 800ec08:	509f79fb 	.word	0x509f79fb
 800ec0c:	3fd34413 	.word	0x3fd34413
 800ec10:	7ff00000 	.word	0x7ff00000
 800ec14:	08013032 	.word	0x08013032
 800ec18:	08013029 	.word	0x08013029
 800ec1c:	080109ce 	.word	0x080109ce
 800ec20:	3ff80000 	.word	0x3ff80000
 800ec24:	08013060 	.word	0x08013060
 800ec28:	08013038 	.word	0x08013038
 800ec2c:	2601      	movs	r6, #1
 800ec2e:	2300      	movs	r3, #0
 800ec30:	9307      	str	r3, [sp, #28]
 800ec32:	9609      	str	r6, [sp, #36]	; 0x24
 800ec34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ec38:	9304      	str	r3, [sp, #16]
 800ec3a:	9303      	str	r3, [sp, #12]
 800ec3c:	2200      	movs	r2, #0
 800ec3e:	2312      	movs	r3, #18
 800ec40:	920a      	str	r2, [sp, #40]	; 0x28
 800ec42:	e789      	b.n	800eb58 <_dtoa_r+0x250>
 800ec44:	2301      	movs	r3, #1
 800ec46:	9309      	str	r3, [sp, #36]	; 0x24
 800ec48:	e7f4      	b.n	800ec34 <_dtoa_r+0x32c>
 800ec4a:	2301      	movs	r3, #1
 800ec4c:	9304      	str	r3, [sp, #16]
 800ec4e:	9303      	str	r3, [sp, #12]
 800ec50:	461a      	mov	r2, r3
 800ec52:	e7f5      	b.n	800ec40 <_dtoa_r+0x338>
 800ec54:	686a      	ldr	r2, [r5, #4]
 800ec56:	3201      	adds	r2, #1
 800ec58:	606a      	str	r2, [r5, #4]
 800ec5a:	0049      	lsls	r1, r1, #1
 800ec5c:	e780      	b.n	800eb60 <_dtoa_r+0x258>
 800ec5e:	2502      	movs	r5, #2
 800ec60:	e7af      	b.n	800ebc2 <_dtoa_r+0x2ba>
 800ec62:	07f1      	lsls	r1, r6, #31
 800ec64:	d508      	bpl.n	800ec78 <_dtoa_r+0x370>
 800ec66:	4640      	mov	r0, r8
 800ec68:	4649      	mov	r1, r9
 800ec6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ec6e:	f7f1 fccf 	bl	8000610 <__aeabi_dmul>
 800ec72:	3501      	adds	r5, #1
 800ec74:	4680      	mov	r8, r0
 800ec76:	4689      	mov	r9, r1
 800ec78:	1076      	asrs	r6, r6, #1
 800ec7a:	3708      	adds	r7, #8
 800ec7c:	e7a2      	b.n	800ebc4 <_dtoa_r+0x2bc>
 800ec7e:	f000 809d 	beq.w	800edbc <_dtoa_r+0x4b4>
 800ec82:	f1cb 0600 	rsb	r6, fp, #0
 800ec86:	4b9f      	ldr	r3, [pc, #636]	; (800ef04 <_dtoa_r+0x5fc>)
 800ec88:	4f9f      	ldr	r7, [pc, #636]	; (800ef08 <_dtoa_r+0x600>)
 800ec8a:	f006 020f 	and.w	r2, r6, #15
 800ec8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ec92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ec9a:	f7f1 fcb9 	bl	8000610 <__aeabi_dmul>
 800ec9e:	e9cd 0100 	strd	r0, r1, [sp]
 800eca2:	1136      	asrs	r6, r6, #4
 800eca4:	2300      	movs	r3, #0
 800eca6:	2502      	movs	r5, #2
 800eca8:	2e00      	cmp	r6, #0
 800ecaa:	d17c      	bne.n	800eda6 <_dtoa_r+0x49e>
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d191      	bne.n	800ebd4 <_dtoa_r+0x2cc>
 800ecb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	f000 8084 	beq.w	800edc0 <_dtoa_r+0x4b8>
 800ecb8:	e9dd 8900 	ldrd	r8, r9, [sp]
 800ecbc:	2200      	movs	r2, #0
 800ecbe:	4b93      	ldr	r3, [pc, #588]	; (800ef0c <_dtoa_r+0x604>)
 800ecc0:	4640      	mov	r0, r8
 800ecc2:	4649      	mov	r1, r9
 800ecc4:	f7f1 ff16 	bl	8000af4 <__aeabi_dcmplt>
 800ecc8:	2800      	cmp	r0, #0
 800ecca:	d079      	beq.n	800edc0 <_dtoa_r+0x4b8>
 800eccc:	9b03      	ldr	r3, [sp, #12]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d076      	beq.n	800edc0 <_dtoa_r+0x4b8>
 800ecd2:	9b04      	ldr	r3, [sp, #16]
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	dd34      	ble.n	800ed42 <_dtoa_r+0x43a>
 800ecd8:	2200      	movs	r2, #0
 800ecda:	4b8d      	ldr	r3, [pc, #564]	; (800ef10 <_dtoa_r+0x608>)
 800ecdc:	4640      	mov	r0, r8
 800ecde:	4649      	mov	r1, r9
 800ece0:	f7f1 fc96 	bl	8000610 <__aeabi_dmul>
 800ece4:	e9cd 0100 	strd	r0, r1, [sp]
 800ece8:	9e04      	ldr	r6, [sp, #16]
 800ecea:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800ecee:	3501      	adds	r5, #1
 800ecf0:	4628      	mov	r0, r5
 800ecf2:	f7f1 fc27 	bl	8000544 <__aeabi_i2d>
 800ecf6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ecfa:	f7f1 fc89 	bl	8000610 <__aeabi_dmul>
 800ecfe:	2200      	movs	r2, #0
 800ed00:	4b84      	ldr	r3, [pc, #528]	; (800ef14 <_dtoa_r+0x60c>)
 800ed02:	f7f1 fad3 	bl	80002ac <__adddf3>
 800ed06:	4680      	mov	r8, r0
 800ed08:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 800ed0c:	2e00      	cmp	r6, #0
 800ed0e:	d15a      	bne.n	800edc6 <_dtoa_r+0x4be>
 800ed10:	2200      	movs	r2, #0
 800ed12:	4b81      	ldr	r3, [pc, #516]	; (800ef18 <_dtoa_r+0x610>)
 800ed14:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ed18:	f7f1 fac6 	bl	80002a8 <__aeabi_dsub>
 800ed1c:	4642      	mov	r2, r8
 800ed1e:	464b      	mov	r3, r9
 800ed20:	e9cd 0100 	strd	r0, r1, [sp]
 800ed24:	f7f1 ff04 	bl	8000b30 <__aeabi_dcmpgt>
 800ed28:	2800      	cmp	r0, #0
 800ed2a:	f040 829b 	bne.w	800f264 <_dtoa_r+0x95c>
 800ed2e:	4642      	mov	r2, r8
 800ed30:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ed34:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ed38:	f7f1 fedc 	bl	8000af4 <__aeabi_dcmplt>
 800ed3c:	2800      	cmp	r0, #0
 800ed3e:	f040 828f 	bne.w	800f260 <_dtoa_r+0x958>
 800ed42:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ed46:	e9cd 2300 	strd	r2, r3, [sp]
 800ed4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	f2c0 8150 	blt.w	800eff2 <_dtoa_r+0x6ea>
 800ed52:	f1bb 0f0e 	cmp.w	fp, #14
 800ed56:	f300 814c 	bgt.w	800eff2 <_dtoa_r+0x6ea>
 800ed5a:	4b6a      	ldr	r3, [pc, #424]	; (800ef04 <_dtoa_r+0x5fc>)
 800ed5c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ed60:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ed64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	f280 80da 	bge.w	800ef20 <_dtoa_r+0x618>
 800ed6c:	9b03      	ldr	r3, [sp, #12]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	f300 80d6 	bgt.w	800ef20 <_dtoa_r+0x618>
 800ed74:	f040 8273 	bne.w	800f25e <_dtoa_r+0x956>
 800ed78:	2200      	movs	r2, #0
 800ed7a:	4b67      	ldr	r3, [pc, #412]	; (800ef18 <_dtoa_r+0x610>)
 800ed7c:	4640      	mov	r0, r8
 800ed7e:	4649      	mov	r1, r9
 800ed80:	f7f1 fc46 	bl	8000610 <__aeabi_dmul>
 800ed84:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ed88:	f7f1 fec8 	bl	8000b1c <__aeabi_dcmpge>
 800ed8c:	9e03      	ldr	r6, [sp, #12]
 800ed8e:	4637      	mov	r7, r6
 800ed90:	2800      	cmp	r0, #0
 800ed92:	f040 824a 	bne.w	800f22a <_dtoa_r+0x922>
 800ed96:	9b02      	ldr	r3, [sp, #8]
 800ed98:	9a02      	ldr	r2, [sp, #8]
 800ed9a:	1c5d      	adds	r5, r3, #1
 800ed9c:	2331      	movs	r3, #49	; 0x31
 800ed9e:	7013      	strb	r3, [r2, #0]
 800eda0:	f10b 0b01 	add.w	fp, fp, #1
 800eda4:	e245      	b.n	800f232 <_dtoa_r+0x92a>
 800eda6:	07f2      	lsls	r2, r6, #31
 800eda8:	d505      	bpl.n	800edb6 <_dtoa_r+0x4ae>
 800edaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800edae:	f7f1 fc2f 	bl	8000610 <__aeabi_dmul>
 800edb2:	3501      	adds	r5, #1
 800edb4:	2301      	movs	r3, #1
 800edb6:	1076      	asrs	r6, r6, #1
 800edb8:	3708      	adds	r7, #8
 800edba:	e775      	b.n	800eca8 <_dtoa_r+0x3a0>
 800edbc:	2502      	movs	r5, #2
 800edbe:	e777      	b.n	800ecb0 <_dtoa_r+0x3a8>
 800edc0:	465f      	mov	r7, fp
 800edc2:	9e03      	ldr	r6, [sp, #12]
 800edc4:	e794      	b.n	800ecf0 <_dtoa_r+0x3e8>
 800edc6:	9a02      	ldr	r2, [sp, #8]
 800edc8:	4b4e      	ldr	r3, [pc, #312]	; (800ef04 <_dtoa_r+0x5fc>)
 800edca:	4432      	add	r2, r6
 800edcc:	9213      	str	r2, [sp, #76]	; 0x4c
 800edce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800edd0:	1e71      	subs	r1, r6, #1
 800edd2:	2a00      	cmp	r2, #0
 800edd4:	d048      	beq.n	800ee68 <_dtoa_r+0x560>
 800edd6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800edda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edde:	2000      	movs	r0, #0
 800ede0:	494e      	ldr	r1, [pc, #312]	; (800ef1c <_dtoa_r+0x614>)
 800ede2:	f7f1 fd3f 	bl	8000864 <__aeabi_ddiv>
 800ede6:	4642      	mov	r2, r8
 800ede8:	464b      	mov	r3, r9
 800edea:	f7f1 fa5d 	bl	80002a8 <__aeabi_dsub>
 800edee:	9d02      	ldr	r5, [sp, #8]
 800edf0:	4680      	mov	r8, r0
 800edf2:	4689      	mov	r9, r1
 800edf4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800edf8:	f7f1 feba 	bl	8000b70 <__aeabi_d2iz>
 800edfc:	4606      	mov	r6, r0
 800edfe:	f7f1 fba1 	bl	8000544 <__aeabi_i2d>
 800ee02:	4602      	mov	r2, r0
 800ee04:	460b      	mov	r3, r1
 800ee06:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ee0a:	f7f1 fa4d 	bl	80002a8 <__aeabi_dsub>
 800ee0e:	3630      	adds	r6, #48	; 0x30
 800ee10:	f805 6b01 	strb.w	r6, [r5], #1
 800ee14:	4642      	mov	r2, r8
 800ee16:	464b      	mov	r3, r9
 800ee18:	e9cd 0100 	strd	r0, r1, [sp]
 800ee1c:	f7f1 fe6a 	bl	8000af4 <__aeabi_dcmplt>
 800ee20:	2800      	cmp	r0, #0
 800ee22:	d165      	bne.n	800eef0 <_dtoa_r+0x5e8>
 800ee24:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ee28:	2000      	movs	r0, #0
 800ee2a:	4938      	ldr	r1, [pc, #224]	; (800ef0c <_dtoa_r+0x604>)
 800ee2c:	f7f1 fa3c 	bl	80002a8 <__aeabi_dsub>
 800ee30:	4642      	mov	r2, r8
 800ee32:	464b      	mov	r3, r9
 800ee34:	f7f1 fe5e 	bl	8000af4 <__aeabi_dcmplt>
 800ee38:	2800      	cmp	r0, #0
 800ee3a:	f040 80ba 	bne.w	800efb2 <_dtoa_r+0x6aa>
 800ee3e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ee40:	429d      	cmp	r5, r3
 800ee42:	f43f af7e 	beq.w	800ed42 <_dtoa_r+0x43a>
 800ee46:	2200      	movs	r2, #0
 800ee48:	4b31      	ldr	r3, [pc, #196]	; (800ef10 <_dtoa_r+0x608>)
 800ee4a:	4640      	mov	r0, r8
 800ee4c:	4649      	mov	r1, r9
 800ee4e:	f7f1 fbdf 	bl	8000610 <__aeabi_dmul>
 800ee52:	2200      	movs	r2, #0
 800ee54:	4680      	mov	r8, r0
 800ee56:	4689      	mov	r9, r1
 800ee58:	4b2d      	ldr	r3, [pc, #180]	; (800ef10 <_dtoa_r+0x608>)
 800ee5a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ee5e:	f7f1 fbd7 	bl	8000610 <__aeabi_dmul>
 800ee62:	e9cd 0100 	strd	r0, r1, [sp]
 800ee66:	e7c5      	b.n	800edf4 <_dtoa_r+0x4ec>
 800ee68:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800ee6c:	4642      	mov	r2, r8
 800ee6e:	464b      	mov	r3, r9
 800ee70:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ee74:	f7f1 fbcc 	bl	8000610 <__aeabi_dmul>
 800ee78:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ee7c:	9d02      	ldr	r5, [sp, #8]
 800ee7e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ee82:	f7f1 fe75 	bl	8000b70 <__aeabi_d2iz>
 800ee86:	4606      	mov	r6, r0
 800ee88:	f7f1 fb5c 	bl	8000544 <__aeabi_i2d>
 800ee8c:	3630      	adds	r6, #48	; 0x30
 800ee8e:	4602      	mov	r2, r0
 800ee90:	460b      	mov	r3, r1
 800ee92:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ee96:	f7f1 fa07 	bl	80002a8 <__aeabi_dsub>
 800ee9a:	f805 6b01 	strb.w	r6, [r5], #1
 800ee9e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800eea0:	42ab      	cmp	r3, r5
 800eea2:	4680      	mov	r8, r0
 800eea4:	4689      	mov	r9, r1
 800eea6:	f04f 0200 	mov.w	r2, #0
 800eeaa:	d125      	bne.n	800eef8 <_dtoa_r+0x5f0>
 800eeac:	4b1b      	ldr	r3, [pc, #108]	; (800ef1c <_dtoa_r+0x614>)
 800eeae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800eeb2:	f7f1 f9fb 	bl	80002ac <__adddf3>
 800eeb6:	4602      	mov	r2, r0
 800eeb8:	460b      	mov	r3, r1
 800eeba:	4640      	mov	r0, r8
 800eebc:	4649      	mov	r1, r9
 800eebe:	f7f1 fe37 	bl	8000b30 <__aeabi_dcmpgt>
 800eec2:	2800      	cmp	r0, #0
 800eec4:	d175      	bne.n	800efb2 <_dtoa_r+0x6aa>
 800eec6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800eeca:	2000      	movs	r0, #0
 800eecc:	4913      	ldr	r1, [pc, #76]	; (800ef1c <_dtoa_r+0x614>)
 800eece:	f7f1 f9eb 	bl	80002a8 <__aeabi_dsub>
 800eed2:	4602      	mov	r2, r0
 800eed4:	460b      	mov	r3, r1
 800eed6:	4640      	mov	r0, r8
 800eed8:	4649      	mov	r1, r9
 800eeda:	f7f1 fe0b 	bl	8000af4 <__aeabi_dcmplt>
 800eede:	2800      	cmp	r0, #0
 800eee0:	f43f af2f 	beq.w	800ed42 <_dtoa_r+0x43a>
 800eee4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800eee8:	2b30      	cmp	r3, #48	; 0x30
 800eeea:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800eeee:	d001      	beq.n	800eef4 <_dtoa_r+0x5ec>
 800eef0:	46bb      	mov	fp, r7
 800eef2:	e04d      	b.n	800ef90 <_dtoa_r+0x688>
 800eef4:	4615      	mov	r5, r2
 800eef6:	e7f5      	b.n	800eee4 <_dtoa_r+0x5dc>
 800eef8:	4b05      	ldr	r3, [pc, #20]	; (800ef10 <_dtoa_r+0x608>)
 800eefa:	f7f1 fb89 	bl	8000610 <__aeabi_dmul>
 800eefe:	e9cd 0100 	strd	r0, r1, [sp]
 800ef02:	e7bc      	b.n	800ee7e <_dtoa_r+0x576>
 800ef04:	08013060 	.word	0x08013060
 800ef08:	08013038 	.word	0x08013038
 800ef0c:	3ff00000 	.word	0x3ff00000
 800ef10:	40240000 	.word	0x40240000
 800ef14:	401c0000 	.word	0x401c0000
 800ef18:	40140000 	.word	0x40140000
 800ef1c:	3fe00000 	.word	0x3fe00000
 800ef20:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ef24:	9d02      	ldr	r5, [sp, #8]
 800ef26:	4642      	mov	r2, r8
 800ef28:	464b      	mov	r3, r9
 800ef2a:	4630      	mov	r0, r6
 800ef2c:	4639      	mov	r1, r7
 800ef2e:	f7f1 fc99 	bl	8000864 <__aeabi_ddiv>
 800ef32:	f7f1 fe1d 	bl	8000b70 <__aeabi_d2iz>
 800ef36:	9000      	str	r0, [sp, #0]
 800ef38:	f7f1 fb04 	bl	8000544 <__aeabi_i2d>
 800ef3c:	4642      	mov	r2, r8
 800ef3e:	464b      	mov	r3, r9
 800ef40:	f7f1 fb66 	bl	8000610 <__aeabi_dmul>
 800ef44:	4602      	mov	r2, r0
 800ef46:	460b      	mov	r3, r1
 800ef48:	4630      	mov	r0, r6
 800ef4a:	4639      	mov	r1, r7
 800ef4c:	f7f1 f9ac 	bl	80002a8 <__aeabi_dsub>
 800ef50:	9e00      	ldr	r6, [sp, #0]
 800ef52:	9f03      	ldr	r7, [sp, #12]
 800ef54:	3630      	adds	r6, #48	; 0x30
 800ef56:	f805 6b01 	strb.w	r6, [r5], #1
 800ef5a:	9e02      	ldr	r6, [sp, #8]
 800ef5c:	1bae      	subs	r6, r5, r6
 800ef5e:	42b7      	cmp	r7, r6
 800ef60:	4602      	mov	r2, r0
 800ef62:	460b      	mov	r3, r1
 800ef64:	d138      	bne.n	800efd8 <_dtoa_r+0x6d0>
 800ef66:	f7f1 f9a1 	bl	80002ac <__adddf3>
 800ef6a:	4606      	mov	r6, r0
 800ef6c:	460f      	mov	r7, r1
 800ef6e:	4602      	mov	r2, r0
 800ef70:	460b      	mov	r3, r1
 800ef72:	4640      	mov	r0, r8
 800ef74:	4649      	mov	r1, r9
 800ef76:	f7f1 fdbd 	bl	8000af4 <__aeabi_dcmplt>
 800ef7a:	b9c8      	cbnz	r0, 800efb0 <_dtoa_r+0x6a8>
 800ef7c:	4632      	mov	r2, r6
 800ef7e:	463b      	mov	r3, r7
 800ef80:	4640      	mov	r0, r8
 800ef82:	4649      	mov	r1, r9
 800ef84:	f7f1 fdac 	bl	8000ae0 <__aeabi_dcmpeq>
 800ef88:	b110      	cbz	r0, 800ef90 <_dtoa_r+0x688>
 800ef8a:	9b00      	ldr	r3, [sp, #0]
 800ef8c:	07db      	lsls	r3, r3, #31
 800ef8e:	d40f      	bmi.n	800efb0 <_dtoa_r+0x6a8>
 800ef90:	4651      	mov	r1, sl
 800ef92:	4620      	mov	r0, r4
 800ef94:	f000 fbe4 	bl	800f760 <_Bfree>
 800ef98:	2300      	movs	r3, #0
 800ef9a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ef9c:	702b      	strb	r3, [r5, #0]
 800ef9e:	f10b 0301 	add.w	r3, fp, #1
 800efa2:	6013      	str	r3, [r2, #0]
 800efa4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	f43f acf8 	beq.w	800e99c <_dtoa_r+0x94>
 800efac:	601d      	str	r5, [r3, #0]
 800efae:	e4f5      	b.n	800e99c <_dtoa_r+0x94>
 800efb0:	465f      	mov	r7, fp
 800efb2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800efb6:	2a39      	cmp	r2, #57	; 0x39
 800efb8:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800efbc:	d106      	bne.n	800efcc <_dtoa_r+0x6c4>
 800efbe:	9a02      	ldr	r2, [sp, #8]
 800efc0:	429a      	cmp	r2, r3
 800efc2:	d107      	bne.n	800efd4 <_dtoa_r+0x6cc>
 800efc4:	2330      	movs	r3, #48	; 0x30
 800efc6:	7013      	strb	r3, [r2, #0]
 800efc8:	3701      	adds	r7, #1
 800efca:	4613      	mov	r3, r2
 800efcc:	781a      	ldrb	r2, [r3, #0]
 800efce:	3201      	adds	r2, #1
 800efd0:	701a      	strb	r2, [r3, #0]
 800efd2:	e78d      	b.n	800eef0 <_dtoa_r+0x5e8>
 800efd4:	461d      	mov	r5, r3
 800efd6:	e7ec      	b.n	800efb2 <_dtoa_r+0x6aa>
 800efd8:	2200      	movs	r2, #0
 800efda:	4ba4      	ldr	r3, [pc, #656]	; (800f26c <_dtoa_r+0x964>)
 800efdc:	f7f1 fb18 	bl	8000610 <__aeabi_dmul>
 800efe0:	2200      	movs	r2, #0
 800efe2:	2300      	movs	r3, #0
 800efe4:	4606      	mov	r6, r0
 800efe6:	460f      	mov	r7, r1
 800efe8:	f7f1 fd7a 	bl	8000ae0 <__aeabi_dcmpeq>
 800efec:	2800      	cmp	r0, #0
 800efee:	d09a      	beq.n	800ef26 <_dtoa_r+0x61e>
 800eff0:	e7ce      	b.n	800ef90 <_dtoa_r+0x688>
 800eff2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eff4:	2a00      	cmp	r2, #0
 800eff6:	f000 80cd 	beq.w	800f194 <_dtoa_r+0x88c>
 800effa:	9a07      	ldr	r2, [sp, #28]
 800effc:	2a01      	cmp	r2, #1
 800effe:	f300 80af 	bgt.w	800f160 <_dtoa_r+0x858>
 800f002:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f004:	2a00      	cmp	r2, #0
 800f006:	f000 80a7 	beq.w	800f158 <_dtoa_r+0x850>
 800f00a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f00e:	9e08      	ldr	r6, [sp, #32]
 800f010:	9d05      	ldr	r5, [sp, #20]
 800f012:	9a05      	ldr	r2, [sp, #20]
 800f014:	441a      	add	r2, r3
 800f016:	9205      	str	r2, [sp, #20]
 800f018:	9a06      	ldr	r2, [sp, #24]
 800f01a:	2101      	movs	r1, #1
 800f01c:	441a      	add	r2, r3
 800f01e:	4620      	mov	r0, r4
 800f020:	9206      	str	r2, [sp, #24]
 800f022:	f000 fc3d 	bl	800f8a0 <__i2b>
 800f026:	4607      	mov	r7, r0
 800f028:	2d00      	cmp	r5, #0
 800f02a:	dd0c      	ble.n	800f046 <_dtoa_r+0x73e>
 800f02c:	9b06      	ldr	r3, [sp, #24]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	dd09      	ble.n	800f046 <_dtoa_r+0x73e>
 800f032:	42ab      	cmp	r3, r5
 800f034:	9a05      	ldr	r2, [sp, #20]
 800f036:	bfa8      	it	ge
 800f038:	462b      	movge	r3, r5
 800f03a:	1ad2      	subs	r2, r2, r3
 800f03c:	9205      	str	r2, [sp, #20]
 800f03e:	9a06      	ldr	r2, [sp, #24]
 800f040:	1aed      	subs	r5, r5, r3
 800f042:	1ad3      	subs	r3, r2, r3
 800f044:	9306      	str	r3, [sp, #24]
 800f046:	9b08      	ldr	r3, [sp, #32]
 800f048:	b1f3      	cbz	r3, 800f088 <_dtoa_r+0x780>
 800f04a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	f000 80a5 	beq.w	800f19c <_dtoa_r+0x894>
 800f052:	2e00      	cmp	r6, #0
 800f054:	dd10      	ble.n	800f078 <_dtoa_r+0x770>
 800f056:	4639      	mov	r1, r7
 800f058:	4632      	mov	r2, r6
 800f05a:	4620      	mov	r0, r4
 800f05c:	f000 fcb6 	bl	800f9cc <__pow5mult>
 800f060:	4652      	mov	r2, sl
 800f062:	4601      	mov	r1, r0
 800f064:	4607      	mov	r7, r0
 800f066:	4620      	mov	r0, r4
 800f068:	f000 fc23 	bl	800f8b2 <__multiply>
 800f06c:	4651      	mov	r1, sl
 800f06e:	4680      	mov	r8, r0
 800f070:	4620      	mov	r0, r4
 800f072:	f000 fb75 	bl	800f760 <_Bfree>
 800f076:	46c2      	mov	sl, r8
 800f078:	9b08      	ldr	r3, [sp, #32]
 800f07a:	1b9a      	subs	r2, r3, r6
 800f07c:	d004      	beq.n	800f088 <_dtoa_r+0x780>
 800f07e:	4651      	mov	r1, sl
 800f080:	4620      	mov	r0, r4
 800f082:	f000 fca3 	bl	800f9cc <__pow5mult>
 800f086:	4682      	mov	sl, r0
 800f088:	2101      	movs	r1, #1
 800f08a:	4620      	mov	r0, r4
 800f08c:	f000 fc08 	bl	800f8a0 <__i2b>
 800f090:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f092:	2b00      	cmp	r3, #0
 800f094:	4606      	mov	r6, r0
 800f096:	f340 8083 	ble.w	800f1a0 <_dtoa_r+0x898>
 800f09a:	461a      	mov	r2, r3
 800f09c:	4601      	mov	r1, r0
 800f09e:	4620      	mov	r0, r4
 800f0a0:	f000 fc94 	bl	800f9cc <__pow5mult>
 800f0a4:	9b07      	ldr	r3, [sp, #28]
 800f0a6:	2b01      	cmp	r3, #1
 800f0a8:	4606      	mov	r6, r0
 800f0aa:	dd7c      	ble.n	800f1a6 <_dtoa_r+0x89e>
 800f0ac:	f04f 0800 	mov.w	r8, #0
 800f0b0:	6933      	ldr	r3, [r6, #16]
 800f0b2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f0b6:	6918      	ldr	r0, [r3, #16]
 800f0b8:	f000 fba4 	bl	800f804 <__hi0bits>
 800f0bc:	f1c0 0020 	rsb	r0, r0, #32
 800f0c0:	9b06      	ldr	r3, [sp, #24]
 800f0c2:	4418      	add	r0, r3
 800f0c4:	f010 001f 	ands.w	r0, r0, #31
 800f0c8:	f000 8096 	beq.w	800f1f8 <_dtoa_r+0x8f0>
 800f0cc:	f1c0 0320 	rsb	r3, r0, #32
 800f0d0:	2b04      	cmp	r3, #4
 800f0d2:	f340 8087 	ble.w	800f1e4 <_dtoa_r+0x8dc>
 800f0d6:	9b05      	ldr	r3, [sp, #20]
 800f0d8:	f1c0 001c 	rsb	r0, r0, #28
 800f0dc:	4403      	add	r3, r0
 800f0de:	9305      	str	r3, [sp, #20]
 800f0e0:	9b06      	ldr	r3, [sp, #24]
 800f0e2:	4405      	add	r5, r0
 800f0e4:	4403      	add	r3, r0
 800f0e6:	9306      	str	r3, [sp, #24]
 800f0e8:	9b05      	ldr	r3, [sp, #20]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	dd05      	ble.n	800f0fa <_dtoa_r+0x7f2>
 800f0ee:	4651      	mov	r1, sl
 800f0f0:	461a      	mov	r2, r3
 800f0f2:	4620      	mov	r0, r4
 800f0f4:	f000 fcb8 	bl	800fa68 <__lshift>
 800f0f8:	4682      	mov	sl, r0
 800f0fa:	9b06      	ldr	r3, [sp, #24]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	dd05      	ble.n	800f10c <_dtoa_r+0x804>
 800f100:	4631      	mov	r1, r6
 800f102:	461a      	mov	r2, r3
 800f104:	4620      	mov	r0, r4
 800f106:	f000 fcaf 	bl	800fa68 <__lshift>
 800f10a:	4606      	mov	r6, r0
 800f10c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d074      	beq.n	800f1fc <_dtoa_r+0x8f4>
 800f112:	4631      	mov	r1, r6
 800f114:	4650      	mov	r0, sl
 800f116:	f000 fcf8 	bl	800fb0a <__mcmp>
 800f11a:	2800      	cmp	r0, #0
 800f11c:	da6e      	bge.n	800f1fc <_dtoa_r+0x8f4>
 800f11e:	2300      	movs	r3, #0
 800f120:	4651      	mov	r1, sl
 800f122:	220a      	movs	r2, #10
 800f124:	4620      	mov	r0, r4
 800f126:	f000 fb32 	bl	800f78e <__multadd>
 800f12a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f12c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800f130:	4682      	mov	sl, r0
 800f132:	2b00      	cmp	r3, #0
 800f134:	f000 81a8 	beq.w	800f488 <_dtoa_r+0xb80>
 800f138:	2300      	movs	r3, #0
 800f13a:	4639      	mov	r1, r7
 800f13c:	220a      	movs	r2, #10
 800f13e:	4620      	mov	r0, r4
 800f140:	f000 fb25 	bl	800f78e <__multadd>
 800f144:	9b04      	ldr	r3, [sp, #16]
 800f146:	2b00      	cmp	r3, #0
 800f148:	4607      	mov	r7, r0
 800f14a:	f300 80c8 	bgt.w	800f2de <_dtoa_r+0x9d6>
 800f14e:	9b07      	ldr	r3, [sp, #28]
 800f150:	2b02      	cmp	r3, #2
 800f152:	f340 80c4 	ble.w	800f2de <_dtoa_r+0x9d6>
 800f156:	e059      	b.n	800f20c <_dtoa_r+0x904>
 800f158:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f15a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f15e:	e756      	b.n	800f00e <_dtoa_r+0x706>
 800f160:	9b03      	ldr	r3, [sp, #12]
 800f162:	1e5e      	subs	r6, r3, #1
 800f164:	9b08      	ldr	r3, [sp, #32]
 800f166:	42b3      	cmp	r3, r6
 800f168:	bfbf      	itttt	lt
 800f16a:	9b08      	ldrlt	r3, [sp, #32]
 800f16c:	9608      	strlt	r6, [sp, #32]
 800f16e:	1af2      	sublt	r2, r6, r3
 800f170:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800f172:	bfb6      	itet	lt
 800f174:	189b      	addlt	r3, r3, r2
 800f176:	1b9e      	subge	r6, r3, r6
 800f178:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800f17a:	9b03      	ldr	r3, [sp, #12]
 800f17c:	bfb8      	it	lt
 800f17e:	2600      	movlt	r6, #0
 800f180:	2b00      	cmp	r3, #0
 800f182:	bfb9      	ittee	lt
 800f184:	9b05      	ldrlt	r3, [sp, #20]
 800f186:	9a03      	ldrlt	r2, [sp, #12]
 800f188:	9d05      	ldrge	r5, [sp, #20]
 800f18a:	9b03      	ldrge	r3, [sp, #12]
 800f18c:	bfbc      	itt	lt
 800f18e:	1a9d      	sublt	r5, r3, r2
 800f190:	2300      	movlt	r3, #0
 800f192:	e73e      	b.n	800f012 <_dtoa_r+0x70a>
 800f194:	9e08      	ldr	r6, [sp, #32]
 800f196:	9d05      	ldr	r5, [sp, #20]
 800f198:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f19a:	e745      	b.n	800f028 <_dtoa_r+0x720>
 800f19c:	9a08      	ldr	r2, [sp, #32]
 800f19e:	e76e      	b.n	800f07e <_dtoa_r+0x776>
 800f1a0:	9b07      	ldr	r3, [sp, #28]
 800f1a2:	2b01      	cmp	r3, #1
 800f1a4:	dc19      	bgt.n	800f1da <_dtoa_r+0x8d2>
 800f1a6:	9b00      	ldr	r3, [sp, #0]
 800f1a8:	b9bb      	cbnz	r3, 800f1da <_dtoa_r+0x8d2>
 800f1aa:	9b01      	ldr	r3, [sp, #4]
 800f1ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f1b0:	b99b      	cbnz	r3, 800f1da <_dtoa_r+0x8d2>
 800f1b2:	9b01      	ldr	r3, [sp, #4]
 800f1b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f1b8:	0d1b      	lsrs	r3, r3, #20
 800f1ba:	051b      	lsls	r3, r3, #20
 800f1bc:	b183      	cbz	r3, 800f1e0 <_dtoa_r+0x8d8>
 800f1be:	9b05      	ldr	r3, [sp, #20]
 800f1c0:	3301      	adds	r3, #1
 800f1c2:	9305      	str	r3, [sp, #20]
 800f1c4:	9b06      	ldr	r3, [sp, #24]
 800f1c6:	3301      	adds	r3, #1
 800f1c8:	9306      	str	r3, [sp, #24]
 800f1ca:	f04f 0801 	mov.w	r8, #1
 800f1ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	f47f af6d 	bne.w	800f0b0 <_dtoa_r+0x7a8>
 800f1d6:	2001      	movs	r0, #1
 800f1d8:	e772      	b.n	800f0c0 <_dtoa_r+0x7b8>
 800f1da:	f04f 0800 	mov.w	r8, #0
 800f1de:	e7f6      	b.n	800f1ce <_dtoa_r+0x8c6>
 800f1e0:	4698      	mov	r8, r3
 800f1e2:	e7f4      	b.n	800f1ce <_dtoa_r+0x8c6>
 800f1e4:	d080      	beq.n	800f0e8 <_dtoa_r+0x7e0>
 800f1e6:	9a05      	ldr	r2, [sp, #20]
 800f1e8:	331c      	adds	r3, #28
 800f1ea:	441a      	add	r2, r3
 800f1ec:	9205      	str	r2, [sp, #20]
 800f1ee:	9a06      	ldr	r2, [sp, #24]
 800f1f0:	441a      	add	r2, r3
 800f1f2:	441d      	add	r5, r3
 800f1f4:	4613      	mov	r3, r2
 800f1f6:	e776      	b.n	800f0e6 <_dtoa_r+0x7de>
 800f1f8:	4603      	mov	r3, r0
 800f1fa:	e7f4      	b.n	800f1e6 <_dtoa_r+0x8de>
 800f1fc:	9b03      	ldr	r3, [sp, #12]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	dc36      	bgt.n	800f270 <_dtoa_r+0x968>
 800f202:	9b07      	ldr	r3, [sp, #28]
 800f204:	2b02      	cmp	r3, #2
 800f206:	dd33      	ble.n	800f270 <_dtoa_r+0x968>
 800f208:	9b03      	ldr	r3, [sp, #12]
 800f20a:	9304      	str	r3, [sp, #16]
 800f20c:	9b04      	ldr	r3, [sp, #16]
 800f20e:	b963      	cbnz	r3, 800f22a <_dtoa_r+0x922>
 800f210:	4631      	mov	r1, r6
 800f212:	2205      	movs	r2, #5
 800f214:	4620      	mov	r0, r4
 800f216:	f000 faba 	bl	800f78e <__multadd>
 800f21a:	4601      	mov	r1, r0
 800f21c:	4606      	mov	r6, r0
 800f21e:	4650      	mov	r0, sl
 800f220:	f000 fc73 	bl	800fb0a <__mcmp>
 800f224:	2800      	cmp	r0, #0
 800f226:	f73f adb6 	bgt.w	800ed96 <_dtoa_r+0x48e>
 800f22a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f22c:	9d02      	ldr	r5, [sp, #8]
 800f22e:	ea6f 0b03 	mvn.w	fp, r3
 800f232:	2300      	movs	r3, #0
 800f234:	9303      	str	r3, [sp, #12]
 800f236:	4631      	mov	r1, r6
 800f238:	4620      	mov	r0, r4
 800f23a:	f000 fa91 	bl	800f760 <_Bfree>
 800f23e:	2f00      	cmp	r7, #0
 800f240:	f43f aea6 	beq.w	800ef90 <_dtoa_r+0x688>
 800f244:	9b03      	ldr	r3, [sp, #12]
 800f246:	b12b      	cbz	r3, 800f254 <_dtoa_r+0x94c>
 800f248:	42bb      	cmp	r3, r7
 800f24a:	d003      	beq.n	800f254 <_dtoa_r+0x94c>
 800f24c:	4619      	mov	r1, r3
 800f24e:	4620      	mov	r0, r4
 800f250:	f000 fa86 	bl	800f760 <_Bfree>
 800f254:	4639      	mov	r1, r7
 800f256:	4620      	mov	r0, r4
 800f258:	f000 fa82 	bl	800f760 <_Bfree>
 800f25c:	e698      	b.n	800ef90 <_dtoa_r+0x688>
 800f25e:	2600      	movs	r6, #0
 800f260:	4637      	mov	r7, r6
 800f262:	e7e2      	b.n	800f22a <_dtoa_r+0x922>
 800f264:	46bb      	mov	fp, r7
 800f266:	4637      	mov	r7, r6
 800f268:	e595      	b.n	800ed96 <_dtoa_r+0x48e>
 800f26a:	bf00      	nop
 800f26c:	40240000 	.word	0x40240000
 800f270:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f272:	bb93      	cbnz	r3, 800f2da <_dtoa_r+0x9d2>
 800f274:	9b03      	ldr	r3, [sp, #12]
 800f276:	9304      	str	r3, [sp, #16]
 800f278:	9d02      	ldr	r5, [sp, #8]
 800f27a:	4631      	mov	r1, r6
 800f27c:	4650      	mov	r0, sl
 800f27e:	f7ff fab5 	bl	800e7ec <quorem>
 800f282:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f286:	f805 9b01 	strb.w	r9, [r5], #1
 800f28a:	9b02      	ldr	r3, [sp, #8]
 800f28c:	9a04      	ldr	r2, [sp, #16]
 800f28e:	1aeb      	subs	r3, r5, r3
 800f290:	429a      	cmp	r2, r3
 800f292:	f300 80dc 	bgt.w	800f44e <_dtoa_r+0xb46>
 800f296:	9b02      	ldr	r3, [sp, #8]
 800f298:	2a01      	cmp	r2, #1
 800f29a:	bfac      	ite	ge
 800f29c:	189b      	addge	r3, r3, r2
 800f29e:	3301      	addlt	r3, #1
 800f2a0:	4698      	mov	r8, r3
 800f2a2:	2300      	movs	r3, #0
 800f2a4:	9303      	str	r3, [sp, #12]
 800f2a6:	4651      	mov	r1, sl
 800f2a8:	2201      	movs	r2, #1
 800f2aa:	4620      	mov	r0, r4
 800f2ac:	f000 fbdc 	bl	800fa68 <__lshift>
 800f2b0:	4631      	mov	r1, r6
 800f2b2:	4682      	mov	sl, r0
 800f2b4:	f000 fc29 	bl	800fb0a <__mcmp>
 800f2b8:	2800      	cmp	r0, #0
 800f2ba:	f300 808d 	bgt.w	800f3d8 <_dtoa_r+0xad0>
 800f2be:	d103      	bne.n	800f2c8 <_dtoa_r+0x9c0>
 800f2c0:	f019 0f01 	tst.w	r9, #1
 800f2c4:	f040 8088 	bne.w	800f3d8 <_dtoa_r+0xad0>
 800f2c8:	4645      	mov	r5, r8
 800f2ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f2ce:	2b30      	cmp	r3, #48	; 0x30
 800f2d0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800f2d4:	d1af      	bne.n	800f236 <_dtoa_r+0x92e>
 800f2d6:	4615      	mov	r5, r2
 800f2d8:	e7f7      	b.n	800f2ca <_dtoa_r+0x9c2>
 800f2da:	9b03      	ldr	r3, [sp, #12]
 800f2dc:	9304      	str	r3, [sp, #16]
 800f2de:	2d00      	cmp	r5, #0
 800f2e0:	dd05      	ble.n	800f2ee <_dtoa_r+0x9e6>
 800f2e2:	4639      	mov	r1, r7
 800f2e4:	462a      	mov	r2, r5
 800f2e6:	4620      	mov	r0, r4
 800f2e8:	f000 fbbe 	bl	800fa68 <__lshift>
 800f2ec:	4607      	mov	r7, r0
 800f2ee:	f1b8 0f00 	cmp.w	r8, #0
 800f2f2:	d04c      	beq.n	800f38e <_dtoa_r+0xa86>
 800f2f4:	6879      	ldr	r1, [r7, #4]
 800f2f6:	4620      	mov	r0, r4
 800f2f8:	f000 f9fe 	bl	800f6f8 <_Balloc>
 800f2fc:	693a      	ldr	r2, [r7, #16]
 800f2fe:	3202      	adds	r2, #2
 800f300:	4605      	mov	r5, r0
 800f302:	0092      	lsls	r2, r2, #2
 800f304:	f107 010c 	add.w	r1, r7, #12
 800f308:	300c      	adds	r0, #12
 800f30a:	f7fe fa23 	bl	800d754 <memcpy>
 800f30e:	2201      	movs	r2, #1
 800f310:	4629      	mov	r1, r5
 800f312:	4620      	mov	r0, r4
 800f314:	f000 fba8 	bl	800fa68 <__lshift>
 800f318:	9b00      	ldr	r3, [sp, #0]
 800f31a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800f31e:	9703      	str	r7, [sp, #12]
 800f320:	f003 0301 	and.w	r3, r3, #1
 800f324:	4607      	mov	r7, r0
 800f326:	9305      	str	r3, [sp, #20]
 800f328:	4631      	mov	r1, r6
 800f32a:	4650      	mov	r0, sl
 800f32c:	f7ff fa5e 	bl	800e7ec <quorem>
 800f330:	9903      	ldr	r1, [sp, #12]
 800f332:	4605      	mov	r5, r0
 800f334:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f338:	4650      	mov	r0, sl
 800f33a:	f000 fbe6 	bl	800fb0a <__mcmp>
 800f33e:	463a      	mov	r2, r7
 800f340:	9000      	str	r0, [sp, #0]
 800f342:	4631      	mov	r1, r6
 800f344:	4620      	mov	r0, r4
 800f346:	f000 fbfa 	bl	800fb3e <__mdiff>
 800f34a:	68c3      	ldr	r3, [r0, #12]
 800f34c:	4602      	mov	r2, r0
 800f34e:	bb03      	cbnz	r3, 800f392 <_dtoa_r+0xa8a>
 800f350:	4601      	mov	r1, r0
 800f352:	9006      	str	r0, [sp, #24]
 800f354:	4650      	mov	r0, sl
 800f356:	f000 fbd8 	bl	800fb0a <__mcmp>
 800f35a:	9a06      	ldr	r2, [sp, #24]
 800f35c:	4603      	mov	r3, r0
 800f35e:	4611      	mov	r1, r2
 800f360:	4620      	mov	r0, r4
 800f362:	9306      	str	r3, [sp, #24]
 800f364:	f000 f9fc 	bl	800f760 <_Bfree>
 800f368:	9b06      	ldr	r3, [sp, #24]
 800f36a:	b9a3      	cbnz	r3, 800f396 <_dtoa_r+0xa8e>
 800f36c:	9a07      	ldr	r2, [sp, #28]
 800f36e:	b992      	cbnz	r2, 800f396 <_dtoa_r+0xa8e>
 800f370:	9a05      	ldr	r2, [sp, #20]
 800f372:	b982      	cbnz	r2, 800f396 <_dtoa_r+0xa8e>
 800f374:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f378:	d029      	beq.n	800f3ce <_dtoa_r+0xac6>
 800f37a:	9b00      	ldr	r3, [sp, #0]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	dd01      	ble.n	800f384 <_dtoa_r+0xa7c>
 800f380:	f105 0931 	add.w	r9, r5, #49	; 0x31
 800f384:	f108 0501 	add.w	r5, r8, #1
 800f388:	f888 9000 	strb.w	r9, [r8]
 800f38c:	e753      	b.n	800f236 <_dtoa_r+0x92e>
 800f38e:	4638      	mov	r0, r7
 800f390:	e7c2      	b.n	800f318 <_dtoa_r+0xa10>
 800f392:	2301      	movs	r3, #1
 800f394:	e7e3      	b.n	800f35e <_dtoa_r+0xa56>
 800f396:	9a00      	ldr	r2, [sp, #0]
 800f398:	2a00      	cmp	r2, #0
 800f39a:	db04      	blt.n	800f3a6 <_dtoa_r+0xa9e>
 800f39c:	d125      	bne.n	800f3ea <_dtoa_r+0xae2>
 800f39e:	9a07      	ldr	r2, [sp, #28]
 800f3a0:	bb1a      	cbnz	r2, 800f3ea <_dtoa_r+0xae2>
 800f3a2:	9a05      	ldr	r2, [sp, #20]
 800f3a4:	bb0a      	cbnz	r2, 800f3ea <_dtoa_r+0xae2>
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	ddec      	ble.n	800f384 <_dtoa_r+0xa7c>
 800f3aa:	4651      	mov	r1, sl
 800f3ac:	2201      	movs	r2, #1
 800f3ae:	4620      	mov	r0, r4
 800f3b0:	f000 fb5a 	bl	800fa68 <__lshift>
 800f3b4:	4631      	mov	r1, r6
 800f3b6:	4682      	mov	sl, r0
 800f3b8:	f000 fba7 	bl	800fb0a <__mcmp>
 800f3bc:	2800      	cmp	r0, #0
 800f3be:	dc03      	bgt.n	800f3c8 <_dtoa_r+0xac0>
 800f3c0:	d1e0      	bne.n	800f384 <_dtoa_r+0xa7c>
 800f3c2:	f019 0f01 	tst.w	r9, #1
 800f3c6:	d0dd      	beq.n	800f384 <_dtoa_r+0xa7c>
 800f3c8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f3cc:	d1d8      	bne.n	800f380 <_dtoa_r+0xa78>
 800f3ce:	2339      	movs	r3, #57	; 0x39
 800f3d0:	f888 3000 	strb.w	r3, [r8]
 800f3d4:	f108 0801 	add.w	r8, r8, #1
 800f3d8:	4645      	mov	r5, r8
 800f3da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f3de:	2b39      	cmp	r3, #57	; 0x39
 800f3e0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800f3e4:	d03b      	beq.n	800f45e <_dtoa_r+0xb56>
 800f3e6:	3301      	adds	r3, #1
 800f3e8:	e040      	b.n	800f46c <_dtoa_r+0xb64>
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	f108 0501 	add.w	r5, r8, #1
 800f3f0:	dd05      	ble.n	800f3fe <_dtoa_r+0xaf6>
 800f3f2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f3f6:	d0ea      	beq.n	800f3ce <_dtoa_r+0xac6>
 800f3f8:	f109 0901 	add.w	r9, r9, #1
 800f3fc:	e7c4      	b.n	800f388 <_dtoa_r+0xa80>
 800f3fe:	9b02      	ldr	r3, [sp, #8]
 800f400:	9a04      	ldr	r2, [sp, #16]
 800f402:	f805 9c01 	strb.w	r9, [r5, #-1]
 800f406:	1aeb      	subs	r3, r5, r3
 800f408:	4293      	cmp	r3, r2
 800f40a:	46a8      	mov	r8, r5
 800f40c:	f43f af4b 	beq.w	800f2a6 <_dtoa_r+0x99e>
 800f410:	4651      	mov	r1, sl
 800f412:	2300      	movs	r3, #0
 800f414:	220a      	movs	r2, #10
 800f416:	4620      	mov	r0, r4
 800f418:	f000 f9b9 	bl	800f78e <__multadd>
 800f41c:	9b03      	ldr	r3, [sp, #12]
 800f41e:	9903      	ldr	r1, [sp, #12]
 800f420:	42bb      	cmp	r3, r7
 800f422:	4682      	mov	sl, r0
 800f424:	f04f 0300 	mov.w	r3, #0
 800f428:	f04f 020a 	mov.w	r2, #10
 800f42c:	4620      	mov	r0, r4
 800f42e:	d104      	bne.n	800f43a <_dtoa_r+0xb32>
 800f430:	f000 f9ad 	bl	800f78e <__multadd>
 800f434:	9003      	str	r0, [sp, #12]
 800f436:	4607      	mov	r7, r0
 800f438:	e776      	b.n	800f328 <_dtoa_r+0xa20>
 800f43a:	f000 f9a8 	bl	800f78e <__multadd>
 800f43e:	2300      	movs	r3, #0
 800f440:	9003      	str	r0, [sp, #12]
 800f442:	220a      	movs	r2, #10
 800f444:	4639      	mov	r1, r7
 800f446:	4620      	mov	r0, r4
 800f448:	f000 f9a1 	bl	800f78e <__multadd>
 800f44c:	e7f3      	b.n	800f436 <_dtoa_r+0xb2e>
 800f44e:	4651      	mov	r1, sl
 800f450:	2300      	movs	r3, #0
 800f452:	220a      	movs	r2, #10
 800f454:	4620      	mov	r0, r4
 800f456:	f000 f99a 	bl	800f78e <__multadd>
 800f45a:	4682      	mov	sl, r0
 800f45c:	e70d      	b.n	800f27a <_dtoa_r+0x972>
 800f45e:	9b02      	ldr	r3, [sp, #8]
 800f460:	4293      	cmp	r3, r2
 800f462:	d105      	bne.n	800f470 <_dtoa_r+0xb68>
 800f464:	9a02      	ldr	r2, [sp, #8]
 800f466:	f10b 0b01 	add.w	fp, fp, #1
 800f46a:	2331      	movs	r3, #49	; 0x31
 800f46c:	7013      	strb	r3, [r2, #0]
 800f46e:	e6e2      	b.n	800f236 <_dtoa_r+0x92e>
 800f470:	4615      	mov	r5, r2
 800f472:	e7b2      	b.n	800f3da <_dtoa_r+0xad2>
 800f474:	4b09      	ldr	r3, [pc, #36]	; (800f49c <_dtoa_r+0xb94>)
 800f476:	f7ff baae 	b.w	800e9d6 <_dtoa_r+0xce>
 800f47a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	f47f aa88 	bne.w	800e992 <_dtoa_r+0x8a>
 800f482:	4b07      	ldr	r3, [pc, #28]	; (800f4a0 <_dtoa_r+0xb98>)
 800f484:	f7ff baa7 	b.w	800e9d6 <_dtoa_r+0xce>
 800f488:	9b04      	ldr	r3, [sp, #16]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	f73f aef4 	bgt.w	800f278 <_dtoa_r+0x970>
 800f490:	9b07      	ldr	r3, [sp, #28]
 800f492:	2b02      	cmp	r3, #2
 800f494:	f77f aef0 	ble.w	800f278 <_dtoa_r+0x970>
 800f498:	e6b8      	b.n	800f20c <_dtoa_r+0x904>
 800f49a:	bf00      	nop
 800f49c:	080109cd 	.word	0x080109cd
 800f4a0:	08013029 	.word	0x08013029

0800f4a4 <_malloc_trim_r>:
 800f4a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f4a8:	4f25      	ldr	r7, [pc, #148]	; (800f540 <_malloc_trim_r+0x9c>)
 800f4aa:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800f54c <_malloc_trim_r+0xa8>
 800f4ae:	4689      	mov	r9, r1
 800f4b0:	4606      	mov	r6, r0
 800f4b2:	f7fe f963 	bl	800d77c <__malloc_lock>
 800f4b6:	68bb      	ldr	r3, [r7, #8]
 800f4b8:	685d      	ldr	r5, [r3, #4]
 800f4ba:	f1a8 0411 	sub.w	r4, r8, #17
 800f4be:	f025 0503 	bic.w	r5, r5, #3
 800f4c2:	eba4 0409 	sub.w	r4, r4, r9
 800f4c6:	442c      	add	r4, r5
 800f4c8:	fbb4 f4f8 	udiv	r4, r4, r8
 800f4cc:	3c01      	subs	r4, #1
 800f4ce:	fb08 f404 	mul.w	r4, r8, r4
 800f4d2:	4544      	cmp	r4, r8
 800f4d4:	da05      	bge.n	800f4e2 <_malloc_trim_r+0x3e>
 800f4d6:	4630      	mov	r0, r6
 800f4d8:	f7fe f956 	bl	800d788 <__malloc_unlock>
 800f4dc:	2000      	movs	r0, #0
 800f4de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4e2:	2100      	movs	r1, #0
 800f4e4:	4630      	mov	r0, r6
 800f4e6:	f7fe f955 	bl	800d794 <_sbrk_r>
 800f4ea:	68bb      	ldr	r3, [r7, #8]
 800f4ec:	442b      	add	r3, r5
 800f4ee:	4298      	cmp	r0, r3
 800f4f0:	d1f1      	bne.n	800f4d6 <_malloc_trim_r+0x32>
 800f4f2:	4261      	negs	r1, r4
 800f4f4:	4630      	mov	r0, r6
 800f4f6:	f7fe f94d 	bl	800d794 <_sbrk_r>
 800f4fa:	3001      	adds	r0, #1
 800f4fc:	d110      	bne.n	800f520 <_malloc_trim_r+0x7c>
 800f4fe:	2100      	movs	r1, #0
 800f500:	4630      	mov	r0, r6
 800f502:	f7fe f947 	bl	800d794 <_sbrk_r>
 800f506:	68ba      	ldr	r2, [r7, #8]
 800f508:	1a83      	subs	r3, r0, r2
 800f50a:	2b0f      	cmp	r3, #15
 800f50c:	dde3      	ble.n	800f4d6 <_malloc_trim_r+0x32>
 800f50e:	490d      	ldr	r1, [pc, #52]	; (800f544 <_malloc_trim_r+0xa0>)
 800f510:	6809      	ldr	r1, [r1, #0]
 800f512:	1a40      	subs	r0, r0, r1
 800f514:	490c      	ldr	r1, [pc, #48]	; (800f548 <_malloc_trim_r+0xa4>)
 800f516:	f043 0301 	orr.w	r3, r3, #1
 800f51a:	6008      	str	r0, [r1, #0]
 800f51c:	6053      	str	r3, [r2, #4]
 800f51e:	e7da      	b.n	800f4d6 <_malloc_trim_r+0x32>
 800f520:	68bb      	ldr	r3, [r7, #8]
 800f522:	4a09      	ldr	r2, [pc, #36]	; (800f548 <_malloc_trim_r+0xa4>)
 800f524:	1b2d      	subs	r5, r5, r4
 800f526:	f045 0501 	orr.w	r5, r5, #1
 800f52a:	605d      	str	r5, [r3, #4]
 800f52c:	6813      	ldr	r3, [r2, #0]
 800f52e:	4630      	mov	r0, r6
 800f530:	1b1c      	subs	r4, r3, r4
 800f532:	6014      	str	r4, [r2, #0]
 800f534:	f7fe f928 	bl	800d788 <__malloc_unlock>
 800f538:	2001      	movs	r0, #1
 800f53a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f53e:	bf00      	nop
 800f540:	20000e10 	.word	0x20000e10
 800f544:	20001218 	.word	0x20001218
 800f548:	2000c364 	.word	0x2000c364
 800f54c:	00001000 	.word	0x00001000

0800f550 <_free_r>:
 800f550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f554:	4604      	mov	r4, r0
 800f556:	4688      	mov	r8, r1
 800f558:	2900      	cmp	r1, #0
 800f55a:	f000 80ab 	beq.w	800f6b4 <_free_r+0x164>
 800f55e:	f7fe f90d 	bl	800d77c <__malloc_lock>
 800f562:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800f566:	4d54      	ldr	r5, [pc, #336]	; (800f6b8 <_free_r+0x168>)
 800f568:	f022 0001 	bic.w	r0, r2, #1
 800f56c:	f1a8 0308 	sub.w	r3, r8, #8
 800f570:	181f      	adds	r7, r3, r0
 800f572:	68a9      	ldr	r1, [r5, #8]
 800f574:	687e      	ldr	r6, [r7, #4]
 800f576:	428f      	cmp	r7, r1
 800f578:	f026 0603 	bic.w	r6, r6, #3
 800f57c:	f002 0201 	and.w	r2, r2, #1
 800f580:	d11b      	bne.n	800f5ba <_free_r+0x6a>
 800f582:	4430      	add	r0, r6
 800f584:	b93a      	cbnz	r2, 800f596 <_free_r+0x46>
 800f586:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800f58a:	1a9b      	subs	r3, r3, r2
 800f58c:	4410      	add	r0, r2
 800f58e:	6899      	ldr	r1, [r3, #8]
 800f590:	68da      	ldr	r2, [r3, #12]
 800f592:	60ca      	str	r2, [r1, #12]
 800f594:	6091      	str	r1, [r2, #8]
 800f596:	f040 0201 	orr.w	r2, r0, #1
 800f59a:	605a      	str	r2, [r3, #4]
 800f59c:	60ab      	str	r3, [r5, #8]
 800f59e:	4b47      	ldr	r3, [pc, #284]	; (800f6bc <_free_r+0x16c>)
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	4298      	cmp	r0, r3
 800f5a4:	d304      	bcc.n	800f5b0 <_free_r+0x60>
 800f5a6:	4b46      	ldr	r3, [pc, #280]	; (800f6c0 <_free_r+0x170>)
 800f5a8:	4620      	mov	r0, r4
 800f5aa:	6819      	ldr	r1, [r3, #0]
 800f5ac:	f7ff ff7a 	bl	800f4a4 <_malloc_trim_r>
 800f5b0:	4620      	mov	r0, r4
 800f5b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f5b6:	f7fe b8e7 	b.w	800d788 <__malloc_unlock>
 800f5ba:	607e      	str	r6, [r7, #4]
 800f5bc:	2a00      	cmp	r2, #0
 800f5be:	d139      	bne.n	800f634 <_free_r+0xe4>
 800f5c0:	f858 1c08 	ldr.w	r1, [r8, #-8]
 800f5c4:	1a5b      	subs	r3, r3, r1
 800f5c6:	4408      	add	r0, r1
 800f5c8:	6899      	ldr	r1, [r3, #8]
 800f5ca:	f105 0e08 	add.w	lr, r5, #8
 800f5ce:	4571      	cmp	r1, lr
 800f5d0:	d032      	beq.n	800f638 <_free_r+0xe8>
 800f5d2:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800f5d6:	f8c1 e00c 	str.w	lr, [r1, #12]
 800f5da:	f8ce 1008 	str.w	r1, [lr, #8]
 800f5de:	19b9      	adds	r1, r7, r6
 800f5e0:	6849      	ldr	r1, [r1, #4]
 800f5e2:	07c9      	lsls	r1, r1, #31
 800f5e4:	d40a      	bmi.n	800f5fc <_free_r+0xac>
 800f5e6:	4430      	add	r0, r6
 800f5e8:	68b9      	ldr	r1, [r7, #8]
 800f5ea:	bb3a      	cbnz	r2, 800f63c <_free_r+0xec>
 800f5ec:	4e35      	ldr	r6, [pc, #212]	; (800f6c4 <_free_r+0x174>)
 800f5ee:	42b1      	cmp	r1, r6
 800f5f0:	d124      	bne.n	800f63c <_free_r+0xec>
 800f5f2:	616b      	str	r3, [r5, #20]
 800f5f4:	612b      	str	r3, [r5, #16]
 800f5f6:	2201      	movs	r2, #1
 800f5f8:	60d9      	str	r1, [r3, #12]
 800f5fa:	6099      	str	r1, [r3, #8]
 800f5fc:	f040 0101 	orr.w	r1, r0, #1
 800f600:	6059      	str	r1, [r3, #4]
 800f602:	5018      	str	r0, [r3, r0]
 800f604:	2a00      	cmp	r2, #0
 800f606:	d1d3      	bne.n	800f5b0 <_free_r+0x60>
 800f608:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800f60c:	d21a      	bcs.n	800f644 <_free_r+0xf4>
 800f60e:	08c0      	lsrs	r0, r0, #3
 800f610:	1081      	asrs	r1, r0, #2
 800f612:	2201      	movs	r2, #1
 800f614:	408a      	lsls	r2, r1
 800f616:	6869      	ldr	r1, [r5, #4]
 800f618:	3001      	adds	r0, #1
 800f61a:	430a      	orrs	r2, r1
 800f61c:	606a      	str	r2, [r5, #4]
 800f61e:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800f622:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800f626:	6099      	str	r1, [r3, #8]
 800f628:	3a08      	subs	r2, #8
 800f62a:	60da      	str	r2, [r3, #12]
 800f62c:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 800f630:	60cb      	str	r3, [r1, #12]
 800f632:	e7bd      	b.n	800f5b0 <_free_r+0x60>
 800f634:	2200      	movs	r2, #0
 800f636:	e7d2      	b.n	800f5de <_free_r+0x8e>
 800f638:	2201      	movs	r2, #1
 800f63a:	e7d0      	b.n	800f5de <_free_r+0x8e>
 800f63c:	68fe      	ldr	r6, [r7, #12]
 800f63e:	60ce      	str	r6, [r1, #12]
 800f640:	60b1      	str	r1, [r6, #8]
 800f642:	e7db      	b.n	800f5fc <_free_r+0xac>
 800f644:	0a42      	lsrs	r2, r0, #9
 800f646:	2a04      	cmp	r2, #4
 800f648:	d813      	bhi.n	800f672 <_free_r+0x122>
 800f64a:	0982      	lsrs	r2, r0, #6
 800f64c:	3238      	adds	r2, #56	; 0x38
 800f64e:	1c51      	adds	r1, r2, #1
 800f650:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800f654:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800f658:	428e      	cmp	r6, r1
 800f65a:	d124      	bne.n	800f6a6 <_free_r+0x156>
 800f65c:	2001      	movs	r0, #1
 800f65e:	1092      	asrs	r2, r2, #2
 800f660:	fa00 f202 	lsl.w	r2, r0, r2
 800f664:	6868      	ldr	r0, [r5, #4]
 800f666:	4302      	orrs	r2, r0
 800f668:	606a      	str	r2, [r5, #4]
 800f66a:	60de      	str	r6, [r3, #12]
 800f66c:	6099      	str	r1, [r3, #8]
 800f66e:	60b3      	str	r3, [r6, #8]
 800f670:	e7de      	b.n	800f630 <_free_r+0xe0>
 800f672:	2a14      	cmp	r2, #20
 800f674:	d801      	bhi.n	800f67a <_free_r+0x12a>
 800f676:	325b      	adds	r2, #91	; 0x5b
 800f678:	e7e9      	b.n	800f64e <_free_r+0xfe>
 800f67a:	2a54      	cmp	r2, #84	; 0x54
 800f67c:	d802      	bhi.n	800f684 <_free_r+0x134>
 800f67e:	0b02      	lsrs	r2, r0, #12
 800f680:	326e      	adds	r2, #110	; 0x6e
 800f682:	e7e4      	b.n	800f64e <_free_r+0xfe>
 800f684:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800f688:	d802      	bhi.n	800f690 <_free_r+0x140>
 800f68a:	0bc2      	lsrs	r2, r0, #15
 800f68c:	3277      	adds	r2, #119	; 0x77
 800f68e:	e7de      	b.n	800f64e <_free_r+0xfe>
 800f690:	f240 5154 	movw	r1, #1364	; 0x554
 800f694:	428a      	cmp	r2, r1
 800f696:	bf9a      	itte	ls
 800f698:	0c82      	lsrls	r2, r0, #18
 800f69a:	327c      	addls	r2, #124	; 0x7c
 800f69c:	227e      	movhi	r2, #126	; 0x7e
 800f69e:	e7d6      	b.n	800f64e <_free_r+0xfe>
 800f6a0:	6889      	ldr	r1, [r1, #8]
 800f6a2:	428e      	cmp	r6, r1
 800f6a4:	d004      	beq.n	800f6b0 <_free_r+0x160>
 800f6a6:	684a      	ldr	r2, [r1, #4]
 800f6a8:	f022 0203 	bic.w	r2, r2, #3
 800f6ac:	4290      	cmp	r0, r2
 800f6ae:	d3f7      	bcc.n	800f6a0 <_free_r+0x150>
 800f6b0:	68ce      	ldr	r6, [r1, #12]
 800f6b2:	e7da      	b.n	800f66a <_free_r+0x11a>
 800f6b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6b8:	20000e10 	.word	0x20000e10
 800f6bc:	2000121c 	.word	0x2000121c
 800f6c0:	2000c394 	.word	0x2000c394
 800f6c4:	20000e18 	.word	0x20000e18

0800f6c8 <_localeconv_r>:
 800f6c8:	4b04      	ldr	r3, [pc, #16]	; (800f6dc <_localeconv_r+0x14>)
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	6a18      	ldr	r0, [r3, #32]
 800f6ce:	4b04      	ldr	r3, [pc, #16]	; (800f6e0 <_localeconv_r+0x18>)
 800f6d0:	2800      	cmp	r0, #0
 800f6d2:	bf08      	it	eq
 800f6d4:	4618      	moveq	r0, r3
 800f6d6:	30f0      	adds	r0, #240	; 0xf0
 800f6d8:	4770      	bx	lr
 800f6da:	bf00      	nop
 800f6dc:	20000d1c 	.word	0x20000d1c
 800f6e0:	20001220 	.word	0x20001220

0800f6e4 <__retarget_lock_acquire_recursive>:
 800f6e4:	4770      	bx	lr

0800f6e6 <__retarget_lock_release_recursive>:
 800f6e6:	4770      	bx	lr

0800f6e8 <malloc>:
 800f6e8:	4b02      	ldr	r3, [pc, #8]	; (800f6f4 <malloc+0xc>)
 800f6ea:	4601      	mov	r1, r0
 800f6ec:	6818      	ldr	r0, [r3, #0]
 800f6ee:	f7fd be23 	b.w	800d338 <_malloc_r>
 800f6f2:	bf00      	nop
 800f6f4:	20000d1c 	.word	0x20000d1c

0800f6f8 <_Balloc>:
 800f6f8:	b570      	push	{r4, r5, r6, lr}
 800f6fa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f6fc:	4604      	mov	r4, r0
 800f6fe:	460e      	mov	r6, r1
 800f700:	b93d      	cbnz	r5, 800f712 <_Balloc+0x1a>
 800f702:	2010      	movs	r0, #16
 800f704:	f7ff fff0 	bl	800f6e8 <malloc>
 800f708:	6260      	str	r0, [r4, #36]	; 0x24
 800f70a:	6045      	str	r5, [r0, #4]
 800f70c:	6085      	str	r5, [r0, #8]
 800f70e:	6005      	str	r5, [r0, #0]
 800f710:	60c5      	str	r5, [r0, #12]
 800f712:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800f714:	68eb      	ldr	r3, [r5, #12]
 800f716:	b183      	cbz	r3, 800f73a <_Balloc+0x42>
 800f718:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f71a:	68db      	ldr	r3, [r3, #12]
 800f71c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800f720:	b9b8      	cbnz	r0, 800f752 <_Balloc+0x5a>
 800f722:	2101      	movs	r1, #1
 800f724:	fa01 f506 	lsl.w	r5, r1, r6
 800f728:	1d6a      	adds	r2, r5, #5
 800f72a:	0092      	lsls	r2, r2, #2
 800f72c:	4620      	mov	r0, r4
 800f72e:	f7fd fdac 	bl	800d28a <_calloc_r>
 800f732:	b160      	cbz	r0, 800f74e <_Balloc+0x56>
 800f734:	6046      	str	r6, [r0, #4]
 800f736:	6085      	str	r5, [r0, #8]
 800f738:	e00e      	b.n	800f758 <_Balloc+0x60>
 800f73a:	2221      	movs	r2, #33	; 0x21
 800f73c:	2104      	movs	r1, #4
 800f73e:	4620      	mov	r0, r4
 800f740:	f7fd fda3 	bl	800d28a <_calloc_r>
 800f744:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f746:	60e8      	str	r0, [r5, #12]
 800f748:	68db      	ldr	r3, [r3, #12]
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d1e4      	bne.n	800f718 <_Balloc+0x20>
 800f74e:	2000      	movs	r0, #0
 800f750:	bd70      	pop	{r4, r5, r6, pc}
 800f752:	6802      	ldr	r2, [r0, #0]
 800f754:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800f758:	2300      	movs	r3, #0
 800f75a:	6103      	str	r3, [r0, #16]
 800f75c:	60c3      	str	r3, [r0, #12]
 800f75e:	bd70      	pop	{r4, r5, r6, pc}

0800f760 <_Bfree>:
 800f760:	b570      	push	{r4, r5, r6, lr}
 800f762:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800f764:	4606      	mov	r6, r0
 800f766:	460d      	mov	r5, r1
 800f768:	b93c      	cbnz	r4, 800f77a <_Bfree+0x1a>
 800f76a:	2010      	movs	r0, #16
 800f76c:	f7ff ffbc 	bl	800f6e8 <malloc>
 800f770:	6270      	str	r0, [r6, #36]	; 0x24
 800f772:	6044      	str	r4, [r0, #4]
 800f774:	6084      	str	r4, [r0, #8]
 800f776:	6004      	str	r4, [r0, #0]
 800f778:	60c4      	str	r4, [r0, #12]
 800f77a:	b13d      	cbz	r5, 800f78c <_Bfree+0x2c>
 800f77c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f77e:	686a      	ldr	r2, [r5, #4]
 800f780:	68db      	ldr	r3, [r3, #12]
 800f782:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f786:	6029      	str	r1, [r5, #0]
 800f788:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800f78c:	bd70      	pop	{r4, r5, r6, pc}

0800f78e <__multadd>:
 800f78e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f792:	690d      	ldr	r5, [r1, #16]
 800f794:	461f      	mov	r7, r3
 800f796:	4606      	mov	r6, r0
 800f798:	460c      	mov	r4, r1
 800f79a:	f101 0e14 	add.w	lr, r1, #20
 800f79e:	2300      	movs	r3, #0
 800f7a0:	f8de 0000 	ldr.w	r0, [lr]
 800f7a4:	b281      	uxth	r1, r0
 800f7a6:	fb02 7101 	mla	r1, r2, r1, r7
 800f7aa:	0c0f      	lsrs	r7, r1, #16
 800f7ac:	0c00      	lsrs	r0, r0, #16
 800f7ae:	fb02 7000 	mla	r0, r2, r0, r7
 800f7b2:	b289      	uxth	r1, r1
 800f7b4:	3301      	adds	r3, #1
 800f7b6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800f7ba:	429d      	cmp	r5, r3
 800f7bc:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800f7c0:	f84e 1b04 	str.w	r1, [lr], #4
 800f7c4:	dcec      	bgt.n	800f7a0 <__multadd+0x12>
 800f7c6:	b1d7      	cbz	r7, 800f7fe <__multadd+0x70>
 800f7c8:	68a3      	ldr	r3, [r4, #8]
 800f7ca:	429d      	cmp	r5, r3
 800f7cc:	db12      	blt.n	800f7f4 <__multadd+0x66>
 800f7ce:	6861      	ldr	r1, [r4, #4]
 800f7d0:	4630      	mov	r0, r6
 800f7d2:	3101      	adds	r1, #1
 800f7d4:	f7ff ff90 	bl	800f6f8 <_Balloc>
 800f7d8:	6922      	ldr	r2, [r4, #16]
 800f7da:	3202      	adds	r2, #2
 800f7dc:	f104 010c 	add.w	r1, r4, #12
 800f7e0:	4680      	mov	r8, r0
 800f7e2:	0092      	lsls	r2, r2, #2
 800f7e4:	300c      	adds	r0, #12
 800f7e6:	f7fd ffb5 	bl	800d754 <memcpy>
 800f7ea:	4621      	mov	r1, r4
 800f7ec:	4630      	mov	r0, r6
 800f7ee:	f7ff ffb7 	bl	800f760 <_Bfree>
 800f7f2:	4644      	mov	r4, r8
 800f7f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f7f8:	3501      	adds	r5, #1
 800f7fa:	615f      	str	r7, [r3, #20]
 800f7fc:	6125      	str	r5, [r4, #16]
 800f7fe:	4620      	mov	r0, r4
 800f800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f804 <__hi0bits>:
 800f804:	0c02      	lsrs	r2, r0, #16
 800f806:	0412      	lsls	r2, r2, #16
 800f808:	4603      	mov	r3, r0
 800f80a:	b9b2      	cbnz	r2, 800f83a <__hi0bits+0x36>
 800f80c:	0403      	lsls	r3, r0, #16
 800f80e:	2010      	movs	r0, #16
 800f810:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800f814:	bf04      	itt	eq
 800f816:	021b      	lsleq	r3, r3, #8
 800f818:	3008      	addeq	r0, #8
 800f81a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800f81e:	bf04      	itt	eq
 800f820:	011b      	lsleq	r3, r3, #4
 800f822:	3004      	addeq	r0, #4
 800f824:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800f828:	bf04      	itt	eq
 800f82a:	009b      	lsleq	r3, r3, #2
 800f82c:	3002      	addeq	r0, #2
 800f82e:	2b00      	cmp	r3, #0
 800f830:	db06      	blt.n	800f840 <__hi0bits+0x3c>
 800f832:	005b      	lsls	r3, r3, #1
 800f834:	d503      	bpl.n	800f83e <__hi0bits+0x3a>
 800f836:	3001      	adds	r0, #1
 800f838:	4770      	bx	lr
 800f83a:	2000      	movs	r0, #0
 800f83c:	e7e8      	b.n	800f810 <__hi0bits+0xc>
 800f83e:	2020      	movs	r0, #32
 800f840:	4770      	bx	lr

0800f842 <__lo0bits>:
 800f842:	6803      	ldr	r3, [r0, #0]
 800f844:	f013 0207 	ands.w	r2, r3, #7
 800f848:	4601      	mov	r1, r0
 800f84a:	d00b      	beq.n	800f864 <__lo0bits+0x22>
 800f84c:	07da      	lsls	r2, r3, #31
 800f84e:	d423      	bmi.n	800f898 <__lo0bits+0x56>
 800f850:	0798      	lsls	r0, r3, #30
 800f852:	bf49      	itett	mi
 800f854:	085b      	lsrmi	r3, r3, #1
 800f856:	089b      	lsrpl	r3, r3, #2
 800f858:	2001      	movmi	r0, #1
 800f85a:	600b      	strmi	r3, [r1, #0]
 800f85c:	bf5c      	itt	pl
 800f85e:	600b      	strpl	r3, [r1, #0]
 800f860:	2002      	movpl	r0, #2
 800f862:	4770      	bx	lr
 800f864:	b298      	uxth	r0, r3
 800f866:	b9a8      	cbnz	r0, 800f894 <__lo0bits+0x52>
 800f868:	0c1b      	lsrs	r3, r3, #16
 800f86a:	2010      	movs	r0, #16
 800f86c:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f870:	bf04      	itt	eq
 800f872:	0a1b      	lsreq	r3, r3, #8
 800f874:	3008      	addeq	r0, #8
 800f876:	071a      	lsls	r2, r3, #28
 800f878:	bf04      	itt	eq
 800f87a:	091b      	lsreq	r3, r3, #4
 800f87c:	3004      	addeq	r0, #4
 800f87e:	079a      	lsls	r2, r3, #30
 800f880:	bf04      	itt	eq
 800f882:	089b      	lsreq	r3, r3, #2
 800f884:	3002      	addeq	r0, #2
 800f886:	07da      	lsls	r2, r3, #31
 800f888:	d402      	bmi.n	800f890 <__lo0bits+0x4e>
 800f88a:	085b      	lsrs	r3, r3, #1
 800f88c:	d006      	beq.n	800f89c <__lo0bits+0x5a>
 800f88e:	3001      	adds	r0, #1
 800f890:	600b      	str	r3, [r1, #0]
 800f892:	4770      	bx	lr
 800f894:	4610      	mov	r0, r2
 800f896:	e7e9      	b.n	800f86c <__lo0bits+0x2a>
 800f898:	2000      	movs	r0, #0
 800f89a:	4770      	bx	lr
 800f89c:	2020      	movs	r0, #32
 800f89e:	4770      	bx	lr

0800f8a0 <__i2b>:
 800f8a0:	b510      	push	{r4, lr}
 800f8a2:	460c      	mov	r4, r1
 800f8a4:	2101      	movs	r1, #1
 800f8a6:	f7ff ff27 	bl	800f6f8 <_Balloc>
 800f8aa:	2201      	movs	r2, #1
 800f8ac:	6144      	str	r4, [r0, #20]
 800f8ae:	6102      	str	r2, [r0, #16]
 800f8b0:	bd10      	pop	{r4, pc}

0800f8b2 <__multiply>:
 800f8b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8b6:	4614      	mov	r4, r2
 800f8b8:	690a      	ldr	r2, [r1, #16]
 800f8ba:	6923      	ldr	r3, [r4, #16]
 800f8bc:	429a      	cmp	r2, r3
 800f8be:	bfb8      	it	lt
 800f8c0:	460b      	movlt	r3, r1
 800f8c2:	4689      	mov	r9, r1
 800f8c4:	bfbc      	itt	lt
 800f8c6:	46a1      	movlt	r9, r4
 800f8c8:	461c      	movlt	r4, r3
 800f8ca:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f8ce:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800f8d2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800f8d6:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f8da:	eb07 060a 	add.w	r6, r7, sl
 800f8de:	429e      	cmp	r6, r3
 800f8e0:	bfc8      	it	gt
 800f8e2:	3101      	addgt	r1, #1
 800f8e4:	f7ff ff08 	bl	800f6f8 <_Balloc>
 800f8e8:	f100 0514 	add.w	r5, r0, #20
 800f8ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f8f0:	462b      	mov	r3, r5
 800f8f2:	2200      	movs	r2, #0
 800f8f4:	4543      	cmp	r3, r8
 800f8f6:	d316      	bcc.n	800f926 <__multiply+0x74>
 800f8f8:	f104 0214 	add.w	r2, r4, #20
 800f8fc:	f109 0114 	add.w	r1, r9, #20
 800f900:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 800f904:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800f908:	9301      	str	r3, [sp, #4]
 800f90a:	9c01      	ldr	r4, [sp, #4]
 800f90c:	4294      	cmp	r4, r2
 800f90e:	4613      	mov	r3, r2
 800f910:	d80c      	bhi.n	800f92c <__multiply+0x7a>
 800f912:	2e00      	cmp	r6, #0
 800f914:	dd03      	ble.n	800f91e <__multiply+0x6c>
 800f916:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d054      	beq.n	800f9c8 <__multiply+0x116>
 800f91e:	6106      	str	r6, [r0, #16]
 800f920:	b003      	add	sp, #12
 800f922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f926:	f843 2b04 	str.w	r2, [r3], #4
 800f92a:	e7e3      	b.n	800f8f4 <__multiply+0x42>
 800f92c:	f8b3 a000 	ldrh.w	sl, [r3]
 800f930:	3204      	adds	r2, #4
 800f932:	f1ba 0f00 	cmp.w	sl, #0
 800f936:	d020      	beq.n	800f97a <__multiply+0xc8>
 800f938:	46ae      	mov	lr, r5
 800f93a:	4689      	mov	r9, r1
 800f93c:	f04f 0c00 	mov.w	ip, #0
 800f940:	f859 4b04 	ldr.w	r4, [r9], #4
 800f944:	f8be b000 	ldrh.w	fp, [lr]
 800f948:	b2a3      	uxth	r3, r4
 800f94a:	fb0a b303 	mla	r3, sl, r3, fp
 800f94e:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 800f952:	f8de 4000 	ldr.w	r4, [lr]
 800f956:	4463      	add	r3, ip
 800f958:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800f95c:	fb0a c40b 	mla	r4, sl, fp, ip
 800f960:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800f964:	b29b      	uxth	r3, r3
 800f966:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800f96a:	454f      	cmp	r7, r9
 800f96c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800f970:	f84e 3b04 	str.w	r3, [lr], #4
 800f974:	d8e4      	bhi.n	800f940 <__multiply+0x8e>
 800f976:	f8ce c000 	str.w	ip, [lr]
 800f97a:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 800f97e:	f1b9 0f00 	cmp.w	r9, #0
 800f982:	d01f      	beq.n	800f9c4 <__multiply+0x112>
 800f984:	682b      	ldr	r3, [r5, #0]
 800f986:	46ae      	mov	lr, r5
 800f988:	468c      	mov	ip, r1
 800f98a:	f04f 0a00 	mov.w	sl, #0
 800f98e:	f8bc 4000 	ldrh.w	r4, [ip]
 800f992:	f8be b002 	ldrh.w	fp, [lr, #2]
 800f996:	fb09 b404 	mla	r4, r9, r4, fp
 800f99a:	44a2      	add	sl, r4
 800f99c:	b29b      	uxth	r3, r3
 800f99e:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 800f9a2:	f84e 3b04 	str.w	r3, [lr], #4
 800f9a6:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f9aa:	f8be 4000 	ldrh.w	r4, [lr]
 800f9ae:	0c1b      	lsrs	r3, r3, #16
 800f9b0:	fb09 4303 	mla	r3, r9, r3, r4
 800f9b4:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 800f9b8:	4567      	cmp	r7, ip
 800f9ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f9be:	d8e6      	bhi.n	800f98e <__multiply+0xdc>
 800f9c0:	f8ce 3000 	str.w	r3, [lr]
 800f9c4:	3504      	adds	r5, #4
 800f9c6:	e7a0      	b.n	800f90a <__multiply+0x58>
 800f9c8:	3e01      	subs	r6, #1
 800f9ca:	e7a2      	b.n	800f912 <__multiply+0x60>

0800f9cc <__pow5mult>:
 800f9cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f9d0:	4615      	mov	r5, r2
 800f9d2:	f012 0203 	ands.w	r2, r2, #3
 800f9d6:	4606      	mov	r6, r0
 800f9d8:	460f      	mov	r7, r1
 800f9da:	d007      	beq.n	800f9ec <__pow5mult+0x20>
 800f9dc:	3a01      	subs	r2, #1
 800f9de:	4c21      	ldr	r4, [pc, #132]	; (800fa64 <__pow5mult+0x98>)
 800f9e0:	2300      	movs	r3, #0
 800f9e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f9e6:	f7ff fed2 	bl	800f78e <__multadd>
 800f9ea:	4607      	mov	r7, r0
 800f9ec:	10ad      	asrs	r5, r5, #2
 800f9ee:	d035      	beq.n	800fa5c <__pow5mult+0x90>
 800f9f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f9f2:	b93c      	cbnz	r4, 800fa04 <__pow5mult+0x38>
 800f9f4:	2010      	movs	r0, #16
 800f9f6:	f7ff fe77 	bl	800f6e8 <malloc>
 800f9fa:	6270      	str	r0, [r6, #36]	; 0x24
 800f9fc:	6044      	str	r4, [r0, #4]
 800f9fe:	6084      	str	r4, [r0, #8]
 800fa00:	6004      	str	r4, [r0, #0]
 800fa02:	60c4      	str	r4, [r0, #12]
 800fa04:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fa08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fa0c:	b94c      	cbnz	r4, 800fa22 <__pow5mult+0x56>
 800fa0e:	f240 2171 	movw	r1, #625	; 0x271
 800fa12:	4630      	mov	r0, r6
 800fa14:	f7ff ff44 	bl	800f8a0 <__i2b>
 800fa18:	2300      	movs	r3, #0
 800fa1a:	f8c8 0008 	str.w	r0, [r8, #8]
 800fa1e:	4604      	mov	r4, r0
 800fa20:	6003      	str	r3, [r0, #0]
 800fa22:	f04f 0800 	mov.w	r8, #0
 800fa26:	07eb      	lsls	r3, r5, #31
 800fa28:	d50a      	bpl.n	800fa40 <__pow5mult+0x74>
 800fa2a:	4639      	mov	r1, r7
 800fa2c:	4622      	mov	r2, r4
 800fa2e:	4630      	mov	r0, r6
 800fa30:	f7ff ff3f 	bl	800f8b2 <__multiply>
 800fa34:	4639      	mov	r1, r7
 800fa36:	4681      	mov	r9, r0
 800fa38:	4630      	mov	r0, r6
 800fa3a:	f7ff fe91 	bl	800f760 <_Bfree>
 800fa3e:	464f      	mov	r7, r9
 800fa40:	106d      	asrs	r5, r5, #1
 800fa42:	d00b      	beq.n	800fa5c <__pow5mult+0x90>
 800fa44:	6820      	ldr	r0, [r4, #0]
 800fa46:	b938      	cbnz	r0, 800fa58 <__pow5mult+0x8c>
 800fa48:	4622      	mov	r2, r4
 800fa4a:	4621      	mov	r1, r4
 800fa4c:	4630      	mov	r0, r6
 800fa4e:	f7ff ff30 	bl	800f8b2 <__multiply>
 800fa52:	6020      	str	r0, [r4, #0]
 800fa54:	f8c0 8000 	str.w	r8, [r0]
 800fa58:	4604      	mov	r4, r0
 800fa5a:	e7e4      	b.n	800fa26 <__pow5mult+0x5a>
 800fa5c:	4638      	mov	r0, r7
 800fa5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa62:	bf00      	nop
 800fa64:	08013128 	.word	0x08013128

0800fa68 <__lshift>:
 800fa68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa6c:	460c      	mov	r4, r1
 800fa6e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fa72:	6923      	ldr	r3, [r4, #16]
 800fa74:	6849      	ldr	r1, [r1, #4]
 800fa76:	eb0a 0903 	add.w	r9, sl, r3
 800fa7a:	68a3      	ldr	r3, [r4, #8]
 800fa7c:	4607      	mov	r7, r0
 800fa7e:	4616      	mov	r6, r2
 800fa80:	f109 0501 	add.w	r5, r9, #1
 800fa84:	42ab      	cmp	r3, r5
 800fa86:	db31      	blt.n	800faec <__lshift+0x84>
 800fa88:	4638      	mov	r0, r7
 800fa8a:	f7ff fe35 	bl	800f6f8 <_Balloc>
 800fa8e:	2200      	movs	r2, #0
 800fa90:	4680      	mov	r8, r0
 800fa92:	f100 0314 	add.w	r3, r0, #20
 800fa96:	4611      	mov	r1, r2
 800fa98:	4552      	cmp	r2, sl
 800fa9a:	db2a      	blt.n	800faf2 <__lshift+0x8a>
 800fa9c:	6920      	ldr	r0, [r4, #16]
 800fa9e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800faa2:	f104 0114 	add.w	r1, r4, #20
 800faa6:	f016 021f 	ands.w	r2, r6, #31
 800faaa:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800faae:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 800fab2:	d022      	beq.n	800fafa <__lshift+0x92>
 800fab4:	f1c2 0c20 	rsb	ip, r2, #32
 800fab8:	2000      	movs	r0, #0
 800faba:	680e      	ldr	r6, [r1, #0]
 800fabc:	4096      	lsls	r6, r2
 800fabe:	4330      	orrs	r0, r6
 800fac0:	f843 0b04 	str.w	r0, [r3], #4
 800fac4:	f851 0b04 	ldr.w	r0, [r1], #4
 800fac8:	458e      	cmp	lr, r1
 800faca:	fa20 f00c 	lsr.w	r0, r0, ip
 800face:	d8f4      	bhi.n	800faba <__lshift+0x52>
 800fad0:	6018      	str	r0, [r3, #0]
 800fad2:	b108      	cbz	r0, 800fad8 <__lshift+0x70>
 800fad4:	f109 0502 	add.w	r5, r9, #2
 800fad8:	3d01      	subs	r5, #1
 800fada:	4638      	mov	r0, r7
 800fadc:	f8c8 5010 	str.w	r5, [r8, #16]
 800fae0:	4621      	mov	r1, r4
 800fae2:	f7ff fe3d 	bl	800f760 <_Bfree>
 800fae6:	4640      	mov	r0, r8
 800fae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800faec:	3101      	adds	r1, #1
 800faee:	005b      	lsls	r3, r3, #1
 800faf0:	e7c8      	b.n	800fa84 <__lshift+0x1c>
 800faf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800faf6:	3201      	adds	r2, #1
 800faf8:	e7ce      	b.n	800fa98 <__lshift+0x30>
 800fafa:	3b04      	subs	r3, #4
 800fafc:	f851 2b04 	ldr.w	r2, [r1], #4
 800fb00:	f843 2f04 	str.w	r2, [r3, #4]!
 800fb04:	458e      	cmp	lr, r1
 800fb06:	d8f9      	bhi.n	800fafc <__lshift+0x94>
 800fb08:	e7e6      	b.n	800fad8 <__lshift+0x70>

0800fb0a <__mcmp>:
 800fb0a:	6903      	ldr	r3, [r0, #16]
 800fb0c:	690a      	ldr	r2, [r1, #16]
 800fb0e:	1a9b      	subs	r3, r3, r2
 800fb10:	b530      	push	{r4, r5, lr}
 800fb12:	d10c      	bne.n	800fb2e <__mcmp+0x24>
 800fb14:	0092      	lsls	r2, r2, #2
 800fb16:	3014      	adds	r0, #20
 800fb18:	3114      	adds	r1, #20
 800fb1a:	1884      	adds	r4, r0, r2
 800fb1c:	4411      	add	r1, r2
 800fb1e:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800fb22:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800fb26:	4295      	cmp	r5, r2
 800fb28:	d003      	beq.n	800fb32 <__mcmp+0x28>
 800fb2a:	d305      	bcc.n	800fb38 <__mcmp+0x2e>
 800fb2c:	2301      	movs	r3, #1
 800fb2e:	4618      	mov	r0, r3
 800fb30:	bd30      	pop	{r4, r5, pc}
 800fb32:	42a0      	cmp	r0, r4
 800fb34:	d3f3      	bcc.n	800fb1e <__mcmp+0x14>
 800fb36:	e7fa      	b.n	800fb2e <__mcmp+0x24>
 800fb38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fb3c:	e7f7      	b.n	800fb2e <__mcmp+0x24>

0800fb3e <__mdiff>:
 800fb3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb42:	460d      	mov	r5, r1
 800fb44:	4607      	mov	r7, r0
 800fb46:	4611      	mov	r1, r2
 800fb48:	4628      	mov	r0, r5
 800fb4a:	4614      	mov	r4, r2
 800fb4c:	f7ff ffdd 	bl	800fb0a <__mcmp>
 800fb50:	1e06      	subs	r6, r0, #0
 800fb52:	d108      	bne.n	800fb66 <__mdiff+0x28>
 800fb54:	4631      	mov	r1, r6
 800fb56:	4638      	mov	r0, r7
 800fb58:	f7ff fdce 	bl	800f6f8 <_Balloc>
 800fb5c:	2301      	movs	r3, #1
 800fb5e:	6103      	str	r3, [r0, #16]
 800fb60:	6146      	str	r6, [r0, #20]
 800fb62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb66:	bfa4      	itt	ge
 800fb68:	4623      	movge	r3, r4
 800fb6a:	462c      	movge	r4, r5
 800fb6c:	4638      	mov	r0, r7
 800fb6e:	6861      	ldr	r1, [r4, #4]
 800fb70:	bfa6      	itte	ge
 800fb72:	461d      	movge	r5, r3
 800fb74:	2600      	movge	r6, #0
 800fb76:	2601      	movlt	r6, #1
 800fb78:	f7ff fdbe 	bl	800f6f8 <_Balloc>
 800fb7c:	692b      	ldr	r3, [r5, #16]
 800fb7e:	60c6      	str	r6, [r0, #12]
 800fb80:	6926      	ldr	r6, [r4, #16]
 800fb82:	f105 0914 	add.w	r9, r5, #20
 800fb86:	f104 0214 	add.w	r2, r4, #20
 800fb8a:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800fb8e:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800fb92:	f100 0514 	add.w	r5, r0, #20
 800fb96:	f04f 0c00 	mov.w	ip, #0
 800fb9a:	f852 ab04 	ldr.w	sl, [r2], #4
 800fb9e:	f859 4b04 	ldr.w	r4, [r9], #4
 800fba2:	fa1c f18a 	uxtah	r1, ip, sl
 800fba6:	b2a3      	uxth	r3, r4
 800fba8:	1ac9      	subs	r1, r1, r3
 800fbaa:	0c23      	lsrs	r3, r4, #16
 800fbac:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800fbb0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800fbb4:	b289      	uxth	r1, r1
 800fbb6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800fbba:	45c8      	cmp	r8, r9
 800fbbc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800fbc0:	4696      	mov	lr, r2
 800fbc2:	f845 3b04 	str.w	r3, [r5], #4
 800fbc6:	d8e8      	bhi.n	800fb9a <__mdiff+0x5c>
 800fbc8:	45be      	cmp	lr, r7
 800fbca:	d305      	bcc.n	800fbd8 <__mdiff+0x9a>
 800fbcc:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800fbd0:	b18b      	cbz	r3, 800fbf6 <__mdiff+0xb8>
 800fbd2:	6106      	str	r6, [r0, #16]
 800fbd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbd8:	f85e 1b04 	ldr.w	r1, [lr], #4
 800fbdc:	fa1c f381 	uxtah	r3, ip, r1
 800fbe0:	141a      	asrs	r2, r3, #16
 800fbe2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800fbe6:	b29b      	uxth	r3, r3
 800fbe8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fbec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800fbf0:	f845 3b04 	str.w	r3, [r5], #4
 800fbf4:	e7e8      	b.n	800fbc8 <__mdiff+0x8a>
 800fbf6:	3e01      	subs	r6, #1
 800fbf8:	e7e8      	b.n	800fbcc <__mdiff+0x8e>

0800fbfa <__d2b>:
 800fbfa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fbfe:	460e      	mov	r6, r1
 800fc00:	2101      	movs	r1, #1
 800fc02:	ec59 8b10 	vmov	r8, r9, d0
 800fc06:	4615      	mov	r5, r2
 800fc08:	f7ff fd76 	bl	800f6f8 <_Balloc>
 800fc0c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800fc10:	4607      	mov	r7, r0
 800fc12:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fc16:	bb34      	cbnz	r4, 800fc66 <__d2b+0x6c>
 800fc18:	9301      	str	r3, [sp, #4]
 800fc1a:	f1b8 0f00 	cmp.w	r8, #0
 800fc1e:	d027      	beq.n	800fc70 <__d2b+0x76>
 800fc20:	a802      	add	r0, sp, #8
 800fc22:	f840 8d08 	str.w	r8, [r0, #-8]!
 800fc26:	f7ff fe0c 	bl	800f842 <__lo0bits>
 800fc2a:	9900      	ldr	r1, [sp, #0]
 800fc2c:	b1f0      	cbz	r0, 800fc6c <__d2b+0x72>
 800fc2e:	9a01      	ldr	r2, [sp, #4]
 800fc30:	f1c0 0320 	rsb	r3, r0, #32
 800fc34:	fa02 f303 	lsl.w	r3, r2, r3
 800fc38:	430b      	orrs	r3, r1
 800fc3a:	40c2      	lsrs	r2, r0
 800fc3c:	617b      	str	r3, [r7, #20]
 800fc3e:	9201      	str	r2, [sp, #4]
 800fc40:	9b01      	ldr	r3, [sp, #4]
 800fc42:	61bb      	str	r3, [r7, #24]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	bf14      	ite	ne
 800fc48:	2102      	movne	r1, #2
 800fc4a:	2101      	moveq	r1, #1
 800fc4c:	6139      	str	r1, [r7, #16]
 800fc4e:	b1c4      	cbz	r4, 800fc82 <__d2b+0x88>
 800fc50:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800fc54:	4404      	add	r4, r0
 800fc56:	6034      	str	r4, [r6, #0]
 800fc58:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fc5c:	6028      	str	r0, [r5, #0]
 800fc5e:	4638      	mov	r0, r7
 800fc60:	b003      	add	sp, #12
 800fc62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fc6a:	e7d5      	b.n	800fc18 <__d2b+0x1e>
 800fc6c:	6179      	str	r1, [r7, #20]
 800fc6e:	e7e7      	b.n	800fc40 <__d2b+0x46>
 800fc70:	a801      	add	r0, sp, #4
 800fc72:	f7ff fde6 	bl	800f842 <__lo0bits>
 800fc76:	9b01      	ldr	r3, [sp, #4]
 800fc78:	617b      	str	r3, [r7, #20]
 800fc7a:	2101      	movs	r1, #1
 800fc7c:	6139      	str	r1, [r7, #16]
 800fc7e:	3020      	adds	r0, #32
 800fc80:	e7e5      	b.n	800fc4e <__d2b+0x54>
 800fc82:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800fc86:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fc8a:	6030      	str	r0, [r6, #0]
 800fc8c:	6918      	ldr	r0, [r3, #16]
 800fc8e:	f7ff fdb9 	bl	800f804 <__hi0bits>
 800fc92:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800fc96:	e7e1      	b.n	800fc5c <__d2b+0x62>

0800fc98 <__ssprint_r>:
 800fc98:	6893      	ldr	r3, [r2, #8]
 800fc9a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc9e:	4681      	mov	r9, r0
 800fca0:	460c      	mov	r4, r1
 800fca2:	4617      	mov	r7, r2
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d060      	beq.n	800fd6a <__ssprint_r+0xd2>
 800fca8:	f04f 0b00 	mov.w	fp, #0
 800fcac:	f8d2 a000 	ldr.w	sl, [r2]
 800fcb0:	465e      	mov	r6, fp
 800fcb2:	b356      	cbz	r6, 800fd0a <__ssprint_r+0x72>
 800fcb4:	68a3      	ldr	r3, [r4, #8]
 800fcb6:	429e      	cmp	r6, r3
 800fcb8:	d344      	bcc.n	800fd44 <__ssprint_r+0xac>
 800fcba:	89a2      	ldrh	r2, [r4, #12]
 800fcbc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fcc0:	d03e      	beq.n	800fd40 <__ssprint_r+0xa8>
 800fcc2:	6825      	ldr	r5, [r4, #0]
 800fcc4:	6921      	ldr	r1, [r4, #16]
 800fcc6:	eba5 0801 	sub.w	r8, r5, r1
 800fcca:	6965      	ldr	r5, [r4, #20]
 800fccc:	2302      	movs	r3, #2
 800fcce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fcd2:	fb95 f5f3 	sdiv	r5, r5, r3
 800fcd6:	f108 0301 	add.w	r3, r8, #1
 800fcda:	4433      	add	r3, r6
 800fcdc:	429d      	cmp	r5, r3
 800fcde:	bf38      	it	cc
 800fce0:	461d      	movcc	r5, r3
 800fce2:	0553      	lsls	r3, r2, #21
 800fce4:	d546      	bpl.n	800fd74 <__ssprint_r+0xdc>
 800fce6:	4629      	mov	r1, r5
 800fce8:	4648      	mov	r0, r9
 800fcea:	f7fd fb25 	bl	800d338 <_malloc_r>
 800fcee:	b998      	cbnz	r0, 800fd18 <__ssprint_r+0x80>
 800fcf0:	230c      	movs	r3, #12
 800fcf2:	f8c9 3000 	str.w	r3, [r9]
 800fcf6:	89a3      	ldrh	r3, [r4, #12]
 800fcf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fcfc:	81a3      	strh	r3, [r4, #12]
 800fcfe:	2300      	movs	r3, #0
 800fd00:	60bb      	str	r3, [r7, #8]
 800fd02:	607b      	str	r3, [r7, #4]
 800fd04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fd08:	e031      	b.n	800fd6e <__ssprint_r+0xd6>
 800fd0a:	f8da b000 	ldr.w	fp, [sl]
 800fd0e:	f8da 6004 	ldr.w	r6, [sl, #4]
 800fd12:	f10a 0a08 	add.w	sl, sl, #8
 800fd16:	e7cc      	b.n	800fcb2 <__ssprint_r+0x1a>
 800fd18:	4642      	mov	r2, r8
 800fd1a:	6921      	ldr	r1, [r4, #16]
 800fd1c:	9001      	str	r0, [sp, #4]
 800fd1e:	f7fd fd19 	bl	800d754 <memcpy>
 800fd22:	89a2      	ldrh	r2, [r4, #12]
 800fd24:	9b01      	ldr	r3, [sp, #4]
 800fd26:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800fd2a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800fd2e:	81a2      	strh	r2, [r4, #12]
 800fd30:	6123      	str	r3, [r4, #16]
 800fd32:	6165      	str	r5, [r4, #20]
 800fd34:	4443      	add	r3, r8
 800fd36:	eba5 0508 	sub.w	r5, r5, r8
 800fd3a:	6023      	str	r3, [r4, #0]
 800fd3c:	60a5      	str	r5, [r4, #8]
 800fd3e:	4633      	mov	r3, r6
 800fd40:	429e      	cmp	r6, r3
 800fd42:	d200      	bcs.n	800fd46 <__ssprint_r+0xae>
 800fd44:	4633      	mov	r3, r6
 800fd46:	461a      	mov	r2, r3
 800fd48:	4659      	mov	r1, fp
 800fd4a:	6820      	ldr	r0, [r4, #0]
 800fd4c:	9301      	str	r3, [sp, #4]
 800fd4e:	f000 f82f 	bl	800fdb0 <memmove>
 800fd52:	68a2      	ldr	r2, [r4, #8]
 800fd54:	9b01      	ldr	r3, [sp, #4]
 800fd56:	1ad2      	subs	r2, r2, r3
 800fd58:	60a2      	str	r2, [r4, #8]
 800fd5a:	6822      	ldr	r2, [r4, #0]
 800fd5c:	4413      	add	r3, r2
 800fd5e:	6023      	str	r3, [r4, #0]
 800fd60:	68bb      	ldr	r3, [r7, #8]
 800fd62:	1b9e      	subs	r6, r3, r6
 800fd64:	60be      	str	r6, [r7, #8]
 800fd66:	2e00      	cmp	r6, #0
 800fd68:	d1cf      	bne.n	800fd0a <__ssprint_r+0x72>
 800fd6a:	2000      	movs	r0, #0
 800fd6c:	6078      	str	r0, [r7, #4]
 800fd6e:	b003      	add	sp, #12
 800fd70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd74:	462a      	mov	r2, r5
 800fd76:	4648      	mov	r0, r9
 800fd78:	f000 f834 	bl	800fde4 <_realloc_r>
 800fd7c:	4603      	mov	r3, r0
 800fd7e:	2800      	cmp	r0, #0
 800fd80:	d1d6      	bne.n	800fd30 <__ssprint_r+0x98>
 800fd82:	6921      	ldr	r1, [r4, #16]
 800fd84:	4648      	mov	r0, r9
 800fd86:	f7ff fbe3 	bl	800f550 <_free_r>
 800fd8a:	e7b1      	b.n	800fcf0 <__ssprint_r+0x58>

0800fd8c <__ascii_mbtowc>:
 800fd8c:	b082      	sub	sp, #8
 800fd8e:	b901      	cbnz	r1, 800fd92 <__ascii_mbtowc+0x6>
 800fd90:	a901      	add	r1, sp, #4
 800fd92:	b142      	cbz	r2, 800fda6 <__ascii_mbtowc+0x1a>
 800fd94:	b14b      	cbz	r3, 800fdaa <__ascii_mbtowc+0x1e>
 800fd96:	7813      	ldrb	r3, [r2, #0]
 800fd98:	600b      	str	r3, [r1, #0]
 800fd9a:	7812      	ldrb	r2, [r2, #0]
 800fd9c:	1c10      	adds	r0, r2, #0
 800fd9e:	bf18      	it	ne
 800fda0:	2001      	movne	r0, #1
 800fda2:	b002      	add	sp, #8
 800fda4:	4770      	bx	lr
 800fda6:	4610      	mov	r0, r2
 800fda8:	e7fb      	b.n	800fda2 <__ascii_mbtowc+0x16>
 800fdaa:	f06f 0001 	mvn.w	r0, #1
 800fdae:	e7f8      	b.n	800fda2 <__ascii_mbtowc+0x16>

0800fdb0 <memmove>:
 800fdb0:	4288      	cmp	r0, r1
 800fdb2:	b510      	push	{r4, lr}
 800fdb4:	eb01 0302 	add.w	r3, r1, r2
 800fdb8:	d803      	bhi.n	800fdc2 <memmove+0x12>
 800fdba:	1e42      	subs	r2, r0, #1
 800fdbc:	4299      	cmp	r1, r3
 800fdbe:	d10c      	bne.n	800fdda <memmove+0x2a>
 800fdc0:	bd10      	pop	{r4, pc}
 800fdc2:	4298      	cmp	r0, r3
 800fdc4:	d2f9      	bcs.n	800fdba <memmove+0xa>
 800fdc6:	1881      	adds	r1, r0, r2
 800fdc8:	1ad2      	subs	r2, r2, r3
 800fdca:	42d3      	cmn	r3, r2
 800fdcc:	d100      	bne.n	800fdd0 <memmove+0x20>
 800fdce:	bd10      	pop	{r4, pc}
 800fdd0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fdd4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800fdd8:	e7f7      	b.n	800fdca <memmove+0x1a>
 800fdda:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fdde:	f802 4f01 	strb.w	r4, [r2, #1]!
 800fde2:	e7eb      	b.n	800fdbc <memmove+0xc>

0800fde4 <_realloc_r>:
 800fde4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fde8:	4682      	mov	sl, r0
 800fdea:	460c      	mov	r4, r1
 800fdec:	b929      	cbnz	r1, 800fdfa <_realloc_r+0x16>
 800fdee:	4611      	mov	r1, r2
 800fdf0:	b003      	add	sp, #12
 800fdf2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdf6:	f7fd ba9f 	b.w	800d338 <_malloc_r>
 800fdfa:	9201      	str	r2, [sp, #4]
 800fdfc:	f7fd fcbe 	bl	800d77c <__malloc_lock>
 800fe00:	9a01      	ldr	r2, [sp, #4]
 800fe02:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800fe06:	f102 080b 	add.w	r8, r2, #11
 800fe0a:	f1b8 0f16 	cmp.w	r8, #22
 800fe0e:	f1a4 0908 	sub.w	r9, r4, #8
 800fe12:	f025 0603 	bic.w	r6, r5, #3
 800fe16:	d90a      	bls.n	800fe2e <_realloc_r+0x4a>
 800fe18:	f038 0807 	bics.w	r8, r8, #7
 800fe1c:	d509      	bpl.n	800fe32 <_realloc_r+0x4e>
 800fe1e:	230c      	movs	r3, #12
 800fe20:	f8ca 3000 	str.w	r3, [sl]
 800fe24:	2700      	movs	r7, #0
 800fe26:	4638      	mov	r0, r7
 800fe28:	b003      	add	sp, #12
 800fe2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe2e:	f04f 0810 	mov.w	r8, #16
 800fe32:	4590      	cmp	r8, r2
 800fe34:	d3f3      	bcc.n	800fe1e <_realloc_r+0x3a>
 800fe36:	45b0      	cmp	r8, r6
 800fe38:	f340 8145 	ble.w	80100c6 <_realloc_r+0x2e2>
 800fe3c:	4ba8      	ldr	r3, [pc, #672]	; (80100e0 <_realloc_r+0x2fc>)
 800fe3e:	f8d3 e008 	ldr.w	lr, [r3, #8]
 800fe42:	eb09 0106 	add.w	r1, r9, r6
 800fe46:	4571      	cmp	r1, lr
 800fe48:	469b      	mov	fp, r3
 800fe4a:	684b      	ldr	r3, [r1, #4]
 800fe4c:	d005      	beq.n	800fe5a <_realloc_r+0x76>
 800fe4e:	f023 0001 	bic.w	r0, r3, #1
 800fe52:	4408      	add	r0, r1
 800fe54:	6840      	ldr	r0, [r0, #4]
 800fe56:	07c7      	lsls	r7, r0, #31
 800fe58:	d447      	bmi.n	800feea <_realloc_r+0x106>
 800fe5a:	f023 0303 	bic.w	r3, r3, #3
 800fe5e:	4571      	cmp	r1, lr
 800fe60:	eb06 0703 	add.w	r7, r6, r3
 800fe64:	d119      	bne.n	800fe9a <_realloc_r+0xb6>
 800fe66:	f108 0010 	add.w	r0, r8, #16
 800fe6a:	4287      	cmp	r7, r0
 800fe6c:	db3f      	blt.n	800feee <_realloc_r+0x10a>
 800fe6e:	eb09 0308 	add.w	r3, r9, r8
 800fe72:	eba7 0708 	sub.w	r7, r7, r8
 800fe76:	f047 0701 	orr.w	r7, r7, #1
 800fe7a:	f8cb 3008 	str.w	r3, [fp, #8]
 800fe7e:	605f      	str	r7, [r3, #4]
 800fe80:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800fe84:	f003 0301 	and.w	r3, r3, #1
 800fe88:	ea43 0308 	orr.w	r3, r3, r8
 800fe8c:	f844 3c04 	str.w	r3, [r4, #-4]
 800fe90:	4650      	mov	r0, sl
 800fe92:	f7fd fc79 	bl	800d788 <__malloc_unlock>
 800fe96:	4627      	mov	r7, r4
 800fe98:	e7c5      	b.n	800fe26 <_realloc_r+0x42>
 800fe9a:	45b8      	cmp	r8, r7
 800fe9c:	dc27      	bgt.n	800feee <_realloc_r+0x10a>
 800fe9e:	68cb      	ldr	r3, [r1, #12]
 800fea0:	688a      	ldr	r2, [r1, #8]
 800fea2:	60d3      	str	r3, [r2, #12]
 800fea4:	609a      	str	r2, [r3, #8]
 800fea6:	eba7 0008 	sub.w	r0, r7, r8
 800feaa:	280f      	cmp	r0, #15
 800feac:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800feb0:	eb09 0207 	add.w	r2, r9, r7
 800feb4:	f240 8109 	bls.w	80100ca <_realloc_r+0x2e6>
 800feb8:	eb09 0108 	add.w	r1, r9, r8
 800febc:	f003 0301 	and.w	r3, r3, #1
 800fec0:	ea43 0308 	orr.w	r3, r3, r8
 800fec4:	f040 0001 	orr.w	r0, r0, #1
 800fec8:	f8c9 3004 	str.w	r3, [r9, #4]
 800fecc:	6048      	str	r0, [r1, #4]
 800fece:	6853      	ldr	r3, [r2, #4]
 800fed0:	f043 0301 	orr.w	r3, r3, #1
 800fed4:	6053      	str	r3, [r2, #4]
 800fed6:	3108      	adds	r1, #8
 800fed8:	4650      	mov	r0, sl
 800feda:	f7ff fb39 	bl	800f550 <_free_r>
 800fede:	4650      	mov	r0, sl
 800fee0:	f7fd fc52 	bl	800d788 <__malloc_unlock>
 800fee4:	f109 0708 	add.w	r7, r9, #8
 800fee8:	e79d      	b.n	800fe26 <_realloc_r+0x42>
 800feea:	2300      	movs	r3, #0
 800feec:	4619      	mov	r1, r3
 800feee:	07e8      	lsls	r0, r5, #31
 800fef0:	f100 8084 	bmi.w	800fffc <_realloc_r+0x218>
 800fef4:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800fef8:	eba9 0505 	sub.w	r5, r9, r5
 800fefc:	6868      	ldr	r0, [r5, #4]
 800fefe:	f020 0003 	bic.w	r0, r0, #3
 800ff02:	4430      	add	r0, r6
 800ff04:	2900      	cmp	r1, #0
 800ff06:	d076      	beq.n	800fff6 <_realloc_r+0x212>
 800ff08:	4571      	cmp	r1, lr
 800ff0a:	d150      	bne.n	800ffae <_realloc_r+0x1ca>
 800ff0c:	4403      	add	r3, r0
 800ff0e:	f108 0110 	add.w	r1, r8, #16
 800ff12:	428b      	cmp	r3, r1
 800ff14:	db6f      	blt.n	800fff6 <_realloc_r+0x212>
 800ff16:	462f      	mov	r7, r5
 800ff18:	68ea      	ldr	r2, [r5, #12]
 800ff1a:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800ff1e:	60ca      	str	r2, [r1, #12]
 800ff20:	6091      	str	r1, [r2, #8]
 800ff22:	1f32      	subs	r2, r6, #4
 800ff24:	2a24      	cmp	r2, #36	; 0x24
 800ff26:	d83b      	bhi.n	800ffa0 <_realloc_r+0x1bc>
 800ff28:	2a13      	cmp	r2, #19
 800ff2a:	d936      	bls.n	800ff9a <_realloc_r+0x1b6>
 800ff2c:	6821      	ldr	r1, [r4, #0]
 800ff2e:	60a9      	str	r1, [r5, #8]
 800ff30:	6861      	ldr	r1, [r4, #4]
 800ff32:	60e9      	str	r1, [r5, #12]
 800ff34:	2a1b      	cmp	r2, #27
 800ff36:	d81c      	bhi.n	800ff72 <_realloc_r+0x18e>
 800ff38:	f105 0210 	add.w	r2, r5, #16
 800ff3c:	f104 0108 	add.w	r1, r4, #8
 800ff40:	6808      	ldr	r0, [r1, #0]
 800ff42:	6010      	str	r0, [r2, #0]
 800ff44:	6848      	ldr	r0, [r1, #4]
 800ff46:	6050      	str	r0, [r2, #4]
 800ff48:	6889      	ldr	r1, [r1, #8]
 800ff4a:	6091      	str	r1, [r2, #8]
 800ff4c:	eb05 0208 	add.w	r2, r5, r8
 800ff50:	eba3 0308 	sub.w	r3, r3, r8
 800ff54:	f043 0301 	orr.w	r3, r3, #1
 800ff58:	f8cb 2008 	str.w	r2, [fp, #8]
 800ff5c:	6053      	str	r3, [r2, #4]
 800ff5e:	686b      	ldr	r3, [r5, #4]
 800ff60:	f003 0301 	and.w	r3, r3, #1
 800ff64:	ea43 0308 	orr.w	r3, r3, r8
 800ff68:	606b      	str	r3, [r5, #4]
 800ff6a:	4650      	mov	r0, sl
 800ff6c:	f7fd fc0c 	bl	800d788 <__malloc_unlock>
 800ff70:	e759      	b.n	800fe26 <_realloc_r+0x42>
 800ff72:	68a1      	ldr	r1, [r4, #8]
 800ff74:	6129      	str	r1, [r5, #16]
 800ff76:	68e1      	ldr	r1, [r4, #12]
 800ff78:	6169      	str	r1, [r5, #20]
 800ff7a:	2a24      	cmp	r2, #36	; 0x24
 800ff7c:	bf01      	itttt	eq
 800ff7e:	6922      	ldreq	r2, [r4, #16]
 800ff80:	61aa      	streq	r2, [r5, #24]
 800ff82:	6960      	ldreq	r0, [r4, #20]
 800ff84:	61e8      	streq	r0, [r5, #28]
 800ff86:	bf19      	ittee	ne
 800ff88:	f105 0218 	addne.w	r2, r5, #24
 800ff8c:	f104 0110 	addne.w	r1, r4, #16
 800ff90:	f105 0220 	addeq.w	r2, r5, #32
 800ff94:	f104 0118 	addeq.w	r1, r4, #24
 800ff98:	e7d2      	b.n	800ff40 <_realloc_r+0x15c>
 800ff9a:	463a      	mov	r2, r7
 800ff9c:	4621      	mov	r1, r4
 800ff9e:	e7cf      	b.n	800ff40 <_realloc_r+0x15c>
 800ffa0:	4621      	mov	r1, r4
 800ffa2:	4638      	mov	r0, r7
 800ffa4:	9301      	str	r3, [sp, #4]
 800ffa6:	f7ff ff03 	bl	800fdb0 <memmove>
 800ffaa:	9b01      	ldr	r3, [sp, #4]
 800ffac:	e7ce      	b.n	800ff4c <_realloc_r+0x168>
 800ffae:	18c7      	adds	r7, r0, r3
 800ffb0:	45b8      	cmp	r8, r7
 800ffb2:	dc20      	bgt.n	800fff6 <_realloc_r+0x212>
 800ffb4:	68cb      	ldr	r3, [r1, #12]
 800ffb6:	688a      	ldr	r2, [r1, #8]
 800ffb8:	60d3      	str	r3, [r2, #12]
 800ffba:	609a      	str	r2, [r3, #8]
 800ffbc:	4628      	mov	r0, r5
 800ffbe:	68eb      	ldr	r3, [r5, #12]
 800ffc0:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800ffc4:	60d3      	str	r3, [r2, #12]
 800ffc6:	609a      	str	r2, [r3, #8]
 800ffc8:	1f32      	subs	r2, r6, #4
 800ffca:	2a24      	cmp	r2, #36	; 0x24
 800ffcc:	d842      	bhi.n	8010054 <_realloc_r+0x270>
 800ffce:	2a13      	cmp	r2, #19
 800ffd0:	d93e      	bls.n	8010050 <_realloc_r+0x26c>
 800ffd2:	6823      	ldr	r3, [r4, #0]
 800ffd4:	60ab      	str	r3, [r5, #8]
 800ffd6:	6863      	ldr	r3, [r4, #4]
 800ffd8:	60eb      	str	r3, [r5, #12]
 800ffda:	2a1b      	cmp	r2, #27
 800ffdc:	d824      	bhi.n	8010028 <_realloc_r+0x244>
 800ffde:	f105 0010 	add.w	r0, r5, #16
 800ffe2:	f104 0308 	add.w	r3, r4, #8
 800ffe6:	681a      	ldr	r2, [r3, #0]
 800ffe8:	6002      	str	r2, [r0, #0]
 800ffea:	685a      	ldr	r2, [r3, #4]
 800ffec:	6042      	str	r2, [r0, #4]
 800ffee:	689b      	ldr	r3, [r3, #8]
 800fff0:	6083      	str	r3, [r0, #8]
 800fff2:	46a9      	mov	r9, r5
 800fff4:	e757      	b.n	800fea6 <_realloc_r+0xc2>
 800fff6:	4580      	cmp	r8, r0
 800fff8:	4607      	mov	r7, r0
 800fffa:	dddf      	ble.n	800ffbc <_realloc_r+0x1d8>
 800fffc:	4611      	mov	r1, r2
 800fffe:	4650      	mov	r0, sl
 8010000:	f7fd f99a 	bl	800d338 <_malloc_r>
 8010004:	4607      	mov	r7, r0
 8010006:	2800      	cmp	r0, #0
 8010008:	d0af      	beq.n	800ff6a <_realloc_r+0x186>
 801000a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801000e:	f023 0301 	bic.w	r3, r3, #1
 8010012:	f1a0 0208 	sub.w	r2, r0, #8
 8010016:	444b      	add	r3, r9
 8010018:	429a      	cmp	r2, r3
 801001a:	d11f      	bne.n	801005c <_realloc_r+0x278>
 801001c:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8010020:	f027 0703 	bic.w	r7, r7, #3
 8010024:	4437      	add	r7, r6
 8010026:	e73e      	b.n	800fea6 <_realloc_r+0xc2>
 8010028:	68a3      	ldr	r3, [r4, #8]
 801002a:	612b      	str	r3, [r5, #16]
 801002c:	68e3      	ldr	r3, [r4, #12]
 801002e:	616b      	str	r3, [r5, #20]
 8010030:	2a24      	cmp	r2, #36	; 0x24
 8010032:	bf01      	itttt	eq
 8010034:	6923      	ldreq	r3, [r4, #16]
 8010036:	61ab      	streq	r3, [r5, #24]
 8010038:	6962      	ldreq	r2, [r4, #20]
 801003a:	61ea      	streq	r2, [r5, #28]
 801003c:	bf19      	ittee	ne
 801003e:	f105 0018 	addne.w	r0, r5, #24
 8010042:	f104 0310 	addne.w	r3, r4, #16
 8010046:	f105 0020 	addeq.w	r0, r5, #32
 801004a:	f104 0318 	addeq.w	r3, r4, #24
 801004e:	e7ca      	b.n	800ffe6 <_realloc_r+0x202>
 8010050:	4623      	mov	r3, r4
 8010052:	e7c8      	b.n	800ffe6 <_realloc_r+0x202>
 8010054:	4621      	mov	r1, r4
 8010056:	f7ff feab 	bl	800fdb0 <memmove>
 801005a:	e7ca      	b.n	800fff2 <_realloc_r+0x20e>
 801005c:	1f32      	subs	r2, r6, #4
 801005e:	2a24      	cmp	r2, #36	; 0x24
 8010060:	d82d      	bhi.n	80100be <_realloc_r+0x2da>
 8010062:	2a13      	cmp	r2, #19
 8010064:	d928      	bls.n	80100b8 <_realloc_r+0x2d4>
 8010066:	6823      	ldr	r3, [r4, #0]
 8010068:	6003      	str	r3, [r0, #0]
 801006a:	6863      	ldr	r3, [r4, #4]
 801006c:	6043      	str	r3, [r0, #4]
 801006e:	2a1b      	cmp	r2, #27
 8010070:	d80e      	bhi.n	8010090 <_realloc_r+0x2ac>
 8010072:	f100 0308 	add.w	r3, r0, #8
 8010076:	f104 0208 	add.w	r2, r4, #8
 801007a:	6811      	ldr	r1, [r2, #0]
 801007c:	6019      	str	r1, [r3, #0]
 801007e:	6851      	ldr	r1, [r2, #4]
 8010080:	6059      	str	r1, [r3, #4]
 8010082:	6892      	ldr	r2, [r2, #8]
 8010084:	609a      	str	r2, [r3, #8]
 8010086:	4621      	mov	r1, r4
 8010088:	4650      	mov	r0, sl
 801008a:	f7ff fa61 	bl	800f550 <_free_r>
 801008e:	e76c      	b.n	800ff6a <_realloc_r+0x186>
 8010090:	68a3      	ldr	r3, [r4, #8]
 8010092:	6083      	str	r3, [r0, #8]
 8010094:	68e3      	ldr	r3, [r4, #12]
 8010096:	60c3      	str	r3, [r0, #12]
 8010098:	2a24      	cmp	r2, #36	; 0x24
 801009a:	bf01      	itttt	eq
 801009c:	6923      	ldreq	r3, [r4, #16]
 801009e:	6103      	streq	r3, [r0, #16]
 80100a0:	6961      	ldreq	r1, [r4, #20]
 80100a2:	6141      	streq	r1, [r0, #20]
 80100a4:	bf19      	ittee	ne
 80100a6:	f100 0310 	addne.w	r3, r0, #16
 80100aa:	f104 0210 	addne.w	r2, r4, #16
 80100ae:	f100 0318 	addeq.w	r3, r0, #24
 80100b2:	f104 0218 	addeq.w	r2, r4, #24
 80100b6:	e7e0      	b.n	801007a <_realloc_r+0x296>
 80100b8:	4603      	mov	r3, r0
 80100ba:	4622      	mov	r2, r4
 80100bc:	e7dd      	b.n	801007a <_realloc_r+0x296>
 80100be:	4621      	mov	r1, r4
 80100c0:	f7ff fe76 	bl	800fdb0 <memmove>
 80100c4:	e7df      	b.n	8010086 <_realloc_r+0x2a2>
 80100c6:	4637      	mov	r7, r6
 80100c8:	e6ed      	b.n	800fea6 <_realloc_r+0xc2>
 80100ca:	f003 0301 	and.w	r3, r3, #1
 80100ce:	431f      	orrs	r7, r3
 80100d0:	f8c9 7004 	str.w	r7, [r9, #4]
 80100d4:	6853      	ldr	r3, [r2, #4]
 80100d6:	f043 0301 	orr.w	r3, r3, #1
 80100da:	6053      	str	r3, [r2, #4]
 80100dc:	e6ff      	b.n	800fede <_realloc_r+0xfa>
 80100de:	bf00      	nop
 80100e0:	20000e10 	.word	0x20000e10

080100e4 <__ascii_wctomb>:
 80100e4:	b149      	cbz	r1, 80100fa <__ascii_wctomb+0x16>
 80100e6:	2aff      	cmp	r2, #255	; 0xff
 80100e8:	bf85      	ittet	hi
 80100ea:	238a      	movhi	r3, #138	; 0x8a
 80100ec:	6003      	strhi	r3, [r0, #0]
 80100ee:	700a      	strbls	r2, [r1, #0]
 80100f0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80100f4:	bf98      	it	ls
 80100f6:	2001      	movls	r0, #1
 80100f8:	4770      	bx	lr
 80100fa:	4608      	mov	r0, r1
 80100fc:	4770      	bx	lr
	...

08010100 <_init>:
 8010100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010102:	bf00      	nop
 8010104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010106:	bc08      	pop	{r3}
 8010108:	469e      	mov	lr, r3
 801010a:	4770      	bx	lr

0801010c <_fini>:
 801010c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801010e:	bf00      	nop
 8010110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010112:	bc08      	pop	{r3}
 8010114:	469e      	mov	lr, r3
 8010116:	4770      	bx	lr
