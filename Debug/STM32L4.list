
STM32L4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c430  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000d00d8  0801c5c0  0801c5c0  0002c5c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080ec698  080ec698  000fc698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080ec6a0  080ec6a0  000fc6a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080ec6a4  080ec6a4  000fc6a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000233c  20000000  080ec6a8  00100000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000a310  2000233c  080ee9e4  0010233c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000c64c  080ee9e4  0010c64c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0010233c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000f30d3  00000000  00000000  0010236c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00019887  00000000  00000000  001f543f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00036ab8  00000000  00000000  0020ecc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00003e60  00000000  00000000  00245780  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00005e98  00000000  00000000  002495e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00033eb7  00000000  00000000  0024f478  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00013710  00000000  00000000  0028332f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00296a3f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b7b0  00000000  00000000  00296abc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000233c 	.word	0x2000233c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801c5a8 	.word	0x0801c5a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20002340 	.word	0x20002340
 80001cc:	0801c5a8 	.word	0x0801c5a8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bb4:	f000 b97a 	b.w	8000eac <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	468c      	mov	ip, r1
 8000bd6:	460d      	mov	r5, r1
 8000bd8:	4604      	mov	r4, r0
 8000bda:	9e08      	ldr	r6, [sp, #32]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d151      	bne.n	8000c84 <__udivmoddi4+0xb4>
 8000be0:	428a      	cmp	r2, r1
 8000be2:	4617      	mov	r7, r2
 8000be4:	d96d      	bls.n	8000cc2 <__udivmoddi4+0xf2>
 8000be6:	fab2 fe82 	clz	lr, r2
 8000bea:	f1be 0f00 	cmp.w	lr, #0
 8000bee:	d00b      	beq.n	8000c08 <__udivmoddi4+0x38>
 8000bf0:	f1ce 0c20 	rsb	ip, lr, #32
 8000bf4:	fa01 f50e 	lsl.w	r5, r1, lr
 8000bf8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000bfc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c00:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c04:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c08:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c0c:	0c25      	lsrs	r5, r4, #16
 8000c0e:	fbbc f8fa 	udiv	r8, ip, sl
 8000c12:	fa1f f987 	uxth.w	r9, r7
 8000c16:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c1a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c1e:	fb08 f309 	mul.w	r3, r8, r9
 8000c22:	42ab      	cmp	r3, r5
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x6c>
 8000c26:	19ed      	adds	r5, r5, r7
 8000c28:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000c2c:	f080 8123 	bcs.w	8000e76 <__udivmoddi4+0x2a6>
 8000c30:	42ab      	cmp	r3, r5
 8000c32:	f240 8120 	bls.w	8000e76 <__udivmoddi4+0x2a6>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	443d      	add	r5, r7
 8000c3c:	1aed      	subs	r5, r5, r3
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c44:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c48:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c4c:	fb00 f909 	mul.w	r9, r0, r9
 8000c50:	45a1      	cmp	r9, r4
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x98>
 8000c54:	19e4      	adds	r4, r4, r7
 8000c56:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c5a:	f080 810a 	bcs.w	8000e72 <__udivmoddi4+0x2a2>
 8000c5e:	45a1      	cmp	r9, r4
 8000c60:	f240 8107 	bls.w	8000e72 <__udivmoddi4+0x2a2>
 8000c64:	3802      	subs	r0, #2
 8000c66:	443c      	add	r4, r7
 8000c68:	eba4 0409 	sub.w	r4, r4, r9
 8000c6c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c70:	2100      	movs	r1, #0
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	d061      	beq.n	8000d3a <__udivmoddi4+0x16a>
 8000c76:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	6034      	str	r4, [r6, #0]
 8000c7e:	6073      	str	r3, [r6, #4]
 8000c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c84:	428b      	cmp	r3, r1
 8000c86:	d907      	bls.n	8000c98 <__udivmoddi4+0xc8>
 8000c88:	2e00      	cmp	r6, #0
 8000c8a:	d054      	beq.n	8000d36 <__udivmoddi4+0x166>
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000c92:	4608      	mov	r0, r1
 8000c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c98:	fab3 f183 	clz	r1, r3
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	f040 808e 	bne.w	8000dbe <__udivmoddi4+0x1ee>
 8000ca2:	42ab      	cmp	r3, r5
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xdc>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80fa 	bhi.w	8000ea0 <__udivmoddi4+0x2d0>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb65 0503 	sbc.w	r5, r5, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	46ac      	mov	ip, r5
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	d03f      	beq.n	8000d3a <__udivmoddi4+0x16a>
 8000cba:	e886 1010 	stmia.w	r6, {r4, ip}
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	b912      	cbnz	r2, 8000cca <__udivmoddi4+0xfa>
 8000cc4:	2701      	movs	r7, #1
 8000cc6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000cca:	fab7 fe87 	clz	lr, r7
 8000cce:	f1be 0f00 	cmp.w	lr, #0
 8000cd2:	d134      	bne.n	8000d3e <__udivmoddi4+0x16e>
 8000cd4:	1beb      	subs	r3, r5, r7
 8000cd6:	0c3a      	lsrs	r2, r7, #16
 8000cd8:	fa1f fc87 	uxth.w	ip, r7
 8000cdc:	2101      	movs	r1, #1
 8000cde:	fbb3 f8f2 	udiv	r8, r3, r2
 8000ce2:	0c25      	lsrs	r5, r4, #16
 8000ce4:	fb02 3318 	mls	r3, r2, r8, r3
 8000ce8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000cec:	fb0c f308 	mul.w	r3, ip, r8
 8000cf0:	42ab      	cmp	r3, r5
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x134>
 8000cf4:	19ed      	adds	r5, r5, r7
 8000cf6:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x132>
 8000cfc:	42ab      	cmp	r3, r5
 8000cfe:	f200 80d1 	bhi.w	8000ea4 <__udivmoddi4+0x2d4>
 8000d02:	4680      	mov	r8, r0
 8000d04:	1aed      	subs	r5, r5, r3
 8000d06:	b2a3      	uxth	r3, r4
 8000d08:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d0c:	fb02 5510 	mls	r5, r2, r0, r5
 8000d10:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d14:	fb0c fc00 	mul.w	ip, ip, r0
 8000d18:	45a4      	cmp	ip, r4
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x15c>
 8000d1c:	19e4      	adds	r4, r4, r7
 8000d1e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x15a>
 8000d24:	45a4      	cmp	ip, r4
 8000d26:	f200 80b8 	bhi.w	8000e9a <__udivmoddi4+0x2ca>
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	eba4 040c 	sub.w	r4, r4, ip
 8000d30:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d34:	e79d      	b.n	8000c72 <__udivmoddi4+0xa2>
 8000d36:	4631      	mov	r1, r6
 8000d38:	4630      	mov	r0, r6
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	f1ce 0420 	rsb	r4, lr, #32
 8000d42:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d46:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d4a:	fa20 f804 	lsr.w	r8, r0, r4
 8000d4e:	0c3a      	lsrs	r2, r7, #16
 8000d50:	fa25 f404 	lsr.w	r4, r5, r4
 8000d54:	ea48 0803 	orr.w	r8, r8, r3
 8000d58:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d5c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d60:	fb02 4411 	mls	r4, r2, r1, r4
 8000d64:	fa1f fc87 	uxth.w	ip, r7
 8000d68:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000d6c:	fb01 f30c 	mul.w	r3, r1, ip
 8000d70:	42ab      	cmp	r3, r5
 8000d72:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d76:	d909      	bls.n	8000d8c <__udivmoddi4+0x1bc>
 8000d78:	19ed      	adds	r5, r5, r7
 8000d7a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 8000d7e:	f080 808a 	bcs.w	8000e96 <__udivmoddi4+0x2c6>
 8000d82:	42ab      	cmp	r3, r5
 8000d84:	f240 8087 	bls.w	8000e96 <__udivmoddi4+0x2c6>
 8000d88:	3902      	subs	r1, #2
 8000d8a:	443d      	add	r5, r7
 8000d8c:	1aeb      	subs	r3, r5, r3
 8000d8e:	fa1f f588 	uxth.w	r5, r8
 8000d92:	fbb3 f0f2 	udiv	r0, r3, r2
 8000d96:	fb02 3310 	mls	r3, r2, r0, r3
 8000d9a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d9e:	fb00 f30c 	mul.w	r3, r0, ip
 8000da2:	42ab      	cmp	r3, r5
 8000da4:	d907      	bls.n	8000db6 <__udivmoddi4+0x1e6>
 8000da6:	19ed      	adds	r5, r5, r7
 8000da8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000dac:	d26f      	bcs.n	8000e8e <__udivmoddi4+0x2be>
 8000dae:	42ab      	cmp	r3, r5
 8000db0:	d96d      	bls.n	8000e8e <__udivmoddi4+0x2be>
 8000db2:	3802      	subs	r0, #2
 8000db4:	443d      	add	r5, r7
 8000db6:	1aeb      	subs	r3, r5, r3
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	e78f      	b.n	8000cde <__udivmoddi4+0x10e>
 8000dbe:	f1c1 0720 	rsb	r7, r1, #32
 8000dc2:	fa22 f807 	lsr.w	r8, r2, r7
 8000dc6:	408b      	lsls	r3, r1
 8000dc8:	fa05 f401 	lsl.w	r4, r5, r1
 8000dcc:	ea48 0303 	orr.w	r3, r8, r3
 8000dd0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000dd4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	ea4e 0e04 	orr.w	lr, lr, r4
 8000dde:	fbb5 f9fc 	udiv	r9, r5, ip
 8000de2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000de6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000dea:	fa1f f883 	uxth.w	r8, r3
 8000dee:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000df2:	fb09 f408 	mul.w	r4, r9, r8
 8000df6:	42ac      	cmp	r4, r5
 8000df8:	fa02 f201 	lsl.w	r2, r2, r1
 8000dfc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x244>
 8000e02:	18ed      	adds	r5, r5, r3
 8000e04:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e08:	d243      	bcs.n	8000e92 <__udivmoddi4+0x2c2>
 8000e0a:	42ac      	cmp	r4, r5
 8000e0c:	d941      	bls.n	8000e92 <__udivmoddi4+0x2c2>
 8000e0e:	f1a9 0902 	sub.w	r9, r9, #2
 8000e12:	441d      	add	r5, r3
 8000e14:	1b2d      	subs	r5, r5, r4
 8000e16:	fa1f fe8e 	uxth.w	lr, lr
 8000e1a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e1e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e22:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e26:	fb00 f808 	mul.w	r8, r0, r8
 8000e2a:	45a0      	cmp	r8, r4
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x26e>
 8000e2e:	18e4      	adds	r4, r4, r3
 8000e30:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000e34:	d229      	bcs.n	8000e8a <__udivmoddi4+0x2ba>
 8000e36:	45a0      	cmp	r8, r4
 8000e38:	d927      	bls.n	8000e8a <__udivmoddi4+0x2ba>
 8000e3a:	3802      	subs	r0, #2
 8000e3c:	441c      	add	r4, r3
 8000e3e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e42:	eba4 0408 	sub.w	r4, r4, r8
 8000e46:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4a:	454c      	cmp	r4, r9
 8000e4c:	46c6      	mov	lr, r8
 8000e4e:	464d      	mov	r5, r9
 8000e50:	d315      	bcc.n	8000e7e <__udivmoddi4+0x2ae>
 8000e52:	d012      	beq.n	8000e7a <__udivmoddi4+0x2aa>
 8000e54:	b156      	cbz	r6, 8000e6c <__udivmoddi4+0x29c>
 8000e56:	ebba 030e 	subs.w	r3, sl, lr
 8000e5a:	eb64 0405 	sbc.w	r4, r4, r5
 8000e5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e62:	40cb      	lsrs	r3, r1
 8000e64:	431f      	orrs	r7, r3
 8000e66:	40cc      	lsrs	r4, r1
 8000e68:	6037      	str	r7, [r6, #0]
 8000e6a:	6074      	str	r4, [r6, #4]
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	4618      	mov	r0, r3
 8000e74:	e6f8      	b.n	8000c68 <__udivmoddi4+0x98>
 8000e76:	4690      	mov	r8, r2
 8000e78:	e6e0      	b.n	8000c3c <__udivmoddi4+0x6c>
 8000e7a:	45c2      	cmp	sl, r8
 8000e7c:	d2ea      	bcs.n	8000e54 <__udivmoddi4+0x284>
 8000e7e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e82:	eb69 0503 	sbc.w	r5, r9, r3
 8000e86:	3801      	subs	r0, #1
 8000e88:	e7e4      	b.n	8000e54 <__udivmoddi4+0x284>
 8000e8a:	4628      	mov	r0, r5
 8000e8c:	e7d7      	b.n	8000e3e <__udivmoddi4+0x26e>
 8000e8e:	4640      	mov	r0, r8
 8000e90:	e791      	b.n	8000db6 <__udivmoddi4+0x1e6>
 8000e92:	4681      	mov	r9, r0
 8000e94:	e7be      	b.n	8000e14 <__udivmoddi4+0x244>
 8000e96:	4601      	mov	r1, r0
 8000e98:	e778      	b.n	8000d8c <__udivmoddi4+0x1bc>
 8000e9a:	3802      	subs	r0, #2
 8000e9c:	443c      	add	r4, r7
 8000e9e:	e745      	b.n	8000d2c <__udivmoddi4+0x15c>
 8000ea0:	4608      	mov	r0, r1
 8000ea2:	e708      	b.n	8000cb6 <__udivmoddi4+0xe6>
 8000ea4:	f1a8 0802 	sub.w	r8, r8, #2
 8000ea8:	443d      	add	r5, r7
 8000eaa:	e72b      	b.n	8000d04 <__udivmoddi4+0x134>

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <ST7735_write>:
uint16_t scr_width;
uint16_t scr_height;
uint8_t buf_tft[4096] = {0};

void ST7735_write(uint8_t data)
{
 8000eb0:	b507      	push	{r0, r1, r2, lr}
 8000eb2:	a902      	add	r1, sp, #8
	HAL_SPI_Transmit(&_SPI_PORT, (uint8_t *)&data, 1, HAL_MAX_DELAY);
 8000eb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
{
 8000eb8:	f801 0d01 	strb.w	r0, [r1, #-1]!
	HAL_SPI_Transmit(&_SPI_PORT, (uint8_t *)&data, 1, HAL_MAX_DELAY);
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	4803      	ldr	r0, [pc, #12]	; (8000ecc <ST7735_write+0x1c>)
 8000ec0:	f003 ff6b 	bl	8004d9a <HAL_SPI_Transmit>
}
 8000ec4:	b003      	add	sp, #12
 8000ec6:	f85d fb04 	ldr.w	pc, [sp], #4
 8000eca:	bf00      	nop
 8000ecc:	2000b39c 	.word	0x2000b39c

08000ed0 <ST7735_cmd>:
	tmp[0] = color >> 8;
	tmp[1] = color;
	HAL_SPI_Transmit(&_SPI_PORT, (uint8_t *)&tmp[0], 2, HAL_MAX_DELAY);
}

void ST7735_cmd(uint8_t cmd) {
 8000ed0:	b510      	push	{r4, lr}
	A0_L();
 8000ed2:	2200      	movs	r2, #0
void ST7735_cmd(uint8_t cmd) {
 8000ed4:	4604      	mov	r4, r0
	A0_L();
 8000ed6:	2180      	movs	r1, #128	; 0x80
 8000ed8:	4803      	ldr	r0, [pc, #12]	; (8000ee8 <ST7735_cmd+0x18>)
 8000eda:	f002 f87f 	bl	8002fdc <HAL_GPIO_WritePin>
	ST7735_write(cmd);
 8000ede:	4620      	mov	r0, r4
}
 8000ee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ST7735_write(cmd);
 8000ee4:	f7ff bfe4 	b.w	8000eb0 <ST7735_write>
 8000ee8:	48000400 	.word	0x48000400

08000eec <ST7735_data>:

void ST7735_data(uint8_t data) {
 8000eec:	b510      	push	{r4, lr}
	A0_H();
 8000eee:	2201      	movs	r2, #1
void ST7735_data(uint8_t data) {
 8000ef0:	4604      	mov	r4, r0
	A0_H();
 8000ef2:	2180      	movs	r1, #128	; 0x80
 8000ef4:	4803      	ldr	r0, [pc, #12]	; (8000f04 <ST7735_data+0x18>)
 8000ef6:	f002 f871 	bl	8002fdc <HAL_GPIO_WritePin>
	ST7735_write(data);
 8000efa:	4620      	mov	r0, r4
}
 8000efc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ST7735_write(data);
 8000f00:	f7ff bfd6 	b.w	8000eb0 <ST7735_write>
 8000f04:	48000400 	.word	0x48000400

08000f08 <ST7735_Orientation>:
	CS_H();

	ST7735_Orientation(scr_CCW);
}

void ST7735_Orientation(ScrOrientation_TypeDef orientation) {
 8000f08:	b510      	push	{r4, lr}
	CS_L();
 8000f0a:	2200      	movs	r2, #0
void ST7735_Orientation(ScrOrientation_TypeDef orientation) {
 8000f0c:	4604      	mov	r4, r0
	CS_L();
 8000f0e:	2120      	movs	r1, #32
 8000f10:	4815      	ldr	r0, [pc, #84]	; (8000f68 <ST7735_Orientation+0x60>)
 8000f12:	f002 f863 	bl	8002fdc <HAL_GPIO_WritePin>
	ST7735_cmd(0x36); // Memory data access control:
 8000f16:	2036      	movs	r0, #54	; 0x36
 8000f18:	f7ff ffda 	bl	8000ed0 <ST7735_cmd>
	switch(orientation) {
 8000f1c:	2c02      	cmp	r4, #2
 8000f1e:	4a13      	ldr	r2, [pc, #76]	; (8000f6c <ST7735_Orientation+0x64>)
 8000f20:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <ST7735_Orientation+0x68>)
 8000f22:	d011      	beq.n	8000f48 <ST7735_Orientation+0x40>
 8000f24:	2c03      	cmp	r4, #3
 8000f26:	f04f 0180 	mov.w	r1, #128	; 0x80
 8000f2a:	d013      	beq.n	8000f54 <ST7735_Orientation+0x4c>
 8000f2c:	2c01      	cmp	r4, #1
 8000f2e:	d116      	bne.n	8000f5e <ST7735_Orientation+0x56>
	case scr_CW:
		scr_width  = TFT_H;
 8000f30:	20a0      	movs	r0, #160	; 0xa0
 8000f32:	8010      	strh	r0, [r2, #0]
		scr_height = TFT_W;
 8000f34:	8019      	strh	r1, [r3, #0]
		ST7735_data(0xc0); // X-Mirror,Y-Mirror: Bottom to top; Right to left; RGB
		break;
	default:
		scr_width  = TFT_W;
		scr_height = TFT_H;
		ST7735_data(0x00); // Normal: Top to Bottom; Left to Right; RGB
 8000f36:	f7ff ffd9 	bl	8000eec <ST7735_data>
		break;
	}
	CS_H();
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	2120      	movs	r1, #32
 8000f3e:	480a      	ldr	r0, [pc, #40]	; (8000f68 <ST7735_Orientation+0x60>)
}
 8000f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	CS_H();
 8000f44:	f002 b84a 	b.w	8002fdc <HAL_GPIO_WritePin>
		scr_width  = TFT_H;
 8000f48:	21a0      	movs	r1, #160	; 0xa0
 8000f4a:	8011      	strh	r1, [r2, #0]
		scr_height = TFT_W;
 8000f4c:	2280      	movs	r2, #128	; 0x80
 8000f4e:	801a      	strh	r2, [r3, #0]
		ST7735_data(0x60); // X-Y Exchange,X-Mirror
 8000f50:	2060      	movs	r0, #96	; 0x60
 8000f52:	e7f0      	b.n	8000f36 <ST7735_Orientation+0x2e>
		scr_width  = TFT_W;
 8000f54:	8011      	strh	r1, [r2, #0]
		scr_height = TFT_H;
 8000f56:	22a0      	movs	r2, #160	; 0xa0
 8000f58:	801a      	strh	r2, [r3, #0]
		ST7735_data(0xc0); // X-Mirror,Y-Mirror: Bottom to top; Right to left; RGB
 8000f5a:	20c0      	movs	r0, #192	; 0xc0
 8000f5c:	e7eb      	b.n	8000f36 <ST7735_Orientation+0x2e>
		scr_width  = TFT_W;
 8000f5e:	8011      	strh	r1, [r2, #0]
		scr_height = TFT_H;
 8000f60:	22a0      	movs	r2, #160	; 0xa0
 8000f62:	801a      	strh	r2, [r3, #0]
		ST7735_data(0x00); // Normal: Top to Bottom; Left to Right; RGB
 8000f64:	2000      	movs	r0, #0
 8000f66:	e7e6      	b.n	8000f36 <ST7735_Orientation+0x2e>
 8000f68:	48000400 	.word	0x48000400
 8000f6c:	2000b0a0 	.word	0x2000b0a0
 8000f70:	2000b0a2 	.word	0x2000b0a2

08000f74 <ST7735_Init>:
void ST7735_Init(void) {
 8000f74:	b510      	push	{r4, lr}
	CS_H();
 8000f76:	4c45      	ldr	r4, [pc, #276]	; (800108c <ST7735_Init+0x118>)
 8000f78:	2201      	movs	r2, #1
 8000f7a:	4620      	mov	r0, r4
 8000f7c:	2120      	movs	r1, #32
 8000f7e:	f002 f82d 	bl	8002fdc <HAL_GPIO_WritePin>
	RST_H();
 8000f82:	2201      	movs	r2, #1
 8000f84:	2140      	movs	r1, #64	; 0x40
 8000f86:	4620      	mov	r0, r4
 8000f88:	f002 f828 	bl	8002fdc <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000f8c:	2005      	movs	r0, #5
 8000f8e:	f001 fabb 	bl	8002508 <HAL_Delay>
	RST_L();
 8000f92:	2200      	movs	r2, #0
 8000f94:	2140      	movs	r1, #64	; 0x40
 8000f96:	4620      	mov	r0, r4
 8000f98:	f002 f820 	bl	8002fdc <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000f9c:	2005      	movs	r0, #5
 8000f9e:	f001 fab3 	bl	8002508 <HAL_Delay>
	RST_H();
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	2140      	movs	r1, #64	; 0x40
 8000fa6:	4620      	mov	r0, r4
 8000fa8:	f002 f818 	bl	8002fdc <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000fac:	2005      	movs	r0, #5
 8000fae:	f001 faab 	bl	8002508 <HAL_Delay>
	CS_L();
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2120      	movs	r1, #32
 8000fb6:	4620      	mov	r0, r4
 8000fb8:	f002 f810 	bl	8002fdc <HAL_GPIO_WritePin>
	ST7735_cmd(0x11); 	// Sleep out & booster on
 8000fbc:	2011      	movs	r0, #17
 8000fbe:	f7ff ff87 	bl	8000ed0 <ST7735_cmd>
	HAL_Delay(25); 		// Datasheet says what display wakes about 120ms (may be much faster actually)
 8000fc2:	2019      	movs	r0, #25
 8000fc4:	f001 faa0 	bl	8002508 <HAL_Delay>
	ST7735_cmd(0xb1);   // In normal mode (full colors):
 8000fc8:	20b1      	movs	r0, #177	; 0xb1
 8000fca:	f7ff ff81 	bl	8000ed0 <ST7735_cmd>
	A0_H();
 8000fce:	2201      	movs	r2, #1
 8000fd0:	2180      	movs	r1, #128	; 0x80
 8000fd2:	4620      	mov	r0, r4
 8000fd4:	f002 f802 	bl	8002fdc <HAL_GPIO_WritePin>
	ST7735_write(0x05); //   RTNA set 1-line period: RTNA2, RTNA0
 8000fd8:	2005      	movs	r0, #5
 8000fda:	f7ff ff69 	bl	8000eb0 <ST7735_write>
	ST7735_write(0x3c); //   Front porch: FPA5,FPA4,FPA3,FPA2
 8000fde:	203c      	movs	r0, #60	; 0x3c
 8000fe0:	f7ff ff66 	bl	8000eb0 <ST7735_write>
	ST7735_write(0x3c); //   Back porch: BPA5,BPA4,BPA3,BPA2
 8000fe4:	203c      	movs	r0, #60	; 0x3c
 8000fe6:	f7ff ff63 	bl	8000eb0 <ST7735_write>
	ST7735_cmd(0xb2);   // In idle mode (8-colors):
 8000fea:	20b2      	movs	r0, #178	; 0xb2
 8000fec:	f7ff ff70 	bl	8000ed0 <ST7735_cmd>
	A0_H();
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	2180      	movs	r1, #128	; 0x80
 8000ff4:	4620      	mov	r0, r4
 8000ff6:	f001 fff1 	bl	8002fdc <HAL_GPIO_WritePin>
	ST7735_write(0x05); //   RTNB set 1-line period: RTNAB, RTNB0
 8000ffa:	2005      	movs	r0, #5
 8000ffc:	f7ff ff58 	bl	8000eb0 <ST7735_write>
	ST7735_write(0x3c); //   Front porch: FPB5,FPB4,FPB3,FPB2
 8001000:	203c      	movs	r0, #60	; 0x3c
 8001002:	f7ff ff55 	bl	8000eb0 <ST7735_write>
	ST7735_write(0x3c); //   Back porch: BPB5,BPB4,BPB3,BPB2
 8001006:	203c      	movs	r0, #60	; 0x3c
 8001008:	f7ff ff52 	bl	8000eb0 <ST7735_write>
	ST7735_cmd(0xb3);   // In partial mode + full colors:
 800100c:	20b3      	movs	r0, #179	; 0xb3
 800100e:	f7ff ff5f 	bl	8000ed0 <ST7735_cmd>
	A0_H();
 8001012:	2201      	movs	r2, #1
 8001014:	2180      	movs	r1, #128	; 0x80
 8001016:	4620      	mov	r0, r4
 8001018:	f001 ffe0 	bl	8002fdc <HAL_GPIO_WritePin>
	ST7735_write(0x05); //   RTNC set 1-line period: RTNC2, RTNC0
 800101c:	2005      	movs	r0, #5
 800101e:	f7ff ff47 	bl	8000eb0 <ST7735_write>
	ST7735_write(0x3c); //   Front porch: FPC5,FPC4,FPC3,FPC2
 8001022:	203c      	movs	r0, #60	; 0x3c
 8001024:	f7ff ff44 	bl	8000eb0 <ST7735_write>
	ST7735_write(0x3c); //   Back porch: BPC5,BPC4,BPC3,BPC2
 8001028:	203c      	movs	r0, #60	; 0x3c
 800102a:	f7ff ff41 	bl	8000eb0 <ST7735_write>
	ST7735_write(0x05); //   RTND set 1-line period: RTND2, RTND0
 800102e:	2005      	movs	r0, #5
 8001030:	f7ff ff3e 	bl	8000eb0 <ST7735_write>
	ST7735_write(0x3c); //   Front porch: FPD5,FPD4,FPD3,FPD2
 8001034:	203c      	movs	r0, #60	; 0x3c
 8001036:	f7ff ff3b 	bl	8000eb0 <ST7735_write>
	ST7735_write(0x3c); //   Back porch: BPD5,BPD4,BPD3,BPD2
 800103a:	203c      	movs	r0, #60	; 0x3c
 800103c:	f7ff ff38 	bl	8000eb0 <ST7735_write>
	ST7735_cmd(0xB4);   // Display dot inversion control:
 8001040:	20b4      	movs	r0, #180	; 0xb4
 8001042:	f7ff ff45 	bl	8000ed0 <ST7735_cmd>
	ST7735_data(0x03);  //   NLB,NLC
 8001046:	2003      	movs	r0, #3
 8001048:	f7ff ff50 	bl	8000eec <ST7735_data>
	ST7735_cmd(0x3a);   // Interface pixel format
 800104c:	203a      	movs	r0, #58	; 0x3a
 800104e:	f7ff ff3f 	bl	8000ed0 <ST7735_cmd>
	ST7735_data(0x05);  // 16-bit/pixel RGB 5-6-5 (65k colors)
 8001052:	2005      	movs	r0, #5
 8001054:	f7ff ff4a 	bl	8000eec <ST7735_data>
	ST7735_cmd(0x20);   // Display inversion off
 8001058:	2020      	movs	r0, #32
 800105a:	f7ff ff39 	bl	8000ed0 <ST7735_cmd>
	ST7735_cmd(0x13);   // Partial mode off
 800105e:	2013      	movs	r0, #19
 8001060:	f7ff ff36 	bl	8000ed0 <ST7735_cmd>
	ST7735_cmd(0x26);   // Gamma curve set:
 8001064:	2026      	movs	r0, #38	; 0x26
 8001066:	f7ff ff33 	bl	8000ed0 <ST7735_cmd>
	ST7735_data(0x01);  //   Gamma curve 1 (G2.2) or (G1.0)
 800106a:	2001      	movs	r0, #1
 800106c:	f7ff ff3e 	bl	8000eec <ST7735_data>
	ST7735_cmd(0x29);   // Display on
 8001070:	2029      	movs	r0, #41	; 0x29
 8001072:	f7ff ff2d 	bl	8000ed0 <ST7735_cmd>
	CS_H();
 8001076:	4620      	mov	r0, r4
 8001078:	2201      	movs	r2, #1
 800107a:	2120      	movs	r1, #32
 800107c:	f001 ffae 	bl	8002fdc <HAL_GPIO_WritePin>
	ST7735_Orientation(scr_CCW);
 8001080:	2002      	movs	r0, #2
}
 8001082:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ST7735_Orientation(scr_CCW);
 8001086:	f7ff bf3f 	b.w	8000f08 <ST7735_Orientation>
 800108a:	bf00      	nop
 800108c:	48000400 	.word	0x48000400

08001090 <ST7735_AddrSet>:

void ST7735_AddrSet(uint16_t XS, uint16_t YS, uint16_t XE, uint16_t YE) {
 8001090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ST7735_cmd(0x2a); // Column address set
	A0_H();
 8001094:	4e19      	ldr	r6, [pc, #100]	; (80010fc <ST7735_AddrSet+0x6c>)
void ST7735_AddrSet(uint16_t XS, uint16_t YS, uint16_t XE, uint16_t YE) {
 8001096:	4680      	mov	r8, r0
	ST7735_cmd(0x2a); // Column address set
 8001098:	202a      	movs	r0, #42	; 0x2a
void ST7735_AddrSet(uint16_t XS, uint16_t YS, uint16_t XE, uint16_t YE) {
 800109a:	461c      	mov	r4, r3
 800109c:	460d      	mov	r5, r1
 800109e:	4617      	mov	r7, r2
	ST7735_cmd(0x2a); // Column address set
 80010a0:	f7ff ff16 	bl	8000ed0 <ST7735_cmd>
	A0_H();
 80010a4:	2201      	movs	r2, #1
 80010a6:	2180      	movs	r1, #128	; 0x80
 80010a8:	4630      	mov	r0, r6
 80010aa:	f001 ff97 	bl	8002fdc <HAL_GPIO_WritePin>
	ST7735_write(XS >> 8);
 80010ae:	ea4f 2018 	mov.w	r0, r8, lsr #8
 80010b2:	f7ff fefd 	bl	8000eb0 <ST7735_write>
	ST7735_write(XS);
 80010b6:	fa5f f088 	uxtb.w	r0, r8
 80010ba:	f7ff fef9 	bl	8000eb0 <ST7735_write>
	ST7735_write(XE >> 8);
 80010be:	0a38      	lsrs	r0, r7, #8
 80010c0:	f7ff fef6 	bl	8000eb0 <ST7735_write>
	ST7735_write(XE);
 80010c4:	b2f8      	uxtb	r0, r7
 80010c6:	f7ff fef3 	bl	8000eb0 <ST7735_write>

	ST7735_cmd(0x2b); // Row address set
 80010ca:	202b      	movs	r0, #43	; 0x2b
 80010cc:	f7ff ff00 	bl	8000ed0 <ST7735_cmd>
	A0_H();
 80010d0:	2201      	movs	r2, #1
 80010d2:	2180      	movs	r1, #128	; 0x80
 80010d4:	4630      	mov	r0, r6
 80010d6:	f001 ff81 	bl	8002fdc <HAL_GPIO_WritePin>
	ST7735_write(YS >> 8);
 80010da:	0a28      	lsrs	r0, r5, #8
 80010dc:	f7ff fee8 	bl	8000eb0 <ST7735_write>
	ST7735_write(YS);
 80010e0:	b2e8      	uxtb	r0, r5
 80010e2:	f7ff fee5 	bl	8000eb0 <ST7735_write>
	ST7735_write(YE >> 8);
 80010e6:	0a20      	lsrs	r0, r4, #8
 80010e8:	f7ff fee2 	bl	8000eb0 <ST7735_write>
	ST7735_write(YE);
 80010ec:	b2e0      	uxtb	r0, r4
 80010ee:	f7ff fedf 	bl	8000eb0 <ST7735_write>

	ST7735_cmd(0x2c); // Memory write
 80010f2:	202c      	movs	r0, #44	; 0x2c
}
 80010f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ST7735_cmd(0x2c); // Memory write
 80010f8:	f7ff beea 	b.w	8000ed0 <ST7735_cmd>
 80010fc:	48000400 	.word	0x48000400

08001100 <ST7735_Clear>:

void ST7735_Clear(uint16_t color) {
 8001100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	CH = color >> 8;
	CL = (uint8_t)color;

	CS_L();
	ST7735_AddrSet(0, 0, scr_width - 1, scr_height - 1);
 8001104:	4c17      	ldr	r4, [pc, #92]	; (8001164 <ST7735_Clear+0x64>)
 8001106:	4d18      	ldr	r5, [pc, #96]	; (8001168 <ST7735_Clear+0x68>)
	CS_L();
 8001108:	2200      	movs	r2, #0
 800110a:	2120      	movs	r1, #32
	CH = color >> 8;
 800110c:	ea4f 2810 	mov.w	r8, r0, lsr #8
	CL = (uint8_t)color;
 8001110:	b2c6      	uxtb	r6, r0
	CS_L();
 8001112:	4816      	ldr	r0, [pc, #88]	; (800116c <ST7735_Clear+0x6c>)
 8001114:	f001 ff62 	bl	8002fdc <HAL_GPIO_WritePin>
	ST7735_AddrSet(0, 0, scr_width - 1, scr_height - 1);
 8001118:	8823      	ldrh	r3, [r4, #0]
 800111a:	882a      	ldrh	r2, [r5, #0]
 800111c:	2100      	movs	r1, #0
 800111e:	3b01      	subs	r3, #1
 8001120:	3a01      	subs	r2, #1
 8001122:	4608      	mov	r0, r1
 8001124:	b29b      	uxth	r3, r3
 8001126:	b292      	uxth	r2, r2
 8001128:	f7ff ffb2 	bl	8001090 <ST7735_AddrSet>
	A0_H();
 800112c:	2201      	movs	r2, #1
 800112e:	2180      	movs	r1, #128	; 0x80
 8001130:	480e      	ldr	r0, [pc, #56]	; (800116c <ST7735_Clear+0x6c>)
 8001132:	f001 ff53 	bl	8002fdc <HAL_GPIO_WritePin>
	for (i = 0; i < scr_width * scr_height; i++) {
 8001136:	2700      	movs	r7, #0
 8001138:	8829      	ldrh	r1, [r5, #0]
 800113a:	8823      	ldrh	r3, [r4, #0]
 800113c:	b2ba      	uxth	r2, r7
 800113e:	434b      	muls	r3, r1
 8001140:	429a      	cmp	r2, r3
 8001142:	f107 0701 	add.w	r7, r7, #1
 8001146:	db06      	blt.n	8001156 <ST7735_Clear+0x56>
		ST7735_write(CH);
		ST7735_write(CL);
	}
	CS_H();
 8001148:	2201      	movs	r2, #1
 800114a:	2120      	movs	r1, #32
 800114c:	4807      	ldr	r0, [pc, #28]	; (800116c <ST7735_Clear+0x6c>)
}
 800114e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	CS_H();
 8001152:	f001 bf43 	b.w	8002fdc <HAL_GPIO_WritePin>
		ST7735_write(CH);
 8001156:	4640      	mov	r0, r8
 8001158:	f7ff feaa 	bl	8000eb0 <ST7735_write>
		ST7735_write(CL);
 800115c:	4630      	mov	r0, r6
 800115e:	f7ff fea7 	bl	8000eb0 <ST7735_write>
 8001162:	e7e9      	b.n	8001138 <ST7735_Clear+0x38>
 8001164:	2000b0a2 	.word	0x2000b0a2
 8001168:	2000b0a0 	.word	0x2000b0a0
 800116c:	48000400 	.word	0x48000400

08001170 <ST7735_Flush_3>:

void ST7735_Flush_3(lv_disp_drv_t * disp_drv, const lv_area_t * area, lv_color_t * color_p)
{
 8001170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t size;
	uint16_t teste = 0;

    size = ( ((area->x2 - area->x1) + 1)  * ((area->y2 - area->y1) + 1) );
 8001172:	f9b1 3000 	ldrsh.w	r3, [r1]
 8001176:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
{
 800117a:	4617      	mov	r7, r2
    size = ( ((area->x2 - area->x1) + 1)  * ((area->y2 - area->y1) + 1) );
 800117c:	1ae4      	subs	r4, r4, r3
 800117e:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8001182:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8001186:	1a9b      	subs	r3, r3, r2
 8001188:	3301      	adds	r3, #1
{
 800118a:	460e      	mov	r6, r1

	CS_L();
 800118c:	2200      	movs	r2, #0
 800118e:	2120      	movs	r1, #32
{
 8001190:	4605      	mov	r5, r0
    size = ( ((area->x2 - area->x1) + 1)  * ((area->y2 - area->y1) + 1) );
 8001192:	3401      	adds	r4, #1
	CS_L();
 8001194:	482c      	ldr	r0, [pc, #176]	; (8001248 <ST7735_Flush_3+0xd8>)
    size = ( ((area->x2 - area->x1) + 1)  * ((area->y2 - area->y1) + 1) );
 8001196:	fb14 f403 	smulbb	r4, r4, r3
	CS_L();
 800119a:	f001 ff1f 	bl	8002fdc <HAL_GPIO_WritePin>
    ST7735_cmd(0x2a); // Column address set
 800119e:	202a      	movs	r0, #42	; 0x2a
 80011a0:	f7ff fe96 	bl	8000ed0 <ST7735_cmd>
	A0_H();
 80011a4:	2201      	movs	r2, #1
 80011a6:	2180      	movs	r1, #128	; 0x80
 80011a8:	4827      	ldr	r0, [pc, #156]	; (8001248 <ST7735_Flush_3+0xd8>)
 80011aa:	f001 ff17 	bl	8002fdc <HAL_GPIO_WritePin>
	ST7735_write(area->x1 >> 8);
 80011ae:	7870      	ldrb	r0, [r6, #1]
 80011b0:	f7ff fe7e 	bl	8000eb0 <ST7735_write>
	ST7735_write(area->x1);
 80011b4:	7830      	ldrb	r0, [r6, #0]
 80011b6:	f7ff fe7b 	bl	8000eb0 <ST7735_write>
	ST7735_write(area->x2 >> 8);
 80011ba:	7970      	ldrb	r0, [r6, #5]
 80011bc:	f7ff fe78 	bl	8000eb0 <ST7735_write>
	ST7735_write(area->x2);
 80011c0:	7930      	ldrb	r0, [r6, #4]
 80011c2:	f7ff fe75 	bl	8000eb0 <ST7735_write>

	ST7735_cmd(0x2b); // Row address set
 80011c6:	202b      	movs	r0, #43	; 0x2b
 80011c8:	f7ff fe82 	bl	8000ed0 <ST7735_cmd>
	A0_H();
 80011cc:	2201      	movs	r2, #1
 80011ce:	2180      	movs	r1, #128	; 0x80
 80011d0:	481d      	ldr	r0, [pc, #116]	; (8001248 <ST7735_Flush_3+0xd8>)
 80011d2:	f001 ff03 	bl	8002fdc <HAL_GPIO_WritePin>
	ST7735_write(area->y1 >> 8);
 80011d6:	78f0      	ldrb	r0, [r6, #3]
 80011d8:	f7ff fe6a 	bl	8000eb0 <ST7735_write>
	ST7735_write(area->y1);
 80011dc:	78b0      	ldrb	r0, [r6, #2]
 80011de:	f7ff fe67 	bl	8000eb0 <ST7735_write>
	ST7735_write(area->y2 >> 8);
 80011e2:	79f0      	ldrb	r0, [r6, #7]
 80011e4:	f7ff fe64 	bl	8000eb0 <ST7735_write>
	ST7735_write(area->y2);
 80011e8:	79b0      	ldrb	r0, [r6, #6]
 80011ea:	f7ff fe61 	bl	8000eb0 <ST7735_write>

	ST7735_cmd(0x2c); // Memory write
 80011ee:	202c      	movs	r0, #44	; 0x2c
 80011f0:	f7ff fe6e 	bl	8000ed0 <ST7735_cmd>
	A0_H();
 80011f4:	2201      	movs	r2, #1
 80011f6:	4814      	ldr	r0, [pc, #80]	; (8001248 <ST7735_Flush_3+0xd8>)
 80011f8:	2180      	movs	r1, #128	; 0x80
 80011fa:	f001 feef 	bl	8002fdc <HAL_GPIO_WritePin>
//		HAL_SPI_Transmit(&_SPI_PORT, (uint8_t *)&tmp[0], 2, HAL_MAX_DELAY);
//		color_p++;
//		teste++;
//	}
	for(uint16_t x = 0; x <= size-1; x++) {
		buf_tft[(x*2) + 0] = color_p->full >> 8;
 80011fe:	4813      	ldr	r0, [pc, #76]	; (800124c <ST7735_Flush_3+0xdc>)
    size = ( ((area->x2 - area->x1) + 1)  * ((area->y2 - area->y1) + 1) );
 8001200:	b2a4      	uxth	r4, r4
	for(uint16_t x = 0; x <= size-1; x++) {
 8001202:	2200      	movs	r2, #0
 8001204:	b293      	uxth	r3, r2
 8001206:	429c      	cmp	r4, r3
 8001208:	f102 0201 	add.w	r2, r2, #1
 800120c:	dc12      	bgt.n	8001234 <ST7735_Flush_3+0xc4>
		buf_tft[(x*2) + 1] = color_p->full;
		color_p++;
		teste++;
	}
	HAL_SPI_Transmit(&_SPI_PORT, (uint8_t *)&buf_tft[0], (size-1)*2, HAL_MAX_DELAY);
 800120e:	1e62      	subs	r2, r4, #1
 8001210:	0052      	lsls	r2, r2, #1
 8001212:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001216:	b292      	uxth	r2, r2
 8001218:	490c      	ldr	r1, [pc, #48]	; (800124c <ST7735_Flush_3+0xdc>)
 800121a:	480d      	ldr	r0, [pc, #52]	; (8001250 <ST7735_Flush_3+0xe0>)
 800121c:	f003 fdbd 	bl	8004d9a <HAL_SPI_Transmit>

	CS_H();
 8001220:	4809      	ldr	r0, [pc, #36]	; (8001248 <ST7735_Flush_3+0xd8>)
 8001222:	2201      	movs	r2, #1
 8001224:	2120      	movs	r1, #32
 8001226:	f001 fed9 	bl	8002fdc <HAL_GPIO_WritePin>

//	sprintf(buffer, "ST7735-Flush3 X1: %d X2: %d Y1: %d Y2: %d Size: %d Teste: %d\n", area->x1, area->x2, area->y1, area->y2, size, teste);
//    LV_LOG_ERROR(buffer);
//    logI(buffer);

	lv_disp_flush_ready(disp_drv);                  /* Tell you are ready with the flushing*/
 800122a:	4628      	mov	r0, r5
}
 800122c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lv_disp_flush_ready(disp_drv);                  /* Tell you are ready with the flushing*/
 8001230:	f012 bd3c 	b.w	8013cac <lv_disp_flush_ready>
		buf_tft[(x*2) + 0] = color_p->full >> 8;
 8001234:	8839      	ldrh	r1, [r7, #0]
 8001236:	0a09      	lsrs	r1, r1, #8
 8001238:	f800 1013 	strb.w	r1, [r0, r3, lsl #1]
		buf_tft[(x*2) + 1] = color_p->full;
 800123c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001240:	f837 1b02 	ldrh.w	r1, [r7], #2
 8001244:	7059      	strb	r1, [r3, #1]
 8001246:	e7dd      	b.n	8001204 <ST7735_Flush_3+0x94>
 8001248:	48000400 	.word	0x48000400
 800124c:	20002358 	.word	0x20002358
 8001250:	2000b39c 	.word	0x2000b39c

08001254 <ClearLog>:

/** Clear the duration parameter and the click count parameter of the button.
 */
void ClearLog(uint8_t key, uint8_t index)
{
	if(index < 8)
 8001254:	2907      	cmp	r1, #7
 8001256:	d807      	bhi.n	8001268 <ClearLog+0x14>
	{
		bt[key]->click[index] = bt[key]->duration[index] = 0;
 8001258:	4b04      	ldr	r3, [pc, #16]	; (800126c <ClearLog+0x18>)
 800125a:	2260      	movs	r2, #96	; 0x60
 800125c:	fb02 3000 	mla	r0, r2, r0, r3
 8001260:	4401      	add	r1, r0
 8001262:	2300      	movs	r3, #0
 8001264:	728b      	strb	r3, [r1, #10]
 8001266:	708b      	strb	r3, [r1, #2]
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	2000b0bc 	.word	0x2000b0bc

08001270 <KeyboardInit>:
{
 8001270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001274:	2500      	movs	r5, #0
 8001276:	4c0d      	ldr	r4, [pc, #52]	; (80012ac <KeyboardInit+0x3c>)
 8001278:	4680      	mov	r8, r0
		bt[x]->old_state = bt[x]->new_state = 0;
 800127a:	462e      	mov	r6, r5
 800127c:	fa5f f985 	uxtb.w	r9, r5
 8001280:	7066      	strb	r6, [r4, #1]
 8001282:	7026      	strb	r6, [r4, #0]
		bt[x]->mask = mask;
 8001284:	f884 8012 	strb.w	r8, [r4, #18]
		bt[x]->mode = 0;
 8001288:	74e6      	strb	r6, [r4, #19]
		bt[x]->flag = 0;
 800128a:	6166      	str	r6, [r4, #20]
		for(i = 0; i < 8; i++) {
 800128c:	2700      	movs	r7, #0
			ClearLog(x, i);
 800128e:	b2f9      	uxtb	r1, r7
 8001290:	4648      	mov	r0, r9
		for(i = 0; i < 8; i++) {
 8001292:	3701      	adds	r7, #1
			ClearLog(x, i);
 8001294:	f7ff ffde 	bl	8001254 <ClearLog>
		for(i = 0; i < 8; i++) {
 8001298:	2f08      	cmp	r7, #8
 800129a:	d1f8      	bne.n	800128e <KeyboardInit+0x1e>
 800129c:	3501      	adds	r5, #1
	for(x = 0; x < 6; x++) {
 800129e:	2d06      	cmp	r5, #6
 80012a0:	f104 0460 	add.w	r4, r4, #96	; 0x60
 80012a4:	d1ea      	bne.n	800127c <KeyboardInit+0xc>
}
 80012a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80012aa:	bf00      	nop
 80012ac:	2000b0bc 	.word	0x2000b0bc

080012b0 <KeyboardSetMode>:
	}
}

void KeyboardSetMode(uint8_t key, uint8_t mode, bool flag)
{
 80012b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i;

	// clear data
	bt[key]->old_state = bt[key]->new_state = 0;
 80012b2:	4e0c      	ldr	r6, [pc, #48]	; (80012e4 <KeyboardSetMode+0x34>)
{
 80012b4:	460f      	mov	r7, r1
	bt[key]->old_state = bt[key]->new_state = 0;
 80012b6:	2160      	movs	r1, #96	; 0x60
 80012b8:	4341      	muls	r1, r0
 80012ba:	2400      	movs	r4, #0
{
 80012bc:	4605      	mov	r5, r0
	bt[key]->old_state = bt[key]->new_state = 0;
 80012be:	1870      	adds	r0, r6, r1
	// this looks weird but correct
	bt[key]->flag = !flag;
 80012c0:	f082 0201 	eor.w	r2, r2, #1
	bt[key]->old_state = bt[key]->new_state = 0;
 80012c4:	5474      	strb	r4, [r6, r1]
 80012c6:	7044      	strb	r4, [r0, #1]
	bt[key]->flag = !flag;
 80012c8:	6142      	str	r2, [r0, #20]

	// clear log
	for(i = 0; i < 8; i++)
	{
		ClearLog(key, i);
 80012ca:	b2e1      	uxtb	r1, r4
 80012cc:	4628      	mov	r0, r5
	for(i = 0; i < 8; i++)
 80012ce:	3401      	adds	r4, #1
		ClearLog(key, i);
 80012d0:	f7ff ffc0 	bl	8001254 <ClearLog>
	for(i = 0; i < 8; i++)
 80012d4:	2c08      	cmp	r4, #8
 80012d6:	d1f8      	bne.n	80012ca <KeyboardSetMode+0x1a>
	}

	// change mode
	bt[key]->mode = mode;
 80012d8:	2360      	movs	r3, #96	; 0x60
 80012da:	fb03 6505 	mla	r5, r3, r5, r6
 80012de:	74ef      	strb	r7, [r5, #19]
 80012e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012e2:	bf00      	nop
 80012e4:	2000b0bc 	.word	0x2000b0bc

080012e8 <PushButton_Read>:
	bt[key]->old_state = bt[key]->new_state;
}


uint8_t PushButton_Read(uint8_t key)
{
 80012e8:	b508      	push	{r3, lr}
	uint8_t ret = 0x00;

	switch(key) {
 80012ea:	2804      	cmp	r0, #4
 80012ec:	d819      	bhi.n	8001322 <PushButton_Read+0x3a>
 80012ee:	e8df f000 	tbb	[pc, r0]
 80012f2:	0c03      	.short	0x0c03
 80012f4:	120f      	.short	0x120f
 80012f6:	15          	.byte	0x15
 80012f7:	00          	.byte	0x00
		case 0:			// Down
			ret = !(HAL_GPIO_ReadPin(KEY_DN_GPIO_Port, KEY_DN_Pin));
 80012f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
			break;
		case 2:			// Enter
			ret = !(HAL_GPIO_ReadPin(KEY_ENTER_GPIO_Port, KEY_ENTER_Pin));
			break;
		case 3:			// Esc
			ret = !(HAL_GPIO_ReadPin(KEY_ESC_GPIO_Port, KEY_ESC_Pin));
 80012fc:	480a      	ldr	r0, [pc, #40]	; (8001328 <PushButton_Read+0x40>)
			break;
		case 4:			// SW Rotary Encoder
			ret = !(HAL_GPIO_ReadPin(SW_ENC_GPIO_Port, SW_ENC_Pin));
 80012fe:	f001 fe67 	bl	8002fd0 <HAL_GPIO_ReadPin>
 8001302:	fab0 f080 	clz	r0, r0
 8001306:	0940      	lsrs	r0, r0, #5
			break;
 8001308:	bd08      	pop	{r3, pc}
			ret = !(HAL_GPIO_ReadPin(KEY_UP_GPIO_Port, KEY_UP_Pin));
 800130a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800130e:	e7f5      	b.n	80012fc <PushButton_Read+0x14>
			ret = !(HAL_GPIO_ReadPin(KEY_ENTER_GPIO_Port, KEY_ENTER_Pin));
 8001310:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001314:	e7f2      	b.n	80012fc <PushButton_Read+0x14>
			ret = !(HAL_GPIO_ReadPin(KEY_ESC_GPIO_Port, KEY_ESC_Pin));
 8001316:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800131a:	e7ef      	b.n	80012fc <PushButton_Read+0x14>
			ret = !(HAL_GPIO_ReadPin(SW_ENC_GPIO_Port, SW_ENC_Pin));
 800131c:	2110      	movs	r1, #16
 800131e:	4803      	ldr	r0, [pc, #12]	; (800132c <PushButton_Read+0x44>)
 8001320:	e7ed      	b.n	80012fe <PushButton_Read+0x16>
	uint8_t ret = 0x00;
 8001322:	2000      	movs	r0, #0
		default:
			break;
	}
	return ret;
}
 8001324:	bd08      	pop	{r3, pc}
 8001326:	bf00      	nop
 8001328:	48000400 	.word	0x48000400
 800132c:	48000800 	.word	0x48000800

08001330 <Evt_EnQueue>:
 *
 * \param  event data in an array of uint8_t
 * \return false if the queue is full
 */
bool Evt_EnQueue(uint8_t *event)
{
 8001330:	b530      	push	{r4, r5, lr}
	unsigned i;
	uint8_t next = ADVANCE_QPTR(evt_queue.head);
 8001332:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <Evt_EnQueue+0x34>)
 8001334:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80

	// queue is full
	if(next == evt_queue.tail)
 8001338:	f893 4081 	ldrb.w	r4, [r3, #129]	; 0x81
	uint8_t next = ADVANCE_QPTR(evt_queue.head);
 800133c:	1c51      	adds	r1, r2, #1
 800133e:	f001 0107 	and.w	r1, r1, #7
	if(next == evt_queue.tail)
 8001342:	428c      	cmp	r4, r1
 8001344:	d00b      	beq.n	800135e <Evt_EnQueue+0x2e>
 8001346:	eb03 1402 	add.w	r4, r3, r2, lsl #4
 800134a:	2200      	movs	r2, #0
	}

	// copy event bytes into the buffer
	for(i = 0; i < EVT_QWIDTH; i++)
	{
		evt_queue.buff[evt_queue.head][i] = event[i];
 800134c:	5c85      	ldrb	r5, [r0, r2]
 800134e:	54a5      	strb	r5, [r4, r2]
	for(i = 0; i < EVT_QWIDTH; i++)
 8001350:	3201      	adds	r2, #1
 8001352:	2a10      	cmp	r2, #16
 8001354:	d1fa      	bne.n	800134c <Evt_EnQueue+0x1c>
	}
	// move to the next positition
	evt_queue.head = next;
 8001356:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80

	//logI("I - Evt_EnQueue OK\n\r");
	return true;
 800135a:	2001      	movs	r0, #1
 800135c:	bd30      	pop	{r4, r5, pc}
		return false;
 800135e:	2000      	movs	r0, #0
}
 8001360:	bd30      	pop	{r4, r5, pc}
 8001362:	bf00      	nop
 8001364:	20003358 	.word	0x20003358

08001368 <KeyboardRead>:
{
 8001368:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800136a:	4604      	mov	r4, r0
	bt[key]->new_state = PushButton_Read(key);
 800136c:	4e42      	ldr	r6, [pc, #264]	; (8001478 <KeyboardRead+0x110>)
 800136e:	f7ff ffbb 	bl	80012e8 <PushButton_Read>
 8001372:	2260      	movs	r2, #96	; 0x60
 8001374:	4362      	muls	r2, r4
 8001376:	18b3      	adds	r3, r6, r2
	diff_state = bt[key]->old_state ^ bt[key]->new_state;
 8001378:	5cb2      	ldrb	r2, [r6, r2]
	if(((bt[key]->mode >> i) & 0x01)  == PUSHBTN_MODE_UDOWN) {
 800137a:	7cd9      	ldrb	r1, [r3, #19]
	bt[key]->new_state = PushButton_Read(key);
 800137c:	7058      	strb	r0, [r3, #1]
	if(((bt[key]->mode >> i) & 0x01)  == PUSHBTN_MODE_UDOWN) {
 800137e:	07c9      	lsls	r1, r1, #31
 8001380:	d521      	bpl.n	80013c6 <KeyboardRead+0x5e>
		if(((bt[key]->new_state >> i) & 0x01) == 0x01) {
 8001382:	f010 0101 	ands.w	r1, r0, #1
 8001386:	d011      	beq.n	80013ac <KeyboardRead+0x44>
			event[0] = EVT_PBTN_INPUT;
 8001388:	2310      	movs	r3, #16
 800138a:	f88d 3000 	strb.w	r3, [sp]
			event[1] = (uint8_t)key;
 800138e:	f88d 4001 	strb.w	r4, [sp, #1]
			event[2] = PBTN_DOWN;
 8001392:	2305      	movs	r3, #5
				Evt_EnQueue(event);
 8001394:	4668      	mov	r0, sp
				event[2] = PBTN_ENDN;
 8001396:	f88d 3002 	strb.w	r3, [sp, #2]
				Evt_EnQueue(event);
 800139a:	f7ff ffc9 	bl	8001330 <Evt_EnQueue>
	bt[key]->old_state = bt[key]->new_state;
 800139e:	2360      	movs	r3, #96	; 0x60
 80013a0:	435c      	muls	r4, r3
 80013a2:	1933      	adds	r3, r6, r4
 80013a4:	785b      	ldrb	r3, [r3, #1]
 80013a6:	5533      	strb	r3, [r6, r4]
}
 80013a8:	b004      	add	sp, #16
 80013aa:	bd70      	pop	{r4, r5, r6, pc}
			if(((bt[key]->old_state >> i) & 0x01) == 0x01) {
 80013ac:	07d3      	lsls	r3, r2, #31
 80013ae:	d5f6      	bpl.n	800139e <KeyboardRead+0x36>
				KeyboardSetMode(key, PUSHBTN_MODE_CLICK, true);
 80013b0:	2201      	movs	r2, #1
 80013b2:	4620      	mov	r0, r4
 80013b4:	f7ff ff7c 	bl	80012b0 <KeyboardSetMode>
				event[0] = EVT_PBTN_INPUT;
 80013b8:	2310      	movs	r3, #16
 80013ba:	f88d 3000 	strb.w	r3, [sp]
				event[1] = (uint8_t)key;
 80013be:	f88d 4001 	strb.w	r4, [sp, #1]
				event[2] = PBTN_ENDN;
 80013c2:	2306      	movs	r3, #6
 80013c4:	e7e6      	b.n	8001394 <KeyboardRead+0x2c>
	diff_state = bt[key]->old_state ^ bt[key]->new_state;
 80013c6:	4042      	eors	r2, r0
		if((diff_state >> i) & 0x01) {
 80013c8:	07d5      	lsls	r5, r2, #31
 80013ca:	d520      	bpl.n	800140e <KeyboardRead+0xa6>
			bt[key]->duration[i] = 1;
 80013cc:	2201      	movs	r2, #1
 80013ce:	729a      	strb	r2, [r3, #10]
			if(((bt[key]->new_state >> i) & 0x01) == 0x00) {
 80013d0:	4002      	ands	r2, r0
 80013d2:	d107      	bne.n	80013e4 <KeyboardRead+0x7c>
				if(bt[key]->flag) {
 80013d4:	6959      	ldr	r1, [r3, #20]
 80013d6:	b111      	cbz	r1, 80013de <KeyboardRead+0x76>
					bt[key]->flag = false;
 80013d8:	615a      	str	r2, [r3, #20]
				bt[key]->duration[i]++;
 80013da:	729a      	strb	r2, [r3, #10]
 80013dc:	e002      	b.n	80013e4 <KeyboardRead+0x7c>
					bt[key]->click[i]++;
 80013de:	789a      	ldrb	r2, [r3, #2]
 80013e0:	3201      	adds	r2, #1
 80013e2:	709a      	strb	r2, [r3, #2]
		if(bt[key]->click[i] >= 3) {
 80013e4:	2560      	movs	r5, #96	; 0x60
 80013e6:	fb05 6504 	mla	r5, r5, r4, r6
 80013ea:	78aa      	ldrb	r2, [r5, #2]
 80013ec:	2a02      	cmp	r2, #2
 80013ee:	d915      	bls.n	800141c <KeyboardRead+0xb4>
			event[0] = EVT_PBTN_INPUT;
 80013f0:	2310      	movs	r3, #16
 80013f2:	f88d 3000 	strb.w	r3, [sp]
			Evt_EnQueue(event);
 80013f6:	4668      	mov	r0, sp
			event[2] = PBTN_TCLK;
 80013f8:	2304      	movs	r3, #4
 80013fa:	f88d 3002 	strb.w	r3, [sp, #2]
			event[1] = (uint8_t)key;
 80013fe:	f88d 4001 	strb.w	r4, [sp, #1]
			Evt_EnQueue(event);
 8001402:	f7ff ff95 	bl	8001330 <Evt_EnQueue>
			bt[key]->click[i] = 0;
 8001406:	2300      	movs	r3, #0
 8001408:	70ab      	strb	r3, [r5, #2]
			bt[key]->duration[i] = 0;
 800140a:	72ab      	strb	r3, [r5, #10]
 800140c:	e7c7      	b.n	800139e <KeyboardRead+0x36>
			if((bt[key]->duration[i] > 0) && (bt[key]->duration[i] < PUSHBTN_TO_MAX)) {
 800140e:	7a9a      	ldrb	r2, [r3, #10]
 8001410:	1e51      	subs	r1, r2, #1
 8001412:	b2c9      	uxtb	r1, r1
 8001414:	29fd      	cmp	r1, #253	; 0xfd
 8001416:	d8e5      	bhi.n	80013e4 <KeyboardRead+0x7c>
				bt[key]->duration[i]++;
 8001418:	3201      	adds	r2, #1
 800141a:	e7de      	b.n	80013da <KeyboardRead+0x72>
		else if((bt[key]->duration[i] > PUSHBTN_TO_SHORT) &&	(((bt[key]->new_state >> i) & 0x01) == 0x00)) {
 800141c:	7aab      	ldrb	r3, [r5, #10]
 800141e:	2b03      	cmp	r3, #3
 8001420:	d9bd      	bls.n	800139e <KeyboardRead+0x36>
 8001422:	07c1      	lsls	r1, r0, #31
 8001424:	d414      	bmi.n	8001450 <KeyboardRead+0xe8>
 8001426:	2310      	movs	r3, #16
			if(bt[key]->click[i] == 2) {
 8001428:	2a02      	cmp	r2, #2
				event[0] = EVT_PBTN_INPUT;
 800142a:	f88d 3000 	strb.w	r3, [sp]
				Evt_EnQueue(event);
 800142e:	4668      	mov	r0, sp
				event[2] = PBTN_DCLK;
 8001430:	bf0c      	ite	eq
 8001432:	2303      	moveq	r3, #3
				event[2] = PBTN_SCLK;
 8001434:	2301      	movne	r3, #1
 8001436:	f88d 3002 	strb.w	r3, [sp, #2]
				event[1] = (uint8_t)key;
 800143a:	f88d 4001 	strb.w	r4, [sp, #1]
				Evt_EnQueue(event);
 800143e:	f7ff ff77 	bl	8001330 <Evt_EnQueue>
			bt[key]->click[i] = 0;
 8001442:	2360      	movs	r3, #96	; 0x60
 8001444:	fb03 6304 	mla	r3, r3, r4, r6
 8001448:	2200      	movs	r2, #0
 800144a:	709a      	strb	r2, [r3, #2]
			bt[key]->duration[i] = 0;
 800144c:	729a      	strb	r2, [r3, #10]
 800144e:	e7a6      	b.n	800139e <KeyboardRead+0x36>
		else if((bt[key]->duration[i] > PUSHBTN_TO_LONG) && (((bt[key]->new_state >> i) & 0x01) == 0x01)) {
 8001450:	2b0a      	cmp	r3, #10
 8001452:	d9a4      	bls.n	800139e <KeyboardRead+0x36>
			event[0] = EVT_PBTN_INPUT;
 8001454:	2310      	movs	r3, #16
 8001456:	f88d 3000 	strb.w	r3, [sp]
			Evt_EnQueue(event);
 800145a:	4668      	mov	r0, sp
			event[2] = PBTN_LCLK;
 800145c:	2302      	movs	r3, #2
 800145e:	f88d 3002 	strb.w	r3, [sp, #2]
			event[1] = (uint8_t)key;
 8001462:	f88d 4001 	strb.w	r4, [sp, #1]
			Evt_EnQueue(event);
 8001466:	f7ff ff63 	bl	8001330 <Evt_EnQueue>
			bt[key]->click[i] = 0;
 800146a:	2300      	movs	r3, #0
 800146c:	70ab      	strb	r3, [r5, #2]
			bt[key]->duration[i] = 0;
 800146e:	72ab      	strb	r3, [r5, #10]
			bt[key]->flag = true;
 8001470:	2301      	movs	r3, #1
 8001472:	616b      	str	r3, [r5, #20]
 8001474:	e793      	b.n	800139e <KeyboardRead+0x36>
 8001476:	bf00      	nop
 8001478:	2000b0bc 	.word	0x2000b0bc

0800147c <Key_Read>:
{
 800147c:	b510      	push	{r4, lr}
 800147e:	2400      	movs	r4, #0
		KeyboardRead(x);
 8001480:	b2e0      	uxtb	r0, r4
 8001482:	3401      	adds	r4, #1
 8001484:	f7ff ff70 	bl	8001368 <KeyboardRead>
	for(x = 0; x < 6; x++) {
 8001488:	2c06      	cmp	r4, #6
 800148a:	d1f9      	bne.n	8001480 <Key_Read+0x4>
}
 800148c:	bd10      	pop	{r4, pc}
	...

08001490 <Evt_DeQueue>:

	// disable all timers
	//UsrTimer_Enable(false);

	// queue is not empty
	if(evt_queue.tail != evt_queue.head)
 8001490:	4b0d      	ldr	r3, [pc, #52]	; (80014c8 <Evt_DeQueue+0x38>)
 8001492:	f893 1081 	ldrb.w	r1, [r3, #129]	; 0x81
 8001496:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800149a:	4291      	cmp	r1, r2
 800149c:	d012      	beq.n	80014c4 <Evt_DeQueue+0x34>
 800149e:	2200      	movs	r2, #0
	{
		// copy event bytes into the buffer
		for(i = 0; i < EVT_QWIDTH; i++)
		{
			event[i] = evt_queue.buff[evt_queue.tail][i];
 80014a0:	f893 1081 	ldrb.w	r1, [r3, #129]	; 0x81
 80014a4:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 80014a8:	5c89      	ldrb	r1, [r1, r2]
 80014aa:	5481      	strb	r1, [r0, r2]
 80014ac:	3201      	adds	r2, #1
		for(i = 0; i < EVT_QWIDTH; i++)
 80014ae:	2a10      	cmp	r2, #16
 80014b0:	d1f6      	bne.n	80014a0 <Evt_DeQueue+0x10>
		}
		// move to the next position
		evt_queue.tail = ADVANCE_QPTR(evt_queue.tail);
 80014b2:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 80014b6:	3201      	adds	r2, #1
 80014b8:	f002 0207 	and.w	r2, r2, #7
 80014bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
		// set flag
		flag = true;
 80014c0:	2001      	movs	r0, #1
 80014c2:	4770      	bx	lr
	bool flag = false;
 80014c4:	2000      	movs	r0, #0
	// enable all timers
	//UsrTimer_Enable(true);

	// return with the flag
	return flag;
}
 80014c6:	4770      	bx	lr
 80014c8:	20003358 	.word	0x20003358

080014cc <Evt_InitQueue>:
 * the data in the queue.
 */
void Evt_InitQueue(void)
{
	// clear queue by resetting the pointers
	evt_queue.head = evt_queue.tail = 0;
 80014cc:	4b03      	ldr	r3, [pc, #12]	; (80014dc <Evt_InitQueue+0x10>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
 80014d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	20003358 	.word	0x20003358

080014e0 <ButtonEvent>:
}

void ButtonEvent(void)
{
 80014e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t event[EVT_QWIDTH];
	// check event queue
	if(Evt_DeQueue(event)) {
 80014e2:	4668      	mov	r0, sp
 80014e4:	f7ff ffd4 	bl	8001490 <Evt_DeQueue>
 80014e8:	b1c8      	cbz	r0, 800151e <ButtonEvent+0x3e>
		timer_gui = HAL_GetTick();
 80014ea:	f001 f807 	bl	80024fc <HAL_GetTick>
 80014ee:	4b4c      	ldr	r3, [pc, #304]	; (8001620 <ButtonEvent+0x140>)
 80014f0:	6018      	str	r0, [r3, #0]
		switch(TelaAtiva) {
 80014f2:	4b4c      	ldr	r3, [pc, #304]	; (8001624 <ButtonEvent+0x144>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2b0e      	cmp	r3, #14
 80014f8:	d811      	bhi.n	800151e <ButtonEvent+0x3e>
 80014fa:	e8df f003 	tbb	[pc, r3]
 80014fe:	1308      	.short	0x1308
 8001500:	372e251c 	.word	0x372e251c
 8001504:	5b524940 	.word	0x5b524940
 8001508:	7f766d64 	.word	0x7f766d64
 800150c:	88          	.byte	0x88
 800150d:	00          	.byte	0x00
			case TelaPrincipal:
				ButtonEventTelaPrincipal(event[0], event[2], event[1]);
 800150e:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8001512:	f89d 1002 	ldrb.w	r1, [sp, #2]
 8001516:	f89d 0000 	ldrb.w	r0, [sp]
 800151a:	f006 ff2f 	bl	800837c <ButtonEventTelaPrincipal>
			case TelaReading_Status:
				ButtonEventTelaReading_Status(event[0], event[2], event[1]);
				break;
		}
	}
}
 800151e:	b005      	add	sp, #20
 8001520:	f85d fb04 	ldr.w	pc, [sp], #4
				ButtonEventTelaSelecao(event[0], event[2], event[1]);
 8001524:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8001528:	f89d 1002 	ldrb.w	r1, [sp, #2]
 800152c:	f89d 0000 	ldrb.w	r0, [sp]
 8001530:	f00c fbee 	bl	800dd10 <ButtonEventTelaSelecao>
				break;
 8001534:	e7f3      	b.n	800151e <ButtonEvent+0x3e>
				ButtonEventTelaFrequencia(event[0], event[2], event[1]);
 8001536:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800153a:	f89d 1002 	ldrb.w	r1, [sp, #2]
 800153e:	f89d 0000 	ldrb.w	r0, [sp]
 8001542:	f009 fe09 	bl	800b158 <ButtonEventTelaFrequencia>
				break;
 8001546:	e7ea      	b.n	800151e <ButtonEvent+0x3e>
				ButtonEventTelaAudio(event[0], event[2], event[1]);
 8001548:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800154c:	f89d 1002 	ldrb.w	r1, [sp, #2]
 8001550:	f89d 0000 	ldrb.w	r0, [sp]
 8001554:	f009 fa20 	bl	800a998 <ButtonEventTelaAudio>
				break;
 8001558:	e7e1      	b.n	800151e <ButtonEvent+0x3e>
				ButtonEventTelaAudio_1(event[0], event[2], event[1]);
 800155a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800155e:	f89d 1002 	ldrb.w	r1, [sp, #2]
 8001562:	f89d 0000 	ldrb.w	r0, [sp]
 8001566:	f009 fa75 	bl	800aa54 <ButtonEventTelaAudio_1>
				break;
 800156a:	e7d8      	b.n	800151e <ButtonEvent+0x3e>
				ButtonEventTelaAudio_2(event[0], event[2], event[1]);
 800156c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8001570:	f89d 1002 	ldrb.w	r1, [sp, #2]
 8001574:	f89d 0000 	ldrb.w	r0, [sp]
 8001578:	f009 face 	bl	800ab18 <ButtonEventTelaAudio_2>
				break;
 800157c:	e7cf      	b.n	800151e <ButtonEvent+0x3e>
				ButtonEventTelaRF(event[0], event[2], event[1]);
 800157e:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8001582:	f89d 1002 	ldrb.w	r1, [sp, #2]
 8001586:	f89d 0000 	ldrb.w	r0, [sp]
 800158a:	f00c f9e9 	bl	800d960 <ButtonEventTelaRF>
				break;
 800158e:	e7c6      	b.n	800151e <ButtonEvent+0x3e>
				ButtonEventTelaRF_1(event[0], event[2], event[1]);
 8001590:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8001594:	f89d 1002 	ldrb.w	r1, [sp, #2]
 8001598:	f89d 0000 	ldrb.w	r0, [sp]
 800159c:	f00c f9f6 	bl	800d98c <ButtonEventTelaRF_1>
				break;
 80015a0:	e7bd      	b.n	800151e <ButtonEvent+0x3e>
				ButtonEventTelaRF_2(event[0], event[2], event[1]);
 80015a2:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80015a6:	f89d 1002 	ldrb.w	r1, [sp, #2]
 80015aa:	f89d 0000 	ldrb.w	r0, [sp]
 80015ae:	f00c fa05 	bl	800d9bc <ButtonEventTelaRF_2>
				break;
 80015b2:	e7b4      	b.n	800151e <ButtonEvent+0x3e>
				ButtonEventTelaReadings(event[0], event[2], event[1]);
 80015b4:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80015b8:	f89d 1002 	ldrb.w	r1, [sp, #2]
 80015bc:	f89d 0000 	ldrb.w	r0, [sp]
 80015c0:	f00b fb48 	bl	800cc54 <ButtonEventTelaReadings>
				break;
 80015c4:	e7ab      	b.n	800151e <ButtonEvent+0x3e>
				ButtonEventTelaMpx(event[0], event[2], event[1]);
 80015c6:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80015ca:	f89d 1002 	ldrb.w	r1, [sp, #2]
 80015ce:	f89d 0000 	ldrb.w	r0, [sp]
 80015d2:	f009 ffa3 	bl	800b51c <ButtonEventTelaMpx>
				break;
 80015d6:	e7a2      	b.n	800151e <ButtonEvent+0x3e>
				ButtonEventTelaReading_Temp(event[0], event[2], event[1]);
 80015d8:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80015dc:	f89d 1002 	ldrb.w	r1, [sp, #2]
 80015e0:	f89d 0000 	ldrb.w	r0, [sp]
 80015e4:	f00a fd58 	bl	800c098 <ButtonEventTelaReading_Temp>
				break;
 80015e8:	e799      	b.n	800151e <ButtonEvent+0x3e>
				ButtonEventTelaReading_Vpa(event[0], event[2], event[1]);
 80015ea:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80015ee:	f89d 1002 	ldrb.w	r1, [sp, #2]
 80015f2:	f89d 0000 	ldrb.w	r0, [sp]
 80015f6:	f00b f84b 	bl	800c690 <ButtonEventTelaReading_Vpa>
				break;
 80015fa:	e790      	b.n	800151e <ButtonEvent+0x3e>
				ButtonEventTelaReading_Efic(event[0], event[2], event[1]);
 80015fc:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8001600:	f89d 1002 	ldrb.w	r1, [sp, #2]
 8001604:	f89d 0000 	ldrb.w	r0, [sp]
 8001608:	f00a f97e 	bl	800b908 <ButtonEventTelaReading_Efic>
				break;
 800160c:	e787      	b.n	800151e <ButtonEvent+0x3e>
				ButtonEventTelaReading_Status(event[0], event[2], event[1]);
 800160e:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8001612:	f89d 1002 	ldrb.w	r1, [sp, #2]
 8001616:	f89d 0000 	ldrb.w	r0, [sp]
 800161a:	f00a fb4d 	bl	800bcb8 <ButtonEventTelaReading_Status>
}
 800161e:	e77e      	b.n	800151e <ButtonEvent+0x3e>
 8001620:	20004de4 	.word	0x20004de4
 8001624:	200033e4 	.word	0x200033e4

08001628 <HAL_printf_valist>:
/** Custom printf function in order to use HAL_UART_Transmit()
 * @param *fmt String to print
 * @param argp Parameters list
 */
void HAL_printf_valist(const char *fmt, va_list argp)
{
 8001628:	b500      	push	{lr}
 800162a:	b0c1      	sub	sp, #260	; 0x104
  char string[PRINT_BUFFER_SIZE];

  if (vsprintf(string, fmt, argp) > 0) {
 800162c:	460a      	mov	r2, r1
 800162e:	4601      	mov	r1, r0
 8001630:	4668      	mov	r0, sp
 8001632:	f019 fb21 	bl	801ac78 <vsprintf>
 8001636:	2800      	cmp	r0, #0
 8001638:	dd0f      	ble.n	800165a <HAL_printf_valist+0x32>
    HAL_UART_Transmit(&huart2, (uint8_t*)string, strlen(string), HAL_MAX_DELAY); // send message via UART
 800163a:	4668      	mov	r0, sp
 800163c:	f7fe fdc8 	bl	80001d0 <strlen>
 8001640:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001644:	b282      	uxth	r2, r0
 8001646:	4669      	mov	r1, sp
  } else {
	HAL_UART_Transmit(&huart2, (uint8_t*)"E - Print\n", 14, HAL_MAX_DELAY);
 8001648:	4806      	ldr	r0, [pc, #24]	; (8001664 <HAL_printf_valist+0x3c>)
 800164a:	f004 fc10 	bl	8005e6e <HAL_UART_Transmit>
  }
  HAL_Delay(10);
 800164e:	200a      	movs	r0, #10
 8001650:	f000 ff5a 	bl	8002508 <HAL_Delay>
}
 8001654:	b041      	add	sp, #260	; 0x104
 8001656:	f85d fb04 	ldr.w	pc, [sp], #4
	HAL_UART_Transmit(&huart2, (uint8_t*)"E - Print\n", 14, HAL_MAX_DELAY);
 800165a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800165e:	220e      	movs	r2, #14
 8001660:	4901      	ldr	r1, [pc, #4]	; (8001668 <HAL_printf_valist+0x40>)
 8001662:	e7f1      	b.n	8001648 <HAL_printf_valist+0x20>
 8001664:	2000b488 	.word	0x2000b488
 8001668:	0801c602 	.word	0x0801c602

0800166c <logI>:
/** LOG procedure - Info
 * @param *fmt String to print
 * @param ... Parameters list
 */
void logI(const char* fmt, ...)
{
 800166c:	b40f      	push	{r0, r1, r2, r3}
 800166e:	b507      	push	{r0, r1, r2, lr}
 8001670:	a904      	add	r1, sp, #16
 8001672:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list argp;

	va_start(argp, fmt);
 8001676:	9101      	str	r1, [sp, #4]
	HAL_printf_valist(fmt, argp);
 8001678:	f7ff ffd6 	bl	8001628 <HAL_printf_valist>
	logUSB(fmt, argp);
	va_end(argp);
}
 800167c:	b003      	add	sp, #12
 800167e:	f85d eb04 	ldr.w	lr, [sp], #4
 8001682:	b004      	add	sp, #16
 8001684:	4770      	bx	lr
	...

08001688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800168c:	b0b8      	sub	sp, #224	; 0xe0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800168e:	2514      	movs	r5, #20
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001690:	2244      	movs	r2, #68	; 0x44
 8001692:	2100      	movs	r1, #0
 8001694:	a805      	add	r0, sp, #20
 8001696:	f018 fa1c 	bl	8019ad2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800169a:	462a      	mov	r2, r5
 800169c:	2100      	movs	r1, #0
 800169e:	4668      	mov	r0, sp
 80016a0:	f018 fa17 	bl	8019ad2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016a4:	2100      	movs	r1, #0
 80016a6:	2288      	movs	r2, #136	; 0x88
 80016a8:	a816      	add	r0, sp, #88	; 0x58
 80016aa:	f018 fa12 	bl	8019ad2 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80016ae:	f002 f9bf 	bl	8003a30 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80016b2:	4a25      	ldr	r2, [pc, #148]	; (8001748 <SystemClock_Config+0xc0>)
 80016b4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80016b8:	f023 0318 	bic.w	r3, r3, #24
 80016bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80016c0:	2305      	movs	r3, #5
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016c2:	2402      	movs	r4, #2
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80016c4:	2601      	movs	r6, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016c6:	2703      	movs	r7, #3
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80016c8:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 20;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80016ca:	f04f 0807 	mov.w	r8, #7
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80016ce:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016d2:	eb0d 0005 	add.w	r0, sp, r5
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80016d6:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLN = 20;
 80016d8:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80016da:	9607      	str	r6, [sp, #28]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016dc:	2500      	movs	r5, #0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016de:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016e0:	9710      	str	r7, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80016e2:	9611      	str	r6, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80016e4:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016e8:	9414      	str	r4, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016ea:	9415      	str	r4, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016ec:	f002 fafc 	bl	8003ce8 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80016f0:	2104      	movs	r1, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016f2:	230f      	movs	r3, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80016f4:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016f6:	e88d 0088 	stmia.w	sp, {r3, r7}
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016fa:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016fc:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016fe:	9504      	str	r5, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001700:	f002 fd54 	bl	80041ac <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 8001704:	4b11      	ldr	r3, [pc, #68]	; (800174c <SystemClock_Config+0xc4>)
 8001706:	9316      	str	r3, [sp, #88]	; 0x58
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001708:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800170c:	9334      	str	r3, [sp, #208]	; 0xd0
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800170e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001712:	9337      	str	r3, [sp, #220]	; 0xdc
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001714:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001718:	9331      	str	r3, [sp, #196]	; 0xc4
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
  PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 800171a:	230c      	movs	r3, #12
 800171c:	9319      	str	r3, [sp, #100]	; 0x64
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800171e:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8001720:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 8001724:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001726:	9525      	str	r5, [sp, #148]	; 0x94
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001728:	952a      	str	r5, [sp, #168]	; 0xa8
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 800172a:	9717      	str	r7, [sp, #92]	; 0x5c
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800172c:	9618      	str	r6, [sp, #96]	; 0x60
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800172e:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001732:	941b      	str	r4, [sp, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001734:	941c      	str	r4, [sp, #112]	; 0x70
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001736:	f002 ff23 	bl	8004580 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800173a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800173e:	f002 f987 	bl	8003a50 <HAL_PWREx_ControlVoltageScaling>
  {
    Error_Handler();
  }
}
 8001742:	b038      	add	sp, #224	; 0xe0
 8001744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001748:	40021000 	.word	0x40021000
 800174c:	00026042 	.word	0x00026042

08001750 <main>:
{
 8001750:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001754:	b099      	sub	sp, #100	; 0x64
  HAL_Init();
 8001756:	f000 feaf 	bl	80024b8 <HAL_Init>
  SystemClock_Config();
 800175a:	f7ff ff95 	bl	8001688 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175e:	2214      	movs	r2, #20
 8001760:	2100      	movs	r1, #0
 8001762:	a80f      	add	r0, sp, #60	; 0x3c
 8001764:	f018 f9b5 	bl	8019ad2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001768:	4bb9      	ldr	r3, [pc, #740]	; (8001a50 <main+0x300>)
  huart2.Instance = USART2;
 800176a:	4fba      	ldr	r7, [pc, #744]	; (8001a54 <main+0x304>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800176c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  hi2c1.Instance = I2C1;
 800176e:	4eba      	ldr	r6, [pc, #744]	; (8001a58 <main+0x308>)
  hrtc.Instance = RTC;
 8001770:	f8df a324 	ldr.w	sl, [pc, #804]	; 8001a98 <main+0x348>
  hadc1.Instance = ADC1;
 8001774:	f8df b324 	ldr.w	fp, [pc, #804]	; 8001a9c <main+0x34c>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001778:	f042 0204 	orr.w	r2, r2, #4
 800177c:	64da      	str	r2, [r3, #76]	; 0x4c
 800177e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001780:	f002 0204 	and.w	r2, r2, #4
 8001784:	9203      	str	r2, [sp, #12]
 8001786:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001788:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800178a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800178e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001790:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001792:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001796:	9204      	str	r2, [sp, #16]
 8001798:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800179a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800179c:	f042 0201 	orr.w	r2, r2, #1
 80017a0:	64da      	str	r2, [r3, #76]	; 0x4c
 80017a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017a4:	f002 0201 	and.w	r2, r2, #1
 80017a8:	9205      	str	r2, [sp, #20]
 80017aa:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017ae:	f042 0202 	orr.w	r2, r2, #2
 80017b2:	64da      	str	r2, [r3, #76]	; 0x4c
 80017b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017b6:	f002 0202 	and.w	r2, r2, #2
 80017ba:	9206      	str	r2, [sp, #24]
 80017bc:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017c0:	f042 0208 	orr.w	r2, r2, #8
 80017c4:	64da      	str	r2, [r3, #76]	; 0x4c
 80017c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c8:	f003 0308 	and.w	r3, r3, #8
 80017cc:	9307      	str	r3, [sp, #28]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80017ce:	2200      	movs	r2, #0
 80017d0:	2120      	movs	r1, #32
 80017d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017d6:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80017d8:	f001 fc00 	bl	8002fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_FLASH_GPIO_Port, CS_FLASH_Pin, GPIO_PIN_SET);
 80017dc:	2201      	movs	r2, #1
 80017de:	2104      	movs	r1, #4
 80017e0:	489e      	ldr	r0, [pc, #632]	; (8001a5c <main+0x30c>)
 80017e2:	f001 fbfb 	bl	8002fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin, GPIO_PIN_SET);
 80017e6:	2201      	movs	r2, #1
 80017e8:	21e0      	movs	r1, #224	; 0xe0
 80017ea:	489d      	ldr	r0, [pc, #628]	; (8001a60 <main+0x310>)
 80017ec:	f001 fbf6 	bl	8002fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017f4:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = B1_Pin;
 80017f6:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017f8:	a90f      	add	r1, sp, #60	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017fa:	4b9a      	ldr	r3, [pc, #616]	; (8001a64 <main+0x314>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017fc:	489a      	ldr	r0, [pc, #616]	; (8001a68 <main+0x318>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017fe:	9310      	str	r3, [sp, #64]	; 0x40

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2400      	movs	r4, #0
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001802:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001804:	f001 fb08 	bl	8002e18 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 8001808:	2320      	movs	r3, #32
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800180a:	a90f      	add	r1, sp, #60	; 0x3c
 800180c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000

  /*Configure GPIO pin : SW_ENC_Pin */
  GPIO_InitStruct.Pin = SW_ENC_Pin;
 8001810:	f04f 0910 	mov.w	r9, #16
  GPIO_InitStruct.Pin = LD2_Pin;
 8001814:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001816:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181a:	9412      	str	r4, [sp, #72]	; 0x48
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800181c:	f001 fafc 	bl	8002e18 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(SW_ENC_GPIO_Port, &GPIO_InitStruct);
 8001820:	a90f      	add	r1, sp, #60	; 0x3c
 8001822:	4891      	ldr	r0, [pc, #580]	; (8001a68 <main+0x318>)
  GPIO_InitStruct.Pin = SW_ENC_Pin;
 8001824:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001828:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800182a:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(SW_ENC_GPIO_Port, &GPIO_InitStruct);
 800182c:	f001 faf4 	bl	8002e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC_A_Pin KEY_DN_Pin KEY_UP_Pin KEY_ENTER_Pin 
                           KEY_ESC_Pin ENC_B_Pin */
  GPIO_InitStruct.Pin = ENC_A_Pin|KEY_DN_Pin|KEY_UP_Pin|KEY_ENTER_Pin 
 8001830:	f24f 0314 	movw	r3, #61460	; 0xf014
                          |KEY_ESC_Pin|ENC_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001834:	a90f      	add	r1, sp, #60	; 0x3c
 8001836:	488a      	ldr	r0, [pc, #552]	; (8001a60 <main+0x310>)
  GPIO_InitStruct.Pin = ENC_A_Pin|KEY_DN_Pin|KEY_UP_Pin|KEY_ENTER_Pin 
 8001838:	930f      	str	r3, [sp, #60]	; 0x3c

  /*Configure GPIO pin : CS_FLASH_Pin */
  GPIO_InitStruct.Pin = CS_FLASH_Pin;
 800183a:	f04f 0804 	mov.w	r8, #4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800183e:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001840:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001842:	f001 fae9 	bl	8002e18 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(CS_FLASH_GPIO_Port, &GPIO_InitStruct);
 8001846:	a90f      	add	r1, sp, #60	; 0x3c
 8001848:	4884      	ldr	r0, [pc, #528]	; (8001a5c <main+0x30c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184a:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184e:	9412      	str	r4, [sp, #72]	; 0x48
  GPIO_InitStruct.Pin = CS_FLASH_Pin;
 8001850:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(CS_FLASH_GPIO_Port, &GPIO_InitStruct);
 8001854:	f001 fae0 	bl	8002e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : TFT_CS_Pin TFT_RST_Pin TFT_DC_Pin */
  GPIO_InitStruct.Pin = TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin;
 8001858:	23e0      	movs	r3, #224	; 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800185a:	a90f      	add	r1, sp, #60	; 0x3c
 800185c:	4880      	ldr	r0, [pc, #512]	; (8001a60 <main+0x310>)
  GPIO_InitStruct.Pin = TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin;
 800185e:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001860:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001864:	9412      	str	r4, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001866:	f001 fad7 	bl	8002e18 <HAL_GPIO_Init>
  huart2.Init.BaudRate = 115200;
 800186a:	4a80      	ldr	r2, [pc, #512]	; (8001a6c <main+0x31c>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800186c:	60bc      	str	r4, [r7, #8]
  huart2.Init.BaudRate = 115200;
 800186e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001872:	e887 000c 	stmia.w	r7, {r2, r3}
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001876:	4638      	mov	r0, r7
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001878:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 800187a:	60fc      	str	r4, [r7, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800187c:	613c      	str	r4, [r7, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800187e:	617b      	str	r3, [r7, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001880:	61bc      	str	r4, [r7, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001882:	61fc      	str	r4, [r7, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001884:	623c      	str	r4, [r7, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001886:	627c      	str	r4, [r7, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001888:	f004 fb78 	bl	8005f7c <HAL_UART_Init>
  hi2c1.Init.Timing = 0x00702890;
 800188c:	4b78      	ldr	r3, [pc, #480]	; (8001a70 <main+0x320>)
 800188e:	4979      	ldr	r1, [pc, #484]	; (8001a74 <main+0x324>)
  hi2c1.Init.OwnAddress1 = 0;
 8001890:	60b4      	str	r4, [r6, #8]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001892:	4630      	mov	r0, r6
  hi2c1.Init.Timing = 0x00702890;
 8001894:	e886 000a 	stmia.w	r6, {r1, r3}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001898:	60f5      	str	r5, [r6, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800189a:	6134      	str	r4, [r6, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800189c:	6174      	str	r4, [r6, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800189e:	61b4      	str	r4, [r6, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018a0:	61f4      	str	r4, [r6, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018a2:	6234      	str	r4, [r6, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018a4:	f001 fba5 	bl	8002ff2 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018a8:	4621      	mov	r1, r4
 80018aa:	4630      	mov	r0, r6
 80018ac:	f001 fbf2 	bl	8003094 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 1) != HAL_OK)
 80018b0:	4629      	mov	r1, r5
 80018b2:	4630      	mov	r0, r6
 80018b4:	f001 fc14 	bl	80030e0 <HAL_I2CEx_ConfigDigitalFilter>
  hqspi.Instance = QUADSPI;
 80018b8:	486f      	ldr	r0, [pc, #444]	; (8001a78 <main+0x328>)
 80018ba:	4b70      	ldr	r3, [pc, #448]	; (8001a7c <main+0x32c>)
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80018bc:	6184      	str	r4, [r0, #24]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80018be:	e880 0318 	stmia.w	r0, {r3, r4, r8, r9}
  hqspi.Init.FlashSize = 23;
 80018c2:	2317      	movs	r3, #23
 80018c4:	6103      	str	r3, [r0, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_2_CYCLE;
 80018c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018ca:	6143      	str	r3, [r0, #20]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80018cc:	f002 f924 	bl	8003b18 <HAL_QSPI_Init>
  hspi3.Instance = SPI3;
 80018d0:	486b      	ldr	r0, [pc, #428]	; (8001a80 <main+0x330>)
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80018d2:	4b6c      	ldr	r3, [pc, #432]	; (8001a84 <main+0x334>)
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80018d4:	6084      	str	r4, [r0, #8]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80018d6:	f44f 7682 	mov.w	r6, #260	; 0x104
 80018da:	e880 0048 	stmia.w	r0, {r3, r6}
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80018de:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80018e2:	60c3      	str	r3, [r0, #12]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80018e4:	f44f 7300 	mov.w	r3, #512	; 0x200
  hspi3.Init.CRCPolynomial = 7;
 80018e8:	2207      	movs	r2, #7
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80018ea:	6183      	str	r3, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80018ec:	2308      	movs	r3, #8
 80018ee:	61c3      	str	r3, [r0, #28]
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018f0:	6343      	str	r3, [r0, #52]	; 0x34
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018f2:	6104      	str	r4, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018f4:	6144      	str	r4, [r0, #20]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018f6:	6204      	str	r4, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80018f8:	6244      	str	r4, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018fa:	6284      	str	r4, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80018fc:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80018fe:	6304      	str	r4, [r0, #48]	; 0x30
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001900:	f003 f9fa 	bl	8004cf8 <HAL_SPI_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001904:	464a      	mov	r2, r9
 8001906:	4621      	mov	r1, r4
 8001908:	a80b      	add	r0, sp, #44	; 0x2c
  htim3.Instance = TIM3;
 800190a:	4e5f      	ldr	r6, [pc, #380]	; (8001a88 <main+0x338>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800190c:	f018 f8e1 	bl	8019ad2 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001910:	221c      	movs	r2, #28
 8001912:	4621      	mov	r1, r4
 8001914:	a80f      	add	r0, sp, #60	; 0x3c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001916:	9408      	str	r4, [sp, #32]
 8001918:	9409      	str	r4, [sp, #36]	; 0x24
 800191a:	940a      	str	r4, [sp, #40]	; 0x28
  TIM_OC_InitTypeDef sConfigOC = {0};
 800191c:	f018 f8d9 	bl	8019ad2 <memset>
  htim3.Instance = TIM3;
 8001920:	4b5a      	ldr	r3, [pc, #360]	; (8001a8c <main+0x33c>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001922:	60b4      	str	r4, [r6, #8]
  htim3.Init.Period = 4095;
 8001924:	f640 79ff 	movw	r9, #4095	; 0xfff
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001928:	4630      	mov	r0, r6
  htim3.Init.Prescaler = 1;
 800192a:	e886 0028 	stmia.w	r6, {r3, r5}
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800192e:	6134      	str	r4, [r6, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001930:	61b4      	str	r4, [r6, #24]
  htim3.Init.Period = 4095;
 8001932:	f8c6 900c 	str.w	r9, [r6, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001936:	f003 fe71 	bl	800561c <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800193a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800193e:	a90b      	add	r1, sp, #44	; 0x2c
 8001940:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001942:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001944:	f003 ff74 	bl	8005830 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001948:	4630      	mov	r0, r6
 800194a:	f003 fe81 	bl	8005650 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800194e:	a908      	add	r1, sp, #32
 8001950:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001952:	9408      	str	r4, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001954:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001956:	f004 f83f 	bl	80059d8 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800195a:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800195c:	4622      	mov	r2, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800195e:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001960:	a90f      	add	r1, sp, #60	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001962:	2302      	movs	r3, #2
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001964:	4630      	mov	r0, r6
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001966:	9311      	str	r3, [sp, #68]	; 0x44
  sConfigOC.Pulse = 0;
 8001968:	9410      	str	r4, [sp, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800196a:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800196c:	f003 fed0 	bl	8005710 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001970:	4642      	mov	r2, r8
 8001972:	a90f      	add	r1, sp, #60	; 0x3c
 8001974:	4630      	mov	r0, r6
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001976:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001978:	f003 feca 	bl	8005710 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim3);
 800197c:	4630      	mov	r0, r6
 800197e:	f000 fb3f 	bl	8002000 <HAL_TIM_MspPostInit>
  RTC_TimeTypeDef sTime = {0};
 8001982:	4621      	mov	r1, r4
 8001984:	2214      	movs	r2, #20
 8001986:	a80f      	add	r0, sp, #60	; 0x3c
 8001988:	f018 f8a3 	bl	8019ad2 <memset>
  hrtc.Instance = RTC;
 800198c:	4b40      	ldr	r3, [pc, #256]	; (8001a90 <main+0x340>)
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800198e:	f8ca 4010 	str.w	r4, [sl, #16]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001992:	e88a 0018 	stmia.w	sl, {r3, r4}
  hrtc.Init.SynchPrediv = 255;
 8001996:	22ff      	movs	r2, #255	; 0xff
  hrtc.Init.AsynchPrediv = 127;
 8001998:	237f      	movs	r3, #127	; 0x7f
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800199a:	4650      	mov	r0, sl
  hrtc.Init.AsynchPrediv = 127;
 800199c:	f8ca 3008 	str.w	r3, [sl, #8]
 80019a0:	9301      	str	r3, [sp, #4]
  hrtc.Init.SynchPrediv = 255;
 80019a2:	f8ca 200c 	str.w	r2, [sl, #12]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80019a6:	f8ca 4014 	str.w	r4, [sl, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80019aa:	f8ca 4018 	str.w	r4, [sl, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80019ae:	f8ca 401c 	str.w	r4, [sl, #28]
  RTC_DateTypeDef sDate = {0};
 80019b2:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80019b4:	f003 f828 	bl	8004a08 <HAL_RTC_Init>
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80019b8:	462a      	mov	r2, r5
 80019ba:	a90f      	add	r1, sp, #60	; 0x3c
 80019bc:	4650      	mov	r0, sl
  sTime.Hours = 0x0;
 80019be:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
  sTime.Minutes = 0x0;
 80019c2:	f88d 403d 	strb.w	r4, [sp, #61]	; 0x3d
  sTime.Seconds = 0x0;
 80019c6:	f88d 403e 	strb.w	r4, [sp, #62]	; 0x3e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80019ca:	9412      	str	r4, [sp, #72]	; 0x48
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80019cc:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80019ce:	f003 f86d 	bl	8004aac <HAL_RTC_SetTime>
  sDate.Year = 0x19;
 80019d2:	2219      	movs	r2, #25
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80019d4:	a90b      	add	r1, sp, #44	; 0x2c
  sDate.Year = 0x19;
 80019d6:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80019da:	4650      	mov	r0, sl
 80019dc:	462a      	mov	r2, r5
  ADC_ChannelConfTypeDef sConfig = {0};
 80019de:	f04f 0a18 	mov.w	sl, #24
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80019e2:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 80019e6:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
  sDate.Date = 0x1;
 80019ea:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80019ee:	f003 f8bc 	bl	8004b6a <HAL_RTC_SetDate>
  MX_FATFS_Init();
 80019f2:	f004 ff61 	bl	80068b8 <MX_FATFS_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 80019f6:	4652      	mov	r2, sl
 80019f8:	4621      	mov	r1, r4
 80019fa:	a80f      	add	r0, sp, #60	; 0x3c
  ADC_MultiModeTypeDef multimode = {0};
 80019fc:	940b      	str	r4, [sp, #44]	; 0x2c
 80019fe:	940c      	str	r4, [sp, #48]	; 0x30
 8001a00:	940d      	str	r4, [sp, #52]	; 0x34
  ADC_ChannelConfTypeDef sConfig = {0};
 8001a02:	f018 f866 	bl	8019ad2 <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001a06:	4923      	ldr	r1, [pc, #140]	; (8001a94 <main+0x344>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a08:	f8cb 4008 	str.w	r4, [fp, #8]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001a0c:	f44f 2e80 	mov.w	lr, #262144	; 0x40000
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a10:	4658      	mov	r0, fp
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001a12:	e88b 4002 	stmia.w	fp, {r1, lr}
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a16:	f8cb 400c 	str.w	r4, [fp, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001a1a:	f8cb 5010 	str.w	r5, [fp, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001a1e:	f88b 4018 	strb.w	r4, [fp, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a22:	f88b 4019 	strb.w	r4, [fp, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a26:	f88b 4020 	strb.w	r4, [fp, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a2a:	f8cb 4028 	str.w	r4, [fp, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a2e:	f8cb 402c 	str.w	r4, [fp, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a32:	f88b 4030 	strb.w	r4, [fp, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001a36:	f8cb 4034 	str.w	r4, [fp, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001a3a:	f88b 4038 	strb.w	r4, [fp, #56]	; 0x38
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a3e:	f8cb 8014 	str.w	r8, [fp, #20]
  hadc1.Init.NbrOfConversion = 4;
 8001a42:	f8cb 801c 	str.w	r8, [fp, #28]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a46:	f000 fd8d 	bl	8002564 <HAL_ADC_Init>
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001a4a:	a90b      	add	r1, sp, #44	; 0x2c
 8001a4c:	4658      	mov	r0, fp
 8001a4e:	e027      	b.n	8001aa0 <main+0x350>
 8001a50:	40021000 	.word	0x40021000
 8001a54:	2000b488 	.word	0x2000b488
 8001a58:	2000b310 	.word	0x2000b310
 8001a5c:	48000c00 	.word	0x48000c00
 8001a60:	48000400 	.word	0x48000400
 8001a64:	10210000 	.word	0x10210000
 8001a68:	48000800 	.word	0x48000800
 8001a6c:	40004400 	.word	0x40004400
 8001a70:	00702890 	.word	0x00702890
 8001a74:	40005400 	.word	0x40005400
 8001a78:	2000b508 	.word	0x2000b508
 8001a7c:	a0001000 	.word	0xa0001000
 8001a80:	2000b39c 	.word	0x2000b39c
 8001a84:	40003c00 	.word	0x40003c00
 8001a88:	2000b35c 	.word	0x2000b35c
 8001a8c:	40000400 	.word	0x40000400
 8001a90:	40002800 	.word	0x40002800
 8001a94:	50040000 	.word	0x50040000
 8001a98:	2000b464 	.word	0x2000b464
 8001a9c:	2000b400 	.word	0x2000b400
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001aa0:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001aa2:	f001 f81d 	bl	8002ae0 <HAL_ADCEx_MultiModeConfigChannel>
  sConfig.Channel = ADC_CHANNEL_1;
 8001aa6:	4956      	ldr	r1, [pc, #344]	; (8001c00 <main+0x4b0>)
 8001aa8:	910f      	str	r1, [sp, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001aaa:	2106      	movs	r1, #6
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001aac:	9b01      	ldr	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001aae:	9110      	str	r1, [sp, #64]	; 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8001ab0:	9111      	str	r1, [sp, #68]	; 0x44
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ab2:	4658      	mov	r0, fp
 8001ab4:	a90f      	add	r1, sp, #60	; 0x3c
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001ab6:	9312      	str	r3, [sp, #72]	; 0x48
  sConfig.Offset = 0;
 8001ab8:	9414      	str	r4, [sp, #80]	; 0x50
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001aba:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001abe:	f000 fe31 	bl	8002724 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_2;
 8001ac2:	4b50      	ldr	r3, [pc, #320]	; (8001c04 <main+0x4b4>)
 8001ac4:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ac6:	a90f      	add	r1, sp, #60	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001ac8:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001aca:	4658      	mov	r0, fp
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001acc:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ace:	f000 fe29 	bl	8002724 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_3;
 8001ad2:	4b4d      	ldr	r3, [pc, #308]	; (8001c08 <main+0x4b8>)
 8001ad4:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ad6:	a90f      	add	r1, sp, #60	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001ad8:	2312      	movs	r3, #18
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ada:	4658      	mov	r0, fp
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001adc:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ade:	f000 fe21 	bl	8002724 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_4;
 8001ae2:	4b4a      	ldr	r3, [pc, #296]	; (8001c0c <main+0x4bc>)
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001ae4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ae8:	a90f      	add	r1, sp, #60	; 0x3c
  hdac1.Instance = DAC1;
 8001aea:	f8df a150 	ldr.w	sl, [pc, #336]	; 8001c3c <main+0x4ec>
  sConfig.Channel = ADC_CHANNEL_4;
 8001aee:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001af0:	4658      	mov	r0, fp
 8001af2:	f000 fe17 	bl	8002724 <HAL_ADC_ConfigChannel>
  DAC_ChannelConfTypeDef sConfig = {0};
 8001af6:	4621      	mov	r1, r4
 8001af8:	2224      	movs	r2, #36	; 0x24
 8001afa:	a80f      	add	r0, sp, #60	; 0x3c
 8001afc:	f017 ffe9 	bl	8019ad2 <memset>
  hdac1.Instance = DAC1;
 8001b00:	4b43      	ldr	r3, [pc, #268]	; (8001c10 <main+0x4c0>)
 8001b02:	f8ca 3000 	str.w	r3, [sl]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001b06:	4650      	mov	r0, sl
 8001b08:	f001 f8b6 	bl	8002c78 <HAL_DAC_Init>
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001b0c:	4622      	mov	r2, r4
 8001b0e:	a90f      	add	r1, sp, #60	; 0x3c
 8001b10:	4650      	mov	r0, sl
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001b12:	940f      	str	r4, [sp, #60]	; 0x3c
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001b14:	9410      	str	r4, [sp, #64]	; 0x40
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001b16:	9411      	str	r4, [sp, #68]	; 0x44
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001b18:	9412      	str	r4, [sp, #72]	; 0x48
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001b1a:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001b1c:	f001 f8f2 	bl	8002d04 <HAL_DAC_ConfigChannel>
  MX_USB_DEVICE_Init();
 8001b20:	f00c f940 	bl	800dda4 <MX_USB_DEVICE_Init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001b24:	4621      	mov	r1, r4
 8001b26:	4630      	mov	r0, r6
 8001b28:	f003 ff24 	bl	8005974 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001b2c:	4641      	mov	r1, r8
 8001b2e:	4630      	mov	r0, r6
 8001b30:	f003 ff20 	bl	8005974 <HAL_TIM_PWM_Start>
  __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 4095);			// PWM_CH1 = 4095 100% brilho
 8001b34:	6833      	ldr	r3, [r6, #0]
 8001b36:	f8c3 9034 	str.w	r9, [r3, #52]	; 0x34
  __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 4095);		    // PWM_CH2 = 4095
 8001b3a:	f8c3 9038 	str.w	r9, [r3, #56]	; 0x38
  ST7735_Init();
 8001b3e:	f7ff fa19 	bl	8000f74 <ST7735_Init>
  ST7735_Clear(0x0000);
 8001b42:	4620      	mov	r0, r4
 8001b44:	f7ff fadc 	bl	8001100 <ST7735_Clear>
  tft_backlight(100);
 8001b48:	2064      	movs	r0, #100	; 0x64
 8001b4a:	f000 f89f 	bl	8001c8c <tft_backlight>
  Evt_InitQueue();
 8001b4e:	f7ff fcbd 	bl	80014cc <Evt_InitQueue>
  KeyboardInit(0x01);
 8001b52:	4628      	mov	r0, r5
 8001b54:	f7ff fb8c 	bl	8001270 <KeyboardInit>
  W25qxx_Init();
 8001b58:	f000 fbd6 	bl	8002308 <W25qxx_Init>
  temperatura = (float)(2000 *(3.30/4095.0));
 8001b5c:	4b2d      	ldr	r3, [pc, #180]	; (8001c14 <main+0x4c4>)
 8001b5e:	4a2e      	ldr	r2, [pc, #184]	; (8001c18 <main+0x4c8>)
  sprintf(buffer, "Temperatura: %0.1f°C\n", temperatura);
 8001b60:	492e      	ldr	r1, [pc, #184]	; (8001c1c <main+0x4cc>)
  temperatura = (float)(2000 *(3.30/4095.0));
 8001b62:	601a      	str	r2, [r3, #0]
  sprintf(buffer, "Temperatura: %0.1f°C\n", temperatura);
 8001b64:	482e      	ldr	r0, [pc, #184]	; (8001c20 <main+0x4d0>)
  lv_disp_buf_init(&disp_buf, buf, buf2, LV_HOR_RES_MAX * 10);    //Initialize the display buffer
 8001b66:	4c2f      	ldr	r4, [pc, #188]	; (8001c24 <main+0x4d4>)
	  if(TelaAtiva != TelaPrincipal &&  ( (HAL_GetTick() - timer_gui) > 60000) ) {
 8001b68:	4d2f      	ldr	r5, [pc, #188]	; (8001c28 <main+0x4d8>)
  sprintf(buffer, "Temperatura: %0.1f°C\n", temperatura);
 8001b6a:	a323      	add	r3, pc, #140	; (adr r3, 8001bf8 <main+0x4a8>)
 8001b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b70:	f017 ffd4 	bl	8019b1c <sprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY); // send message via UART
 8001b74:	482a      	ldr	r0, [pc, #168]	; (8001c20 <main+0x4d0>)
 8001b76:	f7fe fb2b 	bl	80001d0 <strlen>
 8001b7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b7e:	b282      	uxth	r2, r0
 8001b80:	4927      	ldr	r1, [pc, #156]	; (8001c20 <main+0x4d0>)
 8001b82:	4638      	mov	r0, r7
 8001b84:	f004 f973 	bl	8005e6e <HAL_UART_Transmit>
  lv_disp_buf_init(&disp_buf, buf, buf2, LV_HOR_RES_MAX * 10);    //Initialize the display buffer
 8001b88:	4a28      	ldr	r2, [pc, #160]	; (8001c2c <main+0x4dc>)
 8001b8a:	4929      	ldr	r1, [pc, #164]	; (8001c30 <main+0x4e0>)
 8001b8c:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8001b90:	4620      	mov	r0, r4
 8001b92:	f011 ffec 	bl	8013b6e <lv_disp_buf_init>
  lv_init();
 8001b96:	f00c fd81 	bl	800e69c <lv_init>
  lv_disp_drv_init(&disp_drv);          //Basic initialization
 8001b9a:	a80f      	add	r0, sp, #60	; 0x3c
 8001b9c:	f011 ffca 	bl	8013b34 <lv_disp_drv_init>
  disp_drv.hor_res = 160;               //Set the horizontal resolution
 8001ba0:	23a0      	movs	r3, #160	; 0xa0
 8001ba2:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
  disp_drv.ver_res = 128;               //Set the vertical resolution
 8001ba6:	2380      	movs	r3, #128	; 0x80
 8001ba8:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  lv_disp_drv_register(&disp_drv);      //Finally register the driver
 8001bac:	a80f      	add	r0, sp, #60	; 0x3c
  disp_drv.flush_cb = ST7735_Flush_3;	//Set your driver function
 8001bae:	4b21      	ldr	r3, [pc, #132]	; (8001c34 <main+0x4e4>)
 8001bb0:	9312      	str	r3, [sp, #72]	; 0x48
  disp_drv.buffer = &disp_buf;          //Assign the buffer to teh display
 8001bb2:	9410      	str	r4, [sp, #64]	; 0x40
  lv_disp_drv_register(&disp_drv);      //Finally register the driver
 8001bb4:	f011 ffea 	bl	8013b8c <lv_disp_drv_register>
  main_screen();
 8001bb8:	f006 fb7c 	bl	80082b4 <main_screen>
	  if(HAL_GetTick() - timer_loop >= 500) {
 8001bbc:	4c1e      	ldr	r4, [pc, #120]	; (8001c38 <main+0x4e8>)
 8001bbe:	f000 fc9d 	bl	80024fc <HAL_GetTick>
 8001bc2:	6823      	ldr	r3, [r4, #0]
 8001bc4:	1ac0      	subs	r0, r0, r3
 8001bc6:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8001bca:	d307      	bcc.n	8001bdc <main+0x48c>
		  timer_loop = HAL_GetTick();
 8001bcc:	f000 fc96 	bl	80024fc <HAL_GetTick>
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001bd0:	2120      	movs	r1, #32
		  timer_loop = HAL_GetTick();
 8001bd2:	6020      	str	r0, [r4, #0]
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001bd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bd8:	f001 fa05 	bl	8002fe6 <HAL_GPIO_TogglePin>
	  ButtonEvent();
 8001bdc:	f7ff fc80 	bl	80014e0 <ButtonEvent>
	  Read_Encoder();
 8001be0:	f000 f86a 	bl	8001cb8 <Read_Encoder>
	  lv_task_handler();
 8001be4:	f012 fd62 	bl	80146ac <lv_task_handler>
	  if(TelaAtiva != TelaPrincipal &&  ( (HAL_GetTick() - timer_gui) > 60000) ) {
 8001be8:	682b      	ldr	r3, [r5, #0]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d0e7      	beq.n	8001bbe <main+0x46e>
 8001bee:	f000 fc85 	bl	80024fc <HAL_GetTick>
 8001bf2:	e7e4      	b.n	8001bbe <main+0x46e>
 8001bf4:	f3af 8000 	nop.w
 8001bf8:	a0000000 	.word	0xa0000000
 8001bfc:	3ff9c99c 	.word	0x3ff9c99c
 8001c00:	04300002 	.word	0x04300002
 8001c04:	08600004 	.word	0x08600004
 8001c08:	0c900008 	.word	0x0c900008
 8001c0c:	10c00010 	.word	0x10c00010
 8001c10:	40007400 	.word	0x40007400
 8001c14:	20000014 	.word	0x20000014
 8001c18:	3fce4ce5 	.word	0x3fce4ce5
 8001c1c:	0801c60d 	.word	0x0801c60d
 8001c20:	20004ce8 	.word	0x20004ce8
 8001c24:	20004db0 	.word	0x20004db0
 8001c28:	200033e4 	.word	0x200033e4
 8001c2c:	20004068 	.word	0x20004068
 8001c30:	200033e8 	.word	0x200033e8
 8001c34:	08001171 	.word	0x08001171
 8001c38:	20004dec 	.word	0x20004dec
 8001c3c:	2000b2fc 	.word	0x2000b2fc

08001c40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c40:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001c42:	4c0f      	ldr	r4, [pc, #60]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001c44:	6803      	ldr	r3, [r0, #0]
 8001c46:	42a3      	cmp	r3, r4
{
 8001c48:	4605      	mov	r5, r0
  if (htim->Instance == TIM6) {
 8001c4a:	d101      	bne.n	8001c50 <HAL_TIM_PeriodElapsedCallback+0x10>
    HAL_IncTick();
 8001c4c:	f000 fc4a 	bl	80024e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM6) {
 8001c50:	682b      	ldr	r3, [r5, #0]
 8001c52:	42a3      	cmp	r3, r4
 8001c54:	d102      	bne.n	8001c5c <HAL_TIM_PeriodElapsedCallback+0x1c>
	  lv_tick_inc(1);
 8001c56:	2001      	movs	r0, #1
 8001c58:	f012 f852 	bl	8013d00 <lv_tick_inc>
  }
  if (htim->Instance == TIM6) {
 8001c5c:	682b      	ldr	r3, [r5, #0]
 8001c5e:	42a3      	cmp	r3, r4
 8001c60:	d10c      	bne.n	8001c7c <HAL_TIM_PeriodElapsedCallback+0x3c>
 	  timer_key++;
 8001c62:	4a08      	ldr	r2, [pc, #32]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001c64:	6813      	ldr	r3, [r2, #0]
 8001c66:	3301      	adds	r3, #1
 	  if(timer_key >= 40) {
 8001c68:	2b27      	cmp	r3, #39	; 0x27
 8001c6a:	d801      	bhi.n	8001c70 <HAL_TIM_PeriodElapsedCallback+0x30>
 	  timer_key++;
 8001c6c:	6013      	str	r3, [r2, #0]
 8001c6e:	bd38      	pop	{r3, r4, r5, pc}
 		  timer_key = 0;
 8001c70:	2300      	movs	r3, #0
 8001c72:	6013      	str	r3, [r2, #0]
 		  Key_Read();
 	  }
   }
  /* USER CODE END Callback 1 */
}
 8001c74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 		  Key_Read();
 8001c78:	f7ff bc00 	b.w	800147c <Key_Read>
 8001c7c:	bd38      	pop	{r3, r4, r5, pc}
 8001c7e:	bf00      	nop
 8001c80:	40001000 	.word	0x40001000
 8001c84:	20004de8 	.word	0x20004de8

08001c88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c88:	4770      	bx	lr
	...

08001c8c <tft_backlight>:
	}
}

void tft_backlight(uint16_t value)
{
	if(value >= 0 && value <= 100) {
 8001c8c:	2864      	cmp	r0, #100	; 0x64
 8001c8e:	d80b      	bhi.n	8001ca8 <tft_backlight+0x1c>
		tft_pwm = value * 40;
 8001c90:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c94:	00c1      	lsls	r1, r0, #3
 8001c96:	4b05      	ldr	r3, [pc, #20]	; (8001cac <tft_backlight+0x20>)
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, tft_pwm);		// PWM_CH1 = TFT
		//__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, tft_pwm);		// PWM_CH2 = TFT
		logI("I - TFT_PWM: %ld\n\r", tft_pwm);
 8001c98:	4805      	ldr	r0, [pc, #20]	; (8001cb0 <tft_backlight+0x24>)
		tft_pwm = value * 40;
 8001c9a:	b289      	uxth	r1, r1
 8001c9c:	8019      	strh	r1, [r3, #0]
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, tft_pwm);		// PWM_CH1 = TFT
 8001c9e:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <tft_backlight+0x28>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	6359      	str	r1, [r3, #52]	; 0x34
		logI("I - TFT_PWM: %ld\n\r", tft_pwm);
 8001ca4:	f7ff bce2 	b.w	800166c <logI>
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	20004de2 	.word	0x20004de2
 8001cb0:	0801c655 	.word	0x0801c655
 8001cb4:	2000b35c 	.word	0x2000b35c

08001cb8 <Read_Encoder>:
{
 8001cb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	aVal = HAL_GPIO_ReadPin(ENC_B_GPIO_Port, ENC_B_Pin);
 8001cba:	2110      	movs	r1, #16
 8001cbc:	481d      	ldr	r0, [pc, #116]	; (8001d34 <Read_Encoder+0x7c>)
	if (aVal != CLKLast)
 8001cbe:	4e1e      	ldr	r6, [pc, #120]	; (8001d38 <Read_Encoder+0x80>)
	aVal = HAL_GPIO_ReadPin(ENC_B_GPIO_Port, ENC_B_Pin);
 8001cc0:	4d1e      	ldr	r5, [pc, #120]	; (8001d3c <Read_Encoder+0x84>)
 8001cc2:	f001 f985 	bl	8002fd0 <HAL_GPIO_ReadPin>
	if (aVal != CLKLast)
 8001cc6:	7833      	ldrb	r3, [r6, #0]
	aVal = HAL_GPIO_ReadPin(ENC_B_GPIO_Port, ENC_B_Pin);
 8001cc8:	7028      	strb	r0, [r5, #0]
	if (aVal != CLKLast)
 8001cca:	4283      	cmp	r3, r0
 8001ccc:	d029      	beq.n	8001d22 <Read_Encoder+0x6a>
			if (HAL_GPIO_ReadPin(ENC_A_GPIO_Port, ENC_A_Pin) != aVal)
 8001cce:	2104      	movs	r1, #4
 8001cd0:	4818      	ldr	r0, [pc, #96]	; (8001d34 <Read_Encoder+0x7c>)
 8001cd2:	4c1b      	ldr	r4, [pc, #108]	; (8001d40 <Read_Encoder+0x88>)
 8001cd4:	f001 f97c 	bl	8002fd0 <HAL_GPIO_ReadPin>
 8001cd8:	782f      	ldrb	r7, [r5, #0]
 8001cda:	4a1a      	ldr	r2, [pc, #104]	; (8001d44 <Read_Encoder+0x8c>)
				encoderPosCount++;
 8001cdc:	6823      	ldr	r3, [r4, #0]
			if (HAL_GPIO_ReadPin(ENC_A_GPIO_Port, ENC_A_Pin) != aVal)
 8001cde:	42b8      	cmp	r0, r7
 8001ce0:	d023      	beq.n	8001d2a <Read_Encoder+0x72>
				encoderPosCount++;
 8001ce2:	3301      	adds	r3, #1
				if(encoderPosCount >= 100) encoderPosCount = 100;
 8001ce4:	2b63      	cmp	r3, #99	; 0x63
 8001ce6:	bf88      	it	hi
 8001ce8:	2364      	movhi	r3, #100	; 0x64
 8001cea:	6023      	str	r3, [r4, #0]
				bCW = true;
 8001cec:	2301      	movs	r3, #1
			sprintf(buffer, "Encoder - aVal: %d DT: %d, EncoderPosition: %ld\n", aVal, HAL_GPIO_ReadPin(ENC_A_GPIO_Port, ENC_A_Pin), encoderPosCount);
 8001cee:	2104      	movs	r1, #4
 8001cf0:	4810      	ldr	r0, [pc, #64]	; (8001d34 <Read_Encoder+0x7c>)
				bCW = false;
 8001cf2:	7013      	strb	r3, [r2, #0]
			sprintf(buffer, "Encoder - aVal: %d DT: %d, EncoderPosition: %ld\n", aVal, HAL_GPIO_ReadPin(ENC_A_GPIO_Port, ENC_A_Pin), encoderPosCount);
 8001cf4:	f001 f96c 	bl	8002fd0 <HAL_GPIO_ReadPin>
 8001cf8:	6823      	ldr	r3, [r4, #0]
 8001cfa:	4913      	ldr	r1, [pc, #76]	; (8001d48 <Read_Encoder+0x90>)
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	463a      	mov	r2, r7
 8001d00:	4603      	mov	r3, r0
 8001d02:	4812      	ldr	r0, [pc, #72]	; (8001d4c <Read_Encoder+0x94>)
 8001d04:	f017 ff0a 	bl	8019b1c <sprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001d08:	4810      	ldr	r0, [pc, #64]	; (8001d4c <Read_Encoder+0x94>)
 8001d0a:	f7fe fa61 	bl	80001d0 <strlen>
 8001d0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d12:	b282      	uxth	r2, r0
 8001d14:	490d      	ldr	r1, [pc, #52]	; (8001d4c <Read_Encoder+0x94>)
 8001d16:	480e      	ldr	r0, [pc, #56]	; (8001d50 <Read_Encoder+0x98>)
 8001d18:	f004 f8a9 	bl	8005e6e <HAL_UART_Transmit>
			tft_backlight(encoderPosCount);
 8001d1c:	8820      	ldrh	r0, [r4, #0]
 8001d1e:	f7ff ffb5 	bl	8001c8c <tft_backlight>
	CLKLast = aVal;
 8001d22:	7828      	ldrb	r0, [r5, #0]
 8001d24:	7030      	strb	r0, [r6, #0]
}
 8001d26:	b003      	add	sp, #12
 8001d28:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if(encoderPosCount >= 1) encoderPosCount--;
 8001d2a:	b10b      	cbz	r3, 8001d30 <Read_Encoder+0x78>
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	6023      	str	r3, [r4, #0]
				bCW = false;
 8001d30:	2300      	movs	r3, #0
 8001d32:	e7dc      	b.n	8001cee <Read_Encoder+0x36>
 8001d34:	48000400 	.word	0x48000400
 8001d38:	20004df0 	.word	0x20004df0
 8001d3c:	20004df1 	.word	0x20004df1
 8001d40:	20004df4 	.word	0x20004df4
 8001d44:	20004df2 	.word	0x20004df2
 8001d48:	0801c624 	.word	0x0801c624
 8001d4c:	20004ce8 	.word	0x20004ce8
 8001d50:	2000b488 	.word	0x2000b488

08001d54 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d54:	4b0a      	ldr	r3, [pc, #40]	; (8001d80 <HAL_MspInit+0x2c>)
 8001d56:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d58:	f042 0201 	orr.w	r2, r2, #1
 8001d5c:	661a      	str	r2, [r3, #96]	; 0x60
 8001d5e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8001d60:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d62:	f002 0201 	and.w	r2, r2, #1
 8001d66:	9200      	str	r2, [sp, #0]
 8001d68:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d6a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d6c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d70:	659a      	str	r2, [r3, #88]	; 0x58
 8001d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d78:	9301      	str	r3, [sp, #4]
 8001d7a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d7c:	b002      	add	sp, #8
 8001d7e:	4770      	bx	lr
 8001d80:	40021000 	.word	0x40021000

08001d84 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d84:	b510      	push	{r4, lr}
 8001d86:	4604      	mov	r4, r0
 8001d88:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8a:	2214      	movs	r2, #20
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	a803      	add	r0, sp, #12
 8001d90:	f017 fe9f 	bl	8019ad2 <memset>
  if(hadc->Instance==ADC1)
 8001d94:	6822      	ldr	r2, [r4, #0]
 8001d96:	4b11      	ldr	r3, [pc, #68]	; (8001ddc <HAL_ADC_MspInit+0x58>)
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d11d      	bne.n	8001dd8 <HAL_ADC_MspInit+0x54>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001d9c:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8001da0:	f5a3 33f8 	sub.w	r3, r3, #126976	; 0x1f000
    PC3     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001da4:	a903      	add	r1, sp, #12
    __HAL_RCC_ADC_CLK_ENABLE();
 8001da6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001da8:	480d      	ldr	r0, [pc, #52]	; (8001de0 <HAL_ADC_MspInit+0x5c>)
    __HAL_RCC_ADC_CLK_ENABLE();
 8001daa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001dae:	64da      	str	r2, [r3, #76]	; 0x4c
 8001db0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001db2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001db6:	9201      	str	r2, [sp, #4]
 8001db8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001dbc:	f042 0204 	orr.w	r2, r2, #4
 8001dc0:	64da      	str	r2, [r3, #76]	; 0x4c
 8001dc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	9302      	str	r3, [sp, #8]
 8001dca:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001dcc:	230f      	movs	r3, #15
 8001dce:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001dd0:	230b      	movs	r3, #11
 8001dd2:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dd4:	f001 f820 	bl	8002e18 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001dd8:	b008      	add	sp, #32
 8001dda:	bd10      	pop	{r4, pc}
 8001ddc:	50040000 	.word	0x50040000
 8001de0:	48000800 	.word	0x48000800

08001de4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001de4:	b510      	push	{r4, lr}
 8001de6:	4604      	mov	r4, r0
 8001de8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dea:	2214      	movs	r2, #20
 8001dec:	2100      	movs	r1, #0
 8001dee:	a803      	add	r0, sp, #12
 8001df0:	f017 fe6f 	bl	8019ad2 <memset>
  if(hdac->Instance==DAC1)
 8001df4:	6822      	ldr	r2, [r4, #0]
 8001df6:	4b15      	ldr	r3, [pc, #84]	; (8001e4c <HAL_DAC_MspInit+0x68>)
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d124      	bne.n	8001e46 <HAL_DAC_MspInit+0x62>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001dfc:	f503 33ce 	add.w	r3, r3, #105472	; 0x19c00
    PA4     ------> DAC1_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e00:	a903      	add	r1, sp, #12
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001e02:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e04:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001e08:	659a      	str	r2, [r3, #88]	; 0x58
 8001e0a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e0c:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8001e10:	9201      	str	r2, [sp, #4]
 8001e12:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e16:	f042 0201 	orr.w	r2, r2, #1
 8001e1a:	64da      	str	r2, [r3, #76]	; 0x4c
 8001e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	9302      	str	r3, [sp, #8]
 8001e24:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001e26:	2310      	movs	r3, #16
 8001e28:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e32:	f000 fff1 	bl	8002e18 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001e36:	2200      	movs	r2, #0
 8001e38:	2036      	movs	r0, #54	; 0x36
 8001e3a:	4611      	mov	r1, r2
 8001e3c:	f000 feda 	bl	8002bf4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001e40:	2036      	movs	r0, #54	; 0x36
 8001e42:	f000 ff0b 	bl	8002c5c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001e46:	b008      	add	sp, #32
 8001e48:	bd10      	pop	{r4, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40007400 	.word	0x40007400

08001e50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e50:	b510      	push	{r4, lr}
 8001e52:	4604      	mov	r4, r0
 8001e54:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e56:	2214      	movs	r2, #20
 8001e58:	2100      	movs	r1, #0
 8001e5a:	a803      	add	r0, sp, #12
 8001e5c:	f017 fe39 	bl	8019ad2 <memset>
  if(hi2c->Instance==I2C1)
 8001e60:	6822      	ldr	r2, [r4, #0]
 8001e62:	4b13      	ldr	r3, [pc, #76]	; (8001eb0 <HAL_I2C_MspInit+0x60>)
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d121      	bne.n	8001eac <HAL_I2C_MspInit+0x5c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e68:	4c12      	ldr	r4, [pc, #72]	; (8001eb4 <HAL_I2C_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e6a:	4813      	ldr	r0, [pc, #76]	; (8001eb8 <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e6c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001e6e:	f043 0302 	orr.w	r3, r3, #2
 8001e72:	64e3      	str	r3, [r4, #76]	; 0x4c
 8001e74:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	9301      	str	r3, [sp, #4]
 8001e7c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e7e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e82:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e84:	2312      	movs	r3, #18
 8001e86:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e90:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e92:	2304      	movs	r3, #4
 8001e94:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e96:	f000 ffbf 	bl	8002e18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001e9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ea0:	65a3      	str	r3, [r4, #88]	; 0x58
 8001ea2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001ea4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ea8:	9302      	str	r3, [sp, #8]
 8001eaa:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001eac:	b008      	add	sp, #32
 8001eae:	bd10      	pop	{r4, pc}
 8001eb0:	40005400 	.word	0x40005400
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	48000400 	.word	0x48000400

08001ebc <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001ebc:	b570      	push	{r4, r5, r6, lr}
 8001ebe:	4604      	mov	r4, r0
 8001ec0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec2:	2214      	movs	r2, #20
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	a803      	add	r0, sp, #12
 8001ec8:	f017 fe03 	bl	8019ad2 <memset>
  if(hqspi->Instance==QUADSPI)
 8001ecc:	6822      	ldr	r2, [r4, #0]
 8001ece:	4b1e      	ldr	r3, [pc, #120]	; (8001f48 <HAL_QSPI_MspInit+0x8c>)
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d137      	bne.n	8001f44 <HAL_QSPI_MspInit+0x88>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001ed4:	f103 4320 	add.w	r3, r3, #2684354560	; 0xa0000000
 8001ed8:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
    PB1     ------> QUADSPI_BK1_IO0
    PB10     ------> QUADSPI_CLK
    PB11     ------> QUADSPI_NCS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001edc:	2602      	movs	r6, #2
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001ede:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ee0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ee4:	651a      	str	r2, [r3, #80]	; 0x50
 8001ee6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ee8:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001eec:	9200      	str	r2, [sp, #0]
 8001eee:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ef2:	f042 0201 	orr.w	r2, r2, #1
 8001ef6:	64da      	str	r2, [r3, #76]	; 0x4c
 8001ef8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001efa:	f002 0201 	and.w	r2, r2, #1
 8001efe:	9201      	str	r2, [sp, #4]
 8001f00:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f04:	f042 0202 	orr.w	r2, r2, #2
 8001f08:	64da      	str	r2, [r3, #76]	; 0x4c
 8001f0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0c:	9604      	str	r6, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	9302      	str	r3, [sp, #8]
 8001f14:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f16:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f18:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001f1a:	240a      	movs	r4, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f1c:	a903      	add	r1, sp, #12
 8001f1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f22:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f24:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001f26:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f28:	f000 ff76 	bl	8002e18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 8001f2c:	f640 4303 	movw	r3, #3075	; 0xc03
 8001f30:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f32:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f34:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f36:	4805      	ldr	r0, [pc, #20]	; (8001f4c <HAL_QSPI_MspInit+0x90>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f38:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3c:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001f3e:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f40:	f000 ff6a 	bl	8002e18 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001f44:	b008      	add	sp, #32
 8001f46:	bd70      	pop	{r4, r5, r6, pc}
 8001f48:	a0001000 	.word	0xa0001000
 8001f4c:	48000400 	.word	0x48000400

08001f50 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8001f50:	6802      	ldr	r2, [r0, #0]
 8001f52:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <HAL_RTC_MspInit+0x18>)
 8001f54:	429a      	cmp	r2, r3
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001f56:	bf01      	itttt	eq
 8001f58:	4a04      	ldreq	r2, [pc, #16]	; (8001f6c <HAL_RTC_MspInit+0x1c>)
 8001f5a:	f8d2 3090 	ldreq.w	r3, [r2, #144]	; 0x90
 8001f5e:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
 8001f62:	f8c2 3090 	streq.w	r3, [r2, #144]	; 0x90
 8001f66:	4770      	bx	lr
 8001f68:	40002800 	.word	0x40002800
 8001f6c:	40021000 	.word	0x40021000

08001f70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f70:	b510      	push	{r4, lr}
 8001f72:	4604      	mov	r4, r0
 8001f74:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f76:	2214      	movs	r2, #20
 8001f78:	2100      	movs	r1, #0
 8001f7a:	a803      	add	r0, sp, #12
 8001f7c:	f017 fda9 	bl	8019ad2 <memset>
  if(hspi->Instance==SPI3)
 8001f80:	6822      	ldr	r2, [r4, #0]
 8001f82:	4b13      	ldr	r3, [pc, #76]	; (8001fd0 <HAL_SPI_MspInit+0x60>)
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d120      	bne.n	8001fca <HAL_SPI_MspInit+0x5a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001f88:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f8c:	a903      	add	r1, sp, #12
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001f8e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f90:	4810      	ldr	r0, [pc, #64]	; (8001fd4 <HAL_SPI_MspInit+0x64>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001f92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f96:	659a      	str	r2, [r3, #88]	; 0x58
 8001f98:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001f9a:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8001f9e:	9201      	str	r2, [sp, #4]
 8001fa0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fa2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001fa4:	f042 0204 	orr.w	r2, r2, #4
 8001fa8:	64da      	str	r2, [r3, #76]	; 0x4c
 8001faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fac:	f003 0304 	and.w	r3, r3, #4
 8001fb0:	9302      	str	r3, [sp, #8]
 8001fb2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001fb4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001fb8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fba:	2302      	movs	r3, #2
 8001fbc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001fc2:	2306      	movs	r3, #6
 8001fc4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fc6:	f000 ff27 	bl	8002e18 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001fca:	b008      	add	sp, #32
 8001fcc:	bd10      	pop	{r4, pc}
 8001fce:	bf00      	nop
 8001fd0:	40003c00 	.word	0x40003c00
 8001fd4:	48000800 	.word	0x48000800

08001fd8 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM3)
 8001fd8:	6802      	ldr	r2, [r0, #0]
 8001fda:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <HAL_TIM_Base_MspInit+0x24>)
 8001fdc:	429a      	cmp	r2, r3
{
 8001fde:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM3)
 8001fe0:	d10a      	bne.n	8001ff8 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fe2:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8001fe6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001fe8:	f042 0202 	orr.w	r2, r2, #2
 8001fec:	659a      	str	r2, [r3, #88]	; 0x58
 8001fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	9301      	str	r3, [sp, #4]
 8001ff6:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001ff8:	b002      	add	sp, #8
 8001ffa:	4770      	bx	lr
 8001ffc:	40000400 	.word	0x40000400

08002000 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002000:	b510      	push	{r4, lr}
 8002002:	4604      	mov	r4, r0
 8002004:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002006:	2214      	movs	r2, #20
 8002008:	2100      	movs	r1, #0
 800200a:	a801      	add	r0, sp, #4
 800200c:	f017 fd61 	bl	8019ad2 <memset>
  if(htim->Instance==TIM3)
 8002010:	6822      	ldr	r2, [r4, #0]
 8002012:	4b0c      	ldr	r3, [pc, #48]	; (8002044 <HAL_TIM_MspPostInit+0x44>)
 8002014:	429a      	cmp	r2, r3
 8002016:	d113      	bne.n	8002040 <HAL_TIM_MspPostInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002018:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
    GPIO_InitStruct.Pin = PWM_LED_Pin|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800201c:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800201e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002020:	4809      	ldr	r0, [pc, #36]	; (8002048 <HAL_TIM_MspPostInit+0x48>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002022:	f042 0204 	orr.w	r2, r2, #4
 8002026:	64da      	str	r2, [r3, #76]	; 0x4c
 8002028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800202a:	f003 0304 	and.w	r3, r3, #4
 800202e:	9300      	str	r3, [sp, #0]
 8002030:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = PWM_LED_Pin|GPIO_PIN_7;
 8002032:	23c0      	movs	r3, #192	; 0xc0
 8002034:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002036:	2302      	movs	r3, #2
 8002038:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800203a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800203c:	f000 feec 	bl	8002e18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002040:	b006      	add	sp, #24
 8002042:	bd10      	pop	{r4, pc}
 8002044:	40000400 	.word	0x40000400
 8002048:	48000800 	.word	0x48000800

0800204c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800204c:	b510      	push	{r4, lr}
 800204e:	4604      	mov	r4, r0
 8002050:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002052:	2214      	movs	r2, #20
 8002054:	2100      	movs	r1, #0
 8002056:	a803      	add	r0, sp, #12
 8002058:	f017 fd3b 	bl	8019ad2 <memset>
  if(huart->Instance==USART2)
 800205c:	6822      	ldr	r2, [r4, #0]
 800205e:	4b13      	ldr	r3, [pc, #76]	; (80020ac <HAL_UART_MspInit+0x60>)
 8002060:	429a      	cmp	r2, r3
 8002062:	d120      	bne.n	80020a6 <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002064:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002068:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 800206a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800206c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002070:	659a      	str	r2, [r3, #88]	; 0x58
 8002072:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002074:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002078:	9201      	str	r2, [sp, #4]
 800207a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800207c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800207e:	f042 0201 	orr.w	r2, r2, #1
 8002082:	64da      	str	r2, [r3, #76]	; 0x4c
 8002084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	9302      	str	r3, [sp, #8]
 800208c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800208e:	230c      	movs	r3, #12
 8002090:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002092:	2302      	movs	r3, #2
 8002094:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002096:	2303      	movs	r3, #3
 8002098:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800209a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800209e:	2307      	movs	r3, #7
 80020a0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a2:	f000 feb9 	bl	8002e18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80020a6:	b008      	add	sp, #32
 80020a8:	bd10      	pop	{r4, pc}
 80020aa:	bf00      	nop
 80020ac:	40004400 	.word	0x40004400

080020b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020b0:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80020b2:	4601      	mov	r1, r0
{
 80020b4:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80020b6:	2200      	movs	r2, #0
 80020b8:	2036      	movs	r0, #54	; 0x36
 80020ba:	f000 fd9b 	bl	8002bf4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 80020be:	2036      	movs	r0, #54	; 0x36
 80020c0:	f000 fdcc 	bl	8002c5c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80020c4:	4b14      	ldr	r3, [pc, #80]	; (8002118 <HAL_InitTick+0x68>)
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80020c6:	4c15      	ldr	r4, [pc, #84]	; (800211c <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 80020c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80020ca:	f042 0210 	orr.w	r2, r2, #16
 80020ce:	659a      	str	r2, [r3, #88]	; 0x58
 80020d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d2:	f003 0310 	and.w	r3, r3, #16
 80020d6:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020d8:	a901      	add	r1, sp, #4
 80020da:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 80020dc:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020de:	f002 f925 	bl	800432c <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80020e2:	f002 f8ff 	bl	80042e4 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 80020e6:	4b0e      	ldr	r3, [pc, #56]	; (8002120 <HAL_InitTick+0x70>)
 80020e8:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80020ea:	f240 33e7 	movw	r3, #999	; 0x3e7
 80020ee:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80020f0:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <HAL_InitTick+0x74>)
 80020f2:	fbb0 f0f3 	udiv	r0, r0, r3
 80020f6:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
 80020f8:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 80020fa:	6060      	str	r0, [r4, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80020fc:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 80020fe:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002100:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002102:	f003 fa8b 	bl	800561c <HAL_TIM_Base_Init>
 8002106:	b920      	cbnz	r0, 8002112 <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002108:	4620      	mov	r0, r4
 800210a:	f003 f955 	bl	80053b8 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 800210e:	b008      	add	sp, #32
 8002110:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 8002112:	2001      	movs	r0, #1
 8002114:	e7fb      	b.n	800210e <HAL_InitTick+0x5e>
 8002116:	bf00      	nop
 8002118:	40021000 	.word	0x40021000
 800211c:	2000b54c 	.word	0x2000b54c
 8002120:	40001000 	.word	0x40001000
 8002124:	000f4240 	.word	0x000f4240

08002128 <NMI_Handler>:
 8002128:	4770      	bx	lr

0800212a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800212a:	e7fe      	b.n	800212a <HardFault_Handler>

0800212c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800212c:	e7fe      	b.n	800212c <MemManage_Handler>

0800212e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800212e:	e7fe      	b.n	800212e <BusFault_Handler>

08002130 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002130:	e7fe      	b.n	8002130 <UsageFault_Handler>

08002132 <SVC_Handler>:
 8002132:	4770      	bx	lr

08002134 <DebugMon_Handler>:
 8002134:	4770      	bx	lr

08002136 <PendSV_Handler>:
 8002136:	4770      	bx	lr

08002138 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002138:	4770      	bx	lr
	...

0800213c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800213c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800213e:	4804      	ldr	r0, [pc, #16]	; (8002150 <TIM6_DAC_IRQHandler+0x14>)
 8002140:	f003 f955 	bl	80053ee <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8002144:	4803      	ldr	r0, [pc, #12]	; (8002154 <TIM6_DAC_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002146:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_DAC_IRQHandler(&hdac1);
 800214a:	f000 bda9 	b.w	8002ca0 <HAL_DAC_IRQHandler>
 800214e:	bf00      	nop
 8002150:	2000b54c 	.word	0x2000b54c
 8002154:	2000b2fc 	.word	0x2000b2fc

08002158 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002158:	4801      	ldr	r0, [pc, #4]	; (8002160 <OTG_FS_IRQHandler+0x8>)
 800215a:	f001 b88f 	b.w	800327c <HAL_PCD_IRQHandler>
 800215e:	bf00      	nop
 8002160:	2000bebc 	.word	0x2000bebc

08002164 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8002164:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002166:	4b0a      	ldr	r3, [pc, #40]	; (8002190 <_sbrk+0x2c>)
 8002168:	6819      	ldr	r1, [r3, #0]
{
 800216a:	4602      	mov	r2, r0
	if (heap_end == 0)
 800216c:	b909      	cbnz	r1, 8002172 <_sbrk+0xe>
		heap_end = &end;
 800216e:	4909      	ldr	r1, [pc, #36]	; (8002194 <_sbrk+0x30>)
 8002170:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8002172:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8002174:	4669      	mov	r1, sp
 8002176:	4402      	add	r2, r0
 8002178:	428a      	cmp	r2, r1
 800217a:	d906      	bls.n	800218a <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800217c:	f017 fa66 	bl	801964c <__errno>
 8002180:	230c      	movs	r3, #12
 8002182:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002184:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002188:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 800218a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 800218c:	bd08      	pop	{r3, pc}
 800218e:	bf00      	nop
 8002190:	20004df8 	.word	0x20004df8
 8002194:	2000c64c 	.word	0x2000c64c

08002198 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002198:	490f      	ldr	r1, [pc, #60]	; (80021d8 <SystemInit+0x40>)
 800219a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800219e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80021a6:	4b0d      	ldr	r3, [pc, #52]	; (80021dc <SystemInit+0x44>)
 80021a8:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80021aa:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 80021ac:	f042 0201 	orr.w	r2, r2, #1
 80021b0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 80021b2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 80021ba:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80021be:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80021c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021c4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80021cc:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80021ce:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80021d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80021d4:	608b      	str	r3, [r1, #8]
 80021d6:	4770      	bx	lr
 80021d8:	e000ed00 	.word	0xe000ed00
 80021dc:	40021000 	.word	0x40021000

080021e0 <W25qxx_Spi>:
#define	W25qxx_Delay(delay)		HAL_Delay(delay)
#endif

//###################################################################################################################
uint8_t	W25qxx_Spi(uint8_t	Data)
{
 80021e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t	ret;
	HAL_SPI_TransmitReceive(&hspi3, &Data, &ret, 1, 10);
 80021e2:	230a      	movs	r3, #10
{
 80021e4:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_SPI_TransmitReceive(&hspi3, &Data, &ret, 1, 10);
 80021e8:	9300      	str	r3, [sp, #0]
 80021ea:	f10d 0217 	add.w	r2, sp, #23
 80021ee:	2301      	movs	r3, #1
 80021f0:	f10d 010f 	add.w	r1, sp, #15
 80021f4:	4803      	ldr	r0, [pc, #12]	; (8002204 <W25qxx_Spi+0x24>)
 80021f6:	f002 fe8e 	bl	8004f16 <HAL_SPI_TransmitReceive>
	//HAL_SPI_TransmitReceive(&hspi2, &Data, &ret, 1, 10);
	return ret;
}
 80021fa:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80021fe:	b007      	add	sp, #28
 8002200:	f85d fb04 	ldr.w	pc, [sp], #4
 8002204:	2000b39c 	.word	0x2000b39c

08002208 <W25qxx_ReadID>:

//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8002208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 800220a:	4d0f      	ldr	r5, [pc, #60]	; (8002248 <W25qxx_ReadID+0x40>)
 800220c:	2200      	movs	r2, #0
 800220e:	2104      	movs	r1, #4
 8002210:	4628      	mov	r0, r5
 8002212:	f000 fee3 	bl	8002fdc <HAL_GPIO_WritePin>
  W25qxx_Spi(0x9F);
 8002216:	209f      	movs	r0, #159	; 0x9f
 8002218:	f7ff ffe2 	bl	80021e0 <W25qxx_Spi>
  Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800221c:	20a5      	movs	r0, #165	; 0xa5
 800221e:	f7ff ffdf 	bl	80021e0 <W25qxx_Spi>
 8002222:	4607      	mov	r7, r0
  Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002224:	20a5      	movs	r0, #165	; 0xa5
 8002226:	f7ff ffdb 	bl	80021e0 <W25qxx_Spi>
 800222a:	4604      	mov	r4, r0
  Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800222c:	20a5      	movs	r0, #165	; 0xa5
 800222e:	f7ff ffd7 	bl	80021e0 <W25qxx_Spi>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8002232:	2201      	movs	r2, #1
  Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002234:	4606      	mov	r6, r0
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8002236:	2104      	movs	r1, #4
 8002238:	4628      	mov	r0, r5
 800223a:	f000 fecf 	bl	8002fdc <HAL_GPIO_WritePin>
  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 800223e:	0220      	lsls	r0, r4, #8
 8002240:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
  return Temp;
}
 8002244:	4330      	orrs	r0, r6
 8002246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002248:	48000c00 	.word	0x48000c00

0800224c <W25qxx_ReadUniqID>:

//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 800224c:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 800224e:	2200      	movs	r2, #0
 8002250:	2104      	movs	r1, #4
 8002252:	4811      	ldr	r0, [pc, #68]	; (8002298 <W25qxx_ReadUniqID+0x4c>)
  W25qxx_Spi(0x4B);
	for(uint8_t	i=0;i<4;i++)
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
	for(uint8_t	i=0;i<8;i++)
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002254:	4d11      	ldr	r5, [pc, #68]	; (800229c <W25qxx_ReadUniqID+0x50>)
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8002256:	f000 fec1 	bl	8002fdc <HAL_GPIO_WritePin>
  W25qxx_Spi(0x4B);
 800225a:	204b      	movs	r0, #75	; 0x4b
 800225c:	f7ff ffc0 	bl	80021e0 <W25qxx_Spi>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002260:	20a5      	movs	r0, #165	; 0xa5
 8002262:	f7ff ffbd 	bl	80021e0 <W25qxx_Spi>
 8002266:	20a5      	movs	r0, #165	; 0xa5
 8002268:	f7ff ffba 	bl	80021e0 <W25qxx_Spi>
 800226c:	20a5      	movs	r0, #165	; 0xa5
 800226e:	f7ff ffb7 	bl	80021e0 <W25qxx_Spi>
 8002272:	20a5      	movs	r0, #165	; 0xa5
 8002274:	f7ff ffb4 	bl	80021e0 <W25qxx_Spi>
 8002278:	2400      	movs	r4, #0
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800227a:	20a5      	movs	r0, #165	; 0xa5
 800227c:	f7ff ffb0 	bl	80021e0 <W25qxx_Spi>
 8002280:	1963      	adds	r3, r4, r5
 8002282:	3401      	adds	r4, #1
	for(uint8_t	i=0;i<8;i++)
 8002284:	2c08      	cmp	r4, #8
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002286:	7058      	strb	r0, [r3, #1]
	for(uint8_t	i=0;i<8;i++)
 8002288:	d1f7      	bne.n	800227a <W25qxx_ReadUniqID+0x2e>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 800228a:	2201      	movs	r2, #1
 800228c:	2104      	movs	r1, #4
 800228e:	4802      	ldr	r0, [pc, #8]	; (8002298 <W25qxx_ReadUniqID+0x4c>)
}
 8002290:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8002294:	f000 bea2 	b.w	8002fdc <HAL_GPIO_WritePin>
 8002298:	48000c00 	.word	0x48000c00
 800229c:	2000b58c 	.word	0x2000b58c

080022a0 <W25qxx_ReadStatusRegister>:
  W25qxx_Delay(1);
}

//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t	SelectStatusRegister_1_2_3)
{
 80022a0:	b538      	push	{r3, r4, r5, lr}
	uint8_t	status=0;

	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80022a2:	2200      	movs	r2, #0
{
 80022a4:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80022a6:	2104      	movs	r1, #4
 80022a8:	4815      	ldr	r0, [pc, #84]	; (8002300 <W25qxx_ReadStatusRegister+0x60>)
 80022aa:	4d16      	ldr	r5, [pc, #88]	; (8002304 <W25qxx_ReadStatusRegister+0x64>)
 80022ac:	f000 fe96 	bl	8002fdc <HAL_GPIO_WritePin>
	if(SelectStatusRegister_1_2_3==1)
 80022b0:	2c01      	cmp	r4, #1
 80022b2:	d10f      	bne.n	80022d4 <W25qxx_ReadStatusRegister+0x34>
	{
		W25qxx_Spi(0x05);
 80022b4:	2005      	movs	r0, #5
 80022b6:	f7ff ff93 	bl	80021e0 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80022ba:	20a5      	movs	r0, #165	; 0xa5
 80022bc:	f7ff ff90 	bl	80021e0 <W25qxx_Spi>
 80022c0:	4604      	mov	r4, r0
		w25qxx.StatusRegister1 = status;
 80022c2:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
	{
		W25qxx_Spi(0x15);
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);
		w25qxx.StatusRegister3 = status;
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 80022c6:	2201      	movs	r2, #1
 80022c8:	2104      	movs	r1, #4
 80022ca:	480d      	ldr	r0, [pc, #52]	; (8002300 <W25qxx_ReadStatusRegister+0x60>)
 80022cc:	f000 fe86 	bl	8002fdc <HAL_GPIO_WritePin>

	return status;
}
 80022d0:	4620      	mov	r0, r4
 80022d2:	bd38      	pop	{r3, r4, r5, pc}
	else if(SelectStatusRegister_1_2_3==2)
 80022d4:	2c02      	cmp	r4, #2
 80022d6:	d109      	bne.n	80022ec <W25qxx_ReadStatusRegister+0x4c>
		W25qxx_Spi(0x35);
 80022d8:	2035      	movs	r0, #53	; 0x35
 80022da:	f7ff ff81 	bl	80021e0 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80022de:	20a5      	movs	r0, #165	; 0xa5
 80022e0:	f7ff ff7e 	bl	80021e0 <W25qxx_Spi>
 80022e4:	4604      	mov	r4, r0
		w25qxx.StatusRegister2 = status;
 80022e6:	f885 0025 	strb.w	r0, [r5, #37]	; 0x25
 80022ea:	e7ec      	b.n	80022c6 <W25qxx_ReadStatusRegister+0x26>
		W25qxx_Spi(0x15);
 80022ec:	2015      	movs	r0, #21
 80022ee:	f7ff ff77 	bl	80021e0 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80022f2:	20a5      	movs	r0, #165	; 0xa5
 80022f4:	f7ff ff74 	bl	80021e0 <W25qxx_Spi>
 80022f8:	4604      	mov	r4, r0
		w25qxx.StatusRegister3 = status;
 80022fa:	f885 0026 	strb.w	r0, [r5, #38]	; 0x26
 80022fe:	e7e2      	b.n	80022c6 <W25qxx_ReadStatusRegister+0x26>
 8002300:	48000c00 	.word	0x48000c00
 8002304:	2000b58c 	.word	0x2000b58c

08002308 <W25qxx_Init>:
 HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
}

//###################################################################################################################
bool	W25qxx_Init(void)
{
 8002308:	b538      	push	{r3, r4, r5, lr}
	w25qxx.Lock=1;
 800230a:	4c55      	ldr	r4, [pc, #340]	; (8002460 <W25qxx_Init+0x158>)
 800230c:	2301      	movs	r3, #1
 800230e:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	while(HAL_GetTick()<100)
 8002312:	f000 f8f3 	bl	80024fc <HAL_GetTick>
 8002316:	2863      	cmp	r0, #99	; 0x63
 8002318:	d917      	bls.n	800234a <W25qxx_Init+0x42>
		W25qxx_Delay(1);
	uint32_t	id;
	#if (_W25QXX_DEBUG==1)

	logI("w25qxx Init Begin...\r\n");
 800231a:	4852      	ldr	r0, [pc, #328]	; (8002464 <W25qxx_Init+0x15c>)
 800231c:	f7ff f9a6 	bl	800166c <logI>
	#endif
	id=W25qxx_ReadID();
 8002320:	f7ff ff72 	bl	8002208 <W25qxx_ReadID>
 8002324:	4605      	mov	r5, r0

	#if (_W25QXX_DEBUG==1)
	logI("w25qxx ID:0x%X\r\n",id);
 8002326:	4601      	mov	r1, r0
 8002328:	484f      	ldr	r0, [pc, #316]	; (8002468 <W25qxx_Init+0x160>)
 800232a:	f7ff f99f 	bl	800166c <logI>
	#endif
	switch(id&0x0000FFFF)
 800232e:	b2a8      	uxth	r0, r5
 8002330:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
 8002334:	3811      	subs	r0, #17
 8002336:	2809      	cmp	r0, #9
 8002338:	f200 808b 	bhi.w	8002452 <W25qxx_Init+0x14a>
 800233c:	e8df f000 	tbb	[pc, r0]
 8002340:	71777d83 	.word	0x71777d83
 8002344:	585f656b 	.word	0x585f656b
 8002348:	0951      	.short	0x0951
		W25qxx_Delay(1);
 800234a:	2001      	movs	r0, #1
 800234c:	f000 f8dc 	bl	8002508 <HAL_Delay>
 8002350:	e7df      	b.n	8002312 <W25qxx_Init+0xa>
	{
		case 0x401A:	// 	w25q512
			w25qxx.ID=W25Q512;
 8002352:	230a      	movs	r3, #10
 8002354:	7023      	strb	r3, [r4, #0]
			w25qxx.BlockCount=1024;
			#if (_W25QXX_DEBUG==1)
			logI("w25qxx Chip: w25q512\r\n");
 8002356:	4845      	ldr	r0, [pc, #276]	; (800246c <W25qxx_Init+0x164>)
			w25qxx.BlockCount=1024;
 8002358:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800235c:	61e3      	str	r3, [r4, #28]
		break;
		case 0x4011:	//	w25q10
			w25qxx.ID=W25Q10;
			w25qxx.BlockCount=2;
			#if (_W25QXX_DEBUG==1)
			logI("w25qxx Chip: w25q10\r\n");
 800235e:	f7ff f985 	bl	800166c <logI>
				#endif
			w25qxx.Lock=0;
			return false;

	}
	w25qxx.PageSize=256;
 8002362:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002366:	8163      	strh	r3, [r4, #10]
	w25qxx.SectorSize=0x1000;
 8002368:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800236c:	6123      	str	r3, [r4, #16]
	w25qxx.SectorCount=w25qxx.BlockCount*16;
 800236e:	69e3      	ldr	r3, [r4, #28]
 8002370:	011a      	lsls	r2, r3, #4
	w25qxx.PageCount=(w25qxx.SectorCount*w25qxx.SectorSize)/w25qxx.PageSize;
 8002372:	041b      	lsls	r3, r3, #16
	w25qxx.SectorCount=w25qxx.BlockCount*16;
 8002374:	6162      	str	r2, [r4, #20]
	w25qxx.PageCount=(w25qxx.SectorCount*w25qxx.SectorSize)/w25qxx.PageSize;
 8002376:	0a1a      	lsrs	r2, r3, #8
 8002378:	60e2      	str	r2, [r4, #12]
	w25qxx.BlockSize=w25qxx.SectorSize*16;
	w25qxx.CapacityInKiloByte=(w25qxx.SectorCount*w25qxx.SectorSize)/1024;
 800237a:	0a9b      	lsrs	r3, r3, #10
	w25qxx.BlockSize=w25qxx.SectorSize*16;
 800237c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	w25qxx.CapacityInKiloByte=(w25qxx.SectorCount*w25qxx.SectorSize)/1024;
 8002380:	6223      	str	r3, [r4, #32]
	w25qxx.BlockSize=w25qxx.SectorSize*16;
 8002382:	61a2      	str	r2, [r4, #24]
	W25qxx_ReadUniqID();
 8002384:	f7ff ff62 	bl	800224c <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8002388:	2001      	movs	r0, #1
 800238a:	f7ff ff89 	bl	80022a0 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 800238e:	2002      	movs	r0, #2
 8002390:	f7ff ff86 	bl	80022a0 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8002394:	2003      	movs	r0, #3
 8002396:	f7ff ff83 	bl	80022a0 <W25qxx_ReadStatusRegister>
	#if (_W25QXX_DEBUG==1)
	logI("w25qxx Page Size: %d Bytes\r\n",w25qxx.PageSize);
 800239a:	8961      	ldrh	r1, [r4, #10]
 800239c:	4834      	ldr	r0, [pc, #208]	; (8002470 <W25qxx_Init+0x168>)
 800239e:	f7ff f965 	bl	800166c <logI>
	logI("w25qxx Page Count: %d\r\n",w25qxx.PageCount);
 80023a2:	68e1      	ldr	r1, [r4, #12]
 80023a4:	4833      	ldr	r0, [pc, #204]	; (8002474 <W25qxx_Init+0x16c>)
 80023a6:	f7ff f961 	bl	800166c <logI>
	logI("w25qxx Sector Size: %d Bytes\r\n",w25qxx.SectorSize);
 80023aa:	6921      	ldr	r1, [r4, #16]
 80023ac:	4832      	ldr	r0, [pc, #200]	; (8002478 <W25qxx_Init+0x170>)
 80023ae:	f7ff f95d 	bl	800166c <logI>
	logI("w25qxx Sector Count: %d\r\n",w25qxx.SectorCount);
 80023b2:	6961      	ldr	r1, [r4, #20]
 80023b4:	4831      	ldr	r0, [pc, #196]	; (800247c <W25qxx_Init+0x174>)
 80023b6:	f7ff f959 	bl	800166c <logI>
	logI("w25qxx Block Size: %d Bytes\r\n",w25qxx.BlockSize);
 80023ba:	69a1      	ldr	r1, [r4, #24]
 80023bc:	4830      	ldr	r0, [pc, #192]	; (8002480 <W25qxx_Init+0x178>)
 80023be:	f7ff f955 	bl	800166c <logI>
	logI("w25qxx Block Count: %d\r\n",w25qxx.BlockCount);
 80023c2:	69e1      	ldr	r1, [r4, #28]
 80023c4:	482f      	ldr	r0, [pc, #188]	; (8002484 <W25qxx_Init+0x17c>)
 80023c6:	f7ff f951 	bl	800166c <logI>
	logI("w25qxx Capacity: %d KiloBytes\r\n",w25qxx.CapacityInKiloByte);
 80023ca:	6a21      	ldr	r1, [r4, #32]
 80023cc:	482e      	ldr	r0, [pc, #184]	; (8002488 <W25qxx_Init+0x180>)
 80023ce:	f7ff f94d 	bl	800166c <logI>
	logI("w25qxx Init Done\r\n");
 80023d2:	482e      	ldr	r0, [pc, #184]	; (800248c <W25qxx_Init+0x184>)
 80023d4:	f7ff f94a 	bl	800166c <logI>
	#endif
	w25qxx.Lock=0;
 80023d8:	2300      	movs	r3, #0
 80023da:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	return true;
 80023de:	2001      	movs	r0, #1
}
 80023e0:	bd38      	pop	{r3, r4, r5, pc}
			w25qxx.ID=W25Q256;
 80023e2:	2309      	movs	r3, #9
 80023e4:	7023      	strb	r3, [r4, #0]
			w25qxx.BlockCount=512;
 80023e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023ea:	61e3      	str	r3, [r4, #28]
			logI("w25qxx Chip: w25q256\r\n");
 80023ec:	4828      	ldr	r0, [pc, #160]	; (8002490 <W25qxx_Init+0x188>)
 80023ee:	e7b6      	b.n	800235e <W25qxx_Init+0x56>
			w25qxx.ID=W25Q128;
 80023f0:	2308      	movs	r3, #8
 80023f2:	7023      	strb	r3, [r4, #0]
			w25qxx.BlockCount=256;
 80023f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023f8:	61e3      	str	r3, [r4, #28]
			logI("w25qxx Chip: w25q128\r\n");
 80023fa:	4826      	ldr	r0, [pc, #152]	; (8002494 <W25qxx_Init+0x18c>)
 80023fc:	e7af      	b.n	800235e <W25qxx_Init+0x56>
			w25qxx.ID=W25Q64;
 80023fe:	2307      	movs	r3, #7
 8002400:	7023      	strb	r3, [r4, #0]
			w25qxx.BlockCount=128;
 8002402:	2380      	movs	r3, #128	; 0x80
 8002404:	61e3      	str	r3, [r4, #28]
			logI("w25qxx Chip: w25q64\r\n");
 8002406:	4824      	ldr	r0, [pc, #144]	; (8002498 <W25qxx_Init+0x190>)
 8002408:	e7a9      	b.n	800235e <W25qxx_Init+0x56>
			w25qxx.ID=W25Q32;
 800240a:	2306      	movs	r3, #6
 800240c:	7023      	strb	r3, [r4, #0]
			w25qxx.BlockCount=64;
 800240e:	2340      	movs	r3, #64	; 0x40
 8002410:	61e3      	str	r3, [r4, #28]
			logI("w25qxx Chip: w25q32\r\n");
 8002412:	4822      	ldr	r0, [pc, #136]	; (800249c <W25qxx_Init+0x194>)
 8002414:	e7a3      	b.n	800235e <W25qxx_Init+0x56>
			w25qxx.ID=W25Q16;
 8002416:	2305      	movs	r3, #5
 8002418:	7023      	strb	r3, [r4, #0]
			w25qxx.BlockCount=32;
 800241a:	2320      	movs	r3, #32
 800241c:	61e3      	str	r3, [r4, #28]
			logI("w25qxx Chip: w25q16\r\n");
 800241e:	4820      	ldr	r0, [pc, #128]	; (80024a0 <W25qxx_Init+0x198>)
 8002420:	e79d      	b.n	800235e <W25qxx_Init+0x56>
			w25qxx.ID=W25Q80;
 8002422:	2304      	movs	r3, #4
 8002424:	7023      	strb	r3, [r4, #0]
			w25qxx.BlockCount=16;
 8002426:	2310      	movs	r3, #16
 8002428:	61e3      	str	r3, [r4, #28]
			logI("w25qxx Chip: w25q80\r\n");
 800242a:	481e      	ldr	r0, [pc, #120]	; (80024a4 <W25qxx_Init+0x19c>)
 800242c:	e797      	b.n	800235e <W25qxx_Init+0x56>
			w25qxx.ID=W25Q40;
 800242e:	2303      	movs	r3, #3
 8002430:	7023      	strb	r3, [r4, #0]
			w25qxx.BlockCount=8;
 8002432:	2308      	movs	r3, #8
 8002434:	61e3      	str	r3, [r4, #28]
			logI("w25qxx Chip: w25q40\r\n");
 8002436:	481c      	ldr	r0, [pc, #112]	; (80024a8 <W25qxx_Init+0x1a0>)
 8002438:	e791      	b.n	800235e <W25qxx_Init+0x56>
			w25qxx.ID=W25Q20;
 800243a:	2302      	movs	r3, #2
 800243c:	7023      	strb	r3, [r4, #0]
			w25qxx.BlockCount=4;
 800243e:	2304      	movs	r3, #4
 8002440:	61e3      	str	r3, [r4, #28]
			logI("w25qxx Chip: w25q20\r\n");
 8002442:	481a      	ldr	r0, [pc, #104]	; (80024ac <W25qxx_Init+0x1a4>)
 8002444:	e78b      	b.n	800235e <W25qxx_Init+0x56>
			w25qxx.ID=W25Q10;
 8002446:	2301      	movs	r3, #1
 8002448:	7023      	strb	r3, [r4, #0]
			w25qxx.BlockCount=2;
 800244a:	2302      	movs	r3, #2
 800244c:	61e3      	str	r3, [r4, #28]
			logI("w25qxx Chip: w25q10\r\n");
 800244e:	4818      	ldr	r0, [pc, #96]	; (80024b0 <W25qxx_Init+0x1a8>)
 8002450:	e785      	b.n	800235e <W25qxx_Init+0x56>
				logI("w25qxx Unknown ID\r\n");
 8002452:	4818      	ldr	r0, [pc, #96]	; (80024b4 <W25qxx_Init+0x1ac>)
 8002454:	f7ff f90a 	bl	800166c <logI>
			w25qxx.Lock=0;
 8002458:	2000      	movs	r0, #0
 800245a:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
			return false;
 800245e:	bd38      	pop	{r3, r4, r5, pc}
 8002460:	2000b58c 	.word	0x2000b58c
 8002464:	0801c6b0 	.word	0x0801c6b0
 8002468:	0801c6c7 	.word	0x0801c6c7
 800246c:	0801c6d8 	.word	0x0801c6d8
 8002470:	0801c7cb 	.word	0x0801c7cb
 8002474:	0801c7e8 	.word	0x0801c7e8
 8002478:	0801c800 	.word	0x0801c800
 800247c:	0801c81f 	.word	0x0801c81f
 8002480:	0801c839 	.word	0x0801c839
 8002484:	0801c857 	.word	0x0801c857
 8002488:	0801c870 	.word	0x0801c870
 800248c:	0801c890 	.word	0x0801c890
 8002490:	0801c6ef 	.word	0x0801c6ef
 8002494:	0801c706 	.word	0x0801c706
 8002498:	0801c71d 	.word	0x0801c71d
 800249c:	0801c733 	.word	0x0801c733
 80024a0:	0801c749 	.word	0x0801c749
 80024a4:	0801c75f 	.word	0x0801c75f
 80024a8:	0801c775 	.word	0x0801c775
 80024ac:	0801c78b 	.word	0x0801c78b
 80024b0:	0801c7a1 	.word	0x0801c7a1
 80024b4:	0801c7b7 	.word	0x0801c7b7

080024b8 <HAL_Init>:
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024b8:	4a09      	ldr	r2, [pc, #36]	; (80024e0 <HAL_Init+0x28>)
 80024ba:	6813      	ldr	r3, [r2, #0]
 80024bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 80024c0:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024c2:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024c4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024c6:	f000 fb83 	bl	8002bd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024ca:	2000      	movs	r0, #0
 80024cc:	f7ff fdf0 	bl	80020b0 <HAL_InitTick>
 80024d0:	4604      	mov	r4, r0
 80024d2:	b918      	cbnz	r0, 80024dc <HAL_Init+0x24>
    status = HAL_ERROR;
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80024d4:	f7ff fc3e 	bl	8001d54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 80024d8:	4620      	mov	r0, r4
 80024da:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80024dc:	2401      	movs	r4, #1
 80024de:	e7fb      	b.n	80024d8 <HAL_Init+0x20>
 80024e0:	40022000 	.word	0x40022000

080024e4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80024e4:	4a03      	ldr	r2, [pc, #12]	; (80024f4 <HAL_IncTick+0x10>)
 80024e6:	4904      	ldr	r1, [pc, #16]	; (80024f8 <HAL_IncTick+0x14>)
 80024e8:	6813      	ldr	r3, [r2, #0]
 80024ea:	6809      	ldr	r1, [r1, #0]
 80024ec:	440b      	add	r3, r1
 80024ee:	6013      	str	r3, [r2, #0]
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	2000b5b4 	.word	0x2000b5b4
 80024f8:	2000001c 	.word	0x2000001c

080024fc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80024fc:	4b01      	ldr	r3, [pc, #4]	; (8002504 <HAL_GetTick+0x8>)
 80024fe:	6818      	ldr	r0, [r3, #0]
}
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	2000b5b4 	.word	0x2000b5b4

08002508 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002508:	b538      	push	{r3, r4, r5, lr}
 800250a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800250c:	f7ff fff6 	bl	80024fc <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002510:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002512:	bf1c      	itt	ne
 8002514:	4b05      	ldrne	r3, [pc, #20]	; (800252c <HAL_Delay+0x24>)
 8002516:	681b      	ldrne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8002518:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800251a:	bf18      	it	ne
 800251c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800251e:	f7ff ffed 	bl	80024fc <HAL_GetTick>
 8002522:	1b40      	subs	r0, r0, r5
 8002524:	4284      	cmp	r4, r0
 8002526:	d8fa      	bhi.n	800251e <HAL_Delay+0x16>
  {
  }
}
 8002528:	bd38      	pop	{r3, r4, r5, pc}
 800252a:	bf00      	nop
 800252c:	2000001c 	.word	0x2000001c

08002530 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002530:	b530      	push	{r4, r5, lr}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002532:	0dcc      	lsrs	r4, r1, #23
 8002534:	f004 0404 	and.w	r4, r4, #4
 8002538:	3014      	adds	r0, #20

  MODIFY_REG(*preg,
 800253a:	f3c1 5104 	ubfx	r1, r1, #20, #5
 800253e:	5823      	ldr	r3, [r4, r0]
 8002540:	2507      	movs	r5, #7
 8002542:	408d      	lsls	r5, r1
 8002544:	ea23 0305 	bic.w	r3, r3, r5
 8002548:	fa02 f101 	lsl.w	r1, r2, r1
 800254c:	4319      	orrs	r1, r3
 800254e:	5021      	str	r1, [r4, r0]
 8002550:	bd30      	pop	{r4, r5, pc}

08002552 <LL_ADC_IsEnabled>:
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002552:	6880      	ldr	r0, [r0, #8]
}
 8002554:	f000 0001 	and.w	r0, r0, #1
 8002558:	4770      	bx	lr

0800255a <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800255a:	6880      	ldr	r0, [r0, #8]
}
 800255c:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8002560:	4770      	bx	lr
	...

08002564 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002564:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002566:	2300      	movs	r3, #0
 8002568:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800256a:	4604      	mov	r4, r0
 800256c:	2800      	cmp	r0, #0
 800256e:	f000 8085 	beq.w	800267c <HAL_ADC_Init+0x118>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002572:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8002574:	b925      	cbnz	r5, 8002580 <HAL_ADC_Init+0x1c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002576:	f7ff fc05 	bl	8001d84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800257a:	65a5      	str	r5, [r4, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800257c:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002580:	6820      	ldr	r0, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002582:	6883      	ldr	r3, [r0, #8]
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	d47b      	bmi.n	8002680 <HAL_ADC_Init+0x11c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002588:	6883      	ldr	r3, [r0, #8]
 800258a:	00dd      	lsls	r5, r3, #3
 800258c:	d57f      	bpl.n	800268e <HAL_ADC_Init+0x12a>
 800258e:	6883      	ldr	r3, [r0, #8]
 8002590:	00d9      	lsls	r1, r3, #3
 8002592:	f140 808a 	bpl.w	80026aa <HAL_ADC_Init+0x146>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002596:	2100      	movs	r1, #0

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002598:	f7ff ffdf 	bl	800255a <LL_ADC_REG_IsConversionOngoing>

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800259c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800259e:	f013 0f10 	tst.w	r3, #16
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025a2:	6d63      	ldr	r3, [r4, #84]	; 0x54
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025a4:	d167      	bne.n	8002676 <HAL_ADC_Init+0x112>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80025a6:	2800      	cmp	r0, #0
 80025a8:	d165      	bne.n	8002676 <HAL_ADC_Init+0x112>
    ADC_STATE_CLR_SET(hadc->State,
 80025aa:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80025ae:	f043 0302 	orr.w	r3, r3, #2
 80025b2:	6563      	str	r3, [r4, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025b4:	6820      	ldr	r0, [r4, #0]
 80025b6:	f7ff ffcc 	bl	8002552 <LL_ADC_IsEnabled>
 80025ba:	b998      	cbnz	r0, 80025e4 <HAL_ADC_Init+0x80>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025bc:	4852      	ldr	r0, [pc, #328]	; (8002708 <HAL_ADC_Init+0x1a4>)
 80025be:	f7ff ffc8 	bl	8002552 <LL_ADC_IsEnabled>
 80025c2:	4603      	mov	r3, r0
 80025c4:	4851      	ldr	r0, [pc, #324]	; (800270c <HAL_ADC_Init+0x1a8>)
 80025c6:	f7ff ffc4 	bl	8002552 <LL_ADC_IsEnabled>
 80025ca:	4303      	orrs	r3, r0
 80025cc:	4850      	ldr	r0, [pc, #320]	; (8002710 <HAL_ADC_Init+0x1ac>)
 80025ce:	f7ff ffc0 	bl	8002552 <LL_ADC_IsEnabled>
 80025d2:	4303      	orrs	r3, r0
 80025d4:	d106      	bne.n	80025e4 <HAL_ADC_Init+0x80>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80025d6:	4a4f      	ldr	r2, [pc, #316]	; (8002714 <HAL_ADC_Init+0x1b0>)
 80025d8:	6860      	ldr	r0, [r4, #4]
 80025da:	6893      	ldr	r3, [r2, #8]
 80025dc:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80025e0:	4303      	orrs	r3, r0
 80025e2:	6093      	str	r3, [r2, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 80025e4:	68e0      	ldr	r0, [r4, #12]
 80025e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80025e8:	f894 2020 	ldrb.w	r2, [r4, #32]
                hadc->Init.DataAlign                                                   |
 80025ec:	4303      	orrs	r3, r0
 80025ee:	68a0      	ldr	r0, [r4, #8]
 80025f0:	4303      	orrs	r3, r0
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025f2:	7e60      	ldrb	r0, [r4, #25]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025f4:	2a01      	cmp	r2, #1
                hadc->Init.DataAlign                                                   |
 80025f6:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80025fe:	bf02      	ittt	eq
 8002600:	6a62      	ldreq	r2, [r4, #36]	; 0x24
 8002602:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
 8002606:	ea43 4342 	orreq.w	r3, r3, r2, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800260a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800260c:	b122      	cbz	r2, 8002618 <HAL_ADC_Init+0xb4>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 800260e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002610:	f402 7270 	and.w	r2, r2, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002614:	4302      	orrs	r2, r0
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002616:	4313      	orrs	r3, r2
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002618:	6820      	ldr	r0, [r4, #0]
 800261a:	4a3f      	ldr	r2, [pc, #252]	; (8002718 <HAL_ADC_Init+0x1b4>)
 800261c:	68c5      	ldr	r5, [r0, #12]
 800261e:	402a      	ands	r2, r5
 8002620:	4313      	orrs	r3, r2
 8002622:	60c3      	str	r3, [r0, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002624:	f7ff ff99 	bl	800255a <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002628:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	0712      	lsls	r2, r2, #28
 800262e:	d546      	bpl.n	80026be <HAL_ADC_Init+0x15a>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002630:	6922      	ldr	r2, [r4, #16]
 8002632:	2a01      	cmp	r2, #1
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002634:	bf05      	ittet	eq
 8002636:	6b18      	ldreq	r0, [r3, #48]	; 0x30
 8002638:	69e2      	ldreq	r2, [r4, #28]
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800263a:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800263c:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
 8002640:	bf06      	itte	eq
 8002642:	f020 000f 	biceq.w	r0, r0, #15
 8002646:	4302      	orreq	r2, r0
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002648:	f022 020f 	bicne.w	r2, r2, #15
 800264c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800264e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002650:	f023 0303 	bic.w	r3, r3, #3
 8002654:	f043 0301 	orr.w	r3, r3, #1
 8002658:	6563      	str	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 800265a:	4608      	mov	r0, r1
 800265c:	b003      	add	sp, #12
 800265e:	bd30      	pop	{r4, r5, pc}
      wait_loop_index--;
 8002660:	9b01      	ldr	r3, [sp, #4]
 8002662:	3b01      	subs	r3, #1
 8002664:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002666:	9b01      	ldr	r3, [sp, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1f9      	bne.n	8002660 <HAL_ADC_Init+0xfc>
 800266c:	e78f      	b.n	800258e <HAL_ADC_Init+0x2a>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800266e:	691a      	ldr	r2, [r3, #16]
 8002670:	f022 0201 	bic.w	r2, r2, #1
 8002674:	e045      	b.n	8002702 <HAL_ADC_Init+0x19e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002676:	f043 0310 	orr.w	r3, r3, #16
 800267a:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 800267c:	2101      	movs	r1, #1
 800267e:	e7ec      	b.n	800265a <HAL_ADC_Init+0xf6>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002680:	6883      	ldr	r3, [r0, #8]
 8002682:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002686:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800268a:	6083      	str	r3, [r0, #8]
 800268c:	e77c      	b.n	8002588 <HAL_ADC_Init+0x24>
  MODIFY_REG(ADCx->CR,
 800268e:	6883      	ldr	r3, [r0, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002690:	4a22      	ldr	r2, [pc, #136]	; (800271c <HAL_ADC_Init+0x1b8>)
 8002692:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002696:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800269a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800269e:	6083      	str	r3, [r0, #8]
 80026a0:	4b1f      	ldr	r3, [pc, #124]	; (8002720 <HAL_ADC_Init+0x1bc>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80026a8:	e7dc      	b.n	8002664 <HAL_ADC_Init+0x100>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026aa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80026ac:	f043 0310 	orr.w	r3, r3, #16
 80026b0:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80026b4:	f043 0301 	orr.w	r3, r3, #1
 80026b8:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 80026ba:	2101      	movs	r1, #1
 80026bc:	e76c      	b.n	8002598 <HAL_ADC_Init+0x34>
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026be:	2800      	cmp	r0, #0
 80026c0:	d1b6      	bne.n	8002630 <HAL_ADC_Init+0xcc>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80026c2:	68d8      	ldr	r0, [r3, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80026c4:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80026c8:	7e25      	ldrb	r5, [r4, #24]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80026ca:	0052      	lsls	r2, r2, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80026cc:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80026d0:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80026d4:	f020 0002 	bic.w	r0, r0, #2
 80026d8:	4302      	orrs	r2, r0
 80026da:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 80026dc:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 80026e0:	2a01      	cmp	r2, #1
 80026e2:	d1c4      	bne.n	800266e <HAL_ADC_Init+0x10a>
        MODIFY_REG(hadc->Instance->CFGR2,
 80026e4:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80026e6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80026e8:	6918      	ldr	r0, [r3, #16]
 80026ea:	432a      	orrs	r2, r5
 80026ec:	6c65      	ldr	r5, [r4, #68]	; 0x44
 80026ee:	f042 0201 	orr.w	r2, r2, #1
 80026f2:	432a      	orrs	r2, r5
 80026f4:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80026f6:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 80026fa:	432a      	orrs	r2, r5
 80026fc:	f020 0004 	bic.w	r0, r0, #4
 8002700:	4302      	orrs	r2, r0
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002702:	611a      	str	r2, [r3, #16]
 8002704:	e794      	b.n	8002630 <HAL_ADC_Init+0xcc>
 8002706:	bf00      	nop
 8002708:	50040000 	.word	0x50040000
 800270c:	50040100 	.word	0x50040100
 8002710:	50040200 	.word	0x50040200
 8002714:	50040300 	.word	0x50040300
 8002718:	fff0c007 	.word	0xfff0c007
 800271c:	00030d40 	.word	0x00030d40
 8002720:	20000018 	.word	0x20000018

08002724 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002724:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002726:	2300      	movs	r3, #0
 8002728:	9301      	str	r3, [sp, #4]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800272a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800272e:	2b01      	cmp	r3, #1
{
 8002730:	4605      	mov	r5, r0
 8002732:	460c      	mov	r4, r1
  __HAL_LOCK(hadc);
 8002734:	f000 8184 	beq.w	8002a40 <HAL_ADC_ConfigChannel+0x31c>
 8002738:	2301      	movs	r3, #1
 800273a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800273e:	6800      	ldr	r0, [r0, #0]
 8002740:	f7ff ff0b 	bl	800255a <LL_ADC_REG_IsConversionOngoing>
 8002744:	2800      	cmp	r0, #0
 8002746:	f040 8175 	bne.w	8002a34 <HAL_ADC_ConfigChannel+0x310>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800274a:	684b      	ldr	r3, [r1, #4]
 800274c:	2b05      	cmp	r3, #5
 800274e:	d808      	bhi.n	8002762 <HAL_ADC_ConfigChannel+0x3e>
    {
      switch (sConfig->Rank)
 8002750:	3b02      	subs	r3, #2
 8002752:	2b03      	cmp	r3, #3
 8002754:	d866      	bhi.n	8002824 <HAL_ADC_ConfigChannel+0x100>
 8002756:	e8df f003 	tbb	[pc, r3]
 800275a:	5e02      	.short	0x5e02
 800275c:	6260      	.short	0x6260
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 800275e:	230c      	movs	r3, #12
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8002760:	6063      	str	r3, [r4, #4]
      }
    }
    #endif
    
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002762:	6862      	ldr	r2, [r4, #4]
 8002764:	6828      	ldr	r0, [r5, #0]
  MODIFY_REG(*preg,
 8002766:	6823      	ldr	r3, [r4, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002768:	0991      	lsrs	r1, r2, #6
 800276a:	f001 010c 	and.w	r1, r1, #12
 800276e:	f100 0730 	add.w	r7, r0, #48	; 0x30
  MODIFY_REG(*preg,
 8002772:	f002 021f 	and.w	r2, r2, #31
 8002776:	59ce      	ldr	r6, [r1, r7]
 8002778:	f04f 0e1f 	mov.w	lr, #31
 800277c:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8002780:	4093      	lsls	r3, r2
 8002782:	fa0e f202 	lsl.w	r2, lr, r2
 8002786:	ea26 0202 	bic.w	r2, r6, r2
 800278a:	4313      	orrs	r3, r2
 800278c:	51cb      	str	r3, [r1, r7]
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800278e:	f7ff fee4 	bl	800255a <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002792:	682b      	ldr	r3, [r5, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002794:	689a      	ldr	r2, [r3, #8]
 8002796:	0711      	lsls	r1, r2, #28
 8002798:	f140 8154 	bpl.w	8002a44 <HAL_ADC_ConfigChannel+0x320>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800279c:	6828      	ldr	r0, [r5, #0]
 800279e:	f7ff fed8 	bl	8002552 <LL_ADC_IsEnabled>
 80027a2:	2800      	cmp	r0, #0
 80027a4:	f040 80d3 	bne.w	800294e <HAL_ADC_ConfigChannel+0x22a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80027a8:	68e6      	ldr	r6, [r4, #12]
 80027aa:	6828      	ldr	r0, [r5, #0]
 80027ac:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(ADCx->DIFSEL,
 80027ae:	4aba      	ldr	r2, [pc, #744]	; (8002a98 <HAL_ADC_ConfigChannel+0x374>)
 80027b0:	f8d0 10b0 	ldr.w	r1, [r0, #176]	; 0xb0
 80027b4:	f006 0e18 	and.w	lr, r6, #24
 80027b8:	f3c3 0712 	ubfx	r7, r3, #0, #19
 80027bc:	fa22 f20e 	lsr.w	r2, r2, lr
 80027c0:	401a      	ands	r2, r3
 80027c2:	ea21 0107 	bic.w	r1, r1, r7
 80027c6:	430a      	orrs	r2, r1
 80027c8:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80027cc:	4ab3      	ldr	r2, [pc, #716]	; (8002a9c <HAL_ADC_ConfigChannel+0x378>)
 80027ce:	4296      	cmp	r6, r2
 80027d0:	f040 80bd 	bne.w	800294e <HAL_ADC_ConfigChannel+0x22a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027d4:	2f00      	cmp	r7, #0
 80027d6:	f040 808f 	bne.w	80028f8 <HAL_ADC_ConfigChannel+0x1d4>
 80027da:	0e9e      	lsrs	r6, r3, #26
 80027dc:	3601      	adds	r6, #1
 80027de:	f006 021f 	and.w	r2, r6, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027e2:	2a09      	cmp	r2, #9
 80027e4:	f04f 0101 	mov.w	r1, #1
 80027e8:	ea4f 6686 	mov.w	r6, r6, lsl #26
 80027ec:	f240 809e 	bls.w	800292c <HAL_ADC_ConfigChannel+0x208>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027f0:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 80027f4:	4091      	lsls	r1, r2
 80027f6:	ea41 0206 	orr.w	r2, r1, r6
 80027fa:	2f00      	cmp	r7, #0
 80027fc:	f040 80c7 	bne.w	800298e <HAL_ADC_ConfigChannel+0x26a>
 8002800:	0e9b      	lsrs	r3, r3, #26
 8002802:	3301      	adds	r3, #1
 8002804:	f003 031f 	and.w	r3, r3, #31
 8002808:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800280c:	391e      	subs	r1, #30
 800280e:	0509      	lsls	r1, r1, #20
 8002810:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8002814:	e097      	b.n	8002946 <HAL_ADC_ConfigChannel+0x222>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8002816:	2312      	movs	r3, #18
 8002818:	e7a2      	b.n	8002760 <HAL_ADC_ConfigChannel+0x3c>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 800281a:	2318      	movs	r3, #24
 800281c:	e7a0      	b.n	8002760 <HAL_ADC_ConfigChannel+0x3c>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 800281e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002822:	e79d      	b.n	8002760 <HAL_ADC_ConfigChannel+0x3c>
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8002824:	2306      	movs	r3, #6
 8002826:	e79b      	b.n	8002760 <HAL_ADC_ConfigChannel+0x3c>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002828:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800282a:	6e19      	ldr	r1, [r3, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800282c:	f3c2 0612 	ubfx	r6, r2, #0, #19
 8002830:	f3c1 6184 	ubfx	r1, r1, #26, #5
 8002834:	2e00      	cmp	r6, #0
 8002836:	d13e      	bne.n	80028b6 <HAL_ADC_ConfigChannel+0x192>
 8002838:	f3c2 6284 	ubfx	r2, r2, #26, #5
 800283c:	428a      	cmp	r2, r1
  MODIFY_REG(*preg,
 800283e:	bf02      	ittt	eq
 8002840:	6e1a      	ldreq	r2, [r3, #96]	; 0x60
 8002842:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8002846:	661a      	streq	r2, [r3, #96]	; 0x60
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002848:	6e5a      	ldr	r2, [r3, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800284a:	6822      	ldr	r2, [r4, #0]
 800284c:	6e5e      	ldr	r6, [r3, #100]	; 0x64
 800284e:	f3c2 0712 	ubfx	r7, r2, #0, #19
 8002852:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8002856:	f100 010c 	add.w	r1, r0, #12
 800285a:	bb8f      	cbnz	r7, 80028c0 <HAL_ADC_ConfigChannel+0x19c>
 800285c:	f3c2 6784 	ubfx	r7, r2, #26, #5
 8002860:	42be      	cmp	r6, r7
 8002862:	f040 8112 	bne.w	8002a8a <HAL_ADC_ConfigChannel+0x366>
  MODIFY_REG(*preg,
 8002866:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002868:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800286c:	665a      	str	r2, [r3, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800286e:	6822      	ldr	r2, [r4, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002870:	6883      	ldr	r3, [r0, #8]
 8002872:	6883      	ldr	r3, [r0, #8]
 8002874:	f3c2 0712 	ubfx	r7, r2, #0, #19
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002878:	f100 0608 	add.w	r6, r0, #8
 800287c:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8002880:	bb57      	cbnz	r7, 80028d8 <HAL_ADC_ConfigChannel+0x1b4>
 8002882:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8002886:	4293      	cmp	r3, r2
 8002888:	f040 811c 	bne.w	8002ac4 <HAL_ADC_ConfigChannel+0x3a0>
  MODIFY_REG(*preg,
 800288c:	6833      	ldr	r3, [r6, #0]
 800288e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002892:	6033      	str	r3, [r6, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002894:	68c3      	ldr	r3, [r0, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002896:	6823      	ldr	r3, [r4, #0]
 8002898:	68c2      	ldr	r2, [r0, #12]
 800289a:	f3c3 0012 	ubfx	r0, r3, #0, #19
 800289e:	f3c2 6284 	ubfx	r2, r2, #26, #5
 80028a2:	bb20      	cbnz	r0, 80028ee <HAL_ADC_ConfigChannel+0x1ca>
 80028a4:	f3c3 6384 	ubfx	r3, r3, #26, #5
 80028a8:	4293      	cmp	r3, r2
  MODIFY_REG(*preg,
 80028aa:	bf02      	ittt	eq
 80028ac:	680b      	ldreq	r3, [r1, #0]
 80028ae:	f023 4300 	biceq.w	r3, r3, #2147483648	; 0x80000000
 80028b2:	600b      	streq	r3, [r1, #0]
 80028b4:	e772      	b.n	800279c <HAL_ADC_ConfigChannel+0x78>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b6:	fa92 f2a2 	rbit	r2, r2
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028ba:	fab2 f282 	clz	r2, r2
 80028be:	e7bd      	b.n	800283c <HAL_ADC_ConfigChannel+0x118>
 80028c0:	fa92 f7a2 	rbit	r7, r2
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028c4:	fab7 f787 	clz	r7, r7
 80028c8:	42be      	cmp	r6, r7
 80028ca:	d0cc      	beq.n	8002866 <HAL_ADC_ConfigChannel+0x142>
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028cc:	f103 0668 	add.w	r6, r3, #104	; 0x68
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80028d0:	6e9f      	ldr	r7, [r3, #104]	; 0x68
 80028d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028d4:	f3c3 6384 	ubfx	r3, r3, #26, #5
 80028d8:	fa92 f2a2 	rbit	r2, r2
 80028dc:	fab2 f282 	clz	r2, r2
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d0d3      	beq.n	800288c <HAL_ADC_ConfigChannel+0x168>
 80028e4:	68c3      	ldr	r3, [r0, #12]
 80028e6:	68c2      	ldr	r2, [r0, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028e8:	6823      	ldr	r3, [r4, #0]
 80028ea:	f3c2 6284 	ubfx	r2, r2, #26, #5
 80028ee:	fa93 f3a3 	rbit	r3, r3
 80028f2:	fab3 f383 	clz	r3, r3
 80028f6:	e7d7      	b.n	80028a8 <HAL_ADC_ConfigChannel+0x184>
 80028f8:	fa93 f2a3 	rbit	r2, r3
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80028fc:	fab2 f282 	clz	r2, r2
 8002900:	3201      	adds	r2, #1
 8002902:	f002 021f 	and.w	r2, r2, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002906:	2a09      	cmp	r2, #9
 8002908:	d830      	bhi.n	800296c <HAL_ADC_ConfigChannel+0x248>
 800290a:	fa93 f6a3 	rbit	r6, r3
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800290e:	fab6 f686 	clz	r6, r6
 8002912:	3601      	adds	r6, #1
 8002914:	06b6      	lsls	r6, r6, #26
 8002916:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 800291a:	fa93 f1a3 	rbit	r1, r3
 800291e:	fab1 f181 	clz	r1, r1
 8002922:	3101      	adds	r1, #1
 8002924:	f001 021f 	and.w	r2, r1, #31
 8002928:	2101      	movs	r1, #1
 800292a:	e001      	b.n	8002930 <HAL_ADC_ConfigChannel+0x20c>
 800292c:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8002930:	4091      	lsls	r1, r2
 8002932:	ea41 0206 	orr.w	r2, r1, r6
 8002936:	b9a7      	cbnz	r7, 8002962 <HAL_ADC_ConfigChannel+0x23e>
 8002938:	0e99      	lsrs	r1, r3, #26
 800293a:	3101      	adds	r1, #1
 800293c:	f001 011f 	and.w	r1, r1, #31
 8002940:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8002944:	0509      	lsls	r1, r1, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002946:	4311      	orrs	r1, r2
 8002948:	68a2      	ldr	r2, [r4, #8]
 800294a:	f7ff fdf1 	bl	8002530 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800294e:	6822      	ldr	r2, [r4, #0]
 8002950:	4b53      	ldr	r3, [pc, #332]	; (8002aa0 <HAL_ADC_ConfigChannel+0x37c>)
 8002952:	421a      	tst	r2, r3
 8002954:	d120      	bne.n	8002998 <HAL_ADC_ConfigChannel+0x274>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002956:	2000      	movs	r0, #0

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002958:	2300      	movs	r3, #0
 800295a:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 800295e:	b003      	add	sp, #12
 8002960:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002962:	fa93 f1a3 	rbit	r1, r3
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002966:	fab1 f181 	clz	r1, r1
 800296a:	e7e6      	b.n	800293a <HAL_ADC_ConfigChannel+0x216>
 800296c:	fa93 f2a3 	rbit	r2, r3
 8002970:	fab2 f282 	clz	r2, r2
 8002974:	3201      	adds	r2, #1
 8002976:	0692      	lsls	r2, r2, #26
 8002978:	f002 46f8 	and.w	r6, r2, #2080374784	; 0x7c000000
 800297c:	fa93 f1a3 	rbit	r1, r3
 8002980:	fab1 f181 	clz	r1, r1
 8002984:	3101      	adds	r1, #1
 8002986:	f001 021f 	and.w	r2, r1, #31
 800298a:	2101      	movs	r1, #1
 800298c:	e732      	b.n	80027f4 <HAL_ADC_ConfigChannel+0xd0>
 800298e:	fa93 f3a3 	rbit	r3, r3
 8002992:	fab3 f383 	clz	r3, r3
 8002996:	e734      	b.n	8002802 <HAL_ADC_ConfigChannel+0xde>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002998:	4942      	ldr	r1, [pc, #264]	; (8002aa4 <HAL_ADC_ConfigChannel+0x380>)
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800299a:	4b43      	ldr	r3, [pc, #268]	; (8002aa8 <HAL_ADC_ConfigChannel+0x384>)
 800299c:	6888      	ldr	r0, [r1, #8]
 800299e:	429a      	cmp	r2, r3
 80029a0:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 80029a4:	460c      	mov	r4, r1
 80029a6:	d11e      	bne.n	80029e6 <HAL_ADC_ConfigChannel+0x2c2>
 80029a8:	0202      	lsls	r2, r0, #8
 80029aa:	d4d4      	bmi.n	8002956 <HAL_ADC_ConfigChannel+0x232>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029ac:	682b      	ldr	r3, [r5, #0]
 80029ae:	4a3f      	ldr	r2, [pc, #252]	; (8002aac <HAL_ADC_ConfigChannel+0x388>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d003      	beq.n	80029bc <HAL_ADC_ConfigChannel+0x298>
 80029b4:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d1cc      	bne.n	8002956 <HAL_ADC_ConfigChannel+0x232>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80029bc:	68a3      	ldr	r3, [r4, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80029be:	4a3c      	ldr	r2, [pc, #240]	; (8002ab0 <HAL_ADC_ConfigChannel+0x38c>)
 80029c0:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 80029c4:	4333      	orrs	r3, r6
 80029c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029ca:	60a3      	str	r3, [r4, #8]
 80029cc:	4b39      	ldr	r3, [pc, #228]	; (8002ab4 <HAL_ADC_ConfigChannel+0x390>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	fbb3 f2f2 	udiv	r2, r3, r2
 80029d4:	230c      	movs	r3, #12
 80029d6:	4353      	muls	r3, r2
            wait_loop_index--;
 80029d8:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 80029da:	9b01      	ldr	r3, [sp, #4]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d0ba      	beq.n	8002956 <HAL_ADC_ConfigChannel+0x232>
            wait_loop_index--;
 80029e0:	9b01      	ldr	r3, [sp, #4]
 80029e2:	3b01      	subs	r3, #1
 80029e4:	e7f8      	b.n	80029d8 <HAL_ADC_ConfigChannel+0x2b4>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80029e6:	4b34      	ldr	r3, [pc, #208]	; (8002ab8 <HAL_ADC_ConfigChannel+0x394>)
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d111      	bne.n	8002a10 <HAL_ADC_ConfigChannel+0x2ec>
 80029ec:	01c3      	lsls	r3, r0, #7
 80029ee:	d4b2      	bmi.n	8002956 <HAL_ADC_ConfigChannel+0x232>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029f0:	682b      	ldr	r3, [r5, #0]
 80029f2:	4a2e      	ldr	r2, [pc, #184]	; (8002aac <HAL_ADC_ConfigChannel+0x388>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d003      	beq.n	8002a00 <HAL_ADC_ConfigChannel+0x2dc>
 80029f8:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d1aa      	bne.n	8002956 <HAL_ADC_ConfigChannel+0x232>
 8002a00:	68a3      	ldr	r3, [r4, #8]
 8002a02:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8002a06:	4333      	orrs	r3, r6
 8002a08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a0c:	60a3      	str	r3, [r4, #8]
 8002a0e:	e7a2      	b.n	8002956 <HAL_ADC_ConfigChannel+0x232>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a10:	4b2a      	ldr	r3, [pc, #168]	; (8002abc <HAL_ADC_ConfigChannel+0x398>)
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d19f      	bne.n	8002956 <HAL_ADC_ConfigChannel+0x232>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a16:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8002a1a:	d19c      	bne.n	8002956 <HAL_ADC_ConfigChannel+0x232>
        if (ADC_VREFINT_INSTANCE(hadc))
 8002a1c:	682a      	ldr	r2, [r5, #0]
 8002a1e:	4b23      	ldr	r3, [pc, #140]	; (8002aac <HAL_ADC_ConfigChannel+0x388>)
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d198      	bne.n	8002956 <HAL_ADC_ConfigChannel+0x232>
 8002a24:	688b      	ldr	r3, [r1, #8]
 8002a26:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8002a2a:	4333      	orrs	r3, r6
 8002a2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a30:	608b      	str	r3, [r1, #8]
 8002a32:	e791      	b.n	8002958 <HAL_ADC_ConfigChannel+0x234>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a34:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 8002a36:	f042 0220 	orr.w	r2, r2, #32
 8002a3a:	656a      	str	r2, [r5, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	e78b      	b.n	8002958 <HAL_ADC_ConfigChannel+0x234>
  __HAL_LOCK(hadc);
 8002a40:	2002      	movs	r0, #2
 8002a42:	e78c      	b.n	800295e <HAL_ADC_ConfigChannel+0x23a>
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a44:	2800      	cmp	r0, #0
 8002a46:	f47f aea9 	bne.w	800279c <HAL_ADC_ConfigChannel+0x78>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	68a2      	ldr	r2, [r4, #8]
 8002a4e:	6821      	ldr	r1, [r4, #0]
 8002a50:	f7ff fd6e 	bl	8002530 <LL_ADC_SetChannelSamplingTime>
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a54:	6926      	ldr	r6, [r4, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002a56:	682b      	ldr	r3, [r5, #0]
 8002a58:	6822      	ldr	r2, [r4, #0]
 8002a5a:	68d9      	ldr	r1, [r3, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a5c:	2e04      	cmp	r6, #4
 8002a5e:	f103 0060 	add.w	r0, r3, #96	; 0x60
 8002a62:	f43f aee1 	beq.w	8002828 <HAL_ADC_ConfigChannel+0x104>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002a66:	f3c1 03c1 	ubfx	r3, r1, #3, #2
 8002a6a:	0059      	lsls	r1, r3, #1
 8002a6c:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(*preg,
 8002a6e:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 8002a72:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8002a76:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a7a:	408b      	lsls	r3, r1
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	4a10      	ldr	r2, [pc, #64]	; (8002ac0 <HAL_ADC_ConfigChannel+0x39c>)
 8002a80:	403a      	ands	r2, r7
 8002a82:	4313      	orrs	r3, r2
 8002a84:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
 8002a88:	e688      	b.n	800279c <HAL_ADC_ConfigChannel+0x78>
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a8a:	f103 0668 	add.w	r6, r3, #104	; 0x68
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002a8e:	6e9f      	ldr	r7, [r3, #104]	; 0x68
 8002a90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a92:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8002a96:	e6f4      	b.n	8002882 <HAL_ADC_ConfigChannel+0x15e>
 8002a98:	0007ffff 	.word	0x0007ffff
 8002a9c:	407f0000 	.word	0x407f0000
 8002aa0:	80080000 	.word	0x80080000
 8002aa4:	50040300 	.word	0x50040300
 8002aa8:	c7520000 	.word	0xc7520000
 8002aac:	50040000 	.word	0x50040000
 8002ab0:	00030d40 	.word	0x00030d40
 8002ab4:	20000018 	.word	0x20000018
 8002ab8:	cb840000 	.word	0xcb840000
 8002abc:	80000001 	.word	0x80000001
 8002ac0:	03fff000 	.word	0x03fff000
 8002ac4:	68c3      	ldr	r3, [r0, #12]
 8002ac6:	68c2      	ldr	r2, [r0, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ac8:	6823      	ldr	r3, [r4, #0]
 8002aca:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8002ace:	e6e9      	b.n	80028a4 <HAL_ADC_ConfigChannel+0x180>

08002ad0 <LL_ADC_IsEnabled>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ad0:	6880      	ldr	r0, [r0, #8]
}
 8002ad2:	f000 0001 	and.w	r0, r0, #1
 8002ad6:	4770      	bx	lr

08002ad8 <LL_ADC_REG_IsConversionOngoing>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ad8:	6880      	ldr	r0, [r0, #8]
}
 8002ada:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8002ade:	4770      	bx	lr

08002ae0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002ae0:	b530      	push	{r4, r5, lr}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ae2:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8002ae6:	2b01      	cmp	r3, #1
{
 8002ae8:	b09b      	sub	sp, #108	; 0x6c
 8002aea:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 8002aec:	d066      	beq.n	8002bbc <HAL_ADCEx_MultiModeConfigChannel+0xdc>
 8002aee:	2301      	movs	r3, #1
 8002af0:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002af4:	4b32      	ldr	r3, [pc, #200]	; (8002bc0 <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
 8002af6:	6800      	ldr	r0, [r0, #0]
 8002af8:	4298      	cmp	r0, r3
 8002afa:	bf0c      	ite	eq
 8002afc:	f503 7380 	addeq.w	r3, r3, #256	; 0x100
 8002b00:	2300      	movne	r3, #0
 8002b02:	9301      	str	r3, [sp, #4]

  if (tmphadcSlave.Instance == NULL)
 8002b04:	9801      	ldr	r0, [sp, #4]
 8002b06:	b940      	cbnz	r0, 8002b1a <HAL_ADCEx_MultiModeConfigChannel+0x3a>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b08:	6d53      	ldr	r3, [r2, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b0a:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b0e:	f043 0320 	orr.w	r3, r3, #32
 8002b12:	6553      	str	r3, [r2, #84]	; 0x54

    return HAL_ERROR;
 8002b14:	2001      	movs	r0, #1
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8002b16:	b01b      	add	sp, #108	; 0x6c
 8002b18:	bd30      	pop	{r4, r5, pc}
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002b1a:	f7ff ffdd 	bl	8002ad8 <LL_ADC_REG_IsConversionOngoing>
 8002b1e:	4603      	mov	r3, r0
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b20:	6810      	ldr	r0, [r2, #0]
 8002b22:	f7ff ffd9 	bl	8002ad8 <LL_ADC_REG_IsConversionOngoing>
 8002b26:	2800      	cmp	r0, #0
 8002b28:	d142      	bne.n	8002bb0 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d140      	bne.n	8002bb0 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b2e:	680b      	ldr	r3, [r1, #0]
 8002b30:	4c24      	ldr	r4, [pc, #144]	; (8002bc4 <HAL_ADCEx_MultiModeConfigChannel+0xe4>)
 8002b32:	b333      	cbz	r3, 8002b82 <HAL_ADCEx_MultiModeConfigChannel+0xa2>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002b34:	68a3      	ldr	r3, [r4, #8]
 8002b36:	6848      	ldr	r0, [r1, #4]
 8002b38:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002b3c:	4303      	orrs	r3, r0
 8002b3e:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
 8002b42:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
 8002b46:	60a3      	str	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b48:	481d      	ldr	r0, [pc, #116]	; (8002bc0 <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
 8002b4a:	f7ff ffc1 	bl	8002ad0 <LL_ADC_IsEnabled>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	481d      	ldr	r0, [pc, #116]	; (8002bc8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>)
 8002b52:	f7ff ffbd 	bl	8002ad0 <LL_ADC_IsEnabled>
 8002b56:	4303      	orrs	r3, r0
 8002b58:	481c      	ldr	r0, [pc, #112]	; (8002bcc <HAL_ADCEx_MultiModeConfigChannel+0xec>)
 8002b5a:	f7ff ffb9 	bl	8002ad0 <LL_ADC_IsEnabled>
 8002b5e:	4318      	orrs	r0, r3
 8002b60:	d004      	beq.n	8002b6c <HAL_ADCEx_MultiModeConfigChannel+0x8c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b62:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8002b64:	2300      	movs	r3, #0
 8002b66:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
  return tmp_hal_status;
 8002b6a:	e7d4      	b.n	8002b16 <HAL_ADCEx_MultiModeConfigChannel+0x36>
        MODIFY_REG(tmpADC_Common->CCR,
 8002b6c:	680b      	ldr	r3, [r1, #0]
 8002b6e:	68a5      	ldr	r5, [r4, #8]
 8002b70:	6889      	ldr	r1, [r1, #8]
 8002b72:	430b      	orrs	r3, r1
 8002b74:	f425 6171 	bic.w	r1, r5, #3856	; 0xf10
 8002b78:	f021 010f 	bic.w	r1, r1, #15
 8002b7c:	430b      	orrs	r3, r1
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002b7e:	60a3      	str	r3, [r4, #8]
 8002b80:	e7f0      	b.n	8002b64 <HAL_ADCEx_MultiModeConfigChannel+0x84>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002b82:	68a3      	ldr	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b84:	480e      	ldr	r0, [pc, #56]	; (8002bc0 <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002b86:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002b8a:	60a3      	str	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b8c:	f7ff ffa0 	bl	8002ad0 <LL_ADC_IsEnabled>
 8002b90:	4603      	mov	r3, r0
 8002b92:	480d      	ldr	r0, [pc, #52]	; (8002bc8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>)
 8002b94:	f7ff ff9c 	bl	8002ad0 <LL_ADC_IsEnabled>
 8002b98:	4303      	orrs	r3, r0
 8002b9a:	480c      	ldr	r0, [pc, #48]	; (8002bcc <HAL_ADCEx_MultiModeConfigChannel+0xec>)
 8002b9c:	f7ff ff98 	bl	8002ad0 <LL_ADC_IsEnabled>
 8002ba0:	4318      	orrs	r0, r3
 8002ba2:	d1de      	bne.n	8002b62 <HAL_ADCEx_MultiModeConfigChannel+0x82>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002ba4:	68a3      	ldr	r3, [r4, #8]
 8002ba6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002baa:	f023 030f 	bic.w	r3, r3, #15
 8002bae:	e7e6      	b.n	8002b7e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bb0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002bb2:	f043 0320 	orr.w	r3, r3, #32
 8002bb6:	6553      	str	r3, [r2, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8002bb8:	2001      	movs	r0, #1
 8002bba:	e7d3      	b.n	8002b64 <HAL_ADCEx_MultiModeConfigChannel+0x84>
  __HAL_LOCK(hadc);
 8002bbc:	2002      	movs	r0, #2
 8002bbe:	e7aa      	b.n	8002b16 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002bc0:	50040000 	.word	0x50040000
 8002bc4:	50040300 	.word	0x50040300
 8002bc8:	50040100 	.word	0x50040100
 8002bcc:	50040200 	.word	0x50040200

08002bd0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bd0:	4a07      	ldr	r2, [pc, #28]	; (8002bf0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002bd2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bd4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002bd8:	041b      	lsls	r3, r3, #16
 8002bda:	0c1b      	lsrs	r3, r3, #16
 8002bdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002be0:	0200      	lsls	r0, r0, #8
 8002be2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002be6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8002bea:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8002bec:	60d3      	str	r3, [r2, #12]
 8002bee:	4770      	bx	lr
 8002bf0:	e000ed00 	.word	0xe000ed00

08002bf4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bf4:	4b17      	ldr	r3, [pc, #92]	; (8002c54 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bf6:	b530      	push	{r4, r5, lr}
 8002bf8:	68dc      	ldr	r4, [r3, #12]
 8002bfa:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bfe:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c02:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c04:	2b04      	cmp	r3, #4
 8002c06:	bf28      	it	cs
 8002c08:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c0a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c0c:	f04f 0501 	mov.w	r5, #1
 8002c10:	fa05 f303 	lsl.w	r3, r5, r3
 8002c14:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c18:	bf8c      	ite	hi
 8002c1a:	3c03      	subhi	r4, #3
 8002c1c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c1e:	4019      	ands	r1, r3
 8002c20:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c22:	fa05 f404 	lsl.w	r4, r5, r4
 8002c26:	3c01      	subs	r4, #1
 8002c28:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8002c2a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c2c:	ea42 0201 	orr.w	r2, r2, r1
 8002c30:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c34:	bfad      	iteet	ge
 8002c36:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c3a:	f000 000f 	andlt.w	r0, r0, #15
 8002c3e:	4b06      	ldrlt	r3, [pc, #24]	; (8002c58 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c40:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c44:	bfb5      	itete	lt
 8002c46:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c48:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c4a:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c4c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8002c50:	bd30      	pop	{r4, r5, pc}
 8002c52:	bf00      	nop
 8002c54:	e000ed00 	.word	0xe000ed00
 8002c58:	e000ed14 	.word	0xe000ed14

08002c5c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002c5c:	2800      	cmp	r0, #0
 8002c5e:	db08      	blt.n	8002c72 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c60:	0942      	lsrs	r2, r0, #5
 8002c62:	2301      	movs	r3, #1
 8002c64:	f000 001f 	and.w	r0, r0, #31
 8002c68:	fa03 f000 	lsl.w	r0, r3, r0
 8002c6c:	4b01      	ldr	r3, [pc, #4]	; (8002c74 <HAL_NVIC_EnableIRQ+0x18>)
 8002c6e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8002c72:	4770      	bx	lr
 8002c74:	e000e100 	.word	0xe000e100

08002c78 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002c78:	b510      	push	{r4, lr}
  /* Check DAC handle */
  if (hdac == NULL)
 8002c7a:	4604      	mov	r4, r0
 8002c7c:	b168      	cbz	r0, 8002c9a <HAL_DAC_Init+0x22>
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002c7e:	7903      	ldrb	r3, [r0, #4]
 8002c80:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c84:	b913      	cbnz	r3, 8002c8c <HAL_DAC_Init+0x14>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002c86:	7142      	strb	r2, [r0, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002c88:	f7ff f8ac 	bl	8001de4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	7123      	strb	r3, [r4, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002c90:	2000      	movs	r0, #0

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002c92:	2301      	movs	r3, #1
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002c94:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8002c96:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8002c98:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 8002c9a:	2001      	movs	r0, #1
}
 8002c9c:	bd10      	pop	{r4, pc}

08002c9e <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002c9e:	4770      	bx	lr

08002ca0 <HAL_DAC_IRQHandler>:
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002ca0:	6803      	ldr	r3, [r0, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	0491      	lsls	r1, r2, #18
{
 8002ca6:	b510      	push	{r4, lr}
 8002ca8:	4604      	mov	r4, r0
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002caa:	d511      	bpl.n	8002cd0 <HAL_DAC_IRQHandler+0x30>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002cac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cae:	0492      	lsls	r2, r2, #18
 8002cb0:	d50e      	bpl.n	8002cd0 <HAL_DAC_IRQHandler+0x30>
      hdac->State = HAL_DAC_STATE_ERROR;
 8002cb2:	2204      	movs	r2, #4
 8002cb4:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002cb6:	6902      	ldr	r2, [r0, #16]
 8002cb8:	f042 0201 	orr.w	r2, r2, #1
 8002cbc:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002cbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cc2:	635a      	str	r2, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002cca:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002ccc:	f7ff ffe7 	bl	8002c9e <HAL_DAC_DMAUnderrunCallbackCh1>
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002cd0:	6823      	ldr	r3, [r4, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	0091      	lsls	r1, r2, #2
 8002cd6:	d514      	bpl.n	8002d02 <HAL_DAC_IRQHandler+0x62>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002cd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cda:	0092      	lsls	r2, r2, #2
 8002cdc:	d511      	bpl.n	8002d02 <HAL_DAC_IRQHandler+0x62>
      hdac->State = HAL_DAC_STATE_ERROR;
 8002cde:	2204      	movs	r2, #4
 8002ce0:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002ce2:	6922      	ldr	r2, [r4, #16]
 8002ce4:	f042 0202 	orr.w	r2, r2, #2
 8002ce8:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002cea:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002cee:	635a      	str	r2, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002cf6:	4620      	mov	r0, r4
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002cf8:	601a      	str	r2, [r3, #0]
}
 8002cfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002cfe:	f000 b88a 	b.w	8002e16 <HAL_DACEx_DMAUnderrunCallbackCh2>
 8002d02:	bd10      	pop	{r4, pc}

08002d04 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002d06:	7943      	ldrb	r3, [r0, #5]
 8002d08:	2b01      	cmp	r3, #1
{
 8002d0a:	4604      	mov	r4, r0
 8002d0c:	460d      	mov	r5, r1
 8002d0e:	4616      	mov	r6, r2
 8002d10:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hdac);
 8002d14:	d063      	beq.n	8002dde <HAL_DAC_ConfigChannel+0xda>
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8002d16:	680b      	ldr	r3, [r1, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d18:	7120      	strb	r0, [r4, #4]
  __HAL_LOCK(hdac);
 8002d1a:	2201      	movs	r2, #1

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002d1c:	2b04      	cmp	r3, #4
  __HAL_LOCK(hdac);
 8002d1e:	7162      	strb	r2, [r4, #5]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002d20:	d125      	bne.n	8002d6e <HAL_DAC_ConfigChannel+0x6a>
  /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8002d22:	2e00      	cmp	r6, #0
 8002d24:	d16c      	bne.n	8002e00 <HAL_DAC_ConfigChannel+0xfc>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8002d26:	f7ff fbe9 	bl	80024fc <HAL_GetTick>
 8002d2a:	4607      	mov	r7, r0

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002d2c:	6823      	ldr	r3, [r4, #0]
 8002d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d30:	041b      	lsls	r3, r3, #16
 8002d32:	d455      	bmi.n	8002de0 <HAL_DAC_ConfigChannel+0xdc>
          hdac->State = HAL_DAC_STATE_TIMEOUT;

          return HAL_TIMEOUT;
        }
      }
      HAL_Delay(1);
 8002d34:	2001      	movs	r0, #1
 8002d36:	f7ff fbe7 	bl	8002508 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002d3a:	6823      	ldr	r3, [r4, #0]
 8002d3c:	69aa      	ldr	r2, [r5, #24]
 8002d3e:	641a      	str	r2, [r3, #64]	; 0x40
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002d40:	6821      	ldr	r1, [r4, #0]
 8002d42:	f006 0010 	and.w	r0, r6, #16
 8002d46:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8002d48:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8002d4c:	4083      	lsls	r3, r0
 8002d4e:	ea22 0203 	bic.w	r2, r2, r3
 8002d52:	69eb      	ldr	r3, [r5, #28]
 8002d54:	4083      	lsls	r3, r0
 8002d56:	431a      	orrs	r2, r3
 8002d58:	648a      	str	r2, [r1, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002d5a:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8002d5c:	22ff      	movs	r2, #255	; 0xff
 8002d5e:	4082      	lsls	r2, r0
 8002d60:	ea23 0302 	bic.w	r3, r3, r2
 8002d64:	6a2a      	ldr	r2, [r5, #32]
 8002d66:	fa02 f000 	lsl.w	r0, r2, r0
 8002d6a:	4303      	orrs	r3, r0
 8002d6c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002d6e:	692b      	ldr	r3, [r5, #16]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	f006 0210 	and.w	r2, r6, #16
 8002d76:	6823      	ldr	r3, [r4, #0]
 8002d78:	d108      	bne.n	8002d8c <HAL_DAC_ConfigChannel+0x88>
  /* USER TRIMMING */
  {
  /* Get the DAC CCR value */
  tmpreg1 = hdac->Instance->CCR;
 8002d7a:	6b99      	ldr	r1, [r3, #56]	; 0x38
  /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002d7c:	201f      	movs	r0, #31
 8002d7e:	4090      	lsls	r0, r2
 8002d80:	ea21 0000 	bic.w	r0, r1, r0
  /* Configure for the selected trimming offset */
  tmpreg2 = sConfig->DAC_TrimmingValue;
  /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002d84:	6969      	ldr	r1, [r5, #20]
 8002d86:	4091      	lsls	r1, r2
 8002d88:	4301      	orrs	r1, r0
  /* Write to DAC CCR */
  hdac->Instance->CCR = tmpreg1;
 8002d8a:	6399      	str	r1, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002d8c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002d8e:	68ae      	ldr	r6, [r5, #8]
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002d90:	2007      	movs	r0, #7
 8002d92:	4090      	lsls	r0, r2
 8002d94:	ea21 0000 	bic.w	r0, r1, r0
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002d98:	6829      	ldr	r1, [r5, #0]
 8002d9a:	4331      	orrs	r1, r6
 8002d9c:	68ee      	ldr	r6, [r5, #12]
 8002d9e:	4331      	orrs	r1, r6
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002da0:	4091      	lsls	r1, r2
 8002da2:	4301      	orrs	r1, r0
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002da4:	63d9      	str	r1, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002da6:	6819      	ldr	r1, [r3, #0]
 8002da8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002dac:	4090      	lsls	r0, r2
 8002dae:	ea21 0100 	bic.w	r1, r1, r0
 8002db2:	6019      	str	r1, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002db4:	6819      	ldr	r1, [r3, #0]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002db6:	f640 70fc 	movw	r0, #4092	; 0xffc
 8002dba:	4090      	lsls	r0, r2
 8002dbc:	ea21 0000 	bic.w	r0, r1, r0
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002dc0:	6869      	ldr	r1, [r5, #4]
 8002dc2:	4091      	lsls	r1, r2
 8002dc4:	4301      	orrs	r1, r0
  }

#endif /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002dc6:	6019      	str	r1, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002dc8:	6819      	ldr	r1, [r3, #0]
 8002dca:	20c0      	movs	r0, #192	; 0xc0
 8002dcc:	fa00 f202 	lsl.w	r2, r0, r2
 8002dd0:	ea21 0202 	bic.w	r2, r1, r2
 8002dd4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002dd6:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_READY;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	7123      	strb	r3, [r4, #4]
  __HAL_UNLOCK(hdac);
 8002ddc:	7160      	strb	r0, [r4, #5]

  /* Return function status */
  return HAL_OK;
}
 8002dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002de0:	f7ff fb8c 	bl	80024fc <HAL_GetTick>
 8002de4:	1bc0      	subs	r0, r0, r7
 8002de6:	2801      	cmp	r0, #1
 8002de8:	d9a0      	bls.n	8002d2c <HAL_DAC_ConfigChannel+0x28>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002dea:	6923      	ldr	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002dec:	2003      	movs	r0, #3
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002dee:	f043 0308 	orr.w	r3, r3, #8
 8002df2:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002df4:	7120      	strb	r0, [r4, #4]
          return HAL_TIMEOUT;
 8002df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002df8:	f7ff fb80 	bl	80024fc <HAL_GetTick>
 8002dfc:	2801      	cmp	r0, #1
 8002dfe:	d8f4      	bhi.n	8002dea <HAL_DAC_ConfigChannel+0xe6>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002e00:	6823      	ldr	r3, [r4, #0]
 8002e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	dbf7      	blt.n	8002df8 <HAL_DAC_ConfigChannel+0xf4>
      HAL_Delay(1U);
 8002e08:	2001      	movs	r0, #1
 8002e0a:	f7ff fb7d 	bl	8002508 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002e0e:	6823      	ldr	r3, [r4, #0]
 8002e10:	69aa      	ldr	r2, [r5, #24]
 8002e12:	645a      	str	r2, [r3, #68]	; 0x44
 8002e14:	e794      	b.n	8002d40 <HAL_DAC_ConfigChannel+0x3c>

08002e16 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002e16:	4770      	bx	lr

08002e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e1c:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e1e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e20:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002fcc <HAL_GPIO_Init+0x1b4>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002e24:	4c67      	ldr	r4, [pc, #412]	; (8002fc4 <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e26:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00u;
 8002e28:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e2a:	9a01      	ldr	r2, [sp, #4]
 8002e2c:	40da      	lsrs	r2, r3
 8002e2e:	d102      	bne.n	8002e36 <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 8002e30:	b005      	add	sp, #20
 8002e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e36:	2601      	movs	r6, #1
    if (iocurrent != 0x00u)
 8002e38:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e3a:	409e      	lsls	r6, r3
    if (iocurrent != 0x00u)
 8002e3c:	ea12 0e06 	ands.w	lr, r2, r6
 8002e40:	f000 80b1 	beq.w	8002fa6 <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e44:	684a      	ldr	r2, [r1, #4]
 8002e46:	f022 0710 	bic.w	r7, r2, #16
 8002e4a:	2f02      	cmp	r7, #2
 8002e4c:	d116      	bne.n	8002e7c <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 8002e4e:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8002e52:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e56:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8002e5a:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e5e:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8002e62:	f04f 0c0f 	mov.w	ip, #15
 8002e66:	fa0c fc0a 	lsl.w	ip, ip, sl
 8002e6a:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e6e:	690d      	ldr	r5, [r1, #16]
 8002e70:	fa05 f50a 	lsl.w	r5, r5, sl
 8002e74:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 8002e78:	f8c9 5020 	str.w	r5, [r9, #32]
 8002e7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e80:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8002e82:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e86:	fa05 f50c 	lsl.w	r5, r5, ip
 8002e8a:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e8c:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e90:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e94:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e98:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e9a:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e9e:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8002ea0:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ea4:	d811      	bhi.n	8002eca <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8002ea6:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ea8:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002eac:	68cf      	ldr	r7, [r1, #12]
 8002eae:	fa07 f70c 	lsl.w	r7, r7, ip
 8002eb2:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8002eb6:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002eb8:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002eba:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002ebe:	f3c2 1700 	ubfx	r7, r2, #4, #1
 8002ec2:	409f      	lsls	r7, r3
 8002ec4:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 8002ec8:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002eca:	f1ba 0f03 	cmp.w	sl, #3
 8002ece:	d107      	bne.n	8002ee0 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 8002ed0:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002ed2:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002ed6:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 8002eda:	409f      	lsls	r7, r3
 8002edc:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 8002ede:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8002ee0:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002ee2:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002ee4:	688e      	ldr	r6, [r1, #8]
 8002ee6:	fa06 f60c 	lsl.w	r6, r6, ip
 8002eea:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 8002eec:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002eee:	00d5      	lsls	r5, r2, #3
 8002ef0:	d559      	bpl.n	8002fa6 <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ef2:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8002ef6:	f045 0501 	orr.w	r5, r5, #1
 8002efa:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 8002efe:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8002f02:	f023 0603 	bic.w	r6, r3, #3
 8002f06:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8002f0a:	f005 0501 	and.w	r5, r5, #1
 8002f0e:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8002f12:	9503      	str	r5, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f14:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f18:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8002f1a:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f1c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8002f20:	270f      	movs	r7, #15
 8002f22:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f26:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f2a:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f2e:	d03c      	beq.n	8002faa <HAL_GPIO_Init+0x192>
 8002f30:	4d25      	ldr	r5, [pc, #148]	; (8002fc8 <HAL_GPIO_Init+0x1b0>)
 8002f32:	42a8      	cmp	r0, r5
 8002f34:	d03b      	beq.n	8002fae <HAL_GPIO_Init+0x196>
 8002f36:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002f3a:	42a8      	cmp	r0, r5
 8002f3c:	d039      	beq.n	8002fb2 <HAL_GPIO_Init+0x19a>
 8002f3e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002f42:	42a8      	cmp	r0, r5
 8002f44:	d037      	beq.n	8002fb6 <HAL_GPIO_Init+0x19e>
 8002f46:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002f4a:	42a8      	cmp	r0, r5
 8002f4c:	d035      	beq.n	8002fba <HAL_GPIO_Init+0x1a2>
 8002f4e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002f52:	42a8      	cmp	r0, r5
 8002f54:	d033      	beq.n	8002fbe <HAL_GPIO_Init+0x1a6>
 8002f56:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002f5a:	42a8      	cmp	r0, r5
 8002f5c:	bf14      	ite	ne
 8002f5e:	2507      	movne	r5, #7
 8002f60:	2506      	moveq	r5, #6
 8002f62:	fa05 f50c 	lsl.w	r5, r5, ip
 8002f66:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f68:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 8002f6a:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8002f6c:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f70:	03d7      	lsls	r7, r2, #15
        temp &= ~(iocurrent);
 8002f72:	bf54      	ite	pl
 8002f74:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8002f76:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 8002f7a:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 8002f7c:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f7e:	0397      	lsls	r7, r2, #14
        temp &= ~(iocurrent);
 8002f80:	bf54      	ite	pl
 8002f82:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8002f84:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 8002f88:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 8002f8a:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f8c:	02d7      	lsls	r7, r2, #11
        temp &= ~(iocurrent);
 8002f8e:	bf54      	ite	pl
 8002f90:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8002f92:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 8002f96:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8002f98:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f9a:	0292      	lsls	r2, r2, #10
        temp &= ~(iocurrent);
 8002f9c:	bf54      	ite	pl
 8002f9e:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8002fa0:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 8002fa4:	60e5      	str	r5, [r4, #12]
    position++;
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	e73f      	b.n	8002e2a <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002faa:	2500      	movs	r5, #0
 8002fac:	e7d9      	b.n	8002f62 <HAL_GPIO_Init+0x14a>
 8002fae:	2501      	movs	r5, #1
 8002fb0:	e7d7      	b.n	8002f62 <HAL_GPIO_Init+0x14a>
 8002fb2:	2502      	movs	r5, #2
 8002fb4:	e7d5      	b.n	8002f62 <HAL_GPIO_Init+0x14a>
 8002fb6:	2503      	movs	r5, #3
 8002fb8:	e7d3      	b.n	8002f62 <HAL_GPIO_Init+0x14a>
 8002fba:	2504      	movs	r5, #4
 8002fbc:	e7d1      	b.n	8002f62 <HAL_GPIO_Init+0x14a>
 8002fbe:	2505      	movs	r5, #5
 8002fc0:	e7cf      	b.n	8002f62 <HAL_GPIO_Init+0x14a>
 8002fc2:	bf00      	nop
 8002fc4:	40010400 	.word	0x40010400
 8002fc8:	48000400 	.word	0x48000400
 8002fcc:	40021000 	.word	0x40021000

08002fd0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002fd0:	6903      	ldr	r3, [r0, #16]
 8002fd2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002fd4:	bf14      	ite	ne
 8002fd6:	2001      	movne	r0, #1
 8002fd8:	2000      	moveq	r0, #0
 8002fda:	4770      	bx	lr

08002fdc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fdc:	b10a      	cbz	r2, 8002fe2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002fde:	6181      	str	r1, [r0, #24]
 8002fe0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002fe2:	6281      	str	r1, [r0, #40]	; 0x28
 8002fe4:	4770      	bx	lr

08002fe6 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002fe6:	6943      	ldr	r3, [r0, #20]
 8002fe8:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002fea:	bf14      	ite	ne
 8002fec:	6281      	strne	r1, [r0, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002fee:	6181      	streq	r1, [r0, #24]
 8002ff0:	4770      	bx	lr

08002ff2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ff2:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ff4:	4604      	mov	r4, r0
 8002ff6:	2800      	cmp	r0, #0
 8002ff8:	d04a      	beq.n	8003090 <HAL_I2C_Init+0x9e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ffa:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002ffe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003002:	b91b      	cbnz	r3, 800300c <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003004:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003008:	f7fe ff22 	bl	8001e50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800300c:	2324      	movs	r3, #36	; 0x24
 800300e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003012:	6823      	ldr	r3, [r4, #0]
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003014:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	f022 0201 	bic.w	r2, r2, #1
 800301c:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800301e:	6862      	ldr	r2, [r4, #4]
 8003020:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003024:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003026:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003028:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800302a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800302e:	609a      	str	r2, [r3, #8]
 8003030:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003032:	d124      	bne.n	800307e <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003034:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003038:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800303a:	685a      	ldr	r2, [r3, #4]
  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800303c:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800303e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003042:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003046:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003048:	68da      	ldr	r2, [r3, #12]
 800304a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800304e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003050:	6922      	ldr	r2, [r4, #16]
 8003052:	430a      	orrs	r2, r1
 8003054:	69a1      	ldr	r1, [r4, #24]
 8003056:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800305a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800305c:	6a21      	ldr	r1, [r4, #32]
 800305e:	69e2      	ldr	r2, [r4, #28]
 8003060:	430a      	orrs	r2, r1
 8003062:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	f042 0201 	orr.w	r2, r2, #1
 800306a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800306c:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800306e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003070:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003072:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003076:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003078:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
 800307c:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800307e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003082:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003084:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003086:	bf04      	itt	eq
 8003088:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 800308c:	605a      	streq	r2, [r3, #4]
 800308e:	e7d4      	b.n	800303a <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8003090:	2001      	movs	r0, #1
}
 8003092:	bd10      	pop	{r4, pc}

08003094 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003094:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8003098:	b2d2      	uxtb	r2, r2
 800309a:	2a20      	cmp	r2, #32
{
 800309c:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800309e:	d11d      	bne.n	80030dc <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030a0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d019      	beq.n	80030dc <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030a8:	2324      	movs	r3, #36	; 0x24
 80030aa:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030ae:	6803      	ldr	r3, [r0, #0]
 80030b0:	681c      	ldr	r4, [r3, #0]
 80030b2:	f024 0401 	bic.w	r4, r4, #1
 80030b6:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80030b8:	681c      	ldr	r4, [r3, #0]
 80030ba:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 80030be:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80030c0:	681c      	ldr	r4, [r3, #0]
 80030c2:	4321      	orrs	r1, r4
 80030c4:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030c6:	6819      	ldr	r1, [r3, #0]
 80030c8:	f041 0101 	orr.w	r1, r1, #1
 80030cc:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030ce:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80030d0:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80030d4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80030d8:	4618      	mov	r0, r3
 80030da:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 80030dc:	2002      	movs	r0, #2
  }
}
 80030de:	bd10      	pop	{r4, pc}

080030e0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80030e0:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030e2:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 80030e6:	b2e4      	uxtb	r4, r4
 80030e8:	2c20      	cmp	r4, #32
 80030ea:	d11c      	bne.n	8003126 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030ec:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d018      	beq.n	8003126 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030f4:	2324      	movs	r3, #36	; 0x24
 80030f6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030fa:	6803      	ldr	r3, [r0, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	f022 0201 	bic.w	r2, r2, #1
 8003102:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003104:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003106:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800310a:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800310e:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	f042 0201 	orr.w	r2, r2, #1
 8003116:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003118:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800311a:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800311e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8003122:	4618      	mov	r0, r3
 8003124:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8003126:	2002      	movs	r0, #2
  }
}
 8003128:	bd10      	pop	{r4, pc}

0800312a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800312a:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800312c:	4604      	mov	r4, r0
{
 800312e:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 8003130:	b360      	cbz	r0, 800318c <HAL_PCD_Init+0x62>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003132:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
  USBx = hpcd->Instance;
 8003136:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003138:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800313c:	b91b      	cbnz	r3, 8003146 <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800313e:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003142:	f00a fee9 	bl	800df18 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003146:	2303      	movs	r3, #3
 8003148:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800314c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800314e:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003150:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_PCD_DISABLE(hpcd);
 8003154:	f855 0b10 	ldr.w	r0, [r5], #16
    hpcd->Init.dma_enable = 0U;
 8003158:	bf08      	it	eq
 800315a:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 800315c:	f003 f806 	bl	800616c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003160:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003162:	466e      	mov	r6, sp
 8003164:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003166:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003168:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800316a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800316e:	e886 0003 	stmia.w	r6, {r0, r1}
 8003172:	4625      	mov	r5, r4
 8003174:	1d27      	adds	r7, r4, #4
 8003176:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800317a:	f855 0b10 	ldr.w	r0, [r5], #16
 800317e:	f002 ff43 	bl	8006008 <USB_CoreInit>
 8003182:	4606      	mov	r6, r0
 8003184:	b120      	cbz	r0, 8003190 <HAL_PCD_Init+0x66>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003186:	2302      	movs	r3, #2
 8003188:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 800318c:	2501      	movs	r5, #1
 800318e:	e056      	b.n	800323e <HAL_PCD_Init+0x114>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003190:	4601      	mov	r1, r0
 8003192:	6820      	ldr	r0, [r4, #0]
 8003194:	f002 fff0 	bl	8006178 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003198:	4630      	mov	r0, r6
 800319a:	f8d4 e004 	ldr.w	lr, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800319e:	261c      	movs	r6, #28
 80031a0:	f04f 0c01 	mov.w	ip, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80031a4:	4601      	mov	r1, r0
 80031a6:	b2c2      	uxtb	r2, r0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031a8:	4596      	cmp	lr, r2
 80031aa:	f100 0001 	add.w	r0, r0, #1
 80031ae:	d81c      	bhi.n	80031ea <HAL_PCD_Init+0xc0>
 80031b0:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80031b2:	261c      	movs	r6, #28
 80031b4:	4619      	mov	r1, r3
 80031b6:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031b8:	4586      	cmp	lr, r0
 80031ba:	f103 0301 	add.w	r3, r3, #1
 80031be:	d822      	bhi.n	8003206 <HAL_PCD_Init+0xdc>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031c2:	466e      	mov	r6, sp
 80031c4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80031c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031c8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80031ca:	e895 0003 	ldmia.w	r5, {r0, r1}
 80031ce:	e886 0003 	stmia.w	r6, {r0, r1}
 80031d2:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80031d6:	6820      	ldr	r0, [r4, #0]
 80031d8:	f003 f810 	bl	80061fc <USB_DevInit>
 80031dc:	2301      	movs	r3, #1
 80031de:	4605      	mov	r5, r0
 80031e0:	b300      	cbz	r0, 8003224 <HAL_PCD_Init+0xfa>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031e2:	2202      	movs	r2, #2
 80031e4:	f884 23bd 	strb.w	r2, [r4, #957]	; 0x3bd
 80031e8:	e7d0      	b.n	800318c <HAL_PCD_Init+0x62>
    hpcd->IN_ep[i].is_in = 1U;
 80031ea:	fb06 4302 	mla	r3, r6, r2, r4
 80031ee:	f883 c03d 	strb.w	ip, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 80031f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 80031f6:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80031fa:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 80031fe:	6459      	str	r1, [r3, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003200:	6499      	str	r1, [r3, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 8003202:	6519      	str	r1, [r3, #80]	; 0x50
 8003204:	e7cf      	b.n	80031a6 <HAL_PCD_Init+0x7c>
    hpcd->OUT_ep[i].is_in = 0U;
 8003206:	fb06 4200 	mla	r2, r6, r0, r4
 800320a:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 800320e:	f882 01fc 	strb.w	r0, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003212:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003216:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800321a:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 800321e:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
 8003222:	e7c8      	b.n	80031b6 <HAL_PCD_Init+0x8c>
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 8003224:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003228:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800322c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800322e:	2b01      	cmp	r3, #1
 8003230:	d102      	bne.n	8003238 <HAL_PCD_Init+0x10e>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003232:	4620      	mov	r0, r4
 8003234:	f000 fbe8 	bl	8003a08 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8003238:	6820      	ldr	r0, [r4, #0]
 800323a:	f003 fac1 	bl	80067c0 <USB_DevDisconnect>

  return HAL_OK;
}
 800323e:	4628      	mov	r0, r5
 8003240:	b00b      	add	sp, #44	; 0x2c
 8003242:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003244 <HAL_PCD_Start>:
{
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8003244:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8003248:	2b01      	cmp	r3, #1
{
 800324a:	b510      	push	{r4, lr}
 800324c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800324e:	d013      	beq.n	8003278 <HAL_PCD_Start+0x34>
 8003250:	2301      	movs	r3, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003252:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8003254:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8003258:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800325a:	2b01      	cmp	r3, #1
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800325c:	bf02      	ittt	eq
 800325e:	6b83      	ldreq	r3, [r0, #56]	; 0x38
 8003260:	f443 3380 	orreq.w	r3, r3, #65536	; 0x10000
 8003264:	6383      	streq	r3, [r0, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  (void)USB_DevConnect(hpcd->Instance);
 8003266:	f003 fa9f 	bl	80067a8 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800326a:	6820      	ldr	r0, [r4, #0]
 800326c:	f002 ff78 	bl	8006160 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8003270:	2000      	movs	r0, #0
 8003272:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8003276:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8003278:	2002      	movs	r0, #2
}
 800327a:	bd10      	pop	{r4, pc}

0800327c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800327c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003280:	6806      	ldr	r6, [r0, #0]
{
 8003282:	b085      	sub	sp, #20
 8003284:	4604      	mov	r4, r0
  uint32_t i, ep_intr, epint, epnum = 0U;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003286:	4630      	mov	r0, r6
 8003288:	f003 fad5 	bl	8006836 <USB_GetMode>
 800328c:	9000      	str	r0, [sp, #0]
 800328e:	2800      	cmp	r0, #0
 8003290:	f040 814a 	bne.w	8003528 <HAL_PCD_IRQHandler+0x2ac>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003294:	6820      	ldr	r0, [r4, #0]
 8003296:	f003 fa9f 	bl	80067d8 <USB_ReadInterrupts>
 800329a:	2800      	cmp	r0, #0
 800329c:	f000 8144 	beq.w	8003528 <HAL_PCD_IRQHandler+0x2ac>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80032a0:	6820      	ldr	r0, [r4, #0]
 80032a2:	f003 fa99 	bl	80067d8 <USB_ReadInterrupts>
 80032a6:	0785      	lsls	r5, r0, #30
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80032a8:	bf48      	it	mi
 80032aa:	6822      	ldrmi	r2, [r4, #0]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80032ac:	6820      	ldr	r0, [r4, #0]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80032ae:	bf42      	ittt	mi
 80032b0:	6953      	ldrmi	r3, [r2, #20]
 80032b2:	f003 0302 	andmi.w	r3, r3, #2
 80032b6:	6153      	strmi	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80032b8:	f003 fa8e 	bl	80067d8 <USB_ReadInterrupts>
 80032bc:	f410 2500 	ands.w	r5, r0, #524288	; 0x80000
 80032c0:	d00e      	beq.n	80032e0 <HAL_PCD_IRQHandler+0x64>
    {
      epnum = 0U;

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80032c2:	6820      	ldr	r0, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;


  if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80032c4:	f8df a480 	ldr.w	sl, [pc, #1152]	; 8003748 <HAL_PCD_IRQHandler+0x4cc>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80032c8:	f003 fa8a 	bl	80067e0 <USB_ReadDevAllOutEpInterrupt>
 80032cc:	f506 6730 	add.w	r7, r6, #2816	; 0xb00
 80032d0:	4680      	mov	r8, r0
      epnum = 0U;
 80032d2:	2500      	movs	r5, #0
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032d4:	f04f 0920 	mov.w	r9, #32
      while (ep_intr != 0U)
 80032d8:	f1b8 0f00 	cmp.w	r8, #0
 80032dc:	f040 8127 	bne.w	800352e <HAL_PCD_IRQHandler+0x2b2>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80032e0:	6820      	ldr	r0, [r4, #0]
 80032e2:	f003 fa79 	bl	80067d8 <USB_ReadInterrupts>
 80032e6:	0342      	lsls	r2, r0, #13
 80032e8:	d50b      	bpl.n	8003302 <HAL_PCD_IRQHandler+0x86>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80032ea:	6820      	ldr	r0, [r4, #0]
 80032ec:	f003 fa80 	bl	80067f0 <USB_ReadDevAllInEpInterrupt>
 80032f0:	4627      	mov	r7, r4
 80032f2:	4683      	mov	fp, r0
 80032f4:	f506 6a10 	add.w	sl, r6, #2304	; 0x900
      epnum = 0U;
 80032f8:	2500      	movs	r5, #0
      while (ep_intr != 0U)
 80032fa:	f1bb 0f00 	cmp.w	fp, #0
 80032fe:	f040 8168 	bne.w	80035d2 <HAL_PCD_IRQHandler+0x356>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003302:	6820      	ldr	r0, [r4, #0]
 8003304:	f003 fa68 	bl	80067d8 <USB_ReadInterrupts>
 8003308:	2800      	cmp	r0, #0
 800330a:	da15      	bge.n	8003338 <HAL_PCD_IRQHandler+0xbc>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800330c:	f8d6 3804 	ldr.w	r3, [r6, #2052]	; 0x804
 8003310:	f023 0301 	bic.w	r3, r3, #1
 8003314:	f8c6 3804 	str.w	r3, [r6, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 8003318:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 800331c:	2b01      	cmp	r3, #1
 800331e:	f040 81de 	bne.w	80036de <HAL_PCD_IRQHandler+0x462>
        hpcd->LPM_State = LPM_L0;
 8003322:	2100      	movs	r1, #0
 8003324:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003328:	4620      	mov	r0, r4
 800332a:	f00a ff79 	bl	800e220 <HAL_PCDEx_LPM_Callback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800332e:	6822      	ldr	r2, [r4, #0]
 8003330:	6953      	ldr	r3, [r2, #20]
 8003332:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003336:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003338:	6820      	ldr	r0, [r4, #0]
 800333a:	f003 fa4d 	bl	80067d8 <USB_ReadInterrupts>
 800333e:	0503      	lsls	r3, r0, #20
 8003340:	d50b      	bpl.n	800335a <HAL_PCD_IRQHandler+0xde>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003342:	f8d6 3808 	ldr.w	r3, [r6, #2056]	; 0x808
 8003346:	07df      	lsls	r7, r3, #31
 8003348:	d502      	bpl.n	8003350 <HAL_PCD_IRQHandler+0xd4>
        HAL_PCD_SuspendCallback(hpcd);
 800334a:	4620      	mov	r0, r4
 800334c:	f00a fe60 	bl	800e010 <HAL_PCD_SuspendCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003350:	6822      	ldr	r2, [r4, #0]
 8003352:	6953      	ldr	r3, [r2, #20]
 8003354:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003358:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800335a:	6820      	ldr	r0, [r4, #0]
 800335c:	f003 fa3c 	bl	80067d8 <USB_ReadInterrupts>
 8003360:	0100      	lsls	r0, r0, #4
 8003362:	d514      	bpl.n	800338e <HAL_PCD_IRQHandler+0x112>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003364:	6823      	ldr	r3, [r4, #0]
 8003366:	695a      	ldr	r2, [r3, #20]
 8003368:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800336c:	615a      	str	r2, [r3, #20]
      if (hpcd->LPM_State == LPM_L0)
 800336e:	f894 23f4 	ldrb.w	r2, [r4, #1012]	; 0x3f4
 8003372:	2a00      	cmp	r2, #0
 8003374:	f040 81b7 	bne.w	80036e6 <HAL_PCD_IRQHandler+0x46a>
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
        hpcd->LPM_State = LPM_L1;
 800337a:	2101      	movs	r1, #1
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800337c:	f3c3 0383 	ubfx	r3, r3, #2, #4
        hpcd->LPM_State = LPM_L1;
 8003380:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003384:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003388:	4620      	mov	r0, r4
 800338a:	f00a ff49 	bl	800e220 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800338e:	6820      	ldr	r0, [r4, #0]
 8003390:	f003 fa22 	bl	80067d8 <USB_ReadInterrupts>
 8003394:	04c1      	lsls	r1, r0, #19
 8003396:	d534      	bpl.n	8003402 <HAL_PCD_IRQHandler+0x186>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003398:	f506 6700 	add.w	r7, r6, #2048	; 0x800
 800339c:	687b      	ldr	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800339e:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80033a0:	f023 0301 	bic.w	r3, r3, #1
 80033a4:	607b      	str	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80033a6:	2110      	movs	r1, #16
 80033a8:	f002 fefe 	bl	80061a8 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033ac:	6860      	ldr	r0, [r4, #4]
 80033ae:	f506 6310 	add.w	r3, r6, #2304	; 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80033b2:	f64f 317f 	movw	r1, #64383	; 0xfb7f
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033b6:	9a00      	ldr	r2, [sp, #0]
 80033b8:	4282      	cmp	r2, r0
 80033ba:	f040 8198 	bne.w	80036ee <HAL_PCD_IRQHandler+0x472>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80033c4:	61fb      	str	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80033c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f000 81a2 	beq.w	8003712 <HAL_PCD_IRQHandler+0x496>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80033ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033d2:	f043 030b 	orr.w	r3, r3, #11
 80033d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80033da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033dc:	f043 030b 	orr.w	r3, r3, #11
 80033e0:	647b      	str	r3, [r7, #68]	; 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80033e2:	f8d6 3800 	ldr.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80033e6:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80033e8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80033ec:	f8c6 3800 	str.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80033f0:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 80033f4:	f003 fa3e 	bl	8006874 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80033f8:	6822      	ldr	r2, [r4, #0]
 80033fa:	6953      	ldr	r3, [r2, #20]
 80033fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003400:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003402:	6820      	ldr	r0, [r4, #0]
 8003404:	f003 f9e8 	bl	80067d8 <USB_ReadInterrupts>
 8003408:	0482      	lsls	r2, r0, #18
 800340a:	d516      	bpl.n	800343a <HAL_PCD_IRQHandler+0x1be>
      (void)USB_ActivateSetup(hpcd->Instance);
 800340c:	6820      	ldr	r0, [r4, #0]
 800340e:	f003 fa16 	bl	800683e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003412:	6820      	ldr	r0, [r4, #0]
 8003414:	f002 ff9a 	bl	800634c <USB_GetDevSpeed>
 8003418:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800341a:	6827      	ldr	r7, [r4, #0]
 800341c:	f000 ff5c 	bl	80042d8 <HAL_RCC_GetHCLKFreq>
 8003420:	7b22      	ldrb	r2, [r4, #12]
 8003422:	4601      	mov	r1, r0
 8003424:	4638      	mov	r0, r7
 8003426:	f002 fe27 	bl	8006078 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 800342a:	4620      	mov	r0, r4
 800342c:	f00a fddd 	bl	800dfea <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003430:	6822      	ldr	r2, [r4, #0]
 8003432:	6953      	ldr	r3, [r2, #20]
 8003434:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003438:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800343a:	6820      	ldr	r0, [r4, #0]
 800343c:	f003 f9cc 	bl	80067d8 <USB_ReadInterrupts>
 8003440:	06c3      	lsls	r3, r0, #27
 8003442:	d52b      	bpl.n	800349c <HAL_PCD_IRQHandler+0x220>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003444:	6822      	ldr	r2, [r4, #0]
 8003446:	6993      	ldr	r3, [r2, #24]
 8003448:	f023 0310 	bic.w	r3, r3, #16
 800344c:	6193      	str	r3, [r2, #24]
      temp = USBx->GRXSTSP;
 800344e:	6a37      	ldr	r7, [r6, #32]
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003450:	f3c7 4343 	ubfx	r3, r7, #17, #4
 8003454:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003456:	f007 090f 	and.w	r9, r7, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800345a:	f040 8165 	bne.w	8003728 <HAL_PCD_IRQHandler+0x4ac>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800345e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003462:	421f      	tst	r7, r3
 8003464:	d015      	beq.n	8003492 <HAL_PCD_IRQHandler+0x216>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003466:	f04f 081c 	mov.w	r8, #28
 800346a:	fb08 4809 	mla	r8, r8, r9, r4
 800346e:	f3c7 170a 	ubfx	r7, r7, #4, #11
 8003472:	463a      	mov	r2, r7
 8003474:	f8d8 1208 	ldr.w	r1, [r8, #520]	; 0x208
 8003478:	4630      	mov	r0, r6
 800347a:	f003 f91f 	bl	80066bc <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800347e:	f8d8 3208 	ldr.w	r3, [r8, #520]	; 0x208
 8003482:	443b      	add	r3, r7
 8003484:	f8c8 3208 	str.w	r3, [r8, #520]	; 0x208
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003488:	f8d8 3214 	ldr.w	r3, [r8, #532]	; 0x214
 800348c:	441f      	add	r7, r3
 800348e:	f8c8 7214 	str.w	r7, [r8, #532]	; 0x214
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003492:	6822      	ldr	r2, [r4, #0]
 8003494:	6993      	ldr	r3, [r2, #24]
 8003496:	f043 0310 	orr.w	r3, r3, #16
 800349a:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800349c:	6820      	ldr	r0, [r4, #0]
 800349e:	f003 f99b 	bl	80067d8 <USB_ReadInterrupts>
 80034a2:	0707      	lsls	r7, r0, #28
 80034a4:	d507      	bpl.n	80034b6 <HAL_PCD_IRQHandler+0x23a>
      HAL_PCD_SOFCallback(hpcd);
 80034a6:	4620      	mov	r0, r4
 80034a8:	f00a fd9b 	bl	800dfe2 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80034ac:	6822      	ldr	r2, [r4, #0]
 80034ae:	6953      	ldr	r3, [r2, #20]
 80034b0:	f003 0308 	and.w	r3, r3, #8
 80034b4:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80034b6:	6820      	ldr	r0, [r4, #0]
 80034b8:	f003 f98e 	bl	80067d8 <USB_ReadInterrupts>
 80034bc:	02c6      	lsls	r6, r0, #11
 80034be:	d508      	bpl.n	80034d2 <HAL_PCD_IRQHandler+0x256>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80034c0:	b2e9      	uxtb	r1, r5
 80034c2:	4620      	mov	r0, r4
 80034c4:	f00a fdda 	bl	800e07c <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80034c8:	6822      	ldr	r2, [r4, #0]
 80034ca:	6953      	ldr	r3, [r2, #20]
 80034cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034d0:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80034d2:	6820      	ldr	r0, [r4, #0]
 80034d4:	f003 f980 	bl	80067d8 <USB_ReadInterrupts>
 80034d8:	0280      	lsls	r0, r0, #10
 80034da:	d508      	bpl.n	80034ee <HAL_PCD_IRQHandler+0x272>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80034dc:	b2e9      	uxtb	r1, r5
 80034de:	4620      	mov	r0, r4
 80034e0:	f00a fdc8 	bl	800e074 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80034e4:	6822      	ldr	r2, [r4, #0]
 80034e6:	6953      	ldr	r3, [r2, #20]
 80034e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034ec:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80034ee:	6820      	ldr	r0, [r4, #0]
 80034f0:	f003 f972 	bl	80067d8 <USB_ReadInterrupts>
 80034f4:	0041      	lsls	r1, r0, #1
 80034f6:	d507      	bpl.n	8003508 <HAL_PCD_IRQHandler+0x28c>
      HAL_PCD_ConnectCallback(hpcd);
 80034f8:	4620      	mov	r0, r4
 80034fa:	f00a fdc3 	bl	800e084 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80034fe:	6822      	ldr	r2, [r4, #0]
 8003500:	6953      	ldr	r3, [r2, #20]
 8003502:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003506:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003508:	6820      	ldr	r0, [r4, #0]
 800350a:	f003 f965 	bl	80067d8 <USB_ReadInterrupts>
 800350e:	0742      	lsls	r2, r0, #29
 8003510:	d50a      	bpl.n	8003528 <HAL_PCD_IRQHandler+0x2ac>
      temp = hpcd->Instance->GOTGINT;
 8003512:	6823      	ldr	r3, [r4, #0]
 8003514:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003516:	076b      	lsls	r3, r5, #29
 8003518:	d502      	bpl.n	8003520 <HAL_PCD_IRQHandler+0x2a4>
        HAL_PCD_DisconnectCallback(hpcd);
 800351a:	4620      	mov	r0, r4
 800351c:	f00a fdb6 	bl	800e08c <HAL_PCD_DisconnectCallback>
      hpcd->Instance->GOTGINT |= temp;
 8003520:	6823      	ldr	r3, [r4, #0]
 8003522:	685a      	ldr	r2, [r3, #4]
 8003524:	4315      	orrs	r5, r2
 8003526:	605d      	str	r5, [r3, #4]
}
 8003528:	b005      	add	sp, #20
 800352a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((ep_intr & 0x1U) != 0U)
 800352e:	f018 0f01 	tst.w	r8, #1
 8003532:	d040      	beq.n	80035b6 <HAL_PCD_IRQHandler+0x33a>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003534:	b2ea      	uxtb	r2, r5
 8003536:	4611      	mov	r1, r2
 8003538:	6820      	ldr	r0, [r4, #0]
 800353a:	9201      	str	r2, [sp, #4]
 800353c:	f003 f960 	bl	8006800 <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003540:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003544:	4683      	mov	fp, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003546:	9a01      	ldr	r2, [sp, #4]
 8003548:	d00f      	beq.n	800356a <HAL_PCD_IRQHandler+0x2ee>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800354a:	2101      	movs	r1, #1
 800354c:	60b9      	str	r1, [r7, #8]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800354e:	6821      	ldr	r1, [r4, #0]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003550:	6c08      	ldr	r0, [r1, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003552:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003556:	eb01 1145 	add.w	r1, r1, r5, lsl #5
  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800355a:	4550      	cmp	r0, sl
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800355c:	688b      	ldr	r3, [r1, #8]
  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800355e:	d133      	bne.n	80035c8 <HAL_PCD_IRQHandler+0x34c>
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003560:	0418      	lsls	r0, r3, #16
 8003562:	d52d      	bpl.n	80035c0 <HAL_PCD_IRQHandler+0x344>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003564:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003568:	608a      	str	r2, [r1, #8]
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800356a:	f01b 0f08 	tst.w	fp, #8
 800356e:	d012      	beq.n	8003596 <HAL_PCD_IRQHandler+0x31a>
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003570:	6822      	ldr	r2, [r4, #0]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003572:	6c11      	ldr	r1, [r2, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003574:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003578:	eb02 1245 	add.w	r2, r2, r5, lsl #5
  if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 800357c:	4551      	cmp	r1, sl
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800357e:	6890      	ldr	r0, [r2, #8]
  if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8003580:	d104      	bne.n	800358c <HAL_PCD_IRQHandler+0x310>
 8003582:	0401      	lsls	r1, r0, #16
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003584:	bf44      	itt	mi
 8003586:	f44f 4100 	movmi.w	r1, #32768	; 0x8000
 800358a:	6091      	strmi	r1, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800358c:	4620      	mov	r0, r4
 800358e:	f00a fd11 	bl	800dfb4 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003592:	2208      	movs	r2, #8
 8003594:	60ba      	str	r2, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003596:	f01b 0f10 	tst.w	fp, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800359a:	bf1c      	itt	ne
 800359c:	2210      	movne	r2, #16
 800359e:	60ba      	strne	r2, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80035a0:	f01b 0f20 	tst.w	fp, #32
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80035a4:	bf18      	it	ne
 80035a6:	f8c7 9008 	strne.w	r9, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80035aa:	f41b 5f00 	tst.w	fp, #8192	; 0x2000
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80035ae:	bf1c      	itt	ne
 80035b0:	f44f 5300 	movne.w	r3, #8192	; 0x2000
 80035b4:	60bb      	strne	r3, [r7, #8]
        epnum++;
 80035b6:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 80035b8:	ea4f 0858 	mov.w	r8, r8, lsr #1
 80035bc:	3720      	adds	r7, #32
 80035be:	e68b      	b.n	80032d8 <HAL_PCD_IRQHandler+0x5c>
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80035c0:	0698      	lsls	r0, r3, #26
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80035c2:	bf48      	it	mi
 80035c4:	f8c1 9008 	strmi.w	r9, [r1, #8]
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035c8:	4611      	mov	r1, r2
 80035ca:	4620      	mov	r0, r4
 80035cc:	f00a fcf8 	bl	800dfc0 <HAL_PCD_DataOutStageCallback>
 80035d0:	e7cb      	b.n	800356a <HAL_PCD_IRQHandler+0x2ee>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80035d2:	f01b 0f01 	tst.w	fp, #1
 80035d6:	d07b      	beq.n	80036d0 <HAL_PCD_IRQHandler+0x454>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80035d8:	b2eb      	uxtb	r3, r5
 80035da:	4619      	mov	r1, r3
 80035dc:	6820      	ldr	r0, [r4, #0]
 80035de:	9301      	str	r3, [sp, #4]
 80035e0:	f003 f917 	bl	8006812 <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80035e4:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80035e8:	4680      	mov	r8, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80035ea:	d010      	beq.n	800360e <HAL_PCD_IRQHandler+0x392>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80035ec:	f8d6 3834 	ldr.w	r3, [r6, #2100]	; 0x834
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80035f0:	9901      	ldr	r1, [sp, #4]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80035f2:	2001      	movs	r0, #1
 80035f4:	f005 020f 	and.w	r2, r5, #15
 80035f8:	fa00 f202 	lsl.w	r2, r0, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80035fc:	ea23 0302 	bic.w	r3, r3, r2
 8003600:	f8c6 3834 	str.w	r3, [r6, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003604:	f8ca 0008 	str.w	r0, [sl, #8]
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003608:	4620      	mov	r0, r4
 800360a:	f00a fce2 	bl	800dfd2 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800360e:	f018 0f08 	tst.w	r8, #8
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003612:	bf1c      	itt	ne
 8003614:	2308      	movne	r3, #8
 8003616:	f8ca 3008 	strne.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800361a:	f018 0f10 	tst.w	r8, #16
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800361e:	bf1c      	itt	ne
 8003620:	2310      	movne	r3, #16
 8003622:	f8ca 3008 	strne.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003626:	f018 0f40 	tst.w	r8, #64	; 0x40
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800362a:	bf1c      	itt	ne
 800362c:	2340      	movne	r3, #64	; 0x40
 800362e:	f8ca 3008 	strne.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003632:	f018 0f02 	tst.w	r8, #2
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003636:	bf1c      	itt	ne
 8003638:	2302      	movne	r3, #2
 800363a:	f8ca 3008 	strne.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800363e:	f018 0f80 	tst.w	r8, #128	; 0x80
 8003642:	d045      	beq.n	80036d0 <HAL_PCD_IRQHandler+0x454>
  if (ep->xfer_count > ep->xfer_len)
 8003644:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003646:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003648:	429a      	cmp	r2, r3
 800364a:	d841      	bhi.n	80036d0 <HAL_PCD_IRQHandler+0x454>
  len = ep->xfer_len - ep->xfer_count;
 800364c:	eba3 0802 	sub.w	r8, r3, r2
  len32b = (len + 3U) / 4U;
 8003650:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003652:	6821      	ldr	r1, [r4, #0]
 8003654:	9102      	str	r1, [sp, #8]
  len32b = (len + 3U) / 4U;
 8003656:	4598      	cmp	r8, r3
 8003658:	bf28      	it	cs
 800365a:	4698      	movcs	r8, r3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800365c:	f501 6310 	add.w	r3, r1, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 8003660:	f108 0803 	add.w	r8, r8, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003664:	eb03 1345 	add.w	r3, r3, r5, lsl #5
  len32b = (len + 3U) / 4U;
 8003668:	ea4f 0898 	mov.w	r8, r8, lsr #2
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800366c:	9303      	str	r3, [sp, #12]
 800366e:	9b03      	ldr	r3, [sp, #12]
 8003670:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	b29b      	uxth	r3, r3
 8003676:	4543      	cmp	r3, r8
 8003678:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800367a:	d327      	bcc.n	80036cc <HAL_PCD_IRQHandler+0x450>
 800367c:	4293      	cmp	r3, r2
 800367e:	d925      	bls.n	80036cc <HAL_PCD_IRQHandler+0x450>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003680:	b963      	cbnz	r3, 800369c <HAL_PCD_IRQHandler+0x420>
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003682:	9b02      	ldr	r3, [sp, #8]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003684:	f005 010f 	and.w	r1, r5, #15
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003688:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800368c:	2001      	movs	r0, #1
 800368e:	fa00 f101 	lsl.w	r1, r0, r1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003692:	ea22 0201 	bic.w	r2, r2, r1
 8003696:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
 800369a:	e019      	b.n	80036d0 <HAL_PCD_IRQHandler+0x454>
    len = ep->xfer_len - ep->xfer_count;
 800369c:	eba3 0902 	sub.w	r9, r3, r2
 80036a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 80036a2:	9a01      	ldr	r2, [sp, #4]
 80036a4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80036a6:	9802      	ldr	r0, [sp, #8]
 80036a8:	4599      	cmp	r9, r3
 80036aa:	bf28      	it	cs
 80036ac:	4699      	movcs	r9, r3
 80036ae:	fa1f f389 	uxth.w	r3, r9
 80036b2:	f002 ff3b 	bl	800652c <USB_WritePacket>
    ep->xfer_buff  += len;
 80036b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036b8:	444b      	add	r3, r9
 80036ba:	64bb      	str	r3, [r7, #72]	; 0x48
    ep->xfer_count += len;
 80036bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    len32b = (len + 3U) / 4U;
 80036be:	f109 0803 	add.w	r8, r9, #3
    ep->xfer_count += len;
 80036c2:	444b      	add	r3, r9
    len32b = (len + 3U) / 4U;
 80036c4:	ea4f 0898 	mov.w	r8, r8, lsr #2
    ep->xfer_count += len;
 80036c8:	657b      	str	r3, [r7, #84]	; 0x54
 80036ca:	e7d0      	b.n	800366e <HAL_PCD_IRQHandler+0x3f2>
  if (ep->xfer_len <= ep->xfer_count)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d9d8      	bls.n	8003682 <HAL_PCD_IRQHandler+0x406>
        epnum++;
 80036d0:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 80036d2:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
 80036d6:	371c      	adds	r7, #28
 80036d8:	f10a 0a20 	add.w	sl, sl, #32
 80036dc:	e60d      	b.n	80032fa <HAL_PCD_IRQHandler+0x7e>
        HAL_PCD_ResumeCallback(hpcd);
 80036de:	4620      	mov	r0, r4
 80036e0:	f00a fcae 	bl	800e040 <HAL_PCD_ResumeCallback>
 80036e4:	e623      	b.n	800332e <HAL_PCD_IRQHandler+0xb2>
        HAL_PCD_SuspendCallback(hpcd);
 80036e6:	4620      	mov	r0, r4
 80036e8:	f00a fc92 	bl	800e010 <HAL_PCD_SuspendCallback>
 80036ec:	e64f      	b.n	800338e <HAL_PCD_IRQHandler+0x112>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80036ee:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80036f6:	601a      	str	r2, [r3, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80036f8:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80036fc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003700:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003704:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003708:	9a00      	ldr	r2, [sp, #0]
 800370a:	3201      	adds	r2, #1
 800370c:	9200      	str	r2, [sp, #0]
 800370e:	3320      	adds	r3, #32
 8003710:	e651      	b.n	80033b6 <HAL_PCD_IRQHandler+0x13a>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003718:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800371c:	617b      	str	r3, [r7, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	f043 030b 	orr.w	r3, r3, #11
 8003724:	613b      	str	r3, [r7, #16]
 8003726:	e65c      	b.n	80033e2 <HAL_PCD_IRQHandler+0x166>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003728:	2b06      	cmp	r3, #6
 800372a:	f47f aeb2 	bne.w	8003492 <HAL_PCD_IRQHandler+0x216>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800372e:	2208      	movs	r2, #8
 8003730:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8003734:	4630      	mov	r0, r6
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003736:	f04f 081c 	mov.w	r8, #28
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800373a:	f002 ffbf 	bl	80066bc <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800373e:	fb08 4809 	mla	r8, r8, r9, r4
 8003742:	f3c7 170a 	ubfx	r7, r7, #4, #11
 8003746:	e69f      	b.n	8003488 <HAL_PCD_IRQHandler+0x20c>
 8003748:	4f54310a 	.word	0x4f54310a

0800374c <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 800374c:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8003750:	2a01      	cmp	r2, #1
{
 8003752:	b510      	push	{r4, lr}
 8003754:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003756:	d00b      	beq.n	8003770 <HAL_PCD_SetAddress+0x24>
 8003758:	2201      	movs	r2, #1
 800375a:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800375e:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003762:	6800      	ldr	r0, [r0, #0]
 8003764:	f003 f810 	bl	8006788 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003768:	2000      	movs	r0, #0
 800376a:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 800376e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8003770:	2002      	movs	r0, #2
}
 8003772:	bd10      	pop	{r4, pc}

08003774 <HAL_PCD_EP_Open>:
{
 8003774:	b570      	push	{r4, r5, r6, lr}
 8003776:	4604      	mov	r4, r0
 8003778:	f001 000f 	and.w	r0, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 800377c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003780:	f04f 061c 	mov.w	r6, #28
 8003784:	b2c5      	uxtb	r5, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003786:	fb06 4105 	mla	r1, r6, r5, r4
    ep->is_in = 1U;
 800378a:	bf15      	itete	ne
 800378c:	fb06 4505 	mlane	r5, r6, r5, r4
    ep->is_in = 0U;
 8003790:	fb06 4505 	mlaeq	r5, r6, r5, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003794:	313c      	addne	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003796:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 1U;
 800379a:	bf15      	itete	ne
 800379c:	2601      	movne	r6, #1
    ep->is_in = 0U;
 800379e:	2600      	moveq	r6, #0
    ep->is_in = 1U;
 80037a0:	f885 603d 	strbne.w	r6, [r5, #61]	; 0x3d
    ep->is_in = 0U;
 80037a4:	f885 61fd 	strbeq.w	r6, [r5, #509]	; 0x1fd
  ep->maxpacket = ep_mps;
 80037a8:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 80037aa:	784a      	ldrb	r2, [r1, #1]
  ep->type = ep_type;
 80037ac:	70cb      	strb	r3, [r1, #3]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037ae:	b2c0      	uxtb	r0, r0
 80037b0:	7008      	strb	r0, [r1, #0]
  if (ep->is_in != 0U)
 80037b2:	b102      	cbz	r2, 80037b6 <HAL_PCD_EP_Open+0x42>
    ep->tx_fifo_num = ep->num;
 80037b4:	80c8      	strh	r0, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 80037b6:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 80037b8:	bf04      	itt	eq
 80037ba:	2300      	moveq	r3, #0
 80037bc:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 80037be:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d009      	beq.n	80037da <HAL_PCD_EP_Open+0x66>
 80037c6:	2301      	movs	r3, #1
 80037c8:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80037cc:	6820      	ldr	r0, [r4, #0]
 80037ce:	f002 fdc7 	bl	8006360 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037d2:	2000      	movs	r0, #0
 80037d4:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return ret;
 80037d8:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 80037da:	2002      	movs	r0, #2
}
 80037dc:	bd70      	pop	{r4, r5, r6, pc}

080037de <HAL_PCD_EP_Close>:
{
 80037de:	f001 030f 	and.w	r3, r1, #15
 80037e2:	b2da      	uxtb	r2, r3
 80037e4:	b510      	push	{r4, lr}
 80037e6:	4604      	mov	r4, r0
 80037e8:	201c      	movs	r0, #28
  if ((ep_addr & 0x80U) == 0x80U)
 80037ea:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037ee:	fb00 4102 	mla	r1, r0, r2, r4
 80037f2:	bf19      	ittee	ne
 80037f4:	313c      	addne	r1, #60	; 0x3c
    ep->is_in = 1U;
 80037f6:	fb00 4202 	mlane	r2, r0, r2, r4
    ep->is_in = 0U;
 80037fa:	fb00 4202 	mlaeq	r2, r0, r2, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037fe:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 1U;
 8003802:	bf15      	itete	ne
 8003804:	2001      	movne	r0, #1
    ep->is_in = 0U;
 8003806:	2000      	moveq	r0, #0
    ep->is_in = 1U;
 8003808:	f882 003d 	strbne.w	r0, [r2, #61]	; 0x3d
    ep->is_in = 0U;
 800380c:	f882 01fd 	strbeq.w	r0, [r2, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003810:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8003812:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8003816:	2b01      	cmp	r3, #1
 8003818:	d009      	beq.n	800382e <HAL_PCD_EP_Close+0x50>
 800381a:	2301      	movs	r3, #1
 800381c:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003820:	6820      	ldr	r0, [r4, #0]
 8003822:	f002 fddf 	bl	80063e4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003826:	2000      	movs	r0, #0
 8003828:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 800382c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800382e:	2002      	movs	r0, #2
}
 8003830:	bd10      	pop	{r4, pc}

08003832 <HAL_PCD_EP_Receive>:
{
 8003832:	b538      	push	{r3, r4, r5, lr}
 8003834:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003838:	241c      	movs	r4, #28
 800383a:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 800383e:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003842:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_len = len;
 8003846:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->xfer_count = 0U;
 800384a:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 800384c:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_count = 0U;
 8003850:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
  ep->is_in = 0U;
 8003854:	f884 31fd 	strb.w	r3, [r4, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 8003858:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800385c:	6800      	ldr	r0, [r0, #0]
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800385e:	b91d      	cbnz	r5, 8003868 <HAL_PCD_EP_Receive+0x36>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003860:	f002 fdf2 	bl	8006448 <USB_EP0StartXfer>
}
 8003864:	2000      	movs	r0, #0
 8003866:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003868:	f002 fe70 	bl	800654c <USB_EPStartXfer>
 800386c:	e7fa      	b.n	8003864 <HAL_PCD_EP_Receive+0x32>

0800386e <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800386e:	231c      	movs	r3, #28
 8003870:	f001 010f 	and.w	r1, r1, #15
 8003874:	fb03 0101 	mla	r1, r3, r1, r0
}
 8003878:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 800387c:	4770      	bx	lr

0800387e <HAL_PCD_EP_Transmit>:
{
 800387e:	b538      	push	{r3, r4, r5, lr}
 8003880:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003884:	241c      	movs	r4, #28
 8003886:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 800388a:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800388e:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_len = len;
 8003890:	6523      	str	r3, [r4, #80]	; 0x50
  ep->xfer_count = 0U;
 8003892:	2300      	movs	r3, #0
 8003894:	6563      	str	r3, [r4, #84]	; 0x54
  ep->is_in = 1U;
 8003896:	2301      	movs	r3, #1
  ep->xfer_buff = pBuf;
 8003898:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->is_in = 1U;
 800389a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 800389e:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80038a2:	6800      	ldr	r0, [r0, #0]
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038a4:	b91d      	cbnz	r5, 80038ae <HAL_PCD_EP_Transmit+0x30>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80038a6:	f002 fdcf 	bl	8006448 <USB_EP0StartXfer>
}
 80038aa:	2000      	movs	r0, #0
 80038ac:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80038ae:	f002 fe4d 	bl	800654c <USB_EPStartXfer>
 80038b2:	e7fa      	b.n	80038aa <HAL_PCD_EP_Transmit+0x2c>

080038b4 <HAL_PCD_EP_SetStall>:
{
 80038b4:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80038b6:	6843      	ldr	r3, [r0, #4]
 80038b8:	f001 050f 	and.w	r5, r1, #15
 80038bc:	429d      	cmp	r5, r3
{
 80038be:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80038c0:	d82d      	bhi.n	800391e <HAL_PCD_EP_SetStall+0x6a>
  if ((0x80U & ep_addr) == 0x80U)
 80038c2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80038c6:	f04f 021c 	mov.w	r2, #28
 80038ca:	d01e      	beq.n	800390a <HAL_PCD_EP_SetStall+0x56>
    ep->is_in = 1U;
 80038cc:	fb02 0105 	mla	r1, r2, r5, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038d0:	fb02 0305 	mla	r3, r2, r5, r0
    ep->is_in = 1U;
 80038d4:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038d6:	333c      	adds	r3, #60	; 0x3c
    ep->is_in = 1U;
 80038d8:	f881 203d 	strb.w	r2, [r1, #61]	; 0x3d
  ep->is_stall = 1U;
 80038dc:	2201      	movs	r2, #1
 80038de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038e0:	701d      	strb	r5, [r3, #0]
  __HAL_LOCK(hpcd);
 80038e2:	f894 13bc 	ldrb.w	r1, [r4, #956]	; 0x3bc
 80038e6:	4291      	cmp	r1, r2
 80038e8:	d01b      	beq.n	8003922 <HAL_PCD_EP_SetStall+0x6e>
 80038ea:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80038ee:	4619      	mov	r1, r3
 80038f0:	6820      	ldr	r0, [r4, #0]
 80038f2:	f002 fef1 	bl	80066d8 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038f6:	b925      	cbnz	r5, 8003902 <HAL_PCD_EP_SetStall+0x4e>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80038f8:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 80038fc:	6820      	ldr	r0, [r4, #0]
 80038fe:	f002 ffb9 	bl	8006874 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8003902:	2000      	movs	r0, #0
 8003904:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8003908:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 800390a:	fb02 0301 	mla	r3, r2, r1, r0
    ep->is_in = 0U;
 800390e:	fb02 0101 	mla	r1, r2, r1, r0
 8003912:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8003914:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
    ep->is_in = 0U;
 8003918:	f881 21fd 	strb.w	r2, [r1, #509]	; 0x1fd
 800391c:	e7de      	b.n	80038dc <HAL_PCD_EP_SetStall+0x28>
    return HAL_ERROR;
 800391e:	2001      	movs	r0, #1
 8003920:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8003922:	2002      	movs	r0, #2
}
 8003924:	bd38      	pop	{r3, r4, r5, pc}

08003926 <HAL_PCD_EP_ClrStall>:
{
 8003926:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003928:	6843      	ldr	r3, [r0, #4]
 800392a:	f001 020f 	and.w	r2, r1, #15
 800392e:	429a      	cmp	r2, r3
{
 8003930:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003932:	d826      	bhi.n	8003982 <HAL_PCD_EP_ClrStall+0x5c>
 8003934:	231c      	movs	r3, #28
  if ((0x80U & ep_addr) == 0x80U)
 8003936:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800393a:	fb03 0102 	mla	r1, r3, r2, r0
 800393e:	bf19      	ittee	ne
 8003940:	313c      	addne	r1, #60	; 0x3c
    ep->is_in = 1U;
 8003942:	fb03 0302 	mlane	r3, r3, r2, r0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003946:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 800394a:	fb03 4302 	mlaeq	r3, r3, r2, r4
    ep->is_in = 1U;
 800394e:	bf14      	ite	ne
 8003950:	2001      	movne	r0, #1
    ep->is_in = 0U;
 8003952:	2000      	moveq	r0, #0
  ep->is_stall = 0U;
 8003954:	f04f 0500 	mov.w	r5, #0
    ep->is_in = 1U;
 8003958:	bf14      	ite	ne
 800395a:	f883 003d 	strbne.w	r0, [r3, #61]	; 0x3d
    ep->is_in = 0U;
 800395e:	f883 01fd 	strbeq.w	r0, [r3, #509]	; 0x1fd
  ep->is_stall = 0U;
 8003962:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003964:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8003966:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800396a:	2b01      	cmp	r3, #1
 800396c:	d00b      	beq.n	8003986 <HAL_PCD_EP_ClrStall+0x60>
 800396e:	2301      	movs	r3, #1
 8003970:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003974:	6820      	ldr	r0, [r4, #0]
 8003976:	f002 fedc 	bl	8006732 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800397a:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
  return HAL_OK;
 800397e:	4628      	mov	r0, r5
 8003980:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003982:	2001      	movs	r0, #1
 8003984:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8003986:	2002      	movs	r0, #2
}
 8003988:	bd38      	pop	{r3, r4, r5, pc}

0800398a <HAL_PCD_EP_Flush>:
  __HAL_LOCK(hpcd);
 800398a:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 800398e:	2b01      	cmp	r3, #1
{
 8003990:	b510      	push	{r4, lr}
 8003992:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003994:	d011      	beq.n	80039ba <HAL_PCD_EP_Flush+0x30>
 8003996:	2301      	movs	r3, #1
 8003998:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  if ((ep_addr & 0x80U) == 0x80U)
 800399c:	060b      	lsls	r3, r1, #24
 800399e:	d508      	bpl.n	80039b2 <HAL_PCD_EP_Flush+0x28>
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80039a0:	f001 010f 	and.w	r1, r1, #15
 80039a4:	6800      	ldr	r0, [r0, #0]
 80039a6:	f002 fbff 	bl	80061a8 <USB_FlushTxFifo>
  __HAL_UNLOCK(hpcd);
 80039aa:	2000      	movs	r0, #0
 80039ac:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 80039b0:	bd10      	pop	{r4, pc}
    (void)USB_FlushRxFifo(hpcd->Instance);
 80039b2:	6800      	ldr	r0, [r0, #0]
 80039b4:	f002 fc0a 	bl	80061cc <USB_FlushRxFifo>
 80039b8:	e7f7      	b.n	80039aa <HAL_PCD_EP_Flush+0x20>
  __HAL_LOCK(hpcd);
 80039ba:	2002      	movs	r0, #2
}
 80039bc:	bd10      	pop	{r4, pc}

080039be <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80039be:	b570      	push	{r4, r5, r6, lr}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80039c0:	6804      	ldr	r4, [r0, #0]
 80039c2:	6a63      	ldr	r3, [r4, #36]	; 0x24

  if (fifo == 0U)
 80039c4:	b921      	cbnz	r1, 80039d0 <HAL_PCDEx_SetTxFiFo+0x12>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80039c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80039ca:	62a3      	str	r3, [r4, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 80039cc:	2000      	movs	r0, #0
 80039ce:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80039d0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 80039d2:	1e4d      	subs	r5, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80039d4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80039d8:	2000      	movs	r0, #0
 80039da:	1c46      	adds	r6, r0, #1
 80039dc:	b2c0      	uxtb	r0, r0
 80039de:	4285      	cmp	r5, r0
 80039e0:	d806      	bhi.n	80039f0 <HAL_PCDEx_SetTxFiFo+0x32>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80039e2:	313f      	adds	r1, #63	; 0x3f
 80039e4:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80039e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80039ec:	6063      	str	r3, [r4, #4]
 80039ee:	e7ed      	b.n	80039cc <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80039f0:	3040      	adds	r0, #64	; 0x40
 80039f2:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80039f6:	6840      	ldr	r0, [r0, #4]
 80039f8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80039fc:	4630      	mov	r0, r6
 80039fe:	e7ec      	b.n	80039da <HAL_PCDEx_SetTxFiFo+0x1c>

08003a00 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8003a00:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 8003a02:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8003a04:	6259      	str	r1, [r3, #36]	; 0x24
}
 8003a06:	4770      	bx	lr

08003a08 <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a08:	6802      	ldr	r2, [r0, #0]
{
 8003a0a:	4603      	mov	r3, r0

  hpcd->lpm_active = 1U;
 8003a0c:	2101      	movs	r1, #1
 8003a0e:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003a12:	2000      	movs	r0, #0
 8003a14:	f883 03f4 	strb.w	r0, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003a18:	6993      	ldr	r3, [r2, #24]
 8003a1a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003a1e:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003a20:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003a22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a26:	f043 0303 	orr.w	r3, r3, #3
 8003a2a:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8003a2c:	4770      	bx	lr
	...

08003a30 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a30:	4a02      	ldr	r2, [pc, #8]	; (8003a3c <HAL_PWR_EnableBkUpAccess+0xc>)
 8003a32:	6813      	ldr	r3, [r2, #0]
 8003a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a38:	6013      	str	r3, [r2, #0]
 8003a3a:	4770      	bx	lr
 8003a3c:	40007000 	.word	0x40007000

08003a40 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003a40:	4b02      	ldr	r3, [pc, #8]	; (8003a4c <HAL_PWREx_GetVoltageRange+0xc>)
 8003a42:	6818      	ldr	r0, [r3, #0]
#endif
}
 8003a44:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	40007000 	.word	0x40007000

08003a50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a50:	4b17      	ldr	r3, [pc, #92]	; (8003ab0 <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a52:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a54:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a58:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a5c:	d11c      	bne.n	8003a98 <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a5e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8003a62:	d015      	beq.n	8003a90 <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8003a6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a6e:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a70:	4a10      	ldr	r2, [pc, #64]	; (8003ab4 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8003a72:	6811      	ldr	r1, [r2, #0]
 8003a74:	2232      	movs	r2, #50	; 0x32
 8003a76:	434a      	muls	r2, r1
 8003a78:	490f      	ldr	r1, [pc, #60]	; (8003ab8 <HAL_PWREx_ControlVoltageScaling+0x68>)
 8003a7a:	fbb2 f2f1 	udiv	r2, r2, r1
 8003a7e:	4619      	mov	r1, r3
 8003a80:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a82:	6958      	ldr	r0, [r3, #20]
 8003a84:	0540      	lsls	r0, r0, #21
 8003a86:	d500      	bpl.n	8003a8a <HAL_PWREx_ControlVoltageScaling+0x3a>
 8003a88:	b922      	cbnz	r2, 8003a94 <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a8a:	694b      	ldr	r3, [r1, #20]
 8003a8c:	055b      	lsls	r3, r3, #21
 8003a8e:	d40d      	bmi.n	8003aac <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003a90:	2000      	movs	r0, #0
 8003a92:	4770      	bx	lr
        wait_loop_index--;
 8003a94:	3a01      	subs	r2, #1
 8003a96:	e7f4      	b.n	8003a82 <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a98:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a9c:	bf1f      	itttt	ne
 8003a9e:	681a      	ldrne	r2, [r3, #0]
 8003aa0:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8003aa4:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8003aa8:	601a      	strne	r2, [r3, #0]
 8003aaa:	e7f1      	b.n	8003a90 <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 8003aac:	2003      	movs	r0, #3
}
 8003aae:	4770      	bx	lr
 8003ab0:	40007000 	.word	0x40007000
 8003ab4:	20000018 	.word	0x20000018
 8003ab8:	000f4240 	.word	0x000f4240

08003abc <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003abc:	4a02      	ldr	r2, [pc, #8]	; (8003ac8 <HAL_PWREx_EnableVddUSB+0xc>)
 8003abe:	6853      	ldr	r3, [r2, #4]
 8003ac0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ac4:	6053      	str	r3, [r2, #4]
 8003ac6:	4770      	bx	lr
 8003ac8:	40007000 	.word	0x40007000

08003acc <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ad0:	9d06      	ldr	r5, [sp, #24]
 8003ad2:	4604      	mov	r4, r0
 8003ad4:	460f      	mov	r7, r1
 8003ad6:	4616      	mov	r6, r2
 8003ad8:	4698      	mov	r8, r3
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003ada:	6821      	ldr	r1, [r4, #0]
 8003adc:	688a      	ldr	r2, [r1, #8]
 8003ade:	423a      	tst	r2, r7
 8003ae0:	bf14      	ite	ne
 8003ae2:	2201      	movne	r2, #1
 8003ae4:	2200      	moveq	r2, #0
 8003ae6:	42b2      	cmp	r2, r6
 8003ae8:	d102      	bne.n	8003af0 <QSPI_WaitFlagStateUntilTimeout+0x24>

        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8003aea:	2000      	movs	r0, #0
}
 8003aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8003af0:	1c6b      	adds	r3, r5, #1
 8003af2:	d0f3      	beq.n	8003adc <QSPI_WaitFlagStateUntilTimeout+0x10>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003af4:	f7fe fd02 	bl	80024fc <HAL_GetTick>
 8003af8:	eba0 0008 	sub.w	r0, r0, r8
 8003afc:	4285      	cmp	r5, r0
 8003afe:	d301      	bcc.n	8003b04 <QSPI_WaitFlagStateUntilTimeout+0x38>
 8003b00:	2d00      	cmp	r5, #0
 8003b02:	d1ea      	bne.n	8003ada <QSPI_WaitFlagStateUntilTimeout+0xe>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003b04:	2304      	movs	r3, #4
 8003b06:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003b0a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003b0c:	f043 0301 	orr.w	r3, r3, #1
 8003b10:	63e3      	str	r3, [r4, #60]	; 0x3c
 8003b12:	2001      	movs	r0, #1
 8003b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003b18 <HAL_QSPI_Init>:
{
 8003b18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b1a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003b1c:	f7fe fcee 	bl	80024fc <HAL_GetTick>
 8003b20:	4605      	mov	r5, r0
  if(hqspi == NULL)
 8003b22:	2c00      	cmp	r4, #0
 8003b24:	d049      	beq.n	8003bba <HAL_QSPI_Init+0xa2>
  __HAL_LOCK(hqspi);
 8003b26:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d047      	beq.n	8003bbe <HAL_QSPI_Init+0xa6>
 8003b2e:	2301      	movs	r3, #1
 8003b30:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003b34:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8003b38:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 8003b3c:	b93a      	cbnz	r2, 8003b4e <HAL_QSPI_Init+0x36>
    hqspi->Lock = HAL_UNLOCKED;
 8003b3e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    HAL_QSPI_MspInit(hqspi);
 8003b42:	4620      	mov	r0, r4
 8003b44:	f7fe f9ba 	bl	8001ebc <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8003b48:	f241 3388 	movw	r3, #5000	; 0x1388
 8003b4c:	6423      	str	r3, [r4, #64]	; 0x40
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003b4e:	6820      	ldr	r0, [r4, #0]
 8003b50:	68a1      	ldr	r1, [r4, #8]
 8003b52:	6802      	ldr	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003b54:	6c23      	ldr	r3, [r4, #64]	; 0x40
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003b56:	3901      	subs	r1, #1
 8003b58:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8003b5c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003b60:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003b62:	2120      	movs	r1, #32
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	2200      	movs	r2, #0
 8003b68:	462b      	mov	r3, r5
 8003b6a:	4620      	mov	r0, r4
 8003b6c:	f7ff ffae 	bl	8003acc <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8003b70:	b9f0      	cbnz	r0, 8003bb0 <HAL_QSPI_Init+0x98>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8003b72:	6822      	ldr	r2, [r4, #0]
 8003b74:	6865      	ldr	r5, [r4, #4]
 8003b76:	6811      	ldr	r1, [r2, #0]
 8003b78:	68e3      	ldr	r3, [r4, #12]
 8003b7a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8003b7e:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8003b82:	f021 0110 	bic.w	r1, r1, #16
 8003b86:	430b      	orrs	r3, r1
 8003b88:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003b8a:	69a1      	ldr	r1, [r4, #24]
 8003b8c:	6963      	ldr	r3, [r4, #20]
 8003b8e:	6855      	ldr	r5, [r2, #4]
 8003b90:	430b      	orrs	r3, r1
 8003b92:	6921      	ldr	r1, [r4, #16]
 8003b94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8003b98:	490a      	ldr	r1, [pc, #40]	; (8003bc4 <HAL_QSPI_Init+0xac>)
 8003b9a:	4029      	ands	r1, r5
 8003b9c:	430b      	orrs	r3, r1
 8003b9e:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8003ba0:	6813      	ldr	r3, [r2, #0]
 8003ba2:	f043 0301 	orr.w	r3, r3, #1
 8003ba6:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 8003ba8:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003baa:	63e0      	str	r0, [r4, #60]	; 0x3c
    hqspi->State = HAL_QSPI_STATE_READY;
 8003bac:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(hqspi);
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 8003bb6:	b003      	add	sp, #12
 8003bb8:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8003bba:	2001      	movs	r0, #1
 8003bbc:	e7fb      	b.n	8003bb6 <HAL_QSPI_Init+0x9e>
  __HAL_LOCK(hqspi);
 8003bbe:	2002      	movs	r0, #2
 8003bc0:	e7f9      	b.n	8003bb6 <HAL_QSPI_Init+0x9e>
 8003bc2:	bf00      	nop
 8003bc4:	ffe0f8fe 	.word	0xffe0f8fe

08003bc8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003bc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003bca:	4d1e      	ldr	r5, [pc, #120]	; (8003c44 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8003bcc:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003bce:	00da      	lsls	r2, r3, #3
{
 8003bd0:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003bd2:	d518      	bpl.n	8003c06 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003bd4:	f7ff ff34 	bl	8003a40 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bd8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003bdc:	d123      	bne.n	8003c26 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003bde:	2c80      	cmp	r4, #128	; 0x80
 8003be0:	d929      	bls.n	8003c36 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003be2:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003be4:	bf8c      	ite	hi
 8003be6:	2002      	movhi	r0, #2
 8003be8:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003bea:	4a17      	ldr	r2, [pc, #92]	; (8003c48 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8003bec:	6813      	ldr	r3, [r2, #0]
 8003bee:	f023 0307 	bic.w	r3, r3, #7
 8003bf2:	4303      	orrs	r3, r0
 8003bf4:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003bf6:	6813      	ldr	r3, [r2, #0]
 8003bf8:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8003bfc:	1a18      	subs	r0, r3, r0
 8003bfe:	bf18      	it	ne
 8003c00:	2001      	movne	r0, #1
 8003c02:	b003      	add	sp, #12
 8003c04:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c06:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c0c:	65ab      	str	r3, [r5, #88]	; 0x58
 8003c0e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c14:	9301      	str	r3, [sp, #4]
 8003c16:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8003c18:	f7ff ff12 	bl	8003a40 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8003c1c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003c1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c22:	65ab      	str	r3, [r5, #88]	; 0x58
 8003c24:	e7d8      	b.n	8003bd8 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8003c26:	2c80      	cmp	r4, #128	; 0x80
 8003c28:	d807      	bhi.n	8003c3a <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8003c2a:	d008      	beq.n	8003c3e <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8003c2c:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8003c30:	4258      	negs	r0, r3
 8003c32:	4158      	adcs	r0, r3
 8003c34:	e7d9      	b.n	8003bea <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003c36:	2000      	movs	r0, #0
 8003c38:	e7d7      	b.n	8003bea <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8003c3a:	2003      	movs	r0, #3
 8003c3c:	e7d5      	b.n	8003bea <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c3e:	2002      	movs	r0, #2
 8003c40:	e7d3      	b.n	8003bea <RCC_SetFlashLatencyFromMSIRange+0x22>
 8003c42:	bf00      	nop
 8003c44:	40021000 	.word	0x40021000
 8003c48:	40022000 	.word	0x40022000

08003c4c <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c4c:	4b22      	ldr	r3, [pc, #136]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0x8c>)
 8003c4e:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c50:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c52:	f012 020c 	ands.w	r2, r2, #12
 8003c56:	d005      	beq.n	8003c64 <HAL_RCC_GetSysClockFreq+0x18>
 8003c58:	2a0c      	cmp	r2, #12
 8003c5a:	d115      	bne.n	8003c88 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c5c:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003c60:	2901      	cmp	r1, #1
 8003c62:	d118      	bne.n	8003c96 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003c64:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8003c66:	481d      	ldr	r0, [pc, #116]	; (8003cdc <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003c68:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c6a:	bf55      	itete	pl
 8003c6c:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c70:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c72:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c76:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8003c7a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c7e:	b34a      	cbz	r2, 8003cd4 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003c80:	2a0c      	cmp	r2, #12
 8003c82:	d009      	beq.n	8003c98 <HAL_RCC_GetSysClockFreq+0x4c>
 8003c84:	2000      	movs	r0, #0
  return sysclockfreq;
 8003c86:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003c88:	2a04      	cmp	r2, #4
 8003c8a:	d022      	beq.n	8003cd2 <HAL_RCC_GetSysClockFreq+0x86>
 8003c8c:	2a08      	cmp	r2, #8
 8003c8e:	4814      	ldr	r0, [pc, #80]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003c90:	bf18      	it	ne
 8003c92:	2000      	movne	r0, #0
 8003c94:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003c96:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c98:	68da      	ldr	r2, [r3, #12]
 8003c9a:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8003c9e:	2a02      	cmp	r2, #2
 8003ca0:	d015      	beq.n	8003cce <HAL_RCC_GetSysClockFreq+0x82>
      pllvco = HSE_VALUE;
 8003ca2:	490f      	ldr	r1, [pc, #60]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003ca4:	2a03      	cmp	r2, #3
 8003ca6:	bf08      	it	eq
 8003ca8:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003caa:	68da      	ldr	r2, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003cac:	68d9      	ldr	r1, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003cb4:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cb8:	f3c2 1202 	ubfx	r2, r2, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003cbc:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003cbe:	4348      	muls	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cc0:	3201      	adds	r2, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003cc2:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003cc4:	fbb0 f0f2 	udiv	r0, r0, r2
    sysclockfreq = pllvco / pllr;
 8003cc8:	fbb0 f0f3 	udiv	r0, r0, r3
 8003ccc:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8003cce:	4805      	ldr	r0, [pc, #20]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003cd0:	e7eb      	b.n	8003caa <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8003cd2:	4804      	ldr	r0, [pc, #16]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0x98>)
}
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	40021000 	.word	0x40021000
 8003cdc:	0801c680 	.word	0x0801c680
 8003ce0:	007a1200 	.word	0x007a1200
 8003ce4:	00f42400 	.word	0x00f42400

08003ce8 <HAL_RCC_OscConfig>:
{
 8003ce8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8003cec:	4605      	mov	r5, r0
 8003cee:	b908      	cbnz	r0, 8003cf4 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8003cf0:	2001      	movs	r0, #1
 8003cf2:	e047      	b.n	8003d84 <HAL_RCC_OscConfig+0x9c>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cf4:	4ca6      	ldr	r4, [pc, #664]	; (8003f90 <HAL_RCC_OscConfig+0x2a8>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003cf6:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cf8:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cfa:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003cfc:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cfe:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d02:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d06:	d573      	bpl.n	8003df0 <HAL_RCC_OscConfig+0x108>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d08:	b11e      	cbz	r6, 8003d12 <HAL_RCC_OscConfig+0x2a>
 8003d0a:	2e0c      	cmp	r6, #12
 8003d0c:	d152      	bne.n	8003db4 <HAL_RCC_OscConfig+0xcc>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003d0e:	2f01      	cmp	r7, #1
 8003d10:	d150      	bne.n	8003db4 <HAL_RCC_OscConfig+0xcc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d12:	6823      	ldr	r3, [r4, #0]
 8003d14:	0798      	lsls	r0, r3, #30
 8003d16:	d502      	bpl.n	8003d1e <HAL_RCC_OscConfig+0x36>
 8003d18:	69ab      	ldr	r3, [r5, #24]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d0e8      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003d1e:	6823      	ldr	r3, [r4, #0]
 8003d20:	6a28      	ldr	r0, [r5, #32]
 8003d22:	0719      	lsls	r1, r3, #28
 8003d24:	bf56      	itet	pl
 8003d26:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8003d2a:	6823      	ldrmi	r3, [r4, #0]
 8003d2c:	091b      	lsrpl	r3, r3, #4
 8003d2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d32:	4283      	cmp	r3, r0
 8003d34:	d229      	bcs.n	8003d8a <HAL_RCC_OscConfig+0xa2>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d36:	f7ff ff47 	bl	8003bc8 <RCC_SetFlashLatencyFromMSIRange>
 8003d3a:	2800      	cmp	r0, #0
 8003d3c:	d1d8      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d3e:	6823      	ldr	r3, [r4, #0]
 8003d40:	f043 0308 	orr.w	r3, r3, #8
 8003d44:	6023      	str	r3, [r4, #0]
 8003d46:	6823      	ldr	r3, [r4, #0]
 8003d48:	6a2a      	ldr	r2, [r5, #32]
 8003d4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d52:	6863      	ldr	r3, [r4, #4]
 8003d54:	69ea      	ldr	r2, [r5, #28]
 8003d56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d5a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003d5e:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d60:	f7ff ff74 	bl	8003c4c <HAL_RCC_GetSysClockFreq>
 8003d64:	68a3      	ldr	r3, [r4, #8]
 8003d66:	4a8b      	ldr	r2, [pc, #556]	; (8003f94 <HAL_RCC_OscConfig+0x2ac>)
 8003d68:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003d6c:	5cd3      	ldrb	r3, [r2, r3]
 8003d6e:	f003 031f 	and.w	r3, r3, #31
 8003d72:	40d8      	lsrs	r0, r3
 8003d74:	4b88      	ldr	r3, [pc, #544]	; (8003f98 <HAL_RCC_OscConfig+0x2b0>)
 8003d76:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8003d78:	4b88      	ldr	r3, [pc, #544]	; (8003f9c <HAL_RCC_OscConfig+0x2b4>)
 8003d7a:	6818      	ldr	r0, [r3, #0]
 8003d7c:	f7fe f998 	bl	80020b0 <HAL_InitTick>
        if(status != HAL_OK)
 8003d80:	2800      	cmp	r0, #0
 8003d82:	d035      	beq.n	8003df0 <HAL_RCC_OscConfig+0x108>
}
 8003d84:	b003      	add	sp, #12
 8003d86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d8a:	6823      	ldr	r3, [r4, #0]
 8003d8c:	f043 0308 	orr.w	r3, r3, #8
 8003d90:	6023      	str	r3, [r4, #0]
 8003d92:	6823      	ldr	r3, [r4, #0]
 8003d94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d98:	4303      	orrs	r3, r0
 8003d9a:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d9c:	6863      	ldr	r3, [r4, #4]
 8003d9e:	69ea      	ldr	r2, [r5, #28]
 8003da0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003da4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003da8:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003daa:	f7ff ff0d 	bl	8003bc8 <RCC_SetFlashLatencyFromMSIRange>
 8003dae:	2800      	cmp	r0, #0
 8003db0:	d0d6      	beq.n	8003d60 <HAL_RCC_OscConfig+0x78>
 8003db2:	e79d      	b.n	8003cf0 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003db4:	69ab      	ldr	r3, [r5, #24]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d036      	beq.n	8003e28 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_MSI_ENABLE();
 8003dba:	6823      	ldr	r3, [r4, #0]
 8003dbc:	f043 0301 	orr.w	r3, r3, #1
 8003dc0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003dc2:	f7fe fb9b 	bl	80024fc <HAL_GetTick>
 8003dc6:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003dc8:	6823      	ldr	r3, [r4, #0]
 8003dca:	079a      	lsls	r2, r3, #30
 8003dcc:	d524      	bpl.n	8003e18 <HAL_RCC_OscConfig+0x130>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003dce:	6823      	ldr	r3, [r4, #0]
 8003dd0:	f043 0308 	orr.w	r3, r3, #8
 8003dd4:	6023      	str	r3, [r4, #0]
 8003dd6:	6823      	ldr	r3, [r4, #0]
 8003dd8:	6a2a      	ldr	r2, [r5, #32]
 8003dda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003dde:	4313      	orrs	r3, r2
 8003de0:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003de2:	6863      	ldr	r3, [r4, #4]
 8003de4:	69ea      	ldr	r2, [r5, #28]
 8003de6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003dee:	6063      	str	r3, [r4, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003df0:	682b      	ldr	r3, [r5, #0]
 8003df2:	07d8      	lsls	r0, r3, #31
 8003df4:	d429      	bmi.n	8003e4a <HAL_RCC_OscConfig+0x162>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003df6:	682b      	ldr	r3, [r5, #0]
 8003df8:	0799      	lsls	r1, r3, #30
 8003dfa:	d467      	bmi.n	8003ecc <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dfc:	682b      	ldr	r3, [r5, #0]
 8003dfe:	0718      	lsls	r0, r3, #28
 8003e00:	f100 809c 	bmi.w	8003f3c <HAL_RCC_OscConfig+0x254>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e04:	682b      	ldr	r3, [r5, #0]
 8003e06:	0759      	lsls	r1, r3, #29
 8003e08:	f100 80ca 	bmi.w	8003fa0 <HAL_RCC_OscConfig+0x2b8>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e0c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8003e0e:	2800      	cmp	r0, #0
 8003e10:	f040 8133 	bne.w	800407a <HAL_RCC_OscConfig+0x392>
  return HAL_OK;
 8003e14:	2000      	movs	r0, #0
 8003e16:	e7b5      	b.n	8003d84 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e18:	f7fe fb70 	bl	80024fc <HAL_GetTick>
 8003e1c:	eba0 0008 	sub.w	r0, r0, r8
 8003e20:	2802      	cmp	r0, #2
 8003e22:	d9d1      	bls.n	8003dc8 <HAL_RCC_OscConfig+0xe0>
            return HAL_TIMEOUT;
 8003e24:	2003      	movs	r0, #3
 8003e26:	e7ad      	b.n	8003d84 <HAL_RCC_OscConfig+0x9c>
        __HAL_RCC_MSI_DISABLE();
 8003e28:	6823      	ldr	r3, [r4, #0]
 8003e2a:	f023 0301 	bic.w	r3, r3, #1
 8003e2e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003e30:	f7fe fb64 	bl	80024fc <HAL_GetTick>
 8003e34:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e36:	6823      	ldr	r3, [r4, #0]
 8003e38:	079b      	lsls	r3, r3, #30
 8003e3a:	d5d9      	bpl.n	8003df0 <HAL_RCC_OscConfig+0x108>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e3c:	f7fe fb5e 	bl	80024fc <HAL_GetTick>
 8003e40:	eba0 0008 	sub.w	r0, r0, r8
 8003e44:	2802      	cmp	r0, #2
 8003e46:	d9f6      	bls.n	8003e36 <HAL_RCC_OscConfig+0x14e>
 8003e48:	e7ec      	b.n	8003e24 <HAL_RCC_OscConfig+0x13c>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003e4a:	2e08      	cmp	r6, #8
 8003e4c:	d003      	beq.n	8003e56 <HAL_RCC_OscConfig+0x16e>
 8003e4e:	2e0c      	cmp	r6, #12
 8003e50:	d108      	bne.n	8003e64 <HAL_RCC_OscConfig+0x17c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003e52:	2f03      	cmp	r7, #3
 8003e54:	d106      	bne.n	8003e64 <HAL_RCC_OscConfig+0x17c>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e56:	6823      	ldr	r3, [r4, #0]
 8003e58:	039a      	lsls	r2, r3, #14
 8003e5a:	d5cc      	bpl.n	8003df6 <HAL_RCC_OscConfig+0x10e>
 8003e5c:	686b      	ldr	r3, [r5, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1c9      	bne.n	8003df6 <HAL_RCC_OscConfig+0x10e>
 8003e62:	e745      	b.n	8003cf0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e64:	686b      	ldr	r3, [r5, #4]
 8003e66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e6a:	d110      	bne.n	8003e8e <HAL_RCC_OscConfig+0x1a6>
 8003e6c:	6823      	ldr	r3, [r4, #0]
 8003e6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e72:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003e74:	f7fe fb42 	bl	80024fc <HAL_GetTick>
 8003e78:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e7a:	6823      	ldr	r3, [r4, #0]
 8003e7c:	039b      	lsls	r3, r3, #14
 8003e7e:	d4ba      	bmi.n	8003df6 <HAL_RCC_OscConfig+0x10e>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e80:	f7fe fb3c 	bl	80024fc <HAL_GetTick>
 8003e84:	eba0 0008 	sub.w	r0, r0, r8
 8003e88:	2864      	cmp	r0, #100	; 0x64
 8003e8a:	d9f6      	bls.n	8003e7a <HAL_RCC_OscConfig+0x192>
 8003e8c:	e7ca      	b.n	8003e24 <HAL_RCC_OscConfig+0x13c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e8e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e92:	d104      	bne.n	8003e9e <HAL_RCC_OscConfig+0x1b6>
 8003e94:	6823      	ldr	r3, [r4, #0]
 8003e96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e9a:	6023      	str	r3, [r4, #0]
 8003e9c:	e7e6      	b.n	8003e6c <HAL_RCC_OscConfig+0x184>
 8003e9e:	6822      	ldr	r2, [r4, #0]
 8003ea0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003ea4:	6022      	str	r2, [r4, #0]
 8003ea6:	6822      	ldr	r2, [r4, #0]
 8003ea8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003eac:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d1e0      	bne.n	8003e74 <HAL_RCC_OscConfig+0x18c>
        tickstart = HAL_GetTick();
 8003eb2:	f7fe fb23 	bl	80024fc <HAL_GetTick>
 8003eb6:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003eb8:	6823      	ldr	r3, [r4, #0]
 8003eba:	0398      	lsls	r0, r3, #14
 8003ebc:	d59b      	bpl.n	8003df6 <HAL_RCC_OscConfig+0x10e>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ebe:	f7fe fb1d 	bl	80024fc <HAL_GetTick>
 8003ec2:	eba0 0008 	sub.w	r0, r0, r8
 8003ec6:	2864      	cmp	r0, #100	; 0x64
 8003ec8:	d9f6      	bls.n	8003eb8 <HAL_RCC_OscConfig+0x1d0>
 8003eca:	e7ab      	b.n	8003e24 <HAL_RCC_OscConfig+0x13c>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003ecc:	2e04      	cmp	r6, #4
 8003ece:	d003      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x1f0>
 8003ed0:	2e0c      	cmp	r6, #12
 8003ed2:	d110      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x20e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003ed4:	2f02      	cmp	r7, #2
 8003ed6:	d10e      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x20e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ed8:	6823      	ldr	r3, [r4, #0]
 8003eda:	0559      	lsls	r1, r3, #21
 8003edc:	d503      	bpl.n	8003ee6 <HAL_RCC_OscConfig+0x1fe>
 8003ede:	68eb      	ldr	r3, [r5, #12]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	f43f af05 	beq.w	8003cf0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ee6:	6863      	ldr	r3, [r4, #4]
 8003ee8:	692a      	ldr	r2, [r5, #16]
 8003eea:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8003eee:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003ef2:	6063      	str	r3, [r4, #4]
 8003ef4:	e782      	b.n	8003dfc <HAL_RCC_OscConfig+0x114>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ef6:	68eb      	ldr	r3, [r5, #12]
 8003ef8:	b17b      	cbz	r3, 8003f1a <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_HSI_ENABLE();
 8003efa:	6823      	ldr	r3, [r4, #0]
 8003efc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f00:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003f02:	f7fe fafb 	bl	80024fc <HAL_GetTick>
 8003f06:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f08:	6823      	ldr	r3, [r4, #0]
 8003f0a:	055a      	lsls	r2, r3, #21
 8003f0c:	d4eb      	bmi.n	8003ee6 <HAL_RCC_OscConfig+0x1fe>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f0e:	f7fe faf5 	bl	80024fc <HAL_GetTick>
 8003f12:	1bc0      	subs	r0, r0, r7
 8003f14:	2802      	cmp	r0, #2
 8003f16:	d9f7      	bls.n	8003f08 <HAL_RCC_OscConfig+0x220>
 8003f18:	e784      	b.n	8003e24 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_DISABLE();
 8003f1a:	6823      	ldr	r3, [r4, #0]
 8003f1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f20:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003f22:	f7fe faeb 	bl	80024fc <HAL_GetTick>
 8003f26:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f28:	6823      	ldr	r3, [r4, #0]
 8003f2a:	055b      	lsls	r3, r3, #21
 8003f2c:	f57f af66 	bpl.w	8003dfc <HAL_RCC_OscConfig+0x114>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f30:	f7fe fae4 	bl	80024fc <HAL_GetTick>
 8003f34:	1bc0      	subs	r0, r0, r7
 8003f36:	2802      	cmp	r0, #2
 8003f38:	d9f6      	bls.n	8003f28 <HAL_RCC_OscConfig+0x240>
 8003f3a:	e773      	b.n	8003e24 <HAL_RCC_OscConfig+0x13c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f3c:	696b      	ldr	r3, [r5, #20]
 8003f3e:	b19b      	cbz	r3, 8003f68 <HAL_RCC_OscConfig+0x280>
      __HAL_RCC_LSI_ENABLE();
 8003f40:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003f44:	f043 0301 	orr.w	r3, r3, #1
 8003f48:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003f4c:	f7fe fad6 	bl	80024fc <HAL_GetTick>
 8003f50:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f52:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003f56:	079a      	lsls	r2, r3, #30
 8003f58:	f53f af54 	bmi.w	8003e04 <HAL_RCC_OscConfig+0x11c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f5c:	f7fe face 	bl	80024fc <HAL_GetTick>
 8003f60:	1bc0      	subs	r0, r0, r7
 8003f62:	2802      	cmp	r0, #2
 8003f64:	d9f5      	bls.n	8003f52 <HAL_RCC_OscConfig+0x26a>
 8003f66:	e75d      	b.n	8003e24 <HAL_RCC_OscConfig+0x13c>
      __HAL_RCC_LSI_DISABLE();
 8003f68:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003f6c:	f023 0301 	bic.w	r3, r3, #1
 8003f70:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003f74:	f7fe fac2 	bl	80024fc <HAL_GetTick>
 8003f78:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f7a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003f7e:	079b      	lsls	r3, r3, #30
 8003f80:	f57f af40 	bpl.w	8003e04 <HAL_RCC_OscConfig+0x11c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f84:	f7fe faba 	bl	80024fc <HAL_GetTick>
 8003f88:	1bc0      	subs	r0, r0, r7
 8003f8a:	2802      	cmp	r0, #2
 8003f8c:	d9f5      	bls.n	8003f7a <HAL_RCC_OscConfig+0x292>
 8003f8e:	e749      	b.n	8003e24 <HAL_RCC_OscConfig+0x13c>
 8003f90:	40021000 	.word	0x40021000
 8003f94:	0801c668 	.word	0x0801c668
 8003f98:	20000018 	.word	0x20000018
 8003f9c:	20000020 	.word	0x20000020
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003fa0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003fa2:	00d8      	lsls	r0, r3, #3
 8003fa4:	d429      	bmi.n	8003ffa <HAL_RCC_OscConfig+0x312>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fa6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fac:	65a3      	str	r3, [r4, #88]	; 0x58
 8003fae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fb4:	9301      	str	r3, [sp, #4]
 8003fb6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003fb8:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fbc:	4f79      	ldr	r7, [pc, #484]	; (80041a4 <HAL_RCC_OscConfig+0x4bc>)
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	05d9      	lsls	r1, r3, #23
 8003fc2:	d51d      	bpl.n	8004000 <HAL_RCC_OscConfig+0x318>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fc4:	68ab      	ldr	r3, [r5, #8]
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d12b      	bne.n	8004022 <HAL_RCC_OscConfig+0x33a>
 8003fca:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003fce:	f043 0301 	orr.w	r3, r3, #1
 8003fd2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8003fd6:	f7fe fa91 	bl	80024fc <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fda:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003fde:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fe0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003fe4:	079b      	lsls	r3, r3, #30
 8003fe6:	d542      	bpl.n	800406e <HAL_RCC_OscConfig+0x386>
    if(pwrclkchanged == SET)
 8003fe8:	f1b8 0f00 	cmp.w	r8, #0
 8003fec:	f43f af0e 	beq.w	8003e0c <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ff0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003ff2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ff6:	65a3      	str	r3, [r4, #88]	; 0x58
 8003ff8:	e708      	b.n	8003e0c <HAL_RCC_OscConfig+0x124>
    FlagStatus       pwrclkchanged = RESET;
 8003ffa:	f04f 0800 	mov.w	r8, #0
 8003ffe:	e7dd      	b.n	8003fbc <HAL_RCC_OscConfig+0x2d4>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004006:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8004008:	f7fe fa78 	bl	80024fc <HAL_GetTick>
 800400c:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	05da      	lsls	r2, r3, #23
 8004012:	d4d7      	bmi.n	8003fc4 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004014:	f7fe fa72 	bl	80024fc <HAL_GetTick>
 8004018:	eba0 0009 	sub.w	r0, r0, r9
 800401c:	2802      	cmp	r0, #2
 800401e:	d9f6      	bls.n	800400e <HAL_RCC_OscConfig+0x326>
 8004020:	e700      	b.n	8003e24 <HAL_RCC_OscConfig+0x13c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004022:	2b05      	cmp	r3, #5
 8004024:	d106      	bne.n	8004034 <HAL_RCC_OscConfig+0x34c>
 8004026:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800402a:	f043 0304 	orr.w	r3, r3, #4
 800402e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8004032:	e7ca      	b.n	8003fca <HAL_RCC_OscConfig+0x2e2>
 8004034:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8004038:	f022 0201 	bic.w	r2, r2, #1
 800403c:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8004040:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8004044:	f022 0204 	bic.w	r2, r2, #4
 8004048:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1c2      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x2ee>
      tickstart = HAL_GetTick();
 8004050:	f7fe fa54 	bl	80024fc <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004054:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004058:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800405a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800405e:	0798      	lsls	r0, r3, #30
 8004060:	d5c2      	bpl.n	8003fe8 <HAL_RCC_OscConfig+0x300>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004062:	f7fe fa4b 	bl	80024fc <HAL_GetTick>
 8004066:	1bc0      	subs	r0, r0, r7
 8004068:	4548      	cmp	r0, r9
 800406a:	d9f6      	bls.n	800405a <HAL_RCC_OscConfig+0x372>
 800406c:	e6da      	b.n	8003e24 <HAL_RCC_OscConfig+0x13c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800406e:	f7fe fa45 	bl	80024fc <HAL_GetTick>
 8004072:	1bc0      	subs	r0, r0, r7
 8004074:	4548      	cmp	r0, r9
 8004076:	d9b3      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x2f8>
 8004078:	e6d4      	b.n	8003e24 <HAL_RCC_OscConfig+0x13c>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 800407a:	2e0c      	cmp	r6, #12
 800407c:	d05c      	beq.n	8004138 <HAL_RCC_OscConfig+0x450>
        __HAL_RCC_PLL_DISABLE();
 800407e:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004080:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8004082:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004086:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004088:	d13b      	bne.n	8004102 <HAL_RCC_OscConfig+0x41a>
        tickstart = HAL_GetTick();
 800408a:	f7fe fa37 	bl	80024fc <HAL_GetTick>
 800408e:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004090:	6823      	ldr	r3, [r4, #0]
 8004092:	0199      	lsls	r1, r3, #6
 8004094:	d42f      	bmi.n	80040f6 <HAL_RCC_OscConfig+0x40e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004096:	68e2      	ldr	r2, [r4, #12]
 8004098:	4b43      	ldr	r3, [pc, #268]	; (80041a8 <HAL_RCC_OscConfig+0x4c0>)
 800409a:	4013      	ands	r3, r2
 800409c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800409e:	4313      	orrs	r3, r2
 80040a0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80040a2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80040a6:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80040a8:	3a01      	subs	r2, #1
 80040aa:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80040ae:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80040b0:	0912      	lsrs	r2, r2, #4
 80040b2:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 80040b6:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80040b8:	0852      	lsrs	r2, r2, #1
 80040ba:	3a01      	subs	r2, #1
 80040bc:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80040c0:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80040c2:	0852      	lsrs	r2, r2, #1
 80040c4:	3a01      	subs	r2, #1
 80040c6:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80040ca:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 80040cc:	6823      	ldr	r3, [r4, #0]
 80040ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040d2:	6023      	str	r3, [r4, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040d4:	68e3      	ldr	r3, [r4, #12]
 80040d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040da:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80040dc:	f7fe fa0e 	bl	80024fc <HAL_GetTick>
 80040e0:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040e2:	6823      	ldr	r3, [r4, #0]
 80040e4:	019a      	lsls	r2, r3, #6
 80040e6:	f53f ae95 	bmi.w	8003e14 <HAL_RCC_OscConfig+0x12c>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040ea:	f7fe fa07 	bl	80024fc <HAL_GetTick>
 80040ee:	1b40      	subs	r0, r0, r5
 80040f0:	2802      	cmp	r0, #2
 80040f2:	d9f6      	bls.n	80040e2 <HAL_RCC_OscConfig+0x3fa>
 80040f4:	e696      	b.n	8003e24 <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040f6:	f7fe fa01 	bl	80024fc <HAL_GetTick>
 80040fa:	1b80      	subs	r0, r0, r6
 80040fc:	2802      	cmp	r0, #2
 80040fe:	d9c7      	bls.n	8004090 <HAL_RCC_OscConfig+0x3a8>
 8004100:	e690      	b.n	8003e24 <HAL_RCC_OscConfig+0x13c>
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004102:	6823      	ldr	r3, [r4, #0]
 8004104:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004108:	bf02      	ittt	eq
 800410a:	68e3      	ldreq	r3, [r4, #12]
 800410c:	f023 0303 	biceq.w	r3, r3, #3
 8004110:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004112:	68e3      	ldr	r3, [r4, #12]
 8004114:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004118:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800411c:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 800411e:	f7fe f9ed 	bl	80024fc <HAL_GetTick>
 8004122:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004124:	6823      	ldr	r3, [r4, #0]
 8004126:	019b      	lsls	r3, r3, #6
 8004128:	f57f ae74 	bpl.w	8003e14 <HAL_RCC_OscConfig+0x12c>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800412c:	f7fe f9e6 	bl	80024fc <HAL_GetTick>
 8004130:	1b40      	subs	r0, r0, r5
 8004132:	2802      	cmp	r0, #2
 8004134:	d9f6      	bls.n	8004124 <HAL_RCC_OscConfig+0x43c>
 8004136:	e675      	b.n	8003e24 <HAL_RCC_OscConfig+0x13c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004138:	2801      	cmp	r0, #1
 800413a:	f43f ae23 	beq.w	8003d84 <HAL_RCC_OscConfig+0x9c>
        pll_config = RCC->PLLCFGR;
 800413e:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004140:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8004142:	f003 0103 	and.w	r1, r3, #3
 8004146:	4291      	cmp	r1, r2
 8004148:	f47f add2 	bne.w	8003cf0 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800414c:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800414e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004152:	3901      	subs	r1, #1
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004154:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8004158:	f47f adca 	bne.w	8003cf0 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800415c:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800415e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004162:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8004166:	f47f adc3 	bne.w	8003cf0 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800416a:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800416c:	3a07      	subs	r2, #7
 800416e:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 8004172:	bf18      	it	ne
 8004174:	2201      	movne	r2, #1
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004176:	4291      	cmp	r1, r2
 8004178:	f47f adba 	bne.w	8003cf0 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800417c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800417e:	0852      	lsrs	r2, r2, #1
 8004180:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8004184:	3a01      	subs	r2, #1
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004186:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 800418a:	f47f adb1 	bne.w	8003cf0 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800418e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8004190:	0852      	lsrs	r2, r2, #1
 8004192:	3a01      	subs	r2, #1
 8004194:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004198:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
    return HAL_ERROR;
 800419c:	bf14      	ite	ne
 800419e:	2001      	movne	r0, #1
 80041a0:	2000      	moveq	r0, #0
 80041a2:	e5ef      	b.n	8003d84 <HAL_RCC_OscConfig+0x9c>
 80041a4:	40007000 	.word	0x40007000
 80041a8:	f99d808c 	.word	0xf99d808c

080041ac <HAL_RCC_ClockConfig>:
{
 80041ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041b0:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 80041b2:	4604      	mov	r4, r0
 80041b4:	b910      	cbnz	r0, 80041bc <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80041b6:	2001      	movs	r0, #1
 80041b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041bc:	4a41      	ldr	r2, [pc, #260]	; (80042c4 <HAL_RCC_ClockConfig+0x118>)
 80041be:	6813      	ldr	r3, [r2, #0]
 80041c0:	f003 0307 	and.w	r3, r3, #7
 80041c4:	428b      	cmp	r3, r1
 80041c6:	d32a      	bcc.n	800421e <HAL_RCC_ClockConfig+0x72>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041c8:	6823      	ldr	r3, [r4, #0]
 80041ca:	07d9      	lsls	r1, r3, #31
 80041cc:	d432      	bmi.n	8004234 <HAL_RCC_ClockConfig+0x88>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041ce:	6821      	ldr	r1, [r4, #0]
 80041d0:	078a      	lsls	r2, r1, #30
 80041d2:	d45c      	bmi.n	800428e <HAL_RCC_ClockConfig+0xe2>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041d4:	4a3b      	ldr	r2, [pc, #236]	; (80042c4 <HAL_RCC_ClockConfig+0x118>)
 80041d6:	6813      	ldr	r3, [r2, #0]
 80041d8:	f003 0307 	and.w	r3, r3, #7
 80041dc:	429e      	cmp	r6, r3
 80041de:	d35e      	bcc.n	800429e <HAL_RCC_ClockConfig+0xf2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041e0:	f011 0f04 	tst.w	r1, #4
 80041e4:	4d38      	ldr	r5, [pc, #224]	; (80042c8 <HAL_RCC_ClockConfig+0x11c>)
 80041e6:	d165      	bne.n	80042b4 <HAL_RCC_ClockConfig+0x108>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041e8:	070b      	lsls	r3, r1, #28
 80041ea:	d506      	bpl.n	80041fa <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041ec:	68ab      	ldr	r3, [r5, #8]
 80041ee:	6922      	ldr	r2, [r4, #16]
 80041f0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80041f4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80041f8:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041fa:	f7ff fd27 	bl	8003c4c <HAL_RCC_GetSysClockFreq>
 80041fe:	68ab      	ldr	r3, [r5, #8]
 8004200:	4a32      	ldr	r2, [pc, #200]	; (80042cc <HAL_RCC_ClockConfig+0x120>)
 8004202:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8004206:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800420a:	5cd3      	ldrb	r3, [r2, r3]
 800420c:	f003 031f 	and.w	r3, r3, #31
 8004210:	40d8      	lsrs	r0, r3
 8004212:	4b2f      	ldr	r3, [pc, #188]	; (80042d0 <HAL_RCC_ClockConfig+0x124>)
 8004214:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8004216:	4b2f      	ldr	r3, [pc, #188]	; (80042d4 <HAL_RCC_ClockConfig+0x128>)
 8004218:	6818      	ldr	r0, [r3, #0]
 800421a:	f7fd bf49 	b.w	80020b0 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800421e:	6813      	ldr	r3, [r2, #0]
 8004220:	f023 0307 	bic.w	r3, r3, #7
 8004224:	430b      	orrs	r3, r1
 8004226:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004228:	6813      	ldr	r3, [r2, #0]
 800422a:	f003 0307 	and.w	r3, r3, #7
 800422e:	4299      	cmp	r1, r3
 8004230:	d1c1      	bne.n	80041b6 <HAL_RCC_ClockConfig+0xa>
 8004232:	e7c9      	b.n	80041c8 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004234:	6862      	ldr	r2, [r4, #4]
 8004236:	4d24      	ldr	r5, [pc, #144]	; (80042c8 <HAL_RCC_ClockConfig+0x11c>)
 8004238:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800423a:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800423c:	d11b      	bne.n	8004276 <HAL_RCC_ClockConfig+0xca>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800423e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004242:	d0b8      	beq.n	80041b6 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004244:	68ab      	ldr	r3, [r5, #8]
 8004246:	f023 0303 	bic.w	r3, r3, #3
 800424a:	4313      	orrs	r3, r2
 800424c:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 800424e:	f7fe f955 	bl	80024fc <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004252:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8004256:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004258:	68ab      	ldr	r3, [r5, #8]
 800425a:	6862      	ldr	r2, [r4, #4]
 800425c:	f003 030c 	and.w	r3, r3, #12
 8004260:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004264:	d0b3      	beq.n	80041ce <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004266:	f7fe f949 	bl	80024fc <HAL_GetTick>
 800426a:	1bc0      	subs	r0, r0, r7
 800426c:	4540      	cmp	r0, r8
 800426e:	d9f3      	bls.n	8004258 <HAL_RCC_ClockConfig+0xac>
        return HAL_TIMEOUT;
 8004270:	2003      	movs	r0, #3
}
 8004272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004276:	2a02      	cmp	r2, #2
 8004278:	d102      	bne.n	8004280 <HAL_RCC_ClockConfig+0xd4>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800427a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800427e:	e7e0      	b.n	8004242 <HAL_RCC_ClockConfig+0x96>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004280:	b912      	cbnz	r2, 8004288 <HAL_RCC_ClockConfig+0xdc>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004282:	f013 0f02 	tst.w	r3, #2
 8004286:	e7dc      	b.n	8004242 <HAL_RCC_ClockConfig+0x96>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004288:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800428c:	e7d9      	b.n	8004242 <HAL_RCC_ClockConfig+0x96>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800428e:	4a0e      	ldr	r2, [pc, #56]	; (80042c8 <HAL_RCC_ClockConfig+0x11c>)
 8004290:	68a0      	ldr	r0, [r4, #8]
 8004292:	6893      	ldr	r3, [r2, #8]
 8004294:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004298:	4303      	orrs	r3, r0
 800429a:	6093      	str	r3, [r2, #8]
 800429c:	e79a      	b.n	80041d4 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800429e:	6813      	ldr	r3, [r2, #0]
 80042a0:	f023 0307 	bic.w	r3, r3, #7
 80042a4:	4333      	orrs	r3, r6
 80042a6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042a8:	6813      	ldr	r3, [r2, #0]
 80042aa:	f003 0307 	and.w	r3, r3, #7
 80042ae:	429e      	cmp	r6, r3
 80042b0:	d181      	bne.n	80041b6 <HAL_RCC_ClockConfig+0xa>
 80042b2:	e795      	b.n	80041e0 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042b4:	68ab      	ldr	r3, [r5, #8]
 80042b6:	68e2      	ldr	r2, [r4, #12]
 80042b8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80042bc:	4313      	orrs	r3, r2
 80042be:	60ab      	str	r3, [r5, #8]
 80042c0:	e792      	b.n	80041e8 <HAL_RCC_ClockConfig+0x3c>
 80042c2:	bf00      	nop
 80042c4:	40022000 	.word	0x40022000
 80042c8:	40021000 	.word	0x40021000
 80042cc:	0801c668 	.word	0x0801c668
 80042d0:	20000018 	.word	0x20000018
 80042d4:	20000020 	.word	0x20000020

080042d8 <HAL_RCC_GetHCLKFreq>:
}
 80042d8:	4b01      	ldr	r3, [pc, #4]	; (80042e0 <HAL_RCC_GetHCLKFreq+0x8>)
 80042da:	6818      	ldr	r0, [r3, #0]
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	20000018 	.word	0x20000018

080042e4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80042e4:	4b05      	ldr	r3, [pc, #20]	; (80042fc <HAL_RCC_GetPCLK1Freq+0x18>)
 80042e6:	4a06      	ldr	r2, [pc, #24]	; (8004300 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80042ee:	5cd3      	ldrb	r3, [r2, r3]
 80042f0:	4a04      	ldr	r2, [pc, #16]	; (8004304 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042f2:	6810      	ldr	r0, [r2, #0]
 80042f4:	f003 031f 	and.w	r3, r3, #31
}
 80042f8:	40d8      	lsrs	r0, r3
 80042fa:	4770      	bx	lr
 80042fc:	40021000 	.word	0x40021000
 8004300:	0801c678 	.word	0x0801c678
 8004304:	20000018 	.word	0x20000018

08004308 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004308:	4b05      	ldr	r3, [pc, #20]	; (8004320 <HAL_RCC_GetPCLK2Freq+0x18>)
 800430a:	4a06      	ldr	r2, [pc, #24]	; (8004324 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004312:	5cd3      	ldrb	r3, [r2, r3]
 8004314:	4a04      	ldr	r2, [pc, #16]	; (8004328 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004316:	6810      	ldr	r0, [r2, #0]
 8004318:	f003 031f 	and.w	r3, r3, #31
}
 800431c:	40d8      	lsrs	r0, r3
 800431e:	4770      	bx	lr
 8004320:	40021000 	.word	0x40021000
 8004324:	0801c678 	.word	0x0801c678
 8004328:	20000018 	.word	0x20000018

0800432c <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800432c:	230f      	movs	r3, #15
 800432e:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004330:	4b0b      	ldr	r3, [pc, #44]	; (8004360 <HAL_RCC_GetClockConfig+0x34>)
 8004332:	689a      	ldr	r2, [r3, #8]
 8004334:	f002 0203 	and.w	r2, r2, #3
 8004338:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800433a:	689a      	ldr	r2, [r3, #8]
 800433c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8004340:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004342:	689a      	ldr	r2, [r3, #8]
 8004344:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8004348:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	08db      	lsrs	r3, r3, #3
 800434e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004352:	6103      	str	r3, [r0, #16]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004354:	4b03      	ldr	r3, [pc, #12]	; (8004364 <HAL_RCC_GetClockConfig+0x38>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0307 	and.w	r3, r3, #7
 800435c:	600b      	str	r3, [r1, #0]
 800435e:	4770      	bx	lr
 8004360:	40021000 	.word	0x40021000
 8004364:	40022000 	.word	0x40022000

08004368 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800436a:	4b45      	ldr	r3, [pc, #276]	; (8004480 <RCCEx_PLLSAI1_Config+0x118>)
 800436c:	68da      	ldr	r2, [r3, #12]
 800436e:	f012 0f03 	tst.w	r2, #3
{
 8004372:	4605      	mov	r5, r0
 8004374:	460e      	mov	r6, r1
 8004376:	461c      	mov	r4, r3
 8004378:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800437a:	d02a      	beq.n	80043d2 <RCCEx_PLLSAI1_Config+0x6a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800437c:	68da      	ldr	r2, [r3, #12]
 800437e:	f002 0203 	and.w	r2, r2, #3
 8004382:	4282      	cmp	r2, r0
 8004384:	d13c      	bne.n	8004400 <RCCEx_PLLSAI1_Config+0x98>
       ||
 8004386:	2a00      	cmp	r2, #0
 8004388:	d03a      	beq.n	8004400 <RCCEx_PLLSAI1_Config+0x98>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800438a:	68db      	ldr	r3, [r3, #12]
       ||
 800438c:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800438e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004392:	3301      	adds	r3, #1
       ||
 8004394:	4293      	cmp	r3, r2
 8004396:	d133      	bne.n	8004400 <RCCEx_PLLSAI1_Config+0x98>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004398:	6823      	ldr	r3, [r4, #0]
 800439a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800439e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043a0:	f7fe f8ac 	bl	80024fc <HAL_GetTick>
 80043a4:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80043a6:	6823      	ldr	r3, [r4, #0]
 80043a8:	011a      	lsls	r2, r3, #4
 80043aa:	d432      	bmi.n	8004412 <RCCEx_PLLSAI1_Config+0xaa>
 80043ac:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80043ae:	2e00      	cmp	r6, #0
 80043b0:	d036      	beq.n	8004420 <RCCEx_PLLSAI1_Config+0xb8>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80043b2:	2e01      	cmp	r6, #1
 80043b4:	d150      	bne.n	8004458 <RCCEx_PLLSAI1_Config+0xf0>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043b6:	6922      	ldr	r2, [r4, #16]
 80043b8:	6928      	ldr	r0, [r5, #16]
 80043ba:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80043be:	0840      	lsrs	r0, r0, #1
 80043c0:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80043c4:	3801      	subs	r0, #1
 80043c6:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 80043ca:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 80043ce:	6122      	str	r2, [r4, #16]
 80043d0:	e032      	b.n	8004438 <RCCEx_PLLSAI1_Config+0xd0>
    switch(PllSai1->PLLSAI1Source)
 80043d2:	2802      	cmp	r0, #2
 80043d4:	d010      	beq.n	80043f8 <RCCEx_PLLSAI1_Config+0x90>
 80043d6:	2803      	cmp	r0, #3
 80043d8:	d014      	beq.n	8004404 <RCCEx_PLLSAI1_Config+0x9c>
 80043da:	2801      	cmp	r0, #1
 80043dc:	d110      	bne.n	8004400 <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	079f      	lsls	r7, r3, #30
 80043e2:	d538      	bpl.n	8004456 <RCCEx_PLLSAI1_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80043e4:	68e3      	ldr	r3, [r4, #12]
 80043e6:	686a      	ldr	r2, [r5, #4]
 80043e8:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 80043ec:	3a01      	subs	r2, #1
 80043ee:	4318      	orrs	r0, r3
 80043f0:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80043f4:	60e0      	str	r0, [r4, #12]
 80043f6:	e7cf      	b.n	8004398 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80043fe:	d1f1      	bne.n	80043e4 <RCCEx_PLLSAI1_Config+0x7c>
 8004400:	2001      	movs	r0, #1
 8004402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	0391      	lsls	r1, r2, #14
 8004408:	d4ec      	bmi.n	80043e4 <RCCEx_PLLSAI1_Config+0x7c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004410:	e7f5      	b.n	80043fe <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004412:	f7fe f873 	bl	80024fc <HAL_GetTick>
 8004416:	1bc0      	subs	r0, r0, r7
 8004418:	2802      	cmp	r0, #2
 800441a:	d9c4      	bls.n	80043a6 <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 800441c:	2003      	movs	r0, #3
 800441e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004420:	6921      	ldr	r1, [r4, #16]
 8004422:	68eb      	ldr	r3, [r5, #12]
 8004424:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 8004428:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 800442c:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8004430:	091b      	lsrs	r3, r3, #4
 8004432:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 8004436:	6121      	str	r1, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004438:	6823      	ldr	r3, [r4, #0]
 800443a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800443e:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004440:	f7fe f85c 	bl	80024fc <HAL_GetTick>
 8004444:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004446:	6823      	ldr	r3, [r4, #0]
 8004448:	011b      	lsls	r3, r3, #4
 800444a:	d513      	bpl.n	8004474 <RCCEx_PLLSAI1_Config+0x10c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800444c:	6923      	ldr	r3, [r4, #16]
 800444e:	69aa      	ldr	r2, [r5, #24]
 8004450:	4313      	orrs	r3, r2
 8004452:	6123      	str	r3, [r4, #16]
 8004454:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8004456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004458:	6923      	ldr	r3, [r4, #16]
 800445a:	6968      	ldr	r0, [r5, #20]
 800445c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004460:	0840      	lsrs	r0, r0, #1
 8004462:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004466:	3801      	subs	r0, #1
 8004468:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 800446c:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8004470:	6123      	str	r3, [r4, #16]
 8004472:	e7e1      	b.n	8004438 <RCCEx_PLLSAI1_Config+0xd0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004474:	f7fe f842 	bl	80024fc <HAL_GetTick>
 8004478:	1b80      	subs	r0, r0, r6
 800447a:	2802      	cmp	r0, #2
 800447c:	d9e3      	bls.n	8004446 <RCCEx_PLLSAI1_Config+0xde>
 800447e:	e7cd      	b.n	800441c <RCCEx_PLLSAI1_Config+0xb4>
 8004480:	40021000 	.word	0x40021000

08004484 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004486:	4b3d      	ldr	r3, [pc, #244]	; (800457c <RCCEx_PLLSAI2_Config+0xf8>)
 8004488:	68da      	ldr	r2, [r3, #12]
 800448a:	f012 0f03 	tst.w	r2, #3
{
 800448e:	4605      	mov	r5, r0
 8004490:	460e      	mov	r6, r1
 8004492:	461c      	mov	r4, r3
 8004494:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004496:	d028      	beq.n	80044ea <RCCEx_PLLSAI2_Config+0x66>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004498:	68da      	ldr	r2, [r3, #12]
 800449a:	f002 0203 	and.w	r2, r2, #3
 800449e:	4282      	cmp	r2, r0
 80044a0:	d13a      	bne.n	8004518 <RCCEx_PLLSAI2_Config+0x94>
       ||
 80044a2:	2a00      	cmp	r2, #0
 80044a4:	d038      	beq.n	8004518 <RCCEx_PLLSAI2_Config+0x94>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80044a6:	68db      	ldr	r3, [r3, #12]
       ||
 80044a8:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80044aa:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80044ae:	3301      	adds	r3, #1
       ||
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d131      	bne.n	8004518 <RCCEx_PLLSAI2_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80044b4:	6823      	ldr	r3, [r4, #0]
 80044b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044ba:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044bc:	f7fe f81e 	bl	80024fc <HAL_GetTick>
 80044c0:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80044c2:	6823      	ldr	r3, [r4, #0]
 80044c4:	009a      	lsls	r2, r3, #2
 80044c6:	d430      	bmi.n	800452a <RCCEx_PLLSAI2_Config+0xa6>
 80044c8:	68a8      	ldr	r0, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80044ca:	2e00      	cmp	r6, #0
 80044cc:	d034      	beq.n	8004538 <RCCEx_PLLSAI2_Config+0xb4>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80044ce:	6963      	ldr	r3, [r4, #20]
 80044d0:	6929      	ldr	r1, [r5, #16]
 80044d2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80044d6:	0849      	lsrs	r1, r1, #1
 80044d8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80044dc:	3901      	subs	r1, #1
 80044de:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80044e2:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 80044e6:	6163      	str	r3, [r4, #20]
 80044e8:	e032      	b.n	8004550 <RCCEx_PLLSAI2_Config+0xcc>
    switch(PllSai2->PLLSAI2Source)
 80044ea:	2802      	cmp	r0, #2
 80044ec:	d010      	beq.n	8004510 <RCCEx_PLLSAI2_Config+0x8c>
 80044ee:	2803      	cmp	r0, #3
 80044f0:	d014      	beq.n	800451c <RCCEx_PLLSAI2_Config+0x98>
 80044f2:	2801      	cmp	r0, #1
 80044f4:	d110      	bne.n	8004518 <RCCEx_PLLSAI2_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	079f      	lsls	r7, r3, #30
 80044fa:	d538      	bpl.n	800456e <RCCEx_PLLSAI2_Config+0xea>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80044fc:	68e3      	ldr	r3, [r4, #12]
 80044fe:	686a      	ldr	r2, [r5, #4]
 8004500:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8004504:	3a01      	subs	r2, #1
 8004506:	4318      	orrs	r0, r3
 8004508:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800450c:	60e0      	str	r0, [r4, #12]
 800450e:	e7d1      	b.n	80044b4 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004516:	d1f1      	bne.n	80044fc <RCCEx_PLLSAI2_Config+0x78>
 8004518:	2001      	movs	r0, #1
 800451a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	0391      	lsls	r1, r2, #14
 8004520:	d4ec      	bmi.n	80044fc <RCCEx_PLLSAI2_Config+0x78>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004528:	e7f5      	b.n	8004516 <RCCEx_PLLSAI2_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800452a:	f7fd ffe7 	bl	80024fc <HAL_GetTick>
 800452e:	1bc0      	subs	r0, r0, r7
 8004530:	2802      	cmp	r0, #2
 8004532:	d9c6      	bls.n	80044c2 <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 8004534:	2003      	movs	r0, #3
 8004536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004538:	6962      	ldr	r2, [r4, #20]
 800453a:	68eb      	ldr	r3, [r5, #12]
 800453c:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 8004540:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004544:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8004548:	091b      	lsrs	r3, r3, #4
 800454a:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 800454e:	6162      	str	r2, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004550:	6823      	ldr	r3, [r4, #0]
 8004552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004556:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004558:	f7fd ffd0 	bl	80024fc <HAL_GetTick>
 800455c:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800455e:	6823      	ldr	r3, [r4, #0]
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	d505      	bpl.n	8004570 <RCCEx_PLLSAI2_Config+0xec>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004564:	6963      	ldr	r3, [r4, #20]
 8004566:	696a      	ldr	r2, [r5, #20]
 8004568:	4313      	orrs	r3, r2
 800456a:	6163      	str	r3, [r4, #20]
 800456c:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 800456e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004570:	f7fd ffc4 	bl	80024fc <HAL_GetTick>
 8004574:	1b80      	subs	r0, r0, r6
 8004576:	2802      	cmp	r0, #2
 8004578:	d9f1      	bls.n	800455e <RCCEx_PLLSAI2_Config+0xda>
 800457a:	e7db      	b.n	8004534 <RCCEx_PLLSAI2_Config+0xb0>
 800457c:	40021000 	.word	0x40021000

08004580 <HAL_RCCEx_PeriphCLKConfig>:
{
 8004580:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004584:	6806      	ldr	r6, [r0, #0]
 8004586:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 800458a:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800458c:	d024      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 800458e:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8004590:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8004594:	d02c      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8004596:	d802      	bhi.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004598:	b1c1      	cbz	r1, 80045cc <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 800459a:	2601      	movs	r6, #1
 800459c:	e01c      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 800459e:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80045a2:	d00d      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80045a4:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 80045a8:	d1f7      	bne.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045aa:	4a4d      	ldr	r2, [pc, #308]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ac:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80045ae:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80045b2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80045b6:	430b      	orrs	r3, r1
 80045b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80045bc:	2600      	movs	r6, #0
 80045be:	e00b      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80045c0:	4a47      	ldr	r2, [pc, #284]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045c2:	68d3      	ldr	r3, [r2, #12]
 80045c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045c8:	60d3      	str	r3, [r2, #12]
      break;
 80045ca:	e7ee      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80045cc:	3004      	adds	r0, #4
 80045ce:	f7ff fecb 	bl	8004368 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80045d2:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80045d4:	2800      	cmp	r0, #0
 80045d6:	d0e8      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80045d8:	6823      	ldr	r3, [r4, #0]
 80045da:	04d8      	lsls	r0, r3, #19
 80045dc:	d506      	bpl.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 80045de:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80045e0:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 80045e4:	d074      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x150>
 80045e6:	d808      	bhi.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80045e8:	b1a9      	cbz	r1, 8004616 <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 80045ea:	2601      	movs	r6, #1
 80045ec:	4635      	mov	r5, r6
 80045ee:	e021      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80045f0:	2100      	movs	r1, #0
 80045f2:	3020      	adds	r0, #32
 80045f4:	f7ff ff46 	bl	8004484 <RCCEx_PLLSAI2_Config>
 80045f8:	e7eb      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 80045fa:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 80045fe:	d004      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8004600:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8004604:	d1f1      	bne.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004606:	4635      	mov	r5, r6
 8004608:	e009      	b.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800460a:	4a35      	ldr	r2, [pc, #212]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800460c:	68d3      	ldr	r3, [r2, #12]
 800460e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004612:	60d3      	str	r3, [r2, #12]
 8004614:	e7f7      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004616:	1d20      	adds	r0, r4, #4
 8004618:	f7ff fea6 	bl	8004368 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800461c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800461e:	2d00      	cmp	r5, #0
 8004620:	d15c      	bne.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004622:	4a2f      	ldr	r2, [pc, #188]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004624:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8004626:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800462a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800462e:	430b      	orrs	r3, r1
 8004630:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004634:	6823      	ldr	r3, [r4, #0]
 8004636:	0399      	lsls	r1, r3, #14
 8004638:	f140 814f 	bpl.w	80048da <HAL_RCCEx_PeriphCLKConfig+0x35a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800463c:	4f28      	ldr	r7, [pc, #160]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800463e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004640:	00da      	lsls	r2, r3, #3
 8004642:	f140 8176 	bpl.w	8004932 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 8004646:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800464a:	f8df 9098 	ldr.w	r9, [pc, #152]	; 80046e4 <HAL_RCCEx_PeriphCLKConfig+0x164>
 800464e:	f8d9 3000 	ldr.w	r3, [r9]
 8004652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004656:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 800465a:	f7fd ff4f 	bl	80024fc <HAL_GetTick>
 800465e:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004660:	f8d9 3000 	ldr.w	r3, [r9]
 8004664:	05db      	lsls	r3, r3, #23
 8004666:	d53f      	bpl.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x168>
    if(ret == HAL_OK)
 8004668:	2d00      	cmp	r5, #0
 800466a:	d144      	bne.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800466c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004670:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004674:	d015      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x122>
 8004676:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800467a:	4293      	cmp	r3, r2
 800467c:	d011      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x122>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800467e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8004682:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004686:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800468a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800468e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004692:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004696:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800469a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 800469e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80046a2:	07d8      	lsls	r0, r3, #31
 80046a4:	d509      	bpl.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x13a>
        tickstart = HAL_GetTick();
 80046a6:	f7fd ff29 	bl	80024fc <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046aa:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80046ae:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80046b4:	0799      	lsls	r1, r3, #30
 80046b6:	f140 8109 	bpl.w	80048cc <HAL_RCCEx_PeriphCLKConfig+0x34c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80046be:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80046c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046c6:	4313      	orrs	r3, r2
 80046c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80046cc:	4635      	mov	r5, r6
 80046ce:	e012      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x176>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80046d0:	2100      	movs	r1, #0
 80046d2:	f104 0020 	add.w	r0, r4, #32
 80046d6:	f7ff fed5 	bl	8004484 <RCCEx_PLLSAI2_Config>
 80046da:	e79f      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x9c>
 80046dc:	462e      	mov	r6, r5
 80046de:	e7a9      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 80046e0:	40021000 	.word	0x40021000
 80046e4:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046e8:	f7fd ff08 	bl	80024fc <HAL_GetTick>
 80046ec:	eba0 000a 	sub.w	r0, r0, sl
 80046f0:	2802      	cmp	r0, #2
 80046f2:	d9b5      	bls.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = HAL_TIMEOUT;
 80046f4:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 80046f6:	f1b8 0f00 	cmp.w	r8, #0
 80046fa:	d003      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x184>
      __HAL_RCC_PWR_CLK_DISABLE();
 80046fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004702:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004704:	6823      	ldr	r3, [r4, #0]
 8004706:	07da      	lsls	r2, r3, #31
 8004708:	d508      	bpl.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800470a:	4990      	ldr	r1, [pc, #576]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800470c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800470e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004712:	f022 0203 	bic.w	r2, r2, #3
 8004716:	4302      	orrs	r2, r0
 8004718:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800471c:	079f      	lsls	r7, r3, #30
 800471e:	d508      	bpl.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004720:	498a      	ldr	r1, [pc, #552]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004722:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004724:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004728:	f022 020c 	bic.w	r2, r2, #12
 800472c:	4302      	orrs	r2, r0
 800472e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004732:	075e      	lsls	r6, r3, #29
 8004734:	d508      	bpl.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004736:	4985      	ldr	r1, [pc, #532]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004738:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800473a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800473e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8004742:	4302      	orrs	r2, r0
 8004744:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004748:	0718      	lsls	r0, r3, #28
 800474a:	d508      	bpl.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800474c:	497f      	ldr	r1, [pc, #508]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800474e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8004750:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004754:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004758:	4302      	orrs	r2, r0
 800475a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800475e:	06d9      	lsls	r1, r3, #27
 8004760:	d508      	bpl.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004762:	497a      	ldr	r1, [pc, #488]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004764:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8004766:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800476a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800476e:	4302      	orrs	r2, r0
 8004770:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004774:	069a      	lsls	r2, r3, #26
 8004776:	d508      	bpl.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004778:	4974      	ldr	r1, [pc, #464]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800477a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800477c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004780:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004784:	4302      	orrs	r2, r0
 8004786:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800478a:	059f      	lsls	r7, r3, #22
 800478c:	d508      	bpl.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800478e:	496f      	ldr	r1, [pc, #444]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004790:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8004792:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004796:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800479a:	4302      	orrs	r2, r0
 800479c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80047a0:	055e      	lsls	r6, r3, #21
 80047a2:	d508      	bpl.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80047a4:	4969      	ldr	r1, [pc, #420]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80047a6:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80047a8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80047ac:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80047b0:	4302      	orrs	r2, r0
 80047b2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047b6:	0658      	lsls	r0, r3, #25
 80047b8:	d508      	bpl.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047ba:	4964      	ldr	r1, [pc, #400]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80047bc:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80047be:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80047c2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80047c6:	4302      	orrs	r2, r0
 80047c8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047cc:	0619      	lsls	r1, r3, #24
 80047ce:	d508      	bpl.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x262>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047d0:	495e      	ldr	r1, [pc, #376]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80047d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80047d4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80047d8:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80047dc:	4302      	orrs	r2, r0
 80047de:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047e2:	05da      	lsls	r2, r3, #23
 80047e4:	d508      	bpl.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x278>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047e6:	4959      	ldr	r1, [pc, #356]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80047e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047ea:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80047ee:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80047f2:	4302      	orrs	r2, r0
 80047f4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80047f8:	049b      	lsls	r3, r3, #18
 80047fa:	d50f      	bpl.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047fc:	4a53      	ldr	r2, [pc, #332]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80047fe:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8004800:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004804:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004808:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800480a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800480e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004812:	d164      	bne.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004814:	68d3      	ldr	r3, [r2, #12]
 8004816:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800481a:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800481c:	6823      	ldr	r3, [r4, #0]
 800481e:	031f      	lsls	r7, r3, #12
 8004820:	d50f      	bpl.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004822:	4a4a      	ldr	r2, [pc, #296]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004824:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8004826:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800482a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800482e:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004830:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004834:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004838:	d15c      	bne.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800483a:	68d3      	ldr	r3, [r2, #12]
 800483c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004840:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004842:	6823      	ldr	r3, [r4, #0]
 8004844:	035e      	lsls	r6, r3, #13
 8004846:	d50f      	bpl.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004848:	4a40      	ldr	r2, [pc, #256]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800484a:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800484c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004850:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004854:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004856:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800485a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800485e:	d154      	bne.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x38a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004860:	68d3      	ldr	r3, [r2, #12]
 8004862:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004866:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004868:	6823      	ldr	r3, [r4, #0]
 800486a:	0458      	lsls	r0, r3, #17
 800486c:	d512      	bpl.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x314>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800486e:	4937      	ldr	r1, [pc, #220]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004870:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8004872:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004876:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800487a:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800487c:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004880:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004884:	d14c      	bne.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004886:	2102      	movs	r1, #2
 8004888:	1d20      	adds	r0, r4, #4
 800488a:	f7ff fd6d 	bl	8004368 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800488e:	2800      	cmp	r0, #0
 8004890:	bf18      	it	ne
 8004892:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004894:	6822      	ldr	r2, [r4, #0]
 8004896:	0411      	lsls	r1, r2, #16
 8004898:	d508      	bpl.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x32c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800489a:	492c      	ldr	r1, [pc, #176]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800489c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800489e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80048a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80048a6:	4303      	orrs	r3, r0
 80048a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80048ac:	03d3      	lsls	r3, r2, #15
 80048ae:	d509      	bpl.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80048b0:	4a26      	ldr	r2, [pc, #152]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80048b2:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80048b6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80048ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80048be:	430b      	orrs	r3, r1
 80048c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 80048c4:	4628      	mov	r0, r5
 80048c6:	b002      	add	sp, #8
 80048c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048cc:	f7fd fe16 	bl	80024fc <HAL_GetTick>
 80048d0:	1b40      	subs	r0, r0, r5
 80048d2:	4548      	cmp	r0, r9
 80048d4:	f67f aeec 	bls.w	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x130>
 80048d8:	e70c      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x174>
 80048da:	4635      	mov	r5, r6
 80048dc:	e712      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x184>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80048de:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80048e2:	d19b      	bne.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048e4:	2101      	movs	r1, #1
 80048e6:	1d20      	adds	r0, r4, #4
 80048e8:	f7ff fd3e 	bl	8004368 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 80048ec:	2800      	cmp	r0, #0
 80048ee:	bf18      	it	ne
 80048f0:	4605      	movne	r5, r0
 80048f2:	e793      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80048f4:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80048f8:	d1a3      	bne.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048fa:	2101      	movs	r1, #1
 80048fc:	1d20      	adds	r0, r4, #4
 80048fe:	f7ff fd33 	bl	8004368 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8004902:	2800      	cmp	r0, #0
 8004904:	bf18      	it	ne
 8004906:	4605      	movne	r5, r0
 8004908:	e79b      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800490a:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800490e:	d1ab      	bne.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004910:	2101      	movs	r1, #1
 8004912:	1d20      	adds	r0, r4, #4
 8004914:	f7ff fd28 	bl	8004368 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8004918:	2800      	cmp	r0, #0
 800491a:	bf18      	it	ne
 800491c:	4605      	movne	r5, r0
 800491e:	e7a3      	b.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004920:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8004924:	d1b6      	bne.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x314>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004926:	2102      	movs	r1, #2
 8004928:	f104 0020 	add.w	r0, r4, #32
 800492c:	f7ff fdaa 	bl	8004484 <RCCEx_PLLSAI2_Config>
 8004930:	e7ad      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004932:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004938:	65bb      	str	r3, [r7, #88]	; 0x58
 800493a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800493c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004940:	9301      	str	r3, [sp, #4]
 8004942:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004944:	f04f 0801 	mov.w	r8, #1
 8004948:	e67f      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0xca>
 800494a:	bf00      	nop
 800494c:	40021000 	.word	0x40021000

08004950 <HAL_RTC_WaitForSynchro>:

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004950:	6802      	ldr	r2, [r0, #0]
{
 8004952:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004954:	68d3      	ldr	r3, [r2, #12]
 8004956:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800495a:	60d3      	str	r3, [r2, #12]
{
 800495c:	4604      	mov	r4, r0
#endif

  tickstart = HAL_GetTick();
 800495e:	f7fd fdcd 	bl	80024fc <HAL_GetTick>
 8004962:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004964:	6823      	ldr	r3, [r4, #0]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	069b      	lsls	r3, r3, #26
 800496a:	d501      	bpl.n	8004970 <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 800496c:	2000      	movs	r0, #0
 800496e:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004970:	f7fd fdc4 	bl	80024fc <HAL_GetTick>
 8004974:	1b40      	subs	r0, r0, r5
 8004976:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800497a:	d9f3      	bls.n	8004964 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 800497c:	2003      	movs	r0, #3
}
 800497e:	bd38      	pop	{r3, r4, r5, pc}

08004980 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004982:	6803      	ldr	r3, [r0, #0]
 8004984:	68dc      	ldr	r4, [r3, #12]
 8004986:	f014 0440 	ands.w	r4, r4, #64	; 0x40
{
 800498a:	4605      	mov	r5, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800498c:	d118      	bne.n	80049c0 <RTC_EnterInitMode+0x40>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800498e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004992:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004994:	f7fd fdb2 	bl	80024fc <HAL_GetTick>
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
      {
        status = HAL_TIMEOUT;
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004998:	2703      	movs	r7, #3
    tickstart = HAL_GetTick();
 800499a:	4606      	mov	r6, r0
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800499c:	682b      	ldr	r3, [r5, #0]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	065b      	lsls	r3, r3, #25
 80049a2:	d401      	bmi.n	80049a8 <RTC_EnterInitMode+0x28>
 80049a4:	2c03      	cmp	r4, #3
 80049a6:	d101      	bne.n	80049ac <RTC_EnterInitMode+0x2c>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) */

  return status;
}
 80049a8:	4620      	mov	r0, r4
 80049aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80049ac:	f7fd fda6 	bl	80024fc <HAL_GetTick>
 80049b0:	1b80      	subs	r0, r0, r6
 80049b2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80049b6:	bf84      	itt	hi
 80049b8:	f885 7021 	strbhi.w	r7, [r5, #33]	; 0x21
        status = HAL_TIMEOUT;
 80049bc:	2403      	movhi	r4, #3
 80049be:	e7ed      	b.n	800499c <RTC_EnterInitMode+0x1c>
  HAL_StatusTypeDef status = HAL_OK;
 80049c0:	2400      	movs	r4, #0
 80049c2:	e7f1      	b.n	80049a8 <RTC_EnterInitMode+0x28>

080049c4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80049c4:	b538      	push	{r3, r4, r5, lr}
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80049c6:	4c0f      	ldr	r4, [pc, #60]	; (8004a04 <RTC_ExitInitMode+0x40>)
 80049c8:	68e3      	ldr	r3, [r4, #12]
 80049ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049ce:	60e3      	str	r3, [r4, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80049d0:	68a3      	ldr	r3, [r4, #8]
 80049d2:	069b      	lsls	r3, r3, #26
{
 80049d4:	4605      	mov	r5, r0
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80049d6:	d406      	bmi.n	80049e6 <RTC_ExitInitMode+0x22>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80049d8:	f7ff ffba 	bl	8004950 <HAL_RTC_WaitForSynchro>
 80049dc:	b188      	cbz	r0, 8004a02 <RTC_ExitInitMode+0x3e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80049de:	2003      	movs	r0, #3
 80049e0:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
 80049e4:	bd38      	pop	{r3, r4, r5, pc}
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80049e6:	68a3      	ldr	r3, [r4, #8]
 80049e8:	f023 0320 	bic.w	r3, r3, #32
 80049ec:	60a3      	str	r3, [r4, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80049ee:	f7ff ffaf 	bl	8004950 <HAL_RTC_WaitForSynchro>
 80049f2:	b110      	cbz	r0, 80049fa <RTC_ExitInitMode+0x36>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80049f4:	2003      	movs	r0, #3
 80049f6:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80049fa:	68a3      	ldr	r3, [r4, #8]
 80049fc:	f043 0320 	orr.w	r3, r3, #32
 8004a00:	60a3      	str	r3, [r4, #8]
  }

  return status;
}
 8004a02:	bd38      	pop	{r3, r4, r5, pc}
 8004a04:	40002800 	.word	0x40002800

08004a08 <HAL_RTC_Init>:
{
 8004a08:	b538      	push	{r3, r4, r5, lr}
  if (hrtc != NULL)
 8004a0a:	4604      	mov	r4, r0
 8004a0c:	2800      	cmp	r0, #0
 8004a0e:	d040      	beq.n	8004a92 <HAL_RTC_Init+0x8a>
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004a10:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8004a14:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004a18:	b91b      	cbnz	r3, 8004a22 <HAL_RTC_Init+0x1a>
      hrtc->Lock = HAL_UNLOCKED;
 8004a1a:	f880 2020 	strb.w	r2, [r0, #32]
      HAL_RTC_MspInit(hrtc);
 8004a1e:	f7fd fa97 	bl	8001f50 <HAL_RTC_MspInit>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004a22:	2302      	movs	r3, #2
 8004a24:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a28:	6823      	ldr	r3, [r4, #0]
 8004a2a:	22ca      	movs	r2, #202	; 0xca
 8004a2c:	625a      	str	r2, [r3, #36]	; 0x24
 8004a2e:	2253      	movs	r2, #83	; 0x53
 8004a30:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 8004a32:	4620      	mov	r0, r4
 8004a34:	f7ff ffa4 	bl	8004980 <RTC_EnterInitMode>
    if (status == HAL_OK)
 8004a38:	2800      	cmp	r0, #0
 8004a3a:	d12b      	bne.n	8004a94 <HAL_RTC_Init+0x8c>
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004a3c:	6823      	ldr	r3, [r4, #0]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004a3e:	6920      	ldr	r0, [r4, #16]
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004a40:	689a      	ldr	r2, [r3, #8]
 8004a42:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8004a46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a4a:	609a      	str	r2, [r3, #8]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004a4c:	6862      	ldr	r2, [r4, #4]
 8004a4e:	6899      	ldr	r1, [r3, #8]
 8004a50:	4302      	orrs	r2, r0
 8004a52:	69a0      	ldr	r0, [r4, #24]
 8004a54:	4302      	orrs	r2, r0
 8004a56:	430a      	orrs	r2, r1
 8004a58:	609a      	str	r2, [r3, #8]
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004a5a:	68e2      	ldr	r2, [r4, #12]
 8004a5c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004a5e:	691a      	ldr	r2, [r3, #16]
 8004a60:	68a1      	ldr	r1, [r4, #8]
 8004a62:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004a66:	611a      	str	r2, [r3, #16]
      status = RTC_ExitInitMode(hrtc);
 8004a68:	4620      	mov	r0, r4
 8004a6a:	f7ff ffab 	bl	80049c4 <RTC_ExitInitMode>
      if (status == HAL_OK)
 8004a6e:	b988      	cbnz	r0, 8004a94 <HAL_RTC_Init+0x8c>
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004a70:	6823      	ldr	r3, [r4, #0]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004a72:	6965      	ldr	r5, [r4, #20]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004a74:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a76:	f022 0203 	bic.w	r2, r2, #3
 8004a7a:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004a7c:	69e2      	ldr	r2, [r4, #28]
 8004a7e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004a80:	432a      	orrs	r2, r5
 8004a82:	430a      	orrs	r2, r1
 8004a84:	64da      	str	r2, [r3, #76]	; 0x4c
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a86:	22ff      	movs	r2, #255	; 0xff
 8004a88:	625a      	str	r2, [r3, #36]	; 0x24
          hrtc->State = HAL_RTC_STATE_READY;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 8004a90:	bd38      	pop	{r3, r4, r5, pc}
  HAL_StatusTypeDef status = HAL_ERROR;
 8004a92:	2001      	movs	r0, #1
}
 8004a94:	bd38      	pop	{r3, r4, r5, pc}

08004a96 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8004a96:	2300      	movs	r3, #0
  uint8_t temp = Value;

  while (temp >= 10U)
 8004a98:	2809      	cmp	r0, #9
 8004a9a:	d803      	bhi.n	8004aa4 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    temp -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8004a9c:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8004aa0:	b2c0      	uxtb	r0, r0
 8004aa2:	4770      	bx	lr
    temp -= 10U;
 8004aa4:	380a      	subs	r0, #10
    bcdhigh++;
 8004aa6:	3301      	adds	r3, #1
    temp -= 10U;
 8004aa8:	b2c0      	uxtb	r0, r0
 8004aaa:	e7f5      	b.n	8004a98 <RTC_ByteToBcd2+0x2>

08004aac <HAL_RTC_SetTime>:
{
 8004aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8004aae:	f890 3020 	ldrb.w	r3, [r0, #32]
 8004ab2:	2b01      	cmp	r3, #1
{
 8004ab4:	4605      	mov	r5, r0
 8004ab6:	460e      	mov	r6, r1
 8004ab8:	4617      	mov	r7, r2
 8004aba:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hrtc);
 8004abe:	d052      	beq.n	8004b66 <HAL_RTC_SetTime+0xba>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ac0:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  __HAL_LOCK(hrtc);
 8004ac4:	2201      	movs	r2, #1
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ac6:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hrtc);
 8004ac8:	f880 2020 	strb.w	r2, [r0, #32]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004acc:	22ca      	movs	r2, #202	; 0xca
 8004ace:	625a      	str	r2, [r3, #36]	; 0x24
 8004ad0:	2253      	movs	r2, #83	; 0x53
 8004ad2:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 8004ad4:	f7ff ff54 	bl	8004980 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8004ad8:	bb68      	cbnz	r0, 8004b36 <HAL_RTC_SetTime+0x8a>
 8004ada:	682b      	ldr	r3, [r5, #0]
 8004adc:	7830      	ldrb	r0, [r6, #0]
 8004ade:	7874      	ldrb	r4, [r6, #1]
 8004ae0:	78b1      	ldrb	r1, [r6, #2]
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004ae2:	689b      	ldr	r3, [r3, #8]
    if (Format == RTC_FORMAT_BIN)
 8004ae4:	bb97      	cbnz	r7, 8004b4c <HAL_RTC_SetTime+0xa0>
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004ae6:	f013 0340 	ands.w	r3, r3, #64	; 0x40
        sTime->TimeFormat = 0x00U;
 8004aea:	bf08      	it	eq
 8004aec:	70f3      	strbeq	r3, [r6, #3]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004aee:	f7ff ffd2 	bl	8004a96 <RTC_ByteToBcd2>
 8004af2:	4602      	mov	r2, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004af4:	4620      	mov	r0, r4
 8004af6:	f7ff ffce 	bl	8004a96 <RTC_ByteToBcd2>
 8004afa:	4604      	mov	r4, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004afc:	4608      	mov	r0, r1
 8004afe:	f7ff ffca 	bl	8004a96 <RTC_ByteToBcd2>
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004b02:	78f3      	ldrb	r3, [r6, #3]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004b04:	ea40 5083 	orr.w	r0, r0, r3, lsl #22
 8004b08:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8004b0c:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004b10:	682b      	ldr	r3, [r5, #0]
 8004b12:	f000 307f 	and.w	r0, r0, #2139062143	; 0x7f7f7f7f
 8004b16:	f020 40fe 	bic.w	r0, r0, #2130706432	; 0x7f000000
 8004b1a:	6018      	str	r0, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004b1c:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004b1e:	6930      	ldr	r0, [r6, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004b20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b24:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004b26:	68f2      	ldr	r2, [r6, #12]
 8004b28:	6899      	ldr	r1, [r3, #8]
 8004b2a:	4302      	orrs	r2, r0
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	609a      	str	r2, [r3, #8]
    status = RTC_ExitInitMode(hrtc);
 8004b30:	4628      	mov	r0, r5
 8004b32:	f7ff ff47 	bl	80049c4 <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b36:	682b      	ldr	r3, [r5, #0]
 8004b38:	22ff      	movs	r2, #255	; 0xff
 8004b3a:	625a      	str	r2, [r3, #36]	; 0x24
  if (status == HAL_OK)
 8004b3c:	b910      	cbnz	r0, 8004b44 <HAL_RTC_SetTime+0x98>
    hrtc->State = HAL_RTC_STATE_READY;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
  __HAL_UNLOCK(hrtc);
 8004b44:	2300      	movs	r3, #0
 8004b46:	f885 3020 	strb.w	r3, [r5, #32]
  return status;
 8004b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004b4c:	f013 0340 	ands.w	r3, r3, #64	; 0x40
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004b50:	ea4f 2404 	mov.w	r4, r4, lsl #8
        sTime->TimeFormat = 0x00U;
 8004b54:	bf08      	it	eq
 8004b56:	70f3      	strbeq	r3, [r6, #3]
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004b58:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004b5c:	78f4      	ldrb	r4, [r6, #3]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004b5e:	4308      	orrs	r0, r1
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004b60:	ea40 5084 	orr.w	r0, r0, r4, lsl #22
 8004b64:	e7d4      	b.n	8004b10 <HAL_RTC_SetTime+0x64>
  __HAL_LOCK(hrtc);
 8004b66:	4618      	mov	r0, r3
}
 8004b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004b6a <HAL_RTC_SetDate>:
{
 8004b6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8004b6c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8004b70:	2b01      	cmp	r3, #1
{
 8004b72:	4605      	mov	r5, r0
 8004b74:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 8004b78:	d043      	beq.n	8004c02 <HAL_RTC_SetDate+0x98>
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	f885 3020 	strb.w	r3, [r5, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b80:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
 8004b84:	784b      	ldrb	r3, [r1, #1]
 8004b86:	78c8      	ldrb	r0, [r1, #3]
 8004b88:	788e      	ldrb	r6, [r1, #2]
 8004b8a:	780c      	ldrb	r4, [r1, #0]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004b8c:	bb92      	cbnz	r2, 8004bf4 <HAL_RTC_SetDate+0x8a>
 8004b8e:	06da      	lsls	r2, r3, #27
 8004b90:	d503      	bpl.n	8004b9a <HAL_RTC_SetDate+0x30>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004b92:	f023 0310 	bic.w	r3, r3, #16
 8004b96:	330a      	adds	r3, #10
 8004b98:	704b      	strb	r3, [r1, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004b9a:	f7ff ff7c 	bl	8004a96 <RTC_ByteToBcd2>
 8004b9e:	4607      	mov	r7, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004ba0:	7848      	ldrb	r0, [r1, #1]
 8004ba2:	f7ff ff78 	bl	8004a96 <RTC_ByteToBcd2>
 8004ba6:	4602      	mov	r2, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8004ba8:	4630      	mov	r0, r6
 8004baa:	f7ff ff74 	bl	8004a96 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004bae:	ea40 3044 	orr.w	r0, r0, r4, lsl #13
 8004bb2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8004bb6:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004bba:	682b      	ldr	r3, [r5, #0]
 8004bbc:	22ca      	movs	r2, #202	; 0xca
 8004bbe:	625a      	str	r2, [r3, #36]	; 0x24
 8004bc0:	2253      	movs	r2, #83	; 0x53
 8004bc2:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 8004bc4:	4628      	mov	r0, r5
 8004bc6:	f7ff fedb 	bl	8004980 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8004bca:	b940      	cbnz	r0, 8004bde <HAL_RTC_SetDate+0x74>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004bcc:	682b      	ldr	r3, [r5, #0]
 8004bce:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 8004bd2:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 8004bd6:	605c      	str	r4, [r3, #4]
    status = RTC_ExitInitMode(hrtc);
 8004bd8:	4628      	mov	r0, r5
 8004bda:	f7ff fef3 	bl	80049c4 <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bde:	682b      	ldr	r3, [r5, #0]
 8004be0:	22ff      	movs	r2, #255	; 0xff
 8004be2:	625a      	str	r2, [r3, #36]	; 0x24
  if (status == HAL_OK)
 8004be4:	b910      	cbnz	r0, 8004bec <HAL_RTC_SetDate+0x82>
    hrtc->State = HAL_RTC_STATE_READY ;
 8004be6:	2301      	movs	r3, #1
 8004be8:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
  __HAL_UNLOCK(hrtc);
 8004bec:	2300      	movs	r3, #0
 8004bee:	f885 3020 	strb.w	r3, [r5, #32]
  return status;
 8004bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004bf4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004bf6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004bfa:	4330      	orrs	r0, r6
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004bfc:	ea40 3444 	orr.w	r4, r0, r4, lsl #13
 8004c00:	e7db      	b.n	8004bba <HAL_RTC_SetDate+0x50>
}
 8004c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004c04 <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c04:	6803      	ldr	r3, [r0, #0]
 8004c06:	685a      	ldr	r2, [r3, #4]
 8004c08:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004c0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c0e:	6842      	ldr	r2, [r0, #4]
 8004c10:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8004c14:	d10a      	bne.n	8004c2c <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
 8004c16:	6882      	ldr	r2, [r0, #8]
 8004c18:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8004c1c:	d002      	beq.n	8004c24 <SPI_WaitFifoStateUntilTimeout.part.1+0x20>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c1e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8004c22:	d103      	bne.n	8004c2c <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c2c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8004c2e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8004c32:	d107      	bne.n	8004c44 <SPI_WaitFifoStateUntilTimeout.part.1+0x40>
        {
          SPI_RESET_CRC(hspi);
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c3a:	601a      	str	r2, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c42:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c44:	2301      	movs	r3, #1
 8004c46:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      }
    }
  }

  return HAL_OK;
}
 8004c50:	2003      	movs	r0, #3
 8004c52:	4770      	bx	lr

08004c54 <SPI_WaitFlagStateUntilTimeout.constprop.10>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8004c54:	b570      	push	{r4, r5, r6, lr}
 8004c56:	4604      	mov	r4, r0
 8004c58:	460d      	mov	r5, r1
 8004c5a:	4616      	mov	r6, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c5c:	6823      	ldr	r3, [r4, #0]
 8004c5e:	6898      	ldr	r0, [r3, #8]
 8004c60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004c64:	d100      	bne.n	8004c68 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x14>
}
 8004c66:	bd70      	pop	{r4, r5, r6, pc}
    if (Timeout != HAL_MAX_DELAY)
 8004c68:	1c6a      	adds	r2, r5, #1
 8004c6a:	d0f8      	beq.n	8004c5e <SPI_WaitFlagStateUntilTimeout.constprop.10+0xa>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004c6c:	f7fd fc46 	bl	80024fc <HAL_GetTick>
 8004c70:	1b80      	subs	r0, r0, r6
 8004c72:	4285      	cmp	r5, r0
 8004c74:	d8f2      	bhi.n	8004c5c <SPI_WaitFlagStateUntilTimeout.constprop.10+0x8>
 8004c76:	4620      	mov	r0, r4
}
 8004c78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004c7c:	f7ff bfc2 	b.w	8004c04 <SPI_WaitFifoStateUntilTimeout.part.1>

08004c80 <SPI_WaitFifoStateUntilTimeout.constprop.11>:
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8004c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c82:	4605      	mov	r5, r0
 8004c84:	460c      	mov	r4, r1
 8004c86:	4616      	mov	r6, r2
 8004c88:	461f      	mov	r7, r3
  while ((hspi->Instance->SR & Fifo) != State)
 8004c8a:	6829      	ldr	r1, [r5, #0]
 8004c8c:	6888      	ldr	r0, [r1, #8]
 8004c8e:	4020      	ands	r0, r4
 8004c90:	d100      	bne.n	8004c94 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x14>
}
 8004c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004c94:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004c98:	bf08      	it	eq
 8004c9a:	7b0b      	ldrbeq	r3, [r1, #12]
    if (Timeout != HAL_MAX_DELAY)
 8004c9c:	1c73      	adds	r3, r6, #1
 8004c9e:	d0f5      	beq.n	8004c8c <SPI_WaitFifoStateUntilTimeout.constprop.11+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004ca0:	f7fd fc2c 	bl	80024fc <HAL_GetTick>
 8004ca4:	1bc0      	subs	r0, r0, r7
 8004ca6:	4286      	cmp	r6, r0
 8004ca8:	d8ef      	bhi.n	8004c8a <SPI_WaitFifoStateUntilTimeout.constprop.11+0xa>
 8004caa:	4628      	mov	r0, r5
}
 8004cac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004cb0:	f7ff bfa8 	b.w	8004c04 <SPI_WaitFifoStateUntilTimeout.part.1>

08004cb4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004cb4:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004cb6:	4613      	mov	r3, r2
{
 8004cb8:	460d      	mov	r5, r1
 8004cba:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004cbc:	460a      	mov	r2, r1
 8004cbe:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 8004cc2:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004cc4:	f7ff ffdc 	bl	8004c80 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8004cc8:	b128      	cbz	r0, 8004cd6 <SPI_EndRxTxTransaction+0x22>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cca:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004ccc:	f043 0320 	orr.w	r3, r3, #32
 8004cd0:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8004cd2:	2003      	movs	r0, #3
 8004cd4:	e00f      	b.n	8004cf6 <SPI_EndRxTxTransaction+0x42>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004cd6:	4632      	mov	r2, r6
 8004cd8:	4629      	mov	r1, r5
 8004cda:	4620      	mov	r0, r4
 8004cdc:	f7ff ffba 	bl	8004c54 <SPI_WaitFlagStateUntilTimeout.constprop.10>
 8004ce0:	2800      	cmp	r0, #0
 8004ce2:	d1f2      	bne.n	8004cca <SPI_EndRxTxTransaction+0x16>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ce4:	4633      	mov	r3, r6
 8004ce6:	462a      	mov	r2, r5
 8004ce8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004cec:	4620      	mov	r0, r4
 8004cee:	f7ff ffc7 	bl	8004c80 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8004cf2:	2800      	cmp	r0, #0
 8004cf4:	d1e9      	bne.n	8004cca <SPI_EndRxTxTransaction+0x16>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8004cf6:	bd70      	pop	{r4, r5, r6, pc}

08004cf8 <HAL_SPI_Init>:
{
 8004cf8:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 8004cfa:	4604      	mov	r4, r0
 8004cfc:	2800      	cmp	r0, #0
 8004cfe:	d04a      	beq.n	8004d96 <HAL_SPI_Init+0x9e>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d00:	2300      	movs	r3, #0
 8004d02:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d04:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8004d08:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004d0c:	b91b      	cbnz	r3, 8004d16 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8004d0e:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8004d12:	f7fd f92d 	bl	8001f70 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8004d16:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8004d18:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8004d1a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8004d1e:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d20:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8004d22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d26:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8004d2a:	600b      	str	r3, [r1, #0]
 8004d2c:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d30:	d92e      	bls.n	8004d90 <HAL_SPI_Init+0x98>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004d32:	4618      	mov	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004d34:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d38:	bf18      	it	ne
 8004d3a:	62a3      	strne	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004d3c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004d3e:	b92b      	cbnz	r3, 8004d4c <HAL_SPI_Init+0x54>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d40:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004d44:	bf8c      	ite	hi
 8004d46:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004d48:	2301      	movls	r3, #1
 8004d4a:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004d4c:	68a6      	ldr	r6, [r4, #8]
 8004d4e:	6863      	ldr	r3, [r4, #4]
 8004d50:	69a5      	ldr	r5, [r4, #24]
 8004d52:	4333      	orrs	r3, r6
 8004d54:	6926      	ldr	r6, [r4, #16]
 8004d56:	4333      	orrs	r3, r6
 8004d58:	6966      	ldr	r6, [r4, #20]
 8004d5a:	4333      	orrs	r3, r6
 8004d5c:	69e6      	ldr	r6, [r4, #28]
 8004d5e:	4333      	orrs	r3, r6
 8004d60:	6a26      	ldr	r6, [r4, #32]
 8004d62:	4333      	orrs	r3, r6
 8004d64:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004d66:	4333      	orrs	r3, r6
 8004d68:	f405 7600 	and.w	r6, r5, #512	; 0x200
 8004d6c:	4333      	orrs	r3, r6
 8004d6e:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004d70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d72:	431a      	orrs	r2, r3
 8004d74:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004d76:	0c2d      	lsrs	r5, r5, #16
 8004d78:	431a      	orrs	r2, r3
 8004d7a:	f005 0504 	and.w	r5, r5, #4
 8004d7e:	432a      	orrs	r2, r5
 8004d80:	4302      	orrs	r2, r0
  hspi->State     = HAL_SPI_STATE_READY;
 8004d82:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d84:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004d86:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d88:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004d8a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  return HAL_OK;
 8004d8e:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004d90:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004d94:	e7d0      	b.n	8004d38 <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 8004d96:	2001      	movs	r0, #1
}
 8004d98:	bd70      	pop	{r4, r5, r6, pc}

08004d9a <HAL_SPI_Transmit>:
{
 8004d9a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004d9e:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8004da0:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8004da4:	2b01      	cmp	r3, #1
{
 8004da6:	4604      	mov	r4, r0
 8004da8:	460d      	mov	r5, r1
 8004daa:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8004dac:	f000 80b1 	beq.w	8004f12 <HAL_SPI_Transmit+0x178>
 8004db0:	2301      	movs	r3, #1
 8004db2:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8004db6:	f7fd fba1 	bl	80024fc <HAL_GetTick>
 8004dba:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8004dbc:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8004dc0:	b2c0      	uxtb	r0, r0
 8004dc2:	2801      	cmp	r0, #1
 8004dc4:	f040 80a3 	bne.w	8004f0e <HAL_SPI_Transmit+0x174>
  if ((pData == NULL) || (Size == 0U))
 8004dc8:	2d00      	cmp	r5, #0
 8004dca:	d05f      	beq.n	8004e8c <HAL_SPI_Transmit+0xf2>
 8004dcc:	f1b8 0f00 	cmp.w	r8, #0
 8004dd0:	d05c      	beq.n	8004e8c <HAL_SPI_Transmit+0xf2>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dd8:	2000      	movs	r0, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dda:	68a3      	ldr	r3, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ddc:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004dde:	6420      	str	r0, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 8004de0:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->RxXferSize  = 0U;
 8004de4:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004de8:	f8a4 0046 	strh.w	r0, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004dec:	6520      	str	r0, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004dee:	64e0      	str	r0, [r4, #76]	; 0x4c
 8004df0:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004df2:	63a5      	str	r5, [r4, #56]	; 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004df4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8004df8:	bf08      	it	eq
 8004dfa:	6803      	ldreq	r3, [r0, #0]
  hspi->TxXferSize  = Size;
 8004dfc:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
    SPI_1LINE_TX(hspi);
 8004e00:	bf04      	itt	eq
 8004e02:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8004e06:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e08:	6803      	ldr	r3, [r0, #0]
 8004e0a:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8004e0c:	bf5e      	ittt	pl
 8004e0e:	6803      	ldrpl	r3, [r0, #0]
 8004e10:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8004e14:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e16:	68e3      	ldr	r3, [r4, #12]
 8004e18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e1c:	6863      	ldr	r3, [r4, #4]
 8004e1e:	d93e      	bls.n	8004e9e <HAL_SPI_Transmit+0x104>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e20:	b113      	cbz	r3, 8004e28 <HAL_SPI_Transmit+0x8e>
 8004e22:	f1b8 0f01 	cmp.w	r8, #1
 8004e26:	d107      	bne.n	8004e38 <HAL_SPI_Transmit+0x9e>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e28:	f835 3b02 	ldrh.w	r3, [r5], #2
 8004e2c:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e2e:	63a5      	str	r5, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8004e30:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004e32:	3b01      	subs	r3, #1
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8004e38:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	b9a3      	cbnz	r3, 8004e68 <HAL_SPI_Transmit+0xce>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e3e:	463a      	mov	r2, r7
 8004e40:	4631      	mov	r1, r6
 8004e42:	4620      	mov	r0, r4
 8004e44:	f7ff ff36 	bl	8004cb4 <SPI_EndRxTxTransaction>
 8004e48:	2800      	cmp	r0, #0
 8004e4a:	d15d      	bne.n	8004f08 <HAL_SPI_Transmit+0x16e>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e4c:	68a3      	ldr	r3, [r4, #8]
 8004e4e:	b933      	cbnz	r3, 8004e5e <HAL_SPI_Transmit+0xc4>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e50:	9301      	str	r3, [sp, #4]
 8004e52:	6823      	ldr	r3, [r4, #0]
 8004e54:	68da      	ldr	r2, [r3, #12]
 8004e56:	9201      	str	r2, [sp, #4]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	9301      	str	r3, [sp, #4]
 8004e5c:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e5e:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 8004e60:	3000      	adds	r0, #0
 8004e62:	bf18      	it	ne
 8004e64:	2001      	movne	r0, #1
 8004e66:	e011      	b.n	8004e8c <HAL_SPI_Transmit+0xf2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e68:	6822      	ldr	r2, [r4, #0]
 8004e6a:	6893      	ldr	r3, [r2, #8]
 8004e6c:	0798      	lsls	r0, r3, #30
 8004e6e:	d505      	bpl.n	8004e7c <HAL_SPI_Transmit+0xe2>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e70:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004e72:	f833 1b02 	ldrh.w	r1, [r3], #2
 8004e76:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e78:	63a3      	str	r3, [r4, #56]	; 0x38
 8004e7a:	e7d9      	b.n	8004e30 <HAL_SPI_Transmit+0x96>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e7c:	f7fd fb3e 	bl	80024fc <HAL_GetTick>
 8004e80:	1bc0      	subs	r0, r0, r7
 8004e82:	42b0      	cmp	r0, r6
 8004e84:	d3d8      	bcc.n	8004e38 <HAL_SPI_Transmit+0x9e>
 8004e86:	1c71      	adds	r1, r6, #1
 8004e88:	d0d6      	beq.n	8004e38 <HAL_SPI_Transmit+0x9e>
          errorcode = HAL_TIMEOUT;
 8004e8a:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004e92:	2300      	movs	r3, #0
 8004e94:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8004e98:	b002      	add	sp, #8
 8004e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e9e:	b113      	cbz	r3, 8004ea6 <HAL_SPI_Transmit+0x10c>
 8004ea0:	f1b8 0f01 	cmp.w	r8, #1
 8004ea4:	d113      	bne.n	8004ece <HAL_SPI_Transmit+0x134>
      if (hspi->TxXferCount > 1U)
 8004ea6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d906      	bls.n	8004ebc <HAL_SPI_Transmit+0x122>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004eae:	f835 3b02 	ldrh.w	r3, [r5], #2
 8004eb2:	60c3      	str	r3, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004eb4:	63a5      	str	r5, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004eb6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004eb8:	3b02      	subs	r3, #2
 8004eba:	e006      	b.n	8004eca <HAL_SPI_Transmit+0x130>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ebc:	782b      	ldrb	r3, [r5, #0]
 8004ebe:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr ++;
 8004ec0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8004ec6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8004ece:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d0b3      	beq.n	8004e3e <HAL_SPI_Transmit+0xa4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ed6:	6823      	ldr	r3, [r4, #0]
 8004ed8:	689a      	ldr	r2, [r3, #8]
 8004eda:	0792      	lsls	r2, r2, #30
 8004edc:	d50c      	bpl.n	8004ef8 <HAL_SPI_Transmit+0x15e>
        if (hspi->TxXferCount > 1U)
 8004ede:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8004ee0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004ee2:	b292      	uxth	r2, r2
 8004ee4:	2a01      	cmp	r2, #1
 8004ee6:	d904      	bls.n	8004ef2 <HAL_SPI_Transmit+0x158>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ee8:	f830 2b02 	ldrh.w	r2, [r0], #2
 8004eec:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004eee:	63a0      	str	r0, [r4, #56]	; 0x38
 8004ef0:	e7e1      	b.n	8004eb6 <HAL_SPI_Transmit+0x11c>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ef2:	7802      	ldrb	r2, [r0, #0]
 8004ef4:	731a      	strb	r2, [r3, #12]
 8004ef6:	e7e3      	b.n	8004ec0 <HAL_SPI_Transmit+0x126>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ef8:	f7fd fb00 	bl	80024fc <HAL_GetTick>
 8004efc:	1bc0      	subs	r0, r0, r7
 8004efe:	4286      	cmp	r6, r0
 8004f00:	d8e5      	bhi.n	8004ece <HAL_SPI_Transmit+0x134>
 8004f02:	1c73      	adds	r3, r6, #1
 8004f04:	d0e3      	beq.n	8004ece <HAL_SPI_Transmit+0x134>
 8004f06:	e7c0      	b.n	8004e8a <HAL_SPI_Transmit+0xf0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f08:	2320      	movs	r3, #32
 8004f0a:	6623      	str	r3, [r4, #96]	; 0x60
 8004f0c:	e79e      	b.n	8004e4c <HAL_SPI_Transmit+0xb2>
    errorcode = HAL_BUSY;
 8004f0e:	2002      	movs	r0, #2
 8004f10:	e7bc      	b.n	8004e8c <HAL_SPI_Transmit+0xf2>
  __HAL_LOCK(hspi);
 8004f12:	2002      	movs	r0, #2
 8004f14:	e7c0      	b.n	8004e98 <HAL_SPI_Transmit+0xfe>

08004f16 <HAL_SPI_TransmitReceive>:
{
 8004f16:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f1a:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8004f1c:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 8004f20:	9f08      	ldr	r7, [sp, #32]
  __HAL_LOCK(hspi);
 8004f22:	2b01      	cmp	r3, #1
{
 8004f24:	4604      	mov	r4, r0
 8004f26:	460d      	mov	r5, r1
 8004f28:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8004f2a:	f000 8115 	beq.w	8005158 <HAL_SPI_TransmitReceive+0x242>
 8004f2e:	2301      	movs	r3, #1
 8004f30:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8004f34:	f7fd fae2 	bl	80024fc <HAL_GetTick>
  tmp_state           = hspi->State;
 8004f38:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tmp_mode            = hspi->Init.Mode;
 8004f3c:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8004f3e:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004f40:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8004f42:	4680      	mov	r8, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004f44:	d00a      	beq.n	8004f5c <HAL_SPI_TransmitReceive+0x46>
 8004f46:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8004f4a:	f040 8103 	bne.w	8005154 <HAL_SPI_TransmitReceive+0x23e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004f4e:	68a0      	ldr	r0, [r4, #8]
 8004f50:	2800      	cmp	r0, #0
 8004f52:	f040 80ff 	bne.w	8005154 <HAL_SPI_TransmitReceive+0x23e>
 8004f56:	2b04      	cmp	r3, #4
 8004f58:	f040 80fc 	bne.w	8005154 <HAL_SPI_TransmitReceive+0x23e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004f5c:	2d00      	cmp	r5, #0
 8004f5e:	d049      	beq.n	8004ff4 <HAL_SPI_TransmitReceive+0xde>
 8004f60:	f1b9 0f00 	cmp.w	r9, #0
 8004f64:	d046      	beq.n	8004ff4 <HAL_SPI_TransmitReceive+0xde>
 8004f66:	2e00      	cmp	r6, #0
 8004f68:	d044      	beq.n	8004ff4 <HAL_SPI_TransmitReceive+0xde>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004f6a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004f6e:	68e2      	ldr	r2, [r4, #12]
 8004f70:	6820      	ldr	r0, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004f72:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004f76:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004f78:	bf1c      	itt	ne
 8004f7a:	2305      	movne	r3, #5
 8004f7c:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f80:	2300      	movs	r3, #0
 8004f82:	6623      	str	r3, [r4, #96]	; 0x60
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004f84:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  hspi->RxXferCount = Size;
 8004f88:	f8a4 6046 	strh.w	r6, [r4, #70]	; 0x46
  hspi->TxXferCount = Size;
 8004f8c:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004f8e:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004f90:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxXferSize  = Size;
 8004f92:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004f96:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004f98:	87a6      	strh	r6, [r4, #60]	; 0x3c
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f9a:	6843      	ldr	r3, [r0, #4]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004f9c:	d801      	bhi.n	8004fa2 <HAL_SPI_TransmitReceive+0x8c>
 8004f9e:	2e01      	cmp	r6, #1
 8004fa0:	d92a      	bls.n	8004ff8 <HAL_SPI_TransmitReceive+0xe2>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004fa2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004fa6:	6043      	str	r3, [r0, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fa8:	6803      	ldr	r3, [r0, #0]
 8004faa:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8004fac:	bf5e      	ittt	pl
 8004fae:	6803      	ldrpl	r3, [r0, #0]
 8004fb0:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8004fb4:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004fb6:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 8004fba:	d956      	bls.n	800506a <HAL_SPI_TransmitReceive+0x154>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fbc:	b109      	cbz	r1, 8004fc2 <HAL_SPI_TransmitReceive+0xac>
 8004fbe:	2e01      	cmp	r6, #1
 8004fc0:	d107      	bne.n	8004fd2 <HAL_SPI_TransmitReceive+0xbc>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fc2:	f835 3b02 	ldrh.w	r3, [r5], #2
 8004fc6:	60c3      	str	r3, [r0, #12]
      hspi->TxXferCount--;
 8004fc8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fca:	63a5      	str	r5, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8004fd2:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fd4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	b98b      	cbnz	r3, 8004ffe <HAL_SPI_TransmitReceive+0xe8>
 8004fda:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	b96b      	cbnz	r3, 8004ffe <HAL_SPI_TransmitReceive+0xe8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fe2:	4642      	mov	r2, r8
 8004fe4:	4639      	mov	r1, r7
 8004fe6:	4620      	mov	r0, r4
 8004fe8:	f7ff fe64 	bl	8004cb4 <SPI_EndRxTxTransaction>
 8004fec:	2800      	cmp	r0, #0
 8004fee:	d034      	beq.n	800505a <HAL_SPI_TransmitReceive+0x144>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ff0:	2320      	movs	r3, #32
 8004ff2:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8004ff4:	2001      	movs	r0, #1
 8004ff6:	e030      	b.n	800505a <HAL_SPI_TransmitReceive+0x144>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ff8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004ffc:	e7d3      	b.n	8004fa6 <HAL_SPI_TransmitReceive+0x90>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ffe:	6822      	ldr	r2, [r4, #0]
 8005000:	6893      	ldr	r3, [r2, #8]
 8005002:	0799      	lsls	r1, r3, #30
 8005004:	d50d      	bpl.n	8005022 <HAL_SPI_TransmitReceive+0x10c>
 8005006:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005008:	b29b      	uxth	r3, r3
 800500a:	b153      	cbz	r3, 8005022 <HAL_SPI_TransmitReceive+0x10c>
 800500c:	b14d      	cbz	r5, 8005022 <HAL_SPI_TransmitReceive+0x10c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800500e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005010:	f833 1b02 	ldrh.w	r1, [r3], #2
 8005014:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005016:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8005018:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800501a:	3b01      	subs	r3, #1
 800501c:	b29b      	uxth	r3, r3
 800501e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8005020:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005022:	6893      	ldr	r3, [r2, #8]
 8005024:	07db      	lsls	r3, r3, #31
 8005026:	d50f      	bpl.n	8005048 <HAL_SPI_TransmitReceive+0x132>
 8005028:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800502c:	b29b      	uxth	r3, r3
 800502e:	b15b      	cbz	r3, 8005048 <HAL_SPI_TransmitReceive+0x132>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005030:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005032:	68d2      	ldr	r2, [r2, #12]
 8005034:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005038:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800503a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800503e:	3b01      	subs	r3, #1
 8005040:	b29b      	uxth	r3, r3
 8005042:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8005046:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005048:	f7fd fa58 	bl	80024fc <HAL_GetTick>
 800504c:	eba0 0008 	sub.w	r0, r0, r8
 8005050:	4287      	cmp	r7, r0
 8005052:	d8bf      	bhi.n	8004fd4 <HAL_SPI_TransmitReceive+0xbe>
 8005054:	1c7e      	adds	r6, r7, #1
 8005056:	d0bd      	beq.n	8004fd4 <HAL_SPI_TransmitReceive+0xbe>
        errorcode = HAL_TIMEOUT;
 8005058:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800505a:	2301      	movs	r3, #1
 800505c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005060:	2300      	movs	r3, #0
 8005062:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 8005066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800506a:	b109      	cbz	r1, 8005070 <HAL_SPI_TransmitReceive+0x15a>
 800506c:	2e01      	cmp	r6, #1
 800506e:	d10b      	bne.n	8005088 <HAL_SPI_TransmitReceive+0x172>
      if (hspi->TxXferCount > 1U)
 8005070:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005072:	b29b      	uxth	r3, r3
 8005074:	2b01      	cmp	r3, #1
 8005076:	d951      	bls.n	800511c <HAL_SPI_TransmitReceive+0x206>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005078:	f835 3b02 	ldrh.w	r3, [r5], #2
 800507c:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount -= 2U;
 800507e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005080:	63a5      	str	r5, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005082:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 8005084:	b29b      	uxth	r3, r3
 8005086:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8005088:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800508a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800508c:	b29b      	uxth	r3, r3
 800508e:	b923      	cbnz	r3, 800509a <HAL_SPI_TransmitReceive+0x184>
 8005090:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005094:	b29b      	uxth	r3, r3
 8005096:	2b00      	cmp	r3, #0
 8005098:	d0a3      	beq.n	8004fe2 <HAL_SPI_TransmitReceive+0xcc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800509a:	6822      	ldr	r2, [r4, #0]
 800509c:	6893      	ldr	r3, [r2, #8]
 800509e:	0798      	lsls	r0, r3, #30
 80050a0:	d511      	bpl.n	80050c6 <HAL_SPI_TransmitReceive+0x1b0>
 80050a2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	b173      	cbz	r3, 80050c6 <HAL_SPI_TransmitReceive+0x1b0>
 80050a8:	b16d      	cbz	r5, 80050c6 <HAL_SPI_TransmitReceive+0x1b0>
        if (hspi->TxXferCount > 1U)
 80050aa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80050b2:	d93b      	bls.n	800512c <HAL_SPI_TransmitReceive+0x216>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050b4:	f833 1b02 	ldrh.w	r1, [r3], #2
 80050b8:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80050ba:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80050bc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80050be:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 80050c4:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050c6:	6822      	ldr	r2, [r4, #0]
 80050c8:	6893      	ldr	r3, [r2, #8]
 80050ca:	07d9      	lsls	r1, r3, #31
 80050cc:	d51d      	bpl.n	800510a <HAL_SPI_TransmitReceive+0x1f4>
 80050ce:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	b1cb      	cbz	r3, 800510a <HAL_SPI_TransmitReceive+0x1f4>
        if (hspi->RxXferCount > 1U)
 80050d6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80050da:	b29b      	uxth	r3, r3
 80050dc:	2b01      	cmp	r3, #1
 80050de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80050e0:	d92c      	bls.n	800513c <HAL_SPI_TransmitReceive+0x226>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80050e2:	68d1      	ldr	r1, [r2, #12]
 80050e4:	f823 1b02 	strh.w	r1, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80050e8:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80050ea:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80050ee:	3b02      	subs	r3, #2
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80050f6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d803      	bhi.n	8005108 <HAL_SPI_TransmitReceive+0x1f2>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005100:	6853      	ldr	r3, [r2, #4]
 8005102:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005106:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 8005108:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800510a:	f7fd f9f7 	bl	80024fc <HAL_GetTick>
 800510e:	eba0 0008 	sub.w	r0, r0, r8
 8005112:	4287      	cmp	r7, r0
 8005114:	d8b9      	bhi.n	800508a <HAL_SPI_TransmitReceive+0x174>
 8005116:	1c7b      	adds	r3, r7, #1
 8005118:	d0b7      	beq.n	800508a <HAL_SPI_TransmitReceive+0x174>
 800511a:	e79d      	b.n	8005058 <HAL_SPI_TransmitReceive+0x142>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800511c:	782b      	ldrb	r3, [r5, #0]
 800511e:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr++;
 8005120:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005122:	3301      	adds	r3, #1
 8005124:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8005126:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005128:	3b01      	subs	r3, #1
 800512a:	e7ab      	b.n	8005084 <HAL_SPI_TransmitReceive+0x16e>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8005130:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005132:	3301      	adds	r3, #1
 8005134:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8005136:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005138:	3b01      	subs	r3, #1
 800513a:	e7c1      	b.n	80050c0 <HAL_SPI_TransmitReceive+0x1aa>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800513c:	7b12      	ldrb	r2, [r2, #12]
 800513e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005140:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005142:	3301      	adds	r3, #1
 8005144:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8005146:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800514a:	3b01      	subs	r3, #1
 800514c:	b29b      	uxth	r3, r3
 800514e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8005152:	e7d9      	b.n	8005108 <HAL_SPI_TransmitReceive+0x1f2>
    errorcode = HAL_BUSY;
 8005154:	2002      	movs	r0, #2
 8005156:	e780      	b.n	800505a <HAL_SPI_TransmitReceive+0x144>
  __HAL_LOCK(hspi);
 8005158:	2002      	movs	r0, #2
}
 800515a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08005160 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005160:	6a03      	ldr	r3, [r0, #32]
 8005162:	f023 0301 	bic.w	r3, r3, #1
 8005166:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005168:	6a03      	ldr	r3, [r0, #32]
{
 800516a:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800516c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800516e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005170:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005172:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005176:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800517a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800517c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800517e:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8005182:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005184:	4d1b      	ldr	r5, [pc, #108]	; (80051f4 <TIM_OC1_SetConfig+0x94>)
 8005186:	42a8      	cmp	r0, r5
 8005188:	d00f      	beq.n	80051aa <TIM_OC1_SetConfig+0x4a>
 800518a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800518e:	42a8      	cmp	r0, r5
 8005190:	d00b      	beq.n	80051aa <TIM_OC1_SetConfig+0x4a>
 8005192:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005196:	42a8      	cmp	r0, r5
 8005198:	d007      	beq.n	80051aa <TIM_OC1_SetConfig+0x4a>
 800519a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800519e:	42a8      	cmp	r0, r5
 80051a0:	d003      	beq.n	80051aa <TIM_OC1_SetConfig+0x4a>
 80051a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80051a6:	42a8      	cmp	r0, r5
 80051a8:	d11e      	bne.n	80051e8 <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80051aa:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80051ac:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80051b0:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051b2:	4d10      	ldr	r5, [pc, #64]	; (80051f4 <TIM_OC1_SetConfig+0x94>)
 80051b4:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80051b6:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051ba:	d00f      	beq.n	80051dc <TIM_OC1_SetConfig+0x7c>
 80051bc:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80051c0:	42a8      	cmp	r0, r5
 80051c2:	d00b      	beq.n	80051dc <TIM_OC1_SetConfig+0x7c>
 80051c4:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80051c8:	42a8      	cmp	r0, r5
 80051ca:	d007      	beq.n	80051dc <TIM_OC1_SetConfig+0x7c>
 80051cc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80051d0:	42a8      	cmp	r0, r5
 80051d2:	d003      	beq.n	80051dc <TIM_OC1_SetConfig+0x7c>
 80051d4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80051d8:	42a8      	cmp	r0, r5
 80051da:	d105      	bne.n	80051e8 <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051dc:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051e0:	698e      	ldr	r6, [r1, #24]
 80051e2:	694c      	ldr	r4, [r1, #20]
 80051e4:	4334      	orrs	r4, r6
 80051e6:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051e8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051ea:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051ec:	684a      	ldr	r2, [r1, #4]
 80051ee:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051f0:	6203      	str	r3, [r0, #32]
 80051f2:	bd70      	pop	{r4, r5, r6, pc}
 80051f4:	40012c00 	.word	0x40012c00

080051f8 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051f8:	6a03      	ldr	r3, [r0, #32]
 80051fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051fe:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005200:	6a03      	ldr	r3, [r0, #32]
{
 8005202:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005204:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005206:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005208:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800520a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800520e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005212:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005214:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8005216:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800521a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800521e:	4d16      	ldr	r5, [pc, #88]	; (8005278 <TIM_OC3_SetConfig+0x80>)
 8005220:	42a8      	cmp	r0, r5
 8005222:	d003      	beq.n	800522c <TIM_OC3_SetConfig+0x34>
 8005224:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005228:	42a8      	cmp	r0, r5
 800522a:	d10d      	bne.n	8005248 <TIM_OC3_SetConfig+0x50>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800522c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800522e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005232:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005236:	4d10      	ldr	r5, [pc, #64]	; (8005278 <TIM_OC3_SetConfig+0x80>)
 8005238:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 800523a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800523e:	d00e      	beq.n	800525e <TIM_OC3_SetConfig+0x66>
 8005240:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005244:	42a8      	cmp	r0, r5
 8005246:	d00a      	beq.n	800525e <TIM_OC3_SetConfig+0x66>
 8005248:	4d0c      	ldr	r5, [pc, #48]	; (800527c <TIM_OC3_SetConfig+0x84>)
 800524a:	42a8      	cmp	r0, r5
 800524c:	d007      	beq.n	800525e <TIM_OC3_SetConfig+0x66>
 800524e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005252:	42a8      	cmp	r0, r5
 8005254:	d003      	beq.n	800525e <TIM_OC3_SetConfig+0x66>
 8005256:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800525a:	42a8      	cmp	r0, r5
 800525c:	d106      	bne.n	800526c <TIM_OC3_SetConfig+0x74>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800525e:	f424 5540 	bic.w	r5, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005262:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005264:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005266:	4334      	orrs	r4, r6
 8005268:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800526c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800526e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005270:	684a      	ldr	r2, [r1, #4]
 8005272:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005274:	6203      	str	r3, [r0, #32]
 8005276:	bd70      	pop	{r4, r5, r6, pc}
 8005278:	40012c00 	.word	0x40012c00
 800527c:	40014000 	.word	0x40014000

08005280 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005280:	6a03      	ldr	r3, [r0, #32]
 8005282:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005286:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005288:	6a03      	ldr	r3, [r0, #32]
{
 800528a:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800528c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800528e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005290:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005292:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005296:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800529a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800529e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80052a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052a4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052a8:	4d0e      	ldr	r5, [pc, #56]	; (80052e4 <TIM_OC4_SetConfig+0x64>)
 80052aa:	42a8      	cmp	r0, r5
 80052ac:	d00f      	beq.n	80052ce <TIM_OC4_SetConfig+0x4e>
 80052ae:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80052b2:	42a8      	cmp	r0, r5
 80052b4:	d00b      	beq.n	80052ce <TIM_OC4_SetConfig+0x4e>
 80052b6:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80052ba:	42a8      	cmp	r0, r5
 80052bc:	d007      	beq.n	80052ce <TIM_OC4_SetConfig+0x4e>
 80052be:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80052c2:	42a8      	cmp	r0, r5
 80052c4:	d003      	beq.n	80052ce <TIM_OC4_SetConfig+0x4e>
 80052c6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80052ca:	42a8      	cmp	r0, r5
 80052cc:	d104      	bne.n	80052d8 <TIM_OC4_SetConfig+0x58>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052ce:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052d0:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052d4:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052d8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052da:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052dc:	684a      	ldr	r2, [r1, #4]
 80052de:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052e0:	6203      	str	r3, [r0, #32]
 80052e2:	bd30      	pop	{r4, r5, pc}
 80052e4:	40012c00 	.word	0x40012c00

080052e8 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80052e8:	6a03      	ldr	r3, [r0, #32]
 80052ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052ee:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052f0:	6a03      	ldr	r3, [r0, #32]
{
 80052f2:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052f4:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80052f6:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052f8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80052fa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80052fe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8005302:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005304:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8005306:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800530a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800530e:	4d0f      	ldr	r5, [pc, #60]	; (800534c <TIM_OC5_SetConfig+0x64>)
 8005310:	42a8      	cmp	r0, r5
 8005312:	d00f      	beq.n	8005334 <TIM_OC5_SetConfig+0x4c>
 8005314:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005318:	42a8      	cmp	r0, r5
 800531a:	d00b      	beq.n	8005334 <TIM_OC5_SetConfig+0x4c>
 800531c:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005320:	42a8      	cmp	r0, r5
 8005322:	d007      	beq.n	8005334 <TIM_OC5_SetConfig+0x4c>
 8005324:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005328:	42a8      	cmp	r0, r5
 800532a:	d003      	beq.n	8005334 <TIM_OC5_SetConfig+0x4c>
 800532c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005330:	42a8      	cmp	r0, r5
 8005332:	d104      	bne.n	800533e <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005334:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005336:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800533a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800533e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005340:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005342:	684a      	ldr	r2, [r1, #4]
 8005344:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005346:	6203      	str	r3, [r0, #32]
 8005348:	bd30      	pop	{r4, r5, pc}
 800534a:	bf00      	nop
 800534c:	40012c00 	.word	0x40012c00

08005350 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005350:	6a03      	ldr	r3, [r0, #32]
 8005352:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005356:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005358:	6a03      	ldr	r3, [r0, #32]
{
 800535a:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800535c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800535e:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005360:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005362:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005366:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800536a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800536e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005370:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005374:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005378:	4d0e      	ldr	r5, [pc, #56]	; (80053b4 <TIM_OC6_SetConfig+0x64>)
 800537a:	42a8      	cmp	r0, r5
 800537c:	d00f      	beq.n	800539e <TIM_OC6_SetConfig+0x4e>
 800537e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005382:	42a8      	cmp	r0, r5
 8005384:	d00b      	beq.n	800539e <TIM_OC6_SetConfig+0x4e>
 8005386:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800538a:	42a8      	cmp	r0, r5
 800538c:	d007      	beq.n	800539e <TIM_OC6_SetConfig+0x4e>
 800538e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005392:	42a8      	cmp	r0, r5
 8005394:	d003      	beq.n	800539e <TIM_OC6_SetConfig+0x4e>
 8005396:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800539a:	42a8      	cmp	r0, r5
 800539c:	d104      	bne.n	80053a8 <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800539e:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 80053a0:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80053a4:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053a8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80053aa:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80053ac:	684a      	ldr	r2, [r1, #4]
 80053ae:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053b0:	6203      	str	r3, [r0, #32]
 80053b2:	bd30      	pop	{r4, r5, pc}
 80053b4:	40012c00 	.word	0x40012c00

080053b8 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053b8:	6803      	ldr	r3, [r0, #0]
 80053ba:	68da      	ldr	r2, [r3, #12]
 80053bc:	f042 0201 	orr.w	r2, r2, #1
 80053c0:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053c2:	6899      	ldr	r1, [r3, #8]
 80053c4:	4a06      	ldr	r2, [pc, #24]	; (80053e0 <HAL_TIM_Base_Start_IT+0x28>)
 80053c6:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053c8:	2a06      	cmp	r2, #6
 80053ca:	d006      	beq.n	80053da <HAL_TIM_Base_Start_IT+0x22>
 80053cc:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    __HAL_TIM_ENABLE(htim);
 80053d0:	bf1e      	ittt	ne
 80053d2:	681a      	ldrne	r2, [r3, #0]
 80053d4:	f042 0201 	orrne.w	r2, r2, #1
 80053d8:	601a      	strne	r2, [r3, #0]
}
 80053da:	2000      	movs	r0, #0
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	00010007 	.word	0x00010007

080053e4 <HAL_TIM_PWM_MspInit>:
 80053e4:	4770      	bx	lr

080053e6 <HAL_TIM_OC_DelayElapsedCallback>:
 80053e6:	4770      	bx	lr

080053e8 <HAL_TIM_IC_CaptureCallback>:
 80053e8:	4770      	bx	lr

080053ea <HAL_TIM_PWM_PulseFinishedCallback>:
 80053ea:	4770      	bx	lr

080053ec <HAL_TIM_TriggerCallback>:
 80053ec:	4770      	bx	lr

080053ee <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053ee:	6803      	ldr	r3, [r0, #0]
 80053f0:	691a      	ldr	r2, [r3, #16]
 80053f2:	0791      	lsls	r1, r2, #30
{
 80053f4:	b510      	push	{r4, lr}
 80053f6:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053f8:	d50f      	bpl.n	800541a <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053fa:	68da      	ldr	r2, [r3, #12]
 80053fc:	0792      	lsls	r2, r2, #30
 80053fe:	d50c      	bpl.n	800541a <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005400:	f06f 0202 	mvn.w	r2, #2
 8005404:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005406:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005408:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800540a:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800540c:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800540e:	f000 8085 	beq.w	800551c <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8005412:	f7ff ffe9 	bl	80053e8 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005416:	2300      	movs	r3, #0
 8005418:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800541a:	6823      	ldr	r3, [r4, #0]
 800541c:	691a      	ldr	r2, [r3, #16]
 800541e:	0752      	lsls	r2, r2, #29
 8005420:	d510      	bpl.n	8005444 <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005422:	68da      	ldr	r2, [r3, #12]
 8005424:	0750      	lsls	r0, r2, #29
 8005426:	d50d      	bpl.n	8005444 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005428:	f06f 0204 	mvn.w	r2, #4
 800542c:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800542e:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005430:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005432:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005436:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8005438:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800543a:	d075      	beq.n	8005528 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 800543c:	f7ff ffd4 	bl	80053e8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005440:	2300      	movs	r3, #0
 8005442:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005444:	6823      	ldr	r3, [r4, #0]
 8005446:	691a      	ldr	r2, [r3, #16]
 8005448:	0711      	lsls	r1, r2, #28
 800544a:	d50f      	bpl.n	800546c <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800544c:	68da      	ldr	r2, [r3, #12]
 800544e:	0712      	lsls	r2, r2, #28
 8005450:	d50c      	bpl.n	800546c <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005452:	f06f 0208 	mvn.w	r2, #8
 8005456:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005458:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800545a:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800545c:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800545e:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8005460:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005462:	d067      	beq.n	8005534 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8005464:	f7ff ffc0 	bl	80053e8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005468:	2300      	movs	r3, #0
 800546a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800546c:	6823      	ldr	r3, [r4, #0]
 800546e:	691a      	ldr	r2, [r3, #16]
 8005470:	06d0      	lsls	r0, r2, #27
 8005472:	d510      	bpl.n	8005496 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005474:	68da      	ldr	r2, [r3, #12]
 8005476:	06d1      	lsls	r1, r2, #27
 8005478:	d50d      	bpl.n	8005496 <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800547a:	f06f 0210 	mvn.w	r2, #16
 800547e:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005480:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005482:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005484:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005488:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800548a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800548c:	d058      	beq.n	8005540 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 800548e:	f7ff ffab 	bl	80053e8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005492:	2300      	movs	r3, #0
 8005494:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005496:	6823      	ldr	r3, [r4, #0]
 8005498:	691a      	ldr	r2, [r3, #16]
 800549a:	07d2      	lsls	r2, r2, #31
 800549c:	d508      	bpl.n	80054b0 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800549e:	68da      	ldr	r2, [r3, #12]
 80054a0:	07d0      	lsls	r0, r2, #31
 80054a2:	d505      	bpl.n	80054b0 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054a4:	f06f 0201 	mvn.w	r2, #1
 80054a8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80054aa:	4620      	mov	r0, r4
 80054ac:	f7fc fbc8 	bl	8001c40 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054b0:	6823      	ldr	r3, [r4, #0]
 80054b2:	691a      	ldr	r2, [r3, #16]
 80054b4:	0611      	lsls	r1, r2, #24
 80054b6:	d508      	bpl.n	80054ca <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054b8:	68da      	ldr	r2, [r3, #12]
 80054ba:	0612      	lsls	r2, r2, #24
 80054bc:	d505      	bpl.n	80054ca <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054be:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80054c2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80054c4:	4620      	mov	r0, r4
 80054c6:	f000 fab4 	bl	8005a32 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80054ca:	6823      	ldr	r3, [r4, #0]
 80054cc:	691a      	ldr	r2, [r3, #16]
 80054ce:	05d0      	lsls	r0, r2, #23
 80054d0:	d508      	bpl.n	80054e4 <HAL_TIM_IRQHandler+0xf6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054d2:	68da      	ldr	r2, [r3, #12]
 80054d4:	0611      	lsls	r1, r2, #24
 80054d6:	d505      	bpl.n	80054e4 <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80054d8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80054dc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80054de:	4620      	mov	r0, r4
 80054e0:	f000 faa8 	bl	8005a34 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054e4:	6823      	ldr	r3, [r4, #0]
 80054e6:	691a      	ldr	r2, [r3, #16]
 80054e8:	0652      	lsls	r2, r2, #25
 80054ea:	d508      	bpl.n	80054fe <HAL_TIM_IRQHandler+0x110>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054ec:	68da      	ldr	r2, [r3, #12]
 80054ee:	0650      	lsls	r0, r2, #25
 80054f0:	d505      	bpl.n	80054fe <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054f6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80054f8:	4620      	mov	r0, r4
 80054fa:	f7ff ff77 	bl	80053ec <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054fe:	6823      	ldr	r3, [r4, #0]
 8005500:	691a      	ldr	r2, [r3, #16]
 8005502:	0691      	lsls	r1, r2, #26
 8005504:	d522      	bpl.n	800554c <HAL_TIM_IRQHandler+0x15e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005506:	68da      	ldr	r2, [r3, #12]
 8005508:	0692      	lsls	r2, r2, #26
 800550a:	d51f      	bpl.n	800554c <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800550c:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8005510:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005512:	611a      	str	r2, [r3, #16]
}
 8005514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8005518:	f000 ba8a 	b.w	8005a30 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800551c:	f7ff ff63 	bl	80053e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005520:	4620      	mov	r0, r4
 8005522:	f7ff ff62 	bl	80053ea <HAL_TIM_PWM_PulseFinishedCallback>
 8005526:	e776      	b.n	8005416 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005528:	f7ff ff5d 	bl	80053e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800552c:	4620      	mov	r0, r4
 800552e:	f7ff ff5c 	bl	80053ea <HAL_TIM_PWM_PulseFinishedCallback>
 8005532:	e785      	b.n	8005440 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005534:	f7ff ff57 	bl	80053e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005538:	4620      	mov	r0, r4
 800553a:	f7ff ff56 	bl	80053ea <HAL_TIM_PWM_PulseFinishedCallback>
 800553e:	e793      	b.n	8005468 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005540:	f7ff ff51 	bl	80053e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005544:	4620      	mov	r0, r4
 8005546:	f7ff ff50 	bl	80053ea <HAL_TIM_PWM_PulseFinishedCallback>
 800554a:	e7a2      	b.n	8005492 <HAL_TIM_IRQHandler+0xa4>
 800554c:	bd10      	pop	{r4, pc}
	...

08005550 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005550:	4a30      	ldr	r2, [pc, #192]	; (8005614 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8005552:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005554:	4290      	cmp	r0, r2
 8005556:	d012      	beq.n	800557e <TIM_Base_SetConfig+0x2e>
 8005558:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800555c:	d00f      	beq.n	800557e <TIM_Base_SetConfig+0x2e>
 800555e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005562:	4290      	cmp	r0, r2
 8005564:	d00b      	beq.n	800557e <TIM_Base_SetConfig+0x2e>
 8005566:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800556a:	4290      	cmp	r0, r2
 800556c:	d007      	beq.n	800557e <TIM_Base_SetConfig+0x2e>
 800556e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005572:	4290      	cmp	r0, r2
 8005574:	d003      	beq.n	800557e <TIM_Base_SetConfig+0x2e>
 8005576:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800557a:	4290      	cmp	r0, r2
 800557c:	d119      	bne.n	80055b2 <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 800557e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005580:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005584:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005586:	4a23      	ldr	r2, [pc, #140]	; (8005614 <TIM_Base_SetConfig+0xc4>)
 8005588:	4290      	cmp	r0, r2
 800558a:	d01d      	beq.n	80055c8 <TIM_Base_SetConfig+0x78>
 800558c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005590:	d01a      	beq.n	80055c8 <TIM_Base_SetConfig+0x78>
 8005592:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005596:	4290      	cmp	r0, r2
 8005598:	d016      	beq.n	80055c8 <TIM_Base_SetConfig+0x78>
 800559a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800559e:	4290      	cmp	r0, r2
 80055a0:	d012      	beq.n	80055c8 <TIM_Base_SetConfig+0x78>
 80055a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055a6:	4290      	cmp	r0, r2
 80055a8:	d00e      	beq.n	80055c8 <TIM_Base_SetConfig+0x78>
 80055aa:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80055ae:	4290      	cmp	r0, r2
 80055b0:	d00a      	beq.n	80055c8 <TIM_Base_SetConfig+0x78>
 80055b2:	4a19      	ldr	r2, [pc, #100]	; (8005618 <TIM_Base_SetConfig+0xc8>)
 80055b4:	4290      	cmp	r0, r2
 80055b6:	d007      	beq.n	80055c8 <TIM_Base_SetConfig+0x78>
 80055b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055bc:	4290      	cmp	r0, r2
 80055be:	d003      	beq.n	80055c8 <TIM_Base_SetConfig+0x78>
 80055c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055c4:	4290      	cmp	r0, r2
 80055c6:	d103      	bne.n	80055d0 <TIM_Base_SetConfig+0x80>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055c8:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80055ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055ce:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055d0:	694a      	ldr	r2, [r1, #20]
 80055d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055d6:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80055d8:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055da:	688b      	ldr	r3, [r1, #8]
 80055dc:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80055de:	680b      	ldr	r3, [r1, #0]
 80055e0:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055e2:	4b0c      	ldr	r3, [pc, #48]	; (8005614 <TIM_Base_SetConfig+0xc4>)
 80055e4:	4298      	cmp	r0, r3
 80055e6:	d00f      	beq.n	8005608 <TIM_Base_SetConfig+0xb8>
 80055e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ec:	4298      	cmp	r0, r3
 80055ee:	d00b      	beq.n	8005608 <TIM_Base_SetConfig+0xb8>
 80055f0:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80055f4:	4298      	cmp	r0, r3
 80055f6:	d007      	beq.n	8005608 <TIM_Base_SetConfig+0xb8>
 80055f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055fc:	4298      	cmp	r0, r3
 80055fe:	d003      	beq.n	8005608 <TIM_Base_SetConfig+0xb8>
 8005600:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005604:	4298      	cmp	r0, r3
 8005606:	d101      	bne.n	800560c <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 8005608:	690b      	ldr	r3, [r1, #16]
 800560a:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800560c:	2301      	movs	r3, #1
 800560e:	6143      	str	r3, [r0, #20]
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	40012c00 	.word	0x40012c00
 8005618:	40014000 	.word	0x40014000

0800561c <HAL_TIM_Base_Init>:
{
 800561c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800561e:	4604      	mov	r4, r0
 8005620:	b1a0      	cbz	r0, 800564c <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005622:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005626:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800562a:	b91b      	cbnz	r3, 8005634 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800562c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005630:	f7fc fcd2 	bl	8001fd8 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8005634:	2302      	movs	r3, #2
 8005636:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800563a:	6820      	ldr	r0, [r4, #0]
 800563c:	1d21      	adds	r1, r4, #4
 800563e:	f7ff ff87 	bl	8005550 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8005642:	2301      	movs	r3, #1
 8005644:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005648:	2000      	movs	r0, #0
 800564a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800564c:	2001      	movs	r0, #1
}
 800564e:	bd10      	pop	{r4, pc}

08005650 <HAL_TIM_PWM_Init>:
{
 8005650:	b510      	push	{r4, lr}
  if (htim == NULL)
 8005652:	4604      	mov	r4, r0
 8005654:	b1a0      	cbz	r0, 8005680 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005656:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800565a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800565e:	b91b      	cbnz	r3, 8005668 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8005660:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8005664:	f7ff febe 	bl	80053e4 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8005668:	2302      	movs	r3, #2
 800566a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800566e:	6820      	ldr	r0, [r4, #0]
 8005670:	1d21      	adds	r1, r4, #4
 8005672:	f7ff ff6d 	bl	8005550 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8005676:	2301      	movs	r3, #1
 8005678:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800567c:	2000      	movs	r0, #0
 800567e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005680:	2001      	movs	r0, #1
}
 8005682:	bd10      	pop	{r4, pc}

08005684 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005684:	6a03      	ldr	r3, [r0, #32]
 8005686:	f023 0310 	bic.w	r3, r3, #16
 800568a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800568c:	6a03      	ldr	r3, [r0, #32]
{
 800568e:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 8005690:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005692:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005694:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005696:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800569a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800569e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056a2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80056a4:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056a8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80056ac:	4d16      	ldr	r5, [pc, #88]	; (8005708 <TIM_OC2_SetConfig+0x84>)
 80056ae:	42a8      	cmp	r0, r5
 80056b0:	d003      	beq.n	80056ba <TIM_OC2_SetConfig+0x36>
 80056b2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80056b6:	42a8      	cmp	r0, r5
 80056b8:	d10d      	bne.n	80056d6 <TIM_OC2_SetConfig+0x52>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056ba:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80056bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056c0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056c4:	4d10      	ldr	r5, [pc, #64]	; (8005708 <TIM_OC2_SetConfig+0x84>)
 80056c6:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 80056c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056cc:	d00e      	beq.n	80056ec <TIM_OC2_SetConfig+0x68>
 80056ce:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80056d2:	42a8      	cmp	r0, r5
 80056d4:	d00a      	beq.n	80056ec <TIM_OC2_SetConfig+0x68>
 80056d6:	4d0d      	ldr	r5, [pc, #52]	; (800570c <TIM_OC2_SetConfig+0x88>)
 80056d8:	42a8      	cmp	r0, r5
 80056da:	d007      	beq.n	80056ec <TIM_OC2_SetConfig+0x68>
 80056dc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80056e0:	42a8      	cmp	r0, r5
 80056e2:	d003      	beq.n	80056ec <TIM_OC2_SetConfig+0x68>
 80056e4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80056e8:	42a8      	cmp	r0, r5
 80056ea:	d106      	bne.n	80056fa <TIM_OC2_SetConfig+0x76>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80056ec:	f424 6540 	bic.w	r5, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80056f0:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80056f2:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80056f4:	4334      	orrs	r4, r6
 80056f6:	ea45 0484 	orr.w	r4, r5, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 80056fa:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80056fc:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80056fe:	684a      	ldr	r2, [r1, #4]
 8005700:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8005702:	6203      	str	r3, [r0, #32]
 8005704:	bd70      	pop	{r4, r5, r6, pc}
 8005706:	bf00      	nop
 8005708:	40012c00 	.word	0x40012c00
 800570c:	40014000 	.word	0x40014000

08005710 <HAL_TIM_PWM_ConfigChannel>:
{
 8005710:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8005712:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005716:	2b01      	cmp	r3, #1
{
 8005718:	4604      	mov	r4, r0
 800571a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800571e:	d010      	beq.n	8005742 <HAL_TIM_PWM_ConfigChannel+0x32>
 8005720:	2301      	movs	r3, #1
  switch (Channel)
 8005722:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8005724:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8005728:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 800572c:	d043      	beq.n	80057b6 <HAL_TIM_PWM_ConfigChannel+0xa6>
 800572e:	d809      	bhi.n	8005744 <HAL_TIM_PWM_ConfigChannel+0x34>
 8005730:	b1fa      	cbz	r2, 8005772 <HAL_TIM_PWM_ConfigChannel+0x62>
 8005732:	2a04      	cmp	r2, #4
 8005734:	d02e      	beq.n	8005794 <HAL_TIM_PWM_ConfigChannel+0x84>
  htim->State = HAL_TIM_STATE_READY;
 8005736:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8005738:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800573a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800573e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8005742:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8005744:	2a10      	cmp	r2, #16
 8005746:	d047      	beq.n	80057d8 <HAL_TIM_PWM_ConfigChannel+0xc8>
 8005748:	2a14      	cmp	r2, #20
 800574a:	d056      	beq.n	80057fa <HAL_TIM_PWM_ConfigChannel+0xea>
 800574c:	2a0c      	cmp	r2, #12
 800574e:	d1f2      	bne.n	8005736 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005750:	6820      	ldr	r0, [r4, #0]
 8005752:	f7ff fd95 	bl	8005280 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005756:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005758:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800575a:	69da      	ldr	r2, [r3, #28]
 800575c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005760:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005762:	69da      	ldr	r2, [r3, #28]
 8005764:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005768:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800576a:	69da      	ldr	r2, [r3, #28]
 800576c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005770:	e030      	b.n	80057d4 <HAL_TIM_PWM_ConfigChannel+0xc4>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005772:	6820      	ldr	r0, [r4, #0]
 8005774:	f7ff fcf4 	bl	8005160 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005778:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800577a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800577c:	699a      	ldr	r2, [r3, #24]
 800577e:	f042 0208 	orr.w	r2, r2, #8
 8005782:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005784:	699a      	ldr	r2, [r3, #24]
 8005786:	f022 0204 	bic.w	r2, r2, #4
 800578a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800578c:	699a      	ldr	r2, [r3, #24]
 800578e:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005790:	619a      	str	r2, [r3, #24]
      break;
 8005792:	e7d0      	b.n	8005736 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005794:	6820      	ldr	r0, [r4, #0]
 8005796:	f7ff ff75 	bl	8005684 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800579a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800579c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800579e:	699a      	ldr	r2, [r3, #24]
 80057a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057a4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80057a6:	699a      	ldr	r2, [r3, #24]
 80057a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057ac:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80057ae:	699a      	ldr	r2, [r3, #24]
 80057b0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80057b4:	e7ec      	b.n	8005790 <HAL_TIM_PWM_ConfigChannel+0x80>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80057b6:	6820      	ldr	r0, [r4, #0]
 80057b8:	f7ff fd1e 	bl	80051f8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80057bc:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80057be:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80057c0:	69da      	ldr	r2, [r3, #28]
 80057c2:	f042 0208 	orr.w	r2, r2, #8
 80057c6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80057c8:	69da      	ldr	r2, [r3, #28]
 80057ca:	f022 0204 	bic.w	r2, r2, #4
 80057ce:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80057d0:	69da      	ldr	r2, [r3, #28]
 80057d2:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057d4:	61da      	str	r2, [r3, #28]
      break;
 80057d6:	e7ae      	b.n	8005736 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80057d8:	6820      	ldr	r0, [r4, #0]
 80057da:	f7ff fd85 	bl	80052e8 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80057de:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80057e0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80057e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057e4:	f042 0208 	orr.w	r2, r2, #8
 80057e8:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80057ea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057ec:	f022 0204 	bic.w	r2, r2, #4
 80057f0:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80057f2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057f4:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80057f6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80057f8:	e79d      	b.n	8005736 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80057fa:	6820      	ldr	r0, [r4, #0]
 80057fc:	f7ff fda8 	bl	8005350 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005800:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005802:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005804:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005806:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800580a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800580c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800580e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005812:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005814:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005816:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800581a:	e7ec      	b.n	80057f6 <HAL_TIM_PWM_ConfigChannel+0xe6>

0800581c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800581c:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800581e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005820:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005822:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005826:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800582a:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800582c:	6083      	str	r3, [r0, #8]
 800582e:	bd10      	pop	{r4, pc}

08005830 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8005830:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005834:	2b01      	cmp	r3, #1
{
 8005836:	b570      	push	{r4, r5, r6, lr}
 8005838:	4604      	mov	r4, r0
 800583a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800583e:	d017      	beq.n	8005870 <HAL_TIM_ConfigClockSource+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 8005840:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8005844:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8005846:	2301      	movs	r3, #1
 8005848:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800584c:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800584e:	4b41      	ldr	r3, [pc, #260]	; (8005954 <HAL_TIM_ConfigClockSource+0x124>)
 8005850:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8005852:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8005854:	680b      	ldr	r3, [r1, #0]
 8005856:	2b40      	cmp	r3, #64	; 0x40
 8005858:	d065      	beq.n	8005926 <HAL_TIM_ConfigClockSource+0xf6>
 800585a:	d815      	bhi.n	8005888 <HAL_TIM_ConfigClockSource+0x58>
 800585c:	2b10      	cmp	r3, #16
 800585e:	d00c      	beq.n	800587a <HAL_TIM_ConfigClockSource+0x4a>
 8005860:	d807      	bhi.n	8005872 <HAL_TIM_ConfigClockSource+0x42>
 8005862:	b153      	cbz	r3, 800587a <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_READY;
 8005864:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8005866:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005868:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800586c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8005870:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8005872:	2b20      	cmp	r3, #32
 8005874:	d001      	beq.n	800587a <HAL_TIM_ConfigClockSource+0x4a>
 8005876:	2b30      	cmp	r3, #48	; 0x30
 8005878:	d1f4      	bne.n	8005864 <HAL_TIM_ConfigClockSource+0x34>
  tmpsmcr = TIMx->SMCR;
 800587a:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800587c:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8005880:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005884:	4313      	orrs	r3, r2
 8005886:	e01a      	b.n	80058be <HAL_TIM_ConfigClockSource+0x8e>
  switch (sClockSourceConfig->ClockSource)
 8005888:	2b60      	cmp	r3, #96	; 0x60
 800588a:	d034      	beq.n	80058f6 <HAL_TIM_ConfigClockSource+0xc6>
 800588c:	d819      	bhi.n	80058c2 <HAL_TIM_ConfigClockSource+0x92>
 800588e:	2b50      	cmp	r3, #80	; 0x50
 8005890:	d1e8      	bne.n	8005864 <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005892:	684a      	ldr	r2, [r1, #4]
 8005894:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8005896:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005898:	6a05      	ldr	r5, [r0, #32]
 800589a:	f025 0501 	bic.w	r5, r5, #1
 800589e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058a0:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058a2:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058aa:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80058ae:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80058b0:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80058b2:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80058b4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80058b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058ba:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80058be:	6083      	str	r3, [r0, #8]
 80058c0:	e7d0      	b.n	8005864 <HAL_TIM_ConfigClockSource+0x34>
  switch (sClockSourceConfig->ClockSource)
 80058c2:	2b70      	cmp	r3, #112	; 0x70
 80058c4:	d00c      	beq.n	80058e0 <HAL_TIM_ConfigClockSource+0xb0>
 80058c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058ca:	d1cb      	bne.n	8005864 <HAL_TIM_ConfigClockSource+0x34>
      TIM_ETR_SetConfig(htim->Instance,
 80058cc:	68cb      	ldr	r3, [r1, #12]
 80058ce:	684a      	ldr	r2, [r1, #4]
 80058d0:	6889      	ldr	r1, [r1, #8]
 80058d2:	f7ff ffa3 	bl	800581c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058d6:	6822      	ldr	r2, [r4, #0]
 80058d8:	6893      	ldr	r3, [r2, #8]
 80058da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058de:	e008      	b.n	80058f2 <HAL_TIM_ConfigClockSource+0xc2>
      TIM_ETR_SetConfig(htim->Instance,
 80058e0:	68cb      	ldr	r3, [r1, #12]
 80058e2:	684a      	ldr	r2, [r1, #4]
 80058e4:	6889      	ldr	r1, [r1, #8]
 80058e6:	f7ff ff99 	bl	800581c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80058ea:	6822      	ldr	r2, [r4, #0]
 80058ec:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058ee:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058f2:	6093      	str	r3, [r2, #8]
      break;
 80058f4:	e7b6      	b.n	8005864 <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80058f6:	684d      	ldr	r5, [r1, #4]
 80058f8:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058fa:	6a01      	ldr	r1, [r0, #32]
 80058fc:	f021 0110 	bic.w	r1, r1, #16
 8005900:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005902:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8005904:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005906:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800590a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800590e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005912:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8005916:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8005918:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800591a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800591c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005920:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8005924:	e7cb      	b.n	80058be <HAL_TIM_ConfigClockSource+0x8e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005926:	684a      	ldr	r2, [r1, #4]
 8005928:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800592a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800592c:	6a05      	ldr	r5, [r0, #32]
 800592e:	f025 0501 	bic.w	r5, r5, #1
 8005932:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005934:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005936:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800593a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800593e:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8005942:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8005944:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8005946:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005948:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800594a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800594e:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8005952:	e7b4      	b.n	80058be <HAL_TIM_ConfigClockSource+0x8e>
 8005954:	fffe0088 	.word	0xfffe0088

08005958 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005958:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800595a:	f001 011f 	and.w	r1, r1, #31
{
 800595e:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005960:	2401      	movs	r4, #1
 8005962:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8005964:	ea23 0304 	bic.w	r3, r3, r4
 8005968:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800596a:	6a03      	ldr	r3, [r0, #32]
 800596c:	408a      	lsls	r2, r1
 800596e:	431a      	orrs	r2, r3
 8005970:	6202      	str	r2, [r0, #32]
 8005972:	bd10      	pop	{r4, pc}

08005974 <HAL_TIM_PWM_Start>:
{
 8005974:	b510      	push	{r4, lr}
 8005976:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005978:	2201      	movs	r2, #1
 800597a:	6800      	ldr	r0, [r0, #0]
 800597c:	f7ff ffec 	bl	8005958 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005980:	6823      	ldr	r3, [r4, #0]
 8005982:	4a13      	ldr	r2, [pc, #76]	; (80059d0 <HAL_TIM_PWM_Start+0x5c>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d01d      	beq.n	80059c4 <HAL_TIM_PWM_Start+0x50>
 8005988:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800598c:	4293      	cmp	r3, r2
 800598e:	d019      	beq.n	80059c4 <HAL_TIM_PWM_Start+0x50>
 8005990:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8005994:	4293      	cmp	r3, r2
 8005996:	d015      	beq.n	80059c4 <HAL_TIM_PWM_Start+0x50>
 8005998:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800599c:	4293      	cmp	r3, r2
 800599e:	d011      	beq.n	80059c4 <HAL_TIM_PWM_Start+0x50>
 80059a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d00d      	beq.n	80059c4 <HAL_TIM_PWM_Start+0x50>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059a8:	6899      	ldr	r1, [r3, #8]
 80059aa:	4a0a      	ldr	r2, [pc, #40]	; (80059d4 <HAL_TIM_PWM_Start+0x60>)
 80059ac:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059ae:	2a06      	cmp	r2, #6
 80059b0:	d006      	beq.n	80059c0 <HAL_TIM_PWM_Start+0x4c>
 80059b2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80059b6:	d003      	beq.n	80059c0 <HAL_TIM_PWM_Start+0x4c>
    __HAL_TIM_ENABLE(htim);
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	f042 0201 	orr.w	r2, r2, #1
 80059be:	601a      	str	r2, [r3, #0]
}
 80059c0:	2000      	movs	r0, #0
 80059c2:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 80059c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059ca:	645a      	str	r2, [r3, #68]	; 0x44
 80059cc:	e7ec      	b.n	80059a8 <HAL_TIM_PWM_Start+0x34>
 80059ce:	bf00      	nop
 80059d0:	40012c00 	.word	0x40012c00
 80059d4:	00010007 	.word	0x00010007

080059d8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059d8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80059dc:	2b01      	cmp	r3, #1
{
 80059de:	b530      	push	{r4, r5, lr}
 80059e0:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80059e4:	d01f      	beq.n	8005a26 <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059e6:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80059e8:	4d10      	ldr	r5, [pc, #64]	; (8005a2c <HAL_TIMEx_MasterConfigSynchronization+0x54>)
  htim->State = HAL_TIM_STATE_BUSY;
 80059ea:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80059ee:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 80059f0:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 80059f2:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80059f4:	d003      	beq.n	80059fe <HAL_TIMEx_MasterConfigSynchronization+0x26>
 80059f6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80059fa:	42aa      	cmp	r2, r5
 80059fc:	d103      	bne.n	8005a06 <HAL_TIMEx_MasterConfigSynchronization+0x2e>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80059fe:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a00:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a04:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a06:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a08:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a0e:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005a10:	f024 0480 	bic.w	r4, r4, #128	; 0x80

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a14:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a16:	4321      	orrs	r1, r4

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a18:	2301      	movs	r3, #1
  htim->Instance->SMCR = tmpsmcr;
 8005a1a:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8005a1c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a20:	2300      	movs	r3, #0
 8005a22:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8005a26:	4618      	mov	r0, r3

  return HAL_OK;
}
 8005a28:	bd30      	pop	{r4, r5, pc}
 8005a2a:	bf00      	nop
 8005a2c:	40012c00 	.word	0x40012c00

08005a30 <HAL_TIMEx_CommutCallback>:
 8005a30:	4770      	bx	lr

08005a32 <HAL_TIMEx_BreakCallback>:
 8005a32:	4770      	bx	lr

08005a34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a34:	4770      	bx	lr
	...

08005a38 <UART_SetConfig>:
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a38:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a3a:	69c1      	ldr	r1, [r0, #28]
{
 8005a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a3e:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a40:	6883      	ldr	r3, [r0, #8]
 8005a42:	6900      	ldr	r0, [r0, #16]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a44:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a46:	4303      	orrs	r3, r0
 8005a48:	6960      	ldr	r0, [r4, #20]
 8005a4a:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a4c:	48ba      	ldr	r0, [pc, #744]	; (8005d38 <UART_SetConfig+0x300>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a4e:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a50:	4028      	ands	r0, r5
 8005a52:	4303      	orrs	r3, r0
 8005a54:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a56:	6853      	ldr	r3, [r2, #4]
 8005a58:	68e0      	ldr	r0, [r4, #12]
 8005a5a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005a5e:	4303      	orrs	r3, r0
 8005a60:	6053      	str	r3, [r2, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a62:	4bb6      	ldr	r3, [pc, #728]	; (8005d3c <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a64:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a66:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005a68:	bf1c      	itt	ne
 8005a6a:	6a23      	ldrne	r3, [r4, #32]
 8005a6c:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a6e:	6893      	ldr	r3, [r2, #8]
 8005a70:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005a74:	4303      	orrs	r3, r0
 8005a76:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a78:	4bb1      	ldr	r3, [pc, #708]	; (8005d40 <UART_SetConfig+0x308>)
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d119      	bne.n	8005ab2 <UART_SetConfig+0x7a>
 8005a7e:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8005a82:	4ab0      	ldr	r2, [pc, #704]	; (8005d44 <UART_SetConfig+0x30c>)
 8005a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a88:	f003 0303 	and.w	r3, r3, #3
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a8c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005a90:	5cd3      	ldrb	r3, [r2, r3]
 8005a92:	f040 8138 	bne.w	8005d06 <UART_SetConfig+0x2ce>
  {
    switch (clocksource)
 8005a96:	2b08      	cmp	r3, #8
 8005a98:	f200 808f 	bhi.w	8005bba <UART_SetConfig+0x182>
 8005a9c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005aa0:	00ca011a 	.word	0x00ca011a
 8005aa4:	008d00f9 	.word	0x008d00f9
 8005aa8:	008d0114 	.word	0x008d0114
 8005aac:	008d008d 	.word	0x008d008d
 8005ab0:	0036      	.short	0x0036
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ab2:	4ba5      	ldr	r3, [pc, #660]	; (8005d48 <UART_SetConfig+0x310>)
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d107      	bne.n	8005ac8 <UART_SetConfig+0x90>
 8005ab8:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8005abc:	4aa3      	ldr	r2, [pc, #652]	; (8005d4c <UART_SetConfig+0x314>)
 8005abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ac2:	f003 030c 	and.w	r3, r3, #12
 8005ac6:	e7e1      	b.n	8005a8c <UART_SetConfig+0x54>
 8005ac8:	4ba1      	ldr	r3, [pc, #644]	; (8005d50 <UART_SetConfig+0x318>)
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d123      	bne.n	8005b16 <UART_SetConfig+0xde>
 8005ace:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8005ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ad6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005ada:	2b10      	cmp	r3, #16
 8005adc:	f000 80f1 	beq.w	8005cc2 <UART_SetConfig+0x28a>
 8005ae0:	d80b      	bhi.n	8005afa <UART_SetConfig+0xc2>
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	f000 80f3 	beq.w	8005cce <UART_SetConfig+0x296>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ae8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005aec:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8005af0:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005af4:	f000 80f8 	beq.w	8005ce8 <UART_SetConfig+0x2b0>
 8005af8:	e0a8      	b.n	8005c4c <UART_SetConfig+0x214>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005afa:	2b20      	cmp	r3, #32
 8005afc:	f000 80c6 	beq.w	8005c8c <UART_SetConfig+0x254>
 8005b00:	2b30      	cmp	r3, #48	; 0x30
 8005b02:	d1f1      	bne.n	8005ae8 <UART_SetConfig+0xb0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b04:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005b08:	f040 80b8 	bne.w	8005c7c <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005b0c:	6860      	ldr	r0, [r4, #4]
 8005b0e:	0843      	lsrs	r3, r0, #1
 8005b10:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8005b14:	e0c3      	b.n	8005c9e <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b16:	4b8f      	ldr	r3, [pc, #572]	; (8005d54 <UART_SetConfig+0x31c>)
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d11e      	bne.n	8005b5a <UART_SetConfig+0x122>
 8005b1c:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8005b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b24:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005b28:	2b40      	cmp	r3, #64	; 0x40
 8005b2a:	f000 80bb 	beq.w	8005ca4 <UART_SetConfig+0x26c>
 8005b2e:	d80a      	bhi.n	8005b46 <UART_SetConfig+0x10e>
 8005b30:	b97b      	cbnz	r3, 8005b52 <UART_SetConfig+0x11a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b32:	4b82      	ldr	r3, [pc, #520]	; (8005d3c <UART_SetConfig+0x304>)
 8005b34:	429a      	cmp	r2, r3
 8005b36:	f040 80ca 	bne.w	8005cce <UART_SetConfig+0x296>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8005b3a:	f7fe fbd3 	bl	80042e4 <HAL_RCC_GetPCLK1Freq>
        break;
 8005b3e:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 8005b40:	bbb0      	cbnz	r0, 8005bb0 <UART_SetConfig+0x178>
 8005b42:	4602      	mov	r2, r0
 8005b44:	e03a      	b.n	8005bbc <UART_SetConfig+0x184>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b46:	2b80      	cmp	r3, #128	; 0x80
 8005b48:	f000 809d 	beq.w	8005c86 <UART_SetConfig+0x24e>
 8005b4c:	2bc0      	cmp	r3, #192	; 0xc0
 8005b4e:	f000 80b0 	beq.w	8005cb2 <UART_SetConfig+0x27a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b52:	4b7a      	ldr	r3, [pc, #488]	; (8005d3c <UART_SetConfig+0x304>)
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d1c7      	bne.n	8005ae8 <UART_SetConfig+0xb0>
 8005b58:	e02f      	b.n	8005bba <UART_SetConfig+0x182>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b5a:	4b7f      	ldr	r3, [pc, #508]	; (8005d58 <UART_SetConfig+0x320>)
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d111      	bne.n	8005b84 <UART_SetConfig+0x14c>
 8005b60:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8005b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b70:	f000 8098 	beq.w	8005ca4 <UART_SetConfig+0x26c>
 8005b74:	d9dc      	bls.n	8005b30 <UART_SetConfig+0xf8>
 8005b76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b7a:	f000 8084 	beq.w	8005c86 <UART_SetConfig+0x24e>
 8005b7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b82:	e7e4      	b.n	8005b4e <UART_SetConfig+0x116>
 8005b84:	4b6d      	ldr	r3, [pc, #436]	; (8005d3c <UART_SetConfig+0x304>)
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d1ae      	bne.n	8005ae8 <UART_SetConfig+0xb0>
 8005b8a:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8005b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b92:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005b96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b9a:	f000 8083 	beq.w	8005ca4 <UART_SetConfig+0x26c>
 8005b9e:	d9c7      	bls.n	8005b30 <UART_SetConfig+0xf8>
 8005ba0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ba4:	d06f      	beq.n	8005c86 <UART_SetConfig+0x24e>
 8005ba6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005baa:	e7d0      	b.n	8005b4e <UART_SetConfig+0x116>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8005bac:	486b      	ldr	r0, [pc, #428]	; (8005d5c <UART_SetConfig+0x324>)
  if (UART_INSTANCE_LOWPOWER(huart))
 8005bae:	2302      	movs	r3, #2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005bb0:	6862      	ldr	r2, [r4, #4]
 8005bb2:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8005bb6:	4281      	cmp	r1, r0
 8005bb8:	d905      	bls.n	8005bc6 <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 8005bba:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8005bc0:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8005bc2:	4610      	mov	r0, r2
 8005bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005bc6:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8005bca:	d8f6      	bhi.n	8005bba <UART_SetConfig+0x182>
        switch (clocksource)
 8005bcc:	2b08      	cmp	r3, #8
 8005bce:	d82e      	bhi.n	8005c2e <UART_SetConfig+0x1f6>
 8005bd0:	e8df f003 	tbb	[pc, r3]
 8005bd4:	2d1c2d05 	.word	0x2d1c2d05
 8005bd8:	2d2d2d24 	.word	0x2d2d2d24
 8005bdc:	27          	.byte	0x27
 8005bdd:	00          	.byte	0x00
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005bde:	f7fe fb81 	bl	80042e4 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005be2:	6862      	ldr	r2, [r4, #4]
 8005be4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005be8:	0856      	lsrs	r6, r2, #1
 8005bea:	2700      	movs	r7, #0
 8005bec:	fbe1 6700 	umlal	r6, r7, r1, r0
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	4630      	mov	r0, r6
 8005bf4:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8005bf6:	f7fa ffd3 	bl	8000ba0 <__aeabi_uldivmod>
            break;
 8005bfa:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005bfc:	4b58      	ldr	r3, [pc, #352]	; (8005d60 <UART_SetConfig+0x328>)
 8005bfe:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8005c02:	4299      	cmp	r1, r3
 8005c04:	d8d9      	bhi.n	8005bba <UART_SetConfig+0x182>
          huart->Instance->BRR = usartdiv;
 8005c06:	6823      	ldr	r3, [r4, #0]
 8005c08:	60d8      	str	r0, [r3, #12]
 8005c0a:	e7d7      	b.n	8005bbc <UART_SetConfig+0x184>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8005c0c:	4855      	ldr	r0, [pc, #340]	; (8005d64 <UART_SetConfig+0x32c>)
 8005c0e:	0855      	lsrs	r5, r2, #1
 8005c10:	2300      	movs	r3, #0
 8005c12:	2100      	movs	r1, #0
 8005c14:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8005c16:	f141 0100 	adc.w	r1, r1, #0
 8005c1a:	e7ec      	b.n	8005bf6 <UART_SetConfig+0x1be>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005c1c:	f7fe f816 	bl	8003c4c <HAL_RCC_GetSysClockFreq>
 8005c20:	e7df      	b.n	8005be2 <UART_SetConfig+0x1aa>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8005c22:	0850      	lsrs	r0, r2, #1
 8005c24:	2100      	movs	r1, #0
 8005c26:	2300      	movs	r3, #0
 8005c28:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8005c2c:	e7f3      	b.n	8005c16 <UART_SetConfig+0x1de>
            ret = HAL_ERROR;
 8005c2e:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8005c30:	2000      	movs	r0, #0
 8005c32:	e7e3      	b.n	8005bfc <UART_SetConfig+0x1c4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005c34:	f7fe fb68 	bl	8004308 <HAL_RCC_GetPCLK2Freq>
 8005c38:	e04e      	b.n	8005cd8 <UART_SetConfig+0x2a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005c3a:	f7fe fb53 	bl	80042e4 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005c3e:	6862      	ldr	r2, [r4, #4]
 8005c40:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8005c44:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c48:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c4a:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c4c:	f1a3 0010 	sub.w	r0, r3, #16
 8005c50:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8005c54:	4288      	cmp	r0, r1
 8005c56:	d8b0      	bhi.n	8005bba <UART_SetConfig+0x182>
      huart->Instance->BRR = usartdiv;
 8005c58:	6821      	ldr	r1, [r4, #0]
 8005c5a:	60cb      	str	r3, [r1, #12]
 8005c5c:	e7ae      	b.n	8005bbc <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005c5e:	f7fe fb53 	bl	8004308 <HAL_RCC_GetPCLK2Freq>
 8005c62:	e7ec      	b.n	8005c3e <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005c64:	6860      	ldr	r0, [r4, #4]
 8005c66:	0843      	lsrs	r3, r0, #1
 8005c68:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8005c6c:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005c70:	fbb3 f3f0 	udiv	r3, r3, r0
 8005c74:	e7e8      	b.n	8005c48 <UART_SetConfig+0x210>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005c76:	f7fd ffe9 	bl	8003c4c <HAL_RCC_GetSysClockFreq>
 8005c7a:	e7e0      	b.n	8005c3e <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005c7c:	6860      	ldr	r0, [r4, #4]
 8005c7e:	0843      	lsrs	r3, r0, #1
 8005c80:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005c84:	e7f4      	b.n	8005c70 <UART_SetConfig+0x238>
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c86:	4b2d      	ldr	r3, [pc, #180]	; (8005d3c <UART_SetConfig+0x304>)
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d08f      	beq.n	8005bac <UART_SetConfig+0x174>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c8c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005c90:	d1e8      	bne.n	8005c64 <UART_SetConfig+0x22c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005c92:	6860      	ldr	r0, [r4, #4]
 8005c94:	0843      	lsrs	r3, r0, #1
 8005c96:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8005c9a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005c9e:	fbb3 f3f0 	udiv	r3, r3, r0
 8005ca2:	e01f      	b.n	8005ce4 <UART_SetConfig+0x2ac>
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ca4:	4b25      	ldr	r3, [pc, #148]	; (8005d3c <UART_SetConfig+0x304>)
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d10b      	bne.n	8005cc2 <UART_SetConfig+0x28a>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8005caa:	f7fd ffcf 	bl	8003c4c <HAL_RCC_GetSysClockFreq>
        break;
 8005cae:	2304      	movs	r3, #4
 8005cb0:	e746      	b.n	8005b40 <UART_SetConfig+0x108>
  if (UART_INSTANCE_LOWPOWER(huart))
 8005cb2:	4b22      	ldr	r3, [pc, #136]	; (8005d3c <UART_SetConfig+0x304>)
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	f47f af25 	bne.w	8005b04 <UART_SetConfig+0xcc>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8005cba:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if (UART_INSTANCE_LOWPOWER(huart))
 8005cbe:	2308      	movs	r3, #8
 8005cc0:	e776      	b.n	8005bb0 <UART_SetConfig+0x178>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cc2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005cc6:	d1d6      	bne.n	8005c76 <UART_SetConfig+0x23e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005cc8:	f7fd ffc0 	bl	8003c4c <HAL_RCC_GetSysClockFreq>
 8005ccc:	e004      	b.n	8005cd8 <UART_SetConfig+0x2a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cce:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005cd2:	d1b2      	bne.n	8005c3a <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005cd4:	f7fe fb06 	bl	80042e4 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005cd8:	6861      	ldr	r1, [r4, #4]
 8005cda:	084a      	lsrs	r2, r1, #1
 8005cdc:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8005ce0:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ce4:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ce6:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ce8:	f1a3 0010 	sub.w	r0, r3, #16
 8005cec:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8005cf0:	4288      	cmp	r0, r1
 8005cf2:	f63f af62 	bhi.w	8005bba <UART_SetConfig+0x182>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005cf6:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8005cfa:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005cfc:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8005d00:	430b      	orrs	r3, r1
 8005d02:	60c3      	str	r3, [r0, #12]
 8005d04:	e75a      	b.n	8005bbc <UART_SetConfig+0x184>
    switch (clocksource)
 8005d06:	2b08      	cmp	r3, #8
 8005d08:	f63f af57 	bhi.w	8005bba <UART_SetConfig+0x182>
 8005d0c:	a201      	add	r2, pc, #4	; (adr r2, 8005d14 <UART_SetConfig+0x2dc>)
 8005d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d12:	bf00      	nop
 8005d14:	08005c3b 	.word	0x08005c3b
 8005d18:	08005c5f 	.word	0x08005c5f
 8005d1c:	08005c65 	.word	0x08005c65
 8005d20:	08005bbb 	.word	0x08005bbb
 8005d24:	08005c77 	.word	0x08005c77
 8005d28:	08005bbb 	.word	0x08005bbb
 8005d2c:	08005bbb 	.word	0x08005bbb
 8005d30:	08005bbb 	.word	0x08005bbb
 8005d34:	08005c7d 	.word	0x08005c7d
 8005d38:	efff69f3 	.word	0xefff69f3
 8005d3c:	40008000 	.word	0x40008000
 8005d40:	40013800 	.word	0x40013800
 8005d44:	0801c8a3 	.word	0x0801c8a3
 8005d48:	40004400 	.word	0x40004400
 8005d4c:	0801c8a7 	.word	0x0801c8a7
 8005d50:	40004800 	.word	0x40004800
 8005d54:	40004c00 	.word	0x40004c00
 8005d58:	40005000 	.word	0x40005000
 8005d5c:	00f42400 	.word	0x00f42400
 8005d60:	000ffcff 	.word	0x000ffcff
 8005d64:	f4240000 	.word	0xf4240000

08005d68 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d68:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005d6a:	07da      	lsls	r2, r3, #31
{
 8005d6c:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d6e:	d506      	bpl.n	8005d7e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d70:	6801      	ldr	r1, [r0, #0]
 8005d72:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8005d74:	684a      	ldr	r2, [r1, #4]
 8005d76:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005d7a:	4322      	orrs	r2, r4
 8005d7c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d7e:	079c      	lsls	r4, r3, #30
 8005d80:	d506      	bpl.n	8005d90 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d82:	6801      	ldr	r1, [r0, #0]
 8005d84:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8005d86:	684a      	ldr	r2, [r1, #4]
 8005d88:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005d8c:	4322      	orrs	r2, r4
 8005d8e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d90:	0759      	lsls	r1, r3, #29
 8005d92:	d506      	bpl.n	8005da2 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d94:	6801      	ldr	r1, [r0, #0]
 8005d96:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8005d98:	684a      	ldr	r2, [r1, #4]
 8005d9a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005d9e:	4322      	orrs	r2, r4
 8005da0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005da2:	071a      	lsls	r2, r3, #28
 8005da4:	d506      	bpl.n	8005db4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005da6:	6801      	ldr	r1, [r0, #0]
 8005da8:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005daa:	684a      	ldr	r2, [r1, #4]
 8005dac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005db0:	4322      	orrs	r2, r4
 8005db2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005db4:	06dc      	lsls	r4, r3, #27
 8005db6:	d506      	bpl.n	8005dc6 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005db8:	6801      	ldr	r1, [r0, #0]
 8005dba:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8005dbc:	688a      	ldr	r2, [r1, #8]
 8005dbe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005dc2:	4322      	orrs	r2, r4
 8005dc4:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005dc6:	0699      	lsls	r1, r3, #26
 8005dc8:	d506      	bpl.n	8005dd8 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005dca:	6801      	ldr	r1, [r0, #0]
 8005dcc:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8005dce:	688a      	ldr	r2, [r1, #8]
 8005dd0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005dd4:	4322      	orrs	r2, r4
 8005dd6:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005dd8:	065a      	lsls	r2, r3, #25
 8005dda:	d50f      	bpl.n	8005dfc <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ddc:	6801      	ldr	r1, [r0, #0]
 8005dde:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8005de0:	684a      	ldr	r2, [r1, #4]
 8005de2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8005de6:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005de8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005dec:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005dee:	d105      	bne.n	8005dfc <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005df0:	684a      	ldr	r2, [r1, #4]
 8005df2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8005df4:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8005df8:	4322      	orrs	r2, r4
 8005dfa:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005dfc:	061b      	lsls	r3, r3, #24
 8005dfe:	d506      	bpl.n	8005e0e <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e00:	6802      	ldr	r2, [r0, #0]
 8005e02:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005e04:	6853      	ldr	r3, [r2, #4]
 8005e06:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005e0a:	430b      	orrs	r3, r1
 8005e0c:	6053      	str	r3, [r2, #4]
 8005e0e:	bd10      	pop	{r4, pc}

08005e10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e14:	9d06      	ldr	r5, [sp, #24]
 8005e16:	4604      	mov	r4, r0
 8005e18:	460f      	mov	r7, r1
 8005e1a:	4616      	mov	r6, r2
 8005e1c:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e1e:	6821      	ldr	r1, [r4, #0]
 8005e20:	69ca      	ldr	r2, [r1, #28]
 8005e22:	ea37 0302 	bics.w	r3, r7, r2
 8005e26:	bf0c      	ite	eq
 8005e28:	2201      	moveq	r2, #1
 8005e2a:	2200      	movne	r2, #0
 8005e2c:	42b2      	cmp	r2, r6
 8005e2e:	d002      	beq.n	8005e36 <UART_WaitOnFlagUntilTimeout+0x26>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8005e30:	2000      	movs	r0, #0
}
 8005e32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8005e36:	1c6b      	adds	r3, r5, #1
 8005e38:	d0f2      	beq.n	8005e20 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e3a:	f7fc fb5f 	bl	80024fc <HAL_GetTick>
 8005e3e:	eba0 0008 	sub.w	r0, r0, r8
 8005e42:	4285      	cmp	r5, r0
 8005e44:	d301      	bcc.n	8005e4a <UART_WaitOnFlagUntilTimeout+0x3a>
 8005e46:	2d00      	cmp	r5, #0
 8005e48:	d1e9      	bne.n	8005e1e <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e4a:	6823      	ldr	r3, [r4, #0]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005e52:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e54:	689a      	ldr	r2, [r3, #8]
 8005e56:	f022 0201 	bic.w	r2, r2, #1
 8005e5a:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8005e5c:	2320      	movs	r3, #32
 8005e5e:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005e60:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8005e62:	2300      	movs	r3, #0
 8005e64:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 8005e68:	2003      	movs	r0, #3
 8005e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005e6e <HAL_UART_Transmit>:
{
 8005e6e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005e72:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8005e74:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8005e76:	2b20      	cmp	r3, #32
{
 8005e78:	4604      	mov	r4, r0
 8005e7a:	460e      	mov	r6, r1
 8005e7c:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8005e7e:	d14b      	bne.n	8005f18 <HAL_UART_Transmit+0xaa>
    if ((pData == NULL) || (Size == 0U))
 8005e80:	2900      	cmp	r1, #0
 8005e82:	d047      	beq.n	8005f14 <HAL_UART_Transmit+0xa6>
 8005e84:	2a00      	cmp	r2, #0
 8005e86:	d045      	beq.n	8005f14 <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 8005e88:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d043      	beq.n	8005f18 <HAL_UART_Transmit+0xaa>
 8005e90:	2301      	movs	r3, #1
 8005e92:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e96:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e98:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e9a:	67c5      	str	r5, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e9c:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 8005e9e:	f7fc fb2d 	bl	80024fc <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ea2:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 8005ea4:	f8a4 9050 	strh.w	r9, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ea8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8005eac:	4607      	mov	r7, r0
    huart->TxXferCount = Size;
 8005eae:	f8a4 9052 	strh.w	r9, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005eb2:	d103      	bne.n	8005ebc <HAL_UART_Transmit+0x4e>
 8005eb4:	6923      	ldr	r3, [r4, #16]
 8005eb6:	b90b      	cbnz	r3, 8005ebc <HAL_UART_Transmit+0x4e>
 8005eb8:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8005eba:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 8005ebc:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ec0:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8005ec4:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ec6:	463b      	mov	r3, r7
    while (huart->TxXferCount > 0U)
 8005ec8:	b94a      	cbnz	r2, 8005ede <HAL_UART_Transmit+0x70>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005eca:	2140      	movs	r1, #64	; 0x40
 8005ecc:	4620      	mov	r0, r4
 8005ece:	f7ff ff9f 	bl	8005e10 <UART_WaitOnFlagUntilTimeout>
 8005ed2:	b950      	cbnz	r0, 8005eea <HAL_UART_Transmit+0x7c>
    huart->gState = HAL_UART_STATE_READY;
 8005ed4:	2320      	movs	r3, #32
 8005ed6:	6763      	str	r3, [r4, #116]	; 0x74
    __HAL_UNLOCK(huart);
 8005ed8:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    return HAL_OK;
 8005edc:	e006      	b.n	8005eec <HAL_UART_Transmit+0x7e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ede:	2200      	movs	r2, #0
 8005ee0:	2180      	movs	r1, #128	; 0x80
 8005ee2:	4620      	mov	r0, r4
 8005ee4:	f7ff ff94 	bl	8005e10 <UART_WaitOnFlagUntilTimeout>
 8005ee8:	b118      	cbz	r0, 8005ef2 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 8005eea:	2003      	movs	r0, #3
}
 8005eec:	b003      	add	sp, #12
 8005eee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005ef2:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8005ef4:	b95e      	cbnz	r6, 8005f0e <HAL_UART_Transmit+0xa0>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ef6:	f835 3b02 	ldrh.w	r3, [r5], #2
 8005efa:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005efe:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8005f00:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8005f04:	3b01      	subs	r3, #1
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8005f0c:	e7d6      	b.n	8005ebc <HAL_UART_Transmit+0x4e>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f0e:	f816 3b01 	ldrb.w	r3, [r6], #1
 8005f12:	e7f4      	b.n	8005efe <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8005f14:	2001      	movs	r0, #1
 8005f16:	e7e9      	b.n	8005eec <HAL_UART_Transmit+0x7e>
    return HAL_BUSY;
 8005f18:	2002      	movs	r0, #2
 8005f1a:	e7e7      	b.n	8005eec <HAL_UART_Transmit+0x7e>

08005f1c <UART_CheckIdleState>:
{
 8005f1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f1e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f20:	2600      	movs	r6, #0
 8005f22:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8005f24:	f7fc faea 	bl	80024fc <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f28:	6823      	ldr	r3, [r4, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8005f2e:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f30:	d415      	bmi.n	8005f5e <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f32:	6823      	ldr	r3, [r4, #0]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	075b      	lsls	r3, r3, #29
 8005f38:	d50a      	bpl.n	8005f50 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f3a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f3e:	9300      	str	r3, [sp, #0]
 8005f40:	2200      	movs	r2, #0
 8005f42:	462b      	mov	r3, r5
 8005f44:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f48:	4620      	mov	r0, r4
 8005f4a:	f7ff ff61 	bl	8005e10 <UART_WaitOnFlagUntilTimeout>
 8005f4e:	b990      	cbnz	r0, 8005f76 <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 8005f50:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8005f52:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8005f54:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 8005f56:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8005f5a:	67a3      	str	r3, [r4, #120]	; 0x78
  return HAL_OK;
 8005f5c:	e00c      	b.n	8005f78 <UART_CheckIdleState+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f5e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f62:	9300      	str	r3, [sp, #0]
 8005f64:	4632      	mov	r2, r6
 8005f66:	4603      	mov	r3, r0
 8005f68:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f6c:	4620      	mov	r0, r4
 8005f6e:	f7ff ff4f 	bl	8005e10 <UART_WaitOnFlagUntilTimeout>
 8005f72:	2800      	cmp	r0, #0
 8005f74:	d0dd      	beq.n	8005f32 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8005f76:	2003      	movs	r0, #3
}
 8005f78:	b002      	add	sp, #8
 8005f7a:	bd70      	pop	{r4, r5, r6, pc}

08005f7c <HAL_UART_Init>:
{
 8005f7c:	b510      	push	{r4, lr}
  if (huart == NULL)
 8005f7e:	4604      	mov	r4, r0
 8005f80:	b340      	cbz	r0, 8005fd4 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8005f82:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8005f84:	b91b      	cbnz	r3, 8005f8e <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8005f86:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8005f8a:	f7fc f85f 	bl	800204c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8005f8e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005f90:	2324      	movs	r3, #36	; 0x24
 8005f92:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8005f94:	6813      	ldr	r3, [r2, #0]
 8005f96:	f023 0301 	bic.w	r3, r3, #1
 8005f9a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f9c:	4620      	mov	r0, r4
 8005f9e:	f7ff fd4b 	bl	8005a38 <UART_SetConfig>
 8005fa2:	2801      	cmp	r0, #1
 8005fa4:	d016      	beq.n	8005fd4 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005fa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005fa8:	b113      	cbz	r3, 8005fb0 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8005faa:	4620      	mov	r0, r4
 8005fac:	f7ff fedc 	bl	8005d68 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fb0:	6823      	ldr	r3, [r4, #0]
 8005fb2:	685a      	ldr	r2, [r3, #4]
 8005fb4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005fb8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fba:	689a      	ldr	r2, [r3, #8]
 8005fbc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005fc0:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8005fc8:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8005fca:	601a      	str	r2, [r3, #0]
}
 8005fcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8005fd0:	f7ff bfa4 	b.w	8005f1c <UART_CheckIdleState>
}
 8005fd4:	2001      	movs	r0, #1
 8005fd6:	bd10      	pop	{r4, pc}

08005fd8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005fd8:	4b0a      	ldr	r3, [pc, #40]	; (8006004 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005fda:	3b01      	subs	r3, #1
 8005fdc:	d101      	bne.n	8005fe2 <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 8005fde:	2003      	movs	r0, #3
 8005fe0:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005fe2:	6902      	ldr	r2, [r0, #16]
 8005fe4:	2a00      	cmp	r2, #0
 8005fe6:	daf8      	bge.n	8005fda <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005fe8:	6903      	ldr	r3, [r0, #16]
 8005fea:	4a06      	ldr	r2, [pc, #24]	; (8006004 <USB_CoreReset+0x2c>)
 8005fec:	f043 0301 	orr.w	r3, r3, #1
 8005ff0:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8005ff2:	3a01      	subs	r2, #1
 8005ff4:	d0f3      	beq.n	8005fde <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005ff6:	6903      	ldr	r3, [r0, #16]
 8005ff8:	f013 0301 	ands.w	r3, r3, #1
 8005ffc:	d1f9      	bne.n	8005ff2 <USB_CoreReset+0x1a>

  return HAL_OK;
 8005ffe:	4618      	mov	r0, r3
}
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	00030d41 	.word	0x00030d41

08006008 <USB_CoreInit>:
{
 8006008:	b084      	sub	sp, #16
 800600a:	b538      	push	{r3, r4, r5, lr}
 800600c:	ad05      	add	r5, sp, #20
 800600e:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006012:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006014:	2b01      	cmp	r3, #1
{
 8006016:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006018:	d119      	bne.n	800604e <USB_CoreInit+0x46>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800601a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800601c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006020:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006022:	68c3      	ldr	r3, [r0, #12]
 8006024:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006028:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800602c:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800602e:	68c3      	ldr	r3, [r0, #12]
 8006030:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006034:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8006036:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006038:	2b01      	cmp	r3, #1
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800603a:	bf02      	ittt	eq
 800603c:	68c3      	ldreq	r3, [r0, #12]
 800603e:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 8006042:	60c3      	streq	r3, [r0, #12]
}
 8006044:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006048:	b004      	add	sp, #16
    ret = USB_CoreReset(USBx);
 800604a:	f7ff bfc5 	b.w	8005fd8 <USB_CoreReset>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800604e:	68c3      	ldr	r3, [r0, #12]
 8006050:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006054:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8006056:	f7ff ffbf 	bl	8005fd8 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 800605a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800605c:	b93b      	cbnz	r3, 800606e <USB_CoreInit+0x66>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800605e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006064:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8006066:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800606a:	b004      	add	sp, #16
 800606c:	4770      	bx	lr
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800606e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006070:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006074:	e7f6      	b.n	8006064 <USB_CoreInit+0x5c>
	...

08006078 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8006078:	2a02      	cmp	r2, #2
 800607a:	d158      	bne.n	800612e <USB_SetTurnaroundTime+0xb6>
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800607c:	4b2e      	ldr	r3, [pc, #184]	; (8006138 <USB_SetTurnaroundTime+0xc0>)
 800607e:	4a2f      	ldr	r2, [pc, #188]	; (800613c <USB_SetTurnaroundTime+0xc4>)
 8006080:	440b      	add	r3, r1
 8006082:	4293      	cmp	r3, r2
 8006084:	d947      	bls.n	8006116 <USB_SetTurnaroundTime+0x9e>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006086:	4b2e      	ldr	r3, [pc, #184]	; (8006140 <USB_SetTurnaroundTime+0xc8>)
 8006088:	4a2e      	ldr	r2, [pc, #184]	; (8006144 <USB_SetTurnaroundTime+0xcc>)
 800608a:	440b      	add	r3, r1
 800608c:	4293      	cmp	r3, r2
 800608e:	d944      	bls.n	800611a <USB_SetTurnaroundTime+0xa2>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006090:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 8006094:	4a2c      	ldr	r2, [pc, #176]	; (8006148 <USB_SetTurnaroundTime+0xd0>)
 8006096:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 800609a:	4293      	cmp	r3, r2
 800609c:	d93f      	bls.n	800611e <USB_SetTurnaroundTime+0xa6>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800609e:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 80060a2:	f502 32c3 	add.w	r2, r2, #99840	; 0x18600
 80060a6:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 80060aa:	32a0      	adds	r2, #160	; 0xa0
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d938      	bls.n	8006122 <USB_SetTurnaroundTime+0xaa>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80060b0:	4b26      	ldr	r3, [pc, #152]	; (800614c <USB_SetTurnaroundTime+0xd4>)
 80060b2:	4a27      	ldr	r2, [pc, #156]	; (8006150 <USB_SetTurnaroundTime+0xd8>)
 80060b4:	440b      	add	r3, r1
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d935      	bls.n	8006126 <USB_SetTurnaroundTime+0xae>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80060ba:	4b26      	ldr	r3, [pc, #152]	; (8006154 <USB_SetTurnaroundTime+0xdc>)
 80060bc:	f502 2292 	add.w	r2, r2, #299008	; 0x49000
 80060c0:	440b      	add	r3, r1
 80060c2:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d92f      	bls.n	800612a <USB_SetTurnaroundTime+0xb2>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80060ca:	4b23      	ldr	r3, [pc, #140]	; (8006158 <USB_SetTurnaroundTime+0xe0>)
 80060cc:	f502 22c3 	add.w	r2, r2, #399360	; 0x61800
 80060d0:	440b      	add	r3, r1
 80060d2:	f502 7220 	add.w	r2, r2, #640	; 0x280
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d929      	bls.n	800612e <USB_SetTurnaroundTime+0xb6>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80060da:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 80060de:	f502 12b7 	add.w	r2, r2, #1499136	; 0x16e000
 80060e2:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 80060e6:	f502 7258 	add.w	r2, r2, #864	; 0x360
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d921      	bls.n	8006132 <USB_SetTurnaroundTime+0xba>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80060ee:	4b1b      	ldr	r3, [pc, #108]	; (800615c <USB_SetTurnaroundTime+0xe4>)
      UsbTrd = 0x6U;
 80060f0:	f502 2212 	add.w	r2, r2, #598016	; 0x92000
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80060f4:	440b      	add	r3, r1
      UsbTrd = 0x6U;
 80060f6:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
 80060fa:	4293      	cmp	r3, r2
 80060fc:	bf94      	ite	ls
 80060fe:	2307      	movls	r3, #7
 8006100:	2306      	movhi	r3, #6
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006102:	68c2      	ldr	r2, [r0, #12]
 8006104:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8006108:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800610a:	68c2      	ldr	r2, [r0, #12]
 800610c:	ea42 2383 	orr.w	r3, r2, r3, lsl #10
 8006110:	60c3      	str	r3, [r0, #12]
}
 8006112:	2000      	movs	r0, #0
 8006114:	4770      	bx	lr
      UsbTrd = 0xFU;
 8006116:	230f      	movs	r3, #15
 8006118:	e7f3      	b.n	8006102 <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xEU;
 800611a:	230e      	movs	r3, #14
 800611c:	e7f1      	b.n	8006102 <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xDU;
 800611e:	230d      	movs	r3, #13
 8006120:	e7ef      	b.n	8006102 <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xCU;
 8006122:	230c      	movs	r3, #12
 8006124:	e7ed      	b.n	8006102 <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xBU;
 8006126:	230b      	movs	r3, #11
 8006128:	e7eb      	b.n	8006102 <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xAU;
 800612a:	230a      	movs	r3, #10
 800612c:	e7e9      	b.n	8006102 <USB_SetTurnaroundTime+0x8a>
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800612e:	2309      	movs	r3, #9
 8006130:	e7e7      	b.n	8006102 <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0x8U;
 8006132:	2308      	movs	r3, #8
 8006134:	e7e5      	b.n	8006102 <USB_SetTurnaroundTime+0x8a>
 8006136:	bf00      	nop
 8006138:	ff275340 	.word	0xff275340
 800613c:	000c34ff 	.word	0x000c34ff
 8006140:	ff1b1e40 	.word	0xff1b1e40
 8006144:	000f423f 	.word	0x000f423f
 8006148:	00124f7f 	.word	0x00124f7f
 800614c:	fee5b660 	.word	0xfee5b660
 8006150:	0016e35f 	.word	0x0016e35f
 8006154:	feced300 	.word	0xfeced300
 8006158:	feb35bc0 	.word	0xfeb35bc0
 800615c:	fe5954e0 	.word	0xfe5954e0

08006160 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006160:	6883      	ldr	r3, [r0, #8]
 8006162:	f043 0301 	orr.w	r3, r3, #1
 8006166:	6083      	str	r3, [r0, #8]
}
 8006168:	2000      	movs	r0, #0
 800616a:	4770      	bx	lr

0800616c <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800616c:	6883      	ldr	r3, [r0, #8]
 800616e:	f023 0301 	bic.w	r3, r3, #1
 8006172:	6083      	str	r3, [r0, #8]
}
 8006174:	2000      	movs	r0, #0
 8006176:	4770      	bx	lr

08006178 <USB_SetCurrentMode>:
{
 8006178:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800617a:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800617c:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800617e:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006182:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8006184:	d108      	bne.n	8006198 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006186:	68c3      	ldr	r3, [r0, #12]
 8006188:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800618c:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 800618e:	2032      	movs	r0, #50	; 0x32
 8006190:	f7fc f9ba 	bl	8002508 <HAL_Delay>
  return HAL_OK;
 8006194:	2000      	movs	r0, #0
 8006196:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 8006198:	b919      	cbnz	r1, 80061a2 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800619a:	68c3      	ldr	r3, [r0, #12]
 800619c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061a0:	e7f4      	b.n	800618c <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 80061a2:	2001      	movs	r0, #1
}
 80061a4:	bd08      	pop	{r3, pc}
	...

080061a8 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80061a8:	0189      	lsls	r1, r1, #6
 80061aa:	f041 0120 	orr.w	r1, r1, #32
 80061ae:	4a06      	ldr	r2, [pc, #24]	; (80061c8 <USB_FlushTxFifo+0x20>)
 80061b0:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 80061b2:	3a01      	subs	r2, #1
 80061b4:	d005      	beq.n	80061c2 <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80061b6:	6903      	ldr	r3, [r0, #16]
 80061b8:	f013 0320 	ands.w	r3, r3, #32
 80061bc:	d1f9      	bne.n	80061b2 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 80061be:	4618      	mov	r0, r3
 80061c0:	4770      	bx	lr
      return HAL_TIMEOUT;
 80061c2:	2003      	movs	r0, #3
}
 80061c4:	4770      	bx	lr
 80061c6:	bf00      	nop
 80061c8:	00030d41 	.word	0x00030d41

080061cc <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80061cc:	2310      	movs	r3, #16
 80061ce:	4a06      	ldr	r2, [pc, #24]	; (80061e8 <USB_FlushRxFifo+0x1c>)
 80061d0:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 80061d2:	3a01      	subs	r2, #1
 80061d4:	d005      	beq.n	80061e2 <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80061d6:	6903      	ldr	r3, [r0, #16]
 80061d8:	f013 0310 	ands.w	r3, r3, #16
 80061dc:	d1f9      	bne.n	80061d2 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 80061de:	4618      	mov	r0, r3
 80061e0:	4770      	bx	lr
      return HAL_TIMEOUT;
 80061e2:	2003      	movs	r0, #3
}
 80061e4:	4770      	bx	lr
 80061e6:	bf00      	nop
 80061e8:	00030d41 	.word	0x00030d41

080061ec <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 80061ec:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80061f0:	4319      	orrs	r1, r3
 80061f2:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 80061f6:	2000      	movs	r0, #0
 80061f8:	4770      	bx	lr
	...

080061fc <USB_DevInit>:
{
 80061fc:	b084      	sub	sp, #16
 80061fe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006202:	4604      	mov	r4, r0
 8006204:	a809      	add	r0, sp, #36	; 0x24
 8006206:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 800620a:	2300      	movs	r3, #0
 800620c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800620e:	460f      	mov	r7, r1
    USBx->DIEPTXF[i] = 0U;
 8006210:	4619      	mov	r1, r3
 8006212:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8006216:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 800621a:	3301      	adds	r3, #1
 800621c:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 800621e:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8006220:	d1f7      	bne.n	8006212 <USB_DevInit+0x16>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006222:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  if (cfg.vbus_sensing_enable == 0U)
 8006224:	2e00      	cmp	r6, #0
 8006226:	d162      	bne.n	80062ee <USB_DevInit+0xf2>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006228:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800622c:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800622e:	6823      	ldr	r3, [r4, #0]
 8006230:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006234:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006236:	6823      	ldr	r3, [r4, #0]
 8006238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800623c:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 800623e:	2300      	movs	r3, #0
 8006240:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006244:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8006248:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800624c:	2103      	movs	r1, #3
 800624e:	4620      	mov	r0, r4
 8006250:	f7ff ffcc 	bl	80061ec <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006254:	2110      	movs	r1, #16
 8006256:	4620      	mov	r0, r4
 8006258:	f7ff ffa6 	bl	80061a8 <USB_FlushTxFifo>
 800625c:	4601      	mov	r1, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800625e:	4620      	mov	r0, r4
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006260:	f504 6500 	add.w	r5, r4, #2048	; 0x800
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006264:	f7ff ffb2 	bl	80061cc <USB_FlushRxFifo>
 8006268:	2800      	cmp	r0, #0
 800626a:	d144      	bne.n	80062f6 <USB_DevInit+0xfa>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800626c:	1c08      	adds	r0, r1, #0
 800626e:	bf18      	it	ne
 8006270:	2001      	movne	r0, #1
  USBx_DEVICE->DIEPMSK = 0U;
 8006272:	2300      	movs	r3, #0
 8006274:	612b      	str	r3, [r5, #16]
 8006276:	f504 6210 	add.w	r2, r4, #2304	; 0x900
  USBx_DEVICE->DOEPMSK = 0U;
 800627a:	616b      	str	r3, [r5, #20]
      USBx_INEP(i)->DIEPCTL = 0U;
 800627c:	4619      	mov	r1, r3
  USBx_DEVICE->DAINTMSK = 0U;
 800627e:	61eb      	str	r3, [r5, #28]
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006280:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006284:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006288:	f64f 387f 	movw	r8, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800628c:	42bb      	cmp	r3, r7
 800628e:	d134      	bne.n	80062fa <USB_DevInit+0xfe>
 8006290:	2100      	movs	r1, #0
 8006292:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006296:	460f      	mov	r7, r1
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006298:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800629c:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80062a0:	f64f 387f 	movw	r8, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062a4:	428b      	cmp	r3, r1
 80062a6:	d13b      	bne.n	8006320 <USB_DevInit+0x124>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80062a8:	692b      	ldr	r3, [r5, #16]
 80062aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062ae:	612b      	str	r3, [r5, #16]
  USBx->GINTMSK = 0U;
 80062b0:	2300      	movs	r3, #0
 80062b2:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80062b4:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 80062b8:	6163      	str	r3, [r4, #20]
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80062ba:	69a3      	ldr	r3, [r4, #24]
 80062bc:	f043 0310 	orr.w	r3, r3, #16
 80062c0:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80062c2:	69a2      	ldr	r2, [r4, #24]
 80062c4:	4b20      	ldr	r3, [pc, #128]	; (8006348 <USB_DevInit+0x14c>)
 80062c6:	4313      	orrs	r3, r2
 80062c8:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 80062ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80062cc:	b11b      	cbz	r3, 80062d6 <USB_DevInit+0xda>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80062ce:	69a3      	ldr	r3, [r4, #24]
 80062d0:	f043 0308 	orr.w	r3, r3, #8
 80062d4:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 80062d6:	2e01      	cmp	r6, #1
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80062d8:	bf01      	itttt	eq
 80062da:	69a3      	ldreq	r3, [r4, #24]
 80062dc:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 80062e0:	f043 0304 	orreq.w	r3, r3, #4
 80062e4:	61a3      	streq	r3, [r4, #24]
}
 80062e6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062ea:	b004      	add	sp, #16
 80062ec:	4770      	bx	lr
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80062ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80062f2:	63a3      	str	r3, [r4, #56]	; 0x38
 80062f4:	e7a3      	b.n	800623e <USB_DevInit+0x42>
 80062f6:	2001      	movs	r0, #1
 80062f8:	e7bb      	b.n	8006272 <USB_DevInit+0x76>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80062fa:	f8d2 9000 	ldr.w	r9, [r2]
 80062fe:	f1b9 0f00 	cmp.w	r9, #0
 8006302:	da0b      	bge.n	800631c <USB_DevInit+0x120>
      if (i == 0U)
 8006304:	b93b      	cbnz	r3, 8006316 <USB_DevInit+0x11a>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006306:	f8c2 c000 	str.w	ip, [r2]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800630a:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800630c:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800630e:	f8c2 8008 	str.w	r8, [r2, #8]
 8006312:	3220      	adds	r2, #32
 8006314:	e7ba      	b.n	800628c <USB_DevInit+0x90>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006316:	f8c2 e000 	str.w	lr, [r2]
 800631a:	e7f6      	b.n	800630a <USB_DevInit+0x10e>
      USBx_INEP(i)->DIEPCTL = 0U;
 800631c:	6011      	str	r1, [r2, #0]
 800631e:	e7f4      	b.n	800630a <USB_DevInit+0x10e>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006320:	f8d2 9000 	ldr.w	r9, [r2]
 8006324:	f1b9 0f00 	cmp.w	r9, #0
 8006328:	da0b      	bge.n	8006342 <USB_DevInit+0x146>
      if (i == 0U)
 800632a:	b939      	cbnz	r1, 800633c <USB_DevInit+0x140>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800632c:	f8c2 c000 	str.w	ip, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006330:	6117      	str	r7, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006332:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006334:	f8c2 8008 	str.w	r8, [r2, #8]
 8006338:	3220      	adds	r2, #32
 800633a:	e7b3      	b.n	80062a4 <USB_DevInit+0xa8>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800633c:	f8c2 e000 	str.w	lr, [r2]
 8006340:	e7f6      	b.n	8006330 <USB_DevInit+0x134>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006342:	6017      	str	r7, [r2, #0]
 8006344:	e7f4      	b.n	8006330 <USB_DevInit+0x134>
 8006346:	bf00      	nop
 8006348:	803c3800 	.word	0x803c3800

0800634c <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800634c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006350:	f013 0f02 	tst.w	r3, #2
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006354:	f500 6000 	add.w	r0, r0, #2048	; 0x800
}
 8006358:	bf14      	ite	ne
 800635a:	2002      	movne	r0, #2
 800635c:	200f      	moveq	r0, #15
 800635e:	4770      	bx	lr

08006360 <USB_ActivateEndpoint>:
{
 8006360:	b570      	push	{r4, r5, r6, lr}
  if (ep->is_in == 1U)
 8006362:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8006364:	780c      	ldrb	r4, [r1, #0]
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006366:	f8d0 681c 	ldr.w	r6, [r0, #2076]	; 0x81c
 800636a:	f500 6300 	add.w	r3, r0, #2048	; 0x800
  if (ep->is_in == 1U)
 800636e:	2a01      	cmp	r2, #1
 8006370:	f004 050f 	and.w	r5, r4, #15
 8006374:	d11b      	bne.n	80063ae <USB_ActivateEndpoint+0x4e>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006376:	40aa      	lsls	r2, r5
 8006378:	4332      	orrs	r2, r6
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800637a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800637e:	61da      	str	r2, [r3, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006380:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8006384:	041a      	lsls	r2, r3, #16
 8006386:	d410      	bmi.n	80063aa <USB_ActivateEndpoint+0x4a>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006388:	688b      	ldr	r3, [r1, #8]
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800638a:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800638c:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8006390:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006398:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800639c:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 80063a0:	ea43 5384 	orr.w	r3, r3, r4, lsl #22
 80063a4:	4313      	orrs	r3, r2
 80063a6:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 80063aa:	2000      	movs	r0, #0
 80063ac:	bd70      	pop	{r4, r5, r6, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80063ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80063b2:	40aa      	lsls	r2, r5
 80063b4:	4332      	orrs	r2, r6
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80063b6:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80063ba:	61da      	str	r2, [r3, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80063bc:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80063c0:	041b      	lsls	r3, r3, #16
 80063c2:	d4f2      	bmi.n	80063aa <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80063c4:	688b      	ldr	r3, [r1, #8]
                                    ((uint32_t)ep->type << 18) |
 80063c6:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80063c8:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 80063cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80063d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063d8:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 80063dc:	4313      	orrs	r3, r2
 80063de:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 80063e2:	e7e2      	b.n	80063aa <USB_ActivateEndpoint+0x4a>

080063e4 <USB_DeactivateEndpoint>:
{
 80063e4:	b530      	push	{r4, r5, lr}
  if (ep->is_in == 1U)
 80063e6:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80063e8:	780c      	ldrb	r4, [r1, #0]
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80063ea:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 80063ee:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  if (ep->is_in == 1U)
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	f004 050f 	and.w	r5, r4, #15
 80063f8:	d110      	bne.n	800641c <USB_DeactivateEndpoint+0x38>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80063fa:	40ab      	lsls	r3, r5
 80063fc:	43db      	mvns	r3, r3
 80063fe:	4019      	ands	r1, r3
 8006400:	63d1      	str	r1, [r2, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006402:	69d1      	ldr	r1, [r2, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006404:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006408:	400b      	ands	r3, r1
 800640a:	61d3      	str	r3, [r2, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800640c:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8006410:	4b0b      	ldr	r3, [pc, #44]	; (8006440 <USB_DeactivateEndpoint+0x5c>)
 8006412:	4013      	ands	r3, r2
 8006414:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8006418:	2000      	movs	r0, #0
 800641a:	bd30      	pop	{r4, r5, pc}
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800641c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006420:	40ab      	lsls	r3, r5
 8006422:	43db      	mvns	r3, r3
 8006424:	4019      	ands	r1, r3
 8006426:	63d1      	str	r1, [r2, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006428:	69d1      	ldr	r1, [r2, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800642a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800642e:	400b      	ands	r3, r1
 8006430:	61d3      	str	r3, [r2, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006432:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8006436:	4b03      	ldr	r3, [pc, #12]	; (8006444 <USB_DeactivateEndpoint+0x60>)
 8006438:	4013      	ands	r3, r2
 800643a:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800643e:	e7eb      	b.n	8006418 <USB_DeactivateEndpoint+0x34>
 8006440:	ec337800 	.word	0xec337800
 8006444:	eff37800 	.word	0xeff37800

08006448 <USB_EP0StartXfer>:
{
 8006448:	b570      	push	{r4, r5, r6, lr}
  if (ep->is_in == 1U)
 800644a:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800644c:	780a      	ldrb	r2, [r1, #0]
 800644e:	694d      	ldr	r5, [r1, #20]
 8006450:	4e35      	ldr	r6, [pc, #212]	; (8006528 <USB_EP0StartXfer+0xe0>)
  if (ep->is_in == 1U)
 8006452:	2b01      	cmp	r3, #1
 8006454:	f04f 0320 	mov.w	r3, #32
 8006458:	d145      	bne.n	80064e6 <USB_EP0StartXfer+0x9e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800645a:	fb13 0302 	smlabb	r3, r3, r2, r0
    if (ep->xfer_len == 0U)
 800645e:	bb45      	cbnz	r5, 80064b2 <USB_EP0StartXfer+0x6a>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006460:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 8006464:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8006468:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 800646c:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006470:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 8006474:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8006478:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800647c:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 8006480:	4026      	ands	r6, r4
 8006482:	f8c3 6910 	str.w	r6, [r3, #2320]	; 0x910
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006486:	eb00 1242 	add.w	r2, r0, r2, lsl #5
    if (ep->xfer_len > 0U)
 800648a:	694b      	ldr	r3, [r1, #20]
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800648c:	f8d2 4900 	ldr.w	r4, [r2, #2304]	; 0x900
 8006490:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8006494:	f8c2 4900 	str.w	r4, [r2, #2304]	; 0x900
    if (ep->xfer_len > 0U)
 8006498:	b14b      	cbz	r3, 80064ae <USB_EP0StartXfer+0x66>
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800649a:	780a      	ldrb	r2, [r1, #0]
 800649c:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 80064a0:	f002 010f 	and.w	r1, r2, #15
 80064a4:	2201      	movs	r2, #1
 80064a6:	408a      	lsls	r2, r1
 80064a8:	431a      	orrs	r2, r3
 80064aa:	f8c0 2834 	str.w	r2, [r0, #2100]	; 0x834
}
 80064ae:	2000      	movs	r0, #0
 80064b0:	bd70      	pop	{r4, r5, r6, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80064b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064b6:	691c      	ldr	r4, [r3, #16]
 80064b8:	4026      	ands	r6, r4
 80064ba:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80064bc:	691c      	ldr	r4, [r3, #16]
 80064be:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 80064c2:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 80064c6:	611c      	str	r4, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 80064c8:	688c      	ldr	r4, [r1, #8]
 80064ca:	42a5      	cmp	r5, r4
        ep->xfer_len = ep->maxpacket;
 80064cc:	bf88      	it	hi
 80064ce:	614c      	strhi	r4, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80064d0:	691c      	ldr	r4, [r3, #16]
 80064d2:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 80064d6:	611c      	str	r4, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80064d8:	694c      	ldr	r4, [r1, #20]
 80064da:	691d      	ldr	r5, [r3, #16]
 80064dc:	f3c4 0412 	ubfx	r4, r4, #0, #19
 80064e0:	432c      	orrs	r4, r5
 80064e2:	611c      	str	r4, [r3, #16]
 80064e4:	e7cf      	b.n	8006486 <USB_EP0StartXfer+0x3e>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80064e6:	fb13 0002 	smlabb	r0, r3, r2, r0
 80064ea:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 80064ee:	691a      	ldr	r2, [r3, #16]
 80064f0:	4032      	ands	r2, r6
 80064f2:	611a      	str	r2, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80064f4:	691a      	ldr	r2, [r3, #16]
 80064f6:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 80064fa:	f422 12c0 	bic.w	r2, r2, #1572864	; 0x180000
 80064fe:	611a      	str	r2, [r3, #16]
 8006500:	688a      	ldr	r2, [r1, #8]
    if (ep->xfer_len > 0U)
 8006502:	b105      	cbz	r5, 8006506 <USB_EP0StartXfer+0xbe>
      ep->xfer_len = ep->maxpacket;
 8006504:	614a      	str	r2, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006506:	6919      	ldr	r1, [r3, #16]
 8006508:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
 800650c:	6119      	str	r1, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800650e:	6919      	ldr	r1, [r3, #16]
 8006510:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8006514:	430a      	orrs	r2, r1
 8006516:	611a      	str	r2, [r3, #16]
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006518:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800651c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006520:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8006524:	e7c3      	b.n	80064ae <USB_EP0StartXfer+0x66>
 8006526:	bf00      	nop
 8006528:	fff80000 	.word	0xfff80000

0800652c <USB_WritePacket>:
  count32b = ((uint32_t)len + 3U) / 4U;
 800652c:	3303      	adds	r3, #3
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800652e:	eb00 3202 	add.w	r2, r0, r2, lsl #12
 8006532:	f023 0303 	bic.w	r3, r3, #3
 8006536:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800653a:	440b      	add	r3, r1
  for (i = 0U; i < count32b; i++)
 800653c:	4299      	cmp	r1, r3
 800653e:	d101      	bne.n	8006544 <USB_WritePacket+0x18>
}
 8006540:	2000      	movs	r0, #0
 8006542:	4770      	bx	lr
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006544:	f851 0b04 	ldr.w	r0, [r1], #4
 8006548:	6010      	str	r0, [r2, #0]
 800654a:	e7f7      	b.n	800653c <USB_WritePacket+0x10>

0800654c <USB_EPStartXfer>:
{
 800654c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 800654e:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8006550:	780d      	ldrb	r5, [r1, #0]
 8006552:	4e58      	ldr	r6, [pc, #352]	; (80066b4 <USB_EPStartXfer+0x168>)
  if (ep->is_in == 1U)
 8006554:	2b01      	cmp	r3, #1
 8006556:	f04f 0220 	mov.w	r2, #32
 800655a:	694b      	ldr	r3, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800655c:	fb12 0205 	smlabb	r2, r2, r5, r0
  if (ep->is_in == 1U)
 8006560:	d16a      	bne.n	8006638 <USB_EPStartXfer+0xec>
    if (ep->xfer_len == 0U)
 8006562:	bb3b      	cbnz	r3, 80065b4 <USB_EPStartXfer+0x68>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006564:	f502 6410 	add.w	r4, r2, #2304	; 0x900
 8006568:	f8d2 2910 	ldr.w	r2, [r2, #2320]	; 0x910
 800656c:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 8006570:	f422 12c0 	bic.w	r2, r2, #1572864	; 0x180000
 8006574:	6122      	str	r2, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006576:	6922      	ldr	r2, [r4, #16]
 8006578:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800657c:	6122      	str	r2, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800657e:	6922      	ldr	r2, [r4, #16]
 8006580:	4016      	ands	r6, r2
 8006582:	6126      	str	r6, [r4, #16]
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006584:	eb00 1245 	add.w	r2, r0, r5, lsl #5
 8006588:	f8d2 4900 	ldr.w	r4, [r2, #2304]	; 0x900
 800658c:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8006590:	f8c2 4900 	str.w	r4, [r2, #2304]	; 0x900
    if (ep->type != EP_TYPE_ISOC)
 8006594:	78cc      	ldrb	r4, [r1, #3]
 8006596:	2c01      	cmp	r4, #1
 8006598:	d03b      	beq.n	8006612 <USB_EPStartXfer+0xc6>
      if (ep->xfer_len > 0U)
 800659a:	b14b      	cbz	r3, 80065b0 <USB_EPStartXfer+0x64>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800659c:	780b      	ldrb	r3, [r1, #0]
 800659e:	f8d0 4834 	ldr.w	r4, [r0, #2100]	; 0x834
 80065a2:	f003 020f 	and.w	r2, r3, #15
 80065a6:	2301      	movs	r3, #1
 80065a8:	4093      	lsls	r3, r2
 80065aa:	4323      	orrs	r3, r4
 80065ac:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
}
 80065b0:	2000      	movs	r0, #0
 80065b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80065b4:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 80065b8:	4034      	ands	r4, r6
 80065ba:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80065be:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80065c2:	688e      	ldr	r6, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80065c4:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 80065c8:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 80065cc:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80065d0:	199c      	adds	r4, r3, r6
 80065d2:	3c01      	subs	r4, #1
 80065d4:	fbb4 f6f6 	udiv	r6, r4, r6
 80065d8:	4c37      	ldr	r4, [pc, #220]	; (80066b8 <USB_EPStartXfer+0x16c>)
 80065da:	f8d2 7910 	ldr.w	r7, [r2, #2320]	; 0x910
 80065de:	ea04 44c6 	and.w	r4, r4, r6, lsl #19
 80065e2:	433c      	orrs	r4, r7
 80065e4:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80065e8:	f8d2 6910 	ldr.w	r6, [r2, #2320]	; 0x910
 80065ec:	f3c3 0412 	ubfx	r4, r3, #0, #19
 80065f0:	4334      	orrs	r4, r6
 80065f2:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      if (ep->type == EP_TYPE_ISOC)
 80065f6:	78cc      	ldrb	r4, [r1, #3]
 80065f8:	2c01      	cmp	r4, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80065fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 80065fe:	d1c1      	bne.n	8006584 <USB_EPStartXfer+0x38>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006600:	6914      	ldr	r4, [r2, #16]
 8006602:	f024 44c0 	bic.w	r4, r4, #1610612736	; 0x60000000
 8006606:	6114      	str	r4, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006608:	6914      	ldr	r4, [r2, #16]
 800660a:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 800660e:	6114      	str	r4, [r2, #16]
 8006610:	e7b8      	b.n	8006584 <USB_EPStartXfer+0x38>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006612:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 8006616:	f414 7f80 	tst.w	r4, #256	; 0x100
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800661a:	f8d2 4900 	ldr.w	r4, [r2, #2304]	; 0x900
 800661e:	bf0c      	ite	eq
 8006620:	f044 5400 	orreq.w	r4, r4, #536870912	; 0x20000000
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006624:	f044 5480 	orrne.w	r4, r4, #268435456	; 0x10000000
 8006628:	f8c2 4900 	str.w	r4, [r2, #2304]	; 0x900
      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800662c:	780a      	ldrb	r2, [r1, #0]
 800662e:	68c9      	ldr	r1, [r1, #12]
 8006630:	b29b      	uxth	r3, r3
 8006632:	f7ff ff7b 	bl	800652c <USB_WritePacket>
 8006636:	e7bb      	b.n	80065b0 <USB_EPStartXfer+0x64>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006638:	f502 6530 	add.w	r5, r2, #2816	; 0xb00
 800663c:	692c      	ldr	r4, [r5, #16]
 800663e:	4034      	ands	r4, r6
 8006640:	612c      	str	r4, [r5, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006642:	692c      	ldr	r4, [r5, #16]
 8006644:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8006648:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 800664c:	612c      	str	r4, [r5, #16]
 800664e:	688c      	ldr	r4, [r1, #8]
    if (ep->xfer_len == 0U)
 8006650:	b9fb      	cbnz	r3, 8006692 <USB_EPStartXfer+0x146>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006652:	692b      	ldr	r3, [r5, #16]
 8006654:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8006658:	431c      	orrs	r4, r3
 800665a:	612c      	str	r4, [r5, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800665c:	692b      	ldr	r3, [r5, #16]
 800665e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006662:	612b      	str	r3, [r5, #16]
    if (ep->type == EP_TYPE_ISOC)
 8006664:	78cb      	ldrb	r3, [r1, #3]
 8006666:	2b01      	cmp	r3, #1
 8006668:	d10c      	bne.n	8006684 <USB_EPStartXfer+0x138>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800666a:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 800666e:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006672:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8006676:	bf0c      	ite	eq
 8006678:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800667c:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8006680:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006684:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8006688:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800668c:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
 8006690:	e78e      	b.n	80065b0 <USB_EPStartXfer+0x64>
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006692:	4e09      	ldr	r6, [pc, #36]	; (80066b8 <USB_EPStartXfer+0x16c>)
 8006694:	692f      	ldr	r7, [r5, #16]
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006696:	4423      	add	r3, r4
 8006698:	3b01      	subs	r3, #1
 800669a:	fbb3 f3f4 	udiv	r3, r3, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800669e:	ea06 46c3 	and.w	r6, r6, r3, lsl #19
 80066a2:	433e      	orrs	r6, r7
 80066a4:	612e      	str	r6, [r5, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	692e      	ldr	r6, [r5, #16]
 80066aa:	4363      	muls	r3, r4
 80066ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066b0:	4333      	orrs	r3, r6
 80066b2:	e7d6      	b.n	8006662 <USB_EPStartXfer+0x116>
 80066b4:	fff80000 	.word	0xfff80000
 80066b8:	1ff80000 	.word	0x1ff80000

080066bc <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80066bc:	3203      	adds	r2, #3
 80066be:	f022 0203 	bic.w	r2, r2, #3
 80066c2:	440a      	add	r2, r1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80066c4:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for (i = 0U; i < count32b; i++)
 80066c8:	4291      	cmp	r1, r2
 80066ca:	d101      	bne.n	80066d0 <USB_ReadPacket+0x14>
}
 80066cc:	4608      	mov	r0, r1
 80066ce:	4770      	bx	lr
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80066d0:	6803      	ldr	r3, [r0, #0]
 80066d2:	f841 3b04 	str.w	r3, [r1], #4
 80066d6:	e7f7      	b.n	80066c8 <USB_ReadPacket+0xc>

080066d8 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 80066d8:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80066da:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 80066dc:	2b01      	cmp	r3, #1
 80066de:	f04f 0320 	mov.w	r3, #32
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80066e2:	fb13 0002 	smlabb	r0, r3, r2, r0
  if (ep->is_in == 1U)
 80066e6:	d112      	bne.n	800670e <USB_EPSetStall+0x36>
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80066e8:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	db06      	blt.n	80066fe <USB_EPSetStall+0x26>
 80066f0:	b12a      	cbz	r2, 80066fe <USB_EPSetStall+0x26>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80066f2:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80066f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80066fa:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80066fe:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8006702:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006706:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800670a:	2000      	movs	r0, #0
 800670c:	4770      	bx	lr
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800670e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8006712:	2b00      	cmp	r3, #0
 8006714:	db06      	blt.n	8006724 <USB_EPSetStall+0x4c>
 8006716:	b12a      	cbz	r2, 8006724 <USB_EPSetStall+0x4c>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006718:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800671c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006720:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006724:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8006728:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800672c:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8006730:	e7eb      	b.n	800670a <USB_EPSetStall+0x32>

08006732 <USB_EPClearStall>:
  if (ep->is_in == 1U)
 8006732:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8006734:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8006736:	2b01      	cmp	r3, #1
 8006738:	f04f 0320 	mov.w	r3, #32
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800673c:	fb13 0002 	smlabb	r0, r3, r2, r0
  if (ep->is_in == 1U)
 8006740:	d111      	bne.n	8006766 <USB_EPClearStall+0x34>
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006742:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8006746:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800674a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800674e:	78cb      	ldrb	r3, [r1, #3]
 8006750:	3b02      	subs	r3, #2
 8006752:	2b01      	cmp	r3, #1
 8006754:	d805      	bhi.n	8006762 <USB_EPClearStall+0x30>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006756:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800675a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800675e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8006762:	2000      	movs	r0, #0
 8006764:	4770      	bx	lr
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006766:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800676a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800676e:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006772:	78cb      	ldrb	r3, [r1, #3]
 8006774:	3b02      	subs	r3, #2
 8006776:	2b01      	cmp	r3, #1
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006778:	bf9e      	ittt	ls
 800677a:	f8d0 3b00 	ldrls.w	r3, [r0, #2816]	; 0xb00
 800677e:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
 8006782:	f8c0 3b00 	strls.w	r3, [r0, #2816]	; 0xb00
 8006786:	e7ec      	b.n	8006762 <USB_EPClearStall+0x30>

08006788 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006788:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800678c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006790:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006794:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8006798:	0109      	lsls	r1, r1, #4
 800679a:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 800679e:	4319      	orrs	r1, r3
 80067a0:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 80067a4:	2000      	movs	r0, #0
 80067a6:	4770      	bx	lr

080067a8 <USB_DevConnect>:
{
 80067a8:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80067aa:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80067ae:	f023 0302 	bic.w	r3, r3, #2
 80067b2:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 80067b6:	2003      	movs	r0, #3
 80067b8:	f7fb fea6 	bl	8002508 <HAL_Delay>
}
 80067bc:	2000      	movs	r0, #0
 80067be:	bd08      	pop	{r3, pc}

080067c0 <USB_DevDisconnect>:
{
 80067c0:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80067c2:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80067c6:	f043 0302 	orr.w	r3, r3, #2
 80067ca:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 80067ce:	2003      	movs	r0, #3
 80067d0:	f7fb fe9a 	bl	8002508 <HAL_Delay>
}
 80067d4:	2000      	movs	r0, #0
 80067d6:	bd08      	pop	{r3, pc}

080067d8 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 80067d8:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 80067da:	6980      	ldr	r0, [r0, #24]
}
 80067dc:	4010      	ands	r0, r2
 80067de:	4770      	bx	lr

080067e0 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 80067e0:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 80067e4:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80067e8:	69c0      	ldr	r0, [r0, #28]
 80067ea:	4018      	ands	r0, r3
}
 80067ec:	0c00      	lsrs	r0, r0, #16
 80067ee:	4770      	bx	lr

080067f0 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 80067f0:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 80067f4:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80067f8:	69c0      	ldr	r0, [r0, #28]
 80067fa:	4018      	ands	r0, r3
}
 80067fc:	b280      	uxth	r0, r0
 80067fe:	4770      	bx	lr

08006800 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006800:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006804:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006808:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800680c:	6940      	ldr	r0, [r0, #20]
}
 800680e:	4010      	ands	r0, r2
 8006810:	4770      	bx	lr

08006812 <USB_ReadDevInEPInterrupt>:
{
 8006812:	b510      	push	{r4, lr}
  msk = USBx_DEVICE->DIEPMSK;
 8006814:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006818:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800681c:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006820:	f001 010f 	and.w	r1, r1, #15
 8006824:	40cb      	lsrs	r3, r1
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006826:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800682a:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800682c:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800682e:	b2db      	uxtb	r3, r3
 8006830:	4323      	orrs	r3, r4
}
 8006832:	4018      	ands	r0, r3
 8006834:	bd10      	pop	{r4, pc}

08006836 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8006836:	6940      	ldr	r0, [r0, #20]
}
 8006838:	f000 0001 	and.w	r0, r0, #1
 800683c:	4770      	bx	lr

0800683e <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800683e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8006842:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006846:	f023 0307 	bic.w	r3, r3, #7
 800684a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800684e:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8006852:	689a      	ldr	r2, [r3, #8]
 8006854:	f002 0206 	and.w	r2, r2, #6
 8006858:	2a04      	cmp	r2, #4
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800685a:	bf02      	ittt	eq
 800685c:	f8d0 2900 	ldreq.w	r2, [r0, #2304]	; 0x900
 8006860:	f042 0203 	orreq.w	r2, r2, #3
 8006864:	f8c0 2900 	streq.w	r2, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006868:	685a      	ldr	r2, [r3, #4]
 800686a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800686e:	605a      	str	r2, [r3, #4]
}
 8006870:	2000      	movs	r0, #0
 8006872:	4770      	bx	lr

08006874 <USB_EP0_OutStart>:
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006874:	6c02      	ldr	r2, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006876:	4b0f      	ldr	r3, [pc, #60]	; (80068b4 <USB_EP0_OutStart+0x40>)
 8006878:	429a      	cmp	r2, r3
 800687a:	d903      	bls.n	8006884 <USB_EP0_OutStart+0x10>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800687c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8006880:	2b00      	cmp	r3, #0
 8006882:	db14      	blt.n	80068ae <USB_EP0_OutStart+0x3a>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006884:	2300      	movs	r3, #0
 8006886:	f8c0 3b10 	str.w	r3, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800688a:	f8d0 3b10 	ldr.w	r3, [r0, #2832]	; 0xb10
 800688e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006892:	f8c0 3b10 	str.w	r3, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006896:	f8d0 3b10 	ldr.w	r3, [r0, #2832]	; 0xb10
 800689a:	f043 0318 	orr.w	r3, r3, #24
 800689e:	f8c0 3b10 	str.w	r3, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80068a2:	f8d0 3b10 	ldr.w	r3, [r0, #2832]	; 0xb10
 80068a6:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80068aa:	f8c0 3b10 	str.w	r3, [r0, #2832]	; 0xb10
}
 80068ae:	2000      	movs	r0, #0
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop
 80068b4:	4f54300a 	.word	0x4f54300a

080068b8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80068b8:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80068ba:	4903      	ldr	r1, [pc, #12]	; (80068c8 <MX_FATFS_Init+0x10>)
 80068bc:	4803      	ldr	r0, [pc, #12]	; (80068cc <MX_FATFS_Init+0x14>)
 80068be:	f001 f83b 	bl	8007938 <FATFS_LinkDriver>
 80068c2:	4b03      	ldr	r3, [pc, #12]	; (80068d0 <MX_FATFS_Init+0x18>)
 80068c4:	7018      	strb	r0, [r3, #0]
 80068c6:	bd08      	pop	{r3, pc}
 80068c8:	2000b5b8 	.word	0x2000b5b8
 80068cc:	20000028 	.word	0x20000028
 80068d0:	2000b5bc 	.word	0x2000b5bc

080068d4 <USER_status>:
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 80068d4:	4b02      	ldr	r3, [pc, #8]	; (80068e0 <USER_status+0xc>)
 80068d6:	2201      	movs	r2, #1
 80068d8:	701a      	strb	r2, [r3, #0]
    return Stat;
 80068da:	7818      	ldrb	r0, [r3, #0]
  /* USER CODE END STATUS */
}
 80068dc:	4770      	bx	lr
 80068de:	bf00      	nop
 80068e0:	20000024 	.word	0x20000024

080068e4 <USER_write>:
{ 
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
  /* USER CODE END WRITE */
}
 80068e4:	2000      	movs	r0, #0
 80068e6:	4770      	bx	lr

080068e8 <USER_ioctl>:
{
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
    return res;
  /* USER CODE END IOCTL */
}
 80068e8:	2001      	movs	r0, #1
 80068ea:	4770      	bx	lr

080068ec <USER_read>:
 80068ec:	2000      	movs	r0, #0
 80068ee:	4770      	bx	lr

080068f0 <USER_initialize>:
 80068f0:	4b02      	ldr	r3, [pc, #8]	; (80068fc <USER_initialize+0xc>)
 80068f2:	2201      	movs	r2, #1
 80068f4:	701a      	strb	r2, [r3, #0]
 80068f6:	7818      	ldrb	r0, [r3, #0]
 80068f8:	4770      	bx	lr
 80068fa:	bf00      	nop
 80068fc:	20000024 	.word	0x20000024

08006900 <USBD_MSC_GetHSCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_CfgHSDesc);
 8006900:	2320      	movs	r3, #32
 8006902:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_CfgHSDesc;
}
 8006904:	4800      	ldr	r0, [pc, #0]	; (8006908 <USBD_MSC_GetHSCfgDesc+0x8>)
 8006906:	4770      	bx	lr
 8006908:	20000094 	.word	0x20000094

0800690c <USBD_MSC_GetFSCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_CfgFSDesc);
 800690c:	2320      	movs	r3, #32
 800690e:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_CfgFSDesc;
}
 8006910:	4800      	ldr	r0, [pc, #0]	; (8006914 <USBD_MSC_GetFSCfgDesc+0x8>)
 8006912:	4770      	bx	lr
 8006914:	20000074 	.word	0x20000074

08006918 <USBD_MSC_GetOtherSpeedCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_OtherSpeedCfgDesc);
 8006918:	2320      	movs	r3, #32
 800691a:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_OtherSpeedCfgDesc;
}
 800691c:	4800      	ldr	r0, [pc, #0]	; (8006920 <USBD_MSC_GetOtherSpeedCfgDesc+0x8>)
 800691e:	4770      	bx	lr
 8006920:	200000c0 	.word	0x200000c0

08006924 <USBD_MSC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_MSC_DeviceQualifierDesc);
 8006924:	230a      	movs	r3, #10
 8006926:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_DeviceQualifierDesc;
}
 8006928:	4800      	ldr	r0, [pc, #0]	; (800692c <USBD_MSC_GetDeviceQualifierDescriptor+0x8>)
 800692a:	4770      	bx	lr
 800692c:	200000b4 	.word	0x200000b4

08006930 <USBD_MSC_Init>:
{
 8006930:	b538      	push	{r3, r4, r5, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006932:	7c03      	ldrb	r3, [r0, #16]
{
 8006934:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006936:	b9e3      	cbnz	r3, 8006972 <USBD_MSC_Init+0x42>
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8006938:	f44f 7300 	mov.w	r3, #512	; 0x200
 800693c:	2202      	movs	r2, #2
 800693e:	2101      	movs	r1, #1
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006940:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8006942:	f007 fbe3 	bl	800e10c <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006946:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800694a:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800694e:	2202      	movs	r2, #2
 8006950:	2181      	movs	r1, #129	; 0x81
 8006952:	4620      	mov	r0, r4
 8006954:	f007 fbda 	bl	800e10c <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8006958:	62e5      	str	r5, [r4, #44]	; 0x2c
  pdev->pClassData = USBD_malloc(sizeof (USBD_MSC_BOT_HandleTypeDef));
 800695a:	f44f 701b 	mov.w	r0, #620	; 0x26c
 800695e:	f007 fc91 	bl	800e284 <USBD_static_malloc>
 8006962:	f8c4 0290 	str.w	r0, [r4, #656]	; 0x290
  if(pdev->pClassData == NULL)
 8006966:	b170      	cbz	r0, 8006986 <USBD_MSC_Init+0x56>
  MSC_BOT_Init(pdev);
 8006968:	4620      	mov	r0, r4
 800696a:	f000 f8ea 	bl	8006b42 <MSC_BOT_Init>
  return USBD_OK;
 800696e:	2000      	movs	r0, #0
 8006970:	bd38      	pop	{r3, r4, r5, pc}
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8006972:	2340      	movs	r3, #64	; 0x40
 8006974:	2202      	movs	r2, #2
 8006976:	2101      	movs	r1, #1
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006978:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800697a:	f007 fbc7 	bl	800e10c <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800697e:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8006982:	2340      	movs	r3, #64	; 0x40
 8006984:	e7e3      	b.n	800694e <USBD_MSC_Init+0x1e>
    return USBD_FAIL;
 8006986:	2002      	movs	r0, #2
}
 8006988:	bd38      	pop	{r3, r4, r5, pc}

0800698a <USBD_MSC_DeInit>:
{
 800698a:	b538      	push	{r3, r4, r5, lr}
 800698c:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 800698e:	2101      	movs	r1, #1
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 8006990:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 8006992:	f007 fbcb 	bl	800e12c <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 8006996:	2181      	movs	r1, #129	; 0x81
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 8006998:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 800699c:	4620      	mov	r0, r4
 800699e:	f007 fbc5 	bl	800e12c <USBD_LL_CloseEP>
  MSC_BOT_DeInit(pdev);
 80069a2:	4620      	mov	r0, r4
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 80069a4:	62e5      	str	r5, [r4, #44]	; 0x2c
  MSC_BOT_DeInit(pdev);
 80069a6:	f000 f8f7 	bl	8006b98 <MSC_BOT_DeInit>
  if(pdev->pClassData != NULL)
 80069aa:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
 80069ae:	b118      	cbz	r0, 80069b8 <USBD_MSC_DeInit+0x2e>
    USBD_free(pdev->pClassData);
 80069b0:	f007 fc6c 	bl	800e28c <USBD_static_free>
    pdev->pClassData  = NULL;
 80069b4:	f8c4 5290 	str.w	r5, [r4, #656]	; 0x290
}
 80069b8:	2000      	movs	r0, #0
 80069ba:	bd38      	pop	{r3, r4, r5, pc}

080069bc <USBD_MSC_Setup>:
{
 80069bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint16_t status_info = 0U;
 80069c0:	2300      	movs	r3, #0
 80069c2:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069c6:	780b      	ldrb	r3, [r1, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 80069c8:	f8d0 7290 	ldr.w	r7, [r0, #656]	; 0x290
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069cc:	f013 0260 	ands.w	r2, r3, #96	; 0x60
{
 80069d0:	4604      	mov	r4, r0
 80069d2:	460e      	mov	r6, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069d4:	d02d      	beq.n	8006a32 <USBD_MSC_Setup+0x76>
 80069d6:	2a20      	cmp	r2, #32
 80069d8:	d104      	bne.n	80069e4 <USBD_MSC_Setup+0x28>
    switch (req->bRequest)
 80069da:	784a      	ldrb	r2, [r1, #1]
 80069dc:	2afe      	cmp	r2, #254	; 0xfe
 80069de:	d005      	beq.n	80069ec <USBD_MSC_Setup+0x30>
 80069e0:	2aff      	cmp	r2, #255	; 0xff
 80069e2:	d018      	beq.n	8006a16 <USBD_MSC_Setup+0x5a>
    USBD_CtlError (pdev, req);
 80069e4:	f000 ff2b 	bl	800783e <USBD_CtlError>
    ret = USBD_FAIL;
 80069e8:	2002      	movs	r0, #2
    break;
 80069ea:	e01f      	b.n	8006a2c <USBD_MSC_Setup+0x70>
      if((req->wValue  == 0U) && (req->wLength == 1U) &&
 80069ec:	884d      	ldrh	r5, [r1, #2]
 80069ee:	2d00      	cmp	r5, #0
 80069f0:	d175      	bne.n	8006ade <USBD_MSC_Setup+0x122>
 80069f2:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 80069f6:	f1b8 0f01 	cmp.w	r8, #1
 80069fa:	d170      	bne.n	8006ade <USBD_MSC_Setup+0x122>
 80069fc:	061a      	lsls	r2, r3, #24
 80069fe:	d56e      	bpl.n	8006ade <USBD_MSC_Setup+0x122>
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8006a00:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8006a04:	699b      	ldr	r3, [r3, #24]
 8006a06:	4798      	blx	r3
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hmsc->max_lun, 1U);
 8006a08:	4642      	mov	r2, r8
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8006a0a:	6038      	str	r0, [r7, #0]
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hmsc->max_lun, 1U);
 8006a0c:	4639      	mov	r1, r7
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hmsc->interface, 1U);
 8006a0e:	4620      	mov	r0, r4
 8006a10:	f000 ff3c 	bl	800788c <USBD_CtlSendData>
 8006a14:	e009      	b.n	8006a2a <USBD_MSC_Setup+0x6e>
      if((req->wValue  == 0U) && (req->wLength == 0U) &&
 8006a16:	884a      	ldrh	r2, [r1, #2]
 8006a18:	2a00      	cmp	r2, #0
 8006a1a:	d160      	bne.n	8006ade <USBD_MSC_Setup+0x122>
 8006a1c:	88cd      	ldrh	r5, [r1, #6]
 8006a1e:	2d00      	cmp	r5, #0
 8006a20:	d15d      	bne.n	8006ade <USBD_MSC_Setup+0x122>
 8006a22:	061b      	lsls	r3, r3, #24
 8006a24:	d45b      	bmi.n	8006ade <USBD_MSC_Setup+0x122>
        MSC_BOT_Reset(pdev);
 8006a26:	f000 f8ac 	bl	8006b82 <MSC_BOT_Reset>
  uint8_t ret = USBD_OK;
 8006a2a:	2000      	movs	r0, #0
}
 8006a2c:	b002      	add	sp, #8
 8006a2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (req->bRequest)
 8006a32:	784b      	ldrb	r3, [r1, #1]
 8006a34:	2b0b      	cmp	r3, #11
 8006a36:	d852      	bhi.n	8006ade <USBD_MSC_Setup+0x122>
 8006a38:	e8df f003 	tbb	[pc, r3]
 8006a3c:	51511c06 	.word	0x51511c06
 8006a40:	51515151 	.word	0x51515151
 8006a44:	150e5151 	.word	0x150e5151
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a48:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8006a4c:	2b03      	cmp	r3, #3
 8006a4e:	d146      	bne.n	8006ade <USBD_MSC_Setup+0x122>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8006a50:	2202      	movs	r2, #2
 8006a52:	f10d 0106 	add.w	r1, sp, #6
 8006a56:	e7da      	b.n	8006a0e <USBD_MSC_Setup+0x52>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a58:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8006a5c:	2b03      	cmp	r3, #3
 8006a5e:	d13e      	bne.n	8006ade <USBD_MSC_Setup+0x122>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hmsc->interface, 1U);
 8006a60:	2201      	movs	r2, #1
 8006a62:	1d39      	adds	r1, r7, #4
 8006a64:	e7d3      	b.n	8006a0e <USBD_MSC_Setup+0x52>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a66:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8006a6a:	2b03      	cmp	r3, #3
 8006a6c:	d137      	bne.n	8006ade <USBD_MSC_Setup+0x122>
        hmsc->interface = (uint8_t)(req->wValue);
 8006a6e:	788b      	ldrb	r3, [r1, #2]
 8006a70:	607b      	str	r3, [r7, #4]
 8006a72:	e7da      	b.n	8006a2a <USBD_MSC_Setup+0x6e>
      USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8006a74:	7909      	ldrb	r1, [r1, #4]
 8006a76:	f007 fb67 	bl	800e148 <USBD_LL_FlushEP>
      USBD_LL_CloseEP (pdev , (uint8_t)req->wIndex);
 8006a7a:	7931      	ldrb	r1, [r6, #4]
 8006a7c:	4620      	mov	r0, r4
 8006a7e:	f007 fb55 	bl	800e12c <USBD_LL_CloseEP>
      if((((uint8_t)req->wIndex) & 0x80U) == 0x80U)
 8006a82:	88b3      	ldrh	r3, [r6, #4]
 8006a84:	7c22      	ldrb	r2, [r4, #16]
 8006a86:	2114      	movs	r1, #20
 8006a88:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006a8c:	f003 030f 	and.w	r3, r3, #15
        pdev->ep_in[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8006a90:	fb01 4303 	mla	r3, r1, r3, r4
 8006a94:	f04f 0100 	mov.w	r1, #0
      if((((uint8_t)req->wIndex) & 0x80U) == 0x80U)
 8006a98:	d011      	beq.n	8006abe <USBD_MSC_Setup+0x102>
        pdev->ep_in[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8006a9a:	6199      	str	r1, [r3, #24]
        if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006a9c:	b96a      	cbnz	r2, 8006aba <USBD_MSC_Setup+0xfe>
          USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8006a9e:	f44f 7300 	mov.w	r3, #512	; 0x200
          USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8006aa2:	2202      	movs	r2, #2
 8006aa4:	2181      	movs	r1, #129	; 0x81
 8006aa6:	4620      	mov	r0, r4
 8006aa8:	f007 fb30 	bl	800e10c <USBD_LL_OpenEP>
        pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8006aac:	2301      	movs	r3, #1
 8006aae:	62e3      	str	r3, [r4, #44]	; 0x2c
      MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8006ab0:	7931      	ldrb	r1, [r6, #4]
 8006ab2:	4620      	mov	r0, r4
 8006ab4:	f000 f91a 	bl	8006cec <MSC_BOT_CplClrFeature>
 8006ab8:	e7b7      	b.n	8006a2a <USBD_MSC_Setup+0x6e>
          USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8006aba:	2340      	movs	r3, #64	; 0x40
 8006abc:	e7f1      	b.n	8006aa2 <USBD_MSC_Setup+0xe6>
        pdev->ep_out[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8006abe:	f8c3 1144 	str.w	r1, [r3, #324]	; 0x144
        if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006ac2:	b952      	cbnz	r2, 8006ada <USBD_MSC_Setup+0x11e>
          USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8006ac4:	f44f 7300 	mov.w	r3, #512	; 0x200
          USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8006ac8:	2202      	movs	r2, #2
 8006aca:	2101      	movs	r1, #1
 8006acc:	4620      	mov	r0, r4
 8006ace:	f007 fb1d 	bl	800e10c <USBD_LL_OpenEP>
        pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
 8006ad8:	e7ea      	b.n	8006ab0 <USBD_MSC_Setup+0xf4>
          USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8006ada:	2340      	movs	r3, #64	; 0x40
 8006adc:	e7f4      	b.n	8006ac8 <USBD_MSC_Setup+0x10c>
      USBD_CtlError (pdev, req);
 8006ade:	4631      	mov	r1, r6
 8006ae0:	4620      	mov	r0, r4
 8006ae2:	e77f      	b.n	80069e4 <USBD_MSC_Setup+0x28>

08006ae4 <USBD_MSC_DataIn>:
{
 8006ae4:	b508      	push	{r3, lr}
  MSC_BOT_DataIn(pdev , epnum);
 8006ae6:	f000 f879 	bl	8006bdc <MSC_BOT_DataIn>
}
 8006aea:	2000      	movs	r0, #0
 8006aec:	bd08      	pop	{r3, pc}

08006aee <USBD_MSC_DataOut>:
{
 8006aee:	b508      	push	{r3, lr}
  MSC_BOT_DataOut(pdev , epnum);
 8006af0:	f000 f890 	bl	8006c14 <MSC_BOT_DataOut>
}
 8006af4:	2000      	movs	r0, #0
 8006af6:	bd08      	pop	{r3, pc}

08006af8 <USBD_MSC_RegisterStorage>:
* @retval status
*/
uint8_t  USBD_MSC_RegisterStorage  (USBD_HandleTypeDef   *pdev,
                                    USBD_StorageTypeDef *fops)
{
  if(fops != NULL)
 8006af8:	b109      	cbz	r1, 8006afe <USBD_MSC_RegisterStorage+0x6>
  {
    pdev->pUserData = fops;
 8006afa:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  }
  return USBD_OK;
}
 8006afe:	2000      	movs	r0, #0
 8006b00:	4770      	bx	lr

08006b02 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort (USBD_HandleTypeDef  *pdev)
{
 8006b02:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006b04:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290

  if ((hmsc->cbw.bmFlags == 0U) &&
 8006b08:	f894 3218 	ldrb.w	r3, [r4, #536]	; 0x218
{
 8006b0c:	4605      	mov	r5, r0
  if ((hmsc->cbw.bmFlags == 0U) &&
 8006b0e:	b93b      	cbnz	r3, 8006b20 <MSC_BOT_Abort+0x1e>
 8006b10:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8006b14:	b123      	cbz	r3, 8006b20 <MSC_BOT_Abort+0x1e>
      (hmsc->cbw.dDataLength != 0U) &&
 8006b16:	7a63      	ldrb	r3, [r4, #9]
 8006b18:	b913      	cbnz	r3, 8006b20 <MSC_BOT_Abort+0x1e>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR );
 8006b1a:	2101      	movs	r1, #1
 8006b1c:	f007 fb22 	bl	800e164 <USBD_LL_StallEP>
  }

  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8006b20:	2181      	movs	r1, #129	; 0x81
 8006b22:	4628      	mov	r0, r5
 8006b24:	f007 fb1e 	bl	800e164 <USBD_LL_StallEP>

  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8006b28:	7a63      	ldrb	r3, [r4, #9]
 8006b2a:	2b02      	cmp	r3, #2
 8006b2c:	d108      	bne.n	8006b40 <MSC_BOT_Abort+0x3e>
  {
    USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006b2e:	f504 7203 	add.w	r2, r4, #524	; 0x20c
 8006b32:	4628      	mov	r0, r5
 8006b34:	231f      	movs	r3, #31
 8006b36:	2101      	movs	r1, #1
                            USBD_BOT_CBW_LENGTH);
  }
}
 8006b38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006b3c:	f007 bb5e 	b.w	800e1fc <USBD_LL_PrepareReceive>
 8006b40:	bd70      	pop	{r4, r5, r6, pc}

08006b42 <MSC_BOT_Init>:
{
 8006b42:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006b44:	f8d0 5290 	ldr.w	r5, [r0, #656]	; 0x290
{
 8006b48:	4604      	mov	r4, r0
  hmsc->bot_state = USBD_BOT_IDLE;
 8006b4a:	2000      	movs	r0, #0
 8006b4c:	7228      	strb	r0, [r5, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8006b4e:	7268      	strb	r0, [r5, #9]
  hmsc->scsi_sense_tail = 0U;
 8006b50:	f885 025d 	strb.w	r0, [r5, #605]	; 0x25d
  hmsc->scsi_sense_head = 0U;
 8006b54:	f885 025c 	strb.w	r0, [r5, #604]	; 0x25c
  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8006b58:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4798      	blx	r3
  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8006b60:	2101      	movs	r1, #1
 8006b62:	4620      	mov	r0, r4
 8006b64:	f007 faf0 	bl	800e148 <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8006b68:	2181      	movs	r1, #129	; 0x81
 8006b6a:	4620      	mov	r0, r4
 8006b6c:	f007 faec 	bl	800e148 <USBD_LL_FlushEP>
  USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006b70:	f505 7203 	add.w	r2, r5, #524	; 0x20c
 8006b74:	4620      	mov	r0, r4
 8006b76:	231f      	movs	r3, #31
 8006b78:	2101      	movs	r1, #1
}
 8006b7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006b7e:	f007 bb3d 	b.w	800e1fc <USBD_LL_PrepareReceive>

08006b82 <MSC_BOT_Reset>:
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006b82:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290
  hmsc->bot_state  = USBD_BOT_IDLE;
 8006b86:	2300      	movs	r3, #0
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8006b88:	2101      	movs	r1, #1
  hmsc->bot_state  = USBD_BOT_IDLE;
 8006b8a:	7213      	strb	r3, [r2, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8006b8c:	7251      	strb	r1, [r2, #9]
  USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006b8e:	231f      	movs	r3, #31
 8006b90:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006b94:	f007 bb32 	b.w	800e1fc <USBD_LL_PrepareReceive>

08006b98 <MSC_BOT_DeInit>:
  hmsc->bot_state  = USBD_BOT_IDLE;
 8006b98:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	721a      	strb	r2, [r3, #8]
 8006ba0:	4770      	bx	lr
	...

08006ba4 <MSC_BOT_SendCSW>:
{
 8006ba4:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006ba6:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8006baa:	4b0b      	ldr	r3, [pc, #44]	; (8006bd8 <MSC_BOT_SendCSW+0x34>)
 8006bac:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
  hmsc->bot_state = USBD_BOT_IDLE;
 8006bb0:	2300      	movs	r3, #0
{
 8006bb2:	4605      	mov	r5, r0
  hmsc->csw.bStatus = CSW_Status;
 8006bb4:	f884 1238 	strb.w	r1, [r4, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_IDLE;
 8006bb8:	7223      	strb	r3, [r4, #8]
  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, (uint8_t *)(void *)&hmsc->csw,
 8006bba:	f504 720b 	add.w	r2, r4, #556	; 0x22c
 8006bbe:	230d      	movs	r3, #13
 8006bc0:	2181      	movs	r1, #129	; 0x81
 8006bc2:	f007 fb0d 	bl	800e1e0 <USBD_LL_Transmit>
  USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006bc6:	f504 7203 	add.w	r2, r4, #524	; 0x20c
 8006bca:	4628      	mov	r0, r5
 8006bcc:	231f      	movs	r3, #31
 8006bce:	2101      	movs	r1, #1
}
 8006bd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006bd4:	f007 bb12 	b.w	800e1fc <USBD_LL_PrepareReceive>
 8006bd8:	53425355 	.word	0x53425355

08006bdc <MSC_BOT_DataIn>:
{
 8006bdc:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006bde:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290
  switch (hmsc->bot_state)
 8006be2:	7a1a      	ldrb	r2, [r3, #8]
 8006be4:	2a02      	cmp	r2, #2
{
 8006be6:	4604      	mov	r4, r0
  switch (hmsc->bot_state)
 8006be8:	d003      	beq.n	8006bf2 <MSC_BOT_DataIn+0x16>
 8006bea:	d312      	bcc.n	8006c12 <MSC_BOT_DataIn+0x36>
 8006bec:	2a04      	cmp	r2, #4
 8006bee:	d90e      	bls.n	8006c0e <MSC_BOT_DataIn+0x32>
 8006bf0:	bd10      	pop	{r4, pc}
    if(SCSI_ProcessCmd(pdev,
 8006bf2:	f203 221b 	addw	r2, r3, #539	; 0x21b
 8006bf6:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8006bfa:	f000 f8a3 	bl	8006d44 <SCSI_ProcessCmd>
 8006bfe:	2800      	cmp	r0, #0
 8006c00:	da07      	bge.n	8006c12 <MSC_BOT_DataIn+0x36>
      MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8006c02:	2101      	movs	r1, #1
 8006c04:	4620      	mov	r0, r4
}
 8006c06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 8006c0a:	f7ff bfcb 	b.w	8006ba4 <MSC_BOT_SendCSW>
 8006c0e:	2100      	movs	r1, #0
 8006c10:	e7f9      	b.n	8006c06 <MSC_BOT_DataIn+0x2a>
 8006c12:	bd10      	pop	{r4, pc}

08006c14 <MSC_BOT_DataOut>:
{
 8006c14:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006c16:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
  switch (hmsc->bot_state)
 8006c1a:	7a23      	ldrb	r3, [r4, #8]
{
 8006c1c:	4605      	mov	r5, r0
  switch (hmsc->bot_state)
 8006c1e:	b113      	cbz	r3, 8006c26 <MSC_BOT_DataOut+0x12>
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d058      	beq.n	8006cd6 <MSC_BOT_DataOut+0xc2>
 8006c24:	bd70      	pop	{r4, r5, r6, pc}
  hmsc->csw.dTag = hmsc->cbw.dTag;
 8006c26:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 8006c2a:	f8c4 3230 	str.w	r3, [r4, #560]	; 0x230
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8006c2e:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8006c32:	f8c4 3234 	str.w	r3, [r4, #564]	; 0x234
  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8006c36:	2101      	movs	r1, #1
 8006c38:	f007 faee 	bl	800e218 <USBD_LL_GetRxDataSize>
 8006c3c:	281f      	cmp	r0, #31
 8006c3e:	f894 1219 	ldrb.w	r1, [r4, #537]	; 0x219
 8006c42:	d10b      	bne.n	8006c5c <MSC_BOT_DataOut+0x48>
 8006c44:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 8006c48:	4b27      	ldr	r3, [pc, #156]	; (8006ce8 <MSC_BOT_DataOut+0xd4>)
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d106      	bne.n	8006c5c <MSC_BOT_DataOut+0x48>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8006c4e:	2901      	cmp	r1, #1
 8006c50:	d804      	bhi.n	8006c5c <MSC_BOT_DataOut+0x48>
        (hmsc->cbw.bLUN > 1U) ||
 8006c52:	f894 321a 	ldrb.w	r3, [r4, #538]	; 0x21a
 8006c56:	3b01      	subs	r3, #1
 8006c58:	2b0f      	cmp	r3, #15
 8006c5a:	d90b      	bls.n	8006c74 <MSC_BOT_DataOut+0x60>
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006c5c:	2320      	movs	r3, #32
 8006c5e:	2205      	movs	r2, #5
 8006c60:	4628      	mov	r0, r5
 8006c62:	f000 fa9d 	bl	80071a0 <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8006c66:	2302      	movs	r3, #2
 8006c68:	7263      	strb	r3, [r4, #9]
        MSC_BOT_Abort(pdev);
 8006c6a:	4628      	mov	r0, r5
}
 8006c6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        MSC_BOT_Abort(pdev);
 8006c70:	f7ff bf47 	b.w	8006b02 <MSC_BOT_Abort>
    if(SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006c74:	f204 221b 	addw	r2, r4, #539	; 0x21b
 8006c78:	4628      	mov	r0, r5
 8006c7a:	f000 f863 	bl	8006d44 <SCSI_ProcessCmd>
 8006c7e:	2800      	cmp	r0, #0
 8006c80:	7a23      	ldrb	r3, [r4, #8]
 8006c82:	da07      	bge.n	8006c94 <MSC_BOT_DataOut+0x80>
      if(hmsc->bot_state == USBD_BOT_NO_DATA)
 8006c84:	2b05      	cmp	r3, #5
 8006c86:	d1f0      	bne.n	8006c6a <MSC_BOT_DataOut+0x56>
        MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8006c88:	2101      	movs	r1, #1
        MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 8006c8a:	4628      	mov	r0, r5
}
 8006c8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 8006c90:	f7ff bf88 	b.w	8006ba4 <MSC_BOT_SendCSW>
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8006c94:	3b01      	subs	r3, #1
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	d925      	bls.n	8006ce6 <MSC_BOT_DataOut+0xd2>
      if (hmsc->bot_data_length > 0U)
 8006c9a:	8963      	ldrh	r3, [r4, #10]
 8006c9c:	b1cb      	cbz	r3, 8006cd2 <MSC_BOT_DataOut+0xbe>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006c9e:	f8d5 1290 	ldr.w	r1, [r5, #656]	; 0x290
  hmsc->csw.dDataResidue -= len;
 8006ca2:	f8d1 0234 	ldr.w	r0, [r1, #564]	; 0x234
  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 8006ca6:	f8d1 6214 	ldr.w	r6, [r1, #532]	; 0x214
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8006caa:	f104 020c 	add.w	r2, r4, #12
  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 8006cae:	461c      	mov	r4, r3
  hmsc->csw.dDataResidue -= len;
 8006cb0:	1b00      	subs	r0, r0, r4
 8006cb2:	f8c1 0234 	str.w	r0, [r1, #564]	; 0x234
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8006cb6:	2000      	movs	r0, #0
 8006cb8:	f881 0238 	strb.w	r0, [r1, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8006cbc:	2004      	movs	r0, #4
 8006cbe:	7208      	strb	r0, [r1, #8]
  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 8006cc0:	429e      	cmp	r6, r3
 8006cc2:	bf38      	it	cc
 8006cc4:	b2b3      	uxthcc	r3, r6
  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8006cc6:	4628      	mov	r0, r5
 8006cc8:	2181      	movs	r1, #129	; 0x81
}
 8006cca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8006cce:	f007 ba87 	b.w	800e1e0 <USBD_LL_Transmit>
        MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	e7d9      	b.n	8006c8a <MSC_BOT_DataOut+0x76>
    if(SCSI_ProcessCmd(pdev,
 8006cd6:	f204 221b 	addw	r2, r4, #539	; 0x21b
 8006cda:	f894 1219 	ldrb.w	r1, [r4, #537]	; 0x219
 8006cde:	f000 f831 	bl	8006d44 <SCSI_ProcessCmd>
 8006ce2:	2800      	cmp	r0, #0
 8006ce4:	dbd0      	blt.n	8006c88 <MSC_BOT_DataOut+0x74>
 8006ce6:	bd70      	pop	{r4, r5, r6, pc}
 8006ce8:	43425355 	.word	0x43425355

08006cec <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature (USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8006cec:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006cee:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290

  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR)/* Bad CBW Signature */
 8006cf2:	7a63      	ldrb	r3, [r4, #9]
 8006cf4:	2b02      	cmp	r3, #2
 8006cf6:	d105      	bne.n	8006d04 <MSC_BOT_CplClrFeature+0x18>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8006cf8:	2181      	movs	r1, #129	; 0x81
 8006cfa:	f007 fa33 	bl	800e164 <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	7263      	strb	r3, [r4, #9]
 8006d02:	bd10      	pop	{r4, pc}
  }
  else if(((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8006d04:	060a      	lsls	r2, r1, #24
 8006d06:	d506      	bpl.n	8006d16 <MSC_BOT_CplClrFeature+0x2a>
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d004      	beq.n	8006d16 <MSC_BOT_CplClrFeature+0x2a>
  {
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8006d0c:	2101      	movs	r1, #1
  }
  else
  {
    return;
  }
}
 8006d0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8006d12:	f7ff bf47 	b.w	8006ba4 <MSC_BOT_SendCSW>
 8006d16:	bd10      	pop	{r4, pc}

08006d18 <SCSI_SenseCode.constprop.8>:
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006d18:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 8006d1c:	f892 325d 	ldrb.w	r3, [r2, #605]	; 0x25d
 8006d20:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
  hmsc->scsi_sense_tail++;
 8006d24:	3301      	adds	r3, #1
 8006d26:	b2db      	uxtb	r3, r3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 8006d28:	f880 123c 	strb.w	r1, [r0, #572]	; 0x23c
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8006d2c:	2b04      	cmp	r3, #4
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 8006d2e:	f04f 0100 	mov.w	r1, #0
 8006d32:	f880 1240 	strb.w	r1, [r0, #576]	; 0x240
  hmsc->scsi_sense_tail++;
 8006d36:	bf14      	ite	ne
 8006d38:	f882 325d 	strbne.w	r3, [r2, #605]	; 0x25d
  {
    hmsc->scsi_sense_tail = 0U;
 8006d3c:	f882 125d 	strbeq.w	r1, [r2, #605]	; 0x25d
 8006d40:	4770      	bx	lr
	...

08006d44 <SCSI_ProcessCmd>:
{
 8006d44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  switch (cmd[0])
 8006d48:	7813      	ldrb	r3, [r2, #0]
 8006d4a:	2b1e      	cmp	r3, #30
{
 8006d4c:	4605      	mov	r5, r0
 8006d4e:	460c      	mov	r4, r1
 8006d50:	4617      	mov	r7, r2
  switch (cmd[0])
 8006d52:	d016      	beq.n	8006d82 <SCSI_ProcessCmd+0x3e>
 8006d54:	d81a      	bhi.n	8006d8c <SCSI_ProcessCmd+0x48>
 8006d56:	2b12      	cmp	r3, #18
 8006d58:	f000 80e3 	beq.w	8006f22 <SCSI_ProcessCmd+0x1de>
 8006d5c:	d80c      	bhi.n	8006d78 <SCSI_ProcessCmd+0x34>
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	f000 8092 	beq.w	8006e88 <SCSI_ProcessCmd+0x144>
 8006d64:	2b03      	cmp	r3, #3
 8006d66:	f000 80ad 	beq.w	8006ec4 <SCSI_ProcessCmd+0x180>
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8006d6a:	2105      	movs	r1, #5
 8006d6c:	4628      	mov	r0, r5
 8006d6e:	f7ff ffd3 	bl	8006d18 <SCSI_SenseCode.constprop.8>
    return -1;
 8006d72:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006d76:	e0a1      	b.n	8006ebc <SCSI_ProcessCmd+0x178>
  switch (cmd[0])
 8006d78:	2b1a      	cmp	r3, #26
 8006d7a:	f000 80fa 	beq.w	8006f72 <SCSI_ProcessCmd+0x22e>
 8006d7e:	2b1b      	cmp	r3, #27
 8006d80:	d1f3      	bne.n	8006d6a <SCSI_ProcessCmd+0x26>
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
  hmsc->bot_data_length = 0U;
 8006d82:	f8d5 3290 	ldr.w	r3, [r5, #656]	; 0x290
 8006d86:	2400      	movs	r4, #0
  if(SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
                            hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */
  }
  hmsc->bot_data_length = 0U;
 8006d88:	815c      	strh	r4, [r3, #10]
 8006d8a:	e097      	b.n	8006ebc <SCSI_ProcessCmd+0x178>
  switch (cmd[0])
 8006d8c:	2b28      	cmp	r3, #40	; 0x28
 8006d8e:	f000 813a 	beq.w	8007006 <SCSI_ProcessCmd+0x2c2>
 8006d92:	d827      	bhi.n	8006de4 <SCSI_ProcessCmd+0xa0>
 8006d94:	2b23      	cmp	r3, #35	; 0x23
 8006d96:	f000 810a 	beq.w	8006fae <SCSI_ProcessCmd+0x26a>
 8006d9a:	2b25      	cmp	r3, #37	; 0x25
 8006d9c:	d1e5      	bne.n	8006d6a <SCSI_ProcessCmd+0x26>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006d9e:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 8006da2:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8006da6:	f206 225e 	addw	r2, r6, #606	; 0x25e
 8006daa:	4620      	mov	r0, r4
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	f506 7118 	add.w	r1, r6, #608	; 0x260
 8006db2:	4798      	blx	r3
 8006db4:	4604      	mov	r4, r0
 8006db6:	2800      	cmp	r0, #0
 8006db8:	f040 810d 	bne.w	8006fd6 <SCSI_ProcessCmd+0x292>
    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8006dbc:	f8d6 3260 	ldr.w	r3, [r6, #608]	; 0x260
    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8006dc0:	7430      	strb	r0, [r6, #16]
    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8006dc2:	3b01      	subs	r3, #1
 8006dc4:	0e1a      	lsrs	r2, r3, #24
 8006dc6:	7332      	strb	r2, [r6, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8006dc8:	0c1a      	lsrs	r2, r3, #16
 8006dca:	7372      	strb	r2, [r6, #13]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8006dcc:	73f3      	strb	r3, [r6, #15]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8006dce:	0a1a      	lsrs	r2, r3, #8
    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8006dd0:	f8b6 325e 	ldrh.w	r3, [r6, #606]	; 0x25e
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8006dd4:	73b2      	strb	r2, [r6, #14]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8006dd6:	74f3      	strb	r3, [r6, #19]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8006dd8:	0a1a      	lsrs	r2, r3, #8
    hmsc->bot_data_length = 8U;
 8006dda:	2308      	movs	r3, #8
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8006ddc:	7470      	strb	r0, [r6, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8006dde:	74b2      	strb	r2, [r6, #18]
    hmsc->bot_data_length = 8U;
 8006de0:	8173      	strh	r3, [r6, #10]
 8006de2:	e06b      	b.n	8006ebc <SCSI_ProcessCmd+0x178>
  switch (cmd[0])
 8006de4:	2b2f      	cmp	r3, #47	; 0x2f
 8006de6:	f000 81c2 	beq.w	800716e <SCSI_ProcessCmd+0x42a>
 8006dea:	2b5a      	cmp	r3, #90	; 0x5a
 8006dec:	f000 80d0 	beq.w	8006f90 <SCSI_ProcessCmd+0x24c>
 8006df0:	2b2a      	cmp	r3, #42	; 0x2a
 8006df2:	d1ba      	bne.n	8006d6a <SCSI_ProcessCmd+0x26>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 8006df4:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8006df8:	7a33      	ldrb	r3, [r6, #8]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	f040 8177 	bne.w	80070ee <SCSI_ProcessCmd+0x3aa>
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8006e00:	f996 3218 	ldrsb.w	r3, [r6, #536]	; 0x218
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	db44      	blt.n	8006e92 <SCSI_ProcessCmd+0x14e>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8006e08:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8006e0c:	4608      	mov	r0, r1
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	4798      	blx	r3
 8006e12:	2800      	cmp	r0, #0
 8006e14:	f040 80df 	bne.w	8006fd6 <SCSI_ProcessCmd+0x292>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8006e18:	f8d5 3294 	ldr.w	r3, [r5, #660]	; 0x294
 8006e1c:	4620      	mov	r0, r4
 8006e1e:	68db      	ldr	r3, [r3, #12]
 8006e20:	4798      	blx	r3
 8006e22:	4604      	mov	r4, r0
 8006e24:	2800      	cmp	r0, #0
 8006e26:	f040 80d6 	bne.w	8006fd6 <SCSI_ProcessCmd+0x292>
                          ((uint32_t)params[3] << 16) |
 8006e2a:	78fa      	ldrb	r2, [r7, #3]
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006e2c:	78bb      	ldrb	r3, [r7, #2]
                          ((uint32_t)params[3] << 16) |
 8006e2e:	0412      	lsls	r2, r2, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006e30:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
                           (uint32_t)params[5];
 8006e34:	797b      	ldrb	r3, [r7, #5]
                          ((uint32_t)params[4] << 8) |
 8006e36:	431a      	orrs	r2, r3
 8006e38:	793b      	ldrb	r3, [r7, #4]
 8006e3a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006e3e:	f8c6 2264 	str.w	r2, [r6, #612]	; 0x264
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8006e42:	79f9      	ldrb	r1, [r7, #7]
                          (uint32_t)params[8];
 8006e44:	7a3b      	ldrb	r3, [r7, #8]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8006e46:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
static int8_t SCSI_CheckAddressRange (USBD_HandleTypeDef *pdev, uint8_t lun,
                                      uint32_t blk_offset, uint32_t blk_nbr)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8006e4a:	f8d5 1290 	ldr.w	r1, [r5, #656]	; 0x290
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8006e4e:	f8c6 3268 	str.w	r3, [r6, #616]	; 0x268
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8006e52:	f8d1 1260 	ldr.w	r1, [r1, #608]	; 0x260
 8006e56:	441a      	add	r2, r3
 8006e58:	428a      	cmp	r2, r1
 8006e5a:	d81a      	bhi.n	8006e92 <SCSI_ProcessCmd+0x14e>
    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8006e5c:	f8b6 225e 	ldrh.w	r2, [r6, #606]	; 0x25e
 8006e60:	4353      	muls	r3, r2
    if (hmsc->cbw.dDataLength != len)
 8006e62:	f8d6 2214 	ldr.w	r2, [r6, #532]	; 0x214
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d113      	bne.n	8006e92 <SCSI_ProcessCmd+0x14e>
    len = MIN(len, MSC_MEDIA_PACKET);
 8006e6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8006e6e:	f04f 0101 	mov.w	r1, #1
    len = MIN(len, MSC_MEDIA_PACKET);
 8006e72:	bf28      	it	cs
 8006e74:	f44f 7300 	movcs.w	r3, #512	; 0x200
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8006e78:	7231      	strb	r1, [r6, #8]
    USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	f106 020c 	add.w	r2, r6, #12
 8006e80:	4628      	mov	r0, r5
 8006e82:	f007 f9bb 	bl	800e1fc <USBD_LL_PrepareReceive>
 8006e86:	e019      	b.n	8006ebc <SCSI_ProcessCmd+0x178>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006e88:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
  if (hmsc->cbw.dDataLength != 0U)
 8006e8c:	f8d6 7214 	ldr.w	r7, [r6, #532]	; 0x214
 8006e90:	b127      	cbz	r7, 8006e9c <SCSI_ProcessCmd+0x158>
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006e92:	2105      	movs	r1, #5
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
                              hmsc->bot_data,
                              hmsc->scsi_blk_addr,
                              (len / hmsc->scsi_blk_size)) < 0)
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8006e94:	4628      	mov	r0, r5
 8006e96:	f7ff ff3f 	bl	8006d18 <SCSI_SenseCode.constprop.8>
 8006e9a:	e00c      	b.n	8006eb6 <SCSI_ProcessCmd+0x172>
  if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8006e9c:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8006ea0:	4608      	mov	r0, r1
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	4798      	blx	r3
 8006ea6:	4604      	mov	r4, r0
 8006ea8:	b138      	cbz	r0, 8006eba <SCSI_ProcessCmd+0x176>
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006eaa:	2102      	movs	r1, #2
 8006eac:	4628      	mov	r0, r5
 8006eae:	f7ff ff33 	bl	8006d18 <SCSI_SenseCode.constprop.8>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8006eb2:	2305      	movs	r3, #5
 8006eb4:	7233      	strb	r3, [r6, #8]
  return 0;
 8006eb6:	2400      	movs	r4, #0
 8006eb8:	e000      	b.n	8006ebc <SCSI_ProcessCmd+0x178>
  hmsc->bot_data_length = 0U;
 8006eba:	8170      	strh	r0, [r6, #10]
}
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	b003      	add	sp, #12
 8006ec0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ec4:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290
    hmsc->bot_data[i] = 0U;
 8006ec8:	2000      	movs	r0, #0
 8006eca:	f103 020c 	add.w	r2, r3, #12
 8006ece:	f103 011e 	add.w	r1, r3, #30
 8006ed2:	f802 0b01 	strb.w	r0, [r2], #1
  for(i = 0U ;i < REQUEST_SENSE_DATA_LEN; i++)
 8006ed6:	428a      	cmp	r2, r1
 8006ed8:	d1fb      	bne.n	8006ed2 <SCSI_ProcessCmd+0x18e>
  hmsc->bot_data[0]	= 0x70U;
 8006eda:	2270      	movs	r2, #112	; 0x70
 8006edc:	731a      	strb	r2, [r3, #12]
  hmsc->bot_data[7]	= REQUEST_SENSE_DATA_LEN - 6U;
 8006ede:	220c      	movs	r2, #12
 8006ee0:	74da      	strb	r2, [r3, #19]
  if((hmsc->scsi_sense_head != hmsc->scsi_sense_tail)) {
 8006ee2:	f893 125d 	ldrb.w	r1, [r3, #605]	; 0x25d
 8006ee6:	f893 225c 	ldrb.w	r2, [r3, #604]	; 0x25c
 8006eea:	4291      	cmp	r1, r2
 8006eec:	d012      	beq.n	8006f14 <SCSI_ProcessCmd+0x1d0>
 8006eee:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
    hmsc->scsi_sense_head++;
 8006ef2:	3201      	adds	r2, #1
    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8006ef4:	f891 423c 	ldrb.w	r4, [r1, #572]	; 0x23c
 8006ef8:	739c      	strb	r4, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8006efa:	f891 4241 	ldrb.w	r4, [r1, #577]	; 0x241
 8006efe:	761c      	strb	r4, [r3, #24]
    hmsc->scsi_sense_head++;
 8006f00:	b2d2      	uxtb	r2, r2
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8006f02:	f891 1240 	ldrb.w	r1, [r1, #576]	; 0x240
 8006f06:	7659      	strb	r1, [r3, #25]
    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8006f08:	2a04      	cmp	r2, #4
    hmsc->scsi_sense_head++;
 8006f0a:	bf14      	ite	ne
 8006f0c:	f883 225c 	strbne.w	r2, [r3, #604]	; 0x25c
      hmsc->scsi_sense_head = 0U;
 8006f10:	f883 025c 	strbeq.w	r0, [r3, #604]	; 0x25c
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8006f14:	2212      	movs	r2, #18
 8006f16:	815a      	strh	r2, [r3, #10]
  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8006f18:	793a      	ldrb	r2, [r7, #4]
 8006f1a:	2a12      	cmp	r2, #18
    hmsc->bot_data_length = params[4];
 8006f1c:	bf98      	it	ls
 8006f1e:	815a      	strhls	r2, [r3, #10]
 8006f20:	e7c9      	b.n	8006eb6 <SCSI_ProcessCmd+0x172>
  if (params[1] & 0x01U)/*Evpd is set*/
 8006f22:	787b      	ldrb	r3, [r7, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006f24:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290
  if (params[1] & 0x01U)/*Evpd is set*/
 8006f28:	07db      	lsls	r3, r3, #31
 8006f2a:	d50c      	bpl.n	8006f46 <SCSI_ProcessCmd+0x202>
    hmsc->bot_data_length = len;
 8006f2c:	2307      	movs	r3, #7
 8006f2e:	4999      	ldr	r1, [pc, #612]	; (8007194 <SCSI_ProcessCmd+0x450>)
 8006f30:	8153      	strh	r3, [r2, #10]
 8006f32:	f102 0312 	add.w	r3, r2, #18
 8006f36:	320b      	adds	r2, #11
      hmsc->bot_data[len] = MSC_Page00_Inquiry_Data[len];
 8006f38:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
 8006f3c:	f803 0901 	strb.w	r0, [r3], #-1
    while (len)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d1f9      	bne.n	8006f38 <SCSI_ProcessCmd+0x1f4>
 8006f44:	e7b7      	b.n	8006eb6 <SCSI_ProcessCmd+0x172>
    pPage = (uint8_t *)(void *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8006f46:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8006f4a:	69db      	ldr	r3, [r3, #28]
 8006f4c:	eb01 04c1 	add.w	r4, r1, r1, lsl #3
 8006f50:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006f54:	7939      	ldrb	r1, [r7, #4]
    len = (uint16_t)pPage[4] + 5U;
 8006f56:	7923      	ldrb	r3, [r4, #4]
 8006f58:	3305      	adds	r3, #5
 8006f5a:	428b      	cmp	r3, r1
 8006f5c:	bf28      	it	cs
 8006f5e:	460b      	movcs	r3, r1
    hmsc->bot_data_length = len;
 8006f60:	8153      	strh	r3, [r2, #10]
    while (len)
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d0a7      	beq.n	8006eb6 <SCSI_ProcessCmd+0x172>
      len--;
 8006f66:	3b01      	subs	r3, #1
 8006f68:	b29b      	uxth	r3, r3
      hmsc->bot_data[len] = pPage[len];
 8006f6a:	18d1      	adds	r1, r2, r3
 8006f6c:	5ce0      	ldrb	r0, [r4, r3]
 8006f6e:	7308      	strb	r0, [r1, #12]
 8006f70:	e7f7      	b.n	8006f62 <SCSI_ProcessCmd+0x21e>
 8006f72:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290
 8006f76:	4988      	ldr	r1, [pc, #544]	; (8007198 <SCSI_ProcessCmd+0x454>)
  hmsc->bot_data_length = len;
 8006f78:	2208      	movs	r2, #8
 8006f7a:	815a      	strh	r2, [r3, #10]
 8006f7c:	f103 0213 	add.w	r2, r3, #19
 8006f80:	330b      	adds	r3, #11
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 8006f82:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
 8006f86:	f802 0901 	strb.w	r0, [r2], #-1
  while (len)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d1f9      	bne.n	8006f82 <SCSI_ProcessCmd+0x23e>
 8006f8e:	e792      	b.n	8006eb6 <SCSI_ProcessCmd+0x172>
 8006f90:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290
 8006f94:	4981      	ldr	r1, [pc, #516]	; (800719c <SCSI_ProcessCmd+0x458>)
  hmsc->bot_data_length = len;
 8006f96:	2208      	movs	r2, #8
 8006f98:	815a      	strh	r2, [r3, #10]
 8006f9a:	f103 0213 	add.w	r2, r3, #19
 8006f9e:	330b      	adds	r3, #11
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 8006fa0:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
 8006fa4:	f802 0901 	strb.w	r0, [r2], #-1
  while (len)
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d1f9      	bne.n	8006fa0 <SCSI_ProcessCmd+0x25c>
 8006fac:	e783      	b.n	8006eb6 <SCSI_ProcessCmd+0x172>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006fae:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
    hmsc->bot_data[i] = 0U;
 8006fb2:	2100      	movs	r1, #0
 8006fb4:	f106 030c 	add.w	r3, r6, #12
 8006fb8:	f106 0218 	add.w	r2, r6, #24
 8006fbc:	f803 1b01 	strb.w	r1, [r3], #1
  for(i = 0U; i < 12U ; i++)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d1fb      	bne.n	8006fbc <SCSI_ProcessCmd+0x278>
  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0U)
 8006fc4:	f8d5 3294 	ldr.w	r3, [r5, #660]	; 0x294
 8006fc8:	f10d 0202 	add.w	r2, sp, #2
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	a901      	add	r1, sp, #4
 8006fd0:	4620      	mov	r0, r4
 8006fd2:	4798      	blx	r3
 8006fd4:	b108      	cbz	r0, 8006fda <SCSI_ProcessCmd+0x296>
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006fd6:	2102      	movs	r1, #2
 8006fd8:	e75c      	b.n	8006e94 <SCSI_ProcessCmd+0x150>
    hmsc->bot_data[3] = 0x08U;
 8006fda:	2308      	movs	r3, #8
 8006fdc:	73f3      	strb	r3, [r6, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8006fde:	9b01      	ldr	r3, [sp, #4]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8006fe0:	7570      	strb	r0, [r6, #21]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8006fe2:	3b01      	subs	r3, #1
 8006fe4:	0e1a      	lsrs	r2, r3, #24
 8006fe6:	7432      	strb	r2, [r6, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8006fe8:	0c1a      	lsrs	r2, r3, #16
 8006fea:	7472      	strb	r2, [r6, #17]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8006fec:	74f3      	strb	r3, [r6, #19]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8006fee:	0a1a      	lsrs	r2, r3, #8
    hmsc->bot_data[8] = 0x02U;
 8006ff0:	2302      	movs	r3, #2
 8006ff2:	7533      	strb	r3, [r6, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8006ff4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8006ff8:	74b2      	strb	r2, [r6, #18]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 8006ffa:	75f3      	strb	r3, [r6, #23]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8006ffc:	0a1a      	lsrs	r2, r3, #8
    hmsc->bot_data_length = 12U;
 8006ffe:	230c      	movs	r3, #12
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8007000:	75b2      	strb	r2, [r6, #22]
    hmsc->bot_data_length = 12U;
 8007002:	8173      	strh	r3, [r6, #10]
 8007004:	e757      	b.n	8006eb6 <SCSI_ProcessCmd+0x172>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 8007006:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
  if(hmsc->bot_state == USBD_BOT_IDLE)  /* Idle */
 800700a:	7a33      	ldrb	r3, [r6, #8]
 800700c:	bb7b      	cbnz	r3, 800706e <SCSI_ProcessCmd+0x32a>
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800700e:	f996 3218 	ldrsb.w	r3, [r6, #536]	; 0x218
 8007012:	2b00      	cmp	r3, #0
 8007014:	f6bf af3d 	bge.w	8006e92 <SCSI_ProcessCmd+0x14e>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8007018:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800701c:	4608      	mov	r0, r1
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	4798      	blx	r3
 8007022:	2800      	cmp	r0, #0
 8007024:	d1d7      	bne.n	8006fd6 <SCSI_ProcessCmd+0x292>
                          ((uint32_t)params[3] << 16) |
 8007026:	78fb      	ldrb	r3, [r7, #3]
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007028:	78ba      	ldrb	r2, [r7, #2]
                          ((uint32_t)params[3] << 16) |
 800702a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800702c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                           (uint32_t)params[5];
 8007030:	797a      	ldrb	r2, [r7, #5]
                          ((uint32_t)params[4] <<  8) |
 8007032:	4313      	orrs	r3, r2
 8007034:	793a      	ldrb	r2, [r7, #4]
 8007036:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800703a:	f8c6 3264 	str.w	r3, [r6, #612]	; 0x264
    hmsc->scsi_blk_len =  ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800703e:	79f9      	ldrb	r1, [r7, #7]
 8007040:	7a3a      	ldrb	r2, [r7, #8]
 8007042:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8007046:	f8d5 1290 	ldr.w	r1, [r5, #656]	; 0x290
    hmsc->scsi_blk_len =  ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800704a:	f8c6 2268 	str.w	r2, [r6, #616]	; 0x268
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800704e:	f8d1 1260 	ldr.w	r1, [r1, #608]	; 0x260
 8007052:	4413      	add	r3, r2
 8007054:	428b      	cmp	r3, r1
 8007056:	f63f af1c 	bhi.w	8006e92 <SCSI_ProcessCmd+0x14e>
    hmsc->bot_state = USBD_BOT_DATA_IN;
 800705a:	2302      	movs	r3, #2
 800705c:	7233      	strb	r3, [r6, #8]
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800705e:	f8b6 325e 	ldrh.w	r3, [r6, #606]	; 0x25e
 8007062:	435a      	muls	r2, r3
 8007064:	f8d6 3214 	ldr.w	r3, [r6, #532]	; 0x214
 8007068:	4293      	cmp	r3, r2
 800706a:	f47f af12 	bne.w	8006e92 <SCSI_ProcessCmd+0x14e>
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800706e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007072:	8173      	strh	r3, [r6, #10]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8007074:	f8d5 6290 	ldr.w	r6, [r5, #656]	; 0x290
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8007078:	f8d5 2294 	ldr.w	r2, [r5, #660]	; 0x294
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800707c:	f8b6 325e 	ldrh.w	r3, [r6, #606]	; 0x25e
 8007080:	f8d6 7268 	ldr.w	r7, [r6, #616]	; 0x268
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8007084:	f8d2 9010 	ldr.w	r9, [r2, #16]
 8007088:	f8d6 2264 	ldr.w	r2, [r6, #612]	; 0x264
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800708c:	435f      	muls	r7, r3
  len = MIN(len, MSC_MEDIA_PACKET);
 800708e:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
                              hmsc->bot_data,
 8007092:	f106 080c 	add.w	r8, r6, #12
  len = MIN(len, MSC_MEDIA_PACKET);
 8007096:	bf28      	it	cs
 8007098:	f44f 7700 	movcs.w	r7, #512	; 0x200
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 800709c:	4641      	mov	r1, r8
                              (len / hmsc->scsi_blk_size)) < 0)
 800709e:	fbb7 f3f3 	udiv	r3, r7, r3
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 80070a2:	4620      	mov	r0, r4
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	47c8      	blx	r9
 80070a8:	2800      	cmp	r0, #0
 80070aa:	da01      	bge.n	80070b0 <SCSI_ProcessCmd+0x36c>
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 80070ac:	2104      	movs	r1, #4
 80070ae:	e6f1      	b.n	8006e94 <SCSI_ProcessCmd+0x150>
    return -1;
  }

  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 80070b0:	b2bb      	uxth	r3, r7
 80070b2:	4642      	mov	r2, r8
 80070b4:	2181      	movs	r1, #129	; 0x81
 80070b6:	4628      	mov	r0, r5
 80070b8:	f007 f892 	bl	800e1e0 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80070bc:	f8b6 425e 	ldrh.w	r4, [r6, #606]	; 0x25e
 80070c0:	f8d6 2264 	ldr.w	r2, [r6, #612]	; 0x264
 80070c4:	fbb7 f3f4 	udiv	r3, r7, r4
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80070c8:	f8d6 4268 	ldr.w	r4, [r6, #616]	; 0x268
  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80070cc:	441a      	add	r2, r3
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80070ce:	1ae4      	subs	r4, r4, r3

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 80070d0:	f8d6 3234 	ldr.w	r3, [r6, #564]	; 0x234
  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80070d4:	f8c6 2264 	str.w	r2, [r6, #612]	; 0x264
  hmsc->csw.dDataResidue -= len;
 80070d8:	1bdf      	subs	r7, r3, r7
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80070da:	f8c6 4268 	str.w	r4, [r6, #616]	; 0x268
  hmsc->csw.dDataResidue -= len;
 80070de:	f8c6 7234 	str.w	r7, [r6, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 80070e2:	2c00      	cmp	r4, #0
 80070e4:	f47f aee7 	bne.w	8006eb6 <SCSI_ProcessCmd+0x172>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 80070e8:	2303      	movs	r3, #3
 80070ea:	7233      	strb	r3, [r6, #8]
 80070ec:	e6e6      	b.n	8006ebc <SCSI_ProcessCmd+0x178>
*/

static int8_t SCSI_ProcessWrite (USBD_HandleTypeDef  *pdev, uint8_t lun)
{
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80070ee:	f8b6 325e 	ldrh.w	r3, [r6, #606]	; 0x25e
 80070f2:	f8d6 7268 	ldr.w	r7, [r6, #616]	; 0x268

  len = MIN(len, MSC_MEDIA_PACKET);

  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 80070f6:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80070fa:	435f      	muls	r7, r3
  len = MIN(len, MSC_MEDIA_PACKET);
 80070fc:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8007100:	f106 080c 	add.w	r8, r6, #12
  len = MIN(len, MSC_MEDIA_PACKET);
 8007104:	bf28      	it	cs
 8007106:	f44f 7700 	movcs.w	r7, #512	; 0x200
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800710a:	f8d2 9014 	ldr.w	r9, [r2, #20]
                             hmsc->scsi_blk_addr,
                             (len / hmsc->scsi_blk_size)) < 0)
 800710e:	fbb7 f3f3 	udiv	r3, r7, r3
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8007112:	f8d6 2264 	ldr.w	r2, [r6, #612]	; 0x264
 8007116:	b29b      	uxth	r3, r3
 8007118:	4641      	mov	r1, r8
 800711a:	4620      	mov	r0, r4
 800711c:	47c8      	blx	r9
 800711e:	2800      	cmp	r0, #0
 8007120:	dbc4      	blt.n	80070ac <SCSI_ProcessCmd+0x368>
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);

    return -1;
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8007122:	f8d6 2264 	ldr.w	r2, [r6, #612]	; 0x264
 8007126:	f8b6 125e 	ldrh.w	r1, [r6, #606]	; 0x25e
 800712a:	fbb7 f0f1 	udiv	r0, r7, r1
 800712e:	4402      	add	r2, r0
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8007130:	f8d6 3268 	ldr.w	r3, [r6, #616]	; 0x268
  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8007134:	f8c6 2264 	str.w	r2, [r6, #612]	; 0x264

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8007138:	f8d6 2234 	ldr.w	r2, [r6, #564]	; 0x234
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800713c:	1a1b      	subs	r3, r3, r0
  hmsc->csw.dDataResidue -= len;
 800713e:	1bd7      	subs	r7, r2, r7
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8007140:	f8c6 3268 	str.w	r3, [r6, #616]	; 0x268
  hmsc->csw.dDataResidue -= len;
 8007144:	f8c6 7234 	str.w	r7, [r6, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 8007148:	b923      	cbnz	r3, 8007154 <SCSI_ProcessCmd+0x410>
  {
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 800714a:	2100      	movs	r1, #0
 800714c:	4628      	mov	r0, r5
 800714e:	f7ff fd29 	bl	8006ba4 <MSC_BOT_SendCSW>
 8007152:	e6b0      	b.n	8006eb6 <SCSI_ProcessCmd+0x172>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8007154:	434b      	muls	r3, r1
 8007156:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800715a:	bf28      	it	cs
 800715c:	f44f 7300 	movcs.w	r3, #512	; 0x200
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8007160:	b29b      	uxth	r3, r3
 8007162:	4642      	mov	r2, r8
 8007164:	2101      	movs	r1, #1
 8007166:	4628      	mov	r0, r5
 8007168:	f007 f848 	bl	800e1fc <USBD_LL_PrepareReceive>
 800716c:	e6a3      	b.n	8006eb6 <SCSI_ProcessCmd+0x172>
  if ((params[1]& 0x02U) == 0x02U)
 800716e:	7854      	ldrb	r4, [r2, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 8007170:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290
  if ((params[1]& 0x02U) == 0x02U)
 8007174:	f014 0402 	ands.w	r4, r4, #2
 8007178:	f47f ae8b 	bne.w	8006e92 <SCSI_ProcessCmd+0x14e>
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800717c:	f8d3 1268 	ldr.w	r1, [r3, #616]	; 0x268
 8007180:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8007184:	440a      	add	r2, r1
 8007186:	f8d3 1260 	ldr.w	r1, [r3, #608]	; 0x260
 800718a:	428a      	cmp	r2, r1
 800718c:	f67f adfc 	bls.w	8006d88 <SCSI_ProcessCmd+0x44>
 8007190:	e67f      	b.n	8006e92 <SCSI_ProcessCmd+0x14e>
 8007192:	bf00      	nop
 8007194:	0801c8cb 	.word	0x0801c8cb
 8007198:	0801c8c4 	.word	0x0801c8c4
 800719c:	0801c8bc 	.word	0x0801c8bc

080071a0 <SCSI_SenseCode>:
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 80071a0:	f8d0 1290 	ldr.w	r1, [r0, #656]	; 0x290
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 80071a4:	f891 325d 	ldrb.w	r3, [r1, #605]	; 0x25d
 80071a8:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
  hmsc->scsi_sense_tail++;
 80071ac:	3301      	adds	r3, #1
 80071ae:	b2db      	uxtb	r3, r3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 80071b0:	f880 223c 	strb.w	r2, [r0, #572]	; 0x23c
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 80071b4:	2b04      	cmp	r3, #4
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 80071b6:	f04f 0200 	mov.w	r2, #0
 80071ba:	f880 2240 	strb.w	r2, [r0, #576]	; 0x240
  hmsc->scsi_sense_tail++;
 80071be:	bf14      	ite	ne
 80071c0:	f881 325d 	strbne.w	r3, [r1, #605]	; 0x25d
    hmsc->scsi_sense_tail = 0U;
 80071c4:	f881 225d 	strbeq.w	r2, [r1, #605]	; 0x25d
 80071c8:	4770      	bx	lr

080071ca <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80071ca:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80071cc:	b180      	cbz	r0, 80071f0 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80071ce:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80071d2:	b113      	cbz	r3, 80071da <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 80071d4:	2300      	movs	r3, #0
 80071d6:	f8c0 328c 	str.w	r3, [r0, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80071da:	b109      	cbz	r1, 80071e0 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 80071dc:	f8c0 1288 	str.w	r1, [r0, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80071e0:	2301      	movs	r3, #1
 80071e2:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  pdev->id = id;
 80071e6:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80071e8:	f006 ff54 	bl	800e094 <USBD_LL_Init>

  return USBD_OK;
 80071ec:	2000      	movs	r0, #0
 80071ee:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 80071f0:	2002      	movs	r0, #2
}
 80071f2:	bd08      	pop	{r3, pc}

080071f4 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 80071f4:	b119      	cbz	r1, 80071fe <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80071f6:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
    status = USBD_OK;
 80071fa:	2000      	movs	r0, #0
 80071fc:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80071fe:	2002      	movs	r0, #2
  }

  return status;
}
 8007200:	4770      	bx	lr

08007202 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8007202:	b508      	push	{r3, lr}

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007204:	f006 ff74 	bl	800e0f0 <USBD_LL_Start>

  return USBD_OK;
}
 8007208:	2000      	movs	r0, #0
 800720a:	bd08      	pop	{r3, pc}

0800720c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800720c:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;

  if(pdev->pClass != NULL)
 800720e:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8007212:	b90b      	cbnz	r3, 8007218 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8007214:	2002      	movs	r0, #2
 8007216:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4798      	blx	r3
 800721c:	2800      	cmp	r0, #0
 800721e:	d1f9      	bne.n	8007214 <USBD_SetClassConfig+0x8>
      ret = USBD_OK;
    }
  }

  return ret;
}
 8007220:	bd08      	pop	{r3, pc}

08007222 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007222:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007224:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	4798      	blx	r3
  return USBD_OK;
}
 800722c:	2000      	movs	r0, #0
 800722e:	bd08      	pop	{r3, pc}

08007230 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007230:	b538      	push	{r3, r4, r5, lr}
 8007232:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007234:	f500 7520 	add.w	r5, r0, #640	; 0x280
 8007238:	4628      	mov	r0, r5
 800723a:	f000 faec 	bl	8007816 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800723e:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8007240:	f894 1280 	ldrb.w	r1, [r4, #640]	; 0x280
  pdev->ep0_state = USBD_EP0_SETUP;
 8007244:	f8c4 326c 	str.w	r3, [r4, #620]	; 0x26c
  pdev->ep0_data_len = pdev->request.wLength;
 8007248:	f8b4 3286 	ldrh.w	r3, [r4, #646]	; 0x286
 800724c:	f8c4 3270 	str.w	r3, [r4, #624]	; 0x270
  switch (pdev->request.bmRequest & 0x1FU)
 8007250:	f001 031f 	and.w	r3, r1, #31
 8007254:	2b01      	cmp	r3, #1
 8007256:	d00e      	beq.n	8007276 <USBD_LL_SetupStage+0x46>
 8007258:	d307      	bcc.n	800726a <USBD_LL_SetupStage+0x3a>
 800725a:	2b02      	cmp	r3, #2
 800725c:	d010      	beq.n	8007280 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
    break;

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800725e:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8007262:	4620      	mov	r0, r4
 8007264:	f006 ff7e 	bl	800e164 <USBD_LL_StallEP>
    break;
 8007268:	e003      	b.n	8007272 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 800726a:	4629      	mov	r1, r5
 800726c:	4620      	mov	r0, r4
 800726e:	f000 f903 	bl	8007478 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 8007272:	2000      	movs	r0, #0
 8007274:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8007276:	4629      	mov	r1, r5
 8007278:	4620      	mov	r0, r4
 800727a:	f000 fa1f 	bl	80076bc <USBD_StdItfReq>
    break;
 800727e:	e7f8      	b.n	8007272 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);
 8007280:	4629      	mov	r1, r5
 8007282:	4620      	mov	r0, r4
 8007284:	f000 fa3f 	bl	8007706 <USBD_StdEPReq>
    break;
 8007288:	e7f3      	b.n	8007272 <USBD_LL_SetupStage+0x42>

0800728a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800728a:	b570      	push	{r4, r5, r6, lr}
 800728c:	4605      	mov	r5, r0
 800728e:	4616      	mov	r6, r2
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8007290:	bb49      	cbnz	r1, 80072e6 <USBD_LL_DataOutStage+0x5c>
  {
    pep = &pdev->ep_out[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007292:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8007296:	2b03      	cmp	r3, #3
 8007298:	d11e      	bne.n	80072d8 <USBD_LL_DataOutStage+0x4e>
    {
      if(pep->rem_length > pep->maxpacket)
 800729a:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 800729e:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d90b      	bls.n	80072be <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 80072a6:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx (pdev,
 80072a8:	429a      	cmp	r2, r3
        pep->rem_length -=  pep->maxpacket;
 80072aa:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
        USBD_CtlContinueRx (pdev,
 80072ae:	bf8c      	ite	hi
 80072b0:	b29a      	uxthhi	r2, r3
 80072b2:	b292      	uxthls	r2, r2
 80072b4:	4631      	mov	r1, r6
 80072b6:	f000 fafe 	bl	80078b6 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80072ba:	2000      	movs	r0, #0
    pdev->pClass->DataOut(pdev, epnum);
 80072bc:	bd70      	pop	{r4, r5, r6, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80072be:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80072c2:	691b      	ldr	r3, [r3, #16]
 80072c4:	b123      	cbz	r3, 80072d0 <USBD_LL_DataOutStage+0x46>
 80072c6:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80072ca:	2a03      	cmp	r2, #3
 80072cc:	d100      	bne.n	80072d0 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 80072ce:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80072d0:	4628      	mov	r0, r5
 80072d2:	f000 faf8 	bl	80078c6 <USBD_CtlSendStatus>
 80072d6:	e7f0      	b.n	80072ba <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80072d8:	2b05      	cmp	r3, #5
 80072da:	d1ee      	bne.n	80072ba <USBD_LL_DataOutStage+0x30>
        pdev->ep0_state = USBD_EP0_IDLE;
 80072dc:	f8c5 126c 	str.w	r1, [r5, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 80072e0:	f006 ff40 	bl	800e164 <USBD_LL_StallEP>
 80072e4:	e7e9      	b.n	80072ba <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL) &&
 80072e6:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80072ea:	699b      	ldr	r3, [r3, #24]
 80072ec:	b12b      	cbz	r3, 80072fa <USBD_LL_DataOutStage+0x70>
 80072ee:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80072f2:	2a03      	cmp	r2, #3
 80072f4:	d101      	bne.n	80072fa <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 80072f6:	4798      	blx	r3
 80072f8:	e7df      	b.n	80072ba <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 80072fa:	2002      	movs	r0, #2
}
 80072fc:	bd70      	pop	{r4, r5, r6, pc}

080072fe <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 80072fe:	b570      	push	{r4, r5, r6, lr}
 8007300:	4613      	mov	r3, r2
 8007302:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8007304:	460e      	mov	r6, r1
 8007306:	2900      	cmp	r1, #0
 8007308:	d148      	bne.n	800739c <USBD_LL_DataInStage+0x9e>
  {
    pep = &pdev->ep_in[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800730a:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 800730e:	2a02      	cmp	r2, #2
 8007310:	d13d      	bne.n	800738e <USBD_LL_DataInStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8007312:	6a05      	ldr	r5, [r0, #32]
 8007314:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8007316:	4295      	cmp	r5, r2
 8007318:	d914      	bls.n	8007344 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 800731a:	1aaa      	subs	r2, r5, r2
 800731c:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800731e:	4619      	mov	r1, r3
 8007320:	b292      	uxth	r2, r2
 8007322:	f000 fac0 	bl	80078a6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007326:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007328:	461a      	mov	r2, r3
 800732a:	4619      	mov	r1, r3
 800732c:	4620      	mov	r0, r4
 800732e:	f006 ff65 	bl	800e1fc <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007332:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 8007336:	2b01      	cmp	r3, #1
 8007338:	f04f 0000 	mov.w	r0, #0
 800733c:	d13a      	bne.n	80073b4 <USBD_LL_DataInStage+0xb6>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 800733e:	f884 0278 	strb.w	r0, [r4, #632]	; 0x278
 8007342:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0U) &&
 8007344:	69c3      	ldr	r3, [r0, #28]
 8007346:	fbb3 f5f2 	udiv	r5, r3, r2
 800734a:	fb02 3515 	mls	r5, r2, r5, r3
 800734e:	b965      	cbnz	r5, 800736a <USBD_LL_DataInStage+0x6c>
 8007350:	429a      	cmp	r2, r3
 8007352:	d80a      	bhi.n	800736a <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 8007354:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8007358:	4293      	cmp	r3, r2
 800735a:	d206      	bcs.n	800736a <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800735c:	462a      	mov	r2, r5
 800735e:	f000 faa2 	bl	80078a6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007362:	f8c4 5270 	str.w	r5, [r4, #624]	; 0x270
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007366:	462b      	mov	r3, r5
 8007368:	e7de      	b.n	8007328 <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800736a:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	b12b      	cbz	r3, 800737e <USBD_LL_DataInStage+0x80>
 8007372:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
 8007376:	2a03      	cmp	r2, #3
 8007378:	d101      	bne.n	800737e <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev);
 800737a:	4620      	mov	r0, r4
 800737c:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 800737e:	2180      	movs	r1, #128	; 0x80
 8007380:	4620      	mov	r0, r4
 8007382:	f006 feef 	bl	800e164 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007386:	4620      	mov	r0, r4
 8007388:	f000 faa8 	bl	80078dc <USBD_CtlReceiveStatus>
 800738c:	e7d1      	b.n	8007332 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800738e:	f032 0304 	bics.w	r3, r2, #4
 8007392:	d1ce      	bne.n	8007332 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8007394:	2180      	movs	r1, #128	; 0x80
 8007396:	f006 fee5 	bl	800e164 <USBD_LL_StallEP>
 800739a:	e7ca      	b.n	8007332 <USBD_LL_DataInStage+0x34>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800739c:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80073a0:	695b      	ldr	r3, [r3, #20]
 80073a2:	b133      	cbz	r3, 80073b2 <USBD_LL_DataInStage+0xb4>
 80073a4:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80073a8:	2a03      	cmp	r2, #3
 80073aa:	d102      	bne.n	80073b2 <USBD_LL_DataInStage+0xb4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum);
 80073ac:	4798      	blx	r3
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80073ae:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 80073b0:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 80073b2:	2002      	movs	r0, #2
}
 80073b4:	bd70      	pop	{r4, r5, r6, pc}

080073b6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80073b6:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80073b8:	2200      	movs	r2, #0
{
 80073ba:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80073bc:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80073be:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80073c0:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80073c2:	2340      	movs	r3, #64	; 0x40
 80073c4:	f006 fea2 	bl	800e10c <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80073c8:	4633      	mov	r3, r6
 80073ca:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80073cc:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80073d0:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80073d4:	2200      	movs	r2, #0
 80073d6:	4620      	mov	r0, r4
 80073d8:	f006 fe98 	bl	800e10c <USBD_LL_OpenEP>
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config= 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 80073dc:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80073e0:	61a5      	str	r5, [r4, #24]
  pdev->ep0_state = USBD_EP0_IDLE;
 80073e2:	2100      	movs	r1, #0
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80073e4:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 80073e6:	f884 5274 	strb.w	r5, [r4, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 80073ea:	f8c4 126c 	str.w	r1, [r4, #620]	; 0x26c
  pdev->dev_config= 0U;
 80073ee:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 80073f0:	f8c4 127c 	str.w	r1, [r4, #636]	; 0x27c
  if (pdev->pClassData)
 80073f4:	b123      	cbz	r3, 8007400 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80073f6:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 80073fa:	4620      	mov	r0, r4
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	4798      	blx	r3
  }

  return USBD_OK;
}
 8007400:	2000      	movs	r0, #0
 8007402:	bd70      	pop	{r4, r5, r6, pc}

08007404 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8007404:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8007406:	2000      	movs	r0, #0
 8007408:	4770      	bx	lr

0800740a <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 800740a:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800740e:	f880 3275 	strb.w	r3, [r0, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007412:	2304      	movs	r3, #4
 8007414:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 8007418:	2000      	movs	r0, #0
 800741a:	4770      	bx	lr

0800741c <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;
 800741c:	f890 3275 	ldrb.w	r3, [r0, #629]	; 0x275
 8007420:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 8007424:	2000      	movs	r0, #0
 8007426:	4770      	bx	lr

08007428 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8007428:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800742a:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800742e:	2a03      	cmp	r2, #3
 8007430:	d104      	bne.n	800743c <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8007432:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8007436:	69db      	ldr	r3, [r3, #28]
 8007438:	b103      	cbz	r3, 800743c <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 800743a:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 800743c:	2000      	movs	r0, #0
 800743e:	bd08      	pop	{r3, pc}

08007440 <USBD_LL_IsoINIncomplete>:
 8007440:	2000      	movs	r0, #0
 8007442:	4770      	bx	lr

08007444 <USBD_LL_IsoOUTIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 8007444:	2000      	movs	r0, #0
 8007446:	4770      	bx	lr

08007448 <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 8007448:	2000      	movs	r0, #0
 800744a:	4770      	bx	lr

0800744c <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800744c:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800744e:	2201      	movs	r2, #1
 8007450:	f880 2274 	strb.w	r2, [r0, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007454:	f8d0 228c 	ldr.w	r2, [r0, #652]	; 0x28c
 8007458:	7901      	ldrb	r1, [r0, #4]
 800745a:	6852      	ldr	r2, [r2, #4]
 800745c:	4790      	blx	r2

  return USBD_OK;
}
 800745e:	2000      	movs	r0, #0
 8007460:	bd08      	pop	{r3, pc}

08007462 <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8007462:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80U);
 8007464:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8007466:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 8007468:	f006 fe7c 	bl	800e164 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800746c:	4620      	mov	r0, r4
 800746e:	2100      	movs	r1, #0
}
 8007470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 8007474:	f006 be76 	b.w	800e164 <USBD_LL_StallEP>

08007478 <USBD_StdDevReq>:
{
 8007478:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800747a:	780b      	ldrb	r3, [r1, #0]
 800747c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007480:	2b20      	cmp	r3, #32
{
 8007482:	4604      	mov	r4, r0
 8007484:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007486:	d014      	beq.n	80074b2 <USBD_StdDevReq+0x3a>
 8007488:	2b40      	cmp	r3, #64	; 0x40
 800748a:	d012      	beq.n	80074b2 <USBD_StdDevReq+0x3a>
 800748c:	2b00      	cmp	r3, #0
 800748e:	f040 8095 	bne.w	80075bc <USBD_StdDevReq+0x144>
    switch (req->bRequest)
 8007492:	784b      	ldrb	r3, [r1, #1]
 8007494:	2b09      	cmp	r3, #9
 8007496:	f200 8090 	bhi.w	80075ba <USBD_StdDevReq+0x142>
 800749a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800749e:	00e7      	.short	0x00e7
 80074a0:	008e0101 	.word	0x008e0101
 80074a4:	008e00fa 	.word	0x008e00fa
 80074a8:	00130082 	.word	0x00130082
 80074ac:	00d2008e 	.word	0x00d2008e
 80074b0:	00a0      	.short	0x00a0
    pdev->pClass->Setup(pdev, req);
 80074b2:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 80074b6:	4629      	mov	r1, r5
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	4620      	mov	r0, r4
 80074bc:	4798      	blx	r3
}
 80074be:	2000      	movs	r0, #0
 80074c0:	b003      	add	sp, #12
 80074c2:	bd30      	pop	{r4, r5, pc}
  switch (req->wValue >> 8)
 80074c4:	884b      	ldrh	r3, [r1, #2]
 80074c6:	0a1a      	lsrs	r2, r3, #8
 80074c8:	3a01      	subs	r2, #1
 80074ca:	2a0e      	cmp	r2, #14
 80074cc:	d875      	bhi.n	80075ba <USBD_StdDevReq+0x142>
 80074ce:	e8df f002 	tbb	[pc, r2]
 80074d2:	2824      	.short	0x2824
 80074d4:	55747435 	.word	0x55747435
 80074d8:	7474745e 	.word	0x7474745e
 80074dc:	74747474 	.word	0x74747474
 80074e0:	08          	.byte	0x08
 80074e1:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80074e2:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80074e6:	69db      	ldr	r3, [r3, #28]
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80074e8:	7c20      	ldrb	r0, [r4, #16]
 80074ea:	f10d 0106 	add.w	r1, sp, #6
 80074ee:	4798      	blx	r3
  if((len != 0U) && (req->wLength != 0U))
 80074f0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80074f4:	b152      	cbz	r2, 800750c <USBD_StdDevReq+0x94>
 80074f6:	88eb      	ldrh	r3, [r5, #6]
 80074f8:	b143      	cbz	r3, 800750c <USBD_StdDevReq+0x94>
    len = MIN(len, req->wLength);
 80074fa:	429a      	cmp	r2, r3
 80074fc:	bf28      	it	cs
 80074fe:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, pbuf, len);
 8007500:	4601      	mov	r1, r0
 8007502:	4620      	mov	r0, r4
    len = MIN(len, req->wLength);
 8007504:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, pbuf, len);
 8007508:	f000 f9c0 	bl	800788c <USBD_CtlSendData>
  if(req->wLength == 0U)
 800750c:	88eb      	ldrh	r3, [r5, #6]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d1d5      	bne.n	80074be <USBD_StdDevReq+0x46>
    USBD_CtlSendStatus(pdev);
 8007512:	4620      	mov	r0, r4
 8007514:	f000 f9d7 	bl	80078c6 <USBD_CtlSendStatus>
 8007518:	e7d1      	b.n	80074be <USBD_StdDevReq+0x46>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800751a:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	e7e2      	b.n	80074e8 <USBD_StdDevReq+0x70>
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8007522:	7c02      	ldrb	r2, [r0, #16]
 8007524:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8007528:	b932      	cbnz	r2, 8007538 <USBD_StdDevReq+0xc0>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800752a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800752c:	f10d 0006 	add.w	r0, sp, #6
 8007530:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007532:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007534:	7043      	strb	r3, [r0, #1]
 8007536:	e7db      	b.n	80074f0 <USBD_StdDevReq+0x78>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800753a:	e7f7      	b.n	800752c <USBD_StdDevReq+0xb4>
    switch ((uint8_t)(req->wValue))
 800753c:	b2db      	uxtb	r3, r3
 800753e:	2b05      	cmp	r3, #5
 8007540:	d83b      	bhi.n	80075ba <USBD_StdDevReq+0x142>
 8007542:	e8df f003 	tbb	[pc, r3]
 8007546:	0703      	.short	0x0703
 8007548:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800754c:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	e7c9      	b.n	80074e8 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007554:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	e7c5      	b.n	80074e8 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800755c:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8007560:	68db      	ldr	r3, [r3, #12]
 8007562:	e7c1      	b.n	80074e8 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007564:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8007568:	691b      	ldr	r3, [r3, #16]
 800756a:	e7bd      	b.n	80074e8 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800756c:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8007570:	695b      	ldr	r3, [r3, #20]
 8007572:	e7b9      	b.n	80074e8 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007574:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8007578:	699b      	ldr	r3, [r3, #24]
 800757a:	e7b5      	b.n	80074e8 <USBD_StdDevReq+0x70>
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800757c:	7c03      	ldrb	r3, [r0, #16]
 800757e:	b9e3      	cbnz	r3, 80075ba <USBD_StdDevReq+0x142>
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007580:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8007584:	f10d 0006 	add.w	r0, sp, #6
 8007588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800758a:	4798      	blx	r3
 800758c:	e7b0      	b.n	80074f0 <USBD_StdDevReq+0x78>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800758e:	7c03      	ldrb	r3, [r0, #16]
 8007590:	b99b      	cbnz	r3, 80075ba <USBD_StdDevReq+0x142>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007592:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8007596:	f10d 0006 	add.w	r0, sp, #6
 800759a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800759c:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800759e:	2307      	movs	r3, #7
 80075a0:	e7c8      	b.n	8007534 <USBD_StdDevReq+0xbc>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80075a2:	888b      	ldrh	r3, [r1, #4]
 80075a4:	b94b      	cbnz	r3, 80075ba <USBD_StdDevReq+0x142>
 80075a6:	88cb      	ldrh	r3, [r1, #6]
 80075a8:	b93b      	cbnz	r3, 80075ba <USBD_StdDevReq+0x142>
 80075aa:	884d      	ldrh	r5, [r1, #2]
 80075ac:	2d7f      	cmp	r5, #127	; 0x7f
 80075ae:	d804      	bhi.n	80075ba <USBD_StdDevReq+0x142>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075b0:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80075b4:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80075b6:	b2e9      	uxtb	r1, r5
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075b8:	d103      	bne.n	80075c2 <USBD_StdDevReq+0x14a>
      USBD_CtlError(pdev, req);
 80075ba:	4620      	mov	r0, r4
    USBD_CtlError(pdev, req);
 80075bc:	f7ff ff51 	bl	8007462 <USBD_CtlError.constprop.1>
    break;
 80075c0:	e77d      	b.n	80074be <USBD_StdDevReq+0x46>
      pdev->dev_address = dev_addr;
 80075c2:	f880 1276 	strb.w	r1, [r0, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80075c6:	f006 fdfd 	bl	800e1c4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80075ca:	4620      	mov	r0, r4
 80075cc:	f000 f97b 	bl	80078c6 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80075d0:	b11d      	cbz	r5, 80075da <USBD_StdDevReq+0x162>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80075d2:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 80075d4:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 80075d8:	e771      	b.n	80074be <USBD_StdDevReq+0x46>
 80075da:	2301      	movs	r3, #1
 80075dc:	e7fa      	b.n	80075d4 <USBD_StdDevReq+0x15c>
  cfgidx = (uint8_t)(req->wValue);
 80075de:	7889      	ldrb	r1, [r1, #2]
 80075e0:	4d35      	ldr	r5, [pc, #212]	; (80076b8 <USBD_StdDevReq+0x240>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80075e2:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 80075e4:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80075e6:	d8e8      	bhi.n	80075ba <USBD_StdDevReq+0x142>
    switch (pdev->dev_state)
 80075e8:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80075ec:	2b02      	cmp	r3, #2
 80075ee:	d008      	beq.n	8007602 <USBD_StdDevReq+0x18a>
 80075f0:	2b03      	cmp	r3, #3
 80075f2:	d014      	beq.n	800761e <USBD_StdDevReq+0x1a6>
      USBD_CtlError(pdev, req);
 80075f4:	f7ff ff35 	bl	8007462 <USBD_CtlError.constprop.1>
      USBD_ClrClassConfig(pdev, cfgidx);
 80075f8:	7829      	ldrb	r1, [r5, #0]
 80075fa:	4620      	mov	r0, r4
 80075fc:	f7ff fe11 	bl	8007222 <USBD_ClrClassConfig>
 8007600:	e75d      	b.n	80074be <USBD_StdDevReq+0x46>
      if (cfgidx)
 8007602:	2900      	cmp	r1, #0
 8007604:	d085      	beq.n	8007512 <USBD_StdDevReq+0x9a>
        pdev->dev_config = cfgidx;
 8007606:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007608:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 800760a:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800760c:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007610:	4620      	mov	r0, r4
 8007612:	f7ff fdfb 	bl	800720c <USBD_SetClassConfig>
 8007616:	2802      	cmp	r0, #2
 8007618:	f47f af7b 	bne.w	8007512 <USBD_StdDevReq+0x9a>
 800761c:	e7cd      	b.n	80075ba <USBD_StdDevReq+0x142>
      if (cfgidx == 0U)
 800761e:	b931      	cbnz	r1, 800762e <USBD_StdDevReq+0x1b6>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007620:	2302      	movs	r3, #2
 8007622:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8007626:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8007628:	f7ff fdfb 	bl	8007222 <USBD_ClrClassConfig>
 800762c:	e771      	b.n	8007512 <USBD_StdDevReq+0x9a>
      else if (cfgidx != pdev->dev_config)
 800762e:	6841      	ldr	r1, [r0, #4]
 8007630:	2901      	cmp	r1, #1
 8007632:	f43f af6e 	beq.w	8007512 <USBD_StdDevReq+0x9a>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007636:	b2c9      	uxtb	r1, r1
 8007638:	f7ff fdf3 	bl	8007222 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800763c:	7829      	ldrb	r1, [r5, #0]
 800763e:	6061      	str	r1, [r4, #4]
 8007640:	e7e6      	b.n	8007610 <USBD_StdDevReq+0x198>
  if (req->wLength != 1U)
 8007642:	88ca      	ldrh	r2, [r1, #6]
 8007644:	2a01      	cmp	r2, #1
 8007646:	d1b8      	bne.n	80075ba <USBD_StdDevReq+0x142>
    switch (pdev->dev_state)
 8007648:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800764c:	2b00      	cmp	r3, #0
 800764e:	d0b4      	beq.n	80075ba <USBD_StdDevReq+0x142>
 8007650:	2b02      	cmp	r3, #2
 8007652:	d903      	bls.n	800765c <USBD_StdDevReq+0x1e4>
 8007654:	2b03      	cmp	r3, #3
 8007656:	d1b0      	bne.n	80075ba <USBD_StdDevReq+0x142>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007658:	1d01      	adds	r1, r0, #4
 800765a:	e003      	b.n	8007664 <USBD_StdDevReq+0x1ec>
      pdev->dev_default_config = 0U;
 800765c:	4601      	mov	r1, r0
 800765e:	2300      	movs	r3, #0
 8007660:	f841 3f08 	str.w	r3, [r1, #8]!
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007664:	4620      	mov	r0, r4
 8007666:	f000 f911 	bl	800788c <USBD_CtlSendData>
 800766a:	e728      	b.n	80074be <USBD_StdDevReq+0x46>
  switch (pdev->dev_state)
 800766c:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8007670:	3b01      	subs	r3, #1
 8007672:	2b02      	cmp	r3, #2
 8007674:	d8a1      	bhi.n	80075ba <USBD_StdDevReq+0x142>
    if(req->wLength != 0x2U)
 8007676:	88cb      	ldrh	r3, [r1, #6]
 8007678:	2b02      	cmp	r3, #2
 800767a:	d19e      	bne.n	80075ba <USBD_StdDevReq+0x142>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800767c:	2301      	movs	r3, #1
 800767e:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup)
 8007680:	f8d0 327c 	ldr.w	r3, [r0, #636]	; 0x27c
 8007684:	b10b      	cbz	r3, 800768a <USBD_StdDevReq+0x212>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007686:	2303      	movs	r3, #3
 8007688:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800768a:	2202      	movs	r2, #2
 800768c:	f104 010c 	add.w	r1, r4, #12
 8007690:	e7e8      	b.n	8007664 <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007692:	884b      	ldrh	r3, [r1, #2]
 8007694:	2b01      	cmp	r3, #1
 8007696:	f47f af12 	bne.w	80074be <USBD_StdDevReq+0x46>
    pdev->dev_remote_wakeup = 1U;
 800769a:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
 800769e:	e738      	b.n	8007512 <USBD_StdDevReq+0x9a>
  switch (pdev->dev_state)
 80076a0:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80076a4:	3b01      	subs	r3, #1
 80076a6:	2b02      	cmp	r3, #2
 80076a8:	d887      	bhi.n	80075ba <USBD_StdDevReq+0x142>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80076aa:	884b      	ldrh	r3, [r1, #2]
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	f47f af06 	bne.w	80074be <USBD_StdDevReq+0x46>
      pdev->dev_remote_wakeup = 0U;
 80076b2:	2300      	movs	r3, #0
 80076b4:	e7f1      	b.n	800769a <USBD_StdDevReq+0x222>
 80076b6:	bf00      	nop
 80076b8:	20004dfc 	.word	0x20004dfc

080076bc <USBD_StdItfReq>:
{
 80076bc:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076be:	780b      	ldrb	r3, [r1, #0]
 80076c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80076c4:	2b20      	cmp	r3, #32
{
 80076c6:	4604      	mov	r4, r0
 80076c8:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076ca:	d002      	beq.n	80076d2 <USBD_StdItfReq+0x16>
 80076cc:	2b40      	cmp	r3, #64	; 0x40
 80076ce:	d000      	beq.n	80076d2 <USBD_StdItfReq+0x16>
 80076d0:	b9b3      	cbnz	r3, 8007700 <USBD_StdItfReq+0x44>
    switch (pdev->dev_state)
 80076d2:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 80076d6:	3b01      	subs	r3, #1
 80076d8:	2b02      	cmp	r3, #2
 80076da:	d810      	bhi.n	80076fe <USBD_StdItfReq+0x42>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80076dc:	792b      	ldrb	r3, [r5, #4]
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d80d      	bhi.n	80076fe <USBD_StdItfReq+0x42>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80076e2:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 80076e6:	4629      	mov	r1, r5
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	4620      	mov	r0, r4
 80076ec:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 80076ee:	88eb      	ldrh	r3, [r5, #6]
 80076f0:	b91b      	cbnz	r3, 80076fa <USBD_StdItfReq+0x3e>
 80076f2:	b910      	cbnz	r0, 80076fa <USBD_StdItfReq+0x3e>
          USBD_CtlSendStatus(pdev);
 80076f4:	4620      	mov	r0, r4
 80076f6:	f000 f8e6 	bl	80078c6 <USBD_CtlSendStatus>
}
 80076fa:	2000      	movs	r0, #0
 80076fc:	bd38      	pop	{r3, r4, r5, pc}
      USBD_CtlError(pdev, req);
 80076fe:	4620      	mov	r0, r4
    USBD_CtlError(pdev, req);
 8007700:	f7ff feaf 	bl	8007462 <USBD_CtlError.constprop.1>
    break;
 8007704:	e7f9      	b.n	80076fa <USBD_StdItfReq+0x3e>

08007706 <USBD_StdEPReq>:
{
 8007706:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007708:	780a      	ldrb	r2, [r1, #0]
 800770a:	f002 0260 	and.w	r2, r2, #96	; 0x60
 800770e:	2a20      	cmp	r2, #32
{
 8007710:	4604      	mov	r4, r0
 8007712:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007714:	d013      	beq.n	800773e <USBD_StdEPReq+0x38>
 8007716:	2a40      	cmp	r2, #64	; 0x40
 8007718:	d011      	beq.n	800773e <USBD_StdEPReq+0x38>
 800771a:	b96a      	cbnz	r2, 8007738 <USBD_StdEPReq+0x32>
    switch (req->bRequest)
 800771c:	785d      	ldrb	r5, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 800771e:	888a      	ldrh	r2, [r1, #4]
    switch (req->bRequest)
 8007720:	2d01      	cmp	r5, #1
  ep_addr  = LOBYTE(req->wIndex);
 8007722:	b2d1      	uxtb	r1, r2
    switch (req->bRequest)
 8007724:	d01f      	beq.n	8007766 <USBD_StdEPReq+0x60>
 8007726:	d335      	bcc.n	8007794 <USBD_StdEPReq+0x8e>
 8007728:	2d03      	cmp	r5, #3
 800772a:	d105      	bne.n	8007738 <USBD_StdEPReq+0x32>
      switch (pdev->dev_state)
 800772c:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8007730:	2a02      	cmp	r2, #2
 8007732:	d026      	beq.n	8007782 <USBD_StdEPReq+0x7c>
 8007734:	2a03      	cmp	r2, #3
 8007736:	d00a      	beq.n	800774e <USBD_StdEPReq+0x48>
    USBD_CtlError(pdev, req);
 8007738:	f7ff fe93 	bl	8007462 <USBD_CtlError.constprop.1>
    break;
 800773c:	e005      	b.n	800774a <USBD_StdEPReq+0x44>
    pdev->pClass->Setup (pdev, req);
 800773e:	f8d4 228c 	ldr.w	r2, [r4, #652]	; 0x28c
 8007742:	4619      	mov	r1, r3
 8007744:	6892      	ldr	r2, [r2, #8]
 8007746:	4620      	mov	r0, r4
 8007748:	4790      	blx	r2
}
 800774a:	2000      	movs	r0, #0
 800774c:	bd38      	pop	{r3, r4, r5, pc}
        if (req->wValue == USB_FEATURE_EP_HALT)
 800774e:	885a      	ldrh	r2, [r3, #2]
 8007750:	b92a      	cbnz	r2, 800775e <USBD_StdEPReq+0x58>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007752:	064a      	lsls	r2, r1, #25
 8007754:	d003      	beq.n	800775e <USBD_StdEPReq+0x58>
 8007756:	88db      	ldrh	r3, [r3, #6]
 8007758:	b90b      	cbnz	r3, 800775e <USBD_StdEPReq+0x58>
            USBD_LL_StallEP(pdev, ep_addr);
 800775a:	f006 fd03 	bl	800e164 <USBD_LL_StallEP>
        USBD_CtlSendStatus(pdev);
 800775e:	4620      	mov	r0, r4
 8007760:	f000 f8b1 	bl	80078c6 <USBD_CtlSendStatus>
        break;
 8007764:	e7f1      	b.n	800774a <USBD_StdEPReq+0x44>
      switch (pdev->dev_state)
 8007766:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800776a:	2a02      	cmp	r2, #2
 800776c:	d009      	beq.n	8007782 <USBD_StdEPReq+0x7c>
 800776e:	2a03      	cmp	r2, #3
 8007770:	d1e2      	bne.n	8007738 <USBD_StdEPReq+0x32>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007772:	885b      	ldrh	r3, [r3, #2]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d1e8      	bne.n	800774a <USBD_StdEPReq+0x44>
          if ((ep_addr & 0x7FU) != 0x00U)
 8007778:	064d      	lsls	r5, r1, #25
 800777a:	d0f0      	beq.n	800775e <USBD_StdEPReq+0x58>
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800777c:	f006 fd00 	bl	800e180 <USBD_LL_ClearStallEP>
 8007780:	e7ed      	b.n	800775e <USBD_StdEPReq+0x58>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007782:	064b      	lsls	r3, r1, #25
 8007784:	d017      	beq.n	80077b6 <USBD_StdEPReq+0xb0>
          USBD_LL_StallEP(pdev, ep_addr);
 8007786:	f006 fced 	bl	800e164 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800778a:	2180      	movs	r1, #128	; 0x80
 800778c:	4620      	mov	r0, r4
 800778e:	f006 fce9 	bl	800e164 <USBD_LL_StallEP>
 8007792:	e7da      	b.n	800774a <USBD_StdEPReq+0x44>
      switch (pdev->dev_state)
 8007794:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8007798:	2b02      	cmp	r3, #2
 800779a:	d00e      	beq.n	80077ba <USBD_StdEPReq+0xb4>
 800779c:	2b03      	cmp	r3, #3
 800779e:	d1cb      	bne.n	8007738 <USBD_StdEPReq+0x32>
        if((ep_addr & 0x80U) == 0x80U)
 80077a0:	f012 0f80 	tst.w	r2, #128	; 0x80
 80077a4:	f04f 0314 	mov.w	r3, #20
 80077a8:	f001 020f 	and.w	r2, r1, #15
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80077ac:	fb03 0202 	mla	r2, r3, r2, r0
        if((ep_addr & 0x80U) == 0x80U)
 80077b0:	d012      	beq.n	80077d8 <USBD_StdEPReq+0xd2>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80077b2:	6992      	ldr	r2, [r2, #24]
 80077b4:	b9da      	cbnz	r2, 80077ee <USBD_StdEPReq+0xe8>
          USBD_CtlError(pdev, req);
 80077b6:	4620      	mov	r0, r4
 80077b8:	e7be      	b.n	8007738 <USBD_StdEPReq+0x32>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80077ba:	0649      	lsls	r1, r1, #25
 80077bc:	d1fb      	bne.n	80077b6 <USBD_StdEPReq+0xb0>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80077be:	0613      	lsls	r3, r2, #24
 80077c0:	bf4c      	ite	mi
 80077c2:	f100 0114 	addmi.w	r1, r0, #20
 80077c6:	f500 71a0 	addpl.w	r1, r0, #320	; 0x140
          pep->status = 0x0000U;
 80077ca:	2300      	movs	r3, #0
 80077cc:	600b      	str	r3, [r1, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80077ce:	2202      	movs	r2, #2
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80077d0:	4620      	mov	r0, r4
 80077d2:	f000 f85b 	bl	800788c <USBD_CtlSendData>
          break;
 80077d6:	e7b8      	b.n	800774a <USBD_StdEPReq+0x44>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80077d8:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
 80077dc:	2a00      	cmp	r2, #0
 80077de:	d0ea      	beq.n	80077b6 <USBD_StdEPReq+0xb0>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80077e0:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80077e4:	fb03 0505 	mla	r5, r3, r5, r0
 80077e8:	f505 75a0 	add.w	r5, r5, #320	; 0x140
 80077ec:	e004      	b.n	80077f8 <USBD_StdEPReq+0xf2>
 80077ee:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80077f2:	fb05 3503 	mla	r5, r5, r3, r3
 80077f6:	4405      	add	r5, r0
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80077f8:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 80077fc:	d103      	bne.n	8007806 <USBD_StdEPReq+0x100>
            pep->status = 0x0001U;
 80077fe:	602b      	str	r3, [r5, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007800:	2202      	movs	r2, #2
 8007802:	4629      	mov	r1, r5
 8007804:	e7e4      	b.n	80077d0 <USBD_StdEPReq+0xca>
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8007806:	4620      	mov	r0, r4
 8007808:	f006 fcc8 	bl	800e19c <USBD_LL_IsStallEP>
 800780c:	b108      	cbz	r0, 8007812 <USBD_StdEPReq+0x10c>
            pep->status = 0x0001U;
 800780e:	2301      	movs	r3, #1
 8007810:	e7f5      	b.n	80077fe <USBD_StdEPReq+0xf8>
            pep->status = 0x0000U;
 8007812:	6028      	str	r0, [r5, #0]
 8007814:	e7f4      	b.n	8007800 <USBD_StdEPReq+0xfa>

08007816 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8007816:	780b      	ldrb	r3, [r1, #0]
 8007818:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800781a:	784b      	ldrb	r3, [r1, #1]
 800781c:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800781e:	78ca      	ldrb	r2, [r1, #3]
 8007820:	788b      	ldrb	r3, [r1, #2]
 8007822:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8007826:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8007828:	794a      	ldrb	r2, [r1, #5]
 800782a:	790b      	ldrb	r3, [r1, #4]
 800782c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8007830:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8007832:	79ca      	ldrb	r2, [r1, #7]
 8007834:	798b      	ldrb	r3, [r1, #6]
 8007836:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800783a:	80c3      	strh	r3, [r0, #6]
 800783c:	4770      	bx	lr

0800783e <USBD_CtlError>:
{
 800783e:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev , 0x80U);
 8007840:	2180      	movs	r1, #128	; 0x80
{
 8007842:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 8007844:	f006 fc8e 	bl	800e164 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8007848:	4620      	mov	r0, r4
 800784a:	2100      	movs	r1, #0
}
 800784c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 8007850:	f006 bc88 	b.w	800e164 <USBD_LL_StallEP>

08007854 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007854:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 8007856:	b188      	cbz	r0, 800787c <USBD_GetString+0x28>
 8007858:	4605      	mov	r5, r0
 800785a:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0U;

    while (*buf != '\0')
 800785c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007860:	b2db      	uxtb	r3, r3
 8007862:	2c00      	cmp	r4, #0
 8007864:	d1f9      	bne.n	800785a <USBD_GetString+0x6>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007866:	3301      	adds	r3, #1
 8007868:	005b      	lsls	r3, r3, #1
 800786a:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800786c:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800786e:	2303      	movs	r3, #3
 8007870:	704b      	strb	r3, [r1, #1]
 8007872:	3801      	subs	r0, #1
 8007874:	2302      	movs	r3, #2
    while (*desc != '\0')
 8007876:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800787a:	b905      	cbnz	r5, 800787e <USBD_GetString+0x2a>
 800787c:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 800787e:	1c5a      	adds	r2, r3, #1
 8007880:	b2d2      	uxtb	r2, r2
 8007882:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0U;
 8007884:	3302      	adds	r3, #2
 8007886:	b2db      	uxtb	r3, r3
 8007888:	548c      	strb	r4, [r1, r2]
 800788a:	e7f4      	b.n	8007876 <USBD_GetString+0x22>

0800788c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800788c:	b510      	push	{r4, lr}
 800788e:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007890:	2202      	movs	r2, #2
 8007892:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8007896:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8007898:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 800789a:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800789c:	2100      	movs	r1, #0
 800789e:	f006 fc9f 	bl	800e1e0 <USBD_LL_Transmit>

  return USBD_OK;
}
 80078a2:	2000      	movs	r0, #0
 80078a4:	bd10      	pop	{r4, pc}

080078a6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 80078a6:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80078a8:	4613      	mov	r3, r2
 80078aa:	460a      	mov	r2, r1
 80078ac:	2100      	movs	r1, #0
 80078ae:	f006 fc97 	bl	800e1e0 <USBD_LL_Transmit>

  return USBD_OK;
}
 80078b2:	2000      	movs	r0, #0
 80078b4:	bd08      	pop	{r3, pc}

080078b6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 80078b6:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80078b8:	4613      	mov	r3, r2
 80078ba:	460a      	mov	r2, r1
 80078bc:	2100      	movs	r1, #0
 80078be:	f006 fc9d 	bl	800e1fc <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80078c2:	2000      	movs	r0, #0
 80078c4:	bd08      	pop	{r3, pc}

080078c6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 80078c6:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80078c8:	2304      	movs	r3, #4
 80078ca:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80078ce:	2300      	movs	r3, #0
 80078d0:	461a      	mov	r2, r3
 80078d2:	4619      	mov	r1, r3
 80078d4:	f006 fc84 	bl	800e1e0 <USBD_LL_Transmit>

  return USBD_OK;
}
 80078d8:	2000      	movs	r0, #0
 80078da:	bd08      	pop	{r3, pc}

080078dc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80078dc:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80078de:	2305      	movs	r3, #5
 80078e0:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80078e4:	2300      	movs	r3, #0
 80078e6:	461a      	mov	r2, r3
 80078e8:	4619      	mov	r1, r3
 80078ea:	f006 fc87 	bl	800e1fc <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80078ee:	2000      	movs	r0, #0
 80078f0:	bd08      	pop	{r3, pc}
	...

080078f4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80078f4:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 80078f6:	4b0f      	ldr	r3, [pc, #60]	; (8007934 <FATFS_LinkDriverEx+0x40>)
 80078f8:	7a5d      	ldrb	r5, [r3, #9]
 80078fa:	f005 04ff 	and.w	r4, r5, #255	; 0xff
 80078fe:	b9b5      	cbnz	r5, 800792e <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007900:	7a5d      	ldrb	r5, [r3, #9]
 8007902:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 8007904:	7a5d      	ldrb	r5, [r3, #9]
 8007906:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800790a:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 800790c:	7a58      	ldrb	r0, [r3, #9]
 800790e:	4418      	add	r0, r3
 8007910:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8007912:	7a5a      	ldrb	r2, [r3, #9]
 8007914:	b2d2      	uxtb	r2, r2
 8007916:	1c50      	adds	r0, r2, #1
 8007918:	b2c0      	uxtb	r0, r0
 800791a:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 800791c:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 800791e:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 8007920:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8007922:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 8007924:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 8007926:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8007928:	70cc      	strb	r4, [r1, #3]
 800792a:	4620      	mov	r0, r4
 800792c:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 800792e:	2001      	movs	r0, #1
    ret = 0;
  }

  return ret;
}
 8007930:	bd30      	pop	{r4, r5, pc}
 8007932:	bf00      	nop
 8007934:	20004e00 	.word	0x20004e00

08007938 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 8007938:	2200      	movs	r2, #0
 800793a:	f7ff bfdb 	b.w	80078f4 <FATFS_LinkDriverEx>
	...

08007940 <main_screen_event>:
	}
}

static void main_screen_event(lv_obj_t * obj, lv_event_t event)
{
    switch(event) {
 8007940:	2911      	cmp	r1, #17
{
 8007942:	b508      	push	{r3, lr}
    switch(event) {
 8007944:	d10b      	bne.n	800795e <main_screen_event+0x1e>
        case LV_EVENT_APPLY:
            //printf("Released\n");
            lv_task_del(Task_Principal);
 8007946:	4b06      	ldr	r3, [pc, #24]	; (8007960 <main_screen_event+0x20>)
 8007948:	6818      	ldr	r0, [r3, #0]
 800794a:	f00c fe73 	bl	8014634 <lv_task_del>
    		lv_obj_del(Tela_Principal);
 800794e:	4b05      	ldr	r3, [pc, #20]	; (8007964 <main_screen_event+0x24>)
 8007950:	6818      	ldr	r0, [r3, #0]
 8007952:	f007 fca8 	bl	800f2a6 <lv_obj_del>
    		screen_sel();
            break;
    }
}
 8007956:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    		screen_sel();
 800795a:	f006 b951 	b.w	800dc00 <screen_sel>
 800795e:	bd08      	pop	{r3, pc}
 8007960:	20004e0c 	.word	0x20004e0c
 8007964:	20004e10 	.word	0x20004e10

08007968 <print_frequencia>:
{
 8007968:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	sprintf(buffer, "%d%d%d.%d%d%d Mhz", q0, q1, q2, q3, q4, q5);
 800796c:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8007a20 <print_frequencia+0xb8>
	lv_style_copy(&style_txt1, &lv_style_plain);
 8007970:	4e24      	ldr	r6, [pc, #144]	; (8007a04 <print_frequencia+0x9c>)
	sprintf(buffer, "%d%d%d.%d%d%d Mhz", q0, q1, q2, q3, q4, q5);
 8007972:	4925      	ldr	r1, [pc, #148]	; (8007a08 <print_frequencia+0xa0>)
{
 8007974:	b085      	sub	sp, #20
	sprintf(buffer, "%d%d%d.%d%d%d Mhz", q0, q1, q2, q3, q4, q5);
 8007976:	2400      	movs	r4, #0
 8007978:	2701      	movs	r7, #1
 800797a:	f04f 0803 	mov.w	r8, #3
 800797e:	463a      	mov	r2, r7
 8007980:	4623      	mov	r3, r4
 8007982:	9403      	str	r4, [sp, #12]
 8007984:	9402      	str	r4, [sp, #8]
 8007986:	9701      	str	r7, [sp, #4]
 8007988:	f8cd 8000 	str.w	r8, [sp]
 800798c:	4648      	mov	r0, r9
 800798e:	f012 f8c5 	bl	8019b1c <sprintf>
	lv_style_copy(&style_txt1, &lv_style_plain);
 8007992:	4630      	mov	r0, r6
 8007994:	491d      	ldr	r1, [pc, #116]	; (8007a0c <print_frequencia+0xa4>)
 8007996:	f008 f971 	bl	800fc7c <lv_style_copy>
	style_txt1.text.font = &lv_font_eurostile_24;
 800799a:	4b1d      	ldr	r3, [pc, #116]	; (8007a10 <print_frequencia+0xa8>)
 800799c:	6273      	str	r3, [r6, #36]	; 0x24
	style_txt1.text.color = LV_COLOR_WHITE;
 800799e:	4b1d      	ldr	r3, [pc, #116]	; (8007a14 <print_frequencia+0xac>)
	style_txt1.text.letter_space = 0;
 80079a0:	8534      	strh	r4, [r6, #40]	; 0x28
	style_txt1.text.color = LV_COLOR_WHITE;
 80079a2:	881b      	ldrh	r3, [r3, #0]
 80079a4:	8433      	strh	r3, [r6, #32]
	lv_obj_t * txt_freq = lv_label_create(Tela_Principal, NULL);
 80079a6:	4b1c      	ldr	r3, [pc, #112]	; (8007a18 <print_frequencia+0xb0>)
	style_txt1.text.line_space = 0;
 80079a8:	8574      	strh	r4, [r6, #42]	; 0x2a
	lv_obj_t * txt_freq = lv_label_create(Tela_Principal, NULL);
 80079aa:	6818      	ldr	r0, [r3, #0]
 80079ac:	4621      	mov	r1, r4
 80079ae:	f010 f859 	bl	8017a64 <lv_label_create>
	lv_obj_set_event_cb(txt_freq, main_screen_event);   		// Assign an event callback
 80079b2:	491a      	ldr	r1, [pc, #104]	; (8007a1c <print_frequencia+0xb4>)
	lv_obj_t * txt_freq = lv_label_create(Tela_Principal, NULL);
 80079b4:	4605      	mov	r5, r0
	lv_obj_set_event_cb(txt_freq, main_screen_event);   		// Assign an event callback
 80079b6:	f006 fec4 	bl	800e742 <lv_obj_set_event_cb>
	lv_obj_set_style(txt_freq, &style_txt1); 					// Configura o estilo criado
 80079ba:	4631      	mov	r1, r6
 80079bc:	4628      	mov	r0, r5
 80079be:	f007 fd01 	bl	800f3c4 <lv_obj_set_style>
	lv_label_set_long_mode(txt_freq, LV_LABEL_LONG_EXPAND); 	// Quebra as linhas longas
 80079c2:	4621      	mov	r1, r4
 80079c4:	4628      	mov	r0, r5
 80079c6:	f00f fff7 	bl	80179b8 <lv_label_set_long_mode>
	lv_label_set_recolor(txt_freq, true); 						// Ativa recolorizar por comandos no texto
 80079ca:	4639      	mov	r1, r7
 80079cc:	4628      	mov	r0, r5
 80079ce:	f010 f835 	bl	8017a3c <lv_label_set_recolor>
	lv_label_set_align(txt_freq, LV_ALIGN_IN_TOP_MID); 			// Centraliza linhas alinhadas
 80079d2:	4628      	mov	r0, r5
 80079d4:	2102      	movs	r1, #2
 80079d6:	f00f fc8e 	bl	80172f6 <lv_label_set_align>
	lv_label_set_text(txt_freq, buffer);
 80079da:	4649      	mov	r1, r9
 80079dc:	4628      	mov	r0, r5
 80079de:	f00f ff97 	bl	8017910 <lv_label_set_text>
	lv_obj_set_width(txt_freq, 300); 							// Configuura o comprimento
 80079e2:	4628      	mov	r0, r5
 80079e4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80079e8:	f007 fc34 	bl	800f254 <lv_obj_set_width>
	lv_obj_align(txt_freq, NULL, LV_ALIGN_IN_TOP_MID, 0, 3); 	// Alinha ao centro
 80079ec:	f8cd 8000 	str.w	r8, [sp]
 80079f0:	4623      	mov	r3, r4
 80079f2:	2202      	movs	r2, #2
 80079f4:	4621      	mov	r1, r4
 80079f6:	4628      	mov	r0, r5
 80079f8:	f007 f842 	bl	800ea80 <lv_obj_align>
}
 80079fc:	b005      	add	sp, #20
 80079fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a02:	bf00      	nop
 8007a04:	20005090 	.word	0x20005090
 8007a08:	0802b402 	.word	0x0802b402
 8007a0c:	2000c4a4 	.word	0x2000c4a4
 8007a10:	2000132c 	.word	0x2000132c
 8007a14:	0801c5c0 	.word	0x0801c5c0
 8007a18:	20004e10 	.word	0x20004e10
 8007a1c:	08007941 	.word	0x08007941
 8007a20:	20004ce8 	.word	0x20004ce8

08007a24 <print_pot>:
{
 8007a24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	if(!falha) {
 8007a28:	4b76      	ldr	r3, [pc, #472]	; (8007c04 <print_pot+0x1e0>)
 8007a2a:	681c      	ldr	r4, [r3, #0]
 8007a2c:	2c00      	cmp	r4, #0
 8007a2e:	f040 80e5 	bne.w	8007bfc <print_pot+0x1d8>
		lv_style_copy(&style_txt_fwd, &lv_style_plain);
 8007a32:	4d75      	ldr	r5, [pc, #468]	; (8007c08 <print_pot+0x1e4>)
 8007a34:	4975      	ldr	r1, [pc, #468]	; (8007c0c <print_pot+0x1e8>)
 8007a36:	edcd 0a03 	vstr	s1, [sp, #12]
 8007a3a:	4628      	mov	r0, r5
 8007a3c:	ed8d 0a02 	vstr	s0, [sp, #8]
 8007a40:	f008 f91c 	bl	800fc7c <lv_style_copy>
		style_txt_fwd.text.color = LV_COLOR_CYAN;
 8007a44:	f895 3020 	ldrb.w	r3, [r5, #32]
		txt_fwd = lv_label_create(Tela_Principal, NULL);
 8007a48:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 8007c38 <print_pot+0x214>
		style_txt_fwd.text.font = &lv_font_eurostile_24;
 8007a4c:	f8df 91ec 	ldr.w	r9, [pc, #492]	; 8007c3c <print_pot+0x218>
 8007a50:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
		style_txt_fwd.text.color = LV_COLOR_CYAN;
 8007a54:	f043 031f 	orr.w	r3, r3, #31
 8007a58:	f885 3020 	strb.w	r3, [r5, #32]
 8007a5c:	8c2b      	ldrh	r3, [r5, #32]
		txt_fwd = lv_label_create(Tela_Principal, NULL);
 8007a5e:	4f6c      	ldr	r7, [pc, #432]	; (8007c10 <print_pot+0x1ec>)
		style_txt_fwd.text.color = LV_COLOR_CYAN;
 8007a60:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 8007a64:	842b      	strh	r3, [r5, #32]
 8007a66:	0a1b      	lsrs	r3, r3, #8
 8007a68:	f364 03c7 	bfi	r3, r4, #3, #5
 8007a6c:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
		style_txt_fwd.text.letter_space = 1;
 8007a70:	2601      	movs	r6, #1
		txt_fwd = lv_label_create(Tela_Principal, NULL);
 8007a72:	4621      	mov	r1, r4
 8007a74:	f8d8 0000 	ldr.w	r0, [r8]
		style_txt_fwd.text.letter_space = 1;
 8007a78:	852e      	strh	r6, [r5, #40]	; 0x28
		style_txt_fwd.text.line_space = 1;
 8007a7a:	856e      	strh	r6, [r5, #42]	; 0x2a
		txt_fwd = lv_label_create(Tela_Principal, NULL);
 8007a7c:	f00f fff2 	bl	8017a64 <lv_label_create>
		lv_obj_set_style(txt_fwd, &style_txt_fwd); 							// Configura o estilo criado
 8007a80:	4629      	mov	r1, r5
		txt_fwd = lv_label_create(Tela_Principal, NULL);
 8007a82:	6038      	str	r0, [r7, #0]
		lv_obj_set_style(txt_fwd, &style_txt_fwd); 							// Configura o estilo criado
 8007a84:	f007 fc9e 	bl	800f3c4 <lv_obj_set_style>
		lv_label_set_long_mode(txt_fwd, LV_LABEL_LONG_EXPAND); 				// Quebra as linhas longas
 8007a88:	6838      	ldr	r0, [r7, #0]
 8007a8a:	4621      	mov	r1, r4
 8007a8c:	f00f ff94 	bl	80179b8 <lv_label_set_long_mode>
		lv_label_set_recolor(txt_fwd, true); 								// Ativa recolorizar por comandos no texto
 8007a90:	6838      	ldr	r0, [r7, #0]
 8007a92:	4631      	mov	r1, r6
 8007a94:	f00f ffd2 	bl	8017a3c <lv_label_set_recolor>
		lv_label_set_align(txt_fwd, LV_ALIGN_IN_BOTTOM_LEFT); 				// Centraliza linhas alinhadas
 8007a98:	6838      	ldr	r0, [r7, #0]
 8007a9a:	2104      	movs	r1, #4
 8007a9c:	f00f fc2b 	bl	80172f6 <lv_label_set_align>
		lv_label_set_text(txt_fwd, "FWD:");
 8007aa0:	6838      	ldr	r0, [r7, #0]
 8007aa2:	495c      	ldr	r1, [pc, #368]	; (8007c14 <print_pot+0x1f0>)
 8007aa4:	f00f ff34 	bl	8017910 <lv_label_set_text>
		lv_obj_align(txt_fwd, NULL, LV_ALIGN_IN_BOTTOM_LEFT, 5, -25); 		// Alinha ao centro
 8007aa8:	f06f 0a18 	mvn.w	sl, #24
		lv_obj_set_width(txt_fwd, 200); 									// Configuura o comprimento
 8007aac:	6838      	ldr	r0, [r7, #0]
 8007aae:	21c8      	movs	r1, #200	; 0xc8
 8007ab0:	f007 fbd0 	bl	800f254 <lv_obj_set_width>
		lv_obj_align(txt_fwd, NULL, LV_ALIGN_IN_BOTTOM_LEFT, 5, -25); 		// Alinha ao centro
 8007ab4:	f8cd a000 	str.w	sl, [sp]
 8007ab8:	2305      	movs	r3, #5
 8007aba:	2204      	movs	r2, #4
 8007abc:	6838      	ldr	r0, [r7, #0]
		txt_pot = lv_label_create(Tela_Principal, NULL);
 8007abe:	4f56      	ldr	r7, [pc, #344]	; (8007c18 <print_pot+0x1f4>)
		lv_obj_align(txt_fwd, NULL, LV_ALIGN_IN_BOTTOM_LEFT, 5, -25); 		// Alinha ao centro
 8007ac0:	4621      	mov	r1, r4
 8007ac2:	f006 ffdd 	bl	800ea80 <lv_obj_align>
		txt_pot = lv_label_create(Tela_Principal, NULL);
 8007ac6:	4621      	mov	r1, r4
 8007ac8:	f8d8 0000 	ldr.w	r0, [r8]
 8007acc:	f00f ffca 	bl	8017a64 <lv_label_create>
		lv_obj_set_style(txt_pot, &style_txt_fwd); 							// Configura o estilo criado
 8007ad0:	4629      	mov	r1, r5
		txt_pot = lv_label_create(Tela_Principal, NULL);
 8007ad2:	6038      	str	r0, [r7, #0]
		lv_obj_set_style(txt_pot, &style_txt_fwd); 							// Configura o estilo criado
 8007ad4:	f007 fc76 	bl	800f3c4 <lv_obj_set_style>
		lv_label_set_long_mode(txt_pot, LV_LABEL_LONG_BREAK); 				// Quebra as linhas longas
 8007ad8:	6838      	ldr	r0, [r7, #0]
		txt_ref = lv_label_create(Tela_Principal, NULL);
 8007ada:	4d50      	ldr	r5, [pc, #320]	; (8007c1c <print_pot+0x1f8>)
		lv_label_set_long_mode(txt_pot, LV_LABEL_LONG_BREAK); 				// Quebra as linhas longas
 8007adc:	4631      	mov	r1, r6
 8007ade:	f00f ff6b 	bl	80179b8 <lv_label_set_long_mode>
		lv_label_set_recolor(txt_pot, true); 								// Ativa recolorizar por comandos no texto
 8007ae2:	6838      	ldr	r0, [r7, #0]
 8007ae4:	4631      	mov	r1, r6
 8007ae6:	f00f ffa9 	bl	8017a3c <lv_label_set_recolor>
		lv_label_set_align(txt_pot, LV_ALIGN_IN_BOTTOM_RIGHT); 				// Centraliza linhas alinhadas
 8007aea:	6838      	ldr	r0, [r7, #0]
 8007aec:	2106      	movs	r1, #6
 8007aee:	f00f fc02 	bl	80172f6 <lv_label_set_align>
		sprintf(buffer, "%0.1fW", fwd);
 8007af2:	ed9d 0a02 	vldr	s0, [sp, #8]
 8007af6:	ee10 0a10 	vmov	r0, s0
 8007afa:	f7f8 fd25 	bl	8000548 <__aeabi_f2d>
 8007afe:	4602      	mov	r2, r0
 8007b00:	460b      	mov	r3, r1
 8007b02:	4847      	ldr	r0, [pc, #284]	; (8007c20 <print_pot+0x1fc>)
 8007b04:	4947      	ldr	r1, [pc, #284]	; (8007c24 <print_pot+0x200>)
 8007b06:	f012 f809 	bl	8019b1c <sprintf>
		lv_label_set_text(txt_pot, buffer);
 8007b0a:	6838      	ldr	r0, [r7, #0]
 8007b0c:	4944      	ldr	r1, [pc, #272]	; (8007c20 <print_pot+0x1fc>)
 8007b0e:	f00f feff 	bl	8017910 <lv_label_set_text>
		lv_obj_set_width(txt_pot, 200); 									// Configuura o comprimento
 8007b12:	6838      	ldr	r0, [r7, #0]
 8007b14:	21c8      	movs	r1, #200	; 0xc8
 8007b16:	f007 fb9d 	bl	800f254 <lv_obj_set_width>
		lv_obj_align(txt_pot, NULL, LV_ALIGN_IN_BOTTOM_RIGHT, -8, -25); 	// Alinha ao centro
 8007b1a:	f8cd a000 	str.w	sl, [sp]
 8007b1e:	6838      	ldr	r0, [r7, #0]
		lv_style_copy(&style_txt_ref, &lv_style_plain);
 8007b20:	4f41      	ldr	r7, [pc, #260]	; (8007c28 <print_pot+0x204>)
		lv_obj_align(txt_pot, NULL, LV_ALIGN_IN_BOTTOM_RIGHT, -8, -25); 	// Alinha ao centro
 8007b22:	2206      	movs	r2, #6
 8007b24:	f06f 0307 	mvn.w	r3, #7
 8007b28:	4621      	mov	r1, r4
 8007b2a:	f006 ffa9 	bl	800ea80 <lv_obj_align>
		lv_style_copy(&style_txt_ref, &lv_style_plain);
 8007b2e:	4937      	ldr	r1, [pc, #220]	; (8007c0c <print_pot+0x1e8>)
 8007b30:	4638      	mov	r0, r7
 8007b32:	f008 f8a3 	bl	800fc7c <lv_style_copy>
		style_txt_ref.text.color = LV_COLOR_WHITE;
 8007b36:	4b3d      	ldr	r3, [pc, #244]	; (8007c2c <print_pot+0x208>)
		txt_ref = lv_label_create(Tela_Principal, NULL);
 8007b38:	f8d8 0000 	ldr.w	r0, [r8]
		style_txt_ref.text.color = LV_COLOR_WHITE;
 8007b3c:	881b      	ldrh	r3, [r3, #0]
 8007b3e:	843b      	strh	r3, [r7, #32]
		txt_ref = lv_label_create(Tela_Principal, NULL);
 8007b40:	4621      	mov	r1, r4
		style_txt_ref.text.font = &lv_font_eurostile_24;
 8007b42:	f8c7 9024 	str.w	r9, [r7, #36]	; 0x24
		style_txt_ref.text.letter_space = 1;
 8007b46:	853e      	strh	r6, [r7, #40]	; 0x28
		style_txt_ref.text.line_space = 1;
 8007b48:	857e      	strh	r6, [r7, #42]	; 0x2a
		txt_ref = lv_label_create(Tela_Principal, NULL);
 8007b4a:	f00f ff8b 	bl	8017a64 <lv_label_create>
		lv_obj_set_style(txt_ref, &style_txt_ref); 							// Configura o estilo criado
 8007b4e:	4639      	mov	r1, r7
		txt_ref = lv_label_create(Tela_Principal, NULL);
 8007b50:	6028      	str	r0, [r5, #0]
		lv_obj_set_style(txt_ref, &style_txt_ref); 							// Configura o estilo criado
 8007b52:	f007 fc37 	bl	800f3c4 <lv_obj_set_style>
		lv_label_set_long_mode(txt_ref, LV_LABEL_LONG_EXPAND); 				// Quebra as linhas longas
 8007b56:	6828      	ldr	r0, [r5, #0]
 8007b58:	4621      	mov	r1, r4
 8007b5a:	f00f ff2d 	bl	80179b8 <lv_label_set_long_mode>
		lv_label_set_recolor(txt_ref, true); 								// Ativa recolorizar por comandos no texto
 8007b5e:	6828      	ldr	r0, [r5, #0]
 8007b60:	4631      	mov	r1, r6
 8007b62:	f00f ff6b 	bl	8017a3c <lv_label_set_recolor>
		lv_label_set_align(txt_ref, LV_ALIGN_IN_BOTTOM_LEFT); 				// Centraliza linhas alinhadas
 8007b66:	6828      	ldr	r0, [r5, #0]
 8007b68:	2104      	movs	r1, #4
 8007b6a:	f00f fbc4 	bl	80172f6 <lv_label_set_align>
		lv_label_set_text(txt_ref, "REF:");
 8007b6e:	6828      	ldr	r0, [r5, #0]
 8007b70:	492f      	ldr	r1, [pc, #188]	; (8007c30 <print_pot+0x20c>)
 8007b72:	f00f fecd 	bl	8017910 <lv_label_set_text>
		lv_obj_align(txt_ref, NULL, LV_ALIGN_IN_BOTTOM_LEFT, 5, -2); 		//Alinha ao centro
 8007b76:	f06f 0901 	mvn.w	r9, #1
		lv_obj_set_width(txt_ref, 300); 									// Configuura o comprimento
 8007b7a:	6828      	ldr	r0, [r5, #0]
 8007b7c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8007b80:	f007 fb68 	bl	800f254 <lv_obj_set_width>
		lv_obj_align(txt_ref, NULL, LV_ALIGN_IN_BOTTOM_LEFT, 5, -2); 		//Alinha ao centro
 8007b84:	f8cd 9000 	str.w	r9, [sp]
 8007b88:	2305      	movs	r3, #5
 8007b8a:	2204      	movs	r2, #4
 8007b8c:	6828      	ldr	r0, [r5, #0]
		txt_swr = lv_label_create(Tela_Principal, NULL);
 8007b8e:	4d29      	ldr	r5, [pc, #164]	; (8007c34 <print_pot+0x210>)
		lv_obj_align(txt_ref, NULL, LV_ALIGN_IN_BOTTOM_LEFT, 5, -2); 		//Alinha ao centro
 8007b90:	4621      	mov	r1, r4
 8007b92:	f006 ff75 	bl	800ea80 <lv_obj_align>
		txt_swr = lv_label_create(Tela_Principal, NULL);
 8007b96:	4621      	mov	r1, r4
 8007b98:	f8d8 0000 	ldr.w	r0, [r8]
 8007b9c:	f00f ff62 	bl	8017a64 <lv_label_create>
		lv_obj_set_style(txt_swr, &style_txt_ref); 							// Configura o estilo criado
 8007ba0:	4639      	mov	r1, r7
		txt_swr = lv_label_create(Tela_Principal, NULL);
 8007ba2:	6028      	str	r0, [r5, #0]
		lv_obj_set_style(txt_swr, &style_txt_ref); 							// Configura o estilo criado
 8007ba4:	f007 fc0e 	bl	800f3c4 <lv_obj_set_style>
		lv_label_set_long_mode(txt_swr, LV_LABEL_LONG_BREAK); 				// Quebra as linhas longas
 8007ba8:	4631      	mov	r1, r6
 8007baa:	6828      	ldr	r0, [r5, #0]
 8007bac:	f00f ff04 	bl	80179b8 <lv_label_set_long_mode>
		lv_label_set_recolor(txt_swr, true); 								// Ativa recolorizar por comandos no texto
 8007bb0:	4631      	mov	r1, r6
 8007bb2:	6828      	ldr	r0, [r5, #0]
 8007bb4:	f00f ff42 	bl	8017a3c <lv_label_set_recolor>
		lv_label_set_align(txt_swr, LV_ALIGN_IN_BOTTOM_RIGHT); 				// Centraliza linhas alinhadas
 8007bb8:	2106      	movs	r1, #6
 8007bba:	6828      	ldr	r0, [r5, #0]
 8007bbc:	f00f fb9b 	bl	80172f6 <lv_label_set_align>
		sprintf(buffer, "%0.1fW", swr);
 8007bc0:	eddd 0a03 	vldr	s1, [sp, #12]
 8007bc4:	ee10 0a90 	vmov	r0, s1
 8007bc8:	f7f8 fcbe 	bl	8000548 <__aeabi_f2d>
 8007bcc:	4602      	mov	r2, r0
 8007bce:	460b      	mov	r3, r1
 8007bd0:	4813      	ldr	r0, [pc, #76]	; (8007c20 <print_pot+0x1fc>)
 8007bd2:	4914      	ldr	r1, [pc, #80]	; (8007c24 <print_pot+0x200>)
 8007bd4:	f011 ffa2 	bl	8019b1c <sprintf>
		lv_label_set_text(txt_swr, buffer);
 8007bd8:	4911      	ldr	r1, [pc, #68]	; (8007c20 <print_pot+0x1fc>)
 8007bda:	6828      	ldr	r0, [r5, #0]
 8007bdc:	f00f fe98 	bl	8017910 <lv_label_set_text>
		lv_obj_set_width(txt_swr, 300); 									// Configuura o comprimento
 8007be0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8007be4:	6828      	ldr	r0, [r5, #0]
 8007be6:	f007 fb35 	bl	800f254 <lv_obj_set_width>
		lv_obj_align(txt_swr, NULL, LV_ALIGN_IN_BOTTOM_RIGHT, -8, -2); 		//Alinha ao centro
 8007bea:	f8cd 9000 	str.w	r9, [sp]
 8007bee:	f06f 0307 	mvn.w	r3, #7
 8007bf2:	2206      	movs	r2, #6
 8007bf4:	4621      	mov	r1, r4
 8007bf6:	6828      	ldr	r0, [r5, #0]
 8007bf8:	f006 ff42 	bl	800ea80 <lv_obj_align>
}
 8007bfc:	b004      	add	sp, #16
 8007bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c02:	bf00      	nop
 8007c04:	20004dcc 	.word	0x20004dcc
 8007c08:	200050cc 	.word	0x200050cc
 8007c0c:	2000c4a4 	.word	0x2000c4a4
 8007c10:	20005144 	.word	0x20005144
 8007c14:	0802b414 	.word	0x0802b414
 8007c18:	20005148 	.word	0x20005148
 8007c1c:	2000514c 	.word	0x2000514c
 8007c20:	20004ce8 	.word	0x20004ce8
 8007c24:	0802b419 	.word	0x0802b419
 8007c28:	20005108 	.word	0x20005108
 8007c2c:	0801c5c0 	.word	0x0801c5c0
 8007c30:	0802b420 	.word	0x0802b420
 8007c34:	20005150 	.word	0x20005150
 8007c38:	20004e10 	.word	0x20004e10
 8007c3c:	2000132c 	.word	0x2000132c

08007c40 <print_audio>:
{
 8007c40:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	lv_style_copy(&style_txt, &lv_style_plain);
 8007c44:	4d3c      	ldr	r5, [pc, #240]	; (8007d38 <print_audio+0xf8>)
	img_stereo = lv_img_create(Tela_Principal, NULL); 					// Crate an image object
 8007c46:	4e3d      	ldr	r6, [pc, #244]	; (8007d3c <print_audio+0xfc>)
 8007c48:	4f3d      	ldr	r7, [pc, #244]	; (8007d40 <print_audio+0x100>)
{
 8007c4a:	4682      	mov	sl, r0
 8007c4c:	4689      	mov	r9, r1
	lv_style_copy(&style_txt, &lv_style_plain);
 8007c4e:	4628      	mov	r0, r5
 8007c50:	493c      	ldr	r1, [pc, #240]	; (8007d44 <print_audio+0x104>)
 8007c52:	f008 f813 	bl	800fc7c <lv_style_copy>
	style_txt.text.font = &lv_font_eurostile_10;
 8007c56:	4b3c      	ldr	r3, [pc, #240]	; (8007d48 <print_audio+0x108>)
 8007c58:	626b      	str	r3, [r5, #36]	; 0x24
	style_txt.text.color = LV_COLOR_WHITE;
 8007c5a:	4b3c      	ldr	r3, [pc, #240]	; (8007d4c <print_audio+0x10c>)
	img_stereo = lv_img_create(Tela_Principal, NULL); 					// Crate an image object
 8007c5c:	6830      	ldr	r0, [r6, #0]
	style_txt.text.color = LV_COLOR_WHITE;
 8007c5e:	881b      	ldrh	r3, [r3, #0]
 8007c60:	842b      	strh	r3, [r5, #32]
	style_txt.text.letter_space = 1;
 8007c62:	f04f 0801 	mov.w	r8, #1
	img_stereo = lv_img_create(Tela_Principal, NULL); 					// Crate an image object
 8007c66:	2100      	movs	r1, #0
	style_txt.text.letter_space = 1;
 8007c68:	f8a5 8028 	strh.w	r8, [r5, #40]	; 0x28
	style_txt.text.line_space = 1;
 8007c6c:	f8a5 802a 	strh.w	r8, [r5, #42]	; 0x2a
	img_stereo = lv_img_create(Tela_Principal, NULL); 					// Crate an image object
 8007c70:	f00f f82a 	bl	8016cc8 <lv_img_create>
	lv_obj_t * txt_stereo = lv_label_create(Tela_Principal, NULL);
 8007c74:	2100      	movs	r1, #0
	img_stereo = lv_img_create(Tela_Principal, NULL); 					// Crate an image object
 8007c76:	6038      	str	r0, [r7, #0]
	lv_obj_t * txt_stereo = lv_label_create(Tela_Principal, NULL);
 8007c78:	6830      	ldr	r0, [r6, #0]
 8007c7a:	f00f fef3 	bl	8017a64 <lv_label_create>
	lv_obj_set_style(txt_stereo, &style_txt);                    		// Set the created style
 8007c7e:	4629      	mov	r1, r5
	lv_obj_t * txt_stereo = lv_label_create(Tela_Principal, NULL);
 8007c80:	4604      	mov	r4, r0
	lv_obj_set_style(txt_stereo, &style_txt);                    		// Set the created style
 8007c82:	f007 fb9f 	bl	800f3c4 <lv_obj_set_style>
	lv_label_set_long_mode(txt_stereo, LV_LABEL_LONG_EXPAND);     		// Break the long lines
 8007c86:	2100      	movs	r1, #0
 8007c88:	4620      	mov	r0, r4
 8007c8a:	f00f fe95 	bl	80179b8 <lv_label_set_long_mode>
	lv_label_set_recolor(txt_stereo, true);                      		// Enable re-coloring by commands in the text
 8007c8e:	4641      	mov	r1, r8
 8007c90:	4620      	mov	r0, r4
 8007c92:	f00f fed3 	bl	8017a3c <lv_label_set_recolor>
	lv_label_set_align(txt_stereo, LV_ALIGN_IN_TOP_LEFT);       		// Center aligned lines
 8007c96:	4641      	mov	r1, r8
 8007c98:	4620      	mov	r0, r4
 8007c9a:	f00f fb2c 	bl	80172f6 <lv_label_set_align>
	if(stereo) {
 8007c9e:	f1ba 0f00 	cmp.w	sl, #0
 8007ca2:	d042      	beq.n	8007d2a <print_audio+0xea>
		lv_label_set_text(txt_stereo, "ST");
 8007ca4:	492a      	ldr	r1, [pc, #168]	; (8007d50 <print_audio+0x110>)
 8007ca6:	4620      	mov	r0, r4
 8007ca8:	f00f fe32 	bl	8017910 <lv_label_set_text>
		lv_img_set_src(img_stereo, &stereo_vd);
 8007cac:	4929      	ldr	r1, [pc, #164]	; (8007d54 <print_audio+0x114>)
		lv_img_set_src(img_stereo, &stereo_off);
 8007cae:	6838      	ldr	r0, [r7, #0]
 8007cb0:	f00e ff7a 	bl	8016ba8 <lv_img_set_src>
		lv_obj_set_pos(img_stereo, 28, 59); 							// Set the positions
 8007cb4:	223b      	movs	r2, #59	; 0x3b
 8007cb6:	6838      	ldr	r0, [r7, #0]
 8007cb8:	211c      	movs	r1, #28
 8007cba:	f006 fe8c 	bl	800e9d6 <lv_obj_set_pos>
	lv_obj_align(txt_stereo, NULL, LV_ALIGN_IN_TOP_LEFT, 6, 61);      	// Align to center
 8007cbe:	253d      	movs	r5, #61	; 0x3d
	lv_obj_set_width(txt_stereo, 300);                           		// Set a width
 8007cc0:	4620      	mov	r0, r4
 8007cc2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8007cc6:	f007 fac5 	bl	800f254 <lv_obj_set_width>
	lv_obj_align(txt_stereo, NULL, LV_ALIGN_IN_TOP_LEFT, 6, 61);      	// Align to center
 8007cca:	2201      	movs	r2, #1
 8007ccc:	2306      	movs	r3, #6
 8007cce:	4620      	mov	r0, r4
 8007cd0:	9500      	str	r5, [sp, #0]
 8007cd2:	2100      	movs	r1, #0
 8007cd4:	f006 fed4 	bl	800ea80 <lv_obj_align>
	lv_obj_t * txt_audio = lv_label_create(Tela_Principal, NULL);
 8007cd8:	2100      	movs	r1, #0
 8007cda:	6830      	ldr	r0, [r6, #0]
 8007cdc:	f00f fec2 	bl	8017a64 <lv_label_create>
	lv_obj_set_style(txt_audio, &style_txt);                    		// Set the created style
 8007ce0:	4915      	ldr	r1, [pc, #84]	; (8007d38 <print_audio+0xf8>)
	lv_obj_t * txt_audio = lv_label_create(Tela_Principal, NULL);
 8007ce2:	4604      	mov	r4, r0
	lv_obj_set_style(txt_audio, &style_txt);                    		// Set the created style
 8007ce4:	f007 fb6e 	bl	800f3c4 <lv_obj_set_style>
	lv_label_set_long_mode(txt_audio, LV_LABEL_LONG_EXPAND);     		// Break the long lines
 8007ce8:	4620      	mov	r0, r4
 8007cea:	2100      	movs	r1, #0
 8007cec:	f00f fe64 	bl	80179b8 <lv_label_set_long_mode>
	lv_label_set_recolor(txt_audio, true);                      		// Enable re-coloring by commands in the text
 8007cf0:	4620      	mov	r0, r4
 8007cf2:	2101      	movs	r1, #1
 8007cf4:	f00f fea2 	bl	8017a3c <lv_label_set_recolor>
	lv_label_set_align(txt_audio, LV_ALIGN_IN_TOP_LEFT);       			// Center aligned lines
 8007cf8:	4620      	mov	r0, r4
 8007cfa:	2101      	movs	r1, #1
 8007cfc:	f00f fafb 	bl	80172f6 <lv_label_set_align>
	lv_label_set_text(txt_audio, IndexAudio[audio]);
 8007d00:	4b15      	ldr	r3, [pc, #84]	; (8007d58 <print_audio+0x118>)
 8007d02:	4620      	mov	r0, r4
 8007d04:	f853 1029 	ldr.w	r1, [r3, r9, lsl #2]
 8007d08:	f00f fe02 	bl	8017910 <lv_label_set_text>
	lv_obj_set_width(txt_audio, 300);                           		// Set a width
 8007d0c:	4620      	mov	r0, r4
 8007d0e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8007d12:	f007 fa9f 	bl	800f254 <lv_obj_set_width>
	lv_obj_align(txt_audio, NULL, LV_ALIGN_IN_TOP_LEFT, 55, 61);      	// Align to center
 8007d16:	9500      	str	r5, [sp, #0]
 8007d18:	2337      	movs	r3, #55	; 0x37
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	2100      	movs	r1, #0
 8007d1e:	4620      	mov	r0, r4
 8007d20:	f006 feae 	bl	800ea80 <lv_obj_align>
}
 8007d24:	b002      	add	sp, #8
 8007d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		lv_label_set_text(txt_stereo, "Mo");
 8007d2a:	490c      	ldr	r1, [pc, #48]	; (8007d5c <print_audio+0x11c>)
 8007d2c:	4620      	mov	r0, r4
 8007d2e:	f00f fdef 	bl	8017910 <lv_label_set_text>
		lv_img_set_src(img_stereo, &stereo_off);
 8007d32:	490b      	ldr	r1, [pc, #44]	; (8007d60 <print_audio+0x120>)
 8007d34:	e7bb      	b.n	8007cae <print_audio+0x6e>
 8007d36:	bf00      	nop
 8007d38:	20004fdc 	.word	0x20004fdc
 8007d3c:	20004e10 	.word	0x20004e10
 8007d40:	20004e70 	.word	0x20004e70
 8007d44:	2000c4a4 	.word	0x2000c4a4
 8007d48:	200006ec 	.word	0x200006ec
 8007d4c:	0801c5c0 	.word	0x0801c5c0
 8007d50:	0802b3fc 	.word	0x0802b3fc
 8007d54:	20001b74 	.word	0x20001b74
 8007d58:	20001960 	.word	0x20001960
 8007d5c:	0802b3ff 	.word	0x0802b3ff
 8007d60:	20001b68 	.word	0x20001b68
 8007d64:	00000000 	.word	0x00000000

08007d68 <print_temperatura>:
{
 8007d68:	b573      	push	{r0, r1, r4, r5, r6, lr}
	lv_style_copy(&style_txt, &lv_style_plain);
 8007d6a:	4d1f      	ldr	r5, [pc, #124]	; (8007de8 <print_temperatura+0x80>)
 8007d6c:	491f      	ldr	r1, [pc, #124]	; (8007dec <print_temperatura+0x84>)
	txt_temp = lv_label_create(Tela_Principal, NULL);
 8007d6e:	4c20      	ldr	r4, [pc, #128]	; (8007df0 <print_temperatura+0x88>)
	lv_style_copy(&style_txt, &lv_style_plain);
 8007d70:	4628      	mov	r0, r5
 8007d72:	f007 ff83 	bl	800fc7c <lv_style_copy>
	style_txt.text.font = &lv_font_eurostile_10;
 8007d76:	4b1f      	ldr	r3, [pc, #124]	; (8007df4 <print_temperatura+0x8c>)
 8007d78:	626b      	str	r3, [r5, #36]	; 0x24
	style_txt.text.color = LV_COLOR_WHITE;
 8007d7a:	4b1f      	ldr	r3, [pc, #124]	; (8007df8 <print_temperatura+0x90>)
 8007d7c:	881b      	ldrh	r3, [r3, #0]
 8007d7e:	842b      	strh	r3, [r5, #32]
	txt_temp = lv_label_create(Tela_Principal, NULL);
 8007d80:	4b1e      	ldr	r3, [pc, #120]	; (8007dfc <print_temperatura+0x94>)
	style_txt.text.letter_space = 1;
 8007d82:	2601      	movs	r6, #1
	txt_temp = lv_label_create(Tela_Principal, NULL);
 8007d84:	6818      	ldr	r0, [r3, #0]
	style_txt.text.letter_space = 1;
 8007d86:	852e      	strh	r6, [r5, #40]	; 0x28
	txt_temp = lv_label_create(Tela_Principal, NULL);
 8007d88:	2100      	movs	r1, #0
	style_txt.text.line_space = 1;
 8007d8a:	856e      	strh	r6, [r5, #42]	; 0x2a
	txt_temp = lv_label_create(Tela_Principal, NULL);
 8007d8c:	f00f fe6a 	bl	8017a64 <lv_label_create>
	lv_obj_set_style(txt_temp, &style_txt);                    		// Set the created style
 8007d90:	4629      	mov	r1, r5
	txt_temp = lv_label_create(Tela_Principal, NULL);
 8007d92:	6020      	str	r0, [r4, #0]
	lv_obj_set_style(txt_temp, &style_txt);                    		// Set the created style
 8007d94:	f007 fb16 	bl	800f3c4 <lv_obj_set_style>
	lv_label_set_long_mode(txt_temp, LV_LABEL_LONG_EXPAND);     	// Break the long lines
 8007d98:	6820      	ldr	r0, [r4, #0]
	sprintf(buffer, "TP:%0.1f°", temp);
 8007d9a:	4d19      	ldr	r5, [pc, #100]	; (8007e00 <print_temperatura+0x98>)
	lv_label_set_long_mode(txt_temp, LV_LABEL_LONG_EXPAND);     	// Break the long lines
 8007d9c:	2100      	movs	r1, #0
 8007d9e:	f00f fe0b 	bl	80179b8 <lv_label_set_long_mode>
	lv_label_set_recolor(txt_temp, true);                      		// Enable re-coloring by commands in the text
 8007da2:	4631      	mov	r1, r6
 8007da4:	6820      	ldr	r0, [r4, #0]
 8007da6:	f00f fe49 	bl	8017a3c <lv_label_set_recolor>
	lv_label_set_align(txt_temp, LV_ALIGN_IN_TOP_LEFT);       		// Center aligned lines
 8007daa:	4631      	mov	r1, r6
 8007dac:	6820      	ldr	r0, [r4, #0]
 8007dae:	f00f faa2 	bl	80172f6 <lv_label_set_align>
	sprintf(buffer, "TP:%0.1f°", temp);
 8007db2:	a30b      	add	r3, pc, #44	; (adr r3, 8007de0 <print_temperatura+0x78>)
 8007db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db8:	4912      	ldr	r1, [pc, #72]	; (8007e04 <print_temperatura+0x9c>)
 8007dba:	4628      	mov	r0, r5
 8007dbc:	f011 feae 	bl	8019b1c <sprintf>
	lv_label_set_text(txt_temp, buffer);
 8007dc0:	4629      	mov	r1, r5
 8007dc2:	6820      	ldr	r0, [r4, #0]
 8007dc4:	f00f fda4 	bl	8017910 <lv_label_set_text>
	lv_obj_align(txt_temp, NULL, LV_ALIGN_IN_TOP_LEFT, 109, 61);    // Align to center
 8007dc8:	233d      	movs	r3, #61	; 0x3d
 8007dca:	9300      	str	r3, [sp, #0]
 8007dcc:	4632      	mov	r2, r6
 8007dce:	236d      	movs	r3, #109	; 0x6d
 8007dd0:	2100      	movs	r1, #0
 8007dd2:	6820      	ldr	r0, [r4, #0]
 8007dd4:	f006 fe54 	bl	800ea80 <lv_obj_align>
}
 8007dd8:	b002      	add	sp, #8
 8007dda:	bd70      	pop	{r4, r5, r6, pc}
 8007ddc:	f3af 8000 	nop.w
 8007de0:	60000000 	.word	0x60000000
 8007de4:	4045a666 	.word	0x4045a666
 8007de8:	20005018 	.word	0x20005018
 8007dec:	2000c4a4 	.word	0x2000c4a4
 8007df0:	20005154 	.word	0x20005154
 8007df4:	200006ec 	.word	0x200006ec
 8007df8:	0801c5c0 	.word	0x0801c5c0
 8007dfc:	20004e10 	.word	0x20004e10
 8007e00:	20004ce8 	.word	0x20004ce8
 8007e04:	0802b42d 	.word	0x0802b42d

08007e08 <print_alarme>:
{
 8007e08:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	lv_style_copy(&style_cont, &lv_style_plain);
 8007e0c:	4c5a      	ldr	r4, [pc, #360]	; (8007f78 <print_alarme+0x170>)
 8007e0e:	495b      	ldr	r1, [pc, #364]	; (8007f7c <print_alarme+0x174>)
	cod_falha = lv_label_create(cont, NULL);
 8007e10:	4d5b      	ldr	r5, [pc, #364]	; (8007f80 <print_alarme+0x178>)
{
 8007e12:	4680      	mov	r8, r0
	lv_style_copy(&style_cont, &lv_style_plain);
 8007e14:	4620      	mov	r0, r4
 8007e16:	f007 ff31 	bl	800fc7c <lv_style_copy>
	style_cont.text.font = &lv_font_eurostile_22;
 8007e1a:	4b5a      	ldr	r3, [pc, #360]	; (8007f84 <print_alarme+0x17c>)
 8007e1c:	6263      	str	r3, [r4, #36]	; 0x24
	style_cont.text.color = LV_COLOR_WHITE;
 8007e1e:	4b5a      	ldr	r3, [pc, #360]	; (8007f88 <print_alarme+0x180>)
 8007e20:	881b      	ldrh	r3, [r3, #0]
 8007e22:	8423      	strh	r3, [r4, #32]
	style_cont.body.main_color = LV_COLOR_RED;
 8007e24:	78a3      	ldrb	r3, [r4, #2]
 8007e26:	f36f 0304 	bfc	r3, #0, #5
 8007e2a:	70a3      	strb	r3, [r4, #2]
 8007e2c:	8863      	ldrh	r3, [r4, #2]
 8007e2e:	f36f 134a 	bfc	r3, #5, #6
 8007e32:	8063      	strh	r3, [r4, #2]
 8007e34:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8007e38:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 8007e3c:	70e3      	strb	r3, [r4, #3]
	style_cont.body.grad_color = LV_COLOR_RED;
 8007e3e:	7923      	ldrb	r3, [r4, #4]
 8007e40:	f36f 0304 	bfc	r3, #0, #5
 8007e44:	7123      	strb	r3, [r4, #4]
 8007e46:	88a3      	ldrh	r3, [r4, #4]
 8007e48:	f36f 134a 	bfc	r3, #5, #6
 8007e4c:	80a3      	strh	r3, [r4, #4]
 8007e4e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8007e52:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 8007e56:	7163      	strb	r3, [r4, #5]
	style_cont.body.opa = LV_OPA_50;
 8007e58:	237f      	movs	r3, #127	; 0x7f
 8007e5a:	7223      	strb	r3, [r4, #8]
	cont = lv_cont_create(Tela_Principal, NULL);
 8007e5c:	4b4b      	ldr	r3, [pc, #300]	; (8007f8c <print_alarme+0x184>)
	style_cont.text.letter_space = 1;
 8007e5e:	2701      	movs	r7, #1
	cont = lv_cont_create(Tela_Principal, NULL);
 8007e60:	6818      	ldr	r0, [r3, #0]
	style_cont.text.letter_space = 1;
 8007e62:	8527      	strh	r7, [r4, #40]	; 0x28
	cont = lv_cont_create(Tela_Principal, NULL);
 8007e64:	2100      	movs	r1, #0
	style_cont.text.line_space = 1;
 8007e66:	8567      	strh	r7, [r4, #42]	; 0x2a
	cont = lv_cont_create(Tela_Principal, NULL);
 8007e68:	f00d fcd2 	bl	8015810 <lv_cont_create>
	lv_obj_set_style(cont, &style_cont);
 8007e6c:	4621      	mov	r1, r4
	cont = lv_cont_create(Tela_Principal, NULL);
 8007e6e:	4606      	mov	r6, r0
	lv_obj_set_style(cont, &style_cont);
 8007e70:	f007 faa8 	bl	800f3c4 <lv_obj_set_style>
	lv_obj_set_size(cont, 154, 50);
 8007e74:	2232      	movs	r2, #50	; 0x32
 8007e76:	219a      	movs	r1, #154	; 0x9a
 8007e78:	4630      	mov	r0, r6
 8007e7a:	f007 f9a1 	bl	800f1c0 <lv_obj_set_size>
	lv_obj_align(cont, NULL, LV_ALIGN_IN_TOP_LEFT, 3, 75);
 8007e7e:	234b      	movs	r3, #75	; 0x4b
 8007e80:	463a      	mov	r2, r7
 8007e82:	9300      	str	r3, [sp, #0]
 8007e84:	2100      	movs	r1, #0
 8007e86:	2303      	movs	r3, #3
 8007e88:	4630      	mov	r0, r6
 8007e8a:	f006 fdf9 	bl	800ea80 <lv_obj_align>
	lv_cont_set_layout(cont, LV_LAYOUT_OFF);
 8007e8e:	2100      	movs	r1, #0
 8007e90:	4630      	mov	r0, r6
 8007e92:	f00d fd1f 	bl	80158d4 <lv_cont_set_layout>
	cod_falha = lv_label_create(cont, NULL);
 8007e96:	2100      	movs	r1, #0
 8007e98:	4630      	mov	r0, r6
 8007e9a:	f00f fde3 	bl	8017a64 <lv_label_create>
	lv_label_set_long_mode(cod_falha, LV_LABEL_LONG_EXPAND);     	// Break the long lines
 8007e9e:	2100      	movs	r1, #0
	cod_falha = lv_label_create(cont, NULL);
 8007ea0:	6028      	str	r0, [r5, #0]
	lv_label_set_long_mode(cod_falha, LV_LABEL_LONG_EXPAND);     	// Break the long lines
 8007ea2:	f00f fd89 	bl	80179b8 <lv_label_set_long_mode>
	lv_label_set_recolor(cod_falha, true); 							// Ativa recolorizar por comandos no texto
 8007ea6:	4639      	mov	r1, r7
 8007ea8:	6828      	ldr	r0, [r5, #0]
	desc_falha = lv_label_create(cont, NULL);
 8007eaa:	4c39      	ldr	r4, [pc, #228]	; (8007f90 <print_alarme+0x188>)
	lv_label_set_recolor(cod_falha, true); 							// Ativa recolorizar por comandos no texto
 8007eac:	f00f fdc6 	bl	8017a3c <lv_label_set_recolor>
	lv_obj_set_width(cod_falha, 150);
 8007eb0:	2196      	movs	r1, #150	; 0x96
 8007eb2:	6828      	ldr	r0, [r5, #0]
 8007eb4:	f007 f9ce 	bl	800f254 <lv_obj_set_width>
	lv_obj_align(cod_falha, cont, LV_ALIGN_IN_BOTTOM_MID, -10, -24 );
 8007eb8:	f06f 0317 	mvn.w	r3, #23
 8007ebc:	2205      	movs	r2, #5
 8007ebe:	9300      	str	r3, [sp, #0]
 8007ec0:	4631      	mov	r1, r6
 8007ec2:	f06f 0309 	mvn.w	r3, #9
 8007ec6:	6828      	ldr	r0, [r5, #0]
 8007ec8:	f006 fdda 	bl	800ea80 <lv_obj_align>
	desc_falha = lv_label_create(cont, NULL);
 8007ecc:	2100      	movs	r1, #0
 8007ece:	4630      	mov	r0, r6
 8007ed0:	f00f fdc8 	bl	8017a64 <lv_label_create>
	lv_label_set_long_mode(desc_falha, LV_LABEL_LONG_SROLL_CIRC);     	// Break the long lines
 8007ed4:	2104      	movs	r1, #4
	desc_falha = lv_label_create(cont, NULL);
 8007ed6:	6020      	str	r0, [r4, #0]
	lv_label_set_long_mode(desc_falha, LV_LABEL_LONG_SROLL_CIRC);     	// Break the long lines
 8007ed8:	f00f fd6e 	bl	80179b8 <lv_label_set_long_mode>
	lv_label_set_recolor(desc_falha, true); 							// Ativa recolorizar por comandos no texto
 8007edc:	4639      	mov	r1, r7
 8007ede:	6820      	ldr	r0, [r4, #0]
 8007ee0:	f00f fdac 	bl	8017a3c <lv_label_set_recolor>
	lv_obj_set_width(desc_falha, 150);
 8007ee4:	2196      	movs	r1, #150	; 0x96
 8007ee6:	6820      	ldr	r0, [r4, #0]
 8007ee8:	f007 f9b4 	bl	800f254 <lv_obj_set_width>
	lv_obj_align(desc_falha, cont, LV_ALIGN_IN_BOTTOM_MID, 0, -2);
 8007eec:	f06f 0301 	mvn.w	r3, #1
 8007ef0:	9300      	str	r3, [sp, #0]
 8007ef2:	2205      	movs	r2, #5
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	4631      	mov	r1, r6
 8007ef8:	6820      	ldr	r0, [r4, #0]
    switch(falha) {
 8007efa:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
	lv_obj_align(desc_falha, cont, LV_ALIGN_IN_BOTTOM_MID, 0, -2);
 8007efe:	f006 fdbf 	bl	800ea80 <lv_obj_align>
    switch(falha) {
 8007f02:	f1b8 0f06 	cmp.w	r8, #6
 8007f06:	d834      	bhi.n	8007f72 <print_alarme+0x16a>
 8007f08:	e8df f008 	tbb	[pc, r8]
 8007f0c:	1b150f04 	.word	0x1b150f04
 8007f10:	2721      	.short	0x2721
 8007f12:	2d          	.byte	0x2d
 8007f13:	00          	.byte	0x00
    		lv_label_set_text(cod_falha, "Fail 01");
 8007f14:	491f      	ldr	r1, [pc, #124]	; (8007f94 <print_alarme+0x18c>)
 8007f16:	6828      	ldr	r0, [r5, #0]
 8007f18:	f00f fcfa 	bl	8017910 <lv_label_set_text>
    		lv_label_set_text(desc_falha, "PLL NO LOCK");
 8007f1c:	491e      	ldr	r1, [pc, #120]	; (8007f98 <print_alarme+0x190>)
    		lv_label_set_text(desc_falha, "No Antenna");
 8007f1e:	6820      	ldr	r0, [r4, #0]
}
 8007f20:	b002      	add	sp, #8
 8007f22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    		lv_label_set_text(desc_falha, "No Antenna");
 8007f26:	f00f bcf3 	b.w	8017910 <lv_label_set_text>
    		lv_label_set_text(cod_falha, "Fail 02");
 8007f2a:	491c      	ldr	r1, [pc, #112]	; (8007f9c <print_alarme+0x194>)
 8007f2c:	6828      	ldr	r0, [r5, #0]
 8007f2e:	f00f fcef 	bl	8017910 <lv_label_set_text>
    		lv_label_set_text(desc_falha, "Reflected High");
 8007f32:	491b      	ldr	r1, [pc, #108]	; (8007fa0 <print_alarme+0x198>)
 8007f34:	e7f3      	b.n	8007f1e <print_alarme+0x116>
    		lv_label_set_text(cod_falha, "Fail 03");
 8007f36:	491b      	ldr	r1, [pc, #108]	; (8007fa4 <print_alarme+0x19c>)
 8007f38:	6828      	ldr	r0, [r5, #0]
 8007f3a:	f00f fce9 	bl	8017910 <lv_label_set_text>
    		lv_label_set_text(desc_falha, "Foldback");
 8007f3e:	491a      	ldr	r1, [pc, #104]	; (8007fa8 <print_alarme+0x1a0>)
 8007f40:	e7ed      	b.n	8007f1e <print_alarme+0x116>
    		lv_label_set_text(cod_falha, "Fail 04");
 8007f42:	491a      	ldr	r1, [pc, #104]	; (8007fac <print_alarme+0x1a4>)
 8007f44:	6828      	ldr	r0, [r5, #0]
 8007f46:	f00f fce3 	bl	8017910 <lv_label_set_text>
    		lv_label_set_text(desc_falha, "Foldback IPA");
 8007f4a:	4919      	ldr	r1, [pc, #100]	; (8007fb0 <print_alarme+0x1a8>)
 8007f4c:	e7e7      	b.n	8007f1e <print_alarme+0x116>
    		lv_label_set_text(cod_falha, "Fail 05");
 8007f4e:	4919      	ldr	r1, [pc, #100]	; (8007fb4 <print_alarme+0x1ac>)
 8007f50:	6828      	ldr	r0, [r5, #0]
 8007f52:	f00f fcdd 	bl	8017910 <lv_label_set_text>
    		lv_label_set_text(desc_falha, "IPA High");
 8007f56:	4918      	ldr	r1, [pc, #96]	; (8007fb8 <print_alarme+0x1b0>)
 8007f58:	e7e1      	b.n	8007f1e <print_alarme+0x116>
    		lv_label_set_text(cod_falha, "Fail 06");
 8007f5a:	4918      	ldr	r1, [pc, #96]	; (8007fbc <print_alarme+0x1b4>)
 8007f5c:	6828      	ldr	r0, [r5, #0]
 8007f5e:	f00f fcd7 	bl	8017910 <lv_label_set_text>
    		lv_label_set_text(desc_falha, "VIN Fail");
 8007f62:	4917      	ldr	r1, [pc, #92]	; (8007fc0 <print_alarme+0x1b8>)
 8007f64:	e7db      	b.n	8007f1e <print_alarme+0x116>
    		lv_label_set_text(cod_falha, "Fail 07");
 8007f66:	4917      	ldr	r1, [pc, #92]	; (8007fc4 <print_alarme+0x1bc>)
 8007f68:	6828      	ldr	r0, [r5, #0]
 8007f6a:	f00f fcd1 	bl	8017910 <lv_label_set_text>
    		lv_label_set_text(desc_falha, "No Antenna");
 8007f6e:	4916      	ldr	r1, [pc, #88]	; (8007fc8 <print_alarme+0x1c0>)
 8007f70:	e7d5      	b.n	8007f1e <print_alarme+0x116>
}
 8007f72:	b002      	add	sp, #8
 8007f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f78:	20004e74 	.word	0x20004e74
 8007f7c:	2000c4a4 	.word	0x2000c4a4
 8007f80:	20004e64 	.word	0x20004e64
 8007f84:	20000d0c 	.word	0x20000d0c
 8007f88:	0801c5c0 	.word	0x0801c5c0
 8007f8c:	20004e10 	.word	0x20004e10
 8007f90:	20004e68 	.word	0x20004e68
 8007f94:	0802b376 	.word	0x0802b376
 8007f98:	0802b37e 	.word	0x0802b37e
 8007f9c:	0802b38a 	.word	0x0802b38a
 8007fa0:	0802b392 	.word	0x0802b392
 8007fa4:	0802b3a1 	.word	0x0802b3a1
 8007fa8:	0802b3a9 	.word	0x0802b3a9
 8007fac:	0802b3b2 	.word	0x0802b3b2
 8007fb0:	0802b3ba 	.word	0x0802b3ba
 8007fb4:	0802b3c7 	.word	0x0802b3c7
 8007fb8:	0802b3cf 	.word	0x0802b3cf
 8007fbc:	0802b3d8 	.word	0x0802b3d8
 8007fc0:	0802b3e0 	.word	0x0802b3e0
 8007fc4:	0802b3e9 	.word	0x0802b3e9
 8007fc8:	0802b3f1 	.word	0x0802b3f1

08007fcc <print_status>:
{
 8007fcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	lv_style_copy(&style_txt, &lv_style_plain);
 8007fce:	4c37      	ldr	r4, [pc, #220]	; (80080ac <print_status+0xe0>)
 8007fd0:	4937      	ldr	r1, [pc, #220]	; (80080b0 <print_status+0xe4>)
{
 8007fd2:	4605      	mov	r5, r0
	lv_style_copy(&style_txt, &lv_style_plain);
 8007fd4:	4620      	mov	r0, r4
 8007fd6:	f007 fe51 	bl	800fc7c <lv_style_copy>
	style_txt.text.font = &lv_font_eurostile_10;
 8007fda:	4b36      	ldr	r3, [pc, #216]	; (80080b4 <print_status+0xe8>)
 8007fdc:	6263      	str	r3, [r4, #36]	; 0x24
	style_txt.text.color = LV_COLOR_WHITE;
 8007fde:	4b36      	ldr	r3, [pc, #216]	; (80080b8 <print_status+0xec>)
 8007fe0:	881b      	ldrh	r3, [r3, #0]
 8007fe2:	8423      	strh	r3, [r4, #32]
	style_txt.body.main_color = LV_COLOR_BLUE;
 8007fe4:	78a3      	ldrb	r3, [r4, #2]
 8007fe6:	f043 031f 	orr.w	r3, r3, #31
 8007fea:	70a3      	strb	r3, [r4, #2]
 8007fec:	8863      	ldrh	r3, [r4, #2]
 8007fee:	f36f 134a 	bfc	r3, #5, #6
 8007ff2:	8063      	strh	r3, [r4, #2]
 8007ff4:	0a1b      	lsrs	r3, r3, #8
 8007ff6:	f36f 03c7 	bfc	r3, #3, #5
 8007ffa:	70e3      	strb	r3, [r4, #3]
	style_txt.body.grad_color = LV_COLOR_BLUE;
 8007ffc:	7923      	ldrb	r3, [r4, #4]
 8007ffe:	f043 031f 	orr.w	r3, r3, #31
 8008002:	7123      	strb	r3, [r4, #4]
 8008004:	88a3      	ldrh	r3, [r4, #4]
 8008006:	f36f 134a 	bfc	r3, #5, #6
 800800a:	80a3      	strh	r3, [r4, #4]
 800800c:	0a1b      	lsrs	r3, r3, #8
 800800e:	f36f 03c7 	bfc	r3, #3, #5
 8008012:	7163      	strb	r3, [r4, #5]
	cont = lv_cont_create(Tela_Principal, NULL);
 8008014:	4b29      	ldr	r3, [pc, #164]	; (80080bc <print_status+0xf0>)
	style_txt.text.letter_space = 1;
 8008016:	2701      	movs	r7, #1
	cont = lv_cont_create(Tela_Principal, NULL);
 8008018:	6818      	ldr	r0, [r3, #0]
	style_txt.text.letter_space = 1;
 800801a:	8527      	strh	r7, [r4, #40]	; 0x28
	cont = lv_cont_create(Tela_Principal, NULL);
 800801c:	2100      	movs	r1, #0
	style_txt.text.line_space = 1;
 800801e:	8567      	strh	r7, [r4, #42]	; 0x2a
	cont = lv_cont_create(Tela_Principal, NULL);
 8008020:	f00d fbf6 	bl	8015810 <lv_cont_create>
	lv_obj_set_style(cont, &style_txt);
 8008024:	4621      	mov	r1, r4
	cont = lv_cont_create(Tela_Principal, NULL);
 8008026:	4606      	mov	r6, r0
	lv_obj_set_style(cont, &style_txt);
 8008028:	f007 f9cc 	bl	800f3c4 <lv_obj_set_style>
	lv_obj_set_size(cont, 30, 12);
 800802c:	220c      	movs	r2, #12
 800802e:	211e      	movs	r1, #30
 8008030:	4630      	mov	r0, r6
 8008032:	f007 f8c5 	bl	800f1c0 <lv_obj_set_size>
	lv_obj_align(cont, NULL, LV_ALIGN_IN_TOP_LEFT, 127, 45);
 8008036:	232d      	movs	r3, #45	; 0x2d
 8008038:	9300      	str	r3, [sp, #0]
 800803a:	463a      	mov	r2, r7
 800803c:	237f      	movs	r3, #127	; 0x7f
 800803e:	2100      	movs	r1, #0
 8008040:	4630      	mov	r0, r6
 8008042:	f006 fd1d 	bl	800ea80 <lv_obj_align>
	lv_cont_set_layout(cont, LV_LAYOUT_COL_M);
 8008046:	2103      	movs	r1, #3
 8008048:	4630      	mov	r0, r6
 800804a:	f00d fc43 	bl	80158d4 <lv_cont_set_layout>
	label = lv_label_create(cont, NULL);
 800804e:	2100      	movs	r1, #0
 8008050:	4630      	mov	r0, r6
 8008052:	f00f fd07 	bl	8017a64 <lv_label_create>
	if(!falha) {
 8008056:	b92d      	cbnz	r5, 8008064 <print_status+0x98>
		lv_label_set_text(label, "OK");
 8008058:	4919      	ldr	r1, [pc, #100]	; (80080c0 <print_status+0xf4>)
}
 800805a:	b003      	add	sp, #12
 800805c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		lv_label_set_text(label, "OK");
 8008060:	f00f bc56 	b.w	8017910 <lv_label_set_text>
		style_txt.body.main_color = LV_COLOR_RED;
 8008064:	78a3      	ldrb	r3, [r4, #2]
		lv_label_set_text(label, "FAIL");
 8008066:	4917      	ldr	r1, [pc, #92]	; (80080c4 <print_status+0xf8>)
		style_txt.body.main_color = LV_COLOR_RED;
 8008068:	f36f 0304 	bfc	r3, #0, #5
 800806c:	70a3      	strb	r3, [r4, #2]
 800806e:	8863      	ldrh	r3, [r4, #2]
 8008070:	f36f 134a 	bfc	r3, #5, #6
 8008074:	8063      	strh	r3, [r4, #2]
 8008076:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800807a:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 800807e:	70e3      	strb	r3, [r4, #3]
		style_txt.body.grad_color = LV_COLOR_RED;
 8008080:	7923      	ldrb	r3, [r4, #4]
 8008082:	f36f 0304 	bfc	r3, #0, #5
 8008086:	7123      	strb	r3, [r4, #4]
 8008088:	88a3      	ldrh	r3, [r4, #4]
 800808a:	f36f 134a 	bfc	r3, #5, #6
 800808e:	80a3      	strh	r3, [r4, #4]
 8008090:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8008094:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 8008098:	7163      	strb	r3, [r4, #5]
		lv_label_set_text(label, "FAIL");
 800809a:	f00f fc39 	bl	8017910 <lv_label_set_text>
		print_alarme(falha);
 800809e:	4628      	mov	r0, r5
}
 80080a0:	b003      	add	sp, #12
 80080a2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		print_alarme(falha);
 80080a6:	f7ff beaf 	b.w	8007e08 <print_alarme>
 80080aa:	bf00      	nop
 80080ac:	20005054 	.word	0x20005054
 80080b0:	2000c4a4 	.word	0x2000c4a4
 80080b4:	200006ec 	.word	0x200006ec
 80080b8:	0801c5c0 	.word	0x0801c5c0
 80080bc:	20004e10 	.word	0x20004e10
 80080c0:	0802b425 	.word	0x0802b425
 80080c4:	0802b428 	.word	0x0802b428

080080c8 <create_vumeter>:
{
 80080c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	lv_style_copy(&style_indic_off, &lv_style_pretty);
 80080ca:	4e70      	ldr	r6, [pc, #448]	; (800828c <create_vumeter+0x1c4>)
 80080cc:	4970      	ldr	r1, [pc, #448]	; (8008290 <create_vumeter+0x1c8>)
	lv_style_copy(&style_indic_vd, &lv_style_pretty);
 80080ce:	4d71      	ldr	r5, [pc, #452]	; (8008294 <create_vumeter+0x1cc>)
		bar[x] = lv_bar_create(Tela_Principal, NULL);
 80080d0:	4f71      	ldr	r7, [pc, #452]	; (8008298 <create_vumeter+0x1d0>)
	lv_style_copy(&style_indic_off, &lv_style_pretty);
 80080d2:	4630      	mov	r0, r6
 80080d4:	f007 fdd2 	bl	800fc7c <lv_style_copy>
	style_indic_off.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 80080d8:	4b70      	ldr	r3, [pc, #448]	; (800829c <create_vumeter+0x1d4>)
	lv_style_copy(&style_indic_vd, &lv_style_pretty);
 80080da:	496d      	ldr	r1, [pc, #436]	; (8008290 <create_vumeter+0x1c8>)
	style_indic_off.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 80080dc:	885b      	ldrh	r3, [r3, #2]
 80080de:	80b3      	strh	r3, [r6, #4]
	style_indic_off.body.radius = 0;
 80080e0:	2400      	movs	r4, #0
	lv_style_copy(&style_indic_vd, &lv_style_pretty);
 80080e2:	4628      	mov	r0, r5
	style_indic_off.body.main_color = LV_COLOR_MAKE(105, 105, 105);
 80080e4:	8073      	strh	r3, [r6, #2]
	style_indic_off.body.border.color = LV_COLOR_MAKE(105, 105, 105);
 80080e6:	8173      	strh	r3, [r6, #10]
	style_indic_off.body.radius = 0;
 80080e8:	80f4      	strh	r4, [r6, #6]
	lv_style_copy(&style_indic_vd, &lv_style_pretty);
 80080ea:	f007 fdc7 	bl	800fc7c <lv_style_copy>
	style_indic_vd.body.grad_color = LV_COLOR_LIME;
 80080ee:	792b      	ldrb	r3, [r5, #4]
	style_indic_vd.body.radius = 0;
 80080f0:	80ec      	strh	r4, [r5, #6]
	style_indic_vd.body.grad_color = LV_COLOR_LIME;
 80080f2:	f364 0304 	bfi	r3, r4, #0, #5
 80080f6:	712b      	strb	r3, [r5, #4]
 80080f8:	88ab      	ldrh	r3, [r5, #4]
	lv_style_copy(&style_indic_cy, &lv_style_pretty);
 80080fa:	4965      	ldr	r1, [pc, #404]	; (8008290 <create_vumeter+0x1c8>)
	style_indic_vd.body.grad_color = LV_COLOR_LIME;
 80080fc:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 8008100:	80ab      	strh	r3, [r5, #4]
 8008102:	0a1b      	lsrs	r3, r3, #8
 8008104:	f364 03c7 	bfi	r3, r4, #3, #5
 8008108:	716b      	strb	r3, [r5, #5]
	style_indic_vd.body.main_color = LV_COLOR_LIME;
 800810a:	78ab      	ldrb	r3, [r5, #2]
 800810c:	f364 0304 	bfi	r3, r4, #0, #5
 8008110:	70ab      	strb	r3, [r5, #2]
 8008112:	886b      	ldrh	r3, [r5, #2]
 8008114:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 8008118:	806b      	strh	r3, [r5, #2]
 800811a:	0a1b      	lsrs	r3, r3, #8
 800811c:	f364 03c7 	bfi	r3, r4, #3, #5
 8008120:	70eb      	strb	r3, [r5, #3]
	style_indic_vd.body.border.color = LV_COLOR_LIME;
 8008122:	7aab      	ldrb	r3, [r5, #10]
 8008124:	f364 0304 	bfi	r3, r4, #0, #5
 8008128:	72ab      	strb	r3, [r5, #10]
 800812a:	896b      	ldrh	r3, [r5, #10]
 800812c:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 8008130:	816b      	strh	r3, [r5, #10]
 8008132:	0a1b      	lsrs	r3, r3, #8
 8008134:	f364 03c7 	bfi	r3, r4, #3, #5
 8008138:	72eb      	strb	r3, [r5, #11]
	lv_style_copy(&style_indic_cy, &lv_style_pretty);
 800813a:	4d59      	ldr	r5, [pc, #356]	; (80082a0 <create_vumeter+0x1d8>)
 800813c:	4628      	mov	r0, r5
 800813e:	f007 fd9d 	bl	800fc7c <lv_style_copy>
	style_indic_cy.body.grad_color = LV_COLOR_CYAN;
 8008142:	792b      	ldrb	r3, [r5, #4]
	style_indic_cy.body.radius = 0;
 8008144:	80ec      	strh	r4, [r5, #6]
	style_indic_cy.body.grad_color = LV_COLOR_CYAN;
 8008146:	f043 031f 	orr.w	r3, r3, #31
 800814a:	712b      	strb	r3, [r5, #4]
 800814c:	88ab      	ldrh	r3, [r5, #4]
	lv_style_copy(&style_indic_am, &lv_style_pretty);
 800814e:	4950      	ldr	r1, [pc, #320]	; (8008290 <create_vumeter+0x1c8>)
	style_indic_cy.body.grad_color = LV_COLOR_CYAN;
 8008150:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 8008154:	80ab      	strh	r3, [r5, #4]
 8008156:	0a1b      	lsrs	r3, r3, #8
 8008158:	f364 03c7 	bfi	r3, r4, #3, #5
 800815c:	716b      	strb	r3, [r5, #5]
	style_indic_cy.body.main_color = LV_COLOR_CYAN;
 800815e:	78ab      	ldrb	r3, [r5, #2]
 8008160:	f043 031f 	orr.w	r3, r3, #31
 8008164:	70ab      	strb	r3, [r5, #2]
 8008166:	886b      	ldrh	r3, [r5, #2]
 8008168:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800816c:	806b      	strh	r3, [r5, #2]
 800816e:	0a1b      	lsrs	r3, r3, #8
 8008170:	f364 03c7 	bfi	r3, r4, #3, #5
 8008174:	70eb      	strb	r3, [r5, #3]
	style_indic_cy.body.border.color = LV_COLOR_CYAN;
 8008176:	7aab      	ldrb	r3, [r5, #10]
 8008178:	f043 031f 	orr.w	r3, r3, #31
 800817c:	72ab      	strb	r3, [r5, #10]
 800817e:	896b      	ldrh	r3, [r5, #10]
 8008180:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 8008184:	816b      	strh	r3, [r5, #10]
 8008186:	0a1b      	lsrs	r3, r3, #8
 8008188:	f364 03c7 	bfi	r3, r4, #3, #5
 800818c:	72eb      	strb	r3, [r5, #11]
	lv_style_copy(&style_indic_am, &lv_style_pretty);
 800818e:	4d45      	ldr	r5, [pc, #276]	; (80082a4 <create_vumeter+0x1dc>)
 8008190:	4628      	mov	r0, r5
 8008192:	f007 fd73 	bl	800fc7c <lv_style_copy>
	style_indic_am.body.grad_color = LV_COLOR_YELLOW;
 8008196:	792b      	ldrb	r3, [r5, #4]
	style_indic_am.body.radius = 0;
 8008198:	80ec      	strh	r4, [r5, #6]
	style_indic_am.body.grad_color = LV_COLOR_YELLOW;
 800819a:	f364 0304 	bfi	r3, r4, #0, #5
 800819e:	712b      	strb	r3, [r5, #4]
 80081a0:	88ab      	ldrh	r3, [r5, #4]
	lv_style_copy(&style_indic_vm, &lv_style_pretty);
 80081a2:	493b      	ldr	r1, [pc, #236]	; (8008290 <create_vumeter+0x1c8>)
	style_indic_am.body.grad_color = LV_COLOR_YELLOW;
 80081a4:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 80081a8:	80ab      	strh	r3, [r5, #4]
 80081aa:	0a1b      	lsrs	r3, r3, #8
 80081ac:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 80081b0:	716b      	strb	r3, [r5, #5]
	style_indic_am.body.main_color = LV_COLOR_YELLOW;
 80081b2:	78ab      	ldrb	r3, [r5, #2]
 80081b4:	f364 0304 	bfi	r3, r4, #0, #5
 80081b8:	70ab      	strb	r3, [r5, #2]
 80081ba:	886b      	ldrh	r3, [r5, #2]
 80081bc:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 80081c0:	806b      	strh	r3, [r5, #2]
 80081c2:	0a1b      	lsrs	r3, r3, #8
 80081c4:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 80081c8:	70eb      	strb	r3, [r5, #3]
	style_indic_am.body.border.color = LV_COLOR_YELLOW;
 80081ca:	7aab      	ldrb	r3, [r5, #10]
 80081cc:	f364 0304 	bfi	r3, r4, #0, #5
 80081d0:	72ab      	strb	r3, [r5, #10]
 80081d2:	896b      	ldrh	r3, [r5, #10]
 80081d4:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 80081d8:	816b      	strh	r3, [r5, #10]
 80081da:	0a1b      	lsrs	r3, r3, #8
 80081dc:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 80081e0:	72eb      	strb	r3, [r5, #11]
	lv_style_copy(&style_indic_vm, &lv_style_pretty);
 80081e2:	4d31      	ldr	r5, [pc, #196]	; (80082a8 <create_vumeter+0x1e0>)
 80081e4:	4628      	mov	r0, r5
 80081e6:	f007 fd49 	bl	800fc7c <lv_style_copy>
	style_indic_vm.body.grad_color = LV_COLOR_RED;
 80081ea:	792b      	ldrb	r3, [r5, #4]
	style_indic_vm.body.radius = 0;
 80081ec:	80ec      	strh	r4, [r5, #6]
	style_indic_vm.body.grad_color = LV_COLOR_RED;
 80081ee:	f364 0304 	bfi	r3, r4, #0, #5
 80081f2:	712b      	strb	r3, [r5, #4]
 80081f4:	88ab      	ldrh	r3, [r5, #4]
 80081f6:	f364 134a 	bfi	r3, r4, #5, #6
 80081fa:	80ab      	strh	r3, [r5, #4]
 80081fc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8008200:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 8008204:	716b      	strb	r3, [r5, #5]
	style_indic_vm.body.main_color = LV_COLOR_RED;
 8008206:	78ab      	ldrb	r3, [r5, #2]
 8008208:	f364 0304 	bfi	r3, r4, #0, #5
 800820c:	70ab      	strb	r3, [r5, #2]
 800820e:	886b      	ldrh	r3, [r5, #2]
 8008210:	f364 134a 	bfi	r3, r4, #5, #6
 8008214:	806b      	strh	r3, [r5, #2]
 8008216:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800821a:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 800821e:	70eb      	strb	r3, [r5, #3]
	style_indic_vm.body.border.color = LV_COLOR_RED;
 8008220:	7aab      	ldrb	r3, [r5, #10]
 8008222:	f364 0304 	bfi	r3, r4, #0, #5
 8008226:	72ab      	strb	r3, [r5, #10]
 8008228:	896b      	ldrh	r3, [r5, #10]
 800822a:	f364 134a 	bfi	r3, r4, #5, #6
 800822e:	816b      	strh	r3, [r5, #10]
 8008230:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8008234:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 8008238:	72eb      	strb	r3, [r5, #11]
 800823a:	4d1c      	ldr	r5, [pc, #112]	; (80082ac <create_vumeter+0x1e4>)
		bar[x] = lv_bar_create(Tela_Principal, NULL);
 800823c:	6838      	ldr	r0, [r7, #0]
 800823e:	2100      	movs	r1, #0
 8008240:	f00c fdfe 	bl	8014e40 <lv_bar_create>
		lv_obj_set_size(bar[x], 3, 12);
 8008244:	220c      	movs	r2, #12
		bar[x] = lv_bar_create(Tela_Principal, NULL);
 8008246:	6068      	str	r0, [r5, #4]
		lv_obj_set_size(bar[x], 3, 12);
 8008248:	2103      	movs	r1, #3
 800824a:	f006 ffb9 	bl	800f1c0 <lv_obj_set_size>
		lv_bar_set_style(bar[x], LV_BAR_STYLE_BG, &style_indic_off);
 800824e:	6868      	ldr	r0, [r5, #4]
 8008250:	4632      	mov	r2, r6
 8008252:	2100      	movs	r1, #0
 8008254:	f00c fdde 	bl	8014e14 <lv_bar_set_style>
		lv_bar_set_style(bar[x], LV_BAR_STYLE_INDIC, &style_indic_off);
 8008258:	6868      	ldr	r0, [r5, #4]
 800825a:	4632      	mov	r2, r6
 800825c:	2101      	movs	r1, #1
 800825e:	f00c fdd9 	bl	8014e14 <lv_bar_set_style>
		lv_obj_align(bar[x], NULL, LV_ALIGN_IN_TOP_LEFT, vumeter_pos_x[x], 43);
 8008262:	222b      	movs	r2, #43	; 0x2b
 8008264:	4b12      	ldr	r3, [pc, #72]	; (80082b0 <create_vumeter+0x1e8>)
 8008266:	9200      	str	r2, [sp, #0]
 8008268:	f933 3024 	ldrsh.w	r3, [r3, r4, lsl #2]
 800826c:	6868      	ldr	r0, [r5, #4]
 800826e:	2201      	movs	r2, #1
 8008270:	2100      	movs	r1, #0
 8008272:	f006 fc05 	bl	800ea80 <lv_obj_align>
 8008276:	3401      	adds	r4, #1
		lv_bar_set_value(bar[x], 100, 0);
 8008278:	2200      	movs	r2, #0
 800827a:	2164      	movs	r1, #100	; 0x64
 800827c:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8008280:	f00c fd6c 	bl	8014d5c <lv_bar_set_value>
	for(uint8_t x = 0; x < 20; x++) {
 8008284:	2c14      	cmp	r4, #20
 8008286:	d1d9      	bne.n	800823c <create_vumeter+0x174>
}
 8008288:	b003      	add	sp, #12
 800828a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800828c:	20004f28 	.word	0x20004f28
 8008290:	2000c3b4 	.word	0x2000c3b4
 8008294:	20004f64 	.word	0x20004f64
 8008298:	20004e10 	.word	0x20004e10
 800829c:	0801c5c0 	.word	0x0801c5c0
 80082a0:	20004eec 	.word	0x20004eec
 80082a4:	20004eb0 	.word	0x20004eb0
 80082a8:	20004fa0 	.word	0x20004fa0
 80082ac:	20004e10 	.word	0x20004e10
 80082b0:	0802b458 	.word	0x0802b458

080082b4 <main_screen>:
	Tela_Principal = lv_obj_create(NULL, NULL);
 80082b4:	2100      	movs	r1, #0
{
 80082b6:	b538      	push	{r3, r4, r5, lr}
	Tela_Principal = lv_obj_create(NULL, NULL);
 80082b8:	4608      	mov	r0, r1
 80082ba:	f006 fe03 	bl	800eec4 <lv_obj_create>
 80082be:	4d21      	ldr	r5, [pc, #132]	; (8008344 <main_screen+0x90>)
	img_fundo = lv_img_create(Tela_Principal, NULL);
 80082c0:	4c21      	ldr	r4, [pc, #132]	; (8008348 <main_screen+0x94>)
	Tela_Principal = lv_obj_create(NULL, NULL);
 80082c2:	6028      	str	r0, [r5, #0]
	img_fundo = lv_img_create(Tela_Principal, NULL);
 80082c4:	2100      	movs	r1, #0
 80082c6:	f00e fcff 	bl	8016cc8 <lv_img_create>
    lv_img_set_src(img_fundo, &tela_0);
 80082ca:	4920      	ldr	r1, [pc, #128]	; (800834c <main_screen+0x98>)
	img_fundo = lv_img_create(Tela_Principal, NULL);
 80082cc:	6020      	str	r0, [r4, #0]
    lv_img_set_src(img_fundo, &tela_0);
 80082ce:	f00e fc6b 	bl	8016ba8 <lv_img_set_src>
	lv_obj_set_protect(img_fundo, LV_PROTECT_POS);
 80082d2:	2104      	movs	r1, #4
 80082d4:	6820      	ldr	r0, [r4, #0]
 80082d6:	f006 fa27 	bl	800e728 <lv_obj_set_protect>
	lv_obj_set_event_cb(img_fundo, main_screen_event);
 80082da:	491d      	ldr	r1, [pc, #116]	; (8008350 <main_screen+0x9c>)
 80082dc:	6820      	ldr	r0, [r4, #0]
 80082de:	f006 fa30 	bl	800e742 <lv_obj_set_event_cb>
	lv_obj_set_click(img_fundo, 1);
 80082e2:	2101      	movs	r1, #1
 80082e4:	6820      	ldr	r0, [r4, #0]
 80082e6:	f006 fa03 	bl	800e6f0 <lv_obj_set_click>
	print_frequencia(frequencia);
 80082ea:	4b1a      	ldr	r3, [pc, #104]	; (8008354 <main_screen+0xa0>)
 80082ec:	6818      	ldr	r0, [r3, #0]
 80082ee:	f7ff fb3b 	bl	8007968 <print_frequencia>
	print_audio(Cfg_Stereo, Cfg_Audio);
 80082f2:	4b19      	ldr	r3, [pc, #100]	; (8008358 <main_screen+0xa4>)
 80082f4:	7819      	ldrb	r1, [r3, #0]
 80082f6:	4b19      	ldr	r3, [pc, #100]	; (800835c <main_screen+0xa8>)
 80082f8:	7818      	ldrb	r0, [r3, #0]
 80082fa:	f7ff fca1 	bl	8007c40 <print_audio>
	print_temperatura(temperatura);
 80082fe:	4b18      	ldr	r3, [pc, #96]	; (8008360 <main_screen+0xac>)
 8008300:	ed93 0a00 	vldr	s0, [r3]
 8008304:	f7ff fd30 	bl	8007d68 <print_temperatura>
	print_status(falha);
 8008308:	4b16      	ldr	r3, [pc, #88]	; (8008364 <main_screen+0xb0>)
 800830a:	6818      	ldr	r0, [r3, #0]
 800830c:	f7ff fe5e 	bl	8007fcc <print_status>
	print_pot(forward, reflected);
 8008310:	4b15      	ldr	r3, [pc, #84]	; (8008368 <main_screen+0xb4>)
 8008312:	edd3 0a00 	vldr	s1, [r3]
 8008316:	4b15      	ldr	r3, [pc, #84]	; (800836c <main_screen+0xb8>)
 8008318:	ed93 0a00 	vldr	s0, [r3]
 800831c:	f7ff fb82 	bl	8007a24 <print_pot>
	create_vumeter();
 8008320:	f7ff fed2 	bl	80080c8 <create_vumeter>
    return lv_disp_get_layer_sys(lv_disp_get_default());
}

static inline void lv_scr_load(lv_obj_t * scr)
{
    lv_disp_load_scr(scr);
 8008324:	6828      	ldr	r0, [r5, #0]
 8008326:	f005 ffb9 	bl	800e29c <lv_disp_load_scr>
	Task_Principal = lv_task_create(update_main_screen, 500, LV_TASK_PRIO_MID, NULL);
 800832a:	2300      	movs	r3, #0
 800832c:	2203      	movs	r2, #3
 800832e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8008332:	480f      	ldr	r0, [pc, #60]	; (8008370 <main_screen+0xbc>)
 8008334:	f00c fa6e 	bl	8014814 <lv_task_create>
 8008338:	4b0e      	ldr	r3, [pc, #56]	; (8008374 <main_screen+0xc0>)
 800833a:	6018      	str	r0, [r3, #0]
	TelaAtiva = TelaPrincipal;
 800833c:	4b0e      	ldr	r3, [pc, #56]	; (8008378 <main_screen+0xc4>)
 800833e:	2200      	movs	r2, #0
 8008340:	601a      	str	r2, [r3, #0]
 8008342:	bd38      	pop	{r3, r4, r5, pc}
 8008344:	20004e10 	.word	0x20004e10
 8008348:	20004e6c 	.word	0x20004e6c
 800834c:	20001b80 	.word	0x20001b80
 8008350:	08007941 	.word	0x08007941
 8008354:	20000004 	.word	0x20000004
 8008358:	200033da 	.word	0x200033da
 800835c:	20000000 	.word	0x20000000
 8008360:	20000014 	.word	0x20000014
 8008364:	20004dcc 	.word	0x20004dcc
 8008368:	20004ddc 	.word	0x20004ddc
 800836c:	20004dd0 	.word	0x20004dd0
 8008370:	080083d1 	.word	0x080083d1
 8008374:	20004e0c 	.word	0x20004e0c
 8008378:	200033e4 	.word	0x200033e4

0800837c <ButtonEventTelaPrincipal>:
	if(event == 0x10) {
 800837c:	2810      	cmp	r0, #16
 800837e:	d107      	bne.n	8008390 <ButtonEventTelaPrincipal+0x14>
		if(tipo == 0x01) {	// Single Click
 8008380:	2901      	cmp	r1, #1
 8008382:	d105      	bne.n	8008390 <ButtonEventTelaPrincipal+0x14>
			lv_event_send(img_fundo, LV_EVENT_APPLY, NULL);
 8008384:	4b03      	ldr	r3, [pc, #12]	; (8008394 <ButtonEventTelaPrincipal+0x18>)
 8008386:	2200      	movs	r2, #0
 8008388:	2111      	movs	r1, #17
 800838a:	6818      	ldr	r0, [r3, #0]
 800838c:	f006 ba20 	b.w	800e7d0 <lv_event_send>
 8008390:	4770      	bx	lr
 8008392:	bf00      	nop
 8008394:	20004e6c 	.word	0x20004e6c

08008398 <bargraph_off>:

void bargraph_off(uint8_t value)
{
 8008398:	b570      	push	{r4, r5, r6, lr}
 800839a:	4c0b      	ldr	r4, [pc, #44]	; (80083c8 <bargraph_off+0x30>)
	for(uint8_t x = value; x < 20; x++) {
		lv_bar_set_style(bar[x], LV_BAR_STYLE_BG, &style_indic_off);
 800839c:	4e0b      	ldr	r6, [pc, #44]	; (80083cc <bargraph_off+0x34>)
 800839e:	eb04 0480 	add.w	r4, r4, r0, lsl #2
{
 80083a2:	4605      	mov	r5, r0
 80083a4:	3c04      	subs	r4, #4
	for(uint8_t x = value; x < 20; x++) {
 80083a6:	2d13      	cmp	r5, #19
 80083a8:	d900      	bls.n	80083ac <bargraph_off+0x14>
		lv_bar_set_style(bar[x], LV_BAR_STYLE_INDIC, &style_indic_off);
	}
}
 80083aa:	bd70      	pop	{r4, r5, r6, pc}
		lv_bar_set_style(bar[x], LV_BAR_STYLE_BG, &style_indic_off);
 80083ac:	4632      	mov	r2, r6
 80083ae:	2100      	movs	r1, #0
 80083b0:	6860      	ldr	r0, [r4, #4]
 80083b2:	f00c fd2f 	bl	8014e14 <lv_bar_set_style>
	for(uint8_t x = value; x < 20; x++) {
 80083b6:	3501      	adds	r5, #1
		lv_bar_set_style(bar[x], LV_BAR_STYLE_INDIC, &style_indic_off);
 80083b8:	4632      	mov	r2, r6
 80083ba:	2101      	movs	r1, #1
 80083bc:	f854 0f04 	ldr.w	r0, [r4, #4]!
 80083c0:	f00c fd28 	bl	8014e14 <lv_bar_set_style>
	for(uint8_t x = value; x < 20; x++) {
 80083c4:	b2ed      	uxtb	r5, r5
 80083c6:	e7ee      	b.n	80083a6 <bargraph_off+0xe>
 80083c8:	20004e14 	.word	0x20004e14
 80083cc:	20004f28 	.word	0x20004f28

080083d0 <update_main_screen>:
			break;
	}
}

static void update_main_screen(lv_task_t * param)
{
 80083d0:	b538      	push	{r3, r4, r5, lr}
	if(!falha) {
 80083d2:	4c88      	ldr	r4, [pc, #544]	; (80085f4 <update_main_screen+0x224>)
 80083d4:	6822      	ldr	r2, [r4, #0]
 80083d6:	bb3a      	cbnz	r2, 8008428 <update_main_screen+0x58>
		// Potencia Direta
		lv_label_set_text(txt_fwd, "FWD:");
 80083d8:	4b87      	ldr	r3, [pc, #540]	; (80085f8 <update_main_screen+0x228>)
 80083da:	4988      	ldr	r1, [pc, #544]	; (80085fc <update_main_screen+0x22c>)
 80083dc:	6818      	ldr	r0, [r3, #0]
 80083de:	f00f fa97 	bl	8017910 <lv_label_set_text>
		sprintf(buffer, "%0.1fW", forward);
 80083e2:	4b87      	ldr	r3, [pc, #540]	; (8008600 <update_main_screen+0x230>)
 80083e4:	6818      	ldr	r0, [r3, #0]
 80083e6:	f7f8 f8af 	bl	8000548 <__aeabi_f2d>
 80083ea:	4602      	mov	r2, r0
 80083ec:	460b      	mov	r3, r1
 80083ee:	4885      	ldr	r0, [pc, #532]	; (8008604 <update_main_screen+0x234>)
 80083f0:	4985      	ldr	r1, [pc, #532]	; (8008608 <update_main_screen+0x238>)
 80083f2:	f011 fb93 	bl	8019b1c <sprintf>
		lv_label_set_text(txt_pot, buffer);
 80083f6:	4b85      	ldr	r3, [pc, #532]	; (800860c <update_main_screen+0x23c>)
 80083f8:	4982      	ldr	r1, [pc, #520]	; (8008604 <update_main_screen+0x234>)
 80083fa:	6818      	ldr	r0, [r3, #0]
 80083fc:	f00f fa88 	bl	8017910 <lv_label_set_text>
		// Refletida
		lv_label_set_text(txt_ref, "REF:");
 8008400:	4b83      	ldr	r3, [pc, #524]	; (8008610 <update_main_screen+0x240>)
 8008402:	4984      	ldr	r1, [pc, #528]	; (8008614 <update_main_screen+0x244>)
 8008404:	6818      	ldr	r0, [r3, #0]
 8008406:	f00f fa83 	bl	8017910 <lv_label_set_text>
		sprintf(buffer, "%0.1fW", reflected);
 800840a:	4b83      	ldr	r3, [pc, #524]	; (8008618 <update_main_screen+0x248>)
 800840c:	6818      	ldr	r0, [r3, #0]
 800840e:	f7f8 f89b 	bl	8000548 <__aeabi_f2d>
 8008412:	460b      	mov	r3, r1
 8008414:	4602      	mov	r2, r0
 8008416:	497c      	ldr	r1, [pc, #496]	; (8008608 <update_main_screen+0x238>)
 8008418:	487a      	ldr	r0, [pc, #488]	; (8008604 <update_main_screen+0x234>)
 800841a:	f011 fb7f 	bl	8019b1c <sprintf>
		lv_label_set_text(txt_swr, buffer);
 800841e:	4b7f      	ldr	r3, [pc, #508]	; (800861c <update_main_screen+0x24c>)
 8008420:	4978      	ldr	r1, [pc, #480]	; (8008604 <update_main_screen+0x234>)
 8008422:	6818      	ldr	r0, [r3, #0]
 8008424:	f00f fa74 	bl	8017910 <lv_label_set_text>
	}
	// Temperatura
	sprintf(buffer, "TP:%0.1f°", temperatura);
 8008428:	4b7d      	ldr	r3, [pc, #500]	; (8008620 <update_main_screen+0x250>)
 800842a:	6818      	ldr	r0, [r3, #0]
 800842c:	f7f8 f88c 	bl	8000548 <__aeabi_f2d>
 8008430:	460b      	mov	r3, r1
 8008432:	4602      	mov	r2, r0
 8008434:	497b      	ldr	r1, [pc, #492]	; (8008624 <update_main_screen+0x254>)
 8008436:	4873      	ldr	r0, [pc, #460]	; (8008604 <update_main_screen+0x234>)
 8008438:	f011 fb70 	bl	8019b1c <sprintf>
//	lv_label_set_text(txt_temp, buffer);

	// Status
    switch(falha) {
 800843c:	6823      	ldr	r3, [r4, #0]
 800843e:	3b01      	subs	r3, #1
 8008440:	2b06      	cmp	r3, #6
 8008442:	d80f      	bhi.n	8008464 <update_main_screen+0x94>
 8008444:	e8df f003 	tbb	[pc, r3]
 8008448:	37302904 	.word	0x37302904
 800844c:	453e      	.short	0x453e
 800844e:	4c          	.byte	0x4c
 800844f:	00          	.byte	0x00
    	case FAIL_PLLLOCK:
    		lv_label_set_text(cod_falha, "Fail 01");
 8008450:	4b75      	ldr	r3, [pc, #468]	; (8008628 <update_main_screen+0x258>)
 8008452:	4976      	ldr	r1, [pc, #472]	; (800862c <update_main_screen+0x25c>)
 8008454:	6818      	ldr	r0, [r3, #0]
 8008456:	f00f fa5b 	bl	8017910 <lv_label_set_text>
    		lv_label_set_text(desc_falha, "PLL NO LOCK");
 800845a:	4975      	ldr	r1, [pc, #468]	; (8008630 <update_main_screen+0x260>)
    		lv_label_set_text(cod_falha, "Fail 06");
    		lv_label_set_text(desc_falha, "VIN Fail");
    		break;
    	case FAIL_SWR:
    		lv_label_set_text(cod_falha, "Fail 07");
    		lv_label_set_text(desc_falha, "No Antenna");
 800845c:	4b75      	ldr	r3, [pc, #468]	; (8008634 <update_main_screen+0x264>)
 800845e:	6818      	ldr	r0, [r3, #0]
 8008460:	f00f fa56 	bl	8017910 <lv_label_set_text>
    		break;
    }
	// Vu-Meter MPX
    update_vumeter_mpx(mpx);
 8008464:	4d74      	ldr	r5, [pc, #464]	; (8008638 <update_main_screen+0x268>)
	switch(value) {
 8008466:	682b      	ldr	r3, [r5, #0]
 8008468:	2b14      	cmp	r3, #20
 800846a:	d843      	bhi.n	80084f4 <update_main_screen+0x124>
 800846c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008470:	0051003f 	.word	0x0051003f
 8008474:	0075005e 	.word	0x0075005e
 8008478:	01040096 	.word	0x01040096
 800847c:	01780139 	.word	0x01780139
 8008480:	021801c1 	.word	0x021801c1
 8008484:	02dc0275 	.word	0x02dc0275
 8008488:	03cd0352 	.word	0x03cd0352
 800848c:	04e80458 	.word	0x04e80458
 8008490:	062e058a 	.word	0x062e058a
 8008494:	07a606e4 	.word	0x07a606e4
 8008498:	0872      	.short	0x0872
    		lv_label_set_text(cod_falha, "Fail 02");
 800849a:	4b63      	ldr	r3, [pc, #396]	; (8008628 <update_main_screen+0x258>)
 800849c:	4967      	ldr	r1, [pc, #412]	; (800863c <update_main_screen+0x26c>)
 800849e:	6818      	ldr	r0, [r3, #0]
 80084a0:	f00f fa36 	bl	8017910 <lv_label_set_text>
    		lv_label_set_text(desc_falha, "Reflected High");
 80084a4:	4966      	ldr	r1, [pc, #408]	; (8008640 <update_main_screen+0x270>)
 80084a6:	e7d9      	b.n	800845c <update_main_screen+0x8c>
    		lv_label_set_text(cod_falha, "Fail 03");
 80084a8:	4b5f      	ldr	r3, [pc, #380]	; (8008628 <update_main_screen+0x258>)
 80084aa:	4966      	ldr	r1, [pc, #408]	; (8008644 <update_main_screen+0x274>)
 80084ac:	6818      	ldr	r0, [r3, #0]
 80084ae:	f00f fa2f 	bl	8017910 <lv_label_set_text>
    		lv_label_set_text(desc_falha, "Foldback");
 80084b2:	4965      	ldr	r1, [pc, #404]	; (8008648 <update_main_screen+0x278>)
 80084b4:	e7d2      	b.n	800845c <update_main_screen+0x8c>
    		lv_label_set_text(cod_falha, "Fail 04");
 80084b6:	4b5c      	ldr	r3, [pc, #368]	; (8008628 <update_main_screen+0x258>)
 80084b8:	4964      	ldr	r1, [pc, #400]	; (800864c <update_main_screen+0x27c>)
 80084ba:	6818      	ldr	r0, [r3, #0]
 80084bc:	f00f fa28 	bl	8017910 <lv_label_set_text>
    		lv_label_set_text(desc_falha, "Foldback IPA");
 80084c0:	4963      	ldr	r1, [pc, #396]	; (8008650 <update_main_screen+0x280>)
 80084c2:	e7cb      	b.n	800845c <update_main_screen+0x8c>
    		lv_label_set_text(cod_falha, "Fail 05");
 80084c4:	4b58      	ldr	r3, [pc, #352]	; (8008628 <update_main_screen+0x258>)
 80084c6:	4963      	ldr	r1, [pc, #396]	; (8008654 <update_main_screen+0x284>)
 80084c8:	6818      	ldr	r0, [r3, #0]
 80084ca:	f00f fa21 	bl	8017910 <lv_label_set_text>
    		lv_label_set_text(desc_falha, "IPA High");
 80084ce:	4962      	ldr	r1, [pc, #392]	; (8008658 <update_main_screen+0x288>)
 80084d0:	e7c4      	b.n	800845c <update_main_screen+0x8c>
    		lv_label_set_text(cod_falha, "Fail 06");
 80084d2:	4b55      	ldr	r3, [pc, #340]	; (8008628 <update_main_screen+0x258>)
 80084d4:	4961      	ldr	r1, [pc, #388]	; (800865c <update_main_screen+0x28c>)
 80084d6:	6818      	ldr	r0, [r3, #0]
 80084d8:	f00f fa1a 	bl	8017910 <lv_label_set_text>
    		lv_label_set_text(desc_falha, "VIN Fail");
 80084dc:	4960      	ldr	r1, [pc, #384]	; (8008660 <update_main_screen+0x290>)
 80084de:	e7bd      	b.n	800845c <update_main_screen+0x8c>
    		lv_label_set_text(cod_falha, "Fail 07");
 80084e0:	4b51      	ldr	r3, [pc, #324]	; (8008628 <update_main_screen+0x258>)
 80084e2:	4960      	ldr	r1, [pc, #384]	; (8008664 <update_main_screen+0x294>)
 80084e4:	6818      	ldr	r0, [r3, #0]
 80084e6:	f00f fa13 	bl	8017910 <lv_label_set_text>
    		lv_label_set_text(desc_falha, "No Antenna");
 80084ea:	495f      	ldr	r1, [pc, #380]	; (8008668 <update_main_screen+0x298>)
 80084ec:	e7b6      	b.n	800845c <update_main_screen+0x8c>
			bargraph_off(0);
 80084ee:	2000      	movs	r0, #0
			bargraph_off(18);
 80084f0:	f7ff ff52 	bl	8008398 <bargraph_off>
	if(!sent_hor) {
 80084f4:	4a5d      	ldr	r2, [pc, #372]	; (800866c <update_main_screen+0x29c>)
 80084f6:	7813      	ldrb	r3, [r2, #0]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	f041 80f6 	bne.w	80096ea <update_main_screen+0x131a>
		mpx++;
 80084fe:	682b      	ldr	r3, [r5, #0]
 8008500:	1c59      	adds	r1, r3, #1
		if(mpx > 20) {
 8008502:	2914      	cmp	r1, #20
		mpx++;
 8008504:	6029      	str	r1, [r5, #0]
		if(mpx > 20) {
 8008506:	f241 80f5 	bls.w	80096f4 <update_main_screen+0x1324>
			sent_hor = 1;
 800850a:	2101      	movs	r1, #1
 800850c:	7011      	strb	r1, [r2, #0]
			mpx--;
 800850e:	602b      	str	r3, [r5, #0]
 8008510:	bd38      	pop	{r3, r4, r5, pc}
			lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008512:	4c57      	ldr	r4, [pc, #348]	; (8008670 <update_main_screen+0x2a0>)
 8008514:	4a57      	ldr	r2, [pc, #348]	; (8008674 <update_main_screen+0x2a4>)
 8008516:	6820      	ldr	r0, [r4, #0]
 8008518:	2100      	movs	r1, #0
 800851a:	f00c fc7b 	bl	8014e14 <lv_bar_set_style>
 800851e:	6820      	ldr	r0, [r4, #0]
 8008520:	4a54      	ldr	r2, [pc, #336]	; (8008674 <update_main_screen+0x2a4>)
 8008522:	2101      	movs	r1, #1
 8008524:	f00c fc76 	bl	8014e14 <lv_bar_set_style>
			bargraph_off(1);
 8008528:	2001      	movs	r0, #1
 800852a:	e7e1      	b.n	80084f0 <update_main_screen+0x120>
			lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800852c:	4c50      	ldr	r4, [pc, #320]	; (8008670 <update_main_screen+0x2a0>)
 800852e:	4a51      	ldr	r2, [pc, #324]	; (8008674 <update_main_screen+0x2a4>)
 8008530:	6820      	ldr	r0, [r4, #0]
 8008532:	2100      	movs	r1, #0
 8008534:	f00c fc6e 	bl	8014e14 <lv_bar_set_style>
 8008538:	4a4e      	ldr	r2, [pc, #312]	; (8008674 <update_main_screen+0x2a4>)
 800853a:	6820      	ldr	r0, [r4, #0]
 800853c:	2101      	movs	r1, #1
 800853e:	f00c fc69 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[1], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[1], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008542:	4a4c      	ldr	r2, [pc, #304]	; (8008674 <update_main_screen+0x2a4>)
 8008544:	6860      	ldr	r0, [r4, #4]
 8008546:	2100      	movs	r1, #0
 8008548:	f00c fc64 	bl	8014e14 <lv_bar_set_style>
 800854c:	6860      	ldr	r0, [r4, #4]
 800854e:	4a49      	ldr	r2, [pc, #292]	; (8008674 <update_main_screen+0x2a4>)
 8008550:	2101      	movs	r1, #1
 8008552:	f00c fc5f 	bl	8014e14 <lv_bar_set_style>
			bargraph_off(2);
 8008556:	2002      	movs	r0, #2
 8008558:	e7ca      	b.n	80084f0 <update_main_screen+0x120>
			lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800855a:	4c45      	ldr	r4, [pc, #276]	; (8008670 <update_main_screen+0x2a0>)
 800855c:	4a45      	ldr	r2, [pc, #276]	; (8008674 <update_main_screen+0x2a4>)
 800855e:	6820      	ldr	r0, [r4, #0]
 8008560:	2100      	movs	r1, #0
 8008562:	f00c fc57 	bl	8014e14 <lv_bar_set_style>
 8008566:	4a43      	ldr	r2, [pc, #268]	; (8008674 <update_main_screen+0x2a4>)
 8008568:	6820      	ldr	r0, [r4, #0]
 800856a:	2101      	movs	r1, #1
 800856c:	f00c fc52 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[1], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[1], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008570:	4a40      	ldr	r2, [pc, #256]	; (8008674 <update_main_screen+0x2a4>)
 8008572:	6860      	ldr	r0, [r4, #4]
 8008574:	2100      	movs	r1, #0
 8008576:	f00c fc4d 	bl	8014e14 <lv_bar_set_style>
 800857a:	4a3e      	ldr	r2, [pc, #248]	; (8008674 <update_main_screen+0x2a4>)
 800857c:	6860      	ldr	r0, [r4, #4]
 800857e:	2101      	movs	r1, #1
 8008580:	f00c fc48 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[2], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[2], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008584:	4a3b      	ldr	r2, [pc, #236]	; (8008674 <update_main_screen+0x2a4>)
 8008586:	68a0      	ldr	r0, [r4, #8]
 8008588:	2100      	movs	r1, #0
 800858a:	f00c fc43 	bl	8014e14 <lv_bar_set_style>
 800858e:	68a0      	ldr	r0, [r4, #8]
 8008590:	4a38      	ldr	r2, [pc, #224]	; (8008674 <update_main_screen+0x2a4>)
 8008592:	2101      	movs	r1, #1
 8008594:	f00c fc3e 	bl	8014e14 <lv_bar_set_style>
			bargraph_off(3);
 8008598:	2003      	movs	r0, #3
 800859a:	e7a9      	b.n	80084f0 <update_main_screen+0x120>
			lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800859c:	4c34      	ldr	r4, [pc, #208]	; (8008670 <update_main_screen+0x2a0>)
 800859e:	4a35      	ldr	r2, [pc, #212]	; (8008674 <update_main_screen+0x2a4>)
 80085a0:	6820      	ldr	r0, [r4, #0]
 80085a2:	2100      	movs	r1, #0
 80085a4:	f00c fc36 	bl	8014e14 <lv_bar_set_style>
 80085a8:	4a32      	ldr	r2, [pc, #200]	; (8008674 <update_main_screen+0x2a4>)
 80085aa:	6820      	ldr	r0, [r4, #0]
 80085ac:	2101      	movs	r1, #1
 80085ae:	f00c fc31 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[1], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[1], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80085b2:	4a30      	ldr	r2, [pc, #192]	; (8008674 <update_main_screen+0x2a4>)
 80085b4:	6860      	ldr	r0, [r4, #4]
 80085b6:	2100      	movs	r1, #0
 80085b8:	f00c fc2c 	bl	8014e14 <lv_bar_set_style>
 80085bc:	4a2d      	ldr	r2, [pc, #180]	; (8008674 <update_main_screen+0x2a4>)
 80085be:	6860      	ldr	r0, [r4, #4]
 80085c0:	2101      	movs	r1, #1
 80085c2:	f00c fc27 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[2], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[2], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80085c6:	4a2b      	ldr	r2, [pc, #172]	; (8008674 <update_main_screen+0x2a4>)
 80085c8:	68a0      	ldr	r0, [r4, #8]
 80085ca:	2100      	movs	r1, #0
 80085cc:	f00c fc22 	bl	8014e14 <lv_bar_set_style>
 80085d0:	4a28      	ldr	r2, [pc, #160]	; (8008674 <update_main_screen+0x2a4>)
 80085d2:	68a0      	ldr	r0, [r4, #8]
 80085d4:	2101      	movs	r1, #1
 80085d6:	f00c fc1d 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[3], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[3], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80085da:	4a26      	ldr	r2, [pc, #152]	; (8008674 <update_main_screen+0x2a4>)
 80085dc:	68e0      	ldr	r0, [r4, #12]
 80085de:	2100      	movs	r1, #0
 80085e0:	f00c fc18 	bl	8014e14 <lv_bar_set_style>
 80085e4:	68e0      	ldr	r0, [r4, #12]
 80085e6:	4a23      	ldr	r2, [pc, #140]	; (8008674 <update_main_screen+0x2a4>)
 80085e8:	2101      	movs	r1, #1
 80085ea:	f00c fc13 	bl	8014e14 <lv_bar_set_style>
			bargraph_off(4);
 80085ee:	2004      	movs	r0, #4
 80085f0:	e77e      	b.n	80084f0 <update_main_screen+0x120>
 80085f2:	bf00      	nop
 80085f4:	20004dcc 	.word	0x20004dcc
 80085f8:	20005144 	.word	0x20005144
 80085fc:	0802b414 	.word	0x0802b414
 8008600:	20004dd0 	.word	0x20004dd0
 8008604:	20004ce8 	.word	0x20004ce8
 8008608:	0802b419 	.word	0x0802b419
 800860c:	20005148 	.word	0x20005148
 8008610:	2000514c 	.word	0x2000514c
 8008614:	0802b420 	.word	0x0802b420
 8008618:	20004ddc 	.word	0x20004ddc
 800861c:	20005150 	.word	0x20005150
 8008620:	20000014 	.word	0x20000014
 8008624:	0802b42d 	.word	0x0802b42d
 8008628:	20004e64 	.word	0x20004e64
 800862c:	0802b376 	.word	0x0802b376
 8008630:	0802b37e 	.word	0x0802b37e
 8008634:	20004e68 	.word	0x20004e68
 8008638:	20004dd8 	.word	0x20004dd8
 800863c:	0802b38a 	.word	0x0802b38a
 8008640:	0802b392 	.word	0x0802b392
 8008644:	0802b3a1 	.word	0x0802b3a1
 8008648:	0802b3a9 	.word	0x0802b3a9
 800864c:	0802b3b2 	.word	0x0802b3b2
 8008650:	0802b3ba 	.word	0x0802b3ba
 8008654:	0802b3c7 	.word	0x0802b3c7
 8008658:	0802b3cf 	.word	0x0802b3cf
 800865c:	0802b3d8 	.word	0x0802b3d8
 8008660:	0802b3e0 	.word	0x0802b3e0
 8008664:	0802b3e9 	.word	0x0802b3e9
 8008668:	0802b3f1 	.word	0x0802b3f1
 800866c:	20004de0 	.word	0x20004de0
 8008670:	20004e14 	.word	0x20004e14
 8008674:	20004f64 	.word	0x20004f64
			lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008678:	4c87      	ldr	r4, [pc, #540]	; (8008898 <update_main_screen+0x4c8>)
 800867a:	4a88      	ldr	r2, [pc, #544]	; (800889c <update_main_screen+0x4cc>)
 800867c:	6820      	ldr	r0, [r4, #0]
 800867e:	2100      	movs	r1, #0
 8008680:	f00c fbc8 	bl	8014e14 <lv_bar_set_style>
 8008684:	4a85      	ldr	r2, [pc, #532]	; (800889c <update_main_screen+0x4cc>)
 8008686:	6820      	ldr	r0, [r4, #0]
 8008688:	2101      	movs	r1, #1
 800868a:	f00c fbc3 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[1], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[1], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800868e:	4a83      	ldr	r2, [pc, #524]	; (800889c <update_main_screen+0x4cc>)
 8008690:	6860      	ldr	r0, [r4, #4]
 8008692:	2100      	movs	r1, #0
 8008694:	f00c fbbe 	bl	8014e14 <lv_bar_set_style>
 8008698:	4a80      	ldr	r2, [pc, #512]	; (800889c <update_main_screen+0x4cc>)
 800869a:	6860      	ldr	r0, [r4, #4]
 800869c:	2101      	movs	r1, #1
 800869e:	f00c fbb9 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[2], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[2], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80086a2:	4a7e      	ldr	r2, [pc, #504]	; (800889c <update_main_screen+0x4cc>)
 80086a4:	68a0      	ldr	r0, [r4, #8]
 80086a6:	2100      	movs	r1, #0
 80086a8:	f00c fbb4 	bl	8014e14 <lv_bar_set_style>
 80086ac:	4a7b      	ldr	r2, [pc, #492]	; (800889c <update_main_screen+0x4cc>)
 80086ae:	68a0      	ldr	r0, [r4, #8]
 80086b0:	2101      	movs	r1, #1
 80086b2:	f00c fbaf 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[3], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[3], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80086b6:	4a79      	ldr	r2, [pc, #484]	; (800889c <update_main_screen+0x4cc>)
 80086b8:	68e0      	ldr	r0, [r4, #12]
 80086ba:	2100      	movs	r1, #0
 80086bc:	f00c fbaa 	bl	8014e14 <lv_bar_set_style>
 80086c0:	4a76      	ldr	r2, [pc, #472]	; (800889c <update_main_screen+0x4cc>)
 80086c2:	68e0      	ldr	r0, [r4, #12]
 80086c4:	2101      	movs	r1, #1
 80086c6:	f00c fba5 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[4], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[4], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80086ca:	4a74      	ldr	r2, [pc, #464]	; (800889c <update_main_screen+0x4cc>)
 80086cc:	6920      	ldr	r0, [r4, #16]
 80086ce:	2100      	movs	r1, #0
 80086d0:	f00c fba0 	bl	8014e14 <lv_bar_set_style>
 80086d4:	6920      	ldr	r0, [r4, #16]
 80086d6:	4a71      	ldr	r2, [pc, #452]	; (800889c <update_main_screen+0x4cc>)
 80086d8:	2101      	movs	r1, #1
 80086da:	f00c fb9b 	bl	8014e14 <lv_bar_set_style>
			bargraph_off(5);
 80086de:	2005      	movs	r0, #5
 80086e0:	e706      	b.n	80084f0 <update_main_screen+0x120>
			lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80086e2:	4c6d      	ldr	r4, [pc, #436]	; (8008898 <update_main_screen+0x4c8>)
 80086e4:	4a6d      	ldr	r2, [pc, #436]	; (800889c <update_main_screen+0x4cc>)
 80086e6:	6820      	ldr	r0, [r4, #0]
 80086e8:	2100      	movs	r1, #0
 80086ea:	f00c fb93 	bl	8014e14 <lv_bar_set_style>
 80086ee:	4a6b      	ldr	r2, [pc, #428]	; (800889c <update_main_screen+0x4cc>)
 80086f0:	6820      	ldr	r0, [r4, #0]
 80086f2:	2101      	movs	r1, #1
 80086f4:	f00c fb8e 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[1], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[1], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80086f8:	4a68      	ldr	r2, [pc, #416]	; (800889c <update_main_screen+0x4cc>)
 80086fa:	6860      	ldr	r0, [r4, #4]
 80086fc:	2100      	movs	r1, #0
 80086fe:	f00c fb89 	bl	8014e14 <lv_bar_set_style>
 8008702:	4a66      	ldr	r2, [pc, #408]	; (800889c <update_main_screen+0x4cc>)
 8008704:	6860      	ldr	r0, [r4, #4]
 8008706:	2101      	movs	r1, #1
 8008708:	f00c fb84 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[2], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[2], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800870c:	4a63      	ldr	r2, [pc, #396]	; (800889c <update_main_screen+0x4cc>)
 800870e:	68a0      	ldr	r0, [r4, #8]
 8008710:	2100      	movs	r1, #0
 8008712:	f00c fb7f 	bl	8014e14 <lv_bar_set_style>
 8008716:	4a61      	ldr	r2, [pc, #388]	; (800889c <update_main_screen+0x4cc>)
 8008718:	68a0      	ldr	r0, [r4, #8]
 800871a:	2101      	movs	r1, #1
 800871c:	f00c fb7a 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[3], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[3], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008720:	4a5e      	ldr	r2, [pc, #376]	; (800889c <update_main_screen+0x4cc>)
 8008722:	68e0      	ldr	r0, [r4, #12]
 8008724:	2100      	movs	r1, #0
 8008726:	f00c fb75 	bl	8014e14 <lv_bar_set_style>
 800872a:	4a5c      	ldr	r2, [pc, #368]	; (800889c <update_main_screen+0x4cc>)
 800872c:	68e0      	ldr	r0, [r4, #12]
 800872e:	2101      	movs	r1, #1
 8008730:	f00c fb70 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[4], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[4], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008734:	4a59      	ldr	r2, [pc, #356]	; (800889c <update_main_screen+0x4cc>)
 8008736:	6920      	ldr	r0, [r4, #16]
 8008738:	2100      	movs	r1, #0
 800873a:	f00c fb6b 	bl	8014e14 <lv_bar_set_style>
 800873e:	4a57      	ldr	r2, [pc, #348]	; (800889c <update_main_screen+0x4cc>)
 8008740:	6920      	ldr	r0, [r4, #16]
 8008742:	2101      	movs	r1, #1
 8008744:	f00c fb66 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[5], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[5], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008748:	4a54      	ldr	r2, [pc, #336]	; (800889c <update_main_screen+0x4cc>)
 800874a:	6960      	ldr	r0, [r4, #20]
 800874c:	2100      	movs	r1, #0
 800874e:	f00c fb61 	bl	8014e14 <lv_bar_set_style>
 8008752:	6960      	ldr	r0, [r4, #20]
 8008754:	4a51      	ldr	r2, [pc, #324]	; (800889c <update_main_screen+0x4cc>)
 8008756:	2101      	movs	r1, #1
 8008758:	f00c fb5c 	bl	8014e14 <lv_bar_set_style>
			bargraph_off(6);
 800875c:	2006      	movs	r0, #6
 800875e:	e6c7      	b.n	80084f0 <update_main_screen+0x120>
			lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008760:	4c4d      	ldr	r4, [pc, #308]	; (8008898 <update_main_screen+0x4c8>)
 8008762:	4a4e      	ldr	r2, [pc, #312]	; (800889c <update_main_screen+0x4cc>)
 8008764:	6820      	ldr	r0, [r4, #0]
 8008766:	2100      	movs	r1, #0
 8008768:	f00c fb54 	bl	8014e14 <lv_bar_set_style>
 800876c:	4a4b      	ldr	r2, [pc, #300]	; (800889c <update_main_screen+0x4cc>)
 800876e:	6820      	ldr	r0, [r4, #0]
 8008770:	2101      	movs	r1, #1
 8008772:	f00c fb4f 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[1], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[1], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008776:	4a49      	ldr	r2, [pc, #292]	; (800889c <update_main_screen+0x4cc>)
 8008778:	6860      	ldr	r0, [r4, #4]
 800877a:	2100      	movs	r1, #0
 800877c:	f00c fb4a 	bl	8014e14 <lv_bar_set_style>
 8008780:	4a46      	ldr	r2, [pc, #280]	; (800889c <update_main_screen+0x4cc>)
 8008782:	6860      	ldr	r0, [r4, #4]
 8008784:	2101      	movs	r1, #1
 8008786:	f00c fb45 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[2], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[2], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800878a:	4a44      	ldr	r2, [pc, #272]	; (800889c <update_main_screen+0x4cc>)
 800878c:	68a0      	ldr	r0, [r4, #8]
 800878e:	2100      	movs	r1, #0
 8008790:	f00c fb40 	bl	8014e14 <lv_bar_set_style>
 8008794:	4a41      	ldr	r2, [pc, #260]	; (800889c <update_main_screen+0x4cc>)
 8008796:	68a0      	ldr	r0, [r4, #8]
 8008798:	2101      	movs	r1, #1
 800879a:	f00c fb3b 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[3], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[3], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800879e:	4a3f      	ldr	r2, [pc, #252]	; (800889c <update_main_screen+0x4cc>)
 80087a0:	68e0      	ldr	r0, [r4, #12]
 80087a2:	2100      	movs	r1, #0
 80087a4:	f00c fb36 	bl	8014e14 <lv_bar_set_style>
 80087a8:	4a3c      	ldr	r2, [pc, #240]	; (800889c <update_main_screen+0x4cc>)
 80087aa:	68e0      	ldr	r0, [r4, #12]
 80087ac:	2101      	movs	r1, #1
 80087ae:	f00c fb31 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[4], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[4], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80087b2:	4a3a      	ldr	r2, [pc, #232]	; (800889c <update_main_screen+0x4cc>)
 80087b4:	6920      	ldr	r0, [r4, #16]
 80087b6:	2100      	movs	r1, #0
 80087b8:	f00c fb2c 	bl	8014e14 <lv_bar_set_style>
 80087bc:	4a37      	ldr	r2, [pc, #220]	; (800889c <update_main_screen+0x4cc>)
 80087be:	6920      	ldr	r0, [r4, #16]
 80087c0:	2101      	movs	r1, #1
 80087c2:	f00c fb27 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[5], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[5], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80087c6:	4a35      	ldr	r2, [pc, #212]	; (800889c <update_main_screen+0x4cc>)
 80087c8:	6960      	ldr	r0, [r4, #20]
 80087ca:	2100      	movs	r1, #0
 80087cc:	f00c fb22 	bl	8014e14 <lv_bar_set_style>
 80087d0:	4a32      	ldr	r2, [pc, #200]	; (800889c <update_main_screen+0x4cc>)
 80087d2:	6960      	ldr	r0, [r4, #20]
 80087d4:	2101      	movs	r1, #1
 80087d6:	f00c fb1d 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[6], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[6], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80087da:	4a30      	ldr	r2, [pc, #192]	; (800889c <update_main_screen+0x4cc>)
 80087dc:	69a0      	ldr	r0, [r4, #24]
 80087de:	2100      	movs	r1, #0
 80087e0:	f00c fb18 	bl	8014e14 <lv_bar_set_style>
 80087e4:	69a0      	ldr	r0, [r4, #24]
 80087e6:	4a2d      	ldr	r2, [pc, #180]	; (800889c <update_main_screen+0x4cc>)
 80087e8:	2101      	movs	r1, #1
 80087ea:	f00c fb13 	bl	8014e14 <lv_bar_set_style>
			bargraph_off(7);
 80087ee:	2007      	movs	r0, #7
 80087f0:	e67e      	b.n	80084f0 <update_main_screen+0x120>
			lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80087f2:	4c29      	ldr	r4, [pc, #164]	; (8008898 <update_main_screen+0x4c8>)
 80087f4:	4a29      	ldr	r2, [pc, #164]	; (800889c <update_main_screen+0x4cc>)
 80087f6:	6820      	ldr	r0, [r4, #0]
 80087f8:	2100      	movs	r1, #0
 80087fa:	f00c fb0b 	bl	8014e14 <lv_bar_set_style>
 80087fe:	4a27      	ldr	r2, [pc, #156]	; (800889c <update_main_screen+0x4cc>)
 8008800:	6820      	ldr	r0, [r4, #0]
 8008802:	2101      	movs	r1, #1
 8008804:	f00c fb06 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[1], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[1], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008808:	4a24      	ldr	r2, [pc, #144]	; (800889c <update_main_screen+0x4cc>)
 800880a:	6860      	ldr	r0, [r4, #4]
 800880c:	2100      	movs	r1, #0
 800880e:	f00c fb01 	bl	8014e14 <lv_bar_set_style>
 8008812:	4a22      	ldr	r2, [pc, #136]	; (800889c <update_main_screen+0x4cc>)
 8008814:	6860      	ldr	r0, [r4, #4]
 8008816:	2101      	movs	r1, #1
 8008818:	f00c fafc 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[2], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[2], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800881c:	4a1f      	ldr	r2, [pc, #124]	; (800889c <update_main_screen+0x4cc>)
 800881e:	68a0      	ldr	r0, [r4, #8]
 8008820:	2100      	movs	r1, #0
 8008822:	f00c faf7 	bl	8014e14 <lv_bar_set_style>
 8008826:	4a1d      	ldr	r2, [pc, #116]	; (800889c <update_main_screen+0x4cc>)
 8008828:	68a0      	ldr	r0, [r4, #8]
 800882a:	2101      	movs	r1, #1
 800882c:	f00c faf2 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[3], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[3], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008830:	4a1a      	ldr	r2, [pc, #104]	; (800889c <update_main_screen+0x4cc>)
 8008832:	68e0      	ldr	r0, [r4, #12]
 8008834:	2100      	movs	r1, #0
 8008836:	f00c faed 	bl	8014e14 <lv_bar_set_style>
 800883a:	4a18      	ldr	r2, [pc, #96]	; (800889c <update_main_screen+0x4cc>)
 800883c:	68e0      	ldr	r0, [r4, #12]
 800883e:	2101      	movs	r1, #1
 8008840:	f00c fae8 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[4], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[4], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008844:	4a15      	ldr	r2, [pc, #84]	; (800889c <update_main_screen+0x4cc>)
 8008846:	6920      	ldr	r0, [r4, #16]
 8008848:	2100      	movs	r1, #0
 800884a:	f00c fae3 	bl	8014e14 <lv_bar_set_style>
 800884e:	4a13      	ldr	r2, [pc, #76]	; (800889c <update_main_screen+0x4cc>)
 8008850:	6920      	ldr	r0, [r4, #16]
 8008852:	2101      	movs	r1, #1
 8008854:	f00c fade 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[5], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[5], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008858:	4a10      	ldr	r2, [pc, #64]	; (800889c <update_main_screen+0x4cc>)
 800885a:	6960      	ldr	r0, [r4, #20]
 800885c:	2100      	movs	r1, #0
 800885e:	f00c fad9 	bl	8014e14 <lv_bar_set_style>
 8008862:	4a0e      	ldr	r2, [pc, #56]	; (800889c <update_main_screen+0x4cc>)
 8008864:	6960      	ldr	r0, [r4, #20]
 8008866:	2101      	movs	r1, #1
 8008868:	f00c fad4 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[6], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[6], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800886c:	4a0b      	ldr	r2, [pc, #44]	; (800889c <update_main_screen+0x4cc>)
 800886e:	69a0      	ldr	r0, [r4, #24]
 8008870:	2100      	movs	r1, #0
 8008872:	f00c facf 	bl	8014e14 <lv_bar_set_style>
 8008876:	4a09      	ldr	r2, [pc, #36]	; (800889c <update_main_screen+0x4cc>)
 8008878:	69a0      	ldr	r0, [r4, #24]
 800887a:	2101      	movs	r1, #1
 800887c:	f00c faca 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[7], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[7], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008880:	4a06      	ldr	r2, [pc, #24]	; (800889c <update_main_screen+0x4cc>)
 8008882:	69e0      	ldr	r0, [r4, #28]
 8008884:	2100      	movs	r1, #0
 8008886:	f00c fac5 	bl	8014e14 <lv_bar_set_style>
 800888a:	69e0      	ldr	r0, [r4, #28]
 800888c:	4a03      	ldr	r2, [pc, #12]	; (800889c <update_main_screen+0x4cc>)
 800888e:	2101      	movs	r1, #1
 8008890:	f00c fac0 	bl	8014e14 <lv_bar_set_style>
			bargraph_off(8);
 8008894:	2008      	movs	r0, #8
 8008896:	e62b      	b.n	80084f0 <update_main_screen+0x120>
 8008898:	20004e14 	.word	0x20004e14
 800889c:	20004f64 	.word	0x20004f64
			lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80088a0:	4c9a      	ldr	r4, [pc, #616]	; (8008b0c <update_main_screen+0x73c>)
 80088a2:	4a9b      	ldr	r2, [pc, #620]	; (8008b10 <update_main_screen+0x740>)
 80088a4:	6820      	ldr	r0, [r4, #0]
 80088a6:	2100      	movs	r1, #0
 80088a8:	f00c fab4 	bl	8014e14 <lv_bar_set_style>
 80088ac:	4a98      	ldr	r2, [pc, #608]	; (8008b10 <update_main_screen+0x740>)
 80088ae:	6820      	ldr	r0, [r4, #0]
 80088b0:	2101      	movs	r1, #1
 80088b2:	f00c faaf 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[1], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[1], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80088b6:	4a96      	ldr	r2, [pc, #600]	; (8008b10 <update_main_screen+0x740>)
 80088b8:	6860      	ldr	r0, [r4, #4]
 80088ba:	2100      	movs	r1, #0
 80088bc:	f00c faaa 	bl	8014e14 <lv_bar_set_style>
 80088c0:	4a93      	ldr	r2, [pc, #588]	; (8008b10 <update_main_screen+0x740>)
 80088c2:	6860      	ldr	r0, [r4, #4]
 80088c4:	2101      	movs	r1, #1
 80088c6:	f00c faa5 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[2], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[2], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80088ca:	4a91      	ldr	r2, [pc, #580]	; (8008b10 <update_main_screen+0x740>)
 80088cc:	68a0      	ldr	r0, [r4, #8]
 80088ce:	2100      	movs	r1, #0
 80088d0:	f00c faa0 	bl	8014e14 <lv_bar_set_style>
 80088d4:	4a8e      	ldr	r2, [pc, #568]	; (8008b10 <update_main_screen+0x740>)
 80088d6:	68a0      	ldr	r0, [r4, #8]
 80088d8:	2101      	movs	r1, #1
 80088da:	f00c fa9b 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[3], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[3], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80088de:	4a8c      	ldr	r2, [pc, #560]	; (8008b10 <update_main_screen+0x740>)
 80088e0:	68e0      	ldr	r0, [r4, #12]
 80088e2:	2100      	movs	r1, #0
 80088e4:	f00c fa96 	bl	8014e14 <lv_bar_set_style>
 80088e8:	4a89      	ldr	r2, [pc, #548]	; (8008b10 <update_main_screen+0x740>)
 80088ea:	68e0      	ldr	r0, [r4, #12]
 80088ec:	2101      	movs	r1, #1
 80088ee:	f00c fa91 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[4], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[4], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80088f2:	4a87      	ldr	r2, [pc, #540]	; (8008b10 <update_main_screen+0x740>)
 80088f4:	6920      	ldr	r0, [r4, #16]
 80088f6:	2100      	movs	r1, #0
 80088f8:	f00c fa8c 	bl	8014e14 <lv_bar_set_style>
 80088fc:	4a84      	ldr	r2, [pc, #528]	; (8008b10 <update_main_screen+0x740>)
 80088fe:	6920      	ldr	r0, [r4, #16]
 8008900:	2101      	movs	r1, #1
 8008902:	f00c fa87 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[5], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[5], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008906:	4a82      	ldr	r2, [pc, #520]	; (8008b10 <update_main_screen+0x740>)
 8008908:	6960      	ldr	r0, [r4, #20]
 800890a:	2100      	movs	r1, #0
 800890c:	f00c fa82 	bl	8014e14 <lv_bar_set_style>
 8008910:	4a7f      	ldr	r2, [pc, #508]	; (8008b10 <update_main_screen+0x740>)
 8008912:	6960      	ldr	r0, [r4, #20]
 8008914:	2101      	movs	r1, #1
 8008916:	f00c fa7d 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[6], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[6], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800891a:	4a7d      	ldr	r2, [pc, #500]	; (8008b10 <update_main_screen+0x740>)
 800891c:	69a0      	ldr	r0, [r4, #24]
 800891e:	2100      	movs	r1, #0
 8008920:	f00c fa78 	bl	8014e14 <lv_bar_set_style>
 8008924:	4a7a      	ldr	r2, [pc, #488]	; (8008b10 <update_main_screen+0x740>)
 8008926:	69a0      	ldr	r0, [r4, #24]
 8008928:	2101      	movs	r1, #1
 800892a:	f00c fa73 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[7], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[7], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800892e:	4a78      	ldr	r2, [pc, #480]	; (8008b10 <update_main_screen+0x740>)
 8008930:	69e0      	ldr	r0, [r4, #28]
 8008932:	2100      	movs	r1, #0
 8008934:	f00c fa6e 	bl	8014e14 <lv_bar_set_style>
 8008938:	4a75      	ldr	r2, [pc, #468]	; (8008b10 <update_main_screen+0x740>)
 800893a:	69e0      	ldr	r0, [r4, #28]
 800893c:	2101      	movs	r1, #1
 800893e:	f00c fa69 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[8], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[8], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008942:	4a73      	ldr	r2, [pc, #460]	; (8008b10 <update_main_screen+0x740>)
 8008944:	6a20      	ldr	r0, [r4, #32]
 8008946:	2100      	movs	r1, #0
 8008948:	f00c fa64 	bl	8014e14 <lv_bar_set_style>
 800894c:	6a20      	ldr	r0, [r4, #32]
 800894e:	4a70      	ldr	r2, [pc, #448]	; (8008b10 <update_main_screen+0x740>)
 8008950:	2101      	movs	r1, #1
 8008952:	f00c fa5f 	bl	8014e14 <lv_bar_set_style>
			bargraph_off(9);
 8008956:	2009      	movs	r0, #9
 8008958:	e5ca      	b.n	80084f0 <update_main_screen+0x120>
			lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800895a:	4c6c      	ldr	r4, [pc, #432]	; (8008b0c <update_main_screen+0x73c>)
 800895c:	4a6c      	ldr	r2, [pc, #432]	; (8008b10 <update_main_screen+0x740>)
 800895e:	6820      	ldr	r0, [r4, #0]
 8008960:	2100      	movs	r1, #0
 8008962:	f00c fa57 	bl	8014e14 <lv_bar_set_style>
 8008966:	4a6a      	ldr	r2, [pc, #424]	; (8008b10 <update_main_screen+0x740>)
 8008968:	6820      	ldr	r0, [r4, #0]
 800896a:	2101      	movs	r1, #1
 800896c:	f00c fa52 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[1], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[1], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008970:	4a67      	ldr	r2, [pc, #412]	; (8008b10 <update_main_screen+0x740>)
 8008972:	6860      	ldr	r0, [r4, #4]
 8008974:	2100      	movs	r1, #0
 8008976:	f00c fa4d 	bl	8014e14 <lv_bar_set_style>
 800897a:	4a65      	ldr	r2, [pc, #404]	; (8008b10 <update_main_screen+0x740>)
 800897c:	6860      	ldr	r0, [r4, #4]
 800897e:	2101      	movs	r1, #1
 8008980:	f00c fa48 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[2], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[2], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008984:	4a62      	ldr	r2, [pc, #392]	; (8008b10 <update_main_screen+0x740>)
 8008986:	68a0      	ldr	r0, [r4, #8]
 8008988:	2100      	movs	r1, #0
 800898a:	f00c fa43 	bl	8014e14 <lv_bar_set_style>
 800898e:	4a60      	ldr	r2, [pc, #384]	; (8008b10 <update_main_screen+0x740>)
 8008990:	68a0      	ldr	r0, [r4, #8]
 8008992:	2101      	movs	r1, #1
 8008994:	f00c fa3e 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[3], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[3], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008998:	4a5d      	ldr	r2, [pc, #372]	; (8008b10 <update_main_screen+0x740>)
 800899a:	68e0      	ldr	r0, [r4, #12]
 800899c:	2100      	movs	r1, #0
 800899e:	f00c fa39 	bl	8014e14 <lv_bar_set_style>
 80089a2:	4a5b      	ldr	r2, [pc, #364]	; (8008b10 <update_main_screen+0x740>)
 80089a4:	68e0      	ldr	r0, [r4, #12]
 80089a6:	2101      	movs	r1, #1
 80089a8:	f00c fa34 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[4], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[4], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80089ac:	4a58      	ldr	r2, [pc, #352]	; (8008b10 <update_main_screen+0x740>)
 80089ae:	6920      	ldr	r0, [r4, #16]
 80089b0:	2100      	movs	r1, #0
 80089b2:	f00c fa2f 	bl	8014e14 <lv_bar_set_style>
 80089b6:	4a56      	ldr	r2, [pc, #344]	; (8008b10 <update_main_screen+0x740>)
 80089b8:	6920      	ldr	r0, [r4, #16]
 80089ba:	2101      	movs	r1, #1
 80089bc:	f00c fa2a 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[5], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[5], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80089c0:	4a53      	ldr	r2, [pc, #332]	; (8008b10 <update_main_screen+0x740>)
 80089c2:	6960      	ldr	r0, [r4, #20]
 80089c4:	2100      	movs	r1, #0
 80089c6:	f00c fa25 	bl	8014e14 <lv_bar_set_style>
 80089ca:	4a51      	ldr	r2, [pc, #324]	; (8008b10 <update_main_screen+0x740>)
 80089cc:	6960      	ldr	r0, [r4, #20]
 80089ce:	2101      	movs	r1, #1
 80089d0:	f00c fa20 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[6], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[6], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80089d4:	4a4e      	ldr	r2, [pc, #312]	; (8008b10 <update_main_screen+0x740>)
 80089d6:	69a0      	ldr	r0, [r4, #24]
 80089d8:	2100      	movs	r1, #0
 80089da:	f00c fa1b 	bl	8014e14 <lv_bar_set_style>
 80089de:	4a4c      	ldr	r2, [pc, #304]	; (8008b10 <update_main_screen+0x740>)
 80089e0:	69a0      	ldr	r0, [r4, #24]
 80089e2:	2101      	movs	r1, #1
 80089e4:	f00c fa16 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[7], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[7], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80089e8:	4a49      	ldr	r2, [pc, #292]	; (8008b10 <update_main_screen+0x740>)
 80089ea:	69e0      	ldr	r0, [r4, #28]
 80089ec:	2100      	movs	r1, #0
 80089ee:	f00c fa11 	bl	8014e14 <lv_bar_set_style>
 80089f2:	4a47      	ldr	r2, [pc, #284]	; (8008b10 <update_main_screen+0x740>)
 80089f4:	69e0      	ldr	r0, [r4, #28]
 80089f6:	2101      	movs	r1, #1
 80089f8:	f00c fa0c 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[8], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[8], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80089fc:	4a44      	ldr	r2, [pc, #272]	; (8008b10 <update_main_screen+0x740>)
 80089fe:	6a20      	ldr	r0, [r4, #32]
 8008a00:	2100      	movs	r1, #0
 8008a02:	f00c fa07 	bl	8014e14 <lv_bar_set_style>
 8008a06:	4a42      	ldr	r2, [pc, #264]	; (8008b10 <update_main_screen+0x740>)
 8008a08:	6a20      	ldr	r0, [r4, #32]
 8008a0a:	2101      	movs	r1, #1
 8008a0c:	f00c fa02 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[9], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[9], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008a10:	4a3f      	ldr	r2, [pc, #252]	; (8008b10 <update_main_screen+0x740>)
 8008a12:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008a14:	2100      	movs	r1, #0
 8008a16:	f00c f9fd 	bl	8014e14 <lv_bar_set_style>
 8008a1a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008a1c:	4a3c      	ldr	r2, [pc, #240]	; (8008b10 <update_main_screen+0x740>)
 8008a1e:	2101      	movs	r1, #1
 8008a20:	f00c f9f8 	bl	8014e14 <lv_bar_set_style>
			bargraph_off(10);
 8008a24:	200a      	movs	r0, #10
 8008a26:	e563      	b.n	80084f0 <update_main_screen+0x120>
			lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008a28:	4c38      	ldr	r4, [pc, #224]	; (8008b0c <update_main_screen+0x73c>)
 8008a2a:	4a39      	ldr	r2, [pc, #228]	; (8008b10 <update_main_screen+0x740>)
 8008a2c:	6820      	ldr	r0, [r4, #0]
 8008a2e:	2100      	movs	r1, #0
 8008a30:	f00c f9f0 	bl	8014e14 <lv_bar_set_style>
 8008a34:	4a36      	ldr	r2, [pc, #216]	; (8008b10 <update_main_screen+0x740>)
 8008a36:	6820      	ldr	r0, [r4, #0]
 8008a38:	2101      	movs	r1, #1
 8008a3a:	f00c f9eb 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[1], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[1], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008a3e:	4a34      	ldr	r2, [pc, #208]	; (8008b10 <update_main_screen+0x740>)
 8008a40:	6860      	ldr	r0, [r4, #4]
 8008a42:	2100      	movs	r1, #0
 8008a44:	f00c f9e6 	bl	8014e14 <lv_bar_set_style>
 8008a48:	4a31      	ldr	r2, [pc, #196]	; (8008b10 <update_main_screen+0x740>)
 8008a4a:	6860      	ldr	r0, [r4, #4]
 8008a4c:	2101      	movs	r1, #1
 8008a4e:	f00c f9e1 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[2], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[2], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008a52:	4a2f      	ldr	r2, [pc, #188]	; (8008b10 <update_main_screen+0x740>)
 8008a54:	68a0      	ldr	r0, [r4, #8]
 8008a56:	2100      	movs	r1, #0
 8008a58:	f00c f9dc 	bl	8014e14 <lv_bar_set_style>
 8008a5c:	4a2c      	ldr	r2, [pc, #176]	; (8008b10 <update_main_screen+0x740>)
 8008a5e:	68a0      	ldr	r0, [r4, #8]
 8008a60:	2101      	movs	r1, #1
 8008a62:	f00c f9d7 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[3], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[3], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008a66:	4a2a      	ldr	r2, [pc, #168]	; (8008b10 <update_main_screen+0x740>)
 8008a68:	68e0      	ldr	r0, [r4, #12]
 8008a6a:	2100      	movs	r1, #0
 8008a6c:	f00c f9d2 	bl	8014e14 <lv_bar_set_style>
 8008a70:	4a27      	ldr	r2, [pc, #156]	; (8008b10 <update_main_screen+0x740>)
 8008a72:	68e0      	ldr	r0, [r4, #12]
 8008a74:	2101      	movs	r1, #1
 8008a76:	f00c f9cd 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[4], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[4], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008a7a:	4a25      	ldr	r2, [pc, #148]	; (8008b10 <update_main_screen+0x740>)
 8008a7c:	6920      	ldr	r0, [r4, #16]
 8008a7e:	2100      	movs	r1, #0
 8008a80:	f00c f9c8 	bl	8014e14 <lv_bar_set_style>
 8008a84:	4a22      	ldr	r2, [pc, #136]	; (8008b10 <update_main_screen+0x740>)
 8008a86:	6920      	ldr	r0, [r4, #16]
 8008a88:	2101      	movs	r1, #1
 8008a8a:	f00c f9c3 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[5], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[5], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008a8e:	4a20      	ldr	r2, [pc, #128]	; (8008b10 <update_main_screen+0x740>)
 8008a90:	6960      	ldr	r0, [r4, #20]
 8008a92:	2100      	movs	r1, #0
 8008a94:	f00c f9be 	bl	8014e14 <lv_bar_set_style>
 8008a98:	4a1d      	ldr	r2, [pc, #116]	; (8008b10 <update_main_screen+0x740>)
 8008a9a:	6960      	ldr	r0, [r4, #20]
 8008a9c:	2101      	movs	r1, #1
 8008a9e:	f00c f9b9 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[6], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[6], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008aa2:	4a1b      	ldr	r2, [pc, #108]	; (8008b10 <update_main_screen+0x740>)
 8008aa4:	69a0      	ldr	r0, [r4, #24]
 8008aa6:	2100      	movs	r1, #0
 8008aa8:	f00c f9b4 	bl	8014e14 <lv_bar_set_style>
 8008aac:	4a18      	ldr	r2, [pc, #96]	; (8008b10 <update_main_screen+0x740>)
 8008aae:	69a0      	ldr	r0, [r4, #24]
 8008ab0:	2101      	movs	r1, #1
 8008ab2:	f00c f9af 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[7], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[7], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008ab6:	4a16      	ldr	r2, [pc, #88]	; (8008b10 <update_main_screen+0x740>)
 8008ab8:	69e0      	ldr	r0, [r4, #28]
 8008aba:	2100      	movs	r1, #0
 8008abc:	f00c f9aa 	bl	8014e14 <lv_bar_set_style>
 8008ac0:	4a13      	ldr	r2, [pc, #76]	; (8008b10 <update_main_screen+0x740>)
 8008ac2:	69e0      	ldr	r0, [r4, #28]
 8008ac4:	2101      	movs	r1, #1
 8008ac6:	f00c f9a5 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[8], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[8], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008aca:	4a11      	ldr	r2, [pc, #68]	; (8008b10 <update_main_screen+0x740>)
 8008acc:	6a20      	ldr	r0, [r4, #32]
 8008ace:	2100      	movs	r1, #0
 8008ad0:	f00c f9a0 	bl	8014e14 <lv_bar_set_style>
 8008ad4:	4a0e      	ldr	r2, [pc, #56]	; (8008b10 <update_main_screen+0x740>)
 8008ad6:	6a20      	ldr	r0, [r4, #32]
 8008ad8:	2101      	movs	r1, #1
 8008ada:	f00c f99b 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[9], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[9], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008ade:	4a0c      	ldr	r2, [pc, #48]	; (8008b10 <update_main_screen+0x740>)
 8008ae0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008ae2:	2100      	movs	r1, #0
 8008ae4:	f00c f996 	bl	8014e14 <lv_bar_set_style>
 8008ae8:	4a09      	ldr	r2, [pc, #36]	; (8008b10 <update_main_screen+0x740>)
 8008aea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008aec:	2101      	movs	r1, #1
 8008aee:	f00c f991 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[10], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[10], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008af2:	4a07      	ldr	r2, [pc, #28]	; (8008b10 <update_main_screen+0x740>)
 8008af4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008af6:	2100      	movs	r1, #0
 8008af8:	f00c f98c 	bl	8014e14 <lv_bar_set_style>
 8008afc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008afe:	4a04      	ldr	r2, [pc, #16]	; (8008b10 <update_main_screen+0x740>)
 8008b00:	2101      	movs	r1, #1
 8008b02:	f00c f987 	bl	8014e14 <lv_bar_set_style>
			bargraph_off(11);
 8008b06:	200b      	movs	r0, #11
 8008b08:	e4f2      	b.n	80084f0 <update_main_screen+0x120>
 8008b0a:	bf00      	nop
 8008b0c:	20004e14 	.word	0x20004e14
 8008b10:	20004f64 	.word	0x20004f64
			lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008b14:	4c80      	ldr	r4, [pc, #512]	; (8008d18 <update_main_screen+0x948>)
 8008b16:	4a81      	ldr	r2, [pc, #516]	; (8008d1c <update_main_screen+0x94c>)
 8008b18:	6820      	ldr	r0, [r4, #0]
 8008b1a:	2100      	movs	r1, #0
 8008b1c:	f00c f97a 	bl	8014e14 <lv_bar_set_style>
 8008b20:	4a7e      	ldr	r2, [pc, #504]	; (8008d1c <update_main_screen+0x94c>)
 8008b22:	6820      	ldr	r0, [r4, #0]
 8008b24:	2101      	movs	r1, #1
 8008b26:	f00c f975 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[1], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[1], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008b2a:	4a7c      	ldr	r2, [pc, #496]	; (8008d1c <update_main_screen+0x94c>)
 8008b2c:	6860      	ldr	r0, [r4, #4]
 8008b2e:	2100      	movs	r1, #0
 8008b30:	f00c f970 	bl	8014e14 <lv_bar_set_style>
 8008b34:	4a79      	ldr	r2, [pc, #484]	; (8008d1c <update_main_screen+0x94c>)
 8008b36:	6860      	ldr	r0, [r4, #4]
 8008b38:	2101      	movs	r1, #1
 8008b3a:	f00c f96b 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[2], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[2], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008b3e:	4a77      	ldr	r2, [pc, #476]	; (8008d1c <update_main_screen+0x94c>)
 8008b40:	68a0      	ldr	r0, [r4, #8]
 8008b42:	2100      	movs	r1, #0
 8008b44:	f00c f966 	bl	8014e14 <lv_bar_set_style>
 8008b48:	4a74      	ldr	r2, [pc, #464]	; (8008d1c <update_main_screen+0x94c>)
 8008b4a:	68a0      	ldr	r0, [r4, #8]
 8008b4c:	2101      	movs	r1, #1
 8008b4e:	f00c f961 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[3], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[3], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008b52:	4a72      	ldr	r2, [pc, #456]	; (8008d1c <update_main_screen+0x94c>)
 8008b54:	68e0      	ldr	r0, [r4, #12]
 8008b56:	2100      	movs	r1, #0
 8008b58:	f00c f95c 	bl	8014e14 <lv_bar_set_style>
 8008b5c:	4a6f      	ldr	r2, [pc, #444]	; (8008d1c <update_main_screen+0x94c>)
 8008b5e:	68e0      	ldr	r0, [r4, #12]
 8008b60:	2101      	movs	r1, #1
 8008b62:	f00c f957 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[4], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[4], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008b66:	4a6d      	ldr	r2, [pc, #436]	; (8008d1c <update_main_screen+0x94c>)
 8008b68:	6920      	ldr	r0, [r4, #16]
 8008b6a:	2100      	movs	r1, #0
 8008b6c:	f00c f952 	bl	8014e14 <lv_bar_set_style>
 8008b70:	4a6a      	ldr	r2, [pc, #424]	; (8008d1c <update_main_screen+0x94c>)
 8008b72:	6920      	ldr	r0, [r4, #16]
 8008b74:	2101      	movs	r1, #1
 8008b76:	f00c f94d 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[5], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[5], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008b7a:	4a68      	ldr	r2, [pc, #416]	; (8008d1c <update_main_screen+0x94c>)
 8008b7c:	6960      	ldr	r0, [r4, #20]
 8008b7e:	2100      	movs	r1, #0
 8008b80:	f00c f948 	bl	8014e14 <lv_bar_set_style>
 8008b84:	4a65      	ldr	r2, [pc, #404]	; (8008d1c <update_main_screen+0x94c>)
 8008b86:	6960      	ldr	r0, [r4, #20]
 8008b88:	2101      	movs	r1, #1
 8008b8a:	f00c f943 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[6], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[6], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008b8e:	4a63      	ldr	r2, [pc, #396]	; (8008d1c <update_main_screen+0x94c>)
 8008b90:	69a0      	ldr	r0, [r4, #24]
 8008b92:	2100      	movs	r1, #0
 8008b94:	f00c f93e 	bl	8014e14 <lv_bar_set_style>
 8008b98:	4a60      	ldr	r2, [pc, #384]	; (8008d1c <update_main_screen+0x94c>)
 8008b9a:	69a0      	ldr	r0, [r4, #24]
 8008b9c:	2101      	movs	r1, #1
 8008b9e:	f00c f939 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[7], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[7], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008ba2:	4a5e      	ldr	r2, [pc, #376]	; (8008d1c <update_main_screen+0x94c>)
 8008ba4:	69e0      	ldr	r0, [r4, #28]
 8008ba6:	2100      	movs	r1, #0
 8008ba8:	f00c f934 	bl	8014e14 <lv_bar_set_style>
 8008bac:	4a5b      	ldr	r2, [pc, #364]	; (8008d1c <update_main_screen+0x94c>)
 8008bae:	69e0      	ldr	r0, [r4, #28]
 8008bb0:	2101      	movs	r1, #1
 8008bb2:	f00c f92f 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[8], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[8], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008bb6:	4a59      	ldr	r2, [pc, #356]	; (8008d1c <update_main_screen+0x94c>)
 8008bb8:	6a20      	ldr	r0, [r4, #32]
 8008bba:	2100      	movs	r1, #0
 8008bbc:	f00c f92a 	bl	8014e14 <lv_bar_set_style>
 8008bc0:	4a56      	ldr	r2, [pc, #344]	; (8008d1c <update_main_screen+0x94c>)
 8008bc2:	6a20      	ldr	r0, [r4, #32]
 8008bc4:	2101      	movs	r1, #1
 8008bc6:	f00c f925 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[9], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[9], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008bca:	4a54      	ldr	r2, [pc, #336]	; (8008d1c <update_main_screen+0x94c>)
 8008bcc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008bce:	2100      	movs	r1, #0
 8008bd0:	f00c f920 	bl	8014e14 <lv_bar_set_style>
 8008bd4:	4a51      	ldr	r2, [pc, #324]	; (8008d1c <update_main_screen+0x94c>)
 8008bd6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008bd8:	2101      	movs	r1, #1
 8008bda:	f00c f91b 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[10], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[10], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008bde:	4a4f      	ldr	r2, [pc, #316]	; (8008d1c <update_main_screen+0x94c>)
 8008be0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008be2:	2100      	movs	r1, #0
 8008be4:	f00c f916 	bl	8014e14 <lv_bar_set_style>
 8008be8:	4a4c      	ldr	r2, [pc, #304]	; (8008d1c <update_main_screen+0x94c>)
 8008bea:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008bec:	2101      	movs	r1, #1
 8008bee:	f00c f911 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[11], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[11], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008bf2:	4a4a      	ldr	r2, [pc, #296]	; (8008d1c <update_main_screen+0x94c>)
 8008bf4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008bf6:	2100      	movs	r1, #0
 8008bf8:	f00c f90c 	bl	8014e14 <lv_bar_set_style>
 8008bfc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008bfe:	4a47      	ldr	r2, [pc, #284]	; (8008d1c <update_main_screen+0x94c>)
 8008c00:	2101      	movs	r1, #1
 8008c02:	f00c f907 	bl	8014e14 <lv_bar_set_style>
			bargraph_off(12);
 8008c06:	200c      	movs	r0, #12
 8008c08:	e472      	b.n	80084f0 <update_main_screen+0x120>
			lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008c0a:	4c43      	ldr	r4, [pc, #268]	; (8008d18 <update_main_screen+0x948>)
 8008c0c:	4a43      	ldr	r2, [pc, #268]	; (8008d1c <update_main_screen+0x94c>)
 8008c0e:	6820      	ldr	r0, [r4, #0]
 8008c10:	2100      	movs	r1, #0
 8008c12:	f00c f8ff 	bl	8014e14 <lv_bar_set_style>
 8008c16:	4a41      	ldr	r2, [pc, #260]	; (8008d1c <update_main_screen+0x94c>)
 8008c18:	6820      	ldr	r0, [r4, #0]
 8008c1a:	2101      	movs	r1, #1
 8008c1c:	f00c f8fa 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[1], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[1], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008c20:	4a3e      	ldr	r2, [pc, #248]	; (8008d1c <update_main_screen+0x94c>)
 8008c22:	6860      	ldr	r0, [r4, #4]
 8008c24:	2100      	movs	r1, #0
 8008c26:	f00c f8f5 	bl	8014e14 <lv_bar_set_style>
 8008c2a:	4a3c      	ldr	r2, [pc, #240]	; (8008d1c <update_main_screen+0x94c>)
 8008c2c:	6860      	ldr	r0, [r4, #4]
 8008c2e:	2101      	movs	r1, #1
 8008c30:	f00c f8f0 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[2], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[2], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008c34:	4a39      	ldr	r2, [pc, #228]	; (8008d1c <update_main_screen+0x94c>)
 8008c36:	68a0      	ldr	r0, [r4, #8]
 8008c38:	2100      	movs	r1, #0
 8008c3a:	f00c f8eb 	bl	8014e14 <lv_bar_set_style>
 8008c3e:	4a37      	ldr	r2, [pc, #220]	; (8008d1c <update_main_screen+0x94c>)
 8008c40:	68a0      	ldr	r0, [r4, #8]
 8008c42:	2101      	movs	r1, #1
 8008c44:	f00c f8e6 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[3], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[3], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008c48:	4a34      	ldr	r2, [pc, #208]	; (8008d1c <update_main_screen+0x94c>)
 8008c4a:	68e0      	ldr	r0, [r4, #12]
 8008c4c:	2100      	movs	r1, #0
 8008c4e:	f00c f8e1 	bl	8014e14 <lv_bar_set_style>
 8008c52:	4a32      	ldr	r2, [pc, #200]	; (8008d1c <update_main_screen+0x94c>)
 8008c54:	68e0      	ldr	r0, [r4, #12]
 8008c56:	2101      	movs	r1, #1
 8008c58:	f00c f8dc 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[4], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[4], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008c5c:	4a2f      	ldr	r2, [pc, #188]	; (8008d1c <update_main_screen+0x94c>)
 8008c5e:	6920      	ldr	r0, [r4, #16]
 8008c60:	2100      	movs	r1, #0
 8008c62:	f00c f8d7 	bl	8014e14 <lv_bar_set_style>
 8008c66:	4a2d      	ldr	r2, [pc, #180]	; (8008d1c <update_main_screen+0x94c>)
 8008c68:	6920      	ldr	r0, [r4, #16]
 8008c6a:	2101      	movs	r1, #1
 8008c6c:	f00c f8d2 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[5], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[5], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008c70:	4a2a      	ldr	r2, [pc, #168]	; (8008d1c <update_main_screen+0x94c>)
 8008c72:	6960      	ldr	r0, [r4, #20]
 8008c74:	2100      	movs	r1, #0
 8008c76:	f00c f8cd 	bl	8014e14 <lv_bar_set_style>
 8008c7a:	4a28      	ldr	r2, [pc, #160]	; (8008d1c <update_main_screen+0x94c>)
 8008c7c:	6960      	ldr	r0, [r4, #20]
 8008c7e:	2101      	movs	r1, #1
 8008c80:	f00c f8c8 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[6], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[6], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008c84:	4a25      	ldr	r2, [pc, #148]	; (8008d1c <update_main_screen+0x94c>)
 8008c86:	69a0      	ldr	r0, [r4, #24]
 8008c88:	2100      	movs	r1, #0
 8008c8a:	f00c f8c3 	bl	8014e14 <lv_bar_set_style>
 8008c8e:	4a23      	ldr	r2, [pc, #140]	; (8008d1c <update_main_screen+0x94c>)
 8008c90:	69a0      	ldr	r0, [r4, #24]
 8008c92:	2101      	movs	r1, #1
 8008c94:	f00c f8be 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[7], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[7], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008c98:	4a20      	ldr	r2, [pc, #128]	; (8008d1c <update_main_screen+0x94c>)
 8008c9a:	69e0      	ldr	r0, [r4, #28]
 8008c9c:	2100      	movs	r1, #0
 8008c9e:	f00c f8b9 	bl	8014e14 <lv_bar_set_style>
 8008ca2:	4a1e      	ldr	r2, [pc, #120]	; (8008d1c <update_main_screen+0x94c>)
 8008ca4:	69e0      	ldr	r0, [r4, #28]
 8008ca6:	2101      	movs	r1, #1
 8008ca8:	f00c f8b4 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[8], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[8], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008cac:	4a1b      	ldr	r2, [pc, #108]	; (8008d1c <update_main_screen+0x94c>)
 8008cae:	6a20      	ldr	r0, [r4, #32]
 8008cb0:	2100      	movs	r1, #0
 8008cb2:	f00c f8af 	bl	8014e14 <lv_bar_set_style>
 8008cb6:	4a19      	ldr	r2, [pc, #100]	; (8008d1c <update_main_screen+0x94c>)
 8008cb8:	6a20      	ldr	r0, [r4, #32]
 8008cba:	2101      	movs	r1, #1
 8008cbc:	f00c f8aa 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[9], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[9], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008cc0:	4a16      	ldr	r2, [pc, #88]	; (8008d1c <update_main_screen+0x94c>)
 8008cc2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008cc4:	2100      	movs	r1, #0
 8008cc6:	f00c f8a5 	bl	8014e14 <lv_bar_set_style>
 8008cca:	4a14      	ldr	r2, [pc, #80]	; (8008d1c <update_main_screen+0x94c>)
 8008ccc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008cce:	2101      	movs	r1, #1
 8008cd0:	f00c f8a0 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[10], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[10], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008cd4:	4a11      	ldr	r2, [pc, #68]	; (8008d1c <update_main_screen+0x94c>)
 8008cd6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008cd8:	2100      	movs	r1, #0
 8008cda:	f00c f89b 	bl	8014e14 <lv_bar_set_style>
 8008cde:	4a0f      	ldr	r2, [pc, #60]	; (8008d1c <update_main_screen+0x94c>)
 8008ce0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008ce2:	2101      	movs	r1, #1
 8008ce4:	f00c f896 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[11], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[11], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008ce8:	4a0c      	ldr	r2, [pc, #48]	; (8008d1c <update_main_screen+0x94c>)
 8008cea:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008cec:	2100      	movs	r1, #0
 8008cee:	f00c f891 	bl	8014e14 <lv_bar_set_style>
 8008cf2:	4a0a      	ldr	r2, [pc, #40]	; (8008d1c <update_main_screen+0x94c>)
 8008cf4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008cf6:	2101      	movs	r1, #1
 8008cf8:	f00c f88c 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[12], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[12], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008cfc:	4a07      	ldr	r2, [pc, #28]	; (8008d1c <update_main_screen+0x94c>)
 8008cfe:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008d00:	2100      	movs	r1, #0
 8008d02:	f00c f887 	bl	8014e14 <lv_bar_set_style>
 8008d06:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008d08:	4a04      	ldr	r2, [pc, #16]	; (8008d1c <update_main_screen+0x94c>)
 8008d0a:	2101      	movs	r1, #1
 8008d0c:	f00c f882 	bl	8014e14 <lv_bar_set_style>
			bargraph_off(13);
 8008d10:	200d      	movs	r0, #13
 8008d12:	f7ff bbed 	b.w	80084f0 <update_main_screen+0x120>
 8008d16:	bf00      	nop
 8008d18:	20004e14 	.word	0x20004e14
 8008d1c:	20004f64 	.word	0x20004f64
			lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008d20:	4c94      	ldr	r4, [pc, #592]	; (8008f74 <update_main_screen+0xba4>)
 8008d22:	4a95      	ldr	r2, [pc, #596]	; (8008f78 <update_main_screen+0xba8>)
 8008d24:	6820      	ldr	r0, [r4, #0]
 8008d26:	2100      	movs	r1, #0
 8008d28:	f00c f874 	bl	8014e14 <lv_bar_set_style>
 8008d2c:	4a92      	ldr	r2, [pc, #584]	; (8008f78 <update_main_screen+0xba8>)
 8008d2e:	6820      	ldr	r0, [r4, #0]
 8008d30:	2101      	movs	r1, #1
 8008d32:	f00c f86f 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[1], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[1], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008d36:	4a90      	ldr	r2, [pc, #576]	; (8008f78 <update_main_screen+0xba8>)
 8008d38:	6860      	ldr	r0, [r4, #4]
 8008d3a:	2100      	movs	r1, #0
 8008d3c:	f00c f86a 	bl	8014e14 <lv_bar_set_style>
 8008d40:	4a8d      	ldr	r2, [pc, #564]	; (8008f78 <update_main_screen+0xba8>)
 8008d42:	6860      	ldr	r0, [r4, #4]
 8008d44:	2101      	movs	r1, #1
 8008d46:	f00c f865 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[2], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[2], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008d4a:	4a8b      	ldr	r2, [pc, #556]	; (8008f78 <update_main_screen+0xba8>)
 8008d4c:	68a0      	ldr	r0, [r4, #8]
 8008d4e:	2100      	movs	r1, #0
 8008d50:	f00c f860 	bl	8014e14 <lv_bar_set_style>
 8008d54:	4a88      	ldr	r2, [pc, #544]	; (8008f78 <update_main_screen+0xba8>)
 8008d56:	68a0      	ldr	r0, [r4, #8]
 8008d58:	2101      	movs	r1, #1
 8008d5a:	f00c f85b 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[3], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[3], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008d5e:	4a86      	ldr	r2, [pc, #536]	; (8008f78 <update_main_screen+0xba8>)
 8008d60:	68e0      	ldr	r0, [r4, #12]
 8008d62:	2100      	movs	r1, #0
 8008d64:	f00c f856 	bl	8014e14 <lv_bar_set_style>
 8008d68:	4a83      	ldr	r2, [pc, #524]	; (8008f78 <update_main_screen+0xba8>)
 8008d6a:	68e0      	ldr	r0, [r4, #12]
 8008d6c:	2101      	movs	r1, #1
 8008d6e:	f00c f851 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[4], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[4], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008d72:	4a81      	ldr	r2, [pc, #516]	; (8008f78 <update_main_screen+0xba8>)
 8008d74:	6920      	ldr	r0, [r4, #16]
 8008d76:	2100      	movs	r1, #0
 8008d78:	f00c f84c 	bl	8014e14 <lv_bar_set_style>
 8008d7c:	4a7e      	ldr	r2, [pc, #504]	; (8008f78 <update_main_screen+0xba8>)
 8008d7e:	6920      	ldr	r0, [r4, #16]
 8008d80:	2101      	movs	r1, #1
 8008d82:	f00c f847 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[5], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[5], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008d86:	4a7c      	ldr	r2, [pc, #496]	; (8008f78 <update_main_screen+0xba8>)
 8008d88:	6960      	ldr	r0, [r4, #20]
 8008d8a:	2100      	movs	r1, #0
 8008d8c:	f00c f842 	bl	8014e14 <lv_bar_set_style>
 8008d90:	4a79      	ldr	r2, [pc, #484]	; (8008f78 <update_main_screen+0xba8>)
 8008d92:	6960      	ldr	r0, [r4, #20]
 8008d94:	2101      	movs	r1, #1
 8008d96:	f00c f83d 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[6], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[6], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008d9a:	4a77      	ldr	r2, [pc, #476]	; (8008f78 <update_main_screen+0xba8>)
 8008d9c:	69a0      	ldr	r0, [r4, #24]
 8008d9e:	2100      	movs	r1, #0
 8008da0:	f00c f838 	bl	8014e14 <lv_bar_set_style>
 8008da4:	4a74      	ldr	r2, [pc, #464]	; (8008f78 <update_main_screen+0xba8>)
 8008da6:	69a0      	ldr	r0, [r4, #24]
 8008da8:	2101      	movs	r1, #1
 8008daa:	f00c f833 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[7], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[7], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008dae:	4a72      	ldr	r2, [pc, #456]	; (8008f78 <update_main_screen+0xba8>)
 8008db0:	69e0      	ldr	r0, [r4, #28]
 8008db2:	2100      	movs	r1, #0
 8008db4:	f00c f82e 	bl	8014e14 <lv_bar_set_style>
 8008db8:	4a6f      	ldr	r2, [pc, #444]	; (8008f78 <update_main_screen+0xba8>)
 8008dba:	69e0      	ldr	r0, [r4, #28]
 8008dbc:	2101      	movs	r1, #1
 8008dbe:	f00c f829 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[8], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[8], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008dc2:	4a6d      	ldr	r2, [pc, #436]	; (8008f78 <update_main_screen+0xba8>)
 8008dc4:	6a20      	ldr	r0, [r4, #32]
 8008dc6:	2100      	movs	r1, #0
 8008dc8:	f00c f824 	bl	8014e14 <lv_bar_set_style>
 8008dcc:	4a6a      	ldr	r2, [pc, #424]	; (8008f78 <update_main_screen+0xba8>)
 8008dce:	6a20      	ldr	r0, [r4, #32]
 8008dd0:	2101      	movs	r1, #1
 8008dd2:	f00c f81f 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[9], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[9], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008dd6:	4a68      	ldr	r2, [pc, #416]	; (8008f78 <update_main_screen+0xba8>)
 8008dd8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008dda:	2100      	movs	r1, #0
 8008ddc:	f00c f81a 	bl	8014e14 <lv_bar_set_style>
 8008de0:	4a65      	ldr	r2, [pc, #404]	; (8008f78 <update_main_screen+0xba8>)
 8008de2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008de4:	2101      	movs	r1, #1
 8008de6:	f00c f815 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[10], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[10], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008dea:	4a63      	ldr	r2, [pc, #396]	; (8008f78 <update_main_screen+0xba8>)
 8008dec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008dee:	2100      	movs	r1, #0
 8008df0:	f00c f810 	bl	8014e14 <lv_bar_set_style>
 8008df4:	4a60      	ldr	r2, [pc, #384]	; (8008f78 <update_main_screen+0xba8>)
 8008df6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008df8:	2101      	movs	r1, #1
 8008dfa:	f00c f80b 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[11], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[11], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008dfe:	4a5e      	ldr	r2, [pc, #376]	; (8008f78 <update_main_screen+0xba8>)
 8008e00:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008e02:	2100      	movs	r1, #0
 8008e04:	f00c f806 	bl	8014e14 <lv_bar_set_style>
 8008e08:	4a5b      	ldr	r2, [pc, #364]	; (8008f78 <update_main_screen+0xba8>)
 8008e0a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008e0c:	2101      	movs	r1, #1
 8008e0e:	f00c f801 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[12], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[12], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008e12:	4a59      	ldr	r2, [pc, #356]	; (8008f78 <update_main_screen+0xba8>)
 8008e14:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008e16:	2100      	movs	r1, #0
 8008e18:	f00b fffc 	bl	8014e14 <lv_bar_set_style>
 8008e1c:	4a56      	ldr	r2, [pc, #344]	; (8008f78 <update_main_screen+0xba8>)
 8008e1e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008e20:	2101      	movs	r1, #1
 8008e22:	f00b fff7 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[13], LV_BAR_STYLE_BG, &style_indic_cy); lv_bar_set_style(bar[13], LV_BAR_STYLE_INDIC, &style_indic_cy);
 8008e26:	4a55      	ldr	r2, [pc, #340]	; (8008f7c <update_main_screen+0xbac>)
 8008e28:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8008e2a:	2100      	movs	r1, #0
 8008e2c:	f00b fff2 	bl	8014e14 <lv_bar_set_style>
 8008e30:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8008e32:	4a52      	ldr	r2, [pc, #328]	; (8008f7c <update_main_screen+0xbac>)
 8008e34:	2101      	movs	r1, #1
 8008e36:	f00b ffed 	bl	8014e14 <lv_bar_set_style>
			bargraph_off(14);
 8008e3a:	200e      	movs	r0, #14
 8008e3c:	f7ff bb58 	b.w	80084f0 <update_main_screen+0x120>
			lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008e40:	4c4c      	ldr	r4, [pc, #304]	; (8008f74 <update_main_screen+0xba4>)
 8008e42:	4a4d      	ldr	r2, [pc, #308]	; (8008f78 <update_main_screen+0xba8>)
 8008e44:	6820      	ldr	r0, [r4, #0]
 8008e46:	2100      	movs	r1, #0
 8008e48:	f00b ffe4 	bl	8014e14 <lv_bar_set_style>
 8008e4c:	4a4a      	ldr	r2, [pc, #296]	; (8008f78 <update_main_screen+0xba8>)
 8008e4e:	6820      	ldr	r0, [r4, #0]
 8008e50:	2101      	movs	r1, #1
 8008e52:	f00b ffdf 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[1], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[1], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008e56:	4a48      	ldr	r2, [pc, #288]	; (8008f78 <update_main_screen+0xba8>)
 8008e58:	6860      	ldr	r0, [r4, #4]
 8008e5a:	2100      	movs	r1, #0
 8008e5c:	f00b ffda 	bl	8014e14 <lv_bar_set_style>
 8008e60:	4a45      	ldr	r2, [pc, #276]	; (8008f78 <update_main_screen+0xba8>)
 8008e62:	6860      	ldr	r0, [r4, #4]
 8008e64:	2101      	movs	r1, #1
 8008e66:	f00b ffd5 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[2], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[2], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008e6a:	4a43      	ldr	r2, [pc, #268]	; (8008f78 <update_main_screen+0xba8>)
 8008e6c:	68a0      	ldr	r0, [r4, #8]
 8008e6e:	2100      	movs	r1, #0
 8008e70:	f00b ffd0 	bl	8014e14 <lv_bar_set_style>
 8008e74:	4a40      	ldr	r2, [pc, #256]	; (8008f78 <update_main_screen+0xba8>)
 8008e76:	68a0      	ldr	r0, [r4, #8]
 8008e78:	2101      	movs	r1, #1
 8008e7a:	f00b ffcb 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[3], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[3], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008e7e:	4a3e      	ldr	r2, [pc, #248]	; (8008f78 <update_main_screen+0xba8>)
 8008e80:	68e0      	ldr	r0, [r4, #12]
 8008e82:	2100      	movs	r1, #0
 8008e84:	f00b ffc6 	bl	8014e14 <lv_bar_set_style>
 8008e88:	4a3b      	ldr	r2, [pc, #236]	; (8008f78 <update_main_screen+0xba8>)
 8008e8a:	68e0      	ldr	r0, [r4, #12]
 8008e8c:	2101      	movs	r1, #1
 8008e8e:	f00b ffc1 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[4], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[4], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008e92:	4a39      	ldr	r2, [pc, #228]	; (8008f78 <update_main_screen+0xba8>)
 8008e94:	6920      	ldr	r0, [r4, #16]
 8008e96:	2100      	movs	r1, #0
 8008e98:	f00b ffbc 	bl	8014e14 <lv_bar_set_style>
 8008e9c:	4a36      	ldr	r2, [pc, #216]	; (8008f78 <update_main_screen+0xba8>)
 8008e9e:	6920      	ldr	r0, [r4, #16]
 8008ea0:	2101      	movs	r1, #1
 8008ea2:	f00b ffb7 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[5], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[5], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008ea6:	4a34      	ldr	r2, [pc, #208]	; (8008f78 <update_main_screen+0xba8>)
 8008ea8:	6960      	ldr	r0, [r4, #20]
 8008eaa:	2100      	movs	r1, #0
 8008eac:	f00b ffb2 	bl	8014e14 <lv_bar_set_style>
 8008eb0:	4a31      	ldr	r2, [pc, #196]	; (8008f78 <update_main_screen+0xba8>)
 8008eb2:	6960      	ldr	r0, [r4, #20]
 8008eb4:	2101      	movs	r1, #1
 8008eb6:	f00b ffad 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[6], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[6], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008eba:	4a2f      	ldr	r2, [pc, #188]	; (8008f78 <update_main_screen+0xba8>)
 8008ebc:	69a0      	ldr	r0, [r4, #24]
 8008ebe:	2100      	movs	r1, #0
 8008ec0:	f00b ffa8 	bl	8014e14 <lv_bar_set_style>
 8008ec4:	4a2c      	ldr	r2, [pc, #176]	; (8008f78 <update_main_screen+0xba8>)
 8008ec6:	69a0      	ldr	r0, [r4, #24]
 8008ec8:	2101      	movs	r1, #1
 8008eca:	f00b ffa3 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[7], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[7], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008ece:	4a2a      	ldr	r2, [pc, #168]	; (8008f78 <update_main_screen+0xba8>)
 8008ed0:	69e0      	ldr	r0, [r4, #28]
 8008ed2:	2100      	movs	r1, #0
 8008ed4:	f00b ff9e 	bl	8014e14 <lv_bar_set_style>
 8008ed8:	4a27      	ldr	r2, [pc, #156]	; (8008f78 <update_main_screen+0xba8>)
 8008eda:	69e0      	ldr	r0, [r4, #28]
 8008edc:	2101      	movs	r1, #1
 8008ede:	f00b ff99 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[8], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[8], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008ee2:	4a25      	ldr	r2, [pc, #148]	; (8008f78 <update_main_screen+0xba8>)
 8008ee4:	6a20      	ldr	r0, [r4, #32]
 8008ee6:	2100      	movs	r1, #0
 8008ee8:	f00b ff94 	bl	8014e14 <lv_bar_set_style>
 8008eec:	4a22      	ldr	r2, [pc, #136]	; (8008f78 <update_main_screen+0xba8>)
 8008eee:	6a20      	ldr	r0, [r4, #32]
 8008ef0:	2101      	movs	r1, #1
 8008ef2:	f00b ff8f 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[9], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[9], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008ef6:	4a20      	ldr	r2, [pc, #128]	; (8008f78 <update_main_screen+0xba8>)
 8008ef8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008efa:	2100      	movs	r1, #0
 8008efc:	f00b ff8a 	bl	8014e14 <lv_bar_set_style>
 8008f00:	4a1d      	ldr	r2, [pc, #116]	; (8008f78 <update_main_screen+0xba8>)
 8008f02:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008f04:	2101      	movs	r1, #1
 8008f06:	f00b ff85 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[10], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[10], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008f0a:	4a1b      	ldr	r2, [pc, #108]	; (8008f78 <update_main_screen+0xba8>)
 8008f0c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008f0e:	2100      	movs	r1, #0
 8008f10:	f00b ff80 	bl	8014e14 <lv_bar_set_style>
 8008f14:	4a18      	ldr	r2, [pc, #96]	; (8008f78 <update_main_screen+0xba8>)
 8008f16:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008f18:	2101      	movs	r1, #1
 8008f1a:	f00b ff7b 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[11], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[11], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008f1e:	4a16      	ldr	r2, [pc, #88]	; (8008f78 <update_main_screen+0xba8>)
 8008f20:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008f22:	2100      	movs	r1, #0
 8008f24:	f00b ff76 	bl	8014e14 <lv_bar_set_style>
 8008f28:	4a13      	ldr	r2, [pc, #76]	; (8008f78 <update_main_screen+0xba8>)
 8008f2a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008f2c:	2101      	movs	r1, #1
 8008f2e:	f00b ff71 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[12], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[12], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008f32:	4a11      	ldr	r2, [pc, #68]	; (8008f78 <update_main_screen+0xba8>)
 8008f34:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008f36:	2100      	movs	r1, #0
 8008f38:	f00b ff6c 	bl	8014e14 <lv_bar_set_style>
 8008f3c:	4a0e      	ldr	r2, [pc, #56]	; (8008f78 <update_main_screen+0xba8>)
 8008f3e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008f40:	2101      	movs	r1, #1
 8008f42:	f00b ff67 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[13], LV_BAR_STYLE_BG, &style_indic_cy); lv_bar_set_style(bar[13], LV_BAR_STYLE_INDIC, &style_indic_cy);
 8008f46:	4a0d      	ldr	r2, [pc, #52]	; (8008f7c <update_main_screen+0xbac>)
 8008f48:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8008f4a:	2100      	movs	r1, #0
 8008f4c:	f00b ff62 	bl	8014e14 <lv_bar_set_style>
 8008f50:	4a0a      	ldr	r2, [pc, #40]	; (8008f7c <update_main_screen+0xbac>)
 8008f52:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8008f54:	2101      	movs	r1, #1
 8008f56:	f00b ff5d 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[14], LV_BAR_STYLE_BG, &style_indic_am); lv_bar_set_style(bar[14], LV_BAR_STYLE_INDIC, &style_indic_am);
 8008f5a:	4a09      	ldr	r2, [pc, #36]	; (8008f80 <update_main_screen+0xbb0>)
 8008f5c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8008f5e:	2100      	movs	r1, #0
 8008f60:	f00b ff58 	bl	8014e14 <lv_bar_set_style>
 8008f64:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8008f66:	4a06      	ldr	r2, [pc, #24]	; (8008f80 <update_main_screen+0xbb0>)
 8008f68:	2101      	movs	r1, #1
 8008f6a:	f00b ff53 	bl	8014e14 <lv_bar_set_style>
			bargraph_off(15);
 8008f6e:	200f      	movs	r0, #15
 8008f70:	f7ff babe 	b.w	80084f0 <update_main_screen+0x120>
 8008f74:	20004e14 	.word	0x20004e14
 8008f78:	20004f64 	.word	0x20004f64
 8008f7c:	20004eec 	.word	0x20004eec
 8008f80:	20004eb0 	.word	0x20004eb0
			lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008f84:	4ca8      	ldr	r4, [pc, #672]	; (8009228 <update_main_screen+0xe58>)
 8008f86:	4aa9      	ldr	r2, [pc, #676]	; (800922c <update_main_screen+0xe5c>)
 8008f88:	6820      	ldr	r0, [r4, #0]
 8008f8a:	2100      	movs	r1, #0
 8008f8c:	f00b ff42 	bl	8014e14 <lv_bar_set_style>
 8008f90:	4aa6      	ldr	r2, [pc, #664]	; (800922c <update_main_screen+0xe5c>)
 8008f92:	6820      	ldr	r0, [r4, #0]
 8008f94:	2101      	movs	r1, #1
 8008f96:	f00b ff3d 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[1], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[1], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008f9a:	4aa4      	ldr	r2, [pc, #656]	; (800922c <update_main_screen+0xe5c>)
 8008f9c:	6860      	ldr	r0, [r4, #4]
 8008f9e:	2100      	movs	r1, #0
 8008fa0:	f00b ff38 	bl	8014e14 <lv_bar_set_style>
 8008fa4:	4aa1      	ldr	r2, [pc, #644]	; (800922c <update_main_screen+0xe5c>)
 8008fa6:	6860      	ldr	r0, [r4, #4]
 8008fa8:	2101      	movs	r1, #1
 8008faa:	f00b ff33 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[2], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[2], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008fae:	4a9f      	ldr	r2, [pc, #636]	; (800922c <update_main_screen+0xe5c>)
 8008fb0:	68a0      	ldr	r0, [r4, #8]
 8008fb2:	2100      	movs	r1, #0
 8008fb4:	f00b ff2e 	bl	8014e14 <lv_bar_set_style>
 8008fb8:	4a9c      	ldr	r2, [pc, #624]	; (800922c <update_main_screen+0xe5c>)
 8008fba:	68a0      	ldr	r0, [r4, #8]
 8008fbc:	2101      	movs	r1, #1
 8008fbe:	f00b ff29 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[3], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[3], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008fc2:	4a9a      	ldr	r2, [pc, #616]	; (800922c <update_main_screen+0xe5c>)
 8008fc4:	68e0      	ldr	r0, [r4, #12]
 8008fc6:	2100      	movs	r1, #0
 8008fc8:	f00b ff24 	bl	8014e14 <lv_bar_set_style>
 8008fcc:	4a97      	ldr	r2, [pc, #604]	; (800922c <update_main_screen+0xe5c>)
 8008fce:	68e0      	ldr	r0, [r4, #12]
 8008fd0:	2101      	movs	r1, #1
 8008fd2:	f00b ff1f 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[4], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[4], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008fd6:	4a95      	ldr	r2, [pc, #596]	; (800922c <update_main_screen+0xe5c>)
 8008fd8:	6920      	ldr	r0, [r4, #16]
 8008fda:	2100      	movs	r1, #0
 8008fdc:	f00b ff1a 	bl	8014e14 <lv_bar_set_style>
 8008fe0:	4a92      	ldr	r2, [pc, #584]	; (800922c <update_main_screen+0xe5c>)
 8008fe2:	6920      	ldr	r0, [r4, #16]
 8008fe4:	2101      	movs	r1, #1
 8008fe6:	f00b ff15 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[5], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[5], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008fea:	4a90      	ldr	r2, [pc, #576]	; (800922c <update_main_screen+0xe5c>)
 8008fec:	6960      	ldr	r0, [r4, #20]
 8008fee:	2100      	movs	r1, #0
 8008ff0:	f00b ff10 	bl	8014e14 <lv_bar_set_style>
 8008ff4:	4a8d      	ldr	r2, [pc, #564]	; (800922c <update_main_screen+0xe5c>)
 8008ff6:	6960      	ldr	r0, [r4, #20]
 8008ff8:	2101      	movs	r1, #1
 8008ffa:	f00b ff0b 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[6], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[6], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008ffe:	4a8b      	ldr	r2, [pc, #556]	; (800922c <update_main_screen+0xe5c>)
 8009000:	69a0      	ldr	r0, [r4, #24]
 8009002:	2100      	movs	r1, #0
 8009004:	f00b ff06 	bl	8014e14 <lv_bar_set_style>
 8009008:	4a88      	ldr	r2, [pc, #544]	; (800922c <update_main_screen+0xe5c>)
 800900a:	69a0      	ldr	r0, [r4, #24]
 800900c:	2101      	movs	r1, #1
 800900e:	f00b ff01 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[7], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[7], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009012:	4a86      	ldr	r2, [pc, #536]	; (800922c <update_main_screen+0xe5c>)
 8009014:	69e0      	ldr	r0, [r4, #28]
 8009016:	2100      	movs	r1, #0
 8009018:	f00b fefc 	bl	8014e14 <lv_bar_set_style>
 800901c:	4a83      	ldr	r2, [pc, #524]	; (800922c <update_main_screen+0xe5c>)
 800901e:	69e0      	ldr	r0, [r4, #28]
 8009020:	2101      	movs	r1, #1
 8009022:	f00b fef7 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[8], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[8], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009026:	4a81      	ldr	r2, [pc, #516]	; (800922c <update_main_screen+0xe5c>)
 8009028:	6a20      	ldr	r0, [r4, #32]
 800902a:	2100      	movs	r1, #0
 800902c:	f00b fef2 	bl	8014e14 <lv_bar_set_style>
 8009030:	4a7e      	ldr	r2, [pc, #504]	; (800922c <update_main_screen+0xe5c>)
 8009032:	6a20      	ldr	r0, [r4, #32]
 8009034:	2101      	movs	r1, #1
 8009036:	f00b feed 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[9], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[9], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800903a:	4a7c      	ldr	r2, [pc, #496]	; (800922c <update_main_screen+0xe5c>)
 800903c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800903e:	2100      	movs	r1, #0
 8009040:	f00b fee8 	bl	8014e14 <lv_bar_set_style>
 8009044:	4a79      	ldr	r2, [pc, #484]	; (800922c <update_main_screen+0xe5c>)
 8009046:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009048:	2101      	movs	r1, #1
 800904a:	f00b fee3 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[10], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[10], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800904e:	4a77      	ldr	r2, [pc, #476]	; (800922c <update_main_screen+0xe5c>)
 8009050:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8009052:	2100      	movs	r1, #0
 8009054:	f00b fede 	bl	8014e14 <lv_bar_set_style>
 8009058:	4a74      	ldr	r2, [pc, #464]	; (800922c <update_main_screen+0xe5c>)
 800905a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800905c:	2101      	movs	r1, #1
 800905e:	f00b fed9 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[11], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[11], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009062:	4a72      	ldr	r2, [pc, #456]	; (800922c <update_main_screen+0xe5c>)
 8009064:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009066:	2100      	movs	r1, #0
 8009068:	f00b fed4 	bl	8014e14 <lv_bar_set_style>
 800906c:	4a6f      	ldr	r2, [pc, #444]	; (800922c <update_main_screen+0xe5c>)
 800906e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009070:	2101      	movs	r1, #1
 8009072:	f00b fecf 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[12], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[12], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009076:	4a6d      	ldr	r2, [pc, #436]	; (800922c <update_main_screen+0xe5c>)
 8009078:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800907a:	2100      	movs	r1, #0
 800907c:	f00b feca 	bl	8014e14 <lv_bar_set_style>
 8009080:	4a6a      	ldr	r2, [pc, #424]	; (800922c <update_main_screen+0xe5c>)
 8009082:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8009084:	2101      	movs	r1, #1
 8009086:	f00b fec5 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[13], LV_BAR_STYLE_BG, &style_indic_cy); lv_bar_set_style(bar[13], LV_BAR_STYLE_INDIC, &style_indic_cy);
 800908a:	4a69      	ldr	r2, [pc, #420]	; (8009230 <update_main_screen+0xe60>)
 800908c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800908e:	2100      	movs	r1, #0
 8009090:	f00b fec0 	bl	8014e14 <lv_bar_set_style>
 8009094:	4a66      	ldr	r2, [pc, #408]	; (8009230 <update_main_screen+0xe60>)
 8009096:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8009098:	2101      	movs	r1, #1
 800909a:	f00b febb 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[14], LV_BAR_STYLE_BG, &style_indic_am); lv_bar_set_style(bar[14], LV_BAR_STYLE_INDIC, &style_indic_am);
 800909e:	4a65      	ldr	r2, [pc, #404]	; (8009234 <update_main_screen+0xe64>)
 80090a0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80090a2:	2100      	movs	r1, #0
 80090a4:	f00b feb6 	bl	8014e14 <lv_bar_set_style>
 80090a8:	4a62      	ldr	r2, [pc, #392]	; (8009234 <update_main_screen+0xe64>)
 80090aa:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80090ac:	2101      	movs	r1, #1
 80090ae:	f00b feb1 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[15], LV_BAR_STYLE_BG, &style_indic_am); lv_bar_set_style(bar[15], LV_BAR_STYLE_INDIC, &style_indic_am);
 80090b2:	4a60      	ldr	r2, [pc, #384]	; (8009234 <update_main_screen+0xe64>)
 80090b4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80090b6:	2100      	movs	r1, #0
 80090b8:	f00b feac 	bl	8014e14 <lv_bar_set_style>
 80090bc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80090be:	4a5d      	ldr	r2, [pc, #372]	; (8009234 <update_main_screen+0xe64>)
 80090c0:	2101      	movs	r1, #1
 80090c2:	f00b fea7 	bl	8014e14 <lv_bar_set_style>
			bargraph_off(16);
 80090c6:	2010      	movs	r0, #16
 80090c8:	f7ff ba12 	b.w	80084f0 <update_main_screen+0x120>
			lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80090cc:	4c56      	ldr	r4, [pc, #344]	; (8009228 <update_main_screen+0xe58>)
 80090ce:	4a57      	ldr	r2, [pc, #348]	; (800922c <update_main_screen+0xe5c>)
 80090d0:	6820      	ldr	r0, [r4, #0]
 80090d2:	2100      	movs	r1, #0
 80090d4:	f00b fe9e 	bl	8014e14 <lv_bar_set_style>
 80090d8:	4a54      	ldr	r2, [pc, #336]	; (800922c <update_main_screen+0xe5c>)
 80090da:	6820      	ldr	r0, [r4, #0]
 80090dc:	2101      	movs	r1, #1
 80090de:	f00b fe99 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[1], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[1], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80090e2:	4a52      	ldr	r2, [pc, #328]	; (800922c <update_main_screen+0xe5c>)
 80090e4:	6860      	ldr	r0, [r4, #4]
 80090e6:	2100      	movs	r1, #0
 80090e8:	f00b fe94 	bl	8014e14 <lv_bar_set_style>
 80090ec:	4a4f      	ldr	r2, [pc, #316]	; (800922c <update_main_screen+0xe5c>)
 80090ee:	6860      	ldr	r0, [r4, #4]
 80090f0:	2101      	movs	r1, #1
 80090f2:	f00b fe8f 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[2], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[2], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80090f6:	4a4d      	ldr	r2, [pc, #308]	; (800922c <update_main_screen+0xe5c>)
 80090f8:	68a0      	ldr	r0, [r4, #8]
 80090fa:	2100      	movs	r1, #0
 80090fc:	f00b fe8a 	bl	8014e14 <lv_bar_set_style>
 8009100:	4a4a      	ldr	r2, [pc, #296]	; (800922c <update_main_screen+0xe5c>)
 8009102:	68a0      	ldr	r0, [r4, #8]
 8009104:	2101      	movs	r1, #1
 8009106:	f00b fe85 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[3], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[3], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800910a:	4a48      	ldr	r2, [pc, #288]	; (800922c <update_main_screen+0xe5c>)
 800910c:	68e0      	ldr	r0, [r4, #12]
 800910e:	2100      	movs	r1, #0
 8009110:	f00b fe80 	bl	8014e14 <lv_bar_set_style>
 8009114:	4a45      	ldr	r2, [pc, #276]	; (800922c <update_main_screen+0xe5c>)
 8009116:	68e0      	ldr	r0, [r4, #12]
 8009118:	2101      	movs	r1, #1
 800911a:	f00b fe7b 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[4], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[4], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800911e:	4a43      	ldr	r2, [pc, #268]	; (800922c <update_main_screen+0xe5c>)
 8009120:	6920      	ldr	r0, [r4, #16]
 8009122:	2100      	movs	r1, #0
 8009124:	f00b fe76 	bl	8014e14 <lv_bar_set_style>
 8009128:	4a40      	ldr	r2, [pc, #256]	; (800922c <update_main_screen+0xe5c>)
 800912a:	6920      	ldr	r0, [r4, #16]
 800912c:	2101      	movs	r1, #1
 800912e:	f00b fe71 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[5], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[5], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009132:	4a3e      	ldr	r2, [pc, #248]	; (800922c <update_main_screen+0xe5c>)
 8009134:	6960      	ldr	r0, [r4, #20]
 8009136:	2100      	movs	r1, #0
 8009138:	f00b fe6c 	bl	8014e14 <lv_bar_set_style>
 800913c:	4a3b      	ldr	r2, [pc, #236]	; (800922c <update_main_screen+0xe5c>)
 800913e:	6960      	ldr	r0, [r4, #20]
 8009140:	2101      	movs	r1, #1
 8009142:	f00b fe67 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[6], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[6], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009146:	4a39      	ldr	r2, [pc, #228]	; (800922c <update_main_screen+0xe5c>)
 8009148:	69a0      	ldr	r0, [r4, #24]
 800914a:	2100      	movs	r1, #0
 800914c:	f00b fe62 	bl	8014e14 <lv_bar_set_style>
 8009150:	4a36      	ldr	r2, [pc, #216]	; (800922c <update_main_screen+0xe5c>)
 8009152:	69a0      	ldr	r0, [r4, #24]
 8009154:	2101      	movs	r1, #1
 8009156:	f00b fe5d 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[7], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[7], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800915a:	4a34      	ldr	r2, [pc, #208]	; (800922c <update_main_screen+0xe5c>)
 800915c:	69e0      	ldr	r0, [r4, #28]
 800915e:	2100      	movs	r1, #0
 8009160:	f00b fe58 	bl	8014e14 <lv_bar_set_style>
 8009164:	4a31      	ldr	r2, [pc, #196]	; (800922c <update_main_screen+0xe5c>)
 8009166:	69e0      	ldr	r0, [r4, #28]
 8009168:	2101      	movs	r1, #1
 800916a:	f00b fe53 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[8], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[8], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800916e:	4a2f      	ldr	r2, [pc, #188]	; (800922c <update_main_screen+0xe5c>)
 8009170:	6a20      	ldr	r0, [r4, #32]
 8009172:	2100      	movs	r1, #0
 8009174:	f00b fe4e 	bl	8014e14 <lv_bar_set_style>
 8009178:	4a2c      	ldr	r2, [pc, #176]	; (800922c <update_main_screen+0xe5c>)
 800917a:	6a20      	ldr	r0, [r4, #32]
 800917c:	2101      	movs	r1, #1
 800917e:	f00b fe49 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[9], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[9], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009182:	4a2a      	ldr	r2, [pc, #168]	; (800922c <update_main_screen+0xe5c>)
 8009184:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009186:	2100      	movs	r1, #0
 8009188:	f00b fe44 	bl	8014e14 <lv_bar_set_style>
 800918c:	4a27      	ldr	r2, [pc, #156]	; (800922c <update_main_screen+0xe5c>)
 800918e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009190:	2101      	movs	r1, #1
 8009192:	f00b fe3f 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[10], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[10], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009196:	4a25      	ldr	r2, [pc, #148]	; (800922c <update_main_screen+0xe5c>)
 8009198:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800919a:	2100      	movs	r1, #0
 800919c:	f00b fe3a 	bl	8014e14 <lv_bar_set_style>
 80091a0:	4a22      	ldr	r2, [pc, #136]	; (800922c <update_main_screen+0xe5c>)
 80091a2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80091a4:	2101      	movs	r1, #1
 80091a6:	f00b fe35 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[11], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[11], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80091aa:	4a20      	ldr	r2, [pc, #128]	; (800922c <update_main_screen+0xe5c>)
 80091ac:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80091ae:	2100      	movs	r1, #0
 80091b0:	f00b fe30 	bl	8014e14 <lv_bar_set_style>
 80091b4:	4a1d      	ldr	r2, [pc, #116]	; (800922c <update_main_screen+0xe5c>)
 80091b6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80091b8:	2101      	movs	r1, #1
 80091ba:	f00b fe2b 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[12], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[12], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80091be:	4a1b      	ldr	r2, [pc, #108]	; (800922c <update_main_screen+0xe5c>)
 80091c0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80091c2:	2100      	movs	r1, #0
 80091c4:	f00b fe26 	bl	8014e14 <lv_bar_set_style>
 80091c8:	4a18      	ldr	r2, [pc, #96]	; (800922c <update_main_screen+0xe5c>)
 80091ca:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80091cc:	2101      	movs	r1, #1
 80091ce:	f00b fe21 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[13], LV_BAR_STYLE_BG, &style_indic_cy); lv_bar_set_style(bar[13], LV_BAR_STYLE_INDIC, &style_indic_cy);
 80091d2:	4a17      	ldr	r2, [pc, #92]	; (8009230 <update_main_screen+0xe60>)
 80091d4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80091d6:	2100      	movs	r1, #0
 80091d8:	f00b fe1c 	bl	8014e14 <lv_bar_set_style>
 80091dc:	4a14      	ldr	r2, [pc, #80]	; (8009230 <update_main_screen+0xe60>)
 80091de:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80091e0:	2101      	movs	r1, #1
 80091e2:	f00b fe17 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[14], LV_BAR_STYLE_BG, &style_indic_am); lv_bar_set_style(bar[14], LV_BAR_STYLE_INDIC, &style_indic_am);
 80091e6:	4a13      	ldr	r2, [pc, #76]	; (8009234 <update_main_screen+0xe64>)
 80091e8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80091ea:	2100      	movs	r1, #0
 80091ec:	f00b fe12 	bl	8014e14 <lv_bar_set_style>
 80091f0:	4a10      	ldr	r2, [pc, #64]	; (8009234 <update_main_screen+0xe64>)
 80091f2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80091f4:	2101      	movs	r1, #1
 80091f6:	f00b fe0d 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[15], LV_BAR_STYLE_BG, &style_indic_am); lv_bar_set_style(bar[15], LV_BAR_STYLE_INDIC, &style_indic_am);
 80091fa:	4a0e      	ldr	r2, [pc, #56]	; (8009234 <update_main_screen+0xe64>)
 80091fc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80091fe:	2100      	movs	r1, #0
 8009200:	f00b fe08 	bl	8014e14 <lv_bar_set_style>
 8009204:	4a0b      	ldr	r2, [pc, #44]	; (8009234 <update_main_screen+0xe64>)
 8009206:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8009208:	2101      	movs	r1, #1
 800920a:	f00b fe03 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[16], LV_BAR_STYLE_BG, &style_indic_am); lv_bar_set_style(bar[16], LV_BAR_STYLE_INDIC, &style_indic_am);
 800920e:	4a09      	ldr	r2, [pc, #36]	; (8009234 <update_main_screen+0xe64>)
 8009210:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8009212:	2100      	movs	r1, #0
 8009214:	f00b fdfe 	bl	8014e14 <lv_bar_set_style>
 8009218:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800921a:	4a06      	ldr	r2, [pc, #24]	; (8009234 <update_main_screen+0xe64>)
 800921c:	2101      	movs	r1, #1
 800921e:	f00b fdf9 	bl	8014e14 <lv_bar_set_style>
			bargraph_off(17);
 8009222:	2011      	movs	r0, #17
 8009224:	f7ff b964 	b.w	80084f0 <update_main_screen+0x120>
 8009228:	20004e14 	.word	0x20004e14
 800922c:	20004f64 	.word	0x20004f64
 8009230:	20004eec 	.word	0x20004eec
 8009234:	20004eb0 	.word	0x20004eb0
			lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009238:	4c5b      	ldr	r4, [pc, #364]	; (80093a8 <update_main_screen+0xfd8>)
 800923a:	4a5c      	ldr	r2, [pc, #368]	; (80093ac <update_main_screen+0xfdc>)
 800923c:	6820      	ldr	r0, [r4, #0]
 800923e:	2100      	movs	r1, #0
 8009240:	f00b fde8 	bl	8014e14 <lv_bar_set_style>
 8009244:	4a59      	ldr	r2, [pc, #356]	; (80093ac <update_main_screen+0xfdc>)
 8009246:	6820      	ldr	r0, [r4, #0]
 8009248:	2101      	movs	r1, #1
 800924a:	f00b fde3 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[1], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[1], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800924e:	4a57      	ldr	r2, [pc, #348]	; (80093ac <update_main_screen+0xfdc>)
 8009250:	6860      	ldr	r0, [r4, #4]
 8009252:	2100      	movs	r1, #0
 8009254:	f00b fdde 	bl	8014e14 <lv_bar_set_style>
 8009258:	4a54      	ldr	r2, [pc, #336]	; (80093ac <update_main_screen+0xfdc>)
 800925a:	6860      	ldr	r0, [r4, #4]
 800925c:	2101      	movs	r1, #1
 800925e:	f00b fdd9 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[2], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[2], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009262:	4a52      	ldr	r2, [pc, #328]	; (80093ac <update_main_screen+0xfdc>)
 8009264:	68a0      	ldr	r0, [r4, #8]
 8009266:	2100      	movs	r1, #0
 8009268:	f00b fdd4 	bl	8014e14 <lv_bar_set_style>
 800926c:	4a4f      	ldr	r2, [pc, #316]	; (80093ac <update_main_screen+0xfdc>)
 800926e:	68a0      	ldr	r0, [r4, #8]
 8009270:	2101      	movs	r1, #1
 8009272:	f00b fdcf 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[3], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[3], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009276:	4a4d      	ldr	r2, [pc, #308]	; (80093ac <update_main_screen+0xfdc>)
 8009278:	68e0      	ldr	r0, [r4, #12]
 800927a:	2100      	movs	r1, #0
 800927c:	f00b fdca 	bl	8014e14 <lv_bar_set_style>
 8009280:	4a4a      	ldr	r2, [pc, #296]	; (80093ac <update_main_screen+0xfdc>)
 8009282:	68e0      	ldr	r0, [r4, #12]
 8009284:	2101      	movs	r1, #1
 8009286:	f00b fdc5 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[4], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[4], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800928a:	4a48      	ldr	r2, [pc, #288]	; (80093ac <update_main_screen+0xfdc>)
 800928c:	6920      	ldr	r0, [r4, #16]
 800928e:	2100      	movs	r1, #0
 8009290:	f00b fdc0 	bl	8014e14 <lv_bar_set_style>
 8009294:	4a45      	ldr	r2, [pc, #276]	; (80093ac <update_main_screen+0xfdc>)
 8009296:	6920      	ldr	r0, [r4, #16]
 8009298:	2101      	movs	r1, #1
 800929a:	f00b fdbb 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[5], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[5], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800929e:	4a43      	ldr	r2, [pc, #268]	; (80093ac <update_main_screen+0xfdc>)
 80092a0:	6960      	ldr	r0, [r4, #20]
 80092a2:	2100      	movs	r1, #0
 80092a4:	f00b fdb6 	bl	8014e14 <lv_bar_set_style>
 80092a8:	4a40      	ldr	r2, [pc, #256]	; (80093ac <update_main_screen+0xfdc>)
 80092aa:	6960      	ldr	r0, [r4, #20]
 80092ac:	2101      	movs	r1, #1
 80092ae:	f00b fdb1 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[6], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[6], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80092b2:	4a3e      	ldr	r2, [pc, #248]	; (80093ac <update_main_screen+0xfdc>)
 80092b4:	69a0      	ldr	r0, [r4, #24]
 80092b6:	2100      	movs	r1, #0
 80092b8:	f00b fdac 	bl	8014e14 <lv_bar_set_style>
 80092bc:	4a3b      	ldr	r2, [pc, #236]	; (80093ac <update_main_screen+0xfdc>)
 80092be:	69a0      	ldr	r0, [r4, #24]
 80092c0:	2101      	movs	r1, #1
 80092c2:	f00b fda7 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[7], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[7], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80092c6:	4a39      	ldr	r2, [pc, #228]	; (80093ac <update_main_screen+0xfdc>)
 80092c8:	69e0      	ldr	r0, [r4, #28]
 80092ca:	2100      	movs	r1, #0
 80092cc:	f00b fda2 	bl	8014e14 <lv_bar_set_style>
 80092d0:	4a36      	ldr	r2, [pc, #216]	; (80093ac <update_main_screen+0xfdc>)
 80092d2:	69e0      	ldr	r0, [r4, #28]
 80092d4:	2101      	movs	r1, #1
 80092d6:	f00b fd9d 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[8], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[8], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80092da:	4a34      	ldr	r2, [pc, #208]	; (80093ac <update_main_screen+0xfdc>)
 80092dc:	6a20      	ldr	r0, [r4, #32]
 80092de:	2100      	movs	r1, #0
 80092e0:	f00b fd98 	bl	8014e14 <lv_bar_set_style>
 80092e4:	4a31      	ldr	r2, [pc, #196]	; (80093ac <update_main_screen+0xfdc>)
 80092e6:	6a20      	ldr	r0, [r4, #32]
 80092e8:	2101      	movs	r1, #1
 80092ea:	f00b fd93 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[9], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[9], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80092ee:	4a2f      	ldr	r2, [pc, #188]	; (80093ac <update_main_screen+0xfdc>)
 80092f0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80092f2:	2100      	movs	r1, #0
 80092f4:	f00b fd8e 	bl	8014e14 <lv_bar_set_style>
 80092f8:	4a2c      	ldr	r2, [pc, #176]	; (80093ac <update_main_screen+0xfdc>)
 80092fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80092fc:	2101      	movs	r1, #1
 80092fe:	f00b fd89 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[10], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[10], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009302:	4a2a      	ldr	r2, [pc, #168]	; (80093ac <update_main_screen+0xfdc>)
 8009304:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8009306:	2100      	movs	r1, #0
 8009308:	f00b fd84 	bl	8014e14 <lv_bar_set_style>
 800930c:	4a27      	ldr	r2, [pc, #156]	; (80093ac <update_main_screen+0xfdc>)
 800930e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8009310:	2101      	movs	r1, #1
 8009312:	f00b fd7f 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[11], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[11], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009316:	4a25      	ldr	r2, [pc, #148]	; (80093ac <update_main_screen+0xfdc>)
 8009318:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800931a:	2100      	movs	r1, #0
 800931c:	f00b fd7a 	bl	8014e14 <lv_bar_set_style>
 8009320:	4a22      	ldr	r2, [pc, #136]	; (80093ac <update_main_screen+0xfdc>)
 8009322:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009324:	2101      	movs	r1, #1
 8009326:	f00b fd75 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[12], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[12], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800932a:	4a20      	ldr	r2, [pc, #128]	; (80093ac <update_main_screen+0xfdc>)
 800932c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800932e:	2100      	movs	r1, #0
 8009330:	f00b fd70 	bl	8014e14 <lv_bar_set_style>
 8009334:	4a1d      	ldr	r2, [pc, #116]	; (80093ac <update_main_screen+0xfdc>)
 8009336:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8009338:	2101      	movs	r1, #1
 800933a:	f00b fd6b 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[13], LV_BAR_STYLE_BG, &style_indic_cy); lv_bar_set_style(bar[13], LV_BAR_STYLE_INDIC, &style_indic_cy);
 800933e:	4a1c      	ldr	r2, [pc, #112]	; (80093b0 <update_main_screen+0xfe0>)
 8009340:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8009342:	2100      	movs	r1, #0
 8009344:	f00b fd66 	bl	8014e14 <lv_bar_set_style>
 8009348:	4a19      	ldr	r2, [pc, #100]	; (80093b0 <update_main_screen+0xfe0>)
 800934a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800934c:	2101      	movs	r1, #1
 800934e:	f00b fd61 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[14], LV_BAR_STYLE_BG, &style_indic_am); lv_bar_set_style(bar[14], LV_BAR_STYLE_INDIC, &style_indic_am);
 8009352:	4a18      	ldr	r2, [pc, #96]	; (80093b4 <update_main_screen+0xfe4>)
 8009354:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8009356:	2100      	movs	r1, #0
 8009358:	f00b fd5c 	bl	8014e14 <lv_bar_set_style>
 800935c:	4a15      	ldr	r2, [pc, #84]	; (80093b4 <update_main_screen+0xfe4>)
 800935e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8009360:	2101      	movs	r1, #1
 8009362:	f00b fd57 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[15], LV_BAR_STYLE_BG, &style_indic_am); lv_bar_set_style(bar[15], LV_BAR_STYLE_INDIC, &style_indic_am);
 8009366:	4a13      	ldr	r2, [pc, #76]	; (80093b4 <update_main_screen+0xfe4>)
 8009368:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800936a:	2100      	movs	r1, #0
 800936c:	f00b fd52 	bl	8014e14 <lv_bar_set_style>
 8009370:	4a10      	ldr	r2, [pc, #64]	; (80093b4 <update_main_screen+0xfe4>)
 8009372:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8009374:	2101      	movs	r1, #1
 8009376:	f00b fd4d 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[16], LV_BAR_STYLE_BG, &style_indic_am); lv_bar_set_style(bar[16], LV_BAR_STYLE_INDIC, &style_indic_am);
 800937a:	4a0e      	ldr	r2, [pc, #56]	; (80093b4 <update_main_screen+0xfe4>)
 800937c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800937e:	2100      	movs	r1, #0
 8009380:	f00b fd48 	bl	8014e14 <lv_bar_set_style>
 8009384:	4a0b      	ldr	r2, [pc, #44]	; (80093b4 <update_main_screen+0xfe4>)
 8009386:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8009388:	2101      	movs	r1, #1
 800938a:	f00b fd43 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[17], LV_BAR_STYLE_BG, &style_indic_vm); lv_bar_set_style(bar[17], LV_BAR_STYLE_INDIC, &style_indic_vm);
 800938e:	4a0a      	ldr	r2, [pc, #40]	; (80093b8 <update_main_screen+0xfe8>)
 8009390:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8009392:	2100      	movs	r1, #0
 8009394:	f00b fd3e 	bl	8014e14 <lv_bar_set_style>
 8009398:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800939a:	4a07      	ldr	r2, [pc, #28]	; (80093b8 <update_main_screen+0xfe8>)
 800939c:	2101      	movs	r1, #1
 800939e:	f00b fd39 	bl	8014e14 <lv_bar_set_style>
			bargraph_off(18);
 80093a2:	2012      	movs	r0, #18
 80093a4:	f7ff b8a4 	b.w	80084f0 <update_main_screen+0x120>
 80093a8:	20004e14 	.word	0x20004e14
 80093ac:	20004f64 	.word	0x20004f64
 80093b0:	20004eec 	.word	0x20004eec
 80093b4:	20004eb0 	.word	0x20004eb0
 80093b8:	20004fa0 	.word	0x20004fa0
			lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80093bc:	4c60      	ldr	r4, [pc, #384]	; (8009540 <update_main_screen+0x1170>)
 80093be:	4a61      	ldr	r2, [pc, #388]	; (8009544 <update_main_screen+0x1174>)
 80093c0:	6820      	ldr	r0, [r4, #0]
 80093c2:	2100      	movs	r1, #0
 80093c4:	f00b fd26 	bl	8014e14 <lv_bar_set_style>
 80093c8:	4a5e      	ldr	r2, [pc, #376]	; (8009544 <update_main_screen+0x1174>)
 80093ca:	6820      	ldr	r0, [r4, #0]
 80093cc:	2101      	movs	r1, #1
 80093ce:	f00b fd21 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[1], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[1], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80093d2:	4a5c      	ldr	r2, [pc, #368]	; (8009544 <update_main_screen+0x1174>)
 80093d4:	6860      	ldr	r0, [r4, #4]
 80093d6:	2100      	movs	r1, #0
 80093d8:	f00b fd1c 	bl	8014e14 <lv_bar_set_style>
 80093dc:	4a59      	ldr	r2, [pc, #356]	; (8009544 <update_main_screen+0x1174>)
 80093de:	6860      	ldr	r0, [r4, #4]
 80093e0:	2101      	movs	r1, #1
 80093e2:	f00b fd17 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[2], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[2], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80093e6:	4a57      	ldr	r2, [pc, #348]	; (8009544 <update_main_screen+0x1174>)
 80093e8:	68a0      	ldr	r0, [r4, #8]
 80093ea:	2100      	movs	r1, #0
 80093ec:	f00b fd12 	bl	8014e14 <lv_bar_set_style>
 80093f0:	4a54      	ldr	r2, [pc, #336]	; (8009544 <update_main_screen+0x1174>)
 80093f2:	68a0      	ldr	r0, [r4, #8]
 80093f4:	2101      	movs	r1, #1
 80093f6:	f00b fd0d 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[3], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[3], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80093fa:	4a52      	ldr	r2, [pc, #328]	; (8009544 <update_main_screen+0x1174>)
 80093fc:	68e0      	ldr	r0, [r4, #12]
 80093fe:	2100      	movs	r1, #0
 8009400:	f00b fd08 	bl	8014e14 <lv_bar_set_style>
 8009404:	4a4f      	ldr	r2, [pc, #316]	; (8009544 <update_main_screen+0x1174>)
 8009406:	68e0      	ldr	r0, [r4, #12]
 8009408:	2101      	movs	r1, #1
 800940a:	f00b fd03 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[4], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[4], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800940e:	4a4d      	ldr	r2, [pc, #308]	; (8009544 <update_main_screen+0x1174>)
 8009410:	6920      	ldr	r0, [r4, #16]
 8009412:	2100      	movs	r1, #0
 8009414:	f00b fcfe 	bl	8014e14 <lv_bar_set_style>
 8009418:	4a4a      	ldr	r2, [pc, #296]	; (8009544 <update_main_screen+0x1174>)
 800941a:	6920      	ldr	r0, [r4, #16]
 800941c:	2101      	movs	r1, #1
 800941e:	f00b fcf9 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[5], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[5], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009422:	4a48      	ldr	r2, [pc, #288]	; (8009544 <update_main_screen+0x1174>)
 8009424:	6960      	ldr	r0, [r4, #20]
 8009426:	2100      	movs	r1, #0
 8009428:	f00b fcf4 	bl	8014e14 <lv_bar_set_style>
 800942c:	4a45      	ldr	r2, [pc, #276]	; (8009544 <update_main_screen+0x1174>)
 800942e:	6960      	ldr	r0, [r4, #20]
 8009430:	2101      	movs	r1, #1
 8009432:	f00b fcef 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[6], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[6], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009436:	4a43      	ldr	r2, [pc, #268]	; (8009544 <update_main_screen+0x1174>)
 8009438:	69a0      	ldr	r0, [r4, #24]
 800943a:	2100      	movs	r1, #0
 800943c:	f00b fcea 	bl	8014e14 <lv_bar_set_style>
 8009440:	4a40      	ldr	r2, [pc, #256]	; (8009544 <update_main_screen+0x1174>)
 8009442:	69a0      	ldr	r0, [r4, #24]
 8009444:	2101      	movs	r1, #1
 8009446:	f00b fce5 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[7], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[7], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800944a:	4a3e      	ldr	r2, [pc, #248]	; (8009544 <update_main_screen+0x1174>)
 800944c:	69e0      	ldr	r0, [r4, #28]
 800944e:	2100      	movs	r1, #0
 8009450:	f00b fce0 	bl	8014e14 <lv_bar_set_style>
 8009454:	4a3b      	ldr	r2, [pc, #236]	; (8009544 <update_main_screen+0x1174>)
 8009456:	69e0      	ldr	r0, [r4, #28]
 8009458:	2101      	movs	r1, #1
 800945a:	f00b fcdb 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[8], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[8], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800945e:	4a39      	ldr	r2, [pc, #228]	; (8009544 <update_main_screen+0x1174>)
 8009460:	6a20      	ldr	r0, [r4, #32]
 8009462:	2100      	movs	r1, #0
 8009464:	f00b fcd6 	bl	8014e14 <lv_bar_set_style>
 8009468:	4a36      	ldr	r2, [pc, #216]	; (8009544 <update_main_screen+0x1174>)
 800946a:	6a20      	ldr	r0, [r4, #32]
 800946c:	2101      	movs	r1, #1
 800946e:	f00b fcd1 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[9], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[9], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009472:	4a34      	ldr	r2, [pc, #208]	; (8009544 <update_main_screen+0x1174>)
 8009474:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009476:	2100      	movs	r1, #0
 8009478:	f00b fccc 	bl	8014e14 <lv_bar_set_style>
 800947c:	4a31      	ldr	r2, [pc, #196]	; (8009544 <update_main_screen+0x1174>)
 800947e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009480:	2101      	movs	r1, #1
 8009482:	f00b fcc7 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[10], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[10], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009486:	4a2f      	ldr	r2, [pc, #188]	; (8009544 <update_main_screen+0x1174>)
 8009488:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800948a:	2100      	movs	r1, #0
 800948c:	f00b fcc2 	bl	8014e14 <lv_bar_set_style>
 8009490:	4a2c      	ldr	r2, [pc, #176]	; (8009544 <update_main_screen+0x1174>)
 8009492:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8009494:	2101      	movs	r1, #1
 8009496:	f00b fcbd 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[11], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[11], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800949a:	4a2a      	ldr	r2, [pc, #168]	; (8009544 <update_main_screen+0x1174>)
 800949c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800949e:	2100      	movs	r1, #0
 80094a0:	f00b fcb8 	bl	8014e14 <lv_bar_set_style>
 80094a4:	4a27      	ldr	r2, [pc, #156]	; (8009544 <update_main_screen+0x1174>)
 80094a6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80094a8:	2101      	movs	r1, #1
 80094aa:	f00b fcb3 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[12], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[12], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80094ae:	4a25      	ldr	r2, [pc, #148]	; (8009544 <update_main_screen+0x1174>)
 80094b0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80094b2:	2100      	movs	r1, #0
 80094b4:	f00b fcae 	bl	8014e14 <lv_bar_set_style>
 80094b8:	4a22      	ldr	r2, [pc, #136]	; (8009544 <update_main_screen+0x1174>)
 80094ba:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80094bc:	2101      	movs	r1, #1
 80094be:	f00b fca9 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[13], LV_BAR_STYLE_BG, &style_indic_cy); lv_bar_set_style(bar[13], LV_BAR_STYLE_INDIC, &style_indic_cy);
 80094c2:	4a21      	ldr	r2, [pc, #132]	; (8009548 <update_main_screen+0x1178>)
 80094c4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80094c6:	2100      	movs	r1, #0
 80094c8:	f00b fca4 	bl	8014e14 <lv_bar_set_style>
 80094cc:	4a1e      	ldr	r2, [pc, #120]	; (8009548 <update_main_screen+0x1178>)
 80094ce:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80094d0:	2101      	movs	r1, #1
 80094d2:	f00b fc9f 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[14], LV_BAR_STYLE_BG, &style_indic_am); lv_bar_set_style(bar[14], LV_BAR_STYLE_INDIC, &style_indic_am);
 80094d6:	4a1d      	ldr	r2, [pc, #116]	; (800954c <update_main_screen+0x117c>)
 80094d8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80094da:	2100      	movs	r1, #0
 80094dc:	f00b fc9a 	bl	8014e14 <lv_bar_set_style>
 80094e0:	4a1a      	ldr	r2, [pc, #104]	; (800954c <update_main_screen+0x117c>)
 80094e2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80094e4:	2101      	movs	r1, #1
 80094e6:	f00b fc95 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[15], LV_BAR_STYLE_BG, &style_indic_am); lv_bar_set_style(bar[15], LV_BAR_STYLE_INDIC, &style_indic_am);
 80094ea:	4a18      	ldr	r2, [pc, #96]	; (800954c <update_main_screen+0x117c>)
 80094ec:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80094ee:	2100      	movs	r1, #0
 80094f0:	f00b fc90 	bl	8014e14 <lv_bar_set_style>
 80094f4:	4a15      	ldr	r2, [pc, #84]	; (800954c <update_main_screen+0x117c>)
 80094f6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80094f8:	2101      	movs	r1, #1
 80094fa:	f00b fc8b 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[16], LV_BAR_STYLE_BG, &style_indic_am); lv_bar_set_style(bar[16], LV_BAR_STYLE_INDIC, &style_indic_am);
 80094fe:	4a13      	ldr	r2, [pc, #76]	; (800954c <update_main_screen+0x117c>)
 8009500:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8009502:	2100      	movs	r1, #0
 8009504:	f00b fc86 	bl	8014e14 <lv_bar_set_style>
 8009508:	4a10      	ldr	r2, [pc, #64]	; (800954c <update_main_screen+0x117c>)
 800950a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800950c:	2101      	movs	r1, #1
 800950e:	f00b fc81 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[17], LV_BAR_STYLE_BG, &style_indic_vm); lv_bar_set_style(bar[17], LV_BAR_STYLE_INDIC, &style_indic_vm);
 8009512:	4a0f      	ldr	r2, [pc, #60]	; (8009550 <update_main_screen+0x1180>)
 8009514:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8009516:	2100      	movs	r1, #0
 8009518:	f00b fc7c 	bl	8014e14 <lv_bar_set_style>
 800951c:	4a0c      	ldr	r2, [pc, #48]	; (8009550 <update_main_screen+0x1180>)
 800951e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8009520:	2101      	movs	r1, #1
 8009522:	f00b fc77 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[18], LV_BAR_STYLE_BG, &style_indic_vm); lv_bar_set_style(bar[18], LV_BAR_STYLE_INDIC, &style_indic_vm);
 8009526:	4a0a      	ldr	r2, [pc, #40]	; (8009550 <update_main_screen+0x1180>)
 8009528:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800952a:	2100      	movs	r1, #0
 800952c:	f00b fc72 	bl	8014e14 <lv_bar_set_style>
 8009530:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8009532:	4a07      	ldr	r2, [pc, #28]	; (8009550 <update_main_screen+0x1180>)
 8009534:	2101      	movs	r1, #1
 8009536:	f00b fc6d 	bl	8014e14 <lv_bar_set_style>
			bargraph_off(19);
 800953a:	2013      	movs	r0, #19
 800953c:	f7fe bfd8 	b.w	80084f0 <update_main_screen+0x120>
 8009540:	20004e14 	.word	0x20004e14
 8009544:	20004f64 	.word	0x20004f64
 8009548:	20004eec 	.word	0x20004eec
 800954c:	20004eb0 	.word	0x20004eb0
 8009550:	20004fa0 	.word	0x20004fa0
			lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009554:	4c68      	ldr	r4, [pc, #416]	; (80096f8 <update_main_screen+0x1328>)
 8009556:	4a69      	ldr	r2, [pc, #420]	; (80096fc <update_main_screen+0x132c>)
 8009558:	6820      	ldr	r0, [r4, #0]
 800955a:	2100      	movs	r1, #0
 800955c:	f00b fc5a 	bl	8014e14 <lv_bar_set_style>
 8009560:	6820      	ldr	r0, [r4, #0]
 8009562:	4a66      	ldr	r2, [pc, #408]	; (80096fc <update_main_screen+0x132c>)
 8009564:	2101      	movs	r1, #1
 8009566:	f00b fc55 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[1], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[1], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800956a:	6860      	ldr	r0, [r4, #4]
 800956c:	4a63      	ldr	r2, [pc, #396]	; (80096fc <update_main_screen+0x132c>)
 800956e:	2100      	movs	r1, #0
 8009570:	f00b fc50 	bl	8014e14 <lv_bar_set_style>
 8009574:	6860      	ldr	r0, [r4, #4]
 8009576:	4a61      	ldr	r2, [pc, #388]	; (80096fc <update_main_screen+0x132c>)
 8009578:	2101      	movs	r1, #1
 800957a:	f00b fc4b 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[2], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[2], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800957e:	68a0      	ldr	r0, [r4, #8]
 8009580:	4a5e      	ldr	r2, [pc, #376]	; (80096fc <update_main_screen+0x132c>)
 8009582:	2100      	movs	r1, #0
 8009584:	f00b fc46 	bl	8014e14 <lv_bar_set_style>
 8009588:	68a0      	ldr	r0, [r4, #8]
 800958a:	4a5c      	ldr	r2, [pc, #368]	; (80096fc <update_main_screen+0x132c>)
 800958c:	2101      	movs	r1, #1
 800958e:	f00b fc41 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[3], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[3], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009592:	68e0      	ldr	r0, [r4, #12]
 8009594:	4a59      	ldr	r2, [pc, #356]	; (80096fc <update_main_screen+0x132c>)
 8009596:	2100      	movs	r1, #0
 8009598:	f00b fc3c 	bl	8014e14 <lv_bar_set_style>
 800959c:	68e0      	ldr	r0, [r4, #12]
 800959e:	4a57      	ldr	r2, [pc, #348]	; (80096fc <update_main_screen+0x132c>)
 80095a0:	2101      	movs	r1, #1
 80095a2:	f00b fc37 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[4], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[4], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80095a6:	6920      	ldr	r0, [r4, #16]
 80095a8:	4a54      	ldr	r2, [pc, #336]	; (80096fc <update_main_screen+0x132c>)
 80095aa:	2100      	movs	r1, #0
 80095ac:	f00b fc32 	bl	8014e14 <lv_bar_set_style>
 80095b0:	6920      	ldr	r0, [r4, #16]
 80095b2:	4a52      	ldr	r2, [pc, #328]	; (80096fc <update_main_screen+0x132c>)
 80095b4:	2101      	movs	r1, #1
 80095b6:	f00b fc2d 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[5], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[5], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80095ba:	6960      	ldr	r0, [r4, #20]
 80095bc:	4a4f      	ldr	r2, [pc, #316]	; (80096fc <update_main_screen+0x132c>)
 80095be:	2100      	movs	r1, #0
 80095c0:	f00b fc28 	bl	8014e14 <lv_bar_set_style>
 80095c4:	6960      	ldr	r0, [r4, #20]
 80095c6:	4a4d      	ldr	r2, [pc, #308]	; (80096fc <update_main_screen+0x132c>)
 80095c8:	2101      	movs	r1, #1
 80095ca:	f00b fc23 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[6], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[6], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80095ce:	69a0      	ldr	r0, [r4, #24]
 80095d0:	4a4a      	ldr	r2, [pc, #296]	; (80096fc <update_main_screen+0x132c>)
 80095d2:	2100      	movs	r1, #0
 80095d4:	f00b fc1e 	bl	8014e14 <lv_bar_set_style>
 80095d8:	69a0      	ldr	r0, [r4, #24]
 80095da:	4a48      	ldr	r2, [pc, #288]	; (80096fc <update_main_screen+0x132c>)
 80095dc:	2101      	movs	r1, #1
 80095de:	f00b fc19 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[7], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[7], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80095e2:	69e0      	ldr	r0, [r4, #28]
 80095e4:	4a45      	ldr	r2, [pc, #276]	; (80096fc <update_main_screen+0x132c>)
 80095e6:	2100      	movs	r1, #0
 80095e8:	f00b fc14 	bl	8014e14 <lv_bar_set_style>
 80095ec:	69e0      	ldr	r0, [r4, #28]
 80095ee:	4a43      	ldr	r2, [pc, #268]	; (80096fc <update_main_screen+0x132c>)
 80095f0:	2101      	movs	r1, #1
 80095f2:	f00b fc0f 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[8], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[8], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80095f6:	6a20      	ldr	r0, [r4, #32]
 80095f8:	4a40      	ldr	r2, [pc, #256]	; (80096fc <update_main_screen+0x132c>)
 80095fa:	2100      	movs	r1, #0
 80095fc:	f00b fc0a 	bl	8014e14 <lv_bar_set_style>
 8009600:	6a20      	ldr	r0, [r4, #32]
 8009602:	4a3e      	ldr	r2, [pc, #248]	; (80096fc <update_main_screen+0x132c>)
 8009604:	2101      	movs	r1, #1
 8009606:	f00b fc05 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[9], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[9], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800960a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800960c:	4a3b      	ldr	r2, [pc, #236]	; (80096fc <update_main_screen+0x132c>)
 800960e:	2100      	movs	r1, #0
 8009610:	f00b fc00 	bl	8014e14 <lv_bar_set_style>
 8009614:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009616:	4a39      	ldr	r2, [pc, #228]	; (80096fc <update_main_screen+0x132c>)
 8009618:	2101      	movs	r1, #1
 800961a:	f00b fbfb 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[10], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[10], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800961e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8009620:	4a36      	ldr	r2, [pc, #216]	; (80096fc <update_main_screen+0x132c>)
 8009622:	2100      	movs	r1, #0
 8009624:	f00b fbf6 	bl	8014e14 <lv_bar_set_style>
 8009628:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800962a:	4a34      	ldr	r2, [pc, #208]	; (80096fc <update_main_screen+0x132c>)
 800962c:	2101      	movs	r1, #1
 800962e:	f00b fbf1 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[11], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[11], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009632:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009634:	4a31      	ldr	r2, [pc, #196]	; (80096fc <update_main_screen+0x132c>)
 8009636:	2100      	movs	r1, #0
 8009638:	f00b fbec 	bl	8014e14 <lv_bar_set_style>
 800963c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800963e:	4a2f      	ldr	r2, [pc, #188]	; (80096fc <update_main_screen+0x132c>)
 8009640:	2101      	movs	r1, #1
 8009642:	f00b fbe7 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[12], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[12], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009646:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8009648:	4a2c      	ldr	r2, [pc, #176]	; (80096fc <update_main_screen+0x132c>)
 800964a:	2100      	movs	r1, #0
 800964c:	f00b fbe2 	bl	8014e14 <lv_bar_set_style>
 8009650:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8009652:	4a2a      	ldr	r2, [pc, #168]	; (80096fc <update_main_screen+0x132c>)
 8009654:	2101      	movs	r1, #1
 8009656:	f00b fbdd 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[13], LV_BAR_STYLE_BG, &style_indic_cy); lv_bar_set_style(bar[13], LV_BAR_STYLE_INDIC, &style_indic_cy);
 800965a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800965c:	4a28      	ldr	r2, [pc, #160]	; (8009700 <update_main_screen+0x1330>)
 800965e:	2100      	movs	r1, #0
 8009660:	f00b fbd8 	bl	8014e14 <lv_bar_set_style>
 8009664:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8009666:	4a26      	ldr	r2, [pc, #152]	; (8009700 <update_main_screen+0x1330>)
 8009668:	2101      	movs	r1, #1
 800966a:	f00b fbd3 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[14], LV_BAR_STYLE_BG, &style_indic_am); lv_bar_set_style(bar[14], LV_BAR_STYLE_INDIC, &style_indic_am);
 800966e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8009670:	4a24      	ldr	r2, [pc, #144]	; (8009704 <update_main_screen+0x1334>)
 8009672:	2100      	movs	r1, #0
 8009674:	f00b fbce 	bl	8014e14 <lv_bar_set_style>
 8009678:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800967a:	4a22      	ldr	r2, [pc, #136]	; (8009704 <update_main_screen+0x1334>)
 800967c:	2101      	movs	r1, #1
 800967e:	f00b fbc9 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[15], LV_BAR_STYLE_BG, &style_indic_am); lv_bar_set_style(bar[15], LV_BAR_STYLE_INDIC, &style_indic_am);
 8009682:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8009684:	4a1f      	ldr	r2, [pc, #124]	; (8009704 <update_main_screen+0x1334>)
 8009686:	2100      	movs	r1, #0
 8009688:	f00b fbc4 	bl	8014e14 <lv_bar_set_style>
 800968c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800968e:	4a1d      	ldr	r2, [pc, #116]	; (8009704 <update_main_screen+0x1334>)
 8009690:	2101      	movs	r1, #1
 8009692:	f00b fbbf 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[16], LV_BAR_STYLE_BG, &style_indic_am); lv_bar_set_style(bar[16], LV_BAR_STYLE_INDIC, &style_indic_am);
 8009696:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8009698:	4a1a      	ldr	r2, [pc, #104]	; (8009704 <update_main_screen+0x1334>)
 800969a:	2100      	movs	r1, #0
 800969c:	f00b fbba 	bl	8014e14 <lv_bar_set_style>
 80096a0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80096a2:	4a18      	ldr	r2, [pc, #96]	; (8009704 <update_main_screen+0x1334>)
 80096a4:	2101      	movs	r1, #1
 80096a6:	f00b fbb5 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[17], LV_BAR_STYLE_BG, &style_indic_vm); lv_bar_set_style(bar[17], LV_BAR_STYLE_INDIC, &style_indic_vm);
 80096aa:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80096ac:	4a16      	ldr	r2, [pc, #88]	; (8009708 <update_main_screen+0x1338>)
 80096ae:	2100      	movs	r1, #0
 80096b0:	f00b fbb0 	bl	8014e14 <lv_bar_set_style>
 80096b4:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80096b6:	4a14      	ldr	r2, [pc, #80]	; (8009708 <update_main_screen+0x1338>)
 80096b8:	2101      	movs	r1, #1
 80096ba:	f00b fbab 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[18], LV_BAR_STYLE_BG, &style_indic_vm); lv_bar_set_style(bar[18], LV_BAR_STYLE_INDIC, &style_indic_vm);
 80096be:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80096c0:	4a11      	ldr	r2, [pc, #68]	; (8009708 <update_main_screen+0x1338>)
 80096c2:	2100      	movs	r1, #0
 80096c4:	f00b fba6 	bl	8014e14 <lv_bar_set_style>
 80096c8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80096ca:	4a0f      	ldr	r2, [pc, #60]	; (8009708 <update_main_screen+0x1338>)
 80096cc:	2101      	movs	r1, #1
 80096ce:	f00b fba1 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar[19], LV_BAR_STYLE_BG, &style_indic_vm); lv_bar_set_style(bar[19], LV_BAR_STYLE_INDIC, &style_indic_vm);
 80096d2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80096d4:	4a0c      	ldr	r2, [pc, #48]	; (8009708 <update_main_screen+0x1338>)
 80096d6:	2100      	movs	r1, #0
 80096d8:	f00b fb9c 	bl	8014e14 <lv_bar_set_style>
 80096dc:	4a0a      	ldr	r2, [pc, #40]	; (8009708 <update_main_screen+0x1338>)
 80096de:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80096e0:	2101      	movs	r1, #1
 80096e2:	f00b fb97 	bl	8014e14 <lv_bar_set_style>
 80096e6:	f7fe bf05 	b.w	80084f4 <update_main_screen+0x124>
		}
	}
	else {
		mpx--;
 80096ea:	682b      	ldr	r3, [r5, #0]
 80096ec:	3b01      	subs	r3, #1
 80096ee:	602b      	str	r3, [r5, #0]
		if(mpx == 0) {
 80096f0:	b903      	cbnz	r3, 80096f4 <update_main_screen+0x1324>
			sent_hor = 0;
 80096f2:	7013      	strb	r3, [r2, #0]
 80096f4:	bd38      	pop	{r3, r4, r5, pc}
 80096f6:	bf00      	nop
 80096f8:	20004e14 	.word	0x20004e14
 80096fc:	20004f64 	.word	0x20004f64
 8009700:	20004eec 	.word	0x20004eec
 8009704:	20004eb0 	.word	0x20004eb0
 8009708:	20004fa0 	.word	0x20004fa0

0800970c <btn_audio>:
	}
}

static void btn_audio(lv_obj_t * btn, lv_event_t event)
{
	if(event == LV_EVENT_RELEASED) {
 800970c:	2907      	cmp	r1, #7
{
 800970e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(event == LV_EVENT_RELEASED) {
 8009710:	d140      	bne.n	8009794 <btn_audio+0x88>
		uint32_t id = lv_obj_get_user_data(btn);
 8009712:	f005 ff72 	bl	800f5fa <lv_obj_get_user_data>
		logI("Button Audio %d Released\n" , id);
 8009716:	4601      	mov	r1, r0
		uint32_t id = lv_obj_get_user_data(btn);
 8009718:	4605      	mov	r5, r0
		logI("Button Audio %d Released\n" , id);
 800971a:	481f      	ldr	r0, [pc, #124]	; (8009798 <btn_audio+0x8c>)
 800971c:	4c1f      	ldr	r4, [pc, #124]	; (800979c <btn_audio+0x90>)
 800971e:	f7f7 ffa5 	bl	800166c <logI>
		switch(id) {
 8009722:	2d03      	cmp	r5, #3
 8009724:	d80e      	bhi.n	8009744 <btn_audio+0x38>
 8009726:	e8df f005 	tbb	[pc, r5]
 800972a:	1402      	.short	0x1402
 800972c:	2a1f      	.short	0x2a1f
			case 0:
				lv_obj_align(bar[1], NULL, LV_ALIGN_IN_TOP_LEFT, 131, 52);
 800972e:	2334      	movs	r3, #52	; 0x34
 8009730:	481b      	ldr	r0, [pc, #108]	; (80097a0 <btn_audio+0x94>)
 8009732:	9300      	str	r3, [sp, #0]
 8009734:	2201      	movs	r2, #1
 8009736:	2383      	movs	r3, #131	; 0x83
 8009738:	2100      	movs	r1, #0
 800973a:	6840      	ldr	r0, [r0, #4]
 800973c:	f005 f9a0 	bl	800ea80 <lv_obj_align>
				Cfg_Audio = 0;
 8009740:	2300      	movs	r3, #0
				lv_obj_align(bar[1], NULL, LV_ALIGN_IN_TOP_LEFT, 132, 92);
				Cfg_Audio = 2;
				break;
			case 3:
				lv_obj_align(bar[1], NULL, LV_ALIGN_IN_TOP_LEFT, 132, 111);
				Cfg_Audio = 3;
 8009742:	7023      	strb	r3, [r4, #0]
				break;
		}
		logI("Cfg_Audio: %d\n", Cfg_Audio);
 8009744:	7821      	ldrb	r1, [r4, #0]
 8009746:	4817      	ldr	r0, [pc, #92]	; (80097a4 <btn_audio+0x98>)
	}
}
 8009748:	b003      	add	sp, #12
 800974a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		logI("Cfg_Audio: %d\n", Cfg_Audio);
 800974e:	f7f7 bf8d 	b.w	800166c <logI>
				lv_obj_align(bar[1], NULL, LV_ALIGN_IN_TOP_LEFT, 132, 72);
 8009752:	2348      	movs	r3, #72	; 0x48
 8009754:	4812      	ldr	r0, [pc, #72]	; (80097a0 <btn_audio+0x94>)
 8009756:	9300      	str	r3, [sp, #0]
 8009758:	2201      	movs	r2, #1
 800975a:	2384      	movs	r3, #132	; 0x84
 800975c:	2100      	movs	r1, #0
 800975e:	6840      	ldr	r0, [r0, #4]
 8009760:	f005 f98e 	bl	800ea80 <lv_obj_align>
				Cfg_Audio = 1;
 8009764:	2301      	movs	r3, #1
 8009766:	e7ec      	b.n	8009742 <btn_audio+0x36>
				lv_obj_align(bar[1], NULL, LV_ALIGN_IN_TOP_LEFT, 132, 92);
 8009768:	235c      	movs	r3, #92	; 0x5c
 800976a:	480d      	ldr	r0, [pc, #52]	; (80097a0 <btn_audio+0x94>)
 800976c:	9300      	str	r3, [sp, #0]
 800976e:	2201      	movs	r2, #1
 8009770:	2384      	movs	r3, #132	; 0x84
 8009772:	2100      	movs	r1, #0
 8009774:	6840      	ldr	r0, [r0, #4]
 8009776:	f005 f983 	bl	800ea80 <lv_obj_align>
				Cfg_Audio = 2;
 800977a:	2302      	movs	r3, #2
 800977c:	e7e1      	b.n	8009742 <btn_audio+0x36>
				lv_obj_align(bar[1], NULL, LV_ALIGN_IN_TOP_LEFT, 132, 111);
 800977e:	236f      	movs	r3, #111	; 0x6f
 8009780:	4807      	ldr	r0, [pc, #28]	; (80097a0 <btn_audio+0x94>)
 8009782:	9300      	str	r3, [sp, #0]
 8009784:	2201      	movs	r2, #1
 8009786:	2384      	movs	r3, #132	; 0x84
 8009788:	2100      	movs	r1, #0
 800978a:	6840      	ldr	r0, [r0, #4]
 800978c:	f005 f978 	bl	800ea80 <lv_obj_align>
				Cfg_Audio = 3;
 8009790:	2303      	movs	r3, #3
 8009792:	e7d6      	b.n	8009742 <btn_audio+0x36>
}
 8009794:	b003      	add	sp, #12
 8009796:	bd30      	pop	{r4, r5, pc}
 8009798:	0802b4ea 	.word	0x0802b4ea
 800979c:	200033da 	.word	0x200033da
 80097a0:	2000517c 	.word	0x2000517c
 80097a4:	0802b504 	.word	0x0802b504

080097a8 <btn_stereo>:
	if(event == LV_EVENT_RELEASED) {
 80097a8:	2907      	cmp	r1, #7
{
 80097aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(event == LV_EVENT_RELEASED) {
 80097ac:	d127      	bne.n	80097fe <btn_stereo+0x56>
		uint32_t id = lv_obj_get_user_data(btn);
 80097ae:	f005 ff24 	bl	800f5fa <lv_obj_get_user_data>
		logI("Button Stereo %d Released\n" , id);
 80097b2:	4601      	mov	r1, r0
		uint32_t id = lv_obj_get_user_data(btn);
 80097b4:	4604      	mov	r4, r0
		logI("Button Stereo %d Released\n" , id);
 80097b6:	4813      	ldr	r0, [pc, #76]	; (8009804 <btn_stereo+0x5c>)
 80097b8:	4d13      	ldr	r5, [pc, #76]	; (8009808 <btn_stereo+0x60>)
 80097ba:	f7f7 ff57 	bl	800166c <logI>
		if(id == 0) {
 80097be:	b98c      	cbnz	r4, 80097e4 <btn_stereo+0x3c>
			lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 68);
 80097c0:	2344      	movs	r3, #68	; 0x44
 80097c2:	4812      	ldr	r0, [pc, #72]	; (800980c <btn_stereo+0x64>)
 80097c4:	9300      	str	r3, [sp, #0]
 80097c6:	2201      	movs	r2, #1
 80097c8:	2336      	movs	r3, #54	; 0x36
 80097ca:	4621      	mov	r1, r4
 80097cc:	6800      	ldr	r0, [r0, #0]
 80097ce:	f005 f957 	bl	800ea80 <lv_obj_align>
			Cfg_Stereo = 1;
 80097d2:	2301      	movs	r3, #1
			Cfg_Stereo = 0;
 80097d4:	702b      	strb	r3, [r5, #0]
		logI("Cfg_Stereo: %d\n", Cfg_Stereo);
 80097d6:	7829      	ldrb	r1, [r5, #0]
 80097d8:	480d      	ldr	r0, [pc, #52]	; (8009810 <btn_stereo+0x68>)
}
 80097da:	b003      	add	sp, #12
 80097dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		logI("Cfg_Stereo: %d\n", Cfg_Stereo);
 80097e0:	f7f7 bf44 	b.w	800166c <logI>
		else if(id == 1) {
 80097e4:	2c01      	cmp	r4, #1
 80097e6:	d1f6      	bne.n	80097d6 <btn_stereo+0x2e>
			lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 88);
 80097e8:	2358      	movs	r3, #88	; 0x58
 80097ea:	4808      	ldr	r0, [pc, #32]	; (800980c <btn_stereo+0x64>)
 80097ec:	9300      	str	r3, [sp, #0]
 80097ee:	4622      	mov	r2, r4
 80097f0:	2336      	movs	r3, #54	; 0x36
 80097f2:	2100      	movs	r1, #0
 80097f4:	6800      	ldr	r0, [r0, #0]
 80097f6:	f005 f943 	bl	800ea80 <lv_obj_align>
			Cfg_Stereo = 0;
 80097fa:	2300      	movs	r3, #0
 80097fc:	e7ea      	b.n	80097d4 <btn_stereo+0x2c>
}
 80097fe:	b003      	add	sp, #12
 8009800:	bd30      	pop	{r4, r5, pc}
 8009802:	bf00      	nop
 8009804:	0802b620 	.word	0x0802b620
 8009808:	20000000 	.word	0x20000000
 800980c:	2000517c 	.word	0x2000517c
 8009810:	0802b63b 	.word	0x0802b63b

08009814 <btn_processador>:
	}
}

static void btn_processador(lv_obj_t * btn, lv_event_t event)
{
	if(event == LV_EVENT_RELEASED) {
 8009814:	2907      	cmp	r1, #7
{
 8009816:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(event == LV_EVENT_RELEASED) {
 8009818:	d127      	bne.n	800986a <btn_processador+0x56>
		uint32_t id = lv_obj_get_user_data(btn);
 800981a:	f005 feee 	bl	800f5fa <lv_obj_get_user_data>
		logI("Button Processador %d Released\n" , id);
 800981e:	4601      	mov	r1, r0
		uint32_t id = lv_obj_get_user_data(btn);
 8009820:	4604      	mov	r4, r0
		logI("Button Processador %d Released\n" , id);
 8009822:	4813      	ldr	r0, [pc, #76]	; (8009870 <btn_processador+0x5c>)
 8009824:	4d13      	ldr	r5, [pc, #76]	; (8009874 <btn_processador+0x60>)
 8009826:	f7f7 ff21 	bl	800166c <logI>
		if(id == 0) {
 800982a:	b98c      	cbnz	r4, 8009850 <btn_processador+0x3c>
			lv_obj_align(bar[1], NULL, LV_ALIGN_IN_TOP_LEFT, 132, 68);
 800982c:	2344      	movs	r3, #68	; 0x44
 800982e:	4812      	ldr	r0, [pc, #72]	; (8009878 <btn_processador+0x64>)
 8009830:	9300      	str	r3, [sp, #0]
 8009832:	2201      	movs	r2, #1
 8009834:	2384      	movs	r3, #132	; 0x84
 8009836:	4621      	mov	r1, r4
 8009838:	6840      	ldr	r0, [r0, #4]
 800983a:	f005 f921 	bl	800ea80 <lv_obj_align>
			Cfg_Processador = 1;
 800983e:	2301      	movs	r3, #1
		}
		else if(id == 1) {
			lv_obj_align(bar[1], NULL, LV_ALIGN_IN_TOP_LEFT, 132, 88);
			Cfg_Processador = 0;
 8009840:	702b      	strb	r3, [r5, #0]
		}
		logI("Cfg_Processador: %d\n", Cfg_Processador);
 8009842:	7829      	ldrb	r1, [r5, #0]
 8009844:	480d      	ldr	r0, [pc, #52]	; (800987c <btn_processador+0x68>)
	}
}
 8009846:	b003      	add	sp, #12
 8009848:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		logI("Cfg_Processador: %d\n", Cfg_Processador);
 800984c:	f7f7 bf0e 	b.w	800166c <logI>
		else if(id == 1) {
 8009850:	2c01      	cmp	r4, #1
 8009852:	d1f6      	bne.n	8009842 <btn_processador+0x2e>
			lv_obj_align(bar[1], NULL, LV_ALIGN_IN_TOP_LEFT, 132, 88);
 8009854:	2358      	movs	r3, #88	; 0x58
 8009856:	4808      	ldr	r0, [pc, #32]	; (8009878 <btn_processador+0x64>)
 8009858:	9300      	str	r3, [sp, #0]
 800985a:	4622      	mov	r2, r4
 800985c:	2384      	movs	r3, #132	; 0x84
 800985e:	2100      	movs	r1, #0
 8009860:	6840      	ldr	r0, [r0, #4]
 8009862:	f005 f90d 	bl	800ea80 <lv_obj_align>
			Cfg_Processador = 0;
 8009866:	2300      	movs	r3, #0
 8009868:	e7ea      	b.n	8009840 <btn_processador+0x2c>
}
 800986a:	b003      	add	sp, #12
 800986c:	bd30      	pop	{r4, r5, pc}
 800986e:	bf00      	nop
 8009870:	0802b5eb 	.word	0x0802b5eb
 8009874:	200033dd 	.word	0x200033dd
 8009878:	2000517c 	.word	0x2000517c
 800987c:	0802b60b 	.word	0x0802b60b

08009880 <btn_emphase>:
	if(event == LV_EVENT_RELEASED) {
 8009880:	2907      	cmp	r1, #7
{
 8009882:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(event == LV_EVENT_RELEASED) {
 8009884:	d127      	bne.n	80098d6 <btn_emphase+0x56>
		uint32_t id = lv_obj_get_user_data(btn);
 8009886:	f005 feb8 	bl	800f5fa <lv_obj_get_user_data>
		logI("Button Emphase %d Released\n" , id);
 800988a:	4601      	mov	r1, r0
		uint32_t id = lv_obj_get_user_data(btn);
 800988c:	4604      	mov	r4, r0
		logI("Button Emphase %d Released\n" , id);
 800988e:	4813      	ldr	r0, [pc, #76]	; (80098dc <btn_emphase+0x5c>)
 8009890:	4d13      	ldr	r5, [pc, #76]	; (80098e0 <btn_emphase+0x60>)
 8009892:	f7f7 feeb 	bl	800166c <logI>
		if(id == 0) {
 8009896:	b98c      	cbnz	r4, 80098bc <btn_emphase+0x3c>
			lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 68);
 8009898:	2344      	movs	r3, #68	; 0x44
 800989a:	4812      	ldr	r0, [pc, #72]	; (80098e4 <btn_emphase+0x64>)
 800989c:	9300      	str	r3, [sp, #0]
 800989e:	2201      	movs	r2, #1
 80098a0:	2336      	movs	r3, #54	; 0x36
 80098a2:	4621      	mov	r1, r4
 80098a4:	6800      	ldr	r0, [r0, #0]
 80098a6:	f005 f8eb 	bl	800ea80 <lv_obj_align>
			Cfg_Emphase = 1;
 80098aa:	2301      	movs	r3, #1
			Cfg_Emphase = 0;
 80098ac:	702b      	strb	r3, [r5, #0]
		logI("Cfg_Emphase: %d\n", Cfg_Emphase);
 80098ae:	7829      	ldrb	r1, [r5, #0]
 80098b0:	480d      	ldr	r0, [pc, #52]	; (80098e8 <btn_emphase+0x68>)
}
 80098b2:	b003      	add	sp, #12
 80098b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		logI("Cfg_Emphase: %d\n", Cfg_Emphase);
 80098b8:	f7f7 bed8 	b.w	800166c <logI>
		else if(id == 1) {
 80098bc:	2c01      	cmp	r4, #1
 80098be:	d1f6      	bne.n	80098ae <btn_emphase+0x2e>
			lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 88);
 80098c0:	2358      	movs	r3, #88	; 0x58
 80098c2:	4808      	ldr	r0, [pc, #32]	; (80098e4 <btn_emphase+0x64>)
 80098c4:	9300      	str	r3, [sp, #0]
 80098c6:	4622      	mov	r2, r4
 80098c8:	2336      	movs	r3, #54	; 0x36
 80098ca:	2100      	movs	r1, #0
 80098cc:	6800      	ldr	r0, [r0, #0]
 80098ce:	f005 f8d7 	bl	800ea80 <lv_obj_align>
			Cfg_Emphase = 0;
 80098d2:	2300      	movs	r3, #0
 80098d4:	e7ea      	b.n	80098ac <btn_emphase+0x2c>
}
 80098d6:	b003      	add	sp, #12
 80098d8:	bd30      	pop	{r4, r5, pc}
 80098da:	bf00      	nop
 80098dc:	0802b540 	.word	0x0802b540
 80098e0:	200033dc 	.word	0x200033dc
 80098e4:	2000517c 	.word	0x2000517c
 80098e8:	0802b55c 	.word	0x0802b55c

080098ec <btn_mp3>:
	}
}

static void btn_mp3(lv_obj_t * btn, lv_event_t event)
{
	if(event == LV_EVENT_RELEASED) {
 80098ec:	2907      	cmp	r1, #7
{
 80098ee:	b510      	push	{r4, lr}
	if(event == LV_EVENT_RELEASED) {
 80098f0:	d12c      	bne.n	800994c <btn_mp3+0x60>
		uint32_t id = lv_obj_get_user_data(btn);
 80098f2:	f005 fe82 	bl	800f5fa <lv_obj_get_user_data>
 80098f6:	4604      	mov	r4, r0
		logI("Button MP3 %d Released\n" , id);
 80098f8:	4601      	mov	r1, r0
 80098fa:	4815      	ldr	r0, [pc, #84]	; (8009950 <btn_mp3+0x64>)
 80098fc:	f7f7 feb6 	bl	800166c <logI>
		switch(id) {
 8009900:	2c03      	cmp	r4, #3
 8009902:	d813      	bhi.n	800992c <btn_mp3+0x40>
 8009904:	e8df f004 	tbb	[pc, r4]
 8009908:	1d180802 	.word	0x1d180802
			case 0:
				logI("MP3 Function: PREV\n");
 800990c:	4811      	ldr	r0, [pc, #68]	; (8009954 <btn_mp3+0x68>)
 800990e:	f7f7 fead 	bl	800166c <logI>
				mp3_status = 3;
 8009912:	2203      	movs	r2, #3
				logI("MP3 Function: NEXT\n");
				mp3_status = 4;
				break;
			case 3:
				logI("MP3 Function: STOP\n");
				mp3_status = 0;
 8009914:	4b10      	ldr	r3, [pc, #64]	; (8009958 <btn_mp3+0x6c>)
 8009916:	e008      	b.n	800992a <btn_mp3+0x3e>
				logI("MP3 Function: PLAY-PAUSE\n");
 8009918:	4810      	ldr	r0, [pc, #64]	; (800995c <btn_mp3+0x70>)
 800991a:	f7f7 fea7 	bl	800166c <logI>
				if(mp3_status == 1) mp3_status = 2;
 800991e:	4b0e      	ldr	r3, [pc, #56]	; (8009958 <btn_mp3+0x6c>)
 8009920:	781a      	ldrb	r2, [r3, #0]
 8009922:	2a01      	cmp	r2, #1
 8009924:	bf0c      	ite	eq
 8009926:	2202      	moveq	r2, #2
				else mp3_status = 1;
 8009928:	2201      	movne	r2, #1
				mp3_status = 0;
 800992a:	701a      	strb	r2, [r3, #0]
				break;
		}
		logI("MP3 Button: %d\n", id);
 800992c:	4621      	mov	r1, r4
 800992e:	480c      	ldr	r0, [pc, #48]	; (8009960 <btn_mp3+0x74>)
	}
}
 8009930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		logI("MP3 Button: %d\n", id);
 8009934:	f7f7 be9a 	b.w	800166c <logI>
				logI("MP3 Function: NEXT\n");
 8009938:	480a      	ldr	r0, [pc, #40]	; (8009964 <btn_mp3+0x78>)
 800993a:	f7f7 fe97 	bl	800166c <logI>
				mp3_status = 4;
 800993e:	2204      	movs	r2, #4
 8009940:	e7e8      	b.n	8009914 <btn_mp3+0x28>
				logI("MP3 Function: STOP\n");
 8009942:	4809      	ldr	r0, [pc, #36]	; (8009968 <btn_mp3+0x7c>)
 8009944:	f7f7 fe92 	bl	800166c <logI>
				mp3_status = 0;
 8009948:	2200      	movs	r2, #0
 800994a:	e7e3      	b.n	8009914 <btn_mp3+0x28>
 800994c:	bd10      	pop	{r4, pc}
 800994e:	bf00      	nop
 8009950:	0802b56d 	.word	0x0802b56d
 8009954:	0802b585 	.word	0x0802b585
 8009958:	20004dd4 	.word	0x20004dd4
 800995c:	0802b599 	.word	0x0802b599
 8009960:	0802b5db 	.word	0x0802b5db
 8009964:	0802b5b3 	.word	0x0802b5b3
 8009968:	0802b5c7 	.word	0x0802b5c7

0800996c <btn_clipper>:
	if(event == LV_EVENT_RELEASED) {
 800996c:	2907      	cmp	r1, #7
{
 800996e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(event == LV_EVENT_RELEASED) {
 8009970:	d127      	bne.n	80099c2 <btn_clipper+0x56>
		uint32_t id = lv_obj_get_user_data(btn);
 8009972:	f005 fe42 	bl	800f5fa <lv_obj_get_user_data>
		logI("Button Clipper %d Released\n" , id);
 8009976:	4601      	mov	r1, r0
		uint32_t id = lv_obj_get_user_data(btn);
 8009978:	4604      	mov	r4, r0
		logI("Button Clipper %d Released\n" , id);
 800997a:	4813      	ldr	r0, [pc, #76]	; (80099c8 <btn_clipper+0x5c>)
 800997c:	4d13      	ldr	r5, [pc, #76]	; (80099cc <btn_clipper+0x60>)
 800997e:	f7f7 fe75 	bl	800166c <logI>
		if(id == 0) {
 8009982:	b98c      	cbnz	r4, 80099a8 <btn_clipper+0x3c>
			lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 68);
 8009984:	2344      	movs	r3, #68	; 0x44
 8009986:	4812      	ldr	r0, [pc, #72]	; (80099d0 <btn_clipper+0x64>)
 8009988:	9300      	str	r3, [sp, #0]
 800998a:	2201      	movs	r2, #1
 800998c:	2336      	movs	r3, #54	; 0x36
 800998e:	4621      	mov	r1, r4
 8009990:	6800      	ldr	r0, [r0, #0]
 8009992:	f005 f875 	bl	800ea80 <lv_obj_align>
			Cfg_Clipper = 1;
 8009996:	2301      	movs	r3, #1
			Cfg_Clipper = 0;
 8009998:	702b      	strb	r3, [r5, #0]
		logI("Cfg_Clipper: %d\n", Cfg_Clipper);
 800999a:	7829      	ldrb	r1, [r5, #0]
 800999c:	480d      	ldr	r0, [pc, #52]	; (80099d4 <btn_clipper+0x68>)
}
 800999e:	b003      	add	sp, #12
 80099a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		logI("Cfg_Clipper: %d\n", Cfg_Clipper);
 80099a4:	f7f7 be62 	b.w	800166c <logI>
		else if(id == 1) {
 80099a8:	2c01      	cmp	r4, #1
 80099aa:	d1f6      	bne.n	800999a <btn_clipper+0x2e>
			lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 88);
 80099ac:	2358      	movs	r3, #88	; 0x58
 80099ae:	4808      	ldr	r0, [pc, #32]	; (80099d0 <btn_clipper+0x64>)
 80099b0:	9300      	str	r3, [sp, #0]
 80099b2:	4622      	mov	r2, r4
 80099b4:	2336      	movs	r3, #54	; 0x36
 80099b6:	2100      	movs	r1, #0
 80099b8:	6800      	ldr	r0, [r0, #0]
 80099ba:	f005 f861 	bl	800ea80 <lv_obj_align>
			Cfg_Clipper = 0;
 80099be:	2300      	movs	r3, #0
 80099c0:	e7ea      	b.n	8009998 <btn_clipper+0x2c>
}
 80099c2:	b003      	add	sp, #12
 80099c4:	bd30      	pop	{r4, r5, pc}
 80099c6:	bf00      	nop
 80099c8:	0802b513 	.word	0x0802b513
 80099cc:	200033db 	.word	0x200033db
 80099d0:	2000517c 	.word	0x2000517c
 80099d4:	0802b52f 	.word	0x0802b52f

080099d8 <btn_event_esc>:
	if(event == LV_EVENT_APPLY) {
 80099d8:	2911      	cmp	r1, #17
{
 80099da:	b508      	push	{r3, lr}
	if(event == LV_EVENT_APPLY) {
 80099dc:	d107      	bne.n	80099ee <btn_event_esc+0x16>
		lv_obj_del(Tela_Audio);
 80099de:	4b04      	ldr	r3, [pc, #16]	; (80099f0 <btn_event_esc+0x18>)
 80099e0:	6818      	ldr	r0, [r3, #0]
 80099e2:	f005 fc60 	bl	800f2a6 <lv_obj_del>
}
 80099e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_sel();
 80099ea:	f004 b909 	b.w	800dc00 <screen_sel>
 80099ee:	bd08      	pop	{r3, pc}
 80099f0:	20005170 	.word	0x20005170

080099f4 <btn_next>:
{
 80099f4:	b538      	push	{r3, r4, r5, lr}
	imgbtn_next[0] = lv_imgbtn_create(Tela_Audio, NULL);
 80099f6:	4b15      	ldr	r3, [pc, #84]	; (8009a4c <btn_next+0x58>)
	lv_imgbtn_set_src(imgbtn_next[0], LV_BTN_STATE_REL, &Btn_next);
 80099f8:	4d15      	ldr	r5, [pc, #84]	; (8009a50 <btn_next+0x5c>)
	imgbtn_next[0] = lv_imgbtn_create(Tela_Audio, NULL);
 80099fa:	6818      	ldr	r0, [r3, #0]
 80099fc:	4c15      	ldr	r4, [pc, #84]	; (8009a54 <btn_next+0x60>)
 80099fe:	2100      	movs	r1, #0
 8009a00:	f00d fa8c 	bl	8016f1c <lv_imgbtn_create>
	lv_imgbtn_set_src(imgbtn_next[0], LV_BTN_STATE_REL, &Btn_next);
 8009a04:	462a      	mov	r2, r5
 8009a06:	2100      	movs	r1, #0
	imgbtn_next[0] = lv_imgbtn_create(Tela_Audio, NULL);
 8009a08:	6020      	str	r0, [r4, #0]
	lv_imgbtn_set_src(imgbtn_next[0], LV_BTN_STATE_REL, &Btn_next);
 8009a0a:	f00d facf 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next[0], LV_BTN_STATE_TGL_REL, &Btn_next);
 8009a0e:	462a      	mov	r2, r5
 8009a10:	6820      	ldr	r0, [r4, #0]
 8009a12:	2102      	movs	r1, #2
 8009a14:	f00d faca 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next[0], LV_BTN_STATE_TGL_PR, &Btn_next);
 8009a18:	462a      	mov	r2, r5
 8009a1a:	6820      	ldr	r0, [r4, #0]
 8009a1c:	2103      	movs	r1, #3
 8009a1e:	f00d fac5 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next[0], LV_BTN_STATE_PR, &Btn_next);
 8009a22:	462a      	mov	r2, r5
 8009a24:	6820      	ldr	r0, [r4, #0]
 8009a26:	2101      	movs	r1, #1
 8009a28:	f00d fac0 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next[0], LV_BTN_STATE_INA, &Btn_next);
 8009a2c:	462a      	mov	r2, r5
 8009a2e:	6820      	ldr	r0, [r4, #0]
 8009a30:	2104      	movs	r1, #4
 8009a32:	f00d fabb 	bl	8016fac <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn_next[0], btn_event_next);
 8009a36:	6820      	ldr	r0, [r4, #0]
 8009a38:	4907      	ldr	r1, [pc, #28]	; (8009a58 <btn_next+0x64>)
 8009a3a:	f004 fe82 	bl	800e742 <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn_next[0], 112, 18);
 8009a3e:	6820      	ldr	r0, [r4, #0]
 8009a40:	2212      	movs	r2, #18
 8009a42:	2170      	movs	r1, #112	; 0x70
}
 8009a44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lv_obj_set_pos(imgbtn_next[0], 112, 18);
 8009a48:	f004 bfc5 	b.w	800e9d6 <lv_obj_set_pos>
 8009a4c:	20005170 	.word	0x20005170
 8009a50:	20001ad8 	.word	0x20001ad8
 8009a54:	200051a0 	.word	0x200051a0
 8009a58:	0800a369 	.word	0x0800a369

08009a5c <screen_audio>:
{
 8009a5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	Tela_Audio = lv_obj_create(NULL, NULL);
 8009a5e:	2100      	movs	r1, #0
 8009a60:	4608      	mov	r0, r1
 8009a62:	f005 fa2f 	bl	800eec4 <lv_obj_create>
 8009a66:	4fbe      	ldr	r7, [pc, #760]	; (8009d60 <screen_audio+0x304>)
	img_fundo = lv_img_create(Tela_Audio, NULL);
 8009a68:	4cbe      	ldr	r4, [pc, #760]	; (8009d64 <screen_audio+0x308>)
	Tela_Audio = lv_obj_create(NULL, NULL);
 8009a6a:	6038      	str	r0, [r7, #0]
	img_fundo = lv_img_create(Tela_Audio, NULL);
 8009a6c:	2100      	movs	r1, #0
 8009a6e:	f00d f92b 	bl	8016cc8 <lv_img_create>
    lv_img_set_src(img_fundo, &tela_audio);
 8009a72:	49bd      	ldr	r1, [pc, #756]	; (8009d68 <screen_audio+0x30c>)
	img_fundo = lv_img_create(Tela_Audio, NULL);
 8009a74:	6020      	str	r0, [r4, #0]
    lv_img_set_src(img_fundo, &tela_audio);
 8009a76:	f00d f897 	bl	8016ba8 <lv_img_set_src>
    lv_obj_set_protect(img_fundo, LV_PROTECT_POS);
 8009a7a:	6820      	ldr	r0, [r4, #0]
	lv_style_copy(&style_indic_vd, &lv_style_pretty);
 8009a7c:	4dbb      	ldr	r5, [pc, #748]	; (8009d6c <screen_audio+0x310>)
	lv_style_copy(&style_indic_am, &lv_style_pretty);
 8009a7e:	4ebc      	ldr	r6, [pc, #752]	; (8009d70 <screen_audio+0x314>)
    lv_obj_set_protect(img_fundo, LV_PROTECT_POS);
 8009a80:	2104      	movs	r1, #4
 8009a82:	f004 fe51 	bl	800e728 <lv_obj_set_protect>
	lv_obj_set_event_cb(img_fundo, btn_event_esc);
 8009a86:	6820      	ldr	r0, [r4, #0]
 8009a88:	49ba      	ldr	r1, [pc, #744]	; (8009d74 <screen_audio+0x318>)
 8009a8a:	f004 fe5a 	bl	800e742 <lv_obj_set_event_cb>
	lv_obj_set_click(img_fundo, 1);
 8009a8e:	6820      	ldr	r0, [r4, #0]
 8009a90:	2101      	movs	r1, #1
 8009a92:	f004 fe2d 	bl	800e6f0 <lv_obj_set_click>
	btn_next();
 8009a96:	f7ff ffad 	bl	80099f4 <btn_next>
	lv_style_copy(&style_indic_vd, &lv_style_pretty);
 8009a9a:	4628      	mov	r0, r5
 8009a9c:	49b6      	ldr	r1, [pc, #728]	; (8009d78 <screen_audio+0x31c>)
 8009a9e:	f006 f8ed 	bl	800fc7c <lv_style_copy>
	style_indic_vd.body.grad_color = LV_COLOR_LIME;
 8009aa2:	792b      	ldrb	r3, [r5, #4]
	lv_style_copy(&style_indic_am, &lv_style_pretty);
 8009aa4:	49b4      	ldr	r1, [pc, #720]	; (8009d78 <screen_audio+0x31c>)
	style_indic_vd.body.radius = 0;
 8009aa6:	2400      	movs	r4, #0
	style_indic_vd.body.grad_color = LV_COLOR_LIME;
 8009aa8:	f364 0304 	bfi	r3, r4, #0, #5
 8009aac:	712b      	strb	r3, [r5, #4]
 8009aae:	88ab      	ldrh	r3, [r5, #4]
	style_indic_vd.body.radius = 0;
 8009ab0:	80ec      	strh	r4, [r5, #6]
	style_indic_vd.body.grad_color = LV_COLOR_LIME;
 8009ab2:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 8009ab6:	80ab      	strh	r3, [r5, #4]
 8009ab8:	0a1b      	lsrs	r3, r3, #8
 8009aba:	f364 03c7 	bfi	r3, r4, #3, #5
 8009abe:	716b      	strb	r3, [r5, #5]
	style_indic_vd.body.main_color = LV_COLOR_LIME;
 8009ac0:	78ab      	ldrb	r3, [r5, #2]
 8009ac2:	f364 0304 	bfi	r3, r4, #0, #5
 8009ac6:	70ab      	strb	r3, [r5, #2]
 8009ac8:	886b      	ldrh	r3, [r5, #2]
 8009aca:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 8009ace:	806b      	strh	r3, [r5, #2]
 8009ad0:	0a1b      	lsrs	r3, r3, #8
 8009ad2:	f364 03c7 	bfi	r3, r4, #3, #5
 8009ad6:	70eb      	strb	r3, [r5, #3]
	style_indic_vd.body.border.color = LV_COLOR_LIME;
 8009ad8:	7aab      	ldrb	r3, [r5, #10]
 8009ada:	f364 0304 	bfi	r3, r4, #0, #5
 8009ade:	72ab      	strb	r3, [r5, #10]
 8009ae0:	896b      	ldrh	r3, [r5, #10]
 8009ae2:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 8009ae6:	816b      	strh	r3, [r5, #10]
 8009ae8:	0a1b      	lsrs	r3, r3, #8
 8009aea:	f364 03c7 	bfi	r3, r4, #3, #5
 8009aee:	72eb      	strb	r3, [r5, #11]
	lv_style_copy(&style_indic_am, &lv_style_pretty);
 8009af0:	4630      	mov	r0, r6
 8009af2:	f006 f8c3 	bl	800fc7c <lv_style_copy>
	style_indic_am.body.grad_color = LV_COLOR_YELLOW;
 8009af6:	7933      	ldrb	r3, [r6, #4]
	style_indic_am.body.radius = 0;
 8009af8:	80f4      	strh	r4, [r6, #6]
	style_indic_am.body.grad_color = LV_COLOR_YELLOW;
 8009afa:	f364 0304 	bfi	r3, r4, #0, #5
 8009afe:	7133      	strb	r3, [r6, #4]
 8009b00:	88b3      	ldrh	r3, [r6, #4]
	lv_style_copy(&style_indic, &lv_style_pretty);
 8009b02:	499d      	ldr	r1, [pc, #628]	; (8009d78 <screen_audio+0x31c>)
	style_indic_am.body.grad_color = LV_COLOR_YELLOW;
 8009b04:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 8009b08:	80b3      	strh	r3, [r6, #4]
 8009b0a:	0a1b      	lsrs	r3, r3, #8
 8009b0c:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 8009b10:	7173      	strb	r3, [r6, #5]
	style_indic_am.body.main_color = LV_COLOR_YELLOW;
 8009b12:	78b3      	ldrb	r3, [r6, #2]
 8009b14:	f364 0304 	bfi	r3, r4, #0, #5
 8009b18:	70b3      	strb	r3, [r6, #2]
 8009b1a:	8873      	ldrh	r3, [r6, #2]
 8009b1c:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 8009b20:	8073      	strh	r3, [r6, #2]
 8009b22:	0a1b      	lsrs	r3, r3, #8
 8009b24:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 8009b28:	70f3      	strb	r3, [r6, #3]
	style_indic_am.body.border.color = LV_COLOR_YELLOW;
 8009b2a:	7ab3      	ldrb	r3, [r6, #10]
 8009b2c:	f364 0304 	bfi	r3, r4, #0, #5
 8009b30:	72b3      	strb	r3, [r6, #10]
 8009b32:	8973      	ldrh	r3, [r6, #10]
 8009b34:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 8009b38:	8173      	strh	r3, [r6, #10]
 8009b3a:	0a1b      	lsrs	r3, r3, #8
 8009b3c:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 8009b40:	72f3      	strb	r3, [r6, #11]
	lv_style_copy(&style_indic, &lv_style_pretty);
 8009b42:	4e8e      	ldr	r6, [pc, #568]	; (8009d7c <screen_audio+0x320>)
 8009b44:	4630      	mov	r0, r6
 8009b46:	f006 f899 	bl	800fc7c <lv_style_copy>
	style_indic.body.grad_color = LV_COLOR_BLACK;
 8009b4a:	7933      	ldrb	r3, [r6, #4]
	style_indic.body.radius = 0;
 8009b4c:	80f4      	strh	r4, [r6, #6]
	style_indic.body.grad_color = LV_COLOR_BLACK;
 8009b4e:	f364 0304 	bfi	r3, r4, #0, #5
 8009b52:	7133      	strb	r3, [r6, #4]
 8009b54:	88b3      	ldrh	r3, [r6, #4]
 8009b56:	f364 134a 	bfi	r3, r4, #5, #6
 8009b5a:	80b3      	strh	r3, [r6, #4]
 8009b5c:	0a1b      	lsrs	r3, r3, #8
 8009b5e:	f364 03c7 	bfi	r3, r4, #3, #5
 8009b62:	7173      	strb	r3, [r6, #5]
	style_indic.body.main_color = LV_COLOR_BLACK;
 8009b64:	78b3      	ldrb	r3, [r6, #2]
 8009b66:	f364 0304 	bfi	r3, r4, #0, #5
 8009b6a:	70b3      	strb	r3, [r6, #2]
 8009b6c:	8873      	ldrh	r3, [r6, #2]
 8009b6e:	f364 134a 	bfi	r3, r4, #5, #6
 8009b72:	8073      	strh	r3, [r6, #2]
 8009b74:	0a1b      	lsrs	r3, r3, #8
 8009b76:	f364 03c7 	bfi	r3, r4, #3, #5
 8009b7a:	70f3      	strb	r3, [r6, #3]
	style_indic.body.border.color = LV_COLOR_BLACK;
 8009b7c:	7ab3      	ldrb	r3, [r6, #10]
 8009b7e:	f364 0304 	bfi	r3, r4, #0, #5
 8009b82:	72b3      	strb	r3, [r6, #10]
 8009b84:	8973      	ldrh	r3, [r6, #10]
 8009b86:	f364 134a 	bfi	r3, r4, #5, #6
 8009b8a:	8173      	strh	r3, [r6, #10]
 8009b8c:	0a1b      	lsrs	r3, r3, #8
 8009b8e:	f364 03c7 	bfi	r3, r4, #3, #5
 8009b92:	72f3      	strb	r3, [r6, #11]
	imgbtn1[0] = lv_imgbtn_create(Tela_Audio, NULL);
 8009b94:	4621      	mov	r1, r4
 8009b96:	6838      	ldr	r0, [r7, #0]
 8009b98:	4e79      	ldr	r6, [pc, #484]	; (8009d80 <screen_audio+0x324>)
 8009b9a:	f00d f9bf 	bl	8016f1c <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn1[0], 0);
 8009b9e:	4621      	mov	r1, r4
	imgbtn1[0] = lv_imgbtn_create(Tela_Audio, NULL);
 8009ba0:	6030      	str	r0, [r6, #0]
	lv_obj_set_user_data(imgbtn1[0], 0);
 8009ba2:	f005 fd2c 	bl	800f5fe <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_REL, &Btn_stereo);
 8009ba6:	6830      	ldr	r0, [r6, #0]
 8009ba8:	4a76      	ldr	r2, [pc, #472]	; (8009d84 <screen_audio+0x328>)
 8009baa:	4621      	mov	r1, r4
 8009bac:	f00d f9fe 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_TGL_REL, &Btn_stereo);
 8009bb0:	6830      	ldr	r0, [r6, #0]
 8009bb2:	4a74      	ldr	r2, [pc, #464]	; (8009d84 <screen_audio+0x328>)
 8009bb4:	2102      	movs	r1, #2
 8009bb6:	f00d f9f9 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_TGL_PR, &Btn_stereo_am);
 8009bba:	6830      	ldr	r0, [r6, #0]
 8009bbc:	4a72      	ldr	r2, [pc, #456]	; (8009d88 <screen_audio+0x32c>)
 8009bbe:	2103      	movs	r1, #3
 8009bc0:	f00d f9f4 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_PR, &Btn_stereo_am);
 8009bc4:	6830      	ldr	r0, [r6, #0]
 8009bc6:	4a70      	ldr	r2, [pc, #448]	; (8009d88 <screen_audio+0x32c>)
 8009bc8:	2101      	movs	r1, #1
 8009bca:	f00d f9ef 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_INA, &Btn_stereo_am);
 8009bce:	4a6e      	ldr	r2, [pc, #440]	; (8009d88 <screen_audio+0x32c>)
 8009bd0:	6830      	ldr	r0, [r6, #0]
 8009bd2:	2104      	movs	r1, #4
 8009bd4:	f00d f9ea 	bl	8016fac <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn1[0], btn_stereo);
 8009bd8:	6830      	ldr	r0, [r6, #0]
 8009bda:	496c      	ldr	r1, [pc, #432]	; (8009d8c <screen_audio+0x330>)
 8009bdc:	f004 fdb1 	bl	800e742 <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn1[0], 5, 63);
 8009be0:	223f      	movs	r2, #63	; 0x3f
 8009be2:	6830      	ldr	r0, [r6, #0]
 8009be4:	2105      	movs	r1, #5
 8009be6:	f004 fef6 	bl	800e9d6 <lv_obj_set_pos>
	imgbtn1[1] = lv_imgbtn_create(Tela_Audio, imgbtn1[0]);
 8009bea:	6831      	ldr	r1, [r6, #0]
 8009bec:	6838      	ldr	r0, [r7, #0]
 8009bee:	f00d f995 	bl	8016f1c <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn1[1], 1);
 8009bf2:	2101      	movs	r1, #1
	imgbtn1[1] = lv_imgbtn_create(Tela_Audio, imgbtn1[0]);
 8009bf4:	6070      	str	r0, [r6, #4]
	lv_obj_set_user_data(imgbtn1[1], 1);
 8009bf6:	f005 fd02 	bl	800f5fe <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_REL, &Btn_mono);
 8009bfa:	6870      	ldr	r0, [r6, #4]
 8009bfc:	4a64      	ldr	r2, [pc, #400]	; (8009d90 <screen_audio+0x334>)
 8009bfe:	4621      	mov	r1, r4
 8009c00:	f00d f9d4 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_TGL_REL, &Btn_mono);
 8009c04:	6870      	ldr	r0, [r6, #4]
 8009c06:	4a62      	ldr	r2, [pc, #392]	; (8009d90 <screen_audio+0x334>)
 8009c08:	2102      	movs	r1, #2
 8009c0a:	f00d f9cf 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_TGL_PR, &Btn_mono_am);
 8009c0e:	6870      	ldr	r0, [r6, #4]
 8009c10:	4a60      	ldr	r2, [pc, #384]	; (8009d94 <screen_audio+0x338>)
 8009c12:	2103      	movs	r1, #3
 8009c14:	f00d f9ca 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_PR, &Btn_mono_am);
 8009c18:	6870      	ldr	r0, [r6, #4]
 8009c1a:	4a5e      	ldr	r2, [pc, #376]	; (8009d94 <screen_audio+0x338>)
 8009c1c:	2101      	movs	r1, #1
 8009c1e:	f00d f9c5 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_INA, &Btn_mono_am);
 8009c22:	6870      	ldr	r0, [r6, #4]
 8009c24:	4a5b      	ldr	r2, [pc, #364]	; (8009d94 <screen_audio+0x338>)
 8009c26:	2104      	movs	r1, #4
 8009c28:	f00d f9c0 	bl	8016fac <lv_imgbtn_set_src>
	lv_obj_set_pos(imgbtn1[1], 5, 83);
 8009c2c:	2253      	movs	r2, #83	; 0x53
 8009c2e:	6870      	ldr	r0, [r6, #4]
	bar[0] = lv_bar_create(Tela_Audio, NULL);
 8009c30:	4e59      	ldr	r6, [pc, #356]	; (8009d98 <screen_audio+0x33c>)
	lv_obj_set_pos(imgbtn1[1], 5, 83);
 8009c32:	2105      	movs	r1, #5
 8009c34:	f004 fecf 	bl	800e9d6 <lv_obj_set_pos>
	bar[0] = lv_bar_create(Tela_Audio, NULL);
 8009c38:	4621      	mov	r1, r4
 8009c3a:	6838      	ldr	r0, [r7, #0]
 8009c3c:	f00b f900 	bl	8014e40 <lv_bar_create>
	lv_obj_set_size(bar[0], 16, 8);
 8009c40:	2208      	movs	r2, #8
 8009c42:	2110      	movs	r1, #16
	bar[0] = lv_bar_create(Tela_Audio, NULL);
 8009c44:	6030      	str	r0, [r6, #0]
	lv_obj_set_size(bar[0], 16, 8);
 8009c46:	f005 fabb 	bl	800f1c0 <lv_obj_set_size>
	lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);
 8009c4a:	462a      	mov	r2, r5
 8009c4c:	4621      	mov	r1, r4
 8009c4e:	6830      	ldr	r0, [r6, #0]
 8009c50:	f00b f8e0 	bl	8014e14 <lv_bar_set_style>
	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009c54:	462a      	mov	r2, r5
 8009c56:	2101      	movs	r1, #1
 8009c58:	6830      	ldr	r0, [r6, #0]
	lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 88);
 8009c5a:	2558      	movs	r5, #88	; 0x58
	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009c5c:	f00b f8da 	bl	8014e14 <lv_bar_set_style>
	lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 88);
 8009c60:	9500      	str	r5, [sp, #0]
 8009c62:	2336      	movs	r3, #54	; 0x36
 8009c64:	2201      	movs	r2, #1
 8009c66:	4621      	mov	r1, r4
 8009c68:	6830      	ldr	r0, [r6, #0]
 8009c6a:	f004 ff09 	bl	800ea80 <lv_obj_align>
	lv_bar_set_value(bar[0], 100, 0);
 8009c6e:	2164      	movs	r1, #100	; 0x64
 8009c70:	4622      	mov	r2, r4
 8009c72:	6830      	ldr	r0, [r6, #0]
 8009c74:	f00b f872 	bl	8014d5c <lv_bar_set_value>
	if(Cfg_Stereo) {
 8009c78:	4b48      	ldr	r3, [pc, #288]	; (8009d9c <screen_audio+0x340>)
 8009c7a:	7819      	ldrb	r1, [r3, #0]
 8009c7c:	2900      	cmp	r1, #0
 8009c7e:	f000 80fe 	beq.w	8009e7e <screen_audio+0x422>
		lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 68);
 8009c82:	2344      	movs	r3, #68	; 0x44
 8009c84:	9300      	str	r3, [sp, #0]
 8009c86:	2201      	movs	r2, #1
 8009c88:	2336      	movs	r3, #54	; 0x36
 8009c8a:	4621      	mov	r1, r4
		lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 88);
 8009c8c:	6830      	ldr	r0, [r6, #0]
	imgbtn2[0] = lv_imgbtn_create(Tela_Audio, NULL);
 8009c8e:	4c44      	ldr	r4, [pc, #272]	; (8009da0 <screen_audio+0x344>)
		lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 88);
 8009c90:	f004 fef6 	bl	800ea80 <lv_obj_align>
	imgbtn2[0] = lv_imgbtn_create(Tela_Audio, NULL);
 8009c94:	2100      	movs	r1, #0
 8009c96:	6838      	ldr	r0, [r7, #0]
 8009c98:	f00d f940 	bl	8016f1c <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn2[0], 0);
 8009c9c:	2100      	movs	r1, #0
	imgbtn2[0] = lv_imgbtn_create(Tela_Audio, NULL);
 8009c9e:	6020      	str	r0, [r4, #0]
	lv_obj_set_user_data(imgbtn2[0], 0);
 8009ca0:	f005 fcad 	bl	800f5fe <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn2[0], LV_BTN_STATE_REL, &Btn_mpxint);
 8009ca4:	4a3f      	ldr	r2, [pc, #252]	; (8009da4 <screen_audio+0x348>)
 8009ca6:	6820      	ldr	r0, [r4, #0]
 8009ca8:	2100      	movs	r1, #0
 8009caa:	f00d f97f 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[0], LV_BTN_STATE_TGL_REL, &Btn_mpxint);
 8009cae:	4a3d      	ldr	r2, [pc, #244]	; (8009da4 <screen_audio+0x348>)
 8009cb0:	6820      	ldr	r0, [r4, #0]
 8009cb2:	2102      	movs	r1, #2
 8009cb4:	f00d f97a 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[0], LV_BTN_STATE_TGL_PR, &Btn_mpxint_am);
 8009cb8:	4a3b      	ldr	r2, [pc, #236]	; (8009da8 <screen_audio+0x34c>)
 8009cba:	6820      	ldr	r0, [r4, #0]
 8009cbc:	2103      	movs	r1, #3
 8009cbe:	f00d f975 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[0], LV_BTN_STATE_PR, &Btn_mpxint_am);
 8009cc2:	4a39      	ldr	r2, [pc, #228]	; (8009da8 <screen_audio+0x34c>)
 8009cc4:	6820      	ldr	r0, [r4, #0]
 8009cc6:	2101      	movs	r1, #1
 8009cc8:	f00d f970 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[0], LV_BTN_STATE_INA, &Btn_mpxint_am);
 8009ccc:	4a36      	ldr	r2, [pc, #216]	; (8009da8 <screen_audio+0x34c>)
 8009cce:	6820      	ldr	r0, [r4, #0]
 8009cd0:	2104      	movs	r1, #4
 8009cd2:	f00d f96b 	bl	8016fac <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn2[0], btn_audio);
 8009cd6:	4935      	ldr	r1, [pc, #212]	; (8009dac <screen_audio+0x350>)
 8009cd8:	6820      	ldr	r0, [r4, #0]
 8009cda:	f004 fd32 	bl	800e742 <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn2[0], 82, 47);
 8009cde:	222f      	movs	r2, #47	; 0x2f
 8009ce0:	2152      	movs	r1, #82	; 0x52
 8009ce2:	6820      	ldr	r0, [r4, #0]
 8009ce4:	f004 fe77 	bl	800e9d6 <lv_obj_set_pos>
	imgbtn2[1] = lv_imgbtn_create(Tela_Audio, imgbtn2[0]);
 8009ce8:	6821      	ldr	r1, [r4, #0]
 8009cea:	6838      	ldr	r0, [r7, #0]
 8009cec:	f00d f916 	bl	8016f1c <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn2[1], 1);
 8009cf0:	2101      	movs	r1, #1
	imgbtn2[1] = lv_imgbtn_create(Tela_Audio, imgbtn2[0]);
 8009cf2:	6060      	str	r0, [r4, #4]
	lv_obj_set_user_data(imgbtn2[1], 1);
 8009cf4:	f005 fc83 	bl	800f5fe <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn2[1], LV_BTN_STATE_REL, &Btn_mpxext);
 8009cf8:	4a2d      	ldr	r2, [pc, #180]	; (8009db0 <screen_audio+0x354>)
 8009cfa:	6860      	ldr	r0, [r4, #4]
 8009cfc:	2100      	movs	r1, #0
 8009cfe:	f00d f955 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[1], LV_BTN_STATE_TGL_REL, &Btn_mpxext);
 8009d02:	4a2b      	ldr	r2, [pc, #172]	; (8009db0 <screen_audio+0x354>)
 8009d04:	6860      	ldr	r0, [r4, #4]
 8009d06:	2102      	movs	r1, #2
 8009d08:	f00d f950 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[1], LV_BTN_STATE_TGL_PR, &Btn_mpxext_am);
 8009d0c:	4a29      	ldr	r2, [pc, #164]	; (8009db4 <screen_audio+0x358>)
 8009d0e:	6860      	ldr	r0, [r4, #4]
 8009d10:	2103      	movs	r1, #3
 8009d12:	f00d f94b 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[1], LV_BTN_STATE_PR, &Btn_mpxext_am);
 8009d16:	4a27      	ldr	r2, [pc, #156]	; (8009db4 <screen_audio+0x358>)
 8009d18:	6860      	ldr	r0, [r4, #4]
 8009d1a:	2101      	movs	r1, #1
 8009d1c:	f00d f946 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[1], LV_BTN_STATE_INA, &Btn_mpxext_am);
 8009d20:	4a24      	ldr	r2, [pc, #144]	; (8009db4 <screen_audio+0x358>)
 8009d22:	6860      	ldr	r0, [r4, #4]
 8009d24:	2104      	movs	r1, #4
 8009d26:	f00d f941 	bl	8016fac <lv_imgbtn_set_src>
	lv_obj_set_pos(imgbtn2[1], 83, 67);
 8009d2a:	2243      	movs	r2, #67	; 0x43
 8009d2c:	2153      	movs	r1, #83	; 0x53
 8009d2e:	6860      	ldr	r0, [r4, #4]
 8009d30:	f004 fe51 	bl	800e9d6 <lv_obj_set_pos>
	imgbtn2[2] = lv_imgbtn_create(Tela_Audio, imgbtn2[0]);
 8009d34:	6821      	ldr	r1, [r4, #0]
 8009d36:	6838      	ldr	r0, [r7, #0]
 8009d38:	f00d f8f0 	bl	8016f1c <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn2[2], 2);
 8009d3c:	2102      	movs	r1, #2
	imgbtn2[2] = lv_imgbtn_create(Tela_Audio, imgbtn2[0]);
 8009d3e:	60a0      	str	r0, [r4, #8]
	lv_obj_set_user_data(imgbtn2[2], 2);
 8009d40:	f005 fc5d 	bl	800f5fe <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn2[2], LV_BTN_STATE_REL, &Btn_mp3);
 8009d44:	4a1c      	ldr	r2, [pc, #112]	; (8009db8 <screen_audio+0x35c>)
 8009d46:	68a0      	ldr	r0, [r4, #8]
 8009d48:	2100      	movs	r1, #0
 8009d4a:	f00d f92f 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[2], LV_BTN_STATE_TGL_REL, &Btn_mp3);
 8009d4e:	4a1a      	ldr	r2, [pc, #104]	; (8009db8 <screen_audio+0x35c>)
 8009d50:	68a0      	ldr	r0, [r4, #8]
 8009d52:	2102      	movs	r1, #2
 8009d54:	f00d f92a 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[2], LV_BTN_STATE_TGL_PR, &Btn_mp3_am);
 8009d58:	4a18      	ldr	r2, [pc, #96]	; (8009dbc <screen_audio+0x360>)
 8009d5a:	68a0      	ldr	r0, [r4, #8]
 8009d5c:	2103      	movs	r1, #3
 8009d5e:	e02f      	b.n	8009dc0 <screen_audio+0x364>
 8009d60:	20005170 	.word	0x20005170
 8009d64:	20005184 	.word	0x20005184
 8009d68:	20001b8c 	.word	0x20001b8c
 8009d6c:	2000522c 	.word	0x2000522c
 8009d70:	200051f0 	.word	0x200051f0
 8009d74:	080099d9 	.word	0x080099d9
 8009d78:	2000c3b4 	.word	0x2000c3b4
 8009d7c:	200051b4 	.word	0x200051b4
 8009d80:	20005188 	.word	0x20005188
 8009d84:	20001b50 	.word	0x20001b50
 8009d88:	20001b5c 	.word	0x20001b5c
 8009d8c:	080097a9 	.word	0x080097a9
 8009d90:	20001a18 	.word	0x20001a18
 8009d94:	20001a24 	.word	0x20001a24
 8009d98:	2000517c 	.word	0x2000517c
 8009d9c:	20000000 	.word	0x20000000
 8009da0:	20005190 	.word	0x20005190
 8009da4:	20001ac0 	.word	0x20001ac0
 8009da8:	20001acc 	.word	0x20001acc
 8009dac:	0800970d 	.word	0x0800970d
 8009db0:	20001aa8 	.word	0x20001aa8
 8009db4:	20001ab4 	.word	0x20001ab4
 8009db8:	20001a30 	.word	0x20001a30
 8009dbc:	20001a9c 	.word	0x20001a9c
 8009dc0:	f00d f8f4 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[2], LV_BTN_STATE_PR, &Btn_mp3_am);
 8009dc4:	4a3c      	ldr	r2, [pc, #240]	; (8009eb8 <screen_audio+0x45c>)
 8009dc6:	68a0      	ldr	r0, [r4, #8]
 8009dc8:	2101      	movs	r1, #1
 8009dca:	f00d f8ef 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[2], LV_BTN_STATE_INA, &Btn_mp3_am);
 8009dce:	4a3a      	ldr	r2, [pc, #232]	; (8009eb8 <screen_audio+0x45c>)
 8009dd0:	68a0      	ldr	r0, [r4, #8]
 8009dd2:	2104      	movs	r1, #4
 8009dd4:	f00d f8ea 	bl	8016fac <lv_imgbtn_set_src>
	lv_obj_set_pos(imgbtn2[2], 83, 87);
 8009dd8:	2257      	movs	r2, #87	; 0x57
 8009dda:	2153      	movs	r1, #83	; 0x53
 8009ddc:	68a0      	ldr	r0, [r4, #8]
 8009dde:	f004 fdfa 	bl	800e9d6 <lv_obj_set_pos>
	imgbtn2[3] = lv_imgbtn_create(Tela_Audio, imgbtn2[0]);
 8009de2:	6821      	ldr	r1, [r4, #0]
 8009de4:	6838      	ldr	r0, [r7, #0]
 8009de6:	f00d f899 	bl	8016f1c <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn2[3], 3);
 8009dea:	2103      	movs	r1, #3
	imgbtn2[3] = lv_imgbtn_create(Tela_Audio, imgbtn2[0]);
 8009dec:	60e0      	str	r0, [r4, #12]
	lv_obj_set_user_data(imgbtn2[3], 3);
 8009dee:	f005 fc06 	bl	800f5fe <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn2[3], LV_BTN_STATE_REL, &Btn_mic);
 8009df2:	4a32      	ldr	r2, [pc, #200]	; (8009ebc <screen_audio+0x460>)
 8009df4:	68e0      	ldr	r0, [r4, #12]
 8009df6:	2100      	movs	r1, #0
 8009df8:	f00d f8d8 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[3], LV_BTN_STATE_TGL_REL, &Btn_mic);
 8009dfc:	4a2f      	ldr	r2, [pc, #188]	; (8009ebc <screen_audio+0x460>)
 8009dfe:	68e0      	ldr	r0, [r4, #12]
 8009e00:	2102      	movs	r1, #2
 8009e02:	f00d f8d3 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[3], LV_BTN_STATE_TGL_PR, &Btn_mic_am);
 8009e06:	4a2e      	ldr	r2, [pc, #184]	; (8009ec0 <screen_audio+0x464>)
 8009e08:	68e0      	ldr	r0, [r4, #12]
 8009e0a:	2103      	movs	r1, #3
 8009e0c:	f00d f8ce 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[3], LV_BTN_STATE_PR, &Btn_mic_am);
 8009e10:	4a2b      	ldr	r2, [pc, #172]	; (8009ec0 <screen_audio+0x464>)
 8009e12:	68e0      	ldr	r0, [r4, #12]
 8009e14:	2101      	movs	r1, #1
 8009e16:	f00d f8c9 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[3], LV_BTN_STATE_INA, &Btn_mic_am);
 8009e1a:	4a29      	ldr	r2, [pc, #164]	; (8009ec0 <screen_audio+0x464>)
 8009e1c:	68e0      	ldr	r0, [r4, #12]
 8009e1e:	2104      	movs	r1, #4
 8009e20:	f00d f8c4 	bl	8016fac <lv_imgbtn_set_src>
	lv_obj_set_pos(imgbtn2[3], 83, 106);
 8009e24:	226a      	movs	r2, #106	; 0x6a
 8009e26:	2153      	movs	r1, #83	; 0x53
 8009e28:	68e0      	ldr	r0, [r4, #12]
 8009e2a:	f004 fdd4 	bl	800e9d6 <lv_obj_set_pos>
	bar[1] = lv_bar_create(Tela_Audio, NULL);
 8009e2e:	2100      	movs	r1, #0
 8009e30:	6838      	ldr	r0, [r7, #0]
 8009e32:	f00b f805 	bl	8014e40 <lv_bar_create>
	lv_obj_set_size(bar[1], 16, 8);
 8009e36:	2208      	movs	r2, #8
 8009e38:	2110      	movs	r1, #16
	bar[1] = lv_bar_create(Tela_Audio, NULL);
 8009e3a:	6070      	str	r0, [r6, #4]
	lv_obj_set_size(bar[1], 16, 8);
 8009e3c:	f005 f9c0 	bl	800f1c0 <lv_obj_set_size>
	lv_bar_set_style(bar[1], LV_BAR_STYLE_BG, &style_indic_vd);
 8009e40:	4a20      	ldr	r2, [pc, #128]	; (8009ec4 <screen_audio+0x468>)
 8009e42:	6870      	ldr	r0, [r6, #4]
 8009e44:	2100      	movs	r1, #0
 8009e46:	f00a ffe5 	bl	8014e14 <lv_bar_set_style>
	lv_bar_set_style(bar[1], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009e4a:	4a1e      	ldr	r2, [pc, #120]	; (8009ec4 <screen_audio+0x468>)
 8009e4c:	6870      	ldr	r0, [r6, #4]
 8009e4e:	2101      	movs	r1, #1
 8009e50:	f00a ffe0 	bl	8014e14 <lv_bar_set_style>
	lv_obj_align(bar[1], NULL, LV_ALIGN_IN_TOP_LEFT, 132, 51);
 8009e54:	2333      	movs	r3, #51	; 0x33
 8009e56:	9300      	str	r3, [sp, #0]
 8009e58:	2201      	movs	r2, #1
 8009e5a:	2384      	movs	r3, #132	; 0x84
 8009e5c:	2100      	movs	r1, #0
 8009e5e:	6870      	ldr	r0, [r6, #4]
 8009e60:	f004 fe0e 	bl	800ea80 <lv_obj_align>
	lv_bar_set_value(bar[1], 100, 0);
 8009e64:	2200      	movs	r2, #0
 8009e66:	2164      	movs	r1, #100	; 0x64
 8009e68:	6870      	ldr	r0, [r6, #4]
 8009e6a:	f00a ff77 	bl	8014d5c <lv_bar_set_value>
	switch(Cfg_Audio) {
 8009e6e:	4b16      	ldr	r3, [pc, #88]	; (8009ec8 <screen_audio+0x46c>)
 8009e70:	781b      	ldrb	r3, [r3, #0]
 8009e72:	2b03      	cmp	r3, #3
 8009e74:	d80f      	bhi.n	8009e96 <screen_audio+0x43a>
 8009e76:	e8df f003 	tbb	[pc, r3]
 8009e7a:	1606      	.short	0x1606
 8009e7c:	1c1a      	.short	0x1c1a
		lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 88);
 8009e7e:	9500      	str	r5, [sp, #0]
 8009e80:	2336      	movs	r3, #54	; 0x36
 8009e82:	2201      	movs	r2, #1
 8009e84:	e702      	b.n	8009c8c <screen_audio+0x230>
			lv_obj_align(bar[1], NULL, LV_ALIGN_IN_TOP_LEFT, 131, 52);
 8009e86:	2334      	movs	r3, #52	; 0x34
 8009e88:	9300      	str	r3, [sp, #0]
 8009e8a:	2383      	movs	r3, #131	; 0x83
			lv_obj_align(bar[1], NULL, LV_ALIGN_IN_TOP_LEFT, 132, 111);
 8009e8c:	2201      	movs	r2, #1
 8009e8e:	2100      	movs	r1, #0
 8009e90:	6870      	ldr	r0, [r6, #4]
 8009e92:	f004 fdf5 	bl	800ea80 <lv_obj_align>
 8009e96:	6838      	ldr	r0, [r7, #0]
 8009e98:	f004 fa00 	bl	800e29c <lv_disp_load_scr>
	TelaAtiva = TelaAudio;
 8009e9c:	4b0b      	ldr	r3, [pc, #44]	; (8009ecc <screen_audio+0x470>)
 8009e9e:	2203      	movs	r2, #3
 8009ea0:	601a      	str	r2, [r3, #0]
}
 8009ea2:	b003      	add	sp, #12
 8009ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			lv_obj_align(bar[1], NULL, LV_ALIGN_IN_TOP_LEFT, 132, 72);
 8009ea6:	2348      	movs	r3, #72	; 0x48
			lv_obj_align(bar[1], NULL, LV_ALIGN_IN_TOP_LEFT, 132, 111);
 8009ea8:	9300      	str	r3, [sp, #0]
 8009eaa:	2384      	movs	r3, #132	; 0x84
 8009eac:	e7ee      	b.n	8009e8c <screen_audio+0x430>
			lv_obj_align(bar[1], NULL, LV_ALIGN_IN_TOP_LEFT, 132, 92);
 8009eae:	235c      	movs	r3, #92	; 0x5c
 8009eb0:	e7fa      	b.n	8009ea8 <screen_audio+0x44c>
			lv_obj_align(bar[1], NULL, LV_ALIGN_IN_TOP_LEFT, 132, 111);
 8009eb2:	236f      	movs	r3, #111	; 0x6f
 8009eb4:	e7f8      	b.n	8009ea8 <screen_audio+0x44c>
 8009eb6:	bf00      	nop
 8009eb8:	20001a9c 	.word	0x20001a9c
 8009ebc:	20001a00 	.word	0x20001a00
 8009ec0:	20001a0c 	.word	0x20001a0c
 8009ec4:	2000522c 	.word	0x2000522c
 8009ec8:	200033da 	.word	0x200033da
 8009ecc:	200033e4 	.word	0x200033e4

08009ed0 <btn_event_prev1>:
	if(event == LV_EVENT_APPLY) {
 8009ed0:	2911      	cmp	r1, #17
{
 8009ed2:	b508      	push	{r3, lr}
	if(event == LV_EVENT_APPLY) {
 8009ed4:	d107      	bne.n	8009ee6 <btn_event_prev1+0x16>
		lv_obj_del(Tela_Audio_1);
 8009ed6:	4b04      	ldr	r3, [pc, #16]	; (8009ee8 <btn_event_prev1+0x18>)
 8009ed8:	6818      	ldr	r0, [r3, #0]
 8009eda:	f005 f9e4 	bl	800f2a6 <lv_obj_del>
}
 8009ede:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_audio();
 8009ee2:	f7ff bdbb 	b.w	8009a5c <screen_audio>
 8009ee6:	bd08      	pop	{r3, pc}
 8009ee8:	20005174 	.word	0x20005174

08009eec <btn_next1>:
{
 8009eec:	b538      	push	{r3, r4, r5, lr}
	imgbtn_next[1] = lv_imgbtn_create(Tela_Audio, NULL);
 8009eee:	4b15      	ldr	r3, [pc, #84]	; (8009f44 <btn_next1+0x58>)
	lv_imgbtn_set_src(imgbtn_next[1], LV_BTN_STATE_REL, &Btn_next);
 8009ef0:	4d15      	ldr	r5, [pc, #84]	; (8009f48 <btn_next1+0x5c>)
	imgbtn_next[1] = lv_imgbtn_create(Tela_Audio, NULL);
 8009ef2:	6818      	ldr	r0, [r3, #0]
 8009ef4:	4c15      	ldr	r4, [pc, #84]	; (8009f4c <btn_next1+0x60>)
 8009ef6:	2100      	movs	r1, #0
 8009ef8:	f00d f810 	bl	8016f1c <lv_imgbtn_create>
	lv_imgbtn_set_src(imgbtn_next[1], LV_BTN_STATE_REL, &Btn_next);
 8009efc:	462a      	mov	r2, r5
 8009efe:	2100      	movs	r1, #0
	imgbtn_next[1] = lv_imgbtn_create(Tela_Audio, NULL);
 8009f00:	6060      	str	r0, [r4, #4]
	lv_imgbtn_set_src(imgbtn_next[1], LV_BTN_STATE_REL, &Btn_next);
 8009f02:	f00d f853 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next[1], LV_BTN_STATE_TGL_REL, &Btn_next);
 8009f06:	462a      	mov	r2, r5
 8009f08:	6860      	ldr	r0, [r4, #4]
 8009f0a:	2102      	movs	r1, #2
 8009f0c:	f00d f84e 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next[1], LV_BTN_STATE_TGL_PR, &Btn_next);
 8009f10:	462a      	mov	r2, r5
 8009f12:	6860      	ldr	r0, [r4, #4]
 8009f14:	2103      	movs	r1, #3
 8009f16:	f00d f849 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next[1], LV_BTN_STATE_PR, &Btn_next);
 8009f1a:	462a      	mov	r2, r5
 8009f1c:	6860      	ldr	r0, [r4, #4]
 8009f1e:	2101      	movs	r1, #1
 8009f20:	f00d f844 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next[1], LV_BTN_STATE_INA, &Btn_next);
 8009f24:	462a      	mov	r2, r5
 8009f26:	6860      	ldr	r0, [r4, #4]
 8009f28:	2104      	movs	r1, #4
 8009f2a:	f00d f83f 	bl	8016fac <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn_next[1], btn_event_next1);
 8009f2e:	6860      	ldr	r0, [r4, #4]
 8009f30:	4907      	ldr	r1, [pc, #28]	; (8009f50 <btn_next1+0x64>)
 8009f32:	f004 fc06 	bl	800e742 <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn_next[1], 112, 18);
 8009f36:	6860      	ldr	r0, [r4, #4]
 8009f38:	2212      	movs	r2, #18
 8009f3a:	2170      	movs	r1, #112	; 0x70
}
 8009f3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lv_obj_set_pos(imgbtn_next[1], 112, 18);
 8009f40:	f004 bd49 	b.w	800e9d6 <lv_obj_set_pos>
 8009f44:	20005170 	.word	0x20005170
 8009f48:	20001ad8 	.word	0x20001ad8
 8009f4c:	200051a0 	.word	0x200051a0
 8009f50:	0800a7f5 	.word	0x0800a7f5

08009f54 <btn_prev1>:
{
 8009f54:	b538      	push	{r3, r4, r5, lr}
	imgbtn_prev[1] = lv_imgbtn_create(Tela_Audio, NULL);
 8009f56:	4b15      	ldr	r3, [pc, #84]	; (8009fac <btn_prev1+0x58>)
	lv_imgbtn_set_src(imgbtn_prev[1], LV_BTN_STATE_REL, &Btn_prev);
 8009f58:	4d15      	ldr	r5, [pc, #84]	; (8009fb0 <btn_prev1+0x5c>)
	imgbtn_prev[1] = lv_imgbtn_create(Tela_Audio, NULL);
 8009f5a:	6818      	ldr	r0, [r3, #0]
 8009f5c:	4c15      	ldr	r4, [pc, #84]	; (8009fb4 <btn_prev1+0x60>)
 8009f5e:	2100      	movs	r1, #0
 8009f60:	f00c ffdc 	bl	8016f1c <lv_imgbtn_create>
	lv_imgbtn_set_src(imgbtn_prev[1], LV_BTN_STATE_REL, &Btn_prev);
 8009f64:	462a      	mov	r2, r5
 8009f66:	2100      	movs	r1, #0
	imgbtn_prev[1] = lv_imgbtn_create(Tela_Audio, NULL);
 8009f68:	6060      	str	r0, [r4, #4]
	lv_imgbtn_set_src(imgbtn_prev[1], LV_BTN_STATE_REL, &Btn_prev);
 8009f6a:	f00d f81f 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_prev[1], LV_BTN_STATE_TGL_REL, &Btn_prev);
 8009f6e:	462a      	mov	r2, r5
 8009f70:	6860      	ldr	r0, [r4, #4]
 8009f72:	2102      	movs	r1, #2
 8009f74:	f00d f81a 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_prev[1], LV_BTN_STATE_TGL_PR, &Btn_prev);
 8009f78:	462a      	mov	r2, r5
 8009f7a:	6860      	ldr	r0, [r4, #4]
 8009f7c:	2103      	movs	r1, #3
 8009f7e:	f00d f815 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_prev[1], LV_BTN_STATE_PR, &Btn_prev);
 8009f82:	462a      	mov	r2, r5
 8009f84:	6860      	ldr	r0, [r4, #4]
 8009f86:	2101      	movs	r1, #1
 8009f88:	f00d f810 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_prev[1], LV_BTN_STATE_INA, &Btn_prev);
 8009f8c:	462a      	mov	r2, r5
 8009f8e:	6860      	ldr	r0, [r4, #4]
 8009f90:	2104      	movs	r1, #4
 8009f92:	f00d f80b 	bl	8016fac <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn_prev[1], btn_event_prev1);
 8009f96:	6860      	ldr	r0, [r4, #4]
 8009f98:	4907      	ldr	r1, [pc, #28]	; (8009fb8 <btn_prev1+0x64>)
 8009f9a:	f004 fbd2 	bl	800e742 <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn_prev[1], 32, 18);
 8009f9e:	6860      	ldr	r0, [r4, #4]
 8009fa0:	2212      	movs	r2, #18
 8009fa2:	2120      	movs	r1, #32
}
 8009fa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lv_obj_set_pos(imgbtn_prev[1], 32, 18);
 8009fa8:	f004 bd15 	b.w	800e9d6 <lv_obj_set_pos>
 8009fac:	20005170 	.word	0x20005170
 8009fb0:	20001b44 	.word	0x20001b44
 8009fb4:	200051a8 	.word	0x200051a8
 8009fb8:	08009ed1 	.word	0x08009ed1

08009fbc <screen_audio_1>:
{
 8009fbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	Tela_Audio_1 = lv_obj_create(NULL, NULL);
 8009fbe:	2100      	movs	r1, #0
 8009fc0:	4608      	mov	r0, r1
 8009fc2:	f004 ff7f 	bl	800eec4 <lv_obj_create>
	lv_style_copy(&style_indic_vd, &lv_style_pretty);
 8009fc6:	4dc0      	ldr	r5, [pc, #768]	; (800a2c8 <screen_audio_1+0x30c>)
	Tela_Audio_1 = lv_obj_create(NULL, NULL);
 8009fc8:	4fc0      	ldr	r7, [pc, #768]	; (800a2cc <screen_audio_1+0x310>)
	lv_style_copy(&style_indic_vd, &lv_style_pretty);
 8009fca:	49c1      	ldr	r1, [pc, #772]	; (800a2d0 <screen_audio_1+0x314>)
	Tela_Audio_1 = lv_obj_create(NULL, NULL);
 8009fcc:	6038      	str	r0, [r7, #0]
	lv_style_copy(&style_indic_vd, &lv_style_pretty);
 8009fce:	4628      	mov	r0, r5
 8009fd0:	f005 fe54 	bl	800fc7c <lv_style_copy>
	style_indic_vd.body.grad_color = LV_COLOR_LIME;
 8009fd4:	792b      	ldrb	r3, [r5, #4]
	lv_style_copy(&style_indic_am, &lv_style_pretty);
 8009fd6:	4ebf      	ldr	r6, [pc, #764]	; (800a2d4 <screen_audio_1+0x318>)
 8009fd8:	49bd      	ldr	r1, [pc, #756]	; (800a2d0 <screen_audio_1+0x314>)
	style_indic_vd.body.radius = 0;
 8009fda:	2400      	movs	r4, #0
	style_indic_vd.body.grad_color = LV_COLOR_LIME;
 8009fdc:	f364 0304 	bfi	r3, r4, #0, #5
 8009fe0:	712b      	strb	r3, [r5, #4]
 8009fe2:	88ab      	ldrh	r3, [r5, #4]
	style_indic_vd.body.radius = 0;
 8009fe4:	80ec      	strh	r4, [r5, #6]
	style_indic_vd.body.grad_color = LV_COLOR_LIME;
 8009fe6:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 8009fea:	80ab      	strh	r3, [r5, #4]
 8009fec:	0a1b      	lsrs	r3, r3, #8
 8009fee:	f364 03c7 	bfi	r3, r4, #3, #5
 8009ff2:	716b      	strb	r3, [r5, #5]
	style_indic_vd.body.main_color = LV_COLOR_LIME;
 8009ff4:	78ab      	ldrb	r3, [r5, #2]
 8009ff6:	f364 0304 	bfi	r3, r4, #0, #5
 8009ffa:	70ab      	strb	r3, [r5, #2]
 8009ffc:	886b      	ldrh	r3, [r5, #2]
 8009ffe:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800a002:	806b      	strh	r3, [r5, #2]
 800a004:	0a1b      	lsrs	r3, r3, #8
 800a006:	f364 03c7 	bfi	r3, r4, #3, #5
 800a00a:	70eb      	strb	r3, [r5, #3]
	style_indic_vd.body.border.color = LV_COLOR_LIME;
 800a00c:	7aab      	ldrb	r3, [r5, #10]
 800a00e:	f364 0304 	bfi	r3, r4, #0, #5
 800a012:	72ab      	strb	r3, [r5, #10]
 800a014:	896b      	ldrh	r3, [r5, #10]
 800a016:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800a01a:	816b      	strh	r3, [r5, #10]
 800a01c:	0a1b      	lsrs	r3, r3, #8
 800a01e:	f364 03c7 	bfi	r3, r4, #3, #5
	lv_style_copy(&style_indic_am, &lv_style_pretty);
 800a022:	4630      	mov	r0, r6
	style_indic_vd.body.border.color = LV_COLOR_LIME;
 800a024:	72eb      	strb	r3, [r5, #11]
	lv_style_copy(&style_indic_am, &lv_style_pretty);
 800a026:	f005 fe29 	bl	800fc7c <lv_style_copy>
	style_indic_am.body.grad_color = LV_COLOR_YELLOW;
 800a02a:	7933      	ldrb	r3, [r6, #4]
	style_indic_am.body.radius = 0;
 800a02c:	80f4      	strh	r4, [r6, #6]
	style_indic_am.body.grad_color = LV_COLOR_YELLOW;
 800a02e:	f364 0304 	bfi	r3, r4, #0, #5
 800a032:	7133      	strb	r3, [r6, #4]
 800a034:	88b3      	ldrh	r3, [r6, #4]
	lv_style_copy(&style_indic, &lv_style_pretty);
 800a036:	49a6      	ldr	r1, [pc, #664]	; (800a2d0 <screen_audio_1+0x314>)
	style_indic_am.body.grad_color = LV_COLOR_YELLOW;
 800a038:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800a03c:	80b3      	strh	r3, [r6, #4]
 800a03e:	0a1b      	lsrs	r3, r3, #8
 800a040:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 800a044:	7173      	strb	r3, [r6, #5]
	style_indic_am.body.main_color = LV_COLOR_YELLOW;
 800a046:	78b3      	ldrb	r3, [r6, #2]
 800a048:	f364 0304 	bfi	r3, r4, #0, #5
 800a04c:	70b3      	strb	r3, [r6, #2]
 800a04e:	8873      	ldrh	r3, [r6, #2]
 800a050:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800a054:	8073      	strh	r3, [r6, #2]
 800a056:	0a1b      	lsrs	r3, r3, #8
 800a058:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 800a05c:	70f3      	strb	r3, [r6, #3]
	style_indic_am.body.border.color = LV_COLOR_YELLOW;
 800a05e:	7ab3      	ldrb	r3, [r6, #10]
 800a060:	f364 0304 	bfi	r3, r4, #0, #5
 800a064:	72b3      	strb	r3, [r6, #10]
 800a066:	8973      	ldrh	r3, [r6, #10]
 800a068:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800a06c:	8173      	strh	r3, [r6, #10]
 800a06e:	0a1b      	lsrs	r3, r3, #8
 800a070:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 800a074:	72f3      	strb	r3, [r6, #11]
	lv_style_copy(&style_indic, &lv_style_pretty);
 800a076:	4e98      	ldr	r6, [pc, #608]	; (800a2d8 <screen_audio_1+0x31c>)
 800a078:	4630      	mov	r0, r6
 800a07a:	f005 fdff 	bl	800fc7c <lv_style_copy>
	style_indic.body.grad_color = LV_COLOR_BLACK;
 800a07e:	7933      	ldrb	r3, [r6, #4]
	style_indic.body.radius = 0;
 800a080:	80f4      	strh	r4, [r6, #6]
	style_indic.body.grad_color = LV_COLOR_BLACK;
 800a082:	f364 0304 	bfi	r3, r4, #0, #5
 800a086:	7133      	strb	r3, [r6, #4]
 800a088:	88b3      	ldrh	r3, [r6, #4]
 800a08a:	f364 134a 	bfi	r3, r4, #5, #6
 800a08e:	80b3      	strh	r3, [r6, #4]
 800a090:	0a1b      	lsrs	r3, r3, #8
 800a092:	f364 03c7 	bfi	r3, r4, #3, #5
 800a096:	7173      	strb	r3, [r6, #5]
	style_indic.body.main_color = LV_COLOR_BLACK;
 800a098:	78b3      	ldrb	r3, [r6, #2]
 800a09a:	f364 0304 	bfi	r3, r4, #0, #5
 800a09e:	70b3      	strb	r3, [r6, #2]
 800a0a0:	8873      	ldrh	r3, [r6, #2]
 800a0a2:	f364 134a 	bfi	r3, r4, #5, #6
 800a0a6:	8073      	strh	r3, [r6, #2]
 800a0a8:	0a1b      	lsrs	r3, r3, #8
 800a0aa:	f364 03c7 	bfi	r3, r4, #3, #5
 800a0ae:	70f3      	strb	r3, [r6, #3]
	style_indic.body.border.color = LV_COLOR_BLACK;
 800a0b0:	7ab3      	ldrb	r3, [r6, #10]
 800a0b2:	f364 0304 	bfi	r3, r4, #0, #5
 800a0b6:	72b3      	strb	r3, [r6, #10]
 800a0b8:	8973      	ldrh	r3, [r6, #10]
 800a0ba:	f364 134a 	bfi	r3, r4, #5, #6
 800a0be:	8173      	strh	r3, [r6, #10]
 800a0c0:	0a1b      	lsrs	r3, r3, #8
 800a0c2:	f364 03c7 	bfi	r3, r4, #3, #5
 800a0c6:	72f3      	strb	r3, [r6, #11]
	img_fundo = lv_img_create(Tela_Audio_1, NULL);
 800a0c8:	4621      	mov	r1, r4
 800a0ca:	6838      	ldr	r0, [r7, #0]
 800a0cc:	4e83      	ldr	r6, [pc, #524]	; (800a2dc <screen_audio_1+0x320>)
 800a0ce:	f00c fdfb 	bl	8016cc8 <lv_img_create>
    lv_img_set_src(img_fundo, &tela_audio_1);
 800a0d2:	4983      	ldr	r1, [pc, #524]	; (800a2e0 <screen_audio_1+0x324>)
	img_fundo = lv_img_create(Tela_Audio_1, NULL);
 800a0d4:	6030      	str	r0, [r6, #0]
    lv_img_set_src(img_fundo, &tela_audio_1);
 800a0d6:	f00c fd67 	bl	8016ba8 <lv_img_set_src>
    lv_obj_set_protect(img_fundo, LV_PROTECT_POS);
 800a0da:	6830      	ldr	r0, [r6, #0]
	imgbtn1[0] = lv_imgbtn_create(Tela_Audio_1, NULL);
 800a0dc:	4e81      	ldr	r6, [pc, #516]	; (800a2e4 <screen_audio_1+0x328>)
    lv_obj_set_protect(img_fundo, LV_PROTECT_POS);
 800a0de:	2104      	movs	r1, #4
 800a0e0:	f004 fb22 	bl	800e728 <lv_obj_set_protect>
	btn_next1();
 800a0e4:	f7ff ff02 	bl	8009eec <btn_next1>
	btn_prev1();
 800a0e8:	f7ff ff34 	bl	8009f54 <btn_prev1>
	imgbtn1[0] = lv_imgbtn_create(Tela_Audio_1, NULL);
 800a0ec:	4621      	mov	r1, r4
 800a0ee:	6838      	ldr	r0, [r7, #0]
 800a0f0:	f00c ff14 	bl	8016f1c <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn1[0], 0);
 800a0f4:	4621      	mov	r1, r4
	imgbtn1[0] = lv_imgbtn_create(Tela_Audio_1, NULL);
 800a0f6:	6030      	str	r0, [r6, #0]
	lv_obj_set_user_data(imgbtn1[0], 0);
 800a0f8:	f005 fa81 	bl	800f5fe <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_REL, &Btn_75u);
 800a0fc:	6830      	ldr	r0, [r6, #0]
 800a0fe:	4a7a      	ldr	r2, [pc, #488]	; (800a2e8 <screen_audio_1+0x32c>)
 800a100:	4621      	mov	r1, r4
 800a102:	f00c ff53 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_TGL_REL, &Btn_75u);
 800a106:	6830      	ldr	r0, [r6, #0]
 800a108:	4a77      	ldr	r2, [pc, #476]	; (800a2e8 <screen_audio_1+0x32c>)
 800a10a:	2102      	movs	r1, #2
 800a10c:	f00c ff4e 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_TGL_PR, &Btn_75u_am);
 800a110:	6830      	ldr	r0, [r6, #0]
 800a112:	4a76      	ldr	r2, [pc, #472]	; (800a2ec <screen_audio_1+0x330>)
 800a114:	2103      	movs	r1, #3
 800a116:	f00c ff49 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_PR, &Btn_75u_am);
 800a11a:	6830      	ldr	r0, [r6, #0]
 800a11c:	4a73      	ldr	r2, [pc, #460]	; (800a2ec <screen_audio_1+0x330>)
 800a11e:	2101      	movs	r1, #1
 800a120:	f00c ff44 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_INA, &Btn_75u_am);
 800a124:	4a71      	ldr	r2, [pc, #452]	; (800a2ec <screen_audio_1+0x330>)
 800a126:	6830      	ldr	r0, [r6, #0]
 800a128:	2104      	movs	r1, #4
 800a12a:	f00c ff3f 	bl	8016fac <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn1[0], btn_emphase);
 800a12e:	6830      	ldr	r0, [r6, #0]
 800a130:	496f      	ldr	r1, [pc, #444]	; (800a2f0 <screen_audio_1+0x334>)
 800a132:	f004 fb06 	bl	800e742 <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn1[0], 5, 63);
 800a136:	223f      	movs	r2, #63	; 0x3f
 800a138:	6830      	ldr	r0, [r6, #0]
 800a13a:	2105      	movs	r1, #5
 800a13c:	f004 fc4b 	bl	800e9d6 <lv_obj_set_pos>
	imgbtn1[1] = lv_imgbtn_create(Tela_Audio_1, imgbtn1[0]);
 800a140:	6831      	ldr	r1, [r6, #0]
 800a142:	6838      	ldr	r0, [r7, #0]
 800a144:	f00c feea 	bl	8016f1c <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn1[1], 1);
 800a148:	2101      	movs	r1, #1
	imgbtn1[1] = lv_imgbtn_create(Tela_Audio_1, imgbtn1[0]);
 800a14a:	6070      	str	r0, [r6, #4]
	lv_obj_set_user_data(imgbtn1[1], 1);
 800a14c:	f005 fa57 	bl	800f5fe <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_REL, &Btn_50u);
 800a150:	6870      	ldr	r0, [r6, #4]
 800a152:	4a68      	ldr	r2, [pc, #416]	; (800a2f4 <screen_audio_1+0x338>)
 800a154:	4621      	mov	r1, r4
 800a156:	f00c ff29 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_TGL_REL, &Btn_50u);
 800a15a:	6870      	ldr	r0, [r6, #4]
 800a15c:	4a65      	ldr	r2, [pc, #404]	; (800a2f4 <screen_audio_1+0x338>)
 800a15e:	2102      	movs	r1, #2
 800a160:	f00c ff24 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_TGL_PR, &Btn_50u_am);
 800a164:	6870      	ldr	r0, [r6, #4]
 800a166:	4a64      	ldr	r2, [pc, #400]	; (800a2f8 <screen_audio_1+0x33c>)
 800a168:	2103      	movs	r1, #3
 800a16a:	f00c ff1f 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_PR, &Btn_50u_am);
 800a16e:	6870      	ldr	r0, [r6, #4]
 800a170:	4a61      	ldr	r2, [pc, #388]	; (800a2f8 <screen_audio_1+0x33c>)
 800a172:	2101      	movs	r1, #1
 800a174:	f00c ff1a 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_INA, &Btn_50u_am);
 800a178:	6870      	ldr	r0, [r6, #4]
 800a17a:	4a5f      	ldr	r2, [pc, #380]	; (800a2f8 <screen_audio_1+0x33c>)
 800a17c:	2104      	movs	r1, #4
 800a17e:	f00c ff15 	bl	8016fac <lv_imgbtn_set_src>
	lv_obj_set_pos(imgbtn1[1], 5, 83);
 800a182:	2253      	movs	r2, #83	; 0x53
 800a184:	6870      	ldr	r0, [r6, #4]
	bar[0] = lv_bar_create(Tela_Audio, NULL);
 800a186:	4e5d      	ldr	r6, [pc, #372]	; (800a2fc <screen_audio_1+0x340>)
	lv_obj_set_pos(imgbtn1[1], 5, 83);
 800a188:	2105      	movs	r1, #5
 800a18a:	f004 fc24 	bl	800e9d6 <lv_obj_set_pos>
	bar[0] = lv_bar_create(Tela_Audio, NULL);
 800a18e:	4b5c      	ldr	r3, [pc, #368]	; (800a300 <screen_audio_1+0x344>)
 800a190:	4621      	mov	r1, r4
 800a192:	6818      	ldr	r0, [r3, #0]
 800a194:	f00a fe54 	bl	8014e40 <lv_bar_create>
	lv_obj_set_size(bar[0], 16, 8);
 800a198:	2208      	movs	r2, #8
 800a19a:	2110      	movs	r1, #16
	bar[0] = lv_bar_create(Tela_Audio, NULL);
 800a19c:	6030      	str	r0, [r6, #0]
	lv_obj_set_size(bar[0], 16, 8);
 800a19e:	f005 f80f 	bl	800f1c0 <lv_obj_set_size>
	lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);
 800a1a2:	462a      	mov	r2, r5
 800a1a4:	4621      	mov	r1, r4
 800a1a6:	6830      	ldr	r0, [r6, #0]
 800a1a8:	f00a fe34 	bl	8014e14 <lv_bar_set_style>
	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800a1ac:	462a      	mov	r2, r5
 800a1ae:	2101      	movs	r1, #1
 800a1b0:	6830      	ldr	r0, [r6, #0]
 800a1b2:	f00a fe2f 	bl	8014e14 <lv_bar_set_style>
	lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 67);
 800a1b6:	2343      	movs	r3, #67	; 0x43
 800a1b8:	9300      	str	r3, [sp, #0]
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	2336      	movs	r3, #54	; 0x36
 800a1be:	4621      	mov	r1, r4
 800a1c0:	6830      	ldr	r0, [r6, #0]
 800a1c2:	f004 fc5d 	bl	800ea80 <lv_obj_align>
	lv_bar_set_value(bar[0], 100, 0);
 800a1c6:	2164      	movs	r1, #100	; 0x64
 800a1c8:	4622      	mov	r2, r4
 800a1ca:	6830      	ldr	r0, [r6, #0]
 800a1cc:	f00a fdc6 	bl	8014d5c <lv_bar_set_value>
	if(Cfg_Emphase) {
 800a1d0:	4b4c      	ldr	r3, [pc, #304]	; (800a304 <screen_audio_1+0x348>)
 800a1d2:	7819      	ldrb	r1, [r3, #0]
 800a1d4:	2900      	cmp	r1, #0
 800a1d6:	f000 80b9 	beq.w	800a34c <screen_audio_1+0x390>
		lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 68);
 800a1da:	2344      	movs	r3, #68	; 0x44
 800a1dc:	9300      	str	r3, [sp, #0]
 800a1de:	2201      	movs	r2, #1
 800a1e0:	2336      	movs	r3, #54	; 0x36
 800a1e2:	4621      	mov	r1, r4
		lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 88);
 800a1e4:	6830      	ldr	r0, [r6, #0]
	imgbtn2[0] = lv_imgbtn_create(Tela_Audio_1, NULL);
 800a1e6:	4c48      	ldr	r4, [pc, #288]	; (800a308 <screen_audio_1+0x34c>)
		lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 88);
 800a1e8:	f004 fc4a 	bl	800ea80 <lv_obj_align>
	imgbtn2[0] = lv_imgbtn_create(Tela_Audio_1, NULL);
 800a1ec:	2100      	movs	r1, #0
 800a1ee:	6838      	ldr	r0, [r7, #0]
 800a1f0:	f00c fe94 	bl	8016f1c <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn2[0], 0);
 800a1f4:	2100      	movs	r1, #0
	imgbtn2[0] = lv_imgbtn_create(Tela_Audio_1, NULL);
 800a1f6:	6020      	str	r0, [r4, #0]
	lv_obj_set_user_data(imgbtn2[0], 0);
 800a1f8:	f005 fa01 	bl	800f5fe <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn2[0], LV_BTN_STATE_REL, &Btn_on);
 800a1fc:	6820      	ldr	r0, [r4, #0]
 800a1fe:	4a43      	ldr	r2, [pc, #268]	; (800a30c <screen_audio_1+0x350>)
 800a200:	2100      	movs	r1, #0
 800a202:	f00c fed3 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[0], LV_BTN_STATE_TGL_REL, &Btn_on);
 800a206:	6820      	ldr	r0, [r4, #0]
 800a208:	4a40      	ldr	r2, [pc, #256]	; (800a30c <screen_audio_1+0x350>)
 800a20a:	2102      	movs	r1, #2
 800a20c:	f00c fece 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[0], LV_BTN_STATE_TGL_PR, &Btn_on_am);
 800a210:	6820      	ldr	r0, [r4, #0]
 800a212:	4a3f      	ldr	r2, [pc, #252]	; (800a310 <screen_audio_1+0x354>)
 800a214:	2103      	movs	r1, #3
 800a216:	f00c fec9 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[0], LV_BTN_STATE_PR, &Btn_on_am);
 800a21a:	6820      	ldr	r0, [r4, #0]
 800a21c:	4a3c      	ldr	r2, [pc, #240]	; (800a310 <screen_audio_1+0x354>)
 800a21e:	2101      	movs	r1, #1
 800a220:	f00c fec4 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[0], LV_BTN_STATE_INA, &Btn_on_am);
 800a224:	4a3a      	ldr	r2, [pc, #232]	; (800a310 <screen_audio_1+0x354>)
 800a226:	6820      	ldr	r0, [r4, #0]
 800a228:	2104      	movs	r1, #4
 800a22a:	f00c febf 	bl	8016fac <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn2[0], btn_processador);
 800a22e:	6820      	ldr	r0, [r4, #0]
 800a230:	4938      	ldr	r1, [pc, #224]	; (800a314 <screen_audio_1+0x358>)
 800a232:	f004 fa86 	bl	800e742 <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn2[0], 83, 63);
 800a236:	223f      	movs	r2, #63	; 0x3f
 800a238:	6820      	ldr	r0, [r4, #0]
 800a23a:	2153      	movs	r1, #83	; 0x53
 800a23c:	f004 fbcb 	bl	800e9d6 <lv_obj_set_pos>
	imgbtn2[1] = lv_imgbtn_create(Tela_Audio_1, imgbtn2[0]);
 800a240:	6821      	ldr	r1, [r4, #0]
 800a242:	6838      	ldr	r0, [r7, #0]
 800a244:	f00c fe6a 	bl	8016f1c <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn2[1], 1);
 800a248:	2101      	movs	r1, #1
	imgbtn2[1] = lv_imgbtn_create(Tela_Audio_1, imgbtn2[0]);
 800a24a:	6060      	str	r0, [r4, #4]
	lv_obj_set_user_data(imgbtn2[1], 1);
 800a24c:	f005 f9d7 	bl	800f5fe <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn2[1], LV_BTN_STATE_REL, &Btn_off);
 800a250:	6860      	ldr	r0, [r4, #4]
 800a252:	4a31      	ldr	r2, [pc, #196]	; (800a318 <screen_audio_1+0x35c>)
 800a254:	2100      	movs	r1, #0
 800a256:	f00c fea9 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[1], LV_BTN_STATE_TGL_REL, &Btn_off);
 800a25a:	6860      	ldr	r0, [r4, #4]
 800a25c:	4a2e      	ldr	r2, [pc, #184]	; (800a318 <screen_audio_1+0x35c>)
 800a25e:	2102      	movs	r1, #2
 800a260:	f00c fea4 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[1], LV_BTN_STATE_TGL_PR, &Btn_off_am);
 800a264:	6860      	ldr	r0, [r4, #4]
 800a266:	4a2d      	ldr	r2, [pc, #180]	; (800a31c <screen_audio_1+0x360>)
 800a268:	2103      	movs	r1, #3
 800a26a:	f00c fe9f 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[1], LV_BTN_STATE_PR, &Btn_off_am);
 800a26e:	6860      	ldr	r0, [r4, #4]
 800a270:	4a2a      	ldr	r2, [pc, #168]	; (800a31c <screen_audio_1+0x360>)
 800a272:	2101      	movs	r1, #1
 800a274:	f00c fe9a 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[1], LV_BTN_STATE_INA, &Btn_off_am);
 800a278:	6860      	ldr	r0, [r4, #4]
 800a27a:	4a28      	ldr	r2, [pc, #160]	; (800a31c <screen_audio_1+0x360>)
 800a27c:	2104      	movs	r1, #4
 800a27e:	f00c fe95 	bl	8016fac <lv_imgbtn_set_src>
	lv_obj_set_pos(imgbtn2[1], 83, 83);
 800a282:	2253      	movs	r2, #83	; 0x53
 800a284:	4611      	mov	r1, r2
 800a286:	6860      	ldr	r0, [r4, #4]
 800a288:	f004 fba5 	bl	800e9d6 <lv_obj_set_pos>
	bar[1] = lv_bar_create(Tela_Audio_1, NULL);
 800a28c:	2100      	movs	r1, #0
 800a28e:	6838      	ldr	r0, [r7, #0]
 800a290:	f00a fdd6 	bl	8014e40 <lv_bar_create>
	lv_obj_set_size(bar[1], 16, 8);
 800a294:	2208      	movs	r2, #8
 800a296:	2110      	movs	r1, #16
	bar[1] = lv_bar_create(Tela_Audio_1, NULL);
 800a298:	6070      	str	r0, [r6, #4]
	lv_obj_set_size(bar[1], 16, 8);
 800a29a:	f004 ff91 	bl	800f1c0 <lv_obj_set_size>
	lv_bar_set_style(bar[1], LV_BAR_STYLE_BG, &style_indic_vd);
 800a29e:	4a0a      	ldr	r2, [pc, #40]	; (800a2c8 <screen_audio_1+0x30c>)
 800a2a0:	6870      	ldr	r0, [r6, #4]
 800a2a2:	2100      	movs	r1, #0
 800a2a4:	f00a fdb6 	bl	8014e14 <lv_bar_set_style>
	lv_obj_align(bar[1], NULL, LV_ALIGN_IN_TOP_LEFT, 132, 68);
 800a2a8:	2444      	movs	r4, #68	; 0x44
	lv_bar_set_style(bar[1], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800a2aa:	4a07      	ldr	r2, [pc, #28]	; (800a2c8 <screen_audio_1+0x30c>)
 800a2ac:	6870      	ldr	r0, [r6, #4]
 800a2ae:	2101      	movs	r1, #1
 800a2b0:	f00a fdb0 	bl	8014e14 <lv_bar_set_style>
	lv_obj_align(bar[1], NULL, LV_ALIGN_IN_TOP_LEFT, 132, 68);
 800a2b4:	9400      	str	r4, [sp, #0]
 800a2b6:	2384      	movs	r3, #132	; 0x84
 800a2b8:	2201      	movs	r2, #1
 800a2ba:	2100      	movs	r1, #0
 800a2bc:	6870      	ldr	r0, [r6, #4]
 800a2be:	f004 fbdf 	bl	800ea80 <lv_obj_align>
	lv_bar_set_value(bar[1], 100, 0);
 800a2c2:	2164      	movs	r1, #100	; 0x64
 800a2c4:	e02c      	b.n	800a320 <screen_audio_1+0x364>
 800a2c6:	bf00      	nop
 800a2c8:	2000522c 	.word	0x2000522c
 800a2cc:	20005174 	.word	0x20005174
 800a2d0:	2000c3b4 	.word	0x2000c3b4
 800a2d4:	200051f0 	.word	0x200051f0
 800a2d8:	200051b4 	.word	0x200051b4
 800a2dc:	20005184 	.word	0x20005184
 800a2e0:	20001b98 	.word	0x20001b98
 800a2e4:	20005188 	.word	0x20005188
 800a2e8:	20001988 	.word	0x20001988
 800a2ec:	20001994 	.word	0x20001994
 800a2f0:	08009881 	.word	0x08009881
 800a2f4:	20001970 	.word	0x20001970
 800a2f8:	2000197c 	.word	0x2000197c
 800a2fc:	2000517c 	.word	0x2000517c
 800a300:	20005170 	.word	0x20005170
 800a304:	200033dc 	.word	0x200033dc
 800a308:	20005190 	.word	0x20005190
 800a30c:	20001afc 	.word	0x20001afc
 800a310:	20001b08 	.word	0x20001b08
 800a314:	08009815 	.word	0x08009815
 800a318:	20001ae4 	.word	0x20001ae4
 800a31c:	20001af0 	.word	0x20001af0
 800a320:	2200      	movs	r2, #0
 800a322:	6870      	ldr	r0, [r6, #4]
 800a324:	f00a fd1a 	bl	8014d5c <lv_bar_set_value>
	if(Cfg_Processador) {
 800a328:	4b0d      	ldr	r3, [pc, #52]	; (800a360 <screen_audio_1+0x3a4>)
 800a32a:	7819      	ldrb	r1, [r3, #0]
 800a32c:	b199      	cbz	r1, 800a356 <screen_audio_1+0x39a>
		lv_obj_align(bar[1], NULL, LV_ALIGN_IN_TOP_LEFT, 132, 68);
 800a32e:	9400      	str	r4, [sp, #0]
 800a330:	2384      	movs	r3, #132	; 0x84
 800a332:	2201      	movs	r2, #1
 800a334:	2100      	movs	r1, #0
		lv_obj_align(bar[1], NULL, LV_ALIGN_IN_TOP_LEFT, 132, 88);
 800a336:	6870      	ldr	r0, [r6, #4]
 800a338:	f004 fba2 	bl	800ea80 <lv_obj_align>
 800a33c:	6838      	ldr	r0, [r7, #0]
 800a33e:	f003 ffad 	bl	800e29c <lv_disp_load_scr>
	TelaAtiva = TelaAudio_1;
 800a342:	4b08      	ldr	r3, [pc, #32]	; (800a364 <screen_audio_1+0x3a8>)
 800a344:	2204      	movs	r2, #4
 800a346:	601a      	str	r2, [r3, #0]
}
 800a348:	b003      	add	sp, #12
 800a34a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 88);
 800a34c:	2358      	movs	r3, #88	; 0x58
 800a34e:	9300      	str	r3, [sp, #0]
 800a350:	2201      	movs	r2, #1
 800a352:	2336      	movs	r3, #54	; 0x36
 800a354:	e746      	b.n	800a1e4 <screen_audio_1+0x228>
		lv_obj_align(bar[1], NULL, LV_ALIGN_IN_TOP_LEFT, 132, 88);
 800a356:	2358      	movs	r3, #88	; 0x58
 800a358:	9300      	str	r3, [sp, #0]
 800a35a:	2201      	movs	r2, #1
 800a35c:	2384      	movs	r3, #132	; 0x84
 800a35e:	e7ea      	b.n	800a336 <screen_audio_1+0x37a>
 800a360:	200033dd 	.word	0x200033dd
 800a364:	200033e4 	.word	0x200033e4

0800a368 <btn_event_next>:
	if(event == LV_EVENT_APPLY) {
 800a368:	2911      	cmp	r1, #17
{
 800a36a:	b508      	push	{r3, lr}
	if(event == LV_EVENT_APPLY) {
 800a36c:	d107      	bne.n	800a37e <btn_event_next+0x16>
		lv_obj_del(Tela_Audio);
 800a36e:	4b04      	ldr	r3, [pc, #16]	; (800a380 <btn_event_next+0x18>)
 800a370:	6818      	ldr	r0, [r3, #0]
 800a372:	f004 ff98 	bl	800f2a6 <lv_obj_del>
}
 800a376:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_audio_1();
 800a37a:	f7ff be1f 	b.w	8009fbc <screen_audio_1>
 800a37e:	bd08      	pop	{r3, pc}
 800a380:	20005170 	.word	0x20005170

0800a384 <btn_event_prev2>:
	if(event == LV_EVENT_APPLY) {
 800a384:	2911      	cmp	r1, #17
{
 800a386:	b508      	push	{r3, lr}
	if(event == LV_EVENT_APPLY) {
 800a388:	d107      	bne.n	800a39a <btn_event_prev2+0x16>
		lv_obj_del(Tela_Audio_2);
 800a38a:	4b04      	ldr	r3, [pc, #16]	; (800a39c <btn_event_prev2+0x18>)
 800a38c:	6818      	ldr	r0, [r3, #0]
 800a38e:	f004 ff8a 	bl	800f2a6 <lv_obj_del>
}
 800a392:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_audio_1();
 800a396:	f7ff be11 	b.w	8009fbc <screen_audio_1>
 800a39a:	bd08      	pop	{r3, pc}
 800a39c:	20005178 	.word	0x20005178

0800a3a0 <btn_prev2>:
{
 800a3a0:	b538      	push	{r3, r4, r5, lr}
	imgbtn_prev[2] = lv_imgbtn_create(Tela_Audio, NULL);
 800a3a2:	4b15      	ldr	r3, [pc, #84]	; (800a3f8 <btn_prev2+0x58>)
	lv_imgbtn_set_src(imgbtn_prev[2], LV_BTN_STATE_REL, &Btn_prev);
 800a3a4:	4d15      	ldr	r5, [pc, #84]	; (800a3fc <btn_prev2+0x5c>)
	imgbtn_prev[2] = lv_imgbtn_create(Tela_Audio, NULL);
 800a3a6:	6818      	ldr	r0, [r3, #0]
 800a3a8:	4c15      	ldr	r4, [pc, #84]	; (800a400 <btn_prev2+0x60>)
 800a3aa:	2100      	movs	r1, #0
 800a3ac:	f00c fdb6 	bl	8016f1c <lv_imgbtn_create>
	lv_imgbtn_set_src(imgbtn_prev[2], LV_BTN_STATE_REL, &Btn_prev);
 800a3b0:	462a      	mov	r2, r5
 800a3b2:	2100      	movs	r1, #0
	imgbtn_prev[2] = lv_imgbtn_create(Tela_Audio, NULL);
 800a3b4:	60a0      	str	r0, [r4, #8]
	lv_imgbtn_set_src(imgbtn_prev[2], LV_BTN_STATE_REL, &Btn_prev);
 800a3b6:	f00c fdf9 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_prev[2], LV_BTN_STATE_TGL_REL, &Btn_prev);
 800a3ba:	462a      	mov	r2, r5
 800a3bc:	68a0      	ldr	r0, [r4, #8]
 800a3be:	2102      	movs	r1, #2
 800a3c0:	f00c fdf4 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_prev[2], LV_BTN_STATE_TGL_PR, &Btn_prev);
 800a3c4:	462a      	mov	r2, r5
 800a3c6:	68a0      	ldr	r0, [r4, #8]
 800a3c8:	2103      	movs	r1, #3
 800a3ca:	f00c fdef 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_prev[2], LV_BTN_STATE_PR, &Btn_prev);
 800a3ce:	462a      	mov	r2, r5
 800a3d0:	68a0      	ldr	r0, [r4, #8]
 800a3d2:	2101      	movs	r1, #1
 800a3d4:	f00c fdea 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_prev[2], LV_BTN_STATE_INA, &Btn_prev);
 800a3d8:	462a      	mov	r2, r5
 800a3da:	68a0      	ldr	r0, [r4, #8]
 800a3dc:	2104      	movs	r1, #4
 800a3de:	f00c fde5 	bl	8016fac <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn_prev[2], btn_event_prev2);
 800a3e2:	68a0      	ldr	r0, [r4, #8]
 800a3e4:	4907      	ldr	r1, [pc, #28]	; (800a404 <btn_prev2+0x64>)
 800a3e6:	f004 f9ac 	bl	800e742 <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn_prev[2], 32, 18);
 800a3ea:	68a0      	ldr	r0, [r4, #8]
 800a3ec:	2212      	movs	r2, #18
 800a3ee:	2120      	movs	r1, #32
}
 800a3f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lv_obj_set_pos(imgbtn_prev[2], 32, 18);
 800a3f4:	f004 baef 	b.w	800e9d6 <lv_obj_set_pos>
 800a3f8:	20005170 	.word	0x20005170
 800a3fc:	20001b44 	.word	0x20001b44
 800a400:	200051a8 	.word	0x200051a8
 800a404:	0800a385 	.word	0x0800a385

0800a408 <screen_audio_2>:
{
 800a408:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	Tela_Audio_2 = lv_obj_create(NULL, NULL);
 800a40a:	2100      	movs	r1, #0
 800a40c:	4608      	mov	r0, r1
 800a40e:	f004 fd59 	bl	800eec4 <lv_obj_create>
	lv_style_copy(&style_indic_vd, &lv_style_pretty);
 800a412:	4dbe      	ldr	r5, [pc, #760]	; (800a70c <screen_audio_2+0x304>)
	Tela_Audio_2 = lv_obj_create(NULL, NULL);
 800a414:	4fbe      	ldr	r7, [pc, #760]	; (800a710 <screen_audio_2+0x308>)
	lv_style_copy(&style_indic_vd, &lv_style_pretty);
 800a416:	49bf      	ldr	r1, [pc, #764]	; (800a714 <screen_audio_2+0x30c>)
	Tela_Audio_2 = lv_obj_create(NULL, NULL);
 800a418:	6038      	str	r0, [r7, #0]
	lv_style_copy(&style_indic_vd, &lv_style_pretty);
 800a41a:	4628      	mov	r0, r5
 800a41c:	f005 fc2e 	bl	800fc7c <lv_style_copy>
	style_indic_vd.body.grad_color = LV_COLOR_LIME;
 800a420:	792b      	ldrb	r3, [r5, #4]
	lv_style_copy(&style_indic_am, &lv_style_pretty);
 800a422:	4ebd      	ldr	r6, [pc, #756]	; (800a718 <screen_audio_2+0x310>)
 800a424:	49bb      	ldr	r1, [pc, #748]	; (800a714 <screen_audio_2+0x30c>)
	style_indic_vd.body.radius = 0;
 800a426:	2400      	movs	r4, #0
	style_indic_vd.body.grad_color = LV_COLOR_LIME;
 800a428:	f364 0304 	bfi	r3, r4, #0, #5
 800a42c:	712b      	strb	r3, [r5, #4]
 800a42e:	88ab      	ldrh	r3, [r5, #4]
	style_indic_vd.body.radius = 0;
 800a430:	80ec      	strh	r4, [r5, #6]
	style_indic_vd.body.grad_color = LV_COLOR_LIME;
 800a432:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800a436:	80ab      	strh	r3, [r5, #4]
 800a438:	0a1b      	lsrs	r3, r3, #8
 800a43a:	f364 03c7 	bfi	r3, r4, #3, #5
 800a43e:	716b      	strb	r3, [r5, #5]
	style_indic_vd.body.main_color = LV_COLOR_LIME;
 800a440:	78ab      	ldrb	r3, [r5, #2]
 800a442:	f364 0304 	bfi	r3, r4, #0, #5
 800a446:	70ab      	strb	r3, [r5, #2]
 800a448:	886b      	ldrh	r3, [r5, #2]
 800a44a:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800a44e:	806b      	strh	r3, [r5, #2]
 800a450:	0a1b      	lsrs	r3, r3, #8
 800a452:	f364 03c7 	bfi	r3, r4, #3, #5
 800a456:	70eb      	strb	r3, [r5, #3]
	style_indic_vd.body.border.color = LV_COLOR_LIME;
 800a458:	7aab      	ldrb	r3, [r5, #10]
 800a45a:	f364 0304 	bfi	r3, r4, #0, #5
 800a45e:	72ab      	strb	r3, [r5, #10]
 800a460:	896b      	ldrh	r3, [r5, #10]
 800a462:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800a466:	816b      	strh	r3, [r5, #10]
 800a468:	0a1b      	lsrs	r3, r3, #8
 800a46a:	f364 03c7 	bfi	r3, r4, #3, #5
	lv_style_copy(&style_indic_am, &lv_style_pretty);
 800a46e:	4630      	mov	r0, r6
	style_indic_vd.body.border.color = LV_COLOR_LIME;
 800a470:	72eb      	strb	r3, [r5, #11]
	lv_style_copy(&style_indic_am, &lv_style_pretty);
 800a472:	f005 fc03 	bl	800fc7c <lv_style_copy>
	style_indic_am.body.grad_color = LV_COLOR_YELLOW;
 800a476:	7933      	ldrb	r3, [r6, #4]
	style_indic_am.body.radius = 0;
 800a478:	80f4      	strh	r4, [r6, #6]
	style_indic_am.body.grad_color = LV_COLOR_YELLOW;
 800a47a:	f364 0304 	bfi	r3, r4, #0, #5
 800a47e:	7133      	strb	r3, [r6, #4]
 800a480:	88b3      	ldrh	r3, [r6, #4]
	lv_style_copy(&style_indic, &lv_style_pretty);
 800a482:	49a4      	ldr	r1, [pc, #656]	; (800a714 <screen_audio_2+0x30c>)
	style_indic_am.body.grad_color = LV_COLOR_YELLOW;
 800a484:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800a488:	80b3      	strh	r3, [r6, #4]
 800a48a:	0a1b      	lsrs	r3, r3, #8
 800a48c:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 800a490:	7173      	strb	r3, [r6, #5]
	style_indic_am.body.main_color = LV_COLOR_YELLOW;
 800a492:	78b3      	ldrb	r3, [r6, #2]
 800a494:	f364 0304 	bfi	r3, r4, #0, #5
 800a498:	70b3      	strb	r3, [r6, #2]
 800a49a:	8873      	ldrh	r3, [r6, #2]
 800a49c:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800a4a0:	8073      	strh	r3, [r6, #2]
 800a4a2:	0a1b      	lsrs	r3, r3, #8
 800a4a4:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 800a4a8:	70f3      	strb	r3, [r6, #3]
	style_indic_am.body.border.color = LV_COLOR_YELLOW;
 800a4aa:	7ab3      	ldrb	r3, [r6, #10]
 800a4ac:	f364 0304 	bfi	r3, r4, #0, #5
 800a4b0:	72b3      	strb	r3, [r6, #10]
 800a4b2:	8973      	ldrh	r3, [r6, #10]
 800a4b4:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800a4b8:	8173      	strh	r3, [r6, #10]
 800a4ba:	0a1b      	lsrs	r3, r3, #8
 800a4bc:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 800a4c0:	72f3      	strb	r3, [r6, #11]
	lv_style_copy(&style_indic, &lv_style_pretty);
 800a4c2:	4e96      	ldr	r6, [pc, #600]	; (800a71c <screen_audio_2+0x314>)
 800a4c4:	4630      	mov	r0, r6
 800a4c6:	f005 fbd9 	bl	800fc7c <lv_style_copy>
	style_indic.body.grad_color = LV_COLOR_BLACK;
 800a4ca:	7933      	ldrb	r3, [r6, #4]
	style_indic.body.radius = 0;
 800a4cc:	80f4      	strh	r4, [r6, #6]
	style_indic.body.grad_color = LV_COLOR_BLACK;
 800a4ce:	f364 0304 	bfi	r3, r4, #0, #5
 800a4d2:	7133      	strb	r3, [r6, #4]
 800a4d4:	88b3      	ldrh	r3, [r6, #4]
 800a4d6:	f364 134a 	bfi	r3, r4, #5, #6
 800a4da:	80b3      	strh	r3, [r6, #4]
 800a4dc:	0a1b      	lsrs	r3, r3, #8
 800a4de:	f364 03c7 	bfi	r3, r4, #3, #5
 800a4e2:	7173      	strb	r3, [r6, #5]
	style_indic.body.main_color = LV_COLOR_BLACK;
 800a4e4:	78b3      	ldrb	r3, [r6, #2]
 800a4e6:	f364 0304 	bfi	r3, r4, #0, #5
 800a4ea:	70b3      	strb	r3, [r6, #2]
 800a4ec:	8873      	ldrh	r3, [r6, #2]
 800a4ee:	f364 134a 	bfi	r3, r4, #5, #6
 800a4f2:	8073      	strh	r3, [r6, #2]
 800a4f4:	0a1b      	lsrs	r3, r3, #8
 800a4f6:	f364 03c7 	bfi	r3, r4, #3, #5
 800a4fa:	70f3      	strb	r3, [r6, #3]
	style_indic.body.border.color = LV_COLOR_BLACK;
 800a4fc:	7ab3      	ldrb	r3, [r6, #10]
 800a4fe:	f364 0304 	bfi	r3, r4, #0, #5
 800a502:	72b3      	strb	r3, [r6, #10]
 800a504:	8973      	ldrh	r3, [r6, #10]
 800a506:	f364 134a 	bfi	r3, r4, #5, #6
 800a50a:	8173      	strh	r3, [r6, #10]
 800a50c:	0a1b      	lsrs	r3, r3, #8
 800a50e:	f364 03c7 	bfi	r3, r4, #3, #5
 800a512:	72f3      	strb	r3, [r6, #11]
	img_fundo = lv_img_create(Tela_Audio_2, NULL);
 800a514:	4621      	mov	r1, r4
 800a516:	6838      	ldr	r0, [r7, #0]
 800a518:	4e81      	ldr	r6, [pc, #516]	; (800a720 <screen_audio_2+0x318>)
 800a51a:	f00c fbd5 	bl	8016cc8 <lv_img_create>
    lv_img_set_src(img_fundo, &tela_audio_2);
 800a51e:	4981      	ldr	r1, [pc, #516]	; (800a724 <screen_audio_2+0x31c>)
	img_fundo = lv_img_create(Tela_Audio_2, NULL);
 800a520:	6030      	str	r0, [r6, #0]
    lv_img_set_src(img_fundo, &tela_audio_2);
 800a522:	f00c fb41 	bl	8016ba8 <lv_img_set_src>
    lv_obj_set_protect(img_fundo, LV_PROTECT_POS);
 800a526:	6830      	ldr	r0, [r6, #0]
	imgbtn1[0] = lv_imgbtn_create(Tela_Audio_2, NULL);
 800a528:	4e7f      	ldr	r6, [pc, #508]	; (800a728 <screen_audio_2+0x320>)
    lv_obj_set_protect(img_fundo, LV_PROTECT_POS);
 800a52a:	2104      	movs	r1, #4
 800a52c:	f004 f8fc 	bl	800e728 <lv_obj_set_protect>
	btn_prev2();
 800a530:	f7ff ff36 	bl	800a3a0 <btn_prev2>
	imgbtn1[0] = lv_imgbtn_create(Tela_Audio_2, NULL);
 800a534:	4621      	mov	r1, r4
 800a536:	6838      	ldr	r0, [r7, #0]
 800a538:	f00c fcf0 	bl	8016f1c <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn1[0], 0);
 800a53c:	4621      	mov	r1, r4
	imgbtn1[0] = lv_imgbtn_create(Tela_Audio_2, NULL);
 800a53e:	6030      	str	r0, [r6, #0]
	lv_obj_set_user_data(imgbtn1[0], 0);
 800a540:	f005 f85d 	bl	800f5fe <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_REL, &Btn_on);
 800a544:	6830      	ldr	r0, [r6, #0]
 800a546:	4a79      	ldr	r2, [pc, #484]	; (800a72c <screen_audio_2+0x324>)
 800a548:	4621      	mov	r1, r4
 800a54a:	f00c fd2f 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_TGL_REL, &Btn_on);
 800a54e:	6830      	ldr	r0, [r6, #0]
 800a550:	4a76      	ldr	r2, [pc, #472]	; (800a72c <screen_audio_2+0x324>)
 800a552:	2102      	movs	r1, #2
 800a554:	f00c fd2a 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_TGL_PR, &Btn_on_am);
 800a558:	6830      	ldr	r0, [r6, #0]
 800a55a:	4a75      	ldr	r2, [pc, #468]	; (800a730 <screen_audio_2+0x328>)
 800a55c:	2103      	movs	r1, #3
 800a55e:	f00c fd25 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_PR, &Btn_on_am);
 800a562:	6830      	ldr	r0, [r6, #0]
 800a564:	4a72      	ldr	r2, [pc, #456]	; (800a730 <screen_audio_2+0x328>)
 800a566:	2101      	movs	r1, #1
 800a568:	f00c fd20 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_INA, &Btn_on_am);
 800a56c:	4a70      	ldr	r2, [pc, #448]	; (800a730 <screen_audio_2+0x328>)
 800a56e:	6830      	ldr	r0, [r6, #0]
 800a570:	2104      	movs	r1, #4
 800a572:	f00c fd1b 	bl	8016fac <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn1[0], btn_clipper);
 800a576:	6830      	ldr	r0, [r6, #0]
 800a578:	496e      	ldr	r1, [pc, #440]	; (800a734 <screen_audio_2+0x32c>)
 800a57a:	f004 f8e2 	bl	800e742 <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn1[0], 5, 63);
 800a57e:	223f      	movs	r2, #63	; 0x3f
 800a580:	6830      	ldr	r0, [r6, #0]
 800a582:	2105      	movs	r1, #5
 800a584:	f004 fa27 	bl	800e9d6 <lv_obj_set_pos>
	imgbtn1[1] = lv_imgbtn_create(Tela_Audio_2, imgbtn1[0]);
 800a588:	6831      	ldr	r1, [r6, #0]
 800a58a:	6838      	ldr	r0, [r7, #0]
 800a58c:	f00c fcc6 	bl	8016f1c <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn1[1], 1);
 800a590:	2101      	movs	r1, #1
	imgbtn1[1] = lv_imgbtn_create(Tela_Audio_2, imgbtn1[0]);
 800a592:	6070      	str	r0, [r6, #4]
	lv_obj_set_user_data(imgbtn1[1], 1);
 800a594:	f005 f833 	bl	800f5fe <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_REL, &Btn_off);
 800a598:	6870      	ldr	r0, [r6, #4]
 800a59a:	4a67      	ldr	r2, [pc, #412]	; (800a738 <screen_audio_2+0x330>)
 800a59c:	4621      	mov	r1, r4
 800a59e:	f00c fd05 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_TGL_REL, &Btn_off);
 800a5a2:	6870      	ldr	r0, [r6, #4]
 800a5a4:	4a64      	ldr	r2, [pc, #400]	; (800a738 <screen_audio_2+0x330>)
 800a5a6:	2102      	movs	r1, #2
 800a5a8:	f00c fd00 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_TGL_PR, &Btn_off_am);
 800a5ac:	6870      	ldr	r0, [r6, #4]
 800a5ae:	4a63      	ldr	r2, [pc, #396]	; (800a73c <screen_audio_2+0x334>)
 800a5b0:	2103      	movs	r1, #3
 800a5b2:	f00c fcfb 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_PR, &Btn_off_am);
 800a5b6:	6870      	ldr	r0, [r6, #4]
 800a5b8:	4a60      	ldr	r2, [pc, #384]	; (800a73c <screen_audio_2+0x334>)
 800a5ba:	2101      	movs	r1, #1
 800a5bc:	f00c fcf6 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_INA, &Btn_off_am);
 800a5c0:	6870      	ldr	r0, [r6, #4]
 800a5c2:	4a5e      	ldr	r2, [pc, #376]	; (800a73c <screen_audio_2+0x334>)
 800a5c4:	2104      	movs	r1, #4
 800a5c6:	f00c fcf1 	bl	8016fac <lv_imgbtn_set_src>
	lv_obj_set_pos(imgbtn1[1], 5, 83);
 800a5ca:	2253      	movs	r2, #83	; 0x53
 800a5cc:	6870      	ldr	r0, [r6, #4]
	bar[0] = lv_bar_create(Tela_Audio_2, NULL);
 800a5ce:	4e5c      	ldr	r6, [pc, #368]	; (800a740 <screen_audio_2+0x338>)
	lv_obj_set_pos(imgbtn1[1], 5, 83);
 800a5d0:	2105      	movs	r1, #5
 800a5d2:	f004 fa00 	bl	800e9d6 <lv_obj_set_pos>
	bar[0] = lv_bar_create(Tela_Audio_2, NULL);
 800a5d6:	4621      	mov	r1, r4
 800a5d8:	6838      	ldr	r0, [r7, #0]
 800a5da:	f00a fc31 	bl	8014e40 <lv_bar_create>
	lv_obj_set_size(bar[0], 16, 8);
 800a5de:	2208      	movs	r2, #8
 800a5e0:	2110      	movs	r1, #16
	bar[0] = lv_bar_create(Tela_Audio_2, NULL);
 800a5e2:	6030      	str	r0, [r6, #0]
	lv_obj_set_size(bar[0], 16, 8);
 800a5e4:	f004 fdec 	bl	800f1c0 <lv_obj_set_size>
	lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);
 800a5e8:	462a      	mov	r2, r5
 800a5ea:	4621      	mov	r1, r4
 800a5ec:	6830      	ldr	r0, [r6, #0]
 800a5ee:	f00a fc11 	bl	8014e14 <lv_bar_set_style>
	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800a5f2:	462a      	mov	r2, r5
 800a5f4:	2101      	movs	r1, #1
 800a5f6:	6830      	ldr	r0, [r6, #0]
 800a5f8:	f00a fc0c 	bl	8014e14 <lv_bar_set_style>
	lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 67);
 800a5fc:	2343      	movs	r3, #67	; 0x43
 800a5fe:	9300      	str	r3, [sp, #0]
 800a600:	2201      	movs	r2, #1
 800a602:	2336      	movs	r3, #54	; 0x36
 800a604:	4621      	mov	r1, r4
 800a606:	6830      	ldr	r0, [r6, #0]
 800a608:	f004 fa3a 	bl	800ea80 <lv_obj_align>
	lv_bar_set_value(bar[0], 100, 0);
 800a60c:	2164      	movs	r1, #100	; 0x64
 800a60e:	4622      	mov	r2, r4
 800a610:	6830      	ldr	r0, [r6, #0]
 800a612:	f00a fba3 	bl	8014d5c <lv_bar_set_value>
	if(Cfg_Clipper) {
 800a616:	4b4b      	ldr	r3, [pc, #300]	; (800a744 <screen_audio_2+0x33c>)
 800a618:	7819      	ldrb	r1, [r3, #0]
 800a61a:	2900      	cmp	r1, #0
 800a61c:	f000 80dc 	beq.w	800a7d8 <screen_audio_2+0x3d0>
		lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 68);
 800a620:	2344      	movs	r3, #68	; 0x44
 800a622:	9300      	str	r3, [sp, #0]
 800a624:	2201      	movs	r2, #1
 800a626:	2336      	movs	r3, #54	; 0x36
 800a628:	4621      	mov	r1, r4
		lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 88);
 800a62a:	6830      	ldr	r0, [r6, #0]
	imgbtn2[0] = lv_imgbtn_create(Tela_Audio_2, NULL);
 800a62c:	4c46      	ldr	r4, [pc, #280]	; (800a748 <screen_audio_2+0x340>)
		lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 88);
 800a62e:	f004 fa27 	bl	800ea80 <lv_obj_align>
	imgbtn2[0] = lv_imgbtn_create(Tela_Audio_2, NULL);
 800a632:	2100      	movs	r1, #0
 800a634:	6838      	ldr	r0, [r7, #0]
 800a636:	f00c fc71 	bl	8016f1c <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn2[0], 0);
 800a63a:	2100      	movs	r1, #0
	imgbtn2[0] = lv_imgbtn_create(Tela_Audio_2, NULL);
 800a63c:	6020      	str	r0, [r4, #0]
	lv_obj_set_user_data(imgbtn2[0], 0);
 800a63e:	f004 ffde 	bl	800f5fe <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn2[0], LV_BTN_STATE_REL, &Btn_mp3Prev);
 800a642:	6820      	ldr	r0, [r4, #0]
 800a644:	4a41      	ldr	r2, [pc, #260]	; (800a74c <screen_audio_2+0x344>)
 800a646:	2100      	movs	r1, #0
 800a648:	f00c fcb0 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[0], LV_BTN_STATE_TGL_REL, &Btn_mp3Prev);
 800a64c:	6820      	ldr	r0, [r4, #0]
 800a64e:	4a3f      	ldr	r2, [pc, #252]	; (800a74c <screen_audio_2+0x344>)
 800a650:	2102      	movs	r1, #2
 800a652:	f00c fcab 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[0], LV_BTN_STATE_TGL_PR, &Btn_mp3Prev_am);
 800a656:	6820      	ldr	r0, [r4, #0]
 800a658:	4a3d      	ldr	r2, [pc, #244]	; (800a750 <screen_audio_2+0x348>)
 800a65a:	2103      	movs	r1, #3
 800a65c:	f00c fca6 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[0], LV_BTN_STATE_PR, &Btn_mp3Prev_am);
 800a660:	6820      	ldr	r0, [r4, #0]
 800a662:	4a3b      	ldr	r2, [pc, #236]	; (800a750 <screen_audio_2+0x348>)
 800a664:	2101      	movs	r1, #1
 800a666:	f00c fca1 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[0], LV_BTN_STATE_INA, &Btn_mp3Prev_am);
 800a66a:	4a39      	ldr	r2, [pc, #228]	; (800a750 <screen_audio_2+0x348>)
 800a66c:	6820      	ldr	r0, [r4, #0]
 800a66e:	2104      	movs	r1, #4
 800a670:	f00c fc9c 	bl	8016fac <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn2[0], btn_mp3);
 800a674:	6820      	ldr	r0, [r4, #0]
 800a676:	4937      	ldr	r1, [pc, #220]	; (800a754 <screen_audio_2+0x34c>)
 800a678:	f004 f863 	bl	800e742 <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn2[0], 83, 48);
 800a67c:	2230      	movs	r2, #48	; 0x30
 800a67e:	6820      	ldr	r0, [r4, #0]
 800a680:	2153      	movs	r1, #83	; 0x53
 800a682:	f004 f9a8 	bl	800e9d6 <lv_obj_set_pos>
	imgbtn2[1] = lv_imgbtn_create(Tela_Audio_2, imgbtn2[0]);
 800a686:	6821      	ldr	r1, [r4, #0]
 800a688:	6838      	ldr	r0, [r7, #0]
 800a68a:	f00c fc47 	bl	8016f1c <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn2[1], 1);
 800a68e:	2101      	movs	r1, #1
	imgbtn2[1] = lv_imgbtn_create(Tela_Audio_2, imgbtn2[0]);
 800a690:	6060      	str	r0, [r4, #4]
	lv_obj_set_user_data(imgbtn2[1], 1);
 800a692:	f004 ffb4 	bl	800f5fe <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn2[1], LV_BTN_STATE_REL, &Btn_mp3Play);
 800a696:	6860      	ldr	r0, [r4, #4]
 800a698:	4a2f      	ldr	r2, [pc, #188]	; (800a758 <screen_audio_2+0x350>)
 800a69a:	2100      	movs	r1, #0
 800a69c:	f00c fc86 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[1], LV_BTN_STATE_TGL_REL, &Btn_mp3Play);
 800a6a0:	6860      	ldr	r0, [r4, #4]
 800a6a2:	4a2d      	ldr	r2, [pc, #180]	; (800a758 <screen_audio_2+0x350>)
 800a6a4:	2102      	movs	r1, #2
 800a6a6:	f00c fc81 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[1], LV_BTN_STATE_TGL_PR, &Btn_mp3Play_am);
 800a6aa:	6860      	ldr	r0, [r4, #4]
 800a6ac:	4a2b      	ldr	r2, [pc, #172]	; (800a75c <screen_audio_2+0x354>)
 800a6ae:	2103      	movs	r1, #3
 800a6b0:	f00c fc7c 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[1], LV_BTN_STATE_PR, &Btn_mp3Play_am);
 800a6b4:	6860      	ldr	r0, [r4, #4]
 800a6b6:	4a29      	ldr	r2, [pc, #164]	; (800a75c <screen_audio_2+0x354>)
 800a6b8:	2101      	movs	r1, #1
 800a6ba:	f00c fc77 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[1], LV_BTN_STATE_INA, &Btn_mp3Play_am);
 800a6be:	6860      	ldr	r0, [r4, #4]
 800a6c0:	4a26      	ldr	r2, [pc, #152]	; (800a75c <screen_audio_2+0x354>)
 800a6c2:	2104      	movs	r1, #4
 800a6c4:	f00c fc72 	bl	8016fac <lv_imgbtn_set_src>
	lv_obj_set_pos(imgbtn2[1], 83, 67);
 800a6c8:	2243      	movs	r2, #67	; 0x43
 800a6ca:	6860      	ldr	r0, [r4, #4]
 800a6cc:	2153      	movs	r1, #83	; 0x53
 800a6ce:	f004 f982 	bl	800e9d6 <lv_obj_set_pos>
	imgbtn2[2] = lv_imgbtn_create(Tela_Audio_2, imgbtn2[0]);
 800a6d2:	6821      	ldr	r1, [r4, #0]
 800a6d4:	6838      	ldr	r0, [r7, #0]
 800a6d6:	f00c fc21 	bl	8016f1c <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn2[2], 2);
 800a6da:	2102      	movs	r1, #2
	imgbtn2[2] = lv_imgbtn_create(Tela_Audio_2, imgbtn2[0]);
 800a6dc:	60a0      	str	r0, [r4, #8]
	lv_obj_set_user_data(imgbtn2[2], 2);
 800a6de:	f004 ff8e 	bl	800f5fe <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn2[2], LV_BTN_STATE_REL, &Btn_mp3Next);
 800a6e2:	68a0      	ldr	r0, [r4, #8]
 800a6e4:	4a1e      	ldr	r2, [pc, #120]	; (800a760 <screen_audio_2+0x358>)
 800a6e6:	2100      	movs	r1, #0
 800a6e8:	f00c fc60 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[2], LV_BTN_STATE_TGL_REL, &Btn_mp3Next);
 800a6ec:	68a0      	ldr	r0, [r4, #8]
 800a6ee:	4a1c      	ldr	r2, [pc, #112]	; (800a760 <screen_audio_2+0x358>)
 800a6f0:	2102      	movs	r1, #2
 800a6f2:	f00c fc5b 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[2], LV_BTN_STATE_TGL_PR, &Btn_mp3Next_am);
 800a6f6:	68a0      	ldr	r0, [r4, #8]
 800a6f8:	4a1a      	ldr	r2, [pc, #104]	; (800a764 <screen_audio_2+0x35c>)
 800a6fa:	2103      	movs	r1, #3
 800a6fc:	f00c fc56 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[2], LV_BTN_STATE_PR, &Btn_mp3Next_am);
 800a700:	68a0      	ldr	r0, [r4, #8]
 800a702:	4a18      	ldr	r2, [pc, #96]	; (800a764 <screen_audio_2+0x35c>)
 800a704:	2101      	movs	r1, #1
 800a706:	f00c fc51 	bl	8016fac <lv_imgbtn_set_src>
 800a70a:	e02d      	b.n	800a768 <screen_audio_2+0x360>
 800a70c:	2000522c 	.word	0x2000522c
 800a710:	20005178 	.word	0x20005178
 800a714:	2000c3b4 	.word	0x2000c3b4
 800a718:	200051f0 	.word	0x200051f0
 800a71c:	200051b4 	.word	0x200051b4
 800a720:	20005184 	.word	0x20005184
 800a724:	20001ba4 	.word	0x20001ba4
 800a728:	20005188 	.word	0x20005188
 800a72c:	20001afc 	.word	0x20001afc
 800a730:	20001b08 	.word	0x20001b08
 800a734:	0800996d 	.word	0x0800996d
 800a738:	20001ae4 	.word	0x20001ae4
 800a73c:	20001af0 	.word	0x20001af0
 800a740:	2000517c 	.word	0x2000517c
 800a744:	200033db 	.word	0x200033db
 800a748:	20005190 	.word	0x20005190
 800a74c:	20001a6c 	.word	0x20001a6c
 800a750:	20001a78 	.word	0x20001a78
 800a754:	080098ed 	.word	0x080098ed
 800a758:	20001a54 	.word	0x20001a54
 800a75c:	20001a60 	.word	0x20001a60
 800a760:	20001a3c 	.word	0x20001a3c
 800a764:	20001a48 	.word	0x20001a48
	lv_imgbtn_set_src(imgbtn2[2], LV_BTN_STATE_INA, &Btn_mp3Next_am);
 800a768:	68a0      	ldr	r0, [r4, #8]
 800a76a:	4a1e      	ldr	r2, [pc, #120]	; (800a7e4 <screen_audio_2+0x3dc>)
 800a76c:	2104      	movs	r1, #4
 800a76e:	f00c fc1d 	bl	8016fac <lv_imgbtn_set_src>
	lv_obj_set_pos(imgbtn2[2], 83, 86);
 800a772:	2256      	movs	r2, #86	; 0x56
 800a774:	68a0      	ldr	r0, [r4, #8]
 800a776:	2153      	movs	r1, #83	; 0x53
 800a778:	f004 f92d 	bl	800e9d6 <lv_obj_set_pos>
	imgbtn2[3] = lv_imgbtn_create(Tela_Audio_2, imgbtn2[0]);
 800a77c:	6821      	ldr	r1, [r4, #0]
 800a77e:	6838      	ldr	r0, [r7, #0]
 800a780:	f00c fbcc 	bl	8016f1c <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn2[3], 3);
 800a784:	2103      	movs	r1, #3
	imgbtn2[3] = lv_imgbtn_create(Tela_Audio_2, imgbtn2[0]);
 800a786:	60e0      	str	r0, [r4, #12]
	lv_obj_set_user_data(imgbtn2[3], 3);
 800a788:	f004 ff39 	bl	800f5fe <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn2[3], LV_BTN_STATE_REL, &Btn_mp3Stop);
 800a78c:	68e0      	ldr	r0, [r4, #12]
 800a78e:	4a16      	ldr	r2, [pc, #88]	; (800a7e8 <screen_audio_2+0x3e0>)
 800a790:	2100      	movs	r1, #0
 800a792:	f00c fc0b 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[3], LV_BTN_STATE_TGL_REL, &Btn_mp3Stop);
 800a796:	68e0      	ldr	r0, [r4, #12]
 800a798:	4a13      	ldr	r2, [pc, #76]	; (800a7e8 <screen_audio_2+0x3e0>)
 800a79a:	2102      	movs	r1, #2
 800a79c:	f00c fc06 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[3], LV_BTN_STATE_TGL_PR, &Btn_mp3Stop_am);
 800a7a0:	68e0      	ldr	r0, [r4, #12]
 800a7a2:	4a12      	ldr	r2, [pc, #72]	; (800a7ec <screen_audio_2+0x3e4>)
 800a7a4:	2103      	movs	r1, #3
 800a7a6:	f00c fc01 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[3], LV_BTN_STATE_PR, &Btn_mp3Stop_am);
 800a7aa:	68e0      	ldr	r0, [r4, #12]
 800a7ac:	4a0f      	ldr	r2, [pc, #60]	; (800a7ec <screen_audio_2+0x3e4>)
 800a7ae:	2101      	movs	r1, #1
 800a7b0:	f00c fbfc 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[3], LV_BTN_STATE_INA, &Btn_mp3Stop_am);
 800a7b4:	68e0      	ldr	r0, [r4, #12]
 800a7b6:	4a0d      	ldr	r2, [pc, #52]	; (800a7ec <screen_audio_2+0x3e4>)
 800a7b8:	2104      	movs	r1, #4
 800a7ba:	f00c fbf7 	bl	8016fac <lv_imgbtn_set_src>
	lv_obj_set_pos(imgbtn2[3], 83, 105);
 800a7be:	2269      	movs	r2, #105	; 0x69
 800a7c0:	2153      	movs	r1, #83	; 0x53
 800a7c2:	68e0      	ldr	r0, [r4, #12]
 800a7c4:	f004 f907 	bl	800e9d6 <lv_obj_set_pos>
 800a7c8:	6838      	ldr	r0, [r7, #0]
 800a7ca:	f003 fd67 	bl	800e29c <lv_disp_load_scr>
	TelaAtiva = TelaAudio_2;
 800a7ce:	4b08      	ldr	r3, [pc, #32]	; (800a7f0 <screen_audio_2+0x3e8>)
 800a7d0:	2205      	movs	r2, #5
 800a7d2:	601a      	str	r2, [r3, #0]
}
 800a7d4:	b003      	add	sp, #12
 800a7d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 88);
 800a7d8:	2358      	movs	r3, #88	; 0x58
 800a7da:	9300      	str	r3, [sp, #0]
 800a7dc:	2201      	movs	r2, #1
 800a7de:	2336      	movs	r3, #54	; 0x36
 800a7e0:	e723      	b.n	800a62a <screen_audio_2+0x222>
 800a7e2:	bf00      	nop
 800a7e4:	20001a48 	.word	0x20001a48
 800a7e8:	20001a84 	.word	0x20001a84
 800a7ec:	20001a90 	.word	0x20001a90
 800a7f0:	200033e4 	.word	0x200033e4

0800a7f4 <btn_event_next1>:
	if(event == LV_EVENT_APPLY) {
 800a7f4:	2911      	cmp	r1, #17
{
 800a7f6:	b508      	push	{r3, lr}
	if(event == LV_EVENT_APPLY) {
 800a7f8:	d107      	bne.n	800a80a <btn_event_next1+0x16>
		lv_obj_del(Tela_Audio_1);
 800a7fa:	4b04      	ldr	r3, [pc, #16]	; (800a80c <btn_event_next1+0x18>)
 800a7fc:	6818      	ldr	r0, [r3, #0]
 800a7fe:	f004 fd52 	bl	800f2a6 <lv_obj_del>
}
 800a802:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_audio_2();
 800a806:	f7ff bdff 	b.w	800a408 <screen_audio_2>
 800a80a:	bd08      	pop	{r3, pc}
 800a80c:	20005174 	.word	0x20005174

0800a810 <update_sel_button_Audio_1>:
			break;
	}
}

void update_sel_button_Audio_1(uint8_t idx)
{
 800a810:	b510      	push	{r4, lr}
	switch(idx) {
 800a812:	2804      	cmp	r0, #4
 800a814:	d83e      	bhi.n	800a894 <update_sel_button_Audio_1+0x84>
 800a816:	e8df f000 	tbb	[pc, r0]
 800a81a:	1703      	.short	0x1703
 800a81c:	211a      	.short	0x211a
 800a81e:	2d          	.byte	0x2d
 800a81f:	00          	.byte	0x00
		case 0:
			lv_imgbtn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_REL);
 800a820:	4c1d      	ldr	r4, [pc, #116]	; (800a898 <update_sel_button_Audio_1+0x88>)
 * @param imgbtn pointer to an image button object
 * @param state the new state of the button (from lv_btn_state_t enum)
 */
static inline void lv_imgbtn_set_state(lv_obj_t * imgbtn, lv_btn_state_t state)
{
    lv_btn_set_state(imgbtn, state);
 800a822:	2102      	movs	r1, #2
 800a824:	6820      	ldr	r0, [r4, #0]
 800a826:	f00a fced 	bl	8015204 <lv_btn_set_state>
 800a82a:	2102      	movs	r1, #2
 800a82c:	6860      	ldr	r0, [r4, #4]
			lv_imgbtn_set_state(imgbtn2[1], LV_BTN_STATE_TGL_REL);
			break;
		case 1:
			lv_imgbtn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_PR);
			lv_imgbtn_set_state(imgbtn1[1], LV_BTN_STATE_TGL_REL);
			lv_imgbtn_set_state(imgbtn2[0], LV_BTN_STATE_TGL_REL);
 800a82e:	4c1b      	ldr	r4, [pc, #108]	; (800a89c <update_sel_button_Audio_1+0x8c>)
 800a830:	f00a fce8 	bl	8015204 <lv_btn_set_state>
 800a834:	2102      	movs	r1, #2
 800a836:	6820      	ldr	r0, [r4, #0]
 800a838:	f00a fce4 	bl	8015204 <lv_btn_set_state>
 800a83c:	2102      	movs	r1, #2
 800a83e:	6860      	ldr	r0, [r4, #4]
			lv_imgbtn_set_state(imgbtn1[1], LV_BTN_STATE_TGL_REL);
			lv_imgbtn_set_state(imgbtn2[0], LV_BTN_STATE_TGL_REL);
			lv_imgbtn_set_state(imgbtn2[1], LV_BTN_STATE_TGL_PR);
			break;
	}
}
 800a840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a844:	f00a bcde 	b.w	8015204 <lv_btn_set_state>
			lv_imgbtn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_PR);
 800a848:	4c13      	ldr	r4, [pc, #76]	; (800a898 <update_sel_button_Audio_1+0x88>)
 800a84a:	2103      	movs	r1, #3
 800a84c:	e7ea      	b.n	800a824 <update_sel_button_Audio_1+0x14>
			lv_imgbtn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_REL);
 800a84e:	4c12      	ldr	r4, [pc, #72]	; (800a898 <update_sel_button_Audio_1+0x88>)
 800a850:	2102      	movs	r1, #2
 800a852:	6820      	ldr	r0, [r4, #0]
 800a854:	f00a fcd6 	bl	8015204 <lv_btn_set_state>
 800a858:	2103      	movs	r1, #3
 800a85a:	e7e7      	b.n	800a82c <update_sel_button_Audio_1+0x1c>
			lv_imgbtn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_REL);
 800a85c:	4c0e      	ldr	r4, [pc, #56]	; (800a898 <update_sel_button_Audio_1+0x88>)
 800a85e:	2102      	movs	r1, #2
 800a860:	6820      	ldr	r0, [r4, #0]
 800a862:	f00a fccf 	bl	8015204 <lv_btn_set_state>
 800a866:	2102      	movs	r1, #2
 800a868:	6860      	ldr	r0, [r4, #4]
			lv_imgbtn_set_state(imgbtn2[0], LV_BTN_STATE_TGL_PR);
 800a86a:	4c0c      	ldr	r4, [pc, #48]	; (800a89c <update_sel_button_Audio_1+0x8c>)
 800a86c:	f00a fcca 	bl	8015204 <lv_btn_set_state>
 800a870:	2103      	movs	r1, #3
 800a872:	e7e0      	b.n	800a836 <update_sel_button_Audio_1+0x26>
			lv_imgbtn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_REL);
 800a874:	4c08      	ldr	r4, [pc, #32]	; (800a898 <update_sel_button_Audio_1+0x88>)
 800a876:	2102      	movs	r1, #2
 800a878:	6820      	ldr	r0, [r4, #0]
 800a87a:	f00a fcc3 	bl	8015204 <lv_btn_set_state>
 800a87e:	6860      	ldr	r0, [r4, #4]
			lv_imgbtn_set_state(imgbtn2[0], LV_BTN_STATE_TGL_REL);
 800a880:	4c06      	ldr	r4, [pc, #24]	; (800a89c <update_sel_button_Audio_1+0x8c>)
 800a882:	2102      	movs	r1, #2
 800a884:	f00a fcbe 	bl	8015204 <lv_btn_set_state>
 800a888:	2102      	movs	r1, #2
 800a88a:	6820      	ldr	r0, [r4, #0]
 800a88c:	f00a fcba 	bl	8015204 <lv_btn_set_state>
 800a890:	2103      	movs	r1, #3
 800a892:	e7d4      	b.n	800a83e <update_sel_button_Audio_1+0x2e>
 800a894:	bd10      	pop	{r4, pc}
 800a896:	bf00      	nop
 800a898:	20005188 	.word	0x20005188
 800a89c:	20005190 	.word	0x20005190

0800a8a0 <update_sel_button_Audio_2>:

void update_sel_button_Audio_2(uint8_t idx)
{
 800a8a0:	b510      	push	{r4, lr}
	switch(idx) {
 800a8a2:	2806      	cmp	r0, #6
 800a8a4:	d873      	bhi.n	800a98e <update_sel_button_Audio_2+0xee>
 800a8a6:	e8df f000 	tbb	[pc, r0]
 800a8aa:	2004      	.short	0x2004
 800a8ac:	46362a23 	.word	0x46362a23
 800a8b0:	5a          	.byte	0x5a
 800a8b1:	00          	.byte	0x00
		case 0:
			lv_imgbtn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_REL);
 800a8b2:	4c37      	ldr	r4, [pc, #220]	; (800a990 <update_sel_button_Audio_2+0xf0>)
 800a8b4:	2102      	movs	r1, #2
 800a8b6:	6820      	ldr	r0, [r4, #0]
 800a8b8:	f00a fca4 	bl	8015204 <lv_btn_set_state>
 800a8bc:	2102      	movs	r1, #2
 800a8be:	6860      	ldr	r0, [r4, #4]
			lv_imgbtn_set_state(imgbtn2[3], LV_BTN_STATE_TGL_REL);
			break;
		case 1:
			lv_imgbtn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_PR);
			lv_imgbtn_set_state(imgbtn1[1], LV_BTN_STATE_TGL_REL);
			lv_imgbtn_set_state(imgbtn2[0], LV_BTN_STATE_TGL_REL);
 800a8c0:	4c34      	ldr	r4, [pc, #208]	; (800a994 <update_sel_button_Audio_2+0xf4>)
 800a8c2:	f00a fc9f 	bl	8015204 <lv_btn_set_state>
 800a8c6:	2102      	movs	r1, #2
 800a8c8:	6820      	ldr	r0, [r4, #0]
 800a8ca:	f00a fc9b 	bl	8015204 <lv_btn_set_state>
 800a8ce:	2102      	movs	r1, #2
 800a8d0:	6860      	ldr	r0, [r4, #4]
 800a8d2:	f00a fc97 	bl	8015204 <lv_btn_set_state>
 800a8d6:	2102      	movs	r1, #2
 800a8d8:	68a0      	ldr	r0, [r4, #8]
 800a8da:	f00a fc93 	bl	8015204 <lv_btn_set_state>
 800a8de:	2102      	movs	r1, #2
 800a8e0:	68e0      	ldr	r0, [r4, #12]
			lv_imgbtn_set_state(imgbtn2[1], LV_BTN_STATE_TGL_REL);
			lv_imgbtn_set_state(imgbtn2[2], LV_BTN_STATE_TGL_REL);
			lv_imgbtn_set_state(imgbtn2[3], LV_BTN_STATE_TGL_PR);
			break;
	}
}
 800a8e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8e6:	f00a bc8d 	b.w	8015204 <lv_btn_set_state>
			lv_imgbtn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_PR);
 800a8ea:	4c29      	ldr	r4, [pc, #164]	; (800a990 <update_sel_button_Audio_2+0xf0>)
 800a8ec:	2103      	movs	r1, #3
 800a8ee:	e7e2      	b.n	800a8b6 <update_sel_button_Audio_2+0x16>
			lv_imgbtn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_REL);
 800a8f0:	4c27      	ldr	r4, [pc, #156]	; (800a990 <update_sel_button_Audio_2+0xf0>)
 800a8f2:	2102      	movs	r1, #2
 800a8f4:	6820      	ldr	r0, [r4, #0]
 800a8f6:	f00a fc85 	bl	8015204 <lv_btn_set_state>
 800a8fa:	2103      	movs	r1, #3
 800a8fc:	e7df      	b.n	800a8be <update_sel_button_Audio_2+0x1e>
			lv_imgbtn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_REL);
 800a8fe:	4c24      	ldr	r4, [pc, #144]	; (800a990 <update_sel_button_Audio_2+0xf0>)
 800a900:	2102      	movs	r1, #2
 800a902:	6820      	ldr	r0, [r4, #0]
 800a904:	f00a fc7e 	bl	8015204 <lv_btn_set_state>
 800a908:	2102      	movs	r1, #2
 800a90a:	6860      	ldr	r0, [r4, #4]
			lv_imgbtn_set_state(imgbtn2[0], LV_BTN_STATE_TGL_PR);
 800a90c:	4c21      	ldr	r4, [pc, #132]	; (800a994 <update_sel_button_Audio_2+0xf4>)
 800a90e:	f00a fc79 	bl	8015204 <lv_btn_set_state>
 800a912:	2103      	movs	r1, #3
 800a914:	e7d8      	b.n	800a8c8 <update_sel_button_Audio_2+0x28>
			lv_imgbtn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_REL);
 800a916:	4c1e      	ldr	r4, [pc, #120]	; (800a990 <update_sel_button_Audio_2+0xf0>)
 800a918:	2102      	movs	r1, #2
 800a91a:	6820      	ldr	r0, [r4, #0]
 800a91c:	f00a fc72 	bl	8015204 <lv_btn_set_state>
 800a920:	6860      	ldr	r0, [r4, #4]
			lv_imgbtn_set_state(imgbtn2[0], LV_BTN_STATE_TGL_REL);
 800a922:	4c1c      	ldr	r4, [pc, #112]	; (800a994 <update_sel_button_Audio_2+0xf4>)
 800a924:	2102      	movs	r1, #2
 800a926:	f00a fc6d 	bl	8015204 <lv_btn_set_state>
 800a92a:	2102      	movs	r1, #2
 800a92c:	6820      	ldr	r0, [r4, #0]
 800a92e:	f00a fc69 	bl	8015204 <lv_btn_set_state>
 800a932:	2103      	movs	r1, #3
 800a934:	e7cc      	b.n	800a8d0 <update_sel_button_Audio_2+0x30>
			lv_imgbtn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_REL);
 800a936:	4c16      	ldr	r4, [pc, #88]	; (800a990 <update_sel_button_Audio_2+0xf0>)
 800a938:	2102      	movs	r1, #2
 800a93a:	6820      	ldr	r0, [r4, #0]
 800a93c:	f00a fc62 	bl	8015204 <lv_btn_set_state>
 800a940:	6860      	ldr	r0, [r4, #4]
			lv_imgbtn_set_state(imgbtn2[0], LV_BTN_STATE_TGL_REL);
 800a942:	4c14      	ldr	r4, [pc, #80]	; (800a994 <update_sel_button_Audio_2+0xf4>)
 800a944:	2102      	movs	r1, #2
 800a946:	f00a fc5d 	bl	8015204 <lv_btn_set_state>
 800a94a:	2102      	movs	r1, #2
 800a94c:	6820      	ldr	r0, [r4, #0]
 800a94e:	f00a fc59 	bl	8015204 <lv_btn_set_state>
 800a952:	2102      	movs	r1, #2
 800a954:	6860      	ldr	r0, [r4, #4]
 800a956:	f00a fc55 	bl	8015204 <lv_btn_set_state>
 800a95a:	2103      	movs	r1, #3
 800a95c:	e7bc      	b.n	800a8d8 <update_sel_button_Audio_2+0x38>
			lv_imgbtn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_REL);
 800a95e:	4c0c      	ldr	r4, [pc, #48]	; (800a990 <update_sel_button_Audio_2+0xf0>)
 800a960:	2102      	movs	r1, #2
 800a962:	6820      	ldr	r0, [r4, #0]
 800a964:	f00a fc4e 	bl	8015204 <lv_btn_set_state>
 800a968:	6860      	ldr	r0, [r4, #4]
			lv_imgbtn_set_state(imgbtn2[0], LV_BTN_STATE_TGL_REL);
 800a96a:	4c0a      	ldr	r4, [pc, #40]	; (800a994 <update_sel_button_Audio_2+0xf4>)
 800a96c:	2102      	movs	r1, #2
 800a96e:	f00a fc49 	bl	8015204 <lv_btn_set_state>
 800a972:	2102      	movs	r1, #2
 800a974:	6820      	ldr	r0, [r4, #0]
 800a976:	f00a fc45 	bl	8015204 <lv_btn_set_state>
 800a97a:	2102      	movs	r1, #2
 800a97c:	6860      	ldr	r0, [r4, #4]
 800a97e:	f00a fc41 	bl	8015204 <lv_btn_set_state>
 800a982:	2102      	movs	r1, #2
 800a984:	68a0      	ldr	r0, [r4, #8]
 800a986:	f00a fc3d 	bl	8015204 <lv_btn_set_state>
 800a98a:	2103      	movs	r1, #3
 800a98c:	e7a8      	b.n	800a8e0 <update_sel_button_Audio_2+0x40>
 800a98e:	bd10      	pop	{r4, pc}
 800a990:	20005188 	.word	0x20005188
 800a994:	20005190 	.word	0x20005190

0800a998 <ButtonEventTelaAudio>:

void ButtonEventTelaAudio(uint8_t event, uint8_t tipo, uint8_t id)
{
	uint32_t x;

	if(event == EVT_PBTN_INPUT) {
 800a998:	2810      	cmp	r0, #16
{
 800a99a:	b538      	push	{r3, r4, r5, lr}
	if(event == EVT_PBTN_INPUT) {
 800a99c:	d14d      	bne.n	800aa3a <ButtonEventTelaAudio+0xa2>
		if(tipo == PBTN_SCLK) {	// Single Click
 800a99e:	2901      	cmp	r1, #1
 800a9a0:	d14b      	bne.n	800aa3a <ButtonEventTelaAudio+0xa2>
			switch(id) {
 800a9a2:	2a03      	cmp	r2, #3
 800a9a4:	d849      	bhi.n	800aa3a <ButtonEventTelaAudio+0xa2>
 800a9a6:	e8df f002 	tbb	[pc, r2]
 800a9aa:	1802      	.short	0x1802
 800a9ac:	4225      	.short	0x4225
				case KEY_DN:
					if(TelaAudioProg == 0) {
 800a9ae:	4b23      	ldr	r3, [pc, #140]	; (800aa3c <ButtonEventTelaAudio+0xa4>)
 800a9b0:	681a      	ldr	r2, [r3, #0]
 800a9b2:	b932      	cbnz	r2, 800a9c2 <ButtonEventTelaAudio+0x2a>
						lv_event_send(img_fundo, LV_EVENT_APPLY, NULL);
 800a9b4:	4b22      	ldr	r3, [pc, #136]	; (800aa40 <ButtonEventTelaAudio+0xa8>)
 800a9b6:	2111      	movs	r1, #17
						update_sel_button_Audio(IndiceAudio+1);
					}
					break;
				case KEY_UP:
					if(TelaAudioProg == 0) {
						lv_event_send(imgbtn_next[0], LV_EVENT_APPLY, NULL);
 800a9b8:	6818      	ldr	r0, [r3, #0]
					update_sel_button_Audio(0);
					break;
			}
		}
	}
}
 800a9ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
						lv_event_send(imgbtn_next[0], LV_EVENT_APPLY, NULL);
 800a9be:	f003 bf07 	b.w	800e7d0 <lv_event_send>
						if(IndiceAudio >= 1) IndiceAudio--;
 800a9c2:	4b20      	ldr	r3, [pc, #128]	; (800aa44 <ButtonEventTelaAudio+0xac>)
 800a9c4:	681a      	ldr	r2, [r3, #0]
 800a9c6:	b10a      	cbz	r2, 800a9cc <ButtonEventTelaAudio+0x34>
 800a9c8:	3a01      	subs	r2, #1
 800a9ca:	601a      	str	r2, [r3, #0]
						update_sel_button_Audio(IndiceAudio+1);
 800a9cc:	6818      	ldr	r0, [r3, #0]
 800a9ce:	3001      	adds	r0, #1
 800a9d0:	b2c0      	uxtb	r0, r0
}
 800a9d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
					update_sel_button_Audio(0);
 800a9d6:	f7ff bf63 	b.w	800a8a0 <update_sel_button_Audio_2>
					if(TelaAudioProg == 0) {
 800a9da:	4b18      	ldr	r3, [pc, #96]	; (800aa3c <ButtonEventTelaAudio+0xa4>)
 800a9dc:	681a      	ldr	r2, [r3, #0]
 800a9de:	b912      	cbnz	r2, 800a9e6 <ButtonEventTelaAudio+0x4e>
						lv_event_send(imgbtn_next[0], LV_EVENT_APPLY, NULL);
 800a9e0:	2111      	movs	r1, #17
 800a9e2:	4b19      	ldr	r3, [pc, #100]	; (800aa48 <ButtonEventTelaAudio+0xb0>)
 800a9e4:	e7e8      	b.n	800a9b8 <ButtonEventTelaAudio+0x20>
						IndiceAudio++;
 800a9e6:	4b17      	ldr	r3, [pc, #92]	; (800aa44 <ButtonEventTelaAudio+0xac>)
 800a9e8:	681a      	ldr	r2, [r3, #0]
 800a9ea:	3201      	adds	r2, #1
						if(IndiceAudio > 5) IndiceAudio = 0;
 800a9ec:	2a05      	cmp	r2, #5
 800a9ee:	bf88      	it	hi
 800a9f0:	2200      	movhi	r2, #0
 800a9f2:	e7ea      	b.n	800a9ca <ButtonEventTelaAudio+0x32>
					if(TelaAudioProg == 0) {
 800a9f4:	4b11      	ldr	r3, [pc, #68]	; (800aa3c <ButtonEventTelaAudio+0xa4>)
 800a9f6:	681a      	ldr	r2, [r3, #0]
 800a9f8:	b922      	cbnz	r2, 800aa04 <ButtonEventTelaAudio+0x6c>
						TelaAudioProg = 1;
 800a9fa:	2001      	movs	r0, #1
 800a9fc:	6018      	str	r0, [r3, #0]
						IndiceAudio = 0;
 800a9fe:	4b11      	ldr	r3, [pc, #68]	; (800aa44 <ButtonEventTelaAudio+0xac>)
 800aa00:	601a      	str	r2, [r3, #0]
 800aa02:	e7e6      	b.n	800a9d2 <ButtonEventTelaAudio+0x3a>
					else if(TelaAudioProg == 1) {
 800aa04:	2a01      	cmp	r2, #1
 800aa06:	d118      	bne.n	800aa3a <ButtonEventTelaAudio+0xa2>
						TelaAudioProg = 2;
 800aa08:	2202      	movs	r2, #2
 800aa0a:	601a      	str	r2, [r3, #0]
						if(IndiceAudio == 0 || IndiceAudio == 1) {
 800aa0c:	4b0d      	ldr	r3, [pc, #52]	; (800aa44 <ButtonEventTelaAudio+0xac>)
 800aa0e:	681c      	ldr	r4, [r3, #0]
 800aa10:	2c01      	cmp	r4, #1
							x = (uint32_t)IndiceAudio - 2;
 800aa12:	bf8a      	itet	hi
 800aa14:	3c02      	subhi	r4, #2
							lv_obj_set_user_data(imgbtn1[x], x);
 800aa16:	4d0d      	ldrls	r5, [pc, #52]	; (800aa4c <ButtonEventTelaAudio+0xb4>)
							lv_obj_set_user_data(imgbtn2[x], x);
 800aa18:	4d0d      	ldrhi	r5, [pc, #52]	; (800aa50 <ButtonEventTelaAudio+0xb8>)
 800aa1a:	4621      	mov	r1, r4
 800aa1c:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800aa20:	f004 fded 	bl	800f5fe <lv_obj_set_user_data>
							lv_event_send(imgbtn2[x], LV_EVENT_RELEASED, NULL);
 800aa24:	2200      	movs	r2, #0
 800aa26:	2107      	movs	r1, #7
 800aa28:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800aa2c:	e7c5      	b.n	800a9ba <ButtonEventTelaAudio+0x22>
					TelaAudioProg = 0;
 800aa2e:	4b03      	ldr	r3, [pc, #12]	; (800aa3c <ButtonEventTelaAudio+0xa4>)
 800aa30:	2000      	movs	r0, #0
 800aa32:	6018      	str	r0, [r3, #0]
					IndiceAudio = 0;
 800aa34:	4b03      	ldr	r3, [pc, #12]	; (800aa44 <ButtonEventTelaAudio+0xac>)
 800aa36:	6018      	str	r0, [r3, #0]
 800aa38:	e7cb      	b.n	800a9d2 <ButtonEventTelaAudio+0x3a>
 800aa3a:	bd38      	pop	{r3, r4, r5, pc}
 800aa3c:	20005164 	.word	0x20005164
 800aa40:	20005184 	.word	0x20005184
 800aa44:	20005158 	.word	0x20005158
 800aa48:	200051a0 	.word	0x200051a0
 800aa4c:	20005188 	.word	0x20005188
 800aa50:	20005190 	.word	0x20005190

0800aa54 <ButtonEventTelaAudio_1>:

void ButtonEventTelaAudio_1(uint8_t event, uint8_t tipo, uint8_t id)
{
	uint32_t x;

	if(event == EVT_PBTN_INPUT) {
 800aa54:	2810      	cmp	r0, #16
{
 800aa56:	b538      	push	{r3, r4, r5, lr}
	if(event == EVT_PBTN_INPUT) {
 800aa58:	d150      	bne.n	800aafc <ButtonEventTelaAudio_1+0xa8>
		if(tipo == PBTN_SCLK) {	// Single Click
 800aa5a:	2901      	cmp	r1, #1
 800aa5c:	d14e      	bne.n	800aafc <ButtonEventTelaAudio_1+0xa8>
			switch(id) {
 800aa5e:	2a03      	cmp	r2, #3
 800aa60:	d84c      	bhi.n	800aafc <ButtonEventTelaAudio_1+0xa8>
 800aa62:	e8df f002 	tbb	[pc, r2]
 800aa66:	1802      	.short	0x1802
 800aa68:	4525      	.short	0x4525
				case KEY_DN:
					if(TelaAudioProg_1 == 0) {
 800aa6a:	4b25      	ldr	r3, [pc, #148]	; (800ab00 <ButtonEventTelaAudio_1+0xac>)
 800aa6c:	681a      	ldr	r2, [r3, #0]
 800aa6e:	b932      	cbnz	r2, 800aa7e <ButtonEventTelaAudio_1+0x2a>
						lv_event_send(imgbtn_prev[1], LV_EVENT_APPLY, NULL);
 800aa70:	4b24      	ldr	r3, [pc, #144]	; (800ab04 <ButtonEventTelaAudio_1+0xb0>)
 800aa72:	2111      	movs	r1, #17
						update_sel_button_Audio_1(IndiceAudio_1 + 1);
					}
					break;
				case KEY_UP:
					if(TelaAudioProg_1 == 0) {
						lv_event_send(imgbtn_next[1], LV_EVENT_APPLY, NULL);
 800aa74:	6858      	ldr	r0, [r3, #4]
					update_sel_button_Audio_1(0);
					break;
			}
		}
	}
}
 800aa76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
						lv_event_send(imgbtn_next[1], LV_EVENT_APPLY, NULL);
 800aa7a:	f003 bea9 	b.w	800e7d0 <lv_event_send>
						if(IndiceAudio_1 >= 1) IndiceAudio_1--;
 800aa7e:	4b22      	ldr	r3, [pc, #136]	; (800ab08 <ButtonEventTelaAudio_1+0xb4>)
 800aa80:	681a      	ldr	r2, [r3, #0]
 800aa82:	b10a      	cbz	r2, 800aa88 <ButtonEventTelaAudio_1+0x34>
 800aa84:	3a01      	subs	r2, #1
 800aa86:	601a      	str	r2, [r3, #0]
						update_sel_button_Audio_1(IndiceAudio_1 + 1);
 800aa88:	6818      	ldr	r0, [r3, #0]
 800aa8a:	3001      	adds	r0, #1
 800aa8c:	b2c0      	uxtb	r0, r0
}
 800aa8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
					update_sel_button_Audio_1(0);
 800aa92:	f7ff bebd 	b.w	800a810 <update_sel_button_Audio_1>
					if(TelaAudioProg_1 == 0) {
 800aa96:	4b1a      	ldr	r3, [pc, #104]	; (800ab00 <ButtonEventTelaAudio_1+0xac>)
 800aa98:	681a      	ldr	r2, [r3, #0]
 800aa9a:	b912      	cbnz	r2, 800aaa2 <ButtonEventTelaAudio_1+0x4e>
						lv_event_send(imgbtn_next[1], LV_EVENT_APPLY, NULL);
 800aa9c:	2111      	movs	r1, #17
 800aa9e:	4b1b      	ldr	r3, [pc, #108]	; (800ab0c <ButtonEventTelaAudio_1+0xb8>)
 800aaa0:	e7e8      	b.n	800aa74 <ButtonEventTelaAudio_1+0x20>
						IndiceAudio_1++;
 800aaa2:	4b19      	ldr	r3, [pc, #100]	; (800ab08 <ButtonEventTelaAudio_1+0xb4>)
 800aaa4:	681a      	ldr	r2, [r3, #0]
 800aaa6:	3201      	adds	r2, #1
						if(IndiceAudio_1 > 3) IndiceAudio_1 = 0;
 800aaa8:	2a03      	cmp	r2, #3
 800aaaa:	bf88      	it	hi
 800aaac:	2200      	movhi	r2, #0
 800aaae:	e7ea      	b.n	800aa86 <ButtonEventTelaAudio_1+0x32>
					if(TelaAudioProg_1 == 0) {
 800aab0:	4b13      	ldr	r3, [pc, #76]	; (800ab00 <ButtonEventTelaAudio_1+0xac>)
 800aab2:	681a      	ldr	r2, [r3, #0]
 800aab4:	b922      	cbnz	r2, 800aac0 <ButtonEventTelaAudio_1+0x6c>
						TelaAudioProg_1 = 1;
 800aab6:	2001      	movs	r0, #1
 800aab8:	6018      	str	r0, [r3, #0]
						IndiceAudio_1 = 0;
 800aaba:	4b13      	ldr	r3, [pc, #76]	; (800ab08 <ButtonEventTelaAudio_1+0xb4>)
 800aabc:	601a      	str	r2, [r3, #0]
 800aabe:	e7e6      	b.n	800aa8e <ButtonEventTelaAudio_1+0x3a>
					else if(TelaAudioProg_1 == 1) {
 800aac0:	2a01      	cmp	r2, #1
 800aac2:	d11b      	bne.n	800aafc <ButtonEventTelaAudio_1+0xa8>
						TelaAudioProg_1 = 2;
 800aac4:	2202      	movs	r2, #2
 800aac6:	601a      	str	r2, [r3, #0]
						if(IndiceAudio_1 == 0 || IndiceAudio_1 == 1) {
 800aac8:	4b0f      	ldr	r3, [pc, #60]	; (800ab08 <ButtonEventTelaAudio_1+0xb4>)
 800aaca:	681c      	ldr	r4, [r3, #0]
 800aacc:	2c01      	cmp	r4, #1
 800aace:	d80a      	bhi.n	800aae6 <ButtonEventTelaAudio_1+0x92>
							lv_obj_set_user_data(imgbtn1[x], x);
 800aad0:	4d0f      	ldr	r5, [pc, #60]	; (800ab10 <ButtonEventTelaAudio_1+0xbc>)
							lv_obj_set_user_data(imgbtn2[x], x);
 800aad2:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800aad6:	4621      	mov	r1, r4
 800aad8:	f004 fd91 	bl	800f5fe <lv_obj_set_user_data>
							lv_event_send(imgbtn2[x], LV_EVENT_RELEASED, NULL);
 800aadc:	2200      	movs	r2, #0
 800aade:	2107      	movs	r1, #7
 800aae0:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800aae4:	e7c7      	b.n	800aa76 <ButtonEventTelaAudio_1+0x22>
						else if(IndiceAudio_1 == 2 || IndiceAudio_1 == 3) {
 800aae6:	3c02      	subs	r4, #2
 800aae8:	2c01      	cmp	r4, #1
 800aaea:	d807      	bhi.n	800aafc <ButtonEventTelaAudio_1+0xa8>
							lv_obj_set_user_data(imgbtn2[x], x);
 800aaec:	4d09      	ldr	r5, [pc, #36]	; (800ab14 <ButtonEventTelaAudio_1+0xc0>)
 800aaee:	e7f0      	b.n	800aad2 <ButtonEventTelaAudio_1+0x7e>
					TelaAudioProg_1 = 0;
 800aaf0:	4b03      	ldr	r3, [pc, #12]	; (800ab00 <ButtonEventTelaAudio_1+0xac>)
 800aaf2:	2000      	movs	r0, #0
 800aaf4:	6018      	str	r0, [r3, #0]
					IndiceAudio_1 = 0;
 800aaf6:	4b04      	ldr	r3, [pc, #16]	; (800ab08 <ButtonEventTelaAudio_1+0xb4>)
 800aaf8:	6018      	str	r0, [r3, #0]
 800aafa:	e7c8      	b.n	800aa8e <ButtonEventTelaAudio_1+0x3a>
 800aafc:	bd38      	pop	{r3, r4, r5, pc}
 800aafe:	bf00      	nop
 800ab00:	20005168 	.word	0x20005168
 800ab04:	200051a8 	.word	0x200051a8
 800ab08:	2000515c 	.word	0x2000515c
 800ab0c:	200051a0 	.word	0x200051a0
 800ab10:	20005188 	.word	0x20005188
 800ab14:	20005190 	.word	0x20005190

0800ab18 <ButtonEventTelaAudio_2>:

void ButtonEventTelaAudio_2(uint8_t event, uint8_t tipo, uint8_t id)
{
	uint32_t x;

	if(event == EVT_PBTN_INPUT) {
 800ab18:	2810      	cmp	r0, #16
{
 800ab1a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(event == EVT_PBTN_INPUT) {
 800ab1c:	d10f      	bne.n	800ab3e <ButtonEventTelaAudio_2+0x26>
		if(tipo == PBTN_SCLK) {	// Single Click
 800ab1e:	2901      	cmp	r1, #1
 800ab20:	d10d      	bne.n	800ab3e <ButtonEventTelaAudio_2+0x26>
			switch(id) {
 800ab22:	2a03      	cmp	r2, #3
 800ab24:	d80b      	bhi.n	800ab3e <ButtonEventTelaAudio_2+0x26>
 800ab26:	e8df f002 	tbb	[pc, r2]
 800ab2a:	1702      	.short	0x1702
 800ab2c:	5522      	.short	0x5522
				case KEY_DN:
					if(TelaAudioProg_2 == 0) {
 800ab2e:	4b2c      	ldr	r3, [pc, #176]	; (800abe0 <ButtonEventTelaAudio_2+0xc8>)
 800ab30:	681a      	ldr	r2, [r3, #0]
 800ab32:	b932      	cbnz	r2, 800ab42 <ButtonEventTelaAudio_2+0x2a>
						lv_event_send(imgbtn_prev[2], LV_EVENT_APPLY, NULL);
 800ab34:	4b2b      	ldr	r3, [pc, #172]	; (800abe4 <ButtonEventTelaAudio_2+0xcc>)
 800ab36:	6898      	ldr	r0, [r3, #8]
 800ab38:	2111      	movs	r1, #17
					else if(TelaAudioProg_2 == 1) {
						TelaAudioProg_2 = 2;
						if(IndiceAudio_2 == 0 || IndiceAudio_2 == 1) {
							x = (uint32_t) IndiceAudio_2;
							lv_obj_set_user_data(imgbtn1[x], x);
							lv_event_send(imgbtn1[x], LV_EVENT_RELEASED, &x);
 800ab3a:	f003 fe49 	bl	800e7d0 <lv_event_send>
					update_sel_button_Audio_2(0);
					break;
			}
		}
	}
}
 800ab3e:	b003      	add	sp, #12
 800ab40:	bd30      	pop	{r4, r5, pc}
						if(IndiceAudio_2 >= 1) IndiceAudio_2--;
 800ab42:	4b29      	ldr	r3, [pc, #164]	; (800abe8 <ButtonEventTelaAudio_2+0xd0>)
 800ab44:	681a      	ldr	r2, [r3, #0]
 800ab46:	b10a      	cbz	r2, 800ab4c <ButtonEventTelaAudio_2+0x34>
 800ab48:	3a01      	subs	r2, #1
 800ab4a:	601a      	str	r2, [r3, #0]
						update_sel_button_Audio_2(IndiceAudio_2 + 1);
 800ab4c:	6818      	ldr	r0, [r3, #0]
 800ab4e:	3001      	adds	r0, #1
 800ab50:	b2c0      	uxtb	r0, r0
					update_sel_button_Audio_2(0);
 800ab52:	f7ff fea5 	bl	800a8a0 <update_sel_button_Audio_2>
}
 800ab56:	e7f2      	b.n	800ab3e <ButtonEventTelaAudio_2+0x26>
					if(TelaAudioProg_2 != 0) {
 800ab58:	4b21      	ldr	r3, [pc, #132]	; (800abe0 <ButtonEventTelaAudio_2+0xc8>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d0ee      	beq.n	800ab3e <ButtonEventTelaAudio_2+0x26>
						IndiceAudio_2++;
 800ab60:	4b21      	ldr	r3, [pc, #132]	; (800abe8 <ButtonEventTelaAudio_2+0xd0>)
 800ab62:	681a      	ldr	r2, [r3, #0]
 800ab64:	3201      	adds	r2, #1
						if(IndiceAudio_2 > 5) IndiceAudio_2 = 0;
 800ab66:	2a05      	cmp	r2, #5
 800ab68:	bf88      	it	hi
 800ab6a:	2200      	movhi	r2, #0
 800ab6c:	e7ed      	b.n	800ab4a <ButtonEventTelaAudio_2+0x32>
					logI("Tela Audio_2 - Key_Enter Var: %ld Idx: %ld\n", TelaAudioProg_2, IndiceAudio_2);
 800ab6e:	4c1c      	ldr	r4, [pc, #112]	; (800abe0 <ButtonEventTelaAudio_2+0xc8>)
 800ab70:	4d1d      	ldr	r5, [pc, #116]	; (800abe8 <ButtonEventTelaAudio_2+0xd0>)
 800ab72:	6821      	ldr	r1, [r4, #0]
 800ab74:	682a      	ldr	r2, [r5, #0]
 800ab76:	481d      	ldr	r0, [pc, #116]	; (800abec <ButtonEventTelaAudio_2+0xd4>)
 800ab78:	f7f6 fd78 	bl	800166c <logI>
					if(TelaAudioProg_2 == 0) {
 800ab7c:	6823      	ldr	r3, [r4, #0]
 800ab7e:	b91b      	cbnz	r3, 800ab88 <ButtonEventTelaAudio_2+0x70>
						TelaAudioProg_2 = 1;
 800ab80:	2001      	movs	r0, #1
 800ab82:	6020      	str	r0, [r4, #0]
						IndiceAudio_2 = 0;
 800ab84:	602b      	str	r3, [r5, #0]
 800ab86:	e7e4      	b.n	800ab52 <ButtonEventTelaAudio_2+0x3a>
					else if(TelaAudioProg_2 == 1) {
 800ab88:	2b01      	cmp	r3, #1
 800ab8a:	d1d8      	bne.n	800ab3e <ButtonEventTelaAudio_2+0x26>
						if(IndiceAudio_2 == 0 || IndiceAudio_2 == 1) {
 800ab8c:	6829      	ldr	r1, [r5, #0]
						TelaAudioProg_2 = 2;
 800ab8e:	2302      	movs	r3, #2
						if(IndiceAudio_2 == 0 || IndiceAudio_2 == 1) {
 800ab90:	2901      	cmp	r1, #1
						TelaAudioProg_2 = 2;
 800ab92:	6023      	str	r3, [r4, #0]
						if(IndiceAudio_2 == 0 || IndiceAudio_2 == 1) {
 800ab94:	d80b      	bhi.n	800abae <ButtonEventTelaAudio_2+0x96>
							lv_obj_set_user_data(imgbtn1[x], x);
 800ab96:	4c16      	ldr	r4, [pc, #88]	; (800abf0 <ButtonEventTelaAudio_2+0xd8>)
							x = (uint32_t) IndiceAudio_2;
 800ab98:	9101      	str	r1, [sp, #4]
							lv_obj_set_user_data(imgbtn1[x], x);
 800ab9a:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
 800ab9e:	f004 fd2e 	bl	800f5fe <lv_obj_set_user_data>
							lv_event_send(imgbtn1[x], LV_EVENT_RELEASED, &x);
 800aba2:	9b01      	ldr	r3, [sp, #4]
 800aba4:	aa01      	add	r2, sp, #4
 800aba6:	2107      	movs	r1, #7
 800aba8:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800abac:	e7c5      	b.n	800ab3a <ButtonEventTelaAudio_2+0x22>
							x = (uint32_t) IndiceAudio_2 - 2;
 800abae:	3902      	subs	r1, #2
							lv_obj_set_user_data(imgbtn2[x], x);
 800abb0:	4c10      	ldr	r4, [pc, #64]	; (800abf4 <ButtonEventTelaAudio_2+0xdc>)
							x = (uint32_t) IndiceAudio_2 - 2;
 800abb2:	9101      	str	r1, [sp, #4]
							lv_obj_set_user_data(imgbtn2[x], x);
 800abb4:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
 800abb8:	f004 fd21 	bl	800f5fe <lv_obj_set_user_data>
							lv_event_send(imgbtn2[x], LV_EVENT_RELEASED, &x);
 800abbc:	9b01      	ldr	r3, [sp, #4]
 800abbe:	aa01      	add	r2, sp, #4
 800abc0:	2107      	movs	r1, #7
 800abc2:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800abc6:	f003 fe03 	bl	800e7d0 <lv_event_send>
							logI("Debug: MP3  DBG: %ld\n", x);
 800abca:	9901      	ldr	r1, [sp, #4]
 800abcc:	480a      	ldr	r0, [pc, #40]	; (800abf8 <ButtonEventTelaAudio_2+0xe0>)
 800abce:	f7f6 fd4d 	bl	800166c <logI>
 800abd2:	e7b4      	b.n	800ab3e <ButtonEventTelaAudio_2+0x26>
					TelaAudioProg_2 = 0;
 800abd4:	4b02      	ldr	r3, [pc, #8]	; (800abe0 <ButtonEventTelaAudio_2+0xc8>)
 800abd6:	2000      	movs	r0, #0
 800abd8:	6018      	str	r0, [r3, #0]
					IndiceAudio_2 = 0;
 800abda:	4b03      	ldr	r3, [pc, #12]	; (800abe8 <ButtonEventTelaAudio_2+0xd0>)
 800abdc:	6018      	str	r0, [r3, #0]
 800abde:	e7b8      	b.n	800ab52 <ButtonEventTelaAudio_2+0x3a>
 800abe0:	2000516c 	.word	0x2000516c
 800abe4:	200051a8 	.word	0x200051a8
 800abe8:	20005160 	.word	0x20005160
 800abec:	0802b4a8 	.word	0x0802b4a8
 800abf0:	20005188 	.word	0x20005188
 800abf4:	20005190 	.word	0x20005190
 800abf8:	0802b4d4 	.word	0x0802b4d4

0800abfc <btn_event_esc_freq>:
	lv_bar_set_style(bar[pos], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
}

static void btn_event_esc_freq(lv_obj_t * btn, lv_event_t event)
{
	if(event == LV_EVENT_APPLY) {
 800abfc:	2911      	cmp	r1, #17
{
 800abfe:	b508      	push	{r3, lr}
	if(event == LV_EVENT_APPLY) {
 800ac00:	d107      	bne.n	800ac12 <btn_event_esc_freq+0x16>
		//printf("Button ESC Released\n");
		lv_obj_del(Tela_Freq);
 800ac02:	4b04      	ldr	r3, [pc, #16]	; (800ac14 <btn_event_esc_freq+0x18>)
 800ac04:	6818      	ldr	r0, [r3, #0]
 800ac06:	f004 fb4e 	bl	800f2a6 <lv_obj_del>
		screen_sel();
	}
}
 800ac0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_sel();
 800ac0e:	f002 bff7 	b.w	800dc00 <screen_sel>
 800ac12:	bd08      	pop	{r3, pc}
 800ac14:	20005268 	.word	0x20005268

0800ac18 <event_handler>:

static void event_handler(lv_obj_t * obj, lv_event_t event)
{
 800ac18:	b530      	push	{r4, r5, lr}
    if(event == LV_EVENT_CLICKED) {
 800ac1a:	2906      	cmp	r1, #6
{
 800ac1c:	b089      	sub	sp, #36	; 0x24
 800ac1e:	4605      	mov	r5, r0
    if(event == LV_EVENT_CLICKED) {
 800ac20:	d140      	bne.n	800aca4 <event_handler+0x8c>
        char buf[32];
        char out[6];

        uint32_t id = lv_obj_get_user_data(obj);
 800ac22:	f004 fcea 	bl	800f5fa <lv_obj_get_user_data>
 * @param buf pointer to an array to store the string
 * @param buf_size size of `buf` in bytes. 0: to ignore it.
 */
static inline void lv_roller_get_selected_str(const lv_obj_t * roller, char * buf, uint16_t buf_size)
{
    lv_ddlist_get_selected_str(roller, buf, buf_size);
 800ac26:	2220      	movs	r2, #32
 800ac28:	4604      	mov	r4, r0
 800ac2a:	4669      	mov	r1, sp
 800ac2c:	4628      	mov	r0, r5
 800ac2e:	f00b fd60 	bl	80166f2 <lv_ddlist_get_selected_str>

        lv_roller_get_selected_str(obj, buf, sizeof(buf));
        if(id == 4 && (atoi(buf) == 8 || atoi(buf) == 9)) {
 800ac32:	2c04      	cmp	r4, #4
 800ac34:	4c1f      	ldr	r4, [pc, #124]	; (800acb4 <event_handler+0x9c>)
 800ac36:	d11c      	bne.n	800ac72 <event_handler+0x5a>
 800ac38:	4668      	mov	r0, sp
 800ac3a:	f00e fcd6 	bl	80195ea <atoi>
 800ac3e:	2808      	cmp	r0, #8
 800ac40:	d132      	bne.n	800aca8 <event_handler+0x90>
        	lv_roller_set_options(rollerfreq[5], "0", LV_ROLLER_MODE_INIFINITE);
 800ac42:	2201      	movs	r2, #1
 800ac44:	491c      	ldr	r1, [pc, #112]	; (800acb8 <event_handler+0xa0>)
 800ac46:	6960      	ldr	r0, [r4, #20]
 800ac48:	f00e fc4c 	bl	80194e4 <lv_roller_set_options>
        	lv_roller_set_selected(rollerfreq[5], 0, true);
 800ac4c:	2201      	movs	r2, #1
 800ac4e:	2100      	movs	r1, #0
 800ac50:	6960      	ldr	r0, [r4, #20]
 800ac52:	f00e fba3 	bl	801939c <lv_roller_set_selected>
        }
        if(id == 4 &&  atoi(buf) == 0) {
 800ac56:	4668      	mov	r0, sp
 800ac58:	f00e fcc7 	bl	80195ea <atoi>
 800ac5c:	b948      	cbnz	r0, 800ac72 <event_handler+0x5a>
        	lv_roller_set_options(rollerfreq[5], "0\n1", LV_ROLLER_MODE_INIFINITE);
 800ac5e:	2201      	movs	r2, #1
 800ac60:	4916      	ldr	r1, [pc, #88]	; (800acbc <event_handler+0xa4>)
 800ac62:	6960      	ldr	r0, [r4, #20]
 800ac64:	f00e fc3e 	bl	80194e4 <lv_roller_set_options>
        	lv_roller_set_selected(rollerfreq[5], 1, true);
 800ac68:	2201      	movs	r2, #1
 800ac6a:	4611      	mov	r1, r2
 800ac6c:	6960      	ldr	r0, [r4, #20]
 800ac6e:	f00e fb95 	bl	801939c <lv_roller_set_selected>
 800ac72:	2220      	movs	r2, #32
 800ac74:	4669      	mov	r1, sp
 800ac76:	6960      	ldr	r0, [r4, #20]
 800ac78:	f00b fd3b 	bl	80166f2 <lv_ddlist_get_selected_str>
 800ac7c:	2220      	movs	r2, #32
 800ac7e:	4669      	mov	r1, sp
 800ac80:	6920      	ldr	r0, [r4, #16]
 800ac82:	f00b fd36 	bl	80166f2 <lv_ddlist_get_selected_str>
 800ac86:	2220      	movs	r2, #32
 800ac88:	4669      	mov	r1, sp
 800ac8a:	68e0      	ldr	r0, [r4, #12]
 800ac8c:	f00b fd31 	bl	80166f2 <lv_ddlist_get_selected_str>
 800ac90:	2220      	movs	r2, #32
 800ac92:	4669      	mov	r1, sp
 800ac94:	68a0      	ldr	r0, [r4, #8]
 800ac96:	f00b fd2c 	bl	80166f2 <lv_ddlist_get_selected_str>
 800ac9a:	2220      	movs	r2, #32
 800ac9c:	4669      	mov	r1, sp
 800ac9e:	6860      	ldr	r0, [r4, #4]
 800aca0:	f00b fd27 	bl	80166f2 <lv_ddlist_get_selected_str>
        out[4] = buf[0];
        out[5] = 0;

        //printf("Selected Roller: %d Digit: %s  Frequencia: %d\n", id, buf, atoi(out));
    }
}
 800aca4:	b009      	add	sp, #36	; 0x24
 800aca6:	bd30      	pop	{r4, r5, pc}
        if(id == 4 && (atoi(buf) == 8 || atoi(buf) == 9)) {
 800aca8:	4668      	mov	r0, sp
 800acaa:	f00e fc9e 	bl	80195ea <atoi>
 800acae:	2809      	cmp	r0, #9
 800acb0:	d1d1      	bne.n	800ac56 <event_handler+0x3e>
 800acb2:	e7c6      	b.n	800ac42 <event_handler+0x2a>
 800acb4:	200052c4 	.word	0x200052c4
 800acb8:	0802b64b 	.word	0x0802b64b
 800acbc:	0802b64d 	.word	0x0802b64d

0800acc0 <create_vumeter_freq>:
{
 800acc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800acc2:	4e30      	ldr	r6, [pc, #192]	; (800ad84 <create_vumeter_freq+0xc4>)
 800acc4:	4930      	ldr	r1, [pc, #192]	; (800ad88 <create_vumeter_freq+0xc8>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800acc6:	4c31      	ldr	r4, [pc, #196]	; (800ad8c <create_vumeter_freq+0xcc>)
		bar[x] = lv_bar_create(Tela_Freq, NULL);
 800acc8:	4f31      	ldr	r7, [pc, #196]	; (800ad90 <create_vumeter_freq+0xd0>)
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800acca:	4630      	mov	r0, r6
 800accc:	f004 ffd6 	bl	800fc7c <lv_style_copy>
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800acd0:	4b30      	ldr	r3, [pc, #192]	; (800ad94 <create_vumeter_freq+0xd4>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800acd2:	492d      	ldr	r1, [pc, #180]	; (800ad88 <create_vumeter_freq+0xc8>)
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800acd4:	881b      	ldrh	r3, [r3, #0]
 800acd6:	80b3      	strh	r3, [r6, #4]
	style_indic_bar.body.radius = 0;
 800acd8:	2500      	movs	r5, #0
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800acda:	4620      	mov	r0, r4
	style_indic_bar.body.main_color = LV_COLOR_MAKE(105, 105, 105);
 800acdc:	8073      	strh	r3, [r6, #2]
	style_indic_bar.body.border.color = LV_COLOR_MAKE(105, 105, 105);
 800acde:	8173      	strh	r3, [r6, #10]
	style_indic_bar.body.radius = 0;
 800ace0:	80f5      	strh	r5, [r6, #6]
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800ace2:	f004 ffcb 	bl	800fc7c <lv_style_copy>
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800ace6:	7923      	ldrb	r3, [r4, #4]
	style_indic_bar_vd.body.radius = 0;
 800ace8:	80e5      	strh	r5, [r4, #6]
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800acea:	f365 0304 	bfi	r3, r5, #0, #5
 800acee:	7123      	strb	r3, [r4, #4]
 800acf0:	88a3      	ldrh	r3, [r4, #4]
 800acf2:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800acf6:	80a3      	strh	r3, [r4, #4]
 800acf8:	0a1b      	lsrs	r3, r3, #8
 800acfa:	f365 03c7 	bfi	r3, r5, #3, #5
 800acfe:	7163      	strb	r3, [r4, #5]
	style_indic_bar_vd.body.main_color = LV_COLOR_MAKE(0, 255, 0);
 800ad00:	78a3      	ldrb	r3, [r4, #2]
 800ad02:	f365 0304 	bfi	r3, r5, #0, #5
 800ad06:	70a3      	strb	r3, [r4, #2]
 800ad08:	8863      	ldrh	r3, [r4, #2]
 800ad0a:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800ad0e:	8063      	strh	r3, [r4, #2]
 800ad10:	0a1b      	lsrs	r3, r3, #8
 800ad12:	f365 03c7 	bfi	r3, r5, #3, #5
 800ad16:	70e3      	strb	r3, [r4, #3]
	style_indic_bar_vd.body.border.color = LV_COLOR_MAKE(0, 255, 0);
 800ad18:	7aa3      	ldrb	r3, [r4, #10]
 800ad1a:	f365 0304 	bfi	r3, r5, #0, #5
 800ad1e:	72a3      	strb	r3, [r4, #10]
 800ad20:	8963      	ldrh	r3, [r4, #10]
 800ad22:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800ad26:	8163      	strh	r3, [r4, #10]
 800ad28:	0a1b      	lsrs	r3, r3, #8
 800ad2a:	f365 03c7 	bfi	r3, r5, #3, #5
 800ad2e:	72e3      	strb	r3, [r4, #11]
 800ad30:	4c19      	ldr	r4, [pc, #100]	; (800ad98 <create_vumeter_freq+0xd8>)
		bar[x] = lv_bar_create(Tela_Freq, NULL);
 800ad32:	6838      	ldr	r0, [r7, #0]
 800ad34:	2100      	movs	r1, #0
 800ad36:	f00a f883 	bl	8014e40 <lv_bar_create>
		lv_obj_set_size(bar[x], 4, 20);
 800ad3a:	2214      	movs	r2, #20
		bar[x] = lv_bar_create(Tela_Freq, NULL);
 800ad3c:	6060      	str	r0, [r4, #4]
		lv_obj_set_size(bar[x], 4, 20);
 800ad3e:	2104      	movs	r1, #4
 800ad40:	f004 fa3e 	bl	800f1c0 <lv_obj_set_size>
		lv_bar_set_style(bar[x], LV_BAR_STYLE_BG, &style_indic_bar);
 800ad44:	6860      	ldr	r0, [r4, #4]
 800ad46:	4632      	mov	r2, r6
 800ad48:	2100      	movs	r1, #0
 800ad4a:	f00a f863 	bl	8014e14 <lv_bar_set_style>
		lv_bar_set_style(bar[x], LV_BAR_STYLE_INDIC, &style_indic_bar);
 800ad4e:	6860      	ldr	r0, [r4, #4]
 800ad50:	4632      	mov	r2, r6
 800ad52:	2101      	movs	r1, #1
 800ad54:	f00a f85e 	bl	8014e14 <lv_bar_set_style>
		lv_obj_align(bar[x], NULL, LV_ALIGN_IN_TOP_LEFT, freq_pos_x[x], 90);
 800ad58:	225a      	movs	r2, #90	; 0x5a
 800ad5a:	4b10      	ldr	r3, [pc, #64]	; (800ad9c <create_vumeter_freq+0xdc>)
 800ad5c:	9200      	str	r2, [sp, #0]
 800ad5e:	f933 3025 	ldrsh.w	r3, [r3, r5, lsl #2]
 800ad62:	6860      	ldr	r0, [r4, #4]
 800ad64:	2201      	movs	r2, #1
 800ad66:	2100      	movs	r1, #0
 800ad68:	f003 fe8a 	bl	800ea80 <lv_obj_align>
 800ad6c:	3501      	adds	r5, #1
		lv_bar_set_value(bar[x], 100, 0);
 800ad6e:	2200      	movs	r2, #0
 800ad70:	2164      	movs	r1, #100	; 0x64
 800ad72:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800ad76:	f009 fff1 	bl	8014d5c <lv_bar_set_value>
	for(uint8_t x = 0; x < 21; x++) {
 800ad7a:	2d15      	cmp	r5, #21
 800ad7c:	d1d9      	bne.n	800ad32 <create_vumeter_freq+0x72>
}
 800ad7e:	b003      	add	sp, #12
 800ad80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad82:	bf00      	nop
 800ad84:	200052dc 	.word	0x200052dc
 800ad88:	2000c3b4 	.word	0x2000c3b4
 800ad8c:	20005318 	.word	0x20005318
 800ad90:	20005268 	.word	0x20005268
 800ad94:	0801c5c4 	.word	0x0801c5c4
 800ad98:	20005268 	.word	0x20005268
 800ad9c:	0802b654 	.word	0x0802b654

0800ada0 <update_vumeter>:
{
 800ada0:	b570      	push	{r4, r5, r6, lr}
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800ada2:	4c1c      	ldr	r4, [pc, #112]	; (800ae14 <update_vumeter+0x74>)
	lv_bar_set_style(bar[pos], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800ada4:	4e1c      	ldr	r6, [pc, #112]	; (800ae18 <update_vumeter+0x78>)
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800ada6:	7923      	ldrb	r3, [r4, #4]
 800ada8:	f36f 0304 	bfc	r3, #0, #5
 800adac:	7123      	strb	r3, [r4, #4]
 800adae:	88a3      	ldrh	r3, [r4, #4]
 800adb0:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800adb4:	80a3      	strh	r3, [r4, #4]
 800adb6:	0a1b      	lsrs	r3, r3, #8
 800adb8:	f36f 03c7 	bfc	r3, #3, #5
 800adbc:	7163      	strb	r3, [r4, #5]
	style_indic_bar_vd.body.main_color = LV_COLOR_MAKE(0, 255, 0);
 800adbe:	78a3      	ldrb	r3, [r4, #2]
 800adc0:	f36f 0304 	bfc	r3, #0, #5
 800adc4:	70a3      	strb	r3, [r4, #2]
 800adc6:	8863      	ldrh	r3, [r4, #2]
 800adc8:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800adcc:	8063      	strh	r3, [r4, #2]
 800adce:	0a1b      	lsrs	r3, r3, #8
 800add0:	f36f 03c7 	bfc	r3, #3, #5
 800add4:	70e3      	strb	r3, [r4, #3]
	style_indic_bar_vd.body.border.color = LV_COLOR_MAKE(0, 255, 0);
 800add6:	7aa3      	ldrb	r3, [r4, #10]
 800add8:	f36f 0304 	bfc	r3, #0, #5
 800addc:	72a3      	strb	r3, [r4, #10]
 800adde:	8963      	ldrh	r3, [r4, #10]
	uint32_t pos = ((freq / 100) - 87) - 1;
 800ade0:	2564      	movs	r5, #100	; 0x64
	style_indic_bar_vd.body.border.color = LV_COLOR_MAKE(0, 255, 0);
 800ade2:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
	uint32_t pos = ((freq / 100) - 87) - 1;
 800ade6:	fb90 f5f5 	sdiv	r5, r0, r5
 800adea:	3d58      	subs	r5, #88	; 0x58
	style_indic_bar_vd.body.border.color = LV_COLOR_MAKE(0, 255, 0);
 800adec:	8163      	strh	r3, [r4, #10]
 800adee:	0a1b      	lsrs	r3, r3, #8
	lv_bar_set_style(bar[pos], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800adf0:	4622      	mov	r2, r4
 800adf2:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]
	style_indic_bar_vd.body.border.color = LV_COLOR_MAKE(0, 255, 0);
 800adf6:	f36f 03c7 	bfc	r3, #3, #5
	lv_bar_set_style(bar[pos], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800adfa:	2100      	movs	r1, #0
	style_indic_bar_vd.body.border.color = LV_COLOR_MAKE(0, 255, 0);
 800adfc:	72e3      	strb	r3, [r4, #11]
	lv_bar_set_style(bar[pos], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800adfe:	f00a f809 	bl	8014e14 <lv_bar_set_style>
	lv_bar_set_style(bar[pos], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
 800ae02:	4622      	mov	r2, r4
 800ae04:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]
 800ae08:	2101      	movs	r1, #1
}
 800ae0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	lv_bar_set_style(bar[pos], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
 800ae0e:	f00a b801 	b.w	8014e14 <lv_bar_set_style>
 800ae12:	bf00      	nop
 800ae14:	20005318 	.word	0x20005318
 800ae18:	2000526c 	.word	0x2000526c

0800ae1c <lv_ex_roller>:

void lv_ex_roller(void)
{
 800ae1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	static lv_style_t style_txt;
	lv_style_copy(&style_txt, &lv_style_plain_color);
 800ae20:	4ea7      	ldr	r6, [pc, #668]	; (800b0c0 <lv_ex_roller+0x2a4>)
 800ae22:	49a8      	ldr	r1, [pc, #672]	; (800b0c4 <lv_ex_roller+0x2a8>)
	style_txt.text.letter_space = 1;
	style_txt.text.line_space = 2;
	style_txt.text.color = LV_COLOR_WHITE;

	// Milhar
	rollerfreq[5] = lv_roller_create(Tela_Freq, NULL);
 800ae24:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 800b0e4 <lv_ex_roller+0x2c8>
 800ae28:	4ca7      	ldr	r4, [pc, #668]	; (800b0c8 <lv_ex_roller+0x2ac>)
    lv_roller_set_selected(rollerfreq[5], 1, true);
    lv_roller_set_fix_width(rollerfreq[5], 19);
    lv_roller_set_style(rollerfreq[5], LV_ROLLER_STYLE_BG, &style_txt);
    lv_roller_set_style(rollerfreq[5], LV_ROLLER_STYLE_SEL, &style_txt);
    lv_obj_align(rollerfreq[5], NULL, LV_ALIGN_IN_TOP_LEFT, 10, 46);
    lv_obj_set_event_cb(rollerfreq[5], event_handler);
 800ae2a:	4fa8      	ldr	r7, [pc, #672]	; (800b0cc <lv_ex_roller+0x2b0>)
    lv_obj_align(rollerfreq[4], NULL, LV_ALIGN_IN_TOP_LEFT, 33, 46);
    lv_obj_set_event_cb(rollerfreq[4], event_handler);
    // Dezena
    rollerfreq[3] = lv_roller_create(Tela_Freq, NULL);
    lv_obj_set_user_data(rollerfreq[3], 3);
    lv_roller_set_options(rollerfreq[3], "0\n1\n2\n3\n4\n5\n6\n7\n8\n9", LV_ROLLER_MODE_INIFINITE);
 800ae2c:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 800b0e8 <lv_ex_roller+0x2cc>
	lv_style_copy(&style_txt, &lv_style_plain_color);
 800ae30:	4630      	mov	r0, r6
 800ae32:	f004 ff23 	bl	800fc7c <lv_style_copy>
	style_txt.body.main_color = LV_COLOR_GRAY;
 800ae36:	4aa6      	ldr	r2, [pc, #664]	; (800b0d0 <lv_ex_roller+0x2b4>)
	rollerfreq[5] = lv_roller_create(Tela_Freq, NULL);
 800ae38:	f8d9 0000 	ldr.w	r0, [r9]
	style_txt.body.main_color = LV_COLOR_GRAY;
 800ae3c:	8893      	ldrh	r3, [r2, #4]
 800ae3e:	8073      	strh	r3, [r6, #2]
	style_txt.body.grad_color = LV_COLOR_BLACK;
 800ae40:	7933      	ldrb	r3, [r6, #4]
 800ae42:	f36f 0304 	bfc	r3, #0, #5
 800ae46:	7133      	strb	r3, [r6, #4]
 800ae48:	88b3      	ldrh	r3, [r6, #4]
 800ae4a:	f36f 134a 	bfc	r3, #5, #6
 800ae4e:	80b3      	strh	r3, [r6, #4]
 800ae50:	0a1b      	lsrs	r3, r3, #8
 800ae52:	f36f 03c7 	bfc	r3, #3, #5
 800ae56:	7173      	strb	r3, [r6, #5]
	style_txt.text.font = &lv_font_eurostile_24;
 800ae58:	4b9e      	ldr	r3, [pc, #632]	; (800b0d4 <lv_ex_roller+0x2b8>)
 800ae5a:	6273      	str	r3, [r6, #36]	; 0x24
	style_txt.text.letter_space = 1;
 800ae5c:	2501      	movs	r5, #1
	style_txt.text.color = LV_COLOR_WHITE;
 800ae5e:	8853      	ldrh	r3, [r2, #2]
 800ae60:	8433      	strh	r3, [r6, #32]
	style_txt.text.line_space = 2;
 800ae62:	f04f 0b02 	mov.w	fp, #2
	rollerfreq[5] = lv_roller_create(Tela_Freq, NULL);
 800ae66:	2100      	movs	r1, #0
	style_txt.text.letter_space = 1;
 800ae68:	8535      	strh	r5, [r6, #40]	; 0x28
	style_txt.text.line_space = 2;
 800ae6a:	f8a6 b02a 	strh.w	fp, [r6, #42]	; 0x2a
	rollerfreq[5] = lv_roller_create(Tela_Freq, NULL);
 800ae6e:	f00e f9df 	bl	8019230 <lv_roller_create>
	lv_obj_set_user_data(rollerfreq[5], 5);
 800ae72:	2105      	movs	r1, #5
	rollerfreq[5] = lv_roller_create(Tela_Freq, NULL);
 800ae74:	6160      	str	r0, [r4, #20]
	lv_obj_set_user_data(rollerfreq[5], 5);
 800ae76:	f004 fbc2 	bl	800f5fe <lv_obj_set_user_data>
    lv_roller_set_options(rollerfreq[5], "0\n1", LV_ROLLER_MODE_INIFINITE);
 800ae7a:	462a      	mov	r2, r5
 800ae7c:	6960      	ldr	r0, [r4, #20]
 800ae7e:	4996      	ldr	r1, [pc, #600]	; (800b0d8 <lv_ex_roller+0x2bc>)
 800ae80:	f00e fb30 	bl	80194e4 <lv_roller_set_options>
    lv_roller_set_visible_row_count(rollerfreq[5], 1);
 800ae84:	4629      	mov	r1, r5
 800ae86:	6960      	ldr	r0, [r4, #20]
 800ae88:	f00e f9b6 	bl	80191f8 <lv_roller_set_visible_row_count>
    lv_roller_set_selected(rollerfreq[5], 1, true);
 800ae8c:	462a      	mov	r2, r5
 800ae8e:	4629      	mov	r1, r5
 800ae90:	6960      	ldr	r0, [r4, #20]
 800ae92:	f00e fa83 	bl	801939c <lv_roller_set_selected>
    lv_ddlist_set_fix_width(roller, w);
 800ae96:	6960      	ldr	r0, [r4, #20]
 800ae98:	2113      	movs	r1, #19
 800ae9a:	f00b faf6 	bl	801648a <lv_ddlist_set_fix_width>
    lv_roller_set_style(rollerfreq[5], LV_ROLLER_STYLE_BG, &style_txt);
 800ae9e:	4632      	mov	r2, r6
 800aea0:	6960      	ldr	r0, [r4, #20]
 800aea2:	2100      	movs	r1, #0
 800aea4:	f00e fa50 	bl	8019348 <lv_roller_set_style>
    lv_obj_align(rollerfreq[5], NULL, LV_ALIGN_IN_TOP_LEFT, 10, 46);
 800aea8:	f04f 082e 	mov.w	r8, #46	; 0x2e
    lv_roller_set_style(rollerfreq[5], LV_ROLLER_STYLE_SEL, &style_txt);
 800aeac:	4632      	mov	r2, r6
 800aeae:	4629      	mov	r1, r5
 800aeb0:	6960      	ldr	r0, [r4, #20]
 800aeb2:	f00e fa49 	bl	8019348 <lv_roller_set_style>
    lv_obj_align(rollerfreq[5], NULL, LV_ALIGN_IN_TOP_LEFT, 10, 46);
 800aeb6:	230a      	movs	r3, #10
 800aeb8:	462a      	mov	r2, r5
 800aeba:	6960      	ldr	r0, [r4, #20]
 800aebc:	f8cd 8000 	str.w	r8, [sp]
 800aec0:	2100      	movs	r1, #0
 800aec2:	f003 fddd 	bl	800ea80 <lv_obj_align>
    lv_obj_set_event_cb(rollerfreq[5], event_handler);
 800aec6:	4639      	mov	r1, r7
 800aec8:	6960      	ldr	r0, [r4, #20]
 800aeca:	f003 fc3a 	bl	800e742 <lv_obj_set_event_cb>
    rollerfreq[4] = lv_roller_create(Tela_Freq, NULL);
 800aece:	2100      	movs	r1, #0
 800aed0:	f8d9 0000 	ldr.w	r0, [r9]
 800aed4:	f00e f9ac 	bl	8019230 <lv_roller_create>
    lv_obj_set_user_data(rollerfreq[4], 4);
 800aed8:	2104      	movs	r1, #4
    rollerfreq[4] = lv_roller_create(Tela_Freq, NULL);
 800aeda:	6120      	str	r0, [r4, #16]
    lv_obj_set_user_data(rollerfreq[4], 4);
 800aedc:	f004 fb8f 	bl	800f5fe <lv_obj_set_user_data>
    lv_roller_set_options(rollerfreq[4], "0\n8\n9", LV_ROLLER_MODE_INIFINITE);
 800aee0:	462a      	mov	r2, r5
 800aee2:	6920      	ldr	r0, [r4, #16]
 800aee4:	497d      	ldr	r1, [pc, #500]	; (800b0dc <lv_ex_roller+0x2c0>)
 800aee6:	f00e fafd 	bl	80194e4 <lv_roller_set_options>
    lv_roller_set_visible_row_count(rollerfreq[4], 1);
 800aeea:	4629      	mov	r1, r5
 800aeec:	6920      	ldr	r0, [r4, #16]
 800aeee:	f00e f983 	bl	80191f8 <lv_roller_set_visible_row_count>
    lv_roller_set_selected(rollerfreq[4], 0, true);
 800aef2:	462a      	mov	r2, r5
 800aef4:	6920      	ldr	r0, [r4, #16]
 800aef6:	2100      	movs	r1, #0
 800aef8:	f00e fa50 	bl	801939c <lv_roller_set_selected>
 800aefc:	6920      	ldr	r0, [r4, #16]
 800aefe:	2113      	movs	r1, #19
 800af00:	f00b fac3 	bl	801648a <lv_ddlist_set_fix_width>
    lv_roller_set_style(rollerfreq[4], LV_ROLLER_STYLE_BG, &style_txt);
 800af04:	4632      	mov	r2, r6
 800af06:	6920      	ldr	r0, [r4, #16]
 800af08:	2100      	movs	r1, #0
 800af0a:	f00e fa1d 	bl	8019348 <lv_roller_set_style>
    lv_roller_set_style(rollerfreq[4], LV_ROLLER_STYLE_SEL, &style_txt);
 800af0e:	4632      	mov	r2, r6
 800af10:	4629      	mov	r1, r5
 800af12:	6920      	ldr	r0, [r4, #16]
 800af14:	f00e fa18 	bl	8019348 <lv_roller_set_style>
    lv_obj_align(rollerfreq[4], NULL, LV_ALIGN_IN_TOP_LEFT, 33, 46);
 800af18:	2321      	movs	r3, #33	; 0x21
 800af1a:	462a      	mov	r2, r5
 800af1c:	6920      	ldr	r0, [r4, #16]
 800af1e:	f8cd 8000 	str.w	r8, [sp]
 800af22:	2100      	movs	r1, #0
 800af24:	f003 fdac 	bl	800ea80 <lv_obj_align>
    lv_obj_set_event_cb(rollerfreq[4], event_handler);
 800af28:	4639      	mov	r1, r7
 800af2a:	6920      	ldr	r0, [r4, #16]
 800af2c:	f003 fc09 	bl	800e742 <lv_obj_set_event_cb>
    rollerfreq[3] = lv_roller_create(Tela_Freq, NULL);
 800af30:	2100      	movs	r1, #0
 800af32:	f8d9 0000 	ldr.w	r0, [r9]
 800af36:	f00e f97b 	bl	8019230 <lv_roller_create>
    lv_obj_set_user_data(rollerfreq[3], 3);
 800af3a:	2103      	movs	r1, #3
    rollerfreq[3] = lv_roller_create(Tela_Freq, NULL);
 800af3c:	60e0      	str	r0, [r4, #12]
    lv_obj_set_user_data(rollerfreq[3], 3);
 800af3e:	f004 fb5e 	bl	800f5fe <lv_obj_set_user_data>
    lv_roller_set_options(rollerfreq[3], "0\n1\n2\n3\n4\n5\n6\n7\n8\n9", LV_ROLLER_MODE_INIFINITE);
 800af42:	462a      	mov	r2, r5
 800af44:	4651      	mov	r1, sl
 800af46:	68e0      	ldr	r0, [r4, #12]
 800af48:	f00e facc 	bl	80194e4 <lv_roller_set_options>
    lv_roller_set_visible_row_count(rollerfreq[3], 1);
 800af4c:	4629      	mov	r1, r5
 800af4e:	68e0      	ldr	r0, [r4, #12]
 800af50:	f00e f952 	bl	80191f8 <lv_roller_set_visible_row_count>
    lv_roller_set_selected(rollerfreq[3], 3, true);
 800af54:	462a      	mov	r2, r5
 800af56:	68e0      	ldr	r0, [r4, #12]
 800af58:	2103      	movs	r1, #3
 800af5a:	f00e fa1f 	bl	801939c <lv_roller_set_selected>
 800af5e:	68e0      	ldr	r0, [r4, #12]
 800af60:	2113      	movs	r1, #19
 800af62:	f00b fa92 	bl	801648a <lv_ddlist_set_fix_width>
    lv_roller_set_fix_width(rollerfreq[3], 19);
    lv_roller_set_style(rollerfreq[3], LV_ROLLER_STYLE_BG, &style_txt);
 800af66:	4632      	mov	r2, r6
 800af68:	68e0      	ldr	r0, [r4, #12]
 800af6a:	2100      	movs	r1, #0
 800af6c:	f00e f9ec 	bl	8019348 <lv_roller_set_style>
    lv_roller_set_style(rollerfreq[3], LV_ROLLER_STYLE_SEL, &style_txt);
 800af70:	4632      	mov	r2, r6
 800af72:	4629      	mov	r1, r5
 800af74:	68e0      	ldr	r0, [r4, #12]
 800af76:	f00e f9e7 	bl	8019348 <lv_roller_set_style>
    lv_obj_align(rollerfreq[3], NULL, LV_ALIGN_IN_TOP_LEFT, 57, 46);
 800af7a:	2339      	movs	r3, #57	; 0x39
 800af7c:	462a      	mov	r2, r5
 800af7e:	68e0      	ldr	r0, [r4, #12]
 800af80:	f8cd 8000 	str.w	r8, [sp]
 800af84:	2100      	movs	r1, #0
 800af86:	f003 fd7b 	bl	800ea80 <lv_obj_align>
    lv_obj_set_event_cb(rollerfreq[3], event_handler);
 800af8a:	4639      	mov	r1, r7
 800af8c:	68e0      	ldr	r0, [r4, #12]
 800af8e:	f003 fbd8 	bl	800e742 <lv_obj_set_event_cb>
    // Casa 1
    rollerfreq[2] = lv_roller_create(Tela_Freq, NULL);
 800af92:	2100      	movs	r1, #0
 800af94:	f8d9 0000 	ldr.w	r0, [r9]
 800af98:	f00e f94a 	bl	8019230 <lv_roller_create>
    lv_obj_set_user_data(rollerfreq[2], 2);
 800af9c:	4659      	mov	r1, fp
    rollerfreq[2] = lv_roller_create(Tela_Freq, NULL);
 800af9e:	60a0      	str	r0, [r4, #8]
    lv_obj_set_user_data(rollerfreq[2], 2);
 800afa0:	f004 fb2d 	bl	800f5fe <lv_obj_set_user_data>
    lv_roller_set_options(rollerfreq[2], "0\n1\n2\n3\n4\n5\n6\n7\n8\n9", LV_ROLLER_MODE_INIFINITE);
 800afa4:	462a      	mov	r2, r5
 800afa6:	4651      	mov	r1, sl
 800afa8:	68a0      	ldr	r0, [r4, #8]
 800afaa:	f00e fa9b 	bl	80194e4 <lv_roller_set_options>
    lv_roller_set_visible_row_count(rollerfreq[2], 1);
 800afae:	4629      	mov	r1, r5
 800afb0:	68a0      	ldr	r0, [r4, #8]
 800afb2:	f00e f921 	bl	80191f8 <lv_roller_set_visible_row_count>
    lv_roller_set_selected(rollerfreq[2], 1, true);
 800afb6:	462a      	mov	r2, r5
 800afb8:	4629      	mov	r1, r5
 800afba:	68a0      	ldr	r0, [r4, #8]
 800afbc:	f00e f9ee 	bl	801939c <lv_roller_set_selected>
 800afc0:	68a0      	ldr	r0, [r4, #8]
 800afc2:	2113      	movs	r1, #19
 800afc4:	f00b fa61 	bl	801648a <lv_ddlist_set_fix_width>
    lv_roller_set_fix_width(rollerfreq[2], 19);
    lv_roller_set_style(rollerfreq[2], LV_ROLLER_STYLE_BG, &style_txt);
 800afc8:	4632      	mov	r2, r6
 800afca:	68a0      	ldr	r0, [r4, #8]
 800afcc:	2100      	movs	r1, #0
 800afce:	f00e f9bb 	bl	8019348 <lv_roller_set_style>
    lv_roller_set_style(rollerfreq[2], LV_ROLLER_STYLE_SEL, &style_txt);
 800afd2:	4632      	mov	r2, r6
 800afd4:	4629      	mov	r1, r5
 800afd6:	68a0      	ldr	r0, [r4, #8]
 800afd8:	f00e f9b6 	bl	8019348 <lv_roller_set_style>
    lv_obj_align(rollerfreq[2], NULL, LV_ALIGN_IN_TOP_LEFT, 84, 46);
 800afdc:	2354      	movs	r3, #84	; 0x54
 800afde:	462a      	mov	r2, r5
 800afe0:	68a0      	ldr	r0, [r4, #8]
 800afe2:	f8cd 8000 	str.w	r8, [sp]
 800afe6:	2100      	movs	r1, #0
 800afe8:	f003 fd4a 	bl	800ea80 <lv_obj_align>
    lv_obj_set_event_cb(rollerfreq[2], event_handler);
 800afec:	4639      	mov	r1, r7
 800afee:	68a0      	ldr	r0, [r4, #8]
 800aff0:	f003 fba7 	bl	800e742 <lv_obj_set_event_cb>
    // Casa 2
    rollerfreq[1] = lv_roller_create(Tela_Freq, NULL);
 800aff4:	2100      	movs	r1, #0
 800aff6:	f8d9 0000 	ldr.w	r0, [r9]
 800affa:	f00e f919 	bl	8019230 <lv_roller_create>
    lv_obj_set_user_data(rollerfreq[1], 1);
 800affe:	4629      	mov	r1, r5
    rollerfreq[1] = lv_roller_create(Tela_Freq, NULL);
 800b000:	6060      	str	r0, [r4, #4]
    lv_obj_set_user_data(rollerfreq[1], 1);
 800b002:	f004 fafc 	bl	800f5fe <lv_obj_set_user_data>
    lv_roller_set_options(rollerfreq[1], "0\n1\n2\n3\n4\n5\n6\n7\n8\n9", LV_ROLLER_MODE_INIFINITE);
 800b006:	462a      	mov	r2, r5
 800b008:	4651      	mov	r1, sl
 800b00a:	6860      	ldr	r0, [r4, #4]
 800b00c:	f00e fa6a 	bl	80194e4 <lv_roller_set_options>
    lv_roller_set_visible_row_count(rollerfreq[1], 1);
 800b010:	4629      	mov	r1, r5
 800b012:	6860      	ldr	r0, [r4, #4]
 800b014:	f00e f8f0 	bl	80191f8 <lv_roller_set_visible_row_count>
    lv_roller_set_selected(rollerfreq[1], 0, true);
 800b018:	462a      	mov	r2, r5
 800b01a:	6860      	ldr	r0, [r4, #4]
 800b01c:	2100      	movs	r1, #0
 800b01e:	f00e f9bd 	bl	801939c <lv_roller_set_selected>
 800b022:	6860      	ldr	r0, [r4, #4]
 800b024:	2113      	movs	r1, #19
 800b026:	f00b fa30 	bl	801648a <lv_ddlist_set_fix_width>
    lv_roller_set_fix_width(rollerfreq[1], 19);
    lv_roller_set_style(rollerfreq[1], LV_ROLLER_STYLE_BG, &style_txt);
 800b02a:	4632      	mov	r2, r6
 800b02c:	6860      	ldr	r0, [r4, #4]
 800b02e:	2100      	movs	r1, #0
 800b030:	f00e f98a 	bl	8019348 <lv_roller_set_style>
    lv_roller_set_style(rollerfreq[1], LV_ROLLER_STYLE_SEL, &style_txt);
 800b034:	4632      	mov	r2, r6
 800b036:	4629      	mov	r1, r5
 800b038:	6860      	ldr	r0, [r4, #4]
 800b03a:	f00e f985 	bl	8019348 <lv_roller_set_style>
    lv_obj_align(rollerfreq[1], NULL, LV_ALIGN_IN_TOP_LEFT, 107, 46);
 800b03e:	236b      	movs	r3, #107	; 0x6b
 800b040:	462a      	mov	r2, r5
 800b042:	6860      	ldr	r0, [r4, #4]
 800b044:	f8cd 8000 	str.w	r8, [sp]
 800b048:	2100      	movs	r1, #0
 800b04a:	f003 fd19 	bl	800ea80 <lv_obj_align>
    lv_obj_set_event_cb(rollerfreq[1], event_handler);
 800b04e:	4639      	mov	r1, r7
 800b050:	6860      	ldr	r0, [r4, #4]
 800b052:	f003 fb76 	bl	800e742 <lv_obj_set_event_cb>
    // Casa 3
    rollerfreq[0] = lv_roller_create(Tela_Freq, NULL);
 800b056:	2100      	movs	r1, #0
 800b058:	f8d9 0000 	ldr.w	r0, [r9]
 800b05c:	f00e f8e8 	bl	8019230 <lv_roller_create>
    lv_obj_set_user_data(rollerfreq[0], 0);
 800b060:	2100      	movs	r1, #0
    rollerfreq[0] = lv_roller_create(Tela_Freq, NULL);
 800b062:	6020      	str	r0, [r4, #0]
    lv_obj_set_user_data(rollerfreq[0], 0);
 800b064:	f004 facb 	bl	800f5fe <lv_obj_set_user_data>
    lv_roller_set_options(rollerfreq[0], "0", LV_ROLLER_MODE_INIFINITE);
 800b068:	462a      	mov	r2, r5
 800b06a:	6820      	ldr	r0, [r4, #0]
 800b06c:	491c      	ldr	r1, [pc, #112]	; (800b0e0 <lv_ex_roller+0x2c4>)
 800b06e:	f00e fa39 	bl	80194e4 <lv_roller_set_options>
    lv_roller_set_visible_row_count(rollerfreq[0], 1);
 800b072:	4629      	mov	r1, r5
 800b074:	6820      	ldr	r0, [r4, #0]
 800b076:	f00e f8bf 	bl	80191f8 <lv_roller_set_visible_row_count>
    lv_roller_set_selected(rollerfreq[0], 0, true);
 800b07a:	462a      	mov	r2, r5
 800b07c:	6820      	ldr	r0, [r4, #0]
 800b07e:	2100      	movs	r1, #0
 800b080:	f00e f98c 	bl	801939c <lv_roller_set_selected>
 800b084:	6820      	ldr	r0, [r4, #0]
 800b086:	2113      	movs	r1, #19
 800b088:	f00b f9ff 	bl	801648a <lv_ddlist_set_fix_width>
    lv_roller_set_fix_width(rollerfreq[0], 19);
    lv_roller_set_style(rollerfreq[0], LV_ROLLER_STYLE_BG, &style_txt);
 800b08c:	4632      	mov	r2, r6
 800b08e:	6820      	ldr	r0, [r4, #0]
 800b090:	2100      	movs	r1, #0
 800b092:	f00e f959 	bl	8019348 <lv_roller_set_style>
    lv_roller_set_style(rollerfreq[0], LV_ROLLER_STYLE_SEL, &style_txt);
 800b096:	4632      	mov	r2, r6
 800b098:	4629      	mov	r1, r5
 800b09a:	6820      	ldr	r0, [r4, #0]
 800b09c:	f00e f954 	bl	8019348 <lv_roller_set_style>
    lv_obj_align(rollerfreq[0], NULL, LV_ALIGN_IN_TOP_LEFT, 131, 46);
 800b0a0:	6820      	ldr	r0, [r4, #0]
 800b0a2:	f8cd 8000 	str.w	r8, [sp]
 800b0a6:	2383      	movs	r3, #131	; 0x83
 800b0a8:	462a      	mov	r2, r5
 800b0aa:	2100      	movs	r1, #0
 800b0ac:	f003 fce8 	bl	800ea80 <lv_obj_align>
    lv_obj_set_event_cb(rollerfreq[0], event_handler);
 800b0b0:	6820      	ldr	r0, [r4, #0]
 800b0b2:	4639      	mov	r1, r7
}
 800b0b4:	b003      	add	sp, #12
 800b0b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_set_event_cb(rollerfreq[0], event_handler);
 800b0ba:	f003 bb42 	b.w	800e742 <lv_obj_set_event_cb>
 800b0be:	bf00      	nop
 800b0c0:	20005354 	.word	0x20005354
 800b0c4:	2000c594 	.word	0x2000c594
 800b0c8:	200052c4 	.word	0x200052c4
 800b0cc:	0800ac19 	.word	0x0800ac19
 800b0d0:	0801c5c4 	.word	0x0801c5c4
 800b0d4:	2000132c 	.word	0x2000132c
 800b0d8:	0802b64d 	.word	0x0802b64d
 800b0dc:	0802b6a8 	.word	0x0802b6a8
 800b0e0:	0802b64b 	.word	0x0802b64b
 800b0e4:	20005268 	.word	0x20005268
 800b0e8:	0802b6ae 	.word	0x0802b6ae

0800b0ec <screen_freq>:
	Tela_Freq = lv_obj_create(NULL, NULL);
 800b0ec:	2100      	movs	r1, #0
{
 800b0ee:	b538      	push	{r3, r4, r5, lr}
	Tela_Freq = lv_obj_create(NULL, NULL);
 800b0f0:	4608      	mov	r0, r1
 800b0f2:	f003 fee7 	bl	800eec4 <lv_obj_create>
 800b0f6:	4d12      	ldr	r5, [pc, #72]	; (800b140 <screen_freq+0x54>)
	img_fundo = lv_img_create(Tela_Freq, NULL);
 800b0f8:	4c12      	ldr	r4, [pc, #72]	; (800b144 <screen_freq+0x58>)
	Tela_Freq = lv_obj_create(NULL, NULL);
 800b0fa:	6028      	str	r0, [r5, #0]
	img_fundo = lv_img_create(Tela_Freq, NULL);
 800b0fc:	2100      	movs	r1, #0
 800b0fe:	f00b fde3 	bl	8016cc8 <lv_img_create>
	lv_img_set_src(img_fundo, &tela_freq);
 800b102:	4911      	ldr	r1, [pc, #68]	; (800b148 <screen_freq+0x5c>)
	img_fundo = lv_img_create(Tela_Freq, NULL);
 800b104:	6020      	str	r0, [r4, #0]
	lv_img_set_src(img_fundo, &tela_freq);
 800b106:	f00b fd4f 	bl	8016ba8 <lv_img_set_src>
	lv_obj_set_protect(img_fundo, LV_PROTECT_POS);
 800b10a:	2104      	movs	r1, #4
 800b10c:	6820      	ldr	r0, [r4, #0]
 800b10e:	f003 fb0b 	bl	800e728 <lv_obj_set_protect>
	lv_obj_set_event_cb(img_fundo, btn_event_esc_freq);
 800b112:	490e      	ldr	r1, [pc, #56]	; (800b14c <screen_freq+0x60>)
 800b114:	6820      	ldr	r0, [r4, #0]
 800b116:	f003 fb14 	bl	800e742 <lv_obj_set_event_cb>
	lv_obj_set_click(img_fundo, 1);
 800b11a:	2101      	movs	r1, #1
 800b11c:	6820      	ldr	r0, [r4, #0]
 800b11e:	f003 fae7 	bl	800e6f0 <lv_obj_set_click>
	create_vumeter_freq();
 800b122:	f7ff fdcd 	bl	800acc0 <create_vumeter_freq>
	update_vumeter(frequencia);
 800b126:	4b0a      	ldr	r3, [pc, #40]	; (800b150 <screen_freq+0x64>)
 800b128:	6818      	ldr	r0, [r3, #0]
 800b12a:	f7ff fe39 	bl	800ada0 <update_vumeter>
	lv_ex_roller();
 800b12e:	f7ff fe75 	bl	800ae1c <lv_ex_roller>
 800b132:	6828      	ldr	r0, [r5, #0]
 800b134:	f003 f8b2 	bl	800e29c <lv_disp_load_scr>
	TelaAtiva = TelaFrequencia;
 800b138:	4b06      	ldr	r3, [pc, #24]	; (800b154 <screen_freq+0x68>)
 800b13a:	2202      	movs	r2, #2
 800b13c:	601a      	str	r2, [r3, #0]
 800b13e:	bd38      	pop	{r3, r4, r5, pc}
 800b140:	20005268 	.word	0x20005268
 800b144:	200052c0 	.word	0x200052c0
 800b148:	20001bb0 	.word	0x20001bb0
 800b14c:	0800abfd 	.word	0x0800abfd
 800b150:	20000004 	.word	0x20000004
 800b154:	200033e4 	.word	0x200033e4

0800b158 <ButtonEventTelaFrequencia>:

void ButtonEventTelaFrequencia(uint8_t event, uint8_t tipo, uint8_t id)
{
	if(event == EVT_PBTN_INPUT) {
 800b158:	2810      	cmp	r0, #16
 800b15a:	d107      	bne.n	800b16c <ButtonEventTelaFrequencia+0x14>
		if(tipo == PBTN_SCLK) {	// Single Click
 800b15c:	2901      	cmp	r1, #1
 800b15e:	d105      	bne.n	800b16c <ButtonEventTelaFrequencia+0x14>
			switch(id) {
 800b160:	b922      	cbnz	r2, 800b16c <ButtonEventTelaFrequencia+0x14>
				case KEY_DN:
					lv_event_send(img_fundo, LV_EVENT_APPLY, NULL);
 800b162:	4b03      	ldr	r3, [pc, #12]	; (800b170 <ButtonEventTelaFrequencia+0x18>)
 800b164:	2111      	movs	r1, #17
 800b166:	6818      	ldr	r0, [r3, #0]
 800b168:	f003 bb32 	b.w	800e7d0 <lv_event_send>
 800b16c:	4770      	bx	lr
 800b16e:	bf00      	nop
 800b170:	200052c0 	.word	0x200052c0

0800b174 <btn_event_esc_audio>:
	lv_obj_set_pos(imgbtn_prev, 2, 18);
}

static void btn_event_esc_audio(lv_obj_t * btn, lv_event_t event)
{
	if(event == LV_EVENT_APPLY) {
 800b174:	2911      	cmp	r1, #17
{
 800b176:	b508      	push	{r3, lr}
	if(event == LV_EVENT_APPLY) {
 800b178:	d107      	bne.n	800b18a <btn_event_esc_audio+0x16>
		//printf("Button ESC Released\n");
		lv_obj_del(Tela_Reading_MPX);
 800b17a:	4b04      	ldr	r3, [pc, #16]	; (800b18c <btn_event_esc_audio+0x18>)
 800b17c:	6818      	ldr	r0, [r3, #0]
 800b17e:	f004 f892 	bl	800f2a6 <lv_obj_del>
		screen_readings();
	}
}
 800b182:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_readings();
 800b186:	f001 bd07 	b.w	800cb98 <screen_readings>
 800b18a:	bd08      	pop	{r3, pc}
 800b18c:	20005390 	.word	0x20005390

0800b190 <btn_event_next_audio>:
	if(event == LV_EVENT_APPLY) {
 800b190:	2911      	cmp	r1, #17
{
 800b192:	b508      	push	{r3, lr}
	if(event == LV_EVENT_APPLY) {
 800b194:	d107      	bne.n	800b1a6 <btn_event_next_audio+0x16>
		lv_obj_del(Tela_Reading_MPX);
 800b196:	4b04      	ldr	r3, [pc, #16]	; (800b1a8 <btn_event_next_audio+0x18>)
 800b198:	6818      	ldr	r0, [r3, #0]
 800b19a:	f004 f884 	bl	800f2a6 <lv_obj_del>
}
 800b19e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_reading_temp();
 800b1a2:	f000 bf0f 	b.w	800bfc4 <screen_reading_temp>
 800b1a6:	bd08      	pop	{r3, pc}
 800b1a8:	20005390 	.word	0x20005390

0800b1ac <create_vumeter_m>:
{
 800b1ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800b1ae:	4e30      	ldr	r6, [pc, #192]	; (800b270 <create_vumeter_m+0xc4>)
 800b1b0:	4930      	ldr	r1, [pc, #192]	; (800b274 <create_vumeter_m+0xc8>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800b1b2:	4c31      	ldr	r4, [pc, #196]	; (800b278 <create_vumeter_m+0xcc>)
		bar_m[x] = lv_bar_create(Tela_Reading_MPX, NULL);
 800b1b4:	4f31      	ldr	r7, [pc, #196]	; (800b27c <create_vumeter_m+0xd0>)
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800b1b6:	4630      	mov	r0, r6
 800b1b8:	f004 fd60 	bl	800fc7c <lv_style_copy>
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800b1bc:	4b30      	ldr	r3, [pc, #192]	; (800b280 <create_vumeter_m+0xd4>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800b1be:	492d      	ldr	r1, [pc, #180]	; (800b274 <create_vumeter_m+0xc8>)
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800b1c0:	881b      	ldrh	r3, [r3, #0]
 800b1c2:	80b3      	strh	r3, [r6, #4]
	style_indic_bar.body.radius = 0;
 800b1c4:	2500      	movs	r5, #0
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800b1c6:	4620      	mov	r0, r4
	style_indic_bar.body.main_color = LV_COLOR_MAKE(105, 105, 105);
 800b1c8:	8073      	strh	r3, [r6, #2]
	style_indic_bar.body.border.color = LV_COLOR_MAKE(105, 105, 105);
 800b1ca:	8173      	strh	r3, [r6, #10]
	style_indic_bar.body.radius = 0;
 800b1cc:	80f5      	strh	r5, [r6, #6]
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800b1ce:	f004 fd55 	bl	800fc7c <lv_style_copy>
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800b1d2:	7923      	ldrb	r3, [r4, #4]
	style_indic_bar_vd.body.radius = 0;
 800b1d4:	80e5      	strh	r5, [r4, #6]
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800b1d6:	f365 0304 	bfi	r3, r5, #0, #5
 800b1da:	7123      	strb	r3, [r4, #4]
 800b1dc:	88a3      	ldrh	r3, [r4, #4]
 800b1de:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800b1e2:	80a3      	strh	r3, [r4, #4]
 800b1e4:	0a1b      	lsrs	r3, r3, #8
 800b1e6:	f365 03c7 	bfi	r3, r5, #3, #5
 800b1ea:	7163      	strb	r3, [r4, #5]
	style_indic_bar_vd.body.main_color = LV_COLOR_MAKE(0, 255, 0);
 800b1ec:	78a3      	ldrb	r3, [r4, #2]
 800b1ee:	f365 0304 	bfi	r3, r5, #0, #5
 800b1f2:	70a3      	strb	r3, [r4, #2]
 800b1f4:	8863      	ldrh	r3, [r4, #2]
 800b1f6:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800b1fa:	8063      	strh	r3, [r4, #2]
 800b1fc:	0a1b      	lsrs	r3, r3, #8
 800b1fe:	f365 03c7 	bfi	r3, r5, #3, #5
 800b202:	70e3      	strb	r3, [r4, #3]
	style_indic_bar_vd.body.border.color = LV_COLOR_MAKE(0, 255, 0);
 800b204:	7aa3      	ldrb	r3, [r4, #10]
 800b206:	f365 0304 	bfi	r3, r5, #0, #5
 800b20a:	72a3      	strb	r3, [r4, #10]
 800b20c:	8963      	ldrh	r3, [r4, #10]
 800b20e:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800b212:	8163      	strh	r3, [r4, #10]
 800b214:	0a1b      	lsrs	r3, r3, #8
 800b216:	f365 03c7 	bfi	r3, r5, #3, #5
 800b21a:	72e3      	strb	r3, [r4, #11]
 800b21c:	4c19      	ldr	r4, [pc, #100]	; (800b284 <create_vumeter_m+0xd8>)
		bar_m[x] = lv_bar_create(Tela_Reading_MPX, NULL);
 800b21e:	6838      	ldr	r0, [r7, #0]
 800b220:	2100      	movs	r1, #0
 800b222:	f009 fe0d 	bl	8014e40 <lv_bar_create>
		lv_obj_set_size(bar_m[x], 4, 11);
 800b226:	220b      	movs	r2, #11
		bar_m[x] = lv_bar_create(Tela_Reading_MPX, NULL);
 800b228:	6060      	str	r0, [r4, #4]
		lv_obj_set_size(bar_m[x], 4, 11);
 800b22a:	2104      	movs	r1, #4
 800b22c:	f003 ffc8 	bl	800f1c0 <lv_obj_set_size>
		lv_bar_set_style(bar_m[x], LV_BAR_STYLE_BG, &style_indic_bar);
 800b230:	6860      	ldr	r0, [r4, #4]
 800b232:	4632      	mov	r2, r6
 800b234:	2100      	movs	r1, #0
 800b236:	f009 fded 	bl	8014e14 <lv_bar_set_style>
		lv_bar_set_style(bar_m[x], LV_BAR_STYLE_INDIC, &style_indic_bar);
 800b23a:	6860      	ldr	r0, [r4, #4]
 800b23c:	4632      	mov	r2, r6
 800b23e:	2101      	movs	r1, #1
 800b240:	f009 fde8 	bl	8014e14 <lv_bar_set_style>
		lv_obj_align(bar_m[x], NULL, LV_ALIGN_IN_TOP_LEFT, m_pos_x[x], 48);
 800b244:	2230      	movs	r2, #48	; 0x30
 800b246:	4b10      	ldr	r3, [pc, #64]	; (800b288 <create_vumeter_m+0xdc>)
 800b248:	9200      	str	r2, [sp, #0]
 800b24a:	f933 3025 	ldrsh.w	r3, [r3, r5, lsl #2]
 800b24e:	6860      	ldr	r0, [r4, #4]
 800b250:	2201      	movs	r2, #1
 800b252:	2100      	movs	r1, #0
 800b254:	f003 fc14 	bl	800ea80 <lv_obj_align>
 800b258:	3501      	adds	r5, #1
		lv_bar_set_value(bar_m[x], 100, 0);
 800b25a:	2200      	movs	r2, #0
 800b25c:	2164      	movs	r1, #100	; 0x64
 800b25e:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800b262:	f009 fd7b 	bl	8014d5c <lv_bar_set_value>
	for(uint8_t x = 0; x < 24; x++) {
 800b266:	2d18      	cmp	r5, #24
 800b268:	d1d9      	bne.n	800b21e <create_vumeter_m+0x72>
}
 800b26a:	b003      	add	sp, #12
 800b26c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b26e:	bf00      	nop
 800b270:	200054bc 	.word	0x200054bc
 800b274:	2000c3b4 	.word	0x2000c3b4
 800b278:	200054f8 	.word	0x200054f8
 800b27c:	20005390 	.word	0x20005390
 800b280:	0801c5ca 	.word	0x0801c5ca
 800b284:	200053f0 	.word	0x200053f0
 800b288:	0802b724 	.word	0x0802b724

0800b28c <create_vumeter_r>:
{
 800b28c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800b28e:	4e30      	ldr	r6, [pc, #192]	; (800b350 <create_vumeter_r+0xc4>)
 800b290:	4930      	ldr	r1, [pc, #192]	; (800b354 <create_vumeter_r+0xc8>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800b292:	4c31      	ldr	r4, [pc, #196]	; (800b358 <create_vumeter_r+0xcc>)
		bar_r[x] = lv_bar_create(Tela_Reading_MPX, NULL);
 800b294:	4f31      	ldr	r7, [pc, #196]	; (800b35c <create_vumeter_r+0xd0>)
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800b296:	4630      	mov	r0, r6
 800b298:	f004 fcf0 	bl	800fc7c <lv_style_copy>
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800b29c:	4b30      	ldr	r3, [pc, #192]	; (800b360 <create_vumeter_r+0xd4>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800b29e:	492d      	ldr	r1, [pc, #180]	; (800b354 <create_vumeter_r+0xc8>)
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800b2a0:	881b      	ldrh	r3, [r3, #0]
 800b2a2:	80b3      	strh	r3, [r6, #4]
	style_indic_bar.body.radius = 0;
 800b2a4:	2500      	movs	r5, #0
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800b2a6:	4620      	mov	r0, r4
	style_indic_bar.body.main_color = LV_COLOR_MAKE(105, 105, 105);
 800b2a8:	8073      	strh	r3, [r6, #2]
	style_indic_bar.body.border.color = LV_COLOR_MAKE(105, 105, 105);
 800b2aa:	8173      	strh	r3, [r6, #10]
	style_indic_bar.body.radius = 0;
 800b2ac:	80f5      	strh	r5, [r6, #6]
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800b2ae:	f004 fce5 	bl	800fc7c <lv_style_copy>
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800b2b2:	7923      	ldrb	r3, [r4, #4]
	style_indic_bar_vd.body.radius = 0;
 800b2b4:	80e5      	strh	r5, [r4, #6]
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800b2b6:	f365 0304 	bfi	r3, r5, #0, #5
 800b2ba:	7123      	strb	r3, [r4, #4]
 800b2bc:	88a3      	ldrh	r3, [r4, #4]
 800b2be:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800b2c2:	80a3      	strh	r3, [r4, #4]
 800b2c4:	0a1b      	lsrs	r3, r3, #8
 800b2c6:	f365 03c7 	bfi	r3, r5, #3, #5
 800b2ca:	7163      	strb	r3, [r4, #5]
	style_indic_bar_vd.body.main_color = LV_COLOR_MAKE(0, 255, 0);
 800b2cc:	78a3      	ldrb	r3, [r4, #2]
 800b2ce:	f365 0304 	bfi	r3, r5, #0, #5
 800b2d2:	70a3      	strb	r3, [r4, #2]
 800b2d4:	8863      	ldrh	r3, [r4, #2]
 800b2d6:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800b2da:	8063      	strh	r3, [r4, #2]
 800b2dc:	0a1b      	lsrs	r3, r3, #8
 800b2de:	f365 03c7 	bfi	r3, r5, #3, #5
 800b2e2:	70e3      	strb	r3, [r4, #3]
	style_indic_bar_vd.body.border.color = LV_COLOR_MAKE(0, 255, 0);
 800b2e4:	7aa3      	ldrb	r3, [r4, #10]
 800b2e6:	f365 0304 	bfi	r3, r5, #0, #5
 800b2ea:	72a3      	strb	r3, [r4, #10]
 800b2ec:	8963      	ldrh	r3, [r4, #10]
 800b2ee:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800b2f2:	8163      	strh	r3, [r4, #10]
 800b2f4:	0a1b      	lsrs	r3, r3, #8
 800b2f6:	f365 03c7 	bfi	r3, r5, #3, #5
 800b2fa:	72e3      	strb	r3, [r4, #11]
 800b2fc:	4c19      	ldr	r4, [pc, #100]	; (800b364 <create_vumeter_r+0xd8>)
		bar_r[x] = lv_bar_create(Tela_Reading_MPX, NULL);
 800b2fe:	6838      	ldr	r0, [r7, #0]
 800b300:	2100      	movs	r1, #0
 800b302:	f009 fd9d 	bl	8014e40 <lv_bar_create>
		lv_obj_set_size(bar_r[x], 4, 21);
 800b306:	2215      	movs	r2, #21
		bar_r[x] = lv_bar_create(Tela_Reading_MPX, NULL);
 800b308:	6060      	str	r0, [r4, #4]
		lv_obj_set_size(bar_r[x], 4, 21);
 800b30a:	2104      	movs	r1, #4
 800b30c:	f003 ff58 	bl	800f1c0 <lv_obj_set_size>
		lv_bar_set_style(bar_r[x], LV_BAR_STYLE_BG, &style_indic_bar);
 800b310:	6860      	ldr	r0, [r4, #4]
 800b312:	4632      	mov	r2, r6
 800b314:	2100      	movs	r1, #0
 800b316:	f009 fd7d 	bl	8014e14 <lv_bar_set_style>
		lv_bar_set_style(bar_r[x], LV_BAR_STYLE_INDIC, &style_indic_bar);
 800b31a:	6860      	ldr	r0, [r4, #4]
 800b31c:	4632      	mov	r2, r6
 800b31e:	2101      	movs	r1, #1
 800b320:	f009 fd78 	bl	8014e14 <lv_bar_set_style>
		lv_obj_align(bar_r[x], NULL, LV_ALIGN_IN_TOP_LEFT, r_pos_x[x], 71);
 800b324:	2247      	movs	r2, #71	; 0x47
 800b326:	4b10      	ldr	r3, [pc, #64]	; (800b368 <create_vumeter_r+0xdc>)
 800b328:	9200      	str	r2, [sp, #0]
 800b32a:	f933 3025 	ldrsh.w	r3, [r3, r5, lsl #2]
 800b32e:	6860      	ldr	r0, [r4, #4]
 800b330:	2201      	movs	r2, #1
 800b332:	2100      	movs	r1, #0
 800b334:	f003 fba4 	bl	800ea80 <lv_obj_align>
 800b338:	3501      	adds	r5, #1
		lv_bar_set_value(bar_r[x], 100, 0);
 800b33a:	2200      	movs	r2, #0
 800b33c:	2164      	movs	r1, #100	; 0x64
 800b33e:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800b342:	f009 fd0b 	bl	8014d5c <lv_bar_set_value>
	for(uint8_t x = 0; x < 24; x++) {
 800b346:	2d18      	cmp	r5, #24
 800b348:	d1d9      	bne.n	800b2fe <create_vumeter_r+0x72>
}
 800b34a:	b003      	add	sp, #12
 800b34c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b34e:	bf00      	nop
 800b350:	200054bc 	.word	0x200054bc
 800b354:	2000c3b4 	.word	0x2000c3b4
 800b358:	200054f8 	.word	0x200054f8
 800b35c:	20005390 	.word	0x20005390
 800b360:	0801c5ca 	.word	0x0801c5ca
 800b364:	20005450 	.word	0x20005450
 800b368:	0802b784 	.word	0x0802b784

0800b36c <create_vumeter_l>:
{
 800b36c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800b36e:	4e30      	ldr	r6, [pc, #192]	; (800b430 <create_vumeter_l+0xc4>)
 800b370:	4930      	ldr	r1, [pc, #192]	; (800b434 <create_vumeter_l+0xc8>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800b372:	4c31      	ldr	r4, [pc, #196]	; (800b438 <create_vumeter_l+0xcc>)
		bar_l[x] = lv_bar_create(Tela_Reading_MPX, NULL);
 800b374:	4f31      	ldr	r7, [pc, #196]	; (800b43c <create_vumeter_l+0xd0>)
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800b376:	4630      	mov	r0, r6
 800b378:	f004 fc80 	bl	800fc7c <lv_style_copy>
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800b37c:	4b30      	ldr	r3, [pc, #192]	; (800b440 <create_vumeter_l+0xd4>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800b37e:	492d      	ldr	r1, [pc, #180]	; (800b434 <create_vumeter_l+0xc8>)
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800b380:	881b      	ldrh	r3, [r3, #0]
 800b382:	80b3      	strh	r3, [r6, #4]
	style_indic_bar.body.radius = 0;
 800b384:	2500      	movs	r5, #0
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800b386:	4620      	mov	r0, r4
	style_indic_bar.body.main_color = LV_COLOR_MAKE(105, 105, 105);
 800b388:	8073      	strh	r3, [r6, #2]
	style_indic_bar.body.border.color = LV_COLOR_MAKE(105, 105, 105);
 800b38a:	8173      	strh	r3, [r6, #10]
	style_indic_bar.body.radius = 0;
 800b38c:	80f5      	strh	r5, [r6, #6]
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800b38e:	f004 fc75 	bl	800fc7c <lv_style_copy>
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800b392:	7923      	ldrb	r3, [r4, #4]
	style_indic_bar_vd.body.radius = 0;
 800b394:	80e5      	strh	r5, [r4, #6]
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800b396:	f365 0304 	bfi	r3, r5, #0, #5
 800b39a:	7123      	strb	r3, [r4, #4]
 800b39c:	88a3      	ldrh	r3, [r4, #4]
 800b39e:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800b3a2:	80a3      	strh	r3, [r4, #4]
 800b3a4:	0a1b      	lsrs	r3, r3, #8
 800b3a6:	f365 03c7 	bfi	r3, r5, #3, #5
 800b3aa:	7163      	strb	r3, [r4, #5]
	style_indic_bar_vd.body.main_color = LV_COLOR_MAKE(0, 255, 0);
 800b3ac:	78a3      	ldrb	r3, [r4, #2]
 800b3ae:	f365 0304 	bfi	r3, r5, #0, #5
 800b3b2:	70a3      	strb	r3, [r4, #2]
 800b3b4:	8863      	ldrh	r3, [r4, #2]
 800b3b6:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800b3ba:	8063      	strh	r3, [r4, #2]
 800b3bc:	0a1b      	lsrs	r3, r3, #8
 800b3be:	f365 03c7 	bfi	r3, r5, #3, #5
 800b3c2:	70e3      	strb	r3, [r4, #3]
	style_indic_bar_vd.body.border.color = LV_COLOR_MAKE(0, 255, 0);
 800b3c4:	7aa3      	ldrb	r3, [r4, #10]
 800b3c6:	f365 0304 	bfi	r3, r5, #0, #5
 800b3ca:	72a3      	strb	r3, [r4, #10]
 800b3cc:	8963      	ldrh	r3, [r4, #10]
 800b3ce:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800b3d2:	8163      	strh	r3, [r4, #10]
 800b3d4:	0a1b      	lsrs	r3, r3, #8
 800b3d6:	f365 03c7 	bfi	r3, r5, #3, #5
 800b3da:	72e3      	strb	r3, [r4, #11]
 800b3dc:	4c19      	ldr	r4, [pc, #100]	; (800b444 <create_vumeter_l+0xd8>)
		bar_l[x] = lv_bar_create(Tela_Reading_MPX, NULL);
 800b3de:	6838      	ldr	r0, [r7, #0]
 800b3e0:	2100      	movs	r1, #0
 800b3e2:	f009 fd2d 	bl	8014e40 <lv_bar_create>
		lv_obj_set_size(bar_l[x], 4, 21);
 800b3e6:	2215      	movs	r2, #21
		bar_l[x] = lv_bar_create(Tela_Reading_MPX, NULL);
 800b3e8:	6060      	str	r0, [r4, #4]
		lv_obj_set_size(bar_l[x], 4, 21);
 800b3ea:	2104      	movs	r1, #4
 800b3ec:	f003 fee8 	bl	800f1c0 <lv_obj_set_size>
		lv_bar_set_style(bar_l[x], LV_BAR_STYLE_BG, &style_indic_bar);
 800b3f0:	6860      	ldr	r0, [r4, #4]
 800b3f2:	4632      	mov	r2, r6
 800b3f4:	2100      	movs	r1, #0
 800b3f6:	f009 fd0d 	bl	8014e14 <lv_bar_set_style>
		lv_bar_set_style(bar_l[x], LV_BAR_STYLE_INDIC, &style_indic_bar);
 800b3fa:	6860      	ldr	r0, [r4, #4]
 800b3fc:	4632      	mov	r2, r6
 800b3fe:	2101      	movs	r1, #1
 800b400:	f009 fd08 	bl	8014e14 <lv_bar_set_style>
		lv_obj_align(bar_l[x], NULL, LV_ALIGN_IN_TOP_LEFT, l_pos_x[x], 103);
 800b404:	2267      	movs	r2, #103	; 0x67
 800b406:	4b10      	ldr	r3, [pc, #64]	; (800b448 <create_vumeter_l+0xdc>)
 800b408:	9200      	str	r2, [sp, #0]
 800b40a:	f933 3025 	ldrsh.w	r3, [r3, r5, lsl #2]
 800b40e:	6860      	ldr	r0, [r4, #4]
 800b410:	2201      	movs	r2, #1
 800b412:	2100      	movs	r1, #0
 800b414:	f003 fb34 	bl	800ea80 <lv_obj_align>
 800b418:	3501      	adds	r5, #1
		lv_bar_set_value(bar_l[x], 100, 0);
 800b41a:	2200      	movs	r2, #0
 800b41c:	2164      	movs	r1, #100	; 0x64
 800b41e:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800b422:	f009 fc9b 	bl	8014d5c <lv_bar_set_value>
	for(uint8_t x = 0; x < 24; x++) {
 800b426:	2d18      	cmp	r5, #24
 800b428:	d1d9      	bne.n	800b3de <create_vumeter_l+0x72>
}
 800b42a:	b003      	add	sp, #12
 800b42c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b42e:	bf00      	nop
 800b430:	200054bc 	.word	0x200054bc
 800b434:	2000c3b4 	.word	0x2000c3b4
 800b438:	200054f8 	.word	0x200054f8
 800b43c:	20005390 	.word	0x20005390
 800b440:	0801c5ca 	.word	0x0801c5ca
 800b444:	20005390 	.word	0x20005390
 800b448:	0802b6c4 	.word	0x0802b6c4

0800b44c <btn_next_audio>:
{
 800b44c:	b538      	push	{r3, r4, r5, lr}
	imgbtn_next = lv_imgbtn_create(Tela_Reading_MPX, NULL);
 800b44e:	4b15      	ldr	r3, [pc, #84]	; (800b4a4 <btn_next_audio+0x58>)
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_REL, &Btn_next);
 800b450:	4d15      	ldr	r5, [pc, #84]	; (800b4a8 <btn_next_audio+0x5c>)
	imgbtn_next = lv_imgbtn_create(Tela_Reading_MPX, NULL);
 800b452:	6818      	ldr	r0, [r3, #0]
 800b454:	4c15      	ldr	r4, [pc, #84]	; (800b4ac <btn_next_audio+0x60>)
 800b456:	2100      	movs	r1, #0
 800b458:	f00b fd60 	bl	8016f1c <lv_imgbtn_create>
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_REL, &Btn_next);
 800b45c:	462a      	mov	r2, r5
 800b45e:	2100      	movs	r1, #0
	imgbtn_next = lv_imgbtn_create(Tela_Reading_MPX, NULL);
 800b460:	6020      	str	r0, [r4, #0]
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_REL, &Btn_next);
 800b462:	f00b fda3 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_TGL_REL, &Btn_next);
 800b466:	462a      	mov	r2, r5
 800b468:	6820      	ldr	r0, [r4, #0]
 800b46a:	2102      	movs	r1, #2
 800b46c:	f00b fd9e 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_TGL_PR, &Btn_next);
 800b470:	462a      	mov	r2, r5
 800b472:	6820      	ldr	r0, [r4, #0]
 800b474:	2103      	movs	r1, #3
 800b476:	f00b fd99 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_PR, &Btn_next);
 800b47a:	462a      	mov	r2, r5
 800b47c:	6820      	ldr	r0, [r4, #0]
 800b47e:	2101      	movs	r1, #1
 800b480:	f00b fd94 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_INA, &Btn_next);
 800b484:	462a      	mov	r2, r5
 800b486:	6820      	ldr	r0, [r4, #0]
 800b488:	2104      	movs	r1, #4
 800b48a:	f00b fd8f 	bl	8016fac <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn_next, btn_event_next_audio);
 800b48e:	6820      	ldr	r0, [r4, #0]
 800b490:	4907      	ldr	r1, [pc, #28]	; (800b4b0 <btn_next_audio+0x64>)
 800b492:	f003 f956 	bl	800e742 <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn_next, 112, 18);
 800b496:	6820      	ldr	r0, [r4, #0]
 800b498:	2212      	movs	r2, #18
 800b49a:	2170      	movs	r1, #112	; 0x70
}
 800b49c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lv_obj_set_pos(imgbtn_next, 112, 18);
 800b4a0:	f003 ba99 	b.w	800e9d6 <lv_obj_set_pos>
 800b4a4:	20005390 	.word	0x20005390
 800b4a8:	20001ad8 	.word	0x20001ad8
 800b4ac:	200054b8 	.word	0x200054b8
 800b4b0:	0800b191 	.word	0x0800b191

0800b4b4 <screen_reading_mpx>:
	Tela_Reading_MPX = lv_obj_create(NULL, NULL);
 800b4b4:	2100      	movs	r1, #0
{
 800b4b6:	b538      	push	{r3, r4, r5, lr}
	Tela_Reading_MPX = lv_obj_create(NULL, NULL);
 800b4b8:	4608      	mov	r0, r1
 800b4ba:	f003 fd03 	bl	800eec4 <lv_obj_create>
 800b4be:	4d12      	ldr	r5, [pc, #72]	; (800b508 <screen_reading_mpx+0x54>)
	img_fundo = lv_img_create(Tela_Reading_MPX, NULL);
 800b4c0:	4c12      	ldr	r4, [pc, #72]	; (800b50c <screen_reading_mpx+0x58>)
	Tela_Reading_MPX = lv_obj_create(NULL, NULL);
 800b4c2:	6028      	str	r0, [r5, #0]
	img_fundo = lv_img_create(Tela_Reading_MPX, NULL);
 800b4c4:	2100      	movs	r1, #0
 800b4c6:	f00b fbff 	bl	8016cc8 <lv_img_create>
    lv_img_set_src(img_fundo, &tela_reading_audio);
 800b4ca:	4911      	ldr	r1, [pc, #68]	; (800b510 <screen_reading_mpx+0x5c>)
	img_fundo = lv_img_create(Tela_Reading_MPX, NULL);
 800b4cc:	6020      	str	r0, [r4, #0]
    lv_img_set_src(img_fundo, &tela_reading_audio);
 800b4ce:	f00b fb6b 	bl	8016ba8 <lv_img_set_src>
    lv_obj_set_protect(img_fundo, LV_PROTECT_POS);
 800b4d2:	2104      	movs	r1, #4
 800b4d4:	6820      	ldr	r0, [r4, #0]
 800b4d6:	f003 f927 	bl	800e728 <lv_obj_set_protect>
	lv_obj_set_event_cb(img_fundo, btn_event_esc_audio);
 800b4da:	490e      	ldr	r1, [pc, #56]	; (800b514 <screen_reading_mpx+0x60>)
 800b4dc:	6820      	ldr	r0, [r4, #0]
 800b4de:	f003 f930 	bl	800e742 <lv_obj_set_event_cb>
	lv_obj_set_click(img_fundo, 1);
 800b4e2:	2101      	movs	r1, #1
 800b4e4:	6820      	ldr	r0, [r4, #0]
 800b4e6:	f003 f903 	bl	800e6f0 <lv_obj_set_click>
	create_vumeter_m();
 800b4ea:	f7ff fe5f 	bl	800b1ac <create_vumeter_m>
	create_vumeter_r();
 800b4ee:	f7ff fecd 	bl	800b28c <create_vumeter_r>
	create_vumeter_l();
 800b4f2:	f7ff ff3b 	bl	800b36c <create_vumeter_l>
	btn_next_audio();
 800b4f6:	f7ff ffa9 	bl	800b44c <btn_next_audio>
 800b4fa:	6828      	ldr	r0, [r5, #0]
 800b4fc:	f002 fece 	bl	800e29c <lv_disp_load_scr>
	TelaAtiva = TelaMpx;
 800b500:	4b05      	ldr	r3, [pc, #20]	; (800b518 <screen_reading_mpx+0x64>)
 800b502:	220a      	movs	r2, #10
 800b504:	601a      	str	r2, [r3, #0]
 800b506:	bd38      	pop	{r3, r4, r5, pc}
 800b508:	20005390 	.word	0x20005390
 800b50c:	200054b4 	.word	0x200054b4
 800b510:	20001bbc 	.word	0x20001bbc
 800b514:	0800b175 	.word	0x0800b175
 800b518:	200033e4 	.word	0x200033e4

0800b51c <ButtonEventTelaMpx>:

void ButtonEventTelaMpx(uint8_t event, uint8_t tipo, uint8_t id)
{
	if(event == EVT_PBTN_INPUT) {
 800b51c:	2810      	cmp	r0, #16
 800b51e:	d10e      	bne.n	800b53e <ButtonEventTelaMpx+0x22>
		if(tipo == PBTN_SCLK) {	// Single Click
 800b520:	2901      	cmp	r1, #1
 800b522:	d10c      	bne.n	800b53e <ButtonEventTelaMpx+0x22>
			switch(id) {
 800b524:	b112      	cbz	r2, 800b52c <ButtonEventTelaMpx+0x10>
 800b526:	2a01      	cmp	r2, #1
 800b528:	d005      	beq.n	800b536 <ButtonEventTelaMpx+0x1a>
 800b52a:	4770      	bx	lr
				case KEY_DN:
					lv_event_send(img_fundo, LV_EVENT_APPLY, NULL);
 800b52c:	4b04      	ldr	r3, [pc, #16]	; (800b540 <ButtonEventTelaMpx+0x24>)
 800b52e:	2111      	movs	r1, #17
					break;
				case KEY_UP:
					lv_event_send(imgbtn_next, LV_EVENT_APPLY, NULL);
 800b530:	6818      	ldr	r0, [r3, #0]
 800b532:	f003 b94d 	b.w	800e7d0 <lv_event_send>
 800b536:	2200      	movs	r2, #0
 800b538:	2111      	movs	r1, #17
 800b53a:	4b02      	ldr	r3, [pc, #8]	; (800b544 <ButtonEventTelaMpx+0x28>)
 800b53c:	e7f8      	b.n	800b530 <ButtonEventTelaMpx+0x14>
 800b53e:	4770      	bx	lr
 800b540:	200054b4 	.word	0x200054b4
 800b544:	200054b8 	.word	0x200054b8

0800b548 <btn_event_next_efic>:
	lv_obj_set_pos(imgbtn_next, 112, 18);
}

static void btn_event_next_efic(lv_obj_t * btn, lv_event_t event)
{
	if(event == LV_EVENT_APPLY) {
 800b548:	2911      	cmp	r1, #17
{
 800b54a:	b508      	push	{r3, lr}
	if(event == LV_EVENT_APPLY) {
 800b54c:	d10b      	bne.n	800b566 <btn_event_next_efic+0x1e>
		//printf("Button Next Released SCREEN_READING_STATUS\n");
		lv_task_del(Task_Reading_EFIC);
 800b54e:	4b06      	ldr	r3, [pc, #24]	; (800b568 <btn_event_next_efic+0x20>)
 800b550:	6818      	ldr	r0, [r3, #0]
 800b552:	f009 f86f 	bl	8014634 <lv_task_del>
		lv_obj_del(Tela_Reading_EFIC);
 800b556:	4b05      	ldr	r3, [pc, #20]	; (800b56c <btn_event_next_efic+0x24>)
 800b558:	6818      	ldr	r0, [r3, #0]
 800b55a:	f003 fea4 	bl	800f2a6 <lv_obj_del>
		screen_reading_status();
	}
}
 800b55e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_reading_status();
 800b562:	f000 bb75 	b.w	800bc50 <screen_reading_status>
 800b566:	bd08      	pop	{r3, pc}
 800b568:	20005534 	.word	0x20005534
 800b56c:	20005538 	.word	0x20005538

0800b570 <btn_event_prev_efic>:
	lv_obj_set_pos(imgbtn_prev, 32, 18);
}

static void btn_event_prev_efic(lv_obj_t * btn, lv_event_t event)
{
	if(event == LV_EVENT_APPLY) {
 800b570:	2911      	cmp	r1, #17
{
 800b572:	b508      	push	{r3, lr}
	if(event == LV_EVENT_APPLY) {
 800b574:	d10b      	bne.n	800b58e <btn_event_prev_efic+0x1e>
		//printf("Button ESC Released\n");
		lv_task_del(Task_Reading_EFIC);
 800b576:	4b06      	ldr	r3, [pc, #24]	; (800b590 <btn_event_prev_efic+0x20>)
 800b578:	6818      	ldr	r0, [r3, #0]
 800b57a:	f009 f85b 	bl	8014634 <lv_task_del>
		lv_obj_del(Tela_Reading_EFIC);
 800b57e:	4b05      	ldr	r3, [pc, #20]	; (800b594 <btn_event_prev_efic+0x24>)
 800b580:	6818      	ldr	r0, [r3, #0]
 800b582:	f003 fe90 	bl	800f2a6 <lv_obj_del>
		screen_reading_vpa();
	}
}
 800b586:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_reading_vpa();
 800b58a:	f000 bfff 	b.w	800c58c <screen_reading_vpa>
 800b58e:	bd08      	pop	{r3, pc}
 800b590:	20005534 	.word	0x20005534
 800b594:	20005538 	.word	0x20005538

0800b598 <btn_next_efic>:
{
 800b598:	b538      	push	{r3, r4, r5, lr}
	imgbtn_next = lv_imgbtn_create(Tela_Reading_EFIC, NULL);
 800b59a:	4b15      	ldr	r3, [pc, #84]	; (800b5f0 <btn_next_efic+0x58>)
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_REL, &Btn_next);
 800b59c:	4d15      	ldr	r5, [pc, #84]	; (800b5f4 <btn_next_efic+0x5c>)
	imgbtn_next = lv_imgbtn_create(Tela_Reading_EFIC, NULL);
 800b59e:	6818      	ldr	r0, [r3, #0]
 800b5a0:	4c15      	ldr	r4, [pc, #84]	; (800b5f8 <btn_next_efic+0x60>)
 800b5a2:	2100      	movs	r1, #0
 800b5a4:	f00b fcba 	bl	8016f1c <lv_imgbtn_create>
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_REL, &Btn_next);
 800b5a8:	462a      	mov	r2, r5
 800b5aa:	2100      	movs	r1, #0
	imgbtn_next = lv_imgbtn_create(Tela_Reading_EFIC, NULL);
 800b5ac:	6020      	str	r0, [r4, #0]
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_REL, &Btn_next);
 800b5ae:	f00b fcfd 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_TGL_REL, &Btn_next);
 800b5b2:	462a      	mov	r2, r5
 800b5b4:	6820      	ldr	r0, [r4, #0]
 800b5b6:	2102      	movs	r1, #2
 800b5b8:	f00b fcf8 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_TGL_PR, &Btn_next);
 800b5bc:	462a      	mov	r2, r5
 800b5be:	6820      	ldr	r0, [r4, #0]
 800b5c0:	2103      	movs	r1, #3
 800b5c2:	f00b fcf3 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_PR, &Btn_next);
 800b5c6:	462a      	mov	r2, r5
 800b5c8:	6820      	ldr	r0, [r4, #0]
 800b5ca:	2101      	movs	r1, #1
 800b5cc:	f00b fcee 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_INA, &Btn_next);
 800b5d0:	462a      	mov	r2, r5
 800b5d2:	6820      	ldr	r0, [r4, #0]
 800b5d4:	2104      	movs	r1, #4
 800b5d6:	f00b fce9 	bl	8016fac <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn_next, btn_event_next_efic);
 800b5da:	6820      	ldr	r0, [r4, #0]
 800b5dc:	4907      	ldr	r1, [pc, #28]	; (800b5fc <btn_next_efic+0x64>)
 800b5de:	f003 f8b0 	bl	800e742 <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn_next, 112, 18);
 800b5e2:	6820      	ldr	r0, [r4, #0]
 800b5e4:	2212      	movs	r2, #18
 800b5e6:	2170      	movs	r1, #112	; 0x70
}
 800b5e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lv_obj_set_pos(imgbtn_next, 112, 18);
 800b5ec:	f003 b9f3 	b.w	800e9d6 <lv_obj_set_pos>
 800b5f0:	20005538 	.word	0x20005538
 800b5f4:	20001ad8 	.word	0x20001ad8
 800b5f8:	20005580 	.word	0x20005580
 800b5fc:	0800b549 	.word	0x0800b549

0800b600 <btn_prev_efic>:
{
 800b600:	b538      	push	{r3, r4, r5, lr}
	imgbtn_prev = lv_imgbtn_create(Tela_Reading_EFIC, NULL);
 800b602:	4b15      	ldr	r3, [pc, #84]	; (800b658 <btn_prev_efic+0x58>)
	lv_imgbtn_set_src(imgbtn_prev, LV_BTN_STATE_REL, &Btn_prev);
 800b604:	4d15      	ldr	r5, [pc, #84]	; (800b65c <btn_prev_efic+0x5c>)
	imgbtn_prev = lv_imgbtn_create(Tela_Reading_EFIC, NULL);
 800b606:	6818      	ldr	r0, [r3, #0]
 800b608:	4c15      	ldr	r4, [pc, #84]	; (800b660 <btn_prev_efic+0x60>)
 800b60a:	2100      	movs	r1, #0
 800b60c:	f00b fc86 	bl	8016f1c <lv_imgbtn_create>
	lv_imgbtn_set_src(imgbtn_prev, LV_BTN_STATE_REL, &Btn_prev);
 800b610:	462a      	mov	r2, r5
 800b612:	2100      	movs	r1, #0
	imgbtn_prev = lv_imgbtn_create(Tela_Reading_EFIC, NULL);
 800b614:	6020      	str	r0, [r4, #0]
	lv_imgbtn_set_src(imgbtn_prev, LV_BTN_STATE_REL, &Btn_prev);
 800b616:	f00b fcc9 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_prev, LV_BTN_STATE_TGL_REL, &Btn_prev);
 800b61a:	462a      	mov	r2, r5
 800b61c:	6820      	ldr	r0, [r4, #0]
 800b61e:	2102      	movs	r1, #2
 800b620:	f00b fcc4 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_prev, LV_BTN_STATE_TGL_PR, &Btn_prev);
 800b624:	462a      	mov	r2, r5
 800b626:	6820      	ldr	r0, [r4, #0]
 800b628:	2103      	movs	r1, #3
 800b62a:	f00b fcbf 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_prev, LV_BTN_STATE_PR, &Btn_prev);
 800b62e:	462a      	mov	r2, r5
 800b630:	6820      	ldr	r0, [r4, #0]
 800b632:	2101      	movs	r1, #1
 800b634:	f00b fcba 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_prev, LV_BTN_STATE_INA, &Btn_prev);
 800b638:	462a      	mov	r2, r5
 800b63a:	6820      	ldr	r0, [r4, #0]
 800b63c:	2104      	movs	r1, #4
 800b63e:	f00b fcb5 	bl	8016fac <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn_prev, btn_event_prev_efic);
 800b642:	6820      	ldr	r0, [r4, #0]
 800b644:	4907      	ldr	r1, [pc, #28]	; (800b664 <btn_prev_efic+0x64>)
 800b646:	f003 f87c 	bl	800e742 <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn_prev, 32, 18);
 800b64a:	6820      	ldr	r0, [r4, #0]
 800b64c:	2212      	movs	r2, #18
 800b64e:	2120      	movs	r1, #32
}
 800b650:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lv_obj_set_pos(imgbtn_prev, 32, 18);
 800b654:	f003 b9bf 	b.w	800e9d6 <lv_obj_set_pos>
 800b658:	20005538 	.word	0x20005538
 800b65c:	20001b44 	.word	0x20001b44
 800b660:	20005584 	.word	0x20005584
 800b664:	0800b571 	.word	0x0800b571

0800b668 <create_vumeter_eficiencia>:

void create_vumeter_eficiencia(void)
{
 800b668:	b573      	push	{r0, r1, r4, r5, r6, lr}
	// Area do Barguraph Frequency
	// Indicador OFF
	lv_style_copy(&style_indic_bar, &lv_style_pretty_color);
 800b66a:	4e36      	ldr	r6, [pc, #216]	; (800b744 <create_vumeter_eficiencia+0xdc>)
 800b66c:	4936      	ldr	r1, [pc, #216]	; (800b748 <create_vumeter_eficiencia+0xe0>)
	style_indic_bar.body.main_color = LV_COLOR_MAKE(105, 105, 105);
	style_indic_bar.body.border.color = LV_COLOR_MAKE(105, 105, 105);
	style_indic_bar.body.shadow.color = LV_COLOR_MAKE(105, 105, 105);


	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty_color);
 800b66e:	4c37      	ldr	r4, [pc, #220]	; (800b74c <create_vumeter_eficiencia+0xe4>)
	lv_style_copy(&style_indic_bar, &lv_style_pretty_color);
 800b670:	4630      	mov	r0, r6
 800b672:	f004 fb03 	bl	800fc7c <lv_style_copy>
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800b676:	4b36      	ldr	r3, [pc, #216]	; (800b750 <create_vumeter_eficiencia+0xe8>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty_color);
 800b678:	4933      	ldr	r1, [pc, #204]	; (800b748 <create_vumeter_eficiencia+0xe0>)
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800b67a:	881b      	ldrh	r3, [r3, #0]
 800b67c:	80b3      	strh	r3, [r6, #4]
	style_indic_bar.body.radius = 0;
 800b67e:	2500      	movs	r5, #0
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty_color);
 800b680:	4620      	mov	r0, r4
	style_indic_bar.body.main_color = LV_COLOR_MAKE(105, 105, 105);
 800b682:	8073      	strh	r3, [r6, #2]
	style_indic_bar.body.border.color = LV_COLOR_MAKE(105, 105, 105);
 800b684:	8173      	strh	r3, [r6, #10]
	style_indic_bar.body.shadow.color = LV_COLOR_MAKE(105, 105, 105);
 800b686:	8233      	strh	r3, [r6, #16]
	style_indic_bar.body.radius = 0;
 800b688:	80f5      	strh	r5, [r6, #6]
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty_color);
 800b68a:	f004 faf7 	bl	800fc7c <lv_style_copy>
	style_indic_bar_vd.body.radius = 0;
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800b68e:	7923      	ldrb	r3, [r4, #4]
	style_indic_bar_vd.body.radius = 0;
 800b690:	80e5      	strh	r5, [r4, #6]
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800b692:	f365 0304 	bfi	r3, r5, #0, #5
 800b696:	7123      	strb	r3, [r4, #4]
 800b698:	88a3      	ldrh	r3, [r4, #4]
 800b69a:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800b69e:	80a3      	strh	r3, [r4, #4]
 800b6a0:	0a1b      	lsrs	r3, r3, #8
 800b6a2:	f365 03c7 	bfi	r3, r5, #3, #5
 800b6a6:	7163      	strb	r3, [r4, #5]
	style_indic_bar_vd.body.main_color = LV_COLOR_MAKE(0, 255, 0);
 800b6a8:	78a3      	ldrb	r3, [r4, #2]
 800b6aa:	f365 0304 	bfi	r3, r5, #0, #5
 800b6ae:	70a3      	strb	r3, [r4, #2]
 800b6b0:	8863      	ldrh	r3, [r4, #2]
 800b6b2:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800b6b6:	8063      	strh	r3, [r4, #2]
 800b6b8:	0a1b      	lsrs	r3, r3, #8
 800b6ba:	f365 03c7 	bfi	r3, r5, #3, #5
 800b6be:	70e3      	strb	r3, [r4, #3]
	style_indic_bar_vd.body.border.color = LV_COLOR_MAKE(0, 255, 0);
 800b6c0:	7aa3      	ldrb	r3, [r4, #10]
 800b6c2:	f365 0304 	bfi	r3, r5, #0, #5
 800b6c6:	72a3      	strb	r3, [r4, #10]
 800b6c8:	8963      	ldrh	r3, [r4, #10]
 800b6ca:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800b6ce:	8163      	strh	r3, [r4, #10]
 800b6d0:	0a1b      	lsrs	r3, r3, #8
 800b6d2:	f365 03c7 	bfi	r3, r5, #3, #5
 800b6d6:	72e3      	strb	r3, [r4, #11]
	style_indic_bar_vd.body.shadow.color = LV_COLOR_MAKE(0, 255, 0);
 800b6d8:	7c23      	ldrb	r3, [r4, #16]
 800b6da:	f365 0304 	bfi	r3, r5, #0, #5
 800b6de:	7423      	strb	r3, [r4, #16]
 800b6e0:	8a23      	ldrh	r3, [r4, #16]
 800b6e2:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800b6e6:	8223      	strh	r3, [r4, #16]
 800b6e8:	0a1b      	lsrs	r3, r3, #8
 800b6ea:	f365 03c7 	bfi	r3, r5, #3, #5
 800b6ee:	7463      	strb	r3, [r4, #17]
 800b6f0:	4c18      	ldr	r4, [pc, #96]	; (800b754 <create_vumeter_eficiencia+0xec>)

	// Create a default bar
	for(uint8_t x = 0; x < 16; x++) {
		bar_e[x] = lv_bar_create(Tela_Reading_EFIC, NULL);
 800b6f2:	4b19      	ldr	r3, [pc, #100]	; (800b758 <create_vumeter_eficiencia+0xf0>)
 800b6f4:	2100      	movs	r1, #0
 800b6f6:	6818      	ldr	r0, [r3, #0]
 800b6f8:	f009 fba2 	bl	8014e40 <lv_bar_create>
		lv_obj_set_size(bar_e[x], 5, 19);
 800b6fc:	2213      	movs	r2, #19
		bar_e[x] = lv_bar_create(Tela_Reading_EFIC, NULL);
 800b6fe:	6060      	str	r0, [r4, #4]
		lv_obj_set_size(bar_e[x], 5, 19);
 800b700:	2105      	movs	r1, #5
 800b702:	f003 fd5d 	bl	800f1c0 <lv_obj_set_size>
		lv_bar_set_style(bar_e[x], LV_BAR_STYLE_BG, &style_indic_bar);
 800b706:	6860      	ldr	r0, [r4, #4]
 800b708:	4632      	mov	r2, r6
 800b70a:	2100      	movs	r1, #0
 800b70c:	f009 fb82 	bl	8014e14 <lv_bar_set_style>
		lv_bar_set_style(bar_e[x], LV_BAR_STYLE_INDIC, &style_indic_bar);
 800b710:	6860      	ldr	r0, [r4, #4]
 800b712:	4632      	mov	r2, r6
 800b714:	2101      	movs	r1, #1
 800b716:	f009 fb7d 	bl	8014e14 <lv_bar_set_style>
		lv_obj_align(bar_e[x], NULL, LV_ALIGN_IN_TOP_LEFT, e_pos_x[x], 76);
 800b71a:	224c      	movs	r2, #76	; 0x4c
 800b71c:	4b0f      	ldr	r3, [pc, #60]	; (800b75c <create_vumeter_eficiencia+0xf4>)
 800b71e:	9200      	str	r2, [sp, #0]
 800b720:	f933 3025 	ldrsh.w	r3, [r3, r5, lsl #2]
 800b724:	6860      	ldr	r0, [r4, #4]
 800b726:	2201      	movs	r2, #1
 800b728:	2100      	movs	r1, #0
 800b72a:	f003 f9a9 	bl	800ea80 <lv_obj_align>
 800b72e:	3501      	adds	r5, #1
		lv_bar_set_value(bar_e[x], 100, 1);
 800b730:	2201      	movs	r2, #1
 800b732:	2164      	movs	r1, #100	; 0x64
 800b734:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800b738:	f009 fb10 	bl	8014d5c <lv_bar_set_value>
	for(uint8_t x = 0; x < 16; x++) {
 800b73c:	2d10      	cmp	r5, #16
 800b73e:	d1d8      	bne.n	800b6f2 <create_vumeter_eficiencia+0x8a>
	}
}
 800b740:	b002      	add	sp, #8
 800b742:	bd70      	pop	{r4, r5, r6, pc}
 800b744:	20005588 	.word	0x20005588
 800b748:	2000c2c4 	.word	0x2000c2c4
 800b74c:	200055c4 	.word	0x200055c4
 800b750:	0801c5cc 	.word	0x0801c5cc
 800b754:	20005538 	.word	0x20005538
 800b758:	20005538 	.word	0x20005538
 800b75c:	0802b7e4 	.word	0x0802b7e4

0800b760 <update_vumeter_eficiencia>:

void update_vumeter_eficiencia(void)
{
 800b760:	b570      	push	{r4, r5, r6, lr}
	float f_ipa = 1.6f;

	float resul = (((f_fwd / (f_vpa * f_ipa)) * 100) / 5) - 1;

	for(x = 0; x <= resul; x++) {
		lv_bar_set_style(bar_e[x], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800b762:	4d0a      	ldr	r5, [pc, #40]	; (800b78c <update_vumeter_eficiencia+0x2c>)
 800b764:	4e0a      	ldr	r6, [pc, #40]	; (800b790 <update_vumeter_eficiencia+0x30>)
	for(x = 0; x <= resul; x++) {
 800b766:	2400      	movs	r4, #0
 800b768:	2c0b      	cmp	r4, #11
 800b76a:	d100      	bne.n	800b76e <update_vumeter_eficiencia+0xe>
		lv_bar_set_style(bar_e[x], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
	}
}
 800b76c:	bd70      	pop	{r4, r5, r6, pc}
		lv_bar_set_style(bar_e[x], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800b76e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800b772:	4632      	mov	r2, r6
 800b774:	2100      	movs	r1, #0
 800b776:	f009 fb4d 	bl	8014e14 <lv_bar_set_style>
		lv_bar_set_style(bar_e[x], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
 800b77a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800b77e:	4632      	mov	r2, r6
 800b780:	2101      	movs	r1, #1
 800b782:	f009 fb47 	bl	8014e14 <lv_bar_set_style>
	for(x = 0; x <= resul; x++) {
 800b786:	3401      	adds	r4, #1
 800b788:	e7ee      	b.n	800b768 <update_vumeter_eficiencia+0x8>
 800b78a:	bf00      	nop
 800b78c:	2000553c 	.word	0x2000553c
 800b790:	200055c4 	.word	0x200055c4
 800b794:	00000000 	.word	0x00000000

0800b798 <update_screen_efic>:
	lv_obj_align(txt_efic, NULL, LV_ALIGN_IN_TOP_RIGHT, -70, 45); 	// Alinha ao centro
}


static void update_screen_efic(lv_task_t * param)
{
 800b798:	b510      	push	{r4, lr}
	float f_vpa = (3900 * (3.30 / 4095.0)) * 5;
	float f_ipa = (2000 * (3.30 / 4095.0)) * 0.98;

	float resul = (f_fwd / (f_vpa * f_ipa)) * 100;

	sprintf(buffer, "%0.1f", resul);
 800b79a:	4c0b      	ldr	r4, [pc, #44]	; (800b7c8 <update_screen_efic+0x30>)
 800b79c:	490b      	ldr	r1, [pc, #44]	; (800b7cc <update_screen_efic+0x34>)
 800b79e:	a308      	add	r3, pc, #32	; (adr r3, 800b7c0 <update_screen_efic+0x28>)
 800b7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a4:	4620      	mov	r0, r4
 800b7a6:	f00e f9b9 	bl	8019b1c <sprintf>
	lv_label_set_text(txt_efic, buffer);
 800b7aa:	4b09      	ldr	r3, [pc, #36]	; (800b7d0 <update_screen_efic+0x38>)
 800b7ac:	4621      	mov	r1, r4
 800b7ae:	6818      	ldr	r0, [r3, #0]
 800b7b0:	f00c f8ae 	bl	8017910 <lv_label_set_text>
	update_vumeter_eficiencia();

}
 800b7b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_vumeter_eficiencia();
 800b7b8:	f7ff bfd2 	b.w	800b760 <update_vumeter_eficiencia>
 800b7bc:	f3af 8000 	nop.w
 800b7c0:	80000000 	.word	0x80000000
 800b7c4:	404e3789 	.word	0x404e3789
 800b7c8:	20004ce8 	.word	0x20004ce8
 800b7cc:	0802b824 	.word	0x0802b824
 800b7d0:	2000563c 	.word	0x2000563c
 800b7d4:	00000000 	.word	0x00000000

0800b7d8 <print_eficiencia>:
{
 800b7d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	sprintf(buffer, "%0.1f", resul);
 800b7da:	4f27      	ldr	r7, [pc, #156]	; (800b878 <print_eficiencia+0xa0>)
	lv_style_copy(&style_txt1, &lv_style_plain);
 800b7dc:	4c27      	ldr	r4, [pc, #156]	; (800b87c <print_eficiencia+0xa4>)
	sprintf(buffer, "%0.1f", resul);
 800b7de:	4928      	ldr	r1, [pc, #160]	; (800b880 <print_eficiencia+0xa8>)
	txt_efic = lv_label_create(Tela_Reading_EFIC, NULL);
 800b7e0:	4d28      	ldr	r5, [pc, #160]	; (800b884 <print_eficiencia+0xac>)
	sprintf(buffer, "%0.1f", resul);
 800b7e2:	a323      	add	r3, pc, #140	; (adr r3, 800b870 <print_eficiencia+0x98>)
 800b7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e8:	4638      	mov	r0, r7
 800b7ea:	f00e f997 	bl	8019b1c <sprintf>
	lv_style_copy(&style_txt1, &lv_style_plain);
 800b7ee:	4620      	mov	r0, r4
 800b7f0:	4925      	ldr	r1, [pc, #148]	; (800b888 <print_eficiencia+0xb0>)
 800b7f2:	f004 fa43 	bl	800fc7c <lv_style_copy>
	style_txt1.text.font = &lv_font_eurostile_28;
 800b7f6:	4b25      	ldr	r3, [pc, #148]	; (800b88c <print_eficiencia+0xb4>)
 800b7f8:	6263      	str	r3, [r4, #36]	; 0x24
	style_txt1.text.color = LV_COLOR_CYAN;
 800b7fa:	f894 3020 	ldrb.w	r3, [r4, #32]
 800b7fe:	f043 031f 	orr.w	r3, r3, #31
 800b802:	f884 3020 	strb.w	r3, [r4, #32]
 800b806:	8c23      	ldrh	r3, [r4, #32]
 800b808:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800b80c:	8423      	strh	r3, [r4, #32]
 800b80e:	0a1b      	lsrs	r3, r3, #8
 800b810:	f36f 03c7 	bfc	r3, #3, #5
 800b814:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	txt_efic = lv_label_create(Tela_Reading_EFIC, NULL);
 800b818:	4b1d      	ldr	r3, [pc, #116]	; (800b890 <print_eficiencia+0xb8>)
	style_txt1.text.letter_space = 1;
 800b81a:	2601      	movs	r6, #1
	txt_efic = lv_label_create(Tela_Reading_EFIC, NULL);
 800b81c:	6818      	ldr	r0, [r3, #0]
	style_txt1.text.letter_space = 1;
 800b81e:	8526      	strh	r6, [r4, #40]	; 0x28
	txt_efic = lv_label_create(Tela_Reading_EFIC, NULL);
 800b820:	2100      	movs	r1, #0
	style_txt1.text.line_space = 1;
 800b822:	8566      	strh	r6, [r4, #42]	; 0x2a
	txt_efic = lv_label_create(Tela_Reading_EFIC, NULL);
 800b824:	f00c f91e 	bl	8017a64 <lv_label_create>
	lv_obj_set_style(txt_efic, &style_txt1); 						// Configura o estilo criado
 800b828:	4621      	mov	r1, r4
	txt_efic = lv_label_create(Tela_Reading_EFIC, NULL);
 800b82a:	6028      	str	r0, [r5, #0]
	lv_obj_set_style(txt_efic, &style_txt1); 						// Configura o estilo criado
 800b82c:	f003 fdca 	bl	800f3c4 <lv_obj_set_style>
	lv_label_set_long_mode(txt_efic, LV_LABEL_LONG_EXPAND); 		// Quebra as linhas longas
 800b830:	6828      	ldr	r0, [r5, #0]
 800b832:	2100      	movs	r1, #0
 800b834:	f00c f8c0 	bl	80179b8 <lv_label_set_long_mode>
	lv_label_set_recolor(txt_efic, true); 							// Ativa recolorizar por comandos no texto
 800b838:	4631      	mov	r1, r6
 800b83a:	6828      	ldr	r0, [r5, #0]
 800b83c:	f00c f8fe 	bl	8017a3c <lv_label_set_recolor>
	lv_label_set_align(txt_efic, LV_ALIGN_IN_TOP_RIGHT); 			// Centraliza linhas alinhadas
 800b840:	6828      	ldr	r0, [r5, #0]
 800b842:	2103      	movs	r1, #3
 800b844:	f00b fd57 	bl	80172f6 <lv_label_set_align>
	lv_label_set_text(txt_efic, buffer);
 800b848:	4639      	mov	r1, r7
 800b84a:	6828      	ldr	r0, [r5, #0]
 800b84c:	f00c f860 	bl	8017910 <lv_label_set_text>
	lv_obj_set_width(txt_efic, 300); 								// Configuura o comprimento
 800b850:	6828      	ldr	r0, [r5, #0]
 800b852:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800b856:	f003 fcfd 	bl	800f254 <lv_obj_set_width>
	lv_obj_align(txt_efic, NULL, LV_ALIGN_IN_TOP_RIGHT, -70, 45); 	// Alinha ao centro
 800b85a:	232d      	movs	r3, #45	; 0x2d
 800b85c:	9300      	str	r3, [sp, #0]
 800b85e:	2203      	movs	r2, #3
 800b860:	f06f 0345 	mvn.w	r3, #69	; 0x45
 800b864:	2100      	movs	r1, #0
 800b866:	6828      	ldr	r0, [r5, #0]
 800b868:	f003 f90a 	bl	800ea80 <lv_obj_align>
}
 800b86c:	b003      	add	sp, #12
 800b86e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b870:	80000000 	.word	0x80000000
 800b874:	404e3789 	.word	0x404e3789
 800b878:	20004ce8 	.word	0x20004ce8
 800b87c:	20005600 	.word	0x20005600
 800b880:	0802b824 	.word	0x0802b824
 800b884:	2000563c 	.word	0x2000563c
 800b888:	2000c4a4 	.word	0x2000c4a4
 800b88c:	2000194c 	.word	0x2000194c
 800b890:	20005538 	.word	0x20005538

0800b894 <screen_reading_efic>:
	Tela_Reading_EFIC = lv_obj_create(NULL, NULL);
 800b894:	2100      	movs	r1, #0
{
 800b896:	b538      	push	{r3, r4, r5, lr}
	Tela_Reading_EFIC = lv_obj_create(NULL, NULL);
 800b898:	4608      	mov	r0, r1
 800b89a:	f003 fb13 	bl	800eec4 <lv_obj_create>
 800b89e:	4c14      	ldr	r4, [pc, #80]	; (800b8f0 <screen_reading_efic+0x5c>)
	img_fundo = lv_img_create(Tela_Reading_EFIC, NULL);
 800b8a0:	4d14      	ldr	r5, [pc, #80]	; (800b8f4 <screen_reading_efic+0x60>)
	Tela_Reading_EFIC = lv_obj_create(NULL, NULL);
 800b8a2:	6020      	str	r0, [r4, #0]
	img_fundo = lv_img_create(Tela_Reading_EFIC, NULL);
 800b8a4:	2100      	movs	r1, #0
 800b8a6:	f00b fa0f 	bl	8016cc8 <lv_img_create>
	lv_img_set_src(img_fundo, &tela_reading_efic);
 800b8aa:	4913      	ldr	r1, [pc, #76]	; (800b8f8 <screen_reading_efic+0x64>)
	img_fundo = lv_img_create(Tela_Reading_EFIC, NULL);
 800b8ac:	6028      	str	r0, [r5, #0]
	lv_img_set_src(img_fundo, &tela_reading_efic);
 800b8ae:	f00b f97b 	bl	8016ba8 <lv_img_set_src>
	lv_obj_set_protect(img_fundo, LV_PROTECT_POS);
 800b8b2:	2104      	movs	r1, #4
 800b8b4:	6828      	ldr	r0, [r5, #0]
 800b8b6:	f002 ff37 	bl	800e728 <lv_obj_set_protect>
	btn_next_efic();
 800b8ba:	f7ff fe6d 	bl	800b598 <btn_next_efic>
	btn_prev_efic();
 800b8be:	f7ff fe9f 	bl	800b600 <btn_prev_efic>
	create_vumeter_eficiencia();
 800b8c2:	f7ff fed1 	bl	800b668 <create_vumeter_eficiencia>
	print_eficiencia();
 800b8c6:	f7ff ff87 	bl	800b7d8 <print_eficiencia>
	update_vumeter_eficiencia();
 800b8ca:	f7ff ff49 	bl	800b760 <update_vumeter_eficiencia>
 800b8ce:	6820      	ldr	r0, [r4, #0]
 800b8d0:	f002 fce4 	bl	800e29c <lv_disp_load_scr>
    Task_Reading_EFIC = lv_task_create(update_screen_efic, 500, LV_TASK_PRIO_MID, NULL);
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	2203      	movs	r2, #3
 800b8d8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800b8dc:	4807      	ldr	r0, [pc, #28]	; (800b8fc <screen_reading_efic+0x68>)
 800b8de:	f008 ff99 	bl	8014814 <lv_task_create>
 800b8e2:	4b07      	ldr	r3, [pc, #28]	; (800b900 <screen_reading_efic+0x6c>)
 800b8e4:	6018      	str	r0, [r3, #0]
    TelaAtiva = TelaReading_Efic;
 800b8e6:	4b07      	ldr	r3, [pc, #28]	; (800b904 <screen_reading_efic+0x70>)
 800b8e8:	220d      	movs	r2, #13
 800b8ea:	601a      	str	r2, [r3, #0]
 800b8ec:	bd38      	pop	{r3, r4, r5, pc}
 800b8ee:	bf00      	nop
 800b8f0:	20005538 	.word	0x20005538
 800b8f4:	2000557c 	.word	0x2000557c
 800b8f8:	20001bc8 	.word	0x20001bc8
 800b8fc:	0800b799 	.word	0x0800b799
 800b900:	20005534 	.word	0x20005534
 800b904:	200033e4 	.word	0x200033e4

0800b908 <ButtonEventTelaReading_Efic>:

void ButtonEventTelaReading_Efic(uint8_t event, uint8_t tipo, uint8_t id)
{
	if(event == EVT_PBTN_INPUT) {
 800b908:	2810      	cmp	r0, #16
 800b90a:	d10e      	bne.n	800b92a <ButtonEventTelaReading_Efic+0x22>
		if(tipo == PBTN_SCLK) {	// Single Click
 800b90c:	2901      	cmp	r1, #1
 800b90e:	d10c      	bne.n	800b92a <ButtonEventTelaReading_Efic+0x22>
			switch(id) {
 800b910:	b112      	cbz	r2, 800b918 <ButtonEventTelaReading_Efic+0x10>
 800b912:	2a01      	cmp	r2, #1
 800b914:	d005      	beq.n	800b922 <ButtonEventTelaReading_Efic+0x1a>
 800b916:	4770      	bx	lr
				case KEY_DN:
					lv_event_send(imgbtn_prev, LV_EVENT_APPLY, NULL);
 800b918:	4b04      	ldr	r3, [pc, #16]	; (800b92c <ButtonEventTelaReading_Efic+0x24>)
 800b91a:	2111      	movs	r1, #17
					break;
				case KEY_UP:
					lv_event_send(imgbtn_next, LV_EVENT_APPLY, NULL);
 800b91c:	6818      	ldr	r0, [r3, #0]
 800b91e:	f002 bf57 	b.w	800e7d0 <lv_event_send>
 800b922:	2200      	movs	r2, #0
 800b924:	2111      	movs	r1, #17
 800b926:	4b02      	ldr	r3, [pc, #8]	; (800b930 <ButtonEventTelaReading_Efic+0x28>)
 800b928:	e7f8      	b.n	800b91c <ButtonEventTelaReading_Efic+0x14>
 800b92a:	4770      	bx	lr
 800b92c:	20005584 	.word	0x20005584
 800b930:	20005580 	.word	0x20005580

0800b934 <update_screen_status>:
	lv_obj_set_width(txt_version, 300); 								// Configuura o comprimento
	lv_obj_align(txt_version, NULL, LV_ALIGN_IN_TOP_RIGHT, -8, 110); 	// Alinha ao centro
}

static void update_screen_status(lv_task_t * param)
{
 800b934:	b508      	push	{r3, lr}
	// PLL LOCK
	if(pll_status)
 800b936:	4b1a      	ldr	r3, [pc, #104]	; (800b9a0 <update_screen_status+0x6c>)
 800b938:	781b      	ldrb	r3, [r3, #0]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d02d      	beq.n	800b99a <update_screen_status+0x66>
		sprintf(buffer, "OFF");
 800b93e:	4919      	ldr	r1, [pc, #100]	; (800b9a4 <update_screen_status+0x70>)
	else
		sprintf(buffer, "ON");
 800b940:	4819      	ldr	r0, [pc, #100]	; (800b9a8 <update_screen_status+0x74>)
 800b942:	f00e f90f 	bl	8019b64 <strcpy>

	lv_label_set_text(txt_pll, buffer);
 800b946:	4b19      	ldr	r3, [pc, #100]	; (800b9ac <update_screen_status+0x78>)
 800b948:	4917      	ldr	r1, [pc, #92]	; (800b9a8 <update_screen_status+0x74>)
 800b94a:	6818      	ldr	r0, [r3, #0]
 800b94c:	f00b ffe0 	bl	8017910 <lv_label_set_text>

	// Temperatura
	sprintf(buffer, "%0.1f°C", temperatura);
 800b950:	4b17      	ldr	r3, [pc, #92]	; (800b9b0 <update_screen_status+0x7c>)
 800b952:	6818      	ldr	r0, [r3, #0]
 800b954:	f7f4 fdf8 	bl	8000548 <__aeabi_f2d>
 800b958:	4602      	mov	r2, r0
 800b95a:	460b      	mov	r3, r1
 800b95c:	4812      	ldr	r0, [pc, #72]	; (800b9a8 <update_screen_status+0x74>)
 800b95e:	4915      	ldr	r1, [pc, #84]	; (800b9b4 <update_screen_status+0x80>)
 800b960:	f00e f8dc 	bl	8019b1c <sprintf>
	lv_label_set_text(txt_temp, buffer);
 800b964:	4b14      	ldr	r3, [pc, #80]	; (800b9b8 <update_screen_status+0x84>)
 800b966:	4910      	ldr	r1, [pc, #64]	; (800b9a8 <update_screen_status+0x74>)
 800b968:	6818      	ldr	r0, [r3, #0]
 800b96a:	f00b ffd1 	bl	8017910 <lv_label_set_text>

	// VSWR
	if((float)reflected >= MAX_RFL)
 800b96e:	4b13      	ldr	r3, [pc, #76]	; (800b9bc <update_screen_status+0x88>)
		sprintf(buffer, "Falha");
	else
		sprintf(buffer, "OK");
 800b970:	480d      	ldr	r0, [pc, #52]	; (800b9a8 <update_screen_status+0x74>)
	if((float)reflected >= MAX_RFL)
 800b972:	ed93 7a00 	vldr	s14, [r3]
 800b976:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800b97a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b97e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		sprintf(buffer, "Falha");
 800b982:	bfac      	ite	ge
 800b984:	490e      	ldrge	r1, [pc, #56]	; (800b9c0 <update_screen_status+0x8c>)
		sprintf(buffer, "OK");
 800b986:	490f      	ldrlt	r1, [pc, #60]	; (800b9c4 <update_screen_status+0x90>)
 800b988:	f00e f8ec 	bl	8019b64 <strcpy>

	lv_label_set_text(txt_vswr, buffer);
 800b98c:	4b0e      	ldr	r3, [pc, #56]	; (800b9c8 <update_screen_status+0x94>)
 800b98e:	4906      	ldr	r1, [pc, #24]	; (800b9a8 <update_screen_status+0x74>)
 800b990:	6818      	ldr	r0, [r3, #0]
}
 800b992:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lv_label_set_text(txt_vswr, buffer);
 800b996:	f00b bfbb 	b.w	8017910 <lv_label_set_text>
		sprintf(buffer, "ON");
 800b99a:	490c      	ldr	r1, [pc, #48]	; (800b9cc <update_screen_status+0x98>)
 800b99c:	e7d0      	b.n	800b940 <update_screen_status+0xc>
 800b99e:	bf00      	nop
 800b9a0:	2000000c 	.word	0x2000000c
 800b9a4:	0802b835 	.word	0x0802b835
 800b9a8:	20004ce8 	.word	0x20004ce8
 800b9ac:	2000568c 	.word	0x2000568c
 800b9b0:	20000014 	.word	0x20000014
 800b9b4:	0802b83c 	.word	0x0802b83c
 800b9b8:	20005690 	.word	0x20005690
 800b9bc:	20004ddc 	.word	0x20004ddc
 800b9c0:	0802b845 	.word	0x0802b845
 800b9c4:	0802b425 	.word	0x0802b425
 800b9c8:	20005694 	.word	0x20005694
 800b9cc:	0802b839 	.word	0x0802b839

0800b9d0 <btn_event_prev_status>:
	if(event == LV_EVENT_APPLY) {
 800b9d0:	2911      	cmp	r1, #17
{
 800b9d2:	b508      	push	{r3, lr}
	if(event == LV_EVENT_APPLY) {
 800b9d4:	d10b      	bne.n	800b9ee <btn_event_prev_status+0x1e>
		lv_task_del(Task_Status);
 800b9d6:	4b06      	ldr	r3, [pc, #24]	; (800b9f0 <btn_event_prev_status+0x20>)
 800b9d8:	6818      	ldr	r0, [r3, #0]
 800b9da:	f008 fe2b 	bl	8014634 <lv_task_del>
		lv_obj_del(Tela_Reading_STS);
 800b9de:	4b05      	ldr	r3, [pc, #20]	; (800b9f4 <btn_event_prev_status+0x24>)
 800b9e0:	6818      	ldr	r0, [r3, #0]
 800b9e2:	f003 fc60 	bl	800f2a6 <lv_obj_del>
}
 800b9e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_reading_efic();
 800b9ea:	f7ff bf53 	b.w	800b894 <screen_reading_efic>
 800b9ee:	bd08      	pop	{r3, pc}
 800b9f0:	20005640 	.word	0x20005640
 800b9f4:	20005644 	.word	0x20005644

0800b9f8 <btn_prev_status>:
{
 800b9f8:	b538      	push	{r3, r4, r5, lr}
	imgbtn2 = lv_imgbtn_create(Tela_Reading_STS, NULL);
 800b9fa:	4b15      	ldr	r3, [pc, #84]	; (800ba50 <btn_prev_status+0x58>)
	lv_imgbtn_set_src(imgbtn2, LV_BTN_STATE_REL, &Btn_prev);
 800b9fc:	4d15      	ldr	r5, [pc, #84]	; (800ba54 <btn_prev_status+0x5c>)
	imgbtn2 = lv_imgbtn_create(Tela_Reading_STS, NULL);
 800b9fe:	6818      	ldr	r0, [r3, #0]
 800ba00:	4c15      	ldr	r4, [pc, #84]	; (800ba58 <btn_prev_status+0x60>)
 800ba02:	2100      	movs	r1, #0
 800ba04:	f00b fa8a 	bl	8016f1c <lv_imgbtn_create>
	lv_imgbtn_set_src(imgbtn2, LV_BTN_STATE_REL, &Btn_prev);
 800ba08:	462a      	mov	r2, r5
 800ba0a:	2100      	movs	r1, #0
	imgbtn2 = lv_imgbtn_create(Tela_Reading_STS, NULL);
 800ba0c:	6020      	str	r0, [r4, #0]
	lv_imgbtn_set_src(imgbtn2, LV_BTN_STATE_REL, &Btn_prev);
 800ba0e:	f00b facd 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2, LV_BTN_STATE_TGL_REL, &Btn_prev);
 800ba12:	462a      	mov	r2, r5
 800ba14:	6820      	ldr	r0, [r4, #0]
 800ba16:	2102      	movs	r1, #2
 800ba18:	f00b fac8 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2, LV_BTN_STATE_TGL_PR, &Btn_prev);
 800ba1c:	462a      	mov	r2, r5
 800ba1e:	6820      	ldr	r0, [r4, #0]
 800ba20:	2103      	movs	r1, #3
 800ba22:	f00b fac3 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2, LV_BTN_STATE_PR, &Btn_prev);
 800ba26:	462a      	mov	r2, r5
 800ba28:	6820      	ldr	r0, [r4, #0]
 800ba2a:	2101      	movs	r1, #1
 800ba2c:	f00b fabe 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2, LV_BTN_STATE_INA, &Btn_prev);
 800ba30:	462a      	mov	r2, r5
 800ba32:	6820      	ldr	r0, [r4, #0]
 800ba34:	2104      	movs	r1, #4
 800ba36:	f00b fab9 	bl	8016fac <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn2, btn_event_prev_status);
 800ba3a:	6820      	ldr	r0, [r4, #0]
 800ba3c:	4907      	ldr	r1, [pc, #28]	; (800ba5c <btn_prev_status+0x64>)
 800ba3e:	f002 fe80 	bl	800e742 <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn2, 32, 18);
 800ba42:	6820      	ldr	r0, [r4, #0]
 800ba44:	2212      	movs	r2, #18
 800ba46:	2120      	movs	r1, #32
}
 800ba48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lv_obj_set_pos(imgbtn2, 32, 18);
 800ba4c:	f002 bfc3 	b.w	800e9d6 <lv_obj_set_pos>
 800ba50:	20005644 	.word	0x20005644
 800ba54:	20001b44 	.word	0x20001b44
 800ba58:	2000564c 	.word	0x2000564c
 800ba5c:	0800b9d1 	.word	0x0800b9d1

0800ba60 <print_reading_status>:
{
 800ba60:	b537      	push	{r0, r1, r2, r4, r5, lr}
	lv_style_copy(&style_txt1, &lv_style_plain);
 800ba62:	4c69      	ldr	r4, [pc, #420]	; (800bc08 <print_reading_status+0x1a8>)
 800ba64:	4969      	ldr	r1, [pc, #420]	; (800bc0c <print_reading_status+0x1ac>)
 800ba66:	4620      	mov	r0, r4
 800ba68:	f004 f908 	bl	800fc7c <lv_style_copy>
	style_txt1.text.font = &lv_font_eurostile_10;
 800ba6c:	4b68      	ldr	r3, [pc, #416]	; (800bc10 <print_reading_status+0x1b0>)
 800ba6e:	6263      	str	r3, [r4, #36]	; 0x24
	style_txt1.text.letter_space = 1;
 800ba70:	2301      	movs	r3, #1
 800ba72:	8523      	strh	r3, [r4, #40]	; 0x28
	style_txt1.text.line_space = 1;
 800ba74:	8563      	strh	r3, [r4, #42]	; 0x2a
	style_txt1.text.color = LV_COLOR_WHITE;
 800ba76:	4b67      	ldr	r3, [pc, #412]	; (800bc14 <print_reading_status+0x1b4>)
 800ba78:	881b      	ldrh	r3, [r3, #0]
 800ba7a:	8423      	strh	r3, [r4, #32]
	if(pll_status)
 800ba7c:	4b66      	ldr	r3, [pc, #408]	; (800bc18 <print_reading_status+0x1b8>)
 800ba7e:	781b      	ldrb	r3, [r3, #0]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	f000 80bf 	beq.w	800bc04 <print_reading_status+0x1a4>
		sprintf(buffer, "OFF");
 800ba86:	4965      	ldr	r1, [pc, #404]	; (800bc1c <print_reading_status+0x1bc>)
	txt_pll = lv_label_create(Tela_Reading_STS, NULL);
 800ba88:	4d65      	ldr	r5, [pc, #404]	; (800bc20 <print_reading_status+0x1c0>)
		sprintf(buffer, "ON");
 800ba8a:	4866      	ldr	r0, [pc, #408]	; (800bc24 <print_reading_status+0x1c4>)
	txt_pll = lv_label_create(Tela_Reading_STS, NULL);
 800ba8c:	4c66      	ldr	r4, [pc, #408]	; (800bc28 <print_reading_status+0x1c8>)
		sprintf(buffer, "ON");
 800ba8e:	f00e f869 	bl	8019b64 <strcpy>
	txt_pll = lv_label_create(Tela_Reading_STS, NULL);
 800ba92:	2100      	movs	r1, #0
 800ba94:	6828      	ldr	r0, [r5, #0]
 800ba96:	f00b ffe5 	bl	8017a64 <lv_label_create>
	lv_obj_set_style(txt_pll, &style_txt1); 						// Configura o estilo criado
 800ba9a:	495b      	ldr	r1, [pc, #364]	; (800bc08 <print_reading_status+0x1a8>)
	txt_pll = lv_label_create(Tela_Reading_STS, NULL);
 800ba9c:	6020      	str	r0, [r4, #0]
	lv_obj_set_style(txt_pll, &style_txt1); 						// Configura o estilo criado
 800ba9e:	f003 fc91 	bl	800f3c4 <lv_obj_set_style>
	lv_label_set_long_mode(txt_pll, LV_LABEL_LONG_EXPAND); 			// Quebra as linhas longas
 800baa2:	6820      	ldr	r0, [r4, #0]
 800baa4:	2100      	movs	r1, #0
 800baa6:	f00b ff87 	bl	80179b8 <lv_label_set_long_mode>
	lv_label_set_recolor(txt_pll, true); 							// Ativa recolorizar por comandos no texto
 800baaa:	6820      	ldr	r0, [r4, #0]
 800baac:	2101      	movs	r1, #1
 800baae:	f00b ffc5 	bl	8017a3c <lv_label_set_recolor>
	lv_label_set_align(txt_pll, LV_ALIGN_IN_TOP_RIGHT); 			// Centraliza linhas alinhadas
 800bab2:	6820      	ldr	r0, [r4, #0]
 800bab4:	2103      	movs	r1, #3
 800bab6:	f00b fc1e 	bl	80172f6 <lv_label_set_align>
	lv_label_set_text(txt_pll, buffer);
 800baba:	6820      	ldr	r0, [r4, #0]
 800babc:	4959      	ldr	r1, [pc, #356]	; (800bc24 <print_reading_status+0x1c4>)
 800babe:	f00b ff27 	bl	8017910 <lv_label_set_text>
	lv_obj_set_width(txt_pll, 300); 								// Configuura o comprimento
 800bac2:	6820      	ldr	r0, [r4, #0]
 800bac4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800bac8:	f003 fbc4 	bl	800f254 <lv_obj_set_width>
	lv_obj_align(txt_pll, NULL, LV_ALIGN_IN_TOP_RIGHT, -18, 40); 	// Alinha ao centro
 800bacc:	2328      	movs	r3, #40	; 0x28
 800bace:	9300      	str	r3, [sp, #0]
 800bad0:	2203      	movs	r2, #3
 800bad2:	6820      	ldr	r0, [r4, #0]
	txt_temp = lv_label_create(Tela_Reading_STS, NULL);
 800bad4:	4c55      	ldr	r4, [pc, #340]	; (800bc2c <print_reading_status+0x1cc>)
	lv_obj_align(txt_pll, NULL, LV_ALIGN_IN_TOP_RIGHT, -18, 40); 	// Alinha ao centro
 800bad6:	f06f 0311 	mvn.w	r3, #17
 800bada:	2100      	movs	r1, #0
 800badc:	f002 ffd0 	bl	800ea80 <lv_obj_align>
	sprintf(buffer, "%0.1f°C", temperatura);
 800bae0:	4b53      	ldr	r3, [pc, #332]	; (800bc30 <print_reading_status+0x1d0>)
 800bae2:	6818      	ldr	r0, [r3, #0]
 800bae4:	f7f4 fd30 	bl	8000548 <__aeabi_f2d>
 800bae8:	4602      	mov	r2, r0
 800baea:	460b      	mov	r3, r1
 800baec:	484d      	ldr	r0, [pc, #308]	; (800bc24 <print_reading_status+0x1c4>)
 800baee:	4951      	ldr	r1, [pc, #324]	; (800bc34 <print_reading_status+0x1d4>)
 800baf0:	f00e f814 	bl	8019b1c <sprintf>
	txt_temp = lv_label_create(Tela_Reading_STS, NULL);
 800baf4:	2100      	movs	r1, #0
 800baf6:	6828      	ldr	r0, [r5, #0]
 800baf8:	f00b ffb4 	bl	8017a64 <lv_label_create>
	lv_obj_set_style(txt_temp, &style_txt1); 						// Configura o estilo criado
 800bafc:	4942      	ldr	r1, [pc, #264]	; (800bc08 <print_reading_status+0x1a8>)
	txt_temp = lv_label_create(Tela_Reading_STS, NULL);
 800bafe:	6020      	str	r0, [r4, #0]
	lv_obj_set_style(txt_temp, &style_txt1); 						// Configura o estilo criado
 800bb00:	f003 fc60 	bl	800f3c4 <lv_obj_set_style>
	lv_label_set_long_mode(txt_temp, LV_LABEL_LONG_EXPAND); 		// Quebra as linhas longas
 800bb04:	6820      	ldr	r0, [r4, #0]
 800bb06:	2100      	movs	r1, #0
 800bb08:	f00b ff56 	bl	80179b8 <lv_label_set_long_mode>
	lv_label_set_recolor(txt_temp, true); 							// Ativa recolorizar por comandos no texto
 800bb0c:	6820      	ldr	r0, [r4, #0]
 800bb0e:	2101      	movs	r1, #1
 800bb10:	f00b ff94 	bl	8017a3c <lv_label_set_recolor>
	lv_label_set_align(txt_temp, LV_ALIGN_IN_TOP_RIGHT); 			// Centraliza linhas alinhadas
 800bb14:	6820      	ldr	r0, [r4, #0]
 800bb16:	2103      	movs	r1, #3
 800bb18:	f00b fbed 	bl	80172f6 <lv_label_set_align>
	lv_label_set_text(txt_temp, buffer);
 800bb1c:	6820      	ldr	r0, [r4, #0]
 800bb1e:	4941      	ldr	r1, [pc, #260]	; (800bc24 <print_reading_status+0x1c4>)
 800bb20:	f00b fef6 	bl	8017910 <lv_label_set_text>
	lv_obj_set_width(txt_temp, 300); 								// Configuura o comprimento
 800bb24:	6820      	ldr	r0, [r4, #0]
 800bb26:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800bb2a:	f003 fb93 	bl	800f254 <lv_obj_set_width>
	lv_obj_align(txt_temp, NULL, LV_ALIGN_IN_TOP_RIGHT, -18, 64); 	// Alinha ao centro
 800bb2e:	2340      	movs	r3, #64	; 0x40
 800bb30:	9300      	str	r3, [sp, #0]
 800bb32:	2203      	movs	r2, #3
 800bb34:	2100      	movs	r1, #0
 800bb36:	6820      	ldr	r0, [r4, #0]
	txt_vswr = lv_label_create(Tela_Reading_STS, NULL);
 800bb38:	4c3f      	ldr	r4, [pc, #252]	; (800bc38 <print_reading_status+0x1d8>)
	lv_obj_align(txt_temp, NULL, LV_ALIGN_IN_TOP_RIGHT, -18, 64); 	// Alinha ao centro
 800bb3a:	f06f 0311 	mvn.w	r3, #17
 800bb3e:	f002 ff9f 	bl	800ea80 <lv_obj_align>
	if((float)reflected >= MAX_RFL)
 800bb42:	4b3e      	ldr	r3, [pc, #248]	; (800bc3c <print_reading_status+0x1dc>)
		sprintf(buffer, "OK");
 800bb44:	4837      	ldr	r0, [pc, #220]	; (800bc24 <print_reading_status+0x1c4>)
	if((float)reflected >= MAX_RFL)
 800bb46:	ed93 7a00 	vldr	s14, [r3]
 800bb4a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800bb4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bb52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		sprintf(buffer, "Falha");
 800bb56:	bfac      	ite	ge
 800bb58:	4939      	ldrge	r1, [pc, #228]	; (800bc40 <print_reading_status+0x1e0>)
		sprintf(buffer, "OK");
 800bb5a:	493a      	ldrlt	r1, [pc, #232]	; (800bc44 <print_reading_status+0x1e4>)
 800bb5c:	f00e f802 	bl	8019b64 <strcpy>
	txt_vswr = lv_label_create(Tela_Reading_STS, NULL);
 800bb60:	2100      	movs	r1, #0
 800bb62:	6828      	ldr	r0, [r5, #0]
 800bb64:	f00b ff7e 	bl	8017a64 <lv_label_create>
	lv_obj_set_style(txt_vswr, &style_txt1); 						// Configura o estilo criado
 800bb68:	4927      	ldr	r1, [pc, #156]	; (800bc08 <print_reading_status+0x1a8>)
	txt_vswr = lv_label_create(Tela_Reading_STS, NULL);
 800bb6a:	6020      	str	r0, [r4, #0]
	lv_obj_set_style(txt_vswr, &style_txt1); 						// Configura o estilo criado
 800bb6c:	f003 fc2a 	bl	800f3c4 <lv_obj_set_style>
	lv_label_set_long_mode(txt_vswr, LV_LABEL_LONG_EXPAND); 		// Quebra as linhas longas
 800bb70:	6820      	ldr	r0, [r4, #0]
 800bb72:	2100      	movs	r1, #0
 800bb74:	f00b ff20 	bl	80179b8 <lv_label_set_long_mode>
	lv_label_set_recolor(txt_vswr, true); 							// Ativa recolorizar por comandos no texto
 800bb78:	6820      	ldr	r0, [r4, #0]
 800bb7a:	2101      	movs	r1, #1
 800bb7c:	f00b ff5e 	bl	8017a3c <lv_label_set_recolor>
	lv_label_set_align(txt_vswr, LV_ALIGN_IN_TOP_RIGHT); 			// Centraliza linhas alinhadas
 800bb80:	6820      	ldr	r0, [r4, #0]
 800bb82:	2103      	movs	r1, #3
 800bb84:	f00b fbb7 	bl	80172f6 <lv_label_set_align>
	lv_label_set_text(txt_vswr, buffer);
 800bb88:	6820      	ldr	r0, [r4, #0]
 800bb8a:	4926      	ldr	r1, [pc, #152]	; (800bc24 <print_reading_status+0x1c4>)
 800bb8c:	f00b fec0 	bl	8017910 <lv_label_set_text>
	lv_obj_set_width(txt_vswr, 300); 								// Configuura o comprimento
 800bb90:	6820      	ldr	r0, [r4, #0]
 800bb92:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800bb96:	f003 fb5d 	bl	800f254 <lv_obj_set_width>
	lv_obj_align(txt_vswr, NULL, LV_ALIGN_IN_TOP_RIGHT, -18, 87); 	// Alinha ao centro
 800bb9a:	2357      	movs	r3, #87	; 0x57
 800bb9c:	9300      	str	r3, [sp, #0]
 800bb9e:	2203      	movs	r2, #3
 800bba0:	f06f 0311 	mvn.w	r3, #17
 800bba4:	6820      	ldr	r0, [r4, #0]
 800bba6:	2100      	movs	r1, #0
 800bba8:	f002 ff6a 	bl	800ea80 <lv_obj_align>
	sprintf(buffer, "1.0.0/2019");
 800bbac:	4926      	ldr	r1, [pc, #152]	; (800bc48 <print_reading_status+0x1e8>)
 800bbae:	481d      	ldr	r0, [pc, #116]	; (800bc24 <print_reading_status+0x1c4>)
 800bbb0:	f00d ffd8 	bl	8019b64 <strcpy>
	lv_obj_t * txt_version = lv_label_create(Tela_Reading_STS, NULL);
 800bbb4:	2100      	movs	r1, #0
 800bbb6:	6828      	ldr	r0, [r5, #0]
 800bbb8:	f00b ff54 	bl	8017a64 <lv_label_create>
	lv_obj_set_style(txt_version, &style_txt1); 						// Configura o estilo criado
 800bbbc:	4912      	ldr	r1, [pc, #72]	; (800bc08 <print_reading_status+0x1a8>)
	lv_obj_t * txt_version = lv_label_create(Tela_Reading_STS, NULL);
 800bbbe:	4604      	mov	r4, r0
	lv_obj_set_style(txt_version, &style_txt1); 						// Configura o estilo criado
 800bbc0:	f003 fc00 	bl	800f3c4 <lv_obj_set_style>
	lv_label_set_long_mode(txt_version, LV_LABEL_LONG_EXPAND); 			// Quebra as linhas longas
 800bbc4:	4620      	mov	r0, r4
 800bbc6:	2100      	movs	r1, #0
 800bbc8:	f00b fef6 	bl	80179b8 <lv_label_set_long_mode>
	lv_label_set_recolor(txt_version, true); 							// Ativa recolorizar por comandos no texto
 800bbcc:	4620      	mov	r0, r4
 800bbce:	2101      	movs	r1, #1
 800bbd0:	f00b ff34 	bl	8017a3c <lv_label_set_recolor>
	lv_label_set_align(txt_version, LV_ALIGN_IN_TOP_RIGHT); 			// Centraliza linhas alinhadas
 800bbd4:	4620      	mov	r0, r4
 800bbd6:	2103      	movs	r1, #3
 800bbd8:	f00b fb8d 	bl	80172f6 <lv_label_set_align>
	lv_label_set_text(txt_version, buffer);
 800bbdc:	4620      	mov	r0, r4
 800bbde:	4911      	ldr	r1, [pc, #68]	; (800bc24 <print_reading_status+0x1c4>)
 800bbe0:	f00b fe96 	bl	8017910 <lv_label_set_text>
	lv_obj_set_width(txt_version, 300); 								// Configuura o comprimento
 800bbe4:	4620      	mov	r0, r4
 800bbe6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800bbea:	f003 fb33 	bl	800f254 <lv_obj_set_width>
	lv_obj_align(txt_version, NULL, LV_ALIGN_IN_TOP_RIGHT, -8, 110); 	// Alinha ao centro
 800bbee:	236e      	movs	r3, #110	; 0x6e
 800bbf0:	9300      	str	r3, [sp, #0]
 800bbf2:	2203      	movs	r2, #3
 800bbf4:	f06f 0307 	mvn.w	r3, #7
 800bbf8:	2100      	movs	r1, #0
 800bbfa:	4620      	mov	r0, r4
 800bbfc:	f002 ff40 	bl	800ea80 <lv_obj_align>
}
 800bc00:	b003      	add	sp, #12
 800bc02:	bd30      	pop	{r4, r5, pc}
		sprintf(buffer, "ON");
 800bc04:	4911      	ldr	r1, [pc, #68]	; (800bc4c <print_reading_status+0x1ec>)
 800bc06:	e73f      	b.n	800ba88 <print_reading_status+0x28>
 800bc08:	20005650 	.word	0x20005650
 800bc0c:	2000c4a4 	.word	0x2000c4a4
 800bc10:	200006ec 	.word	0x200006ec
 800bc14:	0801c5ce 	.word	0x0801c5ce
 800bc18:	2000000c 	.word	0x2000000c
 800bc1c:	0802b835 	.word	0x0802b835
 800bc20:	20005644 	.word	0x20005644
 800bc24:	20004ce8 	.word	0x20004ce8
 800bc28:	2000568c 	.word	0x2000568c
 800bc2c:	20005690 	.word	0x20005690
 800bc30:	20000014 	.word	0x20000014
 800bc34:	0802b83c 	.word	0x0802b83c
 800bc38:	20005694 	.word	0x20005694
 800bc3c:	20004ddc 	.word	0x20004ddc
 800bc40:	0802b845 	.word	0x0802b845
 800bc44:	0802b425 	.word	0x0802b425
 800bc48:	0802b82a 	.word	0x0802b82a
 800bc4c:	0802b839 	.word	0x0802b839

0800bc50 <screen_reading_status>:
	Tela_Reading_STS = lv_obj_create(NULL, NULL);
 800bc50:	2100      	movs	r1, #0
{
 800bc52:	b538      	push	{r3, r4, r5, lr}
	Tela_Reading_STS = lv_obj_create(NULL, NULL);
 800bc54:	4608      	mov	r0, r1
 800bc56:	f003 f935 	bl	800eec4 <lv_obj_create>
 800bc5a:	4c11      	ldr	r4, [pc, #68]	; (800bca0 <screen_reading_status+0x50>)
	img_fundo = lv_img_create(Tela_Reading_STS, NULL);
 800bc5c:	4d11      	ldr	r5, [pc, #68]	; (800bca4 <screen_reading_status+0x54>)
	Tela_Reading_STS = lv_obj_create(NULL, NULL);
 800bc5e:	6020      	str	r0, [r4, #0]
	img_fundo = lv_img_create(Tela_Reading_STS, NULL);
 800bc60:	2100      	movs	r1, #0
 800bc62:	f00b f831 	bl	8016cc8 <lv_img_create>
    lv_img_set_src(img_fundo, &tela_status);
 800bc66:	4910      	ldr	r1, [pc, #64]	; (800bca8 <screen_reading_status+0x58>)
	img_fundo = lv_img_create(Tela_Reading_STS, NULL);
 800bc68:	6028      	str	r0, [r5, #0]
    lv_img_set_src(img_fundo, &tela_status);
 800bc6a:	f00a ff9d 	bl	8016ba8 <lv_img_set_src>
    lv_obj_set_protect(img_fundo, LV_PROTECT_POS);
 800bc6e:	2104      	movs	r1, #4
 800bc70:	6828      	ldr	r0, [r5, #0]
 800bc72:	f002 fd59 	bl	800e728 <lv_obj_set_protect>
	btn_prev_status();
 800bc76:	f7ff febf 	bl	800b9f8 <btn_prev_status>
	print_reading_status();
 800bc7a:	f7ff fef1 	bl	800ba60 <print_reading_status>
 800bc7e:	6820      	ldr	r0, [r4, #0]
 800bc80:	f002 fb0c 	bl	800e29c <lv_disp_load_scr>
	Task_Status = lv_task_create(update_screen_status, 500, LV_TASK_PRIO_MID, NULL);
 800bc84:	2300      	movs	r3, #0
 800bc86:	2203      	movs	r2, #3
 800bc88:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800bc8c:	4807      	ldr	r0, [pc, #28]	; (800bcac <screen_reading_status+0x5c>)
 800bc8e:	f008 fdc1 	bl	8014814 <lv_task_create>
 800bc92:	4b07      	ldr	r3, [pc, #28]	; (800bcb0 <screen_reading_status+0x60>)
 800bc94:	6018      	str	r0, [r3, #0]
	TelaAtiva = TelaReading_Status;
 800bc96:	4b07      	ldr	r3, [pc, #28]	; (800bcb4 <screen_reading_status+0x64>)
 800bc98:	220e      	movs	r2, #14
 800bc9a:	601a      	str	r2, [r3, #0]
 800bc9c:	bd38      	pop	{r3, r4, r5, pc}
 800bc9e:	bf00      	nop
 800bca0:	20005644 	.word	0x20005644
 800bca4:	20005648 	.word	0x20005648
 800bca8:	20001c28 	.word	0x20001c28
 800bcac:	0800b935 	.word	0x0800b935
 800bcb0:	20005640 	.word	0x20005640
 800bcb4:	200033e4 	.word	0x200033e4

0800bcb8 <ButtonEventTelaReading_Status>:

void ButtonEventTelaReading_Status(uint8_t event, uint8_t tipo, uint8_t id)
{
	if(event == EVT_PBTN_INPUT) {
 800bcb8:	2810      	cmp	r0, #16
 800bcba:	d107      	bne.n	800bccc <ButtonEventTelaReading_Status+0x14>
		if(tipo == PBTN_SCLK) {	// Single Click
 800bcbc:	2901      	cmp	r1, #1
 800bcbe:	d105      	bne.n	800bccc <ButtonEventTelaReading_Status+0x14>
			switch(id) {
 800bcc0:	b922      	cbnz	r2, 800bccc <ButtonEventTelaReading_Status+0x14>
				case KEY_DN:
					lv_event_send(imgbtn2, LV_EVENT_APPLY, NULL);
 800bcc2:	4b03      	ldr	r3, [pc, #12]	; (800bcd0 <ButtonEventTelaReading_Status+0x18>)
 800bcc4:	2111      	movs	r1, #17
 800bcc6:	6818      	ldr	r0, [r3, #0]
 800bcc8:	f002 bd82 	b.w	800e7d0 <lv_event_send>
 800bccc:	4770      	bx	lr
 800bcce:	bf00      	nop
 800bcd0:	2000564c 	.word	0x2000564c

0800bcd4 <btn_event_next_temp>:
	lv_obj_set_pos(imgbtn_next, 112, 18);
}

static void btn_event_next_temp(lv_obj_t * btn, lv_event_t event)
{
	if(event == LV_EVENT_APPLY) {
 800bcd4:	2911      	cmp	r1, #17
{
 800bcd6:	b508      	push	{r3, lr}
	if(event == LV_EVENT_APPLY) {
 800bcd8:	d10b      	bne.n	800bcf2 <btn_event_next_temp+0x1e>
		//printf("Button Next Released SCREEN_READING_VPA\n");
		lv_task_del(Task_Reading_TEMP);
 800bcda:	4b06      	ldr	r3, [pc, #24]	; (800bcf4 <btn_event_next_temp+0x20>)
 800bcdc:	6818      	ldr	r0, [r3, #0]
 800bcde:	f008 fca9 	bl	8014634 <lv_task_del>
		lv_obj_del(Tela_Reading_TEMP);
 800bce2:	4b05      	ldr	r3, [pc, #20]	; (800bcf8 <btn_event_next_temp+0x24>)
 800bce4:	6818      	ldr	r0, [r3, #0]
 800bce6:	f003 fade 	bl	800f2a6 <lv_obj_del>
		screen_reading_vpa();
	}
}
 800bcea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_reading_vpa();
 800bcee:	f000 bc4d 	b.w	800c58c <screen_reading_vpa>
 800bcf2:	bd08      	pop	{r3, pc}
 800bcf4:	20005698 	.word	0x20005698
 800bcf8:	2000569c 	.word	0x2000569c

0800bcfc <btn_event_prev_temp>:
	lv_obj_set_pos(imgbtn_prev, 32, 18);
}

static void btn_event_prev_temp(lv_obj_t * btn, lv_event_t event)
{
	if(event == LV_EVENT_APPLY) {
 800bcfc:	2911      	cmp	r1, #17
{
 800bcfe:	b508      	push	{r3, lr}
	if(event == LV_EVENT_APPLY) {
 800bd00:	d10b      	bne.n	800bd1a <btn_event_prev_temp+0x1e>
		//printf("Button ESC Released\n");
        lv_task_del(Task_Reading_TEMP);
 800bd02:	4b06      	ldr	r3, [pc, #24]	; (800bd1c <btn_event_prev_temp+0x20>)
 800bd04:	6818      	ldr	r0, [r3, #0]
 800bd06:	f008 fc95 	bl	8014634 <lv_task_del>
		lv_obj_del(Tela_Reading_TEMP);
 800bd0a:	4b05      	ldr	r3, [pc, #20]	; (800bd20 <btn_event_prev_temp+0x24>)
 800bd0c:	6818      	ldr	r0, [r3, #0]
 800bd0e:	f003 faca 	bl	800f2a6 <lv_obj_del>
		screen_reading_mpx();
	}
}
 800bd12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_reading_mpx();
 800bd16:	f7ff bbcd 	b.w	800b4b4 <screen_reading_mpx>
 800bd1a:	bd08      	pop	{r3, pc}
 800bd1c:	20005698 	.word	0x20005698
 800bd20:	2000569c 	.word	0x2000569c

0800bd24 <btn_next_temp>:
{
 800bd24:	b538      	push	{r3, r4, r5, lr}
	imgbtn_next = lv_imgbtn_create(Tela_Reading_TEMP, NULL);
 800bd26:	4b15      	ldr	r3, [pc, #84]	; (800bd7c <btn_next_temp+0x58>)
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_REL, &Btn_next);
 800bd28:	4d15      	ldr	r5, [pc, #84]	; (800bd80 <btn_next_temp+0x5c>)
	imgbtn_next = lv_imgbtn_create(Tela_Reading_TEMP, NULL);
 800bd2a:	6818      	ldr	r0, [r3, #0]
 800bd2c:	4c15      	ldr	r4, [pc, #84]	; (800bd84 <btn_next_temp+0x60>)
 800bd2e:	2100      	movs	r1, #0
 800bd30:	f00b f8f4 	bl	8016f1c <lv_imgbtn_create>
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_REL, &Btn_next);
 800bd34:	462a      	mov	r2, r5
 800bd36:	2100      	movs	r1, #0
	imgbtn_next = lv_imgbtn_create(Tela_Reading_TEMP, NULL);
 800bd38:	6020      	str	r0, [r4, #0]
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_REL, &Btn_next);
 800bd3a:	f00b f937 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_TGL_REL, &Btn_next);
 800bd3e:	462a      	mov	r2, r5
 800bd40:	6820      	ldr	r0, [r4, #0]
 800bd42:	2102      	movs	r1, #2
 800bd44:	f00b f932 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_TGL_PR, &Btn_next);
 800bd48:	462a      	mov	r2, r5
 800bd4a:	6820      	ldr	r0, [r4, #0]
 800bd4c:	2103      	movs	r1, #3
 800bd4e:	f00b f92d 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_PR, &Btn_next);
 800bd52:	462a      	mov	r2, r5
 800bd54:	6820      	ldr	r0, [r4, #0]
 800bd56:	2101      	movs	r1, #1
 800bd58:	f00b f928 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_INA, &Btn_next);
 800bd5c:	462a      	mov	r2, r5
 800bd5e:	6820      	ldr	r0, [r4, #0]
 800bd60:	2104      	movs	r1, #4
 800bd62:	f00b f923 	bl	8016fac <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn_next, btn_event_next_temp);
 800bd66:	6820      	ldr	r0, [r4, #0]
 800bd68:	4907      	ldr	r1, [pc, #28]	; (800bd88 <btn_next_temp+0x64>)
 800bd6a:	f002 fcea 	bl	800e742 <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn_next, 112, 18);
 800bd6e:	6820      	ldr	r0, [r4, #0]
 800bd70:	2212      	movs	r2, #18
 800bd72:	2170      	movs	r1, #112	; 0x70
}
 800bd74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lv_obj_set_pos(imgbtn_next, 112, 18);
 800bd78:	f002 be2d 	b.w	800e9d6 <lv_obj_set_pos>
 800bd7c:	2000569c 	.word	0x2000569c
 800bd80:	20001ad8 	.word	0x20001ad8
 800bd84:	200056f4 	.word	0x200056f4
 800bd88:	0800bcd5 	.word	0x0800bcd5

0800bd8c <btn_prev_temp>:
{
 800bd8c:	b538      	push	{r3, r4, r5, lr}
	imgbtn_prev = lv_imgbtn_create(Tela_Reading_TEMP, NULL);
 800bd8e:	4b15      	ldr	r3, [pc, #84]	; (800bde4 <btn_prev_temp+0x58>)
	lv_imgbtn_set_src(imgbtn_prev, LV_BTN_STATE_REL, &Btn_prev);
 800bd90:	4d15      	ldr	r5, [pc, #84]	; (800bde8 <btn_prev_temp+0x5c>)
	imgbtn_prev = lv_imgbtn_create(Tela_Reading_TEMP, NULL);
 800bd92:	6818      	ldr	r0, [r3, #0]
 800bd94:	4c15      	ldr	r4, [pc, #84]	; (800bdec <btn_prev_temp+0x60>)
 800bd96:	2100      	movs	r1, #0
 800bd98:	f00b f8c0 	bl	8016f1c <lv_imgbtn_create>
	lv_imgbtn_set_src(imgbtn_prev, LV_BTN_STATE_REL, &Btn_prev);
 800bd9c:	462a      	mov	r2, r5
 800bd9e:	2100      	movs	r1, #0
	imgbtn_prev = lv_imgbtn_create(Tela_Reading_TEMP, NULL);
 800bda0:	6020      	str	r0, [r4, #0]
	lv_imgbtn_set_src(imgbtn_prev, LV_BTN_STATE_REL, &Btn_prev);
 800bda2:	f00b f903 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_prev, LV_BTN_STATE_TGL_REL, &Btn_prev);
 800bda6:	462a      	mov	r2, r5
 800bda8:	6820      	ldr	r0, [r4, #0]
 800bdaa:	2102      	movs	r1, #2
 800bdac:	f00b f8fe 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_prev, LV_BTN_STATE_TGL_PR, &Btn_prev);
 800bdb0:	462a      	mov	r2, r5
 800bdb2:	6820      	ldr	r0, [r4, #0]
 800bdb4:	2103      	movs	r1, #3
 800bdb6:	f00b f8f9 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_prev, LV_BTN_STATE_PR, &Btn_prev);
 800bdba:	462a      	mov	r2, r5
 800bdbc:	6820      	ldr	r0, [r4, #0]
 800bdbe:	2101      	movs	r1, #1
 800bdc0:	f00b f8f4 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_prev, LV_BTN_STATE_INA, &Btn_prev);
 800bdc4:	462a      	mov	r2, r5
 800bdc6:	6820      	ldr	r0, [r4, #0]
 800bdc8:	2104      	movs	r1, #4
 800bdca:	f00b f8ef 	bl	8016fac <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn_prev, btn_event_prev_temp);
 800bdce:	6820      	ldr	r0, [r4, #0]
 800bdd0:	4907      	ldr	r1, [pc, #28]	; (800bdf0 <btn_prev_temp+0x64>)
 800bdd2:	f002 fcb6 	bl	800e742 <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn_prev, 32, 18);
 800bdd6:	6820      	ldr	r0, [r4, #0]
 800bdd8:	2212      	movs	r2, #18
 800bdda:	2120      	movs	r1, #32
}
 800bddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lv_obj_set_pos(imgbtn_prev, 32, 18);
 800bde0:	f002 bdf9 	b.w	800e9d6 <lv_obj_set_pos>
 800bde4:	2000569c 	.word	0x2000569c
 800bde8:	20001b44 	.word	0x20001b44
 800bdec:	200056f8 	.word	0x200056f8
 800bdf0:	0800bcfd 	.word	0x0800bcfd
 800bdf4:	00000000 	.word	0x00000000

0800bdf8 <print_temp_1>:


void print_temp_1(float temp)
{
 800bdf8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	temp = 43.3f;

	// Area de Refletida
	static lv_style_t style_txt1;
	lv_style_copy(&style_txt1, &lv_style_plain);
 800bdfa:	4c27      	ldr	r4, [pc, #156]	; (800be98 <print_temp_1+0xa0>)
 800bdfc:	4927      	ldr	r1, [pc, #156]	; (800be9c <print_temp_1+0xa4>)
	style_txt1.text.letter_space = 1;
	style_txt1.text.line_space = 1;
	style_txt1.text.color = LV_COLOR_CYAN;

	// Cria um novo rotulo
	txt_temp = lv_label_create(Tela_Reading_TEMP, NULL);
 800bdfe:	4d28      	ldr	r5, [pc, #160]	; (800bea0 <print_temp_1+0xa8>)
	lv_style_copy(&style_txt1, &lv_style_plain);
 800be00:	4620      	mov	r0, r4
 800be02:	f003 ff3b 	bl	800fc7c <lv_style_copy>
	style_txt1.text.font = &lv_font_eurostile_28;
 800be06:	4b27      	ldr	r3, [pc, #156]	; (800bea4 <print_temp_1+0xac>)
 800be08:	6263      	str	r3, [r4, #36]	; 0x24
	style_txt1.text.color = LV_COLOR_CYAN;
 800be0a:	f894 3020 	ldrb.w	r3, [r4, #32]
 800be0e:	f043 031f 	orr.w	r3, r3, #31
 800be12:	f884 3020 	strb.w	r3, [r4, #32]
 800be16:	8c23      	ldrh	r3, [r4, #32]
 800be18:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800be1c:	8423      	strh	r3, [r4, #32]
 800be1e:	0a1b      	lsrs	r3, r3, #8
 800be20:	f36f 03c7 	bfc	r3, #3, #5
 800be24:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	txt_temp = lv_label_create(Tela_Reading_TEMP, NULL);
 800be28:	4b1f      	ldr	r3, [pc, #124]	; (800bea8 <print_temp_1+0xb0>)
	style_txt1.text.letter_space = 1;
 800be2a:	2601      	movs	r6, #1
	txt_temp = lv_label_create(Tela_Reading_TEMP, NULL);
 800be2c:	6818      	ldr	r0, [r3, #0]
	style_txt1.text.letter_space = 1;
 800be2e:	8526      	strh	r6, [r4, #40]	; 0x28
	txt_temp = lv_label_create(Tela_Reading_TEMP, NULL);
 800be30:	2100      	movs	r1, #0
	style_txt1.text.line_space = 1;
 800be32:	8566      	strh	r6, [r4, #42]	; 0x2a
	txt_temp = lv_label_create(Tela_Reading_TEMP, NULL);
 800be34:	f00b fe16 	bl	8017a64 <lv_label_create>
	lv_obj_set_style(txt_temp, &style_txt1); 						// Configura o estilo criado
 800be38:	4621      	mov	r1, r4
	txt_temp = lv_label_create(Tela_Reading_TEMP, NULL);
 800be3a:	6028      	str	r0, [r5, #0]
	lv_obj_set_style(txt_temp, &style_txt1); 						// Configura o estilo criado
 800be3c:	f003 fac2 	bl	800f3c4 <lv_obj_set_style>
	lv_label_set_long_mode(txt_temp, LV_LABEL_LONG_EXPAND); 			// Quebra as linhas longas
 800be40:	6828      	ldr	r0, [r5, #0]
	lv_label_set_recolor(txt_temp, true); 							// Ativa recolorizar por comandos no texto
	lv_label_set_align(txt_temp, LV_ALIGN_IN_TOP_RIGHT); 				// Centraliza linhas alinhadas
	sprintf(buffer, "%0.1f", temp);
 800be42:	4c1a      	ldr	r4, [pc, #104]	; (800beac <print_temp_1+0xb4>)
	lv_label_set_long_mode(txt_temp, LV_LABEL_LONG_EXPAND); 			// Quebra as linhas longas
 800be44:	2100      	movs	r1, #0
 800be46:	f00b fdb7 	bl	80179b8 <lv_label_set_long_mode>
	lv_label_set_recolor(txt_temp, true); 							// Ativa recolorizar por comandos no texto
 800be4a:	4631      	mov	r1, r6
 800be4c:	6828      	ldr	r0, [r5, #0]
 800be4e:	f00b fdf5 	bl	8017a3c <lv_label_set_recolor>
	lv_label_set_align(txt_temp, LV_ALIGN_IN_TOP_RIGHT); 				// Centraliza linhas alinhadas
 800be52:	6828      	ldr	r0, [r5, #0]
 800be54:	2103      	movs	r1, #3
 800be56:	f00b fa4e 	bl	80172f6 <lv_label_set_align>
	sprintf(buffer, "%0.1f", temp);
 800be5a:	a30d      	add	r3, pc, #52	; (adr r3, 800be90 <print_temp_1+0x98>)
 800be5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be60:	4913      	ldr	r1, [pc, #76]	; (800beb0 <print_temp_1+0xb8>)
 800be62:	4620      	mov	r0, r4
 800be64:	f00d fe5a 	bl	8019b1c <sprintf>
	lv_label_set_text(txt_temp, buffer);
 800be68:	4621      	mov	r1, r4
 800be6a:	6828      	ldr	r0, [r5, #0]
 800be6c:	f00b fd50 	bl	8017910 <lv_label_set_text>
	lv_obj_set_width(txt_temp, 300); 								// Configuura o comprimento
 800be70:	6828      	ldr	r0, [r5, #0]
 800be72:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800be76:	f003 f9ed 	bl	800f254 <lv_obj_set_width>
	lv_obj_align(txt_temp, NULL, LV_ALIGN_IN_TOP_RIGHT, -70, 45); 	// Alinha ao centro
 800be7a:	232d      	movs	r3, #45	; 0x2d
 800be7c:	9300      	str	r3, [sp, #0]
 800be7e:	2203      	movs	r2, #3
 800be80:	f06f 0345 	mvn.w	r3, #69	; 0x45
 800be84:	2100      	movs	r1, #0
 800be86:	6828      	ldr	r0, [r5, #0]
 800be88:	f002 fdfa 	bl	800ea80 <lv_obj_align>
}
 800be8c:	b002      	add	sp, #8
 800be8e:	bd70      	pop	{r4, r5, r6, pc}
 800be90:	60000000 	.word	0x60000000
 800be94:	4045a666 	.word	0x4045a666
 800be98:	20005774 	.word	0x20005774
 800be9c:	2000c4a4 	.word	0x2000c4a4
 800bea0:	200057b0 	.word	0x200057b0
 800bea4:	2000194c 	.word	0x2000194c
 800bea8:	2000569c 	.word	0x2000569c
 800beac:	20004ce8 	.word	0x20004ce8
 800beb0:	0802b824 	.word	0x0802b824

0800beb4 <create_vumeter_temperatura>:

void create_vumeter_temperatura(void)
{
 800beb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	// Area do Barguraph Frequency
	// Indicador OFF
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800beb6:	4e30      	ldr	r6, [pc, #192]	; (800bf78 <create_vumeter_temperatura+0xc4>)
 800beb8:	4930      	ldr	r1, [pc, #192]	; (800bf7c <create_vumeter_temperatura+0xc8>)
	style_indic_bar.body.radius = 0;
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
	style_indic_bar.body.main_color = LV_COLOR_MAKE(105, 105, 105);
	style_indic_bar.body.border.color = LV_COLOR_MAKE(105, 105, 105);

	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800beba:	4c31      	ldr	r4, [pc, #196]	; (800bf80 <create_vumeter_temperatura+0xcc>)
	style_indic_bar_vd.body.main_color = LV_COLOR_MAKE(0, 255, 0);
	style_indic_bar_vd.body.border.color = LV_COLOR_MAKE(0, 255, 0);

	// Create a default bar
	for(uint8_t x = 0; x < 20; x++) {
		bar_t[x] = lv_bar_create(Tela_Reading_TEMP, NULL);
 800bebc:	4f31      	ldr	r7, [pc, #196]	; (800bf84 <create_vumeter_temperatura+0xd0>)
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800bebe:	4630      	mov	r0, r6
 800bec0:	f003 fedc 	bl	800fc7c <lv_style_copy>
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800bec4:	4b30      	ldr	r3, [pc, #192]	; (800bf88 <create_vumeter_temperatura+0xd4>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800bec6:	492d      	ldr	r1, [pc, #180]	; (800bf7c <create_vumeter_temperatura+0xc8>)
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800bec8:	881b      	ldrh	r3, [r3, #0]
 800beca:	80b3      	strh	r3, [r6, #4]
	style_indic_bar.body.radius = 0;
 800becc:	2500      	movs	r5, #0
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800bece:	4620      	mov	r0, r4
	style_indic_bar.body.main_color = LV_COLOR_MAKE(105, 105, 105);
 800bed0:	8073      	strh	r3, [r6, #2]
	style_indic_bar.body.border.color = LV_COLOR_MAKE(105, 105, 105);
 800bed2:	8173      	strh	r3, [r6, #10]
	style_indic_bar.body.radius = 0;
 800bed4:	80f5      	strh	r5, [r6, #6]
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800bed6:	f003 fed1 	bl	800fc7c <lv_style_copy>
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800beda:	7923      	ldrb	r3, [r4, #4]
	style_indic_bar_vd.body.radius = 0;
 800bedc:	80e5      	strh	r5, [r4, #6]
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800bede:	f365 0304 	bfi	r3, r5, #0, #5
 800bee2:	7123      	strb	r3, [r4, #4]
 800bee4:	88a3      	ldrh	r3, [r4, #4]
 800bee6:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800beea:	80a3      	strh	r3, [r4, #4]
 800beec:	0a1b      	lsrs	r3, r3, #8
 800beee:	f365 03c7 	bfi	r3, r5, #3, #5
 800bef2:	7163      	strb	r3, [r4, #5]
	style_indic_bar_vd.body.main_color = LV_COLOR_MAKE(0, 255, 0);
 800bef4:	78a3      	ldrb	r3, [r4, #2]
 800bef6:	f365 0304 	bfi	r3, r5, #0, #5
 800befa:	70a3      	strb	r3, [r4, #2]
 800befc:	8863      	ldrh	r3, [r4, #2]
 800befe:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800bf02:	8063      	strh	r3, [r4, #2]
 800bf04:	0a1b      	lsrs	r3, r3, #8
 800bf06:	f365 03c7 	bfi	r3, r5, #3, #5
 800bf0a:	70e3      	strb	r3, [r4, #3]
	style_indic_bar_vd.body.border.color = LV_COLOR_MAKE(0, 255, 0);
 800bf0c:	7aa3      	ldrb	r3, [r4, #10]
 800bf0e:	f365 0304 	bfi	r3, r5, #0, #5
 800bf12:	72a3      	strb	r3, [r4, #10]
 800bf14:	8963      	ldrh	r3, [r4, #10]
 800bf16:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800bf1a:	8163      	strh	r3, [r4, #10]
 800bf1c:	0a1b      	lsrs	r3, r3, #8
 800bf1e:	f365 03c7 	bfi	r3, r5, #3, #5
 800bf22:	72e3      	strb	r3, [r4, #11]
 800bf24:	4c19      	ldr	r4, [pc, #100]	; (800bf8c <create_vumeter_temperatura+0xd8>)
		bar_t[x] = lv_bar_create(Tela_Reading_TEMP, NULL);
 800bf26:	6838      	ldr	r0, [r7, #0]
 800bf28:	2100      	movs	r1, #0
 800bf2a:	f008 ff89 	bl	8014e40 <lv_bar_create>
		lv_obj_set_size(bar_t[x], 4, 19);
 800bf2e:	2213      	movs	r2, #19
		bar_t[x] = lv_bar_create(Tela_Reading_TEMP, NULL);
 800bf30:	6060      	str	r0, [r4, #4]
		lv_obj_set_size(bar_t[x], 4, 19);
 800bf32:	2104      	movs	r1, #4
 800bf34:	f003 f944 	bl	800f1c0 <lv_obj_set_size>
		lv_bar_set_style(bar_t[x], LV_BAR_STYLE_BG, &style_indic_bar);
 800bf38:	6860      	ldr	r0, [r4, #4]
 800bf3a:	4632      	mov	r2, r6
 800bf3c:	2100      	movs	r1, #0
 800bf3e:	f008 ff69 	bl	8014e14 <lv_bar_set_style>
		lv_bar_set_style(bar_t[x], LV_BAR_STYLE_INDIC, &style_indic_bar);
 800bf42:	6860      	ldr	r0, [r4, #4]
 800bf44:	4632      	mov	r2, r6
 800bf46:	2101      	movs	r1, #1
 800bf48:	f008 ff64 	bl	8014e14 <lv_bar_set_style>
		lv_obj_align(bar_t[x], NULL, LV_ALIGN_IN_TOP_LEFT, t_pos_x[x], 76);
 800bf4c:	224c      	movs	r2, #76	; 0x4c
 800bf4e:	4b10      	ldr	r3, [pc, #64]	; (800bf90 <create_vumeter_temperatura+0xdc>)
 800bf50:	9200      	str	r2, [sp, #0]
 800bf52:	f933 3025 	ldrsh.w	r3, [r3, r5, lsl #2]
 800bf56:	6860      	ldr	r0, [r4, #4]
 800bf58:	2201      	movs	r2, #1
 800bf5a:	2100      	movs	r1, #0
 800bf5c:	f002 fd90 	bl	800ea80 <lv_obj_align>
 800bf60:	3501      	adds	r5, #1
		lv_bar_set_value(bar_t[x], 100, 0);
 800bf62:	2200      	movs	r2, #0
 800bf64:	2164      	movs	r1, #100	; 0x64
 800bf66:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800bf6a:	f008 fef7 	bl	8014d5c <lv_bar_set_value>
	for(uint8_t x = 0; x < 20; x++) {
 800bf6e:	2d14      	cmp	r5, #20
 800bf70:	d1d9      	bne.n	800bf26 <create_vumeter_temperatura+0x72>
	}
}
 800bf72:	b003      	add	sp, #12
 800bf74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf76:	bf00      	nop
 800bf78:	200056fc 	.word	0x200056fc
 800bf7c:	2000c3b4 	.word	0x2000c3b4
 800bf80:	20005738 	.word	0x20005738
 800bf84:	2000569c 	.word	0x2000569c
 800bf88:	0801c5d0 	.word	0x0801c5d0
 800bf8c:	2000569c 	.word	0x2000569c
 800bf90:	0802b84c 	.word	0x0802b84c

0800bf94 <update_vumeter_temperatura>:

void update_vumeter_temperatura(float temp)
{
 800bf94:	b570      	push	{r4, r5, r6, lr}
	temp = 43.3f;
	uint32_t x;
	uint32_t resul = (uint32_t)( ((temp - 10.0) / 2.50));

	for(x = 0; x <= resul; x++) {
		lv_bar_set_style(bar_t[x], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800bf96:	4d09      	ldr	r5, [pc, #36]	; (800bfbc <update_vumeter_temperatura+0x28>)
 800bf98:	4e09      	ldr	r6, [pc, #36]	; (800bfc0 <update_vumeter_temperatura+0x2c>)
	for(x = 0; x <= resul; x++) {
 800bf9a:	2400      	movs	r4, #0
		lv_bar_set_style(bar_t[x], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800bf9c:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800bfa0:	4632      	mov	r2, r6
 800bfa2:	2100      	movs	r1, #0
 800bfa4:	f008 ff36 	bl	8014e14 <lv_bar_set_style>
		lv_bar_set_style(bar_t[x], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
 800bfa8:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800bfac:	4632      	mov	r2, r6
 800bfae:	2101      	movs	r1, #1
	for(x = 0; x <= resul; x++) {
 800bfb0:	3401      	adds	r4, #1
		lv_bar_set_style(bar_t[x], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
 800bfb2:	f008 ff2f 	bl	8014e14 <lv_bar_set_style>
	for(x = 0; x <= resul; x++) {
 800bfb6:	2c0e      	cmp	r4, #14
 800bfb8:	d1f0      	bne.n	800bf9c <update_vumeter_temperatura+0x8>
	}
}
 800bfba:	bd70      	pop	{r4, r5, r6, pc}
 800bfbc:	200056a0 	.word	0x200056a0
 800bfc0:	20005738 	.word	0x20005738

0800bfc4 <screen_reading_temp>:
{
 800bfc4:	b538      	push	{r3, r4, r5, lr}
	Tela_Reading_TEMP = lv_obj_create(NULL, NULL);
 800bfc6:	2100      	movs	r1, #0
{
 800bfc8:	ed2d 8b02 	vpush	{d8}
    temperatura = temp;
 800bfcc:	4b1a      	ldr	r3, [pc, #104]	; (800c038 <screen_reading_temp+0x74>)
 800bfce:	ed9f 8a1b 	vldr	s16, [pc, #108]	; 800c03c <screen_reading_temp+0x78>
	Tela_Reading_TEMP = lv_obj_create(NULL, NULL);
 800bfd2:	4c1b      	ldr	r4, [pc, #108]	; (800c040 <screen_reading_temp+0x7c>)
    temperatura = temp;
 800bfd4:	ed83 8a00 	vstr	s16, [r3]
	Tela_Reading_TEMP = lv_obj_create(NULL, NULL);
 800bfd8:	4608      	mov	r0, r1
 800bfda:	f002 ff73 	bl	800eec4 <lv_obj_create>
	img_fundo = lv_img_create(Tela_Reading_TEMP, NULL);
 800bfde:	2100      	movs	r1, #0
	Tela_Reading_TEMP = lv_obj_create(NULL, NULL);
 800bfe0:	6020      	str	r0, [r4, #0]
	img_fundo = lv_img_create(Tela_Reading_TEMP, NULL);
 800bfe2:	f00a fe71 	bl	8016cc8 <lv_img_create>
 800bfe6:	4d17      	ldr	r5, [pc, #92]	; (800c044 <screen_reading_temp+0x80>)
    lv_img_set_src(img_fundo, &tela_reading_temp);
 800bfe8:	4917      	ldr	r1, [pc, #92]	; (800c048 <screen_reading_temp+0x84>)
	img_fundo = lv_img_create(Tela_Reading_TEMP, NULL);
 800bfea:	6028      	str	r0, [r5, #0]
    lv_img_set_src(img_fundo, &tela_reading_temp);
 800bfec:	f00a fddc 	bl	8016ba8 <lv_img_set_src>
    lv_obj_set_protect(img_fundo, LV_PROTECT_POS);
 800bff0:	2104      	movs	r1, #4
 800bff2:	6828      	ldr	r0, [r5, #0]
 800bff4:	f002 fb98 	bl	800e728 <lv_obj_set_protect>
	btn_next_temp();
 800bff8:	f7ff fe94 	bl	800bd24 <btn_next_temp>
	btn_prev_temp();
 800bffc:	f7ff fec6 	bl	800bd8c <btn_prev_temp>
	print_temp_1(temp);
 800c000:	eeb0 0a48 	vmov.f32	s0, s16
 800c004:	f7ff fef8 	bl	800bdf8 <print_temp_1>
	create_vumeter_temperatura();
 800c008:	f7ff ff54 	bl	800beb4 <create_vumeter_temperatura>
	update_vumeter_temperatura(temp);
 800c00c:	eeb0 0a48 	vmov.f32	s0, s16
 800c010:	f7ff ffc0 	bl	800bf94 <update_vumeter_temperatura>
 800c014:	6820      	ldr	r0, [r4, #0]
 800c016:	f002 f941 	bl	800e29c <lv_disp_load_scr>
	Task_Reading_TEMP = lv_task_create(update_reading_temp, 500, LV_TASK_PRIO_MID, NULL);
 800c01a:	2300      	movs	r3, #0
 800c01c:	2203      	movs	r2, #3
 800c01e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800c022:	480a      	ldr	r0, [pc, #40]	; (800c04c <screen_reading_temp+0x88>)
 800c024:	f008 fbf6 	bl	8014814 <lv_task_create>
}
 800c028:	ecbd 8b02 	vpop	{d8}
	Task_Reading_TEMP = lv_task_create(update_reading_temp, 500, LV_TASK_PRIO_MID, NULL);
 800c02c:	4b08      	ldr	r3, [pc, #32]	; (800c050 <screen_reading_temp+0x8c>)
 800c02e:	6018      	str	r0, [r3, #0]
	TelaAtiva = TelaReading_Temp;
 800c030:	4b08      	ldr	r3, [pc, #32]	; (800c054 <screen_reading_temp+0x90>)
 800c032:	220b      	movs	r2, #11
 800c034:	601a      	str	r2, [r3, #0]
}
 800c036:	bd38      	pop	{r3, r4, r5, pc}
 800c038:	20000014 	.word	0x20000014
 800c03c:	422d3333 	.word	0x422d3333
 800c040:	2000569c 	.word	0x2000569c
 800c044:	200056f0 	.word	0x200056f0
 800c048:	20001be0 	.word	0x20001be0
 800c04c:	0800c059 	.word	0x0800c059
 800c050:	20005698 	.word	0x20005698
 800c054:	200033e4 	.word	0x200033e4

0800c058 <update_reading_temp>:

static void update_reading_temp(lv_task_t * param)
{
 800c058:	b538      	push	{r3, r4, r5, lr}
	sprintf(buffer, "%0.1f", temperatura);
 800c05a:	4c0b      	ldr	r4, [pc, #44]	; (800c088 <update_reading_temp+0x30>)
 800c05c:	4d0b      	ldr	r5, [pc, #44]	; (800c08c <update_reading_temp+0x34>)
 800c05e:	6820      	ldr	r0, [r4, #0]
 800c060:	f7f4 fa72 	bl	8000548 <__aeabi_f2d>
 800c064:	4602      	mov	r2, r0
 800c066:	460b      	mov	r3, r1
 800c068:	4628      	mov	r0, r5
 800c06a:	4909      	ldr	r1, [pc, #36]	; (800c090 <update_reading_temp+0x38>)
 800c06c:	f00d fd56 	bl	8019b1c <sprintf>
	lv_label_set_text(txt_temp, buffer);
 800c070:	4b08      	ldr	r3, [pc, #32]	; (800c094 <update_reading_temp+0x3c>)
 800c072:	4629      	mov	r1, r5
 800c074:	6818      	ldr	r0, [r3, #0]
 800c076:	f00b fc4b 	bl	8017910 <lv_label_set_text>
	update_vumeter_temperatura(temperatura);
 800c07a:	ed94 0a00 	vldr	s0, [r4]
}
 800c07e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	update_vumeter_temperatura(temperatura);
 800c082:	f7ff bf87 	b.w	800bf94 <update_vumeter_temperatura>
 800c086:	bf00      	nop
 800c088:	20000014 	.word	0x20000014
 800c08c:	20004ce8 	.word	0x20004ce8
 800c090:	0802b824 	.word	0x0802b824
 800c094:	200057b0 	.word	0x200057b0

0800c098 <ButtonEventTelaReading_Temp>:

void ButtonEventTelaReading_Temp(uint8_t event, uint8_t tipo, uint8_t id)
{
	if(event == EVT_PBTN_INPUT) {
 800c098:	2810      	cmp	r0, #16
 800c09a:	d10e      	bne.n	800c0ba <ButtonEventTelaReading_Temp+0x22>
		if(tipo == PBTN_SCLK) {	// Single Click
 800c09c:	2901      	cmp	r1, #1
 800c09e:	d10c      	bne.n	800c0ba <ButtonEventTelaReading_Temp+0x22>
			switch(id) {
 800c0a0:	b112      	cbz	r2, 800c0a8 <ButtonEventTelaReading_Temp+0x10>
 800c0a2:	2a01      	cmp	r2, #1
 800c0a4:	d005      	beq.n	800c0b2 <ButtonEventTelaReading_Temp+0x1a>
 800c0a6:	4770      	bx	lr
				case KEY_DN:
					lv_event_send(imgbtn_prev, LV_EVENT_APPLY, NULL);
 800c0a8:	4b04      	ldr	r3, [pc, #16]	; (800c0bc <ButtonEventTelaReading_Temp+0x24>)
 800c0aa:	2111      	movs	r1, #17
					break;
				case KEY_UP:
					lv_event_send(imgbtn_next, LV_EVENT_APPLY, NULL);
 800c0ac:	6818      	ldr	r0, [r3, #0]
 800c0ae:	f002 bb8f 	b.w	800e7d0 <lv_event_send>
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	2111      	movs	r1, #17
 800c0b6:	4b02      	ldr	r3, [pc, #8]	; (800c0c0 <ButtonEventTelaReading_Temp+0x28>)
 800c0b8:	e7f8      	b.n	800c0ac <ButtonEventTelaReading_Temp+0x14>
 800c0ba:	4770      	bx	lr
 800c0bc:	200056f8 	.word	0x200056f8
 800c0c0:	200056f4 	.word	0x200056f4

0800c0c4 <btn_event_next_vpa>:
	lv_obj_set_pos(imgbtn_next, 112, 18);
}

static void btn_event_next_vpa(lv_obj_t * btn, lv_event_t event)
{
	if(event == LV_EVENT_APPLY) {
 800c0c4:	2911      	cmp	r1, #17
{
 800c0c6:	b508      	push	{r3, lr}
	if(event == LV_EVENT_APPLY) {
 800c0c8:	d10b      	bne.n	800c0e2 <btn_event_next_vpa+0x1e>
		//printf("Button Next Released SCREEN_READING_VPA\n");
		lv_task_del(Task_Reading_VPA);
 800c0ca:	4b06      	ldr	r3, [pc, #24]	; (800c0e4 <btn_event_next_vpa+0x20>)
 800c0cc:	6818      	ldr	r0, [r3, #0]
 800c0ce:	f008 fab1 	bl	8014634 <lv_task_del>
		lv_obj_del(Tela_Reading_VPA);
 800c0d2:	4b05      	ldr	r3, [pc, #20]	; (800c0e8 <btn_event_next_vpa+0x24>)
 800c0d4:	6818      	ldr	r0, [r3, #0]
 800c0d6:	f003 f8e6 	bl	800f2a6 <lv_obj_del>
		screen_reading_efic();
	}
}
 800c0da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_reading_efic();
 800c0de:	f7ff bbd9 	b.w	800b894 <screen_reading_efic>
 800c0e2:	bd08      	pop	{r3, pc}
 800c0e4:	200057b4 	.word	0x200057b4
 800c0e8:	200057b8 	.word	0x200057b8

0800c0ec <btn_event_prev_vpa>:
	lv_obj_set_pos(imgbtn_prev, 32, 18);
}

static void btn_event_prev_vpa(lv_obj_t * btn, lv_event_t event)
{
	if(event == LV_EVENT_APPLY) {
 800c0ec:	2911      	cmp	r1, #17
{
 800c0ee:	b508      	push	{r3, lr}
	if(event == LV_EVENT_APPLY) {
 800c0f0:	d10b      	bne.n	800c10a <btn_event_prev_vpa+0x1e>
		//printf("Button ESC Released\n");
		lv_task_del(Task_Reading_VPA);
 800c0f2:	4b06      	ldr	r3, [pc, #24]	; (800c10c <btn_event_prev_vpa+0x20>)
 800c0f4:	6818      	ldr	r0, [r3, #0]
 800c0f6:	f008 fa9d 	bl	8014634 <lv_task_del>
		lv_obj_del(Tela_Reading_VPA);
 800c0fa:	4b05      	ldr	r3, [pc, #20]	; (800c110 <btn_event_prev_vpa+0x24>)
 800c0fc:	6818      	ldr	r0, [r3, #0]
 800c0fe:	f003 f8d2 	bl	800f2a6 <lv_obj_del>
		screen_reading_temp();
	}
}
 800c102:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_reading_temp();
 800c106:	f7ff bf5d 	b.w	800bfc4 <screen_reading_temp>
 800c10a:	bd08      	pop	{r3, pc}
 800c10c:	200057b4 	.word	0x200057b4
 800c110:	200057b8 	.word	0x200057b8

0800c114 <btn_next_vpa>:
{
 800c114:	b538      	push	{r3, r4, r5, lr}
	imgbtn_next = lv_imgbtn_create(Tela_Reading_VPA, NULL);
 800c116:	4b15      	ldr	r3, [pc, #84]	; (800c16c <btn_next_vpa+0x58>)
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_REL, &Btn_next);
 800c118:	4d15      	ldr	r5, [pc, #84]	; (800c170 <btn_next_vpa+0x5c>)
	imgbtn_next = lv_imgbtn_create(Tela_Reading_VPA, NULL);
 800c11a:	6818      	ldr	r0, [r3, #0]
 800c11c:	4c15      	ldr	r4, [pc, #84]	; (800c174 <btn_next_vpa+0x60>)
 800c11e:	2100      	movs	r1, #0
 800c120:	f00a fefc 	bl	8016f1c <lv_imgbtn_create>
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_REL, &Btn_next);
 800c124:	462a      	mov	r2, r5
 800c126:	2100      	movs	r1, #0
	imgbtn_next = lv_imgbtn_create(Tela_Reading_VPA, NULL);
 800c128:	6020      	str	r0, [r4, #0]
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_REL, &Btn_next);
 800c12a:	f00a ff3f 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_TGL_REL, &Btn_next);
 800c12e:	462a      	mov	r2, r5
 800c130:	6820      	ldr	r0, [r4, #0]
 800c132:	2102      	movs	r1, #2
 800c134:	f00a ff3a 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_TGL_PR, &Btn_next);
 800c138:	462a      	mov	r2, r5
 800c13a:	6820      	ldr	r0, [r4, #0]
 800c13c:	2103      	movs	r1, #3
 800c13e:	f00a ff35 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_PR, &Btn_next);
 800c142:	462a      	mov	r2, r5
 800c144:	6820      	ldr	r0, [r4, #0]
 800c146:	2101      	movs	r1, #1
 800c148:	f00a ff30 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_INA, &Btn_next);
 800c14c:	462a      	mov	r2, r5
 800c14e:	6820      	ldr	r0, [r4, #0]
 800c150:	2104      	movs	r1, #4
 800c152:	f00a ff2b 	bl	8016fac <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn_next, btn_event_next_vpa);
 800c156:	6820      	ldr	r0, [r4, #0]
 800c158:	4907      	ldr	r1, [pc, #28]	; (800c178 <btn_next_vpa+0x64>)
 800c15a:	f002 faf2 	bl	800e742 <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn_next, 112, 18);
 800c15e:	6820      	ldr	r0, [r4, #0]
 800c160:	2212      	movs	r2, #18
 800c162:	2170      	movs	r1, #112	; 0x70
}
 800c164:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lv_obj_set_pos(imgbtn_next, 112, 18);
 800c168:	f002 bc35 	b.w	800e9d6 <lv_obj_set_pos>
 800c16c:	200057b8 	.word	0x200057b8
 800c170:	20001ad8 	.word	0x20001ad8
 800c174:	20005868 	.word	0x20005868
 800c178:	0800c0c5 	.word	0x0800c0c5

0800c17c <btn_prev_vpa>:
{
 800c17c:	b538      	push	{r3, r4, r5, lr}
	imgbtn_prev = lv_imgbtn_create(Tela_Reading_VPA, NULL);
 800c17e:	4b15      	ldr	r3, [pc, #84]	; (800c1d4 <btn_prev_vpa+0x58>)
	lv_imgbtn_set_src(imgbtn_prev, LV_BTN_STATE_REL, &Btn_prev);
 800c180:	4d15      	ldr	r5, [pc, #84]	; (800c1d8 <btn_prev_vpa+0x5c>)
	imgbtn_prev = lv_imgbtn_create(Tela_Reading_VPA, NULL);
 800c182:	6818      	ldr	r0, [r3, #0]
 800c184:	4c15      	ldr	r4, [pc, #84]	; (800c1dc <btn_prev_vpa+0x60>)
 800c186:	2100      	movs	r1, #0
 800c188:	f00a fec8 	bl	8016f1c <lv_imgbtn_create>
	lv_imgbtn_set_src(imgbtn_prev, LV_BTN_STATE_REL, &Btn_prev);
 800c18c:	462a      	mov	r2, r5
 800c18e:	2100      	movs	r1, #0
	imgbtn_prev = lv_imgbtn_create(Tela_Reading_VPA, NULL);
 800c190:	6020      	str	r0, [r4, #0]
	lv_imgbtn_set_src(imgbtn_prev, LV_BTN_STATE_REL, &Btn_prev);
 800c192:	f00a ff0b 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_prev, LV_BTN_STATE_TGL_REL, &Btn_prev);
 800c196:	462a      	mov	r2, r5
 800c198:	6820      	ldr	r0, [r4, #0]
 800c19a:	2102      	movs	r1, #2
 800c19c:	f00a ff06 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_prev, LV_BTN_STATE_TGL_PR, &Btn_prev);
 800c1a0:	462a      	mov	r2, r5
 800c1a2:	6820      	ldr	r0, [r4, #0]
 800c1a4:	2103      	movs	r1, #3
 800c1a6:	f00a ff01 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_prev, LV_BTN_STATE_PR, &Btn_prev);
 800c1aa:	462a      	mov	r2, r5
 800c1ac:	6820      	ldr	r0, [r4, #0]
 800c1ae:	2101      	movs	r1, #1
 800c1b0:	f00a fefc 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_prev, LV_BTN_STATE_INA, &Btn_prev);
 800c1b4:	462a      	mov	r2, r5
 800c1b6:	6820      	ldr	r0, [r4, #0]
 800c1b8:	2104      	movs	r1, #4
 800c1ba:	f00a fef7 	bl	8016fac <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn_prev, btn_event_prev_vpa);
 800c1be:	6820      	ldr	r0, [r4, #0]
 800c1c0:	4907      	ldr	r1, [pc, #28]	; (800c1e0 <btn_prev_vpa+0x64>)
 800c1c2:	f002 fabe 	bl	800e742 <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn_prev, 32, 18);
 800c1c6:	6820      	ldr	r0, [r4, #0]
 800c1c8:	2212      	movs	r2, #18
 800c1ca:	2120      	movs	r1, #32
}
 800c1cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lv_obj_set_pos(imgbtn_prev, 32, 18);
 800c1d0:	f002 bc01 	b.w	800e9d6 <lv_obj_set_pos>
 800c1d4:	200057b8 	.word	0x200057b8
 800c1d8:	20001b44 	.word	0x20001b44
 800c1dc:	2000586c 	.word	0x2000586c
 800c1e0:	0800c0ed 	.word	0x0800c0ed
 800c1e4:	00000000 	.word	0x00000000

0800c1e8 <print_vpa_1>:

void print_vpa_1(uint32_t vpa)
{
 800c1e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	vpa = 3900;
	float resul = (float) ( vpa * (3.30 / 4095.0)) * 5;
	sprintf(buffer, "%0.1f", resul);
 800c1ea:	4f27      	ldr	r7, [pc, #156]	; (800c288 <print_vpa_1+0xa0>)

	// Area de VPA
	static lv_style_t style_txt1;
	lv_style_copy(&style_txt1, &lv_style_plain);
 800c1ec:	4c27      	ldr	r4, [pc, #156]	; (800c28c <print_vpa_1+0xa4>)
	sprintf(buffer, "%0.1f", resul);
 800c1ee:	4928      	ldr	r1, [pc, #160]	; (800c290 <print_vpa_1+0xa8>)
	style_txt1.text.letter_space = 1;
	style_txt1.text.line_space = 1;
	style_txt1.text.color = LV_COLOR_CYAN;

	// Cria um novo rotulo
	txt_vpa = lv_label_create(Tela_Reading_VPA, NULL);
 800c1f0:	4d28      	ldr	r5, [pc, #160]	; (800c294 <print_vpa_1+0xac>)
	sprintf(buffer, "%0.1f", resul);
 800c1f2:	a323      	add	r3, pc, #140	; (adr r3, 800c280 <print_vpa_1+0x98>)
 800c1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1f8:	4638      	mov	r0, r7
 800c1fa:	f00d fc8f 	bl	8019b1c <sprintf>
	lv_style_copy(&style_txt1, &lv_style_plain);
 800c1fe:	4620      	mov	r0, r4
 800c200:	4925      	ldr	r1, [pc, #148]	; (800c298 <print_vpa_1+0xb0>)
 800c202:	f003 fd3b 	bl	800fc7c <lv_style_copy>
	style_txt1.text.font = &lv_font_eurostile_24;
 800c206:	4b25      	ldr	r3, [pc, #148]	; (800c29c <print_vpa_1+0xb4>)
 800c208:	6263      	str	r3, [r4, #36]	; 0x24
	style_txt1.text.color = LV_COLOR_CYAN;
 800c20a:	f894 3020 	ldrb.w	r3, [r4, #32]
 800c20e:	f043 031f 	orr.w	r3, r3, #31
 800c212:	f884 3020 	strb.w	r3, [r4, #32]
 800c216:	8c23      	ldrh	r3, [r4, #32]
 800c218:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800c21c:	8423      	strh	r3, [r4, #32]
 800c21e:	0a1b      	lsrs	r3, r3, #8
 800c220:	f36f 03c7 	bfc	r3, #3, #5
 800c224:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	txt_vpa = lv_label_create(Tela_Reading_VPA, NULL);
 800c228:	4b1d      	ldr	r3, [pc, #116]	; (800c2a0 <print_vpa_1+0xb8>)
	style_txt1.text.letter_space = 1;
 800c22a:	2601      	movs	r6, #1
	txt_vpa = lv_label_create(Tela_Reading_VPA, NULL);
 800c22c:	6818      	ldr	r0, [r3, #0]
	style_txt1.text.letter_space = 1;
 800c22e:	8526      	strh	r6, [r4, #40]	; 0x28
	txt_vpa = lv_label_create(Tela_Reading_VPA, NULL);
 800c230:	2100      	movs	r1, #0
	style_txt1.text.line_space = 1;
 800c232:	8566      	strh	r6, [r4, #42]	; 0x2a
	txt_vpa = lv_label_create(Tela_Reading_VPA, NULL);
 800c234:	f00b fc16 	bl	8017a64 <lv_label_create>
	lv_obj_set_style(txt_vpa, &style_txt1); 						// Configura o estilo criado
 800c238:	4621      	mov	r1, r4
	txt_vpa = lv_label_create(Tela_Reading_VPA, NULL);
 800c23a:	6028      	str	r0, [r5, #0]
	lv_obj_set_style(txt_vpa, &style_txt1); 						// Configura o estilo criado
 800c23c:	f003 f8c2 	bl	800f3c4 <lv_obj_set_style>
	lv_label_set_long_mode(txt_vpa, LV_LABEL_LONG_EXPAND); 			// Quebra as linhas longas
 800c240:	6828      	ldr	r0, [r5, #0]
 800c242:	2100      	movs	r1, #0
 800c244:	f00b fbb8 	bl	80179b8 <lv_label_set_long_mode>
	lv_label_set_recolor(txt_vpa, true); 							// Ativa recolorizar por comandos no texto
 800c248:	4631      	mov	r1, r6
 800c24a:	6828      	ldr	r0, [r5, #0]
 800c24c:	f00b fbf6 	bl	8017a3c <lv_label_set_recolor>
	lv_label_set_align(txt_vpa, LV_ALIGN_IN_TOP_RIGHT); 			// Centraliza linhas alinhadas
 800c250:	6828      	ldr	r0, [r5, #0]
 800c252:	2103      	movs	r1, #3
 800c254:	f00b f84f 	bl	80172f6 <lv_label_set_align>
	lv_label_set_text(txt_vpa, buffer);
 800c258:	4639      	mov	r1, r7
 800c25a:	6828      	ldr	r0, [r5, #0]
 800c25c:	f00b fb58 	bl	8017910 <lv_label_set_text>
	lv_obj_set_width(txt_vpa, 300); 								// Configuura o comprimento
 800c260:	6828      	ldr	r0, [r5, #0]
 800c262:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800c266:	f002 fff5 	bl	800f254 <lv_obj_set_width>
	lv_obj_align(txt_vpa, NULL, LV_ALIGN_IN_TOP_RIGHT, -70, 34); 	// Alinha ao centro
 800c26a:	2322      	movs	r3, #34	; 0x22
 800c26c:	9300      	str	r3, [sp, #0]
 800c26e:	2203      	movs	r2, #3
 800c270:	f06f 0345 	mvn.w	r3, #69	; 0x45
 800c274:	2100      	movs	r1, #0
 800c276:	6828      	ldr	r0, [r5, #0]
 800c278:	f002 fc02 	bl	800ea80 <lv_obj_align>
}
 800c27c:	b003      	add	sp, #12
 800c27e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c280:	c0000000 	.word	0xc0000000
 800c284:	402f6db6 	.word	0x402f6db6
 800c288:	20004ce8 	.word	0x20004ce8
 800c28c:	200058e8 	.word	0x200058e8
 800c290:	0802b824 	.word	0x0802b824
 800c294:	20005964 	.word	0x20005964
 800c298:	2000c4a4 	.word	0x2000c4a4
 800c29c:	2000132c 	.word	0x2000132c
 800c2a0:	200057b8 	.word	0x200057b8
 800c2a4:	00000000 	.word	0x00000000

0800c2a8 <print_ipa_1>:

void print_ipa_1(uint32_t ipa)
{
 800c2a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	ipa = 2000;
	float resul = (float) ( ipa * (3.30 / 4095.0)) * 0.98;
	sprintf(buffer, "%0.1f", resul);
 800c2aa:	4f27      	ldr	r7, [pc, #156]	; (800c348 <print_ipa_1+0xa0>)

	// Area de VPA
	static lv_style_t style_txt1;
	lv_style_copy(&style_txt1, &lv_style_plain);
 800c2ac:	4c27      	ldr	r4, [pc, #156]	; (800c34c <print_ipa_1+0xa4>)
	sprintf(buffer, "%0.1f", resul);
 800c2ae:	4928      	ldr	r1, [pc, #160]	; (800c350 <print_ipa_1+0xa8>)
	style_txt1.text.letter_space = 1;
	style_txt1.text.line_space = 1;
	style_txt1.text.color = LV_COLOR_CYAN;

	// Cria um novo rotulo
	txt_ipa = lv_label_create(Tela_Reading_VPA, NULL);
 800c2b0:	4d28      	ldr	r5, [pc, #160]	; (800c354 <print_ipa_1+0xac>)
	sprintf(buffer, "%0.1f", resul);
 800c2b2:	a323      	add	r3, pc, #140	; (adr r3, 800c340 <print_ipa_1+0x98>)
 800c2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2b8:	4638      	mov	r0, r7
 800c2ba:	f00d fc2f 	bl	8019b1c <sprintf>
	lv_style_copy(&style_txt1, &lv_style_plain);
 800c2be:	4620      	mov	r0, r4
 800c2c0:	4925      	ldr	r1, [pc, #148]	; (800c358 <print_ipa_1+0xb0>)
 800c2c2:	f003 fcdb 	bl	800fc7c <lv_style_copy>
	style_txt1.text.font = &lv_font_eurostile_24;
 800c2c6:	4b25      	ldr	r3, [pc, #148]	; (800c35c <print_ipa_1+0xb4>)
 800c2c8:	6263      	str	r3, [r4, #36]	; 0x24
	style_txt1.text.color = LV_COLOR_CYAN;
 800c2ca:	f894 3020 	ldrb.w	r3, [r4, #32]
 800c2ce:	f043 031f 	orr.w	r3, r3, #31
 800c2d2:	f884 3020 	strb.w	r3, [r4, #32]
 800c2d6:	8c23      	ldrh	r3, [r4, #32]
 800c2d8:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800c2dc:	8423      	strh	r3, [r4, #32]
 800c2de:	0a1b      	lsrs	r3, r3, #8
 800c2e0:	f36f 03c7 	bfc	r3, #3, #5
 800c2e4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	txt_ipa = lv_label_create(Tela_Reading_VPA, NULL);
 800c2e8:	4b1d      	ldr	r3, [pc, #116]	; (800c360 <print_ipa_1+0xb8>)
	style_txt1.text.letter_space = 1;
 800c2ea:	2601      	movs	r6, #1
	txt_ipa = lv_label_create(Tela_Reading_VPA, NULL);
 800c2ec:	6818      	ldr	r0, [r3, #0]
	style_txt1.text.letter_space = 1;
 800c2ee:	8526      	strh	r6, [r4, #40]	; 0x28
	txt_ipa = lv_label_create(Tela_Reading_VPA, NULL);
 800c2f0:	2100      	movs	r1, #0
	style_txt1.text.line_space = 1;
 800c2f2:	8566      	strh	r6, [r4, #42]	; 0x2a
	txt_ipa = lv_label_create(Tela_Reading_VPA, NULL);
 800c2f4:	f00b fbb6 	bl	8017a64 <lv_label_create>
	lv_obj_set_style(txt_ipa, &style_txt1); 						// Configura o estilo criado
 800c2f8:	4621      	mov	r1, r4
	txt_ipa = lv_label_create(Tela_Reading_VPA, NULL);
 800c2fa:	6028      	str	r0, [r5, #0]
	lv_obj_set_style(txt_ipa, &style_txt1); 						// Configura o estilo criado
 800c2fc:	f003 f862 	bl	800f3c4 <lv_obj_set_style>
	lv_label_set_long_mode(txt_ipa, LV_LABEL_LONG_EXPAND); 			// Quebra as linhas longas
 800c300:	6828      	ldr	r0, [r5, #0]
 800c302:	2100      	movs	r1, #0
 800c304:	f00b fb58 	bl	80179b8 <lv_label_set_long_mode>
	lv_label_set_recolor(txt_ipa, true); 							// Ativa recolorizar por comandos no texto
 800c308:	4631      	mov	r1, r6
 800c30a:	6828      	ldr	r0, [r5, #0]
 800c30c:	f00b fb96 	bl	8017a3c <lv_label_set_recolor>
	lv_label_set_align(txt_ipa, LV_ALIGN_IN_TOP_RIGHT); 			// Centraliza linhas alinhadas
 800c310:	6828      	ldr	r0, [r5, #0]
 800c312:	2103      	movs	r1, #3
 800c314:	f00a ffef 	bl	80172f6 <lv_label_set_align>
	lv_label_set_text(txt_ipa, buffer);
 800c318:	4639      	mov	r1, r7
 800c31a:	6828      	ldr	r0, [r5, #0]
 800c31c:	f00b faf8 	bl	8017910 <lv_label_set_text>
	lv_obj_set_width(txt_ipa, 300); 								// Configuura o comprimento
 800c320:	6828      	ldr	r0, [r5, #0]
 800c322:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800c326:	f002 ff95 	bl	800f254 <lv_obj_set_width>
	lv_obj_align(txt_ipa, NULL, LV_ALIGN_IN_TOP_RIGHT, -70, 77); 	// Alinha ao centro
 800c32a:	234d      	movs	r3, #77	; 0x4d
 800c32c:	9300      	str	r3, [sp, #0]
 800c32e:	2203      	movs	r2, #3
 800c330:	f06f 0345 	mvn.w	r3, #69	; 0x45
 800c334:	2100      	movs	r1, #0
 800c336:	6828      	ldr	r0, [r5, #0]
 800c338:	f002 fba2 	bl	800ea80 <lv_obj_align>
}
 800c33c:	b003      	add	sp, #12
 800c33e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c340:	60000000 	.word	0x60000000
 800c344:	3ff94594 	.word	0x3ff94594
 800c348:	20004ce8 	.word	0x20004ce8
 800c34c:	20005924 	.word	0x20005924
 800c350:	0802b824 	.word	0x0802b824
 800c354:	20005960 	.word	0x20005960
 800c358:	2000c4a4 	.word	0x2000c4a4
 800c35c:	2000132c 	.word	0x2000132c
 800c360:	200057b8 	.word	0x200057b8

0800c364 <create_vumeter_vpa_1>:

void create_vumeter_vpa_1(void)
{
 800c364:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	// Area do Barguraph
	// Indicador OFF
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800c366:	4e30      	ldr	r6, [pc, #192]	; (800c428 <create_vumeter_vpa_1+0xc4>)
 800c368:	4930      	ldr	r1, [pc, #192]	; (800c42c <create_vumeter_vpa_1+0xc8>)
	style_indic_bar.body.radius = 0;
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
	style_indic_bar.body.main_color = LV_COLOR_MAKE(105, 105, 105);
	style_indic_bar.body.border.color = LV_COLOR_MAKE(105, 105, 105);

	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800c36a:	4c31      	ldr	r4, [pc, #196]	; (800c430 <create_vumeter_vpa_1+0xcc>)
	style_indic_bar_vd.body.main_color = LV_COLOR_MAKE(0, 255, 0);
	style_indic_bar_vd.body.border.color = LV_COLOR_MAKE(0, 255, 0);

	// Create a default bar
	for(uint8_t x = 0; x < 21; x++) {
		bar_vpa[x] = lv_bar_create(Tela_Reading_VPA, NULL);
 800c36c:	4f31      	ldr	r7, [pc, #196]	; (800c434 <create_vumeter_vpa_1+0xd0>)
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800c36e:	4630      	mov	r0, r6
 800c370:	f003 fc84 	bl	800fc7c <lv_style_copy>
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800c374:	4b30      	ldr	r3, [pc, #192]	; (800c438 <create_vumeter_vpa_1+0xd4>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800c376:	492d      	ldr	r1, [pc, #180]	; (800c42c <create_vumeter_vpa_1+0xc8>)
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800c378:	881b      	ldrh	r3, [r3, #0]
 800c37a:	80b3      	strh	r3, [r6, #4]
	style_indic_bar.body.radius = 0;
 800c37c:	2500      	movs	r5, #0
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800c37e:	4620      	mov	r0, r4
	style_indic_bar.body.main_color = LV_COLOR_MAKE(105, 105, 105);
 800c380:	8073      	strh	r3, [r6, #2]
	style_indic_bar.body.border.color = LV_COLOR_MAKE(105, 105, 105);
 800c382:	8173      	strh	r3, [r6, #10]
	style_indic_bar.body.radius = 0;
 800c384:	80f5      	strh	r5, [r6, #6]
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800c386:	f003 fc79 	bl	800fc7c <lv_style_copy>
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800c38a:	7923      	ldrb	r3, [r4, #4]
	style_indic_bar_vd.body.radius = 0;
 800c38c:	80e5      	strh	r5, [r4, #6]
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800c38e:	f365 0304 	bfi	r3, r5, #0, #5
 800c392:	7123      	strb	r3, [r4, #4]
 800c394:	88a3      	ldrh	r3, [r4, #4]
 800c396:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800c39a:	80a3      	strh	r3, [r4, #4]
 800c39c:	0a1b      	lsrs	r3, r3, #8
 800c39e:	f365 03c7 	bfi	r3, r5, #3, #5
 800c3a2:	7163      	strb	r3, [r4, #5]
	style_indic_bar_vd.body.main_color = LV_COLOR_MAKE(0, 255, 0);
 800c3a4:	78a3      	ldrb	r3, [r4, #2]
 800c3a6:	f365 0304 	bfi	r3, r5, #0, #5
 800c3aa:	70a3      	strb	r3, [r4, #2]
 800c3ac:	8863      	ldrh	r3, [r4, #2]
 800c3ae:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800c3b2:	8063      	strh	r3, [r4, #2]
 800c3b4:	0a1b      	lsrs	r3, r3, #8
 800c3b6:	f365 03c7 	bfi	r3, r5, #3, #5
 800c3ba:	70e3      	strb	r3, [r4, #3]
	style_indic_bar_vd.body.border.color = LV_COLOR_MAKE(0, 255, 0);
 800c3bc:	7aa3      	ldrb	r3, [r4, #10]
 800c3be:	f365 0304 	bfi	r3, r5, #0, #5
 800c3c2:	72a3      	strb	r3, [r4, #10]
 800c3c4:	8963      	ldrh	r3, [r4, #10]
 800c3c6:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800c3ca:	8163      	strh	r3, [r4, #10]
 800c3cc:	0a1b      	lsrs	r3, r3, #8
 800c3ce:	f365 03c7 	bfi	r3, r5, #3, #5
 800c3d2:	72e3      	strb	r3, [r4, #11]
 800c3d4:	4c19      	ldr	r4, [pc, #100]	; (800c43c <create_vumeter_vpa_1+0xd8>)
		bar_vpa[x] = lv_bar_create(Tela_Reading_VPA, NULL);
 800c3d6:	6838      	ldr	r0, [r7, #0]
 800c3d8:	2100      	movs	r1, #0
 800c3da:	f008 fd31 	bl	8014e40 <lv_bar_create>
		lv_obj_set_size(bar_vpa[x], 4, 13);
 800c3de:	220d      	movs	r2, #13
		bar_vpa[x] = lv_bar_create(Tela_Reading_VPA, NULL);
 800c3e0:	6060      	str	r0, [r4, #4]
		lv_obj_set_size(bar_vpa[x], 4, 13);
 800c3e2:	2104      	movs	r1, #4
 800c3e4:	f002 feec 	bl	800f1c0 <lv_obj_set_size>
		lv_bar_set_style(bar_vpa[x], LV_BAR_STYLE_BG, &style_indic_bar);
 800c3e8:	6860      	ldr	r0, [r4, #4]
 800c3ea:	4632      	mov	r2, r6
 800c3ec:	2100      	movs	r1, #0
 800c3ee:	f008 fd11 	bl	8014e14 <lv_bar_set_style>
		lv_bar_set_style(bar_vpa[x], LV_BAR_STYLE_INDIC, &style_indic_bar);
 800c3f2:	6860      	ldr	r0, [r4, #4]
 800c3f4:	4632      	mov	r2, r6
 800c3f6:	2101      	movs	r1, #1
 800c3f8:	f008 fd0c 	bl	8014e14 <lv_bar_set_style>
		lv_obj_align(bar_vpa[x], NULL, LV_ALIGN_IN_TOP_LEFT, vpa_pos_x[x], 57);
 800c3fc:	2239      	movs	r2, #57	; 0x39
 800c3fe:	4b10      	ldr	r3, [pc, #64]	; (800c440 <create_vumeter_vpa_1+0xdc>)
 800c400:	9200      	str	r2, [sp, #0]
 800c402:	f933 3025 	ldrsh.w	r3, [r3, r5, lsl #2]
 800c406:	6860      	ldr	r0, [r4, #4]
 800c408:	2201      	movs	r2, #1
 800c40a:	2100      	movs	r1, #0
 800c40c:	f002 fb38 	bl	800ea80 <lv_obj_align>
 800c410:	3501      	adds	r5, #1
		lv_bar_set_value(bar_vpa[x], 100, 0);
 800c412:	2200      	movs	r2, #0
 800c414:	2164      	movs	r1, #100	; 0x64
 800c416:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800c41a:	f008 fc9f 	bl	8014d5c <lv_bar_set_value>
	for(uint8_t x = 0; x < 21; x++) {
 800c41e:	2d15      	cmp	r5, #21
 800c420:	d1d9      	bne.n	800c3d6 <create_vumeter_vpa_1+0x72>
	}
}
 800c422:	b003      	add	sp, #12
 800c424:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c426:	bf00      	nop
 800c428:	20005870 	.word	0x20005870
 800c42c:	2000c3b4 	.word	0x2000c3b4
 800c430:	200058ac 	.word	0x200058ac
 800c434:	200057b8 	.word	0x200057b8
 800c438:	0801c5d2 	.word	0x0801c5d2
 800c43c:	2000580c 	.word	0x2000580c
 800c440:	0802b8f0 	.word	0x0802b8f0

0800c444 <create_vumeter_ipa_1>:

void create_vumeter_ipa_1(void)
{
 800c444:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	// Area do Barguraph
	// Indicador OFF
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800c446:	4e30      	ldr	r6, [pc, #192]	; (800c508 <create_vumeter_ipa_1+0xc4>)
 800c448:	4930      	ldr	r1, [pc, #192]	; (800c50c <create_vumeter_ipa_1+0xc8>)
	style_indic_bar.body.radius = 0;
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
	style_indic_bar.body.main_color = LV_COLOR_MAKE(105, 105, 105);
	style_indic_bar.body.border.color = LV_COLOR_MAKE(105, 105, 105);

	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800c44a:	4c31      	ldr	r4, [pc, #196]	; (800c510 <create_vumeter_ipa_1+0xcc>)
	style_indic_bar_vd.body.main_color = LV_COLOR_MAKE(0, 255, 0);
	style_indic_bar_vd.body.border.color = LV_COLOR_MAKE(0, 255, 0);

	// Create a default bar
	for(uint8_t x = 0; x < 21; x++) {
		bar_ipa[x] = lv_bar_create(Tela_Reading_VPA, NULL);
 800c44c:	4f31      	ldr	r7, [pc, #196]	; (800c514 <create_vumeter_ipa_1+0xd0>)
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800c44e:	4630      	mov	r0, r6
 800c450:	f003 fc14 	bl	800fc7c <lv_style_copy>
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800c454:	4b30      	ldr	r3, [pc, #192]	; (800c518 <create_vumeter_ipa_1+0xd4>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800c456:	492d      	ldr	r1, [pc, #180]	; (800c50c <create_vumeter_ipa_1+0xc8>)
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800c458:	881b      	ldrh	r3, [r3, #0]
 800c45a:	80b3      	strh	r3, [r6, #4]
	style_indic_bar.body.radius = 0;
 800c45c:	2500      	movs	r5, #0
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800c45e:	4620      	mov	r0, r4
	style_indic_bar.body.main_color = LV_COLOR_MAKE(105, 105, 105);
 800c460:	8073      	strh	r3, [r6, #2]
	style_indic_bar.body.border.color = LV_COLOR_MAKE(105, 105, 105);
 800c462:	8173      	strh	r3, [r6, #10]
	style_indic_bar.body.radius = 0;
 800c464:	80f5      	strh	r5, [r6, #6]
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800c466:	f003 fc09 	bl	800fc7c <lv_style_copy>
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800c46a:	7923      	ldrb	r3, [r4, #4]
	style_indic_bar_vd.body.radius = 0;
 800c46c:	80e5      	strh	r5, [r4, #6]
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800c46e:	f365 0304 	bfi	r3, r5, #0, #5
 800c472:	7123      	strb	r3, [r4, #4]
 800c474:	88a3      	ldrh	r3, [r4, #4]
 800c476:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800c47a:	80a3      	strh	r3, [r4, #4]
 800c47c:	0a1b      	lsrs	r3, r3, #8
 800c47e:	f365 03c7 	bfi	r3, r5, #3, #5
 800c482:	7163      	strb	r3, [r4, #5]
	style_indic_bar_vd.body.main_color = LV_COLOR_MAKE(0, 255, 0);
 800c484:	78a3      	ldrb	r3, [r4, #2]
 800c486:	f365 0304 	bfi	r3, r5, #0, #5
 800c48a:	70a3      	strb	r3, [r4, #2]
 800c48c:	8863      	ldrh	r3, [r4, #2]
 800c48e:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800c492:	8063      	strh	r3, [r4, #2]
 800c494:	0a1b      	lsrs	r3, r3, #8
 800c496:	f365 03c7 	bfi	r3, r5, #3, #5
 800c49a:	70e3      	strb	r3, [r4, #3]
	style_indic_bar_vd.body.border.color = LV_COLOR_MAKE(0, 255, 0);
 800c49c:	7aa3      	ldrb	r3, [r4, #10]
 800c49e:	f365 0304 	bfi	r3, r5, #0, #5
 800c4a2:	72a3      	strb	r3, [r4, #10]
 800c4a4:	8963      	ldrh	r3, [r4, #10]
 800c4a6:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800c4aa:	8163      	strh	r3, [r4, #10]
 800c4ac:	0a1b      	lsrs	r3, r3, #8
 800c4ae:	f365 03c7 	bfi	r3, r5, #3, #5
 800c4b2:	72e3      	strb	r3, [r4, #11]
 800c4b4:	4c19      	ldr	r4, [pc, #100]	; (800c51c <create_vumeter_ipa_1+0xd8>)
		bar_ipa[x] = lv_bar_create(Tela_Reading_VPA, NULL);
 800c4b6:	6838      	ldr	r0, [r7, #0]
 800c4b8:	2100      	movs	r1, #0
 800c4ba:	f008 fcc1 	bl	8014e40 <lv_bar_create>
		lv_obj_set_size(bar_ipa[x], 4, 13);
 800c4be:	220d      	movs	r2, #13
		bar_ipa[x] = lv_bar_create(Tela_Reading_VPA, NULL);
 800c4c0:	6060      	str	r0, [r4, #4]
		lv_obj_set_size(bar_ipa[x], 4, 13);
 800c4c2:	2104      	movs	r1, #4
 800c4c4:	f002 fe7c 	bl	800f1c0 <lv_obj_set_size>
		lv_bar_set_style(bar_ipa[x], LV_BAR_STYLE_BG, &style_indic_bar);
 800c4c8:	6860      	ldr	r0, [r4, #4]
 800c4ca:	4632      	mov	r2, r6
 800c4cc:	2100      	movs	r1, #0
 800c4ce:	f008 fca1 	bl	8014e14 <lv_bar_set_style>
		lv_bar_set_style(bar_ipa[x], LV_BAR_STYLE_INDIC, &style_indic_bar);
 800c4d2:	6860      	ldr	r0, [r4, #4]
 800c4d4:	4632      	mov	r2, r6
 800c4d6:	2101      	movs	r1, #1
 800c4d8:	f008 fc9c 	bl	8014e14 <lv_bar_set_style>
		lv_obj_align(bar_ipa[x], NULL, LV_ALIGN_IN_TOP_LEFT, ipa_pos_x[x], 99);
 800c4dc:	2263      	movs	r2, #99	; 0x63
 800c4de:	4b10      	ldr	r3, [pc, #64]	; (800c520 <create_vumeter_ipa_1+0xdc>)
 800c4e0:	9200      	str	r2, [sp, #0]
 800c4e2:	f933 3025 	ldrsh.w	r3, [r3, r5, lsl #2]
 800c4e6:	6860      	ldr	r0, [r4, #4]
 800c4e8:	2201      	movs	r2, #1
 800c4ea:	2100      	movs	r1, #0
 800c4ec:	f002 fac8 	bl	800ea80 <lv_obj_align>
 800c4f0:	3501      	adds	r5, #1
		lv_bar_set_value(bar_ipa[x], 100, 0);
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	2164      	movs	r1, #100	; 0x64
 800c4f6:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800c4fa:	f008 fc2f 	bl	8014d5c <lv_bar_set_value>
	for(uint8_t x = 0; x < 21; x++) {
 800c4fe:	2d15      	cmp	r5, #21
 800c500:	d1d9      	bne.n	800c4b6 <create_vumeter_ipa_1+0x72>
	}
}
 800c502:	b003      	add	sp, #12
 800c504:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c506:	bf00      	nop
 800c508:	20005870 	.word	0x20005870
 800c50c:	2000c3b4 	.word	0x2000c3b4
 800c510:	200058ac 	.word	0x200058ac
 800c514:	200057b8 	.word	0x200057b8
 800c518:	0801c5d2 	.word	0x0801c5d2
 800c51c:	200057b8 	.word	0x200057b8
 800c520:	0802b89c 	.word	0x0802b89c

0800c524 <update_vumeter_vpa_1>:

void update_vumeter_vpa_1(uint32_t value)
{
 800c524:	b570      	push	{r4, r5, r6, lr}
	uint32_t x;
	value = 3900;
	float resul = (float) ( (value * (3.30 / 4095.0)) * 5) / 0.75;

	for(x = 0; x <= resul; x++) {
		lv_bar_set_style(bar_vpa[x], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800c526:	4d0a      	ldr	r5, [pc, #40]	; (800c550 <update_vumeter_vpa_1+0x2c>)
 800c528:	4e0a      	ldr	r6, [pc, #40]	; (800c554 <update_vumeter_vpa_1+0x30>)
	for(x = 0; x <= resul; x++) {
 800c52a:	2400      	movs	r4, #0
 800c52c:	2c15      	cmp	r4, #21
 800c52e:	d100      	bne.n	800c532 <update_vumeter_vpa_1+0xe>
		lv_bar_set_style(bar_vpa[x], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
	}
}
 800c530:	bd70      	pop	{r4, r5, r6, pc}
		lv_bar_set_style(bar_vpa[x], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800c532:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800c536:	4632      	mov	r2, r6
 800c538:	2100      	movs	r1, #0
 800c53a:	f008 fc6b 	bl	8014e14 <lv_bar_set_style>
		lv_bar_set_style(bar_vpa[x], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
 800c53e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800c542:	4632      	mov	r2, r6
 800c544:	2101      	movs	r1, #1
 800c546:	f008 fc65 	bl	8014e14 <lv_bar_set_style>
	for(x = 0; x <= resul; x++) {
 800c54a:	3401      	adds	r4, #1
 800c54c:	e7ee      	b.n	800c52c <update_vumeter_vpa_1+0x8>
 800c54e:	bf00      	nop
 800c550:	20005810 	.word	0x20005810
 800c554:	200058ac 	.word	0x200058ac

0800c558 <update_vumeter_ipa_1>:

void update_vumeter_ipa_1(uint32_t value)
{
 800c558:	b570      	push	{r4, r5, r6, lr}
	uint32_t x;
	value = 2000;
	float resul = (float) (( value * (3.30 / 4095.0)) * 0.98) / 0.10;

	for(x = 0; x <= resul; x++) {
		lv_bar_set_style(bar_ipa[x], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800c55a:	4d0a      	ldr	r5, [pc, #40]	; (800c584 <update_vumeter_ipa_1+0x2c>)
 800c55c:	4e0a      	ldr	r6, [pc, #40]	; (800c588 <update_vumeter_ipa_1+0x30>)
	for(x = 0; x <= resul; x++) {
 800c55e:	2400      	movs	r4, #0
 800c560:	2c10      	cmp	r4, #16
 800c562:	d100      	bne.n	800c566 <update_vumeter_ipa_1+0xe>
		lv_bar_set_style(bar_ipa[x], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
	}
}
 800c564:	bd70      	pop	{r4, r5, r6, pc}
		lv_bar_set_style(bar_ipa[x], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800c566:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800c56a:	4632      	mov	r2, r6
 800c56c:	2100      	movs	r1, #0
 800c56e:	f008 fc51 	bl	8014e14 <lv_bar_set_style>
		lv_bar_set_style(bar_ipa[x], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
 800c572:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800c576:	4632      	mov	r2, r6
 800c578:	2101      	movs	r1, #1
 800c57a:	f008 fc4b 	bl	8014e14 <lv_bar_set_style>
	for(x = 0; x <= resul; x++) {
 800c57e:	3401      	adds	r4, #1
 800c580:	e7ee      	b.n	800c560 <update_vumeter_ipa_1+0x8>
 800c582:	bf00      	nop
 800c584:	200057bc 	.word	0x200057bc
 800c588:	200058ac 	.word	0x200058ac

0800c58c <screen_reading_vpa>:
	Tela_Reading_VPA = lv_obj_create(NULL, NULL);
 800c58c:	2100      	movs	r1, #0
{
 800c58e:	b538      	push	{r3, r4, r5, lr}
	Tela_Reading_VPA = lv_obj_create(NULL, NULL);
 800c590:	4608      	mov	r0, r1
 800c592:	f002 fc97 	bl	800eec4 <lv_obj_create>
 800c596:	4c1b      	ldr	r4, [pc, #108]	; (800c604 <screen_reading_vpa+0x78>)
	img_fundo = lv_img_create(Tela_Reading_VPA, NULL);
 800c598:	4d1b      	ldr	r5, [pc, #108]	; (800c608 <screen_reading_vpa+0x7c>)
	Tela_Reading_VPA = lv_obj_create(NULL, NULL);
 800c59a:	6020      	str	r0, [r4, #0]
	img_fundo = lv_img_create(Tela_Reading_VPA, NULL);
 800c59c:	2100      	movs	r1, #0
 800c59e:	f00a fb93 	bl	8016cc8 <lv_img_create>
	lv_img_set_src(img_fundo, &tela_reading_vpa);
 800c5a2:	491a      	ldr	r1, [pc, #104]	; (800c60c <screen_reading_vpa+0x80>)
	img_fundo = lv_img_create(Tela_Reading_VPA, NULL);
 800c5a4:	6028      	str	r0, [r5, #0]
	lv_img_set_src(img_fundo, &tela_reading_vpa);
 800c5a6:	f00a faff 	bl	8016ba8 <lv_img_set_src>
	lv_obj_set_protect(img_fundo, LV_PROTECT_POS);
 800c5aa:	2104      	movs	r1, #4
 800c5ac:	6828      	ldr	r0, [r5, #0]
 800c5ae:	f002 f8bb 	bl	800e728 <lv_obj_set_protect>
	btn_next_vpa();
 800c5b2:	f7ff fdaf 	bl	800c114 <btn_next_vpa>
	btn_prev_vpa();
 800c5b6:	f7ff fde1 	bl	800c17c <btn_prev_vpa>
	create_vumeter_vpa_1();
 800c5ba:	f7ff fed3 	bl	800c364 <create_vumeter_vpa_1>
	create_vumeter_ipa_1();
 800c5be:	f7ff ff41 	bl	800c444 <create_vumeter_ipa_1>
	print_vpa_1(2000);
 800c5c2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c5c6:	f7ff fe0f 	bl	800c1e8 <print_vpa_1>
	print_ipa_1(2000);
 800c5ca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c5ce:	f7ff fe6b 	bl	800c2a8 <print_ipa_1>
	update_vumeter_vpa_1(2000);
 800c5d2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c5d6:	f7ff ffa5 	bl	800c524 <update_vumeter_vpa_1>
	update_vumeter_ipa_1(2000);
 800c5da:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c5de:	f7ff ffbb 	bl	800c558 <update_vumeter_ipa_1>
 800c5e2:	6820      	ldr	r0, [r4, #0]
 800c5e4:	f001 fe5a 	bl	800e29c <lv_disp_load_scr>
    Task_Reading_VPA = lv_task_create(update_screen_vpa, 500, LV_TASK_PRIO_MID, NULL);
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	2203      	movs	r2, #3
 800c5ec:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800c5f0:	4807      	ldr	r0, [pc, #28]	; (800c610 <screen_reading_vpa+0x84>)
 800c5f2:	f008 f90f 	bl	8014814 <lv_task_create>
 800c5f6:	4b07      	ldr	r3, [pc, #28]	; (800c614 <screen_reading_vpa+0x88>)
 800c5f8:	6018      	str	r0, [r3, #0]
    TelaAtiva = TelaReading_Vpa;
 800c5fa:	4b07      	ldr	r3, [pc, #28]	; (800c618 <screen_reading_vpa+0x8c>)
 800c5fc:	220c      	movs	r2, #12
 800c5fe:	601a      	str	r2, [r3, #0]
 800c600:	bd38      	pop	{r3, r4, r5, pc}
 800c602:	bf00      	nop
 800c604:	200057b8 	.word	0x200057b8
 800c608:	20005864 	.word	0x20005864
 800c60c:	20001bec 	.word	0x20001bec
 800c610:	0800c621 	.word	0x0800c621
 800c614:	200057b4 	.word	0x200057b4
 800c618:	200033e4 	.word	0x200033e4
 800c61c:	00000000 	.word	0x00000000

0800c620 <update_screen_vpa>:

static void update_screen_vpa(lv_task_t * param)
{
 800c620:	b538      	push	{r3, r4, r5, lr}
	uint32_t vpa = 3900;
	float resul = (float) ( vpa * (3.30 / 4095.0)) * 5;
	sprintf(buffer, "%0.1f", resul);
 800c622:	4c17      	ldr	r4, [pc, #92]	; (800c680 <update_screen_vpa+0x60>)
 800c624:	4d17      	ldr	r5, [pc, #92]	; (800c684 <update_screen_vpa+0x64>)
 800c626:	a312      	add	r3, pc, #72	; (adr r3, 800c670 <update_screen_vpa+0x50>)
 800c628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c62c:	4629      	mov	r1, r5
 800c62e:	4620      	mov	r0, r4
 800c630:	f00d fa74 	bl	8019b1c <sprintf>
	lv_label_set_text(txt_vpa, buffer);
 800c634:	4b14      	ldr	r3, [pc, #80]	; (800c688 <update_screen_vpa+0x68>)
 800c636:	4621      	mov	r1, r4
 800c638:	6818      	ldr	r0, [r3, #0]
 800c63a:	f00b f969 	bl	8017910 <lv_label_set_text>
	update_vumeter_vpa_1(vpa);
 800c63e:	f640 703c 	movw	r0, #3900	; 0xf3c
 800c642:	f7ff ff6f 	bl	800c524 <update_vumeter_vpa_1>

	uint32_t ipa = 2000;
	resul = (float) ( ipa * (3.30 / 4095.0)) * 0.98;
	sprintf(buffer, "%0.1f", resul);
 800c646:	a30c      	add	r3, pc, #48	; (adr r3, 800c678 <update_screen_vpa+0x58>)
 800c648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c64c:	4629      	mov	r1, r5
 800c64e:	4620      	mov	r0, r4
 800c650:	f00d fa64 	bl	8019b1c <sprintf>
	lv_label_set_text(txt_ipa, buffer);
 800c654:	4b0d      	ldr	r3, [pc, #52]	; (800c68c <update_screen_vpa+0x6c>)
 800c656:	4621      	mov	r1, r4
 800c658:	6818      	ldr	r0, [r3, #0]
 800c65a:	f00b f959 	bl	8017910 <lv_label_set_text>
	update_vumeter_ipa_1(ipa);
 800c65e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
}
 800c662:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	update_vumeter_ipa_1(ipa);
 800c666:	f7ff bf77 	b.w	800c558 <update_vumeter_ipa_1>
 800c66a:	bf00      	nop
 800c66c:	f3af 8000 	nop.w
 800c670:	c0000000 	.word	0xc0000000
 800c674:	402f6db6 	.word	0x402f6db6
 800c678:	60000000 	.word	0x60000000
 800c67c:	3ff94594 	.word	0x3ff94594
 800c680:	20004ce8 	.word	0x20004ce8
 800c684:	0802b824 	.word	0x0802b824
 800c688:	20005964 	.word	0x20005964
 800c68c:	20005960 	.word	0x20005960

0800c690 <ButtonEventTelaReading_Vpa>:

void ButtonEventTelaReading_Vpa(uint8_t event, uint8_t tipo, uint8_t id)
{
	if(event == EVT_PBTN_INPUT) {
 800c690:	2810      	cmp	r0, #16
 800c692:	d10e      	bne.n	800c6b2 <ButtonEventTelaReading_Vpa+0x22>
		if(tipo == PBTN_SCLK) {	// Single Click
 800c694:	2901      	cmp	r1, #1
 800c696:	d10c      	bne.n	800c6b2 <ButtonEventTelaReading_Vpa+0x22>
			switch(id) {
 800c698:	b112      	cbz	r2, 800c6a0 <ButtonEventTelaReading_Vpa+0x10>
 800c69a:	2a01      	cmp	r2, #1
 800c69c:	d005      	beq.n	800c6aa <ButtonEventTelaReading_Vpa+0x1a>
 800c69e:	4770      	bx	lr
				case KEY_DN:
					lv_event_send(imgbtn_prev, LV_EVENT_APPLY, NULL);
 800c6a0:	4b04      	ldr	r3, [pc, #16]	; (800c6b4 <ButtonEventTelaReading_Vpa+0x24>)
 800c6a2:	2111      	movs	r1, #17
					break;
				case KEY_UP:
					lv_event_send(imgbtn_next, LV_EVENT_APPLY, NULL);
 800c6a4:	6818      	ldr	r0, [r3, #0]
 800c6a6:	f002 b893 	b.w	800e7d0 <lv_event_send>
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	2111      	movs	r1, #17
 800c6ae:	4b02      	ldr	r3, [pc, #8]	; (800c6b8 <ButtonEventTelaReading_Vpa+0x28>)
 800c6b0:	e7f8      	b.n	800c6a4 <ButtonEventTelaReading_Vpa+0x14>
 800c6b2:	4770      	bx	lr
 800c6b4:	2000586c 	.word	0x2000586c
 800c6b8:	20005868 	.word	0x20005868

0800c6bc <btn_event_esc_r>:
	lv_obj_set_click(imgbtn_prev, 1);
}

static void btn_event_esc_r(lv_obj_t * btn, lv_event_t event)
{
	if(event == LV_EVENT_APPLY) {
 800c6bc:	2911      	cmp	r1, #17
{
 800c6be:	b508      	push	{r3, lr}
	if(event == LV_EVENT_APPLY) {
 800c6c0:	d10b      	bne.n	800c6da <btn_event_esc_r+0x1e>
		//printf("Button ESC Released\n");
		lv_task_del(Task_Readings);
 800c6c2:	4b06      	ldr	r3, [pc, #24]	; (800c6dc <btn_event_esc_r+0x20>)
 800c6c4:	6818      	ldr	r0, [r3, #0]
 800c6c6:	f007 ffb5 	bl	8014634 <lv_task_del>
		lv_obj_del(Tela_Readings);
 800c6ca:	4b05      	ldr	r3, [pc, #20]	; (800c6e0 <btn_event_esc_r+0x24>)
 800c6cc:	6818      	ldr	r0, [r3, #0]
 800c6ce:	f002 fdea 	bl	800f2a6 <lv_obj_del>
		screen_sel();
	}
}
 800c6d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_sel();
 800c6d6:	f001 ba93 	b.w	800dc00 <screen_sel>
 800c6da:	bd08      	pop	{r3, pc}
 800c6dc:	20005968 	.word	0x20005968
 800c6e0:	2000596c 	.word	0x2000596c

0800c6e4 <btn_event_next_r>:
	if(event == LV_EVENT_APPLY) {
 800c6e4:	2911      	cmp	r1, #17
{
 800c6e6:	b508      	push	{r3, lr}
	if(event == LV_EVENT_APPLY) {
 800c6e8:	d10b      	bne.n	800c702 <btn_event_next_r+0x1e>
        lv_task_del(Task_Readings);
 800c6ea:	4b06      	ldr	r3, [pc, #24]	; (800c704 <btn_event_next_r+0x20>)
 800c6ec:	6818      	ldr	r0, [r3, #0]
 800c6ee:	f007 ffa1 	bl	8014634 <lv_task_del>
		lv_obj_del(Tela_Readings);
 800c6f2:	4b05      	ldr	r3, [pc, #20]	; (800c708 <btn_event_next_r+0x24>)
 800c6f4:	6818      	ldr	r0, [r3, #0]
 800c6f6:	f002 fdd6 	bl	800f2a6 <lv_obj_del>
}
 800c6fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_reading_mpx();
 800c6fe:	f7fe bed9 	b.w	800b4b4 <screen_reading_mpx>
 800c702:	bd08      	pop	{r3, pc}
 800c704:	20005968 	.word	0x20005968
 800c708:	2000596c 	.word	0x2000596c

0800c70c <create_vumeter_swr_1>:
{
 800c70c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800c70e:	4e30      	ldr	r6, [pc, #192]	; (800c7d0 <create_vumeter_swr_1+0xc4>)
 800c710:	4930      	ldr	r1, [pc, #192]	; (800c7d4 <create_vumeter_swr_1+0xc8>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800c712:	4c31      	ldr	r4, [pc, #196]	; (800c7d8 <create_vumeter_swr_1+0xcc>)
		bar_swr[x] = lv_bar_create(Tela_Readings, NULL);
 800c714:	4f31      	ldr	r7, [pc, #196]	; (800c7dc <create_vumeter_swr_1+0xd0>)
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800c716:	4630      	mov	r0, r6
 800c718:	f003 fab0 	bl	800fc7c <lv_style_copy>
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800c71c:	4b30      	ldr	r3, [pc, #192]	; (800c7e0 <create_vumeter_swr_1+0xd4>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800c71e:	492d      	ldr	r1, [pc, #180]	; (800c7d4 <create_vumeter_swr_1+0xc8>)
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800c720:	881b      	ldrh	r3, [r3, #0]
 800c722:	80b3      	strh	r3, [r6, #4]
	style_indic_bar.body.radius = 0;
 800c724:	2500      	movs	r5, #0
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800c726:	4620      	mov	r0, r4
	style_indic_bar.body.main_color = LV_COLOR_MAKE(105, 105, 105);
 800c728:	8073      	strh	r3, [r6, #2]
	style_indic_bar.body.border.color = LV_COLOR_MAKE(105, 105, 105);
 800c72a:	8173      	strh	r3, [r6, #10]
	style_indic_bar.body.radius = 0;
 800c72c:	80f5      	strh	r5, [r6, #6]
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800c72e:	f003 faa5 	bl	800fc7c <lv_style_copy>
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800c732:	7923      	ldrb	r3, [r4, #4]
	style_indic_bar_vd.body.radius = 0;
 800c734:	80e5      	strh	r5, [r4, #6]
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800c736:	f365 0304 	bfi	r3, r5, #0, #5
 800c73a:	7123      	strb	r3, [r4, #4]
 800c73c:	88a3      	ldrh	r3, [r4, #4]
 800c73e:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800c742:	80a3      	strh	r3, [r4, #4]
 800c744:	0a1b      	lsrs	r3, r3, #8
 800c746:	f365 03c7 	bfi	r3, r5, #3, #5
 800c74a:	7163      	strb	r3, [r4, #5]
	style_indic_bar_vd.body.main_color = LV_COLOR_MAKE(0, 255, 0);
 800c74c:	78a3      	ldrb	r3, [r4, #2]
 800c74e:	f365 0304 	bfi	r3, r5, #0, #5
 800c752:	70a3      	strb	r3, [r4, #2]
 800c754:	8863      	ldrh	r3, [r4, #2]
 800c756:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800c75a:	8063      	strh	r3, [r4, #2]
 800c75c:	0a1b      	lsrs	r3, r3, #8
 800c75e:	f365 03c7 	bfi	r3, r5, #3, #5
 800c762:	70e3      	strb	r3, [r4, #3]
	style_indic_bar_vd.body.border.color = LV_COLOR_MAKE(0, 255, 0);
 800c764:	7aa3      	ldrb	r3, [r4, #10]
 800c766:	f365 0304 	bfi	r3, r5, #0, #5
 800c76a:	72a3      	strb	r3, [r4, #10]
 800c76c:	8963      	ldrh	r3, [r4, #10]
 800c76e:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800c772:	8163      	strh	r3, [r4, #10]
 800c774:	0a1b      	lsrs	r3, r3, #8
 800c776:	f365 03c7 	bfi	r3, r5, #3, #5
 800c77a:	72e3      	strb	r3, [r4, #11]
 800c77c:	4c19      	ldr	r4, [pc, #100]	; (800c7e4 <create_vumeter_swr_1+0xd8>)
		bar_swr[x] = lv_bar_create(Tela_Readings, NULL);
 800c77e:	6838      	ldr	r0, [r7, #0]
 800c780:	2100      	movs	r1, #0
 800c782:	f008 fb5d 	bl	8014e40 <lv_bar_create>
		lv_obj_set_size(bar_swr[x], 4, 14);
 800c786:	220e      	movs	r2, #14
		bar_swr[x] = lv_bar_create(Tela_Readings, NULL);
 800c788:	6060      	str	r0, [r4, #4]
		lv_obj_set_size(bar_swr[x], 4, 14);
 800c78a:	2104      	movs	r1, #4
 800c78c:	f002 fd18 	bl	800f1c0 <lv_obj_set_size>
		lv_bar_set_style(bar_swr[x], LV_BAR_STYLE_BG, &style_indic_bar);
 800c790:	6860      	ldr	r0, [r4, #4]
 800c792:	4632      	mov	r2, r6
 800c794:	2100      	movs	r1, #0
 800c796:	f008 fb3d 	bl	8014e14 <lv_bar_set_style>
		lv_bar_set_style(bar_swr[x], LV_BAR_STYLE_INDIC, &style_indic_bar);
 800c79a:	6860      	ldr	r0, [r4, #4]
 800c79c:	4632      	mov	r2, r6
 800c79e:	2101      	movs	r1, #1
 800c7a0:	f008 fb38 	bl	8014e14 <lv_bar_set_style>
		lv_obj_align(bar_swr[x], NULL, LV_ALIGN_IN_TOP_LEFT, swr1_pos_x[x], 99);
 800c7a4:	2263      	movs	r2, #99	; 0x63
 800c7a6:	4b10      	ldr	r3, [pc, #64]	; (800c7e8 <create_vumeter_swr_1+0xdc>)
 800c7a8:	9200      	str	r2, [sp, #0]
 800c7aa:	f933 3025 	ldrsh.w	r3, [r3, r5, lsl #2]
 800c7ae:	6860      	ldr	r0, [r4, #4]
 800c7b0:	2201      	movs	r2, #1
 800c7b2:	2100      	movs	r1, #0
 800c7b4:	f002 f964 	bl	800ea80 <lv_obj_align>
 800c7b8:	3501      	adds	r5, #1
		lv_bar_set_value(bar_swr[x], 100, 0);
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	2164      	movs	r1, #100	; 0x64
 800c7be:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800c7c2:	f008 facb 	bl	8014d5c <lv_bar_set_value>
	for(uint8_t x = 0; x < 21; x++) {
 800c7c6:	2d15      	cmp	r5, #21
 800c7c8:	d1d9      	bne.n	800c77e <create_vumeter_swr_1+0x72>
}
 800c7ca:	b003      	add	sp, #12
 800c7cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c7ce:	bf00      	nop
 800c7d0:	20005a24 	.word	0x20005a24
 800c7d4:	2000c3b4 	.word	0x2000c3b4
 800c7d8:	20005a60 	.word	0x20005a60
 800c7dc:	2000596c 	.word	0x2000596c
 800c7e0:	0801c5d4 	.word	0x0801c5d4
 800c7e4:	200059c0 	.word	0x200059c0
 800c7e8:	0802b998 	.word	0x0802b998

0800c7ec <create_vumeter_fwd_1>:
{
 800c7ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800c7ee:	4e30      	ldr	r6, [pc, #192]	; (800c8b0 <create_vumeter_fwd_1+0xc4>)
 800c7f0:	4930      	ldr	r1, [pc, #192]	; (800c8b4 <create_vumeter_fwd_1+0xc8>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800c7f2:	4c31      	ldr	r4, [pc, #196]	; (800c8b8 <create_vumeter_fwd_1+0xcc>)
		bar_fwd[x] = lv_bar_create(Tela_Readings, NULL);
 800c7f4:	4f31      	ldr	r7, [pc, #196]	; (800c8bc <create_vumeter_fwd_1+0xd0>)
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800c7f6:	4630      	mov	r0, r6
 800c7f8:	f003 fa40 	bl	800fc7c <lv_style_copy>
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800c7fc:	4b30      	ldr	r3, [pc, #192]	; (800c8c0 <create_vumeter_fwd_1+0xd4>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800c7fe:	492d      	ldr	r1, [pc, #180]	; (800c8b4 <create_vumeter_fwd_1+0xc8>)
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800c800:	881b      	ldrh	r3, [r3, #0]
 800c802:	80b3      	strh	r3, [r6, #4]
	style_indic_bar.body.radius = 0;
 800c804:	2500      	movs	r5, #0
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800c806:	4620      	mov	r0, r4
	style_indic_bar.body.main_color = LV_COLOR_MAKE(105, 105, 105);
 800c808:	8073      	strh	r3, [r6, #2]
	style_indic_bar.body.border.color = LV_COLOR_MAKE(105, 105, 105);
 800c80a:	8173      	strh	r3, [r6, #10]
	style_indic_bar.body.radius = 0;
 800c80c:	80f5      	strh	r5, [r6, #6]
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800c80e:	f003 fa35 	bl	800fc7c <lv_style_copy>
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800c812:	7923      	ldrb	r3, [r4, #4]
	style_indic_bar_vd.body.radius = 0;
 800c814:	80e5      	strh	r5, [r4, #6]
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800c816:	f365 0304 	bfi	r3, r5, #0, #5
 800c81a:	7123      	strb	r3, [r4, #4]
 800c81c:	88a3      	ldrh	r3, [r4, #4]
 800c81e:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800c822:	80a3      	strh	r3, [r4, #4]
 800c824:	0a1b      	lsrs	r3, r3, #8
 800c826:	f365 03c7 	bfi	r3, r5, #3, #5
 800c82a:	7163      	strb	r3, [r4, #5]
	style_indic_bar_vd.body.main_color = LV_COLOR_MAKE(0, 255, 0);
 800c82c:	78a3      	ldrb	r3, [r4, #2]
 800c82e:	f365 0304 	bfi	r3, r5, #0, #5
 800c832:	70a3      	strb	r3, [r4, #2]
 800c834:	8863      	ldrh	r3, [r4, #2]
 800c836:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800c83a:	8063      	strh	r3, [r4, #2]
 800c83c:	0a1b      	lsrs	r3, r3, #8
 800c83e:	f365 03c7 	bfi	r3, r5, #3, #5
 800c842:	70e3      	strb	r3, [r4, #3]
	style_indic_bar_vd.body.border.color = LV_COLOR_MAKE(0, 255, 0);
 800c844:	7aa3      	ldrb	r3, [r4, #10]
 800c846:	f365 0304 	bfi	r3, r5, #0, #5
 800c84a:	72a3      	strb	r3, [r4, #10]
 800c84c:	8963      	ldrh	r3, [r4, #10]
 800c84e:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800c852:	8163      	strh	r3, [r4, #10]
 800c854:	0a1b      	lsrs	r3, r3, #8
 800c856:	f365 03c7 	bfi	r3, r5, #3, #5
 800c85a:	72e3      	strb	r3, [r4, #11]
 800c85c:	4c19      	ldr	r4, [pc, #100]	; (800c8c4 <create_vumeter_fwd_1+0xd8>)
		bar_fwd[x] = lv_bar_create(Tela_Readings, NULL);
 800c85e:	6838      	ldr	r0, [r7, #0]
 800c860:	2100      	movs	r1, #0
 800c862:	f008 faed 	bl	8014e40 <lv_bar_create>
		lv_obj_set_size(bar_fwd[x], 4, 14);
 800c866:	220e      	movs	r2, #14
		bar_fwd[x] = lv_bar_create(Tela_Readings, NULL);
 800c868:	6060      	str	r0, [r4, #4]
		lv_obj_set_size(bar_fwd[x], 4, 14);
 800c86a:	2104      	movs	r1, #4
 800c86c:	f002 fca8 	bl	800f1c0 <lv_obj_set_size>
		lv_bar_set_style(bar_fwd[x], LV_BAR_STYLE_BG, &style_indic_bar);
 800c870:	6860      	ldr	r0, [r4, #4]
 800c872:	4632      	mov	r2, r6
 800c874:	2100      	movs	r1, #0
 800c876:	f008 facd 	bl	8014e14 <lv_bar_set_style>
		lv_bar_set_style(bar_fwd[x], LV_BAR_STYLE_INDIC, &style_indic_bar);
 800c87a:	6860      	ldr	r0, [r4, #4]
 800c87c:	4632      	mov	r2, r6
 800c87e:	2101      	movs	r1, #1
 800c880:	f008 fac8 	bl	8014e14 <lv_bar_set_style>
		lv_obj_align(bar_fwd[x], NULL, LV_ALIGN_IN_TOP_LEFT, fwd1_pos_x[x], 56);
 800c884:	2238      	movs	r2, #56	; 0x38
 800c886:	4b10      	ldr	r3, [pc, #64]	; (800c8c8 <create_vumeter_fwd_1+0xdc>)
 800c888:	9200      	str	r2, [sp, #0]
 800c88a:	f933 3025 	ldrsh.w	r3, [r3, r5, lsl #2]
 800c88e:	6860      	ldr	r0, [r4, #4]
 800c890:	2201      	movs	r2, #1
 800c892:	2100      	movs	r1, #0
 800c894:	f002 f8f4 	bl	800ea80 <lv_obj_align>
 800c898:	3501      	adds	r5, #1
		lv_bar_set_value(bar_fwd[x], 100, 0);
 800c89a:	2200      	movs	r2, #0
 800c89c:	2164      	movs	r1, #100	; 0x64
 800c89e:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800c8a2:	f008 fa5b 	bl	8014d5c <lv_bar_set_value>
	for(uint8_t x = 0; x < 21; x++) {
 800c8a6:	2d15      	cmp	r5, #21
 800c8a8:	d1d9      	bne.n	800c85e <create_vumeter_fwd_1+0x72>
}
 800c8aa:	b003      	add	sp, #12
 800c8ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8ae:	bf00      	nop
 800c8b0:	20005a24 	.word	0x20005a24
 800c8b4:	2000c3b4 	.word	0x2000c3b4
 800c8b8:	20005a60 	.word	0x20005a60
 800c8bc:	2000596c 	.word	0x2000596c
 800c8c0:	0801c5d4 	.word	0x0801c5d4
 800c8c4:	2000596c 	.word	0x2000596c
 800c8c8:	0802b944 	.word	0x0802b944

0800c8cc <print_fwd_1>:
{
 800c8cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	lv_style_copy(&style_txt1, &lv_style_plain);
 800c8ce:	4c29      	ldr	r4, [pc, #164]	; (800c974 <print_fwd_1+0xa8>)
 800c8d0:	4929      	ldr	r1, [pc, #164]	; (800c978 <print_fwd_1+0xac>)
{
 800c8d2:	ed8d 0a03 	vstr	s0, [sp, #12]
	lv_style_copy(&style_txt1, &lv_style_plain);
 800c8d6:	4620      	mov	r0, r4
 800c8d8:	f003 f9d0 	bl	800fc7c <lv_style_copy>
	style_txt1.text.font = &lv_font_eurostile_24;
 800c8dc:	4b27      	ldr	r3, [pc, #156]	; (800c97c <print_fwd_1+0xb0>)
 800c8de:	6263      	str	r3, [r4, #36]	; 0x24
	style_txt1.text.color = LV_COLOR_CYAN;
 800c8e0:	f894 3020 	ldrb.w	r3, [r4, #32]
	txt_fwd = lv_label_create(Tela_Readings, NULL);
 800c8e4:	4d26      	ldr	r5, [pc, #152]	; (800c980 <print_fwd_1+0xb4>)
	style_txt1.text.color = LV_COLOR_CYAN;
 800c8e6:	f043 031f 	orr.w	r3, r3, #31
 800c8ea:	f884 3020 	strb.w	r3, [r4, #32]
 800c8ee:	8c23      	ldrh	r3, [r4, #32]
 800c8f0:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800c8f4:	8423      	strh	r3, [r4, #32]
 800c8f6:	0a1b      	lsrs	r3, r3, #8
 800c8f8:	f36f 03c7 	bfc	r3, #3, #5
 800c8fc:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	txt_fwd = lv_label_create(Tela_Readings, NULL);
 800c900:	4b20      	ldr	r3, [pc, #128]	; (800c984 <print_fwd_1+0xb8>)
	style_txt1.text.letter_space = 1;
 800c902:	2601      	movs	r6, #1
	txt_fwd = lv_label_create(Tela_Readings, NULL);
 800c904:	6818      	ldr	r0, [r3, #0]
	style_txt1.text.letter_space = 1;
 800c906:	8526      	strh	r6, [r4, #40]	; 0x28
	txt_fwd = lv_label_create(Tela_Readings, NULL);
 800c908:	2100      	movs	r1, #0
	style_txt1.text.line_space = 1;
 800c90a:	8566      	strh	r6, [r4, #42]	; 0x2a
	txt_fwd = lv_label_create(Tela_Readings, NULL);
 800c90c:	f00b f8aa 	bl	8017a64 <lv_label_create>
	lv_obj_set_style(txt_fwd, &style_txt1); 						// Configura o estilo criado
 800c910:	4621      	mov	r1, r4
	txt_fwd = lv_label_create(Tela_Readings, NULL);
 800c912:	6028      	str	r0, [r5, #0]
	lv_obj_set_style(txt_fwd, &style_txt1); 						// Configura o estilo criado
 800c914:	f002 fd56 	bl	800f3c4 <lv_obj_set_style>
	lv_label_set_long_mode(txt_fwd, LV_LABEL_LONG_EXPAND); 			// Quebra as linhas longas
 800c918:	6828      	ldr	r0, [r5, #0]
	sprintf(buffer, "%0.1fW", fwd);
 800c91a:	4c1b      	ldr	r4, [pc, #108]	; (800c988 <print_fwd_1+0xbc>)
	lv_label_set_long_mode(txt_fwd, LV_LABEL_LONG_EXPAND); 			// Quebra as linhas longas
 800c91c:	2100      	movs	r1, #0
 800c91e:	f00b f84b 	bl	80179b8 <lv_label_set_long_mode>
	lv_label_set_recolor(txt_fwd, true); 							// Ativa recolorizar por comandos no texto
 800c922:	4631      	mov	r1, r6
 800c924:	6828      	ldr	r0, [r5, #0]
 800c926:	f00b f889 	bl	8017a3c <lv_label_set_recolor>
	lv_label_set_align(txt_fwd, LV_ALIGN_IN_TOP_RIGHT); 			// Centraliza linhas alinhadas
 800c92a:	6828      	ldr	r0, [r5, #0]
 800c92c:	2103      	movs	r1, #3
 800c92e:	f00a fce2 	bl	80172f6 <lv_label_set_align>
	sprintf(buffer, "%0.1fW", fwd);
 800c932:	ed9d 0a03 	vldr	s0, [sp, #12]
 800c936:	ee10 0a10 	vmov	r0, s0
 800c93a:	f7f3 fe05 	bl	8000548 <__aeabi_f2d>
 800c93e:	4602      	mov	r2, r0
 800c940:	460b      	mov	r3, r1
 800c942:	4620      	mov	r0, r4
 800c944:	4911      	ldr	r1, [pc, #68]	; (800c98c <print_fwd_1+0xc0>)
 800c946:	f00d f8e9 	bl	8019b1c <sprintf>
	lv_label_set_text(txt_fwd, buffer);
 800c94a:	4621      	mov	r1, r4
 800c94c:	6828      	ldr	r0, [r5, #0]
 800c94e:	f00a ffdf 	bl	8017910 <lv_label_set_text>
	lv_obj_set_width(txt_fwd, 300); 								// Configuura o comprimento
 800c952:	6828      	ldr	r0, [r5, #0]
 800c954:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800c958:	f002 fc7c 	bl	800f254 <lv_obj_set_width>
	lv_obj_align(txt_fwd, NULL, LV_ALIGN_IN_TOP_RIGHT, -41, 33); 	// Alinha ao centro
 800c95c:	2321      	movs	r3, #33	; 0x21
 800c95e:	9300      	str	r3, [sp, #0]
 800c960:	2203      	movs	r2, #3
 800c962:	f06f 0328 	mvn.w	r3, #40	; 0x28
 800c966:	2100      	movs	r1, #0
 800c968:	6828      	ldr	r0, [r5, #0]
 800c96a:	f002 f889 	bl	800ea80 <lv_obj_align>
}
 800c96e:	b004      	add	sp, #16
 800c970:	bd70      	pop	{r4, r5, r6, pc}
 800c972:	bf00      	nop
 800c974:	20005a9c 	.word	0x20005a9c
 800c978:	2000c4a4 	.word	0x2000c4a4
 800c97c:	2000132c 	.word	0x2000132c
 800c980:	20005b14 	.word	0x20005b14
 800c984:	2000596c 	.word	0x2000596c
 800c988:	20004ce8 	.word	0x20004ce8
 800c98c:	0802b419 	.word	0x0802b419

0800c990 <print_swr_1>:
{
 800c990:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	lv_style_copy(&style_txt1, &lv_style_plain);
 800c992:	4c29      	ldr	r4, [pc, #164]	; (800ca38 <print_swr_1+0xa8>)
 800c994:	4929      	ldr	r1, [pc, #164]	; (800ca3c <print_swr_1+0xac>)
{
 800c996:	ed8d 0a03 	vstr	s0, [sp, #12]
	lv_style_copy(&style_txt1, &lv_style_plain);
 800c99a:	4620      	mov	r0, r4
 800c99c:	f003 f96e 	bl	800fc7c <lv_style_copy>
	style_txt1.text.font = &lv_font_eurostile_24;
 800c9a0:	4b27      	ldr	r3, [pc, #156]	; (800ca40 <print_swr_1+0xb0>)
 800c9a2:	6263      	str	r3, [r4, #36]	; 0x24
	style_txt1.text.color = LV_COLOR_CYAN;
 800c9a4:	f894 3020 	ldrb.w	r3, [r4, #32]
	txt_swr = lv_label_create(Tela_Readings, NULL);
 800c9a8:	4d26      	ldr	r5, [pc, #152]	; (800ca44 <print_swr_1+0xb4>)
	style_txt1.text.color = LV_COLOR_CYAN;
 800c9aa:	f043 031f 	orr.w	r3, r3, #31
 800c9ae:	f884 3020 	strb.w	r3, [r4, #32]
 800c9b2:	8c23      	ldrh	r3, [r4, #32]
 800c9b4:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800c9b8:	8423      	strh	r3, [r4, #32]
 800c9ba:	0a1b      	lsrs	r3, r3, #8
 800c9bc:	f36f 03c7 	bfc	r3, #3, #5
 800c9c0:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	txt_swr = lv_label_create(Tela_Readings, NULL);
 800c9c4:	4b20      	ldr	r3, [pc, #128]	; (800ca48 <print_swr_1+0xb8>)
	style_txt1.text.letter_space = 1;
 800c9c6:	2601      	movs	r6, #1
	txt_swr = lv_label_create(Tela_Readings, NULL);
 800c9c8:	6818      	ldr	r0, [r3, #0]
	style_txt1.text.letter_space = 1;
 800c9ca:	8526      	strh	r6, [r4, #40]	; 0x28
	txt_swr = lv_label_create(Tela_Readings, NULL);
 800c9cc:	2100      	movs	r1, #0
	style_txt1.text.line_space = 1;
 800c9ce:	8566      	strh	r6, [r4, #42]	; 0x2a
	txt_swr = lv_label_create(Tela_Readings, NULL);
 800c9d0:	f00b f848 	bl	8017a64 <lv_label_create>
	lv_obj_set_style(txt_swr, &style_txt1); 						// Configura o estilo criado
 800c9d4:	4621      	mov	r1, r4
	txt_swr = lv_label_create(Tela_Readings, NULL);
 800c9d6:	6028      	str	r0, [r5, #0]
	lv_obj_set_style(txt_swr, &style_txt1); 						// Configura o estilo criado
 800c9d8:	f002 fcf4 	bl	800f3c4 <lv_obj_set_style>
	lv_label_set_long_mode(txt_swr, LV_LABEL_LONG_EXPAND); 			// Quebra as linhas longas
 800c9dc:	6828      	ldr	r0, [r5, #0]
	sprintf(buffer, "%0.1fW", swr);
 800c9de:	4c1b      	ldr	r4, [pc, #108]	; (800ca4c <print_swr_1+0xbc>)
	lv_label_set_long_mode(txt_swr, LV_LABEL_LONG_EXPAND); 			// Quebra as linhas longas
 800c9e0:	2100      	movs	r1, #0
 800c9e2:	f00a ffe9 	bl	80179b8 <lv_label_set_long_mode>
	lv_label_set_recolor(txt_swr, true); 							// Ativa recolorizar por comandos no texto
 800c9e6:	4631      	mov	r1, r6
 800c9e8:	6828      	ldr	r0, [r5, #0]
 800c9ea:	f00b f827 	bl	8017a3c <lv_label_set_recolor>
	lv_label_set_align(txt_swr, LV_ALIGN_IN_TOP_RIGHT); 				// Centraliza linhas alinhadas
 800c9ee:	6828      	ldr	r0, [r5, #0]
 800c9f0:	2103      	movs	r1, #3
 800c9f2:	f00a fc80 	bl	80172f6 <lv_label_set_align>
	sprintf(buffer, "%0.1fW", swr);
 800c9f6:	ed9d 0a03 	vldr	s0, [sp, #12]
 800c9fa:	ee10 0a10 	vmov	r0, s0
 800c9fe:	f7f3 fda3 	bl	8000548 <__aeabi_f2d>
 800ca02:	4602      	mov	r2, r0
 800ca04:	460b      	mov	r3, r1
 800ca06:	4620      	mov	r0, r4
 800ca08:	4911      	ldr	r1, [pc, #68]	; (800ca50 <print_swr_1+0xc0>)
 800ca0a:	f00d f887 	bl	8019b1c <sprintf>
	lv_label_set_text(txt_swr, buffer);
 800ca0e:	4621      	mov	r1, r4
 800ca10:	6828      	ldr	r0, [r5, #0]
 800ca12:	f00a ff7d 	bl	8017910 <lv_label_set_text>
	lv_obj_set_width(txt_swr, 300); 								// Configuura o comprimento
 800ca16:	6828      	ldr	r0, [r5, #0]
 800ca18:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800ca1c:	f002 fc1a 	bl	800f254 <lv_obj_set_width>
	lv_obj_align(txt_swr, NULL, LV_ALIGN_IN_TOP_RIGHT, -41, 76); 	// Alinha ao centro
 800ca20:	234c      	movs	r3, #76	; 0x4c
 800ca22:	9300      	str	r3, [sp, #0]
 800ca24:	2203      	movs	r2, #3
 800ca26:	f06f 0328 	mvn.w	r3, #40	; 0x28
 800ca2a:	2100      	movs	r1, #0
 800ca2c:	6828      	ldr	r0, [r5, #0]
 800ca2e:	f002 f827 	bl	800ea80 <lv_obj_align>
}
 800ca32:	b004      	add	sp, #16
 800ca34:	bd70      	pop	{r4, r5, r6, pc}
 800ca36:	bf00      	nop
 800ca38:	20005ad8 	.word	0x20005ad8
 800ca3c:	2000c4a4 	.word	0x2000c4a4
 800ca40:	2000132c 	.word	0x2000132c
 800ca44:	20005b18 	.word	0x20005b18
 800ca48:	2000596c 	.word	0x2000596c
 800ca4c:	20004ce8 	.word	0x20004ce8
 800ca50:	0802b419 	.word	0x0802b419

0800ca54 <update_vumeter_swr_1>:
{
 800ca54:	b538      	push	{r3, r4, r5, lr}
		lv_bar_set_style(bar_swr[x], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800ca56:	4d0c      	ldr	r5, [pc, #48]	; (800ca88 <update_vumeter_swr_1+0x34>)
 800ca58:	4c0c      	ldr	r4, [pc, #48]	; (800ca8c <update_vumeter_swr_1+0x38>)
 800ca5a:	462a      	mov	r2, r5
 800ca5c:	6820      	ldr	r0, [r4, #0]
 800ca5e:	2100      	movs	r1, #0
 800ca60:	f008 f9d8 	bl	8014e14 <lv_bar_set_style>
		lv_bar_set_style(bar_swr[x], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
 800ca64:	462a      	mov	r2, r5
 800ca66:	6820      	ldr	r0, [r4, #0]
 800ca68:	2101      	movs	r1, #1
 800ca6a:	f008 f9d3 	bl	8014e14 <lv_bar_set_style>
		lv_bar_set_style(bar_swr[x], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800ca6e:	462a      	mov	r2, r5
 800ca70:	6860      	ldr	r0, [r4, #4]
 800ca72:	2100      	movs	r1, #0
 800ca74:	f008 f9ce 	bl	8014e14 <lv_bar_set_style>
		lv_bar_set_style(bar_swr[x], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
 800ca78:	462a      	mov	r2, r5
 800ca7a:	6860      	ldr	r0, [r4, #4]
 800ca7c:	2101      	movs	r1, #1
}
 800ca7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		lv_bar_set_style(bar_swr[x], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
 800ca82:	f008 b9c7 	b.w	8014e14 <lv_bar_set_style>
 800ca86:	bf00      	nop
 800ca88:	20005a60 	.word	0x20005a60
 800ca8c:	200059c4 	.word	0x200059c4

0800ca90 <update_vumeter_fwd_1>:
{
 800ca90:	b570      	push	{r4, r5, r6, lr}
		lv_bar_set_style(bar_fwd[x], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800ca92:	4d09      	ldr	r5, [pc, #36]	; (800cab8 <update_vumeter_fwd_1+0x28>)
 800ca94:	4e09      	ldr	r6, [pc, #36]	; (800cabc <update_vumeter_fwd_1+0x2c>)
	for(x = 0; x <= resul; x++) {
 800ca96:	2400      	movs	r4, #0
		lv_bar_set_style(bar_fwd[x], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800ca98:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800ca9c:	4632      	mov	r2, r6
 800ca9e:	2100      	movs	r1, #0
 800caa0:	f008 f9b8 	bl	8014e14 <lv_bar_set_style>
		lv_bar_set_style(bar_fwd[x], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
 800caa4:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800caa8:	4632      	mov	r2, r6
 800caaa:	2101      	movs	r1, #1
	for(x = 0; x <= resul; x++) {
 800caac:	3401      	adds	r4, #1
		lv_bar_set_style(bar_fwd[x], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
 800caae:	f008 f9b1 	bl	8014e14 <lv_bar_set_style>
	for(x = 0; x <= resul; x++) {
 800cab2:	2c14      	cmp	r4, #20
 800cab4:	d1f0      	bne.n	800ca98 <update_vumeter_fwd_1+0x8>
}
 800cab6:	bd70      	pop	{r4, r5, r6, pc}
 800cab8:	20005970 	.word	0x20005970
 800cabc:	20005a60 	.word	0x20005a60

0800cac0 <update_reading>:
	}
}


static void update_reading(lv_task_t * param)
{
 800cac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// Potencia Direta
	sprintf(buffer, "%0.1fW", forward);
 800cac2:	4e15      	ldr	r6, [pc, #84]	; (800cb18 <update_reading+0x58>)
 800cac4:	4c15      	ldr	r4, [pc, #84]	; (800cb1c <update_reading+0x5c>)
 800cac6:	6830      	ldr	r0, [r6, #0]
 800cac8:	4f15      	ldr	r7, [pc, #84]	; (800cb20 <update_reading+0x60>)
	lv_label_set_text(txt_fwd, buffer);
	// Refletida
	sprintf(buffer, "%0.1fW", reflected);
 800caca:	4d16      	ldr	r5, [pc, #88]	; (800cb24 <update_reading+0x64>)
	sprintf(buffer, "%0.1fW", forward);
 800cacc:	f7f3 fd3c 	bl	8000548 <__aeabi_f2d>
 800cad0:	4602      	mov	r2, r0
 800cad2:	460b      	mov	r3, r1
 800cad4:	4620      	mov	r0, r4
 800cad6:	4639      	mov	r1, r7
 800cad8:	f00d f820 	bl	8019b1c <sprintf>
	lv_label_set_text(txt_fwd, buffer);
 800cadc:	4b12      	ldr	r3, [pc, #72]	; (800cb28 <update_reading+0x68>)
 800cade:	4621      	mov	r1, r4
 800cae0:	6818      	ldr	r0, [r3, #0]
 800cae2:	f00a ff15 	bl	8017910 <lv_label_set_text>
	sprintf(buffer, "%0.1fW", reflected);
 800cae6:	6828      	ldr	r0, [r5, #0]
 800cae8:	f7f3 fd2e 	bl	8000548 <__aeabi_f2d>
 800caec:	4602      	mov	r2, r0
 800caee:	460b      	mov	r3, r1
 800caf0:	4620      	mov	r0, r4
 800caf2:	4639      	mov	r1, r7
 800caf4:	f00d f812 	bl	8019b1c <sprintf>
	lv_label_set_text(txt_swr, buffer);
 800caf8:	4b0c      	ldr	r3, [pc, #48]	; (800cb2c <update_reading+0x6c>)
 800cafa:	4621      	mov	r1, r4
 800cafc:	6818      	ldr	r0, [r3, #0]
 800cafe:	f00a ff07 	bl	8017910 <lv_label_set_text>
	// Update Vu-Meter FWD
	update_vumeter_fwd_1(forward);
 800cb02:	ed96 0a00 	vldr	s0, [r6]
 800cb06:	f7ff ffc3 	bl	800ca90 <update_vumeter_fwd_1>
	// Update Vu-Meter REF
	update_vumeter_swr_1(reflected);
 800cb0a:	ed95 0a00 	vldr	s0, [r5]
}
 800cb0e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	update_vumeter_swr_1(reflected);
 800cb12:	f7ff bf9f 	b.w	800ca54 <update_vumeter_swr_1>
 800cb16:	bf00      	nop
 800cb18:	20004dd0 	.word	0x20004dd0
 800cb1c:	20004ce8 	.word	0x20004ce8
 800cb20:	0802b419 	.word	0x0802b419
 800cb24:	20004ddc 	.word	0x20004ddc
 800cb28:	20005b14 	.word	0x20005b14
 800cb2c:	20005b18 	.word	0x20005b18

0800cb30 <btn_next_r>:
{
 800cb30:	b538      	push	{r3, r4, r5, lr}
	imgbtn_next = lv_imgbtn_create(Tela_Readings, NULL);
 800cb32:	4b15      	ldr	r3, [pc, #84]	; (800cb88 <btn_next_r+0x58>)
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_REL, &Btn_next);
 800cb34:	4d15      	ldr	r5, [pc, #84]	; (800cb8c <btn_next_r+0x5c>)
	imgbtn_next = lv_imgbtn_create(Tela_Readings, NULL);
 800cb36:	6818      	ldr	r0, [r3, #0]
 800cb38:	4c15      	ldr	r4, [pc, #84]	; (800cb90 <btn_next_r+0x60>)
 800cb3a:	2100      	movs	r1, #0
 800cb3c:	f00a f9ee 	bl	8016f1c <lv_imgbtn_create>
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_REL, &Btn_next);
 800cb40:	462a      	mov	r2, r5
 800cb42:	2100      	movs	r1, #0
	imgbtn_next = lv_imgbtn_create(Tela_Readings, NULL);
 800cb44:	6020      	str	r0, [r4, #0]
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_REL, &Btn_next);
 800cb46:	f00a fa31 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_TGL_REL, &Btn_next);
 800cb4a:	462a      	mov	r2, r5
 800cb4c:	6820      	ldr	r0, [r4, #0]
 800cb4e:	2102      	movs	r1, #2
 800cb50:	f00a fa2c 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_TGL_PR, &Btn_next);
 800cb54:	462a      	mov	r2, r5
 800cb56:	6820      	ldr	r0, [r4, #0]
 800cb58:	2103      	movs	r1, #3
 800cb5a:	f00a fa27 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_PR, &Btn_next);
 800cb5e:	462a      	mov	r2, r5
 800cb60:	6820      	ldr	r0, [r4, #0]
 800cb62:	2101      	movs	r1, #1
 800cb64:	f00a fa22 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next, LV_BTN_STATE_INA, &Btn_next);
 800cb68:	462a      	mov	r2, r5
 800cb6a:	6820      	ldr	r0, [r4, #0]
 800cb6c:	2104      	movs	r1, #4
 800cb6e:	f00a fa1d 	bl	8016fac <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn_next, btn_event_next_r);
 800cb72:	6820      	ldr	r0, [r4, #0]
 800cb74:	4907      	ldr	r1, [pc, #28]	; (800cb94 <btn_next_r+0x64>)
 800cb76:	f001 fde4 	bl	800e742 <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn_next, 112, 18);
 800cb7a:	6820      	ldr	r0, [r4, #0]
 800cb7c:	2212      	movs	r2, #18
 800cb7e:	2170      	movs	r1, #112	; 0x70
}
 800cb80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lv_obj_set_pos(imgbtn_next, 112, 18);
 800cb84:	f001 bf27 	b.w	800e9d6 <lv_obj_set_pos>
 800cb88:	2000596c 	.word	0x2000596c
 800cb8c:	20001ad8 	.word	0x20001ad8
 800cb90:	20005a1c 	.word	0x20005a1c
 800cb94:	0800c6e5 	.word	0x0800c6e5

0800cb98 <screen_readings>:
	Tela_Readings = lv_obj_create(NULL, NULL);
 800cb98:	2100      	movs	r1, #0
{
 800cb9a:	b570      	push	{r4, r5, r6, lr}
	Tela_Readings = lv_obj_create(NULL, NULL);
 800cb9c:	4608      	mov	r0, r1
 800cb9e:	f002 f991 	bl	800eec4 <lv_obj_create>
 800cba2:	4e21      	ldr	r6, [pc, #132]	; (800cc28 <screen_readings+0x90>)
	img_fundo = lv_img_create(Tela_Readings, NULL);
 800cba4:	4c21      	ldr	r4, [pc, #132]	; (800cc2c <screen_readings+0x94>)
	Tela_Readings = lv_obj_create(NULL, NULL);
 800cba6:	6030      	str	r0, [r6, #0]
	img_fundo = lv_img_create(Tela_Readings, NULL);
 800cba8:	2100      	movs	r1, #0
 800cbaa:	f00a f88d 	bl	8016cc8 <lv_img_create>
	lv_img_set_src(img_fundo, &tela_reading_rf);
 800cbae:	4920      	ldr	r1, [pc, #128]	; (800cc30 <screen_readings+0x98>)
	img_fundo = lv_img_create(Tela_Readings, NULL);
 800cbb0:	6020      	str	r0, [r4, #0]
	lv_img_set_src(img_fundo, &tela_reading_rf);
 800cbb2:	f009 fff9 	bl	8016ba8 <lv_img_set_src>
	lv_obj_set_protect(img_fundo, LV_PROTECT_POS);
 800cbb6:	6820      	ldr	r0, [r4, #0]
	forward = 15.0f;
 800cbb8:	4d1e      	ldr	r5, [pc, #120]	; (800cc34 <screen_readings+0x9c>)
	lv_obj_set_protect(img_fundo, LV_PROTECT_POS);
 800cbba:	2104      	movs	r1, #4
 800cbbc:	f001 fdb4 	bl	800e728 <lv_obj_set_protect>
	lv_obj_set_event_cb(img_fundo, btn_event_esc_r);
 800cbc0:	6820      	ldr	r0, [r4, #0]
 800cbc2:	491d      	ldr	r1, [pc, #116]	; (800cc38 <screen_readings+0xa0>)
 800cbc4:	f001 fdbd 	bl	800e742 <lv_obj_set_event_cb>
	lv_obj_set_click(img_fundo, 1);
 800cbc8:	2101      	movs	r1, #1
 800cbca:	6820      	ldr	r0, [r4, #0]
	reflected = 1.2f;
 800cbcc:	4c1b      	ldr	r4, [pc, #108]	; (800cc3c <screen_readings+0xa4>)
	lv_obj_set_click(img_fundo, 1);
 800cbce:	f001 fd8f 	bl	800e6f0 <lv_obj_set_click>
	forward = 15.0f;
 800cbd2:	4b1b      	ldr	r3, [pc, #108]	; (800cc40 <screen_readings+0xa8>)
 800cbd4:	602b      	str	r3, [r5, #0]
	reflected = 1.2f;
 800cbd6:	4b1b      	ldr	r3, [pc, #108]	; (800cc44 <screen_readings+0xac>)
 800cbd8:	6023      	str	r3, [r4, #0]
	create_vumeter_swr_1();
 800cbda:	f7ff fd97 	bl	800c70c <create_vumeter_swr_1>
	create_vumeter_fwd_1();
 800cbde:	f7ff fe05 	bl	800c7ec <create_vumeter_fwd_1>
	print_fwd_1(forward);
 800cbe2:	ed95 0a00 	vldr	s0, [r5]
 800cbe6:	f7ff fe71 	bl	800c8cc <print_fwd_1>
	print_swr_1(reflected);
 800cbea:	ed94 0a00 	vldr	s0, [r4]
 800cbee:	f7ff fecf 	bl	800c990 <print_swr_1>
	update_vumeter_swr_1(forward);
 800cbf2:	ed95 0a00 	vldr	s0, [r5]
 800cbf6:	f7ff ff2d 	bl	800ca54 <update_vumeter_swr_1>
	update_vumeter_fwd_1(reflected);
 800cbfa:	ed94 0a00 	vldr	s0, [r4]
 800cbfe:	f7ff ff47 	bl	800ca90 <update_vumeter_fwd_1>
	btn_next_r();
 800cc02:	f7ff ff95 	bl	800cb30 <btn_next_r>
 800cc06:	6830      	ldr	r0, [r6, #0]
 800cc08:	f001 fb48 	bl	800e29c <lv_disp_load_scr>
	Task_Readings = lv_task_create(update_reading, 500, LV_TASK_PRIO_MID, NULL);
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	2203      	movs	r2, #3
 800cc10:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800cc14:	480c      	ldr	r0, [pc, #48]	; (800cc48 <screen_readings+0xb0>)
 800cc16:	f007 fdfd 	bl	8014814 <lv_task_create>
 800cc1a:	4b0c      	ldr	r3, [pc, #48]	; (800cc4c <screen_readings+0xb4>)
 800cc1c:	6018      	str	r0, [r3, #0]
	TelaAtiva = TelaReadings;
 800cc1e:	4b0c      	ldr	r3, [pc, #48]	; (800cc50 <screen_readings+0xb8>)
 800cc20:	2209      	movs	r2, #9
 800cc22:	601a      	str	r2, [r3, #0]
 800cc24:	bd70      	pop	{r4, r5, r6, pc}
 800cc26:	bf00      	nop
 800cc28:	2000596c 	.word	0x2000596c
 800cc2c:	20005a18 	.word	0x20005a18
 800cc30:	20001bd4 	.word	0x20001bd4
 800cc34:	20004dd0 	.word	0x20004dd0
 800cc38:	0800c6bd 	.word	0x0800c6bd
 800cc3c:	20004ddc 	.word	0x20004ddc
 800cc40:	41700000 	.word	0x41700000
 800cc44:	3f99999a 	.word	0x3f99999a
 800cc48:	0800cac1 	.word	0x0800cac1
 800cc4c:	20005968 	.word	0x20005968
 800cc50:	200033e4 	.word	0x200033e4

0800cc54 <ButtonEventTelaReadings>:

void ButtonEventTelaReadings(uint8_t event, uint8_t tipo, uint8_t id)
{
	if(event == EVT_PBTN_INPUT) {
 800cc54:	2810      	cmp	r0, #16
 800cc56:	d10e      	bne.n	800cc76 <ButtonEventTelaReadings+0x22>
		if(tipo == PBTN_SCLK) {	// Single Click
 800cc58:	2901      	cmp	r1, #1
 800cc5a:	d10c      	bne.n	800cc76 <ButtonEventTelaReadings+0x22>
			switch(id) {
 800cc5c:	b112      	cbz	r2, 800cc64 <ButtonEventTelaReadings+0x10>
 800cc5e:	2a01      	cmp	r2, #1
 800cc60:	d005      	beq.n	800cc6e <ButtonEventTelaReadings+0x1a>
 800cc62:	4770      	bx	lr
				case KEY_DN:
					lv_event_send(imgbtn_prev, LV_EVENT_APPLY, NULL);
 800cc64:	4b04      	ldr	r3, [pc, #16]	; (800cc78 <ButtonEventTelaReadings+0x24>)
 800cc66:	2111      	movs	r1, #17
					break;
				case KEY_UP:
					lv_event_send(imgbtn_next, LV_EVENT_APPLY, NULL);
 800cc68:	6818      	ldr	r0, [r3, #0]
 800cc6a:	f001 bdb1 	b.w	800e7d0 <lv_event_send>
 800cc6e:	2200      	movs	r2, #0
 800cc70:	2111      	movs	r1, #17
 800cc72:	4b02      	ldr	r3, [pc, #8]	; (800cc7c <ButtonEventTelaReadings+0x28>)
 800cc74:	e7f8      	b.n	800cc68 <ButtonEventTelaReadings+0x14>
 800cc76:	4770      	bx	lr
 800cc78:	20005a20 	.word	0x20005a20
 800cc7c:	20005a1c 	.word	0x20005a1c

0800cc80 <btn_event_esc_rf>:
	lv_obj_set_pos(imgbtn1, 143, 2);
}

static void btn_event_esc_rf(lv_obj_t * btn, lv_event_t event)
{
	if(event == LV_EVENT_APPLY) {
 800cc80:	2911      	cmp	r1, #17
{
 800cc82:	b508      	push	{r3, lr}
	if(event == LV_EVENT_APPLY) {
 800cc84:	d10b      	bne.n	800cc9e <btn_event_esc_rf+0x1e>
		//printf("TELA RF - Button ESC Released\n");
		lv_task_del(Task_RF);
 800cc86:	4b06      	ldr	r3, [pc, #24]	; (800cca0 <btn_event_esc_rf+0x20>)
 800cc88:	6818      	ldr	r0, [r3, #0]
 800cc8a:	f007 fcd3 	bl	8014634 <lv_task_del>
		lv_obj_del(Tela_RF);
 800cc8e:	4b05      	ldr	r3, [pc, #20]	; (800cca4 <btn_event_esc_rf+0x24>)
 800cc90:	6818      	ldr	r0, [r3, #0]
 800cc92:	f002 fb08 	bl	800f2a6 <lv_obj_del>
		screen_sel();
	}
}
 800cc96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_sel();
 800cc9a:	f000 bfb1 	b.w	800dc00 <screen_sel>
 800cc9e:	bd08      	pop	{r3, pc}
 800cca0:	20005b1c 	.word	0x20005b1c
 800cca4:	20005b24 	.word	0x20005b24

0800cca8 <btn_power>:
}


static void btn_power(lv_obj_t * btn, lv_event_t event)
{
	if(event == LV_EVENT_RELEASED) {
 800cca8:	2907      	cmp	r1, #7
{
 800ccaa:	b510      	push	{r4, lr}
	if(event == LV_EVENT_RELEASED) {
 800ccac:	d10e      	bne.n	800cccc <btn_power+0x24>
		uint32_t id = lv_obj_get_user_data(btn);
 800ccae:	f002 fca4 	bl	800f5fa <lv_obj_get_user_data>
		//printf("Button Power %d Released\n" , id);
		if(id == 0) {
 800ccb2:	b960      	cbnz	r0, 800ccce <btn_power+0x26>
			lv_btn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_REL);
 800ccb4:	4c0c      	ldr	r4, [pc, #48]	; (800cce8 <btn_power+0x40>)
 800ccb6:	2102      	movs	r1, #2
 800ccb8:	6820      	ldr	r0, [r4, #0]
 800ccba:	f008 faa3 	bl	8015204 <lv_btn_set_state>
			lv_btn_set_state(imgbtn1[1], LV_BTN_STATE_TGL_PR);
 800ccbe:	2103      	movs	r1, #3
 800ccc0:	6860      	ldr	r0, [r4, #4]
 800ccc2:	f008 fa9f 	bl	8015204 <lv_btn_set_state>
			RFEnable = 1;
 800ccc6:	2201      	movs	r2, #1
		}
		else if(id == 1) {
			lv_btn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_PR);
			lv_btn_set_state(imgbtn1[1], LV_BTN_STATE_TGL_REL);
			RFEnable = 0;
 800ccc8:	4b08      	ldr	r3, [pc, #32]	; (800ccec <btn_power+0x44>)
 800ccca:	701a      	strb	r2, [r3, #0]
 800cccc:	bd10      	pop	{r4, pc}
		else if(id == 1) {
 800ccce:	2801      	cmp	r0, #1
 800ccd0:	d1fc      	bne.n	800cccc <btn_power+0x24>
			lv_btn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_PR);
 800ccd2:	4c05      	ldr	r4, [pc, #20]	; (800cce8 <btn_power+0x40>)
 800ccd4:	2103      	movs	r1, #3
 800ccd6:	6820      	ldr	r0, [r4, #0]
 800ccd8:	f008 fa94 	bl	8015204 <lv_btn_set_state>
			lv_btn_set_state(imgbtn1[1], LV_BTN_STATE_TGL_REL);
 800ccdc:	2102      	movs	r1, #2
 800ccde:	6860      	ldr	r0, [r4, #4]
 800cce0:	f008 fa90 	bl	8015204 <lv_btn_set_state>
			RFEnable = 0;
 800cce4:	2200      	movs	r2, #0
 800cce6:	e7ef      	b.n	800ccc8 <btn_power+0x20>
 800cce8:	20005c04 	.word	0x20005c04
 800ccec:	20000001 	.word	0x20000001

0800ccf0 <event_handler_swr>:
    lv_obj_set_event_cb(rollerswr[1], event_handler_swr);
}


static void event_handler_swr(lv_obj_t * obj, lv_event_t event)
{
 800ccf0:	b510      	push	{r4, lr}
    if(event == LV_EVENT_CLICKED) {
 800ccf2:	2906      	cmp	r1, #6
{
 800ccf4:	b08a      	sub	sp, #40	; 0x28
 800ccf6:	4604      	mov	r4, r0
    if(event == LV_EVENT_CLICKED) {
 800ccf8:	d126      	bne.n	800cd48 <event_handler_swr+0x58>
        char buf[32];
        char out[6];

        uint32_t id = lv_obj_get_user_data(obj);
 800ccfa:	f002 fc7e 	bl	800f5fa <lv_obj_get_user_data>
    lv_ddlist_get_selected_str(roller, buf, buf_size);
 800ccfe:	4620      	mov	r0, r4

        lv_roller_get_selected_str(obj, buf, sizeof(buf));

        lv_roller_get_selected_str(rollerswr[0], buf, sizeof(buf));
 800cd00:	4c12      	ldr	r4, [pc, #72]	; (800cd4c <event_handler_swr+0x5c>)
 800cd02:	2220      	movs	r2, #32
 800cd04:	a902      	add	r1, sp, #8
 800cd06:	f009 fcf4 	bl	80166f2 <lv_ddlist_get_selected_str>
 800cd0a:	2220      	movs	r2, #32
 800cd0c:	a902      	add	r1, sp, #8
 800cd0e:	6820      	ldr	r0, [r4, #0]
 800cd10:	f009 fcef 	bl	80166f2 <lv_ddlist_get_selected_str>
        out[0] = buf[0];
 800cd14:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800cd18:	6860      	ldr	r0, [r4, #4]
 800cd1a:	f88d 3000 	strb.w	r3, [sp]
 800cd1e:	2220      	movs	r2, #32
 800cd20:	a902      	add	r1, sp, #8
 800cd22:	f009 fce6 	bl	80166f2 <lv_ddlist_get_selected_str>
        lv_roller_get_selected_str(rollerswr[1], buf, sizeof(buf));
        out[1] = buf[0];
 800cd26:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800cd2a:	f88d 3001 	strb.w	r3, [sp, #1]
        out[5] = 0;

        max_rfl = atoi(out);
 800cd2e:	4668      	mov	r0, sp
        out[5] = 0;
 800cd30:	2300      	movs	r3, #0
 800cd32:	f88d 3005 	strb.w	r3, [sp, #5]
        max_rfl = atoi(out);
 800cd36:	f00c fc58 	bl	80195ea <atoi>
 800cd3a:	ee07 0a90 	vmov	s15, r0
 800cd3e:	4b04      	ldr	r3, [pc, #16]	; (800cd50 <event_handler_swr+0x60>)
 800cd40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cd44:	edc3 7a00 	vstr	s15, [r3]
       // printf("Selected Roller: %d Digit: %s  MAX_RFL: %0.1fW\n", id, buf, max_rfl);
    }
}
 800cd48:	b00a      	add	sp, #40	; 0x28
 800cd4a:	bd10      	pop	{r4, pc}
 800cd4c:	20005c14 	.word	0x20005c14
 800cd50:	20000008 	.word	0x20000008

0800cd54 <event_handler_target>:
    lv_obj_set_event_cb(rollertarget[1], event_handler_target);
}


static void event_handler_target(lv_obj_t * obj, lv_event_t event)
{
 800cd54:	b510      	push	{r4, lr}
    if(event == LV_EVENT_CLICKED) {
 800cd56:	2906      	cmp	r1, #6
{
 800cd58:	b08a      	sub	sp, #40	; 0x28
 800cd5a:	4604      	mov	r4, r0
    if(event == LV_EVENT_CLICKED) {
 800cd5c:	d126      	bne.n	800cdac <event_handler_target+0x58>
        char buf[32];
        char out[6];

        uint32_t id = lv_obj_get_user_data(obj);
 800cd5e:	f002 fc4c 	bl	800f5fa <lv_obj_get_user_data>
 800cd62:	4620      	mov	r0, r4

        lv_roller_get_selected_str(obj, buf, sizeof(buf));


        lv_roller_get_selected_str(rollerswr[0], buf, sizeof(buf));
 800cd64:	4c12      	ldr	r4, [pc, #72]	; (800cdb0 <event_handler_target+0x5c>)
 800cd66:	2220      	movs	r2, #32
 800cd68:	a902      	add	r1, sp, #8
 800cd6a:	f009 fcc2 	bl	80166f2 <lv_ddlist_get_selected_str>
 800cd6e:	2220      	movs	r2, #32
 800cd70:	a902      	add	r1, sp, #8
 800cd72:	6820      	ldr	r0, [r4, #0]
 800cd74:	f009 fcbd 	bl	80166f2 <lv_ddlist_get_selected_str>
        out[0] = buf[0];
 800cd78:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800cd7c:	6860      	ldr	r0, [r4, #4]
 800cd7e:	f88d 3000 	strb.w	r3, [sp]
 800cd82:	2220      	movs	r2, #32
 800cd84:	a902      	add	r1, sp, #8
 800cd86:	f009 fcb4 	bl	80166f2 <lv_ddlist_get_selected_str>
        lv_roller_get_selected_str(rollerswr[1], buf, sizeof(buf));
        out[1] = buf[0];
 800cd8a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800cd8e:	f88d 3001 	strb.w	r3, [sp, #1]
        out[5] = 0;

        target = (float)atoi(out);
 800cd92:	4668      	mov	r0, sp
        out[5] = 0;
 800cd94:	2300      	movs	r3, #0
 800cd96:	f88d 3005 	strb.w	r3, [sp, #5]
        target = (float)atoi(out);
 800cd9a:	f00c fc26 	bl	80195ea <atoi>
 800cd9e:	ee07 0a90 	vmov	s15, r0
 800cda2:	4b04      	ldr	r3, [pc, #16]	; (800cdb4 <event_handler_target+0x60>)
 800cda4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cda8:	edc3 7a00 	vstr	s15, [r3]
        //printf("Selected Roller: %d Digit: %s  TARGET: %0.1fW\n", id, buf, target);
    }
}
 800cdac:	b00a      	add	sp, #40	; 0x28
 800cdae:	bd10      	pop	{r4, pc}
 800cdb0:	20005c14 	.word	0x20005c14
 800cdb4:	20000010 	.word	0x20000010

0800cdb8 <create_vumeter_swr>:
{
 800cdb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800cdba:	4e30      	ldr	r6, [pc, #192]	; (800ce7c <create_vumeter_swr+0xc4>)
 800cdbc:	4930      	ldr	r1, [pc, #192]	; (800ce80 <create_vumeter_swr+0xc8>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800cdbe:	4c31      	ldr	r4, [pc, #196]	; (800ce84 <create_vumeter_swr+0xcc>)
		bar_swr[x] = lv_bar_create(Tela_RF, NULL);
 800cdc0:	4f31      	ldr	r7, [pc, #196]	; (800ce88 <create_vumeter_swr+0xd0>)
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800cdc2:	4630      	mov	r0, r6
 800cdc4:	f002 ff5a 	bl	800fc7c <lv_style_copy>
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800cdc8:	4b30      	ldr	r3, [pc, #192]	; (800ce8c <create_vumeter_swr+0xd4>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800cdca:	492d      	ldr	r1, [pc, #180]	; (800ce80 <create_vumeter_swr+0xc8>)
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800cdcc:	881b      	ldrh	r3, [r3, #0]
 800cdce:	80b3      	strh	r3, [r6, #4]
	style_indic_bar.body.radius = 0;
 800cdd0:	2500      	movs	r5, #0
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800cdd2:	4620      	mov	r0, r4
	style_indic_bar.body.main_color = LV_COLOR_MAKE(105, 105, 105);
 800cdd4:	8073      	strh	r3, [r6, #2]
	style_indic_bar.body.border.color = LV_COLOR_MAKE(105, 105, 105);
 800cdd6:	8173      	strh	r3, [r6, #10]
	style_indic_bar.body.radius = 0;
 800cdd8:	80f5      	strh	r5, [r6, #6]
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800cdda:	f002 ff4f 	bl	800fc7c <lv_style_copy>
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800cdde:	7923      	ldrb	r3, [r4, #4]
	style_indic_bar_vd.body.radius = 0;
 800cde0:	80e5      	strh	r5, [r4, #6]
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800cde2:	f365 0304 	bfi	r3, r5, #0, #5
 800cde6:	7123      	strb	r3, [r4, #4]
 800cde8:	88a3      	ldrh	r3, [r4, #4]
 800cdea:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800cdee:	80a3      	strh	r3, [r4, #4]
 800cdf0:	0a1b      	lsrs	r3, r3, #8
 800cdf2:	f365 03c7 	bfi	r3, r5, #3, #5
 800cdf6:	7163      	strb	r3, [r4, #5]
	style_indic_bar_vd.body.main_color = LV_COLOR_MAKE(0, 255, 0);
 800cdf8:	78a3      	ldrb	r3, [r4, #2]
 800cdfa:	f365 0304 	bfi	r3, r5, #0, #5
 800cdfe:	70a3      	strb	r3, [r4, #2]
 800ce00:	8863      	ldrh	r3, [r4, #2]
 800ce02:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800ce06:	8063      	strh	r3, [r4, #2]
 800ce08:	0a1b      	lsrs	r3, r3, #8
 800ce0a:	f365 03c7 	bfi	r3, r5, #3, #5
 800ce0e:	70e3      	strb	r3, [r4, #3]
	style_indic_bar_vd.body.border.color = LV_COLOR_MAKE(0, 255, 0);
 800ce10:	7aa3      	ldrb	r3, [r4, #10]
 800ce12:	f365 0304 	bfi	r3, r5, #0, #5
 800ce16:	72a3      	strb	r3, [r4, #10]
 800ce18:	8963      	ldrh	r3, [r4, #10]
 800ce1a:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800ce1e:	8163      	strh	r3, [r4, #10]
 800ce20:	0a1b      	lsrs	r3, r3, #8
 800ce22:	f365 03c7 	bfi	r3, r5, #3, #5
 800ce26:	72e3      	strb	r3, [r4, #11]
 800ce28:	4c19      	ldr	r4, [pc, #100]	; (800ce90 <create_vumeter_swr+0xd8>)
		bar_swr[x] = lv_bar_create(Tela_RF, NULL);
 800ce2a:	6838      	ldr	r0, [r7, #0]
 800ce2c:	2100      	movs	r1, #0
 800ce2e:	f008 f807 	bl	8014e40 <lv_bar_create>
		lv_obj_set_size(bar_swr[x], 4, 18);
 800ce32:	2212      	movs	r2, #18
		bar_swr[x] = lv_bar_create(Tela_RF, NULL);
 800ce34:	6060      	str	r0, [r4, #4]
		lv_obj_set_size(bar_swr[x], 4, 18);
 800ce36:	2104      	movs	r1, #4
 800ce38:	f002 f9c2 	bl	800f1c0 <lv_obj_set_size>
		lv_bar_set_style(bar_swr[x], LV_BAR_STYLE_BG, &style_indic_bar);
 800ce3c:	6860      	ldr	r0, [r4, #4]
 800ce3e:	4632      	mov	r2, r6
 800ce40:	2100      	movs	r1, #0
 800ce42:	f007 ffe7 	bl	8014e14 <lv_bar_set_style>
		lv_bar_set_style(bar_swr[x], LV_BAR_STYLE_INDIC, &style_indic_bar);
 800ce46:	6860      	ldr	r0, [r4, #4]
 800ce48:	4632      	mov	r2, r6
 800ce4a:	2101      	movs	r1, #1
 800ce4c:	f007 ffe2 	bl	8014e14 <lv_bar_set_style>
		lv_obj_align(bar_swr[x], NULL, LV_ALIGN_IN_TOP_LEFT, swr_pos_x[x], 86);
 800ce50:	2256      	movs	r2, #86	; 0x56
 800ce52:	4b10      	ldr	r3, [pc, #64]	; (800ce94 <create_vumeter_swr+0xdc>)
 800ce54:	9200      	str	r2, [sp, #0]
 800ce56:	f933 3025 	ldrsh.w	r3, [r3, r5, lsl #2]
 800ce5a:	6860      	ldr	r0, [r4, #4]
 800ce5c:	2201      	movs	r2, #1
 800ce5e:	2100      	movs	r1, #0
 800ce60:	f001 fe0e 	bl	800ea80 <lv_obj_align>
 800ce64:	3501      	adds	r5, #1
		lv_bar_set_value(bar_swr[x], 100, 0);
 800ce66:	2200      	movs	r2, #0
 800ce68:	2164      	movs	r1, #100	; 0x64
 800ce6a:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800ce6e:	f007 ff75 	bl	8014d5c <lv_bar_set_value>
	for(uint8_t x = 0; x < 20; x++) {
 800ce72:	2d14      	cmp	r5, #20
 800ce74:	d1d9      	bne.n	800ce2a <create_vumeter_swr+0x72>
}
 800ce76:	b003      	add	sp, #12
 800ce78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce7a:	bf00      	nop
 800ce7c:	20005c24 	.word	0x20005c24
 800ce80:	2000c3b4 	.word	0x2000c3b4
 800ce84:	20005c60 	.word	0x20005c60
 800ce88:	20005b24 	.word	0x20005b24
 800ce8c:	0801c5d6 	.word	0x0801c5d6
 800ce90:	20005ba4 	.word	0x20005ba4
 800ce94:	0802ba8c 	.word	0x0802ba8c

0800ce98 <create_vumeter_pwr>:
{
 800ce98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800ce9a:	4e30      	ldr	r6, [pc, #192]	; (800cf5c <create_vumeter_pwr+0xc4>)
 800ce9c:	4930      	ldr	r1, [pc, #192]	; (800cf60 <create_vumeter_pwr+0xc8>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800ce9e:	4c31      	ldr	r4, [pc, #196]	; (800cf64 <create_vumeter_pwr+0xcc>)
		bar_pwr[x] = lv_bar_create(Tela_RF_2, NULL);
 800cea0:	4f31      	ldr	r7, [pc, #196]	; (800cf68 <create_vumeter_pwr+0xd0>)
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800cea2:	4630      	mov	r0, r6
 800cea4:	f002 feea 	bl	800fc7c <lv_style_copy>
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800cea8:	4b30      	ldr	r3, [pc, #192]	; (800cf6c <create_vumeter_pwr+0xd4>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800ceaa:	492d      	ldr	r1, [pc, #180]	; (800cf60 <create_vumeter_pwr+0xc8>)
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800ceac:	881b      	ldrh	r3, [r3, #0]
 800ceae:	80b3      	strh	r3, [r6, #4]
	style_indic_bar.body.radius = 0;
 800ceb0:	2500      	movs	r5, #0
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800ceb2:	4620      	mov	r0, r4
	style_indic_bar.body.main_color = LV_COLOR_MAKE(105, 105, 105);
 800ceb4:	8073      	strh	r3, [r6, #2]
	style_indic_bar.body.border.color = LV_COLOR_MAKE(105, 105, 105);
 800ceb6:	8173      	strh	r3, [r6, #10]
	style_indic_bar.body.radius = 0;
 800ceb8:	80f5      	strh	r5, [r6, #6]
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800ceba:	f002 fedf 	bl	800fc7c <lv_style_copy>
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800cebe:	7923      	ldrb	r3, [r4, #4]
	style_indic_bar_vd.body.radius = 0;
 800cec0:	80e5      	strh	r5, [r4, #6]
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800cec2:	f365 0304 	bfi	r3, r5, #0, #5
 800cec6:	7123      	strb	r3, [r4, #4]
 800cec8:	88a3      	ldrh	r3, [r4, #4]
 800ceca:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800cece:	80a3      	strh	r3, [r4, #4]
 800ced0:	0a1b      	lsrs	r3, r3, #8
 800ced2:	f365 03c7 	bfi	r3, r5, #3, #5
 800ced6:	7163      	strb	r3, [r4, #5]
	style_indic_bar_vd.body.main_color = LV_COLOR_MAKE(0, 255, 0);
 800ced8:	78a3      	ldrb	r3, [r4, #2]
 800ceda:	f365 0304 	bfi	r3, r5, #0, #5
 800cede:	70a3      	strb	r3, [r4, #2]
 800cee0:	8863      	ldrh	r3, [r4, #2]
 800cee2:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800cee6:	8063      	strh	r3, [r4, #2]
 800cee8:	0a1b      	lsrs	r3, r3, #8
 800ceea:	f365 03c7 	bfi	r3, r5, #3, #5
 800ceee:	70e3      	strb	r3, [r4, #3]
	style_indic_bar_vd.body.border.color = LV_COLOR_MAKE(0, 255, 0);
 800cef0:	7aa3      	ldrb	r3, [r4, #10]
 800cef2:	f365 0304 	bfi	r3, r5, #0, #5
 800cef6:	72a3      	strb	r3, [r4, #10]
 800cef8:	8963      	ldrh	r3, [r4, #10]
 800cefa:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800cefe:	8163      	strh	r3, [r4, #10]
 800cf00:	0a1b      	lsrs	r3, r3, #8
 800cf02:	f365 03c7 	bfi	r3, r5, #3, #5
 800cf06:	72e3      	strb	r3, [r4, #11]
 800cf08:	4c19      	ldr	r4, [pc, #100]	; (800cf70 <create_vumeter_pwr+0xd8>)
		bar_pwr[x] = lv_bar_create(Tela_RF_2, NULL);
 800cf0a:	6838      	ldr	r0, [r7, #0]
 800cf0c:	2100      	movs	r1, #0
 800cf0e:	f007 ff97 	bl	8014e40 <lv_bar_create>
		lv_obj_set_size(bar_pwr[x], 4, 20);
 800cf12:	2214      	movs	r2, #20
		bar_pwr[x] = lv_bar_create(Tela_RF_2, NULL);
 800cf14:	6060      	str	r0, [r4, #4]
		lv_obj_set_size(bar_pwr[x], 4, 20);
 800cf16:	2104      	movs	r1, #4
 800cf18:	f002 f952 	bl	800f1c0 <lv_obj_set_size>
		lv_bar_set_style(bar_pwr[x], LV_BAR_STYLE_BG, &style_indic_bar);
 800cf1c:	6860      	ldr	r0, [r4, #4]
 800cf1e:	4632      	mov	r2, r6
 800cf20:	2100      	movs	r1, #0
 800cf22:	f007 ff77 	bl	8014e14 <lv_bar_set_style>
		lv_bar_set_style(bar_pwr[x], LV_BAR_STYLE_INDIC, &style_indic_bar);
 800cf26:	6860      	ldr	r0, [r4, #4]
 800cf28:	4632      	mov	r2, r6
 800cf2a:	2101      	movs	r1, #1
 800cf2c:	f007 ff72 	bl	8014e14 <lv_bar_set_style>
		lv_obj_align(bar_pwr[x], NULL, LV_ALIGN_IN_TOP_LEFT, pwr_pos_x[x], 93);
 800cf30:	225d      	movs	r2, #93	; 0x5d
 800cf32:	4b10      	ldr	r3, [pc, #64]	; (800cf74 <create_vumeter_pwr+0xdc>)
 800cf34:	9200      	str	r2, [sp, #0]
 800cf36:	f933 3025 	ldrsh.w	r3, [r3, r5, lsl #2]
 800cf3a:	6860      	ldr	r0, [r4, #4]
 800cf3c:	2201      	movs	r2, #1
 800cf3e:	2100      	movs	r1, #0
 800cf40:	f001 fd9e 	bl	800ea80 <lv_obj_align>
 800cf44:	3501      	adds	r5, #1
		lv_bar_set_value(bar_pwr[x], 100, 0);
 800cf46:	2200      	movs	r2, #0
 800cf48:	2164      	movs	r1, #100	; 0x64
 800cf4a:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800cf4e:	f007 ff05 	bl	8014d5c <lv_bar_set_value>
	for(uint8_t x = 0; x < 10; x++) {
 800cf52:	2d0a      	cmp	r5, #10
 800cf54:	d1d9      	bne.n	800cf0a <create_vumeter_pwr+0x72>
}
 800cf56:	b003      	add	sp, #12
 800cf58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf5a:	bf00      	nop
 800cf5c:	20005c24 	.word	0x20005c24
 800cf60:	2000c3b4 	.word	0x2000c3b4
 800cf64:	20005c60 	.word	0x20005c60
 800cf68:	20005b2c 	.word	0x20005b2c
 800cf6c:	0801c5d6 	.word	0x0801c5d6
 800cf70:	20005b7c 	.word	0x20005b7c
 800cf74:	0802ba3c 	.word	0x0802ba3c

0800cf78 <update_vumeter_swr>:
{
 800cf78:	b570      	push	{r4, r5, r6, lr}
 800cf7a:	4c2d      	ldr	r4, [pc, #180]	; (800d030 <update_vumeter_swr+0xb8>)
		lv_bar_set_style(bar_swr[x], LV_BAR_STYLE_BG, &style_indic_bar);
 800cf7c:	4d2d      	ldr	r5, [pc, #180]	; (800d034 <update_vumeter_swr+0xbc>)
{
 800cf7e:	ed2d 8b02 	vpush	{d8}
 800cf82:	f104 0650 	add.w	r6, r4, #80	; 0x50
 800cf86:	eeb0 8a40 	vmov.f32	s16, s0
		lv_bar_set_style(bar_swr[x], LV_BAR_STYLE_BG, &style_indic_bar);
 800cf8a:	462a      	mov	r2, r5
 800cf8c:	2100      	movs	r1, #0
 800cf8e:	6860      	ldr	r0, [r4, #4]
 800cf90:	f007 ff40 	bl	8014e14 <lv_bar_set_style>
		lv_bar_set_style(bar_swr[x], LV_BAR_STYLE_INDIC, &style_indic_bar);
 800cf94:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800cf98:	462a      	mov	r2, r5
 800cf9a:	2101      	movs	r1, #1
 800cf9c:	f007 ff3a 	bl	8014e14 <lv_bar_set_style>
	for(uint8_t x = 0; x < 20; x++) {
 800cfa0:	42b4      	cmp	r4, r6
 800cfa2:	d1f2      	bne.n	800cf8a <update_vumeter_swr+0x12>
	if(swr != 0) {
 800cfa4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800cfa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfac:	d02f      	beq.n	800d00e <update_vumeter_swr+0x96>
		resul = (uint32_t) (((((swr / 10) / target) * 100) / 2.50f) - 1) ;
 800cfae:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800cfb2:	eec8 6a27 	vdiv.f32	s13, s16, s15
 800cfb6:	4b20      	ldr	r3, [pc, #128]	; (800d038 <update_vumeter_swr+0xc0>)
			lv_bar_set_style(bar_swr[y], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800cfb8:	4d20      	ldr	r5, [pc, #128]	; (800d03c <update_vumeter_swr+0xc4>)
 800cfba:	4e21      	ldr	r6, [pc, #132]	; (800d040 <update_vumeter_swr+0xc8>)
		for(y = 0; y <= resul; y++) {
 800cfbc:	2400      	movs	r4, #0
		resul = (uint32_t) (((((swr / 10) / target) * 100) / 2.50f) - 1) ;
 800cfbe:	ed93 7a00 	vldr	s14, [r3]
 800cfc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cfc6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800d044 <update_vumeter_swr+0xcc>
 800cfca:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cfce:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 800cfd2:	ee87 8a87 	vdiv.f32	s16, s15, s14
 800cfd6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800cfda:	ee38 8a67 	vsub.f32	s16, s16, s15
		if(resul >= 20) resul = 19;
 800cfde:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
		resul = (uint32_t) (((((swr / 10) / target) * 100) / 2.50f) - 1) ;
 800cfe2:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 800cfe6:	eeb8 8a48 	vcvt.f32.u32	s16, s16
		if(resul >= 20) resul = 19;
 800cfea:	eeb4 8a67 	vcmp.f32	s16, s15
 800cfee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cff2:	eef3 7a03 	vmov.f32	s15, #51	; 0x41980000  19.0
 800cff6:	bfa8      	it	ge
 800cff8:	eeb0 8a67 	vmovge.f32	s16, s15
		for(y = 0; y <= resul; y++) {
 800cffc:	ee07 4a90 	vmov	s15, r4
 800d000:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d004:	eef4 7ac8 	vcmpe.f32	s15, s16
 800d008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d00c:	d902      	bls.n	800d014 <update_vumeter_swr+0x9c>
}
 800d00e:	ecbd 8b02 	vpop	{d8}
 800d012:	bd70      	pop	{r4, r5, r6, pc}
			lv_bar_set_style(bar_swr[y], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800d014:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800d018:	4632      	mov	r2, r6
 800d01a:	2100      	movs	r1, #0
 800d01c:	f007 fefa 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar_swr[y], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
 800d020:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800d024:	4632      	mov	r2, r6
 800d026:	2101      	movs	r1, #1
 800d028:	f007 fef4 	bl	8014e14 <lv_bar_set_style>
		for(y = 0; y <= resul; y++) {
 800d02c:	3401      	adds	r4, #1
 800d02e:	e7e5      	b.n	800cffc <update_vumeter_swr+0x84>
 800d030:	20005ba4 	.word	0x20005ba4
 800d034:	20005c24 	.word	0x20005c24
 800d038:	20000010 	.word	0x20000010
 800d03c:	20005ba8 	.word	0x20005ba8
 800d040:	20005c60 	.word	0x20005c60
 800d044:	42c80000 	.word	0x42c80000

0800d048 <update_rf>:

static void update_rf(lv_task_t * param)
{
	update_vumeter_swr(max_rfl);
 800d048:	4b02      	ldr	r3, [pc, #8]	; (800d054 <update_rf+0xc>)
 800d04a:	ed93 0a00 	vldr	s0, [r3]
 800d04e:	f7ff bf93 	b.w	800cf78 <update_vumeter_swr>
 800d052:	bf00      	nop
 800d054:	20000008 	.word	0x20000008

0800d058 <update_vumeter_fwd>:
{
 800d058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d05a:	4c23      	ldr	r4, [pc, #140]	; (800d0e8 <update_vumeter_fwd+0x90>)
		lv_bar_set_style(bar_fwd[x], LV_BAR_STYLE_BG, &style_indic_bar);
 800d05c:	4d23      	ldr	r5, [pc, #140]	; (800d0ec <update_vumeter_fwd+0x94>)
{
 800d05e:	ed2d 8b02 	vpush	{d8}
 800d062:	f104 0650 	add.w	r6, r4, #80	; 0x50
 800d066:	eeb0 8a40 	vmov.f32	s16, s0
		lv_bar_set_style(bar_fwd[x], LV_BAR_STYLE_BG, &style_indic_bar);
 800d06a:	462a      	mov	r2, r5
 800d06c:	2100      	movs	r1, #0
 800d06e:	6860      	ldr	r0, [r4, #4]
 800d070:	f007 fed0 	bl	8014e14 <lv_bar_set_style>
		lv_bar_set_style(bar_fwd[x], LV_BAR_STYLE_INDIC, &style_indic_bar);
 800d074:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800d078:	462a      	mov	r2, r5
 800d07a:	2101      	movs	r1, #1
 800d07c:	f007 feca 	bl	8014e14 <lv_bar_set_style>
	for(uint8_t x = 0; x < 20; x++) {
 800d080:	42a6      	cmp	r6, r4
 800d082:	d1f2      	bne.n	800d06a <update_vumeter_fwd+0x12>
	if(fwd != 0) {
 800d084:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d08c:	d028      	beq.n	800d0e0 <update_vumeter_fwd+0x88>
		resul = (uint32_t) ((((((float)fwd) / 15.0f) * 100) / 5.0f) - 1) ;
 800d08e:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
 800d092:	ee88 7a27 	vdiv.f32	s14, s16, s15
			lv_bar_set_style(bar_fwd[y], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800d096:	4e16      	ldr	r6, [pc, #88]	; (800d0f0 <update_vumeter_fwd+0x98>)
 800d098:	4f16      	ldr	r7, [pc, #88]	; (800d0f4 <update_vumeter_fwd+0x9c>)
		for(y = 0; y <= resul; y++) {
 800d09a:	2500      	movs	r5, #0
		resul = (uint32_t) ((((((float)fwd) / 15.0f) * 100) / 5.0f) - 1) ;
 800d09c:	eddf 7a16 	vldr	s15, [pc, #88]	; 800d0f8 <update_vumeter_fwd+0xa0>
 800d0a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d0a4:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800d0a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d0ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d0b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d0b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d0b8:	ee17 4a90 	vmov	r4, s15
 800d0bc:	2c13      	cmp	r4, #19
 800d0be:	bf28      	it	cs
 800d0c0:	2413      	movcs	r4, #19
			lv_bar_set_style(bar_fwd[y], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800d0c2:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]
 800d0c6:	463a      	mov	r2, r7
 800d0c8:	2100      	movs	r1, #0
 800d0ca:	f007 fea3 	bl	8014e14 <lv_bar_set_style>
			lv_bar_set_style(bar_fwd[y], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
 800d0ce:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]
 800d0d2:	463a      	mov	r2, r7
 800d0d4:	2101      	movs	r1, #1
		for(y = 0; y <= resul; y++) {
 800d0d6:	3501      	adds	r5, #1
			lv_bar_set_style(bar_fwd[y], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
 800d0d8:	f007 fe9c 	bl	8014e14 <lv_bar_set_style>
		for(y = 0; y <= resul; y++) {
 800d0dc:	42ac      	cmp	r4, r5
 800d0de:	d2f0      	bcs.n	800d0c2 <update_vumeter_fwd+0x6a>
}
 800d0e0:	ecbd 8b02 	vpop	{d8}
 800d0e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0e6:	bf00      	nop
 800d0e8:	20005b2c 	.word	0x20005b2c
 800d0ec:	20005c24 	.word	0x20005c24
 800d0f0:	20005b30 	.word	0x20005b30
 800d0f4:	20005c60 	.word	0x20005c60
 800d0f8:	42c80000 	.word	0x42c80000

0800d0fc <update_rf_1>:
}

static void update_rf_1(lv_task_t * param)
{
	update_vumeter_fwd(target);
 800d0fc:	4b02      	ldr	r3, [pc, #8]	; (800d108 <update_rf_1+0xc>)
 800d0fe:	ed93 0a00 	vldr	s0, [r3]
 800d102:	f7ff bfa9 	b.w	800d058 <update_vumeter_fwd>
 800d106:	bf00      	nop
 800d108:	20000010 	.word	0x20000010

0800d10c <update_vumeter_pwr>:
{
 800d10c:	b570      	push	{r4, r5, r6, lr}
		lv_bar_set_style(bar_pwr[x], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800d10e:	4d09      	ldr	r5, [pc, #36]	; (800d134 <update_vumeter_pwr+0x28>)
 800d110:	4e09      	ldr	r6, [pc, #36]	; (800d138 <update_vumeter_pwr+0x2c>)
	for(x = 0; x <= resul; x++) {
 800d112:	2400      	movs	r4, #0
		lv_bar_set_style(bar_pwr[x], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800d114:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800d118:	4632      	mov	r2, r6
 800d11a:	2100      	movs	r1, #0
 800d11c:	f007 fe7a 	bl	8014e14 <lv_bar_set_style>
		lv_bar_set_style(bar_pwr[x], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
 800d120:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800d124:	4632      	mov	r2, r6
 800d126:	2101      	movs	r1, #1
	for(x = 0; x <= resul; x++) {
 800d128:	3401      	adds	r4, #1
		lv_bar_set_style(bar_pwr[x], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
 800d12a:	f007 fe73 	bl	8014e14 <lv_bar_set_style>
	for(x = 0; x <= resul; x++) {
 800d12e:	2c0a      	cmp	r4, #10
 800d130:	d1f0      	bne.n	800d114 <update_vumeter_pwr+0x8>
}
 800d132:	bd70      	pop	{r4, r5, r6, pc}
 800d134:	20005b80 	.word	0x20005b80
 800d138:	20005c60 	.word	0x20005c60

0800d13c <print_pwr>:
{
 800d13c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	lv_style_copy(&style_txt_fwd, &lv_style_plain);
 800d13e:	4c24      	ldr	r4, [pc, #144]	; (800d1d0 <print_pwr+0x94>)
 800d140:	4924      	ldr	r1, [pc, #144]	; (800d1d4 <print_pwr+0x98>)
 800d142:	4620      	mov	r0, r4
 800d144:	f002 fd9a 	bl	800fc7c <lv_style_copy>
	style_txt_fwd.text.font = &lv_font_eurostile_22;
 800d148:	4b23      	ldr	r3, [pc, #140]	; (800d1d8 <print_pwr+0x9c>)
 800d14a:	6263      	str	r3, [r4, #36]	; 0x24
	style_txt_fwd.text.color = LV_COLOR_CYAN;
 800d14c:	f894 3020 	ldrb.w	r3, [r4, #32]
 800d150:	f043 031f 	orr.w	r3, r3, #31
 800d154:	f884 3020 	strb.w	r3, [r4, #32]
 800d158:	8c23      	ldrh	r3, [r4, #32]
 800d15a:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800d15e:	8423      	strh	r3, [r4, #32]
 800d160:	0a1b      	lsrs	r3, r3, #8
 800d162:	f36f 03c7 	bfc	r3, #3, #5
 800d166:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	lv_obj_t *txt_fwd = lv_label_create(Tela_RF_2, NULL);
 800d16a:	4b1c      	ldr	r3, [pc, #112]	; (800d1dc <print_pwr+0xa0>)
	style_txt_fwd.text.letter_space = 1;
 800d16c:	2601      	movs	r6, #1
	lv_obj_t *txt_fwd = lv_label_create(Tela_RF_2, NULL);
 800d16e:	6818      	ldr	r0, [r3, #0]
	style_txt_fwd.text.letter_space = 1;
 800d170:	8526      	strh	r6, [r4, #40]	; 0x28
	lv_obj_t *txt_fwd = lv_label_create(Tela_RF_2, NULL);
 800d172:	2100      	movs	r1, #0
	style_txt_fwd.text.line_space = 1;
 800d174:	8566      	strh	r6, [r4, #42]	; 0x2a
	lv_obj_t *txt_fwd = lv_label_create(Tela_RF_2, NULL);
 800d176:	f00a fc75 	bl	8017a64 <lv_label_create>
	lv_obj_set_style(txt_fwd, &style_txt_fwd); 							// Configura o estilo criado
 800d17a:	4621      	mov	r1, r4
	lv_obj_t *txt_fwd = lv_label_create(Tela_RF_2, NULL);
 800d17c:	4605      	mov	r5, r0
	lv_obj_set_style(txt_fwd, &style_txt_fwd); 							// Configura o estilo criado
 800d17e:	f002 f921 	bl	800f3c4 <lv_obj_set_style>
	lv_label_set_long_mode(txt_fwd, LV_LABEL_LONG_BREAK); 				// Quebra as linhas longas
 800d182:	4631      	mov	r1, r6
 800d184:	4628      	mov	r0, r5
 800d186:	f00a fc17 	bl	80179b8 <lv_label_set_long_mode>
	sprintf(buffer, "%0.1f", pwr);
 800d18a:	4c15      	ldr	r4, [pc, #84]	; (800d1e0 <print_pwr+0xa4>)
	lv_label_set_recolor(txt_fwd, true); 								// Ativa recolorizar por comandos no texto
 800d18c:	4631      	mov	r1, r6
 800d18e:	4628      	mov	r0, r5
 800d190:	f00a fc54 	bl	8017a3c <lv_label_set_recolor>
	lv_label_set_align(txt_fwd, LV_ALIGN_IN_BOTTOM_RIGHT); 				// Centraliza linhas alinhadas
 800d194:	4628      	mov	r0, r5
 800d196:	2106      	movs	r1, #6
 800d198:	f00a f8ad 	bl	80172f6 <lv_label_set_align>
	sprintf(buffer, "%0.1f", pwr);
 800d19c:	2200      	movs	r2, #0
 800d19e:	4b11      	ldr	r3, [pc, #68]	; (800d1e4 <print_pwr+0xa8>)
 800d1a0:	4911      	ldr	r1, [pc, #68]	; (800d1e8 <print_pwr+0xac>)
 800d1a2:	4620      	mov	r0, r4
 800d1a4:	f00c fcba 	bl	8019b1c <sprintf>
	lv_label_set_text(txt_fwd, buffer);
 800d1a8:	4621      	mov	r1, r4
 800d1aa:	4628      	mov	r0, r5
 800d1ac:	f00a fbb0 	bl	8017910 <lv_label_set_text>
	lv_obj_set_width(txt_fwd, 200); 									// Configuura o comprimento
 800d1b0:	4628      	mov	r0, r5
 800d1b2:	21c8      	movs	r1, #200	; 0xc8
 800d1b4:	f002 f84e 	bl	800f254 <lv_obj_set_width>
	lv_obj_align(txt_fwd, NULL, LV_ALIGN_IN_BOTTOM_RIGHT, -30, -13); 		// Alinha ao centro
 800d1b8:	f06f 030c 	mvn.w	r3, #12
 800d1bc:	9300      	str	r3, [sp, #0]
 800d1be:	2206      	movs	r2, #6
 800d1c0:	f06f 031d 	mvn.w	r3, #29
 800d1c4:	2100      	movs	r1, #0
 800d1c6:	4628      	mov	r0, r5
 800d1c8:	f001 fc5a 	bl	800ea80 <lv_obj_align>
}
 800d1cc:	b002      	add	sp, #8
 800d1ce:	bd70      	pop	{r4, r5, r6, pc}
 800d1d0:	20005d14 	.word	0x20005d14
 800d1d4:	2000c4a4 	.word	0x2000c4a4
 800d1d8:	20000d0c 	.word	0x20000d0c
 800d1dc:	20005b2c 	.word	0x20005b2c
 800d1e0:	20004ce8 	.word	0x20004ce8
 800d1e4:	402e0000 	.word	0x402e0000
 800d1e8:	0802b824 	.word	0x0802b824

0800d1ec <screen_RF_2>:
	Tela_RF_2 = lv_obj_create(NULL, NULL);
 800d1ec:	2100      	movs	r1, #0
{
 800d1ee:	b538      	push	{r3, r4, r5, lr}
	Tela_RF_2 = lv_obj_create(NULL, NULL);
 800d1f0:	4608      	mov	r0, r1
 800d1f2:	f001 fe67 	bl	800eec4 <lv_obj_create>
 800d1f6:	4d45      	ldr	r5, [pc, #276]	; (800d30c <screen_RF_2+0x120>)
	img_fundo_2 = lv_img_create(Tela_RF_2, NULL);
 800d1f8:	4c45      	ldr	r4, [pc, #276]	; (800d310 <screen_RF_2+0x124>)
	Tela_RF_2 = lv_obj_create(NULL, NULL);
 800d1fa:	6028      	str	r0, [r5, #0]
	img_fundo_2 = lv_img_create(Tela_RF_2, NULL);
 800d1fc:	2100      	movs	r1, #0
 800d1fe:	f009 fd63 	bl	8016cc8 <lv_img_create>
	lv_img_set_src(img_fundo_2, &tela_rf_2);
 800d202:	4944      	ldr	r1, [pc, #272]	; (800d314 <screen_RF_2+0x128>)
	img_fundo_2 = lv_img_create(Tela_RF_2, NULL);
 800d204:	6020      	str	r0, [r4, #0]
	lv_img_set_src(img_fundo_2, &tela_rf_2);
 800d206:	f009 fccf 	bl	8016ba8 <lv_img_set_src>
	lv_obj_set_protect(img_fundo_2, LV_PROTECT_POS);
 800d20a:	6820      	ldr	r0, [r4, #0]
 800d20c:	2104      	movs	r1, #4
 800d20e:	f001 fa8b 	bl	800e728 <lv_obj_set_protect>
	lv_obj_set_event_cb(img_fundo_2, btn_event_esc_rf2);
 800d212:	6820      	ldr	r0, [r4, #0]
 800d214:	4940      	ldr	r1, [pc, #256]	; (800d318 <screen_RF_2+0x12c>)
 800d216:	f001 fa94 	bl	800e742 <lv_obj_set_event_cb>
	lv_obj_set_click(img_fundo_2, 1);
 800d21a:	6820      	ldr	r0, [r4, #0]
	imgbtn1[0] = lv_imgbtn_create(Tela_RF_2, NULL);
 800d21c:	4c3f      	ldr	r4, [pc, #252]	; (800d31c <screen_RF_2+0x130>)
	lv_obj_set_click(img_fundo_2, 1);
 800d21e:	2101      	movs	r1, #1
 800d220:	f001 fa66 	bl	800e6f0 <lv_obj_set_click>
	imgbtn1[0] = lv_imgbtn_create(Tela_RF_2, NULL);
 800d224:	2100      	movs	r1, #0
 800d226:	6828      	ldr	r0, [r5, #0]
 800d228:	f009 fe78 	bl	8016f1c <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn1[0], 0);
 800d22c:	2100      	movs	r1, #0
	imgbtn1[0] = lv_imgbtn_create(Tela_RF_2, NULL);
 800d22e:	6020      	str	r0, [r4, #0]
	lv_obj_set_user_data(imgbtn1[0], 0);
 800d230:	f002 f9e5 	bl	800f5fe <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_REL, &Btn_poweron);
 800d234:	4a3a      	ldr	r2, [pc, #232]	; (800d320 <screen_RF_2+0x134>)
 800d236:	6820      	ldr	r0, [r4, #0]
 800d238:	2100      	movs	r1, #0
 800d23a:	f009 feb7 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_TGL_REL, &Btn_poweron_vd);
 800d23e:	4a39      	ldr	r2, [pc, #228]	; (800d324 <screen_RF_2+0x138>)
 800d240:	6820      	ldr	r0, [r4, #0]
 800d242:	2102      	movs	r1, #2
 800d244:	f009 feb2 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_TGL_PR, &Btn_poweron);
 800d248:	4a35      	ldr	r2, [pc, #212]	; (800d320 <screen_RF_2+0x134>)
 800d24a:	6820      	ldr	r0, [r4, #0]
 800d24c:	2103      	movs	r1, #3
 800d24e:	f009 fead 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_PR, &Btn_poweron);
 800d252:	4a33      	ldr	r2, [pc, #204]	; (800d320 <screen_RF_2+0x134>)
 800d254:	6820      	ldr	r0, [r4, #0]
 800d256:	2101      	movs	r1, #1
 800d258:	f009 fea8 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_INA, &Btn_poweron);
 800d25c:	4a30      	ldr	r2, [pc, #192]	; (800d320 <screen_RF_2+0x134>)
 800d25e:	6820      	ldr	r0, [r4, #0]
 800d260:	2104      	movs	r1, #4
 800d262:	f009 fea3 	bl	8016fac <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn1[0], btn_power);
 800d266:	4930      	ldr	r1, [pc, #192]	; (800d328 <screen_RF_2+0x13c>)
 800d268:	6820      	ldr	r0, [r4, #0]
 800d26a:	f001 fa6a 	bl	800e742 <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn1[0], 1, 35);
 800d26e:	2223      	movs	r2, #35	; 0x23
 800d270:	2101      	movs	r1, #1
 800d272:	6820      	ldr	r0, [r4, #0]
 800d274:	f001 fbaf 	bl	800e9d6 <lv_obj_set_pos>
	imgbtn1[1] = lv_imgbtn_create(Tela_RF_2, imgbtn1[0]);
 800d278:	6821      	ldr	r1, [r4, #0]
 800d27a:	6828      	ldr	r0, [r5, #0]
 800d27c:	f009 fe4e 	bl	8016f1c <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn1[1], 1);
 800d280:	2101      	movs	r1, #1
	imgbtn1[1] = lv_imgbtn_create(Tela_RF_2, imgbtn1[0]);
 800d282:	6060      	str	r0, [r4, #4]
	lv_obj_set_user_data(imgbtn1[1], 1);
 800d284:	f002 f9bb 	bl	800f5fe <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_REL, &Btn_poweroff);
 800d288:	4a28      	ldr	r2, [pc, #160]	; (800d32c <screen_RF_2+0x140>)
 800d28a:	6860      	ldr	r0, [r4, #4]
 800d28c:	2100      	movs	r1, #0
 800d28e:	f009 fe8d 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_TGL_REL, &Btn_poweroff_vm);
 800d292:	4a27      	ldr	r2, [pc, #156]	; (800d330 <screen_RF_2+0x144>)
 800d294:	6860      	ldr	r0, [r4, #4]
 800d296:	2102      	movs	r1, #2
 800d298:	f009 fe88 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_TGL_PR, &Btn_poweroff);
 800d29c:	4a23      	ldr	r2, [pc, #140]	; (800d32c <screen_RF_2+0x140>)
 800d29e:	6860      	ldr	r0, [r4, #4]
 800d2a0:	2103      	movs	r1, #3
 800d2a2:	f009 fe83 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_PR, &Btn_poweroff);
 800d2a6:	4a21      	ldr	r2, [pc, #132]	; (800d32c <screen_RF_2+0x140>)
 800d2a8:	6860      	ldr	r0, [r4, #4]
 800d2aa:	2101      	movs	r1, #1
 800d2ac:	f009 fe7e 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_INA, &Btn_poweroff);
 800d2b0:	4a1e      	ldr	r2, [pc, #120]	; (800d32c <screen_RF_2+0x140>)
 800d2b2:	6860      	ldr	r0, [r4, #4]
 800d2b4:	2104      	movs	r1, #4
 800d2b6:	f009 fe79 	bl	8016fac <lv_imgbtn_set_src>
	lv_obj_set_pos(imgbtn1[1], 1, 63);
 800d2ba:	223f      	movs	r2, #63	; 0x3f
 800d2bc:	2101      	movs	r1, #1
 800d2be:	6860      	ldr	r0, [r4, #4]
 800d2c0:	f001 fb89 	bl	800e9d6 <lv_obj_set_pos>
	if(RFEnable) {
 800d2c4:	4b1b      	ldr	r3, [pc, #108]	; (800d334 <screen_RF_2+0x148>)
 800d2c6:	781b      	ldrb	r3, [r3, #0]
 800d2c8:	b1cb      	cbz	r3, 800d2fe <screen_RF_2+0x112>
		lv_btn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_REL);
 800d2ca:	2102      	movs	r1, #2
 800d2cc:	6820      	ldr	r0, [r4, #0]
 800d2ce:	f007 ff99 	bl	8015204 <lv_btn_set_state>
		lv_btn_set_state(imgbtn1[1], LV_BTN_STATE_TGL_PR);
 800d2d2:	2103      	movs	r1, #3
		lv_btn_set_state(imgbtn1[1], LV_BTN_STATE_TGL_REL);
 800d2d4:	6860      	ldr	r0, [r4, #4]
	update_vumeter_pwr(forward);
 800d2d6:	4c18      	ldr	r4, [pc, #96]	; (800d338 <screen_RF_2+0x14c>)
		lv_btn_set_state(imgbtn1[1], LV_BTN_STATE_TGL_REL);
 800d2d8:	f007 ff94 	bl	8015204 <lv_btn_set_state>
	create_vumeter_pwr();
 800d2dc:	f7ff fddc 	bl	800ce98 <create_vumeter_pwr>
	update_vumeter_pwr(forward);
 800d2e0:	ed94 0a00 	vldr	s0, [r4]
 800d2e4:	f7ff ff12 	bl	800d10c <update_vumeter_pwr>
	print_pwr(forward);
 800d2e8:	ed94 0a00 	vldr	s0, [r4]
 800d2ec:	f7ff ff26 	bl	800d13c <print_pwr>
 800d2f0:	6828      	ldr	r0, [r5, #0]
 800d2f2:	f000 ffd3 	bl	800e29c <lv_disp_load_scr>
	TelaAtiva = TelaRF_2;
 800d2f6:	4b11      	ldr	r3, [pc, #68]	; (800d33c <screen_RF_2+0x150>)
 800d2f8:	2208      	movs	r2, #8
 800d2fa:	601a      	str	r2, [r3, #0]
 800d2fc:	bd38      	pop	{r3, r4, r5, pc}
		lv_btn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_PR);
 800d2fe:	2103      	movs	r1, #3
 800d300:	6820      	ldr	r0, [r4, #0]
 800d302:	f007 ff7f 	bl	8015204 <lv_btn_set_state>
		lv_btn_set_state(imgbtn1[1], LV_BTN_STATE_TGL_REL);
 800d306:	2102      	movs	r1, #2
 800d308:	e7e4      	b.n	800d2d4 <screen_RF_2+0xe8>
 800d30a:	bf00      	nop
 800d30c:	20005b2c 	.word	0x20005b2c
 800d310:	20005c00 	.word	0x20005c00
 800d314:	20001c10 	.word	0x20001c10
 800d318:	0800d91d 	.word	0x0800d91d
 800d31c:	20005c04 	.word	0x20005c04
 800d320:	20001b2c 	.word	0x20001b2c
 800d324:	20001b38 	.word	0x20001b38
 800d328:	0800cca9 	.word	0x0800cca9
 800d32c:	20001b14 	.word	0x20001b14
 800d330:	20001b20 	.word	0x20001b20
 800d334:	20000001 	.word	0x20000001
 800d338:	20004dd0 	.word	0x20004dd0
 800d33c:	200033e4 	.word	0x200033e4

0800d340 <btn_event_next_rf1>:
	if(event == LV_EVENT_APPLY) {
 800d340:	2911      	cmp	r1, #17
{
 800d342:	b508      	push	{r3, lr}
	if(event == LV_EVENT_APPLY) {
 800d344:	d10b      	bne.n	800d35e <btn_event_next_rf1+0x1e>
		lv_task_del(Task_RF_1);
 800d346:	4b06      	ldr	r3, [pc, #24]	; (800d360 <btn_event_next_rf1+0x20>)
 800d348:	6818      	ldr	r0, [r3, #0]
 800d34a:	f007 f973 	bl	8014634 <lv_task_del>
		lv_obj_del(Tela_RF_1);
 800d34e:	4b05      	ldr	r3, [pc, #20]	; (800d364 <btn_event_next_rf1+0x24>)
 800d350:	6818      	ldr	r0, [r3, #0]
 800d352:	f001 ffa8 	bl	800f2a6 <lv_obj_del>
}
 800d356:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_RF_2();
 800d35a:	f7ff bf47 	b.w	800d1ec <screen_RF_2>
 800d35e:	bd08      	pop	{r3, pc}
 800d360:	20005b20 	.word	0x20005b20
 800d364:	20005b28 	.word	0x20005b28

0800d368 <create_vumeter_fwd>:
{
 800d368:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800d36a:	4e30      	ldr	r6, [pc, #192]	; (800d42c <create_vumeter_fwd+0xc4>)
 800d36c:	4930      	ldr	r1, [pc, #192]	; (800d430 <create_vumeter_fwd+0xc8>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800d36e:	4c31      	ldr	r4, [pc, #196]	; (800d434 <create_vumeter_fwd+0xcc>)
		bar_fwd[x] = lv_bar_create(Tela_RF, NULL);
 800d370:	4f31      	ldr	r7, [pc, #196]	; (800d438 <create_vumeter_fwd+0xd0>)
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800d372:	4630      	mov	r0, r6
 800d374:	f002 fc82 	bl	800fc7c <lv_style_copy>
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800d378:	4b30      	ldr	r3, [pc, #192]	; (800d43c <create_vumeter_fwd+0xd4>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800d37a:	492d      	ldr	r1, [pc, #180]	; (800d430 <create_vumeter_fwd+0xc8>)
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800d37c:	881b      	ldrh	r3, [r3, #0]
 800d37e:	80b3      	strh	r3, [r6, #4]
	style_indic_bar.body.radius = 0;
 800d380:	2500      	movs	r5, #0
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800d382:	4620      	mov	r0, r4
	style_indic_bar.body.main_color = LV_COLOR_MAKE(105, 105, 105);
 800d384:	8073      	strh	r3, [r6, #2]
	style_indic_bar.body.border.color = LV_COLOR_MAKE(105, 105, 105);
 800d386:	8173      	strh	r3, [r6, #10]
	style_indic_bar.body.radius = 0;
 800d388:	80f5      	strh	r5, [r6, #6]
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800d38a:	f002 fc77 	bl	800fc7c <lv_style_copy>
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800d38e:	7923      	ldrb	r3, [r4, #4]
	style_indic_bar_vd.body.radius = 0;
 800d390:	80e5      	strh	r5, [r4, #6]
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800d392:	f365 0304 	bfi	r3, r5, #0, #5
 800d396:	7123      	strb	r3, [r4, #4]
 800d398:	88a3      	ldrh	r3, [r4, #4]
 800d39a:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800d39e:	80a3      	strh	r3, [r4, #4]
 800d3a0:	0a1b      	lsrs	r3, r3, #8
 800d3a2:	f365 03c7 	bfi	r3, r5, #3, #5
 800d3a6:	7163      	strb	r3, [r4, #5]
	style_indic_bar_vd.body.main_color = LV_COLOR_MAKE(0, 255, 0);
 800d3a8:	78a3      	ldrb	r3, [r4, #2]
 800d3aa:	f365 0304 	bfi	r3, r5, #0, #5
 800d3ae:	70a3      	strb	r3, [r4, #2]
 800d3b0:	8863      	ldrh	r3, [r4, #2]
 800d3b2:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800d3b6:	8063      	strh	r3, [r4, #2]
 800d3b8:	0a1b      	lsrs	r3, r3, #8
 800d3ba:	f365 03c7 	bfi	r3, r5, #3, #5
 800d3be:	70e3      	strb	r3, [r4, #3]
	style_indic_bar_vd.body.border.color = LV_COLOR_MAKE(0, 255, 0);
 800d3c0:	7aa3      	ldrb	r3, [r4, #10]
 800d3c2:	f365 0304 	bfi	r3, r5, #0, #5
 800d3c6:	72a3      	strb	r3, [r4, #10]
 800d3c8:	8963      	ldrh	r3, [r4, #10]
 800d3ca:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800d3ce:	8163      	strh	r3, [r4, #10]
 800d3d0:	0a1b      	lsrs	r3, r3, #8
 800d3d2:	f365 03c7 	bfi	r3, r5, #3, #5
 800d3d6:	72e3      	strb	r3, [r4, #11]
 800d3d8:	4c19      	ldr	r4, [pc, #100]	; (800d440 <create_vumeter_fwd+0xd8>)
		bar_fwd[x] = lv_bar_create(Tela_RF, NULL);
 800d3da:	6838      	ldr	r0, [r7, #0]
 800d3dc:	2100      	movs	r1, #0
 800d3de:	f007 fd2f 	bl	8014e40 <lv_bar_create>
		lv_obj_set_size(bar_fwd[x], 4, 19);
 800d3e2:	2213      	movs	r2, #19
		bar_fwd[x] = lv_bar_create(Tela_RF, NULL);
 800d3e4:	6060      	str	r0, [r4, #4]
		lv_obj_set_size(bar_fwd[x], 4, 19);
 800d3e6:	2104      	movs	r1, #4
 800d3e8:	f001 feea 	bl	800f1c0 <lv_obj_set_size>
		lv_bar_set_style(bar_fwd[x], LV_BAR_STYLE_BG, &style_indic_bar);
 800d3ec:	6860      	ldr	r0, [r4, #4]
 800d3ee:	4632      	mov	r2, r6
 800d3f0:	2100      	movs	r1, #0
 800d3f2:	f007 fd0f 	bl	8014e14 <lv_bar_set_style>
		lv_bar_set_style(bar_fwd[x], LV_BAR_STYLE_INDIC, &style_indic_bar);
 800d3f6:	6860      	ldr	r0, [r4, #4]
 800d3f8:	4632      	mov	r2, r6
 800d3fa:	2101      	movs	r1, #1
 800d3fc:	f007 fd0a 	bl	8014e14 <lv_bar_set_style>
		lv_obj_align(bar_fwd[x], NULL, LV_ALIGN_IN_TOP_LEFT, fwd_pos_x[x], 86);
 800d400:	2256      	movs	r2, #86	; 0x56
 800d402:	4b10      	ldr	r3, [pc, #64]	; (800d444 <create_vumeter_fwd+0xdc>)
 800d404:	9200      	str	r2, [sp, #0]
 800d406:	f933 3025 	ldrsh.w	r3, [r3, r5, lsl #2]
 800d40a:	6860      	ldr	r0, [r4, #4]
 800d40c:	2201      	movs	r2, #1
 800d40e:	2100      	movs	r1, #0
 800d410:	f001 fb36 	bl	800ea80 <lv_obj_align>
 800d414:	3501      	adds	r5, #1
		lv_bar_set_value(bar_fwd[x], 100, 0);
 800d416:	2200      	movs	r2, #0
 800d418:	2164      	movs	r1, #100	; 0x64
 800d41a:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800d41e:	f007 fc9d 	bl	8014d5c <lv_bar_set_value>
	for(uint8_t x = 0; x < 20; x++) {
 800d422:	2d14      	cmp	r5, #20
 800d424:	d1d9      	bne.n	800d3da <create_vumeter_fwd+0x72>
}
 800d426:	b003      	add	sp, #12
 800d428:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d42a:	bf00      	nop
 800d42c:	20005c24 	.word	0x20005c24
 800d430:	2000c3b4 	.word	0x2000c3b4
 800d434:	20005c60 	.word	0x20005c60
 800d438:	20005b24 	.word	0x20005b24
 800d43c:	0801c5d6 	.word	0x0801c5d6
 800d440:	20005b2c 	.word	0x20005b2c
 800d444:	0802b9ec 	.word	0x0802b9ec

0800d448 <btn_next_rf>:
{
 800d448:	b538      	push	{r3, r4, r5, lr}
	imgbtn_next[0] = lv_imgbtn_create(Tela_RF, NULL);
 800d44a:	4b15      	ldr	r3, [pc, #84]	; (800d4a0 <btn_next_rf+0x58>)
	lv_imgbtn_set_src(imgbtn_next[0], LV_BTN_STATE_REL, &Btn_next);
 800d44c:	4d15      	ldr	r5, [pc, #84]	; (800d4a4 <btn_next_rf+0x5c>)
	imgbtn_next[0] = lv_imgbtn_create(Tela_RF, NULL);
 800d44e:	6818      	ldr	r0, [r3, #0]
 800d450:	4c15      	ldr	r4, [pc, #84]	; (800d4a8 <btn_next_rf+0x60>)
 800d452:	2100      	movs	r1, #0
 800d454:	f009 fd62 	bl	8016f1c <lv_imgbtn_create>
	lv_imgbtn_set_src(imgbtn_next[0], LV_BTN_STATE_REL, &Btn_next);
 800d458:	462a      	mov	r2, r5
 800d45a:	2100      	movs	r1, #0
	imgbtn_next[0] = lv_imgbtn_create(Tela_RF, NULL);
 800d45c:	6020      	str	r0, [r4, #0]
	lv_imgbtn_set_src(imgbtn_next[0], LV_BTN_STATE_REL, &Btn_next);
 800d45e:	f009 fda5 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next[0], LV_BTN_STATE_TGL_REL, &Btn_next);
 800d462:	462a      	mov	r2, r5
 800d464:	6820      	ldr	r0, [r4, #0]
 800d466:	2102      	movs	r1, #2
 800d468:	f009 fda0 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next[0], LV_BTN_STATE_TGL_PR, &Btn_next);
 800d46c:	462a      	mov	r2, r5
 800d46e:	6820      	ldr	r0, [r4, #0]
 800d470:	2103      	movs	r1, #3
 800d472:	f009 fd9b 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next[0], LV_BTN_STATE_PR, &Btn_next);
 800d476:	462a      	mov	r2, r5
 800d478:	6820      	ldr	r0, [r4, #0]
 800d47a:	2101      	movs	r1, #1
 800d47c:	f009 fd96 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next[0], LV_BTN_STATE_INA, &Btn_next);
 800d480:	462a      	mov	r2, r5
 800d482:	6820      	ldr	r0, [r4, #0]
 800d484:	2104      	movs	r1, #4
 800d486:	f009 fd91 	bl	8016fac <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn_next[0], btn_event_next_rf);
 800d48a:	6820      	ldr	r0, [r4, #0]
 800d48c:	4907      	ldr	r1, [pc, #28]	; (800d4ac <btn_next_rf+0x64>)
 800d48e:	f001 f958 	bl	800e742 <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn_next[0], 112, 18);
 800d492:	6820      	ldr	r0, [r4, #0]
 800d494:	2212      	movs	r2, #18
 800d496:	2170      	movs	r1, #112	; 0x70
}
 800d498:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lv_obj_set_pos(imgbtn_next[0], 112, 18);
 800d49c:	f001 ba9b 	b.w	800e9d6 <lv_obj_set_pos>
 800d4a0:	20005b24 	.word	0x20005b24
 800d4a4:	20001ad8 	.word	0x20001ad8
 800d4a8:	20005c0c 	.word	0x20005c0c
 800d4ac:	0800d939 	.word	0x0800d939

0800d4b0 <btn_next_rf1>:
{
 800d4b0:	b538      	push	{r3, r4, r5, lr}
	imgbtn_next[1] = lv_imgbtn_create(Tela_RF_1, NULL);
 800d4b2:	4b15      	ldr	r3, [pc, #84]	; (800d508 <btn_next_rf1+0x58>)
	lv_imgbtn_set_src(imgbtn_next[1], LV_BTN_STATE_REL, &Btn_next);
 800d4b4:	4d15      	ldr	r5, [pc, #84]	; (800d50c <btn_next_rf1+0x5c>)
	imgbtn_next[1] = lv_imgbtn_create(Tela_RF_1, NULL);
 800d4b6:	6818      	ldr	r0, [r3, #0]
 800d4b8:	4c15      	ldr	r4, [pc, #84]	; (800d510 <btn_next_rf1+0x60>)
 800d4ba:	2100      	movs	r1, #0
 800d4bc:	f009 fd2e 	bl	8016f1c <lv_imgbtn_create>
	lv_imgbtn_set_src(imgbtn_next[1], LV_BTN_STATE_REL, &Btn_next);
 800d4c0:	462a      	mov	r2, r5
 800d4c2:	2100      	movs	r1, #0
	imgbtn_next[1] = lv_imgbtn_create(Tela_RF_1, NULL);
 800d4c4:	6060      	str	r0, [r4, #4]
	lv_imgbtn_set_src(imgbtn_next[1], LV_BTN_STATE_REL, &Btn_next);
 800d4c6:	f009 fd71 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next[1], LV_BTN_STATE_TGL_REL, &Btn_next);
 800d4ca:	462a      	mov	r2, r5
 800d4cc:	6860      	ldr	r0, [r4, #4]
 800d4ce:	2102      	movs	r1, #2
 800d4d0:	f009 fd6c 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next[1], LV_BTN_STATE_TGL_PR, &Btn_next);
 800d4d4:	462a      	mov	r2, r5
 800d4d6:	6860      	ldr	r0, [r4, #4]
 800d4d8:	2103      	movs	r1, #3
 800d4da:	f009 fd67 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next[1], LV_BTN_STATE_PR, &Btn_next);
 800d4de:	462a      	mov	r2, r5
 800d4e0:	6860      	ldr	r0, [r4, #4]
 800d4e2:	2101      	movs	r1, #1
 800d4e4:	f009 fd62 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn_next[1], LV_BTN_STATE_INA, &Btn_next);
 800d4e8:	462a      	mov	r2, r5
 800d4ea:	6860      	ldr	r0, [r4, #4]
 800d4ec:	2104      	movs	r1, #4
 800d4ee:	f009 fd5d 	bl	8016fac <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn_next[1], btn_event_next_rf1);
 800d4f2:	6860      	ldr	r0, [r4, #4]
 800d4f4:	4907      	ldr	r1, [pc, #28]	; (800d514 <btn_next_rf1+0x64>)
 800d4f6:	f001 f924 	bl	800e742 <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn_next[1], 112, 18);
 800d4fa:	6860      	ldr	r0, [r4, #4]
 800d4fc:	2212      	movs	r2, #18
 800d4fe:	2170      	movs	r1, #112	; 0x70
}
 800d500:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lv_obj_set_pos(imgbtn_next[1], 112, 18);
 800d504:	f001 ba67 	b.w	800e9d6 <lv_obj_set_pos>
 800d508:	20005b28 	.word	0x20005b28
 800d50c:	20001ad8 	.word	0x20001ad8
 800d510:	20005c0c 	.word	0x20005c0c
 800d514:	0800d341 	.word	0x0800d341

0800d518 <prog_swr>:
	if( swr > 0) {
 800d518:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d51c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 800d520:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if( swr > 0) {
 800d524:	f340 8092 	ble.w	800d64c <prog_swr+0x134>
		teste = (uint32_t) swr * 10;
 800d528:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 800d52c:	220a      	movs	r2, #10
 800d52e:	ee10 3a10 	vmov	r3, s0
		un = teste / 100;
 800d532:	2664      	movs	r6, #100	; 0x64
		teste = (uint32_t) swr * 10;
 800d534:	4353      	muls	r3, r2
		un = teste / 100;
 800d536:	fbb3 f7f6 	udiv	r7, r3, r6
		ml = (teste % 100) / 10;
 800d53a:	fb06 3617 	mls	r6, r6, r7, r3
 800d53e:	fbb6 f6f2 	udiv	r6, r6, r2
	lv_style_copy(&style_txt, &lv_style_plain_color);
 800d542:	4d44      	ldr	r5, [pc, #272]	; (800d654 <prog_swr+0x13c>)
 800d544:	4944      	ldr	r1, [pc, #272]	; (800d658 <prog_swr+0x140>)
	rollerswr[0] = lv_roller_create(Tela_RF, NULL);
 800d546:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800d670 <prog_swr+0x158>
 800d54a:	4c44      	ldr	r4, [pc, #272]	; (800d65c <prog_swr+0x144>)
	lv_style_copy(&style_txt, &lv_style_plain_color);
 800d54c:	4628      	mov	r0, r5
 800d54e:	f002 fb95 	bl	800fc7c <lv_style_copy>
	style_txt.body.main_color = LV_COLOR_GRAY;
 800d552:	4a43      	ldr	r2, [pc, #268]	; (800d660 <prog_swr+0x148>)
	rollerswr[0] = lv_roller_create(Tela_RF, NULL);
 800d554:	f8d9 0000 	ldr.w	r0, [r9]
	style_txt.body.main_color = LV_COLOR_GRAY;
 800d558:	8893      	ldrh	r3, [r2, #4]
 800d55a:	806b      	strh	r3, [r5, #2]
	style_txt.body.grad_color = LV_COLOR_BLACK;
 800d55c:	792b      	ldrb	r3, [r5, #4]
 800d55e:	f36f 0304 	bfc	r3, #0, #5
 800d562:	712b      	strb	r3, [r5, #4]
 800d564:	88ab      	ldrh	r3, [r5, #4]
 800d566:	f36f 134a 	bfc	r3, #5, #6
 800d56a:	80ab      	strh	r3, [r5, #4]
 800d56c:	0a1b      	lsrs	r3, r3, #8
 800d56e:	f36f 03c7 	bfc	r3, #3, #5
 800d572:	716b      	strb	r3, [r5, #5]
	style_txt.text.font = &lv_font_eurostile_24;
 800d574:	4b3b      	ldr	r3, [pc, #236]	; (800d664 <prog_swr+0x14c>)
 800d576:	626b      	str	r3, [r5, #36]	; 0x24
	style_txt.text.line_space = 24;
 800d578:	2318      	movs	r3, #24
	style_txt.text.letter_space = 2;
 800d57a:	f04f 0802 	mov.w	r8, #2
	style_txt.text.line_space = 24;
 800d57e:	856b      	strh	r3, [r5, #42]	; 0x2a
	rollerswr[0] = lv_roller_create(Tela_RF, NULL);
 800d580:	2100      	movs	r1, #0
	style_txt.text.color = LV_COLOR_WHITE;
 800d582:	8853      	ldrh	r3, [r2, #2]
 800d584:	842b      	strh	r3, [r5, #32]
	style_txt.text.letter_space = 2;
 800d586:	f8a5 8028 	strh.w	r8, [r5, #40]	; 0x28
	rollerswr[0] = lv_roller_create(Tela_RF, NULL);
 800d58a:	f00b fe51 	bl	8019230 <lv_roller_create>
	lv_obj_set_user_data(rollerswr[0], 5);
 800d58e:	2105      	movs	r1, #5
	rollerswr[0] = lv_roller_create(Tela_RF, NULL);
 800d590:	6020      	str	r0, [r4, #0]
	lv_obj_set_user_data(rollerswr[0], 5);
 800d592:	f002 f834 	bl	800f5fe <lv_obj_set_user_data>
    lv_roller_set_options(rollerswr[0], "0\n1\n2\n3\n4\n5\n6\n7\n8\n9", LV_ROLLER_MODE_INIFINITE);
 800d596:	2201      	movs	r2, #1
 800d598:	6820      	ldr	r0, [r4, #0]
 800d59a:	4933      	ldr	r1, [pc, #204]	; (800d668 <prog_swr+0x150>)
 800d59c:	f00b ffa2 	bl	80194e4 <lv_roller_set_options>
    lv_roller_set_visible_row_count(rollerswr[0], 2);
 800d5a0:	4641      	mov	r1, r8
 800d5a2:	6820      	ldr	r0, [r4, #0]
 800d5a4:	f00b fe28 	bl	80191f8 <lv_roller_set_visible_row_count>
    lv_roller_set_selected(rollerswr[0], un, true);
 800d5a8:	2201      	movs	r2, #1
 800d5aa:	b2b9      	uxth	r1, r7
 800d5ac:	6820      	ldr	r0, [r4, #0]
 800d5ae:	f00b fef5 	bl	801939c <lv_roller_set_selected>
    lv_ddlist_set_fix_width(roller, w);
 800d5b2:	6820      	ldr	r0, [r4, #0]
 800d5b4:	2122      	movs	r1, #34	; 0x22
 800d5b6:	f008 ff68 	bl	801648a <lv_ddlist_set_fix_width>
    lv_roller_set_style(rollerswr[0], LV_ROLLER_STYLE_BG, &style_txt);
 800d5ba:	462a      	mov	r2, r5
 800d5bc:	6820      	ldr	r0, [r4, #0]
 800d5be:	2100      	movs	r1, #0
 800d5c0:	f00b fec2 	bl	8019348 <lv_roller_set_style>
    lv_obj_align(rollerswr[0], NULL, LV_ALIGN_IN_TOP_LEFT, 39, 38);
 800d5c4:	2726      	movs	r7, #38	; 0x26
    lv_roller_set_style(rollerswr[0], LV_ROLLER_STYLE_SEL, &style_txt);
 800d5c6:	462a      	mov	r2, r5
 800d5c8:	6820      	ldr	r0, [r4, #0]
 800d5ca:	2101      	movs	r1, #1
 800d5cc:	f00b febc 	bl	8019348 <lv_roller_set_style>
    lv_obj_align(rollerswr[0], NULL, LV_ALIGN_IN_TOP_LEFT, 39, 38);
 800d5d0:	2327      	movs	r3, #39	; 0x27
 800d5d2:	2201      	movs	r2, #1
 800d5d4:	6820      	ldr	r0, [r4, #0]
 800d5d6:	9700      	str	r7, [sp, #0]
 800d5d8:	2100      	movs	r1, #0
 800d5da:	f001 fa51 	bl	800ea80 <lv_obj_align>
    lv_obj_set_event_cb(rollerswr[0], event_handler_swr);
 800d5de:	6820      	ldr	r0, [r4, #0]
 800d5e0:	4922      	ldr	r1, [pc, #136]	; (800d66c <prog_swr+0x154>)
 800d5e2:	f001 f8ae 	bl	800e742 <lv_obj_set_event_cb>
    rollerswr[1] = lv_roller_create(Tela_RF, NULL);
 800d5e6:	2100      	movs	r1, #0
 800d5e8:	f8d9 0000 	ldr.w	r0, [r9]
 800d5ec:	f00b fe20 	bl	8019230 <lv_roller_create>
    lv_obj_set_user_data(rollerswr[1], 4);
 800d5f0:	2104      	movs	r1, #4
    rollerswr[1] = lv_roller_create(Tela_RF, NULL);
 800d5f2:	6060      	str	r0, [r4, #4]
    lv_obj_set_user_data(rollerswr[1], 4);
 800d5f4:	f002 f803 	bl	800f5fe <lv_obj_set_user_data>
    lv_roller_set_options(rollerswr[1], "0\n1\n2\n3\n4\n5\n6\n7\n8\n9", LV_ROLLER_MODE_INIFINITE);
 800d5f8:	2201      	movs	r2, #1
 800d5fa:	6860      	ldr	r0, [r4, #4]
 800d5fc:	491a      	ldr	r1, [pc, #104]	; (800d668 <prog_swr+0x150>)
 800d5fe:	f00b ff71 	bl	80194e4 <lv_roller_set_options>
    lv_roller_set_visible_row_count(rollerswr[1], 2);
 800d602:	4641      	mov	r1, r8
 800d604:	6860      	ldr	r0, [r4, #4]
 800d606:	f00b fdf7 	bl	80191f8 <lv_roller_set_visible_row_count>
    lv_roller_set_selected(rollerswr[1], ml, true);
 800d60a:	2201      	movs	r2, #1
 800d60c:	b2b1      	uxth	r1, r6
 800d60e:	6860      	ldr	r0, [r4, #4]
 800d610:	f00b fec4 	bl	801939c <lv_roller_set_selected>
 800d614:	6860      	ldr	r0, [r4, #4]
 800d616:	2123      	movs	r1, #35	; 0x23
 800d618:	f008 ff37 	bl	801648a <lv_ddlist_set_fix_width>
    lv_roller_set_style(rollerswr[1], LV_ROLLER_STYLE_BG, &style_txt);
 800d61c:	462a      	mov	r2, r5
 800d61e:	6860      	ldr	r0, [r4, #4]
 800d620:	2100      	movs	r1, #0
 800d622:	f00b fe91 	bl	8019348 <lv_roller_set_style>
    lv_roller_set_style(rollerswr[1], LV_ROLLER_STYLE_SEL, &style_txt);
 800d626:	462a      	mov	r2, r5
 800d628:	6860      	ldr	r0, [r4, #4]
 800d62a:	2101      	movs	r1, #1
 800d62c:	f00b fe8c 	bl	8019348 <lv_roller_set_style>
    lv_obj_align(rollerswr[1], NULL, LV_ALIGN_IN_TOP_LEFT, 84, 38);
 800d630:	6860      	ldr	r0, [r4, #4]
 800d632:	9700      	str	r7, [sp, #0]
 800d634:	2354      	movs	r3, #84	; 0x54
 800d636:	2201      	movs	r2, #1
 800d638:	2100      	movs	r1, #0
 800d63a:	f001 fa21 	bl	800ea80 <lv_obj_align>
    lv_obj_set_event_cb(rollerswr[1], event_handler_swr);
 800d63e:	490b      	ldr	r1, [pc, #44]	; (800d66c <prog_swr+0x154>)
 800d640:	6860      	ldr	r0, [r4, #4]
}
 800d642:	b003      	add	sp, #12
 800d644:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    lv_obj_set_event_cb(rollerswr[1], event_handler_swr);
 800d648:	f001 b87b 	b.w	800e742 <lv_obj_set_event_cb>
		ml = 0;
 800d64c:	2600      	movs	r6, #0
		un = 0;
 800d64e:	4637      	mov	r7, r6
 800d650:	e777      	b.n	800d542 <prog_swr+0x2a>
 800d652:	bf00      	nop
 800d654:	20005c9c 	.word	0x20005c9c
 800d658:	2000c594 	.word	0x2000c594
 800d65c:	20005c14 	.word	0x20005c14
 800d660:	0801c5d6 	.word	0x0801c5d6
 800d664:	2000132c 	.word	0x2000132c
 800d668:	0802b6ae 	.word	0x0802b6ae
 800d66c:	0800ccf1 	.word	0x0800ccf1
 800d670:	20005b24 	.word	0x20005b24

0800d674 <screen_rf>:
	Tela_RF = lv_obj_create(NULL, NULL);
 800d674:	2100      	movs	r1, #0
{
 800d676:	b538      	push	{r3, r4, r5, lr}
	Tela_RF = lv_obj_create(NULL, NULL);
 800d678:	4608      	mov	r0, r1
 800d67a:	f001 fc23 	bl	800eec4 <lv_obj_create>
 800d67e:	4d19      	ldr	r5, [pc, #100]	; (800d6e4 <screen_rf+0x70>)
	img_fundo = lv_img_create(Tela_RF, NULL);
 800d680:	4c19      	ldr	r4, [pc, #100]	; (800d6e8 <screen_rf+0x74>)
	Tela_RF = lv_obj_create(NULL, NULL);
 800d682:	6028      	str	r0, [r5, #0]
	img_fundo = lv_img_create(Tela_RF, NULL);
 800d684:	2100      	movs	r1, #0
 800d686:	f009 fb1f 	bl	8016cc8 <lv_img_create>
    lv_img_set_src(img_fundo, &tela_rf);
 800d68a:	4918      	ldr	r1, [pc, #96]	; (800d6ec <screen_rf+0x78>)
	img_fundo = lv_img_create(Tela_RF, NULL);
 800d68c:	6020      	str	r0, [r4, #0]
    lv_img_set_src(img_fundo, &tela_rf);
 800d68e:	f009 fa8b 	bl	8016ba8 <lv_img_set_src>
	lv_obj_set_protect(img_fundo, LV_PROTECT_POS);
 800d692:	6820      	ldr	r0, [r4, #0]
 800d694:	2104      	movs	r1, #4
 800d696:	f001 f847 	bl	800e728 <lv_obj_set_protect>
	lv_obj_set_event_cb(img_fundo, btn_event_esc_rf);
 800d69a:	6820      	ldr	r0, [r4, #0]
 800d69c:	4914      	ldr	r1, [pc, #80]	; (800d6f0 <screen_rf+0x7c>)
 800d69e:	f001 f850 	bl	800e742 <lv_obj_set_event_cb>
	lv_obj_set_click(img_fundo, 1);
 800d6a2:	6820      	ldr	r0, [r4, #0]
	prog_swr(max_rfl);
 800d6a4:	4c13      	ldr	r4, [pc, #76]	; (800d6f4 <screen_rf+0x80>)
	lv_obj_set_click(img_fundo, 1);
 800d6a6:	2101      	movs	r1, #1
 800d6a8:	f001 f822 	bl	800e6f0 <lv_obj_set_click>
	btn_next_rf();
 800d6ac:	f7ff fecc 	bl	800d448 <btn_next_rf>
	create_vumeter_swr();
 800d6b0:	f7ff fb82 	bl	800cdb8 <create_vumeter_swr>
	prog_swr(max_rfl);
 800d6b4:	ed94 0a00 	vldr	s0, [r4]
 800d6b8:	f7ff ff2e 	bl	800d518 <prog_swr>
	update_vumeter_swr(max_rfl);
 800d6bc:	ed94 0a00 	vldr	s0, [r4]
 800d6c0:	f7ff fc5a 	bl	800cf78 <update_vumeter_swr>
 800d6c4:	6828      	ldr	r0, [r5, #0]
 800d6c6:	f000 fde9 	bl	800e29c <lv_disp_load_scr>
	Task_RF = lv_task_create(update_rf, 500, LV_TASK_PRIO_MID, NULL);
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	2203      	movs	r2, #3
 800d6ce:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800d6d2:	4809      	ldr	r0, [pc, #36]	; (800d6f8 <screen_rf+0x84>)
 800d6d4:	f007 f89e 	bl	8014814 <lv_task_create>
 800d6d8:	4b08      	ldr	r3, [pc, #32]	; (800d6fc <screen_rf+0x88>)
 800d6da:	6018      	str	r0, [r3, #0]
	TelaAtiva = TelaRF;
 800d6dc:	4b08      	ldr	r3, [pc, #32]	; (800d700 <screen_rf+0x8c>)
 800d6de:	2206      	movs	r2, #6
 800d6e0:	601a      	str	r2, [r3, #0]
 800d6e2:	bd38      	pop	{r3, r4, r5, pc}
 800d6e4:	20005b24 	.word	0x20005b24
 800d6e8:	20005bf8 	.word	0x20005bf8
 800d6ec:	20001bf8 	.word	0x20001bf8
 800d6f0:	0800cc81 	.word	0x0800cc81
 800d6f4:	20000008 	.word	0x20000008
 800d6f8:	0800d049 	.word	0x0800d049
 800d6fc:	20005b1c 	.word	0x20005b1c
 800d700:	200033e4 	.word	0x200033e4

0800d704 <btn_event_esc_rf1>:
	if(event == LV_EVENT_APPLY) {
 800d704:	2911      	cmp	r1, #17
{
 800d706:	b508      	push	{r3, lr}
	if(event == LV_EVENT_APPLY) {
 800d708:	d10b      	bne.n	800d722 <btn_event_esc_rf1+0x1e>
		lv_task_del(Task_RF_1);
 800d70a:	4b06      	ldr	r3, [pc, #24]	; (800d724 <btn_event_esc_rf1+0x20>)
 800d70c:	6818      	ldr	r0, [r3, #0]
 800d70e:	f006 ff91 	bl	8014634 <lv_task_del>
		lv_obj_del(Tela_RF_1);
 800d712:	4b05      	ldr	r3, [pc, #20]	; (800d728 <btn_event_esc_rf1+0x24>)
 800d714:	6818      	ldr	r0, [r3, #0]
 800d716:	f001 fdc6 	bl	800f2a6 <lv_obj_del>
}
 800d71a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_rf();
 800d71e:	f7ff bfa9 	b.w	800d674 <screen_rf>
 800d722:	bd08      	pop	{r3, pc}
 800d724:	20005b20 	.word	0x20005b20
 800d728:	20005b28 	.word	0x20005b28

0800d72c <prog_target>:
	if( fwd > 0) {
 800d72c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 800d734:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if( fwd > 0) {
 800d738:	f340 8092 	ble.w	800d860 <prog_target+0x134>
		teste = (uint32_t) fwd * 10;
 800d73c:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 800d740:	220a      	movs	r2, #10
 800d742:	ee10 3a10 	vmov	r3, s0
		un = teste / 100;
 800d746:	2664      	movs	r6, #100	; 0x64
		teste = (uint32_t) fwd * 10;
 800d748:	4353      	muls	r3, r2
		un = teste / 100;
 800d74a:	fbb3 f7f6 	udiv	r7, r3, r6
		ml = (teste % 100) / 10;
 800d74e:	fb06 3617 	mls	r6, r6, r7, r3
 800d752:	fbb6 f6f2 	udiv	r6, r6, r2
	lv_style_copy(&style_txt, &lv_style_plain_color);
 800d756:	4d44      	ldr	r5, [pc, #272]	; (800d868 <prog_target+0x13c>)
 800d758:	4944      	ldr	r1, [pc, #272]	; (800d86c <prog_target+0x140>)
	rollertarget[0] = lv_roller_create(Tela_RF, NULL);
 800d75a:	f8df 912c 	ldr.w	r9, [pc, #300]	; 800d888 <prog_target+0x15c>
 800d75e:	4c44      	ldr	r4, [pc, #272]	; (800d870 <prog_target+0x144>)
	lv_style_copy(&style_txt, &lv_style_plain_color);
 800d760:	4628      	mov	r0, r5
 800d762:	f002 fa8b 	bl	800fc7c <lv_style_copy>
	style_txt.body.main_color = LV_COLOR_GRAY;
 800d766:	4a43      	ldr	r2, [pc, #268]	; (800d874 <prog_target+0x148>)
	rollertarget[0] = lv_roller_create(Tela_RF, NULL);
 800d768:	f8d9 0000 	ldr.w	r0, [r9]
	style_txt.body.main_color = LV_COLOR_GRAY;
 800d76c:	8893      	ldrh	r3, [r2, #4]
 800d76e:	806b      	strh	r3, [r5, #2]
	style_txt.body.grad_color = LV_COLOR_BLACK;
 800d770:	792b      	ldrb	r3, [r5, #4]
 800d772:	f36f 0304 	bfc	r3, #0, #5
 800d776:	712b      	strb	r3, [r5, #4]
 800d778:	88ab      	ldrh	r3, [r5, #4]
 800d77a:	f36f 134a 	bfc	r3, #5, #6
 800d77e:	80ab      	strh	r3, [r5, #4]
 800d780:	0a1b      	lsrs	r3, r3, #8
 800d782:	f36f 03c7 	bfc	r3, #3, #5
 800d786:	716b      	strb	r3, [r5, #5]
	style_txt.text.font = &lv_font_eurostile_24;
 800d788:	4b3b      	ldr	r3, [pc, #236]	; (800d878 <prog_target+0x14c>)
 800d78a:	626b      	str	r3, [r5, #36]	; 0x24
	style_txt.text.line_space = 24;
 800d78c:	2318      	movs	r3, #24
	style_txt.text.letter_space = 2;
 800d78e:	f04f 0802 	mov.w	r8, #2
	style_txt.text.line_space = 24;
 800d792:	856b      	strh	r3, [r5, #42]	; 0x2a
	rollertarget[0] = lv_roller_create(Tela_RF, NULL);
 800d794:	2100      	movs	r1, #0
	style_txt.text.color = LV_COLOR_WHITE;
 800d796:	8853      	ldrh	r3, [r2, #2]
 800d798:	842b      	strh	r3, [r5, #32]
	style_txt.text.letter_space = 2;
 800d79a:	f8a5 8028 	strh.w	r8, [r5, #40]	; 0x28
	rollertarget[0] = lv_roller_create(Tela_RF, NULL);
 800d79e:	f00b fd47 	bl	8019230 <lv_roller_create>
	lv_obj_set_user_data(rollertarget[0], 5);
 800d7a2:	2105      	movs	r1, #5
	rollertarget[0] = lv_roller_create(Tela_RF, NULL);
 800d7a4:	6020      	str	r0, [r4, #0]
	lv_obj_set_user_data(rollertarget[0], 5);
 800d7a6:	f001 ff2a 	bl	800f5fe <lv_obj_set_user_data>
    lv_roller_set_options(rollertarget[0], "0\n1", LV_ROLLER_MODE_INIFINITE);
 800d7aa:	2201      	movs	r2, #1
 800d7ac:	6820      	ldr	r0, [r4, #0]
 800d7ae:	4933      	ldr	r1, [pc, #204]	; (800d87c <prog_target+0x150>)
 800d7b0:	f00b fe98 	bl	80194e4 <lv_roller_set_options>
    lv_roller_set_visible_row_count(rollertarget[0], 2);
 800d7b4:	4641      	mov	r1, r8
 800d7b6:	6820      	ldr	r0, [r4, #0]
 800d7b8:	f00b fd1e 	bl	80191f8 <lv_roller_set_visible_row_count>
    lv_roller_set_selected(rollertarget[0], un, true);
 800d7bc:	2201      	movs	r2, #1
 800d7be:	b2b9      	uxth	r1, r7
 800d7c0:	6820      	ldr	r0, [r4, #0]
 800d7c2:	f00b fdeb 	bl	801939c <lv_roller_set_selected>
 800d7c6:	6820      	ldr	r0, [r4, #0]
 800d7c8:	2122      	movs	r1, #34	; 0x22
 800d7ca:	f008 fe5e 	bl	801648a <lv_ddlist_set_fix_width>
    lv_roller_set_style(rollertarget[0], LV_ROLLER_STYLE_BG, &style_txt);
 800d7ce:	462a      	mov	r2, r5
 800d7d0:	6820      	ldr	r0, [r4, #0]
 800d7d2:	2100      	movs	r1, #0
 800d7d4:	f00b fdb8 	bl	8019348 <lv_roller_set_style>
    lv_obj_align(rollertarget[0], NULL, LV_ALIGN_IN_TOP_LEFT, 39, 38);
 800d7d8:	2726      	movs	r7, #38	; 0x26
    lv_roller_set_style(rollertarget[0], LV_ROLLER_STYLE_SEL, &style_txt);
 800d7da:	462a      	mov	r2, r5
 800d7dc:	6820      	ldr	r0, [r4, #0]
 800d7de:	2101      	movs	r1, #1
 800d7e0:	f00b fdb2 	bl	8019348 <lv_roller_set_style>
    lv_obj_align(rollertarget[0], NULL, LV_ALIGN_IN_TOP_LEFT, 39, 38);
 800d7e4:	2327      	movs	r3, #39	; 0x27
 800d7e6:	2201      	movs	r2, #1
 800d7e8:	6820      	ldr	r0, [r4, #0]
 800d7ea:	9700      	str	r7, [sp, #0]
 800d7ec:	2100      	movs	r1, #0
 800d7ee:	f001 f947 	bl	800ea80 <lv_obj_align>
    lv_obj_set_event_cb(rollertarget[0], event_handler_target);
 800d7f2:	6820      	ldr	r0, [r4, #0]
 800d7f4:	4922      	ldr	r1, [pc, #136]	; (800d880 <prog_target+0x154>)
 800d7f6:	f000 ffa4 	bl	800e742 <lv_obj_set_event_cb>
    rollertarget[1] = lv_roller_create(Tela_RF, NULL);
 800d7fa:	2100      	movs	r1, #0
 800d7fc:	f8d9 0000 	ldr.w	r0, [r9]
 800d800:	f00b fd16 	bl	8019230 <lv_roller_create>
    lv_obj_set_user_data(rollertarget[1], 4);
 800d804:	2104      	movs	r1, #4
    rollertarget[1] = lv_roller_create(Tela_RF, NULL);
 800d806:	6060      	str	r0, [r4, #4]
    lv_obj_set_user_data(rollertarget[1], 4);
 800d808:	f001 fef9 	bl	800f5fe <lv_obj_set_user_data>
    lv_roller_set_options(rollertarget[1], "0\n1\n2\n3\n4\n5\n6\n7\n8\n9", LV_ROLLER_MODE_INIFINITE);
 800d80c:	2201      	movs	r2, #1
 800d80e:	6860      	ldr	r0, [r4, #4]
 800d810:	491c      	ldr	r1, [pc, #112]	; (800d884 <prog_target+0x158>)
 800d812:	f00b fe67 	bl	80194e4 <lv_roller_set_options>
    lv_roller_set_visible_row_count(rollertarget[1], 2);
 800d816:	4641      	mov	r1, r8
 800d818:	6860      	ldr	r0, [r4, #4]
 800d81a:	f00b fced 	bl	80191f8 <lv_roller_set_visible_row_count>
    lv_roller_set_selected(rollertarget[1], ml, true);
 800d81e:	2201      	movs	r2, #1
 800d820:	b2b1      	uxth	r1, r6
 800d822:	6860      	ldr	r0, [r4, #4]
 800d824:	f00b fdba 	bl	801939c <lv_roller_set_selected>
 800d828:	6860      	ldr	r0, [r4, #4]
 800d82a:	2123      	movs	r1, #35	; 0x23
 800d82c:	f008 fe2d 	bl	801648a <lv_ddlist_set_fix_width>
    lv_roller_set_style(rollertarget[1], LV_ROLLER_STYLE_BG, &style_txt);
 800d830:	462a      	mov	r2, r5
 800d832:	6860      	ldr	r0, [r4, #4]
 800d834:	2100      	movs	r1, #0
 800d836:	f00b fd87 	bl	8019348 <lv_roller_set_style>
    lv_roller_set_style(rollertarget[1], LV_ROLLER_STYLE_SEL, &style_txt);
 800d83a:	462a      	mov	r2, r5
 800d83c:	6860      	ldr	r0, [r4, #4]
 800d83e:	2101      	movs	r1, #1
 800d840:	f00b fd82 	bl	8019348 <lv_roller_set_style>
    lv_obj_align(rollertarget[1], NULL, LV_ALIGN_IN_TOP_LEFT, 84, 38);
 800d844:	6860      	ldr	r0, [r4, #4]
 800d846:	9700      	str	r7, [sp, #0]
 800d848:	2354      	movs	r3, #84	; 0x54
 800d84a:	2201      	movs	r2, #1
 800d84c:	2100      	movs	r1, #0
 800d84e:	f001 f917 	bl	800ea80 <lv_obj_align>
    lv_obj_set_event_cb(rollertarget[1], event_handler_target);
 800d852:	490b      	ldr	r1, [pc, #44]	; (800d880 <prog_target+0x154>)
 800d854:	6860      	ldr	r0, [r4, #4]
}
 800d856:	b003      	add	sp, #12
 800d858:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    lv_obj_set_event_cb(rollertarget[1], event_handler_target);
 800d85c:	f000 bf71 	b.w	800e742 <lv_obj_set_event_cb>
		ml = 0;
 800d860:	2600      	movs	r6, #0
		un = 0;
 800d862:	4637      	mov	r7, r6
 800d864:	e777      	b.n	800d756 <prog_target+0x2a>
 800d866:	bf00      	nop
 800d868:	20005cd8 	.word	0x20005cd8
 800d86c:	2000c594 	.word	0x2000c594
 800d870:	20005c1c 	.word	0x20005c1c
 800d874:	0801c5d6 	.word	0x0801c5d6
 800d878:	2000132c 	.word	0x2000132c
 800d87c:	0802b64d 	.word	0x0802b64d
 800d880:	0800cd55 	.word	0x0800cd55
 800d884:	0802b6ae 	.word	0x0802b6ae
 800d888:	20005b24 	.word	0x20005b24

0800d88c <screen_RF_1>:
	Tela_RF_1 = lv_obj_create(NULL, NULL);
 800d88c:	2100      	movs	r1, #0
{
 800d88e:	b538      	push	{r3, r4, r5, lr}
	Tela_RF_1 = lv_obj_create(NULL, NULL);
 800d890:	4608      	mov	r0, r1
 800d892:	f001 fb17 	bl	800eec4 <lv_obj_create>
 800d896:	4d19      	ldr	r5, [pc, #100]	; (800d8fc <screen_RF_1+0x70>)
	img_fundo_1 = lv_img_create(Tela_RF_1, NULL);
 800d898:	4c19      	ldr	r4, [pc, #100]	; (800d900 <screen_RF_1+0x74>)
	Tela_RF_1 = lv_obj_create(NULL, NULL);
 800d89a:	6028      	str	r0, [r5, #0]
	img_fundo_1 = lv_img_create(Tela_RF_1, NULL);
 800d89c:	2100      	movs	r1, #0
 800d89e:	f009 fa13 	bl	8016cc8 <lv_img_create>
	lv_img_set_src(img_fundo_1, &tela_rf_1);
 800d8a2:	4918      	ldr	r1, [pc, #96]	; (800d904 <screen_RF_1+0x78>)
	img_fundo_1 = lv_img_create(Tela_RF_1, NULL);
 800d8a4:	6020      	str	r0, [r4, #0]
	lv_img_set_src(img_fundo_1, &tela_rf_1);
 800d8a6:	f009 f97f 	bl	8016ba8 <lv_img_set_src>
	lv_obj_set_protect(img_fundo_1, LV_PROTECT_POS);
 800d8aa:	6820      	ldr	r0, [r4, #0]
 800d8ac:	2104      	movs	r1, #4
 800d8ae:	f000 ff3b 	bl	800e728 <lv_obj_set_protect>
	lv_obj_set_event_cb(img_fundo_1, btn_event_esc_rf1);
 800d8b2:	6820      	ldr	r0, [r4, #0]
 800d8b4:	4914      	ldr	r1, [pc, #80]	; (800d908 <screen_RF_1+0x7c>)
 800d8b6:	f000 ff44 	bl	800e742 <lv_obj_set_event_cb>
	lv_obj_set_click(img_fundo_1, 1);
 800d8ba:	6820      	ldr	r0, [r4, #0]
	prog_target(target);
 800d8bc:	4c13      	ldr	r4, [pc, #76]	; (800d90c <screen_RF_1+0x80>)
	lv_obj_set_click(img_fundo_1, 1);
 800d8be:	2101      	movs	r1, #1
 800d8c0:	f000 ff16 	bl	800e6f0 <lv_obj_set_click>
	btn_next_rf1();
 800d8c4:	f7ff fdf4 	bl	800d4b0 <btn_next_rf1>
	create_vumeter_fwd();
 800d8c8:	f7ff fd4e 	bl	800d368 <create_vumeter_fwd>
	prog_target(target);
 800d8cc:	ed94 0a00 	vldr	s0, [r4]
 800d8d0:	f7ff ff2c 	bl	800d72c <prog_target>
	update_vumeter_fwd(target);
 800d8d4:	ed94 0a00 	vldr	s0, [r4]
 800d8d8:	f7ff fbbe 	bl	800d058 <update_vumeter_fwd>
 800d8dc:	6828      	ldr	r0, [r5, #0]
 800d8de:	f000 fcdd 	bl	800e29c <lv_disp_load_scr>
	Task_RF_1 = lv_task_create(update_rf_1, 500, LV_TASK_PRIO_MID, NULL);
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	2203      	movs	r2, #3
 800d8e6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800d8ea:	4809      	ldr	r0, [pc, #36]	; (800d910 <screen_RF_1+0x84>)
 800d8ec:	f006 ff92 	bl	8014814 <lv_task_create>
 800d8f0:	4b08      	ldr	r3, [pc, #32]	; (800d914 <screen_RF_1+0x88>)
 800d8f2:	6018      	str	r0, [r3, #0]
	TelaAtiva = TelaRF_1;
 800d8f4:	4b08      	ldr	r3, [pc, #32]	; (800d918 <screen_RF_1+0x8c>)
 800d8f6:	2207      	movs	r2, #7
 800d8f8:	601a      	str	r2, [r3, #0]
 800d8fa:	bd38      	pop	{r3, r4, r5, pc}
 800d8fc:	20005b28 	.word	0x20005b28
 800d900:	20005bfc 	.word	0x20005bfc
 800d904:	20001c04 	.word	0x20001c04
 800d908:	0800d705 	.word	0x0800d705
 800d90c:	20000010 	.word	0x20000010
 800d910:	0800d0fd 	.word	0x0800d0fd
 800d914:	20005b20 	.word	0x20005b20
 800d918:	200033e4 	.word	0x200033e4

0800d91c <btn_event_esc_rf2>:
	if(event == LV_EVENT_APPLY) {
 800d91c:	2911      	cmp	r1, #17
{
 800d91e:	b508      	push	{r3, lr}
	if(event == LV_EVENT_APPLY) {
 800d920:	d107      	bne.n	800d932 <btn_event_esc_rf2+0x16>
		lv_obj_del(Tela_RF_2);
 800d922:	4b04      	ldr	r3, [pc, #16]	; (800d934 <btn_event_esc_rf2+0x18>)
 800d924:	6818      	ldr	r0, [r3, #0]
 800d926:	f001 fcbe 	bl	800f2a6 <lv_obj_del>
}
 800d92a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_RF_1();
 800d92e:	f7ff bfad 	b.w	800d88c <screen_RF_1>
 800d932:	bd08      	pop	{r3, pc}
 800d934:	20005b2c 	.word	0x20005b2c

0800d938 <btn_event_next_rf>:
	if(event == LV_EVENT_APPLY) {
 800d938:	2911      	cmp	r1, #17
{
 800d93a:	b508      	push	{r3, lr}
	if(event == LV_EVENT_APPLY) {
 800d93c:	d10b      	bne.n	800d956 <btn_event_next_rf+0x1e>
		lv_task_del(Task_RF);
 800d93e:	4b06      	ldr	r3, [pc, #24]	; (800d958 <btn_event_next_rf+0x20>)
 800d940:	6818      	ldr	r0, [r3, #0]
 800d942:	f006 fe77 	bl	8014634 <lv_task_del>
		lv_obj_del(Tela_RF);
 800d946:	4b05      	ldr	r3, [pc, #20]	; (800d95c <btn_event_next_rf+0x24>)
 800d948:	6818      	ldr	r0, [r3, #0]
 800d94a:	f001 fcac 	bl	800f2a6 <lv_obj_del>
}
 800d94e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_RF_1();
 800d952:	f7ff bf9b 	b.w	800d88c <screen_RF_1>
 800d956:	bd08      	pop	{r3, pc}
 800d958:	20005b1c 	.word	0x20005b1c
 800d95c:	20005b24 	.word	0x20005b24

0800d960 <ButtonEventTelaRF>:
}

void ButtonEventTelaRF(uint8_t event, uint8_t tipo, uint8_t id)
{
	if(event == EVT_PBTN_INPUT) {
 800d960:	2810      	cmp	r0, #16
 800d962:	d10e      	bne.n	800d982 <ButtonEventTelaRF+0x22>
		if(tipo == PBTN_SCLK) {	// Single Click
 800d964:	2901      	cmp	r1, #1
 800d966:	d10c      	bne.n	800d982 <ButtonEventTelaRF+0x22>
			switch(id) {
 800d968:	b112      	cbz	r2, 800d970 <ButtonEventTelaRF+0x10>
 800d96a:	2a01      	cmp	r2, #1
 800d96c:	d005      	beq.n	800d97a <ButtonEventTelaRF+0x1a>
 800d96e:	4770      	bx	lr
				case KEY_DN:
					lv_event_send(img_fundo, LV_EVENT_APPLY, NULL);
 800d970:	4b04      	ldr	r3, [pc, #16]	; (800d984 <ButtonEventTelaRF+0x24>)
 800d972:	2111      	movs	r1, #17
					break;
				case KEY_UP:
					lv_event_send(imgbtn_next[0], LV_EVENT_APPLY, NULL);
 800d974:	6818      	ldr	r0, [r3, #0]
 800d976:	f000 bf2b 	b.w	800e7d0 <lv_event_send>
 800d97a:	2200      	movs	r2, #0
 800d97c:	2111      	movs	r1, #17
 800d97e:	4b02      	ldr	r3, [pc, #8]	; (800d988 <ButtonEventTelaRF+0x28>)
 800d980:	e7f8      	b.n	800d974 <ButtonEventTelaRF+0x14>
 800d982:	4770      	bx	lr
 800d984:	20005bf8 	.word	0x20005bf8
 800d988:	20005c0c 	.word	0x20005c0c

0800d98c <ButtonEventTelaRF_1>:
	}
}

void ButtonEventTelaRF_1(uint8_t event, uint8_t tipo, uint8_t id)
{
	if(event == EVT_PBTN_INPUT) {
 800d98c:	2810      	cmp	r0, #16
 800d98e:	d10f      	bne.n	800d9b0 <ButtonEventTelaRF_1+0x24>
		if(tipo == PBTN_SCLK) {	// Single Click
 800d990:	2901      	cmp	r1, #1
 800d992:	d10d      	bne.n	800d9b0 <ButtonEventTelaRF_1+0x24>
			switch(id) {
 800d994:	b112      	cbz	r2, 800d99c <ButtonEventTelaRF_1+0x10>
 800d996:	2a01      	cmp	r2, #1
 800d998:	d005      	beq.n	800d9a6 <ButtonEventTelaRF_1+0x1a>
 800d99a:	4770      	bx	lr
				case KEY_DN:
					lv_event_send(img_fundo_1, LV_EVENT_APPLY, NULL);
 800d99c:	4b05      	ldr	r3, [pc, #20]	; (800d9b4 <ButtonEventTelaRF_1+0x28>)
 800d99e:	6818      	ldr	r0, [r3, #0]
 800d9a0:	2111      	movs	r1, #17
					break;
				case KEY_UP:
					lv_event_send(imgbtn_next[1], LV_EVENT_APPLY, NULL);
 800d9a2:	f000 bf15 	b.w	800e7d0 <lv_event_send>
 800d9a6:	4b04      	ldr	r3, [pc, #16]	; (800d9b8 <ButtonEventTelaRF_1+0x2c>)
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	2111      	movs	r1, #17
 800d9ac:	6858      	ldr	r0, [r3, #4]
 800d9ae:	e7f8      	b.n	800d9a2 <ButtonEventTelaRF_1+0x16>
 800d9b0:	4770      	bx	lr
 800d9b2:	bf00      	nop
 800d9b4:	20005bfc 	.word	0x20005bfc
 800d9b8:	20005c0c 	.word	0x20005c0c

0800d9bc <ButtonEventTelaRF_2>:
	}
}

void ButtonEventTelaRF_2(uint8_t event, uint8_t tipo, uint8_t id)
{
	if(event == EVT_PBTN_INPUT) {
 800d9bc:	2810      	cmp	r0, #16
 800d9be:	d107      	bne.n	800d9d0 <ButtonEventTelaRF_2+0x14>
		if(tipo == PBTN_SCLK) {	// Single Click
 800d9c0:	2901      	cmp	r1, #1
 800d9c2:	d105      	bne.n	800d9d0 <ButtonEventTelaRF_2+0x14>
			switch(id) {
 800d9c4:	b922      	cbnz	r2, 800d9d0 <ButtonEventTelaRF_2+0x14>
				case KEY_DN:
					lv_event_send(img_fundo_2, LV_EVENT_APPLY, NULL);
 800d9c6:	4b03      	ldr	r3, [pc, #12]	; (800d9d4 <ButtonEventTelaRF_2+0x18>)
 800d9c8:	2111      	movs	r1, #17
 800d9ca:	6818      	ldr	r0, [r3, #0]
 800d9cc:	f000 bf00 	b.w	800e7d0 <lv_event_send>
 800d9d0:	4770      	bx	lr
 800d9d2:	bf00      	nop
 800d9d4:	20005c00 	.word	0x20005c00

0800d9d8 <btn_event_esc_sel>:
	lv_obj_set_pos(imgbtn1[3], 1, 100);
}

static void btn_event_esc_sel(lv_obj_t * btn, lv_event_t event)
{
	if(event == LV_EVENT_APPLY) {
 800d9d8:	2911      	cmp	r1, #17
{
 800d9da:	b508      	push	{r3, lr}
	if(event == LV_EVENT_APPLY) {
 800d9dc:	d109      	bne.n	800d9f2 <btn_event_esc_sel+0x1a>
		uint32_t id = lv_obj_get_user_data(btn);
 800d9de:	f001 fe0c 	bl	800f5fa <lv_obj_get_user_data>
		lv_obj_del(Tela_Sel);
 800d9e2:	4b04      	ldr	r3, [pc, #16]	; (800d9f4 <btn_event_esc_sel+0x1c>)
 800d9e4:	6818      	ldr	r0, [r3, #0]
 800d9e6:	f001 fc5e 	bl	800f2a6 <lv_obj_del>
		main_screen();
	}
}
 800d9ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		main_screen();
 800d9ee:	f7fa bc61 	b.w	80082b4 <main_screen>
 800d9f2:	bd08      	pop	{r3, pc}
 800d9f4:	20005d50 	.word	0x20005d50

0800d9f8 <btn_event_btn1>:
	}
}

static void btn_event_btn1(lv_obj_t * btn, lv_event_t event)
{
	if(event == LV_EVENT_APPLY) {
 800d9f8:	2911      	cmp	r1, #17
{
 800d9fa:	b510      	push	{r4, lr}
	if(event == LV_EVENT_APPLY) {
 800d9fc:	d11c      	bne.n	800da38 <btn_event_btn1+0x40>
		uint32_t id = lv_obj_get_user_data(btn);
 800d9fe:	f001 fdfc 	bl	800f5fa <lv_obj_get_user_data>
		lv_obj_del(Tela_Sel);
 800da02:	4b0e      	ldr	r3, [pc, #56]	; (800da3c <btn_event_btn1+0x44>)
		uint32_t id = lv_obj_get_user_data(btn);
 800da04:	4604      	mov	r4, r0
		lv_obj_del(Tela_Sel);
 800da06:	6818      	ldr	r0, [r3, #0]
 800da08:	f001 fc4d 	bl	800f2a6 <lv_obj_del>
		switch(id) {
 800da0c:	2c03      	cmp	r4, #3
 800da0e:	d813      	bhi.n	800da38 <btn_event_btn1+0x40>
 800da10:	e8df f004 	tbb	[pc, r4]
 800da14:	0e0a0602 	.word	0x0e0a0602
			case 3:
				screen_readings();
				break;
		}
	}
}
 800da18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				screen_freq();
 800da1c:	f7fd bb66 	b.w	800b0ec <screen_freq>
}
 800da20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				screen_audio();
 800da24:	f7fc b81a 	b.w	8009a5c <screen_audio>
}
 800da28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				screen_rf();
 800da2c:	f7ff be22 	b.w	800d674 <screen_rf>
}
 800da30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				screen_readings();
 800da34:	f7ff b8b0 	b.w	800cb98 <screen_readings>
 800da38:	bd10      	pop	{r4, pc}
 800da3a:	bf00      	nop
 800da3c:	20005d50 	.word	0x20005d50

0800da40 <create_buttons>:
{
 800da40:	b570      	push	{r4, r5, r6, lr}
	imgbtn1[0] = lv_imgbtn_create(Tela_Sel, NULL);
 800da42:	4e64      	ldr	r6, [pc, #400]	; (800dbd4 <create_buttons+0x194>)
 800da44:	4c64      	ldr	r4, [pc, #400]	; (800dbd8 <create_buttons+0x198>)
 800da46:	6830      	ldr	r0, [r6, #0]
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_REL, &Btn_Frequency);
 800da48:	4d64      	ldr	r5, [pc, #400]	; (800dbdc <create_buttons+0x19c>)
	imgbtn1[0] = lv_imgbtn_create(Tela_Sel, NULL);
 800da4a:	2100      	movs	r1, #0
 800da4c:	f009 fa66 	bl	8016f1c <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn1[0], 0);
 800da50:	2100      	movs	r1, #0
	imgbtn1[0] = lv_imgbtn_create(Tela_Sel, NULL);
 800da52:	6020      	str	r0, [r4, #0]
	lv_obj_set_user_data(imgbtn1[0], 0);
 800da54:	f001 fdd3 	bl	800f5fe <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_REL, &Btn_Frequency);
 800da58:	462a      	mov	r2, r5
 800da5a:	6820      	ldr	r0, [r4, #0]
 800da5c:	2100      	movs	r1, #0
 800da5e:	f009 faa5 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_TGL_REL, &Btn_Frequency);
 800da62:	462a      	mov	r2, r5
 800da64:	6820      	ldr	r0, [r4, #0]
 800da66:	2102      	movs	r1, #2
 800da68:	f009 faa0 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_TGL_PR, &Btn_Frequency_am);
 800da6c:	6820      	ldr	r0, [r4, #0]
 800da6e:	4a5c      	ldr	r2, [pc, #368]	; (800dbe0 <create_buttons+0x1a0>)
 800da70:	2103      	movs	r1, #3
 800da72:	f009 fa9b 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_PR, &Btn_Frequency);
 800da76:	462a      	mov	r2, r5
 800da78:	6820      	ldr	r0, [r4, #0]
 800da7a:	2101      	movs	r1, #1
 800da7c:	f009 fa96 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_REL, &Btn_Frequency);
 800da80:	462a      	mov	r2, r5
 800da82:	6820      	ldr	r0, [r4, #0]
 800da84:	2100      	movs	r1, #0
 800da86:	f009 fa91 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_INA, &Btn_Frequency);
 800da8a:	462a      	mov	r2, r5
 800da8c:	6820      	ldr	r0, [r4, #0]
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_REL, &Btn_Audio);
 800da8e:	4d55      	ldr	r5, [pc, #340]	; (800dbe4 <create_buttons+0x1a4>)
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_INA, &Btn_Frequency);
 800da90:	2104      	movs	r1, #4
 800da92:	f009 fa8b 	bl	8016fac <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn1[0], btn_event_btn1);
 800da96:	6820      	ldr	r0, [r4, #0]
 800da98:	4953      	ldr	r1, [pc, #332]	; (800dbe8 <create_buttons+0x1a8>)
 800da9a:	f000 fe52 	bl	800e742 <lv_obj_set_event_cb>
	lv_group_add_obj(group, imgbtn1[0]);
 800da9e:	6821      	ldr	r1, [r4, #0]
 800daa0:	2000      	movs	r0, #0
 800daa2:	f000 fccb 	bl	800e43c <lv_group_add_obj>
	lv_obj_set_pos(imgbtn1[0], 1, 18);
 800daa6:	2212      	movs	r2, #18
 800daa8:	6820      	ldr	r0, [r4, #0]
 800daaa:	2101      	movs	r1, #1
 800daac:	f000 ff93 	bl	800e9d6 <lv_obj_set_pos>
	imgbtn1[1] = lv_imgbtn_create(Tela_Sel, imgbtn1[0]);
 800dab0:	6821      	ldr	r1, [r4, #0]
 800dab2:	6830      	ldr	r0, [r6, #0]
 800dab4:	f009 fa32 	bl	8016f1c <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn1[1], 1);
 800dab8:	2101      	movs	r1, #1
	imgbtn1[1] = lv_imgbtn_create(Tela_Sel, imgbtn1[0]);
 800daba:	6060      	str	r0, [r4, #4]
	lv_obj_set_user_data(imgbtn1[1], 1);
 800dabc:	f001 fd9f 	bl	800f5fe <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_REL, &Btn_Audio);
 800dac0:	462a      	mov	r2, r5
 800dac2:	6860      	ldr	r0, [r4, #4]
 800dac4:	2100      	movs	r1, #0
 800dac6:	f009 fa71 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_TGL_REL, &Btn_Audio);
 800daca:	462a      	mov	r2, r5
 800dacc:	6860      	ldr	r0, [r4, #4]
 800dace:	2102      	movs	r1, #2
 800dad0:	f009 fa6c 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_TGL_PR, &Btn_Audio_am);
 800dad4:	6860      	ldr	r0, [r4, #4]
 800dad6:	4a45      	ldr	r2, [pc, #276]	; (800dbec <create_buttons+0x1ac>)
 800dad8:	2103      	movs	r1, #3
 800dada:	f009 fa67 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_PR, &Btn_Audio);
 800dade:	462a      	mov	r2, r5
 800dae0:	6860      	ldr	r0, [r4, #4]
 800dae2:	2101      	movs	r1, #1
 800dae4:	f009 fa62 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_REL, &Btn_Audio);
 800dae8:	462a      	mov	r2, r5
 800daea:	6860      	ldr	r0, [r4, #4]
 800daec:	2100      	movs	r1, #0
 800daee:	f009 fa5d 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_INA, &Btn_Audio);
 800daf2:	462a      	mov	r2, r5
 800daf4:	6860      	ldr	r0, [r4, #4]
	lv_imgbtn_set_src(imgbtn1[2], LV_BTN_STATE_REL, &Btn_RF);
 800daf6:	4d3e      	ldr	r5, [pc, #248]	; (800dbf0 <create_buttons+0x1b0>)
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_INA, &Btn_Audio);
 800daf8:	2104      	movs	r1, #4
 800dafa:	f009 fa57 	bl	8016fac <lv_imgbtn_set_src>
	lv_group_add_obj(group, imgbtn1[1]);
 800dafe:	6861      	ldr	r1, [r4, #4]
 800db00:	2000      	movs	r0, #0
 800db02:	f000 fc9b 	bl	800e43c <lv_group_add_obj>
	lv_obj_set_pos(imgbtn1[1], 1, 45);
 800db06:	222d      	movs	r2, #45	; 0x2d
 800db08:	6860      	ldr	r0, [r4, #4]
 800db0a:	2101      	movs	r1, #1
 800db0c:	f000 ff63 	bl	800e9d6 <lv_obj_set_pos>
	imgbtn1[2] = lv_imgbtn_create(Tela_Sel, imgbtn1[0]);
 800db10:	6821      	ldr	r1, [r4, #0]
 800db12:	6830      	ldr	r0, [r6, #0]
 800db14:	f009 fa02 	bl	8016f1c <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn1[2], 2);
 800db18:	2102      	movs	r1, #2
	imgbtn1[2] = lv_imgbtn_create(Tela_Sel, imgbtn1[0]);
 800db1a:	60a0      	str	r0, [r4, #8]
	lv_obj_set_user_data(imgbtn1[2], 2);
 800db1c:	f001 fd6f 	bl	800f5fe <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn1[2], LV_BTN_STATE_REL, &Btn_RF);
 800db20:	462a      	mov	r2, r5
 800db22:	68a0      	ldr	r0, [r4, #8]
 800db24:	2100      	movs	r1, #0
 800db26:	f009 fa41 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[2], LV_BTN_STATE_TGL_REL, &Btn_RF);
 800db2a:	462a      	mov	r2, r5
 800db2c:	68a0      	ldr	r0, [r4, #8]
 800db2e:	2102      	movs	r1, #2
 800db30:	f009 fa3c 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[2], LV_BTN_STATE_TGL_PR, &Btn_RF_am);
 800db34:	68a0      	ldr	r0, [r4, #8]
 800db36:	4a2f      	ldr	r2, [pc, #188]	; (800dbf4 <create_buttons+0x1b4>)
 800db38:	2103      	movs	r1, #3
 800db3a:	f009 fa37 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[2], LV_BTN_STATE_PR, &Btn_RF);
 800db3e:	462a      	mov	r2, r5
 800db40:	68a0      	ldr	r0, [r4, #8]
 800db42:	2101      	movs	r1, #1
 800db44:	f009 fa32 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[2], LV_BTN_STATE_REL, &Btn_RF);
 800db48:	462a      	mov	r2, r5
 800db4a:	68a0      	ldr	r0, [r4, #8]
 800db4c:	2100      	movs	r1, #0
 800db4e:	f009 fa2d 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[2], LV_BTN_STATE_INA, &Btn_RF);
 800db52:	462a      	mov	r2, r5
 800db54:	68a0      	ldr	r0, [r4, #8]
	lv_imgbtn_set_src(imgbtn1[3], LV_BTN_STATE_REL, &Btn_Readings);
 800db56:	4d28      	ldr	r5, [pc, #160]	; (800dbf8 <create_buttons+0x1b8>)
	lv_imgbtn_set_src(imgbtn1[2], LV_BTN_STATE_INA, &Btn_RF);
 800db58:	2104      	movs	r1, #4
 800db5a:	f009 fa27 	bl	8016fac <lv_imgbtn_set_src>
	lv_group_add_obj(group, imgbtn1[2]);
 800db5e:	68a1      	ldr	r1, [r4, #8]
 800db60:	2000      	movs	r0, #0
 800db62:	f000 fc6b 	bl	800e43c <lv_group_add_obj>
	lv_obj_set_pos(imgbtn1[2], 1, 73);
 800db66:	2249      	movs	r2, #73	; 0x49
 800db68:	68a0      	ldr	r0, [r4, #8]
 800db6a:	2101      	movs	r1, #1
 800db6c:	f000 ff33 	bl	800e9d6 <lv_obj_set_pos>
	imgbtn1[3] = lv_imgbtn_create(Tela_Sel, imgbtn1[0]);
 800db70:	6821      	ldr	r1, [r4, #0]
 800db72:	6830      	ldr	r0, [r6, #0]
 800db74:	f009 f9d2 	bl	8016f1c <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn1[3], 3);
 800db78:	2103      	movs	r1, #3
	imgbtn1[3] = lv_imgbtn_create(Tela_Sel, imgbtn1[0]);
 800db7a:	60e0      	str	r0, [r4, #12]
	lv_obj_set_user_data(imgbtn1[3], 3);
 800db7c:	f001 fd3f 	bl	800f5fe <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn1[3], LV_BTN_STATE_REL, &Btn_Readings);
 800db80:	462a      	mov	r2, r5
 800db82:	68e0      	ldr	r0, [r4, #12]
 800db84:	2100      	movs	r1, #0
 800db86:	f009 fa11 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[3], LV_BTN_STATE_TGL_REL, &Btn_Readings);
 800db8a:	462a      	mov	r2, r5
 800db8c:	68e0      	ldr	r0, [r4, #12]
 800db8e:	2102      	movs	r1, #2
 800db90:	f009 fa0c 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[3], LV_BTN_STATE_TGL_PR, &Btn_Readings_am);
 800db94:	68e0      	ldr	r0, [r4, #12]
 800db96:	4a19      	ldr	r2, [pc, #100]	; (800dbfc <create_buttons+0x1bc>)
 800db98:	2103      	movs	r1, #3
 800db9a:	f009 fa07 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[3], LV_BTN_STATE_PR, &Btn_Readings);
 800db9e:	462a      	mov	r2, r5
 800dba0:	68e0      	ldr	r0, [r4, #12]
 800dba2:	2101      	movs	r1, #1
 800dba4:	f009 fa02 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[3], LV_BTN_STATE_REL, &Btn_Readings);
 800dba8:	462a      	mov	r2, r5
 800dbaa:	68e0      	ldr	r0, [r4, #12]
 800dbac:	2100      	movs	r1, #0
 800dbae:	f009 f9fd 	bl	8016fac <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[3], LV_BTN_STATE_INA, &Btn_Readings);
 800dbb2:	462a      	mov	r2, r5
 800dbb4:	68e0      	ldr	r0, [r4, #12]
 800dbb6:	2104      	movs	r1, #4
 800dbb8:	f009 f9f8 	bl	8016fac <lv_imgbtn_set_src>
	lv_group_add_obj(group, imgbtn1[3]);
 800dbbc:	68e1      	ldr	r1, [r4, #12]
 800dbbe:	2000      	movs	r0, #0
 800dbc0:	f000 fc3c 	bl	800e43c <lv_group_add_obj>
	lv_obj_set_pos(imgbtn1[3], 1, 100);
 800dbc4:	68e0      	ldr	r0, [r4, #12]
 800dbc6:	2264      	movs	r2, #100	; 0x64
 800dbc8:	2101      	movs	r1, #1
}
 800dbca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	lv_obj_set_pos(imgbtn1[3], 1, 100);
 800dbce:	f000 bf02 	b.w	800e9d6 <lv_obj_set_pos>
 800dbd2:	bf00      	nop
 800dbd4:	20005d50 	.word	0x20005d50
 800dbd8:	20005d58 	.word	0x20005d58
 800dbdc:	200019b8 	.word	0x200019b8
 800dbe0:	200019c4 	.word	0x200019c4
 800dbe4:	200019a0 	.word	0x200019a0
 800dbe8:	0800d9f9 	.word	0x0800d9f9
 800dbec:	200019ac 	.word	0x200019ac
 800dbf0:	200019d0 	.word	0x200019d0
 800dbf4:	200019dc 	.word	0x200019dc
 800dbf8:	200019e8 	.word	0x200019e8
 800dbfc:	200019f4 	.word	0x200019f4

0800dc00 <screen_sel>:
{
 800dc00:	b570      	push	{r4, r5, r6, lr}
	MenuSel = 0;
 800dc02:	4b1d      	ldr	r3, [pc, #116]	; (800dc78 <screen_sel+0x78>)
	Tela_Sel = lv_obj_create(NULL, NULL);
 800dc04:	4e1d      	ldr	r6, [pc, #116]	; (800dc7c <screen_sel+0x7c>)
	img_fundo = lv_img_create(Tela_Sel, NULL);
 800dc06:	4c1e      	ldr	r4, [pc, #120]	; (800dc80 <screen_sel+0x80>)
	MenuSel = 0;
 800dc08:	2500      	movs	r5, #0
	Tela_Sel = lv_obj_create(NULL, NULL);
 800dc0a:	4629      	mov	r1, r5
 800dc0c:	4628      	mov	r0, r5
	MenuSel = 0;
 800dc0e:	701d      	strb	r5, [r3, #0]
	Tela_Sel = lv_obj_create(NULL, NULL);
 800dc10:	f001 f958 	bl	800eec4 <lv_obj_create>
	img_fundo = lv_img_create(Tela_Sel, NULL);
 800dc14:	4629      	mov	r1, r5
	Tela_Sel = lv_obj_create(NULL, NULL);
 800dc16:	6030      	str	r0, [r6, #0]
	img_fundo = lv_img_create(Tela_Sel, NULL);
 800dc18:	f009 f856 	bl	8016cc8 <lv_img_create>
	lv_img_set_src(img_fundo, &tela_sel);
 800dc1c:	4919      	ldr	r1, [pc, #100]	; (800dc84 <screen_sel+0x84>)
	img_fundo = lv_img_create(Tela_Sel, NULL);
 800dc1e:	6020      	str	r0, [r4, #0]
	lv_img_set_src(img_fundo, &tela_sel);
 800dc20:	f008 ffc2 	bl	8016ba8 <lv_img_set_src>
	lv_obj_set_protect(img_fundo, LV_PROTECT_POS);
 800dc24:	6820      	ldr	r0, [r4, #0]
 800dc26:	2104      	movs	r1, #4
 800dc28:	f000 fd7e 	bl	800e728 <lv_obj_set_protect>
	lv_obj_set_user_data(img_fundo, 0);
 800dc2c:	6820      	ldr	r0, [r4, #0]
 800dc2e:	4629      	mov	r1, r5
 800dc30:	f001 fce5 	bl	800f5fe <lv_obj_set_user_data>
	lv_obj_set_event_cb(img_fundo, btn_event_esc_sel);
 800dc34:	6820      	ldr	r0, [r4, #0]
 800dc36:	4914      	ldr	r1, [pc, #80]	; (800dc88 <screen_sel+0x88>)
 800dc38:	f000 fd83 	bl	800e742 <lv_obj_set_event_cb>
	lv_obj_set_click(img_fundo, 1);
 800dc3c:	6820      	ldr	r0, [r4, #0]
	lv_btn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_PR);
 800dc3e:	4c13      	ldr	r4, [pc, #76]	; (800dc8c <screen_sel+0x8c>)
	lv_obj_set_click(img_fundo, 1);
 800dc40:	2101      	movs	r1, #1
 800dc42:	f000 fd55 	bl	800e6f0 <lv_obj_set_click>
	create_buttons();
 800dc46:	f7ff fefb 	bl	800da40 <create_buttons>
	lv_btn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_PR);
 800dc4a:	2103      	movs	r1, #3
 800dc4c:	6820      	ldr	r0, [r4, #0]
 800dc4e:	f007 fad9 	bl	8015204 <lv_btn_set_state>
	lv_btn_set_state(imgbtn1[1], LV_BTN_STATE_TGL_REL);
 800dc52:	2102      	movs	r1, #2
 800dc54:	6860      	ldr	r0, [r4, #4]
 800dc56:	f007 fad5 	bl	8015204 <lv_btn_set_state>
	lv_btn_set_state(imgbtn1[2], LV_BTN_STATE_TGL_REL);
 800dc5a:	2102      	movs	r1, #2
 800dc5c:	68a0      	ldr	r0, [r4, #8]
 800dc5e:	f007 fad1 	bl	8015204 <lv_btn_set_state>
	lv_btn_set_state(imgbtn1[3], LV_BTN_STATE_TGL_REL);
 800dc62:	2102      	movs	r1, #2
 800dc64:	68e0      	ldr	r0, [r4, #12]
 800dc66:	f007 facd 	bl	8015204 <lv_btn_set_state>
 800dc6a:	6830      	ldr	r0, [r6, #0]
 800dc6c:	f000 fb16 	bl	800e29c <lv_disp_load_scr>
	TelaAtiva = TelaSelecao;
 800dc70:	4b07      	ldr	r3, [pc, #28]	; (800dc90 <screen_sel+0x90>)
 800dc72:	2201      	movs	r2, #1
 800dc74:	601a      	str	r2, [r3, #0]
 800dc76:	bd70      	pop	{r4, r5, r6, pc}
 800dc78:	200033e0 	.word	0x200033e0
 800dc7c:	20005d50 	.word	0x20005d50
 800dc80:	20005d54 	.word	0x20005d54
 800dc84:	20001c1c 	.word	0x20001c1c
 800dc88:	0800d9d9 	.word	0x0800d9d9
 800dc8c:	20005d58 	.word	0x20005d58
 800dc90:	200033e4 	.word	0x200033e4

0800dc94 <sel_screen_send_button>:
{
 800dc94:	b510      	push	{r4, lr}
	switch(btn) {
 800dc96:	2803      	cmp	r0, #3
 800dc98:	d837      	bhi.n	800dd0a <sel_screen_send_button+0x76>
 800dc9a:	e8df f000 	tbb	[pc, r0]
 800dc9e:	1502      	.short	0x1502
 800dca0:	271c      	.short	0x271c
			lv_btn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_PR);
 800dca2:	4c1a      	ldr	r4, [pc, #104]	; (800dd0c <sel_screen_send_button+0x78>)
 800dca4:	2103      	movs	r1, #3
 800dca6:	6820      	ldr	r0, [r4, #0]
 800dca8:	f007 faac 	bl	8015204 <lv_btn_set_state>
			lv_btn_set_state(imgbtn1[1], LV_BTN_STATE_TGL_REL);
 800dcac:	2102      	movs	r1, #2
			lv_btn_set_state(imgbtn1[1], LV_BTN_STATE_TGL_PR);
 800dcae:	6860      	ldr	r0, [r4, #4]
 800dcb0:	f007 faa8 	bl	8015204 <lv_btn_set_state>
			lv_btn_set_state(imgbtn1[2], LV_BTN_STATE_TGL_REL);
 800dcb4:	2102      	movs	r1, #2
 800dcb6:	68a0      	ldr	r0, [r4, #8]
 800dcb8:	f007 faa4 	bl	8015204 <lv_btn_set_state>
			lv_btn_set_state(imgbtn1[3], LV_BTN_STATE_TGL_REL);
 800dcbc:	2102      	movs	r1, #2
			lv_btn_set_state(imgbtn1[3], LV_BTN_STATE_TGL_PR);
 800dcbe:	68e0      	ldr	r0, [r4, #12]
}
 800dcc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			lv_btn_set_state(imgbtn1[3], LV_BTN_STATE_TGL_PR);
 800dcc4:	f007 ba9e 	b.w	8015204 <lv_btn_set_state>
			lv_btn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_REL);
 800dcc8:	4c10      	ldr	r4, [pc, #64]	; (800dd0c <sel_screen_send_button+0x78>)
 800dcca:	2102      	movs	r1, #2
 800dccc:	6820      	ldr	r0, [r4, #0]
 800dcce:	f007 fa99 	bl	8015204 <lv_btn_set_state>
			lv_btn_set_state(imgbtn1[1], LV_BTN_STATE_TGL_PR);
 800dcd2:	2103      	movs	r1, #3
 800dcd4:	e7eb      	b.n	800dcae <sel_screen_send_button+0x1a>
			lv_btn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_REL);
 800dcd6:	4c0d      	ldr	r4, [pc, #52]	; (800dd0c <sel_screen_send_button+0x78>)
 800dcd8:	2102      	movs	r1, #2
 800dcda:	6820      	ldr	r0, [r4, #0]
 800dcdc:	f007 fa92 	bl	8015204 <lv_btn_set_state>
			lv_btn_set_state(imgbtn1[1], LV_BTN_STATE_TGL_REL);
 800dce0:	2102      	movs	r1, #2
 800dce2:	6860      	ldr	r0, [r4, #4]
 800dce4:	f007 fa8e 	bl	8015204 <lv_btn_set_state>
			lv_btn_set_state(imgbtn1[2], LV_BTN_STATE_TGL_PR);
 800dce8:	2103      	movs	r1, #3
 800dcea:	e7e4      	b.n	800dcb6 <sel_screen_send_button+0x22>
			lv_btn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_REL);
 800dcec:	4c07      	ldr	r4, [pc, #28]	; (800dd0c <sel_screen_send_button+0x78>)
 800dcee:	2102      	movs	r1, #2
 800dcf0:	6820      	ldr	r0, [r4, #0]
 800dcf2:	f007 fa87 	bl	8015204 <lv_btn_set_state>
			lv_btn_set_state(imgbtn1[1], LV_BTN_STATE_TGL_REL);
 800dcf6:	2102      	movs	r1, #2
 800dcf8:	6860      	ldr	r0, [r4, #4]
 800dcfa:	f007 fa83 	bl	8015204 <lv_btn_set_state>
			lv_btn_set_state(imgbtn1[2], LV_BTN_STATE_TGL_REL);
 800dcfe:	2102      	movs	r1, #2
 800dd00:	68a0      	ldr	r0, [r4, #8]
 800dd02:	f007 fa7f 	bl	8015204 <lv_btn_set_state>
			lv_btn_set_state(imgbtn1[3], LV_BTN_STATE_TGL_PR);
 800dd06:	2103      	movs	r1, #3
 800dd08:	e7d9      	b.n	800dcbe <sel_screen_send_button+0x2a>
 800dd0a:	bd10      	pop	{r4, pc}
 800dd0c:	20005d58 	.word	0x20005d58

0800dd10 <ButtonEventTelaSelecao>:
	if(event == EVT_PBTN_INPUT) {
 800dd10:	2810      	cmp	r0, #16
{
 800dd12:	b510      	push	{r4, lr}
	if(event == EVT_PBTN_INPUT) {
 800dd14:	d139      	bne.n	800dd8a <ButtonEventTelaSelecao+0x7a>
		if(tipo == PBTN_SCLK) {	// Single Click
 800dd16:	2901      	cmp	r1, #1
 800dd18:	d137      	bne.n	800dd8a <ButtonEventTelaSelecao+0x7a>
			switch(id) {
 800dd1a:	2a03      	cmp	r2, #3
 800dd1c:	d835      	bhi.n	800dd8a <ButtonEventTelaSelecao+0x7a>
 800dd1e:	e8df f002 	tbb	[pc, r2]
 800dd22:	1102      	.short	0x1102
 800dd24:	2c20      	.short	0x2c20
					if(MenuSel >= 1) MenuSel--;
 800dd26:	4c19      	ldr	r4, [pc, #100]	; (800dd8c <ButtonEventTelaSelecao+0x7c>)
 800dd28:	7823      	ldrb	r3, [r4, #0]
 800dd2a:	b10b      	cbz	r3, 800dd30 <ButtonEventTelaSelecao+0x20>
 800dd2c:	3b01      	subs	r3, #1
 800dd2e:	7023      	strb	r3, [r4, #0]
					sel_screen_send_button(MenuSel, LV_BTN_STATE_TGL_PR);
 800dd30:	2103      	movs	r1, #3
 800dd32:	7820      	ldrb	r0, [r4, #0]
 800dd34:	f7ff ffae 	bl	800dc94 <sel_screen_send_button>
					logI("Debug: Tela_Selecao KEY_Down: MenuSel: %ld\n", MenuSel);
 800dd38:	7821      	ldrb	r1, [r4, #0]
 800dd3a:	4815      	ldr	r0, [pc, #84]	; (800dd90 <ButtonEventTelaSelecao+0x80>)
}
 800dd3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					logI("Debug: Tela_Selecao KEY_UP: MenuSel: %ld\n", MenuSel);
 800dd40:	f7f3 bc94 	b.w	800166c <logI>
					MenuSel++;
 800dd44:	4c11      	ldr	r4, [pc, #68]	; (800dd8c <ButtonEventTelaSelecao+0x7c>)
 800dd46:	7823      	ldrb	r3, [r4, #0]
 800dd48:	3301      	adds	r3, #1
 800dd4a:	b2db      	uxtb	r3, r3
					if(MenuSel >= 3) MenuSel = 3;
 800dd4c:	2b02      	cmp	r3, #2
 800dd4e:	bf88      	it	hi
 800dd50:	2303      	movhi	r3, #3
 800dd52:	7023      	strb	r3, [r4, #0]
					sel_screen_send_button(MenuSel, LV_BTN_STATE_TGL_PR);
 800dd54:	2103      	movs	r1, #3
 800dd56:	7820      	ldrb	r0, [r4, #0]
 800dd58:	f7ff ff9c 	bl	800dc94 <sel_screen_send_button>
					logI("Debug: Tela_Selecao KEY_UP: MenuSel: %ld\n", MenuSel);
 800dd5c:	7821      	ldrb	r1, [r4, #0]
 800dd5e:	480d      	ldr	r0, [pc, #52]	; (800dd94 <ButtonEventTelaSelecao+0x84>)
 800dd60:	e7ec      	b.n	800dd3c <ButtonEventTelaSelecao+0x2c>
					lv_event_send(imgbtn1[MenuSel], LV_EVENT_APPLY, &MenuSel);
 800dd62:	4c0a      	ldr	r4, [pc, #40]	; (800dd8c <ButtonEventTelaSelecao+0x7c>)
 800dd64:	4b0c      	ldr	r3, [pc, #48]	; (800dd98 <ButtonEventTelaSelecao+0x88>)
 800dd66:	7820      	ldrb	r0, [r4, #0]
 800dd68:	2111      	movs	r1, #17
 800dd6a:	4622      	mov	r2, r4
 800dd6c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800dd70:	f000 fd2e 	bl	800e7d0 <lv_event_send>
					logI("Debug: Tela_Selecao KEY_ENTER: MenuSel: %ld\n", MenuSel);
 800dd74:	7821      	ldrb	r1, [r4, #0]
 800dd76:	4809      	ldr	r0, [pc, #36]	; (800dd9c <ButtonEventTelaSelecao+0x8c>)
 800dd78:	e7e0      	b.n	800dd3c <ButtonEventTelaSelecao+0x2c>
					lv_event_send(img_fundo, LV_EVENT_APPLY, NULL);
 800dd7a:	4b09      	ldr	r3, [pc, #36]	; (800dda0 <ButtonEventTelaSelecao+0x90>)
 800dd7c:	2200      	movs	r2, #0
 800dd7e:	2111      	movs	r1, #17
 800dd80:	6818      	ldr	r0, [r3, #0]
}
 800dd82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					lv_event_send(img_fundo, LV_EVENT_APPLY, NULL);
 800dd86:	f000 bd23 	b.w	800e7d0 <lv_event_send>
 800dd8a:	bd10      	pop	{r4, pc}
 800dd8c:	200033e0 	.word	0x200033e0
 800dd90:	0802badc 	.word	0x0802badc
 800dd94:	0802bb08 	.word	0x0802bb08
 800dd98:	20005d58 	.word	0x20005d58
 800dd9c:	0802bb32 	.word	0x0802bb32
 800dda0:	20005d54 	.word	0x20005d54

0800dda4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800dda4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800dda6:	2200      	movs	r2, #0
 800dda8:	490e      	ldr	r1, [pc, #56]	; (800dde4 <MX_USB_DEVICE_Init+0x40>)
 800ddaa:	480f      	ldr	r0, [pc, #60]	; (800dde8 <MX_USB_DEVICE_Init+0x44>)
 800ddac:	f7f9 fa0d 	bl	80071ca <USBD_Init>
 800ddb0:	b108      	cbz	r0, 800ddb6 <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 800ddb2:	f7f3 ff69 	bl	8001c88 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 800ddb6:	490d      	ldr	r1, [pc, #52]	; (800ddec <MX_USB_DEVICE_Init+0x48>)
 800ddb8:	480b      	ldr	r0, [pc, #44]	; (800dde8 <MX_USB_DEVICE_Init+0x44>)
 800ddba:	f7f9 fa1b 	bl	80071f4 <USBD_RegisterClass>
 800ddbe:	b108      	cbz	r0, 800ddc4 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 800ddc0:	f7f3 ff62 	bl	8001c88 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800ddc4:	490a      	ldr	r1, [pc, #40]	; (800ddf0 <MX_USB_DEVICE_Init+0x4c>)
 800ddc6:	4808      	ldr	r0, [pc, #32]	; (800dde8 <MX_USB_DEVICE_Init+0x44>)
 800ddc8:	f7f8 fe96 	bl	8006af8 <USBD_MSC_RegisterStorage>
 800ddcc:	b108      	cbz	r0, 800ddd2 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 800ddce:	f7f3 ff5b 	bl	8001c88 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ddd2:	4805      	ldr	r0, [pc, #20]	; (800dde8 <MX_USB_DEVICE_Init+0x44>)
 800ddd4:	f7f9 fa15 	bl	8007202 <USBD_Start>
 800ddd8:	b118      	cbz	r0, 800dde2 <MX_USB_DEVICE_Init+0x3e>
    Error_Handler();
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ddda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800ddde:	f7f3 bf53 	b.w	8001c88 <Error_Handler>
 800dde2:	bd08      	pop	{r3, pc}
 800dde4:	20001c34 	.word	0x20001c34
 800dde8:	2000ba20 	.word	0x2000ba20
 800ddec:	2000003c 	.word	0x2000003c
 800ddf0:	20001c94 	.word	0x20001c94

0800ddf4 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ddf4:	2312      	movs	r3, #18
 800ddf6:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 800ddf8:	4800      	ldr	r0, [pc, #0]	; (800ddfc <USBD_FS_DeviceDescriptor+0x8>)
 800ddfa:	4770      	bx	lr
 800ddfc:	20001c60 	.word	0x20001c60

0800de00 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800de00:	2304      	movs	r3, #4
 800de02:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 800de04:	4800      	ldr	r0, [pc, #0]	; (800de08 <USBD_FS_LangIDStrDescriptor+0x8>)
 800de06:	4770      	bx	lr
 800de08:	20001c74 	.word	0x20001c74

0800de0c <USBD_FS_USR_BOSDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800de0c:	230c      	movs	r3, #12
 800de0e:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
}
 800de10:	4800      	ldr	r0, [pc, #0]	; (800de14 <USBD_FS_USR_BOSDescriptor+0x8>)
 800de12:	4770      	bx	lr
 800de14:	20001c54 	.word	0x20001c54

0800de18 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 800de18:	2300      	movs	r3, #0
{
 800de1a:	b530      	push	{r4, r5, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800de1c:	461d      	mov	r5, r3
  for (idx = 0; idx < len; idx++)
 800de1e:	b2dc      	uxtb	r4, r3
 800de20:	42a2      	cmp	r2, r4
 800de22:	d800      	bhi.n	800de26 <IntToUnicode+0xe>
  }
}
 800de24:	bd30      	pop	{r4, r5, pc}
    if (((value >> 28)) < 0xA)
 800de26:	0f04      	lsrs	r4, r0, #28
 800de28:	2c09      	cmp	r4, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800de2a:	bf94      	ite	ls
 800de2c:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800de2e:	3437      	addhi	r4, #55	; 0x37
 800de30:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 800de34:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    value = value << 4;
 800de38:	0100      	lsls	r0, r0, #4
    pbuf[2 * idx + 1] = 0;
 800de3a:	7065      	strb	r5, [r4, #1]
 800de3c:	3301      	adds	r3, #1
 800de3e:	e7ee      	b.n	800de1e <IntToUnicode+0x6>

0800de40 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 800de40:	231a      	movs	r3, #26
{
 800de42:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800de44:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800de46:	4b09      	ldr	r3, [pc, #36]	; (800de6c <USBD_FS_SerialStrDescriptor+0x2c>)
 800de48:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800de4a:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 800de4c:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 800de4e:	18c0      	adds	r0, r0, r3
 800de50:	d00a      	beq.n	800de68 <USBD_FS_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800de52:	4b07      	ldr	r3, [pc, #28]	; (800de70 <USBD_FS_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800de54:	4907      	ldr	r1, [pc, #28]	; (800de74 <USBD_FS_SerialStrDescriptor+0x34>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800de56:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800de58:	2208      	movs	r2, #8
 800de5a:	f7ff ffdd 	bl	800de18 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800de5e:	2204      	movs	r2, #4
 800de60:	4905      	ldr	r1, [pc, #20]	; (800de78 <USBD_FS_SerialStrDescriptor+0x38>)
 800de62:	4620      	mov	r0, r4
 800de64:	f7ff ffd8 	bl	800de18 <IntToUnicode>
}
 800de68:	4804      	ldr	r0, [pc, #16]	; (800de7c <USBD_FS_SerialStrDescriptor+0x3c>)
 800de6a:	bd10      	pop	{r4, pc}
 800de6c:	1fff7590 	.word	0x1fff7590
 800de70:	1fff7594 	.word	0x1fff7594
 800de74:	20001c7a 	.word	0x20001c7a
 800de78:	20001c8a 	.word	0x20001c8a
 800de7c:	20001c78 	.word	0x20001c78

0800de80 <USBD_FS_ManufacturerStrDescriptor>:
{
 800de80:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800de82:	4c04      	ldr	r4, [pc, #16]	; (800de94 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 800de84:	4804      	ldr	r0, [pc, #16]	; (800de98 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800de86:	460a      	mov	r2, r1
 800de88:	4621      	mov	r1, r4
 800de8a:	f7f9 fce3 	bl	8007854 <USBD_GetString>
}
 800de8e:	4620      	mov	r0, r4
 800de90:	bd10      	pop	{r4, pc}
 800de92:	bf00      	nop
 800de94:	2000bcbc 	.word	0x2000bcbc
 800de98:	080ec2f0 	.word	0x080ec2f0

0800de9c <USBD_FS_ProductStrDescriptor>:
{
 800de9c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800de9e:	4c04      	ldr	r4, [pc, #16]	; (800deb0 <USBD_FS_ProductStrDescriptor+0x14>)
 800dea0:	4804      	ldr	r0, [pc, #16]	; (800deb4 <USBD_FS_ProductStrDescriptor+0x18>)
 800dea2:	460a      	mov	r2, r1
 800dea4:	4621      	mov	r1, r4
 800dea6:	f7f9 fcd5 	bl	8007854 <USBD_GetString>
}
 800deaa:	4620      	mov	r0, r4
 800deac:	bd10      	pop	{r4, pc}
 800deae:	bf00      	nop
 800deb0:	2000bcbc 	.word	0x2000bcbc
 800deb4:	080ec303 	.word	0x080ec303

0800deb8 <USBD_FS_ConfigStrDescriptor>:
{
 800deb8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800deba:	4c04      	ldr	r4, [pc, #16]	; (800decc <USBD_FS_ConfigStrDescriptor+0x14>)
 800debc:	4804      	ldr	r0, [pc, #16]	; (800ded0 <USBD_FS_ConfigStrDescriptor+0x18>)
 800debe:	460a      	mov	r2, r1
 800dec0:	4621      	mov	r1, r4
 800dec2:	f7f9 fcc7 	bl	8007854 <USBD_GetString>
}
 800dec6:	4620      	mov	r0, r4
 800dec8:	bd10      	pop	{r4, pc}
 800deca:	bf00      	nop
 800decc:	2000bcbc 	.word	0x2000bcbc
 800ded0:	080ec2d7 	.word	0x080ec2d7

0800ded4 <USBD_FS_InterfaceStrDescriptor>:
{
 800ded4:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ded6:	4c04      	ldr	r4, [pc, #16]	; (800dee8 <USBD_FS_InterfaceStrDescriptor+0x14>)
 800ded8:	4804      	ldr	r0, [pc, #16]	; (800deec <USBD_FS_InterfaceStrDescriptor+0x18>)
 800deda:	460a      	mov	r2, r1
 800dedc:	4621      	mov	r1, r4
 800dede:	f7f9 fcb9 	bl	8007854 <USBD_GetString>
}
 800dee2:	4620      	mov	r0, r4
 800dee4:	bd10      	pop	{r4, pc}
 800dee6:	bf00      	nop
 800dee8:	2000bcbc 	.word	0x2000bcbc
 800deec:	080ec2e2 	.word	0x080ec2e2

0800def0 <STORAGE_GetCapacity_FS>:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 800def0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800def4:	600b      	str	r3, [r1, #0]
  *block_size = STORAGE_BLK_SIZ;
 800def6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800defa:	8013      	strh	r3, [r2, #0]
  return (USBD_OK);
  /* USER CODE END 3 */
}
 800defc:	2000      	movs	r0, #0
 800defe:	4770      	bx	lr

0800df00 <STORAGE_IsWriteProtected_FS>:
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
  /* USER CODE END 5 */
}
 800df00:	2000      	movs	r0, #0
 800df02:	4770      	bx	lr

0800df04 <STORAGE_Write_FS>:
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
  /* USER CODE BEGIN 7 */
  return (USBD_OK);
  /* USER CODE END 7 */
}
 800df04:	2000      	movs	r0, #0
 800df06:	4770      	bx	lr

0800df08 <STORAGE_GetMaxLun_FS>:
int8_t STORAGE_GetMaxLun_FS(void)
{
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
  /* USER CODE END 8 */
}
 800df08:	2000      	movs	r0, #0
 800df0a:	4770      	bx	lr

0800df0c <STORAGE_Read_FS>:
 800df0c:	2000      	movs	r0, #0
 800df0e:	4770      	bx	lr

0800df10 <STORAGE_Init_FS>:
 800df10:	2000      	movs	r0, #0
 800df12:	4770      	bx	lr

0800df14 <STORAGE_IsReady_FS>:
 800df14:	2000      	movs	r0, #0
 800df16:	4770      	bx	lr

0800df18 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800df18:	b510      	push	{r4, lr}
 800df1a:	4604      	mov	r4, r0
 800df1c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800df1e:	2214      	movs	r2, #20
 800df20:	2100      	movs	r1, #0
 800df22:	a803      	add	r0, sp, #12
 800df24:	f00b fdd5 	bl	8019ad2 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800df28:	6823      	ldr	r3, [r4, #0]
 800df2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800df2e:	d13a      	bne.n	800dfa6 <HAL_PCD_MspInit+0x8e>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800df30:	4c1f      	ldr	r4, [pc, #124]	; (800dfb0 <HAL_PCD_MspInit+0x98>)
 800df32:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800df34:	f043 0301 	orr.w	r3, r3, #1
 800df38:	64e3      	str	r3, [r4, #76]	; 0x4c
 800df3a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800df3c:	f003 0301 	and.w	r3, r3, #1
 800df40:	9300      	str	r3, [sp, #0]
 800df42:	9b00      	ldr	r3, [sp, #0]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800df44:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800df48:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800df4a:	2302      	movs	r3, #2
 800df4c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800df4e:	2303      	movs	r3, #3
 800df50:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800df52:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800df54:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800df56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800df5a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800df5c:	f7f4 ff5c 	bl	8002e18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800df60:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800df62:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800df66:	64e3      	str	r3, [r4, #76]	; 0x4c
 800df68:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800df6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800df6e:	9301      	str	r3, [sp, #4]
 800df70:	9b01      	ldr	r3, [sp, #4]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800df72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800df74:	00db      	lsls	r3, r3, #3
 800df76:	d418      	bmi.n	800dfaa <HAL_PCD_MspInit+0x92>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800df78:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800df7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800df7e:	65a3      	str	r3, [r4, #88]	; 0x58
 800df80:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800df82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800df86:	9302      	str	r3, [sp, #8]
 800df88:	9b02      	ldr	r3, [sp, #8]
      HAL_PWREx_EnableVddUSB();
 800df8a:	f7f5 fd97 	bl	8003abc <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800df8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800df90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800df94:	65a3      	str	r3, [r4, #88]	; 0x58
    {
      HAL_PWREx_EnableVddUSB();
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800df96:	2200      	movs	r2, #0
 800df98:	2043      	movs	r0, #67	; 0x43
 800df9a:	4611      	mov	r1, r2
 800df9c:	f7f4 fe2a 	bl	8002bf4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800dfa0:	2043      	movs	r0, #67	; 0x43
 800dfa2:	f7f4 fe5b 	bl	8002c5c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800dfa6:	b008      	add	sp, #32
 800dfa8:	bd10      	pop	{r4, pc}
      HAL_PWREx_EnableVddUSB();
 800dfaa:	f7f5 fd87 	bl	8003abc <HAL_PWREx_EnableVddUSB>
 800dfae:	e7f2      	b.n	800df96 <HAL_PCD_MspInit+0x7e>
 800dfb0:	40021000 	.word	0x40021000

0800dfb4 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800dfb4:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 800dfb8:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800dfbc:	f7f9 b938 	b.w	8007230 <USBD_LL_SetupStage>

0800dfc0 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800dfc0:	231c      	movs	r3, #28
 800dfc2:	fb03 0301 	mla	r3, r3, r1, r0
 800dfc6:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800dfca:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800dfce:	f7f9 b95c 	b.w	800728a <USBD_LL_DataOutStage>

0800dfd2 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800dfd2:	231c      	movs	r3, #28
 800dfd4:	fb03 0301 	mla	r3, r3, r1, r0
 800dfd8:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800dfdc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dfde:	f7f9 b98e 	b.w	80072fe <USBD_LL_DataInStage>

0800dfe2 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800dfe2:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800dfe6:	f7f9 ba1f 	b.w	8007428 <USBD_LL_SOF>

0800dfea <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800dfea:	68c3      	ldr	r3, [r0, #12]
 800dfec:	2b02      	cmp	r3, #2
{ 
 800dfee:	b510      	push	{r4, lr}
 800dff0:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800dff2:	d001      	beq.n	800dff8 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 800dff4:	f7f3 fe48 	bl	8001c88 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800dff8:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 800dffc:	2101      	movs	r1, #1
 800dffe:	f7f9 fa01 	bl	8007404 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e002:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
}
 800e006:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e00a:	f7f9 b9d4 	b.w	80073b6 <USBD_LL_Reset>
	...

0800e010 <HAL_PCD_SuspendCallback>:
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e010:	6802      	ldr	r2, [r0, #0]
 800e012:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
{
 800e016:	b510      	push	{r4, lr}
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e018:	f043 0301 	orr.w	r3, r3, #1
{
 800e01c:	4604      	mov	r4, r0
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e01e:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e022:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800e026:	f7f9 f9f0 	bl	800740a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e02a:	6a23      	ldr	r3, [r4, #32]
 800e02c:	b123      	cbz	r3, 800e038 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e02e:	4a03      	ldr	r2, [pc, #12]	; (800e03c <HAL_PCD_SuspendCallback+0x2c>)
 800e030:	6913      	ldr	r3, [r2, #16]
 800e032:	f043 0306 	orr.w	r3, r3, #6
 800e036:	6113      	str	r3, [r2, #16]
 800e038:	bd10      	pop	{r4, pc}
 800e03a:	bf00      	nop
 800e03c:	e000ed00 	.word	0xe000ed00

0800e040 <HAL_PCD_ResumeCallback>:
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800e040:	6802      	ldr	r2, [r0, #0]
 800e042:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 800e046:	f023 0301 	bic.w	r3, r3, #1
{
 800e04a:	b510      	push	{r4, lr}
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800e04c:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800e050:	6a03      	ldr	r3, [r0, #32]
{
 800e052:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 800e054:	b133      	cbz	r3, 800e064 <HAL_PCD_ResumeCallback+0x24>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e056:	4a06      	ldr	r2, [pc, #24]	; (800e070 <HAL_PCD_ResumeCallback+0x30>)
 800e058:	6913      	ldr	r3, [r2, #16]
 800e05a:	f023 0306 	bic.w	r3, r3, #6
 800e05e:	6113      	str	r3, [r2, #16]
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 800e060:	f7f3 fb12 	bl	8001688 <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e064:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
}
 800e068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e06c:	f7f9 b9d6 	b.w	800741c <USBD_LL_Resume>
 800e070:	e000ed00 	.word	0xe000ed00

0800e074 <HAL_PCD_ISOOUTIncompleteCallback>:
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e074:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800e078:	f7f9 b9e4 	b.w	8007444 <USBD_LL_IsoOUTIncomplete>

0800e07c <HAL_PCD_ISOINIncompleteCallback>:
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e07c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800e080:	f7f9 b9de 	b.w	8007440 <USBD_LL_IsoINIncomplete>

0800e084 <HAL_PCD_ConnectCallback>:
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e084:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800e088:	f7f9 b9de 	b.w	8007448 <USBD_LL_DevConnected>

0800e08c <HAL_PCD_DisconnectCallback>:
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e08c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800e090:	f7f9 b9dc 	b.w	800744c <USBD_LL_DevDisconnected>

0800e094 <USBD_LL_Init>:
{
 800e094:	b508      	push	{r3, lr}
  if (pdev->id == DEVICE_FS) {
 800e096:	7802      	ldrb	r2, [r0, #0]
 800e098:	bb32      	cbnz	r2, 800e0e8 <USBD_LL_Init+0x54>
  hpcd_USB_OTG_FS.pData = pdev;
 800e09a:	4b14      	ldr	r3, [pc, #80]	; (800e0ec <USBD_LL_Init+0x58>)
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800e09c:	2106      	movs	r1, #6
  hpcd_USB_OTG_FS.pData = pdev;
 800e09e:	f8c3 0404 	str.w	r0, [r3, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800e0a2:	f8c0 3298 	str.w	r3, [r0, #664]	; 0x298
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800e0a6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800e0aa:	e883 0003 	stmia.w	r3, {r0, r1}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e0ae:	2102      	movs	r1, #2
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e0b0:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e0b2:	60d9      	str	r1, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e0b4:	6199      	str	r1, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e0b6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e0b8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e0ba:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800e0bc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e0be:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e0c0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e0c2:	f7f5 f832 	bl	800312a <HAL_PCD_Init>
 800e0c6:	b108      	cbz	r0, 800e0cc <USBD_LL_Init+0x38>
    Error_Handler( );
 800e0c8:	f7f3 fdde 	bl	8001c88 <Error_Handler>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e0cc:	2180      	movs	r1, #128	; 0x80
 800e0ce:	4807      	ldr	r0, [pc, #28]	; (800e0ec <USBD_LL_Init+0x58>)
 800e0d0:	f7f5 fc96 	bl	8003a00 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e0d4:	2240      	movs	r2, #64	; 0x40
 800e0d6:	2100      	movs	r1, #0
 800e0d8:	4804      	ldr	r0, [pc, #16]	; (800e0ec <USBD_LL_Init+0x58>)
 800e0da:	f7f5 fc70 	bl	80039be <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e0de:	2280      	movs	r2, #128	; 0x80
 800e0e0:	2101      	movs	r1, #1
 800e0e2:	4802      	ldr	r0, [pc, #8]	; (800e0ec <USBD_LL_Init+0x58>)
 800e0e4:	f7f5 fc6b 	bl	80039be <HAL_PCDEx_SetTxFiFo>
}
 800e0e8:	2000      	movs	r0, #0
 800e0ea:	bd08      	pop	{r3, pc}
 800e0ec:	2000bebc 	.word	0x2000bebc

0800e0f0 <USBD_LL_Start>:
{
 800e0f0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800e0f2:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800e0f6:	f7f5 f8a5 	bl	8003244 <HAL_PCD_Start>
 800e0fa:	2803      	cmp	r0, #3
 800e0fc:	bf9a      	itte	ls
 800e0fe:	4b02      	ldrls	r3, [pc, #8]	; (800e108 <USBD_LL_Start+0x18>)
 800e100:	5c18      	ldrbls	r0, [r3, r0]
 800e102:	2002      	movhi	r0, #2
}
 800e104:	bd08      	pop	{r3, pc}
 800e106:	bf00      	nop
 800e108:	080ec33a 	.word	0x080ec33a

0800e10c <USBD_LL_OpenEP>:
{
 800e10c:	b510      	push	{r4, lr}
 800e10e:	461c      	mov	r4, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e110:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800e114:	4613      	mov	r3, r2
 800e116:	4622      	mov	r2, r4
 800e118:	f7f5 fb2c 	bl	8003774 <HAL_PCD_EP_Open>
 800e11c:	2803      	cmp	r0, #3
 800e11e:	bf9a      	itte	ls
 800e120:	4b01      	ldrls	r3, [pc, #4]	; (800e128 <USBD_LL_OpenEP+0x1c>)
 800e122:	5c18      	ldrbls	r0, [r3, r0]
 800e124:	2002      	movhi	r0, #2
}
 800e126:	bd10      	pop	{r4, pc}
 800e128:	080ec33a 	.word	0x080ec33a

0800e12c <USBD_LL_CloseEP>:
{
 800e12c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e12e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800e132:	f7f5 fb54 	bl	80037de <HAL_PCD_EP_Close>
 800e136:	2803      	cmp	r0, #3
 800e138:	bf9a      	itte	ls
 800e13a:	4b02      	ldrls	r3, [pc, #8]	; (800e144 <USBD_LL_CloseEP+0x18>)
 800e13c:	5c18      	ldrbls	r0, [r3, r0]
 800e13e:	2002      	movhi	r0, #2
}
 800e140:	bd08      	pop	{r3, pc}
 800e142:	bf00      	nop
 800e144:	080ec33a 	.word	0x080ec33a

0800e148 <USBD_LL_FlushEP>:
{
 800e148:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800e14a:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800e14e:	f7f5 fc1c 	bl	800398a <HAL_PCD_EP_Flush>
 800e152:	2803      	cmp	r0, #3
 800e154:	bf9a      	itte	ls
 800e156:	4b02      	ldrls	r3, [pc, #8]	; (800e160 <USBD_LL_FlushEP+0x18>)
 800e158:	5c18      	ldrbls	r0, [r3, r0]
 800e15a:	2002      	movhi	r0, #2
}
 800e15c:	bd08      	pop	{r3, pc}
 800e15e:	bf00      	nop
 800e160:	080ec33a 	.word	0x080ec33a

0800e164 <USBD_LL_StallEP>:
{
 800e164:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e166:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800e16a:	f7f5 fba3 	bl	80038b4 <HAL_PCD_EP_SetStall>
 800e16e:	2803      	cmp	r0, #3
 800e170:	bf9a      	itte	ls
 800e172:	4b02      	ldrls	r3, [pc, #8]	; (800e17c <USBD_LL_StallEP+0x18>)
 800e174:	5c18      	ldrbls	r0, [r3, r0]
 800e176:	2002      	movhi	r0, #2
}
 800e178:	bd08      	pop	{r3, pc}
 800e17a:	bf00      	nop
 800e17c:	080ec33a 	.word	0x080ec33a

0800e180 <USBD_LL_ClearStallEP>:
{
 800e180:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800e182:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800e186:	f7f5 fbce 	bl	8003926 <HAL_PCD_EP_ClrStall>
 800e18a:	2803      	cmp	r0, #3
 800e18c:	bf9a      	itte	ls
 800e18e:	4b02      	ldrls	r3, [pc, #8]	; (800e198 <USBD_LL_ClearStallEP+0x18>)
 800e190:	5c18      	ldrbls	r0, [r3, r0]
 800e192:	2002      	movhi	r0, #2
}
 800e194:	bd08      	pop	{r3, pc}
 800e196:	bf00      	nop
 800e198:	080ec33a 	.word	0x080ec33a

0800e19c <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 800e19c:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e1a0:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 800e1a4:	f04f 021c 	mov.w	r2, #28
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800e1a8:	bf1b      	ittet	ne
 800e1aa:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 800e1ae:	fb02 3101 	mlane	r1, r2, r1, r3
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800e1b2:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800e1b6:	f891 003e 	ldrbne.w	r0, [r1, #62]	; 0x3e
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800e1ba:	bf08      	it	eq
 800e1bc:	f891 01fe 	ldrbeq.w	r0, [r1, #510]	; 0x1fe
}
 800e1c0:	4770      	bx	lr
	...

0800e1c4 <USBD_LL_SetUSBAddress>:
{
 800e1c4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e1c6:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800e1ca:	f7f5 fabf 	bl	800374c <HAL_PCD_SetAddress>
 800e1ce:	2803      	cmp	r0, #3
 800e1d0:	bf9a      	itte	ls
 800e1d2:	4b02      	ldrls	r3, [pc, #8]	; (800e1dc <USBD_LL_SetUSBAddress+0x18>)
 800e1d4:	5c18      	ldrbls	r0, [r3, r0]
 800e1d6:	2002      	movhi	r0, #2
}
 800e1d8:	bd08      	pop	{r3, pc}
 800e1da:	bf00      	nop
 800e1dc:	080ec33a 	.word	0x080ec33a

0800e1e0 <USBD_LL_Transmit>:
{
 800e1e0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e1e2:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800e1e6:	f7f5 fb4a 	bl	800387e <HAL_PCD_EP_Transmit>
 800e1ea:	2803      	cmp	r0, #3
 800e1ec:	bf9a      	itte	ls
 800e1ee:	4b02      	ldrls	r3, [pc, #8]	; (800e1f8 <USBD_LL_Transmit+0x18>)
 800e1f0:	5c18      	ldrbls	r0, [r3, r0]
 800e1f2:	2002      	movhi	r0, #2
}
 800e1f4:	bd08      	pop	{r3, pc}
 800e1f6:	bf00      	nop
 800e1f8:	080ec33a 	.word	0x080ec33a

0800e1fc <USBD_LL_PrepareReceive>:
{
 800e1fc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e1fe:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800e202:	f7f5 fb16 	bl	8003832 <HAL_PCD_EP_Receive>
 800e206:	2803      	cmp	r0, #3
 800e208:	bf9a      	itte	ls
 800e20a:	4b02      	ldrls	r3, [pc, #8]	; (800e214 <USBD_LL_PrepareReceive+0x18>)
 800e20c:	5c18      	ldrbls	r0, [r3, r0]
 800e20e:	2002      	movhi	r0, #2
}
 800e210:	bd08      	pop	{r3, pc}
 800e212:	bf00      	nop
 800e214:	080ec33a 	.word	0x080ec33a

0800e218 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e218:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800e21c:	f7f5 bb27 	b.w	800386e <HAL_PCD_EP_GetRxCount>

0800e220 <HAL_PCDEx_LPM_Callback>:
{
 800e220:	b510      	push	{r4, lr}
 800e222:	4604      	mov	r4, r0
  switch (msg)
 800e224:	b111      	cbz	r1, 800e22c <HAL_PCDEx_LPM_Callback+0xc>
 800e226:	2901      	cmp	r1, #1
 800e228:	d016      	beq.n	800e258 <HAL_PCDEx_LPM_Callback+0x38>
 800e22a:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 800e22c:	6a03      	ldr	r3, [r0, #32]
 800e22e:	b133      	cbz	r3, 800e23e <HAL_PCDEx_LPM_Callback+0x1e>
  SystemClock_Config();
 800e230:	f7f3 fa2a 	bl	8001688 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e234:	4a12      	ldr	r2, [pc, #72]	; (800e280 <HAL_PCDEx_LPM_Callback+0x60>)
 800e236:	6913      	ldr	r3, [r2, #16]
 800e238:	f023 0306 	bic.w	r3, r3, #6
 800e23c:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800e23e:	6822      	ldr	r2, [r4, #0]
    USBD_LL_Resume(hpcd->pData);
 800e240:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800e244:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 800e248:	f023 0301 	bic.w	r3, r3, #1
 800e24c:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
}
 800e250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    USBD_LL_Resume(hpcd->pData);
 800e254:	f7f9 b8e2 	b.w	800741c <USBD_LL_Resume>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e258:	6802      	ldr	r2, [r0, #0]
    USBD_LL_Suspend(hpcd->pData);
 800e25a:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e25e:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 800e262:	f043 0301 	orr.w	r3, r3, #1
 800e266:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Suspend(hpcd->pData);
 800e26a:	f7f9 f8ce 	bl	800740a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800e26e:	6a23      	ldr	r3, [r4, #32]
 800e270:	b123      	cbz	r3, 800e27c <HAL_PCDEx_LPM_Callback+0x5c>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e272:	4a03      	ldr	r2, [pc, #12]	; (800e280 <HAL_PCDEx_LPM_Callback+0x60>)
 800e274:	6913      	ldr	r3, [r2, #16]
 800e276:	f043 0306 	orr.w	r3, r3, #6
 800e27a:	6113      	str	r3, [r2, #16]
 800e27c:	bd10      	pop	{r4, pc}
 800e27e:	bf00      	nop
 800e280:	e000ed00 	.word	0xe000ed00

0800e284 <USBD_static_malloc>:
}
 800e284:	4800      	ldr	r0, [pc, #0]	; (800e288 <USBD_static_malloc+0x4>)
 800e286:	4770      	bx	lr
 800e288:	20005d68 	.word	0x20005d68

0800e28c <USBD_static_free>:
{
 800e28c:	4770      	bx	lr

0800e28e <lv_disp_get_scr_act>:
 * @param disp pointer to display which active screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
 800e28e:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 800e290:	b910      	cbnz	r0, 800e298 <lv_disp_get_scr_act+0xa>
 800e292:	f005 fcdb 	bl	8013c4c <lv_disp_get_default>
    if(!disp) {
 800e296:	b100      	cbz	r0, 800e29a <lv_disp_get_scr_act+0xc>
        LV_LOG_WARN("lv_scr_act: no display registered to get its top layer");
        return NULL;
    }

    return disp->act_scr;
 800e298:	6b40      	ldr	r0, [r0, #52]	; 0x34
}
 800e29a:	bd08      	pop	{r3, pc}

0800e29c <lv_disp_load_scr>:
/**
 * Make a screen active
 * @param scr pointer to a screen
 */
void lv_disp_load_scr(lv_obj_t * scr)
{
 800e29c:	b510      	push	{r4, lr}
 800e29e:	4604      	mov	r4, r0
    lv_disp_t * d = lv_obj_get_disp(scr);
 800e2a0:	f000 fb06 	bl	800e8b0 <lv_obj_get_disp>

    d->act_scr = scr;
 800e2a4:	6344      	str	r4, [r0, #52]	; 0x34

    lv_obj_invalidate(scr);
 800e2a6:	4620      	mov	r0, r4
}
 800e2a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_invalidate(scr);
 800e2ac:	f000 bb26 	b.w	800e8fc <lv_obj_invalidate>

0800e2b0 <lv_disp_get_layer_top>:
 * Return with the top layer. (Same on every screen and it is above the normal screen layer)
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
 800e2b0:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 800e2b2:	b910      	cbnz	r0, 800e2ba <lv_disp_get_layer_top+0xa>
 800e2b4:	f005 fcca 	bl	8013c4c <lv_disp_get_default>
    if(!disp) {
 800e2b8:	b100      	cbz	r0, 800e2bc <lv_disp_get_layer_top+0xc>
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
        return NULL;
    }

    return disp->top_layer;
 800e2ba:	6b80      	ldr	r0, [r0, #56]	; 0x38
}
 800e2bc:	bd08      	pop	{r3, pc}

0800e2be <lv_disp_get_layer_sys>:
 * layer)
 * @param disp pointer to display which sys. layer  should be get. (NULL to use the default screen)
 * @return pointer to the sys layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
 800e2be:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 800e2c0:	b910      	cbnz	r0, 800e2c8 <lv_disp_get_layer_sys+0xa>
 800e2c2:	f005 fcc3 	bl	8013c4c <lv_disp_get_default>
    if(!disp) {
 800e2c6:	b100      	cbz	r0, 800e2ca <lv_disp_get_layer_sys+0xc>
        LV_LOG_WARN("lv_layer_sys: no display registered to get its top layer");
        return NULL;
    }

    return disp->sys_layer;
 800e2c8:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 800e2ca:	bd08      	pop	{r3, pc}

0800e2cc <obj_to_foreground>:

    if(group->focus_cb) group->focus_cb(group);
}

static void obj_to_foreground(lv_obj_t * obj)
{
 800e2cc:	b510      	push	{r4, lr}
    /*Search for 'top' attribute*/
    lv_obj_t * i        = obj;
    lv_obj_t * last_top = NULL;
 800e2ce:	2400      	movs	r4, #0
    while(i != NULL) {
 800e2d0:	b928      	cbnz	r0, 800e2de <obj_to_foreground+0x12>
        if(i->top != 0) last_top = i;
        i = lv_obj_get_parent(i);
    }

    if(last_top != NULL) {
 800e2d2:	b16c      	cbz	r4, 800e2f0 <obj_to_foreground+0x24>
        /*Move the last_top object to the foreground*/
        lv_obj_move_foreground(last_top);
 800e2d4:	4620      	mov	r0, r4
    }
}
 800e2d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        lv_obj_move_foreground(last_top);
 800e2da:	f000 bb5f 	b.w	800e99c <lv_obj_move_foreground>
        if(i->top != 0) last_top = i;
 800e2de:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800e2e2:	f013 0f20 	tst.w	r3, #32
 800e2e6:	bf18      	it	ne
 800e2e8:	4604      	movne	r4, r0
        i = lv_obj_get_parent(i);
 800e2ea:	f001 f847 	bl	800f37c <lv_obj_get_parent>
 800e2ee:	e7ef      	b.n	800e2d0 <obj_to_foreground+0x4>
 800e2f0:	bd10      	pop	{r4, pc}

0800e2f2 <focus_next_core.part.0>:
static void focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
 800e2f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    lv_obj_t ** obj_next     = group->obj_focus;
 800e2f6:	68c5      	ldr	r5, [r0, #12]
static void focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
 800e2f8:	4604      	mov	r4, r0
 800e2fa:	4689      	mov	r9, r1
 800e2fc:	4692      	mov	sl, r2
    bool can_begin           = true;
 800e2fe:	2701      	movs	r7, #1
    lv_obj_t ** obj_sentinel = NULL;
 800e300:	2600      	movs	r6, #0
        if(obj_next == NULL) {
 800e302:	2d00      	cmp	r5, #0
 800e304:	d14d      	bne.n	800e3a2 <focus_next_core.part.0+0xb0>
            if(group->wrap || obj_sentinel == NULL) {
 800e306:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800e30a:	06db      	lsls	r3, r3, #27
 800e30c:	d403      	bmi.n	800e316 <focus_next_core.part.0+0x24>
 800e30e:	2e00      	cmp	r6, #0
 800e310:	d056      	beq.n	800e3c0 <focus_next_core.part.0+0xce>
 800e312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                if(!can_begin) return;
 800e316:	2f00      	cmp	r7, #0
 800e318:	d054      	beq.n	800e3c4 <focus_next_core.part.0+0xd2>
                obj_next  = begin(&group->obj_ll);
 800e31a:	4620      	mov	r0, r4
 800e31c:	47c8      	blx	r9
 800e31e:	4605      	mov	r5, r0
        if(obj_sentinel == NULL) {
 800e320:	2e00      	cmp	r6, #0
 800e322:	d13a      	bne.n	800e39a <focus_next_core.part.0+0xa8>
            if(obj_sentinel == NULL) return; /*Group is empty*/
 800e324:	2d00      	cmp	r5, #0
 800e326:	d04d      	beq.n	800e3c4 <focus_next_core.part.0+0xd2>
 800e328:	462e      	mov	r6, r5
 800e32a:	2700      	movs	r7, #0
        if(!lv_obj_get_hidden(*obj_next)) break;
 800e32c:	6828      	ldr	r0, [r5, #0]
 800e32e:	f001 f8f5 	bl	800f51c <lv_obj_get_hidden>
 800e332:	4680      	mov	r8, r0
 800e334:	2800      	cmp	r0, #0
 800e336:	d1e4      	bne.n	800e302 <focus_next_core.part.0+0x10>
    if(obj_next == group->obj_focus) return; /*There's only one visible object and it's already focused*/
 800e338:	68e3      	ldr	r3, [r4, #12]
 800e33a:	42ab      	cmp	r3, r5
 800e33c:	d042      	beq.n	800e3c4 <focus_next_core.part.0+0xd2>
    if(group->obj_focus) {
 800e33e:	b183      	cbz	r3, 800e362 <focus_next_core.part.0+0x70>
        (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
 800e340:	6818      	ldr	r0, [r3, #0]
 800e342:	4642      	mov	r2, r8
 800e344:	69c3      	ldr	r3, [r0, #28]
 800e346:	2110      	movs	r1, #16
 800e348:	4798      	blx	r3
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, NULL);
 800e34a:	68e3      	ldr	r3, [r4, #12]
 800e34c:	4642      	mov	r2, r8
 800e34e:	210d      	movs	r1, #13
 800e350:	6818      	ldr	r0, [r3, #0]
 800e352:	f000 fa3d 	bl	800e7d0 <lv_event_send>
        if(res != LV_RES_OK) return;
 800e356:	2801      	cmp	r0, #1
 800e358:	d134      	bne.n	800e3c4 <focus_next_core.part.0+0xd2>
        lv_obj_invalidate(*group->obj_focus);
 800e35a:	68e3      	ldr	r3, [r4, #12]
 800e35c:	6818      	ldr	r0, [r3, #0]
 800e35e:	f000 facd 	bl	800e8fc <lv_obj_invalidate>
    (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_FOCUS, NULL);
 800e362:	6828      	ldr	r0, [r5, #0]
    group->obj_focus = obj_next;
 800e364:	60e5      	str	r5, [r4, #12]
    (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_FOCUS, NULL);
 800e366:	69c3      	ldr	r3, [r0, #28]
 800e368:	2200      	movs	r2, #0
 800e36a:	210f      	movs	r1, #15
 800e36c:	4798      	blx	r3
    lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, NULL);
 800e36e:	68e3      	ldr	r3, [r4, #12]
 800e370:	2200      	movs	r2, #0
 800e372:	210c      	movs	r1, #12
 800e374:	6818      	ldr	r0, [r3, #0]
 800e376:	f000 fa2b 	bl	800e7d0 <lv_event_send>
    if(res != LV_RES_OK) return;
 800e37a:	2801      	cmp	r0, #1
 800e37c:	d122      	bne.n	800e3c4 <focus_next_core.part.0+0xd2>
    obj_to_foreground(*group->obj_focus);
 800e37e:	68e3      	ldr	r3, [r4, #12]
 800e380:	6818      	ldr	r0, [r3, #0]
 800e382:	f7ff ffa3 	bl	800e2cc <obj_to_foreground>
    lv_obj_invalidate(*group->obj_focus);
 800e386:	68e3      	ldr	r3, [r4, #12]
 800e388:	6818      	ldr	r0, [r3, #0]
 800e38a:	f000 fab7 	bl	800e8fc <lv_obj_invalidate>
    if(group->focus_cb) group->focus_cb(group);
 800e38e:	69a3      	ldr	r3, [r4, #24]
 800e390:	b1c3      	cbz	r3, 800e3c4 <focus_next_core.part.0+0xd2>
 800e392:	4620      	mov	r0, r4
}
 800e394:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if(group->focus_cb) group->focus_cb(group);
 800e398:	4718      	bx	r3
        if(obj_sentinel == NULL) {
 800e39a:	2700      	movs	r7, #0
        if(obj_next == NULL) continue;
 800e39c:	2d00      	cmp	r5, #0
 800e39e:	d1c5      	bne.n	800e32c <focus_next_core.part.0+0x3a>
 800e3a0:	e7b1      	b.n	800e306 <focus_next_core.part.0+0x14>
            obj_next = move(&group->obj_ll, obj_next);
 800e3a2:	4629      	mov	r1, r5
 800e3a4:	4620      	mov	r0, r4
 800e3a6:	47d0      	blx	sl
        if(obj_sentinel == NULL) {
 800e3a8:	2e00      	cmp	r6, #0
 800e3aa:	bf08      	it	eq
 800e3ac:	462e      	moveq	r6, r5
            if(obj_next == obj_sentinel) return;
 800e3ae:	42b0      	cmp	r0, r6
            obj_next = move(&group->obj_ll, obj_next);
 800e3b0:	4605      	mov	r5, r0
            if(obj_next == obj_sentinel) return;
 800e3b2:	d1f3      	bne.n	800e39c <focus_next_core.part.0+0xaa>
 800e3b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                obj_next  = begin(&group->obj_ll);
 800e3b8:	4620      	mov	r0, r4
 800e3ba:	47c8      	blx	r9
 800e3bc:	4605      	mov	r5, r0
 800e3be:	e7b1      	b.n	800e324 <focus_next_core.part.0+0x32>
                if(!can_begin) return;
 800e3c0:	2f00      	cmp	r7, #0
 800e3c2:	d1f9      	bne.n	800e3b8 <focus_next_core.part.0+0xc6>
 800e3c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800e3c8 <lv_group_init>:
    lv_ll_init(&LV_GC_ROOT(_lv_group_ll), sizeof(lv_group_t));
 800e3c8:	2160      	movs	r1, #96	; 0x60
 800e3ca:	4801      	ldr	r0, [pc, #4]	; (800e3d0 <lv_group_init+0x8>)
 800e3cc:	f005 bece 	b.w	801416c <lv_ll_init>
 800e3d0:	2000c624 	.word	0x2000c624

0800e3d4 <lv_group_focus_next>:
    if(group->frozen) return;
 800e3d4:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 800e3d8:	07db      	lsls	r3, r3, #31
 800e3da:	d403      	bmi.n	800e3e4 <lv_group_focus_next+0x10>
 800e3dc:	4a02      	ldr	r2, [pc, #8]	; (800e3e8 <lv_group_focus_next+0x14>)
 800e3de:	4903      	ldr	r1, [pc, #12]	; (800e3ec <lv_group_focus_next+0x18>)
 800e3e0:	f7ff bf87 	b.w	800e2f2 <focus_next_core.part.0>
 800e3e4:	4770      	bx	lr
 800e3e6:	bf00      	nop
 800e3e8:	08014205 	.word	0x08014205
 800e3ec:	080141f9 	.word	0x080141f9

0800e3f0 <lv_group_focus_prev>:
 800e3f0:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 800e3f4:	07db      	lsls	r3, r3, #31
 800e3f6:	d403      	bmi.n	800e400 <lv_group_focus_prev+0x10>
 800e3f8:	4a02      	ldr	r2, [pc, #8]	; (800e404 <lv_group_focus_prev+0x14>)
 800e3fa:	4903      	ldr	r1, [pc, #12]	; (800e408 <lv_group_focus_prev+0x18>)
 800e3fc:	f7ff bf79 	b.w	800e2f2 <focus_next_core.part.0>
 800e400:	4770      	bx	lr
 800e402:	bf00      	nop
 800e404:	0801420f 	.word	0x0801420f
 800e408:	080141ff 	.word	0x080141ff

0800e40c <lv_group_refocus>:
{
 800e40c:	b538      	push	{r3, r4, r5, lr}
    uint8_t temp_wrap = g->wrap;
 800e40e:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 800e412:	f3c3 1500 	ubfx	r5, r3, #4, #1
    g->wrap           = 1;
 800e416:	f043 0310 	orr.w	r3, r3, #16
 800e41a:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 800e41e:	071b      	lsls	r3, r3, #28
{
 800e420:	4604      	mov	r4, r0
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 800e422:	d408      	bmi.n	800e436 <lv_group_refocus+0x2a>
        lv_group_focus_next(g);
 800e424:	f7ff ffd6 	bl	800e3d4 <lv_group_focus_next>
    g->wrap = temp_wrap;
 800e428:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800e42c:	f365 1304 	bfi	r3, r5, #4, #1
 800e430:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 800e434:	bd38      	pop	{r3, r4, r5, pc}
        lv_group_focus_prev(g);
 800e436:	f7ff ffdb 	bl	800e3f0 <lv_group_focus_prev>
 800e43a:	e7f5      	b.n	800e428 <lv_group_refocus+0x1c>

0800e43c <lv_group_add_obj>:
{
 800e43c:	b570      	push	{r4, r5, r6, lr}
 800e43e:	460c      	mov	r4, r1
    if(group == NULL) return;
 800e440:	4605      	mov	r5, r0
 800e442:	b328      	cbz	r0, 800e490 <lv_group_add_obj+0x54>
    LV_LL_READ(group->obj_ll, obj_i)
 800e444:	f005 fed8 	bl	80141f8 <lv_ll_get_head>
 800e448:	b978      	cbnz	r0, 800e46a <lv_group_add_obj+0x2e>
    if(obj->group_p) {
 800e44a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e44c:	b133      	cbz	r3, 800e45c <lv_group_add_obj+0x20>
        if(lv_obj_is_focused(obj)) {
 800e44e:	4620      	mov	r0, r4
 800e450:	f001 f8d9 	bl	800f606 <lv_obj_is_focused>
 800e454:	b110      	cbz	r0, 800e45c <lv_group_add_obj+0x20>
            lv_group_refocus(obj->group_p);
 800e456:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800e458:	f7ff ffd8 	bl	800e40c <lv_group_refocus>
    obj->group_p     = group;
 800e45c:	62e5      	str	r5, [r4, #44]	; 0x2c
    lv_obj_t ** next = lv_ll_ins_tail(&group->obj_ll);
 800e45e:	4628      	mov	r0, r5
 800e460:	f005 feac 	bl	80141bc <lv_ll_ins_tail>
    lv_mem_assert(next);
 800e464:	4606      	mov	r6, r0
 800e466:	b940      	cbnz	r0, 800e47a <lv_group_add_obj+0x3e>
 800e468:	e7fe      	b.n	800e468 <lv_group_add_obj+0x2c>
        if((*obj_i) == obj) {
 800e46a:	6803      	ldr	r3, [r0, #0]
 800e46c:	42a3      	cmp	r3, r4
 800e46e:	d00f      	beq.n	800e490 <lv_group_add_obj+0x54>
    LV_LL_READ(group->obj_ll, obj_i)
 800e470:	4601      	mov	r1, r0
 800e472:	4628      	mov	r0, r5
 800e474:	f005 fec6 	bl	8014204 <lv_ll_get_next>
 800e478:	e7e6      	b.n	800e448 <lv_group_add_obj+0xc>
    *next = obj;
 800e47a:	6004      	str	r4, [r0, #0]
    if(lv_ll_get_head(&group->obj_ll) == next) {
 800e47c:	4628      	mov	r0, r5
 800e47e:	f005 febb 	bl	80141f8 <lv_ll_get_head>
 800e482:	4286      	cmp	r6, r0
 800e484:	d104      	bne.n	800e490 <lv_group_add_obj+0x54>
        lv_group_refocus(group);
 800e486:	4628      	mov	r0, r5
}
 800e488:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        lv_group_refocus(group);
 800e48c:	f7ff bfbe 	b.w	800e40c <lv_group_refocus>
 800e490:	bd70      	pop	{r4, r5, r6, pc}

0800e492 <lv_group_remove_obj>:
{
 800e492:	b570      	push	{r4, r5, r6, lr}
    lv_group_t * g = obj->group_p;
 800e494:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
{
 800e496:	4606      	mov	r6, r0
    if(g == NULL) return;
 800e498:	b304      	cbz	r4, 800e4dc <lv_group_remove_obj+0x4a>
    if(g->obj_focus == NULL) return; /*Just to be sure (Not possible if there is at least one object in the group)*/
 800e49a:	68e3      	ldr	r3, [r4, #12]
 800e49c:	b1f3      	cbz	r3, 800e4dc <lv_group_remove_obj+0x4a>
    if(*g->obj_focus == obj) {
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	4298      	cmp	r0, r3
 800e4a2:	d110      	bne.n	800e4c6 <lv_group_remove_obj+0x34>
        if(lv_ll_get_head(&g->obj_ll) == g->obj_focus && lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
 800e4a4:	4620      	mov	r0, r4
 800e4a6:	f005 fea7 	bl	80141f8 <lv_ll_get_head>
 800e4aa:	68e3      	ldr	r3, [r4, #12]
 800e4ac:	4283      	cmp	r3, r0
 800e4ae:	d116      	bne.n	800e4de <lv_group_remove_obj+0x4c>
 800e4b0:	4620      	mov	r0, r4
 800e4b2:	f005 fea4 	bl	80141fe <lv_ll_get_tail>
 800e4b6:	68e3      	ldr	r3, [r4, #12]
 800e4b8:	4298      	cmp	r0, r3
 800e4ba:	d110      	bne.n	800e4de <lv_group_remove_obj+0x4c>
            (*g->obj_focus)->signal_cb(*g->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
 800e4bc:	6800      	ldr	r0, [r0, #0]
 800e4be:	2200      	movs	r2, #0
 800e4c0:	69c3      	ldr	r3, [r0, #28]
 800e4c2:	2110      	movs	r1, #16
 800e4c4:	4798      	blx	r3
    if(*g->obj_focus == obj) {
 800e4c6:	68e3      	ldr	r3, [r4, #12]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	429e      	cmp	r6, r3
        g->obj_focus = NULL;
 800e4cc:	bf04      	itt	eq
 800e4ce:	2300      	moveq	r3, #0
 800e4d0:	60e3      	streq	r3, [r4, #12]
    LV_LL_READ(g->obj_ll, i)
 800e4d2:	4620      	mov	r0, r4
 800e4d4:	f005 fe90 	bl	80141f8 <lv_ll_get_head>
 800e4d8:	4605      	mov	r5, r0
 800e4da:	b920      	cbnz	r0, 800e4e6 <lv_group_remove_obj+0x54>
 800e4dc:	bd70      	pop	{r4, r5, r6, pc}
            lv_group_refocus(g);
 800e4de:	4620      	mov	r0, r4
 800e4e0:	f7ff ff94 	bl	800e40c <lv_group_refocus>
 800e4e4:	e7ef      	b.n	800e4c6 <lv_group_remove_obj+0x34>
        if(*i == obj) {
 800e4e6:	682b      	ldr	r3, [r5, #0]
 800e4e8:	429e      	cmp	r6, r3
            lv_ll_rem(&g->obj_ll, i);
 800e4ea:	4629      	mov	r1, r5
 800e4ec:	4620      	mov	r0, r4
        if(*i == obj) {
 800e4ee:	d107      	bne.n	800e500 <lv_group_remove_obj+0x6e>
            lv_ll_rem(&g->obj_ll, i);
 800e4f0:	f005 fec1 	bl	8014276 <lv_ll_rem>
            lv_mem_free(i);
 800e4f4:	4628      	mov	r0, r5
 800e4f6:	f005 fffd 	bl	80144f4 <lv_mem_free>
            obj->group_p = NULL;
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	62f3      	str	r3, [r6, #44]	; 0x2c
            break;
 800e4fe:	bd70      	pop	{r4, r5, r6, pc}
    LV_LL_READ(g->obj_ll, i)
 800e500:	f005 fe80 	bl	8014204 <lv_ll_get_next>
 800e504:	e7e8      	b.n	800e4d8 <lv_group_remove_obj+0x46>

0800e506 <lv_group_mod_style>:
{
 800e506:	b538      	push	{r3, r4, r5, lr}
 800e508:	4604      	mov	r4, r0
    lv_style_copy(&group->style_tmp, style);
 800e50a:	f100 051c 	add.w	r5, r0, #28
 800e50e:	4628      	mov	r0, r5
 800e510:	f001 fbb4 	bl	800fc7c <lv_style_copy>
    if(group->editing) {
 800e514:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800e518:	079b      	lsls	r3, r3, #30
        if(group->style_mod_edit_cb) group->style_mod_edit_cb(group, &group->style_tmp);
 800e51a:	bf4c      	ite	mi
 800e51c:	6963      	ldrmi	r3, [r4, #20]
        if(group->style_mod_cb) group->style_mod_cb(group, &group->style_tmp);
 800e51e:	6923      	ldrpl	r3, [r4, #16]
 800e520:	b113      	cbz	r3, 800e528 <lv_group_mod_style+0x22>
 800e522:	4629      	mov	r1, r5
 800e524:	4620      	mov	r0, r4
 800e526:	4798      	blx	r3
}
 800e528:	4628      	mov	r0, r5
 800e52a:	bd38      	pop	{r3, r4, r5, pc}

0800e52c <lv_group_get_focused>:
    if(!group) return NULL;
 800e52c:	b110      	cbz	r0, 800e534 <lv_group_get_focused+0x8>
    if(group->obj_focus == NULL) return NULL;
 800e52e:	68c0      	ldr	r0, [r0, #12]
 800e530:	b100      	cbz	r0, 800e534 <lv_group_get_focused+0x8>
    return *group->obj_focus;
 800e532:	6800      	ldr	r0, [r0, #0]
}
 800e534:	4770      	bx	lr

0800e536 <lv_group_set_editing>:
{
 800e536:	b538      	push	{r3, r4, r5, lr}
    if(en_val == group->editing) return; /*Do not set the same mode again*/
 800e538:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 800e53c:	f3c3 0240 	ubfx	r2, r3, #1, #1
 800e540:	428a      	cmp	r2, r1
{
 800e542:	4604      	mov	r4, r0
    if(en_val == group->editing) return; /*Do not set the same mode again*/
 800e544:	d018      	beq.n	800e578 <lv_group_set_editing+0x42>
    group->editing     = en_val;
 800e546:	f361 0341 	bfi	r3, r1, #1, #1
 800e54a:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    lv_obj_t * focused = lv_group_get_focused(group);
 800e54e:	f7ff ffed 	bl	800e52c <lv_group_get_focused>
    if(focused) {
 800e552:	4605      	mov	r5, r0
 800e554:	b920      	cbnz	r0, 800e560 <lv_group_set_editing+0x2a>
    lv_obj_invalidate(focused);
 800e556:	4628      	mov	r0, r5
}
 800e558:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(focused);
 800e55c:	f000 b9ce 	b.w	800e8fc <lv_obj_invalidate>
        focused->signal_cb(focused, LV_SIGNAL_FOCUS, NULL); /*Focus again to properly leave/open edit/navigate mode*/
 800e560:	69c3      	ldr	r3, [r0, #28]
 800e562:	2200      	movs	r2, #0
 800e564:	210f      	movs	r1, #15
 800e566:	4798      	blx	r3
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, NULL);
 800e568:	68e3      	ldr	r3, [r4, #12]
 800e56a:	2200      	movs	r2, #0
 800e56c:	210c      	movs	r1, #12
 800e56e:	6818      	ldr	r0, [r3, #0]
 800e570:	f000 f92e 	bl	800e7d0 <lv_event_send>
        if(res != LV_RES_OK) return;
 800e574:	2801      	cmp	r0, #1
 800e576:	d0ee      	beq.n	800e556 <lv_group_set_editing+0x20>
 800e578:	bd38      	pop	{r3, r4, r5, pc}

0800e57a <lv_group_get_editing>:
    if(!group) return false;
 800e57a:	b118      	cbz	r0, 800e584 <lv_group_get_editing+0xa>
    return group->editing ? true : false;
 800e57c:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
 800e580:	f3c0 0040 	ubfx	r0, r0, #1, #1
}
 800e584:	4770      	bx	lr

0800e586 <lv_indev_reset.part.1>:
}
/**
 * Reset one or all input devices
 * @param indev pointer to an input device to reset or NULL to reset all of them
 */
void lv_indev_reset(lv_indev_t * indev)
 800e586:	b508      	push	{r3, lr}
{
    if(indev)
        indev->proc.reset_query = 1;
    else {
        lv_indev_t * i = lv_indev_get_next(NULL);
 800e588:	2000      	movs	r0, #0
        while(i) {
            i->proc.reset_query = 1;

            i = lv_indev_get_next(i);
 800e58a:	f005 fbaf 	bl	8013cec <lv_indev_get_next>
        while(i) {
 800e58e:	b900      	cbnz	r0, 800e592 <lv_indev_reset.part.1+0xc>
        }
    }
}
 800e590:	bd08      	pop	{r3, pc}
            i->proc.reset_query = 1;
 800e592:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800e596:	f043 0302 	orr.w	r3, r3, #2
 800e59a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
 800e59e:	e7f4      	b.n	800e58a <lv_indev_reset.part.1+0x4>

0800e5a0 <lv_indev_init>:
{
 800e5a0:	f7ff bff1 	b.w	800e586 <lv_indev_reset.part.1>

0800e5a4 <lv_indev_get_act>:
}
 800e5a4:	4b01      	ldr	r3, [pc, #4]	; (800e5ac <lv_indev_get_act+0x8>)
 800e5a6:	6818      	ldr	r0, [r3, #0]
 800e5a8:	4770      	bx	lr
 800e5aa:	bf00      	nop
 800e5ac:	20005fd8 	.word	0x20005fd8

0800e5b0 <lv_indev_get_type>:
    if(indev == NULL) return LV_INDEV_TYPE_NONE;
 800e5b0:	b100      	cbz	r0, 800e5b4 <lv_indev_get_type+0x4>
    return indev->driver.type;
 800e5b2:	7800      	ldrb	r0, [r0, #0]
}
 800e5b4:	4770      	bx	lr

0800e5b6 <lv_indev_reset>:
    if(indev)
 800e5b6:	b130      	cbz	r0, 800e5c6 <lv_indev_reset+0x10>
        indev->proc.reset_query = 1;
 800e5b8:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800e5bc:	f043 0302 	orr.w	r3, r3, #2
 800e5c0:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
 800e5c4:	4770      	bx	lr
 800e5c6:	f7ff bfde 	b.w	800e586 <lv_indev_reset.part.1>

0800e5ca <lv_indev_get_point>:
 * @param indev pointer to an input device
 * @param point pointer to a point to store the result
 */
void lv_indev_get_point(const lv_indev_t * indev, lv_point_t * point)
{
    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) {
 800e5ca:	7803      	ldrb	r3, [r0, #0]
 800e5cc:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 800e5d0:	2b01      	cmp	r3, #1
        point->x = -1;
        point->y = -1;
    } else {
        point->x = indev->proc.types.pointer.act_point.x;
 800e5d2:	bf05      	ittet	eq
 800e5d4:	f9b0 3024 	ldrsheq.w	r3, [r0, #36]	; 0x24
 800e5d8:	800b      	strheq	r3, [r1, #0]
        point->x = -1;
 800e5da:	f64f 73ff 	movwne	r3, #65535	; 0xffff
        point->y = indev->proc.types.pointer.act_point.y;
 800e5de:	f9b0 3026 	ldrsheq.w	r3, [r0, #38]	; 0x26
        point->x = -1;
 800e5e2:	bf18      	it	ne
 800e5e4:	800b      	strhne	r3, [r1, #0]
        point->y = indev->proc.types.pointer.act_point.y;
 800e5e6:	804b      	strh	r3, [r1, #2]
 800e5e8:	4770      	bx	lr

0800e5ea <lv_indev_is_dragging>:
 * @param indev pointer to an input device
 * @return true: drag is in progress
 */
bool lv_indev_is_dragging(const lv_indev_t * indev)
{
    if(indev == NULL) return false;
 800e5ea:	b150      	cbz	r0, 800e602 <lv_indev_is_dragging+0x18>
    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) return false;
 800e5ec:	7803      	ldrb	r3, [r0, #0]
 800e5ee:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 800e5f2:	2b01      	cmp	r3, #1
 800e5f4:	d104      	bne.n	800e600 <lv_indev_is_dragging+0x16>
    return indev->proc.types.pointer.drag_in_prog == 0 ? false : true;
 800e5f6:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
 800e5fa:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800e5fe:	4770      	bx	lr
    if(indev == NULL) return false;
 800e600:	2000      	movs	r0, #0
}
 800e602:	4770      	bx	lr

0800e604 <lv_indev_get_vect>:
 * @param indev pointer to an input device
 * @param point pointer to a point to store the types.pointer.vector
 */
void lv_indev_get_vect(const lv_indev_t * indev, lv_point_t * point)
{
    if(indev == NULL) {
 800e604:	b918      	cbnz	r0, 800e60e <lv_indev_get_vect+0xa>
        point->x = 0;
 800e606:	2300      	movs	r3, #0
 800e608:	800b      	strh	r3, [r1, #0]
    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) {
        point->x = 0;
        point->y = 0;
    } else {
        point->x = indev->proc.types.pointer.vect.x;
        point->y = indev->proc.types.pointer.vect.y;
 800e60a:	804b      	strh	r3, [r1, #2]
 800e60c:	4770      	bx	lr
    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) {
 800e60e:	7803      	ldrb	r3, [r0, #0]
 800e610:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 800e614:	2b01      	cmp	r3, #1
 800e616:	d1f6      	bne.n	800e606 <lv_indev_get_vect+0x2>
        point->x = indev->proc.types.pointer.vect.x;
 800e618:	f9b0 302c 	ldrsh.w	r3, [r0, #44]	; 0x2c
 800e61c:	800b      	strh	r3, [r1, #0]
        point->y = indev->proc.types.pointer.vect.y;
 800e61e:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	; 0x2e
 800e622:	e7f2      	b.n	800e60a <lv_indev_get_vect+0x6>

0800e624 <lv_indev_get_obj_act>:
 * @return pointer to currently active object or NULL if no active object
 */
lv_obj_t * lv_indev_get_obj_act(void)
{
    return indev_obj_act;
}
 800e624:	4b01      	ldr	r3, [pc, #4]	; (800e62c <lv_indev_get_obj_act+0x8>)
 800e626:	6818      	ldr	r0, [r3, #0]
 800e628:	4770      	bx	lr
 800e62a:	bf00      	nop
 800e62c:	20005fdc 	.word	0x20005fdc

0800e630 <lv_event_mark_deleted>:
    lv_mem_free(obj); /*Free the object itself*/
}

static void lv_event_mark_deleted(lv_obj_t * obj)
{
    lv_event_temp_data_t * t = event_temp_data_head;
 800e630:	4b05      	ldr	r3, [pc, #20]	; (800e648 <lv_event_mark_deleted+0x18>)
 800e632:	681b      	ldr	r3, [r3, #0]

    while(t) {
        if(t->obj == obj) t->deleted = true;
 800e634:	2201      	movs	r2, #1
    while(t) {
 800e636:	b903      	cbnz	r3, 800e63a <lv_event_mark_deleted+0xa>
        t = t->prev;
    }
}
 800e638:	4770      	bx	lr
        if(t->obj == obj) t->deleted = true;
 800e63a:	6819      	ldr	r1, [r3, #0]
 800e63c:	4281      	cmp	r1, r0
 800e63e:	bf08      	it	eq
 800e640:	711a      	strbeq	r2, [r3, #4]
        t = t->prev;
 800e642:	689b      	ldr	r3, [r3, #8]
 800e644:	e7f7      	b.n	800e636 <lv_event_mark_deleted+0x6>
 800e646:	bf00      	nop
 800e648:	20005fe4 	.word	0x20005fe4

0800e64c <refresh_children_position>:
{
 800e64c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    LV_LL_READ(obj->child_ll, i)
 800e650:	1d05      	adds	r5, r0, #4
 800e652:	4628      	mov	r0, r5
{
 800e654:	460e      	mov	r6, r1
 800e656:	4617      	mov	r7, r2
    LV_LL_READ(obj->child_ll, i)
 800e658:	f005 fdce 	bl	80141f8 <lv_ll_get_head>
        i->coords.x1 += x_diff;
 800e65c:	fa1f f886 	uxth.w	r8, r6
    LV_LL_READ(obj->child_ll, i)
 800e660:	4604      	mov	r4, r0
        i->coords.y1 += y_diff;
 800e662:	fa1f f987 	uxth.w	r9, r7
    LV_LL_READ(obj->child_ll, i)
 800e666:	b90c      	cbnz	r4, 800e66c <refresh_children_position+0x20>
}
 800e668:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        i->coords.x1 += x_diff;
 800e66c:	8a23      	ldrh	r3, [r4, #16]
 800e66e:	4443      	add	r3, r8
 800e670:	8223      	strh	r3, [r4, #16]
        i->coords.y1 += y_diff;
 800e672:	8a63      	ldrh	r3, [r4, #18]
 800e674:	444b      	add	r3, r9
 800e676:	8263      	strh	r3, [r4, #18]
        i->coords.x2 += x_diff;
 800e678:	8aa3      	ldrh	r3, [r4, #20]
 800e67a:	4443      	add	r3, r8
 800e67c:	82a3      	strh	r3, [r4, #20]
        i->coords.y2 += y_diff;
 800e67e:	8ae3      	ldrh	r3, [r4, #22]
 800e680:	444b      	add	r3, r9
 800e682:	82e3      	strh	r3, [r4, #22]
        refresh_children_position(i, x_diff, y_diff);
 800e684:	4620      	mov	r0, r4
 800e686:	463a      	mov	r2, r7
 800e688:	4631      	mov	r1, r6
 800e68a:	f7ff ffdf 	bl	800e64c <refresh_children_position>
    LV_LL_READ(obj->child_ll, i)
 800e68e:	4621      	mov	r1, r4
 800e690:	4628      	mov	r0, r5
 800e692:	f005 fdb7 	bl	8014204 <lv_ll_get_next>
 800e696:	4604      	mov	r4, r0
 800e698:	e7e5      	b.n	800e666 <refresh_children_position+0x1a>
	...

0800e69c <lv_init>:
{
 800e69c:	b510      	push	{r4, lr}
    if(lv_initialized) {
 800e69e:	4c11      	ldr	r4, [pc, #68]	; (800e6e4 <lv_init+0x48>)
 800e6a0:	7823      	ldrb	r3, [r4, #0]
 800e6a2:	b9eb      	cbnz	r3, 800e6e0 <lv_init+0x44>
    lv_mem_init();
 800e6a4:	f005 fede 	bl	8014464 <lv_mem_init>
    lv_task_core_init();
 800e6a8:	f005 ff78 	bl	801459c <lv_task_core_init>
    lv_anim_core_init();
 800e6ac:	f005 fbee 	bl	8013e8c <lv_anim_core_init>
    lv_group_init();
 800e6b0:	f7ff fe8a 	bl	800e3c8 <lv_group_init>
    lv_style_init();
 800e6b4:	f001 faec 	bl	800fc90 <lv_style_init>
    lv_refr_init();
 800e6b8:	f001 f8d4 	bl	800f864 <lv_refr_init>
    lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
 800e6bc:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800e6c0:	4809      	ldr	r0, [pc, #36]	; (800e6e8 <lv_init+0x4c>)
 800e6c2:	f005 fd53 	bl	801416c <lv_ll_init>
    lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
 800e6c6:	2160      	movs	r1, #96	; 0x60
 800e6c8:	4808      	ldr	r0, [pc, #32]	; (800e6ec <lv_init+0x50>)
 800e6ca:	f005 fd4f 	bl	801416c <lv_ll_init>
    lv_indev_init();
 800e6ce:	f7ff ff67 	bl	800e5a0 <lv_indev_init>
    lv_img_decoder_init();
 800e6d2:	f005 f8ef 	bl	80138b4 <lv_img_decoder_init>
    lv_img_cache_set_size(LV_IMG_CACHE_DEF_SIZE);
 800e6d6:	2001      	movs	r0, #1
 800e6d8:	f004 fe50 	bl	801337c <lv_img_cache_set_size>
    lv_initialized = true;
 800e6dc:	2301      	movs	r3, #1
 800e6de:	7023      	strb	r3, [r4, #0]
 800e6e0:	bd10      	pop	{r4, pc}
 800e6e2:	bf00      	nop
 800e6e4:	20005fe8 	.word	0x20005fe8
 800e6e8:	2000c5ec 	.word	0x2000c5ec
 800e6ec:	2000c5dc 	.word	0x2000c5dc

0800e6f0 <lv_obj_set_click>:
    obj->click = (en == true ? 1 : 0);
 800e6f0:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800e6f4:	f361 0300 	bfi	r3, r1, #0, #1
 800e6f8:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
 800e6fc:	4770      	bx	lr

0800e6fe <lv_obj_set_drag>:
    if(en == true) lv_obj_set_click(obj, true); /*Drag is useless without enabled clicking*/
 800e6fe:	b129      	cbz	r1, 800e70c <lv_obj_set_drag+0xe>
    obj->click = (en == true ? 1 : 0);
 800e700:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800e704:	f043 0301 	orr.w	r3, r3, #1
 800e708:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
    obj->drag = (en == true ? 1 : 0);
 800e70c:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800e710:	f361 0341 	bfi	r3, r1, #1, #1
 800e714:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
 800e718:	4770      	bx	lr

0800e71a <lv_obj_set_drag_throw>:
    obj->drag_throw = (en == true ? 1 : 0);
 800e71a:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800e71e:	f361 0382 	bfi	r3, r1, #2, #1
 800e722:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
 800e726:	4770      	bx	lr

0800e728 <lv_obj_set_protect>:
    obj->protect |= prot;
 800e728:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 800e72c:	4319      	orrs	r1, r3
 800e72e:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 800e732:	4770      	bx	lr

0800e734 <lv_obj_clear_protect>:
    obj->protect &= prot;
 800e734:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 800e738:	ea23 0101 	bic.w	r1, r3, r1
 800e73c:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 800e740:	4770      	bx	lr

0800e742 <lv_obj_set_event_cb>:
    obj->event_cb = event_cb;
 800e742:	6181      	str	r1, [r0, #24]
 800e744:	4770      	bx	lr
	...

0800e748 <lv_event_send_func>:
{
 800e748:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    if(event_temp_data_head) {
 800e74c:	4c1e      	ldr	r4, [pc, #120]	; (800e7c8 <lv_event_send_func+0x80>)
    event_temp_data.obj     = obj;
 800e74e:	9101      	str	r1, [sp, #4]
{
 800e750:	4698      	mov	r8, r3
    event_temp_data.deleted = false;
 800e752:	2300      	movs	r3, #0
 800e754:	f88d 3008 	strb.w	r3, [sp, #8]
    event_temp_data.prev    = NULL;
 800e758:	9303      	str	r3, [sp, #12]
    if(event_temp_data_head) {
 800e75a:	6823      	ldr	r3, [r4, #0]
{
 800e75c:	4681      	mov	r9, r0
 800e75e:	460d      	mov	r5, r1
 800e760:	4617      	mov	r7, r2
    if(event_temp_data_head) {
 800e762:	b103      	cbz	r3, 800e766 <lv_event_send_func+0x1e>
        event_temp_data.prev = event_temp_data_head;
 800e764:	9303      	str	r3, [sp, #12]
    const void * event_act_data_save = event_act_data;
 800e766:	4e19      	ldr	r6, [pc, #100]	; (800e7cc <lv_event_send_func+0x84>)
    event_temp_data_head = &event_temp_data;
 800e768:	ab01      	add	r3, sp, #4
    const void * event_act_data_save = event_act_data;
 800e76a:	f8d6 a000 	ldr.w	sl, [r6]
    event_temp_data_head = &event_temp_data;
 800e76e:	6023      	str	r3, [r4, #0]
    event_act_data                   = data;
 800e770:	f8c6 8000 	str.w	r8, [r6]
    lv_indev_t * indev_act = lv_indev_get_act();
 800e774:	f7ff ff16 	bl	800e5a4 <lv_indev_get_act>
    if(indev_act) {
 800e778:	b118      	cbz	r0, 800e782 <lv_event_send_func+0x3a>
        if(indev_act->driver.feedback_cb) indev_act->driver.feedback_cb(&indev_act->driver, event);
 800e77a:	6883      	ldr	r3, [r0, #8]
 800e77c:	b10b      	cbz	r3, 800e782 <lv_event_send_func+0x3a>
 800e77e:	4639      	mov	r1, r7
 800e780:	4798      	blx	r3
    if(event_xcb) event_xcb(obj, event);
 800e782:	f1b9 0f00 	cmp.w	r9, #0
 800e786:	d002      	beq.n	800e78e <lv_event_send_func+0x46>
 800e788:	4639      	mov	r1, r7
 800e78a:	4628      	mov	r0, r5
 800e78c:	47c8      	blx	r9
    event_temp_data_head = event_temp_data_head->prev;
 800e78e:	6823      	ldr	r3, [r4, #0]
    event_act_data = event_act_data_save;
 800e790:	f8c6 a000 	str.w	sl, [r6]
    event_temp_data_head = event_temp_data_head->prev;
 800e794:	689b      	ldr	r3, [r3, #8]
 800e796:	6023      	str	r3, [r4, #0]
    if(event_temp_data.deleted) {
 800e798:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800e79c:	b983      	cbnz	r3, 800e7c0 <lv_event_send_func+0x78>
    if(obj) {
 800e79e:	b18d      	cbz	r5, 800e7c4 <lv_event_send_func+0x7c>
        if(obj->parent_event && obj->par) {
 800e7a0:	f995 3030 	ldrsb.w	r3, [r5, #48]	; 0x30
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	da0d      	bge.n	800e7c4 <lv_event_send_func+0x7c>
 800e7a8:	6828      	ldr	r0, [r5, #0]
 800e7aa:	b158      	cbz	r0, 800e7c4 <lv_event_send_func+0x7c>
            lv_res_t res = lv_event_send(obj->par, event, data);
 800e7ac:	4642      	mov	r2, r8
 800e7ae:	4639      	mov	r1, r7
 800e7b0:	f000 f80e 	bl	800e7d0 <lv_event_send>
        return LV_RES_INV;
 800e7b4:	1e43      	subs	r3, r0, #1
 800e7b6:	4258      	negs	r0, r3
 800e7b8:	4158      	adcs	r0, r3
}
 800e7ba:	b004      	add	sp, #16
 800e7bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return LV_RES_INV;
 800e7c0:	2000      	movs	r0, #0
 800e7c2:	e7fa      	b.n	800e7ba <lv_event_send_func+0x72>
    return LV_RES_OK;
 800e7c4:	2001      	movs	r0, #1
 800e7c6:	e7f8      	b.n	800e7ba <lv_event_send_func+0x72>
 800e7c8:	20005fe4 	.word	0x20005fe4
 800e7cc:	20005fe0 	.word	0x20005fe0

0800e7d0 <lv_event_send>:
{
 800e7d0:	4613      	mov	r3, r2
    if(obj == NULL) return LV_RES_OK;
 800e7d2:	b120      	cbz	r0, 800e7de <lv_event_send+0xe>
    res = lv_event_send_func(obj->event_cb, obj, event, data);
 800e7d4:	460a      	mov	r2, r1
 800e7d6:	4601      	mov	r1, r0
 800e7d8:	6980      	ldr	r0, [r0, #24]
 800e7da:	f7ff bfb5 	b.w	800e748 <lv_event_send_func>
}
 800e7de:	2001      	movs	r0, #1
 800e7e0:	4770      	bx	lr

0800e7e2 <delete_children>:
{
 800e7e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    i = lv_ll_get_head(&(obj->child_ll));
 800e7e6:	1d05      	adds	r5, r0, #4
{
 800e7e8:	4604      	mov	r4, r0
    i = lv_ll_get_head(&(obj->child_ll));
 800e7ea:	4628      	mov	r0, r5
 800e7ec:	f005 fd04 	bl	80141f8 <lv_ll_get_head>
    return obj->group_p;
 800e7f0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    i = lv_ll_get_head(&(obj->child_ll));
 800e7f2:	4606      	mov	r6, r0
    if(group) lv_group_remove_obj(obj);
 800e7f4:	b117      	cbz	r7, 800e7fc <delete_children+0x1a>
 800e7f6:	4620      	mov	r0, r4
 800e7f8:	f7ff fe4b 	bl	800e492 <lv_group_remove_obj>
    while(i != NULL) {
 800e7fc:	bb1e      	cbnz	r6, 800e846 <delete_children+0x64>
    lv_event_send(obj, LV_EVENT_DELETE, NULL);
 800e7fe:	4632      	mov	r2, r6
 800e800:	2113      	movs	r1, #19
 800e802:	4620      	mov	r0, r4
 800e804:	f7ff ffe4 	bl	800e7d0 <lv_event_send>
    lv_event_mark_deleted(obj);
 800e808:	4620      	mov	r0, r4
 800e80a:	f7ff ff11 	bl	800e630 <lv_event_mark_deleted>
    lv_anim_del(obj, NULL);
 800e80e:	4631      	mov	r1, r6
 800e810:	4620      	mov	r0, r4
 800e812:	f005 fb53 	bl	8013ebc <lv_anim_del>
    lv_indev_t * indev = lv_indev_get_next(NULL);
 800e816:	4630      	mov	r0, r6
        indev = lv_indev_get_next(indev);
 800e818:	f005 fa68 	bl	8013cec <lv_indev_get_next>
 800e81c:	4605      	mov	r5, r0
    while(indev) {
 800e81e:	b9e0      	cbnz	r0, 800e85a <delete_children+0x78>
    lv_ll_rem(&(par->child_ll), obj);
 800e820:	6820      	ldr	r0, [r4, #0]
 800e822:	4621      	mov	r1, r4
 800e824:	3004      	adds	r0, #4
 800e826:	f005 fd26 	bl	8014276 <lv_ll_rem>
    obj->signal_cb(obj, LV_SIGNAL_CLEANUP, NULL);
 800e82a:	69e3      	ldr	r3, [r4, #28]
 800e82c:	462a      	mov	r2, r5
 800e82e:	4629      	mov	r1, r5
 800e830:	4620      	mov	r0, r4
 800e832:	4798      	blx	r3
    if(obj->ext_attr != NULL) lv_mem_free(obj->ext_attr);
 800e834:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e836:	b108      	cbz	r0, 800e83c <delete_children+0x5a>
 800e838:	f005 fe5c 	bl	80144f4 <lv_mem_free>
    lv_mem_free(obj); /*Free the object itself*/
 800e83c:	4620      	mov	r0, r4
}
 800e83e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_mem_free(obj); /*Free the object itself*/
 800e842:	f005 be57 	b.w	80144f4 <lv_mem_free>
        i_next = lv_ll_get_next(&(obj->child_ll), i);
 800e846:	4631      	mov	r1, r6
 800e848:	4628      	mov	r0, r5
 800e84a:	f005 fcdb 	bl	8014204 <lv_ll_get_next>
 800e84e:	4680      	mov	r8, r0
        delete_children(i);
 800e850:	4630      	mov	r0, r6
 800e852:	f7ff ffc6 	bl	800e7e2 <delete_children>
        i = i_next;
 800e856:	4646      	mov	r6, r8
 800e858:	e7d0      	b.n	800e7fc <delete_children+0x1a>
        if(indev->proc.types.pointer.act_obj == obj || indev->proc.types.pointer.last_obj == obj) {
 800e85a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800e85c:	429c      	cmp	r4, r3
 800e85e:	d002      	beq.n	800e866 <delete_children+0x84>
 800e860:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800e862:	429c      	cmp	r4, r3
 800e864:	d102      	bne.n	800e86c <delete_children+0x8a>
            lv_indev_reset(indev);
 800e866:	4628      	mov	r0, r5
 800e868:	f7ff fea5 	bl	800e5b6 <lv_indev_reset>
        if(indev->proc.types.pointer.last_pressed == obj) {
 800e86c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800e86e:	429c      	cmp	r4, r3
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
 800e870:	6dab      	ldr	r3, [r5, #88]	; 0x58
            indev->proc.types.pointer.last_pressed = NULL;
 800e872:	bf08      	it	eq
 800e874:	642e      	streq	r6, [r5, #64]	; 0x40
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
 800e876:	42bb      	cmp	r3, r7
 800e878:	d106      	bne.n	800e888 <delete_children+0xa6>
 800e87a:	f7ff fed3 	bl	800e624 <lv_indev_get_obj_act>
 800e87e:	4284      	cmp	r4, r0
 800e880:	d102      	bne.n	800e888 <delete_children+0xa6>
            lv_indev_reset(indev);
 800e882:	4628      	mov	r0, r5
 800e884:	f7ff fe97 	bl	800e5b6 <lv_indev_reset>
        indev = lv_indev_get_next(indev);
 800e888:	4628      	mov	r0, r5
 800e88a:	e7c5      	b.n	800e818 <delete_children+0x36>

0800e88c <lv_event_get_data>:
}
 800e88c:	4b01      	ldr	r3, [pc, #4]	; (800e894 <lv_event_get_data+0x8>)
 800e88e:	6818      	ldr	r0, [r3, #0]
 800e890:	4770      	bx	lr
 800e892:	bf00      	nop
 800e894:	20005fe0 	.word	0x20005fe0

0800e898 <lv_obj_set_signal_cb>:
    obj->signal_cb = signal_cb;
 800e898:	61c1      	str	r1, [r0, #28]
 800e89a:	4770      	bx	lr

0800e89c <lv_obj_set_design_cb>:
    obj->design_cb = design_cb;
 800e89c:	6201      	str	r1, [r0, #32]
 800e89e:	4770      	bx	lr

0800e8a0 <lv_obj_allocate_ext_attr>:
{
 800e8a0:	b510      	push	{r4, lr}
 800e8a2:	4604      	mov	r4, r0
    obj->ext_attr = lv_mem_realloc(obj->ext_attr, ext_size);
 800e8a4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800e8a6:	f005 fe4f 	bl	8014548 <lv_mem_realloc>
 800e8aa:	6260      	str	r0, [r4, #36]	; 0x24
}
 800e8ac:	bd10      	pop	{r4, pc}
	...

0800e8b0 <lv_obj_get_disp>:
{
 800e8b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(obj->par == NULL)
 800e8b2:	6803      	ldr	r3, [r0, #0]
{
 800e8b4:	4605      	mov	r5, r0
    if(obj->par == NULL)
 800e8b6:	b943      	cbnz	r3, 800e8ca <lv_obj_get_disp+0x1a>
    LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d)
 800e8b8:	480f      	ldr	r0, [pc, #60]	; (800e8f8 <lv_obj_get_disp+0x48>)
 800e8ba:	4f0f      	ldr	r7, [pc, #60]	; (800e8f8 <lv_obj_get_disp+0x48>)
 800e8bc:	f005 fc9c 	bl	80141f8 <lv_ll_get_head>
 800e8c0:	4604      	mov	r4, r0
 800e8c2:	b934      	cbnz	r4, 800e8d2 <lv_obj_get_disp+0x22>
}
 800e8c4:	4620      	mov	r0, r4
 800e8c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } while(par != NULL);
 800e8c8:	461d      	mov	r5, r3
    return obj->par;
 800e8ca:	682b      	ldr	r3, [r5, #0]
    } while(par != NULL);
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d1fb      	bne.n	800e8c8 <lv_obj_get_disp+0x18>
 800e8d0:	e7f2      	b.n	800e8b8 <lv_obj_get_disp+0x8>
        LV_LL_READ(d->scr_ll, s)
 800e8d2:	f104 0628 	add.w	r6, r4, #40	; 0x28
 800e8d6:	4630      	mov	r0, r6
 800e8d8:	f005 fc8e 	bl	80141f8 <lv_ll_get_head>
 800e8dc:	b928      	cbnz	r0, 800e8ea <lv_obj_get_disp+0x3a>
    LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d)
 800e8de:	4621      	mov	r1, r4
 800e8e0:	4638      	mov	r0, r7
 800e8e2:	f005 fc8f 	bl	8014204 <lv_ll_get_next>
 800e8e6:	4604      	mov	r4, r0
 800e8e8:	e7eb      	b.n	800e8c2 <lv_obj_get_disp+0x12>
            if(s == scr) return d;
 800e8ea:	4285      	cmp	r5, r0
 800e8ec:	d0ea      	beq.n	800e8c4 <lv_obj_get_disp+0x14>
        LV_LL_READ(d->scr_ll, s)
 800e8ee:	4601      	mov	r1, r0
 800e8f0:	4630      	mov	r0, r6
 800e8f2:	f005 fc87 	bl	8014204 <lv_ll_get_next>
 800e8f6:	e7f1      	b.n	800e8dc <lv_obj_get_disp+0x2c>
 800e8f8:	2000c5ec 	.word	0x2000c5ec

0800e8fc <lv_obj_invalidate>:
    return obj->hidden == 0 ? false : true;
 800e8fc:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
    if(lv_obj_get_hidden(obj)) return;
 800e900:	06da      	lsls	r2, r3, #27
{
 800e902:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e904:	4604      	mov	r4, r0
    if(lv_obj_get_hidden(obj)) return;
 800e906:	d439      	bmi.n	800e97c <lv_obj_invalidate+0x80>
 800e908:	4605      	mov	r5, r0
    return obj->par;
 800e90a:	682b      	ldr	r3, [r5, #0]
    } while(par != NULL);
 800e90c:	bb53      	cbnz	r3, 800e964 <lv_obj_invalidate+0x68>
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
 800e90e:	4628      	mov	r0, r5
 800e910:	f7ff ffce 	bl	800e8b0 <lv_obj_get_disp>
 800e914:	4606      	mov	r6, r0
    if(obj_scr == lv_disp_get_scr_act(disp) || obj_scr == lv_disp_get_layer_top(disp) ||
 800e916:	f7ff fcba 	bl	800e28e <lv_disp_get_scr_act>
 800e91a:	4285      	cmp	r5, r0
 800e91c:	d124      	bne.n	800e968 <lv_obj_invalidate+0x6c>
        lv_coord_t ext_size = obj->ext_draw_pad;
 800e91e:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
    return obj->par;
 800e922:	6825      	ldr	r5, [r4, #0]
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    memcpy(dest, src, sizeof(lv_area_t));
 800e924:	f854 0f10 	ldr.w	r0, [r4, #16]!
 800e928:	6861      	ldr	r1, [r4, #4]
 800e92a:	466a      	mov	r2, sp
 800e92c:	c203      	stmia	r2!, {r0, r1}
        area_trunc.x1 -= ext_size;
 800e92e:	f8bd 2000 	ldrh.w	r2, [sp]
 800e932:	b29b      	uxth	r3, r3
 800e934:	1ad2      	subs	r2, r2, r3
 800e936:	f8ad 2000 	strh.w	r2, [sp]
        area_trunc.y1 -= ext_size;
 800e93a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800e93e:	1ad2      	subs	r2, r2, r3
 800e940:	f8ad 2002 	strh.w	r2, [sp, #2]
        area_trunc.x2 += ext_size;
 800e944:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800e948:	441a      	add	r2, r3
 800e94a:	f8ad 2004 	strh.w	r2, [sp, #4]
        area_trunc.y2 += ext_size;
 800e94e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e952:	4413      	add	r3, r2
 800e954:	f8ad 3006 	strh.w	r3, [sp, #6]
        while(par != NULL) {
 800e958:	b995      	cbnz	r5, 800e980 <lv_obj_invalidate+0x84>
        if(union_ok) lv_inv_area(disp, &area_trunc);
 800e95a:	4669      	mov	r1, sp
 800e95c:	4630      	mov	r0, r6
 800e95e:	f000 ff83 	bl	800f868 <lv_inv_area>
 800e962:	e00b      	b.n	800e97c <lv_obj_invalidate+0x80>
    } while(par != NULL);
 800e964:	461d      	mov	r5, r3
 800e966:	e7d0      	b.n	800e90a <lv_obj_invalidate+0xe>
    if(obj_scr == lv_disp_get_scr_act(disp) || obj_scr == lv_disp_get_layer_top(disp) ||
 800e968:	4630      	mov	r0, r6
 800e96a:	f7ff fca1 	bl	800e2b0 <lv_disp_get_layer_top>
 800e96e:	4285      	cmp	r5, r0
 800e970:	d0d5      	beq.n	800e91e <lv_obj_invalidate+0x22>
       obj_scr == lv_disp_get_layer_sys(disp)) {
 800e972:	4630      	mov	r0, r6
 800e974:	f7ff fca3 	bl	800e2be <lv_disp_get_layer_sys>
    if(obj_scr == lv_disp_get_scr_act(disp) || obj_scr == lv_disp_get_layer_top(disp) ||
 800e978:	4285      	cmp	r5, r0
 800e97a:	d0d0      	beq.n	800e91e <lv_obj_invalidate+0x22>
}
 800e97c:	b002      	add	sp, #8
 800e97e:	bd70      	pop	{r4, r5, r6, pc}
            union_ok = lv_area_intersect(&area_trunc, &area_trunc, &par->coords);
 800e980:	f105 0210 	add.w	r2, r5, #16
 800e984:	4669      	mov	r1, sp
 800e986:	4668      	mov	r0, sp
 800e988:	f005 fb31 	bl	8013fee <lv_area_intersect>
            if(union_ok == false) break;       /*If no common parts with parent break;*/
 800e98c:	2800      	cmp	r0, #0
 800e98e:	d0f5      	beq.n	800e97c <lv_obj_invalidate+0x80>
    return obj->hidden == 0 ? false : true;
 800e990:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
            if(lv_obj_get_hidden(par)) return; /*If the parent is hidden then the child is hidden and won't be drawn*/
 800e994:	06db      	lsls	r3, r3, #27
 800e996:	d4f1      	bmi.n	800e97c <lv_obj_invalidate+0x80>
    return obj->par;
 800e998:	682d      	ldr	r5, [r5, #0]
 800e99a:	e7dd      	b.n	800e958 <lv_obj_invalidate+0x5c>

0800e99c <lv_obj_move_foreground>:
{
 800e99c:	b570      	push	{r4, r5, r6, lr}
    return obj->par;
 800e99e:	6804      	ldr	r4, [r0, #0]
    if(lv_ll_get_head(&parent->child_ll) == obj) return;
 800e9a0:	1d26      	adds	r6, r4, #4
{
 800e9a2:	4605      	mov	r5, r0
    if(lv_ll_get_head(&parent->child_ll) == obj) return;
 800e9a4:	4630      	mov	r0, r6
 800e9a6:	f005 fc27 	bl	80141f8 <lv_ll_get_head>
 800e9aa:	4285      	cmp	r5, r0
 800e9ac:	d012      	beq.n	800e9d4 <lv_obj_move_foreground+0x38>
    lv_obj_invalidate(parent);
 800e9ae:	4620      	mov	r0, r4
 800e9b0:	f7ff ffa4 	bl	800e8fc <lv_obj_invalidate>
    lv_ll_chg_list(&parent->child_ll, &parent->child_ll, obj, true);
 800e9b4:	462a      	mov	r2, r5
 800e9b6:	4631      	mov	r1, r6
 800e9b8:	4630      	mov	r0, r6
 800e9ba:	2301      	movs	r3, #1
 800e9bc:	f005 fc95 	bl	80142ea <lv_ll_chg_list>
    parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, obj);
 800e9c0:	69e3      	ldr	r3, [r4, #28]
 800e9c2:	462a      	mov	r2, r5
 800e9c4:	4620      	mov	r0, r4
 800e9c6:	2101      	movs	r1, #1
 800e9c8:	4798      	blx	r3
    lv_obj_invalidate(parent);
 800e9ca:	4620      	mov	r0, r4
}
 800e9cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_invalidate(parent);
 800e9d0:	f7ff bf94 	b.w	800e8fc <lv_obj_invalidate>
 800e9d4:	bd70      	pop	{r4, r5, r6, pc}

0800e9d6 <lv_obj_set_pos>:
{
 800e9d6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    lv_obj_t * par = obj->par;
 800e9da:	6806      	ldr	r6, [r0, #0]
    diff.x = x - obj->coords.x1;
 800e9dc:	8a03      	ldrh	r3, [r0, #16]
 800e9de:	f8b6 8010 	ldrh.w	r8, [r6, #16]
    diff.y = y - obj->coords.y1;
 800e9e2:	8a75      	ldrh	r5, [r6, #18]
    diff.x = x - obj->coords.x1;
 800e9e4:	eba8 0803 	sub.w	r8, r8, r3
    diff.y = y - obj->coords.y1;
 800e9e8:	8a43      	ldrh	r3, [r0, #18]
    diff.x = x - obj->coords.x1;
 800e9ea:	4488      	add	r8, r1
    diff.y = y - obj->coords.y1;
 800e9ec:	1aed      	subs	r5, r5, r3
    diff.x = x - obj->coords.x1;
 800e9ee:	fa1f f888 	uxth.w	r8, r8
    diff.y = y - obj->coords.y1;
 800e9f2:	4415      	add	r5, r2
 800e9f4:	b2ad      	uxth	r5, r5
    diff.x = x - obj->coords.x1;
 800e9f6:	fa0f f788 	sxth.w	r7, r8
{
 800e9fa:	4604      	mov	r4, r0
    diff.y = y - obj->coords.y1;
 800e9fc:	fa0f f985 	sxth.w	r9, r5
    if(diff.x == 0 && diff.y == 0) return;
 800ea00:	b917      	cbnz	r7, 800ea08 <lv_obj_set_pos+0x32>
 800ea02:	f1b9 0f00 	cmp.w	r9, #0
 800ea06:	d026      	beq.n	800ea56 <lv_obj_set_pos+0x80>
    lv_obj_invalidate(obj);
 800ea08:	4620      	mov	r0, r4
 800ea0a:	f7ff ff77 	bl	800e8fc <lv_obj_invalidate>
 800ea0e:	4622      	mov	r2, r4
 800ea10:	466b      	mov	r3, sp
 800ea12:	f852 0f10 	ldr.w	r0, [r2, #16]!
 800ea16:	6851      	ldr	r1, [r2, #4]
    obj->coords.y2 += diff.y;
 800ea18:	8ae2      	ldrh	r2, [r4, #22]
 800ea1a:	c303      	stmia	r3!, {r0, r1}
    obj->coords.x1 += diff.x;
 800ea1c:	8a23      	ldrh	r3, [r4, #16]
    obj->coords.x2 += diff.x;
 800ea1e:	8aa1      	ldrh	r1, [r4, #20]
    obj->coords.x1 += diff.x;
 800ea20:	4443      	add	r3, r8
 800ea22:	8223      	strh	r3, [r4, #16]
    obj->coords.y1 += diff.y;
 800ea24:	8a63      	ldrh	r3, [r4, #18]
    obj->coords.x2 += diff.x;
 800ea26:	4441      	add	r1, r8
    obj->coords.y1 += diff.y;
 800ea28:	442b      	add	r3, r5
    obj->coords.y2 += diff.y;
 800ea2a:	4415      	add	r5, r2
    obj->coords.y1 += diff.y;
 800ea2c:	8263      	strh	r3, [r4, #18]
    obj->coords.x2 += diff.x;
 800ea2e:	82a1      	strh	r1, [r4, #20]
    refresh_children_position(obj, diff.x, diff.y);
 800ea30:	464a      	mov	r2, r9
 800ea32:	4639      	mov	r1, r7
 800ea34:	4620      	mov	r0, r4
    obj->coords.y2 += diff.y;
 800ea36:	82e5      	strh	r5, [r4, #22]
    refresh_children_position(obj, diff.x, diff.y);
 800ea38:	f7ff fe08 	bl	800e64c <refresh_children_position>
    obj->signal_cb(obj, LV_SIGNAL_CORD_CHG, &ori);
 800ea3c:	69e3      	ldr	r3, [r4, #28]
 800ea3e:	466a      	mov	r2, sp
 800ea40:	2102      	movs	r1, #2
 800ea42:	4620      	mov	r0, r4
 800ea44:	4798      	blx	r3
    par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
 800ea46:	69f3      	ldr	r3, [r6, #28]
 800ea48:	4622      	mov	r2, r4
 800ea4a:	2101      	movs	r1, #1
 800ea4c:	4630      	mov	r0, r6
 800ea4e:	4798      	blx	r3
    lv_obj_invalidate(obj);
 800ea50:	4620      	mov	r0, r4
 800ea52:	f7ff ff53 	bl	800e8fc <lv_obj_invalidate>
}
 800ea56:	b003      	add	sp, #12
 800ea58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800ea5c <lv_obj_set_x>:
{
 800ea5c:	b410      	push	{r4}
    rel_y             = obj->coords.y1 - parent->coords.y1;
 800ea5e:	6804      	ldr	r4, [r0, #0]
 800ea60:	8a42      	ldrh	r2, [r0, #18]
 800ea62:	8a63      	ldrh	r3, [r4, #18]
}
 800ea64:	f85d 4b04 	ldr.w	r4, [sp], #4
    rel_y             = obj->coords.y1 - parent->coords.y1;
 800ea68:	1ad2      	subs	r2, r2, r3
    lv_obj_set_pos(obj, x, lv_obj_get_y(obj));
 800ea6a:	b212      	sxth	r2, r2
 800ea6c:	f7ff bfb3 	b.w	800e9d6 <lv_obj_set_pos>

0800ea70 <lv_obj_set_y>:
    rel_x             = obj->coords.x1 - parent->coords.x1;
 800ea70:	6802      	ldr	r2, [r0, #0]
 800ea72:	8a03      	ldrh	r3, [r0, #16]
 800ea74:	8a12      	ldrh	r2, [r2, #16]
 800ea76:	1a9b      	subs	r3, r3, r2
    lv_obj_set_pos(obj, lv_obj_get_x(obj), y);
 800ea78:	460a      	mov	r2, r1
 800ea7a:	b219      	sxth	r1, r3
 800ea7c:	f7ff bfab 	b.w	800e9d6 <lv_obj_set_pos>

0800ea80 <lv_obj_align>:
{
 800ea80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return obj->par;
 800ea84:	6804      	ldr	r4, [r0, #0]
{
 800ea86:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
    rel_x             = obj->coords.x1 - parent->coords.x1;
 800ea8a:	f8b4 e010 	ldrh.w	lr, [r4, #16]
    rel_y             = obj->coords.y1 - parent->coords.y1;
 800ea8e:	f8b4 c012 	ldrh.w	ip, [r4, #18]
{
 800ea92:	4605      	mov	r5, r0
 800ea94:	4616      	mov	r6, r2
 800ea96:	4698      	mov	r8, r3
    rel_x             = obj->coords.x1 - parent->coords.x1;
 800ea98:	8a00      	ldrh	r0, [r0, #16]
    rel_y             = obj->coords.y1 - parent->coords.y1;
 800ea9a:	f8b5 9012 	ldrh.w	r9, [r5, #18]
 800ea9e:	2900      	cmp	r1, #0
 800eaa0:	bf18      	it	ne
 800eaa2:	460c      	movne	r4, r1
    switch(align) {
 800eaa4:	2a14      	cmp	r2, #20
 800eaa6:	d816      	bhi.n	800ead6 <lv_obj_align+0x56>
 800eaa8:	e8df f012 	tbh	[pc, r2, lsl #1]
 800eaac:	0128001c 	.word	0x0128001c
 800eab0:	00540042 	.word	0x00540042
 800eab4:	0083005a 	.word	0x0083005a
 800eab8:	00a4009e 	.word	0x00a4009e
 800eabc:	00cd00b5 	.word	0x00cd00b5
 800eac0:	00e700d2 	.word	0x00e700d2
 800eac4:	00f200ed 	.word	0x00f200ed
 800eac8:	010d0107 	.word	0x010d0107
 800eacc:	01150111 	.word	0x01150111
 800ead0:	011e0119 	.word	0x011e0119
 800ead4:	0123      	.short	0x0123
    rel_x             = obj->coords.x1 - parent->coords.x1;
 800ead6:	eba0 010e 	sub.w	r1, r0, lr
 800eada:	b209      	sxth	r1, r1
    rel_y             = obj->coords.y1 - parent->coords.y1;
 800eadc:	eba9 020c 	sub.w	r2, r9, ip
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 800eae0:	b212      	sxth	r2, r2
            break;
 800eae2:	e049      	b.n	800eb78 <lv_obj_align+0xf8>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return area_p->x2 - area_p->x1 + 1;
 800eae4:	f8b4 a014 	ldrh.w	sl, [r4, #20]
 800eae8:	8a21      	ldrh	r1, [r4, #16]
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 800eaea:	8ae3      	ldrh	r3, [r4, #22]
 800eaec:	8a62      	ldrh	r2, [r4, #18]
    return area_p->x2 - area_p->x1 + 1;
 800eaee:	f10a 0a01 	add.w	sl, sl, #1
 800eaf2:	ebaa 0a01 	sub.w	sl, sl, r1
    return area_p->y2 - area_p->y1 + 1;
 800eaf6:	3301      	adds	r3, #1
    return area_p->x2 - area_p->x1 + 1;
 800eaf8:	8aa9      	ldrh	r1, [r5, #20]
    return area_p->y2 - area_p->y1 + 1;
 800eafa:	1a9b      	subs	r3, r3, r2
 800eafc:	8aea      	ldrh	r2, [r5, #22]
    return area_p->x2 - area_p->x1 + 1;
 800eafe:	3101      	adds	r1, #1
 800eb00:	1a09      	subs	r1, r1, r0
    return area_p->y2 - area_p->y1 + 1;
 800eb02:	3201      	adds	r2, #1
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 800eb04:	f04f 0b02 	mov.w	fp, #2
 800eb08:	fa0f fa8a 	sxth.w	sl, sl
 800eb0c:	b209      	sxth	r1, r1
 800eb0e:	fb9a fafb 	sdiv	sl, sl, fp
 800eb12:	fb91 f1fb 	sdiv	r1, r1, fp
 800eb16:	eba2 0209 	sub.w	r2, r2, r9
 800eb1a:	ebaa 0101 	sub.w	r1, sl, r1
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 800eb1e:	b21b      	sxth	r3, r3
 800eb20:	b212      	sxth	r2, r2
 800eb22:	fb93 f3fb 	sdiv	r3, r3, fp
 800eb26:	fb92 f2fb 	sdiv	r2, r2, fp
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 800eb2a:	b209      	sxth	r1, r1
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 800eb2c:	1a9a      	subs	r2, r3, r2
 800eb2e:	e7d7      	b.n	800eae0 <lv_obj_align+0x60>
    return area_p->x2 - area_p->x1 + 1;
 800eb30:	8aa1      	ldrh	r1, [r4, #20]
 800eb32:	8a23      	ldrh	r3, [r4, #16]
 800eb34:	3101      	adds	r1, #1
 800eb36:	1ac9      	subs	r1, r1, r3
 800eb38:	8aab      	ldrh	r3, [r5, #20]
 800eb3a:	3301      	adds	r3, #1
 800eb3c:	1a18      	subs	r0, r3, r0
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 800eb3e:	2202      	movs	r2, #2
 800eb40:	b209      	sxth	r1, r1
 800eb42:	b200      	sxth	r0, r0
 800eb44:	fb91 f1f2 	sdiv	r1, r1, r2
 800eb48:	fb90 f0f2 	sdiv	r0, r0, r2
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 800eb4c:	1a09      	subs	r1, r1, r0
 800eb4e:	b209      	sxth	r1, r1
            new_y = 0;
 800eb50:	2200      	movs	r2, #0
            break;
 800eb52:	e011      	b.n	800eb78 <lv_obj_align+0xf8>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 800eb54:	8aa9      	ldrh	r1, [r5, #20]
 800eb56:	1a08      	subs	r0, r1, r0
 800eb58:	8aa1      	ldrh	r1, [r4, #20]
 800eb5a:	1a09      	subs	r1, r1, r0
 800eb5c:	8a20      	ldrh	r0, [r4, #16]
 800eb5e:	e7f5      	b.n	800eb4c <lv_obj_align+0xcc>
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 800eb60:	8aea      	ldrh	r2, [r5, #22]
 800eb62:	eba2 0909 	sub.w	r9, r2, r9
 800eb66:	8ae2      	ldrh	r2, [r4, #22]
 800eb68:	eba2 0209 	sub.w	r2, r2, r9
 800eb6c:	f8b4 9012 	ldrh.w	r9, [r4, #18]
 800eb70:	eba2 0209 	sub.w	r2, r2, r9
    return area_p->y2 - area_p->y1 + 1;
 800eb74:	b212      	sxth	r2, r2
            new_x = 0;
 800eb76:	2100      	movs	r1, #0
    new_x -= par_abs_x;
 800eb78:	8a23      	ldrh	r3, [r4, #16]
 800eb7a:	eba8 0e0e 	sub.w	lr, r8, lr
 800eb7e:	449e      	add	lr, r3
    new_y -= par_abs_y;
 800eb80:	8a63      	ldrh	r3, [r4, #18]
 800eb82:	eba7 0c0c 	sub.w	ip, r7, ip
 800eb86:	449c      	add	ip, r3
    new_x -= par_abs_x;
 800eb88:	4471      	add	r1, lr
    new_y -= par_abs_y;
 800eb8a:	4462      	add	r2, ip
    lv_obj_set_pos(obj, new_x, new_y);
 800eb8c:	b212      	sxth	r2, r2
 800eb8e:	b209      	sxth	r1, r1
 800eb90:	4628      	mov	r0, r5
 800eb92:	f7ff ff20 	bl	800e9d6 <lv_obj_set_pos>
    obj->realign.origo_align = 0;
 800eb96:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
    obj->realign.align       = align;
 800eb9a:	f885 6040 	strb.w	r6, [r5, #64]	; 0x40
    obj->realign.origo_align = 0;
 800eb9e:	f36f 0341 	bfc	r3, #1, #1
    obj->realign.xofs        = x_mod;
 800eba2:	f8a5 803c 	strh.w	r8, [r5, #60]	; 0x3c
    obj->realign.yofs        = y_mod;
 800eba6:	87ef      	strh	r7, [r5, #62]	; 0x3e
    obj->realign.base        = base;
 800eba8:	63ac      	str	r4, [r5, #56]	; 0x38
    obj->realign.origo_align = 0;
 800ebaa:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
 800ebae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return area_p->x2 - area_p->x1 + 1;
 800ebb2:	8aa1      	ldrh	r1, [r4, #20]
 800ebb4:	8a23      	ldrh	r3, [r4, #16]
 800ebb6:	3101      	adds	r1, #1
 800ebb8:	1ac9      	subs	r1, r1, r3
 800ebba:	8aab      	ldrh	r3, [r5, #20]
 800ebbc:	3301      	adds	r3, #1
 800ebbe:	1a18      	subs	r0, r3, r0
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 800ebc0:	2202      	movs	r2, #2
 800ebc2:	b209      	sxth	r1, r1
 800ebc4:	b200      	sxth	r0, r0
 800ebc6:	fb91 f1f2 	sdiv	r1, r1, r2
 800ebca:	fb90 f0f2 	sdiv	r0, r0, r2
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 800ebce:	1a09      	subs	r1, r1, r0
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 800ebd0:	8aea      	ldrh	r2, [r5, #22]
 800ebd2:	eba2 0909 	sub.w	r9, r2, r9
 800ebd6:	8ae2      	ldrh	r2, [r4, #22]
 800ebd8:	eba2 0209 	sub.w	r2, r2, r9
 800ebdc:	f8b4 9012 	ldrh.w	r9, [r4, #18]
 800ebe0:	b209      	sxth	r1, r1
 800ebe2:	eba2 0209 	sub.w	r2, r2, r9
 800ebe6:	e77b      	b.n	800eae0 <lv_obj_align+0x60>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 800ebe8:	8aa9      	ldrh	r1, [r5, #20]
 800ebea:	1a08      	subs	r0, r1, r0
 800ebec:	8aa1      	ldrh	r1, [r4, #20]
 800ebee:	1a09      	subs	r1, r1, r0
 800ebf0:	8a20      	ldrh	r0, [r4, #16]
 800ebf2:	e7ec      	b.n	800ebce <lv_obj_align+0x14e>
    return area_p->y2 - area_p->y1 + 1;
 800ebf4:	8ae3      	ldrh	r3, [r4, #22]
 800ebf6:	8a62      	ldrh	r2, [r4, #18]
 800ebf8:	3301      	adds	r3, #1
 800ebfa:	1a9b      	subs	r3, r3, r2
 800ebfc:	8aea      	ldrh	r2, [r5, #22]
 800ebfe:	3201      	adds	r2, #1
 800ec00:	eba2 0209 	sub.w	r2, r2, r9
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 800ec04:	2102      	movs	r1, #2
 800ec06:	b21b      	sxth	r3, r3
 800ec08:	b212      	sxth	r2, r2
 800ec0a:	fb93 f3f1 	sdiv	r3, r3, r1
 800ec0e:	fb92 f2f1 	sdiv	r2, r2, r1
 800ec12:	1a9a      	subs	r2, r3, r2
 800ec14:	e7ae      	b.n	800eb74 <lv_obj_align+0xf4>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 800ec16:	8aa9      	ldrh	r1, [r5, #20]
 800ec18:	1a08      	subs	r0, r1, r0
 800ec1a:	8aa1      	ldrh	r1, [r4, #20]
 800ec1c:	1a09      	subs	r1, r1, r0
 800ec1e:	8a20      	ldrh	r0, [r4, #16]
 800ec20:	1a09      	subs	r1, r1, r0
 800ec22:	8ae0      	ldrh	r0, [r4, #22]
 800ec24:	8a62      	ldrh	r2, [r4, #18]
 800ec26:	3001      	adds	r0, #1
 800ec28:	1a80      	subs	r0, r0, r2
 800ec2a:	8aea      	ldrh	r2, [r5, #22]
 800ec2c:	3201      	adds	r2, #1
 800ec2e:	eba2 0209 	sub.w	r2, r2, r9
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 800ec32:	2302      	movs	r3, #2
 800ec34:	b200      	sxth	r0, r0
 800ec36:	b212      	sxth	r2, r2
 800ec38:	fb90 f0f3 	sdiv	r0, r0, r3
 800ec3c:	fb92 f2f3 	sdiv	r2, r2, r3
    return area_p->x2 - area_p->x1 + 1;
 800ec40:	b209      	sxth	r1, r1
 800ec42:	1a82      	subs	r2, r0, r2
 800ec44:	e74c      	b.n	800eae0 <lv_obj_align+0x60>
    return area_p->y2 - area_p->y1 + 1;
 800ec46:	8aea      	ldrh	r2, [r5, #22]
 800ec48:	eba2 0209 	sub.w	r2, r2, r9
            new_y = -lv_obj_get_height(obj);
 800ec4c:	43d2      	mvns	r2, r2
 800ec4e:	e791      	b.n	800eb74 <lv_obj_align+0xf4>
    return area_p->x2 - area_p->x1 + 1;
 800ec50:	8aa1      	ldrh	r1, [r4, #20]
 800ec52:	8a23      	ldrh	r3, [r4, #16]
 800ec54:	3101      	adds	r1, #1
 800ec56:	1ac9      	subs	r1, r1, r3
 800ec58:	8aab      	ldrh	r3, [r5, #20]
 800ec5a:	3301      	adds	r3, #1
 800ec5c:	1a18      	subs	r0, r3, r0
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 800ec5e:	2202      	movs	r2, #2
 800ec60:	b209      	sxth	r1, r1
 800ec62:	b200      	sxth	r0, r0
 800ec64:	fb91 f1f2 	sdiv	r1, r1, r2
 800ec68:	fb90 f0f2 	sdiv	r0, r0, r2
    return area_p->y2 - area_p->y1 + 1;
 800ec6c:	8aea      	ldrh	r2, [r5, #22]
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 800ec6e:	1a09      	subs	r1, r1, r0
 800ec70:	eba2 0209 	sub.w	r2, r2, r9
 800ec74:	b209      	sxth	r1, r1
            new_y = -lv_obj_get_height(obj);
 800ec76:	43d2      	mvns	r2, r2
 800ec78:	e732      	b.n	800eae0 <lv_obj_align+0x60>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 800ec7a:	8aa9      	ldrh	r1, [r5, #20]
 800ec7c:	1a08      	subs	r0, r1, r0
 800ec7e:	8aa1      	ldrh	r1, [r4, #20]
 800ec80:	1a09      	subs	r1, r1, r0
 800ec82:	8a20      	ldrh	r0, [r4, #16]
 800ec84:	e7f2      	b.n	800ec6c <lv_obj_align+0x1ec>
 800ec86:	8ae2      	ldrh	r2, [r4, #22]
 800ec88:	8a63      	ldrh	r3, [r4, #18]
 800ec8a:	3201      	adds	r2, #1
 800ec8c:	1ad2      	subs	r2, r2, r3
 800ec8e:	e771      	b.n	800eb74 <lv_obj_align+0xf4>
    return area_p->x2 - area_p->x1 + 1;
 800ec90:	8aa1      	ldrh	r1, [r4, #20]
 800ec92:	8a23      	ldrh	r3, [r4, #16]
 800ec94:	3101      	adds	r1, #1
 800ec96:	1ac9      	subs	r1, r1, r3
 800ec98:	8aab      	ldrh	r3, [r5, #20]
 800ec9a:	3301      	adds	r3, #1
 800ec9c:	1a18      	subs	r0, r3, r0
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 800ec9e:	2202      	movs	r2, #2
 800eca0:	b209      	sxth	r1, r1
 800eca2:	b200      	sxth	r0, r0
 800eca4:	fb91 f1f2 	sdiv	r1, r1, r2
 800eca8:	fb90 f0f2 	sdiv	r0, r0, r2
    return area_p->y2 - area_p->y1 + 1;
 800ecac:	8ae2      	ldrh	r2, [r4, #22]
 800ecae:	8a63      	ldrh	r3, [r4, #18]
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 800ecb0:	1a09      	subs	r1, r1, r0
 800ecb2:	3201      	adds	r2, #1
 800ecb4:	b209      	sxth	r1, r1
 800ecb6:	1ad2      	subs	r2, r2, r3
 800ecb8:	e712      	b.n	800eae0 <lv_obj_align+0x60>
 800ecba:	8aa9      	ldrh	r1, [r5, #20]
 800ecbc:	1a08      	subs	r0, r1, r0
 800ecbe:	8aa1      	ldrh	r1, [r4, #20]
 800ecc0:	1a09      	subs	r1, r1, r0
 800ecc2:	8a20      	ldrh	r0, [r4, #16]
 800ecc4:	e7f2      	b.n	800ecac <lv_obj_align+0x22c>
    return area_p->x2 - area_p->x1 + 1;
 800ecc6:	8aa9      	ldrh	r1, [r5, #20]
 800ecc8:	1a09      	subs	r1, r1, r0
            new_x = -lv_obj_get_width(obj);
 800ecca:	43c9      	mvns	r1, r1
 800eccc:	e73f      	b.n	800eb4e <lv_obj_align+0xce>
 800ecce:	8aa9      	ldrh	r1, [r5, #20]
 800ecd0:	1a09      	subs	r1, r1, r0
            new_x = -lv_obj_get_width(obj);
 800ecd2:	43c9      	mvns	r1, r1
 800ecd4:	e7a5      	b.n	800ec22 <lv_obj_align+0x1a2>
 800ecd6:	8aa9      	ldrh	r1, [r5, #20]
 800ecd8:	1a09      	subs	r1, r1, r0
            new_x = -lv_obj_get_width(obj);
 800ecda:	43c9      	mvns	r1, r1
 800ecdc:	e778      	b.n	800ebd0 <lv_obj_align+0x150>
 800ecde:	8aa1      	ldrh	r1, [r4, #20]
 800ece0:	8a23      	ldrh	r3, [r4, #16]
 800ece2:	3101      	adds	r1, #1
 800ece4:	1ac9      	subs	r1, r1, r3
 800ece6:	e732      	b.n	800eb4e <lv_obj_align+0xce>
 800ece8:	8aa1      	ldrh	r1, [r4, #20]
 800ecea:	8a23      	ldrh	r3, [r4, #16]
 800ecec:	3101      	adds	r1, #1
 800ecee:	1ac9      	subs	r1, r1, r3
 800ecf0:	e797      	b.n	800ec22 <lv_obj_align+0x1a2>
 800ecf2:	8aa1      	ldrh	r1, [r4, #20]
 800ecf4:	8a23      	ldrh	r3, [r4, #16]
 800ecf6:	3101      	adds	r1, #1
 800ecf8:	1ac9      	subs	r1, r1, r3
 800ecfa:	e769      	b.n	800ebd0 <lv_obj_align+0x150>
            new_y = 0;
 800ecfc:	2200      	movs	r2, #0
            new_x = 0;
 800ecfe:	4611      	mov	r1, r2
 800ed00:	e73a      	b.n	800eb78 <lv_obj_align+0xf8>

0800ed02 <lv_obj_align_origo>:
{
 800ed02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed06:	4605      	mov	r5, r0
 800ed08:	4616      	mov	r6, r2
 800ed0a:	f8b5 e014 	ldrh.w	lr, [r5, #20]
    return area_p->y2 - area_p->y1 + 1;
 800ed0e:	8aea      	ldrh	r2, [r5, #22]
    rel_x             = obj->coords.x1 - parent->coords.x1;
 800ed10:	f8b0 9010 	ldrh.w	r9, [r0, #16]
    rel_y             = obj->coords.y1 - parent->coords.y1;
 800ed14:	f8b0 c012 	ldrh.w	ip, [r0, #18]
    return obj->par;
 800ed18:	6804      	ldr	r4, [r0, #0]
{
 800ed1a:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
    rel_y             = obj->coords.y1 - parent->coords.y1;
 800ed1e:	8a60      	ldrh	r0, [r4, #18]
    return area_p->x2 - area_p->x1 + 1;
 800ed20:	f10e 0e01 	add.w	lr, lr, #1
    return area_p->y2 - area_p->y1 + 1;
 800ed24:	3201      	adds	r2, #1
    return area_p->x2 - area_p->x1 + 1;
 800ed26:	ebae 0e09 	sub.w	lr, lr, r9
    return area_p->y2 - area_p->y1 + 1;
 800ed2a:	eba2 020c 	sub.w	r2, r2, ip
    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
 800ed2e:	f04f 0a02 	mov.w	sl, #2
{
 800ed32:	4698      	mov	r8, r3
    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
 800ed34:	fa0f fe8e 	sxth.w	lr, lr
    rel_x             = obj->coords.x1 - parent->coords.x1;
 800ed38:	8a23      	ldrh	r3, [r4, #16]
    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
 800ed3a:	fb9e fefa 	sdiv	lr, lr, sl
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
 800ed3e:	b212      	sxth	r2, r2
    if(base == NULL) {
 800ed40:	2900      	cmp	r1, #0
 800ed42:	bf18      	it	ne
 800ed44:	460c      	movne	r4, r1
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
 800ed46:	fb92 f2fa 	sdiv	r2, r2, sl
    switch(align) {
 800ed4a:	2e14      	cmp	r6, #20
 800ed4c:	d80c      	bhi.n	800ed68 <lv_obj_align_origo+0x66>
 800ed4e:	e8df f006 	tbb	[pc, r6]
 800ed52:	672e      	.short	0x672e
 800ed54:	597c894b 	.word	0x597c894b
 800ed58:	67916c9b 	.word	0x67916c9b
 800ed5c:	597c894b 	.word	0x597c894b
 800ed60:	7c6c679b 	.word	0x7c6c679b
 800ed64:	9189      	.short	0x9189
 800ed66:	9b          	.byte	0x9b
 800ed67:	00          	.byte	0x00
    rel_x             = obj->coords.x1 - parent->coords.x1;
 800ed68:	eba9 0103 	sub.w	r1, r9, r3
 800ed6c:	b209      	sxth	r1, r1
    rel_y             = obj->coords.y1 - parent->coords.y1;
 800ed6e:	ebac 0200 	sub.w	r2, ip, r0
    new_x -= par_abs_x;
 800ed72:	f8b4 e010 	ldrh.w	lr, [r4, #16]
 800ed76:	eba8 0303 	sub.w	r3, r8, r3
 800ed7a:	4473      	add	r3, lr
 800ed7c:	4419      	add	r1, r3
    new_y -= par_abs_y;
 800ed7e:	8a63      	ldrh	r3, [r4, #18]
 800ed80:	1a38      	subs	r0, r7, r0
 800ed82:	4418      	add	r0, r3
            new_y = lv_obj_get_height(base) - obj_h_half;
 800ed84:	b212      	sxth	r2, r2
    new_y -= par_abs_y;
 800ed86:	4402      	add	r2, r0
    lv_obj_set_pos(obj, new_x, new_y);
 800ed88:	b212      	sxth	r2, r2
 800ed8a:	b209      	sxth	r1, r1
 800ed8c:	4628      	mov	r0, r5
 800ed8e:	f7ff fe22 	bl	800e9d6 <lv_obj_set_pos>
    obj->realign.origo_align = 1;
 800ed92:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
    obj->realign.align       = align;
 800ed96:	f885 6040 	strb.w	r6, [r5, #64]	; 0x40
    obj->realign.origo_align = 1;
 800ed9a:	f043 0302 	orr.w	r3, r3, #2
    obj->realign.xofs        = x_mod;
 800ed9e:	f8a5 803c 	strh.w	r8, [r5, #60]	; 0x3c
    obj->realign.yofs        = y_mod;
 800eda2:	87ef      	strh	r7, [r5, #62]	; 0x3e
    obj->realign.base        = base;
 800eda4:	63ac      	str	r4, [r5, #56]	; 0x38
    obj->realign.origo_align = 1;
 800eda6:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
 800edaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return area_p->x2 - area_p->x1 + 1;
 800edae:	8aa1      	ldrh	r1, [r4, #20]
 800edb0:	f8b4 c010 	ldrh.w	ip, [r4, #16]
    return area_p->y2 - area_p->y1 + 1;
 800edb4:	f8b4 9012 	ldrh.w	r9, [r4, #18]
    return area_p->x2 - area_p->x1 + 1;
 800edb8:	3101      	adds	r1, #1
 800edba:	eba1 010c 	sub.w	r1, r1, ip
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 800edbe:	b209      	sxth	r1, r1
 800edc0:	f04f 0c02 	mov.w	ip, #2
 800edc4:	fb91 f1fc 	sdiv	r1, r1, ip
 800edc8:	eba1 010e 	sub.w	r1, r1, lr
    return area_p->y2 - area_p->y1 + 1;
 800edcc:	f8b4 e016 	ldrh.w	lr, [r4, #22]
 800edd0:	f10e 0e01 	add.w	lr, lr, #1
 800edd4:	ebae 0e09 	sub.w	lr, lr, r9
 800edd8:	b209      	sxth	r1, r1
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 800edda:	fa0f fe8e 	sxth.w	lr, lr
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 800edde:	fb9e fefc 	sdiv	lr, lr, ip
 800ede2:	ebae 0202 	sub.w	r2, lr, r2
 800ede6:	e7c4      	b.n	800ed72 <lv_obj_align_origo+0x70>
    return area_p->x2 - area_p->x1 + 1;
 800ede8:	8aa1      	ldrh	r1, [r4, #20]
 800edea:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 800edee:	3101      	adds	r1, #1
 800edf0:	eba1 010c 	sub.w	r1, r1, ip
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 800edf4:	b209      	sxth	r1, r1
 800edf6:	f04f 0c02 	mov.w	ip, #2
 800edfa:	fb91 f1fc 	sdiv	r1, r1, ip
            new_x = lv_obj_get_width(base) - obj_w_half;
 800edfe:	eba1 010e 	sub.w	r1, r1, lr
 800ee02:	e00f      	b.n	800ee24 <lv_obj_align_origo+0x122>
 800ee04:	8aa1      	ldrh	r1, [r4, #20]
 800ee06:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 800ee0a:	3101      	adds	r1, #1
 800ee0c:	eba1 010c 	sub.w	r1, r1, ip
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 800ee10:	b209      	sxth	r1, r1
 800ee12:	f04f 0c02 	mov.w	ip, #2
 800ee16:	fb91 f1fc 	sdiv	r1, r1, ip
            new_x = lv_obj_get_width(base) - obj_w_half;
 800ee1a:	eba1 010e 	sub.w	r1, r1, lr
 800ee1e:	e016      	b.n	800ee4e <lv_obj_align_origo+0x14c>
            new_x = -obj_w_half;
 800ee20:	f1ce 0100 	rsb	r1, lr, #0
            new_x = lv_obj_get_width(base) - obj_w_half;
 800ee24:	b209      	sxth	r1, r1
            new_y = -obj_h_half;
 800ee26:	4252      	negs	r2, r2
 800ee28:	e7a3      	b.n	800ed72 <lv_obj_align_origo+0x70>
            new_x = -obj_w_half;
 800ee2a:	f1ce 0100 	rsb	r1, lr, #0
    return area_p->y2 - area_p->y1 + 1;
 800ee2e:	f8b4 e016 	ldrh.w	lr, [r4, #22]
 800ee32:	f8b4 c012 	ldrh.w	ip, [r4, #18]
 800ee36:	f10e 0e01 	add.w	lr, lr, #1
 800ee3a:	ebae 0e0c 	sub.w	lr, lr, ip
            new_x = lv_obj_get_width(base) - obj_w_half;
 800ee3e:	b209      	sxth	r1, r1
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 800ee40:	fa0f fe8e 	sxth.w	lr, lr
 800ee44:	f04f 0c02 	mov.w	ip, #2
 800ee48:	e7c9      	b.n	800edde <lv_obj_align_origo+0xdc>
            new_x = -obj_w_half;
 800ee4a:	f1ce 0100 	rsb	r1, lr, #0
            new_y = lv_obj_get_height(base) - obj_h_half;
 800ee4e:	f8b4 e016 	ldrh.w	lr, [r4, #22]
 800ee52:	f1c2 0201 	rsb	r2, r2, #1
 800ee56:	4472      	add	r2, lr
 800ee58:	f8b4 e012 	ldrh.w	lr, [r4, #18]
            new_x = lv_obj_get_width(base) - obj_w_half;
 800ee5c:	b209      	sxth	r1, r1
            new_y = lv_obj_get_height(base) - obj_h_half;
 800ee5e:	eba2 020e 	sub.w	r2, r2, lr
 800ee62:	e786      	b.n	800ed72 <lv_obj_align_origo+0x70>
            new_x = lv_obj_get_width(base) - obj_w_half;
 800ee64:	f1ce 0101 	rsb	r1, lr, #1
 800ee68:	f8b4 e014 	ldrh.w	lr, [r4, #20]
 800ee6c:	4471      	add	r1, lr
 800ee6e:	f8b4 e010 	ldrh.w	lr, [r4, #16]
 800ee72:	e7c4      	b.n	800edfe <lv_obj_align_origo+0xfc>
            new_x = lv_obj_get_width(base) - obj_w_half;
 800ee74:	f1ce 0101 	rsb	r1, lr, #1
 800ee78:	f8b4 e014 	ldrh.w	lr, [r4, #20]
 800ee7c:	4471      	add	r1, lr
 800ee7e:	f8b4 e010 	ldrh.w	lr, [r4, #16]
 800ee82:	eba1 010e 	sub.w	r1, r1, lr
 800ee86:	e7d2      	b.n	800ee2e <lv_obj_align_origo+0x12c>
            new_x = lv_obj_get_width(base) - obj_w_half;
 800ee88:	f1ce 0101 	rsb	r1, lr, #1
 800ee8c:	f8b4 e014 	ldrh.w	lr, [r4, #20]
 800ee90:	4471      	add	r1, lr
 800ee92:	f8b4 e010 	ldrh.w	lr, [r4, #16]
 800ee96:	e7c0      	b.n	800ee1a <lv_obj_align_origo+0x118>

0800ee98 <lv_obj_realign>:
{
 800ee98:	b513      	push	{r0, r1, r4, lr}
    if(obj->realign.origo_align)
 800ee9a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800ee9e:	f9b0 403e 	ldrsh.w	r4, [r0, #62]	; 0x3e
 800eea2:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
        lv_obj_align_origo(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 800eea6:	9400      	str	r4, [sp, #0]
    if(obj->realign.origo_align)
 800eea8:	f013 0f02 	tst.w	r3, #2
        lv_obj_align_origo(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 800eeac:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800eeae:	f9b0 303c 	ldrsh.w	r3, [r0, #60]	; 0x3c
    if(obj->realign.origo_align)
 800eeb2:	d003      	beq.n	800eebc <lv_obj_realign+0x24>
        lv_obj_align_origo(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 800eeb4:	f7ff ff25 	bl	800ed02 <lv_obj_align_origo>
}
 800eeb8:	b002      	add	sp, #8
 800eeba:	bd10      	pop	{r4, pc}
        lv_obj_align(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 800eebc:	f7ff fde0 	bl	800ea80 <lv_obj_align>
}
 800eec0:	e7fa      	b.n	800eeb8 <lv_obj_realign+0x20>
	...

0800eec4 <lv_obj_create>:
{
 800eec4:	b570      	push	{r4, r5, r6, lr}
 800eec6:	460d      	mov	r5, r1
    if(parent == NULL) {
 800eec8:	4606      	mov	r6, r0
 800eeca:	2800      	cmp	r0, #0
 800eecc:	f040 80e9 	bne.w	800f0a2 <lv_obj_create+0x1de>
        lv_disp_t * disp = lv_disp_get_default();
 800eed0:	f004 febc 	bl	8013c4c <lv_disp_get_default>
        if(!disp) {
 800eed4:	2800      	cmp	r0, #0
 800eed6:	f000 8136 	beq.w	800f146 <lv_obj_create+0x282>
        new_obj = lv_ll_ins_head(&disp->scr_ll);
 800eeda:	3028      	adds	r0, #40	; 0x28
 800eedc:	f005 f950 	bl	8014180 <lv_ll_ins_head>
        lv_mem_assert(new_obj);
 800eee0:	4604      	mov	r4, r0
 800eee2:	b900      	cbnz	r0, 800eee6 <lv_obj_create+0x22>
 800eee4:	e7fe      	b.n	800eee4 <lv_obj_create+0x20>
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 800eee6:	2148      	movs	r1, #72	; 0x48
        new_obj->par = NULL; /*Screens has no a parent*/
 800eee8:	f840 6b04 	str.w	r6, [r0], #4
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 800eeec:	f005 f93e 	bl	801416c <lv_ll_init>
        new_obj->coords.x1    = 0;
 800eef0:	8226      	strh	r6, [r4, #16]
        new_obj->coords.y1    = 0;
 800eef2:	8266      	strh	r6, [r4, #18]
        new_obj->coords.x2    = lv_disp_get_hor_res(NULL) - 1;
 800eef4:	4630      	mov	r0, r6
 800eef6:	f004 feaf 	bl	8013c58 <lv_disp_get_hor_res>
 800eefa:	3801      	subs	r0, #1
 800eefc:	82a0      	strh	r0, [r4, #20]
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
 800eefe:	4630      	mov	r0, r6
 800ef00:	f004 feba 	bl	8013c78 <lv_disp_get_ver_res>
        new_obj->realign.auto_realign = 0;
 800ef04:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
        new_obj->ext_draw_pad = 0;
 800ef08:	86a6      	strh	r6, [r4, #52]	; 0x34
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
 800ef0a:	3801      	subs	r0, #1
        new_obj->realign.auto_realign = 0;
 800ef0c:	f366 0300 	bfi	r3, r6, #0, #1
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
 800ef10:	82e0      	strh	r0, [r4, #22]
        new_obj->realign.align        = LV_ALIGN_CENTER;
 800ef12:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
        new_obj->realign.xofs         = 0;
 800ef16:	87a6      	strh	r6, [r4, #60]	; 0x3c
        new_obj->realign.yofs         = 0;
 800ef18:	87e6      	strh	r6, [r4, #62]	; 0x3e
        new_obj->realign.base         = NULL;
 800ef1a:	63a6      	str	r6, [r4, #56]	; 0x38
        new_obj->realign.auto_realign = 0;
 800ef1c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        lv_theme_t * th = lv_theme_get_current();
 800ef20:	f00a fb34 	bl	801958c <lv_theme_get_current>
        if(th) {
 800ef24:	2800      	cmp	r0, #0
 800ef26:	f000 80ba 	beq.w	800f09e <lv_obj_create+0x1da>
            new_obj->style_p = th->style.scr;
 800ef2a:	6803      	ldr	r3, [r0, #0]
        new_obj->click        = 0;
 800ef2c:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
            new_obj->style_p = &lv_style_scr;
 800ef30:	62a3      	str	r3, [r4, #40]	; 0x28
    obj->signal_cb = signal_cb;
 800ef32:	4b86      	ldr	r3, [pc, #536]	; (800f14c <lv_obj_create+0x288>)
 800ef34:	61e3      	str	r3, [r4, #28]
    obj->design_cb = design_cb;
 800ef36:	4b86      	ldr	r3, [pc, #536]	; (800f150 <lv_obj_create+0x28c>)
 800ef38:	6223      	str	r3, [r4, #32]
        new_obj->parent_event = 0;
 800ef3a:	f002 0280 	and.w	r2, r2, #128	; 0x80
        new_obj->event_cb = NULL;
 800ef3e:	2300      	movs	r3, #0
        new_obj->parent_event = 0;
 800ef40:	f363 12c7 	bfi	r2, r3, #7, #1
 800ef44:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->reserved     = 0;
 800ef48:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
        new_obj->event_cb = NULL;
 800ef4c:	61a3      	str	r3, [r4, #24]
        new_obj->opa_scale    = LV_OPA_COVER;
 800ef4e:	21ff      	movs	r1, #255	; 0xff
        new_obj->reserved     = 0;
 800ef50:	f363 0287 	bfi	r2, r3, #2, #6
        memset(&new_obj->user_data, 0, sizeof(lv_obj_user_data_t));
 800ef54:	6463      	str	r3, [r4, #68]	; 0x44
        new_obj->group_p = NULL;
 800ef56:	62e3      	str	r3, [r4, #44]	; 0x2c
        new_obj->protect      = LV_PROTECT_NONE;
 800ef58:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
        new_obj->opa_scale    = LV_OPA_COVER;
 800ef5c:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
        new_obj->reserved     = 0;
 800ef60:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
        new_obj->ext_attr = NULL;
 800ef64:	6263      	str	r3, [r4, #36]	; 0x24
    if(copy != NULL) {
 800ef66:	2d00      	cmp	r5, #0
 800ef68:	f000 80e9 	beq.w	800f13e <lv_obj_create+0x27a>
    memcpy(dest, src, sizeof(lv_area_t));
 800ef6c:	462a      	mov	r2, r5
 800ef6e:	f852 3f10 	ldr.w	r3, [r2, #16]!
 800ef72:	6123      	str	r3, [r4, #16]
 800ef74:	6853      	ldr	r3, [r2, #4]
 800ef76:	6163      	str	r3, [r4, #20]
        new_obj->ext_draw_pad = copy->ext_draw_pad;
 800ef78:	f9b5 3034 	ldrsh.w	r3, [r5, #52]	; 0x34
 800ef7c:	86a3      	strh	r3, [r4, #52]	; 0x34
        memcpy(&new_obj->user_data, &copy->user_data, sizeof(lv_obj_user_data_t));
 800ef7e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800ef80:	6463      	str	r3, [r4, #68]	; 0x44
        new_obj->realign.align        = copy->realign.align;
 800ef82:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 800ef86:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        new_obj->realign.xofs         = copy->realign.xofs;
 800ef8a:	f9b5 303c 	ldrsh.w	r3, [r5, #60]	; 0x3c
 800ef8e:	87a3      	strh	r3, [r4, #60]	; 0x3c
        new_obj->realign.yofs         = copy->realign.yofs;
 800ef90:	f9b5 303e 	ldrsh.w	r3, [r5, #62]	; 0x3e
 800ef94:	87e3      	strh	r3, [r4, #62]	; 0x3e
        new_obj->realign.base         = copy->realign.base;
 800ef96:	6bab      	ldr	r3, [r5, #56]	; 0x38
        new_obj->realign.auto_realign = copy->realign.auto_realign;
 800ef98:	f895 2041 	ldrb.w	r2, [r5, #65]	; 0x41
        new_obj->realign.base         = copy->realign.base;
 800ef9c:	63a3      	str	r3, [r4, #56]	; 0x38
        new_obj->realign.auto_realign = copy->realign.auto_realign;
 800ef9e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800efa2:	f362 0300 	bfi	r3, r2, #0, #1
 800efa6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        new_obj->event_cb = copy->event_cb;
 800efaa:	69ab      	ldr	r3, [r5, #24]
        new_obj->click        = copy->click;
 800efac:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
        new_obj->event_cb = copy->event_cb;
 800efb0:	61a3      	str	r3, [r4, #24]
        new_obj->click        = copy->click;
 800efb2:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800efb6:	f362 0300 	bfi	r3, r2, #0, #1
 800efba:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        new_obj->drag         = copy->drag;
 800efbe:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800efc2:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 800efc6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800efca:	f363 0241 	bfi	r2, r3, #1, #1
 800efce:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->drag_dir     = copy->drag_dir;
 800efd2:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
 800efd6:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 800efda:	f362 0301 	bfi	r3, r2, #0, #2
 800efde:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
        new_obj->drag_throw   = copy->drag_throw;
 800efe2:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800efe6:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 800efea:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800efee:	f363 0282 	bfi	r2, r3, #2, #1
 800eff2:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->drag_parent  = copy->drag_parent;
 800eff6:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800effa:	b2d2      	uxtb	r2, r2
 800effc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800f000:	f363 02c3 	bfi	r2, r3, #3, #1
 800f004:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->hidden       = copy->hidden;
 800f008:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800f00c:	b2d2      	uxtb	r2, r2
 800f00e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800f012:	f363 1204 	bfi	r2, r3, #4, #1
 800f016:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->top          = copy->top;
 800f01a:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800f01e:	b2d2      	uxtb	r2, r2
 800f020:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f024:	f363 1245 	bfi	r2, r3, #5, #1
 800f028:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->parent_event = copy->parent_event;
 800f02c:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800f030:	b2d2      	uxtb	r2, r2
 800f032:	09db      	lsrs	r3, r3, #7
 800f034:	f363 12c7 	bfi	r2, r3, #7, #1
 800f038:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->opa_scale_en = copy->opa_scale_en;
 800f03c:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800f040:	b2d2      	uxtb	r2, r2
 800f042:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800f046:	f363 1286 	bfi	r2, r3, #6, #1
 800f04a:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->protect      = copy->protect;
 800f04e:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
 800f052:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
        new_obj->opa_scale    = copy->opa_scale;
 800f056:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
 800f05a:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
        if(copy->group_p != NULL) {
 800f05e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
        new_obj->style_p = copy->style_p;
 800f060:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800f062:	62a3      	str	r3, [r4, #40]	; 0x28
        if(copy->group_p != NULL) {
 800f064:	b110      	cbz	r0, 800f06c <lv_obj_create+0x1a8>
            lv_group_add_obj(copy->group_p, new_obj);
 800f066:	4621      	mov	r1, r4
 800f068:	f7ff f9e8 	bl	800e43c <lv_group_add_obj>
    return obj->par;
 800f06c:	682b      	ldr	r3, [r5, #0]
        if(lv_obj_get_parent(copy) != NULL && parent != NULL) {
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d060      	beq.n	800f134 <lv_obj_create+0x270>
 800f072:	2e00      	cmp	r6, #0
 800f074:	d05e      	beq.n	800f134 <lv_obj_create+0x270>
    rel_y             = obj->coords.y1 - parent->coords.y1;
 800f076:	8a59      	ldrh	r1, [r3, #18]
 800f078:	8a6a      	ldrh	r2, [r5, #18]
    rel_x             = obj->coords.x1 - parent->coords.x1;
 800f07a:	8a1b      	ldrh	r3, [r3, #16]
    rel_y             = obj->coords.y1 - parent->coords.y1;
 800f07c:	1a52      	subs	r2, r2, r1
    rel_x             = obj->coords.x1 - parent->coords.x1;
 800f07e:	8a29      	ldrh	r1, [r5, #16]
 800f080:	1ac9      	subs	r1, r1, r3
            lv_obj_set_pos(new_obj, lv_obj_get_x(copy), lv_obj_get_y(copy));
 800f082:	b212      	sxth	r2, r2
 800f084:	b209      	sxth	r1, r1
 800f086:	4620      	mov	r0, r4
 800f088:	f7ff fca5 	bl	800e9d6 <lv_obj_set_pos>
        parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, new_obj);
 800f08c:	69f3      	ldr	r3, [r6, #28]
 800f08e:	4622      	mov	r2, r4
 800f090:	2101      	movs	r1, #1
 800f092:	4630      	mov	r0, r6
 800f094:	4798      	blx	r3
        lv_obj_invalidate(new_obj);
 800f096:	4620      	mov	r0, r4
 800f098:	f7ff fc30 	bl	800e8fc <lv_obj_invalidate>
 800f09c:	e051      	b.n	800f142 <lv_obj_create+0x27e>
            new_obj->style_p = &lv_style_scr;
 800f09e:	4b2d      	ldr	r3, [pc, #180]	; (800f154 <lv_obj_create+0x290>)
 800f0a0:	e744      	b.n	800ef2c <lv_obj_create+0x68>
        new_obj = lv_ll_ins_head(&parent->child_ll);
 800f0a2:	3004      	adds	r0, #4
 800f0a4:	f005 f86c 	bl	8014180 <lv_ll_ins_head>
        lv_mem_assert(new_obj);
 800f0a8:	4604      	mov	r4, r0
 800f0aa:	b900      	cbnz	r0, 800f0ae <lv_obj_create+0x1ea>
 800f0ac:	e7fe      	b.n	800f0ac <lv_obj_create+0x1e8>
        new_obj->par = parent; /*Set the parent*/
 800f0ae:	f840 6b04 	str.w	r6, [r0], #4
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 800f0b2:	2148      	movs	r1, #72	; 0x48
 800f0b4:	f005 f85a 	bl	801416c <lv_ll_init>
        new_obj->coords.x1    = parent->coords.x1;
 800f0b8:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
 800f0bc:	8223      	strh	r3, [r4, #16]
        new_obj->coords.y1    = parent->coords.y1;
 800f0be:	f9b6 3012 	ldrsh.w	r3, [r6, #18]
 800f0c2:	8263      	strh	r3, [r4, #18]
        new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
 800f0c4:	8a33      	ldrh	r3, [r6, #16]
        new_obj->realign.auto_realign = 0;
 800f0c6:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
        new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
 800f0ca:	3319      	adds	r3, #25
 800f0cc:	82a3      	strh	r3, [r4, #20]
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
 800f0ce:	8a73      	ldrh	r3, [r6, #18]
 800f0d0:	3310      	adds	r3, #16
 800f0d2:	82e3      	strh	r3, [r4, #22]
        new_obj->ext_draw_pad = 0;
 800f0d4:	2300      	movs	r3, #0
        new_obj->realign.auto_realign = 0;
 800f0d6:	f363 0200 	bfi	r2, r3, #0, #1
        new_obj->ext_draw_pad = 0;
 800f0da:	86a3      	strh	r3, [r4, #52]	; 0x34
        new_obj->realign.align        = LV_ALIGN_CENTER;
 800f0dc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        new_obj->realign.xofs         = 0;
 800f0e0:	87a3      	strh	r3, [r4, #60]	; 0x3c
        new_obj->realign.yofs         = 0;
 800f0e2:	87e3      	strh	r3, [r4, #62]	; 0x3e
        new_obj->realign.base         = NULL;
 800f0e4:	63a3      	str	r3, [r4, #56]	; 0x38
        new_obj->realign.auto_realign = 0;
 800f0e6:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        lv_theme_t * th = lv_theme_get_current();
 800f0ea:	f00a fa4f 	bl	801958c <lv_theme_get_current>
        if(th) {
 800f0ee:	b1f8      	cbz	r0, 800f130 <lv_obj_create+0x26c>
            new_obj->style_p = th->style.panel;
 800f0f0:	6883      	ldr	r3, [r0, #8]
        new_obj->click        = 1;
 800f0f2:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
        new_obj->drag_dir     = LV_DRAG_DIR_ALL;
 800f0f6:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
            new_obj->style_p = &lv_style_plain_color;
 800f0fa:	62a3      	str	r3, [r4, #40]	; 0x28
    obj->signal_cb = signal_cb;
 800f0fc:	4b13      	ldr	r3, [pc, #76]	; (800f14c <lv_obj_create+0x288>)
 800f0fe:	61e3      	str	r3, [r4, #28]
        new_obj->drag         = 0;
 800f100:	f042 0201 	orr.w	r2, r2, #1
    obj->design_cb = design_cb;
 800f104:	4b12      	ldr	r3, [pc, #72]	; (800f150 <lv_obj_create+0x28c>)
 800f106:	6223      	str	r3, [r4, #32]
        new_obj->drag_dir     = LV_DRAG_DIR_ALL;
 800f108:	f041 0103 	orr.w	r1, r1, #3
        new_obj->event_cb = NULL;
 800f10c:	2300      	movs	r3, #0
        new_obj->parent_event = 0;
 800f10e:	f002 0281 	and.w	r2, r2, #129	; 0x81
        new_obj->drag_dir     = LV_DRAG_DIR_ALL;
 800f112:	f884 1031 	strb.w	r1, [r4, #49]	; 0x31
        new_obj->parent_event = 0;
 800f116:	f363 12c7 	bfi	r2, r3, #7, #1
        new_obj->opa_scale    = LV_OPA_COVER;
 800f11a:	21ff      	movs	r1, #255	; 0xff
        new_obj->event_cb = NULL;
 800f11c:	61a3      	str	r3, [r4, #24]
        memset(&new_obj->user_data, 0, sizeof(lv_obj_user_data_t));
 800f11e:	6463      	str	r3, [r4, #68]	; 0x44
        new_obj->group_p = NULL;
 800f120:	62e3      	str	r3, [r4, #44]	; 0x2c
        new_obj->protect      = LV_PROTECT_NONE;
 800f122:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
        new_obj->opa_scale    = LV_OPA_COVER;
 800f126:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
        new_obj->parent_event = 0;
 800f12a:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
 800f12e:	e719      	b.n	800ef64 <lv_obj_create+0xa0>
            new_obj->style_p = &lv_style_plain_color;
 800f130:	4b09      	ldr	r3, [pc, #36]	; (800f158 <lv_obj_create+0x294>)
 800f132:	e7de      	b.n	800f0f2 <lv_obj_create+0x22e>
            lv_obj_set_pos(new_obj, 0, 0);
 800f134:	2200      	movs	r2, #0
 800f136:	4611      	mov	r1, r2
 800f138:	4620      	mov	r0, r4
 800f13a:	f7ff fc4c 	bl	800e9d6 <lv_obj_set_pos>
    if(parent != NULL) {
 800f13e:	2e00      	cmp	r6, #0
 800f140:	d1a4      	bne.n	800f08c <lv_obj_create+0x1c8>
}
 800f142:	4620      	mov	r0, r4
 800f144:	bd70      	pop	{r4, r5, r6, pc}
            return NULL;
 800f146:	4604      	mov	r4, r0
 800f148:	e7fb      	b.n	800f142 <lv_obj_create+0x27e>
 800f14a:	bf00      	nop
 800f14c:	0800f479 	.word	0x0800f479
 800f150:	0800f53f 	.word	0x0800f53f
 800f154:	2000c51c 	.word	0x2000c51c
 800f158:	2000c594 	.word	0x2000c594

0800f15c <lv_obj_set_parent>:
    if(obj->par == NULL) {
 800f15c:	6803      	ldr	r3, [r0, #0]
{
 800f15e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f162:	4604      	mov	r4, r0
 800f164:	460d      	mov	r5, r1
    if(obj->par == NULL) {
 800f166:	b34b      	cbz	r3, 800f1bc <lv_obj_set_parent+0x60>
    if(parent == NULL) {
 800f168:	b341      	cbz	r1, 800f1bc <lv_obj_set_parent+0x60>
    lv_obj_invalidate(obj);
 800f16a:	f7ff fbc7 	bl	800e8fc <lv_obj_invalidate>
    return obj->par;
 800f16e:	6826      	ldr	r6, [r4, #0]
    rel_x             = obj->coords.x1 - parent->coords.x1;
 800f170:	8a27      	ldrh	r7, [r4, #16]
 800f172:	8a33      	ldrh	r3, [r6, #16]
    rel_y             = obj->coords.y1 - parent->coords.y1;
 800f174:	f8b4 8012 	ldrh.w	r8, [r4, #18]
    rel_x             = obj->coords.x1 - parent->coords.x1;
 800f178:	1aff      	subs	r7, r7, r3
    rel_y             = obj->coords.y1 - parent->coords.y1;
 800f17a:	8a73      	ldrh	r3, [r6, #18]
 800f17c:	eba8 0803 	sub.w	r8, r8, r3
    lv_ll_chg_list(&obj->par->child_ll, &parent->child_ll, obj, true);
 800f180:	4622      	mov	r2, r4
 800f182:	2301      	movs	r3, #1
 800f184:	1d29      	adds	r1, r5, #4
 800f186:	1d30      	adds	r0, r6, #4
    rel_x             = obj->coords.x1 - parent->coords.x1;
 800f188:	b23f      	sxth	r7, r7
    rel_y             = obj->coords.y1 - parent->coords.y1;
 800f18a:	fa0f f888 	sxth.w	r8, r8
    lv_ll_chg_list(&obj->par->child_ll, &parent->child_ll, obj, true);
 800f18e:	f005 f8ac 	bl	80142ea <lv_ll_chg_list>
    lv_obj_set_pos(obj, old_pos.x, old_pos.y);
 800f192:	4642      	mov	r2, r8
 800f194:	4639      	mov	r1, r7
 800f196:	4620      	mov	r0, r4
    obj->par = parent;
 800f198:	6025      	str	r5, [r4, #0]
    lv_obj_set_pos(obj, old_pos.x, old_pos.y);
 800f19a:	f7ff fc1c 	bl	800e9d6 <lv_obj_set_pos>
    old_par->signal_cb(old_par, LV_SIGNAL_CHILD_CHG, NULL);
 800f19e:	69f3      	ldr	r3, [r6, #28]
 800f1a0:	2200      	movs	r2, #0
 800f1a2:	2101      	movs	r1, #1
 800f1a4:	4630      	mov	r0, r6
 800f1a6:	4798      	blx	r3
    parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, obj);
 800f1a8:	69eb      	ldr	r3, [r5, #28]
 800f1aa:	4622      	mov	r2, r4
 800f1ac:	4628      	mov	r0, r5
 800f1ae:	2101      	movs	r1, #1
 800f1b0:	4798      	blx	r3
    lv_obj_invalidate(obj);
 800f1b2:	4620      	mov	r0, r4
}
 800f1b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_obj_invalidate(obj);
 800f1b8:	f7ff bba0 	b.w	800e8fc <lv_obj_invalidate>
 800f1bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f1c0 <lv_obj_set_size>:
    return area_p->x2 - area_p->x1 + 1;
 800f1c0:	8a83      	ldrh	r3, [r0, #20]
{
 800f1c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f1c4:	4616      	mov	r6, r2
 800f1c6:	8a02      	ldrh	r2, [r0, #16]
 800f1c8:	3301      	adds	r3, #1
 800f1ca:	1a9b      	subs	r3, r3, r2
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
 800f1cc:	b21b      	sxth	r3, r3
 800f1ce:	4299      	cmp	r1, r3
{
 800f1d0:	4604      	mov	r4, r0
 800f1d2:	460d      	mov	r5, r1
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
 800f1d4:	d106      	bne.n	800f1e4 <lv_obj_set_size+0x24>
    return area_p->y2 - area_p->y1 + 1;
 800f1d6:	8ac3      	ldrh	r3, [r0, #22]
 800f1d8:	8a42      	ldrh	r2, [r0, #18]
 800f1da:	3301      	adds	r3, #1
 800f1dc:	1a9b      	subs	r3, r3, r2
 800f1de:	b21b      	sxth	r3, r3
 800f1e0:	429e      	cmp	r6, r3
 800f1e2:	d02b      	beq.n	800f23c <lv_obj_set_size+0x7c>
    lv_obj_invalidate(obj);
 800f1e4:	4620      	mov	r0, r4
 800f1e6:	f7ff fb89 	bl	800e8fc <lv_obj_invalidate>
    memcpy(dest, src, sizeof(lv_area_t));
 800f1ea:	4622      	mov	r2, r4
 800f1ec:	466b      	mov	r3, sp
 800f1ee:	f852 0f10 	ldr.w	r0, [r2, #16]!
 800f1f2:	6851      	ldr	r1, [r2, #4]
    obj->coords.y2 = obj->coords.y1 + h - 1;
 800f1f4:	8a62      	ldrh	r2, [r4, #18]
 800f1f6:	c303      	stmia	r3!, {r0, r1}
    obj->coords.x2 = obj->coords.x1 + w - 1;
 800f1f8:	8a23      	ldrh	r3, [r4, #16]
 800f1fa:	3d01      	subs	r5, #1
    obj->coords.y2 = obj->coords.y1 + h - 1;
 800f1fc:	3e01      	subs	r6, #1
    obj->coords.x2 = obj->coords.x1 + w - 1;
 800f1fe:	441d      	add	r5, r3
    obj->coords.y2 = obj->coords.y1 + h - 1;
 800f200:	4416      	add	r6, r2
    obj->coords.x2 = obj->coords.x1 + w - 1;
 800f202:	82a5      	strh	r5, [r4, #20]
    obj->coords.y2 = obj->coords.y1 + h - 1;
 800f204:	82e6      	strh	r6, [r4, #22]
    obj->signal_cb(obj, LV_SIGNAL_CORD_CHG, &ori);
 800f206:	69e3      	ldr	r3, [r4, #28]
 800f208:	466a      	mov	r2, sp
 800f20a:	2102      	movs	r1, #2
 800f20c:	4620      	mov	r0, r4
 800f20e:	4798      	blx	r3
    return obj->par;
 800f210:	6820      	ldr	r0, [r4, #0]
    if(par != NULL) par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
 800f212:	b118      	cbz	r0, 800f21c <lv_obj_set_size+0x5c>
 800f214:	69c3      	ldr	r3, [r0, #28]
 800f216:	4622      	mov	r2, r4
 800f218:	2101      	movs	r1, #1
 800f21a:	4798      	blx	r3
    LV_LL_READ(obj->child_ll, i)
 800f21c:	1d26      	adds	r6, r4, #4
 800f21e:	4630      	mov	r0, r6
 800f220:	f004 ffea 	bl	80141f8 <lv_ll_get_head>
 800f224:	4605      	mov	r5, r0
 800f226:	b958      	cbnz	r0, 800f240 <lv_obj_set_size+0x80>
    lv_obj_invalidate(obj);
 800f228:	4620      	mov	r0, r4
 800f22a:	f7ff fb67 	bl	800e8fc <lv_obj_invalidate>
    if(obj->realign.auto_realign) lv_obj_realign(obj);
 800f22e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800f232:	07db      	lsls	r3, r3, #31
 800f234:	d502      	bpl.n	800f23c <lv_obj_set_size+0x7c>
 800f236:	4620      	mov	r0, r4
 800f238:	f7ff fe2e 	bl	800ee98 <lv_obj_realign>
}
 800f23c:	b002      	add	sp, #8
 800f23e:	bd70      	pop	{r4, r5, r6, pc}
        i->signal_cb(i, LV_SIGNAL_PARENT_SIZE_CHG, NULL);
 800f240:	69eb      	ldr	r3, [r5, #28]
 800f242:	2200      	movs	r2, #0
 800f244:	2103      	movs	r1, #3
 800f246:	4628      	mov	r0, r5
 800f248:	4798      	blx	r3
    LV_LL_READ(obj->child_ll, i)
 800f24a:	4629      	mov	r1, r5
 800f24c:	4630      	mov	r0, r6
 800f24e:	f004 ffd9 	bl	8014204 <lv_ll_get_next>
 800f252:	e7e7      	b.n	800f224 <lv_obj_set_size+0x64>

0800f254 <lv_obj_set_width>:
    return area_p->y2 - area_p->y1 + 1;
 800f254:	8ac2      	ldrh	r2, [r0, #22]
 800f256:	8a43      	ldrh	r3, [r0, #18]
 800f258:	3201      	adds	r2, #1
 800f25a:	1ad2      	subs	r2, r2, r3
    lv_obj_set_size(obj, w, lv_obj_get_height(obj));
 800f25c:	b212      	sxth	r2, r2
 800f25e:	f7ff bfaf 	b.w	800f1c0 <lv_obj_set_size>

0800f262 <lv_obj_set_height>:
    return area_p->x2 - area_p->x1 + 1;
 800f262:	8a83      	ldrh	r3, [r0, #20]
 800f264:	8a02      	ldrh	r2, [r0, #16]
 800f266:	3301      	adds	r3, #1
 800f268:	1a9b      	subs	r3, r3, r2
    lv_obj_set_size(obj, lv_obj_get_width(obj), h);
 800f26a:	460a      	mov	r2, r1
 800f26c:	b219      	sxth	r1, r3
 800f26e:	f7ff bfa7 	b.w	800f1c0 <lv_obj_set_size>

0800f272 <lv_obj_refresh_style>:
{
 800f272:	b510      	push	{r4, lr}
 800f274:	4604      	mov	r4, r0
    lv_obj_invalidate(obj);
 800f276:	f7ff fb41 	bl	800e8fc <lv_obj_invalidate>
    obj->signal_cb(obj, LV_SIGNAL_STYLE_CHG, NULL);
 800f27a:	69e3      	ldr	r3, [r4, #28]
 800f27c:	4620      	mov	r0, r4
 800f27e:	2200      	movs	r2, #0
 800f280:	2104      	movs	r1, #4
 800f282:	4798      	blx	r3
    lv_obj_invalidate(obj);
 800f284:	4620      	mov	r0, r4
}
 800f286:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_invalidate(obj);
 800f28a:	f7ff bb37 	b.w	800e8fc <lv_obj_invalidate>

0800f28e <lv_obj_refresh_ext_draw_pad>:
{
 800f28e:	b510      	push	{r4, lr}
    obj->ext_draw_pad = 0;
 800f290:	2200      	movs	r2, #0
{
 800f292:	4604      	mov	r4, r0
    obj->ext_draw_pad = 0;
 800f294:	8682      	strh	r2, [r0, #52]	; 0x34
    obj->signal_cb(obj, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
 800f296:	69c3      	ldr	r3, [r0, #28]
 800f298:	2105      	movs	r1, #5
 800f29a:	4798      	blx	r3
    lv_obj_invalidate(obj);
 800f29c:	4620      	mov	r0, r4
}
 800f29e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_invalidate(obj);
 800f2a2:	f7ff bb2b 	b.w	800e8fc <lv_obj_invalidate>

0800f2a6 <lv_obj_del>:
{
 800f2a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2aa:	4604      	mov	r4, r0
    lv_obj_invalidate(obj);
 800f2ac:	f7ff fb26 	bl	800e8fc <lv_obj_invalidate>
    return obj->group_p;
 800f2b0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    if(group) lv_group_remove_obj(obj);
 800f2b2:	b117      	cbz	r7, 800f2ba <lv_obj_del+0x14>
 800f2b4:	4620      	mov	r0, r4
 800f2b6:	f7ff f8ec 	bl	800e492 <lv_group_remove_obj>
    lv_anim_del(obj, NULL);
 800f2ba:	2100      	movs	r1, #0
 800f2bc:	4620      	mov	r0, r4
    i = lv_ll_get_head(&(obj->child_ll));
 800f2be:	1d26      	adds	r6, r4, #4
    lv_anim_del(obj, NULL);
 800f2c0:	f004 fdfc 	bl	8013ebc <lv_anim_del>
    i = lv_ll_get_head(&(obj->child_ll));
 800f2c4:	4630      	mov	r0, r6
 800f2c6:	f004 ff97 	bl	80141f8 <lv_ll_get_head>
 800f2ca:	4605      	mov	r5, r0
    while(i != NULL) {
 800f2cc:	bb65      	cbnz	r5, 800f328 <lv_obj_del+0x82>
    lv_event_send(obj, LV_EVENT_DELETE, NULL);
 800f2ce:	462a      	mov	r2, r5
 800f2d0:	2113      	movs	r1, #19
 800f2d2:	4620      	mov	r0, r4
 800f2d4:	f7ff fa7c 	bl	800e7d0 <lv_event_send>
    lv_event_mark_deleted(obj);
 800f2d8:	4620      	mov	r0, r4
 800f2da:	f7ff f9a9 	bl	800e630 <lv_event_mark_deleted>
    return obj->par;
 800f2de:	6826      	ldr	r6, [r4, #0]
    if(par == NULL) { /*It is a screen*/
 800f2e0:	bb66      	cbnz	r6, 800f33c <lv_obj_del+0x96>
        lv_disp_t * d = lv_obj_get_disp(obj);
 800f2e2:	4620      	mov	r0, r4
 800f2e4:	f7ff fae4 	bl	800e8b0 <lv_obj_get_disp>
        lv_ll_rem(&d->scr_ll, obj);
 800f2e8:	4621      	mov	r1, r4
 800f2ea:	3028      	adds	r0, #40	; 0x28
        lv_ll_rem(&(par->child_ll), obj);
 800f2ec:	f004 ffc3 	bl	8014276 <lv_ll_rem>
    lv_indev_t * indev = lv_indev_get_next(NULL);
 800f2f0:	2000      	movs	r0, #0
 800f2f2:	f004 fcfb 	bl	8013cec <lv_indev_get_next>
            indev->proc.types.pointer.last_pressed = NULL;
 800f2f6:	f04f 0800 	mov.w	r8, #0
    lv_indev_t * indev = lv_indev_get_next(NULL);
 800f2fa:	4605      	mov	r5, r0
    while(indev) {
 800f2fc:	bb0d      	cbnz	r5, 800f342 <lv_obj_del+0x9c>
    obj->signal_cb(obj, LV_SIGNAL_CLEANUP, NULL);
 800f2fe:	69e3      	ldr	r3, [r4, #28]
 800f300:	462a      	mov	r2, r5
 800f302:	4629      	mov	r1, r5
 800f304:	4620      	mov	r0, r4
 800f306:	4798      	blx	r3
    if(obj->ext_attr != NULL) lv_mem_free(obj->ext_attr);
 800f308:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f30a:	b108      	cbz	r0, 800f310 <lv_obj_del+0x6a>
 800f30c:	f005 f8f2 	bl	80144f4 <lv_mem_free>
    lv_mem_free(obj); /*Free the object itself*/
 800f310:	4620      	mov	r0, r4
 800f312:	f005 f8ef 	bl	80144f4 <lv_mem_free>
    if(par != NULL) {
 800f316:	b126      	cbz	r6, 800f322 <lv_obj_del+0x7c>
        par->signal_cb(par, LV_SIGNAL_CHILD_CHG, NULL);
 800f318:	69f3      	ldr	r3, [r6, #28]
 800f31a:	2200      	movs	r2, #0
 800f31c:	2101      	movs	r1, #1
 800f31e:	4630      	mov	r0, r6
 800f320:	4798      	blx	r3
}
 800f322:	2000      	movs	r0, #0
 800f324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        i_next = lv_ll_get_next(&(obj->child_ll), i);
 800f328:	4629      	mov	r1, r5
 800f32a:	4630      	mov	r0, r6
 800f32c:	f004 ff6a 	bl	8014204 <lv_ll_get_next>
 800f330:	4680      	mov	r8, r0
        delete_children(i);
 800f332:	4628      	mov	r0, r5
 800f334:	f7ff fa55 	bl	800e7e2 <delete_children>
        i = i_next;
 800f338:	4645      	mov	r5, r8
 800f33a:	e7c7      	b.n	800f2cc <lv_obj_del+0x26>
        lv_ll_rem(&(par->child_ll), obj);
 800f33c:	4621      	mov	r1, r4
 800f33e:	1d30      	adds	r0, r6, #4
 800f340:	e7d4      	b.n	800f2ec <lv_obj_del+0x46>
        if(indev->proc.types.pointer.act_obj == obj || indev->proc.types.pointer.last_obj == obj) {
 800f342:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800f344:	429c      	cmp	r4, r3
 800f346:	d002      	beq.n	800f34e <lv_obj_del+0xa8>
 800f348:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800f34a:	429c      	cmp	r4, r3
 800f34c:	d102      	bne.n	800f354 <lv_obj_del+0xae>
            lv_indev_reset(indev);
 800f34e:	4628      	mov	r0, r5
 800f350:	f7ff f931 	bl	800e5b6 <lv_indev_reset>
        if(indev->proc.types.pointer.last_pressed == obj) {
 800f354:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800f356:	429c      	cmp	r4, r3
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
 800f358:	6dab      	ldr	r3, [r5, #88]	; 0x58
            indev->proc.types.pointer.last_pressed = NULL;
 800f35a:	bf08      	it	eq
 800f35c:	f8c5 8040 	streq.w	r8, [r5, #64]	; 0x40
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
 800f360:	429f      	cmp	r7, r3
 800f362:	d106      	bne.n	800f372 <lv_obj_del+0xcc>
 800f364:	f7ff f95e 	bl	800e624 <lv_indev_get_obj_act>
 800f368:	4284      	cmp	r4, r0
 800f36a:	d102      	bne.n	800f372 <lv_obj_del+0xcc>
            lv_indev_reset(indev);
 800f36c:	4628      	mov	r0, r5
 800f36e:	f7ff f922 	bl	800e5b6 <lv_indev_reset>
        indev = lv_indev_get_next(indev);
 800f372:	4628      	mov	r0, r5
 800f374:	f004 fcba 	bl	8013cec <lv_indev_get_next>
 800f378:	4605      	mov	r5, r0
 800f37a:	e7bf      	b.n	800f2fc <lv_obj_del+0x56>

0800f37c <lv_obj_get_parent>:
}
 800f37c:	6800      	ldr	r0, [r0, #0]
 800f37e:	4770      	bx	lr

0800f380 <lv_obj_get_child>:
{
 800f380:	3004      	adds	r0, #4
    if(child == NULL) {
 800f382:	b909      	cbnz	r1, 800f388 <lv_obj_get_child+0x8>
        result = lv_ll_get_head(&obj->child_ll);
 800f384:	f004 bf38 	b.w	80141f8 <lv_ll_get_head>
        result = lv_ll_get_next(&obj->child_ll, child);
 800f388:	f004 bf3c 	b.w	8014204 <lv_ll_get_next>

0800f38c <refresh_children_style>:
{
 800f38c:	b538      	push	{r3, r4, r5, lr}
 800f38e:	4605      	mov	r5, r0
        result = lv_ll_get_head(&obj->child_ll);
 800f390:	3004      	adds	r0, #4
 800f392:	f004 ff31 	bl	80141f8 <lv_ll_get_head>
        child = lv_obj_get_child(obj, child);
 800f396:	4604      	mov	r4, r0
    while(child != NULL) {
 800f398:	b900      	cbnz	r0, 800f39c <refresh_children_style+0x10>
}
 800f39a:	bd38      	pop	{r3, r4, r5, pc}
        if(child->style_p == NULL) {
 800f39c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f39e:	b953      	cbnz	r3, 800f3b6 <refresh_children_style+0x2a>
            refresh_children_style(child); /*Check children too*/
 800f3a0:	4620      	mov	r0, r4
 800f3a2:	f7ff fff3 	bl	800f38c <refresh_children_style>
            lv_obj_refresh_style(child);   /*Notify the child about the style change*/
 800f3a6:	4620      	mov	r0, r4
 800f3a8:	f7ff ff63 	bl	800f272 <lv_obj_refresh_style>
        child = lv_obj_get_child(obj, child);
 800f3ac:	4621      	mov	r1, r4
 800f3ae:	4628      	mov	r0, r5
 800f3b0:	f7ff ffe6 	bl	800f380 <lv_obj_get_child>
 800f3b4:	e7ef      	b.n	800f396 <refresh_children_style+0xa>
        } else if(child->style_p->glass) {
 800f3b6:	781b      	ldrb	r3, [r3, #0]
 800f3b8:	07db      	lsls	r3, r3, #31
 800f3ba:	d5f7      	bpl.n	800f3ac <refresh_children_style+0x20>
            refresh_children_style(child);
 800f3bc:	4620      	mov	r0, r4
 800f3be:	f7ff ffe5 	bl	800f38c <refresh_children_style>
 800f3c2:	e7f3      	b.n	800f3ac <refresh_children_style+0x20>

0800f3c4 <lv_obj_set_style>:
{
 800f3c4:	b510      	push	{r4, lr}
 800f3c6:	4604      	mov	r4, r0
    obj->style_p = style;
 800f3c8:	6281      	str	r1, [r0, #40]	; 0x28
    refresh_children_style(obj);
 800f3ca:	f7ff ffdf 	bl	800f38c <refresh_children_style>
    lv_obj_refresh_style(obj);
 800f3ce:	4620      	mov	r0, r4
}
 800f3d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_refresh_style(obj);
 800f3d4:	f7ff bf4d 	b.w	800f272 <lv_obj_refresh_style>

0800f3d8 <lv_obj_get_coords>:
    memcpy(dest, src, sizeof(lv_area_t));
 800f3d8:	f850 3f10 	ldr.w	r3, [r0, #16]!
 800f3dc:	600b      	str	r3, [r1, #0]
 800f3de:	6843      	ldr	r3, [r0, #4]
 800f3e0:	604b      	str	r3, [r1, #4]
 800f3e2:	4770      	bx	lr

0800f3e4 <lv_obj_get_x>:
    rel_x             = obj->coords.x1 - parent->coords.x1;
 800f3e4:	6803      	ldr	r3, [r0, #0]
 800f3e6:	8a00      	ldrh	r0, [r0, #16]
 800f3e8:	8a1b      	ldrh	r3, [r3, #16]
 800f3ea:	1ac0      	subs	r0, r0, r3
}
 800f3ec:	b200      	sxth	r0, r0
 800f3ee:	4770      	bx	lr

0800f3f0 <lv_obj_get_y>:
    rel_y             = obj->coords.y1 - parent->coords.y1;
 800f3f0:	6803      	ldr	r3, [r0, #0]
 800f3f2:	8a40      	ldrh	r0, [r0, #18]
 800f3f4:	8a5b      	ldrh	r3, [r3, #18]
 800f3f6:	1ac0      	subs	r0, r0, r3
}
 800f3f8:	b200      	sxth	r0, r0
 800f3fa:	4770      	bx	lr

0800f3fc <lv_obj_get_width>:
    return area_p->x2 - area_p->x1 + 1;
 800f3fc:	8a83      	ldrh	r3, [r0, #20]
 800f3fe:	8a00      	ldrh	r0, [r0, #16]
 800f400:	3301      	adds	r3, #1
 800f402:	1a18      	subs	r0, r3, r0
}
 800f404:	b200      	sxth	r0, r0
 800f406:	4770      	bx	lr

0800f408 <lv_obj_get_height>:
    return area_p->y2 - area_p->y1 + 1;
 800f408:	8ac3      	ldrh	r3, [r0, #22]
 800f40a:	8a40      	ldrh	r0, [r0, #18]
 800f40c:	3301      	adds	r3, #1
 800f40e:	1a18      	subs	r0, r3, r0
}
 800f410:	b200      	sxth	r0, r0
 800f412:	4770      	bx	lr

0800f414 <lv_obj_get_auto_realign>:
    return obj->realign.auto_realign ? true : false;
 800f414:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 800f418:	f000 0001 	and.w	r0, r0, #1
 800f41c:	4770      	bx	lr
	...

0800f420 <lv_obj_get_style>:
{
 800f420:	b570      	push	{r4, r5, r6, lr}
    const lv_style_t * style_act = obj->style_p;
 800f422:	6a85      	ldr	r5, [r0, #40]	; 0x28
{
 800f424:	4606      	mov	r6, r0
    if(style_act == NULL) {
 800f426:	b98d      	cbnz	r5, 800f44c <lv_obj_get_style+0x2c>
        lv_obj_t * par = obj->par;
 800f428:	6804      	ldr	r4, [r0, #0]
        while(par) {
 800f42a:	b17c      	cbz	r4, 800f44c <lv_obj_get_style+0x2c>
            if(par->style_p) {
 800f42c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f42e:	b1fb      	cbz	r3, 800f470 <lv_obj_get_style+0x50>
                if(par->style_p->glass == 0) {
 800f430:	781b      	ldrb	r3, [r3, #0]
 800f432:	07db      	lsls	r3, r3, #31
 800f434:	d41c      	bmi.n	800f470 <lv_obj_get_style+0x50>
    return obj->group_p;
 800f436:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
                    if(lv_group_get_focused(g) == par) {
 800f438:	4628      	mov	r0, r5
 800f43a:	f7ff f877 	bl	800e52c <lv_group_get_focused>
 800f43e:	4284      	cmp	r4, r0
 800f440:	d114      	bne.n	800f46c <lv_obj_get_style+0x4c>
                        style_act = lv_group_mod_style(g, par->style_p);
 800f442:	4628      	mov	r0, r5
 800f444:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800f446:	f7ff f85e 	bl	800e506 <lv_group_mod_style>
 800f44a:	4605      	mov	r5, r0
    if(obj->group_p) {
 800f44c:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800f44e:	b140      	cbz	r0, 800f462 <lv_obj_get_style+0x42>
        if(lv_group_get_focused(obj->group_p) == obj) {
 800f450:	f7ff f86c 	bl	800e52c <lv_group_get_focused>
 800f454:	4286      	cmp	r6, r0
 800f456:	d104      	bne.n	800f462 <lv_obj_get_style+0x42>
            style_act = lv_group_mod_style(obj->group_p, style_act);
 800f458:	4629      	mov	r1, r5
 800f45a:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800f45c:	f7ff f853 	bl	800e506 <lv_group_mod_style>
 800f460:	4605      	mov	r5, r0
}
 800f462:	4804      	ldr	r0, [pc, #16]	; (800f474 <lv_obj_get_style+0x54>)
 800f464:	2d00      	cmp	r5, #0
 800f466:	bf18      	it	ne
 800f468:	4628      	movne	r0, r5
 800f46a:	bd70      	pop	{r4, r5, r6, pc}
                        style_act = par->style_p;
 800f46c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800f46e:	e7ed      	b.n	800f44c <lv_obj_get_style+0x2c>
            par = par->par;
 800f470:	6824      	ldr	r4, [r4, #0]
 800f472:	e7da      	b.n	800f42a <lv_obj_get_style+0xa>
 800f474:	2000c4a4 	.word	0x2000c4a4

0800f478 <lv_obj_signal>:
{
 800f478:	b570      	push	{r4, r5, r6, lr}
 800f47a:	460c      	mov	r4, r1
 800f47c:	4605      	mov	r5, r0
 800f47e:	4616      	mov	r6, r2
    const lv_style_t * style = lv_obj_get_style(obj);
 800f480:	f7ff ffce 	bl	800f420 <lv_obj_get_style>
    if(sign == LV_SIGNAL_CHILD_CHG) {
 800f484:	2c01      	cmp	r4, #1
 800f486:	d105      	bne.n	800f494 <lv_obj_signal+0x1c>
        if(lv_obj_is_protected(obj, LV_PROTECT_CHILD_CHG) != false) res = LV_RES_INV;
 800f488:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
 800f48c:	43c0      	mvns	r0, r0
 800f48e:	f000 0001 	and.w	r0, r0, #1
 800f492:	bd70      	pop	{r4, r5, r6, pc}
    } else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 800f494:	2c05      	cmp	r4, #5
 800f496:	d108      	bne.n	800f4aa <lv_obj_signal+0x32>
        if(style->body.shadow.width > obj->ext_draw_pad) obj->ext_draw_pad = style->body.shadow.width;
 800f498:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
 800f49c:	f9b5 2034 	ldrsh.w	r2, [r5, #52]	; 0x34
 800f4a0:	429a      	cmp	r2, r3
 800f4a2:	da00      	bge.n	800f4a6 <lv_obj_signal+0x2e>
 800f4a4:	86ab      	strh	r3, [r5, #52]	; 0x34
    lv_res_t res = LV_RES_OK;
 800f4a6:	2001      	movs	r0, #1
}
 800f4a8:	bd70      	pop	{r4, r5, r6, pc}
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 800f4aa:	2c04      	cmp	r4, #4
 800f4ac:	d103      	bne.n	800f4b6 <lv_obj_signal+0x3e>
        lv_obj_refresh_ext_draw_pad(obj);
 800f4ae:	4628      	mov	r0, r5
 800f4b0:	f7ff feed 	bl	800f28e <lv_obj_refresh_ext_draw_pad>
 800f4b4:	e7f7      	b.n	800f4a6 <lv_obj_signal+0x2e>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 800f4b6:	2c06      	cmp	r4, #6
        buf->type[0]        = "lv_obj";
 800f4b8:	bf04      	itt	eq
 800f4ba:	4b01      	ldreq	r3, [pc, #4]	; (800f4c0 <lv_obj_signal+0x48>)
 800f4bc:	6033      	streq	r3, [r6, #0]
 800f4be:	e7f2      	b.n	800f4a6 <lv_obj_signal+0x2e>
 800f4c0:	080ec33e 	.word	0x080ec33e

0800f4c4 <lv_obj_get_inner_coords>:
{
 800f4c4:	b510      	push	{r4, lr}
 800f4c6:	460c      	mov	r4, r1
    const lv_style_t * style = lv_obj_get_style(obj);
 800f4c8:	f7ff ffaa 	bl	800f420 <lv_obj_get_style>
    if(style->body.border.part & LV_BORDER_LEFT) coords_p->x1 += style->body.border.width;
 800f4cc:	7b83      	ldrb	r3, [r0, #14]
 800f4ce:	075a      	lsls	r2, r3, #29
 800f4d0:	bf41      	itttt	mi
 800f4d2:	8822      	ldrhmi	r2, [r4, #0]
 800f4d4:	8981      	ldrhmi	r1, [r0, #12]
 800f4d6:	1852      	addmi	r2, r2, r1
 800f4d8:	8022      	strhmi	r2, [r4, #0]
    if(style->body.border.part & LV_BORDER_RIGHT) coords_p->x2 -= style->body.border.width;
 800f4da:	0719      	lsls	r1, r3, #28
 800f4dc:	bf41      	itttt	mi
 800f4de:	88a2      	ldrhmi	r2, [r4, #4]
 800f4e0:	8981      	ldrhmi	r1, [r0, #12]
 800f4e2:	1a52      	submi	r2, r2, r1
 800f4e4:	80a2      	strhmi	r2, [r4, #4]
    if(style->body.border.part & LV_BORDER_TOP) coords_p->y1 += style->body.border.width;
 800f4e6:	079a      	lsls	r2, r3, #30
 800f4e8:	bf41      	itttt	mi
 800f4ea:	8862      	ldrhmi	r2, [r4, #2]
 800f4ec:	8981      	ldrhmi	r1, [r0, #12]
 800f4ee:	1852      	addmi	r2, r2, r1
 800f4f0:	8062      	strhmi	r2, [r4, #2]
    if(style->body.border.part & LV_BORDER_BOTTOM) coords_p->y2 -= style->body.border.width;
 800f4f2:	07db      	lsls	r3, r3, #31
 800f4f4:	bf41      	itttt	mi
 800f4f6:	88e3      	ldrhmi	r3, [r4, #6]
 800f4f8:	8982      	ldrhmi	r2, [r0, #12]
 800f4fa:	1a9b      	submi	r3, r3, r2
 800f4fc:	80e3      	strhmi	r3, [r4, #6]
 800f4fe:	bd10      	pop	{r4, pc}

0800f500 <lv_obj_get_width_fit>:
{
 800f500:	b510      	push	{r4, lr}
 800f502:	4604      	mov	r4, r0
    const lv_style_t * style = lv_obj_get_style(obj);
 800f504:	f7ff ff8c 	bl	800f420 <lv_obj_get_style>
    return area_p->x2 - area_p->x1 + 1;
 800f508:	8aa3      	ldrh	r3, [r4, #20]
 800f50a:	8a22      	ldrh	r2, [r4, #16]
 800f50c:	3301      	adds	r3, #1
 800f50e:	1a9b      	subs	r3, r3, r2
    return lv_obj_get_width(obj) - style->body.padding.left - style->body.padding.right;
 800f510:	8b42      	ldrh	r2, [r0, #26]
 800f512:	8b80      	ldrh	r0, [r0, #28]
 800f514:	1a9b      	subs	r3, r3, r2
 800f516:	1a18      	subs	r0, r3, r0
}
 800f518:	b200      	sxth	r0, r0
 800f51a:	bd10      	pop	{r4, pc}

0800f51c <lv_obj_get_hidden>:
    return obj->hidden == 0 ? false : true;
 800f51c:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
}
 800f520:	f3c0 1000 	ubfx	r0, r0, #4, #1
 800f524:	4770      	bx	lr

0800f526 <lv_obj_get_opa_scale>:
    while(parent) {
 800f526:	b908      	cbnz	r0, 800f52c <lv_obj_get_opa_scale+0x6>
    return LV_OPA_COVER;
 800f528:	20ff      	movs	r0, #255	; 0xff
}
 800f52a:	4770      	bx	lr
        if(parent->opa_scale_en) return parent->opa_scale;
 800f52c:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800f530:	065b      	lsls	r3, r3, #25
 800f532:	d502      	bpl.n	800f53a <lv_obj_get_opa_scale+0x14>
 800f534:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
 800f538:	4770      	bx	lr
    return obj->par;
 800f53a:	6800      	ldr	r0, [r0, #0]
 800f53c:	e7f3      	b.n	800f526 <lv_obj_get_opa_scale>

0800f53e <lv_obj_design>:
    if(mode == LV_DESIGN_COVER_CHK) {
 800f53e:	2a02      	cmp	r2, #2
{
 800f540:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f542:	4604      	mov	r4, r0
 800f544:	460e      	mov	r6, r1
    if(mode == LV_DESIGN_COVER_CHK) {
 800f546:	d13c      	bne.n	800f5c2 <lv_obj_design+0x84>
        if(lv_area_is_in(mask_p, &obj->coords) == false) return false;
 800f548:	f100 0510 	add.w	r5, r0, #16
 800f54c:	4629      	mov	r1, r5
 800f54e:	4630      	mov	r0, r6
 800f550:	f004 fdb6 	bl	80140c0 <lv_area_is_in>
 800f554:	b390      	cbz	r0, 800f5bc <lv_obj_design+0x7e>
        const lv_style_t * style = lv_obj_get_style(obj);
 800f556:	4620      	mov	r0, r4
 800f558:	f7ff ff62 	bl	800f420 <lv_obj_get_style>
        if(style->body.opa < LV_OPA_MAX) return false;
 800f55c:	7a03      	ldrb	r3, [r0, #8]
 800f55e:	2bfa      	cmp	r3, #250	; 0xfa
 800f560:	d92c      	bls.n	800f5bc <lv_obj_design+0x7e>
        lv_coord_t r = style->body.radius;
 800f562:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
        if(r == LV_RADIUS_CIRCLE) return false;
 800f566:	f647 4318 	movw	r3, #31768	; 0x7c18
 800f56a:	429c      	cmp	r4, r3
 800f56c:	d026      	beq.n	800f5bc <lv_obj_design+0x7e>
    memcpy(dest, src, sizeof(lv_area_t));
 800f56e:	6828      	ldr	r0, [r5, #0]
 800f570:	6869      	ldr	r1, [r5, #4]
 800f572:	466b      	mov	r3, sp
 800f574:	c303      	stmia	r3!, {r0, r1}
        area_tmp.x1 += r;
 800f576:	f8bd 3000 	ldrh.w	r3, [sp]
 800f57a:	b2a4      	uxth	r4, r4
 800f57c:	4423      	add	r3, r4
 800f57e:	f8ad 3000 	strh.w	r3, [sp]
        area_tmp.x2 -= r;
 800f582:	f8bd 3004 	ldrh.w	r3, [sp, #4]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 800f586:	4669      	mov	r1, sp
        area_tmp.x2 -= r;
 800f588:	1b1b      	subs	r3, r3, r4
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 800f58a:	4630      	mov	r0, r6
        area_tmp.x2 -= r;
 800f58c:	f8ad 3004 	strh.w	r3, [sp, #4]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 800f590:	f004 fd96 	bl	80140c0 <lv_area_is_in>
 800f594:	b190      	cbz	r0, 800f5bc <lv_obj_design+0x7e>
 800f596:	6828      	ldr	r0, [r5, #0]
 800f598:	6869      	ldr	r1, [r5, #4]
 800f59a:	466b      	mov	r3, sp
 800f59c:	c303      	stmia	r3!, {r0, r1}
        area_tmp.y1 += r;
 800f59e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800f5a2:	4423      	add	r3, r4
 800f5a4:	f8ad 3002 	strh.w	r3, [sp, #2]
        area_tmp.y2 -= r;
 800f5a8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 800f5ac:	4669      	mov	r1, sp
        area_tmp.y2 -= r;
 800f5ae:	1b1c      	subs	r4, r3, r4
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 800f5b0:	4630      	mov	r0, r6
        area_tmp.y2 -= r;
 800f5b2:	f8ad 4006 	strh.w	r4, [sp, #6]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 800f5b6:	f004 fd83 	bl	80140c0 <lv_area_is_in>
 800f5ba:	b900      	cbnz	r0, 800f5be <lv_obj_design+0x80>
        if(lv_area_is_in(mask_p, &obj->coords) == false) return false;
 800f5bc:	2000      	movs	r0, #0
}
 800f5be:	b002      	add	sp, #8
 800f5c0:	bd70      	pop	{r4, r5, r6, pc}
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 800f5c2:	b95a      	cbnz	r2, 800f5dc <lv_obj_design+0x9e>
        const lv_style_t * style = lv_obj_get_style(obj);
 800f5c4:	f7ff ff2c 	bl	800f420 <lv_obj_get_style>
 800f5c8:	4602      	mov	r2, r0
        lv_draw_rect(&obj->coords, mask_p, style, lv_obj_get_opa_scale(obj));
 800f5ca:	4620      	mov	r0, r4
 800f5cc:	f7ff ffab 	bl	800f526 <lv_obj_get_opa_scale>
 800f5d0:	4631      	mov	r1, r6
 800f5d2:	4603      	mov	r3, r0
 800f5d4:	f104 0010 	add.w	r0, r4, #16
 800f5d8:	f001 ff32 	bl	8011440 <lv_draw_rect>
    return true;
 800f5dc:	2001      	movs	r0, #1
 800f5de:	e7ee      	b.n	800f5be <lv_obj_design+0x80>

0800f5e0 <lv_obj_is_protected>:
    return (obj->protect & prot) == 0 ? false : true;
 800f5e0:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 800f5e4:	4219      	tst	r1, r3
}
 800f5e6:	bf14      	ite	ne
 800f5e8:	2001      	movne	r0, #1
 800f5ea:	2000      	moveq	r0, #0
 800f5ec:	4770      	bx	lr

0800f5ee <lv_obj_get_signal_cb>:
}
 800f5ee:	69c0      	ldr	r0, [r0, #28]
 800f5f0:	4770      	bx	lr

0800f5f2 <lv_obj_get_design_cb>:
}
 800f5f2:	6a00      	ldr	r0, [r0, #32]
 800f5f4:	4770      	bx	lr

0800f5f6 <lv_obj_get_ext_attr>:
}
 800f5f6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800f5f8:	4770      	bx	lr

0800f5fa <lv_obj_get_user_data>:
}
 800f5fa:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800f5fc:	4770      	bx	lr

0800f5fe <lv_obj_set_user_data>:
    memcpy(&obj->user_data, &data, sizeof(lv_obj_user_data_t));
 800f5fe:	6441      	str	r1, [r0, #68]	; 0x44
 800f600:	4770      	bx	lr

0800f602 <lv_obj_get_group>:
}
 800f602:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800f604:	4770      	bx	lr

0800f606 <lv_obj_is_focused>:
{
 800f606:	b510      	push	{r4, lr}
 800f608:	4604      	mov	r4, r0
    if(obj->group_p) {
 800f60a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800f60c:	b120      	cbz	r0, 800f618 <lv_obj_is_focused+0x12>
        if(lv_group_get_focused(obj->group_p) == obj) return true;
 800f60e:	f7fe ff8d 	bl	800e52c <lv_group_get_focused>
 800f612:	1a23      	subs	r3, r4, r0
 800f614:	4258      	negs	r0, r3
 800f616:	4158      	adcs	r0, r3
}
 800f618:	bd10      	pop	{r4, pc}
	...

0800f61c <lv_refr_vdb_flush>:

/**
 * Flush the content of the VDB
 */
static void lv_refr_vdb_flush(void)
{
 800f61c:	b538      	push	{r3, r4, r5, lr}
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 800f61e:	4d10      	ldr	r5, [pc, #64]	; (800f660 <lv_refr_vdb_flush+0x44>)
 800f620:	6828      	ldr	r0, [r5, #0]
 800f622:	f004 fb49 	bl	8013cb8 <lv_disp_get_buf>
 800f626:	4604      	mov	r4, r0

    /*In double buffered mode wait until the other buffer is flushed before flushing the current
     * one*/
    if(lv_disp_is_double_buf(disp_refr)) {
 800f628:	6828      	ldr	r0, [r5, #0]
 800f62a:	f004 fb47 	bl	8013cbc <lv_disp_is_double_buf>
 800f62e:	b110      	cbz	r0, 800f636 <lv_refr_vdb_flush+0x1a>
        while(vdb->flushing)
 800f630:	69a3      	ldr	r3, [r4, #24]
 800f632:	07db      	lsls	r3, r3, #31
 800f634:	d4fc      	bmi.n	800f630 <lv_refr_vdb_flush+0x14>
            ;
    }

    vdb->flushing = 1;
 800f636:	7e23      	ldrb	r3, [r4, #24]
    return disp_refr;
 800f638:	6828      	ldr	r0, [r5, #0]
    vdb->flushing = 1;
 800f63a:	f043 0301 	orr.w	r3, r3, #1
 800f63e:	7623      	strb	r3, [r4, #24]

    /*Flush the rendered content to the display*/
    lv_disp_t * disp = lv_refr_get_disp_refreshing();
    if(disp->driver.flush_cb) disp->driver.flush_cb(&disp->driver, &vdb->area, vdb->buf_act);
 800f640:	68c3      	ldr	r3, [r0, #12]
 800f642:	b11b      	cbz	r3, 800f64c <lv_refr_vdb_flush+0x30>
 800f644:	68a2      	ldr	r2, [r4, #8]
 800f646:	f104 0110 	add.w	r1, r4, #16
 800f64a:	4798      	blx	r3

    if(vdb->buf1 && vdb->buf2) {
 800f64c:	6823      	ldr	r3, [r4, #0]
 800f64e:	b133      	cbz	r3, 800f65e <lv_refr_vdb_flush+0x42>
 800f650:	6862      	ldr	r2, [r4, #4]
 800f652:	b122      	cbz	r2, 800f65e <lv_refr_vdb_flush+0x42>
        if(vdb->buf_act == vdb->buf1)
 800f654:	68a1      	ldr	r1, [r4, #8]
            vdb->buf_act = vdb->buf2;
 800f656:	428b      	cmp	r3, r1
 800f658:	bf08      	it	eq
 800f65a:	4613      	moveq	r3, r2
 800f65c:	60a3      	str	r3, [r4, #8]
 800f65e:	bd38      	pop	{r3, r4, r5, pc}
 800f660:	20005fec 	.word	0x20005fec

0800f664 <lv_refr_get_top_obj>:
{
 800f664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f666:	460c      	mov	r4, r1
    if(lv_area_is_in(area_p, &obj->coords) && obj->hidden == 0) {
 800f668:	3110      	adds	r1, #16
{
 800f66a:	4606      	mov	r6, r0
    if(lv_area_is_in(area_p, &obj->coords) && obj->hidden == 0) {
 800f66c:	f004 fd28 	bl	80140c0 <lv_area_is_in>
 800f670:	b908      	cbnz	r0, 800f676 <lv_refr_get_top_obj+0x12>
    lv_obj_t * found_p = NULL;
 800f672:	2000      	movs	r0, #0
 800f674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(lv_area_is_in(area_p, &obj->coords) && obj->hidden == 0) {
 800f676:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800f67a:	06db      	lsls	r3, r3, #27
 800f67c:	d4f9      	bmi.n	800f672 <lv_refr_get_top_obj+0xe>
        LV_LL_READ(obj->child_ll, i)
 800f67e:	1d27      	adds	r7, r4, #4
 800f680:	4638      	mov	r0, r7
 800f682:	f004 fdb9 	bl	80141f8 <lv_ll_get_head>
 800f686:	4605      	mov	r5, r0
 800f688:	b998      	cbnz	r0, 800f6b2 <lv_refr_get_top_obj+0x4e>
            const lv_style_t * style = lv_obj_get_style(obj);
 800f68a:	4620      	mov	r0, r4
 800f68c:	f7ff fec8 	bl	800f420 <lv_obj_get_style>
            if(style->body.opa == LV_OPA_COVER && obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK) != false &&
 800f690:	7a03      	ldrb	r3, [r0, #8]
 800f692:	2bff      	cmp	r3, #255	; 0xff
 800f694:	d1ed      	bne.n	800f672 <lv_refr_get_top_obj+0xe>
 800f696:	6a23      	ldr	r3, [r4, #32]
 800f698:	2202      	movs	r2, #2
 800f69a:	4631      	mov	r1, r6
 800f69c:	4620      	mov	r0, r4
 800f69e:	4798      	blx	r3
 800f6a0:	2800      	cmp	r0, #0
 800f6a2:	d0e6      	beq.n	800f672 <lv_refr_get_top_obj+0xe>
               lv_obj_get_opa_scale(obj) == LV_OPA_COVER) {
 800f6a4:	4620      	mov	r0, r4
 800f6a6:	f7ff ff3e 	bl	800f526 <lv_obj_get_opa_scale>
            if(style->body.opa == LV_OPA_COVER && obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK) != false &&
 800f6aa:	28ff      	cmp	r0, #255	; 0xff
 800f6ac:	d1e1      	bne.n	800f672 <lv_refr_get_top_obj+0xe>
 800f6ae:	4620      	mov	r0, r4
    return found_p;
 800f6b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            found_p = lv_refr_get_top_obj(area_p, i);
 800f6b2:	4629      	mov	r1, r5
 800f6b4:	4630      	mov	r0, r6
 800f6b6:	f7ff ffd5 	bl	800f664 <lv_refr_get_top_obj>
            if(found_p != NULL) {
 800f6ba:	b920      	cbnz	r0, 800f6c6 <lv_refr_get_top_obj+0x62>
        LV_LL_READ(obj->child_ll, i)
 800f6bc:	4629      	mov	r1, r5
 800f6be:	4638      	mov	r0, r7
 800f6c0:	f004 fda0 	bl	8014204 <lv_ll_get_next>
 800f6c4:	e7df      	b.n	800f686 <lv_refr_get_top_obj+0x22>
}
 800f6c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f6c8 <lv_refr_obj>:
{
 800f6c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(obj->hidden != 0) return;
 800f6ca:	f890 6030 	ldrb.w	r6, [r0, #48]	; 0x30
 800f6ce:	f016 0610 	ands.w	r6, r6, #16
{
 800f6d2:	b08b      	sub	sp, #44	; 0x2c
 800f6d4:	4604      	mov	r4, r0
 800f6d6:	460f      	mov	r7, r1
    if(obj->hidden != 0) return;
 800f6d8:	d139      	bne.n	800f74e <lv_refr_obj+0x86>
    lv_coord_t ext_size = obj->ext_draw_pad;
 800f6da:	f9b0 5034 	ldrsh.w	r5, [r0, #52]	; 0x34
    lv_obj_get_coords(obj, &obj_area);
 800f6de:	a904      	add	r1, sp, #16
 800f6e0:	f7ff fe7a 	bl	800f3d8 <lv_obj_get_coords>
    obj_area.x1 -= ext_size;
 800f6e4:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800f6e8:	b2ab      	uxth	r3, r5
 800f6ea:	1ad2      	subs	r2, r2, r3
 800f6ec:	f8ad 2010 	strh.w	r2, [sp, #16]
    obj_area.y1 -= ext_size;
 800f6f0:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800f6f4:	1ad2      	subs	r2, r2, r3
 800f6f6:	f8ad 2012 	strh.w	r2, [sp, #18]
    obj_area.x2 += ext_size;
 800f6fa:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800f6fe:	441a      	add	r2, r3
 800f700:	f8ad 2014 	strh.w	r2, [sp, #20]
    obj_area.y2 += ext_size;
 800f704:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    union_ok = lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 800f708:	4639      	mov	r1, r7
    obj_area.y2 += ext_size;
 800f70a:	4413      	add	r3, r2
    union_ok = lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 800f70c:	a802      	add	r0, sp, #8
 800f70e:	aa04      	add	r2, sp, #16
    obj_area.y2 += ext_size;
 800f710:	f8ad 3016 	strh.w	r3, [sp, #22]
    union_ok = lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 800f714:	f004 fc6b 	bl	8013fee <lv_area_intersect>
    if(union_ok != false) {
 800f718:	b1c8      	cbz	r0, 800f74e <lv_refr_obj+0x86>
        obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_MAIN);
 800f71a:	4632      	mov	r2, r6
 800f71c:	6a23      	ldr	r3, [r4, #32]
 800f71e:	a902      	add	r1, sp, #8
 800f720:	4620      	mov	r0, r4
 800f722:	4798      	blx	r3
        lv_obj_get_coords(obj, &obj_area);
 800f724:	a904      	add	r1, sp, #16
 800f726:	4620      	mov	r0, r4
 800f728:	f7ff fe56 	bl	800f3d8 <lv_obj_get_coords>
        union_ok = lv_area_intersect(&obj_mask, mask_ori_p, &obj_area);
 800f72c:	aa04      	add	r2, sp, #16
 800f72e:	4639      	mov	r1, r7
 800f730:	4668      	mov	r0, sp
 800f732:	f004 fc5c 	bl	8013fee <lv_area_intersect>
        if(union_ok != false) {
 800f736:	b128      	cbz	r0, 800f744 <lv_refr_obj+0x7c>
            LV_LL_READ_BACK(obj->child_ll, child_p)
 800f738:	1d26      	adds	r6, r4, #4
 800f73a:	4630      	mov	r0, r6
 800f73c:	f004 fd5f 	bl	80141fe <lv_ll_get_tail>
 800f740:	4605      	mov	r5, r0
 800f742:	b930      	cbnz	r0, 800f752 <lv_refr_obj+0x8a>
        obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_POST);
 800f744:	6a23      	ldr	r3, [r4, #32]
 800f746:	2201      	movs	r2, #1
 800f748:	a902      	add	r1, sp, #8
 800f74a:	4620      	mov	r0, r4
 800f74c:	4798      	blx	r3
}
 800f74e:	b00b      	add	sp, #44	; 0x2c
 800f750:	bdf0      	pop	{r4, r5, r6, r7, pc}
                lv_obj_get_coords(child_p, &child_area);
 800f752:	a908      	add	r1, sp, #32
 800f754:	4628      	mov	r0, r5
 800f756:	f7ff fe3f 	bl	800f3d8 <lv_obj_get_coords>
                child_area.x1 -= ext_size;
 800f75a:	8eab      	ldrh	r3, [r5, #52]	; 0x34
 800f75c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800f760:	1ad2      	subs	r2, r2, r3
 800f762:	f8ad 2020 	strh.w	r2, [sp, #32]
                child_area.y1 -= ext_size;
 800f766:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 800f76a:	1ad2      	subs	r2, r2, r3
 800f76c:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
                child_area.x2 += ext_size;
 800f770:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800f774:	441a      	add	r2, r3
 800f776:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
                child_area.y2 += ext_size;
 800f77a:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
                union_ok = lv_area_intersect(&mask_child, &obj_mask, &child_area);
 800f77e:	4669      	mov	r1, sp
                child_area.y2 += ext_size;
 800f780:	4413      	add	r3, r2
                union_ok = lv_area_intersect(&mask_child, &obj_mask, &child_area);
 800f782:	a806      	add	r0, sp, #24
 800f784:	aa08      	add	r2, sp, #32
                child_area.y2 += ext_size;
 800f786:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
                union_ok = lv_area_intersect(&mask_child, &obj_mask, &child_area);
 800f78a:	f004 fc30 	bl	8013fee <lv_area_intersect>
                if(union_ok) {
 800f78e:	b118      	cbz	r0, 800f798 <lv_refr_obj+0xd0>
                    lv_refr_obj(child_p, &mask_child);
 800f790:	a906      	add	r1, sp, #24
 800f792:	4628      	mov	r0, r5
 800f794:	f7ff ff98 	bl	800f6c8 <lv_refr_obj>
            LV_LL_READ_BACK(obj->child_ll, child_p)
 800f798:	4629      	mov	r1, r5
 800f79a:	4630      	mov	r0, r6
 800f79c:	f004 fd37 	bl	801420e <lv_ll_get_prev>
 800f7a0:	e7ce      	b.n	800f740 <lv_refr_obj+0x78>
	...

0800f7a4 <lv_refr_obj_and_children>:
{
 800f7a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7a6:	460e      	mov	r6, r1
    if(top_p == NULL) top_p = lv_disp_get_scr_act(disp_refr);
 800f7a8:	4605      	mov	r5, r0
 800f7aa:	b920      	cbnz	r0, 800f7b6 <lv_refr_obj_and_children+0x12>
 800f7ac:	4b12      	ldr	r3, [pc, #72]	; (800f7f8 <lv_refr_obj_and_children+0x54>)
 800f7ae:	6818      	ldr	r0, [r3, #0]
 800f7b0:	f7fe fd6d 	bl	800e28e <lv_disp_get_scr_act>
 800f7b4:	4605      	mov	r5, r0
    lv_refr_obj(top_p, mask_p);
 800f7b6:	4628      	mov	r0, r5
 800f7b8:	4631      	mov	r1, r6
 800f7ba:	f7ff ff85 	bl	800f6c8 <lv_refr_obj>
    par = lv_obj_get_parent(top_p);
 800f7be:	4628      	mov	r0, r5
 800f7c0:	f7ff fddc 	bl	800f37c <lv_obj_get_parent>
        par = lv_obj_get_parent(par);
 800f7c4:	4604      	mov	r4, r0
    while(par != NULL) {
 800f7c6:	b900      	cbnz	r0, 800f7ca <lv_refr_obj_and_children+0x26>
}
 800f7c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_obj_t * i = lv_ll_get_prev(&(par->child_ll), border_p);
 800f7ca:	1d27      	adds	r7, r4, #4
            i = lv_ll_get_prev(&(par->child_ll), i);
 800f7cc:	4629      	mov	r1, r5
 800f7ce:	4638      	mov	r0, r7
 800f7d0:	f004 fd1d 	bl	801420e <lv_ll_get_prev>
 800f7d4:	4605      	mov	r5, r0
        while(i != NULL) {
 800f7d6:	b948      	cbnz	r0, 800f7ec <lv_refr_obj_and_children+0x48>
        par->design_cb(par, mask_p, LV_DESIGN_DRAW_POST);
 800f7d8:	6a23      	ldr	r3, [r4, #32]
 800f7da:	2201      	movs	r2, #1
 800f7dc:	4631      	mov	r1, r6
 800f7de:	4620      	mov	r0, r4
 800f7e0:	4798      	blx	r3
        par = lv_obj_get_parent(par);
 800f7e2:	4620      	mov	r0, r4
 800f7e4:	f7ff fdca 	bl	800f37c <lv_obj_get_parent>
 800f7e8:	4625      	mov	r5, r4
 800f7ea:	e7eb      	b.n	800f7c4 <lv_refr_obj_and_children+0x20>
            lv_refr_obj(i, mask_p);
 800f7ec:	4631      	mov	r1, r6
 800f7ee:	4628      	mov	r0, r5
 800f7f0:	f7ff ff6a 	bl	800f6c8 <lv_refr_obj>
 800f7f4:	e7ea      	b.n	800f7cc <lv_refr_obj_and_children+0x28>
 800f7f6:	bf00      	nop
 800f7f8:	20005fec 	.word	0x20005fec

0800f7fc <lv_refr_area_part>:
{
 800f7fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 800f7fe:	4c18      	ldr	r4, [pc, #96]	; (800f860 <lv_refr_area_part+0x64>)
{
 800f800:	4606      	mov	r6, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 800f802:	6820      	ldr	r0, [r4, #0]
 800f804:	f004 fa58 	bl	8013cb8 <lv_disp_get_buf>
 800f808:	4605      	mov	r5, r0
    if(lv_disp_is_double_buf(disp_refr) == false) {
 800f80a:	6820      	ldr	r0, [r4, #0]
 800f80c:	f004 fa56 	bl	8013cbc <lv_disp_is_double_buf>
 800f810:	b910      	cbnz	r0, 800f818 <lv_refr_area_part+0x1c>
        while(vdb->flushing)
 800f812:	69ab      	ldr	r3, [r5, #24]
 800f814:	07db      	lsls	r3, r3, #31
 800f816:	d4fc      	bmi.n	800f812 <lv_refr_area_part+0x16>
    lv_area_intersect(&start_mask, area_p, &vdb->area);
 800f818:	f105 0210 	add.w	r2, r5, #16
 800f81c:	4631      	mov	r1, r6
 800f81e:	4668      	mov	r0, sp
 800f820:	f004 fbe5 	bl	8013fee <lv_area_intersect>
    top_p = lv_refr_get_top_obj(&start_mask, lv_disp_get_scr_act(disp_refr));
 800f824:	6820      	ldr	r0, [r4, #0]
 800f826:	f7fe fd32 	bl	800e28e <lv_disp_get_scr_act>
 800f82a:	4601      	mov	r1, r0
 800f82c:	4668      	mov	r0, sp
 800f82e:	f7ff ff19 	bl	800f664 <lv_refr_get_top_obj>
    lv_refr_obj_and_children(top_p, &start_mask);
 800f832:	4669      	mov	r1, sp
 800f834:	f7ff ffb6 	bl	800f7a4 <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_disp_get_layer_top(disp_refr), &start_mask);
 800f838:	6820      	ldr	r0, [r4, #0]
 800f83a:	f7fe fd39 	bl	800e2b0 <lv_disp_get_layer_top>
 800f83e:	4669      	mov	r1, sp
 800f840:	f7ff ffb0 	bl	800f7a4 <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_disp_get_layer_sys(disp_refr), &start_mask);
 800f844:	6820      	ldr	r0, [r4, #0]
 800f846:	f7fe fd3a 	bl	800e2be <lv_disp_get_layer_sys>
 800f84a:	4669      	mov	r1, sp
 800f84c:	f7ff ffaa 	bl	800f7a4 <lv_refr_obj_and_children>
    if(lv_disp_is_true_double_buf(disp_refr) == false) {
 800f850:	6820      	ldr	r0, [r4, #0]
 800f852:	f004 fa3b 	bl	8013ccc <lv_disp_is_true_double_buf>
 800f856:	b908      	cbnz	r0, 800f85c <lv_refr_area_part+0x60>
        lv_refr_vdb_flush();
 800f858:	f7ff fee0 	bl	800f61c <lv_refr_vdb_flush>
}
 800f85c:	b002      	add	sp, #8
 800f85e:	bd70      	pop	{r4, r5, r6, pc}
 800f860:	20005fec 	.word	0x20005fec

0800f864 <lv_refr_init>:
{
 800f864:	4770      	bx	lr
	...

0800f868 <lv_inv_area>:
{
 800f868:	b530      	push	{r4, r5, lr}
 800f86a:	460d      	mov	r5, r1
 800f86c:	b085      	sub	sp, #20
    if(!disp) disp = lv_disp_get_default();
 800f86e:	4604      	mov	r4, r0
 800f870:	b920      	cbnz	r0, 800f87c <lv_inv_area+0x14>
 800f872:	f004 f9eb 	bl	8013c4c <lv_disp_get_default>
    if(!disp) return;
 800f876:	4604      	mov	r4, r0
 800f878:	2800      	cmp	r0, #0
 800f87a:	d046      	beq.n	800f90a <lv_inv_area+0xa2>
    if(area_p == NULL) {
 800f87c:	b935      	cbnz	r5, 800f88c <lv_inv_area+0x24>
        disp->inv_p = 0;
 800f87e:	f8b4 3160 	ldrh.w	r3, [r4, #352]	; 0x160
 800f882:	f365 0309 	bfi	r3, r5, #0, #10
        disp->inv_p++;
 800f886:	f8a4 3160 	strh.w	r3, [r4, #352]	; 0x160
 800f88a:	e03e      	b.n	800f90a <lv_inv_area+0xa2>
    scr_area.x1 = 0;
 800f88c:	2300      	movs	r3, #0
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 800f88e:	4620      	mov	r0, r4
    scr_area.x1 = 0;
 800f890:	f8ad 3000 	strh.w	r3, [sp]
    scr_area.y1 = 0;
 800f894:	f8ad 3002 	strh.w	r3, [sp, #2]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 800f898:	f004 f9de 	bl	8013c58 <lv_disp_get_hor_res>
 800f89c:	3801      	subs	r0, #1
 800f89e:	f8ad 0004 	strh.w	r0, [sp, #4]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
 800f8a2:	4620      	mov	r0, r4
 800f8a4:	f004 f9e8 	bl	8013c78 <lv_disp_get_ver_res>
 800f8a8:	3801      	subs	r0, #1
 800f8aa:	f8ad 0006 	strh.w	r0, [sp, #6]
    suc = lv_area_intersect(&com_area, area_p, &scr_area);
 800f8ae:	466a      	mov	r2, sp
 800f8b0:	4629      	mov	r1, r5
 800f8b2:	a802      	add	r0, sp, #8
 800f8b4:	f004 fb9b 	bl	8013fee <lv_area_intersect>
    if(suc != false) {
 800f8b8:	b338      	cbz	r0, 800f90a <lv_inv_area+0xa2>
        if(disp->driver.rounder_cb) disp->driver.rounder_cb(&disp_refr->driver, &com_area);
 800f8ba:	6923      	ldr	r3, [r4, #16]
 800f8bc:	b11b      	cbz	r3, 800f8c6 <lv_inv_area+0x5e>
 800f8be:	4a19      	ldr	r2, [pc, #100]	; (800f924 <lv_inv_area+0xbc>)
 800f8c0:	a902      	add	r1, sp, #8
 800f8c2:	6810      	ldr	r0, [r2, #0]
 800f8c4:	4798      	blx	r3
{
 800f8c6:	2500      	movs	r5, #0
        for(i = 0; i < disp->inv_p; i++) {
 800f8c8:	f8b4 2160 	ldrh.w	r2, [r4, #352]	; 0x160
 800f8cc:	b2a9      	uxth	r1, r5
 800f8ce:	f3c2 0309 	ubfx	r3, r2, #0, #10
 800f8d2:	4299      	cmp	r1, r3
 800f8d4:	db10      	blt.n	800f8f8 <lv_inv_area+0x90>
        if(disp->inv_p < LV_INV_BUF_SIZE) {
 800f8d6:	2b1f      	cmp	r3, #31
 800f8d8:	dc19      	bgt.n	800f90e <lv_inv_area+0xa6>
            lv_area_copy(&disp->inv_areas[disp->inv_p], &com_area);
 800f8da:	f103 0208 	add.w	r2, r3, #8
 800f8de:	ab02      	add	r3, sp, #8
 800f8e0:	cb03      	ldmia	r3!, {r0, r1}
 800f8e2:	eb04 05c2 	add.w	r5, r4, r2, lsl #3
 800f8e6:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 800f8ea:	6069      	str	r1, [r5, #4]
        disp->inv_p++;
 800f8ec:	f8b4 3160 	ldrh.w	r3, [r4, #352]	; 0x160
 800f8f0:	1c5a      	adds	r2, r3, #1
 800f8f2:	f362 0309 	bfi	r3, r2, #0, #10
 800f8f6:	e7c6      	b.n	800f886 <lv_inv_area+0x1e>
            if(lv_area_is_in(&com_area, &disp->inv_areas[i]) != false) return;
 800f8f8:	3108      	adds	r1, #8
 800f8fa:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800f8fe:	a802      	add	r0, sp, #8
 800f900:	f004 fbde 	bl	80140c0 <lv_area_is_in>
 800f904:	3501      	adds	r5, #1
 800f906:	2800      	cmp	r0, #0
 800f908:	d0de      	beq.n	800f8c8 <lv_inv_area+0x60>
}
 800f90a:	b005      	add	sp, #20
 800f90c:	bd30      	pop	{r4, r5, pc}
            disp->inv_p = 0;
 800f90e:	4613      	mov	r3, r2
 800f910:	f36f 0309 	bfc	r3, #0, #10
 800f914:	f8a4 3160 	strh.w	r3, [r4, #352]	; 0x160
 800f918:	466b      	mov	r3, sp
 800f91a:	cb03      	ldmia	r3!, {r0, r1}
 800f91c:	6420      	str	r0, [r4, #64]	; 0x40
 800f91e:	6461      	str	r1, [r4, #68]	; 0x44
 800f920:	e7e4      	b.n	800f8ec <lv_inv_area+0x84>
 800f922:	bf00      	nop
 800f924:	20005fec 	.word	0x20005fec

0800f928 <lv_refr_get_disp_refreshing>:
}
 800f928:	4b01      	ldr	r3, [pc, #4]	; (800f930 <lv_refr_get_disp_refreshing+0x8>)
 800f92a:	6818      	ldr	r0, [r3, #0]
 800f92c:	4770      	bx	lr
 800f92e:	bf00      	nop
 800f930:	20005fec 	.word	0x20005fec

0800f934 <lv_disp_refr_task>:
{
 800f934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f938:	b089      	sub	sp, #36	; 0x24
 800f93a:	4605      	mov	r5, r0
    uint32_t start = lv_tick_get();
 800f93c:	f004 f9ec 	bl	8013d18 <lv_tick_get>
    disp_refr = task->user_data;
 800f940:	4cb6      	ldr	r4, [pc, #728]	; (800fc1c <lv_disp_refr_task+0x2e8>)
 800f942:	68eb      	ldr	r3, [r5, #12]
    uint32_t start = lv_tick_get();
 800f944:	9002      	str	r0, [sp, #8]
    disp_refr = task->user_data;
 800f946:	6023      	str	r3, [r4, #0]
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 800f948:	2700      	movs	r7, #0
                disp_refr->inv_area_joined[join_from] = 1;
 800f94a:	f04f 0801 	mov.w	r8, #1
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 800f94e:	6823      	ldr	r3, [r4, #0]
 800f950:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
 800f954:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800f958:	4297      	cmp	r7, r2
 800f95a:	d32e      	bcc.n	800f9ba <lv_disp_refr_task+0x86>
    px_num = 0;
 800f95c:	4bb0      	ldr	r3, [pc, #704]	; (800fc20 <lv_disp_refr_task+0x2ec>)
 800f95e:	9300      	str	r3, [sp, #0]
 800f960:	2600      	movs	r6, #0
 800f962:	601e      	str	r6, [r3, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
 800f964:	6825      	ldr	r5, [r4, #0]
 800f966:	f8b5 3160 	ldrh.w	r3, [r5, #352]	; 0x160
 800f96a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800f96e:	4296      	cmp	r6, r2
 800f970:	d367      	bcc.n	800fa42 <lv_disp_refr_task+0x10e>
    if(disp_refr->inv_p != 0) {
 800f972:	b1ea      	cbz	r2, 800f9b0 <lv_disp_refr_task+0x7c>
        if(lv_disp_is_true_double_buf(disp_refr)) {
 800f974:	4628      	mov	r0, r5
 800f976:	f004 f9a9 	bl	8013ccc <lv_disp_is_true_double_buf>
 800f97a:	2800      	cmp	r0, #0
 800f97c:	f040 8126 	bne.w	800fbcc <lv_disp_refr_task+0x298>
        memset(disp_refr->inv_areas, 0, sizeof(disp_refr->inv_areas));
 800f980:	6824      	ldr	r4, [r4, #0]
 800f982:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f986:	2100      	movs	r1, #0
 800f988:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800f98c:	f00a f8a1 	bl	8019ad2 <memset>
        memset(disp_refr->inv_area_joined, 0, sizeof(disp_refr->inv_area_joined));
 800f990:	2220      	movs	r2, #32
 800f992:	2100      	movs	r1, #0
 800f994:	f504 70a0 	add.w	r0, r4, #320	; 0x140
 800f998:	f00a f89b 	bl	8019ad2 <memset>
        disp_refr->inv_p = 0;
 800f99c:	f8b4 3160 	ldrh.w	r3, [r4, #352]	; 0x160
        if(disp_refr->driver.monitor_cb) {
 800f9a0:	69a5      	ldr	r5, [r4, #24]
        disp_refr->inv_p = 0;
 800f9a2:	f36f 0309 	bfc	r3, #0, #10
 800f9a6:	f8a4 3160 	strh.w	r3, [r4, #352]	; 0x160
        if(disp_refr->driver.monitor_cb) {
 800f9aa:	2d00      	cmp	r5, #0
 800f9ac:	f040 815d 	bne.w	800fc6a <lv_disp_refr_task+0x336>
    lv_draw_free_buf();
 800f9b0:	f000 fd40 	bl	8010434 <lv_draw_free_buf>
}
 800f9b4:	b009      	add	sp, #36	; 0x24
 800f9b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
 800f9ba:	443b      	add	r3, r7
 800f9bc:	f893 5140 	ldrb.w	r5, [r3, #320]	; 0x140
 800f9c0:	b94d      	cbnz	r5, 800f9d6 <lv_disp_refr_task+0xa2>
 800f9c2:	f107 0608 	add.w	r6, r7, #8
 800f9c6:	00f6      	lsls	r6, r6, #3
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 800f9c8:	6820      	ldr	r0, [r4, #0]
 800f9ca:	f8b0 3160 	ldrh.w	r3, [r0, #352]	; 0x160
 800f9ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f9d2:	429d      	cmp	r5, r3
 800f9d4:	d301      	bcc.n	800f9da <lv_disp_refr_task+0xa6>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 800f9d6:	3701      	adds	r7, #1
 800f9d8:	e7b9      	b.n	800f94e <lv_disp_refr_task+0x1a>
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
 800f9da:	1943      	adds	r3, r0, r5
 800f9dc:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800f9e0:	bb6b      	cbnz	r3, 800fa3e <lv_disp_refr_task+0x10a>
 800f9e2:	42af      	cmp	r7, r5
 800f9e4:	d02b      	beq.n	800fa3e <lv_disp_refr_task+0x10a>
 800f9e6:	f105 0908 	add.w	r9, r5, #8
 800f9ea:	ea4f 09c9 	mov.w	r9, r9, lsl #3
            if(lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
 800f9ee:	eb00 0109 	add.w	r1, r0, r9
 800f9f2:	4430      	add	r0, r6
 800f9f4:	f004 fb47 	bl	8014086 <lv_area_is_on>
 800f9f8:	b308      	cbz	r0, 800fa3e <lv_disp_refr_task+0x10a>
            lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
 800f9fa:	6821      	ldr	r1, [r4, #0]
 800f9fc:	a806      	add	r0, sp, #24
 800f9fe:	eb01 0209 	add.w	r2, r1, r9
 800fa02:	4431      	add	r1, r6
 800fa04:	f004 fb1d 	bl	8014042 <lv_area_join>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 800fa08:	a806      	add	r0, sp, #24
 800fa0a:	f004 fae2 	bl	8013fd2 <lv_area_get_size>
 800fa0e:	4683      	mov	fp, r0
 800fa10:	6820      	ldr	r0, [r4, #0]
 800fa12:	4430      	add	r0, r6
 800fa14:	f004 fadd 	bl	8013fd2 <lv_area_get_size>
 800fa18:	4682      	mov	sl, r0
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
 800fa1a:	6820      	ldr	r0, [r4, #0]
 800fa1c:	4448      	add	r0, r9
 800fa1e:	f004 fad8 	bl	8013fd2 <lv_area_get_size>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 800fa22:	4450      	add	r0, sl
 800fa24:	4583      	cmp	fp, r0
 800fa26:	d20a      	bcs.n	800fa3e <lv_disp_refr_task+0x10a>
 800fa28:	aa06      	add	r2, sp, #24
 800fa2a:	ca03      	ldmia	r2!, {r0, r1}
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
 800fa2c:	6823      	ldr	r3, [r4, #0]
 800fa2e:	5198      	str	r0, [r3, r6]
 800fa30:	eb03 0e06 	add.w	lr, r3, r6
                disp_refr->inv_area_joined[join_from] = 1;
 800fa34:	442b      	add	r3, r5
 800fa36:	f8ce 1004 	str.w	r1, [lr, #4]
 800fa3a:	f883 8140 	strb.w	r8, [r3, #320]	; 0x140
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 800fa3e:	3501      	adds	r5, #1
 800fa40:	e7c2      	b.n	800f9c8 <lv_disp_refr_task+0x94>
        if(disp_refr->inv_area_joined[i] == 0) {
 800fa42:	19ab      	adds	r3, r5, r6
 800fa44:	f893 7140 	ldrb.w	r7, [r3, #320]	; 0x140
 800fa48:	2f00      	cmp	r7, #0
 800fa4a:	d17c      	bne.n	800fb46 <lv_disp_refr_task+0x212>
 800fa4c:	f106 0b08 	add.w	fp, r6, #8
 800fa50:	ea4f 03cb 	mov.w	r3, fp, lsl #3
    if(lv_disp_is_true_double_buf(disp_refr)) {
 800fa54:	4628      	mov	r0, r5
 800fa56:	9301      	str	r3, [sp, #4]
            lv_refr_area(&disp_refr->inv_areas[i]);
 800fa58:	eb05 0903 	add.w	r9, r5, r3
    if(lv_disp_is_true_double_buf(disp_refr)) {
 800fa5c:	f004 f936 	bl	8013ccc <lv_disp_is_true_double_buf>
 800fa60:	b198      	cbz	r0, 800fa8a <lv_disp_refr_task+0x156>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 800fa62:	6820      	ldr	r0, [r4, #0]
 800fa64:	f004 f928 	bl	8013cb8 <lv_disp_get_buf>
 800fa68:	4605      	mov	r5, r0
        vdb->area.x1        = 0;
 800fa6a:	8207      	strh	r7, [r0, #16]
        vdb->area.x2        = lv_disp_get_hor_res(disp_refr) - 1;
 800fa6c:	6820      	ldr	r0, [r4, #0]
 800fa6e:	f004 f8f3 	bl	8013c58 <lv_disp_get_hor_res>
 800fa72:	3801      	subs	r0, #1
 800fa74:	82a8      	strh	r0, [r5, #20]
        vdb->area.y1        = 0;
 800fa76:	826f      	strh	r7, [r5, #18]
        vdb->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
 800fa78:	6820      	ldr	r0, [r4, #0]
 800fa7a:	f004 f8fd 	bl	8013c78 <lv_disp_get_ver_res>
 800fa7e:	3801      	subs	r0, #1
 800fa80:	82e8      	strh	r0, [r5, #22]
            lv_refr_area_part(area_p);
 800fa82:	4648      	mov	r0, r9
 800fa84:	f7ff feba 	bl	800f7fc <lv_refr_area_part>
 800fa88:	e051      	b.n	800fb2e <lv_disp_refr_task+0x1fa>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 800fa8a:	6820      	ldr	r0, [r4, #0]
 800fa8c:	f004 f914 	bl	8013cb8 <lv_disp_get_buf>
    return area_p->x2 - area_p->x1 + 1;
 800fa90:	f8b9 a004 	ldrh.w	sl, [r9, #4]
 800fa94:	f835 803b 	ldrh.w	r8, [r5, fp, lsl #3]
 800fa98:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
    return area_p->y2 - area_p->y1 + 1;
 800fa9c:	f8b9 b002 	ldrh.w	fp, [r9, #2]
 800faa0:	9303      	str	r3, [sp, #12]
 800faa2:	4607      	mov	r7, r0
    return area_p->x2 - area_p->x1 + 1;
 800faa4:	f10a 0a01 	add.w	sl, sl, #1
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? y2 = lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 800faa8:	6820      	ldr	r0, [r4, #0]
 800faaa:	ebaa 0a08 	sub.w	sl, sl, r8
    return area_p->y2 - area_p->y1 + 1;
 800faae:	f103 0801 	add.w	r8, r3, #1
 800fab2:	f004 f8e1 	bl	8013c78 <lv_disp_get_ver_res>
        lv_coord_t y2 =
 800fab6:	9b03      	ldr	r3, [sp, #12]
 800fab8:	eba8 080b 	sub.w	r8, r8, fp
 800fabc:	4283      	cmp	r3, r0
    return area_p->x2 - area_p->x1 + 1;
 800fabe:	fa0f fa8a 	sxth.w	sl, sl
    return area_p->y2 - area_p->y1 + 1;
 800fac2:	fa0f fb88 	sxth.w	fp, r8
 800fac6:	db40      	blt.n	800fb4a <lv_disp_refr_task+0x216>
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? y2 = lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 800fac8:	6820      	ldr	r0, [r4, #0]
 800faca:	f004 f8d5 	bl	8013c78 <lv_disp_get_ver_res>
 800face:	3801      	subs	r0, #1
 800fad0:	b203      	sxth	r3, r0
        int32_t max_row = (uint32_t)vdb->size / w;
 800fad2:	68fa      	ldr	r2, [r7, #12]
 800fad4:	fbb2 f8fa 	udiv	r8, r2, sl
        if(disp_refr->driver.rounder_cb) {
 800fad8:	6822      	ldr	r2, [r4, #0]
 800fada:	6912      	ldr	r2, [r2, #16]
 800fadc:	45d8      	cmp	r8, fp
 800fade:	bfa8      	it	ge
 800fae0:	46d8      	movge	r8, fp
 800fae2:	2a00      	cmp	r2, #0
 800fae4:	d038      	beq.n	800fb58 <lv_disp_refr_task+0x224>
            tmp.x1 = 0;
 800fae6:	f04f 0200 	mov.w	r2, #0
            lv_coord_t y_tmp = max_row - 1;
 800faea:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
            tmp.x1 = 0;
 800faee:	f8ad 2018 	strh.w	r2, [sp, #24]
            tmp.x2 = 0;
 800faf2:	f8ad 201c 	strh.w	r2, [sp, #28]
            tmp.y1 = 0;
 800faf6:	f8ad 201a 	strh.w	r2, [sp, #26]
            lv_coord_t y_tmp = max_row - 1;
 800fafa:	fa0f fa8a 	sxth.w	sl, sl
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
 800fafe:	6820      	ldr	r0, [r4, #0]
                tmp.y2 = y_tmp;
 800fb00:	f8ad a01e 	strh.w	sl, [sp, #30]
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
 800fb04:	6902      	ldr	r2, [r0, #16]
 800fb06:	9303      	str	r3, [sp, #12]
 800fb08:	a906      	add	r1, sp, #24
 800fb0a:	4790      	blx	r2
 800fb0c:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 800fb10:	f8bd 201a 	ldrh.w	r2, [sp, #26]
                if(lv_area_get_height(&tmp) <= max_row) break;
 800fb14:	9b03      	ldr	r3, [sp, #12]
 800fb16:	3101      	adds	r1, #1
 800fb18:	1a8a      	subs	r2, r1, r2
 800fb1a:	b212      	sxth	r2, r2
 800fb1c:	4542      	cmp	r2, r8
 800fb1e:	dd17      	ble.n	800fb50 <lv_disp_refr_task+0x21c>
 800fb20:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800fb24:	fa0f fa8a 	sxth.w	sl, sl
            } while(y_tmp != 0);
 800fb28:	f1ba 0f00 	cmp.w	sl, #0
 800fb2c:	d1e7      	bne.n	800fafe <lv_disp_refr_task+0x1ca>
            if(disp_refr->driver.monitor_cb) px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
 800fb2e:	6820      	ldr	r0, [r4, #0]
 800fb30:	6983      	ldr	r3, [r0, #24]
 800fb32:	b143      	cbz	r3, 800fb46 <lv_disp_refr_task+0x212>
 800fb34:	9b01      	ldr	r3, [sp, #4]
 800fb36:	4418      	add	r0, r3
 800fb38:	f004 fa4b 	bl	8013fd2 <lv_area_get_size>
 800fb3c:	9b00      	ldr	r3, [sp, #0]
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	4418      	add	r0, r3
 800fb42:	9b00      	ldr	r3, [sp, #0]
 800fb44:	6018      	str	r0, [r3, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
 800fb46:	3601      	adds	r6, #1
 800fb48:	e70c      	b.n	800f964 <lv_disp_refr_task+0x30>
        lv_coord_t y2 =
 800fb4a:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 800fb4e:	e7c0      	b.n	800fad2 <lv_disp_refr_task+0x19e>
            if(y_tmp == 0) {
 800fb50:	f1ba 0f00 	cmp.w	sl, #0
 800fb54:	d0eb      	beq.n	800fb2e <lv_disp_refr_task+0x1fa>
                max_row = tmp.y2 + 1;
 800fb56:	4688      	mov	r8, r1
 800fb58:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
            vdb->area.y2 = row + max_row - 1;
 800fb5c:	fa1f f288 	uxth.w	r2, r8
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 800fb60:	f9b5 a042 	ldrsh.w	sl, [r5, #66]	; 0x42
        lv_coord_t row_last = 0;
 800fb64:	f04f 0b00 	mov.w	fp, #0
 800fb68:	1e51      	subs	r1, r2, #1
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 800fb6a:	eb0a 0008 	add.w	r0, sl, r8
 800fb6e:	3801      	subs	r0, #1
 800fb70:	4298      	cmp	r0, r3
 800fb72:	dd0b      	ble.n	800fb8c <lv_disp_refr_task+0x258>
        if(y2 != row_last) {
 800fb74:	455b      	cmp	r3, fp
 800fb76:	d0da      	beq.n	800fb2e <lv_disp_refr_task+0x1fa>
            vdb->area.x1 = area_p->x1;
 800fb78:	f9b5 2040 	ldrsh.w	r2, [r5, #64]	; 0x40
 800fb7c:	823a      	strh	r2, [r7, #16]
            vdb->area.x2 = area_p->x2;
 800fb7e:	f9b5 2044 	ldrsh.w	r2, [r5, #68]	; 0x44
 800fb82:	82ba      	strh	r2, [r7, #20]
            vdb->area.y1 = row;
 800fb84:	f8a7 a012 	strh.w	sl, [r7, #18]
            vdb->area.y2 = y2;
 800fb88:	82fb      	strh	r3, [r7, #22]
 800fb8a:	e77a      	b.n	800fa82 <lv_disp_refr_task+0x14e>
            vdb->area.x1 = area_p->x1;
 800fb8c:	f9b5 0040 	ldrsh.w	r0, [r5, #64]	; 0x40
 800fb90:	8238      	strh	r0, [r7, #16]
            vdb->area.x2 = area_p->x2;
 800fb92:	f9b5 0044 	ldrsh.w	r0, [r5, #68]	; 0x44
            vdb->area.y1 = row;
 800fb96:	f8a7 a012 	strh.w	sl, [r7, #18]
 800fb9a:	fa1f fa8a 	uxth.w	sl, sl
 800fb9e:	eb0a 0b01 	add.w	fp, sl, r1
 800fba2:	fa0f fb8b 	sxth.w	fp, fp
            vdb->area.y2 = row + max_row - 1;
 800fba6:	459b      	cmp	fp, r3
 800fba8:	bfa8      	it	ge
 800fbaa:	469b      	movge	fp, r3
            vdb->area.x2 = area_p->x2;
 800fbac:	82b8      	strh	r0, [r7, #20]
            vdb->area.y2 = row + max_row - 1;
 800fbae:	f8a7 b016 	strh.w	fp, [r7, #22]
            lv_refr_area_part(area_p);
 800fbb2:	4648      	mov	r0, r9
 800fbb4:	9205      	str	r2, [sp, #20]
 800fbb6:	9104      	str	r1, [sp, #16]
            vdb->area.y2 = row + max_row - 1;
 800fbb8:	9303      	str	r3, [sp, #12]
            lv_refr_area_part(area_p);
 800fbba:	f7ff fe1f 	bl	800f7fc <lv_refr_area_part>
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 800fbbe:	9a05      	ldr	r2, [sp, #20]
 800fbc0:	9904      	ldr	r1, [sp, #16]
 800fbc2:	9b03      	ldr	r3, [sp, #12]
 800fbc4:	4492      	add	sl, r2
 800fbc6:	fa0f fa8a 	sxth.w	sl, sl
 800fbca:	e7ce      	b.n	800fb6a <lv_disp_refr_task+0x236>
            lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 800fbcc:	6820      	ldr	r0, [r4, #0]
 800fbce:	f004 f873 	bl	8013cb8 <lv_disp_get_buf>
 800fbd2:	4605      	mov	r5, r0
            lv_refr_vdb_flush();
 800fbd4:	f7ff fd22 	bl	800f61c <lv_refr_vdb_flush>
            while(vdb->flushing)
 800fbd8:	69ab      	ldr	r3, [r5, #24]
 800fbda:	07db      	lsls	r3, r3, #31
 800fbdc:	d4fc      	bmi.n	800fbd8 <lv_disp_refr_task+0x2a4>
            uint8_t * buf_act = (uint8_t *)vdb->buf_act;
 800fbde:	68ab      	ldr	r3, [r5, #8]
            uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
 800fbe0:	f8d5 8000 	ldr.w	r8, [r5]
            lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
 800fbe4:	6820      	ldr	r0, [r4, #0]
            uint8_t * buf_act = (uint8_t *)vdb->buf_act;
 800fbe6:	9301      	str	r3, [sp, #4]
            uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
 800fbe8:	4543      	cmp	r3, r8
 800fbea:	bf08      	it	eq
 800fbec:	f8d5 8004 	ldreq.w	r8, [r5, #4]
            lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
 800fbf0:	f004 f832 	bl	8013c58 <lv_disp_get_hor_res>
            for(a = 0; a < disp_refr->inv_p; a++) {
 800fbf4:	2700      	movs	r7, #0
            lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
 800fbf6:	4682      	mov	sl, r0
                        start_offs += hres * sizeof(lv_color_t);
 800fbf8:	ea4f 0b40 	mov.w	fp, r0, lsl #1
            for(a = 0; a < disp_refr->inv_p; a++) {
 800fbfc:	6821      	ldr	r1, [r4, #0]
 800fbfe:	f8b1 3160 	ldrh.w	r3, [r1, #352]	; 0x160
 800fc02:	b2ba      	uxth	r2, r7
 800fc04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fc08:	429a      	cmp	r2, r3
 800fc0a:	f6bf aeb9 	bge.w	800f980 <lv_disp_refr_task+0x4c>
                if(disp_refr->inv_area_joined[a] == 0) {
 800fc0e:	188b      	adds	r3, r1, r2
 800fc10:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800fc14:	b133      	cbz	r3, 800fc24 <lv_disp_refr_task+0x2f0>
 800fc16:	3701      	adds	r7, #1
 800fc18:	e7f0      	b.n	800fbfc <lv_disp_refr_task+0x2c8>
 800fc1a:	bf00      	nop
 800fc1c:	20005fec 	.word	0x20005fec
 800fc20:	20005ff0 	.word	0x20005ff0
 800fc24:	eb01 09c2 	add.w	r9, r1, r2, lsl #3
                        (hres * disp_refr->inv_areas[a].y1 + disp_refr->inv_areas[a].x1) * sizeof(lv_color_t);
 800fc28:	f9b9 3040 	ldrsh.w	r3, [r9, #64]	; 0x40
 800fc2c:	f9b9 6042 	ldrsh.w	r6, [r9, #66]	; 0x42
    return area_p->x2 - area_p->x1 + 1;
 800fc30:	f8b9 2044 	ldrh.w	r2, [r9, #68]	; 0x44
 800fc34:	fb0a 3506 	mla	r5, sl, r6, r3
 800fc38:	f1c3 0301 	rsb	r3, r3, #1
 800fc3c:	4413      	add	r3, r2
                    uint32_t line_length = lv_area_get_width(&disp_refr->inv_areas[a]) * sizeof(lv_color_t);
 800fc3e:	b21b      	sxth	r3, r3
 800fc40:	005b      	lsls	r3, r3, #1
 800fc42:	9303      	str	r3, [sp, #12]
 800fc44:	9b01      	ldr	r3, [sp, #4]
                    uint32_t start_offs =
 800fc46:	006d      	lsls	r5, r5, #1
 800fc48:	442b      	add	r3, r5
 800fc4a:	4445      	add	r5, r8
                    for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
 800fc4c:	f9b9 2046 	ldrsh.w	r2, [r9, #70]	; 0x46
 800fc50:	42b2      	cmp	r2, r6
 800fc52:	dbe0      	blt.n	800fc16 <lv_disp_refr_task+0x2e2>
                        memcpy(buf_act + start_offs, buf_ina + start_offs, line_length);
 800fc54:	4629      	mov	r1, r5
 800fc56:	4618      	mov	r0, r3
 800fc58:	9a03      	ldr	r2, [sp, #12]
 800fc5a:	f009 ff2f 	bl	8019abc <memcpy>
 800fc5e:	3601      	adds	r6, #1
 800fc60:	4603      	mov	r3, r0
 800fc62:	b236      	sxth	r6, r6
 800fc64:	445b      	add	r3, fp
 800fc66:	445d      	add	r5, fp
 800fc68:	e7f0      	b.n	800fc4c <lv_disp_refr_task+0x318>
            disp_refr->driver.monitor_cb(&disp_refr->driver, lv_tick_elaps(start), px_num);
 800fc6a:	9802      	ldr	r0, [sp, #8]
 800fc6c:	f004 f862 	bl	8013d34 <lv_tick_elaps>
 800fc70:	9b00      	ldr	r3, [sp, #0]
 800fc72:	4601      	mov	r1, r0
 800fc74:	681a      	ldr	r2, [r3, #0]
 800fc76:	4620      	mov	r0, r4
 800fc78:	47a8      	blx	r5
 800fc7a:	e699      	b.n	800f9b0 <lv_disp_refr_task+0x7c>

0800fc7c <lv_style_copy>:
 * @param dest pointer to the destination style
 * @param src pointer to the source style
 */
void lv_style_copy(lv_style_t * dest, const lv_style_t * src)
{
    memcpy(dest, src, sizeof(lv_style_t));
 800fc7c:	f101 033c 	add.w	r3, r1, #60	; 0x3c
 800fc80:	f851 2b04 	ldr.w	r2, [r1], #4
 800fc84:	f840 2b04 	str.w	r2, [r0], #4
 800fc88:	4299      	cmp	r1, r3
 800fc8a:	d1f9      	bne.n	800fc80 <lv_style_copy+0x4>
}
 800fc8c:	4770      	bx	lr
	...

0800fc90 <lv_style_init>:
    lv_style_scr.glass               = 0;
 800fc90:	49d7      	ldr	r1, [pc, #860]	; (800fff0 <lv_style_init+0x360>)
{
 800fc92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_style_scr.glass               = 0;
 800fc96:	780b      	ldrb	r3, [r1, #0]
    lv_style_scr.body.main_color     = LV_COLOR_WHITE;
 800fc98:	f8df 9370 	ldr.w	r9, [pc, #880]	; 801000c <lv_style_init+0x37c>
    lv_style_copy(&lv_style_plain, &lv_style_scr);
 800fc9c:	4dd5      	ldr	r5, [pc, #852]	; (800fff4 <lv_style_init+0x364>)
    lv_style_scr.body.main_color     = LV_COLOR_WHITE;
 800fc9e:	f8b9 b000 	ldrh.w	fp, [r9]
 800fca2:	f8a1 b002 	strh.w	fp, [r1, #2]
    lv_style_scr.glass               = 0;
 800fca6:	f36f 0300 	bfc	r3, #0, #1
 800fcaa:	700b      	strb	r3, [r1, #0]
    lv_style_scr.body.border.color = LV_COLOR_BLACK;
 800fcac:	7a8b      	ldrb	r3, [r1, #10]
    lv_style_scr.body.grad_color     = LV_COLOR_WHITE;
 800fcae:	f8a1 b004 	strh.w	fp, [r1, #4]
    lv_style_scr.body.radius         = 0;
 800fcb2:	2600      	movs	r6, #0
    lv_style_scr.body.border.color = LV_COLOR_BLACK;
 800fcb4:	f366 0304 	bfi	r3, r6, #0, #5
 800fcb8:	728b      	strb	r3, [r1, #10]
 800fcba:	894b      	ldrh	r3, [r1, #10]
    lv_style_scr.body.radius         = 0;
 800fcbc:	80ce      	strh	r6, [r1, #6]
    lv_style_scr.body.border.color = LV_COLOR_BLACK;
 800fcbe:	f366 134a 	bfi	r3, r6, #5, #6
 800fcc2:	814b      	strh	r3, [r1, #10]
 800fcc4:	0a1b      	lsrs	r3, r3, #8
 800fcc6:	f366 03c7 	bfi	r3, r6, #3, #5
 800fcca:	72cb      	strb	r3, [r1, #11]
    lv_style_scr.body.border.part  = LV_BORDER_FULL;
 800fccc:	230f      	movs	r3, #15
{
 800fcce:	b085      	sub	sp, #20
    lv_style_scr.body.border.part  = LV_BORDER_FULL;
 800fcd0:	738b      	strb	r3, [r1, #14]
    lv_style_scr.body.shadow.color = LV_COLOR_GRAY;
 800fcd2:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 800fcd6:	f8ad 3004 	strh.w	r3, [sp, #4]
 800fcda:	b29b      	uxth	r3, r3
 800fcdc:	820b      	strh	r3, [r1, #16]
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
 800fcde:	f891 3020 	ldrb.w	r3, [r1, #32]
    lv_style_scr.body.padding.left   = 0;
 800fce2:	834e      	strh	r6, [r1, #26]
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
 800fce4:	2206      	movs	r2, #6
 800fce6:	f362 0304 	bfi	r3, r2, #0, #5
 800fcea:	f881 3020 	strb.w	r3, [r1, #32]
 800fcee:	8c0b      	ldrh	r3, [r1, #32]
    lv_style_scr.body.padding.right  = 0;
 800fcf0:	838e      	strh	r6, [r1, #28]
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
 800fcf2:	220c      	movs	r2, #12
 800fcf4:	f362 134a 	bfi	r3, r2, #5, #6
 800fcf8:	840b      	strh	r3, [r1, #32]
 800fcfa:	2206      	movs	r2, #6
 800fcfc:	0a1b      	lsrs	r3, r3, #8
    lv_style_scr.body.padding.inner  = LV_DPI / 20;
 800fcfe:	f04f 0801 	mov.w	r8, #1
    lv_style_scr.body.opa            = LV_OPA_COVER;
 800fd02:	24ff      	movs	r4, #255	; 0xff
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
 800fd04:	f362 03c7 	bfi	r3, r2, #3, #5
    lv_style_scr.body.opa            = LV_OPA_COVER;
 800fd08:	720c      	strb	r4, [r1, #8]
    lv_style_scr.body.padding.top    = 0;
 800fd0a:	82ce      	strh	r6, [r1, #22]
    lv_style_scr.body.padding.bottom = 0;
 800fd0c:	830e      	strh	r6, [r1, #24]
    lv_style_scr.body.padding.inner  = LV_DPI / 20;
 800fd0e:	f8a1 801e 	strh.w	r8, [r1, #30]
    lv_style_scr.body.border.opa   = LV_OPA_COVER;
 800fd12:	73cc      	strb	r4, [r1, #15]
    lv_style_scr.body.border.width = 0;
 800fd14:	818e      	strh	r6, [r1, #12]
    lv_style_scr.body.shadow.type  = LV_SHADOW_FULL;
 800fd16:	f881 8014 	strb.w	r8, [r1, #20]
    lv_style_scr.body.shadow.width = 0;
 800fd1a:	824e      	strh	r6, [r1, #18]
    lv_style_scr.text.opa          = LV_OPA_COVER;
 800fd1c:	f881 402c 	strb.w	r4, [r1, #44]	; 0x2c
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
 800fd20:	f881 3021 	strb.w	r3, [r1, #33]	; 0x21
    lv_style_scr.text.sel_color    = lv_color_make(0x55, 0x96, 0xd8);
 800fd24:	f891 3022 	ldrb.w	r3, [r1, #34]	; 0x22
    lv_style_scr.image.opa     = LV_OPA_COVER;
 800fd28:	f881 4033 	strb.w	r4, [r1, #51]	; 0x33
    lv_style_scr.text.sel_color    = lv_color_make(0x55, 0x96, 0xd8);
 800fd2c:	221b      	movs	r2, #27
 800fd2e:	f362 0304 	bfi	r3, r2, #0, #5
 800fd32:	f881 3022 	strb.w	r3, [r1, #34]	; 0x22
 800fd36:	8c4a      	ldrh	r2, [r1, #34]	; 0x22
    lv_style_scr.line.opa     = LV_OPA_COVER;
 800fd38:	f881 4038 	strb.w	r4, [r1, #56]	; 0x38
    lv_style_scr.text.sel_color    = lv_color_make(0x55, 0x96, 0xd8);
 800fd3c:	2325      	movs	r3, #37	; 0x25
 800fd3e:	f363 124a 	bfi	r2, r3, #5, #6
 800fd42:	9303      	str	r3, [sp, #12]
 800fd44:	0a10      	lsrs	r0, r2, #8
 800fd46:	844a      	strh	r2, [r1, #34]	; 0x22
 800fd48:	220a      	movs	r2, #10
 800fd4a:	f362 00c7 	bfi	r0, r2, #3, #5
 800fd4e:	9202      	str	r2, [sp, #8]
 800fd50:	f881 0023 	strb.w	r0, [r1, #35]	; 0x23
    lv_style_scr.text.font         = LV_FONT_DEFAULT;
 800fd54:	48a8      	ldr	r0, [pc, #672]	; (800fff8 <lv_style_init+0x368>)
 800fd56:	6248      	str	r0, [r1, #36]	; 0x24
    lv_style_scr.image.color   = lv_color_make(0x20, 0x20, 0x20);
 800fd58:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
    lv_style_copy(&lv_style_plain_color, &lv_style_plain);
 800fd5c:	4ca7      	ldr	r4, [pc, #668]	; (800fffc <lv_style_init+0x36c>)
    lv_style_scr.text.letter_space = 0;
 800fd5e:	850e      	strh	r6, [r1, #40]	; 0x28
    lv_style_scr.image.color   = lv_color_make(0x20, 0x20, 0x20);
 800fd60:	2704      	movs	r7, #4
 800fd62:	f367 0004 	bfi	r0, r7, #0, #5
 800fd66:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
 800fd6a:	8e08      	ldrh	r0, [r1, #48]	; 0x30
    lv_style_scr.image.intense = LV_OPA_TRANSP;
 800fd6c:	f881 6032 	strb.w	r6, [r1, #50]	; 0x32
    lv_style_scr.image.color   = lv_color_make(0x20, 0x20, 0x20);
 800fd70:	f04f 0a08 	mov.w	sl, #8
 800fd74:	f36a 104a 	bfi	r0, sl, #5, #6
 800fd78:	8608      	strh	r0, [r1, #48]	; 0x30
 800fd7a:	fa20 f00a 	lsr.w	r0, r0, sl
 800fd7e:	f367 00c7 	bfi	r0, r7, #3, #5
 800fd82:	f881 0031 	strb.w	r0, [r1, #49]	; 0x31
    lv_style_scr.line.color   = lv_color_make(0x20, 0x20, 0x20);
 800fd86:	f891 0034 	ldrb.w	r0, [r1, #52]	; 0x34
 800fd8a:	f367 0004 	bfi	r0, r7, #0, #5
 800fd8e:	f881 0034 	strb.w	r0, [r1, #52]	; 0x34
 800fd92:	8e88      	ldrh	r0, [r1, #52]	; 0x34
 800fd94:	f36a 104a 	bfi	r0, sl, #5, #6
 800fd98:	8688      	strh	r0, [r1, #52]	; 0x34
 800fd9a:	fa20 f00a 	lsr.w	r0, r0, sl
 800fd9e:	f367 00c7 	bfi	r0, r7, #3, #5
 800fda2:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
    lv_style_scr.line.rounded = 0;
 800fda6:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 800fdaa:	f366 0000 	bfi	r0, r6, #0, #1
    lv_style_scr.text.line_space   = 2;
 800fdae:	f04f 0302 	mov.w	r3, #2
    lv_style_scr.line.rounded = 0;
 800fdb2:	f881 0039 	strb.w	r0, [r1, #57]	; 0x39
    lv_style_copy(&lv_style_plain, &lv_style_scr);
 800fdb6:	4628      	mov	r0, r5
    lv_style_scr.text.line_space   = 2;
 800fdb8:	854b      	strh	r3, [r1, #42]	; 0x2a
    lv_style_scr.line.width   = 2;
 800fdba:	86cb      	strh	r3, [r1, #54]	; 0x36
    lv_style_copy(&lv_style_plain, &lv_style_scr);
 800fdbc:	f7ff ff5e 	bl	800fc7c <lv_style_copy>
    lv_style_copy(&lv_style_plain_color, &lv_style_plain);
 800fdc0:	4629      	mov	r1, r5
 800fdc2:	4620      	mov	r0, r4
    lv_style_plain.body.padding.left   = LV_DPI / 20;
 800fdc4:	f8a5 801a 	strh.w	r8, [r5, #26]
    lv_style_plain.body.padding.right  = LV_DPI / 20;
 800fdc8:	f8a5 801c 	strh.w	r8, [r5, #28]
    lv_style_plain.body.padding.top    = LV_DPI / 20;
 800fdcc:	f8a5 8016 	strh.w	r8, [r5, #22]
    lv_style_plain.body.padding.bottom = LV_DPI / 20;
 800fdd0:	f8a5 8018 	strh.w	r8, [r5, #24]
    lv_style_copy(&lv_style_plain_color, &lv_style_plain);
 800fdd4:	f7ff ff52 	bl	800fc7c <lv_style_copy>
    lv_style_plain_color.text.color      = lv_color_make(0xf0, 0xf0, 0xf0);
 800fdd8:	f894 1020 	ldrb.w	r1, [r4, #32]
 800fddc:	231e      	movs	r3, #30
 800fdde:	f363 0104 	bfi	r1, r3, #0, #5
 800fde2:	f884 1020 	strb.w	r1, [r4, #32]
 800fde6:	8c21      	ldrh	r1, [r4, #32]
 800fde8:	203c      	movs	r0, #60	; 0x3c
 800fdea:	f360 114a 	bfi	r1, r0, #5, #6
 800fdee:	8421      	strh	r1, [r4, #32]
 800fdf0:	fa21 f10a 	lsr.w	r1, r1, sl
 800fdf4:	f363 01c7 	bfi	r1, r3, #3, #5
 800fdf8:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    lv_style_plain_color.image.color     = lv_color_make(0xf0, 0xf0, 0xf0);
 800fdfc:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 800fe00:	f363 0104 	bfi	r1, r3, #0, #5
 800fe04:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
 800fe08:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 800fe0a:	f360 114a 	bfi	r1, r0, #5, #6
 800fe0e:	8621      	strh	r1, [r4, #48]	; 0x30
 800fe10:	fa21 f10a 	lsr.w	r1, r1, sl
 800fe14:	f363 01c7 	bfi	r1, r3, #3, #5
 800fe18:	f884 1031 	strb.w	r1, [r4, #49]	; 0x31
    lv_style_plain_color.line.color      = lv_color_make(0xf0, 0xf0, 0xf0);
 800fe1c:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
 800fe20:	f363 0104 	bfi	r1, r3, #0, #5
 800fe24:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 800fe28:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 800fe2a:	f360 114a 	bfi	r1, r0, #5, #6
 800fe2e:	86a1      	strh	r1, [r4, #52]	; 0x34
 800fe30:	fa21 f10a 	lsr.w	r1, r1, sl
 800fe34:	f363 01c7 	bfi	r1, r3, #3, #5
 800fe38:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    lv_style_plain_color.body.main_color = lv_color_make(0x55, 0x96, 0xd8);
 800fe3c:	78a1      	ldrb	r1, [r4, #2]
 800fe3e:	231b      	movs	r3, #27
 800fe40:	f363 0104 	bfi	r1, r3, #0, #5
 800fe44:	70a1      	strb	r1, [r4, #2]
 800fe46:	8861      	ldrh	r1, [r4, #2]
 800fe48:	9b03      	ldr	r3, [sp, #12]
 800fe4a:	f363 114a 	bfi	r1, r3, #5, #6
 800fe4e:	8061      	strh	r1, [r4, #2]
 800fe50:	9a02      	ldr	r2, [sp, #8]
 800fe52:	fa21 f10a 	lsr.w	r1, r1, sl
 800fe56:	f362 01c7 	bfi	r1, r2, #3, #5
 800fe5a:	70e1      	strb	r1, [r4, #3]
    lv_style_plain_color.body.grad_color = lv_style_plain_color.body.main_color;
 800fe5c:	8863      	ldrh	r3, [r4, #2]
 800fe5e:	80a3      	strh	r3, [r4, #4]
    lv_style_copy(&lv_style_pretty, &lv_style_plain);
 800fe60:	4b67      	ldr	r3, [pc, #412]	; (8010000 <lv_style_init+0x370>)
 800fe62:	9302      	str	r3, [sp, #8]
 800fe64:	4629      	mov	r1, r5
 800fe66:	4618      	mov	r0, r3
 800fe68:	f7ff ff08 	bl	800fc7c <lv_style_copy>
    lv_style_pretty.text.color        = lv_color_make(0x20, 0x20, 0x20);
 800fe6c:	9b02      	ldr	r3, [sp, #8]
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
 800fe6e:	4c65      	ldr	r4, [pc, #404]	; (8010004 <lv_style_init+0x374>)
    lv_style_pretty.text.color        = lv_color_make(0x20, 0x20, 0x20);
 800fe70:	f893 2020 	ldrb.w	r2, [r3, #32]
    lv_style_pretty.body.main_color   = LV_COLOR_WHITE;
 800fe74:	f8a3 b002 	strh.w	fp, [r3, #2]
    lv_style_pretty.text.color        = lv_color_make(0x20, 0x20, 0x20);
 800fe78:	f367 0204 	bfi	r2, r7, #0, #5
 800fe7c:	f883 2020 	strb.w	r2, [r3, #32]
 800fe80:	8c1a      	ldrh	r2, [r3, #32]
    lv_style_pretty.body.radius       = LV_DPI / 15;
 800fe82:	f8a3 8006 	strh.w	r8, [r3, #6]
    lv_style_pretty.text.color        = lv_color_make(0x20, 0x20, 0x20);
 800fe86:	f36a 124a 	bfi	r2, sl, #5, #6
 800fe8a:	841a      	strh	r2, [r3, #32]
 800fe8c:	fa22 f20a 	lsr.w	r2, r2, sl
 800fe90:	f367 02c7 	bfi	r2, r7, #3, #5
 800fe94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    lv_style_pretty.image.color       = lv_color_make(0x20, 0x20, 0x20);
 800fe98:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    lv_style_pretty.body.border.width = LV_DPI / 50 >= 1 ? LV_DPI / 50 : 1;
 800fe9c:	f8a3 800c 	strh.w	r8, [r3, #12]
    lv_style_pretty.image.color       = lv_color_make(0x20, 0x20, 0x20);
 800fea0:	f367 0204 	bfi	r2, r7, #0, #5
 800fea4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800fea8:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 800feaa:	f36a 124a 	bfi	r2, sl, #5, #6
 800feae:	861a      	strh	r2, [r3, #48]	; 0x30
 800feb0:	fa22 f20a 	lsr.w	r2, r2, sl
 800feb4:	f367 02c7 	bfi	r2, r7, #3, #5
 800feb8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    lv_style_pretty.line.color        = lv_color_make(0x20, 0x20, 0x20);
 800febc:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800fec0:	f367 0204 	bfi	r2, r7, #0, #5
 800fec4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800fec8:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 800feca:	f36a 124a 	bfi	r2, sl, #5, #6
 800fece:	869a      	strh	r2, [r3, #52]	; 0x34
 800fed0:	fa22 f20a 	lsr.w	r2, r2, sl
 800fed4:	f367 02c7 	bfi	r2, r7, #3, #5
 800fed8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    lv_style_pretty.body.grad_color   = LV_COLOR_SILVER;
 800fedc:	f8b9 2004 	ldrh.w	r2, [r9, #4]
 800fee0:	809a      	strh	r2, [r3, #4]
    lv_style_pretty.body.border.color = lv_color_make(0x40, 0x40, 0x40);
 800fee2:	7a9a      	ldrb	r2, [r3, #10]
 800fee4:	f36a 0204 	bfi	r2, sl, #0, #5
 800fee8:	729a      	strb	r2, [r3, #10]
 800feea:	895a      	ldrh	r2, [r3, #10]
 800feec:	2110      	movs	r1, #16
 800feee:	f361 124a 	bfi	r2, r1, #5, #6
 800fef2:	815a      	strh	r2, [r3, #10]
 800fef4:	fa22 f20a 	lsr.w	r2, r2, sl
 800fef8:	f36a 02c7 	bfi	r2, sl, #3, #5
 800fefc:	72da      	strb	r2, [r3, #11]
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
 800fefe:	4619      	mov	r1, r3
    lv_style_pretty.body.border.opa   = LV_OPA_30;
 800ff00:	224c      	movs	r2, #76	; 0x4c
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
 800ff02:	4620      	mov	r0, r4
    lv_style_pretty.body.border.opa   = LV_OPA_30;
 800ff04:	73da      	strb	r2, [r3, #15]
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
 800ff06:	f7ff feb9 	bl	800fc7c <lv_style_copy>
    lv_style_pretty_color.text.color        = lv_color_make(0xe0, 0xe0, 0xe0);
 800ff0a:	f894 3020 	ldrb.w	r3, [r4, #32]
 800ff0e:	f04f 0b1c 	mov.w	fp, #28
 800ff12:	f36b 0304 	bfi	r3, fp, #0, #5
 800ff16:	f884 3020 	strb.w	r3, [r4, #32]
 800ff1a:	8c23      	ldrh	r3, [r4, #32]
 800ff1c:	2238      	movs	r2, #56	; 0x38
 800ff1e:	f362 134a 	bfi	r3, r2, #5, #6
 800ff22:	8423      	strh	r3, [r4, #32]
 800ff24:	fa23 f30a 	lsr.w	r3, r3, sl
 800ff28:	f36b 03c7 	bfi	r3, fp, #3, #5
 800ff2c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    lv_style_pretty_color.image.color       = lv_color_make(0xe0, 0xe0, 0xe0);
 800ff30:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800ff34:	f36b 0304 	bfi	r3, fp, #0, #5
 800ff38:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 800ff3c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800ff3e:	f362 134a 	bfi	r3, r2, #5, #6
 800ff42:	8623      	strh	r3, [r4, #48]	; 0x30
 800ff44:	fa23 f30a 	lsr.w	r3, r3, sl
 800ff48:	f36b 03c7 	bfi	r3, fp, #3, #5
 800ff4c:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    lv_style_pretty_color.line.color        = lv_color_make(0xc0, 0xc0, 0xc0);
 800ff50:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800ff54:	f04f 0918 	mov.w	r9, #24
 800ff58:	f369 0304 	bfi	r3, r9, #0, #5
 800ff5c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800ff60:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800ff62:	2230      	movs	r2, #48	; 0x30
 800ff64:	f362 134a 	bfi	r3, r2, #5, #6
 800ff68:	86a3      	strh	r3, [r4, #52]	; 0x34
 800ff6a:	fa23 f30a 	lsr.w	r3, r3, sl
 800ff6e:	f369 03c7 	bfi	r3, r9, #3, #5
 800ff72:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    lv_style_pretty_color.body.main_color   = lv_color_make(0x6b, 0x9a, 0xc7);
 800ff76:	78a3      	ldrb	r3, [r4, #2]
 800ff78:	f369 0304 	bfi	r3, r9, #0, #5
 800ff7c:	70a3      	strb	r3, [r4, #2]
 800ff7e:	8863      	ldrh	r3, [r4, #2]
 800ff80:	2226      	movs	r2, #38	; 0x26
 800ff82:	f362 134a 	bfi	r3, r2, #5, #6
 800ff86:	8063      	strh	r3, [r4, #2]
 800ff88:	220d      	movs	r2, #13
 800ff8a:	fa23 f30a 	lsr.w	r3, r3, sl
 800ff8e:	f362 03c7 	bfi	r3, r2, #3, #5
 800ff92:	70e3      	strb	r3, [r4, #3]
    lv_style_pretty_color.body.grad_color   = lv_color_make(0x2b, 0x59, 0x8b);
 800ff94:	7923      	ldrb	r3, [r4, #4]
 800ff96:	2211      	movs	r2, #17
 800ff98:	f362 0304 	bfi	r3, r2, #0, #5
 800ff9c:	7123      	strb	r3, [r4, #4]
 800ff9e:	88a3      	ldrh	r3, [r4, #4]
 800ffa0:	2216      	movs	r2, #22
 800ffa2:	f362 134a 	bfi	r3, r2, #5, #6
 800ffa6:	80a3      	strh	r3, [r4, #4]
 800ffa8:	2205      	movs	r2, #5
 800ffaa:	fa23 f30a 	lsr.w	r3, r3, sl
 800ffae:	f362 03c7 	bfi	r3, r2, #3, #5
 800ffb2:	7163      	strb	r3, [r4, #5]
    lv_style_pretty_color.body.border.color = lv_color_make(0x15, 0x2c, 0x42);
 800ffb4:	7aa3      	ldrb	r3, [r4, #10]
 800ffb6:	f36a 0304 	bfi	r3, sl, #0, #5
 800ffba:	72a3      	strb	r3, [r4, #10]
 800ffbc:	8962      	ldrh	r2, [r4, #10]
 800ffbe:	230b      	movs	r3, #11
 800ffc0:	f363 124a 	bfi	r2, r3, #5, #6
 800ffc4:	9302      	str	r3, [sp, #8]
 800ffc6:	2302      	movs	r3, #2
 800ffc8:	8162      	strh	r2, [r4, #10]
 800ffca:	fa22 f20a 	lsr.w	r2, r2, sl
    lv_style_copy(&lv_style_transp, &lv_style_plain);
 800ffce:	f8df a040 	ldr.w	sl, [pc, #64]	; 8010010 <lv_style_init+0x380>
    lv_style_pretty_color.body.border.color = lv_color_make(0x15, 0x2c, 0x42);
 800ffd2:	f363 02c7 	bfi	r2, r3, #3, #5
 800ffd6:	72e2      	strb	r2, [r4, #11]
    lv_style_copy(&lv_style_transp, &lv_style_plain);
 800ffd8:	4629      	mov	r1, r5
 800ffda:	4650      	mov	r0, sl
 800ffdc:	f7ff fe4e 	bl	800fc7c <lv_style_copy>
    lv_style_transp.glass             = 1;
 800ffe0:	f89a 2000 	ldrb.w	r2, [sl]
    lv_style_copy(&lv_style_transp_fit, &lv_style_transp);
 800ffe4:	4c08      	ldr	r4, [pc, #32]	; (8010008 <lv_style_init+0x378>)
    lv_style_transp.body.border.width = 0;
 800ffe6:	f8aa 600c 	strh.w	r6, [sl, #12]
    lv_style_transp.glass             = 1;
 800ffea:	ea42 0208 	orr.w	r2, r2, r8
 800ffee:	e011      	b.n	8010014 <lv_style_init+0x384>
 800fff0:	2000c51c 	.word	0x2000c51c
 800fff4:	2000c4a4 	.word	0x2000c4a4
 800fff8:	200006ec 	.word	0x200006ec
 800fffc:	2000c594 	.word	0x2000c594
 8010000:	2000c3b4 	.word	0x2000c3b4
 8010004:	2000c2c4 	.word	0x2000c2c4
 8010008:	2000c468 	.word	0x2000c468
 801000c:	0801c5dc 	.word	0x0801c5dc
 8010010:	2000c300 	.word	0x2000c300
 8010014:	f88a 2000 	strb.w	r2, [sl]
    lv_style_transp.body.opa          = LV_OPA_TRANSP;
 8010018:	f88a 6008 	strb.w	r6, [sl, #8]
    lv_style_copy(&lv_style_transp_fit, &lv_style_transp);
 801001c:	4651      	mov	r1, sl
 801001e:	4620      	mov	r0, r4
    lv_style_copy(&lv_style_transp_tight, &lv_style_transp_fit);
 8010020:	f8df a394 	ldr.w	sl, [pc, #916]	; 80103b8 <lv_style_init+0x728>
    lv_style_copy(&lv_style_transp_fit, &lv_style_transp);
 8010024:	f7ff fe2a 	bl	800fc7c <lv_style_copy>
    lv_style_transp_fit.body.padding.left   = 0;
 8010028:	8366      	strh	r6, [r4, #26]
    lv_style_transp_fit.body.padding.right  = 0;
 801002a:	83a6      	strh	r6, [r4, #28]
    lv_style_transp_fit.body.padding.top    = 0;
 801002c:	82e6      	strh	r6, [r4, #22]
    lv_style_transp_fit.body.padding.bottom = 0;
 801002e:	8326      	strh	r6, [r4, #24]
    lv_style_copy(&lv_style_transp_tight, &lv_style_transp_fit);
 8010030:	4621      	mov	r1, r4
    lv_style_copy(&lv_style_btn_rel, &lv_style_plain);
 8010032:	4cdd      	ldr	r4, [pc, #884]	; (80103a8 <lv_style_init+0x718>)
    lv_style_copy(&lv_style_transp_tight, &lv_style_transp_fit);
 8010034:	4650      	mov	r0, sl
 8010036:	f7ff fe21 	bl	800fc7c <lv_style_copy>
    lv_style_copy(&lv_style_btn_rel, &lv_style_plain);
 801003a:	4629      	mov	r1, r5
 801003c:	4620      	mov	r0, r4
    lv_style_transp_tight.body.padding.inner = 0;
 801003e:	f8aa 601e 	strh.w	r6, [sl, #30]
    lv_style_copy(&lv_style_btn_rel, &lv_style_plain);
 8010042:	f7ff fe1b 	bl	800fc7c <lv_style_copy>
    lv_style_btn_rel.body.main_color     = lv_color_make(0x76, 0xa2, 0xd0);
 8010046:	78a2      	ldrb	r2, [r4, #2]
    lv_style_btn_rel.body.radius         = LV_DPI / 15;
 8010048:	f8a4 8006 	strh.w	r8, [r4, #6]
    lv_style_btn_rel.body.main_color     = lv_color_make(0x76, 0xa2, 0xd0);
 801004c:	211a      	movs	r1, #26
 801004e:	f361 0204 	bfi	r2, r1, #0, #5
 8010052:	70a2      	strb	r2, [r4, #2]
 8010054:	8862      	ldrh	r2, [r4, #2]
    lv_style_btn_rel.body.border.width   = LV_DPI / 50 >= 1 ? LV_DPI / 50 : 1;
 8010056:	f8a4 800c 	strh.w	r8, [r4, #12]
    lv_style_btn_rel.body.main_color     = lv_color_make(0x76, 0xa2, 0xd0);
 801005a:	2128      	movs	r1, #40	; 0x28
 801005c:	f361 124a 	bfi	r2, r1, #5, #6
 8010060:	f04f 0a0e 	mov.w	sl, #14
 8010064:	8062      	strh	r2, [r4, #2]
 8010066:	0a12      	lsrs	r2, r2, #8
 8010068:	f36a 02c7 	bfi	r2, sl, #3, #5
 801006c:	70e2      	strb	r2, [r4, #3]
    lv_style_btn_rel.body.grad_color     = lv_color_make(0x19, 0x3a, 0x5d);
 801006e:	9b02      	ldr	r3, [sp, #8]
 8010070:	7922      	ldrb	r2, [r4, #4]
    lv_style_btn_rel.body.padding.top    = LV_DPI / 6;
 8010072:	82e7      	strh	r7, [r4, #22]
    lv_style_btn_rel.body.grad_color     = lv_color_make(0x19, 0x3a, 0x5d);
 8010074:	f363 0204 	bfi	r2, r3, #0, #5
 8010078:	7122      	strb	r2, [r4, #4]
 801007a:	88a3      	ldrh	r3, [r4, #4]
    lv_style_btn_rel.body.padding.bottom = LV_DPI / 6;
 801007c:	8327      	strh	r7, [r4, #24]
    lv_style_btn_rel.body.grad_color     = lv_color_make(0x19, 0x3a, 0x5d);
 801007e:	f36a 134a 	bfi	r3, sl, #5, #6
 8010082:	80a3      	strh	r3, [r4, #4]
 8010084:	2203      	movs	r2, #3
 8010086:	0a1b      	lsrs	r3, r3, #8
 8010088:	f362 03c7 	bfi	r3, r2, #3, #5
 801008c:	7163      	strb	r3, [r4, #5]
    lv_style_btn_rel.body.padding.left   = LV_DPI / 4;
 801008e:	f04f 0306 	mov.w	r3, #6
 8010092:	8363      	strh	r3, [r4, #26]
    lv_style_btn_rel.body.padding.right  = LV_DPI / 4;
 8010094:	83a3      	strh	r3, [r4, #28]
    lv_style_btn_rel.body.padding.inner  = LV_DPI / 10;
 8010096:	f04f 0302 	mov.w	r3, #2
 801009a:	83e3      	strh	r3, [r4, #30]
    lv_style_btn_rel.body.border.color   = lv_color_make(0x0b, 0x19, 0x28);
 801009c:	7aa3      	ldrb	r3, [r4, #10]
    lv_style_btn_rel.body.shadow.width   = 0;
 801009e:	8266      	strh	r6, [r4, #18]
    lv_style_btn_rel.body.border.color   = lv_color_make(0x0b, 0x19, 0x28);
 80100a0:	2205      	movs	r2, #5
 80100a2:	f362 0304 	bfi	r3, r2, #0, #5
 80100a6:	72a3      	strb	r3, [r4, #10]
 80100a8:	8963      	ldrh	r3, [r4, #10]
    lv_style_copy(&lv_style_btn_pr, &lv_style_btn_rel);
 80100aa:	4dc0      	ldr	r5, [pc, #768]	; (80103ac <lv_style_init+0x71c>)
    lv_style_btn_rel.body.border.color   = lv_color_make(0x0b, 0x19, 0x28);
 80100ac:	2206      	movs	r2, #6
 80100ae:	f362 134a 	bfi	r3, r2, #5, #6
 80100b2:	8163      	strh	r3, [r4, #10]
 80100b4:	0a1b      	lsrs	r3, r3, #8
 80100b6:	f368 03c7 	bfi	r3, r8, #3, #5
 80100ba:	72e3      	strb	r3, [r4, #11]
    lv_style_btn_rel.body.border.opa     = LV_OPA_70;
 80100bc:	23b2      	movs	r3, #178	; 0xb2
 80100be:	73e3      	strb	r3, [r4, #15]
    lv_style_btn_rel.body.shadow.color   = LV_COLOR_GRAY;
 80100c0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80100c4:	8223      	strh	r3, [r4, #16]
    lv_style_btn_rel.text.color          = lv_color_make(0xff, 0xff, 0xff);
 80100c6:	f894 3020 	ldrb.w	r3, [r4, #32]
 80100ca:	f043 031f 	orr.w	r3, r3, #31
 80100ce:	f884 3020 	strb.w	r3, [r4, #32]
 80100d2:	8c23      	ldrh	r3, [r4, #32]
 80100d4:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 80100d8:	8423      	strh	r3, [r4, #32]
 80100da:	0a1b      	lsrs	r3, r3, #8
 80100dc:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 80100e0:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    lv_style_btn_rel.image.color         = lv_color_make(0xff, 0xff, 0xff);
 80100e4:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80100e8:	f043 031f 	orr.w	r3, r3, #31
 80100ec:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 80100f0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80100f2:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 80100f6:	8623      	strh	r3, [r4, #48]	; 0x30
 80100f8:	0a1b      	lsrs	r3, r3, #8
 80100fa:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 80100fe:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    lv_style_copy(&lv_style_btn_pr, &lv_style_btn_rel);
 8010102:	4621      	mov	r1, r4
 8010104:	4628      	mov	r0, r5
 8010106:	f7ff fdb9 	bl	800fc7c <lv_style_copy>
    lv_style_btn_pr.body.main_color = lv_color_make(0x33, 0x62, 0x94);
 801010a:	78ab      	ldrb	r3, [r5, #2]
 801010c:	2212      	movs	r2, #18
 801010e:	f362 0304 	bfi	r3, r2, #0, #5
 8010112:	70ab      	strb	r3, [r5, #2]
 8010114:	886b      	ldrh	r3, [r5, #2]
 8010116:	f369 134a 	bfi	r3, r9, #5, #6
 801011a:	806b      	strh	r3, [r5, #2]
 801011c:	2206      	movs	r2, #6
 801011e:	0a1b      	lsrs	r3, r3, #8
 8010120:	f362 03c7 	bfi	r3, r2, #3, #5
 8010124:	70eb      	strb	r3, [r5, #3]
    lv_style_btn_pr.body.grad_color = lv_color_make(0x10, 0x26, 0x3c);
 8010126:	792b      	ldrb	r3, [r5, #4]
 8010128:	2207      	movs	r2, #7
 801012a:	f362 0304 	bfi	r3, r2, #0, #5
 801012e:	712b      	strb	r3, [r5, #4]
 8010130:	88ab      	ldrh	r3, [r5, #4]
 8010132:	2209      	movs	r2, #9
 8010134:	f362 134a 	bfi	r3, r2, #5, #6
 8010138:	80ab      	strh	r3, [r5, #4]
 801013a:	2202      	movs	r2, #2
 801013c:	0a1b      	lsrs	r3, r3, #8
 801013e:	f362 03c7 	bfi	r3, r2, #3, #5
 8010142:	716b      	strb	r3, [r5, #5]
    lv_style_btn_pr.text.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 8010144:	f895 3020 	ldrb.w	r3, [r5, #32]
 8010148:	f369 0304 	bfi	r3, r9, #0, #5
 801014c:	f885 3020 	strb.w	r3, [r5, #32]
 8010150:	8c2b      	ldrh	r3, [r5, #32]
 8010152:	222d      	movs	r2, #45	; 0x2d
 8010154:	f362 134a 	bfi	r3, r2, #5, #6
 8010158:	842b      	strh	r3, [r5, #32]
 801015a:	0a19      	lsrs	r1, r3, #8
 801015c:	2314      	movs	r3, #20
 801015e:	f363 01c7 	bfi	r1, r3, #3, #5
 8010162:	f885 1021 	strb.w	r1, [r5, #33]	; 0x21
    lv_style_btn_pr.image.color     = lv_color_make(0xa4, 0xb5, 0xc6);
 8010166:	f895 1030 	ldrb.w	r1, [r5, #48]	; 0x30
 801016a:	f369 0104 	bfi	r1, r9, #0, #5
 801016e:	f885 1030 	strb.w	r1, [r5, #48]	; 0x30
 8010172:	8e29      	ldrh	r1, [r5, #48]	; 0x30
 8010174:	f362 114a 	bfi	r1, r2, #5, #6
 8010178:	8629      	strh	r1, [r5, #48]	; 0x30
 801017a:	0a09      	lsrs	r1, r1, #8
 801017c:	f363 01c7 	bfi	r1, r3, #3, #5
 8010180:	f885 1031 	strb.w	r1, [r5, #49]	; 0x31
    lv_style_btn_pr.line.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 8010184:	f895 1034 	ldrb.w	r1, [r5, #52]	; 0x34
 8010188:	f369 0104 	bfi	r1, r9, #0, #5
 801018c:	f885 1034 	strb.w	r1, [r5, #52]	; 0x34
 8010190:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8010192:	9202      	str	r2, [sp, #8]
 8010194:	f362 114a 	bfi	r1, r2, #5, #6
 8010198:	86a9      	strh	r1, [r5, #52]	; 0x34
 801019a:	0a09      	lsrs	r1, r1, #8
 801019c:	f363 01c7 	bfi	r1, r3, #3, #5
 80101a0:	9301      	str	r3, [sp, #4]
 80101a2:	f885 1035 	strb.w	r1, [r5, #53]	; 0x35
    lv_style_copy(&lv_style_btn_tgl_rel, &lv_style_btn_rel);
 80101a6:	4d82      	ldr	r5, [pc, #520]	; (80103b0 <lv_style_init+0x720>)
 80101a8:	4621      	mov	r1, r4
 80101aa:	4628      	mov	r0, r5
 80101ac:	f7ff fd66 	bl	800fc7c <lv_style_copy>
    lv_style_btn_tgl_rel.body.main_color   = lv_color_make(0x0a, 0x11, 0x22);
 80101b0:	78a9      	ldrb	r1, [r5, #2]
 80101b2:	f367 0104 	bfi	r1, r7, #0, #5
 80101b6:	70a9      	strb	r1, [r5, #2]
 80101b8:	8869      	ldrh	r1, [r5, #2]
 80101ba:	f367 114a 	bfi	r1, r7, #5, #6
 80101be:	8069      	strh	r1, [r5, #2]
 80101c0:	0a09      	lsrs	r1, r1, #8
 80101c2:	f368 01c7 	bfi	r1, r8, #3, #5
 80101c6:	70e9      	strb	r1, [r5, #3]
    lv_style_btn_tgl_rel.body.grad_color   = lv_color_make(0x37, 0x62, 0x90);
 80101c8:	7929      	ldrb	r1, [r5, #4]
 80101ca:	2312      	movs	r3, #18
 80101cc:	f363 0104 	bfi	r1, r3, #0, #5
 80101d0:	7129      	strb	r1, [r5, #4]
 80101d2:	88a9      	ldrh	r1, [r5, #4]
 80101d4:	f369 114a 	bfi	r1, r9, #5, #6
 80101d8:	80a9      	strh	r1, [r5, #4]
 80101da:	2306      	movs	r3, #6
 80101dc:	0a09      	lsrs	r1, r1, #8
 80101de:	f363 01c7 	bfi	r1, r3, #3, #5
 80101e2:	7169      	strb	r1, [r5, #5]
    lv_style_btn_tgl_rel.body.border.color = lv_color_make(0x01, 0x07, 0x0d);
 80101e4:	7aa9      	ldrb	r1, [r5, #10]
 80101e6:	f368 0104 	bfi	r1, r8, #0, #5
 80101ea:	72a9      	strb	r1, [r5, #10]
 80101ec:	8969      	ldrh	r1, [r5, #10]
 80101ee:	f368 114a 	bfi	r1, r8, #5, #6
 80101f2:	8169      	strh	r1, [r5, #10]
 80101f4:	0a09      	lsrs	r1, r1, #8
 80101f6:	f366 01c7 	bfi	r1, r6, #3, #5
 80101fa:	72e9      	strb	r1, [r5, #11]
    lv_style_btn_tgl_rel.text.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 80101fc:	f895 1020 	ldrb.w	r1, [r5, #32]
    lv_style_copy(&lv_style_btn_tgl_pr, &lv_style_btn_tgl_rel);
 8010200:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 80103bc <lv_style_init+0x72c>
    lv_style_btn_tgl_rel.text.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 8010204:	231e      	movs	r3, #30
 8010206:	f363 0104 	bfi	r1, r3, #0, #5
 801020a:	f885 1020 	strb.w	r1, [r5, #32]
 801020e:	8c29      	ldrh	r1, [r5, #32]
 8010210:	f04f 0e37 	mov.w	lr, #55	; 0x37
 8010214:	f36e 114a 	bfi	r1, lr, #5, #6
 8010218:	8429      	strh	r1, [r5, #32]
 801021a:	2019      	movs	r0, #25
 801021c:	0a09      	lsrs	r1, r1, #8
 801021e:	f360 01c7 	bfi	r1, r0, #3, #5
 8010222:	f885 1021 	strb.w	r1, [r5, #33]	; 0x21
    lv_style_btn_tgl_rel.image.color       = lv_color_make(0xc8, 0xdd, 0xf4);
 8010226:	f895 1030 	ldrb.w	r1, [r5, #48]	; 0x30
 801022a:	f363 0104 	bfi	r1, r3, #0, #5
 801022e:	f885 1030 	strb.w	r1, [r5, #48]	; 0x30
 8010232:	8e29      	ldrh	r1, [r5, #48]	; 0x30
 8010234:	f36e 114a 	bfi	r1, lr, #5, #6
 8010238:	8629      	strh	r1, [r5, #48]	; 0x30
 801023a:	0a09      	lsrs	r1, r1, #8
 801023c:	f360 01c7 	bfi	r1, r0, #3, #5
 8010240:	f885 1031 	strb.w	r1, [r5, #49]	; 0x31
    lv_style_btn_tgl_rel.line.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 8010244:	f895 1034 	ldrb.w	r1, [r5, #52]	; 0x34
 8010248:	f363 0104 	bfi	r1, r3, #0, #5
 801024c:	f885 1034 	strb.w	r1, [r5, #52]	; 0x34
 8010250:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8010252:	f36e 114a 	bfi	r1, lr, #5, #6
 8010256:	86a9      	strh	r1, [r5, #52]	; 0x34
 8010258:	0a09      	lsrs	r1, r1, #8
 801025a:	f360 01c7 	bfi	r1, r0, #3, #5
 801025e:	f885 1035 	strb.w	r1, [r5, #53]	; 0x35
    lv_style_copy(&lv_style_btn_tgl_pr, &lv_style_btn_tgl_rel);
 8010262:	4640      	mov	r0, r8
 8010264:	4629      	mov	r1, r5
 8010266:	f7ff fd09 	bl	800fc7c <lv_style_copy>
    lv_style_btn_tgl_pr.body.main_color = lv_color_make(0x02, 0x14, 0x27);
 801026a:	f898 1002 	ldrb.w	r1, [r8, #2]
    lv_style_copy(&lv_style_btn_ina, &lv_style_btn_rel);
 801026e:	4d51      	ldr	r5, [pc, #324]	; (80103b4 <lv_style_init+0x724>)
    lv_style_btn_tgl_pr.body.main_color = lv_color_make(0x02, 0x14, 0x27);
 8010270:	f367 0104 	bfi	r1, r7, #0, #5
 8010274:	f888 1002 	strb.w	r1, [r8, #2]
 8010278:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 801027c:	2305      	movs	r3, #5
 801027e:	f363 114a 	bfi	r1, r3, #5, #6
 8010282:	f8a8 1002 	strh.w	r1, [r8, #2]
 8010286:	0a09      	lsrs	r1, r1, #8
 8010288:	f366 01c7 	bfi	r1, r6, #3, #5
 801028c:	f888 1003 	strb.w	r1, [r8, #3]
    lv_style_btn_tgl_pr.body.grad_color = lv_color_make(0x2b, 0x4c, 0x70);
 8010290:	f898 1004 	ldrb.w	r1, [r8, #4]
 8010294:	f36a 0104 	bfi	r1, sl, #0, #5
 8010298:	f888 1004 	strb.w	r1, [r8, #4]
 801029c:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 80102a0:	2013      	movs	r0, #19
 80102a2:	f360 114a 	bfi	r1, r0, #5, #6
 80102a6:	f8a8 1004 	strh.w	r1, [r8, #4]
 80102aa:	0a09      	lsrs	r1, r1, #8
 80102ac:	f363 01c7 	bfi	r1, r3, #3, #5
 80102b0:	f888 1005 	strb.w	r1, [r8, #5]
    lv_style_btn_tgl_pr.text.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 80102b4:	f898 1020 	ldrb.w	r1, [r8, #32]
 80102b8:	9a02      	ldr	r2, [sp, #8]
 80102ba:	f369 0104 	bfi	r1, r9, #0, #5
 80102be:	f888 1020 	strb.w	r1, [r8, #32]
 80102c2:	f8b8 1020 	ldrh.w	r1, [r8, #32]
 80102c6:	f362 114a 	bfi	r1, r2, #5, #6
 80102ca:	f8a8 1020 	strh.w	r1, [r8, #32]
 80102ce:	9b01      	ldr	r3, [sp, #4]
 80102d0:	0a09      	lsrs	r1, r1, #8
 80102d2:	f363 01c7 	bfi	r1, r3, #3, #5
 80102d6:	f888 1021 	strb.w	r1, [r8, #33]	; 0x21
    lv_style_btn_tgl_pr.image.color     = lv_color_make(0xa4, 0xb5, 0xc6);
 80102da:	f898 1030 	ldrb.w	r1, [r8, #48]	; 0x30
 80102de:	f369 0104 	bfi	r1, r9, #0, #5
 80102e2:	f888 1030 	strb.w	r1, [r8, #48]	; 0x30
 80102e6:	f8b8 1030 	ldrh.w	r1, [r8, #48]	; 0x30
 80102ea:	f362 114a 	bfi	r1, r2, #5, #6
 80102ee:	f8a8 1030 	strh.w	r1, [r8, #48]	; 0x30
 80102f2:	0a09      	lsrs	r1, r1, #8
 80102f4:	f363 01c7 	bfi	r1, r3, #3, #5
 80102f8:	f888 1031 	strb.w	r1, [r8, #49]	; 0x31
    lv_style_btn_tgl_pr.line.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 80102fc:	f898 1034 	ldrb.w	r1, [r8, #52]	; 0x34
 8010300:	f369 0104 	bfi	r1, r9, #0, #5
 8010304:	f888 1034 	strb.w	r1, [r8, #52]	; 0x34
 8010308:	f8b8 1034 	ldrh.w	r1, [r8, #52]	; 0x34
 801030c:	f362 114a 	bfi	r1, r2, #5, #6
 8010310:	f8a8 1034 	strh.w	r1, [r8, #52]	; 0x34
 8010314:	0a09      	lsrs	r1, r1, #8
 8010316:	f363 01c7 	bfi	r1, r3, #3, #5
 801031a:	f888 1035 	strb.w	r1, [r8, #53]	; 0x35
    lv_style_copy(&lv_style_btn_ina, &lv_style_btn_rel);
 801031e:	4628      	mov	r0, r5
 8010320:	4621      	mov	r1, r4
 8010322:	f7ff fcab 	bl	800fc7c <lv_style_copy>
    lv_style_btn_ina.body.main_color   = lv_color_make(0xd8, 0xd8, 0xd8);
 8010326:	78ab      	ldrb	r3, [r5, #2]
 8010328:	221b      	movs	r2, #27
 801032a:	f362 0304 	bfi	r3, r2, #0, #5
 801032e:	70ab      	strb	r3, [r5, #2]
 8010330:	886b      	ldrh	r3, [r5, #2]
 8010332:	2236      	movs	r2, #54	; 0x36
 8010334:	f362 134a 	bfi	r3, r2, #5, #6
 8010338:	211b      	movs	r1, #27
 801033a:	806b      	strh	r3, [r5, #2]
 801033c:	0a1b      	lsrs	r3, r3, #8
 801033e:	f361 03c7 	bfi	r3, r1, #3, #5
 8010342:	70eb      	strb	r3, [r5, #3]
    lv_style_btn_ina.body.grad_color   = lv_color_make(0xd8, 0xd8, 0xd8);
 8010344:	792b      	ldrb	r3, [r5, #4]
 8010346:	f361 0304 	bfi	r3, r1, #0, #5
 801034a:	712b      	strb	r3, [r5, #4]
 801034c:	88ab      	ldrh	r3, [r5, #4]
 801034e:	f362 134a 	bfi	r3, r2, #5, #6
 8010352:	80ab      	strh	r3, [r5, #4]
 8010354:	0a1b      	lsrs	r3, r3, #8
 8010356:	f361 03c7 	bfi	r3, r1, #3, #5
 801035a:	716b      	strb	r3, [r5, #5]
    lv_style_btn_ina.body.border.color = lv_color_make(0x90, 0x90, 0x90);
 801035c:	7aab      	ldrb	r3, [r5, #10]
 801035e:	2212      	movs	r2, #18
 8010360:	f362 0304 	bfi	r3, r2, #0, #5
 8010364:	72ab      	strb	r3, [r5, #10]
 8010366:	896b      	ldrh	r3, [r5, #10]
 8010368:	2224      	movs	r2, #36	; 0x24
 801036a:	f362 134a 	bfi	r3, r2, #5, #6
 801036e:	816b      	strh	r3, [r5, #10]
 8010370:	2212      	movs	r2, #18
 8010372:	0a1b      	lsrs	r3, r3, #8
 8010374:	f362 03c7 	bfi	r3, r2, #3, #5
 8010378:	72eb      	strb	r3, [r5, #11]
    lv_style_btn_ina.text.color        = lv_color_make(0x70, 0x70, 0x70);
 801037a:	f895 3020 	ldrb.w	r3, [r5, #32]
 801037e:	f36a 0304 	bfi	r3, sl, #0, #5
 8010382:	f885 3020 	strb.w	r3, [r5, #32]
 8010386:	8c2b      	ldrh	r3, [r5, #32]
 8010388:	f36b 134a 	bfi	r3, fp, #5, #6
 801038c:	842b      	strh	r3, [r5, #32]
 801038e:	0a1b      	lsrs	r3, r3, #8
 8010390:	f36a 03c7 	bfi	r3, sl, #3, #5
 8010394:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
    lv_style_btn_ina.image.color       = lv_color_make(0x70, 0x70, 0x70);
 8010398:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 801039c:	f36a 0304 	bfi	r3, sl, #0, #5
 80103a0:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 80103a4:	e00c      	b.n	80103c0 <lv_style_init+0x730>
 80103a6:	bf00      	nop
 80103a8:	2000c33c 	.word	0x2000c33c
 80103ac:	2000c378 	.word	0x2000c378
 80103b0:	2000c4e0 	.word	0x2000c4e0
 80103b4:	2000c42c 	.word	0x2000c42c
 80103b8:	2000c3f0 	.word	0x2000c3f0
 80103bc:	2000c558 	.word	0x2000c558
 80103c0:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 80103c2:	f36b 134a 	bfi	r3, fp, #5, #6
 80103c6:	862b      	strh	r3, [r5, #48]	; 0x30
 80103c8:	0a1b      	lsrs	r3, r3, #8
 80103ca:	f36a 03c7 	bfi	r3, sl, #3, #5
 80103ce:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
    lv_style_btn_ina.line.color        = lv_color_make(0x70, 0x70, 0x70);
 80103d2:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 80103d6:	f36a 0304 	bfi	r3, sl, #0, #5
 80103da:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
 80103de:	8eab      	ldrh	r3, [r5, #52]	; 0x34
 80103e0:	f36b 134a 	bfi	r3, fp, #5, #6
 80103e4:	86ab      	strh	r3, [r5, #52]	; 0x34
 80103e6:	0a1b      	lsrs	r3, r3, #8
 80103e8:	f36a 03c7 	bfi	r3, sl, #3, #5
 80103ec:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
}
 80103f0:	b005      	add	sp, #20
 80103f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103f6:	bf00      	nop

080103f8 <lv_draw_get_buf>:
 * Be careful to not use the buffer while other processes are using it.
 * @param size the required size
 */
void * lv_draw_get_buf(uint32_t size)
{
    if(size <= draw_buf_size) return LV_GC_ROOT(_lv_draw_buf);
 80103f8:	4b0c      	ldr	r3, [pc, #48]	; (801042c <lv_draw_get_buf+0x34>)
 80103fa:	681a      	ldr	r2, [r3, #0]
 80103fc:	4282      	cmp	r2, r0
{
 80103fe:	b510      	push	{r4, lr}
 8010400:	4601      	mov	r1, r0
 8010402:	4c0b      	ldr	r4, [pc, #44]	; (8010430 <lv_draw_get_buf+0x38>)
    if(size <= draw_buf_size) return LV_GC_ROOT(_lv_draw_buf);
 8010404:	d301      	bcc.n	801040a <lv_draw_get_buf+0x12>
 8010406:	6820      	ldr	r0, [r4, #0]
 8010408:	bd10      	pop	{r4, pc}

    LV_LOG_TRACE("lv_draw_get_buf: allocate");

    draw_buf_size = size;
 801040a:	6018      	str	r0, [r3, #0]

    if(LV_GC_ROOT(_lv_draw_buf) == NULL) {
 801040c:	6823      	ldr	r3, [r4, #0]
 801040e:	b923      	cbnz	r3, 801041a <lv_draw_get_buf+0x22>
        LV_GC_ROOT(_lv_draw_buf) = lv_mem_alloc(size);
 8010410:	f004 f83a 	bl	8014488 <lv_mem_alloc>
 8010414:	6020      	str	r0, [r4, #0]
        lv_mem_assert(LV_GC_ROOT(_lv_draw_buf));
 8010416:	b938      	cbnz	r0, 8010428 <lv_draw_get_buf+0x30>
 8010418:	e7fe      	b.n	8010418 <lv_draw_get_buf+0x20>
        return LV_GC_ROOT(_lv_draw_buf);
    }

    LV_GC_ROOT(_lv_draw_buf) = lv_mem_realloc(LV_GC_ROOT(_lv_draw_buf), size);
 801041a:	4618      	mov	r0, r3
 801041c:	f004 f894 	bl	8014548 <lv_mem_realloc>
    lv_mem_assert(LV_GC_ROOT(_lv_draw_buf));
 8010420:	b108      	cbz	r0, 8010426 <lv_draw_get_buf+0x2e>
    LV_GC_ROOT(_lv_draw_buf) = lv_mem_realloc(LV_GC_ROOT(_lv_draw_buf), size);
 8010422:	6020      	str	r0, [r4, #0]
 8010424:	bd10      	pop	{r4, pc}
 8010426:	e7fe      	b.n	8010426 <lv_draw_get_buf+0x2e>
    return LV_GC_ROOT(_lv_draw_buf);
}
 8010428:	bd10      	pop	{r4, pc}
 801042a:	bf00      	nop
 801042c:	20005ff4 	.word	0x20005ff4
 8010430:	2000c5e8 	.word	0x2000c5e8

08010434 <lv_draw_free_buf>:

/**
 * Free the draw buffer
 */
void lv_draw_free_buf(void)
{
 8010434:	b510      	push	{r4, lr}
    if(LV_GC_ROOT(_lv_draw_buf)) {
 8010436:	4c05      	ldr	r4, [pc, #20]	; (801044c <lv_draw_free_buf+0x18>)
 8010438:	6820      	ldr	r0, [r4, #0]
 801043a:	b128      	cbz	r0, 8010448 <lv_draw_free_buf+0x14>
        lv_mem_free(LV_GC_ROOT(_lv_draw_buf));
 801043c:	f004 f85a 	bl	80144f4 <lv_mem_free>
        LV_GC_ROOT(_lv_draw_buf) = NULL;
        draw_buf_size = 0;
 8010440:	4a03      	ldr	r2, [pc, #12]	; (8010450 <lv_draw_free_buf+0x1c>)
        LV_GC_ROOT(_lv_draw_buf) = NULL;
 8010442:	2300      	movs	r3, #0
 8010444:	6023      	str	r3, [r4, #0]
        draw_buf_size = 0;
 8010446:	6013      	str	r3, [r2, #0]
 8010448:	bd10      	pop	{r4, pc}
 801044a:	bf00      	nop
 801044c:	2000c5e8 	.word	0x2000c5e8
 8010450:	20005ff4 	.word	0x20005ff4

08010454 <lv_draw_aa_get_opa>:
    static const lv_opa_t seg7[7] = {18, 55, 91, 128, 164, 200, 237};
    static const lv_opa_t seg8[8] = {16, 48, 80, 112, 143, 175, 207, 239};

    static const lv_opa_t * seg_map[] = {seg1, seg2, seg3, seg4, seg5, seg6, seg7, seg8};

    if(seg == 0)
 8010454:	b188      	cbz	r0, 801047a <lv_draw_aa_get_opa+0x26>
        return LV_OPA_TRANSP;
    else if(seg < 8)
 8010456:	2807      	cmp	r0, #7
 8010458:	dc08      	bgt.n	801046c <lv_draw_aa_get_opa+0x18>
        return (uint32_t)((uint32_t)seg_map[seg - 1][px_id] * base_opa) >> 8;
 801045a:	3801      	subs	r0, #1
 801045c:	4b07      	ldr	r3, [pc, #28]	; (801047c <lv_draw_aa_get_opa+0x28>)
 801045e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8010462:	5c58      	ldrb	r0, [r3, r1]
 8010464:	fb10 f002 	smulbb	r0, r0, r2
 8010468:	0a00      	lsrs	r0, r0, #8
 801046a:	4770      	bx	lr
    else {
        return ((px_id * 2 + 1) * base_opa) / (2 * seg);
 801046c:	0049      	lsls	r1, r1, #1
 801046e:	fb01 2202 	mla	r2, r1, r2, r2
 8010472:	0040      	lsls	r0, r0, #1
 8010474:	fb92 f0f0 	sdiv	r0, r2, r0
 8010478:	b2c0      	uxtb	r0, r0
    }
}
 801047a:	4770      	bx	lr
 801047c:	080ec36c 	.word	0x080ec36c

08010480 <lv_color_mix>:
static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 8010480:	f1c2 03ff 	rsb	r3, r2, #255	; 0xff
{
 8010484:	b570      	push	{r4, r5, r6, lr}
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 8010486:	b294      	uxth	r4, r2
 8010488:	b29a      	uxth	r2, r3
 801048a:	f3c1 23c4 	ubfx	r3, r1, #11, #5
 801048e:	fb13 f302 	smulbb	r3, r3, r2
 8010492:	f3c0 25c4 	ubfx	r5, r0, #11, #5
    uint16_t g_2   = (c2.ch.green_h << 3) + c2.ch.green_l;
    uint16_t g_out = (uint16_t)((uint16_t)g_1 * mix + (g_2 * (255 - mix))) >> 8;
    ret.ch.green_h = g_out >> 3;
    ret.ch.green_l = g_out & 0x7;
#else
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 8010496:	f3c1 1645 	ubfx	r6, r1, #5, #6
#endif
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 801049a:	f001 011f 	and.w	r1, r1, #31
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 801049e:	fb05 3504 	mla	r5, r5, r4, r3
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 80104a2:	fb16 f602 	smulbb	r6, r6, r2
 80104a6:	f3c0 1345 	ubfx	r3, r0, #5, #6
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 80104aa:	fb11 f202 	smulbb	r2, r1, r2
 80104ae:	f000 001f 	and.w	r0, r0, #31
 80104b2:	fb00 2204 	mla	r2, r0, r4, r2
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 80104b6:	fb03 6304 	mla	r3, r3, r4, r6
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 80104ba:	f3c2 2207 	ubfx	r2, r2, #8, #8
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 80104be:	f04f 0000 	mov.w	r0, #0
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 80104c2:	f3c3 2305 	ubfx	r3, r3, #8, #6
    return ret;
 80104c6:	f362 0004 	bfi	r0, r2, #0, #5
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 80104ca:	f3c5 2504 	ubfx	r5, r5, #8, #5
    return ret;
 80104ce:	f363 104a 	bfi	r0, r3, #5, #6
 80104d2:	f365 20cf 	bfi	r0, r5, #11, #5
}
 80104d6:	bd70      	pop	{r4, r5, r6, pc}

080104d8 <lv_draw_px>:
 * @param mask_p fill only on this mask (truncated to VDB area)
 * @param color pixel color
 * @param opa opacity of the area (0..255)
 */
void lv_draw_px(lv_coord_t x, lv_coord_t y, const lv_area_t * mask_p, lv_color_t color, lv_opa_t opa)
{
 80104d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80104dc:	b085      	sub	sp, #20
 80104de:	4606      	mov	r6, r0
 80104e0:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30

    if(opa < LV_OPA_MIN) return;
 80104e4:	f1b9 0f0f 	cmp.w	r9, #15
{
 80104e8:	460d      	mov	r5, r1
 80104ea:	461f      	mov	r7, r3
    if(opa < LV_OPA_MIN) return;
 80104ec:	d92e      	bls.n	801054c <lv_draw_px+0x74>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;

    /*Pixel out of the mask*/
    if(x < mask_p->x1 || x > mask_p->x2 || y < mask_p->y1 || y > mask_p->y2) {
 80104ee:	f9b2 3000 	ldrsh.w	r3, [r2]
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 80104f2:	f1b9 0ffc 	cmp.w	r9, #252	; 0xfc
 80104f6:	bf28      	it	cs
 80104f8:	f04f 09ff 	movcs.w	r9, #255	; 0xff
    if(x < mask_p->x1 || x > mask_p->x2 || y < mask_p->y1 || y > mask_p->y2) {
 80104fc:	4283      	cmp	r3, r0
 80104fe:	dc25      	bgt.n	801054c <lv_draw_px+0x74>
 8010500:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8010504:	4283      	cmp	r3, r0
 8010506:	db21      	blt.n	801054c <lv_draw_px+0x74>
 8010508:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 801050c:	428b      	cmp	r3, r1
 801050e:	dc1d      	bgt.n	801054c <lv_draw_px+0x74>
 8010510:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8010514:	428b      	cmp	r3, r1
 8010516:	db19      	blt.n	801054c <lv_draw_px+0x74>
        return;
    }

    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
 8010518:	f7ff fa06 	bl	800f928 <lv_refr_get_disp_refreshing>
 801051c:	4680      	mov	r8, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 801051e:	f003 fbcb 	bl	8013cb8 <lv_disp_get_buf>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return area_p->x2 - area_p->x1 + 1;
 8010522:	8a82      	ldrh	r2, [r0, #20]
 8010524:	8a04      	ldrh	r4, [r0, #16]
 8010526:	3201      	adds	r2, #1
 8010528:	1b12      	subs	r2, r2, r4
    uint32_t vdb_width  = lv_area_get_width(&vdb->area);

    /*Make the coordinates relative to VDB*/
    x -= vdb->area.x1;
 801052a:	1b36      	subs	r6, r6, r4
    y -= vdb->area.y1;
 801052c:	8a44      	ldrh	r4, [r0, #18]
 801052e:	1b2c      	subs	r4, r5, r4

    if(disp->driver.set_px_cb) {
 8010530:	f8d8 5014 	ldr.w	r5, [r8, #20]
 8010534:	b212      	sxth	r2, r2
    x -= vdb->area.x1;
 8010536:	b233      	sxth	r3, r6
    y -= vdb->area.y1;
 8010538:	b224      	sxth	r4, r4
    if(disp->driver.set_px_cb) {
 801053a:	b155      	cbz	r5, 8010552 <lv_draw_px+0x7a>
        disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, x, y, color, opa);
 801053c:	f8cd 9008 	str.w	r9, [sp, #8]
 8010540:	f8ad 7004 	strh.w	r7, [sp, #4]
 8010544:	9400      	str	r4, [sp, #0]
 8010546:	6881      	ldr	r1, [r0, #8]
 8010548:	4640      	mov	r0, r8
 801054a:	47a8      	blx	r5
#if LV_COLOR_DEPTH == 32 && LV_COLOR_SCREEN_TRANSP
            *vdb_px_p = color_mix_2_alpha(*vdb_px_p, (*vdb_px_p).ch.alpha, color, opa);
#endif
        }
    }
}
 801054c:	b005      	add	sp, #20
 801054e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            if(opa == LV_OPA_COVER) {
 8010552:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
        lv_color_t * vdb_px_p = vdb->buf_act;
 8010556:	6885      	ldr	r5, [r0, #8]
        vdb_px_p += y * vdb_width + x;
 8010558:	fb02 3404 	mla	r4, r2, r4, r3
            if(opa == LV_OPA_COVER) {
 801055c:	d102      	bne.n	8010564 <lv_draw_px+0x8c>
                *vdb_px_p = color;
 801055e:	f825 7014 	strh.w	r7, [r5, r4, lsl #1]
 8010562:	e7f3      	b.n	801054c <lv_draw_px+0x74>
                *vdb_px_p = lv_color_mix(color, *vdb_px_p, opa);
 8010564:	464a      	mov	r2, r9
 8010566:	f835 1014 	ldrh.w	r1, [r5, r4, lsl #1]
 801056a:	4638      	mov	r0, r7
 801056c:	f7ff ff88 	bl	8010480 <lv_color_mix>
 8010570:	f825 0014 	strh.w	r0, [r5, r4, lsl #1]
 8010574:	e7ea      	b.n	801054c <lv_draw_px+0x74>

08010576 <lv_draw_fill>:
 * @param mask_p fill only o this mask  (truncated to VDB area)
 * @param color fill color
 * @param opa opacity of the area (0..255)
 */
void lv_draw_fill(const lv_area_t * cords_p, const lv_area_t * mask_p, lv_color_t color, lv_opa_t opa)
{
 8010576:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(opa < LV_OPA_MIN) return;
 801057a:	2b0f      	cmp	r3, #15
{
 801057c:	b08b      	sub	sp, #44	; 0x2c
 801057e:	4692      	mov	sl, r2
 8010580:	461e      	mov	r6, r3
    if(opa < LV_OPA_MIN) return;
 8010582:	d94c      	bls.n	801061e <lv_draw_fill+0xa8>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 8010584:	2bfc      	cmp	r3, #252	; 0xfc
    bool union_ok;

    /*Get the union of cord and mask*/
    /* The mask is already truncated to the vdb size
     * in 'lv_refr_area_with_vdb' function */
    union_ok = lv_area_intersect(&res_a, cords_p, mask_p);
 8010586:	460a      	mov	r2, r1
 8010588:	4601      	mov	r1, r0
 801058a:	a808      	add	r0, sp, #32
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 801058c:	bf34      	ite	cc
 801058e:	461e      	movcc	r6, r3
 8010590:	26ff      	movcs	r6, #255	; 0xff
    union_ok = lv_area_intersect(&res_a, cords_p, mask_p);
 8010592:	f003 fd2c 	bl	8013fee <lv_area_intersect>

    /*If there are common part of the three area then draw to the vdb*/
    if(union_ok == false) {
 8010596:	2800      	cmp	r0, #0
 8010598:	d041      	beq.n	801061e <lv_draw_fill+0xa8>
        return;
    }

    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
 801059a:	f7ff f9c5 	bl	800f928 <lv_refr_get_disp_refreshing>
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 801059e:	f003 fb8b 	bl	8013cb8 <lv_disp_get_buf>

    lv_area_t vdb_rel_a; /*Stores relative coordinates on vdb*/
    vdb_rel_a.x1 = res_a.x1 - vdb->area.x1;
    vdb_rel_a.y1 = res_a.y1 - vdb->area.y1;
    vdb_rel_a.x2 = res_a.x2 - vdb->area.x1;
 80105a2:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
    vdb_rel_a.x1 = res_a.x1 - vdb->area.x1;
 80105a6:	8a03      	ldrh	r3, [r0, #16]
    vdb_rel_a.y1 = res_a.y1 - vdb->area.y1;
 80105a8:	8a45      	ldrh	r5, [r0, #18]
 80105aa:	f8bd 9022 	ldrh.w	r9, [sp, #34]	; 0x22
    vdb_rel_a.x1 = res_a.x1 - vdb->area.x1;
 80105ae:	f8bd 4020 	ldrh.w	r4, [sp, #32]
    vdb_rel_a.x2 = res_a.x2 - vdb->area.x1;
 80105b2:	1ac9      	subs	r1, r1, r3
 80105b4:	b20a      	sxth	r2, r1
 80105b6:	9205      	str	r2, [sp, #20]
    vdb_rel_a.y2 = res_a.y2 - vdb->area.y1;
 80105b8:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
    vdb_rel_a.y1 = res_a.y1 - vdb->area.y1;
 80105bc:	eba9 0905 	sub.w	r9, r9, r5
    vdb_rel_a.y2 = res_a.y2 - vdb->area.y1;
 80105c0:	1b52      	subs	r2, r2, r5
 80105c2:	8a85      	ldrh	r5, [r0, #20]
 80105c4:	b212      	sxth	r2, r2
 80105c6:	9206      	str	r2, [sp, #24]
 80105c8:	3501      	adds	r5, #1

    lv_color_t * vdb_buf_tmp = vdb->buf_act;
 80105ca:	6882      	ldr	r2, [r0, #8]
 80105cc:	9207      	str	r2, [sp, #28]
    vdb_rel_a.x1 = res_a.x1 - vdb->area.x1;
 80105ce:	1ae4      	subs	r4, r4, r3
 80105d0:	1aed      	subs	r5, r5, r3
{
    /*Set all row in vdb to the given color*/
    lv_coord_t row;
    lv_coord_t col;

    lv_disp_t * disp = lv_refr_get_disp_refreshing();
 80105d2:	f7ff f9a9 	bl	800f928 <lv_refr_get_disp_refreshing>
    if(disp->driver.set_px_cb) {
 80105d6:	6943      	ldr	r3, [r0, #20]
    vdb_rel_a.y1 = res_a.y1 - vdb->area.y1;
 80105d8:	fa1f f989 	uxth.w	r9, r9
    vdb_rel_a.x1 = res_a.x1 - vdb->area.x1;
 80105dc:	b224      	sxth	r4, r4
    vdb_rel_a.y1 = res_a.y1 - vdb->area.y1;
 80105de:	fa0f f889 	sxth.w	r8, r9
 80105e2:	b22d      	sxth	r5, r5
    lv_disp_t * disp = lv_refr_get_disp_refreshing();
 80105e4:	4683      	mov	fp, r0
    if(disp->driver.set_px_cb) {
 80105e6:	bb93      	cbnz	r3, 801064e <lv_draw_fill+0xd8>
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
                disp->driver.set_px_cb(&disp->driver, (uint8_t *)mem, mem_width, col, row, color, opa);
            }
        }
    } else {
        mem += fill_area->y1 * mem_width; /*Go to the first row*/
 80105e8:	9907      	ldr	r1, [sp, #28]
 80105ea:	fb08 f205 	mul.w	r2, r8, r5

        /*Run simpler function without opacity*/
        if(opa == LV_OPA_COVER) {
 80105ee:	2eff      	cmp	r6, #255	; 0xff
        mem += fill_area->y1 * mem_width; /*Go to the first row*/
 80105f0:	eb01 0742 	add.w	r7, r1, r2, lsl #1
        if(opa == LV_OPA_COVER) {
 80105f4:	d13e      	bne.n	8010674 <lv_draw_fill+0xfe>
 80105f6:	4623      	mov	r3, r4

            /*Fill the first row with 'color'*/
            for(col = fill_area->x1; col <= fill_area->x2; col++) {
 80105f8:	9a05      	ldr	r2, [sp, #20]
 80105fa:	429a      	cmp	r2, r3
 80105fc:	da2c      	bge.n	8010658 <lv_draw_fill+0xe2>
                mem[col] = color;
            }

            /*Copy the first row to all other rows*/
            lv_color_t * mem_first = &mem[fill_area->x1];
 80105fe:	0063      	lsls	r3, r4, #1
            lv_coord_t copy_size   = (fill_area->x2 - fill_area->x1 + 1) * sizeof(lv_color_t);
 8010600:	1b14      	subs	r4, r2, r4
 8010602:	3401      	adds	r4, #1
            mem += mem_width;
 8010604:	006d      	lsls	r5, r5, #1
            lv_color_t * mem_first = &mem[fill_area->x1];
 8010606:	eb07 0803 	add.w	r8, r7, r3
            lv_coord_t copy_size   = (fill_area->x2 - fill_area->x1 + 1) * sizeof(lv_color_t);
 801060a:	0064      	lsls	r4, r4, #1

            for(row = fill_area->y1 + 1; row <= fill_area->y2; row++) {
 801060c:	f109 0601 	add.w	r6, r9, #1
 8010610:	442b      	add	r3, r5
            lv_coord_t copy_size   = (fill_area->x2 - fill_area->x1 + 1) * sizeof(lv_color_t);
 8010612:	b224      	sxth	r4, r4
            for(row = fill_area->y1 + 1; row <= fill_area->y2; row++) {
 8010614:	b236      	sxth	r6, r6
 8010616:	441f      	add	r7, r3
 8010618:	9b06      	ldr	r3, [sp, #24]
 801061a:	42b3      	cmp	r3, r6
 801061c:	da21      	bge.n	8010662 <lv_draw_fill+0xec>
}
 801061e:	b00b      	add	sp, #44	; 0x2c
 8010620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                disp->driver.set_px_cb(&disp->driver, (uint8_t *)mem, mem_width, col, row, color, opa);
 8010624:	f8cd 9000 	str.w	r9, [sp]
 8010628:	9602      	str	r6, [sp, #8]
 801062a:	f8ad a004 	strh.w	sl, [sp, #4]
 801062e:	4623      	mov	r3, r4
 8010630:	462a      	mov	r2, r5
 8010632:	9907      	ldr	r1, [sp, #28]
 8010634:	f8db 7014 	ldr.w	r7, [fp, #20]
 8010638:	4658      	mov	r0, fp
 801063a:	47b8      	blx	r7
 801063c:	f109 0901 	add.w	r9, r9, #1
 8010640:	fa0f f989 	sxth.w	r9, r9
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 8010644:	9b06      	ldr	r3, [sp, #24]
 8010646:	454b      	cmp	r3, r9
 8010648:	daec      	bge.n	8010624 <lv_draw_fill+0xae>
 801064a:	3401      	adds	r4, #1
 801064c:	b224      	sxth	r4, r4
        for(col = fill_area->x1; col <= fill_area->x2; col++) {
 801064e:	9b05      	ldr	r3, [sp, #20]
 8010650:	42a3      	cmp	r3, r4
 8010652:	dbe4      	blt.n	801061e <lv_draw_fill+0xa8>
 8010654:	46c1      	mov	r9, r8
 8010656:	e7f5      	b.n	8010644 <lv_draw_fill+0xce>
                mem[col] = color;
 8010658:	f827 a013 	strh.w	sl, [r7, r3, lsl #1]
 801065c:	3301      	adds	r3, #1
 801065e:	b21b      	sxth	r3, r3
 8010660:	e7ca      	b.n	80105f8 <lv_draw_fill+0x82>
                memcpy(&mem[fill_area->x1], mem_first, copy_size);
 8010662:	4638      	mov	r0, r7
 8010664:	4622      	mov	r2, r4
 8010666:	4641      	mov	r1, r8
 8010668:	3601      	adds	r6, #1
 801066a:	f009 fa27 	bl	8019abc <memcpy>
 801066e:	b236      	sxth	r6, r6
 8010670:	442f      	add	r7, r5
 8010672:	e7d1      	b.n	8010618 <lv_draw_fill+0xa2>
            bool scr_transp = false;
#if LV_COLOR_DEPTH == 32 && LV_COLOR_SCREEN_TRANSP
            scr_transp = disp->driver.screen_transp;
#endif

            lv_color_t bg_tmp  = LV_COLOR_BLACK;
 8010674:	f04f 0900 	mov.w	r9, #0
 8010678:	f363 0904 	bfi	r9, r3, #0, #5
 801067c:	f363 194a 	bfi	r9, r3, #5, #6
 8010680:	f363 29cf 	bfi	r9, r3, #11, #5
            lv_color_t opa_tmp = lv_color_mix(color, bg_tmp, opa);
 8010684:	4632      	mov	r2, r6
 8010686:	4649      	mov	r1, r9
 8010688:	4650      	mov	r0, sl
 801068a:	f7ff fef9 	bl	8010480 <lv_color_mix>
#if LV_COLOR_DEPTH == 32 && LV_COLOR_SCREEN_TRANSP
                        mem[col] = color_mix_2_alpha(mem[col], mem[col].ch.alpha, color, opa);
#endif
                    }
                }
                mem += mem_width;
 801068e:	006b      	lsls	r3, r5, #1
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 8010690:	9a06      	ldr	r2, [sp, #24]
 8010692:	4542      	cmp	r2, r8
 8010694:	dbc3      	blt.n	801061e <lv_draw_fill+0xa8>
 8010696:	4625      	mov	r5, r4
 8010698:	e012      	b.n	80106c0 <lv_draw_fill+0x14a>
                        if(mem[col].full != bg_tmp.full) {
 801069a:	f837 1015 	ldrh.w	r1, [r7, r5, lsl #1]
 801069e:	fa1f f289 	uxth.w	r2, r9
 80106a2:	4291      	cmp	r1, r2
 80106a4:	eb07 0b45 	add.w	fp, r7, r5, lsl #1
 80106a8:	d006      	beq.n	80106b8 <lv_draw_fill+0x142>
                            opa_tmp = lv_color_mix(color, bg_tmp, opa);
 80106aa:	4632      	mov	r2, r6
 80106ac:	4650      	mov	r0, sl
 80106ae:	9307      	str	r3, [sp, #28]
                            bg_tmp  = mem[col];
 80106b0:	4689      	mov	r9, r1
                            opa_tmp = lv_color_mix(color, bg_tmp, opa);
 80106b2:	f7ff fee5 	bl	8010480 <lv_color_mix>
 80106b6:	9b07      	ldr	r3, [sp, #28]
                        mem[col] = opa_tmp;
 80106b8:	f8ab 0000 	strh.w	r0, [fp]
 80106bc:	3501      	adds	r5, #1
 80106be:	b22d      	sxth	r5, r5
                for(col = fill_area->x1; col <= fill_area->x2; col++) {
 80106c0:	9a05      	ldr	r2, [sp, #20]
 80106c2:	42aa      	cmp	r2, r5
 80106c4:	dae9      	bge.n	801069a <lv_draw_fill+0x124>
 80106c6:	f108 0801 	add.w	r8, r8, #1
                mem += mem_width;
 80106ca:	441f      	add	r7, r3
 80106cc:	fa0f f888 	sxth.w	r8, r8
 80106d0:	e7de      	b.n	8010690 <lv_draw_fill+0x11a>
	...

080106d4 <lv_draw_letter>:
{
 80106d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106d8:	b09b      	sub	sp, #108	; 0x6c
 80106da:	4615      	mov	r5, r2
 80106dc:	4699      	mov	r9, r3
    const uint8_t bpp1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 80106de:	2200      	movs	r2, #0
{
 80106e0:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 80106e4:	9305      	str	r3, [sp, #20]
    const uint8_t bpp1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 80106e6:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
 80106ea:	23ff      	movs	r3, #255	; 0xff
    const uint8_t bpp2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 80106ec:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
 80106f0:	2255      	movs	r2, #85	; 0x55
    const uint8_t bpp1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 80106f2:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
    const uint8_t bpp2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 80106f6:	f88d 204d 	strb.w	r2, [sp, #77]	; 0x4d
 80106fa:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
 80106fe:	22aa      	movs	r2, #170	; 0xaa
    const uint8_t bpp4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 8010700:	4bb5      	ldr	r3, [pc, #724]	; (80109d8 <lv_draw_letter+0x304>)
    const uint8_t bpp2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 8010702:	f88d 204e 	strb.w	r2, [sp, #78]	; 0x4e
    const uint8_t bpp4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 8010706:	aa16      	add	r2, sp, #88	; 0x58
{
 8010708:	4604      	mov	r4, r0
 801070a:	460f      	mov	r7, r1
    const uint8_t bpp4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 801070c:	f103 0c10 	add.w	ip, r3, #16
 8010710:	4616      	mov	r6, r2
 8010712:	6818      	ldr	r0, [r3, #0]
 8010714:	6859      	ldr	r1, [r3, #4]
 8010716:	4696      	mov	lr, r2
 8010718:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801071c:	3308      	adds	r3, #8
 801071e:	4563      	cmp	r3, ip
 8010720:	4672      	mov	r2, lr
 8010722:	d1f6      	bne.n	8010712 <lv_draw_letter+0x3e>
    if(opa < LV_OPA_MIN) return;
 8010724:	9b05      	ldr	r3, [sp, #20]
 8010726:	2b0f      	cmp	r3, #15
 8010728:	f240 80d4 	bls.w	80108d4 <lv_draw_letter+0x200>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 801072c:	2bfc      	cmp	r3, #252	; 0xfc
 801072e:	bf28      	it	cs
 8010730:	23ff      	movcs	r3, #255	; 0xff
 8010732:	9305      	str	r3, [sp, #20]
    if(font_p == NULL) {
 8010734:	2d00      	cmp	r5, #0
 8010736:	f000 80cd 	beq.w	80108d4 <lv_draw_letter+0x200>
    bool g_ret = lv_font_get_glyph_dsc(font_p, &g, letter, '\0');
 801073a:	2300      	movs	r3, #0
 801073c:	464a      	mov	r2, r9
 801073e:	a914      	add	r1, sp, #80	; 0x50
 8010740:	4628      	mov	r0, r5
 8010742:	f003 f8d5 	bl	80138f0 <lv_font_get_glyph_dsc>
    if(g_ret == false) return;
 8010746:	2800      	cmp	r0, #0
 8010748:	f000 80c4 	beq.w	80108d4 <lv_draw_letter+0x200>
    switch(g.bpp) {
 801074c:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
 8010750:	3b01      	subs	r3, #1
 8010752:	2b07      	cmp	r3, #7
 8010754:	f200 80be 	bhi.w	80108d4 <lv_draw_letter+0x200>
 8010758:	e8df f003 	tbb	[pc, r3]
 801075c:	09bcc304 	.word	0x09bcc304
 8010760:	bfbcbcbc 	.word	0xbfbcbcbc
            bitmask_init  = 0x80;
 8010764:	2380      	movs	r3, #128	; 0x80
 8010766:	9308      	str	r3, [sp, #32]
            bpp_opa_table = bpp1_opa_table;
 8010768:	ab12      	add	r3, sp, #72	; 0x48
            bpp_opa_table = bpp2_opa_table;
 801076a:	9307      	str	r3, [sp, #28]
 801076c:	e002      	b.n	8010774 <lv_draw_letter+0xa0>
            bitmask_init  = 0xF0;
 801076e:	23f0      	movs	r3, #240	; 0xf0
 8010770:	9308      	str	r3, [sp, #32]
            bpp_opa_table = bpp4_opa_table;
 8010772:	9607      	str	r6, [sp, #28]
    lv_coord_t pos_x = pos_p->x + g.ofs_x;
 8010774:	f99d 2054 	ldrsb.w	r2, [sp, #84]	; 0x54
    lv_coord_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
 8010778:	f99d 3055 	ldrsb.w	r3, [sp, #85]	; 0x55
    lv_coord_t pos_x = pos_p->x + g.ofs_x;
 801077c:	f9b4 8000 	ldrsh.w	r8, [r4]
 8010780:	9209      	str	r2, [sp, #36]	; 0x24
    const uint8_t * map_p = lv_font_get_glyph_bitmap(font_p, letter);
 8010782:	4649      	mov	r1, r9
 8010784:	4628      	mov	r0, r5
    lv_coord_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
 8010786:	f9b4 4002 	ldrsh.w	r4, [r4, #2]
 801078a:	f895 b008 	ldrb.w	fp, [r5, #8]
 801078e:	f895 a009 	ldrb.w	sl, [r5, #9]
 8010792:	f89d 6053 	ldrb.w	r6, [sp, #83]	; 0x53
 8010796:	9306      	str	r3, [sp, #24]
    const uint8_t * map_p = lv_font_get_glyph_bitmap(font_p, letter);
 8010798:	f003 f8a8 	bl	80138ec <lv_font_get_glyph_bitmap>
    if(map_p == NULL) return;
 801079c:	4681      	mov	r9, r0
 801079e:	2800      	cmp	r0, #0
 80107a0:	f000 8098 	beq.w	80108d4 <lv_draw_letter+0x200>
    lv_coord_t pos_x = pos_p->x + g.ofs_x;
 80107a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
 80107a6:	f9b7 1000 	ldrsh.w	r1, [r7]
    lv_coord_t pos_x = pos_p->x + g.ofs_x;
 80107aa:	4490      	add	r8, r2
 80107ac:	fa1f f388 	uxth.w	r3, r8
 80107b0:	930a      	str	r3, [sp, #40]	; 0x28
 80107b2:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
 80107b6:	f89d 2052 	ldrb.w	r2, [sp, #82]	; 0x52
 80107ba:	4442      	add	r2, r8
 80107bc:	428a      	cmp	r2, r1
 80107be:	f2c0 8089 	blt.w	80108d4 <lv_draw_letter+0x200>
 80107c2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80107c6:	4542      	cmp	r2, r8
 80107c8:	f2c0 8084 	blt.w	80108d4 <lv_draw_letter+0x200>
    lv_coord_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
 80107cc:	9b06      	ldr	r3, [sp, #24]
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
 80107ce:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
    lv_coord_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
 80107d2:	441e      	add	r6, r3
 80107d4:	1ba4      	subs	r4, r4, r6
 80107d6:	44a3      	add	fp, r4
 80107d8:	ebab 0a0a 	sub.w	sl, fp, sl
 80107dc:	fa1f f38a 	uxth.w	r3, sl
 80107e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80107e2:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
 80107e6:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
 80107ea:	445b      	add	r3, fp
 80107ec:	4293      	cmp	r3, r2
 80107ee:	db71      	blt.n	80108d4 <lv_draw_letter+0x200>
 80107f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80107f4:	455b      	cmp	r3, fp
 80107f6:	db6d      	blt.n	80108d4 <lv_draw_letter+0x200>
    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
 80107f8:	f7ff f896 	bl	800f928 <lv_refr_get_disp_refreshing>
 80107fc:	900f      	str	r0, [sp, #60]	; 0x3c
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 80107fe:	f003 fa5b 	bl	8013cb8 <lv_disp_get_buf>
 8010802:	8a83      	ldrh	r3, [r0, #20]
 8010804:	f9b0 2010 	ldrsh.w	r2, [r0, #16]
    uint8_t width_byte_scr = g.box_w >> 3; /*Width in bytes (on the screen finally) (e.g. w = 11 -> 2 bytes wide)*/
 8010808:	f89d 6052 	ldrb.w	r6, [sp, #82]	; 0x52
    lv_color_t * vdb_buf_tmp = vdb->buf_act;
 801080c:	f8d0 c008 	ldr.w	ip, [r0, #8]
    uint16_t width_bit = g.box_w * g.bpp; /*Letter width in bits*/
 8010810:	f89d 4056 	ldrb.w	r4, [sp, #86]	; 0x56
    lv_coord_t row_start = pos_y >= mask_p->y1 ? 0 : mask_p->y1 - pos_y;
 8010814:	f9b7 5002 	ldrsh.w	r5, [r7, #2]
 8010818:	3301      	adds	r3, #1
 801081a:	1a9b      	subs	r3, r3, r2
 801081c:	b21b      	sxth	r3, r3
 801081e:	930d      	str	r3, [sp, #52]	; 0x34
    lv_coord_t col_start = pos_x >= mask_p->x1 ? 0 : mask_p->x1 - pos_x;
 8010820:	f9b7 3000 	ldrsh.w	r3, [r7]
 8010824:	4598      	cmp	r8, r3
 8010826:	bfbd      	ittte	lt
 8010828:	990a      	ldrlt	r1, [sp, #40]	; 0x28
 801082a:	1a5b      	sublt	r3, r3, r1
 801082c:	b29b      	uxthlt	r3, r3
 801082e:	2300      	movge	r3, #0
 8010830:	b219      	sxth	r1, r3
 8010832:	9106      	str	r1, [sp, #24]
    lv_coord_t col_end   = pos_x + g.box_w <= mask_p->x2 ? g.box_w : mask_p->x2 - pos_x + 1;
 8010834:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8010838:	4682      	mov	sl, r0
    lv_coord_t col_end   = pos_x + g.box_w <= mask_p->x2 ? g.box_w : mask_p->x2 - pos_x + 1;
 801083a:	eb08 0006 	add.w	r0, r8, r6
 801083e:	4288      	cmp	r0, r1
    uint16_t width_bit = g.box_w * g.bpp; /*Letter width in bits*/
 8010840:	fb06 fe04 	mul.w	lr, r6, r4
    lv_coord_t col_end   = pos_x + g.box_w <= mask_p->x2 ? g.box_w : mask_p->x2 - pos_x + 1;
 8010844:	bfc4      	itt	gt
 8010846:	1c4e      	addgt	r6, r1, #1
 8010848:	990a      	ldrgt	r1, [sp, #40]	; 0x28
    lv_coord_t row_end   = pos_y + g.box_h <= mask_p->y2 ? g.box_h : mask_p->y2 - pos_y + 1;
 801084a:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
    lv_coord_t col_end   = pos_x + g.box_w <= mask_p->x2 ? g.box_w : mask_p->x2 - pos_x + 1;
 801084e:	bfc8      	it	gt
 8010850:	1a76      	subgt	r6, r6, r1
    lv_coord_t row_start = pos_y >= mask_p->y1 ? 0 : mask_p->y1 - pos_y;
 8010852:	45ab      	cmp	fp, r5
 8010854:	bfbc      	itt	lt
 8010856:	990b      	ldrlt	r1, [sp, #44]	; 0x2c
 8010858:	1a6d      	sublt	r5, r5, r1
    lv_coord_t row_end   = pos_y + g.box_h <= mask_p->y2 ? g.box_h : mask_p->y2 - pos_y + 1;
 801085a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 801085e:	eb00 070b 	add.w	r7, r0, fp
    lv_coord_t row_start = pos_y >= mask_p->y1 ? 0 : mask_p->y1 - pos_y;
 8010862:	bfb4      	ite	lt
 8010864:	b2ad      	uxthlt	r5, r5
 8010866:	2500      	movge	r5, #0
    lv_coord_t row_end   = pos_y + g.box_h <= mask_p->y2 ? g.box_h : mask_p->y2 - pos_y + 1;
 8010868:	428f      	cmp	r7, r1
 801086a:	bfc3      	ittte	gt
 801086c:	980b      	ldrgt	r0, [sp, #44]	; 0x2c
 801086e:	3101      	addgt	r1, #1
 8010870:	1a09      	subgt	r1, r1, r0
 8010872:	b201      	sxthle	r1, r0
 8010874:	bfc8      	it	gt
 8010876:	b209      	sxthgt	r1, r1
 8010878:	910e      	str	r1, [sp, #56]	; 0x38
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * g.bpp);
 801087a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
        vdb_buf_tmp += vdb_width - (col_end - col_start); /*Next row in VDB*/
 801087e:	980d      	ldr	r0, [sp, #52]	; 0x34
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * g.bpp);
 8010880:	fb14 f401 	smulbb	r4, r4, r1
        vdb_buf_tmp += vdb_width - (col_end - col_start); /*Next row in VDB*/
 8010884:	9906      	ldr	r1, [sp, #24]
    lv_coord_t col_end   = pos_x + g.box_w <= mask_p->x2 ? g.box_w : mask_p->x2 - pos_x + 1;
 8010886:	b236      	sxth	r6, r6
        vdb_buf_tmp += vdb_width - (col_end - col_start); /*Next row in VDB*/
 8010888:	1a71      	subs	r1, r6, r1
 801088a:	1af3      	subs	r3, r6, r3
 801088c:	1a41      	subs	r1, r0, r1
 801088e:	b29b      	uxth	r3, r3
 8010890:	9806      	ldr	r0, [sp, #24]
 8010892:	005b      	lsls	r3, r3, #1
 8010894:	42b0      	cmp	r0, r6
 8010896:	bfc8      	it	gt
 8010898:	2300      	movgt	r3, #0
 801089a:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 801089e:	9310      	str	r3, [sp, #64]	; 0x40
    vdb_buf_tmp += ((pos_y - vdb->area.y1) * vdb_width) + pos_x - vdb->area.x1;
 80108a0:	f9ba 3012 	ldrsh.w	r3, [sl, #18]
 80108a4:	ebab 0b03 	sub.w	fp, fp, r3
 80108a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80108aa:	b22d      	sxth	r5, r5
 80108ac:	fb03 880b 	mla	r8, r3, fp, r8
 80108b0:	eba8 0202 	sub.w	r2, r8, r2
    vdb_buf_tmp += (row_start * vdb_width) + col_start;
 80108b4:	fb03 0805 	mla	r8, r3, r5, r0
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * g.bpp);
 80108b8:	fb0e 4405 	mla	r4, lr, r5, r4
    vdb_buf_tmp += (row_start * vdb_width) + col_start;
 80108bc:	4442      	add	r2, r8
    map_p += bit_ofs >> 3;
 80108be:	eb09 09d4 	add.w	r9, r9, r4, lsr #3
    vdb_buf_tmp += (row_start * vdb_width) + col_start;
 80108c2:	eb0c 0b42 	add.w	fp, ip, r2, lsl #1
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
 80108c6:	f004 0407 	and.w	r4, r4, #7
    for(row = row_start; row < row_end; row++) {
 80108ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80108cc:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80108d0:	429d      	cmp	r5, r3
 80108d2:	db0a      	blt.n	80108ea <lv_draw_letter+0x216>
}
 80108d4:	b01b      	add	sp, #108	; 0x6c
 80108d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            bitmask_init  = 0xFF;
 80108da:	23ff      	movs	r3, #255	; 0xff
 80108dc:	9308      	str	r3, [sp, #32]
            bpp_opa_table = NULL;
 80108de:	2300      	movs	r3, #0
 80108e0:	e743      	b.n	801076a <lv_draw_letter+0x96>
            bitmask_init  = 0xC0;
 80108e2:	23c0      	movs	r3, #192	; 0xc0
 80108e4:	9308      	str	r3, [sp, #32]
            bpp_opa_table = bpp2_opa_table;
 80108e6:	ab13      	add	r3, sp, #76	; 0x4c
 80108e8:	e73f      	b.n	801076a <lv_draw_letter+0x96>
        bitmask = bitmask_init >> col_bit;
 80108ea:	9b08      	ldr	r3, [sp, #32]
 80108ec:	fa43 f804 	asr.w	r8, r3, r4
        for(col = col_start; col < col_end; col++) {
 80108f0:	9b06      	ldr	r3, [sp, #24]
 80108f2:	930c      	str	r3, [sp, #48]	; 0x30
                } else if(vdb_buf_tmp->full != color.full) {
 80108f4:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 80108f8:	9311      	str	r3, [sp, #68]	; 0x44
        bitmask = bitmask_init >> col_bit;
 80108fa:	fa5f f888 	uxtb.w	r8, r8
        for(col = col_start; col < col_end; col++) {
 80108fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010900:	42b3      	cmp	r3, r6
 8010902:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
 8010906:	db11      	blt.n	801092c <lv_draw_letter+0x258>
        col_bit += ((g.box_w - col_end) + col_start) * g.bpp;
 8010908:	f89d 2052 	ldrb.w	r2, [sp, #82]	; 0x52
 801090c:	9906      	ldr	r1, [sp, #24]
 801090e:	1b92      	subs	r2, r2, r6
 8010910:	440a      	add	r2, r1
 8010912:	fb13 f302 	smulbb	r3, r3, r2
 8010916:	441c      	add	r4, r3
 8010918:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801091a:	b2a4      	uxth	r4, r4
 801091c:	3501      	adds	r5, #1
        map_p += (col_bit >> 3);
 801091e:	eb09 09d4 	add.w	r9, r9, r4, lsr #3
 8010922:	b22d      	sxth	r5, r5
        col_bit = col_bit & 0x7;
 8010924:	f004 0407 	and.w	r4, r4, #7
 8010928:	449b      	add	fp, r3
 801092a:	e7ce      	b.n	80108ca <lv_draw_letter+0x1f6>
            letter_px = (*map_p & bitmask) >> (8 - col_bit - g.bpp);
 801092c:	f899 2000 	ldrb.w	r2, [r9]
 8010930:	f1c4 0108 	rsb	r1, r4, #8
 8010934:	ea08 0202 	and.w	r2, r8, r2
 8010938:	1ac9      	subs	r1, r1, r3
 801093a:	410a      	asrs	r2, r1
            if(letter_px != 0) {
 801093c:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 8010940:	d023      	beq.n	801098a <lv_draw_letter+0x2b6>
                if(opa == LV_OPA_COVER) {
 8010942:	9905      	ldr	r1, [sp, #20]
 8010944:	29ff      	cmp	r1, #255	; 0xff
 8010946:	d13c      	bne.n	80109c2 <lv_draw_letter+0x2ee>
                    px_opa = g.bpp == 8 ? letter_px : bpp_opa_table[letter_px];
 8010948:	2b08      	cmp	r3, #8
 801094a:	d001      	beq.n	8010950 <lv_draw_letter+0x27c>
 801094c:	9b07      	ldr	r3, [sp, #28]
 801094e:	5c9a      	ldrb	r2, [r3, r2]
                if(disp->driver.set_px_cb) {
 8010950:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010952:	695b      	ldr	r3, [r3, #20]
 8010954:	461f      	mov	r7, r3
 8010956:	2b00      	cmp	r3, #0
 8010958:	d040      	beq.n	80109dc <lv_draw_letter+0x308>
                                           (col + pos_x) - vdb->area.x1, (row + pos_y) - vdb->area.y1, color, px_opa);
 801095a:	f8ba 3010 	ldrh.w	r3, [sl, #16]
 801095e:	990a      	ldr	r1, [sp, #40]	; 0x28
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width,
 8010960:	9202      	str	r2, [sp, #8]
                                           (col + pos_x) - vdb->area.x1, (row + pos_y) - vdb->area.y1, color, px_opa);
 8010962:	1acb      	subs	r3, r1, r3
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width,
 8010964:	f8bd 2090 	ldrh.w	r2, [sp, #144]	; 0x90
                                           (col + pos_x) - vdb->area.x1, (row + pos_y) - vdb->area.y1, color, px_opa);
 8010968:	990c      	ldr	r1, [sp, #48]	; 0x30
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width,
 801096a:	f8ad 2004 	strh.w	r2, [sp, #4]
                                           (col + pos_x) - vdb->area.x1, (row + pos_y) - vdb->area.y1, color, px_opa);
 801096e:	440b      	add	r3, r1
 8010970:	f8ba 2012 	ldrh.w	r2, [sl, #18]
 8010974:	990b      	ldr	r1, [sp, #44]	; 0x2c
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width,
 8010976:	980f      	ldr	r0, [sp, #60]	; 0x3c
                                           (col + pos_x) - vdb->area.x1, (row + pos_y) - vdb->area.y1, color, px_opa);
 8010978:	1a8a      	subs	r2, r1, r2
 801097a:	442a      	add	r2, r5
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width,
 801097c:	b212      	sxth	r2, r2
 801097e:	9200      	str	r2, [sp, #0]
 8010980:	b21b      	sxth	r3, r3
 8010982:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010984:	f8da 1008 	ldr.w	r1, [sl, #8]
 8010988:	47b8      	blx	r7
            vdb_buf_tmp++;
 801098a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801098c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801098e:	3302      	adds	r3, #2
 8010990:	9309      	str	r3, [sp, #36]	; 0x24
            if(col_bit < 8 - g.bpp) {
 8010992:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
 8010996:	f1c3 0208 	rsb	r2, r3, #8
 801099a:	4294      	cmp	r4, r2
 801099c:	f107 0701 	add.w	r7, r7, #1
                col_bit += g.bpp;
 80109a0:	bfbc      	itt	lt
 80109a2:	18e4      	addlt	r4, r4, r3
                bitmask = bitmask >> g.bpp;
 80109a4:	fa48 f803 	asrlt.w	r8, r8, r3
 80109a8:	b23b      	sxth	r3, r7
                col_bit += g.bpp;
 80109aa:	bfb9      	ittee	lt
 80109ac:	b2a4      	uxthlt	r4, r4
                bitmask = bitmask >> g.bpp;
 80109ae:	fa5f f888 	uxtblt.w	r8, r8
                map_p++;
 80109b2:	f109 0901 	addge.w	r9, r9, #1
                bitmask = bitmask_init;
 80109b6:	f8dd 8020 	ldrge.w	r8, [sp, #32]
 80109ba:	930c      	str	r3, [sp, #48]	; 0x30
                col_bit = 0;
 80109bc:	bfa8      	it	ge
 80109be:	2400      	movge	r4, #0
 80109c0:	e79d      	b.n	80108fe <lv_draw_letter+0x22a>
                    px_opa = g.bpp == 8 ? (uint16_t)((uint16_t)letter_px * opa) >> 8
 80109c2:	2b08      	cmp	r3, #8
                                        : (uint16_t)((uint16_t)bpp_opa_table[letter_px] * opa) >> 8;
 80109c4:	bf1c      	itt	ne
 80109c6:	9b07      	ldrne	r3, [sp, #28]
 80109c8:	5c9a      	ldrbne	r2, [r3, r2]
 80109ca:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80109ce:	fb12 f203 	smulbb	r2, r2, r3
                    px_opa = g.bpp == 8 ? (uint16_t)((uint16_t)letter_px * opa) >> 8
 80109d2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80109d6:	e7bb      	b.n	8010950 <lv_draw_letter+0x27c>
 80109d8:	0801c5e2 	.word	0x0801c5e2
                } else if(vdb_buf_tmp->full != color.full) {
 80109dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80109de:	8819      	ldrh	r1, [r3, #0]
 80109e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80109e2:	4299      	cmp	r1, r3
 80109e4:	d0d1      	beq.n	801098a <lv_draw_letter+0x2b6>
                    if(px_opa > LV_OPA_MAX)
 80109e6:	2afb      	cmp	r2, #251	; 0xfb
 80109e8:	d904      	bls.n	80109f4 <lv_draw_letter+0x320>
                        *vdb_buf_tmp = color;
 80109ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80109ec:	f8bd 2090 	ldrh.w	r2, [sp, #144]	; 0x90
 80109f0:	801a      	strh	r2, [r3, #0]
 80109f2:	e7ca      	b.n	801098a <lv_draw_letter+0x2b6>
                    else if(px_opa > LV_OPA_MIN) {
 80109f4:	2a10      	cmp	r2, #16
 80109f6:	d9c8      	bls.n	801098a <lv_draw_letter+0x2b6>
                            *vdb_buf_tmp = lv_color_mix(color, *vdb_buf_tmp, px_opa);
 80109f8:	f8bd 0090 	ldrh.w	r0, [sp, #144]	; 0x90
 80109fc:	f7ff fd40 	bl	8010480 <lv_color_mix>
 8010a00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a02:	8018      	strh	r0, [r3, #0]
 8010a04:	e7c1      	b.n	801098a <lv_draw_letter+0x2b6>
 8010a06:	bf00      	nop

08010a08 <lv_draw_map>:
{
 8010a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a0c:	b093      	sub	sp, #76	; 0x4c
 8010a0e:	461d      	mov	r5, r3
 8010a10:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
 8010a14:	930d      	str	r3, [sp, #52]	; 0x34
 8010a16:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
 8010a1a:	930a      	str	r3, [sp, #40]	; 0x28
    if(opa < LV_OPA_MIN) return;
 8010a1c:	2d0f      	cmp	r5, #15
{
 8010a1e:	f89d 307c 	ldrb.w	r3, [sp, #124]	; 0x7c
 8010a22:	9308      	str	r3, [sp, #32]
 8010a24:	4607      	mov	r7, r0
 8010a26:	4614      	mov	r4, r2
    if(opa < LV_OPA_MIN) return;
 8010a28:	d979      	bls.n	8010b1e <lv_draw_map+0x116>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 8010a2a:	2dfc      	cmp	r5, #252	; 0xfc
    union_ok = lv_area_intersect(&masked_a, cords_p, mask_p);
 8010a2c:	460a      	mov	r2, r1
 8010a2e:	4601      	mov	r1, r0
 8010a30:	a810      	add	r0, sp, #64	; 0x40
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 8010a32:	bf28      	it	cs
 8010a34:	25ff      	movcs	r5, #255	; 0xff
    union_ok = lv_area_intersect(&masked_a, cords_p, mask_p);
 8010a36:	f003 fada 	bl	8013fee <lv_area_intersect>
    if(union_ok == false) return;
 8010a3a:	2800      	cmp	r0, #0
 8010a3c:	d06f      	beq.n	8010b1e <lv_draw_map+0x116>
    uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
 8010a3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a40:	88be      	ldrh	r6, [r7, #4]
 8010a42:	f9b7 2000 	ldrsh.w	r2, [r7]
    if(cords_p->y1 < masked_a.y1) {
 8010a46:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
    uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	bf0c      	ite	eq
 8010a4e:	2302      	moveq	r3, #2
 8010a50:	2303      	movne	r3, #3
 8010a52:	9306      	str	r3, [sp, #24]
    if(cords_p->y1 < masked_a.y1) {
 8010a54:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8010a58:	3601      	adds	r6, #1
 8010a5a:	4299      	cmp	r1, r3
 8010a5c:	eba6 0602 	sub.w	r6, r6, r2
        map_p += (uint32_t)map_width * ((masked_a.y1 - cords_p->y1)) * px_size_byte;
 8010a60:	bfb8      	it	lt
 8010a62:	1a5b      	sublt	r3, r3, r1
 8010a64:	b236      	sxth	r6, r6
 8010a66:	bfbe      	ittt	lt
 8010a68:	9906      	ldrlt	r1, [sp, #24]
 8010a6a:	4373      	mullt	r3, r6
 8010a6c:	fb01 4403 	mlalt	r4, r1, r3, r4
    if(cords_p->x1 < masked_a.x1) {
 8010a70:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8010a74:	4293      	cmp	r3, r2
        map_p += (masked_a.x1 - cords_p->x1) * px_size_byte;
 8010a76:	bfc2      	ittt	gt
 8010a78:	1a9a      	subgt	r2, r3, r2
 8010a7a:	9b06      	ldrgt	r3, [sp, #24]
 8010a7c:	fb03 4402 	mlagt	r4, r3, r2, r4
    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
 8010a80:	f7fe ff52 	bl	800f928 <lv_refr_get_disp_refreshing>
 8010a84:	4680      	mov	r8, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8010a86:	f003 f917 	bl	8013cb8 <lv_disp_get_buf>
    masked_a.x2 = masked_a.x2 - vdb->area.x1;
 8010a8a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
    masked_a.x1 = masked_a.x1 - vdb->area.x1;
 8010a8e:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
    masked_a.y2 = masked_a.y2 - vdb->area.y1;
 8010a92:	f8bd 7046 	ldrh.w	r7, [sp, #70]	; 0x46
    masked_a.y1 = masked_a.y1 - vdb->area.y1;
 8010a96:	f8bd a042 	ldrh.w	sl, [sp, #66]	; 0x42
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8010a9a:	4681      	mov	r9, r0
    masked_a.x1 = masked_a.x1 - vdb->area.x1;
 8010a9c:	8a00      	ldrh	r0, [r0, #16]
    masked_a.y1 = masked_a.y1 - vdb->area.y1;
 8010a9e:	f8b9 e012 	ldrh.w	lr, [r9, #18]
    masked_a.x2 = masked_a.x2 - vdb->area.x1;
 8010aa2:	1a1b      	subs	r3, r3, r0
    masked_a.x1 = masked_a.x1 - vdb->area.x1;
 8010aa4:	1a12      	subs	r2, r2, r0
    masked_a.x2 = masked_a.x2 - vdb->area.x1;
 8010aa6:	b29b      	uxth	r3, r3
    masked_a.x1 = masked_a.x1 - vdb->area.x1;
 8010aa8:	b292      	uxth	r2, r2
    masked_a.y2 = masked_a.y2 - vdb->area.y1;
 8010aaa:	eba7 070e 	sub.w	r7, r7, lr
    masked_a.x2 = masked_a.x2 - vdb->area.x1;
 8010aae:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 8010ab2:	3301      	adds	r3, #1
    masked_a.x1 = masked_a.x1 - vdb->area.x1;
 8010ab4:	b211      	sxth	r1, r2
    masked_a.y2 = masked_a.y2 - vdb->area.y1;
 8010ab6:	f8ad 7046 	strh.w	r7, [sp, #70]	; 0x46
 8010aba:	1a9a      	subs	r2, r3, r2
 8010abc:	f8b9 7014 	ldrh.w	r7, [r9, #20]
    masked_a.x1 = masked_a.x1 - vdb->area.x1;
 8010ac0:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8010ac4:	b213      	sxth	r3, r2
 8010ac6:	3701      	adds	r7, #1
 8010ac8:	9309      	str	r3, [sp, #36]	; 0x24
 8010aca:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8010ace:	1a38      	subs	r0, r7, r0
    masked_a.y1 = masked_a.y1 - vdb->area.y1;
 8010ad0:	ebaa 0a0e 	sub.w	sl, sl, lr
 8010ad4:	fa0f fa8a 	sxth.w	sl, sl
 8010ad8:	b200      	sxth	r0, r0
 8010ada:	fb13 f306 	smulbb	r3, r3, r6
    lv_color_t * vdb_buf_tmp = vdb->buf_act;
 8010ade:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8010ae2:	930b      	str	r3, [sp, #44]	; 0x2c
    vdb_buf_tmp += (uint32_t)masked_a.x1;             /*Move to the first col*/
 8010ae4:	fb00 110a 	mla	r1, r0, sl, r1
    if(chroma_key == false && alpha_byte == false && opa == LV_OPA_COVER && recolor_opa == LV_OPA_TRANSP) {
 8010ae8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    masked_a.y1 = masked_a.y1 - vdb->area.y1;
 8010aea:	f8ad a042 	strh.w	sl, [sp, #66]	; 0x42
    vdb_buf_tmp += (uint32_t)masked_a.x1;             /*Move to the first col*/
 8010aee:	eb07 0141 	add.w	r1, r7, r1, lsl #1
 8010af2:	9005      	str	r0, [sp, #20]
 8010af4:	9104      	str	r1, [sp, #16]
    if(chroma_key == false && alpha_byte == false && opa == LV_OPA_COVER && recolor_opa == LV_OPA_TRANSP) {
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d149      	bne.n	8010b8e <lv_draw_map+0x186>
 8010afa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d146      	bne.n	8010b8e <lv_draw_map+0x186>
 8010b00:	2dff      	cmp	r5, #255	; 0xff
 8010b02:	d144      	bne.n	8010b8e <lv_draw_map+0x186>
 8010b04:	9b08      	ldr	r3, [sp, #32]
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d141      	bne.n	8010b8e <lv_draw_map+0x186>
        if(disp->driver.set_px_cb) {
 8010b0a:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8010b0e:	bb43      	cbnz	r3, 8010b62 <lv_draw_map+0x15a>
        memcpy(dest, src, length * sizeof(lv_color_t));
 8010b10:	9b09      	ldr	r3, [sp, #36]	; 0x24
                vdb_buf_tmp += vdb_width;          /*Next row on the VDB*/
 8010b12:	0045      	lsls	r5, r0, #1
        memcpy(dest, src, length * sizeof(lv_color_t));
 8010b14:	005e      	lsls	r6, r3, #1
            for(row = masked_a.y1; row <= masked_a.y2; row++) {
 8010b16:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 8010b1a:	4553      	cmp	r3, sl
 8010b1c:	da28      	bge.n	8010b70 <lv_draw_map+0x168>
}
 8010b1e:	b013      	add	sp, #76	; 0x4c
 8010b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, col + masked_a.x1, row,
 8010b24:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
                    lv_color_t px_color = *((lv_color_t *)&map_p[(uint32_t)col * px_size_byte]);
 8010b28:	f8bb 2000 	ldrh.w	r2, [fp]
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, col + masked_a.x1, row,
 8010b2c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8010b30:	9502      	str	r5, [sp, #8]
 8010b32:	f8cd a000 	str.w	sl, [sp]
 8010b36:	443b      	add	r3, r7
 8010b38:	b21b      	sxth	r3, r3
 8010b3a:	f8d8 6014 	ldr.w	r6, [r8, #20]
 8010b3e:	9a05      	ldr	r2, [sp, #20]
 8010b40:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8010b44:	4640      	mov	r0, r8
 8010b46:	47b0      	blx	r6
 8010b48:	9b06      	ldr	r3, [sp, #24]
 8010b4a:	3701      	adds	r7, #1
 8010b4c:	449b      	add	fp, r3
                for(col = 0; col < map_useful_w; col++) {
 8010b4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010b50:	b23b      	sxth	r3, r7
 8010b52:	429a      	cmp	r2, r3
 8010b54:	dce6      	bgt.n	8010b24 <lv_draw_map+0x11c>
                map_p += map_width * px_size_byte; /*Next row on the map*/
 8010b56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010b58:	f10a 0a01 	add.w	sl, sl, #1
 8010b5c:	441c      	add	r4, r3
 8010b5e:	fa0f fa8a 	sxth.w	sl, sl
            for(row = masked_a.y1; row <= masked_a.y2; row++) {
 8010b62:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 8010b66:	4553      	cmp	r3, sl
 8010b68:	dbd9      	blt.n	8010b1e <lv_draw_map+0x116>
 8010b6a:	46a3      	mov	fp, r4
 8010b6c:	2700      	movs	r7, #0
 8010b6e:	e7ee      	b.n	8010b4e <lv_draw_map+0x146>
        memcpy(dest, src, length * sizeof(lv_color_t));
 8010b70:	4621      	mov	r1, r4
 8010b72:	4632      	mov	r2, r6
 8010b74:	9804      	ldr	r0, [sp, #16]
 8010b76:	f008 ffa1 	bl	8019abc <memcpy>
                map_p += map_width * px_size_byte; /*Next row on the map*/
 8010b7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010b7c:	441c      	add	r4, r3
                vdb_buf_tmp += vdb_width;          /*Next row on the VDB*/
 8010b7e:	9b04      	ldr	r3, [sp, #16]
 8010b80:	f10a 0a01 	add.w	sl, sl, #1
 8010b84:	442b      	add	r3, r5
 8010b86:	9304      	str	r3, [sp, #16]
 8010b88:	fa0f fa8a 	sxth.w	sl, sl
 8010b8c:	e7c3      	b.n	8010b16 <lv_draw_map+0x10e>
        lv_color_t last_img_px  = LV_COLOR_BLACK;
 8010b8e:	f04f 0300 	mov.w	r3, #0
        lv_color_t recolored_px = lv_color_mix(recolor, last_img_px, recolor_opa);
 8010b92:	4619      	mov	r1, r3
 8010b94:	9a08      	ldr	r2, [sp, #32]
 8010b96:	f8bd 0078 	ldrh.w	r0, [sp, #120]	; 0x78
        lv_color_t last_img_px  = LV_COLOR_BLACK;
 8010b9a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
        lv_color_t recolored_px = lv_color_mix(recolor, last_img_px, recolor_opa);
 8010b9e:	f7ff fc6f 	bl	8010480 <lv_color_mix>
        for(row = masked_a.y1; row <= masked_a.y2; row++) {
 8010ba2:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8010ba6:	9307      	str	r3, [sp, #28]
            vdb_buf_tmp += vdb_width;          /*Next row on the VDB*/
 8010ba8:	9b05      	ldr	r3, [sp, #20]
        lv_color_t recolored_px = lv_color_mix(recolor, last_img_px, recolor_opa);
 8010baa:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
            vdb_buf_tmp += vdb_width;          /*Next row on the VDB*/
 8010bae:	005b      	lsls	r3, r3, #1
 8010bb0:	930e      	str	r3, [sp, #56]	; 0x38
        for(row = masked_a.y1; row <= masked_a.y2; row++) {
 8010bb2:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 8010bb6:	9a07      	ldr	r2, [sp, #28]
 8010bb8:	4293      	cmp	r3, r2
 8010bba:	dbb0      	blt.n	8010b1e <lv_draw_map+0x116>
 8010bbc:	9e04      	ldr	r6, [sp, #16]
 8010bbe:	46a2      	mov	sl, r4
 8010bc0:	f04f 0b00 	mov.w	fp, #0
 8010bc4:	e04f      	b.n	8010c66 <lv_draw_map+0x25e>
                if(alpha_byte) {
 8010bc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d03e      	beq.n	8010c4a <lv_draw_map+0x242>
                    px_color.full = px_color_p[0] + (px_color_p[1] << 8);
 8010bcc:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8010bd0:	f89a 0000 	ldrb.w	r0, [sl]
 8010bd4:	eb00 2003 	add.w	r0, r0, r3, lsl #8
                    lv_opa_t px_opa = *(px_color_p + LV_IMG_PX_SIZE_ALPHA_BYTE - 1);
 8010bd8:	f89a 3002 	ldrb.w	r3, [sl, #2]
                    px_color.full = px_color_p[0] + (px_color_p[1] << 8);
 8010bdc:	b280      	uxth	r0, r0
                    if(px_opa == LV_OPA_TRANSP)
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d03c      	beq.n	8010c5c <lv_draw_map+0x254>
                    else if(px_opa != LV_OPA_COVER)
 8010be2:	2bff      	cmp	r3, #255	; 0xff
 8010be4:	d033      	beq.n	8010c4e <lv_draw_map+0x246>
                        opa_result = (uint32_t)((uint32_t)px_opa * opa_result) >> 8;
 8010be6:	fb13 f305 	smulbb	r3, r3, r5
 8010bea:	f3c3 2307 	ubfx	r3, r3, #8, #8
                if(chroma_key && px_color.full == disp->driver.color_chroma_key.full) continue;
 8010bee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010bf0:	b11a      	cbz	r2, 8010bfa <lv_draw_map+0x1f2>
 8010bf2:	f8b8 201c 	ldrh.w	r2, [r8, #28]
 8010bf6:	4282      	cmp	r2, r0
 8010bf8:	d030      	beq.n	8010c5c <lv_draw_map+0x254>
                if(recolor_opa != LV_OPA_TRANSP) {
 8010bfa:	9a08      	ldr	r2, [sp, #32]
 8010bfc:	2a00      	cmp	r2, #0
 8010bfe:	d049      	beq.n	8010c94 <lv_draw_map+0x28c>
                    if(last_img_px.full != px_color.full) { /*Minor acceleration: calculate only for
 8010c00:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8010c04:	4282      	cmp	r2, r0
 8010c06:	d00b      	beq.n	8010c20 <lv_draw_map+0x218>
                        last_img_px  = px_color;
 8010c08:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
                        recolored_px = lv_color_mix(recolor, last_img_px, recolor_opa);
 8010c0c:	4601      	mov	r1, r0
 8010c0e:	9a08      	ldr	r2, [sp, #32]
 8010c10:	f8bd 0078 	ldrh.w	r0, [sp, #120]	; 0x78
 8010c14:	930f      	str	r3, [sp, #60]	; 0x3c
 8010c16:	f7ff fc33 	bl	8010480 <lv_color_mix>
 8010c1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010c1c:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
                    if(disp->driver.set_px_cb) {
 8010c20:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8010c24:	4617      	mov	r7, r2
 8010c26:	b1a2      	cbz	r2, 8010c52 <lv_draw_map+0x24a>
                        disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, col + masked_a.x1,
 8010c28:	9302      	str	r3, [sp, #8]
 8010c2a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8010c2e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8010c32:	f8ad 3004 	strh.w	r3, [sp, #4]
 8010c36:	9b07      	ldr	r3, [sp, #28]
 8010c38:	9300      	str	r3, [sp, #0]
 8010c3a:	445a      	add	r2, fp
 8010c3c:	b213      	sxth	r3, r2
 8010c3e:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8010c42:	9a05      	ldr	r2, [sp, #20]
                        disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, col + masked_a.x1,
 8010c44:	4640      	mov	r0, r8
 8010c46:	47b8      	blx	r7
 8010c48:	e008      	b.n	8010c5c <lv_draw_map+0x254>
                    px_color = *((lv_color_t *)px_color_p);
 8010c4a:	f8ba 0000 	ldrh.w	r0, [sl]
 8010c4e:	462b      	mov	r3, r5
 8010c50:	e7cd      	b.n	8010bee <lv_draw_map+0x1e6>
                        if(opa_result == LV_OPA_COVER)
 8010c52:	2bff      	cmp	r3, #255	; 0xff
 8010c54:	d117      	bne.n	8010c86 <lv_draw_map+0x27e>
                            vdb_buf_tmp[col].full = recolored_px.full;
 8010c56:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8010c5a:	8033      	strh	r3, [r6, #0]
 8010c5c:	9b06      	ldr	r3, [sp, #24]
 8010c5e:	f10b 0b01 	add.w	fp, fp, #1
 8010c62:	3602      	adds	r6, #2
 8010c64:	449a      	add	sl, r3
            for(col = 0; col < map_useful_w; col++) {
 8010c66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010c68:	fa0f f38b 	sxth.w	r3, fp
 8010c6c:	4293      	cmp	r3, r2
 8010c6e:	dbaa      	blt.n	8010bc6 <lv_draw_map+0x1be>
            map_p += map_width * px_size_byte; /*Next row on the map*/
 8010c70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            vdb_buf_tmp += vdb_width;          /*Next row on the VDB*/
 8010c72:	9a04      	ldr	r2, [sp, #16]
            map_p += map_width * px_size_byte; /*Next row on the map*/
 8010c74:	441c      	add	r4, r3
            vdb_buf_tmp += vdb_width;          /*Next row on the VDB*/
 8010c76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010c78:	441a      	add	r2, r3
 8010c7a:	9b07      	ldr	r3, [sp, #28]
 8010c7c:	9204      	str	r2, [sp, #16]
 8010c7e:	3301      	adds	r3, #1
 8010c80:	b21b      	sxth	r3, r3
 8010c82:	9307      	str	r3, [sp, #28]
 8010c84:	e795      	b.n	8010bb2 <lv_draw_map+0x1aa>
                            vdb_buf_tmp[col] = lv_color_mix(recolored_px, vdb_buf_tmp[col], opa_result);
 8010c86:	8831      	ldrh	r1, [r6, #0]
 8010c88:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 8010c8c:	461a      	mov	r2, r3
                                vdb_buf_tmp[col] = lv_color_mix(px_color, vdb_buf_tmp[col], opa_result);
 8010c8e:	f7ff fbf7 	bl	8010480 <lv_color_mix>
 8010c92:	e012      	b.n	8010cba <lv_draw_map+0x2b2>
                    if(disp->driver.set_px_cb) {
 8010c94:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8010c98:	4617      	mov	r7, r2
 8010c9a:	b162      	cbz	r2, 8010cb6 <lv_draw_map+0x2ae>
                        disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, col + masked_a.x1,
 8010c9c:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8010ca0:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8010ca4:	9302      	str	r3, [sp, #8]
 8010ca6:	445a      	add	r2, fp
 8010ca8:	9b07      	ldr	r3, [sp, #28]
 8010caa:	9300      	str	r3, [sp, #0]
 8010cac:	f8ad 0004 	strh.w	r0, [sp, #4]
 8010cb0:	b213      	sxth	r3, r2
 8010cb2:	9a05      	ldr	r2, [sp, #20]
 8010cb4:	e7c6      	b.n	8010c44 <lv_draw_map+0x23c>
                        if(opa_result == LV_OPA_COVER)
 8010cb6:	2bff      	cmp	r3, #255	; 0xff
 8010cb8:	d101      	bne.n	8010cbe <lv_draw_map+0x2b6>
                                vdb_buf_tmp[col] = lv_color_mix(px_color, vdb_buf_tmp[col], opa_result);
 8010cba:	8030      	strh	r0, [r6, #0]
 8010cbc:	e7ce      	b.n	8010c5c <lv_draw_map+0x254>
 8010cbe:	461a      	mov	r2, r3
 8010cc0:	8831      	ldrh	r1, [r6, #0]
 8010cc2:	e7e4      	b.n	8010c8e <lv_draw_map+0x286>

08010cc4 <lv_img_color_format_get_px_size>:
 * Get the pixel size of a color format in bits
 * @param cf a color format (`LV_IMG_CF_...`)
 * @return the pixel size in bits
 */
uint8_t lv_img_color_format_get_px_size(lv_img_cf_t cf)
{
 8010cc4:	3804      	subs	r0, #4
 8010cc6:	b2c0      	uxtb	r0, r0
 8010cc8:	280a      	cmp	r0, #10
 8010cca:	bf9a      	itte	ls
 8010ccc:	4b01      	ldrls	r3, [pc, #4]	; (8010cd4 <lv_img_color_format_get_px_size+0x10>)
 8010cce:	5c18      	ldrbls	r0, [r3, r0]
 8010cd0:	2000      	movhi	r0, #0
        case LV_IMG_CF_ALPHA_8BIT: px_size = 8; break;
        default: px_size = 0; break;
    }

    return px_size;
}
 8010cd2:	4770      	bx	lr
 8010cd4:	080ec38c 	.word	0x080ec38c

08010cd8 <lv_img_color_format_is_chroma_keyed>:
 * Check if a color format is chroma keyed or not
 * @param cf a color format (`LV_IMG_CF_...`)
 * @return true: chroma keyed; false: not chroma keyed
 */
bool lv_img_color_format_is_chroma_keyed(lv_img_cf_t cf)
{
 8010cd8:	280a      	cmp	r0, #10
 8010cda:	d808      	bhi.n	8010cee <lv_img_color_format_is_chroma_keyed+0x16>
 8010cdc:	2301      	movs	r3, #1
 8010cde:	fa03 f000 	lsl.w	r0, r3, r0
 8010ce2:	f410 6ff9 	tst.w	r0, #1992	; 0x7c8
 8010ce6:	bf14      	ite	ne
 8010ce8:	4618      	movne	r0, r3
 8010cea:	2000      	moveq	r0, #0
 8010cec:	4770      	bx	lr
        case LV_IMG_CF_RAW_CHROMA_KEYED:
        case LV_IMG_CF_INDEXED_1BIT:
        case LV_IMG_CF_INDEXED_2BIT:
        case LV_IMG_CF_INDEXED_4BIT:
        case LV_IMG_CF_INDEXED_8BIT: is_chroma_keyed = true; break;
        default: is_chroma_keyed = false; break;
 8010cee:	2000      	movs	r0, #0
    }

    return is_chroma_keyed;
}
 8010cf0:	4770      	bx	lr

08010cf2 <lv_img_color_format_has_alpha>:
 * Check if a color format has alpha channel or not
 * @param cf a color format (`LV_IMG_CF_...`)
 * @return true: has alpha channel; false: doesn't have alpha channel
 */
bool lv_img_color_format_has_alpha(lv_img_cf_t cf)
{
 8010cf2:	3802      	subs	r0, #2
 8010cf4:	b2c0      	uxtb	r0, r0
 8010cf6:	280c      	cmp	r0, #12
 8010cf8:	d809      	bhi.n	8010d0e <lv_img_color_format_has_alpha+0x1c>
 8010cfa:	2301      	movs	r3, #1
 8010cfc:	fa03 f000 	lsl.w	r0, r3, r0
 8010d00:	f641 6309 	movw	r3, #7689	; 0x1e09
 8010d04:	4218      	tst	r0, r3
 8010d06:	bf14      	ite	ne
 8010d08:	2001      	movne	r0, #1
 8010d0a:	2000      	moveq	r0, #0
 8010d0c:	4770      	bx	lr
        case LV_IMG_CF_RAW_ALPHA:
        case LV_IMG_CF_ALPHA_1BIT:
        case LV_IMG_CF_ALPHA_2BIT:
        case LV_IMG_CF_ALPHA_4BIT:
        case LV_IMG_CF_ALPHA_8BIT: has_alpha = true; break;
        default: has_alpha = false; break;
 8010d0e:	2000      	movs	r0, #0
    }

    return has_alpha;
}
 8010d10:	4770      	bx	lr
	...

08010d14 <lv_draw_img>:
{
 8010d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d18:	b093      	sub	sp, #76	; 0x4c
 8010d1a:	4604      	mov	r4, r0
 8010d1c:	460f      	mov	r7, r1
 8010d1e:	469a      	mov	sl, r3
 8010d20:	f89d 9070 	ldrb.w	r9, [sp, #112]	; 0x70
    if(src == NULL) {
 8010d24:	4615      	mov	r5, r2
 8010d26:	b962      	cbnz	r2, 8010d42 <lv_draw_img+0x2e>
        lv_draw_rect(coords, mask, &lv_style_plain, LV_OPA_COVER);
 8010d28:	23ff      	movs	r3, #255	; 0xff
 8010d2a:	4a65      	ldr	r2, [pc, #404]	; (8010ec0 <lv_draw_img+0x1ac>)
 8010d2c:	f000 fb88 	bl	8011440 <lv_draw_rect>
        lv_draw_label(coords, mask, &lv_style_plain, LV_OPA_COVER, "No\ndata", LV_TXT_FLAG_NONE, NULL, -1, -1, NULL);
 8010d30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010d34:	9505      	str	r5, [sp, #20]
 8010d36:	9304      	str	r3, [sp, #16]
 8010d38:	9303      	str	r3, [sp, #12]
 8010d3a:	9502      	str	r5, [sp, #8]
 8010d3c:	9501      	str	r5, [sp, #4]
        lv_draw_label(coords, mask, &lv_style_plain, LV_OPA_COVER, "No\ndata", LV_TXT_FLAG_NONE, NULL, -1, -1, NULL);
 8010d3e:	4b61      	ldr	r3, [pc, #388]	; (8010ec4 <lv_draw_img+0x1b0>)
 8010d40:	e036      	b.n	8010db0 <lv_draw_img+0x9c>
                                 const lv_style_t * style, lv_opa_t opa_scale)
{

    lv_area_t mask_com; /*Common area of mask and coords*/
    bool union_ok;
    union_ok = lv_area_intersect(&mask_com, mask, coords);
 8010d42:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8010d46:	4602      	mov	r2, r0
 8010d48:	4640      	mov	r0, r8
 8010d4a:	f003 f950 	bl	8013fee <lv_area_intersect>
    if(union_ok == false) {
 8010d4e:	2800      	cmp	r0, #0
 8010d50:	d049      	beq.n	8010de6 <lv_draw_img+0xd2>
 8010d52:	f89a 6033 	ldrb.w	r6, [sl, #51]	; 0x33
        return LV_RES_OK; /*Out of mask. There is nothing to draw so the image is drawn
                             successfully.*/
    }

    lv_opa_t opa =
 8010d56:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8010d5a:	bf18      	it	ne
 8010d5c:	fb06 f609 	mulne.w	r6, r6, r9
        opa_scale == LV_OPA_COVER ? style->image.opa : (uint16_t)((uint16_t)style->image.opa * opa_scale) >> 8;

    lv_img_cache_entry_t * cdsc = lv_img_cache_open(src, style);
 8010d60:	4651      	mov	r1, sl
 8010d62:	4628      	mov	r0, r5
    lv_opa_t opa =
 8010d64:	bf18      	it	ne
 8010d66:	f3c6 2607 	ubfxne	r6, r6, #8, #8
    lv_img_cache_entry_t * cdsc = lv_img_cache_open(src, style);
 8010d6a:	f002 fa71 	bl	8013250 <lv_img_cache_open>

    if(cdsc == NULL) return LV_RES_INV;
 8010d6e:	4681      	mov	r9, r0
 8010d70:	2800      	cmp	r0, #0
 8010d72:	d07a      	beq.n	8010e6a <lv_draw_img+0x156>

    bool chroma_keyed = lv_img_color_format_is_chroma_keyed(cdsc->dec_dsc.header.cf);
 8010d74:	7c02      	ldrb	r2, [r0, #16]
 8010d76:	f002 021f 	and.w	r2, r2, #31
 8010d7a:	4610      	mov	r0, r2
 8010d7c:	f7ff ffac 	bl	8010cd8 <lv_img_color_format_is_chroma_keyed>
 8010d80:	9007      	str	r0, [sp, #28]
    bool alpha_byte   = lv_img_color_format_has_alpha(cdsc->dec_dsc.header.cf);
 8010d82:	4610      	mov	r0, r2
 8010d84:	f7ff ffb5 	bl	8010cf2 <lv_img_color_format_has_alpha>

    if(cdsc->dec_dsc.error_msg != NULL) {
 8010d88:	f8d9 301c 	ldr.w	r3, [r9, #28]
    bool alpha_byte   = lv_img_color_format_has_alpha(cdsc->dec_dsc.header.cf);
 8010d8c:	9008      	str	r0, [sp, #32]
    if(cdsc->dec_dsc.error_msg != NULL) {
 8010d8e:	b1bb      	cbz	r3, 8010dc0 <lv_draw_img+0xac>
        LV_LOG_WARN("Image draw error");
        lv_draw_rect(coords, mask, &lv_style_plain, LV_OPA_COVER);
 8010d90:	23ff      	movs	r3, #255	; 0xff
 8010d92:	4a4b      	ldr	r2, [pc, #300]	; (8010ec0 <lv_draw_img+0x1ac>)
 8010d94:	4639      	mov	r1, r7
 8010d96:	4620      	mov	r0, r4
 8010d98:	f000 fb52 	bl	8011440 <lv_draw_rect>
        lv_draw_label(coords, mask, &lv_style_plain, LV_OPA_COVER, cdsc->dec_dsc.error_msg, LV_TXT_FLAG_NONE, NULL, -1,
 8010d9c:	2300      	movs	r3, #0
 8010d9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010da2:	9305      	str	r3, [sp, #20]
 8010da4:	9204      	str	r2, [sp, #16]
 8010da6:	9203      	str	r2, [sp, #12]
 8010da8:	9302      	str	r3, [sp, #8]
 8010daa:	9301      	str	r3, [sp, #4]
 8010dac:	f8d9 301c 	ldr.w	r3, [r9, #28]
        lv_draw_label(coords, mask, &lv_style_plain, LV_OPA_COVER, "No\ndata", LV_TXT_FLAG_NONE, NULL, -1, -1, NULL);
 8010db0:	9300      	str	r3, [sp, #0]
 8010db2:	4a43      	ldr	r2, [pc, #268]	; (8010ec0 <lv_draw_img+0x1ac>)
 8010db4:	23ff      	movs	r3, #255	; 0xff
 8010db6:	4639      	mov	r1, r7
 8010db8:	4620      	mov	r0, r4
 8010dba:	f000 f8ab 	bl	8010f14 <lv_draw_label>
        return;
 8010dbe:	e012      	b.n	8010de6 <lv_draw_img+0xd2>
                      -1, NULL);
    }
    /* The decoder open could open the image and gave the entire uncompressed image.
     * Just draw it!*/
    else if(cdsc->dec_dsc.img_data) {
 8010dc0:	f8d9 2014 	ldr.w	r2, [r9, #20]
 8010dc4:	b192      	cbz	r2, 8010dec <lv_draw_img+0xd8>
        lv_draw_map(coords, mask, cdsc->dec_dsc.img_data, opa, chroma_keyed, alpha_byte, style->image.color,
 8010dc6:	f89a 3032 	ldrb.w	r3, [sl, #50]	; 0x32
 8010dca:	9303      	str	r3, [sp, #12]
 8010dcc:	f8ba 3030 	ldrh.w	r3, [sl, #48]	; 0x30
 8010dd0:	f8ad 3008 	strh.w	r3, [sp, #8]
 8010dd4:	9b08      	ldr	r3, [sp, #32]
 8010dd6:	9301      	str	r3, [sp, #4]
 8010dd8:	9b07      	ldr	r3, [sp, #28]
 8010dda:	9300      	str	r3, [sp, #0]
 8010ddc:	4639      	mov	r1, r7
 8010dde:	4633      	mov	r3, r6
 8010de0:	4620      	mov	r0, r4
 8010de2:	f7ff fe11 	bl	8010a08 <lv_draw_map>
}
 8010de6:	b013      	add	sp, #76	; 0x4c
 8010de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return area_p->x2 - area_p->x1 + 1;
 8010dec:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8010df0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8010df4:	920d      	str	r2, [sp, #52]	; 0x34
 8010df6:	3501      	adds	r5, #1
 8010df8:	1aed      	subs	r5, r5, r3
 8010dfa:	b22d      	sxth	r5, r5
    }
    /* The whole uncompressed image is not available. Try to read it line-by-line*/
    else {
        lv_coord_t width = lv_area_get_width(&mask_com);

        uint8_t  * buf = lv_draw_get_buf(lv_area_get_width(&mask_com) * ((LV_COLOR_DEPTH >> 3) + 1));  /*+1 because of the possible alpha byte*/
 8010dfc:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 8010e00:	f7ff fafa 	bl	80103f8 <lv_draw_get_buf>
 8010e04:	9009      	str	r0, [sp, #36]	; 0x24
    memcpy(dest, src, sizeof(lv_area_t));
 8010e06:	e898 0003 	ldmia.w	r8, {r0, r1}
 8010e0a:	ab10      	add	r3, sp, #64	; 0x40
 8010e0c:	e883 0003 	stmia.w	r3, {r0, r1}

        lv_area_t line;
        lv_area_copy(&line, &mask_com);
        lv_area_set_height(&line, 1);
 8010e10:	4618      	mov	r0, r3
 8010e12:	2101      	movs	r1, #1
 8010e14:	930c      	str	r3, [sp, #48]	; 0x30
 8010e16:	f003 f8c9 	bl	8013fac <lv_area_set_height>
        lv_coord_t x = mask_com.x1 - coords->x1;
 8010e1a:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8010e1e:	8820      	ldrh	r0, [r4, #0]
        lv_coord_t y = mask_com.y1 - coords->y1;
 8010e20:	f8bd b03a 	ldrh.w	fp, [sp, #58]	; 0x3a
 8010e24:	9a0d      	ldr	r2, [sp, #52]	; 0x34
        lv_coord_t x = mask_com.x1 - coords->x1;
 8010e26:	1a09      	subs	r1, r1, r0
 8010e28:	b20b      	sxth	r3, r1
        lv_coord_t y = mask_com.y1 - coords->y1;
 8010e2a:	8861      	ldrh	r1, [r4, #2]
        lv_coord_t x = mask_com.x1 - coords->x1;
 8010e2c:	930a      	str	r3, [sp, #40]	; 0x28
        lv_coord_t y = mask_com.y1 - coords->y1;
 8010e2e:	ebab 0101 	sub.w	r1, fp, r1
 8010e32:	b28b      	uxth	r3, r1
 8010e34:	930b      	str	r3, [sp, #44]	; 0x2c
 8010e36:	4690      	mov	r8, r2
 8010e38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        lv_coord_t row;
        lv_res_t read_res;
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 8010e3a:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 8010e3e:	fa1f f388 	uxth.w	r3, r8
 8010e42:	441a      	add	r2, r3
 8010e44:	445b      	add	r3, fp
 8010e46:	b21b      	sxth	r3, r3
 8010e48:	4299      	cmp	r1, r3
 8010e4a:	b212      	sxth	r2, r2
 8010e4c:	dbcb      	blt.n	8010de6 <lv_draw_img+0xd2>
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 8010e4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e50:	9300      	str	r3, [sp, #0]
 8010e52:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010e54:	462b      	mov	r3, r5
 8010e56:	4648      	mov	r0, r9
 8010e58:	f002 fd04 	bl	8013864 <lv_img_decoder_read_line>
            if(read_res != LV_RES_OK) {
 8010e5c:	2801      	cmp	r0, #1
 8010e5e:	f108 0801 	add.w	r8, r8, #1
 8010e62:	d011      	beq.n	8010e88 <lv_draw_img+0x174>
                lv_img_decoder_close(&cdsc->dec_dsc);
 8010e64:	4648      	mov	r0, r9
 8010e66:	f002 fd0d 	bl	8013884 <lv_img_decoder_close>
        lv_draw_rect(coords, mask, &lv_style_plain, LV_OPA_COVER);
 8010e6a:	23ff      	movs	r3, #255	; 0xff
 8010e6c:	4a14      	ldr	r2, [pc, #80]	; (8010ec0 <lv_draw_img+0x1ac>)
 8010e6e:	4639      	mov	r1, r7
 8010e70:	4620      	mov	r0, r4
 8010e72:	f000 fae5 	bl	8011440 <lv_draw_rect>
        lv_draw_label(coords, mask, &lv_style_plain, LV_OPA_COVER, "No\ndata", LV_TXT_FLAG_NONE, NULL, -1, -1, NULL);
 8010e76:	2300      	movs	r3, #0
 8010e78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010e7c:	9305      	str	r3, [sp, #20]
 8010e7e:	9204      	str	r2, [sp, #16]
 8010e80:	9203      	str	r2, [sp, #12]
 8010e82:	9302      	str	r3, [sp, #8]
 8010e84:	9301      	str	r3, [sp, #4]
 8010e86:	e75a      	b.n	8010d3e <lv_draw_img+0x2a>
                LV_LOG_WARN("Image draw can't read the line");
                return LV_RES_INV;
            }
            lv_draw_map(&line, mask, buf, opa, chroma_keyed, alpha_byte, style->image.color, style->image.intense);
 8010e88:	f89a 3032 	ldrb.w	r3, [sl, #50]	; 0x32
 8010e8c:	9303      	str	r3, [sp, #12]
 8010e8e:	f8ba 3030 	ldrh.w	r3, [sl, #48]	; 0x30
 8010e92:	f8ad 3008 	strh.w	r3, [sp, #8]
 8010e96:	9b08      	ldr	r3, [sp, #32]
 8010e98:	9301      	str	r3, [sp, #4]
 8010e9a:	9b07      	ldr	r3, [sp, #28]
 8010e9c:	9300      	str	r3, [sp, #0]
 8010e9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010ea0:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010ea2:	4633      	mov	r3, r6
 8010ea4:	4639      	mov	r1, r7
 8010ea6:	f7ff fdaf 	bl	8010a08 <lv_draw_map>
            line.y1++;
 8010eaa:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8010eae:	3301      	adds	r3, #1
 8010eb0:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            line.y2++;
 8010eb4:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 8010eb8:	3301      	adds	r3, #1
 8010eba:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
 8010ebe:	e7bb      	b.n	8010e38 <lv_draw_img+0x124>
 8010ec0:	2000c4a4 	.word	0x2000c4a4
 8010ec4:	080ec397 	.word	0x080ec397

08010ec8 <lv_img_src_get_type>:
    if(src == NULL) return img_src_type;
 8010ec8:	b150      	cbz	r0, 8010ee0 <lv_img_src_get_type+0x18>
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 8010eca:	7803      	ldrb	r3, [r0, #0]
 8010ecc:	f1a3 0220 	sub.w	r2, r3, #32
 8010ed0:	2a5f      	cmp	r2, #95	; 0x5f
 8010ed2:	d907      	bls.n	8010ee4 <lv_img_src_get_type+0x1c>
    } else if(u8_p[0] >= 0x80) {
 8010ed4:	f013 0f80 	tst.w	r3, #128	; 0x80
        img_src_type = LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is design to the first byte < 0x20*/
 8010ed8:	bf14      	ite	ne
 8010eda:	2002      	movne	r0, #2
 8010edc:	2000      	moveq	r0, #0
 8010ede:	4770      	bx	lr
    if(src == NULL) return img_src_type;
 8010ee0:	2003      	movs	r0, #3
 8010ee2:	4770      	bx	lr
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
 8010ee4:	2001      	movs	r0, #1
}
 8010ee6:	4770      	bx	lr

08010ee8 <hex_char_to_num>:
 */
static uint8_t hex_char_to_num(char hex)
{
    uint8_t result = 0;

    if(hex >= '0' && hex <= '9') {
 8010ee8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010eec:	b2db      	uxtb	r3, r3
 8010eee:	2b09      	cmp	r3, #9
 8010ef0:	d90a      	bls.n	8010f08 <hex_char_to_num+0x20>
        result = hex - '0';
    } else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
 8010ef2:	2860      	cmp	r0, #96	; 0x60
 8010ef4:	bf84      	itt	hi
 8010ef6:	3820      	subhi	r0, #32
 8010ef8:	b2c0      	uxtbhi	r0, r0
 8010efa:	3841      	subs	r0, #65	; 0x41
 8010efc:	b2c0      	uxtb	r0, r0
 8010efe:	2805      	cmp	r0, #5
 8010f00:	d804      	bhi.n	8010f0c <hex_char_to_num+0x24>
 8010f02:	4b03      	ldr	r3, [pc, #12]	; (8010f10 <hex_char_to_num+0x28>)
 8010f04:	5c18      	ldrb	r0, [r3, r0]
 8010f06:	4770      	bx	lr
 8010f08:	4618      	mov	r0, r3
 8010f0a:	4770      	bx	lr
 8010f0c:	2000      	movs	r0, #0
            default: result = 0; break;
        }
    }

    return result;
}
 8010f0e:	4770      	bx	lr
 8010f10:	080ec39f 	.word	0x080ec39f

08010f14 <lv_draw_label>:
{
 8010f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f18:	b0a7      	sub	sp, #156	; 0x9c
 8010f1a:	4605      	mov	r5, r0
 8010f1c:	f89d b0c4 	ldrb.w	fp, [sp, #196]	; 0xc4
 8010f20:	9309      	str	r3, [sp, #36]	; 0x24
 8010f22:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
 8010f26:	930d      	str	r3, [sp, #52]	; 0x34
    if((flag & LV_TXT_FLAG_EXPAND) == 0) {
 8010f28:	f01b 0f02 	tst.w	fp, #2
{
 8010f2c:	f8bd 30d0 	ldrh.w	r3, [sp, #208]	; 0xd0
 8010f30:	9107      	str	r1, [sp, #28]
 8010f32:	4614      	mov	r4, r2
 8010f34:	930e      	str	r3, [sp, #56]	; 0x38
 8010f36:	f8dd 80d4 	ldr.w	r8, [sp, #212]	; 0xd4
    const lv_font_t * font = style->text.font;
 8010f3a:	f8d2 a024 	ldr.w	sl, [r2, #36]	; 0x24
    if((flag & LV_TXT_FLAG_EXPAND) == 0) {
 8010f3e:	f040 8094 	bne.w	801106a <lv_draw_label+0x156>
    return area_p->x2 - area_p->x1 + 1;
 8010f42:	8883      	ldrh	r3, [r0, #4]
 8010f44:	8802      	ldrh	r2, [r0, #0]
 8010f46:	3301      	adds	r3, #1
 8010f48:	1a9b      	subs	r3, r3, r2
 8010f4a:	b21b      	sxth	r3, r3
    lv_coord_t line_height = lv_font_get_line_height(font) + style->text.line_space;
 8010f4c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
        w = p.x;
 8010f4e:	9304      	str	r3, [sp, #16]
    lv_coord_t line_height = lv_font_get_line_height(font) + style->text.line_space;
 8010f50:	f89a 3008 	ldrb.w	r3, [sl, #8]
 8010f54:	4413      	add	r3, r2
 8010f56:	b29b      	uxth	r3, r3
 8010f58:	9305      	str	r3, [sp, #20]
 8010f5a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8010f5e:	9306      	str	r3, [sp, #24]
    pos.x = coords->x1;
 8010f60:	882b      	ldrh	r3, [r5, #0]
 8010f62:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
    if(offset != NULL) {
 8010f66:	9b32      	ldr	r3, [sp, #200]	; 0xc8
    pos.y = coords->y1;
 8010f68:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8010f6c:	f8ad 204e 	strh.w	r2, [sp, #78]	; 0x4e
    if(offset != NULL) {
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	f000 81f1 	beq.w	8011358 <lv_draw_label+0x444>
        x_ofs = offset->x;
 8010f76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010f7a:	930a      	str	r3, [sp, #40]	; 0x28
        y_ofs = offset->y;
 8010f7c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8010f7e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
        pos.y += y_ofs;
 8010f82:	18d1      	adds	r1, r2, r3
 8010f84:	f8ad 104e 	strh.w	r1, [sp, #78]	; 0x4e
    if(hint && y_ofs == 0) {
 8010f88:	f1b8 0f00 	cmp.w	r8, #0
 8010f8c:	f000 81ea 	beq.w	8011364 <lv_draw_label+0x450>
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	f040 81e7 	bne.w	8011364 <lv_draw_label+0x450>
        if(LV_MATH_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
 8010f96:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010f9a:	1a9b      	subs	r3, r3, r2
 8010f9c:	9a06      	ldr	r2, [sp, #24]
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	bfb8      	it	lt
 8010fa2:	425b      	neglt	r3, r3
 8010fa4:	f5c2 7200 	rsb	r2, r2, #512	; 0x200
 8010fa8:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
            hint->line_start = -1;
 8010fac:	bfc4      	itt	gt
 8010fae:	f04f 33ff 	movgt.w	r3, #4294967295	; 0xffffffff
 8010fb2:	f8c8 3000 	strgt.w	r3, [r8]
        last_line_start = hint->line_start;
 8010fb6:	f8d8 7000 	ldr.w	r7, [r8]
    if(hint && last_line_start >= 0) {
 8010fba:	2f00      	cmp	r7, #0
 8010fbc:	f2c0 81d2 	blt.w	8011364 <lv_draw_label+0x450>
        pos.y += hint->y;
 8010fc0:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
 8010fc4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010fc8:	4413      	add	r3, r2
 8010fca:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
    uint32_t line_end = line_start + lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 8010fce:	9830      	ldr	r0, [sp, #192]	; 0xc0
 8010fd0:	f9b4 2028 	ldrsh.w	r2, [r4, #40]	; 0x28
 8010fd4:	f8cd b000 	str.w	fp, [sp]
 8010fd8:	9b04      	ldr	r3, [sp, #16]
 8010fda:	4651      	mov	r1, sl
 8010fdc:	4438      	add	r0, r7
 8010fde:	f003 fd41 	bl	8014a64 <lv_txt_get_next_line>
 8010fe2:	19c6      	adds	r6, r0, r7
    while(pos.y + line_height < mask->y1) {
 8010fe4:	9a06      	ldr	r2, [sp, #24]
 8010fe6:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 8010fea:	4413      	add	r3, r2
 8010fec:	9a07      	ldr	r2, [sp, #28]
 8010fee:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8010ff2:	4293      	cmp	r3, r2
 8010ff4:	db4e      	blt.n	8011094 <lv_draw_label+0x180>
    if(flag & LV_TXT_FLAG_CENTER) {
 8010ff6:	f01b 0304 	ands.w	r3, fp, #4
 8010ffa:	930f      	str	r3, [sp, #60]	; 0x3c
 8010ffc:	d078      	beq.n	80110f0 <lv_draw_label+0x1dc>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, style->text.letter_space, flag);
 8010ffe:	9830      	ldr	r0, [sp, #192]	; 0xc0
 8011000:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 8011004:	f8cd b000 	str.w	fp, [sp]
 8011008:	1bf1      	subs	r1, r6, r7
 801100a:	4652      	mov	r2, sl
 801100c:	b289      	uxth	r1, r1
 801100e:	4438      	add	r0, r7
 8011010:	f003 fdb0 	bl	8014b74 <lv_txt_get_width>
 8011014:	88ab      	ldrh	r3, [r5, #4]
 8011016:	882a      	ldrh	r2, [r5, #0]
 8011018:	3301      	adds	r3, #1
 801101a:	1a9b      	subs	r3, r3, r2
        pos.x += (lv_area_get_width(coords) - line_width) / 2;
 801101c:	b21b      	sxth	r3, r3
 801101e:	1a18      	subs	r0, r3, r0
 8011020:	2302      	movs	r3, #2
 8011022:	fb90 f0f3 	sdiv	r0, r0, r3
        pos.x += lv_area_get_width(coords) - line_width;
 8011026:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801102a:	4418      	add	r0, r3
 801102c:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->text.opa : (uint16_t)((uint16_t)style->text.opa * opa_scale) >> 8;
 8011030:	9b09      	ldr	r3, [sp, #36]	; 0x24
    lv_style_copy(&sel_style, &lv_style_plain_color);
 8011032:	49bb      	ldr	r1, [pc, #748]	; (8011320 <lv_draw_label+0x40c>)
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->text.opa : (uint16_t)((uint16_t)style->text.opa * opa_scale) >> 8;
 8011034:	2bff      	cmp	r3, #255	; 0xff
 8011036:	bf18      	it	ne
 8011038:	9a09      	ldrne	r2, [sp, #36]	; 0x24
 801103a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801103e:	bf1c      	itt	ne
 8011040:	4353      	mulne	r3, r2
 8011042:	f3c3 2307 	ubfxne	r3, r3, #8, #8
    lv_style_copy(&sel_style, &lv_style_plain_color);
 8011046:	a817      	add	r0, sp, #92	; 0x5c
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->text.opa : (uint16_t)((uint16_t)style->text.opa * opa_scale) >> 8;
 8011048:	9309      	str	r3, [sp, #36]	; 0x24
    lv_style_copy(&sel_style, &lv_style_plain_color);
 801104a:	f7fe fe17 	bl	800fc7c <lv_style_copy>
    sel_style.body.main_color = sel_style.body.grad_color = style->text.sel_color;
 801104e:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8011050:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 8011054:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
    uint16_t par_start = 0;
 8011058:	2300      	movs	r3, #0
 801105a:	9308      	str	r3, [sp, #32]
    while(txt[line_start] != '\0') {
 801105c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801105e:	5ddb      	ldrb	r3, [r3, r7]
 8011060:	2b00      	cmp	r3, #0
 8011062:	d15a      	bne.n	801111a <lv_draw_label+0x206>
}
 8011064:	b027      	add	sp, #156	; 0x9c
 8011066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_txt_get_size(&p, txt, style->text.font, style->text.letter_space, style->text.line_space, LV_COORD_MAX,
 801106a:	f9b2 3028 	ldrsh.w	r3, [r2, #40]	; 0x28
 801106e:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8011070:	f8cd b008 	str.w	fp, [sp, #8]
 8011074:	f647 4218 	movw	r2, #31768	; 0x7c18
 8011078:	9201      	str	r2, [sp, #4]
 801107a:	f9b4 202a 	ldrsh.w	r2, [r4, #42]	; 0x2a
 801107e:	9200      	str	r2, [sp, #0]
 8011080:	a817      	add	r0, sp, #92	; 0x5c
 8011082:	4652      	mov	r2, sl
 8011084:	f003 fdbe 	bl	8014c04 <lv_txt_get_size>
        w = p.x;
 8011088:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 801108c:	e75e      	b.n	8010f4c <lv_draw_label+0x38>
    lv_coord_t x_ofs = 0;
 801108e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8011090:	930a      	str	r3, [sp, #40]	; 0x28
 8011092:	e780      	b.n	8010f96 <lv_draw_label+0x82>
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 8011094:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8011096:	f9b4 2028 	ldrsh.w	r2, [r4, #40]	; 0x28
 801109a:	f8cd b000 	str.w	fp, [sp]
 801109e:	4433      	add	r3, r6
 80110a0:	9308      	str	r3, [sp, #32]
 80110a2:	4651      	mov	r1, sl
 80110a4:	9b04      	ldr	r3, [sp, #16]
 80110a6:	9808      	ldr	r0, [sp, #32]
 80110a8:	f003 fcdc 	bl	8014a64 <lv_txt_get_next_line>
        pos.y += line_height;
 80110ac:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 80110b0:	9a05      	ldr	r2, [sp, #20]
 80110b2:	4413      	add	r3, r2
 80110b4:	b21b      	sxth	r3, r3
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 80110b6:	4430      	add	r0, r6
        pos.y += line_height;
 80110b8:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
 80110bc:	f1b8 0f00 	cmp.w	r8, #0
 80110c0:	d00f      	beq.n	80110e2 <lv_draw_label+0x1ce>
 80110c2:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 80110c6:	db0c      	blt.n	80110e2 <lv_draw_label+0x1ce>
 80110c8:	f8d8 2000 	ldr.w	r2, [r8]
 80110cc:	2a00      	cmp	r2, #0
 80110ce:	da08      	bge.n	80110e2 <lv_draw_label+0x1ce>
            hint->y          = pos.y - coords->y1;
 80110d0:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
            hint->line_start = line_start;
 80110d4:	f8c8 6000 	str.w	r6, [r8]
            hint->y          = pos.y - coords->y1;
 80110d8:	1a9b      	subs	r3, r3, r2
 80110da:	f8c8 3004 	str.w	r3, [r8, #4]
            hint->coord_y    = coords->y1;
 80110de:	f8c8 2008 	str.w	r2, [r8, #8]
        if(txt[line_start] == '\0') return;
 80110e2:	9b08      	ldr	r3, [sp, #32]
 80110e4:	781b      	ldrb	r3, [r3, #0]
 80110e6:	4637      	mov	r7, r6
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d0bb      	beq.n	8011064 <lv_draw_label+0x150>
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 80110ec:	4606      	mov	r6, r0
 80110ee:	e779      	b.n	8010fe4 <lv_draw_label+0xd0>
    else if(flag & LV_TXT_FLAG_RIGHT) {
 80110f0:	f01b 0f08 	tst.w	fp, #8
 80110f4:	d09c      	beq.n	8011030 <lv_draw_label+0x11c>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, style->text.letter_space, flag);
 80110f6:	9830      	ldr	r0, [sp, #192]	; 0xc0
 80110f8:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 80110fc:	f8cd b000 	str.w	fp, [sp]
 8011100:	1bf1      	subs	r1, r6, r7
 8011102:	4652      	mov	r2, sl
 8011104:	b289      	uxth	r1, r1
 8011106:	4438      	add	r0, r7
 8011108:	f003 fd34 	bl	8014b74 <lv_txt_get_width>
 801110c:	88ab      	ldrh	r3, [r5, #4]
 801110e:	882a      	ldrh	r2, [r5, #0]
 8011110:	3301      	adds	r3, #1
 8011112:	1a9b      	subs	r3, r3, r2
        pos.x += lv_area_get_width(coords) - line_width;
 8011114:	b21b      	sxth	r3, r3
 8011116:	1a18      	subs	r0, r3, r0
 8011118:	e785      	b.n	8011026 <lv_draw_label+0x112>
        if(offset != NULL) {
 801111a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801111c:	b12b      	cbz	r3, 801112a <lv_draw_label+0x216>
            pos.x += x_ofs;
 801111e:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8011122:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011124:	4413      	add	r3, r2
 8011126:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 801112a:	f00b 0301 	and.w	r3, fp, #1
        i         = line_start;
 801112e:	9714      	str	r7, [sp, #80]	; 0x50
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8011130:	9311      	str	r3, [sp, #68]	; 0x44
        cmd_state = CMD_STATE_WAIT;
 8011132:	2700      	movs	r7, #0
        while(i < line_end) {
 8011134:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011136:	429e      	cmp	r6, r3
 8011138:	d83a      	bhi.n	80111b0 <lv_draw_label+0x29c>
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 801113a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801113c:	f9b4 2028 	ldrsh.w	r2, [r4, #40]	; 0x28
 8011140:	f8cd b000 	str.w	fp, [sp]
 8011144:	199f      	adds	r7, r3, r6
 8011146:	4651      	mov	r1, sl
 8011148:	9b04      	ldr	r3, [sp, #16]
 801114a:	4638      	mov	r0, r7
 801114c:	f003 fc8a 	bl	8014a64 <lv_txt_get_next_line>
        pos.x = coords->x1;
 8011150:	882b      	ldrh	r3, [r5, #0]
 8011152:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        if(flag & LV_TXT_FLAG_CENTER) {
 8011156:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 8011158:	4601      	mov	r1, r0
 801115a:	eb00 0806 	add.w	r8, r0, r6
        if(flag & LV_TXT_FLAG_CENTER) {
 801115e:	2b00      	cmp	r3, #0
 8011160:	f000 80e7 	beq.w	8011332 <lv_draw_label+0x41e>
            line_width =
 8011164:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 8011168:	f8cd b000 	str.w	fp, [sp]
 801116c:	4652      	mov	r2, sl
 801116e:	4638      	mov	r0, r7
 8011170:	f003 fd00 	bl	8014b74 <lv_txt_get_width>
 8011174:	88ab      	ldrh	r3, [r5, #4]
 8011176:	882a      	ldrh	r2, [r5, #0]
 8011178:	3301      	adds	r3, #1
 801117a:	1a9b      	subs	r3, r3, r2
            pos.x += (lv_area_get_width(coords) - line_width) / 2;
 801117c:	b21b      	sxth	r3, r3
 801117e:	1a18      	subs	r0, r3, r0
 8011180:	2302      	movs	r3, #2
 8011182:	fb90 f0f3 	sdiv	r0, r0, r3
            pos.x += lv_area_get_width(coords) - line_width;
 8011186:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801118a:	4418      	add	r0, r3
 801118c:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
        pos.y += line_height;
 8011190:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 8011194:	9a05      	ldr	r2, [sp, #20]
 8011196:	4413      	add	r3, r2
        if(pos.y > mask->y2) return;
 8011198:	9a07      	ldr	r2, [sp, #28]
 801119a:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
        pos.y += line_height;
 801119e:	b21b      	sxth	r3, r3
        if(pos.y > mask->y2) return;
 80111a0:	429a      	cmp	r2, r3
        pos.y += line_height;
 80111a2:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
 80111a6:	4637      	mov	r7, r6
        if(pos.y > mask->y2) return;
 80111a8:	f6ff af5c 	blt.w	8011064 <lv_draw_label+0x150>
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 80111ac:	4646      	mov	r6, r8
 80111ae:	e755      	b.n	801105c <lv_draw_label+0x148>
            letter      = lv_txt_encoded_next(txt, &i);
 80111b0:	4b5c      	ldr	r3, [pc, #368]	; (8011324 <lv_draw_label+0x410>)
 80111b2:	9830      	ldr	r0, [sp, #192]	; 0xc0
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	a914      	add	r1, sp, #80	; 0x50
 80111b8:	4798      	blx	r3
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 80111ba:	9a30      	ldr	r2, [sp, #192]	; 0xc0
            letter      = lv_txt_encoded_next(txt, &i);
 80111bc:	9006      	str	r0, [sp, #24]
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 80111be:	4b59      	ldr	r3, [pc, #356]	; (8011324 <lv_draw_label+0x410>)
 80111c0:	9814      	ldr	r0, [sp, #80]	; 0x50
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	4410      	add	r0, r2
 80111c6:	2100      	movs	r1, #0
 80111c8:	4798      	blx	r3
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 80111ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 80111cc:	4602      	mov	r2, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d055      	beq.n	801127e <lv_draw_label+0x36a>
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 80111d2:	9b06      	ldr	r3, [sp, #24]
 80111d4:	2b23      	cmp	r3, #35	; 0x23
 80111d6:	d10c      	bne.n	80111f2 <lv_draw_label+0x2de>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
 80111d8:	b927      	cbnz	r7, 80111e4 <lv_draw_label+0x2d0>
                        par_start = i;
 80111da:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80111de:	9308      	str	r3, [sp, #32]
                        cmd_state = CMD_STATE_PAR;
 80111e0:	2701      	movs	r7, #1
                        continue;
 80111e2:	e7a7      	b.n	8011134 <lv_draw_label+0x220>
                    } else if(cmd_state == CMD_STATE_PAR) { /*Other start char in parameter escaped cmd. char */
 80111e4:	2f01      	cmp	r7, #1
 80111e6:	f000 80bf 	beq.w	8011368 <lv_draw_label+0x454>
                    } else if(cmd_state == CMD_STATE_IN) { /*Command end */
 80111ea:	2f02      	cmp	r7, #2
 80111ec:	d149      	bne.n	8011282 <lv_draw_label+0x36e>
                        cmd_state = CMD_STATE_WAIT;
 80111ee:	2700      	movs	r7, #0
 80111f0:	e7a0      	b.n	8011134 <lv_draw_label+0x220>
                if(cmd_state == CMD_STATE_PAR) {
 80111f2:	2f01      	cmp	r7, #1
 80111f4:	d143      	bne.n	801127e <lv_draw_label+0x36a>
                    if(letter == ' ') {
 80111f6:	9b06      	ldr	r3, [sp, #24]
 80111f8:	2b20      	cmp	r3, #32
 80111fa:	d19b      	bne.n	8011134 <lv_draw_label+0x220>
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
 80111fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80111fe:	9a08      	ldr	r2, [sp, #32]
 8011200:	1a9b      	subs	r3, r3, r2
 8011202:	2b07      	cmp	r3, #7
 8011204:	d139      	bne.n	801127a <lv_draw_label+0x366>
                            memcpy(buf, &txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
 8011206:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8011208:	4413      	add	r3, r2
 801120a:	6818      	ldr	r0, [r3, #0]
 801120c:	9015      	str	r0, [sp, #84]	; 0x54
 801120e:	889b      	ldrh	r3, [r3, #4]
 8011210:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
 8011214:	0e01      	lsrs	r1, r0, #24
 8011216:	0c07      	lsrs	r7, r0, #16
 8011218:	ea4f 2810 	mov.w	r8, r0, lsr #8
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
 801121c:	b2c0      	uxtb	r0, r0
 801121e:	f7ff fe63 	bl	8010ee8 <hex_char_to_num>
 8011222:	4602      	mov	r2, r0
 8011224:	fa5f f088 	uxtb.w	r0, r8
 8011228:	f7ff fe5e 	bl	8010ee8 <hex_char_to_num>
 801122c:	eb00 1202 	add.w	r2, r0, r2, lsl #4
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
 8011230:	b2f8      	uxtb	r0, r7
 8011232:	f7ff fe59 	bl	8010ee8 <hex_char_to_num>
 8011236:	4607      	mov	r7, r0
 8011238:	b2c8      	uxtb	r0, r1
 801123a:	f7ff fe55 	bl	8010ee8 <hex_char_to_num>
 801123e:	eb00 1107 	add.w	r1, r0, r7, lsl #4
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
 8011242:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
 8011246:	f7ff fe4f 	bl	8010ee8 <hex_char_to_num>
 801124a:	4607      	mov	r7, r0
 801124c:	f89d 0059 	ldrb.w	r0, [sp, #89]	; 0x59
 8011250:	f7ff fe4a 	bl	8010ee8 <hex_char_to_num>
 8011254:	eb00 1007 	add.w	r0, r0, r7, lsl #4
#if LV_COLOR_16_SWAP == 0
#define LV_COLOR_MAKE(r8, g8, b8) ((lv_color_t){{b8 >> 3, g8 >> 2, r8 >> 3}})
static inline lv_color_t lv_color_make(uint8_t r8, uint8_t g8, uint8_t b8)
{
    lv_color_t color;
    color.ch.blue  = (uint16_t)(b8 >> 3);
 8011258:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801125c:	f360 0904 	bfi	r9, r0, #0, #5
    color.ch.green = (uint16_t)(g8 >> 2);
 8011260:	f3c1 0185 	ubfx	r1, r1, #2, #6
 8011264:	f361 194a 	bfi	r9, r1, #5, #6
    color.ch.red   = (uint16_t)(r8 >> 3);
 8011268:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801126c:	f362 29cf 	bfi	r9, r2, #11, #5
 8011270:	fa1f f389 	uxth.w	r3, r9
                            recolor.full = style->text.color.full;
 8011274:	930b      	str	r3, [sp, #44]	; 0x2c
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
 8011276:	2702      	movs	r7, #2
 8011278:	e75c      	b.n	8011134 <lv_draw_label+0x220>
                            recolor.full = style->text.color.full;
 801127a:	8c23      	ldrh	r3, [r4, #32]
 801127c:	e7fa      	b.n	8011274 <lv_draw_label+0x360>
            if(cmd_state == CMD_STATE_IN) color = recolor;
 801127e:	2f02      	cmp	r7, #2
 8011280:	d054      	beq.n	801132c <lv_draw_label+0x418>
            lv_color_t color = style->text.color;
 8011282:	8c23      	ldrh	r3, [r4, #32]
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 8011284:	9906      	ldr	r1, [sp, #24]
            if(cmd_state == CMD_STATE_IN) color = recolor;
 8011286:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 801128a:	4650      	mov	r0, sl
 801128c:	f002 fb36 	bl	80138fc <lv_font_get_glyph_width>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 8011290:	9a0d      	ldr	r2, [sp, #52]	; 0x34
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 8011292:	b203      	sxth	r3, r0
 8011294:	9310      	str	r3, [sp, #64]	; 0x40
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 8011296:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801129a:	429a      	cmp	r2, r3
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 801129c:	4680      	mov	r8, r0
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 801129e:	d026      	beq.n	80112ee <lv_draw_label+0x3da>
 80112a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80112a2:	429a      	cmp	r2, r3
 80112a4:	d023      	beq.n	80112ee <lv_draw_label+0x3da>
                int char_ind = lv_encoded_get_char_id(txt, i);
 80112a6:	4b20      	ldr	r3, [pc, #128]	; (8011328 <lv_draw_label+0x414>)
 80112a8:	9914      	ldr	r1, [sp, #80]	; 0x50
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	9830      	ldr	r0, [sp, #192]	; 0xc0
 80112ae:	4798      	blx	r3
                if(char_ind > sel_start && char_ind <= sel_end) {
 80112b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80112b2:	4298      	cmp	r0, r3
 80112b4:	dd1b      	ble.n	80112ee <lv_draw_label+0x3da>
 80112b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80112b8:	4298      	cmp	r0, r3
 80112ba:	dc18      	bgt.n	80112ee <lv_draw_label+0x3da>
                    sel_coords.x1 = pos.x;
 80112bc:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
                    sel_coords.x2 = pos.x + letter_w + style->text.letter_space - 1;
 80112c0:	8d21      	ldrh	r1, [r4, #40]	; 0x28
                    sel_coords.x1 = pos.x;
 80112c2:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
                    sel_coords.x2 = pos.x + letter_w + style->text.letter_space - 1;
 80112c6:	3b01      	subs	r3, #1
 80112c8:	440b      	add	r3, r1
                    sel_coords.y1 = pos.y;
 80112ca:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
 80112ce:	f8ad 2056 	strh.w	r2, [sp, #86]	; 0x56
                    sel_coords.x2 = pos.x + letter_w + style->text.letter_space - 1;
 80112d2:	4443      	add	r3, r8
 80112d4:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
                    sel_coords.y2 = pos.y + line_height - 1;
 80112d8:	9b05      	ldr	r3, [sp, #20]
                    lv_draw_rect(&sel_coords, mask, &sel_style, opa);
 80112da:	9907      	ldr	r1, [sp, #28]
                    sel_coords.y2 = pos.y + line_height - 1;
 80112dc:	3a01      	subs	r2, #1
 80112de:	441a      	add	r2, r3
 80112e0:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
                    lv_draw_rect(&sel_coords, mask, &sel_style, opa);
 80112e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80112e6:	aa17      	add	r2, sp, #92	; 0x5c
 80112e8:	a815      	add	r0, sp, #84	; 0x54
 80112ea:	f000 f8a9 	bl	8011440 <lv_draw_rect>
            lv_draw_letter(&pos, mask, font, letter, color, opa);
 80112ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80112f0:	9301      	str	r3, [sp, #4]
 80112f2:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 80112f6:	f8ad 3000 	strh.w	r3, [sp]
 80112fa:	4652      	mov	r2, sl
 80112fc:	9b06      	ldr	r3, [sp, #24]
 80112fe:	9907      	ldr	r1, [sp, #28]
 8011300:	a813      	add	r0, sp, #76	; 0x4c
 8011302:	f7ff f9e7 	bl	80106d4 <lv_draw_letter>
            if(letter_w > 0) {
 8011306:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011308:	2b00      	cmp	r3, #0
 801130a:	f77f af13 	ble.w	8011134 <lv_draw_label+0x220>
                pos.x += letter_w + style->text.letter_space;
 801130e:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8011312:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8011314:	4413      	add	r3, r2
 8011316:	4498      	add	r8, r3
 8011318:	f8ad 804c 	strh.w	r8, [sp, #76]	; 0x4c
 801131c:	e70a      	b.n	8011134 <lv_draw_label+0x220>
 801131e:	bf00      	nop
 8011320:	2000c594 	.word	0x2000c594
 8011324:	20001cbc 	.word	0x20001cbc
 8011328:	20001cb4 	.word	0x20001cb4
            if(cmd_state == CMD_STATE_IN) color = recolor;
 801132c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8011330:	e7a8      	b.n	8011284 <lv_draw_label+0x370>
        else if(flag & LV_TXT_FLAG_RIGHT) {
 8011332:	f01b 0f08 	tst.w	fp, #8
 8011336:	f43f af2b 	beq.w	8011190 <lv_draw_label+0x27c>
            line_width =
 801133a:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 801133e:	f8cd b000 	str.w	fp, [sp]
 8011342:	4652      	mov	r2, sl
 8011344:	4638      	mov	r0, r7
 8011346:	f003 fc15 	bl	8014b74 <lv_txt_get_width>
 801134a:	88ab      	ldrh	r3, [r5, #4]
 801134c:	882a      	ldrh	r2, [r5, #0]
 801134e:	3301      	adds	r3, #1
 8011350:	1a9b      	subs	r3, r3, r2
            pos.x += lv_area_get_width(coords) - line_width;
 8011352:	b21b      	sxth	r3, r3
 8011354:	1a18      	subs	r0, r3, r0
 8011356:	e716      	b.n	8011186 <lv_draw_label+0x272>
    if(hint && y_ofs == 0) {
 8011358:	f1b8 0f00 	cmp.w	r8, #0
 801135c:	f47f ae97 	bne.w	801108e <lv_draw_label+0x17a>
    lv_coord_t x_ofs = 0;
 8011360:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    uint32_t line_start     = 0;
 8011364:	2700      	movs	r7, #0
 8011366:	e632      	b.n	8010fce <lv_draw_label+0xba>
                        cmd_state = CMD_STATE_WAIT;
 8011368:	2700      	movs	r7, #0
 801136a:	e78a      	b.n	8011282 <lv_draw_label+0x36e>

0801136c <lv_color_mix>:
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 801136c:	f1c2 03ff 	rsb	r3, r2, #255	; 0xff
{
 8011370:	b570      	push	{r4, r5, r6, lr}
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 8011372:	b294      	uxth	r4, r2
 8011374:	b29a      	uxth	r2, r3
 8011376:	f3c1 23c4 	ubfx	r3, r1, #11, #5
 801137a:	fb13 f302 	smulbb	r3, r3, r2
 801137e:	f3c0 25c4 	ubfx	r5, r0, #11, #5
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 8011382:	f3c1 1645 	ubfx	r6, r1, #5, #6
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 8011386:	f001 011f 	and.w	r1, r1, #31
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 801138a:	fb05 3504 	mla	r5, r5, r4, r3
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 801138e:	fb16 f602 	smulbb	r6, r6, r2
 8011392:	f3c0 1345 	ubfx	r3, r0, #5, #6
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 8011396:	fb11 f202 	smulbb	r2, r1, r2
 801139a:	f000 001f 	and.w	r0, r0, #31
 801139e:	fb00 2204 	mla	r2, r0, r4, r2
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 80113a2:	fb03 6304 	mla	r3, r3, r4, r6
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 80113a6:	f3c2 2207 	ubfx	r2, r2, #8, #8
    return ret;
 80113aa:	f04f 0000 	mov.w	r0, #0
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 80113ae:	f3c3 2305 	ubfx	r3, r3, #8, #6
    return ret;
 80113b2:	f362 0004 	bfi	r0, r2, #0, #5
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 80113b6:	f3c5 2504 	ubfx	r5, r5, #8, #5
    return ret;
 80113ba:	f363 104a 	bfi	r0, r3, #5, #6
 80113be:	f365 20cf 	bfi	r0, r5, #11, #5
}
 80113c2:	bd70      	pop	{r4, r5, r6, pc}

080113c4 <lv_draw_cont_radius_corr>:
}

#endif

static uint16_t lv_draw_cont_radius_corr(uint16_t r, lv_coord_t w, lv_coord_t h)
{
 80113c4:	b570      	push	{r4, r5, r6, lr}
 80113c6:	460e      	mov	r6, r1
 80113c8:	4604      	mov	r4, r0
 80113ca:	4615      	mov	r5, r2
    bool aa = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 80113cc:	f7fe faac 	bl	800f928 <lv_refr_get_disp_refreshing>
 80113d0:	f002 fc62 	bl	8013c98 <lv_disp_get_antialiasing>

    if(r >= (w >> 1)) {
 80113d4:	1071      	asrs	r1, r6, #1
 80113d6:	428c      	cmp	r4, r1
 80113d8:	db03      	blt.n	80113e2 <lv_draw_cont_radius_corr+0x1e>
        r = (w >> 1);
 80113da:	b28c      	uxth	r4, r1
        if(r != 0) r--;
 80113dc:	b10c      	cbz	r4, 80113e2 <lv_draw_cont_radius_corr+0x1e>
 80113de:	3c01      	subs	r4, #1
 80113e0:	b2a4      	uxth	r4, r4
    }
    if(r >= (h >> 1)) {
 80113e2:	106a      	asrs	r2, r5, #1
 80113e4:	4294      	cmp	r4, r2
 80113e6:	db03      	blt.n	80113f0 <lv_draw_cont_radius_corr+0x2c>
        r = (h >> 1);
 80113e8:	b294      	uxth	r4, r2
        if(r != 0) r--;
 80113ea:	b124      	cbz	r4, 80113f6 <lv_draw_cont_radius_corr+0x32>
 80113ec:	3c01      	subs	r4, #1
 80113ee:	b2a4      	uxth	r4, r4
    }

    if(r > 0) r -= aa;
 80113f0:	b10c      	cbz	r4, 80113f6 <lv_draw_cont_radius_corr+0x32>
 80113f2:	1a24      	subs	r4, r4, r0
 80113f4:	b2a4      	uxth	r4, r4

    return r;
}
 80113f6:	4620      	mov	r0, r4
 80113f8:	bd70      	pop	{r4, r5, r6, pc}
	...

080113fc <antialias_get_opa_circ>:
#if CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD < 1
    if(seg == 1) return 170;
#endif

#if CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD < 2
    if(seg == 2) return (opa_map2[px_id] * opa) >> 8;
 80113fc:	2802      	cmp	r0, #2
 80113fe:	d105      	bne.n	801140c <antialias_get_opa_circ+0x10>
 8011400:	4b0b      	ldr	r3, [pc, #44]	; (8011430 <antialias_get_opa_circ+0x34>)
#if CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD < 4
    if(seg == 4) return (opa_map4[px_id] * opa) >> 8;
#endif

    uint8_t id = (uint32_t)((uint32_t)px_id * (sizeof(opa_map8) - 1)) / (seg - 1);
    return (uint32_t)((uint32_t)opa_map8[id] * opa) >> 8;
 8011402:	5c58      	ldrb	r0, [r3, r1]
 8011404:	fb10 f002 	smulbb	r0, r0, r2
 8011408:	0a00      	lsrs	r0, r0, #8
}
 801140a:	4770      	bx	lr
    if(seg == 3) return (opa_map3[px_id] * opa) >> 8;
 801140c:	2803      	cmp	r0, #3
 801140e:	d101      	bne.n	8011414 <antialias_get_opa_circ+0x18>
 8011410:	4b08      	ldr	r3, [pc, #32]	; (8011434 <antialias_get_opa_circ+0x38>)
 8011412:	e7f6      	b.n	8011402 <antialias_get_opa_circ+0x6>
    if(seg == 4) return (opa_map4[px_id] * opa) >> 8;
 8011414:	2804      	cmp	r0, #4
    uint8_t id = (uint32_t)((uint32_t)px_id * (sizeof(opa_map8) - 1)) / (seg - 1);
 8011416:	bf1b      	ittet	ne
 8011418:	ebc1 01c1 	rsbne	r1, r1, r1, lsl #3
 801141c:	f100 33ff 	addne.w	r3, r0, #4294967295	; 0xffffffff
    if(seg == 4) return (opa_map4[px_id] * opa) >> 8;
 8011420:	4b05      	ldreq	r3, [pc, #20]	; (8011438 <antialias_get_opa_circ+0x3c>)
    uint8_t id = (uint32_t)((uint32_t)px_id * (sizeof(opa_map8) - 1)) / (seg - 1);
 8011422:	fbb1 f1f3 	udivne	r1, r1, r3
    return (uint32_t)((uint32_t)opa_map8[id] * opa) >> 8;
 8011426:	bf1c      	itt	ne
 8011428:	4b04      	ldrne	r3, [pc, #16]	; (801143c <antialias_get_opa_circ+0x40>)
 801142a:	b2c9      	uxtbne	r1, r1
 801142c:	e7e9      	b.n	8011402 <antialias_get_opa_circ+0x6>
 801142e:	bf00      	nop
 8011430:	080ec3a5 	.word	0x080ec3a5
 8011434:	080ec3a7 	.word	0x080ec3a7
 8011438:	080ec3aa 	.word	0x080ec3aa
 801143c:	080ec3ae 	.word	0x080ec3ae

08011440 <lv_draw_rect>:
{
 8011440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011444:	b0a9      	sub	sp, #164	; 0xa4
 8011446:	4682      	mov	sl, r0
 8011448:	9202      	str	r2, [sp, #8]
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 801144a:	88c2      	ldrh	r2, [r0, #6]
 801144c:	9308      	str	r3, [sp, #32]
 801144e:	8843      	ldrh	r3, [r0, #2]
 8011450:	3201      	adds	r2, #1
 8011452:	1ad2      	subs	r2, r2, r3
 8011454:	b212      	sxth	r2, r2
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 8011456:	2a00      	cmp	r2, #0
{
 8011458:	468b      	mov	fp, r1
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 801145a:	f340 869c 	ble.w	8012196 <lv_draw_rect+0xd56>
    return area_p->x2 - area_p->x1 + 1;
 801145e:	8881      	ldrh	r1, [r0, #4]
 8011460:	8803      	ldrh	r3, [r0, #0]
 8011462:	3101      	adds	r1, #1
 8011464:	1ac9      	subs	r1, r1, r3
 8011466:	b209      	sxth	r1, r1
 8011468:	2900      	cmp	r1, #0
 801146a:	f340 8694 	ble.w	8012196 <lv_draw_rect+0xd56>
    if(style->body.shadow.width != 0) {
 801146e:	9b02      	ldr	r3, [sp, #8]
 8011470:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8011474:	2b00      	cmp	r3, #0
 8011476:	f000 82d3 	beq.w	8011a20 <lv_draw_rect+0x5e0>
    radius            = lv_draw_cont_radius_corr(radius, width, height);
 801147a:	9b02      	ldr	r3, [sp, #8]
 801147c:	88d8      	ldrh	r0, [r3, #6]
 801147e:	f7ff ffa1 	bl	80113c4 <lv_draw_cont_radius_corr>
    memcpy(dest, src, sizeof(lv_area_t));
 8011482:	f8da 1004 	ldr.w	r1, [sl, #4]
 8011486:	4604      	mov	r4, r0
 8011488:	f8da 0000 	ldr.w	r0, [sl]
 801148c:	ab1e      	add	r3, sp, #120	; 0x78
 801148e:	c303      	stmia	r3!, {r0, r1}
    area_tmp.x1 += radius;
 8011490:	f8bd 3078 	ldrh.w	r3, [sp, #120]	; 0x78
 8011494:	4423      	add	r3, r4
 8011496:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
    area_tmp.x2 -= radius;
 801149a:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 801149e:	a91e      	add	r1, sp, #120	; 0x78
    area_tmp.x2 -= radius;
 80114a0:	1b1b      	subs	r3, r3, r4
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 80114a2:	4658      	mov	r0, fp
    area_tmp.x2 -= radius;
 80114a4:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 80114a8:	f002 fe0a 	bl	80140c0 <lv_area_is_in>
 80114ac:	2800      	cmp	r0, #0
 80114ae:	f040 82b7 	bne.w	8011a20 <lv_draw_rect+0x5e0>
 80114b2:	f8da 0000 	ldr.w	r0, [sl]
 80114b6:	f8da 1004 	ldr.w	r1, [sl, #4]
 80114ba:	ab1e      	add	r3, sp, #120	; 0x78
 80114bc:	c303      	stmia	r3!, {r0, r1}
    area_tmp.y1 += radius;
 80114be:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
 80114c2:	4423      	add	r3, r4
 80114c4:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
    area_tmp.y2 -= radius;
 80114c8:	f8bd 307e 	ldrh.w	r3, [sp, #126]	; 0x7e
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 80114cc:	a91e      	add	r1, sp, #120	; 0x78
    area_tmp.y2 -= radius;
 80114ce:	1b1c      	subs	r4, r3, r4
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 80114d0:	4658      	mov	r0, fp
    area_tmp.y2 -= radius;
 80114d2:	f8ad 407e 	strh.w	r4, [sp, #126]	; 0x7e
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 80114d6:	f002 fdf3 	bl	80140c0 <lv_area_is_in>
 80114da:	4605      	mov	r5, r0
 80114dc:	2800      	cmp	r0, #0
 80114de:	f040 829f 	bne.w	8011a20 <lv_draw_rect+0x5e0>
    if(style->body.shadow.type == LV_SHADOW_FULL) {
 80114e2:	9b02      	ldr	r3, [sp, #8]
 80114e4:	7d1b      	ldrb	r3, [r3, #20]
 80114e6:	2b01      	cmp	r3, #1
 80114e8:	f040 8212 	bne.w	8011910 <lv_draw_rect+0x4d0>
    bool aa = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 80114ec:	f7fe fa1c 	bl	800f928 <lv_refr_get_disp_refreshing>
 80114f0:	f002 fbd2 	bl	8013c98 <lv_disp_get_antialiasing>
    lv_coord_t swidth = style->body.shadow.width;
 80114f4:	9b02      	ldr	r3, [sp, #8]
    return area_p->y2 - area_p->y1 + 1;
 80114f6:	f8ba 2006 	ldrh.w	r2, [sl, #6]
 80114fa:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80114fe:	9304      	str	r3, [sp, #16]
 8011500:	f8ba 3002 	ldrh.w	r3, [sl, #2]
    return area_p->x2 - area_p->x1 + 1;
 8011504:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    return area_p->y2 - area_p->y1 + 1;
 8011508:	3201      	adds	r2, #1
 801150a:	1ad2      	subs	r2, r2, r3
    return area_p->x2 - area_p->x1 + 1;
 801150c:	f8ba 3000 	ldrh.w	r3, [sl]
 8011510:	3101      	adds	r1, #1
 8011512:	1ac9      	subs	r1, r1, r3
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8011514:	9b02      	ldr	r3, [sp, #8]
 8011516:	b209      	sxth	r1, r1
    bool aa = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8011518:	4604      	mov	r4, r0
    radius = lv_draw_cont_radius_corr(radius, width, height);
 801151a:	b212      	sxth	r2, r2
 801151c:	88d8      	ldrh	r0, [r3, #6]
 801151e:	f7ff ff51 	bl	80113c4 <lv_draw_cont_radius_corr>
    radius += aa;
 8011522:	b2a4      	uxth	r4, r4
 8011524:	4420      	add	r0, r4
 8011526:	b283      	uxth	r3, r0
 8011528:	9305      	str	r3, [sp, #20]
    int16_t filter_width = 2 * swidth + 1;
 801152a:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    radius += aa;
 801152e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
 8011532:	9a04      	ldr	r2, [sp, #16]
    radius += aa;
 8011534:	9309      	str	r3, [sp, #36]	; 0x24
    int16_t filter_width = 2 * swidth + 1;
 8011536:	ea4f 0846 	mov.w	r8, r6, lsl #1
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
 801153a:	4413      	add	r3, r2
    int16_t filter_width = 2 * swidth + 1;
 801153c:	f108 0801 	add.w	r8, r8, #1
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
 8011540:	1d18      	adds	r0, r3, #4
    int16_t filter_width = 2 * swidth + 1;
 8011542:	fa0f f888 	sxth.w	r8, r8
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
 8011546:	f020 0003 	bic.w	r0, r0, #3
    uint32_t line_1d_blur_size = (filter_width + 3) & ~0x3;     /*Round to 4*/
 801154a:	f108 0703 	add.w	r7, r8, #3
    curve_x_size *= sizeof(lv_coord_t);
 801154e:	ea4f 0940 	mov.w	r9, r0, lsl #1
    uint32_t line_1d_blur_size = (filter_width + 3) & ~0x3;     /*Round to 4*/
 8011552:	f027 0703 	bic.w	r7, r7, #3
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size + line_2d_blur_size);
 8011556:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 801155a:	4438      	add	r0, r7
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
 801155c:	930a      	str	r3, [sp, #40]	; 0x28
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size + line_2d_blur_size);
 801155e:	f7fe ff4b 	bl	80103f8 <lv_draw_get_buf>
    uint32_t * line_1d_blur = (uint32_t *)&draw_buf[curve_x_size];
 8011562:	4603      	mov	r3, r0
 8011564:	444b      	add	r3, r9
 8011566:	930b      	str	r3, [sp, #44]	; 0x2c
    lv_opa_t * line_2d_blur = (lv_opa_t *)&draw_buf[curve_x_size + line_1d_blur_size];
 8011568:	4603      	mov	r3, r0
 801156a:	443b      	add	r3, r7
    memset(curve_x, 0, curve_x_size);
 801156c:	4629      	mov	r1, r5
 801156e:	464a      	mov	r2, r9
    lv_circ_init(&circ, &circ_tmp, radius);
 8011570:	f10d 0772 	add.w	r7, sp, #114	; 0x72
 8011574:	ad1d      	add	r5, sp, #116	; 0x74
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size + line_2d_blur_size);
 8011576:	9003      	str	r0, [sp, #12]
    lv_opa_t * line_2d_blur = (lv_opa_t *)&draw_buf[curve_x_size + line_1d_blur_size];
 8011578:	930c      	str	r3, [sp, #48]	; 0x30
    memset(curve_x, 0, curve_x_size);
 801157a:	f008 faaa 	bl	8019ad2 <memset>
    lv_circ_init(&circ, &circ_tmp, radius);
 801157e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011580:	4639      	mov	r1, r7
 8011582:	4628      	mov	r0, r5
 8011584:	f002 fdb9 	bl	80140fa <lv_circ_init>
    while(lv_circ_cont(&circ)) {
 8011588:	4628      	mov	r0, r5
 801158a:	f002 fdbd 	bl	8014108 <lv_circ_cont>
 801158e:	2800      	cmp	r0, #0
 8011590:	d15a      	bne.n	8011648 <lv_draw_rect+0x208>
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 8011592:	9b08      	ldr	r3, [sp, #32]
 8011594:	2bff      	cmp	r3, #255	; 0xff
 8011596:	9b02      	ldr	r3, [sp, #8]
 8011598:	bf18      	it	ne
 801159a:	9a08      	ldrne	r2, [sp, #32]
 801159c:	7a1b      	ldrb	r3, [r3, #8]
 801159e:	bf1c      	itt	ne
 80115a0:	4353      	mulne	r3, r2
 80115a2:	f3c3 2307 	ubfxne	r3, r3, #8, #8
 80115a6:	005b      	lsls	r3, r3, #1
 80115a8:	ea4f 2208 	mov.w	r2, r8, lsl #8
 80115ac:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 80115b0:	4359      	muls	r1, r3
                             (filter_width * filter_width);
 80115b2:	fb08 f508 	mul.w	r5, r8, r8
 80115b6:	4353      	muls	r3, r2
 80115b8:	2200      	movs	r2, #0
    for(line = 0; line < filter_width; line++) {
 80115ba:	b210      	sxth	r0, r2
 80115bc:	4580      	cmp	r8, r0
 80115be:	dc55      	bgt.n	801166c <lv_draw_rect+0x22c>
    ofs_rb.x = coords->x2 - radius - aa;
 80115c0:	9a05      	ldr	r2, [sp, #20]
 80115c2:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 80115c6:	1a9b      	subs	r3, r3, r2
 80115c8:	1b1b      	subs	r3, r3, r4
 80115ca:	b29b      	uxth	r3, r3
 80115cc:	930e      	str	r3, [sp, #56]	; 0x38
 80115ce:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
 80115d2:	9314      	str	r3, [sp, #80]	; 0x50
    ofs_rb.y = coords->y2 - radius - aa;
 80115d4:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 80115d8:	1a9b      	subs	r3, r3, r2
 80115da:	1b1b      	subs	r3, r3, r4
 80115dc:	b29b      	uxth	r3, r3
 80115de:	930f      	str	r3, [sp, #60]	; 0x3c
 80115e0:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 80115e4:	9310      	str	r3, [sp, #64]	; 0x40
    ofs_rt.y = coords->y1 + radius + aa;
 80115e6:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 80115ea:	4423      	add	r3, r4
 80115ec:	4413      	add	r3, r2
 80115ee:	b29b      	uxth	r3, r3
 80115f0:	9311      	str	r3, [sp, #68]	; 0x44
 80115f2:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
 80115f6:	9312      	str	r3, [sp, #72]	; 0x48
    ofs_lb.x = coords->x1 + radius + aa;
 80115f8:	f8ba 3000 	ldrh.w	r3, [sl]
 80115fc:	441c      	add	r4, r3
 80115fe:	4414      	add	r4, r2
 8011600:	b2a3      	uxth	r3, r4
 8011602:	9313      	str	r3, [sp, #76]	; 0x4c
 8011604:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 8011608:	9315      	str	r3, [sp, #84]	; 0x54
            for(line_rel = -swidth; line_rel <= swidth; line_rel++) {
 801160a:	4276      	negs	r6, r6
    ofs_lb.x = coords->x1 + radius + aa;
 801160c:	2300      	movs	r3, #0
 801160e:	9307      	str	r3, [sp, #28]
            for(line_rel = -swidth; line_rel <= swidth; line_rel++) {
 8011610:	b233      	sxth	r3, r6
 8011612:	9318      	str	r3, [sp, #96]	; 0x60
 8011614:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8011618:	9306      	str	r3, [sp, #24]
    for(line = 0; line <= radius + swidth; line++) { /*Check all rows and make the 1D blur to 2D*/
 801161a:	9a06      	ldr	r2, [sp, #24]
 801161c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801161e:	4293      	cmp	r3, r2
 8011620:	f2c0 81fe 	blt.w	8011a20 <lv_draw_rect+0x5e0>
                    col_rel = curve_x[line + line_rel] - curve_x[line] - col;
 8011624:	9b03      	ldr	r3, [sp, #12]
 8011626:	eb03 0542 	add.w	r5, r3, r2, lsl #1
                if(col_rel < -swidth) { /*Outside of the blurred area. */
 801162a:	9b04      	ldr	r3, [sp, #16]
                    col_rel = curve_x[line + line_rel] - curve_x[line] - col;
 801162c:	2000      	movs	r0, #0
                if(col_rel < -swidth) { /*Outside of the blurred area. */
 801162e:	425c      	negs	r4, r3
        for(col = 0; col <= radius + swidth; col++) { /*Check all pixels in a 1D blur line (from the origo to last
 8011630:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011632:	fa1f f980 	uxth.w	r9, r0
 8011636:	454a      	cmp	r2, r9
 8011638:	db3b      	blt.n	80116b2 <lv_draw_rect+0x272>
            for(line_rel = -swidth; line_rel <= swidth; line_rel++) {
 801163a:	9a18      	ldr	r2, [sp, #96]	; 0x60
            uint32_t px_opa_sum = 0;
 801163c:	2100      	movs	r1, #0
            for(line_rel = -swidth; line_rel <= swidth; line_rel++) {
 801163e:	9b04      	ldr	r3, [sp, #16]
 8011640:	4293      	cmp	r3, r2
 8011642:	da1b      	bge.n	801167c <lv_draw_rect+0x23c>
                } else if(line + line_rel > radius) { /*Above the radius, here won't be more 1D blur*/
 8011644:	2200      	movs	r2, #0
 8011646:	e029      	b.n	801169c <lv_draw_rect+0x25c>
        curve_x[LV_CIRC_OCT1_Y(circ)] = LV_CIRC_OCT1_X(circ);
 8011648:	f9bd 3076 	ldrsh.w	r3, [sp, #118]	; 0x76
 801164c:	9903      	ldr	r1, [sp, #12]
 801164e:	f9bd 2074 	ldrsh.w	r2, [sp, #116]	; 0x74
 8011652:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        curve_x[LV_CIRC_OCT2_Y(circ)] = LV_CIRC_OCT2_X(circ);
 8011656:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	; 0x74
 801165a:	f9bd 2076 	ldrsh.w	r2, [sp, #118]	; 0x76
 801165e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        lv_circ_next(&circ, &circ_tmp);
 8011662:	4628      	mov	r0, r5
 8011664:	4639      	mov	r1, r7
 8011666:	f002 fd58 	bl	801411a <lv_circ_next>
 801166a:	e78d      	b.n	8011588 <lv_draw_rect+0x148>
        line_1d_blur[line] = (uint32_t)((uint32_t)(filter_width - line) * (opa * 2) << SHADOW_OPA_EXTRA_PRECISION) /
 801166c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801166e:	fbb3 f0f5 	udiv	r0, r3, r5
 8011672:	440b      	add	r3, r1
 8011674:	f847 0022 	str.w	r0, [r7, r2, lsl #2]
 8011678:	3201      	adds	r2, #1
 801167a:	e79e      	b.n	80115ba <lv_draw_rect+0x17a>
                if(line + line_rel < 0) { /*Below the radius, here is the blur of the edge */
 801167c:	9b06      	ldr	r3, [sp, #24]
 801167e:	18d3      	adds	r3, r2, r3
 8011680:	f140 80a9 	bpl.w	80117d6 <lv_draw_rect+0x396>
                    col_rel = radius - curve_x[line] - col;
 8011684:	882b      	ldrh	r3, [r5, #0]
 8011686:	9e05      	ldr	r6, [sp, #20]
 8011688:	1af3      	subs	r3, r6, r3
                    col_rel = curve_x[line + line_rel] - curve_x[line] - col;
 801168a:	eba3 0309 	sub.w	r3, r3, r9
 801168e:	b21b      	sxth	r3, r3
                if(col_rel < -swidth) { /*Outside of the blurred area. */
 8011690:	42a3      	cmp	r3, r4
 8011692:	f280 80aa 	bge.w	80117ea <lv_draw_rect+0x3aa>
                    if(line_rel == -swidth)
 8011696:	1b16      	subs	r6, r2, r4
 8011698:	4272      	negs	r2, r6
 801169a:	4172      	adcs	r2, r6
            line_2d_blur[col] = px_opa_sum >> SHADOW_OPA_EXTRA_PRECISION;
 801169c:	b283      	uxth	r3, r0
 801169e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80116a0:	0a09      	lsrs	r1, r1, #8
 80116a2:	54f1      	strb	r1, [r6, r3]
 80116a4:	3001      	adds	r0, #1
            if(line_ready) {
 80116a6:	2a00      	cmp	r2, #0
 80116a8:	d0c2      	beq.n	8011630 <lv_draw_rect+0x1f0>
                col++; /*To make this line to the last one ( drawing will go to '< col')*/
 80116aa:	f109 0301 	add.w	r3, r9, #1
 80116ae:	fa1f f983 	uxth.w	r9, r3
        point_rt.x = curve_x[line] + ofs_rt.x + 1;
 80116b2:	9b03      	ldr	r3, [sp, #12]
 80116b4:	9a06      	ldr	r2, [sp, #24]
 80116b6:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 80116ba:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 80116be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80116c0:	1c5a      	adds	r2, r3, #1
 80116c2:	440a      	add	r2, r1
 80116c4:	b293      	uxth	r3, r2
 80116c6:	9316      	str	r3, [sp, #88]	; 0x58
 80116c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80116ca:	1b1d      	subs	r5, r3, r4
 80116cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80116ce:	441c      	add	r4, r3
        point_lt.x = ofs_lt.x - curve_x[line] - 1;
 80116d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80116d2:	3b01      	subs	r3, #1
 80116d4:	1a5b      	subs	r3, r3, r1
 80116d6:	b29b      	uxth	r3, r3
 80116d8:	9317      	str	r3, [sp, #92]	; 0x5c
 80116da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80116dc:	1c5e      	adds	r6, r3, #1
 80116de:	2300      	movs	r3, #0
 80116e0:	b22d      	sxth	r5, r5
 80116e2:	b224      	sxth	r4, r4
 80116e4:	930d      	str	r3, [sp, #52]	; 0x34
 80116e6:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 80116ea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80116ec:	eba2 0803 	sub.w	r8, r2, r3
 80116f0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80116f2:	18d7      	adds	r7, r2, r3
        for(d = 1; d < col; d++) {
 80116f4:	3301      	adds	r3, #1
 80116f6:	b29b      	uxth	r3, r3
 80116f8:	4599      	cmp	r9, r3
 80116fa:	fa0f f888 	sxth.w	r8, r8
 80116fe:	b23f      	sxth	r7, r7
 8011700:	f200 8082 	bhi.w	8011808 <lv_draw_rect+0x3c8>
        if(line == 0) lv_draw_shadow_full_straight(coords, mask, style, line_2d_blur);
 8011704:	9b06      	ldr	r3, [sp, #24]
 8011706:	2b00      	cmp	r3, #0
 8011708:	d161      	bne.n	80117ce <lv_draw_rect+0x38e>
    bool aa           = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 801170a:	f7fe f90d 	bl	800f928 <lv_refr_get_disp_refreshing>
 801170e:	f002 fac3 	bl	8013c98 <lv_disp_get_antialiasing>
    lv_coord_t swidth = style->body.shadow.width;
 8011712:	9b02      	ldr	r3, [sp, #8]
    return area_p->y2 - area_p->y1 + 1;
 8011714:	f8ba 2006 	ldrh.w	r2, [sl, #6]
 8011718:	f9b3 8012 	ldrsh.w	r8, [r3, #18]
 801171c:	f8ba 3002 	ldrh.w	r3, [sl, #2]
    return area_p->x2 - area_p->x1 + 1;
 8011720:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    return area_p->y2 - area_p->y1 + 1;
 8011724:	3201      	adds	r2, #1
 8011726:	1ad2      	subs	r2, r2, r3
    return area_p->x2 - area_p->x1 + 1;
 8011728:	f8ba 3000 	ldrh.w	r3, [sl]
 801172c:	3101      	adds	r1, #1
 801172e:	1ac9      	subs	r1, r1, r3
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8011730:	9b02      	ldr	r3, [sp, #8]
    bool aa           = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8011732:	4604      	mov	r4, r0
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8011734:	b212      	sxth	r2, r2
 8011736:	b209      	sxth	r1, r1
 8011738:	88d8      	ldrh	r0, [r3, #6]
 801173a:	f7ff fe43 	bl	80113c4 <lv_draw_cont_radius_corr>
    right_area.x1 = coords->x2 + 1 - aa;
 801173e:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    right_area.y1 = coords->y1 + radius + aa;
 8011742:	f8ba 5002 	ldrh.w	r5, [sl, #2]
    radius += aa;
 8011746:	b2a3      	uxth	r3, r4
    right_area.x1 = coords->x2 + 1 - aa;
 8011748:	1c4a      	adds	r2, r1, #1
 801174a:	1ad2      	subs	r2, r2, r3
 801174c:	b212      	sxth	r2, r2
    radius += aa;
 801174e:	4418      	add	r0, r3
    left_area.x1 = coords->x1 - 1 + aa;
 8011750:	f8ba 4000 	ldrh.w	r4, [sl]
    right_area.x1 = coords->x2 + 1 - aa;
 8011754:	f8ad 2080 	strh.w	r2, [sp, #128]	; 0x80
    right_area.x2 = right_area.x1;
 8011758:	f8ad 2084 	strh.w	r2, [sp, #132]	; 0x84
    right_area.y2 = coords->y2 - radius - aa;
 801175c:	f8ba 2006 	ldrh.w	r2, [sl, #6]
    radius += aa;
 8011760:	b280      	uxth	r0, r0
    right_area.y1 = coords->y1 + radius + aa;
 8011762:	eb03 0e05 	add.w	lr, r3, r5
    right_area.y2 = coords->y2 - radius - aa;
 8011766:	1a16      	subs	r6, r2, r0
    left_area.x1 = coords->x1 - 1 + aa;
 8011768:	1e67      	subs	r7, r4, #1
    top_area.y1 = coords->y1 - 1 + aa;
 801176a:	3d01      	subs	r5, #1
    top_area.x1 = coords->x1 + radius + aa;
 801176c:	441c      	add	r4, r3
    top_area.x2 = coords->x2 - radius - aa;
 801176e:	1a09      	subs	r1, r1, r0
    bottom_area.y1 = coords->y2 + 1 - aa;
 8011770:	3201      	adds	r2, #1
    right_area.y2 = coords->y2 - radius - aa;
 8011772:	1af6      	subs	r6, r6, r3
    left_area.x1 = coords->x1 - 1 + aa;
 8011774:	441f      	add	r7, r3
    top_area.y1 = coords->y1 - 1 + aa;
 8011776:	441d      	add	r5, r3
    top_area.x2 = coords->x2 - radius - aa;
 8011778:	1ac9      	subs	r1, r1, r3
    right_area.y1 = coords->y1 + radius + aa;
 801177a:	4486      	add	lr, r0
    top_area.x1 = coords->x1 + radius + aa;
 801177c:	4404      	add	r4, r0
    bottom_area.y1 = coords->y2 + 1 - aa;
 801177e:	1ad3      	subs	r3, r2, r3
    top_area.x1 = coords->x1 + radius + aa;
 8011780:	b224      	sxth	r4, r4
    right_area.y1 = coords->y1 + radius + aa;
 8011782:	fa0f fe8e 	sxth.w	lr, lr
    right_area.y2 = coords->y2 - radius - aa;
 8011786:	b236      	sxth	r6, r6
    left_area.x1 = coords->x1 - 1 + aa;
 8011788:	b23f      	sxth	r7, r7
    top_area.y1 = coords->y1 - 1 + aa;
 801178a:	b22d      	sxth	r5, r5
    top_area.x2 = coords->x2 - radius - aa;
 801178c:	b209      	sxth	r1, r1
    bottom_area.y1 = coords->y2 + 1 - aa;
 801178e:	b21b      	sxth	r3, r3
    top_area.x1 = coords->x1 + radius + aa;
 8011790:	f8ad 4090 	strh.w	r4, [sp, #144]	; 0x90
    bottom_area.x1 = coords->x1 + radius + aa;
 8011794:	f8ad 4098 	strh.w	r4, [sp, #152]	; 0x98
    right_area.y1 = coords->y1 + radius + aa;
 8011798:	f8ad e082 	strh.w	lr, [sp, #130]	; 0x82
    right_area.y2 = coords->y2 - radius - aa;
 801179c:	f8ad 6086 	strh.w	r6, [sp, #134]	; 0x86
    left_area.x1 = coords->x1 - 1 + aa;
 80117a0:	f8ad 7088 	strh.w	r7, [sp, #136]	; 0x88
    left_area.y1 = coords->y1 + radius + aa;
 80117a4:	f8ad e08a 	strh.w	lr, [sp, #138]	; 0x8a
    left_area.x2 = left_area.x1;
 80117a8:	f8ad 708c 	strh.w	r7, [sp, #140]	; 0x8c
    left_area.y2 = coords->y2 - radius - aa;
 80117ac:	f8ad 608e 	strh.w	r6, [sp, #142]	; 0x8e
    top_area.y1 = coords->y1 - 1 + aa;
 80117b0:	f8ad 5092 	strh.w	r5, [sp, #146]	; 0x92
    top_area.x2 = coords->x2 - radius - aa;
 80117b4:	f8ad 1094 	strh.w	r1, [sp, #148]	; 0x94
    top_area.y2 = top_area.y1;
 80117b8:	f8ad 5096 	strh.w	r5, [sp, #150]	; 0x96
    bottom_area.y1 = coords->y2 + 1 - aa;
 80117bc:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
    bottom_area.x2 = coords->x2 - radius - aa;
 80117c0:	f8ad 109c 	strh.w	r1, [sp, #156]	; 0x9c
    bottom_area.y2 = bottom_area.y1;
 80117c4:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
    for(d = 1 /*+ LV_ANTIALIAS*/; d <= swidth /* - LV_ANTIALIAS*/; d++) {
 80117c8:	2401      	movs	r4, #1
 80117ca:	45a0      	cmp	r8, r4
 80117cc:	da57      	bge.n	801187e <lv_draw_rect+0x43e>
 80117ce:	9b07      	ldr	r3, [sp, #28]
 80117d0:	3301      	adds	r3, #1
 80117d2:	9307      	str	r3, [sp, #28]
 80117d4:	e71e      	b.n	8011614 <lv_draw_rect+0x1d4>
                } else if(line + line_rel > radius) { /*Above the radius, here won't be more 1D blur*/
 80117d6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80117d8:	429e      	cmp	r6, r3
 80117da:	f6ff af33 	blt.w	8011644 <lv_draw_rect+0x204>
                    col_rel = curve_x[line + line_rel] - curve_x[line] - col;
 80117de:	9e03      	ldr	r6, [sp, #12]
 80117e0:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80117e4:	882e      	ldrh	r6, [r5, #0]
 80117e6:	1b9b      	subs	r3, r3, r6
 80117e8:	e74f      	b.n	801168a <lv_draw_rect+0x24a>
                } else if(col_rel > swidth)
 80117ea:	9e04      	ldr	r6, [sp, #16]
 80117ec:	429e      	cmp	r6, r3
                    px_opa_sum += line_1d_blur[swidth - col_rel]; /*On the 1D blur (+ swidth to align to the center)*/
 80117ee:	bfa9      	itett	ge
 80117f0:	9e04      	ldrge	r6, [sp, #16]
                    px_opa_sum += line_1d_blur[0]; /*Inside the not blurred area*/
 80117f2:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
                    px_opa_sum += line_1d_blur[swidth - col_rel]; /*On the 1D blur (+ swidth to align to the center)*/
 80117f4:	1af3      	subge	r3, r6, r3
 80117f6:	9e0b      	ldrge	r6, [sp, #44]	; 0x2c
                    px_opa_sum += line_1d_blur[0]; /*Inside the not blurred area*/
 80117f8:	bfb4      	ite	lt
 80117fa:	681b      	ldrlt	r3, [r3, #0]
                    px_opa_sum += line_1d_blur[swidth - col_rel]; /*On the 1D blur (+ swidth to align to the center)*/
 80117fc:	f856 3023 	ldrge.w	r3, [r6, r3, lsl #2]
 8011800:	3201      	adds	r2, #1
 8011802:	4419      	add	r1, r3
 8011804:	b212      	sxth	r2, r2
 8011806:	e71a      	b.n	801163e <lv_draw_rect+0x1fe>
            if(point_lt.x < ofs_lt.x && point_lt.y < ofs_lt.y) {
 8011808:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801180a:	4543      	cmp	r3, r8
 801180c:	dd17      	ble.n	801183e <lv_draw_rect+0x3fe>
 801180e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011810:	42ab      	cmp	r3, r5
 8011812:	dd08      	ble.n	8011826 <lv_draw_rect+0x3e6>
                lv_draw_px(point_lt.x, point_lt.y, mask, style->body.shadow.color, line_2d_blur[d]);
 8011814:	7833      	ldrb	r3, [r6, #0]
 8011816:	9300      	str	r3, [sp, #0]
 8011818:	9b02      	ldr	r3, [sp, #8]
 801181a:	465a      	mov	r2, fp
 801181c:	8a1b      	ldrh	r3, [r3, #16]
 801181e:	4629      	mov	r1, r5
 8011820:	4640      	mov	r0, r8
 8011822:	f7fe fe59 	bl	80104d8 <lv_draw_px>
            if(point_lb.x < ofs_lb.x && point_lb.y > ofs_lb.y) {
 8011826:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011828:	42a3      	cmp	r3, r4
 801182a:	da08      	bge.n	801183e <lv_draw_rect+0x3fe>
                lv_draw_px(point_lb.x, point_lb.y, mask, style->body.shadow.color, line_2d_blur[d]);
 801182c:	7833      	ldrb	r3, [r6, #0]
 801182e:	9300      	str	r3, [sp, #0]
 8011830:	9b02      	ldr	r3, [sp, #8]
 8011832:	465a      	mov	r2, fp
 8011834:	8a1b      	ldrh	r3, [r3, #16]
 8011836:	4621      	mov	r1, r4
 8011838:	4640      	mov	r0, r8
 801183a:	f7fe fe4d 	bl	80104d8 <lv_draw_px>
            if(point_rt.x > ofs_rt.x && point_rt.y < ofs_rt.y) {
 801183e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011840:	42bb      	cmp	r3, r7
 8011842:	da17      	bge.n	8011874 <lv_draw_rect+0x434>
 8011844:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011846:	42ab      	cmp	r3, r5
 8011848:	dd08      	ble.n	801185c <lv_draw_rect+0x41c>
                lv_draw_px(point_rt.x, point_rt.y, mask, style->body.shadow.color, line_2d_blur[d]);
 801184a:	7833      	ldrb	r3, [r6, #0]
 801184c:	9300      	str	r3, [sp, #0]
 801184e:	9b02      	ldr	r3, [sp, #8]
 8011850:	465a      	mov	r2, fp
 8011852:	8a1b      	ldrh	r3, [r3, #16]
 8011854:	4629      	mov	r1, r5
 8011856:	4638      	mov	r0, r7
 8011858:	f7fe fe3e 	bl	80104d8 <lv_draw_px>
            if(point_rb.x > ofs_rb.x && point_rb.y > ofs_rb.y) {
 801185c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801185e:	42a3      	cmp	r3, r4
 8011860:	da08      	bge.n	8011874 <lv_draw_rect+0x434>
                lv_draw_px(point_rb.x, point_rb.y, mask, style->body.shadow.color, line_2d_blur[d]);
 8011862:	7833      	ldrb	r3, [r6, #0]
 8011864:	9300      	str	r3, [sp, #0]
 8011866:	9b02      	ldr	r3, [sp, #8]
 8011868:	465a      	mov	r2, fp
 801186a:	8a1b      	ldrh	r3, [r3, #16]
 801186c:	4621      	mov	r1, r4
 801186e:	4638      	mov	r0, r7
 8011870:	f7fe fe32 	bl	80104d8 <lv_draw_px>
 8011874:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011876:	3301      	adds	r3, #1
 8011878:	930d      	str	r3, [sp, #52]	; 0x34
 801187a:	3601      	adds	r6, #1
 801187c:	e733      	b.n	80116e6 <lv_draw_rect+0x2a6>
        opa_act = map[d];
 801187e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        lv_draw_fill(&right_area, mask, style->body.shadow.color, opa_act);
 8011880:	9a02      	ldr	r2, [sp, #8]
        opa_act = map[d];
 8011882:	5d1d      	ldrb	r5, [r3, r4]
        lv_draw_fill(&right_area, mask, style->body.shadow.color, opa_act);
 8011884:	8a12      	ldrh	r2, [r2, #16]
 8011886:	462b      	mov	r3, r5
 8011888:	4659      	mov	r1, fp
 801188a:	a820      	add	r0, sp, #128	; 0x80
 801188c:	f7fe fe73 	bl	8010576 <lv_draw_fill>
        right_area.x1++;
 8011890:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
        lv_draw_fill(&left_area, mask, style->body.shadow.color, opa_act);
 8011894:	9a02      	ldr	r2, [sp, #8]
        right_area.x1++;
 8011896:	3301      	adds	r3, #1
 8011898:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
        right_area.x2++;
 801189c:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
        lv_draw_fill(&left_area, mask, style->body.shadow.color, opa_act);
 80118a0:	8a12      	ldrh	r2, [r2, #16]
        right_area.x2++;
 80118a2:	3301      	adds	r3, #1
 80118a4:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
        lv_draw_fill(&left_area, mask, style->body.shadow.color, opa_act);
 80118a8:	4659      	mov	r1, fp
 80118aa:	462b      	mov	r3, r5
 80118ac:	a822      	add	r0, sp, #136	; 0x88
 80118ae:	f7fe fe62 	bl	8010576 <lv_draw_fill>
        left_area.x1--;
 80118b2:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
        lv_draw_fill(&top_area, mask, style->body.shadow.color, opa_act);
 80118b6:	9a02      	ldr	r2, [sp, #8]
        left_area.x1--;
 80118b8:	3b01      	subs	r3, #1
 80118ba:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
        left_area.x2--;
 80118be:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
        lv_draw_fill(&top_area, mask, style->body.shadow.color, opa_act);
 80118c2:	8a12      	ldrh	r2, [r2, #16]
        left_area.x2--;
 80118c4:	3b01      	subs	r3, #1
 80118c6:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
        lv_draw_fill(&top_area, mask, style->body.shadow.color, opa_act);
 80118ca:	4659      	mov	r1, fp
 80118cc:	462b      	mov	r3, r5
 80118ce:	a824      	add	r0, sp, #144	; 0x90
 80118d0:	f7fe fe51 	bl	8010576 <lv_draw_fill>
        top_area.y1--;
 80118d4:	f8bd 3092 	ldrh.w	r3, [sp, #146]	; 0x92
        lv_draw_fill(&bottom_area, mask, style->body.shadow.color, opa_act);
 80118d8:	9a02      	ldr	r2, [sp, #8]
        top_area.y1--;
 80118da:	3b01      	subs	r3, #1
 80118dc:	f8ad 3092 	strh.w	r3, [sp, #146]	; 0x92
        top_area.y2--;
 80118e0:	f8bd 3096 	ldrh.w	r3, [sp, #150]	; 0x96
        lv_draw_fill(&bottom_area, mask, style->body.shadow.color, opa_act);
 80118e4:	8a12      	ldrh	r2, [r2, #16]
        top_area.y2--;
 80118e6:	3b01      	subs	r3, #1
 80118e8:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
        lv_draw_fill(&bottom_area, mask, style->body.shadow.color, opa_act);
 80118ec:	4659      	mov	r1, fp
 80118ee:	462b      	mov	r3, r5
 80118f0:	a826      	add	r0, sp, #152	; 0x98
 80118f2:	f7fe fe40 	bl	8010576 <lv_draw_fill>
        bottom_area.y1++;
 80118f6:	f8bd 309a 	ldrh.w	r3, [sp, #154]	; 0x9a
 80118fa:	3301      	adds	r3, #1
 80118fc:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
        bottom_area.y2++;
 8011900:	f8bd 309e 	ldrh.w	r3, [sp, #158]	; 0x9e
 8011904:	3401      	adds	r4, #1
 8011906:	3301      	adds	r3, #1
 8011908:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
 801190c:	b224      	sxth	r4, r4
 801190e:	e75c      	b.n	80117ca <lv_draw_rect+0x38a>
    } else if(style->body.shadow.type == LV_SHADOW_BOTTOM) {
 8011910:	2b00      	cmp	r3, #0
 8011912:	f040 8085 	bne.w	8011a20 <lv_draw_rect+0x5e0>
    bool aa           = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8011916:	f7fe f807 	bl	800f928 <lv_refr_get_disp_refreshing>
 801191a:	f002 f9bd 	bl	8013c98 <lv_disp_get_antialiasing>
    lv_coord_t swidth = style->body.shadow.width;
 801191e:	9b02      	ldr	r3, [sp, #8]
    return area_p->y2 - area_p->y1 + 1;
 8011920:	f8ba 2006 	ldrh.w	r2, [sl, #6]
 8011924:	f9b3 4012 	ldrsh.w	r4, [r3, #18]
 8011928:	f8ba 3002 	ldrh.w	r3, [sl, #2]
    return area_p->x2 - area_p->x1 + 1;
 801192c:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    return area_p->y2 - area_p->y1 + 1;
 8011930:	3201      	adds	r2, #1
 8011932:	1ad2      	subs	r2, r2, r3
    return area_p->x2 - area_p->x1 + 1;
 8011934:	f8ba 3000 	ldrh.w	r3, [sl]
 8011938:	3101      	adds	r1, #1
 801193a:	1ac9      	subs	r1, r1, r3
    radius = lv_draw_cont_radius_corr(radius, width, height);
 801193c:	9b02      	ldr	r3, [sp, #8]
 801193e:	b212      	sxth	r2, r2
 8011940:	b209      	sxth	r1, r1
    bool aa           = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8011942:	4680      	mov	r8, r0
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8011944:	88d8      	ldrh	r0, [r3, #6]
 8011946:	f7ff fd3d 	bl	80113c4 <lv_draw_cont_radius_corr>
    radius += aa * SHADOW_BOTTOM_AA_EXTRA_RADIUS;
 801194a:	fa1f f888 	uxth.w	r8, r8
 801194e:	eb08 0548 	add.w	r5, r8, r8, lsl #1
 8011952:	4405      	add	r5, r0
 8011954:	b2ad      	uxth	r5, r5
 8011956:	b22b      	sxth	r3, r5
    swidth += aa;
 8011958:	eb08 0004 	add.w	r0, r8, r4
 801195c:	b280      	uxth	r0, r0
    uint32_t curve_x_size = ((radius + 1) + 3) & ~0x3; /*Round to 4*/
 801195e:	1d1c      	adds	r4, r3, #4
    swidth += aa;
 8011960:	b206      	sxth	r6, r0
    uint32_t curve_x_size = ((radius + 1) + 3) & ~0x3; /*Round to 4*/
 8011962:	f024 0403 	bic.w	r4, r4, #3
    lv_opa_t line_1d_blur_size = (swidth + 3) & ~0x3;     /*Round to 4*/
 8011966:	3003      	adds	r0, #3
    curve_x_size *= sizeof(lv_coord_t);
 8011968:	0064      	lsls	r4, r4, #1
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size);
 801196a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801196e:	4420      	add	r0, r4
    radius += aa * SHADOW_BOTTOM_AA_EXTRA_RADIUS;
 8011970:	9303      	str	r3, [sp, #12]
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size);
 8011972:	f7fe fd41 	bl	80103f8 <lv_draw_get_buf>
    lv_circ_init(&circ, &circ_tmp, radius);
 8011976:	f10d 0990 	add.w	r9, sp, #144	; 0x90
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size);
 801197a:	4607      	mov	r7, r0
    lv_opa_t * line_1d_blur = (lv_opa_t *)&draw_buf[curve_x_size];
 801197c:	4404      	add	r4, r0
    lv_circ_init(&circ, &circ_tmp, radius);
 801197e:	9a03      	ldr	r2, [sp, #12]
 8011980:	a922      	add	r1, sp, #136	; 0x88
 8011982:	4648      	mov	r0, r9
 8011984:	f002 fbb9 	bl	80140fa <lv_circ_init>
    while(lv_circ_cont(&circ)) {
 8011988:	4648      	mov	r0, r9
 801198a:	f002 fbbd 	bl	8014108 <lv_circ_cont>
 801198e:	2800      	cmp	r0, #0
 8011990:	f040 8404 	bne.w	801219c <lv_draw_rect+0xd5c>
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 8011994:	9b08      	ldr	r3, [sp, #32]
 8011996:	2bff      	cmp	r3, #255	; 0xff
 8011998:	9b02      	ldr	r3, [sp, #8]
 801199a:	bf18      	it	ne
 801199c:	9a08      	ldrne	r2, [sp, #32]
 801199e:	7a1b      	ldrb	r3, [r3, #8]
 80119a0:	bf1c      	itt	ne
 80119a2:	4353      	mulne	r3, r2
 80119a4:	f3c3 2307 	ubfxne	r3, r3, #8, #8
 80119a8:	fb13 f006 	smulbb	r0, r3, r6
    ofs_lb.x = coords->x1 + radius + aa;
 80119ac:	4621      	mov	r1, r4
    for(col = 0; col < swidth; col++) {
 80119ae:	1b0a      	subs	r2, r1, r4
 80119b0:	b212      	sxth	r2, r2
 80119b2:	4296      	cmp	r6, r2
 80119b4:	f300 8404 	bgt.w	80121c0 <lv_draw_rect+0xd80>
    ofs_l.x = coords->x1 + radius;
 80119b8:	f8ba 3000 	ldrh.w	r3, [sl]
    ofs_r.x = coords->x2 - radius;
 80119bc:	f8ba 0004 	ldrh.w	r0, [sl, #4]
    ofs_l.x = coords->x1 + radius;
 80119c0:	442b      	add	r3, r5
 80119c2:	b29b      	uxth	r3, r3
 80119c4:	9304      	str	r3, [sp, #16]
 80119c6:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 80119ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80119cc:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 80119d0:	3301      	adds	r3, #1
 80119d2:	eba3 0808 	sub.w	r8, r3, r8
 80119d6:	fa1f f388 	uxth.w	r3, r8
 80119da:	9305      	str	r3, [sp, #20]
    ofs_l.y = coords->y2 - radius + 1 - aa;
 80119dc:	1b5b      	subs	r3, r3, r5
 80119de:	b29b      	uxth	r3, r3
    ofs_r.x = coords->x2 - radius;
 80119e0:	1b45      	subs	r5, r0, r5
    ofs_l.y = coords->y2 - radius + 1 - aa;
 80119e2:	930c      	str	r3, [sp, #48]	; 0x30
    ofs_r.x = coords->x2 - radius;
 80119e4:	b2ab      	uxth	r3, r5
 80119e6:	9306      	str	r3, [sp, #24]
 80119e8:	f04f 0800 	mov.w	r8, #0
    for(col = 0; col <= radius; col++) {
 80119ec:	9a03      	ldr	r2, [sp, #12]
 80119ee:	fa0f f388 	sxth.w	r3, r8
 80119f2:	429a      	cmp	r2, r3
 80119f4:	f280 83ec 	bge.w	80121d0 <lv_draw_rect+0xd90>
    area_mid.x1 = ofs_l.x + 1;
 80119f8:	9b04      	ldr	r3, [sp, #16]
    area_mid.y1 = ofs_l.y + radius;
 80119fa:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 80119fe:	f8ad 809a 	strh.w	r8, [sp, #154]	; 0x9a
    area_mid.x1 = ofs_l.x + 1;
 8011a02:	3301      	adds	r3, #1
 8011a04:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
    area_mid.x2 = ofs_r.x - 1;
 8011a08:	9b06      	ldr	r3, [sp, #24]
    area_mid.y2 = area_mid.y1;
 8011a0a:	f8ad 809e 	strh.w	r8, [sp, #158]	; 0x9e
    area_mid.x2 = ofs_r.x - 1;
 8011a0e:	1e5d      	subs	r5, r3, #1
 8011a10:	f8ad 509c 	strh.w	r5, [sp, #156]	; 0x9c
    area_mid.y2 = area_mid.y1;
 8011a14:	2300      	movs	r3, #0
 8011a16:	1c5d      	adds	r5, r3, #1
    for(d = 0; d < swidth; d++) {
 8011a18:	b29b      	uxth	r3, r3
 8011a1a:	42b3      	cmp	r3, r6
 8011a1c:	f2c0 8420 	blt.w	8012260 <lv_draw_rect+0xe20>
    if(lv_area_is_on(coords, mask) == false) return;
 8011a20:	4659      	mov	r1, fp
 8011a22:	4650      	mov	r0, sl
 8011a24:	f002 fb2f 	bl	8014086 <lv_area_is_on>
 8011a28:	2800      	cmp	r0, #0
 8011a2a:	f000 83b4 	beq.w	8012196 <lv_draw_rect+0xd56>
    if(style->body.opa > LV_OPA_MIN) {
 8011a2e:	9b02      	ldr	r3, [sp, #8]
 8011a30:	7a1b      	ldrb	r3, [r3, #8]
 8011a32:	2b10      	cmp	r3, #16
 8011a34:	f240 81e9 	bls.w	8011e0a <lv_draw_rect+0x9ca>
    uint16_t radius = style->body.radius;
 8011a38:	9b02      	ldr	r3, [sp, #8]
 8011a3a:	88dd      	ldrh	r5, [r3, #6]
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8011a3c:	f7fd ff74 	bl	800f928 <lv_refr_get_disp_refreshing>
 8011a40:	f002 f92a 	bl	8013c98 <lv_disp_get_antialiasing>
    lv_color_t mcolor = style->body.main_color;
 8011a44:	9b02      	ldr	r3, [sp, #8]
    return area_p->y2 - area_p->y1 + 1;
 8011a46:	f8ba 6006 	ldrh.w	r6, [sl, #6]
 8011a4a:	f8b3 8002 	ldrh.w	r8, [r3, #2]
    lv_color_t gcolor = style->body.grad_color;
 8011a4e:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 8011a52:	f8ba 3002 	ldrh.w	r3, [sl, #2]
    return area_p->x2 - area_p->x1 + 1;
 8011a56:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    return area_p->y2 - area_p->y1 + 1;
 8011a5a:	3601      	adds	r6, #1
 8011a5c:	1af6      	subs	r6, r6, r3
    return area_p->x2 - area_p->x1 + 1;
 8011a5e:	f8ba 3000 	ldrh.w	r3, [sl]
 8011a62:	3101      	adds	r1, #1
 8011a64:	1ac9      	subs	r1, r1, r3
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 8011a66:	9b08      	ldr	r3, [sp, #32]
 8011a68:	2bff      	cmp	r3, #255	; 0xff
 8011a6a:	9b02      	ldr	r3, [sp, #8]
 8011a6c:	7a1f      	ldrb	r7, [r3, #8]
 8011a6e:	bf18      	it	ne
 8011a70:	9b08      	ldrne	r3, [sp, #32]
    return area_p->y2 - area_p->y1 + 1;
 8011a72:	b236      	sxth	r6, r6
 8011a74:	bf18      	it	ne
 8011a76:	435f      	mulne	r7, r3
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8011a78:	4604      	mov	r4, r0
    return area_p->x2 - area_p->x1 + 1;
 8011a7a:	b209      	sxth	r1, r1
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8011a7c:	4632      	mov	r2, r6
 8011a7e:	4628      	mov	r0, r5
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 8011a80:	bf18      	it	ne
 8011a82:	f3c7 2707 	ubfxne	r7, r7, #8, #8
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8011a86:	f7ff fc9d 	bl	80113c4 <lv_draw_cont_radius_corr>
    if(radius > height / 2) return;
 8011a8a:	2302      	movs	r3, #2
 8011a8c:	fb96 f3f3 	sdiv	r3, r6, r3
 8011a90:	4298      	cmp	r0, r3
 8011a92:	dc29      	bgt.n	8011ae8 <lv_draw_rect+0x6a8>
    work_area.x1 = coords->x1;
 8011a94:	f8ba 3000 	ldrh.w	r3, [sl]
 8011a98:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
    work_area.x2 = coords->x2;
 8011a9c:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 8011aa0:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
 8011aa4:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 8011aa8:	f8ba 5006 	ldrh.w	r5, [sl, #6]
        work_area.y1 = coords->y1 + radius;
 8011aac:	4403      	add	r3, r0
    if(mcolor.full == gcolor.full) {
 8011aae:	45c8      	cmp	r8, r9
        work_area.y1 = coords->y1 + radius;
 8011ab0:	b29b      	uxth	r3, r3
    if(mcolor.full == gcolor.full) {
 8011ab2:	f040 83ee 	bne.w	8012292 <lv_draw_rect+0xe52>
        if(style->body.radius != 0) {
 8011ab6:	9a02      	ldr	r2, [sp, #8]
        work_area.y1 = coords->y1 + radius;
 8011ab8:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
        work_area.y2 = coords->y2 - radius;
 8011abc:	1a2d      	subs	r5, r5, r0
        if(style->body.radius != 0) {
 8011abe:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
        work_area.y2 = coords->y2 - radius;
 8011ac2:	b2ad      	uxth	r5, r5
 8011ac4:	f8ad 509e 	strh.w	r5, [sp, #158]	; 0x9e
        if(style->body.radius != 0) {
 8011ac8:	b142      	cbz	r2, 8011adc <lv_draw_rect+0x69c>
            if(aa) {
 8011aca:	2c00      	cmp	r4, #0
 8011acc:	f000 83dc 	beq.w	8012288 <lv_draw_rect+0xe48>
                work_area.y1 += 2;
 8011ad0:	3302      	adds	r3, #2
 8011ad2:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
                work_area.y2 -= 2;
 8011ad6:	3d02      	subs	r5, #2
                work_area.y2 -= 1;
 8011ad8:	f8ad 509e 	strh.w	r5, [sp, #158]	; 0x9e
        lv_draw_fill(&work_area, mask, mcolor, opa);
 8011adc:	463b      	mov	r3, r7
 8011ade:	4642      	mov	r2, r8
 8011ae0:	4659      	mov	r1, fp
 8011ae2:	a826      	add	r0, sp, #152	; 0x98
 8011ae4:	f7fe fd47 	bl	8010576 <lv_draw_fill>
        if(style->body.radius != 0) {
 8011ae8:	9b02      	ldr	r3, [sp, #8]
 8011aea:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 8011aee:	2c00      	cmp	r4, #0
 8011af0:	f000 818b 	beq.w	8011e0a <lv_draw_rect+0x9ca>
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8011af4:	f7fd ff18 	bl	800f928 <lv_refr_get_disp_refreshing>
 8011af8:	f002 f8ce 	bl	8013c98 <lv_disp_get_antialiasing>
    lv_color_t mcolor = style->body.main_color;
 8011afc:	9b02      	ldr	r3, [sp, #8]
    return area_p->y2 - area_p->y1 + 1;
 8011afe:	f8ba 2002 	ldrh.w	r2, [sl, #2]
 8011b02:	885b      	ldrh	r3, [r3, #2]
 8011b04:	9303      	str	r3, [sp, #12]
    lv_color_t gcolor = style->body.grad_color;
 8011b06:	9b02      	ldr	r3, [sp, #8]
    return area_p->x2 - area_p->x1 + 1;
 8011b08:	f8ba 1004 	ldrh.w	r1, [sl, #4]
 8011b0c:	f8b3 9004 	ldrh.w	r9, [r3, #4]
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 8011b10:	9b08      	ldr	r3, [sp, #32]
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8011b12:	9014      	str	r0, [sp, #80]	; 0x50
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 8011b14:	2bff      	cmp	r3, #255	; 0xff
 8011b16:	9b02      	ldr	r3, [sp, #8]
 8011b18:	7a1e      	ldrb	r6, [r3, #8]
 8011b1a:	bf17      	itett	ne
 8011b1c:	9b08      	ldrne	r3, [sp, #32]
 8011b1e:	9604      	streq	r6, [sp, #16]
 8011b20:	435e      	mulne	r6, r3
 8011b22:	f3c6 2307 	ubfxne	r3, r6, #8, #8
 8011b26:	bf18      	it	ne
 8011b28:	9304      	strne	r3, [sp, #16]
    return area_p->y2 - area_p->y1 + 1;
 8011b2a:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 8011b2e:	3301      	adds	r3, #1
 8011b30:	1a9b      	subs	r3, r3, r2
 8011b32:	b21b      	sxth	r3, r3
 8011b34:	9305      	str	r3, [sp, #20]
    return area_p->x2 - area_p->x1 + 1;
 8011b36:	f8ba 3000 	ldrh.w	r3, [sl]
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8011b3a:	9a05      	ldr	r2, [sp, #20]
 8011b3c:	3101      	adds	r1, #1
 8011b3e:	1ac9      	subs	r1, r1, r3
    uint16_t radius = style->body.radius;
 8011b40:	b2a4      	uxth	r4, r4
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8011b42:	b209      	sxth	r1, r1
 8011b44:	4620      	mov	r0, r4
 8011b46:	f7ff fc3d 	bl	80113c4 <lv_draw_cont_radius_corr>
    lt_origo.x = coords->x1 + radius + aa;
 8011b4a:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 8011b4e:	f8ba 7000 	ldrh.w	r7, [sl]
    lt_origo.y = coords->y1 + radius + aa;
 8011b52:	f8ba 4002 	ldrh.w	r4, [sl, #2]
    lb_origo.y = coords->y2 - radius - aa;
 8011b56:	f8ba 8006 	ldrh.w	r8, [sl, #6]
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8011b5a:	9009      	str	r0, [sp, #36]	; 0x24
    lt_origo.x = coords->x1 + radius + aa;
 8011b5c:	442f      	add	r7, r5
 8011b5e:	4407      	add	r7, r0
    lt_origo.y = coords->y1 + radius + aa;
 8011b60:	442c      	add	r4, r5
 8011b62:	4404      	add	r4, r0
    lt_origo.x = coords->x1 + radius + aa;
 8011b64:	b2bb      	uxth	r3, r7
 8011b66:	9306      	str	r3, [sp, #24]
    lt_origo.y = coords->y1 + radius + aa;
 8011b68:	b2a3      	uxth	r3, r4
 8011b6a:	930a      	str	r3, [sp, #40]	; 0x28
    lb_origo.y = coords->y2 - radius - aa;
 8011b6c:	eba8 0800 	sub.w	r8, r8, r0
    lt_origo.y = coords->y1 + radius + aa;
 8011b70:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8011b74:	9315      	str	r3, [sp, #84]	; 0x54
    lb_origo.y = coords->y2 - radius - aa;
 8011b76:	eba8 0805 	sub.w	r8, r8, r5
 8011b7a:	fa1f f388 	uxth.w	r3, r8
 8011b7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8011b80:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8011b84:	9316      	str	r3, [sp, #88]	; 0x58
    rt_origo.x = coords->x2 - radius - aa;
 8011b86:	f8ba 3004 	ldrh.w	r3, [sl, #4]
    lv_circ_init(&cir, &cir_tmp, radius);
 8011b8a:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
    rt_origo.x = coords->x2 - radius - aa;
 8011b8e:	1a1b      	subs	r3, r3, r0
    lv_circ_init(&cir, &cir_tmp, radius);
 8011b90:	ac1e      	add	r4, sp, #120	; 0x78
    rt_origo.x = coords->x2 - radius - aa;
 8011b92:	1b5d      	subs	r5, r3, r5
 8011b94:	b2ab      	uxth	r3, r5
    lv_circ_init(&cir, &cir_tmp, radius);
 8011b96:	4642      	mov	r2, r8
 8011b98:	a91d      	add	r1, sp, #116	; 0x74
 8011b9a:	4620      	mov	r0, r4
    rt_origo.x = coords->x2 - radius - aa;
 8011b9c:	9307      	str	r3, [sp, #28]
    lv_circ_init(&cir, &cir_tmp, radius);
 8011b9e:	f002 faac 	bl	80140fa <lv_circ_init>
    lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 8011ba2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011ba4:	f8bd 207a 	ldrh.w	r2, [sp, #122]	; 0x7a
 8011ba8:	f8bd 1078 	ldrh.w	r1, [sp, #120]	; 0x78
 8011bac:	9806      	ldr	r0, [sp, #24]
 8011bae:	441a      	add	r2, r3
                rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
 8011bb0:	9b07      	ldr	r3, [sp, #28]
    lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 8011bb2:	b212      	sxth	r2, r2
                rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
 8011bb4:	440b      	add	r3, r1
    lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 8011bb6:	1a41      	subs	r1, r0, r1
 8011bb8:	9200      	str	r2, [sp, #0]
 8011bba:	b21b      	sxth	r3, r3
 8011bbc:	b209      	sxth	r1, r1
 8011bbe:	a824      	add	r0, sp, #144	; 0x90
 8011bc0:	f002 f9e8 	bl	8013f94 <lv_area_set>
    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 8011bc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011bc6:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
 8011bca:	f8bd 107a 	ldrh.w	r1, [sp, #122]	; 0x7a
 8011bce:	9806      	ldr	r0, [sp, #24]
 8011bd0:	441a      	add	r2, r3
                rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
 8011bd2:	9b07      	ldr	r3, [sp, #28]
    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 8011bd4:	b212      	sxth	r2, r2
                rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
 8011bd6:	440b      	add	r3, r1
    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 8011bd8:	1a41      	subs	r1, r0, r1
 8011bda:	9200      	str	r2, [sp, #0]
 8011bdc:	b21b      	sxth	r3, r3
 8011bde:	b209      	sxth	r1, r1
 8011be0:	a826      	add	r0, sp, #152	; 0x98
 8011be2:	f002 f9d7 	bl	8013f94 <lv_area_set>
    lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 8011be6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011be8:	f8bd 207a 	ldrh.w	r2, [sp, #122]	; 0x7a
 8011bec:	f8bd 1078 	ldrh.w	r1, [sp, #120]	; 0x78
 8011bf0:	9806      	ldr	r0, [sp, #24]
 8011bf2:	1a9a      	subs	r2, r3, r2
                rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
 8011bf4:	9b07      	ldr	r3, [sp, #28]
    lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 8011bf6:	b212      	sxth	r2, r2
                rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
 8011bf8:	440b      	add	r3, r1
    lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 8011bfa:	1a41      	subs	r1, r0, r1
 8011bfc:	9200      	str	r2, [sp, #0]
 8011bfe:	b21b      	sxth	r3, r3
 8011c00:	b209      	sxth	r1, r1
 8011c02:	a822      	add	r0, sp, #136	; 0x88
 8011c04:	f002 f9c6 	bl	8013f94 <lv_area_set>
    lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 8011c08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c0a:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
 8011c0e:	f8bd 107a 	ldrh.w	r1, [sp, #122]	; 0x7a
 8011c12:	9806      	ldr	r0, [sp, #24]
 8011c14:	1a9a      	subs	r2, r3, r2
                rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
 8011c16:	9b07      	ldr	r3, [sp, #28]
    lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 8011c18:	b212      	sxth	r2, r2
                rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
 8011c1a:	440b      	add	r3, r1
    lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 8011c1c:	1a41      	subs	r1, r0, r1
 8011c1e:	b21b      	sxth	r3, r3
 8011c20:	9200      	str	r2, [sp, #0]
 8011c22:	b209      	sxth	r1, r1
 8011c24:	a820      	add	r0, sp, #128	; 0x80
 8011c26:	f002 f9b5 	bl	8013f94 <lv_area_set>
    lv_coord_t out_y_seg_start = 0;
 8011c2a:	2300      	movs	r3, #0
 8011c2c:	930e      	str	r3, [sp, #56]	; 0x38
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 8011c2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    while(lv_circ_cont(&cir)) {
 8011c30:	9419      	str	r4, [sp, #100]	; 0x64
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 8011c32:	3301      	adds	r3, #1
 8011c34:	931b      	str	r3, [sp, #108]	; 0x6c
    while(lv_circ_cont(&cir)) {
 8011c36:	9819      	ldr	r0, [sp, #100]	; 0x64
 8011c38:	f002 fa66 	bl	8014108 <lv_circ_cont>
 8011c3c:	2800      	cmp	r0, #0
 8011c3e:	f040 8357 	bne.w	80122f0 <lv_draw_rect+0xeb0>
    if(mcolor.full == gcolor.full)
 8011c42:	9b03      	ldr	r3, [sp, #12]
 8011c44:	454b      	cmp	r3, r9
 8011c46:	f040 84fc 	bne.w	8012642 <lv_draw_rect+0x1202>
        act_color = mcolor;
 8011c4a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    lv_draw_fill(&edge_top_area, mask, act_color, opa);
 8011c4e:	9b04      	ldr	r3, [sp, #16]
 8011c50:	4659      	mov	r1, fp
 8011c52:	a820      	add	r0, sp, #128	; 0x80
 8011c54:	f7fe fc8f 	bl	8010576 <lv_draw_fill>
    if(edge_top_area.y1 != mid_top_area.y1) {
 8011c58:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
 8011c5c:	f9bd 2082 	ldrsh.w	r2, [sp, #130]	; 0x82
 8011c60:	429a      	cmp	r2, r3
 8011c62:	d00a      	beq.n	8011c7a <lv_draw_rect+0x83a>
        if(mcolor.full == gcolor.full)
 8011c64:	9a03      	ldr	r2, [sp, #12]
 8011c66:	454a      	cmp	r2, r9
 8011c68:	f040 84fe 	bne.w	8012668 <lv_draw_rect+0x1228>
            act_color = mcolor;
 8011c6c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
        lv_draw_fill(&mid_top_area, mask, act_color, opa);
 8011c70:	9b04      	ldr	r3, [sp, #16]
 8011c72:	4659      	mov	r1, fp
 8011c74:	a822      	add	r0, sp, #136	; 0x88
 8011c76:	f7fe fc7e 	bl	8010576 <lv_draw_fill>
    if(mcolor.full == gcolor.full)
 8011c7a:	9b03      	ldr	r3, [sp, #12]
 8011c7c:	454b      	cmp	r3, r9
 8011c7e:	f040 8504 	bne.w	801268a <lv_draw_rect+0x124a>
        act_color = mcolor;
 8011c82:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    lv_draw_fill(&mid_bot_area, mask, act_color, opa);
 8011c86:	9b04      	ldr	r3, [sp, #16]
 8011c88:	4659      	mov	r1, fp
 8011c8a:	a824      	add	r0, sp, #144	; 0x90
 8011c8c:	f7fe fc73 	bl	8010576 <lv_draw_fill>
    if(edge_bot_area.y1 != mid_bot_area.y1) {
 8011c90:	f9bd 309a 	ldrsh.w	r3, [sp, #154]	; 0x9a
 8011c94:	f9bd 2092 	ldrsh.w	r2, [sp, #146]	; 0x92
 8011c98:	429a      	cmp	r2, r3
 8011c9a:	d00a      	beq.n	8011cb2 <lv_draw_rect+0x872>
        if(mcolor.full == gcolor.full)
 8011c9c:	9a03      	ldr	r2, [sp, #12]
 8011c9e:	454a      	cmp	r2, r9
 8011ca0:	f040 8506 	bne.w	80126b0 <lv_draw_rect+0x1270>
            act_color = mcolor;
 8011ca4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
        lv_draw_fill(&edge_bot_area, mask, act_color, opa);
 8011ca8:	9b04      	ldr	r3, [sp, #16]
 8011caa:	4659      	mov	r1, fp
 8011cac:	a826      	add	r0, sp, #152	; 0x98
 8011cae:	f7fe fc62 	bl	8010576 <lv_draw_fill>
    if(aa) {
 8011cb2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	f000 80a8 	beq.w	8011e0a <lv_draw_rect+0x9ca>
        edge_top_area.x1 = coords->x1 + radius + 2;
 8011cba:	f8ba 3000 	ldrh.w	r3, [sl]
 8011cbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011cc0:	3302      	adds	r3, #2
 8011cc2:	4413      	add	r3, r2
 8011cc4:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
        edge_top_area.x2 = coords->x2 - radius - 2;
 8011cc8:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 8011ccc:	3b02      	subs	r3, #2
 8011cce:	1a9b      	subs	r3, r3, r2
        lv_draw_fill(&edge_top_area, mask, style->body.main_color, opa);
 8011cd0:	9a02      	ldr	r2, [sp, #8]
        edge_top_area.x2 = coords->x2 - radius - 2;
 8011cd2:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
        edge_top_area.y1 = coords->y1;
 8011cd6:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
 8011cda:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
        edge_top_area.y2 = coords->y1;
 8011cde:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
        lv_draw_fill(&edge_top_area, mask, style->body.main_color, opa);
 8011ce2:	8852      	ldrh	r2, [r2, #2]
 8011ce4:	9b04      	ldr	r3, [sp, #16]
 8011ce6:	4659      	mov	r1, fp
 8011ce8:	a820      	add	r0, sp, #128	; 0x80
 8011cea:	f7fe fc44 	bl	8010576 <lv_draw_fill>
        lv_draw_fill(&edge_top_area, mask, style->body.grad_color, opa);
 8011cee:	9a02      	ldr	r2, [sp, #8]
        edge_top_area.y1 = coords->y2;
 8011cf0:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 8011cf4:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
        edge_top_area.y2 = coords->y2;
 8011cf8:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
        lv_draw_fill(&edge_top_area, mask, style->body.grad_color, opa);
 8011cfc:	8892      	ldrh	r2, [r2, #4]
 8011cfe:	9b04      	ldr	r3, [sp, #16]
 8011d00:	4659      	mov	r1, fp
 8011d02:	a820      	add	r0, sp, #128	; 0x80
 8011d04:	f7fe fc37 	bl	8010576 <lv_draw_fill>
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 8011d08:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8011d0c:	930f      	str	r3, [sp, #60]	; 0x3c
 8011d0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011d10:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
        aa_color_hor_bottom = lv_color_mix(gcolor, mcolor, mix);
 8011d14:	f8bd 100c 	ldrh.w	r1, [sp, #12]
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 8011d18:	1a9b      	subs	r3, r3, r2
 8011d1a:	b21b      	sxth	r3, r3
 8011d1c:	9313      	str	r3, [sp, #76]	; 0x4c
        mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 8011d1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d20:	eba3 0408 	sub.w	r4, r3, r8
 8011d24:	ebc4 2404 	rsb	r4, r4, r4, lsl #8
 8011d28:	9b05      	ldr	r3, [sp, #20]
 8011d2a:	fbb4 f4f3 	udiv	r4, r4, r3
 8011d2e:	b2e4      	uxtb	r4, r4
        aa_color_hor_bottom = lv_color_mix(gcolor, mcolor, mix);
 8011d30:	4622      	mov	r2, r4
 8011d32:	4648      	mov	r0, r9
 8011d34:	f7ff fb1a 	bl	801136c <lv_color_mix>
        aa_color_hor_top    = lv_color_mix(mcolor, gcolor, mix);
 8011d38:	4622      	mov	r2, r4
        aa_color_hor_bottom = lv_color_mix(gcolor, mcolor, mix);
 8011d3a:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
        aa_color_hor_top    = lv_color_mix(mcolor, gcolor, mix);
 8011d3e:	4649      	mov	r1, r9
 8011d40:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 8011d44:	f7ff fb12 	bl	801136c <lv_color_mix>
 8011d48:	2300      	movs	r3, #0
 8011d4a:	9310      	str	r3, [sp, #64]	; 0x40
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 8011d4c:	fa1f f388 	uxth.w	r3, r8
 8011d50:	9312      	str	r3, [sp, #72]	; 0x48
 8011d52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011d54:	9a12      	ldr	r2, [sp, #72]	; 0x48
        aa_color_hor_top    = lv_color_mix(mcolor, gcolor, mix);
 8011d56:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 8011d5a:	3301      	adds	r3, #1
 8011d5c:	18d3      	adds	r3, r2, r3
 8011d5e:	9316      	str	r3, [sp, #88]	; 0x58
 8011d60:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
        for(i = 0; i < seg_size; i++) {
 8011d64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011d66:	428b      	cmp	r3, r1
 8011d68:	f300 84b3 	bgt.w	80126d2 <lv_draw_rect+0x1292>
        if(LV_MATH_ABS(aa_p.x - aa_p.y) == seg_size) {
 8011d6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011d6e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011d70:	eba8 0303 	sub.w	r3, r8, r3
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	bfb8      	it	lt
 8011d78:	425b      	neglt	r3, r3
 8011d7a:	4293      	cmp	r3, r2
 8011d7c:	d145      	bne.n	8011e0a <lv_draw_rect+0x9ca>
            mix                 = (uint32_t)((uint32_t)(out_x_last)*255) / height;
 8011d7e:	9b05      	ldr	r3, [sp, #20]
            aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 8011d80:	f8bd 100c 	ldrh.w	r1, [sp, #12]
            mix                 = (uint32_t)((uint32_t)(out_x_last)*255) / height;
 8011d84:	ebc8 2408 	rsb	r4, r8, r8, lsl #8
 8011d88:	fbb4 f4f3 	udiv	r4, r4, r3
 8011d8c:	b2e4      	uxtb	r4, r4
            aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 8011d8e:	4622      	mov	r2, r4
 8011d90:	4648      	mov	r0, r9
 8011d92:	f7ff faeb 	bl	801136c <lv_color_mix>
            aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 8011d96:	4622      	mov	r2, r4
            aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 8011d98:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
            aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 8011d9c:	4649      	mov	r1, r9
 8011d9e:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 8011da2:	f7ff fae3 	bl	801136c <lv_color_mix>
            lv_opa_t aa_opa = opa >> 1;
 8011da6:	9b04      	ldr	r3, [sp, #16]
            aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 8011da8:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
            lv_opa_t aa_opa = opa >> 1;
 8011dac:	085e      	lsrs	r6, r3, #1
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p), rb_origo.y + LV_CIRC_OCT2_Y(aa_p), mask, aa_color_hor_bottom,
 8011dae:	9b07      	ldr	r3, [sp, #28]
 8011db0:	9600      	str	r6, [sp, #0]
 8011db2:	fa1f f488 	uxth.w	r4, r8
 8011db6:	4423      	add	r3, r4
 8011db8:	b21d      	sxth	r5, r3
 8011dba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011dbc:	4423      	add	r3, r4
 8011dbe:	fa0f f883 	sxth.w	r8, r3
 8011dc2:	465a      	mov	r2, fp
 8011dc4:	b283      	uxth	r3, r0
 8011dc6:	4641      	mov	r1, r8
 8011dc8:	4628      	mov	r0, r5
 8011dca:	f7fe fb85 	bl	80104d8 <lv_draw_px>
            lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p), lb_origo.y + LV_CIRC_OCT4_Y(aa_p), mask, aa_color_hor_bottom,
 8011dce:	9b06      	ldr	r3, [sp, #24]
 8011dd0:	9600      	str	r6, [sp, #0]
 8011dd2:	1b1f      	subs	r7, r3, r4
 8011dd4:	b23f      	sxth	r7, r7
 8011dd6:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8011dda:	465a      	mov	r2, fp
 8011ddc:	4641      	mov	r1, r8
 8011dde:	4638      	mov	r0, r7
 8011de0:	f7fe fb7a 	bl	80104d8 <lv_draw_px>
            lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p), lt_origo.y + LV_CIRC_OCT6_Y(aa_p), mask, aa_color_hor_top,
 8011de4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011de6:	9600      	str	r6, [sp, #0]
 8011de8:	1b1c      	subs	r4, r3, r4
 8011dea:	b224      	sxth	r4, r4
 8011dec:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8011df0:	465a      	mov	r2, fp
 8011df2:	4621      	mov	r1, r4
 8011df4:	4638      	mov	r0, r7
 8011df6:	f7fe fb6f 	bl	80104d8 <lv_draw_px>
            lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p), rt_origo.y + LV_CIRC_OCT8_Y(aa_p), mask, aa_color_hor_top,
 8011dfa:	9600      	str	r6, [sp, #0]
 8011dfc:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8011e00:	465a      	mov	r2, fp
 8011e02:	4621      	mov	r1, r4
 8011e04:	4628      	mov	r0, r5
 8011e06:	f7fe fb67 	bl	80104d8 <lv_draw_px>
    if(style->body.border.width != 0 && style->body.border.part != LV_BORDER_NONE &&
 8011e0a:	9b02      	ldr	r3, [sp, #8]
 8011e0c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	f000 81c0 	beq.w	8012196 <lv_draw_rect+0xd56>
 8011e16:	9b02      	ldr	r3, [sp, #8]
 8011e18:	7b9b      	ldrb	r3, [r3, #14]
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	f000 81bb 	beq.w	8012196 <lv_draw_rect+0xd56>
 8011e20:	9b02      	ldr	r3, [sp, #8]
 8011e22:	7bdb      	ldrb	r3, [r3, #15]
 8011e24:	2b0f      	cmp	r3, #15
 8011e26:	f240 81b6 	bls.w	8012196 <lv_draw_rect+0xd56>
    uint16_t radius = style->body.radius;
 8011e2a:	9b02      	ldr	r3, [sp, #8]
 8011e2c:	f8b3 9006 	ldrh.w	r9, [r3, #6]
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8011e30:	f7fd fd7a 	bl	800f928 <lv_refr_get_disp_refreshing>
 8011e34:	f001 ff30 	bl	8013c98 <lv_disp_get_antialiasing>
 8011e38:	f8ba 1004 	ldrh.w	r1, [sl, #4]
 8011e3c:	f8ba 3000 	ldrh.w	r3, [sl]
    return area_p->y2 - area_p->y1 + 1;
 8011e40:	f8ba 2006 	ldrh.w	r2, [sl, #6]
    return area_p->x2 - area_p->x1 + 1;
 8011e44:	3101      	adds	r1, #1
 8011e46:	1ac9      	subs	r1, r1, r3
    return area_p->y2 - area_p->y1 + 1;
 8011e48:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 8011e4c:	4680      	mov	r8, r0
 8011e4e:	3201      	adds	r2, #1
    lv_opa_t opa      = opa_scale == LV_OPA_COVER ? style->body.border.opa
 8011e50:	9808      	ldr	r0, [sp, #32]
 8011e52:	1ad2      	subs	r2, r2, r3
    lv_coord_t bwidth = style->body.border.width;
 8011e54:	9b02      	ldr	r3, [sp, #8]
    lv_opa_t opa      = opa_scale == LV_OPA_COVER ? style->body.border.opa
 8011e56:	28ff      	cmp	r0, #255	; 0xff
 8011e58:	9802      	ldr	r0, [sp, #8]
    lv_coord_t bwidth = style->body.border.width;
 8011e5a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8011e5e:	7bc4      	ldrb	r4, [r0, #15]
    lv_opa_t opa      = opa_scale == LV_OPA_COVER ? style->body.border.opa
 8011e60:	bf18      	it	ne
 8011e62:	9808      	ldrne	r0, [sp, #32]
    bwidth--;
 8011e64:	b29b      	uxth	r3, r3
    lv_opa_t opa      = opa_scale == LV_OPA_COVER ? style->body.border.opa
 8011e66:	bf18      	it	ne
 8011e68:	4344      	mulne	r4, r0
    bwidth--;
 8011e6a:	f103 36ff 	add.w	r6, r3, #4294967295	; 0xffffffff
    lv_border_part_t part = style->body.border.part;
 8011e6e:	9802      	ldr	r0, [sp, #8]
    bwidth--;
 8011e70:	9303      	str	r3, [sp, #12]
 8011e72:	b2b6      	uxth	r6, r6
 8011e74:	b212      	sxth	r2, r2
    lv_border_part_t part = style->body.border.part;
 8011e76:	7b85      	ldrb	r5, [r0, #14]
    lv_color_t color      = style->body.border.color;
 8011e78:	8947      	ldrh	r7, [r0, #10]
    bwidth--;
 8011e7a:	b233      	sxth	r3, r6
    return area_p->x2 - area_p->x1 + 1;
 8011e7c:	b209      	sxth	r1, r1
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8011e7e:	4648      	mov	r0, r9
    lv_opa_t opa      = opa_scale == LV_OPA_COVER ? style->body.border.opa
 8011e80:	bf18      	it	ne
 8011e82:	f3c4 2407 	ubfxne	r4, r4, #8, #8
    bwidth--;
 8011e86:	9304      	str	r3, [sp, #16]
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8011e88:	f7ff fa9c 	bl	80113c4 <lv_draw_cont_radius_corr>
    if(radius < bwidth) {
 8011e8c:	9b04      	ldr	r3, [sp, #16]
 8011e8e:	4298      	cmp	r0, r3
        length_corr = bwidth - radius - aa;
 8011e90:	bfbd      	ittte	lt
 8011e92:	1a32      	sublt	r2, r6, r0
 8011e94:	eba2 0208 	sublt.w	r2, r2, r8
 8011e98:	b212      	sxthlt	r2, r2
    lv_coord_t length_corr = 0;
 8011e9a:	2200      	movge	r2, #0
 8011e9c:	9204      	str	r2, [sp, #16]
    if(style->body.radius == 0) {
 8011e9e:	9a02      	ldr	r2, [sp, #8]
 8011ea0:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
        corner_size = radius + aa;
 8011ea4:	bfa8      	it	ge
 8011ea6:	eb00 0308 	addge.w	r3, r0, r8
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8011eaa:	4681      	mov	r9, r0
        corner_size = radius + aa;
 8011eac:	bfa8      	it	ge
 8011eae:	b21b      	sxthge	r3, r3
 8011eb0:	f005 0202 	and.w	r2, r5, #2
    if(style->body.radius == 0) {
 8011eb4:	2900      	cmp	r1, #0
 8011eb6:	f040 849b 	bne.w	80127f0 <lv_draw_rect+0x13b0>
        if(part & LV_BORDER_TOP) {
 8011eba:	f002 08ff 	and.w	r8, r2, #255	; 0xff
 8011ebe:	b1a2      	cbz	r2, 8011eea <lv_draw_rect+0xaaa>
            work_area.x1 = coords->x1;
 8011ec0:	f8ba 3000 	ldrh.w	r3, [sl]
 8011ec4:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            work_area.x2 = coords->x2;
 8011ec8:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 8011ecc:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            work_area.y1 = coords->y1;
 8011ed0:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
 8011ed4:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            work_area.y2 = coords->y1 + bwidth;
 8011ed8:	4433      	add	r3, r6
 8011eda:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&work_area, mask, color, opa);
 8011ede:	463a      	mov	r2, r7
 8011ee0:	4623      	mov	r3, r4
 8011ee2:	4659      	mov	r1, fp
 8011ee4:	a826      	add	r0, sp, #152	; 0x98
 8011ee6:	f7fe fb46 	bl	8010576 <lv_draw_fill>
        if(part & LV_BORDER_RIGHT) {
 8011eea:	0729      	lsls	r1, r5, #28
 8011eec:	d520      	bpl.n	8011f30 <lv_draw_rect+0xaf0>
            work_area.x1 = coords->x2 - bwidth;
 8011eee:	f9ba 3004 	ldrsh.w	r3, [sl, #4]
            work_area.x2 = coords->x2;
 8011ef2:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            work_area.x1 = coords->x2 - bwidth;
 8011ef6:	1b9a      	subs	r2, r3, r6
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 8011ef8:	f1b8 0f00 	cmp.w	r8, #0
            work_area.x1 = coords->x2 - bwidth;
 8011efc:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 8011f00:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 8011f04:	9a03      	ldr	r2, [sp, #12]
 8011f06:	bf08      	it	eq
 8011f08:	2200      	moveq	r2, #0
 8011f0a:	4413      	add	r3, r2
 8011f0c:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 8011f10:	9a03      	ldr	r2, [sp, #12]
 8011f12:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 8011f16:	f015 0f01 	tst.w	r5, #1
 8011f1a:	bf08      	it	eq
 8011f1c:	2200      	moveq	r2, #0
 8011f1e:	1a9b      	subs	r3, r3, r2
 8011f20:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&work_area, mask, color, opa);
 8011f24:	463a      	mov	r2, r7
 8011f26:	4623      	mov	r3, r4
 8011f28:	4659      	mov	r1, fp
 8011f2a:	a826      	add	r0, sp, #152	; 0x98
 8011f2c:	f7fe fb23 	bl	8010576 <lv_draw_fill>
        if(part & LV_BORDER_LEFT) {
 8011f30:	f015 0f04 	tst.w	r5, #4
 8011f34:	f005 0501 	and.w	r5, r5, #1
 8011f38:	d020      	beq.n	8011f7c <lv_draw_rect+0xb3c>
            work_area.x1 = coords->x1;
 8011f3a:	f9ba 3000 	ldrsh.w	r3, [sl]
 8011f3e:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            work_area.x2 = coords->x1 + bwidth;
 8011f42:	4433      	add	r3, r6
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 8011f44:	9a03      	ldr	r2, [sp, #12]
            work_area.x2 = coords->x1 + bwidth;
 8011f46:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 8011f4a:	f1b8 0f00 	cmp.w	r8, #0
 8011f4e:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 8011f52:	bf08      	it	eq
 8011f54:	2200      	moveq	r2, #0
 8011f56:	4413      	add	r3, r2
 8011f58:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 8011f5c:	9a03      	ldr	r2, [sp, #12]
 8011f5e:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 8011f62:	2d00      	cmp	r5, #0
 8011f64:	bf08      	it	eq
 8011f66:	2200      	moveq	r2, #0
 8011f68:	1a9b      	subs	r3, r3, r2
 8011f6a:	9203      	str	r2, [sp, #12]
 8011f6c:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&work_area, mask, color, opa);
 8011f70:	463a      	mov	r2, r7
 8011f72:	4623      	mov	r3, r4
 8011f74:	4659      	mov	r1, fp
 8011f76:	a826      	add	r0, sp, #152	; 0x98
 8011f78:	f7fe fafd 	bl	8010576 <lv_draw_fill>
        if(part & LV_BORDER_BOTTOM) {
 8011f7c:	b1a5      	cbz	r5, 8011fa8 <lv_draw_rect+0xb68>
            work_area.x1 = coords->x1;
 8011f7e:	f8ba 3000 	ldrh.w	r3, [sl]
 8011f82:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            work_area.x2 = coords->x2;
 8011f86:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 8011f8a:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            work_area.y1 = coords->y2 - bwidth;
 8011f8e:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 8011f92:	1b9e      	subs	r6, r3, r6
 8011f94:	f8ad 609a 	strh.w	r6, [sp, #154]	; 0x9a
            work_area.y2 = coords->y2;
 8011f98:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&work_area, mask, color, opa);
 8011f9c:	463a      	mov	r2, r7
 8011f9e:	4623      	mov	r3, r4
 8011fa0:	4659      	mov	r1, fp
 8011fa2:	a826      	add	r0, sp, #152	; 0x98
 8011fa4:	f7fe fae7 	bl	8010576 <lv_draw_fill>
        if(style->body.radius != 0) {
 8011fa8:	9b02      	ldr	r3, [sp, #8]
 8011faa:	f9b3 5006 	ldrsh.w	r5, [r3, #6]
 8011fae:	2d00      	cmp	r5, #0
 8011fb0:	f000 80f1 	beq.w	8012196 <lv_draw_rect+0xd56>
    bool aa               = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8011fb4:	f7fd fcb8 	bl	800f928 <lv_refr_get_disp_refreshing>
 8011fb8:	f001 fe6e 	bl	8013c98 <lv_disp_get_antialiasing>
    lv_coord_t bwidth     = style->body.border.width;
 8011fbc:	9b02      	ldr	r3, [sp, #8]
    bool aa               = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8011fbe:	900e      	str	r0, [sp, #56]	; 0x38
    lv_coord_t bwidth     = style->body.border.width;
 8011fc0:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
    lv_color_t color      = style->body.border.color;
 8011fc4:	895b      	ldrh	r3, [r3, #10]
 8011fc6:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
    lv_border_part_t part = style->body.border.part;
 8011fca:	9b02      	ldr	r3, [sp, #8]
 8011fcc:	7b9b      	ldrb	r3, [r3, #14]
 8011fce:	9305      	str	r3, [sp, #20]
    lv_opa_t opa          = opa_scale == LV_OPA_COVER ? style->body.border.opa
 8011fd0:	9b08      	ldr	r3, [sp, #32]
 8011fd2:	2bff      	cmp	r3, #255	; 0xff
 8011fd4:	9b02      	ldr	r3, [sp, #8]
 8011fd6:	bf18      	it	ne
 8011fd8:	9a08      	ldrne	r2, [sp, #32]
 8011fda:	7bdb      	ldrb	r3, [r3, #15]
 8011fdc:	bf1c      	itt	ne
 8011fde:	4353      	mulne	r3, r2
 8011fe0:	f3c3 2307 	ubfxne	r3, r3, #8, #8
 8011fe4:	9307      	str	r3, [sp, #28]
    if(aa) bwidth--; /*Because of anti-aliasing the border seems one pixel ticker*/
 8011fe6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    uint16_t radius       = style->body.radius;
 8011fe8:	b2ad      	uxth	r5, r5
    bwidth--;
 8011fea:	b2a4      	uxth	r4, r4
    if(aa) bwidth--; /*Because of anti-aliasing the border seems one pixel ticker*/
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	f040 854f 	bne.w	8012a90 <lv_draw_rect+0x1650>
    bwidth--;
 8011ff2:	3c01      	subs	r4, #1
    return area_p->y2 - area_p->y1 + 1;
 8011ff4:	f8ba 2006 	ldrh.w	r2, [sl, #6]
 8011ff8:	f8ba 3002 	ldrh.w	r3, [sl, #2]
    return area_p->x2 - area_p->x1 + 1;
 8011ffc:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    return area_p->y2 - area_p->y1 + 1;
 8012000:	3201      	adds	r2, #1
 8012002:	1ad2      	subs	r2, r2, r3
    return area_p->x2 - area_p->x1 + 1;
 8012004:	f8ba 3000 	ldrh.w	r3, [sl]
 8012008:	3101      	adds	r1, #1
 801200a:	1ac9      	subs	r1, r1, r3
    radius = lv_draw_cont_radius_corr(radius, width, height);
 801200c:	b212      	sxth	r2, r2
 801200e:	b209      	sxth	r1, r1
 8012010:	4628      	mov	r0, r5
 8012012:	f7ff f9d7 	bl	80113c4 <lv_draw_cont_radius_corr>
    lt_origo.x = coords->x1 + radius + aa;
 8012016:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801201a:	f8ba 2000 	ldrh.w	r2, [sl]
 801201e:	441a      	add	r2, r3
 8012020:	4402      	add	r2, r0
 8012022:	b292      	uxth	r2, r2
 8012024:	9206      	str	r2, [sp, #24]
    lt_origo.y = coords->y1 + radius + aa;
 8012026:	f8ba 2002 	ldrh.w	r2, [sl, #2]
 801202a:	441a      	add	r2, r3
 801202c:	4402      	add	r2, r0
 801202e:	b292      	uxth	r2, r2
 8012030:	9203      	str	r2, [sp, #12]
 8012032:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8012036:	9211      	str	r2, [sp, #68]	; 0x44
    lb_origo.y = coords->y2 - radius - aa;
 8012038:	f8ba 2006 	ldrh.w	r2, [sl, #6]
 801203c:	1a12      	subs	r2, r2, r0
 801203e:	1ad2      	subs	r2, r2, r3
 8012040:	b292      	uxth	r2, r2
 8012042:	9204      	str	r2, [sp, #16]
 8012044:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8012048:	9212      	str	r2, [sp, #72]	; 0x48
    rt_origo.x = coords->x2 - radius - aa;
 801204a:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 801204e:	1a12      	subs	r2, r2, r0
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8012050:	4605      	mov	r5, r0
    rt_origo.x = coords->x2 - radius - aa;
 8012052:	1ad3      	subs	r3, r2, r3
    lv_circ_init(&cir_out, &tmp_out, radius);
 8012054:	fa0f f980 	sxth.w	r9, r0
    if(aa) bwidth--; /*Because of anti-aliasing the border seems one pixel ticker*/
 8012058:	b2a4      	uxth	r4, r4
    rt_origo.x = coords->x2 - radius - aa;
 801205a:	b29b      	uxth	r3, r3
    lv_circ_init(&cir_out, &tmp_out, radius);
 801205c:	464a      	mov	r2, r9
 801205e:	a91e      	add	r1, sp, #120	; 0x78
 8012060:	a822      	add	r0, sp, #136	; 0x88
    lv_coord_t radius_in = radius - bwidth;
 8012062:	1b2c      	subs	r4, r5, r4
    rt_origo.x = coords->x2 - radius - aa;
 8012064:	9309      	str	r3, [sp, #36]	; 0x24
    lv_circ_init(&cir_out, &tmp_out, radius);
 8012066:	f002 f848 	bl	80140fa <lv_circ_init>
    lv_coord_t radius_in = radius - bwidth;
 801206a:	b223      	sxth	r3, r4
    lv_circ_init(&cir_in, &tmp_in, radius_in);
 801206c:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8012070:	a920      	add	r1, sp, #128	; 0x80
 8012072:	a824      	add	r0, sp, #144	; 0x90
    lv_coord_t radius_in = radius - bwidth;
 8012074:	9308      	str	r3, [sp, #32]
    lv_circ_init(&cir_in, &tmp_in, radius_in);
 8012076:	f002 f840 	bl	80140fa <lv_circ_init>
    lv_coord_t in_y_seg_start = 0;
 801207a:	2300      	movs	r3, #0
 801207c:	930c      	str	r3, [sp, #48]	; 0x30
    lv_coord_t out_y_seg_start = 0;
 801207e:	930f      	str	r3, [sp, #60]	; 0x3c
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 8012080:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012082:	3b01      	subs	r3, #1
 8012084:	9316      	str	r3, [sp, #88]	; 0x58
 8012086:	9b05      	ldr	r3, [sp, #20]
 8012088:	f003 0309 	and.w	r3, r3, #9
 801208c:	9310      	str	r3, [sp, #64]	; 0x40
    while(cir_out.y <= cir_out.x) {
 801208e:	f9bd a08a 	ldrsh.w	sl, [sp, #138]	; 0x8a
 8012092:	f9bd 2088 	ldrsh.w	r2, [sp, #136]	; 0x88
 8012096:	4552      	cmp	r2, sl
 8012098:	f280 84fd 	bge.w	8012a96 <lv_draw_rect+0x1656>
    if(aa) {
 801209c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d079      	beq.n	8012196 <lv_draw_rect+0xd56>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 80120a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 80120a4:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 80120a8:	fa1f f789 	uxth.w	r7, r9
 80120ac:	3301      	adds	r3, #1
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 80120ae:	ebaa 0a05 	sub.w	sl, sl, r5
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 80120b2:	18fb      	adds	r3, r7, r3
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 80120b4:	fa0f fa8a 	sxth.w	sl, sl
 80120b8:	2600      	movs	r6, #0
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 80120ba:	930a      	str	r3, [sp, #40]	; 0x28
 80120bc:	b231      	sxth	r1, r6
        for(i = 0; i < seg_size; i++) {
 80120be:	458a      	cmp	sl, r1
 80120c0:	f300 877e 	bgt.w	8012fc0 <lv_draw_rect+0x1b80>
        if(LV_MATH_ABS(aa_p.x - aa_p.y) == seg_size) {
 80120c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80120c6:	eba9 0503 	sub.w	r5, r9, r3
 80120ca:	2d00      	cmp	r5, #0
 80120cc:	bfb8      	it	lt
 80120ce:	426d      	neglt	r5, r5
 80120d0:	4555      	cmp	r5, sl
 80120d2:	d14d      	bne.n	8012170 <lv_draw_rect+0xd30>
            lv_opa_t aa_opa = opa >> 1;
 80120d4:	9b07      	ldr	r3, [sp, #28]
 80120d6:	085c      	lsrs	r4, r3, #1
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 80120d8:	9b05      	ldr	r3, [sp, #20]
 80120da:	f003 0309 	and.w	r3, r3, #9
 80120de:	2b09      	cmp	r3, #9
 80120e0:	d10d      	bne.n	80120fe <lv_draw_rect+0xcbe>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p), rb_origo.y + LV_CIRC_OCT2_Y(aa_p), mask,
 80120e2:	9b04      	ldr	r3, [sp, #16]
 80120e4:	9400      	str	r4, [sp, #0]
 80120e6:	fa1f f089 	uxth.w	r0, r9
 80120ea:	1819      	adds	r1, r3, r0
 80120ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120ee:	4418      	add	r0, r3
 80120f0:	9b02      	ldr	r3, [sp, #8]
 80120f2:	465a      	mov	r2, fp
 80120f4:	895b      	ldrh	r3, [r3, #10]
 80120f6:	b209      	sxth	r1, r1
 80120f8:	b200      	sxth	r0, r0
 80120fa:	f7fe f9ed 	bl	80104d8 <lv_draw_px>
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 80120fe:	9b05      	ldr	r3, [sp, #20]
 8012100:	f003 0305 	and.w	r3, r3, #5
 8012104:	2b05      	cmp	r3, #5
 8012106:	d10d      	bne.n	8012124 <lv_draw_rect+0xce4>
                lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p), lb_origo.y + LV_CIRC_OCT4_Y(aa_p), mask,
 8012108:	9b04      	ldr	r3, [sp, #16]
 801210a:	9400      	str	r4, [sp, #0]
 801210c:	fa1f f089 	uxth.w	r0, r9
 8012110:	1819      	adds	r1, r3, r0
 8012112:	9b06      	ldr	r3, [sp, #24]
 8012114:	1a18      	subs	r0, r3, r0
 8012116:	9b02      	ldr	r3, [sp, #8]
 8012118:	465a      	mov	r2, fp
 801211a:	895b      	ldrh	r3, [r3, #10]
 801211c:	b209      	sxth	r1, r1
 801211e:	b200      	sxth	r0, r0
 8012120:	f7fe f9da 	bl	80104d8 <lv_draw_px>
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 8012124:	9b05      	ldr	r3, [sp, #20]
 8012126:	f003 0306 	and.w	r3, r3, #6
 801212a:	2b06      	cmp	r3, #6
 801212c:	d10d      	bne.n	801214a <lv_draw_rect+0xd0a>
                lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p), lt_origo.y + LV_CIRC_OCT6_Y(aa_p), mask,
 801212e:	9b03      	ldr	r3, [sp, #12]
 8012130:	9400      	str	r4, [sp, #0]
 8012132:	fa1f f089 	uxth.w	r0, r9
 8012136:	1a19      	subs	r1, r3, r0
 8012138:	9b06      	ldr	r3, [sp, #24]
 801213a:	1a18      	subs	r0, r3, r0
 801213c:	9b02      	ldr	r3, [sp, #8]
 801213e:	465a      	mov	r2, fp
 8012140:	895b      	ldrh	r3, [r3, #10]
 8012142:	b209      	sxth	r1, r1
 8012144:	b200      	sxth	r0, r0
 8012146:	f7fe f9c7 	bl	80104d8 <lv_draw_px>
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 801214a:	9b05      	ldr	r3, [sp, #20]
 801214c:	f003 030a 	and.w	r3, r3, #10
 8012150:	2b0a      	cmp	r3, #10
 8012152:	d10d      	bne.n	8012170 <lv_draw_rect+0xd30>
                lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p), rt_origo.y + LV_CIRC_OCT8_Y(aa_p), mask,
 8012154:	9b03      	ldr	r3, [sp, #12]
 8012156:	9400      	str	r4, [sp, #0]
 8012158:	fa1f f789 	uxth.w	r7, r9
 801215c:	1bd9      	subs	r1, r3, r7
 801215e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012160:	441f      	add	r7, r3
 8012162:	9b02      	ldr	r3, [sp, #8]
 8012164:	465a      	mov	r2, fp
 8012166:	895b      	ldrh	r3, [r3, #10]
 8012168:	b209      	sxth	r1, r1
 801216a:	b238      	sxth	r0, r7
 801216c:	f7fe f9b4 	bl	80104d8 <lv_draw_px>
        seg_size     = in_y_seg_end - in_y_seg_start;
 8012170:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8012174:	f8bd 3092 	ldrh.w	r3, [sp, #146]	; 0x92
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 8012178:	9a08      	ldr	r2, [sp, #32]
        seg_size     = in_y_seg_end - in_y_seg_start;
 801217a:	1b5b      	subs	r3, r3, r5
 801217c:	b21b      	sxth	r3, r3
 801217e:	930a      	str	r3, [sp, #40]	; 0x28
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 8012180:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012182:	3b01      	subs	r3, #1
 8012184:	4413      	add	r3, r2
 8012186:	b21b      	sxth	r3, r3
        seg_size     = in_y_seg_end - in_y_seg_start;
 8012188:	2400      	movs	r4, #0
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 801218a:	930b      	str	r3, [sp, #44]	; 0x2c
        for(i = 0; i < seg_size; i++) {
 801218c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801218e:	b221      	sxth	r1, r4
 8012190:	428b      	cmp	r3, r1
 8012192:	f300 87b0 	bgt.w	80130f6 <lv_draw_rect+0x1cb6>
}
 8012196:	b029      	add	sp, #164	; 0xa4
 8012198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        curve_x[LV_CIRC_OCT1_Y(circ)] = LV_CIRC_OCT1_X(circ);
 801219c:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 80121a0:	f9bd 2090 	ldrsh.w	r2, [sp, #144]	; 0x90
 80121a4:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
        curve_x[LV_CIRC_OCT2_Y(circ)] = LV_CIRC_OCT2_X(circ);
 80121a8:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 80121ac:	f9bd 2092 	ldrsh.w	r2, [sp, #146]	; 0x92
 80121b0:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
        lv_circ_next(&circ, &circ_tmp);
 80121b4:	a922      	add	r1, sp, #136	; 0x88
 80121b6:	4648      	mov	r0, r9
 80121b8:	f001 ffaf 	bl	801411a <lv_circ_next>
 80121bc:	f7ff bbe4 	b.w	8011988 <lv_draw_rect+0x548>
        line_1d_blur[col] = (uint32_t)((uint32_t)(swidth - col) * opa / 2) / (swidth);
 80121c0:	0842      	lsrs	r2, r0, #1
 80121c2:	1ac0      	subs	r0, r0, r3
 80121c4:	fbb2 f2f6 	udiv	r2, r2, r6
 80121c8:	f801 2b01 	strb.w	r2, [r1], #1
 80121cc:	f7ff bbef 	b.w	80119ae <lv_draw_rect+0x56e>
        point_l.y = ofs_l.y + curve_x[col];
 80121d0:	f837 5013 	ldrh.w	r5, [r7, r3, lsl #1]
 80121d4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80121d6:	9904      	ldr	r1, [sp, #16]
 80121d8:	4428      	add	r0, r5
 80121da:	b280      	uxth	r0, r0
 80121dc:	900d      	str	r0, [sp, #52]	; 0x34
 80121de:	9806      	ldr	r0, [sp, #24]
 80121e0:	fa1f f288 	uxth.w	r2, r8
 80121e4:	1a89      	subs	r1, r1, r2
 80121e6:	4402      	add	r2, r0
 80121e8:	b209      	sxth	r1, r1
 80121ea:	b212      	sxth	r2, r2
 80121ec:	910e      	str	r1, [sp, #56]	; 0x38
 80121ee:	920a      	str	r2, [sp, #40]	; 0x28
 80121f0:	0059      	lsls	r1, r3, #1
        int16_t diff = col == 0 ? 0 : curve_x[col - 1] - curve_x[col];
 80121f2:	b123      	cbz	r3, 80121fe <lv_draw_rect+0xdbe>
 80121f4:	187a      	adds	r2, r7, r1
 80121f6:	f832 3c02 	ldrh.w	r3, [r2, #-2]
 80121fa:	1b5b      	subs	r3, r3, r5
 80121fc:	b29b      	uxth	r3, r3
 80121fe:	b21b      	sxth	r3, r3
 8012200:	9307      	str	r3, [sp, #28]
 8012202:	f04f 0900 	mov.w	r9, #0
 8012206:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012208:	444b      	add	r3, r9
 801220a:	b21b      	sxth	r3, r3
 801220c:	9309      	str	r3, [sp, #36]	; 0x24
        for(d = 0; d < swidth; d++) {
 801220e:	fa1f f389 	uxth.w	r3, r9
 8012212:	42b3      	cmp	r3, r6
 8012214:	db03      	blt.n	801221e <lv_draw_rect+0xdde>
 8012216:	f108 0801 	add.w	r8, r8, #1
 801221a:	f7ff bbe7 	b.w	80119ec <lv_draw_rect+0x5ac>
            if(diff == 0) {
 801221e:	9a07      	ldr	r2, [sp, #28]
                px_opa = line_1d_blur[d];
 8012220:	5ce5      	ldrb	r5, [r4, r3]
            if(diff == 0) {
 8012222:	b9b2      	cbnz	r2, 8012252 <lv_draw_rect+0xe12>
            lv_draw_px(point_l.x, point_l.y, mask, style->body.shadow.color, px_opa);
 8012224:	9b02      	ldr	r3, [sp, #8]
 8012226:	9500      	str	r5, [sp, #0]
 8012228:	8a1b      	ldrh	r3, [r3, #16]
 801222a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801222c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801222e:	465a      	mov	r2, fp
 8012230:	f7fe f952 	bl	80104d8 <lv_draw_px>
            if(point_r.x > ofs_l.x) {
 8012234:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012236:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012238:	4293      	cmp	r3, r2
 801223a:	da07      	bge.n	801224c <lv_draw_rect+0xe0c>
                lv_draw_px(point_r.x, point_r.y, mask, style->body.shadow.color, px_opa);
 801223c:	9b02      	ldr	r3, [sp, #8]
 801223e:	9500      	str	r5, [sp, #0]
 8012240:	8a1b      	ldrh	r3, [r3, #16]
 8012242:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012244:	980a      	ldr	r0, [sp, #40]	; 0x28
 8012246:	465a      	mov	r2, fp
 8012248:	f7fe f946 	bl	80104d8 <lv_draw_px>
 801224c:	f109 0901 	add.w	r9, r9, #1
 8012250:	e7d9      	b.n	8012206 <lv_draw_rect+0xdc6>
                px_opa = (uint16_t)((uint16_t)line_1d_blur[d] + line_1d_blur[d - diff]) >> 1;
 8012252:	9a07      	ldr	r2, [sp, #28]
 8012254:	1a9b      	subs	r3, r3, r2
 8012256:	5ce3      	ldrb	r3, [r4, r3]
 8012258:	441d      	add	r5, r3
 801225a:	f3c5 0547 	ubfx	r5, r5, #1, #8
 801225e:	e7e1      	b.n	8012224 <lv_draw_rect+0xde4>
        lv_draw_fill(&area_mid, mask, style->body.shadow.color, line_1d_blur[d]);
 8012260:	9a02      	ldr	r2, [sp, #8]
 8012262:	5ce3      	ldrb	r3, [r4, r3]
 8012264:	8a12      	ldrh	r2, [r2, #16]
 8012266:	4659      	mov	r1, fp
 8012268:	a826      	add	r0, sp, #152	; 0x98
 801226a:	f7fe f984 	bl	8010576 <lv_draw_fill>
        area_mid.y1++;
 801226e:	f8bd 309a 	ldrh.w	r3, [sp, #154]	; 0x9a
 8012272:	3301      	adds	r3, #1
 8012274:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
        area_mid.y2++;
 8012278:	f8bd 309e 	ldrh.w	r3, [sp, #158]	; 0x9e
 801227c:	3301      	adds	r3, #1
 801227e:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
 8012282:	462b      	mov	r3, r5
 8012284:	f7ff bbc7 	b.w	8011a16 <lv_draw_rect+0x5d6>
                work_area.y1 += 1;
 8012288:	3301      	adds	r3, #1
 801228a:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
                work_area.y2 -= 1;
 801228e:	3d01      	subs	r5, #1
 8012290:	e422      	b.n	8011ad8 <lv_draw_rect+0x698>
        if(style->body.radius != 0) {
 8012292:	9a02      	ldr	r2, [sp, #8]
 8012294:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
        lv_coord_t row_end   = coords->y2 - radius;
 8012298:	1a2d      	subs	r5, r5, r0
 801229a:	b2ad      	uxth	r5, r5
        if(style->body.radius != 0) {
 801229c:	b9fa      	cbnz	r2, 80122de <lv_draw_rect+0xe9e>
        lv_coord_t row_start = coords->y1 + radius;
 801229e:	b21c      	sxth	r4, r3
                row_end -= 1;
 80122a0:	b22d      	sxth	r5, r5
 80122a2:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
        for(row = row_start; row <= row_end; row++) {
 80122a6:	42ac      	cmp	r4, r5
 80122a8:	f73f ac1e 	bgt.w	8011ae8 <lv_draw_rect+0x6a8>
            mix          = (uint32_t)((uint32_t)(coords->y2 - work_area.y1) * 255) / height;
 80122ac:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
            work_area.y1 = row;
 80122b0:	f8ad 409a 	strh.w	r4, [sp, #154]	; 0x9a
            mix          = (uint32_t)((uint32_t)(coords->y2 - work_area.y1) * 255) / height;
 80122b4:	1b12      	subs	r2, r2, r4
            act_color    = lv_color_mix(mcolor, gcolor, mix);
 80122b6:	4649      	mov	r1, r9
            mix          = (uint32_t)((uint32_t)(coords->y2 - work_area.y1) * 255) / height;
 80122b8:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
            act_color    = lv_color_mix(mcolor, gcolor, mix);
 80122bc:	4640      	mov	r0, r8
            mix          = (uint32_t)((uint32_t)(coords->y2 - work_area.y1) * 255) / height;
 80122be:	fbb2 f2f6 	udiv	r2, r2, r6
            act_color    = lv_color_mix(mcolor, gcolor, mix);
 80122c2:	b2d2      	uxtb	r2, r2
            work_area.y2 = row;
 80122c4:	f8ad 409e 	strh.w	r4, [sp, #158]	; 0x9e
            act_color    = lv_color_mix(mcolor, gcolor, mix);
 80122c8:	f7ff f850 	bl	801136c <lv_color_mix>
 80122cc:	3401      	adds	r4, #1
            lv_draw_fill(&work_area, mask, act_color, opa);
 80122ce:	4602      	mov	r2, r0
 80122d0:	463b      	mov	r3, r7
 80122d2:	4659      	mov	r1, fp
 80122d4:	a826      	add	r0, sp, #152	; 0x98
 80122d6:	f7fe f94e 	bl	8010576 <lv_draw_fill>
 80122da:	b224      	sxth	r4, r4
 80122dc:	e7e3      	b.n	80122a6 <lv_draw_rect+0xe66>
            if(aa) {
 80122de:	b11c      	cbz	r4, 80122e8 <lv_draw_rect+0xea8>
                row_start += 2;
 80122e0:	1c9c      	adds	r4, r3, #2
 80122e2:	b224      	sxth	r4, r4
                row_end -= 2;
 80122e4:	3d02      	subs	r5, #2
 80122e6:	e7db      	b.n	80122a0 <lv_draw_rect+0xe60>
                row_start += 1;
 80122e8:	1c5c      	adds	r4, r3, #1
 80122ea:	b224      	sxth	r4, r4
                row_end -= 1;
 80122ec:	3d01      	subs	r5, #1
 80122ee:	e7d7      	b.n	80122a0 <lv_draw_rect+0xe60>
        if(aa) {
 80122f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d039      	beq.n	801236a <lv_draw_rect+0xf2a>
            if(out_x_last != cir.x) {
 80122f6:	f9bd 3078 	ldrsh.w	r3, [sp, #120]	; 0x78
 80122fa:	4543      	cmp	r3, r8
 80122fc:	d035      	beq.n	801236a <lv_draw_rect+0xf2a>
                out_y_seg_end       = cir.y;
 80122fe:	f9bd 307a 	ldrsh.w	r3, [sp, #122]	; 0x7a
 8012302:	9317      	str	r3, [sp, #92]	; 0x5c
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 8012304:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8012308:	930f      	str	r3, [sp, #60]	; 0x3c
 801230a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801230c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
                aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 801230e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 8012312:	1a9b      	subs	r3, r3, r2
 8012314:	b21b      	sxth	r3, r3
 8012316:	9311      	str	r3, [sp, #68]	; 0x44
                mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 8012318:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801231a:	eba3 0408 	sub.w	r4, r3, r8
 801231e:	ebc4 2404 	rsb	r4, r4, r4, lsl #8
 8012322:	9b05      	ldr	r3, [sp, #20]
 8012324:	fbb4 f4f3 	udiv	r4, r4, r3
 8012328:	b2e4      	uxtb	r4, r4
                aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 801232a:	4622      	mov	r2, r4
 801232c:	4648      	mov	r0, r9
 801232e:	f7ff f81d 	bl	801136c <lv_color_mix>
                aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 8012332:	4622      	mov	r2, r4
                aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 8012334:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
                aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 8012338:	4649      	mov	r1, r9
 801233a:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 801233e:	f7ff f815 	bl	801136c <lv_color_mix>
 8012342:	2300      	movs	r3, #0
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 8012344:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
                aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 8012346:	9310      	str	r3, [sp, #64]	; 0x40
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 8012348:	fa1f f388 	uxth.w	r3, r8
 801234c:	9313      	str	r3, [sp, #76]	; 0x4c
 801234e:	4413      	add	r3, r2
                aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 8012350:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 8012354:	931a      	str	r3, [sp, #104]	; 0x68
 8012356:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
                for(i = 0; i < seg_size; i++) {
 801235a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801235c:	428b      	cmp	r3, r1
 801235e:	f300 8090 	bgt.w	8012482 <lv_draw_rect+0x1042>
                out_y_seg_start = out_y_seg_end;
 8012362:	9b17      	ldr	r3, [sp, #92]	; 0x5c
                out_x_last      = cir.x;
 8012364:	f9bd 8078 	ldrsh.w	r8, [sp, #120]	; 0x78
                out_y_seg_start = out_y_seg_end;
 8012368:	930e      	str	r3, [sp, #56]	; 0x38
        if(mid_bot_area.y1 != LV_CIRC_OCT4_Y(cir) + lb_origo.y) mid_bot_refr = 1;
 801236a:	f9bd 407a 	ldrsh.w	r4, [sp, #122]	; 0x7a
 801236e:	9b16      	ldr	r3, [sp, #88]	; 0x58
        if(edge_bot_area.y1 != LV_CIRC_OCT2_Y(cir) + lb_origo.y) edge_bot_refr = 1;
 8012370:	9a16      	ldr	r2, [sp, #88]	; 0x58
        if(edge_top_area.y1 != LV_CIRC_OCT7_Y(cir) + lt_origo.y) edge_top_refr = 1;
 8012372:	f9bd 1082 	ldrsh.w	r1, [sp, #130]	; 0x82
        if(mid_bot_area.y1 != LV_CIRC_OCT4_Y(cir) + lb_origo.y) mid_bot_refr = 1;
 8012376:	f9bd 7092 	ldrsh.w	r7, [sp, #146]	; 0x92
        if(mid_top_area.y1 != LV_CIRC_OCT8_Y(cir) + lt_origo.y) mid_top_refr = 1;
 801237a:	f9bd 608a 	ldrsh.w	r6, [sp, #138]	; 0x8a
        if(mid_bot_area.y1 != LV_CIRC_OCT4_Y(cir) + lb_origo.y) mid_bot_refr = 1;
 801237e:	18e5      	adds	r5, r4, r3
        if(edge_bot_area.y1 != LV_CIRC_OCT2_Y(cir) + lb_origo.y) edge_bot_refr = 1;
 8012380:	f9bd 309a 	ldrsh.w	r3, [sp, #154]	; 0x9a
 8012384:	930c      	str	r3, [sp, #48]	; 0x30
 8012386:	f9bd 3078 	ldrsh.w	r3, [sp, #120]	; 0x78
 801238a:	441a      	add	r2, r3
 801238c:	920d      	str	r2, [sp, #52]	; 0x34
        if(mid_top_area.y1 != LV_CIRC_OCT8_Y(cir) + lt_origo.y) mid_top_refr = 1;
 801238e:	9a15      	ldr	r2, [sp, #84]	; 0x54
        if(edge_top_area.y1 != LV_CIRC_OCT7_Y(cir) + lt_origo.y) edge_top_refr = 1;
 8012390:	1ad3      	subs	r3, r2, r3
 8012392:	4299      	cmp	r1, r3
        if(mid_top_area.y1 != LV_CIRC_OCT8_Y(cir) + lt_origo.y) mid_top_refr = 1;
 8012394:	eba2 0404 	sub.w	r4, r2, r4
        if(edge_top_area.y1 != LV_CIRC_OCT7_Y(cir) + lt_origo.y) edge_top_refr = 1;
 8012398:	f040 874d 	bne.w	8013236 <lv_draw_rect+0x1df6>
        if(mid_top_refr != 0) {
 801239c:	42a6      	cmp	r6, r4
 801239e:	d00a      	beq.n	80123b6 <lv_draw_rect+0xf76>
            if(mcolor.full == gcolor.full)
 80123a0:	9b03      	ldr	r3, [sp, #12]
 80123a2:	454b      	cmp	r3, r9
 80123a4:	f040 8117 	bne.w	80125d6 <lv_draw_rect+0x1196>
                act_color = mcolor;
 80123a8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
            lv_draw_fill(&mid_top_area, mask, act_color, opa);
 80123ac:	9b04      	ldr	r3, [sp, #16]
 80123ae:	4659      	mov	r1, fp
 80123b0:	a822      	add	r0, sp, #136	; 0x88
 80123b2:	f7fe f8e0 	bl	8010576 <lv_draw_fill>
        if(mid_bot_refr != 0) {
 80123b6:	42af      	cmp	r7, r5
 80123b8:	d00a      	beq.n	80123d0 <lv_draw_rect+0xf90>
            if(mcolor.full == gcolor.full)
 80123ba:	9b03      	ldr	r3, [sp, #12]
 80123bc:	454b      	cmp	r3, r9
 80123be:	f040 811c 	bne.w	80125fa <lv_draw_rect+0x11ba>
                act_color = mcolor;
 80123c2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
            lv_draw_fill(&mid_bot_area, mask, act_color, opa);
 80123c6:	9b04      	ldr	r3, [sp, #16]
 80123c8:	4659      	mov	r1, fp
 80123ca:	a824      	add	r0, sp, #144	; 0x90
 80123cc:	f7fe f8d3 	bl	8010576 <lv_draw_fill>
        if(edge_bot_refr != 0) {
 80123d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80123d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80123d4:	4293      	cmp	r3, r2
 80123d6:	d00a      	beq.n	80123ee <lv_draw_rect+0xfae>
            if(mcolor.full == gcolor.full)
 80123d8:	9b03      	ldr	r3, [sp, #12]
 80123da:	454b      	cmp	r3, r9
 80123dc:	f040 811f 	bne.w	801261e <lv_draw_rect+0x11de>
                act_color = mcolor;
 80123e0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
            lv_draw_fill(&edge_bot_area, mask, act_color, opa);
 80123e4:	9b04      	ldr	r3, [sp, #16]
 80123e6:	4659      	mov	r1, fp
 80123e8:	a826      	add	r0, sp, #152	; 0x98
 80123ea:	f7fe f8c4 	bl	8010576 <lv_draw_fill>
        lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 80123ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80123f0:	f8bd 207a 	ldrh.w	r2, [sp, #122]	; 0x7a
 80123f4:	f8bd 1078 	ldrh.w	r1, [sp, #120]	; 0x78
 80123f8:	9806      	ldr	r0, [sp, #24]
 80123fa:	441a      	add	r2, r3
                    rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
 80123fc:	9b07      	ldr	r3, [sp, #28]
        lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 80123fe:	b212      	sxth	r2, r2
                    rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
 8012400:	440b      	add	r3, r1
        lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 8012402:	1a41      	subs	r1, r0, r1
 8012404:	9200      	str	r2, [sp, #0]
 8012406:	a824      	add	r0, sp, #144	; 0x90
 8012408:	b21b      	sxth	r3, r3
 801240a:	b209      	sxth	r1, r1
 801240c:	f001 fdc2 	bl	8013f94 <lv_area_set>
        lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 8012410:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012412:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
 8012416:	f8bd 107a 	ldrh.w	r1, [sp, #122]	; 0x7a
 801241a:	9806      	ldr	r0, [sp, #24]
 801241c:	441a      	add	r2, r3
                    rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
 801241e:	9b07      	ldr	r3, [sp, #28]
        lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 8012420:	b212      	sxth	r2, r2
                    rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
 8012422:	440b      	add	r3, r1
        lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 8012424:	1a41      	subs	r1, r0, r1
 8012426:	9200      	str	r2, [sp, #0]
 8012428:	a826      	add	r0, sp, #152	; 0x98
 801242a:	b21b      	sxth	r3, r3
 801242c:	b209      	sxth	r1, r1
 801242e:	f001 fdb1 	bl	8013f94 <lv_area_set>
        lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 8012432:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012434:	f8bd 207a 	ldrh.w	r2, [sp, #122]	; 0x7a
 8012438:	f8bd 1078 	ldrh.w	r1, [sp, #120]	; 0x78
 801243c:	9806      	ldr	r0, [sp, #24]
 801243e:	1a9a      	subs	r2, r3, r2
                    rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
 8012440:	9b07      	ldr	r3, [sp, #28]
        lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 8012442:	b212      	sxth	r2, r2
                    rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
 8012444:	440b      	add	r3, r1
        lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 8012446:	1a41      	subs	r1, r0, r1
 8012448:	9200      	str	r2, [sp, #0]
 801244a:	a822      	add	r0, sp, #136	; 0x88
 801244c:	b21b      	sxth	r3, r3
 801244e:	b209      	sxth	r1, r1
 8012450:	f001 fda0 	bl	8013f94 <lv_area_set>
        lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 8012454:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012456:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
 801245a:	f8bd 107a 	ldrh.w	r1, [sp, #122]	; 0x7a
 801245e:	9806      	ldr	r0, [sp, #24]
 8012460:	1a9a      	subs	r2, r3, r2
                    rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
 8012462:	9b07      	ldr	r3, [sp, #28]
        lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 8012464:	b212      	sxth	r2, r2
                    rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
 8012466:	440b      	add	r3, r1
        lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 8012468:	1a41      	subs	r1, r0, r1
 801246a:	9200      	str	r2, [sp, #0]
 801246c:	a820      	add	r0, sp, #128	; 0x80
 801246e:	b21b      	sxth	r3, r3
 8012470:	b209      	sxth	r1, r1
 8012472:	f001 fd8f 	bl	8013f94 <lv_area_set>
        lv_circ_next(&cir, &cir_tmp);
 8012476:	a91d      	add	r1, sp, #116	; 0x74
 8012478:	9819      	ldr	r0, [sp, #100]	; 0x64
 801247a:	f001 fe4e 	bl	801411a <lv_circ_next>
 801247e:	f7ff bbda 	b.w	8011c36 <lv_draw_rect+0x7f6>
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 8012482:	9b11      	ldr	r3, [sp, #68]	; 0x44
                        aa_opa = antialias_get_opa_circ(seg_size, i, opa);
 8012484:	9a04      	ldr	r2, [sp, #16]
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 8012486:	2b01      	cmp	r3, #1
 8012488:	f000 808d 	beq.w	80125a6 <lv_draw_rect+0x1166>
                        aa_opa = antialias_get_opa_circ(seg_size, i, opa);
 801248c:	4618      	mov	r0, r3
 801248e:	f7fe ffb5 	bl	80113fc <antialias_get_opa_circ>
 8012492:	4605      	mov	r5, r0
 8012494:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8012498:	9312      	str	r3, [sp, #72]	; 0x48
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 801249a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801249c:	9b07      	ldr	r3, [sp, #28]
 801249e:	f9bd 6068 	ldrsh.w	r6, [sp, #104]	; 0x68
 80124a2:	9500      	str	r5, [sp, #0]
 80124a4:	189c      	adds	r4, r3, r2
 80124a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80124a8:	441c      	add	r4, r3
 80124aa:	b224      	sxth	r4, r4
 80124ac:	4631      	mov	r1, r6
 80124ae:	4620      	mov	r0, r4
 80124b0:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 80124b4:	465a      	mov	r2, fp
 80124b6:	f7fe f80f 	bl	80104d8 <lv_draw_px>
                    lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 80124ba:	9b06      	ldr	r3, [sp, #24]
 80124bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80124be:	9500      	str	r5, [sp, #0]
 80124c0:	1a9f      	subs	r7, r3, r2
 80124c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80124c4:	1aff      	subs	r7, r7, r3
 80124c6:	b23f      	sxth	r7, r7
 80124c8:	4631      	mov	r1, r6
 80124ca:	4638      	mov	r0, r7
 80124cc:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 80124d0:	465a      	mov	r2, fp
 80124d2:	f7fe f801 	bl	80104d8 <lv_draw_px>
                    lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 80124d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80124d8:	9500      	str	r5, [sp, #0]
 80124da:	1e5e      	subs	r6, r3, #1
 80124dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80124de:	1af6      	subs	r6, r6, r3
 80124e0:	b236      	sxth	r6, r6
 80124e2:	4631      	mov	r1, r6
 80124e4:	4638      	mov	r0, r7
 80124e6:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 80124ea:	465a      	mov	r2, fp
 80124ec:	f7fd fff4 	bl	80104d8 <lv_draw_px>
                    lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 80124f0:	4631      	mov	r1, r6
 80124f2:	4620      	mov	r0, r4
 80124f4:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 80124f8:	9500      	str	r5, [sp, #0]
 80124fa:	465a      	mov	r2, fp
 80124fc:	f7fd ffec 	bl	80104d8 <lv_draw_px>
                    mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 8012500:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012502:	9a0e      	ldr	r2, [sp, #56]	; 0x38
                    aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 8012504:	f8bd 000c 	ldrh.w	r0, [sp, #12]
                    mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 8012508:	1a9e      	subs	r6, r3, r2
 801250a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801250c:	441e      	add	r6, r3
 801250e:	ebc6 2606 	rsb	r6, r6, r6, lsl #8
 8012512:	9b05      	ldr	r3, [sp, #20]
 8012514:	fbb6 f6f3 	udiv	r6, r6, r3
 8012518:	b2f6      	uxtb	r6, r6
                    aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 801251a:	4632      	mov	r2, r6
 801251c:	4649      	mov	r1, r9
 801251e:	f7fe ff25 	bl	801136c <lv_color_mix>
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 8012522:	9b07      	ldr	r3, [sp, #28]
 8012524:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012526:	9500      	str	r5, [sp, #0]
 8012528:	1c5f      	adds	r7, r3, #1
 801252a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801252c:	441f      	add	r7, r3
 801252e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012530:	4413      	add	r3, r2
 8012532:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012534:	4413      	add	r3, r2
 8012536:	b21b      	sxth	r3, r3
 8012538:	9318      	str	r3, [sp, #96]	; 0x60
 801253a:	b23f      	sxth	r7, r7
                    aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 801253c:	4604      	mov	r4, r0
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 801253e:	4603      	mov	r3, r0
 8012540:	465a      	mov	r2, fp
 8012542:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012544:	4638      	mov	r0, r7
 8012546:	f7fd ffc7 	bl	80104d8 <lv_draw_px>
                    lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 801254a:	9b06      	ldr	r3, [sp, #24]
 801254c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801254e:	9500      	str	r5, [sp, #0]
 8012550:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8012554:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012556:	eba8 0803 	sub.w	r8, r8, r3
 801255a:	fa0f f888 	sxth.w	r8, r8
 801255e:	4623      	mov	r3, r4
 8012560:	465a      	mov	r2, fp
 8012562:	4640      	mov	r0, r8
 8012564:	f7fd ffb8 	bl	80104d8 <lv_draw_px>
                    aa_color_ver = lv_color_mix(gcolor, mcolor, mix);
 8012568:	4632      	mov	r2, r6
 801256a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801256e:	4648      	mov	r0, r9
 8012570:	f7fe fefc 	bl	801136c <lv_color_mix>
                    lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 8012574:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012576:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012578:	9500      	str	r5, [sp, #0]
 801257a:	1a9b      	subs	r3, r3, r2
 801257c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801257e:	1a9b      	subs	r3, r3, r2
 8012580:	b21e      	sxth	r6, r3
                    aa_color_ver = lv_color_mix(gcolor, mcolor, mix);
 8012582:	4604      	mov	r4, r0
                    lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 8012584:	4603      	mov	r3, r0
 8012586:	465a      	mov	r2, fp
 8012588:	4631      	mov	r1, r6
 801258a:	4640      	mov	r0, r8
 801258c:	f7fd ffa4 	bl	80104d8 <lv_draw_px>
                    lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 8012590:	4623      	mov	r3, r4
 8012592:	9500      	str	r5, [sp, #0]
 8012594:	465a      	mov	r2, fp
 8012596:	4631      	mov	r1, r6
 8012598:	4638      	mov	r0, r7
 801259a:	f7fd ff9d 	bl	80104d8 <lv_draw_px>
 801259e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80125a0:	3301      	adds	r3, #1
 80125a2:	9310      	str	r3, [sp, #64]	; 0x40
 80125a4:	e6d7      	b.n	8012356 <lv_draw_rect+0xf16>
                        aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 80125a6:	9811      	ldr	r0, [sp, #68]	; 0x44
 80125a8:	f7fd ff54 	bl	8010454 <lv_draw_aa_get_opa>
 80125ac:	9b04      	ldr	r3, [sp, #16]
 80125ae:	1a18      	subs	r0, r3, r0
 80125b0:	b2c5      	uxtb	r5, r0
 80125b2:	e76f      	b.n	8012494 <lv_draw_rect+0x1054>
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
 80125b4:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
 80125b8:	9b05      	ldr	r3, [sp, #20]
                act_color = lv_color_mix(mcolor, gcolor, mix);
 80125ba:	f8bd 000c 	ldrh.w	r0, [sp, #12]
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
 80125be:	1a52      	subs	r2, r2, r1
 80125c0:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
                act_color = lv_color_mix(mcolor, gcolor, mix);
 80125c4:	4649      	mov	r1, r9
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
 80125c6:	fbb2 f2f3 	udiv	r2, r2, r3
                act_color = lv_color_mix(mcolor, gcolor, mix);
 80125ca:	b2d2      	uxtb	r2, r2
 80125cc:	f7fe fece 	bl	801136c <lv_color_mix>
 80125d0:	4602      	mov	r2, r0
 80125d2:	f000 be36 	b.w	8013242 <lv_draw_rect+0x1e02>
                mix       = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
 80125d6:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
 80125da:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
                act_color = lv_color_mix(mcolor, gcolor, mix);
 80125de:	f8bd 000c 	ldrh.w	r0, [sp, #12]
                mix       = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
 80125e2:	1ad2      	subs	r2, r2, r3
 80125e4:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 80125e8:	9b05      	ldr	r3, [sp, #20]
 80125ea:	fbb2 f2f3 	udiv	r2, r2, r3
                act_color = lv_color_mix(mcolor, gcolor, mix);
 80125ee:	4649      	mov	r1, r9
 80125f0:	b2d2      	uxtb	r2, r2
 80125f2:	f7fe febb 	bl	801136c <lv_color_mix>
 80125f6:	4602      	mov	r2, r0
 80125f8:	e6d8      	b.n	80123ac <lv_draw_rect+0xf6c>
                mix       = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 80125fa:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 80125fe:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
                act_color = lv_color_mix(mcolor, gcolor, mix);
 8012602:	f8bd 000c 	ldrh.w	r0, [sp, #12]
                mix       = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 8012606:	1ad2      	subs	r2, r2, r3
 8012608:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 801260c:	9b05      	ldr	r3, [sp, #20]
 801260e:	fbb2 f2f3 	udiv	r2, r2, r3
                act_color = lv_color_mix(mcolor, gcolor, mix);
 8012612:	4649      	mov	r1, r9
 8012614:	b2d2      	uxtb	r2, r2
 8012616:	f7fe fea9 	bl	801136c <lv_color_mix>
 801261a:	4602      	mov	r2, r0
 801261c:	e6d3      	b.n	80123c6 <lv_draw_rect+0xf86>
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
 801261e:	f9bd 309a 	ldrsh.w	r3, [sp, #154]	; 0x9a
 8012622:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
                act_color = lv_color_mix(mcolor, gcolor, mix);
 8012626:	f8bd 000c 	ldrh.w	r0, [sp, #12]
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
 801262a:	1ad2      	subs	r2, r2, r3
 801262c:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 8012630:	9b05      	ldr	r3, [sp, #20]
 8012632:	fbb2 f2f3 	udiv	r2, r2, r3
                act_color = lv_color_mix(mcolor, gcolor, mix);
 8012636:	4649      	mov	r1, r9
 8012638:	b2d2      	uxtb	r2, r2
 801263a:	f7fe fe97 	bl	801136c <lv_color_mix>
 801263e:	4602      	mov	r2, r0
 8012640:	e6d0      	b.n	80123e4 <lv_draw_rect+0xfa4>
        mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
 8012642:	f9bd 3082 	ldrsh.w	r3, [sp, #130]	; 0x82
 8012646:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
        act_color = lv_color_mix(mcolor, gcolor, mix);
 801264a:	f8bd 000c 	ldrh.w	r0, [sp, #12]
        mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
 801264e:	1ad2      	subs	r2, r2, r3
 8012650:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 8012654:	9b05      	ldr	r3, [sp, #20]
 8012656:	fbb2 f2f3 	udiv	r2, r2, r3
        act_color = lv_color_mix(mcolor, gcolor, mix);
 801265a:	4649      	mov	r1, r9
 801265c:	b2d2      	uxtb	r2, r2
 801265e:	f7fe fe85 	bl	801136c <lv_color_mix>
 8012662:	4602      	mov	r2, r0
 8012664:	f7ff baf3 	b.w	8011c4e <lv_draw_rect+0x80e>
            mix       = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
 8012668:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
            act_color = lv_color_mix(mcolor, gcolor, mix);
 801266c:	f8bd 000c 	ldrh.w	r0, [sp, #12]
            mix       = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
 8012670:	1ad2      	subs	r2, r2, r3
 8012672:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 8012676:	9b05      	ldr	r3, [sp, #20]
 8012678:	fbb2 f2f3 	udiv	r2, r2, r3
            act_color = lv_color_mix(mcolor, gcolor, mix);
 801267c:	4649      	mov	r1, r9
 801267e:	b2d2      	uxtb	r2, r2
 8012680:	f7fe fe74 	bl	801136c <lv_color_mix>
 8012684:	4602      	mov	r2, r0
 8012686:	f7ff baf3 	b.w	8011c70 <lv_draw_rect+0x830>
        mix       = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 801268a:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 801268e:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
        act_color = lv_color_mix(mcolor, gcolor, mix);
 8012692:	f8bd 000c 	ldrh.w	r0, [sp, #12]
        mix       = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 8012696:	1ad2      	subs	r2, r2, r3
 8012698:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 801269c:	9b05      	ldr	r3, [sp, #20]
 801269e:	fbb2 f2f3 	udiv	r2, r2, r3
        act_color = lv_color_mix(mcolor, gcolor, mix);
 80126a2:	4649      	mov	r1, r9
 80126a4:	b2d2      	uxtb	r2, r2
 80126a6:	f7fe fe61 	bl	801136c <lv_color_mix>
 80126aa:	4602      	mov	r2, r0
 80126ac:	f7ff baeb 	b.w	8011c86 <lv_draw_rect+0x846>
            mix       = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
 80126b0:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
            act_color = lv_color_mix(mcolor, gcolor, mix);
 80126b4:	f8bd 000c 	ldrh.w	r0, [sp, #12]
            mix       = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
 80126b8:	1ad2      	subs	r2, r2, r3
 80126ba:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 80126be:	9b05      	ldr	r3, [sp, #20]
 80126c0:	fbb2 f2f3 	udiv	r2, r2, r3
            act_color = lv_color_mix(mcolor, gcolor, mix);
 80126c4:	4649      	mov	r1, r9
 80126c6:	b2d2      	uxtb	r2, r2
 80126c8:	f7fe fe50 	bl	801136c <lv_color_mix>
 80126cc:	4602      	mov	r2, r0
 80126ce:	f7ff baeb 	b.w	8011ca8 <lv_draw_rect+0x868>
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 80126d2:	9a04      	ldr	r2, [sp, #16]
 80126d4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80126d6:	f7fd febd 	bl	8010454 <lv_draw_aa_get_opa>
 80126da:	9b04      	ldr	r3, [sp, #16]
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 80126dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80126de:	f9bd 5058 	ldrsh.w	r5, [sp, #88]	; 0x58
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 80126e2:	1a18      	subs	r0, r3, r0
 80126e4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80126e8:	9311      	str	r3, [sp, #68]	; 0x44
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 80126ea:	9b07      	ldr	r3, [sp, #28]
 80126ec:	189c      	adds	r4, r3, r2
 80126ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80126f0:	441c      	add	r4, r3
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 80126f2:	b2c6      	uxtb	r6, r0
 80126f4:	b224      	sxth	r4, r4
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 80126f6:	4629      	mov	r1, r5
 80126f8:	4620      	mov	r0, r4
 80126fa:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 80126fe:	9600      	str	r6, [sp, #0]
 8012700:	465a      	mov	r2, fp
 8012702:	f7fd fee9 	bl	80104d8 <lv_draw_px>
            lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 8012706:	9b06      	ldr	r3, [sp, #24]
 8012708:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801270a:	9600      	str	r6, [sp, #0]
 801270c:	1a9f      	subs	r7, r3, r2
 801270e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012710:	1aff      	subs	r7, r7, r3
 8012712:	b23f      	sxth	r7, r7
 8012714:	4629      	mov	r1, r5
 8012716:	4638      	mov	r0, r7
 8012718:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801271c:	465a      	mov	r2, fp
 801271e:	f7fd fedb 	bl	80104d8 <lv_draw_px>
            lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 8012722:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012724:	9600      	str	r6, [sp, #0]
 8012726:	1e5d      	subs	r5, r3, #1
 8012728:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801272a:	1aed      	subs	r5, r5, r3
 801272c:	b22d      	sxth	r5, r5
 801272e:	4629      	mov	r1, r5
 8012730:	4638      	mov	r0, r7
 8012732:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8012736:	465a      	mov	r2, fp
 8012738:	f7fd fece 	bl	80104d8 <lv_draw_px>
            lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 801273c:	4629      	mov	r1, r5
 801273e:	4620      	mov	r0, r4
 8012740:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8012744:	9600      	str	r6, [sp, #0]
 8012746:	465a      	mov	r2, fp
 8012748:	f7fd fec6 	bl	80104d8 <lv_draw_px>
            mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 801274c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801274e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
            aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 8012750:	f8bd 000c 	ldrh.w	r0, [sp, #12]
            mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 8012754:	1a9d      	subs	r5, r3, r2
 8012756:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012758:	441d      	add	r5, r3
 801275a:	ebc5 2505 	rsb	r5, r5, r5, lsl #8
 801275e:	9b05      	ldr	r3, [sp, #20]
 8012760:	fbb5 f5f3 	udiv	r5, r5, r3
 8012764:	b2ed      	uxtb	r5, r5
            aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 8012766:	462a      	mov	r2, r5
 8012768:	4649      	mov	r1, r9
 801276a:	f7fe fdff 	bl	801136c <lv_color_mix>
            lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, aa_color_ver,
 801276e:	9b07      	ldr	r3, [sp, #28]
 8012770:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012772:	9600      	str	r6, [sp, #0]
 8012774:	1c5f      	adds	r7, r3, #1
 8012776:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012778:	441f      	add	r7, r3
 801277a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801277c:	4413      	add	r3, r2
 801277e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012780:	4413      	add	r3, r2
 8012782:	b21b      	sxth	r3, r3
 8012784:	9315      	str	r3, [sp, #84]	; 0x54
 8012786:	b23f      	sxth	r7, r7
            aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 8012788:	4604      	mov	r4, r0
            lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, aa_color_ver,
 801278a:	4603      	mov	r3, r0
 801278c:	465a      	mov	r2, fp
 801278e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8012790:	4638      	mov	r0, r7
 8012792:	f7fd fea1 	bl	80104d8 <lv_draw_px>
            lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask, aa_color_ver,
 8012796:	9b06      	ldr	r3, [sp, #24]
 8012798:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801279a:	9915      	ldr	r1, [sp, #84]	; 0x54
 801279c:	9600      	str	r6, [sp, #0]
 801279e:	3b01      	subs	r3, #1
 80127a0:	1a9b      	subs	r3, r3, r2
 80127a2:	b21b      	sxth	r3, r3
 80127a4:	9314      	str	r3, [sp, #80]	; 0x50
 80127a6:	465a      	mov	r2, fp
 80127a8:	4623      	mov	r3, r4
 80127aa:	9814      	ldr	r0, [sp, #80]	; 0x50
 80127ac:	f7fd fe94 	bl	80104d8 <lv_draw_px>
            aa_color_ver = lv_color_mix(gcolor, mcolor, mix);
 80127b0:	462a      	mov	r2, r5
 80127b2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 80127b6:	4648      	mov	r0, r9
 80127b8:	f7fe fdd8 	bl	801136c <lv_color_mix>
            lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask, aa_color_ver,
 80127bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80127be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80127c0:	9600      	str	r6, [sp, #0]
 80127c2:	1a9b      	subs	r3, r3, r2
 80127c4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80127c6:	1a9b      	subs	r3, r3, r2
 80127c8:	b21d      	sxth	r5, r3
            aa_color_ver = lv_color_mix(gcolor, mcolor, mix);
 80127ca:	4604      	mov	r4, r0
            lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask, aa_color_ver,
 80127cc:	4603      	mov	r3, r0
 80127ce:	465a      	mov	r2, fp
 80127d0:	4629      	mov	r1, r5
 80127d2:	9814      	ldr	r0, [sp, #80]	; 0x50
 80127d4:	f7fd fe80 	bl	80104d8 <lv_draw_px>
            lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask, aa_color_ver,
 80127d8:	4623      	mov	r3, r4
 80127da:	9600      	str	r6, [sp, #0]
 80127dc:	465a      	mov	r2, fp
 80127de:	4629      	mov	r1, r5
 80127e0:	4638      	mov	r0, r7
 80127e2:	f7fd fe79 	bl	80104d8 <lv_draw_px>
 80127e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80127e8:	3301      	adds	r3, #1
 80127ea:	9310      	str	r3, [sp, #64]	; 0x40
 80127ec:	f7ff bab8 	b.w	8011d60 <lv_draw_rect+0x920>
    corner_size++;
 80127f0:	3301      	adds	r3, #1
 80127f2:	b29b      	uxth	r3, r3
 80127f4:	9303      	str	r3, [sp, #12]
    if(part & LV_BORDER_TOP)
 80127f6:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 80127fa:	9305      	str	r3, [sp, #20]
 80127fc:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 8012800:	2a00      	cmp	r2, #0
 8012802:	f000 8143 	beq.w	8012a8c <lv_draw_rect+0x164c>
        work_area.y1 = coords->y1 + corner_size;
 8012806:	9a03      	ldr	r2, [sp, #12]
 8012808:	4413      	add	r3, r2
        work_area.y1 = coords->y1 + radius;
 801280a:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
    if(part & LV_BORDER_BOTTOM)
 801280e:	f015 0301 	ands.w	r3, r5, #1
        work_area.y2 = coords->y2 - corner_size;
 8012812:	bf18      	it	ne
 8012814:	9a03      	ldrne	r2, [sp, #12]
    if(part & LV_BORDER_BOTTOM)
 8012816:	9306      	str	r3, [sp, #24]
 8012818:	f8ba 3006 	ldrh.w	r3, [sl, #6]
        work_area.y2 = coords->y2 - corner_size;
 801281c:	bf14      	ite	ne
 801281e:	1a9b      	subne	r3, r3, r2
        work_area.y2 = coords->y2 - radius;
 8012820:	eba3 0309 	subeq.w	r3, r3, r9
    if(part & LV_BORDER_LEFT) {
 8012824:	076a      	lsls	r2, r5, #29
        work_area.y2 = coords->y2 - radius;
 8012826:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
    if(part & LV_BORDER_LEFT) {
 801282a:	d50c      	bpl.n	8012846 <lv_draw_rect+0x1406>
        work_area.x1 = coords->x1;
 801282c:	f9ba 3000 	ldrsh.w	r3, [sl]
 8012830:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
        work_area.x2 = work_area.x1 + bwidth;
 8012834:	4433      	add	r3, r6
 8012836:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
        lv_draw_fill(&work_area, mask, color, opa);
 801283a:	463a      	mov	r2, r7
 801283c:	4623      	mov	r3, r4
 801283e:	4659      	mov	r1, fp
 8012840:	a826      	add	r0, sp, #152	; 0x98
 8012842:	f7fd fe98 	bl	8010576 <lv_draw_fill>
    if(part & LV_BORDER_RIGHT) {
 8012846:	072b      	lsls	r3, r5, #28
 8012848:	d50c      	bpl.n	8012864 <lv_draw_rect+0x1424>
        work_area.x2 = coords->x2;
 801284a:	f9ba 3004 	ldrsh.w	r3, [sl, #4]
 801284e:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
        work_area.x1 = work_area.x2 - bwidth;
 8012852:	a828      	add	r0, sp, #160	; 0xa0
 8012854:	1b9b      	subs	r3, r3, r6
 8012856:	f820 3d08 	strh.w	r3, [r0, #-8]!
        lv_draw_fill(&work_area, mask, color, opa);
 801285a:	463a      	mov	r2, r7
 801285c:	4623      	mov	r3, r4
 801285e:	4659      	mov	r1, fp
 8012860:	f7fd fe89 	bl	8010576 <lv_draw_fill>
    work_area.x1 = coords->x1 + corner_size - length_corr;
 8012864:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8012868:	9a03      	ldr	r2, [sp, #12]
 801286a:	f8ba 1000 	ldrh.w	r1, [sl]
 801286e:	1ad2      	subs	r2, r2, r3
 8012870:	440a      	add	r2, r1
 8012872:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
    work_area.x2 = coords->x2 - corner_size + length_corr;
 8012876:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 801287a:	4413      	add	r3, r2
 801287c:	9a03      	ldr	r2, [sp, #12]
 801287e:	1a9b      	subs	r3, r3, r2
 8012880:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
    if(part & LV_BORDER_TOP) {
 8012884:	9b05      	ldr	r3, [sp, #20]
 8012886:	b163      	cbz	r3, 80128a2 <lv_draw_rect+0x1462>
        work_area.y1 = coords->y1;
 8012888:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
 801288c:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
        work_area.y2 = coords->y1 + bwidth;
 8012890:	4433      	add	r3, r6
 8012892:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
        lv_draw_fill(&work_area, mask, color, opa);
 8012896:	463a      	mov	r2, r7
 8012898:	4623      	mov	r3, r4
 801289a:	4659      	mov	r1, fp
 801289c:	a826      	add	r0, sp, #152	; 0x98
 801289e:	f7fd fe6a 	bl	8010576 <lv_draw_fill>
    if(part & LV_BORDER_BOTTOM) {
 80128a2:	9b06      	ldr	r3, [sp, #24]
 80128a4:	b163      	cbz	r3, 80128c0 <lv_draw_rect+0x1480>
        work_area.y2 = coords->y2;
 80128a6:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 80128aa:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
        work_area.y1 = work_area.y2 - bwidth;
 80128ae:	1b9b      	subs	r3, r3, r6
 80128b0:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
        lv_draw_fill(&work_area, mask, color, opa);
 80128b4:	463a      	mov	r2, r7
 80128b6:	4623      	mov	r3, r4
 80128b8:	4659      	mov	r1, fp
 80128ba:	a826      	add	r0, sp, #152	; 0x98
 80128bc:	f7fd fe5b 	bl	8010576 <lv_draw_fill>
    if(length_corr != 0) {
 80128c0:	9b04      	ldr	r3, [sp, #16]
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d07b      	beq.n	80129be <lv_draw_rect+0x157e>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 80128c6:	f005 0306 	and.w	r3, r5, #6
 80128ca:	2b06      	cmp	r3, #6
 80128cc:	d119      	bne.n	8012902 <lv_draw_rect+0x14c2>
            work_area.x1 = coords->x1;
 80128ce:	f9ba 2000 	ldrsh.w	r2, [sl]
 80128d2:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
            work_area.x2 = coords->x1 + radius + aa;
 80128d6:	fa1f f388 	uxth.w	r3, r8
 80128da:	441a      	add	r2, r3
 80128dc:	444a      	add	r2, r9
 80128de:	f8ad 209c 	strh.w	r2, [sp, #156]	; 0x9c
            work_area.y1 = coords->y1 + radius + 1 + aa;
 80128e2:	f8ba 2002 	ldrh.w	r2, [sl, #2]
 80128e6:	1c51      	adds	r1, r2, #1
 80128e8:	440b      	add	r3, r1
 80128ea:	444b      	add	r3, r9
            work_area.y2 = coords->y1 + bwidth;
 80128ec:	4432      	add	r2, r6
            work_area.y1 = coords->y1 + radius + 1 + aa;
 80128ee:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            work_area.y2 = coords->y1 + bwidth;
 80128f2:	f8ad 209e 	strh.w	r2, [sp, #158]	; 0x9e
            lv_draw_fill(&work_area, mask, color, opa);
 80128f6:	4623      	mov	r3, r4
 80128f8:	463a      	mov	r2, r7
 80128fa:	4659      	mov	r1, fp
 80128fc:	a826      	add	r0, sp, #152	; 0x98
 80128fe:	f7fd fe3a 	bl	8010576 <lv_draw_fill>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 8012902:	f005 030a 	and.w	r3, r5, #10
 8012906:	2b0a      	cmp	r3, #10
 8012908:	d11a      	bne.n	8012940 <lv_draw_rect+0x1500>
            work_area.x1 = coords->x2 - radius - aa;
 801290a:	f9ba 1004 	ldrsh.w	r1, [sl, #4]
            work_area.x2 = coords->x2;
 801290e:	f8ad 109c 	strh.w	r1, [sp, #156]	; 0x9c
            work_area.x1 = coords->x2 - radius - aa;
 8012912:	fa1f f388 	uxth.w	r3, r8
 8012916:	eba1 0209 	sub.w	r2, r1, r9
 801291a:	1ad2      	subs	r2, r2, r3
 801291c:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
            work_area.y1 = coords->y1 + radius + 1 + aa;
 8012920:	f8ba 2002 	ldrh.w	r2, [sl, #2]
 8012924:	1c51      	adds	r1, r2, #1
 8012926:	440b      	add	r3, r1
 8012928:	444b      	add	r3, r9
            work_area.y2 = coords->y1 + bwidth;
 801292a:	4432      	add	r2, r6
            work_area.y1 = coords->y1 + radius + 1 + aa;
 801292c:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            work_area.y2 = coords->y1 + bwidth;
 8012930:	f8ad 209e 	strh.w	r2, [sp, #158]	; 0x9e
            lv_draw_fill(&work_area, mask, color, opa);
 8012934:	4623      	mov	r3, r4
 8012936:	463a      	mov	r2, r7
 8012938:	4659      	mov	r1, fp
 801293a:	a826      	add	r0, sp, #152	; 0x98
 801293c:	f7fd fe1b 	bl	8010576 <lv_draw_fill>
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 8012940:	f005 0305 	and.w	r3, r5, #5
 8012944:	2b05      	cmp	r3, #5
 8012946:	d11a      	bne.n	801297e <lv_draw_rect+0x153e>
            work_area.x1 = coords->x1;
 8012948:	f9ba 2000 	ldrsh.w	r2, [sl]
            work_area.y1 = coords->y2 - bwidth;
 801294c:	f8ba 3006 	ldrh.w	r3, [sl, #6]
            work_area.x1 = coords->x1;
 8012950:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
            work_area.x2 = coords->x1 + radius + aa;
 8012954:	fa1f f188 	uxth.w	r1, r8
 8012958:	440a      	add	r2, r1
 801295a:	444a      	add	r2, r9
            work_area.y2 = coords->y2 - radius - 1 - aa;
 801295c:	43c9      	mvns	r1, r1
            work_area.x2 = coords->x1 + radius + aa;
 801295e:	f8ad 209c 	strh.w	r2, [sp, #156]	; 0x9c
            work_area.y1 = coords->y2 - bwidth;
 8012962:	1b9a      	subs	r2, r3, r6
            work_area.y2 = coords->y2 - radius - 1 - aa;
 8012964:	440b      	add	r3, r1
 8012966:	eba3 0309 	sub.w	r3, r3, r9
            work_area.y1 = coords->y2 - bwidth;
 801296a:	f8ad 209a 	strh.w	r2, [sp, #154]	; 0x9a
            work_area.y2 = coords->y2 - radius - 1 - aa;
 801296e:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&work_area, mask, color, opa);
 8012972:	463a      	mov	r2, r7
 8012974:	4623      	mov	r3, r4
 8012976:	4659      	mov	r1, fp
 8012978:	a826      	add	r0, sp, #152	; 0x98
 801297a:	f7fd fdfc 	bl	8010576 <lv_draw_fill>
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 801297e:	f005 0309 	and.w	r3, r5, #9
 8012982:	2b09      	cmp	r3, #9
 8012984:	d11b      	bne.n	80129be <lv_draw_rect+0x157e>
            work_area.x1 = coords->x2 - radius - aa;
 8012986:	f9ba 1004 	ldrsh.w	r1, [sl, #4]
            work_area.x2 = coords->x2;
 801298a:	f8ad 109c 	strh.w	r1, [sp, #156]	; 0x9c
            work_area.x1 = coords->x2 - radius - aa;
 801298e:	eba1 0309 	sub.w	r3, r1, r9
 8012992:	fa1f f288 	uxth.w	r2, r8
 8012996:	1a9b      	subs	r3, r3, r2
 8012998:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            work_area.y1 = coords->y2 - bwidth;
 801299c:	f8ba 3006 	ldrh.w	r3, [sl, #6]
            work_area.y2 = coords->y2 - radius - 1 - aa;
 80129a0:	43d2      	mvns	r2, r2
            work_area.y1 = coords->y2 - bwidth;
 80129a2:	1b9e      	subs	r6, r3, r6
            work_area.y2 = coords->y2 - radius - 1 - aa;
 80129a4:	4413      	add	r3, r2
 80129a6:	eba3 0909 	sub.w	r9, r3, r9
            lv_draw_fill(&work_area, mask, color, opa);
 80129aa:	463a      	mov	r2, r7
 80129ac:	4623      	mov	r3, r4
 80129ae:	4659      	mov	r1, fp
 80129b0:	a826      	add	r0, sp, #152	; 0x98
            work_area.y1 = coords->y2 - bwidth;
 80129b2:	f8ad 609a 	strh.w	r6, [sp, #154]	; 0x9a
            work_area.y2 = coords->y2 - radius - 1 - aa;
 80129b6:	f8ad 909e 	strh.w	r9, [sp, #158]	; 0x9e
            lv_draw_fill(&work_area, mask, color, opa);
 80129ba:	f7fd fddc 	bl	8010576 <lv_draw_fill>
    if(style->body.radius == 0) {
 80129be:	9b02      	ldr	r3, [sp, #8]
 80129c0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	f47f aaef 	bne.w	8011fa8 <lv_draw_rect+0xb68>
        if(part & (LV_BORDER_TOP | LV_BORDER_LEFT)) {
 80129ca:	f015 0f06 	tst.w	r5, #6
 80129ce:	d015      	beq.n	80129fc <lv_draw_rect+0x15bc>
            work_area.x1 = coords->x1;
 80129d0:	f9ba 2000 	ldrsh.w	r2, [sl]
 80129d4:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
            work_area.x2 = coords->x1 + aa;
 80129d8:	fa1f f388 	uxth.w	r3, r8
 80129dc:	441a      	add	r2, r3
 80129de:	f8ad 209c 	strh.w	r2, [sp, #156]	; 0x9c
            work_area.y1 = coords->y1;
 80129e2:	f9ba 2002 	ldrsh.w	r2, [sl, #2]
 80129e6:	f8ad 209a 	strh.w	r2, [sp, #154]	; 0x9a
            work_area.y2 = coords->y1 + aa;
 80129ea:	4413      	add	r3, r2
 80129ec:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&work_area, mask, color, opa);
 80129f0:	463a      	mov	r2, r7
 80129f2:	4623      	mov	r3, r4
 80129f4:	4659      	mov	r1, fp
 80129f6:	a826      	add	r0, sp, #152	; 0x98
 80129f8:	f7fd fdbd 	bl	8010576 <lv_draw_fill>
        if(part & (LV_BORDER_TOP | LV_BORDER_RIGHT)) {
 80129fc:	f015 0f0a 	tst.w	r5, #10
 8012a00:	d015      	beq.n	8012a2e <lv_draw_rect+0x15ee>
            work_area.x1 = coords->x2 - aa;
 8012a02:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
            work_area.x2 = coords->x2;
 8012a06:	f8ad 209c 	strh.w	r2, [sp, #156]	; 0x9c
            work_area.x1 = coords->x2 - aa;
 8012a0a:	fa1f f388 	uxth.w	r3, r8
 8012a0e:	1ad1      	subs	r1, r2, r3
            work_area.y1 = coords->y1;
 8012a10:	f9ba 2002 	ldrsh.w	r2, [sl, #2]
            work_area.x1 = coords->x2 - aa;
 8012a14:	f8ad 1098 	strh.w	r1, [sp, #152]	; 0x98
            work_area.y2 = coords->y1 + aa;
 8012a18:	4413      	add	r3, r2
            work_area.y1 = coords->y1;
 8012a1a:	f8ad 209a 	strh.w	r2, [sp, #154]	; 0x9a
            work_area.y2 = coords->y1 + aa;
 8012a1e:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&work_area, mask, color, opa);
 8012a22:	463a      	mov	r2, r7
 8012a24:	4623      	mov	r3, r4
 8012a26:	4659      	mov	r1, fp
 8012a28:	a826      	add	r0, sp, #152	; 0x98
 8012a2a:	f7fd fda4 	bl	8010576 <lv_draw_fill>
        if(part & (LV_BORDER_BOTTOM | LV_BORDER_LEFT)) {
 8012a2e:	f015 0f05 	tst.w	r5, #5
 8012a32:	d015      	beq.n	8012a60 <lv_draw_rect+0x1620>
            work_area.x1 = coords->x1;
 8012a34:	f9ba 2000 	ldrsh.w	r2, [sl]
 8012a38:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
            work_area.x2 = coords->x1 + aa;
 8012a3c:	fa1f f388 	uxth.w	r3, r8
 8012a40:	441a      	add	r2, r3
 8012a42:	f8ad 209c 	strh.w	r2, [sp, #156]	; 0x9c
            work_area.y1 = coords->y2 - aa;
 8012a46:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
            work_area.y2 = coords->y2;
 8012a4a:	f8ad 209e 	strh.w	r2, [sp, #158]	; 0x9e
            work_area.y1 = coords->y2 - aa;
 8012a4e:	1ad3      	subs	r3, r2, r3
 8012a50:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            lv_draw_fill(&work_area, mask, color, opa);
 8012a54:	463a      	mov	r2, r7
 8012a56:	4623      	mov	r3, r4
 8012a58:	4659      	mov	r1, fp
 8012a5a:	a826      	add	r0, sp, #152	; 0x98
 8012a5c:	f7fd fd8b 	bl	8010576 <lv_draw_fill>
        if(part & (LV_BORDER_BOTTOM | LV_BORDER_RIGHT)) {
 8012a60:	f015 0f09 	tst.w	r5, #9
 8012a64:	f43f aaa0 	beq.w	8011fa8 <lv_draw_rect+0xb68>
            work_area.x1 = coords->x2 - aa;
 8012a68:	f9ba 3004 	ldrsh.w	r3, [sl, #4]
            work_area.x2 = coords->x2;
 8012a6c:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            work_area.x1 = coords->x2 - aa;
 8012a70:	fa1f f888 	uxth.w	r8, r8
 8012a74:	eba3 0208 	sub.w	r2, r3, r8
            work_area.y1 = coords->y2 - aa;
 8012a78:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
            work_area.x1 = coords->x2 - aa;
 8012a7c:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
            work_area.y1 = coords->y2 - aa;
 8012a80:	eba3 0808 	sub.w	r8, r3, r8
 8012a84:	f8ad 809a 	strh.w	r8, [sp, #154]	; 0x9a
 8012a88:	f7ff ba86 	b.w	8011f98 <lv_draw_rect+0xb58>
        work_area.y1 = coords->y1 + radius;
 8012a8c:	4403      	add	r3, r0
 8012a8e:	e6bc      	b.n	801280a <lv_draw_rect+0x13ca>
    if(aa) bwidth--; /*Because of anti-aliasing the border seems one pixel ticker*/
 8012a90:	3c02      	subs	r4, #2
 8012a92:	f7ff baaf 	b.w	8011ff4 <lv_draw_rect+0xbb4>
        if(cir_in.y < cir_in.x) {
 8012a96:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 8012a9a:	f9bd 1092 	ldrsh.w	r1, [sp, #146]	; 0x92
 8012a9e:	4299      	cmp	r1, r3
 8012aa0:	f280 8140 	bge.w	8012d24 <lv_draw_rect+0x18e4>
            act_w1 = cir_out.x - cir_in.x;
 8012aa4:	1ad3      	subs	r3, r2, r3
 8012aa6:	b21b      	sxth	r3, r3
 8012aa8:	930b      	str	r3, [sp, #44]	; 0x2c
            act_w2 = act_w1 - 1;
 8012aaa:	930d      	str	r3, [sp, #52]	; 0x34
        if(aa) {
 8012aac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012aae:	b393      	cbz	r3, 8012b16 <lv_draw_rect+0x16d6>
            if(out_x_last != cir_out.x) {
 8012ab0:	454a      	cmp	r2, r9
 8012ab2:	d014      	beq.n	8012ade <lv_draw_rect+0x169e>
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 8012ab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 8012ab6:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 8012aba:	fa1f f789 	uxth.w	r7, r9
 8012abe:	3301      	adds	r3, #1
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 8012ac0:	ebaa 0805 	sub.w	r8, sl, r5
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 8012ac4:	18fb      	adds	r3, r7, r3
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 8012ac6:	fa0f f888 	sxth.w	r8, r8
 8012aca:	2600      	movs	r6, #0
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 8012acc:	930f      	str	r3, [sp, #60]	; 0x3c
 8012ace:	b231      	sxth	r1, r6
                for(i = 0; i < seg_size; i++) {
 8012ad0:	4588      	cmp	r8, r1
 8012ad2:	f300 812f 	bgt.w	8012d34 <lv_draw_rect+0x18f4>
                out_x_last      = cir_out.x;
 8012ad6:	f9bd 9088 	ldrsh.w	r9, [sp, #136]	; 0x88
 8012ada:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
            if(in_x_last != cir_in.x) {
 8012ade:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 8012ae2:	9a08      	ldr	r2, [sp, #32]
 8012ae4:	4293      	cmp	r3, r2
 8012ae6:	d016      	beq.n	8012b16 <lv_draw_rect+0x16d6>
                in_y_seg_end        = cir_out.y;
 8012ae8:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
                lv_coord_t seg_size = in_y_seg_end - in_y_seg_start;
 8012aec:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
                in_y_seg_end        = cir_out.y;
 8012af0:	9313      	str	r3, [sp, #76]	; 0x4c
                lv_coord_t seg_size = in_y_seg_end - in_y_seg_start;
 8012af2:	eba3 0a06 	sub.w	sl, r3, r6
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 8012af6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012af8:	4413      	add	r3, r2
 8012afa:	b21b      	sxth	r3, r3
                lv_coord_t seg_size = in_y_seg_end - in_y_seg_start;
 8012afc:	fa0f fa8a 	sxth.w	sl, sl
 8012b00:	2400      	movs	r4, #0
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 8012b02:	9315      	str	r3, [sp, #84]	; 0x54
 8012b04:	b221      	sxth	r1, r4
                for(i = 0; i < seg_size; i++) {
 8012b06:	458a      	cmp	sl, r1
 8012b08:	f300 81b4 	bgt.w	8012e74 <lv_draw_rect+0x1a34>
                in_x_last      = cir_in.x;
 8012b0c:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 8012b10:	9308      	str	r3, [sp, #32]
                in_y_seg_start = in_y_seg_end;
 8012b12:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012b14:	930c      	str	r3, [sp, #48]	; 0x30
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 8012b16:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012b18:	2b09      	cmp	r3, #9
 8012b1a:	d135      	bne.n	8012b88 <lv_draw_rect+0x1748>
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT1_X(cir_out) - act_w2;
 8012b1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012b1e:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 8012b22:	4413      	add	r3, r2
 8012b24:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012b26:	b29b      	uxth	r3, r3
 8012b28:	1a9a      	subs	r2, r3, r2
 8012b2a:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
            circ_area.x2 = rb_origo.x + LV_CIRC_OCT1_X(cir_out);
 8012b2e:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
 8012b32:	9a04      	ldr	r2, [sp, #16]
 8012b34:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
 8012b38:	4413      	add	r3, r2
 8012b3a:	b21b      	sxth	r3, r3
 8012b3c:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            circ_area.y2 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
 8012b40:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&circ_area, mask, color, opa);
 8012b44:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8012b48:	9b07      	ldr	r3, [sp, #28]
 8012b4a:	4659      	mov	r1, fp
 8012b4c:	a826      	add	r0, sp, #152	; 0x98
 8012b4e:	f7fd fd12 	bl	8010576 <lv_draw_fill>
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
 8012b52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012b54:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
 8012b58:	4413      	add	r3, r2
 8012b5a:	b21b      	sxth	r3, r3
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out) - act_w1;
 8012b5c:	9a04      	ldr	r2, [sp, #16]
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
 8012b5e:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            circ_area.x2 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
 8012b62:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out) - act_w1;
 8012b66:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 8012b6a:	4413      	add	r3, r2
 8012b6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012b6e:	b29b      	uxth	r3, r3
 8012b70:	1a9a      	subs	r2, r3, r2
 8012b72:	f8ad 209a 	strh.w	r2, [sp, #154]	; 0x9a
            circ_area.y2 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out);
 8012b76:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&circ_area, mask, color, opa);
 8012b7a:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8012b7e:	9b07      	ldr	r3, [sp, #28]
 8012b80:	4659      	mov	r1, fp
 8012b82:	a826      	add	r0, sp, #152	; 0x98
 8012b84:	f7fd fcf7 	bl	8010576 <lv_draw_fill>
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 8012b88:	9b05      	ldr	r3, [sp, #20]
 8012b8a:	f003 0305 	and.w	r3, r3, #5
 8012b8e:	2b05      	cmp	r3, #5
 8012b90:	d135      	bne.n	8012bfe <lv_draw_rect+0x17be>
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
 8012b92:	9a06      	ldr	r2, [sp, #24]
 8012b94:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
 8012b98:	1ad3      	subs	r3, r2, r3
 8012b9a:	b21b      	sxth	r3, r3
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out) - act_w2;
 8012b9c:	9a04      	ldr	r2, [sp, #16]
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
 8012b9e:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            circ_area.x2 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
 8012ba2:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out) - act_w2;
 8012ba6:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 8012baa:	4413      	add	r3, r2
 8012bac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012bae:	b29b      	uxth	r3, r3
 8012bb0:	1a9a      	subs	r2, r3, r2
 8012bb2:	f8ad 209a 	strh.w	r2, [sp, #154]	; 0x9a
            circ_area.y2 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out);
 8012bb6:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&circ_area, mask, color, opa);
 8012bba:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8012bbe:	9b07      	ldr	r3, [sp, #28]
 8012bc0:	4659      	mov	r1, fp
 8012bc2:	a826      	add	r0, sp, #152	; 0x98
 8012bc4:	f7fd fcd7 	bl	8010576 <lv_draw_fill>
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT4_X(cir_out);
 8012bc8:	9a06      	ldr	r2, [sp, #24]
 8012bca:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 8012bce:	1ad3      	subs	r3, r2, r3
            circ_area.x2 = lb_origo.x + LV_CIRC_OCT4_X(cir_out) + act_w1;
 8012bd0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT4_X(cir_out);
 8012bd2:	b29b      	uxth	r3, r3
 8012bd4:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            circ_area.x2 = lb_origo.x + LV_CIRC_OCT4_X(cir_out) + act_w1;
 8012bd8:	4413      	add	r3, r2
 8012bda:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT4_Y(cir_out);
 8012bde:	9a04      	ldr	r2, [sp, #16]
 8012be0:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
 8012be4:	4413      	add	r3, r2
 8012be6:	b21b      	sxth	r3, r3
 8012be8:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            circ_area.y2 = lb_origo.y + LV_CIRC_OCT4_Y(cir_out);
 8012bec:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&circ_area, mask, color, opa);
 8012bf0:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8012bf4:	9b07      	ldr	r3, [sp, #28]
 8012bf6:	4659      	mov	r1, fp
 8012bf8:	a826      	add	r0, sp, #152	; 0x98
 8012bfa:	f7fd fcbc 	bl	8010576 <lv_draw_fill>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 8012bfe:	9b05      	ldr	r3, [sp, #20]
 8012c00:	f003 0306 	and.w	r3, r3, #6
 8012c04:	2b06      	cmp	r3, #6
 8012c06:	d13b      	bne.n	8012c80 <lv_draw_rect+0x1840>
            if(lb_origo.y + LV_CIRC_OCT4_Y(cir_out) > lt_origo.y + LV_CIRC_OCT5_Y(cir_out)) {
 8012c08:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
 8012c0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012c0e:	18d1      	adds	r1, r2, r3
 8012c10:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012c12:	1ad2      	subs	r2, r2, r3
 8012c14:	4291      	cmp	r1, r2
 8012c16:	dd18      	ble.n	8012c4a <lv_draw_rect+0x180a>
                circ_area.x1 = lt_origo.x + LV_CIRC_OCT5_X(cir_out);
 8012c18:	9906      	ldr	r1, [sp, #24]
 8012c1a:	f8bd 2088 	ldrh.w	r2, [sp, #136]	; 0x88
 8012c1e:	1a8a      	subs	r2, r1, r2
                circ_area.x2 = lt_origo.x + LV_CIRC_OCT5_X(cir_out) + act_w2;
 8012c20:	990d      	ldr	r1, [sp, #52]	; 0x34
                circ_area.x1 = lt_origo.x + LV_CIRC_OCT5_X(cir_out);
 8012c22:	b292      	uxth	r2, r2
 8012c24:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
                circ_area.x2 = lt_origo.x + LV_CIRC_OCT5_X(cir_out) + act_w2;
 8012c28:	440a      	add	r2, r1
 8012c2a:	f8ad 209c 	strh.w	r2, [sp, #156]	; 0x9c
                circ_area.y1 = lt_origo.y + LV_CIRC_OCT5_Y(cir_out);
 8012c2e:	9a03      	ldr	r2, [sp, #12]
 8012c30:	1ad3      	subs	r3, r2, r3
 8012c32:	b21b      	sxth	r3, r3
 8012c34:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
                circ_area.y2 = lt_origo.y + LV_CIRC_OCT5_Y(cir_out);
 8012c38:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
                lv_draw_fill(&circ_area, mask, color, opa);
 8012c3c:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8012c40:	9b07      	ldr	r3, [sp, #28]
 8012c42:	4659      	mov	r1, fp
 8012c44:	a826      	add	r0, sp, #152	; 0x98
 8012c46:	f7fd fc96 	bl	8010576 <lv_draw_fill>
            circ_area.x1 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
 8012c4a:	9a06      	ldr	r2, [sp, #24]
 8012c4c:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
 8012c50:	1ad3      	subs	r3, r2, r3
 8012c52:	b21b      	sxth	r3, r3
            circ_area.y1 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out);
 8012c54:	9a03      	ldr	r2, [sp, #12]
            circ_area.x1 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
 8012c56:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            circ_area.x2 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
 8012c5a:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            circ_area.y1 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out);
 8012c5e:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 8012c62:	1ad3      	subs	r3, r2, r3
            circ_area.y2 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out) + act_w1;
 8012c64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
            circ_area.y1 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out);
 8012c66:	b29b      	uxth	r3, r3
 8012c68:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            circ_area.y2 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out) + act_w1;
 8012c6c:	4413      	add	r3, r2
 8012c6e:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&circ_area, mask, color, opa);
 8012c72:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8012c76:	9b07      	ldr	r3, [sp, #28]
 8012c78:	4659      	mov	r1, fp
 8012c7a:	a826      	add	r0, sp, #152	; 0x98
 8012c7c:	f7fd fc7b 	bl	8010576 <lv_draw_fill>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 8012c80:	9b05      	ldr	r3, [sp, #20]
 8012c82:	f003 030a 	and.w	r3, r3, #10
 8012c86:	2b0a      	cmp	r3, #10
 8012c88:	d13b      	bne.n	8012d02 <lv_draw_rect+0x18c2>
            circ_area.x1 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
 8012c8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012c8c:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
 8012c90:	4413      	add	r3, r2
 8012c92:	b21b      	sxth	r3, r3
            circ_area.y1 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out);
 8012c94:	9a03      	ldr	r2, [sp, #12]
            circ_area.x1 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
 8012c96:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            circ_area.x2 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
 8012c9a:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            circ_area.y1 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out);
 8012c9e:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 8012ca2:	1ad3      	subs	r3, r2, r3
            circ_area.y2 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out) + act_w2;
 8012ca4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
            circ_area.y1 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out);
 8012ca6:	b29b      	uxth	r3, r3
 8012ca8:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            circ_area.y2 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out) + act_w2;
 8012cac:	4413      	add	r3, r2
 8012cae:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&circ_area, mask, color, opa);
 8012cb2:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8012cb6:	9b07      	ldr	r3, [sp, #28]
 8012cb8:	4659      	mov	r1, fp
 8012cba:	a826      	add	r0, sp, #152	; 0x98
 8012cbc:	f7fd fc5b 	bl	8010576 <lv_draw_fill>
            if(rb_origo.y + LV_CIRC_OCT1_Y(cir_out) > rt_origo.y + LV_CIRC_OCT8_Y(cir_out)) {
 8012cc0:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
 8012cc4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012cc6:	18d1      	adds	r1, r2, r3
 8012cc8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012cca:	1ad2      	subs	r2, r2, r3
 8012ccc:	4291      	cmp	r1, r2
 8012cce:	dd18      	ble.n	8012d02 <lv_draw_rect+0x18c2>
                circ_area.x1 = rt_origo.x + LV_CIRC_OCT8_X(cir_out) - act_w1;
 8012cd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012cd2:	f8bd 1088 	ldrh.w	r1, [sp, #136]	; 0x88
 8012cd6:	4411      	add	r1, r2
 8012cd8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012cda:	b289      	uxth	r1, r1
 8012cdc:	1a8a      	subs	r2, r1, r2
 8012cde:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
                circ_area.y1 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
 8012ce2:	9a03      	ldr	r2, [sp, #12]
                circ_area.x2 = rt_origo.x + LV_CIRC_OCT8_X(cir_out);
 8012ce4:	f8ad 109c 	strh.w	r1, [sp, #156]	; 0x9c
                circ_area.y1 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
 8012ce8:	1ad3      	subs	r3, r2, r3
 8012cea:	b21b      	sxth	r3, r3
 8012cec:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
                circ_area.y2 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
 8012cf0:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
                lv_draw_fill(&circ_area, mask, color, opa);
 8012cf4:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8012cf8:	9b07      	ldr	r3, [sp, #28]
 8012cfa:	4659      	mov	r1, fp
 8012cfc:	a826      	add	r0, sp, #152	; 0x98
 8012cfe:	f7fd fc3a 	bl	8010576 <lv_draw_fill>
        lv_circ_next(&cir_out, &tmp_out);
 8012d02:	a91e      	add	r1, sp, #120	; 0x78
 8012d04:	a822      	add	r0, sp, #136	; 0x88
 8012d06:	f001 fa08 	bl	801411a <lv_circ_next>
        if(cir_in.y < cir_in.x) {
 8012d0a:	f9bd 2092 	ldrsh.w	r2, [sp, #146]	; 0x92
 8012d0e:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 8012d12:	429a      	cmp	r2, r3
 8012d14:	f6bf a9bb 	bge.w	801208e <lv_draw_rect+0xc4e>
            lv_circ_next(&cir_in, &tmp_in);
 8012d18:	a920      	add	r1, sp, #128	; 0x80
 8012d1a:	a824      	add	r0, sp, #144	; 0x90
 8012d1c:	f001 f9fd 	bl	801411a <lv_circ_next>
 8012d20:	f7ff b9b5 	b.w	801208e <lv_draw_rect+0xc4e>
            act_w1 = cir_out.x - cir_out.y;
 8012d24:	eba2 030a 	sub.w	r3, r2, sl
 8012d28:	b29b      	uxth	r3, r3
 8012d2a:	b219      	sxth	r1, r3
            act_w2 = act_w1 - 1;
 8012d2c:	3b01      	subs	r3, #1
            act_w1 = cir_out.x - cir_out.y;
 8012d2e:	910b      	str	r1, [sp, #44]	; 0x2c
            act_w2 = act_w1 - 1;
 8012d30:	b21b      	sxth	r3, r3
 8012d32:	e6ba      	b.n	8012aaa <lv_draw_rect+0x166a>
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 8012d34:	f1b8 0f01 	cmp.w	r8, #1
                        aa_opa = antialias_get_opa_circ(seg_size, i, opa);
 8012d38:	9a07      	ldr	r2, [sp, #28]
 8012d3a:	4640      	mov	r0, r8
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 8012d3c:	f000 8094 	beq.w	8012e68 <lv_draw_rect+0x1a28>
                        aa_opa = antialias_get_opa_circ(seg_size, i, opa);
 8012d40:	f7fe fb5c 	bl	80113fc <antialias_get_opa_circ>
 8012d44:	4604      	mov	r4, r0
                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 8012d46:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012d48:	2b09      	cmp	r3, #9
 8012d4a:	d11b      	bne.n	8012d84 <lv_draw_rect+0x1944>
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 8012d4c:	9b04      	ldr	r3, [sp, #16]
 8012d4e:	9400      	str	r4, [sp, #0]
 8012d50:	fa1f f986 	uxth.w	r9, r6
 8012d54:	1959      	adds	r1, r3, r5
 8012d56:	9b02      	ldr	r3, [sp, #8]
 8012d58:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 8012d5c:	895b      	ldrh	r3, [r3, #10]
 8012d5e:	4449      	add	r1, r9
 8012d60:	465a      	mov	r2, fp
 8012d62:	b209      	sxth	r1, r1
 8012d64:	f7fd fbb8 	bl	80104d8 <lv_draw_px>
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 8012d68:	9b04      	ldr	r3, [sp, #16]
 8012d6a:	9400      	str	r4, [sp, #0]
 8012d6c:	1c59      	adds	r1, r3, #1
 8012d6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d70:	1958      	adds	r0, r3, r5
 8012d72:	9b02      	ldr	r3, [sp, #8]
 8012d74:	4439      	add	r1, r7
 8012d76:	4448      	add	r0, r9
 8012d78:	895b      	ldrh	r3, [r3, #10]
 8012d7a:	465a      	mov	r2, fp
 8012d7c:	b209      	sxth	r1, r1
 8012d7e:	b200      	sxth	r0, r0
 8012d80:	f7fd fbaa 	bl	80104d8 <lv_draw_px>
                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 8012d84:	9b05      	ldr	r3, [sp, #20]
 8012d86:	f003 0305 	and.w	r3, r3, #5
 8012d8a:	2b05      	cmp	r3, #5
 8012d8c:	d120      	bne.n	8012dd0 <lv_draw_rect+0x1990>
                        lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 8012d8e:	9b04      	ldr	r3, [sp, #16]
 8012d90:	9400      	str	r4, [sp, #0]
 8012d92:	f103 0e01 	add.w	lr, r3, #1
 8012d96:	9b06      	ldr	r3, [sp, #24]
 8012d98:	fa1f f986 	uxth.w	r9, r6
 8012d9c:	1b58      	subs	r0, r3, r5
 8012d9e:	9b02      	ldr	r3, [sp, #8]
 8012da0:	44be      	add	lr, r7
 8012da2:	eba0 0009 	sub.w	r0, r0, r9
 8012da6:	895b      	ldrh	r3, [r3, #10]
 8012da8:	465a      	mov	r2, fp
 8012daa:	fa0f f18e 	sxth.w	r1, lr
 8012dae:	b200      	sxth	r0, r0
 8012db0:	f7fd fb92 	bl	80104d8 <lv_draw_px>
                        lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 8012db4:	9b04      	ldr	r3, [sp, #16]
 8012db6:	9400      	str	r4, [sp, #0]
 8012db8:	1959      	adds	r1, r3, r5
 8012dba:	9b06      	ldr	r3, [sp, #24]
 8012dbc:	1e58      	subs	r0, r3, #1
 8012dbe:	9b02      	ldr	r3, [sp, #8]
 8012dc0:	4449      	add	r1, r9
 8012dc2:	1bc0      	subs	r0, r0, r7
 8012dc4:	895b      	ldrh	r3, [r3, #10]
 8012dc6:	465a      	mov	r2, fp
 8012dc8:	b209      	sxth	r1, r1
 8012dca:	b200      	sxth	r0, r0
 8012dcc:	f7fd fb84 	bl	80104d8 <lv_draw_px>
                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 8012dd0:	9b05      	ldr	r3, [sp, #20]
 8012dd2:	f003 0306 	and.w	r3, r3, #6
 8012dd6:	2b06      	cmp	r3, #6
 8012dd8:	d11f      	bne.n	8012e1a <lv_draw_rect+0x19da>
                        lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 8012dda:	9b03      	ldr	r3, [sp, #12]
 8012ddc:	9400      	str	r4, [sp, #0]
 8012dde:	1b59      	subs	r1, r3, r5
 8012de0:	9b06      	ldr	r3, [sp, #24]
 8012de2:	fa1f f986 	uxth.w	r9, r6
 8012de6:	1e58      	subs	r0, r3, #1
 8012de8:	9b02      	ldr	r3, [sp, #8]
 8012dea:	eba1 0109 	sub.w	r1, r1, r9
 8012dee:	1bc0      	subs	r0, r0, r7
 8012df0:	895b      	ldrh	r3, [r3, #10]
 8012df2:	465a      	mov	r2, fp
 8012df4:	b209      	sxth	r1, r1
 8012df6:	b200      	sxth	r0, r0
 8012df8:	f7fd fb6e 	bl	80104d8 <lv_draw_px>
                        lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 8012dfc:	9b03      	ldr	r3, [sp, #12]
 8012dfe:	9400      	str	r4, [sp, #0]
 8012e00:	1e59      	subs	r1, r3, #1
 8012e02:	9b06      	ldr	r3, [sp, #24]
 8012e04:	1b58      	subs	r0, r3, r5
 8012e06:	9b02      	ldr	r3, [sp, #8]
 8012e08:	1bc9      	subs	r1, r1, r7
 8012e0a:	eba0 0009 	sub.w	r0, r0, r9
 8012e0e:	895b      	ldrh	r3, [r3, #10]
 8012e10:	465a      	mov	r2, fp
 8012e12:	b209      	sxth	r1, r1
 8012e14:	b200      	sxth	r0, r0
 8012e16:	f7fd fb5f 	bl	80104d8 <lv_draw_px>
                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 8012e1a:	9b05      	ldr	r3, [sp, #20]
 8012e1c:	f003 030a 	and.w	r3, r3, #10
 8012e20:	2b0a      	cmp	r3, #10
 8012e22:	d11f      	bne.n	8012e64 <lv_draw_rect+0x1a24>
                        lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 8012e24:	9b03      	ldr	r3, [sp, #12]
 8012e26:	9400      	str	r4, [sp, #0]
 8012e28:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
 8012e2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e2e:	fa1f f986 	uxth.w	r9, r6
 8012e32:	1958      	adds	r0, r3, r5
 8012e34:	9b02      	ldr	r3, [sp, #8]
 8012e36:	ebae 0e07 	sub.w	lr, lr, r7
 8012e3a:	4448      	add	r0, r9
 8012e3c:	895b      	ldrh	r3, [r3, #10]
 8012e3e:	465a      	mov	r2, fp
 8012e40:	fa0f f18e 	sxth.w	r1, lr
 8012e44:	b200      	sxth	r0, r0
 8012e46:	f7fd fb47 	bl	80104d8 <lv_draw_px>
                        lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 8012e4a:	9b03      	ldr	r3, [sp, #12]
 8012e4c:	9400      	str	r4, [sp, #0]
 8012e4e:	1b59      	subs	r1, r3, r5
 8012e50:	9b02      	ldr	r3, [sp, #8]
 8012e52:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 8012e56:	895b      	ldrh	r3, [r3, #10]
 8012e58:	eba1 0109 	sub.w	r1, r1, r9
 8012e5c:	465a      	mov	r2, fp
 8012e5e:	b209      	sxth	r1, r1
 8012e60:	f7fd fb3a 	bl	80104d8 <lv_draw_px>
 8012e64:	3601      	adds	r6, #1
 8012e66:	e632      	b.n	8012ace <lv_draw_rect+0x168e>
                        aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 8012e68:	f7fd faf4 	bl	8010454 <lv_draw_aa_get_opa>
 8012e6c:	9b07      	ldr	r3, [sp, #28]
 8012e6e:	1a18      	subs	r0, r3, r0
 8012e70:	b2c4      	uxtb	r4, r0
 8012e72:	e768      	b.n	8012d46 <lv_draw_rect+0x1906>
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 8012e74:	f1ba 0f01 	cmp.w	sl, #1
                        aa_opa = opa - antialias_get_opa_circ(seg_size, i, opa);
 8012e78:	9a07      	ldr	r2, [sp, #28]
 8012e7a:	4650      	mov	r0, sl
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 8012e7c:	f000 809c 	beq.w	8012fb8 <lv_draw_rect+0x1b78>
                        aa_opa = opa - antialias_get_opa_circ(seg_size, i, opa);
 8012e80:	f7fe fabc 	bl	80113fc <antialias_get_opa_circ>
 8012e84:	9b07      	ldr	r3, [sp, #28]
 8012e86:	1a18      	subs	r0, r3, r0
 8012e88:	b2c5      	uxtb	r5, r0
                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 8012e8a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012e8c:	2b09      	cmp	r3, #9
 8012e8e:	d10a      	bne.n	8012ea6 <lv_draw_rect+0x1a66>
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 8012e90:	9b04      	ldr	r3, [sp, #16]
 8012e92:	9500      	str	r5, [sp, #0]
 8012e94:	1999      	adds	r1, r3, r6
 8012e96:	9b02      	ldr	r3, [sp, #8]
 8012e98:	9815      	ldr	r0, [sp, #84]	; 0x54
 8012e9a:	895b      	ldrh	r3, [r3, #10]
 8012e9c:	4421      	add	r1, r4
 8012e9e:	465a      	mov	r2, fp
 8012ea0:	b209      	sxth	r1, r1
 8012ea2:	f7fd fb19 	bl	80104d8 <lv_draw_px>
 8012ea6:	9b05      	ldr	r3, [sp, #20]
 8012ea8:	f003 0305 	and.w	r3, r3, #5
                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 8012eac:	2b05      	cmp	r3, #5
 8012eae:	9314      	str	r3, [sp, #80]	; 0x50
 8012eb0:	d10e      	bne.n	8012ed0 <lv_draw_rect+0x1a90>
                        lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) - 1, mask,
 8012eb2:	9b04      	ldr	r3, [sp, #16]
 8012eb4:	9500      	str	r5, [sp, #0]
 8012eb6:	1e59      	subs	r1, r3, #1
 8012eb8:	9b08      	ldr	r3, [sp, #32]
 8012eba:	4419      	add	r1, r3
 8012ebc:	9b06      	ldr	r3, [sp, #24]
 8012ebe:	1b98      	subs	r0, r3, r6
 8012ec0:	9b02      	ldr	r3, [sp, #8]
 8012ec2:	1b00      	subs	r0, r0, r4
 8012ec4:	895b      	ldrh	r3, [r3, #10]
 8012ec6:	465a      	mov	r2, fp
 8012ec8:	b209      	sxth	r1, r1
 8012eca:	b200      	sxth	r0, r0
 8012ecc:	f7fd fb04 	bl	80104d8 <lv_draw_px>
 8012ed0:	9b05      	ldr	r3, [sp, #20]
 8012ed2:	f003 0806 	and.w	r8, r3, #6
                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 8012ed6:	f1b8 0f06 	cmp.w	r8, #6
 8012eda:	d10e      	bne.n	8012efa <lv_draw_rect+0x1aba>
                        lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) + 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 8012edc:	9b03      	ldr	r3, [sp, #12]
 8012ede:	9500      	str	r5, [sp, #0]
 8012ee0:	1b99      	subs	r1, r3, r6
 8012ee2:	9b06      	ldr	r3, [sp, #24]
 8012ee4:	1c58      	adds	r0, r3, #1
 8012ee6:	9b08      	ldr	r3, [sp, #32]
 8012ee8:	1ac0      	subs	r0, r0, r3
 8012eea:	9b02      	ldr	r3, [sp, #8]
 8012eec:	1b09      	subs	r1, r1, r4
 8012eee:	895b      	ldrh	r3, [r3, #10]
 8012ef0:	465a      	mov	r2, fp
 8012ef2:	b209      	sxth	r1, r1
 8012ef4:	b200      	sxth	r0, r0
 8012ef6:	f7fd faef 	bl	80104d8 <lv_draw_px>
 8012efa:	9b05      	ldr	r3, [sp, #20]
 8012efc:	f003 070a 	and.w	r7, r3, #10
                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 8012f00:	2f0a      	cmp	r7, #10
 8012f02:	d10e      	bne.n	8012f22 <lv_draw_rect+0x1ae2>
                        lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) + 1, mask,
 8012f04:	9b03      	ldr	r3, [sp, #12]
 8012f06:	9500      	str	r5, [sp, #0]
 8012f08:	1c59      	adds	r1, r3, #1
 8012f0a:	9b08      	ldr	r3, [sp, #32]
 8012f0c:	1ac9      	subs	r1, r1, r3
 8012f0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f10:	1998      	adds	r0, r3, r6
 8012f12:	9b02      	ldr	r3, [sp, #8]
 8012f14:	4420      	add	r0, r4
 8012f16:	895b      	ldrh	r3, [r3, #10]
 8012f18:	465a      	mov	r2, fp
 8012f1a:	b209      	sxth	r1, r1
 8012f1c:	b200      	sxth	r0, r0
 8012f1e:	f7fd fadb 	bl	80104d8 <lv_draw_px>
                    if(LV_CIRC_OCT1_X(aa_p) - 1 != LV_CIRC_OCT2_X(aa_p) + i) {
 8012f22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012f24:	9a08      	ldr	r2, [sp, #32]
 8012f26:	4423      	add	r3, r4
 8012f28:	3a01      	subs	r2, #1
 8012f2a:	4293      	cmp	r3, r2
 8012f2c:	d042      	beq.n	8012fb4 <lv_draw_rect+0x1b74>
                        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 8012f2e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012f30:	2b09      	cmp	r3, #9
 8012f32:	d10e      	bne.n	8012f52 <lv_draw_rect+0x1b12>
                            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) - 1,
 8012f34:	9b04      	ldr	r3, [sp, #16]
 8012f36:	9500      	str	r5, [sp, #0]
 8012f38:	1e59      	subs	r1, r3, #1
 8012f3a:	9b08      	ldr	r3, [sp, #32]
 8012f3c:	4419      	add	r1, r3
 8012f3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f40:	1998      	adds	r0, r3, r6
 8012f42:	9b02      	ldr	r3, [sp, #8]
 8012f44:	4420      	add	r0, r4
 8012f46:	895b      	ldrh	r3, [r3, #10]
 8012f48:	465a      	mov	r2, fp
 8012f4a:	b209      	sxth	r1, r1
 8012f4c:	b200      	sxth	r0, r0
 8012f4e:	f7fd fac3 	bl	80104d8 <lv_draw_px>
                        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 8012f52:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012f54:	2b05      	cmp	r3, #5
 8012f56:	d10e      	bne.n	8012f76 <lv_draw_rect+0x1b36>
                            lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) + 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i,
 8012f58:	9b04      	ldr	r3, [sp, #16]
 8012f5a:	9500      	str	r5, [sp, #0]
 8012f5c:	1999      	adds	r1, r3, r6
 8012f5e:	9b06      	ldr	r3, [sp, #24]
 8012f60:	1c58      	adds	r0, r3, #1
 8012f62:	9b08      	ldr	r3, [sp, #32]
 8012f64:	1ac0      	subs	r0, r0, r3
 8012f66:	9b02      	ldr	r3, [sp, #8]
 8012f68:	4421      	add	r1, r4
 8012f6a:	895b      	ldrh	r3, [r3, #10]
 8012f6c:	465a      	mov	r2, fp
 8012f6e:	b209      	sxth	r1, r1
 8012f70:	b200      	sxth	r0, r0
 8012f72:	f7fd fab1 	bl	80104d8 <lv_draw_px>
                        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 8012f76:	f1b8 0f06 	cmp.w	r8, #6
 8012f7a:	d10e      	bne.n	8012f9a <lv_draw_rect+0x1b5a>
                            lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) + 1,
 8012f7c:	9b03      	ldr	r3, [sp, #12]
 8012f7e:	9500      	str	r5, [sp, #0]
 8012f80:	1c59      	adds	r1, r3, #1
 8012f82:	9b08      	ldr	r3, [sp, #32]
 8012f84:	1ac9      	subs	r1, r1, r3
 8012f86:	9b06      	ldr	r3, [sp, #24]
 8012f88:	1b98      	subs	r0, r3, r6
 8012f8a:	9b02      	ldr	r3, [sp, #8]
 8012f8c:	1b00      	subs	r0, r0, r4
 8012f8e:	895b      	ldrh	r3, [r3, #10]
 8012f90:	465a      	mov	r2, fp
 8012f92:	b209      	sxth	r1, r1
 8012f94:	b200      	sxth	r0, r0
 8012f96:	f7fd fa9f 	bl	80104d8 <lv_draw_px>
                        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 8012f9a:	2f0a      	cmp	r7, #10
 8012f9c:	d10a      	bne.n	8012fb4 <lv_draw_rect+0x1b74>
                            lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) - 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i,
 8012f9e:	9b03      	ldr	r3, [sp, #12]
 8012fa0:	9500      	str	r5, [sp, #0]
 8012fa2:	1b99      	subs	r1, r3, r6
 8012fa4:	9b02      	ldr	r3, [sp, #8]
 8012fa6:	9815      	ldr	r0, [sp, #84]	; 0x54
 8012fa8:	895b      	ldrh	r3, [r3, #10]
 8012faa:	1b09      	subs	r1, r1, r4
 8012fac:	465a      	mov	r2, fp
 8012fae:	b209      	sxth	r1, r1
 8012fb0:	f7fd fa92 	bl	80104d8 <lv_draw_px>
 8012fb4:	3401      	adds	r4, #1
 8012fb6:	e5a5      	b.n	8012b04 <lv_draw_rect+0x16c4>
                        aa_opa = lv_draw_aa_get_opa(seg_size, i, opa);
 8012fb8:	f7fd fa4c 	bl	8010454 <lv_draw_aa_get_opa>
 8012fbc:	4605      	mov	r5, r0
 8012fbe:	e764      	b.n	8012e8a <lv_draw_rect+0x1a4a>
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 8012fc0:	9a07      	ldr	r2, [sp, #28]
 8012fc2:	4650      	mov	r0, sl
 8012fc4:	f7fd fa46 	bl	8010454 <lv_draw_aa_get_opa>
 8012fc8:	9b07      	ldr	r3, [sp, #28]
 8012fca:	1a18      	subs	r0, r3, r0
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 8012fcc:	9b05      	ldr	r3, [sp, #20]
 8012fce:	f003 0309 	and.w	r3, r3, #9
 8012fd2:	2b09      	cmp	r3, #9
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 8012fd4:	b2c4      	uxtb	r4, r0
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 8012fd6:	d11b      	bne.n	8013010 <lv_draw_rect+0x1bd0>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 8012fd8:	9b04      	ldr	r3, [sp, #16]
 8012fda:	9400      	str	r4, [sp, #0]
 8012fdc:	fa1f f886 	uxth.w	r8, r6
 8012fe0:	1959      	adds	r1, r3, r5
 8012fe2:	9b02      	ldr	r3, [sp, #8]
 8012fe4:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8012fe8:	895b      	ldrh	r3, [r3, #10]
 8012fea:	4441      	add	r1, r8
 8012fec:	465a      	mov	r2, fp
 8012fee:	b209      	sxth	r1, r1
 8012ff0:	f7fd fa72 	bl	80104d8 <lv_draw_px>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 8012ff4:	9b04      	ldr	r3, [sp, #16]
 8012ff6:	9400      	str	r4, [sp, #0]
 8012ff8:	1c59      	adds	r1, r3, #1
 8012ffa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ffc:	1958      	adds	r0, r3, r5
 8012ffe:	9b02      	ldr	r3, [sp, #8]
 8013000:	4439      	add	r1, r7
 8013002:	4440      	add	r0, r8
 8013004:	895b      	ldrh	r3, [r3, #10]
 8013006:	465a      	mov	r2, fp
 8013008:	b209      	sxth	r1, r1
 801300a:	b200      	sxth	r0, r0
 801300c:	f7fd fa64 	bl	80104d8 <lv_draw_px>
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 8013010:	9b05      	ldr	r3, [sp, #20]
 8013012:	f003 0305 	and.w	r3, r3, #5
 8013016:	2b05      	cmp	r3, #5
 8013018:	d120      	bne.n	801305c <lv_draw_rect+0x1c1c>
                lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 801301a:	9b04      	ldr	r3, [sp, #16]
 801301c:	9400      	str	r4, [sp, #0]
 801301e:	f103 0e01 	add.w	lr, r3, #1
 8013022:	9b06      	ldr	r3, [sp, #24]
 8013024:	fa1f f886 	uxth.w	r8, r6
 8013028:	1b58      	subs	r0, r3, r5
 801302a:	9b02      	ldr	r3, [sp, #8]
 801302c:	44be      	add	lr, r7
 801302e:	eba0 0008 	sub.w	r0, r0, r8
 8013032:	895b      	ldrh	r3, [r3, #10]
 8013034:	465a      	mov	r2, fp
 8013036:	fa0f f18e 	sxth.w	r1, lr
 801303a:	b200      	sxth	r0, r0
 801303c:	f7fd fa4c 	bl	80104d8 <lv_draw_px>
                lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 8013040:	9b04      	ldr	r3, [sp, #16]
 8013042:	9400      	str	r4, [sp, #0]
 8013044:	1959      	adds	r1, r3, r5
 8013046:	9b06      	ldr	r3, [sp, #24]
 8013048:	1e58      	subs	r0, r3, #1
 801304a:	9b02      	ldr	r3, [sp, #8]
 801304c:	4441      	add	r1, r8
 801304e:	1bc0      	subs	r0, r0, r7
 8013050:	895b      	ldrh	r3, [r3, #10]
 8013052:	465a      	mov	r2, fp
 8013054:	b209      	sxth	r1, r1
 8013056:	b200      	sxth	r0, r0
 8013058:	f7fd fa3e 	bl	80104d8 <lv_draw_px>
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 801305c:	9b05      	ldr	r3, [sp, #20]
 801305e:	f003 0306 	and.w	r3, r3, #6
 8013062:	2b06      	cmp	r3, #6
 8013064:	d11f      	bne.n	80130a6 <lv_draw_rect+0x1c66>
                lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 8013066:	9b03      	ldr	r3, [sp, #12]
 8013068:	9400      	str	r4, [sp, #0]
 801306a:	1b59      	subs	r1, r3, r5
 801306c:	9b06      	ldr	r3, [sp, #24]
 801306e:	fa1f f886 	uxth.w	r8, r6
 8013072:	1e58      	subs	r0, r3, #1
 8013074:	9b02      	ldr	r3, [sp, #8]
 8013076:	eba1 0108 	sub.w	r1, r1, r8
 801307a:	1bc0      	subs	r0, r0, r7
 801307c:	895b      	ldrh	r3, [r3, #10]
 801307e:	465a      	mov	r2, fp
 8013080:	b209      	sxth	r1, r1
 8013082:	b200      	sxth	r0, r0
 8013084:	f7fd fa28 	bl	80104d8 <lv_draw_px>
                lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 8013088:	9b03      	ldr	r3, [sp, #12]
 801308a:	9400      	str	r4, [sp, #0]
 801308c:	1e59      	subs	r1, r3, #1
 801308e:	9b06      	ldr	r3, [sp, #24]
 8013090:	1b58      	subs	r0, r3, r5
 8013092:	9b02      	ldr	r3, [sp, #8]
 8013094:	1bc9      	subs	r1, r1, r7
 8013096:	eba0 0008 	sub.w	r0, r0, r8
 801309a:	895b      	ldrh	r3, [r3, #10]
 801309c:	465a      	mov	r2, fp
 801309e:	b209      	sxth	r1, r1
 80130a0:	b200      	sxth	r0, r0
 80130a2:	f7fd fa19 	bl	80104d8 <lv_draw_px>
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 80130a6:	9b05      	ldr	r3, [sp, #20]
 80130a8:	f003 030a 	and.w	r3, r3, #10
 80130ac:	2b0a      	cmp	r3, #10
 80130ae:	d11f      	bne.n	80130f0 <lv_draw_rect+0x1cb0>
                lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 80130b0:	9b03      	ldr	r3, [sp, #12]
 80130b2:	9400      	str	r4, [sp, #0]
 80130b4:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
 80130b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80130ba:	fa1f f886 	uxth.w	r8, r6
 80130be:	1958      	adds	r0, r3, r5
 80130c0:	9b02      	ldr	r3, [sp, #8]
 80130c2:	ebae 0e07 	sub.w	lr, lr, r7
 80130c6:	4440      	add	r0, r8
 80130c8:	895b      	ldrh	r3, [r3, #10]
 80130ca:	465a      	mov	r2, fp
 80130cc:	fa0f f18e 	sxth.w	r1, lr
 80130d0:	b200      	sxth	r0, r0
 80130d2:	f7fd fa01 	bl	80104d8 <lv_draw_px>
                lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 80130d6:	9b03      	ldr	r3, [sp, #12]
 80130d8:	9400      	str	r4, [sp, #0]
 80130da:	1b59      	subs	r1, r3, r5
 80130dc:	9b02      	ldr	r3, [sp, #8]
 80130de:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 80130e2:	895b      	ldrh	r3, [r3, #10]
 80130e4:	eba1 0108 	sub.w	r1, r1, r8
 80130e8:	465a      	mov	r2, fp
 80130ea:	b209      	sxth	r1, r1
 80130ec:	f7fd f9f4 	bl	80104d8 <lv_draw_px>
 80130f0:	3601      	adds	r6, #1
 80130f2:	f7fe bfe3 	b.w	80120bc <lv_draw_rect+0xc7c>
            lv_opa_t aa_opa = lv_draw_aa_get_opa(seg_size, i, opa);
 80130f6:	9a07      	ldr	r2, [sp, #28]
 80130f8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80130fa:	f7fd f9ab 	bl	8010454 <lv_draw_aa_get_opa>
 80130fe:	9b05      	ldr	r3, [sp, #20]
 8013100:	f003 0909 	and.w	r9, r3, #9
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 8013104:	f1b9 0f09 	cmp.w	r9, #9
            lv_opa_t aa_opa = lv_draw_aa_get_opa(seg_size, i, opa);
 8013108:	4606      	mov	r6, r0
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 801310a:	d10a      	bne.n	8013122 <lv_draw_rect+0x1ce2>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 801310c:	9b04      	ldr	r3, [sp, #16]
 801310e:	9000      	str	r0, [sp, #0]
 8013110:	1959      	adds	r1, r3, r5
 8013112:	9b02      	ldr	r3, [sp, #8]
 8013114:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8013116:	895b      	ldrh	r3, [r3, #10]
 8013118:	4421      	add	r1, r4
 801311a:	465a      	mov	r2, fp
 801311c:	b209      	sxth	r1, r1
 801311e:	f7fd f9db 	bl	80104d8 <lv_draw_px>
 8013122:	9b05      	ldr	r3, [sp, #20]
 8013124:	f003 0a05 	and.w	sl, r3, #5
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 8013128:	f1ba 0f05 	cmp.w	sl, #5
 801312c:	d10e      	bne.n	801314c <lv_draw_rect+0x1d0c>
                lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) - 1, mask,
 801312e:	9b04      	ldr	r3, [sp, #16]
 8013130:	9600      	str	r6, [sp, #0]
 8013132:	1e59      	subs	r1, r3, #1
 8013134:	9b08      	ldr	r3, [sp, #32]
 8013136:	4419      	add	r1, r3
 8013138:	9b06      	ldr	r3, [sp, #24]
 801313a:	1b58      	subs	r0, r3, r5
 801313c:	9b02      	ldr	r3, [sp, #8]
 801313e:	1b00      	subs	r0, r0, r4
 8013140:	895b      	ldrh	r3, [r3, #10]
 8013142:	465a      	mov	r2, fp
 8013144:	b209      	sxth	r1, r1
 8013146:	b200      	sxth	r0, r0
 8013148:	f7fd f9c6 	bl	80104d8 <lv_draw_px>
 801314c:	9b05      	ldr	r3, [sp, #20]
 801314e:	f003 0806 	and.w	r8, r3, #6
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 8013152:	f1b8 0f06 	cmp.w	r8, #6
 8013156:	d10e      	bne.n	8013176 <lv_draw_rect+0x1d36>
                lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) + 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 8013158:	9b03      	ldr	r3, [sp, #12]
 801315a:	9600      	str	r6, [sp, #0]
 801315c:	1b59      	subs	r1, r3, r5
 801315e:	9b06      	ldr	r3, [sp, #24]
 8013160:	1c58      	adds	r0, r3, #1
 8013162:	9b08      	ldr	r3, [sp, #32]
 8013164:	1ac0      	subs	r0, r0, r3
 8013166:	9b02      	ldr	r3, [sp, #8]
 8013168:	1b09      	subs	r1, r1, r4
 801316a:	895b      	ldrh	r3, [r3, #10]
 801316c:	465a      	mov	r2, fp
 801316e:	b209      	sxth	r1, r1
 8013170:	b200      	sxth	r0, r0
 8013172:	f7fd f9b1 	bl	80104d8 <lv_draw_px>
 8013176:	9b05      	ldr	r3, [sp, #20]
 8013178:	f003 070a 	and.w	r7, r3, #10
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 801317c:	2f0a      	cmp	r7, #10
 801317e:	d10e      	bne.n	801319e <lv_draw_rect+0x1d5e>
                lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) + 1, mask,
 8013180:	9b03      	ldr	r3, [sp, #12]
 8013182:	9600      	str	r6, [sp, #0]
 8013184:	1c59      	adds	r1, r3, #1
 8013186:	9b08      	ldr	r3, [sp, #32]
 8013188:	1ac9      	subs	r1, r1, r3
 801318a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801318c:	1958      	adds	r0, r3, r5
 801318e:	9b02      	ldr	r3, [sp, #8]
 8013190:	4420      	add	r0, r4
 8013192:	895b      	ldrh	r3, [r3, #10]
 8013194:	465a      	mov	r2, fp
 8013196:	b209      	sxth	r1, r1
 8013198:	b200      	sxth	r0, r0
 801319a:	f7fd f99d 	bl	80104d8 <lv_draw_px>
            if(LV_CIRC_OCT1_X(aa_p) - 1 != LV_CIRC_OCT2_X(aa_p) + i) {
 801319e:	9b08      	ldr	r3, [sp, #32]
 80131a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80131a2:	3b01      	subs	r3, #1
 80131a4:	4422      	add	r2, r4
 80131a6:	4293      	cmp	r3, r2
 80131a8:	d042      	beq.n	8013230 <lv_draw_rect+0x1df0>
                if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 80131aa:	f1b9 0f09 	cmp.w	r9, #9
 80131ae:	d10e      	bne.n	80131ce <lv_draw_rect+0x1d8e>
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) - 1, mask,
 80131b0:	9b04      	ldr	r3, [sp, #16]
 80131b2:	9600      	str	r6, [sp, #0]
 80131b4:	1e59      	subs	r1, r3, #1
 80131b6:	9b08      	ldr	r3, [sp, #32]
 80131b8:	4419      	add	r1, r3
 80131ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80131bc:	1958      	adds	r0, r3, r5
 80131be:	9b02      	ldr	r3, [sp, #8]
 80131c0:	4420      	add	r0, r4
 80131c2:	895b      	ldrh	r3, [r3, #10]
 80131c4:	465a      	mov	r2, fp
 80131c6:	b209      	sxth	r1, r1
 80131c8:	b200      	sxth	r0, r0
 80131ca:	f7fd f985 	bl	80104d8 <lv_draw_px>
                if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 80131ce:	f1ba 0f05 	cmp.w	sl, #5
 80131d2:	d10e      	bne.n	80131f2 <lv_draw_rect+0x1db2>
                    lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) + 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 80131d4:	9b04      	ldr	r3, [sp, #16]
 80131d6:	9600      	str	r6, [sp, #0]
 80131d8:	1959      	adds	r1, r3, r5
 80131da:	9b06      	ldr	r3, [sp, #24]
 80131dc:	1c58      	adds	r0, r3, #1
 80131de:	9b08      	ldr	r3, [sp, #32]
 80131e0:	1ac0      	subs	r0, r0, r3
 80131e2:	9b02      	ldr	r3, [sp, #8]
 80131e4:	4421      	add	r1, r4
 80131e6:	895b      	ldrh	r3, [r3, #10]
 80131e8:	465a      	mov	r2, fp
 80131ea:	b209      	sxth	r1, r1
 80131ec:	b200      	sxth	r0, r0
 80131ee:	f7fd f973 	bl	80104d8 <lv_draw_px>
                if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 80131f2:	f1b8 0f06 	cmp.w	r8, #6
 80131f6:	d10e      	bne.n	8013216 <lv_draw_rect+0x1dd6>
                    lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) + 1, mask,
 80131f8:	9b03      	ldr	r3, [sp, #12]
 80131fa:	9600      	str	r6, [sp, #0]
 80131fc:	1c59      	adds	r1, r3, #1
 80131fe:	9b08      	ldr	r3, [sp, #32]
 8013200:	1ac9      	subs	r1, r1, r3
 8013202:	9b06      	ldr	r3, [sp, #24]
 8013204:	1b58      	subs	r0, r3, r5
 8013206:	9b02      	ldr	r3, [sp, #8]
 8013208:	1b00      	subs	r0, r0, r4
 801320a:	895b      	ldrh	r3, [r3, #10]
 801320c:	465a      	mov	r2, fp
 801320e:	b209      	sxth	r1, r1
 8013210:	b200      	sxth	r0, r0
 8013212:	f7fd f961 	bl	80104d8 <lv_draw_px>
                if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 8013216:	2f0a      	cmp	r7, #10
 8013218:	d10a      	bne.n	8013230 <lv_draw_rect+0x1df0>
                    lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) - 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 801321a:	9b03      	ldr	r3, [sp, #12]
 801321c:	9600      	str	r6, [sp, #0]
 801321e:	1b59      	subs	r1, r3, r5
 8013220:	9b02      	ldr	r3, [sp, #8]
 8013222:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8013224:	895b      	ldrh	r3, [r3, #10]
 8013226:	1b09      	subs	r1, r1, r4
 8013228:	465a      	mov	r2, fp
 801322a:	b209      	sxth	r1, r1
 801322c:	f7fd f954 	bl	80104d8 <lv_draw_px>
 8013230:	3401      	adds	r4, #1
 8013232:	f7fe bfab 	b.w	801218c <lv_draw_rect+0xd4c>
            if(mcolor.full == gcolor.full)
 8013236:	9b03      	ldr	r3, [sp, #12]
 8013238:	454b      	cmp	r3, r9
 801323a:	f47f a9bb 	bne.w	80125b4 <lv_draw_rect+0x1174>
                act_color = mcolor;
 801323e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
            lv_draw_fill(&edge_top_area, mask, act_color, opa);
 8013242:	9b04      	ldr	r3, [sp, #16]
 8013244:	4659      	mov	r1, fp
 8013246:	a820      	add	r0, sp, #128	; 0x80
 8013248:	f7fd f995 	bl	8010576 <lv_draw_fill>
 801324c:	f7ff b8a6 	b.w	801239c <lv_draw_rect+0xf5c>

08013250 <lv_img_cache_open>:
 * @param style style of the image
 * @return pointer to the cache entry or NULL if can open the image
 */
lv_img_cache_entry_t * lv_img_cache_open(const void * src, const lv_style_t * style)
{
    if(entry_cnt == 0) {
 8013250:	4b34      	ldr	r3, [pc, #208]	; (8013324 <lv_img_cache_open+0xd4>)
{
 8013252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(entry_cnt == 0) {
 8013256:	881c      	ldrh	r4, [r3, #0]
{
 8013258:	4605      	mov	r5, r0
 801325a:	460e      	mov	r6, r1
    if(entry_cnt == 0) {
 801325c:	b1ec      	cbz	r4, 801329a <lv_img_cache_open+0x4a>
        LV_LOG_WARN("lv_img_cache_open: the cache size is 0");
        return NULL;
    }

    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 801325e:	4b32      	ldr	r3, [pc, #200]	; (8013328 <lv_img_cache_open+0xd8>)

    /*Decrement all lifes. Make the entries older*/
    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
        if(cache[i].life > INT32_MIN + LV_IMG_CACHE_AGING) {
 8013260:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 801332c <lv_img_cache_open+0xdc>
    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 8013264:	681a      	ldr	r2, [r3, #0]
 8013266:	2728      	movs	r7, #40	; 0x28
 8013268:	4613      	mov	r3, r2
 801326a:	fb07 2704 	mla	r7, r7, r4, r2
    for(i = 0; i < entry_cnt; i++) {
 801326e:	4611      	mov	r1, r2
 8013270:	428f      	cmp	r7, r1
 8013272:	d115      	bne.n	80132a0 <lv_img_cache_open+0x50>
 8013274:	3c01      	subs	r4, #1
 8013276:	b2a4      	uxth	r4, r4
 8013278:	2128      	movs	r1, #40	; 0x28
 801327a:	fb04 1101 	mla	r1, r4, r1, r1
 801327e:	4411      	add	r1, r2
    }

    /*Is the image cached?*/
    lv_img_cache_entry_t * cached_src = NULL;
    for(i = 0; i < entry_cnt; i++) {
        if(cache[i].dec_dsc.src == src) {
 8013280:	6858      	ldr	r0, [r3, #4]
 8013282:	42a8      	cmp	r0, r5
 8013284:	461c      	mov	r4, r3
 8013286:	d113      	bne.n	80132b0 <lv_img_cache_open+0x60>
            /* If opened increment its life.
             * Image difficult to open should live longer to keep avoid frequent their recaching.
             * Therefore increase `life` with `time_to_open`*/
            cached_src = &cache[i];
            cached_src->life += cached_src->dec_dsc.time_to_open * LV_IMG_CACHE_LIFE_GAIN;
 8013288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801328a:	69a2      	ldr	r2, [r4, #24]
 801328c:	4413      	add	r3, r2
            if(cached_src->life > LV_IMG_CACHE_LIFE_LIMIT) cached_src->life = LV_IMG_CACHE_LIFE_LIMIT;
 801328e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8013292:	bfc8      	it	gt
 8013294:	f44f 737a 	movgt.w	r3, #1000	; 0x3e8
 8013298:	6263      	str	r3, [r4, #36]	; 0x24

        if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
    }

    return cached_src;
}
 801329a:	4620      	mov	r0, r4
 801329c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(cache[i].life > INT32_MIN + LV_IMG_CACHE_AGING) {
 80132a0:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80132a2:	4570      	cmp	r0, lr
            cache[i].life -= LV_IMG_CACHE_AGING;
 80132a4:	bfa4      	itt	ge
 80132a6:	f100 30ff 	addge.w	r0, r0, #4294967295	; 0xffffffff
 80132aa:	6248      	strge	r0, [r1, #36]	; 0x24
 80132ac:	3128      	adds	r1, #40	; 0x28
 80132ae:	e7df      	b.n	8013270 <lv_img_cache_open+0x20>
 80132b0:	3328      	adds	r3, #40	; 0x28
    for(i = 0; i < entry_cnt; i++) {
 80132b2:	428b      	cmp	r3, r1
 80132b4:	d1e4      	bne.n	8013280 <lv_img_cache_open+0x30>
 80132b6:	f102 0128 	add.w	r1, r2, #40	; 0x28
 80132ba:	4614      	mov	r4, r2
        for(i = 1; i < entry_cnt; i++) {
 80132bc:	428b      	cmp	r3, r1
 80132be:	d11d      	bne.n	80132fc <lv_img_cache_open+0xac>
        if(cached_src->dec_dsc.src) {
 80132c0:	6863      	ldr	r3, [r4, #4]
 80132c2:	b113      	cbz	r3, 80132ca <lv_img_cache_open+0x7a>
            lv_img_decoder_close(&cached_src->dec_dsc);
 80132c4:	4620      	mov	r0, r4
 80132c6:	f000 fadd 	bl	8013884 <lv_img_decoder_close>
        t_start                          = lv_tick_get();
 80132ca:	f000 fd25 	bl	8013d18 <lv_tick_get>
        cached_src->dec_dsc.time_to_open = 0;
 80132ce:	2700      	movs	r7, #0
        lv_res_t open_res                = lv_img_decoder_open(&cached_src->dec_dsc, src, style);
 80132d0:	4629      	mov	r1, r5
        t_start                          = lv_tick_get();
 80132d2:	4680      	mov	r8, r0
        cached_src->dec_dsc.time_to_open = 0;
 80132d4:	61a7      	str	r7, [r4, #24]
        lv_res_t open_res                = lv_img_decoder_open(&cached_src->dec_dsc, src, style);
 80132d6:	4632      	mov	r2, r6
 80132d8:	4620      	mov	r0, r4
 80132da:	f000 fa85 	bl	80137e8 <lv_img_decoder_open>
        if(open_res == LV_RES_INV) {
 80132de:	4605      	mov	r5, r0
 80132e0:	b998      	cbnz	r0, 801330a <lv_img_cache_open+0xba>
            lv_img_decoder_close(&cached_src->dec_dsc);
 80132e2:	4620      	mov	r0, r4
 80132e4:	f000 face 	bl	8013884 <lv_img_decoder_close>
            memset(cached_src, 0, sizeof(lv_img_cache_entry_t));
 80132e8:	4620      	mov	r0, r4
 80132ea:	2228      	movs	r2, #40	; 0x28
 80132ec:	4629      	mov	r1, r5
 80132ee:	f006 fbf0 	bl	8019ad2 <memset>
            cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its use  */
 80132f2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80132f6:	6263      	str	r3, [r4, #36]	; 0x24
            return NULL;
 80132f8:	462c      	mov	r4, r5
 80132fa:	e7ce      	b.n	801329a <lv_img_cache_open+0x4a>
            if(cache[i].life < cached_src->life) {
 80132fc:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80132fe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8013300:	4290      	cmp	r0, r2
 8013302:	bfb8      	it	lt
 8013304:	460c      	movlt	r4, r1
 8013306:	3128      	adds	r1, #40	; 0x28
 8013308:	e7d8      	b.n	80132bc <lv_img_cache_open+0x6c>
        if(cached_src->dec_dsc.time_to_open == 0) {
 801330a:	69a3      	ldr	r3, [r4, #24]
        cached_src->life = 0;
 801330c:	6267      	str	r7, [r4, #36]	; 0x24
        if(cached_src->dec_dsc.time_to_open == 0) {
 801330e:	b91b      	cbnz	r3, 8013318 <lv_img_cache_open+0xc8>
            cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
 8013310:	4640      	mov	r0, r8
 8013312:	f000 fd0f 	bl	8013d34 <lv_tick_elaps>
 8013316:	61a0      	str	r0, [r4, #24]
        if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
 8013318:	69a3      	ldr	r3, [r4, #24]
 801331a:	2b00      	cmp	r3, #0
 801331c:	d1bd      	bne.n	801329a <lv_img_cache_open+0x4a>
 801331e:	2301      	movs	r3, #1
 8013320:	61a3      	str	r3, [r4, #24]
 8013322:	e7ba      	b.n	801329a <lv_img_cache_open+0x4a>
 8013324:	20005ff8 	.word	0x20005ff8
 8013328:	2000c614 	.word	0x2000c614
 801332c:	80000002 	.word	0x80000002

08013330 <lv_img_cache_invalidate_src>:
 * Invalidate an image source in the cache.
 * Useful if the image source is updated therefore it needs to be cached again.
 * @param src an image source path to a file or pointer to an `lv_img_dsc_t` variable.
 */
void lv_img_cache_invalidate_src(const void * src)
{
 8013330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 8013334:	4b0f      	ldr	r3, [pc, #60]	; (8013374 <lv_img_cache_invalidate_src+0x44>)

    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
 8013336:	4f10      	ldr	r7, [pc, #64]	; (8013378 <lv_img_cache_invalidate_src+0x48>)
    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 8013338:	f8d3 8000 	ldr.w	r8, [r3]
{
 801333c:	4606      	mov	r6, r0
    for(i = 0; i < entry_cnt; i++) {
 801333e:	2500      	movs	r5, #0
        if(cache[i].dec_dsc.src == src || src == NULL) {
 8013340:	f04f 0928 	mov.w	r9, #40	; 0x28
    for(i = 0; i < entry_cnt; i++) {
 8013344:	883a      	ldrh	r2, [r7, #0]
 8013346:	b2ab      	uxth	r3, r5
 8013348:	429a      	cmp	r2, r3
 801334a:	d801      	bhi.n	8013350 <lv_img_cache_invalidate_src+0x20>

            memset(&cache[i].dec_dsc, 0, sizeof(lv_img_decoder_dsc_t));
            memset(&cache[i], 0, sizeof(lv_img_cache_entry_t));
        }
    }
}
 801334c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(cache[i].dec_dsc.src == src || src == NULL) {
 8013350:	b2ac      	uxth	r4, r5
 8013352:	fb09 8404 	mla	r4, r9, r4, r8
 8013356:	6863      	ldr	r3, [r4, #4]
 8013358:	42b3      	cmp	r3, r6
 801335a:	d000      	beq.n	801335e <lv_img_cache_invalidate_src+0x2e>
 801335c:	b946      	cbnz	r6, 8013370 <lv_img_cache_invalidate_src+0x40>
            if(cache[i].dec_dsc.src != NULL) {
 801335e:	b113      	cbz	r3, 8013366 <lv_img_cache_invalidate_src+0x36>
                lv_img_decoder_close(&cache[i].dec_dsc);
 8013360:	4620      	mov	r0, r4
 8013362:	f000 fa8f 	bl	8013884 <lv_img_decoder_close>
            memset(&cache[i], 0, sizeof(lv_img_cache_entry_t));
 8013366:	2228      	movs	r2, #40	; 0x28
 8013368:	2100      	movs	r1, #0
 801336a:	4620      	mov	r0, r4
 801336c:	f006 fbb1 	bl	8019ad2 <memset>
 8013370:	3501      	adds	r5, #1
 8013372:	e7e7      	b.n	8013344 <lv_img_cache_invalidate_src+0x14>
 8013374:	2000c614 	.word	0x2000c614
 8013378:	20005ff8 	.word	0x20005ff8

0801337c <lv_img_cache_set_size>:
{
 801337c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
 8013380:	4c14      	ldr	r4, [pc, #80]	; (80133d4 <lv_img_cache_set_size+0x58>)
 8013382:	6823      	ldr	r3, [r4, #0]
{
 8013384:	4680      	mov	r8, r0
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
 8013386:	b12b      	cbz	r3, 8013394 <lv_img_cache_set_size+0x18>
        lv_img_cache_invalidate_src(NULL);
 8013388:	2000      	movs	r0, #0
 801338a:	f7ff ffd1 	bl	8013330 <lv_img_cache_invalidate_src>
        lv_mem_free(LV_GC_ROOT(_lv_img_cache_array));
 801338e:	6820      	ldr	r0, [r4, #0]
 8013390:	f001 f8b0 	bl	80144f4 <lv_mem_free>
    LV_GC_ROOT(_lv_img_cache_array) = lv_mem_alloc(sizeof(lv_img_cache_entry_t) * new_entry_cnt);
 8013394:	2628      	movs	r6, #40	; 0x28
 8013396:	fb06 f008 	mul.w	r0, r6, r8
 801339a:	f001 f875 	bl	8014488 <lv_mem_alloc>
 801339e:	6020      	str	r0, [r4, #0]
    lv_mem_assert(LV_GC_ROOT(_lv_img_cache_array));
 80133a0:	b900      	cbnz	r0, 80133a4 <lv_img_cache_set_size+0x28>
 80133a2:	e7fe      	b.n	80133a2 <lv_img_cache_set_size+0x26>
    entry_cnt = new_entry_cnt;
 80133a4:	4b0c      	ldr	r3, [pc, #48]	; (80133d8 <lv_img_cache_set_size+0x5c>)
    for(i = 0; i < entry_cnt; i++) {
 80133a6:	2500      	movs	r5, #0
    entry_cnt = new_entry_cnt;
 80133a8:	f8a3 8000 	strh.w	r8, [r3]
    for(i = 0; i < entry_cnt; i++) {
 80133ac:	45a8      	cmp	r8, r5
 80133ae:	d101      	bne.n	80133b4 <lv_img_cache_set_size+0x38>
}
 80133b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        memset(&LV_GC_ROOT(_lv_img_cache_array)[i].dec_dsc, 0, sizeof(lv_img_decoder_dsc_t));
 80133b4:	6820      	ldr	r0, [r4, #0]
 80133b6:	fb06 f705 	mul.w	r7, r6, r5
 80133ba:	2224      	movs	r2, #36	; 0x24
 80133bc:	2100      	movs	r1, #0
 80133be:	4438      	add	r0, r7
 80133c0:	f006 fb87 	bl	8019ad2 <memset>
        memset(&LV_GC_ROOT(_lv_img_cache_array)[i], 0, sizeof(lv_img_cache_entry_t));
 80133c4:	6820      	ldr	r0, [r4, #0]
 80133c6:	2228      	movs	r2, #40	; 0x28
 80133c8:	2100      	movs	r1, #0
 80133ca:	4438      	add	r0, r7
 80133cc:	f006 fb81 	bl	8019ad2 <memset>
 80133d0:	3501      	adds	r5, #1
 80133d2:	e7eb      	b.n	80133ac <lv_img_cache_set_size+0x30>
 80133d4:	2000c614 	.word	0x2000c614
 80133d8:	20005ff8 	.word	0x20005ff8

080133dc <lv_img_decoder_built_in_close>:
 * Close the pending decoding. Free resources etc.
 * @param decoder pointer to the decoder the function associated with
 * @param dsc pointer to decoder descriptor
 */
void lv_img_decoder_built_in_close(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
 80133dc:	b538      	push	{r3, r4, r5, lr}
    (void)decoder; /*Unused*/

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 80133de:	6a0c      	ldr	r4, [r1, #32]
{
 80133e0:	460d      	mov	r5, r1
    if(user_data) {
 80133e2:	b144      	cbz	r4, 80133f6 <lv_img_decoder_built_in_close+0x1a>
        if(user_data->f) {
            lv_fs_close(user_data->f);
            lv_mem_free(user_data->f);
        }
#endif
        if(user_data->palette) lv_mem_free(user_data->palette);
 80133e4:	6820      	ldr	r0, [r4, #0]
 80133e6:	b108      	cbz	r0, 80133ec <lv_img_decoder_built_in_close+0x10>
 80133e8:	f001 f884 	bl	80144f4 <lv_mem_free>

        lv_mem_free(user_data);
 80133ec:	4620      	mov	r0, r4
 80133ee:	f001 f881 	bl	80144f4 <lv_mem_free>

        dsc->user_data = NULL;
 80133f2:	2300      	movs	r3, #0
 80133f4:	622b      	str	r3, [r5, #32]
 80133f6:	bd38      	pop	{r3, r4, r5, pc}

080133f8 <lv_img_decoder_built_in_read_line>:
{
 80133f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 80133fc:	7c08      	ldrb	r0, [r1, #16]
{
 80133fe:	461e      	mov	r6, r3
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8013400:	f000 031f 	and.w	r3, r0, #31
{
 8013404:	b087      	sub	sp, #28
 8013406:	4614      	mov	r4, r2
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8013408:	1f1a      	subs	r2, r3, #4
 801340a:	2a02      	cmp	r2, #2
{
 801340c:	460d      	mov	r5, r1
 801340e:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 8013412:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8013414:	d803      	bhi.n	801341e <lv_img_decoder_built_in_read_line+0x26>
        lv_fs_read(user_data->f, fs_buf, w, NULL);
        data_tmp = fs_buf;
#else
        LV_LOG_WARN("Image built-in alpha line reader can't read file because LV_USE_FILESYSTEM = 0");
        data_tmp = NULL; /*To avoid warnings*/
        return LV_RES_INV;
 8013416:	2000      	movs	r0, #0
}
 8013418:	b007      	add	sp, #28
 801341a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    } else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 801341e:	f1a3 020b 	sub.w	r2, r3, #11
 8013422:	2a03      	cmp	r2, #3
 8013424:	f200 80b3 	bhi.w	801358e <lv_img_decoder_built_in_read_line+0x196>
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 8013428:	2200      	movs	r2, #0
 801342a:	23ff      	movs	r3, #255	; 0xff
 801342c:	f88d 2000 	strb.w	r2, [sp]
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 8013430:	f88d 2004 	strb.w	r2, [sp, #4]
 8013434:	2255      	movs	r2, #85	; 0x55
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 8013436:	f88d 3001 	strb.w	r3, [sp, #1]
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 801343a:	f88d 2005 	strb.w	r2, [sp, #5]
 801343e:	f88d 3007 	strb.w	r3, [sp, #7]
 8013442:	22aa      	movs	r2, #170	; 0xaa
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 8013444:	4b92      	ldr	r3, [pc, #584]	; (8013690 <lv_img_decoder_built_in_read_line+0x298>)
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 8013446:	f88d 2006 	strb.w	r2, [sp, #6]
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 801344a:	aa02      	add	r2, sp, #8
 801344c:	f103 0c10 	add.w	ip, r3, #16
 8013450:	4691      	mov	r9, r2
 8013452:	6818      	ldr	r0, [r3, #0]
 8013454:	6859      	ldr	r1, [r3, #4]
 8013456:	4696      	mov	lr, r2
 8013458:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801345c:	3308      	adds	r3, #8
 801345e:	4563      	cmp	r3, ip
 8013460:	4672      	mov	r2, lr
 8013462:	d1f6      	bne.n	8013452 <lv_img_decoder_built_in_read_line+0x5a>
    lv_color_t bg_color = dsc->style->image.color;
 8013464:	68ab      	ldr	r3, [r5, #8]
 8013466:	8e19      	ldrh	r1, [r3, #48]	; 0x30
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
 8013468:	2200      	movs	r2, #0
 801346a:	ea4f 2e11 	mov.w	lr, r1, lsr #8
 801346e:	463b      	mov	r3, r7
    for(i = 0; i < len; i++) {
 8013470:	b210      	sxth	r0, r2
 8013472:	4580      	cmp	r8, r0
 8013474:	f103 0303 	add.w	r3, r3, #3
 8013478:	dc0e      	bgt.n	8013498 <lv_img_decoder_built_in_read_line+0xa0>
    uint8_t px_size            = lv_img_color_format_get_px_size(dsc->header.cf);
 801347a:	7c28      	ldrb	r0, [r5, #16]
 801347c:	f000 001f 	and.w	r0, r0, #31
 8013480:	f7fd fc20 	bl	8010cc4 <lv_img_color_format_get_px_size>
    switch(dsc->header.cf) {
 8013484:	7c2b      	ldrb	r3, [r5, #16]
 8013486:	f003 031f 	and.w	r3, r3, #31
 801348a:	3b0b      	subs	r3, #11
 801348c:	2b03      	cmp	r3, #3
 801348e:	d85d      	bhi.n	801354c <lv_img_decoder_built_in_read_line+0x154>
 8013490:	e8df f003 	tbb	[pc, r3]
 8013494:	54402c08 	.word	0x54402c08
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
 8013498:	f803 1c03 	strb.w	r1, [r3, #-3]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
 801349c:	f803 ec02 	strb.w	lr, [r3, #-2]
 80134a0:	3201      	adds	r2, #1
 80134a2:	e7e5      	b.n	8013470 <lv_img_decoder_built_in_read_line+0x78>
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 80134a4:	692a      	ldr	r2, [r5, #16]
 80134a6:	f3c2 228a 	ubfx	r2, r2, #10, #11
 80134aa:	10d3      	asrs	r3, r2, #3
            if(dsc->header.w & 0x7) w++;
 80134ac:	0751      	lsls	r1, r2, #29
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 80134ae:	bf08      	it	eq
 80134b0:	b21b      	sxtheq	r3, r3
            ofs += w * y + (x >> 3); /*First pixel*/
 80134b2:	ea4f 02e4 	mov.w	r2, r4, asr #3
            if(dsc->header.w & 0x7) w++;
 80134b6:	bf18      	it	ne
 80134b8:	3301      	addne	r3, #1
            pos       = 7 - (x & 0x7);
 80134ba:	43e4      	mvns	r4, r4
            ofs += w * y + (x >> 3); /*First pixel*/
 80134bc:	fb03 2306 	mla	r3, r3, r6, r2
            pos       = 7 - (x & 0x7);
 80134c0:	f004 0407 	and.w	r4, r4, #7
            opa_table = alpha1_opa_table;
 80134c4:	46ee      	mov	lr, sp
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 80134c6:	7b29      	ldrb	r1, [r5, #12]
 80134c8:	2900      	cmp	r1, #0
 80134ca:	d1a4      	bne.n	8013416 <lv_img_decoder_built_in_read_line+0x1e>
        data_tmp = img_dsc->data + ofs;
 80134cc:	686a      	ldr	r2, [r5, #4]
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 80134ce:	2601      	movs	r6, #1
        data_tmp = img_dsc->data + ofs;
 80134d0:	6892      	ldr	r2, [r2, #8]
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 80134d2:	4086      	lsls	r6, r0
 80134d4:	3e01      	subs	r6, #1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];

        pos -= px_size;
        if(pos < 0) {
            pos = 8 - px_size;
 80134d6:	f1c0 0c08 	rsb	ip, r0, #8
        data_tmp = img_dsc->data + ofs;
 80134da:	4413      	add	r3, r2
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
 80134dc:	b2b6      	uxth	r6, r6
            pos = 8 - px_size;
 80134de:	fa4f fc8c 	sxtb.w	ip, ip
    for(i = 0; i < len; i++) {
 80134e2:	b20a      	sxth	r2, r1
 80134e4:	4590      	cmp	r8, r2
 80134e6:	dc34      	bgt.n	8013552 <lv_img_decoder_built_in_read_line+0x15a>
            pos = 8 - px_size;
            data_tmp++;
        }
    }

    return LV_RES_OK;
 80134e8:	2001      	movs	r0, #1
 80134ea:	e795      	b.n	8013418 <lv_img_decoder_built_in_read_line+0x20>
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 80134ec:	692a      	ldr	r2, [r5, #16]
 80134ee:	f3c2 228a 	ubfx	r2, r2, #10, #11
 80134f2:	1093      	asrs	r3, r2, #2
            if(dsc->header.w & 0x3) w++;
 80134f4:	0792      	lsls	r2, r2, #30
            ofs += w * y + (x >> 2); /*First pixel*/
 80134f6:	ea4f 02a4 	mov.w	r2, r4, asr #2
            pos       = 6 - ((x & 0x3) * 2);
 80134fa:	ea6f 0404 	mvn.w	r4, r4
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 80134fe:	bf0c      	ite	eq
 8013500:	b21b      	sxtheq	r3, r3
            if(dsc->header.w & 0x3) w++;
 8013502:	3301      	addne	r3, #1
            pos       = 6 - ((x & 0x3) * 2);
 8013504:	f004 0403 	and.w	r4, r4, #3
            ofs += w * y + (x >> 2); /*First pixel*/
 8013508:	fb03 2306 	mla	r3, r3, r6, r2
            pos       = 6 - ((x & 0x3) * 2);
 801350c:	0064      	lsls	r4, r4, #1
            opa_table = alpha2_opa_table;
 801350e:	f10d 0e04 	add.w	lr, sp, #4
 8013512:	e7d8      	b.n	80134c6 <lv_img_decoder_built_in_read_line+0xce>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8013514:	692a      	ldr	r2, [r5, #16]
 8013516:	f3c2 228a 	ubfx	r2, r2, #10, #11
 801351a:	1053      	asrs	r3, r2, #1
            if(dsc->header.w & 0x1) w++;
 801351c:	07d1      	lsls	r1, r2, #31
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 801351e:	bf58      	it	pl
 8013520:	b21b      	sxthpl	r3, r3
            ofs += w * y + (x >> 1); /*First pixel*/
 8013522:	ea4f 0264 	mov.w	r2, r4, asr #1
            if(dsc->header.w & 0x1) w++;
 8013526:	bf48      	it	mi
 8013528:	3301      	addmi	r3, #1
            pos       = 4 - ((x & 0x1) * 4);
 801352a:	f014 0f01 	tst.w	r4, #1
            ofs += w * y + (x >> 1); /*First pixel*/
 801352e:	fb03 2306 	mla	r3, r3, r6, r2
            pos       = 4 - ((x & 0x1) * 4);
 8013532:	bf0c      	ite	eq
 8013534:	2404      	moveq	r4, #4
 8013536:	2400      	movne	r4, #0
 8013538:	46ce      	mov	lr, r9
 801353a:	e7c4      	b.n	80134c6 <lv_img_decoder_built_in_read_line+0xce>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 801353c:	692b      	ldr	r3, [r5, #16]
 801353e:	f3c3 238a 	ubfx	r3, r3, #10, #11
            ofs += w * y + x;  /*First pixel*/
 8013542:	fb16 4303 	smlabb	r3, r6, r3, r4
            pos = 0;
 8013546:	2400      	movs	r4, #0
    const lv_opa_t * opa_table = NULL;
 8013548:	46a6      	mov	lr, r4
 801354a:	e7bc      	b.n	80134c6 <lv_img_decoder_built_in_read_line+0xce>
    int8_t pos   = 0;
 801354c:	2400      	movs	r4, #0
    uint32_t ofs = 0;
 801354e:	4623      	mov	r3, r4
 8013550:	e7fa      	b.n	8013548 <lv_img_decoder_built_in_read_line+0x150>
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
 8013552:	781a      	ldrb	r2, [r3, #0]
 8013554:	fa06 f904 	lsl.w	r9, r6, r4
 8013558:	ea02 0209 	and.w	r2, r2, r9
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 801355c:	f895 9010 	ldrb.w	r9, [r5, #16]
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
 8013560:	4122      	asrs	r2, r4
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 8013562:	f009 091f 	and.w	r9, r9, #31
 8013566:	f1b9 0f0e 	cmp.w	r9, #14
 801356a:	b2d2      	uxtb	r2, r2
 801356c:	eb01 0941 	add.w	r9, r1, r1, lsl #1
        pos -= px_size;
 8013570:	eba4 0400 	sub.w	r4, r4, r0
 8013574:	b264      	sxtb	r4, r4
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 8013576:	44b9      	add	r9, r7
 8013578:	bf18      	it	ne
 801357a:	f81e 2002 	ldrbne.w	r2, [lr, r2]
 801357e:	f889 2002 	strb.w	r2, [r9, #2]
        if(pos < 0) {
 8013582:	2c00      	cmp	r4, #0
            pos = 8 - px_size;
 8013584:	bfbc      	itt	lt
 8013586:	4664      	movlt	r4, ip
            data_tmp++;
 8013588:	3301      	addlt	r3, #1
 801358a:	3101      	adds	r1, #1
 801358c:	e7a9      	b.n	80134e2 <lv_img_decoder_built_in_read_line+0xea>
    } else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
 801358e:	3b07      	subs	r3, #7
 8013590:	2b03      	cmp	r3, #3
 8013592:	f63f af40 	bhi.w	8013416 <lv_img_decoder_built_in_read_line+0x1e>
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 8013596:	f000 001f 	and.w	r0, r0, #31
 801359a:	f7fd fb93 	bl	8010cc4 <lv_img_color_format_get_px_size>
    switch(dsc->header.cf) {
 801359e:	7c2b      	ldrb	r3, [r5, #16]
 80135a0:	f003 031f 	and.w	r3, r3, #31
 80135a4:	3b07      	subs	r3, #7
 80135a6:	2b03      	cmp	r3, #3
 80135a8:	d86f      	bhi.n	801368a <lv_img_decoder_built_in_read_line+0x292>
 80135aa:	e8df f003 	tbb	[pc, r3]
 80135ae:	3d02      	.short	0x3d02
 80135b0:	6550      	.short	0x6550
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 80135b2:	692a      	ldr	r2, [r5, #16]
 80135b4:	f3c2 228a 	ubfx	r2, r2, #10, #11
 80135b8:	10d3      	asrs	r3, r2, #3
            if(dsc->header.w & 0x7) w++;
 80135ba:	0752      	lsls	r2, r2, #29
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 80135bc:	bf08      	it	eq
 80135be:	b21b      	sxtheq	r3, r3
            ofs += w * y + (x >> 3); /*First pixel*/
 80135c0:	ea4f 02e4 	mov.w	r2, r4, asr #3
            if(dsc->header.w & 0x7) w++;
 80135c4:	bf18      	it	ne
 80135c6:	3301      	addne	r3, #1
            ofs += w * y + (x >> 3); /*First pixel*/
 80135c8:	fb03 2306 	mla	r3, r3, r6, r2
            pos = 7 - (x & 0x7);
 80135cc:	43e4      	mvns	r4, r4
            ofs += 8;                /*Skip the palette*/
 80135ce:	3308      	adds	r3, #8
            pos = 7 - (x & 0x7);
 80135d0:	f004 0407 	and.w	r4, r4, #7
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 80135d4:	7b2e      	ldrb	r6, [r5, #12]
 80135d6:	2e00      	cmp	r6, #0
 80135d8:	f47f af1d 	bne.w	8013416 <lv_img_decoder_built_in_read_line+0x1e>
        data_tmp                     = img_dsc->data + ofs;
 80135dc:	6869      	ldr	r1, [r5, #4]
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 80135de:	6a2a      	ldr	r2, [r5, #32]
        data_tmp                     = img_dsc->data + ofs;
 80135e0:	6889      	ldr	r1, [r1, #8]
 80135e2:	440b      	add	r3, r1
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 80135e4:	2101      	movs	r1, #1
 80135e6:	4081      	lsls	r1, r0
 80135e8:	3901      	subs	r1, #1
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
 80135ea:	4635      	mov	r5, r6
            pos = 8 - px_size;
 80135ec:	f1c0 0608 	rsb	r6, r0, #8
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
 80135f0:	fa1f fe81 	uxth.w	lr, r1
            pos = 8 - px_size;
 80135f4:	b276      	sxtb	r6, r6
    for(i = 0; i < len; i++) {
 80135f6:	b229      	sxth	r1, r5
 80135f8:	4588      	cmp	r8, r1
 80135fa:	f77f af75 	ble.w	80134e8 <lv_img_decoder_built_in_read_line+0xf0>
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
 80135fe:	7819      	ldrb	r1, [r3, #0]
 8013600:	fa0e fc04 	lsl.w	ip, lr, r4
 8013604:	ea01 010c 	and.w	r1, r1, ip
 8013608:	4121      	asrs	r1, r4
        cbuf[i] = user_data->palette[val_act];
 801360a:	f8d2 c000 	ldr.w	ip, [r2]
 801360e:	b2c9      	uxtb	r1, r1
        pos -= px_size;
 8013610:	1a24      	subs	r4, r4, r0
 8013612:	b264      	sxtb	r4, r4
        if(pos < 0) {
 8013614:	2c00      	cmp	r4, #0
        cbuf[i] = user_data->palette[val_act];
 8013616:	f83c 1011 	ldrh.w	r1, [ip, r1, lsl #1]
 801361a:	f827 1015 	strh.w	r1, [r7, r5, lsl #1]
            pos = 8 - px_size;
 801361e:	bfbc      	itt	lt
 8013620:	4634      	movlt	r4, r6
            data_tmp++;
 8013622:	3301      	addlt	r3, #1
 8013624:	3501      	adds	r5, #1
 8013626:	e7e6      	b.n	80135f6 <lv_img_decoder_built_in_read_line+0x1fe>
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 8013628:	692a      	ldr	r2, [r5, #16]
 801362a:	f3c2 228a 	ubfx	r2, r2, #10, #11
 801362e:	1093      	asrs	r3, r2, #2
            if(dsc->header.w & 0x3) w++;
 8013630:	0791      	lsls	r1, r2, #30
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 8013632:	bf08      	it	eq
 8013634:	b21b      	sxtheq	r3, r3
            ofs += w * y + (x >> 2); /*First pixel*/
 8013636:	ea4f 02a4 	mov.w	r2, r4, asr #2
            if(dsc->header.w & 0x3) w++;
 801363a:	bf18      	it	ne
 801363c:	3301      	addne	r3, #1
            pos = 6 - ((x & 0x3) * 2);
 801363e:	43e4      	mvns	r4, r4
            ofs += w * y + (x >> 2); /*First pixel*/
 8013640:	fb03 2306 	mla	r3, r3, r6, r2
            pos = 6 - ((x & 0x3) * 2);
 8013644:	f004 0403 	and.w	r4, r4, #3
            ofs += 16;               /*Skip the palette*/
 8013648:	3310      	adds	r3, #16
            pos = 6 - ((x & 0x3) * 2);
 801364a:	0064      	lsls	r4, r4, #1
 801364c:	e7c2      	b.n	80135d4 <lv_img_decoder_built_in_read_line+0x1dc>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 801364e:	692a      	ldr	r2, [r5, #16]
 8013650:	f3c2 228a 	ubfx	r2, r2, #10, #11
 8013654:	1053      	asrs	r3, r2, #1
            if(dsc->header.w & 0x1) w++;
 8013656:	07d2      	lsls	r2, r2, #31
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8013658:	bf58      	it	pl
 801365a:	b21b      	sxthpl	r3, r3
            ofs += w * y + (x >> 1); /*First pixel*/
 801365c:	ea4f 0264 	mov.w	r2, r4, asr #1
            if(dsc->header.w & 0x1) w++;
 8013660:	bf48      	it	mi
 8013662:	3301      	addmi	r3, #1
            ofs += w * y + (x >> 1); /*First pixel*/
 8013664:	fb03 2306 	mla	r3, r3, r6, r2
            pos = 4 - ((x & 0x1) * 4);
 8013668:	f014 0f01 	tst.w	r4, #1
            ofs += 64;               /*Skip the palette*/
 801366c:	f103 0340 	add.w	r3, r3, #64	; 0x40
            pos = 4 - ((x & 0x1) * 4);
 8013670:	bf0c      	ite	eq
 8013672:	2404      	moveq	r4, #4
 8013674:	2400      	movne	r4, #0
 8013676:	e7ad      	b.n	80135d4 <lv_img_decoder_built_in_read_line+0x1dc>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 8013678:	692b      	ldr	r3, [r5, #16]
 801367a:	f3c3 238a 	ubfx	r3, r3, #10, #11
            ofs += w * y + x;  /*First pixel*/
 801367e:	fb16 4303 	smlabb	r3, r6, r3, r4
            ofs += 1024;       /*Skip the palette*/
 8013682:	f503 6380 	add.w	r3, r3, #1024	; 0x400
            pos = 0;
 8013686:	2400      	movs	r4, #0
 8013688:	e7a4      	b.n	80135d4 <lv_img_decoder_built_in_read_line+0x1dc>
    uint32_t ofs = 0;
 801368a:	2300      	movs	r3, #0
    int8_t pos   = 0;
 801368c:	461c      	mov	r4, r3
 801368e:	e7a1      	b.n	80135d4 <lv_img_decoder_built_in_read_line+0x1dc>
 8013690:	0801c5f2 	.word	0x0801c5f2

08013694 <lv_img_decoder_built_in_open>:
{
 8013694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 8013696:	7b0a      	ldrb	r2, [r1, #12]
 8013698:	2a01      	cmp	r2, #1
{
 801369a:	460c      	mov	r4, r1
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 801369c:	d101      	bne.n	80136a2 <lv_img_decoder_built_in_open+0xe>
        return LV_RES_INV;
 801369e:	2000      	movs	r0, #0
}
 80136a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_img_cf_t cf = dsc->header.cf;
 80136a2:	7c0b      	ldrb	r3, [r1, #16]
 80136a4:	f003 031f 	and.w	r3, r3, #31
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 80136a8:	1f1d      	subs	r5, r3, #4
 80136aa:	2d02      	cmp	r5, #2
 80136ac:	d805      	bhi.n	80136ba <lv_img_decoder_built_in_open+0x26>
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 80136ae:	bb2a      	cbnz	r2, 80136fc <lv_img_decoder_built_in_open+0x68>
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
 80136b0:	684b      	ldr	r3, [r1, #4]
 80136b2:	689b      	ldr	r3, [r3, #8]
            dsc->img_data = NULL;
 80136b4:	6163      	str	r3, [r4, #20]
            return LV_RES_OK;
 80136b6:	2001      	movs	r0, #1
 80136b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(cf == LV_IMG_CF_INDEXED_1BIT || cf == LV_IMG_CF_INDEXED_2BIT || cf == LV_IMG_CF_INDEXED_4BIT ||
 80136ba:	1fda      	subs	r2, r3, #7
 80136bc:	2a03      	cmp	r2, #3
 80136be:	d836      	bhi.n	801372e <lv_img_decoder_built_in_open+0x9a>
        uint8_t px_size       = lv_img_color_format_get_px_size(cf);
 80136c0:	4618      	mov	r0, r3
 80136c2:	f7fd faff 	bl	8010cc4 <lv_img_color_format_get_px_size>
        if(dsc->user_data == NULL) {
 80136c6:	6a26      	ldr	r6, [r4, #32]
        uint8_t px_size       = lv_img_color_format_get_px_size(cf);
 80136c8:	4607      	mov	r7, r0
        if(dsc->user_data == NULL) {
 80136ca:	b936      	cbnz	r6, 80136da <lv_img_decoder_built_in_open+0x46>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 80136cc:	2004      	movs	r0, #4
 80136ce:	f000 fedb 	bl	8014488 <lv_mem_alloc>
 80136d2:	6220      	str	r0, [r4, #32]
            if(dsc->user_data == NULL) {
 80136d4:	b900      	cbnz	r0, 80136d8 <lv_img_decoder_built_in_open+0x44>
 80136d6:	e7fe      	b.n	80136d6 <lv_img_decoder_built_in_open+0x42>
            memset(dsc->user_data, 0, sizeof(lv_img_decoder_built_in_data_t));
 80136d8:	6006      	str	r6, [r0, #0]
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 80136da:	2502      	movs	r5, #2
 80136dc:	40bd      	lsls	r5, r7
 80136de:	4628      	mov	r0, r5
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 80136e0:	6a26      	ldr	r6, [r4, #32]
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 80136e2:	f000 fed1 	bl	8014488 <lv_mem_alloc>
 80136e6:	6030      	str	r0, [r6, #0]
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 80136e8:	7b23      	ldrb	r3, [r4, #12]
 80136ea:	2b01      	cmp	r3, #1
 80136ec:	d0d7      	beq.n	801369e <lv_img_decoder_built_in_open+0xa>
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
 80136ee:	6863      	ldr	r3, [r4, #4]
 80136f0:	689a      	ldr	r2, [r3, #8]
 80136f2:	4405      	add	r5, r0
            for(i = 0; i < palette_size; i++) {
 80136f4:	4285      	cmp	r5, r0
 80136f6:	f102 0204 	add.w	r2, r2, #4
 80136fa:	d101      	bne.n	8013700 <lv_img_decoder_built_in_open+0x6c>
            dsc->img_data = NULL;
 80136fc:	2300      	movs	r3, #0
 80136fe:	e7d9      	b.n	80136b4 <lv_img_decoder_built_in_open+0x20>
    color.ch.blue  = (uint16_t)(b8 >> 3);
 8013700:	f812 3c04 	ldrb.w	r3, [r2, #-4]
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
 8013704:	7807      	ldrb	r7, [r0, #0]
    color.ch.green = (uint16_t)(g8 >> 2);
 8013706:	f812 6c03 	ldrb.w	r6, [r2, #-3]
    color.ch.red   = (uint16_t)(r8 >> 3);
 801370a:	f812 1c02 	ldrb.w	r1, [r2, #-2]
    color.ch.blue  = (uint16_t)(b8 >> 3);
 801370e:	08db      	lsrs	r3, r3, #3
 8013710:	f363 0704 	bfi	r7, r3, #0, #5
 8013714:	7007      	strb	r7, [r0, #0]
 8013716:	8803      	ldrh	r3, [r0, #0]
    color.ch.green = (uint16_t)(g8 >> 2);
 8013718:	08b6      	lsrs	r6, r6, #2
 801371a:	f366 134a 	bfi	r3, r6, #5, #6
 801371e:	8003      	strh	r3, [r0, #0]
    color.ch.red   = (uint16_t)(r8 >> 3);
 8013720:	08c9      	lsrs	r1, r1, #3
 8013722:	0a1b      	lsrs	r3, r3, #8
 8013724:	f361 03c7 	bfi	r3, r1, #3, #5
 8013728:	7043      	strb	r3, [r0, #1]
 801372a:	3002      	adds	r0, #2
 801372c:	e7e2      	b.n	80136f4 <lv_img_decoder_built_in_open+0x60>
    else if(cf == LV_IMG_CF_ALPHA_1BIT || cf == LV_IMG_CF_ALPHA_2BIT || cf == LV_IMG_CF_ALPHA_4BIT ||
 801372e:	3b0b      	subs	r3, #11
 8013730:	2b03      	cmp	r3, #3
 8013732:	d9e3      	bls.n	80136fc <lv_img_decoder_built_in_open+0x68>
        lv_img_decoder_built_in_close(decoder, dsc);
 8013734:	f7ff fe52 	bl	80133dc <lv_img_decoder_built_in_close>
 8013738:	e7b1      	b.n	801369e <lv_img_decoder_built_in_open+0xa>

0801373a <lv_img_decoder_built_in_info>:
{
 801373a:	b538      	push	{r3, r4, r5, lr}
    lv_img_src_t src_type = lv_img_src_get_type(src);
 801373c:	4608      	mov	r0, r1
{
 801373e:	460d      	mov	r5, r1
 8013740:	4614      	mov	r4, r2
    lv_img_src_t src_type = lv_img_src_get_type(src);
 8013742:	f7fd fbc1 	bl	8010ec8 <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 8013746:	b9c8      	cbnz	r0, 801377c <lv_img_decoder_built_in_info+0x42>
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
 8013748:	782b      	ldrb	r3, [r5, #0]
 801374a:	f003 031f 	and.w	r3, r3, #31
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 801374e:	1f1a      	subs	r2, r3, #4
 8013750:	2a0a      	cmp	r2, #10
 8013752:	d824      	bhi.n	801379e <lv_img_decoder_built_in_info+0x64>
        header->w  = ((lv_img_dsc_t *)src)->header.w;
 8013754:	682a      	ldr	r2, [r5, #0]
 8013756:	6821      	ldr	r1, [r4, #0]
 8013758:	f3c2 228a 	ubfx	r2, r2, #10, #11
 801375c:	f362 2194 	bfi	r1, r2, #10, #11
 8013760:	6021      	str	r1, [r4, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 8013762:	886a      	ldrh	r2, [r5, #2]
 8013764:	8861      	ldrh	r1, [r4, #2]
 8013766:	f3c2 124a 	ubfx	r2, r2, #5, #11
 801376a:	f362 114f 	bfi	r1, r2, #5, #11
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 801376e:	7822      	ldrb	r2, [r4, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 8013770:	8061      	strh	r1, [r4, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 8013772:	f363 0204 	bfi	r2, r3, #0, #5
 8013776:	7022      	strb	r2, [r4, #0]
    return LV_RES_OK;
 8013778:	2001      	movs	r0, #1
 801377a:	bd38      	pop	{r3, r4, r5, pc}
    else if(src_type == LV_IMG_SRC_SYMBOL) {
 801377c:	2802      	cmp	r0, #2
 801377e:	d10d      	bne.n	801379c <lv_img_decoder_built_in_info+0x62>
        header->w = 1;
 8013780:	6823      	ldr	r3, [r4, #0]
 8013782:	2001      	movs	r0, #1
 8013784:	f360 2394 	bfi	r3, r0, #10, #11
        header->h = 1;
 8013788:	0c1a      	lsrs	r2, r3, #16
 801378a:	f360 124f 	bfi	r2, r0, #5, #11
        header->w = 1;
 801378e:	6023      	str	r3, [r4, #0]
        header->h = 1;
 8013790:	8062      	strh	r2, [r4, #2]
        header->cf = LV_IMG_CF_ALPHA_1BIT;
 8013792:	220b      	movs	r2, #11
 8013794:	f362 0304 	bfi	r3, r2, #0, #5
 8013798:	7023      	strb	r3, [r4, #0]
 801379a:	bd38      	pop	{r3, r4, r5, pc}
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 801379c:	2000      	movs	r0, #0
}
 801379e:	bd38      	pop	{r3, r4, r5, pc}

080137a0 <lv_img_decoder_get_info>:
    header->always_zero = 0;
 80137a0:	780b      	ldrb	r3, [r1, #0]
 80137a2:	f36f 1347 	bfc	r3, #5, #3
{
 80137a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137aa:	4607      	mov	r7, r0
    header->always_zero = 0;
 80137ac:	700b      	strb	r3, [r1, #0]
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 80137ae:	480d      	ldr	r0, [pc, #52]	; (80137e4 <lv_img_decoder_get_info+0x44>)
 80137b0:	f8df 8030 	ldr.w	r8, [pc, #48]	; 80137e4 <lv_img_decoder_get_info+0x44>
{
 80137b4:	460e      	mov	r6, r1
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 80137b6:	f000 fd1f 	bl	80141f8 <lv_ll_get_head>
    lv_res_t res = LV_RES_INV;
 80137ba:	2400      	movs	r4, #0
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 80137bc:	4605      	mov	r5, r0
 80137be:	b915      	cbnz	r5, 80137c6 <lv_img_decoder_get_info+0x26>
}
 80137c0:	4620      	mov	r0, r4
 80137c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(d->info_cb) {
 80137c6:	682c      	ldr	r4, [r5, #0]
 80137c8:	b134      	cbz	r4, 80137d8 <lv_img_decoder_get_info+0x38>
            res = d->info_cb(d, src, header);
 80137ca:	4632      	mov	r2, r6
 80137cc:	4639      	mov	r1, r7
 80137ce:	4628      	mov	r0, r5
 80137d0:	47a0      	blx	r4
            if(res == LV_RES_OK) break;
 80137d2:	2801      	cmp	r0, #1
            res = d->info_cb(d, src, header);
 80137d4:	4604      	mov	r4, r0
            if(res == LV_RES_OK) break;
 80137d6:	d0f3      	beq.n	80137c0 <lv_img_decoder_get_info+0x20>
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 80137d8:	4629      	mov	r1, r5
 80137da:	4640      	mov	r0, r8
 80137dc:	f000 fd12 	bl	8014204 <lv_ll_get_next>
 80137e0:	4605      	mov	r5, r0
 80137e2:	e7ec      	b.n	80137be <lv_img_decoder_get_info+0x1e>
 80137e4:	2000c5f8 	.word	0x2000c5f8

080137e8 <lv_img_decoder_open>:
{
 80137e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80137ec:	4605      	mov	r5, r0
    dsc->style     = style;
 80137ee:	6082      	str	r2, [r0, #8]
    dsc->src       = src;
 80137f0:	6069      	str	r1, [r5, #4]
    dsc->src_type  = lv_img_src_get_type(src);
 80137f2:	4608      	mov	r0, r1
{
 80137f4:	460f      	mov	r7, r1
    dsc->src_type  = lv_img_src_get_type(src);
 80137f6:	f7fd fb67 	bl	8010ec8 <lv_img_src_get_type>
    dsc->user_data = NULL;
 80137fa:	2400      	movs	r4, #0
    dsc->src_type  = lv_img_src_get_type(src);
 80137fc:	7328      	strb	r0, [r5, #12]
    dsc->user_data = NULL;
 80137fe:	622c      	str	r4, [r5, #32]
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 8013800:	4817      	ldr	r0, [pc, #92]	; (8013860 <lv_img_decoder_open+0x78>)
 8013802:	f8df a05c 	ldr.w	sl, [pc, #92]	; 8013860 <lv_img_decoder_open+0x78>
 8013806:	f000 fcf7 	bl	80141f8 <lv_ll_get_head>
        res = d->info_cb(d, src, &dsc->header);
 801380a:	f105 0910 	add.w	r9, r5, #16
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 801380e:	4606      	mov	r6, r0
        dsc->error_msg = NULL;
 8013810:	46a0      	mov	r8, r4
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 8013812:	b946      	cbnz	r6, 8013826 <lv_img_decoder_open+0x3e>
    if(res == LV_RES_INV) {
 8013814:	b924      	cbnz	r4, 8013820 <lv_img_decoder_open+0x38>
        memset(dsc, 0, sizeof(lv_img_decoder_dsc_t));
 8013816:	2224      	movs	r2, #36	; 0x24
 8013818:	4621      	mov	r1, r4
 801381a:	4628      	mov	r0, r5
 801381c:	f006 f959 	bl	8019ad2 <memset>
}
 8013820:	4620      	mov	r0, r4
 8013822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if(d->info_cb == NULL || d->open_cb == NULL) continue;
 8013826:	6833      	ldr	r3, [r6, #0]
 8013828:	b1a3      	cbz	r3, 8013854 <lv_img_decoder_open+0x6c>
 801382a:	6872      	ldr	r2, [r6, #4]
 801382c:	b192      	cbz	r2, 8013854 <lv_img_decoder_open+0x6c>
        res = d->info_cb(d, src, &dsc->header);
 801382e:	464a      	mov	r2, r9
 8013830:	4639      	mov	r1, r7
 8013832:	4630      	mov	r0, r6
 8013834:	4798      	blx	r3
        if(res != LV_RES_OK) continue;
 8013836:	2801      	cmp	r0, #1
        res = d->info_cb(d, src, &dsc->header);
 8013838:	4604      	mov	r4, r0
        if(res != LV_RES_OK) continue;
 801383a:	d10b      	bne.n	8013854 <lv_img_decoder_open+0x6c>
        dsc->error_msg = NULL;
 801383c:	f8c5 801c 	str.w	r8, [r5, #28]
        dsc->img_data  = NULL;
 8013840:	f8c5 8014 	str.w	r8, [r5, #20]
        dsc->decoder   = d;
 8013844:	602e      	str	r6, [r5, #0]
        res = d->open_cb(d, dsc);
 8013846:	6873      	ldr	r3, [r6, #4]
 8013848:	4629      	mov	r1, r5
 801384a:	4630      	mov	r0, r6
 801384c:	4798      	blx	r3
        if(res == LV_RES_OK) break;
 801384e:	2801      	cmp	r0, #1
        res = d->open_cb(d, dsc);
 8013850:	4604      	mov	r4, r0
        if(res == LV_RES_OK) break;
 8013852:	d0e5      	beq.n	8013820 <lv_img_decoder_open+0x38>
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 8013854:	4631      	mov	r1, r6
 8013856:	4650      	mov	r0, sl
 8013858:	f000 fcd4 	bl	8014204 <lv_ll_get_next>
 801385c:	4606      	mov	r6, r0
 801385e:	e7d8      	b.n	8013812 <lv_img_decoder_open+0x2a>
 8013860:	2000c5f8 	.word	0x2000c5f8

08013864 <lv_img_decoder_read_line>:
{
 8013864:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013866:	4605      	mov	r5, r0
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
 8013868:	6800      	ldr	r0, [r0, #0]
 801386a:	6884      	ldr	r4, [r0, #8]
 801386c:	b144      	cbz	r4, 8013880 <lv_img_decoder_read_line+0x1c>
 801386e:	9e06      	ldr	r6, [sp, #24]
 8013870:	e88d 0048 	stmia.w	sp, {r3, r6}
 8013874:	4613      	mov	r3, r2
 8013876:	460a      	mov	r2, r1
 8013878:	4629      	mov	r1, r5
 801387a:	47a0      	blx	r4
}
 801387c:	b002      	add	sp, #8
 801387e:	bd70      	pop	{r4, r5, r6, pc}
    lv_res_t res = LV_RES_INV;
 8013880:	4620      	mov	r0, r4
 8013882:	e7fb      	b.n	801387c <lv_img_decoder_read_line+0x18>

08013884 <lv_img_decoder_close>:
{
 8013884:	4601      	mov	r1, r0
    if(dsc->decoder) {
 8013886:	6800      	ldr	r0, [r0, #0]
 8013888:	b110      	cbz	r0, 8013890 <lv_img_decoder_close+0xc>
        if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
 801388a:	68c2      	ldr	r2, [r0, #12]
 801388c:	b102      	cbz	r2, 8013890 <lv_img_decoder_close+0xc>
 801388e:	4710      	bx	r2
 8013890:	4770      	bx	lr
	...

08013894 <lv_img_decoder_create>:
{
 8013894:	b510      	push	{r4, lr}
    decoder = lv_ll_ins_head(&LV_GC_ROOT(_lv_img_defoder_ll));
 8013896:	4806      	ldr	r0, [pc, #24]	; (80138b0 <lv_img_decoder_create+0x1c>)
 8013898:	f000 fc72 	bl	8014180 <lv_ll_ins_head>
    lv_mem_assert(decoder);
 801389c:	4604      	mov	r4, r0
 801389e:	b900      	cbnz	r0, 80138a2 <lv_img_decoder_create+0xe>
 80138a0:	e7fe      	b.n	80138a0 <lv_img_decoder_create+0xc>
    memset(decoder, 0, sizeof(lv_img_decoder_t));
 80138a2:	2214      	movs	r2, #20
 80138a4:	2100      	movs	r1, #0
 80138a6:	f006 f914 	bl	8019ad2 <memset>
}
 80138aa:	4620      	mov	r0, r4
 80138ac:	bd10      	pop	{r4, pc}
 80138ae:	bf00      	nop
 80138b0:	2000c5f8 	.word	0x2000c5f8

080138b4 <lv_img_decoder_init>:
{
 80138b4:	b508      	push	{r3, lr}
    lv_ll_init(&LV_GC_ROOT(_lv_img_defoder_ll), sizeof(lv_img_decoder_t));
 80138b6:	2114      	movs	r1, #20
 80138b8:	4807      	ldr	r0, [pc, #28]	; (80138d8 <lv_img_decoder_init+0x24>)
 80138ba:	f000 fc57 	bl	801416c <lv_ll_init>
    decoder = lv_img_decoder_create();
 80138be:	f7ff ffe9 	bl	8013894 <lv_img_decoder_create>
    if(decoder == NULL) {
 80138c2:	b900      	cbnz	r0, 80138c6 <lv_img_decoder_init+0x12>
 80138c4:	e7fe      	b.n	80138c4 <lv_img_decoder_init+0x10>
    decoder->info_cb = info_cb;
 80138c6:	4b05      	ldr	r3, [pc, #20]	; (80138dc <lv_img_decoder_init+0x28>)
 80138c8:	6003      	str	r3, [r0, #0]
    decoder->open_cb = open_cb;
 80138ca:	4b05      	ldr	r3, [pc, #20]	; (80138e0 <lv_img_decoder_init+0x2c>)
 80138cc:	6043      	str	r3, [r0, #4]
    decoder->read_line_cb = read_line_cb;
 80138ce:	4b05      	ldr	r3, [pc, #20]	; (80138e4 <lv_img_decoder_init+0x30>)
 80138d0:	6083      	str	r3, [r0, #8]
    decoder->close_cb = close_cb;
 80138d2:	4b05      	ldr	r3, [pc, #20]	; (80138e8 <lv_img_decoder_init+0x34>)
 80138d4:	60c3      	str	r3, [r0, #12]
 80138d6:	bd08      	pop	{r3, pc}
 80138d8:	2000c5f8 	.word	0x2000c5f8
 80138dc:	0801373b 	.word	0x0801373b
 80138e0:	08013695 	.word	0x08013695
 80138e4:	080133f9 	.word	0x080133f9
 80138e8:	080133dd 	.word	0x080133dd

080138ec <lv_font_get_glyph_bitmap>:
 * @param letter an UNICODE character code
 * @return  pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter)
{
    return font_p->get_glyph_bitmap(font_p, letter);
 80138ec:	6843      	ldr	r3, [r0, #4]
 80138ee:	4718      	bx	r3

080138f0 <lv_font_get_glyph_dsc>:
 * @param letter an UNICODE letter code
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter, uint32_t letter_next)
{
 80138f0:	b410      	push	{r4}
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
 80138f2:	6804      	ldr	r4, [r0, #0]
 80138f4:	46a4      	mov	ip, r4
}
 80138f6:	f85d 4b04 	ldr.w	r4, [sp], #4
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
 80138fa:	4760      	bx	ip

080138fc <lv_font_get_glyph_width>:
 * @param letter an UNICODE letter
 * @param letter_next the next letter after `letter`. Used for kerning
 * @return the width of the glyph
 */
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
{
 80138fc:	b507      	push	{r0, r1, r2, lr}
    lv_font_glyph_dsc_t g;
    bool ret;
    ret = lv_font_get_glyph_dsc(font, &g, letter, letter_next);
 80138fe:	4613      	mov	r3, r2
 8013900:	460a      	mov	r2, r1
 8013902:	4669      	mov	r1, sp
 8013904:	f7ff fff4 	bl	80138f0 <lv_font_get_glyph_dsc>
    if(ret) return g.adv_w;
 8013908:	b108      	cbz	r0, 801390e <lv_font_get_glyph_width+0x12>
 801390a:	f8bd 0000 	ldrh.w	r0, [sp]
    else return 0;
}
 801390e:	b003      	add	sp, #12
 8013910:	f85d fb04 	ldr.w	pc, [sp], #4

08013914 <kern_pair_8_compare>:
{
    const uint8_t * ref8_p = ref;
    const uint8_t * element8_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
 8013914:	7803      	ldrb	r3, [r0, #0]
 8013916:	780a      	ldrb	r2, [r1, #0]
 8013918:	4293      	cmp	r3, r2
 801391a:	bf11      	iteee	ne
 801391c:	1a98      	subne	r0, r3, r2
    else return (int32_t) ref8_p[1] - element8_p[1];
 801391e:	784b      	ldrbeq	r3, [r1, #1]
 8013920:	7840      	ldrbeq	r0, [r0, #1]
 8013922:	1ac0      	subeq	r0, r0, r3

}
 8013924:	4770      	bx	lr

08013926 <kern_pair_16_compare>:
{
    const uint16_t * ref16_p = ref;
    const uint16_t * element16_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
 8013926:	8803      	ldrh	r3, [r0, #0]
 8013928:	880a      	ldrh	r2, [r1, #0]
 801392a:	4293      	cmp	r3, r2
 801392c:	bf11      	iteee	ne
 801392e:	1a98      	subne	r0, r3, r2
    else return (int32_t) ref16_p[1] - element16_p[1];
 8013930:	884b      	ldrheq	r3, [r1, #2]
 8013932:	8840      	ldrheq	r0, [r0, #2]
 8013934:	1ac0      	subeq	r0, r0, r3
}
 8013936:	4770      	bx	lr

08013938 <unicode_list_compare>:
 *  @retval > 0   Reference is less than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
    return (*(uint16_t *)ref) - (*(uint16_t *)element);
 8013938:	8800      	ldrh	r0, [r0, #0]
 801393a:	880b      	ldrh	r3, [r1, #0]
}
 801393c:	1ac0      	subs	r0, r0, r3
 801393e:	4770      	bx	lr

08013940 <get_glyph_dsc_id.isra.0.part.1>:
static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
 8013940:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 8013942:	6804      	ldr	r4, [r0, #0]
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
 8013944:	6963      	ldr	r3, [r4, #20]
 8013946:	428b      	cmp	r3, r1
static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
 8013948:	b085      	sub	sp, #20
 801394a:	460d      	mov	r5, r1
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
 801394c:	d00b      	beq.n	8013966 <get_glyph_dsc_id.isra.0.part.1+0x26>
 801394e:	2700      	movs	r7, #0
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 8013950:	f04f 0e14 	mov.w	lr, #20
    for(i = 0; i < fdsc->cmap_num; i++) {
 8013954:	8a63      	ldrh	r3, [r4, #18]
 8013956:	b2be      	uxth	r6, r7
 8013958:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801395c:	429e      	cmp	r6, r3
 801395e:	db05      	blt.n	801396c <get_glyph_dsc_id.isra.0.part.1+0x2c>
    fdsc->last_letter = letter;
 8013960:	6165      	str	r5, [r4, #20]
    fdsc->last_glyph_id = 0;
 8013962:	2000      	movs	r0, #0
 8013964:	e015      	b.n	8013992 <get_glyph_dsc_id.isra.0.part.1+0x52>
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
 8013966:	69a0      	ldr	r0, [r4, #24]
}
 8013968:	b005      	add	sp, #20
 801396a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 801396c:	68a3      	ldr	r3, [r4, #8]
 801396e:	fb0e f606 	mul.w	r6, lr, r6
 8013972:	1999      	adds	r1, r3, r6
 8013974:	599a      	ldr	r2, [r3, r6]
        if(rcp > fdsc->cmaps[i].range_length) continue;
 8013976:	888b      	ldrh	r3, [r1, #4]
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 8013978:	1aaa      	subs	r2, r5, r2
        if(rcp > fdsc->cmaps[i].range_length) continue;
 801397a:	429a      	cmp	r2, r3
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 801397c:	9203      	str	r2, [sp, #12]
 801397e:	f107 0701 	add.w	r7, r7, #1
        if(rcp > fdsc->cmaps[i].range_length) continue;
 8013982:	d8e7      	bhi.n	8013954 <get_glyph_dsc_id.isra.0.part.1+0x14>
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
 8013984:	7c8b      	ldrb	r3, [r1, #18]
 8013986:	f013 0303 	ands.w	r3, r3, #3
 801398a:	d104      	bne.n	8013996 <get_glyph_dsc_id.isra.0.part.1+0x56>
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
 801398c:	88c8      	ldrh	r0, [r1, #6]
 801398e:	4410      	add	r0, r2
        fdsc->last_letter = letter;
 8013990:	6165      	str	r5, [r4, #20]
    fdsc->last_glyph_id = 0;
 8013992:	61a0      	str	r0, [r4, #24]
 8013994:	e7e8      	b.n	8013968 <get_glyph_dsc_id.isra.0.part.1+0x28>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
 8013996:	2b01      	cmp	r3, #1
 8013998:	d104      	bne.n	80139a4 <get_glyph_dsc_id.isra.0.part.1+0x64>
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
 801399a:	68cb      	ldr	r3, [r1, #12]
 801399c:	5c98      	ldrb	r0, [r3, r2]
 801399e:	88cb      	ldrh	r3, [r1, #6]
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 80139a0:	4418      	add	r0, r3
 80139a2:	e7f5      	b.n	8013990 <get_glyph_dsc_id.isra.0.part.1+0x50>
 80139a4:	4811      	ldr	r0, [pc, #68]	; (80139ec <get_glyph_dsc_id.isra.0.part.1+0xac>)
 80139a6:	8a0a      	ldrh	r2, [r1, #16]
            uint8_t * p = lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length, sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);
 80139a8:	9000      	str	r0, [sp, #0]
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
 80139aa:	2b02      	cmp	r3, #2
 80139ac:	d10e      	bne.n	80139cc <get_glyph_dsc_id.isra.0.part.1+0x8c>
            uint8_t * p = lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length, sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);
 80139ae:	6889      	ldr	r1, [r1, #8]
 80139b0:	a803      	add	r0, sp, #12
 80139b2:	f001 f97c 	bl	8014cae <lv_utils_bsearch>
            if(p) {
 80139b6:	b908      	cbnz	r0, 80139bc <get_glyph_dsc_id.isra.0.part.1+0x7c>
        uint32_t glyph_id = 0;
 80139b8:	2000      	movs	r0, #0
 80139ba:	e7e9      	b.n	8013990 <get_glyph_dsc_id.isra.0.part.1+0x50>
                uint32_t ofs = (lv_uintptr_t)p - (lv_uintptr_t) fdsc->cmaps[i].unicode_list;
 80139bc:	68a3      	ldr	r3, [r4, #8]
 80139be:	441e      	add	r6, r3
 80139c0:	68b3      	ldr	r3, [r6, #8]
 80139c2:	1ac3      	subs	r3, r0, r3
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
 80139c4:	88f0      	ldrh	r0, [r6, #6]
 80139c6:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80139ca:	e7e1      	b.n	8013990 <get_glyph_dsc_id.isra.0.part.1+0x50>
            uint8_t * p = lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length, sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);
 80139cc:	2302      	movs	r3, #2
 80139ce:	6889      	ldr	r1, [r1, #8]
 80139d0:	a803      	add	r0, sp, #12
 80139d2:	f001 f96c 	bl	8014cae <lv_utils_bsearch>
            if(p) {
 80139d6:	2800      	cmp	r0, #0
 80139d8:	d0ee      	beq.n	80139b8 <get_glyph_dsc_id.isra.0.part.1+0x78>
                uint32_t ofs = (lv_uintptr_t)p - (lv_uintptr_t) fdsc->cmaps[i].unicode_list;
 80139da:	68a3      	ldr	r3, [r4, #8]
 80139dc:	441e      	add	r6, r3
 80139de:	68b3      	ldr	r3, [r6, #8]
 80139e0:	1ac0      	subs	r0, r0, r3
                ofs = ofs >> 1;     /*The list stores `uint16_t` so the get the index divide by 2*/
 80139e2:	0840      	lsrs	r0, r0, #1
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 80139e4:	68f3      	ldr	r3, [r6, #12]
 80139e6:	5c18      	ldrb	r0, [r3, r0]
 80139e8:	88f3      	ldrh	r3, [r6, #6]
 80139ea:	e7d9      	b.n	80139a0 <get_glyph_dsc_id.isra.0.part.1+0x60>
 80139ec:	08013939 	.word	0x08013939

080139f0 <lv_font_get_bitmap_fmt_txt>:
{
 80139f0:	b510      	push	{r4, lr}
    if(letter == '\0') return 0;
 80139f2:	b909      	cbnz	r1, 80139f8 <lv_font_get_bitmap_fmt_txt+0x8>
    if(!gid) return false;
 80139f4:	2000      	movs	r0, #0
 80139f6:	bd10      	pop	{r4, pc}
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 80139f8:	f850 4f0c 	ldr.w	r4, [r0, #12]!
 80139fc:	f7ff ffa0 	bl	8013940 <get_glyph_dsc_id.isra.0.part.1>
    if(!gid) return false;
 8013a00:	2800      	cmp	r0, #0
 8013a02:	d0f7      	beq.n	80139f4 <lv_font_get_bitmap_fmt_txt+0x4>
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 8013a04:	6863      	ldr	r3, [r4, #4]
 8013a06:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
    if(gdsc) return &fdsc->glyph_bitmap[gdsc->bitmap_index];
 8013a0a:	2a00      	cmp	r2, #0
 8013a0c:	d0f2      	beq.n	80139f4 <lv_font_get_bitmap_fmt_txt+0x4>
 8013a0e:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 8013a12:	6820      	ldr	r0, [r4, #0]
 8013a14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013a18:	4418      	add	r0, r3
}
 8013a1a:	bd10      	pop	{r4, pc}

08013a1c <lv_font_get_glyph_dsc_fmt_txt>:
{
 8013a1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013a20:	4680      	mov	r8, r0
 8013a22:	b085      	sub	sp, #20
 8013a24:	460c      	mov	r4, r1
 8013a26:	4699      	mov	r9, r3
    if(letter == '\0') return 0;
 8013a28:	b91a      	cbnz	r2, 8013a32 <lv_font_get_glyph_dsc_fmt_txt+0x16>
    if(!gid) return false;
 8013a2a:	2000      	movs	r0, #0
}
 8013a2c:	b005      	add	sp, #20
 8013a2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 8013a32:	4607      	mov	r7, r0
 8013a34:	4611      	mov	r1, r2
 8013a36:	f857 5f0c 	ldr.w	r5, [r7, #12]!
 8013a3a:	4638      	mov	r0, r7
 8013a3c:	f7ff ff80 	bl	8013940 <get_glyph_dsc_id.isra.0.part.1>
    if(!gid) return false;
 8013a40:	4606      	mov	r6, r0
 8013a42:	2800      	cmp	r0, #0
 8013a44:	d0f1      	beq.n	8013a2a <lv_font_get_glyph_dsc_fmt_txt+0xe>
    if(fdsc->kern_dsc) {
 8013a46:	68eb      	ldr	r3, [r5, #12]
 8013a48:	b9db      	cbnz	r3, 8013a82 <lv_font_get_glyph_dsc_fmt_txt+0x66>
    int8_t kvalue = 0;
 8013a4a:	2000      	movs	r0, #0
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 8013a4c:	686b      	ldr	r3, [r5, #4]
 8013a4e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    uint32_t adv_w = gdsc->adv_w + ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 8013a52:	8a2b      	ldrh	r3, [r5, #16]
 8013a54:	4358      	muls	r0, r3
 8013a56:	8873      	ldrh	r3, [r6, #2]
 8013a58:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8013a5c:	eb03 1020 	add.w	r0, r3, r0, asr #4
    adv_w  = (adv_w + (1 << 3)) >> 4;
 8013a60:	3008      	adds	r0, #8
 8013a62:	0900      	lsrs	r0, r0, #4
    dsc_out->adv_w = adv_w;
 8013a64:	8020      	strh	r0, [r4, #0]
    dsc_out->box_h = gdsc->box_h;
 8013a66:	7973      	ldrb	r3, [r6, #5]
 8013a68:	70e3      	strb	r3, [r4, #3]
    dsc_out->box_w = gdsc->box_w;
 8013a6a:	7933      	ldrb	r3, [r6, #4]
 8013a6c:	70a3      	strb	r3, [r4, #2]
    dsc_out->ofs_x = gdsc->ofs_x;
 8013a6e:	79b3      	ldrb	r3, [r6, #6]
 8013a70:	7123      	strb	r3, [r4, #4]
    dsc_out->ofs_y = gdsc->ofs_y;
 8013a72:	79f3      	ldrb	r3, [r6, #7]
 8013a74:	7163      	strb	r3, [r4, #5]
    dsc_out->bpp   = fdsc->bpp;
 8013a76:	7ceb      	ldrb	r3, [r5, #19]
 8013a78:	f3c3 0382 	ubfx	r3, r3, #2, #3
 8013a7c:	71a3      	strb	r3, [r4, #6]
    return true;
 8013a7e:	2001      	movs	r0, #1
 8013a80:	e7d4      	b.n	8013a2c <lv_font_get_glyph_dsc_fmt_txt+0x10>
    if(letter == '\0') return 0;
 8013a82:	f1b9 0f00 	cmp.w	r9, #0
 8013a86:	d0e0      	beq.n	8013a4a <lv_font_get_glyph_dsc_fmt_txt+0x2e>
 8013a88:	4649      	mov	r1, r9
 8013a8a:	4638      	mov	r0, r7
 8013a8c:	f7ff ff58 	bl	8013940 <get_glyph_dsc_id.isra.0.part.1>
        if(gid_next) {
 8013a90:	2800      	cmp	r0, #0
 8013a92:	d0da      	beq.n	8013a4a <lv_font_get_glyph_dsc_fmt_txt+0x2e>
 8013a94:	f8d8 300c 	ldr.w	r3, [r8, #12]
    if(fdsc->kern_classes == 0) {
 8013a98:	7cda      	ldrb	r2, [r3, #19]
 8013a9a:	68df      	ldr	r7, [r3, #12]
 8013a9c:	f012 0f20 	tst.w	r2, #32
 8013aa0:	d133      	bne.n	8013b0a <lv_font_get_glyph_dsc_fmt_txt+0xee>
        if(kdsc->glyph_ids_size == 0) {
 8013aa2:	7afb      	ldrb	r3, [r7, #11]
 8013aa4:	f013 0303 	ands.w	r3, r3, #3
 8013aa8:	d117      	bne.n	8013ada <lv_font_get_glyph_dsc_fmt_txt+0xbe>
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 8013aaa:	eb06 2300 	add.w	r3, r6, r0, lsl #8
 8013aae:	a804      	add	r0, sp, #16
            const uint8_t * g_ids = kdsc->glyph_ids;
 8013ab0:	f8d7 8000 	ldr.w	r8, [r7]
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 8013ab4:	68ba      	ldr	r2, [r7, #8]
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 8013ab6:	f820 3d04 	strh.w	r3, [r0, #-4]!
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 8013aba:	4b1c      	ldr	r3, [pc, #112]	; (8013b2c <lv_font_get_glyph_dsc_fmt_txt+0x110>)
 8013abc:	9300      	str	r3, [sp, #0]
 8013abe:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8013ac2:	2302      	movs	r3, #2
 8013ac4:	4641      	mov	r1, r8
 8013ac6:	f001 f8f2 	bl	8014cae <lv_utils_bsearch>
            if(kid_p) {
 8013aca:	2800      	cmp	r0, #0
 8013acc:	d0be      	beq.n	8013a4c <lv_font_get_glyph_dsc_fmt_txt+0x30>
                uint32_t ofs = (lv_uintptr_t)kid_p - (lv_uintptr_t)g_ids;
 8013ace:	eba0 0008 	sub.w	r0, r0, r8
                ofs = ofs >> 1;     /*ofs is for pair, divide by 2 to refer as a single value*/
 8013ad2:	0840      	lsrs	r0, r0, #1
                value = kdsc->values[ofs];
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	5618      	ldrsb	r0, [r3, r0]
 8013ad8:	e7b8      	b.n	8013a4c <lv_font_get_glyph_dsc_fmt_txt+0x30>
        } else if(kdsc->glyph_ids_size == 1) {
 8013ada:	2b01      	cmp	r3, #1
 8013adc:	d1b5      	bne.n	8013a4a <lv_font_get_glyph_dsc_fmt_txt+0x2e>
            uint32_t g_id_both = (uint32_t)((uint32_t)gid_right << 8) + gid_left; /*Create one number from the ids*/
 8013ade:	eb06 2300 	add.w	r3, r6, r0, lsl #8
 8013ae2:	a804      	add	r0, sp, #16
            const uint16_t * g_ids = kdsc->glyph_ids;
 8013ae4:	f8d7 8000 	ldr.w	r8, [r7]
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 8013ae8:	68ba      	ldr	r2, [r7, #8]
            uint32_t g_id_both = (uint32_t)((uint32_t)gid_right << 8) + gid_left; /*Create one number from the ids*/
 8013aea:	f840 3d04 	str.w	r3, [r0, #-4]!
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 8013aee:	4b10      	ldr	r3, [pc, #64]	; (8013b30 <lv_font_get_glyph_dsc_fmt_txt+0x114>)
 8013af0:	9300      	str	r3, [sp, #0]
 8013af2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8013af6:	2304      	movs	r3, #4
 8013af8:	4641      	mov	r1, r8
 8013afa:	f001 f8d8 	bl	8014cae <lv_utils_bsearch>
            if(kid_p) {
 8013afe:	2800      	cmp	r0, #0
 8013b00:	d0a4      	beq.n	8013a4c <lv_font_get_glyph_dsc_fmt_txt+0x30>
                uint32_t ofs = (lv_uintptr_t)kid_p - (lv_uintptr_t)g_ids;
 8013b02:	eba0 0008 	sub.w	r0, r0, r8
                ofs = ofs >> 4;     /*ofs is 4 byte pairs, divide by 4 to refer as a single value*/
 8013b06:	0900      	lsrs	r0, r0, #4
 8013b08:	e7e4      	b.n	8013ad4 <lv_font_get_glyph_dsc_fmt_txt+0xb8>
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
 8013b0a:	687a      	ldr	r2, [r7, #4]
 8013b0c:	5d93      	ldrb	r3, [r2, r6]
        if(left_class > 0 && right_class > 0) {
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d09b      	beq.n	8013a4a <lv_font_get_glyph_dsc_fmt_txt+0x2e>
        uint8_t right_class = kdsc->left_class_mapping[gid_right];
 8013b12:	5c11      	ldrb	r1, [r2, r0]
        if(left_class > 0 && right_class > 0) {
 8013b14:	2900      	cmp	r1, #0
 8013b16:	d098      	beq.n	8013a4a <lv_font_get_glyph_dsc_fmt_txt+0x2e>
            value = kdsc->class_pair_values[(left_class-1)* kdsc->right_class_cnt + (right_class-1)];
 8013b18:	683a      	ldr	r2, [r7, #0]
 8013b1a:	7b78      	ldrb	r0, [r7, #13]
 8013b1c:	3b01      	subs	r3, #1
 8013b1e:	440a      	add	r2, r1
 8013b20:	fb00 2303 	mla	r3, r0, r3, r2
 8013b24:	f913 0c01 	ldrsb.w	r0, [r3, #-1]
 8013b28:	e790      	b.n	8013a4c <lv_font_get_glyph_dsc_fmt_txt+0x30>
 8013b2a:	bf00      	nop
 8013b2c:	08013915 	.word	0x08013915
 8013b30:	08013927 	.word	0x08013927

08013b34 <lv_disp_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_disp_drv_init(lv_disp_drv_t * driver)
{
 8013b34:	b510      	push	{r4, lr}
    memset(driver, 0, sizeof(lv_disp_drv_t));
 8013b36:	2224      	movs	r2, #36	; 0x24
{
 8013b38:	4604      	mov	r4, r0
    memset(driver, 0, sizeof(lv_disp_drv_t));
 8013b3a:	2100      	movs	r1, #0
 8013b3c:	f005 ffc9 	bl	8019ad2 <memset>

    driver->flush_cb         = NULL;
    driver->hor_res          = LV_HOR_RES_MAX;
 8013b40:	23a0      	movs	r3, #160	; 0xa0
 8013b42:	8023      	strh	r3, [r4, #0]
    driver->ver_res          = LV_VER_RES_MAX;
 8013b44:	2380      	movs	r3, #128	; 0x80
    driver->flush_cb         = NULL;
 8013b46:	2200      	movs	r2, #0
    driver->ver_res          = LV_VER_RES_MAX;
 8013b48:	8063      	strh	r3, [r4, #2]
    driver->buffer           = NULL;
    driver->rotated          = 0;
    driver->color_chroma_key = LV_COLOR_TRANSP;
 8013b4a:	f04f 0300 	mov.w	r3, #0
 8013b4e:	f362 0304 	bfi	r3, r2, #0, #5
 8013b52:	7723      	strb	r3, [r4, #28]
 8013b54:	8ba3      	ldrh	r3, [r4, #28]
    driver->gpu_blend_cb = NULL;
    driver->gpu_fill_cb  = NULL;
#endif

#if LV_USE_USER_DATA
    driver->user_data = NULL;
 8013b56:	6222      	str	r2, [r4, #32]
    driver->color_chroma_key = LV_COLOR_TRANSP;
 8013b58:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 8013b5c:	83a3      	strh	r3, [r4, #28]
 8013b5e:	0a1b      	lsrs	r3, r3, #8
 8013b60:	f362 03c7 	bfi	r3, r2, #3, #5
 8013b64:	7763      	strb	r3, [r4, #29]
    driver->antialiasing = true;
 8013b66:	2301      	movs	r3, #1
 8013b68:	7223      	strb	r3, [r4, #8]
#endif

    driver->set_px_cb = NULL;
 8013b6a:	6162      	str	r2, [r4, #20]
 8013b6c:	bd10      	pop	{r4, pc}

08013b6e <lv_disp_buf_init>:
 *             It lets LittlevGL to render next frame into the other buffer while previous is being
 * sent. Set to `NULL` if unused.
 * @param size_in_px_cnt size of the `buf1` and `buf2` in pixel count.
 */
void lv_disp_buf_init(lv_disp_buf_t * disp_buf, void * buf1, void * buf2, uint32_t size_in_px_cnt)
{
 8013b6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b70:	4604      	mov	r4, r0
 8013b72:	460d      	mov	r5, r1
 8013b74:	4617      	mov	r7, r2
 8013b76:	461e      	mov	r6, r3
    memset(disp_buf, 0, sizeof(lv_disp_buf_t));
 8013b78:	221c      	movs	r2, #28
 8013b7a:	2100      	movs	r1, #0
 8013b7c:	f005 ffa9 	bl	8019ad2 <memset>

    disp_buf->buf1    = buf1;
    disp_buf->buf2    = buf2;
 8013b80:	e884 00a0 	stmia.w	r4, {r5, r7}
    disp_buf->buf_act = disp_buf->buf1;
 8013b84:	60a5      	str	r5, [r4, #8]
    disp_buf->size    = size_in_px_cnt;
 8013b86:	60e6      	str	r6, [r4, #12]
 8013b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013b8c <lv_disp_drv_register>:
 * Automatically set the first display as active.
 * @param driver pointer to an initialized 'lv_disp_drv_t' variable (can be local variable)
 * @return pointer to the new display or NULL on error
 */
lv_disp_t * lv_disp_drv_register(lv_disp_drv_t * driver)
{
 8013b8c:	b570      	push	{r4, r5, r6, lr}
 8013b8e:	4605      	mov	r5, r0
    lv_disp_t * disp = lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
 8013b90:	482a      	ldr	r0, [pc, #168]	; (8013c3c <lv_disp_drv_register+0xb0>)
 8013b92:	f000 faf5 	bl	8014180 <lv_ll_ins_head>
    if(!disp) {
 8013b96:	4604      	mov	r4, r0
 8013b98:	b900      	cbnz	r0, 8013b9c <lv_disp_drv_register+0x10>
 8013b9a:	e7fe      	b.n	8013b9a <lv_disp_drv_register+0xe>
        lv_mem_assert(disp);
        return NULL;
    }

    memcpy(&disp->driver, driver, sizeof(lv_disp_drv_t));
 8013b9c:	4628      	mov	r0, r5
 8013b9e:	4623      	mov	r3, r4
 8013ba0:	f105 0224 	add.w	r2, r5, #36	; 0x24
 8013ba4:	f850 1b04 	ldr.w	r1, [r0], #4
 8013ba8:	f843 1b04 	str.w	r1, [r3], #4
 8013bac:	4290      	cmp	r0, r2
 8013bae:	d1f9      	bne.n	8013ba4 <lv_disp_drv_register+0x18>
    memset(&disp->inv_area_joined, 0, sizeof(disp->inv_area_joined));
 8013bb0:	2220      	movs	r2, #32
 8013bb2:	2100      	movs	r1, #0
 8013bb4:	f504 70a0 	add.w	r0, r4, #320	; 0x140
 8013bb8:	f005 ff8b 	bl	8019ad2 <memset>
    memset(&disp->inv_areas, 0, sizeof(disp->inv_areas));
    lv_ll_init(&disp->scr_ll, sizeof(lv_obj_t));

    if(disp_def == NULL) disp_def = disp;
 8013bbc:	4d20      	ldr	r5, [pc, #128]	; (8013c40 <lv_disp_drv_register+0xb4>)
    memset(&disp->inv_areas, 0, sizeof(disp->inv_areas));
 8013bbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013bc2:	2100      	movs	r1, #0
 8013bc4:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8013bc8:	f005 ff83 	bl	8019ad2 <memset>
    lv_ll_init(&disp->scr_ll, sizeof(lv_obj_t));
 8013bcc:	2148      	movs	r1, #72	; 0x48
 8013bce:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8013bd2:	f000 facb 	bl	801416c <lv_ll_init>
    if(disp_def == NULL) disp_def = disp;
 8013bd6:	682b      	ldr	r3, [r5, #0]
 8013bd8:	b903      	cbnz	r3, 8013bdc <lv_disp_drv_register+0x50>
 8013bda:	602c      	str	r4, [r5, #0]

    lv_disp_t * disp_def_tmp = disp_def;
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
                                        new display*/

    disp->inv_p = 0;
 8013bdc:	f8b4 3160 	ldrh.w	r3, [r4, #352]	; 0x160
    lv_disp_t * disp_def_tmp = disp_def;
 8013be0:	682e      	ldr	r6, [r5, #0]
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
 8013be2:	602c      	str	r4, [r5, #0]
    disp->inv_p = 0;
 8013be4:	f36f 0309 	bfc	r3, #0, #10

    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
 8013be8:	2100      	movs	r1, #0
    disp->inv_p = 0;
 8013bea:	f8a4 3160 	strh.w	r3, [r4, #352]	; 0x160
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
 8013bee:	4608      	mov	r0, r1
 8013bf0:	f7fb f968 	bl	800eec4 <lv_obj_create>
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 8013bf4:	2100      	movs	r1, #0
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
 8013bf6:	6360      	str	r0, [r4, #52]	; 0x34
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 8013bf8:	4608      	mov	r0, r1
 8013bfa:	f7fb f963 	bl	800eec4 <lv_obj_create>
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 8013bfe:	2100      	movs	r1, #0
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 8013c00:	63a0      	str	r0, [r4, #56]	; 0x38
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 8013c02:	4608      	mov	r0, r1
 8013c04:	f7fb f95e 	bl	800eec4 <lv_obj_create>
    lv_obj_set_style(disp->top_layer, &lv_style_transp);
 8013c08:	490e      	ldr	r1, [pc, #56]	; (8013c44 <lv_disp_drv_register+0xb8>)
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 8013c0a:	63e0      	str	r0, [r4, #60]	; 0x3c
    lv_obj_set_style(disp->top_layer, &lv_style_transp);
 8013c0c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8013c0e:	f7fb fbd9 	bl	800f3c4 <lv_obj_set_style>
    lv_obj_set_style(disp->sys_layer, &lv_style_transp);
 8013c12:	490c      	ldr	r1, [pc, #48]	; (8013c44 <lv_disp_drv_register+0xb8>)
 8013c14:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8013c16:	f7fb fbd5 	bl	800f3c4 <lv_obj_set_style>

    lv_obj_invalidate(disp->act_scr);
 8013c1a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8013c1c:	f7fa fe6e 	bl	800e8fc <lv_obj_invalidate>

    disp_def = disp_def_tmp; /*Revert the default display*/

    /*Create a refresh task*/
    disp->refr_task = lv_task_create(lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, disp);
 8013c20:	4623      	mov	r3, r4
 8013c22:	2203      	movs	r2, #3
 8013c24:	211e      	movs	r1, #30
 8013c26:	4808      	ldr	r0, [pc, #32]	; (8013c48 <lv_disp_drv_register+0xbc>)
    disp_def = disp_def_tmp; /*Revert the default display*/
 8013c28:	602e      	str	r6, [r5, #0]
    disp->refr_task = lv_task_create(lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, disp);
 8013c2a:	f000 fdf3 	bl	8014814 <lv_task_create>
 8013c2e:	6260      	str	r0, [r4, #36]	; 0x24
    lv_mem_assert(disp->refr_task);
 8013c30:	b900      	cbnz	r0, 8013c34 <lv_disp_drv_register+0xa8>
 8013c32:	e7fe      	b.n	8013c32 <lv_disp_drv_register+0xa6>
    if(disp->refr_task == NULL) return NULL;

    lv_task_ready(disp->refr_task); /*Be sure the screen will be refreshed immediately on start up*/
 8013c34:	f000 fe03 	bl	801483e <lv_task_ready>

    return disp;
}
 8013c38:	4620      	mov	r0, r4
 8013c3a:	bd70      	pop	{r4, r5, r6, pc}
 8013c3c:	2000c5ec 	.word	0x2000c5ec
 8013c40:	20005ffc 	.word	0x20005ffc
 8013c44:	2000c300 	.word	0x2000c300
 8013c48:	0800f935 	.word	0x0800f935

08013c4c <lv_disp_get_default>:
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
    return disp_def;
}
 8013c4c:	4b01      	ldr	r3, [pc, #4]	; (8013c54 <lv_disp_get_default+0x8>)
 8013c4e:	6818      	ldr	r0, [r3, #0]
 8013c50:	4770      	bx	lr
 8013c52:	bf00      	nop
 8013c54:	20005ffc 	.word	0x20005ffc

08013c58 <lv_disp_get_hor_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
 8013c58:	b910      	cbnz	r0, 8013c60 <lv_disp_get_hor_res+0x8>
    return disp_def;
 8013c5a:	4b06      	ldr	r3, [pc, #24]	; (8013c74 <lv_disp_get_hor_res+0x1c>)
 8013c5c:	6818      	ldr	r0, [r3, #0]

    if(disp == NULL)
 8013c5e:	b138      	cbz	r0, 8013c70 <lv_disp_get_hor_res+0x18>
        return LV_HOR_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.hor_res : disp->driver.ver_res;
 8013c60:	7a03      	ldrb	r3, [r0, #8]
 8013c62:	079b      	lsls	r3, r3, #30
 8013c64:	bf54      	ite	pl
 8013c66:	f9b0 0000 	ldrshpl.w	r0, [r0]
 8013c6a:	f9b0 0002 	ldrshmi.w	r0, [r0, #2]
 8013c6e:	4770      	bx	lr
        return LV_HOR_RES_MAX;
 8013c70:	20a0      	movs	r0, #160	; 0xa0
}
 8013c72:	4770      	bx	lr
 8013c74:	20005ffc 	.word	0x20005ffc

08013c78 <lv_disp_get_ver_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
 8013c78:	b910      	cbnz	r0, 8013c80 <lv_disp_get_ver_res+0x8>
    return disp_def;
 8013c7a:	4b06      	ldr	r3, [pc, #24]	; (8013c94 <lv_disp_get_ver_res+0x1c>)
 8013c7c:	6818      	ldr	r0, [r3, #0]

    if(disp == NULL)
 8013c7e:	b138      	cbz	r0, 8013c90 <lv_disp_get_ver_res+0x18>
        return LV_VER_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.ver_res : disp->driver.hor_res;
 8013c80:	7a03      	ldrb	r3, [r0, #8]
 8013c82:	079b      	lsls	r3, r3, #30
 8013c84:	bf54      	ite	pl
 8013c86:	f9b0 0002 	ldrshpl.w	r0, [r0, #2]
 8013c8a:	f9b0 0000 	ldrshmi.w	r0, [r0]
 8013c8e:	4770      	bx	lr
        return LV_VER_RES_MAX;
 8013c90:	2080      	movs	r0, #128	; 0x80
}
 8013c92:	4770      	bx	lr
 8013c94:	20005ffc 	.word	0x20005ffc

08013c98 <lv_disp_get_antialiasing>:
bool lv_disp_get_antialiasing(lv_disp_t * disp)
{
#if LV_ANTIALIAS == 0
    return false;
#else
    if(disp == NULL) disp = lv_disp_get_default();
 8013c98:	b910      	cbnz	r0, 8013ca0 <lv_disp_get_antialiasing+0x8>
    return disp_def;
 8013c9a:	4b03      	ldr	r3, [pc, #12]	; (8013ca8 <lv_disp_get_antialiasing+0x10>)
 8013c9c:	6818      	ldr	r0, [r3, #0]
    if(disp == NULL) return false;
 8013c9e:	b110      	cbz	r0, 8013ca6 <lv_disp_get_antialiasing+0xe>

    return disp->driver.antialiasing ? true : false;
 8013ca0:	7a00      	ldrb	r0, [r0, #8]
 8013ca2:	f000 0001 	and.w	r0, r0, #1
#endif
}
 8013ca6:	4770      	bx	lr
 8013ca8:	20005ffc 	.word	0x20005ffc

08013cac <lv_disp_flush_ready>:
 * Call in the display driver's `flush_cb` function when the flushing is finished
 * @param disp_drv pointer to display driver in `flush_cb` where this function is called
 */
LV_ATTRIBUTE_FLUSH_READY void lv_disp_flush_ready(lv_disp_drv_t * disp_drv)
{
    disp_drv->buffer->flushing = 0;
 8013cac:	6842      	ldr	r2, [r0, #4]
 8013cae:	7e13      	ldrb	r3, [r2, #24]
 8013cb0:	f36f 0300 	bfc	r3, #0, #1
 8013cb4:	7613      	strb	r3, [r2, #24]
 8013cb6:	4770      	bx	lr

08013cb8 <lv_disp_get_buf>:
 * @return pointer to the internal buffers
 */
lv_disp_buf_t * lv_disp_get_buf(lv_disp_t * disp)
{
    return disp->driver.buffer;
}
 8013cb8:	6840      	ldr	r0, [r0, #4]
 8013cba:	4770      	bx	lr

08013cbc <lv_disp_is_double_buf>:
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_double_buf(lv_disp_t * disp)
{
    if(disp->driver.buffer->buf1 && disp->driver.buffer->buf2)
 8013cbc:	6843      	ldr	r3, [r0, #4]
 8013cbe:	6818      	ldr	r0, [r3, #0]
 8013cc0:	b118      	cbz	r0, 8013cca <lv_disp_is_double_buf+0xe>
 8013cc2:	6858      	ldr	r0, [r3, #4]
 8013cc4:	3000      	adds	r0, #0
 8013cc6:	bf18      	it	ne
 8013cc8:	2001      	movne	r0, #1
        return true;
    else
        return false;
}
 8013cca:	4770      	bx	lr

08013ccc <lv_disp_is_true_double_buf>:
 * `size` is screen sized)
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_true_double_buf(lv_disp_t * disp)
{
 8013ccc:	b508      	push	{r3, lr}
 8013cce:	4602      	mov	r2, r0
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;

    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
 8013cd0:	f7ff fff4 	bl	8013cbc <lv_disp_is_double_buf>
 8013cd4:	b140      	cbz	r0, 8013ce8 <lv_disp_is_true_double_buf+0x1c>
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;
 8013cd6:	8853      	ldrh	r3, [r2, #2]
 8013cd8:	8810      	ldrh	r0, [r2, #0]
 8013cda:	fb10 f003 	smulbb	r0, r0, r3
    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
 8013cde:	6853      	ldr	r3, [r2, #4]
 8013ce0:	68db      	ldr	r3, [r3, #12]
 8013ce2:	1ac3      	subs	r3, r0, r3
 8013ce4:	4258      	negs	r0, r3
 8013ce6:	4158      	adcs	r0, r3
        return true;
    } else {
        return false;
    }
}
 8013ce8:	bd08      	pop	{r3, pc}
	...

08013cec <lv_indev_get_next>:
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
    if(indev == NULL)
 8013cec:	4601      	mov	r1, r0
        return lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 8013cee:	4803      	ldr	r0, [pc, #12]	; (8013cfc <lv_indev_get_next+0x10>)
    if(indev == NULL)
 8013cf0:	b909      	cbnz	r1, 8013cf6 <lv_indev_get_next+0xa>
        return lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 8013cf2:	f000 ba81 	b.w	80141f8 <lv_ll_get_head>
    else
        return lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
 8013cf6:	f000 ba85 	b.w	8014204 <lv_ll_get_next>
 8013cfa:	bf00      	nop
 8013cfc:	2000c5dc 	.word	0x2000c5dc

08013d00 <lv_tick_inc>:
 * You have to call this function periodically
 * @param tick_period the call period of this function in milliseconds
 */
LV_ATTRIBUTE_TICK_INC void lv_tick_inc(uint32_t tick_period)
{
    tick_irq_flag = 0;
 8013d00:	4b03      	ldr	r3, [pc, #12]	; (8013d10 <lv_tick_inc+0x10>)
 8013d02:	2200      	movs	r2, #0
 8013d04:	701a      	strb	r2, [r3, #0]
    sys_time += tick_period;
 8013d06:	4a03      	ldr	r2, [pc, #12]	; (8013d14 <lv_tick_inc+0x14>)
 8013d08:	6813      	ldr	r3, [r2, #0]
 8013d0a:	4418      	add	r0, r3
 8013d0c:	6010      	str	r0, [r2, #0]
 8013d0e:	4770      	bx	lr
 8013d10:	20006004 	.word	0x20006004
 8013d14:	20006000 	.word	0x20006000

08013d18 <lv_tick_get>:
uint32_t lv_tick_get(void)
{
#if LV_TICK_CUSTOM == 0
    uint32_t result;
    do {
        tick_irq_flag = 1;
 8013d18:	4b04      	ldr	r3, [pc, #16]	; (8013d2c <lv_tick_get+0x14>)
 8013d1a:	f04f 0101 	mov.w	r1, #1
 8013d1e:	7019      	strb	r1, [r3, #0]
        result        = sys_time;
    } while(!tick_irq_flag); /*'lv_tick_inc()' clears this flag which can be in an interrupt.
 8013d20:	781a      	ldrb	r2, [r3, #0]
 8013d22:	2a00      	cmp	r2, #0
 8013d24:	d0fb      	beq.n	8013d1e <lv_tick_get+0x6>

    return result;
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
 8013d26:	4b02      	ldr	r3, [pc, #8]	; (8013d30 <lv_tick_get+0x18>)
 8013d28:	6818      	ldr	r0, [r3, #0]
 8013d2a:	4770      	bx	lr
 8013d2c:	20006004 	.word	0x20006004
 8013d30:	20006000 	.word	0x20006000

08013d34 <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of systick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
 8013d34:	b510      	push	{r4, lr}
 8013d36:	4604      	mov	r4, r0
    uint32_t act_time = lv_tick_get();
 8013d38:	f7ff ffee 	bl	8013d18 <lv_tick_get>
        prev_tick = UINT32_MAX - prev_tick + 1;
        prev_tick += act_time;
    }

    return prev_tick;
}
 8013d3c:	1b00      	subs	r0, r0, r4
 8013d3e:	bd10      	pop	{r4, pc}

08013d40 <lv_anim_path_linear>:
 */
lv_anim_value_t lv_anim_path_linear(const lv_anim_t * a)
{
    /*Calculate the current step*/
    uint32_t step;
    if(a->time == a->act_time) {
 8013d40:	f9b0 301a 	ldrsh.w	r3, [r0, #26]
 8013d44:	8b02      	ldrh	r2, [r0, #24]
 8013d46:	429a      	cmp	r2, r3
        step = LV_ANIM_RESOLUTION; /*Use the last value if the time fully elapsed*/
    } else {
        step = ((int32_t)a->act_time * LV_ANIM_RESOLUTION) / a->time;
 8013d48:	bf1c      	itt	ne
 8013d4a:	029b      	lslne	r3, r3, #10
 8013d4c:	fb93 f3f2 	sdivne	r3, r3, r2
    }

    /* Get the new value which will be proportional to `step`
     * and the `start` and `end` values*/
    int32_t new_value;
    new_value = (int32_t)step * (a->end - a->start);
 8013d50:	6902      	ldr	r2, [r0, #16]
 8013d52:	6940      	ldr	r0, [r0, #20]
 8013d54:	bf08      	it	eq
 8013d56:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8013d5a:	1a80      	subs	r0, r0, r2
 8013d5c:	4343      	muls	r3, r0
    new_value = new_value >> LV_ANIM_RES_SHIFT;
    new_value += a->start;
 8013d5e:	eb02 23a3 	add.w	r3, r2, r3, asr #10

    return (lv_anim_value_t)new_value;
}
 8013d62:	b218      	sxth	r0, r3
 8013d64:	4770      	bx	lr
	...

08013d68 <anim_task>:
/**
 * Periodically handle the animations.
 * @param param unused
 */
static void anim_task(lv_task_t * param)
{
 8013d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    (void)param;

    lv_anim_t * a;
    LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a)
 8013d6c:	4844      	ldr	r0, [pc, #272]	; (8013e80 <anim_task+0x118>)
 8013d6e:	4c44      	ldr	r4, [pc, #272]	; (8013e80 <anim_task+0x118>)
{
 8013d70:	b08a      	sub	sp, #40	; 0x28
    LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a)
 8013d72:	f000 fa41 	bl	80141f8 <lv_ll_get_head>
 8013d76:	b988      	cbnz	r0, 8013d9c <anim_task+0x34>
    {
        a->has_run = 0;
    }

    uint32_t elaps = lv_tick_elaps(last_task_run);
 8013d78:	4d42      	ldr	r5, [pc, #264]	; (8013e84 <anim_task+0x11c>)
    while(a != NULL) {
        /*It can be set by `lv_anim_del()` typically in `end_cb`. If set then an animation delete
         * happened in `anim_ready_handler` which could make this linked list reading corrupt
         * because the list is changed meanwhile
         */
        anim_list_changed = false;
 8013d7a:	4e43      	ldr	r6, [pc, #268]	; (8013e88 <anim_task+0x120>)
    uint32_t elaps = lv_tick_elaps(last_task_run);
 8013d7c:	6828      	ldr	r0, [r5, #0]
        /* If the linked list changed due to anim. delete then it's not safe to continue
         * the reading of the list from here -> start from the head*/
        if(anim_list_changed)
            a = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
        else
            a = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8013d7e:	4f40      	ldr	r7, [pc, #256]	; (8013e80 <anim_task+0x118>)
    uint32_t elaps = lv_tick_elaps(last_task_run);
 8013d80:	f7ff ffd8 	bl	8013d34 <lv_tick_elaps>
 8013d84:	4680      	mov	r8, r0
    a = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8013d86:	483e      	ldr	r0, [pc, #248]	; (8013e80 <anim_task+0x118>)
 8013d88:	f000 fa36 	bl	80141f8 <lv_ll_get_head>
 8013d8c:	4604      	mov	r4, r0
    while(a != NULL) {
 8013d8e:	b984      	cbnz	r4, 8013db2 <anim_task+0x4a>
    }

    last_task_run = lv_tick_get();
 8013d90:	f7ff ffc2 	bl	8013d18 <lv_tick_get>
 8013d94:	6028      	str	r0, [r5, #0]
}
 8013d96:	b00a      	add	sp, #40	; 0x28
 8013d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        a->has_run = 0;
 8013d9c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8013da0:	f36f 03c3 	bfc	r3, #3, #1
 8013da4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a)
 8013da8:	4601      	mov	r1, r0
 8013daa:	4620      	mov	r0, r4
 8013dac:	f000 fa2a 	bl	8014204 <lv_ll_get_next>
 8013db0:	e7e1      	b.n	8013d76 <anim_task+0xe>
        anim_list_changed = false;
 8013db2:	2300      	movs	r3, #0
 8013db4:	7033      	strb	r3, [r6, #0]
        if(!a->has_run) {
 8013db6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8013dba:	0718      	lsls	r0, r3, #28
 8013dbc:	d45b      	bmi.n	8013e76 <anim_task+0x10e>
            a->has_run = 1; /*The list readying might be reseted so need to know which anim has run already*/
 8013dbe:	f043 0308 	orr.w	r3, r3, #8
 8013dc2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
            a->act_time += elaps;
 8013dc6:	8b63      	ldrh	r3, [r4, #26]
 8013dc8:	4443      	add	r3, r8
 8013dca:	b21b      	sxth	r3, r3
            if(a->act_time >= 0) {
 8013dcc:	2b00      	cmp	r3, #0
            a->act_time += elaps;
 8013dce:	8363      	strh	r3, [r4, #26]
            if(a->act_time >= 0) {
 8013dd0:	db51      	blt.n	8013e76 <anim_task+0x10e>
                if(a->act_time > a->time) a->act_time = a->time;
 8013dd2:	8b22      	ldrh	r2, [r4, #24]
 8013dd4:	4293      	cmp	r3, r2
 8013dd6:	bfc8      	it	gt
 8013dd8:	8362      	strhgt	r2, [r4, #26]
                new_value = a->path_cb(a);
 8013dda:	68a3      	ldr	r3, [r4, #8]
 8013ddc:	4620      	mov	r0, r4
 8013dde:	4798      	blx	r3
                if(a->exec_cb) a->exec_cb(a->var, new_value);
 8013de0:	6863      	ldr	r3, [r4, #4]
                new_value = a->path_cb(a);
 8013de2:	4601      	mov	r1, r0
                if(a->exec_cb) a->exec_cb(a->var, new_value);
 8013de4:	b10b      	cbz	r3, 8013dea <anim_task+0x82>
 8013de6:	6820      	ldr	r0, [r4, #0]
 8013de8:	4798      	blx	r3
                if(a->act_time >= a->time) {
 8013dea:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
 8013dee:	8b23      	ldrh	r3, [r4, #24]
 8013df0:	429a      	cmp	r2, r3
 8013df2:	db20      	blt.n	8013e36 <anim_task+0xce>
{

    /*Delete the animation if
     * - no repeat and no play back (simple one shot animation)
     * - no repeat, play back is enabled and play back is ready */
    if((a->repeat == 0 && a->playback == 0) || (a->repeat == 0 && a->playback == 1 && a->playback_now == 1)) {
 8013df4:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8013df8:	0799      	lsls	r1, r3, #30
 8013dfa:	d003      	beq.n	8013e04 <anim_task+0x9c>
 8013dfc:	f003 0207 	and.w	r2, r3, #7
 8013e00:	2a05      	cmp	r2, #5
 8013e02:	d11f      	bne.n	8013e44 <anim_task+0xdc>

        /*Create copy from the animation and delete the animation from the list.
         * This way the `ready_cb` will see the animations like it's animation is ready deleted*/
        lv_anim_t a_tmp;
        memcpy(&a_tmp, a, sizeof(lv_anim_t));
 8013e04:	4623      	mov	r3, r4
 8013e06:	46ee      	mov	lr, sp
 8013e08:	f104 0c28 	add.w	ip, r4, #40	; 0x28
 8013e0c:	6818      	ldr	r0, [r3, #0]
 8013e0e:	6859      	ldr	r1, [r3, #4]
 8013e10:	4672      	mov	r2, lr
 8013e12:	c203      	stmia	r2!, {r0, r1}
 8013e14:	3308      	adds	r3, #8
 8013e16:	4563      	cmp	r3, ip
 8013e18:	4696      	mov	lr, r2
 8013e1a:	d1f7      	bne.n	8013e0c <anim_task+0xa4>
        lv_ll_rem(&LV_GC_ROOT(_lv_anim_ll), a);
 8013e1c:	4621      	mov	r1, r4
 8013e1e:	4638      	mov	r0, r7
 8013e20:	f000 fa29 	bl	8014276 <lv_ll_rem>
        lv_mem_free(a);
 8013e24:	4620      	mov	r0, r4
 8013e26:	f000 fb65 	bl	80144f4 <lv_mem_free>
        anim_list_changed = true;
 8013e2a:	2301      	movs	r3, #1
 8013e2c:	7033      	strb	r3, [r6, #0]

        /* Call the callback function at the end*/
        if(a_tmp.ready_cb != NULL) a_tmp.ready_cb(&a_tmp);
 8013e2e:	9b03      	ldr	r3, [sp, #12]
 8013e30:	b10b      	cbz	r3, 8013e36 <anim_task+0xce>
 8013e32:	4668      	mov	r0, sp
 8013e34:	4798      	blx	r3
        if(anim_list_changed)
 8013e36:	7833      	ldrb	r3, [r6, #0]
 8013e38:	b1eb      	cbz	r3, 8013e76 <anim_task+0x10e>
            a = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8013e3a:	4638      	mov	r0, r7
 8013e3c:	f000 f9dc 	bl	80141f8 <lv_ll_get_head>
            a = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8013e40:	4604      	mov	r4, r0
 8013e42:	e7a4      	b.n	8013d8e <anim_task+0x26>
    }
    /*If the animation is not deleted then restart it*/
    else {
        a->act_time = -a->repeat_pause; /*Restart the animation*/
 8013e44:	8be2      	ldrh	r2, [r4, #30]
 8013e46:	4252      	negs	r2, r2
 8013e48:	8362      	strh	r2, [r4, #26]
        /*Swap the start and end values in play back mode*/
        if(a->playback != 0) {
 8013e4a:	07da      	lsls	r2, r3, #31
 8013e4c:	d5f3      	bpl.n	8013e36 <anim_task+0xce>
            /*If now turning back use the 'playback_pause*/
            if(a->playback_now == 0) a->act_time = -a->playback_pause;
 8013e4e:	f013 0304 	ands.w	r3, r3, #4
 8013e52:	bf02      	ittt	eq
 8013e54:	8ba2      	ldrheq	r2, [r4, #28]
 8013e56:	4252      	negeq	r2, r2
 8013e58:	8362      	strheq	r2, [r4, #26]

            /*Toggle the play back state*/
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 8013e5a:	fab3 f383 	clz	r3, r3
 8013e5e:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8013e62:	095b      	lsrs	r3, r3, #5
 8013e64:	f363 0282 	bfi	r2, r3, #2, #1
 8013e68:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
            /*Swap the start and end values*/
            int32_t tmp;
            tmp      = a->start;
 8013e6c:	6923      	ldr	r3, [r4, #16]
            a->start = a->end;
 8013e6e:	6962      	ldr	r2, [r4, #20]
 8013e70:	6122      	str	r2, [r4, #16]
            a->end   = tmp;
 8013e72:	6163      	str	r3, [r4, #20]
 8013e74:	e7df      	b.n	8013e36 <anim_task+0xce>
            a = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8013e76:	4621      	mov	r1, r4
 8013e78:	4638      	mov	r0, r7
 8013e7a:	f000 f9c3 	bl	8014204 <lv_ll_get_next>
 8013e7e:	e7df      	b.n	8013e40 <anim_task+0xd8>
 8013e80:	2000c618 	.word	0x2000c618
 8013e84:	20006008 	.word	0x20006008
 8013e88:	20006005 	.word	0x20006005

08013e8c <lv_anim_core_init>:
{
 8013e8c:	b510      	push	{r4, lr}
    lv_ll_init(&LV_GC_ROOT(_lv_anim_ll), sizeof(lv_anim_t));
 8013e8e:	2128      	movs	r1, #40	; 0x28
 8013e90:	4807      	ldr	r0, [pc, #28]	; (8013eb0 <lv_anim_core_init+0x24>)
 8013e92:	f000 f96b 	bl	801416c <lv_ll_init>
    last_task_run = lv_tick_get();
 8013e96:	f7ff ff3f 	bl	8013d18 <lv_tick_get>
 8013e9a:	4b06      	ldr	r3, [pc, #24]	; (8013eb4 <lv_anim_core_init+0x28>)
    lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, NULL);
 8013e9c:	2203      	movs	r2, #3
    last_task_run = lv_tick_get();
 8013e9e:	6018      	str	r0, [r3, #0]
    lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, NULL);
 8013ea0:	211e      	movs	r1, #30
 8013ea2:	2300      	movs	r3, #0
 8013ea4:	4804      	ldr	r0, [pc, #16]	; (8013eb8 <lv_anim_core_init+0x2c>)
}
 8013ea6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, NULL);
 8013eaa:	f000 bcb3 	b.w	8014814 <lv_task_create>
 8013eae:	bf00      	nop
 8013eb0:	2000c618 	.word	0x2000c618
 8013eb4:	20006008 	.word	0x20006008
 8013eb8:	08013d69 	.word	0x08013d69

08013ebc <lv_anim_del>:
{
 8013ebc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ec0:	4680      	mov	r8, r0
    a        = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8013ec2:	4813      	ldr	r0, [pc, #76]	; (8013f10 <lv_anim_del+0x54>)
        a_next = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8013ec4:	4f12      	ldr	r7, [pc, #72]	; (8013f10 <lv_anim_del+0x54>)
            anim_list_changed = true; /*Read by `anim_task`. It need to know if a delete occurred in
 8013ec6:	f8df 904c 	ldr.w	r9, [pc, #76]	; 8013f14 <lv_anim_del+0x58>
{
 8013eca:	460e      	mov	r6, r1
    a        = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8013ecc:	f000 f994 	bl	80141f8 <lv_ll_get_head>
    bool del = false;
 8013ed0:	2500      	movs	r5, #0
    a        = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8013ed2:	4604      	mov	r4, r0
            anim_list_changed = true; /*Read by `anim_task`. It need to know if a delete occurred in
 8013ed4:	f04f 0a01 	mov.w	sl, #1
    while(a != NULL) {
 8013ed8:	b914      	cbnz	r4, 8013ee0 <lv_anim_del+0x24>
}
 8013eda:	4628      	mov	r0, r5
 8013edc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        a_next = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8013ee0:	4621      	mov	r1, r4
 8013ee2:	4638      	mov	r0, r7
 8013ee4:	f000 f98e 	bl	8014204 <lv_ll_get_next>
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 8013ee8:	6823      	ldr	r3, [r4, #0]
 8013eea:	4543      	cmp	r3, r8
        a_next = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8013eec:	4683      	mov	fp, r0
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 8013eee:	d10d      	bne.n	8013f0c <lv_anim_del+0x50>
 8013ef0:	6863      	ldr	r3, [r4, #4]
 8013ef2:	42b3      	cmp	r3, r6
 8013ef4:	d000      	beq.n	8013ef8 <lv_anim_del+0x3c>
 8013ef6:	b94e      	cbnz	r6, 8013f0c <lv_anim_del+0x50>
            lv_ll_rem(&LV_GC_ROOT(_lv_anim_ll), a);
 8013ef8:	4621      	mov	r1, r4
 8013efa:	4638      	mov	r0, r7
 8013efc:	f000 f9bb 	bl	8014276 <lv_ll_rem>
            lv_mem_free(a);
 8013f00:	4620      	mov	r0, r4
 8013f02:	f000 faf7 	bl	80144f4 <lv_mem_free>
            del = true;
 8013f06:	2501      	movs	r5, #1
            anim_list_changed = true; /*Read by `anim_task`. It need to know if a delete occurred in
 8013f08:	f889 a000 	strb.w	sl, [r9]
            del = true;
 8013f0c:	465c      	mov	r4, fp
 8013f0e:	e7e3      	b.n	8013ed8 <lv_anim_del+0x1c>
 8013f10:	2000c618 	.word	0x2000c618
 8013f14:	20006005 	.word	0x20006005

08013f18 <lv_anim_create>:
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*fp == NULL would delete all animations of var*/
 8013f18:	6841      	ldr	r1, [r0, #4]
{
 8013f1a:	b510      	push	{r4, lr}
 8013f1c:	4604      	mov	r4, r0
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*fp == NULL would delete all animations of var*/
 8013f1e:	b111      	cbz	r1, 8013f26 <lv_anim_create+0xe>
 8013f20:	6800      	ldr	r0, [r0, #0]
 8013f22:	f7ff ffcb 	bl	8013ebc <lv_anim_del>
    lv_anim_t * new_anim = lv_ll_ins_head(&LV_GC_ROOT(_lv_anim_ll));
 8013f26:	480f      	ldr	r0, [pc, #60]	; (8013f64 <lv_anim_create+0x4c>)
 8013f28:	f000 f92a 	bl	8014180 <lv_ll_ins_head>
    lv_mem_assert(new_anim);
 8013f2c:	b900      	cbnz	r0, 8013f30 <lv_anim_create+0x18>
 8013f2e:	e7fe      	b.n	8013f2e <lv_anim_create+0x16>
    a->playback_now = 0;
 8013f30:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8013f34:	f36f 0382 	bfc	r3, #2, #1
 8013f38:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    memcpy(new_anim, a, sizeof(lv_anim_t));
 8013f3c:	f104 0228 	add.w	r2, r4, #40	; 0x28
 8013f40:	4603      	mov	r3, r0
 8013f42:	f854 1b04 	ldr.w	r1, [r4], #4
 8013f46:	f843 1b04 	str.w	r1, [r3], #4
 8013f4a:	4294      	cmp	r4, r2
 8013f4c:	d1f9      	bne.n	8013f42 <lv_anim_create+0x2a>
    if(new_anim->exec_cb) new_anim->exec_cb(new_anim->var, new_anim->start);
 8013f4e:	6843      	ldr	r3, [r0, #4]
 8013f50:	b11b      	cbz	r3, 8013f5a <lv_anim_create+0x42>
 8013f52:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
 8013f56:	6800      	ldr	r0, [r0, #0]
 8013f58:	4798      	blx	r3
    anim_list_changed = true;
 8013f5a:	4b03      	ldr	r3, [pc, #12]	; (8013f68 <lv_anim_create+0x50>)
 8013f5c:	2201      	movs	r2, #1
 8013f5e:	701a      	strb	r2, [r3, #0]
 8013f60:	bd10      	pop	{r4, pc}
 8013f62:	bf00      	nop
 8013f64:	2000c618 	.word	0x2000c618
 8013f68:	20006005 	.word	0x20006005

08013f6c <lv_anim_speed_to_time>:
    int32_t d     = LV_MATH_ABS((int32_t)start - end);
 8013f6c:	1a89      	subs	r1, r1, r2
 8013f6e:	2900      	cmp	r1, #0
 8013f70:	bfb8      	it	lt
 8013f72:	4249      	neglt	r1, r1
    uint32_t time = (int32_t)((int32_t)(d * 1000) / speed);
 8013f74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013f78:	434a      	muls	r2, r1
 8013f7a:	fb92 f0f0 	sdiv	r0, r2, r0
    if(time > UINT16_MAX) time = UINT16_MAX;
 8013f7e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8013f82:	da04      	bge.n	8013f8e <lv_anim_speed_to_time+0x22>
        time++;
 8013f84:	2800      	cmp	r0, #0
 8013f86:	bf08      	it	eq
 8013f88:	2001      	moveq	r0, #1
}
 8013f8a:	b280      	uxth	r0, r0
 8013f8c:	4770      	bx	lr
    if(time > UINT16_MAX) time = UINT16_MAX;
 8013f8e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8013f92:	e7fa      	b.n	8013f8a <lv_anim_speed_to_time+0x1e>

08013f94 <lv_area_set>:
 */
void lv_area_set(lv_area_t * area_p, lv_coord_t x1, lv_coord_t y1, lv_coord_t x2, lv_coord_t y2)
{
    area_p->x1 = x1;
    area_p->y1 = y1;
    area_p->x2 = x2;
 8013f94:	8083      	strh	r3, [r0, #4]
    area_p->y2 = y2;
 8013f96:	f9bd 3000 	ldrsh.w	r3, [sp]
    area_p->x1 = x1;
 8013f9a:	8001      	strh	r1, [r0, #0]
    area_p->y1 = y1;
 8013f9c:	8042      	strh	r2, [r0, #2]
    area_p->y2 = y2;
 8013f9e:	80c3      	strh	r3, [r0, #6]
 8013fa0:	4770      	bx	lr

08013fa2 <lv_area_set_width>:
 * @param area_p pointer to an area
 * @param w the new width of the area (w == 1 makes x1 == x2)
 */
void lv_area_set_width(lv_area_t * area_p, lv_coord_t w)
{
    area_p->x2 = area_p->x1 + w - 1;
 8013fa2:	8803      	ldrh	r3, [r0, #0]
 8013fa4:	3901      	subs	r1, #1
 8013fa6:	4419      	add	r1, r3
 8013fa8:	8081      	strh	r1, [r0, #4]
 8013faa:	4770      	bx	lr

08013fac <lv_area_set_height>:
 * @param area_p pointer to an area
 * @param h the new height of the area (h == 1 makes y1 == y2)
 */
void lv_area_set_height(lv_area_t * area_p, lv_coord_t h)
{
    area_p->y2 = area_p->y1 + h - 1;
 8013fac:	8843      	ldrh	r3, [r0, #2]
 8013fae:	3901      	subs	r1, #1
 8013fb0:	4419      	add	r1, r3
 8013fb2:	80c1      	strh	r1, [r0, #6]
 8013fb4:	4770      	bx	lr

08013fb6 <lv_area_set_pos>:
 * @param area_p pointer to an area
 * @param x the new x coordinate of the area
 * @param y the new y coordinate of the area
 */
void lv_area_set_pos(lv_area_t * area_p, lv_coord_t x, lv_coord_t y)
{
 8013fb6:	b570      	push	{r4, r5, r6, lr}
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 8013fb8:	88c3      	ldrh	r3, [r0, #6]
    return area_p->x2 - area_p->x1 + 1;
 8013fba:	8884      	ldrh	r4, [r0, #4]
 8013fbc:	8806      	ldrh	r6, [r0, #0]
    return area_p->y2 - area_p->y1 + 1;
 8013fbe:	8845      	ldrh	r5, [r0, #2]
    lv_coord_t w = lv_area_get_width(area_p);
    lv_coord_t h = lv_area_get_height(area_p);
    area_p->x1   = x;
 8013fc0:	8001      	strh	r1, [r0, #0]
    area_p->y1   = y;
 8013fc2:	8042      	strh	r2, [r0, #2]
    area_p->x2 = area_p->x1 + w - 1;
 8013fc4:	4421      	add	r1, r4
    area_p->y2 = area_p->y1 + h - 1;
 8013fc6:	441a      	add	r2, r3
    area_p->x2 = area_p->x1 + w - 1;
 8013fc8:	1b89      	subs	r1, r1, r6
    area_p->y2 = area_p->y1 + h - 1;
 8013fca:	1b52      	subs	r2, r2, r5
    area_p->x2 = area_p->x1 + w - 1;
 8013fcc:	8081      	strh	r1, [r0, #4]
    area_p->y2 = area_p->y1 + h - 1;
 8013fce:	80c2      	strh	r2, [r0, #6]
 8013fd0:	bd70      	pop	{r4, r5, r6, pc}

08013fd2 <lv_area_get_size>:
 */
uint32_t lv_area_get_size(const lv_area_t * area_p)
{
    uint32_t size;

    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
 8013fd2:	f9b0 3000 	ldrsh.w	r3, [r0]
 8013fd6:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8013fda:	1ad2      	subs	r2, r2, r3
 8013fdc:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8013fe0:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 8013fe4:	1a18      	subs	r0, r3, r0
 8013fe6:	3001      	adds	r0, #1

    return size;
}
 8013fe8:	fb02 0000 	mla	r0, r2, r0, r0
 8013fec:	4770      	bx	lr

08013fee <lv_area_intersect>:
 * @return false: the two area has NO common parts, res_p is invalid
 */
bool lv_area_intersect(lv_area_t * res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
    /* Get the smaller area from 'a1_p' and 'a2_p' */
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 8013fee:	f9b1 3000 	ldrsh.w	r3, [r1]
{
 8013ff2:	b570      	push	{r4, r5, r6, lr}
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 8013ff4:	f9b2 5000 	ldrsh.w	r5, [r2]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 8013ff8:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 8013ffc:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 8014000:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 8014004:	429d      	cmp	r5, r3
 8014006:	bfb8      	it	lt
 8014008:	461d      	movlt	r5, r3
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 801400a:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 801400e:	8005      	strh	r5, [r0, #0]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 8014010:	42a3      	cmp	r3, r4
 8014012:	bfb8      	it	lt
 8014014:	4623      	movlt	r3, r4
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 8014016:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 801401a:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 801401e:	8043      	strh	r3, [r0, #2]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 8014020:	42b4      	cmp	r4, r6
 8014022:	bfa8      	it	ge
 8014024:	4634      	movge	r4, r6
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 8014026:	428a      	cmp	r2, r1
 8014028:	bfa8      	it	ge
 801402a:	460a      	movge	r2, r1

    /*If x1 or y1 greater then x2 or y2 then the areas union is empty*/
    bool union_ok = true;
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
 801402c:	42a5      	cmp	r5, r4
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 801402e:	8084      	strh	r4, [r0, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 8014030:	80c2      	strh	r2, [r0, #6]
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
 8014032:	dc04      	bgt.n	801403e <lv_area_intersect+0x50>
 8014034:	4293      	cmp	r3, r2
 8014036:	bfcc      	ite	gt
 8014038:	2000      	movgt	r0, #0
 801403a:	2001      	movle	r0, #1
 801403c:	bd70      	pop	{r4, r5, r6, pc}
        union_ok = false;
 801403e:	2000      	movs	r0, #0
    }

    return union_ok;
}
 8014040:	bd70      	pop	{r4, r5, r6, pc}

08014042 <lv_area_join>:
 * @param a1_p pointer to the first area
 * @param a2_p pointer to the second area
 */
void lv_area_join(lv_area_t * a_res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
 8014042:	f9b2 3000 	ldrsh.w	r3, [r2]
{
 8014046:	b510      	push	{r4, lr}
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
 8014048:	f9b1 4000 	ldrsh.w	r4, [r1]
 801404c:	42a3      	cmp	r3, r4
 801404e:	bfa8      	it	ge
 8014050:	4623      	movge	r3, r4
 8014052:	8003      	strh	r3, [r0, #0]
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
 8014054:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8014058:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 801405c:	42a3      	cmp	r3, r4
 801405e:	bfa8      	it	ge
 8014060:	4623      	movge	r3, r4
 8014062:	8043      	strh	r3, [r0, #2]
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
 8014064:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 8014068:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 801406c:	42a3      	cmp	r3, r4
 801406e:	bfb8      	it	lt
 8014070:	4623      	movlt	r3, r4
 8014072:	8083      	strh	r3, [r0, #4]
    a_res_p->y2 = LV_MATH_MAX(a1_p->y2, a2_p->y2);
 8014074:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8014078:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 801407c:	4293      	cmp	r3, r2
 801407e:	bfb8      	it	lt
 8014080:	4613      	movlt	r3, r2
 8014082:	80c3      	strh	r3, [r0, #6]
 8014084:	bd10      	pop	{r4, pc}

08014086 <lv_area_is_on>:
 * @param a2_p pointer to an other area
 * @return false: a1_p and a2_p has no common parts
 */
bool lv_area_is_on(const lv_area_t * a1_p, const lv_area_t * a2_p)
{
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
 8014086:	f9b0 2000 	ldrsh.w	r2, [r0]
 801408a:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801408e:	429a      	cmp	r2, r3
 8014090:	dc14      	bgt.n	80140bc <lv_area_is_on+0x36>
 8014092:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8014096:	f9b1 3000 	ldrsh.w	r3, [r1]
 801409a:	429a      	cmp	r2, r3
 801409c:	db0e      	blt.n	80140bc <lv_area_is_on+0x36>
 801409e:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80140a2:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80140a6:	429a      	cmp	r2, r3
 80140a8:	dc08      	bgt.n	80140bc <lv_area_is_on+0x36>
 80140aa:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80140ae:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80140b2:	4298      	cmp	r0, r3
 80140b4:	bfb4      	ite	lt
 80140b6:	2000      	movlt	r0, #0
 80140b8:	2001      	movge	r0, #1
 80140ba:	4770      	bx	lr
        return true;
    } else {
        return false;
 80140bc:	2000      	movs	r0, #0
    }
}
 80140be:	4770      	bx	lr

080140c0 <lv_area_is_in>:
 */
bool lv_area_is_in(const lv_area_t * ain_p, const lv_area_t * aholder_p)
{
    bool is_in = false;

    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 80140c0:	f9b0 2000 	ldrsh.w	r2, [r0]
 80140c4:	f9b1 3000 	ldrsh.w	r3, [r1]
 80140c8:	429a      	cmp	r2, r3
 80140ca:	db14      	blt.n	80140f6 <lv_area_is_in+0x36>
 80140cc:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80140d0:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80140d4:	429a      	cmp	r2, r3
 80140d6:	db0e      	blt.n	80140f6 <lv_area_is_in+0x36>
 80140d8:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80140dc:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80140e0:	429a      	cmp	r2, r3
 80140e2:	dc08      	bgt.n	80140f6 <lv_area_is_in+0x36>
 80140e4:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80140e8:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80140ec:	4298      	cmp	r0, r3
 80140ee:	bfcc      	ite	gt
 80140f0:	2000      	movgt	r0, #0
 80140f2:	2001      	movle	r0, #1
 80140f4:	4770      	bx	lr
    bool is_in = false;
 80140f6:	2000      	movs	r0, #0
       ain_p->y2 <= aholder_p->y2) {
        is_in = true;
    }

    return is_in;
}
 80140f8:	4770      	bx	lr

080140fa <lv_circ_init>:
 * @param tmp point to a variable. It will store temporary data
 * @param radius radius of the circle
 */
void lv_circ_init(lv_point_t * c, lv_coord_t * tmp, lv_coord_t radius)
{
    c->x = radius;
 80140fa:	8002      	strh	r2, [r0, #0]
    c->y = 0;
 80140fc:	2300      	movs	r3, #0
    *tmp = 1 - radius;
 80140fe:	f1c2 0201 	rsb	r2, r2, #1
    c->y = 0;
 8014102:	8043      	strh	r3, [r0, #2]
    *tmp = 1 - radius;
 8014104:	800a      	strh	r2, [r1, #0]
 8014106:	4770      	bx	lr

08014108 <lv_circ_cont>:
 * @param c same as in circ_init
 * @return true if the circle is not ready yet
 */
bool lv_circ_cont(lv_point_t * c)
{
    return c->y <= c->x ? true : false;
 8014108:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801410c:	f9b0 0000 	ldrsh.w	r0, [r0]
}
 8014110:	4282      	cmp	r2, r0
 8014112:	bfcc      	ite	gt
 8014114:	2000      	movgt	r0, #0
 8014116:	2001      	movle	r0, #1
 8014118:	4770      	bx	lr

0801411a <lv_circ_next>:
 * @param c same as in circ_init. The next point stored here.
 * @param tmp same as in circ_init.
 */
void lv_circ_next(lv_point_t * c, lv_coord_t * tmp)
{
    c->y++;
 801411a:	8842      	ldrh	r2, [r0, #2]
 801411c:	3201      	adds	r2, #1
{
 801411e:	b530      	push	{r4, r5, lr}
    c->y++;
 8014120:	b294      	uxth	r4, r2
 8014122:	b225      	sxth	r5, r4
 8014124:	8045      	strh	r5, [r0, #2]

    if(*tmp <= 0) {
 8014126:	f9b1 2000 	ldrsh.w	r2, [r1]
 801412a:	2a00      	cmp	r2, #0
 801412c:	dc04      	bgt.n	8014138 <lv_circ_next+0x1e>
        (*tmp) += 2 * c->y + 1; // Change in decision criterion for y -> y+1
 801412e:	3201      	adds	r2, #1
 8014130:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 8014134:	800a      	strh	r2, [r1, #0]
 8014136:	bd30      	pop	{r4, r5, pc}
    } else {
        c->x--;
 8014138:	8803      	ldrh	r3, [r0, #0]
 801413a:	3b01      	subs	r3, #1
 801413c:	b21b      	sxth	r3, r3
 801413e:	8003      	strh	r3, [r0, #0]
        (*tmp) += 2 * (c->y - c->x) + 1; // Change for y -> y+1, x -> x-1
 8014140:	1aed      	subs	r5, r5, r3
 8014142:	880b      	ldrh	r3, [r1, #0]
 8014144:	3301      	adds	r3, #1
 8014146:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 801414a:	800b      	strh	r3, [r1, #0]
 801414c:	bd30      	pop	{r4, r5, pc}

0801414e <node_set_next.isra.0>:
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
{
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 801414e:	b131      	cbz	r1, 801415e <node_set_next.isra.0+0x10>
 8014150:	6803      	ldr	r3, [r0, #0]

    uint32_t node_p_size = sizeof(lv_ll_node_t *);
    if(next)
 8014152:	b112      	cbz	r2, 801415a <node_set_next.isra.0+0xc>
        memcpy(act + LL_NEXT_P_OFFSET(ll_p), &next, node_p_size);
 8014154:	4419      	add	r1, r3
 8014156:	604a      	str	r2, [r1, #4]
 8014158:	4770      	bx	lr
    else
        memset(act + LL_NEXT_P_OFFSET(ll_p), 0, node_p_size);
 801415a:	3304      	adds	r3, #4
 801415c:	50ca      	str	r2, [r1, r3]
 801415e:	4770      	bx	lr

08014160 <node_set_prev.isra.2>:
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 8014160:	b119      	cbz	r1, 801416a <node_set_prev.isra.2+0xa>
 8014162:	6803      	ldr	r3, [r0, #0]
        memcpy(act + LL_PREV_P_OFFSET(ll_p), &prev, node_p_size);
 8014164:	50ca      	str	r2, [r1, r3]
    if(prev)
 8014166:	b102      	cbz	r2, 801416a <node_set_prev.isra.2+0xa>
 8014168:	4770      	bx	lr
 801416a:	4770      	bx	lr

0801416c <lv_ll_init>:
    ll_p->head = NULL;
 801416c:	2300      	movs	r3, #0
 801416e:	6043      	str	r3, [r0, #4]
    ll_p->tail = NULL;
 8014170:	6083      	str	r3, [r0, #8]
    if(node_size & 0x3) {
 8014172:	078b      	lsls	r3, r1, #30
        node_size = node_size & (~0x3);
 8014174:	bf1c      	itt	ne
 8014176:	f021 0103 	bicne.w	r1, r1, #3
        node_size += 4;
 801417a:	3104      	addne	r1, #4
    ll_p->n_size = node_size;
 801417c:	6001      	str	r1, [r0, #0]
 801417e:	4770      	bx	lr

08014180 <lv_ll_ins_head>:
{
 8014180:	b538      	push	{r3, r4, r5, lr}
 8014182:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 8014184:	6800      	ldr	r0, [r0, #0]
 8014186:	3008      	adds	r0, #8
 8014188:	f000 f97e 	bl	8014488 <lv_mem_alloc>
    if(n_new != NULL) {
 801418c:	4605      	mov	r5, r0
 801418e:	b198      	cbz	r0, 80141b8 <lv_ll_ins_head+0x38>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
 8014190:	4601      	mov	r1, r0
 8014192:	2200      	movs	r2, #0
 8014194:	4620      	mov	r0, r4
 8014196:	f7ff ffe3 	bl	8014160 <node_set_prev.isra.2>
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
 801419a:	4629      	mov	r1, r5
 801419c:	6862      	ldr	r2, [r4, #4]
 801419e:	4620      	mov	r0, r4
 80141a0:	f7ff ffd5 	bl	801414e <node_set_next.isra.0>
        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
 80141a4:	6861      	ldr	r1, [r4, #4]
 80141a6:	b119      	cbz	r1, 80141b0 <lv_ll_ins_head+0x30>
            node_set_prev(ll_p, ll_p->head, n_new);
 80141a8:	462a      	mov	r2, r5
 80141aa:	4620      	mov	r0, r4
 80141ac:	f7ff ffd8 	bl	8014160 <node_set_prev.isra.2>
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 80141b0:	68a3      	ldr	r3, [r4, #8]
        ll_p->head = n_new;      /*Set the new head in the dsc.*/
 80141b2:	6065      	str	r5, [r4, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 80141b4:	b903      	cbnz	r3, 80141b8 <lv_ll_ins_head+0x38>
            ll_p->tail = n_new;
 80141b6:	60a5      	str	r5, [r4, #8]
}
 80141b8:	4628      	mov	r0, r5
 80141ba:	bd38      	pop	{r3, r4, r5, pc}

080141bc <lv_ll_ins_tail>:
{
 80141bc:	b538      	push	{r3, r4, r5, lr}
 80141be:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 80141c0:	6800      	ldr	r0, [r0, #0]
 80141c2:	3008      	adds	r0, #8
 80141c4:	f000 f960 	bl	8014488 <lv_mem_alloc>
    if(n_new == NULL) return NULL;
 80141c8:	4605      	mov	r5, r0
 80141ca:	b198      	cbz	r0, 80141f4 <lv_ll_ins_tail+0x38>
        node_set_next(ll_p, n_new, NULL);       /*No next after the new tail*/
 80141cc:	4601      	mov	r1, r0
 80141ce:	2200      	movs	r2, #0
 80141d0:	4620      	mov	r0, r4
 80141d2:	f7ff ffbc 	bl	801414e <node_set_next.isra.0>
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is tho old tail*/
 80141d6:	4629      	mov	r1, r5
 80141d8:	68a2      	ldr	r2, [r4, #8]
 80141da:	4620      	mov	r0, r4
 80141dc:	f7ff ffc0 	bl	8014160 <node_set_prev.isra.2>
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
 80141e0:	68a1      	ldr	r1, [r4, #8]
 80141e2:	b119      	cbz	r1, 80141ec <lv_ll_ins_tail+0x30>
            node_set_next(ll_p, ll_p->tail, n_new);
 80141e4:	462a      	mov	r2, r5
 80141e6:	4620      	mov	r0, r4
 80141e8:	f7ff ffb1 	bl	801414e <node_set_next.isra.0>
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 80141ec:	6863      	ldr	r3, [r4, #4]
        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
 80141ee:	60a5      	str	r5, [r4, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 80141f0:	b903      	cbnz	r3, 80141f4 <lv_ll_ins_tail+0x38>
            ll_p->head = n_new;
 80141f2:	6065      	str	r5, [r4, #4]
}
 80141f4:	4628      	mov	r0, r5
 80141f6:	bd38      	pop	{r3, r4, r5, pc}

080141f8 <lv_ll_get_head>:
    if(ll_p != NULL) {
 80141f8:	b100      	cbz	r0, 80141fc <lv_ll_get_head+0x4>
        head = ll_p->head;
 80141fa:	6840      	ldr	r0, [r0, #4]
}
 80141fc:	4770      	bx	lr

080141fe <lv_ll_get_tail>:
    if(ll_p != NULL) {
 80141fe:	b100      	cbz	r0, 8014202 <lv_ll_get_tail+0x4>
        tail = ll_p->tail;
 8014200:	6880      	ldr	r0, [r0, #8]
}
 8014202:	4770      	bx	lr

08014204 <lv_ll_get_next>:
    if(ll_p != NULL) {
 8014204:	b110      	cbz	r0, 801420c <lv_ll_get_next+0x8>
        memcpy(&next, n_act_d + LL_NEXT_P_OFFSET(ll_p), sizeof(void *));
 8014206:	6803      	ldr	r3, [r0, #0]
 8014208:	4419      	add	r1, r3
 801420a:	6848      	ldr	r0, [r1, #4]
}
 801420c:	4770      	bx	lr

0801420e <lv_ll_get_prev>:
    if(ll_p != NULL) {
 801420e:	b108      	cbz	r0, 8014214 <lv_ll_get_prev+0x6>
        memcpy(&prev, n_act_d + LL_PREV_P_OFFSET(ll_p), sizeof(void *));
 8014210:	6803      	ldr	r3, [r0, #0]
 8014212:	58c8      	ldr	r0, [r1, r3]
}
 8014214:	4770      	bx	lr

08014216 <lv_ll_ins_prev>:
{
 8014216:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014218:	460c      	mov	r4, r1
    if(NULL == ll_p || NULL == n_act) return NULL;
 801421a:	4605      	mov	r5, r0
 801421c:	b340      	cbz	r0, 8014270 <lv_ll_ins_prev+0x5a>
 801421e:	b341      	cbz	r1, 8014272 <lv_ll_ins_prev+0x5c>
    if(lv_ll_get_head(ll_p) == n_act) {
 8014220:	6843      	ldr	r3, [r0, #4]
 8014222:	4299      	cmp	r1, r3
 8014224:	d103      	bne.n	801422e <lv_ll_ins_prev+0x18>
}
 8014226:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        n_new = lv_ll_ins_head(ll_p);
 801422a:	f7ff bfa9 	b.w	8014180 <lv_ll_ins_head>
        n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 801422e:	6800      	ldr	r0, [r0, #0]
 8014230:	3008      	adds	r0, #8
 8014232:	f000 f929 	bl	8014488 <lv_mem_alloc>
        if(n_new == NULL) return NULL;
 8014236:	4606      	mov	r6, r0
 8014238:	b1c0      	cbz	r0, 801426c <lv_ll_ins_prev+0x56>
        n_prev = lv_ll_get_prev(ll_p, n_act);
 801423a:	4621      	mov	r1, r4
 801423c:	4628      	mov	r0, r5
 801423e:	f7ff ffe6 	bl	801420e <lv_ll_get_prev>
        node_set_next(ll_p, n_prev, n_new);
 8014242:	4632      	mov	r2, r6
 8014244:	4601      	mov	r1, r0
        n_prev = lv_ll_get_prev(ll_p, n_act);
 8014246:	4607      	mov	r7, r0
        node_set_next(ll_p, n_prev, n_new);
 8014248:	4628      	mov	r0, r5
 801424a:	f7ff ff80 	bl	801414e <node_set_next.isra.0>
        node_set_prev(ll_p, n_new, n_prev);
 801424e:	463a      	mov	r2, r7
 8014250:	4631      	mov	r1, r6
 8014252:	4628      	mov	r0, r5
 8014254:	f7ff ff84 	bl	8014160 <node_set_prev.isra.2>
        node_set_prev(ll_p, n_act, n_new);
 8014258:	4632      	mov	r2, r6
 801425a:	4621      	mov	r1, r4
 801425c:	4628      	mov	r0, r5
 801425e:	f7ff ff7f 	bl	8014160 <node_set_prev.isra.2>
        node_set_next(ll_p, n_new, n_act);
 8014262:	4622      	mov	r2, r4
 8014264:	4631      	mov	r1, r6
 8014266:	4628      	mov	r0, r5
 8014268:	f7ff ff71 	bl	801414e <node_set_next.isra.0>
        if(n_new == NULL) return NULL;
 801426c:	4634      	mov	r4, r6
 801426e:	e000      	b.n	8014272 <lv_ll_ins_prev+0x5c>
    if(NULL == ll_p || NULL == n_act) return NULL;
 8014270:	4604      	mov	r4, r0
}
 8014272:	4620      	mov	r0, r4
 8014274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014276 <lv_ll_rem>:
{
 8014276:	b570      	push	{r4, r5, r6, lr}
 8014278:	460a      	mov	r2, r1
    if(ll_p != NULL) {
 801427a:	4604      	mov	r4, r0
 801427c:	b308      	cbz	r0, 80142c2 <lv_ll_rem+0x4c>
    if(lv_ll_get_head(ll_p) == node_p) {
 801427e:	6843      	ldr	r3, [r0, #4]
 8014280:	4299      	cmp	r1, r3
 8014282:	d10e      	bne.n	80142a2 <lv_ll_rem+0x2c>
        ll_p->head = lv_ll_get_next(ll_p, node_p);
 8014284:	4611      	mov	r1, r2
 8014286:	4620      	mov	r0, r4
 8014288:	f7ff ffbc 	bl	8014204 <lv_ll_get_next>
 801428c:	4601      	mov	r1, r0
 801428e:	6060      	str	r0, [r4, #4]
        if(ll_p->head == NULL) {
 8014290:	b908      	cbnz	r0, 8014296 <lv_ll_rem+0x20>
            ll_p->tail = NULL;
 8014292:	60a0      	str	r0, [r4, #8]
 8014294:	bd70      	pop	{r4, r5, r6, pc}
            node_set_prev(ll_p, ll_p->head, NULL);
 8014296:	2200      	movs	r2, #0
        node_set_prev(ll_p, n_next, n_prev);
 8014298:	4620      	mov	r0, r4
}
 801429a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        node_set_prev(ll_p, n_next, n_prev);
 801429e:	f7ff bf5f 	b.w	8014160 <node_set_prev.isra.2>
    } else if(lv_ll_get_tail(ll_p) == node_p) {
 80142a2:	6883      	ldr	r3, [r0, #8]
 80142a4:	4299      	cmp	r1, r3
 80142a6:	d10e      	bne.n	80142c6 <lv_ll_rem+0x50>
        ll_p->tail = lv_ll_get_prev(ll_p, node_p);
 80142a8:	f7ff ffb1 	bl	801420e <lv_ll_get_prev>
 80142ac:	4601      	mov	r1, r0
 80142ae:	60a0      	str	r0, [r4, #8]
        if(ll_p->tail == NULL) {
 80142b0:	b908      	cbnz	r0, 80142b6 <lv_ll_rem+0x40>
            ll_p->head = NULL;
 80142b2:	6060      	str	r0, [r4, #4]
 80142b4:	bd70      	pop	{r4, r5, r6, pc}
            node_set_next(ll_p, ll_p->tail, NULL);
 80142b6:	4620      	mov	r0, r4
 80142b8:	2200      	movs	r2, #0
}
 80142ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            node_set_next(ll_p, ll_p->tail, NULL);
 80142be:	f7ff bf46 	b.w	801414e <node_set_next.isra.0>
    if(lv_ll_get_head(ll_p) == node_p) {
 80142c2:	2900      	cmp	r1, #0
 80142c4:	d0de      	beq.n	8014284 <lv_ll_rem+0xe>
        lv_ll_node_t * n_prev = lv_ll_get_prev(ll_p, node_p);
 80142c6:	4611      	mov	r1, r2
 80142c8:	4620      	mov	r0, r4
 80142ca:	f7ff ffa0 	bl	801420e <lv_ll_get_prev>
 80142ce:	4606      	mov	r6, r0
        lv_ll_node_t * n_next = lv_ll_get_next(ll_p, node_p);
 80142d0:	4611      	mov	r1, r2
 80142d2:	4620      	mov	r0, r4
 80142d4:	f7ff ff96 	bl	8014204 <lv_ll_get_next>
        node_set_next(ll_p, n_prev, n_next);
 80142d8:	4631      	mov	r1, r6
 80142da:	4602      	mov	r2, r0
        lv_ll_node_t * n_next = lv_ll_get_next(ll_p, node_p);
 80142dc:	4605      	mov	r5, r0
        node_set_next(ll_p, n_prev, n_next);
 80142de:	4620      	mov	r0, r4
 80142e0:	f7ff ff35 	bl	801414e <node_set_next.isra.0>
        node_set_prev(ll_p, n_next, n_prev);
 80142e4:	4632      	mov	r2, r6
 80142e6:	4629      	mov	r1, r5
 80142e8:	e7d6      	b.n	8014298 <lv_ll_rem+0x22>

080142ea <lv_ll_chg_list>:
{
 80142ea:	b570      	push	{r4, r5, r6, lr}
 80142ec:	460c      	mov	r4, r1
 80142ee:	461e      	mov	r6, r3
    lv_ll_rem(ll_ori_p, node);
 80142f0:	4611      	mov	r1, r2
{
 80142f2:	4615      	mov	r5, r2
    lv_ll_rem(ll_ori_p, node);
 80142f4:	f7ff ffbf 	bl	8014276 <lv_ll_rem>
    if(head) {
 80142f8:	b1a6      	cbz	r6, 8014324 <lv_ll_chg_list+0x3a>
        node_set_prev(ll_new_p, node, NULL);
 80142fa:	2200      	movs	r2, #0
 80142fc:	4629      	mov	r1, r5
 80142fe:	4620      	mov	r0, r4
 8014300:	f7ff ff2e 	bl	8014160 <node_set_prev.isra.2>
        node_set_next(ll_new_p, node, ll_new_p->head);
 8014304:	4629      	mov	r1, r5
 8014306:	6862      	ldr	r2, [r4, #4]
 8014308:	4620      	mov	r0, r4
 801430a:	f7ff ff20 	bl	801414e <node_set_next.isra.0>
        if(ll_new_p->head != NULL) { /*If there is old head then before it goes the new*/
 801430e:	6861      	ldr	r1, [r4, #4]
 8014310:	b119      	cbz	r1, 801431a <lv_ll_chg_list+0x30>
            node_set_prev(ll_new_p, ll_new_p->head, node);
 8014312:	462a      	mov	r2, r5
 8014314:	4620      	mov	r0, r4
 8014316:	f7ff ff23 	bl	8014160 <node_set_prev.isra.2>
        if(ll_new_p->tail == NULL) { /*If there is no tail (first node) set the tail too*/
 801431a:	68a3      	ldr	r3, [r4, #8]
        ll_new_p->head = node;       /*Set the new head in the dsc.*/
 801431c:	6065      	str	r5, [r4, #4]
        if(ll_new_p->tail == NULL) { /*If there is no tail (first node) set the tail too*/
 801431e:	b9ab      	cbnz	r3, 801434c <lv_ll_chg_list+0x62>
            ll_new_p->tail = node;
 8014320:	60a5      	str	r5, [r4, #8]
 8014322:	bd70      	pop	{r4, r5, r6, pc}
        node_set_prev(ll_new_p, node, ll_new_p->tail);
 8014324:	68a2      	ldr	r2, [r4, #8]
 8014326:	4629      	mov	r1, r5
 8014328:	4620      	mov	r0, r4
 801432a:	f7ff ff19 	bl	8014160 <node_set_prev.isra.2>
        node_set_next(ll_new_p, node, NULL);
 801432e:	4629      	mov	r1, r5
 8014330:	4632      	mov	r2, r6
 8014332:	4620      	mov	r0, r4
 8014334:	f7ff ff0b 	bl	801414e <node_set_next.isra.0>
        if(ll_new_p->tail != NULL) { /*If there is old tail then after it goes the new*/
 8014338:	68a1      	ldr	r1, [r4, #8]
 801433a:	b119      	cbz	r1, 8014344 <lv_ll_chg_list+0x5a>
            node_set_next(ll_new_p, ll_new_p->tail, node);
 801433c:	462a      	mov	r2, r5
 801433e:	4620      	mov	r0, r4
 8014340:	f7ff ff05 	bl	801414e <node_set_next.isra.0>
        if(ll_new_p->head == NULL) { /*If there is no head (first node) set the head too*/
 8014344:	6863      	ldr	r3, [r4, #4]
        ll_new_p->tail = node;       /*Set the new tail in the dsc.*/
 8014346:	60a5      	str	r5, [r4, #8]
        if(ll_new_p->head == NULL) { /*If there is no head (first node) set the head too*/
 8014348:	b903      	cbnz	r3, 801434c <lv_ll_chg_list+0x62>
            ll_new_p->head = node;
 801434a:	6065      	str	r5, [r4, #4]
 801434c:	bd70      	pop	{r4, r5, r6, pc}

0801434e <lv_ll_move_before>:
    if(n_act == n_after) return; /*Can't move before itself*/
 801434e:	4291      	cmp	r1, r2
{
 8014350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014352:	4605      	mov	r5, r0
 8014354:	460c      	mov	r4, r1
 8014356:	4616      	mov	r6, r2
    if(n_act == n_after) return; /*Can't move before itself*/
 8014358:	d042      	beq.n	80143e0 <lv_ll_move_before+0x92>
    if(n_after != NULL)
 801435a:	b132      	cbz	r2, 801436a <lv_ll_move_before+0x1c>
        n_before = lv_ll_get_prev(ll_p, n_after);
 801435c:	4611      	mov	r1, r2
 801435e:	f7ff ff56 	bl	801420e <lv_ll_get_prev>
    if(n_act == n_before) return; /*Already before `n_after`*/
 8014362:	4284      	cmp	r4, r0
        n_before = lv_ll_get_prev(ll_p, n_after);
 8014364:	4607      	mov	r7, r0
    if(n_act == n_before) return; /*Already before `n_after`*/
 8014366:	d121      	bne.n	80143ac <lv_ll_move_before+0x5e>
 8014368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(ll_p != NULL) {
 801436a:	b100      	cbz	r0, 801436e <lv_ll_move_before+0x20>
        tail = ll_p->tail;
 801436c:	6886      	ldr	r6, [r0, #8]
    if(n_act == n_before) return; /*Already before `n_after`*/
 801436e:	42b4      	cmp	r4, r6
 8014370:	d100      	bne.n	8014374 <lv_ll_move_before+0x26>
 8014372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_ll_rem(ll_p, n_act);
 8014374:	4621      	mov	r1, r4
 8014376:	4628      	mov	r0, r5
 8014378:	f7ff ff7d 	bl	8014276 <lv_ll_rem>
    node_set_next(ll_p, n_before, n_act);
 801437c:	4622      	mov	r2, r4
 801437e:	4631      	mov	r1, r6
 8014380:	4628      	mov	r0, r5
 8014382:	f7ff fee4 	bl	801414e <node_set_next.isra.0>
    node_set_prev(ll_p, n_act, n_before);
 8014386:	4632      	mov	r2, r6
 8014388:	4621      	mov	r1, r4
 801438a:	4628      	mov	r0, r5
 801438c:	f7ff fee8 	bl	8014160 <node_set_prev.isra.2>
    node_set_prev(ll_p, n_after, n_act);
 8014390:	4622      	mov	r2, r4
 8014392:	2100      	movs	r1, #0
 8014394:	4628      	mov	r0, r5
 8014396:	f7ff fee3 	bl	8014160 <node_set_prev.isra.2>
    node_set_next(ll_p, n_act, n_after);
 801439a:	2200      	movs	r2, #0
 801439c:	4621      	mov	r1, r4
 801439e:	4628      	mov	r0, r5
 80143a0:	f7ff fed5 	bl	801414e <node_set_next.isra.0>
    if(n_after == NULL) ll_p->tail = n_act;
 80143a4:	60ac      	str	r4, [r5, #8]
    if(n_before == NULL) ll_p->head = n_act;
 80143a6:	b9de      	cbnz	r6, 80143e0 <lv_ll_move_before+0x92>
 80143a8:	606c      	str	r4, [r5, #4]
 80143aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_ll_rem(ll_p, n_act);
 80143ac:	4621      	mov	r1, r4
 80143ae:	4628      	mov	r0, r5
 80143b0:	f7ff ff61 	bl	8014276 <lv_ll_rem>
    node_set_next(ll_p, n_before, n_act);
 80143b4:	4622      	mov	r2, r4
 80143b6:	4639      	mov	r1, r7
 80143b8:	4628      	mov	r0, r5
 80143ba:	f7ff fec8 	bl	801414e <node_set_next.isra.0>
    node_set_prev(ll_p, n_act, n_before);
 80143be:	463a      	mov	r2, r7
 80143c0:	4621      	mov	r1, r4
 80143c2:	4628      	mov	r0, r5
 80143c4:	f7ff fecc 	bl	8014160 <node_set_prev.isra.2>
    node_set_prev(ll_p, n_after, n_act);
 80143c8:	4631      	mov	r1, r6
 80143ca:	4622      	mov	r2, r4
 80143cc:	4628      	mov	r0, r5
 80143ce:	f7ff fec7 	bl	8014160 <node_set_prev.isra.2>
    node_set_next(ll_p, n_act, n_after);
 80143d2:	4632      	mov	r2, r6
 80143d4:	4621      	mov	r1, r4
 80143d6:	4628      	mov	r0, r5
 80143d8:	f7ff feb9 	bl	801414e <node_set_next.isra.0>
 80143dc:	463e      	mov	r6, r7
 80143de:	e7e2      	b.n	80143a6 <lv_ll_move_before+0x58>
 80143e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080143e2 <lv_ll_is_empty>:
    if(ll_p == NULL) return true;
 80143e2:	b130      	cbz	r0, 80143f2 <lv_ll_is_empty+0x10>
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
 80143e4:	6843      	ldr	r3, [r0, #4]
 80143e6:	b933      	cbnz	r3, 80143f6 <lv_ll_is_empty+0x14>
 80143e8:	6880      	ldr	r0, [r0, #8]
 80143ea:	fab0 f080 	clz	r0, r0
 80143ee:	0940      	lsrs	r0, r0, #5
 80143f0:	4770      	bx	lr
    if(ll_p == NULL) return true;
 80143f2:	2001      	movs	r0, #1
 80143f4:	4770      	bx	lr
    return false;
 80143f6:	2000      	movs	r0, #0
}
 80143f8:	4770      	bx	lr
	...

080143fc <ent_get_next>:
 * Give the next entry after 'act_e'
 * @param act_e pointer to an entry
 * @return pointer to an entry after 'act_e'
 */
static lv_mem_ent_t * ent_get_next(lv_mem_ent_t * act_e)
{
 80143fc:	4a07      	ldr	r2, [pc, #28]	; (801441c <ent_get_next+0x20>)
    lv_mem_ent_t * next_e = NULL;

    if(act_e == NULL) { /*NULL means: get the first entry*/
 80143fe:	b908      	cbnz	r0, 8014404 <ent_get_next+0x8>
        next_e = (lv_mem_ent_t *)work_mem;
 8014400:	6810      	ldr	r0, [r2, #0]
 8014402:	4770      	bx	lr
    } else { /*Get the next entry */
        uint8_t * data = &act_e->first_data;
 8014404:	1d03      	adds	r3, r0, #4
        next_e         = (lv_mem_ent_t *)&data[act_e->header.s.d_size];
 8014406:	6800      	ldr	r0, [r0, #0]
 8014408:	eb03 0050 	add.w	r0, r3, r0, lsr #1

        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 801440c:	6813      	ldr	r3, [r2, #0]
 801440e:	1d01      	adds	r1, r0, #4
 8014410:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8014414:	4299      	cmp	r1, r3
 8014416:	bf28      	it	cs
 8014418:	2000      	movcs	r0, #0
    }

    return next_e;
}
 801441a:	4770      	bx	lr
 801441c:	2000600c 	.word	0x2000600c

08014420 <ent_trunc>:
        size = size & (~0x7);
        size += 8;
    }
#else
    /*Round the size up to 4*/
    if(size & 0x3) {
 8014420:	078b      	lsls	r3, r1, #30
        size = size & (~0x3);
 8014422:	bf18      	it	ne
 8014424:	f021 0103 	bicne.w	r1, r1, #3
        size += 4;
    }
#endif

    /*Don't let empty space only for a header without data*/
    if(e->header.s.d_size == size + sizeof(lv_mem_header_t)) {
 8014428:	6803      	ldr	r3, [r0, #0]
        size += 4;
 801442a:	bf18      	it	ne
 801442c:	3104      	addne	r1, #4
    if(e->header.s.d_size == size + sizeof(lv_mem_header_t)) {
 801442e:	f3c3 035e 	ubfx	r3, r3, #1, #31
 8014432:	1d0a      	adds	r2, r1, #4
 8014434:	4293      	cmp	r3, r2
{
 8014436:	b510      	push	{r4, lr}
    if(e->header.s.d_size == size + sizeof(lv_mem_header_t)) {
 8014438:	d011      	beq.n	801445e <ent_trunc+0x3e>
        size = e->header.s.d_size;
    }

    /* Create the new entry after the current if there is space for it */
    if(e->header.s.d_size != size) {
 801443a:	4299      	cmp	r1, r3
 801443c:	d00a      	beq.n	8014454 <ent_trunc+0x34>
        uint8_t * e_data             = &e->first_data;
 801443e:	1d02      	adds	r2, r0, #4
        lv_mem_ent_t * after_new_e   = (lv_mem_ent_t *)&e_data[size];
        after_new_e->header.s.used   = 0;
        after_new_e->header.s.d_size = e->header.s.d_size - size - sizeof(lv_mem_header_t);
 8014440:	3b04      	subs	r3, #4
        after_new_e->header.s.used   = 0;
 8014442:	5c54      	ldrb	r4, [r2, r1]
 8014444:	f36f 0400 	bfc	r4, #0, #1
 8014448:	5454      	strb	r4, [r2, r1]
        after_new_e->header.s.d_size = e->header.s.d_size - size - sizeof(lv_mem_header_t);
 801444a:	5854      	ldr	r4, [r2, r1]
 801444c:	1a5b      	subs	r3, r3, r1
 801444e:	f363 045f 	bfi	r4, r3, #1, #31
 8014452:	5054      	str	r4, [r2, r1]
    }

    /* Set the new size for the original entry */
    e->header.s.d_size = size;
 8014454:	6803      	ldr	r3, [r0, #0]
 8014456:	f361 035f 	bfi	r3, r1, #1, #31
 801445a:	6003      	str	r3, [r0, #0]
 801445c:	bd10      	pop	{r4, pc}
 801445e:	4619      	mov	r1, r3
 8014460:	e7f8      	b.n	8014454 <ent_trunc+0x34>
	...

08014464 <lv_mem_init>:
    work_mem = (uint8_t *)work_mem_int;
 8014464:	4b06      	ldr	r3, [pc, #24]	; (8014480 <lv_mem_init+0x1c>)
 8014466:	4a07      	ldr	r2, [pc, #28]	; (8014484 <lv_mem_init+0x20>)
 8014468:	6013      	str	r3, [r2, #0]
    full->header.s.used = 0;
 801446a:	781a      	ldrb	r2, [r3, #0]
 801446c:	f36f 0200 	bfc	r2, #0, #1
 8014470:	701a      	strb	r2, [r3, #0]
    full->header.s.d_size = LV_MEM_SIZE - sizeof(lv_mem_header_t);
 8014472:	681a      	ldr	r2, [r3, #0]
 8014474:	f644 71fc 	movw	r1, #20476	; 0x4ffc
 8014478:	f361 025f 	bfi	r2, r1, #1, #31
 801447c:	601a      	str	r2, [r3, #0]
 801447e:	4770      	bx	lr
 8014480:	20006010 	.word	0x20006010
 8014484:	2000600c 	.word	0x2000600c

08014488 <lv_mem_alloc>:
{
 8014488:	b538      	push	{r3, r4, r5, lr}
    if(size == 0) {
 801448a:	4605      	mov	r5, r0
 801448c:	b300      	cbz	r0, 80144d0 <lv_mem_alloc+0x48>
    if(size & 0x3) {
 801448e:	0782      	lsls	r2, r0, #30
        size = size & (~0x3);
 8014490:	bf1c      	itt	ne
 8014492:	f020 0503 	bicne.w	r5, r0, #3
        size += 4;
 8014496:	3504      	addne	r5, #4
    lv_mem_ent_t * e = NULL;
 8014498:	2400      	movs	r4, #0
        e = ent_get_next(e);
 801449a:	4620      	mov	r0, r4
 801449c:	f7ff ffae 	bl	80143fc <ent_get_next>
        if(e != NULL) {
 80144a0:	4604      	mov	r4, r0
 80144a2:	b198      	cbz	r0, 80144cc <lv_mem_alloc+0x44>
    if(e->header.s.used == 0 && e->header.s.d_size >= size) {
 80144a4:	7803      	ldrb	r3, [r0, #0]
 80144a6:	07db      	lsls	r3, r3, #31
 80144a8:	d4f7      	bmi.n	801449a <lv_mem_alloc+0x12>
 80144aa:	6803      	ldr	r3, [r0, #0]
 80144ac:	ebb5 0f53 	cmp.w	r5, r3, lsr #1
 80144b0:	d8f3      	bhi.n	801449a <lv_mem_alloc+0x12>
        ent_trunc(e, size),
 80144b2:	4629      	mov	r1, r5
 80144b4:	f7ff ffb4 	bl	8014420 <ent_trunc>
            e->header.s.used = 1;
 80144b8:	7803      	ldrb	r3, [r0, #0]
 80144ba:	f043 0301 	orr.w	r3, r3, #1
 80144be:	f804 3b04 	strb.w	r3, [r4], #4
    if(alloc != NULL) memset(alloc, 0xaa, size);
 80144c2:	462a      	mov	r2, r5
 80144c4:	21aa      	movs	r1, #170	; 0xaa
 80144c6:	4620      	mov	r0, r4
 80144c8:	f005 fb03 	bl	8019ad2 <memset>
}
 80144cc:	4620      	mov	r0, r4
 80144ce:	bd38      	pop	{r3, r4, r5, pc}
        return &zero_mem;
 80144d0:	4c00      	ldr	r4, [pc, #0]	; (80144d4 <lv_mem_alloc+0x4c>)
 80144d2:	e7fb      	b.n	80144cc <lv_mem_alloc+0x44>
 80144d4:	2000b010 	.word	0x2000b010

080144d8 <lv_mem_get_size>:
    if(data == NULL) return 0;
 80144d8:	b140      	cbz	r0, 80144ec <lv_mem_get_size+0x14>
    if(data == &zero_mem) return 0;
 80144da:	4b05      	ldr	r3, [pc, #20]	; (80144f0 <lv_mem_get_size+0x18>)
 80144dc:	4298      	cmp	r0, r3
 80144de:	d004      	beq.n	80144ea <lv_mem_get_size+0x12>
    return e->header.s.d_size;
 80144e0:	f850 0c04 	ldr.w	r0, [r0, #-4]
 80144e4:	f3c0 005e 	ubfx	r0, r0, #1, #31
 80144e8:	4770      	bx	lr
    if(data == NULL) return 0;
 80144ea:	2000      	movs	r0, #0
}
 80144ec:	4770      	bx	lr
 80144ee:	bf00      	nop
 80144f0:	2000b010 	.word	0x2000b010

080144f4 <lv_mem_free>:
    if(data == &zero_mem) return;
 80144f4:	4b13      	ldr	r3, [pc, #76]	; (8014544 <lv_mem_free+0x50>)
 80144f6:	4298      	cmp	r0, r3
{
 80144f8:	b510      	push	{r4, lr}
 80144fa:	4604      	mov	r4, r0
    if(data == &zero_mem) return;
 80144fc:	d011      	beq.n	8014522 <lv_mem_free+0x2e>
    if(data == NULL) return;
 80144fe:	b180      	cbz	r0, 8014522 <lv_mem_free+0x2e>
    memset((void *)data, 0xbb, lv_mem_get_size(data));
 8014500:	f7ff ffea 	bl	80144d8 <lv_mem_get_size>
 8014504:	21bb      	movs	r1, #187	; 0xbb
 8014506:	4602      	mov	r2, r0
 8014508:	4620      	mov	r0, r4
 801450a:	f005 fae2 	bl	8019ad2 <memset>
    e->header.s.used = 0;
 801450e:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8014512:	4620      	mov	r0, r4
 8014514:	f36f 0300 	bfc	r3, #0, #1
 8014518:	f800 3d04 	strb.w	r3, [r0, #-4]!
        e_next = ent_get_next(e_next);
 801451c:	f7ff ff6e 	bl	80143fc <ent_get_next>
    while(e_next != NULL) {
 8014520:	b900      	cbnz	r0, 8014524 <lv_mem_free+0x30>
 8014522:	bd10      	pop	{r4, pc}
        if(e_next->header.s.used == 0) {
 8014524:	7803      	ldrb	r3, [r0, #0]
 8014526:	07db      	lsls	r3, r3, #31
 8014528:	d4fb      	bmi.n	8014522 <lv_mem_free+0x2e>
            e->header.s.d_size += e_next->header.s.d_size + sizeof(e->header);
 801452a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801452e:	6801      	ldr	r1, [r0, #0]
 8014530:	f3c3 025e 	ubfx	r2, r3, #1, #31
 8014534:	3204      	adds	r2, #4
 8014536:	eb02 0251 	add.w	r2, r2, r1, lsr #1
 801453a:	f362 035f 	bfi	r3, r2, #1, #31
 801453e:	f844 3c04 	str.w	r3, [r4, #-4]
 8014542:	e7eb      	b.n	801451c <lv_mem_free+0x28>
 8014544:	2000b010 	.word	0x2000b010

08014548 <lv_mem_realloc>:
{
 8014548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801454a:	460d      	mov	r5, r1
    if(data_p != NULL) {
 801454c:	4604      	mov	r4, r0
 801454e:	b128      	cbz	r0, 801455c <lv_mem_realloc+0x14>
        if(e->header.s.used == 0) {
 8014550:	f810 3c04 	ldrb.w	r3, [r0, #-4]
            data_p = NULL;
 8014554:	f013 0f01 	tst.w	r3, #1
 8014558:	bf08      	it	eq
 801455a:	2400      	moveq	r4, #0
    uint32_t old_size = lv_mem_get_size(data_p);
 801455c:	4620      	mov	r0, r4
 801455e:	f7ff ffbb 	bl	80144d8 <lv_mem_get_size>
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
 8014562:	42a8      	cmp	r0, r5
    uint32_t old_size = lv_mem_get_size(data_p);
 8014564:	4607      	mov	r7, r0
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
 8014566:	d004      	beq.n	8014572 <lv_mem_realloc+0x2a>
    if(new_size < old_size) {
 8014568:	d905      	bls.n	8014576 <lv_mem_realloc+0x2e>
        ent_trunc(e, new_size);
 801456a:	4629      	mov	r1, r5
 801456c:	1f20      	subs	r0, r4, #4
 801456e:	f7ff ff57 	bl	8014420 <ent_trunc>
 8014572:	4626      	mov	r6, r4
 8014574:	e010      	b.n	8014598 <lv_mem_realloc+0x50>
    new_p = lv_mem_alloc(new_size);
 8014576:	4628      	mov	r0, r5
 8014578:	f7ff ff86 	bl	8014488 <lv_mem_alloc>
    if(new_p != NULL && data_p != NULL) {
 801457c:	4606      	mov	r6, r0
 801457e:	b158      	cbz	r0, 8014598 <lv_mem_realloc+0x50>
 8014580:	b154      	cbz	r4, 8014598 <lv_mem_realloc+0x50>
        if(old_size != 0) {
 8014582:	b14f      	cbz	r7, 8014598 <lv_mem_realloc+0x50>
            memcpy(new_p, data_p, LV_MATH_MIN(new_size, old_size));
 8014584:	42af      	cmp	r7, r5
 8014586:	463a      	mov	r2, r7
 8014588:	4621      	mov	r1, r4
 801458a:	bf28      	it	cs
 801458c:	462a      	movcs	r2, r5
 801458e:	f005 fa95 	bl	8019abc <memcpy>
            lv_mem_free(data_p);
 8014592:	4620      	mov	r0, r4
 8014594:	f7ff ffae 	bl	80144f4 <lv_mem_free>
}
 8014598:	4630      	mov	r0, r6
 801459a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801459c <lv_task_core_init>:

/**
 * Init the lv_task module
 */
void lv_task_core_init(void)
{
 801459c:	b508      	push	{r3, lr}
    lv_ll_init(&LV_GC_ROOT(_lv_task_ll), sizeof(lv_task_t));
 801459e:	2114      	movs	r1, #20
 80145a0:	4803      	ldr	r0, [pc, #12]	; (80145b0 <lv_task_core_init+0x14>)
 80145a2:	f7ff fde3 	bl	801416c <lv_ll_init>
 * Enable or disable the whole lv_task handling
 * @param en: true: lv_task handling is running, false: lv_task handling is suspended
 */
void lv_task_enable(bool en)
{
    lv_task_run = en;
 80145a6:	4b03      	ldr	r3, [pc, #12]	; (80145b4 <lv_task_core_init+0x18>)
 80145a8:	2201      	movs	r2, #1
 80145aa:	701a      	strb	r2, [r3, #0]
 80145ac:	bd08      	pop	{r3, pc}
 80145ae:	bf00      	nop
 80145b0:	2000c5d0 	.word	0x2000c5d0
 80145b4:	2000b024 	.word	0x2000b024

080145b8 <lv_task_create_basic>:
{
 80145b8:	b538      	push	{r3, r4, r5, lr}
    tmp = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 80145ba:	481c      	ldr	r0, [pc, #112]	; (801462c <lv_task_create_basic+0x74>)
 80145bc:	f7ff fe1c 	bl	80141f8 <lv_ll_get_head>
    if(NULL == tmp) {
 80145c0:	4601      	mov	r1, r0
 80145c2:	b928      	cbnz	r0, 80145d0 <lv_task_create_basic+0x18>
        new_task = lv_ll_ins_head(&LV_GC_ROOT(_lv_task_ll));
 80145c4:	4819      	ldr	r0, [pc, #100]	; (801462c <lv_task_create_basic+0x74>)
 80145c6:	f7ff fddb 	bl	8014180 <lv_ll_ins_head>
        lv_mem_assert(new_task);
 80145ca:	4604      	mov	r4, r0
 80145cc:	b9b8      	cbnz	r0, 80145fe <lv_task_create_basic+0x46>
 80145ce:	e7fe      	b.n	80145ce <lv_task_create_basic+0x16>
            tmp = lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
 80145d0:	4c16      	ldr	r4, [pc, #88]	; (801462c <lv_task_create_basic+0x74>)
            if(tmp->prio <= DEF_PRIO) {
 80145d2:	7c0b      	ldrb	r3, [r1, #16]
 80145d4:	f003 0307 	and.w	r3, r3, #7
 80145d8:	2b03      	cmp	r3, #3
 80145da:	dc05      	bgt.n	80145e8 <lv_task_create_basic+0x30>
                new_task = lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
 80145dc:	4813      	ldr	r0, [pc, #76]	; (801462c <lv_task_create_basic+0x74>)
 80145de:	f7ff fe1a 	bl	8014216 <lv_ll_ins_prev>
                lv_mem_assert(new_task);
 80145e2:	4604      	mov	r4, r0
 80145e4:	b958      	cbnz	r0, 80145fe <lv_task_create_basic+0x46>
 80145e6:	e7fe      	b.n	80145e6 <lv_task_create_basic+0x2e>
            tmp = lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
 80145e8:	4620      	mov	r0, r4
 80145ea:	f7ff fe0b 	bl	8014204 <lv_ll_get_next>
        } while(tmp != NULL);
 80145ee:	4601      	mov	r1, r0
 80145f0:	2800      	cmp	r0, #0
 80145f2:	d1ee      	bne.n	80145d2 <lv_task_create_basic+0x1a>
            new_task = lv_ll_ins_tail(&LV_GC_ROOT(_lv_task_ll));
 80145f4:	480d      	ldr	r0, [pc, #52]	; (801462c <lv_task_create_basic+0x74>)
 80145f6:	f7ff fde1 	bl	80141bc <lv_ll_ins_tail>
            lv_mem_assert(new_task);
 80145fa:	4604      	mov	r4, r0
 80145fc:	b1a0      	cbz	r0, 8014628 <lv_task_create_basic+0x70>
    new_task->period  = DEF_PERIOD;
 80145fe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8014602:	6023      	str	r3, [r4, #0]
    new_task->prio    = DEF_PRIO;
 8014604:	7c23      	ldrb	r3, [r4, #16]
 8014606:	2203      	movs	r2, #3
    new_task->task_cb = NULL;
 8014608:	2500      	movs	r5, #0
    new_task->prio    = DEF_PRIO;
 801460a:	f362 0302 	bfi	r3, r2, #0, #3
    new_task->once     = 0;
 801460e:	f365 03c3 	bfi	r3, r5, #3, #1
 8014612:	7423      	strb	r3, [r4, #16]
    new_task->task_cb = NULL;
 8014614:	60a5      	str	r5, [r4, #8]
    new_task->last_run = lv_tick_get();
 8014616:	f7ff fb7f 	bl	8013d18 <lv_tick_get>
    task_created = true;
 801461a:	4b05      	ldr	r3, [pc, #20]	; (8014630 <lv_task_create_basic+0x78>)
    new_task->last_run = lv_tick_get();
 801461c:	6060      	str	r0, [r4, #4]
    task_created = true;
 801461e:	2201      	movs	r2, #1
    new_task->user_data = NULL;
 8014620:	60e5      	str	r5, [r4, #12]
    task_created = true;
 8014622:	701a      	strb	r2, [r3, #0]
}
 8014624:	4620      	mov	r0, r4
 8014626:	bd38      	pop	{r3, r4, r5, pc}
 8014628:	e7fe      	b.n	8014628 <lv_task_create_basic+0x70>
 801462a:	bf00      	nop
 801462c:	2000c5d0 	.word	0x2000c5d0
 8014630:	2000b025 	.word	0x2000b025

08014634 <lv_task_del>:
{
 8014634:	b510      	push	{r4, lr}
    lv_ll_rem(&LV_GC_ROOT(_lv_task_ll), task);
 8014636:	4601      	mov	r1, r0
{
 8014638:	4604      	mov	r4, r0
    lv_ll_rem(&LV_GC_ROOT(_lv_task_ll), task);
 801463a:	4807      	ldr	r0, [pc, #28]	; (8014658 <lv_task_del+0x24>)
 801463c:	f7ff fe1b 	bl	8014276 <lv_ll_rem>
    lv_mem_free(task);
 8014640:	4620      	mov	r0, r4
 8014642:	f7ff ff57 	bl	80144f4 <lv_mem_free>
    if(LV_GC_ROOT(_lv_task_act) == task) task_deleted = true; /*The active task was deleted*/
 8014646:	4b05      	ldr	r3, [pc, #20]	; (801465c <lv_task_del+0x28>)
 8014648:	681b      	ldr	r3, [r3, #0]
 801464a:	429c      	cmp	r4, r3
 801464c:	bf02      	ittt	eq
 801464e:	4b04      	ldreq	r3, [pc, #16]	; (8014660 <lv_task_del+0x2c>)
 8014650:	2201      	moveq	r2, #1
 8014652:	701a      	strbeq	r2, [r3, #0]
 8014654:	bd10      	pop	{r4, pc}
 8014656:	bf00      	nop
 8014658:	2000c5d0 	.word	0x2000c5d0
 801465c:	2000c610 	.word	0x2000c610
 8014660:	2000b026 	.word	0x2000b026

08014664 <lv_task_exec>:
 * Execute task if its the priority is appropriate
 * @param task pointer to lv_task
 * @return true: execute, false: not executed
 */
static bool lv_task_exec(lv_task_t * task)
{
 8014664:	b538      	push	{r3, r4, r5, lr}
 8014666:	4604      	mov	r4, r0
    bool exec = false;

    /*Execute if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(task->last_run);
 8014668:	6840      	ldr	r0, [r0, #4]
 801466a:	f7ff fb63 	bl	8013d34 <lv_tick_elaps>
    if(elp >= task->period) {
 801466e:	6823      	ldr	r3, [r4, #0]
 8014670:	4298      	cmp	r0, r3
 8014672:	d315      	bcc.n	80146a0 <lv_task_exec+0x3c>
        task->last_run = lv_tick_get();
 8014674:	f7ff fb50 	bl	8013d18 <lv_tick_get>
        task_deleted   = false;
 8014678:	4d0a      	ldr	r5, [pc, #40]	; (80146a4 <lv_task_exec+0x40>)
        task_created   = false;
 801467a:	490b      	ldr	r1, [pc, #44]	; (80146a8 <lv_task_exec+0x44>)
        task->last_run = lv_tick_get();
 801467c:	6060      	str	r0, [r4, #4]
        task_deleted   = false;
 801467e:	2200      	movs	r2, #0
 8014680:	702a      	strb	r2, [r5, #0]
        task_created   = false;
 8014682:	700a      	strb	r2, [r1, #0]
        if(task->task_cb) task->task_cb(task);
 8014684:	68a2      	ldr	r2, [r4, #8]
 8014686:	b10a      	cbz	r2, 801468c <lv_task_exec+0x28>
 8014688:	4620      	mov	r0, r4
 801468a:	4790      	blx	r2

        /*Delete if it was a one shot lv_task*/
        if(task_deleted == false) { /*The task might be deleted by itself as well*/
 801468c:	7828      	ldrb	r0, [r5, #0]
 801468e:	b930      	cbnz	r0, 801469e <lv_task_exec+0x3a>
            if(task->once != 0) {
 8014690:	7c23      	ldrb	r3, [r4, #16]
 8014692:	071b      	lsls	r3, r3, #28
 8014694:	d502      	bpl.n	801469c <lv_task_exec+0x38>
                lv_task_del(task);
 8014696:	4620      	mov	r0, r4
 8014698:	f7ff ffcc 	bl	8014634 <lv_task_del>
            }
        }
        exec = true;
 801469c:	2001      	movs	r0, #1
    }

    return exec;
}
 801469e:	bd38      	pop	{r3, r4, r5, pc}
    bool exec = false;
 80146a0:	2000      	movs	r0, #0
 80146a2:	bd38      	pop	{r3, r4, r5, pc}
 80146a4:	2000b026 	.word	0x2000b026
 80146a8:	2000b025 	.word	0x2000b025

080146ac <lv_task_handler>:
{
 80146ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(task_handler_mutex) return;
 80146b0:	4d3a      	ldr	r5, [pc, #232]	; (801479c <lv_task_handler+0xf0>)
 80146b2:	782c      	ldrb	r4, [r5, #0]
 80146b4:	b934      	cbnz	r4, 80146c4 <lv_task_handler+0x18>
    task_handler_mutex = true;
 80146b6:	2301      	movs	r3, #1
 80146b8:	702b      	strb	r3, [r5, #0]
    if(lv_task_run == false) {
 80146ba:	4b39      	ldr	r3, [pc, #228]	; (80147a0 <lv_task_handler+0xf4>)
 80146bc:	781b      	ldrb	r3, [r3, #0]
 80146be:	b923      	cbnz	r3, 80146ca <lv_task_handler+0x1e>
        task_handler_mutex = false; /*Release mutex*/
 80146c0:	2300      	movs	r3, #0
 80146c2:	702b      	strb	r3, [r5, #0]
}
 80146c4:	b003      	add	sp, #12
 80146c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    handler_start = lv_tick_get();
 80146ca:	f7ff fb25 	bl	8013d18 <lv_tick_get>
 80146ce:	4b35      	ldr	r3, [pc, #212]	; (80147a4 <lv_task_handler+0xf8>)
        task_deleted             = false;
 80146d0:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 80147c0 <lv_task_handler+0x114>
    handler_start = lv_tick_get();
 80146d4:	6018      	str	r0, [r3, #0]
 80146d6:	469b      	mov	fp, r3
        task_deleted             = false;
 80146d8:	46a1      	mov	r9, r4
        task_created             = false;
 80146da:	4e33      	ldr	r6, [pc, #204]	; (80147a8 <lv_task_handler+0xfc>)
        LV_GC_ROOT(_lv_task_act) = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 80146dc:	4833      	ldr	r0, [pc, #204]	; (80147ac <lv_task_handler+0x100>)
        task_created             = false;
 80146de:	f886 9000 	strb.w	r9, [r6]
        task_deleted             = false;
 80146e2:	f888 9000 	strb.w	r9, [r8]
        LV_GC_ROOT(_lv_task_act) = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 80146e6:	f7ff fd87 	bl	80141f8 <lv_ll_get_head>
 80146ea:	4f31      	ldr	r7, [pc, #196]	; (80147b0 <lv_task_handler+0x104>)
 80146ec:	9601      	str	r6, [sp, #4]
 80146ee:	6038      	str	r0, [r7, #0]
 80146f0:	463e      	mov	r6, r7
        while(LV_GC_ROOT(_lv_task_act)) {
 80146f2:	6831      	ldr	r1, [r6, #0]
 80146f4:	bb29      	cbnz	r1, 8014742 <lv_task_handler+0x96>
    busy_time += lv_tick_elaps(handler_start);
 80146f6:	4c2f      	ldr	r4, [pc, #188]	; (80147b4 <lv_task_handler+0x108>)
 80146f8:	f8db 0000 	ldr.w	r0, [fp]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 80146fc:	4e2e      	ldr	r6, [pc, #184]	; (80147b8 <lv_task_handler+0x10c>)
    busy_time += lv_tick_elaps(handler_start);
 80146fe:	f7ff fb19 	bl	8013d34 <lv_tick_elaps>
 8014702:	6823      	ldr	r3, [r4, #0]
 8014704:	4418      	add	r0, r3
 8014706:	6020      	str	r0, [r4, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 8014708:	6830      	ldr	r0, [r6, #0]
 801470a:	f7ff fb13 	bl	8013d34 <lv_tick_elaps>
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
 801470e:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8014712:	d3d5      	bcc.n	80146c0 <lv_task_handler+0x14>
        idle_last         = (uint32_t)((uint32_t)busy_time * 100) / IDLE_MEAS_PERIOD; /*Calculate the busy percentage*/
 8014714:	6822      	ldr	r2, [r4, #0]
 8014716:	2364      	movs	r3, #100	; 0x64
 8014718:	4353      	muls	r3, r2
 801471a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 801471e:	fbb3 f3f2 	udiv	r3, r3, r2
 8014722:	b2db      	uxtb	r3, r3
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last;                    /*But we need idle time*/
 8014724:	2b64      	cmp	r3, #100	; 0x64
 8014726:	bf98      	it	ls
 8014728:	f1c3 0364 	rsbls	r3, r3, #100	; 0x64
 801472c:	4a23      	ldr	r2, [pc, #140]	; (80147bc <lv_task_handler+0x110>)
 801472e:	bf94      	ite	ls
 8014730:	b2db      	uxtbls	r3, r3
 8014732:	2300      	movhi	r3, #0
 8014734:	7013      	strb	r3, [r2, #0]
        busy_time         = 0;
 8014736:	2300      	movs	r3, #0
 8014738:	6023      	str	r3, [r4, #0]
        idle_period_start = lv_tick_get();
 801473a:	f7ff faed 	bl	8013d18 <lv_tick_get>
 801473e:	6030      	str	r0, [r6, #0]
 8014740:	e7be      	b.n	80146c0 <lv_task_handler+0x14>
            next = lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), LV_GC_ROOT(_lv_task_act));
 8014742:	481a      	ldr	r0, [pc, #104]	; (80147ac <lv_task_handler+0x100>)
 8014744:	f7ff fd5e 	bl	8014204 <lv_ll_get_next>
 8014748:	4682      	mov	sl, r0
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_OFF) {
 801474a:	6830      	ldr	r0, [r6, #0]
 801474c:	7c03      	ldrb	r3, [r0, #16]
 801474e:	f013 0207 	ands.w	r2, r3, #7
 8014752:	d0d0      	beq.n	80146f6 <lv_task_handler+0x4a>
            if(LV_GC_ROOT(_lv_task_act) == task_interrupter) {
 8014754:	4284      	cmp	r4, r0
 8014756:	d103      	bne.n	8014760 <lv_task_handler+0xb4>
                LV_GC_ROOT(_lv_task_act) = next;
 8014758:	f8c6 a000 	str.w	sl, [r6]
                task_interrupter = NULL; /*From this point only task after the interrupter comes, so
 801475c:	2400      	movs	r4, #0
                continue; /*Load the next task*/
 801475e:	e7c8      	b.n	80146f2 <lv_task_handler+0x46>
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_HIGHEST) {
 8014760:	2a05      	cmp	r2, #5
 8014762:	d10c      	bne.n	801477e <lv_task_handler+0xd2>
                lv_task_exec(LV_GC_ROOT(_lv_task_act));
 8014764:	f7ff ff7e 	bl	8014664 <lv_task_exec>
            if(task_deleted) break; /*If a task was deleted then this or the next item might be corrupted*/
 8014768:	f898 3000 	ldrb.w	r3, [r8]
 801476c:	2b00      	cmp	r3, #0
 801476e:	d1c2      	bne.n	80146f6 <lv_task_handler+0x4a>
            if(task_created) break; /*If a task was created then this or the next item might be corrupted*/
 8014770:	9b01      	ldr	r3, [sp, #4]
 8014772:	781b      	ldrb	r3, [r3, #0]
 8014774:	2b00      	cmp	r3, #0
 8014776:	d1be      	bne.n	80146f6 <lv_task_handler+0x4a>
            LV_GC_ROOT(_lv_task_act) = next; /*Load the next task*/
 8014778:	f8c6 a000 	str.w	sl, [r6]
 801477c:	e7b9      	b.n	80146f2 <lv_task_handler+0x46>
            else if(task_interrupter) {
 801477e:	b134      	cbz	r4, 801478e <lv_task_handler+0xe2>
                if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio > task_interrupter->prio) {
 8014780:	7c22      	ldrb	r2, [r4, #16]
 8014782:	f003 0307 	and.w	r3, r3, #7
 8014786:	f002 0207 	and.w	r2, r2, #7
 801478a:	4293      	cmp	r3, r2
 801478c:	ddec      	ble.n	8014768 <lv_task_handler+0xbc>
                if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
 801478e:	f7ff ff69 	bl	8014664 <lv_task_exec>
 8014792:	2800      	cmp	r0, #0
 8014794:	d0e8      	beq.n	8014768 <lv_task_handler+0xbc>
                    task_interrupter = LV_GC_ROOT(_lv_task_act); /*Check all tasks again from the highest priority */
 8014796:	683c      	ldr	r4, [r7, #0]
                    break;
 8014798:	e79f      	b.n	80146da <lv_task_handler+0x2e>
 801479a:	bf00      	nop
 801479c:	2000b027 	.word	0x2000b027
 80147a0:	2000b024 	.word	0x2000b024
 80147a4:	2000b018 	.word	0x2000b018
 80147a8:	2000b025 	.word	0x2000b025
 80147ac:	2000c5d0 	.word	0x2000c5d0
 80147b0:	2000c610 	.word	0x2000c610
 80147b4:	2000b014 	.word	0x2000b014
 80147b8:	2000b020 	.word	0x2000b020
 80147bc:	2000b01c 	.word	0x2000b01c
 80147c0:	2000b026 	.word	0x2000b026

080147c4 <lv_task_set_prio>:
    if(task->prio == prio) return;
 80147c4:	7c03      	ldrb	r3, [r0, #16]
 80147c6:	f003 0307 	and.w	r3, r3, #7
 80147ca:	428b      	cmp	r3, r1
{
 80147cc:	b570      	push	{r4, r5, r6, lr}
 80147ce:	4604      	mov	r4, r0
 80147d0:	460d      	mov	r5, r1
    if(task->prio == prio) return;
 80147d2:	d01b      	beq.n	801480c <lv_task_set_prio+0x48>
    LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i)
 80147d4:	480e      	ldr	r0, [pc, #56]	; (8014810 <lv_task_set_prio+0x4c>)
 80147d6:	4e0e      	ldr	r6, [pc, #56]	; (8014810 <lv_task_set_prio+0x4c>)
 80147d8:	f7ff fd0e 	bl	80141f8 <lv_ll_get_head>
 80147dc:	4602      	mov	r2, r0
 80147de:	b132      	cbz	r2, 80147ee <lv_task_set_prio+0x2a>
        if(i->prio <= prio) {
 80147e0:	7c13      	ldrb	r3, [r2, #16]
 80147e2:	f003 0307 	and.w	r3, r3, #7
 80147e6:	429d      	cmp	r5, r3
 80147e8:	db0a      	blt.n	8014800 <lv_task_set_prio+0x3c>
            if(i != task) lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, i);
 80147ea:	42a2      	cmp	r2, r4
 80147ec:	d003      	beq.n	80147f6 <lv_task_set_prio+0x32>
        lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, NULL);
 80147ee:	4621      	mov	r1, r4
 80147f0:	4807      	ldr	r0, [pc, #28]	; (8014810 <lv_task_set_prio+0x4c>)
 80147f2:	f7ff fdac 	bl	801434e <lv_ll_move_before>
    task->prio = prio;
 80147f6:	7c23      	ldrb	r3, [r4, #16]
 80147f8:	f365 0302 	bfi	r3, r5, #0, #3
 80147fc:	7423      	strb	r3, [r4, #16]
 80147fe:	bd70      	pop	{r4, r5, r6, pc}
    LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i)
 8014800:	4611      	mov	r1, r2
 8014802:	4630      	mov	r0, r6
 8014804:	f7ff fcfe 	bl	8014204 <lv_ll_get_next>
 8014808:	4602      	mov	r2, r0
 801480a:	e7e8      	b.n	80147de <lv_task_set_prio+0x1a>
 801480c:	bd70      	pop	{r4, r5, r6, pc}
 801480e:	bf00      	nop
 8014810:	2000c5d0 	.word	0x2000c5d0

08014814 <lv_task_create>:
{
 8014814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014818:	4680      	mov	r8, r0
 801481a:	460f      	mov	r7, r1
 801481c:	4616      	mov	r6, r2
 801481e:	461d      	mov	r5, r3
    lv_task_t * new_task = lv_task_create_basic();
 8014820:	f7ff feca 	bl	80145b8 <lv_task_create_basic>
    lv_mem_assert(new_task);
 8014824:	4604      	mov	r4, r0
 8014826:	b900      	cbnz	r0, 801482a <lv_task_create+0x16>
 8014828:	e7fe      	b.n	8014828 <lv_task_create+0x14>
    task->task_cb = task_cb;
 801482a:	f8c0 8008 	str.w	r8, [r0, #8]
    task->period = period;
 801482e:	6007      	str	r7, [r0, #0]
    lv_task_set_prio(new_task, prio);
 8014830:	4631      	mov	r1, r6
 8014832:	f7ff ffc7 	bl	80147c4 <lv_task_set_prio>
    new_task->user_data = user_data;
 8014836:	60e5      	str	r5, [r4, #12]
}
 8014838:	4620      	mov	r0, r4
 801483a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801483e <lv_task_ready>:
{
 801483e:	b510      	push	{r4, lr}
 8014840:	4604      	mov	r4, r0
    task->last_run = lv_tick_get() - task->period - 1;
 8014842:	f7ff fa69 	bl	8013d18 <lv_tick_get>
 8014846:	6823      	ldr	r3, [r4, #0]
 8014848:	43db      	mvns	r3, r3
 801484a:	4403      	add	r3, r0
 801484c:	6063      	str	r3, [r4, #4]
 801484e:	bd10      	pop	{r4, pc}

08014850 <lv_txt_utf8_size>:
 * @param str pointer to a character in a string
 * @return length of the UTF-8 character (1,2,3 or 4). O on invalid code
 */
static uint8_t lv_txt_utf8_size(const char * str)
{
    if((str[0] & 0x80) == 0)
 8014850:	7803      	ldrb	r3, [r0, #0]
 8014852:	061a      	lsls	r2, r3, #24
 8014854:	d50e      	bpl.n	8014874 <lv_txt_utf8_size+0x24>
        return 1;
    else if((str[0] & 0xE0) == 0xC0)
 8014856:	f003 02e0 	and.w	r2, r3, #224	; 0xe0
 801485a:	2ac0      	cmp	r2, #192	; 0xc0
 801485c:	d00c      	beq.n	8014878 <lv_txt_utf8_size+0x28>
        return 2;
    else if((str[0] & 0xF0) == 0xE0)
 801485e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8014862:	2ae0      	cmp	r2, #224	; 0xe0
 8014864:	d00a      	beq.n	801487c <lv_txt_utf8_size+0x2c>
        return 3;
    else if((str[0] & 0xF8) == 0xF0)
 8014866:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801486a:	2bf0      	cmp	r3, #240	; 0xf0
        return 4;
 801486c:	bf14      	ite	ne
 801486e:	2001      	movne	r0, #1
 8014870:	2004      	moveq	r0, #4
 8014872:	4770      	bx	lr
    return 1; /*If the char was invalid step tell it's 1 byte long*/
 8014874:	2001      	movs	r0, #1
 8014876:	4770      	bx	lr
        return 2;
 8014878:	2002      	movs	r0, #2
 801487a:	4770      	bx	lr
        return 3;
 801487c:	2003      	movs	r0, #3
}
 801487e:	4770      	bx	lr

08014880 <lv_txt_utf8_next>:
 *          After call it will point to the next UTF-8 char in 'txt'.
 *          NULL to use txt[0] as index
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_next(const char * txt, uint32_t * i)
{
 8014880:	b573      	push	{r0, r1, r4, r5, r6, lr}
     * */

    uint32_t result = 0;

    /*Dummy 'i' pointer is required*/
    uint32_t i_tmp = 0;
 8014882:	2300      	movs	r3, #0
 8014884:	9301      	str	r3, [sp, #4]
    if(i == NULL) i = &i_tmp;
 8014886:	b901      	cbnz	r1, 801488a <lv_txt_utf8_next+0xa>
 8014888:	a901      	add	r1, sp, #4

    /*Normal ASCII*/
    if((txt[*i] & 0x80) == 0) {
 801488a:	680a      	ldr	r2, [r1, #0]
 801488c:	5c83      	ldrb	r3, [r0, r2]
 801488e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8014892:	f102 0401 	add.w	r4, r2, #1
 8014896:	d103      	bne.n	80148a0 <lv_txt_utf8_next+0x20>
        result = txt[*i];
 8014898:	4618      	mov	r0, r3
        (*i)++;
 801489a:	600c      	str	r4, [r1, #0]
        } else {
            (*i)++; /*Not UTF-8 char. Go the next.*/
        }
    }
    return result;
}
 801489c:	b002      	add	sp, #8
 801489e:	bd70      	pop	{r4, r5, r6, pc}
        if((txt[*i] & 0xE0) == 0xC0) {
 80148a0:	f003 05e0 	and.w	r5, r3, #224	; 0xe0
 80148a4:	2dc0      	cmp	r5, #192	; 0xc0
 80148a6:	d110      	bne.n	80148ca <lv_txt_utf8_next+0x4a>
            (*i)++;
 80148a8:	600c      	str	r4, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 80148aa:	5d00      	ldrb	r0, [r0, r4]
 80148ac:	f000 04c0 	and.w	r4, r0, #192	; 0xc0
 80148b0:	2c80      	cmp	r4, #128	; 0x80
 80148b2:	d001      	beq.n	80148b8 <lv_txt_utf8_next+0x38>
    uint32_t result = 0;
 80148b4:	2000      	movs	r0, #0
 80148b6:	e7f1      	b.n	801489c <lv_txt_utf8_next+0x1c>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
 80148b8:	019b      	lsls	r3, r3, #6
 80148ba:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
            result += (txt[*i] & 0x3F);
 80148be:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80148c2:	4418      	add	r0, r3
            (*i)++;
 80148c4:	3202      	adds	r2, #2
            (*i)++;
 80148c6:	600a      	str	r2, [r1, #0]
 80148c8:	e7e8      	b.n	801489c <lv_txt_utf8_next+0x1c>
        else if((txt[*i] & 0xF0) == 0xE0) {
 80148ca:	f003 05f0 	and.w	r5, r3, #240	; 0xf0
 80148ce:	2de0      	cmp	r5, #224	; 0xe0
 80148d0:	d117      	bne.n	8014902 <lv_txt_utf8_next+0x82>
            (*i)++;
 80148d2:	600c      	str	r4, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 80148d4:	5d04      	ldrb	r4, [r0, r4]
 80148d6:	f004 05c0 	and.w	r5, r4, #192	; 0xc0
 80148da:	2d80      	cmp	r5, #128	; 0x80
 80148dc:	d1ea      	bne.n	80148b4 <lv_txt_utf8_next+0x34>
            (*i)++;
 80148de:	1c95      	adds	r5, r2, #2
 80148e0:	600d      	str	r5, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 80148e2:	5d45      	ldrb	r5, [r0, r5]
 80148e4:	f005 00c0 	and.w	r0, r5, #192	; 0xc0
 80148e8:	2880      	cmp	r0, #128	; 0x80
 80148ea:	d1e3      	bne.n	80148b4 <lv_txt_utf8_next+0x34>
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
 80148ec:	0318      	lsls	r0, r3, #12
 80148ee:	b280      	uxth	r0, r0
            result += (txt[*i] & 0x3F);
 80148f0:	f005 053f 	and.w	r5, r5, #63	; 0x3f
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 80148f4:	01a3      	lsls	r3, r4, #6
 80148f6:	4428      	add	r0, r5
 80148f8:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
            result += (txt[*i] & 0x3F);
 80148fc:	4418      	add	r0, r3
            (*i)++;
 80148fe:	3203      	adds	r2, #3
 8014900:	e7e1      	b.n	80148c6 <lv_txt_utf8_next+0x46>
        else if((txt[*i] & 0xF8) == 0xF0) {
 8014902:	f003 05f8 	and.w	r5, r3, #248	; 0xf8
 8014906:	2df0      	cmp	r5, #240	; 0xf0
            (*i)++;
 8014908:	600c      	str	r4, [r1, #0]
        else if((txt[*i] & 0xF8) == 0xF0) {
 801490a:	d1d3      	bne.n	80148b4 <lv_txt_utf8_next+0x34>
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 801490c:	5d04      	ldrb	r4, [r0, r4]
 801490e:	f004 05c0 	and.w	r5, r4, #192	; 0xc0
 8014912:	2d80      	cmp	r5, #128	; 0x80
 8014914:	d1ce      	bne.n	80148b4 <lv_txt_utf8_next+0x34>
            (*i)++;
 8014916:	1c95      	adds	r5, r2, #2
 8014918:	600d      	str	r5, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 801491a:	5d45      	ldrb	r5, [r0, r5]
 801491c:	f005 06c0 	and.w	r6, r5, #192	; 0xc0
 8014920:	2e80      	cmp	r6, #128	; 0x80
 8014922:	d1c7      	bne.n	80148b4 <lv_txt_utf8_next+0x34>
            (*i)++;
 8014924:	1cd6      	adds	r6, r2, #3
 8014926:	600e      	str	r6, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 8014928:	5d86      	ldrb	r6, [r0, r6]
 801492a:	f006 00c0 	and.w	r0, r6, #192	; 0xc0
 801492e:	2880      	cmp	r0, #128	; 0x80
 8014930:	d1c0      	bne.n	80148b4 <lv_txt_utf8_next+0x34>
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 8014932:	049b      	lsls	r3, r3, #18
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 8014934:	0320      	lsls	r0, r4, #12
 8014936:	f400 307c 	and.w	r0, r0, #258048	; 0x3f000
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 801493a:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 801493e:	4303      	orrs	r3, r0
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 8014940:	01a8      	lsls	r0, r5, #6
 8014942:	f400 607c 	and.w	r0, r0, #4032	; 0xfc0
            result += txt[*i] & 0x3F;
 8014946:	f006 063f 	and.w	r6, r6, #63	; 0x3f
 801494a:	4430      	add	r0, r6
 801494c:	4418      	add	r0, r3
            (*i)++;
 801494e:	3204      	adds	r2, #4
 8014950:	e7b9      	b.n	80148c6 <lv_txt_utf8_next+0x46>
	...

08014954 <lv_txt_utf8_get_byte_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param utf8_id character index
 * @return byte index of the 'utf8_id'th letter
 */
static uint32_t lv_txt_utf8_get_byte_id(const char * txt, uint32_t utf8_id)
{
 8014954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t i;
    uint32_t byte_cnt = 0;
 8014958:	2400      	movs	r4, #0
    for(i = 0; i < utf8_id; i++) {
        byte_cnt += lv_txt_encoded_size(&txt[byte_cnt]);
 801495a:	f8df 8020 	ldr.w	r8, [pc, #32]	; 801497c <lv_txt_utf8_get_byte_id+0x28>
{
 801495e:	4607      	mov	r7, r0
 8014960:	460e      	mov	r6, r1
    for(i = 0; i < utf8_id; i++) {
 8014962:	4625      	mov	r5, r4
 8014964:	42b5      	cmp	r5, r6
 8014966:	d102      	bne.n	801496e <lv_txt_utf8_get_byte_id+0x1a>
    }

    return byte_cnt;
}
 8014968:	4620      	mov	r0, r4
 801496a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        byte_cnt += lv_txt_encoded_size(&txt[byte_cnt]);
 801496e:	1938      	adds	r0, r7, r4
 8014970:	f8d8 3000 	ldr.w	r3, [r8]
 8014974:	4798      	blx	r3
    for(i = 0; i < utf8_id; i++) {
 8014976:	3501      	adds	r5, #1
        byte_cnt += lv_txt_encoded_size(&txt[byte_cnt]);
 8014978:	4404      	add	r4, r0
 801497a:	e7f3      	b.n	8014964 <lv_txt_utf8_get_byte_id+0x10>
 801497c:	20001cc4 	.word	0x20001cc4

08014980 <lv_txt_utf8_get_char_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
 8014980:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint32_t i        = 0;
 8014984:	ad02      	add	r5, sp, #8
 8014986:	2400      	movs	r4, #0
 8014988:	f845 4d04 	str.w	r4, [r5, #-4]!
    uint32_t char_cnt = 0;

    while(i < byte_id) {
        lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 801498c:	f8df 8020 	ldr.w	r8, [pc, #32]	; 80149b0 <lv_txt_utf8_get_char_id+0x30>
{
 8014990:	4607      	mov	r7, r0
 8014992:	460e      	mov	r6, r1
    while(i < byte_id) {
 8014994:	9b01      	ldr	r3, [sp, #4]
 8014996:	42b3      	cmp	r3, r6
 8014998:	d303      	bcc.n	80149a2 <lv_txt_utf8_get_char_id+0x22>
        char_cnt++;
    }

    return char_cnt;
}
 801499a:	4620      	mov	r0, r4
 801499c:	b002      	add	sp, #8
 801499e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 80149a2:	4629      	mov	r1, r5
 80149a4:	4638      	mov	r0, r7
 80149a6:	f8d8 3000 	ldr.w	r3, [r8]
 80149aa:	4798      	blx	r3
        char_cnt++;
 80149ac:	3401      	adds	r4, #1
 80149ae:	e7f1      	b.n	8014994 <lv_txt_utf8_get_char_id+0x14>
 80149b0:	20001cbc 	.word	0x20001cbc

080149b4 <lv_txt_utf8_get_length>:
 * E.g.: "ÁBC" is 3 characters (but 4 bytes)
 * @param txt a '\0' terminated char string
 * @return number of characters
 */
static uint32_t lv_txt_utf8_get_length(const char * txt)
{
 80149b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint32_t len = 0;
    uint32_t i   = 0;
 80149b6:	ad02      	add	r5, sp, #8
 80149b8:	2400      	movs	r4, #0
 80149ba:	f845 4d04 	str.w	r4, [r5, #-4]!

    while(txt[i] != '\0') {
        lv_txt_encoded_next(txt, &i);
 80149be:	4f07      	ldr	r7, [pc, #28]	; (80149dc <lv_txt_utf8_get_length+0x28>)
{
 80149c0:	4606      	mov	r6, r0
    while(txt[i] != '\0') {
 80149c2:	9b01      	ldr	r3, [sp, #4]
 80149c4:	5cf3      	ldrb	r3, [r6, r3]
 80149c6:	b913      	cbnz	r3, 80149ce <lv_txt_utf8_get_length+0x1a>
        len++;
    }

    return len;
}
 80149c8:	4620      	mov	r0, r4
 80149ca:	b003      	add	sp, #12
 80149cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_txt_encoded_next(txt, &i);
 80149ce:	4629      	mov	r1, r5
 80149d0:	4630      	mov	r0, r6
 80149d2:	683b      	ldr	r3, [r7, #0]
 80149d4:	4798      	blx	r3
        len++;
 80149d6:	3401      	adds	r4, #1
 80149d8:	e7f3      	b.n	80149c2 <lv_txt_utf8_get_length+0xe>
 80149da:	bf00      	nop
 80149dc:	20001cbc 	.word	0x20001cbc

080149e0 <lv_txt_utf8_prev>:
    (*i)--;
 80149e0:	680b      	ldr	r3, [r1, #0]
{
 80149e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    (*i)--;
 80149e4:	3b01      	subs	r3, #1
        c_size = lv_txt_encoded_size(&txt[*i]);
 80149e6:	4f0e      	ldr	r7, [pc, #56]	; (8014a20 <lv_txt_utf8_prev+0x40>)
    (*i)--;
 80149e8:	600b      	str	r3, [r1, #0]
{
 80149ea:	4606      	mov	r6, r0
 80149ec:	460d      	mov	r5, r1
    (*i)--;
 80149ee:	2404      	movs	r4, #4
        c_size = lv_txt_encoded_size(&txt[*i]);
 80149f0:	6828      	ldr	r0, [r5, #0]
 80149f2:	683b      	ldr	r3, [r7, #0]
 80149f4:	4430      	add	r0, r6
 80149f6:	4798      	blx	r3
 80149f8:	682b      	ldr	r3, [r5, #0]
        if(c_size == 0) {
 80149fa:	b948      	cbnz	r0, 8014a10 <lv_txt_utf8_prev+0x30>
            if(*i != 0)
 80149fc:	b12b      	cbz	r3, 8014a0a <lv_txt_utf8_prev+0x2a>
 80149fe:	3c01      	subs	r4, #1
                (*i)--;
 8014a00:	3b01      	subs	r3, #1
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
 8014a02:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
                (*i)--;
 8014a06:	602b      	str	r3, [r5, #0]
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
 8014a08:	d1f2      	bne.n	80149f0 <lv_txt_utf8_prev+0x10>
 8014a0a:	2000      	movs	r0, #0
}
 8014a0c:	b003      	add	sp, #12
 8014a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t i_tmp  = *i;
 8014a10:	a902      	add	r1, sp, #8
    uint32_t letter = lv_txt_encoded_next(txt, &i_tmp); /*Character found, get it*/
 8014a12:	4630      	mov	r0, r6
    uint32_t i_tmp  = *i;
 8014a14:	f841 3d04 	str.w	r3, [r1, #-4]!
    uint32_t letter = lv_txt_encoded_next(txt, &i_tmp); /*Character found, get it*/
 8014a18:	4b02      	ldr	r3, [pc, #8]	; (8014a24 <lv_txt_utf8_prev+0x44>)
 8014a1a:	681b      	ldr	r3, [r3, #0]
 8014a1c:	4798      	blx	r3
 8014a1e:	e7f5      	b.n	8014a0c <lv_txt_utf8_prev+0x2c>
 8014a20:	20001cc4 	.word	0x20001cc4
 8014a24:	20001cbc 	.word	0x20001cbc

08014a28 <lv_txt_is_cmd>:
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 8014a28:	2923      	cmp	r1, #35	; 0x23
{
 8014a2a:	4602      	mov	r2, r0
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 8014a2c:	d117      	bne.n	8014a5e <lv_txt_is_cmd+0x36>
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
 8014a2e:	7803      	ldrb	r3, [r0, #0]
 8014a30:	b91b      	cbnz	r3, 8014a3a <lv_txt_is_cmd+0x12>
            *state = LV_TXT_CMD_STATE_PAR;
 8014a32:	2301      	movs	r3, #1
 8014a34:	7003      	strb	r3, [r0, #0]
            ret    = true;
 8014a36:	2001      	movs	r0, #1
 8014a38:	e004      	b.n	8014a44 <lv_txt_is_cmd+0x1c>
        else if(*state == LV_TXT_CMD_STATE_PAR) {
 8014a3a:	2b01      	cmp	r3, #1
 8014a3c:	f04f 0000 	mov.w	r0, #0
 8014a40:	d109      	bne.n	8014a56 <lv_txt_is_cmd+0x2e>
            *state = LV_TXT_CMD_STATE_WAIT;
 8014a42:	7010      	strb	r0, [r2, #0]
    if(*state == LV_TXT_CMD_STATE_PAR) {
 8014a44:	7813      	ldrb	r3, [r2, #0]
 8014a46:	2b01      	cmp	r3, #1
 8014a48:	d104      	bne.n	8014a54 <lv_txt_is_cmd+0x2c>
        if(c == ' ') {
 8014a4a:	2920      	cmp	r1, #32
            *state = LV_TXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
 8014a4c:	bf04      	itt	eq
 8014a4e:	2102      	moveq	r1, #2
 8014a50:	7011      	strbeq	r1, [r2, #0]
        ret = true;
 8014a52:	4618      	mov	r0, r3
}
 8014a54:	4770      	bx	lr
        else if(*state == LV_TXT_CMD_STATE_IN) {
 8014a56:	2b02      	cmp	r3, #2
 8014a58:	d1f4      	bne.n	8014a44 <lv_txt_is_cmd+0x1c>
            *state = LV_TXT_CMD_STATE_WAIT;
 8014a5a:	7010      	strb	r0, [r2, #0]
 8014a5c:	e7eb      	b.n	8014a36 <lv_txt_is_cmd+0xe>
    bool ret = false;
 8014a5e:	2000      	movs	r0, #0
 8014a60:	e7f0      	b.n	8014a44 <lv_txt_is_cmd+0x1c>
	...

08014a64 <lv_txt_get_next_line>:
{
 8014a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a68:	b087      	sub	sp, #28
 8014a6a:	460c      	mov	r4, r1
 8014a6c:	9200      	str	r2, [sp, #0]
 8014a6e:	469a      	mov	sl, r3
 8014a70:	f89d b040 	ldrb.w	fp, [sp, #64]	; 0x40
    if(txt == NULL) return 0;
 8014a74:	4607      	mov	r7, r0
 8014a76:	2800      	cmp	r0, #0
 8014a78:	d072      	beq.n	8014b60 <lv_txt_get_next_line+0xfc>
    if(font == NULL) return 0;
 8014a7a:	2900      	cmp	r1, #0
 8014a7c:	d071      	beq.n	8014b62 <lv_txt_get_next_line+0xfe>
    letter_next = lv_txt_encoded_next(txt, &i_next);
 8014a7e:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8014b70 <lv_txt_get_next_line+0x10c>
    uint32_t i                   = 0;
 8014a82:	2500      	movs	r5, #0
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8014a84:	f01b 0f02 	tst.w	fp, #2
 8014a88:	f647 4218 	movw	r2, #31768	; 0x7c18
 8014a8c:	bf18      	it	ne
 8014a8e:	4692      	movne	sl, r2
    uint32_t i                   = 0;
 8014a90:	9504      	str	r5, [sp, #16]
    uint32_t i_next              = 0;
 8014a92:	9505      	str	r5, [sp, #20]
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 8014a94:	f88d 500f 	strb.w	r5, [sp, #15]
    letter_next = lv_txt_encoded_next(txt, &i_next);
 8014a98:	f8d8 2000 	ldr.w	r2, [r8]
 8014a9c:	a905      	add	r1, sp, #20
 8014a9e:	4790      	blx	r2
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8014aa0:	f00b 0301 	and.w	r3, fp, #1
    letter_next = lv_txt_encoded_next(txt, &i_next);
 8014aa4:	4606      	mov	r6, r0
    uint32_t last_break          = NO_BREAK_FOUND;
 8014aa6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8014aaa:	9301      	str	r3, [sp, #4]
    while(txt[i] != '\0') {
 8014aac:	9804      	ldr	r0, [sp, #16]
 8014aae:	5c3b      	ldrb	r3, [r7, r0]
 8014ab0:	b90b      	cbnz	r3, 8014ab6 <lv_txt_get_next_line+0x52>
    return i;
 8014ab2:	b280      	uxth	r0, r0
 8014ab4:	e01e      	b.n	8014af4 <lv_txt_get_next_line+0x90>
        i           = i_next;
 8014ab6:	9b05      	ldr	r3, [sp, #20]
 8014ab8:	9304      	str	r3, [sp, #16]
        letter_next = lv_txt_encoded_next(txt, &i_next);
 8014aba:	a905      	add	r1, sp, #20
 8014abc:	f8d8 3000 	ldr.w	r3, [r8]
 8014ac0:	4638      	mov	r0, r7
 8014ac2:	4798      	blx	r3
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8014ac4:	9b01      	ldr	r3, [sp, #4]
        letter_next = lv_txt_encoded_next(txt, &i_next);
 8014ac6:	4683      	mov	fp, r0
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8014ac8:	b923      	cbnz	r3, 8014ad4 <lv_txt_get_next_line+0x70>
        if(letter == '\n' || letter == '\r') {
 8014aca:	2e0a      	cmp	r6, #10
 8014acc:	d10b      	bne.n	8014ae6 <lv_txt_get_next_line+0x82>
                return i;
 8014ace:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8014ad2:	e00f      	b.n	8014af4 <lv_txt_get_next_line+0x90>
            if(lv_txt_is_cmd(&cmd_state, letter) != false) {
 8014ad4:	4631      	mov	r1, r6
 8014ad6:	f10d 000f 	add.w	r0, sp, #15
 8014ada:	f7ff ffa5 	bl	8014a28 <lv_txt_is_cmd>
 8014ade:	2800      	cmp	r0, #0
 8014ae0:	d0f3      	beq.n	8014aca <lv_txt_get_next_line+0x66>
        letter_next = lv_txt_encoded_next(txt, &i_next);
 8014ae2:	465e      	mov	r6, fp
 8014ae4:	e7e2      	b.n	8014aac <lv_txt_get_next_line+0x48>
        if(letter == '\n' || letter == '\r') {
 8014ae6:	2e0d      	cmp	r6, #13
 8014ae8:	d107      	bne.n	8014afa <lv_txt_get_next_line+0x96>
            if(letter == '\r' && letter_next == '\n')
 8014aea:	f1bb 0f0a 	cmp.w	fp, #10
 8014aee:	d1ee      	bne.n	8014ace <lv_txt_get_next_line+0x6a>
                return i_next;
 8014af0:	f8bd 0014 	ldrh.w	r0, [sp, #20]
}
 8014af4:	b007      	add	sp, #28
 8014af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 8014afa:	465a      	mov	r2, fp
 8014afc:	4631      	mov	r1, r6
 8014afe:	4620      	mov	r0, r4
 8014b00:	f7fe fefc 	bl	80138fc <lv_font_get_glyph_width>
            cur_w += letter_w;
 8014b04:	4405      	add	r5, r0
 8014b06:	b2aa      	uxth	r2, r5
 8014b08:	b215      	sxth	r5, r2
            if(cur_w > max_width) {
 8014b0a:	45aa      	cmp	sl, r5
 8014b0c:	da1a      	bge.n	8014b44 <lv_txt_get_next_line+0xe0>
                if(last_break != NO_BREAK_FOUND) {
 8014b0e:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8014b12:	d00a      	beq.n	8014b2a <lv_txt_get_next_line+0xc6>
                    i = last_break;
 8014b14:	f8cd 9010 	str.w	r9, [sp, #16]
                if(i == 0) lv_txt_encoded_next(txt, &i);
 8014b18:	9b04      	ldr	r3, [sp, #16]
 8014b1a:	2b00      	cmp	r3, #0
 8014b1c:	d1d7      	bne.n	8014ace <lv_txt_get_next_line+0x6a>
 8014b1e:	f8d8 3000 	ldr.w	r3, [r8]
 8014b22:	a904      	add	r1, sp, #16
 8014b24:	4638      	mov	r0, r7
 8014b26:	4798      	blx	r3
 8014b28:	e7d1      	b.n	8014ace <lv_txt_get_next_line+0x6a>
                    lv_txt_encoded_prev(txt, &i);
 8014b2a:	4b0f      	ldr	r3, [pc, #60]	; (8014b68 <lv_txt_get_next_line+0x104>)
 8014b2c:	a904      	add	r1, sp, #16
 8014b2e:	681b      	ldr	r3, [r3, #0]
 8014b30:	4638      	mov	r0, r7
 8014b32:	4798      	blx	r3
 8014b34:	e7f0      	b.n	8014b18 <lv_txt_get_next_line+0xb4>
    uint8_t i;
    bool ret = false;

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 8014b36:	429e      	cmp	r6, r3
 8014b38:	f101 0101 	add.w	r1, r1, #1
 8014b3c:	d103      	bne.n	8014b46 <lv_txt_get_next_line+0xe2>
                last_break = i; /*Save the first char index after break*/
 8014b3e:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8014b42:	e007      	b.n	8014b54 <lv_txt_get_next_line+0xf0>
 8014b44:	2100      	movs	r1, #0
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 8014b46:	fa5f fe81 	uxtb.w	lr, r1
 8014b4a:	4b08      	ldr	r3, [pc, #32]	; (8014b6c <lv_txt_get_next_line+0x108>)
 8014b4c:	f813 300e 	ldrb.w	r3, [r3, lr]
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	d1f0      	bne.n	8014b36 <lv_txt_get_next_line+0xd2>
        if(letter_w > 0) {
 8014b54:	2800      	cmp	r0, #0
 8014b56:	d0c4      	beq.n	8014ae2 <lv_txt_get_next_line+0x7e>
            cur_w += letter_space;
 8014b58:	9b00      	ldr	r3, [sp, #0]
 8014b5a:	18d5      	adds	r5, r2, r3
 8014b5c:	b22d      	sxth	r5, r5
 8014b5e:	e7c0      	b.n	8014ae2 <lv_txt_get_next_line+0x7e>
 8014b60:	e7c8      	b.n	8014af4 <lv_txt_get_next_line+0x90>
    if(txt == NULL) return 0;
 8014b62:	4608      	mov	r0, r1
 8014b64:	e7c6      	b.n	8014af4 <lv_txt_get_next_line+0x90>
 8014b66:	bf00      	nop
 8014b68:	20001cc0 	.word	0x20001cc0
 8014b6c:	080ec3b6 	.word	0x080ec3b6
 8014b70:	20001cbc 	.word	0x20001cbc

08014b74 <lv_txt_get_width>:
{
 8014b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b78:	4688      	mov	r8, r1
 8014b7a:	b085      	sub	sp, #20
 8014b7c:	4691      	mov	r9, r2
 8014b7e:	461d      	mov	r5, r3
    if(txt == NULL) return 0;
 8014b80:	4606      	mov	r6, r0
 8014b82:	b920      	cbnz	r0, 8014b8e <lv_txt_get_width+0x1a>
 8014b84:	2400      	movs	r4, #0
}
 8014b86:	4620      	mov	r0, r4
 8014b88:	b005      	add	sp, #20
 8014b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(font == NULL) return 0;
 8014b8e:	2a00      	cmp	r2, #0
 8014b90:	d0f8      	beq.n	8014b84 <lv_txt_get_width+0x10>
    uint32_t i                   = 0;
 8014b92:	2400      	movs	r4, #0
 8014b94:	9403      	str	r4, [sp, #12]
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 8014b96:	f88d 400b 	strb.w	r4, [sp, #11]
    if(length != 0) {
 8014b9a:	2900      	cmp	r1, #0
 8014b9c:	d0f2      	beq.n	8014b84 <lv_txt_get_width+0x10>
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8014b9e:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
            letter      = lv_txt_encoded_next(txt, &i);
 8014ba2:	f8df a05c 	ldr.w	sl, [pc, #92]	; 8014c00 <lv_txt_get_width+0x8c>
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8014ba6:	f007 0701 	and.w	r7, r7, #1
        while(i < length) {
 8014baa:	9b03      	ldr	r3, [sp, #12]
 8014bac:	4598      	cmp	r8, r3
 8014bae:	d804      	bhi.n	8014bba <lv_txt_get_width+0x46>
        if(width > 0) {
 8014bb0:	2c00      	cmp	r4, #0
            width -= letter_space; /*Trim the last letter space. Important if the text is center
 8014bb2:	bfc4      	itt	gt
 8014bb4:	1b64      	subgt	r4, r4, r5
 8014bb6:	b224      	sxthgt	r4, r4
 8014bb8:	e7e5      	b.n	8014b86 <lv_txt_get_width+0x12>
            letter      = lv_txt_encoded_next(txt, &i);
 8014bba:	f8da 3000 	ldr.w	r3, [sl]
 8014bbe:	a903      	add	r1, sp, #12
 8014bc0:	4630      	mov	r0, r6
 8014bc2:	4798      	blx	r3
 8014bc4:	4683      	mov	fp, r0
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 8014bc6:	9803      	ldr	r0, [sp, #12]
 8014bc8:	f8da 3000 	ldr.w	r3, [sl]
 8014bcc:	2100      	movs	r1, #0
 8014bce:	4430      	add	r0, r6
 8014bd0:	4798      	blx	r3
 8014bd2:	4602      	mov	r2, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8014bd4:	b957      	cbnz	r7, 8014bec <lv_txt_get_width+0x78>
            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
 8014bd6:	4659      	mov	r1, fp
 8014bd8:	4648      	mov	r0, r9
 8014bda:	f7fe fe8f 	bl	80138fc <lv_font_get_glyph_width>
            if(char_width > 0) {
 8014bde:	b203      	sxth	r3, r0
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	dde2      	ble.n	8014baa <lv_txt_get_width+0x36>
                width += letter_space;
 8014be4:	442c      	add	r4, r5
 8014be6:	4404      	add	r4, r0
 8014be8:	b224      	sxth	r4, r4
 8014bea:	e7de      	b.n	8014baa <lv_txt_get_width+0x36>
 8014bec:	9001      	str	r0, [sp, #4]
                if(lv_txt_is_cmd(&cmd_state, letter) != false) {
 8014bee:	4659      	mov	r1, fp
 8014bf0:	f10d 000b 	add.w	r0, sp, #11
 8014bf4:	f7ff ff18 	bl	8014a28 <lv_txt_is_cmd>
 8014bf8:	2800      	cmp	r0, #0
 8014bfa:	d1d6      	bne.n	8014baa <lv_txt_get_width+0x36>
 8014bfc:	9a01      	ldr	r2, [sp, #4]
 8014bfe:	e7ea      	b.n	8014bd6 <lv_txt_get_width+0x62>
 8014c00:	20001cbc 	.word	0x20001cbc

08014c04 <lv_txt_get_size>:
{
 8014c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c08:	b087      	sub	sp, #28
    size_res->x = 0;
 8014c0a:	2500      	movs	r5, #0
{
 8014c0c:	9304      	str	r3, [sp, #16]
 8014c0e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8014c12:	f9bd b040 	ldrsh.w	fp, [sp, #64]	; 0x40
 8014c16:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 8014c1a:	9303      	str	r3, [sp, #12]
 8014c1c:	4604      	mov	r4, r0
 8014c1e:	4616      	mov	r6, r2
    size_res->x = 0;
 8014c20:	8005      	strh	r5, [r0, #0]
    size_res->y = 0;
 8014c22:	8045      	strh	r5, [r0, #2]
    if(text == NULL) return;
 8014c24:	4689      	mov	r9, r1
 8014c26:	b1f9      	cbz	r1, 8014c68 <lv_txt_get_size+0x64>
    if(font == NULL) return;
 8014c28:	b1f2      	cbz	r2, 8014c68 <lv_txt_get_size+0x64>
 8014c2a:	7a17      	ldrb	r7, [r2, #8]
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8014c2c:	f013 0f02 	tst.w	r3, #2
 8014c30:	f647 4318 	movw	r3, #31768	; 0x7c18
 8014c34:	bf18      	it	ne
 8014c36:	469a      	movne	sl, r3
        size_res->y += line_space;
 8014c38:	eb07 030b 	add.w	r3, r7, fp
 8014c3c:	9305      	str	r3, [sp, #20]
    while(text[line_start] != '\0') {
 8014c3e:	f819 3005 	ldrb.w	r3, [r9, r5]
 8014c42:	eb09 0805 	add.w	r8, r9, r5
 8014c46:	b993      	cbnz	r3, 8014c6e <lv_txt_get_size+0x6a>
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
 8014c48:	b155      	cbz	r5, 8014c60 <lv_txt_get_size+0x5c>
 8014c4a:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8014c4e:	2b0a      	cmp	r3, #10
 8014c50:	d001      	beq.n	8014c56 <lv_txt_get_size+0x52>
 8014c52:	2b0d      	cmp	r3, #13
 8014c54:	d104      	bne.n	8014c60 <lv_txt_get_size+0x5c>
        size_res->y += letter_height + line_space;
 8014c56:	8862      	ldrh	r2, [r4, #2]
 8014c58:	eb07 030b 	add.w	r3, r7, fp
 8014c5c:	4413      	add	r3, r2
 8014c5e:	8063      	strh	r3, [r4, #2]
    if(size_res->y == 0)
 8014c60:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8014c64:	b9fb      	cbnz	r3, 8014ca6 <lv_txt_get_size+0xa2>
        size_res->y = letter_height;
 8014c66:	8067      	strh	r7, [r4, #2]
}
 8014c68:	b007      	add	sp, #28
 8014c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        new_line_start += lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
 8014c6e:	9b03      	ldr	r3, [sp, #12]
 8014c70:	9300      	str	r3, [sp, #0]
 8014c72:	9a04      	ldr	r2, [sp, #16]
 8014c74:	4653      	mov	r3, sl
 8014c76:	4631      	mov	r1, r6
 8014c78:	4640      	mov	r0, r8
 8014c7a:	f7ff fef3 	bl	8014a64 <lv_txt_get_next_line>
        size_res->y += line_space;
 8014c7e:	8863      	ldrh	r3, [r4, #2]
 8014c80:	9a05      	ldr	r2, [sp, #20]
 8014c82:	4413      	add	r3, r2
 8014c84:	8063      	strh	r3, [r4, #2]
        act_line_length = lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space, flag);
 8014c86:	9b03      	ldr	r3, [sp, #12]
 8014c88:	9300      	str	r3, [sp, #0]
        new_line_start += lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
 8014c8a:	4601      	mov	r1, r0
        act_line_length = lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space, flag);
 8014c8c:	9b04      	ldr	r3, [sp, #16]
        new_line_start += lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
 8014c8e:	4405      	add	r5, r0
        act_line_length = lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space, flag);
 8014c90:	4632      	mov	r2, r6
 8014c92:	4640      	mov	r0, r8
 8014c94:	f7ff ff6e 	bl	8014b74 <lv_txt_get_width>
        size_res->x = LV_MATH_MAX(act_line_length, size_res->x);
 8014c98:	f9b4 3000 	ldrsh.w	r3, [r4]
 8014c9c:	4298      	cmp	r0, r3
 8014c9e:	bfb8      	it	lt
 8014ca0:	4618      	movlt	r0, r3
 8014ca2:	8020      	strh	r0, [r4, #0]
 8014ca4:	e7cb      	b.n	8014c3e <lv_txt_get_size+0x3a>
        size_res->y -= line_space;
 8014ca6:	eba3 030b 	sub.w	r3, r3, fp
 8014caa:	8063      	strh	r3, [r4, #2]
 8014cac:	e7dc      	b.n	8014c68 <lv_txt_get_size+0x64>

08014cae <lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                        int32_t (*cmp)(const void * pRef, const void * pElement))
{
 8014cae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014cb2:	9d08      	ldr	r5, [sp, #32]
 8014cb4:	4681      	mov	r9, r0
 8014cb6:	4688      	mov	r8, r1
 8014cb8:	4614      	mov	r4, r2
 8014cba:	469a      	mov	sl, r3
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
 8014cbc:	b914      	cbnz	r4, 8014cc4 <lv_utils_bsearch+0x16>
            middle = base;
        } else {
            return (char *)middle;
        }
    }
    return NULL;
 8014cbe:	4620      	mov	r0, r4
 8014cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        middle += (n / 2) * size;
 8014cc4:	0867      	lsrs	r7, r4, #1
 8014cc6:	fb0a 8607 	mla	r6, sl, r7, r8
        if((c = (*cmp)(key, middle)) > 0) {
 8014cca:	4631      	mov	r1, r6
 8014ccc:	4648      	mov	r0, r9
 8014cce:	47a8      	blx	r5
 8014cd0:	2800      	cmp	r0, #0
 8014cd2:	dd07      	ble.n	8014ce4 <lv_utils_bsearch+0x36>
 8014cd4:	43e1      	mvns	r1, r4
 8014cd6:	f001 0101 	and.w	r1, r1, #1
            n    = (n / 2) - ((n & 1) == 0);
 8014cda:	1a7f      	subs	r7, r7, r1
            base = (middle += size);
 8014cdc:	eb06 080a 	add.w	r8, r6, sl
 8014ce0:	463c      	mov	r4, r7
 8014ce2:	e7eb      	b.n	8014cbc <lv_utils_bsearch+0xe>
        } else if(c < 0) {
 8014ce4:	d1fc      	bne.n	8014ce0 <lv_utils_bsearch+0x32>
        middle += (n / 2) * size;
 8014ce6:	4630      	mov	r0, r6
}
 8014ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08014cec <lv_bar_anim>:
    return res;
}

#if LV_USE_ANIMATION
static void lv_bar_anim(void * bar, lv_anim_value_t value)
{
 8014cec:	b538      	push	{r3, r4, r5, lr}
 8014cee:	4604      	mov	r4, r0
 8014cf0:	460d      	mov	r5, r1
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 8014cf2:	f7fa fc80 	bl	800f5f6 <lv_obj_get_ext_attr>
    ext->anim_state    = value;
 8014cf6:	8145      	strh	r5, [r0, #10]
    lv_obj_invalidate(bar);
 8014cf8:	4620      	mov	r0, r4
}
 8014cfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(bar);
 8014cfe:	f7f9 bdfd 	b.w	800e8fc <lv_obj_invalidate>
	...

08014d04 <lv_bar_signal>:
{
 8014d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    res = ancestor_signal(bar, sign, param);
 8014d06:	4b13      	ldr	r3, [pc, #76]	; (8014d54 <lv_bar_signal+0x50>)
 8014d08:	681b      	ldr	r3, [r3, #0]
{
 8014d0a:	4604      	mov	r4, r0
 8014d0c:	460f      	mov	r7, r1
 8014d0e:	4616      	mov	r6, r2
    res = ancestor_signal(bar, sign, param);
 8014d10:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8014d12:	2801      	cmp	r0, #1
    res = ancestor_signal(bar, sign, param);
 8014d14:	4605      	mov	r5, r0
    if(res != LV_RES_OK) return res;
 8014d16:	d10c      	bne.n	8014d32 <lv_bar_signal+0x2e>
    if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 8014d18:	2f05      	cmp	r7, #5
 8014d1a:	d10c      	bne.n	8014d36 <lv_bar_signal+0x32>
    lv_bar_ext_t * ext       = lv_obj_get_ext_attr(bar);
 8014d1c:	4620      	mov	r0, r4
 8014d1e:	f7fa fc6a 	bl	800f5f6 <lv_obj_get_ext_attr>
        if(style_indic->body.shadow.width > bar->ext_draw_pad) bar->ext_draw_pad = style_indic->body.shadow.width;
 8014d22:	6903      	ldr	r3, [r0, #16]
 8014d24:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 8014d28:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8014d2c:	429a      	cmp	r2, r3
 8014d2e:	da00      	bge.n	8014d32 <lv_bar_signal+0x2e>
 8014d30:	86a3      	strh	r3, [r4, #52]	; 0x34
}
 8014d32:	4628      	mov	r0, r5
 8014d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8014d36:	2f06      	cmp	r7, #6
 8014d38:	d1fb      	bne.n	8014d32 <lv_bar_signal+0x2e>
 8014d3a:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 8014d3c:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8014d40:	b2da      	uxtb	r2, r3
 8014d42:	b119      	cbz	r1, 8014d4c <lv_bar_signal+0x48>
 8014d44:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8014d46:	2b07      	cmp	r3, #7
 8014d48:	d1f8      	bne.n	8014d3c <lv_bar_signal+0x38>
 8014d4a:	461a      	mov	r2, r3
        buf->type[i] = "lv_bar";
 8014d4c:	4b02      	ldr	r3, [pc, #8]	; (8014d58 <lv_bar_signal+0x54>)
 8014d4e:	f846 3022 	str.w	r3, [r6, r2, lsl #2]
 8014d52:	e7ee      	b.n	8014d32 <lv_bar_signal+0x2e>
 8014d54:	2000b02c 	.word	0x2000b02c
 8014d58:	080ec3be 	.word	0x080ec3be

08014d5c <lv_bar_set_value>:
{
 8014d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014d5e:	b08b      	sub	sp, #44	; 0x2c
 8014d60:	460e      	mov	r6, r1
 8014d62:	4605      	mov	r5, r0
 8014d64:	4617      	mov	r7, r2
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 8014d66:	f7fa fc46 	bl	800f5f6 <lv_obj_get_ext_attr>
    if(ext->cur_value == value) return;
 8014d6a:	f9b0 3000 	ldrsh.w	r3, [r0]
 8014d6e:	42b3      	cmp	r3, r6
 8014d70:	d010      	beq.n	8014d94 <lv_bar_set_value+0x38>
    new_value = value > ext->max_value ? ext->max_value : value;
 8014d72:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
    new_value = new_value < ext->min_value ? ext->min_value : new_value;
 8014d76:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
    new_value = value > ext->max_value ? ext->max_value : value;
 8014d7a:	42b4      	cmp	r4, r6
 8014d7c:	bfa8      	it	ge
 8014d7e:	4634      	movge	r4, r6
    new_value = new_value < ext->min_value ? ext->min_value : new_value;
 8014d80:	42a1      	cmp	r1, r4
 8014d82:	bfb8      	it	lt
 8014d84:	4621      	movlt	r1, r4
    if(ext->cur_value == new_value) return;
 8014d86:	428b      	cmp	r3, r1
 8014d88:	d004      	beq.n	8014d94 <lv_bar_set_value+0x38>
    if(anim == LV_ANIM_OFF) {
 8014d8a:	b92f      	cbnz	r7, 8014d98 <lv_bar_set_value+0x3c>
        ext->cur_value = new_value;
 8014d8c:	8001      	strh	r1, [r0, #0]
        lv_obj_invalidate(bar);
 8014d8e:	4628      	mov	r0, r5
 8014d90:	f7f9 fdb4 	bl	800e8fc <lv_obj_invalidate>
}
 8014d94:	b00b      	add	sp, #44	; 0x2c
 8014d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(ext->anim_state == LV_BAR_ANIM_STATE_INV) {
 8014d98:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
        a.var            = bar;
 8014d9c:	9500      	str	r5, [sp, #0]
        if(ext->anim_state == LV_BAR_ANIM_STATE_INV) {
 8014d9e:	3201      	adds	r2, #1
            ext->anim_start = ext->anim_end;
 8014da0:	bf18      	it	ne
 8014da2:	8903      	ldrhne	r3, [r0, #8]
 8014da4:	80c3      	strh	r3, [r0, #6]
        a.end            = LV_BAR_ANIM_STATE_END;
 8014da6:	f44f 7280 	mov.w	r2, #256	; 0x100
            ext->anim_end   = new_value;
 8014daa:	8101      	strh	r1, [r0, #8]
        a.end            = LV_BAR_ANIM_STATE_END;
 8014dac:	9205      	str	r2, [sp, #20]
        a.exec_cb        = (lv_anim_exec_xcb_t)lv_bar_anim;
 8014dae:	4a0e      	ldr	r2, [pc, #56]	; (8014de8 <lv_bar_set_value+0x8c>)
 8014db0:	9201      	str	r2, [sp, #4]
        a.path_cb        = lv_anim_path_linear;
 8014db2:	4a0e      	ldr	r2, [pc, #56]	; (8014dec <lv_bar_set_value+0x90>)
 8014db4:	9202      	str	r2, [sp, #8]
        a.ready_cb       = lv_bar_anim_ready;
 8014db6:	4a0e      	ldr	r2, [pc, #56]	; (8014df0 <lv_bar_set_value+0x94>)
 8014db8:	9203      	str	r2, [sp, #12]
        a.time           = ext->anim_time;
 8014dba:	8982      	ldrh	r2, [r0, #12]
 8014dbc:	f8ad 2018 	strh.w	r2, [sp, #24]
        a.playback       = 0;
 8014dc0:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
        a.start          = LV_BAR_ANIM_STATE_START;
 8014dc4:	2300      	movs	r3, #0
        a.repeat         = 0;
 8014dc6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8014dca:	f363 0241 	bfi	r2, r3, #1, #1
        lv_anim_create(&a);
 8014dce:	4668      	mov	r0, sp
        a.start          = LV_BAR_ANIM_STATE_START;
 8014dd0:	9304      	str	r3, [sp, #16]
        a.act_time       = 0;
 8014dd2:	f8ad 301a 	strh.w	r3, [sp, #26]
        a.playback_pause = 0;
 8014dd6:	f8ad 301c 	strh.w	r3, [sp, #28]
        a.repeat         = 0;
 8014dda:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
        a.repeat_pause   = 0;
 8014dde:	f8ad 301e 	strh.w	r3, [sp, #30]
        lv_anim_create(&a);
 8014de2:	f7ff f899 	bl	8013f18 <lv_anim_create>
 8014de6:	e7d5      	b.n	8014d94 <lv_bar_set_value+0x38>
 8014de8:	08014ced 	.word	0x08014ced
 8014dec:	08013d41 	.word	0x08013d41
 8014df0:	08014df5 	.word	0x08014df5

08014df4 <lv_bar_anim_ready>:

static void lv_bar_anim_ready(lv_anim_t * a)
{
 8014df4:	b510      	push	{r4, lr}
 8014df6:	4604      	mov	r4, r0
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(a->var);
 8014df8:	6800      	ldr	r0, [r0, #0]
 8014dfa:	f7fa fbfc 	bl	800f5f6 <lv_obj_get_ext_attr>
    ext->anim_state    = LV_BAR_ANIM_STATE_INV;
 8014dfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014e02:	8143      	strh	r3, [r0, #10]
    lv_bar_set_value(a->var, ext->anim_end, false);
 8014e04:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8014e08:	6820      	ldr	r0, [r4, #0]
 8014e0a:	2200      	movs	r2, #0
}
 8014e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_bar_set_value(a->var, ext->anim_end, false);
 8014e10:	f7ff bfa4 	b.w	8014d5c <lv_bar_set_value>

08014e14 <lv_bar_set_style>:
{
 8014e14:	b570      	push	{r4, r5, r6, lr}
 8014e16:	460e      	mov	r6, r1
 8014e18:	4604      	mov	r4, r0
 8014e1a:	4615      	mov	r5, r2
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 8014e1c:	f7fa fbeb 	bl	800f5f6 <lv_obj_get_ext_attr>
    switch(type) {
 8014e20:	b116      	cbz	r6, 8014e28 <lv_bar_set_style+0x14>
 8014e22:	2e01      	cmp	r6, #1
 8014e24:	d006      	beq.n	8014e34 <lv_bar_set_style+0x20>
 8014e26:	bd70      	pop	{r4, r5, r6, pc}
        case LV_BAR_STYLE_BG: lv_obj_set_style(bar, style); break;
 8014e28:	4629      	mov	r1, r5
 8014e2a:	4620      	mov	r0, r4
}
 8014e2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        case LV_BAR_STYLE_BG: lv_obj_set_style(bar, style); break;
 8014e30:	f7fa bac8 	b.w	800f3c4 <lv_obj_set_style>
            ext->style_indic = style;
 8014e34:	6105      	str	r5, [r0, #16]
            lv_obj_refresh_ext_draw_pad(bar);
 8014e36:	4620      	mov	r0, r4
}
 8014e38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            lv_obj_refresh_ext_draw_pad(bar);
 8014e3c:	f7fa ba27 	b.w	800f28e <lv_obj_refresh_ext_draw_pad>

08014e40 <lv_bar_create>:
{
 8014e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e42:	460f      	mov	r7, r1
    lv_obj_t * new_bar = lv_obj_create(par, copy);
 8014e44:	f7fa f83e 	bl	800eec4 <lv_obj_create>
    lv_mem_assert(new_bar);
 8014e48:	4605      	mov	r5, r0
 8014e4a:	b900      	cbnz	r0, 8014e4e <lv_bar_create+0xe>
 8014e4c:	e7fe      	b.n	8014e4c <lv_bar_create+0xc>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_bar);
 8014e4e:	4c38      	ldr	r4, [pc, #224]	; (8014f30 <lv_bar_create+0xf0>)
 8014e50:	6823      	ldr	r3, [r4, #0]
 8014e52:	b913      	cbnz	r3, 8014e5a <lv_bar_create+0x1a>
 8014e54:	f7fa fbcb 	bl	800f5ee <lv_obj_get_signal_cb>
 8014e58:	6020      	str	r0, [r4, #0]
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_cb(new_bar);
 8014e5a:	4c36      	ldr	r4, [pc, #216]	; (8014f34 <lv_bar_create+0xf4>)
 8014e5c:	6823      	ldr	r3, [r4, #0]
 8014e5e:	b91b      	cbnz	r3, 8014e68 <lv_bar_create+0x28>
 8014e60:	4628      	mov	r0, r5
 8014e62:	f7fa fbc6 	bl	800f5f2 <lv_obj_get_design_cb>
 8014e66:	6020      	str	r0, [r4, #0]
    lv_bar_ext_t * ext = lv_obj_allocate_ext_attr(new_bar, sizeof(lv_bar_ext_t));
 8014e68:	2114      	movs	r1, #20
 8014e6a:	4628      	mov	r0, r5
 8014e6c:	f7f9 fd18 	bl	800e8a0 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 8014e70:	4604      	mov	r4, r0
 8014e72:	b900      	cbnz	r0, 8014e76 <lv_bar_create+0x36>
 8014e74:	e7fe      	b.n	8014e74 <lv_bar_create+0x34>
    ext->max_value = 100;
 8014e76:	2364      	movs	r3, #100	; 0x64
 8014e78:	8083      	strh	r3, [r0, #4]
    ext->anim_time  = 200;
 8014e7a:	23c8      	movs	r3, #200	; 0xc8
 8014e7c:	8183      	strh	r3, [r0, #12]
    ext->anim_state = LV_BAR_ANIM_STATE_INV;
 8014e7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014e82:	8143      	strh	r3, [r0, #10]
    ext->sym         = 0;
 8014e84:	7b83      	ldrb	r3, [r0, #14]
    lv_obj_set_signal_cb(new_bar, lv_bar_signal);
 8014e86:	492c      	ldr	r1, [pc, #176]	; (8014f38 <lv_bar_create+0xf8>)
    ext->min_value = 0;
 8014e88:	2600      	movs	r6, #0
    ext->sym         = 0;
 8014e8a:	f366 0300 	bfi	r3, r6, #0, #1
 8014e8e:	7383      	strb	r3, [r0, #14]
    ext->style_indic = &lv_style_pretty_color;
 8014e90:	4b2a      	ldr	r3, [pc, #168]	; (8014f3c <lv_bar_create+0xfc>)
    ext->min_value = 0;
 8014e92:	8046      	strh	r6, [r0, #2]
    ext->cur_value = 0;
 8014e94:	8006      	strh	r6, [r0, #0]
    ext->anim_start = 0;
 8014e96:	80c6      	strh	r6, [r0, #6]
    ext->anim_end   = 0;
 8014e98:	8106      	strh	r6, [r0, #8]
    ext->style_indic = &lv_style_pretty_color;
 8014e9a:	6103      	str	r3, [r0, #16]
    lv_obj_set_signal_cb(new_bar, lv_bar_signal);
 8014e9c:	4628      	mov	r0, r5
 8014e9e:	f7f9 fcfb 	bl	800e898 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_bar, lv_bar_design);
 8014ea2:	4927      	ldr	r1, [pc, #156]	; (8014f40 <lv_bar_create+0x100>)
 8014ea4:	4628      	mov	r0, r5
 8014ea6:	f7f9 fcf9 	bl	800e89c <lv_obj_set_design_cb>
    if(copy == NULL) {
 8014eaa:	bb1f      	cbnz	r7, 8014ef4 <lv_bar_create+0xb4>
        lv_obj_set_click(new_bar, false);
 8014eac:	4639      	mov	r1, r7
 8014eae:	4628      	mov	r0, r5
 8014eb0:	f7f9 fc1e 	bl	800e6f0 <lv_obj_set_click>
        lv_obj_set_size(new_bar, LV_DPI * 2, LV_DPI / 3);
 8014eb4:	2208      	movs	r2, #8
 8014eb6:	2132      	movs	r1, #50	; 0x32
 8014eb8:	4628      	mov	r0, r5
 8014eba:	f7fa f981 	bl	800f1c0 <lv_obj_set_size>
        lv_bar_set_value(new_bar, ext->cur_value, false);
 8014ebe:	f9b4 1000 	ldrsh.w	r1, [r4]
 8014ec2:	463a      	mov	r2, r7
 8014ec4:	4628      	mov	r0, r5
 8014ec6:	f7ff ff49 	bl	8014d5c <lv_bar_set_value>
        lv_theme_t * th = lv_theme_get_current();
 8014eca:	f004 fb5f 	bl	801958c <lv_theme_get_current>
        if(th) {
 8014ece:	4604      	mov	r4, r0
 8014ed0:	b158      	cbz	r0, 8014eea <lv_bar_create+0xaa>
            lv_bar_set_style(new_bar, LV_BAR_STYLE_BG, th->style.bar.bg);
 8014ed2:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8014ed4:	4639      	mov	r1, r7
 8014ed6:	4628      	mov	r0, r5
 8014ed8:	f7ff ff9c 	bl	8014e14 <lv_bar_set_style>
            lv_bar_set_style(new_bar, LV_BAR_STYLE_INDIC, th->style.bar.indic);
 8014edc:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8014ede:	2101      	movs	r1, #1
 8014ee0:	4628      	mov	r0, r5
 8014ee2:	f7ff ff97 	bl	8014e14 <lv_bar_set_style>
}
 8014ee6:	4628      	mov	r0, r5
 8014ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            lv_obj_set_style(new_bar, &lv_style_pretty);
 8014eea:	4916      	ldr	r1, [pc, #88]	; (8014f44 <lv_bar_create+0x104>)
 8014eec:	4628      	mov	r0, r5
 8014eee:	f7fa fa69 	bl	800f3c4 <lv_obj_set_style>
 8014ef2:	e7f8      	b.n	8014ee6 <lv_bar_create+0xa6>
        lv_bar_ext_t * ext_copy = lv_obj_get_ext_attr(copy);
 8014ef4:	4638      	mov	r0, r7
 8014ef6:	f7fa fb7e 	bl	800f5f6 <lv_obj_get_ext_attr>
        ext->min_value          = ext_copy->min_value;
 8014efa:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8014efe:	8063      	strh	r3, [r4, #2]
        ext->max_value          = ext_copy->max_value;
 8014f00:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8014f04:	80a3      	strh	r3, [r4, #4]
        ext->cur_value          = ext_copy->cur_value;
 8014f06:	f9b0 3000 	ldrsh.w	r3, [r0]
 8014f0a:	8023      	strh	r3, [r4, #0]
        ext->style_indic        = ext_copy->style_indic;
 8014f0c:	6903      	ldr	r3, [r0, #16]
 8014f0e:	6123      	str	r3, [r4, #16]
        ext->sym                = ext_copy->sym;
 8014f10:	7b82      	ldrb	r2, [r0, #14]
 8014f12:	7ba3      	ldrb	r3, [r4, #14]
 8014f14:	f362 0300 	bfi	r3, r2, #0, #1
        lv_obj_refresh_style(new_bar);
 8014f18:	4628      	mov	r0, r5
        ext->sym                = ext_copy->sym;
 8014f1a:	73a3      	strb	r3, [r4, #14]
        lv_obj_refresh_style(new_bar);
 8014f1c:	f7fa f9a9 	bl	800f272 <lv_obj_refresh_style>
        lv_bar_set_value(new_bar, ext->cur_value, false);
 8014f20:	4632      	mov	r2, r6
 8014f22:	f9b4 1000 	ldrsh.w	r1, [r4]
 8014f26:	4628      	mov	r0, r5
 8014f28:	f7ff ff18 	bl	8014d5c <lv_bar_set_value>
 8014f2c:	e7db      	b.n	8014ee6 <lv_bar_create+0xa6>
 8014f2e:	bf00      	nop
 8014f30:	2000b02c 	.word	0x2000b02c
 8014f34:	2000b028 	.word	0x2000b028
 8014f38:	08014d05 	.word	0x08014d05
 8014f3c:	2000c2c4 	.word	0x2000c2c4
 8014f40:	08014f6d 	.word	0x08014f6d
 8014f44:	2000c3b4 	.word	0x2000c3b4

08014f48 <lv_bar_get_style>:
{
 8014f48:	b538      	push	{r3, r4, r5, lr}
 8014f4a:	460c      	mov	r4, r1
 8014f4c:	4605      	mov	r5, r0
    lv_bar_ext_t * ext       = lv_obj_get_ext_attr(bar);
 8014f4e:	f7fa fb52 	bl	800f5f6 <lv_obj_get_ext_attr>
    switch(type) {
 8014f52:	b11c      	cbz	r4, 8014f5c <lv_bar_get_style+0x14>
 8014f54:	2c01      	cmp	r4, #1
 8014f56:	d006      	beq.n	8014f66 <lv_bar_get_style+0x1e>
        default: style = NULL; break;
 8014f58:	2000      	movs	r0, #0
}
 8014f5a:	bd38      	pop	{r3, r4, r5, pc}
        case LV_BAR_STYLE_BG: style = lv_obj_get_style(bar); break;
 8014f5c:	4628      	mov	r0, r5
}
 8014f5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        case LV_BAR_STYLE_BG: style = lv_obj_get_style(bar); break;
 8014f62:	f7fa ba5d 	b.w	800f420 <lv_obj_get_style>
        case LV_BAR_STYLE_INDIC: style = ext->style_indic; break;
 8014f66:	6900      	ldr	r0, [r0, #16]
 8014f68:	bd38      	pop	{r3, r4, r5, pc}
	...

08014f6c <lv_bar_design>:
{
 8014f6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if(mode == LV_DESIGN_COVER_CHK) {
 8014f70:	2a02      	cmp	r2, #2
{
 8014f72:	b091      	sub	sp, #68	; 0x44
 8014f74:	4605      	mov	r5, r0
 8014f76:	460e      	mov	r6, r1
 8014f78:	4614      	mov	r4, r2
    if(mode == LV_DESIGN_COVER_CHK) {
 8014f7a:	d107      	bne.n	8014f8c <lv_bar_design+0x20>
        return ancestor_design_f(bar, mask, mode);
 8014f7c:	4b98      	ldr	r3, [pc, #608]	; (80151e0 <lv_bar_design+0x274>)
 8014f7e:	681b      	ldr	r3, [r3, #0]
 8014f80:	4798      	blx	r3
 8014f82:	4604      	mov	r4, r0
}
 8014f84:	4620      	mov	r0, r4
 8014f86:	b011      	add	sp, #68	; 0x44
 8014f88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 8014f8c:	2a00      	cmp	r2, #0
 8014f8e:	f040 8105 	bne.w	801519c <lv_bar_design+0x230>
        lv_opa_t opa_scale = lv_obj_get_opa_scale(bar);
 8014f92:	f7fa fac8 	bl	800f526 <lv_obj_get_opa_scale>
 8014f96:	4607      	mov	r7, r0
        if(lv_obj_is_focused(bar)) {
 8014f98:	4628      	mov	r0, r5
 8014f9a:	f7fa fb34 	bl	800f606 <lv_obj_is_focused>
 8014f9e:	4602      	mov	r2, r0
 8014fa0:	b318      	cbz	r0, 8014fea <lv_bar_design+0x7e>
            const lv_style_t * style_bg = lv_bar_get_style(bar, LV_BAR_STYLE_BG);
 8014fa2:	4621      	mov	r1, r4
 8014fa4:	4628      	mov	r0, r5
 8014fa6:	f7ff ffcf 	bl	8014f48 <lv_bar_get_style>
            lv_style_copy(&style_tmp, style_bg);
 8014faa:	4601      	mov	r1, r0
 8014fac:	a801      	add	r0, sp, #4
 8014fae:	f7fa fe65 	bl	800fc7c <lv_style_copy>
            lv_draw_rect(&bar->coords, mask, &style_tmp, opa_scale);
 8014fb2:	463b      	mov	r3, r7
 8014fb4:	aa01      	add	r2, sp, #4
 8014fb6:	4631      	mov	r1, r6
 8014fb8:	f105 0010 	add.w	r0, r5, #16
            style_tmp.body.border.width = 0;
 8014fbc:	f8ad 4010 	strh.w	r4, [sp, #16]
            lv_draw_rect(&bar->coords, mask, &style_tmp, opa_scale);
 8014fc0:	f7fc fa3e 	bl	8011440 <lv_draw_rect>
        lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 8014fc4:	4628      	mov	r0, r5
 8014fc6:	f7fa fb16 	bl	800f5f6 <lv_obj_get_ext_attr>
        if(ext->cur_value != ext->min_value || ext->sym
 8014fca:	f9b0 2000 	ldrsh.w	r2, [r0]
 8014fce:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8014fd2:	429a      	cmp	r2, r3
        lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 8014fd4:	4604      	mov	r4, r0
        if(ext->cur_value != ext->min_value || ext->sym
 8014fd6:	d10e      	bne.n	8014ff6 <lv_bar_design+0x8a>
 8014fd8:	7b83      	ldrb	r3, [r0, #14]
 8014fda:	07db      	lsls	r3, r3, #31
 8014fdc:	d40b      	bmi.n	8014ff6 <lv_bar_design+0x8a>
           || ext->anim_start != LV_BAR_ANIM_STATE_INV
 8014fde:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8014fe2:	3301      	adds	r3, #1
 8014fe4:	d107      	bne.n	8014ff6 <lv_bar_design+0x8a>
    return true;
 8014fe6:	2401      	movs	r4, #1
 8014fe8:	e7cc      	b.n	8014f84 <lv_bar_design+0x18>
            ancestor_design_f(bar, mask, mode);
 8014fea:	4b7d      	ldr	r3, [pc, #500]	; (80151e0 <lv_bar_design+0x274>)
 8014fec:	4631      	mov	r1, r6
 8014fee:	681b      	ldr	r3, [r3, #0]
 8014ff0:	4628      	mov	r0, r5
 8014ff2:	4798      	blx	r3
 8014ff4:	e7e6      	b.n	8014fc4 <lv_bar_design+0x58>
    lv_bar_ext_t * ext       = lv_obj_get_ext_attr(bar);
 8014ff6:	4628      	mov	r0, r5
 8014ff8:	f7fa fafd 	bl	800f5f6 <lv_obj_get_ext_attr>
        case LV_BAR_STYLE_INDIC: style = ext->style_indic; break;
 8014ffc:	6902      	ldr	r2, [r0, #16]
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    memcpy(dest, src, sizeof(lv_area_t));
 8014ffe:	f855 0f10 	ldr.w	r0, [r5, #16]!
 8015002:	6869      	ldr	r1, [r5, #4]
 8015004:	ab01      	add	r3, sp, #4
 8015006:	c303      	stmia	r3!, {r0, r1}
            indic_area.x1 += style_indic->body.padding.left;
 8015008:	8b53      	ldrh	r3, [r2, #26]
 801500a:	f8bd e004 	ldrh.w	lr, [sp, #4]
            indic_area.x2 -= style_indic->body.padding.right;
 801500e:	8b91      	ldrh	r1, [r2, #28]
            indic_area.y2 -= style_indic->body.padding.bottom;
 8015010:	f8bd 000a 	ldrh.w	r0, [sp, #10]
            indic_area.y1 += style_indic->body.padding.top;
 8015014:	f8b2 c016 	ldrh.w	ip, [r2, #22]
 8015018:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801501c:	f894 800e 	ldrb.w	r8, [r4, #14]
 8015020:	f9b4 900a 	ldrsh.w	r9, [r4, #10]
            indic_area.x1 += style_indic->body.padding.left;
 8015024:	449e      	add	lr, r3
            indic_area.x2 -= style_indic->body.padding.right;
 8015026:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801502a:	1a5b      	subs	r3, r3, r1
            indic_area.y2 -= style_indic->body.padding.bottom;
 801502c:	8b11      	ldrh	r1, [r2, #24]
 801502e:	1a40      	subs	r0, r0, r1
            indic_area.x2 -= style_indic->body.padding.right;
 8015030:	b29b      	uxth	r3, r3
            indic_area.y1 += style_indic->body.padding.top;
 8015032:	4465      	add	r5, ip
            indic_area.y2 -= style_indic->body.padding.bottom;
 8015034:	b280      	uxth	r0, r0
            indic_area.y1 += style_indic->body.padding.top;
 8015036:	b2ad      	uxth	r5, r5
            indic_area.x1 += style_indic->body.padding.left;
 8015038:	fa1f fe8e 	uxth.w	lr, lr
            indic_area.x2 -= style_indic->body.padding.right;
 801503c:	f8ad 3008 	strh.w	r3, [sp, #8]
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 8015040:	f100 0c01 	add.w	ip, r0, #1
    return area_p->x2 - area_p->x1 + 1;
 8015044:	3301      	adds	r3, #1
    return area_p->y2 - area_p->y1 + 1;
 8015046:	ebac 0c05 	sub.w	ip, ip, r5
    return area_p->x2 - area_p->x1 + 1;
 801504a:	eba3 030e 	sub.w	r3, r3, lr
 801504e:	b21b      	sxth	r3, r3
    return area_p->y2 - area_p->y1 + 1;
 8015050:	fa0f fc8c 	sxth.w	ip, ip
            if(w >= h) {
 8015054:	459c      	cmp	ip, r3
            indic_area.y1 += style_indic->body.padding.top;
 8015056:	f8ad 5006 	strh.w	r5, [sp, #6]
            indic_area.x1 += style_indic->body.padding.left;
 801505a:	f8ad e004 	strh.w	lr, [sp, #4]
            indic_area.y2 -= style_indic->body.padding.bottom;
 801505e:	f8ad 000a 	strh.w	r0, [sp, #10]
 8015062:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8015066:	f9b4 5004 	ldrsh.w	r5, [r4, #4]
            if(w >= h) {
 801506a:	dc4b      	bgt.n	8015104 <lv_bar_design+0x198>
                if(ext->anim_state != LV_BAR_ANIM_STATE_INV) {
 801506c:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8015070:	d03e      	beq.n	80150f0 <lv_bar_design+0x184>
                        (int32_t)((int32_t)w * (ext->anim_start - ext->min_value)) / (ext->max_value - ext->min_value);
 8015072:	f9b4 c006 	ldrsh.w	ip, [r4, #6]
                        (int32_t)((int32_t)w * (ext->anim_end - ext->min_value)) / (ext->max_value - ext->min_value);
 8015076:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
                        (int32_t)((int32_t)w * (ext->anim_start - ext->min_value)) / (ext->max_value - ext->min_value);
 801507a:	ebac 0c01 	sub.w	ip, ip, r1
                        (int32_t)((int32_t)w * (ext->anim_end - ext->min_value)) / (ext->max_value - ext->min_value);
 801507e:	1a40      	subs	r0, r0, r1
                        (int32_t)((int32_t)w * (ext->anim_start - ext->min_value)) / (ext->max_value - ext->min_value);
 8015080:	1a6d      	subs	r5, r5, r1
 8015082:	fb03 fc0c 	mul.w	ip, r3, ip
                        (int32_t)((int32_t)w * (ext->anim_end - ext->min_value)) / (ext->max_value - ext->min_value);
 8015086:	4358      	muls	r0, r3
                        (int32_t)((int32_t)w * (ext->anim_start - ext->min_value)) / (ext->max_value - ext->min_value);
 8015088:	fb9c fcf5 	sdiv	ip, ip, r5
                        (int32_t)((int32_t)w * (ext->anim_end - ext->min_value)) / (ext->max_value - ext->min_value);
 801508c:	fb90 f0f5 	sdiv	r0, r0, r5
                        anim_start_x + (((anim_end_x - anim_start_x) * ext->anim_state) >> LV_BAR_ANIM_STATE_NORM);
 8015090:	fa0f f58c 	sxth.w	r5, ip
 8015094:	b200      	sxth	r0, r0
 8015096:	1b40      	subs	r0, r0, r5
 8015098:	fb09 f000 	mul.w	r0, r9, r0
 801509c:	eb0c 2020 	add.w	r0, ip, r0, asr #8
                    indic_area.x2 =
 80150a0:	f8ad 0008 	strh.w	r0, [sp, #8]
                indic_area.x2 = indic_area.x1 + indic_area.x2 - 1;
 80150a4:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 80150a8:	3801      	subs	r0, #1
 80150aa:	4470      	add	r0, lr
 80150ac:	b200      	sxth	r0, r0
                if(ext->sym && ext->min_value < 0 && ext->max_value > 0) {
 80150ae:	f018 0f01 	tst.w	r8, #1
                indic_area.x2 = indic_area.x1 + indic_area.x2 - 1;
 80150b2:	f8ad 0008 	strh.w	r0, [sp, #8]
                if(ext->sym && ext->min_value < 0 && ext->max_value > 0) {
 80150b6:	d015      	beq.n	80150e4 <lv_bar_design+0x178>
 80150b8:	2900      	cmp	r1, #0
 80150ba:	da13      	bge.n	80150e4 <lv_bar_design+0x178>
 80150bc:	f9b4 4004 	ldrsh.w	r4, [r4, #4]
 80150c0:	2c00      	cmp	r4, #0
 80150c2:	dd0f      	ble.n	80150e4 <lv_bar_design+0x178>
                    zero = indic_area.x1 + (-ext->min_value * w) / (ext->max_value - ext->min_value);
 80150c4:	424d      	negs	r5, r1
 80150c6:	436b      	muls	r3, r5
 80150c8:	1a61      	subs	r1, r4, r1
 80150ca:	fb93 f3f1 	sdiv	r3, r3, r1
 80150ce:	449e      	add	lr, r3
 80150d0:	fa0f fe8e 	sxth.w	lr, lr
                    if(indic_area.x2 > zero)
 80150d4:	4570      	cmp	r0, lr
                        indic_area.x1 = zero;
 80150d6:	bfce      	itee	gt
 80150d8:	f8ad e004 	strhgt.w	lr, [sp, #4]
                        indic_area.x1 = indic_area.x2;
 80150dc:	f8ad 0004 	strhle.w	r0, [sp, #4]
                        indic_area.x2 = zero;
 80150e0:	f8ad e008 	strhle.w	lr, [sp, #8]
            lv_draw_rect(&indic_area, mask, style_indic, opa_scale);
 80150e4:	463b      	mov	r3, r7
 80150e6:	4631      	mov	r1, r6
 80150e8:	a801      	add	r0, sp, #4
 80150ea:	f7fc f9a9 	bl	8011440 <lv_draw_rect>
 80150ee:	e77a      	b.n	8014fe6 <lv_bar_design+0x7a>
                        (int32_t)((int32_t)w * (ext->cur_value - ext->min_value)) / (ext->max_value - ext->min_value);
 80150f0:	f9b4 0000 	ldrsh.w	r0, [r4]
 80150f4:	1a40      	subs	r0, r0, r1
 80150f6:	4358      	muls	r0, r3
 80150f8:	1a6d      	subs	r5, r5, r1
 80150fa:	fb90 f5f5 	sdiv	r5, r0, r5
                    indic_area.x2 =
 80150fe:	f8ad 5008 	strh.w	r5, [sp, #8]
 8015102:	e7cf      	b.n	80150a4 <lv_bar_design+0x138>
                if(ext->anim_state != LV_BAR_ANIM_STATE_INV) {
 8015104:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8015108:	d03d      	beq.n	8015186 <lv_bar_design+0x21a>
                        (int32_t)((int32_t)h * (ext->anim_start - ext->min_value)) / (ext->max_value - ext->min_value);
 801510a:	eba5 0e01 	sub.w	lr, r5, r1
 801510e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
                        (int32_t)((int32_t)h * (ext->anim_end - ext->min_value)) / (ext->max_value - ext->min_value);
 8015112:	f9b4 5008 	ldrsh.w	r5, [r4, #8]
                        (int32_t)((int32_t)h * (ext->anim_start - ext->min_value)) / (ext->max_value - ext->min_value);
 8015116:	1a5b      	subs	r3, r3, r1
                        (int32_t)((int32_t)h * (ext->anim_end - ext->min_value)) / (ext->max_value - ext->min_value);
 8015118:	1a6d      	subs	r5, r5, r1
                        (int32_t)((int32_t)h * (ext->anim_start - ext->min_value)) / (ext->max_value - ext->min_value);
 801511a:	fb0c f303 	mul.w	r3, ip, r3
                        (int32_t)((int32_t)h * (ext->anim_end - ext->min_value)) / (ext->max_value - ext->min_value);
 801511e:	fb0c f505 	mul.w	r5, ip, r5
                        (int32_t)((int32_t)h * (ext->anim_start - ext->min_value)) / (ext->max_value - ext->min_value);
 8015122:	fb93 f3fe 	sdiv	r3, r3, lr
                        (int32_t)((int32_t)h * (ext->anim_end - ext->min_value)) / (ext->max_value - ext->min_value);
 8015126:	fb95 f5fe 	sdiv	r5, r5, lr
                        anim_start_y + (((anim_end_y - anim_start_y) * ext->anim_state) >> LV_BAR_ANIM_STATE_NORM);
 801512a:	fa0f fe83 	sxth.w	lr, r3
 801512e:	b22d      	sxth	r5, r5
 8015130:	eba5 050e 	sub.w	r5, r5, lr
 8015134:	fb09 f905 	mul.w	r9, r9, r5
 8015138:	eb03 2929 	add.w	r9, r3, r9, asr #8
                    indic_area.y1 =
 801513c:	f8ad 9006 	strh.w	r9, [sp, #6]
                indic_area.y1 = indic_area.y2 - indic_area.y1 + 1;
 8015140:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8015144:	f1c3 0301 	rsb	r3, r3, #1
 8015148:	4403      	add	r3, r0
 801514a:	b21b      	sxth	r3, r3
                if(ext->sym && ext->min_value < 0 && ext->max_value > 0) {
 801514c:	f018 0f01 	tst.w	r8, #1
                indic_area.y1 = indic_area.y2 - indic_area.y1 + 1;
 8015150:	f8ad 3006 	strh.w	r3, [sp, #6]
                if(ext->sym && ext->min_value < 0 && ext->max_value > 0) {
 8015154:	d0c6      	beq.n	80150e4 <lv_bar_design+0x178>
 8015156:	2900      	cmp	r1, #0
 8015158:	dac4      	bge.n	80150e4 <lv_bar_design+0x178>
 801515a:	f9b4 4004 	ldrsh.w	r4, [r4, #4]
 801515e:	2c00      	cmp	r4, #0
 8015160:	ddc0      	ble.n	80150e4 <lv_bar_design+0x178>
                    zero = indic_area.y2 - (-ext->min_value * h) / (ext->max_value - ext->min_value);
 8015162:	424d      	negs	r5, r1
 8015164:	fb0c fc05 	mul.w	ip, ip, r5
 8015168:	1a61      	subs	r1, r4, r1
 801516a:	fb9c fcf1 	sdiv	ip, ip, r1
 801516e:	eba0 000c 	sub.w	r0, r0, ip
 8015172:	b200      	sxth	r0, r0
                    if(indic_area.y1 < zero)
 8015174:	4283      	cmp	r3, r0
                        indic_area.y2 = zero;
 8015176:	bfb2      	itee	lt
 8015178:	f8ad 000a 	strhlt.w	r0, [sp, #10]
                        indic_area.y2 = indic_area.y1;
 801517c:	f8ad 300a 	strhge.w	r3, [sp, #10]
                        indic_area.y1 = zero;
 8015180:	f8ad 0006 	strhge.w	r0, [sp, #6]
 8015184:	e7ae      	b.n	80150e4 <lv_bar_design+0x178>
                        (int32_t)((int32_t)h * (ext->cur_value - ext->min_value)) / (ext->max_value - ext->min_value);
 8015186:	f9b4 3000 	ldrsh.w	r3, [r4]
 801518a:	1a5b      	subs	r3, r3, r1
 801518c:	fb0c f303 	mul.w	r3, ip, r3
 8015190:	1a6d      	subs	r5, r5, r1
 8015192:	fb93 f5f5 	sdiv	r5, r3, r5
                    indic_area.y1 =
 8015196:	f8ad 5006 	strh.w	r5, [sp, #6]
 801519a:	e7d1      	b.n	8015140 <lv_bar_design+0x1d4>
    } else if(mode == LV_DESIGN_DRAW_POST) {
 801519c:	2a01      	cmp	r2, #1
 801519e:	f47f af22 	bne.w	8014fe6 <lv_bar_design+0x7a>
        if(lv_obj_is_focused(bar)) {
 80151a2:	f7fa fa30 	bl	800f606 <lv_obj_is_focused>
 80151a6:	4604      	mov	r4, r0
 80151a8:	2800      	cmp	r0, #0
 80151aa:	f43f af1c 	beq.w	8014fe6 <lv_bar_design+0x7a>
            lv_opa_t opa_scale          = lv_obj_get_opa_scale(bar);
 80151ae:	4628      	mov	r0, r5
 80151b0:	f7fa f9b9 	bl	800f526 <lv_obj_get_opa_scale>
            const lv_style_t * style_bg = lv_bar_get_style(bar, LV_BAR_STYLE_BG);
 80151b4:	2100      	movs	r1, #0
            lv_opa_t opa_scale          = lv_obj_get_opa_scale(bar);
 80151b6:	4607      	mov	r7, r0
            const lv_style_t * style_bg = lv_bar_get_style(bar, LV_BAR_STYLE_BG);
 80151b8:	4628      	mov	r0, r5
 80151ba:	f7ff fec5 	bl	8014f48 <lv_bar_get_style>
            lv_style_copy(&style_tmp, style_bg);
 80151be:	4601      	mov	r1, r0
 80151c0:	a801      	add	r0, sp, #4
 80151c2:	f7fa fd5b 	bl	800fc7c <lv_style_copy>
            style_tmp.body.opa          = LV_OPA_TRANSP;
 80151c6:	2200      	movs	r2, #0
 80151c8:	f88d 200c 	strb.w	r2, [sp, #12]
            style_tmp.body.shadow.width = 0;
 80151cc:	f8ad 2016 	strh.w	r2, [sp, #22]
            lv_draw_rect(&bar->coords, mask, &style_tmp, opa_scale);
 80151d0:	463b      	mov	r3, r7
 80151d2:	aa01      	add	r2, sp, #4
 80151d4:	4631      	mov	r1, r6
 80151d6:	f105 0010 	add.w	r0, r5, #16
 80151da:	f7fc f931 	bl	8011440 <lv_draw_rect>
 80151de:	e6d1      	b.n	8014f84 <lv_bar_design+0x18>
 80151e0:	2000b028 	.word	0x2000b028

080151e4 <lv_btn_design>:
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_btn_design(lv_obj_t * btn, const lv_area_t * mask, lv_design_mode_t mode)
{
    if(mode == LV_DESIGN_COVER_CHK) {
 80151e4:	2a02      	cmp	r2, #2
{
 80151e6:	b510      	push	{r4, lr}
    if(mode == LV_DESIGN_COVER_CHK) {
 80151e8:	d008      	beq.n	80151fc <lv_btn_design+0x18>
        return false;
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 80151ea:	b91a      	cbnz	r2, 80151f4 <lv_btn_design+0x10>
        }
#else
        ancestor_design(btn, mask, mode);
#endif
    } else if(mode == LV_DESIGN_DRAW_POST) {
        ancestor_design(btn, mask, mode);
 80151ec:	4b04      	ldr	r3, [pc, #16]	; (8015200 <lv_btn_design+0x1c>)
 80151ee:	681b      	ldr	r3, [r3, #0]
 80151f0:	4798      	blx	r3
 80151f2:	e001      	b.n	80151f8 <lv_btn_design+0x14>
    } else if(mode == LV_DESIGN_DRAW_POST) {
 80151f4:	2a01      	cmp	r2, #1
 80151f6:	d0f9      	beq.n	80151ec <lv_btn_design+0x8>
    }

    return true;
 80151f8:	2001      	movs	r0, #1
}
 80151fa:	bd10      	pop	{r4, pc}
        return false;
 80151fc:	2000      	movs	r0, #0
 80151fe:	bd10      	pop	{r4, pc}
 8015200:	2000b030 	.word	0x2000b030

08015204 <lv_btn_set_state>:
{
 8015204:	b538      	push	{r3, r4, r5, lr}
 8015206:	460c      	mov	r4, r1
 8015208:	4605      	mov	r5, r0
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 801520a:	f7fa f9f4 	bl	800f5f6 <lv_obj_get_ext_attr>
    if(ext->state != state) {
 801520e:	7e03      	ldrb	r3, [r0, #24]
 8015210:	f003 0207 	and.w	r2, r3, #7
 8015214:	42a2      	cmp	r2, r4
 8015216:	d00a      	beq.n	801522e <lv_btn_set_state+0x2a>
        ext->state = state;
 8015218:	f364 0302 	bfi	r3, r4, #0, #3
 801521c:	7603      	strb	r3, [r0, #24]
        lv_obj_set_style(btn, ext->styles[state]);
 801521e:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8015222:	6841      	ldr	r1, [r0, #4]
 8015224:	4628      	mov	r0, r5
}
 8015226:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_obj_set_style(btn, ext->styles[state]);
 801522a:	f7fa b8cb 	b.w	800f3c4 <lv_obj_set_style>
 801522e:	bd38      	pop	{r3, r4, r5, pc}

08015230 <lv_btn_set_style>:
{
 8015230:	b570      	push	{r4, r5, r6, lr}
 8015232:	460d      	mov	r5, r1
 8015234:	4606      	mov	r6, r0
 8015236:	4614      	mov	r4, r2
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8015238:	f7fa f9dd 	bl	800f5f6 <lv_obj_get_ext_attr>
    switch(type) {
 801523c:	2d04      	cmp	r5, #4
 801523e:	d805      	bhi.n	801524c <lv_btn_set_style+0x1c>
 8015240:	e8df f005 	tbb	[pc, r5]
 8015244:	13110f03 	.word	0x13110f03
 8015248:	15          	.byte	0x15
 8015249:	00          	.byte	0x00
        case LV_BTN_STYLE_REL: ext->styles[LV_BTN_STATE_REL] = style; break;
 801524a:	6044      	str	r4, [r0, #4]
    lv_obj_set_style(btn, ext->styles[ext->state]);
 801524c:	7e03      	ldrb	r3, [r0, #24]
 801524e:	f003 0307 	and.w	r3, r3, #7
 8015252:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8015256:	6841      	ldr	r1, [r0, #4]
 8015258:	4630      	mov	r0, r6
}
 801525a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_set_style(btn, ext->styles[ext->state]);
 801525e:	f7fa b8b1 	b.w	800f3c4 <lv_obj_set_style>
        case LV_BTN_STYLE_PR: ext->styles[LV_BTN_STATE_PR] = style; break;
 8015262:	6084      	str	r4, [r0, #8]
 8015264:	e7f2      	b.n	801524c <lv_btn_set_style+0x1c>
        case LV_BTN_STYLE_TGL_REL: ext->styles[LV_BTN_STATE_TGL_REL] = style; break;
 8015266:	60c4      	str	r4, [r0, #12]
 8015268:	e7f0      	b.n	801524c <lv_btn_set_style+0x1c>
        case LV_BTN_STYLE_TGL_PR: ext->styles[LV_BTN_STATE_TGL_PR] = style; break;
 801526a:	6104      	str	r4, [r0, #16]
 801526c:	e7ee      	b.n	801524c <lv_btn_set_style+0x1c>
        case LV_BTN_STYLE_INA: ext->styles[LV_BTN_STATE_INA] = style; break;
 801526e:	6144      	str	r4, [r0, #20]
 8015270:	e7ec      	b.n	801524c <lv_btn_set_style+0x1c>
	...

08015274 <lv_btn_create>:
{
 8015274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015276:	4607      	mov	r7, r0
 8015278:	460e      	mov	r6, r1
    new_btn = lv_cont_create(par, copy);
 801527a:	f000 fac9 	bl	8015810 <lv_cont_create>
    lv_mem_assert(new_btn);
 801527e:	4605      	mov	r5, r0
 8015280:	b900      	cbnz	r0, 8015284 <lv_btn_create+0x10>
 8015282:	e7fe      	b.n	8015282 <lv_btn_create+0xe>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_btn);
 8015284:	4c3a      	ldr	r4, [pc, #232]	; (8015370 <lv_btn_create+0xfc>)
 8015286:	6823      	ldr	r3, [r4, #0]
 8015288:	b913      	cbnz	r3, 8015290 <lv_btn_create+0x1c>
 801528a:	f7fa f9b0 	bl	800f5ee <lv_obj_get_signal_cb>
 801528e:	6020      	str	r0, [r4, #0]
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(new_btn);
 8015290:	4c38      	ldr	r4, [pc, #224]	; (8015374 <lv_btn_create+0x100>)
 8015292:	6823      	ldr	r3, [r4, #0]
 8015294:	b91b      	cbnz	r3, 801529e <lv_btn_create+0x2a>
 8015296:	4628      	mov	r0, r5
 8015298:	f7fa f9ab 	bl	800f5f2 <lv_obj_get_design_cb>
 801529c:	6020      	str	r0, [r4, #0]
    lv_btn_ext_t * ext = lv_obj_allocate_ext_attr(new_btn, sizeof(lv_btn_ext_t));
 801529e:	211c      	movs	r1, #28
 80152a0:	4628      	mov	r0, r5
 80152a2:	f7f9 fafd 	bl	800e8a0 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 80152a6:	4604      	mov	r4, r0
 80152a8:	b900      	cbnz	r0, 80152ac <lv_btn_create+0x38>
 80152aa:	e7fe      	b.n	80152aa <lv_btn_create+0x36>
    ext->styles[LV_BTN_STATE_REL]     = &lv_style_btn_rel;
 80152ac:	4a32      	ldr	r2, [pc, #200]	; (8015378 <lv_btn_create+0x104>)
    ext->state = LV_BTN_STATE_REL;
 80152ae:	7e03      	ldrb	r3, [r0, #24]
    ext->styles[LV_BTN_STATE_REL]     = &lv_style_btn_rel;
 80152b0:	6042      	str	r2, [r0, #4]
    ext->styles[LV_BTN_STATE_PR]      = &lv_style_btn_pr;
 80152b2:	4a32      	ldr	r2, [pc, #200]	; (801537c <lv_btn_create+0x108>)
 80152b4:	6082      	str	r2, [r0, #8]
    ext->styles[LV_BTN_STATE_TGL_REL] = &lv_style_btn_tgl_rel;
 80152b6:	4a32      	ldr	r2, [pc, #200]	; (8015380 <lv_btn_create+0x10c>)
 80152b8:	60c2      	str	r2, [r0, #12]
    ext->toggle = 0;
 80152ba:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    ext->styles[LV_BTN_STATE_TGL_PR]  = &lv_style_btn_tgl_pr;
 80152be:	4a31      	ldr	r2, [pc, #196]	; (8015384 <lv_btn_create+0x110>)
 80152c0:	6102      	str	r2, [r0, #16]
    ext->toggle = 0;
 80152c2:	f36f 03c3 	bfc	r3, #3, #1
    ext->styles[LV_BTN_STATE_INA]     = &lv_style_btn_ina;
 80152c6:	4a30      	ldr	r2, [pc, #192]	; (8015388 <lv_btn_create+0x114>)
 80152c8:	6142      	str	r2, [r0, #20]
    ext->toggle = 0;
 80152ca:	7603      	strb	r3, [r0, #24]
    lv_obj_set_signal_cb(new_btn, lv_btn_signal);
 80152cc:	492f      	ldr	r1, [pc, #188]	; (801538c <lv_btn_create+0x118>)
 80152ce:	4628      	mov	r0, r5
 80152d0:	f7f9 fae2 	bl	800e898 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_btn, lv_btn_design);
 80152d4:	492e      	ldr	r1, [pc, #184]	; (8015390 <lv_btn_create+0x11c>)
 80152d6:	4628      	mov	r0, r5
 80152d8:	f7f9 fae0 	bl	800e89c <lv_obj_set_design_cb>
    if(copy == NULL) {
 80152dc:	bb66      	cbnz	r6, 8015338 <lv_btn_create+0xc4>
        if(par != NULL) {
 80152de:	b11f      	cbz	r7, 80152e8 <lv_btn_create+0x74>
 * @param btn pointer to a button object
 * @param layout a layout from 'lv_cont_layout_t'
 */
static inline void lv_btn_set_layout(lv_obj_t * btn, lv_layout_t layout)
{
    lv_cont_set_layout(btn, layout);
 80152e0:	2101      	movs	r1, #1
 80152e2:	4628      	mov	r0, r5
 80152e4:	f000 faf6 	bl	80158d4 <lv_cont_set_layout>
        lv_obj_set_click(new_btn, true); /*Be sure the button is clickable*/
 80152e8:	2101      	movs	r1, #1
 80152ea:	4628      	mov	r0, r5
 80152ec:	f7f9 fa00 	bl	800e6f0 <lv_obj_set_click>
        lv_theme_t * th = lv_theme_get_current();
 80152f0:	f004 f94c 	bl	801958c <lv_theme_get_current>
        if(th) {
 80152f4:	4606      	mov	r6, r0
 80152f6:	b1d0      	cbz	r0, 801532e <lv_btn_create+0xba>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_REL, th->style.btn.rel);
 80152f8:	6902      	ldr	r2, [r0, #16]
 80152fa:	2100      	movs	r1, #0
 80152fc:	4628      	mov	r0, r5
 80152fe:	f7ff ff97 	bl	8015230 <lv_btn_set_style>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_PR, th->style.btn.pr);
 8015302:	6972      	ldr	r2, [r6, #20]
 8015304:	2101      	movs	r1, #1
 8015306:	4628      	mov	r0, r5
 8015308:	f7ff ff92 	bl	8015230 <lv_btn_set_style>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_TGL_REL, th->style.btn.tgl_rel);
 801530c:	69b2      	ldr	r2, [r6, #24]
 801530e:	2102      	movs	r1, #2
 8015310:	4628      	mov	r0, r5
 8015312:	f7ff ff8d 	bl	8015230 <lv_btn_set_style>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_TGL_PR, th->style.btn.tgl_pr);
 8015316:	69f2      	ldr	r2, [r6, #28]
 8015318:	2103      	movs	r1, #3
 801531a:	4628      	mov	r0, r5
 801531c:	f7ff ff88 	bl	8015230 <lv_btn_set_style>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_INA, th->style.btn.ina);
 8015320:	6a32      	ldr	r2, [r6, #32]
 8015322:	2104      	movs	r1, #4
 8015324:	4628      	mov	r0, r5
 8015326:	f7ff ff83 	bl	8015230 <lv_btn_set_style>
}
 801532a:	4628      	mov	r0, r5
 801532c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            lv_obj_set_style(new_btn, ext->styles[LV_BTN_STATE_REL]);
 801532e:	6861      	ldr	r1, [r4, #4]
 8015330:	4628      	mov	r0, r5
 8015332:	f7fa f847 	bl	800f3c4 <lv_obj_set_style>
 8015336:	e7f8      	b.n	801532a <lv_btn_create+0xb6>
        lv_btn_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8015338:	4630      	mov	r0, r6
 801533a:	f7fa f95c 	bl	800f5f6 <lv_obj_get_ext_attr>
        ext->state              = copy_ext->state;
 801533e:	7e23      	ldrb	r3, [r4, #24]
 8015340:	7e02      	ldrb	r2, [r0, #24]
 8015342:	f362 0302 	bfi	r3, r2, #0, #3
 8015346:	7623      	strb	r3, [r4, #24]
        ext->toggle             = copy_ext->toggle;
 8015348:	7e03      	ldrb	r3, [r0, #24]
 801534a:	7e22      	ldrb	r2, [r4, #24]
 801534c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8015350:	f363 02c3 	bfi	r2, r3, #3, #1
 8015354:	7622      	strb	r2, [r4, #24]
        memcpy(ext->styles, copy_ext->styles, sizeof(ext->styles));
 8015356:	1d03      	adds	r3, r0, #4
 8015358:	3404      	adds	r4, #4
 801535a:	3018      	adds	r0, #24
 801535c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015360:	f844 2b04 	str.w	r2, [r4], #4
 8015364:	4283      	cmp	r3, r0
 8015366:	d1f9      	bne.n	801535c <lv_btn_create+0xe8>
        lv_obj_refresh_style(new_btn);
 8015368:	4628      	mov	r0, r5
 801536a:	f7f9 ff82 	bl	800f272 <lv_obj_refresh_style>
 801536e:	e7dc      	b.n	801532a <lv_btn_create+0xb6>
 8015370:	2000b034 	.word	0x2000b034
 8015374:	2000b030 	.word	0x2000b030
 8015378:	2000c33c 	.word	0x2000c33c
 801537c:	2000c378 	.word	0x2000c378
 8015380:	2000c4e0 	.word	0x2000c4e0
 8015384:	2000c558 	.word	0x2000c558
 8015388:	2000c42c 	.word	0x2000c42c
 801538c:	080153b1 	.word	0x080153b1
 8015390:	080151e5 	.word	0x080151e5

08015394 <lv_btn_get_state>:
{
 8015394:	b508      	push	{r3, lr}
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8015396:	f7fa f92e 	bl	800f5f6 <lv_obj_get_ext_attr>
    return ext->state;
 801539a:	7e00      	ldrb	r0, [r0, #24]
}
 801539c:	f000 0007 	and.w	r0, r0, #7
 80153a0:	bd08      	pop	{r3, pc}

080153a2 <lv_btn_get_toggle>:
{
 80153a2:	b508      	push	{r3, lr}
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 80153a4:	f7fa f927 	bl	800f5f6 <lv_obj_get_ext_attr>
    return ext->toggle != 0 ? true : false;
 80153a8:	7e00      	ldrb	r0, [r0, #24]
}
 80153aa:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 80153ae:	bd08      	pop	{r3, pc}

080153b0 <lv_btn_signal>:
static lv_res_t lv_btn_signal(lv_obj_t * btn, lv_signal_t sign, void * param)
{
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(btn, sign, param);
 80153b0:	4b52      	ldr	r3, [pc, #328]	; (80154fc <lv_btn_signal+0x14c>)
{
 80153b2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    res = ancestor_signal(btn, sign, param);
 80153b6:	681b      	ldr	r3, [r3, #0]
{
 80153b8:	4604      	mov	r4, r0
 80153ba:	460e      	mov	r6, r1
 80153bc:	4617      	mov	r7, r2
    res = ancestor_signal(btn, sign, param);
 80153be:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 80153c0:	2801      	cmp	r0, #1
    res = ancestor_signal(btn, sign, param);
 80153c2:	4605      	mov	r5, r0
    if(res != LV_RES_OK) return res;
 80153c4:	d112      	bne.n	80153ec <lv_btn_signal+0x3c>

    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 80153c6:	4620      	mov	r0, r4
 80153c8:	f7fa f915 	bl	800f5f6 <lv_obj_get_ext_attr>
 80153cc:	4681      	mov	r9, r0
    bool tgl           = lv_btn_get_toggle(btn);
 80153ce:	4620      	mov	r0, r4
 80153d0:	f7ff ffe7 	bl	80153a2 <lv_btn_get_toggle>

    if(sign == LV_SIGNAL_PRESSED) {
 80153d4:	2e07      	cmp	r6, #7
    bool tgl           = lv_btn_get_toggle(btn);
 80153d6:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_PRESSED) {
 80153d8:	d110      	bne.n	80153fc <lv_btn_signal+0x4c>
        /*Refresh the state*/
        if(ext->state == LV_BTN_STATE_REL) {
 80153da:	f899 3018 	ldrb.w	r3, [r9, #24]
 80153de:	f013 0307 	ands.w	r3, r3, #7
 80153e2:	d107      	bne.n	80153f4 <lv_btn_signal+0x44>
            lv_btn_set_state(btn, LV_BTN_STATE_PR);
 80153e4:	4629      	mov	r1, r5
        }
#endif
    } else if(sign == LV_SIGNAL_PRESS_LOST) {
        /*Refresh the state*/
        if(ext->state == LV_BTN_STATE_PR)
            lv_btn_set_state(btn, LV_BTN_STATE_REL);
 80153e6:	4620      	mov	r0, r4
 80153e8:	f7ff ff0c 	bl	8015204 <lv_btn_set_state>
        }
        buf->type[i] = "lv_btn";
    }

    return res;
}
 80153ec:	4628      	mov	r0, r5
 80153ee:	b003      	add	sp, #12
 80153f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        } else if(ext->state == LV_BTN_STATE_TGL_REL) {
 80153f4:	2b02      	cmp	r3, #2
 80153f6:	d1f9      	bne.n	80153ec <lv_btn_signal+0x3c>
            lv_btn_set_state(btn, LV_BTN_STATE_TGL_PR);
 80153f8:	2103      	movs	r1, #3
 80153fa:	e7f4      	b.n	80153e6 <lv_btn_signal+0x36>
    } else if(sign == LV_SIGNAL_PRESS_LOST) {
 80153fc:	2e09      	cmp	r6, #9
 80153fe:	d10b      	bne.n	8015418 <lv_btn_signal+0x68>
        if(ext->state == LV_BTN_STATE_PR)
 8015400:	f899 3018 	ldrb.w	r3, [r9, #24]
 8015404:	f003 0307 	and.w	r3, r3, #7
 8015408:	2b01      	cmp	r3, #1
 801540a:	d101      	bne.n	8015410 <lv_btn_signal+0x60>
            lv_btn_set_state(btn, LV_BTN_STATE_REL);
 801540c:	2100      	movs	r1, #0
 801540e:	e7ea      	b.n	80153e6 <lv_btn_signal+0x36>
        else if(ext->state == LV_BTN_STATE_TGL_PR)
 8015410:	2b03      	cmp	r3, #3
 8015412:	d1eb      	bne.n	80153ec <lv_btn_signal+0x3c>
                lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 8015414:	2102      	movs	r1, #2
 8015416:	e7e6      	b.n	80153e6 <lv_btn_signal+0x36>
    } else if(sign == LV_SIGNAL_PRESSING) {
 8015418:	2e08      	cmp	r6, #8
 801541a:	d105      	bne.n	8015428 <lv_btn_signal+0x78>
        if(lv_indev_is_dragging(param) != false) {
 801541c:	4638      	mov	r0, r7
 801541e:	f7f9 f8e4 	bl	800e5ea <lv_indev_is_dragging>
 8015422:	2800      	cmp	r0, #0
 8015424:	d1ec      	bne.n	8015400 <lv_btn_signal+0x50>
 8015426:	e7e1      	b.n	80153ec <lv_btn_signal+0x3c>
    } else if(sign == LV_SIGNAL_RELEASED) {
 8015428:	2e0a      	cmp	r6, #10
 801542a:	d12c      	bne.n	8015486 <lv_btn_signal+0xd6>
        if(lv_indev_is_dragging(param) == false) {
 801542c:	4638      	mov	r0, r7
 801542e:	f7f9 f8dc 	bl	800e5ea <lv_indev_is_dragging>
 8015432:	f899 3018 	ldrb.w	r3, [r9, #24]
 8015436:	4606      	mov	r6, r0
 8015438:	2800      	cmp	r0, #0
 801543a:	d1e3      	bne.n	8015404 <lv_btn_signal+0x54>
            if(ext->state == LV_BTN_STATE_PR && tgl == false) {
 801543c:	f003 0307 	and.w	r3, r3, #7
 8015440:	2b01      	cmp	r3, #1
            uint32_t toggled = 0;
 8015442:	9001      	str	r0, [sp, #4]
            if(ext->state == LV_BTN_STATE_PR && tgl == false) {
 8015444:	d110      	bne.n	8015468 <lv_btn_signal+0xb8>
 8015446:	f1b8 0f00 	cmp.w	r8, #0
 801544a:	d0df      	beq.n	801540c <lv_btn_signal+0x5c>
                lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 801544c:	2102      	movs	r1, #2
 801544e:	4620      	mov	r0, r4
 8015450:	f7ff fed8 	bl	8015204 <lv_btn_set_state>
                toggled = 1;
 8015454:	9501      	str	r5, [sp, #4]
                res = lv_event_send(btn, LV_EVENT_VALUE_CHANGED, &toggled);
 8015456:	aa01      	add	r2, sp, #4
 8015458:	210e      	movs	r1, #14
 801545a:	4620      	mov	r0, r4
 801545c:	f7f9 f9b8 	bl	800e7d0 <lv_event_send>
                if(res != LV_RES_OK) return res;
 8015460:	2801      	cmp	r0, #1
 8015462:	bf18      	it	ne
 8015464:	4605      	movne	r5, r0
 8015466:	e7c1      	b.n	80153ec <lv_btn_signal+0x3c>
            } else if(ext->state == LV_BTN_STATE_TGL_PR && tgl == false) {
 8015468:	2b03      	cmp	r3, #3
 801546a:	d108      	bne.n	801547e <lv_btn_signal+0xce>
 801546c:	f1b8 0f00 	cmp.w	r8, #0
 8015470:	d0d0      	beq.n	8015414 <lv_btn_signal+0x64>
                lv_btn_set_state(btn, LV_BTN_STATE_REL);
 8015472:	4601      	mov	r1, r0
 8015474:	4620      	mov	r0, r4
 8015476:	f7ff fec5 	bl	8015204 <lv_btn_set_state>
                toggled = 0;
 801547a:	9601      	str	r6, [sp, #4]
 801547c:	e7eb      	b.n	8015456 <lv_btn_signal+0xa6>
            if(tgl) {
 801547e:	f1b8 0f00 	cmp.w	r8, #0
 8015482:	d0b3      	beq.n	80153ec <lv_btn_signal+0x3c>
 8015484:	e7e7      	b.n	8015456 <lv_btn_signal+0xa6>
    } else if(sign == LV_SIGNAL_CONTROL) {
 8015486:	2e11      	cmp	r6, #17
 8015488:	d128      	bne.n	80154dc <lv_btn_signal+0x12c>
        char c = *((char *)param);
 801548a:	783b      	ldrb	r3, [r7, #0]
        if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 801548c:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 8015490:	2a11      	cmp	r2, #17
 8015492:	d111      	bne.n	80154b8 <lv_btn_signal+0x108>
            if(lv_btn_get_toggle(btn)) {
 8015494:	4620      	mov	r0, r4
 8015496:	f7ff ff84 	bl	80153a2 <lv_btn_get_toggle>
 801549a:	2800      	cmp	r0, #0
 801549c:	d0a6      	beq.n	80153ec <lv_btn_signal+0x3c>
                lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 801549e:	2102      	movs	r1, #2
 80154a0:	4620      	mov	r0, r4
 80154a2:	f7ff feaf 	bl	8015204 <lv_btn_set_state>
                uint32_t state = 1;
 80154a6:	aa02      	add	r2, sp, #8
 80154a8:	f842 5d04 	str.w	r5, [r2, #-4]!
                res            = lv_event_send(btn, LV_EVENT_VALUE_CHANGED, &state);
 80154ac:	210e      	movs	r1, #14
 80154ae:	4620      	mov	r0, r4
 80154b0:	f7f9 f98e 	bl	800e7d0 <lv_event_send>
 80154b4:	4605      	mov	r5, r0
 80154b6:	e799      	b.n	80153ec <lv_btn_signal+0x3c>
        } else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 80154b8:	2b14      	cmp	r3, #20
 80154ba:	d001      	beq.n	80154c0 <lv_btn_signal+0x110>
 80154bc:	2b12      	cmp	r3, #18
 80154be:	d195      	bne.n	80153ec <lv_btn_signal+0x3c>
            if(lv_btn_get_toggle(btn)) {
 80154c0:	4620      	mov	r0, r4
 80154c2:	f7ff ff6e 	bl	80153a2 <lv_btn_get_toggle>
 80154c6:	2800      	cmp	r0, #0
 80154c8:	d090      	beq.n	80153ec <lv_btn_signal+0x3c>
                lv_btn_set_state(btn, LV_BTN_STATE_REL);
 80154ca:	2100      	movs	r1, #0
 80154cc:	4620      	mov	r0, r4
 80154ce:	f7ff fe99 	bl	8015204 <lv_btn_set_state>
                uint32_t state = 0;
 80154d2:	aa02      	add	r2, sp, #8
 80154d4:	2300      	movs	r3, #0
 80154d6:	f842 3d04 	str.w	r3, [r2, #-4]!
 80154da:	e7e7      	b.n	80154ac <lv_btn_signal+0xfc>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 80154dc:	2e06      	cmp	r6, #6
 80154de:	d185      	bne.n	80153ec <lv_btn_signal+0x3c>
 80154e0:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 80154e2:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 80154e6:	b2da      	uxtb	r2, r3
 80154e8:	b119      	cbz	r1, 80154f2 <lv_btn_signal+0x142>
 80154ea:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 80154ec:	2b07      	cmp	r3, #7
 80154ee:	d1f8      	bne.n	80154e2 <lv_btn_signal+0x132>
 80154f0:	461a      	mov	r2, r3
        buf->type[i] = "lv_btn";
 80154f2:	4b03      	ldr	r3, [pc, #12]	; (8015500 <lv_btn_signal+0x150>)
 80154f4:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
 80154f8:	e778      	b.n	80153ec <lv_btn_signal+0x3c>
 80154fa:	bf00      	nop
 80154fc:	2000b034 	.word	0x2000b034
 8015500:	080ec3c5 	.word	0x080ec3c5

08015504 <lv_btn_get_style>:
{
 8015504:	b570      	push	{r4, r5, r6, lr}
 8015506:	4606      	mov	r6, r0
 8015508:	460d      	mov	r5, r1
    lv_btn_ext_t * ext       = lv_obj_get_ext_attr(btn);
 801550a:	f7fa f874 	bl	800f5f6 <lv_obj_get_ext_attr>
 801550e:	4604      	mov	r4, r0
    lv_btn_state_t state     = lv_btn_get_state(btn);
 8015510:	4630      	mov	r0, r6
 8015512:	f7ff ff3f 	bl	8015394 <lv_btn_get_state>
    if((type == LV_BTN_STYLE_REL && state == LV_BTN_STATE_REL) ||
 8015516:	b92d      	cbnz	r5, 8015524 <lv_btn_get_style+0x20>
 8015518:	b9e0      	cbnz	r0, 8015554 <lv_btn_get_style+0x50>
        style = lv_obj_get_style(btn);
 801551a:	4630      	mov	r0, r6
}
 801551c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        style = lv_obj_get_style(btn);
 8015520:	f7f9 bf7e 	b.w	800f420 <lv_obj_get_style>
    if((type == LV_BTN_STYLE_REL && state == LV_BTN_STATE_REL) ||
 8015524:	2d01      	cmp	r5, #1
 8015526:	d103      	bne.n	8015530 <lv_btn_get_style+0x2c>
       (type == LV_BTN_STYLE_PR && state == LV_BTN_STATE_PR) ||
 8015528:	2801      	cmp	r0, #1
 801552a:	d0f6      	beq.n	801551a <lv_btn_get_style+0x16>
            case LV_BTN_STYLE_PR: style = ext->styles[LV_BTN_STATE_PR]; break;
 801552c:	68a0      	ldr	r0, [r4, #8]
 801552e:	bd70      	pop	{r4, r5, r6, pc}
       (type == LV_BTN_STYLE_PR && state == LV_BTN_STATE_PR) ||
 8015530:	2d02      	cmp	r5, #2
 8015532:	d103      	bne.n	801553c <lv_btn_get_style+0x38>
       (type == LV_BTN_STYLE_TGL_REL && state == LV_BTN_STATE_TGL_REL) ||
 8015534:	2802      	cmp	r0, #2
 8015536:	d0f0      	beq.n	801551a <lv_btn_get_style+0x16>
            case LV_BTN_STYLE_TGL_REL: style = ext->styles[LV_BTN_STATE_TGL_REL]; break;
 8015538:	68e0      	ldr	r0, [r4, #12]
 801553a:	bd70      	pop	{r4, r5, r6, pc}
       (type == LV_BTN_STYLE_TGL_REL && state == LV_BTN_STATE_TGL_REL) ||
 801553c:	2d03      	cmp	r5, #3
 801553e:	d103      	bne.n	8015548 <lv_btn_get_style+0x44>
       (type == LV_BTN_STYLE_TGL_PR && state == LV_BTN_STATE_TGL_PR) ||
 8015540:	2803      	cmp	r0, #3
 8015542:	d0ea      	beq.n	801551a <lv_btn_get_style+0x16>
            case LV_BTN_STYLE_TGL_PR: style = ext->styles[LV_BTN_STATE_TGL_PR]; break;
 8015544:	6920      	ldr	r0, [r4, #16]
 8015546:	bd70      	pop	{r4, r5, r6, pc}
       (type == LV_BTN_STYLE_TGL_PR && state == LV_BTN_STATE_TGL_PR) ||
 8015548:	2d04      	cmp	r5, #4
 801554a:	d105      	bne.n	8015558 <lv_btn_get_style+0x54>
       (type == LV_BTN_STYLE_INA && state == LV_BTN_STATE_INA)) {
 801554c:	2804      	cmp	r0, #4
 801554e:	d0e4      	beq.n	801551a <lv_btn_get_style+0x16>
            case LV_BTN_STYLE_INA: style = ext->styles[LV_BTN_STATE_INA]; break;
 8015550:	6960      	ldr	r0, [r4, #20]
 8015552:	bd70      	pop	{r4, r5, r6, pc}
            case LV_BTN_STYLE_REL: style = ext->styles[LV_BTN_STATE_REL]; break;
 8015554:	6860      	ldr	r0, [r4, #4]
 8015556:	bd70      	pop	{r4, r5, r6, pc}
            default: style = NULL; break;
 8015558:	2000      	movs	r0, #0
}
 801555a:	bd70      	pop	{r4, r5, r6, pc}

0801555c <lv_cont_refr_autofit>:
/**
 * Handle auto fit. Set the size of the object to involve all children.
 * @param cont pointer to an object which size will be modified
 */
static void lv_cont_refr_autofit(lv_obj_t * cont)
{
 801555c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015560:	b08d      	sub	sp, #52	; 0x34
 8015562:	4604      	mov	r4, r0
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 8015564:	f7fa f847 	bl	800f5f6 <lv_obj_get_ext_attr>

    if(ext->fit_left == LV_FIT_NONE && ext->fit_right == LV_FIT_NONE && ext->fit_top == LV_FIT_NONE &&
 8015568:	7803      	ldrb	r3, [r0, #0]
 801556a:	f013 0ff0 	tst.w	r3, #240	; 0xf0
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 801556e:	4682      	mov	sl, r0
    if(ext->fit_left == LV_FIT_NONE && ext->fit_right == LV_FIT_NONE && ext->fit_top == LV_FIT_NONE &&
 8015570:	d103      	bne.n	801557a <lv_cont_refr_autofit+0x1e>
 8015572:	7843      	ldrb	r3, [r0, #1]
 8015574:	071b      	lsls	r3, r3, #28
 8015576:	f000 80e8 	beq.w	801574a <lv_cont_refr_autofit+0x1ee>
        return;
    }

    lv_area_t tight_area;
    lv_area_t ori;
    const lv_style_t * style = lv_obj_get_style(cont);
 801557a:	4620      	mov	r0, r4
 801557c:	f7f9 ff50 	bl	800f420 <lv_obj_get_style>
 8015580:	4683      	mov	fp, r0
    lv_obj_t * child_i;

    lv_obj_t * par               = lv_obj_get_parent(cont);
 8015582:	4620      	mov	r0, r4
 8015584:	f7f9 fefa 	bl	800f37c <lv_obj_get_parent>
 8015588:	9002      	str	r0, [sp, #8]
    const lv_style_t * par_style = lv_obj_get_style(par);
 801558a:	f7f9 ff49 	bl	800f420 <lv_obj_get_style>
    memcpy(dest, src, sizeof(lv_area_t));
 801558e:	9902      	ldr	r1, [sp, #8]
 8015590:	4603      	mov	r3, r0
 8015592:	f851 0f10 	ldr.w	r0, [r1, #16]!
 8015596:	6849      	ldr	r1, [r1, #4]
 8015598:	aa08      	add	r2, sp, #32
 801559a:	c203      	stmia	r2!, {r0, r1}
    lv_area_t flood_area;
    lv_area_copy(&flood_area, &par->coords);
    flood_area.x1 += par_style->body.padding.left;
 801559c:	8b5a      	ldrh	r2, [r3, #26]
 801559e:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    flood_area.x2 -= par_style->body.padding.right;
 80155a2:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
    flood_area.y1 += par_style->body.padding.top;
 80155a6:	f8bd 6022 	ldrh.w	r6, [sp, #34]	; 0x22
    flood_area.y2 -= par_style->body.padding.bottom;
 80155aa:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
    flood_area.x1 += par_style->body.padding.left;
 80155ae:	4490      	add	r8, r2
    flood_area.x2 -= par_style->body.padding.right;
 80155b0:	8b9a      	ldrh	r2, [r3, #28]
 80155b2:	1abf      	subs	r7, r7, r2
    flood_area.y1 += par_style->body.padding.top;
 80155b4:	8ada      	ldrh	r2, [r3, #22]
    flood_area.y2 -= par_style->body.padding.bottom;
 80155b6:	8b1b      	ldrh	r3, [r3, #24]
    flood_area.y1 += par_style->body.padding.top;
 80155b8:	4416      	add	r6, r2
    flood_area.y2 -= par_style->body.padding.bottom;
 80155ba:	1aed      	subs	r5, r5, r3

    /*Search the side coordinates of the children*/
    lv_obj_get_coords(cont, &ori);
 80155bc:	a906      	add	r1, sp, #24
 80155be:	4620      	mov	r0, r4
    flood_area.x1 += par_style->body.padding.left;
 80155c0:	fa0f f888 	sxth.w	r8, r8
    flood_area.x2 -= par_style->body.padding.right;
 80155c4:	b23f      	sxth	r7, r7
    flood_area.y1 += par_style->body.padding.top;
 80155c6:	b236      	sxth	r6, r6
    flood_area.y2 -= par_style->body.padding.bottom;
 80155c8:	b22d      	sxth	r5, r5
    flood_area.x1 += par_style->body.padding.left;
 80155ca:	f8ad 8020 	strh.w	r8, [sp, #32]
    flood_area.x2 -= par_style->body.padding.right;
 80155ce:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
    flood_area.y1 += par_style->body.padding.top;
 80155d2:	f8ad 6022 	strh.w	r6, [sp, #34]	; 0x22
    flood_area.y2 -= par_style->body.padding.bottom;
 80155d6:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
    lv_obj_get_coords(cont, &tight_area);

    bool has_children = lv_ll_is_empty(&cont->child_ll) ? false : true;
 80155da:	f104 0904 	add.w	r9, r4, #4
    lv_obj_get_coords(cont, &ori);
 80155de:	f7f9 fefb 	bl	800f3d8 <lv_obj_get_coords>
    lv_obj_get_coords(cont, &tight_area);
 80155e2:	a904      	add	r1, sp, #16
 80155e4:	4620      	mov	r0, r4
 80155e6:	f7f9 fef7 	bl	800f3d8 <lv_obj_get_coords>
    bool has_children = lv_ll_is_empty(&cont->child_ll) ? false : true;
 80155ea:	4648      	mov	r0, r9
 80155ec:	f7fe fef9 	bl	80143e2 <lv_ll_is_empty>
 80155f0:	f080 0001 	eor.w	r0, r0, #1

    if(has_children) {
 80155f4:	f010 03ff 	ands.w	r3, r0, #255	; 0xff
 80155f8:	9301      	str	r3, [sp, #4]
 80155fa:	d02e      	beq.n	801565a <lv_cont_refr_autofit+0xfe>
        tight_area.x1 = LV_COORD_MAX;
 80155fc:	f647 4318 	movw	r3, #31768	; 0x7c18
 8015600:	f8ad 3010 	strh.w	r3, [sp, #16]
        tight_area.y1 = LV_COORD_MAX;
 8015604:	f8ad 3012 	strh.w	r3, [sp, #18]
        tight_area.x2 = LV_COORD_MIN;
        tight_area.y2 = LV_COORD_MIN;

        LV_LL_READ(cont->child_ll, child_i)
 8015608:	4648      	mov	r0, r9
        tight_area.x2 = LV_COORD_MIN;
 801560a:	f248 33e8 	movw	r3, #33768	; 0x83e8
 801560e:	f8ad 3014 	strh.w	r3, [sp, #20]
        tight_area.y2 = LV_COORD_MIN;
 8015612:	f8ad 3016 	strh.w	r3, [sp, #22]
        LV_LL_READ(cont->child_ll, child_i)
 8015616:	f7fe fdef 	bl	80141f8 <lv_ll_get_head>
 801561a:	4601      	mov	r1, r0
 801561c:	2800      	cmp	r0, #0
 801561e:	f040 8097 	bne.w	8015750 <lv_cont_refr_autofit+0x1f4>
            tight_area.y1 = LV_MATH_MIN(tight_area.y1, child_i->coords.y1);
            tight_area.x2 = LV_MATH_MAX(tight_area.x2, child_i->coords.x2);
            tight_area.y2 = LV_MATH_MAX(tight_area.y2, child_i->coords.y2);
        }

        tight_area.x1 -= style->body.padding.left;
 8015622:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8015626:	f8bb 201a 	ldrh.w	r2, [fp, #26]
 801562a:	1a9b      	subs	r3, r3, r2
 801562c:	f8ad 3010 	strh.w	r3, [sp, #16]
        tight_area.x2 += style->body.padding.right;
 8015630:	f8bb 201c 	ldrh.w	r2, [fp, #28]
 8015634:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8015638:	4413      	add	r3, r2
 801563a:	f8ad 3014 	strh.w	r3, [sp, #20]
        tight_area.y1 -= style->body.padding.top;
 801563e:	f8bb 2016 	ldrh.w	r2, [fp, #22]
 8015642:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8015646:	1a9b      	subs	r3, r3, r2
 8015648:	f8ad 3012 	strh.w	r3, [sp, #18]
        tight_area.y2 += style->body.padding.bottom;
 801564c:	f8bb 2018 	ldrh.w	r2, [fp, #24]
 8015650:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8015654:	4413      	add	r3, r2
 8015656:	f8ad 3016 	strh.w	r3, [sp, #22]
 801565a:	ab06      	add	r3, sp, #24
 801565c:	e893 0003 	ldmia.w	r3, {r0, r1}
    }

    lv_area_t new_area;
    lv_area_copy(&new_area, &ori);

    switch(ext->fit_left) {
 8015660:	f89a 3000 	ldrb.w	r3, [sl]
 8015664:	f3c3 1201 	ubfx	r2, r3, #4, #2
 8015668:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
 801566c:	2a02      	cmp	r2, #2
 801566e:	e88b 0003 	stmia.w	fp, {r0, r1}
 8015672:	f000 80a2 	beq.w	80157ba <lv_cont_refr_autofit+0x25e>
 8015676:	f200 8099 	bhi.w	80157ac <lv_cont_refr_autofit+0x250>
 801567a:	2a01      	cmp	r2, #1
 801567c:	d103      	bne.n	8015686 <lv_cont_refr_autofit+0x12a>
        case LV_FIT_TIGHT: new_area.x1 = tight_area.x1; break;
 801567e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8015682:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
        case LV_FIT_FLOOD: new_area.x1 = flood_area.x1; break;
        case LV_FIT_FILL: new_area.x1 = has_children ? LV_MATH_MIN(tight_area.x1, flood_area.x1) : flood_area.x1; break;
        default: break;
    }

    switch(ext->fit_right) {
 8015686:	099b      	lsrs	r3, r3, #6
 8015688:	2b02      	cmp	r3, #2
 801568a:	f000 80a0 	beq.w	80157ce <lv_cont_refr_autofit+0x272>
 801568e:	f200 8097 	bhi.w	80157c0 <lv_cont_refr_autofit+0x264>
 8015692:	2b01      	cmp	r3, #1
 8015694:	d103      	bne.n	801569e <lv_cont_refr_autofit+0x142>
        case LV_FIT_TIGHT: new_area.x2 = tight_area.x2; break;
 8015696:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801569a:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
        case LV_FIT_FLOOD: new_area.x2 = flood_area.x2; break;
        case LV_FIT_FILL: new_area.x2 = has_children ? LV_MATH_MAX(tight_area.x2, flood_area.x2) : flood_area.x2; break;
        default: break;
    }

    switch(ext->fit_top) {
 801569e:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80156a2:	f003 0203 	and.w	r2, r3, #3
 80156a6:	2a02      	cmp	r2, #2
 80156a8:	f000 809b 	beq.w	80157e2 <lv_cont_refr_autofit+0x286>
 80156ac:	f200 8092 	bhi.w	80157d4 <lv_cont_refr_autofit+0x278>
 80156b0:	2a01      	cmp	r2, #1
 80156b2:	d103      	bne.n	80156bc <lv_cont_refr_autofit+0x160>
        case LV_FIT_TIGHT: new_area.y1 = tight_area.y1; break;
 80156b4:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80156b8:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
        case LV_FIT_FLOOD: new_area.y1 = flood_area.y1; break;
        case LV_FIT_FILL: new_area.y1 = has_children ? LV_MATH_MIN(tight_area.y1, flood_area.y1) : flood_area.y1; break;
        default: break;
    }

    switch(ext->fit_bottom) {
 80156bc:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80156c0:	2b02      	cmp	r3, #2
 80156c2:	f000 8098 	beq.w	80157f6 <lv_cont_refr_autofit+0x29a>
 80156c6:	f200 808f 	bhi.w	80157e8 <lv_cont_refr_autofit+0x28c>
 80156ca:	2b01      	cmp	r3, #1
 80156cc:	d103      	bne.n	80156d6 <lv_cont_refr_autofit+0x17a>
        case LV_FIT_TIGHT: new_area.y2 = tight_area.y2; break;
 80156ce:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80156d2:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
        case LV_FIT_FILL: new_area.y2 = has_children ? LV_MATH_MAX(tight_area.y2, flood_area.y2) : flood_area.y2; break;
        default: break;
    }

    /*Do nothing if the coordinates are not changed*/
    if(cont->coords.x1 != new_area.x1 || cont->coords.y1 != new_area.y1 || cont->coords.x2 != new_area.x2 ||
 80156d6:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 80156da:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 80156de:	429a      	cmp	r2, r3
 80156e0:	d111      	bne.n	8015706 <lv_cont_refr_autofit+0x1aa>
 80156e2:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 80156e6:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 80156ea:	429a      	cmp	r2, r3
 80156ec:	d10b      	bne.n	8015706 <lv_cont_refr_autofit+0x1aa>
 80156ee:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 80156f2:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 80156f6:	429a      	cmp	r2, r3
 80156f8:	d105      	bne.n	8015706 <lv_cont_refr_autofit+0x1aa>
 80156fa:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 80156fe:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8015702:	429a      	cmp	r2, r3
 8015704:	d021      	beq.n	801574a <lv_cont_refr_autofit+0x1ee>
       cont->coords.y2 != new_area.y2) {

        lv_obj_invalidate(cont);
 8015706:	4620      	mov	r0, r4
 8015708:	f7f9 f8f8 	bl	800e8fc <lv_obj_invalidate>
 801570c:	465b      	mov	r3, fp
 801570e:	cb03      	ldmia	r3!, {r0, r1}
 8015710:	6120      	str	r0, [r4, #16]
 8015712:	6161      	str	r1, [r4, #20]
        lv_area_copy(&cont->coords, &new_area);
        lv_obj_invalidate(cont);
 8015714:	4620      	mov	r0, r4
 8015716:	f7f9 f8f1 	bl	800e8fc <lv_obj_invalidate>

        /*Notify the object about its new coordinates*/
        cont->signal_cb(cont, LV_SIGNAL_CORD_CHG, &ori);
 801571a:	69e3      	ldr	r3, [r4, #28]
 801571c:	aa06      	add	r2, sp, #24
 801571e:	2102      	movs	r1, #2
 8015720:	4620      	mov	r0, r4
 8015722:	4798      	blx	r3

        /*Inform the parent about the new coordinates*/
        par->signal_cb(par, LV_SIGNAL_CHILD_CHG, cont);
 8015724:	9b02      	ldr	r3, [sp, #8]
 8015726:	9802      	ldr	r0, [sp, #8]
 8015728:	69db      	ldr	r3, [r3, #28]
 801572a:	4622      	mov	r2, r4
 801572c:	2101      	movs	r1, #1
 801572e:	4798      	blx	r3

        if(lv_obj_get_auto_realign(cont)) {
 8015730:	4620      	mov	r0, r4
 8015732:	f7f9 fe6f 	bl	800f414 <lv_obj_get_auto_realign>
 8015736:	b110      	cbz	r0, 801573e <lv_cont_refr_autofit+0x1e2>
            lv_obj_realign(cont);
 8015738:	4620      	mov	r0, r4
 801573a:	f7f9 fbad 	bl	800ee98 <lv_obj_realign>
        }

        /*Tell the children the parent's size has changed*/
        LV_LL_READ(cont->child_ll, child_i)
 801573e:	4648      	mov	r0, r9
 8015740:	f7fe fd5a 	bl	80141f8 <lv_ll_get_head>
 8015744:	4604      	mov	r4, r0
 8015746:	2800      	cmp	r0, #0
 8015748:	d158      	bne.n	80157fc <lv_cont_refr_autofit+0x2a0>
        {
            child_i->signal_cb(child_i, LV_SIGNAL_PARENT_SIZE_CHG, NULL);
        }
    }
}
 801574a:	b00d      	add	sp, #52	; 0x34
 801574c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(lv_obj_get_hidden(child_i) != false) continue;
 8015750:	4608      	mov	r0, r1
 8015752:	9103      	str	r1, [sp, #12]
 8015754:	f7f9 fee2 	bl	800f51c <lv_obj_get_hidden>
 8015758:	9903      	ldr	r1, [sp, #12]
 801575a:	bb18      	cbnz	r0, 80157a4 <lv_cont_refr_autofit+0x248>
            tight_area.x1 = LV_MATH_MIN(tight_area.x1, child_i->coords.x1);
 801575c:	f9b1 3010 	ldrsh.w	r3, [r1, #16]
 8015760:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8015764:	4293      	cmp	r3, r2
 8015766:	bfa8      	it	ge
 8015768:	4613      	movge	r3, r2
 801576a:	f8ad 3010 	strh.w	r3, [sp, #16]
            tight_area.y1 = LV_MATH_MIN(tight_area.y1, child_i->coords.y1);
 801576e:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 8015772:	f9b1 3012 	ldrsh.w	r3, [r1, #18]
 8015776:	4293      	cmp	r3, r2
 8015778:	bfa8      	it	ge
 801577a:	4613      	movge	r3, r2
 801577c:	f8ad 3012 	strh.w	r3, [sp, #18]
            tight_area.x2 = LV_MATH_MAX(tight_area.x2, child_i->coords.x2);
 8015780:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8015784:	f9b1 3014 	ldrsh.w	r3, [r1, #20]
 8015788:	4293      	cmp	r3, r2
 801578a:	bfb8      	it	lt
 801578c:	4613      	movlt	r3, r2
 801578e:	f8ad 3014 	strh.w	r3, [sp, #20]
            tight_area.y2 = LV_MATH_MAX(tight_area.y2, child_i->coords.y2);
 8015792:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 8015796:	f9b1 3016 	ldrsh.w	r3, [r1, #22]
 801579a:	4293      	cmp	r3, r2
 801579c:	bfb8      	it	lt
 801579e:	4613      	movlt	r3, r2
 80157a0:	f8ad 3016 	strh.w	r3, [sp, #22]
        LV_LL_READ(cont->child_ll, child_i)
 80157a4:	4648      	mov	r0, r9
 80157a6:	f7fe fd2d 	bl	8014204 <lv_ll_get_next>
 80157aa:	e736      	b.n	801561a <lv_cont_refr_autofit+0xbe>
        case LV_FIT_FILL: new_area.x1 = has_children ? LV_MATH_MIN(tight_area.x1, flood_area.x1) : flood_area.x1; break;
 80157ac:	9a01      	ldr	r2, [sp, #4]
 80157ae:	b122      	cbz	r2, 80157ba <lv_cont_refr_autofit+0x25e>
 80157b0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80157b4:	4590      	cmp	r8, r2
 80157b6:	bfa8      	it	ge
 80157b8:	4690      	movge	r8, r2
 80157ba:	f8ad 8028 	strh.w	r8, [sp, #40]	; 0x28
 80157be:	e762      	b.n	8015686 <lv_cont_refr_autofit+0x12a>
        case LV_FIT_FILL: new_area.x2 = has_children ? LV_MATH_MAX(tight_area.x2, flood_area.x2) : flood_area.x2; break;
 80157c0:	9b01      	ldr	r3, [sp, #4]
 80157c2:	b123      	cbz	r3, 80157ce <lv_cont_refr_autofit+0x272>
 80157c4:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80157c8:	429f      	cmp	r7, r3
 80157ca:	bfb8      	it	lt
 80157cc:	461f      	movlt	r7, r3
 80157ce:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
 80157d2:	e764      	b.n	801569e <lv_cont_refr_autofit+0x142>
        case LV_FIT_FILL: new_area.y1 = has_children ? LV_MATH_MIN(tight_area.y1, flood_area.y1) : flood_area.y1; break;
 80157d4:	9a01      	ldr	r2, [sp, #4]
 80157d6:	b122      	cbz	r2, 80157e2 <lv_cont_refr_autofit+0x286>
 80157d8:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 80157dc:	4296      	cmp	r6, r2
 80157de:	bfa8      	it	ge
 80157e0:	4616      	movge	r6, r2
 80157e2:	f8ad 602a 	strh.w	r6, [sp, #42]	; 0x2a
 80157e6:	e769      	b.n	80156bc <lv_cont_refr_autofit+0x160>
        case LV_FIT_FILL: new_area.y2 = has_children ? LV_MATH_MAX(tight_area.y2, flood_area.y2) : flood_area.y2; break;
 80157e8:	9b01      	ldr	r3, [sp, #4]
 80157ea:	b123      	cbz	r3, 80157f6 <lv_cont_refr_autofit+0x29a>
 80157ec:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80157f0:	429d      	cmp	r5, r3
 80157f2:	bfb8      	it	lt
 80157f4:	461d      	movlt	r5, r3
 80157f6:	f8ad 502e 	strh.w	r5, [sp, #46]	; 0x2e
 80157fa:	e76c      	b.n	80156d6 <lv_cont_refr_autofit+0x17a>
            child_i->signal_cb(child_i, LV_SIGNAL_PARENT_SIZE_CHG, NULL);
 80157fc:	69e3      	ldr	r3, [r4, #28]
 80157fe:	2200      	movs	r2, #0
 8015800:	2103      	movs	r1, #3
 8015802:	4620      	mov	r0, r4
 8015804:	4798      	blx	r3
        LV_LL_READ(cont->child_ll, child_i)
 8015806:	4621      	mov	r1, r4
 8015808:	4648      	mov	r0, r9
 801580a:	f7fe fcfb 	bl	8014204 <lv_ll_get_next>
 801580e:	e799      	b.n	8015744 <lv_cont_refr_autofit+0x1e8>

08015810 <lv_cont_create>:
{
 8015810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015812:	4607      	mov	r7, r0
 8015814:	460e      	mov	r6, r1
    lv_obj_t * new_cont = lv_obj_create(par, copy);
 8015816:	f7f9 fb55 	bl	800eec4 <lv_obj_create>
    lv_mem_assert(new_cont);
 801581a:	4605      	mov	r5, r0
 801581c:	b900      	cbnz	r0, 8015820 <lv_cont_create+0x10>
 801581e:	e7fe      	b.n	801581e <lv_cont_create+0xe>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_cont);
 8015820:	4c29      	ldr	r4, [pc, #164]	; (80158c8 <lv_cont_create+0xb8>)
 8015822:	6823      	ldr	r3, [r4, #0]
 8015824:	b913      	cbnz	r3, 801582c <lv_cont_create+0x1c>
 8015826:	f7f9 fee2 	bl	800f5ee <lv_obj_get_signal_cb>
 801582a:	6020      	str	r0, [r4, #0]
    lv_obj_allocate_ext_attr(new_cont, sizeof(lv_cont_ext_t));
 801582c:	2102      	movs	r1, #2
 801582e:	4628      	mov	r0, r5
 8015830:	f7f9 f836 	bl	800e8a0 <lv_obj_allocate_ext_attr>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(new_cont);
 8015834:	4628      	mov	r0, r5
 8015836:	f7f9 fede 	bl	800f5f6 <lv_obj_get_ext_attr>
    if(ext == NULL) return NULL;
 801583a:	4604      	mov	r4, r0
 801583c:	2800      	cmp	r0, #0
 801583e:	d041      	beq.n	80158c4 <lv_cont_create+0xb4>
    ext->fit_left   = LV_FIT_NONE;
 8015840:	7803      	ldrb	r3, [r0, #0]
    ext->fit_top    = LV_FIT_NONE;
 8015842:	7842      	ldrb	r2, [r0, #1]
    lv_obj_set_signal_cb(new_cont, lv_cont_signal);
 8015844:	4921      	ldr	r1, [pc, #132]	; (80158cc <lv_cont_create+0xbc>)
    ext->fit_bottom = LV_FIT_NONE;
 8015846:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    ext->layout     = LV_LAYOUT_OFF;
 801584a:	f003 030f 	and.w	r3, r3, #15
    ext->fit_bottom = LV_FIT_NONE;
 801584e:	f36f 0283 	bfc	r2, #2, #2
    ext->layout     = LV_LAYOUT_OFF;
 8015852:	f36f 0303 	bfc	r3, #0, #4
    ext->fit_bottom = LV_FIT_NONE;
 8015856:	7042      	strb	r2, [r0, #1]
    ext->layout     = LV_LAYOUT_OFF;
 8015858:	7003      	strb	r3, [r0, #0]
    lv_obj_set_signal_cb(new_cont, lv_cont_signal);
 801585a:	4628      	mov	r0, r5
 801585c:	f7f9 f81c 	bl	800e898 <lv_obj_set_signal_cb>
    if(copy == NULL) {
 8015860:	b95e      	cbnz	r6, 801587a <lv_cont_create+0x6a>
        if(par != NULL) {
 8015862:	b137      	cbz	r7, 8015872 <lv_cont_create+0x62>
            lv_theme_t * th = lv_theme_get_current();
 8015864:	f003 fe92 	bl	801958c <lv_theme_get_current>
            if(th) {
 8015868:	b128      	cbz	r0, 8015876 <lv_cont_create+0x66>
 * @param style pointer to the new style
 */
static inline void lv_cont_set_style(lv_obj_t * cont, lv_cont_style_t type, const lv_style_t * style)
{
    (void)type; /*Unused*/
    lv_obj_set_style(cont, style);
 801586a:	68c1      	ldr	r1, [r0, #12]
 801586c:	4628      	mov	r0, r5
 801586e:	f7f9 fda9 	bl	800f3c4 <lv_obj_set_style>
}
 8015872:	4628      	mov	r0, r5
 8015874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015876:	4916      	ldr	r1, [pc, #88]	; (80158d0 <lv_cont_create+0xc0>)
 8015878:	e7f8      	b.n	801586c <lv_cont_create+0x5c>
        lv_cont_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 801587a:	4630      	mov	r0, r6
 801587c:	f7f9 febb 	bl	800f5f6 <lv_obj_get_ext_attr>
        ext->fit_left            = copy_ext->fit_left;
 8015880:	7803      	ldrb	r3, [r0, #0]
 8015882:	7822      	ldrb	r2, [r4, #0]
 8015884:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8015888:	f363 1205 	bfi	r2, r3, #4, #2
 801588c:	7022      	strb	r2, [r4, #0]
        ext->fit_right           = copy_ext->fit_right;
 801588e:	7803      	ldrb	r3, [r0, #0]
 8015890:	b2d2      	uxtb	r2, r2
 8015892:	099b      	lsrs	r3, r3, #6
 8015894:	f363 1287 	bfi	r2, r3, #6, #2
 8015898:	7022      	strb	r2, [r4, #0]
        ext->fit_top             = copy_ext->fit_top;
 801589a:	7842      	ldrb	r2, [r0, #1]
 801589c:	7863      	ldrb	r3, [r4, #1]
 801589e:	f362 0301 	bfi	r3, r2, #0, #2
 80158a2:	7063      	strb	r3, [r4, #1]
        ext->fit_bottom          = copy_ext->fit_bottom;
 80158a4:	7843      	ldrb	r3, [r0, #1]
 80158a6:	7862      	ldrb	r2, [r4, #1]
 80158a8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80158ac:	f363 0283 	bfi	r2, r3, #2, #2
 80158b0:	7062      	strb	r2, [r4, #1]
        ext->layout              = copy_ext->layout;
 80158b2:	7802      	ldrb	r2, [r0, #0]
 80158b4:	7823      	ldrb	r3, [r4, #0]
 80158b6:	f362 0303 	bfi	r3, r2, #0, #4
 80158ba:	7023      	strb	r3, [r4, #0]
        lv_obj_refresh_style(new_cont);
 80158bc:	4628      	mov	r0, r5
 80158be:	f7f9 fcd8 	bl	800f272 <lv_obj_refresh_style>
 80158c2:	e7d6      	b.n	8015872 <lv_cont_create+0x62>
    if(ext == NULL) return NULL;
 80158c4:	4605      	mov	r5, r0
 80158c6:	e7d4      	b.n	8015872 <lv_cont_create+0x62>
 80158c8:	2000b038 	.word	0x2000b038
 80158cc:	08015ec1 	.word	0x08015ec1
 80158d0:	2000c3b4 	.word	0x2000c3b4

080158d4 <lv_cont_set_layout>:
{
 80158d4:	b570      	push	{r4, r5, r6, lr}
 80158d6:	460d      	mov	r5, r1
 80158d8:	4604      	mov	r4, r0
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 80158da:	f7f9 fe8c 	bl	800f5f6 <lv_obj_get_ext_attr>
    if(ext->layout == layout) return;
 80158de:	7803      	ldrb	r3, [r0, #0]
 80158e0:	f003 020f 	and.w	r2, r3, #15
 80158e4:	42aa      	cmp	r2, r5
 80158e6:	d009      	beq.n	80158fc <lv_cont_set_layout+0x28>
    ext->layout = layout;
 80158e8:	f365 0303 	bfi	r3, r5, #0, #4
 80158ec:	7003      	strb	r3, [r0, #0]
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
 80158ee:	2200      	movs	r2, #0
 80158f0:	69e3      	ldr	r3, [r4, #28]
 80158f2:	4620      	mov	r0, r4
 80158f4:	2101      	movs	r1, #1
}
 80158f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
 80158fa:	4718      	bx	r3
 80158fc:	bd70      	pop	{r4, r5, r6, pc}

080158fe <lv_cont_set_fit4>:
{
 80158fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015902:	4605      	mov	r5, r0
 8015904:	4689      	mov	r9, r1
 8015906:	4690      	mov	r8, r2
 8015908:	461f      	mov	r7, r3
 801590a:	f89d 6020 	ldrb.w	r6, [sp, #32]
    lv_obj_invalidate(cont);
 801590e:	f7f8 fff5 	bl	800e8fc <lv_obj_invalidate>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 8015912:	4628      	mov	r0, r5
 8015914:	f7f9 fe6f 	bl	800f5f6 <lv_obj_get_ext_attr>
    if(ext->fit_left == left && ext->fit_right == right && ext->fit_top == top && ext->fit_bottom == bottom) {
 8015918:	7803      	ldrb	r3, [r0, #0]
 801591a:	f3c3 1201 	ubfx	r2, r3, #4, #2
 801591e:	454a      	cmp	r2, r9
 8015920:	d10b      	bne.n	801593a <lv_cont_set_fit4+0x3c>
 8015922:	ebb8 1f93 	cmp.w	r8, r3, lsr #6
 8015926:	d108      	bne.n	801593a <lv_cont_set_fit4+0x3c>
 8015928:	7844      	ldrb	r4, [r0, #1]
 801592a:	f004 0303 	and.w	r3, r4, #3
 801592e:	42bb      	cmp	r3, r7
 8015930:	d103      	bne.n	801593a <lv_cont_set_fit4+0x3c>
 8015932:	f3c4 0481 	ubfx	r4, r4, #2, #2
 8015936:	42b4      	cmp	r4, r6
 8015938:	d014      	beq.n	8015964 <lv_cont_set_fit4+0x66>
    ext->fit_left   = left;
 801593a:	7804      	ldrb	r4, [r0, #0]
    ext->fit_top    = top;
 801593c:	7842      	ldrb	r2, [r0, #1]
    ext->fit_left   = left;
 801593e:	f369 1405 	bfi	r4, r9, #4, #2
    ext->fit_top    = top;
 8015942:	f367 0201 	bfi	r2, r7, #0, #2
    ext->fit_right  = right;
 8015946:	4621      	mov	r1, r4
    ext->fit_bottom = bottom;
 8015948:	4613      	mov	r3, r2
    ext->fit_right  = right;
 801594a:	f368 1187 	bfi	r1, r8, #6, #2
    ext->fit_bottom = bottom;
 801594e:	f366 0383 	bfi	r3, r6, #2, #2
    ext->fit_right  = right;
 8015952:	7001      	strb	r1, [r0, #0]
    ext->fit_bottom = bottom;
 8015954:	7043      	strb	r3, [r0, #1]
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
 8015956:	2200      	movs	r2, #0
 8015958:	69eb      	ldr	r3, [r5, #28]
 801595a:	4628      	mov	r0, r5
 801595c:	2101      	movs	r1, #1
}
 801595e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
 8015962:	4718      	bx	r3
 8015964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08015968 <lv_cont_get_layout>:
{
 8015968:	b508      	push	{r3, lr}
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 801596a:	f7f9 fe44 	bl	800f5f6 <lv_obj_get_ext_attr>
    return ext->layout;
 801596e:	7800      	ldrb	r0, [r0, #0]
}
 8015970:	f000 000f 	and.w	r0, r0, #15
 8015974:	bd08      	pop	{r3, pc}

08015976 <lv_cont_refr_layout>:
{
 8015976:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801597a:	b087      	sub	sp, #28
 801597c:	4604      	mov	r4, r0
    lv_layout_t type = lv_cont_get_layout(cont);
 801597e:	f7ff fff3 	bl	8015968 <lv_cont_get_layout>
    if(lv_obj_get_child(cont, NULL) == NULL) return;
 8015982:	2100      	movs	r1, #0
    lv_layout_t type = lv_cont_get_layout(cont);
 8015984:	4605      	mov	r5, r0
    if(lv_obj_get_child(cont, NULL) == NULL) return;
 8015986:	4620      	mov	r0, r4
 8015988:	f7f9 fcfa 	bl	800f380 <lv_obj_get_child>
 801598c:	2800      	cmp	r0, #0
 801598e:	f000 8293 	beq.w	8015eb8 <lv_cont_refr_layout+0x542>
    if(type == LV_LAYOUT_OFF) return;
 8015992:	2d00      	cmp	r5, #0
 8015994:	f000 8290 	beq.w	8015eb8 <lv_cont_refr_layout+0x542>
    if(type == LV_LAYOUT_CENTER) {
 8015998:	2d01      	cmp	r5, #1
 801599a:	d16a      	bne.n	8015a72 <lv_cont_refr_layout+0xfc>
    const lv_style_t * style = lv_obj_get_style(cont);
 801599c:	4620      	mov	r0, r4
 801599e:	f7f9 fd3f 	bl	800f420 <lv_obj_get_style>
    LV_LL_READ(cont->child_ll, child)
 80159a2:	1d26      	adds	r6, r4, #4
    const lv_style_t * style = lv_obj_get_style(cont);
 80159a4:	4607      	mov	r7, r0
    LV_LL_READ(cont->child_ll, child)
 80159a6:	4630      	mov	r0, r6
 80159a8:	f7fe fc26 	bl	80141f8 <lv_ll_get_head>
    lv_coord_t h_tot         = 0;
 80159ac:	2500      	movs	r5, #0
    LV_LL_READ(cont->child_ll, child)
 80159ae:	4680      	mov	r8, r0
    uint32_t obj_num         = 0;
 80159b0:	46a9      	mov	r9, r5
    LV_LL_READ(cont->child_ll, child)
 80159b2:	f1b8 0f00 	cmp.w	r8, #0
 80159b6:	d11d      	bne.n	80159f4 <lv_cont_refr_layout+0x7e>
    if(obj_num == 0) return;
 80159b8:	f1b9 0f00 	cmp.w	r9, #0
 80159bc:	f000 827c 	beq.w	8015eb8 <lv_cont_refr_layout+0x542>
    h_tot -= style->body.padding.inner;
 80159c0:	8bf8      	ldrh	r0, [r7, #30]
 80159c2:	1a2d      	subs	r5, r5, r0
 80159c4:	b2ad      	uxth	r5, r5
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 80159c6:	4620      	mov	r0, r4
 80159c8:	2101      	movs	r1, #1
 80159ca:	f7f8 fead 	bl	800e728 <lv_obj_set_protect>
    lv_coord_t last_cord = -(h_tot / 2);
 80159ce:	b22d      	sxth	r5, r5
 80159d0:	f04f 0902 	mov.w	r9, #2
    LV_LL_READ_BACK(cont->child_ll, child)
 80159d4:	4630      	mov	r0, r6
    lv_coord_t last_cord = -(h_tot / 2);
 80159d6:	fb95 f5f9 	sdiv	r5, r5, r9
 80159da:	426d      	negs	r5, r5
 80159dc:	b22d      	sxth	r5, r5
    LV_LL_READ_BACK(cont->child_ll, child)
 80159de:	f7fe fc0e 	bl	80141fe <lv_ll_get_tail>
 80159e2:	4680      	mov	r8, r0
 80159e4:	b9f8      	cbnz	r0, 8015a26 <lv_cont_refr_layout+0xb0>
    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
 80159e6:	2101      	movs	r1, #1
 80159e8:	4620      	mov	r0, r4
}
 80159ea:	b007      	add	sp, #28
 80159ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
 80159f0:	f7f8 bea0 	b.w	800e734 <lv_obj_clear_protect>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 80159f4:	4640      	mov	r0, r8
 80159f6:	f7f9 fd91 	bl	800f51c <lv_obj_get_hidden>
 80159fa:	b970      	cbnz	r0, 8015a1a <lv_cont_refr_layout+0xa4>
 80159fc:	2104      	movs	r1, #4
 80159fe:	4640      	mov	r0, r8
 8015a00:	f7f9 fdee 	bl	800f5e0 <lv_obj_is_protected>
 8015a04:	b948      	cbnz	r0, 8015a1a <lv_cont_refr_layout+0xa4>
        h_tot += lv_obj_get_height(child) + style->body.padding.inner;
 8015a06:	4640      	mov	r0, r8
 8015a08:	f7f9 fcfe 	bl	800f408 <lv_obj_get_height>
 8015a0c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8015a10:	4418      	add	r0, r3
 8015a12:	4405      	add	r5, r0
 8015a14:	b22d      	sxth	r5, r5
        obj_num++;
 8015a16:	f109 0901 	add.w	r9, r9, #1
    LV_LL_READ(cont->child_ll, child)
 8015a1a:	4641      	mov	r1, r8
 8015a1c:	4630      	mov	r0, r6
 8015a1e:	f7fe fbf1 	bl	8014204 <lv_ll_get_next>
 8015a22:	4680      	mov	r8, r0
 8015a24:	e7c5      	b.n	80159b2 <lv_cont_refr_layout+0x3c>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 8015a26:	4640      	mov	r0, r8
 8015a28:	f7f9 fd78 	bl	800f51c <lv_obj_get_hidden>
 8015a2c:	b9e0      	cbnz	r0, 8015a68 <lv_cont_refr_layout+0xf2>
 8015a2e:	2104      	movs	r1, #4
 8015a30:	4640      	mov	r0, r8
 8015a32:	f7f9 fdd5 	bl	800f5e0 <lv_obj_is_protected>
 8015a36:	4682      	mov	sl, r0
 8015a38:	b9b0      	cbnz	r0, 8015a68 <lv_cont_refr_layout+0xf2>
        lv_obj_align(child, cont, LV_ALIGN_CENTER, 0, last_cord + lv_obj_get_height(child) / 2);
 8015a3a:	4640      	mov	r0, r8
 8015a3c:	f7f9 fce4 	bl	800f408 <lv_obj_get_height>
 8015a40:	b2ad      	uxth	r5, r5
 8015a42:	fb90 f0f9 	sdiv	r0, r0, r9
 8015a46:	4428      	add	r0, r5
 8015a48:	b200      	sxth	r0, r0
 8015a4a:	4653      	mov	r3, sl
 8015a4c:	9000      	str	r0, [sp, #0]
 8015a4e:	4652      	mov	r2, sl
 8015a50:	4621      	mov	r1, r4
 8015a52:	4640      	mov	r0, r8
 8015a54:	f7f9 f814 	bl	800ea80 <lv_obj_align>
        last_cord += lv_obj_get_height(child) + style->body.padding.inner;
 8015a58:	4640      	mov	r0, r8
 8015a5a:	f7f9 fcd5 	bl	800f408 <lv_obj_get_height>
 8015a5e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8015a62:	4418      	add	r0, r3
 8015a64:	4405      	add	r5, r0
 8015a66:	b22d      	sxth	r5, r5
    LV_LL_READ_BACK(cont->child_ll, child)
 8015a68:	4641      	mov	r1, r8
 8015a6a:	4630      	mov	r0, r6
 8015a6c:	f7fe fbcf 	bl	801420e <lv_ll_get_prev>
 8015a70:	e7b7      	b.n	80159e2 <lv_cont_refr_layout+0x6c>
    } else if(type == LV_LAYOUT_COL_L || type == LV_LAYOUT_COL_M || type == LV_LAYOUT_COL_R) {
 8015a72:	1eab      	subs	r3, r5, #2
 8015a74:	b2db      	uxtb	r3, r3
 8015a76:	2b02      	cmp	r3, #2
 8015a78:	d84a      	bhi.n	8015b10 <lv_cont_refr_layout+0x19a>
    lv_layout_t type = lv_cont_get_layout(cont);
 8015a7a:	4620      	mov	r0, r4
 8015a7c:	f7ff ff74 	bl	8015968 <lv_cont_get_layout>
 8015a80:	4605      	mov	r5, r0
    const lv_style_t * style = lv_obj_get_style(cont);
 8015a82:	4620      	mov	r0, r4
 8015a84:	f7f9 fccc 	bl	800f420 <lv_obj_get_style>
    switch(type) {
 8015a88:	2d03      	cmp	r5, #3
    const lv_style_t * style = lv_obj_get_style(cont);
 8015a8a:	4607      	mov	r7, r0
    switch(type) {
 8015a8c:	d008      	beq.n	8015aa0 <lv_cont_refr_layout+0x12a>
 8015a8e:	2d04      	cmp	r5, #4
 8015a90:	d036      	beq.n	8015b00 <lv_cont_refr_layout+0x18a>
 8015a92:	2d02      	cmp	r5, #2
 8015a94:	d13a      	bne.n	8015b0c <lv_cont_refr_layout+0x196>
            hpad_corr = style->body.padding.left;
 8015a96:	f9b0 501a 	ldrsh.w	r5, [r0, #26]
            align     = LV_ALIGN_IN_TOP_LEFT;
 8015a9a:	f04f 0801 	mov.w	r8, #1
 8015a9e:	e002      	b.n	8015aa6 <lv_cont_refr_layout+0x130>
            hpad_corr = 0;
 8015aa0:	2500      	movs	r5, #0
            align     = LV_ALIGN_IN_TOP_MID;
 8015aa2:	f04f 0802 	mov.w	r8, #2
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 8015aa6:	4620      	mov	r0, r4
 8015aa8:	2101      	movs	r1, #1
    LV_LL_READ_BACK(cont->child_ll, child)
 8015aaa:	f104 0904 	add.w	r9, r4, #4
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 8015aae:	f7f8 fe3b 	bl	800e728 <lv_obj_set_protect>
    LV_LL_READ_BACK(cont->child_ll, child)
 8015ab2:	4648      	mov	r0, r9
    lv_coord_t last_cord = style->body.padding.top;
 8015ab4:	f9b7 a016 	ldrsh.w	sl, [r7, #22]
    LV_LL_READ_BACK(cont->child_ll, child)
 8015ab8:	f7fe fba1 	bl	80141fe <lv_ll_get_tail>
 8015abc:	4606      	mov	r6, r0
 8015abe:	2800      	cmp	r0, #0
 8015ac0:	d091      	beq.n	80159e6 <lv_cont_refr_layout+0x70>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 8015ac2:	4630      	mov	r0, r6
 8015ac4:	f7f9 fd2a 	bl	800f51c <lv_obj_get_hidden>
 8015ac8:	b9a8      	cbnz	r0, 8015af6 <lv_cont_refr_layout+0x180>
 8015aca:	2104      	movs	r1, #4
 8015acc:	4630      	mov	r0, r6
 8015ace:	f7f9 fd87 	bl	800f5e0 <lv_obj_is_protected>
 8015ad2:	b980      	cbnz	r0, 8015af6 <lv_cont_refr_layout+0x180>
        lv_obj_align(child, cont, align, hpad_corr, last_cord);
 8015ad4:	462b      	mov	r3, r5
 8015ad6:	f8cd a000 	str.w	sl, [sp]
 8015ada:	4642      	mov	r2, r8
 8015adc:	4621      	mov	r1, r4
 8015ade:	4630      	mov	r0, r6
 8015ae0:	f7f8 ffce 	bl	800ea80 <lv_obj_align>
        last_cord += lv_obj_get_height(child) + style->body.padding.inner;
 8015ae4:	4630      	mov	r0, r6
 8015ae6:	f7f9 fc8f 	bl	800f408 <lv_obj_get_height>
 8015aea:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8015aee:	4418      	add	r0, r3
 8015af0:	4450      	add	r0, sl
 8015af2:	fa0f fa80 	sxth.w	sl, r0
    LV_LL_READ_BACK(cont->child_ll, child)
 8015af6:	4631      	mov	r1, r6
 8015af8:	4648      	mov	r0, r9
 8015afa:	f7fe fb88 	bl	801420e <lv_ll_get_prev>
 8015afe:	e7dd      	b.n	8015abc <lv_cont_refr_layout+0x146>
            hpad_corr = -style->body.padding.right;
 8015b00:	8b85      	ldrh	r5, [r0, #28]
 8015b02:	426d      	negs	r5, r5
 8015b04:	b22d      	sxth	r5, r5
            align     = LV_ALIGN_IN_TOP_RIGHT;
 8015b06:	f04f 0803 	mov.w	r8, #3
 8015b0a:	e7cc      	b.n	8015aa6 <lv_cont_refr_layout+0x130>
            hpad_corr = 0;
 8015b0c:	2500      	movs	r5, #0
 8015b0e:	e7c4      	b.n	8015a9a <lv_cont_refr_layout+0x124>
    } else if(type == LV_LAYOUT_ROW_T || type == LV_LAYOUT_ROW_M || type == LV_LAYOUT_ROW_B) {
 8015b10:	1f6b      	subs	r3, r5, #5
 8015b12:	b2db      	uxtb	r3, r3
 8015b14:	2b02      	cmp	r3, #2
 8015b16:	d84a      	bhi.n	8015bae <lv_cont_refr_layout+0x238>
    lv_layout_t type = lv_cont_get_layout(cont);
 8015b18:	4620      	mov	r0, r4
 8015b1a:	f7ff ff25 	bl	8015968 <lv_cont_get_layout>
 8015b1e:	4605      	mov	r5, r0
    const lv_style_t * style = lv_obj_get_style(cont);
 8015b20:	4620      	mov	r0, r4
 8015b22:	f7f9 fc7d 	bl	800f420 <lv_obj_get_style>
    switch(type) {
 8015b26:	2d06      	cmp	r5, #6
    const lv_style_t * style = lv_obj_get_style(cont);
 8015b28:	4607      	mov	r7, r0
    switch(type) {
 8015b2a:	d008      	beq.n	8015b3e <lv_cont_refr_layout+0x1c8>
 8015b2c:	2d07      	cmp	r5, #7
 8015b2e:	d036      	beq.n	8015b9e <lv_cont_refr_layout+0x228>
 8015b30:	2d05      	cmp	r5, #5
 8015b32:	d13a      	bne.n	8015baa <lv_cont_refr_layout+0x234>
            vpad_corr = style->body.padding.top;
 8015b34:	f9b0 5016 	ldrsh.w	r5, [r0, #22]
            align     = LV_ALIGN_IN_TOP_LEFT;
 8015b38:	f04f 0801 	mov.w	r8, #1
 8015b3c:	e002      	b.n	8015b44 <lv_cont_refr_layout+0x1ce>
            vpad_corr = 0;
 8015b3e:	2500      	movs	r5, #0
            align     = LV_ALIGN_IN_LEFT_MID;
 8015b40:	f04f 0807 	mov.w	r8, #7
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 8015b44:	4620      	mov	r0, r4
 8015b46:	2101      	movs	r1, #1
    LV_LL_READ_BACK(cont->child_ll, child)
 8015b48:	f104 0904 	add.w	r9, r4, #4
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 8015b4c:	f7f8 fdec 	bl	800e728 <lv_obj_set_protect>
    LV_LL_READ_BACK(cont->child_ll, child)
 8015b50:	4648      	mov	r0, r9
    lv_coord_t last_cord = style->body.padding.left;
 8015b52:	f9b7 a01a 	ldrsh.w	sl, [r7, #26]
    LV_LL_READ_BACK(cont->child_ll, child)
 8015b56:	f7fe fb52 	bl	80141fe <lv_ll_get_tail>
 8015b5a:	4606      	mov	r6, r0
 8015b5c:	2800      	cmp	r0, #0
 8015b5e:	f43f af42 	beq.w	80159e6 <lv_cont_refr_layout+0x70>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 8015b62:	4630      	mov	r0, r6
 8015b64:	f7f9 fcda 	bl	800f51c <lv_obj_get_hidden>
 8015b68:	b9a0      	cbnz	r0, 8015b94 <lv_cont_refr_layout+0x21e>
 8015b6a:	2104      	movs	r1, #4
 8015b6c:	4630      	mov	r0, r6
 8015b6e:	f7f9 fd37 	bl	800f5e0 <lv_obj_is_protected>
 8015b72:	b978      	cbnz	r0, 8015b94 <lv_cont_refr_layout+0x21e>
        lv_obj_align(child, cont, align, last_cord, vpad_corr);
 8015b74:	4653      	mov	r3, sl
 8015b76:	4642      	mov	r2, r8
 8015b78:	4621      	mov	r1, r4
 8015b7a:	4630      	mov	r0, r6
 8015b7c:	9500      	str	r5, [sp, #0]
 8015b7e:	f7f8 ff7f 	bl	800ea80 <lv_obj_align>
        last_cord += lv_obj_get_width(child) + style->body.padding.inner;
 8015b82:	4630      	mov	r0, r6
 8015b84:	f7f9 fc3a 	bl	800f3fc <lv_obj_get_width>
 8015b88:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8015b8c:	4403      	add	r3, r0
 8015b8e:	4453      	add	r3, sl
 8015b90:	fa0f fa83 	sxth.w	sl, r3
    LV_LL_READ_BACK(cont->child_ll, child)
 8015b94:	4631      	mov	r1, r6
 8015b96:	4648      	mov	r0, r9
 8015b98:	f7fe fb39 	bl	801420e <lv_ll_get_prev>
 8015b9c:	e7dd      	b.n	8015b5a <lv_cont_refr_layout+0x1e4>
            vpad_corr = -style->body.padding.bottom;
 8015b9e:	8b05      	ldrh	r5, [r0, #24]
 8015ba0:	426d      	negs	r5, r5
 8015ba2:	b22d      	sxth	r5, r5
            align     = LV_ALIGN_IN_BOTTOM_LEFT;
 8015ba4:	f04f 0804 	mov.w	r8, #4
 8015ba8:	e7cc      	b.n	8015b44 <lv_cont_refr_layout+0x1ce>
            vpad_corr = 0;
 8015baa:	2500      	movs	r5, #0
 8015bac:	e7c4      	b.n	8015b38 <lv_cont_refr_layout+0x1c2>
    } else if(type == LV_LAYOUT_PRETTY) {
 8015bae:	2d08      	cmp	r5, #8
 8015bb0:	f040 80e7 	bne.w	8015d82 <lv_cont_refr_layout+0x40c>
    const lv_style_t * style = lv_obj_get_style(cont);
 8015bb4:	4620      	mov	r0, r4
 8015bb6:	f7f9 fc33 	bl	800f420 <lv_obj_get_style>
 8015bba:	4680      	mov	r8, r0
    lv_coord_t w_obj         = lv_obj_get_width(cont);
 8015bbc:	4620      	mov	r0, r4
 8015bbe:	f7f9 fc1d 	bl	800f3fc <lv_obj_get_width>
    child_rs = lv_ll_get_tail(&cont->child_ll); /*Set the row starter child*/
 8015bc2:	1d23      	adds	r3, r4, #4
    lv_coord_t w_obj         = lv_obj_get_width(cont);
 8015bc4:	9003      	str	r0, [sp, #12]
    child_rs = lv_ll_get_tail(&cont->child_ll); /*Set the row starter child*/
 8015bc6:	4618      	mov	r0, r3
    lv_coord_t act_y         = style->body.padding.top;
 8015bc8:	f9b8 a016 	ldrsh.w	sl, [r8, #22]
    child_rs = lv_ll_get_tail(&cont->child_ll); /*Set the row starter child*/
 8015bcc:	9302      	str	r3, [sp, #8]
 8015bce:	f7fe fb16 	bl	80141fe <lv_ll_get_tail>
    if(child_rs == NULL) return;                /*Return if no child*/
 8015bd2:	4605      	mov	r5, r0
 8015bd4:	2800      	cmp	r0, #0
 8015bd6:	f000 816f 	beq.w	8015eb8 <lv_cont_refr_layout+0x542>
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 8015bda:	2101      	movs	r1, #1
 8015bdc:	4620      	mov	r0, r4
 8015bde:	f7f8 fda3 	bl	800e728 <lv_obj_set_protect>
            style->body.padding.left + style->body.padding.right; /*The width is at least the left+right hpad*/
 8015be2:	f8b8 b01a 	ldrh.w	fp, [r8, #26]
 8015be6:	f8b8 001c 	ldrh.w	r0, [r8, #28]
        uint32_t obj_num = 0;
 8015bea:	2700      	movs	r7, #0
            style->body.padding.left + style->body.padding.right; /*The width is at least the left+right hpad*/
 8015bec:	4483      	add	fp, r0
        lv_coord_t w_row =
 8015bee:	fa0f fb8b 	sxth.w	fp, fp
 8015bf2:	462e      	mov	r6, r5
        lv_coord_t h_row = 0;
 8015bf4:	46b9      	mov	r9, r7
            if(lv_obj_get_hidden(child_rc) == false && lv_obj_is_protected(child_rc, LV_PROTECT_POS) == false) {
 8015bf6:	4628      	mov	r0, r5
 8015bf8:	f7f9 fc90 	bl	800f51c <lv_obj_get_hidden>
 8015bfc:	2800      	cmp	r0, #0
 8015bfe:	d13b      	bne.n	8015c78 <lv_cont_refr_layout+0x302>
 8015c00:	2104      	movs	r1, #4
 8015c02:	4628      	mov	r0, r5
 8015c04:	f7f9 fcec 	bl	800f5e0 <lv_obj_is_protected>
 8015c08:	bbb0      	cbnz	r0, 8015c78 <lv_cont_refr_layout+0x302>
                if(w_row + lv_obj_get_width(child_rc) > w_obj) {
 8015c0a:	4628      	mov	r0, r5
 8015c0c:	f7f9 fbf6 	bl	800f3fc <lv_obj_get_width>
 8015c10:	9b03      	ldr	r3, [sp, #12]
 8015c12:	4458      	add	r0, fp
 8015c14:	4298      	cmp	r0, r3
 8015c16:	dd15      	ble.n	8015c44 <lv_cont_refr_layout+0x2ce>
                    if(child_rc != NULL && obj_num != 0) {
 8015c18:	2f00      	cmp	r7, #0
 8015c1a:	f000 812c 	beq.w	8015e76 <lv_cont_refr_layout+0x500>
                        child_rc = lv_ll_get_next(&cont->child_ll, child_rc);
 8015c1e:	4629      	mov	r1, r5
 8015c20:	9802      	ldr	r0, [sp, #8]
 8015c22:	f7fe faef 	bl	8014204 <lv_ll_get_next>
 8015c26:	4605      	mov	r5, r0
        else if(obj_num == 1) {
 8015c28:	2f01      	cmp	r7, #1
 8015c2a:	d130      	bne.n	8015c8e <lv_cont_refr_layout+0x318>
            lv_obj_align(child_rs, cont, LV_ALIGN_IN_TOP_MID, 0, act_y);
 8015c2c:	f8cd a000 	str.w	sl, [sp]
 8015c30:	2300      	movs	r3, #0
 8015c32:	2202      	movs	r2, #2
 8015c34:	4621      	mov	r1, r4
 8015c36:	4630      	mov	r0, r6
            lv_obj_align(obj2, cont, LV_ALIGN_IN_TOP_RIGHT, -pad, act_y + (h_row - lv_obj_get_height(obj2)) / 2);
 8015c38:	f7f8 ff22 	bl	800ea80 <lv_obj_align>
        if(child_rc == NULL) break;
 8015c3c:	2d00      	cmp	r5, #0
 8015c3e:	f040 8126 	bne.w	8015e8e <lv_cont_refr_layout+0x518>
 8015c42:	e6d0      	b.n	80159e6 <lv_cont_refr_layout+0x70>
                w_row += lv_obj_get_width(child_rc) + style->body.padding.inner; /*Add the object width + opad*/
 8015c44:	4628      	mov	r0, r5
 8015c46:	f7f9 fbd9 	bl	800f3fc <lv_obj_get_width>
 8015c4a:	f9b8 301e 	ldrsh.w	r3, [r8, #30]
 8015c4e:	4418      	add	r0, r3
 8015c50:	4483      	add	fp, r0
                h_row = LV_MATH_MAX(h_row, lv_obj_get_height(child_rc));         /*Search the highest object*/
 8015c52:	4628      	mov	r0, r5
 8015c54:	f7f9 fbd8 	bl	800f408 <lv_obj_get_height>
 8015c58:	4548      	cmp	r0, r9
                w_row += lv_obj_get_width(child_rc) + style->body.padding.inner; /*Add the object width + opad*/
 8015c5a:	fa0f fb8b 	sxth.w	fp, fp
                h_row = LV_MATH_MAX(h_row, lv_obj_get_height(child_rc));         /*Search the highest object*/
 8015c5e:	db03      	blt.n	8015c68 <lv_cont_refr_layout+0x2f2>
 8015c60:	4628      	mov	r0, r5
 8015c62:	f7f9 fbd1 	bl	800f408 <lv_obj_get_height>
 8015c66:	4681      	mov	r9, r0
                if(lv_obj_is_protected(child_rc, LV_PROTECT_FOLLOW))
 8015c68:	2108      	movs	r1, #8
 8015c6a:	4628      	mov	r0, r5
                obj_num++;
 8015c6c:	3701      	adds	r7, #1
                if(lv_obj_is_protected(child_rc, LV_PROTECT_FOLLOW))
 8015c6e:	f7f9 fcb7 	bl	800f5e0 <lv_obj_is_protected>
 8015c72:	2800      	cmp	r0, #0
 8015c74:	f040 80fc 	bne.w	8015e70 <lv_cont_refr_layout+0x4fa>
            child_rc = lv_ll_get_prev(&cont->child_ll, child_rc); /*Load the next object*/
 8015c78:	4629      	mov	r1, r5
 8015c7a:	9802      	ldr	r0, [sp, #8]
 8015c7c:	f7fe fac7 	bl	801420e <lv_ll_get_prev>
 8015c80:	4605      	mov	r5, r0
            if(obj_num == 0)
 8015c82:	2f00      	cmp	r7, #0
 8015c84:	f000 8113 	beq.w	8015eae <lv_cont_refr_layout+0x538>
        } while(child_rc != NULL);
 8015c88:	2800      	cmp	r0, #0
 8015c8a:	d1b4      	bne.n	8015bf6 <lv_cont_refr_layout+0x280>
 8015c8c:	e7cc      	b.n	8015c28 <lv_cont_refr_layout+0x2b2>
        else if(obj_num == 2) {
 8015c8e:	2f02      	cmp	r7, #2
 8015c90:	d13a      	bne.n	8015d08 <lv_cont_refr_layout+0x392>
            lv_obj_t * obj2 = lv_ll_get_prev(&cont->child_ll, child_rs);
 8015c92:	4631      	mov	r1, r6
 8015c94:	9802      	ldr	r0, [sp, #8]
 8015c96:	f7fe faba 	bl	801420e <lv_ll_get_prev>
 8015c9a:	4683      	mov	fp, r0
            w_row           = lv_obj_get_width(obj1) + lv_obj_get_width(obj2);
 8015c9c:	4630      	mov	r0, r6
 8015c9e:	f7f9 fbad 	bl	800f3fc <lv_obj_get_width>
 8015ca2:	9004      	str	r0, [sp, #16]
 8015ca4:	4658      	mov	r0, fp
 8015ca6:	f7f9 fba9 	bl	800f3fc <lv_obj_get_width>
 8015caa:	9b04      	ldr	r3, [sp, #16]
            lv_coord_t pad  = (w_obj - w_row) / 3;
 8015cac:	9a03      	ldr	r2, [sp, #12]
            w_row           = lv_obj_get_width(obj1) + lv_obj_get_width(obj2);
 8015cae:	4403      	add	r3, r0
            lv_coord_t pad  = (w_obj - w_row) / 3;
 8015cb0:	b21b      	sxth	r3, r3
            lv_obj_align(obj1, cont, LV_ALIGN_IN_TOP_LEFT, pad, act_y + (h_row - lv_obj_get_height(obj1)) / 2);
 8015cb2:	4630      	mov	r0, r6
            lv_coord_t pad  = (w_obj - w_row) / 3;
 8015cb4:	1ad3      	subs	r3, r2, r3
 8015cb6:	2203      	movs	r2, #3
 8015cb8:	fb93 f3f2 	sdiv	r3, r3, r2
 8015cbc:	9304      	str	r3, [sp, #16]
            lv_obj_align(obj1, cont, LV_ALIGN_IN_TOP_LEFT, pad, act_y + (h_row - lv_obj_get_height(obj1)) / 2);
 8015cbe:	f7f9 fba3 	bl	800f408 <lv_obj_get_height>
 8015cc2:	fa1f f38a 	uxth.w	r3, sl
 8015cc6:	eba9 0000 	sub.w	r0, r9, r0
 8015cca:	fb90 f0f7 	sdiv	r0, r0, r7
 8015cce:	4418      	add	r0, r3
 8015cd0:	b200      	sxth	r0, r0
 8015cd2:	2201      	movs	r2, #1
 8015cd4:	4621      	mov	r1, r4
 8015cd6:	9305      	str	r3, [sp, #20]
 8015cd8:	9000      	str	r0, [sp, #0]
 8015cda:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8015cde:	4630      	mov	r0, r6
 8015ce0:	f7f8 fece 	bl	800ea80 <lv_obj_align>
            lv_obj_align(obj2, cont, LV_ALIGN_IN_TOP_RIGHT, -pad, act_y + (h_row - lv_obj_get_height(obj2)) / 2);
 8015ce4:	4658      	mov	r0, fp
 8015ce6:	f7f9 fb8f 	bl	800f408 <lv_obj_get_height>
 8015cea:	9a05      	ldr	r2, [sp, #20]
 8015cec:	9b04      	ldr	r3, [sp, #16]
 8015cee:	eba9 0000 	sub.w	r0, r9, r0
 8015cf2:	fb90 f7f7 	sdiv	r7, r0, r7
 8015cf6:	4417      	add	r7, r2
 8015cf8:	425b      	negs	r3, r3
 8015cfa:	b23f      	sxth	r7, r7
 8015cfc:	9700      	str	r7, [sp, #0]
 8015cfe:	b21b      	sxth	r3, r3
 8015d00:	2203      	movs	r2, #3
 8015d02:	4621      	mov	r1, r4
 8015d04:	4658      	mov	r0, fp
 8015d06:	e797      	b.n	8015c38 <lv_cont_refr_layout+0x2c2>
            w_row -= style->body.padding.inner * obj_num;
 8015d08:	f9b8 001e 	ldrsh.w	r0, [r8, #30]
            lv_coord_t new_opad = (w_obj - w_row) / (obj_num - 1);
 8015d0c:	9b03      	ldr	r3, [sp, #12]
            w_row -= style->body.padding.inner * obj_num;
 8015d0e:	fb10 f007 	smulbb	r0, r0, r7
 8015d12:	ebab 0b00 	sub.w	fp, fp, r0
            lv_coord_t new_opad = (w_obj - w_row) / (obj_num - 1);
 8015d16:	fa0f fb8b 	sxth.w	fp, fp
 8015d1a:	eba3 0b0b 	sub.w	fp, r3, fp
 8015d1e:	3f01      	subs	r7, #1
 8015d20:	fbbb f7f7 	udiv	r7, fp, r7
            lv_coord_t act_x    = style->body.padding.left; /*x init*/
 8015d24:	f9b8 b01a 	ldrsh.w	fp, [r8, #26]
            lv_coord_t new_opad = (w_obj - w_row) / (obj_num - 1);
 8015d28:	b23f      	sxth	r7, r7
                if(lv_obj_get_hidden(child_tmp) == false && lv_obj_is_protected(child_tmp, LV_PROTECT_POS) == false) {
 8015d2a:	4630      	mov	r0, r6
 8015d2c:	f7f9 fbf6 	bl	800f51c <lv_obj_get_hidden>
 8015d30:	b9e0      	cbnz	r0, 8015d6c <lv_cont_refr_layout+0x3f6>
 8015d32:	2104      	movs	r1, #4
 8015d34:	4630      	mov	r0, r6
 8015d36:	f7f9 fc53 	bl	800f5e0 <lv_obj_is_protected>
 8015d3a:	b9b8      	cbnz	r0, 8015d6c <lv_cont_refr_layout+0x3f6>
                                 act_y + (h_row - lv_obj_get_height(child_tmp)) / 2);
 8015d3c:	4630      	mov	r0, r6
 8015d3e:	f7f9 fb63 	bl	800f408 <lv_obj_get_height>
 8015d42:	2302      	movs	r3, #2
 8015d44:	eba9 0000 	sub.w	r0, r9, r0
 8015d48:	fb90 f0f3 	sdiv	r0, r0, r3
 8015d4c:	4450      	add	r0, sl
                    lv_obj_align(child_tmp, cont, LV_ALIGN_IN_TOP_LEFT, act_x,
 8015d4e:	b200      	sxth	r0, r0
 8015d50:	465b      	mov	r3, fp
 8015d52:	9000      	str	r0, [sp, #0]
 8015d54:	2201      	movs	r2, #1
 8015d56:	4621      	mov	r1, r4
 8015d58:	4630      	mov	r0, r6
 8015d5a:	f7f8 fe91 	bl	800ea80 <lv_obj_align>
                    act_x += lv_obj_get_width(child_tmp) + new_opad;
 8015d5e:	4630      	mov	r0, r6
 8015d60:	f7f9 fb4c 	bl	800f3fc <lv_obj_get_width>
 8015d64:	4438      	add	r0, r7
 8015d66:	4483      	add	fp, r0
 8015d68:	fa0f fb8b 	sxth.w	fp, fp
                if(child_tmp == child_rc) break;
 8015d6c:	42ae      	cmp	r6, r5
 8015d6e:	f000 808f 	beq.w	8015e90 <lv_cont_refr_layout+0x51a>
                child_tmp = lv_ll_get_prev(&cont->child_ll, child_tmp);
 8015d72:	4631      	mov	r1, r6
 8015d74:	9802      	ldr	r0, [sp, #8]
 8015d76:	f7fe fa4a 	bl	801420e <lv_ll_get_prev>
            while(child_tmp != NULL) {
 8015d7a:	4606      	mov	r6, r0
 8015d7c:	2800      	cmp	r0, #0
 8015d7e:	d1d4      	bne.n	8015d2a <lv_cont_refr_layout+0x3b4>
 8015d80:	e75c      	b.n	8015c3c <lv_cont_refr_layout+0x2c6>
    } else if(type == LV_LAYOUT_GRID) {
 8015d82:	2d09      	cmp	r5, #9
 8015d84:	f040 8098 	bne.w	8015eb8 <lv_cont_refr_layout+0x542>
    const lv_style_t * style = lv_obj_get_style(cont);
 8015d88:	4620      	mov	r0, r4
 8015d8a:	f7f9 fb49 	bl	800f420 <lv_obj_get_style>
 8015d8e:	4681      	mov	r9, r0
    lv_coord_t w_tot         = lv_obj_get_width(cont);
 8015d90:	4620      	mov	r0, r4
 8015d92:	f7f9 fb33 	bl	800f3fc <lv_obj_get_width>
    lv_coord_t w_obj         = lv_obj_get_width(lv_obj_get_child(cont, NULL));
 8015d96:	2100      	movs	r1, #0
    lv_coord_t w_tot         = lv_obj_get_width(cont);
 8015d98:	4607      	mov	r7, r0
    lv_coord_t w_obj         = lv_obj_get_width(lv_obj_get_child(cont, NULL));
 8015d9a:	4620      	mov	r0, r4
 8015d9c:	f7f9 faf0 	bl	800f380 <lv_obj_get_child>
 8015da0:	f7f9 fb2c 	bl	800f3fc <lv_obj_get_width>
 8015da4:	4605      	mov	r5, r0
    lv_coord_t w_fit         =  lv_obj_get_width_fit(cont);
 8015da6:	4620      	mov	r0, r4
 8015da8:	f7f9 fbaa 	bl	800f500 <lv_obj_get_width_fit>
    lv_coord_t h_obj         = lv_obj_get_height(lv_obj_get_child(cont, NULL));
 8015dac:	2100      	movs	r1, #0
    lv_coord_t w_fit         =  lv_obj_get_width_fit(cont);
 8015dae:	4606      	mov	r6, r0
    lv_coord_t h_obj         = lv_obj_get_height(lv_obj_get_child(cont, NULL));
 8015db0:	4620      	mov	r0, r4
 8015db2:	f7f9 fae5 	bl	800f380 <lv_obj_get_child>
 8015db6:	f7f9 fb27 	bl	800f408 <lv_obj_get_height>
    uint16_t obj_row         = (w_fit) / (w_obj + style->body.padding.inner); /*Obj. num. in a row*/
 8015dba:	f9b9 201e 	ldrsh.w	r2, [r9, #30]
 8015dbe:	1953      	adds	r3, r2, r5
 8015dc0:	fb96 f3f3 	sdiv	r3, r6, r3
 8015dc4:	fa1f fa83 	uxth.w	sl, r3
    if(obj_row > 1) {
 8015dc8:	f1ba 0f01 	cmp.w	sl, #1
 8015dcc:	d944      	bls.n	8015e58 <lv_cont_refr_layout+0x4e2>
        x_ofs = w_obj + (w_fit - (obj_row * w_obj)) / (obj_row - 1);
 8015dce:	fb0a 6615 	mls	r6, sl, r5, r6
 8015dd2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8015dd6:	fb96 f3f3 	sdiv	r3, r6, r3
 8015dda:	441d      	add	r5, r3
    lv_coord_t y_ofs = h_obj + style->body.padding.inner;
 8015ddc:	4410      	add	r0, r2
 8015dde:	b283      	uxth	r3, r0
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 8015de0:	2101      	movs	r1, #1
 8015de2:	4620      	mov	r0, r4
    lv_coord_t y_ofs = h_obj + style->body.padding.inner;
 8015de4:	9302      	str	r3, [sp, #8]
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 8015de6:	f7f8 fc9f 	bl	800e728 <lv_obj_set_protect>
    LV_LL_READ_BACK(cont->child_ll, child)
 8015dea:	1d23      	adds	r3, r4, #4
 8015dec:	4618      	mov	r0, r3
    lv_coord_t act_x = style->body.padding.left;
 8015dee:	f9b9 601a 	ldrsh.w	r6, [r9, #26]
    lv_coord_t act_y = style->body.padding.top;
 8015df2:	f9b9 7016 	ldrsh.w	r7, [r9, #22]
    LV_LL_READ_BACK(cont->child_ll, child)
 8015df6:	9303      	str	r3, [sp, #12]
 8015df8:	f7fe fa01 	bl	80141fe <lv_ll_get_tail>
        x_ofs = w_tot / 2 - w_obj / 2;
 8015dfc:	b22d      	sxth	r5, r5
    LV_LL_READ_BACK(cont->child_ll, child)
 8015dfe:	4683      	mov	fp, r0
    uint16_t obj_cnt = 0;
 8015e00:	f04f 0800 	mov.w	r8, #0
    LV_LL_READ_BACK(cont->child_ll, child)
 8015e04:	f1bb 0f00 	cmp.w	fp, #0
 8015e08:	f43f aded 	beq.w	80159e6 <lv_cont_refr_layout+0x70>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 8015e0c:	4658      	mov	r0, fp
 8015e0e:	f7f9 fb85 	bl	800f51c <lv_obj_get_hidden>
 8015e12:	b9d8      	cbnz	r0, 8015e4c <lv_cont_refr_layout+0x4d6>
 8015e14:	2104      	movs	r1, #4
 8015e16:	4658      	mov	r0, fp
 8015e18:	f7f9 fbe2 	bl	800f5e0 <lv_obj_is_protected>
 8015e1c:	b9b0      	cbnz	r0, 8015e4c <lv_cont_refr_layout+0x4d6>
        if(obj_row > 1) {
 8015e1e:	f1ba 0f01 	cmp.w	sl, #1
            lv_obj_set_pos(child, act_x, act_y);
 8015e22:	463a      	mov	r2, r7
        if(obj_row > 1) {
 8015e24:	d91f      	bls.n	8015e66 <lv_cont_refr_layout+0x4f0>
            lv_obj_set_pos(child, act_x, act_y);
 8015e26:	4631      	mov	r1, r6
 8015e28:	4658      	mov	r0, fp
 8015e2a:	f7f8 fdd4 	bl	800e9d6 <lv_obj_set_pos>
            act_x += x_ofs;
 8015e2e:	442e      	add	r6, r5
 8015e30:	b236      	sxth	r6, r6
        obj_cnt++;
 8015e32:	f108 0801 	add.w	r8, r8, #1
 8015e36:	fa1f f888 	uxth.w	r8, r8
        if(obj_cnt >= obj_row) {
 8015e3a:	45c2      	cmp	sl, r8
 8015e3c:	d806      	bhi.n	8015e4c <lv_cont_refr_layout+0x4d6>
            act_y += y_ofs;
 8015e3e:	9b02      	ldr	r3, [sp, #8]
            act_x   = style->body.padding.left;
 8015e40:	f9b9 601a 	ldrsh.w	r6, [r9, #26]
            act_y += y_ofs;
 8015e44:	441f      	add	r7, r3
 8015e46:	b23f      	sxth	r7, r7
            obj_cnt = 0;
 8015e48:	f04f 0800 	mov.w	r8, #0
    LV_LL_READ_BACK(cont->child_ll, child)
 8015e4c:	4659      	mov	r1, fp
 8015e4e:	9803      	ldr	r0, [sp, #12]
 8015e50:	f7fe f9dd 	bl	801420e <lv_ll_get_prev>
 8015e54:	4683      	mov	fp, r0
 8015e56:	e7d5      	b.n	8015e04 <lv_cont_refr_layout+0x48e>
        x_ofs = w_tot / 2 - w_obj / 2;
 8015e58:	2302      	movs	r3, #2
 8015e5a:	fb97 f7f3 	sdiv	r7, r7, r3
 8015e5e:	fb95 f5f3 	sdiv	r5, r5, r3
 8015e62:	1b7d      	subs	r5, r7, r5
 8015e64:	e7ba      	b.n	8015ddc <lv_cont_refr_layout+0x466>
            lv_obj_set_pos(child, x_ofs, act_y);
 8015e66:	4629      	mov	r1, r5
 8015e68:	4658      	mov	r0, fp
 8015e6a:	f7f8 fdb4 	bl	800e9d6 <lv_obj_set_pos>
 8015e6e:	e7e0      	b.n	8015e32 <lv_cont_refr_layout+0x4bc>
        if(obj_num == 0) {
 8015e70:	2f00      	cmp	r7, #0
 8015e72:	f47f aed9 	bne.w	8015c28 <lv_cont_refr_layout+0x2b2>
                lv_obj_align(child_rc, cont, LV_ALIGN_IN_TOP_MID, 0, act_y);
 8015e76:	2300      	movs	r3, #0
 8015e78:	2202      	movs	r2, #2
 8015e7a:	4621      	mov	r1, r4
 8015e7c:	4628      	mov	r0, r5
 8015e7e:	f8cd a000 	str.w	sl, [sp]
 8015e82:	f7f8 fdfd 	bl	800ea80 <lv_obj_align>
                h_row = lv_obj_get_height(child_rc); /*Not set previously because of the early break*/
 8015e86:	4628      	mov	r0, r5
 8015e88:	f7f9 fabe 	bl	800f408 <lv_obj_get_height>
 8015e8c:	4681      	mov	r9, r0
        if(child_rc == NULL) break;
 8015e8e:	462e      	mov	r6, r5
        act_y += style->body.padding.inner + h_row;           /*y increment*/
 8015e90:	f8b8 301e 	ldrh.w	r3, [r8, #30]
        child_rs = lv_ll_get_prev(&cont->child_ll, child_rc); /*Go to the next object*/
 8015e94:	9802      	ldr	r0, [sp, #8]
 8015e96:	4631      	mov	r1, r6
        act_y += style->body.padding.inner + h_row;           /*y increment*/
 8015e98:	449a      	add	sl, r3
        child_rs = lv_ll_get_prev(&cont->child_ll, child_rc); /*Go to the next object*/
 8015e9a:	f7fe f9b8 	bl	801420e <lv_ll_get_prev>
        act_y += style->body.padding.inner + h_row;           /*y increment*/
 8015e9e:	44d1      	add	r9, sl
 8015ea0:	fa0f fa89 	sxth.w	sl, r9
    while(child_rs != NULL) {
 8015ea4:	4605      	mov	r5, r0
 8015ea6:	2800      	cmp	r0, #0
 8015ea8:	f47f ae9b 	bne.w	8015be2 <lv_cont_refr_layout+0x26c>
 8015eac:	e59b      	b.n	80159e6 <lv_cont_refr_layout+0x70>
        } while(child_rc != NULL);
 8015eae:	2800      	cmp	r0, #0
 8015eb0:	f43f ad99 	beq.w	80159e6 <lv_cont_refr_layout+0x70>
 8015eb4:	462e      	mov	r6, r5
 8015eb6:	e69e      	b.n	8015bf6 <lv_cont_refr_layout+0x280>
}
 8015eb8:	b007      	add	sp, #28
 8015eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08015ec0 <lv_cont_signal>:
{
 8015ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    res = ancestor_signal(cont, sign, param);
 8015ec2:	4b1e      	ldr	r3, [pc, #120]	; (8015f3c <lv_cont_signal+0x7c>)
 8015ec4:	681b      	ldr	r3, [r3, #0]
{
 8015ec6:	4604      	mov	r4, r0
 8015ec8:	460f      	mov	r7, r1
 8015eca:	4616      	mov	r6, r2
    res = ancestor_signal(cont, sign, param);
 8015ecc:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8015ece:	2801      	cmp	r0, #1
    res = ancestor_signal(cont, sign, param);
 8015ed0:	4605      	mov	r5, r0
    if(res != LV_RES_OK) return res;
 8015ed2:	d120      	bne.n	8015f16 <lv_cont_signal+0x56>
    if(sign == LV_SIGNAL_STYLE_CHG) { /*Recalculate the padding if the style changed*/
 8015ed4:	2f04      	cmp	r7, #4
 8015ed6:	d106      	bne.n	8015ee6 <lv_cont_signal+0x26>
        lv_cont_refr_layout(cont);
 8015ed8:	4620      	mov	r0, r4
 8015eda:	f7ff fd4c 	bl	8015976 <lv_cont_refr_layout>
        lv_cont_refr_autofit(cont);
 8015ede:	4620      	mov	r0, r4
 8015ee0:	f7ff fb3c 	bl	801555c <lv_cont_refr_autofit>
 8015ee4:	e017      	b.n	8015f16 <lv_cont_signal+0x56>
    } else if(sign == LV_SIGNAL_CHILD_CHG) {
 8015ee6:	2f01      	cmp	r7, #1
 8015ee8:	d0f6      	beq.n	8015ed8 <lv_cont_signal+0x18>
    } else if(sign == LV_SIGNAL_CORD_CHG) {
 8015eea:	2f02      	cmp	r7, #2
 8015eec:	d115      	bne.n	8015f1a <lv_cont_signal+0x5a>
        if(lv_obj_get_width(cont) != lv_area_get_width(param) || lv_obj_get_height(cont) != lv_area_get_height(param)) {
 8015eee:	4620      	mov	r0, r4
 8015ef0:	f7f9 fa84 	bl	800f3fc <lv_obj_get_width>
    return area_p->x2 - area_p->x1 + 1;
 8015ef4:	88b3      	ldrh	r3, [r6, #4]
 8015ef6:	8832      	ldrh	r2, [r6, #0]
 8015ef8:	3301      	adds	r3, #1
 8015efa:	1a9b      	subs	r3, r3, r2
 8015efc:	b21b      	sxth	r3, r3
 8015efe:	4298      	cmp	r0, r3
 8015f00:	d1ea      	bne.n	8015ed8 <lv_cont_signal+0x18>
 8015f02:	4620      	mov	r0, r4
 8015f04:	f7f9 fa80 	bl	800f408 <lv_obj_get_height>
    return area_p->y2 - area_p->y1 + 1;
 8015f08:	88f3      	ldrh	r3, [r6, #6]
 8015f0a:	8872      	ldrh	r2, [r6, #2]
 8015f0c:	3301      	adds	r3, #1
 8015f0e:	1a9b      	subs	r3, r3, r2
 8015f10:	b21b      	sxth	r3, r3
 8015f12:	4298      	cmp	r0, r3
 8015f14:	d1e0      	bne.n	8015ed8 <lv_cont_signal+0x18>
}
 8015f16:	4628      	mov	r0, r5
 8015f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if(sign == LV_SIGNAL_PARENT_SIZE_CHG) {
 8015f1a:	2f03      	cmp	r7, #3
 8015f1c:	d0df      	beq.n	8015ede <lv_cont_signal+0x1e>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8015f1e:	2f06      	cmp	r7, #6
 8015f20:	d1f9      	bne.n	8015f16 <lv_cont_signal+0x56>
 8015f22:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 8015f24:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8015f28:	b2da      	uxtb	r2, r3
 8015f2a:	b119      	cbz	r1, 8015f34 <lv_cont_signal+0x74>
 8015f2c:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8015f2e:	2b07      	cmp	r3, #7
 8015f30:	d1f8      	bne.n	8015f24 <lv_cont_signal+0x64>
 8015f32:	461a      	mov	r2, r3
        buf->type[i] = "lv_cont";
 8015f34:	4b02      	ldr	r3, [pc, #8]	; (8015f40 <lv_cont_signal+0x80>)
 8015f36:	f846 3022 	str.w	r3, [r6, r2, lsl #2]
 8015f3a:	e7ec      	b.n	8015f16 <lv_cont_signal+0x56>
 8015f3c:	2000b038 	.word	0x2000b038
 8015f40:	080ec3cc 	.word	0x080ec3cc

08015f44 <lv_cont_get_fit_left>:
{
 8015f44:	b508      	push	{r3, lr}
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 8015f46:	f7f9 fb56 	bl	800f5f6 <lv_obj_get_ext_attr>
    return ext->fit_left;
 8015f4a:	7800      	ldrb	r0, [r0, #0]
}
 8015f4c:	f3c0 1001 	ubfx	r0, r0, #4, #2
 8015f50:	bd08      	pop	{r3, pc}

08015f52 <lv_cont_get_fit_top>:
{
 8015f52:	b508      	push	{r3, lr}
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 8015f54:	f7f9 fb4f 	bl	800f5f6 <lv_obj_get_ext_attr>
    return ext->fit_top;
 8015f58:	7840      	ldrb	r0, [r0, #1]
}
 8015f5a:	f000 0003 	and.w	r0, r0, #3
 8015f5e:	bd08      	pop	{r3, pc}

08015f60 <lv_cont_get_fit_bottom>:
{
 8015f60:	b508      	push	{r3, lr}
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 8015f62:	f7f9 fb48 	bl	800f5f6 <lv_obj_get_ext_attr>
    return ext->fit_bottom;
 8015f66:	7840      	ldrb	r0, [r0, #1]
}
 8015f68:	f3c0 0081 	ubfx	r0, r0, #2, #2
 8015f6c:	bd08      	pop	{r3, pc}

08015f6e <lv_ddlist_pos_current_option>:
/**
 * Set the position of list when it is closed to show the selected item
 * @param ddlist pointer to a drop down list
 */
static void lv_ddlist_pos_current_option(lv_obj_t * ddlist)
{
 8015f6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f72:	4604      	mov	r4, r0
    lv_ddlist_ext_t * ext          = lv_obj_get_ext_attr(ddlist);
 8015f74:	f7f9 fb3f 	bl	800f5f6 <lv_obj_get_ext_attr>
 8015f78:	4606      	mov	r6, r0
    const lv_style_t * style       = lv_obj_get_style(ddlist);
 8015f7a:	4620      	mov	r0, r4
 8015f7c:	f7f9 fa50 	bl	800f420 <lv_obj_get_style>
 8015f80:	6a43      	ldr	r3, [r0, #36]	; 0x24
    const lv_font_t * font         = style->text.font;
    lv_coord_t font_h              = lv_font_get_line_height(font);
    const lv_style_t * label_style = lv_obj_get_style(ext->label);
 8015f82:	6b30      	ldr	r0, [r6, #48]	; 0x30
 8015f84:	7a1f      	ldrb	r7, [r3, #8]
 8015f86:	f7f9 fa4b 	bl	800f420 <lv_obj_get_style>
 8015f8a:	4680      	mov	r8, r0
    lv_obj_t * scrl                = lv_page_get_scrl(ddlist);
 8015f8c:	4620      	mov	r0, r4
 8015f8e:	f002 f8b6 	bl	80180fe <lv_page_get_scrl>
 8015f92:	4605      	mov	r5, r0

    lv_coord_t h = lv_obj_get_height(ddlist);
 8015f94:	4620      	mov	r0, r4
 8015f96:	f7f9 fa37 	bl	800f408 <lv_obj_get_height>
    lv_coord_t line_y1 =
        ext->sel_opt_id * (font_h + label_style->text.line_space) + ext->label->coords.y1 - scrl->coords.y1;
 8015f9a:	6b33      	ldr	r3, [r6, #48]	; 0x30

    lv_obj_set_y(scrl, -line_y1 + (h - font_h) / 2);
 8015f9c:	1bc1      	subs	r1, r0, r7
 8015f9e:	2002      	movs	r0, #2
 8015fa0:	fb91 f1f0 	sdiv	r1, r1, r0
 8015fa4:	8a58      	ldrh	r0, [r3, #18]
 8015fa6:	8a6b      	ldrh	r3, [r5, #18]
 8015fa8:	1ac0      	subs	r0, r0, r3
 8015faa:	1a09      	subs	r1, r1, r0
        ext->sel_opt_id * (font_h + label_style->text.line_space) + ext->label->coords.y1 - scrl->coords.y1;
 8015fac:	f9b8 002a 	ldrsh.w	r0, [r8, #42]	; 0x2a
 8015fb0:	19c3      	adds	r3, r0, r7
 8015fb2:	8f70      	ldrh	r0, [r6, #58]	; 0x3a
 8015fb4:	fb10 f003 	smulbb	r0, r0, r3
    lv_obj_set_y(scrl, -line_y1 + (h - font_h) / 2);
 8015fb8:	1a09      	subs	r1, r1, r0
 8015fba:	b209      	sxth	r1, r1
 8015fbc:	4628      	mov	r0, r5
 8015fbe:	f7f8 fd57 	bl	800ea70 <lv_obj_set_y>
    lv_obj_invalidate(ddlist);
 8015fc2:	4620      	mov	r0, r4
}
 8015fc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_obj_invalidate(ddlist);
 8015fc8:	f7f8 bc98 	b.w	800e8fc <lv_obj_invalidate>

08015fcc <lv_ddlist_adjust_height>:
{
 8015fcc:	b510      	push	{r4, lr}
 8015fce:	4604      	mov	r4, r0
    lv_obj_set_height(ddlist, height);
 8015fd0:	f7f9 f947 	bl	800f262 <lv_obj_set_height>
    lv_ddlist_pos_current_option(ddlist);
 8015fd4:	4620      	mov	r0, r4
}
 8015fd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_ddlist_pos_current_option(ddlist);
 8015fda:	f7ff bfc8 	b.w	8015f6e <lv_ddlist_pos_current_option>

08015fde <lv_ddlist_anim_finish>:
{
 8015fde:	b538      	push	{r3, r4, r5, lr}
 8015fe0:	4604      	mov	r4, r0
    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
 8015fe2:	f7f9 fb08 	bl	800f5f6 <lv_obj_get_ext_attr>
 8015fe6:	4605      	mov	r5, r0
    lv_ddlist_pos_current_option(ddlist);
 8015fe8:	4620      	mov	r0, r4
 8015fea:	f7ff ffc0 	bl	8015f6e <lv_ddlist_pos_current_option>
    ext->force_sel = 0; /*Turn off drawing of selection*/
 8015fee:	f895 303e 	ldrb.w	r3, [r5, #62]	; 0x3e
 8015ff2:	f36f 0341 	bfc	r3, #1, #1
 8015ff6:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    if(ext->opened) lv_page_set_sb_mode(ddlist, LV_SB_MODE_UNHIDE);
 8015ffa:	07db      	lsls	r3, r3, #31
 8015ffc:	d505      	bpl.n	801600a <lv_ddlist_anim_finish+0x2c>
 8015ffe:	4620      	mov	r0, r4
 8016000:	2105      	movs	r1, #5
}
 8016002:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if(ext->opened) lv_page_set_sb_mode(ddlist, LV_SB_MODE_UNHIDE);
 8016006:	f002 b817 	b.w	8018038 <lv_page_set_sb_mode>
 801600a:	bd38      	pop	{r3, r4, r5, pc}

0801600c <lv_ddlist_anim_ready_cb>:
    lv_ddlist_anim_finish(ddlist);
 801600c:	6800      	ldr	r0, [r0, #0]
 801600e:	f7ff bfe6 	b.w	8015fde <lv_ddlist_anim_finish>
	...

08016014 <lv_ddlist_refr_size>:
{
 8016014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016018:	b08a      	sub	sp, #40	; 0x28
 801601a:	4605      	mov	r5, r0
 801601c:	460f      	mov	r7, r1
    lv_ddlist_ext_t * ext    = lv_obj_get_ext_attr(ddlist);
 801601e:	f7f9 faea 	bl	800f5f6 <lv_obj_get_ext_attr>
 8016022:	4606      	mov	r6, r0
    const lv_style_t * style = lv_obj_get_style(ddlist);
 8016024:	4628      	mov	r0, r5
 8016026:	f7f9 f9fb 	bl	800f420 <lv_obj_get_style>
    if(ext->opened) {
 801602a:	f896 303e 	ldrb.w	r3, [r6, #62]	; 0x3e
 801602e:	07da      	lsls	r2, r3, #31
    const lv_style_t * style = lv_obj_get_style(ddlist);
 8016030:	4680      	mov	r8, r0
    if(ext->opened) {
 8016032:	d528      	bpl.n	8016086 <lv_ddlist_refr_size+0x72>
        if(ext->fix_height == 0) {
 8016034:	f9b6 4040 	ldrsh.w	r4, [r6, #64]	; 0x40
 8016038:	b95c      	cbnz	r4, 8016052 <lv_ddlist_refr_size+0x3e>
                lv_obj_get_height(lv_page_get_scrl(ddlist)) + style->body.padding.top + style->body.padding.bottom;
 801603a:	4628      	mov	r0, r5
 801603c:	f002 f85f 	bl	80180fe <lv_page_get_scrl>
 8016040:	f7f9 f9e2 	bl	800f408 <lv_obj_get_height>
 8016044:	f8b8 4016 	ldrh.w	r4, [r8, #22]
 8016048:	f8b8 3018 	ldrh.w	r3, [r8, #24]
 801604c:	441c      	add	r4, r3
 801604e:	4404      	add	r4, r0
            new_height =
 8016050:	b224      	sxth	r4, r4
    if(anim == LV_ANIM_OFF) {
 8016052:	bb37      	cbnz	r7, 80160a2 <lv_ddlist_refr_size+0x8e>
        lv_obj_set_height(ddlist, new_height);
 8016054:	4621      	mov	r1, r4
 8016056:	4628      	mov	r0, r5
 8016058:	f7f9 f903 	bl	800f262 <lv_obj_set_height>
        lv_ddlist_pos_current_option(ddlist);
 801605c:	4628      	mov	r0, r5
 801605e:	f7ff ff86 	bl	8015f6e <lv_ddlist_pos_current_option>
        if(ext->opened) lv_page_set_sb_mode(ddlist, LV_SB_MODE_UNHIDE);
 8016062:	f896 303e 	ldrb.w	r3, [r6, #62]	; 0x3e
 8016066:	07db      	lsls	r3, r3, #31
 8016068:	d503      	bpl.n	8016072 <lv_ddlist_refr_size+0x5e>
 801606a:	2105      	movs	r1, #5
 801606c:	4628      	mov	r0, r5
 801606e:	f001 ffe3 	bl	8018038 <lv_page_set_sb_mode>
        lv_anim_del(ddlist, (lv_anim_exec_xcb_t)lv_ddlist_adjust_height); /*If an animation is in progress then
 8016072:	4923      	ldr	r1, [pc, #140]	; (8016100 <lv_ddlist_refr_size+0xec>)
 8016074:	4628      	mov	r0, r5
 8016076:	f7fd ff21 	bl	8013ebc <lv_anim_del>
        lv_ddlist_anim_finish(ddlist);
 801607a:	4628      	mov	r0, r5
 801607c:	f7ff ffaf 	bl	8015fde <lv_ddlist_anim_finish>
}
 8016080:	b00a      	add	sp, #40	; 0x28
 8016082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        const lv_font_t * font         = style->text.font;
 8016086:	6a44      	ldr	r4, [r0, #36]	; 0x24
        const lv_style_t * label_style = lv_obj_get_style(ext->label);
 8016088:	6b30      	ldr	r0, [r6, #48]	; 0x30
 801608a:	f7f9 f9c9 	bl	800f420 <lv_obj_get_style>
        new_height                     = font_h + 2 * label_style->text.line_space;
 801608e:	7a24      	ldrb	r4, [r4, #8]
 8016090:	8d40      	ldrh	r0, [r0, #42]	; 0x2a
        lv_page_set_sb_mode(ddlist, LV_SB_MODE_HIDE);
 8016092:	2104      	movs	r1, #4
        new_height                     = font_h + 2 * label_style->text.line_space;
 8016094:	eb04 0440 	add.w	r4, r4, r0, lsl #1
        lv_page_set_sb_mode(ddlist, LV_SB_MODE_HIDE);
 8016098:	4628      	mov	r0, r5
        new_height                     = font_h + 2 * label_style->text.line_space;
 801609a:	b224      	sxth	r4, r4
        lv_page_set_sb_mode(ddlist, LV_SB_MODE_HIDE);
 801609c:	f001 ffcc 	bl	8018038 <lv_page_set_sb_mode>
 80160a0:	e7d7      	b.n	8016052 <lv_ddlist_refr_size+0x3e>
        if(lv_obj_get_height(ddlist) != new_height) {
 80160a2:	4628      	mov	r0, r5
 80160a4:	f7f9 f9b0 	bl	800f408 <lv_obj_get_height>
 80160a8:	4284      	cmp	r4, r0
 80160aa:	d0e9      	beq.n	8016080 <lv_ddlist_refr_size+0x6c>
            a.start          = lv_obj_get_height(ddlist);
 80160ac:	4628      	mov	r0, r5
            a.var            = ddlist;
 80160ae:	9500      	str	r5, [sp, #0]
            a.start          = lv_obj_get_height(ddlist);
 80160b0:	f7f9 f9aa 	bl	800f408 <lv_obj_get_height>
            a.exec_cb        = (lv_anim_exec_xcb_t)lv_ddlist_adjust_height;
 80160b4:	4b12      	ldr	r3, [pc, #72]	; (8016100 <lv_ddlist_refr_size+0xec>)
 80160b6:	9301      	str	r3, [sp, #4]
            a.path_cb        = lv_anim_path_linear;
 80160b8:	4b12      	ldr	r3, [pc, #72]	; (8016104 <lv_ddlist_refr_size+0xf0>)
            a.start          = lv_obj_get_height(ddlist);
 80160ba:	9004      	str	r0, [sp, #16]
            a.end            = new_height;
 80160bc:	9405      	str	r4, [sp, #20]
            a.path_cb        = lv_anim_path_linear;
 80160be:	9302      	str	r3, [sp, #8]
            a.act_time       = 0;
 80160c0:	2400      	movs	r4, #0
            a.ready_cb       = lv_ddlist_anim_ready_cb;
 80160c2:	4b11      	ldr	r3, [pc, #68]	; (8016108 <lv_ddlist_refr_size+0xf4>)
 80160c4:	9303      	str	r3, [sp, #12]
 * @param ddlist pointer to a drop down list
 * @return open/close animation time [ms]
 */
static inline uint16_t lv_ddlist_get_anim_time(const lv_obj_t * ddlist)
{
    return lv_page_get_anim_time(ddlist);
 80160c6:	4628      	mov	r0, r5
            a.act_time       = 0;
 80160c8:	f8ad 401a 	strh.w	r4, [sp, #26]
 80160cc:	f002 f81c 	bl	8018108 <lv_page_get_anim_time>
            a.playback       = 0;
 80160d0:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
            a.time           = lv_ddlist_get_anim_time(ddlist);
 80160d4:	f8ad 0018 	strh.w	r0, [sp, #24]
            a.repeat         = 0;
 80160d8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80160dc:	f364 0341 	bfi	r3, r4, #1, #1
 80160e0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
            ext->force_sel = 1; /*Keep the list item selected*/
 80160e4:	f896 303e 	ldrb.w	r3, [r6, #62]	; 0x3e
            a.playback_pause = 0;
 80160e8:	f8ad 401c 	strh.w	r4, [sp, #28]
            ext->force_sel = 1; /*Keep the list item selected*/
 80160ec:	f043 0302 	orr.w	r3, r3, #2
 80160f0:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
            lv_anim_create(&a);
 80160f4:	4668      	mov	r0, sp
            a.repeat_pause   = 0;
 80160f6:	f8ad 401e 	strh.w	r4, [sp, #30]
            lv_anim_create(&a);
 80160fa:	f7fd ff0d 	bl	8013f18 <lv_anim_create>
}
 80160fe:	e7bf      	b.n	8016080 <lv_ddlist_refr_size+0x6c>
 8016100:	08015fcd 	.word	0x08015fcd
 8016104:	08013d41 	.word	0x08013d41
 8016108:	0801600d 	.word	0x0801600d

0801610c <release_handler>:
{
 801610c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8016110:	4605      	mov	r5, r0
    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
 8016112:	f7f9 fa70 	bl	800f5f6 <lv_obj_get_ext_attr>
    if(ext->opened == 0) { /*Open the list*/
 8016116:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 801611a:	07da      	lsls	r2, r3, #31
    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
 801611c:	4604      	mov	r4, r0
    if(ext->opened == 0) { /*Open the list*/
 801611e:	d412      	bmi.n	8016146 <release_handler+0x3a>
        ext->opened = 1;
 8016120:	f043 0301 	orr.w	r3, r3, #1
 8016124:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        lv_obj_set_drag(lv_page_get_scrl(ddlist), true);
 8016128:	4628      	mov	r0, r5
 801612a:	f001 ffe8 	bl	80180fe <lv_page_get_scrl>
 801612e:	2101      	movs	r1, #1
 8016130:	f7f8 fae5 	bl	800e6fe <lv_obj_set_drag>
        lv_ddlist_refr_size(ddlist, true);
 8016134:	2101      	movs	r1, #1
 8016136:	4628      	mov	r0, r5
 8016138:	f7ff ff6c 	bl	8016014 <lv_ddlist_refr_size>
    return LV_RES_OK;
 801613c:	2601      	movs	r6, #1
}
 801613e:	4630      	mov	r0, r6
 8016140:	b002      	add	sp, #8
 8016142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        lv_indev_t * indev = lv_indev_get_act();
 8016146:	f7f8 fa2d 	bl	800e5a4 <lv_indev_get_act>
 801614a:	4606      	mov	r6, r0
        if(lv_indev_get_type(indev) == LV_INDEV_TYPE_ENCODER) {
 801614c:	f7f8 fa30 	bl	800e5b0 <lv_indev_get_type>
 8016150:	2804      	cmp	r0, #4
 8016152:	d10c      	bne.n	801616e <release_handler+0x62>
            ext->sel_opt_id_ori = ext->sel_opt_id;
 8016154:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8016156:	87a3      	strh	r3, [r4, #60]	; 0x3c
            lv_group_t * g      = lv_obj_get_group(ddlist);
 8016158:	4628      	mov	r0, r5
 801615a:	f7f9 fa52 	bl	800f602 <lv_obj_get_group>
 801615e:	4607      	mov	r7, r0
            if(lv_group_get_editing(g)) {
 8016160:	f7f8 fa0b 	bl	800e57a <lv_group_get_editing>
 8016164:	b118      	cbz	r0, 801616e <release_handler+0x62>
                lv_group_set_editing(g, false);
 8016166:	2100      	movs	r1, #0
 8016168:	4638      	mov	r0, r7
 801616a:	f7f8 f9e4 	bl	800e536 <lv_group_set_editing>
        if(lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON) {
 801616e:	4630      	mov	r0, r6
 8016170:	f7f8 fa1e 	bl	800e5b0 <lv_indev_get_type>
 8016174:	2801      	cmp	r0, #1
 8016176:	d122      	bne.n	80161be <release_handler+0xb2>
            lv_indev_get_point(indev, &p);
 8016178:	4630      	mov	r0, r6
 801617a:	4669      	mov	r1, sp
 801617c:	f7f8 fa25 	bl	800e5ca <lv_indev_get_point>
            p.y -= ext->label->coords.y1;
 8016180:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8016182:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8016186:	8a42      	ldrh	r2, [r0, #18]
                letter = lv_txt_encoded_next(txt, &i);
 8016188:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8016228 <release_handler+0x11c>
            p.y -= ext->label->coords.y1;
 801618c:	1a9b      	subs	r3, r3, r2
 801618e:	f8ad 3002 	strh.w	r3, [sp, #2]
            p.x -= ext->label->coords.x1;
 8016192:	8a02      	ldrh	r2, [r0, #16]
 8016194:	f8bd 3000 	ldrh.w	r3, [sp]
            letter_i = lv_label_get_letter_on(ext->label, &p);
 8016198:	4669      	mov	r1, sp
            p.x -= ext->label->coords.x1;
 801619a:	1a9b      	subs	r3, r3, r2
 801619c:	f8ad 3000 	strh.w	r3, [sp]
            letter_i = lv_label_get_letter_on(ext->label, &p);
 80161a0:	f001 f8f4 	bl	801738c <lv_label_get_letter_on>
 80161a4:	4680      	mov	r8, r0
            const char * txt  = lv_label_get_text(ext->label);
 80161a6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80161a8:	f001 f8ce 	bl	8017348 <lv_label_get_text>
            uint32_t i        = 0;
 80161ac:	2600      	movs	r6, #0
            const char * txt  = lv_label_get_text(ext->label);
 80161ae:	4681      	mov	r9, r0
            uint32_t i        = 0;
 80161b0:	9601      	str	r6, [sp, #4]
            uint16_t new_opt  = 0;
 80161b2:	4637      	mov	r7, r6
            for(line_cnt = 0; line_cnt < letter_i; line_cnt++) {
 80161b4:	4546      	cmp	r6, r8
 80161b6:	d325      	bcc.n	8016204 <release_handler+0xf8>
            ext->sel_opt_id     = new_opt;
 80161b8:	8767      	strh	r7, [r4, #58]	; 0x3a
            ext->sel_opt_id_ori = ext->sel_opt_id;
 80161ba:	87a7      	strh	r7, [r4, #60]	; 0x3c
 80161bc:	e004      	b.n	80161c8 <release_handler+0xbc>
        if(lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON) {
 80161be:	4630      	mov	r0, r6
 80161c0:	f7f8 f9f6 	bl	800e5b0 <lv_indev_get_type>
 80161c4:	2803      	cmp	r0, #3
 80161c6:	d0d7      	beq.n	8016178 <release_handler+0x6c>
        uint32_t id  = ext->sel_opt_id; /*Just to use uint32_t in event data*/
 80161c8:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 80161ca:	9301      	str	r3, [sp, #4]
        lv_res_t res = lv_event_send(ddlist, LV_EVENT_VALUE_CHANGED, &id);
 80161cc:	aa01      	add	r2, sp, #4
 80161ce:	210e      	movs	r1, #14
 80161d0:	4628      	mov	r0, r5
 80161d2:	f7f8 fafd 	bl	800e7d0 <lv_event_send>
        if(res != LV_RES_OK) return res;
 80161d6:	2801      	cmp	r0, #1
        lv_res_t res = lv_event_send(ddlist, LV_EVENT_VALUE_CHANGED, &id);
 80161d8:	4606      	mov	r6, r0
        if(res != LV_RES_OK) return res;
 80161da:	d1b0      	bne.n	801613e <release_handler+0x32>
        if(ext->stay_open == 0) {
 80161dc:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80161e0:	f013 0708 	ands.w	r7, r3, #8
 80161e4:	d11c      	bne.n	8016220 <release_handler+0x114>
            ext->opened = 0;
 80161e6:	f367 0300 	bfi	r3, r7, #0, #1
 80161ea:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
            lv_obj_set_drag(lv_page_get_scrl(ddlist), false);
 80161ee:	4628      	mov	r0, r5
 80161f0:	f001 ff85 	bl	80180fe <lv_page_get_scrl>
 80161f4:	4639      	mov	r1, r7
 80161f6:	f7f8 fa82 	bl	800e6fe <lv_obj_set_drag>
            lv_ddlist_refr_size(ddlist, true);
 80161fa:	4631      	mov	r1, r6
 80161fc:	4628      	mov	r0, r5
 80161fe:	f7ff ff09 	bl	8016014 <lv_ddlist_refr_size>
 8016202:	e79c      	b.n	801613e <release_handler+0x32>
                letter = lv_txt_encoded_next(txt, &i);
 8016204:	a901      	add	r1, sp, #4
 8016206:	4648      	mov	r0, r9
 8016208:	f8da 3000 	ldr.w	r3, [sl]
 801620c:	4798      	blx	r3
                if(letter == '\n' && i != letter_i) new_opt++;
 801620e:	280a      	cmp	r0, #10
 8016210:	d104      	bne.n	801621c <release_handler+0x110>
 8016212:	9b01      	ldr	r3, [sp, #4]
 8016214:	4598      	cmp	r8, r3
 8016216:	bf1c      	itt	ne
 8016218:	3701      	addne	r7, #1
 801621a:	b2bf      	uxthne	r7, r7
            for(line_cnt = 0; line_cnt < letter_i; line_cnt++) {
 801621c:	3601      	adds	r6, #1
 801621e:	e7c9      	b.n	80161b4 <release_handler+0xa8>
            lv_obj_invalidate(ddlist);
 8016220:	4628      	mov	r0, r5
 8016222:	f7f8 fb6b 	bl	800e8fc <lv_obj_invalidate>
 8016226:	e78a      	b.n	801613e <release_handler+0x32>
 8016228:	20001cbc 	.word	0x20001cbc

0801622c <lv_ddlist_signal>:
    res = ancestor_signal(ddlist, sign, param);
 801622c:	4b4c      	ldr	r3, [pc, #304]	; (8016360 <lv_ddlist_signal+0x134>)
{
 801622e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    res = ancestor_signal(ddlist, sign, param);
 8016232:	681b      	ldr	r3, [r3, #0]
{
 8016234:	4605      	mov	r5, r0
 8016236:	460e      	mov	r6, r1
 8016238:	4690      	mov	r8, r2
    res = ancestor_signal(ddlist, sign, param);
 801623a:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 801623c:	2801      	cmp	r0, #1
    res = ancestor_signal(ddlist, sign, param);
 801623e:	4607      	mov	r7, r0
    if(res != LV_RES_OK) return res;
 8016240:	d10c      	bne.n	801625c <lv_ddlist_signal+0x30>
    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
 8016242:	4628      	mov	r0, r5
 8016244:	f7f9 f9d7 	bl	800f5f6 <lv_obj_get_ext_attr>
    if(sign == LV_SIGNAL_STYLE_CHG) {
 8016248:	2e04      	cmp	r6, #4
    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
 801624a:	4604      	mov	r4, r0
    if(sign == LV_SIGNAL_STYLE_CHG) {
 801624c:	d104      	bne.n	8016258 <lv_ddlist_signal+0x2c>
        lv_ddlist_refr_size(ddlist, 0);
 801624e:	2100      	movs	r1, #0
                lv_ddlist_refr_size(ddlist, true);
 8016250:	4628      	mov	r0, r5
 8016252:	f7ff fedf 	bl	8016014 <lv_ddlist_refr_size>
 8016256:	e001      	b.n	801625c <lv_ddlist_signal+0x30>
    } else if(sign == LV_SIGNAL_CLEANUP) {
 8016258:	b91e      	cbnz	r6, 8016262 <lv_ddlist_signal+0x36>
        ext->label = NULL;
 801625a:	6306      	str	r6, [r0, #48]	; 0x30
}
 801625c:	4638      	mov	r0, r7
 801625e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if(sign == LV_SIGNAL_FOCUS) {
 8016262:	2e0f      	cmp	r6, #15
 8016264:	d120      	bne.n	80162a8 <lv_ddlist_signal+0x7c>
        lv_group_t * g             = lv_obj_get_group(ddlist);
 8016266:	4628      	mov	r0, r5
 8016268:	f7f9 f9cb 	bl	800f602 <lv_obj_get_group>
        bool editing               = lv_group_get_editing(g);
 801626c:	f7f8 f985 	bl	800e57a <lv_group_get_editing>
 8016270:	4606      	mov	r6, r0
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 8016272:	f7f8 f997 	bl	800e5a4 <lv_indev_get_act>
 8016276:	f7f8 f99b 	bl	800e5b0 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 801627a:	2804      	cmp	r0, #4
 801627c:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8016280:	d10f      	bne.n	80162a2 <lv_ddlist_signal+0x76>
            if(editing) {
 8016282:	b13e      	cbz	r6, 8016294 <lv_ddlist_signal+0x68>
                ext->opened         = true;
 8016284:	f043 0301 	orr.w	r3, r3, #1
 8016288:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
                ext->sel_opt_id_ori = ext->sel_opt_id; /*Save the current value. Used to revert this
 801628c:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 801628e:	87a3      	strh	r3, [r4, #60]	; 0x3c
                lv_ddlist_refr_size(ddlist, true);
 8016290:	2101      	movs	r1, #1
 8016292:	e7dd      	b.n	8016250 <lv_ddlist_signal+0x24>
                ext->opened     = false;
 8016294:	f366 0300 	bfi	r3, r6, #0, #1
                ext->opened     = 0;
 8016298:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
                ext->sel_opt_id = ext->sel_opt_id_ori;
 801629c:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 801629e:	8763      	strh	r3, [r4, #58]	; 0x3a
 80162a0:	e7f6      	b.n	8016290 <lv_ddlist_signal+0x64>
            if(!ext->opened) {
 80162a2:	07de      	lsls	r6, r3, #31
 80162a4:	d4da      	bmi.n	801625c <lv_ddlist_signal+0x30>
 80162a6:	e7ed      	b.n	8016284 <lv_ddlist_signal+0x58>
    } else if(sign == LV_SIGNAL_RELEASED) {
 80162a8:	2e0a      	cmp	r6, #10
 80162aa:	d103      	bne.n	80162b4 <lv_ddlist_signal+0x88>
        release_handler(ddlist);
 80162ac:	4628      	mov	r0, r5
 80162ae:	f7ff ff2d 	bl	801610c <release_handler>
 80162b2:	e7d3      	b.n	801625c <lv_ddlist_signal+0x30>
    } else if(sign == LV_SIGNAL_DEFOCUS) {
 80162b4:	2e10      	cmp	r6, #16
 80162b6:	d106      	bne.n	80162c6 <lv_ddlist_signal+0x9a>
            if(ext->opened) {
 80162b8:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80162bc:	07da      	lsls	r2, r3, #31
 80162be:	d5cd      	bpl.n	801625c <lv_ddlist_signal+0x30>
                ext->opened     = 0;
 80162c0:	f36f 0300 	bfc	r3, #0, #1
 80162c4:	e7e8      	b.n	8016298 <lv_ddlist_signal+0x6c>
    } else if(sign == LV_SIGNAL_CONTROL) {
 80162c6:	2e11      	cmp	r6, #17
 80162c8:	d136      	bne.n	8016338 <lv_ddlist_signal+0x10c>
        char c = *((char *)param);
 80162ca:	f898 3000 	ldrb.w	r3, [r8]
        if(c == LV_KEY_RIGHT || c == LV_KEY_DOWN) {
 80162ce:	f1a3 0212 	sub.w	r2, r3, #18
 80162d2:	2a01      	cmp	r2, #1
 80162d4:	d818      	bhi.n	8016308 <lv_ddlist_signal+0xdc>
            if(!ext->opened) {
 80162d6:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80162da:	07d8      	lsls	r0, r3, #31
 80162dc:	d407      	bmi.n	80162ee <lv_ddlist_signal+0xc2>
                ext->opened = 1;
 80162de:	f043 0301 	orr.w	r3, r3, #1
 80162e2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
                lv_ddlist_refr_size(ddlist, true);
 80162e6:	4639      	mov	r1, r7
 80162e8:	4628      	mov	r0, r5
 80162ea:	f7ff fe93 	bl	8016014 <lv_ddlist_refr_size>
            if(ext->sel_opt_id + 1 < ext->option_cnt) {
 80162ee:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 80162f0:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 80162f2:	3301      	adds	r3, #1
 80162f4:	4293      	cmp	r3, r2
 80162f6:	dab1      	bge.n	801625c <lv_ddlist_signal+0x30>
                lv_ddlist_pos_current_option(ddlist);
 80162f8:	4628      	mov	r0, r5
                ext->sel_opt_id--;
 80162fa:	8763      	strh	r3, [r4, #58]	; 0x3a
                lv_ddlist_pos_current_option(ddlist);
 80162fc:	f7ff fe37 	bl	8015f6e <lv_ddlist_pos_current_option>
                lv_obj_invalidate(ddlist);
 8016300:	4628      	mov	r0, r5
 8016302:	f7f8 fafb 	bl	800e8fc <lv_obj_invalidate>
 8016306:	e7a9      	b.n	801625c <lv_ddlist_signal+0x30>
        } else if(c == LV_KEY_LEFT || c == LV_KEY_UP) {
 8016308:	2b14      	cmp	r3, #20
 801630a:	d001      	beq.n	8016310 <lv_ddlist_signal+0xe4>
 801630c:	2b11      	cmp	r3, #17
 801630e:	d110      	bne.n	8016332 <lv_ddlist_signal+0x106>
            if(!ext->opened) {
 8016310:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8016314:	07d9      	lsls	r1, r3, #31
 8016316:	d407      	bmi.n	8016328 <lv_ddlist_signal+0xfc>
                ext->opened = 1;
 8016318:	f043 0301 	orr.w	r3, r3, #1
 801631c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
                lv_ddlist_refr_size(ddlist, true);
 8016320:	2101      	movs	r1, #1
 8016322:	4628      	mov	r0, r5
 8016324:	f7ff fe76 	bl	8016014 <lv_ddlist_refr_size>
            if(ext->sel_opt_id > 0) {
 8016328:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 801632a:	2b00      	cmp	r3, #0
 801632c:	d096      	beq.n	801625c <lv_ddlist_signal+0x30>
                ext->sel_opt_id--;
 801632e:	3b01      	subs	r3, #1
 8016330:	e7e2      	b.n	80162f8 <lv_ddlist_signal+0xcc>
        } else if(c == LV_KEY_ESC) {
 8016332:	2b1b      	cmp	r3, #27
 8016334:	d192      	bne.n	801625c <lv_ddlist_signal+0x30>
 8016336:	e7bf      	b.n	80162b8 <lv_ddlist_signal+0x8c>
    } else if(sign == LV_SIGNAL_GET_EDITABLE) {
 8016338:	2e12      	cmp	r6, #18
 801633a:	d102      	bne.n	8016342 <lv_ddlist_signal+0x116>
        *editable       = true;
 801633c:	f888 7000 	strb.w	r7, [r8]
 8016340:	e78c      	b.n	801625c <lv_ddlist_signal+0x30>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8016342:	2e06      	cmp	r6, #6
 8016344:	d18a      	bne.n	801625c <lv_ddlist_signal+0x30>
 8016346:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 8016348:	f858 1023 	ldr.w	r1, [r8, r3, lsl #2]
 801634c:	b2da      	uxtb	r2, r3
 801634e:	b119      	cbz	r1, 8016358 <lv_ddlist_signal+0x12c>
 8016350:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8016352:	2b07      	cmp	r3, #7
 8016354:	d1f8      	bne.n	8016348 <lv_ddlist_signal+0x11c>
 8016356:	461a      	mov	r2, r3
        buf->type[i] = "lv_ddlist";
 8016358:	4b02      	ldr	r3, [pc, #8]	; (8016364 <lv_ddlist_signal+0x138>)
 801635a:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
 801635e:	e77d      	b.n	801625c <lv_ddlist_signal+0x30>
 8016360:	2000b044 	.word	0x2000b044
 8016364:	080ec3f3 	.word	0x080ec3f3

08016368 <lv_page_set_scrl_fit2>:
 * @param page pointer to a page object
 * @param hot horizontal fit policy from `lv_fit_t`
 * @param ver vertical fit policy from `lv_fit_t`
 */
static inline void lv_page_set_scrl_fit2(lv_obj_t * page, lv_fit_t hor, lv_fit_t ver)
{
 8016368:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801636a:	4614      	mov	r4, r2
 801636c:	460d      	mov	r5, r1
    lv_cont_set_fit2(lv_page_get_scrl(page), hor, ver);
 801636e:	f001 fec6 	bl	80180fe <lv_page_get_scrl>
 * @param hor horizontal fit policy from `lv_fit_t`
 * @param ver vertical fit policy from `lv_fit_t`
 */
static inline void lv_cont_set_fit2(lv_obj_t * cont, lv_fit_t hor, lv_fit_t ver)
{
    lv_cont_set_fit4(cont, hor, hor, ver, ver);
 8016372:	9400      	str	r4, [sp, #0]
 8016374:	4623      	mov	r3, r4
 8016376:	462a      	mov	r2, r5
 8016378:	4629      	mov	r1, r5
 801637a:	f7ff fac0 	bl	80158fe <lv_cont_set_fit4>
}
 801637e:	b003      	add	sp, #12
 8016380:	bd30      	pop	{r4, r5, pc}

08016382 <lv_ddlist_refr_width>:
/**
 * Be sure the width of the scrollable exactly fits the ddlist
 * @param ddlist pointer to a ddlist
 */
static void lv_ddlist_refr_width(lv_obj_t * ddlist)
{
 8016382:	b510      	push	{r4, lr}
 8016384:	4604      	mov	r4, r0
 * @param page pointer to a page object
 * @return an element of `lv_fit_t`
 */
static inline lv_fit_t lv_page_get_scrl_fit_bottom(const lv_obj_t * page)
{
    return lv_cont_get_fit_bottom(lv_page_get_scrl(page));
 8016386:	f001 feba 	bl	80180fe <lv_page_get_scrl>
 801638a:	f7ff fde9 	bl	8015f60 <lv_cont_get_fit_bottom>
    /*Set the TIGHT fit horizontally the set the width to the content*/
    lv_page_set_scrl_fit2(ddlist, LV_FIT_TIGHT, lv_page_get_scrl_fit_bottom(ddlist));
 801638e:	2101      	movs	r1, #1
 8016390:	4602      	mov	r2, r0
 8016392:	4620      	mov	r0, r4
 8016394:	f7ff ffe8 	bl	8016368 <lv_page_set_scrl_fit2>
 8016398:	4620      	mov	r0, r4
 801639a:	f001 feb0 	bl	80180fe <lv_page_get_scrl>
 801639e:	f7ff fddf 	bl	8015f60 <lv_cont_get_fit_bottom>

    /*Revert FILL fit to fill the parent with the options area. It allows to RIGHT/CENTER align the text*/
    lv_page_set_scrl_fit2(ddlist, LV_FIT_FILL, lv_page_get_scrl_fit_bottom(ddlist));
 80163a2:	2103      	movs	r1, #3
 80163a4:	4602      	mov	r2, r0
 80163a6:	4620      	mov	r0, r4
}
 80163a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_page_set_scrl_fit2(ddlist, LV_FIT_FILL, lv_page_get_scrl_fit_bottom(ddlist));
 80163ac:	f7ff bfdc 	b.w	8016368 <lv_page_set_scrl_fit2>

080163b0 <lv_ddlist_set_options>:
{
 80163b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80163b2:	4606      	mov	r6, r0
 80163b4:	460f      	mov	r7, r1
    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
 80163b6:	f7f9 f91e 	bl	800f5f6 <lv_obj_get_ext_attr>
    ext->option_cnt = 0;
 80163ba:	2300      	movs	r3, #0
    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
 80163bc:	4604      	mov	r4, r0
    ext->option_cnt = 0;
 80163be:	8703      	strh	r3, [r0, #56]	; 0x38
    for(i = 0; options[i] != '\0'; i++) {
 80163c0:	b29a      	uxth	r2, r3
 80163c2:	5cbd      	ldrb	r5, [r7, r2]
 80163c4:	b9d5      	cbnz	r5, 80163fc <lv_ddlist_set_options+0x4c>
    ext->option_cnt++; /*Last option has no `\n`*/
 80163c6:	8f23      	ldrh	r3, [r4, #56]	; 0x38
    lv_label_set_text(ext->label, options);
 80163c8:	6b20      	ldr	r0, [r4, #48]	; 0x30
    ext->sel_opt_id     = 0;
 80163ca:	8765      	strh	r5, [r4, #58]	; 0x3a
    ext->option_cnt++; /*Last option has no `\n`*/
 80163cc:	3301      	adds	r3, #1
 80163ce:	8723      	strh	r3, [r4, #56]	; 0x38
    lv_label_set_text(ext->label, options);
 80163d0:	4639      	mov	r1, r7
    ext->sel_opt_id_ori = 0;
 80163d2:	87a5      	strh	r5, [r4, #60]	; 0x3c
    lv_label_set_text(ext->label, options);
 80163d4:	f001 fa9c 	bl	8017910 <lv_label_set_text>
    lv_ddlist_refr_width(ddlist);
 80163d8:	4630      	mov	r0, r6
 80163da:	f7ff ffd2 	bl	8016382 <lv_ddlist_refr_width>
    switch(lv_label_get_align(ext->label)) {
 80163de:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80163e0:	f000 ffbe 	bl	8017360 <lv_label_get_align>
 80163e4:	2801      	cmp	r0, #1
 80163e6:	d018      	beq.n	801641a <lv_ddlist_set_options+0x6a>
 80163e8:	d30f      	bcc.n	801640a <lv_ddlist_set_options+0x5a>
 80163ea:	2802      	cmp	r0, #2
 80163ec:	d019      	beq.n	8016422 <lv_ddlist_set_options+0x72>
    lv_ddlist_refr_size(ddlist, false);
 80163ee:	2100      	movs	r1, #0
 80163f0:	4630      	mov	r0, r6
}
 80163f2:	b003      	add	sp, #12
 80163f4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    lv_ddlist_refr_size(ddlist, false);
 80163f8:	f7ff be0c 	b.w	8016014 <lv_ddlist_refr_size>
        if(options[i] == '\n') ext->option_cnt++;
 80163fc:	2d0a      	cmp	r5, #10
 80163fe:	bf02      	ittt	eq
 8016400:	8f22      	ldrheq	r2, [r4, #56]	; 0x38
 8016402:	3201      	addeq	r2, #1
 8016404:	8722      	strheq	r2, [r4, #56]	; 0x38
 8016406:	3301      	adds	r3, #1
 8016408:	e7da      	b.n	80163c0 <lv_ddlist_set_options+0x10>
        case LV_LABEL_ALIGN_LEFT: lv_obj_align(ext->label, NULL, LV_ALIGN_IN_LEFT_MID, 0, 0); break;
 801640a:	9500      	str	r5, [sp, #0]
 801640c:	462b      	mov	r3, r5
 801640e:	2207      	movs	r2, #7
        case LV_LABEL_ALIGN_RIGHT: lv_obj_align(ext->label, NULL, LV_ALIGN_IN_RIGHT_MID, 0, 0); break;
 8016410:	4619      	mov	r1, r3
 8016412:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8016414:	f7f8 fb34 	bl	800ea80 <lv_obj_align>
 8016418:	e7e9      	b.n	80163ee <lv_ddlist_set_options+0x3e>
        case LV_LABEL_ALIGN_CENTER: lv_obj_align(ext->label, NULL, LV_ALIGN_CENTER, 0, 0); break;
 801641a:	9500      	str	r5, [sp, #0]
 801641c:	462b      	mov	r3, r5
 801641e:	462a      	mov	r2, r5
 8016420:	e7f6      	b.n	8016410 <lv_ddlist_set_options+0x60>
        case LV_LABEL_ALIGN_RIGHT: lv_obj_align(ext->label, NULL, LV_ALIGN_IN_RIGHT_MID, 0, 0); break;
 8016422:	9500      	str	r5, [sp, #0]
 8016424:	462b      	mov	r3, r5
 8016426:	2208      	movs	r2, #8
 8016428:	e7f2      	b.n	8016410 <lv_ddlist_set_options+0x60>

0801642a <lv_ddlist_set_selected>:
{
 801642a:	b538      	push	{r3, r4, r5, lr}
 801642c:	460c      	mov	r4, r1
 801642e:	4605      	mov	r5, r0
    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
 8016430:	f7f9 f8e1 	bl	800f5f6 <lv_obj_get_ext_attr>
    if(ext->sel_opt_id == sel_opt) return;
 8016434:	8f43      	ldrh	r3, [r0, #58]	; 0x3a
 8016436:	42a3      	cmp	r3, r4
 8016438:	d014      	beq.n	8016464 <lv_ddlist_set_selected+0x3a>
    ext->sel_opt_id     = sel_opt < ext->option_cnt ? sel_opt : ext->option_cnt - 1;
 801643a:	8f01      	ldrh	r1, [r0, #56]	; 0x38
    if(ext->opened == 0) {
 801643c:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
    ext->sel_opt_id     = sel_opt < ext->option_cnt ? sel_opt : ext->option_cnt - 1;
 8016440:	428c      	cmp	r4, r1
 8016442:	bf24      	itt	cs
 8016444:	f101 31ff 	addcs.w	r1, r1, #4294967295	; 0xffffffff
 8016448:	b28c      	uxthcs	r4, r1
    if(ext->opened == 0) {
 801644a:	07db      	lsls	r3, r3, #31
    ext->sel_opt_id     = sel_opt < ext->option_cnt ? sel_opt : ext->option_cnt - 1;
 801644c:	8744      	strh	r4, [r0, #58]	; 0x3a
    ext->sel_opt_id_ori = ext->sel_opt_id;
 801644e:	8784      	strh	r4, [r0, #60]	; 0x3c
        lv_ddlist_pos_current_option(ddlist);
 8016450:	4628      	mov	r0, r5
    if(ext->opened == 0) {
 8016452:	d403      	bmi.n	801645c <lv_ddlist_set_selected+0x32>
}
 8016454:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_ddlist_pos_current_option(ddlist);
 8016458:	f7ff bd89 	b.w	8015f6e <lv_ddlist_pos_current_option>
}
 801645c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_obj_invalidate(ddlist);
 8016460:	f7f8 ba4c 	b.w	800e8fc <lv_obj_invalidate>
 8016464:	bd38      	pop	{r3, r4, r5, pc}

08016466 <lv_ddlist_set_fix_height>:
{
 8016466:	b538      	push	{r3, r4, r5, lr}
 8016468:	460c      	mov	r4, r1
 801646a:	4605      	mov	r5, r0
    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
 801646c:	f7f9 f8c3 	bl	800f5f6 <lv_obj_get_ext_attr>
    if(ext->fix_height == h) return;
 8016470:	f9b0 3040 	ldrsh.w	r3, [r0, #64]	; 0x40
 8016474:	42a3      	cmp	r3, r4
 8016476:	d007      	beq.n	8016488 <lv_ddlist_set_fix_height+0x22>
    ext->fix_height = h;
 8016478:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
    lv_ddlist_refr_size(ddlist, false);
 801647c:	2100      	movs	r1, #0
 801647e:	4628      	mov	r0, r5
}
 8016480:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_ddlist_refr_size(ddlist, false);
 8016484:	f7ff bdc6 	b.w	8016014 <lv_ddlist_refr_size>
 8016488:	bd38      	pop	{r3, r4, r5, pc}

0801648a <lv_ddlist_set_fix_width>:
{
 801648a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801648c:	4604      	mov	r4, r0
    if(w == 0) {
 801648e:	460d      	mov	r5, r1
 8016490:	b979      	cbnz	r1, 80164b2 <lv_ddlist_set_fix_width+0x28>
        lv_cont_set_fit2(ddlist, LV_FIT_TIGHT, lv_cont_get_fit_bottom(ddlist));
 8016492:	f7ff fd65 	bl	8015f60 <lv_cont_get_fit_bottom>
 8016496:	2201      	movs	r2, #1
 8016498:	4603      	mov	r3, r0
 801649a:	9000      	str	r0, [sp, #0]
 801649c:	4611      	mov	r1, r2
 801649e:	4620      	mov	r0, r4
 80164a0:	f7ff fa2d 	bl	80158fe <lv_cont_set_fit4>
    lv_ddlist_refr_size(ddlist, false);
 80164a4:	2100      	movs	r1, #0
 80164a6:	4620      	mov	r0, r4
}
 80164a8:	b003      	add	sp, #12
 80164aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    lv_ddlist_refr_size(ddlist, false);
 80164ae:	f7ff bdb1 	b.w	8016014 <lv_ddlist_refr_size>
        lv_cont_set_fit2(ddlist, LV_FIT_NONE, lv_cont_get_fit_bottom(ddlist));
 80164b2:	f7ff fd55 	bl	8015f60 <lv_cont_get_fit_bottom>
 80164b6:	2200      	movs	r2, #0
 80164b8:	4603      	mov	r3, r0
 80164ba:	9000      	str	r0, [sp, #0]
 80164bc:	4611      	mov	r1, r2
 80164be:	4620      	mov	r0, r4
 80164c0:	f7ff fa1d 	bl	80158fe <lv_cont_set_fit4>
        lv_obj_set_width(ddlist, w);
 80164c4:	4629      	mov	r1, r5
 80164c6:	4620      	mov	r0, r4
 80164c8:	f7f8 fec4 	bl	800f254 <lv_obj_set_width>
 80164cc:	e7ea      	b.n	80164a4 <lv_ddlist_set_fix_width+0x1a>

080164ce <lv_ddlist_set_stay_open>:
{
 80164ce:	b510      	push	{r4, lr}
 80164d0:	460c      	mov	r4, r1
    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
 80164d2:	f7f9 f890 	bl	800f5f6 <lv_obj_get_ext_attr>
    ext->stay_open = en ? 1 : 0;
 80164d6:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80164da:	f364 03c3 	bfi	r3, r4, #3, #1
 80164de:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 80164e2:	bd10      	pop	{r4, pc}

080164e4 <lv_ddlist_set_style>:
{
 80164e4:	b570      	push	{r4, r5, r6, lr}
 80164e6:	460e      	mov	r6, r1
 80164e8:	4604      	mov	r4, r0
 80164ea:	4615      	mov	r5, r2
    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
 80164ec:	f7f9 f883 	bl	800f5f6 <lv_obj_get_ext_attr>
    switch(type) {
 80164f0:	2e01      	cmp	r6, #1
 80164f2:	d014      	beq.n	801651e <lv_ddlist_set_style+0x3a>
 80164f4:	d302      	bcc.n	80164fc <lv_ddlist_set_style+0x18>
 80164f6:	2e02      	cmp	r6, #2
 80164f8:	d00a      	beq.n	8016510 <lv_ddlist_set_style+0x2c>
 80164fa:	bd70      	pop	{r4, r5, r6, pc}
            lv_page_set_style(ddlist, LV_PAGE_STYLE_BG, style);
 80164fc:	4620      	mov	r0, r4
 80164fe:	462a      	mov	r2, r5
 8016500:	2100      	movs	r1, #0
 8016502:	f001 fdcc 	bl	801809e <lv_page_set_style>
            lv_ddlist_refr_width(ddlist);
 8016506:	4620      	mov	r0, r4
}
 8016508:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            lv_ddlist_refr_width(ddlist);
 801650c:	f7ff bf39 	b.w	8016382 <lv_ddlist_refr_width>
        case LV_DDLIST_STYLE_SB: lv_page_set_style(ddlist, LV_PAGE_STYLE_SB, style); break;
 8016510:	462a      	mov	r2, r5
 8016512:	4631      	mov	r1, r6
 8016514:	4620      	mov	r0, r4
}
 8016516:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        case LV_DDLIST_STYLE_SB: lv_page_set_style(ddlist, LV_PAGE_STYLE_SB, style); break;
 801651a:	f001 bdc0 	b.w	801809e <lv_page_set_style>
            ext->sel_style  = style;
 801651e:	6345      	str	r5, [r0, #52]	; 0x34
            lv_obj_t * scrl = lv_page_get_scrl(ddlist);
 8016520:	4620      	mov	r0, r4
 8016522:	f001 fdec 	bl	80180fe <lv_page_get_scrl>
}
 8016526:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            lv_obj_refresh_ext_draw_pad(scrl); /*Because of the wider selected rectangle*/
 801652a:	f7f8 beb0 	b.w	800f28e <lv_obj_refresh_ext_draw_pad>
	...

08016530 <lv_ddlist_create>:
{
 8016530:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016532:	460e      	mov	r6, r1
    lv_obj_t * new_ddlist = lv_page_create(par, copy);
 8016534:	f001 fe06 	bl	8018144 <lv_page_create>
    lv_mem_assert(new_ddlist);
 8016538:	4604      	mov	r4, r0
 801653a:	b900      	cbnz	r0, 801653e <lv_ddlist_create+0xe>
 801653c:	e7fe      	b.n	801653c <lv_ddlist_create+0xc>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_ddlist);
 801653e:	4d5f      	ldr	r5, [pc, #380]	; (80166bc <lv_ddlist_create+0x18c>)
 8016540:	682b      	ldr	r3, [r5, #0]
 8016542:	b913      	cbnz	r3, 801654a <lv_ddlist_create+0x1a>
 8016544:	f7f9 f853 	bl	800f5ee <lv_obj_get_signal_cb>
 8016548:	6028      	str	r0, [r5, #0]
    if(ancestor_scrl_signal == NULL) ancestor_scrl_signal = lv_obj_get_signal_cb(lv_page_get_scrl(new_ddlist));
 801654a:	4d5d      	ldr	r5, [pc, #372]	; (80166c0 <lv_ddlist_create+0x190>)
 801654c:	682b      	ldr	r3, [r5, #0]
 801654e:	b92b      	cbnz	r3, 801655c <lv_ddlist_create+0x2c>
 8016550:	4620      	mov	r0, r4
 8016552:	f001 fdd4 	bl	80180fe <lv_page_get_scrl>
 8016556:	f7f9 f84a 	bl	800f5ee <lv_obj_get_signal_cb>
 801655a:	6028      	str	r0, [r5, #0]
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(new_ddlist);
 801655c:	4d59      	ldr	r5, [pc, #356]	; (80166c4 <lv_ddlist_create+0x194>)
 801655e:	682b      	ldr	r3, [r5, #0]
 8016560:	b91b      	cbnz	r3, 801656a <lv_ddlist_create+0x3a>
 8016562:	4620      	mov	r0, r4
 8016564:	f7f9 f845 	bl	800f5f2 <lv_obj_get_design_cb>
 8016568:	6028      	str	r0, [r5, #0]
    lv_ddlist_ext_t * ext = lv_obj_allocate_ext_attr(new_ddlist, sizeof(lv_ddlist_ext_t));
 801656a:	2144      	movs	r1, #68	; 0x44
 801656c:	4620      	mov	r0, r4
 801656e:	f7f8 f997 	bl	800e8a0 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 8016572:	4605      	mov	r5, r0
 8016574:	b900      	cbnz	r0, 8016578 <lv_ddlist_create+0x48>
 8016576:	e7fe      	b.n	8016576 <lv_ddlist_create+0x46>
    ext->opened         = 0;
 8016578:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
    ext->sel_style      = &lv_style_plain_color;
 801657c:	4f52      	ldr	r7, [pc, #328]	; (80166c8 <lv_ddlist_create+0x198>)
    lv_obj_set_signal_cb(new_ddlist, lv_ddlist_signal);
 801657e:	4953      	ldr	r1, [pc, #332]	; (80166cc <lv_ddlist_create+0x19c>)
    ext->sel_style      = &lv_style_plain_color;
 8016580:	6347      	str	r7, [r0, #52]	; 0x34
    ext->label          = NULL;
 8016582:	2300      	movs	r3, #0
    ext->stay_open      = 0;
 8016584:	f002 02fa 	and.w	r2, r2, #250	; 0xfa
 8016588:	f363 02c3 	bfi	r2, r3, #3, #1
    ext->label          = NULL;
 801658c:	6303      	str	r3, [r0, #48]	; 0x30
    ext->fix_height     = 0;
 801658e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    ext->sel_opt_id     = 0;
 8016592:	8743      	strh	r3, [r0, #58]	; 0x3a
    ext->sel_opt_id_ori = 0;
 8016594:	8783      	strh	r3, [r0, #60]	; 0x3c
    ext->option_cnt     = 0;
 8016596:	8703      	strh	r3, [r0, #56]	; 0x38
    ext->stay_open      = 0;
 8016598:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    lv_obj_set_signal_cb(new_ddlist, lv_ddlist_signal);
 801659c:	4620      	mov	r0, r4
 801659e:	f7f8 f97b 	bl	800e898 <lv_obj_set_signal_cb>
    lv_obj_set_signal_cb(lv_page_get_scrl(new_ddlist), lv_ddlist_scrl_signal);
 80165a2:	4620      	mov	r0, r4
 80165a4:	f001 fdab 	bl	80180fe <lv_page_get_scrl>
 80165a8:	4949      	ldr	r1, [pc, #292]	; (80166d0 <lv_ddlist_create+0x1a0>)
 80165aa:	f7f8 f975 	bl	800e898 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_ddlist, lv_ddlist_design);
 80165ae:	4949      	ldr	r1, [pc, #292]	; (80166d4 <lv_ddlist_create+0x1a4>)
 80165b0:	4620      	mov	r0, r4
 80165b2:	f7f8 f973 	bl	800e89c <lv_obj_set_design_cb>
    if(copy == NULL) {
 80165b6:	2e00      	cmp	r6, #0
 80165b8:	d14c      	bne.n	8016654 <lv_ddlist_create+0x124>
        lv_page_set_anim_time(new_ddlist, LV_DDLIST_DEF_ANIM_TIME);
 80165ba:	21c8      	movs	r1, #200	; 0xc8
 80165bc:	4620      	mov	r0, r4
 80165be:	f001 fd68 	bl	8018092 <lv_page_set_anim_time>
        lv_obj_t * scrl = lv_page_get_scrl(new_ddlist);
 80165c2:	4620      	mov	r0, r4
 80165c4:	f001 fd9b 	bl	80180fe <lv_page_get_scrl>
        lv_obj_set_drag(scrl, false);
 80165c8:	4631      	mov	r1, r6
 80165ca:	f7f8 f898 	bl	800e6fe <lv_obj_set_drag>
        lv_page_set_scrl_fit2(new_ddlist, LV_FIT_FILL, LV_FIT_TIGHT);
 80165ce:	2201      	movs	r2, #1
 80165d0:	2103      	movs	r1, #3
 80165d2:	4620      	mov	r0, r4
 80165d4:	f7ff fec8 	bl	8016368 <lv_page_set_scrl_fit2>
        ext->label = lv_label_create(new_ddlist, NULL);
 80165d8:	4631      	mov	r1, r6
 80165da:	4620      	mov	r0, r4
 80165dc:	f001 fa42 	bl	8017a64 <lv_label_create>
 80165e0:	2201      	movs	r2, #1
 80165e2:	4633      	mov	r3, r6
 80165e4:	6328      	str	r0, [r5, #48]	; 0x30
 80165e6:	4611      	mov	r1, r2
 80165e8:	4620      	mov	r0, r4
 80165ea:	9600      	str	r6, [sp, #0]
 80165ec:	f7ff f987 	bl	80158fe <lv_cont_set_fit4>
        lv_page_set_sb_mode(new_ddlist, LV_SB_MODE_HIDE);
 80165f0:	2104      	movs	r1, #4
 80165f2:	4620      	mov	r0, r4
 80165f4:	f001 fd20 	bl	8018038 <lv_page_set_sb_mode>
        lv_page_set_style(new_ddlist, LV_PAGE_STYLE_SCRL, &lv_style_transp_tight);
 80165f8:	4a37      	ldr	r2, [pc, #220]	; (80166d8 <lv_ddlist_create+0x1a8>)
 80165fa:	2101      	movs	r1, #1
 80165fc:	4620      	mov	r0, r4
 80165fe:	f001 fd4e 	bl	801809e <lv_page_set_style>
        lv_ddlist_set_options(new_ddlist, "Option 1\nOption 2\nOption 3");
 8016602:	4936      	ldr	r1, [pc, #216]	; (80166dc <lv_ddlist_create+0x1ac>)
 8016604:	4620      	mov	r0, r4
 8016606:	f7ff fed3 	bl	80163b0 <lv_ddlist_set_options>
        lv_theme_t * th = lv_theme_get_current();
 801660a:	f002 ffbf 	bl	801958c <lv_theme_get_current>
        if(th) {
 801660e:	4605      	mov	r5, r0
 8016610:	b1a0      	cbz	r0, 801663c <lv_ddlist_create+0x10c>
            lv_ddlist_set_style(new_ddlist, LV_DDLIST_STYLE_BG, th->style.ddlist.bg);
 8016612:	f8d0 214c 	ldr.w	r2, [r0, #332]	; 0x14c
 8016616:	4631      	mov	r1, r6
 8016618:	4620      	mov	r0, r4
 801661a:	f7ff ff63 	bl	80164e4 <lv_ddlist_set_style>
            lv_ddlist_set_style(new_ddlist, LV_DDLIST_STYLE_SEL, th->style.ddlist.sel);
 801661e:	f8d5 2150 	ldr.w	r2, [r5, #336]	; 0x150
 8016622:	2101      	movs	r1, #1
 8016624:	4620      	mov	r0, r4
 8016626:	f7ff ff5d 	bl	80164e4 <lv_ddlist_set_style>
            lv_ddlist_set_style(new_ddlist, LV_DDLIST_STYLE_SB, th->style.ddlist.sb);
 801662a:	f8d5 2154 	ldr.w	r2, [r5, #340]	; 0x154
            lv_ddlist_set_style(new_ddlist, LV_DDLIST_STYLE_SB, &lv_style_pretty_color);
 801662e:	2102      	movs	r1, #2
 8016630:	4620      	mov	r0, r4
 8016632:	f7ff ff57 	bl	80164e4 <lv_ddlist_set_style>
}
 8016636:	4620      	mov	r0, r4
 8016638:	b003      	add	sp, #12
 801663a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            lv_ddlist_set_style(new_ddlist, LV_DDLIST_STYLE_BG, &lv_style_pretty);
 801663c:	4a28      	ldr	r2, [pc, #160]	; (80166e0 <lv_ddlist_create+0x1b0>)
 801663e:	4631      	mov	r1, r6
 8016640:	4620      	mov	r0, r4
 8016642:	f7ff ff4f 	bl	80164e4 <lv_ddlist_set_style>
            lv_ddlist_set_style(new_ddlist, LV_DDLIST_STYLE_SEL, &lv_style_plain_color);
 8016646:	463a      	mov	r2, r7
 8016648:	2101      	movs	r1, #1
 801664a:	4620      	mov	r0, r4
 801664c:	f7ff ff4a 	bl	80164e4 <lv_ddlist_set_style>
            lv_ddlist_set_style(new_ddlist, LV_DDLIST_STYLE_SB, &lv_style_pretty_color);
 8016650:	4a24      	ldr	r2, [pc, #144]	; (80166e4 <lv_ddlist_create+0x1b4>)
 8016652:	e7ec      	b.n	801662e <lv_ddlist_create+0xfe>
        lv_ddlist_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8016654:	4630      	mov	r0, r6
 8016656:	f7f8 ffce 	bl	800f5f6 <lv_obj_get_ext_attr>
 801665a:	4606      	mov	r6, r0
        ext->label                 = lv_label_create(new_ddlist, copy_ext->label);
 801665c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801665e:	4620      	mov	r0, r4
 8016660:	f001 fa00 	bl	8017a64 <lv_label_create>
 8016664:	6328      	str	r0, [r5, #48]	; 0x30
 8016666:	4607      	mov	r7, r0
        lv_label_set_text(ext->label, lv_label_get_text(copy_ext->label));
 8016668:	6b30      	ldr	r0, [r6, #48]	; 0x30
 801666a:	f000 fe6d 	bl	8017348 <lv_label_get_text>
 801666e:	4601      	mov	r1, r0
 8016670:	4638      	mov	r0, r7
 8016672:	f001 f94d 	bl	8017910 <lv_label_set_text>
        ext->sel_opt_id     = copy_ext->sel_opt_id;
 8016676:	8f73      	ldrh	r3, [r6, #58]	; 0x3a
 8016678:	876b      	strh	r3, [r5, #58]	; 0x3a
        ext->sel_opt_id_ori = copy_ext->sel_opt_id;
 801667a:	8f73      	ldrh	r3, [r6, #58]	; 0x3a
 801667c:	87ab      	strh	r3, [r5, #60]	; 0x3c
        ext->fix_height     = copy_ext->fix_height;
 801667e:	f9b6 3040 	ldrsh.w	r3, [r6, #64]	; 0x40
 8016682:	f8a5 3040 	strh.w	r3, [r5, #64]	; 0x40
        ext->option_cnt     = copy_ext->option_cnt;
 8016686:	8f33      	ldrh	r3, [r6, #56]	; 0x38
 8016688:	872b      	strh	r3, [r5, #56]	; 0x38
        ext->sel_style      = copy_ext->sel_style;
 801668a:	6b73      	ldr	r3, [r6, #52]	; 0x34
 801668c:	636b      	str	r3, [r5, #52]	; 0x34
        ext->draw_arrow     = copy_ext->draw_arrow;
 801668e:	f896 303e 	ldrb.w	r3, [r6, #62]	; 0x3e
 8016692:	f895 203e 	ldrb.w	r2, [r5, #62]	; 0x3e
 8016696:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801669a:	f363 0282 	bfi	r2, r3, #2, #1
 801669e:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        ext->stay_open      = copy_ext->stay_open;
 80166a2:	f896 303e 	ldrb.w	r3, [r6, #62]	; 0x3e
 80166a6:	b2d2      	uxtb	r2, r2
 80166a8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80166ac:	f363 02c3 	bfi	r2, r3, #3, #1
 80166b0:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        lv_obj_refresh_style(new_ddlist);
 80166b4:	4620      	mov	r0, r4
 80166b6:	f7f8 fddc 	bl	800f272 <lv_obj_refresh_style>
 80166ba:	e7bc      	b.n	8016636 <lv_ddlist_create+0x106>
 80166bc:	2000b044 	.word	0x2000b044
 80166c0:	2000b040 	.word	0x2000b040
 80166c4:	2000b03c 	.word	0x2000b03c
 80166c8:	2000c594 	.word	0x2000c594
 80166cc:	0801622d 	.word	0x0801622d
 80166d0:	080169b5 	.word	0x080169b5
 80166d4:	0801678d 	.word	0x0801678d
 80166d8:	2000c3f0 	.word	0x2000c3f0
 80166dc:	080ec3d4 	.word	0x080ec3d4
 80166e0:	2000c3b4 	.word	0x2000c3b4
 80166e4:	2000c2c4 	.word	0x2000c2c4

080166e8 <lv_ddlist_get_selected>:
{
 80166e8:	b508      	push	{r3, lr}
    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
 80166ea:	f7f8 ff84 	bl	800f5f6 <lv_obj_get_ext_attr>
}
 80166ee:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 80166f0:	bd08      	pop	{r3, pc}

080166f2 <lv_ddlist_get_selected_str>:
{
 80166f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80166f6:	4690      	mov	r8, r2
 80166f8:	460f      	mov	r7, r1
    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
 80166fa:	f7f8 ff7c 	bl	800f5f6 <lv_obj_get_ext_attr>
 80166fe:	4606      	mov	r6, r0
    const char * opt_txt = lv_label_get_text(ext->label);
 8016700:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8016702:	f000 fe21 	bl	8017348 <lv_label_get_text>
 8016706:	4604      	mov	r4, r0
    uint16_t txt_len     = strlen(opt_txt);
 8016708:	f7e9 fd62 	bl	80001d0 <strlen>
    for(i = 0; i < txt_len && line != ext->sel_opt_id; i++) {
 801670c:	4622      	mov	r2, r4
    uint16_t txt_len     = strlen(opt_txt);
 801670e:	b280      	uxth	r0, r0
    uint16_t line        = 0;
 8016710:	2300      	movs	r3, #0
 8016712:	1b15      	subs	r5, r2, r4
 8016714:	b2ad      	uxth	r5, r5
    for(i = 0; i < txt_len && line != ext->sel_opt_id; i++) {
 8016716:	42a8      	cmp	r0, r5
 8016718:	d810      	bhi.n	801673c <lv_ddlist_get_selected_str+0x4a>
 801671a:	2300      	movs	r3, #0
    for(c = 0; opt_txt[i] != '\n' && i < txt_len; c++, i++) {
 801671c:	1966      	adds	r6, r4, r5
        if(buf_size && c >= buf_size - 1) {
 801671e:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
    for(c = 0; opt_txt[i] != '\n' && i < txt_len; c++, i++) {
 8016722:	5cf2      	ldrb	r2, [r6, r3]
 8016724:	2a0a      	cmp	r2, #10
 8016726:	b29c      	uxth	r4, r3
 8016728:	d003      	beq.n	8016732 <lv_ddlist_get_selected_str+0x40>
 801672a:	442c      	add	r4, r5
 801672c:	b2a4      	uxth	r4, r4
 801672e:	42a0      	cmp	r0, r4
 8016730:	d80e      	bhi.n	8016750 <lv_ddlist_get_selected_str+0x5e>
    buf[c] = '\0';
 8016732:	b29b      	uxth	r3, r3
 8016734:	2200      	movs	r2, #0
 8016736:	54fa      	strb	r2, [r7, r3]
 8016738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for(i = 0; i < txt_len && line != ext->sel_opt_id; i++) {
 801673c:	8f71      	ldrh	r1, [r6, #58]	; 0x3a
 801673e:	4299      	cmp	r1, r3
 8016740:	d0eb      	beq.n	801671a <lv_ddlist_get_selected_str+0x28>
        if(opt_txt[i] == '\n') line++;
 8016742:	f812 1b01 	ldrb.w	r1, [r2], #1
 8016746:	290a      	cmp	r1, #10
 8016748:	bf04      	itt	eq
 801674a:	3301      	addeq	r3, #1
 801674c:	b29b      	uxtheq	r3, r3
 801674e:	e7e0      	b.n	8016712 <lv_ddlist_get_selected_str+0x20>
        if(buf_size && c >= buf_size - 1) {
 8016750:	f1b8 0f00 	cmp.w	r8, #0
 8016754:	d001      	beq.n	801675a <lv_ddlist_get_selected_str+0x68>
 8016756:	4299      	cmp	r1, r3
 8016758:	ddeb      	ble.n	8016732 <lv_ddlist_get_selected_str+0x40>
        buf[c] = opt_txt[i];
 801675a:	54fa      	strb	r2, [r7, r3]
 801675c:	3301      	adds	r3, #1
 801675e:	e7e0      	b.n	8016722 <lv_ddlist_get_selected_str+0x30>

08016760 <lv_ddlist_get_style>:
{
 8016760:	b538      	push	{r3, r4, r5, lr}
 8016762:	460c      	mov	r4, r1
 8016764:	4605      	mov	r5, r0
    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
 8016766:	f7f8 ff46 	bl	800f5f6 <lv_obj_get_ext_attr>
    switch(type) {
 801676a:	2c01      	cmp	r4, #1
 801676c:	d00c      	beq.n	8016788 <lv_ddlist_get_style+0x28>
 801676e:	d303      	bcc.n	8016778 <lv_ddlist_get_style+0x18>
 8016770:	2c02      	cmp	r4, #2
 8016772:	d007      	beq.n	8016784 <lv_ddlist_get_style+0x24>
        default: return NULL;
 8016774:	2000      	movs	r0, #0
}
 8016776:	bd38      	pop	{r3, r4, r5, pc}
        case LV_DDLIST_STYLE_BG: return lv_page_get_style(ddlist, LV_PAGE_STYLE_BG);
 8016778:	2100      	movs	r1, #0
        case LV_DDLIST_STYLE_SB: return lv_page_get_style(ddlist, LV_PAGE_STYLE_SB);
 801677a:	4628      	mov	r0, r5
}
 801677c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        case LV_DDLIST_STYLE_SB: return lv_page_get_style(ddlist, LV_PAGE_STYLE_SB);
 8016780:	f001 bcc7 	b.w	8018112 <lv_page_get_style>
 8016784:	4621      	mov	r1, r4
 8016786:	e7f8      	b.n	801677a <lv_ddlist_get_style+0x1a>
        case LV_DDLIST_STYLE_SEL: return ext->sel_style;
 8016788:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801678a:	bd38      	pop	{r3, r4, r5, pc}

0801678c <lv_ddlist_design>:
{
 801678c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(mode == LV_DESIGN_COVER_CHK) {
 8016790:	2a02      	cmp	r2, #2
{
 8016792:	b09d      	sub	sp, #116	; 0x74
 8016794:	4604      	mov	r4, r0
 8016796:	460e      	mov	r6, r1
 8016798:	4690      	mov	r8, r2
    if(mode == LV_DESIGN_COVER_CHK) {
 801679a:	d105      	bne.n	80167a8 <lv_ddlist_design+0x1c>
        return ancestor_design(ddlist, mask, mode);
 801679c:	4b83      	ldr	r3, [pc, #524]	; (80169ac <lv_ddlist_design+0x220>)
 801679e:	681b      	ldr	r3, [r3, #0]
 80167a0:	4798      	blx	r3
}
 80167a2:	b01d      	add	sp, #116	; 0x74
 80167a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 80167a8:	2a00      	cmp	r2, #0
 80167aa:	d139      	bne.n	8016820 <lv_ddlist_design+0x94>
        ancestor_design(ddlist, mask, mode);
 80167ac:	4b7f      	ldr	r3, [pc, #508]	; (80169ac <lv_ddlist_design+0x220>)
 80167ae:	681b      	ldr	r3, [r3, #0]
 80167b0:	4798      	blx	r3
        lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
 80167b2:	4620      	mov	r0, r4
 80167b4:	f7f8 ff1f 	bl	800f5f6 <lv_obj_get_ext_attr>
 80167b8:	4605      	mov	r5, r0
        lv_opa_t opa_scale    = lv_obj_get_opa_scale(ddlist);
 80167ba:	4620      	mov	r0, r4
 80167bc:	f7f8 feb3 	bl	800f526 <lv_obj_get_opa_scale>
        if(ext->opened != 0 || ext->force_sel) {
 80167c0:	f895 303e 	ldrb.w	r3, [r5, #62]	; 0x3e
 80167c4:	079a      	lsls	r2, r3, #30
        lv_opa_t opa_scale    = lv_obj_get_opa_scale(ddlist);
 80167c6:	4607      	mov	r7, r0
        if(ext->opened != 0 || ext->force_sel) {
 80167c8:	d101      	bne.n	80167ce <lv_ddlist_design+0x42>
    return true;
 80167ca:	2001      	movs	r0, #1
 80167cc:	e7e9      	b.n	80167a2 <lv_ddlist_design+0x16>
            const lv_style_t * style = lv_ddlist_get_style(ddlist, LV_DDLIST_STYLE_BG);
 80167ce:	4641      	mov	r1, r8
 80167d0:	4620      	mov	r0, r4
 80167d2:	f7ff ffc5 	bl	8016760 <lv_ddlist_get_style>
            rect_area.y1 += ext->sel_opt_id * (font_h + style->text.line_space);
 80167d6:	f9b0 102a 	ldrsh.w	r1, [r0, #42]	; 0x2a
 80167da:	6a43      	ldr	r3, [r0, #36]	; 0x24
            rect_area.y1 = ext->label->coords.y1;
 80167dc:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80167de:	f893 e008 	ldrb.w	lr, [r3, #8]
            rect_area.y1 -= style->text.line_space / 2;
 80167e2:	8a42      	ldrh	r2, [r0, #18]
 80167e4:	2302      	movs	r3, #2
 80167e6:	fb91 f3f3 	sdiv	r3, r1, r3
 80167ea:	1ad3      	subs	r3, r2, r3
            rect_area.y1 += ext->sel_opt_id * (font_h + style->text.line_space);
 80167ec:	8f6a      	ldrh	r2, [r5, #58]	; 0x3a
 80167ee:	eb0e 0001 	add.w	r0, lr, r1
            rect_area.y1 -= style->text.line_space / 2;
 80167f2:	fb12 3200 	smlabb	r2, r2, r0, r3
            rect_area.y2 = rect_area.y1 + font_h + style->text.line_space - 1;
 80167f6:	3901      	subs	r1, #1
 80167f8:	4471      	add	r1, lr
            rect_area.x1 = ddlist->coords.x1;
 80167fa:	8a23      	ldrh	r3, [r4, #16]
 80167fc:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
            rect_area.y1 -= style->text.line_space / 2;
 8016800:	b292      	uxth	r2, r2
            rect_area.x2 = ddlist->coords.x2;
 8016802:	8aa3      	ldrh	r3, [r4, #20]
            rect_area.y1 -= style->text.line_space / 2;
 8016804:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
            rect_area.y2 = rect_area.y1 + font_h + style->text.line_space - 1;
 8016808:	440a      	add	r2, r1
 801680a:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
            rect_area.x2 = ddlist->coords.x2;
 801680e:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
            lv_draw_rect(&rect_area, mask, ext->sel_style, opa_scale);
 8016812:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8016814:	463b      	mov	r3, r7
 8016816:	4631      	mov	r1, r6
 8016818:	a80d      	add	r0, sp, #52	; 0x34
 801681a:	f7fa fe11 	bl	8011440 <lv_draw_rect>
 801681e:	e7d4      	b.n	80167ca <lv_ddlist_design+0x3e>
    else if(mode == LV_DESIGN_DRAW_POST) {
 8016820:	2a01      	cmp	r2, #1
 8016822:	d1d2      	bne.n	80167ca <lv_ddlist_design+0x3e>
        lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
 8016824:	f7f8 fee7 	bl	800f5f6 <lv_obj_get_ext_attr>
 8016828:	4680      	mov	r8, r0
        lv_opa_t opa_scale    = lv_obj_get_opa_scale(ddlist);
 801682a:	4620      	mov	r0, r4
 801682c:	f7f8 fe7b 	bl	800f526 <lv_obj_get_opa_scale>
        if(ext->opened || ext->force_sel) {
 8016830:	f898 303e 	ldrb.w	r3, [r8, #62]	; 0x3e
 8016834:	f013 0503 	ands.w	r5, r3, #3
        lv_opa_t opa_scale    = lv_obj_get_opa_scale(ddlist);
 8016838:	4607      	mov	r7, r0
        if(ext->opened || ext->force_sel) {
 801683a:	d065      	beq.n	8016908 <lv_ddlist_design+0x17c>
            const lv_style_t * style = lv_ddlist_get_style(ddlist, LV_DDLIST_STYLE_BG);
 801683c:	2100      	movs	r1, #0
 801683e:	4620      	mov	r0, r4
 8016840:	f7ff ff8e 	bl	8016760 <lv_ddlist_get_style>
 8016844:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8016846:	4605      	mov	r5, r0
 8016848:	7a18      	ldrb	r0, [r3, #8]
            area_sel.y1 -= style->text.line_space / 2;
 801684a:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
            area_sel.y1 += ext->sel_opt_id * (font_h + style->text.line_space);
 801684e:	f9b5 202a 	ldrsh.w	r2, [r5, #42]	; 0x2a
            area_sel.y1 -= style->text.line_space / 2;
 8016852:	8a5b      	ldrh	r3, [r3, #18]
 8016854:	2102      	movs	r1, #2
 8016856:	fb92 f1f1 	sdiv	r1, r2, r1
 801685a:	1a59      	subs	r1, r3, r1
            area_sel.y1 += ext->sel_opt_id * (font_h + style->text.line_space);
 801685c:	f8b8 303a 	ldrh.w	r3, [r8, #58]	; 0x3a
 8016860:	eb00 0e02 	add.w	lr, r0, r2
            area_sel.y1 -= style->text.line_space / 2;
 8016864:	fb13 130e 	smlabb	r3, r3, lr, r1
            area_sel.y2 = area_sel.y1 + font_h + style->text.line_space - 1;
 8016868:	3a01      	subs	r2, #1
 801686a:	4402      	add	r2, r0
            area_sel.y1 -= style->text.line_space / 2;
 801686c:	b29b      	uxth	r3, r3
 801686e:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
            area_sel.y2 = area_sel.y1 + font_h + style->text.line_space - 1;
 8016872:	4413      	add	r3, r2
 8016874:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
            area_sel.x1 = ddlist->coords.x1;
 8016878:	8a23      	ldrh	r3, [r4, #16]
 801687a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
            area_ok = lv_area_intersect(&mask_sel, mask, &area_sel);
 801687e:	aa09      	add	r2, sp, #36	; 0x24
            area_sel.x2 = ddlist->coords.x2;
 8016880:	8aa3      	ldrh	r3, [r4, #20]
 8016882:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
            area_ok = lv_area_intersect(&mask_sel, mask, &area_sel);
 8016886:	4631      	mov	r1, r6
 8016888:	a80b      	add	r0, sp, #44	; 0x2c
 801688a:	f7fd fbb0 	bl	8013fee <lv_area_intersect>
            if(area_ok) {
 801688e:	b390      	cbz	r0, 80168f6 <lv_ddlist_design+0x16a>
    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
 8016890:	4620      	mov	r0, r4
 8016892:	f7f8 feb0 	bl	800f5f6 <lv_obj_get_ext_attr>
        case LV_DDLIST_STYLE_SEL: return ext->sel_style;
 8016896:	f8d0 9034 	ldr.w	r9, [r0, #52]	; 0x34
                lv_style_copy(&new_style, style);
 801689a:	4629      	mov	r1, r5
 801689c:	a80d      	add	r0, sp, #52	; 0x34
 801689e:	f7f9 f9ed 	bl	800fc7c <lv_style_copy>
                new_style.text.color = sel_style->text.color;
 80168a2:	f8b9 3020 	ldrh.w	r3, [r9, #32]
 80168a6:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
                new_style.text.opa   = sel_style->text.opa;
 80168aa:	f899 302c 	ldrb.w	r3, [r9, #44]	; 0x2c
 80168ae:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
 80168b2:	4620      	mov	r0, r4
 80168b4:	f7f8 fe9f 	bl	800f5f6 <lv_obj_get_ext_attr>
    if(!ext->label) return LV_TXT_FLAG_CENTER;
 80168b8:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80168ba:	b318      	cbz	r0, 8016904 <lv_ddlist_design+0x178>
    lv_label_align_t align = lv_label_get_align(ext->label);
 80168bc:	f000 fd50 	bl	8017360 <lv_label_get_align>
    switch(align) {
 80168c0:	2801      	cmp	r0, #1
 80168c2:	d01f      	beq.n	8016904 <lv_ddlist_design+0x178>
        case LV_LABEL_ALIGN_LEFT: return LV_TXT_FLAG_NONE;
 80168c4:	2802      	cmp	r0, #2
 80168c6:	bf0c      	ite	eq
 80168c8:	2508      	moveq	r5, #8
 80168ca:	2500      	movne	r5, #0
                lv_draw_label(&ext->label->coords, &mask_sel, &new_style, opa_scale, lv_label_get_text(ext->label),
 80168cc:	f8d8 8030 	ldr.w	r8, [r8, #48]	; 0x30
 80168d0:	4640      	mov	r0, r8
 80168d2:	f000 fd39 	bl	8017348 <lv_label_get_text>
 80168d6:	2300      	movs	r3, #0
 80168d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80168dc:	9305      	str	r3, [sp, #20]
 80168de:	9204      	str	r2, [sp, #16]
 80168e0:	9203      	str	r2, [sp, #12]
 80168e2:	9302      	str	r3, [sp, #8]
 80168e4:	e88d 0021 	stmia.w	sp, {r0, r5}
 80168e8:	463b      	mov	r3, r7
 80168ea:	aa0d      	add	r2, sp, #52	; 0x34
 80168ec:	a90b      	add	r1, sp, #44	; 0x2c
 80168ee:	f108 0010 	add.w	r0, r8, #16
                    lv_draw_label(&area_arrow, &mask_arrow, &new_style, opa_scale, LV_SYMBOL_DOWN, LV_TXT_FLAG_NONE,
 80168f2:	f7fa fb0f 	bl	8010f14 <lv_draw_label>
        ancestor_design(ddlist, mask, mode);
 80168f6:	4b2d      	ldr	r3, [pc, #180]	; (80169ac <lv_ddlist_design+0x220>)
 80168f8:	2201      	movs	r2, #1
 80168fa:	681b      	ldr	r3, [r3, #0]
 80168fc:	4631      	mov	r1, r6
 80168fe:	4620      	mov	r0, r4
 8016900:	4798      	blx	r3
 8016902:	e762      	b.n	80167ca <lv_ddlist_design+0x3e>
    if(!ext->label) return LV_TXT_FLAG_CENTER;
 8016904:	2504      	movs	r5, #4
 8016906:	e7e1      	b.n	80168cc <lv_ddlist_design+0x140>
            if(ext->draw_arrow) {
 8016908:	075b      	lsls	r3, r3, #29
 801690a:	d5f4      	bpl.n	80168f6 <lv_ddlist_design+0x16a>
                const lv_style_t * style     = lv_ddlist_get_style(ddlist, LV_DDLIST_STYLE_BG);
 801690c:	4629      	mov	r1, r5
 801690e:	4620      	mov	r0, r4
 8016910:	f7ff ff26 	bl	8016760 <lv_ddlist_get_style>
                const lv_style_t * sel_style = lv_ddlist_get_style(ddlist, LV_DDLIST_STYLE_BG);
 8016914:	4629      	mov	r1, r5
                const lv_style_t * style     = lv_ddlist_get_style(ddlist, LV_DDLIST_STYLE_BG);
 8016916:	4682      	mov	sl, r0
                const lv_font_t * font       = style->text.font;
 8016918:	f8d0 8024 	ldr.w	r8, [r0, #36]	; 0x24
                const lv_style_t * sel_style = lv_ddlist_get_style(ddlist, LV_DDLIST_STYLE_BG);
 801691c:	4620      	mov	r0, r4
 801691e:	f7ff ff1f 	bl	8016760 <lv_ddlist_get_style>
                lv_style_copy(&new_style, style);
 8016922:	4651      	mov	r1, sl
                const lv_style_t * sel_style = lv_ddlist_get_style(ddlist, LV_DDLIST_STYLE_BG);
 8016924:	9007      	str	r0, [sp, #28]
                lv_style_copy(&new_style, style);
 8016926:	a80d      	add	r0, sp, #52	; 0x34
 8016928:	f898 9008 	ldrb.w	r9, [r8, #8]
                                lv_txt_get_width(LV_SYMBOL_DOWN, strlen(LV_SYMBOL_DOWN), sel_style->text.font, 0, 0);
 801692c:	f8df 8080 	ldr.w	r8, [pc, #128]	; 80169b0 <lv_ddlist_design+0x224>
                lv_style_copy(&new_style, style);
 8016930:	f7f9 f9a4 	bl	800fc7c <lv_style_copy>
                new_style.text.color = sel_style->text.color;
 8016934:	9a07      	ldr	r2, [sp, #28]
                area_arrow.x2 = ddlist->coords.x2 - style->body.padding.right;
 8016936:	f8b4 b014 	ldrh.w	fp, [r4, #20]
                new_style.text.color = sel_style->text.color;
 801693a:	8c13      	ldrh	r3, [r2, #32]
 801693c:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
                new_style.text.opa   = sel_style->text.opa;
 8016940:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8016944:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
                area_arrow.x2 = ddlist->coords.x2 - style->body.padding.right;
 8016948:	f8ba 001c 	ldrh.w	r0, [sl, #28]
                                lv_txt_get_width(LV_SYMBOL_DOWN, strlen(LV_SYMBOL_DOWN), sel_style->text.font, 0, 0);
 801694c:	9500      	str	r5, [sp, #0]
                area_arrow.x2 = ddlist->coords.x2 - style->body.padding.right;
 801694e:	ebab 0b00 	sub.w	fp, fp, r0
 8016952:	fa1f fb8b 	uxth.w	fp, fp
                                lv_txt_get_width(LV_SYMBOL_DOWN, strlen(LV_SYMBOL_DOWN), sel_style->text.font, 0, 0);
 8016956:	462b      	mov	r3, r5
 8016958:	6a52      	ldr	r2, [r2, #36]	; 0x24
                area_arrow.x2 = ddlist->coords.x2 - style->body.padding.right;
 801695a:	f8ad b028 	strh.w	fp, [sp, #40]	; 0x28
                                lv_txt_get_width(LV_SYMBOL_DOWN, strlen(LV_SYMBOL_DOWN), sel_style->text.font, 0, 0);
 801695e:	2103      	movs	r1, #3
 8016960:	4640      	mov	r0, r8
 8016962:	f7fe f907 	bl	8014b74 <lv_txt_get_width>
                area_arrow.y1 = ddlist->coords.y1 + style->text.line_space;
 8016966:	f8ba 202a 	ldrh.w	r2, [sl, #42]	; 0x2a
 801696a:	8a63      	ldrh	r3, [r4, #18]
 801696c:	4413      	add	r3, r2
                area_arrow.x1 = area_arrow.x2 -
 801696e:	ebab 0000 	sub.w	r0, fp, r0
                area_arrow.y1 = ddlist->coords.y1 + style->text.line_space;
 8016972:	b29b      	uxth	r3, r3
                area_arrow.x1 = area_arrow.x2 -
 8016974:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
                area_arrow.y1 = ddlist->coords.y1 + style->text.line_space;
 8016978:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
                area_ok = lv_area_intersect(&mask_arrow, mask, &area_arrow);
 801697c:	aa09      	add	r2, sp, #36	; 0x24
                area_arrow.y2 = area_arrow.y1 + font_h;
 801697e:	444b      	add	r3, r9
                area_ok = lv_area_intersect(&mask_arrow, mask, &area_arrow);
 8016980:	4631      	mov	r1, r6
 8016982:	a80b      	add	r0, sp, #44	; 0x2c
                area_arrow.y2 = area_arrow.y1 + font_h;
 8016984:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
                area_ok = lv_area_intersect(&mask_arrow, mask, &area_arrow);
 8016988:	f7fd fb31 	bl	8013fee <lv_area_intersect>
                if(area_ok) {
 801698c:	2800      	cmp	r0, #0
 801698e:	d0b2      	beq.n	80168f6 <lv_ddlist_design+0x16a>
                    lv_draw_label(&area_arrow, &mask_arrow, &new_style, opa_scale, LV_SYMBOL_DOWN, LV_TXT_FLAG_NONE,
 8016990:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016994:	9304      	str	r3, [sp, #16]
 8016996:	9303      	str	r3, [sp, #12]
 8016998:	9505      	str	r5, [sp, #20]
 801699a:	9502      	str	r5, [sp, #8]
 801699c:	9501      	str	r5, [sp, #4]
 801699e:	f8cd 8000 	str.w	r8, [sp]
 80169a2:	463b      	mov	r3, r7
 80169a4:	aa0d      	add	r2, sp, #52	; 0x34
 80169a6:	a90b      	add	r1, sp, #44	; 0x2c
 80169a8:	a809      	add	r0, sp, #36	; 0x24
 80169aa:	e7a2      	b.n	80168f2 <lv_ddlist_design+0x166>
 80169ac:	2000b03c 	.word	0x2000b03c
 80169b0:	080ec3ef 	.word	0x080ec3ef

080169b4 <lv_ddlist_scrl_signal>:
{
 80169b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    res = ancestor_scrl_signal(scrl, sign, param);
 80169b6:	4b18      	ldr	r3, [pc, #96]	; (8016a18 <lv_ddlist_scrl_signal+0x64>)
 80169b8:	681b      	ldr	r3, [r3, #0]
{
 80169ba:	4605      	mov	r5, r0
 80169bc:	460c      	mov	r4, r1
    res = ancestor_scrl_signal(scrl, sign, param);
 80169be:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 80169c0:	2801      	cmp	r0, #1
    res = ancestor_scrl_signal(scrl, sign, param);
 80169c2:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return res;
 80169c4:	d114      	bne.n	80169f0 <lv_ddlist_scrl_signal+0x3c>
    lv_obj_t * ddlist = lv_obj_get_parent(scrl);
 80169c6:	4628      	mov	r0, r5
 80169c8:	f7f8 fcd8 	bl	800f37c <lv_obj_get_parent>
    if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 80169cc:	2c05      	cmp	r4, #5
    lv_obj_t * ddlist = lv_obj_get_parent(scrl);
 80169ce:	4607      	mov	r7, r0
    if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 80169d0:	d110      	bne.n	80169f4 <lv_ddlist_scrl_signal+0x40>
        const lv_style_t * style = lv_ddlist_get_style(ddlist, LV_DDLIST_STYLE_BG);
 80169d2:	2100      	movs	r1, #0
 80169d4:	f7ff fec4 	bl	8016760 <lv_ddlist_get_style>
        lv_coord_t hpad          = LV_MATH_MAX(style->body.padding.left, style->body.padding.right);
 80169d8:	f9b0 301c 	ldrsh.w	r3, [r0, #28]
 80169dc:	f9b0 201a 	ldrsh.w	r2, [r0, #26]
 80169e0:	4293      	cmp	r3, r2
 80169e2:	bfb8      	it	lt
 80169e4:	4613      	movlt	r3, r2
        if(scrl->ext_draw_pad < hpad) scrl->ext_draw_pad = hpad;
 80169e6:	f9b5 2034 	ldrsh.w	r2, [r5, #52]	; 0x34
 80169ea:	429a      	cmp	r2, r3
 80169ec:	da00      	bge.n	80169f0 <lv_ddlist_scrl_signal+0x3c>
 80169ee:	86ab      	strh	r3, [r5, #52]	; 0x34
}
 80169f0:	4630      	mov	r0, r6
 80169f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if(sign == LV_SIGNAL_RELEASED) {
 80169f4:	2c0a      	cmp	r4, #10
 80169f6:	d109      	bne.n	8016a0c <lv_ddlist_scrl_signal+0x58>
        if(lv_indev_is_dragging(lv_indev_get_act()) == false) {
 80169f8:	f7f7 fdd4 	bl	800e5a4 <lv_indev_get_act>
 80169fc:	f7f7 fdf5 	bl	800e5ea <lv_indev_is_dragging>
 8016a00:	2800      	cmp	r0, #0
 8016a02:	d1f5      	bne.n	80169f0 <lv_ddlist_scrl_signal+0x3c>
            release_handler(ddlist);
 8016a04:	4638      	mov	r0, r7
 8016a06:	f7ff fb81 	bl	801610c <release_handler>
 8016a0a:	e7f1      	b.n	80169f0 <lv_ddlist_scrl_signal+0x3c>
    } else if(sign == LV_SIGNAL_CLEANUP) {
 8016a0c:	2c00      	cmp	r4, #0
 8016a0e:	d1ef      	bne.n	80169f0 <lv_ddlist_scrl_signal+0x3c>
        lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
 8016a10:	f7f8 fdf1 	bl	800f5f6 <lv_obj_get_ext_attr>
        ext->label            = NULL; /*The label is already deleted*/
 8016a14:	6304      	str	r4, [r0, #48]	; 0x30
 8016a16:	e7eb      	b.n	80169f0 <lv_ddlist_scrl_signal+0x3c>
 8016a18:	2000b040 	.word	0x2000b040

08016a1c <lv_ddlist_open>:
{
 8016a1c:	b538      	push	{r3, r4, r5, lr}
 8016a1e:	460d      	mov	r5, r1
 8016a20:	4604      	mov	r4, r0
    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
 8016a22:	f7f8 fde8 	bl	800f5f6 <lv_obj_get_ext_attr>
    ext->opened           = 1;
 8016a26:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8016a2a:	f043 0301 	orr.w	r3, r3, #1
 8016a2e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    lv_obj_set_drag(lv_page_get_scrl(ddlist), true);
 8016a32:	4620      	mov	r0, r4
 8016a34:	f001 fb63 	bl	80180fe <lv_page_get_scrl>
 8016a38:	2101      	movs	r1, #1
 8016a3a:	f7f7 fe60 	bl	800e6fe <lv_obj_set_drag>
    lv_ddlist_refr_size(ddlist, anim);
 8016a3e:	4629      	mov	r1, r5
 8016a40:	4620      	mov	r0, r4
}
 8016a42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_ddlist_refr_size(ddlist, anim);
 8016a46:	f7ff bae5 	b.w	8016014 <lv_ddlist_refr_size>

08016a4a <lv_img_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_img_design(lv_obj_t * img, const lv_area_t * mask, lv_design_mode_t mode)
{
 8016a4a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016a4e:	b099      	sub	sp, #100	; 0x64
 8016a50:	4690      	mov	r8, r2
 8016a52:	4681      	mov	r9, r0
 8016a54:	460d      	mov	r5, r1
    const lv_style_t * style = lv_obj_get_style(img);
 8016a56:	f7f8 fce3 	bl	800f420 <lv_obj_get_style>
 8016a5a:	4606      	mov	r6, r0
    lv_img_ext_t * ext       = lv_obj_get_ext_attr(img);
 8016a5c:	4648      	mov	r0, r9
 8016a5e:	f7f8 fdca 	bl	800f5f6 <lv_obj_get_ext_attr>

    if(mode == LV_DESIGN_COVER_CHK) {
 8016a62:	f1b8 0f02 	cmp.w	r8, #2
    lv_img_ext_t * ext       = lv_obj_get_ext_attr(img);
 8016a66:	4604      	mov	r4, r0
    if(mode == LV_DESIGN_COVER_CHK) {
 8016a68:	d115      	bne.n	8016a96 <lv_img_design+0x4c>
        bool cover = false;
        if(ext->src_type == LV_IMG_SRC_UNKNOWN || ext->src_type == LV_IMG_SRC_SYMBOL) return false;
 8016a6a:	7b03      	ldrb	r3, [r0, #12]
 8016a6c:	f003 0203 	and.w	r2, r3, #3
 8016a70:	3a02      	subs	r2, #2
 8016a72:	2a01      	cmp	r2, #1
 8016a74:	f240 808f 	bls.w	8016b96 <lv_img_design+0x14c>

        if(ext->cf == LV_IMG_CF_TRUE_COLOR || ext->cf == LV_IMG_CF_RAW) cover = lv_area_is_in(mask, &img->coords);
 8016a78:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8016a7c:	2b20      	cmp	r3, #32
 8016a7e:	d002      	beq.n	8016a86 <lv_img_design+0x3c>
 8016a80:	2b08      	cmp	r3, #8
 8016a82:	f040 8088 	bne.w	8016b96 <lv_img_design+0x14c>
 8016a86:	f109 0110 	add.w	r1, r9, #16
 8016a8a:	4628      	mov	r0, r5
 8016a8c:	f7fd fb18 	bl	80140c0 <lv_area_is_in>
            lv_draw_img(&img->coords, mask, NULL, style, opa_scale);
        }
    }

    return true;
}
 8016a90:	b019      	add	sp, #100	; 0x64
 8016a92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 8016a96:	f1b8 0f00 	cmp.w	r8, #0
 8016a9a:	d105      	bne.n	8016aa8 <lv_img_design+0x5e>
        if(ext->h == 0 || ext->w == 0) return true;
 8016a9c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8016aa0:	b113      	cbz	r3, 8016aa8 <lv_img_design+0x5e>
 8016aa2:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8016aa6:	b90b      	cbnz	r3, 8016aac <lv_img_design+0x62>
    return true;
 8016aa8:	2001      	movs	r0, #1
 8016aaa:	e7f1      	b.n	8016a90 <lv_img_design+0x46>
        lv_opa_t opa_scale = lv_obj_get_opa_scale(img);
 8016aac:	4648      	mov	r0, r9
 8016aae:	f7f8 fd3a 	bl	800f526 <lv_obj_get_opa_scale>
        lv_obj_get_coords(img, &coords);
 8016ab2:	a907      	add	r1, sp, #28
        lv_opa_t opa_scale = lv_obj_get_opa_scale(img);
 8016ab4:	4607      	mov	r7, r0
        lv_obj_get_coords(img, &coords);
 8016ab6:	4648      	mov	r0, r9
 8016ab8:	f7f8 fc8e 	bl	800f3d8 <lv_obj_get_coords>
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_VARIABLE) {
 8016abc:	7b23      	ldrb	r3, [r4, #12]
 8016abe:	f003 0303 	and.w	r3, r3, #3
 8016ac2:	2b01      	cmp	r3, #1
 8016ac4:	d842      	bhi.n	8016b4c <lv_img_design+0x102>
            coords.x1 -= ext->offset.x;
 8016ac6:	88a2      	ldrh	r2, [r4, #4]
 8016ac8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8016acc:	1a9b      	subs	r3, r3, r2
 8016ace:	f8ad 301c 	strh.w	r3, [sp, #28]
            coords.y1 -= ext->offset.y;
 8016ad2:	88e2      	ldrh	r2, [r4, #6]
 8016ad4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8016ad8:	1a9b      	subs	r3, r3, r2
 8016ada:	b29b      	uxth	r3, r3
 8016adc:	b21a      	sxth	r2, r3
 8016ade:	f8ad 201e 	strh.w	r2, [sp, #30]
            cords_tmp.y1 = coords.y1;
 8016ae2:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
            cords_tmp.y2 = coords.y1 + ext->h - 1;
 8016ae6:	8962      	ldrh	r2, [r4, #10]
 8016ae8:	3a01      	subs	r2, #1
            for(; cords_tmp.y1 < coords.y2; cords_tmp.y1 += ext->h, cords_tmp.y2 += ext->h) {
 8016aea:	4413      	add	r3, r2
 8016aec:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8016af0:	f9bd 2026 	ldrsh.w	r2, [sp, #38]	; 0x26
 8016af4:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8016af8:	429a      	cmp	r2, r3
 8016afa:	dad5      	bge.n	8016aa8 <lv_img_design+0x5e>
                cords_tmp.x1 = coords.x1;
 8016afc:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
                cords_tmp.x2 = coords.x1 + ext->w - 1;
 8016b00:	8922      	ldrh	r2, [r4, #8]
                cords_tmp.x1 = coords.x1;
 8016b02:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
                cords_tmp.x2 = coords.x1 + ext->w - 1;
 8016b06:	3b01      	subs	r3, #1
                for(; cords_tmp.x1 < coords.x2; cords_tmp.x1 += ext->w, cords_tmp.x2 += ext->w) {
 8016b08:	4413      	add	r3, r2
 8016b0a:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 8016b0e:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
 8016b12:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8016b16:	429a      	cmp	r2, r3
 8016b18:	db08      	blt.n	8016b2c <lv_img_design+0xe2>
            for(; cords_tmp.y1 < coords.y2; cords_tmp.y1 += ext->h, cords_tmp.y2 += ext->h) {
 8016b1a:	8963      	ldrh	r3, [r4, #10]
 8016b1c:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 8016b20:	441a      	add	r2, r3
 8016b22:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8016b26:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8016b2a:	e7de      	b.n	8016aea <lv_img_design+0xa0>
                    lv_draw_img(&cords_tmp, mask, ext->src, style, opa_scale);
 8016b2c:	9700      	str	r7, [sp, #0]
 8016b2e:	4633      	mov	r3, r6
 8016b30:	6822      	ldr	r2, [r4, #0]
 8016b32:	4629      	mov	r1, r5
 8016b34:	a809      	add	r0, sp, #36	; 0x24
 8016b36:	f7fa f8ed 	bl	8010d14 <lv_draw_img>
                for(; cords_tmp.x1 < coords.x2; cords_tmp.x1 += ext->w, cords_tmp.x2 += ext->w) {
 8016b3a:	8923      	ldrh	r3, [r4, #8]
 8016b3c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8016b40:	441a      	add	r2, r3
 8016b42:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8016b46:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8016b4a:	e7dd      	b.n	8016b08 <lv_img_design+0xbe>
        } else if(ext->src_type == LV_IMG_SRC_SYMBOL) {
 8016b4c:	2b02      	cmp	r3, #2
 8016b4e:	d119      	bne.n	8016b84 <lv_img_design+0x13a>
            lv_style_copy(&style_mod, style);
 8016b50:	4631      	mov	r1, r6
 8016b52:	a809      	add	r0, sp, #36	; 0x24
 8016b54:	f7f9 f892 	bl	800fc7c <lv_style_copy>
            style_mod.text.color = style->image.color;
 8016b58:	8e33      	ldrh	r3, [r6, #48]	; 0x30
 8016b5a:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
            lv_draw_label(&coords, mask, &style_mod, opa_scale, ext->src, LV_TXT_FLAG_NONE, NULL, -1, -1, NULL);
 8016b5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016b62:	f8cd 8014 	str.w	r8, [sp, #20]
 8016b66:	9304      	str	r3, [sp, #16]
 8016b68:	9303      	str	r3, [sp, #12]
 8016b6a:	f8cd 8008 	str.w	r8, [sp, #8]
 8016b6e:	f8cd 8004 	str.w	r8, [sp, #4]
 8016b72:	6823      	ldr	r3, [r4, #0]
 8016b74:	9300      	str	r3, [sp, #0]
 8016b76:	aa09      	add	r2, sp, #36	; 0x24
 8016b78:	463b      	mov	r3, r7
 8016b7a:	4629      	mov	r1, r5
 8016b7c:	a807      	add	r0, sp, #28
 8016b7e:	f7fa f9c9 	bl	8010f14 <lv_draw_label>
 8016b82:	e791      	b.n	8016aa8 <lv_img_design+0x5e>
            lv_draw_img(&img->coords, mask, NULL, style, opa_scale);
 8016b84:	9700      	str	r7, [sp, #0]
 8016b86:	4633      	mov	r3, r6
 8016b88:	4642      	mov	r2, r8
 8016b8a:	4629      	mov	r1, r5
 8016b8c:	f109 0010 	add.w	r0, r9, #16
 8016b90:	f7fa f8c0 	bl	8010d14 <lv_draw_img>
 8016b94:	e788      	b.n	8016aa8 <lv_img_design+0x5e>
        if(ext->src_type == LV_IMG_SRC_UNKNOWN || ext->src_type == LV_IMG_SRC_SYMBOL) return false;
 8016b96:	2000      	movs	r0, #0
 8016b98:	e77a      	b.n	8016a90 <lv_img_design+0x46>

08016b9a <lv_img_get_auto_size>:
{
 8016b9a:	b508      	push	{r3, lr}
    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
 8016b9c:	f7f8 fd2b 	bl	800f5f6 <lv_obj_get_ext_attr>
    return ext->auto_size == 0 ? false : true;
 8016ba0:	7b00      	ldrb	r0, [r0, #12]
}
 8016ba2:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8016ba6:	bd08      	pop	{r3, pc}

08016ba8 <lv_img_set_src>:
{
 8016ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016bac:	4606      	mov	r6, r0
 8016bae:	b086      	sub	sp, #24
    lv_img_src_t src_type = lv_img_src_get_type(src_img);
 8016bb0:	4608      	mov	r0, r1
{
 8016bb2:	460d      	mov	r5, r1
    lv_img_src_t src_type = lv_img_src_get_type(src_img);
 8016bb4:	f7fa f988 	bl	8010ec8 <lv_img_src_get_type>
 8016bb8:	4607      	mov	r7, r0
    lv_img_ext_t * ext    = lv_obj_get_ext_attr(img);
 8016bba:	4630      	mov	r0, r6
 8016bbc:	f7f8 fd1b 	bl	800f5f6 <lv_obj_get_ext_attr>
    if(src_type == LV_IMG_SRC_UNKNOWN) {
 8016bc0:	2f03      	cmp	r7, #3
    lv_img_ext_t * ext    = lv_obj_get_ext_attr(img);
 8016bc2:	4604      	mov	r4, r0
    if(src_type == LV_IMG_SRC_UNKNOWN) {
 8016bc4:	d111      	bne.n	8016bea <lv_img_set_src+0x42>
        if(ext->src_type == LV_IMG_SRC_SYMBOL || ext->src_type == LV_IMG_SRC_FILE) {
 8016bc6:	7b03      	ldrb	r3, [r0, #12]
 8016bc8:	f003 0303 	and.w	r3, r3, #3
 8016bcc:	3b01      	subs	r3, #1
 8016bce:	2b01      	cmp	r3, #1
 8016bd0:	d802      	bhi.n	8016bd8 <lv_img_set_src+0x30>
            lv_mem_free(ext->src);
 8016bd2:	6800      	ldr	r0, [r0, #0]
 8016bd4:	f7fd fc8e 	bl	80144f4 <lv_mem_free>
        ext->src      = NULL;
 8016bd8:	2300      	movs	r3, #0
 8016bda:	6023      	str	r3, [r4, #0]
        ext->src_type = LV_IMG_SRC_UNKNOWN;
 8016bdc:	7b23      	ldrb	r3, [r4, #12]
 8016bde:	f043 0303 	orr.w	r3, r3, #3
 8016be2:	7323      	strb	r3, [r4, #12]
}
 8016be4:	b006      	add	sp, #24
 8016be6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_img_decoder_get_info(src_img, &header);
 8016bea:	a904      	add	r1, sp, #16
 8016bec:	4628      	mov	r0, r5
 8016bee:	f7fc fdd7 	bl	80137a0 <lv_img_decoder_get_info>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 8016bf2:	bb4f      	cbnz	r7, 8016c48 <lv_img_set_src+0xa0>
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
 8016bf4:	7b23      	ldrb	r3, [r4, #12]
 8016bf6:	f003 0303 	and.w	r3, r3, #3
 8016bfa:	3b01      	subs	r3, #1
 8016bfc:	2b01      	cmp	r3, #1
 8016bfe:	d802      	bhi.n	8016c06 <lv_img_set_src+0x5e>
            lv_mem_free(ext->src);
 8016c00:	6820      	ldr	r0, [r4, #0]
 8016c02:	f7fd fc77 	bl	80144f4 <lv_mem_free>
        ext->src = src_img;
 8016c06:	6025      	str	r5, [r4, #0]
    ext->w        = header.w;
 8016c08:	9a04      	ldr	r2, [sp, #16]
    ext->src_type = src_type;
 8016c0a:	7b23      	ldrb	r3, [r4, #12]
    ext->w        = header.w;
 8016c0c:	f3c2 228a 	ubfx	r2, r2, #10, #11
 8016c10:	8122      	strh	r2, [r4, #8]
    ext->h        = header.h;
 8016c12:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8016c16:	f3c2 124a 	ubfx	r2, r2, #5, #11
 8016c1a:	8162      	strh	r2, [r4, #10]
    ext->cf       = header.cf;
 8016c1c:	f89d 2010 	ldrb.w	r2, [sp, #16]
    ext->src_type = src_type;
 8016c20:	f367 0301 	bfi	r3, r7, #0, #2
    ext->cf       = header.cf;
 8016c24:	f362 03c7 	bfi	r3, r2, #3, #5
 8016c28:	7323      	strb	r3, [r4, #12]
    if(lv_img_get_auto_size(img) != false) {
 8016c2a:	4630      	mov	r0, r6
 8016c2c:	f7ff ffb5 	bl	8016b9a <lv_img_get_auto_size>
 8016c30:	b130      	cbz	r0, 8016c40 <lv_img_set_src+0x98>
        lv_obj_set_size(img, ext->w, ext->h);
 8016c32:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8016c36:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8016c3a:	4630      	mov	r0, r6
 8016c3c:	f7f8 fac0 	bl	800f1c0 <lv_obj_set_size>
    lv_obj_invalidate(img);
 8016c40:	4630      	mov	r0, r6
 8016c42:	f7f7 fe5b 	bl	800e8fc <lv_obj_invalidate>
 8016c46:	e7cd      	b.n	8016be4 <lv_img_set_src+0x3c>
    } else if(src_type == LV_IMG_SRC_FILE || src_type == LV_IMG_SRC_SYMBOL) {
 8016c48:	1e7b      	subs	r3, r7, #1
 8016c4a:	b2db      	uxtb	r3, r3
 8016c4c:	2b01      	cmp	r3, #1
 8016c4e:	d8db      	bhi.n	8016c08 <lv_img_set_src+0x60>
        if(ext->src != src_img) {
 8016c50:	6820      	ldr	r0, [r4, #0]
 8016c52:	4285      	cmp	r5, r0
 8016c54:	d015      	beq.n	8016c82 <lv_img_set_src+0xda>
            if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
 8016c56:	7b23      	ldrb	r3, [r4, #12]
 8016c58:	f003 0303 	and.w	r3, r3, #3
 8016c5c:	3b01      	subs	r3, #1
 8016c5e:	2b01      	cmp	r3, #1
 8016c60:	d801      	bhi.n	8016c66 <lv_img_set_src+0xbe>
                lv_mem_free(ext->src);
 8016c62:	f7fd fc47 	bl	80144f4 <lv_mem_free>
            char * new_str = lv_mem_alloc(strlen(src_img) + 1);
 8016c66:	4628      	mov	r0, r5
 8016c68:	f7e9 fab2 	bl	80001d0 <strlen>
 8016c6c:	3001      	adds	r0, #1
 8016c6e:	f7fd fc0b 	bl	8014488 <lv_mem_alloc>
            lv_mem_assert(new_str);
 8016c72:	4680      	mov	r8, r0
 8016c74:	b900      	cbnz	r0, 8016c78 <lv_img_set_src+0xd0>
 8016c76:	e7fe      	b.n	8016c76 <lv_img_set_src+0xce>
            strcpy(new_str, src_img);
 8016c78:	4629      	mov	r1, r5
 8016c7a:	f002 ff73 	bl	8019b64 <strcpy>
            ext->src = new_str;
 8016c7e:	f8c4 8000 	str.w	r8, [r4]
    if(src_type == LV_IMG_SRC_SYMBOL) {
 8016c82:	2f02      	cmp	r7, #2
 8016c84:	d1c0      	bne.n	8016c08 <lv_img_set_src+0x60>
 * @return pointer to the image's style
 */
static inline const lv_style_t * lv_img_get_style(const lv_obj_t * img, lv_img_style_t type)
{
    (void)type; /*Unused*/
    return lv_obj_get_style(img);
 8016c86:	4630      	mov	r0, r6
 8016c88:	f7f8 fbca 	bl	800f420 <lv_obj_get_style>
        lv_txt_get_size(&size, src_img, style->text.font, style->text.letter_space, style->text.line_space,
 8016c8c:	2200      	movs	r2, #0
 8016c8e:	f9b0 3028 	ldrsh.w	r3, [r0, #40]	; 0x28
 8016c92:	9202      	str	r2, [sp, #8]
 8016c94:	f647 4218 	movw	r2, #31768	; 0x7c18
 8016c98:	9201      	str	r2, [sp, #4]
 8016c9a:	f9b0 202a 	ldrsh.w	r2, [r0, #42]	; 0x2a
 8016c9e:	9200      	str	r2, [sp, #0]
 8016ca0:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8016ca2:	4629      	mov	r1, r5
 8016ca4:	a805      	add	r0, sp, #20
 8016ca6:	f7fd ffad 	bl	8014c04 <lv_txt_get_size>
        header.w = size.x;
 8016caa:	9b04      	ldr	r3, [sp, #16]
 8016cac:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8016cb0:	f362 2394 	bfi	r3, r2, #10, #11
        header.h = size.y;
 8016cb4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
        header.w = size.x;
 8016cb8:	9304      	str	r3, [sp, #16]
        header.h = size.y;
 8016cba:	0c1b      	lsrs	r3, r3, #16
 8016cbc:	f362 134f 	bfi	r3, r2, #5, #11
 8016cc0:	f8ad 3012 	strh.w	r3, [sp, #18]
 8016cc4:	e7a0      	b.n	8016c08 <lv_img_set_src+0x60>
	...

08016cc8 <lv_img_create>:
{
 8016cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ccc:	4680      	mov	r8, r0
 8016cce:	460e      	mov	r6, r1
    new_img = lv_obj_create(par, copy);
 8016cd0:	f7f8 f8f8 	bl	800eec4 <lv_obj_create>
    lv_mem_assert(new_img);
 8016cd4:	4605      	mov	r5, r0
 8016cd6:	b900      	cbnz	r0, 8016cda <lv_img_create+0x12>
 8016cd8:	e7fe      	b.n	8016cd8 <lv_img_create+0x10>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_img);
 8016cda:	4c2a      	ldr	r4, [pc, #168]	; (8016d84 <lv_img_create+0xbc>)
 8016cdc:	6823      	ldr	r3, [r4, #0]
 8016cde:	b913      	cbnz	r3, 8016ce6 <lv_img_create+0x1e>
 8016ce0:	f7f8 fc85 	bl	800f5ee <lv_obj_get_signal_cb>
 8016ce4:	6020      	str	r0, [r4, #0]
    lv_img_ext_t * ext = lv_obj_allocate_ext_attr(new_img, sizeof(lv_img_ext_t));
 8016ce6:	2110      	movs	r1, #16
 8016ce8:	4628      	mov	r0, r5
 8016cea:	f7f7 fdd9 	bl	800e8a0 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 8016cee:	4604      	mov	r4, r0
 8016cf0:	b900      	cbnz	r0, 8016cf4 <lv_img_create+0x2c>
 8016cf2:	e7fe      	b.n	8016cf2 <lv_img_create+0x2a>
    ext->src_type  = LV_IMG_SRC_UNKNOWN;
 8016cf4:	7b03      	ldrb	r3, [r0, #12]
    ext->src       = NULL;
 8016cf6:	2700      	movs	r7, #0
    ext->cf        = LV_IMG_CF_UNKNOWN;
 8016cf8:	f043 0303 	orr.w	r3, r3, #3
 8016cfc:	f367 03c7 	bfi	r3, r7, #3, #5
 8016d00:	7303      	strb	r3, [r0, #12]
    ext->src       = NULL;
 8016d02:	6007      	str	r7, [r0, #0]
    ext->w         = lv_obj_get_width(new_img);
 8016d04:	4628      	mov	r0, r5
 8016d06:	f7f8 fb79 	bl	800f3fc <lv_obj_get_width>
 8016d0a:	8120      	strh	r0, [r4, #8]
    ext->h         = lv_obj_get_height(new_img);
 8016d0c:	4628      	mov	r0, r5
 8016d0e:	f7f8 fb7b 	bl	800f408 <lv_obj_get_height>
    ext->auto_size = 1;
 8016d12:	7b23      	ldrb	r3, [r4, #12]
    ext->h         = lv_obj_get_height(new_img);
 8016d14:	8160      	strh	r0, [r4, #10]
    ext->auto_size = 1;
 8016d16:	f043 0304 	orr.w	r3, r3, #4
    lv_obj_set_signal_cb(new_img, lv_img_signal);
 8016d1a:	491b      	ldr	r1, [pc, #108]	; (8016d88 <lv_img_create+0xc0>)
    ext->auto_size = 1;
 8016d1c:	7323      	strb	r3, [r4, #12]
    lv_obj_set_signal_cb(new_img, lv_img_signal);
 8016d1e:	4628      	mov	r0, r5
    ext->offset.x  = 0;
 8016d20:	80a7      	strh	r7, [r4, #4]
    ext->offset.y  = 0;
 8016d22:	80e7      	strh	r7, [r4, #6]
    lv_obj_set_signal_cb(new_img, lv_img_signal);
 8016d24:	f7f7 fdb8 	bl	800e898 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_img, lv_img_design);
 8016d28:	4918      	ldr	r1, [pc, #96]	; (8016d8c <lv_img_create+0xc4>)
 8016d2a:	4628      	mov	r0, r5
 8016d2c:	f7f7 fdb6 	bl	800e89c <lv_obj_set_design_cb>
    if(copy == NULL) {
 8016d30:	b9b6      	cbnz	r6, 8016d60 <lv_img_create+0x98>
        lv_obj_set_click(new_img, false);
 8016d32:	4631      	mov	r1, r6
 8016d34:	4628      	mov	r0, r5
 8016d36:	f7f7 fcdb 	bl	800e6f0 <lv_obj_set_click>
 8016d3a:	7b23      	ldrb	r3, [r4, #12]
        if(par != NULL) {
 8016d3c:	f1b8 0f00 	cmp.w	r8, #0
 8016d40:	d009      	beq.n	8016d56 <lv_img_create+0x8e>
            ext->auto_size = 1;
 8016d42:	f043 0304 	orr.w	r3, r3, #4
 8016d46:	7323      	strb	r3, [r4, #12]
            lv_obj_set_style(new_img, NULL); /*Inherit the style  by default*/
 8016d48:	4631      	mov	r1, r6
            lv_obj_set_style(new_img, &lv_style_plain); /*Set a style for screens*/
 8016d4a:	4628      	mov	r0, r5
 8016d4c:	f7f8 fb3a 	bl	800f3c4 <lv_obj_set_style>
}
 8016d50:	4628      	mov	r0, r5
 8016d52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            ext->auto_size = 0;
 8016d56:	f368 0382 	bfi	r3, r8, #2, #1
 8016d5a:	7323      	strb	r3, [r4, #12]
            lv_obj_set_style(new_img, &lv_style_plain); /*Set a style for screens*/
 8016d5c:	490c      	ldr	r1, [pc, #48]	; (8016d90 <lv_img_create+0xc8>)
 8016d5e:	e7f4      	b.n	8016d4a <lv_img_create+0x82>
        lv_img_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8016d60:	4630      	mov	r0, r6
 8016d62:	f7f8 fc48 	bl	800f5f6 <lv_obj_get_ext_attr>
        ext->auto_size          = copy_ext->auto_size;
 8016d66:	7b03      	ldrb	r3, [r0, #12]
 8016d68:	7b22      	ldrb	r2, [r4, #12]
 8016d6a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8016d6e:	f363 0282 	bfi	r2, r3, #2, #1
 8016d72:	7322      	strb	r2, [r4, #12]
        lv_img_set_src(new_img, copy_ext->src);
 8016d74:	6801      	ldr	r1, [r0, #0]
 8016d76:	4628      	mov	r0, r5
 8016d78:	f7ff ff16 	bl	8016ba8 <lv_img_set_src>
        lv_obj_refresh_style(new_img);
 8016d7c:	4628      	mov	r0, r5
 8016d7e:	f7f8 fa78 	bl	800f272 <lv_obj_refresh_style>
 8016d82:	e7e5      	b.n	8016d50 <lv_img_create+0x88>
 8016d84:	2000b048 	.word	0x2000b048
 8016d88:	08016d95 	.word	0x08016d95
 8016d8c:	08016a4b 	.word	0x08016a4b
 8016d90:	2000c4a4 	.word	0x2000c4a4

08016d94 <lv_img_signal>:
static lv_res_t lv_img_signal(lv_obj_t * img, lv_signal_t sign, void * param)
{
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(img, sign, param);
 8016d94:	4b1d      	ldr	r3, [pc, #116]	; (8016e0c <lv_img_signal+0x78>)
{
 8016d96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    res = ancestor_signal(img, sign, param);
 8016d9a:	681b      	ldr	r3, [r3, #0]
{
 8016d9c:	4680      	mov	r8, r0
 8016d9e:	460d      	mov	r5, r1
 8016da0:	4617      	mov	r7, r2
    res = ancestor_signal(img, sign, param);
 8016da2:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8016da4:	2801      	cmp	r0, #1
    res = ancestor_signal(img, sign, param);
 8016da6:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return res;
 8016da8:	d112      	bne.n	8016dd0 <lv_img_signal+0x3c>

    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
 8016daa:	4640      	mov	r0, r8
 8016dac:	f7f8 fc23 	bl	800f5f6 <lv_obj_get_ext_attr>
 8016db0:	4604      	mov	r4, r0
    if(sign == LV_SIGNAL_CLEANUP) {
 8016db2:	b985      	cbnz	r5, 8016dd6 <lv_img_signal+0x42>
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
 8016db4:	7b03      	ldrb	r3, [r0, #12]
 8016db6:	f003 0303 	and.w	r3, r3, #3
 8016dba:	3b01      	subs	r3, #1
 8016dbc:	2b01      	cmp	r3, #1
 8016dbe:	d807      	bhi.n	8016dd0 <lv_img_signal+0x3c>
            lv_mem_free(ext->src);
 8016dc0:	6800      	ldr	r0, [r0, #0]
 8016dc2:	f7fd fb97 	bl	80144f4 <lv_mem_free>
            ext->src      = NULL;
            ext->src_type = LV_IMG_SRC_UNKNOWN;
 8016dc6:	7b23      	ldrb	r3, [r4, #12]
            ext->src      = NULL;
 8016dc8:	6025      	str	r5, [r4, #0]
            ext->src_type = LV_IMG_SRC_UNKNOWN;
 8016dca:	f043 0303 	orr.w	r3, r3, #3
 8016dce:	7323      	strb	r3, [r4, #12]
        }
        buf->type[i] = "lv_img";
    }

    return res;
}
 8016dd0:	4630      	mov	r0, r6
 8016dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 8016dd6:	2d04      	cmp	r5, #4
 8016dd8:	d109      	bne.n	8016dee <lv_img_signal+0x5a>
        if(ext->src_type == LV_IMG_SRC_SYMBOL) {
 8016dda:	7b03      	ldrb	r3, [r0, #12]
 8016ddc:	f003 0303 	and.w	r3, r3, #3
 8016de0:	2b02      	cmp	r3, #2
 8016de2:	d1f5      	bne.n	8016dd0 <lv_img_signal+0x3c>
            lv_img_set_src(img, ext->src);
 8016de4:	6801      	ldr	r1, [r0, #0]
 8016de6:	4640      	mov	r0, r8
 8016de8:	f7ff fede 	bl	8016ba8 <lv_img_set_src>
 8016dec:	e7f0      	b.n	8016dd0 <lv_img_signal+0x3c>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8016dee:	2d06      	cmp	r5, #6
 8016df0:	d1ee      	bne.n	8016dd0 <lv_img_signal+0x3c>
 8016df2:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 8016df4:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 8016df8:	b2da      	uxtb	r2, r3
 8016dfa:	b119      	cbz	r1, 8016e04 <lv_img_signal+0x70>
 8016dfc:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8016dfe:	2b07      	cmp	r3, #7
 8016e00:	d1f8      	bne.n	8016df4 <lv_img_signal+0x60>
 8016e02:	461a      	mov	r2, r3
        buf->type[i] = "lv_img";
 8016e04:	4b02      	ldr	r3, [pc, #8]	; (8016e10 <lv_img_signal+0x7c>)
 8016e06:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
 8016e0a:	e7e1      	b.n	8016dd0 <lv_img_signal+0x3c>
 8016e0c:	2000b048 	.word	0x2000b048
 8016e10:	080ec3fd 	.word	0x080ec3fd

08016e14 <refr_img>:

    return res;
}

static void refr_img(lv_obj_t * imgbtn)
{
 8016e14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016e16:	4604      	mov	r4, r0
    lv_imgbtn_ext_t * ext = lv_obj_get_ext_attr(imgbtn);
 8016e18:	f7f8 fbed 	bl	800f5f6 <lv_obj_get_ext_attr>
 8016e1c:	4605      	mov	r5, r0
 * @param imgbtn pointer to a image button object
 * @return the state of the button (from lv_btn_state_t enum)
 */
static inline lv_btn_state_t lv_imgbtn_get_state(const lv_obj_t * imgbtn)
{
    return lv_btn_get_state(imgbtn);
 8016e1e:	4620      	mov	r0, r4
 8016e20:	f7fe fab8 	bl	8015394 <lv_btn_get_state>
    lv_btn_state_t state  = lv_imgbtn_get_state(imgbtn);
    lv_img_header_t header;

#if LV_IMGBTN_TILED == 0
    const void * src = ext->img_src[state];
 8016e24:	eb05 0080 	add.w	r0, r5, r0, lsl #2
#else
    const void * src = ext->img_src_mid[state];
#endif

    lv_res_t info_res;
    info_res = lv_img_decoder_get_info(src, &header);
 8016e28:	a901      	add	r1, sp, #4
 8016e2a:	69c0      	ldr	r0, [r0, #28]
 8016e2c:	f7fc fcb8 	bl	80137a0 <lv_img_decoder_get_info>
    if(info_res == LV_RES_OK) {
 8016e30:	2801      	cmp	r0, #1
 8016e32:	d114      	bne.n	8016e5e <refr_img+0x4a>
        ext->act_cf = header.cf;
 8016e34:	f89d 3004 	ldrb.w	r3, [sp, #4]
#if LV_IMGBTN_TILED == 0
        lv_obj_set_size(imgbtn, header.w, header.h);
 8016e38:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8016e3c:	9901      	ldr	r1, [sp, #4]
        ext->act_cf = header.cf;
 8016e3e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8016e42:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
        lv_obj_set_size(imgbtn, header.w, header.h);
 8016e46:	f3c2 124a 	ubfx	r2, r2, #5, #11
 8016e4a:	f3c1 218a 	ubfx	r1, r1, #10, #11
 8016e4e:	4620      	mov	r0, r4
 8016e50:	f7f8 f9b6 	bl	800f1c0 <lv_obj_set_size>
#endif
    } else {
        ext->act_cf = LV_IMG_CF_UNKNOWN;
    }

    lv_obj_invalidate(imgbtn);
 8016e54:	4620      	mov	r0, r4
 8016e56:	f7f7 fd51 	bl	800e8fc <lv_obj_invalidate>
}
 8016e5a:	b003      	add	sp, #12
 8016e5c:	bd30      	pop	{r4, r5, pc}
        ext->act_cf = LV_IMG_CF_UNKNOWN;
 8016e5e:	2300      	movs	r3, #0
 8016e60:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8016e64:	e7f6      	b.n	8016e54 <refr_img+0x40>
	...

08016e68 <lv_imgbtn_signal>:
{
 8016e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    res = ancestor_signal(imgbtn, sign, param);
 8016e6a:	4b0f      	ldr	r3, [pc, #60]	; (8016ea8 <lv_imgbtn_signal+0x40>)
 8016e6c:	681b      	ldr	r3, [r3, #0]
{
 8016e6e:	4607      	mov	r7, r0
 8016e70:	460e      	mov	r6, r1
 8016e72:	4615      	mov	r5, r2
    res = ancestor_signal(imgbtn, sign, param);
 8016e74:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8016e76:	2801      	cmp	r0, #1
    res = ancestor_signal(imgbtn, sign, param);
 8016e78:	4604      	mov	r4, r0
    if(res != LV_RES_OK) return res;
 8016e7a:	d104      	bne.n	8016e86 <lv_imgbtn_signal+0x1e>
    if(sign == LV_SIGNAL_STYLE_CHG) {
 8016e7c:	2e04      	cmp	r6, #4
 8016e7e:	d104      	bne.n	8016e8a <lv_imgbtn_signal+0x22>
        refr_img(imgbtn);
 8016e80:	4638      	mov	r0, r7
 8016e82:	f7ff ffc7 	bl	8016e14 <refr_img>
}
 8016e86:	4620      	mov	r0, r4
 8016e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8016e8a:	2e06      	cmp	r6, #6
 8016e8c:	d1fb      	bne.n	8016e86 <lv_imgbtn_signal+0x1e>
 8016e8e:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 8016e90:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8016e94:	b2da      	uxtb	r2, r3
 8016e96:	b119      	cbz	r1, 8016ea0 <lv_imgbtn_signal+0x38>
 8016e98:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8016e9a:	2b07      	cmp	r3, #7
 8016e9c:	d1f8      	bne.n	8016e90 <lv_imgbtn_signal+0x28>
 8016e9e:	461a      	mov	r2, r3
        buf->type[i] = "lv_imgbtn";
 8016ea0:	4b02      	ldr	r3, [pc, #8]	; (8016eac <lv_imgbtn_signal+0x44>)
 8016ea2:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
 8016ea6:	e7ee      	b.n	8016e86 <lv_imgbtn_signal+0x1e>
 8016ea8:	2000b050 	.word	0x2000b050
 8016eac:	080ec404 	.word	0x080ec404

08016eb0 <lv_imgbtn_design>:
    if(mode == LV_DESIGN_COVER_CHK) {
 8016eb0:	2a02      	cmp	r2, #2
{
 8016eb2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016eb6:	4604      	mov	r4, r0
 8016eb8:	460e      	mov	r6, r1
    if(mode == LV_DESIGN_COVER_CHK) {
 8016eba:	d10f      	bne.n	8016edc <lv_imgbtn_design+0x2c>
        lv_imgbtn_ext_t * ext = lv_obj_get_ext_attr(imgbtn);
 8016ebc:	f7f8 fb9b 	bl	800f5f6 <lv_obj_get_ext_attr>
        if(ext->act_cf == LV_IMG_CF_TRUE_COLOR || ext->act_cf == LV_IMG_CF_RAW) {
 8016ec0:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8016ec4:	2b04      	cmp	r3, #4
 8016ec6:	d001      	beq.n	8016ecc <lv_imgbtn_design+0x1c>
 8016ec8:	2b01      	cmp	r3, #1
 8016eca:	d123      	bne.n	8016f14 <lv_imgbtn_design+0x64>
            cover = lv_area_is_in(mask, &imgbtn->coords);
 8016ecc:	f104 0110 	add.w	r1, r4, #16
 8016ed0:	4630      	mov	r0, r6
}
 8016ed2:	b002      	add	sp, #8
 8016ed4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            cover = lv_area_is_in(mask, &imgbtn->coords);
 8016ed8:	f7fd b8f2 	b.w	80140c0 <lv_area_is_in>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 8016edc:	b9c2      	cbnz	r2, 8016f10 <lv_imgbtn_design+0x60>
        lv_imgbtn_ext_t * ext    = lv_obj_get_ext_attr(imgbtn);
 8016ede:	f7f8 fb8a 	bl	800f5f6 <lv_obj_get_ext_attr>
 8016ee2:	4605      	mov	r5, r0
 8016ee4:	4620      	mov	r0, r4
 8016ee6:	f7fe fa55 	bl	8015394 <lv_btn_get_state>
    return lv_btn_get_style(imgbtn, type);
 8016eea:	4601      	mov	r1, r0
 8016eec:	4607      	mov	r7, r0
 8016eee:	4620      	mov	r0, r4
 8016ef0:	f7fe fb08 	bl	8015504 <lv_btn_get_style>
 8016ef4:	4680      	mov	r8, r0
        lv_opa_t opa_scale       = lv_obj_get_opa_scale(imgbtn);
 8016ef6:	4620      	mov	r0, r4
 8016ef8:	f7f8 fb15 	bl	800f526 <lv_obj_get_opa_scale>
        const void * src = ext->img_src[state];
 8016efc:	eb05 0587 	add.w	r5, r5, r7, lsl #2
        lv_draw_img(&imgbtn->coords, mask, src, style, opa_scale);
 8016f00:	9000      	str	r0, [sp, #0]
 8016f02:	4643      	mov	r3, r8
 8016f04:	69ea      	ldr	r2, [r5, #28]
 8016f06:	4631      	mov	r1, r6
 8016f08:	f104 0010 	add.w	r0, r4, #16
 8016f0c:	f7f9 ff02 	bl	8010d14 <lv_draw_img>
    return true;
 8016f10:	2001      	movs	r0, #1
 8016f12:	e000      	b.n	8016f16 <lv_imgbtn_design+0x66>
        bool cover            = false;
 8016f14:	2000      	movs	r0, #0
}
 8016f16:	b002      	add	sp, #8
 8016f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016f1c <lv_imgbtn_create>:
{
 8016f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f1e:	460f      	mov	r7, r1
    lv_obj_t * new_imgbtn = lv_btn_create(par, copy);
 8016f20:	f7fe f9a8 	bl	8015274 <lv_btn_create>
    lv_mem_assert(new_imgbtn);
 8016f24:	4604      	mov	r4, r0
 8016f26:	b900      	cbnz	r0, 8016f2a <lv_imgbtn_create+0xe>
 8016f28:	e7fe      	b.n	8016f28 <lv_imgbtn_create+0xc>
    lv_imgbtn_ext_t * ext = lv_obj_allocate_ext_attr(new_imgbtn, sizeof(lv_imgbtn_ext_t));
 8016f2a:	2134      	movs	r1, #52	; 0x34
 8016f2c:	f7f7 fcb8 	bl	800e8a0 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 8016f30:	4606      	mov	r6, r0
 8016f32:	b900      	cbnz	r0, 8016f36 <lv_imgbtn_create+0x1a>
 8016f34:	e7fe      	b.n	8016f34 <lv_imgbtn_create+0x18>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_imgbtn);
 8016f36:	4d19      	ldr	r5, [pc, #100]	; (8016f9c <lv_imgbtn_create+0x80>)
 8016f38:	682b      	ldr	r3, [r5, #0]
 8016f3a:	b91b      	cbnz	r3, 8016f44 <lv_imgbtn_create+0x28>
 8016f3c:	4620      	mov	r0, r4
 8016f3e:	f7f8 fb56 	bl	800f5ee <lv_obj_get_signal_cb>
 8016f42:	6028      	str	r0, [r5, #0]
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(new_imgbtn);
 8016f44:	4d16      	ldr	r5, [pc, #88]	; (8016fa0 <lv_imgbtn_create+0x84>)
 8016f46:	682b      	ldr	r3, [r5, #0]
 8016f48:	b91b      	cbnz	r3, 8016f52 <lv_imgbtn_create+0x36>
 8016f4a:	4620      	mov	r0, r4
 8016f4c:	f7f8 fb51 	bl	800f5f2 <lv_obj_get_design_cb>
 8016f50:	6028      	str	r0, [r5, #0]
    memset(ext->img_src, 0, sizeof(ext->img_src));
 8016f52:	f106 051c 	add.w	r5, r6, #28
 8016f56:	2214      	movs	r2, #20
 8016f58:	2100      	movs	r1, #0
 8016f5a:	4628      	mov	r0, r5
 8016f5c:	f002 fdb9 	bl	8019ad2 <memset>
    ext->act_cf = LV_IMG_CF_UNKNOWN;
 8016f60:	2300      	movs	r3, #0
    lv_obj_set_signal_cb(new_imgbtn, lv_imgbtn_signal);
 8016f62:	4910      	ldr	r1, [pc, #64]	; (8016fa4 <lv_imgbtn_create+0x88>)
    ext->act_cf = LV_IMG_CF_UNKNOWN;
 8016f64:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    lv_obj_set_signal_cb(new_imgbtn, lv_imgbtn_signal);
 8016f68:	4620      	mov	r0, r4
 8016f6a:	f7f7 fc95 	bl	800e898 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_imgbtn, lv_imgbtn_design);
 8016f6e:	490e      	ldr	r1, [pc, #56]	; (8016fa8 <lv_imgbtn_create+0x8c>)
 8016f70:	4620      	mov	r0, r4
 8016f72:	f7f7 fc93 	bl	800e89c <lv_obj_set_design_cb>
    if(copy == NULL) {
 8016f76:	b177      	cbz	r7, 8016f96 <lv_imgbtn_create+0x7a>
        lv_imgbtn_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8016f78:	4638      	mov	r0, r7
 8016f7a:	f7f8 fb3c 	bl	800f5f6 <lv_obj_get_ext_attr>
        memcpy(ext->img_src, copy_ext->img_src, sizeof(ext->img_src));
 8016f7e:	f100 031c 	add.w	r3, r0, #28
 8016f82:	3030      	adds	r0, #48	; 0x30
 8016f84:	f853 2b04 	ldr.w	r2, [r3], #4
 8016f88:	f845 2b04 	str.w	r2, [r5], #4
 8016f8c:	4283      	cmp	r3, r0
 8016f8e:	d1f9      	bne.n	8016f84 <lv_imgbtn_create+0x68>
        lv_obj_refresh_style(new_imgbtn);
 8016f90:	4620      	mov	r0, r4
 8016f92:	f7f8 f96e 	bl	800f272 <lv_obj_refresh_style>
}
 8016f96:	4620      	mov	r0, r4
 8016f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016f9a:	bf00      	nop
 8016f9c:	2000b050 	.word	0x2000b050
 8016fa0:	2000b04c 	.word	0x2000b04c
 8016fa4:	08016e69 	.word	0x08016e69
 8016fa8:	08016eb1 	.word	0x08016eb1

08016fac <lv_imgbtn_set_src>:
{
 8016fac:	b570      	push	{r4, r5, r6, lr}
 8016fae:	4605      	mov	r5, r0
 8016fb0:	460c      	mov	r4, r1
 8016fb2:	4616      	mov	r6, r2
    lv_imgbtn_ext_t * ext = lv_obj_get_ext_attr(imgbtn);
 8016fb4:	f7f8 fb1f 	bl	800f5f6 <lv_obj_get_ext_attr>
    ext->img_src[state] = src;
 8016fb8:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8016fbc:	61c6      	str	r6, [r0, #28]
    refr_img(imgbtn);
 8016fbe:	4628      	mov	r0, r5
}
 8016fc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    refr_img(imgbtn);
 8016fc4:	f7ff bf26 	b.w	8016e14 <refr_img>

08016fc8 <lv_label_dot_tmp_free>:
 * Free the dot_tmp_ptr field if it was previously allocated.
 * Always clears the field
 * @param label pointer to label object.
 */
static void lv_label_dot_tmp_free(lv_obj_t * label)
{
 8016fc8:	b510      	push	{r4, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8016fca:	f7f8 fb14 	bl	800f5f6 <lv_obj_get_ext_attr>
    if(ext->dot_tmp_alloc && ext->dot.tmp_ptr) {
 8016fce:	7fc3      	ldrb	r3, [r0, #31]
 8016fd0:	079b      	lsls	r3, r3, #30
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8016fd2:	4604      	mov	r4, r0
    if(ext->dot_tmp_alloc && ext->dot.tmp_ptr) {
 8016fd4:	d503      	bpl.n	8016fde <lv_label_dot_tmp_free+0x16>
 8016fd6:	6840      	ldr	r0, [r0, #4]
 8016fd8:	b108      	cbz	r0, 8016fde <lv_label_dot_tmp_free+0x16>
        lv_mem_free(ext->dot.tmp_ptr);
 8016fda:	f7fd fa8b 	bl	80144f4 <lv_mem_free>
    }
    ext->dot_tmp_alloc = false;
 8016fde:	7fe3      	ldrb	r3, [r4, #31]
 8016fe0:	f36f 0341 	bfc	r3, #1, #1
 8016fe4:	77e3      	strb	r3, [r4, #31]
    ext->dot.tmp_ptr   = NULL;
 8016fe6:	2300      	movs	r3, #0
 8016fe8:	6063      	str	r3, [r4, #4]
 8016fea:	bd10      	pop	{r4, pc}

08016fec <lv_label_revert_dots>:
{
 8016fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ff0:	4606      	mov	r6, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8016ff2:	f7f8 fb00 	bl	800f5f6 <lv_obj_get_ext_attr>
    if(ext->long_mode != LV_LABEL_LONG_DOT) return;
 8016ff6:	7f83      	ldrb	r3, [r0, #30]
 8016ff8:	f003 0307 	and.w	r3, r3, #7
 8016ffc:	2b02      	cmp	r3, #2
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8016ffe:	4604      	mov	r4, r0
    if(ext->long_mode != LV_LABEL_LONG_DOT) return;
 8017000:	d126      	bne.n	8017050 <lv_label_revert_dots+0x64>
    if(ext->dot_end == LV_LABEL_DOT_END_INV) return;
 8017002:	8901      	ldrh	r1, [r0, #8]
 8017004:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017008:	4299      	cmp	r1, r3
 801700a:	d021      	beq.n	8017050 <lv_label_revert_dots+0x64>
    uint32_t byte_i   = lv_txt_encoded_get_byte_id(ext->text, letter_i);
 801700c:	4b12      	ldr	r3, [pc, #72]	; (8017058 <lv_label_revert_dots+0x6c>)
 801700e:	6800      	ldr	r0, [r0, #0]
 8017010:	681b      	ldr	r3, [r3, #0]
 8017012:	3903      	subs	r1, #3
 8017014:	4798      	blx	r3
 8017016:	4680      	mov	r8, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8017018:	4630      	mov	r0, r6
 801701a:	f7f8 faec 	bl	800f5f6 <lv_obj_get_ext_attr>
    if(ext->dot_tmp_alloc) {
 801701e:	7fc3      	ldrb	r3, [r0, #31]
 8017020:	079b      	lsls	r3, r3, #30
        return ext->dot.tmp_ptr;
 8017022:	bf4c      	ite	mi
 8017024:	6840      	ldrmi	r0, [r0, #4]
        return ext->dot.tmp;
 8017026:	3004      	addpl	r0, #4
    while(ext->text[byte_i + i] != '\0') {
 8017028:	2500      	movs	r5, #0
 801702a:	b2eb      	uxtb	r3, r5
 801702c:	eb08 0203 	add.w	r2, r8, r3
 8017030:	6821      	ldr	r1, [r4, #0]
        ext->text[byte_i + i] = dot_tmp[i];
 8017032:	5cc3      	ldrb	r3, [r0, r3]
    while(ext->text[byte_i + i] != '\0') {
 8017034:	f811 e002 	ldrb.w	lr, [r1, r2]
 8017038:	188f      	adds	r7, r1, r2
 801703a:	3501      	adds	r5, #1
 801703c:	f1be 0f00 	cmp.w	lr, #0
 8017040:	d108      	bne.n	8017054 <lv_label_revert_dots+0x68>
    ext->text[byte_i + i] = dot_tmp[i];
 8017042:	703b      	strb	r3, [r7, #0]
    lv_label_dot_tmp_free(label);
 8017044:	4630      	mov	r0, r6
 8017046:	f7ff ffbf 	bl	8016fc8 <lv_label_dot_tmp_free>
    ext->dot_end = LV_LABEL_DOT_END_INV;
 801704a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801704e:	8123      	strh	r3, [r4, #8]
 8017050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ext->text[byte_i + i] = dot_tmp[i];
 8017054:	548b      	strb	r3, [r1, r2]
 8017056:	e7e8      	b.n	801702a <lv_label_revert_dots+0x3e>
 8017058:	20001cb8 	.word	0x20001cb8

0801705c <lv_label_set_offset_y>:
{
 801705c:	b538      	push	{r3, r4, r5, lr}
 801705e:	4604      	mov	r4, r0
 8017060:	460d      	mov	r5, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8017062:	f7f8 fac8 	bl	800f5f6 <lv_obj_get_ext_attr>
    ext->offset.y        = y;
 8017066:	8185      	strh	r5, [r0, #12]
    lv_obj_invalidate(label);
 8017068:	4620      	mov	r0, r4
}
 801706a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(label);
 801706e:	f7f7 bc45 	b.w	800e8fc <lv_obj_invalidate>

08017072 <lv_label_set_offset_x>:
{
 8017072:	b538      	push	{r3, r4, r5, lr}
 8017074:	4604      	mov	r4, r0
 8017076:	460d      	mov	r5, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8017078:	f7f8 fabd 	bl	800f5f6 <lv_obj_get_ext_attr>
    ext->offset.x        = x;
 801707c:	8145      	strh	r5, [r0, #10]
    lv_obj_invalidate(label);
 801707e:	4620      	mov	r0, r4
}
 8017080:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(label);
 8017084:	f7f7 bc3a 	b.w	800e8fc <lv_obj_invalidate>

08017088 <lv_label_set_dot_tmp>:
{
 8017088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801708a:	4615      	mov	r5, r2
 801708c:	4607      	mov	r7, r0
 801708e:	460e      	mov	r6, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8017090:	f7f8 fab1 	bl	800f5f6 <lv_obj_get_ext_attr>
 8017094:	4604      	mov	r4, r0
    lv_label_dot_tmp_free(label); /* Deallocate any existing space */
 8017096:	4638      	mov	r0, r7
 8017098:	f7ff ff96 	bl	8016fc8 <lv_label_dot_tmp_free>
    if(len > sizeof(char *)) {
 801709c:	2d04      	cmp	r5, #4
 801709e:	d911      	bls.n	80170c4 <lv_label_set_dot_tmp+0x3c>
        ext->dot.tmp_ptr = lv_mem_alloc(len + 1);
 80170a0:	1c68      	adds	r0, r5, #1
 80170a2:	f7fd f9f1 	bl	8014488 <lv_mem_alloc>
 80170a6:	6060      	str	r0, [r4, #4]
        if(ext->dot.tmp_ptr == NULL) {
 80170a8:	b1b0      	cbz	r0, 80170d8 <lv_label_set_dot_tmp+0x50>
        memcpy(ext->dot.tmp_ptr, data, len);
 80170aa:	462a      	mov	r2, r5
 80170ac:	4631      	mov	r1, r6
 80170ae:	f002 fd05 	bl	8019abc <memcpy>
        ext->dot.tmp_ptr[len] = '\0';
 80170b2:	6863      	ldr	r3, [r4, #4]
 80170b4:	2200      	movs	r2, #0
 80170b6:	555a      	strb	r2, [r3, r5]
        ext->dot_tmp_alloc    = true;
 80170b8:	7fe3      	ldrb	r3, [r4, #31]
 80170ba:	f043 0302 	orr.w	r3, r3, #2
 80170be:	77e3      	strb	r3, [r4, #31]
    return true;
 80170c0:	2001      	movs	r0, #1
 80170c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ext->dot_tmp_alloc = false;
 80170c4:	7fe3      	ldrb	r3, [r4, #31]
 80170c6:	f36f 0341 	bfc	r3, #1, #1
 80170ca:	77e3      	strb	r3, [r4, #31]
        memcpy(ext->dot.tmp, data, len);
 80170cc:	462a      	mov	r2, r5
 80170ce:	4631      	mov	r1, r6
 80170d0:	1d20      	adds	r0, r4, #4
 80170d2:	f002 fcf3 	bl	8019abc <memcpy>
 80170d6:	e7f3      	b.n	80170c0 <lv_label_set_dot_tmp+0x38>
}
 80170d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080170da <lv_label_design>:
{
 80170da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(mode == LV_DESIGN_COVER_CHK)
 80170de:	2a02      	cmp	r2, #2
{
 80170e0:	b08d      	sub	sp, #52	; 0x34
 80170e2:	4607      	mov	r7, r0
 80170e4:	4688      	mov	r8, r1
    if(mode == LV_DESIGN_COVER_CHK)
 80170e6:	f000 8102 	beq.w	80172ee <lv_label_design+0x214>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 80170ea:	2a00      	cmp	r2, #0
 80170ec:	f040 80f6 	bne.w	80172dc <lv_label_design+0x202>
        const lv_style_t * style = lv_obj_get_style(label);
 80170f0:	f7f8 f996 	bl	800f420 <lv_obj_get_style>
 80170f4:	4604      	mov	r4, r0
        lv_opa_t opa_scale       = lv_obj_get_opa_scale(label);
 80170f6:	4638      	mov	r0, r7
 80170f8:	f7f8 fa15 	bl	800f526 <lv_obj_get_opa_scale>
        lv_obj_get_coords(label, &coords);
 80170fc:	a908      	add	r1, sp, #32
        lv_opa_t opa_scale       = lv_obj_get_opa_scale(label);
 80170fe:	4681      	mov	r9, r0
        lv_obj_get_coords(label, &coords);
 8017100:	4638      	mov	r0, r7
 8017102:	f7f8 f969 	bl	800f3d8 <lv_obj_get_coords>
        lv_group_t * g = lv_obj_get_group(label);
 8017106:	4638      	mov	r0, r7
 8017108:	f7f8 fa7b 	bl	800f602 <lv_obj_get_group>
        if(lv_group_get_focused(g) == label) {
 801710c:	f7f7 fa0e 	bl	800e52c <lv_group_get_focused>
 8017110:	4287      	cmp	r7, r0
 8017112:	d105      	bne.n	8017120 <lv_label_design+0x46>
            lv_draw_rect(&coords, mask, style, opa_scale);
 8017114:	464b      	mov	r3, r9
 8017116:	4622      	mov	r2, r4
 8017118:	4641      	mov	r1, r8
 801711a:	a808      	add	r0, sp, #32
 801711c:	f7fa f990 	bl	8011440 <lv_draw_rect>
        lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8017120:	4638      	mov	r0, r7
 8017122:	f7f8 fa68 	bl	800f5f6 <lv_obj_get_ext_attr>
        if(ext->body_draw) {
 8017126:	7fc3      	ldrb	r3, [r0, #31]
 8017128:	07d9      	lsls	r1, r3, #31
        lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801712a:	4605      	mov	r5, r0
        if(ext->body_draw) {
 801712c:	d524      	bpl.n	8017178 <lv_label_design+0x9e>
            lv_obj_get_coords(label, &bg);
 801712e:	a90a      	add	r1, sp, #40	; 0x28
 8017130:	4638      	mov	r0, r7
 8017132:	f7f8 f951 	bl	800f3d8 <lv_obj_get_coords>
            bg.x1 -= style->body.padding.left;
 8017136:	8b62      	ldrh	r2, [r4, #26]
 8017138:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801713c:	1a9b      	subs	r3, r3, r2
 801713e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
            bg.x2 += style->body.padding.right;
 8017142:	8ba2      	ldrh	r2, [r4, #28]
 8017144:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8017148:	4413      	add	r3, r2
 801714a:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            bg.y1 -= style->body.padding.top;
 801714e:	8ae2      	ldrh	r2, [r4, #22]
 8017150:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8017154:	1a9b      	subs	r3, r3, r2
 8017156:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
            bg.y2 += style->body.padding.bottom;
 801715a:	8b22      	ldrh	r2, [r4, #24]
 801715c:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
            lv_draw_rect(&bg, mask, style, lv_obj_get_opa_scale(label));
 8017160:	4638      	mov	r0, r7
            bg.y2 += style->body.padding.bottom;
 8017162:	4413      	add	r3, r2
 8017164:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            lv_draw_rect(&bg, mask, style, lv_obj_get_opa_scale(label));
 8017168:	f7f8 f9dd 	bl	800f526 <lv_obj_get_opa_scale>
 801716c:	4622      	mov	r2, r4
 801716e:	4603      	mov	r3, r0
 8017170:	4641      	mov	r1, r8
 8017172:	a80a      	add	r0, sp, #40	; 0x28
 8017174:	f7fa f964 	bl	8011440 <lv_draw_rect>
        if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
 8017178:	7fab      	ldrb	r3, [r5, #30]
        if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 801717a:	061a      	lsls	r2, r3, #24
        lv_txt_flag_t flag = LV_TXT_FLAG_NONE;
 801717c:	f3c3 1680 	ubfx	r6, r3, #6, #1
        if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 8017180:	f003 0230 	and.w	r2, r3, #48	; 0x30
        if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 8017184:	bf48      	it	mi
 8017186:	f046 0602 	orrmi.w	r6, r6, #2
        if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 801718a:	2a10      	cmp	r2, #16
 801718c:	f040 80a8 	bne.w	80172e0 <lv_label_design+0x206>
 8017190:	f046 0604 	orr.w	r6, r6, #4
        if((ext->long_mode == LV_LABEL_LONG_SROLL || ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) &&
 8017194:	f003 0307 	and.w	r3, r3, #7
 8017198:	3b03      	subs	r3, #3
 801719a:	2b01      	cmp	r3, #1
 801719c:	d81a      	bhi.n	80171d4 <lv_label_design+0xfa>
 801719e:	2a10      	cmp	r2, #16
 80171a0:	d001      	beq.n	80171a6 <lv_label_design+0xcc>
           (ext->align == LV_LABEL_ALIGN_CENTER || ext->align == LV_LABEL_ALIGN_RIGHT)) {
 80171a2:	2a20      	cmp	r2, #32
 80171a4:	d116      	bne.n	80171d4 <lv_label_design+0xfa>
            lv_txt_get_size(&size, ext->text, style->text.font, style->text.letter_space, style->text.line_space,
 80171a6:	f647 4218 	movw	r2, #31768	; 0x7c18
 80171aa:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 80171ae:	9602      	str	r6, [sp, #8]
 80171b0:	9201      	str	r2, [sp, #4]
 80171b2:	f9b4 202a 	ldrsh.w	r2, [r4, #42]	; 0x2a
 80171b6:	9200      	str	r2, [sp, #0]
 80171b8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80171ba:	6829      	ldr	r1, [r5, #0]
 80171bc:	a80a      	add	r0, sp, #40	; 0x28
 80171be:	f7fd fd21 	bl	8014c04 <lv_txt_get_size>
            if(size.x > lv_obj_get_width(label)) {
 80171c2:	4638      	mov	r0, r7
 80171c4:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 80171c8:	f7f8 f918 	bl	800f3fc <lv_obj_get_width>
 80171cc:	4582      	cmp	sl, r0
                flag &= ~LV_TXT_FLAG_CENTER;
 80171ce:	bfc8      	it	gt
 80171d0:	f006 06f3 	andgt.w	r6, r6, #243	; 0xf3
        if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC || lv_obj_get_height(label) < LV_LABEL_HINT_HEIGHT_LIMIT)
 80171d4:	7fab      	ldrb	r3, [r5, #30]
 80171d6:	f003 0307 	and.w	r3, r3, #7
 80171da:	2b04      	cmp	r3, #4
 80171dc:	f000 8085 	beq.w	80172ea <lv_label_design+0x210>
 80171e0:	4638      	mov	r0, r7
 80171e2:	f7f8 f911 	bl	800f408 <lv_obj_get_height>
 80171e6:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80171ea:	db7e      	blt.n	80172ea <lv_label_design+0x210>
        lv_draw_label_hint_t * hint = &ext->hint;
 80171ec:	f105 0310 	add.w	r3, r5, #16
        lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ext->offset,
 80171f0:	9305      	str	r3, [sp, #20]
 80171f2:	f64f 7bff 	movw	fp, #65535	; 0xffff
 80171f6:	f105 030a 	add.w	r3, r5, #10
 80171fa:	f8cd b010 	str.w	fp, [sp, #16]
 80171fe:	f8cd b00c 	str.w	fp, [sp, #12]
 8017202:	9302      	str	r3, [sp, #8]
 8017204:	9601      	str	r6, [sp, #4]
 8017206:	682b      	ldr	r3, [r5, #0]
 8017208:	9300      	str	r3, [sp, #0]
 801720a:	4622      	mov	r2, r4
 801720c:	464b      	mov	r3, r9
 801720e:	4641      	mov	r1, r8
 8017210:	a808      	add	r0, sp, #32
 8017212:	f7f9 fe7f 	bl	8010f14 <lv_draw_label>
        if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) {
 8017216:	7fab      	ldrb	r3, [r5, #30]
 8017218:	f003 0307 	and.w	r3, r3, #7
 801721c:	2b04      	cmp	r3, #4
 801721e:	d15d      	bne.n	80172dc <lv_label_design+0x202>
            lv_txt_get_size(&size, ext->text, style->text.font, style->text.letter_space, style->text.line_space,
 8017220:	f647 4218 	movw	r2, #31768	; 0x7c18
 8017224:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 8017228:	9602      	str	r6, [sp, #8]
 801722a:	9201      	str	r2, [sp, #4]
 801722c:	f9b4 202a 	ldrsh.w	r2, [r4, #42]	; 0x2a
 8017230:	9200      	str	r2, [sp, #0]
 8017232:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8017234:	6829      	ldr	r1, [r5, #0]
 8017236:	a807      	add	r0, sp, #28
 8017238:	f7fd fce4 	bl	8014c04 <lv_txt_get_size>
            if(size.x > lv_obj_get_width(label)) {
 801723c:	4638      	mov	r0, r7
 801723e:	f9bd a01c 	ldrsh.w	sl, [sp, #28]
 8017242:	f7f8 f8db 	bl	800f3fc <lv_obj_get_width>
 8017246:	4582      	cmp	sl, r0
 8017248:	dd24      	ble.n	8017294 <lv_label_design+0x1ba>
                ofs.x = ext->offset.x + size.x +
 801724a:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 801724e:	f8b5 a00a 	ldrh.w	sl, [r5, #10]
                        lv_font_get_glyph_width(style->text.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 8017252:	2220      	movs	r2, #32
 8017254:	4611      	mov	r1, r2
                ofs.x = ext->offset.x + size.x +
 8017256:	4482      	add	sl, r0
                        lv_font_get_glyph_width(style->text.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 8017258:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801725a:	f7fc fb4f 	bl	80138fc <lv_font_get_glyph_width>
                ofs.y = ext->offset.y;
 801725e:	89ab      	ldrh	r3, [r5, #12]
 8017260:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs,
 8017264:	2300      	movs	r3, #0
 8017266:	9305      	str	r3, [sp, #20]
 8017268:	ab0a      	add	r3, sp, #40	; 0x28
 801726a:	f8cd b010 	str.w	fp, [sp, #16]
 801726e:	f8cd b00c 	str.w	fp, [sp, #12]
 8017272:	9302      	str	r3, [sp, #8]
 8017274:	9601      	str	r6, [sp, #4]
                        lv_font_get_glyph_width(style->text.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 8017276:	eb00 0040 	add.w	r0, r0, r0, lsl #1
                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs,
 801727a:	682b      	ldr	r3, [r5, #0]
 801727c:	9300      	str	r3, [sp, #0]
                ofs.x = ext->offset.x + size.x +
 801727e:	fa1f fa8a 	uxth.w	sl, sl
 8017282:	4482      	add	sl, r0
                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs,
 8017284:	464b      	mov	r3, r9
 8017286:	4622      	mov	r2, r4
 8017288:	4641      	mov	r1, r8
 801728a:	a808      	add	r0, sp, #32
                ofs.x = ext->offset.x + size.x +
 801728c:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs,
 8017290:	f7f9 fe40 	bl	8010f14 <lv_draw_label>
            if(size.y > lv_obj_get_height(label)) {
 8017294:	4638      	mov	r0, r7
 8017296:	f9bd a01e 	ldrsh.w	sl, [sp, #30]
 801729a:	f7f8 f8b5 	bl	800f408 <lv_obj_get_height>
 801729e:	4582      	cmp	sl, r0
 80172a0:	dd1c      	ble.n	80172dc <lv_label_design+0x202>
                ofs.x = ext->offset.x;
 80172a2:	896b      	ldrh	r3, [r5, #10]
 80172a4:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
                ofs.y = ext->offset.y + size.y + lv_font_get_line_height(style->text.font);
 80172a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80172aa:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80172ae:	7a1b      	ldrb	r3, [r3, #8]
 80172b0:	4413      	add	r3, r2
 80172b2:	89aa      	ldrh	r2, [r5, #12]
                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs,
 80172b4:	9601      	str	r6, [sp, #4]
                ofs.y = ext->offset.y + size.y + lv_font_get_line_height(style->text.font);
 80172b6:	4413      	add	r3, r2
 80172b8:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs,
 80172bc:	2300      	movs	r3, #0
 80172be:	9305      	str	r3, [sp, #20]
 80172c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80172c4:	9304      	str	r3, [sp, #16]
 80172c6:	9303      	str	r3, [sp, #12]
 80172c8:	ab0a      	add	r3, sp, #40	; 0x28
 80172ca:	9302      	str	r3, [sp, #8]
 80172cc:	682b      	ldr	r3, [r5, #0]
 80172ce:	9300      	str	r3, [sp, #0]
 80172d0:	4622      	mov	r2, r4
 80172d2:	464b      	mov	r3, r9
 80172d4:	4641      	mov	r1, r8
 80172d6:	a808      	add	r0, sp, #32
 80172d8:	f7f9 fe1c 	bl	8010f14 <lv_draw_label>
    return true;
 80172dc:	2001      	movs	r0, #1
 80172de:	e007      	b.n	80172f0 <lv_label_design+0x216>
        if(ext->align == LV_LABEL_ALIGN_RIGHT) flag |= LV_TXT_FLAG_RIGHT;
 80172e0:	2a20      	cmp	r2, #32
 80172e2:	bf08      	it	eq
 80172e4:	f046 0608 	orreq.w	r6, r6, #8
 80172e8:	e754      	b.n	8017194 <lv_label_design+0xba>
            hint = NULL;
 80172ea:	2300      	movs	r3, #0
 80172ec:	e780      	b.n	80171f0 <lv_label_design+0x116>
        return false;
 80172ee:	2000      	movs	r0, #0
}
 80172f0:	b00d      	add	sp, #52	; 0x34
 80172f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080172f6 <lv_label_set_align>:
{
 80172f6:	b538      	push	{r3, r4, r5, lr}
 80172f8:	460c      	mov	r4, r1
 80172fa:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 80172fc:	f7f8 f97b 	bl	800f5f6 <lv_obj_get_ext_attr>
    if(ext->align == align) return;
 8017300:	7f83      	ldrb	r3, [r0, #30]
 8017302:	f3c3 1201 	ubfx	r2, r3, #4, #2
 8017306:	42a2      	cmp	r2, r4
 8017308:	d007      	beq.n	801731a <lv_label_set_align+0x24>
    ext->align = align;
 801730a:	f364 1305 	bfi	r3, r4, #4, #2
 801730e:	7783      	strb	r3, [r0, #30]
    lv_obj_invalidate(label); /*Enough to invalidate because alignment is only drawing related
 8017310:	4628      	mov	r0, r5
}
 8017312:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(label); /*Enough to invalidate because alignment is only drawing related
 8017316:	f7f7 baf1 	b.w	800e8fc <lv_obj_invalidate>
 801731a:	bd38      	pop	{r3, r4, r5, pc}

0801731c <lv_label_set_body_draw>:
{
 801731c:	b538      	push	{r3, r4, r5, lr}
 801731e:	460d      	mov	r5, r1
 8017320:	4604      	mov	r4, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8017322:	f7f8 f968 	bl	800f5f6 <lv_obj_get_ext_attr>
    if(ext->body_draw == en) return;
 8017326:	7fc3      	ldrb	r3, [r0, #31]
 8017328:	f003 0201 	and.w	r2, r3, #1
 801732c:	42aa      	cmp	r2, r5
 801732e:	d00a      	beq.n	8017346 <lv_label_set_body_draw+0x2a>
    ext->body_draw = en == false ? 0 : 1;
 8017330:	f365 0300 	bfi	r3, r5, #0, #1
 8017334:	77c3      	strb	r3, [r0, #31]
    lv_obj_refresh_ext_draw_pad(label);
 8017336:	4620      	mov	r0, r4
 8017338:	f7f7 ffa9 	bl	800f28e <lv_obj_refresh_ext_draw_pad>
    lv_obj_invalidate(label);
 801733c:	4620      	mov	r0, r4
}
 801733e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(label);
 8017342:	f7f7 badb 	b.w	800e8fc <lv_obj_invalidate>
 8017346:	bd38      	pop	{r3, r4, r5, pc}

08017348 <lv_label_get_text>:
{
 8017348:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801734a:	f7f8 f954 	bl	800f5f6 <lv_obj_get_ext_attr>
}
 801734e:	6800      	ldr	r0, [r0, #0]
 8017350:	bd08      	pop	{r3, pc}

08017352 <lv_label_get_long_mode>:
{
 8017352:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8017354:	f7f8 f94f 	bl	800f5f6 <lv_obj_get_ext_attr>
    return ext->long_mode;
 8017358:	7f80      	ldrb	r0, [r0, #30]
}
 801735a:	f000 0007 	and.w	r0, r0, #7
 801735e:	bd08      	pop	{r3, pc}

08017360 <lv_label_get_align>:
{
 8017360:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8017362:	f7f8 f948 	bl	800f5f6 <lv_obj_get_ext_attr>
    return ext->align;
 8017366:	7f80      	ldrb	r0, [r0, #30]
}
 8017368:	f3c0 1001 	ubfx	r0, r0, #4, #2
 801736c:	bd08      	pop	{r3, pc}

0801736e <lv_label_get_recolor>:
{
 801736e:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8017370:	f7f8 f941 	bl	800f5f6 <lv_obj_get_ext_attr>
    return ext->recolor == 0 ? false : true;
 8017374:	7f80      	ldrb	r0, [r0, #30]
}
 8017376:	f3c0 1080 	ubfx	r0, r0, #6, #1
 801737a:	bd08      	pop	{r3, pc}

0801737c <lv_label_get_body_draw>:
{
 801737c:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801737e:	f7f8 f93a 	bl	800f5f6 <lv_obj_get_ext_attr>
    return ext->body_draw == 0 ? false : true;
 8017382:	7fc0      	ldrb	r0, [r0, #31]
}
 8017384:	f000 0001 	and.w	r0, r0, #1
 8017388:	bd08      	pop	{r3, pc}
	...

0801738c <lv_label_get_letter_on>:
{
 801738c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017390:	b08b      	sub	sp, #44	; 0x2c
 8017392:	4682      	mov	sl, r0
 8017394:	9106      	str	r1, [sp, #24]
    const char * txt         = lv_label_get_text(label);
 8017396:	f7ff ffd7 	bl	8017348 <lv_label_get_text>
 801739a:	4607      	mov	r7, r0
    lv_label_ext_t * ext     = lv_obj_get_ext_attr(label);
 801739c:	4650      	mov	r0, sl
 801739e:	f7f8 f92a 	bl	800f5f6 <lv_obj_get_ext_attr>
 80173a2:	9004      	str	r0, [sp, #16]
    lv_coord_t max_w         = lv_obj_get_width(label);
 80173a4:	4650      	mov	r0, sl
 80173a6:	f7f8 f829 	bl	800f3fc <lv_obj_get_width>
 80173aa:	4683      	mov	fp, r0
    const lv_style_t * style = lv_obj_get_style(label);
 80173ac:	4650      	mov	r0, sl
 80173ae:	f7f8 f837 	bl	800f420 <lv_obj_get_style>
    const lv_font_t * font   = style->text.font;
 80173b2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80173b4:	9303      	str	r3, [sp, #12]
 80173b6:	7a1b      	ldrb	r3, [r3, #8]
 80173b8:	9305      	str	r3, [sp, #20]
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
 80173ba:	9b04      	ldr	r3, [sp, #16]
 80173bc:	7f9b      	ldrb	r3, [r3, #30]
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 80173be:	061a      	lsls	r2, r3, #24
    lv_txt_flag_t flag       = LV_TXT_FLAG_NONE;
 80173c0:	f3c3 1680 	ubfx	r6, r3, #6, #1
    if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 80173c4:	f003 0230 	and.w	r2, r3, #48	; 0x30
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 80173c8:	bf48      	it	mi
 80173ca:	f046 0602 	orrmi.w	r6, r6, #2
    if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 80173ce:	2a10      	cmp	r2, #16
 80173d0:	bf08      	it	eq
 80173d2:	f046 0604 	orreq.w	r6, r6, #4
        max_w = LV_COORD_MAX;
 80173d6:	2400      	movs	r4, #0
 80173d8:	f013 0f07 	tst.w	r3, #7
 80173dc:	f647 4318 	movw	r3, #31768	; 0x7c18
    const lv_style_t * style = lv_obj_get_style(label);
 80173e0:	4681      	mov	r9, r0
        max_w = LV_COORD_MAX;
 80173e2:	bf08      	it	eq
 80173e4:	469b      	moveq	fp, r3
 80173e6:	4625      	mov	r5, r4
    while(txt[line_start] != '\0') {
 80173e8:	197b      	adds	r3, r7, r5
 80173ea:	9307      	str	r3, [sp, #28]
 80173ec:	5d7b      	ldrb	r3, [r7, r5]
 80173ee:	2b00      	cmp	r3, #0
 80173f0:	d150      	bne.n	8017494 <lv_label_get_letter_on+0x108>
 80173f2:	46a8      	mov	r8, r5
    if(ext->align == LV_LABEL_ALIGN_CENTER) {
 80173f4:	9b04      	ldr	r3, [sp, #16]
 80173f6:	7f9b      	ldrb	r3, [r3, #30]
 80173f8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80173fc:	2b10      	cmp	r3, #16
 80173fe:	d162      	bne.n	80174c6 <lv_label_get_letter_on+0x13a>
        line_w = lv_txt_get_width(&txt[line_start], new_line_start - line_start, font, style->text.letter_space, flag);
 8017400:	eba8 0105 	sub.w	r1, r8, r5
 8017404:	f9b9 3028 	ldrsh.w	r3, [r9, #40]	; 0x28
 8017408:	9a03      	ldr	r2, [sp, #12]
 801740a:	9600      	str	r6, [sp, #0]
 801740c:	b289      	uxth	r1, r1
 801740e:	1978      	adds	r0, r7, r5
 8017410:	f7fd fbb0 	bl	8014b74 <lv_txt_get_width>
 8017414:	4604      	mov	r4, r0
        x += lv_obj_get_width(label) / 2 - line_w / 2;
 8017416:	4650      	mov	r0, sl
 8017418:	f7f7 fff0 	bl	800f3fc <lv_obj_get_width>
 801741c:	2302      	movs	r3, #2
 801741e:	fb90 f0f3 	sdiv	r0, r0, r3
 8017422:	fb94 f4f3 	sdiv	r4, r4, r3
 8017426:	1b04      	subs	r4, r0, r4
 8017428:	b224      	sxth	r4, r4
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 801742a:	2300      	movs	r3, #0
 801742c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    uint32_t i         = line_start;
 8017430:	9509      	str	r5, [sp, #36]	; 0x24
    if(new_line_start > 0) {
 8017432:	f1b8 0f00 	cmp.w	r8, #0
 8017436:	d024      	beq.n	8017482 <lv_label_get_letter_on+0xf6>
            letter = lv_txt_encoded_next(txt, &i);
 8017438:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 80174f0 <lv_label_get_letter_on+0x164>
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 801743c:	f006 0601 	and.w	r6, r6, #1
        while(i <= new_line_start - 1) {
 8017440:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017442:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8017446:	4293      	cmp	r3, r2
 8017448:	d31b      	bcc.n	8017482 <lv_label_get_letter_on+0xf6>
            letter = lv_txt_encoded_next(txt, &i);
 801744a:	f8da 3000 	ldr.w	r3, [sl]
 801744e:	a909      	add	r1, sp, #36	; 0x24
 8017450:	4638      	mov	r0, r7
 8017452:	4798      	blx	r3
 8017454:	4683      	mov	fp, r0
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 8017456:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017458:	f8da 3000 	ldr.w	r3, [sl]
 801745c:	2100      	movs	r1, #0
 801745e:	4438      	add	r0, r7
 8017460:	4798      	blx	r3
 8017462:	4602      	mov	r2, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8017464:	2e00      	cmp	r6, #0
 8017466:	d130      	bne.n	80174ca <lv_label_get_letter_on+0x13e>
            x += lv_font_get_glyph_width(font, letter, letter_next);
 8017468:	4659      	mov	r1, fp
 801746a:	9803      	ldr	r0, [sp, #12]
 801746c:	f7fc fa46 	bl	80138fc <lv_font_get_glyph_width>
            if(pos->x < x) {
 8017470:	9b06      	ldr	r3, [sp, #24]
            x += lv_font_get_glyph_width(font, letter, letter_next);
 8017472:	4404      	add	r4, r0
            if(pos->x < x) {
 8017474:	f9b3 2000 	ldrsh.w	r2, [r3]
            x += lv_font_get_glyph_width(font, letter, letter_next);
 8017478:	b2a4      	uxth	r4, r4
            if(pos->x < x) {
 801747a:	b223      	sxth	r3, r4
 801747c:	429a      	cmp	r2, r3
 801747e:	da2f      	bge.n	80174e0 <lv_label_get_letter_on+0x154>
                i = i_current;
 8017480:	9509      	str	r5, [sp, #36]	; 0x24
    return lv_encoded_get_char_id(txt, i);
 8017482:	4b1a      	ldr	r3, [pc, #104]	; (80174ec <lv_label_get_letter_on+0x160>)
 8017484:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017486:	681b      	ldr	r3, [r3, #0]
 8017488:	4638      	mov	r0, r7
 801748a:	4798      	blx	r3
}
 801748c:	b280      	uxth	r0, r0
 801748e:	b00b      	add	sp, #44	; 0x2c
 8017490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        new_line_start += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, max_w, flag);
 8017494:	f9b9 2028 	ldrsh.w	r2, [r9, #40]	; 0x28
 8017498:	9903      	ldr	r1, [sp, #12]
 801749a:	9600      	str	r6, [sp, #0]
 801749c:	465b      	mov	r3, fp
 801749e:	1978      	adds	r0, r7, r5
 80174a0:	f7fd fae0 	bl	8014a64 <lv_txt_get_next_line>
        if(pos->y <= y + letter_height) break; /*The line is found (stored in 'line_start')*/
 80174a4:	9b06      	ldr	r3, [sp, #24]
 80174a6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80174aa:	9b05      	ldr	r3, [sp, #20]
 80174ac:	18e3      	adds	r3, r4, r3
 80174ae:	429a      	cmp	r2, r3
        new_line_start += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, max_w, flag);
 80174b0:	eb00 0805 	add.w	r8, r0, r5
        if(pos->y <= y + letter_height) break; /*The line is found (stored in 'line_start')*/
 80174b4:	dd9e      	ble.n	80173f4 <lv_label_get_letter_on+0x68>
        y += letter_height + style->text.line_space;
 80174b6:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
 80174ba:	9a05      	ldr	r2, [sp, #20]
 80174bc:	4413      	add	r3, r2
 80174be:	441c      	add	r4, r3
 80174c0:	b224      	sxth	r4, r4
        new_line_start += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, max_w, flag);
 80174c2:	4645      	mov	r5, r8
 80174c4:	e790      	b.n	80173e8 <lv_label_get_letter_on+0x5c>
    lv_coord_t x = 0;
 80174c6:	2400      	movs	r4, #0
 80174c8:	e7af      	b.n	801742a <lv_label_get_letter_on+0x9e>
                if(lv_txt_is_cmd(&cmd_state, txt[i]) != false) {
 80174ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80174cc:	9004      	str	r0, [sp, #16]
 80174ce:	5cf9      	ldrb	r1, [r7, r3]
 80174d0:	f10d 0023 	add.w	r0, sp, #35	; 0x23
 80174d4:	f7fd faa8 	bl	8014a28 <lv_txt_is_cmd>
 80174d8:	2800      	cmp	r0, #0
 80174da:	d1b1      	bne.n	8017440 <lv_label_get_letter_on+0xb4>
 80174dc:	9a04      	ldr	r2, [sp, #16]
 80174de:	e7c3      	b.n	8017468 <lv_label_get_letter_on+0xdc>
            x += style->text.letter_space;
 80174e0:	f8b9 0028 	ldrh.w	r0, [r9, #40]	; 0x28
            i_current = i;
 80174e4:	9d09      	ldr	r5, [sp, #36]	; 0x24
            x += style->text.letter_space;
 80174e6:	4404      	add	r4, r0
 80174e8:	b224      	sxth	r4, r4
 80174ea:	e7a9      	b.n	8017440 <lv_label_get_letter_on+0xb4>
 80174ec:	20001cb4 	.word	0x20001cb4
 80174f0:	20001cbc 	.word	0x20001cbc

080174f4 <lv_label_refr_text>:
{
 80174f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174f8:	b093      	sub	sp, #76	; 0x4c
 80174fa:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 80174fc:	f7f8 f87b 	bl	800f5f6 <lv_obj_get_ext_attr>
    if(ext->text == NULL) return;
 8017500:	6803      	ldr	r3, [r0, #0]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8017502:	4604      	mov	r4, r0
    if(ext->text == NULL) return;
 8017504:	b393      	cbz	r3, 801756c <lv_label_refr_text+0x78>
    ext->hint.line_start = -1; /*The hint is invalid if the text changes*/
 8017506:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801750a:	6103      	str	r3, [r0, #16]
    lv_coord_t max_w         = lv_obj_get_width(label);
 801750c:	4628      	mov	r0, r5
 801750e:	f7f7 ff75 	bl	800f3fc <lv_obj_get_width>
 8017512:	4607      	mov	r7, r0
    const lv_style_t * style = lv_obj_get_style(label);
 8017514:	4628      	mov	r0, r5
 8017516:	f7f7 ff83 	bl	800f420 <lv_obj_get_style>
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) {
 801751a:	7fa3      	ldrb	r3, [r4, #30]
    const lv_font_t * font   = style->text.font;
 801751c:	6a46      	ldr	r6, [r0, #36]	; 0x24
        max_w = LV_COORD_MAX;
 801751e:	f013 0f07 	tst.w	r3, #7
 8017522:	f647 4218 	movw	r2, #31768	; 0x7c18
 8017526:	bf08      	it	eq
 8017528:	4617      	moveq	r7, r2
    lv_txt_flag_t flag = LV_TXT_FLAG_NONE;
 801752a:	f3c3 1280 	ubfx	r2, r3, #6, #1
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 801752e:	061b      	lsls	r3, r3, #24
 8017530:	bf48      	it	mi
 8017532:	f042 0202 	orrmi.w	r2, r2, #2
    lv_txt_get_size(&size, ext->text, font, style->text.letter_space, style->text.line_space, max_w, flag);
 8017536:	f9b0 3028 	ldrsh.w	r3, [r0, #40]	; 0x28
 801753a:	9202      	str	r2, [sp, #8]
 801753c:	9701      	str	r7, [sp, #4]
 801753e:	f9b0 202a 	ldrsh.w	r2, [r0, #42]	; 0x2a
 8017542:	9200      	str	r2, [sp, #0]
    const lv_style_t * style = lv_obj_get_style(label);
 8017544:	4680      	mov	r8, r0
    lv_txt_get_size(&size, ext->text, font, style->text.letter_space, style->text.line_space, max_w, flag);
 8017546:	4632      	mov	r2, r6
 8017548:	6821      	ldr	r1, [r4, #0]
 801754a:	a806      	add	r0, sp, #24
 801754c:	f7fd fb5a 	bl	8014c04 <lv_txt_get_size>
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) {
 8017550:	7fa3      	ldrb	r3, [r4, #30]
 8017552:	f013 0307 	ands.w	r3, r3, #7
 8017556:	d10c      	bne.n	8017572 <lv_label_refr_text+0x7e>
        lv_obj_set_size(label, size.x, size.y);
 8017558:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
 801755c:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 8017560:	4628      	mov	r0, r5
 8017562:	f7f7 fe2d 	bl	800f1c0 <lv_obj_set_size>
    lv_obj_invalidate(label);
 8017566:	4628      	mov	r0, r5
 8017568:	f7f7 f9c8 	bl	800e8fc <lv_obj_invalidate>
}
 801756c:	b013      	add	sp, #76	; 0x4c
 801756e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(ext->long_mode == LV_LABEL_LONG_SROLL) {
 8017572:	2b03      	cmp	r3, #3
 8017574:	d166      	bne.n	8017644 <lv_label_refr_text+0x150>
        anim.repeat   = 1;
 8017576:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
        anim.var      = label;
 801757a:	9508      	str	r5, [sp, #32]
        anim.playback = 1;
 801757c:	f043 0303 	orr.w	r3, r3, #3
 8017580:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
            (((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 8017584:	2220      	movs	r2, #32
        anim.path_cb  = lv_anim_path_linear;
 8017586:	4b9f      	ldr	r3, [pc, #636]	; (8017804 <lv_label_refr_text+0x310>)
            (((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 8017588:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
        anim.path_cb  = lv_anim_path_linear;
 801758c:	930a      	str	r3, [sp, #40]	; 0x28
        anim.start    = 0;
 801758e:	2700      	movs	r7, #0
            (((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 8017590:	4611      	mov	r1, r2
        anim.start    = 0;
 8017592:	970c      	str	r7, [sp, #48]	; 0x30
        anim.ready_cb = NULL;
 8017594:	970b      	str	r7, [sp, #44]	; 0x2c
            (((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 8017596:	f7fc f9b1 	bl	80138fc <lv_font_get_glyph_width>
 801759a:	f9b8 3028 	ldrsh.w	r3, [r8, #40]	; 0x28
        if(size.x > lv_obj_get_width(label)) {
 801759e:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
            (((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 80175a2:	4418      	add	r0, r3
 80175a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80175a8:	4343      	muls	r3, r0
             ext->anim_speed) *
 80175aa:	8ba0      	ldrh	r0, [r4, #28]
            (((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 80175ac:	fb93 f3f0 	sdiv	r3, r3, r0
        anim.playback_pause =
 80175b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80175b4:	b29b      	uxth	r3, r3
 80175b6:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
        anim.repeat_pause = anim.playback_pause;
 80175ba:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
        if(size.x > lv_obj_get_width(label)) {
 80175be:	4628      	mov	r0, r5
        anim.act_time     = -anim.playback_pause;
 80175c0:	425b      	negs	r3, r3
 80175c2:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
        if(size.x > lv_obj_get_width(label)) {
 80175c6:	f7f7 ff19 	bl	800f3fc <lv_obj_get_width>
 80175ca:	4580      	cmp	r8, r0
 80175cc:	dd34      	ble.n	8017638 <lv_label_refr_text+0x144>
            anim.end     = lv_obj_get_width(label) - size.x;
 80175ce:	4628      	mov	r0, r5
 80175d0:	f7f7 ff14 	bl	800f3fc <lv_obj_get_width>
 80175d4:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_x;
 80175d8:	4b8b      	ldr	r3, [pc, #556]	; (8017808 <lv_label_refr_text+0x314>)
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 80175da:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_x;
 80175de:	9309      	str	r3, [sp, #36]	; 0x24
            anim.end     = lv_obj_get_width(label) - size.x;
 80175e0:	1a82      	subs	r2, r0, r2
 80175e2:	920d      	str	r2, [sp, #52]	; 0x34
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 80175e4:	8ba0      	ldrh	r0, [r4, #28]
 80175e6:	b212      	sxth	r2, r2
 80175e8:	f7fc fcc0 	bl	8013f6c <lv_anim_speed_to_time>
 80175ec:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
            lv_anim_create(&anim);
 80175f0:	a808      	add	r0, sp, #32
 80175f2:	f7fc fc91 	bl	8013f18 <lv_anim_create>
            hor_anim = true;
 80175f6:	2701      	movs	r7, #1
        if(size.y > lv_obj_get_height(label) && hor_anim == false) {
 80175f8:	4628      	mov	r0, r5
 80175fa:	f9bd 801a 	ldrsh.w	r8, [sp, #26]
 80175fe:	f7f7 ff03 	bl	800f408 <lv_obj_get_height>
 8017602:	4580      	cmp	r8, r0
 8017604:	dd78      	ble.n	80176f8 <lv_label_refr_text+0x204>
 8017606:	2f00      	cmp	r7, #0
 8017608:	d176      	bne.n	80176f8 <lv_label_refr_text+0x204>
            anim.end     = lv_obj_get_height(label) - size.y - (lv_font_get_line_height(font));
 801760a:	4628      	mov	r0, r5
 801760c:	f7f7 fefc 	bl	800f408 <lv_obj_get_height>
 8017610:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
 8017614:	1a82      	subs	r2, r0, r2
 8017616:	7a30      	ldrb	r0, [r6, #8]
 8017618:	1a12      	subs	r2, r2, r0
            anim.end     = -size.y - (lv_font_get_line_height(font));
 801761a:	920d      	str	r2, [sp, #52]	; 0x34
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_y;
 801761c:	4b7b      	ldr	r3, [pc, #492]	; (801780c <lv_label_refr_text+0x318>)
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 801761e:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8017622:	8ba0      	ldrh	r0, [r4, #28]
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_y;
 8017624:	9309      	str	r3, [sp, #36]	; 0x24
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 8017626:	b212      	sxth	r2, r2
 8017628:	f7fc fca0 	bl	8013f6c <lv_anim_speed_to_time>
 801762c:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
            lv_anim_create(&anim);
 8017630:	a808      	add	r0, sp, #32
 8017632:	f7fc fc71 	bl	8013f18 <lv_anim_create>
 8017636:	e796      	b.n	8017566 <lv_label_refr_text+0x72>
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
 8017638:	4973      	ldr	r1, [pc, #460]	; (8017808 <lv_label_refr_text+0x314>)
 801763a:	4628      	mov	r0, r5
 801763c:	f7fc fc3e 	bl	8013ebc <lv_anim_del>
            ext->offset.x = 0;
 8017640:	8167      	strh	r7, [r4, #10]
 8017642:	e7d9      	b.n	80175f8 <lv_label_refr_text+0x104>
    else if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) {
 8017644:	2b04      	cmp	r3, #4
 8017646:	d15e      	bne.n	8017706 <lv_label_refr_text+0x212>
        anim.repeat   = 1;
 8017648:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
        anim.var      = label;
 801764c:	9508      	str	r5, [sp, #32]
        anim.playback = 0;
 801764e:	f043 0302 	orr.w	r3, r3, #2
 8017652:	f36f 0300 	bfc	r3, #0, #1
 8017656:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
        anim.act_time = -(((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 801765a:	2220      	movs	r2, #32
        anim.start    = 0;
 801765c:	2700      	movs	r7, #0
        anim.act_time = -(((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 801765e:	4611      	mov	r1, r2
 8017660:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
        anim.start    = 0;
 8017664:	970c      	str	r7, [sp, #48]	; 0x30
        anim.act_time = -(((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 8017666:	f7fc f949 	bl	80138fc <lv_font_get_glyph_width>
 801766a:	f9b8 3028 	ldrsh.w	r3, [r8, #40]	; 0x28
        if(size.x > lv_obj_get_width(label)) {
 801766e:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
        anim.act_time = -(((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 8017672:	4403      	add	r3, r0
 8017674:	4866      	ldr	r0, [pc, #408]	; (8017810 <lv_label_refr_text+0x31c>)
 8017676:	4358      	muls	r0, r3
                          ext->anim_speed) *
 8017678:	8ba3      	ldrh	r3, [r4, #28]
        anim.act_time = -(((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 801767a:	fb90 f0f3 	sdiv	r0, r0, r3
 801767e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8017682:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
        anim.path_cb        = lv_anim_path_linear;
 8017686:	4b5f      	ldr	r3, [pc, #380]	; (8017804 <lv_label_refr_text+0x310>)
        anim.ready_cb       = NULL;
 8017688:	970b      	str	r7, [sp, #44]	; 0x2c
        if(size.x > lv_obj_get_width(label)) {
 801768a:	4628      	mov	r0, r5
        anim.path_cb        = lv_anim_path_linear;
 801768c:	930a      	str	r3, [sp, #40]	; 0x28
        anim.playback_pause = 0;
 801768e:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
        anim.repeat_pause   = 0;
 8017692:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
        if(size.x > lv_obj_get_width(label)) {
 8017696:	f7f7 feb1 	bl	800f3fc <lv_obj_get_width>
 801769a:	4580      	cmp	r8, r0
 801769c:	dd26      	ble.n	80176ec <lv_label_refr_text+0x1f8>
            anim.end     = -size.x - lv_font_get_glyph_width(font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 801769e:	2220      	movs	r2, #32
 80176a0:	4611      	mov	r1, r2
 80176a2:	4630      	mov	r0, r6
 80176a4:	f7fc f92a 	bl	80138fc <lv_font_get_glyph_width>
 80176a8:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_x;
 80176ac:	4b56      	ldr	r3, [pc, #344]	; (8017808 <lv_label_refr_text+0x314>)
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 80176ae:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_x;
 80176b2:	9309      	str	r3, [sp, #36]	; 0x24
            anim.end     = -size.x - lv_font_get_glyph_width(font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 80176b4:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
 80176b8:	1a82      	subs	r2, r0, r2
 80176ba:	920d      	str	r2, [sp, #52]	; 0x34
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 80176bc:	8ba0      	ldrh	r0, [r4, #28]
 80176be:	b212      	sxth	r2, r2
 80176c0:	f7fc fc54 	bl	8013f6c <lv_anim_speed_to_time>
 80176c4:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
            lv_anim_create(&anim);
 80176c8:	a808      	add	r0, sp, #32
 80176ca:	f7fc fc25 	bl	8013f18 <lv_anim_create>
            hor_anim = true;
 80176ce:	2701      	movs	r7, #1
        if(size.y > lv_obj_get_height(label) && hor_anim == false) {
 80176d0:	4628      	mov	r0, r5
 80176d2:	f9bd 801a 	ldrsh.w	r8, [sp, #26]
 80176d6:	f7f7 fe97 	bl	800f408 <lv_obj_get_height>
 80176da:	4580      	cmp	r8, r0
 80176dc:	dd0c      	ble.n	80176f8 <lv_label_refr_text+0x204>
 80176de:	b95f      	cbnz	r7, 80176f8 <lv_label_refr_text+0x204>
            anim.end     = -size.y - (lv_font_get_line_height(font));
 80176e0:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
 80176e4:	7a33      	ldrb	r3, [r6, #8]
 80176e6:	4252      	negs	r2, r2
 80176e8:	1ad2      	subs	r2, r2, r3
 80176ea:	e796      	b.n	801761a <lv_label_refr_text+0x126>
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
 80176ec:	4946      	ldr	r1, [pc, #280]	; (8017808 <lv_label_refr_text+0x314>)
 80176ee:	4628      	mov	r0, r5
 80176f0:	f7fc fbe4 	bl	8013ebc <lv_anim_del>
            ext->offset.x = 0;
 80176f4:	8167      	strh	r7, [r4, #10]
 80176f6:	e7eb      	b.n	80176d0 <lv_label_refr_text+0x1dc>
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
 80176f8:	4944      	ldr	r1, [pc, #272]	; (801780c <lv_label_refr_text+0x318>)
 80176fa:	4628      	mov	r0, r5
 80176fc:	f7fc fbde 	bl	8013ebc <lv_anim_del>
            ext->offset.y = 0;
 8017700:	2300      	movs	r3, #0
 8017702:	81a3      	strh	r3, [r4, #12]
 8017704:	e72f      	b.n	8017566 <lv_label_refr_text+0x72>
    } else if(ext->long_mode == LV_LABEL_LONG_DOT) {
 8017706:	2b02      	cmp	r3, #2
 8017708:	d172      	bne.n	80177f0 <lv_label_refr_text+0x2fc>
        if(size.y <= lv_obj_get_height(label)) { /*No dots are required, the text is short enough*/
 801770a:	4628      	mov	r0, r5
 801770c:	f9bd 601a 	ldrsh.w	r6, [sp, #26]
 8017710:	f7f7 fe7a 	bl	800f408 <lv_obj_get_height>
 8017714:	4286      	cmp	r6, r0
 8017716:	dc03      	bgt.n	8017720 <lv_label_refr_text+0x22c>
            ext->dot_end = LV_LABEL_DOT_END_INV;
 8017718:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801771c:	8123      	strh	r3, [r4, #8]
 801771e:	e722      	b.n	8017566 <lv_label_refr_text+0x72>
        } else if(lv_txt_get_encoded_length(ext->text) <= LV_LABEL_DOT_NUM) { /*Don't turn to dots all the characters*/
 8017720:	4b3c      	ldr	r3, [pc, #240]	; (8017814 <lv_label_refr_text+0x320>)
 8017722:	6820      	ldr	r0, [r4, #0]
 8017724:	681b      	ldr	r3, [r3, #0]
 8017726:	4798      	blx	r3
 8017728:	2803      	cmp	r0, #3
 801772a:	d9f5      	bls.n	8017718 <lv_label_refr_text+0x224>
            p.x = lv_obj_get_width(label) -
 801772c:	4628      	mov	r0, r5
 801772e:	f7f7 fe65 	bl	800f3fc <lv_obj_get_width>
                  (lv_font_get_glyph_width(style->text.font, '.', '.') + style->text.letter_space) *
 8017732:	222e      	movs	r2, #46	; 0x2e
 8017734:	4611      	mov	r1, r2
            p.x = lv_obj_get_width(label) -
 8017736:	4606      	mov	r6, r0
                  (lv_font_get_glyph_width(style->text.font, '.', '.') + style->text.letter_space) *
 8017738:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
                lv_txt_encoded_next(ext->text, &byte_id);
 801773c:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 8017820 <lv_label_refr_text+0x32c>
                  (lv_font_get_glyph_width(style->text.font, '.', '.') + style->text.letter_space) *
 8017740:	f7fc f8dc 	bl	80138fc <lv_font_get_glyph_width>
 8017744:	f9b8 3028 	ldrsh.w	r3, [r8, #40]	; 0x28
 8017748:	4418      	add	r0, r3
            p.x = lv_obj_get_width(label) -
 801774a:	ebc0 3380 	rsb	r3, r0, r0, lsl #14
 801774e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8017752:	4430      	add	r0, r6
 8017754:	f8ad 001c 	strh.w	r0, [sp, #28]
            p.y = lv_obj_get_height(label);
 8017758:	4628      	mov	r0, r5
 801775a:	f7f7 fe55 	bl	800f408 <lv_obj_get_height>
                   (lv_font_get_line_height(style->text.font) + style->text.line_space); /*Round down to the last line*/
 801775e:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8017762:	f9b8 102a 	ldrsh.w	r1, [r8, #42]	; 0x2a
 8017766:	7a1b      	ldrb	r3, [r3, #8]
 8017768:	440b      	add	r3, r1
            p.y -= p.y %
 801776a:	fb90 f2f3 	sdiv	r2, r0, r3
 801776e:	fb03 0312 	mls	r3, r3, r2, r0
 8017772:	1ac0      	subs	r0, r0, r3
            p.y -= style->text.line_space;                                               /*Trim the last line space*/
 8017774:	1a40      	subs	r0, r0, r1
 8017776:	f8ad 001e 	strh.w	r0, [sp, #30]
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
 801777a:	a907      	add	r1, sp, #28
 801777c:	4628      	mov	r0, r5
 801777e:	f7ff fe05 	bl	801738c <lv_label_get_letter_on>
            uint32_t byte_id     = lv_txt_encoded_get_byte_id(ext->text, letter_id);
 8017782:	4b25      	ldr	r3, [pc, #148]	; (8017818 <lv_label_refr_text+0x324>)
 8017784:	4601      	mov	r1, r0
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
 8017786:	4680      	mov	r8, r0
            uint32_t byte_id     = lv_txt_encoded_get_byte_id(ext->text, letter_id);
 8017788:	681b      	ldr	r3, [r3, #0]
 801778a:	6820      	ldr	r0, [r4, #0]
 801778c:	4798      	blx	r3
 801778e:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
                len += lv_txt_encoded_size(&ext->text[byte_id]);
 8017792:	4a22      	ldr	r2, [pc, #136]	; (801781c <lv_label_refr_text+0x328>)
            uint32_t byte_id     = lv_txt_encoded_get_byte_id(ext->text, letter_id);
 8017794:	f84b 0d28 	str.w	r0, [fp, #-40]!
 8017798:	4681      	mov	r9, r0
 801779a:	2604      	movs	r6, #4
            uint8_t len          = 0;
 801779c:	2700      	movs	r7, #0
                len += lv_txt_encoded_size(&ext->text[byte_id]);
 801779e:	9b08      	ldr	r3, [sp, #32]
 80177a0:	6820      	ldr	r0, [r4, #0]
 80177a2:	9205      	str	r2, [sp, #20]
 80177a4:	4418      	add	r0, r3
 80177a6:	6813      	ldr	r3, [r2, #0]
 80177a8:	4798      	blx	r3
                lv_txt_encoded_next(ext->text, &byte_id);
 80177aa:	4659      	mov	r1, fp
                len += lv_txt_encoded_size(&ext->text[byte_id]);
 80177ac:	4407      	add	r7, r0
                lv_txt_encoded_next(ext->text, &byte_id);
 80177ae:	f8da 3000 	ldr.w	r3, [sl]
 80177b2:	6820      	ldr	r0, [r4, #0]
 80177b4:	4798      	blx	r3
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
 80177b6:	3e01      	subs	r6, #1
                len += lv_txt_encoded_size(&ext->text[byte_id]);
 80177b8:	b2ff      	uxtb	r7, r7
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
 80177ba:	9a05      	ldr	r2, [sp, #20]
 80177bc:	d1ef      	bne.n	801779e <lv_label_refr_text+0x2aa>
            if(lv_label_set_dot_tmp(label, &ext->text[byte_id_ori], len)) {
 80177be:	6821      	ldr	r1, [r4, #0]
 80177c0:	463a      	mov	r2, r7
 80177c2:	4449      	add	r1, r9
 80177c4:	4628      	mov	r0, r5
 80177c6:	f7ff fc5f 	bl	8017088 <lv_label_set_dot_tmp>
 80177ca:	2800      	cmp	r0, #0
 80177cc:	f43f aecb 	beq.w	8017566 <lv_label_refr_text+0x72>
                    ext->text[byte_id_ori + i] = '.';
 80177d0:	222e      	movs	r2, #46	; 0x2e
 80177d2:	6823      	ldr	r3, [r4, #0]
 80177d4:	444b      	add	r3, r9
 80177d6:	559a      	strb	r2, [r3, r6]
                for(i = 0; i < LV_LABEL_DOT_NUM; i++) {
 80177d8:	3601      	adds	r6, #1
 80177da:	2e03      	cmp	r6, #3
 80177dc:	d1f9      	bne.n	80177d2 <lv_label_refr_text+0x2de>
                ext->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
 80177de:	6823      	ldr	r3, [r4, #0]
 80177e0:	444b      	add	r3, r9
 80177e2:	2200      	movs	r2, #0
                ext->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
 80177e4:	f108 0803 	add.w	r8, r8, #3
                ext->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
 80177e8:	70da      	strb	r2, [r3, #3]
                ext->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
 80177ea:	f8a4 8008 	strh.w	r8, [r4, #8]
 80177ee:	e6ba      	b.n	8017566 <lv_label_refr_text+0x72>
    else if(ext->long_mode == LV_LABEL_LONG_BREAK) {
 80177f0:	2b01      	cmp	r3, #1
 80177f2:	f47f aeb8 	bne.w	8017566 <lv_label_refr_text+0x72>
        lv_obj_set_height(label, size.y);
 80177f6:	f9bd 101a 	ldrsh.w	r1, [sp, #26]
 80177fa:	4628      	mov	r0, r5
 80177fc:	f7f7 fd31 	bl	800f262 <lv_obj_set_height>
 8017800:	e6b1      	b.n	8017566 <lv_label_refr_text+0x72>
 8017802:	bf00      	nop
 8017804:	08013d41 	.word	0x08013d41
 8017808:	08017073 	.word	0x08017073
 801780c:	0801705d 	.word	0x0801705d
 8017810:	fffffc18 	.word	0xfffffc18
 8017814:	20001cc8 	.word	0x20001cc8
 8017818:	20001cb8 	.word	0x20001cb8
 801781c:	20001cc4 	.word	0x20001cc4
 8017820:	20001cbc 	.word	0x20001cbc

08017824 <lv_label_signal>:
    res = ancestor_signal(label, sign, param);
 8017824:	4b38      	ldr	r3, [pc, #224]	; (8017908 <lv_label_signal+0xe4>)
{
 8017826:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    res = ancestor_signal(label, sign, param);
 801782a:	681b      	ldr	r3, [r3, #0]
{
 801782c:	4604      	mov	r4, r0
 801782e:	460f      	mov	r7, r1
 8017830:	4616      	mov	r6, r2
    res = ancestor_signal(label, sign, param);
 8017832:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8017834:	2801      	cmp	r0, #1
    res = ancestor_signal(label, sign, param);
 8017836:	4605      	mov	r5, r0
    if(res != LV_RES_OK) return res;
 8017838:	d110      	bne.n	801785c <lv_label_signal+0x38>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801783a:	4620      	mov	r0, r4
 801783c:	f7f7 fedb 	bl	800f5f6 <lv_obj_get_ext_attr>
 8017840:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_CLEANUP) {
 8017842:	b977      	cbnz	r7, 8017862 <lv_label_signal+0x3e>
        if(ext->static_txt == 0) {
 8017844:	7f83      	ldrb	r3, [r0, #30]
 8017846:	f013 0608 	ands.w	r6, r3, #8
 801784a:	d104      	bne.n	8017856 <lv_label_signal+0x32>
            lv_mem_free(ext->text);
 801784c:	6800      	ldr	r0, [r0, #0]
 801784e:	f7fc fe51 	bl	80144f4 <lv_mem_free>
            ext->text = NULL;
 8017852:	f8c8 6000 	str.w	r6, [r8]
        lv_label_dot_tmp_free(label);
 8017856:	4620      	mov	r0, r4
 8017858:	f7ff fbb6 	bl	8016fc8 <lv_label_dot_tmp_free>
}
 801785c:	4628      	mov	r0, r5
 801785e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 8017862:	2f04      	cmp	r7, #4
 8017864:	d106      	bne.n	8017874 <lv_label_signal+0x50>
        lv_label_revert_dots(label);
 8017866:	4620      	mov	r0, r4
 8017868:	f7ff fbc0 	bl	8016fec <lv_label_revert_dots>
        lv_label_refr_text(label);
 801786c:	4620      	mov	r0, r4
 801786e:	f7ff fe41 	bl	80174f4 <lv_label_refr_text>
 8017872:	e7f3      	b.n	801785c <lv_label_signal+0x38>
    } else if(sign == LV_SIGNAL_CORD_CHG) {
 8017874:	2f02      	cmp	r7, #2
 8017876:	d118      	bne.n	80178aa <lv_label_signal+0x86>
    return area_p->x2 - area_p->x1 + 1;
 8017878:	8aa2      	ldrh	r2, [r4, #20]
 801787a:	8a23      	ldrh	r3, [r4, #16]
 801787c:	8831      	ldrh	r1, [r6, #0]
 801787e:	3201      	adds	r2, #1
 8017880:	1ad2      	subs	r2, r2, r3
 8017882:	88b3      	ldrh	r3, [r6, #4]
 8017884:	3301      	adds	r3, #1
 8017886:	1a5b      	subs	r3, r3, r1
        if(lv_area_get_width(&label->coords) != lv_area_get_width(param) ||
 8017888:	b292      	uxth	r2, r2
 801788a:	b29b      	uxth	r3, r3
 801788c:	429a      	cmp	r2, r3
 801788e:	d1ea      	bne.n	8017866 <lv_label_signal+0x42>
    return area_p->y2 - area_p->y1 + 1;
 8017890:	8ae2      	ldrh	r2, [r4, #22]
 8017892:	8a63      	ldrh	r3, [r4, #18]
 8017894:	8871      	ldrh	r1, [r6, #2]
 8017896:	3201      	adds	r2, #1
 8017898:	1ad2      	subs	r2, r2, r3
 801789a:	88f3      	ldrh	r3, [r6, #6]
 801789c:	3301      	adds	r3, #1
 801789e:	1a5b      	subs	r3, r3, r1
 80178a0:	b292      	uxth	r2, r2
 80178a2:	b29b      	uxth	r3, r3
 80178a4:	429a      	cmp	r2, r3
 80178a6:	d1de      	bne.n	8017866 <lv_label_signal+0x42>
 80178a8:	e7d8      	b.n	801785c <lv_label_signal+0x38>
    } else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 80178aa:	2f05      	cmp	r7, #5
 80178ac:	d11d      	bne.n	80178ea <lv_label_signal+0xc6>
        if(ext->body_draw) {
 80178ae:	7fc3      	ldrb	r3, [r0, #31]
 80178b0:	07db      	lsls	r3, r3, #31
 80178b2:	d5d3      	bpl.n	801785c <lv_label_signal+0x38>
 * @return pointer to the label's style
 */
static inline const lv_style_t * lv_label_get_style(const lv_obj_t * label, lv_label_style_t type)
{
    (void)type; /*Unused*/
    return lv_obj_get_style(label);
 80178b4:	4620      	mov	r0, r4
 80178b6:	f7f7 fdb3 	bl	800f420 <lv_obj_get_style>
            label->ext_draw_pad = LV_MATH_MAX(label->ext_draw_pad, style->body.padding.right);
 80178ba:	f9b0 301a 	ldrsh.w	r3, [r0, #26]
 80178be:	f9b0 201c 	ldrsh.w	r2, [r0, #28]
 80178c2:	4293      	cmp	r3, r2
 80178c4:	bfb8      	it	lt
 80178c6:	4613      	movlt	r3, r2
 80178c8:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
            label->ext_draw_pad = LV_MATH_MAX(label->ext_draw_pad, style->body.padding.top);
 80178cc:	4293      	cmp	r3, r2
 80178ce:	bfb8      	it	lt
 80178d0:	4613      	movlt	r3, r2
 80178d2:	f9b0 2016 	ldrsh.w	r2, [r0, #22]
            label->ext_draw_pad = LV_MATH_MAX(label->ext_draw_pad, style->body.padding.bottom);
 80178d6:	4293      	cmp	r3, r2
 80178d8:	bfb8      	it	lt
 80178da:	4613      	movlt	r3, r2
 80178dc:	f9b0 2018 	ldrsh.w	r2, [r0, #24]
 80178e0:	4293      	cmp	r3, r2
 80178e2:	bfb8      	it	lt
 80178e4:	4613      	movlt	r3, r2
 80178e6:	86a3      	strh	r3, [r4, #52]	; 0x34
 80178e8:	e7b8      	b.n	801785c <lv_label_signal+0x38>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 80178ea:	2f06      	cmp	r7, #6
 80178ec:	d1b6      	bne.n	801785c <lv_label_signal+0x38>
 80178ee:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 80178f0:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80178f4:	b2da      	uxtb	r2, r3
 80178f6:	b119      	cbz	r1, 8017900 <lv_label_signal+0xdc>
 80178f8:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 80178fa:	2b07      	cmp	r3, #7
 80178fc:	d1f8      	bne.n	80178f0 <lv_label_signal+0xcc>
 80178fe:	461a      	mov	r2, r3
        buf->type[i] = "lv_label";
 8017900:	4b02      	ldr	r3, [pc, #8]	; (801790c <lv_label_signal+0xe8>)
 8017902:	f846 3022 	str.w	r3, [r6, r2, lsl #2]
 8017906:	e7a9      	b.n	801785c <lv_label_signal+0x38>
 8017908:	2000b054 	.word	0x2000b054
 801790c:	080ec413 	.word	0x080ec413

08017910 <lv_label_set_text>:
{
 8017910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017914:	4680      	mov	r8, r0
 8017916:	460d      	mov	r5, r1
    lv_obj_invalidate(label);
 8017918:	f7f6 fff0 	bl	800e8fc <lv_obj_invalidate>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801791c:	4640      	mov	r0, r8
 801791e:	f7f7 fe6a 	bl	800f5f6 <lv_obj_get_ext_attr>
 8017922:	4604      	mov	r4, r0
    if(text == NULL) {
 8017924:	b925      	cbnz	r5, 8017930 <lv_label_set_text+0x20>
        lv_label_refr_text(label);
 8017926:	4640      	mov	r0, r8
}
 8017928:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        lv_label_refr_text(label);
 801792c:	f7ff bde2 	b.w	80174f4 <lv_label_refr_text>
    if(ext->text == text) {
 8017930:	6807      	ldr	r7, [r0, #0]
 8017932:	42bd      	cmp	r5, r7
        ext->text = lv_mem_realloc(ext->text, strlen(ext->text) + 1);
 8017934:	4628      	mov	r0, r5
    if(ext->text == text) {
 8017936:	d109      	bne.n	801794c <lv_label_set_text+0x3c>
        ext->text = lv_mem_realloc(ext->text, strlen(ext->text) + 1);
 8017938:	f7e8 fc4a 	bl	80001d0 <strlen>
 801793c:	1c41      	adds	r1, r0, #1
 801793e:	4628      	mov	r0, r5
 8017940:	f7fc fe02 	bl	8014548 <lv_mem_realloc>
 8017944:	6020      	str	r0, [r4, #0]
        lv_mem_assert(ext->text);
 8017946:	2800      	cmp	r0, #0
 8017948:	d1ed      	bne.n	8017926 <lv_label_set_text+0x16>
 801794a:	e7fe      	b.n	801794a <lv_label_set_text+0x3a>
        uint32_t len = strlen(text) + 1;
 801794c:	f7e8 fc40 	bl	80001d0 <strlen>
 8017950:	f100 0901 	add.w	r9, r0, #1
        if(ext->text != NULL && ext->static_txt == 0) {
 8017954:	b13f      	cbz	r7, 8017966 <lv_label_set_text+0x56>
 8017956:	7fa3      	ldrb	r3, [r4, #30]
 8017958:	f013 0608 	ands.w	r6, r3, #8
 801795c:	d103      	bne.n	8017966 <lv_label_set_text+0x56>
            lv_mem_free(ext->text);
 801795e:	4638      	mov	r0, r7
 8017960:	f7fc fdc8 	bl	80144f4 <lv_mem_free>
            ext->text = NULL;
 8017964:	6026      	str	r6, [r4, #0]
        ext->text = lv_mem_alloc(len);
 8017966:	4648      	mov	r0, r9
 8017968:	f7fc fd8e 	bl	8014488 <lv_mem_alloc>
 801796c:	6020      	str	r0, [r4, #0]
        lv_mem_assert(ext->text);
 801796e:	b900      	cbnz	r0, 8017972 <lv_label_set_text+0x62>
 8017970:	e7fe      	b.n	8017970 <lv_label_set_text+0x60>
        strcpy(ext->text, text);
 8017972:	4629      	mov	r1, r5
 8017974:	f002 f8f6 	bl	8019b64 <strcpy>
        ext->static_txt = 0; /*Now the text is dynamically allocated*/
 8017978:	7fa3      	ldrb	r3, [r4, #30]
 801797a:	f36f 03c3 	bfc	r3, #3, #1
 801797e:	77a3      	strb	r3, [r4, #30]
 8017980:	e7d1      	b.n	8017926 <lv_label_set_text+0x16>

08017982 <lv_label_set_static_text>:
{
 8017982:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017984:	4607      	mov	r7, r0
 8017986:	460e      	mov	r6, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8017988:	f7f7 fe35 	bl	800f5f6 <lv_obj_get_ext_attr>
    if(ext->static_txt == 0 && ext->text != NULL) {
 801798c:	7f83      	ldrb	r3, [r0, #30]
 801798e:	f013 0508 	ands.w	r5, r3, #8
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8017992:	4604      	mov	r4, r0
    if(ext->static_txt == 0 && ext->text != NULL) {
 8017994:	d104      	bne.n	80179a0 <lv_label_set_static_text+0x1e>
 8017996:	6800      	ldr	r0, [r0, #0]
 8017998:	b110      	cbz	r0, 80179a0 <lv_label_set_static_text+0x1e>
        lv_mem_free(ext->text);
 801799a:	f7fc fdab 	bl	80144f4 <lv_mem_free>
        ext->text = NULL;
 801799e:	6025      	str	r5, [r4, #0]
    if(text != NULL) {
 80179a0:	b126      	cbz	r6, 80179ac <lv_label_set_static_text+0x2a>
        ext->static_txt = 1;
 80179a2:	7fa3      	ldrb	r3, [r4, #30]
        ext->text       = (char *)text;
 80179a4:	6026      	str	r6, [r4, #0]
        ext->static_txt = 1;
 80179a6:	f043 0308 	orr.w	r3, r3, #8
 80179aa:	77a3      	strb	r3, [r4, #30]
    lv_label_refr_text(label);
 80179ac:	4638      	mov	r0, r7
}
 80179ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_label_refr_text(label);
 80179b2:	f7ff bd9f 	b.w	80174f4 <lv_label_refr_text>
	...

080179b8 <lv_label_set_long_mode>:
{
 80179b8:	b570      	push	{r4, r5, r6, lr}
 80179ba:	4605      	mov	r5, r0
 80179bc:	460e      	mov	r6, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 80179be:	f7f7 fe1a 	bl	800f5f6 <lv_obj_get_ext_attr>
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_obj_set_x);
 80179c2:	491a      	ldr	r1, [pc, #104]	; (8017a2c <lv_label_set_long_mode+0x74>)
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 80179c4:	4604      	mov	r4, r0
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_obj_set_x);
 80179c6:	4628      	mov	r0, r5
 80179c8:	f7fc fa78 	bl	8013ebc <lv_anim_del>
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_obj_set_y);
 80179cc:	4918      	ldr	r1, [pc, #96]	; (8017a30 <lv_label_set_long_mode+0x78>)
 80179ce:	4628      	mov	r0, r5
 80179d0:	f7fc fa74 	bl	8013ebc <lv_anim_del>
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
 80179d4:	4917      	ldr	r1, [pc, #92]	; (8017a34 <lv_label_set_long_mode+0x7c>)
 80179d6:	4628      	mov	r0, r5
 80179d8:	f7fc fa70 	bl	8013ebc <lv_anim_del>
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
 80179dc:	4916      	ldr	r1, [pc, #88]	; (8017a38 <lv_label_set_long_mode+0x80>)
 80179de:	4628      	mov	r0, r5
 80179e0:	f7fc fa6c 	bl	8013ebc <lv_anim_del>
    if(long_mode == LV_LABEL_LONG_SROLL || long_mode == LV_LABEL_LONG_SROLL_CIRC || long_mode == LV_LABEL_LONG_CROP)
 80179e4:	1ef3      	subs	r3, r6, #3
 80179e6:	2b02      	cmp	r3, #2
 80179e8:	7fa3      	ldrb	r3, [r4, #30]
    ext->offset.x = 0;
 80179ea:	f04f 0200 	mov.w	r2, #0
        ext->expand = 1;
 80179ee:	bf94      	ite	ls
 80179f0:	f043 0380 	orrls.w	r3, r3, #128	; 0x80
        ext->expand = 0;
 80179f4:	f362 13c7 	bfihi	r3, r2, #7, #1
 80179f8:	77a3      	strb	r3, [r4, #30]
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
 80179fa:	7fa3      	ldrb	r3, [r4, #30]
    ext->offset.x = 0;
 80179fc:	8162      	strh	r2, [r4, #10]
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
 80179fe:	f003 0307 	and.w	r3, r3, #7
 8017a02:	2b02      	cmp	r3, #2
    ext->offset.y = 0;
 8017a04:	81a2      	strh	r2, [r4, #12]
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
 8017a06:	d107      	bne.n	8017a18 <lv_label_set_long_mode+0x60>
 8017a08:	8922      	ldrh	r2, [r4, #8]
 8017a0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017a0e:	429a      	cmp	r2, r3
 8017a10:	d002      	beq.n	8017a18 <lv_label_set_long_mode+0x60>
        lv_label_revert_dots(label);
 8017a12:	4628      	mov	r0, r5
 8017a14:	f7ff faea 	bl	8016fec <lv_label_revert_dots>
    ext->long_mode = long_mode;
 8017a18:	7fa3      	ldrb	r3, [r4, #30]
 8017a1a:	f366 0302 	bfi	r3, r6, #0, #3
 8017a1e:	77a3      	strb	r3, [r4, #30]
    lv_label_refr_text(label);
 8017a20:	4628      	mov	r0, r5
}
 8017a22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_label_refr_text(label);
 8017a26:	f7ff bd65 	b.w	80174f4 <lv_label_refr_text>
 8017a2a:	bf00      	nop
 8017a2c:	0800ea5d 	.word	0x0800ea5d
 8017a30:	0800ea71 	.word	0x0800ea71
 8017a34:	08017073 	.word	0x08017073
 8017a38:	0801705d 	.word	0x0801705d

08017a3c <lv_label_set_recolor>:
{
 8017a3c:	b538      	push	{r3, r4, r5, lr}
 8017a3e:	460c      	mov	r4, r1
 8017a40:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8017a42:	f7f7 fdd8 	bl	800f5f6 <lv_obj_get_ext_attr>
    if(ext->recolor == en) return;
 8017a46:	7f83      	ldrb	r3, [r0, #30]
 8017a48:	f3c3 1280 	ubfx	r2, r3, #6, #1
 8017a4c:	42a2      	cmp	r2, r4
 8017a4e:	d007      	beq.n	8017a60 <lv_label_set_recolor+0x24>
    ext->recolor = en == false ? 0 : 1;
 8017a50:	f364 1386 	bfi	r3, r4, #6, #1
 8017a54:	7783      	strb	r3, [r0, #30]
    lv_label_refr_text(label); /*Refresh the text because the potential colo codes in text needs to
 8017a56:	4628      	mov	r0, r5
}
 8017a58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_label_refr_text(label); /*Refresh the text because the potential colo codes in text needs to
 8017a5c:	f7ff bd4a 	b.w	80174f4 <lv_label_refr_text>
 8017a60:	bd38      	pop	{r3, r4, r5, pc}
	...

08017a64 <lv_label_create>:
{
 8017a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a68:	460e      	mov	r6, r1
    lv_obj_t * new_label = lv_obj_create(par, copy);
 8017a6a:	f7f7 fa2b 	bl	800eec4 <lv_obj_create>
    lv_mem_assert(new_label);
 8017a6e:	4605      	mov	r5, r0
 8017a70:	b900      	cbnz	r0, 8017a74 <lv_label_create+0x10>
 8017a72:	e7fe      	b.n	8017a72 <lv_label_create+0xe>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_label);
 8017a74:	4c57      	ldr	r4, [pc, #348]	; (8017bd4 <lv_label_create+0x170>)
 8017a76:	6823      	ldr	r3, [r4, #0]
 8017a78:	b913      	cbnz	r3, 8017a80 <lv_label_create+0x1c>
 8017a7a:	f7f7 fdb8 	bl	800f5ee <lv_obj_get_signal_cb>
 8017a7e:	6020      	str	r0, [r4, #0]
    lv_obj_allocate_ext_attr(new_label, sizeof(lv_label_ext_t));
 8017a80:	2120      	movs	r1, #32
 8017a82:	4628      	mov	r0, r5
 8017a84:	f7f6 ff0c 	bl	800e8a0 <lv_obj_allocate_ext_attr>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(new_label);
 8017a88:	4628      	mov	r0, r5
 8017a8a:	f7f7 fdb4 	bl	800f5f6 <lv_obj_get_ext_attr>
    lv_mem_assert(ext);
 8017a8e:	4604      	mov	r4, r0
 8017a90:	b900      	cbnz	r0, 8017a94 <lv_label_create+0x30>
 8017a92:	e7fe      	b.n	8017a92 <lv_label_create+0x2e>
    ext->static_txt = 0;
 8017a94:	7f81      	ldrb	r1, [r0, #30]
    ext->body_draw  = 0;
 8017a96:	7fc2      	ldrb	r2, [r0, #31]
    ext->text       = NULL;
 8017a98:	2300      	movs	r3, #0
    ext->long_mode  = LV_LABEL_LONG_EXPAND;
 8017a9a:	f001 0187 	and.w	r1, r1, #135	; 0x87
 8017a9e:	f363 0102 	bfi	r1, r3, #0, #3
    ext->text       = NULL;
 8017aa2:	6003      	str	r3, [r0, #0]
    ext->dot_tmp_alloc = 0;
 8017aa4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    ext->long_mode  = LV_LABEL_LONG_EXPAND;
 8017aa8:	77a1      	strb	r1, [r4, #30]
    ext->anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 8017aaa:	2119      	movs	r1, #25
    ext->dot_end    = LV_LABEL_DOT_END_INV;
 8017aac:	f64f 70ff 	movw	r0, #65535	; 0xffff
    ext->anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 8017ab0:	83a1      	strh	r1, [r4, #28]
    ext->dot_tmp_alloc = 0;
 8017ab2:	f363 0241 	bfi	r2, r3, #1, #1
    ext->hint.line_start = -1;
 8017ab6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ext->dot_end    = LV_LABEL_DOT_END_INV;
 8017aba:	8120      	strh	r0, [r4, #8]
    ext->hint.line_start = -1;
 8017abc:	6121      	str	r1, [r4, #16]
    lv_obj_set_design_cb(new_label, lv_label_design);
 8017abe:	4628      	mov	r0, r5
 8017ac0:	4945      	ldr	r1, [pc, #276]	; (8017bd8 <lv_label_create+0x174>)
    ext->offset.x = 0;
 8017ac2:	8163      	strh	r3, [r4, #10]
    ext->offset.y = 0;
 8017ac4:	81a3      	strh	r3, [r4, #12]
    ext->hint.coord_y    = 0;
 8017ac6:	61a3      	str	r3, [r4, #24]
    ext->hint.y          = 0;
 8017ac8:	6163      	str	r3, [r4, #20]
    ext->dot.tmp_ptr   = NULL;
 8017aca:	6063      	str	r3, [r4, #4]
    ext->dot_tmp_alloc = 0;
 8017acc:	77e2      	strb	r2, [r4, #31]
    lv_obj_set_design_cb(new_label, lv_label_design);
 8017ace:	f7f6 fee5 	bl	800e89c <lv_obj_set_design_cb>
    lv_obj_set_signal_cb(new_label, lv_label_signal);
 8017ad2:	4942      	ldr	r1, [pc, #264]	; (8017bdc <lv_label_create+0x178>)
 8017ad4:	4628      	mov	r0, r5
 8017ad6:	f7f6 fedf 	bl	800e898 <lv_obj_set_signal_cb>
    if(copy == NULL) {
 8017ada:	b996      	cbnz	r6, 8017b02 <lv_label_create+0x9e>
        lv_obj_set_click(new_label, false);
 8017adc:	4631      	mov	r1, r6
 8017ade:	4628      	mov	r0, r5
 8017ae0:	f7f6 fe06 	bl	800e6f0 <lv_obj_set_click>
        lv_label_set_long_mode(new_label, LV_LABEL_LONG_EXPAND);
 8017ae4:	4631      	mov	r1, r6
 8017ae6:	4628      	mov	r0, r5
 8017ae8:	f7ff ff66 	bl	80179b8 <lv_label_set_long_mode>
        lv_label_set_text(new_label, "Text");
 8017aec:	493c      	ldr	r1, [pc, #240]	; (8017be0 <lv_label_create+0x17c>)
 8017aee:	4628      	mov	r0, r5
 8017af0:	f7ff ff0e 	bl	8017910 <lv_label_set_text>
    lv_obj_set_style(label, style);
 8017af4:	4631      	mov	r1, r6
 8017af6:	4628      	mov	r0, r5
 8017af8:	f7f7 fc64 	bl	800f3c4 <lv_obj_set_style>
}
 8017afc:	4628      	mov	r0, r5
 8017afe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lv_label_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8017b02:	4630      	mov	r0, r6
 8017b04:	f7f7 fd77 	bl	800f5f6 <lv_obj_get_ext_attr>
 8017b08:	4607      	mov	r7, r0
        lv_label_set_long_mode(new_label, lv_label_get_long_mode(copy));
 8017b0a:	4630      	mov	r0, r6
 8017b0c:	f7ff fc21 	bl	8017352 <lv_label_get_long_mode>
 8017b10:	4601      	mov	r1, r0
 8017b12:	4628      	mov	r0, r5
 8017b14:	f7ff ff50 	bl	80179b8 <lv_label_set_long_mode>
        lv_label_set_recolor(new_label, lv_label_get_recolor(copy));
 8017b18:	4630      	mov	r0, r6
 8017b1a:	f7ff fc28 	bl	801736e <lv_label_get_recolor>
 8017b1e:	4601      	mov	r1, r0
 8017b20:	4628      	mov	r0, r5
 8017b22:	f7ff ff8b 	bl	8017a3c <lv_label_set_recolor>
        lv_label_set_body_draw(new_label, lv_label_get_body_draw(copy));
 8017b26:	4630      	mov	r0, r6
 8017b28:	f7ff fc28 	bl	801737c <lv_label_get_body_draw>
 8017b2c:	4601      	mov	r1, r0
 8017b2e:	4628      	mov	r0, r5
 8017b30:	f7ff fbf4 	bl	801731c <lv_label_set_body_draw>
        lv_label_set_align(new_label, lv_label_get_align(copy));
 8017b34:	4630      	mov	r0, r6
 8017b36:	f7ff fc13 	bl	8017360 <lv_label_get_align>
 8017b3a:	4601      	mov	r1, r0
 8017b3c:	4628      	mov	r0, r5
 8017b3e:	f7ff fbda 	bl	80172f6 <lv_label_set_align>
        if(copy_ext->static_txt == 0)
 8017b42:	7fbb      	ldrb	r3, [r7, #30]
 8017b44:	071a      	lsls	r2, r3, #28
            lv_label_set_text(new_label, lv_label_get_text(copy));
 8017b46:	4630      	mov	r0, r6
        if(copy_ext->static_txt == 0)
 8017b48:	d416      	bmi.n	8017b78 <lv_label_create+0x114>
            lv_label_set_text(new_label, lv_label_get_text(copy));
 8017b4a:	f7ff fbfd 	bl	8017348 <lv_label_get_text>
 8017b4e:	4601      	mov	r1, r0
 8017b50:	4628      	mov	r0, r5
 8017b52:	f7ff fedd 	bl	8017910 <lv_label_set_text>
        if(copy_ext->long_mode == LV_LABEL_LONG_DOT) {
 8017b56:	7fbb      	ldrb	r3, [r7, #30]
 8017b58:	f003 0307 	and.w	r3, r3, #7
 8017b5c:	2b02      	cmp	r3, #2
 8017b5e:	d11c      	bne.n	8017b9a <lv_label_create+0x136>
            ext->text = lv_mem_realloc(ext->text, lv_mem_get_size(copy_ext->text));
 8017b60:	6838      	ldr	r0, [r7, #0]
 8017b62:	6826      	ldr	r6, [r4, #0]
 8017b64:	f7fc fcb8 	bl	80144d8 <lv_mem_get_size>
 8017b68:	4601      	mov	r1, r0
 8017b6a:	4630      	mov	r0, r6
 8017b6c:	f7fc fcec 	bl	8014548 <lv_mem_realloc>
 8017b70:	4606      	mov	r6, r0
 8017b72:	6020      	str	r0, [r4, #0]
            lv_mem_assert(ext->text);
 8017b74:	b938      	cbnz	r0, 8017b86 <lv_label_create+0x122>
 8017b76:	e7fe      	b.n	8017b76 <lv_label_create+0x112>
            lv_label_set_static_text(new_label, lv_label_get_text(copy));
 8017b78:	f7ff fbe6 	bl	8017348 <lv_label_get_text>
 8017b7c:	4601      	mov	r1, r0
 8017b7e:	4628      	mov	r0, r5
 8017b80:	f7ff feff 	bl	8017982 <lv_label_set_static_text>
 8017b84:	e7e7      	b.n	8017b56 <lv_label_create+0xf2>
            memcpy(ext->text, copy_ext->text, lv_mem_get_size(copy_ext->text));
 8017b86:	f8d7 8000 	ldr.w	r8, [r7]
 8017b8a:	4640      	mov	r0, r8
 8017b8c:	f7fc fca4 	bl	80144d8 <lv_mem_get_size>
 8017b90:	4641      	mov	r1, r8
 8017b92:	4602      	mov	r2, r0
 8017b94:	4630      	mov	r0, r6
 8017b96:	f001 ff91 	bl	8019abc <memcpy>
        if(copy_ext->dot_tmp_alloc && copy_ext->dot.tmp_ptr) {
 8017b9a:	7ffb      	ldrb	r3, [r7, #31]
 8017b9c:	079b      	lsls	r3, r3, #30
 8017b9e:	d515      	bpl.n	8017bcc <lv_label_create+0x168>
 8017ba0:	6878      	ldr	r0, [r7, #4]
 8017ba2:	b198      	cbz	r0, 8017bcc <lv_label_create+0x168>
            int len = strlen(copy_ext->dot.tmp_ptr);
 8017ba4:	f7e8 fb14 	bl	80001d0 <strlen>
            lv_label_set_dot_tmp(new_label, ext->dot.tmp_ptr, len);
 8017ba8:	6861      	ldr	r1, [r4, #4]
 8017baa:	b282      	uxth	r2, r0
 8017bac:	4628      	mov	r0, r5
 8017bae:	f7ff fa6b 	bl	8017088 <lv_label_set_dot_tmp>
        ext->dot_tmp_alloc = copy_ext->dot_tmp_alloc;
 8017bb2:	7ffb      	ldrb	r3, [r7, #31]
 8017bb4:	7fe2      	ldrb	r2, [r4, #31]
 8017bb6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8017bba:	f363 0241 	bfi	r2, r3, #1, #1
 8017bbe:	77e2      	strb	r2, [r4, #31]
        ext->dot_end       = copy_ext->dot_end;
 8017bc0:	893b      	ldrh	r3, [r7, #8]
 8017bc2:	8123      	strh	r3, [r4, #8]
        lv_obj_refresh_style(new_label);
 8017bc4:	4628      	mov	r0, r5
 8017bc6:	f7f7 fb54 	bl	800f272 <lv_obj_refresh_style>
 8017bca:	e797      	b.n	8017afc <lv_label_create+0x98>
            memcpy(ext->dot.tmp, copy_ext->dot.tmp, sizeof(ext->dot.tmp));
 8017bcc:	687b      	ldr	r3, [r7, #4]
 8017bce:	6063      	str	r3, [r4, #4]
 8017bd0:	e7ef      	b.n	8017bb2 <lv_label_create+0x14e>
 8017bd2:	bf00      	nop
 8017bd4:	2000b054 	.word	0x2000b054
 8017bd8:	080170db 	.word	0x080170db
 8017bdc:	08017825 	.word	0x08017825
 8017be0:	080ec40e 	.word	0x080ec40e

08017be4 <lv_area_copy>:
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    memcpy(dest, src, sizeof(lv_area_t));
 8017be4:	4603      	mov	r3, r0
 8017be6:	6808      	ldr	r0, [r1, #0]
 8017be8:	6849      	ldr	r1, [r1, #4]
 8017bea:	c303      	stmia	r3!, {r0, r1}
 8017bec:	4770      	bx	lr

08017bee <scrl_def_event_cb>:
 * @param scrl pointer to the page's scrollable object
 * @param event type of the event
 * @param data data of the event
 */
static void scrl_def_event_cb(lv_obj_t * scrl, lv_event_t event)
{
 8017bee:	b538      	push	{r3, r4, r5, lr}
 8017bf0:	460c      	mov	r4, r1
    lv_obj_t * page = lv_obj_get_parent(scrl);
 8017bf2:	f7f7 fbc3 	bl	800f37c <lv_obj_get_parent>

    /*clang-format off*/
    if(event == LV_EVENT_PRESSED || event == LV_EVENT_PRESSING || event == LV_EVENT_PRESS_LOST ||
 8017bf6:	2c0a      	cmp	r4, #10
    lv_obj_t * page = lv_obj_get_parent(scrl);
 8017bf8:	4605      	mov	r5, r0
    if(event == LV_EVENT_PRESSED || event == LV_EVENT_PRESSING || event == LV_EVENT_PRESS_LOST ||
 8017bfa:	d808      	bhi.n	8017c0e <scrl_def_event_cb+0x20>
       event == LV_EVENT_RELEASED || event == LV_EVENT_SHORT_CLICKED || event == LV_EVENT_CLICKED ||
       event == LV_EVENT_LONG_PRESSED || event == LV_EVENT_LONG_PRESSED_REPEAT ||
       event == LV_EVENT_DRAG_BEGIN || event == LV_EVENT_DRAG_END || event == LV_EVENT_DRAG_THROW_BEGIN) {
        lv_event_send(page, event, lv_event_get_data());
 8017bfc:	f7f6 fe46 	bl	800e88c <lv_event_get_data>
 8017c00:	4621      	mov	r1, r4
 8017c02:	4602      	mov	r2, r0
 8017c04:	4628      	mov	r0, r5
    }
    /*clang-format on*/
}
 8017c06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_event_send(page, event, lv_event_get_data());
 8017c0a:	f7f6 bde1 	b.w	800e7d0 <lv_event_send>
 8017c0e:	bd38      	pop	{r3, r4, r5, pc}

08017c10 <lv_page_sb_refresh>:
/**
 * Refresh the position and size of the scroll bars.
 * @param page pointer to a page object
 */
static void lv_page_sb_refresh(lv_obj_t * page)
{
 8017c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c14:	b08b      	sub	sp, #44	; 0x2c
 8017c16:	4607      	mov	r7, r0
    lv_page_ext_t * ext      = lv_obj_get_ext_attr(page);
 8017c18:	f7f7 fced 	bl	800f5f6 <lv_obj_get_ext_attr>
 8017c1c:	4604      	mov	r4, r0
    const lv_style_t * style = lv_obj_get_style(page);
 8017c1e:	4638      	mov	r0, r7
 8017c20:	f7f7 fbfe 	bl	800f420 <lv_obj_get_style>
    lv_obj_t * scrl          = ext->scrl;
 8017c24:	6863      	ldr	r3, [r4, #4]
 8017c26:	9300      	str	r3, [sp, #0]
    const lv_style_t * style = lv_obj_get_style(page);
 8017c28:	4680      	mov	r8, r0
    lv_coord_t size_tmp;
    lv_coord_t scrl_w = lv_obj_get_width(scrl);
 8017c2a:	4618      	mov	r0, r3
 8017c2c:	f7f7 fbe6 	bl	800f3fc <lv_obj_get_width>
 8017c30:	9001      	str	r0, [sp, #4]
    lv_coord_t scrl_h = lv_obj_get_height(scrl);
 8017c32:	9800      	ldr	r0, [sp, #0]
 8017c34:	f7f7 fbe8 	bl	800f408 <lv_obj_get_height>
 8017c38:	9002      	str	r0, [sp, #8]
    lv_coord_t obj_w  = lv_obj_get_width(page);
 8017c3a:	4638      	mov	r0, r7
 8017c3c:	f7f7 fbde 	bl	800f3fc <lv_obj_get_width>
 8017c40:	4605      	mov	r5, r0
    lv_coord_t obj_h  = lv_obj_get_height(page);
 8017c42:	4638      	mov	r0, r7
 8017c44:	f7f7 fbe0 	bl	800f408 <lv_obj_get_height>
     * - horizontal and vertical scrollbars can overlap on the corners
     * - if the page has radius the scrollbar can be out of the radius  */
    lv_coord_t sb_hor_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.right);
    lv_coord_t sb_ver_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.bottom);

    if(ext->sb.mode == LV_SB_MODE_OFF) return;
 8017c48:	7f23      	ldrb	r3, [r4, #28]
 8017c4a:	f013 021c 	ands.w	r2, r3, #28
    lv_coord_t obj_h  = lv_obj_get_height(page);
 8017c4e:	4681      	mov	r9, r0
    if(ext->sb.mode == LV_SB_MODE_OFF) return;
 8017c50:	d066      	beq.n	8017d20 <lv_page_sb_refresh+0x110>
    lv_coord_t sb_hor_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.right);
 8017c52:	68a1      	ldr	r1, [r4, #8]
 8017c54:	f9b8 601c 	ldrsh.w	r6, [r8, #28]
 8017c58:	f9b1 101e 	ldrsh.w	r1, [r1, #30]
 8017c5c:	9104      	str	r1, [sp, #16]

    if(ext->sb.mode == LV_SB_MODE_ON) {
 8017c5e:	2a04      	cmp	r2, #4
        ext->sb.hor_draw = 1;
        ext->sb.ver_draw = 1;
 8017c60:	bf08      	it	eq
 8017c62:	f043 0303 	orreq.w	r3, r3, #3
    lv_coord_t sb_ver_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.bottom);
 8017c66:	f9b8 1018 	ldrsh.w	r1, [r8, #24]
        ext->sb.ver_draw = 1;
 8017c6a:	bf08      	it	eq
 8017c6c:	7723      	strbeq	r3, [r4, #28]
    }

    /*Invalidate the current (old) scrollbar areas*/
    lv_disp_t * disp = lv_obj_get_disp(page);
 8017c6e:	4638      	mov	r0, r7
    lv_coord_t sb_ver_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.bottom);
 8017c70:	9105      	str	r1, [sp, #20]
    lv_disp_t * disp = lv_obj_get_disp(page);
 8017c72:	f7f6 fe1d 	bl	800e8b0 <lv_obj_get_disp>
    lv_area_t sb_area_tmp;
    if(ext->sb.hor_draw != 0) {
 8017c76:	7f23      	ldrb	r3, [r4, #28]
    lv_disp_t * disp = lv_obj_get_disp(page);
 8017c78:	4683      	mov	fp, r0
    if(ext->sb.hor_draw != 0) {
 8017c7a:	07d8      	lsls	r0, r3, #31
 8017c7c:	d51e      	bpl.n	8017cbc <lv_page_sb_refresh+0xac>
        lv_area_copy(&sb_area_tmp, &ext->sb.hor_area);
 8017c7e:	f104 010c 	add.w	r1, r4, #12
 8017c82:	a808      	add	r0, sp, #32
 8017c84:	f7ff ffae 	bl	8017be4 <lv_area_copy>
        sb_area_tmp.x1 += page->coords.x1;
 8017c88:	8a3a      	ldrh	r2, [r7, #16]
 8017c8a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
        sb_area_tmp.y1 += page->coords.y1;
 8017c8e:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
        sb_area_tmp.x1 += page->coords.x1;
 8017c92:	4413      	add	r3, r2
 8017c94:	f8ad 3020 	strh.w	r3, [sp, #32]
        sb_area_tmp.y1 += page->coords.y1;
 8017c98:	8a7b      	ldrh	r3, [r7, #18]
 8017c9a:	4419      	add	r1, r3
 8017c9c:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
        sb_area_tmp.x2 += page->coords.x1;
 8017ca0:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8017ca4:	440a      	add	r2, r1
 8017ca6:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
        sb_area_tmp.y2 += page->coords.y1;
 8017caa:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
        lv_inv_area(disp, &sb_area_tmp);
 8017cae:	a908      	add	r1, sp, #32
        sb_area_tmp.y2 += page->coords.y1;
 8017cb0:	4413      	add	r3, r2
        lv_inv_area(disp, &sb_area_tmp);
 8017cb2:	4658      	mov	r0, fp
        sb_area_tmp.y2 += page->coords.y1;
 8017cb4:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        lv_inv_area(disp, &sb_area_tmp);
 8017cb8:	f7f7 fdd6 	bl	800f868 <lv_inv_area>
    }
    if(ext->sb.ver_draw != 0) {
 8017cbc:	7f23      	ldrb	r3, [r4, #28]
 8017cbe:	0799      	lsls	r1, r3, #30
 8017cc0:	d51e      	bpl.n	8017d00 <lv_page_sb_refresh+0xf0>
        lv_area_copy(&sb_area_tmp, &ext->sb.ver_area);
 8017cc2:	f104 0114 	add.w	r1, r4, #20
 8017cc6:	a808      	add	r0, sp, #32
 8017cc8:	f7ff ff8c 	bl	8017be4 <lv_area_copy>
        sb_area_tmp.x1 += page->coords.x1;
 8017ccc:	8a3a      	ldrh	r2, [r7, #16]
 8017cce:	f8bd 3020 	ldrh.w	r3, [sp, #32]
        sb_area_tmp.y1 += page->coords.y1;
 8017cd2:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
        sb_area_tmp.x1 += page->coords.x1;
 8017cd6:	4413      	add	r3, r2
 8017cd8:	f8ad 3020 	strh.w	r3, [sp, #32]
        sb_area_tmp.y1 += page->coords.y1;
 8017cdc:	8a7b      	ldrh	r3, [r7, #18]
 8017cde:	4419      	add	r1, r3
 8017ce0:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
        sb_area_tmp.x2 += page->coords.x1;
 8017ce4:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8017ce8:	440a      	add	r2, r1
 8017cea:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
        sb_area_tmp.y2 += page->coords.y1;
 8017cee:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
        lv_inv_area(disp, &sb_area_tmp);
 8017cf2:	a908      	add	r1, sp, #32
        sb_area_tmp.y2 += page->coords.y1;
 8017cf4:	4413      	add	r3, r2
        lv_inv_area(disp, &sb_area_tmp);
 8017cf6:	4658      	mov	r0, fp
        sb_area_tmp.y2 += page->coords.y1;
 8017cf8:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        lv_inv_area(disp, &sb_area_tmp);
 8017cfc:	f7f7 fdb4 	bl	800f868 <lv_inv_area>
    }

    if(ext->sb.mode == LV_SB_MODE_DRAG && lv_indev_is_dragging(lv_indev_get_act()) == false) {
 8017d00:	7f23      	ldrb	r3, [r4, #28]
 8017d02:	f003 031c 	and.w	r3, r3, #28
 8017d06:	2b08      	cmp	r3, #8
 8017d08:	d10d      	bne.n	8017d26 <lv_page_sb_refresh+0x116>
 8017d0a:	f7f6 fc4b 	bl	800e5a4 <lv_indev_get_act>
 8017d0e:	f7f6 fc6c 	bl	800e5ea <lv_indev_is_dragging>
 8017d12:	b940      	cbnz	r0, 8017d26 <lv_page_sb_refresh+0x116>
        ext->sb.hor_draw = 0;
 8017d14:	7f23      	ldrb	r3, [r4, #28]
 8017d16:	f360 0300 	bfi	r3, r0, #0, #1
        ext->sb.ver_draw = 0;
 8017d1a:	f360 0341 	bfi	r3, r0, #1, #1
 8017d1e:	7723      	strb	r3, [r4, #28]
        sb_area_tmp.y1 += page->coords.y1;
        sb_area_tmp.x2 += page->coords.x1;
        sb_area_tmp.y2 += page->coords.y1;
        lv_inv_area(disp, &sb_area_tmp);
    }
}
 8017d20:	b00b      	add	sp, #44	; 0x2c
 8017d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_coord_t sb_hor_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.right);
 8017d26:	9a04      	ldr	r2, [sp, #16]
    if(scrl_w <= obj_w - style->body.padding.left - style->body.padding.right) {
 8017d28:	f9b8 101c 	ldrsh.w	r1, [r8, #28]
 8017d2c:	9801      	ldr	r0, [sp, #4]
    lv_coord_t sb_hor_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.right);
 8017d2e:	4296      	cmp	r6, r2
 8017d30:	4633      	mov	r3, r6
 8017d32:	bfb8      	it	lt
 8017d34:	4613      	movlt	r3, r2
    if(scrl_w <= obj_w - style->body.padding.left - style->body.padding.right) {
 8017d36:	f9b8 201a 	ldrsh.w	r2, [r8, #26]
    lv_coord_t sb_hor_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.right);
 8017d3a:	9303      	str	r3, [sp, #12]
    if(scrl_w <= obj_w - style->body.padding.left - style->body.padding.right) {
 8017d3c:	1aab      	subs	r3, r5, r2
 8017d3e:	1a5b      	subs	r3, r3, r1
 8017d40:	4298      	cmp	r0, r3
 8017d42:	9b03      	ldr	r3, [sp, #12]
 8017d44:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8017d48:	f300 808e 	bgt.w	8017e68 <lv_page_sb_refresh+0x258>
        lv_area_set_width(&ext->sb.hor_area, obj_w - 2 * sb_hor_pad);
 8017d4c:	1ae9      	subs	r1, r5, r3
 8017d4e:	f104 060c 	add.w	r6, r4, #12
 8017d52:	b209      	sxth	r1, r1
 8017d54:	4630      	mov	r0, r6
 8017d56:	f7fc f924 	bl	8013fa2 <lv_area_set_width>
                        obj_h - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.bottom);
 8017d5a:	68a3      	ldr	r3, [r4, #8]
        lv_area_set_pos(&ext->sb.hor_area, sb_hor_pad,
 8017d5c:	9903      	ldr	r1, [sp, #12]
                        obj_h - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.bottom);
 8017d5e:	8bda      	ldrh	r2, [r3, #30]
 8017d60:	8b1b      	ldrh	r3, [r3, #24]
 8017d62:	eba9 0202 	sub.w	r2, r9, r2
 8017d66:	1ad2      	subs	r2, r2, r3
        lv_area_set_pos(&ext->sb.hor_area, sb_hor_pad,
 8017d68:	b212      	sxth	r2, r2
 8017d6a:	4630      	mov	r0, r6
 8017d6c:	f7fc f923 	bl	8013fb6 <lv_area_set_pos>
        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG) ext->sb.hor_draw = 0;
 8017d70:	7f23      	ldrb	r3, [r4, #28]
 8017d72:	f003 0218 	and.w	r2, r3, #24
 8017d76:	2a08      	cmp	r2, #8
 8017d78:	d102      	bne.n	8017d80 <lv_page_sb_refresh+0x170>
 8017d7a:	f36f 0300 	bfc	r3, #0, #1
        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG) ext->sb.hor_draw = 1;
 8017d7e:	7723      	strb	r3, [r4, #28]
    lv_coord_t sb_ver_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.bottom);
 8017d80:	9b04      	ldr	r3, [sp, #16]
 8017d82:	9905      	ldr	r1, [sp, #20]
    if(scrl_h <= obj_h - style->body.padding.top - style->body.padding.bottom) {
 8017d84:	9e02      	ldr	r6, [sp, #8]
    lv_coord_t sb_ver_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.bottom);
 8017d86:	428b      	cmp	r3, r1
 8017d88:	bfb8      	it	lt
 8017d8a:	460b      	movlt	r3, r1
 8017d8c:	461a      	mov	r2, r3
    if(scrl_h <= obj_h - style->body.padding.top - style->body.padding.bottom) {
 8017d8e:	f9b8 3016 	ldrsh.w	r3, [r8, #22]
 8017d92:	f9b8 1018 	ldrsh.w	r1, [r8, #24]
 8017d96:	eba9 0003 	sub.w	r0, r9, r3
 8017d9a:	1a40      	subs	r0, r0, r1
 8017d9c:	4286      	cmp	r6, r0
 8017d9e:	ea4f 0a42 	mov.w	sl, r2, lsl #1
 8017da2:	f300 809f 	bgt.w	8017ee4 <lv_page_sb_refresh+0x2d4>
        lv_area_set_height(&ext->sb.ver_area, obj_h - 2 * sb_ver_pad);
 8017da6:	f104 0614 	add.w	r6, r4, #20
 8017daa:	eba9 010a 	sub.w	r1, r9, sl
 8017dae:	b209      	sxth	r1, r1
 8017db0:	4630      	mov	r0, r6
 8017db2:	9200      	str	r2, [sp, #0]
 8017db4:	f7fc f8fa 	bl	8013fac <lv_area_set_height>
                        obj_w - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.right, sb_ver_pad);
 8017db8:	68a3      	ldr	r3, [r4, #8]
        lv_area_set_pos(&ext->sb.ver_area,
 8017dba:	9a00      	ldr	r2, [sp, #0]
                        obj_w - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.right, sb_ver_pad);
 8017dbc:	8bd9      	ldrh	r1, [r3, #30]
 8017dbe:	1a6d      	subs	r5, r5, r1
 8017dc0:	8b99      	ldrh	r1, [r3, #28]
 8017dc2:	1a69      	subs	r1, r5, r1
        lv_area_set_pos(&ext->sb.ver_area,
 8017dc4:	b209      	sxth	r1, r1
 8017dc6:	4630      	mov	r0, r6
 8017dc8:	f7fc f8f5 	bl	8013fb6 <lv_area_set_pos>
        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG) ext->sb.ver_draw = 0;
 8017dcc:	7f23      	ldrb	r3, [r4, #28]
 8017dce:	f003 0218 	and.w	r2, r3, #24
 8017dd2:	2a08      	cmp	r2, #8
 8017dd4:	d102      	bne.n	8017ddc <lv_page_sb_refresh+0x1cc>
 8017dd6:	f36f 0341 	bfc	r3, #1, #1
        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG) ext->sb.ver_draw = 1;
 8017dda:	7723      	strb	r3, [r4, #28]
    if(ext->sb.hor_draw != 0) {
 8017ddc:	7f23      	ldrb	r3, [r4, #28]
 8017dde:	07da      	lsls	r2, r3, #31
 8017de0:	d51e      	bpl.n	8017e20 <lv_page_sb_refresh+0x210>
        lv_area_copy(&sb_area_tmp, &ext->sb.hor_area);
 8017de2:	f104 010c 	add.w	r1, r4, #12
 8017de6:	a808      	add	r0, sp, #32
 8017de8:	f7ff fefc 	bl	8017be4 <lv_area_copy>
        sb_area_tmp.x1 += page->coords.x1;
 8017dec:	8a3a      	ldrh	r2, [r7, #16]
 8017dee:	f8bd 3020 	ldrh.w	r3, [sp, #32]
        sb_area_tmp.y1 += page->coords.y1;
 8017df2:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
        sb_area_tmp.x1 += page->coords.x1;
 8017df6:	4413      	add	r3, r2
 8017df8:	f8ad 3020 	strh.w	r3, [sp, #32]
        sb_area_tmp.y1 += page->coords.y1;
 8017dfc:	8a7b      	ldrh	r3, [r7, #18]
 8017dfe:	4419      	add	r1, r3
 8017e00:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
        sb_area_tmp.x2 += page->coords.x1;
 8017e04:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8017e08:	440a      	add	r2, r1
 8017e0a:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
        sb_area_tmp.y2 += page->coords.y1;
 8017e0e:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
        lv_inv_area(disp, &sb_area_tmp);
 8017e12:	a908      	add	r1, sp, #32
        sb_area_tmp.y2 += page->coords.y1;
 8017e14:	4413      	add	r3, r2
        lv_inv_area(disp, &sb_area_tmp);
 8017e16:	4658      	mov	r0, fp
        sb_area_tmp.y2 += page->coords.y1;
 8017e18:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        lv_inv_area(disp, &sb_area_tmp);
 8017e1c:	f7f7 fd24 	bl	800f868 <lv_inv_area>
    if(ext->sb.ver_draw != 0) {
 8017e20:	7f23      	ldrb	r3, [r4, #28]
 8017e22:	079b      	lsls	r3, r3, #30
 8017e24:	f57f af7c 	bpl.w	8017d20 <lv_page_sb_refresh+0x110>
        lv_area_copy(&sb_area_tmp, &ext->sb.ver_area);
 8017e28:	f104 0114 	add.w	r1, r4, #20
 8017e2c:	a808      	add	r0, sp, #32
 8017e2e:	f7ff fed9 	bl	8017be4 <lv_area_copy>
        sb_area_tmp.x1 += page->coords.x1;
 8017e32:	8a3a      	ldrh	r2, [r7, #16]
 8017e34:	f8bd 3020 	ldrh.w	r3, [sp, #32]
        sb_area_tmp.y1 += page->coords.y1;
 8017e38:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
        sb_area_tmp.x1 += page->coords.x1;
 8017e3c:	4413      	add	r3, r2
 8017e3e:	f8ad 3020 	strh.w	r3, [sp, #32]
        sb_area_tmp.y1 += page->coords.y1;
 8017e42:	8a7b      	ldrh	r3, [r7, #18]
 8017e44:	4419      	add	r1, r3
 8017e46:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
        sb_area_tmp.x2 += page->coords.x1;
 8017e4a:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8017e4e:	440a      	add	r2, r1
 8017e50:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
        sb_area_tmp.y2 += page->coords.y1;
 8017e54:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
        lv_inv_area(disp, &sb_area_tmp);
 8017e58:	a908      	add	r1, sp, #32
        sb_area_tmp.y2 += page->coords.y1;
 8017e5a:	4413      	add	r3, r2
        lv_inv_area(disp, &sb_area_tmp);
 8017e5c:	4658      	mov	r0, fp
        sb_area_tmp.y2 += page->coords.y1;
 8017e5e:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        lv_inv_area(disp, &sb_area_tmp);
 8017e62:	f7f7 fd01 	bl	800f868 <lv_inv_area>
 8017e66:	e75b      	b.n	8017d20 <lv_page_sb_refresh+0x110>
            (obj_w * (obj_w - (2 * sb_hor_pad))) / (scrl_w + style->body.padding.left + style->body.padding.right);
 8017e68:	1aee      	subs	r6, r5, r3
 8017e6a:	9307      	str	r3, [sp, #28]
 8017e6c:	9b01      	ldr	r3, [sp, #4]
 8017e6e:	441a      	add	r2, r3
 8017e70:	440a      	add	r2, r1
 8017e72:	436e      	muls	r6, r5
 8017e74:	fb96 f6f2 	sdiv	r6, r6, r2
        size_tmp =
 8017e78:	b236      	sxth	r6, r6
 8017e7a:	2e03      	cmp	r6, #3
 8017e7c:	bfb8      	it	lt
 8017e7e:	2603      	movlt	r6, #3
        lv_area_set_width(&ext->sb.hor_area, size_tmp);
 8017e80:	f104 0a0c 	add.w	sl, r4, #12
 8017e84:	4631      	mov	r1, r6
 8017e86:	4650      	mov	r0, sl
 8017e88:	f7fc f88b 	bl	8013fa2 <lv_area_set_width>
                            (-(lv_obj_get_x(scrl) - style->body.padding.left) * (obj_w - size_tmp - 2 * sb_hor_pad)) /
 8017e8c:	f9b8 301a 	ldrsh.w	r3, [r8, #26]
 8017e90:	9800      	ldr	r0, [sp, #0]
 8017e92:	9306      	str	r3, [sp, #24]
 8017e94:	f7f7 faa6 	bl	800f3e4 <lv_obj_get_x>
                        obj_h - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.bottom);
 8017e98:	68a1      	ldr	r1, [r4, #8]
                            (-(lv_obj_get_x(scrl) - style->body.padding.left) * (obj_w - size_tmp - 2 * sb_hor_pad)) /
 8017e9a:	9b07      	ldr	r3, [sp, #28]
                        obj_h - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.bottom);
 8017e9c:	8bca      	ldrh	r2, [r1, #30]
 8017e9e:	8b09      	ldrh	r1, [r1, #24]
 8017ea0:	eba9 0202 	sub.w	r2, r9, r2
 8017ea4:	1a52      	subs	r2, r2, r1
                            (-(lv_obj_get_x(scrl) - style->body.padding.left) * (obj_w - size_tmp - 2 * sb_hor_pad)) /
 8017ea6:	9906      	ldr	r1, [sp, #24]
 8017ea8:	1bae      	subs	r6, r5, r6
 8017eaa:	1af3      	subs	r3, r6, r3
 8017eac:	1a08      	subs	r0, r1, r0
 8017eae:	4358      	muls	r0, r3
                                (scrl_w + style->body.padding.left + style->body.padding.right - obj_w),
 8017eb0:	9901      	ldr	r1, [sp, #4]
 8017eb2:	f9b8 301a 	ldrsh.w	r3, [r8, #26]
 8017eb6:	440b      	add	r3, r1
 8017eb8:	f9b8 101c 	ldrsh.w	r1, [r8, #28]
 8017ebc:	440b      	add	r3, r1
 8017ebe:	1b5b      	subs	r3, r3, r5
                            (-(lv_obj_get_x(scrl) - style->body.padding.left) * (obj_w - size_tmp - 2 * sb_hor_pad)) /
 8017ec0:	fb90 f0f3 	sdiv	r0, r0, r3
                        sb_hor_pad +
 8017ec4:	9b03      	ldr	r3, [sp, #12]
 8017ec6:	4403      	add	r3, r0
        lv_area_set_pos(&ext->sb.hor_area,
 8017ec8:	b212      	sxth	r2, r2
 8017eca:	b219      	sxth	r1, r3
 8017ecc:	4650      	mov	r0, sl
 8017ece:	f7fc f872 	bl	8013fb6 <lv_area_set_pos>
        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG) ext->sb.hor_draw = 1;
 8017ed2:	7f23      	ldrb	r3, [r4, #28]
 8017ed4:	f003 0218 	and.w	r2, r3, #24
 8017ed8:	2a08      	cmp	r2, #8
 8017eda:	f47f af51 	bne.w	8017d80 <lv_page_sb_refresh+0x170>
 8017ede:	f043 0301 	orr.w	r3, r3, #1
 8017ee2:	e74c      	b.n	8017d7e <lv_page_sb_refresh+0x16e>
 8017ee4:	9204      	str	r2, [sp, #16]
            (obj_h * (obj_h - (2 * sb_ver_pad))) / (scrl_h + style->body.padding.top + style->body.padding.bottom);
 8017ee6:	9a02      	ldr	r2, [sp, #8]
 8017ee8:	eba9 060a 	sub.w	r6, r9, sl
 8017eec:	4413      	add	r3, r2
 8017eee:	440b      	add	r3, r1
 8017ef0:	fb09 f606 	mul.w	r6, r9, r6
 8017ef4:	fb96 f6f3 	sdiv	r6, r6, r3
        size_tmp =
 8017ef8:	b236      	sxth	r6, r6
 8017efa:	2e03      	cmp	r6, #3
 8017efc:	bfb8      	it	lt
 8017efe:	2603      	movlt	r6, #3
        lv_area_set_height(&ext->sb.ver_area, size_tmp);
 8017f00:	f104 0314 	add.w	r3, r4, #20
 8017f04:	4631      	mov	r1, r6
 8017f06:	4618      	mov	r0, r3
 8017f08:	9303      	str	r3, [sp, #12]
 8017f0a:	f7fc f84f 	bl	8013fac <lv_area_set_height>
                        obj_w - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.right,
 8017f0e:	68a0      	ldr	r0, [r4, #8]
 8017f10:	8bc1      	ldrh	r1, [r0, #30]
                        sb_ver_pad + (-(lv_obj_get_y(scrl) - ext->sb.style->body.padding.bottom) *
 8017f12:	f9b0 3018 	ldrsh.w	r3, [r0, #24]
 8017f16:	9301      	str	r3, [sp, #4]
                        obj_w - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.right,
 8017f18:	1a6d      	subs	r5, r5, r1
 8017f1a:	8b81      	ldrh	r1, [r0, #28]
                        sb_ver_pad + (-(lv_obj_get_y(scrl) - ext->sb.style->body.padding.bottom) *
 8017f1c:	9800      	ldr	r0, [sp, #0]
                        obj_w - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.right,
 8017f1e:	1a6d      	subs	r5, r5, r1
                        sb_ver_pad + (-(lv_obj_get_y(scrl) - ext->sb.style->body.padding.bottom) *
 8017f20:	f7f7 fa66 	bl	800f3f0 <lv_obj_get_y>
 8017f24:	9b01      	ldr	r3, [sp, #4]
                                         (scrl_h + style->body.padding.top + style->body.padding.bottom - obj_h));
 8017f26:	f9b8 1016 	ldrsh.w	r1, [r8, #22]
                        sb_ver_pad + (-(lv_obj_get_y(scrl) - ext->sb.style->body.padding.bottom) *
 8017f2a:	9a04      	ldr	r2, [sp, #16]
                                      (obj_h - size_tmp - 2 * sb_ver_pad)) /
 8017f2c:	eba9 0606 	sub.w	r6, r9, r6
                        sb_ver_pad + (-(lv_obj_get_y(scrl) - ext->sb.style->body.padding.bottom) *
 8017f30:	1a18      	subs	r0, r3, r0
                                      (obj_h - size_tmp - 2 * sb_ver_pad)) /
 8017f32:	eba6 0a0a 	sub.w	sl, r6, sl
                                         (scrl_h + style->body.padding.top + style->body.padding.bottom - obj_h));
 8017f36:	9b02      	ldr	r3, [sp, #8]
                        sb_ver_pad + (-(lv_obj_get_y(scrl) - ext->sb.style->body.padding.bottom) *
 8017f38:	fb00 fa0a 	mul.w	sl, r0, sl
                                         (scrl_h + style->body.padding.top + style->body.padding.bottom - obj_h));
 8017f3c:	f9b8 0018 	ldrsh.w	r0, [r8, #24]
 8017f40:	4419      	add	r1, r3
 8017f42:	4401      	add	r1, r0
        lv_area_set_pos(&ext->sb.ver_area,
 8017f44:	9b03      	ldr	r3, [sp, #12]
                                         (scrl_h + style->body.padding.top + style->body.padding.bottom - obj_h));
 8017f46:	eba1 0909 	sub.w	r9, r1, r9
        lv_area_set_pos(&ext->sb.ver_area,
 8017f4a:	b22d      	sxth	r5, r5
                                      (obj_h - size_tmp - 2 * sb_ver_pad)) /
 8017f4c:	fb9a f9f9 	sdiv	r9, sl, r9
                        sb_ver_pad + (-(lv_obj_get_y(scrl) - ext->sb.style->body.padding.bottom) *
 8017f50:	444a      	add	r2, r9
        lv_area_set_pos(&ext->sb.ver_area,
 8017f52:	b212      	sxth	r2, r2
 8017f54:	4618      	mov	r0, r3
 8017f56:	4629      	mov	r1, r5
 8017f58:	f7fc f82d 	bl	8013fb6 <lv_area_set_pos>
        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG) ext->sb.ver_draw = 1;
 8017f5c:	7f23      	ldrb	r3, [r4, #28]
 8017f5e:	f003 0218 	and.w	r2, r3, #24
 8017f62:	2a08      	cmp	r2, #8
 8017f64:	f47f af3a 	bne.w	8017ddc <lv_page_sb_refresh+0x1cc>
 8017f68:	f043 0302 	orr.w	r3, r3, #2
 8017f6c:	e735      	b.n	8017dda <lv_page_sb_refresh+0x1ca>

08017f6e <edge_flash_anim_end>:
    ext->edge_flash.state = v;
    lv_obj_invalidate(page);
}

static void edge_flash_anim_end(lv_anim_t * a)
{
 8017f6e:	b510      	push	{r4, lr}
 8017f70:	4604      	mov	r4, r0
    lv_page_ext_t * ext       = lv_obj_get_ext_attr(a->var);
 8017f72:	6800      	ldr	r0, [r0, #0]
 8017f74:	f7f7 fb3f 	bl	800f5f6 <lv_obj_get_ext_attr>
    ext->edge_flash.top_ip    = 0;
 8017f78:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    ext->edge_flash.bottom_ip = 0;
    ext->edge_flash.left_ip   = 0;
    ext->edge_flash.right_ip  = 0;
 8017f7c:	f003 03e9 	and.w	r3, r3, #233	; 0xe9
 8017f80:	f36f 03c3 	bfc	r3, #3, #1
 8017f84:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
    lv_obj_invalidate(a->var);
 8017f88:	6820      	ldr	r0, [r4, #0]
}
 8017f8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_invalidate(a->var);
 8017f8e:	f7f6 bcb5 	b.w	800e8fc <lv_obj_invalidate>

08017f92 <edge_flash_anim>:
{
 8017f92:	b538      	push	{r3, r4, r5, lr}
 8017f94:	4604      	mov	r4, r0
 8017f96:	460d      	mov	r5, r1
    lv_page_ext_t * ext   = lv_obj_get_ext_attr(page);
 8017f98:	f7f7 fb2d 	bl	800f5f6 <lv_obj_get_ext_attr>
    ext->edge_flash.state = v;
 8017f9c:	8405      	strh	r5, [r0, #32]
    lv_obj_invalidate(page);
 8017f9e:	4620      	mov	r0, r4
}
 8017fa0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(page);
 8017fa4:	f7f6 bcaa 	b.w	800e8fc <lv_obj_invalidate>

08017fa8 <lv_scrl_design>:
    if(mode == LV_DESIGN_COVER_CHK) {
 8017fa8:	2a02      	cmp	r2, #2
{
 8017faa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017fae:	4604      	mov	r4, r0
 8017fb0:	4689      	mov	r9, r1
    if(mode == LV_DESIGN_COVER_CHK) {
 8017fb2:	d104      	bne.n	8017fbe <lv_scrl_design+0x16>
        return ancestor_design(scrl, mask, mode);
 8017fb4:	4b1f      	ldr	r3, [pc, #124]	; (8018034 <lv_scrl_design+0x8c>)
}
 8017fb6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        return ancestor_design(scrl, mask, mode);
 8017fba:	681b      	ldr	r3, [r3, #0]
 8017fbc:	4718      	bx	r3
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 8017fbe:	bb9a      	cbnz	r2, 8018028 <lv_scrl_design+0x80>
        const lv_style_t * style_scrl_ori = lv_obj_get_style(scrl);
 8017fc0:	f7f7 fa2e 	bl	800f420 <lv_obj_get_style>
 8017fc4:	4605      	mov	r5, r0
        lv_obj_t * page                   = lv_obj_get_parent(scrl);
 8017fc6:	4620      	mov	r0, r4
 8017fc8:	f7f7 f9d8 	bl	800f37c <lv_obj_get_parent>
 8017fcc:	4607      	mov	r7, r0
        const lv_style_t * style_page     = lv_obj_get_style(page);
 8017fce:	f7f7 fa27 	bl	800f420 <lv_obj_get_style>
 8017fd2:	4680      	mov	r8, r0
        lv_group_t * g                    = lv_obj_get_group(page);
 8017fd4:	4638      	mov	r0, r7
 8017fd6:	f7f7 fb14 	bl	800f602 <lv_obj_get_group>
        if((style_page->body.opa == LV_OPA_TRANSP) &&
 8017fda:	f898 3008 	ldrb.w	r3, [r8, #8]
        lv_group_t * g                    = lv_obj_get_group(page);
 8017fde:	4606      	mov	r6, r0
        if((style_page->body.opa == LV_OPA_TRANSP) &&
 8017fe0:	b9c3      	cbnz	r3, 8018014 <lv_scrl_design+0x6c>
 8017fe2:	f9b8 300c 	ldrsh.w	r3, [r8, #12]
 8017fe6:	b9ab      	cbnz	r3, 8018014 <lv_scrl_design+0x6c>
            if(lv_group_get_focused(g) == page) {
 8017fe8:	f7f6 faa0 	bl	800e52c <lv_group_get_focused>
 8017fec:	4287      	cmp	r7, r0
 8017fee:	d111      	bne.n	8018014 <lv_scrl_design+0x6c>
                style_mod = lv_group_mod_style(g, style_scrl_ori);
 8017ff0:	4629      	mov	r1, r5
 8017ff2:	4630      	mov	r0, r6
 8017ff4:	f7f6 fa87 	bl	800e506 <lv_group_mod_style>
                if((style_mod->body.opa == LV_OPA_TRANSP) && style_mod->body.border.width == 0) {
 8017ff8:	7a03      	ldrb	r3, [r0, #8]
 8017ffa:	b953      	cbnz	r3, 8018012 <lv_scrl_design+0x6a>
 8017ffc:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 8018000:	b93b      	cbnz	r3, 8018012 <lv_scrl_design+0x6a>
                    style_mod->body.opa          = LV_OPA_50;
 8018002:	237f      	movs	r3, #127	; 0x7f
 8018004:	7203      	strb	r3, [r0, #8]
                    style_mod->body.border.width = 1;
 8018006:	2301      	movs	r3, #1
 8018008:	8183      	strh	r3, [r0, #12]
                    style_mod                    = lv_group_mod_style(g, style_mod);
 801800a:	4601      	mov	r1, r0
 801800c:	4630      	mov	r0, r6
 801800e:	f7f6 fa7a 	bl	800e506 <lv_group_mod_style>
                scrl->style_p = style_mod; /*Temporally change the style to the activated */
 8018012:	62a0      	str	r0, [r4, #40]	; 0x28
        ancestor_design(scrl, mask, mode);
 8018014:	4b07      	ldr	r3, [pc, #28]	; (8018034 <lv_scrl_design+0x8c>)
 8018016:	2200      	movs	r2, #0
 8018018:	681b      	ldr	r3, [r3, #0]
 801801a:	4649      	mov	r1, r9
 801801c:	4620      	mov	r0, r4
 801801e:	4798      	blx	r3
        scrl->style_p = style_scrl_ori; /*Revert the style*/
 8018020:	62a5      	str	r5, [r4, #40]	; 0x28
}
 8018022:	2001      	movs	r0, #1
 8018024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    } else if(mode == LV_DESIGN_DRAW_POST) {
 8018028:	2a01      	cmp	r2, #1
 801802a:	d1fa      	bne.n	8018022 <lv_scrl_design+0x7a>
        ancestor_design(scrl, mask, mode);
 801802c:	4b01      	ldr	r3, [pc, #4]	; (8018034 <lv_scrl_design+0x8c>)
 801802e:	681b      	ldr	r3, [r3, #0]
 8018030:	4798      	blx	r3
 8018032:	e7f6      	b.n	8018022 <lv_scrl_design+0x7a>
 8018034:	2000b058 	.word	0x2000b058

08018038 <lv_page_set_sb_mode>:
{
 8018038:	b538      	push	{r3, r4, r5, lr}
 801803a:	460d      	mov	r5, r1
 801803c:	4604      	mov	r4, r0
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801803e:	f7f7 fada 	bl	800f5f6 <lv_obj_get_ext_attr>
    if(ext->sb.mode == sb_mode) return;
 8018042:	7f03      	ldrb	r3, [r0, #28]
 8018044:	f3c3 0282 	ubfx	r2, r3, #2, #3
 8018048:	42aa      	cmp	r2, r5
 801804a:	d021      	beq.n	8018090 <lv_page_set_sb_mode+0x58>
    if(sb_mode == LV_SB_MODE_HIDE)
 801804c:	2d04      	cmp	r5, #4
 801804e:	d112      	bne.n	8018076 <lv_page_set_sb_mode+0x3e>
        ext->sb.mode |= LV_SB_MODE_HIDE; /*Set the hidden flag*/
 8018050:	f042 0204 	orr.w	r2, r2, #4
        ext->sb.mode &= (~LV_SB_MODE_HIDE); /*Clear the hidden flag*/
 8018054:	f362 0384 	bfi	r3, r2, #2, #3
        ext->sb.mode = sb_mode;
 8018058:	7703      	strb	r3, [r0, #28]
    ext->sb.hor_draw = 0;
 801805a:	7f03      	ldrb	r3, [r0, #28]
    ext->sb.ver_draw = 0;
 801805c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8018060:	f36f 0341 	bfc	r3, #1, #1
 8018064:	7703      	strb	r3, [r0, #28]
    lv_page_sb_refresh(page);
 8018066:	4620      	mov	r0, r4
 8018068:	f7ff fdd2 	bl	8017c10 <lv_page_sb_refresh>
    lv_obj_invalidate(page);
 801806c:	4620      	mov	r0, r4
}
 801806e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(page);
 8018072:	f7f6 bc43 	b.w	800e8fc <lv_obj_invalidate>
    else if(sb_mode == LV_SB_MODE_UNHIDE)
 8018076:	2d05      	cmp	r5, #5
 8018078:	d102      	bne.n	8018080 <lv_page_set_sb_mode+0x48>
        ext->sb.mode &= (~LV_SB_MODE_HIDE); /*Clear the hidden flag*/
 801807a:	f002 0203 	and.w	r2, r2, #3
 801807e:	e7e9      	b.n	8018054 <lv_page_set_sb_mode+0x1c>
        if(ext->sb.mode & LV_SB_MODE_HIDE) sb_mode |= LV_SB_MODE_HIDE;
 8018080:	0753      	lsls	r3, r2, #29
        ext->sb.mode = sb_mode;
 8018082:	7f03      	ldrb	r3, [r0, #28]
        if(ext->sb.mode & LV_SB_MODE_HIDE) sb_mode |= LV_SB_MODE_HIDE;
 8018084:	bf48      	it	mi
 8018086:	f045 0504 	orrmi.w	r5, r5, #4
        ext->sb.mode = sb_mode;
 801808a:	f365 0384 	bfi	r3, r5, #2, #3
 801808e:	e7e3      	b.n	8018058 <lv_page_set_sb_mode+0x20>
 8018090:	bd38      	pop	{r3, r4, r5, pc}

08018092 <lv_page_set_anim_time>:
{
 8018092:	b510      	push	{r4, lr}
 8018094:	460c      	mov	r4, r1
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 8018096:	f7f7 faae 	bl	800f5f6 <lv_obj_get_ext_attr>
    ext->anim_time      = anim_time;
 801809a:	8584      	strh	r4, [r0, #44]	; 0x2c
 801809c:	bd10      	pop	{r4, pc}

0801809e <lv_page_set_style>:
{
 801809e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80180a0:	4606      	mov	r6, r0
 80180a2:	460f      	mov	r7, r1
 80180a4:	4615      	mov	r5, r2
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 80180a6:	f7f7 faa6 	bl	800f5f6 <lv_obj_get_ext_attr>
 80180aa:	4604      	mov	r4, r0
    switch(type) {
 80180ac:	2f03      	cmp	r7, #3
 80180ae:	d825      	bhi.n	80180fc <lv_page_set_style+0x5e>
 80180b0:	e8df f007 	tbb	[pc, r7]
 80180b4:	230b0802 	.word	0x230b0802
        case LV_PAGE_STYLE_BG: lv_obj_set_style(page, style); break;
 80180b8:	4629      	mov	r1, r5
 80180ba:	4630      	mov	r0, r6
}
 80180bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        case LV_PAGE_STYLE_SCRL: lv_obj_set_style(ext->scrl, style); break;
 80180c0:	f7f7 b980 	b.w	800f3c4 <lv_obj_set_style>
 80180c4:	4629      	mov	r1, r5
 80180c6:	6840      	ldr	r0, [r0, #4]
 80180c8:	e7f8      	b.n	80180bc <lv_page_set_style+0x1e>
            ext->sb.style = style;
 80180ca:	6085      	str	r5, [r0, #8]
            lv_area_set_height(&ext->sb.hor_area, ext->sb.style->body.padding.inner);
 80180cc:	f9b5 101e 	ldrsh.w	r1, [r5, #30]
 80180d0:	300c      	adds	r0, #12
 80180d2:	f7fb ff6b 	bl	8013fac <lv_area_set_height>
            lv_area_set_width(&ext->sb.ver_area, ext->sb.style->body.padding.inner);
 80180d6:	68a3      	ldr	r3, [r4, #8]
 80180d8:	f104 0014 	add.w	r0, r4, #20
 80180dc:	f9b3 101e 	ldrsh.w	r1, [r3, #30]
 80180e0:	f7fb ff5f 	bl	8013fa2 <lv_area_set_width>
            lv_page_sb_refresh(page);
 80180e4:	4630      	mov	r0, r6
 80180e6:	f7ff fd93 	bl	8017c10 <lv_page_sb_refresh>
            lv_obj_refresh_ext_draw_pad(page);
 80180ea:	4630      	mov	r0, r6
 80180ec:	f7f7 f8cf 	bl	800f28e <lv_obj_refresh_ext_draw_pad>
            lv_obj_invalidate(page);
 80180f0:	4630      	mov	r0, r6
}
 80180f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            lv_obj_invalidate(page);
 80180f6:	f7f6 bc01 	b.w	800e8fc <lv_obj_invalidate>
        case LV_PAGE_STYLE_EDGE_FLASH: ext->edge_flash.style = style; break;
 80180fa:	6245      	str	r5, [r0, #36]	; 0x24
 80180fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080180fe <lv_page_get_scrl>:
{
 80180fe:	b508      	push	{r3, lr}
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 8018100:	f7f7 fa79 	bl	800f5f6 <lv_obj_get_ext_attr>
}
 8018104:	6840      	ldr	r0, [r0, #4]
 8018106:	bd08      	pop	{r3, pc}

08018108 <lv_page_get_anim_time>:
{
 8018108:	b508      	push	{r3, lr}
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801810a:	f7f7 fa74 	bl	800f5f6 <lv_obj_get_ext_attr>
}
 801810e:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
 8018110:	bd08      	pop	{r3, pc}

08018112 <lv_page_get_style>:
{
 8018112:	b538      	push	{r3, r4, r5, lr}
 8018114:	460c      	mov	r4, r1
 8018116:	4605      	mov	r5, r0
    lv_page_ext_t * ext      = lv_obj_get_ext_attr(page);
 8018118:	f7f7 fa6d 	bl	800f5f6 <lv_obj_get_ext_attr>
    switch(type) {
 801811c:	2c03      	cmp	r4, #3
 801811e:	d80e      	bhi.n	801813e <lv_page_get_style+0x2c>
 8018120:	e8df f004 	tbb	[pc, r4]
 8018124:	0b090702 	.word	0x0b090702
        case LV_PAGE_STYLE_BG: style = lv_obj_get_style(page); break;
 8018128:	4628      	mov	r0, r5
}
 801812a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        case LV_PAGE_STYLE_SCRL: style = lv_obj_get_style(ext->scrl); break;
 801812e:	f7f7 b977 	b.w	800f420 <lv_obj_get_style>
 8018132:	6840      	ldr	r0, [r0, #4]
 8018134:	e7f9      	b.n	801812a <lv_page_get_style+0x18>
        case LV_PAGE_STYLE_SB: style = ext->sb.style; break;
 8018136:	6880      	ldr	r0, [r0, #8]
 8018138:	bd38      	pop	{r3, r4, r5, pc}
        case LV_PAGE_STYLE_EDGE_FLASH: style = ext->edge_flash.style; break;
 801813a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801813c:	bd38      	pop	{r3, r4, r5, pc}
        default: style = NULL; break;
 801813e:	2000      	movs	r0, #0
}
 8018140:	bd38      	pop	{r3, r4, r5, pc}
	...

08018144 <lv_page_create>:
{
 8018144:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8018148:	4681      	mov	r9, r0
 801814a:	460e      	mov	r6, r1
    lv_obj_t * new_page = lv_cont_create(par, copy);
 801814c:	f7fd fb60 	bl	8015810 <lv_cont_create>
    lv_mem_assert(new_page);
 8018150:	4604      	mov	r4, r0
 8018152:	b900      	cbnz	r0, 8018156 <lv_page_create+0x12>
 8018154:	e7fe      	b.n	8018154 <lv_page_create+0x10>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_page);
 8018156:	4d6c      	ldr	r5, [pc, #432]	; (8018308 <lv_page_create+0x1c4>)
 8018158:	682b      	ldr	r3, [r5, #0]
 801815a:	b913      	cbnz	r3, 8018162 <lv_page_create+0x1e>
 801815c:	f7f7 fa47 	bl	800f5ee <lv_obj_get_signal_cb>
 8018160:	6028      	str	r0, [r5, #0]
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(new_page);
 8018162:	4d6a      	ldr	r5, [pc, #424]	; (801830c <lv_page_create+0x1c8>)
 8018164:	682b      	ldr	r3, [r5, #0]
 8018166:	b91b      	cbnz	r3, 8018170 <lv_page_create+0x2c>
 8018168:	4620      	mov	r0, r4
 801816a:	f7f7 fa42 	bl	800f5f2 <lv_obj_get_design_cb>
 801816e:	6028      	str	r0, [r5, #0]
    lv_page_ext_t * ext = lv_obj_allocate_ext_attr(new_page, sizeof(lv_page_ext_t));
 8018170:	2130      	movs	r1, #48	; 0x30
 8018172:	4620      	mov	r0, r4
 8018174:	f7f6 fb94 	bl	800e8a0 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 8018178:	4605      	mov	r5, r0
 801817a:	b900      	cbnz	r0, 801817e <lv_page_create+0x3a>
 801817c:	e7fe      	b.n	801817c <lv_page_create+0x38>
    ext->edge_flash.enabled   = 0;
 801817e:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
    ext->sb.hor_draw = 0;
 8018182:	7f03      	ldrb	r3, [r0, #28]
    ext->sb.style    = &lv_style_pretty;
 8018184:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8018330 <lv_page_create+0x1ec>
 8018188:	f8c0 8008 	str.w	r8, [r0, #8]
    ext->scrl        = NULL;
 801818c:	2700      	movs	r7, #0
    ext->edge_flash.right_ip  = 0;
 801818e:	f002 02e8 	and.w	r2, r2, #232	; 0xe8
 8018192:	f367 02c3 	bfi	r2, r7, #3, #1
    ext->sb.mode     = LV_SB_MODE_AUTO;
 8018196:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801819a:	f04f 0a03 	mov.w	sl, #3
    ext->edge_flash.right_ip  = 0;
 801819e:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
    ext->scroll_prop    = 0;
 80181a2:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
    ext->scrl        = NULL;
 80181a6:	6047      	str	r7, [r0, #4]
    ext->sb.mode     = LV_SB_MODE_AUTO;
 80181a8:	f36a 0384 	bfi	r3, sl, #2, #3
 80181ac:	7703      	strb	r3, [r0, #28]
    ext->scroll_prop_ip = 0;
 80181ae:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    ext->edge_flash.style     = &lv_style_plain_color;
 80181b2:	4b57      	ldr	r3, [pc, #348]	; (8018310 <lv_page_create+0x1cc>)
 80181b4:	6243      	str	r3, [r0, #36]	; 0x24
    ext->scroll_prop_ip = 0;
 80181b6:	f367 0241 	bfi	r2, r7, #1, #1
    ext->anim_time            = LV_PAGE_DEF_ANIM_TIME;
 80181ba:	f44f 73c8 	mov.w	r3, #400	; 0x190
    ext->edge_flash.state     = 0;
 80181be:	8407      	strh	r7, [r0, #32]
    ext->anim_time            = LV_PAGE_DEF_ANIM_TIME;
 80181c0:	8583      	strh	r3, [r0, #44]	; 0x2c
    ext->scroll_prop_ip = 0;
 80181c2:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
    if(copy == NULL) {
 80181c6:	2e00      	cmp	r6, #0
 80181c8:	d164      	bne.n	8018294 <lv_page_create+0x150>
        ext->scrl = lv_cont_create(new_page, NULL);
 80181ca:	4631      	mov	r1, r6
 80181cc:	4620      	mov	r0, r4
 80181ce:	f7fd fb1f 	bl	8015810 <lv_cont_create>
        lv_obj_set_signal_cb(ext->scrl, lv_page_scrollable_signal);
 80181d2:	4950      	ldr	r1, [pc, #320]	; (8018314 <lv_page_create+0x1d0>)
        ext->scrl = lv_cont_create(new_page, NULL);
 80181d4:	6068      	str	r0, [r5, #4]
        lv_obj_set_signal_cb(ext->scrl, lv_page_scrollable_signal);
 80181d6:	f7f6 fb5f 	bl	800e898 <lv_obj_set_signal_cb>
        lv_obj_set_design_cb(ext->scrl, lv_scrl_design);
 80181da:	6868      	ldr	r0, [r5, #4]
 80181dc:	494e      	ldr	r1, [pc, #312]	; (8018318 <lv_page_create+0x1d4>)
 80181de:	f7f6 fb5d 	bl	800e89c <lv_obj_set_design_cb>
        lv_obj_set_drag(ext->scrl, true);
 80181e2:	6868      	ldr	r0, [r5, #4]
 80181e4:	2101      	movs	r1, #1
 80181e6:	f7f6 fa8a 	bl	800e6fe <lv_obj_set_drag>
        lv_obj_set_drag_throw(ext->scrl, true);
 80181ea:	6868      	ldr	r0, [r5, #4]
 80181ec:	2101      	movs	r1, #1
 80181ee:	f7f6 fa94 	bl	800e71a <lv_obj_set_drag_throw>
        lv_obj_set_protect(ext->scrl, LV_PROTECT_PARENT | LV_PROTECT_PRESS_LOST);
 80181f2:	6868      	ldr	r0, [r5, #4]
 80181f4:	2112      	movs	r1, #18
 80181f6:	f7f6 fa97 	bl	800e728 <lv_obj_set_protect>
        lv_cont_set_fit4(ext->scrl, LV_FIT_FILL, LV_FIT_FILL, LV_FIT_FILL, LV_FIT_FILL);
 80181fa:	f8cd a000 	str.w	sl, [sp]
 80181fe:	4653      	mov	r3, sl
 8018200:	4652      	mov	r2, sl
 8018202:	6868      	ldr	r0, [r5, #4]
 8018204:	4651      	mov	r1, sl
 8018206:	f7fd fb7a 	bl	80158fe <lv_cont_set_fit4>
        lv_obj_set_event_cb(ext->scrl, scrl_def_event_cb); /*Propagate some event to the background
 801820a:	6868      	ldr	r0, [r5, #4]
 801820c:	4943      	ldr	r1, [pc, #268]	; (801831c <lv_page_create+0x1d8>)
 801820e:	f7f6 fa98 	bl	800e742 <lv_obj_set_event_cb>
        lv_obj_set_signal_cb(new_page, lv_page_signal);
 8018212:	4943      	ldr	r1, [pc, #268]	; (8018320 <lv_page_create+0x1dc>)
 8018214:	4620      	mov	r0, r4
 8018216:	f7f6 fb3f 	bl	800e898 <lv_obj_set_signal_cb>
        lv_obj_set_design_cb(new_page, lv_page_design);
 801821a:	4942      	ldr	r1, [pc, #264]	; (8018324 <lv_page_create+0x1e0>)
 801821c:	4620      	mov	r0, r4
 801821e:	f7f6 fb3d 	bl	800e89c <lv_obj_set_design_cb>
        lv_page_set_sb_mode(new_page, ext->sb.mode);
 8018222:	7f29      	ldrb	r1, [r5, #28]
 8018224:	4620      	mov	r0, r4
 8018226:	f3c1 0182 	ubfx	r1, r1, #2, #3
 801822a:	f7ff ff05 	bl	8018038 <lv_page_set_sb_mode>
        lv_theme_t * th = lv_theme_get_current();
 801822e:	f001 f9ad 	bl	801958c <lv_theme_get_current>
        if(th) {
 8018232:	4605      	mov	r5, r0
 8018234:	b310      	cbz	r0, 801827c <lv_page_create+0x138>
            if(par == NULL) { /*Different styles if it is screen*/
 8018236:	f1b9 0f00 	cmp.w	r9, #0
 801823a:	d116      	bne.n	801826a <lv_page_create+0x126>
                lv_page_set_style(new_page, LV_PAGE_STYLE_BG, th->style.bg);
 801823c:	6842      	ldr	r2, [r0, #4]
 801823e:	4649      	mov	r1, r9
 8018240:	4620      	mov	r0, r4
 8018242:	f7ff ff2c 	bl	801809e <lv_page_set_style>
                lv_page_set_style(new_page, LV_PAGE_STYLE_SCRL, &lv_style_transp);
 8018246:	4a38      	ldr	r2, [pc, #224]	; (8018328 <lv_page_create+0x1e4>)
                lv_page_set_style(new_page, LV_PAGE_STYLE_SCRL, th->style.page.scrl);
 8018248:	2101      	movs	r1, #1
 801824a:	4620      	mov	r0, r4
 801824c:	f7ff ff27 	bl	801809e <lv_page_set_style>
            lv_page_set_style(new_page, LV_PAGE_STYLE_SB, th->style.page.sb);
 8018250:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
            lv_page_set_style(new_page, LV_PAGE_STYLE_SB, &lv_style_pretty_color);
 8018254:	2102      	movs	r1, #2
 8018256:	4620      	mov	r0, r4
 8018258:	f7ff ff21 	bl	801809e <lv_page_set_style>
    lv_page_sb_refresh(new_page);
 801825c:	4620      	mov	r0, r4
 801825e:	f7ff fcd7 	bl	8017c10 <lv_page_sb_refresh>
}
 8018262:	4620      	mov	r0, r4
 8018264:	b002      	add	sp, #8
 8018266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                lv_page_set_style(new_page, LV_PAGE_STYLE_BG, th->style.page.bg);
 801826a:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
 801826e:	4631      	mov	r1, r6
 8018270:	4620      	mov	r0, r4
 8018272:	f7ff ff14 	bl	801809e <lv_page_set_style>
                lv_page_set_style(new_page, LV_PAGE_STYLE_SCRL, th->style.page.scrl);
 8018276:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
 801827a:	e7e5      	b.n	8018248 <lv_page_create+0x104>
            lv_page_set_style(new_page, LV_PAGE_STYLE_BG, &lv_style_pretty_color);
 801827c:	4a2b      	ldr	r2, [pc, #172]	; (801832c <lv_page_create+0x1e8>)
 801827e:	4631      	mov	r1, r6
 8018280:	4620      	mov	r0, r4
 8018282:	f7ff ff0c 	bl	801809e <lv_page_set_style>
            lv_page_set_style(new_page, LV_PAGE_STYLE_SCRL, &lv_style_pretty);
 8018286:	4642      	mov	r2, r8
 8018288:	2101      	movs	r1, #1
 801828a:	4620      	mov	r0, r4
 801828c:	f7ff ff07 	bl	801809e <lv_page_set_style>
            lv_page_set_style(new_page, LV_PAGE_STYLE_SB, &lv_style_pretty_color);
 8018290:	4a26      	ldr	r2, [pc, #152]	; (801832c <lv_page_create+0x1e8>)
 8018292:	e7df      	b.n	8018254 <lv_page_create+0x110>
        lv_page_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8018294:	4630      	mov	r0, r6
 8018296:	f7f7 f9ae 	bl	800f5f6 <lv_obj_get_ext_attr>
 801829a:	4680      	mov	r8, r0
        ext->scrl                = lv_cont_create(new_page, copy_ext->scrl);
 801829c:	6841      	ldr	r1, [r0, #4]
 801829e:	4620      	mov	r0, r4
 80182a0:	f7fd fab6 	bl	8015810 <lv_cont_create>
        lv_obj_set_signal_cb(ext->scrl, lv_page_scrollable_signal);
 80182a4:	491b      	ldr	r1, [pc, #108]	; (8018314 <lv_page_create+0x1d0>)
        ext->scrl                = lv_cont_create(new_page, copy_ext->scrl);
 80182a6:	6068      	str	r0, [r5, #4]
        lv_obj_set_signal_cb(ext->scrl, lv_page_scrollable_signal);
 80182a8:	f7f6 faf6 	bl	800e898 <lv_obj_set_signal_cb>
        lv_page_set_sb_mode(new_page, copy_ext->sb.mode);
 80182ac:	f898 101c 	ldrb.w	r1, [r8, #28]
 80182b0:	4620      	mov	r0, r4
 80182b2:	f3c1 0182 	ubfx	r1, r1, #2, #3
 80182b6:	f7ff febf 	bl	8018038 <lv_page_set_sb_mode>
        lv_page_set_style(new_page, LV_PAGE_STYLE_BG, lv_page_get_style(copy, LV_PAGE_STYLE_BG));
 80182ba:	4639      	mov	r1, r7
 80182bc:	4630      	mov	r0, r6
 80182be:	f7ff ff28 	bl	8018112 <lv_page_get_style>
 80182c2:	4639      	mov	r1, r7
 80182c4:	4602      	mov	r2, r0
 80182c6:	4620      	mov	r0, r4
 80182c8:	f7ff fee9 	bl	801809e <lv_page_set_style>
        lv_page_set_style(new_page, LV_PAGE_STYLE_SCRL, lv_page_get_style(copy, LV_PAGE_STYLE_SCRL));
 80182cc:	2101      	movs	r1, #1
 80182ce:	4630      	mov	r0, r6
 80182d0:	f7ff ff1f 	bl	8018112 <lv_page_get_style>
 80182d4:	2101      	movs	r1, #1
 80182d6:	4602      	mov	r2, r0
 80182d8:	4620      	mov	r0, r4
 80182da:	f7ff fee0 	bl	801809e <lv_page_set_style>
    lv_page_ext_t * ext      = lv_obj_get_ext_attr(page);
 80182de:	4630      	mov	r0, r6
 80182e0:	f7f7 f989 	bl	800f5f6 <lv_obj_get_ext_attr>
        lv_page_set_style(new_page, LV_PAGE_STYLE_SB, lv_page_get_style(copy, LV_PAGE_STYLE_SB));
 80182e4:	2102      	movs	r1, #2
 80182e6:	6882      	ldr	r2, [r0, #8]
 80182e8:	4620      	mov	r0, r4
 80182ea:	f7ff fed8 	bl	801809e <lv_page_set_style>
        lv_obj_set_signal_cb(new_page, lv_page_signal);
 80182ee:	4620      	mov	r0, r4
 80182f0:	490b      	ldr	r1, [pc, #44]	; (8018320 <lv_page_create+0x1dc>)
 80182f2:	f7f6 fad1 	bl	800e898 <lv_obj_set_signal_cb>
        lv_obj_set_design_cb(new_page, lv_page_design);
 80182f6:	4620      	mov	r0, r4
 80182f8:	490a      	ldr	r1, [pc, #40]	; (8018324 <lv_page_create+0x1e0>)
 80182fa:	f7f6 facf 	bl	800e89c <lv_obj_set_design_cb>
        lv_obj_refresh_style(new_page);
 80182fe:	4620      	mov	r0, r4
 8018300:	f7f6 ffb7 	bl	800f272 <lv_obj_refresh_style>
 8018304:	e7aa      	b.n	801825c <lv_page_create+0x118>
 8018306:	bf00      	nop
 8018308:	2000b05c 	.word	0x2000b05c
 801830c:	2000b058 	.word	0x2000b058
 8018310:	2000c594 	.word	0x2000c594
 8018314:	0801889d 	.word	0x0801889d
 8018318:	08017fa9 	.word	0x08017fa9
 801831c:	08017bef 	.word	0x08017bef
 8018320:	080185f9 	.word	0x080185f9
 8018324:	08018335 	.word	0x08018335
 8018328:	2000c300 	.word	0x2000c300
 801832c:	2000c2c4 	.word	0x2000c2c4
 8018330:	2000c3b4 	.word	0x2000c3b4

08018334 <lv_page_design>:
{
 8018334:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(mode == LV_DESIGN_COVER_CHK) {
 8018336:	2a02      	cmp	r2, #2
{
 8018338:	b0a3      	sub	sp, #140	; 0x8c
 801833a:	4604      	mov	r4, r0
 801833c:	460f      	mov	r7, r1
 801833e:	4615      	mov	r5, r2
    if(mode == LV_DESIGN_COVER_CHK) {
 8018340:	d104      	bne.n	801834c <lv_page_design+0x18>
        return ancestor_design(page, mask, mode);
 8018342:	4b80      	ldr	r3, [pc, #512]	; (8018544 <lv_page_design+0x210>)
 8018344:	681b      	ldr	r3, [r3, #0]
 8018346:	4798      	blx	r3
}
 8018348:	b023      	add	sp, #140	; 0x8c
 801834a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    const lv_style_t * style = lv_page_get_style(page, LV_PAGE_STYLE_BG);
 801834c:	2100      	movs	r1, #0
 801834e:	f7ff fee0 	bl	8018112 <lv_page_get_style>
    lv_style_copy(&style_tmp, style);
 8018352:	4601      	mov	r1, r0
 8018354:	a804      	add	r0, sp, #16
 8018356:	f7f7 fc91 	bl	800fc7c <lv_style_copy>
    if(mode == LV_DESIGN_DRAW_MAIN) {
 801835a:	b96d      	cbnz	r5, 8018378 <lv_page_design+0x44>
        lv_draw_rect(&page->coords, mask, &style_tmp, lv_obj_get_opa_scale(page));
 801835c:	4620      	mov	r0, r4
        style_tmp.body.border.width = 0;
 801835e:	f8ad 501c 	strh.w	r5, [sp, #28]
        lv_draw_rect(&page->coords, mask, &style_tmp, lv_obj_get_opa_scale(page));
 8018362:	f7f7 f8e0 	bl	800f526 <lv_obj_get_opa_scale>
 8018366:	aa04      	add	r2, sp, #16
 8018368:	4603      	mov	r3, r0
 801836a:	4639      	mov	r1, r7
 801836c:	f104 0010 	add.w	r0, r4, #16
                lv_draw_rect(&flash_area, mask, &flash_style, lv_obj_get_opa_scale(page));
 8018370:	f7f9 f866 	bl	8011440 <lv_draw_rect>
    return true;
 8018374:	2001      	movs	r0, #1
 8018376:	e7e7      	b.n	8018348 <lv_page_design+0x14>
    } else if(mode == LV_DESIGN_DRAW_POST) {
 8018378:	2d01      	cmp	r5, #1
 801837a:	d1fb      	bne.n	8018374 <lv_page_design+0x40>
        style_tmp.body.shadow.width = 0;
 801837c:	2300      	movs	r3, #0
        lv_draw_rect(&page->coords, mask, &style_tmp, lv_obj_get_opa_scale(page));
 801837e:	4620      	mov	r0, r4
        style_tmp.body.shadow.width = 0;
 8018380:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
        style_tmp.body.opa          = LV_OPA_TRANSP;
 8018384:	f88d 3018 	strb.w	r3, [sp, #24]
        lv_draw_rect(&page->coords, mask, &style_tmp, lv_obj_get_opa_scale(page));
 8018388:	f7f7 f8cd 	bl	800f526 <lv_obj_get_opa_scale>
 801838c:	aa04      	add	r2, sp, #16
 801838e:	4603      	mov	r3, r0
 8018390:	4639      	mov	r1, r7
 8018392:	f104 0010 	add.w	r0, r4, #16
 8018396:	f7f9 f853 	bl	8011440 <lv_draw_rect>
        lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801839a:	4620      	mov	r0, r4
 801839c:	f7f7 f92b 	bl	800f5f6 <lv_obj_get_ext_attr>
        if(ext->sb.hor_draw && (ext->sb.mode & LV_SB_MODE_HIDE) == 0) {
 80183a0:	7f03      	ldrb	r3, [r0, #28]
 80183a2:	07da      	lsls	r2, r3, #31
        lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 80183a4:	4606      	mov	r6, r0
        if(ext->sb.hor_draw && (ext->sb.mode & LV_SB_MODE_HIDE) == 0) {
 80183a6:	d528      	bpl.n	80183fa <lv_page_design+0xc6>
 80183a8:	f3c3 0382 	ubfx	r3, r3, #2, #3
 80183ac:	075b      	lsls	r3, r3, #29
 80183ae:	d424      	bmi.n	80183fa <lv_page_design+0xc6>
            lv_area_copy(&sb_area, &ext->sb.hor_area);
 80183b0:	f100 010c 	add.w	r1, r0, #12
 80183b4:	4668      	mov	r0, sp
 80183b6:	f7ff fc15 	bl	8017be4 <lv_area_copy>
            sb_area.x1 += page->coords.x1;
 80183ba:	8a22      	ldrh	r2, [r4, #16]
 80183bc:	f8bd 3000 	ldrh.w	r3, [sp]
            sb_area.y1 += page->coords.y1;
 80183c0:	f8bd 1002 	ldrh.w	r1, [sp, #2]
            lv_draw_rect(&sb_area, mask, ext->sb.style, lv_obj_get_opa_scale(page));
 80183c4:	68b5      	ldr	r5, [r6, #8]
            sb_area.x1 += page->coords.x1;
 80183c6:	4413      	add	r3, r2
 80183c8:	f8ad 3000 	strh.w	r3, [sp]
            sb_area.y1 += page->coords.y1;
 80183cc:	8a63      	ldrh	r3, [r4, #18]
 80183ce:	4419      	add	r1, r3
 80183d0:	f8ad 1002 	strh.w	r1, [sp, #2]
            sb_area.x2 += page->coords.x1;
 80183d4:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80183d8:	440a      	add	r2, r1
 80183da:	f8ad 2004 	strh.w	r2, [sp, #4]
            sb_area.y2 += page->coords.y1;
 80183de:	f8bd 2006 	ldrh.w	r2, [sp, #6]
            lv_draw_rect(&sb_area, mask, ext->sb.style, lv_obj_get_opa_scale(page));
 80183e2:	4620      	mov	r0, r4
            sb_area.y2 += page->coords.y1;
 80183e4:	4413      	add	r3, r2
 80183e6:	f8ad 3006 	strh.w	r3, [sp, #6]
            lv_draw_rect(&sb_area, mask, ext->sb.style, lv_obj_get_opa_scale(page));
 80183ea:	f7f7 f89c 	bl	800f526 <lv_obj_get_opa_scale>
 80183ee:	462a      	mov	r2, r5
 80183f0:	4603      	mov	r3, r0
 80183f2:	4639      	mov	r1, r7
 80183f4:	4668      	mov	r0, sp
 80183f6:	f7f9 f823 	bl	8011440 <lv_draw_rect>
        if(ext->sb.ver_draw && (ext->sb.mode & LV_SB_MODE_HIDE) == 0) {
 80183fa:	7f33      	ldrb	r3, [r6, #28]
 80183fc:	079d      	lsls	r5, r3, #30
 80183fe:	d528      	bpl.n	8018452 <lv_page_design+0x11e>
 8018400:	f3c3 0382 	ubfx	r3, r3, #2, #3
 8018404:	0758      	lsls	r0, r3, #29
 8018406:	d424      	bmi.n	8018452 <lv_page_design+0x11e>
            lv_area_copy(&sb_area, &ext->sb.ver_area);
 8018408:	f106 0114 	add.w	r1, r6, #20
 801840c:	4668      	mov	r0, sp
 801840e:	f7ff fbe9 	bl	8017be4 <lv_area_copy>
            sb_area.x1 += page->coords.x1;
 8018412:	8a22      	ldrh	r2, [r4, #16]
 8018414:	f8bd 3000 	ldrh.w	r3, [sp]
            sb_area.y1 += page->coords.y1;
 8018418:	f8bd 1002 	ldrh.w	r1, [sp, #2]
            lv_draw_rect(&sb_area, mask, ext->sb.style, lv_obj_get_opa_scale(page));
 801841c:	68b5      	ldr	r5, [r6, #8]
            sb_area.x1 += page->coords.x1;
 801841e:	4413      	add	r3, r2
 8018420:	f8ad 3000 	strh.w	r3, [sp]
            sb_area.y1 += page->coords.y1;
 8018424:	8a63      	ldrh	r3, [r4, #18]
 8018426:	4419      	add	r1, r3
 8018428:	f8ad 1002 	strh.w	r1, [sp, #2]
            sb_area.x2 += page->coords.x1;
 801842c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8018430:	440a      	add	r2, r1
 8018432:	f8ad 2004 	strh.w	r2, [sp, #4]
            sb_area.y2 += page->coords.y1;
 8018436:	f8bd 2006 	ldrh.w	r2, [sp, #6]
            lv_draw_rect(&sb_area, mask, ext->sb.style, lv_obj_get_opa_scale(page));
 801843a:	4620      	mov	r0, r4
            sb_area.y2 += page->coords.y1;
 801843c:	4413      	add	r3, r2
 801843e:	f8ad 3006 	strh.w	r3, [sp, #6]
            lv_draw_rect(&sb_area, mask, ext->sb.style, lv_obj_get_opa_scale(page));
 8018442:	f7f7 f870 	bl	800f526 <lv_obj_get_opa_scale>
 8018446:	462a      	mov	r2, r5
 8018448:	4603      	mov	r3, r0
 801844a:	4639      	mov	r1, r7
 801844c:	4668      	mov	r0, sp
 801844e:	f7f8 fff7 	bl	8011440 <lv_draw_rect>
            lv_coord_t page_w = lv_obj_get_width(page);
 8018452:	4620      	mov	r0, r4
 8018454:	f7f6 ffd2 	bl	800f3fc <lv_obj_get_width>
 8018458:	4605      	mov	r5, r0
            lv_coord_t page_h = lv_obj_get_height(page);
 801845a:	4620      	mov	r0, r4
 801845c:	f7f6 ffd4 	bl	800f408 <lv_obj_get_height>
            if(ext->edge_flash.top_ip) {
 8018460:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 8018464:	0799      	lsls	r1, r3, #30
 8018466:	d533      	bpl.n	80184d0 <lv_page_design+0x19c>
                flash_area.x1 = page->coords.x1 - page_w;
 8018468:	8a22      	ldrh	r2, [r4, #16]
 801846a:	8c31      	ldrh	r1, [r6, #32]
 801846c:	b2a8      	uxth	r0, r5
 801846e:	1a12      	subs	r2, r2, r0
 8018470:	f8ad 2008 	strh.w	r2, [sp, #8]
                flash_area.x2 = page->coords.x2 + page_w;
 8018474:	8aa2      	ldrh	r2, [r4, #20]
 8018476:	4402      	add	r2, r0
 8018478:	f8ad 200c 	strh.w	r2, [sp, #12]
 801847c:	8a62      	ldrh	r2, [r4, #18]
 801847e:	440a      	add	r2, r1
                flash_area.y1 = page->coords.y1 - 3 * page_w + ext->edge_flash.state;
 8018480:	ebc0 3180 	rsb	r1, r0, r0, lsl #14
 8018484:	b292      	uxth	r2, r2
 8018486:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 801848a:	4410      	add	r0, r2
 801848c:	f8ad 000a 	strh.w	r0, [sp, #10]
                flash_area.y2 = page->coords.y1 + ext->edge_flash.state;
 8018490:	f8ad 200e 	strh.w	r2, [sp, #14]
            if(ext->edge_flash.left_ip || ext->edge_flash.right_ip || ext->edge_flash.top_ip ||
 8018494:	f013 0f1e 	tst.w	r3, #30
 8018498:	f43f af6c 	beq.w	8018374 <lv_page_design+0x40>
                lv_style_copy(&flash_style, ext->edge_flash.style);
 801849c:	6a71      	ldr	r1, [r6, #36]	; 0x24
 801849e:	a813      	add	r0, sp, #76	; 0x4c
 80184a0:	f7f7 fbec 	bl	800fc7c <lv_style_copy>
                flash_style.body.radius = LV_RADIUS_CIRCLE;
 80184a4:	f647 4318 	movw	r3, #31768	; 0x7c18
                uint32_t opa            = (flash_style.body.opa * ext->edge_flash.state) / LV_PAGE_END_FLASH_SIZE;
 80184a8:	8c32      	ldrh	r2, [r6, #32]
                flash_style.body.radius = LV_RADIUS_CIRCLE;
 80184aa:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
                uint32_t opa            = (flash_style.body.opa * ext->edge_flash.state) / LV_PAGE_END_FLASH_SIZE;
 80184ae:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
                lv_draw_rect(&flash_area, mask, &flash_style, lv_obj_get_opa_scale(page));
 80184b2:	4620      	mov	r0, r4
                uint32_t opa            = (flash_style.body.opa * ext->edge_flash.state) / LV_PAGE_END_FLASH_SIZE;
 80184b4:	fb13 f302 	smulbb	r3, r3, r2
 80184b8:	2206      	movs	r2, #6
 80184ba:	fb93 f3f2 	sdiv	r3, r3, r2
                flash_style.body.opa    = opa;
 80184be:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
                lv_draw_rect(&flash_area, mask, &flash_style, lv_obj_get_opa_scale(page));
 80184c2:	f7f7 f830 	bl	800f526 <lv_obj_get_opa_scale>
 80184c6:	aa13      	add	r2, sp, #76	; 0x4c
 80184c8:	4603      	mov	r3, r0
 80184ca:	4639      	mov	r1, r7
 80184cc:	a802      	add	r0, sp, #8
 80184ce:	e74f      	b.n	8018370 <lv_page_design+0x3c>
            } else if(ext->edge_flash.bottom_ip) {
 80184d0:	075a      	lsls	r2, r3, #29
 80184d2:	d514      	bpl.n	80184fe <lv_page_design+0x1ca>
                flash_area.x1 = page->coords.x1 - page_w;
 80184d4:	8a22      	ldrh	r2, [r4, #16]
                flash_area.y1 = page->coords.y2 - ext->edge_flash.state;
 80184d6:	8c31      	ldrh	r1, [r6, #32]
                flash_area.x1 = page->coords.x1 - page_w;
 80184d8:	b2a8      	uxth	r0, r5
 80184da:	1a12      	subs	r2, r2, r0
 80184dc:	f8ad 2008 	strh.w	r2, [sp, #8]
                flash_area.x2 = page->coords.x2 + page_w;
 80184e0:	8aa2      	ldrh	r2, [r4, #20]
 80184e2:	4402      	add	r2, r0
 80184e4:	f8ad 200c 	strh.w	r2, [sp, #12]
                flash_area.y1 = page->coords.y2 - ext->edge_flash.state;
 80184e8:	8ae2      	ldrh	r2, [r4, #22]
 80184ea:	1a52      	subs	r2, r2, r1
 80184ec:	b292      	uxth	r2, r2
 80184ee:	f8ad 200a 	strh.w	r2, [sp, #10]
                flash_area.y2 = page->coords.y2 + 3 * page_w - ext->edge_flash.state;
 80184f2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
                flash_area.y2 = page->coords.y2 + page_h;
 80184f6:	4410      	add	r0, r2
 80184f8:	f8ad 000e 	strh.w	r0, [sp, #14]
 80184fc:	e7ca      	b.n	8018494 <lv_page_design+0x160>
            } else if(ext->edge_flash.right_ip) {
 80184fe:	0719      	lsls	r1, r3, #28
 8018500:	d511      	bpl.n	8018526 <lv_page_design+0x1f2>
                flash_area.x1 = page->coords.x2 - ext->edge_flash.state;
 8018502:	8c31      	ldrh	r1, [r6, #32]
 8018504:	8aa2      	ldrh	r2, [r4, #20]
                flash_area.x2 = page->coords.x2 + 3 * page_h - ext->edge_flash.state;
 8018506:	b280      	uxth	r0, r0
                flash_area.x1 = page->coords.x2 - ext->edge_flash.state;
 8018508:	1a52      	subs	r2, r2, r1
 801850a:	b292      	uxth	r2, r2
                flash_area.x2 = page->coords.x2 + 3 * page_h - ext->edge_flash.state;
 801850c:	eb00 0140 	add.w	r1, r0, r0, lsl #1
                flash_area.x1 = page->coords.x2 - ext->edge_flash.state;
 8018510:	f8ad 2008 	strh.w	r2, [sp, #8]
                flash_area.x2 = page->coords.x2 + 3 * page_h - ext->edge_flash.state;
 8018514:	440a      	add	r2, r1
                flash_area.x2 = page->coords.x1 + ext->edge_flash.state;
 8018516:	f8ad 200c 	strh.w	r2, [sp, #12]
                flash_area.y1 = page->coords.y1 - page_h;
 801851a:	8a62      	ldrh	r2, [r4, #18]
 801851c:	1a12      	subs	r2, r2, r0
 801851e:	f8ad 200a 	strh.w	r2, [sp, #10]
                flash_area.y2 = page->coords.y2 + page_h;
 8018522:	8ae2      	ldrh	r2, [r4, #22]
 8018524:	e7e7      	b.n	80184f6 <lv_page_design+0x1c2>
            } else if(ext->edge_flash.left_ip) {
 8018526:	06da      	lsls	r2, r3, #27
 8018528:	d5b4      	bpl.n	8018494 <lv_page_design+0x160>
 801852a:	8c31      	ldrh	r1, [r6, #32]
 801852c:	8a22      	ldrh	r2, [r4, #16]
                flash_area.x1 = page->coords.x1 - 3 * page_h + ext->edge_flash.state;
 801852e:	b280      	uxth	r0, r0
 8018530:	440a      	add	r2, r1
 8018532:	ebc0 3180 	rsb	r1, r0, r0, lsl #14
 8018536:	b292      	uxth	r2, r2
 8018538:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801853c:	4411      	add	r1, r2
 801853e:	f8ad 1008 	strh.w	r1, [sp, #8]
 8018542:	e7e8      	b.n	8018516 <lv_page_design+0x1e2>
 8018544:	2000b058 	.word	0x2000b058

08018548 <lv_page_scroll_hor>:
{
 8018548:	b510      	push	{r4, lr}
 801854a:	b08a      	sub	sp, #40	; 0x28
 801854c:	460c      	mov	r4, r1
    lv_obj_t * scrl = lv_page_get_scrl(page);
 801854e:	f7ff fdd6 	bl	80180fe <lv_page_get_scrl>
    a.var            = scrl;
 8018552:	9000      	str	r0, [sp, #0]
    a.start          = lv_obj_get_x(scrl);
 8018554:	f7f6 ff46 	bl	800f3e4 <lv_obj_get_x>
    a.time           = LV_PAGE_SCROLL_ANIM_TIME;
 8018558:	22c8      	movs	r2, #200	; 0xc8
 801855a:	f8ad 2018 	strh.w	r2, [sp, #24]
    a.exec_cb        = (lv_anim_exec_xcb_t)lv_obj_set_x;
 801855e:	4b0e      	ldr	r3, [pc, #56]	; (8018598 <lv_page_scroll_hor+0x50>)
    a.playback       = 0;
 8018560:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
    a.exec_cb        = (lv_anim_exec_xcb_t)lv_obj_set_x;
 8018564:	9301      	str	r3, [sp, #4]
    a.path_cb        = lv_anim_path_linear;
 8018566:	4b0d      	ldr	r3, [pc, #52]	; (801859c <lv_page_scroll_hor+0x54>)
 8018568:	9302      	str	r3, [sp, #8]
    a.repeat         = 0;
 801856a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    a.ready_cb       = NULL;
 801856e:	2300      	movs	r3, #0
    a.start          = lv_obj_get_x(scrl);
 8018570:	9004      	str	r0, [sp, #16]
    a.end            = a.start + dist;
 8018572:	4404      	add	r4, r0
    a.repeat         = 0;
 8018574:	f363 0241 	bfi	r2, r3, #1, #1
    lv_anim_create(&a);
 8018578:	4668      	mov	r0, sp
    a.end            = a.start + dist;
 801857a:	9405      	str	r4, [sp, #20]
    a.ready_cb       = NULL;
 801857c:	9303      	str	r3, [sp, #12]
    a.act_time       = 0;
 801857e:	f8ad 301a 	strh.w	r3, [sp, #26]
    a.playback_pause = 0;
 8018582:	f8ad 301c 	strh.w	r3, [sp, #28]
    a.repeat         = 0;
 8018586:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
    a.repeat_pause   = 0;
 801858a:	f8ad 301e 	strh.w	r3, [sp, #30]
    lv_anim_create(&a);
 801858e:	f7fb fcc3 	bl	8013f18 <lv_anim_create>
}
 8018592:	b00a      	add	sp, #40	; 0x28
 8018594:	bd10      	pop	{r4, pc}
 8018596:	bf00      	nop
 8018598:	0800ea5d 	.word	0x0800ea5d
 801859c:	08013d41 	.word	0x08013d41

080185a0 <lv_page_scroll_ver>:
{
 80185a0:	b510      	push	{r4, lr}
 80185a2:	b08a      	sub	sp, #40	; 0x28
 80185a4:	460c      	mov	r4, r1
    lv_obj_t * scrl = lv_page_get_scrl(page);
 80185a6:	f7ff fdaa 	bl	80180fe <lv_page_get_scrl>
    a.var            = scrl;
 80185aa:	9000      	str	r0, [sp, #0]
    a.start          = lv_obj_get_y(scrl);
 80185ac:	f7f6 ff20 	bl	800f3f0 <lv_obj_get_y>
    a.time           = LV_PAGE_SCROLL_ANIM_TIME;
 80185b0:	22c8      	movs	r2, #200	; 0xc8
 80185b2:	f8ad 2018 	strh.w	r2, [sp, #24]
    a.exec_cb        = (lv_anim_exec_xcb_t)lv_obj_set_y;
 80185b6:	4b0e      	ldr	r3, [pc, #56]	; (80185f0 <lv_page_scroll_ver+0x50>)
    a.playback       = 0;
 80185b8:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
    a.exec_cb        = (lv_anim_exec_xcb_t)lv_obj_set_y;
 80185bc:	9301      	str	r3, [sp, #4]
    a.path_cb        = lv_anim_path_linear;
 80185be:	4b0d      	ldr	r3, [pc, #52]	; (80185f4 <lv_page_scroll_ver+0x54>)
 80185c0:	9302      	str	r3, [sp, #8]
    a.repeat         = 0;
 80185c2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    a.ready_cb       = NULL;
 80185c6:	2300      	movs	r3, #0
    a.start          = lv_obj_get_y(scrl);
 80185c8:	9004      	str	r0, [sp, #16]
    a.end            = a.start + dist;
 80185ca:	4404      	add	r4, r0
    a.repeat         = 0;
 80185cc:	f363 0241 	bfi	r2, r3, #1, #1
    lv_anim_create(&a);
 80185d0:	4668      	mov	r0, sp
    a.end            = a.start + dist;
 80185d2:	9405      	str	r4, [sp, #20]
    a.ready_cb       = NULL;
 80185d4:	9303      	str	r3, [sp, #12]
    a.act_time       = 0;
 80185d6:	f8ad 301a 	strh.w	r3, [sp, #26]
    a.playback_pause = 0;
 80185da:	f8ad 301c 	strh.w	r3, [sp, #28]
    a.repeat         = 0;
 80185de:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
    a.repeat_pause   = 0;
 80185e2:	f8ad 301e 	strh.w	r3, [sp, #30]
    lv_anim_create(&a);
 80185e6:	f7fb fc97 	bl	8013f18 <lv_anim_create>
}
 80185ea:	b00a      	add	sp, #40	; 0x28
 80185ec:	bd10      	pop	{r4, pc}
 80185ee:	bf00      	nop
 80185f0:	0800ea71 	.word	0x0800ea71
 80185f4:	08013d41 	.word	0x08013d41

080185f8 <lv_page_signal>:
{
 80185f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    res = ancestor_signal(page, sign, param);
 80185fc:	4b8c      	ldr	r3, [pc, #560]	; (8018830 <lv_page_signal+0x238>)
 80185fe:	681b      	ldr	r3, [r3, #0]
{
 8018600:	4604      	mov	r4, r0
 8018602:	460e      	mov	r6, r1
 8018604:	4615      	mov	r5, r2
    res = ancestor_signal(page, sign, param);
 8018606:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8018608:	2801      	cmp	r0, #1
    res = ancestor_signal(page, sign, param);
 801860a:	4607      	mov	r7, r0
    if(res != LV_RES_OK) return res;
 801860c:	d11e      	bne.n	801864c <lv_page_signal+0x54>
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801860e:	4620      	mov	r0, r4
 8018610:	f7f6 fff1 	bl	800f5f6 <lv_obj_get_ext_attr>
    if(sign == LV_SIGNAL_CHILD_CHG) { /*Automatically move children to the scrollable object*/
 8018614:	2e01      	cmp	r6, #1
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 8018616:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_CHILD_CHG) { /*Automatically move children to the scrollable object*/
 8018618:	d151      	bne.n	80186be <lv_page_signal+0xc6>
        const lv_style_t * style = lv_page_get_style(page, LV_PAGE_STYLE_SCRL);
 801861a:	4639      	mov	r1, r7
 801861c:	4620      	mov	r0, r4
 801861e:	f7ff fd78 	bl	8018112 <lv_page_get_style>
 8018622:	4681      	mov	r9, r0
    return lv_cont_get_fit_left(lv_page_get_scrl(page));
 8018624:	4620      	mov	r0, r4
 8018626:	f7ff fd6a 	bl	80180fe <lv_page_get_scrl>
 801862a:	f7fd fc8b 	bl	8015f44 <lv_cont_get_fit_left>
 801862e:	4682      	mov	sl, r0
    return lv_cont_get_fit_top(lv_page_get_scrl(page));
 8018630:	4620      	mov	r0, r4
 8018632:	f7ff fd64 	bl	80180fe <lv_page_get_scrl>
 8018636:	f7fd fc8c 	bl	8015f52 <lv_cont_get_fit_top>
        child                    = lv_obj_get_child(page, NULL);
 801863a:	2100      	movs	r1, #0
 801863c:	4606      	mov	r6, r0
 801863e:	4620      	mov	r0, r4
 8018640:	f7f6 fe9e 	bl	800f380 <lv_obj_get_child>
                if((tmp->coords.y1 == page->coords.y1) && (fit_top == LV_FIT_TIGHT || fit_top == LV_FIT_FILL)) {
 8018644:	f006 06fd 	and.w	r6, r6, #253	; 0xfd
        child                    = lv_obj_get_child(page, NULL);
 8018648:	4605      	mov	r5, r0
        while(child != NULL) {
 801864a:	b915      	cbnz	r5, 8018652 <lv_page_signal+0x5a>
}
 801864c:	4638      	mov	r0, r7
 801864e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(lv_obj_is_protected(child, LV_PROTECT_PARENT) == false) {
 8018652:	2102      	movs	r1, #2
 8018654:	4628      	mov	r0, r5
 8018656:	f7f6 ffc3 	bl	800f5e0 <lv_obj_is_protected>
                child          = lv_obj_get_child(page, child); /*Get the next child before move this*/
 801865a:	4629      	mov	r1, r5
            if(lv_obj_is_protected(child, LV_PROTECT_PARENT) == false) {
 801865c:	bb50      	cbnz	r0, 80186b4 <lv_page_signal+0xbc>
                child          = lv_obj_get_child(page, child); /*Get the next child before move this*/
 801865e:	4620      	mov	r0, r4
 8018660:	f7f6 fe8e 	bl	800f380 <lv_obj_get_child>
                if((tmp->coords.x1 == page->coords.x1) && (fit_left == LV_FIT_TIGHT || fit_left == LV_FIT_FILL)) {
 8018664:	f9b5 3010 	ldrsh.w	r3, [r5, #16]
 8018668:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 801866c:	429a      	cmp	r2, r3
                child          = lv_obj_get_child(page, child); /*Get the next child before move this*/
 801866e:	4683      	mov	fp, r0
                if((tmp->coords.x1 == page->coords.x1) && (fit_left == LV_FIT_TIGHT || fit_left == LV_FIT_FILL)) {
 8018670:	d10a      	bne.n	8018688 <lv_page_signal+0x90>
 8018672:	f00a 03fd 	and.w	r3, sl, #253	; 0xfd
 8018676:	2b01      	cmp	r3, #1
 8018678:	d106      	bne.n	8018688 <lv_page_signal+0x90>
                    tmp->coords.x1 += style->body.padding.left;
 801867a:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 801867e:	441a      	add	r2, r3
 8018680:	822a      	strh	r2, [r5, #16]
                    tmp->coords.x2 += style->body.padding.left;
 8018682:	8aaa      	ldrh	r2, [r5, #20]
 8018684:	4413      	add	r3, r2
 8018686:	82ab      	strh	r3, [r5, #20]
                if((tmp->coords.y1 == page->coords.y1) && (fit_top == LV_FIT_TIGHT || fit_top == LV_FIT_FILL)) {
 8018688:	f9b5 3012 	ldrsh.w	r3, [r5, #18]
 801868c:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 8018690:	429a      	cmp	r2, r3
 8018692:	d108      	bne.n	80186a6 <lv_page_signal+0xae>
 8018694:	2e01      	cmp	r6, #1
 8018696:	d106      	bne.n	80186a6 <lv_page_signal+0xae>
                    tmp->coords.y1 += style->body.padding.top;
 8018698:	f8b9 3016 	ldrh.w	r3, [r9, #22]
 801869c:	441a      	add	r2, r3
 801869e:	826a      	strh	r2, [r5, #18]
                    tmp->coords.y2 += style->body.padding.top;
 80186a0:	8aea      	ldrh	r2, [r5, #22]
 80186a2:	4413      	add	r3, r2
 80186a4:	82eb      	strh	r3, [r5, #22]
                lv_obj_set_parent(tmp, ext->scrl);
 80186a6:	4628      	mov	r0, r5
 80186a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80186ac:	f7f6 fd56 	bl	800f15c <lv_obj_set_parent>
                child          = lv_obj_get_child(page, child); /*Get the next child before move this*/
 80186b0:	465d      	mov	r5, fp
 80186b2:	e7ca      	b.n	801864a <lv_page_signal+0x52>
                child = lv_obj_get_child(page, child);
 80186b4:	4620      	mov	r0, r4
 80186b6:	f7f6 fe63 	bl	800f380 <lv_obj_get_child>
 80186ba:	4605      	mov	r5, r0
 80186bc:	e7c5      	b.n	801864a <lv_page_signal+0x52>
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 80186be:	2e04      	cmp	r6, #4
 80186c0:	d110      	bne.n	80186e4 <lv_page_signal+0xec>
        ext->scrl->signal_cb(ext->scrl, LV_SIGNAL_CORD_CHG, &ext->scrl->coords);
 80186c2:	6840      	ldr	r0, [r0, #4]
 80186c4:	2102      	movs	r1, #2
 80186c6:	69c3      	ldr	r3, [r0, #28]
 80186c8:	f100 0210 	add.w	r2, r0, #16
 80186cc:	4798      	blx	r3
        if(ext->sb.hor_draw || ext->sb.ver_draw) lv_page_sb_refresh(page);
 80186ce:	f898 301c 	ldrb.w	r3, [r8, #28]
 80186d2:	079a      	lsls	r2, r3, #30
 80186d4:	d002      	beq.n	80186dc <lv_page_signal+0xe4>
 80186d6:	4620      	mov	r0, r4
 80186d8:	f7ff fa9a 	bl	8017c10 <lv_page_sb_refresh>
        lv_obj_refresh_ext_draw_pad(page);
 80186dc:	4620      	mov	r0, r4
 80186de:	f7f6 fdd6 	bl	800f28e <lv_obj_refresh_ext_draw_pad>
 80186e2:	e7b3      	b.n	801864c <lv_page_signal+0x54>
    } else if(sign == LV_SIGNAL_CORD_CHG) {
 80186e4:	2e02      	cmp	r6, #2
 80186e6:	d126      	bne.n	8018736 <lv_page_signal+0x13e>
        if(ext->scrl != NULL && (lv_obj_get_width(page) != lv_area_get_width(param) ||
 80186e8:	6843      	ldr	r3, [r0, #4]
 80186ea:	2b00      	cmp	r3, #0
 80186ec:	d0ae      	beq.n	801864c <lv_page_signal+0x54>
 80186ee:	4620      	mov	r0, r4
 80186f0:	f7f6 fe84 	bl	800f3fc <lv_obj_get_width>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return area_p->x2 - area_p->x1 + 1;
 80186f4:	88ab      	ldrh	r3, [r5, #4]
 80186f6:	882a      	ldrh	r2, [r5, #0]
 80186f8:	3301      	adds	r3, #1
 80186fa:	1a9b      	subs	r3, r3, r2
 80186fc:	b21b      	sxth	r3, r3
 80186fe:	4298      	cmp	r0, r3
 8018700:	d00e      	beq.n	8018720 <lv_page_signal+0x128>
            ext->scrl->signal_cb(ext->scrl, LV_SIGNAL_CORD_CHG, &ext->scrl->coords);
 8018702:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018706:	2102      	movs	r1, #2
 8018708:	69c3      	ldr	r3, [r0, #28]
 801870a:	f100 0210 	add.w	r2, r0, #16
 801870e:	4798      	blx	r3
            if(ext->sb.hor_draw || ext->sb.ver_draw) lv_page_sb_refresh(page);
 8018710:	f898 301c 	ldrb.w	r3, [r8, #28]
 8018714:	079b      	lsls	r3, r3, #30
 8018716:	d099      	beq.n	801864c <lv_page_signal+0x54>
 8018718:	4620      	mov	r0, r4
 801871a:	f7ff fa79 	bl	8017c10 <lv_page_sb_refresh>
 801871e:	e795      	b.n	801864c <lv_page_signal+0x54>
                                 lv_obj_get_height(page) != lv_area_get_height(param))) {
 8018720:	4620      	mov	r0, r4
 8018722:	f7f6 fe71 	bl	800f408 <lv_obj_get_height>
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 8018726:	88eb      	ldrh	r3, [r5, #6]
 8018728:	886a      	ldrh	r2, [r5, #2]
 801872a:	3301      	adds	r3, #1
 801872c:	1a9b      	subs	r3, r3, r2
        if(ext->scrl != NULL && (lv_obj_get_width(page) != lv_area_get_width(param) ||
 801872e:	b21b      	sxth	r3, r3
 8018730:	4298      	cmp	r0, r3
 8018732:	d1e6      	bne.n	8018702 <lv_page_signal+0x10a>
 8018734:	e78a      	b.n	801864c <lv_page_signal+0x54>
    } else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 8018736:	2e05      	cmp	r6, #5
 8018738:	d112      	bne.n	8018760 <lv_page_signal+0x168>
        if(page->ext_draw_pad < (-ext->sb.style->body.padding.right))
 801873a:	6882      	ldr	r2, [r0, #8]
 801873c:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
 8018740:	f9b2 301c 	ldrsh.w	r3, [r2, #28]
 8018744:	425b      	negs	r3, r3
 8018746:	4299      	cmp	r1, r3
            page->ext_draw_pad = -ext->sb.style->body.padding.right;
 8018748:	bfb8      	it	lt
 801874a:	86a3      	strhlt	r3, [r4, #52]	; 0x34
        if(page->ext_draw_pad < (-ext->sb.style->body.padding.bottom))
 801874c:	f9b2 3018 	ldrsh.w	r3, [r2, #24]
 8018750:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 8018754:	425b      	negs	r3, r3
 8018756:	429a      	cmp	r2, r3
 8018758:	f6bf af78 	bge.w	801864c <lv_page_signal+0x54>
            page->ext_draw_pad = -ext->sb.style->body.padding.bottom;
 801875c:	86a3      	strh	r3, [r4, #52]	; 0x34
 801875e:	e775      	b.n	801864c <lv_page_signal+0x54>
    } else if(sign == LV_SIGNAL_CONTROL) {
 8018760:	2e11      	cmp	r6, #17
 8018762:	d151      	bne.n	8018808 <lv_page_signal+0x210>
        uint32_t c = *((uint32_t *)param);
 8018764:	682b      	ldr	r3, [r5, #0]
        if(c == LV_KEY_DOWN) {
 8018766:	2b12      	cmp	r3, #18
 8018768:	d107      	bne.n	801877a <lv_page_signal+0x182>
            lv_page_scroll_ver(page, -lv_obj_get_height(page) / 4);
 801876a:	4620      	mov	r0, r4
 801876c:	f7f6 fe4c 	bl	800f408 <lv_obj_get_height>
 8018770:	2104      	movs	r1, #4
 8018772:	fb90 f1f1 	sdiv	r1, r0, r1
                lv_page_scroll_ver(page, -lv_obj_get_height(page) / 4);
 8018776:	4249      	negs	r1, r1
 8018778:	e007      	b.n	801878a <lv_page_signal+0x192>
        } else if(c == LV_KEY_UP) {
 801877a:	2b11      	cmp	r3, #17
 801877c:	d10a      	bne.n	8018794 <lv_page_signal+0x19c>
            lv_page_scroll_ver(page, lv_obj_get_height(page) / 4);
 801877e:	4620      	mov	r0, r4
 8018780:	f7f6 fe42 	bl	800f408 <lv_obj_get_height>
 8018784:	2104      	movs	r1, #4
 8018786:	fb90 f1f1 	sdiv	r1, r0, r1
                lv_page_scroll_ver(page, lv_obj_get_height(page) / 4);
 801878a:	b209      	sxth	r1, r1
 801878c:	4620      	mov	r0, r4
 801878e:	f7ff ff07 	bl	80185a0 <lv_page_scroll_ver>
 8018792:	e75b      	b.n	801864c <lv_page_signal+0x54>
        } else if(c == LV_KEY_RIGHT) {
 8018794:	2b13      	cmp	r3, #19
 8018796:	d11c      	bne.n	80187d2 <lv_page_signal+0x1da>
    return lv_obj_get_width(lv_page_get_scrl(page));
 8018798:	4620      	mov	r0, r4
 801879a:	f7ff fcb0 	bl	80180fe <lv_page_get_scrl>
 801879e:	f7f6 fe2d 	bl	800f3fc <lv_obj_get_width>
 80187a2:	4605      	mov	r5, r0
            if(lv_page_get_scrl_width(page) <= lv_obj_get_width(page))
 80187a4:	4620      	mov	r0, r4
 80187a6:	f7f6 fe29 	bl	800f3fc <lv_obj_get_width>
 80187aa:	42a8      	cmp	r0, r5
 80187ac:	f04f 0504 	mov.w	r5, #4
                lv_page_scroll_ver(page, -lv_obj_get_height(page) / 4);
 80187b0:	4620      	mov	r0, r4
            if(lv_page_get_scrl_width(page) <= lv_obj_get_width(page))
 80187b2:	db04      	blt.n	80187be <lv_page_signal+0x1c6>
                lv_page_scroll_ver(page, -lv_obj_get_height(page) / 4);
 80187b4:	f7f6 fe28 	bl	800f408 <lv_obj_get_height>
 80187b8:	fb90 f1f5 	sdiv	r1, r0, r5
 80187bc:	e7db      	b.n	8018776 <lv_page_signal+0x17e>
                lv_page_scroll_hor(page, -lv_obj_get_width(page) / 4);
 80187be:	f7f6 fe1d 	bl	800f3fc <lv_obj_get_width>
 80187c2:	fb90 f1f5 	sdiv	r1, r0, r5
 80187c6:	4249      	negs	r1, r1
                lv_page_scroll_hor(page, lv_obj_get_width(page) / 4);
 80187c8:	b209      	sxth	r1, r1
 80187ca:	4620      	mov	r0, r4
 80187cc:	f7ff febc 	bl	8018548 <lv_page_scroll_hor>
 80187d0:	e73c      	b.n	801864c <lv_page_signal+0x54>
        } else if(c == LV_KEY_LEFT) {
 80187d2:	2b14      	cmp	r3, #20
 80187d4:	f47f af3a 	bne.w	801864c <lv_page_signal+0x54>
 80187d8:	4620      	mov	r0, r4
 80187da:	f7ff fc90 	bl	80180fe <lv_page_get_scrl>
 80187de:	f7f6 fe0d 	bl	800f3fc <lv_obj_get_width>
 80187e2:	4605      	mov	r5, r0
            if(lv_page_get_scrl_width(page) <= lv_obj_get_width(page))
 80187e4:	4620      	mov	r0, r4
 80187e6:	f7f6 fe09 	bl	800f3fc <lv_obj_get_width>
 80187ea:	42a8      	cmp	r0, r5
 80187ec:	f04f 0504 	mov.w	r5, #4
                lv_page_scroll_ver(page, lv_obj_get_height(page) / 4);
 80187f0:	4620      	mov	r0, r4
            if(lv_page_get_scrl_width(page) <= lv_obj_get_width(page))
 80187f2:	db04      	blt.n	80187fe <lv_page_signal+0x206>
                lv_page_scroll_ver(page, lv_obj_get_height(page) / 4);
 80187f4:	f7f6 fe08 	bl	800f408 <lv_obj_get_height>
 80187f8:	fb90 f1f5 	sdiv	r1, r0, r5
 80187fc:	e7c5      	b.n	801878a <lv_page_signal+0x192>
                lv_page_scroll_hor(page, lv_obj_get_width(page) / 4);
 80187fe:	f7f6 fdfd 	bl	800f3fc <lv_obj_get_width>
 8018802:	fb90 f1f5 	sdiv	r1, r0, r5
 8018806:	e7df      	b.n	80187c8 <lv_page_signal+0x1d0>
    } else if(sign == LV_SIGNAL_GET_EDITABLE) {
 8018808:	2e12      	cmp	r6, #18
 801880a:	d101      	bne.n	8018810 <lv_page_signal+0x218>
        *editable       = true;
 801880c:	702f      	strb	r7, [r5, #0]
 801880e:	e71d      	b.n	801864c <lv_page_signal+0x54>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8018810:	2e06      	cmp	r6, #6
 8018812:	f47f af1b 	bne.w	801864c <lv_page_signal+0x54>
 8018816:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 8018818:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 801881c:	b2da      	uxtb	r2, r3
 801881e:	b119      	cbz	r1, 8018828 <lv_page_signal+0x230>
 8018820:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8018822:	2b07      	cmp	r3, #7
 8018824:	d1f8      	bne.n	8018818 <lv_page_signal+0x220>
 8018826:	461a      	mov	r2, r3
        buf->type[i] = "lv_page";
 8018828:	4b02      	ldr	r3, [pc, #8]	; (8018834 <lv_page_signal+0x23c>)
 801882a:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
 801882e:	e70d      	b.n	801864c <lv_page_signal+0x54>
 8018830:	2000b05c 	.word	0x2000b05c
 8018834:	080ec41c 	.word	0x080ec41c

08018838 <lv_page_start_edge_flash>:
{
 8018838:	b510      	push	{r4, lr}
 801883a:	b08a      	sub	sp, #40	; 0x28
 801883c:	4604      	mov	r4, r0
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801883e:	f7f6 feda 	bl	800f5f6 <lv_obj_get_ext_attr>
    if(ext->edge_flash.enabled) {
 8018842:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8018846:	07db      	lsls	r3, r3, #31
 8018848:	d51f      	bpl.n	801888a <lv_page_start_edge_flash+0x52>
        a.end            = LV_PAGE_END_FLASH_SIZE;
 801884a:	2206      	movs	r2, #6
 801884c:	9205      	str	r2, [sp, #20]
        a.exec_cb        = (lv_anim_exec_xcb_t)edge_flash_anim;
 801884e:	4a10      	ldr	r2, [pc, #64]	; (8018890 <lv_page_start_edge_flash+0x58>)
 8018850:	9201      	str	r2, [sp, #4]
        a.path_cb        = lv_anim_path_linear;
 8018852:	4a10      	ldr	r2, [pc, #64]	; (8018894 <lv_page_start_edge_flash+0x5c>)
 8018854:	9202      	str	r2, [sp, #8]
        a.ready_cb       = edge_flash_anim_end;
 8018856:	4a10      	ldr	r2, [pc, #64]	; (8018898 <lv_page_start_edge_flash+0x60>)
 8018858:	9203      	str	r2, [sp, #12]
        a.playback       = 1;
 801885a:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
        a.var            = page;
 801885e:	9400      	str	r4, [sp, #0]
        a.start          = 0;
 8018860:	2300      	movs	r3, #0
        a.repeat         = 0;
 8018862:	f042 0201 	orr.w	r2, r2, #1
        a.time           = LV_PAGE_END_ANIM_TIME;
 8018866:	f44f 7196 	mov.w	r1, #300	; 0x12c
        a.repeat         = 0;
 801886a:	f363 0241 	bfi	r2, r3, #1, #1
        lv_anim_create(&a);
 801886e:	4668      	mov	r0, sp
        a.start          = 0;
 8018870:	9304      	str	r3, [sp, #16]
        a.act_time       = 0;
 8018872:	f8ad 301a 	strh.w	r3, [sp, #26]
        a.time           = LV_PAGE_END_ANIM_TIME;
 8018876:	f8ad 1018 	strh.w	r1, [sp, #24]
        a.playback_pause = LV_PAGE_END_ANIM_WAIT_TIME;
 801887a:	f8ad 101c 	strh.w	r1, [sp, #28]
        a.repeat         = 0;
 801887e:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
        a.repeat_pause   = 0;
 8018882:	f8ad 301e 	strh.w	r3, [sp, #30]
        lv_anim_create(&a);
 8018886:	f7fb fb47 	bl	8013f18 <lv_anim_create>
}
 801888a:	b00a      	add	sp, #40	; 0x28
 801888c:	bd10      	pop	{r4, pc}
 801888e:	bf00      	nop
 8018890:	08017f93 	.word	0x08017f93
 8018894:	08013d41 	.word	0x08013d41
 8018898:	08017f6f 	.word	0x08017f6f

0801889c <lv_page_scrollable_signal>:
{
 801889c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    res = ancestor_signal(scrl, sign, param);
 80188a0:	4bc1      	ldr	r3, [pc, #772]	; (8018ba8 <lv_page_scrollable_signal+0x30c>)
{
 80188a2:	b08f      	sub	sp, #60	; 0x3c
    res = ancestor_signal(scrl, sign, param);
 80188a4:	681b      	ldr	r3, [r3, #0]
{
 80188a6:	9200      	str	r2, [sp, #0]
 80188a8:	4680      	mov	r8, r0
 80188aa:	460d      	mov	r5, r1
    res = ancestor_signal(scrl, sign, param);
 80188ac:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 80188ae:	2801      	cmp	r0, #1
    res = ancestor_signal(scrl, sign, param);
 80188b0:	9005      	str	r0, [sp, #20]
    if(res != LV_RES_OK) return res;
 80188b2:	f040 8160 	bne.w	8018b76 <lv_page_scrollable_signal+0x2da>
    lv_obj_t * page               = lv_obj_get_parent(scrl);
 80188b6:	4640      	mov	r0, r8
 80188b8:	f7f6 fd60 	bl	800f37c <lv_obj_get_parent>
 80188bc:	4607      	mov	r7, r0
    const lv_style_t * page_style = lv_obj_get_style(page);
 80188be:	f7f6 fdaf 	bl	800f420 <lv_obj_get_style>
 80188c2:	4606      	mov	r6, r0
    lv_page_ext_t * page_ext      = lv_obj_get_ext_attr(page);
 80188c4:	4638      	mov	r0, r7
 80188c6:	f7f6 fe96 	bl	800f5f6 <lv_obj_get_ext_attr>
    if(sign == LV_SIGNAL_CORD_CHG) {
 80188ca:	2d02      	cmp	r5, #2
    lv_page_ext_t * page_ext      = lv_obj_get_ext_attr(page);
 80188cc:	4604      	mov	r4, r0
    if(sign == LV_SIGNAL_CORD_CHG) {
 80188ce:	f040 816d 	bne.w	8018bac <lv_page_scrollable_signal+0x310>
        lv_coord_t new_x = lv_obj_get_x(scrl);
 80188d2:	4640      	mov	r0, r8
 80188d4:	f7f6 fd86 	bl	800f3e4 <lv_obj_get_x>
 80188d8:	4682      	mov	sl, r0
        lv_coord_t new_y = lv_obj_get_y(scrl);
 80188da:	4640      	mov	r0, r8
 80188dc:	f7f6 fd88 	bl	800f3f0 <lv_obj_get_y>
        lv_obj_get_coords(scrl, &scrl_coords);
 80188e0:	a90c      	add	r1, sp, #48	; 0x30
        lv_coord_t new_y = lv_obj_get_y(scrl);
 80188e2:	9006      	str	r0, [sp, #24]
        lv_obj_get_coords(scrl, &scrl_coords);
 80188e4:	4640      	mov	r0, r8
 80188e6:	f7f6 fd77 	bl	800f3d8 <lv_obj_get_coords>
        lv_obj_get_coords(page, &page_coords);
 80188ea:	a90a      	add	r1, sp, #40	; 0x28
 80188ec:	4638      	mov	r0, r7
 80188ee:	f7f6 fd73 	bl	800f3d8 <lv_obj_get_coords>
        lv_coord_t diff_x      = scrl->coords.x1 - ori_coords->x1;
 80188f2:	9b00      	ldr	r3, [sp, #0]
 80188f4:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 80188f8:	8818      	ldrh	r0, [r3, #0]
        lv_coord_t vpad        = page_style->body.padding.top + page_style->body.padding.bottom;
 80188fa:	f8b6 b018 	ldrh.w	fp, [r6, #24]
 80188fe:	f8b6 9016 	ldrh.w	r9, [r6, #22]
        lv_coord_t hpad        = page_style->body.padding.left + page_style->body.padding.right;
 8018902:	8b75      	ldrh	r5, [r6, #26]
        lv_coord_t diff_x      = scrl->coords.x1 - ori_coords->x1;
 8018904:	1a09      	subs	r1, r1, r0
 8018906:	b28b      	uxth	r3, r1
 8018908:	9301      	str	r3, [sp, #4]
        lv_coord_t diff_y      = scrl->coords.y1 - ori_coords->y1;
 801890a:	9b00      	ldr	r3, [sp, #0]
 801890c:	f8b8 1012 	ldrh.w	r1, [r8, #18]
 8018910:	8858      	ldrh	r0, [r3, #2]
 8018912:	1a09      	subs	r1, r1, r0
 8018914:	b28b      	uxth	r3, r1
 8018916:	9302      	str	r3, [sp, #8]
        lv_coord_t hpad        = page_style->body.padding.left + page_style->body.padding.right;
 8018918:	8bb3      	ldrh	r3, [r6, #28]
        lv_coord_t vpad        = page_style->body.padding.top + page_style->body.padding.bottom;
 801891a:	44d9      	add	r9, fp
        lv_coord_t hpad        = page_style->body.padding.left + page_style->body.padding.right;
 801891c:	441d      	add	r5, r3
        lv_obj_t * page_parent = lv_obj_get_parent(page);
 801891e:	4638      	mov	r0, r7
        lv_coord_t vpad        = page_style->body.padding.top + page_style->body.padding.bottom;
 8018920:	fa0f f389 	sxth.w	r3, r9
 8018924:	9307      	str	r3, [sp, #28]
        lv_obj_t * page_parent = lv_obj_get_parent(page);
 8018926:	f7f6 fd29 	bl	800f37c <lv_obj_get_parent>
 801892a:	4683      	mov	fp, r0
        lv_indev_t * indev = lv_indev_get_act();
 801892c:	f7f5 fe3a 	bl	800e5a4 <lv_indev_get_act>
        lv_indev_get_vect(indev, &drag_vect);
 8018930:	a909      	add	r1, sp, #36	; 0x24
        lv_indev_t * indev = lv_indev_get_act();
 8018932:	4681      	mov	r9, r0
        lv_indev_get_vect(indev, &drag_vect);
 8018934:	f7f5 fe66 	bl	800e604 <lv_indev_get_vect>
        if(page_ext->scroll_prop && page_ext->scroll_prop_ip == 0 && lv_indev_is_dragging(indev) == false) {
 8018938:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 801893c:	f003 0303 	and.w	r3, r3, #3
 8018940:	2b01      	cmp	r3, #1
        lv_coord_t hpad        = page_style->body.padding.left + page_style->body.padding.right;
 8018942:	b22d      	sxth	r5, r5
        if(page_ext->scroll_prop && page_ext->scroll_prop_ip == 0 && lv_indev_is_dragging(indev) == false) {
 8018944:	d127      	bne.n	8018996 <lv_page_scrollable_signal+0xfa>
 8018946:	4648      	mov	r0, r9
 8018948:	f7f5 fe4f 	bl	800e5ea <lv_indev_is_dragging>
 801894c:	bb18      	cbnz	r0, 8018996 <lv_page_scrollable_signal+0xfa>
            if(((drag_vect.y > 0 && scrl_coords.y1 == page_coords.y1 + page_style->body.padding.top) ||
 801894e:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 8018952:	2b00      	cmp	r3, #0
 8018954:	dd67      	ble.n	8018a26 <lv_page_scrollable_signal+0x18a>
 8018956:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801895a:	f9b6 1016 	ldrsh.w	r1, [r6, #22]
 801895e:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 8018962:	440b      	add	r3, r1
                (drag_vect.y < 0 && scrl_coords.y2 == page_coords.y2 - page_style->body.padding.bottom)) &&
 8018964:	429a      	cmp	r2, r3
 8018966:	d116      	bne.n	8018996 <lv_page_scrollable_signal+0xfa>
               ((drag_vect.x > 0 && scrl_coords.x1 == page_coords.x1 + page_style->body.padding.left) ||
 8018968:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
                (drag_vect.y < 0 && scrl_coords.y2 == page_coords.y2 - page_style->body.padding.bottom)) &&
 801896c:	2b00      	cmp	r3, #0
 801896e:	dd63      	ble.n	8018a38 <lv_page_scrollable_signal+0x19c>
               ((drag_vect.x > 0 && scrl_coords.x1 == page_coords.x1 + page_style->body.padding.left) ||
 8018970:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8018974:	f9b6 101a 	ldrsh.w	r1, [r6, #26]
 8018978:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801897c:	440b      	add	r3, r1
                (drag_vect.x < 0 && scrl_coords.x2 == page_coords.x2 - page_style->body.padding.right))) {
 801897e:	429a      	cmp	r2, r3
 8018980:	d109      	bne.n	8018996 <lv_page_scrollable_signal+0xfa>
                if(lv_obj_get_parent(page_parent) != NULL) { /*Do not propagate the scroll to a screen*/
 8018982:	4658      	mov	r0, fp
 8018984:	f7f6 fcfa 	bl	800f37c <lv_obj_get_parent>
 8018988:	b128      	cbz	r0, 8018996 <lv_page_scrollable_signal+0xfa>
                    page_ext->scroll_prop_ip = 1;
 801898a:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 801898e:	f043 0302 	orr.w	r3, r3, #2
 8018992:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 8018996:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801899a:	f9bd 002c 	ldrsh.w	r0, [sp, #44]	; 0x2c
 801899e:	f9bd c034 	ldrsh.w	ip, [sp, #52]	; 0x34
 80189a2:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
    return area_p->x2 - area_p->x1 + 1;
 80189a6:	fa1f f982 	uxth.w	r9, r2
 80189aa:	1c43      	adds	r3, r0, #1
 80189ac:	f10c 0101 	add.w	r1, ip, #1
 80189b0:	eba3 0309 	sub.w	r3, r3, r9
 80189b4:	b29b      	uxth	r3, r3
 80189b6:	eba1 010e 	sub.w	r1, r1, lr
 80189ba:	9303      	str	r3, [sp, #12]
 80189bc:	b289      	uxth	r1, r1
        if(lv_area_get_width(&scrl_coords) + hpad <= lv_area_get_width(&page_coords)) {
 80189be:	fa05 f381 	sxtah	r3, r5, r1
 80189c2:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 80189c6:	42ab      	cmp	r3, r5
 80189c8:	dc3f      	bgt.n	8018a4a <lv_page_scrollable_signal+0x1ae>
            if(scrl_coords.x1 != page_coords.x1 + page_style->body.padding.left) {
 80189ca:	f9b6 301a 	ldrsh.w	r3, [r6, #26]
 80189ce:	441a      	add	r2, r3
                new_x  = page_style->body.padding.left;
 80189d0:	4596      	cmp	lr, r2
 80189d2:	bf16      	itet	ne
 80189d4:	469a      	movne	sl, r3
 80189d6:	2500      	moveq	r5, #0
 80189d8:	2501      	movne	r5, #1
 80189da:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 80189de:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 80189e2:	f9bd e02e 	ldrsh.w	lr, [sp, #46]	; 0x2e
 80189e6:	9303      	str	r3, [sp, #12]
    return area_p->y2 - area_p->y1 + 1;
 80189e8:	1c58      	adds	r0, r3, #1
 80189ea:	b28a      	uxth	r2, r1
 80189ec:	f10e 0301 	add.w	r3, lr, #1
 80189f0:	f9bd c032 	ldrsh.w	ip, [sp, #50]	; 0x32
 80189f4:	1a9b      	subs	r3, r3, r2
 80189f6:	b29b      	uxth	r3, r3
 80189f8:	9304      	str	r3, [sp, #16]
 80189fa:	eba0 000c 	sub.w	r0, r0, ip
        if(lv_area_get_height(&scrl_coords) + vpad <= lv_area_get_height(&page_coords)) {
 80189fe:	9b07      	ldr	r3, [sp, #28]
 8018a00:	b280      	uxth	r0, r0
 8018a02:	fa03 f980 	sxtah	r9, r3, r0
 8018a06:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8018a0a:	4599      	cmp	r9, r3
 8018a0c:	dc65      	bgt.n	8018ada <lv_page_scrollable_signal+0x23e>
            if(scrl_coords.y1 != page_coords.y1 + page_style->body.padding.top) {
 8018a0e:	f9b6 6016 	ldrsh.w	r6, [r6, #22]
 8018a12:	4431      	add	r1, r6
 8018a14:	458c      	cmp	ip, r1
 8018a16:	d16e      	bne.n	8018af6 <lv_page_scrollable_signal+0x25a>
        if(refr_x || refr_y) {
 8018a18:	2d00      	cmp	r5, #0
 8018a1a:	f000 80a9 	beq.w	8018b70 <lv_page_scrollable_signal+0x2d4>
 8018a1e:	9e06      	ldr	r6, [sp, #24]
 8018a20:	f04f 0900 	mov.w	r9, #0
 8018a24:	e085      	b.n	8018b32 <lv_page_scrollable_signal+0x296>
            if(((drag_vect.y > 0 && scrl_coords.y1 == page_coords.y1 + page_style->body.padding.top) ||
 8018a26:	d0b6      	beq.n	8018996 <lv_page_scrollable_signal+0xfa>
                (drag_vect.y < 0 && scrl_coords.y2 == page_coords.y2 - page_style->body.padding.bottom)) &&
 8018a28:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8018a2c:	f9b6 1018 	ldrsh.w	r1, [r6, #24]
 8018a30:	f9bd 2036 	ldrsh.w	r2, [sp, #54]	; 0x36
 8018a34:	1a5b      	subs	r3, r3, r1
 8018a36:	e795      	b.n	8018964 <lv_page_scrollable_signal+0xc8>
               ((drag_vect.x > 0 && scrl_coords.x1 == page_coords.x1 + page_style->body.padding.left) ||
 8018a38:	d0ad      	beq.n	8018996 <lv_page_scrollable_signal+0xfa>
                (drag_vect.x < 0 && scrl_coords.x2 == page_coords.x2 - page_style->body.padding.right))) {
 8018a3a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8018a3e:	f9b6 101c 	ldrsh.w	r1, [r6, #28]
 8018a42:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8018a46:	1a5b      	subs	r3, r3, r1
 8018a48:	e799      	b.n	801897e <lv_page_scrollable_signal+0xe2>
            if(page_ext->scroll_prop_ip) {
 8018a4a:	f894 502e 	ldrb.w	r5, [r4, #46]	; 0x2e
 8018a4e:	f015 0502 	ands.w	r5, r5, #2
 8018a52:	d00c      	beq.n	8018a6e <lv_page_scrollable_signal+0x1d2>
                if(drag_vect.x == diff_x) { /*`scrl` is bouncing: drag pos. it somewhere and here it
 8018a54:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8018a58:	9a01      	ldr	r2, [sp, #4]
 8018a5a:	429a      	cmp	r2, r3
 8018a5c:	d139      	bne.n	8018ad2 <lv_page_scrollable_signal+0x236>
                    new_x  = ori_coords->x1 - page_coords.x1;
 8018a5e:	9b00      	ldr	r3, [sp, #0]
 8018a60:	881b      	ldrh	r3, [r3, #0]
 8018a62:	eba3 0909 	sub.w	r9, r3, r9
 8018a66:	fa0f fa89 	sxth.w	sl, r9
                refr_x = true;
 8018a6a:	2501      	movs	r5, #1
 8018a6c:	e7b5      	b.n	80189da <lv_page_scrollable_signal+0x13e>
            else if(scrl_coords.x2 < page_coords.x2 - page_style->body.padding.right) {
 8018a6e:	f9b6 901c 	ldrsh.w	r9, [r6, #28]
 8018a72:	eba0 0009 	sub.w	r0, r0, r9
 8018a76:	4584      	cmp	ip, r0
 8018a78:	da15      	bge.n	8018aa6 <lv_page_scrollable_signal+0x20a>
                new_x = lv_area_get_width(&page_coords) - lv_area_get_width(&scrl_coords) -
 8018a7a:	9b03      	ldr	r3, [sp, #12]
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 8018a7c:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
                new_x = lv_area_get_width(&page_coords) - lv_area_get_width(&scrl_coords) -
 8018a80:	1a5b      	subs	r3, r3, r1
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 8018a82:	f005 051f 	and.w	r5, r5, #31
                new_x = lv_area_get_width(&page_coords) - lv_area_get_width(&scrl_coords) -
 8018a86:	eba3 0909 	sub.w	r9, r3, r9
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 8018a8a:	2d01      	cmp	r5, #1
                new_x = lv_area_get_width(&page_coords) - lv_area_get_width(&scrl_coords) -
 8018a8c:	fa0f fa89 	sxth.w	sl, r9
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 8018a90:	d1eb      	bne.n	8018a6a <lv_page_scrollable_signal+0x1ce>
                    lv_page_start_edge_flash(page);
 8018a92:	4638      	mov	r0, r7
 8018a94:	f7ff fed0 	bl	8018838 <lv_page_start_edge_flash>
                    page_ext->edge_flash.right_ip = 1;
 8018a98:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8018a9c:	f043 0308 	orr.w	r3, r3, #8
 8018aa0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8018aa4:	e799      	b.n	80189da <lv_page_scrollable_signal+0x13e>
            } else if(scrl_coords.x1 > page_coords.x1 + page_style->body.padding.left) {
 8018aa6:	f9b6 901a 	ldrsh.w	r9, [r6, #26]
 8018aaa:	444a      	add	r2, r9
 8018aac:	4596      	cmp	lr, r2
 8018aae:	dd94      	ble.n	80189da <lv_page_scrollable_signal+0x13e>
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 8018ab0:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 8018ab4:	f005 051f 	and.w	r5, r5, #31
 8018ab8:	2d01      	cmp	r5, #1
 8018aba:	d10c      	bne.n	8018ad6 <lv_page_scrollable_signal+0x23a>
                    lv_page_start_edge_flash(page);
 8018abc:	4638      	mov	r0, r7
 8018abe:	f7ff febb 	bl	8018838 <lv_page_start_edge_flash>
                    page_ext->edge_flash.left_ip = 1;
 8018ac2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8018ac6:	f043 0310 	orr.w	r3, r3, #16
 8018aca:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
                new_x  = page_style->body.padding.left; /*Left align*/
 8018ace:	46ca      	mov	sl, r9
 8018ad0:	e783      	b.n	80189da <lv_page_scrollable_signal+0x13e>
        bool refr_x      = false;
 8018ad2:	2500      	movs	r5, #0
 8018ad4:	e781      	b.n	80189da <lv_page_scrollable_signal+0x13e>
                new_x  = page_style->body.padding.left; /*Left align*/
 8018ad6:	46ca      	mov	sl, r9
 8018ad8:	e7c7      	b.n	8018a6a <lv_page_scrollable_signal+0x1ce>
            if(page_ext->scroll_prop_ip) {
 8018ada:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 8018ade:	f019 0f02 	tst.w	r9, #2
 8018ae2:	d00b      	beq.n	8018afc <lv_page_scrollable_signal+0x260>
                if(drag_vect.y == diff_y) { /*`scrl` is bouncing: drag pos. it somewhere and here it
 8018ae4:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8018ae8:	9902      	ldr	r1, [sp, #8]
 8018aea:	4299      	cmp	r1, r3
 8018aec:	d194      	bne.n	8018a18 <lv_page_scrollable_signal+0x17c>
                    new_y  = ori_coords->y1 - page_coords.y1;
 8018aee:	9b00      	ldr	r3, [sp, #0]
 8018af0:	885e      	ldrh	r6, [r3, #2]
 8018af2:	1ab2      	subs	r2, r6, r2
 8018af4:	b216      	sxth	r6, r2
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 8018af6:	f04f 0901 	mov.w	r9, #1
 8018afa:	e01a      	b.n	8018b32 <lv_page_scrollable_signal+0x296>
            else if(scrl_coords.y2 < page_coords.y2 - page_style->body.padding.bottom) {
 8018afc:	f9b6 2018 	ldrsh.w	r2, [r6, #24]
 8018b00:	9b03      	ldr	r3, [sp, #12]
 8018b02:	ebae 0e02 	sub.w	lr, lr, r2
 8018b06:	4573      	cmp	r3, lr
 8018b08:	da39      	bge.n	8018b7e <lv_page_scrollable_signal+0x2e2>
                new_y = lv_area_get_height(&page_coords) - lv_area_get_height(&scrl_coords) -
 8018b0a:	9b04      	ldr	r3, [sp, #16]
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 8018b0c:	f894 9028 	ldrb.w	r9, [r4, #40]	; 0x28
                new_y = lv_area_get_height(&page_coords) - lv_area_get_height(&scrl_coords) -
 8018b10:	1a1b      	subs	r3, r3, r0
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 8018b12:	f009 091f 	and.w	r9, r9, #31
                new_y = lv_area_get_height(&page_coords) - lv_area_get_height(&scrl_coords) -
 8018b16:	1a9a      	subs	r2, r3, r2
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 8018b18:	f1b9 0f01 	cmp.w	r9, #1
                new_y = lv_area_get_height(&page_coords) - lv_area_get_height(&scrl_coords) -
 8018b1c:	b216      	sxth	r6, r2
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 8018b1e:	d1ea      	bne.n	8018af6 <lv_page_scrollable_signal+0x25a>
                    lv_page_start_edge_flash(page);
 8018b20:	4638      	mov	r0, r7
 8018b22:	f7ff fe89 	bl	8018838 <lv_page_start_edge_flash>
                    page_ext->edge_flash.bottom_ip = 1;
 8018b26:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8018b2a:	f043 0304 	orr.w	r3, r3, #4
                    page_ext->edge_flash.top_ip = 1;
 8018b2e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
            lv_obj_set_pos(scrl, new_x, new_y);
 8018b32:	4651      	mov	r1, sl
 8018b34:	4632      	mov	r2, r6
 8018b36:	4640      	mov	r0, r8
 8018b38:	f7f5 ff4d 	bl	800e9d6 <lv_obj_set_pos>
            if(page_ext->scroll_prop_ip) {
 8018b3c:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8018b40:	0799      	lsls	r1, r3, #30
 8018b42:	d515      	bpl.n	8018b70 <lv_page_scrollable_signal+0x2d4>
                if(refr_y) lv_obj_set_y(page_parent, lv_obj_get_y(page_parent) + diff_y);
 8018b44:	f1b9 0f00 	cmp.w	r9, #0
 8018b48:	d008      	beq.n	8018b5c <lv_page_scrollable_signal+0x2c0>
 8018b4a:	4658      	mov	r0, fp
 8018b4c:	f7f6 fc50 	bl	800f3f0 <lv_obj_get_y>
 8018b50:	9b02      	ldr	r3, [sp, #8]
 8018b52:	4403      	add	r3, r0
 8018b54:	b219      	sxth	r1, r3
 8018b56:	4658      	mov	r0, fp
 8018b58:	f7f5 ff8a 	bl	800ea70 <lv_obj_set_y>
                if(refr_x) lv_obj_set_x(page_parent, lv_obj_get_x(page_parent) + diff_x);
 8018b5c:	b145      	cbz	r5, 8018b70 <lv_page_scrollable_signal+0x2d4>
 8018b5e:	4658      	mov	r0, fp
 8018b60:	f7f6 fc40 	bl	800f3e4 <lv_obj_get_x>
 8018b64:	9b01      	ldr	r3, [sp, #4]
 8018b66:	4403      	add	r3, r0
 8018b68:	b219      	sxth	r1, r3
 8018b6a:	4658      	mov	r0, fp
 8018b6c:	f7f5 ff76 	bl	800ea5c <lv_obj_set_x>
        lv_page_sb_refresh(page);
 8018b70:	4638      	mov	r0, r7
 8018b72:	f7ff f84d 	bl	8017c10 <lv_page_sb_refresh>
}
 8018b76:	9805      	ldr	r0, [sp, #20]
 8018b78:	b00f      	add	sp, #60	; 0x3c
 8018b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            } else if(scrl_coords.y1 > page_coords.y1 + page_style->body.padding.top) {
 8018b7e:	f9b6 6016 	ldrsh.w	r6, [r6, #22]
 8018b82:	4431      	add	r1, r6
 8018b84:	458c      	cmp	ip, r1
 8018b86:	f77f af47 	ble.w	8018a18 <lv_page_scrollable_signal+0x17c>
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 8018b8a:	f894 9028 	ldrb.w	r9, [r4, #40]	; 0x28
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 8018b8e:	f009 091f 	and.w	r9, r9, #31
 8018b92:	f1b9 0f01 	cmp.w	r9, #1
 8018b96:	d1ae      	bne.n	8018af6 <lv_page_scrollable_signal+0x25a>
                    lv_page_start_edge_flash(page);
 8018b98:	4638      	mov	r0, r7
 8018b9a:	f7ff fe4d 	bl	8018838 <lv_page_start_edge_flash>
                    page_ext->edge_flash.top_ip = 1;
 8018b9e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8018ba2:	f043 0302 	orr.w	r3, r3, #2
 8018ba6:	e7c2      	b.n	8018b2e <lv_page_scrollable_signal+0x292>
 8018ba8:	2000b05c 	.word	0x2000b05c
    } else if(sign == LV_SIGNAL_DRAG_END) {
 8018bac:	2d0e      	cmp	r5, #14
 8018bae:	d1e2      	bne.n	8018b76 <lv_page_scrollable_signal+0x2da>
        page_ext->scroll_prop_ip = 0;
 8018bb0:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
 8018bb4:	f36f 0341 	bfc	r3, #1, #1
 8018bb8:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
        if(page_ext->sb.mode == LV_SB_MODE_DRAG) {
 8018bbc:	7f03      	ldrb	r3, [r0, #28]
 8018bbe:	f003 031c 	and.w	r3, r3, #28
 8018bc2:	2b08      	cmp	r3, #8
 8018bc4:	d1d7      	bne.n	8018b76 <lv_page_scrollable_signal+0x2da>
            lv_disp_t * disp = lv_obj_get_disp(page);
 8018bc6:	4638      	mov	r0, r7
 8018bc8:	f7f5 fe72 	bl	800e8b0 <lv_obj_get_disp>
            if(page_ext->sb.hor_draw) {
 8018bcc:	7f23      	ldrb	r3, [r4, #28]
 8018bce:	07da      	lsls	r2, r3, #31
            lv_disp_t * disp = lv_obj_get_disp(page);
 8018bd0:	4605      	mov	r5, r0
            if(page_ext->sb.hor_draw) {
 8018bd2:	d522      	bpl.n	8018c1a <lv_page_scrollable_signal+0x37e>
                lv_area_copy(&sb_area_tmp, &page_ext->sb.hor_area);
 8018bd4:	f104 010c 	add.w	r1, r4, #12
 8018bd8:	a80c      	add	r0, sp, #48	; 0x30
 8018bda:	f7ff f803 	bl	8017be4 <lv_area_copy>
                sb_area_tmp.x1 += page->coords.x1;
 8018bde:	8a3a      	ldrh	r2, [r7, #16]
 8018be0:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
                sb_area_tmp.y1 += page->coords.y1;
 8018be4:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
                sb_area_tmp.x1 += page->coords.x1;
 8018be8:	4413      	add	r3, r2
 8018bea:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
                sb_area_tmp.y1 += page->coords.y1;
 8018bee:	8a7b      	ldrh	r3, [r7, #18]
 8018bf0:	4419      	add	r1, r3
 8018bf2:	f8ad 1032 	strh.w	r1, [sp, #50]	; 0x32
                sb_area_tmp.x2 += page->coords.x1;
 8018bf6:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8018bfa:	440a      	add	r2, r1
 8018bfc:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
                sb_area_tmp.y2 += page->coords.y1;
 8018c00:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
                lv_inv_area(disp, &sb_area_tmp);
 8018c04:	a90c      	add	r1, sp, #48	; 0x30
                sb_area_tmp.y2 += page->coords.y1;
 8018c06:	4413      	add	r3, r2
                lv_inv_area(disp, &sb_area_tmp);
 8018c08:	4628      	mov	r0, r5
                sb_area_tmp.y2 += page->coords.y1;
 8018c0a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
                lv_inv_area(disp, &sb_area_tmp);
 8018c0e:	f7f6 fe2b 	bl	800f868 <lv_inv_area>
                page_ext->sb.hor_draw = 0;
 8018c12:	7f23      	ldrb	r3, [r4, #28]
 8018c14:	f36f 0300 	bfc	r3, #0, #1
 8018c18:	7723      	strb	r3, [r4, #28]
            if(page_ext->sb.ver_draw) {
 8018c1a:	7f23      	ldrb	r3, [r4, #28]
 8018c1c:	079b      	lsls	r3, r3, #30
 8018c1e:	d5aa      	bpl.n	8018b76 <lv_page_scrollable_signal+0x2da>
                lv_area_copy(&sb_area_tmp, &page_ext->sb.ver_area);
 8018c20:	f104 0114 	add.w	r1, r4, #20
 8018c24:	a80c      	add	r0, sp, #48	; 0x30
 8018c26:	f7fe ffdd 	bl	8017be4 <lv_area_copy>
                sb_area_tmp.x1 += page->coords.x1;
 8018c2a:	8a3a      	ldrh	r2, [r7, #16]
 8018c2c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
                sb_area_tmp.y1 += page->coords.y1;
 8018c30:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
                sb_area_tmp.x1 += page->coords.x1;
 8018c34:	4413      	add	r3, r2
 8018c36:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
                sb_area_tmp.y1 += page->coords.y1;
 8018c3a:	8a7b      	ldrh	r3, [r7, #18]
 8018c3c:	4419      	add	r1, r3
 8018c3e:	f8ad 1032 	strh.w	r1, [sp, #50]	; 0x32
                sb_area_tmp.x2 += page->coords.x1;
 8018c42:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8018c46:	440a      	add	r2, r1
 8018c48:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
                sb_area_tmp.y2 += page->coords.y1;
 8018c4c:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
                lv_inv_area(disp, &sb_area_tmp);
 8018c50:	a90c      	add	r1, sp, #48	; 0x30
                sb_area_tmp.y2 += page->coords.y1;
 8018c52:	4413      	add	r3, r2
                lv_inv_area(disp, &sb_area_tmp);
 8018c54:	4628      	mov	r0, r5
                sb_area_tmp.y2 += page->coords.y1;
 8018c56:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
                lv_inv_area(disp, &sb_area_tmp);
 8018c5a:	f7f6 fe05 	bl	800f868 <lv_inv_area>
                page_ext->sb.ver_draw = 0;
 8018c5e:	7f23      	ldrb	r3, [r4, #28]
 8018c60:	f36f 0341 	bfc	r3, #1, #1
 8018c64:	7723      	strb	r3, [r4, #28]
 8018c66:	e786      	b.n	8018b76 <lv_page_scrollable_signal+0x2da>

08018c68 <inf_normalize>:
/**
 * Set the middle page for the roller if inifinte is enabled
 * @param scrl pointer to the roller's scrollable (lv_obj_t *)
 */
static void inf_normalize(void * scrl)
{
 8018c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c6c:	4604      	mov	r4, r0
    lv_obj_t * roller_scrl = (lv_obj_t *)scrl;
    lv_obj_t * roller      = lv_obj_get_parent(roller_scrl);
 8018c6e:	f7f6 fb85 	bl	800f37c <lv_obj_get_parent>
 8018c72:	4606      	mov	r6, r0
    lv_roller_ext_t * ext  = lv_obj_get_ext_attr(roller);
 8018c74:	f7f6 fcbf 	bl	800f5f6 <lv_obj_get_ext_attr>

    if(ext->mode == LV_ROLLER_MODE_INIFINITE) {
 8018c78:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8018c7c:	07db      	lsls	r3, r3, #31
    lv_roller_ext_t * ext  = lv_obj_get_ext_attr(roller);
 8018c7e:	4605      	mov	r5, r0
    if(ext->mode == LV_ROLLER_MODE_INIFINITE) {
 8018c80:	d52b      	bpl.n	8018cda <inf_normalize+0x72>
        uint16_t real_id_cnt = ext->ddlist.option_cnt / LV_ROLLER_INF_PAGES;

        ext->ddlist.sel_opt_id = ext->ddlist.sel_opt_id % real_id_cnt;
 8018c82:	8f41      	ldrh	r1, [r0, #58]	; 0x3a
        uint16_t real_id_cnt = ext->ddlist.option_cnt / LV_ROLLER_INF_PAGES;
 8018c84:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8018c86:	2207      	movs	r2, #7
 8018c88:	fbb3 f3f2 	udiv	r3, r3, r2
        ext->ddlist.sel_opt_id = ext->ddlist.sel_opt_id % real_id_cnt;
 8018c8c:	fbb1 f2f3 	udiv	r2, r1, r3
 8018c90:	fb03 1212 	mls	r2, r3, r2, r1

        ext->ddlist.sel_opt_id += (LV_ROLLER_INF_PAGES / 2) * real_id_cnt; /*Select the middle page*/
 8018c94:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018c98:	4413      	add	r3, r2
 8018c9a:	8743      	strh	r3, [r0, #58]	; 0x3a

        /*Move to the new id*/
        const lv_style_t * style_label = lv_obj_get_style(ext->ddlist.label);
 8018c9c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8018c9e:	f7f6 fbbf 	bl	800f420 <lv_obj_get_style>
 8018ca2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8018ca4:	4680      	mov	r8, r0
        const lv_font_t * font         = style_label->text.font;
        lv_coord_t font_h              = lv_font_get_line_height(font);
        lv_coord_t h                   = lv_obj_get_height(roller);
 8018ca6:	4630      	mov	r0, r6
 8018ca8:	7a1f      	ldrb	r7, [r3, #8]
 8018caa:	f7f6 fbad 	bl	800f408 <lv_obj_get_height>

        lv_coord_t line_y1 = ext->ddlist.sel_opt_id * (font_h + style_label->text.line_space) +
                             ext->ddlist.label->coords.y1 - roller_scrl->coords.y1;
 8018cae:	6b2b      	ldr	r3, [r5, #48]	; 0x30
        lv_coord_t new_y = -line_y1 + (h - font_h) / 2;
 8018cb0:	1bc1      	subs	r1, r0, r7
 8018cb2:	2002      	movs	r0, #2
 8018cb4:	fb91 f1f0 	sdiv	r1, r1, r0
 8018cb8:	8a58      	ldrh	r0, [r3, #18]
 8018cba:	8a63      	ldrh	r3, [r4, #18]
 8018cbc:	1ac0      	subs	r0, r0, r3
 8018cbe:	1a09      	subs	r1, r1, r0
        lv_coord_t line_y1 = ext->ddlist.sel_opt_id * (font_h + style_label->text.line_space) +
 8018cc0:	f9b8 002a 	ldrsh.w	r0, [r8, #42]	; 0x2a
 8018cc4:	19c3      	adds	r3, r0, r7
 8018cc6:	8f68      	ldrh	r0, [r5, #58]	; 0x3a
 8018cc8:	fb10 f003 	smulbb	r0, r0, r3
        lv_coord_t new_y = -line_y1 + (h - font_h) / 2;
 8018ccc:	1a09      	subs	r1, r1, r0
        lv_obj_set_y(roller_scrl, new_y);
 8018cce:	b209      	sxth	r1, r1
 8018cd0:	4620      	mov	r0, r4
    }
}
 8018cd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        lv_obj_set_y(roller_scrl, new_y);
 8018cd6:	f7f5 becb 	b.w	800ea70 <lv_obj_set_y>
 8018cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018cde <scroll_anim_ready_cb>:

#if LV_USE_ANIMATION
static void scroll_anim_ready_cb(lv_anim_t * a)
{
    inf_normalize(a->var);
 8018cde:	6800      	ldr	r0, [r0, #0]
 8018ce0:	f7ff bfc2 	b.w	8018c68 <inf_normalize>

08018ce4 <refr_position>:
{
 8018ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018ce8:	b08a      	sub	sp, #40	; 0x28
 8018cea:	4607      	mov	r7, r0
 8018cec:	460e      	mov	r6, r1
    lv_obj_t * roller_scrl         = lv_page_get_scrl(roller);
 8018cee:	f7ff fa06 	bl	80180fe <lv_page_get_scrl>
 8018cf2:	4605      	mov	r5, r0
    lv_roller_ext_t * ext          = lv_obj_get_ext_attr(roller);
 8018cf4:	4638      	mov	r0, r7
 8018cf6:	f7f6 fc7e 	bl	800f5f6 <lv_obj_get_ext_attr>
 8018cfa:	4681      	mov	r9, r0
    const lv_style_t * style_label = lv_obj_get_style(ext->ddlist.label);
 8018cfc:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8018cfe:	f7f6 fb8f 	bl	800f420 <lv_obj_get_style>
 8018d02:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8018d04:	4682      	mov	sl, r0
    lv_coord_t h                   = lv_obj_get_height(roller);
 8018d06:	4638      	mov	r0, r7
 8018d08:	f893 8008 	ldrb.w	r8, [r3, #8]
 8018d0c:	f7f6 fb7c 	bl	800f408 <lv_obj_get_height>
 8018d10:	4604      	mov	r4, r0
 8018d12:	4638      	mov	r0, r7
 8018d14:	f7ff f9f8 	bl	8018108 <lv_page_get_anim_time>
 8018d18:	4607      	mov	r7, r0
    if(anim_en == LV_ANIM_OFF || anim_time == 0) {
 8018d1a:	b106      	cbz	r6, 8018d1e <refr_position+0x3a>
 8018d1c:	b910      	cbnz	r0, 8018d24 <refr_position+0x40>
        inf_normalize(roller_scrl);
 8018d1e:	4628      	mov	r0, r5
 8018d20:	f7ff ffa2 	bl	8018c68 <inf_normalize>
        id * (font_h + style_label->text.line_space) + ext->ddlist.label->coords.y1 - roller_scrl->coords.y1;
 8018d24:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
    lv_coord_t new_y = -line_y1 + (h - font_h) / 2;
 8018d28:	2102      	movs	r1, #2
 8018d2a:	eba4 0408 	sub.w	r4, r4, r8
 8018d2e:	fb94 f4f1 	sdiv	r4, r4, r1
 8018d32:	8a59      	ldrh	r1, [r3, #18]
 8018d34:	8a6b      	ldrh	r3, [r5, #18]
 8018d36:	1ac9      	subs	r1, r1, r3
 8018d38:	1a64      	subs	r4, r4, r1
        id * (font_h + style_label->text.line_space) + ext->ddlist.label->coords.y1 - roller_scrl->coords.y1;
 8018d3a:	f9ba 102a 	ldrsh.w	r1, [sl, #42]	; 0x2a
 8018d3e:	eb01 0308 	add.w	r3, r1, r8
 8018d42:	f8b9 103a 	ldrh.w	r1, [r9, #58]	; 0x3a
 8018d46:	fb11 f103 	smulbb	r1, r1, r3
    lv_coord_t new_y = -line_y1 + (h - font_h) / 2;
 8018d4a:	1a64      	subs	r4, r4, r1
 8018d4c:	b224      	sxth	r4, r4
    if(anim_en == LV_ANIM_OFF || anim_time == 0) {
 8018d4e:	b106      	cbz	r6, 8018d52 <refr_position+0x6e>
 8018d50:	b937      	cbnz	r7, 8018d60 <refr_position+0x7c>
        lv_obj_set_y(roller_scrl, new_y);
 8018d52:	4621      	mov	r1, r4
 8018d54:	4628      	mov	r0, r5
 8018d56:	f7f5 fe8b 	bl	800ea70 <lv_obj_set_y>
}
 8018d5a:	b00a      	add	sp, #40	; 0x28
 8018d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        a.start          = lv_obj_get_y(roller_scrl);
 8018d60:	4628      	mov	r0, r5
        a.var            = roller_scrl;
 8018d62:	9500      	str	r5, [sp, #0]
        a.start          = lv_obj_get_y(roller_scrl);
 8018d64:	f7f6 fb44 	bl	800f3f0 <lv_obj_get_y>
        a.exec_cb        = (lv_anim_exec_xcb_t)lv_obj_set_y;
 8018d68:	4b0e      	ldr	r3, [pc, #56]	; (8018da4 <refr_position+0xc0>)
        a.playback       = 0;
 8018d6a:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
        a.exec_cb        = (lv_anim_exec_xcb_t)lv_obj_set_y;
 8018d6e:	9301      	str	r3, [sp, #4]
        a.path_cb        = lv_anim_path_linear;
 8018d70:	4b0d      	ldr	r3, [pc, #52]	; (8018da8 <refr_position+0xc4>)
 8018d72:	9302      	str	r3, [sp, #8]
        a.ready_cb       = scroll_anim_ready_cb;
 8018d74:	4b0d      	ldr	r3, [pc, #52]	; (8018dac <refr_position+0xc8>)
 8018d76:	9303      	str	r3, [sp, #12]
        a.repeat         = 0;
 8018d78:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
        a.act_time       = 0;
 8018d7c:	2300      	movs	r3, #0
        a.start          = lv_obj_get_y(roller_scrl);
 8018d7e:	9004      	str	r0, [sp, #16]
        a.repeat         = 0;
 8018d80:	f363 0241 	bfi	r2, r3, #1, #1
        lv_anim_create(&a);
 8018d84:	4668      	mov	r0, sp
        a.end            = new_y;
 8018d86:	9405      	str	r4, [sp, #20]
        a.act_time       = 0;
 8018d88:	f8ad 301a 	strh.w	r3, [sp, #26]
        a.time           = anim_time;
 8018d8c:	f8ad 7018 	strh.w	r7, [sp, #24]
        a.playback_pause = 0;
 8018d90:	f8ad 301c 	strh.w	r3, [sp, #28]
        a.repeat         = 0;
 8018d94:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
        a.repeat_pause   = 0;
 8018d98:	f8ad 301e 	strh.w	r3, [sp, #30]
        lv_anim_create(&a);
 8018d9c:	f7fb f8bc 	bl	8013f18 <lv_anim_create>
}
 8018da0:	e7db      	b.n	8018d5a <refr_position+0x76>
 8018da2:	bf00      	nop
 8018da4:	0800ea71 	.word	0x0800ea71
 8018da8:	08013d41 	.word	0x08013d41
 8018dac:	08018cdf 	.word	0x08018cdf

08018db0 <lv_roller_scrl_signal>:
    res = ancestor_scrl_signal(roller_scrl, sign, param);
 8018db0:	4b3d      	ldr	r3, [pc, #244]	; (8018ea8 <lv_roller_scrl_signal+0xf8>)
{
 8018db2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    res = ancestor_scrl_signal(roller_scrl, sign, param);
 8018db6:	681b      	ldr	r3, [r3, #0]
{
 8018db8:	4680      	mov	r8, r0
 8018dba:	460f      	mov	r7, r1
    res = ancestor_scrl_signal(roller_scrl, sign, param);
 8018dbc:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8018dbe:	2801      	cmp	r0, #1
    res = ancestor_scrl_signal(roller_scrl, sign, param);
 8018dc0:	4605      	mov	r5, r0
    if(res != LV_RES_OK) return res;
 8018dc2:	d14c      	bne.n	8018e5e <lv_roller_scrl_signal+0xae>
    lv_indev_t * indev    = lv_indev_get_act();
 8018dc4:	f7f5 fbee 	bl	800e5a4 <lv_indev_get_act>
    int32_t id            = -1;
 8018dc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    lv_indev_t * indev    = lv_indev_get_act();
 8018dcc:	4681      	mov	r9, r0
    lv_obj_t * roller     = lv_obj_get_parent(roller_scrl);
 8018dce:	4640      	mov	r0, r8
    int32_t id            = -1;
 8018dd0:	9301      	str	r3, [sp, #4]
    lv_obj_t * roller     = lv_obj_get_parent(roller_scrl);
 8018dd2:	f7f6 fad3 	bl	800f37c <lv_obj_get_parent>
 8018dd6:	4604      	mov	r4, r0
    lv_roller_ext_t * ext = lv_obj_get_ext_attr(roller);
 8018dd8:	f7f6 fc0d 	bl	800f5f6 <lv_obj_get_ext_attr>
 8018ddc:	4606      	mov	r6, r0
    if(ext->ddlist.label == NULL)
 8018dde:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8018de0:	2800      	cmp	r0, #0
 8018de2:	d05e      	beq.n	8018ea2 <lv_roller_scrl_signal+0xf2>
    const lv_style_t * style_label = lv_obj_get_style(ext->ddlist.label);
 8018de4:	f7f6 fb1c 	bl	800f420 <lv_obj_get_style>
    if(sign == LV_SIGNAL_DRAG_END) {
 8018de8:	2f0e      	cmp	r7, #14
 8018dea:	d13c      	bne.n	8018e66 <lv_roller_scrl_signal+0xb6>
        lv_coord_t label_y1   = ext->ddlist.label->coords.y1 - roller->coords.y1;
 8018dec:	6b32      	ldr	r2, [r6, #48]	; 0x30
 8018dee:	f9b4 c012 	ldrsh.w	ip, [r4, #18]
 8018df2:	8a51      	ldrh	r1, [r2, #18]
        lv_coord_t label_unit = font_h + style_label->text.line_space;
 8018df4:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8018df6:	f9b0 e02a 	ldrsh.w	lr, [r0, #42]	; 0x2a
        lv_coord_t mid        = (roller->coords.y2 - roller->coords.y1) / 2;
 8018dfa:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
        lv_coord_t label_unit = font_h + style_label->text.line_space;
 8018dfe:	7a12      	ldrb	r2, [r2, #8]
        lv_coord_t label_y1   = ext->ddlist.label->coords.y1 - roller->coords.y1;
 8018e00:	eba1 010c 	sub.w	r1, r1, ip
        id = (mid - label_y1 + style_label->text.line_space / 2) / label_unit;
 8018e04:	b209      	sxth	r1, r1
        lv_coord_t mid        = (roller->coords.y2 - roller->coords.y1) / 2;
 8018e06:	eba3 030c 	sub.w	r3, r3, ip
 8018e0a:	2702      	movs	r7, #2
        lv_coord_t label_unit = font_h + style_label->text.line_space;
 8018e0c:	4472      	add	r2, lr
        lv_coord_t mid        = (roller->coords.y2 - roller->coords.y1) / 2;
 8018e0e:	fb93 f3f7 	sdiv	r3, r3, r7
        id = (mid - label_y1 + style_label->text.line_space / 2) / label_unit;
 8018e12:	1a5b      	subs	r3, r3, r1
 8018e14:	fb9e f7f7 	sdiv	r7, lr, r7
 8018e18:	b212      	sxth	r2, r2
 8018e1a:	443b      	add	r3, r7
 8018e1c:	fb93 f3f2 	sdiv	r3, r3, r2
        if(id < 0) id = 0;
 8018e20:	2b00      	cmp	r3, #0
 8018e22:	bfb8      	it	lt
 8018e24:	2300      	movlt	r3, #0
 8018e26:	9301      	str	r3, [sp, #4]
        if(id >= ext->ddlist.option_cnt) id = ext->ddlist.option_cnt - 1;
 8018e28:	9a01      	ldr	r2, [sp, #4]
 8018e2a:	8f33      	ldrh	r3, [r6, #56]	; 0x38
 8018e2c:	4293      	cmp	r3, r2
 8018e2e:	bfd8      	it	le
 8018e30:	f103 33ff 	addle.w	r3, r3, #4294967295	; 0xffffffff
        ext->ddlist.sel_opt_id     = id;
 8018e34:	aa02      	add	r2, sp, #8
        if(id >= ext->ddlist.option_cnt) id = ext->ddlist.option_cnt - 1;
 8018e36:	bfd8      	it	le
 8018e38:	9301      	strle	r3, [sp, #4]
        ext->ddlist.sel_opt_id     = id;
 8018e3a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8018e3e:	b29b      	uxth	r3, r3
 8018e40:	8773      	strh	r3, [r6, #58]	; 0x3a
        ext->ddlist.sel_opt_id_ori = id;
 8018e42:	87b3      	strh	r3, [r6, #60]	; 0x3c
        res                        = lv_event_send(roller, LV_EVENT_VALUE_CHANGED, &id);
 8018e44:	210e      	movs	r1, #14
 8018e46:	4620      	mov	r0, r4
 8018e48:	f7f5 fcc2 	bl	800e7d0 <lv_event_send>
        if(res != LV_RES_OK) return res;
 8018e4c:	2801      	cmp	r0, #1
 8018e4e:	d128      	bne.n	8018ea2 <lv_roller_scrl_signal+0xf2>
    if(id != -1) {
 8018e50:	9b01      	ldr	r3, [sp, #4]
 8018e52:	3301      	adds	r3, #1
 8018e54:	d003      	beq.n	8018e5e <lv_roller_scrl_signal+0xae>
        refr_position(roller, true);
 8018e56:	2101      	movs	r1, #1
 8018e58:	4620      	mov	r0, r4
 8018e5a:	f7ff ff43 	bl	8018ce4 <refr_position>
}
 8018e5e:	4628      	mov	r0, r5
 8018e60:	b003      	add	sp, #12
 8018e62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if(sign == LV_SIGNAL_RELEASED) {
 8018e66:	2f0a      	cmp	r7, #10
 8018e68:	d114      	bne.n	8018e94 <lv_roller_scrl_signal+0xe4>
        if(!lv_indev_is_dragging(indev)) {
 8018e6a:	4648      	mov	r0, r9
 8018e6c:	f7f5 fbbd 	bl	800e5ea <lv_indev_is_dragging>
 8018e70:	4607      	mov	r7, r0
 8018e72:	2800      	cmp	r0, #0
 8018e74:	d1ec      	bne.n	8018e50 <lv_roller_scrl_signal+0xa0>
            id = ext->ddlist.sel_opt_id;
 8018e76:	8f73      	ldrh	r3, [r6, #58]	; 0x3a
 8018e78:	9301      	str	r3, [sp, #4]
            lv_group_t * g = lv_obj_get_group(roller);
 8018e7a:	4620      	mov	r0, r4
 8018e7c:	f7f6 fbc1 	bl	800f602 <lv_obj_get_group>
 8018e80:	4606      	mov	r6, r0
            bool editing   = lv_group_get_editing(g);
 8018e82:	f7f5 fb7a 	bl	800e57a <lv_group_get_editing>
            if(editing) lv_group_set_editing(g, false);
 8018e86:	2800      	cmp	r0, #0
 8018e88:	d0e2      	beq.n	8018e50 <lv_roller_scrl_signal+0xa0>
 8018e8a:	4639      	mov	r1, r7
 8018e8c:	4630      	mov	r0, r6
 8018e8e:	f7f5 fb52 	bl	800e536 <lv_group_set_editing>
 8018e92:	e7dd      	b.n	8018e50 <lv_roller_scrl_signal+0xa0>
    } else if(sign == LV_SIGNAL_PRESSED) {
 8018e94:	2f07      	cmp	r7, #7
 8018e96:	d1db      	bne.n	8018e50 <lv_roller_scrl_signal+0xa0>
        lv_anim_del(roller_scrl, (lv_anim_exec_xcb_t)lv_obj_set_y);
 8018e98:	4904      	ldr	r1, [pc, #16]	; (8018eac <lv_roller_scrl_signal+0xfc>)
 8018e9a:	4640      	mov	r0, r8
 8018e9c:	f7fb f80e 	bl	8013ebc <lv_anim_del>
 8018ea0:	e7d6      	b.n	8018e50 <lv_roller_scrl_signal+0xa0>
 8018ea2:	4605      	mov	r5, r0
 8018ea4:	e7db      	b.n	8018e5e <lv_roller_scrl_signal+0xae>
 8018ea6:	bf00      	nop
 8018ea8:	2000b060 	.word	0x2000b060
 8018eac:	0800ea71 	.word	0x0800ea71

08018eb0 <refr_height>:
{
 8018eb0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8018eb4:	4604      	mov	r4, r0
    lv_roller_ext_t * ext = lv_obj_get_ext_attr(roller);
 8018eb6:	f7f6 fb9e 	bl	800f5f6 <lv_obj_get_ext_attr>
 8018eba:	4605      	mov	r5, r0
    if(ext->ddlist.label) {
 8018ebc:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8018ebe:	bb20      	cbnz	r0, 8018f0a <refr_height+0x5a>
    lv_align_t obj_align  = LV_ALIGN_IN_LEFT_MID;
 8018ec0:	2607      	movs	r6, #7
    lv_obj_set_height(lv_page_get_scrl(roller), lv_obj_get_height(ext->ddlist.label) + lv_obj_get_height(roller));
 8018ec2:	4620      	mov	r0, r4
 8018ec4:	f7ff f91b 	bl	80180fe <lv_page_get_scrl>
 8018ec8:	4680      	mov	r8, r0
 8018eca:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8018ecc:	f7f6 fa9c 	bl	800f408 <lv_obj_get_height>
 8018ed0:	4607      	mov	r7, r0
 8018ed2:	4620      	mov	r0, r4
 8018ed4:	f7f6 fa98 	bl	800f408 <lv_obj_get_height>
 8018ed8:	1839      	adds	r1, r7, r0
 8018eda:	b209      	sxth	r1, r1
 8018edc:	4640      	mov	r0, r8
 8018ede:	f7f6 f9c0 	bl	800f262 <lv_obj_set_height>
    lv_obj_align(ext->ddlist.label, NULL, obj_align, 0, 0);
 8018ee2:	2300      	movs	r3, #0
 8018ee4:	9300      	str	r3, [sp, #0]
 8018ee6:	4619      	mov	r1, r3
 8018ee8:	4632      	mov	r2, r6
 8018eea:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8018eec:	f7f5 fdc8 	bl	800ea80 <lv_obj_align>
    lv_anim_del(lv_page_get_scrl(roller), (lv_anim_exec_xcb_t)lv_obj_set_y);
 8018ef0:	4620      	mov	r0, r4
 8018ef2:	f7ff f904 	bl	80180fe <lv_page_get_scrl>
 8018ef6:	490a      	ldr	r1, [pc, #40]	; (8018f20 <refr_height+0x70>)
 8018ef8:	f7fa ffe0 	bl	8013ebc <lv_anim_del>
    lv_ddlist_set_selected(roller, ext->ddlist.sel_opt_id);
 8018efc:	8f69      	ldrh	r1, [r5, #58]	; 0x3a
 8018efe:	4620      	mov	r0, r4
}
 8018f00:	b002      	add	sp, #8
 8018f02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_ddlist_set_selected(roller, ext->ddlist.sel_opt_id);
 8018f06:	f7fd ba90 	b.w	801642a <lv_ddlist_set_selected>
        lv_label_align_t label_align = lv_label_get_align(ext->ddlist.label);
 8018f0a:	f7fe fa29 	bl	8017360 <lv_label_get_align>
        if(LV_LABEL_ALIGN_CENTER == label_align)
 8018f0e:	2801      	cmp	r0, #1
 8018f10:	d003      	beq.n	8018f1a <refr_height+0x6a>
        else if(LV_LABEL_ALIGN_RIGHT == label_align)
 8018f12:	2802      	cmp	r0, #2
 8018f14:	d1d4      	bne.n	8018ec0 <refr_height+0x10>
            obj_align = LV_ALIGN_IN_RIGHT_MID;
 8018f16:	2608      	movs	r6, #8
 8018f18:	e7d3      	b.n	8018ec2 <refr_height+0x12>
            obj_align = LV_ALIGN_CENTER;
 8018f1a:	2600      	movs	r6, #0
 8018f1c:	e7d1      	b.n	8018ec2 <refr_height+0x12>
 8018f1e:	bf00      	nop
 8018f20:	0800ea71 	.word	0x0800ea71

08018f24 <lv_roller_design>:
{
 8018f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if(mode == LV_DESIGN_COVER_CHK) {
 8018f28:	2a02      	cmp	r2, #2
{
 8018f2a:	b09a      	sub	sp, #104	; 0x68
 8018f2c:	4604      	mov	r4, r0
 8018f2e:	460e      	mov	r6, r1
    if(mode == LV_DESIGN_COVER_CHK) {
 8018f30:	f000 815e 	beq.w	80191f0 <lv_roller_design+0x2cc>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 8018f34:	2a00      	cmp	r2, #0
 8018f36:	f040 80e6 	bne.w	8019106 <lv_roller_design+0x1e2>
        case LV_ROLLER_STYLE_BG: return lv_obj_get_style(roller);
 8018f3a:	f7f6 fa71 	bl	800f420 <lv_obj_get_style>
 8018f3e:	4607      	mov	r7, r0
    lv_coord_t h = lv_obj_get_height(roller);
 8018f40:	4620      	mov	r0, r4
 8018f42:	f7f6 fa61 	bl	800f408 <lv_obj_get_height>
    memcpy(dest, src, sizeof(lv_area_t));
 8018f46:	4622      	mov	r2, r4
 8018f48:	4680      	mov	r8, r0
 8018f4a:	f852 0f10 	ldr.w	r0, [r2, #16]!
 8018f4e:	6851      	ldr	r1, [r2, #4]
    half_roller.x1 -= roller->ext_draw_pad; /*Add ext size too (e.g. because of shadow draw) */
 8018f50:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8018f52:	ab09      	add	r3, sp, #36	; 0x24
 8018f54:	c303      	stmia	r3!, {r0, r1}
 8018f56:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8018f5a:	1a9b      	subs	r3, r3, r2
 8018f5c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    half_roller.x2 += roller->ext_draw_pad;
 8018f60:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8018f64:	4413      	add	r3, r2
 8018f66:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
    half_roller.y1 -= roller->ext_draw_pad;
 8018f6a:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8018f6e:	1a9b      	subs	r3, r3, r2
 8018f70:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    half_roller.y2 = roller->coords.y1 + h / 2;
 8018f74:	8a63      	ldrh	r3, [r4, #18]
 8018f76:	2502      	movs	r5, #2
 8018f78:	fb98 f5f5 	sdiv	r5, r8, r5
 8018f7c:	b2ad      	uxth	r5, r5
 8018f7e:	442b      	add	r3, r5
    union_ok = lv_area_intersect(&half_mask, &half_roller, mask);
 8018f80:	4632      	mov	r2, r6
 8018f82:	a909      	add	r1, sp, #36	; 0x24
 8018f84:	a807      	add	r0, sp, #28
    half_roller.y2 = roller->coords.y1 + h / 2;
 8018f86:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
    union_ok = lv_area_intersect(&half_mask, &half_roller, mask);
 8018f8a:	f7fb f830 	bl	8013fee <lv_area_intersect>
    half_roller.x1 += roller->ext_draw_pad; /*Revert ext. size adding*/
 8018f8e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8018f90:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8018f94:	441a      	add	r2, r3
 8018f96:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
    half_roller.x2 -= roller->ext_draw_pad;
 8018f9a:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8018f9e:	1ad2      	subs	r2, r2, r3
 8018fa0:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
    half_roller.y1 += roller->ext_draw_pad;
 8018fa4:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 8018fa8:	4413      	add	r3, r2
 8018faa:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    half_roller.y2 += style->body.radius;
 8018fae:	88fa      	ldrh	r2, [r7, #6]
 8018fb0:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8018fb4:	4413      	add	r3, r2
 8018fb6:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
    if(union_ok) {
 8018fba:	b140      	cbz	r0, 8018fce <lv_roller_design+0xaa>
        lv_draw_rect(&half_roller, &half_mask, style, lv_obj_get_opa_scale(roller));
 8018fbc:	4620      	mov	r0, r4
 8018fbe:	f7f6 fab2 	bl	800f526 <lv_obj_get_opa_scale>
 8018fc2:	463a      	mov	r2, r7
 8018fc4:	4603      	mov	r3, r0
 8018fc6:	a907      	add	r1, sp, #28
 8018fc8:	a809      	add	r0, sp, #36	; 0x24
 8018fca:	f7f8 fa39 	bl	8011440 <lv_draw_rect>
    half_roller.x1 -= roller->ext_draw_pad; /*Add ext size too (e.g. because of shadow draw) */
 8018fce:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8018fd0:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8018fd4:	1ad2      	subs	r2, r2, r3
 8018fd6:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
    half_roller.x2 += roller->ext_draw_pad;
 8018fda:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8018fde:	441a      	add	r2, r3
 8018fe0:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
    half_roller.y2 = roller->coords.y2 + roller->ext_draw_pad;
 8018fe4:	8ae2      	ldrh	r2, [r4, #22]
 8018fe6:	4413      	add	r3, r2
 8018fe8:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
    half_roller.y1 = roller->coords.y1 + h / 2;
 8018fec:	8a63      	ldrh	r3, [r4, #18]
 8018fee:	441d      	add	r5, r3
 8018ff0:	b2ad      	uxth	r5, r5
    if((h & 0x1) == 0) half_roller.y1++; /*With even height the pixels in the middle would be drawn twice*/
 8018ff2:	f018 0f01 	tst.w	r8, #1
 8018ff6:	bf08      	it	eq
 8018ff8:	3501      	addeq	r5, #1
    union_ok = lv_area_intersect(&half_mask, &half_roller, mask);
 8018ffa:	4632      	mov	r2, r6
 8018ffc:	a909      	add	r1, sp, #36	; 0x24
 8018ffe:	a807      	add	r0, sp, #28
    if((h & 0x1) == 0) half_roller.y1++; /*With even height the pixels in the middle would be drawn twice*/
 8019000:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
    union_ok = lv_area_intersect(&half_mask, &half_roller, mask);
 8019004:	f7fa fff3 	bl	8013fee <lv_area_intersect>
    half_roller.x1 += roller->ext_draw_pad; /*Revert ext. size adding*/
 8019008:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801900a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801900e:	4413      	add	r3, r2
 8019010:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    half_roller.x2 -= roller->ext_draw_pad;
 8019014:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8019018:	1a9b      	subs	r3, r3, r2
 801901a:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
    half_roller.y2 -= roller->ext_draw_pad;
 801901e:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8019022:	1a9b      	subs	r3, r3, r2
 8019024:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
    half_roller.y1 -= style->body.radius;
 8019028:	88fa      	ldrh	r2, [r7, #6]
 801902a:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801902e:	1a9b      	subs	r3, r3, r2
 8019030:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    if(union_ok) {
 8019034:	b1e0      	cbz	r0, 8019070 <lv_roller_design+0x14c>
        memcpy(&style_tmp, style, sizeof(lv_style_t));
 8019036:	463b      	mov	r3, r7
 8019038:	aa0b      	add	r2, sp, #44	; 0x2c
 801903a:	f107 0e38 	add.w	lr, r7, #56	; 0x38
 801903e:	6818      	ldr	r0, [r3, #0]
 8019040:	6859      	ldr	r1, [r3, #4]
 8019042:	4615      	mov	r5, r2
 8019044:	c503      	stmia	r5!, {r0, r1}
 8019046:	3308      	adds	r3, #8
 8019048:	4573      	cmp	r3, lr
 801904a:	462a      	mov	r2, r5
 801904c:	d1f7      	bne.n	801903e <lv_roller_design+0x11a>
 801904e:	6818      	ldr	r0, [r3, #0]
 8019050:	6028      	str	r0, [r5, #0]
        style_tmp.body.main_color = style->body.grad_color;
 8019052:	88bb      	ldrh	r3, [r7, #4]
 8019054:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
        style_tmp.body.grad_color = style->body.main_color;
 8019058:	887b      	ldrh	r3, [r7, #2]
 801905a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
        lv_draw_rect(&half_roller, &half_mask, &style_tmp, lv_obj_get_opa_scale(roller));
 801905e:	4620      	mov	r0, r4
 8019060:	f7f6 fa61 	bl	800f526 <lv_obj_get_opa_scale>
 8019064:	aa0b      	add	r2, sp, #44	; 0x2c
 8019066:	4603      	mov	r3, r0
 8019068:	a907      	add	r1, sp, #28
 801906a:	a809      	add	r0, sp, #36	; 0x24
 801906c:	f7f8 f9e8 	bl	8011440 <lv_draw_rect>
        case LV_ROLLER_STYLE_BG: return lv_obj_get_style(roller);
 8019070:	4620      	mov	r0, r4
 8019072:	f7f6 f9d5 	bl	800f420 <lv_obj_get_style>
 8019076:	4682      	mov	sl, r0
        lv_opa_t opa_scale       = lv_obj_get_opa_scale(roller);
 8019078:	4620      	mov	r0, r4
 801907a:	f7f6 fa54 	bl	800f526 <lv_obj_get_opa_scale>
 801907e:	4680      	mov	r8, r0
        lv_roller_ext_t * ext    = lv_obj_get_ext_attr(roller);
 8019080:	4620      	mov	r0, r4
        const lv_font_t * font   = style->text.font;
 8019082:	f8da 5024 	ldr.w	r5, [sl, #36]	; 0x24
        lv_roller_ext_t * ext    = lv_obj_get_ext_attr(roller);
 8019086:	f7f6 fab6 	bl	800f5f6 <lv_obj_get_ext_attr>
 801908a:	4607      	mov	r7, r0
        rect_area.y1 = roller->coords.y1 + lv_obj_get_height(roller) / 2 - font_h / 2 - style->text.line_space / 2;
 801908c:	4620      	mov	r0, r4
 801908e:	f895 9008 	ldrb.w	r9, [r5, #8]
 8019092:	8a65      	ldrh	r5, [r4, #18]
 8019094:	f7f6 f9b8 	bl	800f408 <lv_obj_get_height>
 8019098:	2102      	movs	r1, #2
 801909a:	fb90 f3f1 	sdiv	r3, r0, r1
 801909e:	442b      	add	r3, r5
 80190a0:	f9ba 202a 	ldrsh.w	r2, [sl, #42]	; 0x2a
 80190a4:	fb92 f1f1 	sdiv	r1, r2, r1
 80190a8:	1a5b      	subs	r3, r3, r1
 80190aa:	eba3 0359 	sub.w	r3, r3, r9, lsr #1
        if((font_h & 0x1) && (style->text.line_space & 0x1)) rect_area.y1--; /*Compensate the two rounding error*/
 80190ae:	f019 0f01 	tst.w	r9, #1
        rect_area.y1 = roller->coords.y1 + lv_obj_get_height(roller) / 2 - font_h / 2 - style->text.line_space / 2;
 80190b2:	b29b      	uxth	r3, r3
        if((font_h & 0x1) && (style->text.line_space & 0x1)) rect_area.y1--; /*Compensate the two rounding error*/
 80190b4:	fa1f f189 	uxth.w	r1, r9
 80190b8:	d120      	bne.n	80190fc <lv_roller_design+0x1d8>
 80190ba:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        rect_area.y2 = rect_area.y1 + font_h + style->text.line_space - 1;
 80190be:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80190c2:	3b01      	subs	r3, #1
 80190c4:	4413      	add	r3, r2
 80190c6:	440b      	add	r3, r1
        lv_obj_get_coords(roller, &roller_coords);
 80190c8:	4620      	mov	r0, r4
 80190ca:	a90b      	add	r1, sp, #44	; 0x2c
        rect_area.y2 = rect_area.y1 + font_h + style->text.line_space - 1;
 80190cc:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
        lv_obj_get_coords(roller, &roller_coords);
 80190d0:	f7f6 f982 	bl	800f3d8 <lv_obj_get_coords>
        lv_obj_get_inner_coords(roller, &roller_coords);
 80190d4:	a90b      	add	r1, sp, #44	; 0x2c
 80190d6:	4620      	mov	r0, r4
 80190d8:	f7f6 f9f4 	bl	800f4c4 <lv_obj_get_inner_coords>
        rect_area.x1 = roller_coords.x1;
 80190dc:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 80190e0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        rect_area.x2 = roller_coords.x2;
 80190e4:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 80190e8:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
        lv_draw_rect(&rect_area, mask, ext->ddlist.sel_style, opa_scale);
 80190ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80190ee:	4643      	mov	r3, r8
 80190f0:	4631      	mov	r1, r6
 80190f2:	a809      	add	r0, sp, #36	; 0x24
 80190f4:	f7f8 f9a4 	bl	8011440 <lv_draw_rect>
    return true;
 80190f8:	2001      	movs	r0, #1
 80190fa:	e07a      	b.n	80191f2 <lv_roller_design+0x2ce>
        if((font_h & 0x1) && (style->text.line_space & 0x1)) rect_area.y1--; /*Compensate the two rounding error*/
 80190fc:	07d0      	lsls	r0, r2, #31
 80190fe:	bf48      	it	mi
 8019100:	f103 33ff 	addmi.w	r3, r3, #4294967295	; 0xffffffff
 8019104:	e7d9      	b.n	80190ba <lv_roller_design+0x196>
    else if(mode == LV_DESIGN_DRAW_POST) {
 8019106:	2a01      	cmp	r2, #1
 8019108:	d1f6      	bne.n	80190f8 <lv_roller_design+0x1d4>
        case LV_ROLLER_STYLE_BG: return lv_obj_get_style(roller);
 801910a:	f7f6 f989 	bl	800f420 <lv_obj_get_style>
 801910e:	4607      	mov	r7, r0
        lv_roller_ext_t * ext    = lv_obj_get_ext_attr(roller);
 8019110:	4620      	mov	r0, r4
 8019112:	f7f6 fa70 	bl	800f5f6 <lv_obj_get_ext_attr>
 8019116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019118:	4680      	mov	r8, r0
        lv_opa_t opa_scale       = lv_obj_get_opa_scale(roller);
 801911a:	4620      	mov	r0, r4
 801911c:	f893 a008 	ldrb.w	sl, [r3, #8]
 8019120:	f7f6 fa01 	bl	800f526 <lv_obj_get_opa_scale>
 8019124:	4681      	mov	r9, r0
        rect_area.y1 = roller->coords.y1 + lv_obj_get_height(roller) / 2 - font_h / 2 - style->text.line_space / 2;
 8019126:	4620      	mov	r0, r4
 8019128:	8a65      	ldrh	r5, [r4, #18]
 801912a:	f7f6 f96d 	bl	800f408 <lv_obj_get_height>
 801912e:	2102      	movs	r1, #2
 8019130:	fb90 f3f1 	sdiv	r3, r0, r1
 8019134:	442b      	add	r3, r5
 8019136:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 801913a:	fb92 f1f1 	sdiv	r1, r2, r1
 801913e:	1a5b      	subs	r3, r3, r1
 8019140:	eba3 035a 	sub.w	r3, r3, sl, lsr #1
 8019144:	b29b      	uxth	r3, r3
        if((font_h & 0x1) && (style->text.line_space & 0x1)) rect_area.y1--; /*Compensate the two rounding error*/
 8019146:	f01a 0f01 	tst.w	sl, #1
        rect_area.y1 = roller->coords.y1 + lv_obj_get_height(roller) / 2 - font_h / 2 - style->text.line_space / 2;
 801914a:	b218      	sxth	r0, r3
        if((font_h & 0x1) && (style->text.line_space & 0x1)) rect_area.y1--; /*Compensate the two rounding error*/
 801914c:	fa1f f18a 	uxth.w	r1, sl
 8019150:	d145      	bne.n	80191de <lv_roller_design+0x2ba>
        rect_area.y1 = roller->coords.y1 + lv_obj_get_height(roller) / 2 - font_h / 2 - style->text.line_space / 2;
 8019152:	f8ad 001e 	strh.w	r0, [sp, #30]
        rect_area.y2 = rect_area.y1 + font_h + style->text.line_space - 1;
 8019156:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801915a:	3b01      	subs	r3, #1
 801915c:	4413      	add	r3, r2
 801915e:	440b      	add	r3, r1
 8019160:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
        rect_area.x1 = roller->coords.x1;
 8019164:	8a23      	ldrh	r3, [r4, #16]
 8019166:	f8ad 301c 	strh.w	r3, [sp, #28]
        area_ok = lv_area_intersect(&mask_sel, mask, &rect_area);
 801916a:	aa07      	add	r2, sp, #28
        rect_area.x2 = roller->coords.x2;
 801916c:	8aa3      	ldrh	r3, [r4, #20]
 801916e:	f8ad 3020 	strh.w	r3, [sp, #32]
        area_ok = lv_area_intersect(&mask_sel, mask, &rect_area);
 8019172:	4631      	mov	r1, r6
 8019174:	a809      	add	r0, sp, #36	; 0x24
 8019176:	f7fa ff3a 	bl	8013fee <lv_area_intersect>
        if(area_ok) {
 801917a:	2800      	cmp	r0, #0
 801917c:	d0bc      	beq.n	80190f8 <lv_roller_design+0x1d4>
        case LV_ROLLER_STYLE_SEL: return lv_ddlist_get_style(roller, LV_DDLIST_STYLE_SEL);
 801917e:	2101      	movs	r1, #1
 8019180:	4620      	mov	r0, r4
 8019182:	f7fd faed 	bl	8016760 <lv_ddlist_get_style>
 8019186:	4604      	mov	r4, r0
                lv_label_align_t label_align = lv_label_get_align(ext->ddlist.label);
 8019188:	f8d8 0030 	ldr.w	r0, [r8, #48]	; 0x30
 801918c:	f7fe f8e8 	bl	8017360 <lv_label_get_align>
                if(LV_LABEL_ALIGN_CENTER == label_align) {
 8019190:	2801      	cmp	r0, #1
 8019192:	d02b      	beq.n	80191ec <lv_roller_design+0x2c8>
                    txt_align |= LV_TXT_FLAG_RIGHT;
 8019194:	2802      	cmp	r0, #2
 8019196:	bf14      	ite	ne
 8019198:	2500      	movne	r5, #0
 801919a:	2508      	moveq	r5, #8
            lv_style_copy(&new_style, style);
 801919c:	4639      	mov	r1, r7
 801919e:	a80b      	add	r0, sp, #44	; 0x2c
 80191a0:	f7f6 fd6c 	bl	800fc7c <lv_style_copy>
            new_style.text.color = sel_style->text.color;
 80191a4:	8c23      	ldrh	r3, [r4, #32]
 80191a6:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
            new_style.text.opa   = sel_style->text.opa;
 80191aa:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80191ae:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
            lv_draw_label(&ext->ddlist.label->coords, &mask_sel, &new_style, opa_scale,
 80191b2:	f8d8 4030 	ldr.w	r4, [r8, #48]	; 0x30
                          lv_label_get_text(ext->ddlist.label), txt_align, NULL, -1, -1, NULL);
 80191b6:	4620      	mov	r0, r4
 80191b8:	f7fe f8c6 	bl	8017348 <lv_label_get_text>
            lv_draw_label(&ext->ddlist.label->coords, &mask_sel, &new_style, opa_scale,
 80191bc:	2300      	movs	r3, #0
 80191be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80191c2:	9305      	str	r3, [sp, #20]
 80191c4:	9204      	str	r2, [sp, #16]
 80191c6:	9203      	str	r2, [sp, #12]
 80191c8:	9302      	str	r3, [sp, #8]
 80191ca:	e88d 0021 	stmia.w	sp, {r0, r5}
 80191ce:	464b      	mov	r3, r9
 80191d0:	aa0b      	add	r2, sp, #44	; 0x2c
 80191d2:	a909      	add	r1, sp, #36	; 0x24
 80191d4:	f104 0010 	add.w	r0, r4, #16
 80191d8:	f7f7 fe9c 	bl	8010f14 <lv_draw_label>
 80191dc:	e78c      	b.n	80190f8 <lv_roller_design+0x1d4>
        if((font_h & 0x1) && (style->text.line_space & 0x1)) rect_area.y1--; /*Compensate the two rounding error*/
 80191de:	f012 0f01 	tst.w	r2, #1
 80191e2:	d0b6      	beq.n	8019152 <lv_roller_design+0x22e>
 80191e4:	3b01      	subs	r3, #1
 80191e6:	f8ad 301e 	strh.w	r3, [sp, #30]
 80191ea:	e7b4      	b.n	8019156 <lv_roller_design+0x232>
                    txt_align |= LV_TXT_FLAG_CENTER;
 80191ec:	2504      	movs	r5, #4
 80191ee:	e7d5      	b.n	801919c <lv_roller_design+0x278>
        return false;
 80191f0:	2000      	movs	r0, #0
}
 80191f2:	b01a      	add	sp, #104	; 0x68
 80191f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080191f8 <lv_roller_set_visible_row_count>:
{
 80191f8:	b538      	push	{r3, r4, r5, lr}
 80191fa:	460c      	mov	r4, r1
 80191fc:	4605      	mov	r5, r0
    lv_roller_ext_t * ext          = lv_obj_get_ext_attr(roller);
 80191fe:	f7f6 f9fa 	bl	800f5f6 <lv_obj_get_ext_attr>
    const lv_style_t * style_label = lv_obj_get_style(ext->ddlist.label);
 8019202:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8019204:	f7f6 f90c 	bl	800f420 <lv_obj_get_style>
    uint8_t n_line_space           = (row_cnt > 1) ? row_cnt - 1 : 1;
 8019208:	2c01      	cmp	r4, #1
    lv_ddlist_set_fix_height(roller, lv_font_get_line_height(style_label->text.font) * row_cnt +
 801920a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 801920c:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 801920e:	7a12      	ldrb	r2, [r2, #8]
    uint8_t n_line_space           = (row_cnt > 1) ? row_cnt - 1 : 1;
 8019210:	bf86      	itte	hi
 8019212:	f104 33ff 	addhi.w	r3, r4, #4294967295	; 0xffffffff
 8019216:	b2db      	uxtbhi	r3, r3
 8019218:	2301      	movls	r3, #1
    lv_ddlist_set_fix_height(roller, lv_font_get_line_height(style_label->text.font) * row_cnt +
 801921a:	fb11 f103 	smulbb	r1, r1, r3
 801921e:	fb02 1104 	mla	r1, r2, r4, r1
 8019222:	4628      	mov	r0, r5
 8019224:	b209      	sxth	r1, r1
}
 8019226:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_ddlist_set_fix_height(roller, lv_font_get_line_height(style_label->text.font) * row_cnt +
 801922a:	f7fd b91c 	b.w	8016466 <lv_ddlist_set_fix_height>
	...

08019230 <lv_roller_create>:
{
 8019230:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019232:	460e      	mov	r6, r1
    lv_obj_t * new_roller = lv_ddlist_create(par, copy);
 8019234:	f7fd f97c 	bl	8016530 <lv_ddlist_create>
    lv_mem_assert(new_roller);
 8019238:	4604      	mov	r4, r0
 801923a:	b900      	cbnz	r0, 801923e <lv_roller_create+0xe>
 801923c:	e7fe      	b.n	801923c <lv_roller_create+0xc>
    if(ancestor_scrl_signal == NULL) ancestor_scrl_signal = lv_obj_get_signal_cb(lv_page_get_scrl(new_roller));
 801923e:	4d3d      	ldr	r5, [pc, #244]	; (8019334 <lv_roller_create+0x104>)
 8019240:	682b      	ldr	r3, [r5, #0]
 8019242:	b923      	cbnz	r3, 801924e <lv_roller_create+0x1e>
 8019244:	f7fe ff5b 	bl	80180fe <lv_page_get_scrl>
 8019248:	f7f6 f9d1 	bl	800f5ee <lv_obj_get_signal_cb>
 801924c:	6028      	str	r0, [r5, #0]
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_roller);
 801924e:	4d3a      	ldr	r5, [pc, #232]	; (8019338 <lv_roller_create+0x108>)
 8019250:	682b      	ldr	r3, [r5, #0]
 8019252:	b91b      	cbnz	r3, 801925c <lv_roller_create+0x2c>
 8019254:	4620      	mov	r0, r4
 8019256:	f7f6 f9ca 	bl	800f5ee <lv_obj_get_signal_cb>
 801925a:	6028      	str	r0, [r5, #0]
    lv_roller_ext_t * ext = lv_obj_allocate_ext_attr(new_roller, sizeof(lv_roller_ext_t));
 801925c:	2148      	movs	r1, #72	; 0x48
 801925e:	4620      	mov	r0, r4
 8019260:	f7f5 fb1e 	bl	800e8a0 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 8019264:	4605      	mov	r5, r0
 8019266:	b900      	cbnz	r0, 801926a <lv_roller_create+0x3a>
 8019268:	e7fe      	b.n	8019268 <lv_roller_create+0x38>
    ext->ddlist.draw_arrow = 0; /*Do not draw arrow by default*/
 801926a:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
    lv_obj_set_signal_cb(new_roller, lv_roller_signal);
 801926e:	4933      	ldr	r1, [pc, #204]	; (801933c <lv_roller_create+0x10c>)
    ext->ddlist.draw_arrow = 0; /*Do not draw arrow by default*/
 8019270:	f36f 0382 	bfc	r3, #2, #1
 8019274:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    lv_obj_set_signal_cb(new_roller, lv_roller_signal);
 8019278:	4620      	mov	r0, r4
 801927a:	f7f5 fb0d 	bl	800e898 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_roller, lv_roller_design);
 801927e:	4930      	ldr	r1, [pc, #192]	; (8019340 <lv_roller_create+0x110>)
 8019280:	4620      	mov	r0, r4
 8019282:	f7f5 fb0b 	bl	800e89c <lv_obj_set_design_cb>
    if(copy == NULL) {
 8019286:	bbce      	cbnz	r6, 80192fc <lv_roller_create+0xcc>
        lv_obj_t * scrl = lv_page_get_scrl(new_roller);
 8019288:	4620      	mov	r0, r4
 801928a:	f7fe ff38 	bl	80180fe <lv_page_get_scrl>
        lv_obj_set_drag(scrl, true);                                  /*In ddlist it might be disabled*/
 801928e:	2101      	movs	r1, #1
        lv_obj_t * scrl = lv_page_get_scrl(new_roller);
 8019290:	4607      	mov	r7, r0
        lv_obj_set_drag(scrl, true);                                  /*In ddlist it might be disabled*/
 8019292:	f7f5 fa34 	bl	800e6fe <lv_obj_set_drag>
    lv_cont_set_fit2(lv_page_get_scrl(page), hor, ver);
 8019296:	4620      	mov	r0, r4
 8019298:	f7fe ff31 	bl	80180fe <lv_page_get_scrl>
 801929c:	2201      	movs	r2, #1
 801929e:	4611      	mov	r1, r2
 80192a0:	4633      	mov	r3, r6
 80192a2:	9600      	str	r6, [sp, #0]
 80192a4:	f7fc fb2b 	bl	80158fe <lv_cont_set_fit4>
        lv_ddlist_open(new_roller, false);
 80192a8:	4631      	mov	r1, r6
 80192aa:	4620      	mov	r0, r4
 80192ac:	f7fd fbb6 	bl	8016a1c <lv_ddlist_open>
    lv_page_set_anim_time(ddlist, anim_time);
 80192b0:	21c8      	movs	r1, #200	; 0xc8
 80192b2:	4620      	mov	r0, r4
 80192b4:	f7fe feed 	bl	8018092 <lv_page_set_anim_time>
        lv_ddlist_set_stay_open(new_roller, true);
 80192b8:	2101      	movs	r1, #1
 80192ba:	4620      	mov	r0, r4
 80192bc:	f7fd f907 	bl	80164ce <lv_ddlist_set_stay_open>
        lv_roller_set_visible_row_count(new_roller, 3);
 80192c0:	2103      	movs	r1, #3
 80192c2:	4620      	mov	r0, r4
 80192c4:	f7ff ff98 	bl	80191f8 <lv_roller_set_visible_row_count>
        lv_label_set_align(ext->ddlist.label, LV_LABEL_ALIGN_CENTER);
 80192c8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80192ca:	2101      	movs	r1, #1
 80192cc:	f7fe f813 	bl	80172f6 <lv_label_set_align>
        lv_obj_set_signal_cb(scrl, lv_roller_scrl_signal);
 80192d0:	491c      	ldr	r1, [pc, #112]	; (8019344 <lv_roller_create+0x114>)
 80192d2:	4638      	mov	r0, r7
 80192d4:	f7f5 fae0 	bl	800e898 <lv_obj_set_signal_cb>
        lv_theme_t * th = lv_theme_get_current();
 80192d8:	f000 f958 	bl	801958c <lv_theme_get_current>
        if(th) {
 80192dc:	4605      	mov	r5, r0
 80192de:	b320      	cbz	r0, 801932a <lv_roller_create+0xfa>
        case LV_ROLLER_STYLE_BG: lv_obj_set_style(roller, style); break;
 80192e0:	f8d0 1158 	ldr.w	r1, [r0, #344]	; 0x158
 80192e4:	4620      	mov	r0, r4
 80192e6:	f7f6 f86d 	bl	800f3c4 <lv_obj_set_style>
        case LV_ROLLER_STYLE_SEL: lv_ddlist_set_style(roller, LV_DDLIST_STYLE_SEL, style); break;
 80192ea:	f8d5 215c 	ldr.w	r2, [r5, #348]	; 0x15c
 80192ee:	2101      	movs	r1, #1
 80192f0:	4620      	mov	r0, r4
 80192f2:	f7fd f8f7 	bl	80164e4 <lv_ddlist_set_style>
}
 80192f6:	4620      	mov	r0, r4
 80192f8:	b003      	add	sp, #12
 80192fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_roller_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 80192fc:	4630      	mov	r0, r6
 80192fe:	f7f6 f97a 	bl	800f5f6 <lv_obj_get_ext_attr>
        ext->mode                  = copy_ext->mode;
 8019302:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 8019306:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
 801930a:	f362 0300 	bfi	r3, r2, #0, #1
 801930e:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
        lv_obj_t * scrl = lv_page_get_scrl(new_roller);
 8019312:	4620      	mov	r0, r4
 8019314:	f7fe fef3 	bl	80180fe <lv_page_get_scrl>
        lv_ddlist_open(new_roller, false);
 8019318:	2100      	movs	r1, #0
        lv_obj_t * scrl = lv_page_get_scrl(new_roller);
 801931a:	4605      	mov	r5, r0
        lv_ddlist_open(new_roller, false);
 801931c:	4620      	mov	r0, r4
 801931e:	f7fd fb7d 	bl	8016a1c <lv_ddlist_open>
        lv_obj_set_signal_cb(scrl, lv_roller_scrl_signal);
 8019322:	4908      	ldr	r1, [pc, #32]	; (8019344 <lv_roller_create+0x114>)
 8019324:	4628      	mov	r0, r5
 8019326:	f7f5 fab7 	bl	800e898 <lv_obj_set_signal_cb>
        lv_obj_refresh_style(new_roller); /*Refresh the style with new signal function*/
 801932a:	4620      	mov	r0, r4
 801932c:	f7f5 ffa1 	bl	800f272 <lv_obj_refresh_style>
 8019330:	e7e1      	b.n	80192f6 <lv_roller_create+0xc6>
 8019332:	bf00      	nop
 8019334:	2000b060 	.word	0x2000b060
 8019338:	2000b064 	.word	0x2000b064
 801933c:	080193c5 	.word	0x080193c5
 8019340:	08018f25 	.word	0x08018f25
 8019344:	08018db1 	.word	0x08018db1

08019348 <lv_roller_set_style>:
{
 8019348:	b410      	push	{r4}
    switch(type) {
 801934a:	b121      	cbz	r1, 8019356 <lv_roller_set_style+0xe>
 801934c:	2901      	cmp	r1, #1
 801934e:	d007      	beq.n	8019360 <lv_roller_set_style+0x18>
}
 8019350:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019354:	4770      	bx	lr
        case LV_ROLLER_STYLE_BG: lv_obj_set_style(roller, style); break;
 8019356:	4611      	mov	r1, r2
}
 8019358:	f85d 4b04 	ldr.w	r4, [sp], #4
        case LV_ROLLER_STYLE_BG: lv_obj_set_style(roller, style); break;
 801935c:	f7f6 b832 	b.w	800f3c4 <lv_obj_set_style>
}
 8019360:	f85d 4b04 	ldr.w	r4, [sp], #4
        case LV_ROLLER_STYLE_SEL: lv_ddlist_set_style(roller, LV_DDLIST_STYLE_SEL, style); break;
 8019364:	f7fd b8be 	b.w	80164e4 <lv_ddlist_set_style>

08019368 <lv_roller_get_selected>:
{
 8019368:	b538      	push	{r3, r4, r5, lr}
 801936a:	4605      	mov	r5, r0
    lv_roller_ext_t * ext = lv_obj_get_ext_attr(roller);
 801936c:	f7f6 f943 	bl	800f5f6 <lv_obj_get_ext_attr>
    if(ext->mode == LV_ROLLER_MODE_INIFINITE) {
 8019370:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8019374:	07db      	lsls	r3, r3, #31
 8019376:	d404      	bmi.n	8019382 <lv_roller_get_selected+0x1a>
        return lv_ddlist_get_selected(roller);
 8019378:	4628      	mov	r0, r5
}
 801937a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return lv_ddlist_get_selected(roller);
 801937e:	f7fd b9b3 	b.w	80166e8 <lv_ddlist_get_selected>
        uint16_t real_id_cnt = ext->ddlist.option_cnt / LV_ROLLER_INF_PAGES;
 8019382:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 8019384:	2007      	movs	r0, #7
 8019386:	fbb4 f4f0 	udiv	r4, r4, r0
        return lv_ddlist_get_selected(roller) % real_id_cnt;
 801938a:	4628      	mov	r0, r5
 801938c:	f7fd f9ac 	bl	80166e8 <lv_ddlist_get_selected>
 8019390:	fbb0 f3f4 	udiv	r3, r0, r4
 8019394:	fb03 0014 	mls	r0, r3, r4, r0
 8019398:	b280      	uxth	r0, r0
}
 801939a:	bd38      	pop	{r3, r4, r5, pc}

0801939c <lv_roller_set_selected>:
{
 801939c:	b570      	push	{r4, r5, r6, lr}
 801939e:	460d      	mov	r5, r1
 80193a0:	4604      	mov	r4, r0
 80193a2:	4616      	mov	r6, r2
    if(lv_roller_get_selected(roller) == sel_opt) return;
 80193a4:	f7ff ffe0 	bl	8019368 <lv_roller_get_selected>
 80193a8:	42a8      	cmp	r0, r5
 80193aa:	d009      	beq.n	80193c0 <lv_roller_set_selected+0x24>
    lv_ddlist_set_selected(roller, sel_opt);
 80193ac:	4629      	mov	r1, r5
 80193ae:	4620      	mov	r0, r4
 80193b0:	f7fd f83b 	bl	801642a <lv_ddlist_set_selected>
    refr_position(roller, anim);
 80193b4:	4631      	mov	r1, r6
 80193b6:	4620      	mov	r0, r4
}
 80193b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    refr_position(roller, anim);
 80193bc:	f7ff bc92 	b.w	8018ce4 <refr_position>
 80193c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080193c4 <lv_roller_signal>:
{
 80193c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(sign != LV_SIGNAL_CONTROL && sign != LV_SIGNAL_FOCUS && sign != LV_SIGNAL_DEFOCUS) {
 80193c6:	f1a1 030f 	sub.w	r3, r1, #15
 80193ca:	2b02      	cmp	r3, #2
{
 80193cc:	4605      	mov	r5, r0
 80193ce:	460f      	mov	r7, r1
 80193d0:	4616      	mov	r6, r2
    if(sign != LV_SIGNAL_CONTROL && sign != LV_SIGNAL_FOCUS && sign != LV_SIGNAL_DEFOCUS) {
 80193d2:	d80d      	bhi.n	80193f0 <lv_roller_signal+0x2c>
    lv_roller_ext_t * ext = lv_obj_get_ext_attr(roller);
 80193d4:	4628      	mov	r0, r5
 80193d6:	f7f6 f90e 	bl	800f5f6 <lv_obj_get_ext_attr>
    if(sign == LV_SIGNAL_STYLE_CHG) {
 80193da:	2f04      	cmp	r7, #4
    lv_roller_ext_t * ext = lv_obj_get_ext_attr(roller);
 80193dc:	4604      	mov	r4, r0
    if(sign == LV_SIGNAL_STYLE_CHG) {
 80193de:	d10d      	bne.n	80193fc <lv_roller_signal+0x38>
        refr_height(roller);
 80193e0:	4628      	mov	r0, r5
 80193e2:	f7ff fd65 	bl	8018eb0 <refr_height>
            refr_position(roller, false);
 80193e6:	2100      	movs	r1, #0
            refr_position(roller, true);
 80193e8:	4628      	mov	r0, r5
 80193ea:	f7ff fc7b 	bl	8018ce4 <refr_position>
 80193ee:	e029      	b.n	8019444 <lv_roller_signal+0x80>
        res = ancestor_signal(roller, sign, param);
 80193f0:	4b39      	ldr	r3, [pc, #228]	; (80194d8 <lv_roller_signal+0x114>)
 80193f2:	681b      	ldr	r3, [r3, #0]
 80193f4:	4798      	blx	r3
        if(res != LV_RES_OK) return res;
 80193f6:	2801      	cmp	r0, #1
 80193f8:	d0ec      	beq.n	80193d4 <lv_roller_signal+0x10>
}
 80193fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if(sign == LV_SIGNAL_CORD_CHG) {
 80193fc:	2f02      	cmp	r7, #2
 80193fe:	d123      	bne.n	8019448 <lv_roller_signal+0x84>
        if(lv_obj_get_width(roller) != lv_area_get_width(param) ||
 8019400:	4628      	mov	r0, r5
 8019402:	f7f5 fffb 	bl	800f3fc <lv_obj_get_width>
    return area_p->x2 - area_p->x1 + 1;
 8019406:	88b3      	ldrh	r3, [r6, #4]
 8019408:	8832      	ldrh	r2, [r6, #0]
 801940a:	3301      	adds	r3, #1
 801940c:	1a9b      	subs	r3, r3, r2
 801940e:	b21b      	sxth	r3, r3
 8019410:	4298      	cmp	r0, r3
 8019412:	d00d      	beq.n	8019430 <lv_roller_signal+0x6c>
            refr_height(roller);
 8019414:	4628      	mov	r0, r5
 8019416:	f7ff fd4b 	bl	8018eb0 <refr_height>
            lv_anim_del(lv_page_get_scrl(roller), (lv_anim_exec_xcb_t)lv_obj_set_y);
 801941a:	4628      	mov	r0, r5
 801941c:	f7fe fe6f 	bl	80180fe <lv_page_get_scrl>
 8019420:	492e      	ldr	r1, [pc, #184]	; (80194dc <lv_roller_signal+0x118>)
 8019422:	f7fa fd4b 	bl	8013ebc <lv_anim_del>
            lv_ddlist_set_selected(roller, ext->ddlist.sel_opt_id);
 8019426:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
 8019428:	4628      	mov	r0, r5
 801942a:	f7fc fffe 	bl	801642a <lv_ddlist_set_selected>
 801942e:	e7da      	b.n	80193e6 <lv_roller_signal+0x22>
           lv_obj_get_height(roller) != lv_area_get_height(param)) {
 8019430:	4628      	mov	r0, r5
 8019432:	f7f5 ffe9 	bl	800f408 <lv_obj_get_height>
    return area_p->y2 - area_p->y1 + 1;
 8019436:	88f3      	ldrh	r3, [r6, #6]
 8019438:	8872      	ldrh	r2, [r6, #2]
 801943a:	3301      	adds	r3, #1
 801943c:	1a9b      	subs	r3, r3, r2
        if(lv_obj_get_width(roller) != lv_area_get_width(param) ||
 801943e:	b21b      	sxth	r3, r3
 8019440:	4298      	cmp	r0, r3
 8019442:	d1e7      	bne.n	8019414 <lv_roller_signal+0x50>
    return res;
 8019444:	2001      	movs	r0, #1
 8019446:	e7d8      	b.n	80193fa <lv_roller_signal+0x36>
    } else if(sign == LV_SIGNAL_FOCUS) {
 8019448:	2f0f      	cmp	r7, #15
 801944a:	d116      	bne.n	801947a <lv_roller_signal+0xb6>
        lv_group_t * g             = lv_obj_get_group(roller);
 801944c:	4628      	mov	r0, r5
 801944e:	f7f6 f8d8 	bl	800f602 <lv_obj_get_group>
        bool editing               = lv_group_get_editing(g);
 8019452:	f7f5 f892 	bl	800e57a <lv_group_get_editing>
 8019456:	4606      	mov	r6, r0
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 8019458:	f7f5 f8a4 	bl	800e5a4 <lv_indev_get_act>
 801945c:	f7f5 f8a8 	bl	800e5b0 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 8019460:	2804      	cmp	r0, #4
 8019462:	d107      	bne.n	8019474 <lv_roller_signal+0xb0>
            if(!editing) {
 8019464:	b936      	cbnz	r6, 8019474 <lv_roller_signal+0xb0>
        if(ext->ddlist.sel_opt_id != ext->ddlist.sel_opt_id_ori) {
 8019466:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8019468:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 801946a:	429a      	cmp	r2, r3
 801946c:	d0ea      	beq.n	8019444 <lv_roller_signal+0x80>
            ext->ddlist.sel_opt_id = ext->ddlist.sel_opt_id_ori;
 801946e:	8763      	strh	r3, [r4, #58]	; 0x3a
            refr_position(roller, true);
 8019470:	2101      	movs	r1, #1
 8019472:	e7b9      	b.n	80193e8 <lv_roller_signal+0x24>
            ext->ddlist.sel_opt_id_ori = ext->ddlist.sel_opt_id; /*Save the current value. Used to revert this state if
 8019474:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8019476:	87a3      	strh	r3, [r4, #60]	; 0x3c
 8019478:	e7e4      	b.n	8019444 <lv_roller_signal+0x80>
    } else if(sign == LV_SIGNAL_DEFOCUS) {
 801947a:	2f10      	cmp	r7, #16
 801947c:	d0f3      	beq.n	8019466 <lv_roller_signal+0xa2>
    } else if(sign == LV_SIGNAL_CONTROL) {
 801947e:	2f11      	cmp	r7, #17
 8019480:	d11b      	bne.n	80194ba <lv_roller_signal+0xf6>
        char c = *((char *)param);
 8019482:	7833      	ldrb	r3, [r6, #0]
        if(c == LV_KEY_RIGHT || c == LV_KEY_DOWN) {
 8019484:	f1a3 0212 	sub.w	r2, r3, #18
 8019488:	2a01      	cmp	r2, #1
 801948a:	d80c      	bhi.n	80194a6 <lv_roller_signal+0xe2>
            if(ext->ddlist.sel_opt_id + 1 < ext->ddlist.option_cnt) {
 801948c:	8f41      	ldrh	r1, [r0, #58]	; 0x3a
 801948e:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8019490:	3101      	adds	r1, #1
 8019492:	4299      	cmp	r1, r3
 8019494:	dad6      	bge.n	8019444 <lv_roller_signal+0x80>
                uint16_t ori_id = ext->ddlist.sel_opt_id_ori; /*lv_roller_set_selceted will overwrite this*/
 8019496:	8f86      	ldrh	r6, [r0, #60]	; 0x3c
                lv_roller_set_selected(roller, ext->ddlist.sel_opt_id - 1, true);
 8019498:	2201      	movs	r2, #1
 801949a:	b289      	uxth	r1, r1
 801949c:	4628      	mov	r0, r5
 801949e:	f7ff ff7d 	bl	801939c <lv_roller_set_selected>
                ext->ddlist.sel_opt_id_ori = ori_id;
 80194a2:	87a6      	strh	r6, [r4, #60]	; 0x3c
 80194a4:	e7ce      	b.n	8019444 <lv_roller_signal+0x80>
        } else if(c == LV_KEY_LEFT || c == LV_KEY_UP) {
 80194a6:	2b14      	cmp	r3, #20
 80194a8:	d001      	beq.n	80194ae <lv_roller_signal+0xea>
 80194aa:	2b11      	cmp	r3, #17
 80194ac:	d1ca      	bne.n	8019444 <lv_roller_signal+0x80>
            if(ext->ddlist.sel_opt_id > 0) {
 80194ae:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
 80194b0:	2900      	cmp	r1, #0
 80194b2:	d0c7      	beq.n	8019444 <lv_roller_signal+0x80>
                uint16_t ori_id = ext->ddlist.sel_opt_id_ori; /*lv_roller_set_selceted will overwrite this*/
 80194b4:	8fa6      	ldrh	r6, [r4, #60]	; 0x3c
                lv_roller_set_selected(roller, ext->ddlist.sel_opt_id - 1, true);
 80194b6:	3901      	subs	r1, #1
 80194b8:	e7ee      	b.n	8019498 <lv_roller_signal+0xd4>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 80194ba:	2f06      	cmp	r7, #6
 80194bc:	d1c2      	bne.n	8019444 <lv_roller_signal+0x80>
 80194be:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 80194c0:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80194c4:	b2da      	uxtb	r2, r3
 80194c6:	b119      	cbz	r1, 80194d0 <lv_roller_signal+0x10c>
 80194c8:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 80194ca:	2b07      	cmp	r3, #7
 80194cc:	d1f8      	bne.n	80194c0 <lv_roller_signal+0xfc>
 80194ce:	461a      	mov	r2, r3
        buf->type[i] = "lv_roller";
 80194d0:	4b03      	ldr	r3, [pc, #12]	; (80194e0 <lv_roller_signal+0x11c>)
 80194d2:	f846 3022 	str.w	r3, [r6, r2, lsl #2]
 80194d6:	e7b5      	b.n	8019444 <lv_roller_signal+0x80>
 80194d8:	2000b064 	.word	0x2000b064
 80194dc:	0800ea71 	.word	0x0800ea71
 80194e0:	080ec424 	.word	0x080ec424

080194e4 <lv_roller_set_options>:
{
 80194e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194e8:	4605      	mov	r5, r0
 80194ea:	4688      	mov	r8, r1
 80194ec:	4614      	mov	r4, r2
    lv_roller_ext_t * ext = lv_obj_get_ext_attr(roller);
 80194ee:	f7f6 f882 	bl	800f5f6 <lv_obj_get_ext_attr>
 80194f2:	4607      	mov	r7, r0
 80194f4:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
    if(mode == LV_ROLLER_MODE_NORMAL) {
 80194f8:	b96c      	cbnz	r4, 8019516 <lv_roller_set_options+0x32>
        ext->mode = LV_ROLLER_MODE_NORMAL;
 80194fa:	f364 0300 	bfi	r3, r4, #0, #1
 80194fe:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
        lv_ddlist_set_options(roller, options);
 8019502:	4641      	mov	r1, r8
 8019504:	4628      	mov	r0, r5
 8019506:	f7fc ff53 	bl	80163b0 <lv_ddlist_set_options>
        refr_height(roller);
 801950a:	4628      	mov	r0, r5
}
 801950c:	b003      	add	sp, #12
 801950e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        refr_height(roller);
 8019512:	f7ff bccd 	b.w	8018eb0 <refr_height>
        ext->mode = LV_ROLLER_MODE_INIFINITE;
 8019516:	f043 0301 	orr.w	r3, r3, #1
 801951a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
        uint32_t opt_len = strlen(options) + 1; /*+1 to add '\n' after option lists*/
 801951e:	4640      	mov	r0, r8
 8019520:	f7e6 fe56 	bl	80001d0 <strlen>
 8019524:	1c46      	adds	r6, r0, #1
        char * opt_extra = lv_mem_alloc(opt_len * LV_ROLLER_INF_PAGES);
 8019526:	ebc6 0ac6 	rsb	sl, r6, r6, lsl #3
 801952a:	4650      	mov	r0, sl
 801952c:	f7fa ffac 	bl	8014488 <lv_mem_alloc>
 8019530:	2407      	movs	r4, #7
 8019532:	4681      	mov	r9, r0
 8019534:	eb00 0b06 	add.w	fp, r0, r6
            opt_extra[opt_len * (i + 1) - 1] = '\n';
 8019538:	230a      	movs	r3, #10
            strcpy(&opt_extra[opt_len * i], options);
 801953a:	ebab 0006 	sub.w	r0, fp, r6
 801953e:	4641      	mov	r1, r8
 8019540:	3c01      	subs	r4, #1
 8019542:	9301      	str	r3, [sp, #4]
 8019544:	f000 fb0e 	bl	8019b64 <strcpy>
            opt_extra[opt_len * (i + 1) - 1] = '\n';
 8019548:	9b01      	ldr	r3, [sp, #4]
 801954a:	f80b 3c01 	strb.w	r3, [fp, #-1]
        for(i = 0; i < LV_ROLLER_INF_PAGES; i++) {
 801954e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8019552:	44b3      	add	fp, r6
 8019554:	d1f1      	bne.n	801953a <lv_roller_set_options+0x56>
        opt_extra[opt_len * LV_ROLLER_INF_PAGES - 1] = '\0';
 8019556:	44ca      	add	sl, r9
        lv_ddlist_set_options(roller, opt_extra);
 8019558:	4649      	mov	r1, r9
 801955a:	4628      	mov	r0, r5
        opt_extra[opt_len * LV_ROLLER_INF_PAGES - 1] = '\0';
 801955c:	f80a 4c01 	strb.w	r4, [sl, #-1]
        lv_ddlist_set_options(roller, opt_extra);
 8019560:	f7fc ff26 	bl	80163b0 <lv_ddlist_set_options>
        lv_mem_free(opt_extra);
 8019564:	4648      	mov	r0, r9
 8019566:	f7fa ffc5 	bl	80144f4 <lv_mem_free>
        refr_height(roller);
 801956a:	4628      	mov	r0, r5
 801956c:	f7ff fca0 	bl	8018eb0 <refr_height>
        uint16_t real_id_cnt = ext->ddlist.option_cnt / LV_ROLLER_INF_PAGES;
 8019570:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8019572:	2307      	movs	r3, #7
 8019574:	fbb1 f1f3 	udiv	r1, r1, r3
        lv_roller_set_selected(roller, ((LV_ROLLER_INF_PAGES / 2) + 1) * real_id_cnt, false); /*Select the middle page*/
 8019578:	0089      	lsls	r1, r1, #2
 801957a:	b289      	uxth	r1, r1
 801957c:	4622      	mov	r2, r4
 801957e:	4628      	mov	r0, r5
}
 8019580:	b003      	add	sp, #12
 8019582:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        lv_roller_set_selected(roller, ((LV_ROLLER_INF_PAGES / 2) + 1) * real_id_cnt, false); /*Select the middle page*/
 8019586:	f7ff bf09 	b.w	801939c <lv_roller_set_selected>
	...

0801958c <lv_theme_get_current>:
    if(!inited)
        return NULL;
    else
        return &current_theme;
#endif
}
 801958c:	4b01      	ldr	r3, [pc, #4]	; (8019594 <lv_theme_get_current+0x8>)
 801958e:	6818      	ldr	r0, [r3, #0]
 8019590:	4770      	bx	lr
 8019592:	bf00      	nop
 8019594:	2000b068 	.word	0x2000b068

08019598 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8019598:	f8df d034 	ldr.w	sp, [pc, #52]	; 80195d0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 801959c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 801959e:	e003      	b.n	80195a8 <LoopCopyDataInit>

080195a0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80195a0:	4b0c      	ldr	r3, [pc, #48]	; (80195d4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80195a2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80195a4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80195a6:	3104      	adds	r1, #4

080195a8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80195a8:	480b      	ldr	r0, [pc, #44]	; (80195d8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80195aa:	4b0c      	ldr	r3, [pc, #48]	; (80195dc <LoopForever+0xe>)
	adds	r2, r0, r1
 80195ac:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80195ae:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80195b0:	d3f6      	bcc.n	80195a0 <CopyDataInit>
	ldr	r2, =_sbss
 80195b2:	4a0b      	ldr	r2, [pc, #44]	; (80195e0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80195b4:	e002      	b.n	80195bc <LoopFillZerobss>

080195b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80195b6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80195b8:	f842 3b04 	str.w	r3, [r2], #4

080195bc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80195bc:	4b09      	ldr	r3, [pc, #36]	; (80195e4 <LoopForever+0x16>)
	cmp	r2, r3
 80195be:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80195c0:	d3f9      	bcc.n	80195b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80195c2:	f7e8 fde9 	bl	8002198 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80195c6:	f000 f847 	bl	8019658 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80195ca:	f7e8 f8c1 	bl	8001750 <main>

080195ce <LoopForever>:

LoopForever:
    b LoopForever
 80195ce:	e7fe      	b.n	80195ce <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80195d0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80195d4:	080ec6a8 	.word	0x080ec6a8
	ldr	r0, =_sdata
 80195d8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80195dc:	2000233c 	.word	0x2000233c
	ldr	r2, =_sbss
 80195e0:	2000233c 	.word	0x2000233c
	ldr	r3, = _ebss
 80195e4:	2000c64c 	.word	0x2000c64c

080195e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80195e8:	e7fe      	b.n	80195e8 <ADC1_2_IRQHandler>

080195ea <atoi>:
 80195ea:	220a      	movs	r2, #10
 80195ec:	2100      	movs	r1, #0
 80195ee:	f000 bb41 	b.w	8019c74 <strtol>

080195f2 <_calloc_r>:
 80195f2:	b510      	push	{r4, lr}
 80195f4:	4351      	muls	r1, r2
 80195f6:	f000 f853 	bl	80196a0 <_malloc_r>
 80195fa:	4604      	mov	r4, r0
 80195fc:	b198      	cbz	r0, 8019626 <_calloc_r+0x34>
 80195fe:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8019602:	f022 0203 	bic.w	r2, r2, #3
 8019606:	3a04      	subs	r2, #4
 8019608:	2a24      	cmp	r2, #36	; 0x24
 801960a:	d81b      	bhi.n	8019644 <_calloc_r+0x52>
 801960c:	2a13      	cmp	r2, #19
 801960e:	d917      	bls.n	8019640 <_calloc_r+0x4e>
 8019610:	2100      	movs	r1, #0
 8019612:	2a1b      	cmp	r2, #27
 8019614:	6001      	str	r1, [r0, #0]
 8019616:	6041      	str	r1, [r0, #4]
 8019618:	d807      	bhi.n	801962a <_calloc_r+0x38>
 801961a:	f100 0308 	add.w	r3, r0, #8
 801961e:	2200      	movs	r2, #0
 8019620:	601a      	str	r2, [r3, #0]
 8019622:	605a      	str	r2, [r3, #4]
 8019624:	609a      	str	r2, [r3, #8]
 8019626:	4620      	mov	r0, r4
 8019628:	bd10      	pop	{r4, pc}
 801962a:	2a24      	cmp	r2, #36	; 0x24
 801962c:	6081      	str	r1, [r0, #8]
 801962e:	60c1      	str	r1, [r0, #12]
 8019630:	bf11      	iteee	ne
 8019632:	f100 0310 	addne.w	r3, r0, #16
 8019636:	6101      	streq	r1, [r0, #16]
 8019638:	f100 0318 	addeq.w	r3, r0, #24
 801963c:	6141      	streq	r1, [r0, #20]
 801963e:	e7ee      	b.n	801961e <_calloc_r+0x2c>
 8019640:	4603      	mov	r3, r0
 8019642:	e7ec      	b.n	801961e <_calloc_r+0x2c>
 8019644:	2100      	movs	r1, #0
 8019646:	f000 fa44 	bl	8019ad2 <memset>
 801964a:	e7ec      	b.n	8019626 <_calloc_r+0x34>

0801964c <__errno>:
 801964c:	4b01      	ldr	r3, [pc, #4]	; (8019654 <__errno+0x8>)
 801964e:	6818      	ldr	r0, [r3, #0]
 8019650:	4770      	bx	lr
 8019652:	bf00      	nop
 8019654:	20001ccc 	.word	0x20001ccc

08019658 <__libc_init_array>:
 8019658:	b570      	push	{r4, r5, r6, lr}
 801965a:	4e0d      	ldr	r6, [pc, #52]	; (8019690 <__libc_init_array+0x38>)
 801965c:	4c0d      	ldr	r4, [pc, #52]	; (8019694 <__libc_init_array+0x3c>)
 801965e:	1ba4      	subs	r4, r4, r6
 8019660:	10a4      	asrs	r4, r4, #2
 8019662:	2500      	movs	r5, #0
 8019664:	42a5      	cmp	r5, r4
 8019666:	d109      	bne.n	801967c <__libc_init_array+0x24>
 8019668:	4e0b      	ldr	r6, [pc, #44]	; (8019698 <__libc_init_array+0x40>)
 801966a:	4c0c      	ldr	r4, [pc, #48]	; (801969c <__libc_init_array+0x44>)
 801966c:	f002 ff9c 	bl	801c5a8 <_init>
 8019670:	1ba4      	subs	r4, r4, r6
 8019672:	10a4      	asrs	r4, r4, #2
 8019674:	2500      	movs	r5, #0
 8019676:	42a5      	cmp	r5, r4
 8019678:	d105      	bne.n	8019686 <__libc_init_array+0x2e>
 801967a:	bd70      	pop	{r4, r5, r6, pc}
 801967c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8019680:	4798      	blx	r3
 8019682:	3501      	adds	r5, #1
 8019684:	e7ee      	b.n	8019664 <__libc_init_array+0xc>
 8019686:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801968a:	4798      	blx	r3
 801968c:	3501      	adds	r5, #1
 801968e:	e7f2      	b.n	8019676 <__libc_init_array+0x1e>
 8019690:	080ec6a0 	.word	0x080ec6a0
 8019694:	080ec6a0 	.word	0x080ec6a0
 8019698:	080ec6a0 	.word	0x080ec6a0
 801969c:	080ec6a4 	.word	0x080ec6a4

080196a0 <_malloc_r>:
 80196a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196a4:	f101 040b 	add.w	r4, r1, #11
 80196a8:	2c16      	cmp	r4, #22
 80196aa:	4681      	mov	r9, r0
 80196ac:	d907      	bls.n	80196be <_malloc_r+0x1e>
 80196ae:	f034 0407 	bics.w	r4, r4, #7
 80196b2:	d505      	bpl.n	80196c0 <_malloc_r+0x20>
 80196b4:	230c      	movs	r3, #12
 80196b6:	f8c9 3000 	str.w	r3, [r9]
 80196ba:	2600      	movs	r6, #0
 80196bc:	e131      	b.n	8019922 <_malloc_r+0x282>
 80196be:	2410      	movs	r4, #16
 80196c0:	428c      	cmp	r4, r1
 80196c2:	d3f7      	bcc.n	80196b4 <_malloc_r+0x14>
 80196c4:	4648      	mov	r0, r9
 80196c6:	f000 fa0d 	bl	8019ae4 <__malloc_lock>
 80196ca:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 80196ce:	4d9c      	ldr	r5, [pc, #624]	; (8019940 <_malloc_r+0x2a0>)
 80196d0:	d236      	bcs.n	8019740 <_malloc_r+0xa0>
 80196d2:	f104 0208 	add.w	r2, r4, #8
 80196d6:	442a      	add	r2, r5
 80196d8:	f1a2 0108 	sub.w	r1, r2, #8
 80196dc:	6856      	ldr	r6, [r2, #4]
 80196de:	428e      	cmp	r6, r1
 80196e0:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 80196e4:	d102      	bne.n	80196ec <_malloc_r+0x4c>
 80196e6:	68d6      	ldr	r6, [r2, #12]
 80196e8:	42b2      	cmp	r2, r6
 80196ea:	d010      	beq.n	801970e <_malloc_r+0x6e>
 80196ec:	6873      	ldr	r3, [r6, #4]
 80196ee:	68f2      	ldr	r2, [r6, #12]
 80196f0:	68b1      	ldr	r1, [r6, #8]
 80196f2:	f023 0303 	bic.w	r3, r3, #3
 80196f6:	60ca      	str	r2, [r1, #12]
 80196f8:	4433      	add	r3, r6
 80196fa:	6091      	str	r1, [r2, #8]
 80196fc:	685a      	ldr	r2, [r3, #4]
 80196fe:	f042 0201 	orr.w	r2, r2, #1
 8019702:	605a      	str	r2, [r3, #4]
 8019704:	4648      	mov	r0, r9
 8019706:	f000 f9f3 	bl	8019af0 <__malloc_unlock>
 801970a:	3608      	adds	r6, #8
 801970c:	e109      	b.n	8019922 <_malloc_r+0x282>
 801970e:	3302      	adds	r3, #2
 8019710:	4a8c      	ldr	r2, [pc, #560]	; (8019944 <_malloc_r+0x2a4>)
 8019712:	692e      	ldr	r6, [r5, #16]
 8019714:	4296      	cmp	r6, r2
 8019716:	4611      	mov	r1, r2
 8019718:	d06d      	beq.n	80197f6 <_malloc_r+0x156>
 801971a:	6870      	ldr	r0, [r6, #4]
 801971c:	f020 0003 	bic.w	r0, r0, #3
 8019720:	1b07      	subs	r7, r0, r4
 8019722:	2f0f      	cmp	r7, #15
 8019724:	dd47      	ble.n	80197b6 <_malloc_r+0x116>
 8019726:	1933      	adds	r3, r6, r4
 8019728:	f044 0401 	orr.w	r4, r4, #1
 801972c:	6074      	str	r4, [r6, #4]
 801972e:	616b      	str	r3, [r5, #20]
 8019730:	612b      	str	r3, [r5, #16]
 8019732:	60da      	str	r2, [r3, #12]
 8019734:	609a      	str	r2, [r3, #8]
 8019736:	f047 0201 	orr.w	r2, r7, #1
 801973a:	605a      	str	r2, [r3, #4]
 801973c:	5037      	str	r7, [r6, r0]
 801973e:	e7e1      	b.n	8019704 <_malloc_r+0x64>
 8019740:	0a63      	lsrs	r3, r4, #9
 8019742:	d02a      	beq.n	801979a <_malloc_r+0xfa>
 8019744:	2b04      	cmp	r3, #4
 8019746:	d812      	bhi.n	801976e <_malloc_r+0xce>
 8019748:	09a3      	lsrs	r3, r4, #6
 801974a:	3338      	adds	r3, #56	; 0x38
 801974c:	1c5a      	adds	r2, r3, #1
 801974e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8019752:	f1a2 0008 	sub.w	r0, r2, #8
 8019756:	6856      	ldr	r6, [r2, #4]
 8019758:	4286      	cmp	r6, r0
 801975a:	d006      	beq.n	801976a <_malloc_r+0xca>
 801975c:	6872      	ldr	r2, [r6, #4]
 801975e:	f022 0203 	bic.w	r2, r2, #3
 8019762:	1b11      	subs	r1, r2, r4
 8019764:	290f      	cmp	r1, #15
 8019766:	dd1c      	ble.n	80197a2 <_malloc_r+0x102>
 8019768:	3b01      	subs	r3, #1
 801976a:	3301      	adds	r3, #1
 801976c:	e7d0      	b.n	8019710 <_malloc_r+0x70>
 801976e:	2b14      	cmp	r3, #20
 8019770:	d801      	bhi.n	8019776 <_malloc_r+0xd6>
 8019772:	335b      	adds	r3, #91	; 0x5b
 8019774:	e7ea      	b.n	801974c <_malloc_r+0xac>
 8019776:	2b54      	cmp	r3, #84	; 0x54
 8019778:	d802      	bhi.n	8019780 <_malloc_r+0xe0>
 801977a:	0b23      	lsrs	r3, r4, #12
 801977c:	336e      	adds	r3, #110	; 0x6e
 801977e:	e7e5      	b.n	801974c <_malloc_r+0xac>
 8019780:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8019784:	d802      	bhi.n	801978c <_malloc_r+0xec>
 8019786:	0be3      	lsrs	r3, r4, #15
 8019788:	3377      	adds	r3, #119	; 0x77
 801978a:	e7df      	b.n	801974c <_malloc_r+0xac>
 801978c:	f240 5254 	movw	r2, #1364	; 0x554
 8019790:	4293      	cmp	r3, r2
 8019792:	d804      	bhi.n	801979e <_malloc_r+0xfe>
 8019794:	0ca3      	lsrs	r3, r4, #18
 8019796:	337c      	adds	r3, #124	; 0x7c
 8019798:	e7d8      	b.n	801974c <_malloc_r+0xac>
 801979a:	233f      	movs	r3, #63	; 0x3f
 801979c:	e7d6      	b.n	801974c <_malloc_r+0xac>
 801979e:	237e      	movs	r3, #126	; 0x7e
 80197a0:	e7d4      	b.n	801974c <_malloc_r+0xac>
 80197a2:	2900      	cmp	r1, #0
 80197a4:	68f1      	ldr	r1, [r6, #12]
 80197a6:	db04      	blt.n	80197b2 <_malloc_r+0x112>
 80197a8:	68b3      	ldr	r3, [r6, #8]
 80197aa:	60d9      	str	r1, [r3, #12]
 80197ac:	608b      	str	r3, [r1, #8]
 80197ae:	18b3      	adds	r3, r6, r2
 80197b0:	e7a4      	b.n	80196fc <_malloc_r+0x5c>
 80197b2:	460e      	mov	r6, r1
 80197b4:	e7d0      	b.n	8019758 <_malloc_r+0xb8>
 80197b6:	2f00      	cmp	r7, #0
 80197b8:	616a      	str	r2, [r5, #20]
 80197ba:	612a      	str	r2, [r5, #16]
 80197bc:	db05      	blt.n	80197ca <_malloc_r+0x12a>
 80197be:	4430      	add	r0, r6
 80197c0:	6843      	ldr	r3, [r0, #4]
 80197c2:	f043 0301 	orr.w	r3, r3, #1
 80197c6:	6043      	str	r3, [r0, #4]
 80197c8:	e79c      	b.n	8019704 <_malloc_r+0x64>
 80197ca:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80197ce:	d244      	bcs.n	801985a <_malloc_r+0x1ba>
 80197d0:	08c0      	lsrs	r0, r0, #3
 80197d2:	1087      	asrs	r7, r0, #2
 80197d4:	2201      	movs	r2, #1
 80197d6:	fa02 f707 	lsl.w	r7, r2, r7
 80197da:	686a      	ldr	r2, [r5, #4]
 80197dc:	3001      	adds	r0, #1
 80197de:	433a      	orrs	r2, r7
 80197e0:	606a      	str	r2, [r5, #4]
 80197e2:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 80197e6:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 80197ea:	60b7      	str	r7, [r6, #8]
 80197ec:	3a08      	subs	r2, #8
 80197ee:	60f2      	str	r2, [r6, #12]
 80197f0:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 80197f4:	60fe      	str	r6, [r7, #12]
 80197f6:	2001      	movs	r0, #1
 80197f8:	109a      	asrs	r2, r3, #2
 80197fa:	fa00 f202 	lsl.w	r2, r0, r2
 80197fe:	6868      	ldr	r0, [r5, #4]
 8019800:	4282      	cmp	r2, r0
 8019802:	f200 80a1 	bhi.w	8019948 <_malloc_r+0x2a8>
 8019806:	4202      	tst	r2, r0
 8019808:	d106      	bne.n	8019818 <_malloc_r+0x178>
 801980a:	f023 0303 	bic.w	r3, r3, #3
 801980e:	0052      	lsls	r2, r2, #1
 8019810:	4202      	tst	r2, r0
 8019812:	f103 0304 	add.w	r3, r3, #4
 8019816:	d0fa      	beq.n	801980e <_malloc_r+0x16e>
 8019818:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 801981c:	46e0      	mov	r8, ip
 801981e:	469e      	mov	lr, r3
 8019820:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8019824:	4546      	cmp	r6, r8
 8019826:	d153      	bne.n	80198d0 <_malloc_r+0x230>
 8019828:	f10e 0e01 	add.w	lr, lr, #1
 801982c:	f01e 0f03 	tst.w	lr, #3
 8019830:	f108 0808 	add.w	r8, r8, #8
 8019834:	d1f4      	bne.n	8019820 <_malloc_r+0x180>
 8019836:	0798      	lsls	r0, r3, #30
 8019838:	d179      	bne.n	801992e <_malloc_r+0x28e>
 801983a:	686b      	ldr	r3, [r5, #4]
 801983c:	ea23 0302 	bic.w	r3, r3, r2
 8019840:	606b      	str	r3, [r5, #4]
 8019842:	6868      	ldr	r0, [r5, #4]
 8019844:	0052      	lsls	r2, r2, #1
 8019846:	4282      	cmp	r2, r0
 8019848:	d87e      	bhi.n	8019948 <_malloc_r+0x2a8>
 801984a:	2a00      	cmp	r2, #0
 801984c:	d07c      	beq.n	8019948 <_malloc_r+0x2a8>
 801984e:	4673      	mov	r3, lr
 8019850:	4202      	tst	r2, r0
 8019852:	d1e1      	bne.n	8019818 <_malloc_r+0x178>
 8019854:	3304      	adds	r3, #4
 8019856:	0052      	lsls	r2, r2, #1
 8019858:	e7fa      	b.n	8019850 <_malloc_r+0x1b0>
 801985a:	0a42      	lsrs	r2, r0, #9
 801985c:	2a04      	cmp	r2, #4
 801985e:	d815      	bhi.n	801988c <_malloc_r+0x1ec>
 8019860:	0982      	lsrs	r2, r0, #6
 8019862:	3238      	adds	r2, #56	; 0x38
 8019864:	1c57      	adds	r7, r2, #1
 8019866:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 801986a:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 801986e:	45be      	cmp	lr, r7
 8019870:	d126      	bne.n	80198c0 <_malloc_r+0x220>
 8019872:	2001      	movs	r0, #1
 8019874:	1092      	asrs	r2, r2, #2
 8019876:	fa00 f202 	lsl.w	r2, r0, r2
 801987a:	6868      	ldr	r0, [r5, #4]
 801987c:	4310      	orrs	r0, r2
 801987e:	6068      	str	r0, [r5, #4]
 8019880:	f8c6 e00c 	str.w	lr, [r6, #12]
 8019884:	60b7      	str	r7, [r6, #8]
 8019886:	f8ce 6008 	str.w	r6, [lr, #8]
 801988a:	e7b3      	b.n	80197f4 <_malloc_r+0x154>
 801988c:	2a14      	cmp	r2, #20
 801988e:	d801      	bhi.n	8019894 <_malloc_r+0x1f4>
 8019890:	325b      	adds	r2, #91	; 0x5b
 8019892:	e7e7      	b.n	8019864 <_malloc_r+0x1c4>
 8019894:	2a54      	cmp	r2, #84	; 0x54
 8019896:	d802      	bhi.n	801989e <_malloc_r+0x1fe>
 8019898:	0b02      	lsrs	r2, r0, #12
 801989a:	326e      	adds	r2, #110	; 0x6e
 801989c:	e7e2      	b.n	8019864 <_malloc_r+0x1c4>
 801989e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80198a2:	d802      	bhi.n	80198aa <_malloc_r+0x20a>
 80198a4:	0bc2      	lsrs	r2, r0, #15
 80198a6:	3277      	adds	r2, #119	; 0x77
 80198a8:	e7dc      	b.n	8019864 <_malloc_r+0x1c4>
 80198aa:	f240 5754 	movw	r7, #1364	; 0x554
 80198ae:	42ba      	cmp	r2, r7
 80198b0:	bf9a      	itte	ls
 80198b2:	0c82      	lsrls	r2, r0, #18
 80198b4:	327c      	addls	r2, #124	; 0x7c
 80198b6:	227e      	movhi	r2, #126	; 0x7e
 80198b8:	e7d4      	b.n	8019864 <_malloc_r+0x1c4>
 80198ba:	68bf      	ldr	r7, [r7, #8]
 80198bc:	45be      	cmp	lr, r7
 80198be:	d004      	beq.n	80198ca <_malloc_r+0x22a>
 80198c0:	687a      	ldr	r2, [r7, #4]
 80198c2:	f022 0203 	bic.w	r2, r2, #3
 80198c6:	4290      	cmp	r0, r2
 80198c8:	d3f7      	bcc.n	80198ba <_malloc_r+0x21a>
 80198ca:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 80198ce:	e7d7      	b.n	8019880 <_malloc_r+0x1e0>
 80198d0:	6870      	ldr	r0, [r6, #4]
 80198d2:	68f7      	ldr	r7, [r6, #12]
 80198d4:	f020 0003 	bic.w	r0, r0, #3
 80198d8:	eba0 0a04 	sub.w	sl, r0, r4
 80198dc:	f1ba 0f0f 	cmp.w	sl, #15
 80198e0:	dd10      	ble.n	8019904 <_malloc_r+0x264>
 80198e2:	68b2      	ldr	r2, [r6, #8]
 80198e4:	1933      	adds	r3, r6, r4
 80198e6:	f044 0401 	orr.w	r4, r4, #1
 80198ea:	6074      	str	r4, [r6, #4]
 80198ec:	60d7      	str	r7, [r2, #12]
 80198ee:	60ba      	str	r2, [r7, #8]
 80198f0:	f04a 0201 	orr.w	r2, sl, #1
 80198f4:	616b      	str	r3, [r5, #20]
 80198f6:	612b      	str	r3, [r5, #16]
 80198f8:	60d9      	str	r1, [r3, #12]
 80198fa:	6099      	str	r1, [r3, #8]
 80198fc:	605a      	str	r2, [r3, #4]
 80198fe:	f846 a000 	str.w	sl, [r6, r0]
 8019902:	e6ff      	b.n	8019704 <_malloc_r+0x64>
 8019904:	f1ba 0f00 	cmp.w	sl, #0
 8019908:	db0f      	blt.n	801992a <_malloc_r+0x28a>
 801990a:	4430      	add	r0, r6
 801990c:	6843      	ldr	r3, [r0, #4]
 801990e:	f043 0301 	orr.w	r3, r3, #1
 8019912:	6043      	str	r3, [r0, #4]
 8019914:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8019918:	4648      	mov	r0, r9
 801991a:	60df      	str	r7, [r3, #12]
 801991c:	60bb      	str	r3, [r7, #8]
 801991e:	f000 f8e7 	bl	8019af0 <__malloc_unlock>
 8019922:	4630      	mov	r0, r6
 8019924:	b003      	add	sp, #12
 8019926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801992a:	463e      	mov	r6, r7
 801992c:	e77a      	b.n	8019824 <_malloc_r+0x184>
 801992e:	f85c 0908 	ldr.w	r0, [ip], #-8
 8019932:	4584      	cmp	ip, r0
 8019934:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8019938:	f43f af7d 	beq.w	8019836 <_malloc_r+0x196>
 801993c:	e781      	b.n	8019842 <_malloc_r+0x1a2>
 801993e:	bf00      	nop
 8019940:	20001dc0 	.word	0x20001dc0
 8019944:	20001dc8 	.word	0x20001dc8
 8019948:	f8d5 b008 	ldr.w	fp, [r5, #8]
 801994c:	f8db 6004 	ldr.w	r6, [fp, #4]
 8019950:	f026 0603 	bic.w	r6, r6, #3
 8019954:	42b4      	cmp	r4, r6
 8019956:	d803      	bhi.n	8019960 <_malloc_r+0x2c0>
 8019958:	1b33      	subs	r3, r6, r4
 801995a:	2b0f      	cmp	r3, #15
 801995c:	f300 8096 	bgt.w	8019a8c <_malloc_r+0x3ec>
 8019960:	4a4f      	ldr	r2, [pc, #316]	; (8019aa0 <_malloc_r+0x400>)
 8019962:	6817      	ldr	r7, [r2, #0]
 8019964:	4a4f      	ldr	r2, [pc, #316]	; (8019aa4 <_malloc_r+0x404>)
 8019966:	6811      	ldr	r1, [r2, #0]
 8019968:	3710      	adds	r7, #16
 801996a:	3101      	adds	r1, #1
 801996c:	eb0b 0306 	add.w	r3, fp, r6
 8019970:	4427      	add	r7, r4
 8019972:	d005      	beq.n	8019980 <_malloc_r+0x2e0>
 8019974:	494c      	ldr	r1, [pc, #304]	; (8019aa8 <_malloc_r+0x408>)
 8019976:	3901      	subs	r1, #1
 8019978:	440f      	add	r7, r1
 801997a:	3101      	adds	r1, #1
 801997c:	4249      	negs	r1, r1
 801997e:	400f      	ands	r7, r1
 8019980:	4639      	mov	r1, r7
 8019982:	4648      	mov	r0, r9
 8019984:	9201      	str	r2, [sp, #4]
 8019986:	9300      	str	r3, [sp, #0]
 8019988:	f000 f8b8 	bl	8019afc <_sbrk_r>
 801998c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8019990:	4680      	mov	r8, r0
 8019992:	d056      	beq.n	8019a42 <_malloc_r+0x3a2>
 8019994:	9b00      	ldr	r3, [sp, #0]
 8019996:	9a01      	ldr	r2, [sp, #4]
 8019998:	4283      	cmp	r3, r0
 801999a:	d901      	bls.n	80199a0 <_malloc_r+0x300>
 801999c:	45ab      	cmp	fp, r5
 801999e:	d150      	bne.n	8019a42 <_malloc_r+0x3a2>
 80199a0:	4842      	ldr	r0, [pc, #264]	; (8019aac <_malloc_r+0x40c>)
 80199a2:	6801      	ldr	r1, [r0, #0]
 80199a4:	4543      	cmp	r3, r8
 80199a6:	eb07 0e01 	add.w	lr, r7, r1
 80199aa:	f8c0 e000 	str.w	lr, [r0]
 80199ae:	4940      	ldr	r1, [pc, #256]	; (8019ab0 <_malloc_r+0x410>)
 80199b0:	4682      	mov	sl, r0
 80199b2:	d113      	bne.n	80199dc <_malloc_r+0x33c>
 80199b4:	420b      	tst	r3, r1
 80199b6:	d111      	bne.n	80199dc <_malloc_r+0x33c>
 80199b8:	68ab      	ldr	r3, [r5, #8]
 80199ba:	443e      	add	r6, r7
 80199bc:	f046 0601 	orr.w	r6, r6, #1
 80199c0:	605e      	str	r6, [r3, #4]
 80199c2:	4a3c      	ldr	r2, [pc, #240]	; (8019ab4 <_malloc_r+0x414>)
 80199c4:	f8da 3000 	ldr.w	r3, [sl]
 80199c8:	6811      	ldr	r1, [r2, #0]
 80199ca:	428b      	cmp	r3, r1
 80199cc:	bf88      	it	hi
 80199ce:	6013      	strhi	r3, [r2, #0]
 80199d0:	4a39      	ldr	r2, [pc, #228]	; (8019ab8 <_malloc_r+0x418>)
 80199d2:	6811      	ldr	r1, [r2, #0]
 80199d4:	428b      	cmp	r3, r1
 80199d6:	bf88      	it	hi
 80199d8:	6013      	strhi	r3, [r2, #0]
 80199da:	e032      	b.n	8019a42 <_malloc_r+0x3a2>
 80199dc:	6810      	ldr	r0, [r2, #0]
 80199de:	3001      	adds	r0, #1
 80199e0:	bf1b      	ittet	ne
 80199e2:	eba8 0303 	subne.w	r3, r8, r3
 80199e6:	4473      	addne	r3, lr
 80199e8:	f8c2 8000 	streq.w	r8, [r2]
 80199ec:	f8ca 3000 	strne.w	r3, [sl]
 80199f0:	f018 0007 	ands.w	r0, r8, #7
 80199f4:	bf1c      	itt	ne
 80199f6:	f1c0 0008 	rsbne	r0, r0, #8
 80199fa:	4480      	addne	r8, r0
 80199fc:	4b2a      	ldr	r3, [pc, #168]	; (8019aa8 <_malloc_r+0x408>)
 80199fe:	4447      	add	r7, r8
 8019a00:	4418      	add	r0, r3
 8019a02:	400f      	ands	r7, r1
 8019a04:	1bc7      	subs	r7, r0, r7
 8019a06:	4639      	mov	r1, r7
 8019a08:	4648      	mov	r0, r9
 8019a0a:	f000 f877 	bl	8019afc <_sbrk_r>
 8019a0e:	1c43      	adds	r3, r0, #1
 8019a10:	bf08      	it	eq
 8019a12:	4640      	moveq	r0, r8
 8019a14:	f8da 3000 	ldr.w	r3, [sl]
 8019a18:	f8c5 8008 	str.w	r8, [r5, #8]
 8019a1c:	bf08      	it	eq
 8019a1e:	2700      	moveq	r7, #0
 8019a20:	eba0 0008 	sub.w	r0, r0, r8
 8019a24:	443b      	add	r3, r7
 8019a26:	4407      	add	r7, r0
 8019a28:	f047 0701 	orr.w	r7, r7, #1
 8019a2c:	45ab      	cmp	fp, r5
 8019a2e:	f8ca 3000 	str.w	r3, [sl]
 8019a32:	f8c8 7004 	str.w	r7, [r8, #4]
 8019a36:	d0c4      	beq.n	80199c2 <_malloc_r+0x322>
 8019a38:	2e0f      	cmp	r6, #15
 8019a3a:	d810      	bhi.n	8019a5e <_malloc_r+0x3be>
 8019a3c:	2301      	movs	r3, #1
 8019a3e:	f8c8 3004 	str.w	r3, [r8, #4]
 8019a42:	68ab      	ldr	r3, [r5, #8]
 8019a44:	685a      	ldr	r2, [r3, #4]
 8019a46:	f022 0203 	bic.w	r2, r2, #3
 8019a4a:	4294      	cmp	r4, r2
 8019a4c:	eba2 0304 	sub.w	r3, r2, r4
 8019a50:	d801      	bhi.n	8019a56 <_malloc_r+0x3b6>
 8019a52:	2b0f      	cmp	r3, #15
 8019a54:	dc1a      	bgt.n	8019a8c <_malloc_r+0x3ec>
 8019a56:	4648      	mov	r0, r9
 8019a58:	f000 f84a 	bl	8019af0 <__malloc_unlock>
 8019a5c:	e62d      	b.n	80196ba <_malloc_r+0x1a>
 8019a5e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8019a62:	3e0c      	subs	r6, #12
 8019a64:	f026 0607 	bic.w	r6, r6, #7
 8019a68:	f003 0301 	and.w	r3, r3, #1
 8019a6c:	4333      	orrs	r3, r6
 8019a6e:	f8cb 3004 	str.w	r3, [fp, #4]
 8019a72:	eb0b 0306 	add.w	r3, fp, r6
 8019a76:	2205      	movs	r2, #5
 8019a78:	2e0f      	cmp	r6, #15
 8019a7a:	605a      	str	r2, [r3, #4]
 8019a7c:	609a      	str	r2, [r3, #8]
 8019a7e:	d9a0      	bls.n	80199c2 <_malloc_r+0x322>
 8019a80:	f10b 0108 	add.w	r1, fp, #8
 8019a84:	4648      	mov	r0, r9
 8019a86:	f001 ffb3 	bl	801b9f0 <_free_r>
 8019a8a:	e79a      	b.n	80199c2 <_malloc_r+0x322>
 8019a8c:	68ae      	ldr	r6, [r5, #8]
 8019a8e:	f044 0201 	orr.w	r2, r4, #1
 8019a92:	4434      	add	r4, r6
 8019a94:	f043 0301 	orr.w	r3, r3, #1
 8019a98:	6072      	str	r2, [r6, #4]
 8019a9a:	60ac      	str	r4, [r5, #8]
 8019a9c:	6063      	str	r3, [r4, #4]
 8019a9e:	e631      	b.n	8019704 <_malloc_r+0x64>
 8019aa0:	2000b09c 	.word	0x2000b09c
 8019aa4:	200021c8 	.word	0x200021c8
 8019aa8:	00001000 	.word	0x00001000
 8019aac:	2000b06c 	.word	0x2000b06c
 8019ab0:	00000fff 	.word	0x00000fff
 8019ab4:	2000b094 	.word	0x2000b094
 8019ab8:	2000b098 	.word	0x2000b098

08019abc <memcpy>:
 8019abc:	b510      	push	{r4, lr}
 8019abe:	1e43      	subs	r3, r0, #1
 8019ac0:	440a      	add	r2, r1
 8019ac2:	4291      	cmp	r1, r2
 8019ac4:	d100      	bne.n	8019ac8 <memcpy+0xc>
 8019ac6:	bd10      	pop	{r4, pc}
 8019ac8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019acc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019ad0:	e7f7      	b.n	8019ac2 <memcpy+0x6>

08019ad2 <memset>:
 8019ad2:	4402      	add	r2, r0
 8019ad4:	4603      	mov	r3, r0
 8019ad6:	4293      	cmp	r3, r2
 8019ad8:	d100      	bne.n	8019adc <memset+0xa>
 8019ada:	4770      	bx	lr
 8019adc:	f803 1b01 	strb.w	r1, [r3], #1
 8019ae0:	e7f9      	b.n	8019ad6 <memset+0x4>
	...

08019ae4 <__malloc_lock>:
 8019ae4:	4801      	ldr	r0, [pc, #4]	; (8019aec <__malloc_lock+0x8>)
 8019ae6:	f002 b851 	b.w	801bb8c <__retarget_lock_acquire_recursive>
 8019aea:	bf00      	nop
 8019aec:	2000c640 	.word	0x2000c640

08019af0 <__malloc_unlock>:
 8019af0:	4801      	ldr	r0, [pc, #4]	; (8019af8 <__malloc_unlock+0x8>)
 8019af2:	f002 b84c 	b.w	801bb8e <__retarget_lock_release_recursive>
 8019af6:	bf00      	nop
 8019af8:	2000c640 	.word	0x2000c640

08019afc <_sbrk_r>:
 8019afc:	b538      	push	{r3, r4, r5, lr}
 8019afe:	4c06      	ldr	r4, [pc, #24]	; (8019b18 <_sbrk_r+0x1c>)
 8019b00:	2300      	movs	r3, #0
 8019b02:	4605      	mov	r5, r0
 8019b04:	4608      	mov	r0, r1
 8019b06:	6023      	str	r3, [r4, #0]
 8019b08:	f7e8 fb2c 	bl	8002164 <_sbrk>
 8019b0c:	1c43      	adds	r3, r0, #1
 8019b0e:	d102      	bne.n	8019b16 <_sbrk_r+0x1a>
 8019b10:	6823      	ldr	r3, [r4, #0]
 8019b12:	b103      	cbz	r3, 8019b16 <_sbrk_r+0x1a>
 8019b14:	602b      	str	r3, [r5, #0]
 8019b16:	bd38      	pop	{r3, r4, r5, pc}
 8019b18:	2000c648 	.word	0x2000c648

08019b1c <sprintf>:
 8019b1c:	b40e      	push	{r1, r2, r3}
 8019b1e:	b500      	push	{lr}
 8019b20:	b09c      	sub	sp, #112	; 0x70
 8019b22:	f44f 7102 	mov.w	r1, #520	; 0x208
 8019b26:	ab1d      	add	r3, sp, #116	; 0x74
 8019b28:	f8ad 1014 	strh.w	r1, [sp, #20]
 8019b2c:	9002      	str	r0, [sp, #8]
 8019b2e:	9006      	str	r0, [sp, #24]
 8019b30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8019b34:	480a      	ldr	r0, [pc, #40]	; (8019b60 <sprintf+0x44>)
 8019b36:	9104      	str	r1, [sp, #16]
 8019b38:	9107      	str	r1, [sp, #28]
 8019b3a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8019b3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019b42:	f8ad 1016 	strh.w	r1, [sp, #22]
 8019b46:	6800      	ldr	r0, [r0, #0]
 8019b48:	9301      	str	r3, [sp, #4]
 8019b4a:	a902      	add	r1, sp, #8
 8019b4c:	f000 f8a8 	bl	8019ca0 <_svfprintf_r>
 8019b50:	9b02      	ldr	r3, [sp, #8]
 8019b52:	2200      	movs	r2, #0
 8019b54:	701a      	strb	r2, [r3, #0]
 8019b56:	b01c      	add	sp, #112	; 0x70
 8019b58:	f85d eb04 	ldr.w	lr, [sp], #4
 8019b5c:	b003      	add	sp, #12
 8019b5e:	4770      	bx	lr
 8019b60:	20001ccc 	.word	0x20001ccc

08019b64 <strcpy>:
 8019b64:	4603      	mov	r3, r0
 8019b66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019b6a:	f803 2b01 	strb.w	r2, [r3], #1
 8019b6e:	2a00      	cmp	r2, #0
 8019b70:	d1f9      	bne.n	8019b66 <strcpy+0x2>
 8019b72:	4770      	bx	lr

08019b74 <_strtol_l.isra.0>:
 8019b74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b78:	4680      	mov	r8, r0
 8019b7a:	4689      	mov	r9, r1
 8019b7c:	4692      	mov	sl, r2
 8019b7e:	461f      	mov	r7, r3
 8019b80:	468b      	mov	fp, r1
 8019b82:	465d      	mov	r5, fp
 8019b84:	980a      	ldr	r0, [sp, #40]	; 0x28
 8019b86:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019b8a:	f001 ffed 	bl	801bb68 <__locale_ctype_ptr_l>
 8019b8e:	4420      	add	r0, r4
 8019b90:	7846      	ldrb	r6, [r0, #1]
 8019b92:	f016 0608 	ands.w	r6, r6, #8
 8019b96:	d10b      	bne.n	8019bb0 <_strtol_l.isra.0+0x3c>
 8019b98:	2c2d      	cmp	r4, #45	; 0x2d
 8019b9a:	d10b      	bne.n	8019bb4 <_strtol_l.isra.0+0x40>
 8019b9c:	782c      	ldrb	r4, [r5, #0]
 8019b9e:	2601      	movs	r6, #1
 8019ba0:	f10b 0502 	add.w	r5, fp, #2
 8019ba4:	b167      	cbz	r7, 8019bc0 <_strtol_l.isra.0+0x4c>
 8019ba6:	2f10      	cmp	r7, #16
 8019ba8:	d114      	bne.n	8019bd4 <_strtol_l.isra.0+0x60>
 8019baa:	2c30      	cmp	r4, #48	; 0x30
 8019bac:	d00a      	beq.n	8019bc4 <_strtol_l.isra.0+0x50>
 8019bae:	e011      	b.n	8019bd4 <_strtol_l.isra.0+0x60>
 8019bb0:	46ab      	mov	fp, r5
 8019bb2:	e7e6      	b.n	8019b82 <_strtol_l.isra.0+0xe>
 8019bb4:	2c2b      	cmp	r4, #43	; 0x2b
 8019bb6:	bf04      	itt	eq
 8019bb8:	782c      	ldrbeq	r4, [r5, #0]
 8019bba:	f10b 0502 	addeq.w	r5, fp, #2
 8019bbe:	e7f1      	b.n	8019ba4 <_strtol_l.isra.0+0x30>
 8019bc0:	2c30      	cmp	r4, #48	; 0x30
 8019bc2:	d127      	bne.n	8019c14 <_strtol_l.isra.0+0xa0>
 8019bc4:	782b      	ldrb	r3, [r5, #0]
 8019bc6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8019bca:	2b58      	cmp	r3, #88	; 0x58
 8019bcc:	d14b      	bne.n	8019c66 <_strtol_l.isra.0+0xf2>
 8019bce:	786c      	ldrb	r4, [r5, #1]
 8019bd0:	2710      	movs	r7, #16
 8019bd2:	3502      	adds	r5, #2
 8019bd4:	2e00      	cmp	r6, #0
 8019bd6:	bf0c      	ite	eq
 8019bd8:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8019bdc:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8019be0:	2200      	movs	r2, #0
 8019be2:	fbb1 fef7 	udiv	lr, r1, r7
 8019be6:	4610      	mov	r0, r2
 8019be8:	fb07 1c1e 	mls	ip, r7, lr, r1
 8019bec:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8019bf0:	2b09      	cmp	r3, #9
 8019bf2:	d811      	bhi.n	8019c18 <_strtol_l.isra.0+0xa4>
 8019bf4:	461c      	mov	r4, r3
 8019bf6:	42a7      	cmp	r7, r4
 8019bf8:	dd1d      	ble.n	8019c36 <_strtol_l.isra.0+0xc2>
 8019bfa:	1c53      	adds	r3, r2, #1
 8019bfc:	d007      	beq.n	8019c0e <_strtol_l.isra.0+0x9a>
 8019bfe:	4586      	cmp	lr, r0
 8019c00:	d316      	bcc.n	8019c30 <_strtol_l.isra.0+0xbc>
 8019c02:	d101      	bne.n	8019c08 <_strtol_l.isra.0+0x94>
 8019c04:	45a4      	cmp	ip, r4
 8019c06:	db13      	blt.n	8019c30 <_strtol_l.isra.0+0xbc>
 8019c08:	fb00 4007 	mla	r0, r0, r7, r4
 8019c0c:	2201      	movs	r2, #1
 8019c0e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019c12:	e7eb      	b.n	8019bec <_strtol_l.isra.0+0x78>
 8019c14:	270a      	movs	r7, #10
 8019c16:	e7dd      	b.n	8019bd4 <_strtol_l.isra.0+0x60>
 8019c18:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8019c1c:	2b19      	cmp	r3, #25
 8019c1e:	d801      	bhi.n	8019c24 <_strtol_l.isra.0+0xb0>
 8019c20:	3c37      	subs	r4, #55	; 0x37
 8019c22:	e7e8      	b.n	8019bf6 <_strtol_l.isra.0+0x82>
 8019c24:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8019c28:	2b19      	cmp	r3, #25
 8019c2a:	d804      	bhi.n	8019c36 <_strtol_l.isra.0+0xc2>
 8019c2c:	3c57      	subs	r4, #87	; 0x57
 8019c2e:	e7e2      	b.n	8019bf6 <_strtol_l.isra.0+0x82>
 8019c30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019c34:	e7eb      	b.n	8019c0e <_strtol_l.isra.0+0x9a>
 8019c36:	1c53      	adds	r3, r2, #1
 8019c38:	d108      	bne.n	8019c4c <_strtol_l.isra.0+0xd8>
 8019c3a:	2322      	movs	r3, #34	; 0x22
 8019c3c:	f8c8 3000 	str.w	r3, [r8]
 8019c40:	4608      	mov	r0, r1
 8019c42:	f1ba 0f00 	cmp.w	sl, #0
 8019c46:	d107      	bne.n	8019c58 <_strtol_l.isra.0+0xe4>
 8019c48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c4c:	b106      	cbz	r6, 8019c50 <_strtol_l.isra.0+0xdc>
 8019c4e:	4240      	negs	r0, r0
 8019c50:	f1ba 0f00 	cmp.w	sl, #0
 8019c54:	d00c      	beq.n	8019c70 <_strtol_l.isra.0+0xfc>
 8019c56:	b122      	cbz	r2, 8019c62 <_strtol_l.isra.0+0xee>
 8019c58:	3d01      	subs	r5, #1
 8019c5a:	f8ca 5000 	str.w	r5, [sl]
 8019c5e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c62:	464d      	mov	r5, r9
 8019c64:	e7f9      	b.n	8019c5a <_strtol_l.isra.0+0xe6>
 8019c66:	2430      	movs	r4, #48	; 0x30
 8019c68:	2f00      	cmp	r7, #0
 8019c6a:	d1b3      	bne.n	8019bd4 <_strtol_l.isra.0+0x60>
 8019c6c:	2708      	movs	r7, #8
 8019c6e:	e7b1      	b.n	8019bd4 <_strtol_l.isra.0+0x60>
 8019c70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019c74 <strtol>:
 8019c74:	4b08      	ldr	r3, [pc, #32]	; (8019c98 <strtol+0x24>)
 8019c76:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019c78:	681c      	ldr	r4, [r3, #0]
 8019c7a:	4d08      	ldr	r5, [pc, #32]	; (8019c9c <strtol+0x28>)
 8019c7c:	6a23      	ldr	r3, [r4, #32]
 8019c7e:	2b00      	cmp	r3, #0
 8019c80:	bf08      	it	eq
 8019c82:	462b      	moveq	r3, r5
 8019c84:	9300      	str	r3, [sp, #0]
 8019c86:	4613      	mov	r3, r2
 8019c88:	460a      	mov	r2, r1
 8019c8a:	4601      	mov	r1, r0
 8019c8c:	4620      	mov	r0, r4
 8019c8e:	f7ff ff71 	bl	8019b74 <_strtol_l.isra.0>
 8019c92:	b003      	add	sp, #12
 8019c94:	bd30      	pop	{r4, r5, pc}
 8019c96:	bf00      	nop
 8019c98:	20001ccc 	.word	0x20001ccc
 8019c9c:	200021d0 	.word	0x200021d0

08019ca0 <_svfprintf_r>:
 8019ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ca4:	b0bd      	sub	sp, #244	; 0xf4
 8019ca6:	468a      	mov	sl, r1
 8019ca8:	4615      	mov	r5, r2
 8019caa:	461f      	mov	r7, r3
 8019cac:	4683      	mov	fp, r0
 8019cae:	f001 ff5f 	bl	801bb70 <_localeconv_r>
 8019cb2:	6803      	ldr	r3, [r0, #0]
 8019cb4:	930d      	str	r3, [sp, #52]	; 0x34
 8019cb6:	4618      	mov	r0, r3
 8019cb8:	f7e6 fa8a 	bl	80001d0 <strlen>
 8019cbc:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8019cc0:	9008      	str	r0, [sp, #32]
 8019cc2:	061b      	lsls	r3, r3, #24
 8019cc4:	d518      	bpl.n	8019cf8 <_svfprintf_r+0x58>
 8019cc6:	f8da 3010 	ldr.w	r3, [sl, #16]
 8019cca:	b9ab      	cbnz	r3, 8019cf8 <_svfprintf_r+0x58>
 8019ccc:	2140      	movs	r1, #64	; 0x40
 8019cce:	4658      	mov	r0, fp
 8019cd0:	f7ff fce6 	bl	80196a0 <_malloc_r>
 8019cd4:	f8ca 0000 	str.w	r0, [sl]
 8019cd8:	f8ca 0010 	str.w	r0, [sl, #16]
 8019cdc:	b948      	cbnz	r0, 8019cf2 <_svfprintf_r+0x52>
 8019cde:	230c      	movs	r3, #12
 8019ce0:	f8cb 3000 	str.w	r3, [fp]
 8019ce4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019ce8:	9309      	str	r3, [sp, #36]	; 0x24
 8019cea:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019cec:	b03d      	add	sp, #244	; 0xf4
 8019cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019cf2:	2340      	movs	r3, #64	; 0x40
 8019cf4:	f8ca 3014 	str.w	r3, [sl, #20]
 8019cf8:	ed9f 7b99 	vldr	d7, [pc, #612]	; 8019f60 <_svfprintf_r+0x2c0>
 8019cfc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8019d00:	2300      	movs	r3, #0
 8019d02:	ac2c      	add	r4, sp, #176	; 0xb0
 8019d04:	941f      	str	r4, [sp, #124]	; 0x7c
 8019d06:	9321      	str	r3, [sp, #132]	; 0x84
 8019d08:	9320      	str	r3, [sp, #128]	; 0x80
 8019d0a:	9505      	str	r5, [sp, #20]
 8019d0c:	9303      	str	r3, [sp, #12]
 8019d0e:	9311      	str	r3, [sp, #68]	; 0x44
 8019d10:	9310      	str	r3, [sp, #64]	; 0x40
 8019d12:	9309      	str	r3, [sp, #36]	; 0x24
 8019d14:	9d05      	ldr	r5, [sp, #20]
 8019d16:	462b      	mov	r3, r5
 8019d18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019d1c:	b112      	cbz	r2, 8019d24 <_svfprintf_r+0x84>
 8019d1e:	2a25      	cmp	r2, #37	; 0x25
 8019d20:	f040 8083 	bne.w	8019e2a <_svfprintf_r+0x18a>
 8019d24:	9b05      	ldr	r3, [sp, #20]
 8019d26:	1aee      	subs	r6, r5, r3
 8019d28:	d00d      	beq.n	8019d46 <_svfprintf_r+0xa6>
 8019d2a:	e884 0048 	stmia.w	r4, {r3, r6}
 8019d2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019d30:	4433      	add	r3, r6
 8019d32:	9321      	str	r3, [sp, #132]	; 0x84
 8019d34:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019d36:	3301      	adds	r3, #1
 8019d38:	2b07      	cmp	r3, #7
 8019d3a:	9320      	str	r3, [sp, #128]	; 0x80
 8019d3c:	dc77      	bgt.n	8019e2e <_svfprintf_r+0x18e>
 8019d3e:	3408      	adds	r4, #8
 8019d40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019d42:	4433      	add	r3, r6
 8019d44:	9309      	str	r3, [sp, #36]	; 0x24
 8019d46:	782b      	ldrb	r3, [r5, #0]
 8019d48:	2b00      	cmp	r3, #0
 8019d4a:	f000 8729 	beq.w	801aba0 <_svfprintf_r+0xf00>
 8019d4e:	2300      	movs	r3, #0
 8019d50:	1c69      	adds	r1, r5, #1
 8019d52:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8019d56:	461a      	mov	r2, r3
 8019d58:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8019d5c:	930a      	str	r3, [sp, #40]	; 0x28
 8019d5e:	461d      	mov	r5, r3
 8019d60:	200a      	movs	r0, #10
 8019d62:	1c4e      	adds	r6, r1, #1
 8019d64:	7809      	ldrb	r1, [r1, #0]
 8019d66:	9605      	str	r6, [sp, #20]
 8019d68:	9102      	str	r1, [sp, #8]
 8019d6a:	9902      	ldr	r1, [sp, #8]
 8019d6c:	3920      	subs	r1, #32
 8019d6e:	2958      	cmp	r1, #88	; 0x58
 8019d70:	f200 8418 	bhi.w	801a5a4 <_svfprintf_r+0x904>
 8019d74:	e8df f011 	tbh	[pc, r1, lsl #1]
 8019d78:	041600a6 	.word	0x041600a6
 8019d7c:	00ab0416 	.word	0x00ab0416
 8019d80:	04160416 	.word	0x04160416
 8019d84:	04160416 	.word	0x04160416
 8019d88:	04160416 	.word	0x04160416
 8019d8c:	006500ae 	.word	0x006500ae
 8019d90:	00b70416 	.word	0x00b70416
 8019d94:	041600ba 	.word	0x041600ba
 8019d98:	00da00d7 	.word	0x00da00d7
 8019d9c:	00da00da 	.word	0x00da00da
 8019da0:	00da00da 	.word	0x00da00da
 8019da4:	00da00da 	.word	0x00da00da
 8019da8:	00da00da 	.word	0x00da00da
 8019dac:	04160416 	.word	0x04160416
 8019db0:	04160416 	.word	0x04160416
 8019db4:	04160416 	.word	0x04160416
 8019db8:	04160416 	.word	0x04160416
 8019dbc:	04160416 	.word	0x04160416
 8019dc0:	012b0115 	.word	0x012b0115
 8019dc4:	012b0416 	.word	0x012b0416
 8019dc8:	04160416 	.word	0x04160416
 8019dcc:	04160416 	.word	0x04160416
 8019dd0:	041600ed 	.word	0x041600ed
 8019dd4:	03400416 	.word	0x03400416
 8019dd8:	04160416 	.word	0x04160416
 8019ddc:	04160416 	.word	0x04160416
 8019de0:	03a80416 	.word	0x03a80416
 8019de4:	04160416 	.word	0x04160416
 8019de8:	04160086 	.word	0x04160086
 8019dec:	04160416 	.word	0x04160416
 8019df0:	04160416 	.word	0x04160416
 8019df4:	04160416 	.word	0x04160416
 8019df8:	04160416 	.word	0x04160416
 8019dfc:	01070416 	.word	0x01070416
 8019e00:	012b006b 	.word	0x012b006b
 8019e04:	012b012b 	.word	0x012b012b
 8019e08:	006b00f0 	.word	0x006b00f0
 8019e0c:	04160416 	.word	0x04160416
 8019e10:	041600fa 	.word	0x041600fa
 8019e14:	03420322 	.word	0x03420322
 8019e18:	01010376 	.word	0x01010376
 8019e1c:	03870416 	.word	0x03870416
 8019e20:	03aa0416 	.word	0x03aa0416
 8019e24:	04160416 	.word	0x04160416
 8019e28:	03c2      	.short	0x03c2
 8019e2a:	461d      	mov	r5, r3
 8019e2c:	e773      	b.n	8019d16 <_svfprintf_r+0x76>
 8019e2e:	aa1f      	add	r2, sp, #124	; 0x7c
 8019e30:	4651      	mov	r1, sl
 8019e32:	4658      	mov	r0, fp
 8019e34:	f002 f996 	bl	801c164 <__ssprint_r>
 8019e38:	2800      	cmp	r0, #0
 8019e3a:	f040 8692 	bne.w	801ab62 <_svfprintf_r+0xec2>
 8019e3e:	ac2c      	add	r4, sp, #176	; 0xb0
 8019e40:	e77e      	b.n	8019d40 <_svfprintf_r+0xa0>
 8019e42:	2301      	movs	r3, #1
 8019e44:	222b      	movs	r2, #43	; 0x2b
 8019e46:	9905      	ldr	r1, [sp, #20]
 8019e48:	e78b      	b.n	8019d62 <_svfprintf_r+0xc2>
 8019e4a:	460f      	mov	r7, r1
 8019e4c:	e7fb      	b.n	8019e46 <_svfprintf_r+0x1a6>
 8019e4e:	b10b      	cbz	r3, 8019e54 <_svfprintf_r+0x1b4>
 8019e50:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8019e54:	06ae      	lsls	r6, r5, #26
 8019e56:	f140 80aa 	bpl.w	8019fae <_svfprintf_r+0x30e>
 8019e5a:	3707      	adds	r7, #7
 8019e5c:	f027 0707 	bic.w	r7, r7, #7
 8019e60:	f107 0308 	add.w	r3, r7, #8
 8019e64:	e9d7 6700 	ldrd	r6, r7, [r7]
 8019e68:	9304      	str	r3, [sp, #16]
 8019e6a:	2e00      	cmp	r6, #0
 8019e6c:	f177 0300 	sbcs.w	r3, r7, #0
 8019e70:	da06      	bge.n	8019e80 <_svfprintf_r+0x1e0>
 8019e72:	4276      	negs	r6, r6
 8019e74:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8019e78:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8019e7c:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8019e80:	2301      	movs	r3, #1
 8019e82:	e2ca      	b.n	801a41a <_svfprintf_r+0x77a>
 8019e84:	b10b      	cbz	r3, 8019e8a <_svfprintf_r+0x1ea>
 8019e86:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8019e8a:	4b37      	ldr	r3, [pc, #220]	; (8019f68 <_svfprintf_r+0x2c8>)
 8019e8c:	9311      	str	r3, [sp, #68]	; 0x44
 8019e8e:	06ab      	lsls	r3, r5, #26
 8019e90:	f140 8339 	bpl.w	801a506 <_svfprintf_r+0x866>
 8019e94:	3707      	adds	r7, #7
 8019e96:	f027 0707 	bic.w	r7, r7, #7
 8019e9a:	f107 0308 	add.w	r3, r7, #8
 8019e9e:	e9d7 6700 	ldrd	r6, r7, [r7]
 8019ea2:	9304      	str	r3, [sp, #16]
 8019ea4:	07e8      	lsls	r0, r5, #31
 8019ea6:	d50b      	bpl.n	8019ec0 <_svfprintf_r+0x220>
 8019ea8:	ea56 0307 	orrs.w	r3, r6, r7
 8019eac:	d008      	beq.n	8019ec0 <_svfprintf_r+0x220>
 8019eae:	2330      	movs	r3, #48	; 0x30
 8019eb0:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8019eb4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8019eb8:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 8019ebc:	f045 0502 	orr.w	r5, r5, #2
 8019ec0:	2302      	movs	r3, #2
 8019ec2:	e2a7      	b.n	801a414 <_svfprintf_r+0x774>
 8019ec4:	2a00      	cmp	r2, #0
 8019ec6:	d1be      	bne.n	8019e46 <_svfprintf_r+0x1a6>
 8019ec8:	2301      	movs	r3, #1
 8019eca:	2220      	movs	r2, #32
 8019ecc:	e7bb      	b.n	8019e46 <_svfprintf_r+0x1a6>
 8019ece:	f045 0501 	orr.w	r5, r5, #1
 8019ed2:	e7b8      	b.n	8019e46 <_svfprintf_r+0x1a6>
 8019ed4:	683e      	ldr	r6, [r7, #0]
 8019ed6:	960a      	str	r6, [sp, #40]	; 0x28
 8019ed8:	2e00      	cmp	r6, #0
 8019eda:	f107 0104 	add.w	r1, r7, #4
 8019ede:	dab4      	bge.n	8019e4a <_svfprintf_r+0x1aa>
 8019ee0:	4276      	negs	r6, r6
 8019ee2:	960a      	str	r6, [sp, #40]	; 0x28
 8019ee4:	460f      	mov	r7, r1
 8019ee6:	f045 0504 	orr.w	r5, r5, #4
 8019eea:	e7ac      	b.n	8019e46 <_svfprintf_r+0x1a6>
 8019eec:	9905      	ldr	r1, [sp, #20]
 8019eee:	1c4e      	adds	r6, r1, #1
 8019ef0:	7809      	ldrb	r1, [r1, #0]
 8019ef2:	9102      	str	r1, [sp, #8]
 8019ef4:	292a      	cmp	r1, #42	; 0x2a
 8019ef6:	d010      	beq.n	8019f1a <_svfprintf_r+0x27a>
 8019ef8:	f04f 0900 	mov.w	r9, #0
 8019efc:	9605      	str	r6, [sp, #20]
 8019efe:	9902      	ldr	r1, [sp, #8]
 8019f00:	3930      	subs	r1, #48	; 0x30
 8019f02:	2909      	cmp	r1, #9
 8019f04:	f63f af31 	bhi.w	8019d6a <_svfprintf_r+0xca>
 8019f08:	fb00 1909 	mla	r9, r0, r9, r1
 8019f0c:	9905      	ldr	r1, [sp, #20]
 8019f0e:	460e      	mov	r6, r1
 8019f10:	f816 1b01 	ldrb.w	r1, [r6], #1
 8019f14:	9102      	str	r1, [sp, #8]
 8019f16:	9605      	str	r6, [sp, #20]
 8019f18:	e7f1      	b.n	8019efe <_svfprintf_r+0x25e>
 8019f1a:	6839      	ldr	r1, [r7, #0]
 8019f1c:	9605      	str	r6, [sp, #20]
 8019f1e:	ea41 79e1 	orr.w	r9, r1, r1, asr #31
 8019f22:	3704      	adds	r7, #4
 8019f24:	e78f      	b.n	8019e46 <_svfprintf_r+0x1a6>
 8019f26:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8019f2a:	e78c      	b.n	8019e46 <_svfprintf_r+0x1a6>
 8019f2c:	2100      	movs	r1, #0
 8019f2e:	910a      	str	r1, [sp, #40]	; 0x28
 8019f30:	9902      	ldr	r1, [sp, #8]
 8019f32:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8019f34:	3930      	subs	r1, #48	; 0x30
 8019f36:	fb00 1106 	mla	r1, r0, r6, r1
 8019f3a:	910a      	str	r1, [sp, #40]	; 0x28
 8019f3c:	9905      	ldr	r1, [sp, #20]
 8019f3e:	460e      	mov	r6, r1
 8019f40:	f816 1b01 	ldrb.w	r1, [r6], #1
 8019f44:	9102      	str	r1, [sp, #8]
 8019f46:	9902      	ldr	r1, [sp, #8]
 8019f48:	9605      	str	r6, [sp, #20]
 8019f4a:	3930      	subs	r1, #48	; 0x30
 8019f4c:	2909      	cmp	r1, #9
 8019f4e:	d9ef      	bls.n	8019f30 <_svfprintf_r+0x290>
 8019f50:	e70b      	b.n	8019d6a <_svfprintf_r+0xca>
 8019f52:	f045 0508 	orr.w	r5, r5, #8
 8019f56:	e776      	b.n	8019e46 <_svfprintf_r+0x1a6>
 8019f58:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8019f5c:	e773      	b.n	8019e46 <_svfprintf_r+0x1a6>
 8019f5e:	bf00      	nop
	...
 8019f68:	080ec43e 	.word	0x080ec43e
 8019f6c:	9905      	ldr	r1, [sp, #20]
 8019f6e:	7809      	ldrb	r1, [r1, #0]
 8019f70:	296c      	cmp	r1, #108	; 0x6c
 8019f72:	d105      	bne.n	8019f80 <_svfprintf_r+0x2e0>
 8019f74:	9905      	ldr	r1, [sp, #20]
 8019f76:	3101      	adds	r1, #1
 8019f78:	9105      	str	r1, [sp, #20]
 8019f7a:	f045 0520 	orr.w	r5, r5, #32
 8019f7e:	e762      	b.n	8019e46 <_svfprintf_r+0x1a6>
 8019f80:	f045 0510 	orr.w	r5, r5, #16
 8019f84:	e75f      	b.n	8019e46 <_svfprintf_r+0x1a6>
 8019f86:	1d3b      	adds	r3, r7, #4
 8019f88:	9304      	str	r3, [sp, #16]
 8019f8a:	2600      	movs	r6, #0
 8019f8c:	683b      	ldr	r3, [r7, #0]
 8019f8e:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8019f92:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8019f96:	f04f 0901 	mov.w	r9, #1
 8019f9a:	4637      	mov	r7, r6
 8019f9c:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8019fa0:	e11b      	b.n	801a1da <_svfprintf_r+0x53a>
 8019fa2:	b10b      	cbz	r3, 8019fa8 <_svfprintf_r+0x308>
 8019fa4:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8019fa8:	f045 0510 	orr.w	r5, r5, #16
 8019fac:	e752      	b.n	8019e54 <_svfprintf_r+0x1b4>
 8019fae:	f015 0f10 	tst.w	r5, #16
 8019fb2:	f107 0304 	add.w	r3, r7, #4
 8019fb6:	d003      	beq.n	8019fc0 <_svfprintf_r+0x320>
 8019fb8:	683e      	ldr	r6, [r7, #0]
 8019fba:	9304      	str	r3, [sp, #16]
 8019fbc:	17f7      	asrs	r7, r6, #31
 8019fbe:	e754      	b.n	8019e6a <_svfprintf_r+0x1ca>
 8019fc0:	683e      	ldr	r6, [r7, #0]
 8019fc2:	9304      	str	r3, [sp, #16]
 8019fc4:	f015 0f40 	tst.w	r5, #64	; 0x40
 8019fc8:	bf18      	it	ne
 8019fca:	b236      	sxthne	r6, r6
 8019fcc:	e7f6      	b.n	8019fbc <_svfprintf_r+0x31c>
 8019fce:	b10b      	cbz	r3, 8019fd4 <_svfprintf_r+0x334>
 8019fd0:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8019fd4:	3707      	adds	r7, #7
 8019fd6:	f027 0707 	bic.w	r7, r7, #7
 8019fda:	f107 0308 	add.w	r3, r7, #8
 8019fde:	9304      	str	r3, [sp, #16]
 8019fe0:	ed97 7b00 	vldr	d7, [r7]
 8019fe4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8019fe8:	9b06      	ldr	r3, [sp, #24]
 8019fea:	9312      	str	r3, [sp, #72]	; 0x48
 8019fec:	9b07      	ldr	r3, [sp, #28]
 8019fee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019ff2:	9313      	str	r3, [sp, #76]	; 0x4c
 8019ff4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019ff8:	4b4a      	ldr	r3, [pc, #296]	; (801a124 <_svfprintf_r+0x484>)
 8019ffa:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8019ffe:	f7e6 fd91 	bl	8000b24 <__aeabi_dcmpun>
 801a002:	2800      	cmp	r0, #0
 801a004:	f040 85d5 	bne.w	801abb2 <_svfprintf_r+0xf12>
 801a008:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a00c:	4b45      	ldr	r3, [pc, #276]	; (801a124 <_svfprintf_r+0x484>)
 801a00e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 801a012:	f7e6 fd69 	bl	8000ae8 <__aeabi_dcmple>
 801a016:	2800      	cmp	r0, #0
 801a018:	f040 85cb 	bne.w	801abb2 <_svfprintf_r+0xf12>
 801a01c:	2200      	movs	r2, #0
 801a01e:	2300      	movs	r3, #0
 801a020:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a024:	f7e6 fd56 	bl	8000ad4 <__aeabi_dcmplt>
 801a028:	b110      	cbz	r0, 801a030 <_svfprintf_r+0x390>
 801a02a:	232d      	movs	r3, #45	; 0x2d
 801a02c:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 801a030:	4b3d      	ldr	r3, [pc, #244]	; (801a128 <_svfprintf_r+0x488>)
 801a032:	4a3e      	ldr	r2, [pc, #248]	; (801a12c <_svfprintf_r+0x48c>)
 801a034:	9902      	ldr	r1, [sp, #8]
 801a036:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 801a03a:	2947      	cmp	r1, #71	; 0x47
 801a03c:	bfcc      	ite	gt
 801a03e:	4690      	movgt	r8, r2
 801a040:	4698      	movle	r8, r3
 801a042:	f04f 0903 	mov.w	r9, #3
 801a046:	2600      	movs	r6, #0
 801a048:	4637      	mov	r7, r6
 801a04a:	e0c6      	b.n	801a1da <_svfprintf_r+0x53a>
 801a04c:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 801a050:	d022      	beq.n	801a098 <_svfprintf_r+0x3f8>
 801a052:	9b02      	ldr	r3, [sp, #8]
 801a054:	f023 0320 	bic.w	r3, r3, #32
 801a058:	2b47      	cmp	r3, #71	; 0x47
 801a05a:	d104      	bne.n	801a066 <_svfprintf_r+0x3c6>
 801a05c:	f1b9 0f00 	cmp.w	r9, #0
 801a060:	bf08      	it	eq
 801a062:	f04f 0901 	moveq.w	r9, #1
 801a066:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 801a06a:	930c      	str	r3, [sp, #48]	; 0x30
 801a06c:	9b07      	ldr	r3, [sp, #28]
 801a06e:	2b00      	cmp	r3, #0
 801a070:	da15      	bge.n	801a09e <_svfprintf_r+0x3fe>
 801a072:	9b06      	ldr	r3, [sp, #24]
 801a074:	930e      	str	r3, [sp, #56]	; 0x38
 801a076:	9b07      	ldr	r3, [sp, #28]
 801a078:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801a07c:	930f      	str	r3, [sp, #60]	; 0x3c
 801a07e:	232d      	movs	r3, #45	; 0x2d
 801a080:	930b      	str	r3, [sp, #44]	; 0x2c
 801a082:	9b02      	ldr	r3, [sp, #8]
 801a084:	f023 0720 	bic.w	r7, r3, #32
 801a088:	2f46      	cmp	r7, #70	; 0x46
 801a08a:	d00e      	beq.n	801a0aa <_svfprintf_r+0x40a>
 801a08c:	2f45      	cmp	r7, #69	; 0x45
 801a08e:	d146      	bne.n	801a11e <_svfprintf_r+0x47e>
 801a090:	f109 0601 	add.w	r6, r9, #1
 801a094:	2102      	movs	r1, #2
 801a096:	e00a      	b.n	801a0ae <_svfprintf_r+0x40e>
 801a098:	f04f 0906 	mov.w	r9, #6
 801a09c:	e7e3      	b.n	801a066 <_svfprintf_r+0x3c6>
 801a09e:	ed9d 7b06 	vldr	d7, [sp, #24]
 801a0a2:	2300      	movs	r3, #0
 801a0a4:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 801a0a8:	e7ea      	b.n	801a080 <_svfprintf_r+0x3e0>
 801a0aa:	464e      	mov	r6, r9
 801a0ac:	2103      	movs	r1, #3
 801a0ae:	ab1d      	add	r3, sp, #116	; 0x74
 801a0b0:	9301      	str	r3, [sp, #4]
 801a0b2:	ab1a      	add	r3, sp, #104	; 0x68
 801a0b4:	9300      	str	r3, [sp, #0]
 801a0b6:	4632      	mov	r2, r6
 801a0b8:	ab19      	add	r3, sp, #100	; 0x64
 801a0ba:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 801a0be:	4658      	mov	r0, fp
 801a0c0:	f000 fe72 	bl	801ada8 <_dtoa_r>
 801a0c4:	2f47      	cmp	r7, #71	; 0x47
 801a0c6:	4680      	mov	r8, r0
 801a0c8:	d102      	bne.n	801a0d0 <_svfprintf_r+0x430>
 801a0ca:	07e8      	lsls	r0, r5, #31
 801a0cc:	f140 857e 	bpl.w	801abcc <_svfprintf_r+0xf2c>
 801a0d0:	eb08 0306 	add.w	r3, r8, r6
 801a0d4:	2f46      	cmp	r7, #70	; 0x46
 801a0d6:	9303      	str	r3, [sp, #12]
 801a0d8:	d111      	bne.n	801a0fe <_svfprintf_r+0x45e>
 801a0da:	f898 3000 	ldrb.w	r3, [r8]
 801a0de:	2b30      	cmp	r3, #48	; 0x30
 801a0e0:	d109      	bne.n	801a0f6 <_svfprintf_r+0x456>
 801a0e2:	2200      	movs	r2, #0
 801a0e4:	2300      	movs	r3, #0
 801a0e6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801a0ea:	f7e6 fce9 	bl	8000ac0 <__aeabi_dcmpeq>
 801a0ee:	b910      	cbnz	r0, 801a0f6 <_svfprintf_r+0x456>
 801a0f0:	f1c6 0601 	rsb	r6, r6, #1
 801a0f4:	9619      	str	r6, [sp, #100]	; 0x64
 801a0f6:	9a03      	ldr	r2, [sp, #12]
 801a0f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a0fa:	441a      	add	r2, r3
 801a0fc:	9203      	str	r2, [sp, #12]
 801a0fe:	2200      	movs	r2, #0
 801a100:	2300      	movs	r3, #0
 801a102:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801a106:	f7e6 fcdb 	bl	8000ac0 <__aeabi_dcmpeq>
 801a10a:	b988      	cbnz	r0, 801a130 <_svfprintf_r+0x490>
 801a10c:	2230      	movs	r2, #48	; 0x30
 801a10e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a110:	9903      	ldr	r1, [sp, #12]
 801a112:	4299      	cmp	r1, r3
 801a114:	d90e      	bls.n	801a134 <_svfprintf_r+0x494>
 801a116:	1c59      	adds	r1, r3, #1
 801a118:	911d      	str	r1, [sp, #116]	; 0x74
 801a11a:	701a      	strb	r2, [r3, #0]
 801a11c:	e7f7      	b.n	801a10e <_svfprintf_r+0x46e>
 801a11e:	464e      	mov	r6, r9
 801a120:	e7b8      	b.n	801a094 <_svfprintf_r+0x3f4>
 801a122:	bf00      	nop
 801a124:	7fefffff 	.word	0x7fefffff
 801a128:	080ec42e 	.word	0x080ec42e
 801a12c:	080ec432 	.word	0x080ec432
 801a130:	9b03      	ldr	r3, [sp, #12]
 801a132:	931d      	str	r3, [sp, #116]	; 0x74
 801a134:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a136:	2f47      	cmp	r7, #71	; 0x47
 801a138:	eba3 0308 	sub.w	r3, r3, r8
 801a13c:	9303      	str	r3, [sp, #12]
 801a13e:	f040 80fa 	bne.w	801a336 <_svfprintf_r+0x696>
 801a142:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a144:	1cd9      	adds	r1, r3, #3
 801a146:	db02      	blt.n	801a14e <_svfprintf_r+0x4ae>
 801a148:	4599      	cmp	r9, r3
 801a14a:	f280 8120 	bge.w	801a38e <_svfprintf_r+0x6ee>
 801a14e:	9b02      	ldr	r3, [sp, #8]
 801a150:	3b02      	subs	r3, #2
 801a152:	9302      	str	r3, [sp, #8]
 801a154:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801a156:	f89d 1008 	ldrb.w	r1, [sp, #8]
 801a15a:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 801a15e:	1e53      	subs	r3, r2, #1
 801a160:	2b00      	cmp	r3, #0
 801a162:	9319      	str	r3, [sp, #100]	; 0x64
 801a164:	bfb6      	itet	lt
 801a166:	f1c2 0301 	rsblt	r3, r2, #1
 801a16a:	222b      	movge	r2, #43	; 0x2b
 801a16c:	222d      	movlt	r2, #45	; 0x2d
 801a16e:	2b09      	cmp	r3, #9
 801a170:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 801a174:	f340 80fb 	ble.w	801a36e <_svfprintf_r+0x6ce>
 801a178:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 801a17c:	260a      	movs	r6, #10
 801a17e:	fb93 f0f6 	sdiv	r0, r3, r6
 801a182:	fb06 3310 	mls	r3, r6, r0, r3
 801a186:	3330      	adds	r3, #48	; 0x30
 801a188:	2809      	cmp	r0, #9
 801a18a:	f802 3c01 	strb.w	r3, [r2, #-1]
 801a18e:	f102 31ff 	add.w	r1, r2, #4294967295	; 0xffffffff
 801a192:	4603      	mov	r3, r0
 801a194:	f300 80e4 	bgt.w	801a360 <_svfprintf_r+0x6c0>
 801a198:	3330      	adds	r3, #48	; 0x30
 801a19a:	f801 3c01 	strb.w	r3, [r1, #-1]
 801a19e:	3a02      	subs	r2, #2
 801a1a0:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 801a1a4:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 801a1a8:	4282      	cmp	r2, r0
 801a1aa:	4619      	mov	r1, r3
 801a1ac:	f0c0 80da 	bcc.w	801a364 <_svfprintf_r+0x6c4>
 801a1b0:	9a03      	ldr	r2, [sp, #12]
 801a1b2:	ab1b      	add	r3, sp, #108	; 0x6c
 801a1b4:	1acb      	subs	r3, r1, r3
 801a1b6:	2a01      	cmp	r2, #1
 801a1b8:	9310      	str	r3, [sp, #64]	; 0x40
 801a1ba:	eb03 0902 	add.w	r9, r3, r2
 801a1be:	dc02      	bgt.n	801a1c6 <_svfprintf_r+0x526>
 801a1c0:	f015 0701 	ands.w	r7, r5, #1
 801a1c4:	d002      	beq.n	801a1cc <_svfprintf_r+0x52c>
 801a1c6:	9b08      	ldr	r3, [sp, #32]
 801a1c8:	2700      	movs	r7, #0
 801a1ca:	4499      	add	r9, r3
 801a1cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a1ce:	b113      	cbz	r3, 801a1d6 <_svfprintf_r+0x536>
 801a1d0:	232d      	movs	r3, #45	; 0x2d
 801a1d2:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 801a1d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801a1d8:	2600      	movs	r6, #0
 801a1da:	454e      	cmp	r6, r9
 801a1dc:	4633      	mov	r3, r6
 801a1de:	bfb8      	it	lt
 801a1e0:	464b      	movlt	r3, r9
 801a1e2:	930b      	str	r3, [sp, #44]	; 0x2c
 801a1e4:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 801a1e8:	b113      	cbz	r3, 801a1f0 <_svfprintf_r+0x550>
 801a1ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a1ec:	3301      	adds	r3, #1
 801a1ee:	930b      	str	r3, [sp, #44]	; 0x2c
 801a1f0:	f015 0302 	ands.w	r3, r5, #2
 801a1f4:	9314      	str	r3, [sp, #80]	; 0x50
 801a1f6:	bf1e      	ittt	ne
 801a1f8:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 801a1fa:	3302      	addne	r3, #2
 801a1fc:	930b      	strne	r3, [sp, #44]	; 0x2c
 801a1fe:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 801a202:	9315      	str	r3, [sp, #84]	; 0x54
 801a204:	d118      	bne.n	801a238 <_svfprintf_r+0x598>
 801a206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a208:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a20a:	1a9b      	subs	r3, r3, r2
 801a20c:	2b00      	cmp	r3, #0
 801a20e:	930c      	str	r3, [sp, #48]	; 0x30
 801a210:	dd12      	ble.n	801a238 <_svfprintf_r+0x598>
 801a212:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a214:	2b10      	cmp	r3, #16
 801a216:	4ba9      	ldr	r3, [pc, #676]	; (801a4bc <_svfprintf_r+0x81c>)
 801a218:	6023      	str	r3, [r4, #0]
 801a21a:	f300 81d5 	bgt.w	801a5c8 <_svfprintf_r+0x928>
 801a21e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a220:	6063      	str	r3, [r4, #4]
 801a222:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a224:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a226:	4413      	add	r3, r2
 801a228:	9321      	str	r3, [sp, #132]	; 0x84
 801a22a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801a22c:	3301      	adds	r3, #1
 801a22e:	2b07      	cmp	r3, #7
 801a230:	9320      	str	r3, [sp, #128]	; 0x80
 801a232:	f300 81e2 	bgt.w	801a5fa <_svfprintf_r+0x95a>
 801a236:	3408      	adds	r4, #8
 801a238:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 801a23c:	b173      	cbz	r3, 801a25c <_svfprintf_r+0x5bc>
 801a23e:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 801a242:	6023      	str	r3, [r4, #0]
 801a244:	2301      	movs	r3, #1
 801a246:	6063      	str	r3, [r4, #4]
 801a248:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a24a:	3301      	adds	r3, #1
 801a24c:	9321      	str	r3, [sp, #132]	; 0x84
 801a24e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801a250:	3301      	adds	r3, #1
 801a252:	2b07      	cmp	r3, #7
 801a254:	9320      	str	r3, [sp, #128]	; 0x80
 801a256:	f300 81da 	bgt.w	801a60e <_svfprintf_r+0x96e>
 801a25a:	3408      	adds	r4, #8
 801a25c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801a25e:	b16b      	cbz	r3, 801a27c <_svfprintf_r+0x5dc>
 801a260:	ab18      	add	r3, sp, #96	; 0x60
 801a262:	6023      	str	r3, [r4, #0]
 801a264:	2302      	movs	r3, #2
 801a266:	6063      	str	r3, [r4, #4]
 801a268:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a26a:	3302      	adds	r3, #2
 801a26c:	9321      	str	r3, [sp, #132]	; 0x84
 801a26e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801a270:	3301      	adds	r3, #1
 801a272:	2b07      	cmp	r3, #7
 801a274:	9320      	str	r3, [sp, #128]	; 0x80
 801a276:	f300 81d4 	bgt.w	801a622 <_svfprintf_r+0x982>
 801a27a:	3408      	adds	r4, #8
 801a27c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a27e:	2b80      	cmp	r3, #128	; 0x80
 801a280:	d114      	bne.n	801a2ac <_svfprintf_r+0x60c>
 801a282:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a284:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a286:	1a9b      	subs	r3, r3, r2
 801a288:	2b00      	cmp	r3, #0
 801a28a:	dd0f      	ble.n	801a2ac <_svfprintf_r+0x60c>
 801a28c:	4a8c      	ldr	r2, [pc, #560]	; (801a4c0 <_svfprintf_r+0x820>)
 801a28e:	6022      	str	r2, [r4, #0]
 801a290:	2b10      	cmp	r3, #16
 801a292:	f300 81d0 	bgt.w	801a636 <_svfprintf_r+0x996>
 801a296:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a298:	6063      	str	r3, [r4, #4]
 801a29a:	4413      	add	r3, r2
 801a29c:	9321      	str	r3, [sp, #132]	; 0x84
 801a29e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801a2a0:	3301      	adds	r3, #1
 801a2a2:	2b07      	cmp	r3, #7
 801a2a4:	9320      	str	r3, [sp, #128]	; 0x80
 801a2a6:	f300 81df 	bgt.w	801a668 <_svfprintf_r+0x9c8>
 801a2aa:	3408      	adds	r4, #8
 801a2ac:	eba6 0609 	sub.w	r6, r6, r9
 801a2b0:	2e00      	cmp	r6, #0
 801a2b2:	dd0f      	ble.n	801a2d4 <_svfprintf_r+0x634>
 801a2b4:	4b82      	ldr	r3, [pc, #520]	; (801a4c0 <_svfprintf_r+0x820>)
 801a2b6:	6023      	str	r3, [r4, #0]
 801a2b8:	2e10      	cmp	r6, #16
 801a2ba:	f300 81df 	bgt.w	801a67c <_svfprintf_r+0x9dc>
 801a2be:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801a2c0:	9821      	ldr	r0, [sp, #132]	; 0x84
 801a2c2:	6066      	str	r6, [r4, #4]
 801a2c4:	3301      	adds	r3, #1
 801a2c6:	4406      	add	r6, r0
 801a2c8:	2b07      	cmp	r3, #7
 801a2ca:	9621      	str	r6, [sp, #132]	; 0x84
 801a2cc:	9320      	str	r3, [sp, #128]	; 0x80
 801a2ce:	f300 81ec 	bgt.w	801a6aa <_svfprintf_r+0xa0a>
 801a2d2:	3408      	adds	r4, #8
 801a2d4:	05eb      	lsls	r3, r5, #23
 801a2d6:	f100 81f2 	bmi.w	801a6be <_svfprintf_r+0xa1e>
 801a2da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a2dc:	e884 0300 	stmia.w	r4, {r8, r9}
 801a2e0:	444b      	add	r3, r9
 801a2e2:	9321      	str	r3, [sp, #132]	; 0x84
 801a2e4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801a2e6:	3301      	adds	r3, #1
 801a2e8:	2b07      	cmp	r3, #7
 801a2ea:	9320      	str	r3, [sp, #128]	; 0x80
 801a2ec:	f340 8419 	ble.w	801ab22 <_svfprintf_r+0xe82>
 801a2f0:	aa1f      	add	r2, sp, #124	; 0x7c
 801a2f2:	4651      	mov	r1, sl
 801a2f4:	4658      	mov	r0, fp
 801a2f6:	f001 ff35 	bl	801c164 <__ssprint_r>
 801a2fa:	2800      	cmp	r0, #0
 801a2fc:	f040 8431 	bne.w	801ab62 <_svfprintf_r+0xec2>
 801a300:	ac2c      	add	r4, sp, #176	; 0xb0
 801a302:	076b      	lsls	r3, r5, #29
 801a304:	f100 8410 	bmi.w	801ab28 <_svfprintf_r+0xe88>
 801a308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a30a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a30c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801a30e:	428a      	cmp	r2, r1
 801a310:	bfac      	ite	ge
 801a312:	189b      	addge	r3, r3, r2
 801a314:	185b      	addlt	r3, r3, r1
 801a316:	9309      	str	r3, [sp, #36]	; 0x24
 801a318:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a31a:	b13b      	cbz	r3, 801a32c <_svfprintf_r+0x68c>
 801a31c:	aa1f      	add	r2, sp, #124	; 0x7c
 801a31e:	4651      	mov	r1, sl
 801a320:	4658      	mov	r0, fp
 801a322:	f001 ff1f 	bl	801c164 <__ssprint_r>
 801a326:	2800      	cmp	r0, #0
 801a328:	f040 841b 	bne.w	801ab62 <_svfprintf_r+0xec2>
 801a32c:	2300      	movs	r3, #0
 801a32e:	9320      	str	r3, [sp, #128]	; 0x80
 801a330:	9f04      	ldr	r7, [sp, #16]
 801a332:	ac2c      	add	r4, sp, #176	; 0xb0
 801a334:	e4ee      	b.n	8019d14 <_svfprintf_r+0x74>
 801a336:	9b02      	ldr	r3, [sp, #8]
 801a338:	2b65      	cmp	r3, #101	; 0x65
 801a33a:	f77f af0b 	ble.w	801a154 <_svfprintf_r+0x4b4>
 801a33e:	9b02      	ldr	r3, [sp, #8]
 801a340:	2b66      	cmp	r3, #102	; 0x66
 801a342:	d124      	bne.n	801a38e <_svfprintf_r+0x6ee>
 801a344:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a346:	2b00      	cmp	r3, #0
 801a348:	dd19      	ble.n	801a37e <_svfprintf_r+0x6de>
 801a34a:	f1b9 0f00 	cmp.w	r9, #0
 801a34e:	d101      	bne.n	801a354 <_svfprintf_r+0x6b4>
 801a350:	07ea      	lsls	r2, r5, #31
 801a352:	d502      	bpl.n	801a35a <_svfprintf_r+0x6ba>
 801a354:	9a08      	ldr	r2, [sp, #32]
 801a356:	4413      	add	r3, r2
 801a358:	444b      	add	r3, r9
 801a35a:	9f19      	ldr	r7, [sp, #100]	; 0x64
 801a35c:	4699      	mov	r9, r3
 801a35e:	e735      	b.n	801a1cc <_svfprintf_r+0x52c>
 801a360:	460a      	mov	r2, r1
 801a362:	e70c      	b.n	801a17e <_svfprintf_r+0x4de>
 801a364:	f812 1b01 	ldrb.w	r1, [r2], #1
 801a368:	f803 1b01 	strb.w	r1, [r3], #1
 801a36c:	e71c      	b.n	801a1a8 <_svfprintf_r+0x508>
 801a36e:	2230      	movs	r2, #48	; 0x30
 801a370:	4413      	add	r3, r2
 801a372:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 801a376:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 801a37a:	a91c      	add	r1, sp, #112	; 0x70
 801a37c:	e718      	b.n	801a1b0 <_svfprintf_r+0x510>
 801a37e:	f1b9 0f00 	cmp.w	r9, #0
 801a382:	d101      	bne.n	801a388 <_svfprintf_r+0x6e8>
 801a384:	07eb      	lsls	r3, r5, #31
 801a386:	d515      	bpl.n	801a3b4 <_svfprintf_r+0x714>
 801a388:	9b08      	ldr	r3, [sp, #32]
 801a38a:	3301      	adds	r3, #1
 801a38c:	e7e4      	b.n	801a358 <_svfprintf_r+0x6b8>
 801a38e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801a390:	9b03      	ldr	r3, [sp, #12]
 801a392:	429a      	cmp	r2, r3
 801a394:	db06      	blt.n	801a3a4 <_svfprintf_r+0x704>
 801a396:	07ef      	lsls	r7, r5, #31
 801a398:	d50e      	bpl.n	801a3b8 <_svfprintf_r+0x718>
 801a39a:	9b08      	ldr	r3, [sp, #32]
 801a39c:	4413      	add	r3, r2
 801a39e:	2267      	movs	r2, #103	; 0x67
 801a3a0:	9202      	str	r2, [sp, #8]
 801a3a2:	e7da      	b.n	801a35a <_svfprintf_r+0x6ba>
 801a3a4:	9b03      	ldr	r3, [sp, #12]
 801a3a6:	9908      	ldr	r1, [sp, #32]
 801a3a8:	2a00      	cmp	r2, #0
 801a3aa:	440b      	add	r3, r1
 801a3ac:	dcf7      	bgt.n	801a39e <_svfprintf_r+0x6fe>
 801a3ae:	f1c2 0201 	rsb	r2, r2, #1
 801a3b2:	e7f3      	b.n	801a39c <_svfprintf_r+0x6fc>
 801a3b4:	2301      	movs	r3, #1
 801a3b6:	e7d0      	b.n	801a35a <_svfprintf_r+0x6ba>
 801a3b8:	4613      	mov	r3, r2
 801a3ba:	e7f0      	b.n	801a39e <_svfprintf_r+0x6fe>
 801a3bc:	b10b      	cbz	r3, 801a3c2 <_svfprintf_r+0x722>
 801a3be:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 801a3c2:	f015 0f20 	tst.w	r5, #32
 801a3c6:	f107 0304 	add.w	r3, r7, #4
 801a3ca:	d008      	beq.n	801a3de <_svfprintf_r+0x73e>
 801a3cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a3ce:	683a      	ldr	r2, [r7, #0]
 801a3d0:	17ce      	asrs	r6, r1, #31
 801a3d2:	4608      	mov	r0, r1
 801a3d4:	4631      	mov	r1, r6
 801a3d6:	e9c2 0100 	strd	r0, r1, [r2]
 801a3da:	461f      	mov	r7, r3
 801a3dc:	e49a      	b.n	8019d14 <_svfprintf_r+0x74>
 801a3de:	06ee      	lsls	r6, r5, #27
 801a3e0:	d503      	bpl.n	801a3ea <_svfprintf_r+0x74a>
 801a3e2:	683a      	ldr	r2, [r7, #0]
 801a3e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a3e6:	6011      	str	r1, [r2, #0]
 801a3e8:	e7f7      	b.n	801a3da <_svfprintf_r+0x73a>
 801a3ea:	0668      	lsls	r0, r5, #25
 801a3ec:	d5f9      	bpl.n	801a3e2 <_svfprintf_r+0x742>
 801a3ee:	683a      	ldr	r2, [r7, #0]
 801a3f0:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801a3f4:	8011      	strh	r1, [r2, #0]
 801a3f6:	e7f0      	b.n	801a3da <_svfprintf_r+0x73a>
 801a3f8:	f045 0510 	orr.w	r5, r5, #16
 801a3fc:	f015 0320 	ands.w	r3, r5, #32
 801a400:	d022      	beq.n	801a448 <_svfprintf_r+0x7a8>
 801a402:	3707      	adds	r7, #7
 801a404:	f027 0707 	bic.w	r7, r7, #7
 801a408:	f107 0308 	add.w	r3, r7, #8
 801a40c:	e9d7 6700 	ldrd	r6, r7, [r7]
 801a410:	9304      	str	r3, [sp, #16]
 801a412:	2300      	movs	r3, #0
 801a414:	2200      	movs	r2, #0
 801a416:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 801a41a:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 801a41e:	f000 83db 	beq.w	801abd8 <_svfprintf_r+0xf38>
 801a422:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 801a426:	920b      	str	r2, [sp, #44]	; 0x2c
 801a428:	ea56 0207 	orrs.w	r2, r6, r7
 801a42c:	f040 83d9 	bne.w	801abe2 <_svfprintf_r+0xf42>
 801a430:	f1b9 0f00 	cmp.w	r9, #0
 801a434:	f000 80aa 	beq.w	801a58c <_svfprintf_r+0x8ec>
 801a438:	2b01      	cmp	r3, #1
 801a43a:	d076      	beq.n	801a52a <_svfprintf_r+0x88a>
 801a43c:	2b02      	cmp	r3, #2
 801a43e:	f000 8091 	beq.w	801a564 <_svfprintf_r+0x8c4>
 801a442:	2600      	movs	r6, #0
 801a444:	2700      	movs	r7, #0
 801a446:	e3d2      	b.n	801abee <_svfprintf_r+0xf4e>
 801a448:	1d3a      	adds	r2, r7, #4
 801a44a:	f015 0110 	ands.w	r1, r5, #16
 801a44e:	9204      	str	r2, [sp, #16]
 801a450:	d002      	beq.n	801a458 <_svfprintf_r+0x7b8>
 801a452:	683e      	ldr	r6, [r7, #0]
 801a454:	2700      	movs	r7, #0
 801a456:	e7dd      	b.n	801a414 <_svfprintf_r+0x774>
 801a458:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 801a45c:	d0f9      	beq.n	801a452 <_svfprintf_r+0x7b2>
 801a45e:	883e      	ldrh	r6, [r7, #0]
 801a460:	2700      	movs	r7, #0
 801a462:	e7d6      	b.n	801a412 <_svfprintf_r+0x772>
 801a464:	1d3b      	adds	r3, r7, #4
 801a466:	9304      	str	r3, [sp, #16]
 801a468:	2330      	movs	r3, #48	; 0x30
 801a46a:	2278      	movs	r2, #120	; 0x78
 801a46c:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 801a470:	4b14      	ldr	r3, [pc, #80]	; (801a4c4 <_svfprintf_r+0x824>)
 801a472:	683e      	ldr	r6, [r7, #0]
 801a474:	9311      	str	r3, [sp, #68]	; 0x44
 801a476:	2700      	movs	r7, #0
 801a478:	f045 0502 	orr.w	r5, r5, #2
 801a47c:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 801a480:	2302      	movs	r3, #2
 801a482:	9202      	str	r2, [sp, #8]
 801a484:	e7c6      	b.n	801a414 <_svfprintf_r+0x774>
 801a486:	1d3b      	adds	r3, r7, #4
 801a488:	2600      	movs	r6, #0
 801a48a:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 801a48e:	9304      	str	r3, [sp, #16]
 801a490:	f8d7 8000 	ldr.w	r8, [r7]
 801a494:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 801a498:	d00a      	beq.n	801a4b0 <_svfprintf_r+0x810>
 801a49a:	464a      	mov	r2, r9
 801a49c:	4631      	mov	r1, r6
 801a49e:	4640      	mov	r0, r8
 801a4a0:	f7e5 fe9e 	bl	80001e0 <memchr>
 801a4a4:	2800      	cmp	r0, #0
 801a4a6:	f000 808d 	beq.w	801a5c4 <_svfprintf_r+0x924>
 801a4aa:	eba0 0908 	sub.w	r9, r0, r8
 801a4ae:	e5cb      	b.n	801a048 <_svfprintf_r+0x3a8>
 801a4b0:	4640      	mov	r0, r8
 801a4b2:	f7e5 fe8d 	bl	80001d0 <strlen>
 801a4b6:	4681      	mov	r9, r0
 801a4b8:	e5c6      	b.n	801a048 <_svfprintf_r+0x3a8>
 801a4ba:	bf00      	nop
 801a4bc:	080ec460 	.word	0x080ec460
 801a4c0:	080ec470 	.word	0x080ec470
 801a4c4:	080ec44f 	.word	0x080ec44f
 801a4c8:	f045 0510 	orr.w	r5, r5, #16
 801a4cc:	06a9      	lsls	r1, r5, #26
 801a4ce:	d509      	bpl.n	801a4e4 <_svfprintf_r+0x844>
 801a4d0:	3707      	adds	r7, #7
 801a4d2:	f027 0707 	bic.w	r7, r7, #7
 801a4d6:	f107 0308 	add.w	r3, r7, #8
 801a4da:	e9d7 6700 	ldrd	r6, r7, [r7]
 801a4de:	9304      	str	r3, [sp, #16]
 801a4e0:	2301      	movs	r3, #1
 801a4e2:	e797      	b.n	801a414 <_svfprintf_r+0x774>
 801a4e4:	1d3b      	adds	r3, r7, #4
 801a4e6:	f015 0f10 	tst.w	r5, #16
 801a4ea:	9304      	str	r3, [sp, #16]
 801a4ec:	d001      	beq.n	801a4f2 <_svfprintf_r+0x852>
 801a4ee:	683e      	ldr	r6, [r7, #0]
 801a4f0:	e002      	b.n	801a4f8 <_svfprintf_r+0x858>
 801a4f2:	066a      	lsls	r2, r5, #25
 801a4f4:	d5fb      	bpl.n	801a4ee <_svfprintf_r+0x84e>
 801a4f6:	883e      	ldrh	r6, [r7, #0]
 801a4f8:	2700      	movs	r7, #0
 801a4fa:	e7f1      	b.n	801a4e0 <_svfprintf_r+0x840>
 801a4fc:	b10b      	cbz	r3, 801a502 <_svfprintf_r+0x862>
 801a4fe:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 801a502:	4ba3      	ldr	r3, [pc, #652]	; (801a790 <_svfprintf_r+0xaf0>)
 801a504:	e4c2      	b.n	8019e8c <_svfprintf_r+0x1ec>
 801a506:	1d3b      	adds	r3, r7, #4
 801a508:	f015 0f10 	tst.w	r5, #16
 801a50c:	9304      	str	r3, [sp, #16]
 801a50e:	d001      	beq.n	801a514 <_svfprintf_r+0x874>
 801a510:	683e      	ldr	r6, [r7, #0]
 801a512:	e002      	b.n	801a51a <_svfprintf_r+0x87a>
 801a514:	066e      	lsls	r6, r5, #25
 801a516:	d5fb      	bpl.n	801a510 <_svfprintf_r+0x870>
 801a518:	883e      	ldrh	r6, [r7, #0]
 801a51a:	2700      	movs	r7, #0
 801a51c:	e4c2      	b.n	8019ea4 <_svfprintf_r+0x204>
 801a51e:	4643      	mov	r3, r8
 801a520:	e366      	b.n	801abf0 <_svfprintf_r+0xf50>
 801a522:	2f00      	cmp	r7, #0
 801a524:	bf08      	it	eq
 801a526:	2e0a      	cmpeq	r6, #10
 801a528:	d205      	bcs.n	801a536 <_svfprintf_r+0x896>
 801a52a:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 801a52e:	3630      	adds	r6, #48	; 0x30
 801a530:	f808 6d41 	strb.w	r6, [r8, #-65]!
 801a534:	e377      	b.n	801ac26 <_svfprintf_r+0xf86>
 801a536:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 801a53a:	4630      	mov	r0, r6
 801a53c:	4639      	mov	r1, r7
 801a53e:	220a      	movs	r2, #10
 801a540:	2300      	movs	r3, #0
 801a542:	f7e6 fb2d 	bl	8000ba0 <__aeabi_uldivmod>
 801a546:	3230      	adds	r2, #48	; 0x30
 801a548:	f808 2d01 	strb.w	r2, [r8, #-1]!
 801a54c:	2300      	movs	r3, #0
 801a54e:	4630      	mov	r0, r6
 801a550:	4639      	mov	r1, r7
 801a552:	220a      	movs	r2, #10
 801a554:	f7e6 fb24 	bl	8000ba0 <__aeabi_uldivmod>
 801a558:	4606      	mov	r6, r0
 801a55a:	460f      	mov	r7, r1
 801a55c:	ea56 0307 	orrs.w	r3, r6, r7
 801a560:	d1eb      	bne.n	801a53a <_svfprintf_r+0x89a>
 801a562:	e360      	b.n	801ac26 <_svfprintf_r+0xf86>
 801a564:	2600      	movs	r6, #0
 801a566:	2700      	movs	r7, #0
 801a568:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 801a56c:	f006 030f 	and.w	r3, r6, #15
 801a570:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a572:	5cd3      	ldrb	r3, [r2, r3]
 801a574:	f808 3d01 	strb.w	r3, [r8, #-1]!
 801a578:	0933      	lsrs	r3, r6, #4
 801a57a:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 801a57e:	093a      	lsrs	r2, r7, #4
 801a580:	461e      	mov	r6, r3
 801a582:	4617      	mov	r7, r2
 801a584:	ea56 0307 	orrs.w	r3, r6, r7
 801a588:	d1f0      	bne.n	801a56c <_svfprintf_r+0x8cc>
 801a58a:	e34c      	b.n	801ac26 <_svfprintf_r+0xf86>
 801a58c:	b93b      	cbnz	r3, 801a59e <_svfprintf_r+0x8fe>
 801a58e:	07ea      	lsls	r2, r5, #31
 801a590:	d505      	bpl.n	801a59e <_svfprintf_r+0x8fe>
 801a592:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 801a596:	2330      	movs	r3, #48	; 0x30
 801a598:	f808 3d41 	strb.w	r3, [r8, #-65]!
 801a59c:	e343      	b.n	801ac26 <_svfprintf_r+0xf86>
 801a59e:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 801a5a2:	e340      	b.n	801ac26 <_svfprintf_r+0xf86>
 801a5a4:	b10b      	cbz	r3, 801a5aa <_svfprintf_r+0x90a>
 801a5a6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 801a5aa:	9b02      	ldr	r3, [sp, #8]
 801a5ac:	2b00      	cmp	r3, #0
 801a5ae:	f000 82f7 	beq.w	801aba0 <_svfprintf_r+0xf00>
 801a5b2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801a5b6:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 801a5ba:	2600      	movs	r6, #0
 801a5bc:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 801a5c0:	9704      	str	r7, [sp, #16]
 801a5c2:	e4e8      	b.n	8019f96 <_svfprintf_r+0x2f6>
 801a5c4:	4606      	mov	r6, r0
 801a5c6:	e53f      	b.n	801a048 <_svfprintf_r+0x3a8>
 801a5c8:	2310      	movs	r3, #16
 801a5ca:	6063      	str	r3, [r4, #4]
 801a5cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a5ce:	3310      	adds	r3, #16
 801a5d0:	9321      	str	r3, [sp, #132]	; 0x84
 801a5d2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801a5d4:	3301      	adds	r3, #1
 801a5d6:	2b07      	cmp	r3, #7
 801a5d8:	9320      	str	r3, [sp, #128]	; 0x80
 801a5da:	dc04      	bgt.n	801a5e6 <_svfprintf_r+0x946>
 801a5dc:	3408      	adds	r4, #8
 801a5de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a5e0:	3b10      	subs	r3, #16
 801a5e2:	930c      	str	r3, [sp, #48]	; 0x30
 801a5e4:	e615      	b.n	801a212 <_svfprintf_r+0x572>
 801a5e6:	aa1f      	add	r2, sp, #124	; 0x7c
 801a5e8:	4651      	mov	r1, sl
 801a5ea:	4658      	mov	r0, fp
 801a5ec:	f001 fdba 	bl	801c164 <__ssprint_r>
 801a5f0:	2800      	cmp	r0, #0
 801a5f2:	f040 82b6 	bne.w	801ab62 <_svfprintf_r+0xec2>
 801a5f6:	ac2c      	add	r4, sp, #176	; 0xb0
 801a5f8:	e7f1      	b.n	801a5de <_svfprintf_r+0x93e>
 801a5fa:	aa1f      	add	r2, sp, #124	; 0x7c
 801a5fc:	4651      	mov	r1, sl
 801a5fe:	4658      	mov	r0, fp
 801a600:	f001 fdb0 	bl	801c164 <__ssprint_r>
 801a604:	2800      	cmp	r0, #0
 801a606:	f040 82ac 	bne.w	801ab62 <_svfprintf_r+0xec2>
 801a60a:	ac2c      	add	r4, sp, #176	; 0xb0
 801a60c:	e614      	b.n	801a238 <_svfprintf_r+0x598>
 801a60e:	aa1f      	add	r2, sp, #124	; 0x7c
 801a610:	4651      	mov	r1, sl
 801a612:	4658      	mov	r0, fp
 801a614:	f001 fda6 	bl	801c164 <__ssprint_r>
 801a618:	2800      	cmp	r0, #0
 801a61a:	f040 82a2 	bne.w	801ab62 <_svfprintf_r+0xec2>
 801a61e:	ac2c      	add	r4, sp, #176	; 0xb0
 801a620:	e61c      	b.n	801a25c <_svfprintf_r+0x5bc>
 801a622:	aa1f      	add	r2, sp, #124	; 0x7c
 801a624:	4651      	mov	r1, sl
 801a626:	4658      	mov	r0, fp
 801a628:	f001 fd9c 	bl	801c164 <__ssprint_r>
 801a62c:	2800      	cmp	r0, #0
 801a62e:	f040 8298 	bne.w	801ab62 <_svfprintf_r+0xec2>
 801a632:	ac2c      	add	r4, sp, #176	; 0xb0
 801a634:	e622      	b.n	801a27c <_svfprintf_r+0x5dc>
 801a636:	2210      	movs	r2, #16
 801a638:	6062      	str	r2, [r4, #4]
 801a63a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a63c:	3210      	adds	r2, #16
 801a63e:	9221      	str	r2, [sp, #132]	; 0x84
 801a640:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801a642:	3201      	adds	r2, #1
 801a644:	2a07      	cmp	r2, #7
 801a646:	9220      	str	r2, [sp, #128]	; 0x80
 801a648:	dc02      	bgt.n	801a650 <_svfprintf_r+0x9b0>
 801a64a:	3408      	adds	r4, #8
 801a64c:	3b10      	subs	r3, #16
 801a64e:	e61d      	b.n	801a28c <_svfprintf_r+0x5ec>
 801a650:	aa1f      	add	r2, sp, #124	; 0x7c
 801a652:	4651      	mov	r1, sl
 801a654:	4658      	mov	r0, fp
 801a656:	930c      	str	r3, [sp, #48]	; 0x30
 801a658:	f001 fd84 	bl	801c164 <__ssprint_r>
 801a65c:	2800      	cmp	r0, #0
 801a65e:	f040 8280 	bne.w	801ab62 <_svfprintf_r+0xec2>
 801a662:	ac2c      	add	r4, sp, #176	; 0xb0
 801a664:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a666:	e7f1      	b.n	801a64c <_svfprintf_r+0x9ac>
 801a668:	aa1f      	add	r2, sp, #124	; 0x7c
 801a66a:	4651      	mov	r1, sl
 801a66c:	4658      	mov	r0, fp
 801a66e:	f001 fd79 	bl	801c164 <__ssprint_r>
 801a672:	2800      	cmp	r0, #0
 801a674:	f040 8275 	bne.w	801ab62 <_svfprintf_r+0xec2>
 801a678:	ac2c      	add	r4, sp, #176	; 0xb0
 801a67a:	e617      	b.n	801a2ac <_svfprintf_r+0x60c>
 801a67c:	2310      	movs	r3, #16
 801a67e:	6063      	str	r3, [r4, #4]
 801a680:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a682:	3310      	adds	r3, #16
 801a684:	9321      	str	r3, [sp, #132]	; 0x84
 801a686:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801a688:	3301      	adds	r3, #1
 801a68a:	2b07      	cmp	r3, #7
 801a68c:	9320      	str	r3, [sp, #128]	; 0x80
 801a68e:	dc02      	bgt.n	801a696 <_svfprintf_r+0x9f6>
 801a690:	3408      	adds	r4, #8
 801a692:	3e10      	subs	r6, #16
 801a694:	e60e      	b.n	801a2b4 <_svfprintf_r+0x614>
 801a696:	aa1f      	add	r2, sp, #124	; 0x7c
 801a698:	4651      	mov	r1, sl
 801a69a:	4658      	mov	r0, fp
 801a69c:	f001 fd62 	bl	801c164 <__ssprint_r>
 801a6a0:	2800      	cmp	r0, #0
 801a6a2:	f040 825e 	bne.w	801ab62 <_svfprintf_r+0xec2>
 801a6a6:	ac2c      	add	r4, sp, #176	; 0xb0
 801a6a8:	e7f3      	b.n	801a692 <_svfprintf_r+0x9f2>
 801a6aa:	aa1f      	add	r2, sp, #124	; 0x7c
 801a6ac:	4651      	mov	r1, sl
 801a6ae:	4658      	mov	r0, fp
 801a6b0:	f001 fd58 	bl	801c164 <__ssprint_r>
 801a6b4:	2800      	cmp	r0, #0
 801a6b6:	f040 8254 	bne.w	801ab62 <_svfprintf_r+0xec2>
 801a6ba:	ac2c      	add	r4, sp, #176	; 0xb0
 801a6bc:	e60a      	b.n	801a2d4 <_svfprintf_r+0x634>
 801a6be:	9b02      	ldr	r3, [sp, #8]
 801a6c0:	2b65      	cmp	r3, #101	; 0x65
 801a6c2:	f340 81a9 	ble.w	801aa18 <_svfprintf_r+0xd78>
 801a6c6:	2200      	movs	r2, #0
 801a6c8:	2300      	movs	r3, #0
 801a6ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a6ce:	f7e6 f9f7 	bl	8000ac0 <__aeabi_dcmpeq>
 801a6d2:	2800      	cmp	r0, #0
 801a6d4:	d062      	beq.n	801a79c <_svfprintf_r+0xafc>
 801a6d6:	4b2f      	ldr	r3, [pc, #188]	; (801a794 <_svfprintf_r+0xaf4>)
 801a6d8:	6023      	str	r3, [r4, #0]
 801a6da:	2301      	movs	r3, #1
 801a6dc:	6063      	str	r3, [r4, #4]
 801a6de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a6e0:	3301      	adds	r3, #1
 801a6e2:	9321      	str	r3, [sp, #132]	; 0x84
 801a6e4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801a6e6:	3301      	adds	r3, #1
 801a6e8:	2b07      	cmp	r3, #7
 801a6ea:	9320      	str	r3, [sp, #128]	; 0x80
 801a6ec:	dc25      	bgt.n	801a73a <_svfprintf_r+0xa9a>
 801a6ee:	3408      	adds	r4, #8
 801a6f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a6f2:	9a03      	ldr	r2, [sp, #12]
 801a6f4:	4293      	cmp	r3, r2
 801a6f6:	db02      	blt.n	801a6fe <_svfprintf_r+0xa5e>
 801a6f8:	07ee      	lsls	r6, r5, #31
 801a6fa:	f57f ae02 	bpl.w	801a302 <_svfprintf_r+0x662>
 801a6fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a700:	6023      	str	r3, [r4, #0]
 801a702:	9b08      	ldr	r3, [sp, #32]
 801a704:	6063      	str	r3, [r4, #4]
 801a706:	9a08      	ldr	r2, [sp, #32]
 801a708:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a70a:	4413      	add	r3, r2
 801a70c:	9321      	str	r3, [sp, #132]	; 0x84
 801a70e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801a710:	3301      	adds	r3, #1
 801a712:	2b07      	cmp	r3, #7
 801a714:	9320      	str	r3, [sp, #128]	; 0x80
 801a716:	dc1a      	bgt.n	801a74e <_svfprintf_r+0xaae>
 801a718:	3408      	adds	r4, #8
 801a71a:	9b03      	ldr	r3, [sp, #12]
 801a71c:	1e5e      	subs	r6, r3, #1
 801a71e:	2e00      	cmp	r6, #0
 801a720:	f77f adef 	ble.w	801a302 <_svfprintf_r+0x662>
 801a724:	4f1c      	ldr	r7, [pc, #112]	; (801a798 <_svfprintf_r+0xaf8>)
 801a726:	f04f 0810 	mov.w	r8, #16
 801a72a:	2e10      	cmp	r6, #16
 801a72c:	6027      	str	r7, [r4, #0]
 801a72e:	dc18      	bgt.n	801a762 <_svfprintf_r+0xac2>
 801a730:	6066      	str	r6, [r4, #4]
 801a732:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a734:	441e      	add	r6, r3
 801a736:	9621      	str	r6, [sp, #132]	; 0x84
 801a738:	e5d4      	b.n	801a2e4 <_svfprintf_r+0x644>
 801a73a:	aa1f      	add	r2, sp, #124	; 0x7c
 801a73c:	4651      	mov	r1, sl
 801a73e:	4658      	mov	r0, fp
 801a740:	f001 fd10 	bl	801c164 <__ssprint_r>
 801a744:	2800      	cmp	r0, #0
 801a746:	f040 820c 	bne.w	801ab62 <_svfprintf_r+0xec2>
 801a74a:	ac2c      	add	r4, sp, #176	; 0xb0
 801a74c:	e7d0      	b.n	801a6f0 <_svfprintf_r+0xa50>
 801a74e:	aa1f      	add	r2, sp, #124	; 0x7c
 801a750:	4651      	mov	r1, sl
 801a752:	4658      	mov	r0, fp
 801a754:	f001 fd06 	bl	801c164 <__ssprint_r>
 801a758:	2800      	cmp	r0, #0
 801a75a:	f040 8202 	bne.w	801ab62 <_svfprintf_r+0xec2>
 801a75e:	ac2c      	add	r4, sp, #176	; 0xb0
 801a760:	e7db      	b.n	801a71a <_svfprintf_r+0xa7a>
 801a762:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a764:	f8c4 8004 	str.w	r8, [r4, #4]
 801a768:	3310      	adds	r3, #16
 801a76a:	9321      	str	r3, [sp, #132]	; 0x84
 801a76c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801a76e:	3301      	adds	r3, #1
 801a770:	2b07      	cmp	r3, #7
 801a772:	9320      	str	r3, [sp, #128]	; 0x80
 801a774:	dc02      	bgt.n	801a77c <_svfprintf_r+0xadc>
 801a776:	3408      	adds	r4, #8
 801a778:	3e10      	subs	r6, #16
 801a77a:	e7d6      	b.n	801a72a <_svfprintf_r+0xa8a>
 801a77c:	aa1f      	add	r2, sp, #124	; 0x7c
 801a77e:	4651      	mov	r1, sl
 801a780:	4658      	mov	r0, fp
 801a782:	f001 fcef 	bl	801c164 <__ssprint_r>
 801a786:	2800      	cmp	r0, #0
 801a788:	f040 81eb 	bne.w	801ab62 <_svfprintf_r+0xec2>
 801a78c:	ac2c      	add	r4, sp, #176	; 0xb0
 801a78e:	e7f3      	b.n	801a778 <_svfprintf_r+0xad8>
 801a790:	080ec44f 	.word	0x080ec44f
 801a794:	0802b64b 	.word	0x0802b64b
 801a798:	080ec470 	.word	0x080ec470
 801a79c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a79e:	2b00      	cmp	r3, #0
 801a7a0:	dc7a      	bgt.n	801a898 <_svfprintf_r+0xbf8>
 801a7a2:	4b9b      	ldr	r3, [pc, #620]	; (801aa10 <_svfprintf_r+0xd70>)
 801a7a4:	6023      	str	r3, [r4, #0]
 801a7a6:	2301      	movs	r3, #1
 801a7a8:	6063      	str	r3, [r4, #4]
 801a7aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a7ac:	3301      	adds	r3, #1
 801a7ae:	9321      	str	r3, [sp, #132]	; 0x84
 801a7b0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801a7b2:	3301      	adds	r3, #1
 801a7b4:	2b07      	cmp	r3, #7
 801a7b6:	9320      	str	r3, [sp, #128]	; 0x80
 801a7b8:	dc44      	bgt.n	801a844 <_svfprintf_r+0xba4>
 801a7ba:	3408      	adds	r4, #8
 801a7bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a7be:	b923      	cbnz	r3, 801a7ca <_svfprintf_r+0xb2a>
 801a7c0:	9b03      	ldr	r3, [sp, #12]
 801a7c2:	b913      	cbnz	r3, 801a7ca <_svfprintf_r+0xb2a>
 801a7c4:	07e8      	lsls	r0, r5, #31
 801a7c6:	f57f ad9c 	bpl.w	801a302 <_svfprintf_r+0x662>
 801a7ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a7cc:	6023      	str	r3, [r4, #0]
 801a7ce:	9b08      	ldr	r3, [sp, #32]
 801a7d0:	6063      	str	r3, [r4, #4]
 801a7d2:	9a08      	ldr	r2, [sp, #32]
 801a7d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a7d6:	4413      	add	r3, r2
 801a7d8:	9321      	str	r3, [sp, #132]	; 0x84
 801a7da:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801a7dc:	3301      	adds	r3, #1
 801a7de:	2b07      	cmp	r3, #7
 801a7e0:	9320      	str	r3, [sp, #128]	; 0x80
 801a7e2:	dc39      	bgt.n	801a858 <_svfprintf_r+0xbb8>
 801a7e4:	f104 0308 	add.w	r3, r4, #8
 801a7e8:	9e19      	ldr	r6, [sp, #100]	; 0x64
 801a7ea:	2e00      	cmp	r6, #0
 801a7ec:	da19      	bge.n	801a822 <_svfprintf_r+0xb82>
 801a7ee:	4f89      	ldr	r7, [pc, #548]	; (801aa14 <_svfprintf_r+0xd74>)
 801a7f0:	4276      	negs	r6, r6
 801a7f2:	2410      	movs	r4, #16
 801a7f4:	2e10      	cmp	r6, #16
 801a7f6:	601f      	str	r7, [r3, #0]
 801a7f8:	dc38      	bgt.n	801a86c <_svfprintf_r+0xbcc>
 801a7fa:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a7fc:	605e      	str	r6, [r3, #4]
 801a7fe:	4416      	add	r6, r2
 801a800:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801a802:	9621      	str	r6, [sp, #132]	; 0x84
 801a804:	3201      	adds	r2, #1
 801a806:	2a07      	cmp	r2, #7
 801a808:	f103 0308 	add.w	r3, r3, #8
 801a80c:	9220      	str	r2, [sp, #128]	; 0x80
 801a80e:	dd08      	ble.n	801a822 <_svfprintf_r+0xb82>
 801a810:	aa1f      	add	r2, sp, #124	; 0x7c
 801a812:	4651      	mov	r1, sl
 801a814:	4658      	mov	r0, fp
 801a816:	f001 fca5 	bl	801c164 <__ssprint_r>
 801a81a:	2800      	cmp	r0, #0
 801a81c:	f040 81a1 	bne.w	801ab62 <_svfprintf_r+0xec2>
 801a820:	ab2c      	add	r3, sp, #176	; 0xb0
 801a822:	9a03      	ldr	r2, [sp, #12]
 801a824:	605a      	str	r2, [r3, #4]
 801a826:	9903      	ldr	r1, [sp, #12]
 801a828:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a82a:	f8c3 8000 	str.w	r8, [r3]
 801a82e:	440a      	add	r2, r1
 801a830:	9221      	str	r2, [sp, #132]	; 0x84
 801a832:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801a834:	3201      	adds	r2, #1
 801a836:	2a07      	cmp	r2, #7
 801a838:	9220      	str	r2, [sp, #128]	; 0x80
 801a83a:	f73f ad59 	bgt.w	801a2f0 <_svfprintf_r+0x650>
 801a83e:	f103 0408 	add.w	r4, r3, #8
 801a842:	e55e      	b.n	801a302 <_svfprintf_r+0x662>
 801a844:	aa1f      	add	r2, sp, #124	; 0x7c
 801a846:	4651      	mov	r1, sl
 801a848:	4658      	mov	r0, fp
 801a84a:	f001 fc8b 	bl	801c164 <__ssprint_r>
 801a84e:	2800      	cmp	r0, #0
 801a850:	f040 8187 	bne.w	801ab62 <_svfprintf_r+0xec2>
 801a854:	ac2c      	add	r4, sp, #176	; 0xb0
 801a856:	e7b1      	b.n	801a7bc <_svfprintf_r+0xb1c>
 801a858:	aa1f      	add	r2, sp, #124	; 0x7c
 801a85a:	4651      	mov	r1, sl
 801a85c:	4658      	mov	r0, fp
 801a85e:	f001 fc81 	bl	801c164 <__ssprint_r>
 801a862:	2800      	cmp	r0, #0
 801a864:	f040 817d 	bne.w	801ab62 <_svfprintf_r+0xec2>
 801a868:	ab2c      	add	r3, sp, #176	; 0xb0
 801a86a:	e7bd      	b.n	801a7e8 <_svfprintf_r+0xb48>
 801a86c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a86e:	605c      	str	r4, [r3, #4]
 801a870:	3210      	adds	r2, #16
 801a872:	9221      	str	r2, [sp, #132]	; 0x84
 801a874:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801a876:	3201      	adds	r2, #1
 801a878:	2a07      	cmp	r2, #7
 801a87a:	9220      	str	r2, [sp, #128]	; 0x80
 801a87c:	dc02      	bgt.n	801a884 <_svfprintf_r+0xbe4>
 801a87e:	3308      	adds	r3, #8
 801a880:	3e10      	subs	r6, #16
 801a882:	e7b7      	b.n	801a7f4 <_svfprintf_r+0xb54>
 801a884:	aa1f      	add	r2, sp, #124	; 0x7c
 801a886:	4651      	mov	r1, sl
 801a888:	4658      	mov	r0, fp
 801a88a:	f001 fc6b 	bl	801c164 <__ssprint_r>
 801a88e:	2800      	cmp	r0, #0
 801a890:	f040 8167 	bne.w	801ab62 <_svfprintf_r+0xec2>
 801a894:	ab2c      	add	r3, sp, #176	; 0xb0
 801a896:	e7f3      	b.n	801a880 <_svfprintf_r+0xbe0>
 801a898:	9b03      	ldr	r3, [sp, #12]
 801a89a:	42bb      	cmp	r3, r7
 801a89c:	bfa8      	it	ge
 801a89e:	463b      	movge	r3, r7
 801a8a0:	2b00      	cmp	r3, #0
 801a8a2:	461e      	mov	r6, r3
 801a8a4:	dd0b      	ble.n	801a8be <_svfprintf_r+0xc1e>
 801a8a6:	6063      	str	r3, [r4, #4]
 801a8a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a8aa:	f8c4 8000 	str.w	r8, [r4]
 801a8ae:	4433      	add	r3, r6
 801a8b0:	9321      	str	r3, [sp, #132]	; 0x84
 801a8b2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801a8b4:	3301      	adds	r3, #1
 801a8b6:	2b07      	cmp	r3, #7
 801a8b8:	9320      	str	r3, [sp, #128]	; 0x80
 801a8ba:	dc5f      	bgt.n	801a97c <_svfprintf_r+0xcdc>
 801a8bc:	3408      	adds	r4, #8
 801a8be:	2e00      	cmp	r6, #0
 801a8c0:	bfac      	ite	ge
 801a8c2:	1bbe      	subge	r6, r7, r6
 801a8c4:	463e      	movlt	r6, r7
 801a8c6:	2e00      	cmp	r6, #0
 801a8c8:	dd0f      	ble.n	801a8ea <_svfprintf_r+0xc4a>
 801a8ca:	f8df 9148 	ldr.w	r9, [pc, #328]	; 801aa14 <_svfprintf_r+0xd74>
 801a8ce:	f8c4 9000 	str.w	r9, [r4]
 801a8d2:	2e10      	cmp	r6, #16
 801a8d4:	dc5c      	bgt.n	801a990 <_svfprintf_r+0xcf0>
 801a8d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a8d8:	6066      	str	r6, [r4, #4]
 801a8da:	441e      	add	r6, r3
 801a8dc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801a8de:	9621      	str	r6, [sp, #132]	; 0x84
 801a8e0:	3301      	adds	r3, #1
 801a8e2:	2b07      	cmp	r3, #7
 801a8e4:	9320      	str	r3, [sp, #128]	; 0x80
 801a8e6:	dc6a      	bgt.n	801a9be <_svfprintf_r+0xd1e>
 801a8e8:	3408      	adds	r4, #8
 801a8ea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a8ec:	9a03      	ldr	r2, [sp, #12]
 801a8ee:	4293      	cmp	r3, r2
 801a8f0:	db01      	blt.n	801a8f6 <_svfprintf_r+0xc56>
 801a8f2:	07e9      	lsls	r1, r5, #31
 801a8f4:	d50d      	bpl.n	801a912 <_svfprintf_r+0xc72>
 801a8f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a8f8:	6023      	str	r3, [r4, #0]
 801a8fa:	9b08      	ldr	r3, [sp, #32]
 801a8fc:	6063      	str	r3, [r4, #4]
 801a8fe:	9a08      	ldr	r2, [sp, #32]
 801a900:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a902:	4413      	add	r3, r2
 801a904:	9321      	str	r3, [sp, #132]	; 0x84
 801a906:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801a908:	3301      	adds	r3, #1
 801a90a:	2b07      	cmp	r3, #7
 801a90c:	9320      	str	r3, [sp, #128]	; 0x80
 801a90e:	dc60      	bgt.n	801a9d2 <_svfprintf_r+0xd32>
 801a910:	3408      	adds	r4, #8
 801a912:	9b03      	ldr	r3, [sp, #12]
 801a914:	9a03      	ldr	r2, [sp, #12]
 801a916:	1bde      	subs	r6, r3, r7
 801a918:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a91a:	1ad3      	subs	r3, r2, r3
 801a91c:	429e      	cmp	r6, r3
 801a91e:	bfa8      	it	ge
 801a920:	461e      	movge	r6, r3
 801a922:	2e00      	cmp	r6, #0
 801a924:	dd0b      	ble.n	801a93e <_svfprintf_r+0xc9e>
 801a926:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a928:	6066      	str	r6, [r4, #4]
 801a92a:	4433      	add	r3, r6
 801a92c:	9321      	str	r3, [sp, #132]	; 0x84
 801a92e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801a930:	3301      	adds	r3, #1
 801a932:	4447      	add	r7, r8
 801a934:	2b07      	cmp	r3, #7
 801a936:	6027      	str	r7, [r4, #0]
 801a938:	9320      	str	r3, [sp, #128]	; 0x80
 801a93a:	dc54      	bgt.n	801a9e6 <_svfprintf_r+0xd46>
 801a93c:	3408      	adds	r4, #8
 801a93e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a940:	9a03      	ldr	r2, [sp, #12]
 801a942:	2e00      	cmp	r6, #0
 801a944:	eba2 0303 	sub.w	r3, r2, r3
 801a948:	bfac      	ite	ge
 801a94a:	1b9e      	subge	r6, r3, r6
 801a94c:	461e      	movlt	r6, r3
 801a94e:	2e00      	cmp	r6, #0
 801a950:	f77f acd7 	ble.w	801a302 <_svfprintf_r+0x662>
 801a954:	4f2f      	ldr	r7, [pc, #188]	; (801aa14 <_svfprintf_r+0xd74>)
 801a956:	f04f 0810 	mov.w	r8, #16
 801a95a:	2e10      	cmp	r6, #16
 801a95c:	6027      	str	r7, [r4, #0]
 801a95e:	f77f aee7 	ble.w	801a730 <_svfprintf_r+0xa90>
 801a962:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a964:	f8c4 8004 	str.w	r8, [r4, #4]
 801a968:	3310      	adds	r3, #16
 801a96a:	9321      	str	r3, [sp, #132]	; 0x84
 801a96c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801a96e:	3301      	adds	r3, #1
 801a970:	2b07      	cmp	r3, #7
 801a972:	9320      	str	r3, [sp, #128]	; 0x80
 801a974:	dc41      	bgt.n	801a9fa <_svfprintf_r+0xd5a>
 801a976:	3408      	adds	r4, #8
 801a978:	3e10      	subs	r6, #16
 801a97a:	e7ee      	b.n	801a95a <_svfprintf_r+0xcba>
 801a97c:	aa1f      	add	r2, sp, #124	; 0x7c
 801a97e:	4651      	mov	r1, sl
 801a980:	4658      	mov	r0, fp
 801a982:	f001 fbef 	bl	801c164 <__ssprint_r>
 801a986:	2800      	cmp	r0, #0
 801a988:	f040 80eb 	bne.w	801ab62 <_svfprintf_r+0xec2>
 801a98c:	ac2c      	add	r4, sp, #176	; 0xb0
 801a98e:	e796      	b.n	801a8be <_svfprintf_r+0xc1e>
 801a990:	2310      	movs	r3, #16
 801a992:	6063      	str	r3, [r4, #4]
 801a994:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a996:	3310      	adds	r3, #16
 801a998:	9321      	str	r3, [sp, #132]	; 0x84
 801a99a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801a99c:	3301      	adds	r3, #1
 801a99e:	2b07      	cmp	r3, #7
 801a9a0:	9320      	str	r3, [sp, #128]	; 0x80
 801a9a2:	dc02      	bgt.n	801a9aa <_svfprintf_r+0xd0a>
 801a9a4:	3408      	adds	r4, #8
 801a9a6:	3e10      	subs	r6, #16
 801a9a8:	e791      	b.n	801a8ce <_svfprintf_r+0xc2e>
 801a9aa:	aa1f      	add	r2, sp, #124	; 0x7c
 801a9ac:	4651      	mov	r1, sl
 801a9ae:	4658      	mov	r0, fp
 801a9b0:	f001 fbd8 	bl	801c164 <__ssprint_r>
 801a9b4:	2800      	cmp	r0, #0
 801a9b6:	f040 80d4 	bne.w	801ab62 <_svfprintf_r+0xec2>
 801a9ba:	ac2c      	add	r4, sp, #176	; 0xb0
 801a9bc:	e7f3      	b.n	801a9a6 <_svfprintf_r+0xd06>
 801a9be:	aa1f      	add	r2, sp, #124	; 0x7c
 801a9c0:	4651      	mov	r1, sl
 801a9c2:	4658      	mov	r0, fp
 801a9c4:	f001 fbce 	bl	801c164 <__ssprint_r>
 801a9c8:	2800      	cmp	r0, #0
 801a9ca:	f040 80ca 	bne.w	801ab62 <_svfprintf_r+0xec2>
 801a9ce:	ac2c      	add	r4, sp, #176	; 0xb0
 801a9d0:	e78b      	b.n	801a8ea <_svfprintf_r+0xc4a>
 801a9d2:	aa1f      	add	r2, sp, #124	; 0x7c
 801a9d4:	4651      	mov	r1, sl
 801a9d6:	4658      	mov	r0, fp
 801a9d8:	f001 fbc4 	bl	801c164 <__ssprint_r>
 801a9dc:	2800      	cmp	r0, #0
 801a9de:	f040 80c0 	bne.w	801ab62 <_svfprintf_r+0xec2>
 801a9e2:	ac2c      	add	r4, sp, #176	; 0xb0
 801a9e4:	e795      	b.n	801a912 <_svfprintf_r+0xc72>
 801a9e6:	aa1f      	add	r2, sp, #124	; 0x7c
 801a9e8:	4651      	mov	r1, sl
 801a9ea:	4658      	mov	r0, fp
 801a9ec:	f001 fbba 	bl	801c164 <__ssprint_r>
 801a9f0:	2800      	cmp	r0, #0
 801a9f2:	f040 80b6 	bne.w	801ab62 <_svfprintf_r+0xec2>
 801a9f6:	ac2c      	add	r4, sp, #176	; 0xb0
 801a9f8:	e7a1      	b.n	801a93e <_svfprintf_r+0xc9e>
 801a9fa:	aa1f      	add	r2, sp, #124	; 0x7c
 801a9fc:	4651      	mov	r1, sl
 801a9fe:	4658      	mov	r0, fp
 801aa00:	f001 fbb0 	bl	801c164 <__ssprint_r>
 801aa04:	2800      	cmp	r0, #0
 801aa06:	f040 80ac 	bne.w	801ab62 <_svfprintf_r+0xec2>
 801aa0a:	ac2c      	add	r4, sp, #176	; 0xb0
 801aa0c:	e7b4      	b.n	801a978 <_svfprintf_r+0xcd8>
 801aa0e:	bf00      	nop
 801aa10:	0802b64b 	.word	0x0802b64b
 801aa14:	080ec470 	.word	0x080ec470
 801aa18:	9b03      	ldr	r3, [sp, #12]
 801aa1a:	2b01      	cmp	r3, #1
 801aa1c:	dc01      	bgt.n	801aa22 <_svfprintf_r+0xd82>
 801aa1e:	07ea      	lsls	r2, r5, #31
 801aa20:	d576      	bpl.n	801ab10 <_svfprintf_r+0xe70>
 801aa22:	2301      	movs	r3, #1
 801aa24:	6063      	str	r3, [r4, #4]
 801aa26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801aa28:	f8c4 8000 	str.w	r8, [r4]
 801aa2c:	3301      	adds	r3, #1
 801aa2e:	9321      	str	r3, [sp, #132]	; 0x84
 801aa30:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801aa32:	3301      	adds	r3, #1
 801aa34:	2b07      	cmp	r3, #7
 801aa36:	9320      	str	r3, [sp, #128]	; 0x80
 801aa38:	dc36      	bgt.n	801aaa8 <_svfprintf_r+0xe08>
 801aa3a:	3408      	adds	r4, #8
 801aa3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801aa3e:	6023      	str	r3, [r4, #0]
 801aa40:	9b08      	ldr	r3, [sp, #32]
 801aa42:	6063      	str	r3, [r4, #4]
 801aa44:	9a08      	ldr	r2, [sp, #32]
 801aa46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801aa48:	4413      	add	r3, r2
 801aa4a:	9321      	str	r3, [sp, #132]	; 0x84
 801aa4c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801aa4e:	3301      	adds	r3, #1
 801aa50:	2b07      	cmp	r3, #7
 801aa52:	9320      	str	r3, [sp, #128]	; 0x80
 801aa54:	dc31      	bgt.n	801aaba <_svfprintf_r+0xe1a>
 801aa56:	3408      	adds	r4, #8
 801aa58:	2300      	movs	r3, #0
 801aa5a:	2200      	movs	r2, #0
 801aa5c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801aa60:	f7e6 f82e 	bl	8000ac0 <__aeabi_dcmpeq>
 801aa64:	9b03      	ldr	r3, [sp, #12]
 801aa66:	1e5e      	subs	r6, r3, #1
 801aa68:	2800      	cmp	r0, #0
 801aa6a:	d12f      	bne.n	801aacc <_svfprintf_r+0xe2c>
 801aa6c:	f108 0301 	add.w	r3, r8, #1
 801aa70:	e884 0048 	stmia.w	r4, {r3, r6}
 801aa74:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801aa76:	9a03      	ldr	r2, [sp, #12]
 801aa78:	3b01      	subs	r3, #1
 801aa7a:	4413      	add	r3, r2
 801aa7c:	9321      	str	r3, [sp, #132]	; 0x84
 801aa7e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801aa80:	3301      	adds	r3, #1
 801aa82:	2b07      	cmp	r3, #7
 801aa84:	9320      	str	r3, [sp, #128]	; 0x80
 801aa86:	dd4a      	ble.n	801ab1e <_svfprintf_r+0xe7e>
 801aa88:	aa1f      	add	r2, sp, #124	; 0x7c
 801aa8a:	4651      	mov	r1, sl
 801aa8c:	4658      	mov	r0, fp
 801aa8e:	f001 fb69 	bl	801c164 <__ssprint_r>
 801aa92:	2800      	cmp	r0, #0
 801aa94:	d165      	bne.n	801ab62 <_svfprintf_r+0xec2>
 801aa96:	ac2c      	add	r4, sp, #176	; 0xb0
 801aa98:	ab1b      	add	r3, sp, #108	; 0x6c
 801aa9a:	6023      	str	r3, [r4, #0]
 801aa9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801aa9e:	6063      	str	r3, [r4, #4]
 801aaa0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801aaa2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801aaa4:	4413      	add	r3, r2
 801aaa6:	e41c      	b.n	801a2e2 <_svfprintf_r+0x642>
 801aaa8:	aa1f      	add	r2, sp, #124	; 0x7c
 801aaaa:	4651      	mov	r1, sl
 801aaac:	4658      	mov	r0, fp
 801aaae:	f001 fb59 	bl	801c164 <__ssprint_r>
 801aab2:	2800      	cmp	r0, #0
 801aab4:	d155      	bne.n	801ab62 <_svfprintf_r+0xec2>
 801aab6:	ac2c      	add	r4, sp, #176	; 0xb0
 801aab8:	e7c0      	b.n	801aa3c <_svfprintf_r+0xd9c>
 801aaba:	aa1f      	add	r2, sp, #124	; 0x7c
 801aabc:	4651      	mov	r1, sl
 801aabe:	4658      	mov	r0, fp
 801aac0:	f001 fb50 	bl	801c164 <__ssprint_r>
 801aac4:	2800      	cmp	r0, #0
 801aac6:	d14c      	bne.n	801ab62 <_svfprintf_r+0xec2>
 801aac8:	ac2c      	add	r4, sp, #176	; 0xb0
 801aaca:	e7c5      	b.n	801aa58 <_svfprintf_r+0xdb8>
 801aacc:	2e00      	cmp	r6, #0
 801aace:	dde3      	ble.n	801aa98 <_svfprintf_r+0xdf8>
 801aad0:	4f59      	ldr	r7, [pc, #356]	; (801ac38 <_svfprintf_r+0xf98>)
 801aad2:	f04f 0810 	mov.w	r8, #16
 801aad6:	2e10      	cmp	r6, #16
 801aad8:	6027      	str	r7, [r4, #0]
 801aada:	dc04      	bgt.n	801aae6 <_svfprintf_r+0xe46>
 801aadc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801aade:	6066      	str	r6, [r4, #4]
 801aae0:	441e      	add	r6, r3
 801aae2:	9621      	str	r6, [sp, #132]	; 0x84
 801aae4:	e7cb      	b.n	801aa7e <_svfprintf_r+0xdde>
 801aae6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801aae8:	f8c4 8004 	str.w	r8, [r4, #4]
 801aaec:	3310      	adds	r3, #16
 801aaee:	9321      	str	r3, [sp, #132]	; 0x84
 801aaf0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801aaf2:	3301      	adds	r3, #1
 801aaf4:	2b07      	cmp	r3, #7
 801aaf6:	9320      	str	r3, [sp, #128]	; 0x80
 801aaf8:	dc02      	bgt.n	801ab00 <_svfprintf_r+0xe60>
 801aafa:	3408      	adds	r4, #8
 801aafc:	3e10      	subs	r6, #16
 801aafe:	e7ea      	b.n	801aad6 <_svfprintf_r+0xe36>
 801ab00:	aa1f      	add	r2, sp, #124	; 0x7c
 801ab02:	4651      	mov	r1, sl
 801ab04:	4658      	mov	r0, fp
 801ab06:	f001 fb2d 	bl	801c164 <__ssprint_r>
 801ab0a:	bb50      	cbnz	r0, 801ab62 <_svfprintf_r+0xec2>
 801ab0c:	ac2c      	add	r4, sp, #176	; 0xb0
 801ab0e:	e7f5      	b.n	801aafc <_svfprintf_r+0xe5c>
 801ab10:	2301      	movs	r3, #1
 801ab12:	6063      	str	r3, [r4, #4]
 801ab14:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ab16:	f8c4 8000 	str.w	r8, [r4]
 801ab1a:	3301      	adds	r3, #1
 801ab1c:	e7ae      	b.n	801aa7c <_svfprintf_r+0xddc>
 801ab1e:	3408      	adds	r4, #8
 801ab20:	e7ba      	b.n	801aa98 <_svfprintf_r+0xdf8>
 801ab22:	3408      	adds	r4, #8
 801ab24:	f7ff bbed 	b.w	801a302 <_svfprintf_r+0x662>
 801ab28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ab2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ab2c:	1a9d      	subs	r5, r3, r2
 801ab2e:	2d00      	cmp	r5, #0
 801ab30:	f77f abea 	ble.w	801a308 <_svfprintf_r+0x668>
 801ab34:	2610      	movs	r6, #16
 801ab36:	4b41      	ldr	r3, [pc, #260]	; (801ac3c <_svfprintf_r+0xf9c>)
 801ab38:	6023      	str	r3, [r4, #0]
 801ab3a:	2d10      	cmp	r5, #16
 801ab3c:	dc1b      	bgt.n	801ab76 <_svfprintf_r+0xed6>
 801ab3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ab40:	6065      	str	r5, [r4, #4]
 801ab42:	441d      	add	r5, r3
 801ab44:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801ab46:	9521      	str	r5, [sp, #132]	; 0x84
 801ab48:	3301      	adds	r3, #1
 801ab4a:	2b07      	cmp	r3, #7
 801ab4c:	9320      	str	r3, [sp, #128]	; 0x80
 801ab4e:	f77f abdb 	ble.w	801a308 <_svfprintf_r+0x668>
 801ab52:	aa1f      	add	r2, sp, #124	; 0x7c
 801ab54:	4651      	mov	r1, sl
 801ab56:	4658      	mov	r0, fp
 801ab58:	f001 fb04 	bl	801c164 <__ssprint_r>
 801ab5c:	2800      	cmp	r0, #0
 801ab5e:	f43f abd3 	beq.w	801a308 <_svfprintf_r+0x668>
 801ab62:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801ab66:	f013 0f40 	tst.w	r3, #64	; 0x40
 801ab6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ab6c:	bf18      	it	ne
 801ab6e:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 801ab72:	f7ff b8b9 	b.w	8019ce8 <_svfprintf_r+0x48>
 801ab76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ab78:	6066      	str	r6, [r4, #4]
 801ab7a:	3310      	adds	r3, #16
 801ab7c:	9321      	str	r3, [sp, #132]	; 0x84
 801ab7e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801ab80:	3301      	adds	r3, #1
 801ab82:	2b07      	cmp	r3, #7
 801ab84:	9320      	str	r3, [sp, #128]	; 0x80
 801ab86:	dc02      	bgt.n	801ab8e <_svfprintf_r+0xeee>
 801ab88:	3408      	adds	r4, #8
 801ab8a:	3d10      	subs	r5, #16
 801ab8c:	e7d3      	b.n	801ab36 <_svfprintf_r+0xe96>
 801ab8e:	aa1f      	add	r2, sp, #124	; 0x7c
 801ab90:	4651      	mov	r1, sl
 801ab92:	4658      	mov	r0, fp
 801ab94:	f001 fae6 	bl	801c164 <__ssprint_r>
 801ab98:	2800      	cmp	r0, #0
 801ab9a:	d1e2      	bne.n	801ab62 <_svfprintf_r+0xec2>
 801ab9c:	ac2c      	add	r4, sp, #176	; 0xb0
 801ab9e:	e7f4      	b.n	801ab8a <_svfprintf_r+0xeea>
 801aba0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801aba2:	2b00      	cmp	r3, #0
 801aba4:	d0dd      	beq.n	801ab62 <_svfprintf_r+0xec2>
 801aba6:	aa1f      	add	r2, sp, #124	; 0x7c
 801aba8:	4651      	mov	r1, sl
 801abaa:	4658      	mov	r0, fp
 801abac:	f001 fada 	bl	801c164 <__ssprint_r>
 801abb0:	e7d7      	b.n	801ab62 <_svfprintf_r+0xec2>
 801abb2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801abb6:	4610      	mov	r0, r2
 801abb8:	4619      	mov	r1, r3
 801abba:	f7e5 ffb3 	bl	8000b24 <__aeabi_dcmpun>
 801abbe:	2800      	cmp	r0, #0
 801abc0:	f43f aa44 	beq.w	801a04c <_svfprintf_r+0x3ac>
 801abc4:	4b1e      	ldr	r3, [pc, #120]	; (801ac40 <_svfprintf_r+0xfa0>)
 801abc6:	4a1f      	ldr	r2, [pc, #124]	; (801ac44 <_svfprintf_r+0xfa4>)
 801abc8:	f7ff ba34 	b.w	801a034 <_svfprintf_r+0x394>
 801abcc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801abce:	eba3 0308 	sub.w	r3, r3, r8
 801abd2:	9303      	str	r3, [sp, #12]
 801abd4:	f7ff bab5 	b.w	801a142 <_svfprintf_r+0x4a2>
 801abd8:	ea56 0207 	orrs.w	r2, r6, r7
 801abdc:	950b      	str	r5, [sp, #44]	; 0x2c
 801abde:	f43f ac2b 	beq.w	801a438 <_svfprintf_r+0x798>
 801abe2:	2b01      	cmp	r3, #1
 801abe4:	f43f ac9d 	beq.w	801a522 <_svfprintf_r+0x882>
 801abe8:	2b02      	cmp	r3, #2
 801abea:	f43f acbd 	beq.w	801a568 <_svfprintf_r+0x8c8>
 801abee:	ab2c      	add	r3, sp, #176	; 0xb0
 801abf0:	08f1      	lsrs	r1, r6, #3
 801abf2:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 801abf6:	08f8      	lsrs	r0, r7, #3
 801abf8:	f006 0207 	and.w	r2, r6, #7
 801abfc:	4607      	mov	r7, r0
 801abfe:	460e      	mov	r6, r1
 801ac00:	3230      	adds	r2, #48	; 0x30
 801ac02:	ea56 0107 	orrs.w	r1, r6, r7
 801ac06:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 801ac0a:	f803 2c01 	strb.w	r2, [r3, #-1]
 801ac0e:	f47f ac86 	bne.w	801a51e <_svfprintf_r+0x87e>
 801ac12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801ac14:	07c9      	lsls	r1, r1, #31
 801ac16:	d506      	bpl.n	801ac26 <_svfprintf_r+0xf86>
 801ac18:	2a30      	cmp	r2, #48	; 0x30
 801ac1a:	d004      	beq.n	801ac26 <_svfprintf_r+0xf86>
 801ac1c:	2230      	movs	r2, #48	; 0x30
 801ac1e:	f808 2c01 	strb.w	r2, [r8, #-1]
 801ac22:	f1a3 0802 	sub.w	r8, r3, #2
 801ac26:	464e      	mov	r6, r9
 801ac28:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 801ac2c:	eba9 0908 	sub.w	r9, r9, r8
 801ac30:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801ac32:	2700      	movs	r7, #0
 801ac34:	f7ff bad1 	b.w	801a1da <_svfprintf_r+0x53a>
 801ac38:	080ec470 	.word	0x080ec470
 801ac3c:	080ec460 	.word	0x080ec460
 801ac40:	080ec436 	.word	0x080ec436
 801ac44:	080ec43a 	.word	0x080ec43a

0801ac48 <_vsprintf_r>:
 801ac48:	b510      	push	{r4, lr}
 801ac4a:	b09a      	sub	sp, #104	; 0x68
 801ac4c:	f44f 7402 	mov.w	r4, #520	; 0x208
 801ac50:	9100      	str	r1, [sp, #0]
 801ac52:	9104      	str	r1, [sp, #16]
 801ac54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801ac58:	9102      	str	r1, [sp, #8]
 801ac5a:	9105      	str	r1, [sp, #20]
 801ac5c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801ac60:	f8ad 100e 	strh.w	r1, [sp, #14]
 801ac64:	4669      	mov	r1, sp
 801ac66:	f8ad 400c 	strh.w	r4, [sp, #12]
 801ac6a:	f7ff f819 	bl	8019ca0 <_svfprintf_r>
 801ac6e:	9b00      	ldr	r3, [sp, #0]
 801ac70:	2200      	movs	r2, #0
 801ac72:	701a      	strb	r2, [r3, #0]
 801ac74:	b01a      	add	sp, #104	; 0x68
 801ac76:	bd10      	pop	{r4, pc}

0801ac78 <vsprintf>:
 801ac78:	4613      	mov	r3, r2
 801ac7a:	460a      	mov	r2, r1
 801ac7c:	4601      	mov	r1, r0
 801ac7e:	4802      	ldr	r0, [pc, #8]	; (801ac88 <vsprintf+0x10>)
 801ac80:	6800      	ldr	r0, [r0, #0]
 801ac82:	f7ff bfe1 	b.w	801ac48 <_vsprintf_r>
 801ac86:	bf00      	nop
 801ac88:	20001ccc 	.word	0x20001ccc

0801ac8c <quorem>:
 801ac8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac90:	6903      	ldr	r3, [r0, #16]
 801ac92:	690c      	ldr	r4, [r1, #16]
 801ac94:	429c      	cmp	r4, r3
 801ac96:	4680      	mov	r8, r0
 801ac98:	f300 8082 	bgt.w	801ada0 <quorem+0x114>
 801ac9c:	3c01      	subs	r4, #1
 801ac9e:	f101 0714 	add.w	r7, r1, #20
 801aca2:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 801aca6:	f100 0614 	add.w	r6, r0, #20
 801acaa:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801acae:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801acb2:	eb06 030e 	add.w	r3, r6, lr
 801acb6:	3501      	adds	r5, #1
 801acb8:	eb07 090e 	add.w	r9, r7, lr
 801acbc:	9301      	str	r3, [sp, #4]
 801acbe:	fbb0 f5f5 	udiv	r5, r0, r5
 801acc2:	b395      	cbz	r5, 801ad2a <quorem+0x9e>
 801acc4:	f04f 0a00 	mov.w	sl, #0
 801acc8:	4638      	mov	r0, r7
 801acca:	46b4      	mov	ip, r6
 801accc:	46d3      	mov	fp, sl
 801acce:	f850 2b04 	ldr.w	r2, [r0], #4
 801acd2:	b293      	uxth	r3, r2
 801acd4:	fb05 a303 	mla	r3, r5, r3, sl
 801acd8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801acdc:	b29b      	uxth	r3, r3
 801acde:	ebab 0303 	sub.w	r3, fp, r3
 801ace2:	0c12      	lsrs	r2, r2, #16
 801ace4:	f8bc b000 	ldrh.w	fp, [ip]
 801ace8:	fb05 a202 	mla	r2, r5, r2, sl
 801acec:	fa13 f38b 	uxtah	r3, r3, fp
 801acf0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801acf4:	fa1f fb82 	uxth.w	fp, r2
 801acf8:	f8dc 2000 	ldr.w	r2, [ip]
 801acfc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 801ad00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801ad04:	b29b      	uxth	r3, r3
 801ad06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ad0a:	4581      	cmp	r9, r0
 801ad0c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 801ad10:	f84c 3b04 	str.w	r3, [ip], #4
 801ad14:	d2db      	bcs.n	801acce <quorem+0x42>
 801ad16:	f856 300e 	ldr.w	r3, [r6, lr]
 801ad1a:	b933      	cbnz	r3, 801ad2a <quorem+0x9e>
 801ad1c:	9b01      	ldr	r3, [sp, #4]
 801ad1e:	3b04      	subs	r3, #4
 801ad20:	429e      	cmp	r6, r3
 801ad22:	461a      	mov	r2, r3
 801ad24:	d330      	bcc.n	801ad88 <quorem+0xfc>
 801ad26:	f8c8 4010 	str.w	r4, [r8, #16]
 801ad2a:	4640      	mov	r0, r8
 801ad2c:	f001 f953 	bl	801bfd6 <__mcmp>
 801ad30:	2800      	cmp	r0, #0
 801ad32:	db25      	blt.n	801ad80 <quorem+0xf4>
 801ad34:	3501      	adds	r5, #1
 801ad36:	4630      	mov	r0, r6
 801ad38:	f04f 0e00 	mov.w	lr, #0
 801ad3c:	f857 2b04 	ldr.w	r2, [r7], #4
 801ad40:	f8d0 c000 	ldr.w	ip, [r0]
 801ad44:	b293      	uxth	r3, r2
 801ad46:	ebae 0303 	sub.w	r3, lr, r3
 801ad4a:	0c12      	lsrs	r2, r2, #16
 801ad4c:	fa13 f38c 	uxtah	r3, r3, ip
 801ad50:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801ad54:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801ad58:	b29b      	uxth	r3, r3
 801ad5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ad5e:	45b9      	cmp	r9, r7
 801ad60:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801ad64:	f840 3b04 	str.w	r3, [r0], #4
 801ad68:	d2e8      	bcs.n	801ad3c <quorem+0xb0>
 801ad6a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801ad6e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801ad72:	b92a      	cbnz	r2, 801ad80 <quorem+0xf4>
 801ad74:	3b04      	subs	r3, #4
 801ad76:	429e      	cmp	r6, r3
 801ad78:	461a      	mov	r2, r3
 801ad7a:	d30b      	bcc.n	801ad94 <quorem+0x108>
 801ad7c:	f8c8 4010 	str.w	r4, [r8, #16]
 801ad80:	4628      	mov	r0, r5
 801ad82:	b003      	add	sp, #12
 801ad84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad88:	6812      	ldr	r2, [r2, #0]
 801ad8a:	3b04      	subs	r3, #4
 801ad8c:	2a00      	cmp	r2, #0
 801ad8e:	d1ca      	bne.n	801ad26 <quorem+0x9a>
 801ad90:	3c01      	subs	r4, #1
 801ad92:	e7c5      	b.n	801ad20 <quorem+0x94>
 801ad94:	6812      	ldr	r2, [r2, #0]
 801ad96:	3b04      	subs	r3, #4
 801ad98:	2a00      	cmp	r2, #0
 801ad9a:	d1ef      	bne.n	801ad7c <quorem+0xf0>
 801ad9c:	3c01      	subs	r4, #1
 801ad9e:	e7ea      	b.n	801ad76 <quorem+0xea>
 801ada0:	2000      	movs	r0, #0
 801ada2:	e7ee      	b.n	801ad82 <quorem+0xf6>
 801ada4:	0000      	movs	r0, r0
	...

0801ada8 <_dtoa_r>:
 801ada8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801adac:	ec57 6b10 	vmov	r6, r7, d0
 801adb0:	b097      	sub	sp, #92	; 0x5c
 801adb2:	e9cd 6700 	strd	r6, r7, [sp]
 801adb6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801adb8:	9107      	str	r1, [sp, #28]
 801adba:	4604      	mov	r4, r0
 801adbc:	920a      	str	r2, [sp, #40]	; 0x28
 801adbe:	930f      	str	r3, [sp, #60]	; 0x3c
 801adc0:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801adc2:	b93e      	cbnz	r6, 801add4 <_dtoa_r+0x2c>
 801adc4:	2010      	movs	r0, #16
 801adc6:	f000 fee3 	bl	801bb90 <malloc>
 801adca:	6260      	str	r0, [r4, #36]	; 0x24
 801adcc:	6046      	str	r6, [r0, #4]
 801adce:	6086      	str	r6, [r0, #8]
 801add0:	6006      	str	r6, [r0, #0]
 801add2:	60c6      	str	r6, [r0, #12]
 801add4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801add6:	6819      	ldr	r1, [r3, #0]
 801add8:	b151      	cbz	r1, 801adf0 <_dtoa_r+0x48>
 801adda:	685a      	ldr	r2, [r3, #4]
 801addc:	604a      	str	r2, [r1, #4]
 801adde:	2301      	movs	r3, #1
 801ade0:	4093      	lsls	r3, r2
 801ade2:	608b      	str	r3, [r1, #8]
 801ade4:	4620      	mov	r0, r4
 801ade6:	f000 ff21 	bl	801bc2c <_Bfree>
 801adea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801adec:	2200      	movs	r2, #0
 801adee:	601a      	str	r2, [r3, #0]
 801adf0:	9b01      	ldr	r3, [sp, #4]
 801adf2:	2b00      	cmp	r3, #0
 801adf4:	bfbf      	itttt	lt
 801adf6:	2301      	movlt	r3, #1
 801adf8:	602b      	strlt	r3, [r5, #0]
 801adfa:	9b01      	ldrlt	r3, [sp, #4]
 801adfc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801ae00:	bfb2      	itee	lt
 801ae02:	9301      	strlt	r3, [sp, #4]
 801ae04:	2300      	movge	r3, #0
 801ae06:	602b      	strge	r3, [r5, #0]
 801ae08:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801ae0c:	4ba8      	ldr	r3, [pc, #672]	; (801b0b0 <_dtoa_r+0x308>)
 801ae0e:	ea33 0308 	bics.w	r3, r3, r8
 801ae12:	d11b      	bne.n	801ae4c <_dtoa_r+0xa4>
 801ae14:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ae16:	f242 730f 	movw	r3, #9999	; 0x270f
 801ae1a:	6013      	str	r3, [r2, #0]
 801ae1c:	9b00      	ldr	r3, [sp, #0]
 801ae1e:	b923      	cbnz	r3, 801ae2a <_dtoa_r+0x82>
 801ae20:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801ae24:	2800      	cmp	r0, #0
 801ae26:	f000 8578 	beq.w	801b91a <_dtoa_r+0xb72>
 801ae2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ae2c:	b953      	cbnz	r3, 801ae44 <_dtoa_r+0x9c>
 801ae2e:	4ba1      	ldr	r3, [pc, #644]	; (801b0b4 <_dtoa_r+0x30c>)
 801ae30:	e021      	b.n	801ae76 <_dtoa_r+0xce>
 801ae32:	4ba1      	ldr	r3, [pc, #644]	; (801b0b8 <_dtoa_r+0x310>)
 801ae34:	9302      	str	r3, [sp, #8]
 801ae36:	3308      	adds	r3, #8
 801ae38:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801ae3a:	6013      	str	r3, [r2, #0]
 801ae3c:	9802      	ldr	r0, [sp, #8]
 801ae3e:	b017      	add	sp, #92	; 0x5c
 801ae40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae44:	4b9b      	ldr	r3, [pc, #620]	; (801b0b4 <_dtoa_r+0x30c>)
 801ae46:	9302      	str	r3, [sp, #8]
 801ae48:	3303      	adds	r3, #3
 801ae4a:	e7f5      	b.n	801ae38 <_dtoa_r+0x90>
 801ae4c:	e9dd 6700 	ldrd	r6, r7, [sp]
 801ae50:	2200      	movs	r2, #0
 801ae52:	2300      	movs	r3, #0
 801ae54:	4630      	mov	r0, r6
 801ae56:	4639      	mov	r1, r7
 801ae58:	f7e5 fe32 	bl	8000ac0 <__aeabi_dcmpeq>
 801ae5c:	4681      	mov	r9, r0
 801ae5e:	b160      	cbz	r0, 801ae7a <_dtoa_r+0xd2>
 801ae60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ae62:	2301      	movs	r3, #1
 801ae64:	6013      	str	r3, [r2, #0]
 801ae66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ae68:	2b00      	cmp	r3, #0
 801ae6a:	f000 8553 	beq.w	801b914 <_dtoa_r+0xb6c>
 801ae6e:	4b93      	ldr	r3, [pc, #588]	; (801b0bc <_dtoa_r+0x314>)
 801ae70:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801ae72:	6013      	str	r3, [r2, #0]
 801ae74:	3b01      	subs	r3, #1
 801ae76:	9302      	str	r3, [sp, #8]
 801ae78:	e7e0      	b.n	801ae3c <_dtoa_r+0x94>
 801ae7a:	aa14      	add	r2, sp, #80	; 0x50
 801ae7c:	a915      	add	r1, sp, #84	; 0x54
 801ae7e:	ec47 6b10 	vmov	d0, r6, r7
 801ae82:	4620      	mov	r0, r4
 801ae84:	f001 f91f 	bl	801c0c6 <__d2b>
 801ae88:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801ae8c:	4682      	mov	sl, r0
 801ae8e:	2d00      	cmp	r5, #0
 801ae90:	d07e      	beq.n	801af90 <_dtoa_r+0x1e8>
 801ae92:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801ae96:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 801ae9a:	4630      	mov	r0, r6
 801ae9c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801aea0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801aea4:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 801aea8:	2200      	movs	r2, #0
 801aeaa:	4b85      	ldr	r3, [pc, #532]	; (801b0c0 <_dtoa_r+0x318>)
 801aeac:	f7e5 f9ec 	bl	8000288 <__aeabi_dsub>
 801aeb0:	a379      	add	r3, pc, #484	; (adr r3, 801b098 <_dtoa_r+0x2f0>)
 801aeb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aeb6:	f7e5 fb9b 	bl	80005f0 <__aeabi_dmul>
 801aeba:	a379      	add	r3, pc, #484	; (adr r3, 801b0a0 <_dtoa_r+0x2f8>)
 801aebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aec0:	f7e5 f9e4 	bl	800028c <__adddf3>
 801aec4:	4606      	mov	r6, r0
 801aec6:	4628      	mov	r0, r5
 801aec8:	460f      	mov	r7, r1
 801aeca:	f7e5 fb2b 	bl	8000524 <__aeabi_i2d>
 801aece:	a376      	add	r3, pc, #472	; (adr r3, 801b0a8 <_dtoa_r+0x300>)
 801aed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aed4:	f7e5 fb8c 	bl	80005f0 <__aeabi_dmul>
 801aed8:	4602      	mov	r2, r0
 801aeda:	460b      	mov	r3, r1
 801aedc:	4630      	mov	r0, r6
 801aede:	4639      	mov	r1, r7
 801aee0:	f7e5 f9d4 	bl	800028c <__adddf3>
 801aee4:	4606      	mov	r6, r0
 801aee6:	460f      	mov	r7, r1
 801aee8:	f7e5 fe32 	bl	8000b50 <__aeabi_d2iz>
 801aeec:	2200      	movs	r2, #0
 801aeee:	4683      	mov	fp, r0
 801aef0:	2300      	movs	r3, #0
 801aef2:	4630      	mov	r0, r6
 801aef4:	4639      	mov	r1, r7
 801aef6:	f7e5 fded 	bl	8000ad4 <__aeabi_dcmplt>
 801aefa:	b158      	cbz	r0, 801af14 <_dtoa_r+0x16c>
 801aefc:	4658      	mov	r0, fp
 801aefe:	f7e5 fb11 	bl	8000524 <__aeabi_i2d>
 801af02:	4602      	mov	r2, r0
 801af04:	460b      	mov	r3, r1
 801af06:	4630      	mov	r0, r6
 801af08:	4639      	mov	r1, r7
 801af0a:	f7e5 fdd9 	bl	8000ac0 <__aeabi_dcmpeq>
 801af0e:	b908      	cbnz	r0, 801af14 <_dtoa_r+0x16c>
 801af10:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801af14:	f1bb 0f16 	cmp.w	fp, #22
 801af18:	d859      	bhi.n	801afce <_dtoa_r+0x226>
 801af1a:	496a      	ldr	r1, [pc, #424]	; (801b0c4 <_dtoa_r+0x31c>)
 801af1c:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 801af20:	e9dd 2300 	ldrd	r2, r3, [sp]
 801af24:	e9d1 0100 	ldrd	r0, r1, [r1]
 801af28:	f7e5 fdf2 	bl	8000b10 <__aeabi_dcmpgt>
 801af2c:	2800      	cmp	r0, #0
 801af2e:	d050      	beq.n	801afd2 <_dtoa_r+0x22a>
 801af30:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801af34:	2300      	movs	r3, #0
 801af36:	930e      	str	r3, [sp, #56]	; 0x38
 801af38:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801af3a:	1b5d      	subs	r5, r3, r5
 801af3c:	1e6b      	subs	r3, r5, #1
 801af3e:	9306      	str	r3, [sp, #24]
 801af40:	bf45      	ittet	mi
 801af42:	f1c5 0301 	rsbmi	r3, r5, #1
 801af46:	9305      	strmi	r3, [sp, #20]
 801af48:	2300      	movpl	r3, #0
 801af4a:	2300      	movmi	r3, #0
 801af4c:	bf4c      	ite	mi
 801af4e:	9306      	strmi	r3, [sp, #24]
 801af50:	9305      	strpl	r3, [sp, #20]
 801af52:	f1bb 0f00 	cmp.w	fp, #0
 801af56:	db3e      	blt.n	801afd6 <_dtoa_r+0x22e>
 801af58:	9b06      	ldr	r3, [sp, #24]
 801af5a:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801af5e:	445b      	add	r3, fp
 801af60:	9306      	str	r3, [sp, #24]
 801af62:	2300      	movs	r3, #0
 801af64:	9308      	str	r3, [sp, #32]
 801af66:	9b07      	ldr	r3, [sp, #28]
 801af68:	2b09      	cmp	r3, #9
 801af6a:	f200 80af 	bhi.w	801b0cc <_dtoa_r+0x324>
 801af6e:	2b05      	cmp	r3, #5
 801af70:	bfc4      	itt	gt
 801af72:	3b04      	subgt	r3, #4
 801af74:	9307      	strgt	r3, [sp, #28]
 801af76:	9b07      	ldr	r3, [sp, #28]
 801af78:	f1a3 0302 	sub.w	r3, r3, #2
 801af7c:	bfcc      	ite	gt
 801af7e:	2600      	movgt	r6, #0
 801af80:	2601      	movle	r6, #1
 801af82:	2b03      	cmp	r3, #3
 801af84:	f200 80ae 	bhi.w	801b0e4 <_dtoa_r+0x33c>
 801af88:	e8df f003 	tbb	[pc, r3]
 801af8c:	772f8482 	.word	0x772f8482
 801af90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801af92:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801af94:	441d      	add	r5, r3
 801af96:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801af9a:	2b20      	cmp	r3, #32
 801af9c:	dd11      	ble.n	801afc2 <_dtoa_r+0x21a>
 801af9e:	9a00      	ldr	r2, [sp, #0]
 801afa0:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801afa4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 801afa8:	fa22 f000 	lsr.w	r0, r2, r0
 801afac:	fa08 f303 	lsl.w	r3, r8, r3
 801afb0:	4318      	orrs	r0, r3
 801afb2:	f7e5 faa7 	bl	8000504 <__aeabi_ui2d>
 801afb6:	2301      	movs	r3, #1
 801afb8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 801afbc:	3d01      	subs	r5, #1
 801afbe:	9312      	str	r3, [sp, #72]	; 0x48
 801afc0:	e772      	b.n	801aea8 <_dtoa_r+0x100>
 801afc2:	f1c3 0020 	rsb	r0, r3, #32
 801afc6:	9b00      	ldr	r3, [sp, #0]
 801afc8:	fa03 f000 	lsl.w	r0, r3, r0
 801afcc:	e7f1      	b.n	801afb2 <_dtoa_r+0x20a>
 801afce:	2301      	movs	r3, #1
 801afd0:	e7b1      	b.n	801af36 <_dtoa_r+0x18e>
 801afd2:	900e      	str	r0, [sp, #56]	; 0x38
 801afd4:	e7b0      	b.n	801af38 <_dtoa_r+0x190>
 801afd6:	9b05      	ldr	r3, [sp, #20]
 801afd8:	eba3 030b 	sub.w	r3, r3, fp
 801afdc:	9305      	str	r3, [sp, #20]
 801afde:	f1cb 0300 	rsb	r3, fp, #0
 801afe2:	9308      	str	r3, [sp, #32]
 801afe4:	2300      	movs	r3, #0
 801afe6:	930b      	str	r3, [sp, #44]	; 0x2c
 801afe8:	e7bd      	b.n	801af66 <_dtoa_r+0x1be>
 801afea:	2301      	movs	r3, #1
 801afec:	9309      	str	r3, [sp, #36]	; 0x24
 801afee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801aff0:	2b00      	cmp	r3, #0
 801aff2:	dd7a      	ble.n	801b0ea <_dtoa_r+0x342>
 801aff4:	9304      	str	r3, [sp, #16]
 801aff6:	9303      	str	r3, [sp, #12]
 801aff8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801affa:	2200      	movs	r2, #0
 801affc:	606a      	str	r2, [r5, #4]
 801affe:	2104      	movs	r1, #4
 801b000:	f101 0214 	add.w	r2, r1, #20
 801b004:	429a      	cmp	r2, r3
 801b006:	d975      	bls.n	801b0f4 <_dtoa_r+0x34c>
 801b008:	6869      	ldr	r1, [r5, #4]
 801b00a:	4620      	mov	r0, r4
 801b00c:	f000 fdda 	bl	801bbc4 <_Balloc>
 801b010:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b012:	6028      	str	r0, [r5, #0]
 801b014:	681b      	ldr	r3, [r3, #0]
 801b016:	9302      	str	r3, [sp, #8]
 801b018:	9b03      	ldr	r3, [sp, #12]
 801b01a:	2b0e      	cmp	r3, #14
 801b01c:	f200 80e5 	bhi.w	801b1ea <_dtoa_r+0x442>
 801b020:	2e00      	cmp	r6, #0
 801b022:	f000 80e2 	beq.w	801b1ea <_dtoa_r+0x442>
 801b026:	ed9d 7b00 	vldr	d7, [sp]
 801b02a:	f1bb 0f00 	cmp.w	fp, #0
 801b02e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801b032:	dd74      	ble.n	801b11e <_dtoa_r+0x376>
 801b034:	4a23      	ldr	r2, [pc, #140]	; (801b0c4 <_dtoa_r+0x31c>)
 801b036:	f00b 030f 	and.w	r3, fp, #15
 801b03a:	ea4f 162b 	mov.w	r6, fp, asr #4
 801b03e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801b042:	06f0      	lsls	r0, r6, #27
 801b044:	e9d3 8900 	ldrd	r8, r9, [r3]
 801b048:	d559      	bpl.n	801b0fe <_dtoa_r+0x356>
 801b04a:	4b1f      	ldr	r3, [pc, #124]	; (801b0c8 <_dtoa_r+0x320>)
 801b04c:	ec51 0b17 	vmov	r0, r1, d7
 801b050:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801b054:	f7e5 fbf6 	bl	8000844 <__aeabi_ddiv>
 801b058:	e9cd 0100 	strd	r0, r1, [sp]
 801b05c:	f006 060f 	and.w	r6, r6, #15
 801b060:	2503      	movs	r5, #3
 801b062:	4f19      	ldr	r7, [pc, #100]	; (801b0c8 <_dtoa_r+0x320>)
 801b064:	2e00      	cmp	r6, #0
 801b066:	d14c      	bne.n	801b102 <_dtoa_r+0x35a>
 801b068:	4642      	mov	r2, r8
 801b06a:	464b      	mov	r3, r9
 801b06c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b070:	f7e5 fbe8 	bl	8000844 <__aeabi_ddiv>
 801b074:	e9cd 0100 	strd	r0, r1, [sp]
 801b078:	e06a      	b.n	801b150 <_dtoa_r+0x3a8>
 801b07a:	2301      	movs	r3, #1
 801b07c:	9309      	str	r3, [sp, #36]	; 0x24
 801b07e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b080:	445b      	add	r3, fp
 801b082:	9304      	str	r3, [sp, #16]
 801b084:	3301      	adds	r3, #1
 801b086:	2b01      	cmp	r3, #1
 801b088:	9303      	str	r3, [sp, #12]
 801b08a:	bfb8      	it	lt
 801b08c:	2301      	movlt	r3, #1
 801b08e:	e7b3      	b.n	801aff8 <_dtoa_r+0x250>
 801b090:	2300      	movs	r3, #0
 801b092:	e7ab      	b.n	801afec <_dtoa_r+0x244>
 801b094:	2300      	movs	r3, #0
 801b096:	e7f1      	b.n	801b07c <_dtoa_r+0x2d4>
 801b098:	636f4361 	.word	0x636f4361
 801b09c:	3fd287a7 	.word	0x3fd287a7
 801b0a0:	8b60c8b3 	.word	0x8b60c8b3
 801b0a4:	3fc68a28 	.word	0x3fc68a28
 801b0a8:	509f79fb 	.word	0x509f79fb
 801b0ac:	3fd34413 	.word	0x3fd34413
 801b0b0:	7ff00000 	.word	0x7ff00000
 801b0b4:	080ec489 	.word	0x080ec489
 801b0b8:	080ec480 	.word	0x080ec480
 801b0bc:	0802b64c 	.word	0x0802b64c
 801b0c0:	3ff80000 	.word	0x3ff80000
 801b0c4:	080ec4c0 	.word	0x080ec4c0
 801b0c8:	080ec498 	.word	0x080ec498
 801b0cc:	2601      	movs	r6, #1
 801b0ce:	2300      	movs	r3, #0
 801b0d0:	9307      	str	r3, [sp, #28]
 801b0d2:	9609      	str	r6, [sp, #36]	; 0x24
 801b0d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b0d8:	9304      	str	r3, [sp, #16]
 801b0da:	9303      	str	r3, [sp, #12]
 801b0dc:	2200      	movs	r2, #0
 801b0de:	2312      	movs	r3, #18
 801b0e0:	920a      	str	r2, [sp, #40]	; 0x28
 801b0e2:	e789      	b.n	801aff8 <_dtoa_r+0x250>
 801b0e4:	2301      	movs	r3, #1
 801b0e6:	9309      	str	r3, [sp, #36]	; 0x24
 801b0e8:	e7f4      	b.n	801b0d4 <_dtoa_r+0x32c>
 801b0ea:	2301      	movs	r3, #1
 801b0ec:	9304      	str	r3, [sp, #16]
 801b0ee:	9303      	str	r3, [sp, #12]
 801b0f0:	461a      	mov	r2, r3
 801b0f2:	e7f5      	b.n	801b0e0 <_dtoa_r+0x338>
 801b0f4:	686a      	ldr	r2, [r5, #4]
 801b0f6:	3201      	adds	r2, #1
 801b0f8:	606a      	str	r2, [r5, #4]
 801b0fa:	0049      	lsls	r1, r1, #1
 801b0fc:	e780      	b.n	801b000 <_dtoa_r+0x258>
 801b0fe:	2502      	movs	r5, #2
 801b100:	e7af      	b.n	801b062 <_dtoa_r+0x2ba>
 801b102:	07f1      	lsls	r1, r6, #31
 801b104:	d508      	bpl.n	801b118 <_dtoa_r+0x370>
 801b106:	4640      	mov	r0, r8
 801b108:	4649      	mov	r1, r9
 801b10a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b10e:	f7e5 fa6f 	bl	80005f0 <__aeabi_dmul>
 801b112:	3501      	adds	r5, #1
 801b114:	4680      	mov	r8, r0
 801b116:	4689      	mov	r9, r1
 801b118:	1076      	asrs	r6, r6, #1
 801b11a:	3708      	adds	r7, #8
 801b11c:	e7a2      	b.n	801b064 <_dtoa_r+0x2bc>
 801b11e:	f000 809d 	beq.w	801b25c <_dtoa_r+0x4b4>
 801b122:	f1cb 0600 	rsb	r6, fp, #0
 801b126:	4b9f      	ldr	r3, [pc, #636]	; (801b3a4 <_dtoa_r+0x5fc>)
 801b128:	4f9f      	ldr	r7, [pc, #636]	; (801b3a8 <_dtoa_r+0x600>)
 801b12a:	f006 020f 	and.w	r2, r6, #15
 801b12e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b132:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b136:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801b13a:	f7e5 fa59 	bl	80005f0 <__aeabi_dmul>
 801b13e:	e9cd 0100 	strd	r0, r1, [sp]
 801b142:	1136      	asrs	r6, r6, #4
 801b144:	2300      	movs	r3, #0
 801b146:	2502      	movs	r5, #2
 801b148:	2e00      	cmp	r6, #0
 801b14a:	d17c      	bne.n	801b246 <_dtoa_r+0x49e>
 801b14c:	2b00      	cmp	r3, #0
 801b14e:	d191      	bne.n	801b074 <_dtoa_r+0x2cc>
 801b150:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b152:	2b00      	cmp	r3, #0
 801b154:	f000 8084 	beq.w	801b260 <_dtoa_r+0x4b8>
 801b158:	e9dd 8900 	ldrd	r8, r9, [sp]
 801b15c:	2200      	movs	r2, #0
 801b15e:	4b93      	ldr	r3, [pc, #588]	; (801b3ac <_dtoa_r+0x604>)
 801b160:	4640      	mov	r0, r8
 801b162:	4649      	mov	r1, r9
 801b164:	f7e5 fcb6 	bl	8000ad4 <__aeabi_dcmplt>
 801b168:	2800      	cmp	r0, #0
 801b16a:	d079      	beq.n	801b260 <_dtoa_r+0x4b8>
 801b16c:	9b03      	ldr	r3, [sp, #12]
 801b16e:	2b00      	cmp	r3, #0
 801b170:	d076      	beq.n	801b260 <_dtoa_r+0x4b8>
 801b172:	9b04      	ldr	r3, [sp, #16]
 801b174:	2b00      	cmp	r3, #0
 801b176:	dd34      	ble.n	801b1e2 <_dtoa_r+0x43a>
 801b178:	2200      	movs	r2, #0
 801b17a:	4b8d      	ldr	r3, [pc, #564]	; (801b3b0 <_dtoa_r+0x608>)
 801b17c:	4640      	mov	r0, r8
 801b17e:	4649      	mov	r1, r9
 801b180:	f7e5 fa36 	bl	80005f0 <__aeabi_dmul>
 801b184:	e9cd 0100 	strd	r0, r1, [sp]
 801b188:	9e04      	ldr	r6, [sp, #16]
 801b18a:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 801b18e:	3501      	adds	r5, #1
 801b190:	4628      	mov	r0, r5
 801b192:	f7e5 f9c7 	bl	8000524 <__aeabi_i2d>
 801b196:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b19a:	f7e5 fa29 	bl	80005f0 <__aeabi_dmul>
 801b19e:	2200      	movs	r2, #0
 801b1a0:	4b84      	ldr	r3, [pc, #528]	; (801b3b4 <_dtoa_r+0x60c>)
 801b1a2:	f7e5 f873 	bl	800028c <__adddf3>
 801b1a6:	4680      	mov	r8, r0
 801b1a8:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 801b1ac:	2e00      	cmp	r6, #0
 801b1ae:	d15a      	bne.n	801b266 <_dtoa_r+0x4be>
 801b1b0:	2200      	movs	r2, #0
 801b1b2:	4b81      	ldr	r3, [pc, #516]	; (801b3b8 <_dtoa_r+0x610>)
 801b1b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b1b8:	f7e5 f866 	bl	8000288 <__aeabi_dsub>
 801b1bc:	4642      	mov	r2, r8
 801b1be:	464b      	mov	r3, r9
 801b1c0:	e9cd 0100 	strd	r0, r1, [sp]
 801b1c4:	f7e5 fca4 	bl	8000b10 <__aeabi_dcmpgt>
 801b1c8:	2800      	cmp	r0, #0
 801b1ca:	f040 829b 	bne.w	801b704 <_dtoa_r+0x95c>
 801b1ce:	4642      	mov	r2, r8
 801b1d0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801b1d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b1d8:	f7e5 fc7c 	bl	8000ad4 <__aeabi_dcmplt>
 801b1dc:	2800      	cmp	r0, #0
 801b1de:	f040 828f 	bne.w	801b700 <_dtoa_r+0x958>
 801b1e2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801b1e6:	e9cd 2300 	strd	r2, r3, [sp]
 801b1ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b1ec:	2b00      	cmp	r3, #0
 801b1ee:	f2c0 8150 	blt.w	801b492 <_dtoa_r+0x6ea>
 801b1f2:	f1bb 0f0e 	cmp.w	fp, #14
 801b1f6:	f300 814c 	bgt.w	801b492 <_dtoa_r+0x6ea>
 801b1fa:	4b6a      	ldr	r3, [pc, #424]	; (801b3a4 <_dtoa_r+0x5fc>)
 801b1fc:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801b200:	e9d3 8900 	ldrd	r8, r9, [r3]
 801b204:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b206:	2b00      	cmp	r3, #0
 801b208:	f280 80da 	bge.w	801b3c0 <_dtoa_r+0x618>
 801b20c:	9b03      	ldr	r3, [sp, #12]
 801b20e:	2b00      	cmp	r3, #0
 801b210:	f300 80d6 	bgt.w	801b3c0 <_dtoa_r+0x618>
 801b214:	f040 8273 	bne.w	801b6fe <_dtoa_r+0x956>
 801b218:	2200      	movs	r2, #0
 801b21a:	4b67      	ldr	r3, [pc, #412]	; (801b3b8 <_dtoa_r+0x610>)
 801b21c:	4640      	mov	r0, r8
 801b21e:	4649      	mov	r1, r9
 801b220:	f7e5 f9e6 	bl	80005f0 <__aeabi_dmul>
 801b224:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b228:	f7e5 fc68 	bl	8000afc <__aeabi_dcmpge>
 801b22c:	9e03      	ldr	r6, [sp, #12]
 801b22e:	4637      	mov	r7, r6
 801b230:	2800      	cmp	r0, #0
 801b232:	f040 824a 	bne.w	801b6ca <_dtoa_r+0x922>
 801b236:	9b02      	ldr	r3, [sp, #8]
 801b238:	9a02      	ldr	r2, [sp, #8]
 801b23a:	1c5d      	adds	r5, r3, #1
 801b23c:	2331      	movs	r3, #49	; 0x31
 801b23e:	7013      	strb	r3, [r2, #0]
 801b240:	f10b 0b01 	add.w	fp, fp, #1
 801b244:	e245      	b.n	801b6d2 <_dtoa_r+0x92a>
 801b246:	07f2      	lsls	r2, r6, #31
 801b248:	d505      	bpl.n	801b256 <_dtoa_r+0x4ae>
 801b24a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b24e:	f7e5 f9cf 	bl	80005f0 <__aeabi_dmul>
 801b252:	3501      	adds	r5, #1
 801b254:	2301      	movs	r3, #1
 801b256:	1076      	asrs	r6, r6, #1
 801b258:	3708      	adds	r7, #8
 801b25a:	e775      	b.n	801b148 <_dtoa_r+0x3a0>
 801b25c:	2502      	movs	r5, #2
 801b25e:	e777      	b.n	801b150 <_dtoa_r+0x3a8>
 801b260:	465f      	mov	r7, fp
 801b262:	9e03      	ldr	r6, [sp, #12]
 801b264:	e794      	b.n	801b190 <_dtoa_r+0x3e8>
 801b266:	9a02      	ldr	r2, [sp, #8]
 801b268:	4b4e      	ldr	r3, [pc, #312]	; (801b3a4 <_dtoa_r+0x5fc>)
 801b26a:	4432      	add	r2, r6
 801b26c:	9213      	str	r2, [sp, #76]	; 0x4c
 801b26e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b270:	1e71      	subs	r1, r6, #1
 801b272:	2a00      	cmp	r2, #0
 801b274:	d048      	beq.n	801b308 <_dtoa_r+0x560>
 801b276:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 801b27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b27e:	2000      	movs	r0, #0
 801b280:	494e      	ldr	r1, [pc, #312]	; (801b3bc <_dtoa_r+0x614>)
 801b282:	f7e5 fadf 	bl	8000844 <__aeabi_ddiv>
 801b286:	4642      	mov	r2, r8
 801b288:	464b      	mov	r3, r9
 801b28a:	f7e4 fffd 	bl	8000288 <__aeabi_dsub>
 801b28e:	9d02      	ldr	r5, [sp, #8]
 801b290:	4680      	mov	r8, r0
 801b292:	4689      	mov	r9, r1
 801b294:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b298:	f7e5 fc5a 	bl	8000b50 <__aeabi_d2iz>
 801b29c:	4606      	mov	r6, r0
 801b29e:	f7e5 f941 	bl	8000524 <__aeabi_i2d>
 801b2a2:	4602      	mov	r2, r0
 801b2a4:	460b      	mov	r3, r1
 801b2a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b2aa:	f7e4 ffed 	bl	8000288 <__aeabi_dsub>
 801b2ae:	3630      	adds	r6, #48	; 0x30
 801b2b0:	f805 6b01 	strb.w	r6, [r5], #1
 801b2b4:	4642      	mov	r2, r8
 801b2b6:	464b      	mov	r3, r9
 801b2b8:	e9cd 0100 	strd	r0, r1, [sp]
 801b2bc:	f7e5 fc0a 	bl	8000ad4 <__aeabi_dcmplt>
 801b2c0:	2800      	cmp	r0, #0
 801b2c2:	d165      	bne.n	801b390 <_dtoa_r+0x5e8>
 801b2c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b2c8:	2000      	movs	r0, #0
 801b2ca:	4938      	ldr	r1, [pc, #224]	; (801b3ac <_dtoa_r+0x604>)
 801b2cc:	f7e4 ffdc 	bl	8000288 <__aeabi_dsub>
 801b2d0:	4642      	mov	r2, r8
 801b2d2:	464b      	mov	r3, r9
 801b2d4:	f7e5 fbfe 	bl	8000ad4 <__aeabi_dcmplt>
 801b2d8:	2800      	cmp	r0, #0
 801b2da:	f040 80ba 	bne.w	801b452 <_dtoa_r+0x6aa>
 801b2de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801b2e0:	429d      	cmp	r5, r3
 801b2e2:	f43f af7e 	beq.w	801b1e2 <_dtoa_r+0x43a>
 801b2e6:	2200      	movs	r2, #0
 801b2e8:	4b31      	ldr	r3, [pc, #196]	; (801b3b0 <_dtoa_r+0x608>)
 801b2ea:	4640      	mov	r0, r8
 801b2ec:	4649      	mov	r1, r9
 801b2ee:	f7e5 f97f 	bl	80005f0 <__aeabi_dmul>
 801b2f2:	2200      	movs	r2, #0
 801b2f4:	4680      	mov	r8, r0
 801b2f6:	4689      	mov	r9, r1
 801b2f8:	4b2d      	ldr	r3, [pc, #180]	; (801b3b0 <_dtoa_r+0x608>)
 801b2fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b2fe:	f7e5 f977 	bl	80005f0 <__aeabi_dmul>
 801b302:	e9cd 0100 	strd	r0, r1, [sp]
 801b306:	e7c5      	b.n	801b294 <_dtoa_r+0x4ec>
 801b308:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801b30c:	4642      	mov	r2, r8
 801b30e:	464b      	mov	r3, r9
 801b310:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b314:	f7e5 f96c 	bl	80005f0 <__aeabi_dmul>
 801b318:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801b31c:	9d02      	ldr	r5, [sp, #8]
 801b31e:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b322:	f7e5 fc15 	bl	8000b50 <__aeabi_d2iz>
 801b326:	4606      	mov	r6, r0
 801b328:	f7e5 f8fc 	bl	8000524 <__aeabi_i2d>
 801b32c:	3630      	adds	r6, #48	; 0x30
 801b32e:	4602      	mov	r2, r0
 801b330:	460b      	mov	r3, r1
 801b332:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b336:	f7e4 ffa7 	bl	8000288 <__aeabi_dsub>
 801b33a:	f805 6b01 	strb.w	r6, [r5], #1
 801b33e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801b340:	42ab      	cmp	r3, r5
 801b342:	4680      	mov	r8, r0
 801b344:	4689      	mov	r9, r1
 801b346:	f04f 0200 	mov.w	r2, #0
 801b34a:	d125      	bne.n	801b398 <_dtoa_r+0x5f0>
 801b34c:	4b1b      	ldr	r3, [pc, #108]	; (801b3bc <_dtoa_r+0x614>)
 801b34e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801b352:	f7e4 ff9b 	bl	800028c <__adddf3>
 801b356:	4602      	mov	r2, r0
 801b358:	460b      	mov	r3, r1
 801b35a:	4640      	mov	r0, r8
 801b35c:	4649      	mov	r1, r9
 801b35e:	f7e5 fbd7 	bl	8000b10 <__aeabi_dcmpgt>
 801b362:	2800      	cmp	r0, #0
 801b364:	d175      	bne.n	801b452 <_dtoa_r+0x6aa>
 801b366:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801b36a:	2000      	movs	r0, #0
 801b36c:	4913      	ldr	r1, [pc, #76]	; (801b3bc <_dtoa_r+0x614>)
 801b36e:	f7e4 ff8b 	bl	8000288 <__aeabi_dsub>
 801b372:	4602      	mov	r2, r0
 801b374:	460b      	mov	r3, r1
 801b376:	4640      	mov	r0, r8
 801b378:	4649      	mov	r1, r9
 801b37a:	f7e5 fbab 	bl	8000ad4 <__aeabi_dcmplt>
 801b37e:	2800      	cmp	r0, #0
 801b380:	f43f af2f 	beq.w	801b1e2 <_dtoa_r+0x43a>
 801b384:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801b388:	2b30      	cmp	r3, #48	; 0x30
 801b38a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 801b38e:	d001      	beq.n	801b394 <_dtoa_r+0x5ec>
 801b390:	46bb      	mov	fp, r7
 801b392:	e04d      	b.n	801b430 <_dtoa_r+0x688>
 801b394:	4615      	mov	r5, r2
 801b396:	e7f5      	b.n	801b384 <_dtoa_r+0x5dc>
 801b398:	4b05      	ldr	r3, [pc, #20]	; (801b3b0 <_dtoa_r+0x608>)
 801b39a:	f7e5 f929 	bl	80005f0 <__aeabi_dmul>
 801b39e:	e9cd 0100 	strd	r0, r1, [sp]
 801b3a2:	e7bc      	b.n	801b31e <_dtoa_r+0x576>
 801b3a4:	080ec4c0 	.word	0x080ec4c0
 801b3a8:	080ec498 	.word	0x080ec498
 801b3ac:	3ff00000 	.word	0x3ff00000
 801b3b0:	40240000 	.word	0x40240000
 801b3b4:	401c0000 	.word	0x401c0000
 801b3b8:	40140000 	.word	0x40140000
 801b3bc:	3fe00000 	.word	0x3fe00000
 801b3c0:	e9dd 6700 	ldrd	r6, r7, [sp]
 801b3c4:	9d02      	ldr	r5, [sp, #8]
 801b3c6:	4642      	mov	r2, r8
 801b3c8:	464b      	mov	r3, r9
 801b3ca:	4630      	mov	r0, r6
 801b3cc:	4639      	mov	r1, r7
 801b3ce:	f7e5 fa39 	bl	8000844 <__aeabi_ddiv>
 801b3d2:	f7e5 fbbd 	bl	8000b50 <__aeabi_d2iz>
 801b3d6:	9000      	str	r0, [sp, #0]
 801b3d8:	f7e5 f8a4 	bl	8000524 <__aeabi_i2d>
 801b3dc:	4642      	mov	r2, r8
 801b3de:	464b      	mov	r3, r9
 801b3e0:	f7e5 f906 	bl	80005f0 <__aeabi_dmul>
 801b3e4:	4602      	mov	r2, r0
 801b3e6:	460b      	mov	r3, r1
 801b3e8:	4630      	mov	r0, r6
 801b3ea:	4639      	mov	r1, r7
 801b3ec:	f7e4 ff4c 	bl	8000288 <__aeabi_dsub>
 801b3f0:	9e00      	ldr	r6, [sp, #0]
 801b3f2:	9f03      	ldr	r7, [sp, #12]
 801b3f4:	3630      	adds	r6, #48	; 0x30
 801b3f6:	f805 6b01 	strb.w	r6, [r5], #1
 801b3fa:	9e02      	ldr	r6, [sp, #8]
 801b3fc:	1bae      	subs	r6, r5, r6
 801b3fe:	42b7      	cmp	r7, r6
 801b400:	4602      	mov	r2, r0
 801b402:	460b      	mov	r3, r1
 801b404:	d138      	bne.n	801b478 <_dtoa_r+0x6d0>
 801b406:	f7e4 ff41 	bl	800028c <__adddf3>
 801b40a:	4606      	mov	r6, r0
 801b40c:	460f      	mov	r7, r1
 801b40e:	4602      	mov	r2, r0
 801b410:	460b      	mov	r3, r1
 801b412:	4640      	mov	r0, r8
 801b414:	4649      	mov	r1, r9
 801b416:	f7e5 fb5d 	bl	8000ad4 <__aeabi_dcmplt>
 801b41a:	b9c8      	cbnz	r0, 801b450 <_dtoa_r+0x6a8>
 801b41c:	4632      	mov	r2, r6
 801b41e:	463b      	mov	r3, r7
 801b420:	4640      	mov	r0, r8
 801b422:	4649      	mov	r1, r9
 801b424:	f7e5 fb4c 	bl	8000ac0 <__aeabi_dcmpeq>
 801b428:	b110      	cbz	r0, 801b430 <_dtoa_r+0x688>
 801b42a:	9b00      	ldr	r3, [sp, #0]
 801b42c:	07db      	lsls	r3, r3, #31
 801b42e:	d40f      	bmi.n	801b450 <_dtoa_r+0x6a8>
 801b430:	4651      	mov	r1, sl
 801b432:	4620      	mov	r0, r4
 801b434:	f000 fbfa 	bl	801bc2c <_Bfree>
 801b438:	2300      	movs	r3, #0
 801b43a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b43c:	702b      	strb	r3, [r5, #0]
 801b43e:	f10b 0301 	add.w	r3, fp, #1
 801b442:	6013      	str	r3, [r2, #0]
 801b444:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b446:	2b00      	cmp	r3, #0
 801b448:	f43f acf8 	beq.w	801ae3c <_dtoa_r+0x94>
 801b44c:	601d      	str	r5, [r3, #0]
 801b44e:	e4f5      	b.n	801ae3c <_dtoa_r+0x94>
 801b450:	465f      	mov	r7, fp
 801b452:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801b456:	2a39      	cmp	r2, #57	; 0x39
 801b458:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 801b45c:	d106      	bne.n	801b46c <_dtoa_r+0x6c4>
 801b45e:	9a02      	ldr	r2, [sp, #8]
 801b460:	429a      	cmp	r2, r3
 801b462:	d107      	bne.n	801b474 <_dtoa_r+0x6cc>
 801b464:	2330      	movs	r3, #48	; 0x30
 801b466:	7013      	strb	r3, [r2, #0]
 801b468:	3701      	adds	r7, #1
 801b46a:	4613      	mov	r3, r2
 801b46c:	781a      	ldrb	r2, [r3, #0]
 801b46e:	3201      	adds	r2, #1
 801b470:	701a      	strb	r2, [r3, #0]
 801b472:	e78d      	b.n	801b390 <_dtoa_r+0x5e8>
 801b474:	461d      	mov	r5, r3
 801b476:	e7ec      	b.n	801b452 <_dtoa_r+0x6aa>
 801b478:	2200      	movs	r2, #0
 801b47a:	4ba4      	ldr	r3, [pc, #656]	; (801b70c <_dtoa_r+0x964>)
 801b47c:	f7e5 f8b8 	bl	80005f0 <__aeabi_dmul>
 801b480:	2200      	movs	r2, #0
 801b482:	2300      	movs	r3, #0
 801b484:	4606      	mov	r6, r0
 801b486:	460f      	mov	r7, r1
 801b488:	f7e5 fb1a 	bl	8000ac0 <__aeabi_dcmpeq>
 801b48c:	2800      	cmp	r0, #0
 801b48e:	d09a      	beq.n	801b3c6 <_dtoa_r+0x61e>
 801b490:	e7ce      	b.n	801b430 <_dtoa_r+0x688>
 801b492:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b494:	2a00      	cmp	r2, #0
 801b496:	f000 80cd 	beq.w	801b634 <_dtoa_r+0x88c>
 801b49a:	9a07      	ldr	r2, [sp, #28]
 801b49c:	2a01      	cmp	r2, #1
 801b49e:	f300 80af 	bgt.w	801b600 <_dtoa_r+0x858>
 801b4a2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b4a4:	2a00      	cmp	r2, #0
 801b4a6:	f000 80a7 	beq.w	801b5f8 <_dtoa_r+0x850>
 801b4aa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801b4ae:	9e08      	ldr	r6, [sp, #32]
 801b4b0:	9d05      	ldr	r5, [sp, #20]
 801b4b2:	9a05      	ldr	r2, [sp, #20]
 801b4b4:	441a      	add	r2, r3
 801b4b6:	9205      	str	r2, [sp, #20]
 801b4b8:	9a06      	ldr	r2, [sp, #24]
 801b4ba:	2101      	movs	r1, #1
 801b4bc:	441a      	add	r2, r3
 801b4be:	4620      	mov	r0, r4
 801b4c0:	9206      	str	r2, [sp, #24]
 801b4c2:	f000 fc53 	bl	801bd6c <__i2b>
 801b4c6:	4607      	mov	r7, r0
 801b4c8:	2d00      	cmp	r5, #0
 801b4ca:	dd0c      	ble.n	801b4e6 <_dtoa_r+0x73e>
 801b4cc:	9b06      	ldr	r3, [sp, #24]
 801b4ce:	2b00      	cmp	r3, #0
 801b4d0:	dd09      	ble.n	801b4e6 <_dtoa_r+0x73e>
 801b4d2:	42ab      	cmp	r3, r5
 801b4d4:	9a05      	ldr	r2, [sp, #20]
 801b4d6:	bfa8      	it	ge
 801b4d8:	462b      	movge	r3, r5
 801b4da:	1ad2      	subs	r2, r2, r3
 801b4dc:	9205      	str	r2, [sp, #20]
 801b4de:	9a06      	ldr	r2, [sp, #24]
 801b4e0:	1aed      	subs	r5, r5, r3
 801b4e2:	1ad3      	subs	r3, r2, r3
 801b4e4:	9306      	str	r3, [sp, #24]
 801b4e6:	9b08      	ldr	r3, [sp, #32]
 801b4e8:	b1f3      	cbz	r3, 801b528 <_dtoa_r+0x780>
 801b4ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b4ec:	2b00      	cmp	r3, #0
 801b4ee:	f000 80a5 	beq.w	801b63c <_dtoa_r+0x894>
 801b4f2:	2e00      	cmp	r6, #0
 801b4f4:	dd10      	ble.n	801b518 <_dtoa_r+0x770>
 801b4f6:	4639      	mov	r1, r7
 801b4f8:	4632      	mov	r2, r6
 801b4fa:	4620      	mov	r0, r4
 801b4fc:	f000 fccc 	bl	801be98 <__pow5mult>
 801b500:	4652      	mov	r2, sl
 801b502:	4601      	mov	r1, r0
 801b504:	4607      	mov	r7, r0
 801b506:	4620      	mov	r0, r4
 801b508:	f000 fc39 	bl	801bd7e <__multiply>
 801b50c:	4651      	mov	r1, sl
 801b50e:	4680      	mov	r8, r0
 801b510:	4620      	mov	r0, r4
 801b512:	f000 fb8b 	bl	801bc2c <_Bfree>
 801b516:	46c2      	mov	sl, r8
 801b518:	9b08      	ldr	r3, [sp, #32]
 801b51a:	1b9a      	subs	r2, r3, r6
 801b51c:	d004      	beq.n	801b528 <_dtoa_r+0x780>
 801b51e:	4651      	mov	r1, sl
 801b520:	4620      	mov	r0, r4
 801b522:	f000 fcb9 	bl	801be98 <__pow5mult>
 801b526:	4682      	mov	sl, r0
 801b528:	2101      	movs	r1, #1
 801b52a:	4620      	mov	r0, r4
 801b52c:	f000 fc1e 	bl	801bd6c <__i2b>
 801b530:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b532:	2b00      	cmp	r3, #0
 801b534:	4606      	mov	r6, r0
 801b536:	f340 8083 	ble.w	801b640 <_dtoa_r+0x898>
 801b53a:	461a      	mov	r2, r3
 801b53c:	4601      	mov	r1, r0
 801b53e:	4620      	mov	r0, r4
 801b540:	f000 fcaa 	bl	801be98 <__pow5mult>
 801b544:	9b07      	ldr	r3, [sp, #28]
 801b546:	2b01      	cmp	r3, #1
 801b548:	4606      	mov	r6, r0
 801b54a:	dd7c      	ble.n	801b646 <_dtoa_r+0x89e>
 801b54c:	f04f 0800 	mov.w	r8, #0
 801b550:	6933      	ldr	r3, [r6, #16]
 801b552:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801b556:	6918      	ldr	r0, [r3, #16]
 801b558:	f000 fbba 	bl	801bcd0 <__hi0bits>
 801b55c:	f1c0 0020 	rsb	r0, r0, #32
 801b560:	9b06      	ldr	r3, [sp, #24]
 801b562:	4418      	add	r0, r3
 801b564:	f010 001f 	ands.w	r0, r0, #31
 801b568:	f000 8096 	beq.w	801b698 <_dtoa_r+0x8f0>
 801b56c:	f1c0 0320 	rsb	r3, r0, #32
 801b570:	2b04      	cmp	r3, #4
 801b572:	f340 8087 	ble.w	801b684 <_dtoa_r+0x8dc>
 801b576:	9b05      	ldr	r3, [sp, #20]
 801b578:	f1c0 001c 	rsb	r0, r0, #28
 801b57c:	4403      	add	r3, r0
 801b57e:	9305      	str	r3, [sp, #20]
 801b580:	9b06      	ldr	r3, [sp, #24]
 801b582:	4405      	add	r5, r0
 801b584:	4403      	add	r3, r0
 801b586:	9306      	str	r3, [sp, #24]
 801b588:	9b05      	ldr	r3, [sp, #20]
 801b58a:	2b00      	cmp	r3, #0
 801b58c:	dd05      	ble.n	801b59a <_dtoa_r+0x7f2>
 801b58e:	4651      	mov	r1, sl
 801b590:	461a      	mov	r2, r3
 801b592:	4620      	mov	r0, r4
 801b594:	f000 fcce 	bl	801bf34 <__lshift>
 801b598:	4682      	mov	sl, r0
 801b59a:	9b06      	ldr	r3, [sp, #24]
 801b59c:	2b00      	cmp	r3, #0
 801b59e:	dd05      	ble.n	801b5ac <_dtoa_r+0x804>
 801b5a0:	4631      	mov	r1, r6
 801b5a2:	461a      	mov	r2, r3
 801b5a4:	4620      	mov	r0, r4
 801b5a6:	f000 fcc5 	bl	801bf34 <__lshift>
 801b5aa:	4606      	mov	r6, r0
 801b5ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b5ae:	2b00      	cmp	r3, #0
 801b5b0:	d074      	beq.n	801b69c <_dtoa_r+0x8f4>
 801b5b2:	4631      	mov	r1, r6
 801b5b4:	4650      	mov	r0, sl
 801b5b6:	f000 fd0e 	bl	801bfd6 <__mcmp>
 801b5ba:	2800      	cmp	r0, #0
 801b5bc:	da6e      	bge.n	801b69c <_dtoa_r+0x8f4>
 801b5be:	2300      	movs	r3, #0
 801b5c0:	4651      	mov	r1, sl
 801b5c2:	220a      	movs	r2, #10
 801b5c4:	4620      	mov	r0, r4
 801b5c6:	f000 fb48 	bl	801bc5a <__multadd>
 801b5ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b5cc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801b5d0:	4682      	mov	sl, r0
 801b5d2:	2b00      	cmp	r3, #0
 801b5d4:	f000 81a8 	beq.w	801b928 <_dtoa_r+0xb80>
 801b5d8:	2300      	movs	r3, #0
 801b5da:	4639      	mov	r1, r7
 801b5dc:	220a      	movs	r2, #10
 801b5de:	4620      	mov	r0, r4
 801b5e0:	f000 fb3b 	bl	801bc5a <__multadd>
 801b5e4:	9b04      	ldr	r3, [sp, #16]
 801b5e6:	2b00      	cmp	r3, #0
 801b5e8:	4607      	mov	r7, r0
 801b5ea:	f300 80c8 	bgt.w	801b77e <_dtoa_r+0x9d6>
 801b5ee:	9b07      	ldr	r3, [sp, #28]
 801b5f0:	2b02      	cmp	r3, #2
 801b5f2:	f340 80c4 	ble.w	801b77e <_dtoa_r+0x9d6>
 801b5f6:	e059      	b.n	801b6ac <_dtoa_r+0x904>
 801b5f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801b5fa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801b5fe:	e756      	b.n	801b4ae <_dtoa_r+0x706>
 801b600:	9b03      	ldr	r3, [sp, #12]
 801b602:	1e5e      	subs	r6, r3, #1
 801b604:	9b08      	ldr	r3, [sp, #32]
 801b606:	42b3      	cmp	r3, r6
 801b608:	bfbf      	itttt	lt
 801b60a:	9b08      	ldrlt	r3, [sp, #32]
 801b60c:	9608      	strlt	r6, [sp, #32]
 801b60e:	1af2      	sublt	r2, r6, r3
 801b610:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 801b612:	bfb6      	itet	lt
 801b614:	189b      	addlt	r3, r3, r2
 801b616:	1b9e      	subge	r6, r3, r6
 801b618:	930b      	strlt	r3, [sp, #44]	; 0x2c
 801b61a:	9b03      	ldr	r3, [sp, #12]
 801b61c:	bfb8      	it	lt
 801b61e:	2600      	movlt	r6, #0
 801b620:	2b00      	cmp	r3, #0
 801b622:	bfb9      	ittee	lt
 801b624:	9b05      	ldrlt	r3, [sp, #20]
 801b626:	9a03      	ldrlt	r2, [sp, #12]
 801b628:	9d05      	ldrge	r5, [sp, #20]
 801b62a:	9b03      	ldrge	r3, [sp, #12]
 801b62c:	bfbc      	itt	lt
 801b62e:	1a9d      	sublt	r5, r3, r2
 801b630:	2300      	movlt	r3, #0
 801b632:	e73e      	b.n	801b4b2 <_dtoa_r+0x70a>
 801b634:	9e08      	ldr	r6, [sp, #32]
 801b636:	9d05      	ldr	r5, [sp, #20]
 801b638:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801b63a:	e745      	b.n	801b4c8 <_dtoa_r+0x720>
 801b63c:	9a08      	ldr	r2, [sp, #32]
 801b63e:	e76e      	b.n	801b51e <_dtoa_r+0x776>
 801b640:	9b07      	ldr	r3, [sp, #28]
 801b642:	2b01      	cmp	r3, #1
 801b644:	dc19      	bgt.n	801b67a <_dtoa_r+0x8d2>
 801b646:	9b00      	ldr	r3, [sp, #0]
 801b648:	b9bb      	cbnz	r3, 801b67a <_dtoa_r+0x8d2>
 801b64a:	9b01      	ldr	r3, [sp, #4]
 801b64c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b650:	b99b      	cbnz	r3, 801b67a <_dtoa_r+0x8d2>
 801b652:	9b01      	ldr	r3, [sp, #4]
 801b654:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801b658:	0d1b      	lsrs	r3, r3, #20
 801b65a:	051b      	lsls	r3, r3, #20
 801b65c:	b183      	cbz	r3, 801b680 <_dtoa_r+0x8d8>
 801b65e:	9b05      	ldr	r3, [sp, #20]
 801b660:	3301      	adds	r3, #1
 801b662:	9305      	str	r3, [sp, #20]
 801b664:	9b06      	ldr	r3, [sp, #24]
 801b666:	3301      	adds	r3, #1
 801b668:	9306      	str	r3, [sp, #24]
 801b66a:	f04f 0801 	mov.w	r8, #1
 801b66e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b670:	2b00      	cmp	r3, #0
 801b672:	f47f af6d 	bne.w	801b550 <_dtoa_r+0x7a8>
 801b676:	2001      	movs	r0, #1
 801b678:	e772      	b.n	801b560 <_dtoa_r+0x7b8>
 801b67a:	f04f 0800 	mov.w	r8, #0
 801b67e:	e7f6      	b.n	801b66e <_dtoa_r+0x8c6>
 801b680:	4698      	mov	r8, r3
 801b682:	e7f4      	b.n	801b66e <_dtoa_r+0x8c6>
 801b684:	d080      	beq.n	801b588 <_dtoa_r+0x7e0>
 801b686:	9a05      	ldr	r2, [sp, #20]
 801b688:	331c      	adds	r3, #28
 801b68a:	441a      	add	r2, r3
 801b68c:	9205      	str	r2, [sp, #20]
 801b68e:	9a06      	ldr	r2, [sp, #24]
 801b690:	441a      	add	r2, r3
 801b692:	441d      	add	r5, r3
 801b694:	4613      	mov	r3, r2
 801b696:	e776      	b.n	801b586 <_dtoa_r+0x7de>
 801b698:	4603      	mov	r3, r0
 801b69a:	e7f4      	b.n	801b686 <_dtoa_r+0x8de>
 801b69c:	9b03      	ldr	r3, [sp, #12]
 801b69e:	2b00      	cmp	r3, #0
 801b6a0:	dc36      	bgt.n	801b710 <_dtoa_r+0x968>
 801b6a2:	9b07      	ldr	r3, [sp, #28]
 801b6a4:	2b02      	cmp	r3, #2
 801b6a6:	dd33      	ble.n	801b710 <_dtoa_r+0x968>
 801b6a8:	9b03      	ldr	r3, [sp, #12]
 801b6aa:	9304      	str	r3, [sp, #16]
 801b6ac:	9b04      	ldr	r3, [sp, #16]
 801b6ae:	b963      	cbnz	r3, 801b6ca <_dtoa_r+0x922>
 801b6b0:	4631      	mov	r1, r6
 801b6b2:	2205      	movs	r2, #5
 801b6b4:	4620      	mov	r0, r4
 801b6b6:	f000 fad0 	bl	801bc5a <__multadd>
 801b6ba:	4601      	mov	r1, r0
 801b6bc:	4606      	mov	r6, r0
 801b6be:	4650      	mov	r0, sl
 801b6c0:	f000 fc89 	bl	801bfd6 <__mcmp>
 801b6c4:	2800      	cmp	r0, #0
 801b6c6:	f73f adb6 	bgt.w	801b236 <_dtoa_r+0x48e>
 801b6ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b6cc:	9d02      	ldr	r5, [sp, #8]
 801b6ce:	ea6f 0b03 	mvn.w	fp, r3
 801b6d2:	2300      	movs	r3, #0
 801b6d4:	9303      	str	r3, [sp, #12]
 801b6d6:	4631      	mov	r1, r6
 801b6d8:	4620      	mov	r0, r4
 801b6da:	f000 faa7 	bl	801bc2c <_Bfree>
 801b6de:	2f00      	cmp	r7, #0
 801b6e0:	f43f aea6 	beq.w	801b430 <_dtoa_r+0x688>
 801b6e4:	9b03      	ldr	r3, [sp, #12]
 801b6e6:	b12b      	cbz	r3, 801b6f4 <_dtoa_r+0x94c>
 801b6e8:	42bb      	cmp	r3, r7
 801b6ea:	d003      	beq.n	801b6f4 <_dtoa_r+0x94c>
 801b6ec:	4619      	mov	r1, r3
 801b6ee:	4620      	mov	r0, r4
 801b6f0:	f000 fa9c 	bl	801bc2c <_Bfree>
 801b6f4:	4639      	mov	r1, r7
 801b6f6:	4620      	mov	r0, r4
 801b6f8:	f000 fa98 	bl	801bc2c <_Bfree>
 801b6fc:	e698      	b.n	801b430 <_dtoa_r+0x688>
 801b6fe:	2600      	movs	r6, #0
 801b700:	4637      	mov	r7, r6
 801b702:	e7e2      	b.n	801b6ca <_dtoa_r+0x922>
 801b704:	46bb      	mov	fp, r7
 801b706:	4637      	mov	r7, r6
 801b708:	e595      	b.n	801b236 <_dtoa_r+0x48e>
 801b70a:	bf00      	nop
 801b70c:	40240000 	.word	0x40240000
 801b710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b712:	bb93      	cbnz	r3, 801b77a <_dtoa_r+0x9d2>
 801b714:	9b03      	ldr	r3, [sp, #12]
 801b716:	9304      	str	r3, [sp, #16]
 801b718:	9d02      	ldr	r5, [sp, #8]
 801b71a:	4631      	mov	r1, r6
 801b71c:	4650      	mov	r0, sl
 801b71e:	f7ff fab5 	bl	801ac8c <quorem>
 801b722:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801b726:	f805 9b01 	strb.w	r9, [r5], #1
 801b72a:	9b02      	ldr	r3, [sp, #8]
 801b72c:	9a04      	ldr	r2, [sp, #16]
 801b72e:	1aeb      	subs	r3, r5, r3
 801b730:	429a      	cmp	r2, r3
 801b732:	f300 80dc 	bgt.w	801b8ee <_dtoa_r+0xb46>
 801b736:	9b02      	ldr	r3, [sp, #8]
 801b738:	2a01      	cmp	r2, #1
 801b73a:	bfac      	ite	ge
 801b73c:	189b      	addge	r3, r3, r2
 801b73e:	3301      	addlt	r3, #1
 801b740:	4698      	mov	r8, r3
 801b742:	2300      	movs	r3, #0
 801b744:	9303      	str	r3, [sp, #12]
 801b746:	4651      	mov	r1, sl
 801b748:	2201      	movs	r2, #1
 801b74a:	4620      	mov	r0, r4
 801b74c:	f000 fbf2 	bl	801bf34 <__lshift>
 801b750:	4631      	mov	r1, r6
 801b752:	4682      	mov	sl, r0
 801b754:	f000 fc3f 	bl	801bfd6 <__mcmp>
 801b758:	2800      	cmp	r0, #0
 801b75a:	f300 808d 	bgt.w	801b878 <_dtoa_r+0xad0>
 801b75e:	d103      	bne.n	801b768 <_dtoa_r+0x9c0>
 801b760:	f019 0f01 	tst.w	r9, #1
 801b764:	f040 8088 	bne.w	801b878 <_dtoa_r+0xad0>
 801b768:	4645      	mov	r5, r8
 801b76a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801b76e:	2b30      	cmp	r3, #48	; 0x30
 801b770:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 801b774:	d1af      	bne.n	801b6d6 <_dtoa_r+0x92e>
 801b776:	4615      	mov	r5, r2
 801b778:	e7f7      	b.n	801b76a <_dtoa_r+0x9c2>
 801b77a:	9b03      	ldr	r3, [sp, #12]
 801b77c:	9304      	str	r3, [sp, #16]
 801b77e:	2d00      	cmp	r5, #0
 801b780:	dd05      	ble.n	801b78e <_dtoa_r+0x9e6>
 801b782:	4639      	mov	r1, r7
 801b784:	462a      	mov	r2, r5
 801b786:	4620      	mov	r0, r4
 801b788:	f000 fbd4 	bl	801bf34 <__lshift>
 801b78c:	4607      	mov	r7, r0
 801b78e:	f1b8 0f00 	cmp.w	r8, #0
 801b792:	d04c      	beq.n	801b82e <_dtoa_r+0xa86>
 801b794:	6879      	ldr	r1, [r7, #4]
 801b796:	4620      	mov	r0, r4
 801b798:	f000 fa14 	bl	801bbc4 <_Balloc>
 801b79c:	693a      	ldr	r2, [r7, #16]
 801b79e:	3202      	adds	r2, #2
 801b7a0:	4605      	mov	r5, r0
 801b7a2:	0092      	lsls	r2, r2, #2
 801b7a4:	f107 010c 	add.w	r1, r7, #12
 801b7a8:	300c      	adds	r0, #12
 801b7aa:	f7fe f987 	bl	8019abc <memcpy>
 801b7ae:	2201      	movs	r2, #1
 801b7b0:	4629      	mov	r1, r5
 801b7b2:	4620      	mov	r0, r4
 801b7b4:	f000 fbbe 	bl	801bf34 <__lshift>
 801b7b8:	9b00      	ldr	r3, [sp, #0]
 801b7ba:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801b7be:	9703      	str	r7, [sp, #12]
 801b7c0:	f003 0301 	and.w	r3, r3, #1
 801b7c4:	4607      	mov	r7, r0
 801b7c6:	9305      	str	r3, [sp, #20]
 801b7c8:	4631      	mov	r1, r6
 801b7ca:	4650      	mov	r0, sl
 801b7cc:	f7ff fa5e 	bl	801ac8c <quorem>
 801b7d0:	9903      	ldr	r1, [sp, #12]
 801b7d2:	4605      	mov	r5, r0
 801b7d4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801b7d8:	4650      	mov	r0, sl
 801b7da:	f000 fbfc 	bl	801bfd6 <__mcmp>
 801b7de:	463a      	mov	r2, r7
 801b7e0:	9000      	str	r0, [sp, #0]
 801b7e2:	4631      	mov	r1, r6
 801b7e4:	4620      	mov	r0, r4
 801b7e6:	f000 fc10 	bl	801c00a <__mdiff>
 801b7ea:	68c3      	ldr	r3, [r0, #12]
 801b7ec:	4602      	mov	r2, r0
 801b7ee:	bb03      	cbnz	r3, 801b832 <_dtoa_r+0xa8a>
 801b7f0:	4601      	mov	r1, r0
 801b7f2:	9006      	str	r0, [sp, #24]
 801b7f4:	4650      	mov	r0, sl
 801b7f6:	f000 fbee 	bl	801bfd6 <__mcmp>
 801b7fa:	9a06      	ldr	r2, [sp, #24]
 801b7fc:	4603      	mov	r3, r0
 801b7fe:	4611      	mov	r1, r2
 801b800:	4620      	mov	r0, r4
 801b802:	9306      	str	r3, [sp, #24]
 801b804:	f000 fa12 	bl	801bc2c <_Bfree>
 801b808:	9b06      	ldr	r3, [sp, #24]
 801b80a:	b9a3      	cbnz	r3, 801b836 <_dtoa_r+0xa8e>
 801b80c:	9a07      	ldr	r2, [sp, #28]
 801b80e:	b992      	cbnz	r2, 801b836 <_dtoa_r+0xa8e>
 801b810:	9a05      	ldr	r2, [sp, #20]
 801b812:	b982      	cbnz	r2, 801b836 <_dtoa_r+0xa8e>
 801b814:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801b818:	d029      	beq.n	801b86e <_dtoa_r+0xac6>
 801b81a:	9b00      	ldr	r3, [sp, #0]
 801b81c:	2b00      	cmp	r3, #0
 801b81e:	dd01      	ble.n	801b824 <_dtoa_r+0xa7c>
 801b820:	f105 0931 	add.w	r9, r5, #49	; 0x31
 801b824:	f108 0501 	add.w	r5, r8, #1
 801b828:	f888 9000 	strb.w	r9, [r8]
 801b82c:	e753      	b.n	801b6d6 <_dtoa_r+0x92e>
 801b82e:	4638      	mov	r0, r7
 801b830:	e7c2      	b.n	801b7b8 <_dtoa_r+0xa10>
 801b832:	2301      	movs	r3, #1
 801b834:	e7e3      	b.n	801b7fe <_dtoa_r+0xa56>
 801b836:	9a00      	ldr	r2, [sp, #0]
 801b838:	2a00      	cmp	r2, #0
 801b83a:	db04      	blt.n	801b846 <_dtoa_r+0xa9e>
 801b83c:	d125      	bne.n	801b88a <_dtoa_r+0xae2>
 801b83e:	9a07      	ldr	r2, [sp, #28]
 801b840:	bb1a      	cbnz	r2, 801b88a <_dtoa_r+0xae2>
 801b842:	9a05      	ldr	r2, [sp, #20]
 801b844:	bb0a      	cbnz	r2, 801b88a <_dtoa_r+0xae2>
 801b846:	2b00      	cmp	r3, #0
 801b848:	ddec      	ble.n	801b824 <_dtoa_r+0xa7c>
 801b84a:	4651      	mov	r1, sl
 801b84c:	2201      	movs	r2, #1
 801b84e:	4620      	mov	r0, r4
 801b850:	f000 fb70 	bl	801bf34 <__lshift>
 801b854:	4631      	mov	r1, r6
 801b856:	4682      	mov	sl, r0
 801b858:	f000 fbbd 	bl	801bfd6 <__mcmp>
 801b85c:	2800      	cmp	r0, #0
 801b85e:	dc03      	bgt.n	801b868 <_dtoa_r+0xac0>
 801b860:	d1e0      	bne.n	801b824 <_dtoa_r+0xa7c>
 801b862:	f019 0f01 	tst.w	r9, #1
 801b866:	d0dd      	beq.n	801b824 <_dtoa_r+0xa7c>
 801b868:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801b86c:	d1d8      	bne.n	801b820 <_dtoa_r+0xa78>
 801b86e:	2339      	movs	r3, #57	; 0x39
 801b870:	f888 3000 	strb.w	r3, [r8]
 801b874:	f108 0801 	add.w	r8, r8, #1
 801b878:	4645      	mov	r5, r8
 801b87a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801b87e:	2b39      	cmp	r3, #57	; 0x39
 801b880:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 801b884:	d03b      	beq.n	801b8fe <_dtoa_r+0xb56>
 801b886:	3301      	adds	r3, #1
 801b888:	e040      	b.n	801b90c <_dtoa_r+0xb64>
 801b88a:	2b00      	cmp	r3, #0
 801b88c:	f108 0501 	add.w	r5, r8, #1
 801b890:	dd05      	ble.n	801b89e <_dtoa_r+0xaf6>
 801b892:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801b896:	d0ea      	beq.n	801b86e <_dtoa_r+0xac6>
 801b898:	f109 0901 	add.w	r9, r9, #1
 801b89c:	e7c4      	b.n	801b828 <_dtoa_r+0xa80>
 801b89e:	9b02      	ldr	r3, [sp, #8]
 801b8a0:	9a04      	ldr	r2, [sp, #16]
 801b8a2:	f805 9c01 	strb.w	r9, [r5, #-1]
 801b8a6:	1aeb      	subs	r3, r5, r3
 801b8a8:	4293      	cmp	r3, r2
 801b8aa:	46a8      	mov	r8, r5
 801b8ac:	f43f af4b 	beq.w	801b746 <_dtoa_r+0x99e>
 801b8b0:	4651      	mov	r1, sl
 801b8b2:	2300      	movs	r3, #0
 801b8b4:	220a      	movs	r2, #10
 801b8b6:	4620      	mov	r0, r4
 801b8b8:	f000 f9cf 	bl	801bc5a <__multadd>
 801b8bc:	9b03      	ldr	r3, [sp, #12]
 801b8be:	9903      	ldr	r1, [sp, #12]
 801b8c0:	42bb      	cmp	r3, r7
 801b8c2:	4682      	mov	sl, r0
 801b8c4:	f04f 0300 	mov.w	r3, #0
 801b8c8:	f04f 020a 	mov.w	r2, #10
 801b8cc:	4620      	mov	r0, r4
 801b8ce:	d104      	bne.n	801b8da <_dtoa_r+0xb32>
 801b8d0:	f000 f9c3 	bl	801bc5a <__multadd>
 801b8d4:	9003      	str	r0, [sp, #12]
 801b8d6:	4607      	mov	r7, r0
 801b8d8:	e776      	b.n	801b7c8 <_dtoa_r+0xa20>
 801b8da:	f000 f9be 	bl	801bc5a <__multadd>
 801b8de:	2300      	movs	r3, #0
 801b8e0:	9003      	str	r0, [sp, #12]
 801b8e2:	220a      	movs	r2, #10
 801b8e4:	4639      	mov	r1, r7
 801b8e6:	4620      	mov	r0, r4
 801b8e8:	f000 f9b7 	bl	801bc5a <__multadd>
 801b8ec:	e7f3      	b.n	801b8d6 <_dtoa_r+0xb2e>
 801b8ee:	4651      	mov	r1, sl
 801b8f0:	2300      	movs	r3, #0
 801b8f2:	220a      	movs	r2, #10
 801b8f4:	4620      	mov	r0, r4
 801b8f6:	f000 f9b0 	bl	801bc5a <__multadd>
 801b8fa:	4682      	mov	sl, r0
 801b8fc:	e70d      	b.n	801b71a <_dtoa_r+0x972>
 801b8fe:	9b02      	ldr	r3, [sp, #8]
 801b900:	4293      	cmp	r3, r2
 801b902:	d105      	bne.n	801b910 <_dtoa_r+0xb68>
 801b904:	9a02      	ldr	r2, [sp, #8]
 801b906:	f10b 0b01 	add.w	fp, fp, #1
 801b90a:	2331      	movs	r3, #49	; 0x31
 801b90c:	7013      	strb	r3, [r2, #0]
 801b90e:	e6e2      	b.n	801b6d6 <_dtoa_r+0x92e>
 801b910:	4615      	mov	r5, r2
 801b912:	e7b2      	b.n	801b87a <_dtoa_r+0xad2>
 801b914:	4b09      	ldr	r3, [pc, #36]	; (801b93c <_dtoa_r+0xb94>)
 801b916:	f7ff baae 	b.w	801ae76 <_dtoa_r+0xce>
 801b91a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b91c:	2b00      	cmp	r3, #0
 801b91e:	f47f aa88 	bne.w	801ae32 <_dtoa_r+0x8a>
 801b922:	4b07      	ldr	r3, [pc, #28]	; (801b940 <_dtoa_r+0xb98>)
 801b924:	f7ff baa7 	b.w	801ae76 <_dtoa_r+0xce>
 801b928:	9b04      	ldr	r3, [sp, #16]
 801b92a:	2b00      	cmp	r3, #0
 801b92c:	f73f aef4 	bgt.w	801b718 <_dtoa_r+0x970>
 801b930:	9b07      	ldr	r3, [sp, #28]
 801b932:	2b02      	cmp	r3, #2
 801b934:	f77f aef0 	ble.w	801b718 <_dtoa_r+0x970>
 801b938:	e6b8      	b.n	801b6ac <_dtoa_r+0x904>
 801b93a:	bf00      	nop
 801b93c:	0802b64b 	.word	0x0802b64b
 801b940:	080ec480 	.word	0x080ec480

0801b944 <_malloc_trim_r>:
 801b944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b948:	4f25      	ldr	r7, [pc, #148]	; (801b9e0 <_malloc_trim_r+0x9c>)
 801b94a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 801b9ec <_malloc_trim_r+0xa8>
 801b94e:	4689      	mov	r9, r1
 801b950:	4606      	mov	r6, r0
 801b952:	f7fe f8c7 	bl	8019ae4 <__malloc_lock>
 801b956:	68bb      	ldr	r3, [r7, #8]
 801b958:	685d      	ldr	r5, [r3, #4]
 801b95a:	f1a8 0411 	sub.w	r4, r8, #17
 801b95e:	f025 0503 	bic.w	r5, r5, #3
 801b962:	eba4 0409 	sub.w	r4, r4, r9
 801b966:	442c      	add	r4, r5
 801b968:	fbb4 f4f8 	udiv	r4, r4, r8
 801b96c:	3c01      	subs	r4, #1
 801b96e:	fb08 f404 	mul.w	r4, r8, r4
 801b972:	4544      	cmp	r4, r8
 801b974:	da05      	bge.n	801b982 <_malloc_trim_r+0x3e>
 801b976:	4630      	mov	r0, r6
 801b978:	f7fe f8ba 	bl	8019af0 <__malloc_unlock>
 801b97c:	2000      	movs	r0, #0
 801b97e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b982:	2100      	movs	r1, #0
 801b984:	4630      	mov	r0, r6
 801b986:	f7fe f8b9 	bl	8019afc <_sbrk_r>
 801b98a:	68bb      	ldr	r3, [r7, #8]
 801b98c:	442b      	add	r3, r5
 801b98e:	4298      	cmp	r0, r3
 801b990:	d1f1      	bne.n	801b976 <_malloc_trim_r+0x32>
 801b992:	4261      	negs	r1, r4
 801b994:	4630      	mov	r0, r6
 801b996:	f7fe f8b1 	bl	8019afc <_sbrk_r>
 801b99a:	3001      	adds	r0, #1
 801b99c:	d110      	bne.n	801b9c0 <_malloc_trim_r+0x7c>
 801b99e:	2100      	movs	r1, #0
 801b9a0:	4630      	mov	r0, r6
 801b9a2:	f7fe f8ab 	bl	8019afc <_sbrk_r>
 801b9a6:	68ba      	ldr	r2, [r7, #8]
 801b9a8:	1a83      	subs	r3, r0, r2
 801b9aa:	2b0f      	cmp	r3, #15
 801b9ac:	dde3      	ble.n	801b976 <_malloc_trim_r+0x32>
 801b9ae:	490d      	ldr	r1, [pc, #52]	; (801b9e4 <_malloc_trim_r+0xa0>)
 801b9b0:	6809      	ldr	r1, [r1, #0]
 801b9b2:	1a40      	subs	r0, r0, r1
 801b9b4:	490c      	ldr	r1, [pc, #48]	; (801b9e8 <_malloc_trim_r+0xa4>)
 801b9b6:	f043 0301 	orr.w	r3, r3, #1
 801b9ba:	6008      	str	r0, [r1, #0]
 801b9bc:	6053      	str	r3, [r2, #4]
 801b9be:	e7da      	b.n	801b976 <_malloc_trim_r+0x32>
 801b9c0:	68bb      	ldr	r3, [r7, #8]
 801b9c2:	4a09      	ldr	r2, [pc, #36]	; (801b9e8 <_malloc_trim_r+0xa4>)
 801b9c4:	1b2d      	subs	r5, r5, r4
 801b9c6:	f045 0501 	orr.w	r5, r5, #1
 801b9ca:	605d      	str	r5, [r3, #4]
 801b9cc:	6813      	ldr	r3, [r2, #0]
 801b9ce:	4630      	mov	r0, r6
 801b9d0:	1b1c      	subs	r4, r3, r4
 801b9d2:	6014      	str	r4, [r2, #0]
 801b9d4:	f7fe f88c 	bl	8019af0 <__malloc_unlock>
 801b9d8:	2001      	movs	r0, #1
 801b9da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b9de:	bf00      	nop
 801b9e0:	20001dc0 	.word	0x20001dc0
 801b9e4:	200021c8 	.word	0x200021c8
 801b9e8:	2000b06c 	.word	0x2000b06c
 801b9ec:	00001000 	.word	0x00001000

0801b9f0 <_free_r>:
 801b9f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b9f4:	4604      	mov	r4, r0
 801b9f6:	4688      	mov	r8, r1
 801b9f8:	2900      	cmp	r1, #0
 801b9fa:	f000 80ab 	beq.w	801bb54 <_free_r+0x164>
 801b9fe:	f7fe f871 	bl	8019ae4 <__malloc_lock>
 801ba02:	f858 2c04 	ldr.w	r2, [r8, #-4]
 801ba06:	4d54      	ldr	r5, [pc, #336]	; (801bb58 <_free_r+0x168>)
 801ba08:	f022 0001 	bic.w	r0, r2, #1
 801ba0c:	f1a8 0308 	sub.w	r3, r8, #8
 801ba10:	181f      	adds	r7, r3, r0
 801ba12:	68a9      	ldr	r1, [r5, #8]
 801ba14:	687e      	ldr	r6, [r7, #4]
 801ba16:	428f      	cmp	r7, r1
 801ba18:	f026 0603 	bic.w	r6, r6, #3
 801ba1c:	f002 0201 	and.w	r2, r2, #1
 801ba20:	d11b      	bne.n	801ba5a <_free_r+0x6a>
 801ba22:	4430      	add	r0, r6
 801ba24:	b93a      	cbnz	r2, 801ba36 <_free_r+0x46>
 801ba26:	f858 2c08 	ldr.w	r2, [r8, #-8]
 801ba2a:	1a9b      	subs	r3, r3, r2
 801ba2c:	4410      	add	r0, r2
 801ba2e:	6899      	ldr	r1, [r3, #8]
 801ba30:	68da      	ldr	r2, [r3, #12]
 801ba32:	60ca      	str	r2, [r1, #12]
 801ba34:	6091      	str	r1, [r2, #8]
 801ba36:	f040 0201 	orr.w	r2, r0, #1
 801ba3a:	605a      	str	r2, [r3, #4]
 801ba3c:	60ab      	str	r3, [r5, #8]
 801ba3e:	4b47      	ldr	r3, [pc, #284]	; (801bb5c <_free_r+0x16c>)
 801ba40:	681b      	ldr	r3, [r3, #0]
 801ba42:	4298      	cmp	r0, r3
 801ba44:	d304      	bcc.n	801ba50 <_free_r+0x60>
 801ba46:	4b46      	ldr	r3, [pc, #280]	; (801bb60 <_free_r+0x170>)
 801ba48:	4620      	mov	r0, r4
 801ba4a:	6819      	ldr	r1, [r3, #0]
 801ba4c:	f7ff ff7a 	bl	801b944 <_malloc_trim_r>
 801ba50:	4620      	mov	r0, r4
 801ba52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ba56:	f7fe b84b 	b.w	8019af0 <__malloc_unlock>
 801ba5a:	607e      	str	r6, [r7, #4]
 801ba5c:	2a00      	cmp	r2, #0
 801ba5e:	d139      	bne.n	801bad4 <_free_r+0xe4>
 801ba60:	f858 1c08 	ldr.w	r1, [r8, #-8]
 801ba64:	1a5b      	subs	r3, r3, r1
 801ba66:	4408      	add	r0, r1
 801ba68:	6899      	ldr	r1, [r3, #8]
 801ba6a:	f105 0e08 	add.w	lr, r5, #8
 801ba6e:	4571      	cmp	r1, lr
 801ba70:	d032      	beq.n	801bad8 <_free_r+0xe8>
 801ba72:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 801ba76:	f8c1 e00c 	str.w	lr, [r1, #12]
 801ba7a:	f8ce 1008 	str.w	r1, [lr, #8]
 801ba7e:	19b9      	adds	r1, r7, r6
 801ba80:	6849      	ldr	r1, [r1, #4]
 801ba82:	07c9      	lsls	r1, r1, #31
 801ba84:	d40a      	bmi.n	801ba9c <_free_r+0xac>
 801ba86:	4430      	add	r0, r6
 801ba88:	68b9      	ldr	r1, [r7, #8]
 801ba8a:	bb3a      	cbnz	r2, 801badc <_free_r+0xec>
 801ba8c:	4e35      	ldr	r6, [pc, #212]	; (801bb64 <_free_r+0x174>)
 801ba8e:	42b1      	cmp	r1, r6
 801ba90:	d124      	bne.n	801badc <_free_r+0xec>
 801ba92:	616b      	str	r3, [r5, #20]
 801ba94:	612b      	str	r3, [r5, #16]
 801ba96:	2201      	movs	r2, #1
 801ba98:	60d9      	str	r1, [r3, #12]
 801ba9a:	6099      	str	r1, [r3, #8]
 801ba9c:	f040 0101 	orr.w	r1, r0, #1
 801baa0:	6059      	str	r1, [r3, #4]
 801baa2:	5018      	str	r0, [r3, r0]
 801baa4:	2a00      	cmp	r2, #0
 801baa6:	d1d3      	bne.n	801ba50 <_free_r+0x60>
 801baa8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 801baac:	d21a      	bcs.n	801bae4 <_free_r+0xf4>
 801baae:	08c0      	lsrs	r0, r0, #3
 801bab0:	1081      	asrs	r1, r0, #2
 801bab2:	2201      	movs	r2, #1
 801bab4:	408a      	lsls	r2, r1
 801bab6:	6869      	ldr	r1, [r5, #4]
 801bab8:	3001      	adds	r0, #1
 801baba:	430a      	orrs	r2, r1
 801babc:	606a      	str	r2, [r5, #4]
 801babe:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 801bac2:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 801bac6:	6099      	str	r1, [r3, #8]
 801bac8:	3a08      	subs	r2, #8
 801baca:	60da      	str	r2, [r3, #12]
 801bacc:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 801bad0:	60cb      	str	r3, [r1, #12]
 801bad2:	e7bd      	b.n	801ba50 <_free_r+0x60>
 801bad4:	2200      	movs	r2, #0
 801bad6:	e7d2      	b.n	801ba7e <_free_r+0x8e>
 801bad8:	2201      	movs	r2, #1
 801bada:	e7d0      	b.n	801ba7e <_free_r+0x8e>
 801badc:	68fe      	ldr	r6, [r7, #12]
 801bade:	60ce      	str	r6, [r1, #12]
 801bae0:	60b1      	str	r1, [r6, #8]
 801bae2:	e7db      	b.n	801ba9c <_free_r+0xac>
 801bae4:	0a42      	lsrs	r2, r0, #9
 801bae6:	2a04      	cmp	r2, #4
 801bae8:	d813      	bhi.n	801bb12 <_free_r+0x122>
 801baea:	0982      	lsrs	r2, r0, #6
 801baec:	3238      	adds	r2, #56	; 0x38
 801baee:	1c51      	adds	r1, r2, #1
 801baf0:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 801baf4:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 801baf8:	428e      	cmp	r6, r1
 801bafa:	d124      	bne.n	801bb46 <_free_r+0x156>
 801bafc:	2001      	movs	r0, #1
 801bafe:	1092      	asrs	r2, r2, #2
 801bb00:	fa00 f202 	lsl.w	r2, r0, r2
 801bb04:	6868      	ldr	r0, [r5, #4]
 801bb06:	4302      	orrs	r2, r0
 801bb08:	606a      	str	r2, [r5, #4]
 801bb0a:	60de      	str	r6, [r3, #12]
 801bb0c:	6099      	str	r1, [r3, #8]
 801bb0e:	60b3      	str	r3, [r6, #8]
 801bb10:	e7de      	b.n	801bad0 <_free_r+0xe0>
 801bb12:	2a14      	cmp	r2, #20
 801bb14:	d801      	bhi.n	801bb1a <_free_r+0x12a>
 801bb16:	325b      	adds	r2, #91	; 0x5b
 801bb18:	e7e9      	b.n	801baee <_free_r+0xfe>
 801bb1a:	2a54      	cmp	r2, #84	; 0x54
 801bb1c:	d802      	bhi.n	801bb24 <_free_r+0x134>
 801bb1e:	0b02      	lsrs	r2, r0, #12
 801bb20:	326e      	adds	r2, #110	; 0x6e
 801bb22:	e7e4      	b.n	801baee <_free_r+0xfe>
 801bb24:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 801bb28:	d802      	bhi.n	801bb30 <_free_r+0x140>
 801bb2a:	0bc2      	lsrs	r2, r0, #15
 801bb2c:	3277      	adds	r2, #119	; 0x77
 801bb2e:	e7de      	b.n	801baee <_free_r+0xfe>
 801bb30:	f240 5154 	movw	r1, #1364	; 0x554
 801bb34:	428a      	cmp	r2, r1
 801bb36:	bf9a      	itte	ls
 801bb38:	0c82      	lsrls	r2, r0, #18
 801bb3a:	327c      	addls	r2, #124	; 0x7c
 801bb3c:	227e      	movhi	r2, #126	; 0x7e
 801bb3e:	e7d6      	b.n	801baee <_free_r+0xfe>
 801bb40:	6889      	ldr	r1, [r1, #8]
 801bb42:	428e      	cmp	r6, r1
 801bb44:	d004      	beq.n	801bb50 <_free_r+0x160>
 801bb46:	684a      	ldr	r2, [r1, #4]
 801bb48:	f022 0203 	bic.w	r2, r2, #3
 801bb4c:	4290      	cmp	r0, r2
 801bb4e:	d3f7      	bcc.n	801bb40 <_free_r+0x150>
 801bb50:	68ce      	ldr	r6, [r1, #12]
 801bb52:	e7da      	b.n	801bb0a <_free_r+0x11a>
 801bb54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bb58:	20001dc0 	.word	0x20001dc0
 801bb5c:	200021cc 	.word	0x200021cc
 801bb60:	2000b09c 	.word	0x2000b09c
 801bb64:	20001dc8 	.word	0x20001dc8

0801bb68 <__locale_ctype_ptr_l>:
 801bb68:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 801bb6c:	4770      	bx	lr
	...

0801bb70 <_localeconv_r>:
 801bb70:	4b04      	ldr	r3, [pc, #16]	; (801bb84 <_localeconv_r+0x14>)
 801bb72:	681b      	ldr	r3, [r3, #0]
 801bb74:	6a18      	ldr	r0, [r3, #32]
 801bb76:	4b04      	ldr	r3, [pc, #16]	; (801bb88 <_localeconv_r+0x18>)
 801bb78:	2800      	cmp	r0, #0
 801bb7a:	bf08      	it	eq
 801bb7c:	4618      	moveq	r0, r3
 801bb7e:	30f0      	adds	r0, #240	; 0xf0
 801bb80:	4770      	bx	lr
 801bb82:	bf00      	nop
 801bb84:	20001ccc 	.word	0x20001ccc
 801bb88:	200021d0 	.word	0x200021d0

0801bb8c <__retarget_lock_acquire_recursive>:
 801bb8c:	4770      	bx	lr

0801bb8e <__retarget_lock_release_recursive>:
 801bb8e:	4770      	bx	lr

0801bb90 <malloc>:
 801bb90:	4b02      	ldr	r3, [pc, #8]	; (801bb9c <malloc+0xc>)
 801bb92:	4601      	mov	r1, r0
 801bb94:	6818      	ldr	r0, [r3, #0]
 801bb96:	f7fd bd83 	b.w	80196a0 <_malloc_r>
 801bb9a:	bf00      	nop
 801bb9c:	20001ccc 	.word	0x20001ccc

0801bba0 <__ascii_mbtowc>:
 801bba0:	b082      	sub	sp, #8
 801bba2:	b901      	cbnz	r1, 801bba6 <__ascii_mbtowc+0x6>
 801bba4:	a901      	add	r1, sp, #4
 801bba6:	b142      	cbz	r2, 801bbba <__ascii_mbtowc+0x1a>
 801bba8:	b14b      	cbz	r3, 801bbbe <__ascii_mbtowc+0x1e>
 801bbaa:	7813      	ldrb	r3, [r2, #0]
 801bbac:	600b      	str	r3, [r1, #0]
 801bbae:	7812      	ldrb	r2, [r2, #0]
 801bbb0:	1c10      	adds	r0, r2, #0
 801bbb2:	bf18      	it	ne
 801bbb4:	2001      	movne	r0, #1
 801bbb6:	b002      	add	sp, #8
 801bbb8:	4770      	bx	lr
 801bbba:	4610      	mov	r0, r2
 801bbbc:	e7fb      	b.n	801bbb6 <__ascii_mbtowc+0x16>
 801bbbe:	f06f 0001 	mvn.w	r0, #1
 801bbc2:	e7f8      	b.n	801bbb6 <__ascii_mbtowc+0x16>

0801bbc4 <_Balloc>:
 801bbc4:	b570      	push	{r4, r5, r6, lr}
 801bbc6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801bbc8:	4604      	mov	r4, r0
 801bbca:	460e      	mov	r6, r1
 801bbcc:	b93d      	cbnz	r5, 801bbde <_Balloc+0x1a>
 801bbce:	2010      	movs	r0, #16
 801bbd0:	f7ff ffde 	bl	801bb90 <malloc>
 801bbd4:	6260      	str	r0, [r4, #36]	; 0x24
 801bbd6:	6045      	str	r5, [r0, #4]
 801bbd8:	6085      	str	r5, [r0, #8]
 801bbda:	6005      	str	r5, [r0, #0]
 801bbdc:	60c5      	str	r5, [r0, #12]
 801bbde:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801bbe0:	68eb      	ldr	r3, [r5, #12]
 801bbe2:	b183      	cbz	r3, 801bc06 <_Balloc+0x42>
 801bbe4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801bbe6:	68db      	ldr	r3, [r3, #12]
 801bbe8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801bbec:	b9b8      	cbnz	r0, 801bc1e <_Balloc+0x5a>
 801bbee:	2101      	movs	r1, #1
 801bbf0:	fa01 f506 	lsl.w	r5, r1, r6
 801bbf4:	1d6a      	adds	r2, r5, #5
 801bbf6:	0092      	lsls	r2, r2, #2
 801bbf8:	4620      	mov	r0, r4
 801bbfa:	f7fd fcfa 	bl	80195f2 <_calloc_r>
 801bbfe:	b160      	cbz	r0, 801bc1a <_Balloc+0x56>
 801bc00:	6046      	str	r6, [r0, #4]
 801bc02:	6085      	str	r5, [r0, #8]
 801bc04:	e00e      	b.n	801bc24 <_Balloc+0x60>
 801bc06:	2221      	movs	r2, #33	; 0x21
 801bc08:	2104      	movs	r1, #4
 801bc0a:	4620      	mov	r0, r4
 801bc0c:	f7fd fcf1 	bl	80195f2 <_calloc_r>
 801bc10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801bc12:	60e8      	str	r0, [r5, #12]
 801bc14:	68db      	ldr	r3, [r3, #12]
 801bc16:	2b00      	cmp	r3, #0
 801bc18:	d1e4      	bne.n	801bbe4 <_Balloc+0x20>
 801bc1a:	2000      	movs	r0, #0
 801bc1c:	bd70      	pop	{r4, r5, r6, pc}
 801bc1e:	6802      	ldr	r2, [r0, #0]
 801bc20:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801bc24:	2300      	movs	r3, #0
 801bc26:	6103      	str	r3, [r0, #16]
 801bc28:	60c3      	str	r3, [r0, #12]
 801bc2a:	bd70      	pop	{r4, r5, r6, pc}

0801bc2c <_Bfree>:
 801bc2c:	b570      	push	{r4, r5, r6, lr}
 801bc2e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801bc30:	4606      	mov	r6, r0
 801bc32:	460d      	mov	r5, r1
 801bc34:	b93c      	cbnz	r4, 801bc46 <_Bfree+0x1a>
 801bc36:	2010      	movs	r0, #16
 801bc38:	f7ff ffaa 	bl	801bb90 <malloc>
 801bc3c:	6270      	str	r0, [r6, #36]	; 0x24
 801bc3e:	6044      	str	r4, [r0, #4]
 801bc40:	6084      	str	r4, [r0, #8]
 801bc42:	6004      	str	r4, [r0, #0]
 801bc44:	60c4      	str	r4, [r0, #12]
 801bc46:	b13d      	cbz	r5, 801bc58 <_Bfree+0x2c>
 801bc48:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801bc4a:	686a      	ldr	r2, [r5, #4]
 801bc4c:	68db      	ldr	r3, [r3, #12]
 801bc4e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801bc52:	6029      	str	r1, [r5, #0]
 801bc54:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801bc58:	bd70      	pop	{r4, r5, r6, pc}

0801bc5a <__multadd>:
 801bc5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bc5e:	690d      	ldr	r5, [r1, #16]
 801bc60:	461f      	mov	r7, r3
 801bc62:	4606      	mov	r6, r0
 801bc64:	460c      	mov	r4, r1
 801bc66:	f101 0e14 	add.w	lr, r1, #20
 801bc6a:	2300      	movs	r3, #0
 801bc6c:	f8de 0000 	ldr.w	r0, [lr]
 801bc70:	b281      	uxth	r1, r0
 801bc72:	fb02 7101 	mla	r1, r2, r1, r7
 801bc76:	0c0f      	lsrs	r7, r1, #16
 801bc78:	0c00      	lsrs	r0, r0, #16
 801bc7a:	fb02 7000 	mla	r0, r2, r0, r7
 801bc7e:	b289      	uxth	r1, r1
 801bc80:	3301      	adds	r3, #1
 801bc82:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801bc86:	429d      	cmp	r5, r3
 801bc88:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801bc8c:	f84e 1b04 	str.w	r1, [lr], #4
 801bc90:	dcec      	bgt.n	801bc6c <__multadd+0x12>
 801bc92:	b1d7      	cbz	r7, 801bcca <__multadd+0x70>
 801bc94:	68a3      	ldr	r3, [r4, #8]
 801bc96:	429d      	cmp	r5, r3
 801bc98:	db12      	blt.n	801bcc0 <__multadd+0x66>
 801bc9a:	6861      	ldr	r1, [r4, #4]
 801bc9c:	4630      	mov	r0, r6
 801bc9e:	3101      	adds	r1, #1
 801bca0:	f7ff ff90 	bl	801bbc4 <_Balloc>
 801bca4:	6922      	ldr	r2, [r4, #16]
 801bca6:	3202      	adds	r2, #2
 801bca8:	f104 010c 	add.w	r1, r4, #12
 801bcac:	4680      	mov	r8, r0
 801bcae:	0092      	lsls	r2, r2, #2
 801bcb0:	300c      	adds	r0, #12
 801bcb2:	f7fd ff03 	bl	8019abc <memcpy>
 801bcb6:	4621      	mov	r1, r4
 801bcb8:	4630      	mov	r0, r6
 801bcba:	f7ff ffb7 	bl	801bc2c <_Bfree>
 801bcbe:	4644      	mov	r4, r8
 801bcc0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801bcc4:	3501      	adds	r5, #1
 801bcc6:	615f      	str	r7, [r3, #20]
 801bcc8:	6125      	str	r5, [r4, #16]
 801bcca:	4620      	mov	r0, r4
 801bccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801bcd0 <__hi0bits>:
 801bcd0:	0c02      	lsrs	r2, r0, #16
 801bcd2:	0412      	lsls	r2, r2, #16
 801bcd4:	4603      	mov	r3, r0
 801bcd6:	b9b2      	cbnz	r2, 801bd06 <__hi0bits+0x36>
 801bcd8:	0403      	lsls	r3, r0, #16
 801bcda:	2010      	movs	r0, #16
 801bcdc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801bce0:	bf04      	itt	eq
 801bce2:	021b      	lsleq	r3, r3, #8
 801bce4:	3008      	addeq	r0, #8
 801bce6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801bcea:	bf04      	itt	eq
 801bcec:	011b      	lsleq	r3, r3, #4
 801bcee:	3004      	addeq	r0, #4
 801bcf0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801bcf4:	bf04      	itt	eq
 801bcf6:	009b      	lsleq	r3, r3, #2
 801bcf8:	3002      	addeq	r0, #2
 801bcfa:	2b00      	cmp	r3, #0
 801bcfc:	db06      	blt.n	801bd0c <__hi0bits+0x3c>
 801bcfe:	005b      	lsls	r3, r3, #1
 801bd00:	d503      	bpl.n	801bd0a <__hi0bits+0x3a>
 801bd02:	3001      	adds	r0, #1
 801bd04:	4770      	bx	lr
 801bd06:	2000      	movs	r0, #0
 801bd08:	e7e8      	b.n	801bcdc <__hi0bits+0xc>
 801bd0a:	2020      	movs	r0, #32
 801bd0c:	4770      	bx	lr

0801bd0e <__lo0bits>:
 801bd0e:	6803      	ldr	r3, [r0, #0]
 801bd10:	f013 0207 	ands.w	r2, r3, #7
 801bd14:	4601      	mov	r1, r0
 801bd16:	d00b      	beq.n	801bd30 <__lo0bits+0x22>
 801bd18:	07da      	lsls	r2, r3, #31
 801bd1a:	d423      	bmi.n	801bd64 <__lo0bits+0x56>
 801bd1c:	0798      	lsls	r0, r3, #30
 801bd1e:	bf49      	itett	mi
 801bd20:	085b      	lsrmi	r3, r3, #1
 801bd22:	089b      	lsrpl	r3, r3, #2
 801bd24:	2001      	movmi	r0, #1
 801bd26:	600b      	strmi	r3, [r1, #0]
 801bd28:	bf5c      	itt	pl
 801bd2a:	600b      	strpl	r3, [r1, #0]
 801bd2c:	2002      	movpl	r0, #2
 801bd2e:	4770      	bx	lr
 801bd30:	b298      	uxth	r0, r3
 801bd32:	b9a8      	cbnz	r0, 801bd60 <__lo0bits+0x52>
 801bd34:	0c1b      	lsrs	r3, r3, #16
 801bd36:	2010      	movs	r0, #16
 801bd38:	f013 0fff 	tst.w	r3, #255	; 0xff
 801bd3c:	bf04      	itt	eq
 801bd3e:	0a1b      	lsreq	r3, r3, #8
 801bd40:	3008      	addeq	r0, #8
 801bd42:	071a      	lsls	r2, r3, #28
 801bd44:	bf04      	itt	eq
 801bd46:	091b      	lsreq	r3, r3, #4
 801bd48:	3004      	addeq	r0, #4
 801bd4a:	079a      	lsls	r2, r3, #30
 801bd4c:	bf04      	itt	eq
 801bd4e:	089b      	lsreq	r3, r3, #2
 801bd50:	3002      	addeq	r0, #2
 801bd52:	07da      	lsls	r2, r3, #31
 801bd54:	d402      	bmi.n	801bd5c <__lo0bits+0x4e>
 801bd56:	085b      	lsrs	r3, r3, #1
 801bd58:	d006      	beq.n	801bd68 <__lo0bits+0x5a>
 801bd5a:	3001      	adds	r0, #1
 801bd5c:	600b      	str	r3, [r1, #0]
 801bd5e:	4770      	bx	lr
 801bd60:	4610      	mov	r0, r2
 801bd62:	e7e9      	b.n	801bd38 <__lo0bits+0x2a>
 801bd64:	2000      	movs	r0, #0
 801bd66:	4770      	bx	lr
 801bd68:	2020      	movs	r0, #32
 801bd6a:	4770      	bx	lr

0801bd6c <__i2b>:
 801bd6c:	b510      	push	{r4, lr}
 801bd6e:	460c      	mov	r4, r1
 801bd70:	2101      	movs	r1, #1
 801bd72:	f7ff ff27 	bl	801bbc4 <_Balloc>
 801bd76:	2201      	movs	r2, #1
 801bd78:	6144      	str	r4, [r0, #20]
 801bd7a:	6102      	str	r2, [r0, #16]
 801bd7c:	bd10      	pop	{r4, pc}

0801bd7e <__multiply>:
 801bd7e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd82:	4614      	mov	r4, r2
 801bd84:	690a      	ldr	r2, [r1, #16]
 801bd86:	6923      	ldr	r3, [r4, #16]
 801bd88:	429a      	cmp	r2, r3
 801bd8a:	bfb8      	it	lt
 801bd8c:	460b      	movlt	r3, r1
 801bd8e:	4689      	mov	r9, r1
 801bd90:	bfbc      	itt	lt
 801bd92:	46a1      	movlt	r9, r4
 801bd94:	461c      	movlt	r4, r3
 801bd96:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801bd9a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801bd9e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801bda2:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801bda6:	eb07 060a 	add.w	r6, r7, sl
 801bdaa:	429e      	cmp	r6, r3
 801bdac:	bfc8      	it	gt
 801bdae:	3101      	addgt	r1, #1
 801bdb0:	f7ff ff08 	bl	801bbc4 <_Balloc>
 801bdb4:	f100 0514 	add.w	r5, r0, #20
 801bdb8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801bdbc:	462b      	mov	r3, r5
 801bdbe:	2200      	movs	r2, #0
 801bdc0:	4543      	cmp	r3, r8
 801bdc2:	d316      	bcc.n	801bdf2 <__multiply+0x74>
 801bdc4:	f104 0214 	add.w	r2, r4, #20
 801bdc8:	f109 0114 	add.w	r1, r9, #20
 801bdcc:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 801bdd0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801bdd4:	9301      	str	r3, [sp, #4]
 801bdd6:	9c01      	ldr	r4, [sp, #4]
 801bdd8:	4294      	cmp	r4, r2
 801bdda:	4613      	mov	r3, r2
 801bddc:	d80c      	bhi.n	801bdf8 <__multiply+0x7a>
 801bdde:	2e00      	cmp	r6, #0
 801bde0:	dd03      	ble.n	801bdea <__multiply+0x6c>
 801bde2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801bde6:	2b00      	cmp	r3, #0
 801bde8:	d054      	beq.n	801be94 <__multiply+0x116>
 801bdea:	6106      	str	r6, [r0, #16]
 801bdec:	b003      	add	sp, #12
 801bdee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bdf2:	f843 2b04 	str.w	r2, [r3], #4
 801bdf6:	e7e3      	b.n	801bdc0 <__multiply+0x42>
 801bdf8:	f8b3 a000 	ldrh.w	sl, [r3]
 801bdfc:	3204      	adds	r2, #4
 801bdfe:	f1ba 0f00 	cmp.w	sl, #0
 801be02:	d020      	beq.n	801be46 <__multiply+0xc8>
 801be04:	46ae      	mov	lr, r5
 801be06:	4689      	mov	r9, r1
 801be08:	f04f 0c00 	mov.w	ip, #0
 801be0c:	f859 4b04 	ldr.w	r4, [r9], #4
 801be10:	f8be b000 	ldrh.w	fp, [lr]
 801be14:	b2a3      	uxth	r3, r4
 801be16:	fb0a b303 	mla	r3, sl, r3, fp
 801be1a:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 801be1e:	f8de 4000 	ldr.w	r4, [lr]
 801be22:	4463      	add	r3, ip
 801be24:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 801be28:	fb0a c40b 	mla	r4, sl, fp, ip
 801be2c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801be30:	b29b      	uxth	r3, r3
 801be32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801be36:	454f      	cmp	r7, r9
 801be38:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 801be3c:	f84e 3b04 	str.w	r3, [lr], #4
 801be40:	d8e4      	bhi.n	801be0c <__multiply+0x8e>
 801be42:	f8ce c000 	str.w	ip, [lr]
 801be46:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 801be4a:	f1b9 0f00 	cmp.w	r9, #0
 801be4e:	d01f      	beq.n	801be90 <__multiply+0x112>
 801be50:	682b      	ldr	r3, [r5, #0]
 801be52:	46ae      	mov	lr, r5
 801be54:	468c      	mov	ip, r1
 801be56:	f04f 0a00 	mov.w	sl, #0
 801be5a:	f8bc 4000 	ldrh.w	r4, [ip]
 801be5e:	f8be b002 	ldrh.w	fp, [lr, #2]
 801be62:	fb09 b404 	mla	r4, r9, r4, fp
 801be66:	44a2      	add	sl, r4
 801be68:	b29b      	uxth	r3, r3
 801be6a:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 801be6e:	f84e 3b04 	str.w	r3, [lr], #4
 801be72:	f85c 3b04 	ldr.w	r3, [ip], #4
 801be76:	f8be 4000 	ldrh.w	r4, [lr]
 801be7a:	0c1b      	lsrs	r3, r3, #16
 801be7c:	fb09 4303 	mla	r3, r9, r3, r4
 801be80:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 801be84:	4567      	cmp	r7, ip
 801be86:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801be8a:	d8e6      	bhi.n	801be5a <__multiply+0xdc>
 801be8c:	f8ce 3000 	str.w	r3, [lr]
 801be90:	3504      	adds	r5, #4
 801be92:	e7a0      	b.n	801bdd6 <__multiply+0x58>
 801be94:	3e01      	subs	r6, #1
 801be96:	e7a2      	b.n	801bdde <__multiply+0x60>

0801be98 <__pow5mult>:
 801be98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801be9c:	4615      	mov	r5, r2
 801be9e:	f012 0203 	ands.w	r2, r2, #3
 801bea2:	4606      	mov	r6, r0
 801bea4:	460f      	mov	r7, r1
 801bea6:	d007      	beq.n	801beb8 <__pow5mult+0x20>
 801bea8:	3a01      	subs	r2, #1
 801beaa:	4c21      	ldr	r4, [pc, #132]	; (801bf30 <__pow5mult+0x98>)
 801beac:	2300      	movs	r3, #0
 801beae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801beb2:	f7ff fed2 	bl	801bc5a <__multadd>
 801beb6:	4607      	mov	r7, r0
 801beb8:	10ad      	asrs	r5, r5, #2
 801beba:	d035      	beq.n	801bf28 <__pow5mult+0x90>
 801bebc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801bebe:	b93c      	cbnz	r4, 801bed0 <__pow5mult+0x38>
 801bec0:	2010      	movs	r0, #16
 801bec2:	f7ff fe65 	bl	801bb90 <malloc>
 801bec6:	6270      	str	r0, [r6, #36]	; 0x24
 801bec8:	6044      	str	r4, [r0, #4]
 801beca:	6084      	str	r4, [r0, #8]
 801becc:	6004      	str	r4, [r0, #0]
 801bece:	60c4      	str	r4, [r0, #12]
 801bed0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801bed4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801bed8:	b94c      	cbnz	r4, 801beee <__pow5mult+0x56>
 801beda:	f240 2171 	movw	r1, #625	; 0x271
 801bede:	4630      	mov	r0, r6
 801bee0:	f7ff ff44 	bl	801bd6c <__i2b>
 801bee4:	2300      	movs	r3, #0
 801bee6:	f8c8 0008 	str.w	r0, [r8, #8]
 801beea:	4604      	mov	r4, r0
 801beec:	6003      	str	r3, [r0, #0]
 801beee:	f04f 0800 	mov.w	r8, #0
 801bef2:	07eb      	lsls	r3, r5, #31
 801bef4:	d50a      	bpl.n	801bf0c <__pow5mult+0x74>
 801bef6:	4639      	mov	r1, r7
 801bef8:	4622      	mov	r2, r4
 801befa:	4630      	mov	r0, r6
 801befc:	f7ff ff3f 	bl	801bd7e <__multiply>
 801bf00:	4639      	mov	r1, r7
 801bf02:	4681      	mov	r9, r0
 801bf04:	4630      	mov	r0, r6
 801bf06:	f7ff fe91 	bl	801bc2c <_Bfree>
 801bf0a:	464f      	mov	r7, r9
 801bf0c:	106d      	asrs	r5, r5, #1
 801bf0e:	d00b      	beq.n	801bf28 <__pow5mult+0x90>
 801bf10:	6820      	ldr	r0, [r4, #0]
 801bf12:	b938      	cbnz	r0, 801bf24 <__pow5mult+0x8c>
 801bf14:	4622      	mov	r2, r4
 801bf16:	4621      	mov	r1, r4
 801bf18:	4630      	mov	r0, r6
 801bf1a:	f7ff ff30 	bl	801bd7e <__multiply>
 801bf1e:	6020      	str	r0, [r4, #0]
 801bf20:	f8c0 8000 	str.w	r8, [r0]
 801bf24:	4604      	mov	r4, r0
 801bf26:	e7e4      	b.n	801bef2 <__pow5mult+0x5a>
 801bf28:	4638      	mov	r0, r7
 801bf2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bf2e:	bf00      	nop
 801bf30:	080ec588 	.word	0x080ec588

0801bf34 <__lshift>:
 801bf34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bf38:	460c      	mov	r4, r1
 801bf3a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801bf3e:	6923      	ldr	r3, [r4, #16]
 801bf40:	6849      	ldr	r1, [r1, #4]
 801bf42:	eb0a 0903 	add.w	r9, sl, r3
 801bf46:	68a3      	ldr	r3, [r4, #8]
 801bf48:	4607      	mov	r7, r0
 801bf4a:	4616      	mov	r6, r2
 801bf4c:	f109 0501 	add.w	r5, r9, #1
 801bf50:	42ab      	cmp	r3, r5
 801bf52:	db31      	blt.n	801bfb8 <__lshift+0x84>
 801bf54:	4638      	mov	r0, r7
 801bf56:	f7ff fe35 	bl	801bbc4 <_Balloc>
 801bf5a:	2200      	movs	r2, #0
 801bf5c:	4680      	mov	r8, r0
 801bf5e:	f100 0314 	add.w	r3, r0, #20
 801bf62:	4611      	mov	r1, r2
 801bf64:	4552      	cmp	r2, sl
 801bf66:	db2a      	blt.n	801bfbe <__lshift+0x8a>
 801bf68:	6920      	ldr	r0, [r4, #16]
 801bf6a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801bf6e:	f104 0114 	add.w	r1, r4, #20
 801bf72:	f016 021f 	ands.w	r2, r6, #31
 801bf76:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 801bf7a:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 801bf7e:	d022      	beq.n	801bfc6 <__lshift+0x92>
 801bf80:	f1c2 0c20 	rsb	ip, r2, #32
 801bf84:	2000      	movs	r0, #0
 801bf86:	680e      	ldr	r6, [r1, #0]
 801bf88:	4096      	lsls	r6, r2
 801bf8a:	4330      	orrs	r0, r6
 801bf8c:	f843 0b04 	str.w	r0, [r3], #4
 801bf90:	f851 0b04 	ldr.w	r0, [r1], #4
 801bf94:	458e      	cmp	lr, r1
 801bf96:	fa20 f00c 	lsr.w	r0, r0, ip
 801bf9a:	d8f4      	bhi.n	801bf86 <__lshift+0x52>
 801bf9c:	6018      	str	r0, [r3, #0]
 801bf9e:	b108      	cbz	r0, 801bfa4 <__lshift+0x70>
 801bfa0:	f109 0502 	add.w	r5, r9, #2
 801bfa4:	3d01      	subs	r5, #1
 801bfa6:	4638      	mov	r0, r7
 801bfa8:	f8c8 5010 	str.w	r5, [r8, #16]
 801bfac:	4621      	mov	r1, r4
 801bfae:	f7ff fe3d 	bl	801bc2c <_Bfree>
 801bfb2:	4640      	mov	r0, r8
 801bfb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bfb8:	3101      	adds	r1, #1
 801bfba:	005b      	lsls	r3, r3, #1
 801bfbc:	e7c8      	b.n	801bf50 <__lshift+0x1c>
 801bfbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801bfc2:	3201      	adds	r2, #1
 801bfc4:	e7ce      	b.n	801bf64 <__lshift+0x30>
 801bfc6:	3b04      	subs	r3, #4
 801bfc8:	f851 2b04 	ldr.w	r2, [r1], #4
 801bfcc:	f843 2f04 	str.w	r2, [r3, #4]!
 801bfd0:	458e      	cmp	lr, r1
 801bfd2:	d8f9      	bhi.n	801bfc8 <__lshift+0x94>
 801bfd4:	e7e6      	b.n	801bfa4 <__lshift+0x70>

0801bfd6 <__mcmp>:
 801bfd6:	6903      	ldr	r3, [r0, #16]
 801bfd8:	690a      	ldr	r2, [r1, #16]
 801bfda:	1a9b      	subs	r3, r3, r2
 801bfdc:	b530      	push	{r4, r5, lr}
 801bfde:	d10c      	bne.n	801bffa <__mcmp+0x24>
 801bfe0:	0092      	lsls	r2, r2, #2
 801bfe2:	3014      	adds	r0, #20
 801bfe4:	3114      	adds	r1, #20
 801bfe6:	1884      	adds	r4, r0, r2
 801bfe8:	4411      	add	r1, r2
 801bfea:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801bfee:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801bff2:	4295      	cmp	r5, r2
 801bff4:	d003      	beq.n	801bffe <__mcmp+0x28>
 801bff6:	d305      	bcc.n	801c004 <__mcmp+0x2e>
 801bff8:	2301      	movs	r3, #1
 801bffa:	4618      	mov	r0, r3
 801bffc:	bd30      	pop	{r4, r5, pc}
 801bffe:	42a0      	cmp	r0, r4
 801c000:	d3f3      	bcc.n	801bfea <__mcmp+0x14>
 801c002:	e7fa      	b.n	801bffa <__mcmp+0x24>
 801c004:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c008:	e7f7      	b.n	801bffa <__mcmp+0x24>

0801c00a <__mdiff>:
 801c00a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c00e:	460d      	mov	r5, r1
 801c010:	4607      	mov	r7, r0
 801c012:	4611      	mov	r1, r2
 801c014:	4628      	mov	r0, r5
 801c016:	4614      	mov	r4, r2
 801c018:	f7ff ffdd 	bl	801bfd6 <__mcmp>
 801c01c:	1e06      	subs	r6, r0, #0
 801c01e:	d108      	bne.n	801c032 <__mdiff+0x28>
 801c020:	4631      	mov	r1, r6
 801c022:	4638      	mov	r0, r7
 801c024:	f7ff fdce 	bl	801bbc4 <_Balloc>
 801c028:	2301      	movs	r3, #1
 801c02a:	6103      	str	r3, [r0, #16]
 801c02c:	6146      	str	r6, [r0, #20]
 801c02e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c032:	bfa4      	itt	ge
 801c034:	4623      	movge	r3, r4
 801c036:	462c      	movge	r4, r5
 801c038:	4638      	mov	r0, r7
 801c03a:	6861      	ldr	r1, [r4, #4]
 801c03c:	bfa6      	itte	ge
 801c03e:	461d      	movge	r5, r3
 801c040:	2600      	movge	r6, #0
 801c042:	2601      	movlt	r6, #1
 801c044:	f7ff fdbe 	bl	801bbc4 <_Balloc>
 801c048:	692b      	ldr	r3, [r5, #16]
 801c04a:	60c6      	str	r6, [r0, #12]
 801c04c:	6926      	ldr	r6, [r4, #16]
 801c04e:	f105 0914 	add.w	r9, r5, #20
 801c052:	f104 0214 	add.w	r2, r4, #20
 801c056:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801c05a:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801c05e:	f100 0514 	add.w	r5, r0, #20
 801c062:	f04f 0c00 	mov.w	ip, #0
 801c066:	f852 ab04 	ldr.w	sl, [r2], #4
 801c06a:	f859 4b04 	ldr.w	r4, [r9], #4
 801c06e:	fa1c f18a 	uxtah	r1, ip, sl
 801c072:	b2a3      	uxth	r3, r4
 801c074:	1ac9      	subs	r1, r1, r3
 801c076:	0c23      	lsrs	r3, r4, #16
 801c078:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801c07c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801c080:	b289      	uxth	r1, r1
 801c082:	ea4f 4c23 	mov.w	ip, r3, asr #16
 801c086:	45c8      	cmp	r8, r9
 801c088:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801c08c:	4696      	mov	lr, r2
 801c08e:	f845 3b04 	str.w	r3, [r5], #4
 801c092:	d8e8      	bhi.n	801c066 <__mdiff+0x5c>
 801c094:	45be      	cmp	lr, r7
 801c096:	d305      	bcc.n	801c0a4 <__mdiff+0x9a>
 801c098:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801c09c:	b18b      	cbz	r3, 801c0c2 <__mdiff+0xb8>
 801c09e:	6106      	str	r6, [r0, #16]
 801c0a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c0a4:	f85e 1b04 	ldr.w	r1, [lr], #4
 801c0a8:	fa1c f381 	uxtah	r3, ip, r1
 801c0ac:	141a      	asrs	r2, r3, #16
 801c0ae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801c0b2:	b29b      	uxth	r3, r3
 801c0b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c0b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801c0bc:	f845 3b04 	str.w	r3, [r5], #4
 801c0c0:	e7e8      	b.n	801c094 <__mdiff+0x8a>
 801c0c2:	3e01      	subs	r6, #1
 801c0c4:	e7e8      	b.n	801c098 <__mdiff+0x8e>

0801c0c6 <__d2b>:
 801c0c6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801c0ca:	460e      	mov	r6, r1
 801c0cc:	2101      	movs	r1, #1
 801c0ce:	ec59 8b10 	vmov	r8, r9, d0
 801c0d2:	4615      	mov	r5, r2
 801c0d4:	f7ff fd76 	bl	801bbc4 <_Balloc>
 801c0d8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801c0dc:	4607      	mov	r7, r0
 801c0de:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c0e2:	bb34      	cbnz	r4, 801c132 <__d2b+0x6c>
 801c0e4:	9301      	str	r3, [sp, #4]
 801c0e6:	f1b8 0f00 	cmp.w	r8, #0
 801c0ea:	d027      	beq.n	801c13c <__d2b+0x76>
 801c0ec:	a802      	add	r0, sp, #8
 801c0ee:	f840 8d08 	str.w	r8, [r0, #-8]!
 801c0f2:	f7ff fe0c 	bl	801bd0e <__lo0bits>
 801c0f6:	9900      	ldr	r1, [sp, #0]
 801c0f8:	b1f0      	cbz	r0, 801c138 <__d2b+0x72>
 801c0fa:	9a01      	ldr	r2, [sp, #4]
 801c0fc:	f1c0 0320 	rsb	r3, r0, #32
 801c100:	fa02 f303 	lsl.w	r3, r2, r3
 801c104:	430b      	orrs	r3, r1
 801c106:	40c2      	lsrs	r2, r0
 801c108:	617b      	str	r3, [r7, #20]
 801c10a:	9201      	str	r2, [sp, #4]
 801c10c:	9b01      	ldr	r3, [sp, #4]
 801c10e:	61bb      	str	r3, [r7, #24]
 801c110:	2b00      	cmp	r3, #0
 801c112:	bf14      	ite	ne
 801c114:	2102      	movne	r1, #2
 801c116:	2101      	moveq	r1, #1
 801c118:	6139      	str	r1, [r7, #16]
 801c11a:	b1c4      	cbz	r4, 801c14e <__d2b+0x88>
 801c11c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801c120:	4404      	add	r4, r0
 801c122:	6034      	str	r4, [r6, #0]
 801c124:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801c128:	6028      	str	r0, [r5, #0]
 801c12a:	4638      	mov	r0, r7
 801c12c:	b003      	add	sp, #12
 801c12e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c132:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801c136:	e7d5      	b.n	801c0e4 <__d2b+0x1e>
 801c138:	6179      	str	r1, [r7, #20]
 801c13a:	e7e7      	b.n	801c10c <__d2b+0x46>
 801c13c:	a801      	add	r0, sp, #4
 801c13e:	f7ff fde6 	bl	801bd0e <__lo0bits>
 801c142:	9b01      	ldr	r3, [sp, #4]
 801c144:	617b      	str	r3, [r7, #20]
 801c146:	2101      	movs	r1, #1
 801c148:	6139      	str	r1, [r7, #16]
 801c14a:	3020      	adds	r0, #32
 801c14c:	e7e5      	b.n	801c11a <__d2b+0x54>
 801c14e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801c152:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801c156:	6030      	str	r0, [r6, #0]
 801c158:	6918      	ldr	r0, [r3, #16]
 801c15a:	f7ff fdb9 	bl	801bcd0 <__hi0bits>
 801c15e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801c162:	e7e1      	b.n	801c128 <__d2b+0x62>

0801c164 <__ssprint_r>:
 801c164:	6893      	ldr	r3, [r2, #8]
 801c166:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c16a:	4681      	mov	r9, r0
 801c16c:	460c      	mov	r4, r1
 801c16e:	4617      	mov	r7, r2
 801c170:	2b00      	cmp	r3, #0
 801c172:	d060      	beq.n	801c236 <__ssprint_r+0xd2>
 801c174:	f04f 0b00 	mov.w	fp, #0
 801c178:	f8d2 a000 	ldr.w	sl, [r2]
 801c17c:	465e      	mov	r6, fp
 801c17e:	b356      	cbz	r6, 801c1d6 <__ssprint_r+0x72>
 801c180:	68a3      	ldr	r3, [r4, #8]
 801c182:	429e      	cmp	r6, r3
 801c184:	d344      	bcc.n	801c210 <__ssprint_r+0xac>
 801c186:	89a2      	ldrh	r2, [r4, #12]
 801c188:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801c18c:	d03e      	beq.n	801c20c <__ssprint_r+0xa8>
 801c18e:	6825      	ldr	r5, [r4, #0]
 801c190:	6921      	ldr	r1, [r4, #16]
 801c192:	eba5 0801 	sub.w	r8, r5, r1
 801c196:	6965      	ldr	r5, [r4, #20]
 801c198:	2302      	movs	r3, #2
 801c19a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c19e:	fb95 f5f3 	sdiv	r5, r5, r3
 801c1a2:	f108 0301 	add.w	r3, r8, #1
 801c1a6:	4433      	add	r3, r6
 801c1a8:	429d      	cmp	r5, r3
 801c1aa:	bf38      	it	cc
 801c1ac:	461d      	movcc	r5, r3
 801c1ae:	0553      	lsls	r3, r2, #21
 801c1b0:	d546      	bpl.n	801c240 <__ssprint_r+0xdc>
 801c1b2:	4629      	mov	r1, r5
 801c1b4:	4648      	mov	r0, r9
 801c1b6:	f7fd fa73 	bl	80196a0 <_malloc_r>
 801c1ba:	b998      	cbnz	r0, 801c1e4 <__ssprint_r+0x80>
 801c1bc:	230c      	movs	r3, #12
 801c1be:	f8c9 3000 	str.w	r3, [r9]
 801c1c2:	89a3      	ldrh	r3, [r4, #12]
 801c1c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c1c8:	81a3      	strh	r3, [r4, #12]
 801c1ca:	2300      	movs	r3, #0
 801c1cc:	60bb      	str	r3, [r7, #8]
 801c1ce:	607b      	str	r3, [r7, #4]
 801c1d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c1d4:	e031      	b.n	801c23a <__ssprint_r+0xd6>
 801c1d6:	f8da b000 	ldr.w	fp, [sl]
 801c1da:	f8da 6004 	ldr.w	r6, [sl, #4]
 801c1de:	f10a 0a08 	add.w	sl, sl, #8
 801c1e2:	e7cc      	b.n	801c17e <__ssprint_r+0x1a>
 801c1e4:	4642      	mov	r2, r8
 801c1e6:	6921      	ldr	r1, [r4, #16]
 801c1e8:	9001      	str	r0, [sp, #4]
 801c1ea:	f7fd fc67 	bl	8019abc <memcpy>
 801c1ee:	89a2      	ldrh	r2, [r4, #12]
 801c1f0:	9b01      	ldr	r3, [sp, #4]
 801c1f2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 801c1f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801c1fa:	81a2      	strh	r2, [r4, #12]
 801c1fc:	6123      	str	r3, [r4, #16]
 801c1fe:	6165      	str	r5, [r4, #20]
 801c200:	4443      	add	r3, r8
 801c202:	eba5 0508 	sub.w	r5, r5, r8
 801c206:	6023      	str	r3, [r4, #0]
 801c208:	60a5      	str	r5, [r4, #8]
 801c20a:	4633      	mov	r3, r6
 801c20c:	429e      	cmp	r6, r3
 801c20e:	d200      	bcs.n	801c212 <__ssprint_r+0xae>
 801c210:	4633      	mov	r3, r6
 801c212:	461a      	mov	r2, r3
 801c214:	4659      	mov	r1, fp
 801c216:	6820      	ldr	r0, [r4, #0]
 801c218:	9301      	str	r3, [sp, #4]
 801c21a:	f000 f82a 	bl	801c272 <memmove>
 801c21e:	68a2      	ldr	r2, [r4, #8]
 801c220:	9b01      	ldr	r3, [sp, #4]
 801c222:	1ad2      	subs	r2, r2, r3
 801c224:	60a2      	str	r2, [r4, #8]
 801c226:	6822      	ldr	r2, [r4, #0]
 801c228:	4413      	add	r3, r2
 801c22a:	6023      	str	r3, [r4, #0]
 801c22c:	68bb      	ldr	r3, [r7, #8]
 801c22e:	1b9e      	subs	r6, r3, r6
 801c230:	60be      	str	r6, [r7, #8]
 801c232:	2e00      	cmp	r6, #0
 801c234:	d1cf      	bne.n	801c1d6 <__ssprint_r+0x72>
 801c236:	2000      	movs	r0, #0
 801c238:	6078      	str	r0, [r7, #4]
 801c23a:	b003      	add	sp, #12
 801c23c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c240:	462a      	mov	r2, r5
 801c242:	4648      	mov	r0, r9
 801c244:	f000 f830 	bl	801c2a8 <_realloc_r>
 801c248:	4603      	mov	r3, r0
 801c24a:	2800      	cmp	r0, #0
 801c24c:	d1d6      	bne.n	801c1fc <__ssprint_r+0x98>
 801c24e:	6921      	ldr	r1, [r4, #16]
 801c250:	4648      	mov	r0, r9
 801c252:	f7ff fbcd 	bl	801b9f0 <_free_r>
 801c256:	e7b1      	b.n	801c1bc <__ssprint_r+0x58>

0801c258 <__ascii_wctomb>:
 801c258:	b149      	cbz	r1, 801c26e <__ascii_wctomb+0x16>
 801c25a:	2aff      	cmp	r2, #255	; 0xff
 801c25c:	bf85      	ittet	hi
 801c25e:	238a      	movhi	r3, #138	; 0x8a
 801c260:	6003      	strhi	r3, [r0, #0]
 801c262:	700a      	strbls	r2, [r1, #0]
 801c264:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801c268:	bf98      	it	ls
 801c26a:	2001      	movls	r0, #1
 801c26c:	4770      	bx	lr
 801c26e:	4608      	mov	r0, r1
 801c270:	4770      	bx	lr

0801c272 <memmove>:
 801c272:	4288      	cmp	r0, r1
 801c274:	b510      	push	{r4, lr}
 801c276:	eb01 0302 	add.w	r3, r1, r2
 801c27a:	d803      	bhi.n	801c284 <memmove+0x12>
 801c27c:	1e42      	subs	r2, r0, #1
 801c27e:	4299      	cmp	r1, r3
 801c280:	d10c      	bne.n	801c29c <memmove+0x2a>
 801c282:	bd10      	pop	{r4, pc}
 801c284:	4298      	cmp	r0, r3
 801c286:	d2f9      	bcs.n	801c27c <memmove+0xa>
 801c288:	1881      	adds	r1, r0, r2
 801c28a:	1ad2      	subs	r2, r2, r3
 801c28c:	42d3      	cmn	r3, r2
 801c28e:	d100      	bne.n	801c292 <memmove+0x20>
 801c290:	bd10      	pop	{r4, pc}
 801c292:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c296:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801c29a:	e7f7      	b.n	801c28c <memmove+0x1a>
 801c29c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c2a0:	f802 4f01 	strb.w	r4, [r2, #1]!
 801c2a4:	e7eb      	b.n	801c27e <memmove+0xc>
	...

0801c2a8 <_realloc_r>:
 801c2a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c2ac:	4682      	mov	sl, r0
 801c2ae:	460c      	mov	r4, r1
 801c2b0:	b929      	cbnz	r1, 801c2be <_realloc_r+0x16>
 801c2b2:	4611      	mov	r1, r2
 801c2b4:	b003      	add	sp, #12
 801c2b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c2ba:	f7fd b9f1 	b.w	80196a0 <_malloc_r>
 801c2be:	9201      	str	r2, [sp, #4]
 801c2c0:	f7fd fc10 	bl	8019ae4 <__malloc_lock>
 801c2c4:	9a01      	ldr	r2, [sp, #4]
 801c2c6:	f854 5c04 	ldr.w	r5, [r4, #-4]
 801c2ca:	f102 080b 	add.w	r8, r2, #11
 801c2ce:	f1b8 0f16 	cmp.w	r8, #22
 801c2d2:	f1a4 0908 	sub.w	r9, r4, #8
 801c2d6:	f025 0603 	bic.w	r6, r5, #3
 801c2da:	d90a      	bls.n	801c2f2 <_realloc_r+0x4a>
 801c2dc:	f038 0807 	bics.w	r8, r8, #7
 801c2e0:	d509      	bpl.n	801c2f6 <_realloc_r+0x4e>
 801c2e2:	230c      	movs	r3, #12
 801c2e4:	f8ca 3000 	str.w	r3, [sl]
 801c2e8:	2700      	movs	r7, #0
 801c2ea:	4638      	mov	r0, r7
 801c2ec:	b003      	add	sp, #12
 801c2ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c2f2:	f04f 0810 	mov.w	r8, #16
 801c2f6:	4590      	cmp	r8, r2
 801c2f8:	d3f3      	bcc.n	801c2e2 <_realloc_r+0x3a>
 801c2fa:	45b0      	cmp	r8, r6
 801c2fc:	f340 8145 	ble.w	801c58a <_realloc_r+0x2e2>
 801c300:	4ba8      	ldr	r3, [pc, #672]	; (801c5a4 <_realloc_r+0x2fc>)
 801c302:	f8d3 e008 	ldr.w	lr, [r3, #8]
 801c306:	eb09 0106 	add.w	r1, r9, r6
 801c30a:	4571      	cmp	r1, lr
 801c30c:	469b      	mov	fp, r3
 801c30e:	684b      	ldr	r3, [r1, #4]
 801c310:	d005      	beq.n	801c31e <_realloc_r+0x76>
 801c312:	f023 0001 	bic.w	r0, r3, #1
 801c316:	4408      	add	r0, r1
 801c318:	6840      	ldr	r0, [r0, #4]
 801c31a:	07c7      	lsls	r7, r0, #31
 801c31c:	d447      	bmi.n	801c3ae <_realloc_r+0x106>
 801c31e:	f023 0303 	bic.w	r3, r3, #3
 801c322:	4571      	cmp	r1, lr
 801c324:	eb06 0703 	add.w	r7, r6, r3
 801c328:	d119      	bne.n	801c35e <_realloc_r+0xb6>
 801c32a:	f108 0010 	add.w	r0, r8, #16
 801c32e:	4287      	cmp	r7, r0
 801c330:	db3f      	blt.n	801c3b2 <_realloc_r+0x10a>
 801c332:	eb09 0308 	add.w	r3, r9, r8
 801c336:	eba7 0708 	sub.w	r7, r7, r8
 801c33a:	f047 0701 	orr.w	r7, r7, #1
 801c33e:	f8cb 3008 	str.w	r3, [fp, #8]
 801c342:	605f      	str	r7, [r3, #4]
 801c344:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801c348:	f003 0301 	and.w	r3, r3, #1
 801c34c:	ea43 0308 	orr.w	r3, r3, r8
 801c350:	f844 3c04 	str.w	r3, [r4, #-4]
 801c354:	4650      	mov	r0, sl
 801c356:	f7fd fbcb 	bl	8019af0 <__malloc_unlock>
 801c35a:	4627      	mov	r7, r4
 801c35c:	e7c5      	b.n	801c2ea <_realloc_r+0x42>
 801c35e:	45b8      	cmp	r8, r7
 801c360:	dc27      	bgt.n	801c3b2 <_realloc_r+0x10a>
 801c362:	68cb      	ldr	r3, [r1, #12]
 801c364:	688a      	ldr	r2, [r1, #8]
 801c366:	60d3      	str	r3, [r2, #12]
 801c368:	609a      	str	r2, [r3, #8]
 801c36a:	eba7 0008 	sub.w	r0, r7, r8
 801c36e:	280f      	cmp	r0, #15
 801c370:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801c374:	eb09 0207 	add.w	r2, r9, r7
 801c378:	f240 8109 	bls.w	801c58e <_realloc_r+0x2e6>
 801c37c:	eb09 0108 	add.w	r1, r9, r8
 801c380:	f003 0301 	and.w	r3, r3, #1
 801c384:	ea43 0308 	orr.w	r3, r3, r8
 801c388:	f040 0001 	orr.w	r0, r0, #1
 801c38c:	f8c9 3004 	str.w	r3, [r9, #4]
 801c390:	6048      	str	r0, [r1, #4]
 801c392:	6853      	ldr	r3, [r2, #4]
 801c394:	f043 0301 	orr.w	r3, r3, #1
 801c398:	6053      	str	r3, [r2, #4]
 801c39a:	3108      	adds	r1, #8
 801c39c:	4650      	mov	r0, sl
 801c39e:	f7ff fb27 	bl	801b9f0 <_free_r>
 801c3a2:	4650      	mov	r0, sl
 801c3a4:	f7fd fba4 	bl	8019af0 <__malloc_unlock>
 801c3a8:	f109 0708 	add.w	r7, r9, #8
 801c3ac:	e79d      	b.n	801c2ea <_realloc_r+0x42>
 801c3ae:	2300      	movs	r3, #0
 801c3b0:	4619      	mov	r1, r3
 801c3b2:	07e8      	lsls	r0, r5, #31
 801c3b4:	f100 8084 	bmi.w	801c4c0 <_realloc_r+0x218>
 801c3b8:	f854 5c08 	ldr.w	r5, [r4, #-8]
 801c3bc:	eba9 0505 	sub.w	r5, r9, r5
 801c3c0:	6868      	ldr	r0, [r5, #4]
 801c3c2:	f020 0003 	bic.w	r0, r0, #3
 801c3c6:	4430      	add	r0, r6
 801c3c8:	2900      	cmp	r1, #0
 801c3ca:	d076      	beq.n	801c4ba <_realloc_r+0x212>
 801c3cc:	4571      	cmp	r1, lr
 801c3ce:	d150      	bne.n	801c472 <_realloc_r+0x1ca>
 801c3d0:	4403      	add	r3, r0
 801c3d2:	f108 0110 	add.w	r1, r8, #16
 801c3d6:	428b      	cmp	r3, r1
 801c3d8:	db6f      	blt.n	801c4ba <_realloc_r+0x212>
 801c3da:	462f      	mov	r7, r5
 801c3dc:	68ea      	ldr	r2, [r5, #12]
 801c3de:	f857 1f08 	ldr.w	r1, [r7, #8]!
 801c3e2:	60ca      	str	r2, [r1, #12]
 801c3e4:	6091      	str	r1, [r2, #8]
 801c3e6:	1f32      	subs	r2, r6, #4
 801c3e8:	2a24      	cmp	r2, #36	; 0x24
 801c3ea:	d83b      	bhi.n	801c464 <_realloc_r+0x1bc>
 801c3ec:	2a13      	cmp	r2, #19
 801c3ee:	d936      	bls.n	801c45e <_realloc_r+0x1b6>
 801c3f0:	6821      	ldr	r1, [r4, #0]
 801c3f2:	60a9      	str	r1, [r5, #8]
 801c3f4:	6861      	ldr	r1, [r4, #4]
 801c3f6:	60e9      	str	r1, [r5, #12]
 801c3f8:	2a1b      	cmp	r2, #27
 801c3fa:	d81c      	bhi.n	801c436 <_realloc_r+0x18e>
 801c3fc:	f105 0210 	add.w	r2, r5, #16
 801c400:	f104 0108 	add.w	r1, r4, #8
 801c404:	6808      	ldr	r0, [r1, #0]
 801c406:	6010      	str	r0, [r2, #0]
 801c408:	6848      	ldr	r0, [r1, #4]
 801c40a:	6050      	str	r0, [r2, #4]
 801c40c:	6889      	ldr	r1, [r1, #8]
 801c40e:	6091      	str	r1, [r2, #8]
 801c410:	eb05 0208 	add.w	r2, r5, r8
 801c414:	eba3 0308 	sub.w	r3, r3, r8
 801c418:	f043 0301 	orr.w	r3, r3, #1
 801c41c:	f8cb 2008 	str.w	r2, [fp, #8]
 801c420:	6053      	str	r3, [r2, #4]
 801c422:	686b      	ldr	r3, [r5, #4]
 801c424:	f003 0301 	and.w	r3, r3, #1
 801c428:	ea43 0308 	orr.w	r3, r3, r8
 801c42c:	606b      	str	r3, [r5, #4]
 801c42e:	4650      	mov	r0, sl
 801c430:	f7fd fb5e 	bl	8019af0 <__malloc_unlock>
 801c434:	e759      	b.n	801c2ea <_realloc_r+0x42>
 801c436:	68a1      	ldr	r1, [r4, #8]
 801c438:	6129      	str	r1, [r5, #16]
 801c43a:	68e1      	ldr	r1, [r4, #12]
 801c43c:	6169      	str	r1, [r5, #20]
 801c43e:	2a24      	cmp	r2, #36	; 0x24
 801c440:	bf01      	itttt	eq
 801c442:	6922      	ldreq	r2, [r4, #16]
 801c444:	61aa      	streq	r2, [r5, #24]
 801c446:	6960      	ldreq	r0, [r4, #20]
 801c448:	61e8      	streq	r0, [r5, #28]
 801c44a:	bf19      	ittee	ne
 801c44c:	f105 0218 	addne.w	r2, r5, #24
 801c450:	f104 0110 	addne.w	r1, r4, #16
 801c454:	f105 0220 	addeq.w	r2, r5, #32
 801c458:	f104 0118 	addeq.w	r1, r4, #24
 801c45c:	e7d2      	b.n	801c404 <_realloc_r+0x15c>
 801c45e:	463a      	mov	r2, r7
 801c460:	4621      	mov	r1, r4
 801c462:	e7cf      	b.n	801c404 <_realloc_r+0x15c>
 801c464:	4621      	mov	r1, r4
 801c466:	4638      	mov	r0, r7
 801c468:	9301      	str	r3, [sp, #4]
 801c46a:	f7ff ff02 	bl	801c272 <memmove>
 801c46e:	9b01      	ldr	r3, [sp, #4]
 801c470:	e7ce      	b.n	801c410 <_realloc_r+0x168>
 801c472:	18c7      	adds	r7, r0, r3
 801c474:	45b8      	cmp	r8, r7
 801c476:	dc20      	bgt.n	801c4ba <_realloc_r+0x212>
 801c478:	68cb      	ldr	r3, [r1, #12]
 801c47a:	688a      	ldr	r2, [r1, #8]
 801c47c:	60d3      	str	r3, [r2, #12]
 801c47e:	609a      	str	r2, [r3, #8]
 801c480:	4628      	mov	r0, r5
 801c482:	68eb      	ldr	r3, [r5, #12]
 801c484:	f850 2f08 	ldr.w	r2, [r0, #8]!
 801c488:	60d3      	str	r3, [r2, #12]
 801c48a:	609a      	str	r2, [r3, #8]
 801c48c:	1f32      	subs	r2, r6, #4
 801c48e:	2a24      	cmp	r2, #36	; 0x24
 801c490:	d842      	bhi.n	801c518 <_realloc_r+0x270>
 801c492:	2a13      	cmp	r2, #19
 801c494:	d93e      	bls.n	801c514 <_realloc_r+0x26c>
 801c496:	6823      	ldr	r3, [r4, #0]
 801c498:	60ab      	str	r3, [r5, #8]
 801c49a:	6863      	ldr	r3, [r4, #4]
 801c49c:	60eb      	str	r3, [r5, #12]
 801c49e:	2a1b      	cmp	r2, #27
 801c4a0:	d824      	bhi.n	801c4ec <_realloc_r+0x244>
 801c4a2:	f105 0010 	add.w	r0, r5, #16
 801c4a6:	f104 0308 	add.w	r3, r4, #8
 801c4aa:	681a      	ldr	r2, [r3, #0]
 801c4ac:	6002      	str	r2, [r0, #0]
 801c4ae:	685a      	ldr	r2, [r3, #4]
 801c4b0:	6042      	str	r2, [r0, #4]
 801c4b2:	689b      	ldr	r3, [r3, #8]
 801c4b4:	6083      	str	r3, [r0, #8]
 801c4b6:	46a9      	mov	r9, r5
 801c4b8:	e757      	b.n	801c36a <_realloc_r+0xc2>
 801c4ba:	4580      	cmp	r8, r0
 801c4bc:	4607      	mov	r7, r0
 801c4be:	dddf      	ble.n	801c480 <_realloc_r+0x1d8>
 801c4c0:	4611      	mov	r1, r2
 801c4c2:	4650      	mov	r0, sl
 801c4c4:	f7fd f8ec 	bl	80196a0 <_malloc_r>
 801c4c8:	4607      	mov	r7, r0
 801c4ca:	2800      	cmp	r0, #0
 801c4cc:	d0af      	beq.n	801c42e <_realloc_r+0x186>
 801c4ce:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801c4d2:	f023 0301 	bic.w	r3, r3, #1
 801c4d6:	f1a0 0208 	sub.w	r2, r0, #8
 801c4da:	444b      	add	r3, r9
 801c4dc:	429a      	cmp	r2, r3
 801c4de:	d11f      	bne.n	801c520 <_realloc_r+0x278>
 801c4e0:	f850 7c04 	ldr.w	r7, [r0, #-4]
 801c4e4:	f027 0703 	bic.w	r7, r7, #3
 801c4e8:	4437      	add	r7, r6
 801c4ea:	e73e      	b.n	801c36a <_realloc_r+0xc2>
 801c4ec:	68a3      	ldr	r3, [r4, #8]
 801c4ee:	612b      	str	r3, [r5, #16]
 801c4f0:	68e3      	ldr	r3, [r4, #12]
 801c4f2:	616b      	str	r3, [r5, #20]
 801c4f4:	2a24      	cmp	r2, #36	; 0x24
 801c4f6:	bf01      	itttt	eq
 801c4f8:	6923      	ldreq	r3, [r4, #16]
 801c4fa:	61ab      	streq	r3, [r5, #24]
 801c4fc:	6962      	ldreq	r2, [r4, #20]
 801c4fe:	61ea      	streq	r2, [r5, #28]
 801c500:	bf19      	ittee	ne
 801c502:	f105 0018 	addne.w	r0, r5, #24
 801c506:	f104 0310 	addne.w	r3, r4, #16
 801c50a:	f105 0020 	addeq.w	r0, r5, #32
 801c50e:	f104 0318 	addeq.w	r3, r4, #24
 801c512:	e7ca      	b.n	801c4aa <_realloc_r+0x202>
 801c514:	4623      	mov	r3, r4
 801c516:	e7c8      	b.n	801c4aa <_realloc_r+0x202>
 801c518:	4621      	mov	r1, r4
 801c51a:	f7ff feaa 	bl	801c272 <memmove>
 801c51e:	e7ca      	b.n	801c4b6 <_realloc_r+0x20e>
 801c520:	1f32      	subs	r2, r6, #4
 801c522:	2a24      	cmp	r2, #36	; 0x24
 801c524:	d82d      	bhi.n	801c582 <_realloc_r+0x2da>
 801c526:	2a13      	cmp	r2, #19
 801c528:	d928      	bls.n	801c57c <_realloc_r+0x2d4>
 801c52a:	6823      	ldr	r3, [r4, #0]
 801c52c:	6003      	str	r3, [r0, #0]
 801c52e:	6863      	ldr	r3, [r4, #4]
 801c530:	6043      	str	r3, [r0, #4]
 801c532:	2a1b      	cmp	r2, #27
 801c534:	d80e      	bhi.n	801c554 <_realloc_r+0x2ac>
 801c536:	f100 0308 	add.w	r3, r0, #8
 801c53a:	f104 0208 	add.w	r2, r4, #8
 801c53e:	6811      	ldr	r1, [r2, #0]
 801c540:	6019      	str	r1, [r3, #0]
 801c542:	6851      	ldr	r1, [r2, #4]
 801c544:	6059      	str	r1, [r3, #4]
 801c546:	6892      	ldr	r2, [r2, #8]
 801c548:	609a      	str	r2, [r3, #8]
 801c54a:	4621      	mov	r1, r4
 801c54c:	4650      	mov	r0, sl
 801c54e:	f7ff fa4f 	bl	801b9f0 <_free_r>
 801c552:	e76c      	b.n	801c42e <_realloc_r+0x186>
 801c554:	68a3      	ldr	r3, [r4, #8]
 801c556:	6083      	str	r3, [r0, #8]
 801c558:	68e3      	ldr	r3, [r4, #12]
 801c55a:	60c3      	str	r3, [r0, #12]
 801c55c:	2a24      	cmp	r2, #36	; 0x24
 801c55e:	bf01      	itttt	eq
 801c560:	6923      	ldreq	r3, [r4, #16]
 801c562:	6103      	streq	r3, [r0, #16]
 801c564:	6961      	ldreq	r1, [r4, #20]
 801c566:	6141      	streq	r1, [r0, #20]
 801c568:	bf19      	ittee	ne
 801c56a:	f100 0310 	addne.w	r3, r0, #16
 801c56e:	f104 0210 	addne.w	r2, r4, #16
 801c572:	f100 0318 	addeq.w	r3, r0, #24
 801c576:	f104 0218 	addeq.w	r2, r4, #24
 801c57a:	e7e0      	b.n	801c53e <_realloc_r+0x296>
 801c57c:	4603      	mov	r3, r0
 801c57e:	4622      	mov	r2, r4
 801c580:	e7dd      	b.n	801c53e <_realloc_r+0x296>
 801c582:	4621      	mov	r1, r4
 801c584:	f7ff fe75 	bl	801c272 <memmove>
 801c588:	e7df      	b.n	801c54a <_realloc_r+0x2a2>
 801c58a:	4637      	mov	r7, r6
 801c58c:	e6ed      	b.n	801c36a <_realloc_r+0xc2>
 801c58e:	f003 0301 	and.w	r3, r3, #1
 801c592:	431f      	orrs	r7, r3
 801c594:	f8c9 7004 	str.w	r7, [r9, #4]
 801c598:	6853      	ldr	r3, [r2, #4]
 801c59a:	f043 0301 	orr.w	r3, r3, #1
 801c59e:	6053      	str	r3, [r2, #4]
 801c5a0:	e6ff      	b.n	801c3a2 <_realloc_r+0xfa>
 801c5a2:	bf00      	nop
 801c5a4:	20001dc0 	.word	0x20001dc0

0801c5a8 <_init>:
 801c5a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c5aa:	bf00      	nop
 801c5ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c5ae:	bc08      	pop	{r3}
 801c5b0:	469e      	mov	lr, r3
 801c5b2:	4770      	bx	lr

0801c5b4 <_fini>:
 801c5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c5b6:	bf00      	nop
 801c5b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c5ba:	bc08      	pop	{r3}
 801c5bc:	469e      	mov	lr, r3
 801c5be:	4770      	bx	lr
