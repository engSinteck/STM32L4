
STM32L4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011b70  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ccc  08011d00  08011d00  00021d00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080149cc  080149cc  000249cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080149d4  080149d4  000249d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080149d8  080149d8  000249d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000013a0  20000000  080149dc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000c5b8  200013a0  08015d7c  000313a0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000d958  08015d7c  0003d958  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000313a0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0007d005  00000000  00000000  000313d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000e290  00000000  00000000  000ae3d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0002c9f5  00000000  00000000  000bc665  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00002ec0  00000000  00000000  000e9060  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00004838  00000000  00000000  000ebf20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001d463  00000000  00000000  000f0758  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0001041f  00000000  00000000  0010dbbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0011dfda  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000093fc  00000000  00000000  0011e058  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200013a0 	.word	0x200013a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011ce8 	.word	0x08011ce8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200013a4 	.word	0x200013a4
 80001cc:	08011ce8 	.word	0x08011ce8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f092 0f00 	teq	r2, #0
 800058a:	bf14      	ite	ne
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	4770      	bxeq	lr
 8000592:	b530      	push	{r4, r5, lr}
 8000594:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000598:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800059c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a0:	e720      	b.n	80003e4 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_ul2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	e00a      	b.n	80005ca <__aeabi_l2d+0x16>

080005b4 <__aeabi_l2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005c2:	d502      	bpl.n	80005ca <__aeabi_l2d+0x16>
 80005c4:	4240      	negs	r0, r0
 80005c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ce:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d6:	f43f aedc 	beq.w	8000392 <__adddf3+0xe6>
 80005da:	f04f 0203 	mov.w	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005f2:	f1c2 0320 	rsb	r3, r2, #32
 80005f6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 fe03 	lsl.w	lr, r1, r3
 8000602:	ea40 000e 	orr.w	r0, r0, lr
 8000606:	fa21 f102 	lsr.w	r1, r1, r2
 800060a:	4414      	add	r4, r2
 800060c:	e6c1      	b.n	8000392 <__adddf3+0xe6>
 800060e:	bf00      	nop

08000610 <__aeabi_dmul>:
 8000610:	b570      	push	{r4, r5, r6, lr}
 8000612:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000616:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800061a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061e:	bf1d      	ittte	ne
 8000620:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000624:	ea94 0f0c 	teqne	r4, ip
 8000628:	ea95 0f0c 	teqne	r5, ip
 800062c:	f000 f8de 	bleq	80007ec <__aeabi_dmul+0x1dc>
 8000630:	442c      	add	r4, r5
 8000632:	ea81 0603 	eor.w	r6, r1, r3
 8000636:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800063a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000642:	bf18      	it	ne
 8000644:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000648:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800064c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000650:	d038      	beq.n	80006c4 <__aeabi_dmul+0xb4>
 8000652:	fba0 ce02 	umull	ip, lr, r0, r2
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000662:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000666:	f04f 0600 	mov.w	r6, #0
 800066a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066e:	f09c 0f00 	teq	ip, #0
 8000672:	bf18      	it	ne
 8000674:	f04e 0e01 	orrne.w	lr, lr, #1
 8000678:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800067c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000680:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000684:	d204      	bcs.n	8000690 <__aeabi_dmul+0x80>
 8000686:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800068a:	416d      	adcs	r5, r5
 800068c:	eb46 0606 	adc.w	r6, r6, r6
 8000690:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000694:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000698:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800069c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a8:	bf88      	it	hi
 80006aa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ae:	d81e      	bhi.n	80006ee <__aeabi_dmul+0xde>
 80006b0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b4:	bf08      	it	eq
 80006b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ba:	f150 0000 	adcs.w	r0, r0, #0
 80006be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c8:	ea46 0101 	orr.w	r1, r6, r1
 80006cc:	ea40 0002 	orr.w	r0, r0, r2
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d8:	bfc2      	ittt	gt
 80006da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	popgt	{r4, r5, r6, pc}
 80006e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e8:	f04f 0e00 	mov.w	lr, #0
 80006ec:	3c01      	subs	r4, #1
 80006ee:	f300 80ab 	bgt.w	8000848 <__aeabi_dmul+0x238>
 80006f2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f6:	bfde      	ittt	le
 80006f8:	2000      	movle	r0, #0
 80006fa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd70      	pople	{r4, r5, r6, pc}
 8000700:	f1c4 0400 	rsb	r4, r4, #0
 8000704:	3c20      	subs	r4, #32
 8000706:	da35      	bge.n	8000774 <__aeabi_dmul+0x164>
 8000708:	340c      	adds	r4, #12
 800070a:	dc1b      	bgt.n	8000744 <__aeabi_dmul+0x134>
 800070c:	f104 0414 	add.w	r4, r4, #20
 8000710:	f1c4 0520 	rsb	r5, r4, #32
 8000714:	fa00 f305 	lsl.w	r3, r0, r5
 8000718:	fa20 f004 	lsr.w	r0, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea40 0002 	orr.w	r0, r0, r2
 8000724:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000728:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800072c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000730:	fa21 f604 	lsr.w	r6, r1, r4
 8000734:	eb42 0106 	adc.w	r1, r2, r6
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f1c4 040c 	rsb	r4, r4, #12
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f304 	lsl.w	r3, r0, r4
 8000750:	fa20 f005 	lsr.w	r0, r0, r5
 8000754:	fa01 f204 	lsl.w	r2, r1, r4
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000764:	f141 0100 	adc.w	r1, r1, #0
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 0520 	rsb	r5, r4, #32
 8000778:	fa00 f205 	lsl.w	r2, r0, r5
 800077c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000780:	fa20 f304 	lsr.w	r3, r0, r4
 8000784:	fa01 f205 	lsl.w	r2, r1, r5
 8000788:	ea43 0302 	orr.w	r3, r3, r2
 800078c:	fa21 f004 	lsr.w	r0, r1, r4
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	fa21 f204 	lsr.w	r2, r1, r4
 8000798:	ea20 0002 	bic.w	r0, r0, r2
 800079c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f094 0f00 	teq	r4, #0
 80007b0:	d10f      	bne.n	80007d2 <__aeabi_dmul+0x1c2>
 80007b2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b6:	0040      	lsls	r0, r0, #1
 80007b8:	eb41 0101 	adc.w	r1, r1, r1
 80007bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3c01      	subeq	r4, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1a6>
 80007c6:	ea41 0106 	orr.w	r1, r1, r6
 80007ca:	f095 0f00 	teq	r5, #0
 80007ce:	bf18      	it	ne
 80007d0:	4770      	bxne	lr
 80007d2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d6:	0052      	lsls	r2, r2, #1
 80007d8:	eb43 0303 	adc.w	r3, r3, r3
 80007dc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3d01      	subeq	r5, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1c6>
 80007e6:	ea43 0306 	orr.w	r3, r3, r6
 80007ea:	4770      	bx	lr
 80007ec:	ea94 0f0c 	teq	r4, ip
 80007f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f4:	bf18      	it	ne
 80007f6:	ea95 0f0c 	teqne	r5, ip
 80007fa:	d00c      	beq.n	8000816 <__aeabi_dmul+0x206>
 80007fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000800:	bf18      	it	ne
 8000802:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000806:	d1d1      	bne.n	80007ac <__aeabi_dmul+0x19c>
 8000808:	ea81 0103 	eor.w	r1, r1, r3
 800080c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000810:	f04f 0000 	mov.w	r0, #0
 8000814:	bd70      	pop	{r4, r5, r6, pc}
 8000816:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081a:	bf06      	itte	eq
 800081c:	4610      	moveq	r0, r2
 800081e:	4619      	moveq	r1, r3
 8000820:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000824:	d019      	beq.n	800085a <__aeabi_dmul+0x24a>
 8000826:	ea94 0f0c 	teq	r4, ip
 800082a:	d102      	bne.n	8000832 <__aeabi_dmul+0x222>
 800082c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000830:	d113      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000832:	ea95 0f0c 	teq	r5, ip
 8000836:	d105      	bne.n	8000844 <__aeabi_dmul+0x234>
 8000838:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800083c:	bf1c      	itt	ne
 800083e:	4610      	movne	r0, r2
 8000840:	4619      	movne	r1, r3
 8000842:	d10a      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000844:	ea81 0103 	eor.w	r1, r1, r3
 8000848:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800084c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000850:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000854:	f04f 0000 	mov.w	r0, #0
 8000858:	bd70      	pop	{r4, r5, r6, pc}
 800085a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000862:	bd70      	pop	{r4, r5, r6, pc}

08000864 <__aeabi_ddiv>:
 8000864:	b570      	push	{r4, r5, r6, lr}
 8000866:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800086a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000872:	bf1d      	ittte	ne
 8000874:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000878:	ea94 0f0c 	teqne	r4, ip
 800087c:	ea95 0f0c 	teqne	r5, ip
 8000880:	f000 f8a7 	bleq	80009d2 <__aeabi_ddiv+0x16e>
 8000884:	eba4 0405 	sub.w	r4, r4, r5
 8000888:	ea81 0e03 	eor.w	lr, r1, r3
 800088c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000890:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000894:	f000 8088 	beq.w	80009a8 <__aeabi_ddiv+0x144>
 8000898:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800089c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008bc:	429d      	cmp	r5, r3
 80008be:	bf08      	it	eq
 80008c0:	4296      	cmpeq	r6, r2
 80008c2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ca:	d202      	bcs.n	80008d2 <__aeabi_ddiv+0x6e>
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d2:	1ab6      	subs	r6, r6, r2
 80008d4:	eb65 0503 	sbc.w	r5, r5, r3
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008e2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000940:	ea55 0e06 	orrs.w	lr, r5, r6
 8000944:	d018      	beq.n	8000978 <__aeabi_ddiv+0x114>
 8000946:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800094a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000952:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000956:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800095a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000962:	d1c0      	bne.n	80008e6 <__aeabi_ddiv+0x82>
 8000964:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000968:	d10b      	bne.n	8000982 <__aeabi_ddiv+0x11e>
 800096a:	ea41 0100 	orr.w	r1, r1, r0
 800096e:	f04f 0000 	mov.w	r0, #0
 8000972:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000976:	e7b6      	b.n	80008e6 <__aeabi_ddiv+0x82>
 8000978:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800097c:	bf04      	itt	eq
 800097e:	4301      	orreq	r1, r0
 8000980:	2000      	moveq	r0, #0
 8000982:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000986:	bf88      	it	hi
 8000988:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800098c:	f63f aeaf 	bhi.w	80006ee <__aeabi_dmul+0xde>
 8000990:	ebb5 0c03 	subs.w	ip, r5, r3
 8000994:	bf04      	itt	eq
 8000996:	ebb6 0c02 	subseq.w	ip, r6, r2
 800099a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099e:	f150 0000 	adcs.w	r0, r0, #0
 80009a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	pop	{r4, r5, r6, pc}
 80009a8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009ac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b4:	bfc2      	ittt	gt
 80009b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009be:	bd70      	popgt	{r4, r5, r6, pc}
 80009c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c4:	f04f 0e00 	mov.w	lr, #0
 80009c8:	3c01      	subs	r4, #1
 80009ca:	e690      	b.n	80006ee <__aeabi_dmul+0xde>
 80009cc:	ea45 0e06 	orr.w	lr, r5, r6
 80009d0:	e68d      	b.n	80006ee <__aeabi_dmul+0xde>
 80009d2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d6:	ea94 0f0c 	teq	r4, ip
 80009da:	bf08      	it	eq
 80009dc:	ea95 0f0c 	teqeq	r5, ip
 80009e0:	f43f af3b 	beq.w	800085a <__aeabi_dmul+0x24a>
 80009e4:	ea94 0f0c 	teq	r4, ip
 80009e8:	d10a      	bne.n	8000a00 <__aeabi_ddiv+0x19c>
 80009ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ee:	f47f af34 	bne.w	800085a <__aeabi_dmul+0x24a>
 80009f2:	ea95 0f0c 	teq	r5, ip
 80009f6:	f47f af25 	bne.w	8000844 <__aeabi_dmul+0x234>
 80009fa:	4610      	mov	r0, r2
 80009fc:	4619      	mov	r1, r3
 80009fe:	e72c      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a00:	ea95 0f0c 	teq	r5, ip
 8000a04:	d106      	bne.n	8000a14 <__aeabi_ddiv+0x1b0>
 8000a06:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a0a:	f43f aefd 	beq.w	8000808 <__aeabi_dmul+0x1f8>
 8000a0e:	4610      	mov	r0, r2
 8000a10:	4619      	mov	r1, r3
 8000a12:	e722      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a18:	bf18      	it	ne
 8000a1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1e:	f47f aec5 	bne.w	80007ac <__aeabi_dmul+0x19c>
 8000a22:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a26:	f47f af0d 	bne.w	8000844 <__aeabi_dmul+0x234>
 8000a2a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2e:	f47f aeeb 	bne.w	8000808 <__aeabi_dmul+0x1f8>
 8000a32:	e712      	b.n	800085a <__aeabi_dmul+0x24a>

08000a34 <__gedf2>:
 8000a34:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a38:	e006      	b.n	8000a48 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__ledf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	e002      	b.n	8000a48 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__cmpdf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a58:	bf18      	it	ne
 8000a5a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5e:	d01b      	beq.n	8000a98 <__cmpdf2+0x54>
 8000a60:	b001      	add	sp, #4
 8000a62:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a66:	bf0c      	ite	eq
 8000a68:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a6c:	ea91 0f03 	teqne	r1, r3
 8000a70:	bf02      	ittt	eq
 8000a72:	ea90 0f02 	teqeq	r0, r2
 8000a76:	2000      	moveq	r0, #0
 8000a78:	4770      	bxeq	lr
 8000a7a:	f110 0f00 	cmn.w	r0, #0
 8000a7e:	ea91 0f03 	teq	r1, r3
 8000a82:	bf58      	it	pl
 8000a84:	4299      	cmppl	r1, r3
 8000a86:	bf08      	it	eq
 8000a88:	4290      	cmpeq	r0, r2
 8000a8a:	bf2c      	ite	cs
 8000a8c:	17d8      	asrcs	r0, r3, #31
 8000a8e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a92:	f040 0001 	orr.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d102      	bne.n	8000aa8 <__cmpdf2+0x64>
 8000aa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa6:	d107      	bne.n	8000ab8 <__cmpdf2+0x74>
 8000aa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d1d6      	bne.n	8000a60 <__cmpdf2+0x1c>
 8000ab2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab6:	d0d3      	beq.n	8000a60 <__cmpdf2+0x1c>
 8000ab8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdrcmple>:
 8000ac0:	4684      	mov	ip, r0
 8000ac2:	4610      	mov	r0, r2
 8000ac4:	4662      	mov	r2, ip
 8000ac6:	468c      	mov	ip, r1
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4663      	mov	r3, ip
 8000acc:	e000      	b.n	8000ad0 <__aeabi_cdcmpeq>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_cdcmpeq>:
 8000ad0:	b501      	push	{r0, lr}
 8000ad2:	f7ff ffb7 	bl	8000a44 <__cmpdf2>
 8000ad6:	2800      	cmp	r0, #0
 8000ad8:	bf48      	it	mi
 8000ada:	f110 0f00 	cmnmi.w	r0, #0
 8000ade:	bd01      	pop	{r0, pc}

08000ae0 <__aeabi_dcmpeq>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff fff4 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000ae8:	bf0c      	ite	eq
 8000aea:	2001      	moveq	r0, #1
 8000aec:	2000      	movne	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmplt>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffea 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000afc:	bf34      	ite	cc
 8000afe:	2001      	movcc	r0, #1
 8000b00:	2000      	movcs	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmple>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffe0 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000b10:	bf94      	ite	ls
 8000b12:	2001      	movls	r0, #1
 8000b14:	2000      	movhi	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpge>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffce 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b24:	bf94      	ite	ls
 8000b26:	2001      	movls	r0, #1
 8000b28:	2000      	movhi	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmpgt>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffc4 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b38:	bf34      	ite	cc
 8000b3a:	2001      	movcc	r0, #1
 8000b3c:	2000      	movcs	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpun>:
 8000b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x10>
 8000b4e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b52:	d10a      	bne.n	8000b6a <__aeabi_dcmpun+0x26>
 8000b54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	d102      	bne.n	8000b64 <__aeabi_dcmpun+0x20>
 8000b5e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b62:	d102      	bne.n	8000b6a <__aeabi_dcmpun+0x26>
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	f04f 0001 	mov.w	r0, #1
 8000b6e:	4770      	bx	lr

08000b70 <__aeabi_d2iz>:
 8000b70:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b74:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b78:	d215      	bcs.n	8000ba6 <__aeabi_d2iz+0x36>
 8000b7a:	d511      	bpl.n	8000ba0 <__aeabi_d2iz+0x30>
 8000b7c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b84:	d912      	bls.n	8000bac <__aeabi_d2iz+0x3c>
 8000b86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b92:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b96:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000baa:	d105      	bne.n	8000bb8 <__aeabi_d2iz+0x48>
 8000bac:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb0:	bf08      	it	eq
 8000bb2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_uldivmod>:
 8000bc0:	b953      	cbnz	r3, 8000bd8 <__aeabi_uldivmod+0x18>
 8000bc2:	b94a      	cbnz	r2, 8000bd8 <__aeabi_uldivmod+0x18>
 8000bc4:	2900      	cmp	r1, #0
 8000bc6:	bf08      	it	eq
 8000bc8:	2800      	cmpeq	r0, #0
 8000bca:	bf1c      	itt	ne
 8000bcc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bd0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bd4:	f000 b97a 	b.w	8000ecc <__aeabi_idiv0>
 8000bd8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bdc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be0:	f000 f806 	bl	8000bf0 <__udivmoddi4>
 8000be4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bec:	b004      	add	sp, #16
 8000bee:	4770      	bx	lr

08000bf0 <__udivmoddi4>:
 8000bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf4:	468c      	mov	ip, r1
 8000bf6:	460d      	mov	r5, r1
 8000bf8:	4604      	mov	r4, r0
 8000bfa:	9e08      	ldr	r6, [sp, #32]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d151      	bne.n	8000ca4 <__udivmoddi4+0xb4>
 8000c00:	428a      	cmp	r2, r1
 8000c02:	4617      	mov	r7, r2
 8000c04:	d96d      	bls.n	8000ce2 <__udivmoddi4+0xf2>
 8000c06:	fab2 fe82 	clz	lr, r2
 8000c0a:	f1be 0f00 	cmp.w	lr, #0
 8000c0e:	d00b      	beq.n	8000c28 <__udivmoddi4+0x38>
 8000c10:	f1ce 0c20 	rsb	ip, lr, #32
 8000c14:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c18:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c1c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c20:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c24:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c28:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c2c:	0c25      	lsrs	r5, r4, #16
 8000c2e:	fbbc f8fa 	udiv	r8, ip, sl
 8000c32:	fa1f f987 	uxth.w	r9, r7
 8000c36:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c3a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c3e:	fb08 f309 	mul.w	r3, r8, r9
 8000c42:	42ab      	cmp	r3, r5
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x6c>
 8000c46:	19ed      	adds	r5, r5, r7
 8000c48:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000c4c:	f080 8123 	bcs.w	8000e96 <__udivmoddi4+0x2a6>
 8000c50:	42ab      	cmp	r3, r5
 8000c52:	f240 8120 	bls.w	8000e96 <__udivmoddi4+0x2a6>
 8000c56:	f1a8 0802 	sub.w	r8, r8, #2
 8000c5a:	443d      	add	r5, r7
 8000c5c:	1aed      	subs	r5, r5, r3
 8000c5e:	b2a4      	uxth	r4, r4
 8000c60:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c64:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c68:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c6c:	fb00 f909 	mul.w	r9, r0, r9
 8000c70:	45a1      	cmp	r9, r4
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x98>
 8000c74:	19e4      	adds	r4, r4, r7
 8000c76:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c7a:	f080 810a 	bcs.w	8000e92 <__udivmoddi4+0x2a2>
 8000c7e:	45a1      	cmp	r9, r4
 8000c80:	f240 8107 	bls.w	8000e92 <__udivmoddi4+0x2a2>
 8000c84:	3802      	subs	r0, #2
 8000c86:	443c      	add	r4, r7
 8000c88:	eba4 0409 	sub.w	r4, r4, r9
 8000c8c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c90:	2100      	movs	r1, #0
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	d061      	beq.n	8000d5a <__udivmoddi4+0x16a>
 8000c96:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	6034      	str	r4, [r6, #0]
 8000c9e:	6073      	str	r3, [r6, #4]
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	428b      	cmp	r3, r1
 8000ca6:	d907      	bls.n	8000cb8 <__udivmoddi4+0xc8>
 8000ca8:	2e00      	cmp	r6, #0
 8000caa:	d054      	beq.n	8000d56 <__udivmoddi4+0x166>
 8000cac:	2100      	movs	r1, #0
 8000cae:	e886 0021 	stmia.w	r6, {r0, r5}
 8000cb2:	4608      	mov	r0, r1
 8000cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb8:	fab3 f183 	clz	r1, r3
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	f040 808e 	bne.w	8000dde <__udivmoddi4+0x1ee>
 8000cc2:	42ab      	cmp	r3, r5
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xdc>
 8000cc6:	4282      	cmp	r2, r0
 8000cc8:	f200 80fa 	bhi.w	8000ec0 <__udivmoddi4+0x2d0>
 8000ccc:	1a84      	subs	r4, r0, r2
 8000cce:	eb65 0503 	sbc.w	r5, r5, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	46ac      	mov	ip, r5
 8000cd6:	2e00      	cmp	r6, #0
 8000cd8:	d03f      	beq.n	8000d5a <__udivmoddi4+0x16a>
 8000cda:	e886 1010 	stmia.w	r6, {r4, ip}
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	b912      	cbnz	r2, 8000cea <__udivmoddi4+0xfa>
 8000ce4:	2701      	movs	r7, #1
 8000ce6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000cea:	fab7 fe87 	clz	lr, r7
 8000cee:	f1be 0f00 	cmp.w	lr, #0
 8000cf2:	d134      	bne.n	8000d5e <__udivmoddi4+0x16e>
 8000cf4:	1beb      	subs	r3, r5, r7
 8000cf6:	0c3a      	lsrs	r2, r7, #16
 8000cf8:	fa1f fc87 	uxth.w	ip, r7
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	fbb3 f8f2 	udiv	r8, r3, r2
 8000d02:	0c25      	lsrs	r5, r4, #16
 8000d04:	fb02 3318 	mls	r3, r2, r8, r3
 8000d08:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d0c:	fb0c f308 	mul.w	r3, ip, r8
 8000d10:	42ab      	cmp	r3, r5
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x134>
 8000d14:	19ed      	adds	r5, r5, r7
 8000d16:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x132>
 8000d1c:	42ab      	cmp	r3, r5
 8000d1e:	f200 80d1 	bhi.w	8000ec4 <__udivmoddi4+0x2d4>
 8000d22:	4680      	mov	r8, r0
 8000d24:	1aed      	subs	r5, r5, r3
 8000d26:	b2a3      	uxth	r3, r4
 8000d28:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d2c:	fb02 5510 	mls	r5, r2, r0, r5
 8000d30:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d34:	fb0c fc00 	mul.w	ip, ip, r0
 8000d38:	45a4      	cmp	ip, r4
 8000d3a:	d907      	bls.n	8000d4c <__udivmoddi4+0x15c>
 8000d3c:	19e4      	adds	r4, r4, r7
 8000d3e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x15a>
 8000d44:	45a4      	cmp	ip, r4
 8000d46:	f200 80b8 	bhi.w	8000eba <__udivmoddi4+0x2ca>
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	eba4 040c 	sub.w	r4, r4, ip
 8000d50:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d54:	e79d      	b.n	8000c92 <__udivmoddi4+0xa2>
 8000d56:	4631      	mov	r1, r6
 8000d58:	4630      	mov	r0, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	f1ce 0420 	rsb	r4, lr, #32
 8000d62:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d66:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d6a:	fa20 f804 	lsr.w	r8, r0, r4
 8000d6e:	0c3a      	lsrs	r2, r7, #16
 8000d70:	fa25 f404 	lsr.w	r4, r5, r4
 8000d74:	ea48 0803 	orr.w	r8, r8, r3
 8000d78:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d7c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d80:	fb02 4411 	mls	r4, r2, r1, r4
 8000d84:	fa1f fc87 	uxth.w	ip, r7
 8000d88:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000d8c:	fb01 f30c 	mul.w	r3, r1, ip
 8000d90:	42ab      	cmp	r3, r5
 8000d92:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d96:	d909      	bls.n	8000dac <__udivmoddi4+0x1bc>
 8000d98:	19ed      	adds	r5, r5, r7
 8000d9a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 8000d9e:	f080 808a 	bcs.w	8000eb6 <__udivmoddi4+0x2c6>
 8000da2:	42ab      	cmp	r3, r5
 8000da4:	f240 8087 	bls.w	8000eb6 <__udivmoddi4+0x2c6>
 8000da8:	3902      	subs	r1, #2
 8000daa:	443d      	add	r5, r7
 8000dac:	1aeb      	subs	r3, r5, r3
 8000dae:	fa1f f588 	uxth.w	r5, r8
 8000db2:	fbb3 f0f2 	udiv	r0, r3, r2
 8000db6:	fb02 3310 	mls	r3, r2, r0, r3
 8000dba:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dbe:	fb00 f30c 	mul.w	r3, r0, ip
 8000dc2:	42ab      	cmp	r3, r5
 8000dc4:	d907      	bls.n	8000dd6 <__udivmoddi4+0x1e6>
 8000dc6:	19ed      	adds	r5, r5, r7
 8000dc8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000dcc:	d26f      	bcs.n	8000eae <__udivmoddi4+0x2be>
 8000dce:	42ab      	cmp	r3, r5
 8000dd0:	d96d      	bls.n	8000eae <__udivmoddi4+0x2be>
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	443d      	add	r5, r7
 8000dd6:	1aeb      	subs	r3, r5, r3
 8000dd8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ddc:	e78f      	b.n	8000cfe <__udivmoddi4+0x10e>
 8000dde:	f1c1 0720 	rsb	r7, r1, #32
 8000de2:	fa22 f807 	lsr.w	r8, r2, r7
 8000de6:	408b      	lsls	r3, r1
 8000de8:	fa05 f401 	lsl.w	r4, r5, r1
 8000dec:	ea48 0303 	orr.w	r3, r8, r3
 8000df0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000df4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000df8:	40fd      	lsrs	r5, r7
 8000dfa:	ea4e 0e04 	orr.w	lr, lr, r4
 8000dfe:	fbb5 f9fc 	udiv	r9, r5, ip
 8000e02:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000e06:	fb0c 5519 	mls	r5, ip, r9, r5
 8000e0a:	fa1f f883 	uxth.w	r8, r3
 8000e0e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e12:	fb09 f408 	mul.w	r4, r9, r8
 8000e16:	42ac      	cmp	r4, r5
 8000e18:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x244>
 8000e22:	18ed      	adds	r5, r5, r3
 8000e24:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e28:	d243      	bcs.n	8000eb2 <__udivmoddi4+0x2c2>
 8000e2a:	42ac      	cmp	r4, r5
 8000e2c:	d941      	bls.n	8000eb2 <__udivmoddi4+0x2c2>
 8000e2e:	f1a9 0902 	sub.w	r9, r9, #2
 8000e32:	441d      	add	r5, r3
 8000e34:	1b2d      	subs	r5, r5, r4
 8000e36:	fa1f fe8e 	uxth.w	lr, lr
 8000e3a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e3e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e42:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e46:	fb00 f808 	mul.w	r8, r0, r8
 8000e4a:	45a0      	cmp	r8, r4
 8000e4c:	d907      	bls.n	8000e5e <__udivmoddi4+0x26e>
 8000e4e:	18e4      	adds	r4, r4, r3
 8000e50:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000e54:	d229      	bcs.n	8000eaa <__udivmoddi4+0x2ba>
 8000e56:	45a0      	cmp	r8, r4
 8000e58:	d927      	bls.n	8000eaa <__udivmoddi4+0x2ba>
 8000e5a:	3802      	subs	r0, #2
 8000e5c:	441c      	add	r4, r3
 8000e5e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e62:	eba4 0408 	sub.w	r4, r4, r8
 8000e66:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6a:	454c      	cmp	r4, r9
 8000e6c:	46c6      	mov	lr, r8
 8000e6e:	464d      	mov	r5, r9
 8000e70:	d315      	bcc.n	8000e9e <__udivmoddi4+0x2ae>
 8000e72:	d012      	beq.n	8000e9a <__udivmoddi4+0x2aa>
 8000e74:	b156      	cbz	r6, 8000e8c <__udivmoddi4+0x29c>
 8000e76:	ebba 030e 	subs.w	r3, sl, lr
 8000e7a:	eb64 0405 	sbc.w	r4, r4, r5
 8000e7e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e82:	40cb      	lsrs	r3, r1
 8000e84:	431f      	orrs	r7, r3
 8000e86:	40cc      	lsrs	r4, r1
 8000e88:	6037      	str	r7, [r6, #0]
 8000e8a:	6074      	str	r4, [r6, #4]
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	4618      	mov	r0, r3
 8000e94:	e6f8      	b.n	8000c88 <__udivmoddi4+0x98>
 8000e96:	4690      	mov	r8, r2
 8000e98:	e6e0      	b.n	8000c5c <__udivmoddi4+0x6c>
 8000e9a:	45c2      	cmp	sl, r8
 8000e9c:	d2ea      	bcs.n	8000e74 <__udivmoddi4+0x284>
 8000e9e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ea2:	eb69 0503 	sbc.w	r5, r9, r3
 8000ea6:	3801      	subs	r0, #1
 8000ea8:	e7e4      	b.n	8000e74 <__udivmoddi4+0x284>
 8000eaa:	4628      	mov	r0, r5
 8000eac:	e7d7      	b.n	8000e5e <__udivmoddi4+0x26e>
 8000eae:	4640      	mov	r0, r8
 8000eb0:	e791      	b.n	8000dd6 <__udivmoddi4+0x1e6>
 8000eb2:	4681      	mov	r9, r0
 8000eb4:	e7be      	b.n	8000e34 <__udivmoddi4+0x244>
 8000eb6:	4601      	mov	r1, r0
 8000eb8:	e778      	b.n	8000dac <__udivmoddi4+0x1bc>
 8000eba:	3802      	subs	r0, #2
 8000ebc:	443c      	add	r4, r7
 8000ebe:	e745      	b.n	8000d4c <__udivmoddi4+0x15c>
 8000ec0:	4608      	mov	r0, r1
 8000ec2:	e708      	b.n	8000cd6 <__udivmoddi4+0xe6>
 8000ec4:	f1a8 0802 	sub.w	r8, r8, #2
 8000ec8:	443d      	add	r5, r7
 8000eca:	e72b      	b.n	8000d24 <__udivmoddi4+0x134>

08000ecc <__aeabi_idiv0>:
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop

08000ed0 <ST7735_write>:
uint16_t scr_width;
uint16_t scr_height;
uint8_t buf_tft[4096] = {0};

void ST7735_write(uint8_t data)
{
 8000ed0:	b507      	push	{r0, r1, r2, lr}
 8000ed2:	a902      	add	r1, sp, #8
	HAL_SPI_Transmit(&_SPI_PORT, (uint8_t *)&data, 1, HAL_MAX_DELAY);
 8000ed4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
{
 8000ed8:	f801 0d01 	strb.w	r0, [r1, #-1]!
	HAL_SPI_Transmit(&_SPI_PORT, (uint8_t *)&data, 1, HAL_MAX_DELAY);
 8000edc:	2201      	movs	r2, #1
 8000ede:	4803      	ldr	r0, [pc, #12]	; (8000eec <ST7735_write+0x1c>)
 8000ee0:	f003 ff65 	bl	8004dae <HAL_SPI_Transmit>
}
 8000ee4:	b003      	add	sp, #12
 8000ee6:	f85d fb04 	ldr.w	pc, [sp], #4
 8000eea:	bf00      	nop
 8000eec:	2000c6a8 	.word	0x2000c6a8

08000ef0 <ST7735_cmd>:
	tmp[0] = color >> 8;
	tmp[1] = color;
	HAL_SPI_Transmit(&_SPI_PORT, (uint8_t *)&tmp[0], 2, HAL_MAX_DELAY);
}

void ST7735_cmd(uint8_t cmd) {
 8000ef0:	b510      	push	{r4, lr}
	A0_L();
 8000ef2:	2200      	movs	r2, #0
void ST7735_cmd(uint8_t cmd) {
 8000ef4:	4604      	mov	r4, r0
	A0_L();
 8000ef6:	2180      	movs	r1, #128	; 0x80
 8000ef8:	4803      	ldr	r0, [pc, #12]	; (8000f08 <ST7735_cmd+0x18>)
 8000efa:	f002 f879 	bl	8002ff0 <HAL_GPIO_WritePin>
	ST7735_write(cmd);
 8000efe:	4620      	mov	r0, r4
}
 8000f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ST7735_write(cmd);
 8000f04:	f7ff bfe4 	b.w	8000ed0 <ST7735_write>
 8000f08:	48000400 	.word	0x48000400

08000f0c <ST7735_data>:

void ST7735_data(uint8_t data) {
 8000f0c:	b510      	push	{r4, lr}
	A0_H();
 8000f0e:	2201      	movs	r2, #1
void ST7735_data(uint8_t data) {
 8000f10:	4604      	mov	r4, r0
	A0_H();
 8000f12:	2180      	movs	r1, #128	; 0x80
 8000f14:	4803      	ldr	r0, [pc, #12]	; (8000f24 <ST7735_data+0x18>)
 8000f16:	f002 f86b 	bl	8002ff0 <HAL_GPIO_WritePin>
	ST7735_write(data);
 8000f1a:	4620      	mov	r0, r4
}
 8000f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ST7735_write(data);
 8000f20:	f7ff bfd6 	b.w	8000ed0 <ST7735_write>
 8000f24:	48000400 	.word	0x48000400

08000f28 <ST7735_Orientation>:
	CS_H();

	ST7735_Orientation(scr_CCW);
}

void ST7735_Orientation(ScrOrientation_TypeDef orientation) {
 8000f28:	b510      	push	{r4, lr}
	CS_L();
 8000f2a:	2200      	movs	r2, #0
void ST7735_Orientation(ScrOrientation_TypeDef orientation) {
 8000f2c:	4604      	mov	r4, r0
	CS_L();
 8000f2e:	2120      	movs	r1, #32
 8000f30:	4815      	ldr	r0, [pc, #84]	; (8000f88 <ST7735_Orientation+0x60>)
 8000f32:	f002 f85d 	bl	8002ff0 <HAL_GPIO_WritePin>
	ST7735_cmd(0x36); // Memory data access control:
 8000f36:	2036      	movs	r0, #54	; 0x36
 8000f38:	f7ff ffda 	bl	8000ef0 <ST7735_cmd>
	switch(orientation) {
 8000f3c:	2c02      	cmp	r4, #2
 8000f3e:	4a13      	ldr	r2, [pc, #76]	; (8000f8c <ST7735_Orientation+0x64>)
 8000f40:	4b13      	ldr	r3, [pc, #76]	; (8000f90 <ST7735_Orientation+0x68>)
 8000f42:	d011      	beq.n	8000f68 <ST7735_Orientation+0x40>
 8000f44:	2c03      	cmp	r4, #3
 8000f46:	f04f 0180 	mov.w	r1, #128	; 0x80
 8000f4a:	d013      	beq.n	8000f74 <ST7735_Orientation+0x4c>
 8000f4c:	2c01      	cmp	r4, #1
 8000f4e:	d116      	bne.n	8000f7e <ST7735_Orientation+0x56>
	case scr_CW:
		scr_width  = TFT_H;
 8000f50:	20a0      	movs	r0, #160	; 0xa0
 8000f52:	8010      	strh	r0, [r2, #0]
		scr_height = TFT_W;
 8000f54:	8019      	strh	r1, [r3, #0]
		ST7735_data(0xc0); // X-Mirror,Y-Mirror: Bottom to top; Right to left; RGB
		break;
	default:
		scr_width  = TFT_W;
		scr_height = TFT_H;
		ST7735_data(0x00); // Normal: Top to Bottom; Left to Right; RGB
 8000f56:	f7ff ffd9 	bl	8000f0c <ST7735_data>
		break;
	}
	CS_H();
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	2120      	movs	r1, #32
 8000f5e:	480a      	ldr	r0, [pc, #40]	; (8000f88 <ST7735_Orientation+0x60>)
}
 8000f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	CS_H();
 8000f64:	f002 b844 	b.w	8002ff0 <HAL_GPIO_WritePin>
		scr_width  = TFT_H;
 8000f68:	21a0      	movs	r1, #160	; 0xa0
 8000f6a:	8011      	strh	r1, [r2, #0]
		scr_height = TFT_W;
 8000f6c:	2280      	movs	r2, #128	; 0x80
 8000f6e:	801a      	strh	r2, [r3, #0]
		ST7735_data(0x60); // X-Y Exchange,X-Mirror
 8000f70:	2060      	movs	r0, #96	; 0x60
 8000f72:	e7f0      	b.n	8000f56 <ST7735_Orientation+0x2e>
		scr_width  = TFT_W;
 8000f74:	8011      	strh	r1, [r2, #0]
		scr_height = TFT_H;
 8000f76:	22a0      	movs	r2, #160	; 0xa0
 8000f78:	801a      	strh	r2, [r3, #0]
		ST7735_data(0xc0); // X-Mirror,Y-Mirror: Bottom to top; Right to left; RGB
 8000f7a:	20c0      	movs	r0, #192	; 0xc0
 8000f7c:	e7eb      	b.n	8000f56 <ST7735_Orientation+0x2e>
		scr_width  = TFT_W;
 8000f7e:	8011      	strh	r1, [r2, #0]
		scr_height = TFT_H;
 8000f80:	22a0      	movs	r2, #160	; 0xa0
 8000f82:	801a      	strh	r2, [r3, #0]
		ST7735_data(0x00); // Normal: Top to Bottom; Left to Right; RGB
 8000f84:	2000      	movs	r0, #0
 8000f86:	e7e6      	b.n	8000f56 <ST7735_Orientation+0x2e>
 8000f88:	48000400 	.word	0x48000400
 8000f8c:	2000c3ac 	.word	0x2000c3ac
 8000f90:	2000c3ae 	.word	0x2000c3ae

08000f94 <ST7735_Init>:
void ST7735_Init(void) {
 8000f94:	b510      	push	{r4, lr}
	CS_H();
 8000f96:	4c45      	ldr	r4, [pc, #276]	; (80010ac <ST7735_Init+0x118>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	4620      	mov	r0, r4
 8000f9c:	2120      	movs	r1, #32
 8000f9e:	f002 f827 	bl	8002ff0 <HAL_GPIO_WritePin>
	RST_H();
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	2140      	movs	r1, #64	; 0x40
 8000fa6:	4620      	mov	r0, r4
 8000fa8:	f002 f822 	bl	8002ff0 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000fac:	2005      	movs	r0, #5
 8000fae:	f001 fab5 	bl	800251c <HAL_Delay>
	RST_L();
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2140      	movs	r1, #64	; 0x40
 8000fb6:	4620      	mov	r0, r4
 8000fb8:	f002 f81a 	bl	8002ff0 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000fbc:	2005      	movs	r0, #5
 8000fbe:	f001 faad 	bl	800251c <HAL_Delay>
	RST_H();
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	2140      	movs	r1, #64	; 0x40
 8000fc6:	4620      	mov	r0, r4
 8000fc8:	f002 f812 	bl	8002ff0 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000fcc:	2005      	movs	r0, #5
 8000fce:	f001 faa5 	bl	800251c <HAL_Delay>
	CS_L();
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2120      	movs	r1, #32
 8000fd6:	4620      	mov	r0, r4
 8000fd8:	f002 f80a 	bl	8002ff0 <HAL_GPIO_WritePin>
	ST7735_cmd(0x11); 	// Sleep out & booster on
 8000fdc:	2011      	movs	r0, #17
 8000fde:	f7ff ff87 	bl	8000ef0 <ST7735_cmd>
	HAL_Delay(25); 		// Datasheet says what display wakes about 120ms (may be much faster actually)
 8000fe2:	2019      	movs	r0, #25
 8000fe4:	f001 fa9a 	bl	800251c <HAL_Delay>
	ST7735_cmd(0xb1);   // In normal mode (full colors):
 8000fe8:	20b1      	movs	r0, #177	; 0xb1
 8000fea:	f7ff ff81 	bl	8000ef0 <ST7735_cmd>
	A0_H();
 8000fee:	2201      	movs	r2, #1
 8000ff0:	2180      	movs	r1, #128	; 0x80
 8000ff2:	4620      	mov	r0, r4
 8000ff4:	f001 fffc 	bl	8002ff0 <HAL_GPIO_WritePin>
	ST7735_write(0x05); //   RTNA set 1-line period: RTNA2, RTNA0
 8000ff8:	2005      	movs	r0, #5
 8000ffa:	f7ff ff69 	bl	8000ed0 <ST7735_write>
	ST7735_write(0x3c); //   Front porch: FPA5,FPA4,FPA3,FPA2
 8000ffe:	203c      	movs	r0, #60	; 0x3c
 8001000:	f7ff ff66 	bl	8000ed0 <ST7735_write>
	ST7735_write(0x3c); //   Back porch: BPA5,BPA4,BPA3,BPA2
 8001004:	203c      	movs	r0, #60	; 0x3c
 8001006:	f7ff ff63 	bl	8000ed0 <ST7735_write>
	ST7735_cmd(0xb2);   // In idle mode (8-colors):
 800100a:	20b2      	movs	r0, #178	; 0xb2
 800100c:	f7ff ff70 	bl	8000ef0 <ST7735_cmd>
	A0_H();
 8001010:	2201      	movs	r2, #1
 8001012:	2180      	movs	r1, #128	; 0x80
 8001014:	4620      	mov	r0, r4
 8001016:	f001 ffeb 	bl	8002ff0 <HAL_GPIO_WritePin>
	ST7735_write(0x05); //   RTNB set 1-line period: RTNAB, RTNB0
 800101a:	2005      	movs	r0, #5
 800101c:	f7ff ff58 	bl	8000ed0 <ST7735_write>
	ST7735_write(0x3c); //   Front porch: FPB5,FPB4,FPB3,FPB2
 8001020:	203c      	movs	r0, #60	; 0x3c
 8001022:	f7ff ff55 	bl	8000ed0 <ST7735_write>
	ST7735_write(0x3c); //   Back porch: BPB5,BPB4,BPB3,BPB2
 8001026:	203c      	movs	r0, #60	; 0x3c
 8001028:	f7ff ff52 	bl	8000ed0 <ST7735_write>
	ST7735_cmd(0xb3);   // In partial mode + full colors:
 800102c:	20b3      	movs	r0, #179	; 0xb3
 800102e:	f7ff ff5f 	bl	8000ef0 <ST7735_cmd>
	A0_H();
 8001032:	2201      	movs	r2, #1
 8001034:	2180      	movs	r1, #128	; 0x80
 8001036:	4620      	mov	r0, r4
 8001038:	f001 ffda 	bl	8002ff0 <HAL_GPIO_WritePin>
	ST7735_write(0x05); //   RTNC set 1-line period: RTNC2, RTNC0
 800103c:	2005      	movs	r0, #5
 800103e:	f7ff ff47 	bl	8000ed0 <ST7735_write>
	ST7735_write(0x3c); //   Front porch: FPC5,FPC4,FPC3,FPC2
 8001042:	203c      	movs	r0, #60	; 0x3c
 8001044:	f7ff ff44 	bl	8000ed0 <ST7735_write>
	ST7735_write(0x3c); //   Back porch: BPC5,BPC4,BPC3,BPC2
 8001048:	203c      	movs	r0, #60	; 0x3c
 800104a:	f7ff ff41 	bl	8000ed0 <ST7735_write>
	ST7735_write(0x05); //   RTND set 1-line period: RTND2, RTND0
 800104e:	2005      	movs	r0, #5
 8001050:	f7ff ff3e 	bl	8000ed0 <ST7735_write>
	ST7735_write(0x3c); //   Front porch: FPD5,FPD4,FPD3,FPD2
 8001054:	203c      	movs	r0, #60	; 0x3c
 8001056:	f7ff ff3b 	bl	8000ed0 <ST7735_write>
	ST7735_write(0x3c); //   Back porch: BPD5,BPD4,BPD3,BPD2
 800105a:	203c      	movs	r0, #60	; 0x3c
 800105c:	f7ff ff38 	bl	8000ed0 <ST7735_write>
	ST7735_cmd(0xB4);   // Display dot inversion control:
 8001060:	20b4      	movs	r0, #180	; 0xb4
 8001062:	f7ff ff45 	bl	8000ef0 <ST7735_cmd>
	ST7735_data(0x03);  //   NLB,NLC
 8001066:	2003      	movs	r0, #3
 8001068:	f7ff ff50 	bl	8000f0c <ST7735_data>
	ST7735_cmd(0x3a);   // Interface pixel format
 800106c:	203a      	movs	r0, #58	; 0x3a
 800106e:	f7ff ff3f 	bl	8000ef0 <ST7735_cmd>
	ST7735_data(0x05);  // 16-bit/pixel RGB 5-6-5 (65k colors)
 8001072:	2005      	movs	r0, #5
 8001074:	f7ff ff4a 	bl	8000f0c <ST7735_data>
	ST7735_cmd(0x20);   // Display inversion off
 8001078:	2020      	movs	r0, #32
 800107a:	f7ff ff39 	bl	8000ef0 <ST7735_cmd>
	ST7735_cmd(0x13);   // Partial mode off
 800107e:	2013      	movs	r0, #19
 8001080:	f7ff ff36 	bl	8000ef0 <ST7735_cmd>
	ST7735_cmd(0x26);   // Gamma curve set:
 8001084:	2026      	movs	r0, #38	; 0x26
 8001086:	f7ff ff33 	bl	8000ef0 <ST7735_cmd>
	ST7735_data(0x01);  //   Gamma curve 1 (G2.2) or (G1.0)
 800108a:	2001      	movs	r0, #1
 800108c:	f7ff ff3e 	bl	8000f0c <ST7735_data>
	ST7735_cmd(0x29);   // Display on
 8001090:	2029      	movs	r0, #41	; 0x29
 8001092:	f7ff ff2d 	bl	8000ef0 <ST7735_cmd>
	CS_H();
 8001096:	4620      	mov	r0, r4
 8001098:	2201      	movs	r2, #1
 800109a:	2120      	movs	r1, #32
 800109c:	f001 ffa8 	bl	8002ff0 <HAL_GPIO_WritePin>
	ST7735_Orientation(scr_CCW);
 80010a0:	2002      	movs	r0, #2
}
 80010a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ST7735_Orientation(scr_CCW);
 80010a6:	f7ff bf3f 	b.w	8000f28 <ST7735_Orientation>
 80010aa:	bf00      	nop
 80010ac:	48000400 	.word	0x48000400

080010b0 <ST7735_AddrSet>:

void ST7735_AddrSet(uint16_t XS, uint16_t YS, uint16_t XE, uint16_t YE) {
 80010b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ST7735_cmd(0x2a); // Column address set
	A0_H();
 80010b4:	4e19      	ldr	r6, [pc, #100]	; (800111c <ST7735_AddrSet+0x6c>)
void ST7735_AddrSet(uint16_t XS, uint16_t YS, uint16_t XE, uint16_t YE) {
 80010b6:	4680      	mov	r8, r0
	ST7735_cmd(0x2a); // Column address set
 80010b8:	202a      	movs	r0, #42	; 0x2a
void ST7735_AddrSet(uint16_t XS, uint16_t YS, uint16_t XE, uint16_t YE) {
 80010ba:	461c      	mov	r4, r3
 80010bc:	460d      	mov	r5, r1
 80010be:	4617      	mov	r7, r2
	ST7735_cmd(0x2a); // Column address set
 80010c0:	f7ff ff16 	bl	8000ef0 <ST7735_cmd>
	A0_H();
 80010c4:	2201      	movs	r2, #1
 80010c6:	2180      	movs	r1, #128	; 0x80
 80010c8:	4630      	mov	r0, r6
 80010ca:	f001 ff91 	bl	8002ff0 <HAL_GPIO_WritePin>
	ST7735_write(XS >> 8);
 80010ce:	ea4f 2018 	mov.w	r0, r8, lsr #8
 80010d2:	f7ff fefd 	bl	8000ed0 <ST7735_write>
	ST7735_write(XS);
 80010d6:	fa5f f088 	uxtb.w	r0, r8
 80010da:	f7ff fef9 	bl	8000ed0 <ST7735_write>
	ST7735_write(XE >> 8);
 80010de:	0a38      	lsrs	r0, r7, #8
 80010e0:	f7ff fef6 	bl	8000ed0 <ST7735_write>
	ST7735_write(XE);
 80010e4:	b2f8      	uxtb	r0, r7
 80010e6:	f7ff fef3 	bl	8000ed0 <ST7735_write>

	ST7735_cmd(0x2b); // Row address set
 80010ea:	202b      	movs	r0, #43	; 0x2b
 80010ec:	f7ff ff00 	bl	8000ef0 <ST7735_cmd>
	A0_H();
 80010f0:	2201      	movs	r2, #1
 80010f2:	2180      	movs	r1, #128	; 0x80
 80010f4:	4630      	mov	r0, r6
 80010f6:	f001 ff7b 	bl	8002ff0 <HAL_GPIO_WritePin>
	ST7735_write(YS >> 8);
 80010fa:	0a28      	lsrs	r0, r5, #8
 80010fc:	f7ff fee8 	bl	8000ed0 <ST7735_write>
	ST7735_write(YS);
 8001100:	b2e8      	uxtb	r0, r5
 8001102:	f7ff fee5 	bl	8000ed0 <ST7735_write>
	ST7735_write(YE >> 8);
 8001106:	0a20      	lsrs	r0, r4, #8
 8001108:	f7ff fee2 	bl	8000ed0 <ST7735_write>
	ST7735_write(YE);
 800110c:	b2e0      	uxtb	r0, r4
 800110e:	f7ff fedf 	bl	8000ed0 <ST7735_write>

	ST7735_cmd(0x2c); // Memory write
 8001112:	202c      	movs	r0, #44	; 0x2c
}
 8001114:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ST7735_cmd(0x2c); // Memory write
 8001118:	f7ff beea 	b.w	8000ef0 <ST7735_cmd>
 800111c:	48000400 	.word	0x48000400

08001120 <ST7735_Clear>:

void ST7735_Clear(uint16_t color) {
 8001120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	CH = color >> 8;
	CL = (uint8_t)color;

	CS_L();
	ST7735_AddrSet(0, 0, scr_width - 1, scr_height - 1);
 8001124:	4c17      	ldr	r4, [pc, #92]	; (8001184 <ST7735_Clear+0x64>)
 8001126:	4d18      	ldr	r5, [pc, #96]	; (8001188 <ST7735_Clear+0x68>)
	CS_L();
 8001128:	2200      	movs	r2, #0
 800112a:	2120      	movs	r1, #32
	CH = color >> 8;
 800112c:	ea4f 2810 	mov.w	r8, r0, lsr #8
	CL = (uint8_t)color;
 8001130:	b2c6      	uxtb	r6, r0
	CS_L();
 8001132:	4816      	ldr	r0, [pc, #88]	; (800118c <ST7735_Clear+0x6c>)
 8001134:	f001 ff5c 	bl	8002ff0 <HAL_GPIO_WritePin>
	ST7735_AddrSet(0, 0, scr_width - 1, scr_height - 1);
 8001138:	8823      	ldrh	r3, [r4, #0]
 800113a:	882a      	ldrh	r2, [r5, #0]
 800113c:	2100      	movs	r1, #0
 800113e:	3b01      	subs	r3, #1
 8001140:	3a01      	subs	r2, #1
 8001142:	4608      	mov	r0, r1
 8001144:	b29b      	uxth	r3, r3
 8001146:	b292      	uxth	r2, r2
 8001148:	f7ff ffb2 	bl	80010b0 <ST7735_AddrSet>
	A0_H();
 800114c:	2201      	movs	r2, #1
 800114e:	2180      	movs	r1, #128	; 0x80
 8001150:	480e      	ldr	r0, [pc, #56]	; (800118c <ST7735_Clear+0x6c>)
 8001152:	f001 ff4d 	bl	8002ff0 <HAL_GPIO_WritePin>
	for (i = 0; i < scr_width * scr_height; i++) {
 8001156:	2700      	movs	r7, #0
 8001158:	8829      	ldrh	r1, [r5, #0]
 800115a:	8823      	ldrh	r3, [r4, #0]
 800115c:	b2ba      	uxth	r2, r7
 800115e:	434b      	muls	r3, r1
 8001160:	429a      	cmp	r2, r3
 8001162:	f107 0701 	add.w	r7, r7, #1
 8001166:	db06      	blt.n	8001176 <ST7735_Clear+0x56>
		ST7735_write(CH);
		ST7735_write(CL);
	}
	CS_H();
 8001168:	2201      	movs	r2, #1
 800116a:	2120      	movs	r1, #32
 800116c:	4807      	ldr	r0, [pc, #28]	; (800118c <ST7735_Clear+0x6c>)
}
 800116e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	CS_H();
 8001172:	f001 bf3d 	b.w	8002ff0 <HAL_GPIO_WritePin>
		ST7735_write(CH);
 8001176:	4640      	mov	r0, r8
 8001178:	f7ff feaa 	bl	8000ed0 <ST7735_write>
		ST7735_write(CL);
 800117c:	4630      	mov	r0, r6
 800117e:	f7ff fea7 	bl	8000ed0 <ST7735_write>
 8001182:	e7e9      	b.n	8001158 <ST7735_Clear+0x38>
 8001184:	2000c3ae 	.word	0x2000c3ae
 8001188:	2000c3ac 	.word	0x2000c3ac
 800118c:	48000400 	.word	0x48000400

08001190 <ST7735_Flush_3>:

void ST7735_Flush_3(lv_disp_drv_t * disp_drv, const lv_area_t * area, lv_color_t * color_p)
{
 8001190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t size;
	uint16_t teste = 0;

    size = ( ((area->x2 - area->x1) + 1)  * ((area->y2 - area->y1) + 1) );
 8001192:	f9b1 3000 	ldrsh.w	r3, [r1]
 8001196:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
{
 800119a:	4617      	mov	r7, r2
    size = ( ((area->x2 - area->x1) + 1)  * ((area->y2 - area->y1) + 1) );
 800119c:	1ae4      	subs	r4, r4, r3
 800119e:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 80011a2:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80011a6:	1a9b      	subs	r3, r3, r2
 80011a8:	3301      	adds	r3, #1
{
 80011aa:	460e      	mov	r6, r1

	CS_L();
 80011ac:	2200      	movs	r2, #0
 80011ae:	2120      	movs	r1, #32
{
 80011b0:	4605      	mov	r5, r0
    size = ( ((area->x2 - area->x1) + 1)  * ((area->y2 - area->y1) + 1) );
 80011b2:	3401      	adds	r4, #1
	CS_L();
 80011b4:	482c      	ldr	r0, [pc, #176]	; (8001268 <ST7735_Flush_3+0xd8>)
    size = ( ((area->x2 - area->x1) + 1)  * ((area->y2 - area->y1) + 1) );
 80011b6:	fb14 f403 	smulbb	r4, r4, r3
	CS_L();
 80011ba:	f001 ff19 	bl	8002ff0 <HAL_GPIO_WritePin>
    ST7735_cmd(0x2a); // Column address set
 80011be:	202a      	movs	r0, #42	; 0x2a
 80011c0:	f7ff fe96 	bl	8000ef0 <ST7735_cmd>
	A0_H();
 80011c4:	2201      	movs	r2, #1
 80011c6:	2180      	movs	r1, #128	; 0x80
 80011c8:	4827      	ldr	r0, [pc, #156]	; (8001268 <ST7735_Flush_3+0xd8>)
 80011ca:	f001 ff11 	bl	8002ff0 <HAL_GPIO_WritePin>
	ST7735_write(area->x1 >> 8);
 80011ce:	7870      	ldrb	r0, [r6, #1]
 80011d0:	f7ff fe7e 	bl	8000ed0 <ST7735_write>
	ST7735_write(area->x1);
 80011d4:	7830      	ldrb	r0, [r6, #0]
 80011d6:	f7ff fe7b 	bl	8000ed0 <ST7735_write>
	ST7735_write(area->x2 >> 8);
 80011da:	7970      	ldrb	r0, [r6, #5]
 80011dc:	f7ff fe78 	bl	8000ed0 <ST7735_write>
	ST7735_write(area->x2);
 80011e0:	7930      	ldrb	r0, [r6, #4]
 80011e2:	f7ff fe75 	bl	8000ed0 <ST7735_write>

	ST7735_cmd(0x2b); // Row address set
 80011e6:	202b      	movs	r0, #43	; 0x2b
 80011e8:	f7ff fe82 	bl	8000ef0 <ST7735_cmd>
	A0_H();
 80011ec:	2201      	movs	r2, #1
 80011ee:	2180      	movs	r1, #128	; 0x80
 80011f0:	481d      	ldr	r0, [pc, #116]	; (8001268 <ST7735_Flush_3+0xd8>)
 80011f2:	f001 fefd 	bl	8002ff0 <HAL_GPIO_WritePin>
	ST7735_write(area->y1 >> 8);
 80011f6:	78f0      	ldrb	r0, [r6, #3]
 80011f8:	f7ff fe6a 	bl	8000ed0 <ST7735_write>
	ST7735_write(area->y1);
 80011fc:	78b0      	ldrb	r0, [r6, #2]
 80011fe:	f7ff fe67 	bl	8000ed0 <ST7735_write>
	ST7735_write(area->y2 >> 8);
 8001202:	79f0      	ldrb	r0, [r6, #7]
 8001204:	f7ff fe64 	bl	8000ed0 <ST7735_write>
	ST7735_write(area->y2);
 8001208:	79b0      	ldrb	r0, [r6, #6]
 800120a:	f7ff fe61 	bl	8000ed0 <ST7735_write>

	ST7735_cmd(0x2c); // Memory write
 800120e:	202c      	movs	r0, #44	; 0x2c
 8001210:	f7ff fe6e 	bl	8000ef0 <ST7735_cmd>
	A0_H();
 8001214:	2201      	movs	r2, #1
 8001216:	4814      	ldr	r0, [pc, #80]	; (8001268 <ST7735_Flush_3+0xd8>)
 8001218:	2180      	movs	r1, #128	; 0x80
 800121a:	f001 fee9 	bl	8002ff0 <HAL_GPIO_WritePin>
//		HAL_SPI_Transmit(&_SPI_PORT, (uint8_t *)&tmp[0], 2, HAL_MAX_DELAY);
//		color_p++;
//		teste++;
//	}
	for(uint16_t x = 0; x <= size-1; x++) {
		buf_tft[(x*2) + 0] = color_p->full >> 8;
 800121e:	4813      	ldr	r0, [pc, #76]	; (800126c <ST7735_Flush_3+0xdc>)
    size = ( ((area->x2 - area->x1) + 1)  * ((area->y2 - area->y1) + 1) );
 8001220:	b2a4      	uxth	r4, r4
	for(uint16_t x = 0; x <= size-1; x++) {
 8001222:	2200      	movs	r2, #0
 8001224:	b293      	uxth	r3, r2
 8001226:	429c      	cmp	r4, r3
 8001228:	f102 0201 	add.w	r2, r2, #1
 800122c:	dc12      	bgt.n	8001254 <ST7735_Flush_3+0xc4>
		buf_tft[(x*2) + 1] = color_p->full;
		color_p++;
		teste++;
	}
	HAL_SPI_Transmit(&_SPI_PORT, (uint8_t *)&buf_tft[0], (size-1)*2, HAL_MAX_DELAY);
 800122e:	1e62      	subs	r2, r4, #1
 8001230:	0052      	lsls	r2, r2, #1
 8001232:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001236:	b292      	uxth	r2, r2
 8001238:	490c      	ldr	r1, [pc, #48]	; (800126c <ST7735_Flush_3+0xdc>)
 800123a:	480d      	ldr	r0, [pc, #52]	; (8001270 <ST7735_Flush_3+0xe0>)
 800123c:	f003 fdb7 	bl	8004dae <HAL_SPI_Transmit>

	CS_H();
 8001240:	4809      	ldr	r0, [pc, #36]	; (8001268 <ST7735_Flush_3+0xd8>)
 8001242:	2201      	movs	r2, #1
 8001244:	2120      	movs	r1, #32
 8001246:	f001 fed3 	bl	8002ff0 <HAL_GPIO_WritePin>

//	sprintf(buffer, "ST7735-Flush3 X1: %d X2: %d Y1: %d Y2: %d Size: %d Teste: %d\n", area->x1, area->x2, area->y1, area->y2, size, teste);
//    LV_LOG_ERROR(buffer);
//    logI(buffer);

	lv_disp_flush_ready(disp_drv);                  /* Tell you are ready with the flushing*/
 800124a:	4628      	mov	r0, r5
}
 800124c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lv_disp_flush_ready(disp_drv);                  /* Tell you are ready with the flushing*/
 8001250:	f00b bf12 	b.w	800d078 <lv_disp_flush_ready>
		buf_tft[(x*2) + 0] = color_p->full >> 8;
 8001254:	8839      	ldrh	r1, [r7, #0]
 8001256:	0a09      	lsrs	r1, r1, #8
 8001258:	f800 1013 	strb.w	r1, [r0, r3, lsl #1]
		buf_tft[(x*2) + 1] = color_p->full;
 800125c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001260:	f837 1b02 	ldrh.w	r1, [r7], #2
 8001264:	7059      	strb	r1, [r3, #1]
 8001266:	e7dd      	b.n	8001224 <ST7735_Flush_3+0x94>
 8001268:	48000400 	.word	0x48000400
 800126c:	200013bc 	.word	0x200013bc
 8001270:	2000c6a8 	.word	0x2000c6a8

08001274 <ST7735_PutChar5x7>:
		ST7735_write(CL);
	}
	CS_H();
}

void ST7735_PutChar5x7(uint16_t X, uint16_t Y, uint8_t chr, uint16_t color) {
 8001274:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	uint16_t i,j;
	uint8_t buffer[5];
    uint8_t CH = color >> 8;
 8001278:	ea4f 2813 	mov.w	r8, r3, lsr #8
    uint8_t CL = (uint8_t)color;
 800127c:	b2df      	uxtb	r7, r3

	memcpy(buffer,&Font5x7[(chr - 32) * 5],5);
 800127e:	f1a2 0320 	sub.w	r3, r2, #32
 8001282:	4a20      	ldr	r2, [pc, #128]	; (8001304 <ST7735_PutChar5x7+0x90>)
 8001284:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001288:	441a      	add	r2, r3
void ST7735_PutChar5x7(uint16_t X, uint16_t Y, uint8_t chr, uint16_t color) {
 800128a:	4604      	mov	r4, r0
	memcpy(buffer,&Font5x7[(chr - 32) * 5],5);
 800128c:	6810      	ldr	r0, [r2, #0]
 800128e:	7913      	ldrb	r3, [r2, #4]
 8001290:	9000      	str	r0, [sp, #0]
void ST7735_PutChar5x7(uint16_t X, uint16_t Y, uint8_t chr, uint16_t color) {
 8001292:	460d      	mov	r5, r1

	CS_L();
 8001294:	2200      	movs	r2, #0
 8001296:	2120      	movs	r1, #32
 8001298:	481b      	ldr	r0, [pc, #108]	; (8001308 <ST7735_PutChar5x7+0x94>)
	memcpy(buffer,&Font5x7[(chr - 32) * 5],5);
 800129a:	f88d 3004 	strb.w	r3, [sp, #4]
	CS_L();
 800129e:	f001 fea7 	bl	8002ff0 <HAL_GPIO_WritePin>
	ST7735_AddrSet(X,Y,X + 4,Y + 6);
 80012a2:	1dab      	adds	r3, r5, #6
 80012a4:	1d22      	adds	r2, r4, #4
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	b292      	uxth	r2, r2
 80012aa:	4629      	mov	r1, r5
 80012ac:	4620      	mov	r0, r4
 80012ae:	f7ff feff 	bl	80010b0 <ST7735_AddrSet>
	A0_H();
 80012b2:	2201      	movs	r2, #1
 80012b4:	2180      	movs	r1, #128	; 0x80
 80012b6:	4814      	ldr	r0, [pc, #80]	; (8001308 <ST7735_PutChar5x7+0x94>)
 80012b8:	f001 fe9a 	bl	8002ff0 <HAL_GPIO_WritePin>
 80012bc:	2600      	movs	r6, #0
 80012be:	f04f 0a01 	mov.w	sl, #1
 80012c2:	fa0a f906 	lsl.w	r9, sl, r6
	for (j = 0; j < 7; j++) {
        for (i = 0; i < 5; i++) {
    		if ((buffer[i] >> j) & 0x01) {
 80012c6:	2500      	movs	r5, #0
 80012c8:	f81d 4005 	ldrb.w	r4, [sp, r5]
 80012cc:	ea14 0409 	ands.w	r4, r4, r9
 80012d0:	d013      	beq.n	80012fa <ST7735_PutChar5x7+0x86>
    			ST7735_write(CH);
 80012d2:	4640      	mov	r0, r8
 80012d4:	f7ff fdfc 	bl	8000ed0 <ST7735_write>
    			ST7735_write(CL);
 80012d8:	4638      	mov	r0, r7
 80012da:	3501      	adds	r5, #1
    		} else {
    			ST7735_write(0x00);
    			ST7735_write(0x00);
 80012dc:	f7ff fdf8 	bl	8000ed0 <ST7735_write>
        for (i = 0; i < 5; i++) {
 80012e0:	2d05      	cmp	r5, #5
 80012e2:	d1f1      	bne.n	80012c8 <ST7735_PutChar5x7+0x54>
 80012e4:	3601      	adds	r6, #1
	for (j = 0; j < 7; j++) {
 80012e6:	2e07      	cmp	r6, #7
 80012e8:	d1eb      	bne.n	80012c2 <ST7735_PutChar5x7+0x4e>
    		}
    	}
    }
	CS_H();
 80012ea:	4807      	ldr	r0, [pc, #28]	; (8001308 <ST7735_PutChar5x7+0x94>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	2120      	movs	r1, #32
}
 80012f0:	b002      	add	sp, #8
 80012f2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	CS_H();
 80012f6:	f001 be7b 	b.w	8002ff0 <HAL_GPIO_WritePin>
    			ST7735_write(0x00);
 80012fa:	4620      	mov	r0, r4
 80012fc:	f7ff fde8 	bl	8000ed0 <ST7735_write>
    			ST7735_write(0x00);
 8001300:	4620      	mov	r0, r4
 8001302:	e7ea      	b.n	80012da <ST7735_PutChar5x7+0x66>
 8001304:	08011d3e 	.word	0x08011d3e
 8001308:	48000400 	.word	0x48000400

0800130c <ST7735_PutStr5x7>:

void ST7735_PutStr5x7(uint8_t X, uint8_t Y, char *str, uint16_t color) {
 800130c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    while (*str) {
        ST7735_PutChar5x7(X,Y,*str++,color);
        if (X < scr_width - 6) { X += 6; } else if (Y < scr_height - 8) { X = 0; Y += 8; } else { X = 0; Y = 0; }
 8001310:	f8df 8048 	ldr.w	r8, [pc, #72]	; 800135c <ST7735_PutStr5x7+0x50>
 8001314:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8001360 <ST7735_PutStr5x7+0x54>
void ST7735_PutStr5x7(uint8_t X, uint8_t Y, char *str, uint16_t color) {
 8001318:	4604      	mov	r4, r0
 800131a:	460d      	mov	r5, r1
 800131c:	461f      	mov	r7, r3
 800131e:	1e56      	subs	r6, r2, #1
    while (*str) {
 8001320:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8001324:	b90a      	cbnz	r2, 800132a <ST7735_PutStr5x7+0x1e>
    };
}
 8001326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ST7735_PutChar5x7(X,Y,*str++,color);
 800132a:	463b      	mov	r3, r7
 800132c:	4629      	mov	r1, r5
 800132e:	4620      	mov	r0, r4
 8001330:	f7ff ffa0 	bl	8001274 <ST7735_PutChar5x7>
        if (X < scr_width - 6) { X += 6; } else if (Y < scr_height - 8) { X = 0; Y += 8; } else { X = 0; Y = 0; }
 8001334:	f8b8 3000 	ldrh.w	r3, [r8]
 8001338:	3b06      	subs	r3, #6
 800133a:	429c      	cmp	r4, r3
 800133c:	da02      	bge.n	8001344 <ST7735_PutStr5x7+0x38>
 800133e:	3406      	adds	r4, #6
 8001340:	b2e4      	uxtb	r4, r4
 8001342:	e7ed      	b.n	8001320 <ST7735_PutStr5x7+0x14>
 8001344:	f8b9 3000 	ldrh.w	r3, [r9]
 8001348:	3b08      	subs	r3, #8
 800134a:	429d      	cmp	r5, r3
 800134c:	bfb7      	itett	lt
 800134e:	3508      	addlt	r5, #8
 8001350:	2500      	movge	r5, #0
 8001352:	b2ed      	uxtblt	r5, r5
 8001354:	2400      	movlt	r4, #0
 8001356:	bfa8      	it	ge
 8001358:	462c      	movge	r4, r5
 800135a:	e7e1      	b.n	8001320 <ST7735_PutStr5x7+0x14>
 800135c:	2000c3ac 	.word	0x2000c3ac
 8001360:	2000c3ae 	.word	0x2000c3ae

08001364 <ClearLog>:

/** Clear the duration parameter and the click count parameter of the button.
 */
void ClearLog(uint8_t key, uint8_t index)
{
	if(index < 8)
 8001364:	2907      	cmp	r1, #7
 8001366:	d807      	bhi.n	8001378 <ClearLog+0x14>
	{
		bt[key]->click[index] = bt[key]->duration[index] = 0;
 8001368:	4b04      	ldr	r3, [pc, #16]	; (800137c <ClearLog+0x18>)
 800136a:	2260      	movs	r2, #96	; 0x60
 800136c:	fb02 3000 	mla	r0, r2, r0, r3
 8001370:	4401      	add	r1, r0
 8001372:	2300      	movs	r3, #0
 8001374:	728b      	strb	r3, [r1, #10]
 8001376:	708b      	strb	r3, [r1, #2]
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	2000c3c8 	.word	0x2000c3c8

08001380 <KeyboardInit>:
{
 8001380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001384:	2500      	movs	r5, #0
 8001386:	4c0d      	ldr	r4, [pc, #52]	; (80013bc <KeyboardInit+0x3c>)
 8001388:	4680      	mov	r8, r0
		bt[x]->old_state = bt[x]->new_state = 0;
 800138a:	462e      	mov	r6, r5
 800138c:	fa5f f985 	uxtb.w	r9, r5
 8001390:	7066      	strb	r6, [r4, #1]
 8001392:	7026      	strb	r6, [r4, #0]
		bt[x]->mask = mask;
 8001394:	f884 8012 	strb.w	r8, [r4, #18]
		bt[x]->mode = 0;
 8001398:	74e6      	strb	r6, [r4, #19]
		bt[x]->flag = 0;
 800139a:	6166      	str	r6, [r4, #20]
		for(i = 0; i < 8; i++) {
 800139c:	2700      	movs	r7, #0
			ClearLog(x, i);
 800139e:	b2f9      	uxtb	r1, r7
 80013a0:	4648      	mov	r0, r9
		for(i = 0; i < 8; i++) {
 80013a2:	3701      	adds	r7, #1
			ClearLog(x, i);
 80013a4:	f7ff ffde 	bl	8001364 <ClearLog>
		for(i = 0; i < 8; i++) {
 80013a8:	2f08      	cmp	r7, #8
 80013aa:	d1f8      	bne.n	800139e <KeyboardInit+0x1e>
 80013ac:	3501      	adds	r5, #1
	for(x = 0; x < 6; x++) {
 80013ae:	2d06      	cmp	r5, #6
 80013b0:	f104 0460 	add.w	r4, r4, #96	; 0x60
 80013b4:	d1ea      	bne.n	800138c <KeyboardInit+0xc>
}
 80013b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80013ba:	bf00      	nop
 80013bc:	2000c3c8 	.word	0x2000c3c8

080013c0 <KeyboardSetMode>:
	}
}

void KeyboardSetMode(uint8_t key, uint8_t mode, bool flag)
{
 80013c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i;

	// clear data
	bt[key]->old_state = bt[key]->new_state = 0;
 80013c2:	4e0c      	ldr	r6, [pc, #48]	; (80013f4 <KeyboardSetMode+0x34>)
{
 80013c4:	460f      	mov	r7, r1
	bt[key]->old_state = bt[key]->new_state = 0;
 80013c6:	2160      	movs	r1, #96	; 0x60
 80013c8:	4341      	muls	r1, r0
 80013ca:	2400      	movs	r4, #0
{
 80013cc:	4605      	mov	r5, r0
	bt[key]->old_state = bt[key]->new_state = 0;
 80013ce:	1870      	adds	r0, r6, r1
	// this looks weird but correct
	bt[key]->flag = !flag;
 80013d0:	f082 0201 	eor.w	r2, r2, #1
	bt[key]->old_state = bt[key]->new_state = 0;
 80013d4:	5474      	strb	r4, [r6, r1]
 80013d6:	7044      	strb	r4, [r0, #1]
	bt[key]->flag = !flag;
 80013d8:	6142      	str	r2, [r0, #20]

	// clear log
	for(i = 0; i < 8; i++)
	{
		ClearLog(key, i);
 80013da:	b2e1      	uxtb	r1, r4
 80013dc:	4628      	mov	r0, r5
	for(i = 0; i < 8; i++)
 80013de:	3401      	adds	r4, #1
		ClearLog(key, i);
 80013e0:	f7ff ffc0 	bl	8001364 <ClearLog>
	for(i = 0; i < 8; i++)
 80013e4:	2c08      	cmp	r4, #8
 80013e6:	d1f8      	bne.n	80013da <KeyboardSetMode+0x1a>
	}

	// change mode
	bt[key]->mode = mode;
 80013e8:	2360      	movs	r3, #96	; 0x60
 80013ea:	fb03 6505 	mla	r5, r3, r5, r6
 80013ee:	74ef      	strb	r7, [r5, #19]
 80013f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013f2:	bf00      	nop
 80013f4:	2000c3c8 	.word	0x2000c3c8

080013f8 <PushButton_Read>:
	bt[key]->old_state = bt[key]->new_state;
}


uint8_t PushButton_Read(uint8_t key)
{
 80013f8:	b508      	push	{r3, lr}
	uint8_t ret = 0x00;

	switch(key) {
 80013fa:	2803      	cmp	r0, #3
 80013fc:	d815      	bhi.n	800142a <PushButton_Read+0x32>
 80013fe:	e8df f000 	tbb	[pc, r0]
 8001402:	0b02      	.short	0x0b02
 8001404:	110e      	.short	0x110e
		case 0:			// Down
			ret = !(HAL_GPIO_ReadPin(KEY_DN_GPIO_Port, KEY_DN_Pin));
 8001406:	f44f 5180 	mov.w	r1, #4096	; 0x1000
			break;
		case 2:			// Enter
			ret = !(HAL_GPIO_ReadPin(KEY_ENTER_GPIO_Port, KEY_ENTER_Pin));
			break;
		case 3:			// Esc
			ret = !(HAL_GPIO_ReadPin(KEY_ESC_GPIO_Port, KEY_ESC_Pin));
 800140a:	4809      	ldr	r0, [pc, #36]	; (8001430 <PushButton_Read+0x38>)
 800140c:	f001 fdea 	bl	8002fe4 <HAL_GPIO_ReadPin>
 8001410:	fab0 f080 	clz	r0, r0
 8001414:	0940      	lsrs	r0, r0, #5
			break;
 8001416:	bd08      	pop	{r3, pc}
			ret = !(HAL_GPIO_ReadPin(KEY_UP_GPIO_Port, KEY_UP_Pin));
 8001418:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800141c:	e7f5      	b.n	800140a <PushButton_Read+0x12>
			ret = !(HAL_GPIO_ReadPin(KEY_ENTER_GPIO_Port, KEY_ENTER_Pin));
 800141e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001422:	e7f2      	b.n	800140a <PushButton_Read+0x12>
			ret = !(HAL_GPIO_ReadPin(KEY_ESC_GPIO_Port, KEY_ESC_Pin));
 8001424:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001428:	e7ef      	b.n	800140a <PushButton_Read+0x12>
	uint8_t ret = 0x00;
 800142a:	2000      	movs	r0, #0
		default:
			break;
	}
	return ret;
}
 800142c:	bd08      	pop	{r3, pc}
 800142e:	bf00      	nop
 8001430:	48000400 	.word	0x48000400

08001434 <Evt_EnQueue>:
 *
 * \param  event data in an array of uint8_t
 * \return false if the queue is full
 */
bool Evt_EnQueue(uint8_t *event)
{
 8001434:	b530      	push	{r4, r5, lr}
	unsigned i;
	uint8_t next = ADVANCE_QPTR(evt_queue.head);
 8001436:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <Evt_EnQueue+0x34>)
 8001438:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80

	// queue is full
	if(next == evt_queue.tail)
 800143c:	f893 4081 	ldrb.w	r4, [r3, #129]	; 0x81
	uint8_t next = ADVANCE_QPTR(evt_queue.head);
 8001440:	1c51      	adds	r1, r2, #1
 8001442:	f001 0107 	and.w	r1, r1, #7
	if(next == evt_queue.tail)
 8001446:	428c      	cmp	r4, r1
 8001448:	d00b      	beq.n	8001462 <Evt_EnQueue+0x2e>
 800144a:	eb03 1402 	add.w	r4, r3, r2, lsl #4
 800144e:	2200      	movs	r2, #0
	}

	// copy event bytes into the buffer
	for(i = 0; i < EVT_QWIDTH; i++)
	{
		evt_queue.buff[evt_queue.head][i] = event[i];
 8001450:	5c85      	ldrb	r5, [r0, r2]
 8001452:	54a5      	strb	r5, [r4, r2]
	for(i = 0; i < EVT_QWIDTH; i++)
 8001454:	3201      	adds	r2, #1
 8001456:	2a10      	cmp	r2, #16
 8001458:	d1fa      	bne.n	8001450 <Evt_EnQueue+0x1c>
	}
	// move to the next positition
	evt_queue.head = next;
 800145a:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80

	//logI("I - Evt_EnQueue OK\n\r");
	return true;
 800145e:	2001      	movs	r0, #1
 8001460:	bd30      	pop	{r4, r5, pc}
		return false;
 8001462:	2000      	movs	r0, #0
}
 8001464:	bd30      	pop	{r4, r5, pc}
 8001466:	bf00      	nop
 8001468:	200023bc 	.word	0x200023bc

0800146c <KeyboardRead>:
{
 800146c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800146e:	4604      	mov	r4, r0
	bt[key]->new_state = PushButton_Read(key);
 8001470:	4e42      	ldr	r6, [pc, #264]	; (800157c <KeyboardRead+0x110>)
 8001472:	f7ff ffc1 	bl	80013f8 <PushButton_Read>
 8001476:	2260      	movs	r2, #96	; 0x60
 8001478:	4362      	muls	r2, r4
 800147a:	18b3      	adds	r3, r6, r2
	diff_state = bt[key]->old_state ^ bt[key]->new_state;
 800147c:	5cb2      	ldrb	r2, [r6, r2]
	if(((bt[key]->mode >> i) & 0x01)  == PUSHBTN_MODE_UDOWN) {
 800147e:	7cd9      	ldrb	r1, [r3, #19]
	bt[key]->new_state = PushButton_Read(key);
 8001480:	7058      	strb	r0, [r3, #1]
	if(((bt[key]->mode >> i) & 0x01)  == PUSHBTN_MODE_UDOWN) {
 8001482:	07c9      	lsls	r1, r1, #31
 8001484:	d521      	bpl.n	80014ca <KeyboardRead+0x5e>
		if(((bt[key]->new_state >> i) & 0x01) == 0x01) {
 8001486:	f010 0101 	ands.w	r1, r0, #1
 800148a:	d011      	beq.n	80014b0 <KeyboardRead+0x44>
			event[0] = EVT_PBTN_INPUT;
 800148c:	2310      	movs	r3, #16
 800148e:	f88d 3000 	strb.w	r3, [sp]
			event[1] = (uint8_t)key;
 8001492:	f88d 4001 	strb.w	r4, [sp, #1]
			event[2] = PBTN_DOWN;
 8001496:	2305      	movs	r3, #5
				Evt_EnQueue(event);
 8001498:	4668      	mov	r0, sp
				event[2] = PBTN_ENDN;
 800149a:	f88d 3002 	strb.w	r3, [sp, #2]
				Evt_EnQueue(event);
 800149e:	f7ff ffc9 	bl	8001434 <Evt_EnQueue>
	bt[key]->old_state = bt[key]->new_state;
 80014a2:	2360      	movs	r3, #96	; 0x60
 80014a4:	435c      	muls	r4, r3
 80014a6:	1933      	adds	r3, r6, r4
 80014a8:	785b      	ldrb	r3, [r3, #1]
 80014aa:	5533      	strb	r3, [r6, r4]
}
 80014ac:	b004      	add	sp, #16
 80014ae:	bd70      	pop	{r4, r5, r6, pc}
			if(((bt[key]->old_state >> i) & 0x01) == 0x01) {
 80014b0:	07d3      	lsls	r3, r2, #31
 80014b2:	d5f6      	bpl.n	80014a2 <KeyboardRead+0x36>
				KeyboardSetMode(key, PUSHBTN_MODE_CLICK, true);
 80014b4:	2201      	movs	r2, #1
 80014b6:	4620      	mov	r0, r4
 80014b8:	f7ff ff82 	bl	80013c0 <KeyboardSetMode>
				event[0] = EVT_PBTN_INPUT;
 80014bc:	2310      	movs	r3, #16
 80014be:	f88d 3000 	strb.w	r3, [sp]
				event[1] = (uint8_t)key;
 80014c2:	f88d 4001 	strb.w	r4, [sp, #1]
				event[2] = PBTN_ENDN;
 80014c6:	2306      	movs	r3, #6
 80014c8:	e7e6      	b.n	8001498 <KeyboardRead+0x2c>
	diff_state = bt[key]->old_state ^ bt[key]->new_state;
 80014ca:	4042      	eors	r2, r0
		if((diff_state >> i) & 0x01) {
 80014cc:	07d5      	lsls	r5, r2, #31
 80014ce:	d520      	bpl.n	8001512 <KeyboardRead+0xa6>
			bt[key]->duration[i] = 1;
 80014d0:	2201      	movs	r2, #1
 80014d2:	729a      	strb	r2, [r3, #10]
			if(((bt[key]->new_state >> i) & 0x01) == 0x00) {
 80014d4:	4002      	ands	r2, r0
 80014d6:	d107      	bne.n	80014e8 <KeyboardRead+0x7c>
				if(bt[key]->flag) {
 80014d8:	6959      	ldr	r1, [r3, #20]
 80014da:	b111      	cbz	r1, 80014e2 <KeyboardRead+0x76>
					bt[key]->flag = false;
 80014dc:	615a      	str	r2, [r3, #20]
				bt[key]->duration[i]++;
 80014de:	729a      	strb	r2, [r3, #10]
 80014e0:	e002      	b.n	80014e8 <KeyboardRead+0x7c>
					bt[key]->click[i]++;
 80014e2:	789a      	ldrb	r2, [r3, #2]
 80014e4:	3201      	adds	r2, #1
 80014e6:	709a      	strb	r2, [r3, #2]
		if(bt[key]->click[i] >= 3) {
 80014e8:	2560      	movs	r5, #96	; 0x60
 80014ea:	fb05 6504 	mla	r5, r5, r4, r6
 80014ee:	78aa      	ldrb	r2, [r5, #2]
 80014f0:	2a02      	cmp	r2, #2
 80014f2:	d915      	bls.n	8001520 <KeyboardRead+0xb4>
			event[0] = EVT_PBTN_INPUT;
 80014f4:	2310      	movs	r3, #16
 80014f6:	f88d 3000 	strb.w	r3, [sp]
			Evt_EnQueue(event);
 80014fa:	4668      	mov	r0, sp
			event[2] = PBTN_TCLK;
 80014fc:	2304      	movs	r3, #4
 80014fe:	f88d 3002 	strb.w	r3, [sp, #2]
			event[1] = (uint8_t)key;
 8001502:	f88d 4001 	strb.w	r4, [sp, #1]
			Evt_EnQueue(event);
 8001506:	f7ff ff95 	bl	8001434 <Evt_EnQueue>
			bt[key]->click[i] = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	70ab      	strb	r3, [r5, #2]
			bt[key]->duration[i] = 0;
 800150e:	72ab      	strb	r3, [r5, #10]
 8001510:	e7c7      	b.n	80014a2 <KeyboardRead+0x36>
			if((bt[key]->duration[i] > 0) && (bt[key]->duration[i] < PUSHBTN_TO_MAX)) {
 8001512:	7a9a      	ldrb	r2, [r3, #10]
 8001514:	1e51      	subs	r1, r2, #1
 8001516:	b2c9      	uxtb	r1, r1
 8001518:	29fd      	cmp	r1, #253	; 0xfd
 800151a:	d8e5      	bhi.n	80014e8 <KeyboardRead+0x7c>
				bt[key]->duration[i]++;
 800151c:	3201      	adds	r2, #1
 800151e:	e7de      	b.n	80014de <KeyboardRead+0x72>
		else if((bt[key]->duration[i] > PUSHBTN_TO_SHORT) &&	(((bt[key]->new_state >> i) & 0x01) == 0x00)) {
 8001520:	7aab      	ldrb	r3, [r5, #10]
 8001522:	2b03      	cmp	r3, #3
 8001524:	d9bd      	bls.n	80014a2 <KeyboardRead+0x36>
 8001526:	07c1      	lsls	r1, r0, #31
 8001528:	d414      	bmi.n	8001554 <KeyboardRead+0xe8>
 800152a:	2310      	movs	r3, #16
			if(bt[key]->click[i] == 2) {
 800152c:	2a02      	cmp	r2, #2
				event[0] = EVT_PBTN_INPUT;
 800152e:	f88d 3000 	strb.w	r3, [sp]
				Evt_EnQueue(event);
 8001532:	4668      	mov	r0, sp
				event[2] = PBTN_DCLK;
 8001534:	bf0c      	ite	eq
 8001536:	2303      	moveq	r3, #3
				event[2] = PBTN_SCLK;
 8001538:	2301      	movne	r3, #1
 800153a:	f88d 3002 	strb.w	r3, [sp, #2]
				event[1] = (uint8_t)key;
 800153e:	f88d 4001 	strb.w	r4, [sp, #1]
				Evt_EnQueue(event);
 8001542:	f7ff ff77 	bl	8001434 <Evt_EnQueue>
			bt[key]->click[i] = 0;
 8001546:	2360      	movs	r3, #96	; 0x60
 8001548:	fb03 6304 	mla	r3, r3, r4, r6
 800154c:	2200      	movs	r2, #0
 800154e:	709a      	strb	r2, [r3, #2]
			bt[key]->duration[i] = 0;
 8001550:	729a      	strb	r2, [r3, #10]
 8001552:	e7a6      	b.n	80014a2 <KeyboardRead+0x36>
		else if((bt[key]->duration[i] > PUSHBTN_TO_LONG) && (((bt[key]->new_state >> i) & 0x01) == 0x01)) {
 8001554:	2b0a      	cmp	r3, #10
 8001556:	d9a4      	bls.n	80014a2 <KeyboardRead+0x36>
			event[0] = EVT_PBTN_INPUT;
 8001558:	2310      	movs	r3, #16
 800155a:	f88d 3000 	strb.w	r3, [sp]
			Evt_EnQueue(event);
 800155e:	4668      	mov	r0, sp
			event[2] = PBTN_LCLK;
 8001560:	2302      	movs	r3, #2
 8001562:	f88d 3002 	strb.w	r3, [sp, #2]
			event[1] = (uint8_t)key;
 8001566:	f88d 4001 	strb.w	r4, [sp, #1]
			Evt_EnQueue(event);
 800156a:	f7ff ff63 	bl	8001434 <Evt_EnQueue>
			bt[key]->click[i] = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	70ab      	strb	r3, [r5, #2]
			bt[key]->duration[i] = 0;
 8001572:	72ab      	strb	r3, [r5, #10]
			bt[key]->flag = true;
 8001574:	2301      	movs	r3, #1
 8001576:	616b      	str	r3, [r5, #20]
 8001578:	e793      	b.n	80014a2 <KeyboardRead+0x36>
 800157a:	bf00      	nop
 800157c:	2000c3c8 	.word	0x2000c3c8

08001580 <Key_Read>:
{
 8001580:	b510      	push	{r4, lr}
 8001582:	2400      	movs	r4, #0
		KeyboardRead(x);
 8001584:	b2e0      	uxtb	r0, r4
 8001586:	3401      	adds	r4, #1
 8001588:	f7ff ff70 	bl	800146c <KeyboardRead>
	for(x = 0; x < 6; x++) {
 800158c:	2c06      	cmp	r4, #6
 800158e:	d1f9      	bne.n	8001584 <Key_Read+0x4>
}
 8001590:	bd10      	pop	{r4, pc}
	...

08001594 <Evt_DeQueue>:

	// disable all timers
	//UsrTimer_Enable(false);

	// queue is not empty
	if(evt_queue.tail != evt_queue.head)
 8001594:	4b0d      	ldr	r3, [pc, #52]	; (80015cc <Evt_DeQueue+0x38>)
 8001596:	f893 1081 	ldrb.w	r1, [r3, #129]	; 0x81
 800159a:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800159e:	4291      	cmp	r1, r2
 80015a0:	d012      	beq.n	80015c8 <Evt_DeQueue+0x34>
 80015a2:	2200      	movs	r2, #0
	{
		// copy event bytes into the buffer
		for(i = 0; i < EVT_QWIDTH; i++)
		{
			event[i] = evt_queue.buff[evt_queue.tail][i];
 80015a4:	f893 1081 	ldrb.w	r1, [r3, #129]	; 0x81
 80015a8:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 80015ac:	5c89      	ldrb	r1, [r1, r2]
 80015ae:	5481      	strb	r1, [r0, r2]
 80015b0:	3201      	adds	r2, #1
		for(i = 0; i < EVT_QWIDTH; i++)
 80015b2:	2a10      	cmp	r2, #16
 80015b4:	d1f6      	bne.n	80015a4 <Evt_DeQueue+0x10>
		}
		// move to the next position
		evt_queue.tail = ADVANCE_QPTR(evt_queue.tail);
 80015b6:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 80015ba:	3201      	adds	r2, #1
 80015bc:	f002 0207 	and.w	r2, r2, #7
 80015c0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
		// set flag
		flag = true;
 80015c4:	2001      	movs	r0, #1
 80015c6:	4770      	bx	lr
	bool flag = false;
 80015c8:	2000      	movs	r0, #0
	// enable all timers
	//UsrTimer_Enable(true);

	// return with the flag
	return flag;
}
 80015ca:	4770      	bx	lr
 80015cc:	200023bc 	.word	0x200023bc

080015d0 <Evt_InitQueue>:
 * the data in the queue.
 */
void Evt_InitQueue(void)
{
	// clear queue by resetting the pointers
	evt_queue.head = evt_queue.tail = 0;
 80015d0:	4b03      	ldr	r3, [pc, #12]	; (80015e0 <Evt_InitQueue+0x10>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
 80015d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	200023bc 	.word	0x200023bc

080015e4 <KeyboardEvent>:
}

// Eventos Teclado
void KeyboardEvent(void)
{
 80015e4:	b530      	push	{r4, r5, lr}
	uint8_t event[EVT_QWIDTH];
	const char* teclas[] = {"KEY-DOWN", "KEY-UP", "KEY-ENTER", "KEY-ESC", "KEY-ROTARY", "KEY-USER"};
 80015e6:	4d2c      	ldr	r5, [pc, #176]	; (8001698 <KeyboardEvent+0xb4>)
 80015e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
 80015ea:	b08b      	sub	sp, #44	; 0x2c
	const char* teclas[] = {"KEY-DOWN", "KEY-UP", "KEY-ENTER", "KEY-ESC", "KEY-ROTARY", "KEY-USER"};
 80015ec:	ac04      	add	r4, sp, #16
 80015ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015f0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80015f4:	e884 0003 	stmia.w	r4, {r0, r1}

	// check event queue
	if(Evt_DeQueue(event)) {
 80015f8:	4668      	mov	r0, sp
 80015fa:	f7ff ffcb 	bl	8001594 <Evt_DeQueue>
 80015fe:	b188      	cbz	r0, 8001624 <KeyboardEvent+0x40>
		switch(event[0]) {
 8001600:	f89d 3000 	ldrb.w	r3, [sp]
 8001604:	2b10      	cmp	r3, #16
 8001606:	d10d      	bne.n	8001624 <KeyboardEvent+0x40>
			// pushbutton event ================================================
			// event[1]: button id
			// event[2]: PBTN_SCLK, _DCLK, _TCLK, _LCLK, _DOWN, _ENDN
			case EVT_PBTN_INPUT:
				if(event[2] == PBTN_SCLK) {
 8001608:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d10b      	bne.n	8001628 <KeyboardEvent+0x44>
					}
					else if(event[1] == 3) {
						// KEY_ESC PWM++

					}
					logI("\r\nButton %s: single click.", teclas[event[1]]);
 8001610:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8001614:	4821      	ldr	r0, [pc, #132]	; (800169c <KeyboardEvent+0xb8>)
 8001616:	aa0a      	add	r2, sp, #40	; 0x28
 8001618:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800161c:	f853 1c18 	ldr.w	r1, [r3, #-24]
				}
				else if(event[2] == PBTN_DOWN) {
					logI("\r\nButton %s: is being pressed.", teclas[event[1]]);
				}
				else if(event[2] == PBTN_ENDN) {
					logI("\r\nButton %s: has been released.", teclas[event[1]]);
 8001620:	f000 f86a 	bl	80016f8 <logI>
					//logI("\r\n --> Switch to click mode.");
				}
				break;
		}
	}
}
 8001624:	b00b      	add	sp, #44	; 0x2c
 8001626:	bd30      	pop	{r4, r5, pc}
				else if(event[2] == PBTN_LCLK) {
 8001628:	2b02      	cmp	r3, #2
 800162a:	d108      	bne.n	800163e <KeyboardEvent+0x5a>
					logI("\r\nButton %s: long click.", teclas[event[1]]);
 800162c:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8001630:	481b      	ldr	r0, [pc, #108]	; (80016a0 <KeyboardEvent+0xbc>)
 8001632:	aa0a      	add	r2, sp, #40	; 0x28
 8001634:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001638:	f853 1c18 	ldr.w	r1, [r3, #-24]
 800163c:	e7f0      	b.n	8001620 <KeyboardEvent+0x3c>
				else if(event[2] == PBTN_DCLK) {
 800163e:	2b03      	cmp	r3, #3
 8001640:	d108      	bne.n	8001654 <KeyboardEvent+0x70>
					logI("\r\nButton %s: double click.", teclas[event[1]]);
 8001642:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8001646:	4817      	ldr	r0, [pc, #92]	; (80016a4 <KeyboardEvent+0xc0>)
 8001648:	aa0a      	add	r2, sp, #40	; 0x28
 800164a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800164e:	f853 1c18 	ldr.w	r1, [r3, #-24]
 8001652:	e7e5      	b.n	8001620 <KeyboardEvent+0x3c>
				else if(event[2] == PBTN_TCLK) {
 8001654:	2b04      	cmp	r3, #4
 8001656:	d108      	bne.n	800166a <KeyboardEvent+0x86>
					logI("\r\nButton %s: triple click.", teclas[event[1]]);
 8001658:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800165c:	4812      	ldr	r0, [pc, #72]	; (80016a8 <KeyboardEvent+0xc4>)
 800165e:	aa0a      	add	r2, sp, #40	; 0x28
 8001660:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001664:	f853 1c18 	ldr.w	r1, [r3, #-24]
 8001668:	e7da      	b.n	8001620 <KeyboardEvent+0x3c>
				else if(event[2] == PBTN_DOWN) {
 800166a:	2b05      	cmp	r3, #5
 800166c:	d108      	bne.n	8001680 <KeyboardEvent+0x9c>
					logI("\r\nButton %s: is being pressed.", teclas[event[1]]);
 800166e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8001672:	480e      	ldr	r0, [pc, #56]	; (80016ac <KeyboardEvent+0xc8>)
 8001674:	aa0a      	add	r2, sp, #40	; 0x28
 8001676:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800167a:	f853 1c18 	ldr.w	r1, [r3, #-24]
 800167e:	e7cf      	b.n	8001620 <KeyboardEvent+0x3c>
				else if(event[2] == PBTN_ENDN) {
 8001680:	2b06      	cmp	r3, #6
 8001682:	d1cf      	bne.n	8001624 <KeyboardEvent+0x40>
					logI("\r\nButton %s: has been released.", teclas[event[1]]);
 8001684:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8001688:	4809      	ldr	r0, [pc, #36]	; (80016b0 <KeyboardEvent+0xcc>)
 800168a:	aa0a      	add	r2, sp, #40	; 0x28
 800168c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001690:	f853 1c18 	ldr.w	r1, [r3, #-24]
 8001694:	e7c4      	b.n	8001620 <KeyboardEvent+0x3c>
 8001696:	bf00      	nop
 8001698:	08011d00 	.word	0x08011d00
 800169c:	08011f1e 	.word	0x08011f1e
 80016a0:	08011f39 	.word	0x08011f39
 80016a4:	08011f52 	.word	0x08011f52
 80016a8:	08011f6d 	.word	0x08011f6d
 80016ac:	08011f88 	.word	0x08011f88
 80016b0:	08011fa7 	.word	0x08011fa7

080016b4 <HAL_printf_valist>:
/** Custom printf function in order to use HAL_UART_Transmit()
 * @param *fmt String to print
 * @param argp Parameters list
 */
void HAL_printf_valist(const char *fmt, va_list argp)
{
 80016b4:	b500      	push	{lr}
 80016b6:	b0c1      	sub	sp, #260	; 0x104
  char string[PRINT_BUFFER_SIZE];

  if (vsprintf(string, fmt, argp) > 0) {
 80016b8:	460a      	mov	r2, r1
 80016ba:	4601      	mov	r1, r0
 80016bc:	4668      	mov	r0, sp
 80016be:	f00e fe7f 	bl	80103c0 <vsprintf>
 80016c2:	2800      	cmp	r0, #0
 80016c4:	dd0f      	ble.n	80016e6 <HAL_printf_valist+0x32>
    HAL_UART_Transmit(&huart2, (uint8_t*)string, strlen(string), HAL_MAX_DELAY); // send message via UART
 80016c6:	4668      	mov	r0, sp
 80016c8:	f7fe fd8c 	bl	80001e4 <strlen>
 80016cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016d0:	b282      	uxth	r2, r0
 80016d2:	4669      	mov	r1, sp
  } else {
	HAL_UART_Transmit(&huart2, (uint8_t*)"E - Print\n", 14, HAL_MAX_DELAY);
 80016d4:	4806      	ldr	r0, [pc, #24]	; (80016f0 <HAL_printf_valist+0x3c>)
 80016d6:	f004 fbd4 	bl	8005e82 <HAL_UART_Transmit>
  }
  HAL_Delay(10);
 80016da:	200a      	movs	r0, #10
 80016dc:	f000 ff1e 	bl	800251c <HAL_Delay>
}
 80016e0:	b041      	add	sp, #260	; 0x104
 80016e2:	f85d fb04 	ldr.w	pc, [sp], #4
	HAL_UART_Transmit(&huart2, (uint8_t*)"E - Print\n", 14, HAL_MAX_DELAY);
 80016e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016ea:	220e      	movs	r2, #14
 80016ec:	4901      	ldr	r1, [pc, #4]	; (80016f4 <HAL_printf_valist+0x40>)
 80016ee:	e7f1      	b.n	80016d4 <HAL_printf_valist+0x20>
 80016f0:	2000c794 	.word	0x2000c794
 80016f4:	08011ffd 	.word	0x08011ffd

080016f8 <logI>:
/** LOG procedure - Info
 * @param *fmt String to print
 * @param ... Parameters list
 */
void logI(const char* fmt, ...)
{
 80016f8:	b40f      	push	{r0, r1, r2, r3}
 80016fa:	b507      	push	{r0, r1, r2, lr}
 80016fc:	a904      	add	r1, sp, #16
 80016fe:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list argp;

	va_start(argp, fmt);
 8001702:	9101      	str	r1, [sp, #4]
	HAL_printf_valist(fmt, argp);
 8001704:	f7ff ffd6 	bl	80016b4 <HAL_printf_valist>
	logUSB(fmt, argp);
	va_end(argp);
}
 8001708:	b003      	add	sp, #12
 800170a:	f85d eb04 	ldr.w	lr, [sp], #4
 800170e:	b004      	add	sp, #16
 8001710:	4770      	bx	lr
	...

08001714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001718:	b0b8      	sub	sp, #224	; 0xe0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800171a:	2514      	movs	r5, #20
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800171c:	2244      	movs	r2, #68	; 0x44
 800171e:	2100      	movs	r1, #0
 8001720:	a805      	add	r0, sp, #20
 8001722:	f00d fe10 	bl	800f346 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001726:	462a      	mov	r2, r5
 8001728:	2100      	movs	r1, #0
 800172a:	4668      	mov	r0, sp
 800172c:	f00d fe0b 	bl	800f346 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001730:	2100      	movs	r1, #0
 8001732:	2288      	movs	r2, #136	; 0x88
 8001734:	a816      	add	r0, sp, #88	; 0x58
 8001736:	f00d fe06 	bl	800f346 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 800173a:	f002 f983 	bl	8003a44 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800173e:	4a25      	ldr	r2, [pc, #148]	; (80017d4 <SystemClock_Config+0xc0>)
 8001740:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001744:	f023 0318 	bic.w	r3, r3, #24
 8001748:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800174c:	2305      	movs	r3, #5
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800174e:	2402      	movs	r4, #2
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001750:	2601      	movs	r6, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001752:	2703      	movs	r7, #3
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001754:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 20;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001756:	f04f 0807 	mov.w	r8, #7
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800175a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800175e:	eb0d 0005 	add.w	r0, sp, r5
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001762:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLN = 20;
 8001764:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001766:	9607      	str	r6, [sp, #28]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001768:	2500      	movs	r5, #0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800176a:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800176c:	9710      	str	r7, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800176e:	9611      	str	r6, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001770:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001774:	9414      	str	r4, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001776:	9415      	str	r4, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001778:	f002 fac0 	bl	8003cfc <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800177c:	2104      	movs	r1, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800177e:	230f      	movs	r3, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001780:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001782:	e88d 0088 	stmia.w	sp, {r3, r7}
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001786:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001788:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800178a:	9504      	str	r5, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800178c:	f002 fd18 	bl	80041c0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 8001790:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <SystemClock_Config+0xc4>)
 8001792:	9316      	str	r3, [sp, #88]	; 0x58
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001794:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001798:	9334      	str	r3, [sp, #208]	; 0xd0
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800179a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800179e:	9337      	str	r3, [sp, #220]	; 0xdc
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80017a0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80017a4:	9331      	str	r3, [sp, #196]	; 0xc4
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
  PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 80017a6:	230c      	movs	r3, #12
 80017a8:	9319      	str	r3, [sp, #100]	; 0x64
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017aa:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 80017ac:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 80017b0:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80017b2:	9525      	str	r5, [sp, #148]	; 0x94
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80017b4:	952a      	str	r5, [sp, #168]	; 0xa8
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 80017b6:	9717      	str	r7, [sp, #92]	; 0x5c
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80017b8:	9618      	str	r6, [sp, #96]	; 0x60
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80017ba:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80017be:	941b      	str	r4, [sp, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80017c0:	941c      	str	r4, [sp, #112]	; 0x70
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017c2:	f002 fee7 	bl	8004594 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80017c6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80017ca:	f002 f94b 	bl	8003a64 <HAL_PWREx_ControlVoltageScaling>
  {
    Error_Handler();
  }
}
 80017ce:	b038      	add	sp, #224	; 0xe0
 80017d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80017d4:	40021000 	.word	0x40021000
 80017d8:	00026042 	.word	0x00026042
 80017dc:	00000000 	.word	0x00000000

080017e0 <main>:
{
 80017e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017e4:	b09b      	sub	sp, #108	; 0x6c
  HAL_Init();
 80017e6:	f000 fe71 	bl	80024cc <HAL_Init>
  SystemClock_Config();
 80017ea:	f7ff ff93 	bl	8001714 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ee:	2214      	movs	r2, #20
 80017f0:	2100      	movs	r1, #0
 80017f2:	a810      	add	r0, sp, #64	; 0x40
 80017f4:	f00d fda7 	bl	800f346 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017f8:	4bba      	ldr	r3, [pc, #744]	; (8001ae4 <main+0x304>)
  huart2.Instance = USART2;
 80017fa:	4fbb      	ldr	r7, [pc, #748]	; (8001ae8 <main+0x308>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  hi2c1.Instance = I2C1;
 80017fe:	4ebb      	ldr	r6, [pc, #748]	; (8001aec <main+0x30c>)
  hrtc.Instance = RTC;
 8001800:	f8df a328 	ldr.w	sl, [pc, #808]	; 8001b2c <main+0x34c>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001804:	f042 0204 	orr.w	r2, r2, #4
 8001808:	64da      	str	r2, [r3, #76]	; 0x4c
 800180a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800180c:	f002 0204 	and.w	r2, r2, #4
 8001810:	9204      	str	r2, [sp, #16]
 8001812:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001814:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001816:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800181a:	64da      	str	r2, [r3, #76]	; 0x4c
 800181c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800181e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001822:	9205      	str	r2, [sp, #20]
 8001824:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001826:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001828:	f042 0201 	orr.w	r2, r2, #1
 800182c:	64da      	str	r2, [r3, #76]	; 0x4c
 800182e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001830:	f002 0201 	and.w	r2, r2, #1
 8001834:	9206      	str	r2, [sp, #24]
 8001836:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001838:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800183a:	f042 0202 	orr.w	r2, r2, #2
 800183e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001840:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001842:	f002 0202 	and.w	r2, r2, #2
 8001846:	9207      	str	r2, [sp, #28]
 8001848:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800184a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800184c:	f042 0208 	orr.w	r2, r2, #8
 8001850:	64da      	str	r2, [r3, #76]	; 0x4c
 8001852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001854:	f003 0308 	and.w	r3, r3, #8
 8001858:	9308      	str	r3, [sp, #32]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800185a:	2200      	movs	r2, #0
 800185c:	2120      	movs	r1, #32
 800185e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001862:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001864:	f001 fbc4 	bl	8002ff0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_FLASH_GPIO_Port, CS_FLASH_Pin, GPIO_PIN_SET);
 8001868:	2201      	movs	r2, #1
 800186a:	2104      	movs	r1, #4
 800186c:	48a0      	ldr	r0, [pc, #640]	; (8001af0 <main+0x310>)
 800186e:	f001 fbbf 	bl	8002ff0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin, GPIO_PIN_SET);
 8001872:	2201      	movs	r2, #1
 8001874:	21e0      	movs	r1, #224	; 0xe0
 8001876:	489f      	ldr	r0, [pc, #636]	; (8001af4 <main+0x314>)
 8001878:	f001 fbba 	bl	8002ff0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800187c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001880:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = B1_Pin;
 8001882:	9310      	str	r3, [sp, #64]	; 0x40
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001884:	a910      	add	r1, sp, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001886:	4b9c      	ldr	r3, [pc, #624]	; (8001af8 <main+0x318>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001888:	489c      	ldr	r0, [pc, #624]	; (8001afc <main+0x31c>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800188a:	9311      	str	r3, [sp, #68]	; 0x44

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188c:	2400      	movs	r4, #0
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800188e:	9512      	str	r5, [sp, #72]	; 0x48
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001890:	f001 facc 	bl	8002e2c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 8001894:	2320      	movs	r3, #32
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001896:	a910      	add	r1, sp, #64	; 0x40
 8001898:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000

  /*Configure GPIO pin : SW_ENC_Pin */
  GPIO_InitStruct.Pin = SW_ENC_Pin;
 800189c:	f04f 0910 	mov.w	r9, #16
  GPIO_InitStruct.Pin = LD2_Pin;
 80018a0:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a2:	9511      	str	r5, [sp, #68]	; 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	9412      	str	r4, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a6:	9413      	str	r4, [sp, #76]	; 0x4c
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80018a8:	f001 fac0 	bl	8002e2c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(SW_ENC_GPIO_Port, &GPIO_InitStruct);
 80018ac:	a910      	add	r1, sp, #64	; 0x40
 80018ae:	4893      	ldr	r0, [pc, #588]	; (8001afc <main+0x31c>)
  GPIO_InitStruct.Pin = SW_ENC_Pin;
 80018b0:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018b4:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018b6:	9512      	str	r5, [sp, #72]	; 0x48
  HAL_GPIO_Init(SW_ENC_GPIO_Port, &GPIO_InitStruct);
 80018b8:	f001 fab8 	bl	8002e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC_A_Pin KEY_DN_Pin KEY_UP_Pin KEY_ENTER_Pin 
                           KEY_ESC_Pin ENC_B_Pin */
  GPIO_InitStruct.Pin = ENC_A_Pin|KEY_DN_Pin|KEY_UP_Pin|KEY_ENTER_Pin 
 80018bc:	f24f 0314 	movw	r3, #61460	; 0xf014
                          |KEY_ESC_Pin|ENC_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c0:	a910      	add	r1, sp, #64	; 0x40
 80018c2:	488c      	ldr	r0, [pc, #560]	; (8001af4 <main+0x314>)
  GPIO_InitStruct.Pin = ENC_A_Pin|KEY_DN_Pin|KEY_UP_Pin|KEY_ENTER_Pin 
 80018c4:	9310      	str	r3, [sp, #64]	; 0x40

  /*Configure GPIO pin : CS_FLASH_Pin */
  GPIO_InitStruct.Pin = CS_FLASH_Pin;
 80018c6:	f04f 0804 	mov.w	r8, #4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ca:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018cc:	9512      	str	r5, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ce:	f001 faad 	bl	8002e2c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(CS_FLASH_GPIO_Port, &GPIO_InitStruct);
 80018d2:	a910      	add	r1, sp, #64	; 0x40
 80018d4:	4886      	ldr	r0, [pc, #536]	; (8001af0 <main+0x310>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d6:	9511      	str	r5, [sp, #68]	; 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	9412      	str	r4, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018da:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pin = CS_FLASH_Pin;
 80018dc:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  HAL_GPIO_Init(CS_FLASH_GPIO_Port, &GPIO_InitStruct);
 80018e0:	f001 faa4 	bl	8002e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : TFT_CS_Pin TFT_RST_Pin TFT_DC_Pin */
  GPIO_InitStruct.Pin = TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin;
 80018e4:	23e0      	movs	r3, #224	; 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e6:	a910      	add	r1, sp, #64	; 0x40
 80018e8:	4882      	ldr	r0, [pc, #520]	; (8001af4 <main+0x314>)
  GPIO_InitStruct.Pin = TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin;
 80018ea:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ec:	9511      	str	r5, [sp, #68]	; 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	9412      	str	r4, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f0:	9413      	str	r4, [sp, #76]	; 0x4c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f2:	f001 fa9b 	bl	8002e2c <HAL_GPIO_Init>
  huart2.Init.BaudRate = 115200;
 80018f6:	4a82      	ldr	r2, [pc, #520]	; (8001b00 <main+0x320>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018f8:	60bc      	str	r4, [r7, #8]
  huart2.Init.BaudRate = 115200;
 80018fa:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018fe:	f04f 0b0c 	mov.w	fp, #12
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001902:	4638      	mov	r0, r7
  huart2.Init.BaudRate = 115200;
 8001904:	e887 000c 	stmia.w	r7, {r2, r3}
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001908:	60fc      	str	r4, [r7, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800190a:	613c      	str	r4, [r7, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800190c:	61bc      	str	r4, [r7, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800190e:	61fc      	str	r4, [r7, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001910:	623c      	str	r4, [r7, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001912:	627c      	str	r4, [r7, #36]	; 0x24
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001914:	f8c7 b014 	str.w	fp, [r7, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001918:	f004 fb3a 	bl	8005f90 <HAL_UART_Init>
  hi2c1.Init.Timing = 0x00702890;
 800191c:	4b79      	ldr	r3, [pc, #484]	; (8001b04 <main+0x324>)
 800191e:	497a      	ldr	r1, [pc, #488]	; (8001b08 <main+0x328>)
  hi2c1.Init.OwnAddress1 = 0;
 8001920:	60b4      	str	r4, [r6, #8]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001922:	4630      	mov	r0, r6
  hi2c1.Init.Timing = 0x00702890;
 8001924:	e886 000a 	stmia.w	r6, {r1, r3}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001928:	60f5      	str	r5, [r6, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800192a:	6134      	str	r4, [r6, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800192c:	6174      	str	r4, [r6, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800192e:	61b4      	str	r4, [r6, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001930:	61f4      	str	r4, [r6, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001932:	6234      	str	r4, [r6, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001934:	f001 fb67 	bl	8003006 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001938:	4621      	mov	r1, r4
 800193a:	4630      	mov	r0, r6
 800193c:	f001 fbb4 	bl	80030a8 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 1) != HAL_OK)
 8001940:	4629      	mov	r1, r5
 8001942:	4630      	mov	r0, r6
 8001944:	f001 fbd6 	bl	80030f4 <HAL_I2CEx_ConfigDigitalFilter>
  hqspi.Instance = QUADSPI;
 8001948:	4870      	ldr	r0, [pc, #448]	; (8001b0c <main+0x32c>)
 800194a:	4b71      	ldr	r3, [pc, #452]	; (8001b10 <main+0x330>)
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800194c:	6184      	str	r4, [r0, #24]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800194e:	e880 0318 	stmia.w	r0, {r3, r4, r8, r9}
  hqspi.Init.FlashSize = 23;
 8001952:	2317      	movs	r3, #23
 8001954:	6103      	str	r3, [r0, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_2_CYCLE;
 8001956:	f44f 7380 	mov.w	r3, #256	; 0x100
 800195a:	6143      	str	r3, [r0, #20]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800195c:	f002 f8e6 	bl	8003b2c <HAL_QSPI_Init>
  hspi3.Instance = SPI3;
 8001960:	486c      	ldr	r0, [pc, #432]	; (8001b14 <main+0x334>)
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001962:	4b6d      	ldr	r3, [pc, #436]	; (8001b18 <main+0x338>)
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001964:	6084      	str	r4, [r0, #8]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001966:	f44f 7682 	mov.w	r6, #260	; 0x104
 800196a:	e880 0048 	stmia.w	r0, {r3, r6}
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800196e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001972:	60c3      	str	r3, [r0, #12]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001974:	f44f 7300 	mov.w	r3, #512	; 0x200
  hspi3.Init.CRCPolynomial = 7;
 8001978:	2207      	movs	r2, #7
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800197a:	6183      	str	r3, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800197c:	2308      	movs	r3, #8
 800197e:	61c3      	str	r3, [r0, #28]
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001980:	6343      	str	r3, [r0, #52]	; 0x34
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001982:	6104      	str	r4, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001984:	6144      	str	r4, [r0, #20]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001986:	6204      	str	r4, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001988:	6244      	str	r4, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800198a:	6284      	str	r4, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800198c:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800198e:	6304      	str	r4, [r0, #48]	; 0x30
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001990:	f003 f9bc 	bl	8004d0c <HAL_SPI_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001994:	464a      	mov	r2, r9
 8001996:	4621      	mov	r1, r4
 8001998:	a80c      	add	r0, sp, #48	; 0x30
 800199a:	f00d fcd4 	bl	800f346 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800199e:	221c      	movs	r2, #28
 80019a0:	4621      	mov	r1, r4
 80019a2:	a810      	add	r0, sp, #64	; 0x40
  htim3.Instance = TIM3;
 80019a4:	4e5d      	ldr	r6, [pc, #372]	; (8001b1c <main+0x33c>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019a6:	9409      	str	r4, [sp, #36]	; 0x24
 80019a8:	940a      	str	r4, [sp, #40]	; 0x28
 80019aa:	940b      	str	r4, [sp, #44]	; 0x2c
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019ac:	f00d fccb 	bl	800f346 <memset>
  htim3.Instance = TIM3;
 80019b0:	4b5b      	ldr	r3, [pc, #364]	; (8001b20 <main+0x340>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b2:	60b4      	str	r4, [r6, #8]
  htim3.Init.Prescaler = 1;
 80019b4:	e886 0028 	stmia.w	r6, {r3, r5}
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80019b8:	4630      	mov	r0, r6
  htim3.Init.Period = 4095;
 80019ba:	f640 73ff 	movw	r3, #4095	; 0xfff
 80019be:	60f3      	str	r3, [r6, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019c0:	6134      	str	r4, [r6, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019c2:	61b4      	str	r4, [r6, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80019c4:	f003 fe34 	bl	8005630 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80019cc:	a90c      	add	r1, sp, #48	; 0x30
 80019ce:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019d0:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80019d2:	f003 ff37 	bl	8005844 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80019d6:	4630      	mov	r0, r6
 80019d8:	f003 fe44 	bl	8005664 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019dc:	a909      	add	r1, sp, #36	; 0x24
 80019de:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019e0:	9409      	str	r4, [sp, #36]	; 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019e2:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019e4:	f004 f802 	bl	80059ec <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019e8:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019ea:	4622      	mov	r2, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019ec:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019ee:	a910      	add	r1, sp, #64	; 0x40
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80019f0:	2302      	movs	r3, #2
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019f2:	4630      	mov	r0, r6
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80019f4:	9312      	str	r3, [sp, #72]	; 0x48
  sConfigOC.Pulse = 0;
 80019f6:	9411      	str	r4, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019f8:	9414      	str	r4, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019fa:	f003 fe93 	bl	8005724 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019fe:	4642      	mov	r2, r8
 8001a00:	a910      	add	r1, sp, #64	; 0x40
 8001a02:	4630      	mov	r0, r6
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a04:	9412      	str	r4, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a06:	f003 fe8d 	bl	8005724 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim3);
 8001a0a:	4630      	mov	r0, r6
 8001a0c:	f000 fb02 	bl	8002014 <HAL_TIM_MspPostInit>
  RTC_TimeTypeDef sTime = {0};
 8001a10:	4621      	mov	r1, r4
 8001a12:	2214      	movs	r2, #20
 8001a14:	a810      	add	r0, sp, #64	; 0x40
 8001a16:	f00d fc96 	bl	800f346 <memset>
  hrtc.Instance = RTC;
 8001a1a:	4b42      	ldr	r3, [pc, #264]	; (8001b24 <main+0x344>)
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a1c:	f8ca 4010 	str.w	r4, [sl, #16]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001a20:	e88a 0018 	stmia.w	sl, {r3, r4}
  hrtc.Init.SynchPrediv = 255;
 8001a24:	22ff      	movs	r2, #255	; 0xff
  hrtc.Init.AsynchPrediv = 127;
 8001a26:	237f      	movs	r3, #127	; 0x7f
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a28:	4650      	mov	r0, sl
  hrtc.Init.AsynchPrediv = 127;
 8001a2a:	f8ca 3008 	str.w	r3, [sl, #8]
 8001a2e:	9303      	str	r3, [sp, #12]
  hrtc.Init.SynchPrediv = 255;
 8001a30:	f8ca 200c 	str.w	r2, [sl, #12]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001a34:	f8ca 4014 	str.w	r4, [sl, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a38:	f8ca 4018 	str.w	r4, [sl, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a3c:	f8ca 401c 	str.w	r4, [sl, #28]
  RTC_DateTypeDef sDate = {0};
 8001a40:	940c      	str	r4, [sp, #48]	; 0x30
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a42:	f002 ffeb 	bl	8004a1c <HAL_RTC_Init>
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001a46:	462a      	mov	r2, r5
 8001a48:	a910      	add	r1, sp, #64	; 0x40
 8001a4a:	4650      	mov	r0, sl
  sTime.Hours = 0x0;
 8001a4c:	f88d 4040 	strb.w	r4, [sp, #64]	; 0x40
  sTime.Minutes = 0x0;
 8001a50:	f88d 4041 	strb.w	r4, [sp, #65]	; 0x41
  sTime.Seconds = 0x0;
 8001a54:	f88d 4042 	strb.w	r4, [sp, #66]	; 0x42
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001a58:	9413      	str	r4, [sp, #76]	; 0x4c
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001a5a:	9414      	str	r4, [sp, #80]	; 0x50
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001a5c:	f003 f830 	bl	8004ac0 <HAL_RTC_SetTime>
  sDate.Year = 0x19;
 8001a60:	2219      	movs	r2, #25
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001a62:	a90c      	add	r1, sp, #48	; 0x30
  sDate.Year = 0x19;
 8001a64:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001a68:	4650      	mov	r0, sl
 8001a6a:	462a      	mov	r2, r5
  ADC_ChannelConfTypeDef sConfig = {0};
 8001a6c:	f04f 0a18 	mov.w	sl, #24
  hadc1.Instance = ADC1;
 8001a70:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 8001b30 <main+0x350>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001a74:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8001a78:	f88d 5031 	strb.w	r5, [sp, #49]	; 0x31
  sDate.Date = 0x1;
 8001a7c:	f88d 5032 	strb.w	r5, [sp, #50]	; 0x32
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001a80:	f003 f87d 	bl	8004b7e <HAL_RTC_SetDate>
  MX_FATFS_Init();
 8001a84:	f004 ff22 	bl	80068cc <MX_FATFS_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 8001a88:	4652      	mov	r2, sl
 8001a8a:	4621      	mov	r1, r4
 8001a8c:	a810      	add	r0, sp, #64	; 0x40
  ADC_MultiModeTypeDef multimode = {0};
 8001a8e:	940c      	str	r4, [sp, #48]	; 0x30
 8001a90:	940d      	str	r4, [sp, #52]	; 0x34
 8001a92:	940e      	str	r4, [sp, #56]	; 0x38
  ADC_ChannelConfTypeDef sConfig = {0};
 8001a94:	f00d fc57 	bl	800f346 <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001a98:	4923      	ldr	r1, [pc, #140]	; (8001b28 <main+0x348>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a9a:	f8c9 4008 	str.w	r4, [r9, #8]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001a9e:	f44f 2e80 	mov.w	lr, #262144	; 0x40000
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001aa2:	4648      	mov	r0, r9
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001aa4:	e889 4002 	stmia.w	r9, {r1, lr}
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001aa8:	f8c9 400c 	str.w	r4, [r9, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001aac:	f8c9 5010 	str.w	r5, [r9, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001ab0:	f889 4018 	strb.w	r4, [r9, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001ab4:	f889 4019 	strb.w	r4, [r9, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ab8:	f889 4020 	strb.w	r4, [r9, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001abc:	f8c9 4028 	str.w	r4, [r9, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ac0:	f8c9 402c 	str.w	r4, [r9, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001ac4:	f889 4030 	strb.w	r4, [r9, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001ac8:	f8c9 4034 	str.w	r4, [r9, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001acc:	f889 4038 	strb.w	r4, [r9, #56]	; 0x38
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ad0:	f8c9 8014 	str.w	r8, [r9, #20]
  hadc1.Init.NbrOfConversion = 4;
 8001ad4:	f8c9 801c 	str.w	r8, [r9, #28]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ad8:	f000 fd4e 	bl	8002578 <HAL_ADC_Init>
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001adc:	a90c      	add	r1, sp, #48	; 0x30
 8001ade:	4648      	mov	r0, r9
 8001ae0:	e028      	b.n	8001b34 <main+0x354>
 8001ae2:	bf00      	nop
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	2000c794 	.word	0x2000c794
 8001aec:	2000c61c 	.word	0x2000c61c
 8001af0:	48000c00 	.word	0x48000c00
 8001af4:	48000400 	.word	0x48000400
 8001af8:	10210000 	.word	0x10210000
 8001afc:	48000800 	.word	0x48000800
 8001b00:	40004400 	.word	0x40004400
 8001b04:	00702890 	.word	0x00702890
 8001b08:	40005400 	.word	0x40005400
 8001b0c:	2000c814 	.word	0x2000c814
 8001b10:	a0001000 	.word	0xa0001000
 8001b14:	2000c6a8 	.word	0x2000c6a8
 8001b18:	40003c00 	.word	0x40003c00
 8001b1c:	2000c668 	.word	0x2000c668
 8001b20:	40000400 	.word	0x40000400
 8001b24:	40002800 	.word	0x40002800
 8001b28:	50040000 	.word	0x50040000
 8001b2c:	2000c770 	.word	0x2000c770
 8001b30:	2000c70c 	.word	0x2000c70c
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001b34:	940c      	str	r4, [sp, #48]	; 0x30
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001b36:	f000 ffdd 	bl	8002af4 <HAL_ADCEx_MultiModeConfigChannel>
  sConfig.Channel = ADC_CHANNEL_1;
 8001b3a:	495d      	ldr	r1, [pc, #372]	; (8001cb0 <main+0x4d0>)
 8001b3c:	9110      	str	r1, [sp, #64]	; 0x40
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b3e:	2106      	movs	r1, #6
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001b40:	9b03      	ldr	r3, [sp, #12]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b42:	9111      	str	r1, [sp, #68]	; 0x44
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8001b44:	9112      	str	r1, [sp, #72]	; 0x48
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b46:	4648      	mov	r0, r9
 8001b48:	a910      	add	r1, sp, #64	; 0x40
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001b4a:	9313      	str	r3, [sp, #76]	; 0x4c
  sConfig.Offset = 0;
 8001b4c:	9415      	str	r4, [sp, #84]	; 0x54
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001b4e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b52:	f000 fdf1 	bl	8002738 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_2;
 8001b56:	4b57      	ldr	r3, [pc, #348]	; (8001cb4 <main+0x4d4>)
 8001b58:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b5a:	a910      	add	r1, sp, #64	; 0x40
 8001b5c:	4648      	mov	r0, r9
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001b5e:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b62:	f000 fde9 	bl	8002738 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_3;
 8001b66:	4b54      	ldr	r3, [pc, #336]	; (8001cb8 <main+0x4d8>)
 8001b68:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b6a:	a910      	add	r1, sp, #64	; 0x40
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001b6c:	2312      	movs	r3, #18
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b6e:	4648      	mov	r0, r9
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001b70:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b72:	f000 fde1 	bl	8002738 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_4;
 8001b76:	4b51      	ldr	r3, [pc, #324]	; (8001cbc <main+0x4dc>)
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001b78:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b7c:	a910      	add	r1, sp, #64	; 0x40
  hdac1.Instance = DAC1;
 8001b7e:	f8df a170 	ldr.w	sl, [pc, #368]	; 8001cf0 <main+0x510>
  sConfig.Channel = ADC_CHANNEL_4;
 8001b82:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b84:	4648      	mov	r0, r9
 8001b86:	f000 fdd7 	bl	8002738 <HAL_ADC_ConfigChannel>
  DAC_ChannelConfTypeDef sConfig = {0};
 8001b8a:	4621      	mov	r1, r4
 8001b8c:	2224      	movs	r2, #36	; 0x24
 8001b8e:	a810      	add	r0, sp, #64	; 0x40
 8001b90:	f00d fbd9 	bl	800f346 <memset>
  hdac1.Instance = DAC1;
 8001b94:	4b4a      	ldr	r3, [pc, #296]	; (8001cc0 <main+0x4e0>)
 8001b96:	f8ca 3000 	str.w	r3, [sl]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001b9a:	4650      	mov	r0, sl
 8001b9c:	f001 f876 	bl	8002c8c <HAL_DAC_Init>
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001ba0:	4622      	mov	r2, r4
 8001ba2:	a910      	add	r1, sp, #64	; 0x40
 8001ba4:	4650      	mov	r0, sl
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001ba6:	9410      	str	r4, [sp, #64]	; 0x40
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001ba8:	9411      	str	r4, [sp, #68]	; 0x44
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001baa:	9412      	str	r4, [sp, #72]	; 0x48
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001bac:	9413      	str	r4, [sp, #76]	; 0x4c
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001bae:	9414      	str	r4, [sp, #80]	; 0x50
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001bb0:	f001 f8b2 	bl	8002d18 <HAL_DAC_ConfigChannel>
  MX_USB_DEVICE_Init();
 8001bb4:	f005 fece 	bl	8007954 <MX_USB_DEVICE_Init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001bb8:	4621      	mov	r1, r4
 8001bba:	4630      	mov	r0, r6
 8001bbc:	f003 fee4 	bl	8005988 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001bc0:	4641      	mov	r1, r8
 8001bc2:	4630      	mov	r0, r6
 8001bc4:	f003 fee0 	bl	8005988 <HAL_TIM_PWM_Start>
  __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 3071);			    // PWM_CH1 = 0
 8001bc8:	6833      	ldr	r3, [r6, #0]
 8001bca:	f640 32ff 	movw	r2, #3071	; 0xbff
 8001bce:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 4095);		    // PWM_CH2 = 4095 100% brilho
 8001bd0:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001bd4:	639a      	str	r2, [r3, #56]	; 0x38
  ST7735_Init();
 8001bd6:	f7ff f9dd 	bl	8000f94 <ST7735_Init>
  ST7735_Clear(0x0000);
 8001bda:	4620      	mov	r0, r4
 8001bdc:	f7ff faa0 	bl	8001120 <ST7735_Clear>
  ST7735_PutStr5x7(40, 0, "STM32L476RG Board", 0xFFFF);
 8001be0:	4621      	mov	r1, r4
 8001be2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001be6:	4a37      	ldr	r2, [pc, #220]	; (8001cc4 <main+0x4e4>)
 8001be8:	2028      	movs	r0, #40	; 0x28
 8001bea:	f7ff fb8f 	bl	800130c <ST7735_PutStr5x7>
  tft_backlight(100);
 8001bee:	2064      	movs	r0, #100	; 0x64
 8001bf0:	f000 f8a6 	bl	8001d40 <tft_backlight>
  Evt_InitQueue();
 8001bf4:	f7ff fcec 	bl	80015d0 <Evt_InitQueue>
  KeyboardInit(0x01);
 8001bf8:	4628      	mov	r0, r5
 8001bfa:	f7ff fbc1 	bl	8001380 <KeyboardInit>
  W25qxx_Init();
 8001bfe:	f000 fb8d 	bl	800231c <W25qxx_Init>
  temperatura = (float)(2000 *(3.30/4095.0));
 8001c02:	4b31      	ldr	r3, [pc, #196]	; (8001cc8 <main+0x4e8>)
 8001c04:	4a31      	ldr	r2, [pc, #196]	; (8001ccc <main+0x4ec>)
  sprintf(buffer, "Temperatura: %0.1f°C\n", temperatura);
 8001c06:	4932      	ldr	r1, [pc, #200]	; (8001cd0 <main+0x4f0>)
  temperatura = (float)(2000 *(3.30/4095.0));
 8001c08:	601a      	str	r2, [r3, #0]
  sprintf(buffer, "Temperatura: %0.1f°C\n", temperatura);
 8001c0a:	4832      	ldr	r0, [pc, #200]	; (8001cd4 <main+0x4f4>)
  lv_disp_buf_init(&disp_buf, buf, buf2, LV_HOR_RES_MAX * 10);    //Initialize the display buffer
 8001c0c:	4d32      	ldr	r5, [pc, #200]	; (8001cd8 <main+0x4f8>)
  sprintf(buffer, "Temperatura: %0.1f°C\n", temperatura);
 8001c0e:	a326      	add	r3, pc, #152	; (adr r3, 8001ca8 <main+0x4c8>)
 8001c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c14:	f00d fbbc 	bl	800f390 <sprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY); // send message via UART
 8001c18:	482e      	ldr	r0, [pc, #184]	; (8001cd4 <main+0x4f4>)
 8001c1a:	f7fe fae3 	bl	80001e4 <strlen>
 8001c1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c22:	b282      	uxth	r2, r0
 8001c24:	492b      	ldr	r1, [pc, #172]	; (8001cd4 <main+0x4f4>)
 8001c26:	4638      	mov	r0, r7
 8001c28:	f004 f92b 	bl	8005e82 <HAL_UART_Transmit>
  lv_disp_buf_init(&disp_buf, buf, buf2, LV_HOR_RES_MAX * 10);    //Initialize the display buffer
 8001c2c:	4a2b      	ldr	r2, [pc, #172]	; (8001cdc <main+0x4fc>)
 8001c2e:	492c      	ldr	r1, [pc, #176]	; (8001ce0 <main+0x500>)
 8001c30:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8001c34:	4628      	mov	r0, r5
 8001c36:	f00b f981 	bl	800cf3c <lv_disp_buf_init>
  lv_init();
 8001c3a:	f006 fa4d 	bl	80080d8 <lv_init>
  lv_disp_drv_init(&disp_drv);          //Basic initialization
 8001c3e:	a810      	add	r0, sp, #64	; 0x40
 8001c40:	f00b f95c 	bl	800cefc <lv_disp_drv_init>
  disp_drv.hor_res = 160;               //Set the horizontal resolution
 8001c44:	23a0      	movs	r3, #160	; 0xa0
 8001c46:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
  disp_drv.ver_res = 128;               //Set the vertical resolution
 8001c4a:	2380      	movs	r3, #128	; 0x80
 8001c4c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
  lv_disp_drv_register(&disp_drv);      //Finally register the driver
 8001c50:	a810      	add	r0, sp, #64	; 0x40
  disp_drv.flush_cb = ST7735_Flush_3;	//Set your driver function
 8001c52:	4b24      	ldr	r3, [pc, #144]	; (8001ce4 <main+0x504>)
 8001c54:	9313      	str	r3, [sp, #76]	; 0x4c
  disp_drv.buffer = &disp_buf;          //Assign the buffer to teh display
 8001c56:	9511      	str	r5, [sp, #68]	; 0x44
  lv_disp_drv_register(&disp_drv);      //Finally register the driver
 8001c58:	f00b f97e 	bl	800cf58 <lv_disp_drv_register>
  lv_obj_t * scr = lv_disp_get_scr_act(NULL);     /*Get the current screen*/
 8001c5c:	4620      	mov	r0, r4
 8001c5e:	f006 f8ee 	bl	8007e3e <lv_disp_get_scr_act>
   lv_obj_t * label1 =  lv_label_create(scr, NULL);
 8001c62:	4621      	mov	r1, r4
 8001c64:	f00d f810 	bl	800ec88 <lv_label_create>
   lv_label_set_text(label1, "Hello world!");
 8001c68:	491f      	ldr	r1, [pc, #124]	; (8001ce8 <main+0x508>)
   lv_obj_t * label1 =  lv_label_create(scr, NULL);
 8001c6a:	4605      	mov	r5, r0
   lv_label_set_text(label1, "Hello world!");
 8001c6c:	f00c ff62 	bl	800eb34 <lv_label_set_text>
lv_obj_align(label1, NULL, LV_ALIGN_CENTER, 0, 0);
 8001c70:	9400      	str	r4, [sp, #0]
 8001c72:	4623      	mov	r3, r4
 8001c74:	4622      	mov	r2, r4
 8001c76:	4621      	mov	r1, r4
 8001c78:	4628      	mov	r0, r5
 8001c7a:	f006 fba1 	bl	80083c0 <lv_obj_align>
	  if(HAL_GetTick() - timer_loop >= 500) {
 8001c7e:	4c1b      	ldr	r4, [pc, #108]	; (8001cec <main+0x50c>)
 8001c80:	f000 fc46 	bl	8002510 <HAL_GetTick>
 8001c84:	6823      	ldr	r3, [r4, #0]
 8001c86:	1ac0      	subs	r0, r0, r3
 8001c88:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8001c8c:	d307      	bcc.n	8001c9e <main+0x4be>
		  timer_loop = HAL_GetTick();
 8001c8e:	f000 fc3f 	bl	8002510 <HAL_GetTick>
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001c92:	2120      	movs	r1, #32
		  timer_loop = HAL_GetTick();
 8001c94:	6020      	str	r0, [r4, #0]
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001c96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c9a:	f001 f9ae 	bl	8002ffa <HAL_GPIO_TogglePin>
	  KeyboardEvent();
 8001c9e:	f7ff fca1 	bl	80015e4 <KeyboardEvent>
	  lv_task_handler();
 8001ca2:	f00b ff83 	bl	800dbac <lv_task_handler>
	  if(HAL_GetTick() - timer_loop >= 500) {
 8001ca6:	e7eb      	b.n	8001c80 <main+0x4a0>
 8001ca8:	a0000000 	.word	0xa0000000
 8001cac:	3ff9c99c 	.word	0x3ff9c99c
 8001cb0:	04300002 	.word	0x04300002
 8001cb4:	08600004 	.word	0x08600004
 8001cb8:	0c900008 	.word	0x0c900008
 8001cbc:	10c00010 	.word	0x10c00010
 8001cc0:	40007400 	.word	0x40007400
 8001cc4:	08012008 	.word	0x08012008
 8001cc8:	20003f50 	.word	0x20003f50
 8001ccc:	3fce4ce5 	.word	0x3fce4ce5
 8001cd0:	0801201a 	.word	0x0801201a
 8001cd4:	20003d3e 	.word	0x20003d3e
 8001cd8:	20003f34 	.word	0x20003f34
 8001cdc:	200030be 	.word	0x200030be
 8001ce0:	2000243e 	.word	0x2000243e
 8001ce4:	08001191 	.word	0x08001191
 8001ce8:	08012031 	.word	0x08012031
 8001cec:	20003f5c 	.word	0x20003f5c
 8001cf0:	2000c608 	.word	0x2000c608

08001cf4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cf4:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001cf6:	4c0f      	ldr	r4, [pc, #60]	; (8001d34 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001cf8:	6803      	ldr	r3, [r0, #0]
 8001cfa:	42a3      	cmp	r3, r4
{
 8001cfc:	4605      	mov	r5, r0
  if (htim->Instance == TIM6) {
 8001cfe:	d101      	bne.n	8001d04 <HAL_TIM_PeriodElapsedCallback+0x10>
    HAL_IncTick();
 8001d00:	f000 fbfa 	bl	80024f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM6) {
 8001d04:	682b      	ldr	r3, [r5, #0]
 8001d06:	42a3      	cmp	r3, r4
 8001d08:	d102      	bne.n	8001d10 <HAL_TIM_PeriodElapsedCallback+0x1c>
	  lv_tick_inc(1);
 8001d0a:	2001      	movs	r0, #1
 8001d0c:	f00b f9de 	bl	800d0cc <lv_tick_inc>
  }
  if (htim->Instance == TIM6) {
 8001d10:	682b      	ldr	r3, [r5, #0]
 8001d12:	42a3      	cmp	r3, r4
 8001d14:	d10c      	bne.n	8001d30 <HAL_TIM_PeriodElapsedCallback+0x3c>
 	  timer_key++;
 8001d16:	4a08      	ldr	r2, [pc, #32]	; (8001d38 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001d18:	6813      	ldr	r3, [r2, #0]
 8001d1a:	3301      	adds	r3, #1
 	  if(timer_key >= 40) {
 8001d1c:	2b27      	cmp	r3, #39	; 0x27
 8001d1e:	d801      	bhi.n	8001d24 <HAL_TIM_PeriodElapsedCallback+0x30>
 	  timer_key++;
 8001d20:	6013      	str	r3, [r2, #0]
 8001d22:	bd38      	pop	{r3, r4, r5, pc}
 		  timer_key = 0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	6013      	str	r3, [r2, #0]
 		  Key_Read();
 	  }
   }
  /* USER CODE END Callback 1 */
}
 8001d28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 		  Key_Read();
 8001d2c:	f7ff bc28 	b.w	8001580 <Key_Read>
 8001d30:	bd38      	pop	{r3, r4, r5, pc}
 8001d32:	bf00      	nop
 8001d34:	40001000 	.word	0x40001000
 8001d38:	20003f58 	.word	0x20003f58

08001d3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d3c:	4770      	bx	lr
	...

08001d40 <tft_backlight>:
	}
}

void tft_backlight(uint16_t value)
{
	if(value >= 0 && value <= 100) {
 8001d40:	2864      	cmp	r0, #100	; 0x64
 8001d42:	d809      	bhi.n	8001d58 <tft_backlight+0x18>
		tft_pwm = value * 32;
 8001d44:	0141      	lsls	r1, r0, #5
 8001d46:	4b05      	ldr	r3, [pc, #20]	; (8001d5c <tft_backlight+0x1c>)
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, tft_pwm);		// PWM_CH2 = TFT
		logI("I - TFT_PWM: %ld\n\r", tft_pwm);
 8001d48:	4805      	ldr	r0, [pc, #20]	; (8001d60 <tft_backlight+0x20>)
		tft_pwm = value * 32;
 8001d4a:	b289      	uxth	r1, r1
 8001d4c:	8019      	strh	r1, [r3, #0]
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, tft_pwm);		// PWM_CH2 = TFT
 8001d4e:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <tft_backlight+0x24>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	6399      	str	r1, [r3, #56]	; 0x38
		logI("I - TFT_PWM: %ld\n\r", tft_pwm);
 8001d54:	f7ff bcd0 	b.w	80016f8 <logI>
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	20003f54 	.word	0x20003f54
 8001d60:	0801203e 	.word	0x0801203e
 8001d64:	2000c668 	.word	0x2000c668

08001d68 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d68:	4b0a      	ldr	r3, [pc, #40]	; (8001d94 <HAL_MspInit+0x2c>)
 8001d6a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d6c:	f042 0201 	orr.w	r2, r2, #1
 8001d70:	661a      	str	r2, [r3, #96]	; 0x60
 8001d72:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8001d74:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d76:	f002 0201 	and.w	r2, r2, #1
 8001d7a:	9200      	str	r2, [sp, #0]
 8001d7c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d7e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d80:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d84:	659a      	str	r2, [r3, #88]	; 0x58
 8001d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8c:	9301      	str	r3, [sp, #4]
 8001d8e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d90:	b002      	add	sp, #8
 8001d92:	4770      	bx	lr
 8001d94:	40021000 	.word	0x40021000

08001d98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d98:	b510      	push	{r4, lr}
 8001d9a:	4604      	mov	r4, r0
 8001d9c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9e:	2214      	movs	r2, #20
 8001da0:	2100      	movs	r1, #0
 8001da2:	a803      	add	r0, sp, #12
 8001da4:	f00d facf 	bl	800f346 <memset>
  if(hadc->Instance==ADC1)
 8001da8:	6822      	ldr	r2, [r4, #0]
 8001daa:	4b11      	ldr	r3, [pc, #68]	; (8001df0 <HAL_ADC_MspInit+0x58>)
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d11d      	bne.n	8001dec <HAL_ADC_MspInit+0x54>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001db0:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8001db4:	f5a3 33f8 	sub.w	r3, r3, #126976	; 0x1f000
    PC3     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001db8:	a903      	add	r1, sp, #12
    __HAL_RCC_ADC_CLK_ENABLE();
 8001dba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dbc:	480d      	ldr	r0, [pc, #52]	; (8001df4 <HAL_ADC_MspInit+0x5c>)
    __HAL_RCC_ADC_CLK_ENABLE();
 8001dbe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001dc2:	64da      	str	r2, [r3, #76]	; 0x4c
 8001dc4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001dc6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001dca:	9201      	str	r2, [sp, #4]
 8001dcc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001dd0:	f042 0204 	orr.w	r2, r2, #4
 8001dd4:	64da      	str	r2, [r3, #76]	; 0x4c
 8001dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd8:	f003 0304 	and.w	r3, r3, #4
 8001ddc:	9302      	str	r3, [sp, #8]
 8001dde:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001de0:	230f      	movs	r3, #15
 8001de2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001de4:	230b      	movs	r3, #11
 8001de6:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001de8:	f001 f820 	bl	8002e2c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001dec:	b008      	add	sp, #32
 8001dee:	bd10      	pop	{r4, pc}
 8001df0:	50040000 	.word	0x50040000
 8001df4:	48000800 	.word	0x48000800

08001df8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001df8:	b510      	push	{r4, lr}
 8001dfa:	4604      	mov	r4, r0
 8001dfc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dfe:	2214      	movs	r2, #20
 8001e00:	2100      	movs	r1, #0
 8001e02:	a803      	add	r0, sp, #12
 8001e04:	f00d fa9f 	bl	800f346 <memset>
  if(hdac->Instance==DAC1)
 8001e08:	6822      	ldr	r2, [r4, #0]
 8001e0a:	4b15      	ldr	r3, [pc, #84]	; (8001e60 <HAL_DAC_MspInit+0x68>)
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d124      	bne.n	8001e5a <HAL_DAC_MspInit+0x62>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001e10:	f503 33ce 	add.w	r3, r3, #105472	; 0x19c00
    PA4     ------> DAC1_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e14:	a903      	add	r1, sp, #12
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001e16:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e18:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001e1c:	659a      	str	r2, [r3, #88]	; 0x58
 8001e1e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e20:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8001e24:	9201      	str	r2, [sp, #4]
 8001e26:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e2a:	f042 0201 	orr.w	r2, r2, #1
 8001e2e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	9302      	str	r3, [sp, #8]
 8001e38:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001e3a:	2310      	movs	r3, #16
 8001e3c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e42:	2303      	movs	r3, #3
 8001e44:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e46:	f000 fff1 	bl	8002e2c <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	2036      	movs	r0, #54	; 0x36
 8001e4e:	4611      	mov	r1, r2
 8001e50:	f000 feda 	bl	8002c08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001e54:	2036      	movs	r0, #54	; 0x36
 8001e56:	f000 ff0b 	bl	8002c70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001e5a:	b008      	add	sp, #32
 8001e5c:	bd10      	pop	{r4, pc}
 8001e5e:	bf00      	nop
 8001e60:	40007400 	.word	0x40007400

08001e64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e64:	b510      	push	{r4, lr}
 8001e66:	4604      	mov	r4, r0
 8001e68:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6a:	2214      	movs	r2, #20
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	a803      	add	r0, sp, #12
 8001e70:	f00d fa69 	bl	800f346 <memset>
  if(hi2c->Instance==I2C1)
 8001e74:	6822      	ldr	r2, [r4, #0]
 8001e76:	4b13      	ldr	r3, [pc, #76]	; (8001ec4 <HAL_I2C_MspInit+0x60>)
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d121      	bne.n	8001ec0 <HAL_I2C_MspInit+0x5c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e7c:	4c12      	ldr	r4, [pc, #72]	; (8001ec8 <HAL_I2C_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e7e:	4813      	ldr	r0, [pc, #76]	; (8001ecc <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e80:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001e82:	f043 0302 	orr.w	r3, r3, #2
 8001e86:	64e3      	str	r3, [r4, #76]	; 0x4c
 8001e88:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	9301      	str	r3, [sp, #4]
 8001e90:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e92:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e96:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e98:	2312      	movs	r3, #18
 8001e9a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ea6:	2304      	movs	r3, #4
 8001ea8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eaa:	f000 ffbf 	bl	8002e2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001eae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001eb0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001eb4:	65a3      	str	r3, [r4, #88]	; 0x58
 8001eb6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001eb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ebc:	9302      	str	r3, [sp, #8]
 8001ebe:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ec0:	b008      	add	sp, #32
 8001ec2:	bd10      	pop	{r4, pc}
 8001ec4:	40005400 	.word	0x40005400
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	48000400 	.word	0x48000400

08001ed0 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001ed0:	b570      	push	{r4, r5, r6, lr}
 8001ed2:	4604      	mov	r4, r0
 8001ed4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed6:	2214      	movs	r2, #20
 8001ed8:	2100      	movs	r1, #0
 8001eda:	a803      	add	r0, sp, #12
 8001edc:	f00d fa33 	bl	800f346 <memset>
  if(hqspi->Instance==QUADSPI)
 8001ee0:	6822      	ldr	r2, [r4, #0]
 8001ee2:	4b1e      	ldr	r3, [pc, #120]	; (8001f5c <HAL_QSPI_MspInit+0x8c>)
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d137      	bne.n	8001f58 <HAL_QSPI_MspInit+0x88>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001ee8:	f103 4320 	add.w	r3, r3, #2684354560	; 0xa0000000
 8001eec:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
    PB1     ------> QUADSPI_BK1_IO0
    PB10     ------> QUADSPI_CLK
    PB11     ------> QUADSPI_NCS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef0:	2602      	movs	r6, #2
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001ef2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ef4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ef8:	651a      	str	r2, [r3, #80]	; 0x50
 8001efa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001efc:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001f00:	9200      	str	r2, [sp, #0]
 8001f02:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f06:	f042 0201 	orr.w	r2, r2, #1
 8001f0a:	64da      	str	r2, [r3, #76]	; 0x4c
 8001f0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f0e:	f002 0201 	and.w	r2, r2, #1
 8001f12:	9201      	str	r2, [sp, #4]
 8001f14:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f18:	f042 0202 	orr.w	r2, r2, #2
 8001f1c:	64da      	str	r2, [r3, #76]	; 0x4c
 8001f1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f20:	9604      	str	r6, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	9302      	str	r3, [sp, #8]
 8001f28:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f2a:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f2c:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001f2e:	240a      	movs	r4, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f30:	a903      	add	r1, sp, #12
 8001f32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f36:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f38:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001f3a:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f3c:	f000 ff76 	bl	8002e2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 8001f40:	f640 4303 	movw	r3, #3075	; 0xc03
 8001f44:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f46:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f48:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f4a:	4805      	ldr	r0, [pc, #20]	; (8001f60 <HAL_QSPI_MspInit+0x90>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4c:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f50:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001f52:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f54:	f000 ff6a 	bl	8002e2c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001f58:	b008      	add	sp, #32
 8001f5a:	bd70      	pop	{r4, r5, r6, pc}
 8001f5c:	a0001000 	.word	0xa0001000
 8001f60:	48000400 	.word	0x48000400

08001f64 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8001f64:	6802      	ldr	r2, [r0, #0]
 8001f66:	4b05      	ldr	r3, [pc, #20]	; (8001f7c <HAL_RTC_MspInit+0x18>)
 8001f68:	429a      	cmp	r2, r3
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001f6a:	bf01      	itttt	eq
 8001f6c:	4a04      	ldreq	r2, [pc, #16]	; (8001f80 <HAL_RTC_MspInit+0x1c>)
 8001f6e:	f8d2 3090 	ldreq.w	r3, [r2, #144]	; 0x90
 8001f72:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
 8001f76:	f8c2 3090 	streq.w	r3, [r2, #144]	; 0x90
 8001f7a:	4770      	bx	lr
 8001f7c:	40002800 	.word	0x40002800
 8001f80:	40021000 	.word	0x40021000

08001f84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f84:	b510      	push	{r4, lr}
 8001f86:	4604      	mov	r4, r0
 8001f88:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8a:	2214      	movs	r2, #20
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	a803      	add	r0, sp, #12
 8001f90:	f00d f9d9 	bl	800f346 <memset>
  if(hspi->Instance==SPI3)
 8001f94:	6822      	ldr	r2, [r4, #0]
 8001f96:	4b13      	ldr	r3, [pc, #76]	; (8001fe4 <HAL_SPI_MspInit+0x60>)
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d120      	bne.n	8001fde <HAL_SPI_MspInit+0x5a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001f9c:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fa0:	a903      	add	r1, sp, #12
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001fa2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fa4:	4810      	ldr	r0, [pc, #64]	; (8001fe8 <HAL_SPI_MspInit+0x64>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001fa6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001faa:	659a      	str	r2, [r3, #88]	; 0x58
 8001fac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001fae:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8001fb2:	9201      	str	r2, [sp, #4]
 8001fb4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001fb8:	f042 0204 	orr.w	r2, r2, #4
 8001fbc:	64da      	str	r2, [r3, #76]	; 0x4c
 8001fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc0:	f003 0304 	and.w	r3, r3, #4
 8001fc4:	9302      	str	r3, [sp, #8]
 8001fc6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001fc8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001fcc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fce:	2302      	movs	r3, #2
 8001fd0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001fd6:	2306      	movs	r3, #6
 8001fd8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fda:	f000 ff27 	bl	8002e2c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001fde:	b008      	add	sp, #32
 8001fe0:	bd10      	pop	{r4, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40003c00 	.word	0x40003c00
 8001fe8:	48000800 	.word	0x48000800

08001fec <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM3)
 8001fec:	6802      	ldr	r2, [r0, #0]
 8001fee:	4b08      	ldr	r3, [pc, #32]	; (8002010 <HAL_TIM_Base_MspInit+0x24>)
 8001ff0:	429a      	cmp	r2, r3
{
 8001ff2:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM3)
 8001ff4:	d10a      	bne.n	800200c <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ff6:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8001ffa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001ffc:	f042 0202 	orr.w	r2, r2, #2
 8002000:	659a      	str	r2, [r3, #88]	; 0x58
 8002002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	9301      	str	r3, [sp, #4]
 800200a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800200c:	b002      	add	sp, #8
 800200e:	4770      	bx	lr
 8002010:	40000400 	.word	0x40000400

08002014 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002014:	b510      	push	{r4, lr}
 8002016:	4604      	mov	r4, r0
 8002018:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800201a:	2214      	movs	r2, #20
 800201c:	2100      	movs	r1, #0
 800201e:	a801      	add	r0, sp, #4
 8002020:	f00d f991 	bl	800f346 <memset>
  if(htim->Instance==TIM3)
 8002024:	6822      	ldr	r2, [r4, #0]
 8002026:	4b0c      	ldr	r3, [pc, #48]	; (8002058 <HAL_TIM_MspPostInit+0x44>)
 8002028:	429a      	cmp	r2, r3
 800202a:	d113      	bne.n	8002054 <HAL_TIM_MspPostInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800202c:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
    GPIO_InitStruct.Pin = PWM_LED_Pin|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002030:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002032:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002034:	4809      	ldr	r0, [pc, #36]	; (800205c <HAL_TIM_MspPostInit+0x48>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002036:	f042 0204 	orr.w	r2, r2, #4
 800203a:	64da      	str	r2, [r3, #76]	; 0x4c
 800203c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800203e:	f003 0304 	and.w	r3, r3, #4
 8002042:	9300      	str	r3, [sp, #0]
 8002044:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = PWM_LED_Pin|GPIO_PIN_7;
 8002046:	23c0      	movs	r3, #192	; 0xc0
 8002048:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204a:	2302      	movs	r3, #2
 800204c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800204e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002050:	f000 feec 	bl	8002e2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002054:	b006      	add	sp, #24
 8002056:	bd10      	pop	{r4, pc}
 8002058:	40000400 	.word	0x40000400
 800205c:	48000800 	.word	0x48000800

08002060 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002060:	b510      	push	{r4, lr}
 8002062:	4604      	mov	r4, r0
 8002064:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002066:	2214      	movs	r2, #20
 8002068:	2100      	movs	r1, #0
 800206a:	a803      	add	r0, sp, #12
 800206c:	f00d f96b 	bl	800f346 <memset>
  if(huart->Instance==USART2)
 8002070:	6822      	ldr	r2, [r4, #0]
 8002072:	4b13      	ldr	r3, [pc, #76]	; (80020c0 <HAL_UART_MspInit+0x60>)
 8002074:	429a      	cmp	r2, r3
 8002076:	d120      	bne.n	80020ba <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002078:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207c:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 800207e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002080:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002084:	659a      	str	r2, [r3, #88]	; 0x58
 8002086:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002088:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800208c:	9201      	str	r2, [sp, #4]
 800208e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002090:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002092:	f042 0201 	orr.w	r2, r2, #1
 8002096:	64da      	str	r2, [r3, #76]	; 0x4c
 8002098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	9302      	str	r3, [sp, #8]
 80020a0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80020a2:	230c      	movs	r3, #12
 80020a4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a6:	2302      	movs	r3, #2
 80020a8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020aa:	2303      	movs	r3, #3
 80020ac:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020b2:	2307      	movs	r3, #7
 80020b4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b6:	f000 feb9 	bl	8002e2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80020ba:	b008      	add	sp, #32
 80020bc:	bd10      	pop	{r4, pc}
 80020be:	bf00      	nop
 80020c0:	40004400 	.word	0x40004400

080020c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020c4:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80020c6:	4601      	mov	r1, r0
{
 80020c8:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80020ca:	2200      	movs	r2, #0
 80020cc:	2036      	movs	r0, #54	; 0x36
 80020ce:	f000 fd9b 	bl	8002c08 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 80020d2:	2036      	movs	r0, #54	; 0x36
 80020d4:	f000 fdcc 	bl	8002c70 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80020d8:	4b14      	ldr	r3, [pc, #80]	; (800212c <HAL_InitTick+0x68>)
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80020da:	4c15      	ldr	r4, [pc, #84]	; (8002130 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 80020dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80020de:	f042 0210 	orr.w	r2, r2, #16
 80020e2:	659a      	str	r2, [r3, #88]	; 0x58
 80020e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e6:	f003 0310 	and.w	r3, r3, #16
 80020ea:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020ec:	a901      	add	r1, sp, #4
 80020ee:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 80020f0:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020f2:	f002 f925 	bl	8004340 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80020f6:	f002 f8ff 	bl	80042f8 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 80020fa:	4b0e      	ldr	r3, [pc, #56]	; (8002134 <HAL_InitTick+0x70>)
 80020fc:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80020fe:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002102:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002104:	4b0c      	ldr	r3, [pc, #48]	; (8002138 <HAL_InitTick+0x74>)
 8002106:	fbb0 f0f3 	udiv	r0, r0, r3
 800210a:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
 800210c:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 800210e:	6060      	str	r0, [r4, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002110:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8002112:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002114:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002116:	f003 fa8b 	bl	8005630 <HAL_TIM_Base_Init>
 800211a:	b920      	cbnz	r0, 8002126 <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800211c:	4620      	mov	r0, r4
 800211e:	f003 f955 	bl	80053cc <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8002122:	b008      	add	sp, #32
 8002124:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 8002126:	2001      	movs	r0, #1
 8002128:	e7fb      	b.n	8002122 <HAL_InitTick+0x5e>
 800212a:	bf00      	nop
 800212c:	40021000 	.word	0x40021000
 8002130:	2000c858 	.word	0x2000c858
 8002134:	40001000 	.word	0x40001000
 8002138:	000f4240 	.word	0x000f4240

0800213c <NMI_Handler>:
 800213c:	4770      	bx	lr

0800213e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800213e:	e7fe      	b.n	800213e <HardFault_Handler>

08002140 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002140:	e7fe      	b.n	8002140 <MemManage_Handler>

08002142 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002142:	e7fe      	b.n	8002142 <BusFault_Handler>

08002144 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002144:	e7fe      	b.n	8002144 <UsageFault_Handler>

08002146 <SVC_Handler>:
 8002146:	4770      	bx	lr

08002148 <DebugMon_Handler>:
 8002148:	4770      	bx	lr

0800214a <PendSV_Handler>:
 800214a:	4770      	bx	lr

0800214c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800214c:	4770      	bx	lr
	...

08002150 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002150:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002152:	4804      	ldr	r0, [pc, #16]	; (8002164 <TIM6_DAC_IRQHandler+0x14>)
 8002154:	f003 f955 	bl	8005402 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8002158:	4803      	ldr	r0, [pc, #12]	; (8002168 <TIM6_DAC_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800215a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_DAC_IRQHandler(&hdac1);
 800215e:	f000 bda9 	b.w	8002cb4 <HAL_DAC_IRQHandler>
 8002162:	bf00      	nop
 8002164:	2000c858 	.word	0x2000c858
 8002168:	2000c608 	.word	0x2000c608

0800216c <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800216c:	4801      	ldr	r0, [pc, #4]	; (8002174 <OTG_FS_IRQHandler+0x8>)
 800216e:	f001 b88f 	b.w	8003290 <HAL_PCD_IRQHandler>
 8002172:	bf00      	nop
 8002174:	2000d1c8 	.word	0x2000d1c8

08002178 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8002178:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800217a:	4b0a      	ldr	r3, [pc, #40]	; (80021a4 <_sbrk+0x2c>)
 800217c:	6819      	ldr	r1, [r3, #0]
{
 800217e:	4602      	mov	r2, r0
	if (heap_end == 0)
 8002180:	b909      	cbnz	r1, 8002186 <_sbrk+0xe>
		heap_end = &end;
 8002182:	4909      	ldr	r1, [pc, #36]	; (80021a8 <_sbrk+0x30>)
 8002184:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8002186:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8002188:	4669      	mov	r1, sp
 800218a:	4402      	add	r2, r0
 800218c:	428a      	cmp	r2, r1
 800218e:	d906      	bls.n	800219e <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8002190:	f00c fe96 	bl	800eec0 <__errno>
 8002194:	230c      	movs	r3, #12
 8002196:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002198:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800219c:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 800219e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80021a0:	bd08      	pop	{r3, pc}
 80021a2:	bf00      	nop
 80021a4:	20003f60 	.word	0x20003f60
 80021a8:	2000d958 	.word	0x2000d958

080021ac <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021ac:	490f      	ldr	r1, [pc, #60]	; (80021ec <SystemInit+0x40>)
 80021ae:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80021b2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80021ba:	4b0d      	ldr	r3, [pc, #52]	; (80021f0 <SystemInit+0x44>)
 80021bc:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80021be:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 80021c0:	f042 0201 	orr.w	r2, r2, #1
 80021c4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 80021c6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 80021ce:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80021d2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80021d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021d8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80021e0:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80021e2:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80021e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80021e8:	608b      	str	r3, [r1, #8]
 80021ea:	4770      	bx	lr
 80021ec:	e000ed00 	.word	0xe000ed00
 80021f0:	40021000 	.word	0x40021000

080021f4 <W25qxx_Spi>:
#define	W25qxx_Delay(delay)		HAL_Delay(delay)
#endif

//###################################################################################################################
uint8_t	W25qxx_Spi(uint8_t	Data)
{
 80021f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t	ret;
	HAL_SPI_TransmitReceive(&hspi3, &Data, &ret, 1, 10);
 80021f6:	230a      	movs	r3, #10
{
 80021f8:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_SPI_TransmitReceive(&hspi3, &Data, &ret, 1, 10);
 80021fc:	9300      	str	r3, [sp, #0]
 80021fe:	f10d 0217 	add.w	r2, sp, #23
 8002202:	2301      	movs	r3, #1
 8002204:	f10d 010f 	add.w	r1, sp, #15
 8002208:	4803      	ldr	r0, [pc, #12]	; (8002218 <W25qxx_Spi+0x24>)
 800220a:	f002 fe8e 	bl	8004f2a <HAL_SPI_TransmitReceive>
	//HAL_SPI_TransmitReceive(&hspi2, &Data, &ret, 1, 10);
	return ret;
}
 800220e:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8002212:	b007      	add	sp, #28
 8002214:	f85d fb04 	ldr.w	pc, [sp], #4
 8002218:	2000c6a8 	.word	0x2000c6a8

0800221c <W25qxx_ReadID>:

//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 800221c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 800221e:	4d0f      	ldr	r5, [pc, #60]	; (800225c <W25qxx_ReadID+0x40>)
 8002220:	2200      	movs	r2, #0
 8002222:	2104      	movs	r1, #4
 8002224:	4628      	mov	r0, r5
 8002226:	f000 fee3 	bl	8002ff0 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x9F);
 800222a:	209f      	movs	r0, #159	; 0x9f
 800222c:	f7ff ffe2 	bl	80021f4 <W25qxx_Spi>
  Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002230:	20a5      	movs	r0, #165	; 0xa5
 8002232:	f7ff ffdf 	bl	80021f4 <W25qxx_Spi>
 8002236:	4607      	mov	r7, r0
  Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002238:	20a5      	movs	r0, #165	; 0xa5
 800223a:	f7ff ffdb 	bl	80021f4 <W25qxx_Spi>
 800223e:	4604      	mov	r4, r0
  Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002240:	20a5      	movs	r0, #165	; 0xa5
 8002242:	f7ff ffd7 	bl	80021f4 <W25qxx_Spi>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8002246:	2201      	movs	r2, #1
  Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002248:	4606      	mov	r6, r0
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 800224a:	2104      	movs	r1, #4
 800224c:	4628      	mov	r0, r5
 800224e:	f000 fecf 	bl	8002ff0 <HAL_GPIO_WritePin>
  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8002252:	0220      	lsls	r0, r4, #8
 8002254:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
  return Temp;
}
 8002258:	4330      	orrs	r0, r6
 800225a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800225c:	48000c00 	.word	0x48000c00

08002260 <W25qxx_ReadUniqID>:

//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8002260:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8002262:	2200      	movs	r2, #0
 8002264:	2104      	movs	r1, #4
 8002266:	4811      	ldr	r0, [pc, #68]	; (80022ac <W25qxx_ReadUniqID+0x4c>)
  W25qxx_Spi(0x4B);
	for(uint8_t	i=0;i<4;i++)
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
	for(uint8_t	i=0;i<8;i++)
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002268:	4d11      	ldr	r5, [pc, #68]	; (80022b0 <W25qxx_ReadUniqID+0x50>)
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 800226a:	f000 fec1 	bl	8002ff0 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x4B);
 800226e:	204b      	movs	r0, #75	; 0x4b
 8002270:	f7ff ffc0 	bl	80021f4 <W25qxx_Spi>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002274:	20a5      	movs	r0, #165	; 0xa5
 8002276:	f7ff ffbd 	bl	80021f4 <W25qxx_Spi>
 800227a:	20a5      	movs	r0, #165	; 0xa5
 800227c:	f7ff ffba 	bl	80021f4 <W25qxx_Spi>
 8002280:	20a5      	movs	r0, #165	; 0xa5
 8002282:	f7ff ffb7 	bl	80021f4 <W25qxx_Spi>
 8002286:	20a5      	movs	r0, #165	; 0xa5
 8002288:	f7ff ffb4 	bl	80021f4 <W25qxx_Spi>
 800228c:	2400      	movs	r4, #0
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800228e:	20a5      	movs	r0, #165	; 0xa5
 8002290:	f7ff ffb0 	bl	80021f4 <W25qxx_Spi>
 8002294:	1963      	adds	r3, r4, r5
 8002296:	3401      	adds	r4, #1
	for(uint8_t	i=0;i<8;i++)
 8002298:	2c08      	cmp	r4, #8
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800229a:	7058      	strb	r0, [r3, #1]
	for(uint8_t	i=0;i<8;i++)
 800229c:	d1f7      	bne.n	800228e <W25qxx_ReadUniqID+0x2e>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 800229e:	2201      	movs	r2, #1
 80022a0:	2104      	movs	r1, #4
 80022a2:	4802      	ldr	r0, [pc, #8]	; (80022ac <W25qxx_ReadUniqID+0x4c>)
}
 80022a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 80022a8:	f000 bea2 	b.w	8002ff0 <HAL_GPIO_WritePin>
 80022ac:	48000c00 	.word	0x48000c00
 80022b0:	2000c898 	.word	0x2000c898

080022b4 <W25qxx_ReadStatusRegister>:
  W25qxx_Delay(1);
}

//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t	SelectStatusRegister_1_2_3)
{
 80022b4:	b538      	push	{r3, r4, r5, lr}
	uint8_t	status=0;

	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80022b6:	2200      	movs	r2, #0
{
 80022b8:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80022ba:	2104      	movs	r1, #4
 80022bc:	4815      	ldr	r0, [pc, #84]	; (8002314 <W25qxx_ReadStatusRegister+0x60>)
 80022be:	4d16      	ldr	r5, [pc, #88]	; (8002318 <W25qxx_ReadStatusRegister+0x64>)
 80022c0:	f000 fe96 	bl	8002ff0 <HAL_GPIO_WritePin>
	if(SelectStatusRegister_1_2_3==1)
 80022c4:	2c01      	cmp	r4, #1
 80022c6:	d10f      	bne.n	80022e8 <W25qxx_ReadStatusRegister+0x34>
	{
		W25qxx_Spi(0x05);
 80022c8:	2005      	movs	r0, #5
 80022ca:	f7ff ff93 	bl	80021f4 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80022ce:	20a5      	movs	r0, #165	; 0xa5
 80022d0:	f7ff ff90 	bl	80021f4 <W25qxx_Spi>
 80022d4:	4604      	mov	r4, r0
		w25qxx.StatusRegister1 = status;
 80022d6:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
	{
		W25qxx_Spi(0x15);
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);
		w25qxx.StatusRegister3 = status;
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 80022da:	2201      	movs	r2, #1
 80022dc:	2104      	movs	r1, #4
 80022de:	480d      	ldr	r0, [pc, #52]	; (8002314 <W25qxx_ReadStatusRegister+0x60>)
 80022e0:	f000 fe86 	bl	8002ff0 <HAL_GPIO_WritePin>

	return status;
}
 80022e4:	4620      	mov	r0, r4
 80022e6:	bd38      	pop	{r3, r4, r5, pc}
	else if(SelectStatusRegister_1_2_3==2)
 80022e8:	2c02      	cmp	r4, #2
 80022ea:	d109      	bne.n	8002300 <W25qxx_ReadStatusRegister+0x4c>
		W25qxx_Spi(0x35);
 80022ec:	2035      	movs	r0, #53	; 0x35
 80022ee:	f7ff ff81 	bl	80021f4 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80022f2:	20a5      	movs	r0, #165	; 0xa5
 80022f4:	f7ff ff7e 	bl	80021f4 <W25qxx_Spi>
 80022f8:	4604      	mov	r4, r0
		w25qxx.StatusRegister2 = status;
 80022fa:	f885 0025 	strb.w	r0, [r5, #37]	; 0x25
 80022fe:	e7ec      	b.n	80022da <W25qxx_ReadStatusRegister+0x26>
		W25qxx_Spi(0x15);
 8002300:	2015      	movs	r0, #21
 8002302:	f7ff ff77 	bl	80021f4 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002306:	20a5      	movs	r0, #165	; 0xa5
 8002308:	f7ff ff74 	bl	80021f4 <W25qxx_Spi>
 800230c:	4604      	mov	r4, r0
		w25qxx.StatusRegister3 = status;
 800230e:	f885 0026 	strb.w	r0, [r5, #38]	; 0x26
 8002312:	e7e2      	b.n	80022da <W25qxx_ReadStatusRegister+0x26>
 8002314:	48000c00 	.word	0x48000c00
 8002318:	2000c898 	.word	0x2000c898

0800231c <W25qxx_Init>:
 HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
}

//###################################################################################################################
bool	W25qxx_Init(void)
{
 800231c:	b538      	push	{r3, r4, r5, lr}
	w25qxx.Lock=1;
 800231e:	4c55      	ldr	r4, [pc, #340]	; (8002474 <W25qxx_Init+0x158>)
 8002320:	2301      	movs	r3, #1
 8002322:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	while(HAL_GetTick()<100)
 8002326:	f000 f8f3 	bl	8002510 <HAL_GetTick>
 800232a:	2863      	cmp	r0, #99	; 0x63
 800232c:	d917      	bls.n	800235e <W25qxx_Init+0x42>
		W25qxx_Delay(1);
	uint32_t	id;
	#if (_W25QXX_DEBUG==1)

	logI("w25qxx Init Begin...\r\n");
 800232e:	4852      	ldr	r0, [pc, #328]	; (8002478 <W25qxx_Init+0x15c>)
 8002330:	f7ff f9e2 	bl	80016f8 <logI>
	#endif
	id=W25qxx_ReadID();
 8002334:	f7ff ff72 	bl	800221c <W25qxx_ReadID>
 8002338:	4605      	mov	r5, r0

	#if (_W25QXX_DEBUG==1)
	logI("w25qxx ID:0x%X\r\n",id);
 800233a:	4601      	mov	r1, r0
 800233c:	484f      	ldr	r0, [pc, #316]	; (800247c <W25qxx_Init+0x160>)
 800233e:	f7ff f9db 	bl	80016f8 <logI>
	#endif
	switch(id&0x0000FFFF)
 8002342:	b2a8      	uxth	r0, r5
 8002344:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
 8002348:	3811      	subs	r0, #17
 800234a:	2809      	cmp	r0, #9
 800234c:	f200 808b 	bhi.w	8002466 <W25qxx_Init+0x14a>
 8002350:	e8df f000 	tbb	[pc, r0]
 8002354:	71777d83 	.word	0x71777d83
 8002358:	585f656b 	.word	0x585f656b
 800235c:	0951      	.short	0x0951
		W25qxx_Delay(1);
 800235e:	2001      	movs	r0, #1
 8002360:	f000 f8dc 	bl	800251c <HAL_Delay>
 8002364:	e7df      	b.n	8002326 <W25qxx_Init+0xa>
	{
		case 0x401A:	// 	w25q512
			w25qxx.ID=W25Q512;
 8002366:	230a      	movs	r3, #10
 8002368:	7023      	strb	r3, [r4, #0]
			w25qxx.BlockCount=1024;
			#if (_W25QXX_DEBUG==1)
			logI("w25qxx Chip: w25q512\r\n");
 800236a:	4845      	ldr	r0, [pc, #276]	; (8002480 <W25qxx_Init+0x164>)
			w25qxx.BlockCount=1024;
 800236c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002370:	61e3      	str	r3, [r4, #28]
		break;
		case 0x4011:	//	w25q10
			w25qxx.ID=W25Q10;
			w25qxx.BlockCount=2;
			#if (_W25QXX_DEBUG==1)
			logI("w25qxx Chip: w25q10\r\n");
 8002372:	f7ff f9c1 	bl	80016f8 <logI>
				#endif
			w25qxx.Lock=0;
			return false;

	}
	w25qxx.PageSize=256;
 8002376:	f44f 7380 	mov.w	r3, #256	; 0x100
 800237a:	8163      	strh	r3, [r4, #10]
	w25qxx.SectorSize=0x1000;
 800237c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002380:	6123      	str	r3, [r4, #16]
	w25qxx.SectorCount=w25qxx.BlockCount*16;
 8002382:	69e3      	ldr	r3, [r4, #28]
 8002384:	011a      	lsls	r2, r3, #4
	w25qxx.PageCount=(w25qxx.SectorCount*w25qxx.SectorSize)/w25qxx.PageSize;
 8002386:	041b      	lsls	r3, r3, #16
	w25qxx.SectorCount=w25qxx.BlockCount*16;
 8002388:	6162      	str	r2, [r4, #20]
	w25qxx.PageCount=(w25qxx.SectorCount*w25qxx.SectorSize)/w25qxx.PageSize;
 800238a:	0a1a      	lsrs	r2, r3, #8
 800238c:	60e2      	str	r2, [r4, #12]
	w25qxx.BlockSize=w25qxx.SectorSize*16;
	w25qxx.CapacityInKiloByte=(w25qxx.SectorCount*w25qxx.SectorSize)/1024;
 800238e:	0a9b      	lsrs	r3, r3, #10
	w25qxx.BlockSize=w25qxx.SectorSize*16;
 8002390:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	w25qxx.CapacityInKiloByte=(w25qxx.SectorCount*w25qxx.SectorSize)/1024;
 8002394:	6223      	str	r3, [r4, #32]
	w25qxx.BlockSize=w25qxx.SectorSize*16;
 8002396:	61a2      	str	r2, [r4, #24]
	W25qxx_ReadUniqID();
 8002398:	f7ff ff62 	bl	8002260 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 800239c:	2001      	movs	r0, #1
 800239e:	f7ff ff89 	bl	80022b4 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 80023a2:	2002      	movs	r0, #2
 80023a4:	f7ff ff86 	bl	80022b4 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 80023a8:	2003      	movs	r0, #3
 80023aa:	f7ff ff83 	bl	80022b4 <W25qxx_ReadStatusRegister>
	#if (_W25QXX_DEBUG==1)
	logI("w25qxx Page Size: %d Bytes\r\n",w25qxx.PageSize);
 80023ae:	8961      	ldrh	r1, [r4, #10]
 80023b0:	4834      	ldr	r0, [pc, #208]	; (8002484 <W25qxx_Init+0x168>)
 80023b2:	f7ff f9a1 	bl	80016f8 <logI>
	logI("w25qxx Page Count: %d\r\n",w25qxx.PageCount);
 80023b6:	68e1      	ldr	r1, [r4, #12]
 80023b8:	4833      	ldr	r0, [pc, #204]	; (8002488 <W25qxx_Init+0x16c>)
 80023ba:	f7ff f99d 	bl	80016f8 <logI>
	logI("w25qxx Sector Size: %d Bytes\r\n",w25qxx.SectorSize);
 80023be:	6921      	ldr	r1, [r4, #16]
 80023c0:	4832      	ldr	r0, [pc, #200]	; (800248c <W25qxx_Init+0x170>)
 80023c2:	f7ff f999 	bl	80016f8 <logI>
	logI("w25qxx Sector Count: %d\r\n",w25qxx.SectorCount);
 80023c6:	6961      	ldr	r1, [r4, #20]
 80023c8:	4831      	ldr	r0, [pc, #196]	; (8002490 <W25qxx_Init+0x174>)
 80023ca:	f7ff f995 	bl	80016f8 <logI>
	logI("w25qxx Block Size: %d Bytes\r\n",w25qxx.BlockSize);
 80023ce:	69a1      	ldr	r1, [r4, #24]
 80023d0:	4830      	ldr	r0, [pc, #192]	; (8002494 <W25qxx_Init+0x178>)
 80023d2:	f7ff f991 	bl	80016f8 <logI>
	logI("w25qxx Block Count: %d\r\n",w25qxx.BlockCount);
 80023d6:	69e1      	ldr	r1, [r4, #28]
 80023d8:	482f      	ldr	r0, [pc, #188]	; (8002498 <W25qxx_Init+0x17c>)
 80023da:	f7ff f98d 	bl	80016f8 <logI>
	logI("w25qxx Capacity: %d KiloBytes\r\n",w25qxx.CapacityInKiloByte);
 80023de:	6a21      	ldr	r1, [r4, #32]
 80023e0:	482e      	ldr	r0, [pc, #184]	; (800249c <W25qxx_Init+0x180>)
 80023e2:	f7ff f989 	bl	80016f8 <logI>
	logI("w25qxx Init Done\r\n");
 80023e6:	482e      	ldr	r0, [pc, #184]	; (80024a0 <W25qxx_Init+0x184>)
 80023e8:	f7ff f986 	bl	80016f8 <logI>
	#endif
	w25qxx.Lock=0;
 80023ec:	2300      	movs	r3, #0
 80023ee:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	return true;
 80023f2:	2001      	movs	r0, #1
}
 80023f4:	bd38      	pop	{r3, r4, r5, pc}
			w25qxx.ID=W25Q256;
 80023f6:	2309      	movs	r3, #9
 80023f8:	7023      	strb	r3, [r4, #0]
			w25qxx.BlockCount=512;
 80023fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023fe:	61e3      	str	r3, [r4, #28]
			logI("w25qxx Chip: w25q256\r\n");
 8002400:	4828      	ldr	r0, [pc, #160]	; (80024a4 <W25qxx_Init+0x188>)
 8002402:	e7b6      	b.n	8002372 <W25qxx_Init+0x56>
			w25qxx.ID=W25Q128;
 8002404:	2308      	movs	r3, #8
 8002406:	7023      	strb	r3, [r4, #0]
			w25qxx.BlockCount=256;
 8002408:	f44f 7380 	mov.w	r3, #256	; 0x100
 800240c:	61e3      	str	r3, [r4, #28]
			logI("w25qxx Chip: w25q128\r\n");
 800240e:	4826      	ldr	r0, [pc, #152]	; (80024a8 <W25qxx_Init+0x18c>)
 8002410:	e7af      	b.n	8002372 <W25qxx_Init+0x56>
			w25qxx.ID=W25Q64;
 8002412:	2307      	movs	r3, #7
 8002414:	7023      	strb	r3, [r4, #0]
			w25qxx.BlockCount=128;
 8002416:	2380      	movs	r3, #128	; 0x80
 8002418:	61e3      	str	r3, [r4, #28]
			logI("w25qxx Chip: w25q64\r\n");
 800241a:	4824      	ldr	r0, [pc, #144]	; (80024ac <W25qxx_Init+0x190>)
 800241c:	e7a9      	b.n	8002372 <W25qxx_Init+0x56>
			w25qxx.ID=W25Q32;
 800241e:	2306      	movs	r3, #6
 8002420:	7023      	strb	r3, [r4, #0]
			w25qxx.BlockCount=64;
 8002422:	2340      	movs	r3, #64	; 0x40
 8002424:	61e3      	str	r3, [r4, #28]
			logI("w25qxx Chip: w25q32\r\n");
 8002426:	4822      	ldr	r0, [pc, #136]	; (80024b0 <W25qxx_Init+0x194>)
 8002428:	e7a3      	b.n	8002372 <W25qxx_Init+0x56>
			w25qxx.ID=W25Q16;
 800242a:	2305      	movs	r3, #5
 800242c:	7023      	strb	r3, [r4, #0]
			w25qxx.BlockCount=32;
 800242e:	2320      	movs	r3, #32
 8002430:	61e3      	str	r3, [r4, #28]
			logI("w25qxx Chip: w25q16\r\n");
 8002432:	4820      	ldr	r0, [pc, #128]	; (80024b4 <W25qxx_Init+0x198>)
 8002434:	e79d      	b.n	8002372 <W25qxx_Init+0x56>
			w25qxx.ID=W25Q80;
 8002436:	2304      	movs	r3, #4
 8002438:	7023      	strb	r3, [r4, #0]
			w25qxx.BlockCount=16;
 800243a:	2310      	movs	r3, #16
 800243c:	61e3      	str	r3, [r4, #28]
			logI("w25qxx Chip: w25q80\r\n");
 800243e:	481e      	ldr	r0, [pc, #120]	; (80024b8 <W25qxx_Init+0x19c>)
 8002440:	e797      	b.n	8002372 <W25qxx_Init+0x56>
			w25qxx.ID=W25Q40;
 8002442:	2303      	movs	r3, #3
 8002444:	7023      	strb	r3, [r4, #0]
			w25qxx.BlockCount=8;
 8002446:	2308      	movs	r3, #8
 8002448:	61e3      	str	r3, [r4, #28]
			logI("w25qxx Chip: w25q40\r\n");
 800244a:	481c      	ldr	r0, [pc, #112]	; (80024bc <W25qxx_Init+0x1a0>)
 800244c:	e791      	b.n	8002372 <W25qxx_Init+0x56>
			w25qxx.ID=W25Q20;
 800244e:	2302      	movs	r3, #2
 8002450:	7023      	strb	r3, [r4, #0]
			w25qxx.BlockCount=4;
 8002452:	2304      	movs	r3, #4
 8002454:	61e3      	str	r3, [r4, #28]
			logI("w25qxx Chip: w25q20\r\n");
 8002456:	481a      	ldr	r0, [pc, #104]	; (80024c0 <W25qxx_Init+0x1a4>)
 8002458:	e78b      	b.n	8002372 <W25qxx_Init+0x56>
			w25qxx.ID=W25Q10;
 800245a:	2301      	movs	r3, #1
 800245c:	7023      	strb	r3, [r4, #0]
			w25qxx.BlockCount=2;
 800245e:	2302      	movs	r3, #2
 8002460:	61e3      	str	r3, [r4, #28]
			logI("w25qxx Chip: w25q10\r\n");
 8002462:	4818      	ldr	r0, [pc, #96]	; (80024c4 <W25qxx_Init+0x1a8>)
 8002464:	e785      	b.n	8002372 <W25qxx_Init+0x56>
				logI("w25qxx Unknown ID\r\n");
 8002466:	4818      	ldr	r0, [pc, #96]	; (80024c8 <W25qxx_Init+0x1ac>)
 8002468:	f7ff f946 	bl	80016f8 <logI>
			w25qxx.Lock=0;
 800246c:	2000      	movs	r0, #0
 800246e:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
			return false;
 8002472:	bd38      	pop	{r3, r4, r5, pc}
 8002474:	2000c898 	.word	0x2000c898
 8002478:	0801209c 	.word	0x0801209c
 800247c:	080120b3 	.word	0x080120b3
 8002480:	080120c4 	.word	0x080120c4
 8002484:	080121b7 	.word	0x080121b7
 8002488:	080121d4 	.word	0x080121d4
 800248c:	080121ec 	.word	0x080121ec
 8002490:	0801220b 	.word	0x0801220b
 8002494:	08012225 	.word	0x08012225
 8002498:	08012243 	.word	0x08012243
 800249c:	0801225c 	.word	0x0801225c
 80024a0:	0801227c 	.word	0x0801227c
 80024a4:	080120db 	.word	0x080120db
 80024a8:	080120f2 	.word	0x080120f2
 80024ac:	08012109 	.word	0x08012109
 80024b0:	0801211f 	.word	0x0801211f
 80024b4:	08012135 	.word	0x08012135
 80024b8:	0801214b 	.word	0x0801214b
 80024bc:	08012161 	.word	0x08012161
 80024c0:	08012177 	.word	0x08012177
 80024c4:	0801218d 	.word	0x0801218d
 80024c8:	080121a3 	.word	0x080121a3

080024cc <HAL_Init>:
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024cc:	4a09      	ldr	r2, [pc, #36]	; (80024f4 <HAL_Init+0x28>)
 80024ce:	6813      	ldr	r3, [r2, #0]
 80024d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 80024d4:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024d6:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024d8:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024da:	f000 fb83 	bl	8002be4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024de:	2000      	movs	r0, #0
 80024e0:	f7ff fdf0 	bl	80020c4 <HAL_InitTick>
 80024e4:	4604      	mov	r4, r0
 80024e6:	b918      	cbnz	r0, 80024f0 <HAL_Init+0x24>
    status = HAL_ERROR;
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80024e8:	f7ff fc3e 	bl	8001d68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 80024ec:	4620      	mov	r0, r4
 80024ee:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80024f0:	2401      	movs	r4, #1
 80024f2:	e7fb      	b.n	80024ec <HAL_Init+0x20>
 80024f4:	40022000 	.word	0x40022000

080024f8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80024f8:	4a03      	ldr	r2, [pc, #12]	; (8002508 <HAL_IncTick+0x10>)
 80024fa:	4904      	ldr	r1, [pc, #16]	; (800250c <HAL_IncTick+0x14>)
 80024fc:	6813      	ldr	r3, [r2, #0]
 80024fe:	6809      	ldr	r1, [r1, #0]
 8002500:	440b      	add	r3, r1
 8002502:	6013      	str	r3, [r2, #0]
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	2000c8c0 	.word	0x2000c8c0
 800250c:	20000004 	.word	0x20000004

08002510 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002510:	4b01      	ldr	r3, [pc, #4]	; (8002518 <HAL_GetTick+0x8>)
 8002512:	6818      	ldr	r0, [r3, #0]
}
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	2000c8c0 	.word	0x2000c8c0

0800251c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800251c:	b538      	push	{r3, r4, r5, lr}
 800251e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002520:	f7ff fff6 	bl	8002510 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002524:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002526:	bf1c      	itt	ne
 8002528:	4b05      	ldrne	r3, [pc, #20]	; (8002540 <HAL_Delay+0x24>)
 800252a:	681b      	ldrne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 800252c:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800252e:	bf18      	it	ne
 8002530:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002532:	f7ff ffed 	bl	8002510 <HAL_GetTick>
 8002536:	1b40      	subs	r0, r0, r5
 8002538:	4284      	cmp	r4, r0
 800253a:	d8fa      	bhi.n	8002532 <HAL_Delay+0x16>
  {
  }
}
 800253c:	bd38      	pop	{r3, r4, r5, pc}
 800253e:	bf00      	nop
 8002540:	20000004 	.word	0x20000004

08002544 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002544:	b530      	push	{r4, r5, lr}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002546:	0dcc      	lsrs	r4, r1, #23
 8002548:	f004 0404 	and.w	r4, r4, #4
 800254c:	3014      	adds	r0, #20

  MODIFY_REG(*preg,
 800254e:	f3c1 5104 	ubfx	r1, r1, #20, #5
 8002552:	5823      	ldr	r3, [r4, r0]
 8002554:	2507      	movs	r5, #7
 8002556:	408d      	lsls	r5, r1
 8002558:	ea23 0305 	bic.w	r3, r3, r5
 800255c:	fa02 f101 	lsl.w	r1, r2, r1
 8002560:	4319      	orrs	r1, r3
 8002562:	5021      	str	r1, [r4, r0]
 8002564:	bd30      	pop	{r4, r5, pc}

08002566 <LL_ADC_IsEnabled>:
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002566:	6880      	ldr	r0, [r0, #8]
}
 8002568:	f000 0001 	and.w	r0, r0, #1
 800256c:	4770      	bx	lr

0800256e <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800256e:	6880      	ldr	r0, [r0, #8]
}
 8002570:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8002574:	4770      	bx	lr
	...

08002578 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002578:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800257a:	2300      	movs	r3, #0
 800257c:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800257e:	4604      	mov	r4, r0
 8002580:	2800      	cmp	r0, #0
 8002582:	f000 8085 	beq.w	8002690 <HAL_ADC_Init+0x118>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002586:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8002588:	b925      	cbnz	r5, 8002594 <HAL_ADC_Init+0x1c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800258a:	f7ff fc05 	bl	8001d98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800258e:	65a5      	str	r5, [r4, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002590:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002594:	6820      	ldr	r0, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002596:	6883      	ldr	r3, [r0, #8]
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	d47b      	bmi.n	8002694 <HAL_ADC_Init+0x11c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800259c:	6883      	ldr	r3, [r0, #8]
 800259e:	00dd      	lsls	r5, r3, #3
 80025a0:	d57f      	bpl.n	80026a2 <HAL_ADC_Init+0x12a>
 80025a2:	6883      	ldr	r3, [r0, #8]
 80025a4:	00d9      	lsls	r1, r3, #3
 80025a6:	f140 808a 	bpl.w	80026be <HAL_ADC_Init+0x146>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025aa:	2100      	movs	r1, #0

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025ac:	f7ff ffdf 	bl	800256e <LL_ADC_REG_IsConversionOngoing>

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025b0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80025b2:	f013 0f10 	tst.w	r3, #16
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025b6:	6d63      	ldr	r3, [r4, #84]	; 0x54
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025b8:	d167      	bne.n	800268a <HAL_ADC_Init+0x112>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80025ba:	2800      	cmp	r0, #0
 80025bc:	d165      	bne.n	800268a <HAL_ADC_Init+0x112>
    ADC_STATE_CLR_SET(hadc->State,
 80025be:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80025c2:	f043 0302 	orr.w	r3, r3, #2
 80025c6:	6563      	str	r3, [r4, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025c8:	6820      	ldr	r0, [r4, #0]
 80025ca:	f7ff ffcc 	bl	8002566 <LL_ADC_IsEnabled>
 80025ce:	b998      	cbnz	r0, 80025f8 <HAL_ADC_Init+0x80>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025d0:	4852      	ldr	r0, [pc, #328]	; (800271c <HAL_ADC_Init+0x1a4>)
 80025d2:	f7ff ffc8 	bl	8002566 <LL_ADC_IsEnabled>
 80025d6:	4603      	mov	r3, r0
 80025d8:	4851      	ldr	r0, [pc, #324]	; (8002720 <HAL_ADC_Init+0x1a8>)
 80025da:	f7ff ffc4 	bl	8002566 <LL_ADC_IsEnabled>
 80025de:	4303      	orrs	r3, r0
 80025e0:	4850      	ldr	r0, [pc, #320]	; (8002724 <HAL_ADC_Init+0x1ac>)
 80025e2:	f7ff ffc0 	bl	8002566 <LL_ADC_IsEnabled>
 80025e6:	4303      	orrs	r3, r0
 80025e8:	d106      	bne.n	80025f8 <HAL_ADC_Init+0x80>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80025ea:	4a4f      	ldr	r2, [pc, #316]	; (8002728 <HAL_ADC_Init+0x1b0>)
 80025ec:	6860      	ldr	r0, [r4, #4]
 80025ee:	6893      	ldr	r3, [r2, #8]
 80025f0:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80025f4:	4303      	orrs	r3, r0
 80025f6:	6093      	str	r3, [r2, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 80025f8:	68e0      	ldr	r0, [r4, #12]
 80025fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80025fc:	f894 2020 	ldrb.w	r2, [r4, #32]
                hadc->Init.DataAlign                                                   |
 8002600:	4303      	orrs	r3, r0
 8002602:	68a0      	ldr	r0, [r4, #8]
 8002604:	4303      	orrs	r3, r0
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002606:	7e60      	ldrb	r0, [r4, #25]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002608:	2a01      	cmp	r2, #1
                hadc->Init.DataAlign                                                   |
 800260a:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800260e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002612:	bf02      	ittt	eq
 8002614:	6a62      	ldreq	r2, [r4, #36]	; 0x24
 8002616:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
 800261a:	ea43 4342 	orreq.w	r3, r3, r2, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800261e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002620:	b122      	cbz	r2, 800262c <HAL_ADC_Init+0xb4>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8002622:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002624:	f402 7270 	and.w	r2, r2, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002628:	4302      	orrs	r2, r0
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800262a:	4313      	orrs	r3, r2
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800262c:	6820      	ldr	r0, [r4, #0]
 800262e:	4a3f      	ldr	r2, [pc, #252]	; (800272c <HAL_ADC_Init+0x1b4>)
 8002630:	68c5      	ldr	r5, [r0, #12]
 8002632:	402a      	ands	r2, r5
 8002634:	4313      	orrs	r3, r2
 8002636:	60c3      	str	r3, [r0, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002638:	f7ff ff99 	bl	800256e <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800263c:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	0712      	lsls	r2, r2, #28
 8002642:	d546      	bpl.n	80026d2 <HAL_ADC_Init+0x15a>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002644:	6922      	ldr	r2, [r4, #16]
 8002646:	2a01      	cmp	r2, #1
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002648:	bf05      	ittet	eq
 800264a:	6b18      	ldreq	r0, [r3, #48]	; 0x30
 800264c:	69e2      	ldreq	r2, [r4, #28]
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800264e:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002650:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
 8002654:	bf06      	itte	eq
 8002656:	f020 000f 	biceq.w	r0, r0, #15
 800265a:	4302      	orreq	r2, r0
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800265c:	f022 020f 	bicne.w	r2, r2, #15
 8002660:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002662:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002664:	f023 0303 	bic.w	r3, r3, #3
 8002668:	f043 0301 	orr.w	r3, r3, #1
 800266c:	6563      	str	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 800266e:	4608      	mov	r0, r1
 8002670:	b003      	add	sp, #12
 8002672:	bd30      	pop	{r4, r5, pc}
      wait_loop_index--;
 8002674:	9b01      	ldr	r3, [sp, #4]
 8002676:	3b01      	subs	r3, #1
 8002678:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800267a:	9b01      	ldr	r3, [sp, #4]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1f9      	bne.n	8002674 <HAL_ADC_Init+0xfc>
 8002680:	e78f      	b.n	80025a2 <HAL_ADC_Init+0x2a>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002682:	691a      	ldr	r2, [r3, #16]
 8002684:	f022 0201 	bic.w	r2, r2, #1
 8002688:	e045      	b.n	8002716 <HAL_ADC_Init+0x19e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800268a:	f043 0310 	orr.w	r3, r3, #16
 800268e:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 8002690:	2101      	movs	r1, #1
 8002692:	e7ec      	b.n	800266e <HAL_ADC_Init+0xf6>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002694:	6883      	ldr	r3, [r0, #8]
 8002696:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800269a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800269e:	6083      	str	r3, [r0, #8]
 80026a0:	e77c      	b.n	800259c <HAL_ADC_Init+0x24>
  MODIFY_REG(ADCx->CR,
 80026a2:	6883      	ldr	r3, [r0, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80026a4:	4a22      	ldr	r2, [pc, #136]	; (8002730 <HAL_ADC_Init+0x1b8>)
 80026a6:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80026aa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026b2:	6083      	str	r3, [r0, #8]
 80026b4:	4b1f      	ldr	r3, [pc, #124]	; (8002734 <HAL_ADC_Init+0x1bc>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80026bc:	e7dc      	b.n	8002678 <HAL_ADC_Init+0x100>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026be:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80026c0:	f043 0310 	orr.w	r3, r3, #16
 80026c4:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80026c8:	f043 0301 	orr.w	r3, r3, #1
 80026cc:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 80026ce:	2101      	movs	r1, #1
 80026d0:	e76c      	b.n	80025ac <HAL_ADC_Init+0x34>
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026d2:	2800      	cmp	r0, #0
 80026d4:	d1b6      	bne.n	8002644 <HAL_ADC_Init+0xcc>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80026d6:	68d8      	ldr	r0, [r3, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80026d8:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80026dc:	7e25      	ldrb	r5, [r4, #24]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80026de:	0052      	lsls	r2, r2, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80026e0:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80026e4:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80026e8:	f020 0002 	bic.w	r0, r0, #2
 80026ec:	4302      	orrs	r2, r0
 80026ee:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 80026f0:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 80026f4:	2a01      	cmp	r2, #1
 80026f6:	d1c4      	bne.n	8002682 <HAL_ADC_Init+0x10a>
        MODIFY_REG(hadc->Instance->CFGR2,
 80026f8:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80026fa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80026fc:	6918      	ldr	r0, [r3, #16]
 80026fe:	432a      	orrs	r2, r5
 8002700:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8002702:	f042 0201 	orr.w	r2, r2, #1
 8002706:	432a      	orrs	r2, r5
 8002708:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 800270a:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 800270e:	432a      	orrs	r2, r5
 8002710:	f020 0004 	bic.w	r0, r0, #4
 8002714:	4302      	orrs	r2, r0
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002716:	611a      	str	r2, [r3, #16]
 8002718:	e794      	b.n	8002644 <HAL_ADC_Init+0xcc>
 800271a:	bf00      	nop
 800271c:	50040000 	.word	0x50040000
 8002720:	50040100 	.word	0x50040100
 8002724:	50040200 	.word	0x50040200
 8002728:	50040300 	.word	0x50040300
 800272c:	fff0c007 	.word	0xfff0c007
 8002730:	00030d40 	.word	0x00030d40
 8002734:	20000000 	.word	0x20000000

08002738 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002738:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800273a:	2300      	movs	r3, #0
 800273c:	9301      	str	r3, [sp, #4]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800273e:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8002742:	2b01      	cmp	r3, #1
{
 8002744:	4605      	mov	r5, r0
 8002746:	460c      	mov	r4, r1
  __HAL_LOCK(hadc);
 8002748:	f000 8184 	beq.w	8002a54 <HAL_ADC_ConfigChannel+0x31c>
 800274c:	2301      	movs	r3, #1
 800274e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002752:	6800      	ldr	r0, [r0, #0]
 8002754:	f7ff ff0b 	bl	800256e <LL_ADC_REG_IsConversionOngoing>
 8002758:	2800      	cmp	r0, #0
 800275a:	f040 8175 	bne.w	8002a48 <HAL_ADC_ConfigChannel+0x310>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800275e:	684b      	ldr	r3, [r1, #4]
 8002760:	2b05      	cmp	r3, #5
 8002762:	d808      	bhi.n	8002776 <HAL_ADC_ConfigChannel+0x3e>
    {
      switch (sConfig->Rank)
 8002764:	3b02      	subs	r3, #2
 8002766:	2b03      	cmp	r3, #3
 8002768:	d866      	bhi.n	8002838 <HAL_ADC_ConfigChannel+0x100>
 800276a:	e8df f003 	tbb	[pc, r3]
 800276e:	5e02      	.short	0x5e02
 8002770:	6260      	.short	0x6260
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8002772:	230c      	movs	r3, #12
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8002774:	6063      	str	r3, [r4, #4]
      }
    }
    #endif
    
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002776:	6862      	ldr	r2, [r4, #4]
 8002778:	6828      	ldr	r0, [r5, #0]
  MODIFY_REG(*preg,
 800277a:	6823      	ldr	r3, [r4, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800277c:	0991      	lsrs	r1, r2, #6
 800277e:	f001 010c 	and.w	r1, r1, #12
 8002782:	f100 0730 	add.w	r7, r0, #48	; 0x30
  MODIFY_REG(*preg,
 8002786:	f002 021f 	and.w	r2, r2, #31
 800278a:	59ce      	ldr	r6, [r1, r7]
 800278c:	f04f 0e1f 	mov.w	lr, #31
 8002790:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8002794:	4093      	lsls	r3, r2
 8002796:	fa0e f202 	lsl.w	r2, lr, r2
 800279a:	ea26 0202 	bic.w	r2, r6, r2
 800279e:	4313      	orrs	r3, r2
 80027a0:	51cb      	str	r3, [r1, r7]
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027a2:	f7ff fee4 	bl	800256e <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027a6:	682b      	ldr	r3, [r5, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80027a8:	689a      	ldr	r2, [r3, #8]
 80027aa:	0711      	lsls	r1, r2, #28
 80027ac:	f140 8154 	bpl.w	8002a58 <HAL_ADC_ConfigChannel+0x320>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027b0:	6828      	ldr	r0, [r5, #0]
 80027b2:	f7ff fed8 	bl	8002566 <LL_ADC_IsEnabled>
 80027b6:	2800      	cmp	r0, #0
 80027b8:	f040 80d3 	bne.w	8002962 <HAL_ADC_ConfigChannel+0x22a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80027bc:	68e6      	ldr	r6, [r4, #12]
 80027be:	6828      	ldr	r0, [r5, #0]
 80027c0:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(ADCx->DIFSEL,
 80027c2:	4aba      	ldr	r2, [pc, #744]	; (8002aac <HAL_ADC_ConfigChannel+0x374>)
 80027c4:	f8d0 10b0 	ldr.w	r1, [r0, #176]	; 0xb0
 80027c8:	f006 0e18 	and.w	lr, r6, #24
 80027cc:	f3c3 0712 	ubfx	r7, r3, #0, #19
 80027d0:	fa22 f20e 	lsr.w	r2, r2, lr
 80027d4:	401a      	ands	r2, r3
 80027d6:	ea21 0107 	bic.w	r1, r1, r7
 80027da:	430a      	orrs	r2, r1
 80027dc:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80027e0:	4ab3      	ldr	r2, [pc, #716]	; (8002ab0 <HAL_ADC_ConfigChannel+0x378>)
 80027e2:	4296      	cmp	r6, r2
 80027e4:	f040 80bd 	bne.w	8002962 <HAL_ADC_ConfigChannel+0x22a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027e8:	2f00      	cmp	r7, #0
 80027ea:	f040 808f 	bne.w	800290c <HAL_ADC_ConfigChannel+0x1d4>
 80027ee:	0e9e      	lsrs	r6, r3, #26
 80027f0:	3601      	adds	r6, #1
 80027f2:	f006 021f 	and.w	r2, r6, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027f6:	2a09      	cmp	r2, #9
 80027f8:	f04f 0101 	mov.w	r1, #1
 80027fc:	ea4f 6686 	mov.w	r6, r6, lsl #26
 8002800:	f240 809e 	bls.w	8002940 <HAL_ADC_ConfigChannel+0x208>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002804:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8002808:	4091      	lsls	r1, r2
 800280a:	ea41 0206 	orr.w	r2, r1, r6
 800280e:	2f00      	cmp	r7, #0
 8002810:	f040 80c7 	bne.w	80029a2 <HAL_ADC_ConfigChannel+0x26a>
 8002814:	0e9b      	lsrs	r3, r3, #26
 8002816:	3301      	adds	r3, #1
 8002818:	f003 031f 	and.w	r3, r3, #31
 800281c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8002820:	391e      	subs	r1, #30
 8002822:	0509      	lsls	r1, r1, #20
 8002824:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8002828:	e097      	b.n	800295a <HAL_ADC_ConfigChannel+0x222>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 800282a:	2312      	movs	r3, #18
 800282c:	e7a2      	b.n	8002774 <HAL_ADC_ConfigChannel+0x3c>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 800282e:	2318      	movs	r3, #24
 8002830:	e7a0      	b.n	8002774 <HAL_ADC_ConfigChannel+0x3c>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8002832:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002836:	e79d      	b.n	8002774 <HAL_ADC_ConfigChannel+0x3c>
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8002838:	2306      	movs	r3, #6
 800283a:	e79b      	b.n	8002774 <HAL_ADC_ConfigChannel+0x3c>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800283c:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800283e:	6e19      	ldr	r1, [r3, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002840:	f3c2 0612 	ubfx	r6, r2, #0, #19
 8002844:	f3c1 6184 	ubfx	r1, r1, #26, #5
 8002848:	2e00      	cmp	r6, #0
 800284a:	d13e      	bne.n	80028ca <HAL_ADC_ConfigChannel+0x192>
 800284c:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8002850:	428a      	cmp	r2, r1
  MODIFY_REG(*preg,
 8002852:	bf02      	ittt	eq
 8002854:	6e1a      	ldreq	r2, [r3, #96]	; 0x60
 8002856:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 800285a:	661a      	streq	r2, [r3, #96]	; 0x60
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800285c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800285e:	6822      	ldr	r2, [r4, #0]
 8002860:	6e5e      	ldr	r6, [r3, #100]	; 0x64
 8002862:	f3c2 0712 	ubfx	r7, r2, #0, #19
 8002866:	f3c6 6684 	ubfx	r6, r6, #26, #5
 800286a:	f100 010c 	add.w	r1, r0, #12
 800286e:	bb8f      	cbnz	r7, 80028d4 <HAL_ADC_ConfigChannel+0x19c>
 8002870:	f3c2 6784 	ubfx	r7, r2, #26, #5
 8002874:	42be      	cmp	r6, r7
 8002876:	f040 8112 	bne.w	8002a9e <HAL_ADC_ConfigChannel+0x366>
  MODIFY_REG(*preg,
 800287a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800287c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002880:	665a      	str	r2, [r3, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002882:	6822      	ldr	r2, [r4, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002884:	6883      	ldr	r3, [r0, #8]
 8002886:	6883      	ldr	r3, [r0, #8]
 8002888:	f3c2 0712 	ubfx	r7, r2, #0, #19
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800288c:	f100 0608 	add.w	r6, r0, #8
 8002890:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8002894:	bb57      	cbnz	r7, 80028ec <HAL_ADC_ConfigChannel+0x1b4>
 8002896:	f3c2 6284 	ubfx	r2, r2, #26, #5
 800289a:	4293      	cmp	r3, r2
 800289c:	f040 811c 	bne.w	8002ad8 <HAL_ADC_ConfigChannel+0x3a0>
  MODIFY_REG(*preg,
 80028a0:	6833      	ldr	r3, [r6, #0]
 80028a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028a6:	6033      	str	r3, [r6, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80028a8:	68c3      	ldr	r3, [r0, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028aa:	6823      	ldr	r3, [r4, #0]
 80028ac:	68c2      	ldr	r2, [r0, #12]
 80028ae:	f3c3 0012 	ubfx	r0, r3, #0, #19
 80028b2:	f3c2 6284 	ubfx	r2, r2, #26, #5
 80028b6:	bb20      	cbnz	r0, 8002902 <HAL_ADC_ConfigChannel+0x1ca>
 80028b8:	f3c3 6384 	ubfx	r3, r3, #26, #5
 80028bc:	4293      	cmp	r3, r2
  MODIFY_REG(*preg,
 80028be:	bf02      	ittt	eq
 80028c0:	680b      	ldreq	r3, [r1, #0]
 80028c2:	f023 4300 	biceq.w	r3, r3, #2147483648	; 0x80000000
 80028c6:	600b      	streq	r3, [r1, #0]
 80028c8:	e772      	b.n	80027b0 <HAL_ADC_ConfigChannel+0x78>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ca:	fa92 f2a2 	rbit	r2, r2
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028ce:	fab2 f282 	clz	r2, r2
 80028d2:	e7bd      	b.n	8002850 <HAL_ADC_ConfigChannel+0x118>
 80028d4:	fa92 f7a2 	rbit	r7, r2
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028d8:	fab7 f787 	clz	r7, r7
 80028dc:	42be      	cmp	r6, r7
 80028de:	d0cc      	beq.n	800287a <HAL_ADC_ConfigChannel+0x142>
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028e0:	f103 0668 	add.w	r6, r3, #104	; 0x68
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80028e4:	6e9f      	ldr	r7, [r3, #104]	; 0x68
 80028e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028e8:	f3c3 6384 	ubfx	r3, r3, #26, #5
 80028ec:	fa92 f2a2 	rbit	r2, r2
 80028f0:	fab2 f282 	clz	r2, r2
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d0d3      	beq.n	80028a0 <HAL_ADC_ConfigChannel+0x168>
 80028f8:	68c3      	ldr	r3, [r0, #12]
 80028fa:	68c2      	ldr	r2, [r0, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028fc:	6823      	ldr	r3, [r4, #0]
 80028fe:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8002902:	fa93 f3a3 	rbit	r3, r3
 8002906:	fab3 f383 	clz	r3, r3
 800290a:	e7d7      	b.n	80028bc <HAL_ADC_ConfigChannel+0x184>
 800290c:	fa93 f2a3 	rbit	r2, r3
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002910:	fab2 f282 	clz	r2, r2
 8002914:	3201      	adds	r2, #1
 8002916:	f002 021f 	and.w	r2, r2, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800291a:	2a09      	cmp	r2, #9
 800291c:	d830      	bhi.n	8002980 <HAL_ADC_ConfigChannel+0x248>
 800291e:	fa93 f6a3 	rbit	r6, r3
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002922:	fab6 f686 	clz	r6, r6
 8002926:	3601      	adds	r6, #1
 8002928:	06b6      	lsls	r6, r6, #26
 800292a:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 800292e:	fa93 f1a3 	rbit	r1, r3
 8002932:	fab1 f181 	clz	r1, r1
 8002936:	3101      	adds	r1, #1
 8002938:	f001 021f 	and.w	r2, r1, #31
 800293c:	2101      	movs	r1, #1
 800293e:	e001      	b.n	8002944 <HAL_ADC_ConfigChannel+0x20c>
 8002940:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8002944:	4091      	lsls	r1, r2
 8002946:	ea41 0206 	orr.w	r2, r1, r6
 800294a:	b9a7      	cbnz	r7, 8002976 <HAL_ADC_ConfigChannel+0x23e>
 800294c:	0e99      	lsrs	r1, r3, #26
 800294e:	3101      	adds	r1, #1
 8002950:	f001 011f 	and.w	r1, r1, #31
 8002954:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8002958:	0509      	lsls	r1, r1, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800295a:	4311      	orrs	r1, r2
 800295c:	68a2      	ldr	r2, [r4, #8]
 800295e:	f7ff fdf1 	bl	8002544 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002962:	6822      	ldr	r2, [r4, #0]
 8002964:	4b53      	ldr	r3, [pc, #332]	; (8002ab4 <HAL_ADC_ConfigChannel+0x37c>)
 8002966:	421a      	tst	r2, r3
 8002968:	d120      	bne.n	80029ac <HAL_ADC_ConfigChannel+0x274>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800296a:	2000      	movs	r0, #0

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800296c:	2300      	movs	r3, #0
 800296e:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8002972:	b003      	add	sp, #12
 8002974:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002976:	fa93 f1a3 	rbit	r1, r3
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800297a:	fab1 f181 	clz	r1, r1
 800297e:	e7e6      	b.n	800294e <HAL_ADC_ConfigChannel+0x216>
 8002980:	fa93 f2a3 	rbit	r2, r3
 8002984:	fab2 f282 	clz	r2, r2
 8002988:	3201      	adds	r2, #1
 800298a:	0692      	lsls	r2, r2, #26
 800298c:	f002 46f8 	and.w	r6, r2, #2080374784	; 0x7c000000
 8002990:	fa93 f1a3 	rbit	r1, r3
 8002994:	fab1 f181 	clz	r1, r1
 8002998:	3101      	adds	r1, #1
 800299a:	f001 021f 	and.w	r2, r1, #31
 800299e:	2101      	movs	r1, #1
 80029a0:	e732      	b.n	8002808 <HAL_ADC_ConfigChannel+0xd0>
 80029a2:	fa93 f3a3 	rbit	r3, r3
 80029a6:	fab3 f383 	clz	r3, r3
 80029aa:	e734      	b.n	8002816 <HAL_ADC_ConfigChannel+0xde>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80029ac:	4942      	ldr	r1, [pc, #264]	; (8002ab8 <HAL_ADC_ConfigChannel+0x380>)
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80029ae:	4b43      	ldr	r3, [pc, #268]	; (8002abc <HAL_ADC_ConfigChannel+0x384>)
 80029b0:	6888      	ldr	r0, [r1, #8]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 80029b8:	460c      	mov	r4, r1
 80029ba:	d11e      	bne.n	80029fa <HAL_ADC_ConfigChannel+0x2c2>
 80029bc:	0202      	lsls	r2, r0, #8
 80029be:	d4d4      	bmi.n	800296a <HAL_ADC_ConfigChannel+0x232>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029c0:	682b      	ldr	r3, [r5, #0]
 80029c2:	4a3f      	ldr	r2, [pc, #252]	; (8002ac0 <HAL_ADC_ConfigChannel+0x388>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d003      	beq.n	80029d0 <HAL_ADC_ConfigChannel+0x298>
 80029c8:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d1cc      	bne.n	800296a <HAL_ADC_ConfigChannel+0x232>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80029d0:	68a3      	ldr	r3, [r4, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80029d2:	4a3c      	ldr	r2, [pc, #240]	; (8002ac4 <HAL_ADC_ConfigChannel+0x38c>)
 80029d4:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 80029d8:	4333      	orrs	r3, r6
 80029da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029de:	60a3      	str	r3, [r4, #8]
 80029e0:	4b39      	ldr	r3, [pc, #228]	; (8002ac8 <HAL_ADC_ConfigChannel+0x390>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	fbb3 f2f2 	udiv	r2, r3, r2
 80029e8:	230c      	movs	r3, #12
 80029ea:	4353      	muls	r3, r2
            wait_loop_index--;
 80029ec:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 80029ee:	9b01      	ldr	r3, [sp, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d0ba      	beq.n	800296a <HAL_ADC_ConfigChannel+0x232>
            wait_loop_index--;
 80029f4:	9b01      	ldr	r3, [sp, #4]
 80029f6:	3b01      	subs	r3, #1
 80029f8:	e7f8      	b.n	80029ec <HAL_ADC_ConfigChannel+0x2b4>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80029fa:	4b34      	ldr	r3, [pc, #208]	; (8002acc <HAL_ADC_ConfigChannel+0x394>)
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d111      	bne.n	8002a24 <HAL_ADC_ConfigChannel+0x2ec>
 8002a00:	01c3      	lsls	r3, r0, #7
 8002a02:	d4b2      	bmi.n	800296a <HAL_ADC_ConfigChannel+0x232>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a04:	682b      	ldr	r3, [r5, #0]
 8002a06:	4a2e      	ldr	r2, [pc, #184]	; (8002ac0 <HAL_ADC_ConfigChannel+0x388>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d003      	beq.n	8002a14 <HAL_ADC_ConfigChannel+0x2dc>
 8002a0c:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d1aa      	bne.n	800296a <HAL_ADC_ConfigChannel+0x232>
 8002a14:	68a3      	ldr	r3, [r4, #8]
 8002a16:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8002a1a:	4333      	orrs	r3, r6
 8002a1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a20:	60a3      	str	r3, [r4, #8]
 8002a22:	e7a2      	b.n	800296a <HAL_ADC_ConfigChannel+0x232>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a24:	4b2a      	ldr	r3, [pc, #168]	; (8002ad0 <HAL_ADC_ConfigChannel+0x398>)
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d19f      	bne.n	800296a <HAL_ADC_ConfigChannel+0x232>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a2a:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8002a2e:	d19c      	bne.n	800296a <HAL_ADC_ConfigChannel+0x232>
        if (ADC_VREFINT_INSTANCE(hadc))
 8002a30:	682a      	ldr	r2, [r5, #0]
 8002a32:	4b23      	ldr	r3, [pc, #140]	; (8002ac0 <HAL_ADC_ConfigChannel+0x388>)
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d198      	bne.n	800296a <HAL_ADC_ConfigChannel+0x232>
 8002a38:	688b      	ldr	r3, [r1, #8]
 8002a3a:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8002a3e:	4333      	orrs	r3, r6
 8002a40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a44:	608b      	str	r3, [r1, #8]
 8002a46:	e791      	b.n	800296c <HAL_ADC_ConfigChannel+0x234>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a48:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 8002a4a:	f042 0220 	orr.w	r2, r2, #32
 8002a4e:	656a      	str	r2, [r5, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8002a50:	4618      	mov	r0, r3
 8002a52:	e78b      	b.n	800296c <HAL_ADC_ConfigChannel+0x234>
  __HAL_LOCK(hadc);
 8002a54:	2002      	movs	r0, #2
 8002a56:	e78c      	b.n	8002972 <HAL_ADC_ConfigChannel+0x23a>
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a58:	2800      	cmp	r0, #0
 8002a5a:	f47f aea9 	bne.w	80027b0 <HAL_ADC_ConfigChannel+0x78>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002a5e:	4618      	mov	r0, r3
 8002a60:	68a2      	ldr	r2, [r4, #8]
 8002a62:	6821      	ldr	r1, [r4, #0]
 8002a64:	f7ff fd6e 	bl	8002544 <LL_ADC_SetChannelSamplingTime>
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a68:	6926      	ldr	r6, [r4, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002a6a:	682b      	ldr	r3, [r5, #0]
 8002a6c:	6822      	ldr	r2, [r4, #0]
 8002a6e:	68d9      	ldr	r1, [r3, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a70:	2e04      	cmp	r6, #4
 8002a72:	f103 0060 	add.w	r0, r3, #96	; 0x60
 8002a76:	f43f aee1 	beq.w	800283c <HAL_ADC_ConfigChannel+0x104>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002a7a:	f3c1 03c1 	ubfx	r3, r1, #3, #2
 8002a7e:	0059      	lsls	r1, r3, #1
 8002a80:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(*preg,
 8002a82:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 8002a86:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8002a8a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a8e:	408b      	lsls	r3, r1
 8002a90:	4313      	orrs	r3, r2
 8002a92:	4a10      	ldr	r2, [pc, #64]	; (8002ad4 <HAL_ADC_ConfigChannel+0x39c>)
 8002a94:	403a      	ands	r2, r7
 8002a96:	4313      	orrs	r3, r2
 8002a98:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
 8002a9c:	e688      	b.n	80027b0 <HAL_ADC_ConfigChannel+0x78>
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a9e:	f103 0668 	add.w	r6, r3, #104	; 0x68
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002aa2:	6e9f      	ldr	r7, [r3, #104]	; 0x68
 8002aa4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002aa6:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8002aaa:	e6f4      	b.n	8002896 <HAL_ADC_ConfigChannel+0x15e>
 8002aac:	0007ffff 	.word	0x0007ffff
 8002ab0:	407f0000 	.word	0x407f0000
 8002ab4:	80080000 	.word	0x80080000
 8002ab8:	50040300 	.word	0x50040300
 8002abc:	c7520000 	.word	0xc7520000
 8002ac0:	50040000 	.word	0x50040000
 8002ac4:	00030d40 	.word	0x00030d40
 8002ac8:	20000000 	.word	0x20000000
 8002acc:	cb840000 	.word	0xcb840000
 8002ad0:	80000001 	.word	0x80000001
 8002ad4:	03fff000 	.word	0x03fff000
 8002ad8:	68c3      	ldr	r3, [r0, #12]
 8002ada:	68c2      	ldr	r2, [r0, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002adc:	6823      	ldr	r3, [r4, #0]
 8002ade:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8002ae2:	e6e9      	b.n	80028b8 <HAL_ADC_ConfigChannel+0x180>

08002ae4 <LL_ADC_IsEnabled>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ae4:	6880      	ldr	r0, [r0, #8]
}
 8002ae6:	f000 0001 	and.w	r0, r0, #1
 8002aea:	4770      	bx	lr

08002aec <LL_ADC_REG_IsConversionOngoing>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002aec:	6880      	ldr	r0, [r0, #8]
}
 8002aee:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8002af2:	4770      	bx	lr

08002af4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002af4:	b530      	push	{r4, r5, lr}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002af6:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8002afa:	2b01      	cmp	r3, #1
{
 8002afc:	b09b      	sub	sp, #108	; 0x6c
 8002afe:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 8002b00:	d066      	beq.n	8002bd0 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
 8002b02:	2301      	movs	r3, #1
 8002b04:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002b08:	4b32      	ldr	r3, [pc, #200]	; (8002bd4 <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
 8002b0a:	6800      	ldr	r0, [r0, #0]
 8002b0c:	4298      	cmp	r0, r3
 8002b0e:	bf0c      	ite	eq
 8002b10:	f503 7380 	addeq.w	r3, r3, #256	; 0x100
 8002b14:	2300      	movne	r3, #0
 8002b16:	9301      	str	r3, [sp, #4]

  if (tmphadcSlave.Instance == NULL)
 8002b18:	9801      	ldr	r0, [sp, #4]
 8002b1a:	b940      	cbnz	r0, 8002b2e <HAL_ADCEx_MultiModeConfigChannel+0x3a>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b1c:	6d53      	ldr	r3, [r2, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b1e:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b22:	f043 0320 	orr.w	r3, r3, #32
 8002b26:	6553      	str	r3, [r2, #84]	; 0x54

    return HAL_ERROR;
 8002b28:	2001      	movs	r0, #1
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8002b2a:	b01b      	add	sp, #108	; 0x6c
 8002b2c:	bd30      	pop	{r4, r5, pc}
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002b2e:	f7ff ffdd 	bl	8002aec <LL_ADC_REG_IsConversionOngoing>
 8002b32:	4603      	mov	r3, r0
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b34:	6810      	ldr	r0, [r2, #0]
 8002b36:	f7ff ffd9 	bl	8002aec <LL_ADC_REG_IsConversionOngoing>
 8002b3a:	2800      	cmp	r0, #0
 8002b3c:	d142      	bne.n	8002bc4 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d140      	bne.n	8002bc4 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b42:	680b      	ldr	r3, [r1, #0]
 8002b44:	4c24      	ldr	r4, [pc, #144]	; (8002bd8 <HAL_ADCEx_MultiModeConfigChannel+0xe4>)
 8002b46:	b333      	cbz	r3, 8002b96 <HAL_ADCEx_MultiModeConfigChannel+0xa2>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002b48:	68a3      	ldr	r3, [r4, #8]
 8002b4a:	6848      	ldr	r0, [r1, #4]
 8002b4c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002b50:	4303      	orrs	r3, r0
 8002b52:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
 8002b56:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
 8002b5a:	60a3      	str	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b5c:	481d      	ldr	r0, [pc, #116]	; (8002bd4 <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
 8002b5e:	f7ff ffc1 	bl	8002ae4 <LL_ADC_IsEnabled>
 8002b62:	4603      	mov	r3, r0
 8002b64:	481d      	ldr	r0, [pc, #116]	; (8002bdc <HAL_ADCEx_MultiModeConfigChannel+0xe8>)
 8002b66:	f7ff ffbd 	bl	8002ae4 <LL_ADC_IsEnabled>
 8002b6a:	4303      	orrs	r3, r0
 8002b6c:	481c      	ldr	r0, [pc, #112]	; (8002be0 <HAL_ADCEx_MultiModeConfigChannel+0xec>)
 8002b6e:	f7ff ffb9 	bl	8002ae4 <LL_ADC_IsEnabled>
 8002b72:	4318      	orrs	r0, r3
 8002b74:	d004      	beq.n	8002b80 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b76:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8002b78:	2300      	movs	r3, #0
 8002b7a:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
  return tmp_hal_status;
 8002b7e:	e7d4      	b.n	8002b2a <HAL_ADCEx_MultiModeConfigChannel+0x36>
        MODIFY_REG(tmpADC_Common->CCR,
 8002b80:	680b      	ldr	r3, [r1, #0]
 8002b82:	68a5      	ldr	r5, [r4, #8]
 8002b84:	6889      	ldr	r1, [r1, #8]
 8002b86:	430b      	orrs	r3, r1
 8002b88:	f425 6171 	bic.w	r1, r5, #3856	; 0xf10
 8002b8c:	f021 010f 	bic.w	r1, r1, #15
 8002b90:	430b      	orrs	r3, r1
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002b92:	60a3      	str	r3, [r4, #8]
 8002b94:	e7f0      	b.n	8002b78 <HAL_ADCEx_MultiModeConfigChannel+0x84>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002b96:	68a3      	ldr	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b98:	480e      	ldr	r0, [pc, #56]	; (8002bd4 <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002b9a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002b9e:	60a3      	str	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ba0:	f7ff ffa0 	bl	8002ae4 <LL_ADC_IsEnabled>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	480d      	ldr	r0, [pc, #52]	; (8002bdc <HAL_ADCEx_MultiModeConfigChannel+0xe8>)
 8002ba8:	f7ff ff9c 	bl	8002ae4 <LL_ADC_IsEnabled>
 8002bac:	4303      	orrs	r3, r0
 8002bae:	480c      	ldr	r0, [pc, #48]	; (8002be0 <HAL_ADCEx_MultiModeConfigChannel+0xec>)
 8002bb0:	f7ff ff98 	bl	8002ae4 <LL_ADC_IsEnabled>
 8002bb4:	4318      	orrs	r0, r3
 8002bb6:	d1de      	bne.n	8002b76 <HAL_ADCEx_MultiModeConfigChannel+0x82>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002bb8:	68a3      	ldr	r3, [r4, #8]
 8002bba:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002bbe:	f023 030f 	bic.w	r3, r3, #15
 8002bc2:	e7e6      	b.n	8002b92 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bc4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002bc6:	f043 0320 	orr.w	r3, r3, #32
 8002bca:	6553      	str	r3, [r2, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8002bcc:	2001      	movs	r0, #1
 8002bce:	e7d3      	b.n	8002b78 <HAL_ADCEx_MultiModeConfigChannel+0x84>
  __HAL_LOCK(hadc);
 8002bd0:	2002      	movs	r0, #2
 8002bd2:	e7aa      	b.n	8002b2a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002bd4:	50040000 	.word	0x50040000
 8002bd8:	50040300 	.word	0x50040300
 8002bdc:	50040100 	.word	0x50040100
 8002be0:	50040200 	.word	0x50040200

08002be4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002be4:	4a07      	ldr	r2, [pc, #28]	; (8002c04 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002be6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002be8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002bec:	041b      	lsls	r3, r3, #16
 8002bee:	0c1b      	lsrs	r3, r3, #16
 8002bf0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bf4:	0200      	lsls	r0, r0, #8
 8002bf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bfa:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8002bfe:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8002c00:	60d3      	str	r3, [r2, #12]
 8002c02:	4770      	bx	lr
 8002c04:	e000ed00 	.word	0xe000ed00

08002c08 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c08:	4b17      	ldr	r3, [pc, #92]	; (8002c68 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c0a:	b530      	push	{r4, r5, lr}
 8002c0c:	68dc      	ldr	r4, [r3, #12]
 8002c0e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c12:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c16:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c18:	2b04      	cmp	r3, #4
 8002c1a:	bf28      	it	cs
 8002c1c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c1e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c20:	f04f 0501 	mov.w	r5, #1
 8002c24:	fa05 f303 	lsl.w	r3, r5, r3
 8002c28:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c2c:	bf8c      	ite	hi
 8002c2e:	3c03      	subhi	r4, #3
 8002c30:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c32:	4019      	ands	r1, r3
 8002c34:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c36:	fa05 f404 	lsl.w	r4, r5, r4
 8002c3a:	3c01      	subs	r4, #1
 8002c3c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8002c3e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c40:	ea42 0201 	orr.w	r2, r2, r1
 8002c44:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c48:	bfad      	iteet	ge
 8002c4a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c4e:	f000 000f 	andlt.w	r0, r0, #15
 8002c52:	4b06      	ldrlt	r3, [pc, #24]	; (8002c6c <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c54:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c58:	bfb5      	itete	lt
 8002c5a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c5c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c5e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c60:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8002c64:	bd30      	pop	{r4, r5, pc}
 8002c66:	bf00      	nop
 8002c68:	e000ed00 	.word	0xe000ed00
 8002c6c:	e000ed14 	.word	0xe000ed14

08002c70 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002c70:	2800      	cmp	r0, #0
 8002c72:	db08      	blt.n	8002c86 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c74:	0942      	lsrs	r2, r0, #5
 8002c76:	2301      	movs	r3, #1
 8002c78:	f000 001f 	and.w	r0, r0, #31
 8002c7c:	fa03 f000 	lsl.w	r0, r3, r0
 8002c80:	4b01      	ldr	r3, [pc, #4]	; (8002c88 <HAL_NVIC_EnableIRQ+0x18>)
 8002c82:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8002c86:	4770      	bx	lr
 8002c88:	e000e100 	.word	0xe000e100

08002c8c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002c8c:	b510      	push	{r4, lr}
  /* Check DAC handle */
  if (hdac == NULL)
 8002c8e:	4604      	mov	r4, r0
 8002c90:	b168      	cbz	r0, 8002cae <HAL_DAC_Init+0x22>
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002c92:	7903      	ldrb	r3, [r0, #4]
 8002c94:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c98:	b913      	cbnz	r3, 8002ca0 <HAL_DAC_Init+0x14>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002c9a:	7142      	strb	r2, [r0, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002c9c:	f7ff f8ac 	bl	8001df8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	7123      	strb	r3, [r4, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002ca4:	2000      	movs	r0, #0

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002ca6:	2301      	movs	r3, #1
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002ca8:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8002caa:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8002cac:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 8002cae:	2001      	movs	r0, #1
}
 8002cb0:	bd10      	pop	{r4, pc}

08002cb2 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002cb2:	4770      	bx	lr

08002cb4 <HAL_DAC_IRQHandler>:
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002cb4:	6803      	ldr	r3, [r0, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	0491      	lsls	r1, r2, #18
{
 8002cba:	b510      	push	{r4, lr}
 8002cbc:	4604      	mov	r4, r0
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002cbe:	d511      	bpl.n	8002ce4 <HAL_DAC_IRQHandler+0x30>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002cc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cc2:	0492      	lsls	r2, r2, #18
 8002cc4:	d50e      	bpl.n	8002ce4 <HAL_DAC_IRQHandler+0x30>
      hdac->State = HAL_DAC_STATE_ERROR;
 8002cc6:	2204      	movs	r2, #4
 8002cc8:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002cca:	6902      	ldr	r2, [r0, #16]
 8002ccc:	f042 0201 	orr.w	r2, r2, #1
 8002cd0:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002cd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cd6:	635a      	str	r2, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002cde:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002ce0:	f7ff ffe7 	bl	8002cb2 <HAL_DAC_DMAUnderrunCallbackCh1>
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002ce4:	6823      	ldr	r3, [r4, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	0091      	lsls	r1, r2, #2
 8002cea:	d514      	bpl.n	8002d16 <HAL_DAC_IRQHandler+0x62>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002cec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cee:	0092      	lsls	r2, r2, #2
 8002cf0:	d511      	bpl.n	8002d16 <HAL_DAC_IRQHandler+0x62>
      hdac->State = HAL_DAC_STATE_ERROR;
 8002cf2:	2204      	movs	r2, #4
 8002cf4:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002cf6:	6922      	ldr	r2, [r4, #16]
 8002cf8:	f042 0202 	orr.w	r2, r2, #2
 8002cfc:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002cfe:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002d02:	635a      	str	r2, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002d0a:	4620      	mov	r0, r4
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002d0c:	601a      	str	r2, [r3, #0]
}
 8002d0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002d12:	f000 b88a 	b.w	8002e2a <HAL_DACEx_DMAUnderrunCallbackCh2>
 8002d16:	bd10      	pop	{r4, pc}

08002d18 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002d1a:	7943      	ldrb	r3, [r0, #5]
 8002d1c:	2b01      	cmp	r3, #1
{
 8002d1e:	4604      	mov	r4, r0
 8002d20:	460d      	mov	r5, r1
 8002d22:	4616      	mov	r6, r2
 8002d24:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hdac);
 8002d28:	d063      	beq.n	8002df2 <HAL_DAC_ConfigChannel+0xda>
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8002d2a:	680b      	ldr	r3, [r1, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d2c:	7120      	strb	r0, [r4, #4]
  __HAL_LOCK(hdac);
 8002d2e:	2201      	movs	r2, #1

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002d30:	2b04      	cmp	r3, #4
  __HAL_LOCK(hdac);
 8002d32:	7162      	strb	r2, [r4, #5]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002d34:	d125      	bne.n	8002d82 <HAL_DAC_ConfigChannel+0x6a>
  /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8002d36:	2e00      	cmp	r6, #0
 8002d38:	d16c      	bne.n	8002e14 <HAL_DAC_ConfigChannel+0xfc>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8002d3a:	f7ff fbe9 	bl	8002510 <HAL_GetTick>
 8002d3e:	4607      	mov	r7, r0

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002d40:	6823      	ldr	r3, [r4, #0]
 8002d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d44:	041b      	lsls	r3, r3, #16
 8002d46:	d455      	bmi.n	8002df4 <HAL_DAC_ConfigChannel+0xdc>
          hdac->State = HAL_DAC_STATE_TIMEOUT;

          return HAL_TIMEOUT;
        }
      }
      HAL_Delay(1);
 8002d48:	2001      	movs	r0, #1
 8002d4a:	f7ff fbe7 	bl	800251c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002d4e:	6823      	ldr	r3, [r4, #0]
 8002d50:	69aa      	ldr	r2, [r5, #24]
 8002d52:	641a      	str	r2, [r3, #64]	; 0x40
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002d54:	6821      	ldr	r1, [r4, #0]
 8002d56:	f006 0010 	and.w	r0, r6, #16
 8002d5a:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8002d5c:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8002d60:	4083      	lsls	r3, r0
 8002d62:	ea22 0203 	bic.w	r2, r2, r3
 8002d66:	69eb      	ldr	r3, [r5, #28]
 8002d68:	4083      	lsls	r3, r0
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	648a      	str	r2, [r1, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002d6e:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8002d70:	22ff      	movs	r2, #255	; 0xff
 8002d72:	4082      	lsls	r2, r0
 8002d74:	ea23 0302 	bic.w	r3, r3, r2
 8002d78:	6a2a      	ldr	r2, [r5, #32]
 8002d7a:	fa02 f000 	lsl.w	r0, r2, r0
 8002d7e:	4303      	orrs	r3, r0
 8002d80:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002d82:	692b      	ldr	r3, [r5, #16]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	f006 0210 	and.w	r2, r6, #16
 8002d8a:	6823      	ldr	r3, [r4, #0]
 8002d8c:	d108      	bne.n	8002da0 <HAL_DAC_ConfigChannel+0x88>
  /* USER TRIMMING */
  {
  /* Get the DAC CCR value */
  tmpreg1 = hdac->Instance->CCR;
 8002d8e:	6b99      	ldr	r1, [r3, #56]	; 0x38
  /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002d90:	201f      	movs	r0, #31
 8002d92:	4090      	lsls	r0, r2
 8002d94:	ea21 0000 	bic.w	r0, r1, r0
  /* Configure for the selected trimming offset */
  tmpreg2 = sConfig->DAC_TrimmingValue;
  /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002d98:	6969      	ldr	r1, [r5, #20]
 8002d9a:	4091      	lsls	r1, r2
 8002d9c:	4301      	orrs	r1, r0
  /* Write to DAC CCR */
  hdac->Instance->CCR = tmpreg1;
 8002d9e:	6399      	str	r1, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002da0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002da2:	68ae      	ldr	r6, [r5, #8]
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002da4:	2007      	movs	r0, #7
 8002da6:	4090      	lsls	r0, r2
 8002da8:	ea21 0000 	bic.w	r0, r1, r0
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002dac:	6829      	ldr	r1, [r5, #0]
 8002dae:	4331      	orrs	r1, r6
 8002db0:	68ee      	ldr	r6, [r5, #12]
 8002db2:	4331      	orrs	r1, r6
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002db4:	4091      	lsls	r1, r2
 8002db6:	4301      	orrs	r1, r0
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002db8:	63d9      	str	r1, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002dba:	6819      	ldr	r1, [r3, #0]
 8002dbc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002dc0:	4090      	lsls	r0, r2
 8002dc2:	ea21 0100 	bic.w	r1, r1, r0
 8002dc6:	6019      	str	r1, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002dc8:	6819      	ldr	r1, [r3, #0]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002dca:	f640 70fc 	movw	r0, #4092	; 0xffc
 8002dce:	4090      	lsls	r0, r2
 8002dd0:	ea21 0000 	bic.w	r0, r1, r0
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002dd4:	6869      	ldr	r1, [r5, #4]
 8002dd6:	4091      	lsls	r1, r2
 8002dd8:	4301      	orrs	r1, r0
  }

#endif /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002dda:	6019      	str	r1, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002ddc:	6819      	ldr	r1, [r3, #0]
 8002dde:	20c0      	movs	r0, #192	; 0xc0
 8002de0:	fa00 f202 	lsl.w	r2, r0, r2
 8002de4:	ea21 0202 	bic.w	r2, r1, r2
 8002de8:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002dea:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_READY;
 8002dec:	2301      	movs	r3, #1
 8002dee:	7123      	strb	r3, [r4, #4]
  __HAL_UNLOCK(hdac);
 8002df0:	7160      	strb	r0, [r4, #5]

  /* Return function status */
  return HAL_OK;
}
 8002df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002df4:	f7ff fb8c 	bl	8002510 <HAL_GetTick>
 8002df8:	1bc0      	subs	r0, r0, r7
 8002dfa:	2801      	cmp	r0, #1
 8002dfc:	d9a0      	bls.n	8002d40 <HAL_DAC_ConfigChannel+0x28>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002dfe:	6923      	ldr	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002e00:	2003      	movs	r0, #3
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002e02:	f043 0308 	orr.w	r3, r3, #8
 8002e06:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002e08:	7120      	strb	r0, [r4, #4]
          return HAL_TIMEOUT;
 8002e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002e0c:	f7ff fb80 	bl	8002510 <HAL_GetTick>
 8002e10:	2801      	cmp	r0, #1
 8002e12:	d8f4      	bhi.n	8002dfe <HAL_DAC_ConfigChannel+0xe6>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002e14:	6823      	ldr	r3, [r4, #0]
 8002e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	dbf7      	blt.n	8002e0c <HAL_DAC_ConfigChannel+0xf4>
      HAL_Delay(1U);
 8002e1c:	2001      	movs	r0, #1
 8002e1e:	f7ff fb7d 	bl	800251c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002e22:	6823      	ldr	r3, [r4, #0]
 8002e24:	69aa      	ldr	r2, [r5, #24]
 8002e26:	645a      	str	r2, [r3, #68]	; 0x44
 8002e28:	e794      	b.n	8002d54 <HAL_DAC_ConfigChannel+0x3c>

08002e2a <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002e2a:	4770      	bx	lr

08002e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e30:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e32:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e34:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002fe0 <HAL_GPIO_Init+0x1b4>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002e38:	4c67      	ldr	r4, [pc, #412]	; (8002fd8 <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e3a:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00u;
 8002e3c:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e3e:	9a01      	ldr	r2, [sp, #4]
 8002e40:	40da      	lsrs	r2, r3
 8002e42:	d102      	bne.n	8002e4a <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 8002e44:	b005      	add	sp, #20
 8002e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e4a:	2601      	movs	r6, #1
    if (iocurrent != 0x00u)
 8002e4c:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e4e:	409e      	lsls	r6, r3
    if (iocurrent != 0x00u)
 8002e50:	ea12 0e06 	ands.w	lr, r2, r6
 8002e54:	f000 80b1 	beq.w	8002fba <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e58:	684a      	ldr	r2, [r1, #4]
 8002e5a:	f022 0710 	bic.w	r7, r2, #16
 8002e5e:	2f02      	cmp	r7, #2
 8002e60:	d116      	bne.n	8002e90 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 8002e62:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8002e66:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e6a:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8002e6e:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e72:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8002e76:	f04f 0c0f 	mov.w	ip, #15
 8002e7a:	fa0c fc0a 	lsl.w	ip, ip, sl
 8002e7e:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e82:	690d      	ldr	r5, [r1, #16]
 8002e84:	fa05 f50a 	lsl.w	r5, r5, sl
 8002e88:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 8002e8c:	f8c9 5020 	str.w	r5, [r9, #32]
 8002e90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e94:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8002e96:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e9a:	fa05 f50c 	lsl.w	r5, r5, ip
 8002e9e:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ea0:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ea4:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ea8:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002eac:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002eae:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002eb2:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8002eb4:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002eb8:	d811      	bhi.n	8002ede <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8002eba:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ebc:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ec0:	68cf      	ldr	r7, [r1, #12]
 8002ec2:	fa07 f70c 	lsl.w	r7, r7, ip
 8002ec6:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8002eca:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002ecc:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ece:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002ed2:	f3c2 1700 	ubfx	r7, r2, #4, #1
 8002ed6:	409f      	lsls	r7, r3
 8002ed8:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 8002edc:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002ede:	f1ba 0f03 	cmp.w	sl, #3
 8002ee2:	d107      	bne.n	8002ef4 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 8002ee4:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002ee6:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002eea:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 8002eee:	409f      	lsls	r7, r3
 8002ef0:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 8002ef2:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8002ef4:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002ef6:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002ef8:	688e      	ldr	r6, [r1, #8]
 8002efa:	fa06 f60c 	lsl.w	r6, r6, ip
 8002efe:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 8002f00:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f02:	00d5      	lsls	r5, r2, #3
 8002f04:	d559      	bpl.n	8002fba <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f06:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8002f0a:	f045 0501 	orr.w	r5, r5, #1
 8002f0e:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 8002f12:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8002f16:	f023 0603 	bic.w	r6, r3, #3
 8002f1a:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8002f1e:	f005 0501 	and.w	r5, r5, #1
 8002f22:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8002f26:	9503      	str	r5, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f28:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f2c:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8002f2e:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f30:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8002f34:	270f      	movs	r7, #15
 8002f36:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f3a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f3e:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f42:	d03c      	beq.n	8002fbe <HAL_GPIO_Init+0x192>
 8002f44:	4d25      	ldr	r5, [pc, #148]	; (8002fdc <HAL_GPIO_Init+0x1b0>)
 8002f46:	42a8      	cmp	r0, r5
 8002f48:	d03b      	beq.n	8002fc2 <HAL_GPIO_Init+0x196>
 8002f4a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002f4e:	42a8      	cmp	r0, r5
 8002f50:	d039      	beq.n	8002fc6 <HAL_GPIO_Init+0x19a>
 8002f52:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002f56:	42a8      	cmp	r0, r5
 8002f58:	d037      	beq.n	8002fca <HAL_GPIO_Init+0x19e>
 8002f5a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002f5e:	42a8      	cmp	r0, r5
 8002f60:	d035      	beq.n	8002fce <HAL_GPIO_Init+0x1a2>
 8002f62:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002f66:	42a8      	cmp	r0, r5
 8002f68:	d033      	beq.n	8002fd2 <HAL_GPIO_Init+0x1a6>
 8002f6a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002f6e:	42a8      	cmp	r0, r5
 8002f70:	bf14      	ite	ne
 8002f72:	2507      	movne	r5, #7
 8002f74:	2506      	moveq	r5, #6
 8002f76:	fa05 f50c 	lsl.w	r5, r5, ip
 8002f7a:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f7c:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 8002f7e:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8002f80:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f84:	03d7      	lsls	r7, r2, #15
        temp &= ~(iocurrent);
 8002f86:	bf54      	ite	pl
 8002f88:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8002f8a:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 8002f8e:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 8002f90:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f92:	0397      	lsls	r7, r2, #14
        temp &= ~(iocurrent);
 8002f94:	bf54      	ite	pl
 8002f96:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8002f98:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 8002f9c:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 8002f9e:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fa0:	02d7      	lsls	r7, r2, #11
        temp &= ~(iocurrent);
 8002fa2:	bf54      	ite	pl
 8002fa4:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8002fa6:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 8002faa:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8002fac:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002fae:	0292      	lsls	r2, r2, #10
        temp &= ~(iocurrent);
 8002fb0:	bf54      	ite	pl
 8002fb2:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8002fb4:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 8002fb8:	60e5      	str	r5, [r4, #12]
    position++;
 8002fba:	3301      	adds	r3, #1
 8002fbc:	e73f      	b.n	8002e3e <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002fbe:	2500      	movs	r5, #0
 8002fc0:	e7d9      	b.n	8002f76 <HAL_GPIO_Init+0x14a>
 8002fc2:	2501      	movs	r5, #1
 8002fc4:	e7d7      	b.n	8002f76 <HAL_GPIO_Init+0x14a>
 8002fc6:	2502      	movs	r5, #2
 8002fc8:	e7d5      	b.n	8002f76 <HAL_GPIO_Init+0x14a>
 8002fca:	2503      	movs	r5, #3
 8002fcc:	e7d3      	b.n	8002f76 <HAL_GPIO_Init+0x14a>
 8002fce:	2504      	movs	r5, #4
 8002fd0:	e7d1      	b.n	8002f76 <HAL_GPIO_Init+0x14a>
 8002fd2:	2505      	movs	r5, #5
 8002fd4:	e7cf      	b.n	8002f76 <HAL_GPIO_Init+0x14a>
 8002fd6:	bf00      	nop
 8002fd8:	40010400 	.word	0x40010400
 8002fdc:	48000400 	.word	0x48000400
 8002fe0:	40021000 	.word	0x40021000

08002fe4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002fe4:	6903      	ldr	r3, [r0, #16]
 8002fe6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002fe8:	bf14      	ite	ne
 8002fea:	2001      	movne	r0, #1
 8002fec:	2000      	moveq	r0, #0
 8002fee:	4770      	bx	lr

08002ff0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ff0:	b10a      	cbz	r2, 8002ff6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ff2:	6181      	str	r1, [r0, #24]
 8002ff4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ff6:	6281      	str	r1, [r0, #40]	; 0x28
 8002ff8:	4770      	bx	lr

08002ffa <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002ffa:	6943      	ldr	r3, [r0, #20]
 8002ffc:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ffe:	bf14      	ite	ne
 8003000:	6281      	strne	r1, [r0, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003002:	6181      	streq	r1, [r0, #24]
 8003004:	4770      	bx	lr

08003006 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003006:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003008:	4604      	mov	r4, r0
 800300a:	2800      	cmp	r0, #0
 800300c:	d04a      	beq.n	80030a4 <HAL_I2C_Init+0x9e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800300e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003012:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003016:	b91b      	cbnz	r3, 8003020 <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003018:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800301c:	f7fe ff22 	bl	8001e64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003020:	2324      	movs	r3, #36	; 0x24
 8003022:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003026:	6823      	ldr	r3, [r4, #0]
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003028:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	f022 0201 	bic.w	r2, r2, #1
 8003030:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003032:	6862      	ldr	r2, [r4, #4]
 8003034:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003038:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800303a:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800303c:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800303e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003042:	609a      	str	r2, [r3, #8]
 8003044:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003046:	d124      	bne.n	8003092 <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003048:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800304c:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800304e:	685a      	ldr	r2, [r3, #4]
  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003050:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003052:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003056:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800305a:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800305c:	68da      	ldr	r2, [r3, #12]
 800305e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003062:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003064:	6922      	ldr	r2, [r4, #16]
 8003066:	430a      	orrs	r2, r1
 8003068:	69a1      	ldr	r1, [r4, #24]
 800306a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800306e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003070:	6a21      	ldr	r1, [r4, #32]
 8003072:	69e2      	ldr	r2, [r4, #28]
 8003074:	430a      	orrs	r2, r1
 8003076:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	f042 0201 	orr.w	r2, r2, #1
 800307e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003080:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8003082:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003084:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003086:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800308a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800308c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
 8003090:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003092:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003096:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003098:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800309a:	bf04      	itt	eq
 800309c:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 80030a0:	605a      	streq	r2, [r3, #4]
 80030a2:	e7d4      	b.n	800304e <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 80030a4:	2001      	movs	r0, #1
}
 80030a6:	bd10      	pop	{r4, pc}

080030a8 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030a8:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80030ac:	b2d2      	uxtb	r2, r2
 80030ae:	2a20      	cmp	r2, #32
{
 80030b0:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80030b2:	d11d      	bne.n	80030f0 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030b4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d019      	beq.n	80030f0 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030bc:	2324      	movs	r3, #36	; 0x24
 80030be:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030c2:	6803      	ldr	r3, [r0, #0]
 80030c4:	681c      	ldr	r4, [r3, #0]
 80030c6:	f024 0401 	bic.w	r4, r4, #1
 80030ca:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80030cc:	681c      	ldr	r4, [r3, #0]
 80030ce:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 80030d2:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80030d4:	681c      	ldr	r4, [r3, #0]
 80030d6:	4321      	orrs	r1, r4
 80030d8:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030da:	6819      	ldr	r1, [r3, #0]
 80030dc:	f041 0101 	orr.w	r1, r1, #1
 80030e0:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030e2:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80030e4:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80030e8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80030ec:	4618      	mov	r0, r3
 80030ee:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 80030f0:	2002      	movs	r0, #2
  }
}
 80030f2:	bd10      	pop	{r4, pc}

080030f4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80030f4:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030f6:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 80030fa:	b2e4      	uxtb	r4, r4
 80030fc:	2c20      	cmp	r4, #32
 80030fe:	d11c      	bne.n	800313a <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003100:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003104:	2b01      	cmp	r3, #1
 8003106:	d018      	beq.n	800313a <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003108:	2324      	movs	r3, #36	; 0x24
 800310a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800310e:	6803      	ldr	r3, [r0, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	f022 0201 	bic.w	r2, r2, #1
 8003116:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003118:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800311a:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800311e:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003122:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	f042 0201 	orr.w	r2, r2, #1
 800312a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800312c:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800312e:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003132:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8003136:	4618      	mov	r0, r3
 8003138:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 800313a:	2002      	movs	r0, #2
  }
}
 800313c:	bd10      	pop	{r4, pc}

0800313e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800313e:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003140:	4604      	mov	r4, r0
{
 8003142:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 8003144:	b360      	cbz	r0, 80031a0 <HAL_PCD_Init+0x62>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003146:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
  USBx = hpcd->Instance;
 800314a:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800314c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003150:	b91b      	cbnz	r3, 800315a <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003152:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003156:	f004 fcb7 	bl	8007ac8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800315a:	2303      	movs	r3, #3
 800315c:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003160:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003162:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003164:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_PCD_DISABLE(hpcd);
 8003168:	f855 0b10 	ldr.w	r0, [r5], #16
    hpcd->Init.dma_enable = 0U;
 800316c:	bf08      	it	eq
 800316e:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 8003170:	f003 f806 	bl	8006180 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003174:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003176:	466e      	mov	r6, sp
 8003178:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800317a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800317c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800317e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003182:	e886 0003 	stmia.w	r6, {r0, r1}
 8003186:	4625      	mov	r5, r4
 8003188:	1d27      	adds	r7, r4, #4
 800318a:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800318e:	f855 0b10 	ldr.w	r0, [r5], #16
 8003192:	f002 ff43 	bl	800601c <USB_CoreInit>
 8003196:	4606      	mov	r6, r0
 8003198:	b120      	cbz	r0, 80031a4 <HAL_PCD_Init+0x66>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800319a:	2302      	movs	r3, #2
 800319c:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 80031a0:	2501      	movs	r5, #1
 80031a2:	e056      	b.n	8003252 <HAL_PCD_Init+0x114>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80031a4:	4601      	mov	r1, r0
 80031a6:	6820      	ldr	r0, [r4, #0]
 80031a8:	f002 fff0 	bl	800618c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031ac:	4630      	mov	r0, r6
 80031ae:	f8d4 e004 	ldr.w	lr, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80031b2:	261c      	movs	r6, #28
 80031b4:	f04f 0c01 	mov.w	ip, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80031b8:	4601      	mov	r1, r0
 80031ba:	b2c2      	uxtb	r2, r0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031bc:	4596      	cmp	lr, r2
 80031be:	f100 0001 	add.w	r0, r0, #1
 80031c2:	d81c      	bhi.n	80031fe <HAL_PCD_Init+0xc0>
 80031c4:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80031c6:	261c      	movs	r6, #28
 80031c8:	4619      	mov	r1, r3
 80031ca:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031cc:	4586      	cmp	lr, r0
 80031ce:	f103 0301 	add.w	r3, r3, #1
 80031d2:	d822      	bhi.n	800321a <HAL_PCD_Init+0xdc>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031d6:	466e      	mov	r6, sp
 80031d8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80031da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031dc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80031de:	e895 0003 	ldmia.w	r5, {r0, r1}
 80031e2:	e886 0003 	stmia.w	r6, {r0, r1}
 80031e6:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80031ea:	6820      	ldr	r0, [r4, #0]
 80031ec:	f003 f810 	bl	8006210 <USB_DevInit>
 80031f0:	2301      	movs	r3, #1
 80031f2:	4605      	mov	r5, r0
 80031f4:	b300      	cbz	r0, 8003238 <HAL_PCD_Init+0xfa>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031f6:	2202      	movs	r2, #2
 80031f8:	f884 23bd 	strb.w	r2, [r4, #957]	; 0x3bd
 80031fc:	e7d0      	b.n	80031a0 <HAL_PCD_Init+0x62>
    hpcd->IN_ep[i].is_in = 1U;
 80031fe:	fb06 4302 	mla	r3, r6, r2, r4
 8003202:	f883 c03d 	strb.w	ip, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8003206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 800320a:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800320e:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 8003212:	6459      	str	r1, [r3, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003214:	6499      	str	r1, [r3, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 8003216:	6519      	str	r1, [r3, #80]	; 0x50
 8003218:	e7cf      	b.n	80031ba <HAL_PCD_Init+0x7c>
    hpcd->OUT_ep[i].is_in = 0U;
 800321a:	fb06 4200 	mla	r2, r6, r0, r4
 800321e:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 8003222:	f882 01fc 	strb.w	r0, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003226:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 800322a:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800322e:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003232:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
 8003236:	e7c8      	b.n	80031ca <HAL_PCD_Init+0x8c>
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 8003238:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800323c:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003240:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003242:	2b01      	cmp	r3, #1
 8003244:	d102      	bne.n	800324c <HAL_PCD_Init+0x10e>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003246:	4620      	mov	r0, r4
 8003248:	f000 fbe8 	bl	8003a1c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800324c:	6820      	ldr	r0, [r4, #0]
 800324e:	f003 fac1 	bl	80067d4 <USB_DevDisconnect>

  return HAL_OK;
}
 8003252:	4628      	mov	r0, r5
 8003254:	b00b      	add	sp, #44	; 0x2c
 8003256:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003258 <HAL_PCD_Start>:
{
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8003258:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 800325c:	2b01      	cmp	r3, #1
{
 800325e:	b510      	push	{r4, lr}
 8003260:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003262:	d013      	beq.n	800328c <HAL_PCD_Start+0x34>
 8003264:	2301      	movs	r3, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003266:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8003268:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 800326c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800326e:	2b01      	cmp	r3, #1
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003270:	bf02      	ittt	eq
 8003272:	6b83      	ldreq	r3, [r0, #56]	; 0x38
 8003274:	f443 3380 	orreq.w	r3, r3, #65536	; 0x10000
 8003278:	6383      	streq	r3, [r0, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  (void)USB_DevConnect(hpcd->Instance);
 800327a:	f003 fa9f 	bl	80067bc <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800327e:	6820      	ldr	r0, [r4, #0]
 8003280:	f002 ff78 	bl	8006174 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8003284:	2000      	movs	r0, #0
 8003286:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 800328a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800328c:	2002      	movs	r0, #2
}
 800328e:	bd10      	pop	{r4, pc}

08003290 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003294:	6806      	ldr	r6, [r0, #0]
{
 8003296:	b085      	sub	sp, #20
 8003298:	4604      	mov	r4, r0
  uint32_t i, ep_intr, epint, epnum = 0U;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800329a:	4630      	mov	r0, r6
 800329c:	f003 fad5 	bl	800684a <USB_GetMode>
 80032a0:	9000      	str	r0, [sp, #0]
 80032a2:	2800      	cmp	r0, #0
 80032a4:	f040 814a 	bne.w	800353c <HAL_PCD_IRQHandler+0x2ac>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80032a8:	6820      	ldr	r0, [r4, #0]
 80032aa:	f003 fa9f 	bl	80067ec <USB_ReadInterrupts>
 80032ae:	2800      	cmp	r0, #0
 80032b0:	f000 8144 	beq.w	800353c <HAL_PCD_IRQHandler+0x2ac>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80032b4:	6820      	ldr	r0, [r4, #0]
 80032b6:	f003 fa99 	bl	80067ec <USB_ReadInterrupts>
 80032ba:	0785      	lsls	r5, r0, #30
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80032bc:	bf48      	it	mi
 80032be:	6822      	ldrmi	r2, [r4, #0]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80032c0:	6820      	ldr	r0, [r4, #0]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80032c2:	bf42      	ittt	mi
 80032c4:	6953      	ldrmi	r3, [r2, #20]
 80032c6:	f003 0302 	andmi.w	r3, r3, #2
 80032ca:	6153      	strmi	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80032cc:	f003 fa8e 	bl	80067ec <USB_ReadInterrupts>
 80032d0:	f410 2500 	ands.w	r5, r0, #524288	; 0x80000
 80032d4:	d00e      	beq.n	80032f4 <HAL_PCD_IRQHandler+0x64>
    {
      epnum = 0U;

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80032d6:	6820      	ldr	r0, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;


  if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80032d8:	f8df a480 	ldr.w	sl, [pc, #1152]	; 800375c <HAL_PCD_IRQHandler+0x4cc>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80032dc:	f003 fa8a 	bl	80067f4 <USB_ReadDevAllOutEpInterrupt>
 80032e0:	f506 6730 	add.w	r7, r6, #2816	; 0xb00
 80032e4:	4680      	mov	r8, r0
      epnum = 0U;
 80032e6:	2500      	movs	r5, #0
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032e8:	f04f 0920 	mov.w	r9, #32
      while (ep_intr != 0U)
 80032ec:	f1b8 0f00 	cmp.w	r8, #0
 80032f0:	f040 8127 	bne.w	8003542 <HAL_PCD_IRQHandler+0x2b2>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80032f4:	6820      	ldr	r0, [r4, #0]
 80032f6:	f003 fa79 	bl	80067ec <USB_ReadInterrupts>
 80032fa:	0342      	lsls	r2, r0, #13
 80032fc:	d50b      	bpl.n	8003316 <HAL_PCD_IRQHandler+0x86>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80032fe:	6820      	ldr	r0, [r4, #0]
 8003300:	f003 fa80 	bl	8006804 <USB_ReadDevAllInEpInterrupt>
 8003304:	4627      	mov	r7, r4
 8003306:	4683      	mov	fp, r0
 8003308:	f506 6a10 	add.w	sl, r6, #2304	; 0x900
      epnum = 0U;
 800330c:	2500      	movs	r5, #0
      while (ep_intr != 0U)
 800330e:	f1bb 0f00 	cmp.w	fp, #0
 8003312:	f040 8168 	bne.w	80035e6 <HAL_PCD_IRQHandler+0x356>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003316:	6820      	ldr	r0, [r4, #0]
 8003318:	f003 fa68 	bl	80067ec <USB_ReadInterrupts>
 800331c:	2800      	cmp	r0, #0
 800331e:	da15      	bge.n	800334c <HAL_PCD_IRQHandler+0xbc>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003320:	f8d6 3804 	ldr.w	r3, [r6, #2052]	; 0x804
 8003324:	f023 0301 	bic.w	r3, r3, #1
 8003328:	f8c6 3804 	str.w	r3, [r6, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 800332c:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8003330:	2b01      	cmp	r3, #1
 8003332:	f040 81de 	bne.w	80036f2 <HAL_PCD_IRQHandler+0x462>
        hpcd->LPM_State = LPM_L0;
 8003336:	2100      	movs	r1, #0
 8003338:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800333c:	4620      	mov	r0, r4
 800333e:	f004 fd47 	bl	8007dd0 <HAL_PCDEx_LPM_Callback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003342:	6822      	ldr	r2, [r4, #0]
 8003344:	6953      	ldr	r3, [r2, #20]
 8003346:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800334a:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800334c:	6820      	ldr	r0, [r4, #0]
 800334e:	f003 fa4d 	bl	80067ec <USB_ReadInterrupts>
 8003352:	0503      	lsls	r3, r0, #20
 8003354:	d50b      	bpl.n	800336e <HAL_PCD_IRQHandler+0xde>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003356:	f8d6 3808 	ldr.w	r3, [r6, #2056]	; 0x808
 800335a:	07df      	lsls	r7, r3, #31
 800335c:	d502      	bpl.n	8003364 <HAL_PCD_IRQHandler+0xd4>
        HAL_PCD_SuspendCallback(hpcd);
 800335e:	4620      	mov	r0, r4
 8003360:	f004 fc2e 	bl	8007bc0 <HAL_PCD_SuspendCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003364:	6822      	ldr	r2, [r4, #0]
 8003366:	6953      	ldr	r3, [r2, #20]
 8003368:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800336c:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800336e:	6820      	ldr	r0, [r4, #0]
 8003370:	f003 fa3c 	bl	80067ec <USB_ReadInterrupts>
 8003374:	0100      	lsls	r0, r0, #4
 8003376:	d514      	bpl.n	80033a2 <HAL_PCD_IRQHandler+0x112>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003378:	6823      	ldr	r3, [r4, #0]
 800337a:	695a      	ldr	r2, [r3, #20]
 800337c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003380:	615a      	str	r2, [r3, #20]
      if (hpcd->LPM_State == LPM_L0)
 8003382:	f894 23f4 	ldrb.w	r2, [r4, #1012]	; 0x3f4
 8003386:	2a00      	cmp	r2, #0
 8003388:	f040 81b7 	bne.w	80036fa <HAL_PCD_IRQHandler+0x46a>
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800338c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
        hpcd->LPM_State = LPM_L1;
 800338e:	2101      	movs	r1, #1
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003390:	f3c3 0383 	ubfx	r3, r3, #2, #4
        hpcd->LPM_State = LPM_L1;
 8003394:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003398:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800339c:	4620      	mov	r0, r4
 800339e:	f004 fd17 	bl	8007dd0 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80033a2:	6820      	ldr	r0, [r4, #0]
 80033a4:	f003 fa22 	bl	80067ec <USB_ReadInterrupts>
 80033a8:	04c1      	lsls	r1, r0, #19
 80033aa:	d534      	bpl.n	8003416 <HAL_PCD_IRQHandler+0x186>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80033ac:	f506 6700 	add.w	r7, r6, #2048	; 0x800
 80033b0:	687b      	ldr	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80033b2:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80033b4:	f023 0301 	bic.w	r3, r3, #1
 80033b8:	607b      	str	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80033ba:	2110      	movs	r1, #16
 80033bc:	f002 fefe 	bl	80061bc <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033c0:	6860      	ldr	r0, [r4, #4]
 80033c2:	f506 6310 	add.w	r3, r6, #2304	; 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80033c6:	f64f 317f 	movw	r1, #64383	; 0xfb7f
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033ca:	9a00      	ldr	r2, [sp, #0]
 80033cc:	4282      	cmp	r2, r0
 80033ce:	f040 8198 	bne.w	8003702 <HAL_PCD_IRQHandler+0x472>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80033d8:	61fb      	str	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80033da:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f000 81a2 	beq.w	8003726 <HAL_PCD_IRQHandler+0x496>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80033e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033e6:	f043 030b 	orr.w	r3, r3, #11
 80033ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80033ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033f0:	f043 030b 	orr.w	r3, r3, #11
 80033f4:	647b      	str	r3, [r7, #68]	; 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80033f6:	f8d6 3800 	ldr.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80033fa:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80033fc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003400:	f8c6 3800 	str.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003404:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8003408:	f003 fa3e 	bl	8006888 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800340c:	6822      	ldr	r2, [r4, #0]
 800340e:	6953      	ldr	r3, [r2, #20]
 8003410:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003414:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003416:	6820      	ldr	r0, [r4, #0]
 8003418:	f003 f9e8 	bl	80067ec <USB_ReadInterrupts>
 800341c:	0482      	lsls	r2, r0, #18
 800341e:	d516      	bpl.n	800344e <HAL_PCD_IRQHandler+0x1be>
      (void)USB_ActivateSetup(hpcd->Instance);
 8003420:	6820      	ldr	r0, [r4, #0]
 8003422:	f003 fa16 	bl	8006852 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003426:	6820      	ldr	r0, [r4, #0]
 8003428:	f002 ff9a 	bl	8006360 <USB_GetDevSpeed>
 800342c:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800342e:	6827      	ldr	r7, [r4, #0]
 8003430:	f000 ff5c 	bl	80042ec <HAL_RCC_GetHCLKFreq>
 8003434:	7b22      	ldrb	r2, [r4, #12]
 8003436:	4601      	mov	r1, r0
 8003438:	4638      	mov	r0, r7
 800343a:	f002 fe27 	bl	800608c <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 800343e:	4620      	mov	r0, r4
 8003440:	f004 fbab 	bl	8007b9a <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003444:	6822      	ldr	r2, [r4, #0]
 8003446:	6953      	ldr	r3, [r2, #20]
 8003448:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800344c:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800344e:	6820      	ldr	r0, [r4, #0]
 8003450:	f003 f9cc 	bl	80067ec <USB_ReadInterrupts>
 8003454:	06c3      	lsls	r3, r0, #27
 8003456:	d52b      	bpl.n	80034b0 <HAL_PCD_IRQHandler+0x220>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003458:	6822      	ldr	r2, [r4, #0]
 800345a:	6993      	ldr	r3, [r2, #24]
 800345c:	f023 0310 	bic.w	r3, r3, #16
 8003460:	6193      	str	r3, [r2, #24]
      temp = USBx->GRXSTSP;
 8003462:	6a37      	ldr	r7, [r6, #32]
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003464:	f3c7 4343 	ubfx	r3, r7, #17, #4
 8003468:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800346a:	f007 090f 	and.w	r9, r7, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800346e:	f040 8165 	bne.w	800373c <HAL_PCD_IRQHandler+0x4ac>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003472:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003476:	421f      	tst	r7, r3
 8003478:	d015      	beq.n	80034a6 <HAL_PCD_IRQHandler+0x216>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800347a:	f04f 081c 	mov.w	r8, #28
 800347e:	fb08 4809 	mla	r8, r8, r9, r4
 8003482:	f3c7 170a 	ubfx	r7, r7, #4, #11
 8003486:	463a      	mov	r2, r7
 8003488:	f8d8 1208 	ldr.w	r1, [r8, #520]	; 0x208
 800348c:	4630      	mov	r0, r6
 800348e:	f003 f91f 	bl	80066d0 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003492:	f8d8 3208 	ldr.w	r3, [r8, #520]	; 0x208
 8003496:	443b      	add	r3, r7
 8003498:	f8c8 3208 	str.w	r3, [r8, #520]	; 0x208
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800349c:	f8d8 3214 	ldr.w	r3, [r8, #532]	; 0x214
 80034a0:	441f      	add	r7, r3
 80034a2:	f8c8 7214 	str.w	r7, [r8, #532]	; 0x214
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80034a6:	6822      	ldr	r2, [r4, #0]
 80034a8:	6993      	ldr	r3, [r2, #24]
 80034aa:	f043 0310 	orr.w	r3, r3, #16
 80034ae:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80034b0:	6820      	ldr	r0, [r4, #0]
 80034b2:	f003 f99b 	bl	80067ec <USB_ReadInterrupts>
 80034b6:	0707      	lsls	r7, r0, #28
 80034b8:	d507      	bpl.n	80034ca <HAL_PCD_IRQHandler+0x23a>
      HAL_PCD_SOFCallback(hpcd);
 80034ba:	4620      	mov	r0, r4
 80034bc:	f004 fb69 	bl	8007b92 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80034c0:	6822      	ldr	r2, [r4, #0]
 80034c2:	6953      	ldr	r3, [r2, #20]
 80034c4:	f003 0308 	and.w	r3, r3, #8
 80034c8:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80034ca:	6820      	ldr	r0, [r4, #0]
 80034cc:	f003 f98e 	bl	80067ec <USB_ReadInterrupts>
 80034d0:	02c6      	lsls	r6, r0, #11
 80034d2:	d508      	bpl.n	80034e6 <HAL_PCD_IRQHandler+0x256>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80034d4:	b2e9      	uxtb	r1, r5
 80034d6:	4620      	mov	r0, r4
 80034d8:	f004 fba8 	bl	8007c2c <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80034dc:	6822      	ldr	r2, [r4, #0]
 80034de:	6953      	ldr	r3, [r2, #20]
 80034e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034e4:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80034e6:	6820      	ldr	r0, [r4, #0]
 80034e8:	f003 f980 	bl	80067ec <USB_ReadInterrupts>
 80034ec:	0280      	lsls	r0, r0, #10
 80034ee:	d508      	bpl.n	8003502 <HAL_PCD_IRQHandler+0x272>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80034f0:	b2e9      	uxtb	r1, r5
 80034f2:	4620      	mov	r0, r4
 80034f4:	f004 fb96 	bl	8007c24 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80034f8:	6822      	ldr	r2, [r4, #0]
 80034fa:	6953      	ldr	r3, [r2, #20]
 80034fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003500:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003502:	6820      	ldr	r0, [r4, #0]
 8003504:	f003 f972 	bl	80067ec <USB_ReadInterrupts>
 8003508:	0041      	lsls	r1, r0, #1
 800350a:	d507      	bpl.n	800351c <HAL_PCD_IRQHandler+0x28c>
      HAL_PCD_ConnectCallback(hpcd);
 800350c:	4620      	mov	r0, r4
 800350e:	f004 fb91 	bl	8007c34 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003512:	6822      	ldr	r2, [r4, #0]
 8003514:	6953      	ldr	r3, [r2, #20]
 8003516:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800351a:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800351c:	6820      	ldr	r0, [r4, #0]
 800351e:	f003 f965 	bl	80067ec <USB_ReadInterrupts>
 8003522:	0742      	lsls	r2, r0, #29
 8003524:	d50a      	bpl.n	800353c <HAL_PCD_IRQHandler+0x2ac>
      temp = hpcd->Instance->GOTGINT;
 8003526:	6823      	ldr	r3, [r4, #0]
 8003528:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800352a:	076b      	lsls	r3, r5, #29
 800352c:	d502      	bpl.n	8003534 <HAL_PCD_IRQHandler+0x2a4>
        HAL_PCD_DisconnectCallback(hpcd);
 800352e:	4620      	mov	r0, r4
 8003530:	f004 fb84 	bl	8007c3c <HAL_PCD_DisconnectCallback>
      hpcd->Instance->GOTGINT |= temp;
 8003534:	6823      	ldr	r3, [r4, #0]
 8003536:	685a      	ldr	r2, [r3, #4]
 8003538:	4315      	orrs	r5, r2
 800353a:	605d      	str	r5, [r3, #4]
}
 800353c:	b005      	add	sp, #20
 800353e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((ep_intr & 0x1U) != 0U)
 8003542:	f018 0f01 	tst.w	r8, #1
 8003546:	d040      	beq.n	80035ca <HAL_PCD_IRQHandler+0x33a>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003548:	b2ea      	uxtb	r2, r5
 800354a:	4611      	mov	r1, r2
 800354c:	6820      	ldr	r0, [r4, #0]
 800354e:	9201      	str	r2, [sp, #4]
 8003550:	f003 f960 	bl	8006814 <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003554:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003558:	4683      	mov	fp, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800355a:	9a01      	ldr	r2, [sp, #4]
 800355c:	d00f      	beq.n	800357e <HAL_PCD_IRQHandler+0x2ee>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800355e:	2101      	movs	r1, #1
 8003560:	60b9      	str	r1, [r7, #8]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003562:	6821      	ldr	r1, [r4, #0]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003564:	6c08      	ldr	r0, [r1, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003566:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800356a:	eb01 1145 	add.w	r1, r1, r5, lsl #5
  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800356e:	4550      	cmp	r0, sl
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003570:	688b      	ldr	r3, [r1, #8]
  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003572:	d133      	bne.n	80035dc <HAL_PCD_IRQHandler+0x34c>
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003574:	0418      	lsls	r0, r3, #16
 8003576:	d52d      	bpl.n	80035d4 <HAL_PCD_IRQHandler+0x344>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003578:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800357c:	608a      	str	r2, [r1, #8]
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800357e:	f01b 0f08 	tst.w	fp, #8
 8003582:	d012      	beq.n	80035aa <HAL_PCD_IRQHandler+0x31a>
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003584:	6822      	ldr	r2, [r4, #0]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003586:	6c11      	ldr	r1, [r2, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003588:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800358c:	eb02 1245 	add.w	r2, r2, r5, lsl #5
  if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8003590:	4551      	cmp	r1, sl
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003592:	6890      	ldr	r0, [r2, #8]
  if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8003594:	d104      	bne.n	80035a0 <HAL_PCD_IRQHandler+0x310>
 8003596:	0401      	lsls	r1, r0, #16
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003598:	bf44      	itt	mi
 800359a:	f44f 4100 	movmi.w	r1, #32768	; 0x8000
 800359e:	6091      	strmi	r1, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80035a0:	4620      	mov	r0, r4
 80035a2:	f004 fadf 	bl	8007b64 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80035a6:	2208      	movs	r2, #8
 80035a8:	60ba      	str	r2, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80035aa:	f01b 0f10 	tst.w	fp, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80035ae:	bf1c      	itt	ne
 80035b0:	2210      	movne	r2, #16
 80035b2:	60ba      	strne	r2, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80035b4:	f01b 0f20 	tst.w	fp, #32
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80035b8:	bf18      	it	ne
 80035ba:	f8c7 9008 	strne.w	r9, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80035be:	f41b 5f00 	tst.w	fp, #8192	; 0x2000
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80035c2:	bf1c      	itt	ne
 80035c4:	f44f 5300 	movne.w	r3, #8192	; 0x2000
 80035c8:	60bb      	strne	r3, [r7, #8]
        epnum++;
 80035ca:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 80035cc:	ea4f 0858 	mov.w	r8, r8, lsr #1
 80035d0:	3720      	adds	r7, #32
 80035d2:	e68b      	b.n	80032ec <HAL_PCD_IRQHandler+0x5c>
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80035d4:	0698      	lsls	r0, r3, #26
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80035d6:	bf48      	it	mi
 80035d8:	f8c1 9008 	strmi.w	r9, [r1, #8]
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035dc:	4611      	mov	r1, r2
 80035de:	4620      	mov	r0, r4
 80035e0:	f004 fac6 	bl	8007b70 <HAL_PCD_DataOutStageCallback>
 80035e4:	e7cb      	b.n	800357e <HAL_PCD_IRQHandler+0x2ee>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80035e6:	f01b 0f01 	tst.w	fp, #1
 80035ea:	d07b      	beq.n	80036e4 <HAL_PCD_IRQHandler+0x454>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80035ec:	b2eb      	uxtb	r3, r5
 80035ee:	4619      	mov	r1, r3
 80035f0:	6820      	ldr	r0, [r4, #0]
 80035f2:	9301      	str	r3, [sp, #4]
 80035f4:	f003 f917 	bl	8006826 <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80035f8:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80035fc:	4680      	mov	r8, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80035fe:	d010      	beq.n	8003622 <HAL_PCD_IRQHandler+0x392>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003600:	f8d6 3834 	ldr.w	r3, [r6, #2100]	; 0x834
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003604:	9901      	ldr	r1, [sp, #4]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003606:	2001      	movs	r0, #1
 8003608:	f005 020f 	and.w	r2, r5, #15
 800360c:	fa00 f202 	lsl.w	r2, r0, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003610:	ea23 0302 	bic.w	r3, r3, r2
 8003614:	f8c6 3834 	str.w	r3, [r6, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003618:	f8ca 0008 	str.w	r0, [sl, #8]
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800361c:	4620      	mov	r0, r4
 800361e:	f004 fab0 	bl	8007b82 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003622:	f018 0f08 	tst.w	r8, #8
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003626:	bf1c      	itt	ne
 8003628:	2308      	movne	r3, #8
 800362a:	f8ca 3008 	strne.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800362e:	f018 0f10 	tst.w	r8, #16
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003632:	bf1c      	itt	ne
 8003634:	2310      	movne	r3, #16
 8003636:	f8ca 3008 	strne.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800363a:	f018 0f40 	tst.w	r8, #64	; 0x40
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800363e:	bf1c      	itt	ne
 8003640:	2340      	movne	r3, #64	; 0x40
 8003642:	f8ca 3008 	strne.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003646:	f018 0f02 	tst.w	r8, #2
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800364a:	bf1c      	itt	ne
 800364c:	2302      	movne	r3, #2
 800364e:	f8ca 3008 	strne.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003652:	f018 0f80 	tst.w	r8, #128	; 0x80
 8003656:	d045      	beq.n	80036e4 <HAL_PCD_IRQHandler+0x454>
  if (ep->xfer_count > ep->xfer_len)
 8003658:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800365a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800365c:	429a      	cmp	r2, r3
 800365e:	d841      	bhi.n	80036e4 <HAL_PCD_IRQHandler+0x454>
  len = ep->xfer_len - ep->xfer_count;
 8003660:	eba3 0802 	sub.w	r8, r3, r2
  len32b = (len + 3U) / 4U;
 8003664:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003666:	6821      	ldr	r1, [r4, #0]
 8003668:	9102      	str	r1, [sp, #8]
  len32b = (len + 3U) / 4U;
 800366a:	4598      	cmp	r8, r3
 800366c:	bf28      	it	cs
 800366e:	4698      	movcs	r8, r3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003670:	f501 6310 	add.w	r3, r1, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 8003674:	f108 0803 	add.w	r8, r8, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003678:	eb03 1345 	add.w	r3, r3, r5, lsl #5
  len32b = (len + 3U) / 4U;
 800367c:	ea4f 0898 	mov.w	r8, r8, lsr #2
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003680:	9303      	str	r3, [sp, #12]
 8003682:	9b03      	ldr	r3, [sp, #12]
 8003684:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	b29b      	uxth	r3, r3
 800368a:	4543      	cmp	r3, r8
 800368c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800368e:	d327      	bcc.n	80036e0 <HAL_PCD_IRQHandler+0x450>
 8003690:	4293      	cmp	r3, r2
 8003692:	d925      	bls.n	80036e0 <HAL_PCD_IRQHandler+0x450>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003694:	b963      	cbnz	r3, 80036b0 <HAL_PCD_IRQHandler+0x420>
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003696:	9b02      	ldr	r3, [sp, #8]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003698:	f005 010f 	and.w	r1, r5, #15
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800369c:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80036a0:	2001      	movs	r0, #1
 80036a2:	fa00 f101 	lsl.w	r1, r0, r1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80036a6:	ea22 0201 	bic.w	r2, r2, r1
 80036aa:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
 80036ae:	e019      	b.n	80036e4 <HAL_PCD_IRQHandler+0x454>
    len = ep->xfer_len - ep->xfer_count;
 80036b0:	eba3 0902 	sub.w	r9, r3, r2
 80036b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 80036b6:	9a01      	ldr	r2, [sp, #4]
 80036b8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80036ba:	9802      	ldr	r0, [sp, #8]
 80036bc:	4599      	cmp	r9, r3
 80036be:	bf28      	it	cs
 80036c0:	4699      	movcs	r9, r3
 80036c2:	fa1f f389 	uxth.w	r3, r9
 80036c6:	f002 ff3b 	bl	8006540 <USB_WritePacket>
    ep->xfer_buff  += len;
 80036ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036cc:	444b      	add	r3, r9
 80036ce:	64bb      	str	r3, [r7, #72]	; 0x48
    ep->xfer_count += len;
 80036d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    len32b = (len + 3U) / 4U;
 80036d2:	f109 0803 	add.w	r8, r9, #3
    ep->xfer_count += len;
 80036d6:	444b      	add	r3, r9
    len32b = (len + 3U) / 4U;
 80036d8:	ea4f 0898 	mov.w	r8, r8, lsr #2
    ep->xfer_count += len;
 80036dc:	657b      	str	r3, [r7, #84]	; 0x54
 80036de:	e7d0      	b.n	8003682 <HAL_PCD_IRQHandler+0x3f2>
  if (ep->xfer_len <= ep->xfer_count)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d9d8      	bls.n	8003696 <HAL_PCD_IRQHandler+0x406>
        epnum++;
 80036e4:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 80036e6:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
 80036ea:	371c      	adds	r7, #28
 80036ec:	f10a 0a20 	add.w	sl, sl, #32
 80036f0:	e60d      	b.n	800330e <HAL_PCD_IRQHandler+0x7e>
        HAL_PCD_ResumeCallback(hpcd);
 80036f2:	4620      	mov	r0, r4
 80036f4:	f004 fa7c 	bl	8007bf0 <HAL_PCD_ResumeCallback>
 80036f8:	e623      	b.n	8003342 <HAL_PCD_IRQHandler+0xb2>
        HAL_PCD_SuspendCallback(hpcd);
 80036fa:	4620      	mov	r0, r4
 80036fc:	f004 fa60 	bl	8007bc0 <HAL_PCD_SuspendCallback>
 8003700:	e64f      	b.n	80033a2 <HAL_PCD_IRQHandler+0x112>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003702:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800370a:	601a      	str	r2, [r3, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800370c:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003710:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003714:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003718:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800371c:	9a00      	ldr	r2, [sp, #0]
 800371e:	3201      	adds	r2, #1
 8003720:	9200      	str	r2, [sp, #0]
 8003722:	3320      	adds	r3, #32
 8003724:	e651      	b.n	80033ca <HAL_PCD_IRQHandler+0x13a>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800372c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003730:	617b      	str	r3, [r7, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	f043 030b 	orr.w	r3, r3, #11
 8003738:	613b      	str	r3, [r7, #16]
 800373a:	e65c      	b.n	80033f6 <HAL_PCD_IRQHandler+0x166>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800373c:	2b06      	cmp	r3, #6
 800373e:	f47f aeb2 	bne.w	80034a6 <HAL_PCD_IRQHandler+0x216>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003742:	2208      	movs	r2, #8
 8003744:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8003748:	4630      	mov	r0, r6
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800374a:	f04f 081c 	mov.w	r8, #28
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800374e:	f002 ffbf 	bl	80066d0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003752:	fb08 4809 	mla	r8, r8, r9, r4
 8003756:	f3c7 170a 	ubfx	r7, r7, #4, #11
 800375a:	e69f      	b.n	800349c <HAL_PCD_IRQHandler+0x20c>
 800375c:	4f54310a 	.word	0x4f54310a

08003760 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8003760:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8003764:	2a01      	cmp	r2, #1
{
 8003766:	b510      	push	{r4, lr}
 8003768:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800376a:	d00b      	beq.n	8003784 <HAL_PCD_SetAddress+0x24>
 800376c:	2201      	movs	r2, #1
 800376e:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003772:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003776:	6800      	ldr	r0, [r0, #0]
 8003778:	f003 f810 	bl	800679c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800377c:	2000      	movs	r0, #0
 800377e:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8003782:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8003784:	2002      	movs	r0, #2
}
 8003786:	bd10      	pop	{r4, pc}

08003788 <HAL_PCD_EP_Open>:
{
 8003788:	b570      	push	{r4, r5, r6, lr}
 800378a:	4604      	mov	r4, r0
 800378c:	f001 000f 	and.w	r0, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 8003790:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003794:	f04f 061c 	mov.w	r6, #28
 8003798:	b2c5      	uxtb	r5, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800379a:	fb06 4105 	mla	r1, r6, r5, r4
    ep->is_in = 1U;
 800379e:	bf15      	itete	ne
 80037a0:	fb06 4505 	mlane	r5, r6, r5, r4
    ep->is_in = 0U;
 80037a4:	fb06 4505 	mlaeq	r5, r6, r5, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037a8:	313c      	addne	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037aa:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 1U;
 80037ae:	bf15      	itete	ne
 80037b0:	2601      	movne	r6, #1
    ep->is_in = 0U;
 80037b2:	2600      	moveq	r6, #0
    ep->is_in = 1U;
 80037b4:	f885 603d 	strbne.w	r6, [r5, #61]	; 0x3d
    ep->is_in = 0U;
 80037b8:	f885 61fd 	strbeq.w	r6, [r5, #509]	; 0x1fd
  ep->maxpacket = ep_mps;
 80037bc:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 80037be:	784a      	ldrb	r2, [r1, #1]
  ep->type = ep_type;
 80037c0:	70cb      	strb	r3, [r1, #3]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037c2:	b2c0      	uxtb	r0, r0
 80037c4:	7008      	strb	r0, [r1, #0]
  if (ep->is_in != 0U)
 80037c6:	b102      	cbz	r2, 80037ca <HAL_PCD_EP_Open+0x42>
    ep->tx_fifo_num = ep->num;
 80037c8:	80c8      	strh	r0, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 80037ca:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 80037cc:	bf04      	itt	eq
 80037ce:	2300      	moveq	r3, #0
 80037d0:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 80037d2:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d009      	beq.n	80037ee <HAL_PCD_EP_Open+0x66>
 80037da:	2301      	movs	r3, #1
 80037dc:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80037e0:	6820      	ldr	r0, [r4, #0]
 80037e2:	f002 fdc7 	bl	8006374 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037e6:	2000      	movs	r0, #0
 80037e8:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return ret;
 80037ec:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 80037ee:	2002      	movs	r0, #2
}
 80037f0:	bd70      	pop	{r4, r5, r6, pc}

080037f2 <HAL_PCD_EP_Close>:
{
 80037f2:	f001 030f 	and.w	r3, r1, #15
 80037f6:	b2da      	uxtb	r2, r3
 80037f8:	b510      	push	{r4, lr}
 80037fa:	4604      	mov	r4, r0
 80037fc:	201c      	movs	r0, #28
  if ((ep_addr & 0x80U) == 0x80U)
 80037fe:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003802:	fb00 4102 	mla	r1, r0, r2, r4
 8003806:	bf19      	ittee	ne
 8003808:	313c      	addne	r1, #60	; 0x3c
    ep->is_in = 1U;
 800380a:	fb00 4202 	mlane	r2, r0, r2, r4
    ep->is_in = 0U;
 800380e:	fb00 4202 	mlaeq	r2, r0, r2, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003812:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 1U;
 8003816:	bf15      	itete	ne
 8003818:	2001      	movne	r0, #1
    ep->is_in = 0U;
 800381a:	2000      	moveq	r0, #0
    ep->is_in = 1U;
 800381c:	f882 003d 	strbne.w	r0, [r2, #61]	; 0x3d
    ep->is_in = 0U;
 8003820:	f882 01fd 	strbeq.w	r0, [r2, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003824:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8003826:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800382a:	2b01      	cmp	r3, #1
 800382c:	d009      	beq.n	8003842 <HAL_PCD_EP_Close+0x50>
 800382e:	2301      	movs	r3, #1
 8003830:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003834:	6820      	ldr	r0, [r4, #0]
 8003836:	f002 fddf 	bl	80063f8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800383a:	2000      	movs	r0, #0
 800383c:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8003840:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8003842:	2002      	movs	r0, #2
}
 8003844:	bd10      	pop	{r4, pc}

08003846 <HAL_PCD_EP_Receive>:
{
 8003846:	b538      	push	{r3, r4, r5, lr}
 8003848:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800384c:	241c      	movs	r4, #28
 800384e:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 8003852:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003856:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_len = len;
 800385a:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->xfer_count = 0U;
 800385e:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 8003860:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_count = 0U;
 8003864:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
  ep->is_in = 0U;
 8003868:	f884 31fd 	strb.w	r3, [r4, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 800386c:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003870:	6800      	ldr	r0, [r0, #0]
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003872:	b91d      	cbnz	r5, 800387c <HAL_PCD_EP_Receive+0x36>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003874:	f002 fdf2 	bl	800645c <USB_EP0StartXfer>
}
 8003878:	2000      	movs	r0, #0
 800387a:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800387c:	f002 fe70 	bl	8006560 <USB_EPStartXfer>
 8003880:	e7fa      	b.n	8003878 <HAL_PCD_EP_Receive+0x32>

08003882 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003882:	231c      	movs	r3, #28
 8003884:	f001 010f 	and.w	r1, r1, #15
 8003888:	fb03 0101 	mla	r1, r3, r1, r0
}
 800388c:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 8003890:	4770      	bx	lr

08003892 <HAL_PCD_EP_Transmit>:
{
 8003892:	b538      	push	{r3, r4, r5, lr}
 8003894:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003898:	241c      	movs	r4, #28
 800389a:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 800389e:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038a2:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_len = len;
 80038a4:	6523      	str	r3, [r4, #80]	; 0x50
  ep->xfer_count = 0U;
 80038a6:	2300      	movs	r3, #0
 80038a8:	6563      	str	r3, [r4, #84]	; 0x54
  ep->is_in = 1U;
 80038aa:	2301      	movs	r3, #1
  ep->xfer_buff = pBuf;
 80038ac:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->is_in = 1U;
 80038ae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 80038b2:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80038b6:	6800      	ldr	r0, [r0, #0]
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038b8:	b91d      	cbnz	r5, 80038c2 <HAL_PCD_EP_Transmit+0x30>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80038ba:	f002 fdcf 	bl	800645c <USB_EP0StartXfer>
}
 80038be:	2000      	movs	r0, #0
 80038c0:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80038c2:	f002 fe4d 	bl	8006560 <USB_EPStartXfer>
 80038c6:	e7fa      	b.n	80038be <HAL_PCD_EP_Transmit+0x2c>

080038c8 <HAL_PCD_EP_SetStall>:
{
 80038c8:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80038ca:	6843      	ldr	r3, [r0, #4]
 80038cc:	f001 050f 	and.w	r5, r1, #15
 80038d0:	429d      	cmp	r5, r3
{
 80038d2:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80038d4:	d82d      	bhi.n	8003932 <HAL_PCD_EP_SetStall+0x6a>
  if ((0x80U & ep_addr) == 0x80U)
 80038d6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80038da:	f04f 021c 	mov.w	r2, #28
 80038de:	d01e      	beq.n	800391e <HAL_PCD_EP_SetStall+0x56>
    ep->is_in = 1U;
 80038e0:	fb02 0105 	mla	r1, r2, r5, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038e4:	fb02 0305 	mla	r3, r2, r5, r0
    ep->is_in = 1U;
 80038e8:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038ea:	333c      	adds	r3, #60	; 0x3c
    ep->is_in = 1U;
 80038ec:	f881 203d 	strb.w	r2, [r1, #61]	; 0x3d
  ep->is_stall = 1U;
 80038f0:	2201      	movs	r2, #1
 80038f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038f4:	701d      	strb	r5, [r3, #0]
  __HAL_LOCK(hpcd);
 80038f6:	f894 13bc 	ldrb.w	r1, [r4, #956]	; 0x3bc
 80038fa:	4291      	cmp	r1, r2
 80038fc:	d01b      	beq.n	8003936 <HAL_PCD_EP_SetStall+0x6e>
 80038fe:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003902:	4619      	mov	r1, r3
 8003904:	6820      	ldr	r0, [r4, #0]
 8003906:	f002 fef1 	bl	80066ec <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800390a:	b925      	cbnz	r5, 8003916 <HAL_PCD_EP_SetStall+0x4e>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800390c:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8003910:	6820      	ldr	r0, [r4, #0]
 8003912:	f002 ffb9 	bl	8006888 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8003916:	2000      	movs	r0, #0
 8003918:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 800391c:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 800391e:	fb02 0301 	mla	r3, r2, r1, r0
    ep->is_in = 0U;
 8003922:	fb02 0101 	mla	r1, r2, r1, r0
 8003926:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8003928:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
    ep->is_in = 0U;
 800392c:	f881 21fd 	strb.w	r2, [r1, #509]	; 0x1fd
 8003930:	e7de      	b.n	80038f0 <HAL_PCD_EP_SetStall+0x28>
    return HAL_ERROR;
 8003932:	2001      	movs	r0, #1
 8003934:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8003936:	2002      	movs	r0, #2
}
 8003938:	bd38      	pop	{r3, r4, r5, pc}

0800393a <HAL_PCD_EP_ClrStall>:
{
 800393a:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800393c:	6843      	ldr	r3, [r0, #4]
 800393e:	f001 020f 	and.w	r2, r1, #15
 8003942:	429a      	cmp	r2, r3
{
 8003944:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003946:	d826      	bhi.n	8003996 <HAL_PCD_EP_ClrStall+0x5c>
 8003948:	231c      	movs	r3, #28
  if ((0x80U & ep_addr) == 0x80U)
 800394a:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800394e:	fb03 0102 	mla	r1, r3, r2, r0
 8003952:	bf19      	ittee	ne
 8003954:	313c      	addne	r1, #60	; 0x3c
    ep->is_in = 1U;
 8003956:	fb03 0302 	mlane	r3, r3, r2, r0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800395a:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 800395e:	fb03 4302 	mlaeq	r3, r3, r2, r4
    ep->is_in = 1U;
 8003962:	bf14      	ite	ne
 8003964:	2001      	movne	r0, #1
    ep->is_in = 0U;
 8003966:	2000      	moveq	r0, #0
  ep->is_stall = 0U;
 8003968:	f04f 0500 	mov.w	r5, #0
    ep->is_in = 1U;
 800396c:	bf14      	ite	ne
 800396e:	f883 003d 	strbne.w	r0, [r3, #61]	; 0x3d
    ep->is_in = 0U;
 8003972:	f883 01fd 	strbeq.w	r0, [r3, #509]	; 0x1fd
  ep->is_stall = 0U;
 8003976:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003978:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 800397a:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800397e:	2b01      	cmp	r3, #1
 8003980:	d00b      	beq.n	800399a <HAL_PCD_EP_ClrStall+0x60>
 8003982:	2301      	movs	r3, #1
 8003984:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003988:	6820      	ldr	r0, [r4, #0]
 800398a:	f002 fedc 	bl	8006746 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800398e:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
  return HAL_OK;
 8003992:	4628      	mov	r0, r5
 8003994:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003996:	2001      	movs	r0, #1
 8003998:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 800399a:	2002      	movs	r0, #2
}
 800399c:	bd38      	pop	{r3, r4, r5, pc}

0800399e <HAL_PCD_EP_Flush>:
  __HAL_LOCK(hpcd);
 800399e:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 80039a2:	2b01      	cmp	r3, #1
{
 80039a4:	b510      	push	{r4, lr}
 80039a6:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80039a8:	d011      	beq.n	80039ce <HAL_PCD_EP_Flush+0x30>
 80039aa:	2301      	movs	r3, #1
 80039ac:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  if ((ep_addr & 0x80U) == 0x80U)
 80039b0:	060b      	lsls	r3, r1, #24
 80039b2:	d508      	bpl.n	80039c6 <HAL_PCD_EP_Flush+0x28>
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80039b4:	f001 010f 	and.w	r1, r1, #15
 80039b8:	6800      	ldr	r0, [r0, #0]
 80039ba:	f002 fbff 	bl	80061bc <USB_FlushTxFifo>
  __HAL_UNLOCK(hpcd);
 80039be:	2000      	movs	r0, #0
 80039c0:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 80039c4:	bd10      	pop	{r4, pc}
    (void)USB_FlushRxFifo(hpcd->Instance);
 80039c6:	6800      	ldr	r0, [r0, #0]
 80039c8:	f002 fc0a 	bl	80061e0 <USB_FlushRxFifo>
 80039cc:	e7f7      	b.n	80039be <HAL_PCD_EP_Flush+0x20>
  __HAL_LOCK(hpcd);
 80039ce:	2002      	movs	r0, #2
}
 80039d0:	bd10      	pop	{r4, pc}

080039d2 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80039d2:	b570      	push	{r4, r5, r6, lr}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80039d4:	6804      	ldr	r4, [r0, #0]
 80039d6:	6a63      	ldr	r3, [r4, #36]	; 0x24

  if (fifo == 0U)
 80039d8:	b921      	cbnz	r1, 80039e4 <HAL_PCDEx_SetTxFiFo+0x12>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80039da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80039de:	62a3      	str	r3, [r4, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 80039e0:	2000      	movs	r0, #0
 80039e2:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80039e4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 80039e6:	1e4d      	subs	r5, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80039e8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80039ec:	2000      	movs	r0, #0
 80039ee:	1c46      	adds	r6, r0, #1
 80039f0:	b2c0      	uxtb	r0, r0
 80039f2:	4285      	cmp	r5, r0
 80039f4:	d806      	bhi.n	8003a04 <HAL_PCDEx_SetTxFiFo+0x32>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80039f6:	313f      	adds	r1, #63	; 0x3f
 80039f8:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80039fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003a00:	6063      	str	r3, [r4, #4]
 8003a02:	e7ed      	b.n	80039e0 <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003a04:	3040      	adds	r0, #64	; 0x40
 8003a06:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8003a0a:	6840      	ldr	r0, [r0, #4]
 8003a0c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003a10:	4630      	mov	r0, r6
 8003a12:	e7ec      	b.n	80039ee <HAL_PCDEx_SetTxFiFo+0x1c>

08003a14 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8003a14:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 8003a16:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8003a18:	6259      	str	r1, [r3, #36]	; 0x24
}
 8003a1a:	4770      	bx	lr

08003a1c <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a1c:	6802      	ldr	r2, [r0, #0]
{
 8003a1e:	4603      	mov	r3, r0

  hpcd->lpm_active = 1U;
 8003a20:	2101      	movs	r1, #1
 8003a22:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003a26:	2000      	movs	r0, #0
 8003a28:	f883 03f4 	strb.w	r0, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003a2c:	6993      	ldr	r3, [r2, #24]
 8003a2e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003a32:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003a34:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003a36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a3a:	f043 0303 	orr.w	r3, r3, #3
 8003a3e:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8003a40:	4770      	bx	lr
	...

08003a44 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a44:	4a02      	ldr	r2, [pc, #8]	; (8003a50 <HAL_PWR_EnableBkUpAccess+0xc>)
 8003a46:	6813      	ldr	r3, [r2, #0]
 8003a48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a4c:	6013      	str	r3, [r2, #0]
 8003a4e:	4770      	bx	lr
 8003a50:	40007000 	.word	0x40007000

08003a54 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003a54:	4b02      	ldr	r3, [pc, #8]	; (8003a60 <HAL_PWREx_GetVoltageRange+0xc>)
 8003a56:	6818      	ldr	r0, [r3, #0]
#endif
}
 8003a58:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	40007000 	.word	0x40007000

08003a64 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a64:	4b17      	ldr	r3, [pc, #92]	; (8003ac4 <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a66:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a68:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a6c:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a70:	d11c      	bne.n	8003aac <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a72:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8003a76:	d015      	beq.n	8003aa4 <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8003a7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a82:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a84:	4a10      	ldr	r2, [pc, #64]	; (8003ac8 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8003a86:	6811      	ldr	r1, [r2, #0]
 8003a88:	2232      	movs	r2, #50	; 0x32
 8003a8a:	434a      	muls	r2, r1
 8003a8c:	490f      	ldr	r1, [pc, #60]	; (8003acc <HAL_PWREx_ControlVoltageScaling+0x68>)
 8003a8e:	fbb2 f2f1 	udiv	r2, r2, r1
 8003a92:	4619      	mov	r1, r3
 8003a94:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a96:	6958      	ldr	r0, [r3, #20]
 8003a98:	0540      	lsls	r0, r0, #21
 8003a9a:	d500      	bpl.n	8003a9e <HAL_PWREx_ControlVoltageScaling+0x3a>
 8003a9c:	b922      	cbnz	r2, 8003aa8 <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a9e:	694b      	ldr	r3, [r1, #20]
 8003aa0:	055b      	lsls	r3, r3, #21
 8003aa2:	d40d      	bmi.n	8003ac0 <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003aa4:	2000      	movs	r0, #0
 8003aa6:	4770      	bx	lr
        wait_loop_index--;
 8003aa8:	3a01      	subs	r2, #1
 8003aaa:	e7f4      	b.n	8003a96 <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003aac:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003ab0:	bf1f      	itttt	ne
 8003ab2:	681a      	ldrne	r2, [r3, #0]
 8003ab4:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8003ab8:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8003abc:	601a      	strne	r2, [r3, #0]
 8003abe:	e7f1      	b.n	8003aa4 <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 8003ac0:	2003      	movs	r0, #3
}
 8003ac2:	4770      	bx	lr
 8003ac4:	40007000 	.word	0x40007000
 8003ac8:	20000000 	.word	0x20000000
 8003acc:	000f4240 	.word	0x000f4240

08003ad0 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003ad0:	4a02      	ldr	r2, [pc, #8]	; (8003adc <HAL_PWREx_EnableVddUSB+0xc>)
 8003ad2:	6853      	ldr	r3, [r2, #4]
 8003ad4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ad8:	6053      	str	r3, [r2, #4]
 8003ada:	4770      	bx	lr
 8003adc:	40007000 	.word	0x40007000

08003ae0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ae4:	9d06      	ldr	r5, [sp, #24]
 8003ae6:	4604      	mov	r4, r0
 8003ae8:	460f      	mov	r7, r1
 8003aea:	4616      	mov	r6, r2
 8003aec:	4698      	mov	r8, r3
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003aee:	6821      	ldr	r1, [r4, #0]
 8003af0:	688a      	ldr	r2, [r1, #8]
 8003af2:	423a      	tst	r2, r7
 8003af4:	bf14      	ite	ne
 8003af6:	2201      	movne	r2, #1
 8003af8:	2200      	moveq	r2, #0
 8003afa:	42b2      	cmp	r2, r6
 8003afc:	d102      	bne.n	8003b04 <QSPI_WaitFlagStateUntilTimeout+0x24>

        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8003afe:	2000      	movs	r0, #0
}
 8003b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8003b04:	1c6b      	adds	r3, r5, #1
 8003b06:	d0f3      	beq.n	8003af0 <QSPI_WaitFlagStateUntilTimeout+0x10>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b08:	f7fe fd02 	bl	8002510 <HAL_GetTick>
 8003b0c:	eba0 0008 	sub.w	r0, r0, r8
 8003b10:	4285      	cmp	r5, r0
 8003b12:	d301      	bcc.n	8003b18 <QSPI_WaitFlagStateUntilTimeout+0x38>
 8003b14:	2d00      	cmp	r5, #0
 8003b16:	d1ea      	bne.n	8003aee <QSPI_WaitFlagStateUntilTimeout+0xe>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003b18:	2304      	movs	r3, #4
 8003b1a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003b1e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003b20:	f043 0301 	orr.w	r3, r3, #1
 8003b24:	63e3      	str	r3, [r4, #60]	; 0x3c
 8003b26:	2001      	movs	r0, #1
 8003b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003b2c <HAL_QSPI_Init>:
{
 8003b2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b2e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003b30:	f7fe fcee 	bl	8002510 <HAL_GetTick>
 8003b34:	4605      	mov	r5, r0
  if(hqspi == NULL)
 8003b36:	2c00      	cmp	r4, #0
 8003b38:	d049      	beq.n	8003bce <HAL_QSPI_Init+0xa2>
  __HAL_LOCK(hqspi);
 8003b3a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d047      	beq.n	8003bd2 <HAL_QSPI_Init+0xa6>
 8003b42:	2301      	movs	r3, #1
 8003b44:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003b48:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8003b4c:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 8003b50:	b93a      	cbnz	r2, 8003b62 <HAL_QSPI_Init+0x36>
    hqspi->Lock = HAL_UNLOCKED;
 8003b52:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    HAL_QSPI_MspInit(hqspi);
 8003b56:	4620      	mov	r0, r4
 8003b58:	f7fe f9ba 	bl	8001ed0 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8003b5c:	f241 3388 	movw	r3, #5000	; 0x1388
 8003b60:	6423      	str	r3, [r4, #64]	; 0x40
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003b62:	6820      	ldr	r0, [r4, #0]
 8003b64:	68a1      	ldr	r1, [r4, #8]
 8003b66:	6802      	ldr	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003b68:	6c23      	ldr	r3, [r4, #64]	; 0x40
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003b6a:	3901      	subs	r1, #1
 8003b6c:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8003b70:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003b74:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003b76:	2120      	movs	r1, #32
 8003b78:	9300      	str	r3, [sp, #0]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	462b      	mov	r3, r5
 8003b7e:	4620      	mov	r0, r4
 8003b80:	f7ff ffae 	bl	8003ae0 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8003b84:	b9f0      	cbnz	r0, 8003bc4 <HAL_QSPI_Init+0x98>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8003b86:	6822      	ldr	r2, [r4, #0]
 8003b88:	6865      	ldr	r5, [r4, #4]
 8003b8a:	6811      	ldr	r1, [r2, #0]
 8003b8c:	68e3      	ldr	r3, [r4, #12]
 8003b8e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8003b92:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8003b96:	f021 0110 	bic.w	r1, r1, #16
 8003b9a:	430b      	orrs	r3, r1
 8003b9c:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003b9e:	69a1      	ldr	r1, [r4, #24]
 8003ba0:	6963      	ldr	r3, [r4, #20]
 8003ba2:	6855      	ldr	r5, [r2, #4]
 8003ba4:	430b      	orrs	r3, r1
 8003ba6:	6921      	ldr	r1, [r4, #16]
 8003ba8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8003bac:	490a      	ldr	r1, [pc, #40]	; (8003bd8 <HAL_QSPI_Init+0xac>)
 8003bae:	4029      	ands	r1, r5
 8003bb0:	430b      	orrs	r3, r1
 8003bb2:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8003bb4:	6813      	ldr	r3, [r2, #0]
 8003bb6:	f043 0301 	orr.w	r3, r3, #1
 8003bba:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 8003bbc:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003bbe:	63e0      	str	r0, [r4, #60]	; 0x3c
    hqspi->State = HAL_QSPI_STATE_READY;
 8003bc0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(hqspi);
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 8003bca:	b003      	add	sp, #12
 8003bcc:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8003bce:	2001      	movs	r0, #1
 8003bd0:	e7fb      	b.n	8003bca <HAL_QSPI_Init+0x9e>
  __HAL_LOCK(hqspi);
 8003bd2:	2002      	movs	r0, #2
 8003bd4:	e7f9      	b.n	8003bca <HAL_QSPI_Init+0x9e>
 8003bd6:	bf00      	nop
 8003bd8:	ffe0f8fe 	.word	0xffe0f8fe

08003bdc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003bdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003bde:	4d1e      	ldr	r5, [pc, #120]	; (8003c58 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8003be0:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003be2:	00da      	lsls	r2, r3, #3
{
 8003be4:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003be6:	d518      	bpl.n	8003c1a <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003be8:	f7ff ff34 	bl	8003a54 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bec:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003bf0:	d123      	bne.n	8003c3a <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003bf2:	2c80      	cmp	r4, #128	; 0x80
 8003bf4:	d929      	bls.n	8003c4a <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003bf6:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003bf8:	bf8c      	ite	hi
 8003bfa:	2002      	movhi	r0, #2
 8003bfc:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003bfe:	4a17      	ldr	r2, [pc, #92]	; (8003c5c <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8003c00:	6813      	ldr	r3, [r2, #0]
 8003c02:	f023 0307 	bic.w	r3, r3, #7
 8003c06:	4303      	orrs	r3, r0
 8003c08:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c0a:	6813      	ldr	r3, [r2, #0]
 8003c0c:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8003c10:	1a18      	subs	r0, r3, r0
 8003c12:	bf18      	it	ne
 8003c14:	2001      	movne	r0, #1
 8003c16:	b003      	add	sp, #12
 8003c18:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c1a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c20:	65ab      	str	r3, [r5, #88]	; 0x58
 8003c22:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c28:	9301      	str	r3, [sp, #4]
 8003c2a:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8003c2c:	f7ff ff12 	bl	8003a54 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8003c30:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003c32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c36:	65ab      	str	r3, [r5, #88]	; 0x58
 8003c38:	e7d8      	b.n	8003bec <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8003c3a:	2c80      	cmp	r4, #128	; 0x80
 8003c3c:	d807      	bhi.n	8003c4e <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8003c3e:	d008      	beq.n	8003c52 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8003c40:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8003c44:	4258      	negs	r0, r3
 8003c46:	4158      	adcs	r0, r3
 8003c48:	e7d9      	b.n	8003bfe <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003c4a:	2000      	movs	r0, #0
 8003c4c:	e7d7      	b.n	8003bfe <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8003c4e:	2003      	movs	r0, #3
 8003c50:	e7d5      	b.n	8003bfe <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c52:	2002      	movs	r0, #2
 8003c54:	e7d3      	b.n	8003bfe <RCC_SetFlashLatencyFromMSIRange+0x22>
 8003c56:	bf00      	nop
 8003c58:	40021000 	.word	0x40021000
 8003c5c:	40022000 	.word	0x40022000

08003c60 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c60:	4b22      	ldr	r3, [pc, #136]	; (8003cec <HAL_RCC_GetSysClockFreq+0x8c>)
 8003c62:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c64:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c66:	f012 020c 	ands.w	r2, r2, #12
 8003c6a:	d005      	beq.n	8003c78 <HAL_RCC_GetSysClockFreq+0x18>
 8003c6c:	2a0c      	cmp	r2, #12
 8003c6e:	d115      	bne.n	8003c9c <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c70:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003c74:	2901      	cmp	r1, #1
 8003c76:	d118      	bne.n	8003caa <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003c78:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8003c7a:	481d      	ldr	r0, [pc, #116]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003c7c:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c7e:	bf55      	itete	pl
 8003c80:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c84:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c86:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c8a:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8003c8e:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c92:	b34a      	cbz	r2, 8003ce8 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003c94:	2a0c      	cmp	r2, #12
 8003c96:	d009      	beq.n	8003cac <HAL_RCC_GetSysClockFreq+0x4c>
 8003c98:	2000      	movs	r0, #0
  return sysclockfreq;
 8003c9a:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003c9c:	2a04      	cmp	r2, #4
 8003c9e:	d022      	beq.n	8003ce6 <HAL_RCC_GetSysClockFreq+0x86>
 8003ca0:	2a08      	cmp	r2, #8
 8003ca2:	4814      	ldr	r0, [pc, #80]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003ca4:	bf18      	it	ne
 8003ca6:	2000      	movne	r0, #0
 8003ca8:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003caa:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003cac:	68da      	ldr	r2, [r3, #12]
 8003cae:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8003cb2:	2a02      	cmp	r2, #2
 8003cb4:	d015      	beq.n	8003ce2 <HAL_RCC_GetSysClockFreq+0x82>
      pllvco = HSE_VALUE;
 8003cb6:	490f      	ldr	r1, [pc, #60]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003cb8:	2a03      	cmp	r2, #3
 8003cba:	bf08      	it	eq
 8003cbc:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cbe:	68da      	ldr	r2, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003cc0:	68d9      	ldr	r1, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003cc8:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ccc:	f3c2 1202 	ubfx	r2, r2, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003cd0:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003cd2:	4348      	muls	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cd4:	3201      	adds	r2, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003cd6:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003cd8:	fbb0 f0f2 	udiv	r0, r0, r2
    sysclockfreq = pllvco / pllr;
 8003cdc:	fbb0 f0f3 	udiv	r0, r0, r3
 8003ce0:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8003ce2:	4805      	ldr	r0, [pc, #20]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003ce4:	e7eb      	b.n	8003cbe <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8003ce6:	4804      	ldr	r0, [pc, #16]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0x98>)
}
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	40021000 	.word	0x40021000
 8003cf0:	0801206c 	.word	0x0801206c
 8003cf4:	007a1200 	.word	0x007a1200
 8003cf8:	00f42400 	.word	0x00f42400

08003cfc <HAL_RCC_OscConfig>:
{
 8003cfc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8003d00:	4605      	mov	r5, r0
 8003d02:	b908      	cbnz	r0, 8003d08 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8003d04:	2001      	movs	r0, #1
 8003d06:	e047      	b.n	8003d98 <HAL_RCC_OscConfig+0x9c>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d08:	4ca6      	ldr	r4, [pc, #664]	; (8003fa4 <HAL_RCC_OscConfig+0x2a8>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d0a:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d0c:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d0e:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d10:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d12:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d16:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d1a:	d573      	bpl.n	8003e04 <HAL_RCC_OscConfig+0x108>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d1c:	b11e      	cbz	r6, 8003d26 <HAL_RCC_OscConfig+0x2a>
 8003d1e:	2e0c      	cmp	r6, #12
 8003d20:	d152      	bne.n	8003dc8 <HAL_RCC_OscConfig+0xcc>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003d22:	2f01      	cmp	r7, #1
 8003d24:	d150      	bne.n	8003dc8 <HAL_RCC_OscConfig+0xcc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d26:	6823      	ldr	r3, [r4, #0]
 8003d28:	0798      	lsls	r0, r3, #30
 8003d2a:	d502      	bpl.n	8003d32 <HAL_RCC_OscConfig+0x36>
 8003d2c:	69ab      	ldr	r3, [r5, #24]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d0e8      	beq.n	8003d04 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003d32:	6823      	ldr	r3, [r4, #0]
 8003d34:	6a28      	ldr	r0, [r5, #32]
 8003d36:	0719      	lsls	r1, r3, #28
 8003d38:	bf56      	itet	pl
 8003d3a:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8003d3e:	6823      	ldrmi	r3, [r4, #0]
 8003d40:	091b      	lsrpl	r3, r3, #4
 8003d42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d46:	4283      	cmp	r3, r0
 8003d48:	d229      	bcs.n	8003d9e <HAL_RCC_OscConfig+0xa2>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d4a:	f7ff ff47 	bl	8003bdc <RCC_SetFlashLatencyFromMSIRange>
 8003d4e:	2800      	cmp	r0, #0
 8003d50:	d1d8      	bne.n	8003d04 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d52:	6823      	ldr	r3, [r4, #0]
 8003d54:	f043 0308 	orr.w	r3, r3, #8
 8003d58:	6023      	str	r3, [r4, #0]
 8003d5a:	6823      	ldr	r3, [r4, #0]
 8003d5c:	6a2a      	ldr	r2, [r5, #32]
 8003d5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d62:	4313      	orrs	r3, r2
 8003d64:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d66:	6863      	ldr	r3, [r4, #4]
 8003d68:	69ea      	ldr	r2, [r5, #28]
 8003d6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d6e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003d72:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d74:	f7ff ff74 	bl	8003c60 <HAL_RCC_GetSysClockFreq>
 8003d78:	68a3      	ldr	r3, [r4, #8]
 8003d7a:	4a8b      	ldr	r2, [pc, #556]	; (8003fa8 <HAL_RCC_OscConfig+0x2ac>)
 8003d7c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003d80:	5cd3      	ldrb	r3, [r2, r3]
 8003d82:	f003 031f 	and.w	r3, r3, #31
 8003d86:	40d8      	lsrs	r0, r3
 8003d88:	4b88      	ldr	r3, [pc, #544]	; (8003fac <HAL_RCC_OscConfig+0x2b0>)
 8003d8a:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8003d8c:	4b88      	ldr	r3, [pc, #544]	; (8003fb0 <HAL_RCC_OscConfig+0x2b4>)
 8003d8e:	6818      	ldr	r0, [r3, #0]
 8003d90:	f7fe f998 	bl	80020c4 <HAL_InitTick>
        if(status != HAL_OK)
 8003d94:	2800      	cmp	r0, #0
 8003d96:	d035      	beq.n	8003e04 <HAL_RCC_OscConfig+0x108>
}
 8003d98:	b003      	add	sp, #12
 8003d9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d9e:	6823      	ldr	r3, [r4, #0]
 8003da0:	f043 0308 	orr.w	r3, r3, #8
 8003da4:	6023      	str	r3, [r4, #0]
 8003da6:	6823      	ldr	r3, [r4, #0]
 8003da8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003dac:	4303      	orrs	r3, r0
 8003dae:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003db0:	6863      	ldr	r3, [r4, #4]
 8003db2:	69ea      	ldr	r2, [r5, #28]
 8003db4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003db8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003dbc:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003dbe:	f7ff ff0d 	bl	8003bdc <RCC_SetFlashLatencyFromMSIRange>
 8003dc2:	2800      	cmp	r0, #0
 8003dc4:	d0d6      	beq.n	8003d74 <HAL_RCC_OscConfig+0x78>
 8003dc6:	e79d      	b.n	8003d04 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003dc8:	69ab      	ldr	r3, [r5, #24]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d036      	beq.n	8003e3c <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_MSI_ENABLE();
 8003dce:	6823      	ldr	r3, [r4, #0]
 8003dd0:	f043 0301 	orr.w	r3, r3, #1
 8003dd4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003dd6:	f7fe fb9b 	bl	8002510 <HAL_GetTick>
 8003dda:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ddc:	6823      	ldr	r3, [r4, #0]
 8003dde:	079a      	lsls	r2, r3, #30
 8003de0:	d524      	bpl.n	8003e2c <HAL_RCC_OscConfig+0x130>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003de2:	6823      	ldr	r3, [r4, #0]
 8003de4:	f043 0308 	orr.w	r3, r3, #8
 8003de8:	6023      	str	r3, [r4, #0]
 8003dea:	6823      	ldr	r3, [r4, #0]
 8003dec:	6a2a      	ldr	r2, [r5, #32]
 8003dee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003df2:	4313      	orrs	r3, r2
 8003df4:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003df6:	6863      	ldr	r3, [r4, #4]
 8003df8:	69ea      	ldr	r2, [r5, #28]
 8003dfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dfe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003e02:	6063      	str	r3, [r4, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e04:	682b      	ldr	r3, [r5, #0]
 8003e06:	07d8      	lsls	r0, r3, #31
 8003e08:	d429      	bmi.n	8003e5e <HAL_RCC_OscConfig+0x162>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e0a:	682b      	ldr	r3, [r5, #0]
 8003e0c:	0799      	lsls	r1, r3, #30
 8003e0e:	d467      	bmi.n	8003ee0 <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e10:	682b      	ldr	r3, [r5, #0]
 8003e12:	0718      	lsls	r0, r3, #28
 8003e14:	f100 809c 	bmi.w	8003f50 <HAL_RCC_OscConfig+0x254>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e18:	682b      	ldr	r3, [r5, #0]
 8003e1a:	0759      	lsls	r1, r3, #29
 8003e1c:	f100 80ca 	bmi.w	8003fb4 <HAL_RCC_OscConfig+0x2b8>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e20:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8003e22:	2800      	cmp	r0, #0
 8003e24:	f040 8133 	bne.w	800408e <HAL_RCC_OscConfig+0x392>
  return HAL_OK;
 8003e28:	2000      	movs	r0, #0
 8003e2a:	e7b5      	b.n	8003d98 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e2c:	f7fe fb70 	bl	8002510 <HAL_GetTick>
 8003e30:	eba0 0008 	sub.w	r0, r0, r8
 8003e34:	2802      	cmp	r0, #2
 8003e36:	d9d1      	bls.n	8003ddc <HAL_RCC_OscConfig+0xe0>
            return HAL_TIMEOUT;
 8003e38:	2003      	movs	r0, #3
 8003e3a:	e7ad      	b.n	8003d98 <HAL_RCC_OscConfig+0x9c>
        __HAL_RCC_MSI_DISABLE();
 8003e3c:	6823      	ldr	r3, [r4, #0]
 8003e3e:	f023 0301 	bic.w	r3, r3, #1
 8003e42:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003e44:	f7fe fb64 	bl	8002510 <HAL_GetTick>
 8003e48:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e4a:	6823      	ldr	r3, [r4, #0]
 8003e4c:	079b      	lsls	r3, r3, #30
 8003e4e:	d5d9      	bpl.n	8003e04 <HAL_RCC_OscConfig+0x108>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e50:	f7fe fb5e 	bl	8002510 <HAL_GetTick>
 8003e54:	eba0 0008 	sub.w	r0, r0, r8
 8003e58:	2802      	cmp	r0, #2
 8003e5a:	d9f6      	bls.n	8003e4a <HAL_RCC_OscConfig+0x14e>
 8003e5c:	e7ec      	b.n	8003e38 <HAL_RCC_OscConfig+0x13c>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003e5e:	2e08      	cmp	r6, #8
 8003e60:	d003      	beq.n	8003e6a <HAL_RCC_OscConfig+0x16e>
 8003e62:	2e0c      	cmp	r6, #12
 8003e64:	d108      	bne.n	8003e78 <HAL_RCC_OscConfig+0x17c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003e66:	2f03      	cmp	r7, #3
 8003e68:	d106      	bne.n	8003e78 <HAL_RCC_OscConfig+0x17c>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e6a:	6823      	ldr	r3, [r4, #0]
 8003e6c:	039a      	lsls	r2, r3, #14
 8003e6e:	d5cc      	bpl.n	8003e0a <HAL_RCC_OscConfig+0x10e>
 8003e70:	686b      	ldr	r3, [r5, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1c9      	bne.n	8003e0a <HAL_RCC_OscConfig+0x10e>
 8003e76:	e745      	b.n	8003d04 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e78:	686b      	ldr	r3, [r5, #4]
 8003e7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e7e:	d110      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x1a6>
 8003e80:	6823      	ldr	r3, [r4, #0]
 8003e82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e86:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003e88:	f7fe fb42 	bl	8002510 <HAL_GetTick>
 8003e8c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e8e:	6823      	ldr	r3, [r4, #0]
 8003e90:	039b      	lsls	r3, r3, #14
 8003e92:	d4ba      	bmi.n	8003e0a <HAL_RCC_OscConfig+0x10e>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e94:	f7fe fb3c 	bl	8002510 <HAL_GetTick>
 8003e98:	eba0 0008 	sub.w	r0, r0, r8
 8003e9c:	2864      	cmp	r0, #100	; 0x64
 8003e9e:	d9f6      	bls.n	8003e8e <HAL_RCC_OscConfig+0x192>
 8003ea0:	e7ca      	b.n	8003e38 <HAL_RCC_OscConfig+0x13c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ea2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ea6:	d104      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x1b6>
 8003ea8:	6823      	ldr	r3, [r4, #0]
 8003eaa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003eae:	6023      	str	r3, [r4, #0]
 8003eb0:	e7e6      	b.n	8003e80 <HAL_RCC_OscConfig+0x184>
 8003eb2:	6822      	ldr	r2, [r4, #0]
 8003eb4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003eb8:	6022      	str	r2, [r4, #0]
 8003eba:	6822      	ldr	r2, [r4, #0]
 8003ebc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ec0:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1e0      	bne.n	8003e88 <HAL_RCC_OscConfig+0x18c>
        tickstart = HAL_GetTick();
 8003ec6:	f7fe fb23 	bl	8002510 <HAL_GetTick>
 8003eca:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ecc:	6823      	ldr	r3, [r4, #0]
 8003ece:	0398      	lsls	r0, r3, #14
 8003ed0:	d59b      	bpl.n	8003e0a <HAL_RCC_OscConfig+0x10e>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ed2:	f7fe fb1d 	bl	8002510 <HAL_GetTick>
 8003ed6:	eba0 0008 	sub.w	r0, r0, r8
 8003eda:	2864      	cmp	r0, #100	; 0x64
 8003edc:	d9f6      	bls.n	8003ecc <HAL_RCC_OscConfig+0x1d0>
 8003ede:	e7ab      	b.n	8003e38 <HAL_RCC_OscConfig+0x13c>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003ee0:	2e04      	cmp	r6, #4
 8003ee2:	d003      	beq.n	8003eec <HAL_RCC_OscConfig+0x1f0>
 8003ee4:	2e0c      	cmp	r6, #12
 8003ee6:	d110      	bne.n	8003f0a <HAL_RCC_OscConfig+0x20e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003ee8:	2f02      	cmp	r7, #2
 8003eea:	d10e      	bne.n	8003f0a <HAL_RCC_OscConfig+0x20e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003eec:	6823      	ldr	r3, [r4, #0]
 8003eee:	0559      	lsls	r1, r3, #21
 8003ef0:	d503      	bpl.n	8003efa <HAL_RCC_OscConfig+0x1fe>
 8003ef2:	68eb      	ldr	r3, [r5, #12]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f43f af05 	beq.w	8003d04 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003efa:	6863      	ldr	r3, [r4, #4]
 8003efc:	692a      	ldr	r2, [r5, #16]
 8003efe:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8003f02:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003f06:	6063      	str	r3, [r4, #4]
 8003f08:	e782      	b.n	8003e10 <HAL_RCC_OscConfig+0x114>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f0a:	68eb      	ldr	r3, [r5, #12]
 8003f0c:	b17b      	cbz	r3, 8003f2e <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_HSI_ENABLE();
 8003f0e:	6823      	ldr	r3, [r4, #0]
 8003f10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f14:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003f16:	f7fe fafb 	bl	8002510 <HAL_GetTick>
 8003f1a:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f1c:	6823      	ldr	r3, [r4, #0]
 8003f1e:	055a      	lsls	r2, r3, #21
 8003f20:	d4eb      	bmi.n	8003efa <HAL_RCC_OscConfig+0x1fe>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f22:	f7fe faf5 	bl	8002510 <HAL_GetTick>
 8003f26:	1bc0      	subs	r0, r0, r7
 8003f28:	2802      	cmp	r0, #2
 8003f2a:	d9f7      	bls.n	8003f1c <HAL_RCC_OscConfig+0x220>
 8003f2c:	e784      	b.n	8003e38 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_DISABLE();
 8003f2e:	6823      	ldr	r3, [r4, #0]
 8003f30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f34:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003f36:	f7fe faeb 	bl	8002510 <HAL_GetTick>
 8003f3a:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f3c:	6823      	ldr	r3, [r4, #0]
 8003f3e:	055b      	lsls	r3, r3, #21
 8003f40:	f57f af66 	bpl.w	8003e10 <HAL_RCC_OscConfig+0x114>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f44:	f7fe fae4 	bl	8002510 <HAL_GetTick>
 8003f48:	1bc0      	subs	r0, r0, r7
 8003f4a:	2802      	cmp	r0, #2
 8003f4c:	d9f6      	bls.n	8003f3c <HAL_RCC_OscConfig+0x240>
 8003f4e:	e773      	b.n	8003e38 <HAL_RCC_OscConfig+0x13c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f50:	696b      	ldr	r3, [r5, #20]
 8003f52:	b19b      	cbz	r3, 8003f7c <HAL_RCC_OscConfig+0x280>
      __HAL_RCC_LSI_ENABLE();
 8003f54:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003f58:	f043 0301 	orr.w	r3, r3, #1
 8003f5c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003f60:	f7fe fad6 	bl	8002510 <HAL_GetTick>
 8003f64:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f66:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003f6a:	079a      	lsls	r2, r3, #30
 8003f6c:	f53f af54 	bmi.w	8003e18 <HAL_RCC_OscConfig+0x11c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f70:	f7fe face 	bl	8002510 <HAL_GetTick>
 8003f74:	1bc0      	subs	r0, r0, r7
 8003f76:	2802      	cmp	r0, #2
 8003f78:	d9f5      	bls.n	8003f66 <HAL_RCC_OscConfig+0x26a>
 8003f7a:	e75d      	b.n	8003e38 <HAL_RCC_OscConfig+0x13c>
      __HAL_RCC_LSI_DISABLE();
 8003f7c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003f80:	f023 0301 	bic.w	r3, r3, #1
 8003f84:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003f88:	f7fe fac2 	bl	8002510 <HAL_GetTick>
 8003f8c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f8e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003f92:	079b      	lsls	r3, r3, #30
 8003f94:	f57f af40 	bpl.w	8003e18 <HAL_RCC_OscConfig+0x11c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f98:	f7fe faba 	bl	8002510 <HAL_GetTick>
 8003f9c:	1bc0      	subs	r0, r0, r7
 8003f9e:	2802      	cmp	r0, #2
 8003fa0:	d9f5      	bls.n	8003f8e <HAL_RCC_OscConfig+0x292>
 8003fa2:	e749      	b.n	8003e38 <HAL_RCC_OscConfig+0x13c>
 8003fa4:	40021000 	.word	0x40021000
 8003fa8:	08012051 	.word	0x08012051
 8003fac:	20000000 	.word	0x20000000
 8003fb0:	20000008 	.word	0x20000008
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003fb4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003fb6:	00d8      	lsls	r0, r3, #3
 8003fb8:	d429      	bmi.n	800400e <HAL_RCC_OscConfig+0x312>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fc0:	65a3      	str	r3, [r4, #88]	; 0x58
 8003fc2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fc8:	9301      	str	r3, [sp, #4]
 8003fca:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003fcc:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fd0:	4f79      	ldr	r7, [pc, #484]	; (80041b8 <HAL_RCC_OscConfig+0x4bc>)
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	05d9      	lsls	r1, r3, #23
 8003fd6:	d51d      	bpl.n	8004014 <HAL_RCC_OscConfig+0x318>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fd8:	68ab      	ldr	r3, [r5, #8]
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d12b      	bne.n	8004036 <HAL_RCC_OscConfig+0x33a>
 8003fde:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003fe2:	f043 0301 	orr.w	r3, r3, #1
 8003fe6:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8003fea:	f7fe fa91 	bl	8002510 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fee:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003ff2:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ff4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003ff8:	079b      	lsls	r3, r3, #30
 8003ffa:	d542      	bpl.n	8004082 <HAL_RCC_OscConfig+0x386>
    if(pwrclkchanged == SET)
 8003ffc:	f1b8 0f00 	cmp.w	r8, #0
 8004000:	f43f af0e 	beq.w	8003e20 <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004004:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004006:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800400a:	65a3      	str	r3, [r4, #88]	; 0x58
 800400c:	e708      	b.n	8003e20 <HAL_RCC_OscConfig+0x124>
    FlagStatus       pwrclkchanged = RESET;
 800400e:	f04f 0800 	mov.w	r8, #0
 8004012:	e7dd      	b.n	8003fd0 <HAL_RCC_OscConfig+0x2d4>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800401a:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800401c:	f7fe fa78 	bl	8002510 <HAL_GetTick>
 8004020:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	05da      	lsls	r2, r3, #23
 8004026:	d4d7      	bmi.n	8003fd8 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004028:	f7fe fa72 	bl	8002510 <HAL_GetTick>
 800402c:	eba0 0009 	sub.w	r0, r0, r9
 8004030:	2802      	cmp	r0, #2
 8004032:	d9f6      	bls.n	8004022 <HAL_RCC_OscConfig+0x326>
 8004034:	e700      	b.n	8003e38 <HAL_RCC_OscConfig+0x13c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004036:	2b05      	cmp	r3, #5
 8004038:	d106      	bne.n	8004048 <HAL_RCC_OscConfig+0x34c>
 800403a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800403e:	f043 0304 	orr.w	r3, r3, #4
 8004042:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8004046:	e7ca      	b.n	8003fde <HAL_RCC_OscConfig+0x2e2>
 8004048:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800404c:	f022 0201 	bic.w	r2, r2, #1
 8004050:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8004054:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8004058:	f022 0204 	bic.w	r2, r2, #4
 800405c:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1c2      	bne.n	8003fea <HAL_RCC_OscConfig+0x2ee>
      tickstart = HAL_GetTick();
 8004064:	f7fe fa54 	bl	8002510 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004068:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800406c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800406e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004072:	0798      	lsls	r0, r3, #30
 8004074:	d5c2      	bpl.n	8003ffc <HAL_RCC_OscConfig+0x300>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004076:	f7fe fa4b 	bl	8002510 <HAL_GetTick>
 800407a:	1bc0      	subs	r0, r0, r7
 800407c:	4548      	cmp	r0, r9
 800407e:	d9f6      	bls.n	800406e <HAL_RCC_OscConfig+0x372>
 8004080:	e6da      	b.n	8003e38 <HAL_RCC_OscConfig+0x13c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004082:	f7fe fa45 	bl	8002510 <HAL_GetTick>
 8004086:	1bc0      	subs	r0, r0, r7
 8004088:	4548      	cmp	r0, r9
 800408a:	d9b3      	bls.n	8003ff4 <HAL_RCC_OscConfig+0x2f8>
 800408c:	e6d4      	b.n	8003e38 <HAL_RCC_OscConfig+0x13c>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 800408e:	2e0c      	cmp	r6, #12
 8004090:	d05c      	beq.n	800414c <HAL_RCC_OscConfig+0x450>
        __HAL_RCC_PLL_DISABLE();
 8004092:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004094:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8004096:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800409a:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800409c:	d13b      	bne.n	8004116 <HAL_RCC_OscConfig+0x41a>
        tickstart = HAL_GetTick();
 800409e:	f7fe fa37 	bl	8002510 <HAL_GetTick>
 80040a2:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040a4:	6823      	ldr	r3, [r4, #0]
 80040a6:	0199      	lsls	r1, r3, #6
 80040a8:	d42f      	bmi.n	800410a <HAL_RCC_OscConfig+0x40e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040aa:	68e2      	ldr	r2, [r4, #12]
 80040ac:	4b43      	ldr	r3, [pc, #268]	; (80041bc <HAL_RCC_OscConfig+0x4c0>)
 80040ae:	4013      	ands	r3, r2
 80040b0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80040b2:	4313      	orrs	r3, r2
 80040b4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80040b6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80040ba:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80040bc:	3a01      	subs	r2, #1
 80040be:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80040c2:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80040c4:	0912      	lsrs	r2, r2, #4
 80040c6:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 80040ca:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80040cc:	0852      	lsrs	r2, r2, #1
 80040ce:	3a01      	subs	r2, #1
 80040d0:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80040d4:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80040d6:	0852      	lsrs	r2, r2, #1
 80040d8:	3a01      	subs	r2, #1
 80040da:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80040de:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 80040e0:	6823      	ldr	r3, [r4, #0]
 80040e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040e6:	6023      	str	r3, [r4, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040e8:	68e3      	ldr	r3, [r4, #12]
 80040ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040ee:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80040f0:	f7fe fa0e 	bl	8002510 <HAL_GetTick>
 80040f4:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040f6:	6823      	ldr	r3, [r4, #0]
 80040f8:	019a      	lsls	r2, r3, #6
 80040fa:	f53f ae95 	bmi.w	8003e28 <HAL_RCC_OscConfig+0x12c>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040fe:	f7fe fa07 	bl	8002510 <HAL_GetTick>
 8004102:	1b40      	subs	r0, r0, r5
 8004104:	2802      	cmp	r0, #2
 8004106:	d9f6      	bls.n	80040f6 <HAL_RCC_OscConfig+0x3fa>
 8004108:	e696      	b.n	8003e38 <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800410a:	f7fe fa01 	bl	8002510 <HAL_GetTick>
 800410e:	1b80      	subs	r0, r0, r6
 8004110:	2802      	cmp	r0, #2
 8004112:	d9c7      	bls.n	80040a4 <HAL_RCC_OscConfig+0x3a8>
 8004114:	e690      	b.n	8003e38 <HAL_RCC_OscConfig+0x13c>
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004116:	6823      	ldr	r3, [r4, #0]
 8004118:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800411c:	bf02      	ittt	eq
 800411e:	68e3      	ldreq	r3, [r4, #12]
 8004120:	f023 0303 	biceq.w	r3, r3, #3
 8004124:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004126:	68e3      	ldr	r3, [r4, #12]
 8004128:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800412c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004130:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8004132:	f7fe f9ed 	bl	8002510 <HAL_GetTick>
 8004136:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004138:	6823      	ldr	r3, [r4, #0]
 800413a:	019b      	lsls	r3, r3, #6
 800413c:	f57f ae74 	bpl.w	8003e28 <HAL_RCC_OscConfig+0x12c>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004140:	f7fe f9e6 	bl	8002510 <HAL_GetTick>
 8004144:	1b40      	subs	r0, r0, r5
 8004146:	2802      	cmp	r0, #2
 8004148:	d9f6      	bls.n	8004138 <HAL_RCC_OscConfig+0x43c>
 800414a:	e675      	b.n	8003e38 <HAL_RCC_OscConfig+0x13c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800414c:	2801      	cmp	r0, #1
 800414e:	f43f ae23 	beq.w	8003d98 <HAL_RCC_OscConfig+0x9c>
        pll_config = RCC->PLLCFGR;
 8004152:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004154:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8004156:	f003 0103 	and.w	r1, r3, #3
 800415a:	4291      	cmp	r1, r2
 800415c:	f47f add2 	bne.w	8003d04 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004160:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8004162:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004166:	3901      	subs	r1, #1
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004168:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 800416c:	f47f adca 	bne.w	8003d04 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004170:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8004172:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004176:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 800417a:	f47f adc3 	bne.w	8003d04 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800417e:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8004180:	3a07      	subs	r2, #7
 8004182:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 8004186:	bf18      	it	ne
 8004188:	2201      	movne	r2, #1
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800418a:	4291      	cmp	r1, r2
 800418c:	f47f adba 	bne.w	8003d04 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004190:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8004192:	0852      	lsrs	r2, r2, #1
 8004194:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8004198:	3a01      	subs	r2, #1
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800419a:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 800419e:	f47f adb1 	bne.w	8003d04 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80041a2:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80041a4:	0852      	lsrs	r2, r2, #1
 80041a6:	3a01      	subs	r2, #1
 80041a8:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041ac:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
    return HAL_ERROR;
 80041b0:	bf14      	ite	ne
 80041b2:	2001      	movne	r0, #1
 80041b4:	2000      	moveq	r0, #0
 80041b6:	e5ef      	b.n	8003d98 <HAL_RCC_OscConfig+0x9c>
 80041b8:	40007000 	.word	0x40007000
 80041bc:	f99d808c 	.word	0xf99d808c

080041c0 <HAL_RCC_ClockConfig>:
{
 80041c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041c4:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 80041c6:	4604      	mov	r4, r0
 80041c8:	b910      	cbnz	r0, 80041d0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80041ca:	2001      	movs	r0, #1
 80041cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041d0:	4a41      	ldr	r2, [pc, #260]	; (80042d8 <HAL_RCC_ClockConfig+0x118>)
 80041d2:	6813      	ldr	r3, [r2, #0]
 80041d4:	f003 0307 	and.w	r3, r3, #7
 80041d8:	428b      	cmp	r3, r1
 80041da:	d32a      	bcc.n	8004232 <HAL_RCC_ClockConfig+0x72>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041dc:	6823      	ldr	r3, [r4, #0]
 80041de:	07d9      	lsls	r1, r3, #31
 80041e0:	d432      	bmi.n	8004248 <HAL_RCC_ClockConfig+0x88>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041e2:	6821      	ldr	r1, [r4, #0]
 80041e4:	078a      	lsls	r2, r1, #30
 80041e6:	d45c      	bmi.n	80042a2 <HAL_RCC_ClockConfig+0xe2>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041e8:	4a3b      	ldr	r2, [pc, #236]	; (80042d8 <HAL_RCC_ClockConfig+0x118>)
 80041ea:	6813      	ldr	r3, [r2, #0]
 80041ec:	f003 0307 	and.w	r3, r3, #7
 80041f0:	429e      	cmp	r6, r3
 80041f2:	d35e      	bcc.n	80042b2 <HAL_RCC_ClockConfig+0xf2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041f4:	f011 0f04 	tst.w	r1, #4
 80041f8:	4d38      	ldr	r5, [pc, #224]	; (80042dc <HAL_RCC_ClockConfig+0x11c>)
 80041fa:	d165      	bne.n	80042c8 <HAL_RCC_ClockConfig+0x108>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041fc:	070b      	lsls	r3, r1, #28
 80041fe:	d506      	bpl.n	800420e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004200:	68ab      	ldr	r3, [r5, #8]
 8004202:	6922      	ldr	r2, [r4, #16]
 8004204:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004208:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800420c:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800420e:	f7ff fd27 	bl	8003c60 <HAL_RCC_GetSysClockFreq>
 8004212:	68ab      	ldr	r3, [r5, #8]
 8004214:	4a32      	ldr	r2, [pc, #200]	; (80042e0 <HAL_RCC_ClockConfig+0x120>)
 8004216:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 800421a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800421e:	5cd3      	ldrb	r3, [r2, r3]
 8004220:	f003 031f 	and.w	r3, r3, #31
 8004224:	40d8      	lsrs	r0, r3
 8004226:	4b2f      	ldr	r3, [pc, #188]	; (80042e4 <HAL_RCC_ClockConfig+0x124>)
 8004228:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 800422a:	4b2f      	ldr	r3, [pc, #188]	; (80042e8 <HAL_RCC_ClockConfig+0x128>)
 800422c:	6818      	ldr	r0, [r3, #0]
 800422e:	f7fd bf49 	b.w	80020c4 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004232:	6813      	ldr	r3, [r2, #0]
 8004234:	f023 0307 	bic.w	r3, r3, #7
 8004238:	430b      	orrs	r3, r1
 800423a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800423c:	6813      	ldr	r3, [r2, #0]
 800423e:	f003 0307 	and.w	r3, r3, #7
 8004242:	4299      	cmp	r1, r3
 8004244:	d1c1      	bne.n	80041ca <HAL_RCC_ClockConfig+0xa>
 8004246:	e7c9      	b.n	80041dc <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004248:	6862      	ldr	r2, [r4, #4]
 800424a:	4d24      	ldr	r5, [pc, #144]	; (80042dc <HAL_RCC_ClockConfig+0x11c>)
 800424c:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800424e:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004250:	d11b      	bne.n	800428a <HAL_RCC_ClockConfig+0xca>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004252:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004256:	d0b8      	beq.n	80041ca <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004258:	68ab      	ldr	r3, [r5, #8]
 800425a:	f023 0303 	bic.w	r3, r3, #3
 800425e:	4313      	orrs	r3, r2
 8004260:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8004262:	f7fe f955 	bl	8002510 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004266:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800426a:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800426c:	68ab      	ldr	r3, [r5, #8]
 800426e:	6862      	ldr	r2, [r4, #4]
 8004270:	f003 030c 	and.w	r3, r3, #12
 8004274:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004278:	d0b3      	beq.n	80041e2 <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800427a:	f7fe f949 	bl	8002510 <HAL_GetTick>
 800427e:	1bc0      	subs	r0, r0, r7
 8004280:	4540      	cmp	r0, r8
 8004282:	d9f3      	bls.n	800426c <HAL_RCC_ClockConfig+0xac>
        return HAL_TIMEOUT;
 8004284:	2003      	movs	r0, #3
}
 8004286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800428a:	2a02      	cmp	r2, #2
 800428c:	d102      	bne.n	8004294 <HAL_RCC_ClockConfig+0xd4>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800428e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004292:	e7e0      	b.n	8004256 <HAL_RCC_ClockConfig+0x96>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004294:	b912      	cbnz	r2, 800429c <HAL_RCC_ClockConfig+0xdc>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004296:	f013 0f02 	tst.w	r3, #2
 800429a:	e7dc      	b.n	8004256 <HAL_RCC_ClockConfig+0x96>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800429c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80042a0:	e7d9      	b.n	8004256 <HAL_RCC_ClockConfig+0x96>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042a2:	4a0e      	ldr	r2, [pc, #56]	; (80042dc <HAL_RCC_ClockConfig+0x11c>)
 80042a4:	68a0      	ldr	r0, [r4, #8]
 80042a6:	6893      	ldr	r3, [r2, #8]
 80042a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042ac:	4303      	orrs	r3, r0
 80042ae:	6093      	str	r3, [r2, #8]
 80042b0:	e79a      	b.n	80041e8 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042b2:	6813      	ldr	r3, [r2, #0]
 80042b4:	f023 0307 	bic.w	r3, r3, #7
 80042b8:	4333      	orrs	r3, r6
 80042ba:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042bc:	6813      	ldr	r3, [r2, #0]
 80042be:	f003 0307 	and.w	r3, r3, #7
 80042c2:	429e      	cmp	r6, r3
 80042c4:	d181      	bne.n	80041ca <HAL_RCC_ClockConfig+0xa>
 80042c6:	e795      	b.n	80041f4 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042c8:	68ab      	ldr	r3, [r5, #8]
 80042ca:	68e2      	ldr	r2, [r4, #12]
 80042cc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80042d0:	4313      	orrs	r3, r2
 80042d2:	60ab      	str	r3, [r5, #8]
 80042d4:	e792      	b.n	80041fc <HAL_RCC_ClockConfig+0x3c>
 80042d6:	bf00      	nop
 80042d8:	40022000 	.word	0x40022000
 80042dc:	40021000 	.word	0x40021000
 80042e0:	08012051 	.word	0x08012051
 80042e4:	20000000 	.word	0x20000000
 80042e8:	20000008 	.word	0x20000008

080042ec <HAL_RCC_GetHCLKFreq>:
}
 80042ec:	4b01      	ldr	r3, [pc, #4]	; (80042f4 <HAL_RCC_GetHCLKFreq+0x8>)
 80042ee:	6818      	ldr	r0, [r3, #0]
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	20000000 	.word	0x20000000

080042f8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80042f8:	4b05      	ldr	r3, [pc, #20]	; (8004310 <HAL_RCC_GetPCLK1Freq+0x18>)
 80042fa:	4a06      	ldr	r2, [pc, #24]	; (8004314 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004302:	5cd3      	ldrb	r3, [r2, r3]
 8004304:	4a04      	ldr	r2, [pc, #16]	; (8004318 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004306:	6810      	ldr	r0, [r2, #0]
 8004308:	f003 031f 	and.w	r3, r3, #31
}
 800430c:	40d8      	lsrs	r0, r3
 800430e:	4770      	bx	lr
 8004310:	40021000 	.word	0x40021000
 8004314:	08012061 	.word	0x08012061
 8004318:	20000000 	.word	0x20000000

0800431c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800431c:	4b05      	ldr	r3, [pc, #20]	; (8004334 <HAL_RCC_GetPCLK2Freq+0x18>)
 800431e:	4a06      	ldr	r2, [pc, #24]	; (8004338 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004326:	5cd3      	ldrb	r3, [r2, r3]
 8004328:	4a04      	ldr	r2, [pc, #16]	; (800433c <HAL_RCC_GetPCLK2Freq+0x20>)
 800432a:	6810      	ldr	r0, [r2, #0]
 800432c:	f003 031f 	and.w	r3, r3, #31
}
 8004330:	40d8      	lsrs	r0, r3
 8004332:	4770      	bx	lr
 8004334:	40021000 	.word	0x40021000
 8004338:	08012061 	.word	0x08012061
 800433c:	20000000 	.word	0x20000000

08004340 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004340:	230f      	movs	r3, #15
 8004342:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004344:	4b0b      	ldr	r3, [pc, #44]	; (8004374 <HAL_RCC_GetClockConfig+0x34>)
 8004346:	689a      	ldr	r2, [r3, #8]
 8004348:	f002 0203 	and.w	r2, r2, #3
 800434c:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800434e:	689a      	ldr	r2, [r3, #8]
 8004350:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8004354:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004356:	689a      	ldr	r2, [r3, #8]
 8004358:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800435c:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	08db      	lsrs	r3, r3, #3
 8004362:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004366:	6103      	str	r3, [r0, #16]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004368:	4b03      	ldr	r3, [pc, #12]	; (8004378 <HAL_RCC_GetClockConfig+0x38>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0307 	and.w	r3, r3, #7
 8004370:	600b      	str	r3, [r1, #0]
 8004372:	4770      	bx	lr
 8004374:	40021000 	.word	0x40021000
 8004378:	40022000 	.word	0x40022000

0800437c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800437c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800437e:	4b45      	ldr	r3, [pc, #276]	; (8004494 <RCCEx_PLLSAI1_Config+0x118>)
 8004380:	68da      	ldr	r2, [r3, #12]
 8004382:	f012 0f03 	tst.w	r2, #3
{
 8004386:	4605      	mov	r5, r0
 8004388:	460e      	mov	r6, r1
 800438a:	461c      	mov	r4, r3
 800438c:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800438e:	d02a      	beq.n	80043e6 <RCCEx_PLLSAI1_Config+0x6a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004390:	68da      	ldr	r2, [r3, #12]
 8004392:	f002 0203 	and.w	r2, r2, #3
 8004396:	4282      	cmp	r2, r0
 8004398:	d13c      	bne.n	8004414 <RCCEx_PLLSAI1_Config+0x98>
       ||
 800439a:	2a00      	cmp	r2, #0
 800439c:	d03a      	beq.n	8004414 <RCCEx_PLLSAI1_Config+0x98>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800439e:	68db      	ldr	r3, [r3, #12]
       ||
 80043a0:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80043a2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80043a6:	3301      	adds	r3, #1
       ||
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d133      	bne.n	8004414 <RCCEx_PLLSAI1_Config+0x98>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80043ac:	6823      	ldr	r3, [r4, #0]
 80043ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80043b2:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043b4:	f7fe f8ac 	bl	8002510 <HAL_GetTick>
 80043b8:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80043ba:	6823      	ldr	r3, [r4, #0]
 80043bc:	011a      	lsls	r2, r3, #4
 80043be:	d432      	bmi.n	8004426 <RCCEx_PLLSAI1_Config+0xaa>
 80043c0:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80043c2:	2e00      	cmp	r6, #0
 80043c4:	d036      	beq.n	8004434 <RCCEx_PLLSAI1_Config+0xb8>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80043c6:	2e01      	cmp	r6, #1
 80043c8:	d150      	bne.n	800446c <RCCEx_PLLSAI1_Config+0xf0>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043ca:	6922      	ldr	r2, [r4, #16]
 80043cc:	6928      	ldr	r0, [r5, #16]
 80043ce:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80043d2:	0840      	lsrs	r0, r0, #1
 80043d4:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80043d8:	3801      	subs	r0, #1
 80043da:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 80043de:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 80043e2:	6122      	str	r2, [r4, #16]
 80043e4:	e032      	b.n	800444c <RCCEx_PLLSAI1_Config+0xd0>
    switch(PllSai1->PLLSAI1Source)
 80043e6:	2802      	cmp	r0, #2
 80043e8:	d010      	beq.n	800440c <RCCEx_PLLSAI1_Config+0x90>
 80043ea:	2803      	cmp	r0, #3
 80043ec:	d014      	beq.n	8004418 <RCCEx_PLLSAI1_Config+0x9c>
 80043ee:	2801      	cmp	r0, #1
 80043f0:	d110      	bne.n	8004414 <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	079f      	lsls	r7, r3, #30
 80043f6:	d538      	bpl.n	800446a <RCCEx_PLLSAI1_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80043f8:	68e3      	ldr	r3, [r4, #12]
 80043fa:	686a      	ldr	r2, [r5, #4]
 80043fc:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8004400:	3a01      	subs	r2, #1
 8004402:	4318      	orrs	r0, r3
 8004404:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8004408:	60e0      	str	r0, [r4, #12]
 800440a:	e7cf      	b.n	80043ac <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004412:	d1f1      	bne.n	80043f8 <RCCEx_PLLSAI1_Config+0x7c>
 8004414:	2001      	movs	r0, #1
 8004416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	0391      	lsls	r1, r2, #14
 800441c:	d4ec      	bmi.n	80043f8 <RCCEx_PLLSAI1_Config+0x7c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004424:	e7f5      	b.n	8004412 <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004426:	f7fe f873 	bl	8002510 <HAL_GetTick>
 800442a:	1bc0      	subs	r0, r0, r7
 800442c:	2802      	cmp	r0, #2
 800442e:	d9c4      	bls.n	80043ba <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 8004430:	2003      	movs	r0, #3
 8004432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004434:	6921      	ldr	r1, [r4, #16]
 8004436:	68eb      	ldr	r3, [r5, #12]
 8004438:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 800443c:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8004440:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8004444:	091b      	lsrs	r3, r3, #4
 8004446:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 800444a:	6121      	str	r1, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800444c:	6823      	ldr	r3, [r4, #0]
 800444e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004452:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004454:	f7fe f85c 	bl	8002510 <HAL_GetTick>
 8004458:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800445a:	6823      	ldr	r3, [r4, #0]
 800445c:	011b      	lsls	r3, r3, #4
 800445e:	d513      	bpl.n	8004488 <RCCEx_PLLSAI1_Config+0x10c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004460:	6923      	ldr	r3, [r4, #16]
 8004462:	69aa      	ldr	r2, [r5, #24]
 8004464:	4313      	orrs	r3, r2
 8004466:	6123      	str	r3, [r4, #16]
 8004468:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 800446a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800446c:	6923      	ldr	r3, [r4, #16]
 800446e:	6968      	ldr	r0, [r5, #20]
 8004470:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004474:	0840      	lsrs	r0, r0, #1
 8004476:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800447a:	3801      	subs	r0, #1
 800447c:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8004480:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8004484:	6123      	str	r3, [r4, #16]
 8004486:	e7e1      	b.n	800444c <RCCEx_PLLSAI1_Config+0xd0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004488:	f7fe f842 	bl	8002510 <HAL_GetTick>
 800448c:	1b80      	subs	r0, r0, r6
 800448e:	2802      	cmp	r0, #2
 8004490:	d9e3      	bls.n	800445a <RCCEx_PLLSAI1_Config+0xde>
 8004492:	e7cd      	b.n	8004430 <RCCEx_PLLSAI1_Config+0xb4>
 8004494:	40021000 	.word	0x40021000

08004498 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800449a:	4b3d      	ldr	r3, [pc, #244]	; (8004590 <RCCEx_PLLSAI2_Config+0xf8>)
 800449c:	68da      	ldr	r2, [r3, #12]
 800449e:	f012 0f03 	tst.w	r2, #3
{
 80044a2:	4605      	mov	r5, r0
 80044a4:	460e      	mov	r6, r1
 80044a6:	461c      	mov	r4, r3
 80044a8:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80044aa:	d028      	beq.n	80044fe <RCCEx_PLLSAI2_Config+0x66>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80044ac:	68da      	ldr	r2, [r3, #12]
 80044ae:	f002 0203 	and.w	r2, r2, #3
 80044b2:	4282      	cmp	r2, r0
 80044b4:	d13a      	bne.n	800452c <RCCEx_PLLSAI2_Config+0x94>
       ||
 80044b6:	2a00      	cmp	r2, #0
 80044b8:	d038      	beq.n	800452c <RCCEx_PLLSAI2_Config+0x94>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80044ba:	68db      	ldr	r3, [r3, #12]
       ||
 80044bc:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80044be:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80044c2:	3301      	adds	r3, #1
       ||
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d131      	bne.n	800452c <RCCEx_PLLSAI2_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80044c8:	6823      	ldr	r3, [r4, #0]
 80044ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044ce:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044d0:	f7fe f81e 	bl	8002510 <HAL_GetTick>
 80044d4:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80044d6:	6823      	ldr	r3, [r4, #0]
 80044d8:	009a      	lsls	r2, r3, #2
 80044da:	d430      	bmi.n	800453e <RCCEx_PLLSAI2_Config+0xa6>
 80044dc:	68a8      	ldr	r0, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80044de:	2e00      	cmp	r6, #0
 80044e0:	d034      	beq.n	800454c <RCCEx_PLLSAI2_Config+0xb4>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80044e2:	6963      	ldr	r3, [r4, #20]
 80044e4:	6929      	ldr	r1, [r5, #16]
 80044e6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80044ea:	0849      	lsrs	r1, r1, #1
 80044ec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80044f0:	3901      	subs	r1, #1
 80044f2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80044f6:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 80044fa:	6163      	str	r3, [r4, #20]
 80044fc:	e032      	b.n	8004564 <RCCEx_PLLSAI2_Config+0xcc>
    switch(PllSai2->PLLSAI2Source)
 80044fe:	2802      	cmp	r0, #2
 8004500:	d010      	beq.n	8004524 <RCCEx_PLLSAI2_Config+0x8c>
 8004502:	2803      	cmp	r0, #3
 8004504:	d014      	beq.n	8004530 <RCCEx_PLLSAI2_Config+0x98>
 8004506:	2801      	cmp	r0, #1
 8004508:	d110      	bne.n	800452c <RCCEx_PLLSAI2_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	079f      	lsls	r7, r3, #30
 800450e:	d538      	bpl.n	8004582 <RCCEx_PLLSAI2_Config+0xea>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004510:	68e3      	ldr	r3, [r4, #12]
 8004512:	686a      	ldr	r2, [r5, #4]
 8004514:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8004518:	3a01      	subs	r2, #1
 800451a:	4318      	orrs	r0, r3
 800451c:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8004520:	60e0      	str	r0, [r4, #12]
 8004522:	e7d1      	b.n	80044c8 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800452a:	d1f1      	bne.n	8004510 <RCCEx_PLLSAI2_Config+0x78>
 800452c:	2001      	movs	r0, #1
 800452e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	0391      	lsls	r1, r2, #14
 8004534:	d4ec      	bmi.n	8004510 <RCCEx_PLLSAI2_Config+0x78>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800453c:	e7f5      	b.n	800452a <RCCEx_PLLSAI2_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800453e:	f7fd ffe7 	bl	8002510 <HAL_GetTick>
 8004542:	1bc0      	subs	r0, r0, r7
 8004544:	2802      	cmp	r0, #2
 8004546:	d9c6      	bls.n	80044d6 <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 8004548:	2003      	movs	r0, #3
 800454a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800454c:	6962      	ldr	r2, [r4, #20]
 800454e:	68eb      	ldr	r3, [r5, #12]
 8004550:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 8004554:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004558:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800455c:	091b      	lsrs	r3, r3, #4
 800455e:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 8004562:	6162      	str	r2, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004564:	6823      	ldr	r3, [r4, #0]
 8004566:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800456a:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800456c:	f7fd ffd0 	bl	8002510 <HAL_GetTick>
 8004570:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004572:	6823      	ldr	r3, [r4, #0]
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	d505      	bpl.n	8004584 <RCCEx_PLLSAI2_Config+0xec>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004578:	6963      	ldr	r3, [r4, #20]
 800457a:	696a      	ldr	r2, [r5, #20]
 800457c:	4313      	orrs	r3, r2
 800457e:	6163      	str	r3, [r4, #20]
 8004580:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8004582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004584:	f7fd ffc4 	bl	8002510 <HAL_GetTick>
 8004588:	1b80      	subs	r0, r0, r6
 800458a:	2802      	cmp	r0, #2
 800458c:	d9f1      	bls.n	8004572 <RCCEx_PLLSAI2_Config+0xda>
 800458e:	e7db      	b.n	8004548 <RCCEx_PLLSAI2_Config+0xb0>
 8004590:	40021000 	.word	0x40021000

08004594 <HAL_RCCEx_PeriphCLKConfig>:
{
 8004594:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004598:	6806      	ldr	r6, [r0, #0]
 800459a:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 800459e:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80045a0:	d024      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 80045a2:	6e41      	ldr	r1, [r0, #100]	; 0x64
 80045a4:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 80045a8:	d02c      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x70>
 80045aa:	d802      	bhi.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80045ac:	b1c1      	cbz	r1, 80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 80045ae:	2601      	movs	r6, #1
 80045b0:	e01c      	b.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 80045b2:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80045b6:	d00d      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80045b8:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 80045bc:	d1f7      	bne.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045be:	4a4d      	ldr	r2, [pc, #308]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045c0:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80045c2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80045c6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80045ca:	430b      	orrs	r3, r1
 80045cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80045d0:	2600      	movs	r6, #0
 80045d2:	e00b      	b.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80045d4:	4a47      	ldr	r2, [pc, #284]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045d6:	68d3      	ldr	r3, [r2, #12]
 80045d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045dc:	60d3      	str	r3, [r2, #12]
      break;
 80045de:	e7ee      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80045e0:	3004      	adds	r0, #4
 80045e2:	f7ff fecb 	bl	800437c <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80045e6:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80045e8:	2800      	cmp	r0, #0
 80045ea:	d0e8      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80045ec:	6823      	ldr	r3, [r4, #0]
 80045ee:	04d8      	lsls	r0, r3, #19
 80045f0:	d506      	bpl.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 80045f2:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80045f4:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 80045f8:	d074      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x150>
 80045fa:	d808      	bhi.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80045fc:	b1a9      	cbz	r1, 800462a <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 80045fe:	2601      	movs	r6, #1
 8004600:	4635      	mov	r5, r6
 8004602:	e021      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004604:	2100      	movs	r1, #0
 8004606:	3020      	adds	r0, #32
 8004608:	f7ff ff46 	bl	8004498 <RCCEx_PLLSAI2_Config>
 800460c:	e7eb      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 800460e:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8004612:	d004      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8004614:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8004618:	d1f1      	bne.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800461a:	4635      	mov	r5, r6
 800461c:	e009      	b.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800461e:	4a35      	ldr	r2, [pc, #212]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004620:	68d3      	ldr	r3, [r2, #12]
 8004622:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004626:	60d3      	str	r3, [r2, #12]
 8004628:	e7f7      	b.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800462a:	1d20      	adds	r0, r4, #4
 800462c:	f7ff fea6 	bl	800437c <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004630:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004632:	2d00      	cmp	r5, #0
 8004634:	d15c      	bne.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004636:	4a2f      	ldr	r2, [pc, #188]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004638:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800463a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800463e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8004642:	430b      	orrs	r3, r1
 8004644:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004648:	6823      	ldr	r3, [r4, #0]
 800464a:	0399      	lsls	r1, r3, #14
 800464c:	f140 814f 	bpl.w	80048ee <HAL_RCCEx_PeriphCLKConfig+0x35a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004650:	4f28      	ldr	r7, [pc, #160]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004652:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004654:	00da      	lsls	r2, r3, #3
 8004656:	f140 8176 	bpl.w	8004946 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 800465a:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800465e:	f8df 9098 	ldr.w	r9, [pc, #152]	; 80046f8 <HAL_RCCEx_PeriphCLKConfig+0x164>
 8004662:	f8d9 3000 	ldr.w	r3, [r9]
 8004666:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800466a:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 800466e:	f7fd ff4f 	bl	8002510 <HAL_GetTick>
 8004672:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004674:	f8d9 3000 	ldr.w	r3, [r9]
 8004678:	05db      	lsls	r3, r3, #23
 800467a:	d53f      	bpl.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x168>
    if(ret == HAL_OK)
 800467c:	2d00      	cmp	r5, #0
 800467e:	d144      	bne.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004680:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004684:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004688:	d015      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x122>
 800468a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800468e:	4293      	cmp	r3, r2
 8004690:	d011      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x122>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004692:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8004696:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800469a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800469e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046a2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80046a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046aa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80046ae:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80046b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80046b6:	07d8      	lsls	r0, r3, #31
 80046b8:	d509      	bpl.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x13a>
        tickstart = HAL_GetTick();
 80046ba:	f7fd ff29 	bl	8002510 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046be:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80046c2:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80046c8:	0799      	lsls	r1, r3, #30
 80046ca:	f140 8109 	bpl.w	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80046d2:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80046d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046da:	4313      	orrs	r3, r2
 80046dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80046e0:	4635      	mov	r5, r6
 80046e2:	e012      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x176>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80046e4:	2100      	movs	r1, #0
 80046e6:	f104 0020 	add.w	r0, r4, #32
 80046ea:	f7ff fed5 	bl	8004498 <RCCEx_PLLSAI2_Config>
 80046ee:	e79f      	b.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 80046f0:	462e      	mov	r6, r5
 80046f2:	e7a9      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 80046f4:	40021000 	.word	0x40021000
 80046f8:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046fc:	f7fd ff08 	bl	8002510 <HAL_GetTick>
 8004700:	eba0 000a 	sub.w	r0, r0, sl
 8004704:	2802      	cmp	r0, #2
 8004706:	d9b5      	bls.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = HAL_TIMEOUT;
 8004708:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 800470a:	f1b8 0f00 	cmp.w	r8, #0
 800470e:	d003      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x184>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004710:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004712:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004716:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004718:	6823      	ldr	r3, [r4, #0]
 800471a:	07da      	lsls	r2, r3, #31
 800471c:	d508      	bpl.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800471e:	4990      	ldr	r1, [pc, #576]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004720:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004722:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004726:	f022 0203 	bic.w	r2, r2, #3
 800472a:	4302      	orrs	r2, r0
 800472c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004730:	079f      	lsls	r7, r3, #30
 8004732:	d508      	bpl.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004734:	498a      	ldr	r1, [pc, #552]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004736:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004738:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800473c:	f022 020c 	bic.w	r2, r2, #12
 8004740:	4302      	orrs	r2, r0
 8004742:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004746:	075e      	lsls	r6, r3, #29
 8004748:	d508      	bpl.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800474a:	4985      	ldr	r1, [pc, #532]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800474c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800474e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004752:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8004756:	4302      	orrs	r2, r0
 8004758:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800475c:	0718      	lsls	r0, r3, #28
 800475e:	d508      	bpl.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004760:	497f      	ldr	r1, [pc, #508]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004762:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8004764:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004768:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800476c:	4302      	orrs	r2, r0
 800476e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004772:	06d9      	lsls	r1, r3, #27
 8004774:	d508      	bpl.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004776:	497a      	ldr	r1, [pc, #488]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004778:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800477a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800477e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004782:	4302      	orrs	r2, r0
 8004784:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004788:	069a      	lsls	r2, r3, #26
 800478a:	d508      	bpl.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800478c:	4974      	ldr	r1, [pc, #464]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800478e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8004790:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004794:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004798:	4302      	orrs	r2, r0
 800479a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800479e:	059f      	lsls	r7, r3, #22
 80047a0:	d508      	bpl.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047a2:	496f      	ldr	r1, [pc, #444]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80047a4:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80047a6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80047aa:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80047ae:	4302      	orrs	r2, r0
 80047b0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80047b4:	055e      	lsls	r6, r3, #21
 80047b6:	d508      	bpl.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80047b8:	4969      	ldr	r1, [pc, #420]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80047ba:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80047bc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80047c0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80047c4:	4302      	orrs	r2, r0
 80047c6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047ca:	0658      	lsls	r0, r3, #25
 80047cc:	d508      	bpl.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047ce:	4964      	ldr	r1, [pc, #400]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80047d0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80047d2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80047d6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80047da:	4302      	orrs	r2, r0
 80047dc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047e0:	0619      	lsls	r1, r3, #24
 80047e2:	d508      	bpl.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x262>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047e4:	495e      	ldr	r1, [pc, #376]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80047e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80047e8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80047ec:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80047f0:	4302      	orrs	r2, r0
 80047f2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047f6:	05da      	lsls	r2, r3, #23
 80047f8:	d508      	bpl.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x278>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047fa:	4959      	ldr	r1, [pc, #356]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80047fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047fe:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004802:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8004806:	4302      	orrs	r2, r0
 8004808:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800480c:	049b      	lsls	r3, r3, #18
 800480e:	d50f      	bpl.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004810:	4a53      	ldr	r2, [pc, #332]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004812:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8004814:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004818:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800481c:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800481e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004822:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004826:	d164      	bne.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004828:	68d3      	ldr	r3, [r2, #12]
 800482a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800482e:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004830:	6823      	ldr	r3, [r4, #0]
 8004832:	031f      	lsls	r7, r3, #12
 8004834:	d50f      	bpl.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004836:	4a4a      	ldr	r2, [pc, #296]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004838:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800483a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800483e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004842:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004844:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004848:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800484c:	d15c      	bne.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x374>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800484e:	68d3      	ldr	r3, [r2, #12]
 8004850:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004854:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004856:	6823      	ldr	r3, [r4, #0]
 8004858:	035e      	lsls	r6, r3, #13
 800485a:	d50f      	bpl.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800485c:	4a40      	ldr	r2, [pc, #256]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800485e:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8004860:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004864:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004868:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800486a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800486e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004872:	d154      	bne.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x38a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004874:	68d3      	ldr	r3, [r2, #12]
 8004876:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800487a:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800487c:	6823      	ldr	r3, [r4, #0]
 800487e:	0458      	lsls	r0, r3, #17
 8004880:	d512      	bpl.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x314>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004882:	4937      	ldr	r1, [pc, #220]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004884:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8004886:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800488a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800488e:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004890:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004894:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004898:	d14c      	bne.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800489a:	2102      	movs	r1, #2
 800489c:	1d20      	adds	r0, r4, #4
 800489e:	f7ff fd6d 	bl	800437c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80048a2:	2800      	cmp	r0, #0
 80048a4:	bf18      	it	ne
 80048a6:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80048a8:	6822      	ldr	r2, [r4, #0]
 80048aa:	0411      	lsls	r1, r2, #16
 80048ac:	d508      	bpl.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80048ae:	492c      	ldr	r1, [pc, #176]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80048b0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80048b2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80048b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80048ba:	4303      	orrs	r3, r0
 80048bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80048c0:	03d3      	lsls	r3, r2, #15
 80048c2:	d509      	bpl.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80048c4:	4a26      	ldr	r2, [pc, #152]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80048c6:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80048ca:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80048ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80048d2:	430b      	orrs	r3, r1
 80048d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 80048d8:	4628      	mov	r0, r5
 80048da:	b002      	add	sp, #8
 80048dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048e0:	f7fd fe16 	bl	8002510 <HAL_GetTick>
 80048e4:	1b40      	subs	r0, r0, r5
 80048e6:	4548      	cmp	r0, r9
 80048e8:	f67f aeec 	bls.w	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
 80048ec:	e70c      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x174>
 80048ee:	4635      	mov	r5, r6
 80048f0:	e712      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x184>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80048f2:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80048f6:	d19b      	bne.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048f8:	2101      	movs	r1, #1
 80048fa:	1d20      	adds	r0, r4, #4
 80048fc:	f7ff fd3e 	bl	800437c <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8004900:	2800      	cmp	r0, #0
 8004902:	bf18      	it	ne
 8004904:	4605      	movne	r5, r0
 8004906:	e793      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004908:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800490c:	d1a3      	bne.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800490e:	2101      	movs	r1, #1
 8004910:	1d20      	adds	r0, r4, #4
 8004912:	f7ff fd33 	bl	800437c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8004916:	2800      	cmp	r0, #0
 8004918:	bf18      	it	ne
 800491a:	4605      	movne	r5, r0
 800491c:	e79b      	b.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800491e:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8004922:	d1ab      	bne.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004924:	2101      	movs	r1, #1
 8004926:	1d20      	adds	r0, r4, #4
 8004928:	f7ff fd28 	bl	800437c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800492c:	2800      	cmp	r0, #0
 800492e:	bf18      	it	ne
 8004930:	4605      	movne	r5, r0
 8004932:	e7a3      	b.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004934:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8004938:	d1b6      	bne.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x314>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800493a:	2102      	movs	r1, #2
 800493c:	f104 0020 	add.w	r0, r4, #32
 8004940:	f7ff fdaa 	bl	8004498 <RCCEx_PLLSAI2_Config>
 8004944:	e7ad      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004946:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800494c:	65bb      	str	r3, [r7, #88]	; 0x58
 800494e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004954:	9301      	str	r3, [sp, #4]
 8004956:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004958:	f04f 0801 	mov.w	r8, #1
 800495c:	e67f      	b.n	800465e <HAL_RCCEx_PeriphCLKConfig+0xca>
 800495e:	bf00      	nop
 8004960:	40021000 	.word	0x40021000

08004964 <HAL_RTC_WaitForSynchro>:

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004964:	6802      	ldr	r2, [r0, #0]
{
 8004966:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004968:	68d3      	ldr	r3, [r2, #12]
 800496a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800496e:	60d3      	str	r3, [r2, #12]
{
 8004970:	4604      	mov	r4, r0
#endif

  tickstart = HAL_GetTick();
 8004972:	f7fd fdcd 	bl	8002510 <HAL_GetTick>
 8004976:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004978:	6823      	ldr	r3, [r4, #0]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	069b      	lsls	r3, r3, #26
 800497e:	d501      	bpl.n	8004984 <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8004980:	2000      	movs	r0, #0
 8004982:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004984:	f7fd fdc4 	bl	8002510 <HAL_GetTick>
 8004988:	1b40      	subs	r0, r0, r5
 800498a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800498e:	d9f3      	bls.n	8004978 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 8004990:	2003      	movs	r0, #3
}
 8004992:	bd38      	pop	{r3, r4, r5, pc}

08004994 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004996:	6803      	ldr	r3, [r0, #0]
 8004998:	68dc      	ldr	r4, [r3, #12]
 800499a:	f014 0440 	ands.w	r4, r4, #64	; 0x40
{
 800499e:	4605      	mov	r5, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80049a0:	d118      	bne.n	80049d4 <RTC_EnterInitMode+0x40>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80049a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049a6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80049a8:	f7fd fdb2 	bl	8002510 <HAL_GetTick>
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
      {
        status = HAL_TIMEOUT;
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80049ac:	2703      	movs	r7, #3
    tickstart = HAL_GetTick();
 80049ae:	4606      	mov	r6, r0
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80049b0:	682b      	ldr	r3, [r5, #0]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	065b      	lsls	r3, r3, #25
 80049b6:	d401      	bmi.n	80049bc <RTC_EnterInitMode+0x28>
 80049b8:	2c03      	cmp	r4, #3
 80049ba:	d101      	bne.n	80049c0 <RTC_EnterInitMode+0x2c>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) */

  return status;
}
 80049bc:	4620      	mov	r0, r4
 80049be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80049c0:	f7fd fda6 	bl	8002510 <HAL_GetTick>
 80049c4:	1b80      	subs	r0, r0, r6
 80049c6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80049ca:	bf84      	itt	hi
 80049cc:	f885 7021 	strbhi.w	r7, [r5, #33]	; 0x21
        status = HAL_TIMEOUT;
 80049d0:	2403      	movhi	r4, #3
 80049d2:	e7ed      	b.n	80049b0 <RTC_EnterInitMode+0x1c>
  HAL_StatusTypeDef status = HAL_OK;
 80049d4:	2400      	movs	r4, #0
 80049d6:	e7f1      	b.n	80049bc <RTC_EnterInitMode+0x28>

080049d8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80049d8:	b538      	push	{r3, r4, r5, lr}
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80049da:	4c0f      	ldr	r4, [pc, #60]	; (8004a18 <RTC_ExitInitMode+0x40>)
 80049dc:	68e3      	ldr	r3, [r4, #12]
 80049de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049e2:	60e3      	str	r3, [r4, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80049e4:	68a3      	ldr	r3, [r4, #8]
 80049e6:	069b      	lsls	r3, r3, #26
{
 80049e8:	4605      	mov	r5, r0
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80049ea:	d406      	bmi.n	80049fa <RTC_ExitInitMode+0x22>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80049ec:	f7ff ffba 	bl	8004964 <HAL_RTC_WaitForSynchro>
 80049f0:	b188      	cbz	r0, 8004a16 <RTC_ExitInitMode+0x3e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80049f2:	2003      	movs	r0, #3
 80049f4:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
 80049f8:	bd38      	pop	{r3, r4, r5, pc}
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80049fa:	68a3      	ldr	r3, [r4, #8]
 80049fc:	f023 0320 	bic.w	r3, r3, #32
 8004a00:	60a3      	str	r3, [r4, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004a02:	f7ff ffaf 	bl	8004964 <HAL_RTC_WaitForSynchro>
 8004a06:	b110      	cbz	r0, 8004a0e <RTC_ExitInitMode+0x36>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004a08:	2003      	movs	r0, #3
 8004a0a:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004a0e:	68a3      	ldr	r3, [r4, #8]
 8004a10:	f043 0320 	orr.w	r3, r3, #32
 8004a14:	60a3      	str	r3, [r4, #8]
  }

  return status;
}
 8004a16:	bd38      	pop	{r3, r4, r5, pc}
 8004a18:	40002800 	.word	0x40002800

08004a1c <HAL_RTC_Init>:
{
 8004a1c:	b538      	push	{r3, r4, r5, lr}
  if (hrtc != NULL)
 8004a1e:	4604      	mov	r4, r0
 8004a20:	2800      	cmp	r0, #0
 8004a22:	d040      	beq.n	8004aa6 <HAL_RTC_Init+0x8a>
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004a24:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8004a28:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004a2c:	b91b      	cbnz	r3, 8004a36 <HAL_RTC_Init+0x1a>
      hrtc->Lock = HAL_UNLOCKED;
 8004a2e:	f880 2020 	strb.w	r2, [r0, #32]
      HAL_RTC_MspInit(hrtc);
 8004a32:	f7fd fa97 	bl	8001f64 <HAL_RTC_MspInit>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004a36:	2302      	movs	r3, #2
 8004a38:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a3c:	6823      	ldr	r3, [r4, #0]
 8004a3e:	22ca      	movs	r2, #202	; 0xca
 8004a40:	625a      	str	r2, [r3, #36]	; 0x24
 8004a42:	2253      	movs	r2, #83	; 0x53
 8004a44:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 8004a46:	4620      	mov	r0, r4
 8004a48:	f7ff ffa4 	bl	8004994 <RTC_EnterInitMode>
    if (status == HAL_OK)
 8004a4c:	2800      	cmp	r0, #0
 8004a4e:	d12b      	bne.n	8004aa8 <HAL_RTC_Init+0x8c>
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004a50:	6823      	ldr	r3, [r4, #0]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004a52:	6920      	ldr	r0, [r4, #16]
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004a54:	689a      	ldr	r2, [r3, #8]
 8004a56:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8004a5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a5e:	609a      	str	r2, [r3, #8]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004a60:	6862      	ldr	r2, [r4, #4]
 8004a62:	6899      	ldr	r1, [r3, #8]
 8004a64:	4302      	orrs	r2, r0
 8004a66:	69a0      	ldr	r0, [r4, #24]
 8004a68:	4302      	orrs	r2, r0
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	609a      	str	r2, [r3, #8]
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004a6e:	68e2      	ldr	r2, [r4, #12]
 8004a70:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004a72:	691a      	ldr	r2, [r3, #16]
 8004a74:	68a1      	ldr	r1, [r4, #8]
 8004a76:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004a7a:	611a      	str	r2, [r3, #16]
      status = RTC_ExitInitMode(hrtc);
 8004a7c:	4620      	mov	r0, r4
 8004a7e:	f7ff ffab 	bl	80049d8 <RTC_ExitInitMode>
      if (status == HAL_OK)
 8004a82:	b988      	cbnz	r0, 8004aa8 <HAL_RTC_Init+0x8c>
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004a84:	6823      	ldr	r3, [r4, #0]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004a86:	6965      	ldr	r5, [r4, #20]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004a88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a8a:	f022 0203 	bic.w	r2, r2, #3
 8004a8e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004a90:	69e2      	ldr	r2, [r4, #28]
 8004a92:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004a94:	432a      	orrs	r2, r5
 8004a96:	430a      	orrs	r2, r1
 8004a98:	64da      	str	r2, [r3, #76]	; 0x4c
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a9a:	22ff      	movs	r2, #255	; 0xff
 8004a9c:	625a      	str	r2, [r3, #36]	; 0x24
          hrtc->State = HAL_RTC_STATE_READY;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 8004aa4:	bd38      	pop	{r3, r4, r5, pc}
  HAL_StatusTypeDef status = HAL_ERROR;
 8004aa6:	2001      	movs	r0, #1
}
 8004aa8:	bd38      	pop	{r3, r4, r5, pc}

08004aaa <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8004aaa:	2300      	movs	r3, #0
  uint8_t temp = Value;

  while (temp >= 10U)
 8004aac:	2809      	cmp	r0, #9
 8004aae:	d803      	bhi.n	8004ab8 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    temp -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8004ab0:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8004ab4:	b2c0      	uxtb	r0, r0
 8004ab6:	4770      	bx	lr
    temp -= 10U;
 8004ab8:	380a      	subs	r0, #10
    bcdhigh++;
 8004aba:	3301      	adds	r3, #1
    temp -= 10U;
 8004abc:	b2c0      	uxtb	r0, r0
 8004abe:	e7f5      	b.n	8004aac <RTC_ByteToBcd2+0x2>

08004ac0 <HAL_RTC_SetTime>:
{
 8004ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8004ac2:	f890 3020 	ldrb.w	r3, [r0, #32]
 8004ac6:	2b01      	cmp	r3, #1
{
 8004ac8:	4605      	mov	r5, r0
 8004aca:	460e      	mov	r6, r1
 8004acc:	4617      	mov	r7, r2
 8004ace:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hrtc);
 8004ad2:	d052      	beq.n	8004b7a <HAL_RTC_SetTime+0xba>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ad4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  __HAL_LOCK(hrtc);
 8004ad8:	2201      	movs	r2, #1
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ada:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hrtc);
 8004adc:	f880 2020 	strb.w	r2, [r0, #32]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ae0:	22ca      	movs	r2, #202	; 0xca
 8004ae2:	625a      	str	r2, [r3, #36]	; 0x24
 8004ae4:	2253      	movs	r2, #83	; 0x53
 8004ae6:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 8004ae8:	f7ff ff54 	bl	8004994 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8004aec:	bb68      	cbnz	r0, 8004b4a <HAL_RTC_SetTime+0x8a>
 8004aee:	682b      	ldr	r3, [r5, #0]
 8004af0:	7830      	ldrb	r0, [r6, #0]
 8004af2:	7874      	ldrb	r4, [r6, #1]
 8004af4:	78b1      	ldrb	r1, [r6, #2]
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004af6:	689b      	ldr	r3, [r3, #8]
    if (Format == RTC_FORMAT_BIN)
 8004af8:	bb97      	cbnz	r7, 8004b60 <HAL_RTC_SetTime+0xa0>
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004afa:	f013 0340 	ands.w	r3, r3, #64	; 0x40
        sTime->TimeFormat = 0x00U;
 8004afe:	bf08      	it	eq
 8004b00:	70f3      	strbeq	r3, [r6, #3]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004b02:	f7ff ffd2 	bl	8004aaa <RTC_ByteToBcd2>
 8004b06:	4602      	mov	r2, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004b08:	4620      	mov	r0, r4
 8004b0a:	f7ff ffce 	bl	8004aaa <RTC_ByteToBcd2>
 8004b0e:	4604      	mov	r4, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004b10:	4608      	mov	r0, r1
 8004b12:	f7ff ffca 	bl	8004aaa <RTC_ByteToBcd2>
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004b16:	78f3      	ldrb	r3, [r6, #3]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004b18:	ea40 5083 	orr.w	r0, r0, r3, lsl #22
 8004b1c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8004b20:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004b24:	682b      	ldr	r3, [r5, #0]
 8004b26:	f000 307f 	and.w	r0, r0, #2139062143	; 0x7f7f7f7f
 8004b2a:	f020 40fe 	bic.w	r0, r0, #2130706432	; 0x7f000000
 8004b2e:	6018      	str	r0, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004b30:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004b32:	6930      	ldr	r0, [r6, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004b34:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b38:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004b3a:	68f2      	ldr	r2, [r6, #12]
 8004b3c:	6899      	ldr	r1, [r3, #8]
 8004b3e:	4302      	orrs	r2, r0
 8004b40:	430a      	orrs	r2, r1
 8004b42:	609a      	str	r2, [r3, #8]
    status = RTC_ExitInitMode(hrtc);
 8004b44:	4628      	mov	r0, r5
 8004b46:	f7ff ff47 	bl	80049d8 <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b4a:	682b      	ldr	r3, [r5, #0]
 8004b4c:	22ff      	movs	r2, #255	; 0xff
 8004b4e:	625a      	str	r2, [r3, #36]	; 0x24
  if (status == HAL_OK)
 8004b50:	b910      	cbnz	r0, 8004b58 <HAL_RTC_SetTime+0x98>
    hrtc->State = HAL_RTC_STATE_READY;
 8004b52:	2301      	movs	r3, #1
 8004b54:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
  __HAL_UNLOCK(hrtc);
 8004b58:	2300      	movs	r3, #0
 8004b5a:	f885 3020 	strb.w	r3, [r5, #32]
  return status;
 8004b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004b60:	f013 0340 	ands.w	r3, r3, #64	; 0x40
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004b64:	ea4f 2404 	mov.w	r4, r4, lsl #8
        sTime->TimeFormat = 0x00U;
 8004b68:	bf08      	it	eq
 8004b6a:	70f3      	strbeq	r3, [r6, #3]
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004b6c:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004b70:	78f4      	ldrb	r4, [r6, #3]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004b72:	4308      	orrs	r0, r1
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004b74:	ea40 5084 	orr.w	r0, r0, r4, lsl #22
 8004b78:	e7d4      	b.n	8004b24 <HAL_RTC_SetTime+0x64>
  __HAL_LOCK(hrtc);
 8004b7a:	4618      	mov	r0, r3
}
 8004b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004b7e <HAL_RTC_SetDate>:
{
 8004b7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8004b80:	f890 3020 	ldrb.w	r3, [r0, #32]
 8004b84:	2b01      	cmp	r3, #1
{
 8004b86:	4605      	mov	r5, r0
 8004b88:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 8004b8c:	d043      	beq.n	8004c16 <HAL_RTC_SetDate+0x98>
 8004b8e:	2301      	movs	r3, #1
 8004b90:	f885 3020 	strb.w	r3, [r5, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b94:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
 8004b98:	784b      	ldrb	r3, [r1, #1]
 8004b9a:	78c8      	ldrb	r0, [r1, #3]
 8004b9c:	788e      	ldrb	r6, [r1, #2]
 8004b9e:	780c      	ldrb	r4, [r1, #0]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004ba0:	bb92      	cbnz	r2, 8004c08 <HAL_RTC_SetDate+0x8a>
 8004ba2:	06da      	lsls	r2, r3, #27
 8004ba4:	d503      	bpl.n	8004bae <HAL_RTC_SetDate+0x30>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004ba6:	f023 0310 	bic.w	r3, r3, #16
 8004baa:	330a      	adds	r3, #10
 8004bac:	704b      	strb	r3, [r1, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004bae:	f7ff ff7c 	bl	8004aaa <RTC_ByteToBcd2>
 8004bb2:	4607      	mov	r7, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004bb4:	7848      	ldrb	r0, [r1, #1]
 8004bb6:	f7ff ff78 	bl	8004aaa <RTC_ByteToBcd2>
 8004bba:	4602      	mov	r2, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8004bbc:	4630      	mov	r0, r6
 8004bbe:	f7ff ff74 	bl	8004aaa <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004bc2:	ea40 3044 	orr.w	r0, r0, r4, lsl #13
 8004bc6:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8004bca:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004bce:	682b      	ldr	r3, [r5, #0]
 8004bd0:	22ca      	movs	r2, #202	; 0xca
 8004bd2:	625a      	str	r2, [r3, #36]	; 0x24
 8004bd4:	2253      	movs	r2, #83	; 0x53
 8004bd6:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 8004bd8:	4628      	mov	r0, r5
 8004bda:	f7ff fedb 	bl	8004994 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8004bde:	b940      	cbnz	r0, 8004bf2 <HAL_RTC_SetDate+0x74>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004be0:	682b      	ldr	r3, [r5, #0]
 8004be2:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 8004be6:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 8004bea:	605c      	str	r4, [r3, #4]
    status = RTC_ExitInitMode(hrtc);
 8004bec:	4628      	mov	r0, r5
 8004bee:	f7ff fef3 	bl	80049d8 <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bf2:	682b      	ldr	r3, [r5, #0]
 8004bf4:	22ff      	movs	r2, #255	; 0xff
 8004bf6:	625a      	str	r2, [r3, #36]	; 0x24
  if (status == HAL_OK)
 8004bf8:	b910      	cbnz	r0, 8004c00 <HAL_RTC_SetDate+0x82>
    hrtc->State = HAL_RTC_STATE_READY ;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
  __HAL_UNLOCK(hrtc);
 8004c00:	2300      	movs	r3, #0
 8004c02:	f885 3020 	strb.w	r3, [r5, #32]
  return status;
 8004c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004c08:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004c0a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004c0e:	4330      	orrs	r0, r6
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004c10:	ea40 3444 	orr.w	r4, r0, r4, lsl #13
 8004c14:	e7db      	b.n	8004bce <HAL_RTC_SetDate+0x50>
}
 8004c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004c18 <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c18:	6803      	ldr	r3, [r0, #0]
 8004c1a:	685a      	ldr	r2, [r3, #4]
 8004c1c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004c20:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c22:	6842      	ldr	r2, [r0, #4]
 8004c24:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8004c28:	d10a      	bne.n	8004c40 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
 8004c2a:	6882      	ldr	r2, [r0, #8]
 8004c2c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8004c30:	d002      	beq.n	8004c38 <SPI_WaitFifoStateUntilTimeout.part.1+0x20>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c32:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8004c36:	d103      	bne.n	8004c40 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c40:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8004c42:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8004c46:	d107      	bne.n	8004c58 <SPI_WaitFifoStateUntilTimeout.part.1+0x40>
        {
          SPI_RESET_CRC(hspi);
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c4e:	601a      	str	r2, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c56:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c5e:	2300      	movs	r3, #0
 8004c60:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      }
    }
  }

  return HAL_OK;
}
 8004c64:	2003      	movs	r0, #3
 8004c66:	4770      	bx	lr

08004c68 <SPI_WaitFlagStateUntilTimeout.constprop.10>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8004c68:	b570      	push	{r4, r5, r6, lr}
 8004c6a:	4604      	mov	r4, r0
 8004c6c:	460d      	mov	r5, r1
 8004c6e:	4616      	mov	r6, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c70:	6823      	ldr	r3, [r4, #0]
 8004c72:	6898      	ldr	r0, [r3, #8]
 8004c74:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004c78:	d100      	bne.n	8004c7c <SPI_WaitFlagStateUntilTimeout.constprop.10+0x14>
}
 8004c7a:	bd70      	pop	{r4, r5, r6, pc}
    if (Timeout != HAL_MAX_DELAY)
 8004c7c:	1c6a      	adds	r2, r5, #1
 8004c7e:	d0f8      	beq.n	8004c72 <SPI_WaitFlagStateUntilTimeout.constprop.10+0xa>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004c80:	f7fd fc46 	bl	8002510 <HAL_GetTick>
 8004c84:	1b80      	subs	r0, r0, r6
 8004c86:	4285      	cmp	r5, r0
 8004c88:	d8f2      	bhi.n	8004c70 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x8>
 8004c8a:	4620      	mov	r0, r4
}
 8004c8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004c90:	f7ff bfc2 	b.w	8004c18 <SPI_WaitFifoStateUntilTimeout.part.1>

08004c94 <SPI_WaitFifoStateUntilTimeout.constprop.11>:
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8004c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c96:	4605      	mov	r5, r0
 8004c98:	460c      	mov	r4, r1
 8004c9a:	4616      	mov	r6, r2
 8004c9c:	461f      	mov	r7, r3
  while ((hspi->Instance->SR & Fifo) != State)
 8004c9e:	6829      	ldr	r1, [r5, #0]
 8004ca0:	6888      	ldr	r0, [r1, #8]
 8004ca2:	4020      	ands	r0, r4
 8004ca4:	d100      	bne.n	8004ca8 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x14>
}
 8004ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004ca8:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004cac:	bf08      	it	eq
 8004cae:	7b0b      	ldrbeq	r3, [r1, #12]
    if (Timeout != HAL_MAX_DELAY)
 8004cb0:	1c73      	adds	r3, r6, #1
 8004cb2:	d0f5      	beq.n	8004ca0 <SPI_WaitFifoStateUntilTimeout.constprop.11+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004cb4:	f7fd fc2c 	bl	8002510 <HAL_GetTick>
 8004cb8:	1bc0      	subs	r0, r0, r7
 8004cba:	4286      	cmp	r6, r0
 8004cbc:	d8ef      	bhi.n	8004c9e <SPI_WaitFifoStateUntilTimeout.constprop.11+0xa>
 8004cbe:	4628      	mov	r0, r5
}
 8004cc0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004cc4:	f7ff bfa8 	b.w	8004c18 <SPI_WaitFifoStateUntilTimeout.part.1>

08004cc8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004cc8:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004cca:	4613      	mov	r3, r2
{
 8004ccc:	460d      	mov	r5, r1
 8004cce:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004cd0:	460a      	mov	r2, r1
 8004cd2:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 8004cd6:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004cd8:	f7ff ffdc 	bl	8004c94 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8004cdc:	b128      	cbz	r0, 8004cea <SPI_EndRxTxTransaction+0x22>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cde:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004ce0:	f043 0320 	orr.w	r3, r3, #32
 8004ce4:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8004ce6:	2003      	movs	r0, #3
 8004ce8:	e00f      	b.n	8004d0a <SPI_EndRxTxTransaction+0x42>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004cea:	4632      	mov	r2, r6
 8004cec:	4629      	mov	r1, r5
 8004cee:	4620      	mov	r0, r4
 8004cf0:	f7ff ffba 	bl	8004c68 <SPI_WaitFlagStateUntilTimeout.constprop.10>
 8004cf4:	2800      	cmp	r0, #0
 8004cf6:	d1f2      	bne.n	8004cde <SPI_EndRxTxTransaction+0x16>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004cf8:	4633      	mov	r3, r6
 8004cfa:	462a      	mov	r2, r5
 8004cfc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004d00:	4620      	mov	r0, r4
 8004d02:	f7ff ffc7 	bl	8004c94 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8004d06:	2800      	cmp	r0, #0
 8004d08:	d1e9      	bne.n	8004cde <SPI_EndRxTxTransaction+0x16>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8004d0a:	bd70      	pop	{r4, r5, r6, pc}

08004d0c <HAL_SPI_Init>:
{
 8004d0c:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 8004d0e:	4604      	mov	r4, r0
 8004d10:	2800      	cmp	r0, #0
 8004d12:	d04a      	beq.n	8004daa <HAL_SPI_Init+0x9e>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d14:	2300      	movs	r3, #0
 8004d16:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d18:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8004d1c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004d20:	b91b      	cbnz	r3, 8004d2a <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8004d22:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8004d26:	f7fd f92d 	bl	8001f84 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8004d2a:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8004d2c:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8004d2e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8004d32:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d34:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8004d36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d3a:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8004d3e:	600b      	str	r3, [r1, #0]
 8004d40:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d44:	d92e      	bls.n	8004da4 <HAL_SPI_Init+0x98>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004d46:	4618      	mov	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004d48:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d4c:	bf18      	it	ne
 8004d4e:	62a3      	strne	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004d50:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004d52:	b92b      	cbnz	r3, 8004d60 <HAL_SPI_Init+0x54>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d54:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004d58:	bf8c      	ite	hi
 8004d5a:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004d5c:	2301      	movls	r3, #1
 8004d5e:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004d60:	68a6      	ldr	r6, [r4, #8]
 8004d62:	6863      	ldr	r3, [r4, #4]
 8004d64:	69a5      	ldr	r5, [r4, #24]
 8004d66:	4333      	orrs	r3, r6
 8004d68:	6926      	ldr	r6, [r4, #16]
 8004d6a:	4333      	orrs	r3, r6
 8004d6c:	6966      	ldr	r6, [r4, #20]
 8004d6e:	4333      	orrs	r3, r6
 8004d70:	69e6      	ldr	r6, [r4, #28]
 8004d72:	4333      	orrs	r3, r6
 8004d74:	6a26      	ldr	r6, [r4, #32]
 8004d76:	4333      	orrs	r3, r6
 8004d78:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004d7a:	4333      	orrs	r3, r6
 8004d7c:	f405 7600 	and.w	r6, r5, #512	; 0x200
 8004d80:	4333      	orrs	r3, r6
 8004d82:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004d84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d86:	431a      	orrs	r2, r3
 8004d88:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004d8a:	0c2d      	lsrs	r5, r5, #16
 8004d8c:	431a      	orrs	r2, r3
 8004d8e:	f005 0504 	and.w	r5, r5, #4
 8004d92:	432a      	orrs	r2, r5
 8004d94:	4302      	orrs	r2, r0
  hspi->State     = HAL_SPI_STATE_READY;
 8004d96:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d98:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004d9a:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d9c:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004d9e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  return HAL_OK;
 8004da2:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004da4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004da8:	e7d0      	b.n	8004d4c <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 8004daa:	2001      	movs	r0, #1
}
 8004dac:	bd70      	pop	{r4, r5, r6, pc}

08004dae <HAL_SPI_Transmit>:
{
 8004dae:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004db2:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8004db4:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8004db8:	2b01      	cmp	r3, #1
{
 8004dba:	4604      	mov	r4, r0
 8004dbc:	460d      	mov	r5, r1
 8004dbe:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8004dc0:	f000 80b1 	beq.w	8004f26 <HAL_SPI_Transmit+0x178>
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8004dca:	f7fd fba1 	bl	8002510 <HAL_GetTick>
 8004dce:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8004dd0:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8004dd4:	b2c0      	uxtb	r0, r0
 8004dd6:	2801      	cmp	r0, #1
 8004dd8:	f040 80a3 	bne.w	8004f22 <HAL_SPI_Transmit+0x174>
  if ((pData == NULL) || (Size == 0U))
 8004ddc:	2d00      	cmp	r5, #0
 8004dde:	d05f      	beq.n	8004ea0 <HAL_SPI_Transmit+0xf2>
 8004de0:	f1b8 0f00 	cmp.w	r8, #0
 8004de4:	d05c      	beq.n	8004ea0 <HAL_SPI_Transmit+0xf2>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004de6:	2303      	movs	r3, #3
 8004de8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dec:	2000      	movs	r0, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dee:	68a3      	ldr	r3, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004df0:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004df2:	6420      	str	r0, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 8004df4:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->RxXferSize  = 0U;
 8004df8:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004dfc:	f8a4 0046 	strh.w	r0, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004e00:	6520      	str	r0, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004e02:	64e0      	str	r0, [r4, #76]	; 0x4c
 8004e04:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004e06:	63a5      	str	r5, [r4, #56]	; 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8004e0c:	bf08      	it	eq
 8004e0e:	6803      	ldreq	r3, [r0, #0]
  hspi->TxXferSize  = Size;
 8004e10:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
    SPI_1LINE_TX(hspi);
 8004e14:	bf04      	itt	eq
 8004e16:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8004e1a:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e1c:	6803      	ldr	r3, [r0, #0]
 8004e1e:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8004e20:	bf5e      	ittt	pl
 8004e22:	6803      	ldrpl	r3, [r0, #0]
 8004e24:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8004e28:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e2a:	68e3      	ldr	r3, [r4, #12]
 8004e2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e30:	6863      	ldr	r3, [r4, #4]
 8004e32:	d93e      	bls.n	8004eb2 <HAL_SPI_Transmit+0x104>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e34:	b113      	cbz	r3, 8004e3c <HAL_SPI_Transmit+0x8e>
 8004e36:	f1b8 0f01 	cmp.w	r8, #1
 8004e3a:	d107      	bne.n	8004e4c <HAL_SPI_Transmit+0x9e>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e3c:	f835 3b02 	ldrh.w	r3, [r5], #2
 8004e40:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e42:	63a5      	str	r5, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8004e44:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004e46:	3b01      	subs	r3, #1
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8004e4c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	b9a3      	cbnz	r3, 8004e7c <HAL_SPI_Transmit+0xce>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e52:	463a      	mov	r2, r7
 8004e54:	4631      	mov	r1, r6
 8004e56:	4620      	mov	r0, r4
 8004e58:	f7ff ff36 	bl	8004cc8 <SPI_EndRxTxTransaction>
 8004e5c:	2800      	cmp	r0, #0
 8004e5e:	d15d      	bne.n	8004f1c <HAL_SPI_Transmit+0x16e>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e60:	68a3      	ldr	r3, [r4, #8]
 8004e62:	b933      	cbnz	r3, 8004e72 <HAL_SPI_Transmit+0xc4>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e64:	9301      	str	r3, [sp, #4]
 8004e66:	6823      	ldr	r3, [r4, #0]
 8004e68:	68da      	ldr	r2, [r3, #12]
 8004e6a:	9201      	str	r2, [sp, #4]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	9301      	str	r3, [sp, #4]
 8004e70:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e72:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 8004e74:	3000      	adds	r0, #0
 8004e76:	bf18      	it	ne
 8004e78:	2001      	movne	r0, #1
 8004e7a:	e011      	b.n	8004ea0 <HAL_SPI_Transmit+0xf2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e7c:	6822      	ldr	r2, [r4, #0]
 8004e7e:	6893      	ldr	r3, [r2, #8]
 8004e80:	0798      	lsls	r0, r3, #30
 8004e82:	d505      	bpl.n	8004e90 <HAL_SPI_Transmit+0xe2>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e84:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004e86:	f833 1b02 	ldrh.w	r1, [r3], #2
 8004e8a:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e8c:	63a3      	str	r3, [r4, #56]	; 0x38
 8004e8e:	e7d9      	b.n	8004e44 <HAL_SPI_Transmit+0x96>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e90:	f7fd fb3e 	bl	8002510 <HAL_GetTick>
 8004e94:	1bc0      	subs	r0, r0, r7
 8004e96:	42b0      	cmp	r0, r6
 8004e98:	d3d8      	bcc.n	8004e4c <HAL_SPI_Transmit+0x9e>
 8004e9a:	1c71      	adds	r1, r6, #1
 8004e9c:	d0d6      	beq.n	8004e4c <HAL_SPI_Transmit+0x9e>
          errorcode = HAL_TIMEOUT;
 8004e9e:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8004eac:	b002      	add	sp, #8
 8004eae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004eb2:	b113      	cbz	r3, 8004eba <HAL_SPI_Transmit+0x10c>
 8004eb4:	f1b8 0f01 	cmp.w	r8, #1
 8004eb8:	d113      	bne.n	8004ee2 <HAL_SPI_Transmit+0x134>
      if (hspi->TxXferCount > 1U)
 8004eba:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d906      	bls.n	8004ed0 <HAL_SPI_Transmit+0x122>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ec2:	f835 3b02 	ldrh.w	r3, [r5], #2
 8004ec6:	60c3      	str	r3, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ec8:	63a5      	str	r5, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004eca:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004ecc:	3b02      	subs	r3, #2
 8004ece:	e006      	b.n	8004ede <HAL_SPI_Transmit+0x130>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ed0:	782b      	ldrb	r3, [r5, #0]
 8004ed2:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr ++;
 8004ed4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8004eda:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004edc:	3b01      	subs	r3, #1
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8004ee2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d0b3      	beq.n	8004e52 <HAL_SPI_Transmit+0xa4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004eea:	6823      	ldr	r3, [r4, #0]
 8004eec:	689a      	ldr	r2, [r3, #8]
 8004eee:	0792      	lsls	r2, r2, #30
 8004ef0:	d50c      	bpl.n	8004f0c <HAL_SPI_Transmit+0x15e>
        if (hspi->TxXferCount > 1U)
 8004ef2:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8004ef4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004ef6:	b292      	uxth	r2, r2
 8004ef8:	2a01      	cmp	r2, #1
 8004efa:	d904      	bls.n	8004f06 <HAL_SPI_Transmit+0x158>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004efc:	f830 2b02 	ldrh.w	r2, [r0], #2
 8004f00:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f02:	63a0      	str	r0, [r4, #56]	; 0x38
 8004f04:	e7e1      	b.n	8004eca <HAL_SPI_Transmit+0x11c>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f06:	7802      	ldrb	r2, [r0, #0]
 8004f08:	731a      	strb	r2, [r3, #12]
 8004f0a:	e7e3      	b.n	8004ed4 <HAL_SPI_Transmit+0x126>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f0c:	f7fd fb00 	bl	8002510 <HAL_GetTick>
 8004f10:	1bc0      	subs	r0, r0, r7
 8004f12:	4286      	cmp	r6, r0
 8004f14:	d8e5      	bhi.n	8004ee2 <HAL_SPI_Transmit+0x134>
 8004f16:	1c73      	adds	r3, r6, #1
 8004f18:	d0e3      	beq.n	8004ee2 <HAL_SPI_Transmit+0x134>
 8004f1a:	e7c0      	b.n	8004e9e <HAL_SPI_Transmit+0xf0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f1c:	2320      	movs	r3, #32
 8004f1e:	6623      	str	r3, [r4, #96]	; 0x60
 8004f20:	e79e      	b.n	8004e60 <HAL_SPI_Transmit+0xb2>
    errorcode = HAL_BUSY;
 8004f22:	2002      	movs	r0, #2
 8004f24:	e7bc      	b.n	8004ea0 <HAL_SPI_Transmit+0xf2>
  __HAL_LOCK(hspi);
 8004f26:	2002      	movs	r0, #2
 8004f28:	e7c0      	b.n	8004eac <HAL_SPI_Transmit+0xfe>

08004f2a <HAL_SPI_TransmitReceive>:
{
 8004f2a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f2e:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8004f30:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 8004f34:	9f08      	ldr	r7, [sp, #32]
  __HAL_LOCK(hspi);
 8004f36:	2b01      	cmp	r3, #1
{
 8004f38:	4604      	mov	r4, r0
 8004f3a:	460d      	mov	r5, r1
 8004f3c:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8004f3e:	f000 8115 	beq.w	800516c <HAL_SPI_TransmitReceive+0x242>
 8004f42:	2301      	movs	r3, #1
 8004f44:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8004f48:	f7fd fae2 	bl	8002510 <HAL_GetTick>
  tmp_state           = hspi->State;
 8004f4c:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tmp_mode            = hspi->Init.Mode;
 8004f50:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8004f52:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004f54:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8004f56:	4680      	mov	r8, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004f58:	d00a      	beq.n	8004f70 <HAL_SPI_TransmitReceive+0x46>
 8004f5a:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8004f5e:	f040 8103 	bne.w	8005168 <HAL_SPI_TransmitReceive+0x23e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004f62:	68a0      	ldr	r0, [r4, #8]
 8004f64:	2800      	cmp	r0, #0
 8004f66:	f040 80ff 	bne.w	8005168 <HAL_SPI_TransmitReceive+0x23e>
 8004f6a:	2b04      	cmp	r3, #4
 8004f6c:	f040 80fc 	bne.w	8005168 <HAL_SPI_TransmitReceive+0x23e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004f70:	2d00      	cmp	r5, #0
 8004f72:	d049      	beq.n	8005008 <HAL_SPI_TransmitReceive+0xde>
 8004f74:	f1b9 0f00 	cmp.w	r9, #0
 8004f78:	d046      	beq.n	8005008 <HAL_SPI_TransmitReceive+0xde>
 8004f7a:	2e00      	cmp	r6, #0
 8004f7c:	d044      	beq.n	8005008 <HAL_SPI_TransmitReceive+0xde>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004f7e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004f82:	68e2      	ldr	r2, [r4, #12]
 8004f84:	6820      	ldr	r0, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004f86:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004f8a:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004f8c:	bf1c      	itt	ne
 8004f8e:	2305      	movne	r3, #5
 8004f90:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f94:	2300      	movs	r3, #0
 8004f96:	6623      	str	r3, [r4, #96]	; 0x60
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004f98:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  hspi->RxXferCount = Size;
 8004f9c:	f8a4 6046 	strh.w	r6, [r4, #70]	; 0x46
  hspi->TxXferCount = Size;
 8004fa0:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004fa2:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004fa4:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxXferSize  = Size;
 8004fa6:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004faa:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004fac:	87a6      	strh	r6, [r4, #60]	; 0x3c
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004fae:	6843      	ldr	r3, [r0, #4]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004fb0:	d801      	bhi.n	8004fb6 <HAL_SPI_TransmitReceive+0x8c>
 8004fb2:	2e01      	cmp	r6, #1
 8004fb4:	d92a      	bls.n	800500c <HAL_SPI_TransmitReceive+0xe2>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004fb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004fba:	6043      	str	r3, [r0, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fbc:	6803      	ldr	r3, [r0, #0]
 8004fbe:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8004fc0:	bf5e      	ittt	pl
 8004fc2:	6803      	ldrpl	r3, [r0, #0]
 8004fc4:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8004fc8:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004fca:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 8004fce:	d956      	bls.n	800507e <HAL_SPI_TransmitReceive+0x154>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fd0:	b109      	cbz	r1, 8004fd6 <HAL_SPI_TransmitReceive+0xac>
 8004fd2:	2e01      	cmp	r6, #1
 8004fd4:	d107      	bne.n	8004fe6 <HAL_SPI_TransmitReceive+0xbc>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fd6:	f835 3b02 	ldrh.w	r3, [r5], #2
 8004fda:	60c3      	str	r3, [r0, #12]
      hspi->TxXferCount--;
 8004fdc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fde:	63a5      	str	r5, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8004fe6:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fe8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	b98b      	cbnz	r3, 8005012 <HAL_SPI_TransmitReceive+0xe8>
 8004fee:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	b96b      	cbnz	r3, 8005012 <HAL_SPI_TransmitReceive+0xe8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ff6:	4642      	mov	r2, r8
 8004ff8:	4639      	mov	r1, r7
 8004ffa:	4620      	mov	r0, r4
 8004ffc:	f7ff fe64 	bl	8004cc8 <SPI_EndRxTxTransaction>
 8005000:	2800      	cmp	r0, #0
 8005002:	d034      	beq.n	800506e <HAL_SPI_TransmitReceive+0x144>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005004:	2320      	movs	r3, #32
 8005006:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005008:	2001      	movs	r0, #1
 800500a:	e030      	b.n	800506e <HAL_SPI_TransmitReceive+0x144>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800500c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005010:	e7d3      	b.n	8004fba <HAL_SPI_TransmitReceive+0x90>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005012:	6822      	ldr	r2, [r4, #0]
 8005014:	6893      	ldr	r3, [r2, #8]
 8005016:	0799      	lsls	r1, r3, #30
 8005018:	d50d      	bpl.n	8005036 <HAL_SPI_TransmitReceive+0x10c>
 800501a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800501c:	b29b      	uxth	r3, r3
 800501e:	b153      	cbz	r3, 8005036 <HAL_SPI_TransmitReceive+0x10c>
 8005020:	b14d      	cbz	r5, 8005036 <HAL_SPI_TransmitReceive+0x10c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005022:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005024:	f833 1b02 	ldrh.w	r1, [r3], #2
 8005028:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800502a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800502c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800502e:	3b01      	subs	r3, #1
 8005030:	b29b      	uxth	r3, r3
 8005032:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8005034:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005036:	6893      	ldr	r3, [r2, #8]
 8005038:	07db      	lsls	r3, r3, #31
 800503a:	d50f      	bpl.n	800505c <HAL_SPI_TransmitReceive+0x132>
 800503c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005040:	b29b      	uxth	r3, r3
 8005042:	b15b      	cbz	r3, 800505c <HAL_SPI_TransmitReceive+0x132>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005044:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005046:	68d2      	ldr	r2, [r2, #12]
 8005048:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800504c:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800504e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005052:	3b01      	subs	r3, #1
 8005054:	b29b      	uxth	r3, r3
 8005056:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 800505a:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800505c:	f7fd fa58 	bl	8002510 <HAL_GetTick>
 8005060:	eba0 0008 	sub.w	r0, r0, r8
 8005064:	4287      	cmp	r7, r0
 8005066:	d8bf      	bhi.n	8004fe8 <HAL_SPI_TransmitReceive+0xbe>
 8005068:	1c7e      	adds	r6, r7, #1
 800506a:	d0bd      	beq.n	8004fe8 <HAL_SPI_TransmitReceive+0xbe>
        errorcode = HAL_TIMEOUT;
 800506c:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800506e:	2301      	movs	r3, #1
 8005070:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005074:	2300      	movs	r3, #0
 8005076:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 800507a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800507e:	b109      	cbz	r1, 8005084 <HAL_SPI_TransmitReceive+0x15a>
 8005080:	2e01      	cmp	r6, #1
 8005082:	d10b      	bne.n	800509c <HAL_SPI_TransmitReceive+0x172>
      if (hspi->TxXferCount > 1U)
 8005084:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005086:	b29b      	uxth	r3, r3
 8005088:	2b01      	cmp	r3, #1
 800508a:	d951      	bls.n	8005130 <HAL_SPI_TransmitReceive+0x206>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800508c:	f835 3b02 	ldrh.w	r3, [r5], #2
 8005090:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount -= 2U;
 8005092:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005094:	63a5      	str	r5, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005096:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 8005098:	b29b      	uxth	r3, r3
 800509a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800509c:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800509e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	b923      	cbnz	r3, 80050ae <HAL_SPI_TransmitReceive+0x184>
 80050a4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d0a3      	beq.n	8004ff6 <HAL_SPI_TransmitReceive+0xcc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050ae:	6822      	ldr	r2, [r4, #0]
 80050b0:	6893      	ldr	r3, [r2, #8]
 80050b2:	0798      	lsls	r0, r3, #30
 80050b4:	d511      	bpl.n	80050da <HAL_SPI_TransmitReceive+0x1b0>
 80050b6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	b173      	cbz	r3, 80050da <HAL_SPI_TransmitReceive+0x1b0>
 80050bc:	b16d      	cbz	r5, 80050da <HAL_SPI_TransmitReceive+0x1b0>
        if (hspi->TxXferCount > 1U)
 80050be:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80050c6:	d93b      	bls.n	8005140 <HAL_SPI_TransmitReceive+0x216>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050c8:	f833 1b02 	ldrh.w	r1, [r3], #2
 80050cc:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80050ce:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80050d0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80050d2:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 80050d8:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050da:	6822      	ldr	r2, [r4, #0]
 80050dc:	6893      	ldr	r3, [r2, #8]
 80050de:	07d9      	lsls	r1, r3, #31
 80050e0:	d51d      	bpl.n	800511e <HAL_SPI_TransmitReceive+0x1f4>
 80050e2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	b1cb      	cbz	r3, 800511e <HAL_SPI_TransmitReceive+0x1f4>
        if (hspi->RxXferCount > 1U)
 80050ea:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80050f4:	d92c      	bls.n	8005150 <HAL_SPI_TransmitReceive+0x226>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80050f6:	68d1      	ldr	r1, [r2, #12]
 80050f8:	f823 1b02 	strh.w	r1, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80050fc:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80050fe:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005102:	3b02      	subs	r3, #2
 8005104:	b29b      	uxth	r3, r3
 8005106:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800510a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800510e:	b29b      	uxth	r3, r3
 8005110:	2b01      	cmp	r3, #1
 8005112:	d803      	bhi.n	800511c <HAL_SPI_TransmitReceive+0x1f2>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005114:	6853      	ldr	r3, [r2, #4]
 8005116:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800511a:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 800511c:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800511e:	f7fd f9f7 	bl	8002510 <HAL_GetTick>
 8005122:	eba0 0008 	sub.w	r0, r0, r8
 8005126:	4287      	cmp	r7, r0
 8005128:	d8b9      	bhi.n	800509e <HAL_SPI_TransmitReceive+0x174>
 800512a:	1c7b      	adds	r3, r7, #1
 800512c:	d0b7      	beq.n	800509e <HAL_SPI_TransmitReceive+0x174>
 800512e:	e79d      	b.n	800506c <HAL_SPI_TransmitReceive+0x142>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005130:	782b      	ldrb	r3, [r5, #0]
 8005132:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr++;
 8005134:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005136:	3301      	adds	r3, #1
 8005138:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800513a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800513c:	3b01      	subs	r3, #1
 800513e:	e7ab      	b.n	8005098 <HAL_SPI_TransmitReceive+0x16e>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8005144:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005146:	3301      	adds	r3, #1
 8005148:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800514a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800514c:	3b01      	subs	r3, #1
 800514e:	e7c1      	b.n	80050d4 <HAL_SPI_TransmitReceive+0x1aa>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005150:	7b12      	ldrb	r2, [r2, #12]
 8005152:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005154:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005156:	3301      	adds	r3, #1
 8005158:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 800515a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800515e:	3b01      	subs	r3, #1
 8005160:	b29b      	uxth	r3, r3
 8005162:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8005166:	e7d9      	b.n	800511c <HAL_SPI_TransmitReceive+0x1f2>
    errorcode = HAL_BUSY;
 8005168:	2002      	movs	r0, #2
 800516a:	e780      	b.n	800506e <HAL_SPI_TransmitReceive+0x144>
  __HAL_LOCK(hspi);
 800516c:	2002      	movs	r0, #2
}
 800516e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08005174 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005174:	6a03      	ldr	r3, [r0, #32]
 8005176:	f023 0301 	bic.w	r3, r3, #1
 800517a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800517c:	6a03      	ldr	r3, [r0, #32]
{
 800517e:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005180:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005182:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005184:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005186:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800518a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800518e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005190:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8005192:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8005196:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005198:	4d1b      	ldr	r5, [pc, #108]	; (8005208 <TIM_OC1_SetConfig+0x94>)
 800519a:	42a8      	cmp	r0, r5
 800519c:	d00f      	beq.n	80051be <TIM_OC1_SetConfig+0x4a>
 800519e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80051a2:	42a8      	cmp	r0, r5
 80051a4:	d00b      	beq.n	80051be <TIM_OC1_SetConfig+0x4a>
 80051a6:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80051aa:	42a8      	cmp	r0, r5
 80051ac:	d007      	beq.n	80051be <TIM_OC1_SetConfig+0x4a>
 80051ae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80051b2:	42a8      	cmp	r0, r5
 80051b4:	d003      	beq.n	80051be <TIM_OC1_SetConfig+0x4a>
 80051b6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80051ba:	42a8      	cmp	r0, r5
 80051bc:	d11e      	bne.n	80051fc <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80051be:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80051c0:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80051c4:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051c6:	4d10      	ldr	r5, [pc, #64]	; (8005208 <TIM_OC1_SetConfig+0x94>)
 80051c8:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80051ca:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051ce:	d00f      	beq.n	80051f0 <TIM_OC1_SetConfig+0x7c>
 80051d0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80051d4:	42a8      	cmp	r0, r5
 80051d6:	d00b      	beq.n	80051f0 <TIM_OC1_SetConfig+0x7c>
 80051d8:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80051dc:	42a8      	cmp	r0, r5
 80051de:	d007      	beq.n	80051f0 <TIM_OC1_SetConfig+0x7c>
 80051e0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80051e4:	42a8      	cmp	r0, r5
 80051e6:	d003      	beq.n	80051f0 <TIM_OC1_SetConfig+0x7c>
 80051e8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80051ec:	42a8      	cmp	r0, r5
 80051ee:	d105      	bne.n	80051fc <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051f0:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051f4:	698e      	ldr	r6, [r1, #24]
 80051f6:	694c      	ldr	r4, [r1, #20]
 80051f8:	4334      	orrs	r4, r6
 80051fa:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051fc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051fe:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005200:	684a      	ldr	r2, [r1, #4]
 8005202:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005204:	6203      	str	r3, [r0, #32]
 8005206:	bd70      	pop	{r4, r5, r6, pc}
 8005208:	40012c00 	.word	0x40012c00

0800520c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800520c:	6a03      	ldr	r3, [r0, #32]
 800520e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005212:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005214:	6a03      	ldr	r3, [r0, #32]
{
 8005216:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005218:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800521a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800521c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800521e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005222:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005226:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005228:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800522a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800522e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005232:	4d16      	ldr	r5, [pc, #88]	; (800528c <TIM_OC3_SetConfig+0x80>)
 8005234:	42a8      	cmp	r0, r5
 8005236:	d003      	beq.n	8005240 <TIM_OC3_SetConfig+0x34>
 8005238:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800523c:	42a8      	cmp	r0, r5
 800523e:	d10d      	bne.n	800525c <TIM_OC3_SetConfig+0x50>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005240:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8005242:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005246:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800524a:	4d10      	ldr	r5, [pc, #64]	; (800528c <TIM_OC3_SetConfig+0x80>)
 800524c:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 800524e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005252:	d00e      	beq.n	8005272 <TIM_OC3_SetConfig+0x66>
 8005254:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005258:	42a8      	cmp	r0, r5
 800525a:	d00a      	beq.n	8005272 <TIM_OC3_SetConfig+0x66>
 800525c:	4d0c      	ldr	r5, [pc, #48]	; (8005290 <TIM_OC3_SetConfig+0x84>)
 800525e:	42a8      	cmp	r0, r5
 8005260:	d007      	beq.n	8005272 <TIM_OC3_SetConfig+0x66>
 8005262:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005266:	42a8      	cmp	r0, r5
 8005268:	d003      	beq.n	8005272 <TIM_OC3_SetConfig+0x66>
 800526a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800526e:	42a8      	cmp	r0, r5
 8005270:	d106      	bne.n	8005280 <TIM_OC3_SetConfig+0x74>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005272:	f424 5540 	bic.w	r5, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005276:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005278:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800527a:	4334      	orrs	r4, r6
 800527c:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005280:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005282:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005284:	684a      	ldr	r2, [r1, #4]
 8005286:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005288:	6203      	str	r3, [r0, #32]
 800528a:	bd70      	pop	{r4, r5, r6, pc}
 800528c:	40012c00 	.word	0x40012c00
 8005290:	40014000 	.word	0x40014000

08005294 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005294:	6a03      	ldr	r3, [r0, #32]
 8005296:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800529a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800529c:	6a03      	ldr	r3, [r0, #32]
{
 800529e:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052a0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052a2:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052a4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052a6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80052aa:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052ae:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052b2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80052b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052b8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052bc:	4d0e      	ldr	r5, [pc, #56]	; (80052f8 <TIM_OC4_SetConfig+0x64>)
 80052be:	42a8      	cmp	r0, r5
 80052c0:	d00f      	beq.n	80052e2 <TIM_OC4_SetConfig+0x4e>
 80052c2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80052c6:	42a8      	cmp	r0, r5
 80052c8:	d00b      	beq.n	80052e2 <TIM_OC4_SetConfig+0x4e>
 80052ca:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80052ce:	42a8      	cmp	r0, r5
 80052d0:	d007      	beq.n	80052e2 <TIM_OC4_SetConfig+0x4e>
 80052d2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80052d6:	42a8      	cmp	r0, r5
 80052d8:	d003      	beq.n	80052e2 <TIM_OC4_SetConfig+0x4e>
 80052da:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80052de:	42a8      	cmp	r0, r5
 80052e0:	d104      	bne.n	80052ec <TIM_OC4_SetConfig+0x58>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052e2:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052e4:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052e8:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052ec:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052ee:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052f0:	684a      	ldr	r2, [r1, #4]
 80052f2:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052f4:	6203      	str	r3, [r0, #32]
 80052f6:	bd30      	pop	{r4, r5, pc}
 80052f8:	40012c00 	.word	0x40012c00

080052fc <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80052fc:	6a03      	ldr	r3, [r0, #32]
 80052fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005302:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005304:	6a03      	ldr	r3, [r0, #32]
{
 8005306:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005308:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800530a:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800530c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800530e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005312:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8005316:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005318:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 800531a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800531e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005322:	4d0f      	ldr	r5, [pc, #60]	; (8005360 <TIM_OC5_SetConfig+0x64>)
 8005324:	42a8      	cmp	r0, r5
 8005326:	d00f      	beq.n	8005348 <TIM_OC5_SetConfig+0x4c>
 8005328:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800532c:	42a8      	cmp	r0, r5
 800532e:	d00b      	beq.n	8005348 <TIM_OC5_SetConfig+0x4c>
 8005330:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005334:	42a8      	cmp	r0, r5
 8005336:	d007      	beq.n	8005348 <TIM_OC5_SetConfig+0x4c>
 8005338:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800533c:	42a8      	cmp	r0, r5
 800533e:	d003      	beq.n	8005348 <TIM_OC5_SetConfig+0x4c>
 8005340:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005344:	42a8      	cmp	r0, r5
 8005346:	d104      	bne.n	8005352 <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005348:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 800534a:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800534e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005352:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005354:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005356:	684a      	ldr	r2, [r1, #4]
 8005358:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800535a:	6203      	str	r3, [r0, #32]
 800535c:	bd30      	pop	{r4, r5, pc}
 800535e:	bf00      	nop
 8005360:	40012c00 	.word	0x40012c00

08005364 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005364:	6a03      	ldr	r3, [r0, #32]
 8005366:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800536a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800536c:	6a03      	ldr	r3, [r0, #32]
{
 800536e:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005370:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005372:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005374:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005376:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800537a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800537e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005382:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005384:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005388:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800538c:	4d0e      	ldr	r5, [pc, #56]	; (80053c8 <TIM_OC6_SetConfig+0x64>)
 800538e:	42a8      	cmp	r0, r5
 8005390:	d00f      	beq.n	80053b2 <TIM_OC6_SetConfig+0x4e>
 8005392:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005396:	42a8      	cmp	r0, r5
 8005398:	d00b      	beq.n	80053b2 <TIM_OC6_SetConfig+0x4e>
 800539a:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800539e:	42a8      	cmp	r0, r5
 80053a0:	d007      	beq.n	80053b2 <TIM_OC6_SetConfig+0x4e>
 80053a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80053a6:	42a8      	cmp	r0, r5
 80053a8:	d003      	beq.n	80053b2 <TIM_OC6_SetConfig+0x4e>
 80053aa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80053ae:	42a8      	cmp	r0, r5
 80053b0:	d104      	bne.n	80053bc <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80053b2:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 80053b4:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80053b8:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053bc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80053be:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80053c0:	684a      	ldr	r2, [r1, #4]
 80053c2:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053c4:	6203      	str	r3, [r0, #32]
 80053c6:	bd30      	pop	{r4, r5, pc}
 80053c8:	40012c00 	.word	0x40012c00

080053cc <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053cc:	6803      	ldr	r3, [r0, #0]
 80053ce:	68da      	ldr	r2, [r3, #12]
 80053d0:	f042 0201 	orr.w	r2, r2, #1
 80053d4:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053d6:	6899      	ldr	r1, [r3, #8]
 80053d8:	4a06      	ldr	r2, [pc, #24]	; (80053f4 <HAL_TIM_Base_Start_IT+0x28>)
 80053da:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053dc:	2a06      	cmp	r2, #6
 80053de:	d006      	beq.n	80053ee <HAL_TIM_Base_Start_IT+0x22>
 80053e0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    __HAL_TIM_ENABLE(htim);
 80053e4:	bf1e      	ittt	ne
 80053e6:	681a      	ldrne	r2, [r3, #0]
 80053e8:	f042 0201 	orrne.w	r2, r2, #1
 80053ec:	601a      	strne	r2, [r3, #0]
}
 80053ee:	2000      	movs	r0, #0
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	00010007 	.word	0x00010007

080053f8 <HAL_TIM_PWM_MspInit>:
 80053f8:	4770      	bx	lr

080053fa <HAL_TIM_OC_DelayElapsedCallback>:
 80053fa:	4770      	bx	lr

080053fc <HAL_TIM_IC_CaptureCallback>:
 80053fc:	4770      	bx	lr

080053fe <HAL_TIM_PWM_PulseFinishedCallback>:
 80053fe:	4770      	bx	lr

08005400 <HAL_TIM_TriggerCallback>:
 8005400:	4770      	bx	lr

08005402 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005402:	6803      	ldr	r3, [r0, #0]
 8005404:	691a      	ldr	r2, [r3, #16]
 8005406:	0791      	lsls	r1, r2, #30
{
 8005408:	b510      	push	{r4, lr}
 800540a:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800540c:	d50f      	bpl.n	800542e <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800540e:	68da      	ldr	r2, [r3, #12]
 8005410:	0792      	lsls	r2, r2, #30
 8005412:	d50c      	bpl.n	800542e <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005414:	f06f 0202 	mvn.w	r2, #2
 8005418:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800541a:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800541c:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800541e:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005420:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005422:	f000 8085 	beq.w	8005530 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8005426:	f7ff ffe9 	bl	80053fc <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800542a:	2300      	movs	r3, #0
 800542c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800542e:	6823      	ldr	r3, [r4, #0]
 8005430:	691a      	ldr	r2, [r3, #16]
 8005432:	0752      	lsls	r2, r2, #29
 8005434:	d510      	bpl.n	8005458 <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005436:	68da      	ldr	r2, [r3, #12]
 8005438:	0750      	lsls	r0, r2, #29
 800543a:	d50d      	bpl.n	8005458 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800543c:	f06f 0204 	mvn.w	r2, #4
 8005440:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005442:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005444:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005446:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800544a:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800544c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800544e:	d075      	beq.n	800553c <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8005450:	f7ff ffd4 	bl	80053fc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005454:	2300      	movs	r3, #0
 8005456:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005458:	6823      	ldr	r3, [r4, #0]
 800545a:	691a      	ldr	r2, [r3, #16]
 800545c:	0711      	lsls	r1, r2, #28
 800545e:	d50f      	bpl.n	8005480 <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005460:	68da      	ldr	r2, [r3, #12]
 8005462:	0712      	lsls	r2, r2, #28
 8005464:	d50c      	bpl.n	8005480 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005466:	f06f 0208 	mvn.w	r2, #8
 800546a:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800546c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800546e:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005470:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005472:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8005474:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005476:	d067      	beq.n	8005548 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8005478:	f7ff ffc0 	bl	80053fc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800547c:	2300      	movs	r3, #0
 800547e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005480:	6823      	ldr	r3, [r4, #0]
 8005482:	691a      	ldr	r2, [r3, #16]
 8005484:	06d0      	lsls	r0, r2, #27
 8005486:	d510      	bpl.n	80054aa <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005488:	68da      	ldr	r2, [r3, #12]
 800548a:	06d1      	lsls	r1, r2, #27
 800548c:	d50d      	bpl.n	80054aa <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800548e:	f06f 0210 	mvn.w	r2, #16
 8005492:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005494:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005496:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005498:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800549c:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800549e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054a0:	d058      	beq.n	8005554 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 80054a2:	f7ff ffab 	bl	80053fc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054a6:	2300      	movs	r3, #0
 80054a8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054aa:	6823      	ldr	r3, [r4, #0]
 80054ac:	691a      	ldr	r2, [r3, #16]
 80054ae:	07d2      	lsls	r2, r2, #31
 80054b0:	d508      	bpl.n	80054c4 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054b2:	68da      	ldr	r2, [r3, #12]
 80054b4:	07d0      	lsls	r0, r2, #31
 80054b6:	d505      	bpl.n	80054c4 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054b8:	f06f 0201 	mvn.w	r2, #1
 80054bc:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80054be:	4620      	mov	r0, r4
 80054c0:	f7fc fc18 	bl	8001cf4 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054c4:	6823      	ldr	r3, [r4, #0]
 80054c6:	691a      	ldr	r2, [r3, #16]
 80054c8:	0611      	lsls	r1, r2, #24
 80054ca:	d508      	bpl.n	80054de <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054cc:	68da      	ldr	r2, [r3, #12]
 80054ce:	0612      	lsls	r2, r2, #24
 80054d0:	d505      	bpl.n	80054de <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054d2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80054d6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80054d8:	4620      	mov	r0, r4
 80054da:	f000 fab4 	bl	8005a46 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80054de:	6823      	ldr	r3, [r4, #0]
 80054e0:	691a      	ldr	r2, [r3, #16]
 80054e2:	05d0      	lsls	r0, r2, #23
 80054e4:	d508      	bpl.n	80054f8 <HAL_TIM_IRQHandler+0xf6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054e6:	68da      	ldr	r2, [r3, #12]
 80054e8:	0611      	lsls	r1, r2, #24
 80054ea:	d505      	bpl.n	80054f8 <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80054ec:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80054f0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80054f2:	4620      	mov	r0, r4
 80054f4:	f000 faa8 	bl	8005a48 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054f8:	6823      	ldr	r3, [r4, #0]
 80054fa:	691a      	ldr	r2, [r3, #16]
 80054fc:	0652      	lsls	r2, r2, #25
 80054fe:	d508      	bpl.n	8005512 <HAL_TIM_IRQHandler+0x110>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005500:	68da      	ldr	r2, [r3, #12]
 8005502:	0650      	lsls	r0, r2, #25
 8005504:	d505      	bpl.n	8005512 <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005506:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800550a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800550c:	4620      	mov	r0, r4
 800550e:	f7ff ff77 	bl	8005400 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005512:	6823      	ldr	r3, [r4, #0]
 8005514:	691a      	ldr	r2, [r3, #16]
 8005516:	0691      	lsls	r1, r2, #26
 8005518:	d522      	bpl.n	8005560 <HAL_TIM_IRQHandler+0x15e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800551a:	68da      	ldr	r2, [r3, #12]
 800551c:	0692      	lsls	r2, r2, #26
 800551e:	d51f      	bpl.n	8005560 <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005520:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8005524:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005526:	611a      	str	r2, [r3, #16]
}
 8005528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800552c:	f000 ba8a 	b.w	8005a44 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005530:	f7ff ff63 	bl	80053fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005534:	4620      	mov	r0, r4
 8005536:	f7ff ff62 	bl	80053fe <HAL_TIM_PWM_PulseFinishedCallback>
 800553a:	e776      	b.n	800542a <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800553c:	f7ff ff5d 	bl	80053fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005540:	4620      	mov	r0, r4
 8005542:	f7ff ff5c 	bl	80053fe <HAL_TIM_PWM_PulseFinishedCallback>
 8005546:	e785      	b.n	8005454 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005548:	f7ff ff57 	bl	80053fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800554c:	4620      	mov	r0, r4
 800554e:	f7ff ff56 	bl	80053fe <HAL_TIM_PWM_PulseFinishedCallback>
 8005552:	e793      	b.n	800547c <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005554:	f7ff ff51 	bl	80053fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005558:	4620      	mov	r0, r4
 800555a:	f7ff ff50 	bl	80053fe <HAL_TIM_PWM_PulseFinishedCallback>
 800555e:	e7a2      	b.n	80054a6 <HAL_TIM_IRQHandler+0xa4>
 8005560:	bd10      	pop	{r4, pc}
	...

08005564 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005564:	4a30      	ldr	r2, [pc, #192]	; (8005628 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8005566:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005568:	4290      	cmp	r0, r2
 800556a:	d012      	beq.n	8005592 <TIM_Base_SetConfig+0x2e>
 800556c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005570:	d00f      	beq.n	8005592 <TIM_Base_SetConfig+0x2e>
 8005572:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005576:	4290      	cmp	r0, r2
 8005578:	d00b      	beq.n	8005592 <TIM_Base_SetConfig+0x2e>
 800557a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800557e:	4290      	cmp	r0, r2
 8005580:	d007      	beq.n	8005592 <TIM_Base_SetConfig+0x2e>
 8005582:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005586:	4290      	cmp	r0, r2
 8005588:	d003      	beq.n	8005592 <TIM_Base_SetConfig+0x2e>
 800558a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800558e:	4290      	cmp	r0, r2
 8005590:	d119      	bne.n	80055c6 <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 8005592:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005594:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005598:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800559a:	4a23      	ldr	r2, [pc, #140]	; (8005628 <TIM_Base_SetConfig+0xc4>)
 800559c:	4290      	cmp	r0, r2
 800559e:	d01d      	beq.n	80055dc <TIM_Base_SetConfig+0x78>
 80055a0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80055a4:	d01a      	beq.n	80055dc <TIM_Base_SetConfig+0x78>
 80055a6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80055aa:	4290      	cmp	r0, r2
 80055ac:	d016      	beq.n	80055dc <TIM_Base_SetConfig+0x78>
 80055ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055b2:	4290      	cmp	r0, r2
 80055b4:	d012      	beq.n	80055dc <TIM_Base_SetConfig+0x78>
 80055b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055ba:	4290      	cmp	r0, r2
 80055bc:	d00e      	beq.n	80055dc <TIM_Base_SetConfig+0x78>
 80055be:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80055c2:	4290      	cmp	r0, r2
 80055c4:	d00a      	beq.n	80055dc <TIM_Base_SetConfig+0x78>
 80055c6:	4a19      	ldr	r2, [pc, #100]	; (800562c <TIM_Base_SetConfig+0xc8>)
 80055c8:	4290      	cmp	r0, r2
 80055ca:	d007      	beq.n	80055dc <TIM_Base_SetConfig+0x78>
 80055cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055d0:	4290      	cmp	r0, r2
 80055d2:	d003      	beq.n	80055dc <TIM_Base_SetConfig+0x78>
 80055d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055d8:	4290      	cmp	r0, r2
 80055da:	d103      	bne.n	80055e4 <TIM_Base_SetConfig+0x80>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055dc:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80055de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055e2:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055e4:	694a      	ldr	r2, [r1, #20]
 80055e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055ea:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80055ec:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055ee:	688b      	ldr	r3, [r1, #8]
 80055f0:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80055f2:	680b      	ldr	r3, [r1, #0]
 80055f4:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055f6:	4b0c      	ldr	r3, [pc, #48]	; (8005628 <TIM_Base_SetConfig+0xc4>)
 80055f8:	4298      	cmp	r0, r3
 80055fa:	d00f      	beq.n	800561c <TIM_Base_SetConfig+0xb8>
 80055fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005600:	4298      	cmp	r0, r3
 8005602:	d00b      	beq.n	800561c <TIM_Base_SetConfig+0xb8>
 8005604:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8005608:	4298      	cmp	r0, r3
 800560a:	d007      	beq.n	800561c <TIM_Base_SetConfig+0xb8>
 800560c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005610:	4298      	cmp	r0, r3
 8005612:	d003      	beq.n	800561c <TIM_Base_SetConfig+0xb8>
 8005614:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005618:	4298      	cmp	r0, r3
 800561a:	d101      	bne.n	8005620 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 800561c:	690b      	ldr	r3, [r1, #16]
 800561e:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8005620:	2301      	movs	r3, #1
 8005622:	6143      	str	r3, [r0, #20]
 8005624:	4770      	bx	lr
 8005626:	bf00      	nop
 8005628:	40012c00 	.word	0x40012c00
 800562c:	40014000 	.word	0x40014000

08005630 <HAL_TIM_Base_Init>:
{
 8005630:	b510      	push	{r4, lr}
  if (htim == NULL)
 8005632:	4604      	mov	r4, r0
 8005634:	b1a0      	cbz	r0, 8005660 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005636:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800563a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800563e:	b91b      	cbnz	r3, 8005648 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8005640:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005644:	f7fc fcd2 	bl	8001fec <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8005648:	2302      	movs	r3, #2
 800564a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800564e:	6820      	ldr	r0, [r4, #0]
 8005650:	1d21      	adds	r1, r4, #4
 8005652:	f7ff ff87 	bl	8005564 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8005656:	2301      	movs	r3, #1
 8005658:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800565c:	2000      	movs	r0, #0
 800565e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005660:	2001      	movs	r0, #1
}
 8005662:	bd10      	pop	{r4, pc}

08005664 <HAL_TIM_PWM_Init>:
{
 8005664:	b510      	push	{r4, lr}
  if (htim == NULL)
 8005666:	4604      	mov	r4, r0
 8005668:	b1a0      	cbz	r0, 8005694 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800566a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800566e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005672:	b91b      	cbnz	r3, 800567c <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8005674:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8005678:	f7ff febe 	bl	80053f8 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800567c:	2302      	movs	r3, #2
 800567e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005682:	6820      	ldr	r0, [r4, #0]
 8005684:	1d21      	adds	r1, r4, #4
 8005686:	f7ff ff6d 	bl	8005564 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800568a:	2301      	movs	r3, #1
 800568c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005690:	2000      	movs	r0, #0
 8005692:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005694:	2001      	movs	r0, #1
}
 8005696:	bd10      	pop	{r4, pc}

08005698 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005698:	6a03      	ldr	r3, [r0, #32]
 800569a:	f023 0310 	bic.w	r3, r3, #16
 800569e:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80056a0:	6a03      	ldr	r3, [r0, #32]
{
 80056a2:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 80056a4:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80056a6:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056a8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056aa:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80056ae:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056b2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056b6:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80056b8:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056bc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80056c0:	4d16      	ldr	r5, [pc, #88]	; (800571c <TIM_OC2_SetConfig+0x84>)
 80056c2:	42a8      	cmp	r0, r5
 80056c4:	d003      	beq.n	80056ce <TIM_OC2_SetConfig+0x36>
 80056c6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80056ca:	42a8      	cmp	r0, r5
 80056cc:	d10d      	bne.n	80056ea <TIM_OC2_SetConfig+0x52>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056ce:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80056d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056d4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056d8:	4d10      	ldr	r5, [pc, #64]	; (800571c <TIM_OC2_SetConfig+0x84>)
 80056da:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 80056dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056e0:	d00e      	beq.n	8005700 <TIM_OC2_SetConfig+0x68>
 80056e2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80056e6:	42a8      	cmp	r0, r5
 80056e8:	d00a      	beq.n	8005700 <TIM_OC2_SetConfig+0x68>
 80056ea:	4d0d      	ldr	r5, [pc, #52]	; (8005720 <TIM_OC2_SetConfig+0x88>)
 80056ec:	42a8      	cmp	r0, r5
 80056ee:	d007      	beq.n	8005700 <TIM_OC2_SetConfig+0x68>
 80056f0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80056f4:	42a8      	cmp	r0, r5
 80056f6:	d003      	beq.n	8005700 <TIM_OC2_SetConfig+0x68>
 80056f8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80056fc:	42a8      	cmp	r0, r5
 80056fe:	d106      	bne.n	800570e <TIM_OC2_SetConfig+0x76>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005700:	f424 6540 	bic.w	r5, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005704:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005706:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005708:	4334      	orrs	r4, r6
 800570a:	ea45 0484 	orr.w	r4, r5, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 800570e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005710:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005712:	684a      	ldr	r2, [r1, #4]
 8005714:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8005716:	6203      	str	r3, [r0, #32]
 8005718:	bd70      	pop	{r4, r5, r6, pc}
 800571a:	bf00      	nop
 800571c:	40012c00 	.word	0x40012c00
 8005720:	40014000 	.word	0x40014000

08005724 <HAL_TIM_PWM_ConfigChannel>:
{
 8005724:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8005726:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800572a:	2b01      	cmp	r3, #1
{
 800572c:	4604      	mov	r4, r0
 800572e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8005732:	d010      	beq.n	8005756 <HAL_TIM_PWM_ConfigChannel+0x32>
 8005734:	2301      	movs	r3, #1
  switch (Channel)
 8005736:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8005738:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800573c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 8005740:	d043      	beq.n	80057ca <HAL_TIM_PWM_ConfigChannel+0xa6>
 8005742:	d809      	bhi.n	8005758 <HAL_TIM_PWM_ConfigChannel+0x34>
 8005744:	b1fa      	cbz	r2, 8005786 <HAL_TIM_PWM_ConfigChannel+0x62>
 8005746:	2a04      	cmp	r2, #4
 8005748:	d02e      	beq.n	80057a8 <HAL_TIM_PWM_ConfigChannel+0x84>
  htim->State = HAL_TIM_STATE_READY;
 800574a:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800574c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800574e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005752:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8005756:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8005758:	2a10      	cmp	r2, #16
 800575a:	d047      	beq.n	80057ec <HAL_TIM_PWM_ConfigChannel+0xc8>
 800575c:	2a14      	cmp	r2, #20
 800575e:	d056      	beq.n	800580e <HAL_TIM_PWM_ConfigChannel+0xea>
 8005760:	2a0c      	cmp	r2, #12
 8005762:	d1f2      	bne.n	800574a <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005764:	6820      	ldr	r0, [r4, #0]
 8005766:	f7ff fd95 	bl	8005294 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800576a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800576c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800576e:	69da      	ldr	r2, [r3, #28]
 8005770:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005774:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005776:	69da      	ldr	r2, [r3, #28]
 8005778:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800577c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800577e:	69da      	ldr	r2, [r3, #28]
 8005780:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005784:	e030      	b.n	80057e8 <HAL_TIM_PWM_ConfigChannel+0xc4>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005786:	6820      	ldr	r0, [r4, #0]
 8005788:	f7ff fcf4 	bl	8005174 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800578c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800578e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005790:	699a      	ldr	r2, [r3, #24]
 8005792:	f042 0208 	orr.w	r2, r2, #8
 8005796:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005798:	699a      	ldr	r2, [r3, #24]
 800579a:	f022 0204 	bic.w	r2, r2, #4
 800579e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80057a0:	699a      	ldr	r2, [r3, #24]
 80057a2:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80057a4:	619a      	str	r2, [r3, #24]
      break;
 80057a6:	e7d0      	b.n	800574a <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80057a8:	6820      	ldr	r0, [r4, #0]
 80057aa:	f7ff ff75 	bl	8005698 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80057ae:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80057b0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80057b2:	699a      	ldr	r2, [r3, #24]
 80057b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057b8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80057ba:	699a      	ldr	r2, [r3, #24]
 80057bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057c0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80057c2:	699a      	ldr	r2, [r3, #24]
 80057c4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80057c8:	e7ec      	b.n	80057a4 <HAL_TIM_PWM_ConfigChannel+0x80>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80057ca:	6820      	ldr	r0, [r4, #0]
 80057cc:	f7ff fd1e 	bl	800520c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80057d0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80057d2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80057d4:	69da      	ldr	r2, [r3, #28]
 80057d6:	f042 0208 	orr.w	r2, r2, #8
 80057da:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80057dc:	69da      	ldr	r2, [r3, #28]
 80057de:	f022 0204 	bic.w	r2, r2, #4
 80057e2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80057e4:	69da      	ldr	r2, [r3, #28]
 80057e6:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057e8:	61da      	str	r2, [r3, #28]
      break;
 80057ea:	e7ae      	b.n	800574a <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80057ec:	6820      	ldr	r0, [r4, #0]
 80057ee:	f7ff fd85 	bl	80052fc <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80057f2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80057f4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80057f6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057f8:	f042 0208 	orr.w	r2, r2, #8
 80057fc:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80057fe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005800:	f022 0204 	bic.w	r2, r2, #4
 8005804:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005806:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005808:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800580a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800580c:	e79d      	b.n	800574a <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800580e:	6820      	ldr	r0, [r4, #0]
 8005810:	f7ff fda8 	bl	8005364 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005814:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005816:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005818:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800581a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800581e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005820:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005822:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005826:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005828:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800582a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800582e:	e7ec      	b.n	800580a <HAL_TIM_PWM_ConfigChannel+0xe6>

08005830 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005830:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005832:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005834:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005836:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800583a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800583e:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005840:	6083      	str	r3, [r0, #8]
 8005842:	bd10      	pop	{r4, pc}

08005844 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8005844:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005848:	2b01      	cmp	r3, #1
{
 800584a:	b570      	push	{r4, r5, r6, lr}
 800584c:	4604      	mov	r4, r0
 800584e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8005852:	d017      	beq.n	8005884 <HAL_TIM_ConfigClockSource+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 8005854:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8005858:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 800585a:	2301      	movs	r3, #1
 800585c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8005860:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005862:	4b41      	ldr	r3, [pc, #260]	; (8005968 <HAL_TIM_ConfigClockSource+0x124>)
 8005864:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8005866:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8005868:	680b      	ldr	r3, [r1, #0]
 800586a:	2b40      	cmp	r3, #64	; 0x40
 800586c:	d065      	beq.n	800593a <HAL_TIM_ConfigClockSource+0xf6>
 800586e:	d815      	bhi.n	800589c <HAL_TIM_ConfigClockSource+0x58>
 8005870:	2b10      	cmp	r3, #16
 8005872:	d00c      	beq.n	800588e <HAL_TIM_ConfigClockSource+0x4a>
 8005874:	d807      	bhi.n	8005886 <HAL_TIM_ConfigClockSource+0x42>
 8005876:	b153      	cbz	r3, 800588e <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_READY;
 8005878:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800587a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800587c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005880:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8005884:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8005886:	2b20      	cmp	r3, #32
 8005888:	d001      	beq.n	800588e <HAL_TIM_ConfigClockSource+0x4a>
 800588a:	2b30      	cmp	r3, #48	; 0x30
 800588c:	d1f4      	bne.n	8005878 <HAL_TIM_ConfigClockSource+0x34>
  tmpsmcr = TIMx->SMCR;
 800588e:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005890:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8005894:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005898:	4313      	orrs	r3, r2
 800589a:	e01a      	b.n	80058d2 <HAL_TIM_ConfigClockSource+0x8e>
  switch (sClockSourceConfig->ClockSource)
 800589c:	2b60      	cmp	r3, #96	; 0x60
 800589e:	d034      	beq.n	800590a <HAL_TIM_ConfigClockSource+0xc6>
 80058a0:	d819      	bhi.n	80058d6 <HAL_TIM_ConfigClockSource+0x92>
 80058a2:	2b50      	cmp	r3, #80	; 0x50
 80058a4:	d1e8      	bne.n	8005878 <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058a6:	684a      	ldr	r2, [r1, #4]
 80058a8:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80058aa:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058ac:	6a05      	ldr	r5, [r0, #32]
 80058ae:	f025 0501 	bic.w	r5, r5, #1
 80058b2:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058b4:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058b6:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058be:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80058c2:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80058c4:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80058c6:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80058c8:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80058ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058ce:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80058d2:	6083      	str	r3, [r0, #8]
 80058d4:	e7d0      	b.n	8005878 <HAL_TIM_ConfigClockSource+0x34>
  switch (sClockSourceConfig->ClockSource)
 80058d6:	2b70      	cmp	r3, #112	; 0x70
 80058d8:	d00c      	beq.n	80058f4 <HAL_TIM_ConfigClockSource+0xb0>
 80058da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058de:	d1cb      	bne.n	8005878 <HAL_TIM_ConfigClockSource+0x34>
      TIM_ETR_SetConfig(htim->Instance,
 80058e0:	68cb      	ldr	r3, [r1, #12]
 80058e2:	684a      	ldr	r2, [r1, #4]
 80058e4:	6889      	ldr	r1, [r1, #8]
 80058e6:	f7ff ffa3 	bl	8005830 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058ea:	6822      	ldr	r2, [r4, #0]
 80058ec:	6893      	ldr	r3, [r2, #8]
 80058ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058f2:	e008      	b.n	8005906 <HAL_TIM_ConfigClockSource+0xc2>
      TIM_ETR_SetConfig(htim->Instance,
 80058f4:	68cb      	ldr	r3, [r1, #12]
 80058f6:	684a      	ldr	r2, [r1, #4]
 80058f8:	6889      	ldr	r1, [r1, #8]
 80058fa:	f7ff ff99 	bl	8005830 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80058fe:	6822      	ldr	r2, [r4, #0]
 8005900:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005902:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005906:	6093      	str	r3, [r2, #8]
      break;
 8005908:	e7b6      	b.n	8005878 <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800590a:	684d      	ldr	r5, [r1, #4]
 800590c:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800590e:	6a01      	ldr	r1, [r0, #32]
 8005910:	f021 0110 	bic.w	r1, r1, #16
 8005914:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005916:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8005918:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800591a:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800591e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8005922:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005926:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800592a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800592c:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800592e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005930:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005934:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8005938:	e7cb      	b.n	80058d2 <HAL_TIM_ConfigClockSource+0x8e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800593a:	684a      	ldr	r2, [r1, #4]
 800593c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800593e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005940:	6a05      	ldr	r5, [r0, #32]
 8005942:	f025 0501 	bic.w	r5, r5, #1
 8005946:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005948:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800594a:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800594e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005952:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8005956:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8005958:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800595a:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800595c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800595e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005962:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8005966:	e7b4      	b.n	80058d2 <HAL_TIM_ConfigClockSource+0x8e>
 8005968:	fffe0088 	.word	0xfffe0088

0800596c <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800596c:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800596e:	f001 011f 	and.w	r1, r1, #31
{
 8005972:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005974:	2401      	movs	r4, #1
 8005976:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8005978:	ea23 0304 	bic.w	r3, r3, r4
 800597c:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800597e:	6a03      	ldr	r3, [r0, #32]
 8005980:	408a      	lsls	r2, r1
 8005982:	431a      	orrs	r2, r3
 8005984:	6202      	str	r2, [r0, #32]
 8005986:	bd10      	pop	{r4, pc}

08005988 <HAL_TIM_PWM_Start>:
{
 8005988:	b510      	push	{r4, lr}
 800598a:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800598c:	2201      	movs	r2, #1
 800598e:	6800      	ldr	r0, [r0, #0]
 8005990:	f7ff ffec 	bl	800596c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005994:	6823      	ldr	r3, [r4, #0]
 8005996:	4a13      	ldr	r2, [pc, #76]	; (80059e4 <HAL_TIM_PWM_Start+0x5c>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d01d      	beq.n	80059d8 <HAL_TIM_PWM_Start+0x50>
 800599c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d019      	beq.n	80059d8 <HAL_TIM_PWM_Start+0x50>
 80059a4:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d015      	beq.n	80059d8 <HAL_TIM_PWM_Start+0x50>
 80059ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d011      	beq.n	80059d8 <HAL_TIM_PWM_Start+0x50>
 80059b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d00d      	beq.n	80059d8 <HAL_TIM_PWM_Start+0x50>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059bc:	6899      	ldr	r1, [r3, #8]
 80059be:	4a0a      	ldr	r2, [pc, #40]	; (80059e8 <HAL_TIM_PWM_Start+0x60>)
 80059c0:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059c2:	2a06      	cmp	r2, #6
 80059c4:	d006      	beq.n	80059d4 <HAL_TIM_PWM_Start+0x4c>
 80059c6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80059ca:	d003      	beq.n	80059d4 <HAL_TIM_PWM_Start+0x4c>
    __HAL_TIM_ENABLE(htim);
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	f042 0201 	orr.w	r2, r2, #1
 80059d2:	601a      	str	r2, [r3, #0]
}
 80059d4:	2000      	movs	r0, #0
 80059d6:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 80059d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059de:	645a      	str	r2, [r3, #68]	; 0x44
 80059e0:	e7ec      	b.n	80059bc <HAL_TIM_PWM_Start+0x34>
 80059e2:	bf00      	nop
 80059e4:	40012c00 	.word	0x40012c00
 80059e8:	00010007 	.word	0x00010007

080059ec <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059ec:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80059f0:	2b01      	cmp	r3, #1
{
 80059f2:	b530      	push	{r4, r5, lr}
 80059f4:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80059f8:	d01f      	beq.n	8005a3a <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059fa:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80059fc:	4d10      	ldr	r5, [pc, #64]	; (8005a40 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
  htim->State = HAL_TIM_STATE_BUSY;
 80059fe:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a02:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8005a04:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8005a06:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a08:	d003      	beq.n	8005a12 <HAL_TIMEx_MasterConfigSynchronization+0x26>
 8005a0a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005a0e:	42aa      	cmp	r2, r5
 8005a10:	d103      	bne.n	8005a1a <HAL_TIMEx_MasterConfigSynchronization+0x2e>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a12:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a14:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a18:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a1a:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a1c:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a22:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005a24:	f024 0480 	bic.w	r4, r4, #128	; 0x80

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a28:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a2a:	4321      	orrs	r1, r4

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a2c:	2301      	movs	r3, #1
  htim->Instance->SMCR = tmpsmcr;
 8005a2e:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8005a30:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a34:	2300      	movs	r3, #0
 8005a36:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8005a3a:	4618      	mov	r0, r3

  return HAL_OK;
}
 8005a3c:	bd30      	pop	{r4, r5, pc}
 8005a3e:	bf00      	nop
 8005a40:	40012c00 	.word	0x40012c00

08005a44 <HAL_TIMEx_CommutCallback>:
 8005a44:	4770      	bx	lr

08005a46 <HAL_TIMEx_BreakCallback>:
 8005a46:	4770      	bx	lr

08005a48 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a48:	4770      	bx	lr
	...

08005a4c <UART_SetConfig>:
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a4c:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a4e:	69c1      	ldr	r1, [r0, #28]
{
 8005a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a52:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a54:	6883      	ldr	r3, [r0, #8]
 8005a56:	6900      	ldr	r0, [r0, #16]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a58:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a5a:	4303      	orrs	r3, r0
 8005a5c:	6960      	ldr	r0, [r4, #20]
 8005a5e:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a60:	48ba      	ldr	r0, [pc, #744]	; (8005d4c <UART_SetConfig+0x300>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a62:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a64:	4028      	ands	r0, r5
 8005a66:	4303      	orrs	r3, r0
 8005a68:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a6a:	6853      	ldr	r3, [r2, #4]
 8005a6c:	68e0      	ldr	r0, [r4, #12]
 8005a6e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005a72:	4303      	orrs	r3, r0
 8005a74:	6053      	str	r3, [r2, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a76:	4bb6      	ldr	r3, [pc, #728]	; (8005d50 <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a78:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a7a:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005a7c:	bf1c      	itt	ne
 8005a7e:	6a23      	ldrne	r3, [r4, #32]
 8005a80:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a82:	6893      	ldr	r3, [r2, #8]
 8005a84:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005a88:	4303      	orrs	r3, r0
 8005a8a:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a8c:	4bb1      	ldr	r3, [pc, #708]	; (8005d54 <UART_SetConfig+0x308>)
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d119      	bne.n	8005ac6 <UART_SetConfig+0x7a>
 8005a92:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8005a96:	4ab0      	ldr	r2, [pc, #704]	; (8005d58 <UART_SetConfig+0x30c>)
 8005a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a9c:	f003 0303 	and.w	r3, r3, #3
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005aa0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005aa4:	5cd3      	ldrb	r3, [r2, r3]
 8005aa6:	f040 8138 	bne.w	8005d1a <UART_SetConfig+0x2ce>
  {
    switch (clocksource)
 8005aaa:	2b08      	cmp	r3, #8
 8005aac:	f200 808f 	bhi.w	8005bce <UART_SetConfig+0x182>
 8005ab0:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005ab4:	00ca011a 	.word	0x00ca011a
 8005ab8:	008d00f9 	.word	0x008d00f9
 8005abc:	008d0114 	.word	0x008d0114
 8005ac0:	008d008d 	.word	0x008d008d
 8005ac4:	0036      	.short	0x0036
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ac6:	4ba5      	ldr	r3, [pc, #660]	; (8005d5c <UART_SetConfig+0x310>)
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d107      	bne.n	8005adc <UART_SetConfig+0x90>
 8005acc:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8005ad0:	4aa3      	ldr	r2, [pc, #652]	; (8005d60 <UART_SetConfig+0x314>)
 8005ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ad6:	f003 030c 	and.w	r3, r3, #12
 8005ada:	e7e1      	b.n	8005aa0 <UART_SetConfig+0x54>
 8005adc:	4ba1      	ldr	r3, [pc, #644]	; (8005d64 <UART_SetConfig+0x318>)
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d123      	bne.n	8005b2a <UART_SetConfig+0xde>
 8005ae2:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8005ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005aee:	2b10      	cmp	r3, #16
 8005af0:	f000 80f1 	beq.w	8005cd6 <UART_SetConfig+0x28a>
 8005af4:	d80b      	bhi.n	8005b0e <UART_SetConfig+0xc2>
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	f000 80f3 	beq.w	8005ce2 <UART_SetConfig+0x296>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005afc:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005b00:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8005b04:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b08:	f000 80f8 	beq.w	8005cfc <UART_SetConfig+0x2b0>
 8005b0c:	e0a8      	b.n	8005c60 <UART_SetConfig+0x214>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b0e:	2b20      	cmp	r3, #32
 8005b10:	f000 80c6 	beq.w	8005ca0 <UART_SetConfig+0x254>
 8005b14:	2b30      	cmp	r3, #48	; 0x30
 8005b16:	d1f1      	bne.n	8005afc <UART_SetConfig+0xb0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b18:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005b1c:	f040 80b8 	bne.w	8005c90 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005b20:	6860      	ldr	r0, [r4, #4]
 8005b22:	0843      	lsrs	r3, r0, #1
 8005b24:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8005b28:	e0c3      	b.n	8005cb2 <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b2a:	4b8f      	ldr	r3, [pc, #572]	; (8005d68 <UART_SetConfig+0x31c>)
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d11e      	bne.n	8005b6e <UART_SetConfig+0x122>
 8005b30:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8005b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b38:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005b3c:	2b40      	cmp	r3, #64	; 0x40
 8005b3e:	f000 80bb 	beq.w	8005cb8 <UART_SetConfig+0x26c>
 8005b42:	d80a      	bhi.n	8005b5a <UART_SetConfig+0x10e>
 8005b44:	b97b      	cbnz	r3, 8005b66 <UART_SetConfig+0x11a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b46:	4b82      	ldr	r3, [pc, #520]	; (8005d50 <UART_SetConfig+0x304>)
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	f040 80ca 	bne.w	8005ce2 <UART_SetConfig+0x296>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8005b4e:	f7fe fbd3 	bl	80042f8 <HAL_RCC_GetPCLK1Freq>
        break;
 8005b52:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 8005b54:	bbb0      	cbnz	r0, 8005bc4 <UART_SetConfig+0x178>
 8005b56:	4602      	mov	r2, r0
 8005b58:	e03a      	b.n	8005bd0 <UART_SetConfig+0x184>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b5a:	2b80      	cmp	r3, #128	; 0x80
 8005b5c:	f000 809d 	beq.w	8005c9a <UART_SetConfig+0x24e>
 8005b60:	2bc0      	cmp	r3, #192	; 0xc0
 8005b62:	f000 80b0 	beq.w	8005cc6 <UART_SetConfig+0x27a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b66:	4b7a      	ldr	r3, [pc, #488]	; (8005d50 <UART_SetConfig+0x304>)
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d1c7      	bne.n	8005afc <UART_SetConfig+0xb0>
 8005b6c:	e02f      	b.n	8005bce <UART_SetConfig+0x182>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b6e:	4b7f      	ldr	r3, [pc, #508]	; (8005d6c <UART_SetConfig+0x320>)
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d111      	bne.n	8005b98 <UART_SetConfig+0x14c>
 8005b74:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8005b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b84:	f000 8098 	beq.w	8005cb8 <UART_SetConfig+0x26c>
 8005b88:	d9dc      	bls.n	8005b44 <UART_SetConfig+0xf8>
 8005b8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b8e:	f000 8084 	beq.w	8005c9a <UART_SetConfig+0x24e>
 8005b92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b96:	e7e4      	b.n	8005b62 <UART_SetConfig+0x116>
 8005b98:	4b6d      	ldr	r3, [pc, #436]	; (8005d50 <UART_SetConfig+0x304>)
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d1ae      	bne.n	8005afc <UART_SetConfig+0xb0>
 8005b9e:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8005ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ba6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005baa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bae:	f000 8083 	beq.w	8005cb8 <UART_SetConfig+0x26c>
 8005bb2:	d9c7      	bls.n	8005b44 <UART_SetConfig+0xf8>
 8005bb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bb8:	d06f      	beq.n	8005c9a <UART_SetConfig+0x24e>
 8005bba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005bbe:	e7d0      	b.n	8005b62 <UART_SetConfig+0x116>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8005bc0:	486b      	ldr	r0, [pc, #428]	; (8005d70 <UART_SetConfig+0x324>)
  if (UART_INSTANCE_LOWPOWER(huart))
 8005bc2:	2302      	movs	r3, #2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005bc4:	6862      	ldr	r2, [r4, #4]
 8005bc6:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8005bca:	4281      	cmp	r1, r0
 8005bcc:	d905      	bls.n	8005bda <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 8005bce:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8005bd4:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8005bd6:	4610      	mov	r0, r2
 8005bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005bda:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8005bde:	d8f6      	bhi.n	8005bce <UART_SetConfig+0x182>
        switch (clocksource)
 8005be0:	2b08      	cmp	r3, #8
 8005be2:	d82e      	bhi.n	8005c42 <UART_SetConfig+0x1f6>
 8005be4:	e8df f003 	tbb	[pc, r3]
 8005be8:	2d1c2d05 	.word	0x2d1c2d05
 8005bec:	2d2d2d24 	.word	0x2d2d2d24
 8005bf0:	27          	.byte	0x27
 8005bf1:	00          	.byte	0x00
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005bf2:	f7fe fb81 	bl	80042f8 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005bf6:	6862      	ldr	r2, [r4, #4]
 8005bf8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005bfc:	0856      	lsrs	r6, r2, #1
 8005bfe:	2700      	movs	r7, #0
 8005c00:	fbe1 6700 	umlal	r6, r7, r1, r0
 8005c04:	2300      	movs	r3, #0
 8005c06:	4630      	mov	r0, r6
 8005c08:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8005c0a:	f7fa ffd9 	bl	8000bc0 <__aeabi_uldivmod>
            break;
 8005c0e:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c10:	4b58      	ldr	r3, [pc, #352]	; (8005d74 <UART_SetConfig+0x328>)
 8005c12:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8005c16:	4299      	cmp	r1, r3
 8005c18:	d8d9      	bhi.n	8005bce <UART_SetConfig+0x182>
          huart->Instance->BRR = usartdiv;
 8005c1a:	6823      	ldr	r3, [r4, #0]
 8005c1c:	60d8      	str	r0, [r3, #12]
 8005c1e:	e7d7      	b.n	8005bd0 <UART_SetConfig+0x184>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8005c20:	4855      	ldr	r0, [pc, #340]	; (8005d78 <UART_SetConfig+0x32c>)
 8005c22:	0855      	lsrs	r5, r2, #1
 8005c24:	2300      	movs	r3, #0
 8005c26:	2100      	movs	r1, #0
 8005c28:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8005c2a:	f141 0100 	adc.w	r1, r1, #0
 8005c2e:	e7ec      	b.n	8005c0a <UART_SetConfig+0x1be>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005c30:	f7fe f816 	bl	8003c60 <HAL_RCC_GetSysClockFreq>
 8005c34:	e7df      	b.n	8005bf6 <UART_SetConfig+0x1aa>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8005c36:	0850      	lsrs	r0, r2, #1
 8005c38:	2100      	movs	r1, #0
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8005c40:	e7f3      	b.n	8005c2a <UART_SetConfig+0x1de>
            ret = HAL_ERROR;
 8005c42:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8005c44:	2000      	movs	r0, #0
 8005c46:	e7e3      	b.n	8005c10 <UART_SetConfig+0x1c4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005c48:	f7fe fb68 	bl	800431c <HAL_RCC_GetPCLK2Freq>
 8005c4c:	e04e      	b.n	8005cec <UART_SetConfig+0x2a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005c4e:	f7fe fb53 	bl	80042f8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005c52:	6862      	ldr	r2, [r4, #4]
 8005c54:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8005c58:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c5c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c5e:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c60:	f1a3 0010 	sub.w	r0, r3, #16
 8005c64:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8005c68:	4288      	cmp	r0, r1
 8005c6a:	d8b0      	bhi.n	8005bce <UART_SetConfig+0x182>
      huart->Instance->BRR = usartdiv;
 8005c6c:	6821      	ldr	r1, [r4, #0]
 8005c6e:	60cb      	str	r3, [r1, #12]
 8005c70:	e7ae      	b.n	8005bd0 <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005c72:	f7fe fb53 	bl	800431c <HAL_RCC_GetPCLK2Freq>
 8005c76:	e7ec      	b.n	8005c52 <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005c78:	6860      	ldr	r0, [r4, #4]
 8005c7a:	0843      	lsrs	r3, r0, #1
 8005c7c:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8005c80:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005c84:	fbb3 f3f0 	udiv	r3, r3, r0
 8005c88:	e7e8      	b.n	8005c5c <UART_SetConfig+0x210>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005c8a:	f7fd ffe9 	bl	8003c60 <HAL_RCC_GetSysClockFreq>
 8005c8e:	e7e0      	b.n	8005c52 <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005c90:	6860      	ldr	r0, [r4, #4]
 8005c92:	0843      	lsrs	r3, r0, #1
 8005c94:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005c98:	e7f4      	b.n	8005c84 <UART_SetConfig+0x238>
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c9a:	4b2d      	ldr	r3, [pc, #180]	; (8005d50 <UART_SetConfig+0x304>)
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d08f      	beq.n	8005bc0 <UART_SetConfig+0x174>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ca0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005ca4:	d1e8      	bne.n	8005c78 <UART_SetConfig+0x22c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005ca6:	6860      	ldr	r0, [r4, #4]
 8005ca8:	0843      	lsrs	r3, r0, #1
 8005caa:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8005cae:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005cb2:	fbb3 f3f0 	udiv	r3, r3, r0
 8005cb6:	e01f      	b.n	8005cf8 <UART_SetConfig+0x2ac>
  if (UART_INSTANCE_LOWPOWER(huart))
 8005cb8:	4b25      	ldr	r3, [pc, #148]	; (8005d50 <UART_SetConfig+0x304>)
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d10b      	bne.n	8005cd6 <UART_SetConfig+0x28a>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8005cbe:	f7fd ffcf 	bl	8003c60 <HAL_RCC_GetSysClockFreq>
        break;
 8005cc2:	2304      	movs	r3, #4
 8005cc4:	e746      	b.n	8005b54 <UART_SetConfig+0x108>
  if (UART_INSTANCE_LOWPOWER(huart))
 8005cc6:	4b22      	ldr	r3, [pc, #136]	; (8005d50 <UART_SetConfig+0x304>)
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	f47f af25 	bne.w	8005b18 <UART_SetConfig+0xcc>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8005cce:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if (UART_INSTANCE_LOWPOWER(huart))
 8005cd2:	2308      	movs	r3, #8
 8005cd4:	e776      	b.n	8005bc4 <UART_SetConfig+0x178>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cd6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005cda:	d1d6      	bne.n	8005c8a <UART_SetConfig+0x23e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005cdc:	f7fd ffc0 	bl	8003c60 <HAL_RCC_GetSysClockFreq>
 8005ce0:	e004      	b.n	8005cec <UART_SetConfig+0x2a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ce2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005ce6:	d1b2      	bne.n	8005c4e <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005ce8:	f7fe fb06 	bl	80042f8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005cec:	6861      	ldr	r1, [r4, #4]
 8005cee:	084a      	lsrs	r2, r1, #1
 8005cf0:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8005cf4:	fbb3 f3f1 	udiv	r3, r3, r1
 8005cf8:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005cfa:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cfc:	f1a3 0010 	sub.w	r0, r3, #16
 8005d00:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8005d04:	4288      	cmp	r0, r1
 8005d06:	f63f af62 	bhi.w	8005bce <UART_SetConfig+0x182>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d0a:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8005d0e:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d10:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8005d14:	430b      	orrs	r3, r1
 8005d16:	60c3      	str	r3, [r0, #12]
 8005d18:	e75a      	b.n	8005bd0 <UART_SetConfig+0x184>
    switch (clocksource)
 8005d1a:	2b08      	cmp	r3, #8
 8005d1c:	f63f af57 	bhi.w	8005bce <UART_SetConfig+0x182>
 8005d20:	a201      	add	r2, pc, #4	; (adr r2, 8005d28 <UART_SetConfig+0x2dc>)
 8005d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d26:	bf00      	nop
 8005d28:	08005c4f 	.word	0x08005c4f
 8005d2c:	08005c73 	.word	0x08005c73
 8005d30:	08005c79 	.word	0x08005c79
 8005d34:	08005bcf 	.word	0x08005bcf
 8005d38:	08005c8b 	.word	0x08005c8b
 8005d3c:	08005bcf 	.word	0x08005bcf
 8005d40:	08005bcf 	.word	0x08005bcf
 8005d44:	08005bcf 	.word	0x08005bcf
 8005d48:	08005c91 	.word	0x08005c91
 8005d4c:	efff69f3 	.word	0xefff69f3
 8005d50:	40008000 	.word	0x40008000
 8005d54:	40013800 	.word	0x40013800
 8005d58:	0801228f 	.word	0x0801228f
 8005d5c:	40004400 	.word	0x40004400
 8005d60:	08012293 	.word	0x08012293
 8005d64:	40004800 	.word	0x40004800
 8005d68:	40004c00 	.word	0x40004c00
 8005d6c:	40005000 	.word	0x40005000
 8005d70:	00f42400 	.word	0x00f42400
 8005d74:	000ffcff 	.word	0x000ffcff
 8005d78:	f4240000 	.word	0xf4240000

08005d7c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d7c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005d7e:	07da      	lsls	r2, r3, #31
{
 8005d80:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d82:	d506      	bpl.n	8005d92 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d84:	6801      	ldr	r1, [r0, #0]
 8005d86:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8005d88:	684a      	ldr	r2, [r1, #4]
 8005d8a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005d8e:	4322      	orrs	r2, r4
 8005d90:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d92:	079c      	lsls	r4, r3, #30
 8005d94:	d506      	bpl.n	8005da4 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d96:	6801      	ldr	r1, [r0, #0]
 8005d98:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8005d9a:	684a      	ldr	r2, [r1, #4]
 8005d9c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005da0:	4322      	orrs	r2, r4
 8005da2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005da4:	0759      	lsls	r1, r3, #29
 8005da6:	d506      	bpl.n	8005db6 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005da8:	6801      	ldr	r1, [r0, #0]
 8005daa:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8005dac:	684a      	ldr	r2, [r1, #4]
 8005dae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005db2:	4322      	orrs	r2, r4
 8005db4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005db6:	071a      	lsls	r2, r3, #28
 8005db8:	d506      	bpl.n	8005dc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005dba:	6801      	ldr	r1, [r0, #0]
 8005dbc:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005dbe:	684a      	ldr	r2, [r1, #4]
 8005dc0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005dc4:	4322      	orrs	r2, r4
 8005dc6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005dc8:	06dc      	lsls	r4, r3, #27
 8005dca:	d506      	bpl.n	8005dda <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005dcc:	6801      	ldr	r1, [r0, #0]
 8005dce:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8005dd0:	688a      	ldr	r2, [r1, #8]
 8005dd2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005dd6:	4322      	orrs	r2, r4
 8005dd8:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005dda:	0699      	lsls	r1, r3, #26
 8005ddc:	d506      	bpl.n	8005dec <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005dde:	6801      	ldr	r1, [r0, #0]
 8005de0:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8005de2:	688a      	ldr	r2, [r1, #8]
 8005de4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005de8:	4322      	orrs	r2, r4
 8005dea:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005dec:	065a      	lsls	r2, r3, #25
 8005dee:	d50f      	bpl.n	8005e10 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005df0:	6801      	ldr	r1, [r0, #0]
 8005df2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8005df4:	684a      	ldr	r2, [r1, #4]
 8005df6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8005dfa:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005dfc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e00:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e02:	d105      	bne.n	8005e10 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e04:	684a      	ldr	r2, [r1, #4]
 8005e06:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8005e08:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8005e0c:	4322      	orrs	r2, r4
 8005e0e:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e10:	061b      	lsls	r3, r3, #24
 8005e12:	d506      	bpl.n	8005e22 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e14:	6802      	ldr	r2, [r0, #0]
 8005e16:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005e18:	6853      	ldr	r3, [r2, #4]
 8005e1a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005e1e:	430b      	orrs	r3, r1
 8005e20:	6053      	str	r3, [r2, #4]
 8005e22:	bd10      	pop	{r4, pc}

08005e24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e28:	9d06      	ldr	r5, [sp, #24]
 8005e2a:	4604      	mov	r4, r0
 8005e2c:	460f      	mov	r7, r1
 8005e2e:	4616      	mov	r6, r2
 8005e30:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e32:	6821      	ldr	r1, [r4, #0]
 8005e34:	69ca      	ldr	r2, [r1, #28]
 8005e36:	ea37 0302 	bics.w	r3, r7, r2
 8005e3a:	bf0c      	ite	eq
 8005e3c:	2201      	moveq	r2, #1
 8005e3e:	2200      	movne	r2, #0
 8005e40:	42b2      	cmp	r2, r6
 8005e42:	d002      	beq.n	8005e4a <UART_WaitOnFlagUntilTimeout+0x26>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8005e44:	2000      	movs	r0, #0
}
 8005e46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8005e4a:	1c6b      	adds	r3, r5, #1
 8005e4c:	d0f2      	beq.n	8005e34 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e4e:	f7fc fb5f 	bl	8002510 <HAL_GetTick>
 8005e52:	eba0 0008 	sub.w	r0, r0, r8
 8005e56:	4285      	cmp	r5, r0
 8005e58:	d301      	bcc.n	8005e5e <UART_WaitOnFlagUntilTimeout+0x3a>
 8005e5a:	2d00      	cmp	r5, #0
 8005e5c:	d1e9      	bne.n	8005e32 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e5e:	6823      	ldr	r3, [r4, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005e66:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e68:	689a      	ldr	r2, [r3, #8]
 8005e6a:	f022 0201 	bic.w	r2, r2, #1
 8005e6e:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8005e70:	2320      	movs	r3, #32
 8005e72:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005e74:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8005e76:	2300      	movs	r3, #0
 8005e78:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 8005e7c:	2003      	movs	r0, #3
 8005e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005e82 <HAL_UART_Transmit>:
{
 8005e82:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005e86:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8005e88:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8005e8a:	2b20      	cmp	r3, #32
{
 8005e8c:	4604      	mov	r4, r0
 8005e8e:	460e      	mov	r6, r1
 8005e90:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8005e92:	d14b      	bne.n	8005f2c <HAL_UART_Transmit+0xaa>
    if ((pData == NULL) || (Size == 0U))
 8005e94:	2900      	cmp	r1, #0
 8005e96:	d047      	beq.n	8005f28 <HAL_UART_Transmit+0xa6>
 8005e98:	2a00      	cmp	r2, #0
 8005e9a:	d045      	beq.n	8005f28 <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 8005e9c:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d043      	beq.n	8005f2c <HAL_UART_Transmit+0xaa>
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eaa:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005eac:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eae:	67c5      	str	r5, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005eb0:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 8005eb2:	f7fc fb2d 	bl	8002510 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005eb6:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 8005eb8:	f8a4 9050 	strh.w	r9, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ebc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8005ec0:	4607      	mov	r7, r0
    huart->TxXferCount = Size;
 8005ec2:	f8a4 9052 	strh.w	r9, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ec6:	d103      	bne.n	8005ed0 <HAL_UART_Transmit+0x4e>
 8005ec8:	6923      	ldr	r3, [r4, #16]
 8005eca:	b90b      	cbnz	r3, 8005ed0 <HAL_UART_Transmit+0x4e>
 8005ecc:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8005ece:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 8005ed0:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ed4:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8005ed8:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005eda:	463b      	mov	r3, r7
    while (huart->TxXferCount > 0U)
 8005edc:	b94a      	cbnz	r2, 8005ef2 <HAL_UART_Transmit+0x70>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ede:	2140      	movs	r1, #64	; 0x40
 8005ee0:	4620      	mov	r0, r4
 8005ee2:	f7ff ff9f 	bl	8005e24 <UART_WaitOnFlagUntilTimeout>
 8005ee6:	b950      	cbnz	r0, 8005efe <HAL_UART_Transmit+0x7c>
    huart->gState = HAL_UART_STATE_READY;
 8005ee8:	2320      	movs	r3, #32
 8005eea:	6763      	str	r3, [r4, #116]	; 0x74
    __HAL_UNLOCK(huart);
 8005eec:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    return HAL_OK;
 8005ef0:	e006      	b.n	8005f00 <HAL_UART_Transmit+0x7e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	2180      	movs	r1, #128	; 0x80
 8005ef6:	4620      	mov	r0, r4
 8005ef8:	f7ff ff94 	bl	8005e24 <UART_WaitOnFlagUntilTimeout>
 8005efc:	b118      	cbz	r0, 8005f06 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 8005efe:	2003      	movs	r0, #3
}
 8005f00:	b003      	add	sp, #12
 8005f02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f06:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8005f08:	b95e      	cbnz	r6, 8005f22 <HAL_UART_Transmit+0xa0>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f0a:	f835 3b02 	ldrh.w	r3, [r5], #2
 8005f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f12:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8005f14:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8005f20:	e7d6      	b.n	8005ed0 <HAL_UART_Transmit+0x4e>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f22:	f816 3b01 	ldrb.w	r3, [r6], #1
 8005f26:	e7f4      	b.n	8005f12 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8005f28:	2001      	movs	r0, #1
 8005f2a:	e7e9      	b.n	8005f00 <HAL_UART_Transmit+0x7e>
    return HAL_BUSY;
 8005f2c:	2002      	movs	r0, #2
 8005f2e:	e7e7      	b.n	8005f00 <HAL_UART_Transmit+0x7e>

08005f30 <UART_CheckIdleState>:
{
 8005f30:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f32:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f34:	2600      	movs	r6, #0
 8005f36:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8005f38:	f7fc faea 	bl	8002510 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f3c:	6823      	ldr	r3, [r4, #0]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8005f42:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f44:	d415      	bmi.n	8005f72 <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f46:	6823      	ldr	r3, [r4, #0]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	075b      	lsls	r3, r3, #29
 8005f4c:	d50a      	bpl.n	8005f64 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f4e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f52:	9300      	str	r3, [sp, #0]
 8005f54:	2200      	movs	r2, #0
 8005f56:	462b      	mov	r3, r5
 8005f58:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f5c:	4620      	mov	r0, r4
 8005f5e:	f7ff ff61 	bl	8005e24 <UART_WaitOnFlagUntilTimeout>
 8005f62:	b990      	cbnz	r0, 8005f8a <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 8005f64:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8005f66:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8005f68:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 8005f6a:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8005f6e:	67a3      	str	r3, [r4, #120]	; 0x78
  return HAL_OK;
 8005f70:	e00c      	b.n	8005f8c <UART_CheckIdleState+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f72:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f76:	9300      	str	r3, [sp, #0]
 8005f78:	4632      	mov	r2, r6
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f80:	4620      	mov	r0, r4
 8005f82:	f7ff ff4f 	bl	8005e24 <UART_WaitOnFlagUntilTimeout>
 8005f86:	2800      	cmp	r0, #0
 8005f88:	d0dd      	beq.n	8005f46 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8005f8a:	2003      	movs	r0, #3
}
 8005f8c:	b002      	add	sp, #8
 8005f8e:	bd70      	pop	{r4, r5, r6, pc}

08005f90 <HAL_UART_Init>:
{
 8005f90:	b510      	push	{r4, lr}
  if (huart == NULL)
 8005f92:	4604      	mov	r4, r0
 8005f94:	b340      	cbz	r0, 8005fe8 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8005f96:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8005f98:	b91b      	cbnz	r3, 8005fa2 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8005f9a:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8005f9e:	f7fc f85f 	bl	8002060 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8005fa2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005fa4:	2324      	movs	r3, #36	; 0x24
 8005fa6:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8005fa8:	6813      	ldr	r3, [r2, #0]
 8005faa:	f023 0301 	bic.w	r3, r3, #1
 8005fae:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005fb0:	4620      	mov	r0, r4
 8005fb2:	f7ff fd4b 	bl	8005a4c <UART_SetConfig>
 8005fb6:	2801      	cmp	r0, #1
 8005fb8:	d016      	beq.n	8005fe8 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005fba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005fbc:	b113      	cbz	r3, 8005fc4 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8005fbe:	4620      	mov	r0, r4
 8005fc0:	f7ff fedc 	bl	8005d7c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fc4:	6823      	ldr	r3, [r4, #0]
 8005fc6:	685a      	ldr	r2, [r3, #4]
 8005fc8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005fcc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fce:	689a      	ldr	r2, [r3, #8]
 8005fd0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005fd4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8005fdc:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8005fde:	601a      	str	r2, [r3, #0]
}
 8005fe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8005fe4:	f7ff bfa4 	b.w	8005f30 <UART_CheckIdleState>
}
 8005fe8:	2001      	movs	r0, #1
 8005fea:	bd10      	pop	{r4, pc}

08005fec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005fec:	4b0a      	ldr	r3, [pc, #40]	; (8006018 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005fee:	3b01      	subs	r3, #1
 8005ff0:	d101      	bne.n	8005ff6 <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 8005ff2:	2003      	movs	r0, #3
 8005ff4:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ff6:	6902      	ldr	r2, [r0, #16]
 8005ff8:	2a00      	cmp	r2, #0
 8005ffa:	daf8      	bge.n	8005fee <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005ffc:	6903      	ldr	r3, [r0, #16]
 8005ffe:	4a06      	ldr	r2, [pc, #24]	; (8006018 <USB_CoreReset+0x2c>)
 8006000:	f043 0301 	orr.w	r3, r3, #1
 8006004:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8006006:	3a01      	subs	r2, #1
 8006008:	d0f3      	beq.n	8005ff2 <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800600a:	6903      	ldr	r3, [r0, #16]
 800600c:	f013 0301 	ands.w	r3, r3, #1
 8006010:	d1f9      	bne.n	8006006 <USB_CoreReset+0x1a>

  return HAL_OK;
 8006012:	4618      	mov	r0, r3
}
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop
 8006018:	00030d41 	.word	0x00030d41

0800601c <USB_CoreInit>:
{
 800601c:	b084      	sub	sp, #16
 800601e:	b538      	push	{r3, r4, r5, lr}
 8006020:	ad05      	add	r5, sp, #20
 8006022:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006026:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006028:	2b01      	cmp	r3, #1
{
 800602a:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800602c:	d119      	bne.n	8006062 <USB_CoreInit+0x46>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800602e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006030:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006034:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006036:	68c3      	ldr	r3, [r0, #12]
 8006038:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800603c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006040:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006042:	68c3      	ldr	r3, [r0, #12]
 8006044:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006048:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 800604a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800604c:	2b01      	cmp	r3, #1
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800604e:	bf02      	ittt	eq
 8006050:	68c3      	ldreq	r3, [r0, #12]
 8006052:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 8006056:	60c3      	streq	r3, [r0, #12]
}
 8006058:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800605c:	b004      	add	sp, #16
    ret = USB_CoreReset(USBx);
 800605e:	f7ff bfc5 	b.w	8005fec <USB_CoreReset>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006062:	68c3      	ldr	r3, [r0, #12]
 8006064:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006068:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 800606a:	f7ff ffbf 	bl	8005fec <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 800606e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006070:	b93b      	cbnz	r3, 8006082 <USB_CoreInit+0x66>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006072:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006078:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800607a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800607e:	b004      	add	sp, #16
 8006080:	4770      	bx	lr
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006082:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006084:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006088:	e7f6      	b.n	8006078 <USB_CoreInit+0x5c>
	...

0800608c <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 800608c:	2a02      	cmp	r2, #2
 800608e:	d158      	bne.n	8006142 <USB_SetTurnaroundTime+0xb6>
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006090:	4b2e      	ldr	r3, [pc, #184]	; (800614c <USB_SetTurnaroundTime+0xc0>)
 8006092:	4a2f      	ldr	r2, [pc, #188]	; (8006150 <USB_SetTurnaroundTime+0xc4>)
 8006094:	440b      	add	r3, r1
 8006096:	4293      	cmp	r3, r2
 8006098:	d947      	bls.n	800612a <USB_SetTurnaroundTime+0x9e>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800609a:	4b2e      	ldr	r3, [pc, #184]	; (8006154 <USB_SetTurnaroundTime+0xc8>)
 800609c:	4a2e      	ldr	r2, [pc, #184]	; (8006158 <USB_SetTurnaroundTime+0xcc>)
 800609e:	440b      	add	r3, r1
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d944      	bls.n	800612e <USB_SetTurnaroundTime+0xa2>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80060a4:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 80060a8:	4a2c      	ldr	r2, [pc, #176]	; (800615c <USB_SetTurnaroundTime+0xd0>)
 80060aa:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d93f      	bls.n	8006132 <USB_SetTurnaroundTime+0xa6>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80060b2:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 80060b6:	f502 32c3 	add.w	r2, r2, #99840	; 0x18600
 80060ba:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 80060be:	32a0      	adds	r2, #160	; 0xa0
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d938      	bls.n	8006136 <USB_SetTurnaroundTime+0xaa>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80060c4:	4b26      	ldr	r3, [pc, #152]	; (8006160 <USB_SetTurnaroundTime+0xd4>)
 80060c6:	4a27      	ldr	r2, [pc, #156]	; (8006164 <USB_SetTurnaroundTime+0xd8>)
 80060c8:	440b      	add	r3, r1
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d935      	bls.n	800613a <USB_SetTurnaroundTime+0xae>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80060ce:	4b26      	ldr	r3, [pc, #152]	; (8006168 <USB_SetTurnaroundTime+0xdc>)
 80060d0:	f502 2292 	add.w	r2, r2, #299008	; 0x49000
 80060d4:	440b      	add	r3, r1
 80060d6:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 80060da:	4293      	cmp	r3, r2
 80060dc:	d92f      	bls.n	800613e <USB_SetTurnaroundTime+0xb2>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80060de:	4b23      	ldr	r3, [pc, #140]	; (800616c <USB_SetTurnaroundTime+0xe0>)
 80060e0:	f502 22c3 	add.w	r2, r2, #399360	; 0x61800
 80060e4:	440b      	add	r3, r1
 80060e6:	f502 7220 	add.w	r2, r2, #640	; 0x280
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d929      	bls.n	8006142 <USB_SetTurnaroundTime+0xb6>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80060ee:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 80060f2:	f502 12b7 	add.w	r2, r2, #1499136	; 0x16e000
 80060f6:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 80060fa:	f502 7258 	add.w	r2, r2, #864	; 0x360
 80060fe:	4293      	cmp	r3, r2
 8006100:	d921      	bls.n	8006146 <USB_SetTurnaroundTime+0xba>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006102:	4b1b      	ldr	r3, [pc, #108]	; (8006170 <USB_SetTurnaroundTime+0xe4>)
      UsbTrd = 0x6U;
 8006104:	f502 2212 	add.w	r2, r2, #598016	; 0x92000
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006108:	440b      	add	r3, r1
      UsbTrd = 0x6U;
 800610a:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
 800610e:	4293      	cmp	r3, r2
 8006110:	bf94      	ite	ls
 8006112:	2307      	movls	r3, #7
 8006114:	2306      	movhi	r3, #6
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006116:	68c2      	ldr	r2, [r0, #12]
 8006118:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 800611c:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800611e:	68c2      	ldr	r2, [r0, #12]
 8006120:	ea42 2383 	orr.w	r3, r2, r3, lsl #10
 8006124:	60c3      	str	r3, [r0, #12]
}
 8006126:	2000      	movs	r0, #0
 8006128:	4770      	bx	lr
      UsbTrd = 0xFU;
 800612a:	230f      	movs	r3, #15
 800612c:	e7f3      	b.n	8006116 <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xEU;
 800612e:	230e      	movs	r3, #14
 8006130:	e7f1      	b.n	8006116 <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xDU;
 8006132:	230d      	movs	r3, #13
 8006134:	e7ef      	b.n	8006116 <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xCU;
 8006136:	230c      	movs	r3, #12
 8006138:	e7ed      	b.n	8006116 <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xBU;
 800613a:	230b      	movs	r3, #11
 800613c:	e7eb      	b.n	8006116 <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xAU;
 800613e:	230a      	movs	r3, #10
 8006140:	e7e9      	b.n	8006116 <USB_SetTurnaroundTime+0x8a>
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006142:	2309      	movs	r3, #9
 8006144:	e7e7      	b.n	8006116 <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0x8U;
 8006146:	2308      	movs	r3, #8
 8006148:	e7e5      	b.n	8006116 <USB_SetTurnaroundTime+0x8a>
 800614a:	bf00      	nop
 800614c:	ff275340 	.word	0xff275340
 8006150:	000c34ff 	.word	0x000c34ff
 8006154:	ff1b1e40 	.word	0xff1b1e40
 8006158:	000f423f 	.word	0x000f423f
 800615c:	00124f7f 	.word	0x00124f7f
 8006160:	fee5b660 	.word	0xfee5b660
 8006164:	0016e35f 	.word	0x0016e35f
 8006168:	feced300 	.word	0xfeced300
 800616c:	feb35bc0 	.word	0xfeb35bc0
 8006170:	fe5954e0 	.word	0xfe5954e0

08006174 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006174:	6883      	ldr	r3, [r0, #8]
 8006176:	f043 0301 	orr.w	r3, r3, #1
 800617a:	6083      	str	r3, [r0, #8]
}
 800617c:	2000      	movs	r0, #0
 800617e:	4770      	bx	lr

08006180 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006180:	6883      	ldr	r3, [r0, #8]
 8006182:	f023 0301 	bic.w	r3, r3, #1
 8006186:	6083      	str	r3, [r0, #8]
}
 8006188:	2000      	movs	r0, #0
 800618a:	4770      	bx	lr

0800618c <USB_SetCurrentMode>:
{
 800618c:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800618e:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8006190:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006192:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006196:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8006198:	d108      	bne.n	80061ac <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800619a:	68c3      	ldr	r3, [r0, #12]
 800619c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80061a0:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 80061a2:	2032      	movs	r0, #50	; 0x32
 80061a4:	f7fc f9ba 	bl	800251c <HAL_Delay>
  return HAL_OK;
 80061a8:	2000      	movs	r0, #0
 80061aa:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 80061ac:	b919      	cbnz	r1, 80061b6 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80061ae:	68c3      	ldr	r3, [r0, #12]
 80061b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061b4:	e7f4      	b.n	80061a0 <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 80061b6:	2001      	movs	r0, #1
}
 80061b8:	bd08      	pop	{r3, pc}
	...

080061bc <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80061bc:	0189      	lsls	r1, r1, #6
 80061be:	f041 0120 	orr.w	r1, r1, #32
 80061c2:	4a06      	ldr	r2, [pc, #24]	; (80061dc <USB_FlushTxFifo+0x20>)
 80061c4:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 80061c6:	3a01      	subs	r2, #1
 80061c8:	d005      	beq.n	80061d6 <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80061ca:	6903      	ldr	r3, [r0, #16]
 80061cc:	f013 0320 	ands.w	r3, r3, #32
 80061d0:	d1f9      	bne.n	80061c6 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 80061d2:	4618      	mov	r0, r3
 80061d4:	4770      	bx	lr
      return HAL_TIMEOUT;
 80061d6:	2003      	movs	r0, #3
}
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop
 80061dc:	00030d41 	.word	0x00030d41

080061e0 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80061e0:	2310      	movs	r3, #16
 80061e2:	4a06      	ldr	r2, [pc, #24]	; (80061fc <USB_FlushRxFifo+0x1c>)
 80061e4:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 80061e6:	3a01      	subs	r2, #1
 80061e8:	d005      	beq.n	80061f6 <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80061ea:	6903      	ldr	r3, [r0, #16]
 80061ec:	f013 0310 	ands.w	r3, r3, #16
 80061f0:	d1f9      	bne.n	80061e6 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 80061f2:	4618      	mov	r0, r3
 80061f4:	4770      	bx	lr
      return HAL_TIMEOUT;
 80061f6:	2003      	movs	r0, #3
}
 80061f8:	4770      	bx	lr
 80061fa:	bf00      	nop
 80061fc:	00030d41 	.word	0x00030d41

08006200 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8006200:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8006204:	4319      	orrs	r1, r3
 8006206:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 800620a:	2000      	movs	r0, #0
 800620c:	4770      	bx	lr
	...

08006210 <USB_DevInit>:
{
 8006210:	b084      	sub	sp, #16
 8006212:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006216:	4604      	mov	r4, r0
 8006218:	a809      	add	r0, sp, #36	; 0x24
 800621a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 800621e:	2300      	movs	r3, #0
 8006220:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8006222:	460f      	mov	r7, r1
    USBx->DIEPTXF[i] = 0U;
 8006224:	4619      	mov	r1, r3
 8006226:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800622a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 800622e:	3301      	adds	r3, #1
 8006230:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 8006232:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8006234:	d1f7      	bne.n	8006226 <USB_DevInit+0x16>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006236:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  if (cfg.vbus_sensing_enable == 0U)
 8006238:	2e00      	cmp	r6, #0
 800623a:	d162      	bne.n	8006302 <USB_DevInit+0xf2>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800623c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006240:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006242:	6823      	ldr	r3, [r4, #0]
 8006244:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006248:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800624a:	6823      	ldr	r3, [r4, #0]
 800624c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006250:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 8006252:	2300      	movs	r3, #0
 8006254:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006258:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 800625c:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006260:	2103      	movs	r1, #3
 8006262:	4620      	mov	r0, r4
 8006264:	f7ff ffcc 	bl	8006200 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006268:	2110      	movs	r1, #16
 800626a:	4620      	mov	r0, r4
 800626c:	f7ff ffa6 	bl	80061bc <USB_FlushTxFifo>
 8006270:	4601      	mov	r1, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006272:	4620      	mov	r0, r4
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006274:	f504 6500 	add.w	r5, r4, #2048	; 0x800
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006278:	f7ff ffb2 	bl	80061e0 <USB_FlushRxFifo>
 800627c:	2800      	cmp	r0, #0
 800627e:	d144      	bne.n	800630a <USB_DevInit+0xfa>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006280:	1c08      	adds	r0, r1, #0
 8006282:	bf18      	it	ne
 8006284:	2001      	movne	r0, #1
  USBx_DEVICE->DIEPMSK = 0U;
 8006286:	2300      	movs	r3, #0
 8006288:	612b      	str	r3, [r5, #16]
 800628a:	f504 6210 	add.w	r2, r4, #2304	; 0x900
  USBx_DEVICE->DOEPMSK = 0U;
 800628e:	616b      	str	r3, [r5, #20]
      USBx_INEP(i)->DIEPCTL = 0U;
 8006290:	4619      	mov	r1, r3
  USBx_DEVICE->DAINTMSK = 0U;
 8006292:	61eb      	str	r3, [r5, #28]
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006294:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006298:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800629c:	f64f 387f 	movw	r8, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062a0:	42bb      	cmp	r3, r7
 80062a2:	d134      	bne.n	800630e <USB_DevInit+0xfe>
 80062a4:	2100      	movs	r1, #0
 80062a6:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80062aa:	460f      	mov	r7, r1
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80062ac:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80062b0:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80062b4:	f64f 387f 	movw	r8, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062b8:	428b      	cmp	r3, r1
 80062ba:	d13b      	bne.n	8006334 <USB_DevInit+0x124>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80062bc:	692b      	ldr	r3, [r5, #16]
 80062be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062c2:	612b      	str	r3, [r5, #16]
  USBx->GINTMSK = 0U;
 80062c4:	2300      	movs	r3, #0
 80062c6:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80062c8:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 80062cc:	6163      	str	r3, [r4, #20]
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80062ce:	69a3      	ldr	r3, [r4, #24]
 80062d0:	f043 0310 	orr.w	r3, r3, #16
 80062d4:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80062d6:	69a2      	ldr	r2, [r4, #24]
 80062d8:	4b20      	ldr	r3, [pc, #128]	; (800635c <USB_DevInit+0x14c>)
 80062da:	4313      	orrs	r3, r2
 80062dc:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 80062de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80062e0:	b11b      	cbz	r3, 80062ea <USB_DevInit+0xda>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80062e2:	69a3      	ldr	r3, [r4, #24]
 80062e4:	f043 0308 	orr.w	r3, r3, #8
 80062e8:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 80062ea:	2e01      	cmp	r6, #1
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80062ec:	bf01      	itttt	eq
 80062ee:	69a3      	ldreq	r3, [r4, #24]
 80062f0:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 80062f4:	f043 0304 	orreq.w	r3, r3, #4
 80062f8:	61a3      	streq	r3, [r4, #24]
}
 80062fa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062fe:	b004      	add	sp, #16
 8006300:	4770      	bx	lr
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006302:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006306:	63a3      	str	r3, [r4, #56]	; 0x38
 8006308:	e7a3      	b.n	8006252 <USB_DevInit+0x42>
 800630a:	2001      	movs	r0, #1
 800630c:	e7bb      	b.n	8006286 <USB_DevInit+0x76>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800630e:	f8d2 9000 	ldr.w	r9, [r2]
 8006312:	f1b9 0f00 	cmp.w	r9, #0
 8006316:	da0b      	bge.n	8006330 <USB_DevInit+0x120>
      if (i == 0U)
 8006318:	b93b      	cbnz	r3, 800632a <USB_DevInit+0x11a>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800631a:	f8c2 c000 	str.w	ip, [r2]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800631e:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006320:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006322:	f8c2 8008 	str.w	r8, [r2, #8]
 8006326:	3220      	adds	r2, #32
 8006328:	e7ba      	b.n	80062a0 <USB_DevInit+0x90>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800632a:	f8c2 e000 	str.w	lr, [r2]
 800632e:	e7f6      	b.n	800631e <USB_DevInit+0x10e>
      USBx_INEP(i)->DIEPCTL = 0U;
 8006330:	6011      	str	r1, [r2, #0]
 8006332:	e7f4      	b.n	800631e <USB_DevInit+0x10e>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006334:	f8d2 9000 	ldr.w	r9, [r2]
 8006338:	f1b9 0f00 	cmp.w	r9, #0
 800633c:	da0b      	bge.n	8006356 <USB_DevInit+0x146>
      if (i == 0U)
 800633e:	b939      	cbnz	r1, 8006350 <USB_DevInit+0x140>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006340:	f8c2 c000 	str.w	ip, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006344:	6117      	str	r7, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006346:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006348:	f8c2 8008 	str.w	r8, [r2, #8]
 800634c:	3220      	adds	r2, #32
 800634e:	e7b3      	b.n	80062b8 <USB_DevInit+0xa8>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006350:	f8c2 e000 	str.w	lr, [r2]
 8006354:	e7f6      	b.n	8006344 <USB_DevInit+0x134>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006356:	6017      	str	r7, [r2, #0]
 8006358:	e7f4      	b.n	8006344 <USB_DevInit+0x134>
 800635a:	bf00      	nop
 800635c:	803c3800 	.word	0x803c3800

08006360 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006360:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006364:	f013 0f02 	tst.w	r3, #2
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006368:	f500 6000 	add.w	r0, r0, #2048	; 0x800
}
 800636c:	bf14      	ite	ne
 800636e:	2002      	movne	r0, #2
 8006370:	200f      	moveq	r0, #15
 8006372:	4770      	bx	lr

08006374 <USB_ActivateEndpoint>:
{
 8006374:	b570      	push	{r4, r5, r6, lr}
  if (ep->is_in == 1U)
 8006376:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8006378:	780c      	ldrb	r4, [r1, #0]
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800637a:	f8d0 681c 	ldr.w	r6, [r0, #2076]	; 0x81c
 800637e:	f500 6300 	add.w	r3, r0, #2048	; 0x800
  if (ep->is_in == 1U)
 8006382:	2a01      	cmp	r2, #1
 8006384:	f004 050f 	and.w	r5, r4, #15
 8006388:	d11b      	bne.n	80063c2 <USB_ActivateEndpoint+0x4e>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800638a:	40aa      	lsls	r2, r5
 800638c:	4332      	orrs	r2, r6
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800638e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006392:	61da      	str	r2, [r3, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006394:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8006398:	041a      	lsls	r2, r3, #16
 800639a:	d410      	bmi.n	80063be <USB_ActivateEndpoint+0x4a>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800639c:	688b      	ldr	r3, [r1, #8]
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800639e:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80063a0:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 80063a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80063a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063b0:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 80063b4:	ea43 5384 	orr.w	r3, r3, r4, lsl #22
 80063b8:	4313      	orrs	r3, r2
 80063ba:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 80063be:	2000      	movs	r0, #0
 80063c0:	bd70      	pop	{r4, r5, r6, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80063c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80063c6:	40aa      	lsls	r2, r5
 80063c8:	4332      	orrs	r2, r6
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80063ca:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80063ce:	61da      	str	r2, [r3, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80063d0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80063d4:	041b      	lsls	r3, r3, #16
 80063d6:	d4f2      	bmi.n	80063be <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80063d8:	688b      	ldr	r3, [r1, #8]
                                    ((uint32_t)ep->type << 18) |
 80063da:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80063dc:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 80063e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80063e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063ec:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 80063f0:	4313      	orrs	r3, r2
 80063f2:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 80063f6:	e7e2      	b.n	80063be <USB_ActivateEndpoint+0x4a>

080063f8 <USB_DeactivateEndpoint>:
{
 80063f8:	b530      	push	{r4, r5, lr}
  if (ep->is_in == 1U)
 80063fa:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80063fc:	780c      	ldrb	r4, [r1, #0]
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80063fe:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 8006402:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  if (ep->is_in == 1U)
 8006406:	2b01      	cmp	r3, #1
 8006408:	f004 050f 	and.w	r5, r4, #15
 800640c:	d110      	bne.n	8006430 <USB_DeactivateEndpoint+0x38>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800640e:	40ab      	lsls	r3, r5
 8006410:	43db      	mvns	r3, r3
 8006412:	4019      	ands	r1, r3
 8006414:	63d1      	str	r1, [r2, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006416:	69d1      	ldr	r1, [r2, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006418:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800641c:	400b      	ands	r3, r1
 800641e:	61d3      	str	r3, [r2, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006420:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8006424:	4b0b      	ldr	r3, [pc, #44]	; (8006454 <USB_DeactivateEndpoint+0x5c>)
 8006426:	4013      	ands	r3, r2
 8006428:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800642c:	2000      	movs	r0, #0
 800642e:	bd30      	pop	{r4, r5, pc}
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006430:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006434:	40ab      	lsls	r3, r5
 8006436:	43db      	mvns	r3, r3
 8006438:	4019      	ands	r1, r3
 800643a:	63d1      	str	r1, [r2, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800643c:	69d1      	ldr	r1, [r2, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800643e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006442:	400b      	ands	r3, r1
 8006444:	61d3      	str	r3, [r2, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006446:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800644a:	4b03      	ldr	r3, [pc, #12]	; (8006458 <USB_DeactivateEndpoint+0x60>)
 800644c:	4013      	ands	r3, r2
 800644e:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8006452:	e7eb      	b.n	800642c <USB_DeactivateEndpoint+0x34>
 8006454:	ec337800 	.word	0xec337800
 8006458:	eff37800 	.word	0xeff37800

0800645c <USB_EP0StartXfer>:
{
 800645c:	b570      	push	{r4, r5, r6, lr}
  if (ep->is_in == 1U)
 800645e:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8006460:	780a      	ldrb	r2, [r1, #0]
 8006462:	694d      	ldr	r5, [r1, #20]
 8006464:	4e35      	ldr	r6, [pc, #212]	; (800653c <USB_EP0StartXfer+0xe0>)
  if (ep->is_in == 1U)
 8006466:	2b01      	cmp	r3, #1
 8006468:	f04f 0320 	mov.w	r3, #32
 800646c:	d145      	bne.n	80064fa <USB_EP0StartXfer+0x9e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800646e:	fb13 0302 	smlabb	r3, r3, r2, r0
    if (ep->xfer_len == 0U)
 8006472:	bb45      	cbnz	r5, 80064c6 <USB_EP0StartXfer+0x6a>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006474:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 8006478:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 800647c:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8006480:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006484:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 8006488:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800648c:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006490:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 8006494:	4026      	ands	r6, r4
 8006496:	f8c3 6910 	str.w	r6, [r3, #2320]	; 0x910
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800649a:	eb00 1242 	add.w	r2, r0, r2, lsl #5
    if (ep->xfer_len > 0U)
 800649e:	694b      	ldr	r3, [r1, #20]
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80064a0:	f8d2 4900 	ldr.w	r4, [r2, #2304]	; 0x900
 80064a4:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 80064a8:	f8c2 4900 	str.w	r4, [r2, #2304]	; 0x900
    if (ep->xfer_len > 0U)
 80064ac:	b14b      	cbz	r3, 80064c2 <USB_EP0StartXfer+0x66>
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80064ae:	780a      	ldrb	r2, [r1, #0]
 80064b0:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 80064b4:	f002 010f 	and.w	r1, r2, #15
 80064b8:	2201      	movs	r2, #1
 80064ba:	408a      	lsls	r2, r1
 80064bc:	431a      	orrs	r2, r3
 80064be:	f8c0 2834 	str.w	r2, [r0, #2100]	; 0x834
}
 80064c2:	2000      	movs	r0, #0
 80064c4:	bd70      	pop	{r4, r5, r6, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80064c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ca:	691c      	ldr	r4, [r3, #16]
 80064cc:	4026      	ands	r6, r4
 80064ce:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80064d0:	691c      	ldr	r4, [r3, #16]
 80064d2:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 80064d6:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 80064da:	611c      	str	r4, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 80064dc:	688c      	ldr	r4, [r1, #8]
 80064de:	42a5      	cmp	r5, r4
        ep->xfer_len = ep->maxpacket;
 80064e0:	bf88      	it	hi
 80064e2:	614c      	strhi	r4, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80064e4:	691c      	ldr	r4, [r3, #16]
 80064e6:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 80064ea:	611c      	str	r4, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80064ec:	694c      	ldr	r4, [r1, #20]
 80064ee:	691d      	ldr	r5, [r3, #16]
 80064f0:	f3c4 0412 	ubfx	r4, r4, #0, #19
 80064f4:	432c      	orrs	r4, r5
 80064f6:	611c      	str	r4, [r3, #16]
 80064f8:	e7cf      	b.n	800649a <USB_EP0StartXfer+0x3e>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80064fa:	fb13 0002 	smlabb	r0, r3, r2, r0
 80064fe:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8006502:	691a      	ldr	r2, [r3, #16]
 8006504:	4032      	ands	r2, r6
 8006506:	611a      	str	r2, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006508:	691a      	ldr	r2, [r3, #16]
 800650a:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 800650e:	f422 12c0 	bic.w	r2, r2, #1572864	; 0x180000
 8006512:	611a      	str	r2, [r3, #16]
 8006514:	688a      	ldr	r2, [r1, #8]
    if (ep->xfer_len > 0U)
 8006516:	b105      	cbz	r5, 800651a <USB_EP0StartXfer+0xbe>
      ep->xfer_len = ep->maxpacket;
 8006518:	614a      	str	r2, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800651a:	6919      	ldr	r1, [r3, #16]
 800651c:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
 8006520:	6119      	str	r1, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006522:	6919      	ldr	r1, [r3, #16]
 8006524:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8006528:	430a      	orrs	r2, r1
 800652a:	611a      	str	r2, [r3, #16]
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800652c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8006530:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006534:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8006538:	e7c3      	b.n	80064c2 <USB_EP0StartXfer+0x66>
 800653a:	bf00      	nop
 800653c:	fff80000 	.word	0xfff80000

08006540 <USB_WritePacket>:
  count32b = ((uint32_t)len + 3U) / 4U;
 8006540:	3303      	adds	r3, #3
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006542:	eb00 3202 	add.w	r2, r0, r2, lsl #12
 8006546:	f023 0303 	bic.w	r3, r3, #3
 800654a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800654e:	440b      	add	r3, r1
  for (i = 0U; i < count32b; i++)
 8006550:	4299      	cmp	r1, r3
 8006552:	d101      	bne.n	8006558 <USB_WritePacket+0x18>
}
 8006554:	2000      	movs	r0, #0
 8006556:	4770      	bx	lr
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006558:	f851 0b04 	ldr.w	r0, [r1], #4
 800655c:	6010      	str	r0, [r2, #0]
 800655e:	e7f7      	b.n	8006550 <USB_WritePacket+0x10>

08006560 <USB_EPStartXfer>:
{
 8006560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 8006562:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8006564:	780d      	ldrb	r5, [r1, #0]
 8006566:	4e58      	ldr	r6, [pc, #352]	; (80066c8 <USB_EPStartXfer+0x168>)
  if (ep->is_in == 1U)
 8006568:	2b01      	cmp	r3, #1
 800656a:	f04f 0220 	mov.w	r2, #32
 800656e:	694b      	ldr	r3, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006570:	fb12 0205 	smlabb	r2, r2, r5, r0
  if (ep->is_in == 1U)
 8006574:	d16a      	bne.n	800664c <USB_EPStartXfer+0xec>
    if (ep->xfer_len == 0U)
 8006576:	bb3b      	cbnz	r3, 80065c8 <USB_EPStartXfer+0x68>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006578:	f502 6410 	add.w	r4, r2, #2304	; 0x900
 800657c:	f8d2 2910 	ldr.w	r2, [r2, #2320]	; 0x910
 8006580:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 8006584:	f422 12c0 	bic.w	r2, r2, #1572864	; 0x180000
 8006588:	6122      	str	r2, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800658a:	6922      	ldr	r2, [r4, #16]
 800658c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8006590:	6122      	str	r2, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006592:	6922      	ldr	r2, [r4, #16]
 8006594:	4016      	ands	r6, r2
 8006596:	6126      	str	r6, [r4, #16]
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006598:	eb00 1245 	add.w	r2, r0, r5, lsl #5
 800659c:	f8d2 4900 	ldr.w	r4, [r2, #2304]	; 0x900
 80065a0:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 80065a4:	f8c2 4900 	str.w	r4, [r2, #2304]	; 0x900
    if (ep->type != EP_TYPE_ISOC)
 80065a8:	78cc      	ldrb	r4, [r1, #3]
 80065aa:	2c01      	cmp	r4, #1
 80065ac:	d03b      	beq.n	8006626 <USB_EPStartXfer+0xc6>
      if (ep->xfer_len > 0U)
 80065ae:	b14b      	cbz	r3, 80065c4 <USB_EPStartXfer+0x64>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80065b0:	780b      	ldrb	r3, [r1, #0]
 80065b2:	f8d0 4834 	ldr.w	r4, [r0, #2100]	; 0x834
 80065b6:	f003 020f 	and.w	r2, r3, #15
 80065ba:	2301      	movs	r3, #1
 80065bc:	4093      	lsls	r3, r2
 80065be:	4323      	orrs	r3, r4
 80065c0:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
}
 80065c4:	2000      	movs	r0, #0
 80065c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80065c8:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 80065cc:	4034      	ands	r4, r6
 80065ce:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80065d2:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80065d6:	688e      	ldr	r6, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80065d8:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 80065dc:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 80065e0:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80065e4:	199c      	adds	r4, r3, r6
 80065e6:	3c01      	subs	r4, #1
 80065e8:	fbb4 f6f6 	udiv	r6, r4, r6
 80065ec:	4c37      	ldr	r4, [pc, #220]	; (80066cc <USB_EPStartXfer+0x16c>)
 80065ee:	f8d2 7910 	ldr.w	r7, [r2, #2320]	; 0x910
 80065f2:	ea04 44c6 	and.w	r4, r4, r6, lsl #19
 80065f6:	433c      	orrs	r4, r7
 80065f8:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80065fc:	f8d2 6910 	ldr.w	r6, [r2, #2320]	; 0x910
 8006600:	f3c3 0412 	ubfx	r4, r3, #0, #19
 8006604:	4334      	orrs	r4, r6
 8006606:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      if (ep->type == EP_TYPE_ISOC)
 800660a:	78cc      	ldrb	r4, [r1, #3]
 800660c:	2c01      	cmp	r4, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800660e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 8006612:	d1c1      	bne.n	8006598 <USB_EPStartXfer+0x38>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006614:	6914      	ldr	r4, [r2, #16]
 8006616:	f024 44c0 	bic.w	r4, r4, #1610612736	; 0x60000000
 800661a:	6114      	str	r4, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800661c:	6914      	ldr	r4, [r2, #16]
 800661e:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 8006622:	6114      	str	r4, [r2, #16]
 8006624:	e7b8      	b.n	8006598 <USB_EPStartXfer+0x38>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006626:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 800662a:	f414 7f80 	tst.w	r4, #256	; 0x100
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800662e:	f8d2 4900 	ldr.w	r4, [r2, #2304]	; 0x900
 8006632:	bf0c      	ite	eq
 8006634:	f044 5400 	orreq.w	r4, r4, #536870912	; 0x20000000
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006638:	f044 5480 	orrne.w	r4, r4, #268435456	; 0x10000000
 800663c:	f8c2 4900 	str.w	r4, [r2, #2304]	; 0x900
      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8006640:	780a      	ldrb	r2, [r1, #0]
 8006642:	68c9      	ldr	r1, [r1, #12]
 8006644:	b29b      	uxth	r3, r3
 8006646:	f7ff ff7b 	bl	8006540 <USB_WritePacket>
 800664a:	e7bb      	b.n	80065c4 <USB_EPStartXfer+0x64>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800664c:	f502 6530 	add.w	r5, r2, #2816	; 0xb00
 8006650:	692c      	ldr	r4, [r5, #16]
 8006652:	4034      	ands	r4, r6
 8006654:	612c      	str	r4, [r5, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006656:	692c      	ldr	r4, [r5, #16]
 8006658:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 800665c:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8006660:	612c      	str	r4, [r5, #16]
 8006662:	688c      	ldr	r4, [r1, #8]
    if (ep->xfer_len == 0U)
 8006664:	b9fb      	cbnz	r3, 80066a6 <USB_EPStartXfer+0x146>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006666:	692b      	ldr	r3, [r5, #16]
 8006668:	f3c4 0412 	ubfx	r4, r4, #0, #19
 800666c:	431c      	orrs	r4, r3
 800666e:	612c      	str	r4, [r5, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006670:	692b      	ldr	r3, [r5, #16]
 8006672:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006676:	612b      	str	r3, [r5, #16]
    if (ep->type == EP_TYPE_ISOC)
 8006678:	78cb      	ldrb	r3, [r1, #3]
 800667a:	2b01      	cmp	r3, #1
 800667c:	d10c      	bne.n	8006698 <USB_EPStartXfer+0x138>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800667e:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8006682:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006686:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 800668a:	bf0c      	ite	eq
 800668c:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006690:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8006694:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006698:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 800669c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80066a0:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
 80066a4:	e78e      	b.n	80065c4 <USB_EPStartXfer+0x64>
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80066a6:	4e09      	ldr	r6, [pc, #36]	; (80066cc <USB_EPStartXfer+0x16c>)
 80066a8:	692f      	ldr	r7, [r5, #16]
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80066aa:	4423      	add	r3, r4
 80066ac:	3b01      	subs	r3, #1
 80066ae:	fbb3 f3f4 	udiv	r3, r3, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80066b2:	ea06 46c3 	and.w	r6, r6, r3, lsl #19
 80066b6:	433e      	orrs	r6, r7
 80066b8:	612e      	str	r6, [r5, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	692e      	ldr	r6, [r5, #16]
 80066be:	4363      	muls	r3, r4
 80066c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066c4:	4333      	orrs	r3, r6
 80066c6:	e7d6      	b.n	8006676 <USB_EPStartXfer+0x116>
 80066c8:	fff80000 	.word	0xfff80000
 80066cc:	1ff80000 	.word	0x1ff80000

080066d0 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80066d0:	3203      	adds	r2, #3
 80066d2:	f022 0203 	bic.w	r2, r2, #3
 80066d6:	440a      	add	r2, r1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80066d8:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for (i = 0U; i < count32b; i++)
 80066dc:	4291      	cmp	r1, r2
 80066de:	d101      	bne.n	80066e4 <USB_ReadPacket+0x14>
}
 80066e0:	4608      	mov	r0, r1
 80066e2:	4770      	bx	lr
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80066e4:	6803      	ldr	r3, [r0, #0]
 80066e6:	f841 3b04 	str.w	r3, [r1], #4
 80066ea:	e7f7      	b.n	80066dc <USB_ReadPacket+0xc>

080066ec <USB_EPSetStall>:
  if (ep->is_in == 1U)
 80066ec:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80066ee:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	f04f 0320 	mov.w	r3, #32
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80066f6:	fb13 0002 	smlabb	r0, r3, r2, r0
  if (ep->is_in == 1U)
 80066fa:	d112      	bne.n	8006722 <USB_EPSetStall+0x36>
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80066fc:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8006700:	2b00      	cmp	r3, #0
 8006702:	db06      	blt.n	8006712 <USB_EPSetStall+0x26>
 8006704:	b12a      	cbz	r2, 8006712 <USB_EPSetStall+0x26>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006706:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800670a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800670e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006712:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8006716:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800671a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800671e:	2000      	movs	r0, #0
 8006720:	4770      	bx	lr
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006722:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8006726:	2b00      	cmp	r3, #0
 8006728:	db06      	blt.n	8006738 <USB_EPSetStall+0x4c>
 800672a:	b12a      	cbz	r2, 8006738 <USB_EPSetStall+0x4c>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800672c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8006730:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006734:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006738:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800673c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006740:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8006744:	e7eb      	b.n	800671e <USB_EPSetStall+0x32>

08006746 <USB_EPClearStall>:
  if (ep->is_in == 1U)
 8006746:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8006748:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 800674a:	2b01      	cmp	r3, #1
 800674c:	f04f 0320 	mov.w	r3, #32
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006750:	fb13 0002 	smlabb	r0, r3, r2, r0
  if (ep->is_in == 1U)
 8006754:	d111      	bne.n	800677a <USB_EPClearStall+0x34>
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006756:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800675a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800675e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006762:	78cb      	ldrb	r3, [r1, #3]
 8006764:	3b02      	subs	r3, #2
 8006766:	2b01      	cmp	r3, #1
 8006768:	d805      	bhi.n	8006776 <USB_EPClearStall+0x30>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800676a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800676e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006772:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8006776:	2000      	movs	r0, #0
 8006778:	4770      	bx	lr
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800677a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800677e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006782:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006786:	78cb      	ldrb	r3, [r1, #3]
 8006788:	3b02      	subs	r3, #2
 800678a:	2b01      	cmp	r3, #1
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800678c:	bf9e      	ittt	ls
 800678e:	f8d0 3b00 	ldrls.w	r3, [r0, #2816]	; 0xb00
 8006792:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
 8006796:	f8c0 3b00 	strls.w	r3, [r0, #2816]	; 0xb00
 800679a:	e7ec      	b.n	8006776 <USB_EPClearStall+0x30>

0800679c <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800679c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80067a0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80067a4:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80067a8:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80067ac:	0109      	lsls	r1, r1, #4
 80067ae:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 80067b2:	4319      	orrs	r1, r3
 80067b4:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 80067b8:	2000      	movs	r0, #0
 80067ba:	4770      	bx	lr

080067bc <USB_DevConnect>:
{
 80067bc:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80067be:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80067c2:	f023 0302 	bic.w	r3, r3, #2
 80067c6:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 80067ca:	2003      	movs	r0, #3
 80067cc:	f7fb fea6 	bl	800251c <HAL_Delay>
}
 80067d0:	2000      	movs	r0, #0
 80067d2:	bd08      	pop	{r3, pc}

080067d4 <USB_DevDisconnect>:
{
 80067d4:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80067d6:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80067da:	f043 0302 	orr.w	r3, r3, #2
 80067de:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 80067e2:	2003      	movs	r0, #3
 80067e4:	f7fb fe9a 	bl	800251c <HAL_Delay>
}
 80067e8:	2000      	movs	r0, #0
 80067ea:	bd08      	pop	{r3, pc}

080067ec <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 80067ec:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 80067ee:	6980      	ldr	r0, [r0, #24]
}
 80067f0:	4010      	ands	r0, r2
 80067f2:	4770      	bx	lr

080067f4 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 80067f4:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 80067f8:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80067fc:	69c0      	ldr	r0, [r0, #28]
 80067fe:	4018      	ands	r0, r3
}
 8006800:	0c00      	lsrs	r0, r0, #16
 8006802:	4770      	bx	lr

08006804 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8006804:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8006808:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800680c:	69c0      	ldr	r0, [r0, #28]
 800680e:	4018      	ands	r0, r3
}
 8006810:	b280      	uxth	r0, r0
 8006812:	4770      	bx	lr

08006814 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006814:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006818:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800681c:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006820:	6940      	ldr	r0, [r0, #20]
}
 8006822:	4010      	ands	r0, r2
 8006824:	4770      	bx	lr

08006826 <USB_ReadDevInEPInterrupt>:
{
 8006826:	b510      	push	{r4, lr}
  msk = USBx_DEVICE->DIEPMSK;
 8006828:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 800682c:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006830:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006834:	f001 010f 	and.w	r1, r1, #15
 8006838:	40cb      	lsrs	r3, r1
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800683a:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800683e:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006840:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006842:	b2db      	uxtb	r3, r3
 8006844:	4323      	orrs	r3, r4
}
 8006846:	4018      	ands	r0, r3
 8006848:	bd10      	pop	{r4, pc}

0800684a <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800684a:	6940      	ldr	r0, [r0, #20]
}
 800684c:	f000 0001 	and.w	r0, r0, #1
 8006850:	4770      	bx	lr

08006852 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006852:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8006856:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800685a:	f023 0307 	bic.w	r3, r3, #7
 800685e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8006862:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8006866:	689a      	ldr	r2, [r3, #8]
 8006868:	f002 0206 	and.w	r2, r2, #6
 800686c:	2a04      	cmp	r2, #4
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800686e:	bf02      	ittt	eq
 8006870:	f8d0 2900 	ldreq.w	r2, [r0, #2304]	; 0x900
 8006874:	f042 0203 	orreq.w	r2, r2, #3
 8006878:	f8c0 2900 	streq.w	r2, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800687c:	685a      	ldr	r2, [r3, #4]
 800687e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006882:	605a      	str	r2, [r3, #4]
}
 8006884:	2000      	movs	r0, #0
 8006886:	4770      	bx	lr

08006888 <USB_EP0_OutStart>:
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006888:	6c02      	ldr	r2, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800688a:	4b0f      	ldr	r3, [pc, #60]	; (80068c8 <USB_EP0_OutStart+0x40>)
 800688c:	429a      	cmp	r2, r3
 800688e:	d903      	bls.n	8006898 <USB_EP0_OutStart+0x10>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006890:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8006894:	2b00      	cmp	r3, #0
 8006896:	db14      	blt.n	80068c2 <USB_EP0_OutStart+0x3a>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006898:	2300      	movs	r3, #0
 800689a:	f8c0 3b10 	str.w	r3, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800689e:	f8d0 3b10 	ldr.w	r3, [r0, #2832]	; 0xb10
 80068a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80068a6:	f8c0 3b10 	str.w	r3, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80068aa:	f8d0 3b10 	ldr.w	r3, [r0, #2832]	; 0xb10
 80068ae:	f043 0318 	orr.w	r3, r3, #24
 80068b2:	f8c0 3b10 	str.w	r3, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80068b6:	f8d0 3b10 	ldr.w	r3, [r0, #2832]	; 0xb10
 80068ba:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80068be:	f8c0 3b10 	str.w	r3, [r0, #2832]	; 0xb10
}
 80068c2:	2000      	movs	r0, #0
 80068c4:	4770      	bx	lr
 80068c6:	bf00      	nop
 80068c8:	4f54300a 	.word	0x4f54300a

080068cc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80068cc:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80068ce:	4903      	ldr	r1, [pc, #12]	; (80068dc <MX_FATFS_Init+0x10>)
 80068d0:	4803      	ldr	r0, [pc, #12]	; (80068e0 <MX_FATFS_Init+0x14>)
 80068d2:	f001 f83b 	bl	800794c <FATFS_LinkDriver>
 80068d6:	4b03      	ldr	r3, [pc, #12]	; (80068e4 <MX_FATFS_Init+0x18>)
 80068d8:	7018      	strb	r0, [r3, #0]
 80068da:	bd08      	pop	{r3, pc}
 80068dc:	2000c8c4 	.word	0x2000c8c4
 80068e0:	20000010 	.word	0x20000010
 80068e4:	2000c8c8 	.word	0x2000c8c8

080068e8 <USER_status>:
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 80068e8:	4b02      	ldr	r3, [pc, #8]	; (80068f4 <USER_status+0xc>)
 80068ea:	2201      	movs	r2, #1
 80068ec:	701a      	strb	r2, [r3, #0]
    return Stat;
 80068ee:	7818      	ldrb	r0, [r3, #0]
  /* USER CODE END STATUS */
}
 80068f0:	4770      	bx	lr
 80068f2:	bf00      	nop
 80068f4:	2000000c 	.word	0x2000000c

080068f8 <USER_write>:
{ 
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
  /* USER CODE END WRITE */
}
 80068f8:	2000      	movs	r0, #0
 80068fa:	4770      	bx	lr

080068fc <USER_ioctl>:
{
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
    return res;
  /* USER CODE END IOCTL */
}
 80068fc:	2001      	movs	r0, #1
 80068fe:	4770      	bx	lr

08006900 <USER_read>:
 8006900:	2000      	movs	r0, #0
 8006902:	4770      	bx	lr

08006904 <USER_initialize>:
 8006904:	4b02      	ldr	r3, [pc, #8]	; (8006910 <USER_initialize+0xc>)
 8006906:	2201      	movs	r2, #1
 8006908:	701a      	strb	r2, [r3, #0]
 800690a:	7818      	ldrb	r0, [r3, #0]
 800690c:	4770      	bx	lr
 800690e:	bf00      	nop
 8006910:	2000000c 	.word	0x2000000c

08006914 <USBD_MSC_GetHSCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_CfgHSDesc);
 8006914:	2320      	movs	r3, #32
 8006916:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_CfgHSDesc;
}
 8006918:	4800      	ldr	r0, [pc, #0]	; (800691c <USBD_MSC_GetHSCfgDesc+0x8>)
 800691a:	4770      	bx	lr
 800691c:	2000007c 	.word	0x2000007c

08006920 <USBD_MSC_GetFSCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_CfgFSDesc);
 8006920:	2320      	movs	r3, #32
 8006922:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_CfgFSDesc;
}
 8006924:	4800      	ldr	r0, [pc, #0]	; (8006928 <USBD_MSC_GetFSCfgDesc+0x8>)
 8006926:	4770      	bx	lr
 8006928:	2000005c 	.word	0x2000005c

0800692c <USBD_MSC_GetOtherSpeedCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_OtherSpeedCfgDesc);
 800692c:	2320      	movs	r3, #32
 800692e:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_OtherSpeedCfgDesc;
}
 8006930:	4800      	ldr	r0, [pc, #0]	; (8006934 <USBD_MSC_GetOtherSpeedCfgDesc+0x8>)
 8006932:	4770      	bx	lr
 8006934:	200000a8 	.word	0x200000a8

08006938 <USBD_MSC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_MSC_DeviceQualifierDesc);
 8006938:	230a      	movs	r3, #10
 800693a:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_DeviceQualifierDesc;
}
 800693c:	4800      	ldr	r0, [pc, #0]	; (8006940 <USBD_MSC_GetDeviceQualifierDescriptor+0x8>)
 800693e:	4770      	bx	lr
 8006940:	2000009c 	.word	0x2000009c

08006944 <USBD_MSC_Init>:
{
 8006944:	b538      	push	{r3, r4, r5, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006946:	7c03      	ldrb	r3, [r0, #16]
{
 8006948:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800694a:	b9e3      	cbnz	r3, 8006986 <USBD_MSC_Init+0x42>
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800694c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006950:	2202      	movs	r2, #2
 8006952:	2101      	movs	r1, #1
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006954:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8006956:	f001 f9b1 	bl	8007cbc <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800695a:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800695e:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8006962:	2202      	movs	r2, #2
 8006964:	2181      	movs	r1, #129	; 0x81
 8006966:	4620      	mov	r0, r4
 8006968:	f001 f9a8 	bl	8007cbc <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800696c:	62e5      	str	r5, [r4, #44]	; 0x2c
  pdev->pClassData = USBD_malloc(sizeof (USBD_MSC_BOT_HandleTypeDef));
 800696e:	f44f 701b 	mov.w	r0, #620	; 0x26c
 8006972:	f001 fa5f 	bl	8007e34 <USBD_static_malloc>
 8006976:	f8c4 0290 	str.w	r0, [r4, #656]	; 0x290
  if(pdev->pClassData == NULL)
 800697a:	b170      	cbz	r0, 800699a <USBD_MSC_Init+0x56>
  MSC_BOT_Init(pdev);
 800697c:	4620      	mov	r0, r4
 800697e:	f000 f8ea 	bl	8006b56 <MSC_BOT_Init>
  return USBD_OK;
 8006982:	2000      	movs	r0, #0
 8006984:	bd38      	pop	{r3, r4, r5, pc}
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8006986:	2340      	movs	r3, #64	; 0x40
 8006988:	2202      	movs	r2, #2
 800698a:	2101      	movs	r1, #1
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800698c:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800698e:	f001 f995 	bl	8007cbc <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006992:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8006996:	2340      	movs	r3, #64	; 0x40
 8006998:	e7e3      	b.n	8006962 <USBD_MSC_Init+0x1e>
    return USBD_FAIL;
 800699a:	2002      	movs	r0, #2
}
 800699c:	bd38      	pop	{r3, r4, r5, pc}

0800699e <USBD_MSC_DeInit>:
{
 800699e:	b538      	push	{r3, r4, r5, lr}
 80069a0:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 80069a2:	2101      	movs	r1, #1
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 80069a4:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 80069a6:	f001 f999 	bl	8007cdc <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 80069aa:	2181      	movs	r1, #129	; 0x81
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 80069ac:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 80069b0:	4620      	mov	r0, r4
 80069b2:	f001 f993 	bl	8007cdc <USBD_LL_CloseEP>
  MSC_BOT_DeInit(pdev);
 80069b6:	4620      	mov	r0, r4
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 80069b8:	62e5      	str	r5, [r4, #44]	; 0x2c
  MSC_BOT_DeInit(pdev);
 80069ba:	f000 f8f7 	bl	8006bac <MSC_BOT_DeInit>
  if(pdev->pClassData != NULL)
 80069be:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
 80069c2:	b118      	cbz	r0, 80069cc <USBD_MSC_DeInit+0x2e>
    USBD_free(pdev->pClassData);
 80069c4:	f001 fa3a 	bl	8007e3c <USBD_static_free>
    pdev->pClassData  = NULL;
 80069c8:	f8c4 5290 	str.w	r5, [r4, #656]	; 0x290
}
 80069cc:	2000      	movs	r0, #0
 80069ce:	bd38      	pop	{r3, r4, r5, pc}

080069d0 <USBD_MSC_Setup>:
{
 80069d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint16_t status_info = 0U;
 80069d4:	2300      	movs	r3, #0
 80069d6:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069da:	780b      	ldrb	r3, [r1, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 80069dc:	f8d0 7290 	ldr.w	r7, [r0, #656]	; 0x290
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069e0:	f013 0260 	ands.w	r2, r3, #96	; 0x60
{
 80069e4:	4604      	mov	r4, r0
 80069e6:	460e      	mov	r6, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069e8:	d02d      	beq.n	8006a46 <USBD_MSC_Setup+0x76>
 80069ea:	2a20      	cmp	r2, #32
 80069ec:	d104      	bne.n	80069f8 <USBD_MSC_Setup+0x28>
    switch (req->bRequest)
 80069ee:	784a      	ldrb	r2, [r1, #1]
 80069f0:	2afe      	cmp	r2, #254	; 0xfe
 80069f2:	d005      	beq.n	8006a00 <USBD_MSC_Setup+0x30>
 80069f4:	2aff      	cmp	r2, #255	; 0xff
 80069f6:	d018      	beq.n	8006a2a <USBD_MSC_Setup+0x5a>
    USBD_CtlError (pdev, req);
 80069f8:	f000 ff2b 	bl	8007852 <USBD_CtlError>
    ret = USBD_FAIL;
 80069fc:	2002      	movs	r0, #2
    break;
 80069fe:	e01f      	b.n	8006a40 <USBD_MSC_Setup+0x70>
      if((req->wValue  == 0U) && (req->wLength == 1U) &&
 8006a00:	884d      	ldrh	r5, [r1, #2]
 8006a02:	2d00      	cmp	r5, #0
 8006a04:	d175      	bne.n	8006af2 <USBD_MSC_Setup+0x122>
 8006a06:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 8006a0a:	f1b8 0f01 	cmp.w	r8, #1
 8006a0e:	d170      	bne.n	8006af2 <USBD_MSC_Setup+0x122>
 8006a10:	061a      	lsls	r2, r3, #24
 8006a12:	d56e      	bpl.n	8006af2 <USBD_MSC_Setup+0x122>
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8006a14:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8006a18:	699b      	ldr	r3, [r3, #24]
 8006a1a:	4798      	blx	r3
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hmsc->max_lun, 1U);
 8006a1c:	4642      	mov	r2, r8
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8006a1e:	6038      	str	r0, [r7, #0]
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hmsc->max_lun, 1U);
 8006a20:	4639      	mov	r1, r7
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hmsc->interface, 1U);
 8006a22:	4620      	mov	r0, r4
 8006a24:	f000 ff3c 	bl	80078a0 <USBD_CtlSendData>
 8006a28:	e009      	b.n	8006a3e <USBD_MSC_Setup+0x6e>
      if((req->wValue  == 0U) && (req->wLength == 0U) &&
 8006a2a:	884a      	ldrh	r2, [r1, #2]
 8006a2c:	2a00      	cmp	r2, #0
 8006a2e:	d160      	bne.n	8006af2 <USBD_MSC_Setup+0x122>
 8006a30:	88cd      	ldrh	r5, [r1, #6]
 8006a32:	2d00      	cmp	r5, #0
 8006a34:	d15d      	bne.n	8006af2 <USBD_MSC_Setup+0x122>
 8006a36:	061b      	lsls	r3, r3, #24
 8006a38:	d45b      	bmi.n	8006af2 <USBD_MSC_Setup+0x122>
        MSC_BOT_Reset(pdev);
 8006a3a:	f000 f8ac 	bl	8006b96 <MSC_BOT_Reset>
  uint8_t ret = USBD_OK;
 8006a3e:	2000      	movs	r0, #0
}
 8006a40:	b002      	add	sp, #8
 8006a42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (req->bRequest)
 8006a46:	784b      	ldrb	r3, [r1, #1]
 8006a48:	2b0b      	cmp	r3, #11
 8006a4a:	d852      	bhi.n	8006af2 <USBD_MSC_Setup+0x122>
 8006a4c:	e8df f003 	tbb	[pc, r3]
 8006a50:	51511c06 	.word	0x51511c06
 8006a54:	51515151 	.word	0x51515151
 8006a58:	150e5151 	.word	0x150e5151
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a5c:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8006a60:	2b03      	cmp	r3, #3
 8006a62:	d146      	bne.n	8006af2 <USBD_MSC_Setup+0x122>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8006a64:	2202      	movs	r2, #2
 8006a66:	f10d 0106 	add.w	r1, sp, #6
 8006a6a:	e7da      	b.n	8006a22 <USBD_MSC_Setup+0x52>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a6c:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8006a70:	2b03      	cmp	r3, #3
 8006a72:	d13e      	bne.n	8006af2 <USBD_MSC_Setup+0x122>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hmsc->interface, 1U);
 8006a74:	2201      	movs	r2, #1
 8006a76:	1d39      	adds	r1, r7, #4
 8006a78:	e7d3      	b.n	8006a22 <USBD_MSC_Setup+0x52>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a7a:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8006a7e:	2b03      	cmp	r3, #3
 8006a80:	d137      	bne.n	8006af2 <USBD_MSC_Setup+0x122>
        hmsc->interface = (uint8_t)(req->wValue);
 8006a82:	788b      	ldrb	r3, [r1, #2]
 8006a84:	607b      	str	r3, [r7, #4]
 8006a86:	e7da      	b.n	8006a3e <USBD_MSC_Setup+0x6e>
      USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8006a88:	7909      	ldrb	r1, [r1, #4]
 8006a8a:	f001 f935 	bl	8007cf8 <USBD_LL_FlushEP>
      USBD_LL_CloseEP (pdev , (uint8_t)req->wIndex);
 8006a8e:	7931      	ldrb	r1, [r6, #4]
 8006a90:	4620      	mov	r0, r4
 8006a92:	f001 f923 	bl	8007cdc <USBD_LL_CloseEP>
      if((((uint8_t)req->wIndex) & 0x80U) == 0x80U)
 8006a96:	88b3      	ldrh	r3, [r6, #4]
 8006a98:	7c22      	ldrb	r2, [r4, #16]
 8006a9a:	2114      	movs	r1, #20
 8006a9c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006aa0:	f003 030f 	and.w	r3, r3, #15
        pdev->ep_in[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8006aa4:	fb01 4303 	mla	r3, r1, r3, r4
 8006aa8:	f04f 0100 	mov.w	r1, #0
      if((((uint8_t)req->wIndex) & 0x80U) == 0x80U)
 8006aac:	d011      	beq.n	8006ad2 <USBD_MSC_Setup+0x102>
        pdev->ep_in[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8006aae:	6199      	str	r1, [r3, #24]
        if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006ab0:	b96a      	cbnz	r2, 8006ace <USBD_MSC_Setup+0xfe>
          USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8006ab2:	f44f 7300 	mov.w	r3, #512	; 0x200
          USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8006ab6:	2202      	movs	r2, #2
 8006ab8:	2181      	movs	r1, #129	; 0x81
 8006aba:	4620      	mov	r0, r4
 8006abc:	f001 f8fe 	bl	8007cbc <USBD_LL_OpenEP>
        pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	62e3      	str	r3, [r4, #44]	; 0x2c
      MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8006ac4:	7931      	ldrb	r1, [r6, #4]
 8006ac6:	4620      	mov	r0, r4
 8006ac8:	f000 f91a 	bl	8006d00 <MSC_BOT_CplClrFeature>
 8006acc:	e7b7      	b.n	8006a3e <USBD_MSC_Setup+0x6e>
          USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8006ace:	2340      	movs	r3, #64	; 0x40
 8006ad0:	e7f1      	b.n	8006ab6 <USBD_MSC_Setup+0xe6>
        pdev->ep_out[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8006ad2:	f8c3 1144 	str.w	r1, [r3, #324]	; 0x144
        if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006ad6:	b952      	cbnz	r2, 8006aee <USBD_MSC_Setup+0x11e>
          USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8006ad8:	f44f 7300 	mov.w	r3, #512	; 0x200
          USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8006adc:	2202      	movs	r2, #2
 8006ade:	2101      	movs	r1, #1
 8006ae0:	4620      	mov	r0, r4
 8006ae2:	f001 f8eb 	bl	8007cbc <USBD_LL_OpenEP>
        pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
 8006aec:	e7ea      	b.n	8006ac4 <USBD_MSC_Setup+0xf4>
          USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8006aee:	2340      	movs	r3, #64	; 0x40
 8006af0:	e7f4      	b.n	8006adc <USBD_MSC_Setup+0x10c>
      USBD_CtlError (pdev, req);
 8006af2:	4631      	mov	r1, r6
 8006af4:	4620      	mov	r0, r4
 8006af6:	e77f      	b.n	80069f8 <USBD_MSC_Setup+0x28>

08006af8 <USBD_MSC_DataIn>:
{
 8006af8:	b508      	push	{r3, lr}
  MSC_BOT_DataIn(pdev , epnum);
 8006afa:	f000 f879 	bl	8006bf0 <MSC_BOT_DataIn>
}
 8006afe:	2000      	movs	r0, #0
 8006b00:	bd08      	pop	{r3, pc}

08006b02 <USBD_MSC_DataOut>:
{
 8006b02:	b508      	push	{r3, lr}
  MSC_BOT_DataOut(pdev , epnum);
 8006b04:	f000 f890 	bl	8006c28 <MSC_BOT_DataOut>
}
 8006b08:	2000      	movs	r0, #0
 8006b0a:	bd08      	pop	{r3, pc}

08006b0c <USBD_MSC_RegisterStorage>:
* @retval status
*/
uint8_t  USBD_MSC_RegisterStorage  (USBD_HandleTypeDef   *pdev,
                                    USBD_StorageTypeDef *fops)
{
  if(fops != NULL)
 8006b0c:	b109      	cbz	r1, 8006b12 <USBD_MSC_RegisterStorage+0x6>
  {
    pdev->pUserData = fops;
 8006b0e:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  }
  return USBD_OK;
}
 8006b12:	2000      	movs	r0, #0
 8006b14:	4770      	bx	lr

08006b16 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort (USBD_HandleTypeDef  *pdev)
{
 8006b16:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006b18:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290

  if ((hmsc->cbw.bmFlags == 0U) &&
 8006b1c:	f894 3218 	ldrb.w	r3, [r4, #536]	; 0x218
{
 8006b20:	4605      	mov	r5, r0
  if ((hmsc->cbw.bmFlags == 0U) &&
 8006b22:	b93b      	cbnz	r3, 8006b34 <MSC_BOT_Abort+0x1e>
 8006b24:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8006b28:	b123      	cbz	r3, 8006b34 <MSC_BOT_Abort+0x1e>
      (hmsc->cbw.dDataLength != 0U) &&
 8006b2a:	7a63      	ldrb	r3, [r4, #9]
 8006b2c:	b913      	cbnz	r3, 8006b34 <MSC_BOT_Abort+0x1e>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR );
 8006b2e:	2101      	movs	r1, #1
 8006b30:	f001 f8f0 	bl	8007d14 <USBD_LL_StallEP>
  }

  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8006b34:	2181      	movs	r1, #129	; 0x81
 8006b36:	4628      	mov	r0, r5
 8006b38:	f001 f8ec 	bl	8007d14 <USBD_LL_StallEP>

  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8006b3c:	7a63      	ldrb	r3, [r4, #9]
 8006b3e:	2b02      	cmp	r3, #2
 8006b40:	d108      	bne.n	8006b54 <MSC_BOT_Abort+0x3e>
  {
    USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006b42:	f504 7203 	add.w	r2, r4, #524	; 0x20c
 8006b46:	4628      	mov	r0, r5
 8006b48:	231f      	movs	r3, #31
 8006b4a:	2101      	movs	r1, #1
                            USBD_BOT_CBW_LENGTH);
  }
}
 8006b4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006b50:	f001 b92c 	b.w	8007dac <USBD_LL_PrepareReceive>
 8006b54:	bd70      	pop	{r4, r5, r6, pc}

08006b56 <MSC_BOT_Init>:
{
 8006b56:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006b58:	f8d0 5290 	ldr.w	r5, [r0, #656]	; 0x290
{
 8006b5c:	4604      	mov	r4, r0
  hmsc->bot_state = USBD_BOT_IDLE;
 8006b5e:	2000      	movs	r0, #0
 8006b60:	7228      	strb	r0, [r5, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8006b62:	7268      	strb	r0, [r5, #9]
  hmsc->scsi_sense_tail = 0U;
 8006b64:	f885 025d 	strb.w	r0, [r5, #605]	; 0x25d
  hmsc->scsi_sense_head = 0U;
 8006b68:	f885 025c 	strb.w	r0, [r5, #604]	; 0x25c
  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8006b6c:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4798      	blx	r3
  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8006b74:	2101      	movs	r1, #1
 8006b76:	4620      	mov	r0, r4
 8006b78:	f001 f8be 	bl	8007cf8 <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8006b7c:	2181      	movs	r1, #129	; 0x81
 8006b7e:	4620      	mov	r0, r4
 8006b80:	f001 f8ba 	bl	8007cf8 <USBD_LL_FlushEP>
  USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006b84:	f505 7203 	add.w	r2, r5, #524	; 0x20c
 8006b88:	4620      	mov	r0, r4
 8006b8a:	231f      	movs	r3, #31
 8006b8c:	2101      	movs	r1, #1
}
 8006b8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006b92:	f001 b90b 	b.w	8007dac <USBD_LL_PrepareReceive>

08006b96 <MSC_BOT_Reset>:
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006b96:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290
  hmsc->bot_state  = USBD_BOT_IDLE;
 8006b9a:	2300      	movs	r3, #0
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8006b9c:	2101      	movs	r1, #1
  hmsc->bot_state  = USBD_BOT_IDLE;
 8006b9e:	7213      	strb	r3, [r2, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8006ba0:	7251      	strb	r1, [r2, #9]
  USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006ba2:	231f      	movs	r3, #31
 8006ba4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006ba8:	f001 b900 	b.w	8007dac <USBD_LL_PrepareReceive>

08006bac <MSC_BOT_DeInit>:
  hmsc->bot_state  = USBD_BOT_IDLE;
 8006bac:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	721a      	strb	r2, [r3, #8]
 8006bb4:	4770      	bx	lr
	...

08006bb8 <MSC_BOT_SendCSW>:
{
 8006bb8:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006bba:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8006bbe:	4b0b      	ldr	r3, [pc, #44]	; (8006bec <MSC_BOT_SendCSW+0x34>)
 8006bc0:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
  hmsc->bot_state = USBD_BOT_IDLE;
 8006bc4:	2300      	movs	r3, #0
{
 8006bc6:	4605      	mov	r5, r0
  hmsc->csw.bStatus = CSW_Status;
 8006bc8:	f884 1238 	strb.w	r1, [r4, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_IDLE;
 8006bcc:	7223      	strb	r3, [r4, #8]
  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, (uint8_t *)(void *)&hmsc->csw,
 8006bce:	f504 720b 	add.w	r2, r4, #556	; 0x22c
 8006bd2:	230d      	movs	r3, #13
 8006bd4:	2181      	movs	r1, #129	; 0x81
 8006bd6:	f001 f8db 	bl	8007d90 <USBD_LL_Transmit>
  USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006bda:	f504 7203 	add.w	r2, r4, #524	; 0x20c
 8006bde:	4628      	mov	r0, r5
 8006be0:	231f      	movs	r3, #31
 8006be2:	2101      	movs	r1, #1
}
 8006be4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006be8:	f001 b8e0 	b.w	8007dac <USBD_LL_PrepareReceive>
 8006bec:	53425355 	.word	0x53425355

08006bf0 <MSC_BOT_DataIn>:
{
 8006bf0:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006bf2:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290
  switch (hmsc->bot_state)
 8006bf6:	7a1a      	ldrb	r2, [r3, #8]
 8006bf8:	2a02      	cmp	r2, #2
{
 8006bfa:	4604      	mov	r4, r0
  switch (hmsc->bot_state)
 8006bfc:	d003      	beq.n	8006c06 <MSC_BOT_DataIn+0x16>
 8006bfe:	d312      	bcc.n	8006c26 <MSC_BOT_DataIn+0x36>
 8006c00:	2a04      	cmp	r2, #4
 8006c02:	d90e      	bls.n	8006c22 <MSC_BOT_DataIn+0x32>
 8006c04:	bd10      	pop	{r4, pc}
    if(SCSI_ProcessCmd(pdev,
 8006c06:	f203 221b 	addw	r2, r3, #539	; 0x21b
 8006c0a:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8006c0e:	f000 f8a3 	bl	8006d58 <SCSI_ProcessCmd>
 8006c12:	2800      	cmp	r0, #0
 8006c14:	da07      	bge.n	8006c26 <MSC_BOT_DataIn+0x36>
      MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8006c16:	2101      	movs	r1, #1
 8006c18:	4620      	mov	r0, r4
}
 8006c1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 8006c1e:	f7ff bfcb 	b.w	8006bb8 <MSC_BOT_SendCSW>
 8006c22:	2100      	movs	r1, #0
 8006c24:	e7f9      	b.n	8006c1a <MSC_BOT_DataIn+0x2a>
 8006c26:	bd10      	pop	{r4, pc}

08006c28 <MSC_BOT_DataOut>:
{
 8006c28:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006c2a:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
  switch (hmsc->bot_state)
 8006c2e:	7a23      	ldrb	r3, [r4, #8]
{
 8006c30:	4605      	mov	r5, r0
  switch (hmsc->bot_state)
 8006c32:	b113      	cbz	r3, 8006c3a <MSC_BOT_DataOut+0x12>
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d058      	beq.n	8006cea <MSC_BOT_DataOut+0xc2>
 8006c38:	bd70      	pop	{r4, r5, r6, pc}
  hmsc->csw.dTag = hmsc->cbw.dTag;
 8006c3a:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 8006c3e:	f8c4 3230 	str.w	r3, [r4, #560]	; 0x230
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8006c42:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8006c46:	f8c4 3234 	str.w	r3, [r4, #564]	; 0x234
  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8006c4a:	2101      	movs	r1, #1
 8006c4c:	f001 f8bc 	bl	8007dc8 <USBD_LL_GetRxDataSize>
 8006c50:	281f      	cmp	r0, #31
 8006c52:	f894 1219 	ldrb.w	r1, [r4, #537]	; 0x219
 8006c56:	d10b      	bne.n	8006c70 <MSC_BOT_DataOut+0x48>
 8006c58:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 8006c5c:	4b27      	ldr	r3, [pc, #156]	; (8006cfc <MSC_BOT_DataOut+0xd4>)
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d106      	bne.n	8006c70 <MSC_BOT_DataOut+0x48>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8006c62:	2901      	cmp	r1, #1
 8006c64:	d804      	bhi.n	8006c70 <MSC_BOT_DataOut+0x48>
        (hmsc->cbw.bLUN > 1U) ||
 8006c66:	f894 321a 	ldrb.w	r3, [r4, #538]	; 0x21a
 8006c6a:	3b01      	subs	r3, #1
 8006c6c:	2b0f      	cmp	r3, #15
 8006c6e:	d90b      	bls.n	8006c88 <MSC_BOT_DataOut+0x60>
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006c70:	2320      	movs	r3, #32
 8006c72:	2205      	movs	r2, #5
 8006c74:	4628      	mov	r0, r5
 8006c76:	f000 fa9d 	bl	80071b4 <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8006c7a:	2302      	movs	r3, #2
 8006c7c:	7263      	strb	r3, [r4, #9]
        MSC_BOT_Abort(pdev);
 8006c7e:	4628      	mov	r0, r5
}
 8006c80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        MSC_BOT_Abort(pdev);
 8006c84:	f7ff bf47 	b.w	8006b16 <MSC_BOT_Abort>
    if(SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006c88:	f204 221b 	addw	r2, r4, #539	; 0x21b
 8006c8c:	4628      	mov	r0, r5
 8006c8e:	f000 f863 	bl	8006d58 <SCSI_ProcessCmd>
 8006c92:	2800      	cmp	r0, #0
 8006c94:	7a23      	ldrb	r3, [r4, #8]
 8006c96:	da07      	bge.n	8006ca8 <MSC_BOT_DataOut+0x80>
      if(hmsc->bot_state == USBD_BOT_NO_DATA)
 8006c98:	2b05      	cmp	r3, #5
 8006c9a:	d1f0      	bne.n	8006c7e <MSC_BOT_DataOut+0x56>
        MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8006c9c:	2101      	movs	r1, #1
        MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 8006c9e:	4628      	mov	r0, r5
}
 8006ca0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 8006ca4:	f7ff bf88 	b.w	8006bb8 <MSC_BOT_SendCSW>
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8006ca8:	3b01      	subs	r3, #1
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	d925      	bls.n	8006cfa <MSC_BOT_DataOut+0xd2>
      if (hmsc->bot_data_length > 0U)
 8006cae:	8963      	ldrh	r3, [r4, #10]
 8006cb0:	b1cb      	cbz	r3, 8006ce6 <MSC_BOT_DataOut+0xbe>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006cb2:	f8d5 1290 	ldr.w	r1, [r5, #656]	; 0x290
  hmsc->csw.dDataResidue -= len;
 8006cb6:	f8d1 0234 	ldr.w	r0, [r1, #564]	; 0x234
  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 8006cba:	f8d1 6214 	ldr.w	r6, [r1, #532]	; 0x214
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8006cbe:	f104 020c 	add.w	r2, r4, #12
  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 8006cc2:	461c      	mov	r4, r3
  hmsc->csw.dDataResidue -= len;
 8006cc4:	1b00      	subs	r0, r0, r4
 8006cc6:	f8c1 0234 	str.w	r0, [r1, #564]	; 0x234
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8006cca:	2000      	movs	r0, #0
 8006ccc:	f881 0238 	strb.w	r0, [r1, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8006cd0:	2004      	movs	r0, #4
 8006cd2:	7208      	strb	r0, [r1, #8]
  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 8006cd4:	429e      	cmp	r6, r3
 8006cd6:	bf38      	it	cc
 8006cd8:	b2b3      	uxthcc	r3, r6
  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8006cda:	4628      	mov	r0, r5
 8006cdc:	2181      	movs	r1, #129	; 0x81
}
 8006cde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8006ce2:	f001 b855 	b.w	8007d90 <USBD_LL_Transmit>
        MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	e7d9      	b.n	8006c9e <MSC_BOT_DataOut+0x76>
    if(SCSI_ProcessCmd(pdev,
 8006cea:	f204 221b 	addw	r2, r4, #539	; 0x21b
 8006cee:	f894 1219 	ldrb.w	r1, [r4, #537]	; 0x219
 8006cf2:	f000 f831 	bl	8006d58 <SCSI_ProcessCmd>
 8006cf6:	2800      	cmp	r0, #0
 8006cf8:	dbd0      	blt.n	8006c9c <MSC_BOT_DataOut+0x74>
 8006cfa:	bd70      	pop	{r4, r5, r6, pc}
 8006cfc:	43425355 	.word	0x43425355

08006d00 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature (USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8006d00:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006d02:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290

  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR)/* Bad CBW Signature */
 8006d06:	7a63      	ldrb	r3, [r4, #9]
 8006d08:	2b02      	cmp	r3, #2
 8006d0a:	d105      	bne.n	8006d18 <MSC_BOT_CplClrFeature+0x18>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8006d0c:	2181      	movs	r1, #129	; 0x81
 8006d0e:	f001 f801 	bl	8007d14 <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8006d12:	2300      	movs	r3, #0
 8006d14:	7263      	strb	r3, [r4, #9]
 8006d16:	bd10      	pop	{r4, pc}
  }
  else if(((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8006d18:	060a      	lsls	r2, r1, #24
 8006d1a:	d506      	bpl.n	8006d2a <MSC_BOT_CplClrFeature+0x2a>
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d004      	beq.n	8006d2a <MSC_BOT_CplClrFeature+0x2a>
  {
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8006d20:	2101      	movs	r1, #1
  }
  else
  {
    return;
  }
}
 8006d22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8006d26:	f7ff bf47 	b.w	8006bb8 <MSC_BOT_SendCSW>
 8006d2a:	bd10      	pop	{r4, pc}

08006d2c <SCSI_SenseCode.constprop.8>:
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006d2c:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 8006d30:	f892 325d 	ldrb.w	r3, [r2, #605]	; 0x25d
 8006d34:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
  hmsc->scsi_sense_tail++;
 8006d38:	3301      	adds	r3, #1
 8006d3a:	b2db      	uxtb	r3, r3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 8006d3c:	f880 123c 	strb.w	r1, [r0, #572]	; 0x23c
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8006d40:	2b04      	cmp	r3, #4
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 8006d42:	f04f 0100 	mov.w	r1, #0
 8006d46:	f880 1240 	strb.w	r1, [r0, #576]	; 0x240
  hmsc->scsi_sense_tail++;
 8006d4a:	bf14      	ite	ne
 8006d4c:	f882 325d 	strbne.w	r3, [r2, #605]	; 0x25d
  {
    hmsc->scsi_sense_tail = 0U;
 8006d50:	f882 125d 	strbeq.w	r1, [r2, #605]	; 0x25d
 8006d54:	4770      	bx	lr
	...

08006d58 <SCSI_ProcessCmd>:
{
 8006d58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  switch (cmd[0])
 8006d5c:	7813      	ldrb	r3, [r2, #0]
 8006d5e:	2b1e      	cmp	r3, #30
{
 8006d60:	4605      	mov	r5, r0
 8006d62:	460c      	mov	r4, r1
 8006d64:	4617      	mov	r7, r2
  switch (cmd[0])
 8006d66:	d016      	beq.n	8006d96 <SCSI_ProcessCmd+0x3e>
 8006d68:	d81a      	bhi.n	8006da0 <SCSI_ProcessCmd+0x48>
 8006d6a:	2b12      	cmp	r3, #18
 8006d6c:	f000 80e3 	beq.w	8006f36 <SCSI_ProcessCmd+0x1de>
 8006d70:	d80c      	bhi.n	8006d8c <SCSI_ProcessCmd+0x34>
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	f000 8092 	beq.w	8006e9c <SCSI_ProcessCmd+0x144>
 8006d78:	2b03      	cmp	r3, #3
 8006d7a:	f000 80ad 	beq.w	8006ed8 <SCSI_ProcessCmd+0x180>
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8006d7e:	2105      	movs	r1, #5
 8006d80:	4628      	mov	r0, r5
 8006d82:	f7ff ffd3 	bl	8006d2c <SCSI_SenseCode.constprop.8>
    return -1;
 8006d86:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006d8a:	e0a1      	b.n	8006ed0 <SCSI_ProcessCmd+0x178>
  switch (cmd[0])
 8006d8c:	2b1a      	cmp	r3, #26
 8006d8e:	f000 80fa 	beq.w	8006f86 <SCSI_ProcessCmd+0x22e>
 8006d92:	2b1b      	cmp	r3, #27
 8006d94:	d1f3      	bne.n	8006d7e <SCSI_ProcessCmd+0x26>
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
  hmsc->bot_data_length = 0U;
 8006d96:	f8d5 3290 	ldr.w	r3, [r5, #656]	; 0x290
 8006d9a:	2400      	movs	r4, #0
  if(SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
                            hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */
  }
  hmsc->bot_data_length = 0U;
 8006d9c:	815c      	strh	r4, [r3, #10]
 8006d9e:	e097      	b.n	8006ed0 <SCSI_ProcessCmd+0x178>
  switch (cmd[0])
 8006da0:	2b28      	cmp	r3, #40	; 0x28
 8006da2:	f000 813a 	beq.w	800701a <SCSI_ProcessCmd+0x2c2>
 8006da6:	d827      	bhi.n	8006df8 <SCSI_ProcessCmd+0xa0>
 8006da8:	2b23      	cmp	r3, #35	; 0x23
 8006daa:	f000 810a 	beq.w	8006fc2 <SCSI_ProcessCmd+0x26a>
 8006dae:	2b25      	cmp	r3, #37	; 0x25
 8006db0:	d1e5      	bne.n	8006d7e <SCSI_ProcessCmd+0x26>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006db2:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 8006db6:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8006dba:	f206 225e 	addw	r2, r6, #606	; 0x25e
 8006dbe:	4620      	mov	r0, r4
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	f506 7118 	add.w	r1, r6, #608	; 0x260
 8006dc6:	4798      	blx	r3
 8006dc8:	4604      	mov	r4, r0
 8006dca:	2800      	cmp	r0, #0
 8006dcc:	f040 810d 	bne.w	8006fea <SCSI_ProcessCmd+0x292>
    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8006dd0:	f8d6 3260 	ldr.w	r3, [r6, #608]	; 0x260
    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8006dd4:	7430      	strb	r0, [r6, #16]
    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8006dd6:	3b01      	subs	r3, #1
 8006dd8:	0e1a      	lsrs	r2, r3, #24
 8006dda:	7332      	strb	r2, [r6, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8006ddc:	0c1a      	lsrs	r2, r3, #16
 8006dde:	7372      	strb	r2, [r6, #13]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8006de0:	73f3      	strb	r3, [r6, #15]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8006de2:	0a1a      	lsrs	r2, r3, #8
    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8006de4:	f8b6 325e 	ldrh.w	r3, [r6, #606]	; 0x25e
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8006de8:	73b2      	strb	r2, [r6, #14]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8006dea:	74f3      	strb	r3, [r6, #19]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8006dec:	0a1a      	lsrs	r2, r3, #8
    hmsc->bot_data_length = 8U;
 8006dee:	2308      	movs	r3, #8
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8006df0:	7470      	strb	r0, [r6, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8006df2:	74b2      	strb	r2, [r6, #18]
    hmsc->bot_data_length = 8U;
 8006df4:	8173      	strh	r3, [r6, #10]
 8006df6:	e06b      	b.n	8006ed0 <SCSI_ProcessCmd+0x178>
  switch (cmd[0])
 8006df8:	2b2f      	cmp	r3, #47	; 0x2f
 8006dfa:	f000 81c2 	beq.w	8007182 <SCSI_ProcessCmd+0x42a>
 8006dfe:	2b5a      	cmp	r3, #90	; 0x5a
 8006e00:	f000 80d0 	beq.w	8006fa4 <SCSI_ProcessCmd+0x24c>
 8006e04:	2b2a      	cmp	r3, #42	; 0x2a
 8006e06:	d1ba      	bne.n	8006d7e <SCSI_ProcessCmd+0x26>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 8006e08:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8006e0c:	7a33      	ldrb	r3, [r6, #8]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	f040 8177 	bne.w	8007102 <SCSI_ProcessCmd+0x3aa>
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8006e14:	f996 3218 	ldrsb.w	r3, [r6, #536]	; 0x218
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	db44      	blt.n	8006ea6 <SCSI_ProcessCmd+0x14e>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8006e1c:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8006e20:	4608      	mov	r0, r1
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	4798      	blx	r3
 8006e26:	2800      	cmp	r0, #0
 8006e28:	f040 80df 	bne.w	8006fea <SCSI_ProcessCmd+0x292>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8006e2c:	f8d5 3294 	ldr.w	r3, [r5, #660]	; 0x294
 8006e30:	4620      	mov	r0, r4
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	4798      	blx	r3
 8006e36:	4604      	mov	r4, r0
 8006e38:	2800      	cmp	r0, #0
 8006e3a:	f040 80d6 	bne.w	8006fea <SCSI_ProcessCmd+0x292>
                          ((uint32_t)params[3] << 16) |
 8006e3e:	78fa      	ldrb	r2, [r7, #3]
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006e40:	78bb      	ldrb	r3, [r7, #2]
                          ((uint32_t)params[3] << 16) |
 8006e42:	0412      	lsls	r2, r2, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006e44:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
                           (uint32_t)params[5];
 8006e48:	797b      	ldrb	r3, [r7, #5]
                          ((uint32_t)params[4] << 8) |
 8006e4a:	431a      	orrs	r2, r3
 8006e4c:	793b      	ldrb	r3, [r7, #4]
 8006e4e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006e52:	f8c6 2264 	str.w	r2, [r6, #612]	; 0x264
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8006e56:	79f9      	ldrb	r1, [r7, #7]
                          (uint32_t)params[8];
 8006e58:	7a3b      	ldrb	r3, [r7, #8]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8006e5a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
static int8_t SCSI_CheckAddressRange (USBD_HandleTypeDef *pdev, uint8_t lun,
                                      uint32_t blk_offset, uint32_t blk_nbr)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8006e5e:	f8d5 1290 	ldr.w	r1, [r5, #656]	; 0x290
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8006e62:	f8c6 3268 	str.w	r3, [r6, #616]	; 0x268
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8006e66:	f8d1 1260 	ldr.w	r1, [r1, #608]	; 0x260
 8006e6a:	441a      	add	r2, r3
 8006e6c:	428a      	cmp	r2, r1
 8006e6e:	d81a      	bhi.n	8006ea6 <SCSI_ProcessCmd+0x14e>
    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8006e70:	f8b6 225e 	ldrh.w	r2, [r6, #606]	; 0x25e
 8006e74:	4353      	muls	r3, r2
    if (hmsc->cbw.dDataLength != len)
 8006e76:	f8d6 2214 	ldr.w	r2, [r6, #532]	; 0x214
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d113      	bne.n	8006ea6 <SCSI_ProcessCmd+0x14e>
    len = MIN(len, MSC_MEDIA_PACKET);
 8006e7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8006e82:	f04f 0101 	mov.w	r1, #1
    len = MIN(len, MSC_MEDIA_PACKET);
 8006e86:	bf28      	it	cs
 8006e88:	f44f 7300 	movcs.w	r3, #512	; 0x200
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8006e8c:	7231      	strb	r1, [r6, #8]
    USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	f106 020c 	add.w	r2, r6, #12
 8006e94:	4628      	mov	r0, r5
 8006e96:	f000 ff89 	bl	8007dac <USBD_LL_PrepareReceive>
 8006e9a:	e019      	b.n	8006ed0 <SCSI_ProcessCmd+0x178>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006e9c:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
  if (hmsc->cbw.dDataLength != 0U)
 8006ea0:	f8d6 7214 	ldr.w	r7, [r6, #532]	; 0x214
 8006ea4:	b127      	cbz	r7, 8006eb0 <SCSI_ProcessCmd+0x158>
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006ea6:	2105      	movs	r1, #5
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
                              hmsc->bot_data,
                              hmsc->scsi_blk_addr,
                              (len / hmsc->scsi_blk_size)) < 0)
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8006ea8:	4628      	mov	r0, r5
 8006eaa:	f7ff ff3f 	bl	8006d2c <SCSI_SenseCode.constprop.8>
 8006eae:	e00c      	b.n	8006eca <SCSI_ProcessCmd+0x172>
  if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8006eb0:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8006eb4:	4608      	mov	r0, r1
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	4798      	blx	r3
 8006eba:	4604      	mov	r4, r0
 8006ebc:	b138      	cbz	r0, 8006ece <SCSI_ProcessCmd+0x176>
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006ebe:	2102      	movs	r1, #2
 8006ec0:	4628      	mov	r0, r5
 8006ec2:	f7ff ff33 	bl	8006d2c <SCSI_SenseCode.constprop.8>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8006ec6:	2305      	movs	r3, #5
 8006ec8:	7233      	strb	r3, [r6, #8]
  return 0;
 8006eca:	2400      	movs	r4, #0
 8006ecc:	e000      	b.n	8006ed0 <SCSI_ProcessCmd+0x178>
  hmsc->bot_data_length = 0U;
 8006ece:	8170      	strh	r0, [r6, #10]
}
 8006ed0:	4620      	mov	r0, r4
 8006ed2:	b003      	add	sp, #12
 8006ed4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ed8:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290
    hmsc->bot_data[i] = 0U;
 8006edc:	2000      	movs	r0, #0
 8006ede:	f103 020c 	add.w	r2, r3, #12
 8006ee2:	f103 011e 	add.w	r1, r3, #30
 8006ee6:	f802 0b01 	strb.w	r0, [r2], #1
  for(i = 0U ;i < REQUEST_SENSE_DATA_LEN; i++)
 8006eea:	428a      	cmp	r2, r1
 8006eec:	d1fb      	bne.n	8006ee6 <SCSI_ProcessCmd+0x18e>
  hmsc->bot_data[0]	= 0x70U;
 8006eee:	2270      	movs	r2, #112	; 0x70
 8006ef0:	731a      	strb	r2, [r3, #12]
  hmsc->bot_data[7]	= REQUEST_SENSE_DATA_LEN - 6U;
 8006ef2:	220c      	movs	r2, #12
 8006ef4:	74da      	strb	r2, [r3, #19]
  if((hmsc->scsi_sense_head != hmsc->scsi_sense_tail)) {
 8006ef6:	f893 125d 	ldrb.w	r1, [r3, #605]	; 0x25d
 8006efa:	f893 225c 	ldrb.w	r2, [r3, #604]	; 0x25c
 8006efe:	4291      	cmp	r1, r2
 8006f00:	d012      	beq.n	8006f28 <SCSI_ProcessCmd+0x1d0>
 8006f02:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
    hmsc->scsi_sense_head++;
 8006f06:	3201      	adds	r2, #1
    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8006f08:	f891 423c 	ldrb.w	r4, [r1, #572]	; 0x23c
 8006f0c:	739c      	strb	r4, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8006f0e:	f891 4241 	ldrb.w	r4, [r1, #577]	; 0x241
 8006f12:	761c      	strb	r4, [r3, #24]
    hmsc->scsi_sense_head++;
 8006f14:	b2d2      	uxtb	r2, r2
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8006f16:	f891 1240 	ldrb.w	r1, [r1, #576]	; 0x240
 8006f1a:	7659      	strb	r1, [r3, #25]
    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8006f1c:	2a04      	cmp	r2, #4
    hmsc->scsi_sense_head++;
 8006f1e:	bf14      	ite	ne
 8006f20:	f883 225c 	strbne.w	r2, [r3, #604]	; 0x25c
      hmsc->scsi_sense_head = 0U;
 8006f24:	f883 025c 	strbeq.w	r0, [r3, #604]	; 0x25c
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8006f28:	2212      	movs	r2, #18
 8006f2a:	815a      	strh	r2, [r3, #10]
  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8006f2c:	793a      	ldrb	r2, [r7, #4]
 8006f2e:	2a12      	cmp	r2, #18
    hmsc->bot_data_length = params[4];
 8006f30:	bf98      	it	ls
 8006f32:	815a      	strhls	r2, [r3, #10]
 8006f34:	e7c9      	b.n	8006eca <SCSI_ProcessCmd+0x172>
  if (params[1] & 0x01U)/*Evpd is set*/
 8006f36:	787b      	ldrb	r3, [r7, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006f38:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290
  if (params[1] & 0x01U)/*Evpd is set*/
 8006f3c:	07db      	lsls	r3, r3, #31
 8006f3e:	d50c      	bpl.n	8006f5a <SCSI_ProcessCmd+0x202>
    hmsc->bot_data_length = len;
 8006f40:	2307      	movs	r3, #7
 8006f42:	4999      	ldr	r1, [pc, #612]	; (80071a8 <SCSI_ProcessCmd+0x450>)
 8006f44:	8153      	strh	r3, [r2, #10]
 8006f46:	f102 0312 	add.w	r3, r2, #18
 8006f4a:	320b      	adds	r2, #11
      hmsc->bot_data[len] = MSC_Page00_Inquiry_Data[len];
 8006f4c:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
 8006f50:	f803 0901 	strb.w	r0, [r3], #-1
    while (len)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d1f9      	bne.n	8006f4c <SCSI_ProcessCmd+0x1f4>
 8006f58:	e7b7      	b.n	8006eca <SCSI_ProcessCmd+0x172>
    pPage = (uint8_t *)(void *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8006f5a:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8006f5e:	69db      	ldr	r3, [r3, #28]
 8006f60:	eb01 04c1 	add.w	r4, r1, r1, lsl #3
 8006f64:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006f68:	7939      	ldrb	r1, [r7, #4]
    len = (uint16_t)pPage[4] + 5U;
 8006f6a:	7923      	ldrb	r3, [r4, #4]
 8006f6c:	3305      	adds	r3, #5
 8006f6e:	428b      	cmp	r3, r1
 8006f70:	bf28      	it	cs
 8006f72:	460b      	movcs	r3, r1
    hmsc->bot_data_length = len;
 8006f74:	8153      	strh	r3, [r2, #10]
    while (len)
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d0a7      	beq.n	8006eca <SCSI_ProcessCmd+0x172>
      len--;
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	b29b      	uxth	r3, r3
      hmsc->bot_data[len] = pPage[len];
 8006f7e:	18d1      	adds	r1, r2, r3
 8006f80:	5ce0      	ldrb	r0, [r4, r3]
 8006f82:	7308      	strb	r0, [r1, #12]
 8006f84:	e7f7      	b.n	8006f76 <SCSI_ProcessCmd+0x21e>
 8006f86:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290
 8006f8a:	4988      	ldr	r1, [pc, #544]	; (80071ac <SCSI_ProcessCmd+0x454>)
  hmsc->bot_data_length = len;
 8006f8c:	2208      	movs	r2, #8
 8006f8e:	815a      	strh	r2, [r3, #10]
 8006f90:	f103 0213 	add.w	r2, r3, #19
 8006f94:	330b      	adds	r3, #11
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 8006f96:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
 8006f9a:	f802 0901 	strb.w	r0, [r2], #-1
  while (len)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d1f9      	bne.n	8006f96 <SCSI_ProcessCmd+0x23e>
 8006fa2:	e792      	b.n	8006eca <SCSI_ProcessCmd+0x172>
 8006fa4:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290
 8006fa8:	4981      	ldr	r1, [pc, #516]	; (80071b0 <SCSI_ProcessCmd+0x458>)
  hmsc->bot_data_length = len;
 8006faa:	2208      	movs	r2, #8
 8006fac:	815a      	strh	r2, [r3, #10]
 8006fae:	f103 0213 	add.w	r2, r3, #19
 8006fb2:	330b      	adds	r3, #11
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 8006fb4:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
 8006fb8:	f802 0901 	strb.w	r0, [r2], #-1
  while (len)
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d1f9      	bne.n	8006fb4 <SCSI_ProcessCmd+0x25c>
 8006fc0:	e783      	b.n	8006eca <SCSI_ProcessCmd+0x172>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006fc2:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
    hmsc->bot_data[i] = 0U;
 8006fc6:	2100      	movs	r1, #0
 8006fc8:	f106 030c 	add.w	r3, r6, #12
 8006fcc:	f106 0218 	add.w	r2, r6, #24
 8006fd0:	f803 1b01 	strb.w	r1, [r3], #1
  for(i = 0U; i < 12U ; i++)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d1fb      	bne.n	8006fd0 <SCSI_ProcessCmd+0x278>
  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0U)
 8006fd8:	f8d5 3294 	ldr.w	r3, [r5, #660]	; 0x294
 8006fdc:	f10d 0202 	add.w	r2, sp, #2
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	a901      	add	r1, sp, #4
 8006fe4:	4620      	mov	r0, r4
 8006fe6:	4798      	blx	r3
 8006fe8:	b108      	cbz	r0, 8006fee <SCSI_ProcessCmd+0x296>
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006fea:	2102      	movs	r1, #2
 8006fec:	e75c      	b.n	8006ea8 <SCSI_ProcessCmd+0x150>
    hmsc->bot_data[3] = 0x08U;
 8006fee:	2308      	movs	r3, #8
 8006ff0:	73f3      	strb	r3, [r6, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8006ff2:	9b01      	ldr	r3, [sp, #4]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8006ff4:	7570      	strb	r0, [r6, #21]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8006ff6:	3b01      	subs	r3, #1
 8006ff8:	0e1a      	lsrs	r2, r3, #24
 8006ffa:	7432      	strb	r2, [r6, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8006ffc:	0c1a      	lsrs	r2, r3, #16
 8006ffe:	7472      	strb	r2, [r6, #17]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8007000:	74f3      	strb	r3, [r6, #19]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8007002:	0a1a      	lsrs	r2, r3, #8
    hmsc->bot_data[8] = 0x02U;
 8007004:	2302      	movs	r3, #2
 8007006:	7533      	strb	r3, [r6, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8007008:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800700c:	74b2      	strb	r2, [r6, #18]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 800700e:	75f3      	strb	r3, [r6, #23]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8007010:	0a1a      	lsrs	r2, r3, #8
    hmsc->bot_data_length = 12U;
 8007012:	230c      	movs	r3, #12
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8007014:	75b2      	strb	r2, [r6, #22]
    hmsc->bot_data_length = 12U;
 8007016:	8173      	strh	r3, [r6, #10]
 8007018:	e757      	b.n	8006eca <SCSI_ProcessCmd+0x172>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 800701a:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
  if(hmsc->bot_state == USBD_BOT_IDLE)  /* Idle */
 800701e:	7a33      	ldrb	r3, [r6, #8]
 8007020:	bb7b      	cbnz	r3, 8007082 <SCSI_ProcessCmd+0x32a>
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8007022:	f996 3218 	ldrsb.w	r3, [r6, #536]	; 0x218
 8007026:	2b00      	cmp	r3, #0
 8007028:	f6bf af3d 	bge.w	8006ea6 <SCSI_ProcessCmd+0x14e>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800702c:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8007030:	4608      	mov	r0, r1
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	4798      	blx	r3
 8007036:	2800      	cmp	r0, #0
 8007038:	d1d7      	bne.n	8006fea <SCSI_ProcessCmd+0x292>
                          ((uint32_t)params[3] << 16) |
 800703a:	78fb      	ldrb	r3, [r7, #3]
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800703c:	78ba      	ldrb	r2, [r7, #2]
                          ((uint32_t)params[3] << 16) |
 800703e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007040:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                           (uint32_t)params[5];
 8007044:	797a      	ldrb	r2, [r7, #5]
                          ((uint32_t)params[4] <<  8) |
 8007046:	4313      	orrs	r3, r2
 8007048:	793a      	ldrb	r2, [r7, #4]
 800704a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800704e:	f8c6 3264 	str.w	r3, [r6, #612]	; 0x264
    hmsc->scsi_blk_len =  ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8007052:	79f9      	ldrb	r1, [r7, #7]
 8007054:	7a3a      	ldrb	r2, [r7, #8]
 8007056:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800705a:	f8d5 1290 	ldr.w	r1, [r5, #656]	; 0x290
    hmsc->scsi_blk_len =  ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800705e:	f8c6 2268 	str.w	r2, [r6, #616]	; 0x268
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8007062:	f8d1 1260 	ldr.w	r1, [r1, #608]	; 0x260
 8007066:	4413      	add	r3, r2
 8007068:	428b      	cmp	r3, r1
 800706a:	f63f af1c 	bhi.w	8006ea6 <SCSI_ProcessCmd+0x14e>
    hmsc->bot_state = USBD_BOT_DATA_IN;
 800706e:	2302      	movs	r3, #2
 8007070:	7233      	strb	r3, [r6, #8]
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8007072:	f8b6 325e 	ldrh.w	r3, [r6, #606]	; 0x25e
 8007076:	435a      	muls	r2, r3
 8007078:	f8d6 3214 	ldr.w	r3, [r6, #532]	; 0x214
 800707c:	4293      	cmp	r3, r2
 800707e:	f47f af12 	bne.w	8006ea6 <SCSI_ProcessCmd+0x14e>
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8007082:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007086:	8173      	strh	r3, [r6, #10]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8007088:	f8d5 6290 	ldr.w	r6, [r5, #656]	; 0x290
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 800708c:	f8d5 2294 	ldr.w	r2, [r5, #660]	; 0x294
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007090:	f8b6 325e 	ldrh.w	r3, [r6, #606]	; 0x25e
 8007094:	f8d6 7268 	ldr.w	r7, [r6, #616]	; 0x268
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8007098:	f8d2 9010 	ldr.w	r9, [r2, #16]
 800709c:	f8d6 2264 	ldr.w	r2, [r6, #612]	; 0x264
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80070a0:	435f      	muls	r7, r3
  len = MIN(len, MSC_MEDIA_PACKET);
 80070a2:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
                              hmsc->bot_data,
 80070a6:	f106 080c 	add.w	r8, r6, #12
  len = MIN(len, MSC_MEDIA_PACKET);
 80070aa:	bf28      	it	cs
 80070ac:	f44f 7700 	movcs.w	r7, #512	; 0x200
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 80070b0:	4641      	mov	r1, r8
                              (len / hmsc->scsi_blk_size)) < 0)
 80070b2:	fbb7 f3f3 	udiv	r3, r7, r3
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 80070b6:	4620      	mov	r0, r4
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	47c8      	blx	r9
 80070bc:	2800      	cmp	r0, #0
 80070be:	da01      	bge.n	80070c4 <SCSI_ProcessCmd+0x36c>
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 80070c0:	2104      	movs	r1, #4
 80070c2:	e6f1      	b.n	8006ea8 <SCSI_ProcessCmd+0x150>
    return -1;
  }

  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 80070c4:	b2bb      	uxth	r3, r7
 80070c6:	4642      	mov	r2, r8
 80070c8:	2181      	movs	r1, #129	; 0x81
 80070ca:	4628      	mov	r0, r5
 80070cc:	f000 fe60 	bl	8007d90 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80070d0:	f8b6 425e 	ldrh.w	r4, [r6, #606]	; 0x25e
 80070d4:	f8d6 2264 	ldr.w	r2, [r6, #612]	; 0x264
 80070d8:	fbb7 f3f4 	udiv	r3, r7, r4
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80070dc:	f8d6 4268 	ldr.w	r4, [r6, #616]	; 0x268
  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80070e0:	441a      	add	r2, r3
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80070e2:	1ae4      	subs	r4, r4, r3

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 80070e4:	f8d6 3234 	ldr.w	r3, [r6, #564]	; 0x234
  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80070e8:	f8c6 2264 	str.w	r2, [r6, #612]	; 0x264
  hmsc->csw.dDataResidue -= len;
 80070ec:	1bdf      	subs	r7, r3, r7
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80070ee:	f8c6 4268 	str.w	r4, [r6, #616]	; 0x268
  hmsc->csw.dDataResidue -= len;
 80070f2:	f8c6 7234 	str.w	r7, [r6, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 80070f6:	2c00      	cmp	r4, #0
 80070f8:	f47f aee7 	bne.w	8006eca <SCSI_ProcessCmd+0x172>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 80070fc:	2303      	movs	r3, #3
 80070fe:	7233      	strb	r3, [r6, #8]
 8007100:	e6e6      	b.n	8006ed0 <SCSI_ProcessCmd+0x178>
*/

static int8_t SCSI_ProcessWrite (USBD_HandleTypeDef  *pdev, uint8_t lun)
{
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007102:	f8b6 325e 	ldrh.w	r3, [r6, #606]	; 0x25e
 8007106:	f8d6 7268 	ldr.w	r7, [r6, #616]	; 0x268

  len = MIN(len, MSC_MEDIA_PACKET);

  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800710a:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800710e:	435f      	muls	r7, r3
  len = MIN(len, MSC_MEDIA_PACKET);
 8007110:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8007114:	f106 080c 	add.w	r8, r6, #12
  len = MIN(len, MSC_MEDIA_PACKET);
 8007118:	bf28      	it	cs
 800711a:	f44f 7700 	movcs.w	r7, #512	; 0x200
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800711e:	f8d2 9014 	ldr.w	r9, [r2, #20]
                             hmsc->scsi_blk_addr,
                             (len / hmsc->scsi_blk_size)) < 0)
 8007122:	fbb7 f3f3 	udiv	r3, r7, r3
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8007126:	f8d6 2264 	ldr.w	r2, [r6, #612]	; 0x264
 800712a:	b29b      	uxth	r3, r3
 800712c:	4641      	mov	r1, r8
 800712e:	4620      	mov	r0, r4
 8007130:	47c8      	blx	r9
 8007132:	2800      	cmp	r0, #0
 8007134:	dbc4      	blt.n	80070c0 <SCSI_ProcessCmd+0x368>
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);

    return -1;
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8007136:	f8d6 2264 	ldr.w	r2, [r6, #612]	; 0x264
 800713a:	f8b6 125e 	ldrh.w	r1, [r6, #606]	; 0x25e
 800713e:	fbb7 f0f1 	udiv	r0, r7, r1
 8007142:	4402      	add	r2, r0
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8007144:	f8d6 3268 	ldr.w	r3, [r6, #616]	; 0x268
  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8007148:	f8c6 2264 	str.w	r2, [r6, #612]	; 0x264

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800714c:	f8d6 2234 	ldr.w	r2, [r6, #564]	; 0x234
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8007150:	1a1b      	subs	r3, r3, r0
  hmsc->csw.dDataResidue -= len;
 8007152:	1bd7      	subs	r7, r2, r7
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8007154:	f8c6 3268 	str.w	r3, [r6, #616]	; 0x268
  hmsc->csw.dDataResidue -= len;
 8007158:	f8c6 7234 	str.w	r7, [r6, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 800715c:	b923      	cbnz	r3, 8007168 <SCSI_ProcessCmd+0x410>
  {
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 800715e:	2100      	movs	r1, #0
 8007160:	4628      	mov	r0, r5
 8007162:	f7ff fd29 	bl	8006bb8 <MSC_BOT_SendCSW>
 8007166:	e6b0      	b.n	8006eca <SCSI_ProcessCmd+0x172>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8007168:	434b      	muls	r3, r1
 800716a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800716e:	bf28      	it	cs
 8007170:	f44f 7300 	movcs.w	r3, #512	; 0x200
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8007174:	b29b      	uxth	r3, r3
 8007176:	4642      	mov	r2, r8
 8007178:	2101      	movs	r1, #1
 800717a:	4628      	mov	r0, r5
 800717c:	f000 fe16 	bl	8007dac <USBD_LL_PrepareReceive>
 8007180:	e6a3      	b.n	8006eca <SCSI_ProcessCmd+0x172>
  if ((params[1]& 0x02U) == 0x02U)
 8007182:	7854      	ldrb	r4, [r2, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 8007184:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290
  if ((params[1]& 0x02U) == 0x02U)
 8007188:	f014 0402 	ands.w	r4, r4, #2
 800718c:	f47f ae8b 	bne.w	8006ea6 <SCSI_ProcessCmd+0x14e>
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8007190:	f8d3 1268 	ldr.w	r1, [r3, #616]	; 0x268
 8007194:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8007198:	440a      	add	r2, r1
 800719a:	f8d3 1260 	ldr.w	r1, [r3, #608]	; 0x260
 800719e:	428a      	cmp	r2, r1
 80071a0:	f67f adfc 	bls.w	8006d9c <SCSI_ProcessCmd+0x44>
 80071a4:	e67f      	b.n	8006ea6 <SCSI_ProcessCmd+0x14e>
 80071a6:	bf00      	nop
 80071a8:	080122b7 	.word	0x080122b7
 80071ac:	080122b0 	.word	0x080122b0
 80071b0:	080122a8 	.word	0x080122a8

080071b4 <SCSI_SenseCode>:
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 80071b4:	f8d0 1290 	ldr.w	r1, [r0, #656]	; 0x290
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 80071b8:	f891 325d 	ldrb.w	r3, [r1, #605]	; 0x25d
 80071bc:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
  hmsc->scsi_sense_tail++;
 80071c0:	3301      	adds	r3, #1
 80071c2:	b2db      	uxtb	r3, r3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 80071c4:	f880 223c 	strb.w	r2, [r0, #572]	; 0x23c
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 80071c8:	2b04      	cmp	r3, #4
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 80071ca:	f04f 0200 	mov.w	r2, #0
 80071ce:	f880 2240 	strb.w	r2, [r0, #576]	; 0x240
  hmsc->scsi_sense_tail++;
 80071d2:	bf14      	ite	ne
 80071d4:	f881 325d 	strbne.w	r3, [r1, #605]	; 0x25d
    hmsc->scsi_sense_tail = 0U;
 80071d8:	f881 225d 	strbeq.w	r2, [r1, #605]	; 0x25d
 80071dc:	4770      	bx	lr

080071de <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80071de:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80071e0:	b180      	cbz	r0, 8007204 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80071e2:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80071e6:	b113      	cbz	r3, 80071ee <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 80071e8:	2300      	movs	r3, #0
 80071ea:	f8c0 328c 	str.w	r3, [r0, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80071ee:	b109      	cbz	r1, 80071f4 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 80071f0:	f8c0 1288 	str.w	r1, [r0, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80071f4:	2301      	movs	r3, #1
 80071f6:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  pdev->id = id;
 80071fa:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80071fc:	f000 fd22 	bl	8007c44 <USBD_LL_Init>

  return USBD_OK;
 8007200:	2000      	movs	r0, #0
 8007202:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8007204:	2002      	movs	r0, #2
}
 8007206:	bd08      	pop	{r3, pc}

08007208 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8007208:	b119      	cbz	r1, 8007212 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800720a:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
    status = USBD_OK;
 800720e:	2000      	movs	r0, #0
 8007210:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007212:	2002      	movs	r0, #2
  }

  return status;
}
 8007214:	4770      	bx	lr

08007216 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8007216:	b508      	push	{r3, lr}

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007218:	f000 fd42 	bl	8007ca0 <USBD_LL_Start>

  return USBD_OK;
}
 800721c:	2000      	movs	r0, #0
 800721e:	bd08      	pop	{r3, pc}

08007220 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007220:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;

  if(pdev->pClass != NULL)
 8007222:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8007226:	b90b      	cbnz	r3, 800722c <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8007228:	2002      	movs	r0, #2
 800722a:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4798      	blx	r3
 8007230:	2800      	cmp	r0, #0
 8007232:	d1f9      	bne.n	8007228 <USBD_SetClassConfig+0x8>
      ret = USBD_OK;
    }
  }

  return ret;
}
 8007234:	bd08      	pop	{r3, pc}

08007236 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007236:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007238:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	4798      	blx	r3
  return USBD_OK;
}
 8007240:	2000      	movs	r0, #0
 8007242:	bd08      	pop	{r3, pc}

08007244 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007244:	b538      	push	{r3, r4, r5, lr}
 8007246:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007248:	f500 7520 	add.w	r5, r0, #640	; 0x280
 800724c:	4628      	mov	r0, r5
 800724e:	f000 faec 	bl	800782a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007252:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8007254:	f894 1280 	ldrb.w	r1, [r4, #640]	; 0x280
  pdev->ep0_state = USBD_EP0_SETUP;
 8007258:	f8c4 326c 	str.w	r3, [r4, #620]	; 0x26c
  pdev->ep0_data_len = pdev->request.wLength;
 800725c:	f8b4 3286 	ldrh.w	r3, [r4, #646]	; 0x286
 8007260:	f8c4 3270 	str.w	r3, [r4, #624]	; 0x270
  switch (pdev->request.bmRequest & 0x1FU)
 8007264:	f001 031f 	and.w	r3, r1, #31
 8007268:	2b01      	cmp	r3, #1
 800726a:	d00e      	beq.n	800728a <USBD_LL_SetupStage+0x46>
 800726c:	d307      	bcc.n	800727e <USBD_LL_SetupStage+0x3a>
 800726e:	2b02      	cmp	r3, #2
 8007270:	d010      	beq.n	8007294 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
    break;

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007272:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8007276:	4620      	mov	r0, r4
 8007278:	f000 fd4c 	bl	8007d14 <USBD_LL_StallEP>
    break;
 800727c:	e003      	b.n	8007286 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 800727e:	4629      	mov	r1, r5
 8007280:	4620      	mov	r0, r4
 8007282:	f000 f903 	bl	800748c <USBD_StdDevReq>
  }

  return USBD_OK;
}
 8007286:	2000      	movs	r0, #0
 8007288:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 800728a:	4629      	mov	r1, r5
 800728c:	4620      	mov	r0, r4
 800728e:	f000 fa1f 	bl	80076d0 <USBD_StdItfReq>
    break;
 8007292:	e7f8      	b.n	8007286 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);
 8007294:	4629      	mov	r1, r5
 8007296:	4620      	mov	r0, r4
 8007298:	f000 fa3f 	bl	800771a <USBD_StdEPReq>
    break;
 800729c:	e7f3      	b.n	8007286 <USBD_LL_SetupStage+0x42>

0800729e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800729e:	b570      	push	{r4, r5, r6, lr}
 80072a0:	4605      	mov	r5, r0
 80072a2:	4616      	mov	r6, r2
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 80072a4:	bb49      	cbnz	r1, 80072fa <USBD_LL_DataOutStage+0x5c>
  {
    pep = &pdev->ep_out[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80072a6:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 80072aa:	2b03      	cmp	r3, #3
 80072ac:	d11e      	bne.n	80072ec <USBD_LL_DataOutStage+0x4e>
    {
      if(pep->rem_length > pep->maxpacket)
 80072ae:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 80072b2:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d90b      	bls.n	80072d2 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 80072ba:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx (pdev,
 80072bc:	429a      	cmp	r2, r3
        pep->rem_length -=  pep->maxpacket;
 80072be:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
        USBD_CtlContinueRx (pdev,
 80072c2:	bf8c      	ite	hi
 80072c4:	b29a      	uxthhi	r2, r3
 80072c6:	b292      	uxthls	r2, r2
 80072c8:	4631      	mov	r1, r6
 80072ca:	f000 fafe 	bl	80078ca <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80072ce:	2000      	movs	r0, #0
    pdev->pClass->DataOut(pdev, epnum);
 80072d0:	bd70      	pop	{r4, r5, r6, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80072d2:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80072d6:	691b      	ldr	r3, [r3, #16]
 80072d8:	b123      	cbz	r3, 80072e4 <USBD_LL_DataOutStage+0x46>
 80072da:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80072de:	2a03      	cmp	r2, #3
 80072e0:	d100      	bne.n	80072e4 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 80072e2:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80072e4:	4628      	mov	r0, r5
 80072e6:	f000 faf8 	bl	80078da <USBD_CtlSendStatus>
 80072ea:	e7f0      	b.n	80072ce <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80072ec:	2b05      	cmp	r3, #5
 80072ee:	d1ee      	bne.n	80072ce <USBD_LL_DataOutStage+0x30>
        pdev->ep0_state = USBD_EP0_IDLE;
 80072f0:	f8c5 126c 	str.w	r1, [r5, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 80072f4:	f000 fd0e 	bl	8007d14 <USBD_LL_StallEP>
 80072f8:	e7e9      	b.n	80072ce <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL) &&
 80072fa:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80072fe:	699b      	ldr	r3, [r3, #24]
 8007300:	b12b      	cbz	r3, 800730e <USBD_LL_DataOutStage+0x70>
 8007302:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8007306:	2a03      	cmp	r2, #3
 8007308:	d101      	bne.n	800730e <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 800730a:	4798      	blx	r3
 800730c:	e7df      	b.n	80072ce <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 800730e:	2002      	movs	r0, #2
}
 8007310:	bd70      	pop	{r4, r5, r6, pc}

08007312 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8007312:	b570      	push	{r4, r5, r6, lr}
 8007314:	4613      	mov	r3, r2
 8007316:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8007318:	460e      	mov	r6, r1
 800731a:	2900      	cmp	r1, #0
 800731c:	d148      	bne.n	80073b0 <USBD_LL_DataInStage+0x9e>
  {
    pep = &pdev->ep_in[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800731e:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8007322:	2a02      	cmp	r2, #2
 8007324:	d13d      	bne.n	80073a2 <USBD_LL_DataInStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8007326:	6a05      	ldr	r5, [r0, #32]
 8007328:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800732a:	4295      	cmp	r5, r2
 800732c:	d914      	bls.n	8007358 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 800732e:	1aaa      	subs	r2, r5, r2
 8007330:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8007332:	4619      	mov	r1, r3
 8007334:	b292      	uxth	r2, r2
 8007336:	f000 fac0 	bl	80078ba <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800733a:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800733c:	461a      	mov	r2, r3
 800733e:	4619      	mov	r1, r3
 8007340:	4620      	mov	r0, r4
 8007342:	f000 fd33 	bl	8007dac <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007346:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 800734a:	2b01      	cmp	r3, #1
 800734c:	f04f 0000 	mov.w	r0, #0
 8007350:	d13a      	bne.n	80073c8 <USBD_LL_DataInStage+0xb6>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8007352:	f884 0278 	strb.w	r0, [r4, #632]	; 0x278
 8007356:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0U) &&
 8007358:	69c3      	ldr	r3, [r0, #28]
 800735a:	fbb3 f5f2 	udiv	r5, r3, r2
 800735e:	fb02 3515 	mls	r5, r2, r5, r3
 8007362:	b965      	cbnz	r5, 800737e <USBD_LL_DataInStage+0x6c>
 8007364:	429a      	cmp	r2, r3
 8007366:	d80a      	bhi.n	800737e <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 8007368:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 800736c:	4293      	cmp	r3, r2
 800736e:	d206      	bcs.n	800737e <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007370:	462a      	mov	r2, r5
 8007372:	f000 faa2 	bl	80078ba <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007376:	f8c4 5270 	str.w	r5, [r4, #624]	; 0x270
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800737a:	462b      	mov	r3, r5
 800737c:	e7de      	b.n	800733c <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800737e:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8007382:	68db      	ldr	r3, [r3, #12]
 8007384:	b12b      	cbz	r3, 8007392 <USBD_LL_DataInStage+0x80>
 8007386:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
 800738a:	2a03      	cmp	r2, #3
 800738c:	d101      	bne.n	8007392 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev);
 800738e:	4620      	mov	r0, r4
 8007390:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8007392:	2180      	movs	r1, #128	; 0x80
 8007394:	4620      	mov	r0, r4
 8007396:	f000 fcbd 	bl	8007d14 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800739a:	4620      	mov	r0, r4
 800739c:	f000 faa8 	bl	80078f0 <USBD_CtlReceiveStatus>
 80073a0:	e7d1      	b.n	8007346 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80073a2:	f032 0304 	bics.w	r3, r2, #4
 80073a6:	d1ce      	bne.n	8007346 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 80073a8:	2180      	movs	r1, #128	; 0x80
 80073aa:	f000 fcb3 	bl	8007d14 <USBD_LL_StallEP>
 80073ae:	e7ca      	b.n	8007346 <USBD_LL_DataInStage+0x34>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 80073b0:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80073b4:	695b      	ldr	r3, [r3, #20]
 80073b6:	b133      	cbz	r3, 80073c6 <USBD_LL_DataInStage+0xb4>
 80073b8:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80073bc:	2a03      	cmp	r2, #3
 80073be:	d102      	bne.n	80073c6 <USBD_LL_DataInStage+0xb4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum);
 80073c0:	4798      	blx	r3
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80073c2:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 80073c4:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 80073c6:	2002      	movs	r0, #2
}
 80073c8:	bd70      	pop	{r4, r5, r6, pc}

080073ca <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80073ca:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80073cc:	2200      	movs	r2, #0
{
 80073ce:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80073d0:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80073d2:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80073d4:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80073d6:	2340      	movs	r3, #64	; 0x40
 80073d8:	f000 fc70 	bl	8007cbc <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80073dc:	4633      	mov	r3, r6
 80073de:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80073e0:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80073e4:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80073e8:	2200      	movs	r2, #0
 80073ea:	4620      	mov	r0, r4
 80073ec:	f000 fc66 	bl	8007cbc <USBD_LL_OpenEP>
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config= 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 80073f0:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80073f4:	61a5      	str	r5, [r4, #24]
  pdev->ep0_state = USBD_EP0_IDLE;
 80073f6:	2100      	movs	r1, #0
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80073f8:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 80073fa:	f884 5274 	strb.w	r5, [r4, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 80073fe:	f8c4 126c 	str.w	r1, [r4, #620]	; 0x26c
  pdev->dev_config= 0U;
 8007402:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8007404:	f8c4 127c 	str.w	r1, [r4, #636]	; 0x27c
  if (pdev->pClassData)
 8007408:	b123      	cbz	r3, 8007414 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800740a:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800740e:	4620      	mov	r0, r4
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	4798      	blx	r3
  }

  return USBD_OK;
}
 8007414:	2000      	movs	r0, #0
 8007416:	bd70      	pop	{r4, r5, r6, pc}

08007418 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8007418:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 800741a:	2000      	movs	r0, #0
 800741c:	4770      	bx	lr

0800741e <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 800741e:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8007422:	f880 3275 	strb.w	r3, [r0, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007426:	2304      	movs	r3, #4
 8007428:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 800742c:	2000      	movs	r0, #0
 800742e:	4770      	bx	lr

08007430 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;
 8007430:	f890 3275 	ldrb.w	r3, [r0, #629]	; 0x275
 8007434:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 8007438:	2000      	movs	r0, #0
 800743a:	4770      	bx	lr

0800743c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800743c:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800743e:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8007442:	2a03      	cmp	r2, #3
 8007444:	d104      	bne.n	8007450 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8007446:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800744a:	69db      	ldr	r3, [r3, #28]
 800744c:	b103      	cbz	r3, 8007450 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 800744e:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8007450:	2000      	movs	r0, #0
 8007452:	bd08      	pop	{r3, pc}

08007454 <USBD_LL_IsoINIncomplete>:
 8007454:	2000      	movs	r0, #0
 8007456:	4770      	bx	lr

08007458 <USBD_LL_IsoOUTIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 8007458:	2000      	movs	r0, #0
 800745a:	4770      	bx	lr

0800745c <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 800745c:	2000      	movs	r0, #0
 800745e:	4770      	bx	lr

08007460 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8007460:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007462:	2201      	movs	r2, #1
 8007464:	f880 2274 	strb.w	r2, [r0, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007468:	f8d0 228c 	ldr.w	r2, [r0, #652]	; 0x28c
 800746c:	7901      	ldrb	r1, [r0, #4]
 800746e:	6852      	ldr	r2, [r2, #4]
 8007470:	4790      	blx	r2

  return USBD_OK;
}
 8007472:	2000      	movs	r0, #0
 8007474:	bd08      	pop	{r3, pc}

08007476 <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8007476:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80U);
 8007478:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 800747a:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 800747c:	f000 fc4a 	bl	8007d14 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8007480:	4620      	mov	r0, r4
 8007482:	2100      	movs	r1, #0
}
 8007484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 8007488:	f000 bc44 	b.w	8007d14 <USBD_LL_StallEP>

0800748c <USBD_StdDevReq>:
{
 800748c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800748e:	780b      	ldrb	r3, [r1, #0]
 8007490:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007494:	2b20      	cmp	r3, #32
{
 8007496:	4604      	mov	r4, r0
 8007498:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800749a:	d014      	beq.n	80074c6 <USBD_StdDevReq+0x3a>
 800749c:	2b40      	cmp	r3, #64	; 0x40
 800749e:	d012      	beq.n	80074c6 <USBD_StdDevReq+0x3a>
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	f040 8095 	bne.w	80075d0 <USBD_StdDevReq+0x144>
    switch (req->bRequest)
 80074a6:	784b      	ldrb	r3, [r1, #1]
 80074a8:	2b09      	cmp	r3, #9
 80074aa:	f200 8090 	bhi.w	80075ce <USBD_StdDevReq+0x142>
 80074ae:	e8df f013 	tbh	[pc, r3, lsl #1]
 80074b2:	00e7      	.short	0x00e7
 80074b4:	008e0101 	.word	0x008e0101
 80074b8:	008e00fa 	.word	0x008e00fa
 80074bc:	00130082 	.word	0x00130082
 80074c0:	00d2008e 	.word	0x00d2008e
 80074c4:	00a0      	.short	0x00a0
    pdev->pClass->Setup(pdev, req);
 80074c6:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 80074ca:	4629      	mov	r1, r5
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	4620      	mov	r0, r4
 80074d0:	4798      	blx	r3
}
 80074d2:	2000      	movs	r0, #0
 80074d4:	b003      	add	sp, #12
 80074d6:	bd30      	pop	{r4, r5, pc}
  switch (req->wValue >> 8)
 80074d8:	884b      	ldrh	r3, [r1, #2]
 80074da:	0a1a      	lsrs	r2, r3, #8
 80074dc:	3a01      	subs	r2, #1
 80074de:	2a0e      	cmp	r2, #14
 80074e0:	d875      	bhi.n	80075ce <USBD_StdDevReq+0x142>
 80074e2:	e8df f002 	tbb	[pc, r2]
 80074e6:	2824      	.short	0x2824
 80074e8:	55747435 	.word	0x55747435
 80074ec:	7474745e 	.word	0x7474745e
 80074f0:	74747474 	.word	0x74747474
 80074f4:	08          	.byte	0x08
 80074f5:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80074f6:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80074fa:	69db      	ldr	r3, [r3, #28]
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80074fc:	7c20      	ldrb	r0, [r4, #16]
 80074fe:	f10d 0106 	add.w	r1, sp, #6
 8007502:	4798      	blx	r3
  if((len != 0U) && (req->wLength != 0U))
 8007504:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8007508:	b152      	cbz	r2, 8007520 <USBD_StdDevReq+0x94>
 800750a:	88eb      	ldrh	r3, [r5, #6]
 800750c:	b143      	cbz	r3, 8007520 <USBD_StdDevReq+0x94>
    len = MIN(len, req->wLength);
 800750e:	429a      	cmp	r2, r3
 8007510:	bf28      	it	cs
 8007512:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, pbuf, len);
 8007514:	4601      	mov	r1, r0
 8007516:	4620      	mov	r0, r4
    len = MIN(len, req->wLength);
 8007518:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, pbuf, len);
 800751c:	f000 f9c0 	bl	80078a0 <USBD_CtlSendData>
  if(req->wLength == 0U)
 8007520:	88eb      	ldrh	r3, [r5, #6]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d1d5      	bne.n	80074d2 <USBD_StdDevReq+0x46>
    USBD_CtlSendStatus(pdev);
 8007526:	4620      	mov	r0, r4
 8007528:	f000 f9d7 	bl	80078da <USBD_CtlSendStatus>
 800752c:	e7d1      	b.n	80074d2 <USBD_StdDevReq+0x46>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800752e:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	e7e2      	b.n	80074fc <USBD_StdDevReq+0x70>
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8007536:	7c02      	ldrb	r2, [r0, #16]
 8007538:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800753c:	b932      	cbnz	r2, 800754c <USBD_StdDevReq+0xc0>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800753e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007540:	f10d 0006 	add.w	r0, sp, #6
 8007544:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007546:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007548:	7043      	strb	r3, [r0, #1]
 800754a:	e7db      	b.n	8007504 <USBD_StdDevReq+0x78>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800754c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800754e:	e7f7      	b.n	8007540 <USBD_StdDevReq+0xb4>
    switch ((uint8_t)(req->wValue))
 8007550:	b2db      	uxtb	r3, r3
 8007552:	2b05      	cmp	r3, #5
 8007554:	d83b      	bhi.n	80075ce <USBD_StdDevReq+0x142>
 8007556:	e8df f003 	tbb	[pc, r3]
 800755a:	0703      	.short	0x0703
 800755c:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007560:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	e7c9      	b.n	80074fc <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007568:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800756c:	689b      	ldr	r3, [r3, #8]
 800756e:	e7c5      	b.n	80074fc <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007570:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	e7c1      	b.n	80074fc <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007578:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800757c:	691b      	ldr	r3, [r3, #16]
 800757e:	e7bd      	b.n	80074fc <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007580:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8007584:	695b      	ldr	r3, [r3, #20]
 8007586:	e7b9      	b.n	80074fc <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007588:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800758c:	699b      	ldr	r3, [r3, #24]
 800758e:	e7b5      	b.n	80074fc <USBD_StdDevReq+0x70>
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8007590:	7c03      	ldrb	r3, [r0, #16]
 8007592:	b9e3      	cbnz	r3, 80075ce <USBD_StdDevReq+0x142>
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007594:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8007598:	f10d 0006 	add.w	r0, sp, #6
 800759c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800759e:	4798      	blx	r3
 80075a0:	e7b0      	b.n	8007504 <USBD_StdDevReq+0x78>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80075a2:	7c03      	ldrb	r3, [r0, #16]
 80075a4:	b99b      	cbnz	r3, 80075ce <USBD_StdDevReq+0x142>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80075a6:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80075aa:	f10d 0006 	add.w	r0, sp, #6
 80075ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075b0:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80075b2:	2307      	movs	r3, #7
 80075b4:	e7c8      	b.n	8007548 <USBD_StdDevReq+0xbc>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80075b6:	888b      	ldrh	r3, [r1, #4]
 80075b8:	b94b      	cbnz	r3, 80075ce <USBD_StdDevReq+0x142>
 80075ba:	88cb      	ldrh	r3, [r1, #6]
 80075bc:	b93b      	cbnz	r3, 80075ce <USBD_StdDevReq+0x142>
 80075be:	884d      	ldrh	r5, [r1, #2]
 80075c0:	2d7f      	cmp	r5, #127	; 0x7f
 80075c2:	d804      	bhi.n	80075ce <USBD_StdDevReq+0x142>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075c4:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80075c8:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80075ca:	b2e9      	uxtb	r1, r5
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075cc:	d103      	bne.n	80075d6 <USBD_StdDevReq+0x14a>
      USBD_CtlError(pdev, req);
 80075ce:	4620      	mov	r0, r4
    USBD_CtlError(pdev, req);
 80075d0:	f7ff ff51 	bl	8007476 <USBD_CtlError.constprop.1>
    break;
 80075d4:	e77d      	b.n	80074d2 <USBD_StdDevReq+0x46>
      pdev->dev_address = dev_addr;
 80075d6:	f880 1276 	strb.w	r1, [r0, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80075da:	f000 fbcb 	bl	8007d74 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80075de:	4620      	mov	r0, r4
 80075e0:	f000 f97b 	bl	80078da <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80075e4:	b11d      	cbz	r5, 80075ee <USBD_StdDevReq+0x162>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80075e6:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 80075e8:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 80075ec:	e771      	b.n	80074d2 <USBD_StdDevReq+0x46>
 80075ee:	2301      	movs	r3, #1
 80075f0:	e7fa      	b.n	80075e8 <USBD_StdDevReq+0x15c>
  cfgidx = (uint8_t)(req->wValue);
 80075f2:	7889      	ldrb	r1, [r1, #2]
 80075f4:	4d35      	ldr	r5, [pc, #212]	; (80076cc <USBD_StdDevReq+0x240>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80075f6:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 80075f8:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80075fa:	d8e8      	bhi.n	80075ce <USBD_StdDevReq+0x142>
    switch (pdev->dev_state)
 80075fc:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8007600:	2b02      	cmp	r3, #2
 8007602:	d008      	beq.n	8007616 <USBD_StdDevReq+0x18a>
 8007604:	2b03      	cmp	r3, #3
 8007606:	d014      	beq.n	8007632 <USBD_StdDevReq+0x1a6>
      USBD_CtlError(pdev, req);
 8007608:	f7ff ff35 	bl	8007476 <USBD_CtlError.constprop.1>
      USBD_ClrClassConfig(pdev, cfgidx);
 800760c:	7829      	ldrb	r1, [r5, #0]
 800760e:	4620      	mov	r0, r4
 8007610:	f7ff fe11 	bl	8007236 <USBD_ClrClassConfig>
 8007614:	e75d      	b.n	80074d2 <USBD_StdDevReq+0x46>
      if (cfgidx)
 8007616:	2900      	cmp	r1, #0
 8007618:	d085      	beq.n	8007526 <USBD_StdDevReq+0x9a>
        pdev->dev_config = cfgidx;
 800761a:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800761c:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 800761e:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007620:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007624:	4620      	mov	r0, r4
 8007626:	f7ff fdfb 	bl	8007220 <USBD_SetClassConfig>
 800762a:	2802      	cmp	r0, #2
 800762c:	f47f af7b 	bne.w	8007526 <USBD_StdDevReq+0x9a>
 8007630:	e7cd      	b.n	80075ce <USBD_StdDevReq+0x142>
      if (cfgidx == 0U)
 8007632:	b931      	cbnz	r1, 8007642 <USBD_StdDevReq+0x1b6>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007634:	2302      	movs	r3, #2
 8007636:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800763a:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800763c:	f7ff fdfb 	bl	8007236 <USBD_ClrClassConfig>
 8007640:	e771      	b.n	8007526 <USBD_StdDevReq+0x9a>
      else if (cfgidx != pdev->dev_config)
 8007642:	6841      	ldr	r1, [r0, #4]
 8007644:	2901      	cmp	r1, #1
 8007646:	f43f af6e 	beq.w	8007526 <USBD_StdDevReq+0x9a>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800764a:	b2c9      	uxtb	r1, r1
 800764c:	f7ff fdf3 	bl	8007236 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007650:	7829      	ldrb	r1, [r5, #0]
 8007652:	6061      	str	r1, [r4, #4]
 8007654:	e7e6      	b.n	8007624 <USBD_StdDevReq+0x198>
  if (req->wLength != 1U)
 8007656:	88ca      	ldrh	r2, [r1, #6]
 8007658:	2a01      	cmp	r2, #1
 800765a:	d1b8      	bne.n	80075ce <USBD_StdDevReq+0x142>
    switch (pdev->dev_state)
 800765c:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8007660:	2b00      	cmp	r3, #0
 8007662:	d0b4      	beq.n	80075ce <USBD_StdDevReq+0x142>
 8007664:	2b02      	cmp	r3, #2
 8007666:	d903      	bls.n	8007670 <USBD_StdDevReq+0x1e4>
 8007668:	2b03      	cmp	r3, #3
 800766a:	d1b0      	bne.n	80075ce <USBD_StdDevReq+0x142>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800766c:	1d01      	adds	r1, r0, #4
 800766e:	e003      	b.n	8007678 <USBD_StdDevReq+0x1ec>
      pdev->dev_default_config = 0U;
 8007670:	4601      	mov	r1, r0
 8007672:	2300      	movs	r3, #0
 8007674:	f841 3f08 	str.w	r3, [r1, #8]!
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007678:	4620      	mov	r0, r4
 800767a:	f000 f911 	bl	80078a0 <USBD_CtlSendData>
 800767e:	e728      	b.n	80074d2 <USBD_StdDevReq+0x46>
  switch (pdev->dev_state)
 8007680:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8007684:	3b01      	subs	r3, #1
 8007686:	2b02      	cmp	r3, #2
 8007688:	d8a1      	bhi.n	80075ce <USBD_StdDevReq+0x142>
    if(req->wLength != 0x2U)
 800768a:	88cb      	ldrh	r3, [r1, #6]
 800768c:	2b02      	cmp	r3, #2
 800768e:	d19e      	bne.n	80075ce <USBD_StdDevReq+0x142>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007690:	2301      	movs	r3, #1
 8007692:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup)
 8007694:	f8d0 327c 	ldr.w	r3, [r0, #636]	; 0x27c
 8007698:	b10b      	cbz	r3, 800769e <USBD_StdDevReq+0x212>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800769a:	2303      	movs	r3, #3
 800769c:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800769e:	2202      	movs	r2, #2
 80076a0:	f104 010c 	add.w	r1, r4, #12
 80076a4:	e7e8      	b.n	8007678 <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80076a6:	884b      	ldrh	r3, [r1, #2]
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	f47f af12 	bne.w	80074d2 <USBD_StdDevReq+0x46>
    pdev->dev_remote_wakeup = 1U;
 80076ae:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
 80076b2:	e738      	b.n	8007526 <USBD_StdDevReq+0x9a>
  switch (pdev->dev_state)
 80076b4:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80076b8:	3b01      	subs	r3, #1
 80076ba:	2b02      	cmp	r3, #2
 80076bc:	d887      	bhi.n	80075ce <USBD_StdDevReq+0x142>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80076be:	884b      	ldrh	r3, [r1, #2]
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	f47f af06 	bne.w	80074d2 <USBD_StdDevReq+0x46>
      pdev->dev_remote_wakeup = 0U;
 80076c6:	2300      	movs	r3, #0
 80076c8:	e7f1      	b.n	80076ae <USBD_StdDevReq+0x222>
 80076ca:	bf00      	nop
 80076cc:	20003f64 	.word	0x20003f64

080076d0 <USBD_StdItfReq>:
{
 80076d0:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076d2:	780b      	ldrb	r3, [r1, #0]
 80076d4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80076d8:	2b20      	cmp	r3, #32
{
 80076da:	4604      	mov	r4, r0
 80076dc:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076de:	d002      	beq.n	80076e6 <USBD_StdItfReq+0x16>
 80076e0:	2b40      	cmp	r3, #64	; 0x40
 80076e2:	d000      	beq.n	80076e6 <USBD_StdItfReq+0x16>
 80076e4:	b9b3      	cbnz	r3, 8007714 <USBD_StdItfReq+0x44>
    switch (pdev->dev_state)
 80076e6:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 80076ea:	3b01      	subs	r3, #1
 80076ec:	2b02      	cmp	r3, #2
 80076ee:	d810      	bhi.n	8007712 <USBD_StdItfReq+0x42>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80076f0:	792b      	ldrb	r3, [r5, #4]
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d80d      	bhi.n	8007712 <USBD_StdItfReq+0x42>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80076f6:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 80076fa:	4629      	mov	r1, r5
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	4620      	mov	r0, r4
 8007700:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 8007702:	88eb      	ldrh	r3, [r5, #6]
 8007704:	b91b      	cbnz	r3, 800770e <USBD_StdItfReq+0x3e>
 8007706:	b910      	cbnz	r0, 800770e <USBD_StdItfReq+0x3e>
          USBD_CtlSendStatus(pdev);
 8007708:	4620      	mov	r0, r4
 800770a:	f000 f8e6 	bl	80078da <USBD_CtlSendStatus>
}
 800770e:	2000      	movs	r0, #0
 8007710:	bd38      	pop	{r3, r4, r5, pc}
      USBD_CtlError(pdev, req);
 8007712:	4620      	mov	r0, r4
    USBD_CtlError(pdev, req);
 8007714:	f7ff feaf 	bl	8007476 <USBD_CtlError.constprop.1>
    break;
 8007718:	e7f9      	b.n	800770e <USBD_StdItfReq+0x3e>

0800771a <USBD_StdEPReq>:
{
 800771a:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800771c:	780a      	ldrb	r2, [r1, #0]
 800771e:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8007722:	2a20      	cmp	r2, #32
{
 8007724:	4604      	mov	r4, r0
 8007726:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007728:	d013      	beq.n	8007752 <USBD_StdEPReq+0x38>
 800772a:	2a40      	cmp	r2, #64	; 0x40
 800772c:	d011      	beq.n	8007752 <USBD_StdEPReq+0x38>
 800772e:	b96a      	cbnz	r2, 800774c <USBD_StdEPReq+0x32>
    switch (req->bRequest)
 8007730:	785d      	ldrb	r5, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8007732:	888a      	ldrh	r2, [r1, #4]
    switch (req->bRequest)
 8007734:	2d01      	cmp	r5, #1
  ep_addr  = LOBYTE(req->wIndex);
 8007736:	b2d1      	uxtb	r1, r2
    switch (req->bRequest)
 8007738:	d01f      	beq.n	800777a <USBD_StdEPReq+0x60>
 800773a:	d335      	bcc.n	80077a8 <USBD_StdEPReq+0x8e>
 800773c:	2d03      	cmp	r5, #3
 800773e:	d105      	bne.n	800774c <USBD_StdEPReq+0x32>
      switch (pdev->dev_state)
 8007740:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8007744:	2a02      	cmp	r2, #2
 8007746:	d026      	beq.n	8007796 <USBD_StdEPReq+0x7c>
 8007748:	2a03      	cmp	r2, #3
 800774a:	d00a      	beq.n	8007762 <USBD_StdEPReq+0x48>
    USBD_CtlError(pdev, req);
 800774c:	f7ff fe93 	bl	8007476 <USBD_CtlError.constprop.1>
    break;
 8007750:	e005      	b.n	800775e <USBD_StdEPReq+0x44>
    pdev->pClass->Setup (pdev, req);
 8007752:	f8d4 228c 	ldr.w	r2, [r4, #652]	; 0x28c
 8007756:	4619      	mov	r1, r3
 8007758:	6892      	ldr	r2, [r2, #8]
 800775a:	4620      	mov	r0, r4
 800775c:	4790      	blx	r2
}
 800775e:	2000      	movs	r0, #0
 8007760:	bd38      	pop	{r3, r4, r5, pc}
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007762:	885a      	ldrh	r2, [r3, #2]
 8007764:	b92a      	cbnz	r2, 8007772 <USBD_StdEPReq+0x58>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007766:	064a      	lsls	r2, r1, #25
 8007768:	d003      	beq.n	8007772 <USBD_StdEPReq+0x58>
 800776a:	88db      	ldrh	r3, [r3, #6]
 800776c:	b90b      	cbnz	r3, 8007772 <USBD_StdEPReq+0x58>
            USBD_LL_StallEP(pdev, ep_addr);
 800776e:	f000 fad1 	bl	8007d14 <USBD_LL_StallEP>
        USBD_CtlSendStatus(pdev);
 8007772:	4620      	mov	r0, r4
 8007774:	f000 f8b1 	bl	80078da <USBD_CtlSendStatus>
        break;
 8007778:	e7f1      	b.n	800775e <USBD_StdEPReq+0x44>
      switch (pdev->dev_state)
 800777a:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800777e:	2a02      	cmp	r2, #2
 8007780:	d009      	beq.n	8007796 <USBD_StdEPReq+0x7c>
 8007782:	2a03      	cmp	r2, #3
 8007784:	d1e2      	bne.n	800774c <USBD_StdEPReq+0x32>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007786:	885b      	ldrh	r3, [r3, #2]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d1e8      	bne.n	800775e <USBD_StdEPReq+0x44>
          if ((ep_addr & 0x7FU) != 0x00U)
 800778c:	064d      	lsls	r5, r1, #25
 800778e:	d0f0      	beq.n	8007772 <USBD_StdEPReq+0x58>
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8007790:	f000 face 	bl	8007d30 <USBD_LL_ClearStallEP>
 8007794:	e7ed      	b.n	8007772 <USBD_StdEPReq+0x58>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007796:	064b      	lsls	r3, r1, #25
 8007798:	d017      	beq.n	80077ca <USBD_StdEPReq+0xb0>
          USBD_LL_StallEP(pdev, ep_addr);
 800779a:	f000 fabb 	bl	8007d14 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800779e:	2180      	movs	r1, #128	; 0x80
 80077a0:	4620      	mov	r0, r4
 80077a2:	f000 fab7 	bl	8007d14 <USBD_LL_StallEP>
 80077a6:	e7da      	b.n	800775e <USBD_StdEPReq+0x44>
      switch (pdev->dev_state)
 80077a8:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80077ac:	2b02      	cmp	r3, #2
 80077ae:	d00e      	beq.n	80077ce <USBD_StdEPReq+0xb4>
 80077b0:	2b03      	cmp	r3, #3
 80077b2:	d1cb      	bne.n	800774c <USBD_StdEPReq+0x32>
        if((ep_addr & 0x80U) == 0x80U)
 80077b4:	f012 0f80 	tst.w	r2, #128	; 0x80
 80077b8:	f04f 0314 	mov.w	r3, #20
 80077bc:	f001 020f 	and.w	r2, r1, #15
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80077c0:	fb03 0202 	mla	r2, r3, r2, r0
        if((ep_addr & 0x80U) == 0x80U)
 80077c4:	d012      	beq.n	80077ec <USBD_StdEPReq+0xd2>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80077c6:	6992      	ldr	r2, [r2, #24]
 80077c8:	b9da      	cbnz	r2, 8007802 <USBD_StdEPReq+0xe8>
          USBD_CtlError(pdev, req);
 80077ca:	4620      	mov	r0, r4
 80077cc:	e7be      	b.n	800774c <USBD_StdEPReq+0x32>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80077ce:	0649      	lsls	r1, r1, #25
 80077d0:	d1fb      	bne.n	80077ca <USBD_StdEPReq+0xb0>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80077d2:	0613      	lsls	r3, r2, #24
 80077d4:	bf4c      	ite	mi
 80077d6:	f100 0114 	addmi.w	r1, r0, #20
 80077da:	f500 71a0 	addpl.w	r1, r0, #320	; 0x140
          pep->status = 0x0000U;
 80077de:	2300      	movs	r3, #0
 80077e0:	600b      	str	r3, [r1, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80077e2:	2202      	movs	r2, #2
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80077e4:	4620      	mov	r0, r4
 80077e6:	f000 f85b 	bl	80078a0 <USBD_CtlSendData>
          break;
 80077ea:	e7b8      	b.n	800775e <USBD_StdEPReq+0x44>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80077ec:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
 80077f0:	2a00      	cmp	r2, #0
 80077f2:	d0ea      	beq.n	80077ca <USBD_StdEPReq+0xb0>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80077f4:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80077f8:	fb03 0505 	mla	r5, r3, r5, r0
 80077fc:	f505 75a0 	add.w	r5, r5, #320	; 0x140
 8007800:	e004      	b.n	800780c <USBD_StdEPReq+0xf2>
 8007802:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8007806:	fb05 3503 	mla	r5, r5, r3, r3
 800780a:	4405      	add	r5, r0
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800780c:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 8007810:	d103      	bne.n	800781a <USBD_StdEPReq+0x100>
            pep->status = 0x0001U;
 8007812:	602b      	str	r3, [r5, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007814:	2202      	movs	r2, #2
 8007816:	4629      	mov	r1, r5
 8007818:	e7e4      	b.n	80077e4 <USBD_StdEPReq+0xca>
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800781a:	4620      	mov	r0, r4
 800781c:	f000 fa96 	bl	8007d4c <USBD_LL_IsStallEP>
 8007820:	b108      	cbz	r0, 8007826 <USBD_StdEPReq+0x10c>
            pep->status = 0x0001U;
 8007822:	2301      	movs	r3, #1
 8007824:	e7f5      	b.n	8007812 <USBD_StdEPReq+0xf8>
            pep->status = 0x0000U;
 8007826:	6028      	str	r0, [r5, #0]
 8007828:	e7f4      	b.n	8007814 <USBD_StdEPReq+0xfa>

0800782a <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 800782a:	780b      	ldrb	r3, [r1, #0]
 800782c:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800782e:	784b      	ldrb	r3, [r1, #1]
 8007830:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8007832:	78ca      	ldrb	r2, [r1, #3]
 8007834:	788b      	ldrb	r3, [r1, #2]
 8007836:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800783a:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800783c:	794a      	ldrb	r2, [r1, #5]
 800783e:	790b      	ldrb	r3, [r1, #4]
 8007840:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8007844:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8007846:	79ca      	ldrb	r2, [r1, #7]
 8007848:	798b      	ldrb	r3, [r1, #6]
 800784a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800784e:	80c3      	strh	r3, [r0, #6]
 8007850:	4770      	bx	lr

08007852 <USBD_CtlError>:
{
 8007852:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev , 0x80U);
 8007854:	2180      	movs	r1, #128	; 0x80
{
 8007856:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 8007858:	f000 fa5c 	bl	8007d14 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800785c:	4620      	mov	r0, r4
 800785e:	2100      	movs	r1, #0
}
 8007860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 8007864:	f000 ba56 	b.w	8007d14 <USBD_LL_StallEP>

08007868 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007868:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 800786a:	b188      	cbz	r0, 8007890 <USBD_GetString+0x28>
 800786c:	4605      	mov	r5, r0
 800786e:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0U;

    while (*buf != '\0')
 8007870:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007874:	b2db      	uxtb	r3, r3
 8007876:	2c00      	cmp	r4, #0
 8007878:	d1f9      	bne.n	800786e <USBD_GetString+0x6>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800787a:	3301      	adds	r3, #1
 800787c:	005b      	lsls	r3, r3, #1
 800787e:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007880:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007882:	2303      	movs	r3, #3
 8007884:	704b      	strb	r3, [r1, #1]
 8007886:	3801      	subs	r0, #1
 8007888:	2302      	movs	r3, #2
    while (*desc != '\0')
 800788a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800788e:	b905      	cbnz	r5, 8007892 <USBD_GetString+0x2a>
 8007890:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8007892:	1c5a      	adds	r2, r3, #1
 8007894:	b2d2      	uxtb	r2, r2
 8007896:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0U;
 8007898:	3302      	adds	r3, #2
 800789a:	b2db      	uxtb	r3, r3
 800789c:	548c      	strb	r4, [r1, r2]
 800789e:	e7f4      	b.n	800788a <USBD_GetString+0x22>

080078a0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 80078a0:	b510      	push	{r4, lr}
 80078a2:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80078a4:	2202      	movs	r2, #2
 80078a6:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 80078aa:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80078ac:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 80078ae:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80078b0:	2100      	movs	r1, #0
 80078b2:	f000 fa6d 	bl	8007d90 <USBD_LL_Transmit>

  return USBD_OK;
}
 80078b6:	2000      	movs	r0, #0
 80078b8:	bd10      	pop	{r4, pc}

080078ba <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 80078ba:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80078bc:	4613      	mov	r3, r2
 80078be:	460a      	mov	r2, r1
 80078c0:	2100      	movs	r1, #0
 80078c2:	f000 fa65 	bl	8007d90 <USBD_LL_Transmit>

  return USBD_OK;
}
 80078c6:	2000      	movs	r0, #0
 80078c8:	bd08      	pop	{r3, pc}

080078ca <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 80078ca:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80078cc:	4613      	mov	r3, r2
 80078ce:	460a      	mov	r2, r1
 80078d0:	2100      	movs	r1, #0
 80078d2:	f000 fa6b 	bl	8007dac <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80078d6:	2000      	movs	r0, #0
 80078d8:	bd08      	pop	{r3, pc}

080078da <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 80078da:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80078dc:	2304      	movs	r3, #4
 80078de:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80078e2:	2300      	movs	r3, #0
 80078e4:	461a      	mov	r2, r3
 80078e6:	4619      	mov	r1, r3
 80078e8:	f000 fa52 	bl	8007d90 <USBD_LL_Transmit>

  return USBD_OK;
}
 80078ec:	2000      	movs	r0, #0
 80078ee:	bd08      	pop	{r3, pc}

080078f0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80078f0:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80078f2:	2305      	movs	r3, #5
 80078f4:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80078f8:	2300      	movs	r3, #0
 80078fa:	461a      	mov	r2, r3
 80078fc:	4619      	mov	r1, r3
 80078fe:	f000 fa55 	bl	8007dac <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8007902:	2000      	movs	r0, #0
 8007904:	bd08      	pop	{r3, pc}
	...

08007908 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007908:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800790a:	4b0f      	ldr	r3, [pc, #60]	; (8007948 <FATFS_LinkDriverEx+0x40>)
 800790c:	7a5d      	ldrb	r5, [r3, #9]
 800790e:	f005 04ff 	and.w	r4, r5, #255	; 0xff
 8007912:	b9b5      	cbnz	r5, 8007942 <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007914:	7a5d      	ldrb	r5, [r3, #9]
 8007916:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 8007918:	7a5d      	ldrb	r5, [r3, #9]
 800791a:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800791e:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8007920:	7a58      	ldrb	r0, [r3, #9]
 8007922:	4418      	add	r0, r3
 8007924:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8007926:	7a5a      	ldrb	r2, [r3, #9]
 8007928:	b2d2      	uxtb	r2, r2
 800792a:	1c50      	adds	r0, r2, #1
 800792c:	b2c0      	uxtb	r0, r0
 800792e:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 8007930:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 8007932:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 8007934:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8007936:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 8007938:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 800793a:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 800793c:	70cc      	strb	r4, [r1, #3]
 800793e:	4620      	mov	r0, r4
 8007940:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 8007942:	2001      	movs	r0, #1
    ret = 0;
  }

  return ret;
}
 8007944:	bd30      	pop	{r4, r5, pc}
 8007946:	bf00      	nop
 8007948:	20003f68 	.word	0x20003f68

0800794c <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 800794c:	2200      	movs	r2, #0
 800794e:	f7ff bfdb 	b.w	8007908 <FATFS_LinkDriverEx>
	...

08007954 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007954:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007956:	2200      	movs	r2, #0
 8007958:	490e      	ldr	r1, [pc, #56]	; (8007994 <MX_USB_DEVICE_Init+0x40>)
 800795a:	480f      	ldr	r0, [pc, #60]	; (8007998 <MX_USB_DEVICE_Init+0x44>)
 800795c:	f7ff fc3f 	bl	80071de <USBD_Init>
 8007960:	b108      	cbz	r0, 8007966 <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 8007962:	f7fa f9eb 	bl	8001d3c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8007966:	490d      	ldr	r1, [pc, #52]	; (800799c <MX_USB_DEVICE_Init+0x48>)
 8007968:	480b      	ldr	r0, [pc, #44]	; (8007998 <MX_USB_DEVICE_Init+0x44>)
 800796a:	f7ff fc4d 	bl	8007208 <USBD_RegisterClass>
 800796e:	b108      	cbz	r0, 8007974 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 8007970:	f7fa f9e4 	bl	8001d3c <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8007974:	490a      	ldr	r1, [pc, #40]	; (80079a0 <MX_USB_DEVICE_Init+0x4c>)
 8007976:	4808      	ldr	r0, [pc, #32]	; (8007998 <MX_USB_DEVICE_Init+0x44>)
 8007978:	f7ff f8c8 	bl	8006b0c <USBD_MSC_RegisterStorage>
 800797c:	b108      	cbz	r0, 8007982 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 800797e:	f7fa f9dd 	bl	8001d3c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007982:	4805      	ldr	r0, [pc, #20]	; (8007998 <MX_USB_DEVICE_Init+0x44>)
 8007984:	f7ff fc47 	bl	8007216 <USBD_Start>
 8007988:	b118      	cbz	r0, 8007992 <MX_USB_DEVICE_Init+0x3e>
    Error_Handler();
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800798a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800798e:	f7fa b9d5 	b.w	8001d3c <Error_Handler>
 8007992:	bd08      	pop	{r3, pc}
 8007994:	200000c8 	.word	0x200000c8
 8007998:	2000cd2c 	.word	0x2000cd2c
 800799c:	20000024 	.word	0x20000024
 80079a0:	20000128 	.word	0x20000128

080079a4 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80079a4:	2312      	movs	r3, #18
 80079a6:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 80079a8:	4800      	ldr	r0, [pc, #0]	; (80079ac <USBD_FS_DeviceDescriptor+0x8>)
 80079aa:	4770      	bx	lr
 80079ac:	200000f4 	.word	0x200000f4

080079b0 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80079b0:	2304      	movs	r3, #4
 80079b2:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 80079b4:	4800      	ldr	r0, [pc, #0]	; (80079b8 <USBD_FS_LangIDStrDescriptor+0x8>)
 80079b6:	4770      	bx	lr
 80079b8:	20000108 	.word	0x20000108

080079bc <USBD_FS_USR_BOSDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80079bc:	230c      	movs	r3, #12
 80079be:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
}
 80079c0:	4800      	ldr	r0, [pc, #0]	; (80079c4 <USBD_FS_USR_BOSDescriptor+0x8>)
 80079c2:	4770      	bx	lr
 80079c4:	200000e8 	.word	0x200000e8

080079c8 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 80079c8:	2300      	movs	r3, #0
{
 80079ca:	b530      	push	{r4, r5, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 80079cc:	461d      	mov	r5, r3
  for (idx = 0; idx < len; idx++)
 80079ce:	b2dc      	uxtb	r4, r3
 80079d0:	42a2      	cmp	r2, r4
 80079d2:	d800      	bhi.n	80079d6 <IntToUnicode+0xe>
  }
}
 80079d4:	bd30      	pop	{r4, r5, pc}
    if (((value >> 28)) < 0xA)
 80079d6:	0f04      	lsrs	r4, r0, #28
 80079d8:	2c09      	cmp	r4, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 80079da:	bf94      	ite	ls
 80079dc:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80079de:	3437      	addhi	r4, #55	; 0x37
 80079e0:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 80079e4:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    value = value << 4;
 80079e8:	0100      	lsls	r0, r0, #4
    pbuf[2 * idx + 1] = 0;
 80079ea:	7065      	strb	r5, [r4, #1]
 80079ec:	3301      	adds	r3, #1
 80079ee:	e7ee      	b.n	80079ce <IntToUnicode+0x6>

080079f0 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 80079f0:	231a      	movs	r3, #26
{
 80079f2:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 80079f4:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80079f6:	4b09      	ldr	r3, [pc, #36]	; (8007a1c <USBD_FS_SerialStrDescriptor+0x2c>)
 80079f8:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80079fa:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 80079fc:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 80079fe:	18c0      	adds	r0, r0, r3
 8007a00:	d00a      	beq.n	8007a18 <USBD_FS_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007a02:	4b07      	ldr	r3, [pc, #28]	; (8007a20 <USBD_FS_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007a04:	4907      	ldr	r1, [pc, #28]	; (8007a24 <USBD_FS_SerialStrDescriptor+0x34>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007a06:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007a08:	2208      	movs	r2, #8
 8007a0a:	f7ff ffdd 	bl	80079c8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007a0e:	2204      	movs	r2, #4
 8007a10:	4905      	ldr	r1, [pc, #20]	; (8007a28 <USBD_FS_SerialStrDescriptor+0x38>)
 8007a12:	4620      	mov	r0, r4
 8007a14:	f7ff ffd8 	bl	80079c8 <IntToUnicode>
}
 8007a18:	4804      	ldr	r0, [pc, #16]	; (8007a2c <USBD_FS_SerialStrDescriptor+0x3c>)
 8007a1a:	bd10      	pop	{r4, pc}
 8007a1c:	1fff7590 	.word	0x1fff7590
 8007a20:	1fff7594 	.word	0x1fff7594
 8007a24:	2000010e 	.word	0x2000010e
 8007a28:	2000011e 	.word	0x2000011e
 8007a2c:	2000010c 	.word	0x2000010c

08007a30 <USBD_FS_ManufacturerStrDescriptor>:
{
 8007a30:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007a32:	4c04      	ldr	r4, [pc, #16]	; (8007a44 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8007a34:	4804      	ldr	r0, [pc, #16]	; (8007a48 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8007a36:	460a      	mov	r2, r1
 8007a38:	4621      	mov	r1, r4
 8007a3a:	f7ff ff15 	bl	8007868 <USBD_GetString>
}
 8007a3e:	4620      	mov	r0, r4
 8007a40:	bd10      	pop	{r4, pc}
 8007a42:	bf00      	nop
 8007a44:	2000cfc8 	.word	0x2000cfc8
 8007a48:	080122d0 	.word	0x080122d0

08007a4c <USBD_FS_ProductStrDescriptor>:
{
 8007a4c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007a4e:	4c04      	ldr	r4, [pc, #16]	; (8007a60 <USBD_FS_ProductStrDescriptor+0x14>)
 8007a50:	4804      	ldr	r0, [pc, #16]	; (8007a64 <USBD_FS_ProductStrDescriptor+0x18>)
 8007a52:	460a      	mov	r2, r1
 8007a54:	4621      	mov	r1, r4
 8007a56:	f7ff ff07 	bl	8007868 <USBD_GetString>
}
 8007a5a:	4620      	mov	r0, r4
 8007a5c:	bd10      	pop	{r4, pc}
 8007a5e:	bf00      	nop
 8007a60:	2000cfc8 	.word	0x2000cfc8
 8007a64:	080122e3 	.word	0x080122e3

08007a68 <USBD_FS_ConfigStrDescriptor>:
{
 8007a68:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007a6a:	4c04      	ldr	r4, [pc, #16]	; (8007a7c <USBD_FS_ConfigStrDescriptor+0x14>)
 8007a6c:	4804      	ldr	r0, [pc, #16]	; (8007a80 <USBD_FS_ConfigStrDescriptor+0x18>)
 8007a6e:	460a      	mov	r2, r1
 8007a70:	4621      	mov	r1, r4
 8007a72:	f7ff fef9 	bl	8007868 <USBD_GetString>
}
 8007a76:	4620      	mov	r0, r4
 8007a78:	bd10      	pop	{r4, pc}
 8007a7a:	bf00      	nop
 8007a7c:	2000cfc8 	.word	0x2000cfc8
 8007a80:	080122b7 	.word	0x080122b7

08007a84 <USBD_FS_InterfaceStrDescriptor>:
{
 8007a84:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007a86:	4c04      	ldr	r4, [pc, #16]	; (8007a98 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8007a88:	4804      	ldr	r0, [pc, #16]	; (8007a9c <USBD_FS_InterfaceStrDescriptor+0x18>)
 8007a8a:	460a      	mov	r2, r1
 8007a8c:	4621      	mov	r1, r4
 8007a8e:	f7ff feeb 	bl	8007868 <USBD_GetString>
}
 8007a92:	4620      	mov	r0, r4
 8007a94:	bd10      	pop	{r4, pc}
 8007a96:	bf00      	nop
 8007a98:	2000cfc8 	.word	0x2000cfc8
 8007a9c:	080122c2 	.word	0x080122c2

08007aa0 <STORAGE_GetCapacity_FS>:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 8007aa0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007aa4:	600b      	str	r3, [r1, #0]
  *block_size = STORAGE_BLK_SIZ;
 8007aa6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007aaa:	8013      	strh	r3, [r2, #0]
  return (USBD_OK);
  /* USER CODE END 3 */
}
 8007aac:	2000      	movs	r0, #0
 8007aae:	4770      	bx	lr

08007ab0 <STORAGE_IsWriteProtected_FS>:
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
  /* USER CODE END 5 */
}
 8007ab0:	2000      	movs	r0, #0
 8007ab2:	4770      	bx	lr

08007ab4 <STORAGE_Write_FS>:
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
  /* USER CODE BEGIN 7 */
  return (USBD_OK);
  /* USER CODE END 7 */
}
 8007ab4:	2000      	movs	r0, #0
 8007ab6:	4770      	bx	lr

08007ab8 <STORAGE_GetMaxLun_FS>:
int8_t STORAGE_GetMaxLun_FS(void)
{
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
  /* USER CODE END 8 */
}
 8007ab8:	2000      	movs	r0, #0
 8007aba:	4770      	bx	lr

08007abc <STORAGE_Read_FS>:
 8007abc:	2000      	movs	r0, #0
 8007abe:	4770      	bx	lr

08007ac0 <STORAGE_Init_FS>:
 8007ac0:	2000      	movs	r0, #0
 8007ac2:	4770      	bx	lr

08007ac4 <STORAGE_IsReady_FS>:
 8007ac4:	2000      	movs	r0, #0
 8007ac6:	4770      	bx	lr

08007ac8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007ac8:	b510      	push	{r4, lr}
 8007aca:	4604      	mov	r4, r0
 8007acc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ace:	2214      	movs	r2, #20
 8007ad0:	2100      	movs	r1, #0
 8007ad2:	a803      	add	r0, sp, #12
 8007ad4:	f007 fc37 	bl	800f346 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8007ad8:	6823      	ldr	r3, [r4, #0]
 8007ada:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ade:	d13a      	bne.n	8007b56 <HAL_PCD_MspInit+0x8e>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ae0:	4c1f      	ldr	r4, [pc, #124]	; (8007b60 <HAL_PCD_MspInit+0x98>)
 8007ae2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007ae4:	f043 0301 	orr.w	r3, r3, #1
 8007ae8:	64e3      	str	r3, [r4, #76]	; 0x4c
 8007aea:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007aec:	f003 0301 	and.w	r3, r3, #1
 8007af0:	9300      	str	r3, [sp, #0]
 8007af2:	9b00      	ldr	r3, [sp, #0]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007af4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007af8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007afa:	2302      	movs	r3, #2
 8007afc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007afe:	2303      	movs	r3, #3
 8007b00:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b02:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007b04:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007b0a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b0c:	f7fb f98e 	bl	8002e2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007b10:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007b12:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007b16:	64e3      	str	r3, [r4, #76]	; 0x4c
 8007b18:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007b1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b1e:	9301      	str	r3, [sp, #4]
 8007b20:	9b01      	ldr	r3, [sp, #4]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007b22:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b24:	00db      	lsls	r3, r3, #3
 8007b26:	d418      	bmi.n	8007b5a <HAL_PCD_MspInit+0x92>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b28:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b2e:	65a3      	str	r3, [r4, #88]	; 0x58
 8007b30:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b36:	9302      	str	r3, [sp, #8]
 8007b38:	9b02      	ldr	r3, [sp, #8]
      HAL_PWREx_EnableVddUSB();
 8007b3a:	f7fb ffc9 	bl	8003ad0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b44:	65a3      	str	r3, [r4, #88]	; 0x58
    {
      HAL_PWREx_EnableVddUSB();
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007b46:	2200      	movs	r2, #0
 8007b48:	2043      	movs	r0, #67	; 0x43
 8007b4a:	4611      	mov	r1, r2
 8007b4c:	f7fb f85c 	bl	8002c08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007b50:	2043      	movs	r0, #67	; 0x43
 8007b52:	f7fb f88d 	bl	8002c70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007b56:	b008      	add	sp, #32
 8007b58:	bd10      	pop	{r4, pc}
      HAL_PWREx_EnableVddUSB();
 8007b5a:	f7fb ffb9 	bl	8003ad0 <HAL_PWREx_EnableVddUSB>
 8007b5e:	e7f2      	b.n	8007b46 <HAL_PCD_MspInit+0x7e>
 8007b60:	40021000 	.word	0x40021000

08007b64 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007b64:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 8007b68:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8007b6c:	f7ff bb6a 	b.w	8007244 <USBD_LL_SetupStage>

08007b70 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007b70:	231c      	movs	r3, #28
 8007b72:	fb03 0301 	mla	r3, r3, r1, r0
 8007b76:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8007b7a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007b7e:	f7ff bb8e 	b.w	800729e <USBD_LL_DataOutStage>

08007b82 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007b82:	231c      	movs	r3, #28
 8007b84:	fb03 0301 	mla	r3, r3, r1, r0
 8007b88:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8007b8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007b8e:	f7ff bbc0 	b.w	8007312 <USBD_LL_DataInStage>

08007b92 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007b92:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8007b96:	f7ff bc51 	b.w	800743c <USBD_LL_SOF>

08007b9a <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007b9a:	68c3      	ldr	r3, [r0, #12]
 8007b9c:	2b02      	cmp	r3, #2
{ 
 8007b9e:	b510      	push	{r4, lr}
 8007ba0:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007ba2:	d001      	beq.n	8007ba8 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8007ba4:	f7fa f8ca 	bl	8001d3c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007ba8:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 8007bac:	2101      	movs	r1, #1
 8007bae:	f7ff fc33 	bl	8007418 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007bb2:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
}
 8007bb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007bba:	f7ff bc06 	b.w	80073ca <USBD_LL_Reset>
	...

08007bc0 <HAL_PCD_SuspendCallback>:
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007bc0:	6802      	ldr	r2, [r0, #0]
 8007bc2:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
{
 8007bc6:	b510      	push	{r4, lr}
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007bc8:	f043 0301 	orr.w	r3, r3, #1
{
 8007bcc:	4604      	mov	r4, r0
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007bce:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007bd2:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8007bd6:	f7ff fc22 	bl	800741e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007bda:	6a23      	ldr	r3, [r4, #32]
 8007bdc:	b123      	cbz	r3, 8007be8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007bde:	4a03      	ldr	r2, [pc, #12]	; (8007bec <HAL_PCD_SuspendCallback+0x2c>)
 8007be0:	6913      	ldr	r3, [r2, #16]
 8007be2:	f043 0306 	orr.w	r3, r3, #6
 8007be6:	6113      	str	r3, [r2, #16]
 8007be8:	bd10      	pop	{r4, pc}
 8007bea:	bf00      	nop
 8007bec:	e000ed00 	.word	0xe000ed00

08007bf0 <HAL_PCD_ResumeCallback>:
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007bf0:	6802      	ldr	r2, [r0, #0]
 8007bf2:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8007bf6:	f023 0301 	bic.w	r3, r3, #1
{
 8007bfa:	b510      	push	{r4, lr}
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007bfc:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8007c00:	6a03      	ldr	r3, [r0, #32]
{
 8007c02:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 8007c04:	b133      	cbz	r3, 8007c14 <HAL_PCD_ResumeCallback+0x24>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007c06:	4a06      	ldr	r2, [pc, #24]	; (8007c20 <HAL_PCD_ResumeCallback+0x30>)
 8007c08:	6913      	ldr	r3, [r2, #16]
 8007c0a:	f023 0306 	bic.w	r3, r3, #6
 8007c0e:	6113      	str	r3, [r2, #16]
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 8007c10:	f7f9 fd80 	bl	8001714 <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007c14:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
}
 8007c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007c1c:	f7ff bc08 	b.w	8007430 <USBD_LL_Resume>
 8007c20:	e000ed00 	.word	0xe000ed00

08007c24 <HAL_PCD_ISOOUTIncompleteCallback>:
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007c24:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8007c28:	f7ff bc16 	b.w	8007458 <USBD_LL_IsoOUTIncomplete>

08007c2c <HAL_PCD_ISOINIncompleteCallback>:
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007c2c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8007c30:	f7ff bc10 	b.w	8007454 <USBD_LL_IsoINIncomplete>

08007c34 <HAL_PCD_ConnectCallback>:
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007c34:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8007c38:	f7ff bc10 	b.w	800745c <USBD_LL_DevConnected>

08007c3c <HAL_PCD_DisconnectCallback>:
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007c3c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8007c40:	f7ff bc0e 	b.w	8007460 <USBD_LL_DevDisconnected>

08007c44 <USBD_LL_Init>:
{
 8007c44:	b508      	push	{r3, lr}
  if (pdev->id == DEVICE_FS) {
 8007c46:	7802      	ldrb	r2, [r0, #0]
 8007c48:	bb32      	cbnz	r2, 8007c98 <USBD_LL_Init+0x54>
  hpcd_USB_OTG_FS.pData = pdev;
 8007c4a:	4b14      	ldr	r3, [pc, #80]	; (8007c9c <USBD_LL_Init+0x58>)
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8007c4c:	2106      	movs	r1, #6
  hpcd_USB_OTG_FS.pData = pdev;
 8007c4e:	f8c3 0404 	str.w	r0, [r3, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007c52:	f8c0 3298 	str.w	r3, [r0, #664]	; 0x298
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8007c56:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007c5a:	e883 0003 	stmia.w	r3, {r0, r1}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007c5e:	2102      	movs	r1, #2
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007c60:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007c62:	60d9      	str	r1, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007c64:	6199      	str	r1, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007c66:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007c68:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007c6a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8007c6c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007c6e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007c70:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007c72:	f7fb fa64 	bl	800313e <HAL_PCD_Init>
 8007c76:	b108      	cbz	r0, 8007c7c <USBD_LL_Init+0x38>
    Error_Handler( );
 8007c78:	f7fa f860 	bl	8001d3c <Error_Handler>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007c7c:	2180      	movs	r1, #128	; 0x80
 8007c7e:	4807      	ldr	r0, [pc, #28]	; (8007c9c <USBD_LL_Init+0x58>)
 8007c80:	f7fb fec8 	bl	8003a14 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007c84:	2240      	movs	r2, #64	; 0x40
 8007c86:	2100      	movs	r1, #0
 8007c88:	4804      	ldr	r0, [pc, #16]	; (8007c9c <USBD_LL_Init+0x58>)
 8007c8a:	f7fb fea2 	bl	80039d2 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007c8e:	2280      	movs	r2, #128	; 0x80
 8007c90:	2101      	movs	r1, #1
 8007c92:	4802      	ldr	r0, [pc, #8]	; (8007c9c <USBD_LL_Init+0x58>)
 8007c94:	f7fb fe9d 	bl	80039d2 <HAL_PCDEx_SetTxFiFo>
}
 8007c98:	2000      	movs	r0, #0
 8007c9a:	bd08      	pop	{r3, pc}
 8007c9c:	2000d1c8 	.word	0x2000d1c8

08007ca0 <USBD_LL_Start>:
{
 8007ca0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8007ca2:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8007ca6:	f7fb fad7 	bl	8003258 <HAL_PCD_Start>
 8007caa:	2803      	cmp	r0, #3
 8007cac:	bf9a      	itte	ls
 8007cae:	4b02      	ldrls	r3, [pc, #8]	; (8007cb8 <USBD_LL_Start+0x18>)
 8007cb0:	5c18      	ldrbls	r0, [r3, r0]
 8007cb2:	2002      	movhi	r0, #2
}
 8007cb4:	bd08      	pop	{r3, pc}
 8007cb6:	bf00      	nop
 8007cb8:	0801231a 	.word	0x0801231a

08007cbc <USBD_LL_OpenEP>:
{
 8007cbc:	b510      	push	{r4, lr}
 8007cbe:	461c      	mov	r4, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007cc0:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8007cc4:	4613      	mov	r3, r2
 8007cc6:	4622      	mov	r2, r4
 8007cc8:	f7fb fd5e 	bl	8003788 <HAL_PCD_EP_Open>
 8007ccc:	2803      	cmp	r0, #3
 8007cce:	bf9a      	itte	ls
 8007cd0:	4b01      	ldrls	r3, [pc, #4]	; (8007cd8 <USBD_LL_OpenEP+0x1c>)
 8007cd2:	5c18      	ldrbls	r0, [r3, r0]
 8007cd4:	2002      	movhi	r0, #2
}
 8007cd6:	bd10      	pop	{r4, pc}
 8007cd8:	0801231a 	.word	0x0801231a

08007cdc <USBD_LL_CloseEP>:
{
 8007cdc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007cde:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8007ce2:	f7fb fd86 	bl	80037f2 <HAL_PCD_EP_Close>
 8007ce6:	2803      	cmp	r0, #3
 8007ce8:	bf9a      	itte	ls
 8007cea:	4b02      	ldrls	r3, [pc, #8]	; (8007cf4 <USBD_LL_CloseEP+0x18>)
 8007cec:	5c18      	ldrbls	r0, [r3, r0]
 8007cee:	2002      	movhi	r0, #2
}
 8007cf0:	bd08      	pop	{r3, pc}
 8007cf2:	bf00      	nop
 8007cf4:	0801231a 	.word	0x0801231a

08007cf8 <USBD_LL_FlushEP>:
{
 8007cf8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8007cfa:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8007cfe:	f7fb fe4e 	bl	800399e <HAL_PCD_EP_Flush>
 8007d02:	2803      	cmp	r0, #3
 8007d04:	bf9a      	itte	ls
 8007d06:	4b02      	ldrls	r3, [pc, #8]	; (8007d10 <USBD_LL_FlushEP+0x18>)
 8007d08:	5c18      	ldrbls	r0, [r3, r0]
 8007d0a:	2002      	movhi	r0, #2
}
 8007d0c:	bd08      	pop	{r3, pc}
 8007d0e:	bf00      	nop
 8007d10:	0801231a 	.word	0x0801231a

08007d14 <USBD_LL_StallEP>:
{
 8007d14:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007d16:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8007d1a:	f7fb fdd5 	bl	80038c8 <HAL_PCD_EP_SetStall>
 8007d1e:	2803      	cmp	r0, #3
 8007d20:	bf9a      	itte	ls
 8007d22:	4b02      	ldrls	r3, [pc, #8]	; (8007d2c <USBD_LL_StallEP+0x18>)
 8007d24:	5c18      	ldrbls	r0, [r3, r0]
 8007d26:	2002      	movhi	r0, #2
}
 8007d28:	bd08      	pop	{r3, pc}
 8007d2a:	bf00      	nop
 8007d2c:	0801231a 	.word	0x0801231a

08007d30 <USBD_LL_ClearStallEP>:
{
 8007d30:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8007d32:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8007d36:	f7fb fe00 	bl	800393a <HAL_PCD_EP_ClrStall>
 8007d3a:	2803      	cmp	r0, #3
 8007d3c:	bf9a      	itte	ls
 8007d3e:	4b02      	ldrls	r3, [pc, #8]	; (8007d48 <USBD_LL_ClearStallEP+0x18>)
 8007d40:	5c18      	ldrbls	r0, [r3, r0]
 8007d42:	2002      	movhi	r0, #2
}
 8007d44:	bd08      	pop	{r3, pc}
 8007d46:	bf00      	nop
 8007d48:	0801231a 	.word	0x0801231a

08007d4c <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 8007d4c:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007d50:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 8007d54:	f04f 021c 	mov.w	r2, #28
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8007d58:	bf1b      	ittet	ne
 8007d5a:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8007d5e:	fb02 3101 	mlane	r1, r2, r1, r3
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8007d62:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8007d66:	f891 003e 	ldrbne.w	r0, [r1, #62]	; 0x3e
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8007d6a:	bf08      	it	eq
 8007d6c:	f891 01fe 	ldrbeq.w	r0, [r1, #510]	; 0x1fe
}
 8007d70:	4770      	bx	lr
	...

08007d74 <USBD_LL_SetUSBAddress>:
{
 8007d74:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007d76:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8007d7a:	f7fb fcf1 	bl	8003760 <HAL_PCD_SetAddress>
 8007d7e:	2803      	cmp	r0, #3
 8007d80:	bf9a      	itte	ls
 8007d82:	4b02      	ldrls	r3, [pc, #8]	; (8007d8c <USBD_LL_SetUSBAddress+0x18>)
 8007d84:	5c18      	ldrbls	r0, [r3, r0]
 8007d86:	2002      	movhi	r0, #2
}
 8007d88:	bd08      	pop	{r3, pc}
 8007d8a:	bf00      	nop
 8007d8c:	0801231a 	.word	0x0801231a

08007d90 <USBD_LL_Transmit>:
{
 8007d90:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007d92:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8007d96:	f7fb fd7c 	bl	8003892 <HAL_PCD_EP_Transmit>
 8007d9a:	2803      	cmp	r0, #3
 8007d9c:	bf9a      	itte	ls
 8007d9e:	4b02      	ldrls	r3, [pc, #8]	; (8007da8 <USBD_LL_Transmit+0x18>)
 8007da0:	5c18      	ldrbls	r0, [r3, r0]
 8007da2:	2002      	movhi	r0, #2
}
 8007da4:	bd08      	pop	{r3, pc}
 8007da6:	bf00      	nop
 8007da8:	0801231a 	.word	0x0801231a

08007dac <USBD_LL_PrepareReceive>:
{
 8007dac:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007dae:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8007db2:	f7fb fd48 	bl	8003846 <HAL_PCD_EP_Receive>
 8007db6:	2803      	cmp	r0, #3
 8007db8:	bf9a      	itte	ls
 8007dba:	4b02      	ldrls	r3, [pc, #8]	; (8007dc4 <USBD_LL_PrepareReceive+0x18>)
 8007dbc:	5c18      	ldrbls	r0, [r3, r0]
 8007dbe:	2002      	movhi	r0, #2
}
 8007dc0:	bd08      	pop	{r3, pc}
 8007dc2:	bf00      	nop
 8007dc4:	0801231a 	.word	0x0801231a

08007dc8 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007dc8:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8007dcc:	f7fb bd59 	b.w	8003882 <HAL_PCD_EP_GetRxCount>

08007dd0 <HAL_PCDEx_LPM_Callback>:
{
 8007dd0:	b510      	push	{r4, lr}
 8007dd2:	4604      	mov	r4, r0
  switch (msg)
 8007dd4:	b111      	cbz	r1, 8007ddc <HAL_PCDEx_LPM_Callback+0xc>
 8007dd6:	2901      	cmp	r1, #1
 8007dd8:	d016      	beq.n	8007e08 <HAL_PCDEx_LPM_Callback+0x38>
 8007dda:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 8007ddc:	6a03      	ldr	r3, [r0, #32]
 8007dde:	b133      	cbz	r3, 8007dee <HAL_PCDEx_LPM_Callback+0x1e>
  SystemClock_Config();
 8007de0:	f7f9 fc98 	bl	8001714 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007de4:	4a12      	ldr	r2, [pc, #72]	; (8007e30 <HAL_PCDEx_LPM_Callback+0x60>)
 8007de6:	6913      	ldr	r3, [r2, #16]
 8007de8:	f023 0306 	bic.w	r3, r3, #6
 8007dec:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007dee:	6822      	ldr	r2, [r4, #0]
    USBD_LL_Resume(hpcd->pData);
 8007df0:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007df4:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8007df8:	f023 0301 	bic.w	r3, r3, #1
 8007dfc:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
}
 8007e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    USBD_LL_Resume(hpcd->pData);
 8007e04:	f7ff bb14 	b.w	8007430 <USBD_LL_Resume>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007e08:	6802      	ldr	r2, [r0, #0]
    USBD_LL_Suspend(hpcd->pData);
 8007e0a:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007e0e:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8007e12:	f043 0301 	orr.w	r3, r3, #1
 8007e16:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Suspend(hpcd->pData);
 8007e1a:	f7ff fb00 	bl	800741e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8007e1e:	6a23      	ldr	r3, [r4, #32]
 8007e20:	b123      	cbz	r3, 8007e2c <HAL_PCDEx_LPM_Callback+0x5c>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007e22:	4a03      	ldr	r2, [pc, #12]	; (8007e30 <HAL_PCDEx_LPM_Callback+0x60>)
 8007e24:	6913      	ldr	r3, [r2, #16]
 8007e26:	f043 0306 	orr.w	r3, r3, #6
 8007e2a:	6113      	str	r3, [r2, #16]
 8007e2c:	bd10      	pop	{r4, pc}
 8007e2e:	bf00      	nop
 8007e30:	e000ed00 	.word	0xe000ed00

08007e34 <USBD_static_malloc>:
}
 8007e34:	4800      	ldr	r0, [pc, #0]	; (8007e38 <USBD_static_malloc+0x4>)
 8007e36:	4770      	bx	lr
 8007e38:	20003f74 	.word	0x20003f74

08007e3c <USBD_static_free>:
{
 8007e3c:	4770      	bx	lr

08007e3e <lv_disp_get_scr_act>:
 * @param disp pointer to display which active screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
 8007e3e:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 8007e40:	b910      	cbnz	r0, 8007e48 <lv_disp_get_scr_act+0xa>
 8007e42:	f005 f8e9 	bl	800d018 <lv_disp_get_default>
    if(!disp) {
 8007e46:	b100      	cbz	r0, 8007e4a <lv_disp_get_scr_act+0xc>
        LV_LOG_WARN("lv_scr_act: no display registered to get its top layer");
        return NULL;
    }

    return disp->act_scr;
 8007e48:	6b80      	ldr	r0, [r0, #56]	; 0x38
}
 8007e4a:	bd08      	pop	{r3, pc}

08007e4c <lv_disp_get_layer_top>:
 * Return with the top layer. (Same on every screen and it is above the normal screen layer)
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
 8007e4c:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 8007e4e:	b910      	cbnz	r0, 8007e56 <lv_disp_get_layer_top+0xa>
 8007e50:	f005 f8e2 	bl	800d018 <lv_disp_get_default>
    if(!disp) {
 8007e54:	b100      	cbz	r0, 8007e58 <lv_disp_get_layer_top+0xc>
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
        return NULL;
    }

    return disp->top_layer;
 8007e56:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 8007e58:	bd08      	pop	{r3, pc}

08007e5a <lv_disp_get_layer_sys>:
 * layer)
 * @param disp pointer to display which sys. layer  should be get. (NULL to use the default screen)
 * @return pointer to the sys layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
 8007e5a:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 8007e5c:	b910      	cbnz	r0, 8007e64 <lv_disp_get_layer_sys+0xa>
 8007e5e:	f005 f8db 	bl	800d018 <lv_disp_get_default>
    if(!disp) {
 8007e62:	b100      	cbz	r0, 8007e66 <lv_disp_get_layer_sys+0xc>
        LV_LOG_WARN("lv_layer_sys: no display registered to get its top layer");
        return NULL;
    }

    return disp->sys_layer;
 8007e64:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 8007e66:	bd08      	pop	{r3, pc}

08007e68 <obj_to_foreground>:

    if(group->focus_cb) group->focus_cb(group);
}

static void obj_to_foreground(lv_obj_t * obj)
{
 8007e68:	b510      	push	{r4, lr}
    /*Search for 'top' attribute*/
    lv_obj_t * i        = obj;
    lv_obj_t * last_top = NULL;
 8007e6a:	2400      	movs	r4, #0
    while(i != NULL) {
 8007e6c:	b928      	cbnz	r0, 8007e7a <obj_to_foreground+0x12>
        if(i->top != 0) last_top = i;
        i = lv_obj_get_parent(i);
    }

    if(last_top != NULL) {
 8007e6e:	b16c      	cbz	r4, 8007e8c <obj_to_foreground+0x24>
        /*Move the last_top object to the foreground*/
        lv_obj_move_foreground(last_top);
 8007e70:	4620      	mov	r0, r4
    }
}
 8007e72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        lv_obj_move_foreground(last_top);
 8007e76:	f000 ba31 	b.w	80082dc <lv_obj_move_foreground>
        if(i->top != 0) last_top = i;
 8007e7a:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8007e7e:	f013 0f20 	tst.w	r3, #32
 8007e82:	bf18      	it	ne
 8007e84:	4604      	movne	r4, r0
        i = lv_obj_get_parent(i);
 8007e86:	f000 fe71 	bl	8008b6c <lv_obj_get_parent>
 8007e8a:	e7ef      	b.n	8007e6c <obj_to_foreground+0x4>
 8007e8c:	bd10      	pop	{r4, pc}

08007e8e <focus_next_core.part.0>:
static void focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
 8007e8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    lv_obj_t ** obj_next     = group->obj_focus;
 8007e92:	68c5      	ldr	r5, [r0, #12]
static void focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
 8007e94:	4604      	mov	r4, r0
 8007e96:	4689      	mov	r9, r1
 8007e98:	4692      	mov	sl, r2
    bool can_begin           = true;
 8007e9a:	2701      	movs	r7, #1
    lv_obj_t ** obj_sentinel = NULL;
 8007e9c:	2600      	movs	r6, #0
        if(obj_next == NULL) {
 8007e9e:	2d00      	cmp	r5, #0
 8007ea0:	d14d      	bne.n	8007f3e <focus_next_core.part.0+0xb0>
            if(group->wrap || obj_sentinel == NULL) {
 8007ea2:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8007ea6:	06db      	lsls	r3, r3, #27
 8007ea8:	d403      	bmi.n	8007eb2 <focus_next_core.part.0+0x24>
 8007eaa:	2e00      	cmp	r6, #0
 8007eac:	d056      	beq.n	8007f5c <focus_next_core.part.0+0xce>
 8007eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                if(!can_begin) return;
 8007eb2:	2f00      	cmp	r7, #0
 8007eb4:	d054      	beq.n	8007f60 <focus_next_core.part.0+0xd2>
                obj_next  = begin(&group->obj_ll);
 8007eb6:	4620      	mov	r0, r4
 8007eb8:	47c8      	blx	r9
 8007eba:	4605      	mov	r5, r0
        if(obj_sentinel == NULL) {
 8007ebc:	2e00      	cmp	r6, #0
 8007ebe:	d13a      	bne.n	8007f36 <focus_next_core.part.0+0xa8>
            if(obj_sentinel == NULL) return; /*Group is empty*/
 8007ec0:	2d00      	cmp	r5, #0
 8007ec2:	d04d      	beq.n	8007f60 <focus_next_core.part.0+0xd2>
 8007ec4:	462e      	mov	r6, r5
 8007ec6:	2700      	movs	r7, #0
        if(!lv_obj_get_hidden(*obj_next)) break;
 8007ec8:	6828      	ldr	r0, [r5, #0]
 8007eca:	f000 fee1 	bl	8008c90 <lv_obj_get_hidden>
 8007ece:	4680      	mov	r8, r0
 8007ed0:	2800      	cmp	r0, #0
 8007ed2:	d1e4      	bne.n	8007e9e <focus_next_core.part.0+0x10>
    if(obj_next == group->obj_focus) return; /*There's only one visible object and it's already focused*/
 8007ed4:	68e3      	ldr	r3, [r4, #12]
 8007ed6:	42ab      	cmp	r3, r5
 8007ed8:	d042      	beq.n	8007f60 <focus_next_core.part.0+0xd2>
    if(group->obj_focus) {
 8007eda:	b183      	cbz	r3, 8007efe <focus_next_core.part.0+0x70>
        (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
 8007edc:	6818      	ldr	r0, [r3, #0]
 8007ede:	4642      	mov	r2, r8
 8007ee0:	69c3      	ldr	r3, [r0, #28]
 8007ee2:	2110      	movs	r1, #16
 8007ee4:	4798      	blx	r3
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, NULL);
 8007ee6:	68e3      	ldr	r3, [r4, #12]
 8007ee8:	4642      	mov	r2, r8
 8007eea:	210d      	movs	r1, #13
 8007eec:	6818      	ldr	r0, [r3, #0]
 8007eee:	f000 f96b 	bl	80081c8 <lv_event_send>
        if(res != LV_RES_OK) return;
 8007ef2:	2801      	cmp	r0, #1
 8007ef4:	d134      	bne.n	8007f60 <focus_next_core.part.0+0xd2>
        lv_obj_invalidate(*group->obj_focus);
 8007ef6:	68e3      	ldr	r3, [r4, #12]
 8007ef8:	6818      	ldr	r0, [r3, #0]
 8007efa:	f000 f99f 	bl	800823c <lv_obj_invalidate>
    (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_FOCUS, NULL);
 8007efe:	6828      	ldr	r0, [r5, #0]
    group->obj_focus = obj_next;
 8007f00:	60e5      	str	r5, [r4, #12]
    (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_FOCUS, NULL);
 8007f02:	69c3      	ldr	r3, [r0, #28]
 8007f04:	2200      	movs	r2, #0
 8007f06:	210f      	movs	r1, #15
 8007f08:	4798      	blx	r3
    lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, NULL);
 8007f0a:	68e3      	ldr	r3, [r4, #12]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	210c      	movs	r1, #12
 8007f10:	6818      	ldr	r0, [r3, #0]
 8007f12:	f000 f959 	bl	80081c8 <lv_event_send>
    if(res != LV_RES_OK) return;
 8007f16:	2801      	cmp	r0, #1
 8007f18:	d122      	bne.n	8007f60 <focus_next_core.part.0+0xd2>
    obj_to_foreground(*group->obj_focus);
 8007f1a:	68e3      	ldr	r3, [r4, #12]
 8007f1c:	6818      	ldr	r0, [r3, #0]
 8007f1e:	f7ff ffa3 	bl	8007e68 <obj_to_foreground>
    lv_obj_invalidate(*group->obj_focus);
 8007f22:	68e3      	ldr	r3, [r4, #12]
 8007f24:	6818      	ldr	r0, [r3, #0]
 8007f26:	f000 f989 	bl	800823c <lv_obj_invalidate>
    if(group->focus_cb) group->focus_cb(group);
 8007f2a:	69a3      	ldr	r3, [r4, #24]
 8007f2c:	b1c3      	cbz	r3, 8007f60 <focus_next_core.part.0+0xd2>
 8007f2e:	4620      	mov	r0, r4
}
 8007f30:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if(group->focus_cb) group->focus_cb(group);
 8007f34:	4718      	bx	r3
        if(obj_sentinel == NULL) {
 8007f36:	2700      	movs	r7, #0
        if(obj_next == NULL) continue;
 8007f38:	2d00      	cmp	r5, #0
 8007f3a:	d1c5      	bne.n	8007ec8 <focus_next_core.part.0+0x3a>
 8007f3c:	e7b1      	b.n	8007ea2 <focus_next_core.part.0+0x14>
            obj_next = move(&group->obj_ll, obj_next);
 8007f3e:	4629      	mov	r1, r5
 8007f40:	4620      	mov	r0, r4
 8007f42:	47d0      	blx	sl
        if(obj_sentinel == NULL) {
 8007f44:	2e00      	cmp	r6, #0
 8007f46:	bf08      	it	eq
 8007f48:	462e      	moveq	r6, r5
            if(obj_next == obj_sentinel) return;
 8007f4a:	42b0      	cmp	r0, r6
            obj_next = move(&group->obj_ll, obj_next);
 8007f4c:	4605      	mov	r5, r0
            if(obj_next == obj_sentinel) return;
 8007f4e:	d1f3      	bne.n	8007f38 <focus_next_core.part.0+0xaa>
 8007f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                obj_next  = begin(&group->obj_ll);
 8007f54:	4620      	mov	r0, r4
 8007f56:	47c8      	blx	r9
 8007f58:	4605      	mov	r5, r0
 8007f5a:	e7b1      	b.n	8007ec0 <focus_next_core.part.0+0x32>
                if(!can_begin) return;
 8007f5c:	2f00      	cmp	r7, #0
 8007f5e:	d1f9      	bne.n	8007f54 <focus_next_core.part.0+0xc6>
 8007f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007f64 <lv_group_init>:
    lv_ll_init(&LV_GC_ROOT(_lv_group_ll), sizeof(lv_group_t));
 8007f64:	215c      	movs	r1, #92	; 0x5c
 8007f66:	4801      	ldr	r0, [pc, #4]	; (8007f6c <lv_group_init+0x8>)
 8007f68:	f005 bb8d 	b.w	800d686 <lv_ll_init>
 8007f6c:	2000d930 	.word	0x2000d930

08007f70 <lv_group_focus_next>:
    if(group->frozen) return;
 8007f70:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8007f74:	07db      	lsls	r3, r3, #31
 8007f76:	d403      	bmi.n	8007f80 <lv_group_focus_next+0x10>
 8007f78:	4a02      	ldr	r2, [pc, #8]	; (8007f84 <lv_group_focus_next+0x14>)
 8007f7a:	4903      	ldr	r1, [pc, #12]	; (8007f88 <lv_group_focus_next+0x18>)
 8007f7c:	f7ff bf87 	b.w	8007e8e <focus_next_core.part.0>
 8007f80:	4770      	bx	lr
 8007f82:	bf00      	nop
 8007f84:	0800d71f 	.word	0x0800d71f
 8007f88:	0800d713 	.word	0x0800d713

08007f8c <lv_group_focus_prev>:
 8007f8c:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8007f90:	07db      	lsls	r3, r3, #31
 8007f92:	d403      	bmi.n	8007f9c <lv_group_focus_prev+0x10>
 8007f94:	4a02      	ldr	r2, [pc, #8]	; (8007fa0 <lv_group_focus_prev+0x14>)
 8007f96:	4903      	ldr	r1, [pc, #12]	; (8007fa4 <lv_group_focus_prev+0x18>)
 8007f98:	f7ff bf79 	b.w	8007e8e <focus_next_core.part.0>
 8007f9c:	4770      	bx	lr
 8007f9e:	bf00      	nop
 8007fa0:	0800d729 	.word	0x0800d729
 8007fa4:	0800d719 	.word	0x0800d719

08007fa8 <lv_group_refocus>:
{
 8007fa8:	b538      	push	{r3, r4, r5, lr}
    uint8_t temp_wrap = g->wrap;
 8007faa:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8007fae:	f3c3 1500 	ubfx	r5, r3, #4, #1
    g->wrap           = 1;
 8007fb2:	f043 0310 	orr.w	r3, r3, #16
 8007fb6:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 8007fba:	071b      	lsls	r3, r3, #28
{
 8007fbc:	4604      	mov	r4, r0
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 8007fbe:	d408      	bmi.n	8007fd2 <lv_group_refocus+0x2a>
        lv_group_focus_next(g);
 8007fc0:	f7ff ffd6 	bl	8007f70 <lv_group_focus_next>
    g->wrap = temp_wrap;
 8007fc4:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8007fc8:	f365 1304 	bfi	r3, r5, #4, #1
 8007fcc:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8007fd0:	bd38      	pop	{r3, r4, r5, pc}
        lv_group_focus_prev(g);
 8007fd2:	f7ff ffdb 	bl	8007f8c <lv_group_focus_prev>
 8007fd6:	e7f5      	b.n	8007fc4 <lv_group_refocus+0x1c>

08007fd8 <lv_group_add_obj>:
{
 8007fd8:	b570      	push	{r4, r5, r6, lr}
 8007fda:	460c      	mov	r4, r1
    if(group == NULL) return;
 8007fdc:	4605      	mov	r5, r0
 8007fde:	b328      	cbz	r0, 800802c <lv_group_add_obj+0x54>
    LV_LL_READ(group->obj_ll, obj_i)
 8007fe0:	f005 fb97 	bl	800d712 <lv_ll_get_head>
 8007fe4:	b978      	cbnz	r0, 8008006 <lv_group_add_obj+0x2e>
    if(obj->group_p) {
 8007fe6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007fe8:	b133      	cbz	r3, 8007ff8 <lv_group_add_obj+0x20>
        if(lv_obj_is_focused(obj)) {
 8007fea:	4620      	mov	r0, r4
 8007fec:	f000 feb8 	bl	8008d60 <lv_obj_is_focused>
 8007ff0:	b110      	cbz	r0, 8007ff8 <lv_group_add_obj+0x20>
            lv_group_refocus(obj->group_p);
 8007ff2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8007ff4:	f7ff ffd8 	bl	8007fa8 <lv_group_refocus>
    obj->group_p     = group;
 8007ff8:	62e5      	str	r5, [r4, #44]	; 0x2c
    lv_obj_t ** next = lv_ll_ins_tail(&group->obj_ll);
 8007ffa:	4628      	mov	r0, r5
 8007ffc:	f005 fb6b 	bl	800d6d6 <lv_ll_ins_tail>
    lv_mem_assert(next);
 8008000:	4606      	mov	r6, r0
 8008002:	b940      	cbnz	r0, 8008016 <lv_group_add_obj+0x3e>
 8008004:	e7fe      	b.n	8008004 <lv_group_add_obj+0x2c>
        if((*obj_i) == obj) {
 8008006:	6803      	ldr	r3, [r0, #0]
 8008008:	42a3      	cmp	r3, r4
 800800a:	d00f      	beq.n	800802c <lv_group_add_obj+0x54>
    LV_LL_READ(group->obj_ll, obj_i)
 800800c:	4601      	mov	r1, r0
 800800e:	4628      	mov	r0, r5
 8008010:	f005 fb85 	bl	800d71e <lv_ll_get_next>
 8008014:	e7e6      	b.n	8007fe4 <lv_group_add_obj+0xc>
    *next = obj;
 8008016:	6004      	str	r4, [r0, #0]
    if(lv_ll_get_head(&group->obj_ll) == next) {
 8008018:	4628      	mov	r0, r5
 800801a:	f005 fb7a 	bl	800d712 <lv_ll_get_head>
 800801e:	4286      	cmp	r6, r0
 8008020:	d104      	bne.n	800802c <lv_group_add_obj+0x54>
        lv_group_refocus(group);
 8008022:	4628      	mov	r0, r5
}
 8008024:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        lv_group_refocus(group);
 8008028:	f7ff bfbe 	b.w	8007fa8 <lv_group_refocus>
 800802c:	bd70      	pop	{r4, r5, r6, pc}

0800802e <lv_group_mod_style>:
{
 800802e:	b538      	push	{r3, r4, r5, lr}
 8008030:	4604      	mov	r4, r0
    lv_style_copy(&group->style_tmp, style);
 8008032:	f100 051c 	add.w	r5, r0, #28
 8008036:	4628      	mov	r0, r5
 8008038:	f001 f9dc 	bl	80093f4 <lv_style_copy>
    if(group->editing) {
 800803c:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8008040:	079b      	lsls	r3, r3, #30
        if(group->style_mod_edit_cb) group->style_mod_edit_cb(group, &group->style_tmp);
 8008042:	bf4c      	ite	mi
 8008044:	6963      	ldrmi	r3, [r4, #20]
        if(group->style_mod_cb) group->style_mod_cb(group, &group->style_tmp);
 8008046:	6923      	ldrpl	r3, [r4, #16]
 8008048:	b113      	cbz	r3, 8008050 <lv_group_mod_style+0x22>
 800804a:	4629      	mov	r1, r5
 800804c:	4620      	mov	r0, r4
 800804e:	4798      	blx	r3
}
 8008050:	4628      	mov	r0, r5
 8008052:	bd38      	pop	{r3, r4, r5, pc}

08008054 <lv_group_get_focused>:
    if(!group) return NULL;
 8008054:	b110      	cbz	r0, 800805c <lv_group_get_focused+0x8>
    if(group->obj_focus == NULL) return NULL;
 8008056:	68c0      	ldr	r0, [r0, #12]
 8008058:	b100      	cbz	r0, 800805c <lv_group_get_focused+0x8>
    return *group->obj_focus;
 800805a:	6800      	ldr	r0, [r0, #0]
}
 800805c:	4770      	bx	lr

0800805e <lv_indev_reset.part.1>:
}
/**
 * Reset one or all input devices
 * @param indev pointer to an input device to reset or NULL to reset all of them
 */
void lv_indev_reset(lv_indev_t * indev)
 800805e:	b508      	push	{r3, lr}
{
    if(indev)
        indev->proc.reset_query = 1;
    else {
        lv_indev_t * i = lv_indev_get_next(NULL);
 8008060:	2000      	movs	r0, #0
        while(i) {
            i->proc.reset_query = 1;

            i = lv_indev_get_next(i);
 8008062:	f005 f829 	bl	800d0b8 <lv_indev_get_next>
        while(i) {
 8008066:	b900      	cbnz	r0, 800806a <lv_indev_reset.part.1+0xc>
        }
    }
}
 8008068:	bd08      	pop	{r3, pc}
            i->proc.reset_query = 1;
 800806a:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 800806e:	f043 0302 	orr.w	r3, r3, #2
 8008072:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
 8008076:	e7f4      	b.n	8008062 <lv_indev_reset.part.1+0x4>

08008078 <lv_indev_init>:
{
 8008078:	f7ff bff1 	b.w	800805e <lv_indev_reset.part.1>

0800807c <lv_indev_get_act>:
}
 800807c:	4b01      	ldr	r3, [pc, #4]	; (8008084 <lv_indev_get_act+0x8>)
 800807e:	6818      	ldr	r0, [r3, #0]
 8008080:	4770      	bx	lr
 8008082:	bf00      	nop
 8008084:	200041e4 	.word	0x200041e4

08008088 <refresh_children_position>:
 * @param obj pointer to an object which children will be repositioned
 * @param x_diff x coordinate shift
 * @param y_diff y coordinate shift
 */
static void refresh_children_position(lv_obj_t * obj, lv_coord_t x_diff, lv_coord_t y_diff)
{
 8008088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    lv_obj_t * i;
    LV_LL_READ(obj->child_ll, i)
 800808c:	1d05      	adds	r5, r0, #4
 800808e:	4628      	mov	r0, r5
{
 8008090:	460e      	mov	r6, r1
 8008092:	4617      	mov	r7, r2
    LV_LL_READ(obj->child_ll, i)
 8008094:	f005 fb3d 	bl	800d712 <lv_ll_get_head>
    {
        i->coords.x1 += x_diff;
 8008098:	fa1f f886 	uxth.w	r8, r6
    LV_LL_READ(obj->child_ll, i)
 800809c:	4604      	mov	r4, r0
        i->coords.y1 += y_diff;
 800809e:	fa1f f987 	uxth.w	r9, r7
    LV_LL_READ(obj->child_ll, i)
 80080a2:	b90c      	cbnz	r4, 80080a8 <refresh_children_position+0x20>
        i->coords.x2 += x_diff;
        i->coords.y2 += y_diff;

        refresh_children_position(i, x_diff, y_diff);
    }
}
 80080a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        i->coords.x1 += x_diff;
 80080a8:	8a23      	ldrh	r3, [r4, #16]
 80080aa:	4443      	add	r3, r8
 80080ac:	8223      	strh	r3, [r4, #16]
        i->coords.y1 += y_diff;
 80080ae:	8a63      	ldrh	r3, [r4, #18]
 80080b0:	444b      	add	r3, r9
 80080b2:	8263      	strh	r3, [r4, #18]
        i->coords.x2 += x_diff;
 80080b4:	8aa3      	ldrh	r3, [r4, #20]
 80080b6:	4443      	add	r3, r8
 80080b8:	82a3      	strh	r3, [r4, #20]
        i->coords.y2 += y_diff;
 80080ba:	8ae3      	ldrh	r3, [r4, #22]
 80080bc:	444b      	add	r3, r9
 80080be:	82e3      	strh	r3, [r4, #22]
        refresh_children_position(i, x_diff, y_diff);
 80080c0:	4620      	mov	r0, r4
 80080c2:	463a      	mov	r2, r7
 80080c4:	4631      	mov	r1, r6
 80080c6:	f7ff ffdf 	bl	8008088 <refresh_children_position>
    LV_LL_READ(obj->child_ll, i)
 80080ca:	4621      	mov	r1, r4
 80080cc:	4628      	mov	r0, r5
 80080ce:	f005 fb26 	bl	800d71e <lv_ll_get_next>
 80080d2:	4604      	mov	r4, r0
 80080d4:	e7e5      	b.n	80080a2 <refresh_children_position+0x1a>
	...

080080d8 <lv_init>:
{
 80080d8:	b510      	push	{r4, lr}
    if(lv_initialized) {
 80080da:	4c12      	ldr	r4, [pc, #72]	; (8008124 <lv_init+0x4c>)
 80080dc:	7823      	ldrb	r3, [r4, #0]
 80080de:	b9fb      	cbnz	r3, 8008120 <lv_init+0x48>
    lv_mem_init();
 80080e0:	f005 fc40 	bl	800d964 <lv_mem_init>
    lv_task_core_init();
 80080e4:	f005 fcda 	bl	800da9c <lv_task_core_init>
    lv_fs_init();
 80080e8:	f005 fa10 	bl	800d50c <lv_fs_init>
    lv_anim_core_init();
 80080ec:	f005 f8b8 	bl	800d260 <lv_anim_core_init>
    lv_group_init();
 80080f0:	f7ff ff38 	bl	8007f64 <lv_group_init>
    lv_style_init();
 80080f4:	f001 f988 	bl	8009408 <lv_style_init>
    lv_refr_init();
 80080f8:	f000 ff60 	bl	8008fbc <lv_refr_init>
    lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
 80080fc:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 8008100:	4809      	ldr	r0, [pc, #36]	; (8008128 <lv_init+0x50>)
 8008102:	f005 fac0 	bl	800d686 <lv_ll_init>
    lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
 8008106:	215c      	movs	r1, #92	; 0x5c
 8008108:	4808      	ldr	r0, [pc, #32]	; (800812c <lv_init+0x54>)
 800810a:	f005 fabc 	bl	800d686 <lv_ll_init>
    lv_indev_init();
 800810e:	f7ff ffb3 	bl	8008078 <lv_indev_init>
    lv_img_decoder_init();
 8008112:	f004 fdb3 	bl	800cc7c <lv_img_decoder_init>
    lv_img_cache_set_size(LV_IMG_CACHE_DEF_SIZE);
 8008116:	2001      	movs	r0, #1
 8008118:	f004 fade 	bl	800c6d8 <lv_img_cache_set_size>
    lv_initialized = true;
 800811c:	2301      	movs	r3, #1
 800811e:	7023      	strb	r3, [r4, #0]
 8008120:	bd10      	pop	{r4, pc}
 8008122:	bf00      	nop
 8008124:	200041f0 	.word	0x200041f0
 8008128:	2000d8f8 	.word	0x2000d8f8
 800812c:	2000d8e8 	.word	0x2000d8e8

08008130 <lv_obj_set_click>:
    obj->click = (en == true ? 1 : 0);
 8008130:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8008134:	f361 0300 	bfi	r3, r1, #0, #1
 8008138:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
 800813c:	4770      	bx	lr
	...

08008140 <lv_event_send_func>:
{
 8008140:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    if(event_temp_data_head) {
 8008144:	4c1e      	ldr	r4, [pc, #120]	; (80081c0 <lv_event_send_func+0x80>)
    event_temp_data.obj     = obj;
 8008146:	9101      	str	r1, [sp, #4]
{
 8008148:	4698      	mov	r8, r3
    event_temp_data.deleted = false;
 800814a:	2300      	movs	r3, #0
 800814c:	f88d 3008 	strb.w	r3, [sp, #8]
    event_temp_data.prev    = NULL;
 8008150:	9303      	str	r3, [sp, #12]
    if(event_temp_data_head) {
 8008152:	6823      	ldr	r3, [r4, #0]
{
 8008154:	4681      	mov	r9, r0
 8008156:	460d      	mov	r5, r1
 8008158:	4617      	mov	r7, r2
    if(event_temp_data_head) {
 800815a:	b103      	cbz	r3, 800815e <lv_event_send_func+0x1e>
        event_temp_data.prev = event_temp_data_head;
 800815c:	9303      	str	r3, [sp, #12]
    const void * event_act_data_save = event_act_data;
 800815e:	4e19      	ldr	r6, [pc, #100]	; (80081c4 <lv_event_send_func+0x84>)
    event_temp_data_head = &event_temp_data;
 8008160:	ab01      	add	r3, sp, #4
    const void * event_act_data_save = event_act_data;
 8008162:	f8d6 a000 	ldr.w	sl, [r6]
    event_temp_data_head = &event_temp_data;
 8008166:	6023      	str	r3, [r4, #0]
    event_act_data                   = data;
 8008168:	f8c6 8000 	str.w	r8, [r6]
    lv_indev_t * indev_act = lv_indev_get_act();
 800816c:	f7ff ff86 	bl	800807c <lv_indev_get_act>
    if(indev_act) {
 8008170:	b118      	cbz	r0, 800817a <lv_event_send_func+0x3a>
        if(indev_act->driver.feedback_cb) indev_act->driver.feedback_cb(&indev_act->driver, event);
 8008172:	6883      	ldr	r3, [r0, #8]
 8008174:	b10b      	cbz	r3, 800817a <lv_event_send_func+0x3a>
 8008176:	4639      	mov	r1, r7
 8008178:	4798      	blx	r3
    if(event_xcb) event_xcb(obj, event);
 800817a:	f1b9 0f00 	cmp.w	r9, #0
 800817e:	d002      	beq.n	8008186 <lv_event_send_func+0x46>
 8008180:	4639      	mov	r1, r7
 8008182:	4628      	mov	r0, r5
 8008184:	47c8      	blx	r9
    event_temp_data_head = event_temp_data_head->prev;
 8008186:	6823      	ldr	r3, [r4, #0]
    event_act_data = event_act_data_save;
 8008188:	f8c6 a000 	str.w	sl, [r6]
    event_temp_data_head = event_temp_data_head->prev;
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	6023      	str	r3, [r4, #0]
    if(event_temp_data.deleted) {
 8008190:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8008194:	b983      	cbnz	r3, 80081b8 <lv_event_send_func+0x78>
    if(obj) {
 8008196:	b18d      	cbz	r5, 80081bc <lv_event_send_func+0x7c>
        if(obj->parent_event && obj->par) {
 8008198:	f995 3030 	ldrsb.w	r3, [r5, #48]	; 0x30
 800819c:	2b00      	cmp	r3, #0
 800819e:	da0d      	bge.n	80081bc <lv_event_send_func+0x7c>
 80081a0:	6828      	ldr	r0, [r5, #0]
 80081a2:	b158      	cbz	r0, 80081bc <lv_event_send_func+0x7c>
            lv_res_t res = lv_event_send(obj->par, event, data);
 80081a4:	4642      	mov	r2, r8
 80081a6:	4639      	mov	r1, r7
 80081a8:	f000 f80e 	bl	80081c8 <lv_event_send>
        return LV_RES_INV;
 80081ac:	1e43      	subs	r3, r0, #1
 80081ae:	4258      	negs	r0, r3
 80081b0:	4158      	adcs	r0, r3
}
 80081b2:	b004      	add	sp, #16
 80081b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return LV_RES_INV;
 80081b8:	2000      	movs	r0, #0
 80081ba:	e7fa      	b.n	80081b2 <lv_event_send_func+0x72>
    return LV_RES_OK;
 80081bc:	2001      	movs	r0, #1
 80081be:	e7f8      	b.n	80081b2 <lv_event_send_func+0x72>
 80081c0:	200041ec 	.word	0x200041ec
 80081c4:	200041e8 	.word	0x200041e8

080081c8 <lv_event_send>:
{
 80081c8:	4613      	mov	r3, r2
    if(obj == NULL) return LV_RES_OK;
 80081ca:	b120      	cbz	r0, 80081d6 <lv_event_send+0xe>
    res = lv_event_send_func(obj->event_cb, obj, event, data);
 80081cc:	460a      	mov	r2, r1
 80081ce:	4601      	mov	r1, r0
 80081d0:	6980      	ldr	r0, [r0, #24]
 80081d2:	f7ff bfb5 	b.w	8008140 <lv_event_send_func>
}
 80081d6:	2001      	movs	r0, #1
 80081d8:	4770      	bx	lr

080081da <lv_obj_set_signal_cb>:
    obj->signal_cb = signal_cb;
 80081da:	61c1      	str	r1, [r0, #28]
 80081dc:	4770      	bx	lr

080081de <lv_obj_set_design_cb>:
    obj->design_cb = design_cb;
 80081de:	6201      	str	r1, [r0, #32]
 80081e0:	4770      	bx	lr

080081e2 <lv_obj_allocate_ext_attr>:
{
 80081e2:	b510      	push	{r4, lr}
 80081e4:	4604      	mov	r4, r0
    obj->ext_attr = lv_mem_realloc(obj->ext_attr, ext_size);
 80081e6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80081e8:	f005 fc2e 	bl	800da48 <lv_mem_realloc>
 80081ec:	6260      	str	r0, [r4, #36]	; 0x24
}
 80081ee:	bd10      	pop	{r4, pc}

080081f0 <lv_obj_get_disp>:
{
 80081f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(obj->par == NULL)
 80081f2:	6803      	ldr	r3, [r0, #0]
{
 80081f4:	4605      	mov	r5, r0
    if(obj->par == NULL)
 80081f6:	b943      	cbnz	r3, 800820a <lv_obj_get_disp+0x1a>
    LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d)
 80081f8:	480f      	ldr	r0, [pc, #60]	; (8008238 <lv_obj_get_disp+0x48>)
 80081fa:	4f0f      	ldr	r7, [pc, #60]	; (8008238 <lv_obj_get_disp+0x48>)
 80081fc:	f005 fa89 	bl	800d712 <lv_ll_get_head>
 8008200:	4604      	mov	r4, r0
 8008202:	b934      	cbnz	r4, 8008212 <lv_obj_get_disp+0x22>
}
 8008204:	4620      	mov	r0, r4
 8008206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } while(par != NULL);
 8008208:	461d      	mov	r5, r3
    return obj->par;
 800820a:	682b      	ldr	r3, [r5, #0]
    } while(par != NULL);
 800820c:	2b00      	cmp	r3, #0
 800820e:	d1fb      	bne.n	8008208 <lv_obj_get_disp+0x18>
 8008210:	e7f2      	b.n	80081f8 <lv_obj_get_disp+0x8>
        LV_LL_READ(d->scr_ll, s)
 8008212:	f104 062c 	add.w	r6, r4, #44	; 0x2c
 8008216:	4630      	mov	r0, r6
 8008218:	f005 fa7b 	bl	800d712 <lv_ll_get_head>
 800821c:	b928      	cbnz	r0, 800822a <lv_obj_get_disp+0x3a>
    LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d)
 800821e:	4621      	mov	r1, r4
 8008220:	4638      	mov	r0, r7
 8008222:	f005 fa7c 	bl	800d71e <lv_ll_get_next>
 8008226:	4604      	mov	r4, r0
 8008228:	e7eb      	b.n	8008202 <lv_obj_get_disp+0x12>
            if(s == scr) return d;
 800822a:	4285      	cmp	r5, r0
 800822c:	d0ea      	beq.n	8008204 <lv_obj_get_disp+0x14>
        LV_LL_READ(d->scr_ll, s)
 800822e:	4601      	mov	r1, r0
 8008230:	4630      	mov	r0, r6
 8008232:	f005 fa74 	bl	800d71e <lv_ll_get_next>
 8008236:	e7f1      	b.n	800821c <lv_obj_get_disp+0x2c>
 8008238:	2000d8f8 	.word	0x2000d8f8

0800823c <lv_obj_invalidate>:
    return obj->hidden == 0 ? false : true;
 800823c:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
    if(lv_obj_get_hidden(obj)) return;
 8008240:	06da      	lsls	r2, r3, #27
{
 8008242:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008244:	4604      	mov	r4, r0
    if(lv_obj_get_hidden(obj)) return;
 8008246:	d439      	bmi.n	80082bc <lv_obj_invalidate+0x80>
 8008248:	4605      	mov	r5, r0
    return obj->par;
 800824a:	682b      	ldr	r3, [r5, #0]
    } while(par != NULL);
 800824c:	bb53      	cbnz	r3, 80082a4 <lv_obj_invalidate+0x68>
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
 800824e:	4628      	mov	r0, r5
 8008250:	f7ff ffce 	bl	80081f0 <lv_obj_get_disp>
 8008254:	4606      	mov	r6, r0
    if(obj_scr == lv_disp_get_scr_act(disp) || obj_scr == lv_disp_get_layer_top(disp) ||
 8008256:	f7ff fdf2 	bl	8007e3e <lv_disp_get_scr_act>
 800825a:	4285      	cmp	r5, r0
 800825c:	d124      	bne.n	80082a8 <lv_obj_invalidate+0x6c>
        lv_coord_t ext_size = obj->ext_draw_pad;
 800825e:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
    return obj->par;
 8008262:	6825      	ldr	r5, [r4, #0]
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    memcpy(dest, src, sizeof(lv_area_t));
 8008264:	f854 0f10 	ldr.w	r0, [r4, #16]!
 8008268:	6861      	ldr	r1, [r4, #4]
 800826a:	466a      	mov	r2, sp
 800826c:	c203      	stmia	r2!, {r0, r1}
        area_trunc.x1 -= ext_size;
 800826e:	f8bd 2000 	ldrh.w	r2, [sp]
 8008272:	b29b      	uxth	r3, r3
 8008274:	1ad2      	subs	r2, r2, r3
 8008276:	f8ad 2000 	strh.w	r2, [sp]
        area_trunc.y1 -= ext_size;
 800827a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800827e:	1ad2      	subs	r2, r2, r3
 8008280:	f8ad 2002 	strh.w	r2, [sp, #2]
        area_trunc.x2 += ext_size;
 8008284:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8008288:	441a      	add	r2, r3
 800828a:	f8ad 2004 	strh.w	r2, [sp, #4]
        area_trunc.y2 += ext_size;
 800828e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008292:	4413      	add	r3, r2
 8008294:	f8ad 3006 	strh.w	r3, [sp, #6]
        while(par != NULL) {
 8008298:	b995      	cbnz	r5, 80082c0 <lv_obj_invalidate+0x84>
        if(union_ok) lv_inv_area(disp, &area_trunc);
 800829a:	4669      	mov	r1, sp
 800829c:	4630      	mov	r0, r6
 800829e:	f000 fe8f 	bl	8008fc0 <lv_inv_area>
 80082a2:	e00b      	b.n	80082bc <lv_obj_invalidate+0x80>
    } while(par != NULL);
 80082a4:	461d      	mov	r5, r3
 80082a6:	e7d0      	b.n	800824a <lv_obj_invalidate+0xe>
    if(obj_scr == lv_disp_get_scr_act(disp) || obj_scr == lv_disp_get_layer_top(disp) ||
 80082a8:	4630      	mov	r0, r6
 80082aa:	f7ff fdcf 	bl	8007e4c <lv_disp_get_layer_top>
 80082ae:	4285      	cmp	r5, r0
 80082b0:	d0d5      	beq.n	800825e <lv_obj_invalidate+0x22>
       obj_scr == lv_disp_get_layer_sys(disp)) {
 80082b2:	4630      	mov	r0, r6
 80082b4:	f7ff fdd1 	bl	8007e5a <lv_disp_get_layer_sys>
    if(obj_scr == lv_disp_get_scr_act(disp) || obj_scr == lv_disp_get_layer_top(disp) ||
 80082b8:	4285      	cmp	r5, r0
 80082ba:	d0d0      	beq.n	800825e <lv_obj_invalidate+0x22>
}
 80082bc:	b002      	add	sp, #8
 80082be:	bd70      	pop	{r4, r5, r6, pc}
            union_ok = lv_area_intersect(&area_trunc, &area_trunc, &par->coords);
 80082c0:	f105 0210 	add.w	r2, r5, #16
 80082c4:	4669      	mov	r1, sp
 80082c6:	4668      	mov	r0, sp
 80082c8:	f005 f863 	bl	800d392 <lv_area_intersect>
            if(union_ok == false) break;       /*If no common parts with parent break;*/
 80082cc:	2800      	cmp	r0, #0
 80082ce:	d0f5      	beq.n	80082bc <lv_obj_invalidate+0x80>
    return obj->hidden == 0 ? false : true;
 80082d0:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
            if(lv_obj_get_hidden(par)) return; /*If the parent is hidden then the child is hidden and won't be drawn*/
 80082d4:	06db      	lsls	r3, r3, #27
 80082d6:	d4f1      	bmi.n	80082bc <lv_obj_invalidate+0x80>
    return obj->par;
 80082d8:	682d      	ldr	r5, [r5, #0]
 80082da:	e7dd      	b.n	8008298 <lv_obj_invalidate+0x5c>

080082dc <lv_obj_move_foreground>:
{
 80082dc:	b570      	push	{r4, r5, r6, lr}
    return obj->par;
 80082de:	6804      	ldr	r4, [r0, #0]
    if(lv_ll_get_head(&parent->child_ll) == obj) return;
 80082e0:	1d26      	adds	r6, r4, #4
{
 80082e2:	4605      	mov	r5, r0
    if(lv_ll_get_head(&parent->child_ll) == obj) return;
 80082e4:	4630      	mov	r0, r6
 80082e6:	f005 fa14 	bl	800d712 <lv_ll_get_head>
 80082ea:	4285      	cmp	r5, r0
 80082ec:	d012      	beq.n	8008314 <lv_obj_move_foreground+0x38>
    lv_obj_invalidate(parent);
 80082ee:	4620      	mov	r0, r4
 80082f0:	f7ff ffa4 	bl	800823c <lv_obj_invalidate>
    lv_ll_chg_list(&parent->child_ll, &parent->child_ll, obj, true);
 80082f4:	462a      	mov	r2, r5
 80082f6:	4631      	mov	r1, r6
 80082f8:	4630      	mov	r0, r6
 80082fa:	2301      	movs	r3, #1
 80082fc:	f005 fa82 	bl	800d804 <lv_ll_chg_list>
    parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, obj);
 8008300:	69e3      	ldr	r3, [r4, #28]
 8008302:	462a      	mov	r2, r5
 8008304:	4620      	mov	r0, r4
 8008306:	2101      	movs	r1, #1
 8008308:	4798      	blx	r3
    lv_obj_invalidate(parent);
 800830a:	4620      	mov	r0, r4
}
 800830c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_invalidate(parent);
 8008310:	f7ff bf94 	b.w	800823c <lv_obj_invalidate>
 8008314:	bd70      	pop	{r4, r5, r6, pc}

08008316 <lv_obj_set_pos>:
{
 8008316:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    lv_obj_t * par = obj->par;
 800831a:	6806      	ldr	r6, [r0, #0]
    diff.x = x - obj->coords.x1;
 800831c:	8a03      	ldrh	r3, [r0, #16]
 800831e:	f8b6 8010 	ldrh.w	r8, [r6, #16]
    diff.y = y - obj->coords.y1;
 8008322:	8a75      	ldrh	r5, [r6, #18]
    diff.x = x - obj->coords.x1;
 8008324:	eba8 0803 	sub.w	r8, r8, r3
    diff.y = y - obj->coords.y1;
 8008328:	8a43      	ldrh	r3, [r0, #18]
    diff.x = x - obj->coords.x1;
 800832a:	4488      	add	r8, r1
    diff.y = y - obj->coords.y1;
 800832c:	1aed      	subs	r5, r5, r3
    diff.x = x - obj->coords.x1;
 800832e:	fa1f f888 	uxth.w	r8, r8
    diff.y = y - obj->coords.y1;
 8008332:	4415      	add	r5, r2
 8008334:	b2ad      	uxth	r5, r5
    diff.x = x - obj->coords.x1;
 8008336:	fa0f f788 	sxth.w	r7, r8
{
 800833a:	4604      	mov	r4, r0
    diff.y = y - obj->coords.y1;
 800833c:	fa0f f985 	sxth.w	r9, r5
    if(diff.x == 0 && diff.y == 0) return;
 8008340:	b917      	cbnz	r7, 8008348 <lv_obj_set_pos+0x32>
 8008342:	f1b9 0f00 	cmp.w	r9, #0
 8008346:	d026      	beq.n	8008396 <lv_obj_set_pos+0x80>
    lv_obj_invalidate(obj);
 8008348:	4620      	mov	r0, r4
 800834a:	f7ff ff77 	bl	800823c <lv_obj_invalidate>
 800834e:	4622      	mov	r2, r4
 8008350:	466b      	mov	r3, sp
 8008352:	f852 0f10 	ldr.w	r0, [r2, #16]!
 8008356:	6851      	ldr	r1, [r2, #4]
    obj->coords.y2 += diff.y;
 8008358:	8ae2      	ldrh	r2, [r4, #22]
 800835a:	c303      	stmia	r3!, {r0, r1}
    obj->coords.x1 += diff.x;
 800835c:	8a23      	ldrh	r3, [r4, #16]
    obj->coords.x2 += diff.x;
 800835e:	8aa1      	ldrh	r1, [r4, #20]
    obj->coords.x1 += diff.x;
 8008360:	4443      	add	r3, r8
 8008362:	8223      	strh	r3, [r4, #16]
    obj->coords.y1 += diff.y;
 8008364:	8a63      	ldrh	r3, [r4, #18]
    obj->coords.x2 += diff.x;
 8008366:	4441      	add	r1, r8
    obj->coords.y1 += diff.y;
 8008368:	442b      	add	r3, r5
    obj->coords.y2 += diff.y;
 800836a:	4415      	add	r5, r2
    obj->coords.y1 += diff.y;
 800836c:	8263      	strh	r3, [r4, #18]
    obj->coords.x2 += diff.x;
 800836e:	82a1      	strh	r1, [r4, #20]
    refresh_children_position(obj, diff.x, diff.y);
 8008370:	464a      	mov	r2, r9
 8008372:	4639      	mov	r1, r7
 8008374:	4620      	mov	r0, r4
    obj->coords.y2 += diff.y;
 8008376:	82e5      	strh	r5, [r4, #22]
    refresh_children_position(obj, diff.x, diff.y);
 8008378:	f7ff fe86 	bl	8008088 <refresh_children_position>
    obj->signal_cb(obj, LV_SIGNAL_CORD_CHG, &ori);
 800837c:	69e3      	ldr	r3, [r4, #28]
 800837e:	466a      	mov	r2, sp
 8008380:	2102      	movs	r1, #2
 8008382:	4620      	mov	r0, r4
 8008384:	4798      	blx	r3
    par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
 8008386:	69f3      	ldr	r3, [r6, #28]
 8008388:	4622      	mov	r2, r4
 800838a:	2101      	movs	r1, #1
 800838c:	4630      	mov	r0, r6
 800838e:	4798      	blx	r3
    lv_obj_invalidate(obj);
 8008390:	4620      	mov	r0, r4
 8008392:	f7ff ff53 	bl	800823c <lv_obj_invalidate>
}
 8008396:	b003      	add	sp, #12
 8008398:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800839c <lv_obj_set_x>:
{
 800839c:	b410      	push	{r4}
    rel_y             = obj->coords.y1 - parent->coords.y1;
 800839e:	6804      	ldr	r4, [r0, #0]
 80083a0:	8a42      	ldrh	r2, [r0, #18]
 80083a2:	8a63      	ldrh	r3, [r4, #18]
}
 80083a4:	f85d 4b04 	ldr.w	r4, [sp], #4
    rel_y             = obj->coords.y1 - parent->coords.y1;
 80083a8:	1ad2      	subs	r2, r2, r3
    lv_obj_set_pos(obj, x, lv_obj_get_y(obj));
 80083aa:	b212      	sxth	r2, r2
 80083ac:	f7ff bfb3 	b.w	8008316 <lv_obj_set_pos>

080083b0 <lv_obj_set_y>:
    rel_x             = obj->coords.x1 - parent->coords.x1;
 80083b0:	6802      	ldr	r2, [r0, #0]
 80083b2:	8a03      	ldrh	r3, [r0, #16]
 80083b4:	8a12      	ldrh	r2, [r2, #16]
 80083b6:	1a9b      	subs	r3, r3, r2
    lv_obj_set_pos(obj, lv_obj_get_x(obj), y);
 80083b8:	460a      	mov	r2, r1
 80083ba:	b219      	sxth	r1, r3
 80083bc:	f7ff bfab 	b.w	8008316 <lv_obj_set_pos>

080083c0 <lv_obj_align>:
{
 80083c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return obj->par;
 80083c4:	6804      	ldr	r4, [r0, #0]
{
 80083c6:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
    rel_x             = obj->coords.x1 - parent->coords.x1;
 80083ca:	f8b4 e010 	ldrh.w	lr, [r4, #16]
    rel_y             = obj->coords.y1 - parent->coords.y1;
 80083ce:	f8b4 c012 	ldrh.w	ip, [r4, #18]
{
 80083d2:	4605      	mov	r5, r0
 80083d4:	4616      	mov	r6, r2
 80083d6:	4698      	mov	r8, r3
    rel_x             = obj->coords.x1 - parent->coords.x1;
 80083d8:	8a00      	ldrh	r0, [r0, #16]
    rel_y             = obj->coords.y1 - parent->coords.y1;
 80083da:	f8b5 9012 	ldrh.w	r9, [r5, #18]
 80083de:	2900      	cmp	r1, #0
 80083e0:	bf18      	it	ne
 80083e2:	460c      	movne	r4, r1
    switch(align) {
 80083e4:	2a14      	cmp	r2, #20
 80083e6:	d816      	bhi.n	8008416 <lv_obj_align+0x56>
 80083e8:	e8df f012 	tbh	[pc, r2, lsl #1]
 80083ec:	0128001c 	.word	0x0128001c
 80083f0:	00540042 	.word	0x00540042
 80083f4:	0083005a 	.word	0x0083005a
 80083f8:	00a4009e 	.word	0x00a4009e
 80083fc:	00cd00b5 	.word	0x00cd00b5
 8008400:	00e700d2 	.word	0x00e700d2
 8008404:	00f200ed 	.word	0x00f200ed
 8008408:	010d0107 	.word	0x010d0107
 800840c:	01150111 	.word	0x01150111
 8008410:	011e0119 	.word	0x011e0119
 8008414:	0123      	.short	0x0123
    rel_x             = obj->coords.x1 - parent->coords.x1;
 8008416:	eba0 010e 	sub.w	r1, r0, lr
 800841a:	b209      	sxth	r1, r1
    rel_y             = obj->coords.y1 - parent->coords.y1;
 800841c:	eba9 020c 	sub.w	r2, r9, ip
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 8008420:	b212      	sxth	r2, r2
            break;
 8008422:	e049      	b.n	80084b8 <lv_obj_align+0xf8>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return area_p->x2 - area_p->x1 + 1;
 8008424:	f8b4 a014 	ldrh.w	sl, [r4, #20]
 8008428:	8a21      	ldrh	r1, [r4, #16]
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 800842a:	8ae3      	ldrh	r3, [r4, #22]
 800842c:	8a62      	ldrh	r2, [r4, #18]
    return area_p->x2 - area_p->x1 + 1;
 800842e:	f10a 0a01 	add.w	sl, sl, #1
 8008432:	ebaa 0a01 	sub.w	sl, sl, r1
    return area_p->y2 - area_p->y1 + 1;
 8008436:	3301      	adds	r3, #1
    return area_p->x2 - area_p->x1 + 1;
 8008438:	8aa9      	ldrh	r1, [r5, #20]
    return area_p->y2 - area_p->y1 + 1;
 800843a:	1a9b      	subs	r3, r3, r2
 800843c:	8aea      	ldrh	r2, [r5, #22]
    return area_p->x2 - area_p->x1 + 1;
 800843e:	3101      	adds	r1, #1
 8008440:	1a09      	subs	r1, r1, r0
    return area_p->y2 - area_p->y1 + 1;
 8008442:	3201      	adds	r2, #1
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 8008444:	f04f 0b02 	mov.w	fp, #2
 8008448:	fa0f fa8a 	sxth.w	sl, sl
 800844c:	b209      	sxth	r1, r1
 800844e:	fb9a fafb 	sdiv	sl, sl, fp
 8008452:	fb91 f1fb 	sdiv	r1, r1, fp
 8008456:	eba2 0209 	sub.w	r2, r2, r9
 800845a:	ebaa 0101 	sub.w	r1, sl, r1
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 800845e:	b21b      	sxth	r3, r3
 8008460:	b212      	sxth	r2, r2
 8008462:	fb93 f3fb 	sdiv	r3, r3, fp
 8008466:	fb92 f2fb 	sdiv	r2, r2, fp
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 800846a:	b209      	sxth	r1, r1
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 800846c:	1a9a      	subs	r2, r3, r2
 800846e:	e7d7      	b.n	8008420 <lv_obj_align+0x60>
    return area_p->x2 - area_p->x1 + 1;
 8008470:	8aa1      	ldrh	r1, [r4, #20]
 8008472:	8a23      	ldrh	r3, [r4, #16]
 8008474:	3101      	adds	r1, #1
 8008476:	1ac9      	subs	r1, r1, r3
 8008478:	8aab      	ldrh	r3, [r5, #20]
 800847a:	3301      	adds	r3, #1
 800847c:	1a18      	subs	r0, r3, r0
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 800847e:	2202      	movs	r2, #2
 8008480:	b209      	sxth	r1, r1
 8008482:	b200      	sxth	r0, r0
 8008484:	fb91 f1f2 	sdiv	r1, r1, r2
 8008488:	fb90 f0f2 	sdiv	r0, r0, r2
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 800848c:	1a09      	subs	r1, r1, r0
 800848e:	b209      	sxth	r1, r1
            new_y = 0;
 8008490:	2200      	movs	r2, #0
            break;
 8008492:	e011      	b.n	80084b8 <lv_obj_align+0xf8>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 8008494:	8aa9      	ldrh	r1, [r5, #20]
 8008496:	1a08      	subs	r0, r1, r0
 8008498:	8aa1      	ldrh	r1, [r4, #20]
 800849a:	1a09      	subs	r1, r1, r0
 800849c:	8a20      	ldrh	r0, [r4, #16]
 800849e:	e7f5      	b.n	800848c <lv_obj_align+0xcc>
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 80084a0:	8aea      	ldrh	r2, [r5, #22]
 80084a2:	eba2 0909 	sub.w	r9, r2, r9
 80084a6:	8ae2      	ldrh	r2, [r4, #22]
 80084a8:	eba2 0209 	sub.w	r2, r2, r9
 80084ac:	f8b4 9012 	ldrh.w	r9, [r4, #18]
 80084b0:	eba2 0209 	sub.w	r2, r2, r9
    return area_p->y2 - area_p->y1 + 1;
 80084b4:	b212      	sxth	r2, r2
            new_x = 0;
 80084b6:	2100      	movs	r1, #0
    new_x -= par_abs_x;
 80084b8:	8a23      	ldrh	r3, [r4, #16]
 80084ba:	eba8 0e0e 	sub.w	lr, r8, lr
 80084be:	449e      	add	lr, r3
    new_y -= par_abs_y;
 80084c0:	8a63      	ldrh	r3, [r4, #18]
 80084c2:	eba7 0c0c 	sub.w	ip, r7, ip
 80084c6:	449c      	add	ip, r3
    new_x -= par_abs_x;
 80084c8:	4471      	add	r1, lr
    new_y -= par_abs_y;
 80084ca:	4462      	add	r2, ip
    lv_obj_set_pos(obj, new_x, new_y);
 80084cc:	b212      	sxth	r2, r2
 80084ce:	b209      	sxth	r1, r1
 80084d0:	4628      	mov	r0, r5
 80084d2:	f7ff ff20 	bl	8008316 <lv_obj_set_pos>
    obj->realign.origo_align = 0;
 80084d6:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
    obj->realign.align       = align;
 80084da:	f885 6040 	strb.w	r6, [r5, #64]	; 0x40
    obj->realign.origo_align = 0;
 80084de:	f36f 0341 	bfc	r3, #1, #1
    obj->realign.xofs        = x_mod;
 80084e2:	f8a5 803c 	strh.w	r8, [r5, #60]	; 0x3c
    obj->realign.yofs        = y_mod;
 80084e6:	87ef      	strh	r7, [r5, #62]	; 0x3e
    obj->realign.base        = base;
 80084e8:	63ac      	str	r4, [r5, #56]	; 0x38
    obj->realign.origo_align = 0;
 80084ea:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
 80084ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return area_p->x2 - area_p->x1 + 1;
 80084f2:	8aa1      	ldrh	r1, [r4, #20]
 80084f4:	8a23      	ldrh	r3, [r4, #16]
 80084f6:	3101      	adds	r1, #1
 80084f8:	1ac9      	subs	r1, r1, r3
 80084fa:	8aab      	ldrh	r3, [r5, #20]
 80084fc:	3301      	adds	r3, #1
 80084fe:	1a18      	subs	r0, r3, r0
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 8008500:	2202      	movs	r2, #2
 8008502:	b209      	sxth	r1, r1
 8008504:	b200      	sxth	r0, r0
 8008506:	fb91 f1f2 	sdiv	r1, r1, r2
 800850a:	fb90 f0f2 	sdiv	r0, r0, r2
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 800850e:	1a09      	subs	r1, r1, r0
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 8008510:	8aea      	ldrh	r2, [r5, #22]
 8008512:	eba2 0909 	sub.w	r9, r2, r9
 8008516:	8ae2      	ldrh	r2, [r4, #22]
 8008518:	eba2 0209 	sub.w	r2, r2, r9
 800851c:	f8b4 9012 	ldrh.w	r9, [r4, #18]
 8008520:	b209      	sxth	r1, r1
 8008522:	eba2 0209 	sub.w	r2, r2, r9
 8008526:	e77b      	b.n	8008420 <lv_obj_align+0x60>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 8008528:	8aa9      	ldrh	r1, [r5, #20]
 800852a:	1a08      	subs	r0, r1, r0
 800852c:	8aa1      	ldrh	r1, [r4, #20]
 800852e:	1a09      	subs	r1, r1, r0
 8008530:	8a20      	ldrh	r0, [r4, #16]
 8008532:	e7ec      	b.n	800850e <lv_obj_align+0x14e>
    return area_p->y2 - area_p->y1 + 1;
 8008534:	8ae3      	ldrh	r3, [r4, #22]
 8008536:	8a62      	ldrh	r2, [r4, #18]
 8008538:	3301      	adds	r3, #1
 800853a:	1a9b      	subs	r3, r3, r2
 800853c:	8aea      	ldrh	r2, [r5, #22]
 800853e:	3201      	adds	r2, #1
 8008540:	eba2 0209 	sub.w	r2, r2, r9
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 8008544:	2102      	movs	r1, #2
 8008546:	b21b      	sxth	r3, r3
 8008548:	b212      	sxth	r2, r2
 800854a:	fb93 f3f1 	sdiv	r3, r3, r1
 800854e:	fb92 f2f1 	sdiv	r2, r2, r1
 8008552:	1a9a      	subs	r2, r3, r2
 8008554:	e7ae      	b.n	80084b4 <lv_obj_align+0xf4>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 8008556:	8aa9      	ldrh	r1, [r5, #20]
 8008558:	1a08      	subs	r0, r1, r0
 800855a:	8aa1      	ldrh	r1, [r4, #20]
 800855c:	1a09      	subs	r1, r1, r0
 800855e:	8a20      	ldrh	r0, [r4, #16]
 8008560:	1a09      	subs	r1, r1, r0
 8008562:	8ae0      	ldrh	r0, [r4, #22]
 8008564:	8a62      	ldrh	r2, [r4, #18]
 8008566:	3001      	adds	r0, #1
 8008568:	1a80      	subs	r0, r0, r2
 800856a:	8aea      	ldrh	r2, [r5, #22]
 800856c:	3201      	adds	r2, #1
 800856e:	eba2 0209 	sub.w	r2, r2, r9
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 8008572:	2302      	movs	r3, #2
 8008574:	b200      	sxth	r0, r0
 8008576:	b212      	sxth	r2, r2
 8008578:	fb90 f0f3 	sdiv	r0, r0, r3
 800857c:	fb92 f2f3 	sdiv	r2, r2, r3
    return area_p->x2 - area_p->x1 + 1;
 8008580:	b209      	sxth	r1, r1
 8008582:	1a82      	subs	r2, r0, r2
 8008584:	e74c      	b.n	8008420 <lv_obj_align+0x60>
    return area_p->y2 - area_p->y1 + 1;
 8008586:	8aea      	ldrh	r2, [r5, #22]
 8008588:	eba2 0209 	sub.w	r2, r2, r9
            new_y = -lv_obj_get_height(obj);
 800858c:	43d2      	mvns	r2, r2
 800858e:	e791      	b.n	80084b4 <lv_obj_align+0xf4>
    return area_p->x2 - area_p->x1 + 1;
 8008590:	8aa1      	ldrh	r1, [r4, #20]
 8008592:	8a23      	ldrh	r3, [r4, #16]
 8008594:	3101      	adds	r1, #1
 8008596:	1ac9      	subs	r1, r1, r3
 8008598:	8aab      	ldrh	r3, [r5, #20]
 800859a:	3301      	adds	r3, #1
 800859c:	1a18      	subs	r0, r3, r0
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 800859e:	2202      	movs	r2, #2
 80085a0:	b209      	sxth	r1, r1
 80085a2:	b200      	sxth	r0, r0
 80085a4:	fb91 f1f2 	sdiv	r1, r1, r2
 80085a8:	fb90 f0f2 	sdiv	r0, r0, r2
    return area_p->y2 - area_p->y1 + 1;
 80085ac:	8aea      	ldrh	r2, [r5, #22]
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 80085ae:	1a09      	subs	r1, r1, r0
 80085b0:	eba2 0209 	sub.w	r2, r2, r9
 80085b4:	b209      	sxth	r1, r1
            new_y = -lv_obj_get_height(obj);
 80085b6:	43d2      	mvns	r2, r2
 80085b8:	e732      	b.n	8008420 <lv_obj_align+0x60>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 80085ba:	8aa9      	ldrh	r1, [r5, #20]
 80085bc:	1a08      	subs	r0, r1, r0
 80085be:	8aa1      	ldrh	r1, [r4, #20]
 80085c0:	1a09      	subs	r1, r1, r0
 80085c2:	8a20      	ldrh	r0, [r4, #16]
 80085c4:	e7f2      	b.n	80085ac <lv_obj_align+0x1ec>
 80085c6:	8ae2      	ldrh	r2, [r4, #22]
 80085c8:	8a63      	ldrh	r3, [r4, #18]
 80085ca:	3201      	adds	r2, #1
 80085cc:	1ad2      	subs	r2, r2, r3
 80085ce:	e771      	b.n	80084b4 <lv_obj_align+0xf4>
    return area_p->x2 - area_p->x1 + 1;
 80085d0:	8aa1      	ldrh	r1, [r4, #20]
 80085d2:	8a23      	ldrh	r3, [r4, #16]
 80085d4:	3101      	adds	r1, #1
 80085d6:	1ac9      	subs	r1, r1, r3
 80085d8:	8aab      	ldrh	r3, [r5, #20]
 80085da:	3301      	adds	r3, #1
 80085dc:	1a18      	subs	r0, r3, r0
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 80085de:	2202      	movs	r2, #2
 80085e0:	b209      	sxth	r1, r1
 80085e2:	b200      	sxth	r0, r0
 80085e4:	fb91 f1f2 	sdiv	r1, r1, r2
 80085e8:	fb90 f0f2 	sdiv	r0, r0, r2
    return area_p->y2 - area_p->y1 + 1;
 80085ec:	8ae2      	ldrh	r2, [r4, #22]
 80085ee:	8a63      	ldrh	r3, [r4, #18]
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 80085f0:	1a09      	subs	r1, r1, r0
 80085f2:	3201      	adds	r2, #1
 80085f4:	b209      	sxth	r1, r1
 80085f6:	1ad2      	subs	r2, r2, r3
 80085f8:	e712      	b.n	8008420 <lv_obj_align+0x60>
 80085fa:	8aa9      	ldrh	r1, [r5, #20]
 80085fc:	1a08      	subs	r0, r1, r0
 80085fe:	8aa1      	ldrh	r1, [r4, #20]
 8008600:	1a09      	subs	r1, r1, r0
 8008602:	8a20      	ldrh	r0, [r4, #16]
 8008604:	e7f2      	b.n	80085ec <lv_obj_align+0x22c>
    return area_p->x2 - area_p->x1 + 1;
 8008606:	8aa9      	ldrh	r1, [r5, #20]
 8008608:	1a09      	subs	r1, r1, r0
            new_x = -lv_obj_get_width(obj);
 800860a:	43c9      	mvns	r1, r1
 800860c:	e73f      	b.n	800848e <lv_obj_align+0xce>
 800860e:	8aa9      	ldrh	r1, [r5, #20]
 8008610:	1a09      	subs	r1, r1, r0
            new_x = -lv_obj_get_width(obj);
 8008612:	43c9      	mvns	r1, r1
 8008614:	e7a5      	b.n	8008562 <lv_obj_align+0x1a2>
 8008616:	8aa9      	ldrh	r1, [r5, #20]
 8008618:	1a09      	subs	r1, r1, r0
            new_x = -lv_obj_get_width(obj);
 800861a:	43c9      	mvns	r1, r1
 800861c:	e778      	b.n	8008510 <lv_obj_align+0x150>
 800861e:	8aa1      	ldrh	r1, [r4, #20]
 8008620:	8a23      	ldrh	r3, [r4, #16]
 8008622:	3101      	adds	r1, #1
 8008624:	1ac9      	subs	r1, r1, r3
 8008626:	e732      	b.n	800848e <lv_obj_align+0xce>
 8008628:	8aa1      	ldrh	r1, [r4, #20]
 800862a:	8a23      	ldrh	r3, [r4, #16]
 800862c:	3101      	adds	r1, #1
 800862e:	1ac9      	subs	r1, r1, r3
 8008630:	e797      	b.n	8008562 <lv_obj_align+0x1a2>
 8008632:	8aa1      	ldrh	r1, [r4, #20]
 8008634:	8a23      	ldrh	r3, [r4, #16]
 8008636:	3101      	adds	r1, #1
 8008638:	1ac9      	subs	r1, r1, r3
 800863a:	e769      	b.n	8008510 <lv_obj_align+0x150>
            new_y = 0;
 800863c:	2200      	movs	r2, #0
            new_x = 0;
 800863e:	4611      	mov	r1, r2
 8008640:	e73a      	b.n	80084b8 <lv_obj_align+0xf8>

08008642 <lv_obj_align_origo>:
{
 8008642:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008646:	4605      	mov	r5, r0
 8008648:	4616      	mov	r6, r2
 800864a:	f8b5 e014 	ldrh.w	lr, [r5, #20]
    return area_p->y2 - area_p->y1 + 1;
 800864e:	8aea      	ldrh	r2, [r5, #22]
    rel_x             = obj->coords.x1 - parent->coords.x1;
 8008650:	f8b0 9010 	ldrh.w	r9, [r0, #16]
    rel_y             = obj->coords.y1 - parent->coords.y1;
 8008654:	f8b0 c012 	ldrh.w	ip, [r0, #18]
    return obj->par;
 8008658:	6804      	ldr	r4, [r0, #0]
{
 800865a:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
    rel_y             = obj->coords.y1 - parent->coords.y1;
 800865e:	8a60      	ldrh	r0, [r4, #18]
    return area_p->x2 - area_p->x1 + 1;
 8008660:	f10e 0e01 	add.w	lr, lr, #1
    return area_p->y2 - area_p->y1 + 1;
 8008664:	3201      	adds	r2, #1
    return area_p->x2 - area_p->x1 + 1;
 8008666:	ebae 0e09 	sub.w	lr, lr, r9
    return area_p->y2 - area_p->y1 + 1;
 800866a:	eba2 020c 	sub.w	r2, r2, ip
    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
 800866e:	f04f 0a02 	mov.w	sl, #2
{
 8008672:	4698      	mov	r8, r3
    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
 8008674:	fa0f fe8e 	sxth.w	lr, lr
    rel_x             = obj->coords.x1 - parent->coords.x1;
 8008678:	8a23      	ldrh	r3, [r4, #16]
    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
 800867a:	fb9e fefa 	sdiv	lr, lr, sl
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
 800867e:	b212      	sxth	r2, r2
    if(base == NULL) {
 8008680:	2900      	cmp	r1, #0
 8008682:	bf18      	it	ne
 8008684:	460c      	movne	r4, r1
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
 8008686:	fb92 f2fa 	sdiv	r2, r2, sl
    switch(align) {
 800868a:	2e14      	cmp	r6, #20
 800868c:	d80c      	bhi.n	80086a8 <lv_obj_align_origo+0x66>
 800868e:	e8df f006 	tbb	[pc, r6]
 8008692:	672e      	.short	0x672e
 8008694:	597c894b 	.word	0x597c894b
 8008698:	67916c9b 	.word	0x67916c9b
 800869c:	597c894b 	.word	0x597c894b
 80086a0:	7c6c679b 	.word	0x7c6c679b
 80086a4:	9189      	.short	0x9189
 80086a6:	9b          	.byte	0x9b
 80086a7:	00          	.byte	0x00
    rel_x             = obj->coords.x1 - parent->coords.x1;
 80086a8:	eba9 0103 	sub.w	r1, r9, r3
 80086ac:	b209      	sxth	r1, r1
    rel_y             = obj->coords.y1 - parent->coords.y1;
 80086ae:	ebac 0200 	sub.w	r2, ip, r0
    new_x -= par_abs_x;
 80086b2:	f8b4 e010 	ldrh.w	lr, [r4, #16]
 80086b6:	eba8 0303 	sub.w	r3, r8, r3
 80086ba:	4473      	add	r3, lr
 80086bc:	4419      	add	r1, r3
    new_y -= par_abs_y;
 80086be:	8a63      	ldrh	r3, [r4, #18]
 80086c0:	1a38      	subs	r0, r7, r0
 80086c2:	4418      	add	r0, r3
            new_y = lv_obj_get_height(base) - obj_h_half;
 80086c4:	b212      	sxth	r2, r2
    new_y -= par_abs_y;
 80086c6:	4402      	add	r2, r0
    lv_obj_set_pos(obj, new_x, new_y);
 80086c8:	b212      	sxth	r2, r2
 80086ca:	b209      	sxth	r1, r1
 80086cc:	4628      	mov	r0, r5
 80086ce:	f7ff fe22 	bl	8008316 <lv_obj_set_pos>
    obj->realign.origo_align = 1;
 80086d2:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
    obj->realign.align       = align;
 80086d6:	f885 6040 	strb.w	r6, [r5, #64]	; 0x40
    obj->realign.origo_align = 1;
 80086da:	f043 0302 	orr.w	r3, r3, #2
    obj->realign.xofs        = x_mod;
 80086de:	f8a5 803c 	strh.w	r8, [r5, #60]	; 0x3c
    obj->realign.yofs        = y_mod;
 80086e2:	87ef      	strh	r7, [r5, #62]	; 0x3e
    obj->realign.base        = base;
 80086e4:	63ac      	str	r4, [r5, #56]	; 0x38
    obj->realign.origo_align = 1;
 80086e6:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
 80086ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return area_p->x2 - area_p->x1 + 1;
 80086ee:	8aa1      	ldrh	r1, [r4, #20]
 80086f0:	f8b4 c010 	ldrh.w	ip, [r4, #16]
    return area_p->y2 - area_p->y1 + 1;
 80086f4:	f8b4 9012 	ldrh.w	r9, [r4, #18]
    return area_p->x2 - area_p->x1 + 1;
 80086f8:	3101      	adds	r1, #1
 80086fa:	eba1 010c 	sub.w	r1, r1, ip
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 80086fe:	b209      	sxth	r1, r1
 8008700:	f04f 0c02 	mov.w	ip, #2
 8008704:	fb91 f1fc 	sdiv	r1, r1, ip
 8008708:	eba1 010e 	sub.w	r1, r1, lr
    return area_p->y2 - area_p->y1 + 1;
 800870c:	f8b4 e016 	ldrh.w	lr, [r4, #22]
 8008710:	f10e 0e01 	add.w	lr, lr, #1
 8008714:	ebae 0e09 	sub.w	lr, lr, r9
 8008718:	b209      	sxth	r1, r1
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 800871a:	fa0f fe8e 	sxth.w	lr, lr
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 800871e:	fb9e fefc 	sdiv	lr, lr, ip
 8008722:	ebae 0202 	sub.w	r2, lr, r2
 8008726:	e7c4      	b.n	80086b2 <lv_obj_align_origo+0x70>
    return area_p->x2 - area_p->x1 + 1;
 8008728:	8aa1      	ldrh	r1, [r4, #20]
 800872a:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 800872e:	3101      	adds	r1, #1
 8008730:	eba1 010c 	sub.w	r1, r1, ip
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 8008734:	b209      	sxth	r1, r1
 8008736:	f04f 0c02 	mov.w	ip, #2
 800873a:	fb91 f1fc 	sdiv	r1, r1, ip
            new_x = lv_obj_get_width(base) - obj_w_half;
 800873e:	eba1 010e 	sub.w	r1, r1, lr
 8008742:	e00f      	b.n	8008764 <lv_obj_align_origo+0x122>
 8008744:	8aa1      	ldrh	r1, [r4, #20]
 8008746:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 800874a:	3101      	adds	r1, #1
 800874c:	eba1 010c 	sub.w	r1, r1, ip
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 8008750:	b209      	sxth	r1, r1
 8008752:	f04f 0c02 	mov.w	ip, #2
 8008756:	fb91 f1fc 	sdiv	r1, r1, ip
            new_x = lv_obj_get_width(base) - obj_w_half;
 800875a:	eba1 010e 	sub.w	r1, r1, lr
 800875e:	e016      	b.n	800878e <lv_obj_align_origo+0x14c>
            new_x = -obj_w_half;
 8008760:	f1ce 0100 	rsb	r1, lr, #0
            new_x = lv_obj_get_width(base) - obj_w_half;
 8008764:	b209      	sxth	r1, r1
            new_y = -obj_h_half;
 8008766:	4252      	negs	r2, r2
 8008768:	e7a3      	b.n	80086b2 <lv_obj_align_origo+0x70>
            new_x = -obj_w_half;
 800876a:	f1ce 0100 	rsb	r1, lr, #0
    return area_p->y2 - area_p->y1 + 1;
 800876e:	f8b4 e016 	ldrh.w	lr, [r4, #22]
 8008772:	f8b4 c012 	ldrh.w	ip, [r4, #18]
 8008776:	f10e 0e01 	add.w	lr, lr, #1
 800877a:	ebae 0e0c 	sub.w	lr, lr, ip
            new_x = lv_obj_get_width(base) - obj_w_half;
 800877e:	b209      	sxth	r1, r1
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 8008780:	fa0f fe8e 	sxth.w	lr, lr
 8008784:	f04f 0c02 	mov.w	ip, #2
 8008788:	e7c9      	b.n	800871e <lv_obj_align_origo+0xdc>
            new_x = -obj_w_half;
 800878a:	f1ce 0100 	rsb	r1, lr, #0
            new_y = lv_obj_get_height(base) - obj_h_half;
 800878e:	f8b4 e016 	ldrh.w	lr, [r4, #22]
 8008792:	f1c2 0201 	rsb	r2, r2, #1
 8008796:	4472      	add	r2, lr
 8008798:	f8b4 e012 	ldrh.w	lr, [r4, #18]
            new_x = lv_obj_get_width(base) - obj_w_half;
 800879c:	b209      	sxth	r1, r1
            new_y = lv_obj_get_height(base) - obj_h_half;
 800879e:	eba2 020e 	sub.w	r2, r2, lr
 80087a2:	e786      	b.n	80086b2 <lv_obj_align_origo+0x70>
            new_x = lv_obj_get_width(base) - obj_w_half;
 80087a4:	f1ce 0101 	rsb	r1, lr, #1
 80087a8:	f8b4 e014 	ldrh.w	lr, [r4, #20]
 80087ac:	4471      	add	r1, lr
 80087ae:	f8b4 e010 	ldrh.w	lr, [r4, #16]
 80087b2:	e7c4      	b.n	800873e <lv_obj_align_origo+0xfc>
            new_x = lv_obj_get_width(base) - obj_w_half;
 80087b4:	f1ce 0101 	rsb	r1, lr, #1
 80087b8:	f8b4 e014 	ldrh.w	lr, [r4, #20]
 80087bc:	4471      	add	r1, lr
 80087be:	f8b4 e010 	ldrh.w	lr, [r4, #16]
 80087c2:	eba1 010e 	sub.w	r1, r1, lr
 80087c6:	e7d2      	b.n	800876e <lv_obj_align_origo+0x12c>
            new_x = lv_obj_get_width(base) - obj_w_half;
 80087c8:	f1ce 0101 	rsb	r1, lr, #1
 80087cc:	f8b4 e014 	ldrh.w	lr, [r4, #20]
 80087d0:	4471      	add	r1, lr
 80087d2:	f8b4 e010 	ldrh.w	lr, [r4, #16]
 80087d6:	e7c0      	b.n	800875a <lv_obj_align_origo+0x118>

080087d8 <lv_obj_realign>:
{
 80087d8:	b513      	push	{r0, r1, r4, lr}
    if(obj->realign.origo_align)
 80087da:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80087de:	f9b0 403e 	ldrsh.w	r4, [r0, #62]	; 0x3e
 80087e2:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
        lv_obj_align_origo(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 80087e6:	9400      	str	r4, [sp, #0]
    if(obj->realign.origo_align)
 80087e8:	f013 0f02 	tst.w	r3, #2
        lv_obj_align_origo(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 80087ec:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80087ee:	f9b0 303c 	ldrsh.w	r3, [r0, #60]	; 0x3c
    if(obj->realign.origo_align)
 80087f2:	d003      	beq.n	80087fc <lv_obj_realign+0x24>
        lv_obj_align_origo(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 80087f4:	f7ff ff25 	bl	8008642 <lv_obj_align_origo>
}
 80087f8:	b002      	add	sp, #8
 80087fa:	bd10      	pop	{r4, pc}
        lv_obj_align(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 80087fc:	f7ff fde0 	bl	80083c0 <lv_obj_align>
}
 8008800:	e7fa      	b.n	80087f8 <lv_obj_realign+0x20>
	...

08008804 <lv_obj_create>:
{
 8008804:	b570      	push	{r4, r5, r6, lr}
 8008806:	460d      	mov	r5, r1
    if(parent == NULL) {
 8008808:	4606      	mov	r6, r0
 800880a:	2800      	cmp	r0, #0
 800880c:	f040 80e6 	bne.w	80089dc <lv_obj_create+0x1d8>
        lv_disp_t * disp = lv_disp_get_default();
 8008810:	f004 fc02 	bl	800d018 <lv_disp_get_default>
        if(!disp) {
 8008814:	2800      	cmp	r0, #0
 8008816:	f000 8133 	beq.w	8008a80 <lv_obj_create+0x27c>
        new_obj = lv_ll_ins_head(&disp->scr_ll);
 800881a:	302c      	adds	r0, #44	; 0x2c
 800881c:	f004 ff3d 	bl	800d69a <lv_ll_ins_head>
        lv_mem_assert(new_obj);
 8008820:	4604      	mov	r4, r0
 8008822:	b900      	cbnz	r0, 8008826 <lv_obj_create+0x22>
 8008824:	e7fe      	b.n	8008824 <lv_obj_create+0x20>
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 8008826:	2144      	movs	r1, #68	; 0x44
        new_obj->par = NULL; /*Screens has no a parent*/
 8008828:	f840 6b04 	str.w	r6, [r0], #4
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 800882c:	f004 ff2b 	bl	800d686 <lv_ll_init>
        new_obj->coords.x1    = 0;
 8008830:	8226      	strh	r6, [r4, #16]
        new_obj->coords.y1    = 0;
 8008832:	8266      	strh	r6, [r4, #18]
        new_obj->coords.x2    = lv_disp_get_hor_res(NULL) - 1;
 8008834:	4630      	mov	r0, r6
 8008836:	f004 fbf5 	bl	800d024 <lv_disp_get_hor_res>
 800883a:	3801      	subs	r0, #1
 800883c:	82a0      	strh	r0, [r4, #20]
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
 800883e:	4630      	mov	r0, r6
 8008840:	f004 fc00 	bl	800d044 <lv_disp_get_ver_res>
        new_obj->realign.auto_realign = 0;
 8008844:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
        new_obj->ext_draw_pad = 0;
 8008848:	86a6      	strh	r6, [r4, #52]	; 0x34
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
 800884a:	3801      	subs	r0, #1
        new_obj->realign.auto_realign = 0;
 800884c:	f366 0300 	bfi	r3, r6, #0, #1
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
 8008850:	82e0      	strh	r0, [r4, #22]
        new_obj->realign.align        = LV_ALIGN_CENTER;
 8008852:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
        new_obj->realign.xofs         = 0;
 8008856:	87a6      	strh	r6, [r4, #60]	; 0x3c
        new_obj->realign.yofs         = 0;
 8008858:	87e6      	strh	r6, [r4, #62]	; 0x3e
        new_obj->realign.base         = NULL;
 800885a:	63a6      	str	r6, [r4, #56]	; 0x38
        new_obj->realign.auto_realign = 0;
 800885c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        lv_theme_t * th = lv_theme_get_current();
 8008860:	f006 fad2 	bl	800ee08 <lv_theme_get_current>
        if(th) {
 8008864:	2800      	cmp	r0, #0
 8008866:	f000 80b7 	beq.w	80089d8 <lv_obj_create+0x1d4>
            new_obj->style_p = th->style.scr;
 800886a:	6803      	ldr	r3, [r0, #0]
        new_obj->click        = 0;
 800886c:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
            new_obj->style_p = &lv_style_scr;
 8008870:	62a3      	str	r3, [r4, #40]	; 0x28
    obj->signal_cb = signal_cb;
 8008872:	4b84      	ldr	r3, [pc, #528]	; (8008a84 <lv_obj_create+0x280>)
 8008874:	61e3      	str	r3, [r4, #28]
    obj->design_cb = design_cb;
 8008876:	4b84      	ldr	r3, [pc, #528]	; (8008a88 <lv_obj_create+0x284>)
 8008878:	6223      	str	r3, [r4, #32]
        new_obj->parent_event = 0;
 800887a:	f002 0280 	and.w	r2, r2, #128	; 0x80
        new_obj->event_cb = NULL;
 800887e:	2300      	movs	r3, #0
        new_obj->parent_event = 0;
 8008880:	f363 12c7 	bfi	r2, r3, #7, #1
 8008884:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->reserved     = 0;
 8008888:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
        new_obj->event_cb = NULL;
 800888c:	61a3      	str	r3, [r4, #24]
        new_obj->opa_scale    = LV_OPA_COVER;
 800888e:	21ff      	movs	r1, #255	; 0xff
        new_obj->reserved     = 0;
 8008890:	f363 0287 	bfi	r2, r3, #2, #6
        new_obj->group_p = NULL;
 8008894:	62e3      	str	r3, [r4, #44]	; 0x2c
        new_obj->protect      = LV_PROTECT_NONE;
 8008896:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
        new_obj->opa_scale    = LV_OPA_COVER;
 800889a:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
        new_obj->reserved     = 0;
 800889e:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
        new_obj->ext_attr = NULL;
 80088a2:	6263      	str	r3, [r4, #36]	; 0x24
    if(copy != NULL) {
 80088a4:	2d00      	cmp	r5, #0
 80088a6:	f000 80e7 	beq.w	8008a78 <lv_obj_create+0x274>
    memcpy(dest, src, sizeof(lv_area_t));
 80088aa:	462a      	mov	r2, r5
 80088ac:	f852 3f10 	ldr.w	r3, [r2, #16]!
 80088b0:	6123      	str	r3, [r4, #16]
 80088b2:	6853      	ldr	r3, [r2, #4]
 80088b4:	6163      	str	r3, [r4, #20]
        new_obj->ext_draw_pad = copy->ext_draw_pad;
 80088b6:	f9b5 3034 	ldrsh.w	r3, [r5, #52]	; 0x34
 80088ba:	86a3      	strh	r3, [r4, #52]	; 0x34
        new_obj->realign.align        = copy->realign.align;
 80088bc:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 80088c0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        new_obj->realign.xofs         = copy->realign.xofs;
 80088c4:	f9b5 303c 	ldrsh.w	r3, [r5, #60]	; 0x3c
 80088c8:	87a3      	strh	r3, [r4, #60]	; 0x3c
        new_obj->realign.yofs         = copy->realign.yofs;
 80088ca:	f9b5 303e 	ldrsh.w	r3, [r5, #62]	; 0x3e
 80088ce:	87e3      	strh	r3, [r4, #62]	; 0x3e
        new_obj->realign.base         = copy->realign.base;
 80088d0:	6bab      	ldr	r3, [r5, #56]	; 0x38
        new_obj->realign.auto_realign = copy->realign.auto_realign;
 80088d2:	f895 2041 	ldrb.w	r2, [r5, #65]	; 0x41
        new_obj->realign.base         = copy->realign.base;
 80088d6:	63a3      	str	r3, [r4, #56]	; 0x38
        new_obj->realign.auto_realign = copy->realign.auto_realign;
 80088d8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80088dc:	f362 0300 	bfi	r3, r2, #0, #1
 80088e0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        new_obj->event_cb = copy->event_cb;
 80088e4:	69ab      	ldr	r3, [r5, #24]
        new_obj->click        = copy->click;
 80088e6:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
        new_obj->event_cb = copy->event_cb;
 80088ea:	61a3      	str	r3, [r4, #24]
        new_obj->click        = copy->click;
 80088ec:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80088f0:	f362 0300 	bfi	r3, r2, #0, #1
 80088f4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        new_obj->drag         = copy->drag;
 80088f8:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 80088fc:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8008900:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008904:	f363 0241 	bfi	r2, r3, #1, #1
 8008908:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->drag_dir     = copy->drag_dir;
 800890c:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
 8008910:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8008914:	f362 0301 	bfi	r3, r2, #0, #2
 8008918:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
        new_obj->drag_throw   = copy->drag_throw;
 800891c:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8008920:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8008924:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008928:	f363 0282 	bfi	r2, r3, #2, #1
 800892c:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->drag_parent  = copy->drag_parent;
 8008930:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8008934:	b2d2      	uxtb	r2, r2
 8008936:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800893a:	f363 02c3 	bfi	r2, r3, #3, #1
 800893e:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->hidden       = copy->hidden;
 8008942:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8008946:	b2d2      	uxtb	r2, r2
 8008948:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800894c:	f363 1204 	bfi	r2, r3, #4, #1
 8008950:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->top          = copy->top;
 8008954:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8008958:	b2d2      	uxtb	r2, r2
 800895a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800895e:	f363 1245 	bfi	r2, r3, #5, #1
 8008962:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->parent_event = copy->parent_event;
 8008966:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800896a:	b2d2      	uxtb	r2, r2
 800896c:	09db      	lsrs	r3, r3, #7
 800896e:	f363 12c7 	bfi	r2, r3, #7, #1
 8008972:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->opa_scale_en = copy->opa_scale_en;
 8008976:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800897a:	b2d2      	uxtb	r2, r2
 800897c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8008980:	f363 1286 	bfi	r2, r3, #6, #1
 8008984:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->protect      = copy->protect;
 8008988:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
 800898c:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
        new_obj->opa_scale    = copy->opa_scale;
 8008990:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
 8008994:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
        if(copy->group_p != NULL) {
 8008998:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
        new_obj->style_p = copy->style_p;
 800899a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800899c:	62a3      	str	r3, [r4, #40]	; 0x28
        if(copy->group_p != NULL) {
 800899e:	b110      	cbz	r0, 80089a6 <lv_obj_create+0x1a2>
            lv_group_add_obj(copy->group_p, new_obj);
 80089a0:	4621      	mov	r1, r4
 80089a2:	f7ff fb19 	bl	8007fd8 <lv_group_add_obj>
    return obj->par;
 80089a6:	682b      	ldr	r3, [r5, #0]
        if(lv_obj_get_parent(copy) != NULL && parent != NULL) {
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d060      	beq.n	8008a6e <lv_obj_create+0x26a>
 80089ac:	2e00      	cmp	r6, #0
 80089ae:	d05e      	beq.n	8008a6e <lv_obj_create+0x26a>
    rel_y             = obj->coords.y1 - parent->coords.y1;
 80089b0:	8a59      	ldrh	r1, [r3, #18]
 80089b2:	8a6a      	ldrh	r2, [r5, #18]
    rel_x             = obj->coords.x1 - parent->coords.x1;
 80089b4:	8a1b      	ldrh	r3, [r3, #16]
    rel_y             = obj->coords.y1 - parent->coords.y1;
 80089b6:	1a52      	subs	r2, r2, r1
    rel_x             = obj->coords.x1 - parent->coords.x1;
 80089b8:	8a29      	ldrh	r1, [r5, #16]
 80089ba:	1ac9      	subs	r1, r1, r3
            lv_obj_set_pos(new_obj, lv_obj_get_x(copy), lv_obj_get_y(copy));
 80089bc:	b212      	sxth	r2, r2
 80089be:	b209      	sxth	r1, r1
 80089c0:	4620      	mov	r0, r4
 80089c2:	f7ff fca8 	bl	8008316 <lv_obj_set_pos>
        parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, new_obj);
 80089c6:	69f3      	ldr	r3, [r6, #28]
 80089c8:	4622      	mov	r2, r4
 80089ca:	2101      	movs	r1, #1
 80089cc:	4630      	mov	r0, r6
 80089ce:	4798      	blx	r3
        lv_obj_invalidate(new_obj);
 80089d0:	4620      	mov	r0, r4
 80089d2:	f7ff fc33 	bl	800823c <lv_obj_invalidate>
 80089d6:	e051      	b.n	8008a7c <lv_obj_create+0x278>
            new_obj->style_p = &lv_style_scr;
 80089d8:	4b2c      	ldr	r3, [pc, #176]	; (8008a8c <lv_obj_create+0x288>)
 80089da:	e747      	b.n	800886c <lv_obj_create+0x68>
        new_obj = lv_ll_ins_head(&parent->child_ll);
 80089dc:	3004      	adds	r0, #4
 80089de:	f004 fe5c 	bl	800d69a <lv_ll_ins_head>
        lv_mem_assert(new_obj);
 80089e2:	4604      	mov	r4, r0
 80089e4:	b900      	cbnz	r0, 80089e8 <lv_obj_create+0x1e4>
 80089e6:	e7fe      	b.n	80089e6 <lv_obj_create+0x1e2>
        new_obj->par = parent; /*Set the parent*/
 80089e8:	f840 6b04 	str.w	r6, [r0], #4
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 80089ec:	2144      	movs	r1, #68	; 0x44
 80089ee:	f004 fe4a 	bl	800d686 <lv_ll_init>
        new_obj->coords.x1    = parent->coords.x1;
 80089f2:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
 80089f6:	8223      	strh	r3, [r4, #16]
        new_obj->coords.y1    = parent->coords.y1;
 80089f8:	f9b6 3012 	ldrsh.w	r3, [r6, #18]
 80089fc:	8263      	strh	r3, [r4, #18]
        new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
 80089fe:	8a33      	ldrh	r3, [r6, #16]
        new_obj->realign.auto_realign = 0;
 8008a00:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
        new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
 8008a04:	3319      	adds	r3, #25
 8008a06:	82a3      	strh	r3, [r4, #20]
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
 8008a08:	8a73      	ldrh	r3, [r6, #18]
 8008a0a:	3310      	adds	r3, #16
 8008a0c:	82e3      	strh	r3, [r4, #22]
        new_obj->ext_draw_pad = 0;
 8008a0e:	2300      	movs	r3, #0
        new_obj->realign.auto_realign = 0;
 8008a10:	f363 0200 	bfi	r2, r3, #0, #1
        new_obj->ext_draw_pad = 0;
 8008a14:	86a3      	strh	r3, [r4, #52]	; 0x34
        new_obj->realign.align        = LV_ALIGN_CENTER;
 8008a16:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        new_obj->realign.xofs         = 0;
 8008a1a:	87a3      	strh	r3, [r4, #60]	; 0x3c
        new_obj->realign.yofs         = 0;
 8008a1c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        new_obj->realign.base         = NULL;
 8008a1e:	63a3      	str	r3, [r4, #56]	; 0x38
        new_obj->realign.auto_realign = 0;
 8008a20:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        lv_theme_t * th = lv_theme_get_current();
 8008a24:	f006 f9f0 	bl	800ee08 <lv_theme_get_current>
        if(th) {
 8008a28:	b1f8      	cbz	r0, 8008a6a <lv_obj_create+0x266>
            new_obj->style_p = th->style.panel;
 8008a2a:	6883      	ldr	r3, [r0, #8]
            new_obj->style_p = &lv_style_plain_color;
 8008a2c:	62a3      	str	r3, [r4, #40]	; 0x28
    obj->signal_cb = signal_cb;
 8008a2e:	4b15      	ldr	r3, [pc, #84]	; (8008a84 <lv_obj_create+0x280>)
 8008a30:	61e3      	str	r3, [r4, #28]
    obj->design_cb = design_cb;
 8008a32:	4b15      	ldr	r3, [pc, #84]	; (8008a88 <lv_obj_create+0x284>)
 8008a34:	6223      	str	r3, [r4, #32]
        new_obj->click        = 1;
 8008a36:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
        new_obj->drag_dir     = LV_DRAG_DIR_ALL;
 8008a3a:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
        new_obj->drag         = 0;
 8008a3e:	f043 0301 	orr.w	r3, r3, #1
        new_obj->event_cb = NULL;
 8008a42:	2200      	movs	r2, #0
        new_obj->drag_dir     = LV_DRAG_DIR_ALL;
 8008a44:	f041 0103 	orr.w	r1, r1, #3
        new_obj->parent_event = 0;
 8008a48:	f003 0381 	and.w	r3, r3, #129	; 0x81
        new_obj->drag_dir     = LV_DRAG_DIR_ALL;
 8008a4c:	f884 1031 	strb.w	r1, [r4, #49]	; 0x31
        new_obj->parent_event = 0;
 8008a50:	f362 13c7 	bfi	r3, r2, #7, #1
        new_obj->opa_scale    = LV_OPA_COVER;
 8008a54:	21ff      	movs	r1, #255	; 0xff
        new_obj->event_cb = NULL;
 8008a56:	61a2      	str	r2, [r4, #24]
        new_obj->group_p = NULL;
 8008a58:	62e2      	str	r2, [r4, #44]	; 0x2c
        new_obj->protect      = LV_PROTECT_NONE;
 8008a5a:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
        new_obj->opa_scale    = LV_OPA_COVER;
 8008a5e:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
        new_obj->parent_event = 0;
 8008a62:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        new_obj->ext_attr = NULL;
 8008a66:	6262      	str	r2, [r4, #36]	; 0x24
 8008a68:	e71c      	b.n	80088a4 <lv_obj_create+0xa0>
            new_obj->style_p = &lv_style_plain_color;
 8008a6a:	4b09      	ldr	r3, [pc, #36]	; (8008a90 <lv_obj_create+0x28c>)
 8008a6c:	e7de      	b.n	8008a2c <lv_obj_create+0x228>
            lv_obj_set_pos(new_obj, 0, 0);
 8008a6e:	2200      	movs	r2, #0
 8008a70:	4611      	mov	r1, r2
 8008a72:	4620      	mov	r0, r4
 8008a74:	f7ff fc4f 	bl	8008316 <lv_obj_set_pos>
    if(parent != NULL) {
 8008a78:	2e00      	cmp	r6, #0
 8008a7a:	d1a4      	bne.n	80089c6 <lv_obj_create+0x1c2>
}
 8008a7c:	4620      	mov	r0, r4
 8008a7e:	bd70      	pop	{r4, r5, r6, pc}
            return NULL;
 8008a80:	4604      	mov	r4, r0
 8008a82:	e7fb      	b.n	8008a7c <lv_obj_create+0x278>
 8008a84:	08008c45 	.word	0x08008c45
 8008a88:	08008cb3 	.word	0x08008cb3
 8008a8c:	2000d828 	.word	0x2000d828
 8008a90:	2000d8a0 	.word	0x2000d8a0

08008a94 <lv_obj_set_size>:
    return area_p->x2 - area_p->x1 + 1;
 8008a94:	8a83      	ldrh	r3, [r0, #20]
{
 8008a96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008a98:	4616      	mov	r6, r2
 8008a9a:	8a02      	ldrh	r2, [r0, #16]
 8008a9c:	3301      	adds	r3, #1
 8008a9e:	1a9b      	subs	r3, r3, r2
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
 8008aa0:	b21b      	sxth	r3, r3
 8008aa2:	4299      	cmp	r1, r3
{
 8008aa4:	4604      	mov	r4, r0
 8008aa6:	460d      	mov	r5, r1
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
 8008aa8:	d106      	bne.n	8008ab8 <lv_obj_set_size+0x24>
    return area_p->y2 - area_p->y1 + 1;
 8008aaa:	8ac3      	ldrh	r3, [r0, #22]
 8008aac:	8a42      	ldrh	r2, [r0, #18]
 8008aae:	3301      	adds	r3, #1
 8008ab0:	1a9b      	subs	r3, r3, r2
 8008ab2:	b21b      	sxth	r3, r3
 8008ab4:	429e      	cmp	r6, r3
 8008ab6:	d02b      	beq.n	8008b10 <lv_obj_set_size+0x7c>
    lv_obj_invalidate(obj);
 8008ab8:	4620      	mov	r0, r4
 8008aba:	f7ff fbbf 	bl	800823c <lv_obj_invalidate>
    memcpy(dest, src, sizeof(lv_area_t));
 8008abe:	4622      	mov	r2, r4
 8008ac0:	466b      	mov	r3, sp
 8008ac2:	f852 0f10 	ldr.w	r0, [r2, #16]!
 8008ac6:	6851      	ldr	r1, [r2, #4]
    obj->coords.y2 = obj->coords.y1 + h - 1;
 8008ac8:	8a62      	ldrh	r2, [r4, #18]
 8008aca:	c303      	stmia	r3!, {r0, r1}
    obj->coords.x2 = obj->coords.x1 + w - 1;
 8008acc:	8a23      	ldrh	r3, [r4, #16]
 8008ace:	3d01      	subs	r5, #1
    obj->coords.y2 = obj->coords.y1 + h - 1;
 8008ad0:	3e01      	subs	r6, #1
    obj->coords.x2 = obj->coords.x1 + w - 1;
 8008ad2:	441d      	add	r5, r3
    obj->coords.y2 = obj->coords.y1 + h - 1;
 8008ad4:	4416      	add	r6, r2
    obj->coords.x2 = obj->coords.x1 + w - 1;
 8008ad6:	82a5      	strh	r5, [r4, #20]
    obj->coords.y2 = obj->coords.y1 + h - 1;
 8008ad8:	82e6      	strh	r6, [r4, #22]
    obj->signal_cb(obj, LV_SIGNAL_CORD_CHG, &ori);
 8008ada:	69e3      	ldr	r3, [r4, #28]
 8008adc:	466a      	mov	r2, sp
 8008ade:	2102      	movs	r1, #2
 8008ae0:	4620      	mov	r0, r4
 8008ae2:	4798      	blx	r3
    return obj->par;
 8008ae4:	6820      	ldr	r0, [r4, #0]
    if(par != NULL) par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
 8008ae6:	b118      	cbz	r0, 8008af0 <lv_obj_set_size+0x5c>
 8008ae8:	69c3      	ldr	r3, [r0, #28]
 8008aea:	4622      	mov	r2, r4
 8008aec:	2101      	movs	r1, #1
 8008aee:	4798      	blx	r3
    LV_LL_READ(obj->child_ll, i)
 8008af0:	1d26      	adds	r6, r4, #4
 8008af2:	4630      	mov	r0, r6
 8008af4:	f004 fe0d 	bl	800d712 <lv_ll_get_head>
 8008af8:	4605      	mov	r5, r0
 8008afa:	b958      	cbnz	r0, 8008b14 <lv_obj_set_size+0x80>
    lv_obj_invalidate(obj);
 8008afc:	4620      	mov	r0, r4
 8008afe:	f7ff fb9d 	bl	800823c <lv_obj_invalidate>
    if(obj->realign.auto_realign) lv_obj_realign(obj);
 8008b02:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8008b06:	07db      	lsls	r3, r3, #31
 8008b08:	d502      	bpl.n	8008b10 <lv_obj_set_size+0x7c>
 8008b0a:	4620      	mov	r0, r4
 8008b0c:	f7ff fe64 	bl	80087d8 <lv_obj_realign>
}
 8008b10:	b002      	add	sp, #8
 8008b12:	bd70      	pop	{r4, r5, r6, pc}
        i->signal_cb(i, LV_SIGNAL_PARENT_SIZE_CHG, NULL);
 8008b14:	69eb      	ldr	r3, [r5, #28]
 8008b16:	2200      	movs	r2, #0
 8008b18:	2103      	movs	r1, #3
 8008b1a:	4628      	mov	r0, r5
 8008b1c:	4798      	blx	r3
    LV_LL_READ(obj->child_ll, i)
 8008b1e:	4629      	mov	r1, r5
 8008b20:	4630      	mov	r0, r6
 8008b22:	f004 fdfc 	bl	800d71e <lv_ll_get_next>
 8008b26:	e7e7      	b.n	8008af8 <lv_obj_set_size+0x64>

08008b28 <lv_obj_set_height>:
    return area_p->x2 - area_p->x1 + 1;
 8008b28:	8a83      	ldrh	r3, [r0, #20]
 8008b2a:	8a02      	ldrh	r2, [r0, #16]
 8008b2c:	3301      	adds	r3, #1
 8008b2e:	1a9b      	subs	r3, r3, r2
    lv_obj_set_size(obj, lv_obj_get_width(obj), h);
 8008b30:	460a      	mov	r2, r1
 8008b32:	b219      	sxth	r1, r3
 8008b34:	f7ff bfae 	b.w	8008a94 <lv_obj_set_size>

08008b38 <lv_obj_refresh_style>:
{
 8008b38:	b510      	push	{r4, lr}
 8008b3a:	4604      	mov	r4, r0
    lv_obj_invalidate(obj);
 8008b3c:	f7ff fb7e 	bl	800823c <lv_obj_invalidate>
    obj->signal_cb(obj, LV_SIGNAL_STYLE_CHG, NULL);
 8008b40:	69e3      	ldr	r3, [r4, #28]
 8008b42:	4620      	mov	r0, r4
 8008b44:	2200      	movs	r2, #0
 8008b46:	2104      	movs	r1, #4
 8008b48:	4798      	blx	r3
    lv_obj_invalidate(obj);
 8008b4a:	4620      	mov	r0, r4
}
 8008b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_invalidate(obj);
 8008b50:	f7ff bb74 	b.w	800823c <lv_obj_invalidate>

08008b54 <lv_obj_refresh_ext_draw_pad>:
{
 8008b54:	b510      	push	{r4, lr}
    obj->ext_draw_pad = 0;
 8008b56:	2200      	movs	r2, #0
{
 8008b58:	4604      	mov	r4, r0
    obj->ext_draw_pad = 0;
 8008b5a:	8682      	strh	r2, [r0, #52]	; 0x34
    obj->signal_cb(obj, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
 8008b5c:	69c3      	ldr	r3, [r0, #28]
 8008b5e:	2105      	movs	r1, #5
 8008b60:	4798      	blx	r3
    lv_obj_invalidate(obj);
 8008b62:	4620      	mov	r0, r4
}
 8008b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_invalidate(obj);
 8008b68:	f7ff bb68 	b.w	800823c <lv_obj_invalidate>

08008b6c <lv_obj_get_parent>:
}
 8008b6c:	6800      	ldr	r0, [r0, #0]
 8008b6e:	4770      	bx	lr

08008b70 <lv_obj_get_child>:
{
 8008b70:	3004      	adds	r0, #4
    if(child == NULL) {
 8008b72:	b909      	cbnz	r1, 8008b78 <lv_obj_get_child+0x8>
        result = lv_ll_get_head(&obj->child_ll);
 8008b74:	f004 bdcd 	b.w	800d712 <lv_ll_get_head>
        result = lv_ll_get_next(&obj->child_ll, child);
 8008b78:	f004 bdd1 	b.w	800d71e <lv_ll_get_next>

08008b7c <refresh_children_style>:
 * Recursively refresh the style of the children. Go deeper until a not NULL style is found
 * because the NULL styles are inherited from the parent
 * @param obj pointer to an object
 */
static void refresh_children_style(lv_obj_t * obj)
{
 8008b7c:	b538      	push	{r3, r4, r5, lr}
 8008b7e:	4605      	mov	r5, r0
        result = lv_ll_get_head(&obj->child_ll);
 8008b80:	3004      	adds	r0, #4
 8008b82:	f004 fdc6 	bl	800d712 <lv_ll_get_head>
            lv_obj_refresh_style(child);   /*Notify the child about the style change*/
        } else if(child->style_p->glass) {
            /*Children with 'glass' parent might be effected if their style == NULL*/
            refresh_children_style(child);
        }
        child = lv_obj_get_child(obj, child);
 8008b86:	4604      	mov	r4, r0
    while(child != NULL) {
 8008b88:	b900      	cbnz	r0, 8008b8c <refresh_children_style+0x10>
    }
}
 8008b8a:	bd38      	pop	{r3, r4, r5, pc}
        if(child->style_p == NULL) {
 8008b8c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008b8e:	b953      	cbnz	r3, 8008ba6 <refresh_children_style+0x2a>
            refresh_children_style(child); /*Check children too*/
 8008b90:	4620      	mov	r0, r4
 8008b92:	f7ff fff3 	bl	8008b7c <refresh_children_style>
            lv_obj_refresh_style(child);   /*Notify the child about the style change*/
 8008b96:	4620      	mov	r0, r4
 8008b98:	f7ff ffce 	bl	8008b38 <lv_obj_refresh_style>
        child = lv_obj_get_child(obj, child);
 8008b9c:	4621      	mov	r1, r4
 8008b9e:	4628      	mov	r0, r5
 8008ba0:	f7ff ffe6 	bl	8008b70 <lv_obj_get_child>
 8008ba4:	e7ef      	b.n	8008b86 <refresh_children_style+0xa>
        } else if(child->style_p->glass) {
 8008ba6:	781b      	ldrb	r3, [r3, #0]
 8008ba8:	07db      	lsls	r3, r3, #31
 8008baa:	d5f7      	bpl.n	8008b9c <refresh_children_style+0x20>
            refresh_children_style(child);
 8008bac:	4620      	mov	r0, r4
 8008bae:	f7ff ffe5 	bl	8008b7c <refresh_children_style>
 8008bb2:	e7f3      	b.n	8008b9c <refresh_children_style+0x20>

08008bb4 <lv_obj_set_style>:
{
 8008bb4:	b510      	push	{r4, lr}
 8008bb6:	4604      	mov	r4, r0
    obj->style_p = style;
 8008bb8:	6281      	str	r1, [r0, #40]	; 0x28
    refresh_children_style(obj);
 8008bba:	f7ff ffdf 	bl	8008b7c <refresh_children_style>
    lv_obj_refresh_style(obj);
 8008bbe:	4620      	mov	r0, r4
}
 8008bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_refresh_style(obj);
 8008bc4:	f7ff bfb8 	b.w	8008b38 <lv_obj_refresh_style>

08008bc8 <lv_obj_get_coords>:
    memcpy(dest, src, sizeof(lv_area_t));
 8008bc8:	f850 3f10 	ldr.w	r3, [r0, #16]!
 8008bcc:	600b      	str	r3, [r1, #0]
 8008bce:	6843      	ldr	r3, [r0, #4]
 8008bd0:	604b      	str	r3, [r1, #4]
 8008bd2:	4770      	bx	lr

08008bd4 <lv_obj_get_width>:
    return area_p->x2 - area_p->x1 + 1;
 8008bd4:	8a83      	ldrh	r3, [r0, #20]
 8008bd6:	8a00      	ldrh	r0, [r0, #16]
 8008bd8:	3301      	adds	r3, #1
 8008bda:	1a18      	subs	r0, r3, r0
}
 8008bdc:	b200      	sxth	r0, r0
 8008bde:	4770      	bx	lr

08008be0 <lv_obj_get_height>:
    return area_p->y2 - area_p->y1 + 1;
 8008be0:	8ac3      	ldrh	r3, [r0, #22]
 8008be2:	8a40      	ldrh	r0, [r0, #18]
 8008be4:	3301      	adds	r3, #1
 8008be6:	1a18      	subs	r0, r3, r0
}
 8008be8:	b200      	sxth	r0, r0
 8008bea:	4770      	bx	lr

08008bec <lv_obj_get_style>:
{
 8008bec:	b570      	push	{r4, r5, r6, lr}
    const lv_style_t * style_act = obj->style_p;
 8008bee:	6a85      	ldr	r5, [r0, #40]	; 0x28
{
 8008bf0:	4606      	mov	r6, r0
    if(style_act == NULL) {
 8008bf2:	b98d      	cbnz	r5, 8008c18 <lv_obj_get_style+0x2c>
        lv_obj_t * par = obj->par;
 8008bf4:	6804      	ldr	r4, [r0, #0]
        while(par) {
 8008bf6:	b17c      	cbz	r4, 8008c18 <lv_obj_get_style+0x2c>
            if(par->style_p) {
 8008bf8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008bfa:	b1fb      	cbz	r3, 8008c3c <lv_obj_get_style+0x50>
                if(par->style_p->glass == 0) {
 8008bfc:	781b      	ldrb	r3, [r3, #0]
 8008bfe:	07db      	lsls	r3, r3, #31
 8008c00:	d41c      	bmi.n	8008c3c <lv_obj_get_style+0x50>
    return obj->group_p;
 8008c02:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
                    if(lv_group_get_focused(g) == par) {
 8008c04:	4628      	mov	r0, r5
 8008c06:	f7ff fa25 	bl	8008054 <lv_group_get_focused>
 8008c0a:	4284      	cmp	r4, r0
 8008c0c:	d114      	bne.n	8008c38 <lv_obj_get_style+0x4c>
                        style_act = lv_group_mod_style(g, par->style_p);
 8008c0e:	4628      	mov	r0, r5
 8008c10:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8008c12:	f7ff fa0c 	bl	800802e <lv_group_mod_style>
 8008c16:	4605      	mov	r5, r0
    if(obj->group_p) {
 8008c18:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8008c1a:	b140      	cbz	r0, 8008c2e <lv_obj_get_style+0x42>
        if(lv_group_get_focused(obj->group_p) == obj) {
 8008c1c:	f7ff fa1a 	bl	8008054 <lv_group_get_focused>
 8008c20:	4286      	cmp	r6, r0
 8008c22:	d104      	bne.n	8008c2e <lv_obj_get_style+0x42>
            style_act = lv_group_mod_style(obj->group_p, style_act);
 8008c24:	4629      	mov	r1, r5
 8008c26:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8008c28:	f7ff fa01 	bl	800802e <lv_group_mod_style>
 8008c2c:	4605      	mov	r5, r0
}
 8008c2e:	4804      	ldr	r0, [pc, #16]	; (8008c40 <lv_obj_get_style+0x54>)
 8008c30:	2d00      	cmp	r5, #0
 8008c32:	bf18      	it	ne
 8008c34:	4628      	movne	r0, r5
 8008c36:	bd70      	pop	{r4, r5, r6, pc}
                        style_act = par->style_p;
 8008c38:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8008c3a:	e7ed      	b.n	8008c18 <lv_obj_get_style+0x2c>
            par = par->par;
 8008c3c:	6824      	ldr	r4, [r4, #0]
 8008c3e:	e7da      	b.n	8008bf6 <lv_obj_get_style+0xa>
 8008c40:	2000d7b0 	.word	0x2000d7b0

08008c44 <lv_obj_signal>:
{
 8008c44:	b570      	push	{r4, r5, r6, lr}
 8008c46:	460c      	mov	r4, r1
 8008c48:	4605      	mov	r5, r0
 8008c4a:	4616      	mov	r6, r2
    const lv_style_t * style = lv_obj_get_style(obj);
 8008c4c:	f7ff ffce 	bl	8008bec <lv_obj_get_style>
    if(sign == LV_SIGNAL_CHILD_CHG) {
 8008c50:	2c01      	cmp	r4, #1
 8008c52:	d105      	bne.n	8008c60 <lv_obj_signal+0x1c>
        if(lv_obj_is_protected(obj, LV_PROTECT_CHILD_CHG) != false) res = LV_RES_INV;
 8008c54:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
 8008c58:	43c0      	mvns	r0, r0
 8008c5a:	f000 0001 	and.w	r0, r0, #1
 8008c5e:	bd70      	pop	{r4, r5, r6, pc}
    } else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 8008c60:	2c05      	cmp	r4, #5
 8008c62:	d108      	bne.n	8008c76 <lv_obj_signal+0x32>
        if(style->body.shadow.width > obj->ext_draw_pad) obj->ext_draw_pad = style->body.shadow.width;
 8008c64:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
 8008c68:	f9b5 2034 	ldrsh.w	r2, [r5, #52]	; 0x34
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	da00      	bge.n	8008c72 <lv_obj_signal+0x2e>
 8008c70:	86ab      	strh	r3, [r5, #52]	; 0x34
    lv_res_t res = LV_RES_OK;
 8008c72:	2001      	movs	r0, #1
}
 8008c74:	bd70      	pop	{r4, r5, r6, pc}
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 8008c76:	2c04      	cmp	r4, #4
 8008c78:	d103      	bne.n	8008c82 <lv_obj_signal+0x3e>
        lv_obj_refresh_ext_draw_pad(obj);
 8008c7a:	4628      	mov	r0, r5
 8008c7c:	f7ff ff6a 	bl	8008b54 <lv_obj_refresh_ext_draw_pad>
 8008c80:	e7f7      	b.n	8008c72 <lv_obj_signal+0x2e>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8008c82:	2c06      	cmp	r4, #6
        buf->type[0]        = "lv_obj";
 8008c84:	bf04      	itt	eq
 8008c86:	4b01      	ldreq	r3, [pc, #4]	; (8008c8c <lv_obj_signal+0x48>)
 8008c88:	6033      	streq	r3, [r6, #0]
 8008c8a:	e7f2      	b.n	8008c72 <lv_obj_signal+0x2e>
 8008c8c:	0801231e 	.word	0x0801231e

08008c90 <lv_obj_get_hidden>:
    return obj->hidden == 0 ? false : true;
 8008c90:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
}
 8008c94:	f3c0 1000 	ubfx	r0, r0, #4, #1
 8008c98:	4770      	bx	lr

08008c9a <lv_obj_get_opa_scale>:
    while(parent) {
 8008c9a:	b908      	cbnz	r0, 8008ca0 <lv_obj_get_opa_scale+0x6>
    return LV_OPA_COVER;
 8008c9c:	20ff      	movs	r0, #255	; 0xff
}
 8008c9e:	4770      	bx	lr
        if(parent->opa_scale_en) return parent->opa_scale;
 8008ca0:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8008ca4:	065b      	lsls	r3, r3, #25
 8008ca6:	d502      	bpl.n	8008cae <lv_obj_get_opa_scale+0x14>
 8008ca8:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
 8008cac:	4770      	bx	lr
    return obj->par;
 8008cae:	6800      	ldr	r0, [r0, #0]
 8008cb0:	e7f3      	b.n	8008c9a <lv_obj_get_opa_scale>

08008cb2 <lv_obj_design>:
    if(mode == LV_DESIGN_COVER_CHK) {
 8008cb2:	2a02      	cmp	r2, #2
{
 8008cb4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008cb6:	4604      	mov	r4, r0
 8008cb8:	460e      	mov	r6, r1
    if(mode == LV_DESIGN_COVER_CHK) {
 8008cba:	d13c      	bne.n	8008d36 <lv_obj_design+0x84>
        if(lv_area_is_in(mask_p, &obj->coords) == false) return false;
 8008cbc:	f100 0510 	add.w	r5, r0, #16
 8008cc0:	4629      	mov	r1, r5
 8008cc2:	4630      	mov	r0, r6
 8008cc4:	f004 fbce 	bl	800d464 <lv_area_is_in>
 8008cc8:	b390      	cbz	r0, 8008d30 <lv_obj_design+0x7e>
        const lv_style_t * style = lv_obj_get_style(obj);
 8008cca:	4620      	mov	r0, r4
 8008ccc:	f7ff ff8e 	bl	8008bec <lv_obj_get_style>
        if(style->body.opa < LV_OPA_MAX) return false;
 8008cd0:	7a03      	ldrb	r3, [r0, #8]
 8008cd2:	2bfa      	cmp	r3, #250	; 0xfa
 8008cd4:	d92c      	bls.n	8008d30 <lv_obj_design+0x7e>
        lv_coord_t r = style->body.radius;
 8008cd6:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
        if(r == LV_RADIUS_CIRCLE) return false;
 8008cda:	f647 4318 	movw	r3, #31768	; 0x7c18
 8008cde:	429c      	cmp	r4, r3
 8008ce0:	d026      	beq.n	8008d30 <lv_obj_design+0x7e>
    memcpy(dest, src, sizeof(lv_area_t));
 8008ce2:	6828      	ldr	r0, [r5, #0]
 8008ce4:	6869      	ldr	r1, [r5, #4]
 8008ce6:	466b      	mov	r3, sp
 8008ce8:	c303      	stmia	r3!, {r0, r1}
        area_tmp.x1 += r;
 8008cea:	f8bd 3000 	ldrh.w	r3, [sp]
 8008cee:	b2a4      	uxth	r4, r4
 8008cf0:	4423      	add	r3, r4
 8008cf2:	f8ad 3000 	strh.w	r3, [sp]
        area_tmp.x2 -= r;
 8008cf6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 8008cfa:	4669      	mov	r1, sp
        area_tmp.x2 -= r;
 8008cfc:	1b1b      	subs	r3, r3, r4
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 8008cfe:	4630      	mov	r0, r6
        area_tmp.x2 -= r;
 8008d00:	f8ad 3004 	strh.w	r3, [sp, #4]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 8008d04:	f004 fbae 	bl	800d464 <lv_area_is_in>
 8008d08:	b190      	cbz	r0, 8008d30 <lv_obj_design+0x7e>
 8008d0a:	6828      	ldr	r0, [r5, #0]
 8008d0c:	6869      	ldr	r1, [r5, #4]
 8008d0e:	466b      	mov	r3, sp
 8008d10:	c303      	stmia	r3!, {r0, r1}
        area_tmp.y1 += r;
 8008d12:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8008d16:	4423      	add	r3, r4
 8008d18:	f8ad 3002 	strh.w	r3, [sp, #2]
        area_tmp.y2 -= r;
 8008d1c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 8008d20:	4669      	mov	r1, sp
        area_tmp.y2 -= r;
 8008d22:	1b1c      	subs	r4, r3, r4
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 8008d24:	4630      	mov	r0, r6
        area_tmp.y2 -= r;
 8008d26:	f8ad 4006 	strh.w	r4, [sp, #6]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 8008d2a:	f004 fb9b 	bl	800d464 <lv_area_is_in>
 8008d2e:	b900      	cbnz	r0, 8008d32 <lv_obj_design+0x80>
        if(lv_area_is_in(mask_p, &obj->coords) == false) return false;
 8008d30:	2000      	movs	r0, #0
}
 8008d32:	b002      	add	sp, #8
 8008d34:	bd70      	pop	{r4, r5, r6, pc}
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 8008d36:	b95a      	cbnz	r2, 8008d50 <lv_obj_design+0x9e>
        const lv_style_t * style = lv_obj_get_style(obj);
 8008d38:	f7ff ff58 	bl	8008bec <lv_obj_get_style>
 8008d3c:	4602      	mov	r2, r0
        lv_draw_rect(&obj->coords, mask_p, style, lv_obj_get_opa_scale(obj));
 8008d3e:	4620      	mov	r0, r4
 8008d40:	f7ff ffab 	bl	8008c9a <lv_obj_get_opa_scale>
 8008d44:	4631      	mov	r1, r6
 8008d46:	4603      	mov	r3, r0
 8008d48:	f104 0010 	add.w	r0, r4, #16
 8008d4c:	f001 fd96 	bl	800a87c <lv_draw_rect>
    return true;
 8008d50:	2001      	movs	r0, #1
 8008d52:	e7ee      	b.n	8008d32 <lv_obj_design+0x80>

08008d54 <lv_obj_get_signal_cb>:
}
 8008d54:	69c0      	ldr	r0, [r0, #28]
 8008d56:	4770      	bx	lr

08008d58 <lv_obj_get_ext_attr>:
}
 8008d58:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8008d5a:	4770      	bx	lr

08008d5c <lv_obj_get_group>:
}
 8008d5c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8008d5e:	4770      	bx	lr

08008d60 <lv_obj_is_focused>:
{
 8008d60:	b510      	push	{r4, lr}
 8008d62:	4604      	mov	r4, r0
    if(obj->group_p) {
 8008d64:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8008d66:	b120      	cbz	r0, 8008d72 <lv_obj_is_focused+0x12>
        if(lv_group_get_focused(obj->group_p) == obj) return true;
 8008d68:	f7ff f974 	bl	8008054 <lv_group_get_focused>
 8008d6c:	1a23      	subs	r3, r4, r0
 8008d6e:	4258      	negs	r0, r3
 8008d70:	4158      	adcs	r0, r3
}
 8008d72:	bd10      	pop	{r4, pc}

08008d74 <lv_refr_vdb_flush>:

/**
 * Flush the content of the VDB
 */
static void lv_refr_vdb_flush(void)
{
 8008d74:	b538      	push	{r3, r4, r5, lr}
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8008d76:	4d10      	ldr	r5, [pc, #64]	; (8008db8 <lv_refr_vdb_flush+0x44>)
 8008d78:	6828      	ldr	r0, [r5, #0]
 8008d7a:	f004 f983 	bl	800d084 <lv_disp_get_buf>
 8008d7e:	4604      	mov	r4, r0

    /*In double buffered mode wait until the other buffer is flushed before flushing the current
     * one*/
    if(lv_disp_is_double_buf(disp_refr)) {
 8008d80:	6828      	ldr	r0, [r5, #0]
 8008d82:	f004 f981 	bl	800d088 <lv_disp_is_double_buf>
 8008d86:	b110      	cbz	r0, 8008d8e <lv_refr_vdb_flush+0x1a>
        while(vdb->flushing)
 8008d88:	69a3      	ldr	r3, [r4, #24]
 8008d8a:	07db      	lsls	r3, r3, #31
 8008d8c:	d4fc      	bmi.n	8008d88 <lv_refr_vdb_flush+0x14>
            ;
    }

    vdb->flushing = 1;
 8008d8e:	7e23      	ldrb	r3, [r4, #24]
    return disp_refr;
 8008d90:	6828      	ldr	r0, [r5, #0]
    vdb->flushing = 1;
 8008d92:	f043 0301 	orr.w	r3, r3, #1
 8008d96:	7623      	strb	r3, [r4, #24]

    /*Flush the rendered content to the display*/
    lv_disp_t * disp = lv_refr_get_disp_refreshing();
    if(disp->driver.flush_cb) disp->driver.flush_cb(&disp->driver, &vdb->area, vdb->buf_act);
 8008d98:	68c3      	ldr	r3, [r0, #12]
 8008d9a:	b11b      	cbz	r3, 8008da4 <lv_refr_vdb_flush+0x30>
 8008d9c:	68a2      	ldr	r2, [r4, #8]
 8008d9e:	f104 0110 	add.w	r1, r4, #16
 8008da2:	4798      	blx	r3

    if(vdb->buf1 && vdb->buf2) {
 8008da4:	6823      	ldr	r3, [r4, #0]
 8008da6:	b133      	cbz	r3, 8008db6 <lv_refr_vdb_flush+0x42>
 8008da8:	6862      	ldr	r2, [r4, #4]
 8008daa:	b122      	cbz	r2, 8008db6 <lv_refr_vdb_flush+0x42>
        if(vdb->buf_act == vdb->buf1)
 8008dac:	68a1      	ldr	r1, [r4, #8]
            vdb->buf_act = vdb->buf2;
 8008dae:	428b      	cmp	r3, r1
 8008db0:	bf08      	it	eq
 8008db2:	4613      	moveq	r3, r2
 8008db4:	60a3      	str	r3, [r4, #8]
 8008db6:	bd38      	pop	{r3, r4, r5, pc}
 8008db8:	200041f4 	.word	0x200041f4

08008dbc <lv_refr_get_top_obj>:
{
 8008dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dbe:	460c      	mov	r4, r1
    if(lv_area_is_in(area_p, &obj->coords) && obj->hidden == 0) {
 8008dc0:	3110      	adds	r1, #16
{
 8008dc2:	4606      	mov	r6, r0
    if(lv_area_is_in(area_p, &obj->coords) && obj->hidden == 0) {
 8008dc4:	f004 fb4e 	bl	800d464 <lv_area_is_in>
 8008dc8:	b908      	cbnz	r0, 8008dce <lv_refr_get_top_obj+0x12>
    lv_obj_t * found_p = NULL;
 8008dca:	2000      	movs	r0, #0
 8008dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(lv_area_is_in(area_p, &obj->coords) && obj->hidden == 0) {
 8008dce:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8008dd2:	06db      	lsls	r3, r3, #27
 8008dd4:	d4f9      	bmi.n	8008dca <lv_refr_get_top_obj+0xe>
        LV_LL_READ(obj->child_ll, i)
 8008dd6:	1d27      	adds	r7, r4, #4
 8008dd8:	4638      	mov	r0, r7
 8008dda:	f004 fc9a 	bl	800d712 <lv_ll_get_head>
 8008dde:	4605      	mov	r5, r0
 8008de0:	b998      	cbnz	r0, 8008e0a <lv_refr_get_top_obj+0x4e>
            const lv_style_t * style = lv_obj_get_style(obj);
 8008de2:	4620      	mov	r0, r4
 8008de4:	f7ff ff02 	bl	8008bec <lv_obj_get_style>
            if(style->body.opa == LV_OPA_COVER && obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK) != false &&
 8008de8:	7a03      	ldrb	r3, [r0, #8]
 8008dea:	2bff      	cmp	r3, #255	; 0xff
 8008dec:	d1ed      	bne.n	8008dca <lv_refr_get_top_obj+0xe>
 8008dee:	6a23      	ldr	r3, [r4, #32]
 8008df0:	2202      	movs	r2, #2
 8008df2:	4631      	mov	r1, r6
 8008df4:	4620      	mov	r0, r4
 8008df6:	4798      	blx	r3
 8008df8:	2800      	cmp	r0, #0
 8008dfa:	d0e6      	beq.n	8008dca <lv_refr_get_top_obj+0xe>
               lv_obj_get_opa_scale(obj) == LV_OPA_COVER) {
 8008dfc:	4620      	mov	r0, r4
 8008dfe:	f7ff ff4c 	bl	8008c9a <lv_obj_get_opa_scale>
            if(style->body.opa == LV_OPA_COVER && obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK) != false &&
 8008e02:	28ff      	cmp	r0, #255	; 0xff
 8008e04:	d1e1      	bne.n	8008dca <lv_refr_get_top_obj+0xe>
 8008e06:	4620      	mov	r0, r4
    return found_p;
 8008e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            found_p = lv_refr_get_top_obj(area_p, i);
 8008e0a:	4629      	mov	r1, r5
 8008e0c:	4630      	mov	r0, r6
 8008e0e:	f7ff ffd5 	bl	8008dbc <lv_refr_get_top_obj>
            if(found_p != NULL) {
 8008e12:	b920      	cbnz	r0, 8008e1e <lv_refr_get_top_obj+0x62>
        LV_LL_READ(obj->child_ll, i)
 8008e14:	4629      	mov	r1, r5
 8008e16:	4638      	mov	r0, r7
 8008e18:	f004 fc81 	bl	800d71e <lv_ll_get_next>
 8008e1c:	e7df      	b.n	8008dde <lv_refr_get_top_obj+0x22>
}
 8008e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008e20 <lv_refr_obj>:
{
 8008e20:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(obj->hidden != 0) return;
 8008e22:	f890 6030 	ldrb.w	r6, [r0, #48]	; 0x30
 8008e26:	f016 0610 	ands.w	r6, r6, #16
{
 8008e2a:	b08b      	sub	sp, #44	; 0x2c
 8008e2c:	4604      	mov	r4, r0
 8008e2e:	460f      	mov	r7, r1
    if(obj->hidden != 0) return;
 8008e30:	d139      	bne.n	8008ea6 <lv_refr_obj+0x86>
    lv_coord_t ext_size = obj->ext_draw_pad;
 8008e32:	f9b0 5034 	ldrsh.w	r5, [r0, #52]	; 0x34
    lv_obj_get_coords(obj, &obj_area);
 8008e36:	a904      	add	r1, sp, #16
 8008e38:	f7ff fec6 	bl	8008bc8 <lv_obj_get_coords>
    obj_area.x1 -= ext_size;
 8008e3c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8008e40:	b2ab      	uxth	r3, r5
 8008e42:	1ad2      	subs	r2, r2, r3
 8008e44:	f8ad 2010 	strh.w	r2, [sp, #16]
    obj_area.y1 -= ext_size;
 8008e48:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8008e4c:	1ad2      	subs	r2, r2, r3
 8008e4e:	f8ad 2012 	strh.w	r2, [sp, #18]
    obj_area.x2 += ext_size;
 8008e52:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8008e56:	441a      	add	r2, r3
 8008e58:	f8ad 2014 	strh.w	r2, [sp, #20]
    obj_area.y2 += ext_size;
 8008e5c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    union_ok = lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 8008e60:	4639      	mov	r1, r7
    obj_area.y2 += ext_size;
 8008e62:	4413      	add	r3, r2
    union_ok = lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 8008e64:	a802      	add	r0, sp, #8
 8008e66:	aa04      	add	r2, sp, #16
    obj_area.y2 += ext_size;
 8008e68:	f8ad 3016 	strh.w	r3, [sp, #22]
    union_ok = lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 8008e6c:	f004 fa91 	bl	800d392 <lv_area_intersect>
    if(union_ok != false) {
 8008e70:	b1c8      	cbz	r0, 8008ea6 <lv_refr_obj+0x86>
        obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_MAIN);
 8008e72:	4632      	mov	r2, r6
 8008e74:	6a23      	ldr	r3, [r4, #32]
 8008e76:	a902      	add	r1, sp, #8
 8008e78:	4620      	mov	r0, r4
 8008e7a:	4798      	blx	r3
        lv_obj_get_coords(obj, &obj_area);
 8008e7c:	a904      	add	r1, sp, #16
 8008e7e:	4620      	mov	r0, r4
 8008e80:	f7ff fea2 	bl	8008bc8 <lv_obj_get_coords>
        union_ok = lv_area_intersect(&obj_mask, mask_ori_p, &obj_area);
 8008e84:	aa04      	add	r2, sp, #16
 8008e86:	4639      	mov	r1, r7
 8008e88:	4668      	mov	r0, sp
 8008e8a:	f004 fa82 	bl	800d392 <lv_area_intersect>
        if(union_ok != false) {
 8008e8e:	b128      	cbz	r0, 8008e9c <lv_refr_obj+0x7c>
            LV_LL_READ_BACK(obj->child_ll, child_p)
 8008e90:	1d26      	adds	r6, r4, #4
 8008e92:	4630      	mov	r0, r6
 8008e94:	f004 fc40 	bl	800d718 <lv_ll_get_tail>
 8008e98:	4605      	mov	r5, r0
 8008e9a:	b930      	cbnz	r0, 8008eaa <lv_refr_obj+0x8a>
        obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_POST);
 8008e9c:	6a23      	ldr	r3, [r4, #32]
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	a902      	add	r1, sp, #8
 8008ea2:	4620      	mov	r0, r4
 8008ea4:	4798      	blx	r3
}
 8008ea6:	b00b      	add	sp, #44	; 0x2c
 8008ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
                lv_obj_get_coords(child_p, &child_area);
 8008eaa:	a908      	add	r1, sp, #32
 8008eac:	4628      	mov	r0, r5
 8008eae:	f7ff fe8b 	bl	8008bc8 <lv_obj_get_coords>
                child_area.x1 -= ext_size;
 8008eb2:	8eab      	ldrh	r3, [r5, #52]	; 0x34
 8008eb4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8008eb8:	1ad2      	subs	r2, r2, r3
 8008eba:	f8ad 2020 	strh.w	r2, [sp, #32]
                child_area.y1 -= ext_size;
 8008ebe:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8008ec2:	1ad2      	subs	r2, r2, r3
 8008ec4:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
                child_area.x2 += ext_size;
 8008ec8:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8008ecc:	441a      	add	r2, r3
 8008ece:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
                child_area.y2 += ext_size;
 8008ed2:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
                union_ok = lv_area_intersect(&mask_child, &obj_mask, &child_area);
 8008ed6:	4669      	mov	r1, sp
                child_area.y2 += ext_size;
 8008ed8:	4413      	add	r3, r2
                union_ok = lv_area_intersect(&mask_child, &obj_mask, &child_area);
 8008eda:	a806      	add	r0, sp, #24
 8008edc:	aa08      	add	r2, sp, #32
                child_area.y2 += ext_size;
 8008ede:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
                union_ok = lv_area_intersect(&mask_child, &obj_mask, &child_area);
 8008ee2:	f004 fa56 	bl	800d392 <lv_area_intersect>
                if(union_ok) {
 8008ee6:	b118      	cbz	r0, 8008ef0 <lv_refr_obj+0xd0>
                    lv_refr_obj(child_p, &mask_child);
 8008ee8:	a906      	add	r1, sp, #24
 8008eea:	4628      	mov	r0, r5
 8008eec:	f7ff ff98 	bl	8008e20 <lv_refr_obj>
            LV_LL_READ_BACK(obj->child_ll, child_p)
 8008ef0:	4629      	mov	r1, r5
 8008ef2:	4630      	mov	r0, r6
 8008ef4:	f004 fc18 	bl	800d728 <lv_ll_get_prev>
 8008ef8:	e7ce      	b.n	8008e98 <lv_refr_obj+0x78>
	...

08008efc <lv_refr_obj_and_children>:
{
 8008efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008efe:	460e      	mov	r6, r1
    if(top_p == NULL) top_p = lv_disp_get_scr_act(disp_refr);
 8008f00:	4605      	mov	r5, r0
 8008f02:	b920      	cbnz	r0, 8008f0e <lv_refr_obj_and_children+0x12>
 8008f04:	4b12      	ldr	r3, [pc, #72]	; (8008f50 <lv_refr_obj_and_children+0x54>)
 8008f06:	6818      	ldr	r0, [r3, #0]
 8008f08:	f7fe ff99 	bl	8007e3e <lv_disp_get_scr_act>
 8008f0c:	4605      	mov	r5, r0
    lv_refr_obj(top_p, mask_p);
 8008f0e:	4628      	mov	r0, r5
 8008f10:	4631      	mov	r1, r6
 8008f12:	f7ff ff85 	bl	8008e20 <lv_refr_obj>
    par = lv_obj_get_parent(top_p);
 8008f16:	4628      	mov	r0, r5
 8008f18:	f7ff fe28 	bl	8008b6c <lv_obj_get_parent>
        par = lv_obj_get_parent(par);
 8008f1c:	4604      	mov	r4, r0
    while(par != NULL) {
 8008f1e:	b900      	cbnz	r0, 8008f22 <lv_refr_obj_and_children+0x26>
}
 8008f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_obj_t * i = lv_ll_get_prev(&(par->child_ll), border_p);
 8008f22:	1d27      	adds	r7, r4, #4
            i = lv_ll_get_prev(&(par->child_ll), i);
 8008f24:	4629      	mov	r1, r5
 8008f26:	4638      	mov	r0, r7
 8008f28:	f004 fbfe 	bl	800d728 <lv_ll_get_prev>
 8008f2c:	4605      	mov	r5, r0
        while(i != NULL) {
 8008f2e:	b948      	cbnz	r0, 8008f44 <lv_refr_obj_and_children+0x48>
        par->design_cb(par, mask_p, LV_DESIGN_DRAW_POST);
 8008f30:	6a23      	ldr	r3, [r4, #32]
 8008f32:	2201      	movs	r2, #1
 8008f34:	4631      	mov	r1, r6
 8008f36:	4620      	mov	r0, r4
 8008f38:	4798      	blx	r3
        par = lv_obj_get_parent(par);
 8008f3a:	4620      	mov	r0, r4
 8008f3c:	f7ff fe16 	bl	8008b6c <lv_obj_get_parent>
 8008f40:	4625      	mov	r5, r4
 8008f42:	e7eb      	b.n	8008f1c <lv_refr_obj_and_children+0x20>
            lv_refr_obj(i, mask_p);
 8008f44:	4631      	mov	r1, r6
 8008f46:	4628      	mov	r0, r5
 8008f48:	f7ff ff6a 	bl	8008e20 <lv_refr_obj>
 8008f4c:	e7ea      	b.n	8008f24 <lv_refr_obj_and_children+0x28>
 8008f4e:	bf00      	nop
 8008f50:	200041f4 	.word	0x200041f4

08008f54 <lv_refr_area_part>:
{
 8008f54:	b573      	push	{r0, r1, r4, r5, r6, lr}
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8008f56:	4c18      	ldr	r4, [pc, #96]	; (8008fb8 <lv_refr_area_part+0x64>)
{
 8008f58:	4606      	mov	r6, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8008f5a:	6820      	ldr	r0, [r4, #0]
 8008f5c:	f004 f892 	bl	800d084 <lv_disp_get_buf>
 8008f60:	4605      	mov	r5, r0
    if(lv_disp_is_double_buf(disp_refr) == false) {
 8008f62:	6820      	ldr	r0, [r4, #0]
 8008f64:	f004 f890 	bl	800d088 <lv_disp_is_double_buf>
 8008f68:	b910      	cbnz	r0, 8008f70 <lv_refr_area_part+0x1c>
        while(vdb->flushing)
 8008f6a:	69ab      	ldr	r3, [r5, #24]
 8008f6c:	07db      	lsls	r3, r3, #31
 8008f6e:	d4fc      	bmi.n	8008f6a <lv_refr_area_part+0x16>
    lv_area_intersect(&start_mask, area_p, &vdb->area);
 8008f70:	f105 0210 	add.w	r2, r5, #16
 8008f74:	4631      	mov	r1, r6
 8008f76:	4668      	mov	r0, sp
 8008f78:	f004 fa0b 	bl	800d392 <lv_area_intersect>
    top_p = lv_refr_get_top_obj(&start_mask, lv_disp_get_scr_act(disp_refr));
 8008f7c:	6820      	ldr	r0, [r4, #0]
 8008f7e:	f7fe ff5e 	bl	8007e3e <lv_disp_get_scr_act>
 8008f82:	4601      	mov	r1, r0
 8008f84:	4668      	mov	r0, sp
 8008f86:	f7ff ff19 	bl	8008dbc <lv_refr_get_top_obj>
    lv_refr_obj_and_children(top_p, &start_mask);
 8008f8a:	4669      	mov	r1, sp
 8008f8c:	f7ff ffb6 	bl	8008efc <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_disp_get_layer_top(disp_refr), &start_mask);
 8008f90:	6820      	ldr	r0, [r4, #0]
 8008f92:	f7fe ff5b 	bl	8007e4c <lv_disp_get_layer_top>
 8008f96:	4669      	mov	r1, sp
 8008f98:	f7ff ffb0 	bl	8008efc <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_disp_get_layer_sys(disp_refr), &start_mask);
 8008f9c:	6820      	ldr	r0, [r4, #0]
 8008f9e:	f7fe ff5c 	bl	8007e5a <lv_disp_get_layer_sys>
 8008fa2:	4669      	mov	r1, sp
 8008fa4:	f7ff ffaa 	bl	8008efc <lv_refr_obj_and_children>
    if(lv_disp_is_true_double_buf(disp_refr) == false) {
 8008fa8:	6820      	ldr	r0, [r4, #0]
 8008faa:	f004 f875 	bl	800d098 <lv_disp_is_true_double_buf>
 8008fae:	b908      	cbnz	r0, 8008fb4 <lv_refr_area_part+0x60>
        lv_refr_vdb_flush();
 8008fb0:	f7ff fee0 	bl	8008d74 <lv_refr_vdb_flush>
}
 8008fb4:	b002      	add	sp, #8
 8008fb6:	bd70      	pop	{r4, r5, r6, pc}
 8008fb8:	200041f4 	.word	0x200041f4

08008fbc <lv_refr_init>:
{
 8008fbc:	4770      	bx	lr
	...

08008fc0 <lv_inv_area>:
{
 8008fc0:	b530      	push	{r4, r5, lr}
 8008fc2:	460d      	mov	r5, r1
 8008fc4:	b085      	sub	sp, #20
    if(!disp) disp = lv_disp_get_default();
 8008fc6:	4604      	mov	r4, r0
 8008fc8:	b920      	cbnz	r0, 8008fd4 <lv_inv_area+0x14>
 8008fca:	f004 f825 	bl	800d018 <lv_disp_get_default>
    if(!disp) return;
 8008fce:	4604      	mov	r4, r0
 8008fd0:	2800      	cmp	r0, #0
 8008fd2:	d045      	beq.n	8009060 <lv_inv_area+0xa0>
    if(area_p == NULL) {
 8008fd4:	b935      	cbnz	r5, 8008fe4 <lv_inv_area+0x24>
        disp->inv_p = 0;
 8008fd6:	f8b4 3164 	ldrh.w	r3, [r4, #356]	; 0x164
 8008fda:	f365 0309 	bfi	r3, r5, #0, #10
        disp->inv_p++;
 8008fde:	f8a4 3164 	strh.w	r3, [r4, #356]	; 0x164
 8008fe2:	e03d      	b.n	8009060 <lv_inv_area+0xa0>
    scr_area.x1 = 0;
 8008fe4:	2300      	movs	r3, #0
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 8008fe6:	4620      	mov	r0, r4
    scr_area.x1 = 0;
 8008fe8:	f8ad 3000 	strh.w	r3, [sp]
    scr_area.y1 = 0;
 8008fec:	f8ad 3002 	strh.w	r3, [sp, #2]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 8008ff0:	f004 f818 	bl	800d024 <lv_disp_get_hor_res>
 8008ff4:	3801      	subs	r0, #1
 8008ff6:	f8ad 0004 	strh.w	r0, [sp, #4]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
 8008ffa:	4620      	mov	r0, r4
 8008ffc:	f004 f822 	bl	800d044 <lv_disp_get_ver_res>
 8009000:	3801      	subs	r0, #1
 8009002:	f8ad 0006 	strh.w	r0, [sp, #6]
    suc = lv_area_intersect(&com_area, area_p, &scr_area);
 8009006:	466a      	mov	r2, sp
 8009008:	4629      	mov	r1, r5
 800900a:	a802      	add	r0, sp, #8
 800900c:	f004 f9c1 	bl	800d392 <lv_area_intersect>
    if(suc != false) {
 8009010:	b330      	cbz	r0, 8009060 <lv_inv_area+0xa0>
        if(disp->driver.rounder_cb) disp->driver.rounder_cb(&disp_refr->driver, &com_area);
 8009012:	6923      	ldr	r3, [r4, #16]
 8009014:	b11b      	cbz	r3, 800901e <lv_inv_area+0x5e>
 8009016:	4a18      	ldr	r2, [pc, #96]	; (8009078 <lv_inv_area+0xb8>)
 8009018:	a902      	add	r1, sp, #8
 800901a:	6810      	ldr	r0, [r2, #0]
 800901c:	4798      	blx	r3
{
 800901e:	2500      	movs	r5, #0
        for(i = 0; i < disp->inv_p; i++) {
 8009020:	f8b4 2164 	ldrh.w	r2, [r4, #356]	; 0x164
 8009024:	b2a9      	uxth	r1, r5
 8009026:	f3c2 0309 	ubfx	r3, r2, #0, #10
 800902a:	4299      	cmp	r1, r3
 800902c:	db0f      	blt.n	800904e <lv_inv_area+0x8e>
        if(disp->inv_p < LV_INV_BUF_SIZE) {
 800902e:	2b1f      	cmp	r3, #31
 8009030:	dc18      	bgt.n	8009064 <lv_inv_area+0xa4>
            lv_area_copy(&disp->inv_areas[disp->inv_p], &com_area);
 8009032:	00db      	lsls	r3, r3, #3
 8009034:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8009038:	ab02      	add	r3, sp, #8
 800903a:	cb03      	ldmia	r3!, {r0, r1}
 800903c:	18a5      	adds	r5, r4, r2
 800903e:	50a0      	str	r0, [r4, r2]
 8009040:	6069      	str	r1, [r5, #4]
        disp->inv_p++;
 8009042:	f8b4 3164 	ldrh.w	r3, [r4, #356]	; 0x164
 8009046:	1c5a      	adds	r2, r3, #1
 8009048:	f362 0309 	bfi	r3, r2, #0, #10
 800904c:	e7c7      	b.n	8008fde <lv_inv_area+0x1e>
            if(lv_area_is_in(&com_area, &disp->inv_areas[i]) != false) return;
 800904e:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8009052:	3144      	adds	r1, #68	; 0x44
 8009054:	a802      	add	r0, sp, #8
 8009056:	f004 fa05 	bl	800d464 <lv_area_is_in>
 800905a:	3501      	adds	r5, #1
 800905c:	2800      	cmp	r0, #0
 800905e:	d0df      	beq.n	8009020 <lv_inv_area+0x60>
}
 8009060:	b005      	add	sp, #20
 8009062:	bd30      	pop	{r4, r5, pc}
            disp->inv_p = 0;
 8009064:	4613      	mov	r3, r2
 8009066:	f36f 0309 	bfc	r3, #0, #10
 800906a:	f8a4 3164 	strh.w	r3, [r4, #356]	; 0x164
 800906e:	466b      	mov	r3, sp
 8009070:	cb03      	ldmia	r3!, {r0, r1}
 8009072:	6460      	str	r0, [r4, #68]	; 0x44
 8009074:	64a1      	str	r1, [r4, #72]	; 0x48
 8009076:	e7e4      	b.n	8009042 <lv_inv_area+0x82>
 8009078:	200041f4 	.word	0x200041f4

0800907c <lv_refr_get_disp_refreshing>:
}
 800907c:	4b01      	ldr	r3, [pc, #4]	; (8009084 <lv_refr_get_disp_refreshing+0x8>)
 800907e:	6818      	ldr	r0, [r3, #0]
 8009080:	4770      	bx	lr
 8009082:	bf00      	nop
 8009084:	200041f4 	.word	0x200041f4

08009088 <lv_disp_refr_task>:
{
 8009088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800908c:	b089      	sub	sp, #36	; 0x24
 800908e:	4604      	mov	r4, r0
    uint32_t start = lv_tick_get();
 8009090:	f004 f828 	bl	800d0e4 <lv_tick_get>
    disp_refr = task->user_data;
 8009094:	4bbe      	ldr	r3, [pc, #760]	; (8009390 <lv_disp_refr_task+0x308>)
 8009096:	68e2      	ldr	r2, [r4, #12]
    uint32_t start = lv_tick_get();
 8009098:	9002      	str	r0, [sp, #8]
    disp_refr = task->user_data;
 800909a:	601a      	str	r2, [r3, #0]
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 800909c:	2600      	movs	r6, #0
 800909e:	469a      	mov	sl, r3
                disp_refr->inv_area_joined[join_from] = 1;
 80090a0:	2701      	movs	r7, #1
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 80090a2:	f8da 3000 	ldr.w	r3, [sl]
 80090a6:	f8b3 2164 	ldrh.w	r2, [r3, #356]	; 0x164
 80090aa:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80090ae:	4296      	cmp	r6, r2
 80090b0:	d330      	bcc.n	8009114 <lv_disp_refr_task+0x8c>
    px_num = 0;
 80090b2:	4bb8      	ldr	r3, [pc, #736]	; (8009394 <lv_disp_refr_task+0x30c>)
            if(disp_refr->driver.monitor_cb) px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
 80090b4:	9301      	str	r3, [sp, #4]
    px_num = 0;
 80090b6:	2400      	movs	r4, #0
 80090b8:	601c      	str	r4, [r3, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
 80090ba:	f8da 7000 	ldr.w	r7, [sl]
 80090be:	f8b7 3164 	ldrh.w	r3, [r7, #356]	; 0x164
 80090c2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80090c6:	4294      	cmp	r4, r2
 80090c8:	d36c      	bcc.n	80091a4 <lv_disp_refr_task+0x11c>
    if(disp_refr->inv_p != 0) {
 80090ca:	b1f2      	cbz	r2, 800910a <lv_disp_refr_task+0x82>
        if(lv_disp_is_true_double_buf(disp_refr)) {
 80090cc:	4638      	mov	r0, r7
 80090ce:	f003 ffe3 	bl	800d098 <lv_disp_is_true_double_buf>
 80090d2:	2800      	cmp	r0, #0
 80090d4:	f040 8134 	bne.w	8009340 <lv_disp_refr_task+0x2b8>
        memset(disp_refr->inv_areas, 0, sizeof(disp_refr->inv_areas));
 80090d8:	f8da 4000 	ldr.w	r4, [sl]
 80090dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80090e0:	2100      	movs	r1, #0
 80090e2:	f104 0044 	add.w	r0, r4, #68	; 0x44
 80090e6:	f006 f92e 	bl	800f346 <memset>
        memset(disp_refr->inv_area_joined, 0, sizeof(disp_refr->inv_area_joined));
 80090ea:	2220      	movs	r2, #32
 80090ec:	2100      	movs	r1, #0
 80090ee:	f504 70a2 	add.w	r0, r4, #324	; 0x144
 80090f2:	f006 f928 	bl	800f346 <memset>
        disp_refr->inv_p = 0;
 80090f6:	f8b4 3164 	ldrh.w	r3, [r4, #356]	; 0x164
        if(disp_refr->driver.monitor_cb) {
 80090fa:	69a5      	ldr	r5, [r4, #24]
        disp_refr->inv_p = 0;
 80090fc:	f36f 0309 	bfc	r3, #0, #10
 8009100:	f8a4 3164 	strh.w	r3, [r4, #356]	; 0x164
        if(disp_refr->driver.monitor_cb) {
 8009104:	2d00      	cmp	r5, #0
 8009106:	f040 816a 	bne.w	80093de <lv_disp_refr_task+0x356>
    lv_draw_free_buf();
 800910a:	f000 fd4f 	bl	8009bac <lv_draw_free_buf>
}
 800910e:	b009      	add	sp, #36	; 0x24
 8009110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
 8009114:	4433      	add	r3, r6
 8009116:	f893 4144 	ldrb.w	r4, [r3, #324]	; 0x144
 800911a:	b94c      	cbnz	r4, 8009130 <lv_disp_refr_task+0xa8>
 800911c:	00f5      	lsls	r5, r6, #3
 800911e:	3544      	adds	r5, #68	; 0x44
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 8009120:	f8da 0000 	ldr.w	r0, [sl]
 8009124:	f8b0 3164 	ldrh.w	r3, [r0, #356]	; 0x164
 8009128:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800912c:	429c      	cmp	r4, r3
 800912e:	d301      	bcc.n	8009134 <lv_disp_refr_task+0xac>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 8009130:	3601      	adds	r6, #1
 8009132:	e7b6      	b.n	80090a2 <lv_disp_refr_task+0x1a>
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
 8009134:	1903      	adds	r3, r0, r4
 8009136:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 800913a:	bb8b      	cbnz	r3, 80091a0 <lv_disp_refr_task+0x118>
 800913c:	42a6      	cmp	r6, r4
 800913e:	d02f      	beq.n	80091a0 <lv_disp_refr_task+0x118>
 8009140:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8009144:	f108 0844 	add.w	r8, r8, #68	; 0x44
            if(lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
 8009148:	eb00 0108 	add.w	r1, r0, r8
 800914c:	4428      	add	r0, r5
 800914e:	f004 f96c 	bl	800d42a <lv_area_is_on>
 8009152:	b328      	cbz	r0, 80091a0 <lv_disp_refr_task+0x118>
            lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
 8009154:	f8da 1000 	ldr.w	r1, [sl]
 8009158:	a806      	add	r0, sp, #24
 800915a:	eb01 0208 	add.w	r2, r1, r8
 800915e:	4429      	add	r1, r5
 8009160:	f004 f941 	bl	800d3e6 <lv_area_join>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 8009164:	a806      	add	r0, sp, #24
 8009166:	f004 f906 	bl	800d376 <lv_area_get_size>
 800916a:	4683      	mov	fp, r0
 800916c:	f8da 0000 	ldr.w	r0, [sl]
 8009170:	4428      	add	r0, r5
 8009172:	f004 f900 	bl	800d376 <lv_area_get_size>
 8009176:	4681      	mov	r9, r0
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
 8009178:	f8da 0000 	ldr.w	r0, [sl]
 800917c:	4440      	add	r0, r8
 800917e:	f004 f8fa 	bl	800d376 <lv_area_get_size>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 8009182:	4448      	add	r0, r9
 8009184:	4583      	cmp	fp, r0
 8009186:	d20b      	bcs.n	80091a0 <lv_disp_refr_task+0x118>
 8009188:	aa06      	add	r2, sp, #24
 800918a:	ca03      	ldmia	r2!, {r0, r1}
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
 800918c:	f8da 3000 	ldr.w	r3, [sl]
 8009190:	5158      	str	r0, [r3, r5]
 8009192:	eb03 0e05 	add.w	lr, r3, r5
                disp_refr->inv_area_joined[join_from] = 1;
 8009196:	4423      	add	r3, r4
 8009198:	f8ce 1004 	str.w	r1, [lr, #4]
 800919c:	f883 7144 	strb.w	r7, [r3, #324]	; 0x144
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 80091a0:	3401      	adds	r4, #1
 80091a2:	e7bd      	b.n	8009120 <lv_disp_refr_task+0x98>
        if(disp_refr->inv_area_joined[i] == 0) {
 80091a4:	193b      	adds	r3, r7, r4
 80091a6:	f893 5144 	ldrb.w	r5, [r3, #324]	; 0x144
 80091aa:	2d00      	cmp	r5, #0
 80091ac:	f040 8084 	bne.w	80092b8 <lv_disp_refr_task+0x230>
 80091b0:	00e3      	lsls	r3, r4, #3
 80091b2:	9303      	str	r3, [sp, #12]
    if(lv_disp_is_true_double_buf(disp_refr)) {
 80091b4:	4638      	mov	r0, r7
 80091b6:	3344      	adds	r3, #68	; 0x44
 80091b8:	9300      	str	r3, [sp, #0]
            lv_refr_area(&disp_refr->inv_areas[i]);
 80091ba:	eb07 0803 	add.w	r8, r7, r3
    if(lv_disp_is_true_double_buf(disp_refr)) {
 80091be:	f003 ff6b 	bl	800d098 <lv_disp_is_true_double_buf>
 80091c2:	b1b0      	cbz	r0, 80091f2 <lv_disp_refr_task+0x16a>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 80091c4:	f8da 0000 	ldr.w	r0, [sl]
 80091c8:	f003 ff5c 	bl	800d084 <lv_disp_get_buf>
 80091cc:	4606      	mov	r6, r0
        vdb->area.x1        = 0;
 80091ce:	8205      	strh	r5, [r0, #16]
        vdb->area.x2        = lv_disp_get_hor_res(disp_refr) - 1;
 80091d0:	f8da 0000 	ldr.w	r0, [sl]
 80091d4:	f003 ff26 	bl	800d024 <lv_disp_get_hor_res>
 80091d8:	3801      	subs	r0, #1
 80091da:	82b0      	strh	r0, [r6, #20]
        vdb->area.y1        = 0;
 80091dc:	8275      	strh	r5, [r6, #18]
        vdb->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
 80091de:	f8da 0000 	ldr.w	r0, [sl]
 80091e2:	f003 ff2f 	bl	800d044 <lv_disp_get_ver_res>
 80091e6:	3801      	subs	r0, #1
 80091e8:	82f0      	strh	r0, [r6, #22]
            lv_refr_area_part(area_p);
 80091ea:	4640      	mov	r0, r8
 80091ec:	f7ff feb2 	bl	8008f54 <lv_refr_area_part>
 80091f0:	e055      	b.n	800929e <lv_disp_refr_task+0x216>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 80091f2:	f8da 0000 	ldr.w	r0, [sl]
 80091f6:	f003 ff45 	bl	800d084 <lv_disp_get_buf>
    return area_p->x2 - area_p->x1 + 1;
 80091fa:	9b00      	ldr	r3, [sp, #0]
 80091fc:	f8b8 9004 	ldrh.w	r9, [r8, #4]
 8009200:	5afe      	ldrh	r6, [r7, r3]
 8009202:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
    return area_p->y2 - area_p->y1 + 1;
 8009206:	f8b8 b002 	ldrh.w	fp, [r8, #2]
 800920a:	9304      	str	r3, [sp, #16]
 800920c:	4605      	mov	r5, r0
    return area_p->x2 - area_p->x1 + 1;
 800920e:	f109 0901 	add.w	r9, r9, #1
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? y2 = lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 8009212:	f8da 0000 	ldr.w	r0, [sl]
 8009216:	eba9 0906 	sub.w	r9, r9, r6
    return area_p->y2 - area_p->y1 + 1;
 800921a:	1c5e      	adds	r6, r3, #1
 800921c:	f003 ff12 	bl	800d044 <lv_disp_get_ver_res>
        lv_coord_t y2 =
 8009220:	9b04      	ldr	r3, [sp, #16]
 8009222:	eba6 060b 	sub.w	r6, r6, fp
 8009226:	4283      	cmp	r3, r0
    return area_p->x2 - area_p->x1 + 1;
 8009228:	fa0f f989 	sxth.w	r9, r9
    return area_p->y2 - area_p->y1 + 1;
 800922c:	fa0f fb86 	sxth.w	fp, r6
 8009230:	db44      	blt.n	80092bc <lv_disp_refr_task+0x234>
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? y2 = lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 8009232:	f8da 0000 	ldr.w	r0, [sl]
 8009236:	f003 ff05 	bl	800d044 <lv_disp_get_ver_res>
 800923a:	3801      	subs	r0, #1
 800923c:	b203      	sxth	r3, r0
        if(disp_refr->driver.rounder_cb) {
 800923e:	f8da 2000 	ldr.w	r2, [sl]
        int32_t max_row = (uint32_t)vdb->size / w;
 8009242:	68ee      	ldr	r6, [r5, #12]
        if(disp_refr->driver.rounder_cb) {
 8009244:	6912      	ldr	r2, [r2, #16]
        int32_t max_row = (uint32_t)vdb->size / w;
 8009246:	fbb6 f6f9 	udiv	r6, r6, r9
 800924a:	455e      	cmp	r6, fp
 800924c:	bfa8      	it	ge
 800924e:	465e      	movge	r6, fp
        if(disp_refr->driver.rounder_cb) {
 8009250:	2a00      	cmp	r2, #0
 8009252:	d03c      	beq.n	80092ce <lv_disp_refr_task+0x246>
            tmp.x1 = 0;
 8009254:	f04f 0200 	mov.w	r2, #0
            lv_coord_t y_tmp = max_row - 1;
 8009258:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
            tmp.x1 = 0;
 800925c:	f8ad 2018 	strh.w	r2, [sp, #24]
            tmp.x2 = 0;
 8009260:	f8ad 201c 	strh.w	r2, [sp, #28]
            tmp.y1 = 0;
 8009264:	f8ad 201a 	strh.w	r2, [sp, #26]
            lv_coord_t y_tmp = max_row - 1;
 8009268:	fa0f f989 	sxth.w	r9, r9
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
 800926c:	f8da 0000 	ldr.w	r0, [sl]
                tmp.y2 = y_tmp;
 8009270:	f8ad 901e 	strh.w	r9, [sp, #30]
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
 8009274:	6902      	ldr	r2, [r0, #16]
 8009276:	9304      	str	r3, [sp, #16]
 8009278:	a906      	add	r1, sp, #24
 800927a:	4790      	blx	r2
 800927c:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8009280:	f8bd 201a 	ldrh.w	r2, [sp, #26]
                if(lv_area_get_height(&tmp) <= max_row) break;
 8009284:	9b04      	ldr	r3, [sp, #16]
 8009286:	3101      	adds	r1, #1
 8009288:	1a8a      	subs	r2, r1, r2
 800928a:	b212      	sxth	r2, r2
 800928c:	42b2      	cmp	r2, r6
 800928e:	dd1a      	ble.n	80092c6 <lv_disp_refr_task+0x23e>
 8009290:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8009294:	fa0f f989 	sxth.w	r9, r9
            } while(y_tmp != 0);
 8009298:	f1b9 0f00 	cmp.w	r9, #0
 800929c:	d1e6      	bne.n	800926c <lv_disp_refr_task+0x1e4>
            if(disp_refr->driver.monitor_cb) px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
 800929e:	f8da 0000 	ldr.w	r0, [sl]
 80092a2:	6983      	ldr	r3, [r0, #24]
 80092a4:	b143      	cbz	r3, 80092b8 <lv_disp_refr_task+0x230>
 80092a6:	9b00      	ldr	r3, [sp, #0]
 80092a8:	4418      	add	r0, r3
 80092aa:	f004 f864 	bl	800d376 <lv_area_get_size>
 80092ae:	9b01      	ldr	r3, [sp, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	4418      	add	r0, r3
 80092b4:	9b01      	ldr	r3, [sp, #4]
 80092b6:	6018      	str	r0, [r3, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
 80092b8:	3401      	adds	r4, #1
 80092ba:	e6fe      	b.n	80090ba <lv_disp_refr_task+0x32>
        lv_coord_t y2 =
 80092bc:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
 80092c0:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 80092c4:	e7bb      	b.n	800923e <lv_disp_refr_task+0x1b6>
            if(y_tmp == 0) {
 80092c6:	f1b9 0f00 	cmp.w	r9, #0
 80092ca:	d0e8      	beq.n	800929e <lv_disp_refr_task+0x216>
                max_row = tmp.y2 + 1;
 80092cc:	460e      	mov	r6, r1
 80092ce:	9a03      	ldr	r2, [sp, #12]
 80092d0:	4417      	add	r7, r2
            vdb->area.y2 = row + max_row - 1;
 80092d2:	b2b2      	uxth	r2, r6
 80092d4:	1e51      	subs	r1, r2, #1
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 80092d6:	f9b7 9046 	ldrsh.w	r9, [r7, #70]	; 0x46
 80092da:	9103      	str	r1, [sp, #12]
        lv_coord_t row_last = 0;
 80092dc:	f04f 0b00 	mov.w	fp, #0
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 80092e0:	eb09 0106 	add.w	r1, r9, r6
 80092e4:	3901      	subs	r1, #1
 80092e6:	4299      	cmp	r1, r3
 80092e8:	dd0b      	ble.n	8009302 <lv_disp_refr_task+0x27a>
        if(y2 != row_last) {
 80092ea:	455b      	cmp	r3, fp
 80092ec:	d0d7      	beq.n	800929e <lv_disp_refr_task+0x216>
            vdb->area.x1 = area_p->x1;
 80092ee:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 80092f2:	822a      	strh	r2, [r5, #16]
            vdb->area.x2 = area_p->x2;
 80092f4:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 80092f8:	82aa      	strh	r2, [r5, #20]
            vdb->area.y1 = row;
 80092fa:	f8a5 9012 	strh.w	r9, [r5, #18]
            vdb->area.y2 = y2;
 80092fe:	82eb      	strh	r3, [r5, #22]
 8009300:	e773      	b.n	80091ea <lv_disp_refr_task+0x162>
            vdb->area.x1 = area_p->x1;
 8009302:	f9b7 1044 	ldrsh.w	r1, [r7, #68]	; 0x44
 8009306:	9205      	str	r2, [sp, #20]
 8009308:	8229      	strh	r1, [r5, #16]
 800930a:	9a03      	ldr	r2, [sp, #12]
            vdb->area.x2 = area_p->x2;
 800930c:	f9b7 1048 	ldrsh.w	r1, [r7, #72]	; 0x48
            vdb->area.y1 = row;
 8009310:	f8a5 9012 	strh.w	r9, [r5, #18]
 8009314:	fa1f f989 	uxth.w	r9, r9
 8009318:	eb09 0b02 	add.w	fp, r9, r2
 800931c:	fa0f fb8b 	sxth.w	fp, fp
            vdb->area.y2 = row + max_row - 1;
 8009320:	459b      	cmp	fp, r3
 8009322:	bfa8      	it	ge
 8009324:	469b      	movge	fp, r3
            vdb->area.x2 = area_p->x2;
 8009326:	82a9      	strh	r1, [r5, #20]
            vdb->area.y2 = row + max_row - 1;
 8009328:	f8a5 b016 	strh.w	fp, [r5, #22]
            lv_refr_area_part(area_p);
 800932c:	4640      	mov	r0, r8
            vdb->area.y2 = row + max_row - 1;
 800932e:	9304      	str	r3, [sp, #16]
            lv_refr_area_part(area_p);
 8009330:	f7ff fe10 	bl	8008f54 <lv_refr_area_part>
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 8009334:	9a05      	ldr	r2, [sp, #20]
 8009336:	9b04      	ldr	r3, [sp, #16]
 8009338:	4491      	add	r9, r2
 800933a:	fa0f f989 	sxth.w	r9, r9
 800933e:	e7cf      	b.n	80092e0 <lv_disp_refr_task+0x258>
            lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8009340:	f8da 0000 	ldr.w	r0, [sl]
 8009344:	f003 fe9e 	bl	800d084 <lv_disp_get_buf>
 8009348:	4604      	mov	r4, r0
            lv_refr_vdb_flush();
 800934a:	f7ff fd13 	bl	8008d74 <lv_refr_vdb_flush>
            while(vdb->flushing)
 800934e:	69a3      	ldr	r3, [r4, #24]
 8009350:	07db      	lsls	r3, r3, #31
 8009352:	d4fc      	bmi.n	800934e <lv_disp_refr_task+0x2c6>
            uint8_t * buf_act = (uint8_t *)vdb->buf_act;
 8009354:	68a3      	ldr	r3, [r4, #8]
            uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
 8009356:	6827      	ldr	r7, [r4, #0]
            lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
 8009358:	f8da 0000 	ldr.w	r0, [sl]
            uint8_t * buf_act = (uint8_t *)vdb->buf_act;
 800935c:	9300      	str	r3, [sp, #0]
            uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
 800935e:	42bb      	cmp	r3, r7
 8009360:	bf08      	it	eq
 8009362:	6867      	ldreq	r7, [r4, #4]
            lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
 8009364:	f003 fe5e 	bl	800d024 <lv_disp_get_hor_res>
            for(a = 0; a < disp_refr->inv_p; a++) {
 8009368:	2600      	movs	r6, #0
            lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
 800936a:	4681      	mov	r9, r0
                        start_offs += hres * sizeof(lv_color_t);
 800936c:	ea4f 0b40 	mov.w	fp, r0, lsl #1
            for(a = 0; a < disp_refr->inv_p; a++) {
 8009370:	f8da 1000 	ldr.w	r1, [sl]
 8009374:	f8b1 3164 	ldrh.w	r3, [r1, #356]	; 0x164
 8009378:	b2b2      	uxth	r2, r6
 800937a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800937e:	429a      	cmp	r2, r3
 8009380:	f6bf aeaa 	bge.w	80090d8 <lv_disp_refr_task+0x50>
                if(disp_refr->inv_area_joined[a] == 0) {
 8009384:	188b      	adds	r3, r1, r2
 8009386:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 800938a:	b12b      	cbz	r3, 8009398 <lv_disp_refr_task+0x310>
 800938c:	3601      	adds	r6, #1
 800938e:	e7ef      	b.n	8009370 <lv_disp_refr_task+0x2e8>
 8009390:	200041f4 	.word	0x200041f4
 8009394:	200041f8 	.word	0x200041f8
 8009398:	eb01 08c2 	add.w	r8, r1, r2, lsl #3
                        (hres * disp_refr->inv_areas[a].y1 + disp_refr->inv_areas[a].x1) * sizeof(lv_color_t);
 800939c:	f9b8 3044 	ldrsh.w	r3, [r8, #68]	; 0x44
 80093a0:	f9b8 5046 	ldrsh.w	r5, [r8, #70]	; 0x46
    return area_p->x2 - area_p->x1 + 1;
 80093a4:	f8b8 2048 	ldrh.w	r2, [r8, #72]	; 0x48
 80093a8:	fb09 3405 	mla	r4, r9, r5, r3
 80093ac:	f1c3 0301 	rsb	r3, r3, #1
 80093b0:	4413      	add	r3, r2
                    uint32_t line_length = lv_area_get_width(&disp_refr->inv_areas[a]) * sizeof(lv_color_t);
 80093b2:	b21b      	sxth	r3, r3
 80093b4:	005b      	lsls	r3, r3, #1
 80093b6:	9301      	str	r3, [sp, #4]
 80093b8:	9b00      	ldr	r3, [sp, #0]
                    uint32_t start_offs =
 80093ba:	0064      	lsls	r4, r4, #1
 80093bc:	4423      	add	r3, r4
 80093be:	443c      	add	r4, r7
                    for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
 80093c0:	f9b8 204a 	ldrsh.w	r2, [r8, #74]	; 0x4a
 80093c4:	42aa      	cmp	r2, r5
 80093c6:	dbe1      	blt.n	800938c <lv_disp_refr_task+0x304>
                        memcpy(buf_act + start_offs, buf_ina + start_offs, line_length);
 80093c8:	4621      	mov	r1, r4
 80093ca:	4618      	mov	r0, r3
 80093cc:	9a01      	ldr	r2, [sp, #4]
 80093ce:	f005 ffaf 	bl	800f330 <memcpy>
 80093d2:	3501      	adds	r5, #1
 80093d4:	4603      	mov	r3, r0
 80093d6:	b22d      	sxth	r5, r5
 80093d8:	445b      	add	r3, fp
 80093da:	445c      	add	r4, fp
 80093dc:	e7f0      	b.n	80093c0 <lv_disp_refr_task+0x338>
            disp_refr->driver.monitor_cb(&disp_refr->driver, lv_tick_elaps(start), px_num);
 80093de:	9802      	ldr	r0, [sp, #8]
 80093e0:	f003 fe8e 	bl	800d100 <lv_tick_elaps>
 80093e4:	4b02      	ldr	r3, [pc, #8]	; (80093f0 <lv_disp_refr_task+0x368>)
 80093e6:	4601      	mov	r1, r0
 80093e8:	681a      	ldr	r2, [r3, #0]
 80093ea:	4620      	mov	r0, r4
 80093ec:	47a8      	blx	r5
 80093ee:	e68c      	b.n	800910a <lv_disp_refr_task+0x82>
 80093f0:	200041f8 	.word	0x200041f8

080093f4 <lv_style_copy>:
 * @param dest pointer to the destination style
 * @param src pointer to the source style
 */
void lv_style_copy(lv_style_t * dest, const lv_style_t * src)
{
    memcpy(dest, src, sizeof(lv_style_t));
 80093f4:	f101 033c 	add.w	r3, r1, #60	; 0x3c
 80093f8:	f851 2b04 	ldr.w	r2, [r1], #4
 80093fc:	f840 2b04 	str.w	r2, [r0], #4
 8009400:	4299      	cmp	r1, r3
 8009402:	d1f9      	bne.n	80093f8 <lv_style_copy+0x4>
}
 8009404:	4770      	bx	lr
	...

08009408 <lv_style_init>:
    lv_style_scr.glass               = 0;
 8009408:	49d7      	ldr	r1, [pc, #860]	; (8009768 <lv_style_init+0x360>)
{
 800940a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_style_scr.glass               = 0;
 800940e:	780b      	ldrb	r3, [r1, #0]
    lv_style_scr.body.main_color     = LV_COLOR_WHITE;
 8009410:	f8df 9370 	ldr.w	r9, [pc, #880]	; 8009784 <lv_style_init+0x37c>
    lv_style_copy(&lv_style_plain, &lv_style_scr);
 8009414:	4dd5      	ldr	r5, [pc, #852]	; (800976c <lv_style_init+0x364>)
    lv_style_scr.body.main_color     = LV_COLOR_WHITE;
 8009416:	f8b9 b000 	ldrh.w	fp, [r9]
 800941a:	f8a1 b002 	strh.w	fp, [r1, #2]
    lv_style_scr.glass               = 0;
 800941e:	f36f 0300 	bfc	r3, #0, #1
 8009422:	700b      	strb	r3, [r1, #0]
    lv_style_scr.body.border.color = LV_COLOR_BLACK;
 8009424:	7a8b      	ldrb	r3, [r1, #10]
    lv_style_scr.body.grad_color     = LV_COLOR_WHITE;
 8009426:	f8a1 b004 	strh.w	fp, [r1, #4]
    lv_style_scr.body.radius         = 0;
 800942a:	2600      	movs	r6, #0
    lv_style_scr.body.border.color = LV_COLOR_BLACK;
 800942c:	f366 0304 	bfi	r3, r6, #0, #5
 8009430:	728b      	strb	r3, [r1, #10]
 8009432:	894b      	ldrh	r3, [r1, #10]
    lv_style_scr.body.radius         = 0;
 8009434:	80ce      	strh	r6, [r1, #6]
    lv_style_scr.body.border.color = LV_COLOR_BLACK;
 8009436:	f366 134a 	bfi	r3, r6, #5, #6
 800943a:	814b      	strh	r3, [r1, #10]
 800943c:	0a1b      	lsrs	r3, r3, #8
 800943e:	f366 03c7 	bfi	r3, r6, #3, #5
 8009442:	72cb      	strb	r3, [r1, #11]
    lv_style_scr.body.border.part  = LV_BORDER_FULL;
 8009444:	230f      	movs	r3, #15
{
 8009446:	b085      	sub	sp, #20
    lv_style_scr.body.border.part  = LV_BORDER_FULL;
 8009448:	738b      	strb	r3, [r1, #14]
    lv_style_scr.body.shadow.color = LV_COLOR_GRAY;
 800944a:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 800944e:	f8ad 3004 	strh.w	r3, [sp, #4]
 8009452:	b29b      	uxth	r3, r3
 8009454:	820b      	strh	r3, [r1, #16]
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
 8009456:	f891 3020 	ldrb.w	r3, [r1, #32]
    lv_style_scr.body.padding.left   = 0;
 800945a:	834e      	strh	r6, [r1, #26]
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
 800945c:	2206      	movs	r2, #6
 800945e:	f362 0304 	bfi	r3, r2, #0, #5
 8009462:	f881 3020 	strb.w	r3, [r1, #32]
 8009466:	8c0b      	ldrh	r3, [r1, #32]
    lv_style_scr.body.padding.right  = 0;
 8009468:	838e      	strh	r6, [r1, #28]
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
 800946a:	220c      	movs	r2, #12
 800946c:	f362 134a 	bfi	r3, r2, #5, #6
 8009470:	840b      	strh	r3, [r1, #32]
 8009472:	2206      	movs	r2, #6
 8009474:	0a1b      	lsrs	r3, r3, #8
    lv_style_scr.body.padding.inner  = LV_DPI / 20;
 8009476:	f04f 0801 	mov.w	r8, #1
    lv_style_scr.body.opa            = LV_OPA_COVER;
 800947a:	24ff      	movs	r4, #255	; 0xff
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
 800947c:	f362 03c7 	bfi	r3, r2, #3, #5
    lv_style_scr.body.opa            = LV_OPA_COVER;
 8009480:	720c      	strb	r4, [r1, #8]
    lv_style_scr.body.padding.top    = 0;
 8009482:	82ce      	strh	r6, [r1, #22]
    lv_style_scr.body.padding.bottom = 0;
 8009484:	830e      	strh	r6, [r1, #24]
    lv_style_scr.body.padding.inner  = LV_DPI / 20;
 8009486:	f8a1 801e 	strh.w	r8, [r1, #30]
    lv_style_scr.body.border.opa   = LV_OPA_COVER;
 800948a:	73cc      	strb	r4, [r1, #15]
    lv_style_scr.body.border.width = 0;
 800948c:	818e      	strh	r6, [r1, #12]
    lv_style_scr.body.shadow.type  = LV_SHADOW_FULL;
 800948e:	f881 8014 	strb.w	r8, [r1, #20]
    lv_style_scr.body.shadow.width = 0;
 8009492:	824e      	strh	r6, [r1, #18]
    lv_style_scr.text.opa          = LV_OPA_COVER;
 8009494:	f881 402c 	strb.w	r4, [r1, #44]	; 0x2c
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
 8009498:	f881 3021 	strb.w	r3, [r1, #33]	; 0x21
    lv_style_scr.text.sel_color    = lv_color_make(0x55, 0x96, 0xd8);
 800949c:	f891 3022 	ldrb.w	r3, [r1, #34]	; 0x22
    lv_style_scr.image.opa     = LV_OPA_COVER;
 80094a0:	f881 4033 	strb.w	r4, [r1, #51]	; 0x33
    lv_style_scr.text.sel_color    = lv_color_make(0x55, 0x96, 0xd8);
 80094a4:	221b      	movs	r2, #27
 80094a6:	f362 0304 	bfi	r3, r2, #0, #5
 80094aa:	f881 3022 	strb.w	r3, [r1, #34]	; 0x22
 80094ae:	8c4a      	ldrh	r2, [r1, #34]	; 0x22
    lv_style_scr.line.opa     = LV_OPA_COVER;
 80094b0:	f881 4038 	strb.w	r4, [r1, #56]	; 0x38
    lv_style_scr.text.sel_color    = lv_color_make(0x55, 0x96, 0xd8);
 80094b4:	2325      	movs	r3, #37	; 0x25
 80094b6:	f363 124a 	bfi	r2, r3, #5, #6
 80094ba:	9303      	str	r3, [sp, #12]
 80094bc:	0a10      	lsrs	r0, r2, #8
 80094be:	844a      	strh	r2, [r1, #34]	; 0x22
 80094c0:	220a      	movs	r2, #10
 80094c2:	f362 00c7 	bfi	r0, r2, #3, #5
 80094c6:	9202      	str	r2, [sp, #8]
 80094c8:	f881 0023 	strb.w	r0, [r1, #35]	; 0x23
    lv_style_scr.text.font         = LV_FONT_DEFAULT;
 80094cc:	48a8      	ldr	r0, [pc, #672]	; (8009770 <lv_style_init+0x368>)
 80094ce:	6248      	str	r0, [r1, #36]	; 0x24
    lv_style_scr.image.color   = lv_color_make(0x20, 0x20, 0x20);
 80094d0:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
    lv_style_copy(&lv_style_plain_color, &lv_style_plain);
 80094d4:	4ca7      	ldr	r4, [pc, #668]	; (8009774 <lv_style_init+0x36c>)
    lv_style_scr.text.letter_space = 0;
 80094d6:	850e      	strh	r6, [r1, #40]	; 0x28
    lv_style_scr.image.color   = lv_color_make(0x20, 0x20, 0x20);
 80094d8:	2704      	movs	r7, #4
 80094da:	f367 0004 	bfi	r0, r7, #0, #5
 80094de:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
 80094e2:	8e08      	ldrh	r0, [r1, #48]	; 0x30
    lv_style_scr.image.intense = LV_OPA_TRANSP;
 80094e4:	f881 6032 	strb.w	r6, [r1, #50]	; 0x32
    lv_style_scr.image.color   = lv_color_make(0x20, 0x20, 0x20);
 80094e8:	f04f 0a08 	mov.w	sl, #8
 80094ec:	f36a 104a 	bfi	r0, sl, #5, #6
 80094f0:	8608      	strh	r0, [r1, #48]	; 0x30
 80094f2:	fa20 f00a 	lsr.w	r0, r0, sl
 80094f6:	f367 00c7 	bfi	r0, r7, #3, #5
 80094fa:	f881 0031 	strb.w	r0, [r1, #49]	; 0x31
    lv_style_scr.line.color   = lv_color_make(0x20, 0x20, 0x20);
 80094fe:	f891 0034 	ldrb.w	r0, [r1, #52]	; 0x34
 8009502:	f367 0004 	bfi	r0, r7, #0, #5
 8009506:	f881 0034 	strb.w	r0, [r1, #52]	; 0x34
 800950a:	8e88      	ldrh	r0, [r1, #52]	; 0x34
 800950c:	f36a 104a 	bfi	r0, sl, #5, #6
 8009510:	8688      	strh	r0, [r1, #52]	; 0x34
 8009512:	fa20 f00a 	lsr.w	r0, r0, sl
 8009516:	f367 00c7 	bfi	r0, r7, #3, #5
 800951a:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
    lv_style_scr.line.rounded = 0;
 800951e:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 8009522:	f366 0000 	bfi	r0, r6, #0, #1
    lv_style_scr.text.line_space   = 2;
 8009526:	f04f 0302 	mov.w	r3, #2
    lv_style_scr.line.rounded = 0;
 800952a:	f881 0039 	strb.w	r0, [r1, #57]	; 0x39
    lv_style_copy(&lv_style_plain, &lv_style_scr);
 800952e:	4628      	mov	r0, r5
    lv_style_scr.text.line_space   = 2;
 8009530:	854b      	strh	r3, [r1, #42]	; 0x2a
    lv_style_scr.line.width   = 2;
 8009532:	86cb      	strh	r3, [r1, #54]	; 0x36
    lv_style_copy(&lv_style_plain, &lv_style_scr);
 8009534:	f7ff ff5e 	bl	80093f4 <lv_style_copy>
    lv_style_copy(&lv_style_plain_color, &lv_style_plain);
 8009538:	4629      	mov	r1, r5
 800953a:	4620      	mov	r0, r4
    lv_style_plain.body.padding.left   = LV_DPI / 20;
 800953c:	f8a5 801a 	strh.w	r8, [r5, #26]
    lv_style_plain.body.padding.right  = LV_DPI / 20;
 8009540:	f8a5 801c 	strh.w	r8, [r5, #28]
    lv_style_plain.body.padding.top    = LV_DPI / 20;
 8009544:	f8a5 8016 	strh.w	r8, [r5, #22]
    lv_style_plain.body.padding.bottom = LV_DPI / 20;
 8009548:	f8a5 8018 	strh.w	r8, [r5, #24]
    lv_style_copy(&lv_style_plain_color, &lv_style_plain);
 800954c:	f7ff ff52 	bl	80093f4 <lv_style_copy>
    lv_style_plain_color.text.color      = lv_color_make(0xf0, 0xf0, 0xf0);
 8009550:	f894 1020 	ldrb.w	r1, [r4, #32]
 8009554:	231e      	movs	r3, #30
 8009556:	f363 0104 	bfi	r1, r3, #0, #5
 800955a:	f884 1020 	strb.w	r1, [r4, #32]
 800955e:	8c21      	ldrh	r1, [r4, #32]
 8009560:	203c      	movs	r0, #60	; 0x3c
 8009562:	f360 114a 	bfi	r1, r0, #5, #6
 8009566:	8421      	strh	r1, [r4, #32]
 8009568:	fa21 f10a 	lsr.w	r1, r1, sl
 800956c:	f363 01c7 	bfi	r1, r3, #3, #5
 8009570:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    lv_style_plain_color.image.color     = lv_color_make(0xf0, 0xf0, 0xf0);
 8009574:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8009578:	f363 0104 	bfi	r1, r3, #0, #5
 800957c:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
 8009580:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 8009582:	f360 114a 	bfi	r1, r0, #5, #6
 8009586:	8621      	strh	r1, [r4, #48]	; 0x30
 8009588:	fa21 f10a 	lsr.w	r1, r1, sl
 800958c:	f363 01c7 	bfi	r1, r3, #3, #5
 8009590:	f884 1031 	strb.w	r1, [r4, #49]	; 0x31
    lv_style_plain_color.line.color      = lv_color_make(0xf0, 0xf0, 0xf0);
 8009594:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
 8009598:	f363 0104 	bfi	r1, r3, #0, #5
 800959c:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 80095a0:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 80095a2:	f360 114a 	bfi	r1, r0, #5, #6
 80095a6:	86a1      	strh	r1, [r4, #52]	; 0x34
 80095a8:	fa21 f10a 	lsr.w	r1, r1, sl
 80095ac:	f363 01c7 	bfi	r1, r3, #3, #5
 80095b0:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    lv_style_plain_color.body.main_color = lv_color_make(0x55, 0x96, 0xd8);
 80095b4:	78a1      	ldrb	r1, [r4, #2]
 80095b6:	231b      	movs	r3, #27
 80095b8:	f363 0104 	bfi	r1, r3, #0, #5
 80095bc:	70a1      	strb	r1, [r4, #2]
 80095be:	8861      	ldrh	r1, [r4, #2]
 80095c0:	9b03      	ldr	r3, [sp, #12]
 80095c2:	f363 114a 	bfi	r1, r3, #5, #6
 80095c6:	8061      	strh	r1, [r4, #2]
 80095c8:	9a02      	ldr	r2, [sp, #8]
 80095ca:	fa21 f10a 	lsr.w	r1, r1, sl
 80095ce:	f362 01c7 	bfi	r1, r2, #3, #5
 80095d2:	70e1      	strb	r1, [r4, #3]
    lv_style_plain_color.body.grad_color = lv_style_plain_color.body.main_color;
 80095d4:	8863      	ldrh	r3, [r4, #2]
 80095d6:	80a3      	strh	r3, [r4, #4]
    lv_style_copy(&lv_style_pretty, &lv_style_plain);
 80095d8:	4b67      	ldr	r3, [pc, #412]	; (8009778 <lv_style_init+0x370>)
 80095da:	9302      	str	r3, [sp, #8]
 80095dc:	4629      	mov	r1, r5
 80095de:	4618      	mov	r0, r3
 80095e0:	f7ff ff08 	bl	80093f4 <lv_style_copy>
    lv_style_pretty.text.color        = lv_color_make(0x20, 0x20, 0x20);
 80095e4:	9b02      	ldr	r3, [sp, #8]
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
 80095e6:	4c65      	ldr	r4, [pc, #404]	; (800977c <lv_style_init+0x374>)
    lv_style_pretty.text.color        = lv_color_make(0x20, 0x20, 0x20);
 80095e8:	f893 2020 	ldrb.w	r2, [r3, #32]
    lv_style_pretty.body.main_color   = LV_COLOR_WHITE;
 80095ec:	f8a3 b002 	strh.w	fp, [r3, #2]
    lv_style_pretty.text.color        = lv_color_make(0x20, 0x20, 0x20);
 80095f0:	f367 0204 	bfi	r2, r7, #0, #5
 80095f4:	f883 2020 	strb.w	r2, [r3, #32]
 80095f8:	8c1a      	ldrh	r2, [r3, #32]
    lv_style_pretty.body.radius       = LV_DPI / 15;
 80095fa:	f8a3 8006 	strh.w	r8, [r3, #6]
    lv_style_pretty.text.color        = lv_color_make(0x20, 0x20, 0x20);
 80095fe:	f36a 124a 	bfi	r2, sl, #5, #6
 8009602:	841a      	strh	r2, [r3, #32]
 8009604:	fa22 f20a 	lsr.w	r2, r2, sl
 8009608:	f367 02c7 	bfi	r2, r7, #3, #5
 800960c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    lv_style_pretty.image.color       = lv_color_make(0x20, 0x20, 0x20);
 8009610:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    lv_style_pretty.body.border.width = LV_DPI / 50 >= 1 ? LV_DPI / 50 : 1;
 8009614:	f8a3 800c 	strh.w	r8, [r3, #12]
    lv_style_pretty.image.color       = lv_color_make(0x20, 0x20, 0x20);
 8009618:	f367 0204 	bfi	r2, r7, #0, #5
 800961c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8009620:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8009622:	f36a 124a 	bfi	r2, sl, #5, #6
 8009626:	861a      	strh	r2, [r3, #48]	; 0x30
 8009628:	fa22 f20a 	lsr.w	r2, r2, sl
 800962c:	f367 02c7 	bfi	r2, r7, #3, #5
 8009630:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    lv_style_pretty.line.color        = lv_color_make(0x20, 0x20, 0x20);
 8009634:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8009638:	f367 0204 	bfi	r2, r7, #0, #5
 800963c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8009640:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8009642:	f36a 124a 	bfi	r2, sl, #5, #6
 8009646:	869a      	strh	r2, [r3, #52]	; 0x34
 8009648:	fa22 f20a 	lsr.w	r2, r2, sl
 800964c:	f367 02c7 	bfi	r2, r7, #3, #5
 8009650:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    lv_style_pretty.body.grad_color   = LV_COLOR_SILVER;
 8009654:	f8b9 2004 	ldrh.w	r2, [r9, #4]
 8009658:	809a      	strh	r2, [r3, #4]
    lv_style_pretty.body.border.color = lv_color_make(0x40, 0x40, 0x40);
 800965a:	7a9a      	ldrb	r2, [r3, #10]
 800965c:	f36a 0204 	bfi	r2, sl, #0, #5
 8009660:	729a      	strb	r2, [r3, #10]
 8009662:	895a      	ldrh	r2, [r3, #10]
 8009664:	2110      	movs	r1, #16
 8009666:	f361 124a 	bfi	r2, r1, #5, #6
 800966a:	815a      	strh	r2, [r3, #10]
 800966c:	fa22 f20a 	lsr.w	r2, r2, sl
 8009670:	f36a 02c7 	bfi	r2, sl, #3, #5
 8009674:	72da      	strb	r2, [r3, #11]
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
 8009676:	4619      	mov	r1, r3
    lv_style_pretty.body.border.opa   = LV_OPA_30;
 8009678:	224c      	movs	r2, #76	; 0x4c
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
 800967a:	4620      	mov	r0, r4
    lv_style_pretty.body.border.opa   = LV_OPA_30;
 800967c:	73da      	strb	r2, [r3, #15]
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
 800967e:	f7ff feb9 	bl	80093f4 <lv_style_copy>
    lv_style_pretty_color.text.color        = lv_color_make(0xe0, 0xe0, 0xe0);
 8009682:	f894 3020 	ldrb.w	r3, [r4, #32]
 8009686:	f04f 0b1c 	mov.w	fp, #28
 800968a:	f36b 0304 	bfi	r3, fp, #0, #5
 800968e:	f884 3020 	strb.w	r3, [r4, #32]
 8009692:	8c23      	ldrh	r3, [r4, #32]
 8009694:	2238      	movs	r2, #56	; 0x38
 8009696:	f362 134a 	bfi	r3, r2, #5, #6
 800969a:	8423      	strh	r3, [r4, #32]
 800969c:	fa23 f30a 	lsr.w	r3, r3, sl
 80096a0:	f36b 03c7 	bfi	r3, fp, #3, #5
 80096a4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    lv_style_pretty_color.image.color       = lv_color_make(0xe0, 0xe0, 0xe0);
 80096a8:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80096ac:	f36b 0304 	bfi	r3, fp, #0, #5
 80096b0:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 80096b4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80096b6:	f362 134a 	bfi	r3, r2, #5, #6
 80096ba:	8623      	strh	r3, [r4, #48]	; 0x30
 80096bc:	fa23 f30a 	lsr.w	r3, r3, sl
 80096c0:	f36b 03c7 	bfi	r3, fp, #3, #5
 80096c4:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    lv_style_pretty_color.line.color        = lv_color_make(0xc0, 0xc0, 0xc0);
 80096c8:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80096cc:	f04f 0918 	mov.w	r9, #24
 80096d0:	f369 0304 	bfi	r3, r9, #0, #5
 80096d4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 80096d8:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80096da:	2230      	movs	r2, #48	; 0x30
 80096dc:	f362 134a 	bfi	r3, r2, #5, #6
 80096e0:	86a3      	strh	r3, [r4, #52]	; 0x34
 80096e2:	fa23 f30a 	lsr.w	r3, r3, sl
 80096e6:	f369 03c7 	bfi	r3, r9, #3, #5
 80096ea:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    lv_style_pretty_color.body.main_color   = lv_color_make(0x6b, 0x9a, 0xc7);
 80096ee:	78a3      	ldrb	r3, [r4, #2]
 80096f0:	f369 0304 	bfi	r3, r9, #0, #5
 80096f4:	70a3      	strb	r3, [r4, #2]
 80096f6:	8863      	ldrh	r3, [r4, #2]
 80096f8:	2226      	movs	r2, #38	; 0x26
 80096fa:	f362 134a 	bfi	r3, r2, #5, #6
 80096fe:	8063      	strh	r3, [r4, #2]
 8009700:	220d      	movs	r2, #13
 8009702:	fa23 f30a 	lsr.w	r3, r3, sl
 8009706:	f362 03c7 	bfi	r3, r2, #3, #5
 800970a:	70e3      	strb	r3, [r4, #3]
    lv_style_pretty_color.body.grad_color   = lv_color_make(0x2b, 0x59, 0x8b);
 800970c:	7923      	ldrb	r3, [r4, #4]
 800970e:	2211      	movs	r2, #17
 8009710:	f362 0304 	bfi	r3, r2, #0, #5
 8009714:	7123      	strb	r3, [r4, #4]
 8009716:	88a3      	ldrh	r3, [r4, #4]
 8009718:	2216      	movs	r2, #22
 800971a:	f362 134a 	bfi	r3, r2, #5, #6
 800971e:	80a3      	strh	r3, [r4, #4]
 8009720:	2205      	movs	r2, #5
 8009722:	fa23 f30a 	lsr.w	r3, r3, sl
 8009726:	f362 03c7 	bfi	r3, r2, #3, #5
 800972a:	7163      	strb	r3, [r4, #5]
    lv_style_pretty_color.body.border.color = lv_color_make(0x15, 0x2c, 0x42);
 800972c:	7aa3      	ldrb	r3, [r4, #10]
 800972e:	f36a 0304 	bfi	r3, sl, #0, #5
 8009732:	72a3      	strb	r3, [r4, #10]
 8009734:	8962      	ldrh	r2, [r4, #10]
 8009736:	230b      	movs	r3, #11
 8009738:	f363 124a 	bfi	r2, r3, #5, #6
 800973c:	9302      	str	r3, [sp, #8]
 800973e:	2302      	movs	r3, #2
 8009740:	8162      	strh	r2, [r4, #10]
 8009742:	fa22 f20a 	lsr.w	r2, r2, sl
    lv_style_copy(&lv_style_transp, &lv_style_plain);
 8009746:	f8df a040 	ldr.w	sl, [pc, #64]	; 8009788 <lv_style_init+0x380>
    lv_style_pretty_color.body.border.color = lv_color_make(0x15, 0x2c, 0x42);
 800974a:	f363 02c7 	bfi	r2, r3, #3, #5
 800974e:	72e2      	strb	r2, [r4, #11]
    lv_style_copy(&lv_style_transp, &lv_style_plain);
 8009750:	4629      	mov	r1, r5
 8009752:	4650      	mov	r0, sl
 8009754:	f7ff fe4e 	bl	80093f4 <lv_style_copy>
    lv_style_transp.glass             = 1;
 8009758:	f89a 2000 	ldrb.w	r2, [sl]
    lv_style_copy(&lv_style_transp_fit, &lv_style_transp);
 800975c:	4c08      	ldr	r4, [pc, #32]	; (8009780 <lv_style_init+0x378>)
    lv_style_transp.body.border.width = 0;
 800975e:	f8aa 600c 	strh.w	r6, [sl, #12]
    lv_style_transp.glass             = 1;
 8009762:	ea42 0208 	orr.w	r2, r2, r8
 8009766:	e011      	b.n	800978c <lv_style_init+0x384>
 8009768:	2000d828 	.word	0x2000d828
 800976c:	2000d7b0 	.word	0x2000d7b0
 8009770:	20000ca4 	.word	0x20000ca4
 8009774:	2000d8a0 	.word	0x2000d8a0
 8009778:	2000d6c0 	.word	0x2000d6c0
 800977c:	2000d5d0 	.word	0x2000d5d0
 8009780:	2000d774 	.word	0x2000d774
 8009784:	08011d18 	.word	0x08011d18
 8009788:	2000d60c 	.word	0x2000d60c
 800978c:	f88a 2000 	strb.w	r2, [sl]
    lv_style_transp.body.opa          = LV_OPA_TRANSP;
 8009790:	f88a 6008 	strb.w	r6, [sl, #8]
    lv_style_copy(&lv_style_transp_fit, &lv_style_transp);
 8009794:	4651      	mov	r1, sl
 8009796:	4620      	mov	r0, r4
    lv_style_copy(&lv_style_transp_tight, &lv_style_transp_fit);
 8009798:	f8df a394 	ldr.w	sl, [pc, #916]	; 8009b30 <lv_style_init+0x728>
    lv_style_copy(&lv_style_transp_fit, &lv_style_transp);
 800979c:	f7ff fe2a 	bl	80093f4 <lv_style_copy>
    lv_style_transp_fit.body.padding.left   = 0;
 80097a0:	8366      	strh	r6, [r4, #26]
    lv_style_transp_fit.body.padding.right  = 0;
 80097a2:	83a6      	strh	r6, [r4, #28]
    lv_style_transp_fit.body.padding.top    = 0;
 80097a4:	82e6      	strh	r6, [r4, #22]
    lv_style_transp_fit.body.padding.bottom = 0;
 80097a6:	8326      	strh	r6, [r4, #24]
    lv_style_copy(&lv_style_transp_tight, &lv_style_transp_fit);
 80097a8:	4621      	mov	r1, r4
    lv_style_copy(&lv_style_btn_rel, &lv_style_plain);
 80097aa:	4cdd      	ldr	r4, [pc, #884]	; (8009b20 <lv_style_init+0x718>)
    lv_style_copy(&lv_style_transp_tight, &lv_style_transp_fit);
 80097ac:	4650      	mov	r0, sl
 80097ae:	f7ff fe21 	bl	80093f4 <lv_style_copy>
    lv_style_copy(&lv_style_btn_rel, &lv_style_plain);
 80097b2:	4629      	mov	r1, r5
 80097b4:	4620      	mov	r0, r4
    lv_style_transp_tight.body.padding.inner = 0;
 80097b6:	f8aa 601e 	strh.w	r6, [sl, #30]
    lv_style_copy(&lv_style_btn_rel, &lv_style_plain);
 80097ba:	f7ff fe1b 	bl	80093f4 <lv_style_copy>
    lv_style_btn_rel.body.main_color     = lv_color_make(0x76, 0xa2, 0xd0);
 80097be:	78a2      	ldrb	r2, [r4, #2]
    lv_style_btn_rel.body.radius         = LV_DPI / 15;
 80097c0:	f8a4 8006 	strh.w	r8, [r4, #6]
    lv_style_btn_rel.body.main_color     = lv_color_make(0x76, 0xa2, 0xd0);
 80097c4:	211a      	movs	r1, #26
 80097c6:	f361 0204 	bfi	r2, r1, #0, #5
 80097ca:	70a2      	strb	r2, [r4, #2]
 80097cc:	8862      	ldrh	r2, [r4, #2]
    lv_style_btn_rel.body.border.width   = LV_DPI / 50 >= 1 ? LV_DPI / 50 : 1;
 80097ce:	f8a4 800c 	strh.w	r8, [r4, #12]
    lv_style_btn_rel.body.main_color     = lv_color_make(0x76, 0xa2, 0xd0);
 80097d2:	2128      	movs	r1, #40	; 0x28
 80097d4:	f361 124a 	bfi	r2, r1, #5, #6
 80097d8:	f04f 0a0e 	mov.w	sl, #14
 80097dc:	8062      	strh	r2, [r4, #2]
 80097de:	0a12      	lsrs	r2, r2, #8
 80097e0:	f36a 02c7 	bfi	r2, sl, #3, #5
 80097e4:	70e2      	strb	r2, [r4, #3]
    lv_style_btn_rel.body.grad_color     = lv_color_make(0x19, 0x3a, 0x5d);
 80097e6:	9b02      	ldr	r3, [sp, #8]
 80097e8:	7922      	ldrb	r2, [r4, #4]
    lv_style_btn_rel.body.padding.top    = LV_DPI / 6;
 80097ea:	82e7      	strh	r7, [r4, #22]
    lv_style_btn_rel.body.grad_color     = lv_color_make(0x19, 0x3a, 0x5d);
 80097ec:	f363 0204 	bfi	r2, r3, #0, #5
 80097f0:	7122      	strb	r2, [r4, #4]
 80097f2:	88a3      	ldrh	r3, [r4, #4]
    lv_style_btn_rel.body.padding.bottom = LV_DPI / 6;
 80097f4:	8327      	strh	r7, [r4, #24]
    lv_style_btn_rel.body.grad_color     = lv_color_make(0x19, 0x3a, 0x5d);
 80097f6:	f36a 134a 	bfi	r3, sl, #5, #6
 80097fa:	80a3      	strh	r3, [r4, #4]
 80097fc:	2203      	movs	r2, #3
 80097fe:	0a1b      	lsrs	r3, r3, #8
 8009800:	f362 03c7 	bfi	r3, r2, #3, #5
 8009804:	7163      	strb	r3, [r4, #5]
    lv_style_btn_rel.body.padding.left   = LV_DPI / 4;
 8009806:	f04f 0306 	mov.w	r3, #6
 800980a:	8363      	strh	r3, [r4, #26]
    lv_style_btn_rel.body.padding.right  = LV_DPI / 4;
 800980c:	83a3      	strh	r3, [r4, #28]
    lv_style_btn_rel.body.padding.inner  = LV_DPI / 10;
 800980e:	f04f 0302 	mov.w	r3, #2
 8009812:	83e3      	strh	r3, [r4, #30]
    lv_style_btn_rel.body.border.color   = lv_color_make(0x0b, 0x19, 0x28);
 8009814:	7aa3      	ldrb	r3, [r4, #10]
    lv_style_btn_rel.body.shadow.width   = 0;
 8009816:	8266      	strh	r6, [r4, #18]
    lv_style_btn_rel.body.border.color   = lv_color_make(0x0b, 0x19, 0x28);
 8009818:	2205      	movs	r2, #5
 800981a:	f362 0304 	bfi	r3, r2, #0, #5
 800981e:	72a3      	strb	r3, [r4, #10]
 8009820:	8963      	ldrh	r3, [r4, #10]
    lv_style_copy(&lv_style_btn_pr, &lv_style_btn_rel);
 8009822:	4dc0      	ldr	r5, [pc, #768]	; (8009b24 <lv_style_init+0x71c>)
    lv_style_btn_rel.body.border.color   = lv_color_make(0x0b, 0x19, 0x28);
 8009824:	2206      	movs	r2, #6
 8009826:	f362 134a 	bfi	r3, r2, #5, #6
 800982a:	8163      	strh	r3, [r4, #10]
 800982c:	0a1b      	lsrs	r3, r3, #8
 800982e:	f368 03c7 	bfi	r3, r8, #3, #5
 8009832:	72e3      	strb	r3, [r4, #11]
    lv_style_btn_rel.body.border.opa     = LV_OPA_70;
 8009834:	23b2      	movs	r3, #178	; 0xb2
 8009836:	73e3      	strb	r3, [r4, #15]
    lv_style_btn_rel.body.shadow.color   = LV_COLOR_GRAY;
 8009838:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800983c:	8223      	strh	r3, [r4, #16]
    lv_style_btn_rel.text.color          = lv_color_make(0xff, 0xff, 0xff);
 800983e:	f894 3020 	ldrb.w	r3, [r4, #32]
 8009842:	f043 031f 	orr.w	r3, r3, #31
 8009846:	f884 3020 	strb.w	r3, [r4, #32]
 800984a:	8c23      	ldrh	r3, [r4, #32]
 800984c:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 8009850:	8423      	strh	r3, [r4, #32]
 8009852:	0a1b      	lsrs	r3, r3, #8
 8009854:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 8009858:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    lv_style_btn_rel.image.color         = lv_color_make(0xff, 0xff, 0xff);
 800985c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8009860:	f043 031f 	orr.w	r3, r3, #31
 8009864:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 8009868:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800986a:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800986e:	8623      	strh	r3, [r4, #48]	; 0x30
 8009870:	0a1b      	lsrs	r3, r3, #8
 8009872:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 8009876:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    lv_style_copy(&lv_style_btn_pr, &lv_style_btn_rel);
 800987a:	4621      	mov	r1, r4
 800987c:	4628      	mov	r0, r5
 800987e:	f7ff fdb9 	bl	80093f4 <lv_style_copy>
    lv_style_btn_pr.body.main_color = lv_color_make(0x33, 0x62, 0x94);
 8009882:	78ab      	ldrb	r3, [r5, #2]
 8009884:	2212      	movs	r2, #18
 8009886:	f362 0304 	bfi	r3, r2, #0, #5
 800988a:	70ab      	strb	r3, [r5, #2]
 800988c:	886b      	ldrh	r3, [r5, #2]
 800988e:	f369 134a 	bfi	r3, r9, #5, #6
 8009892:	806b      	strh	r3, [r5, #2]
 8009894:	2206      	movs	r2, #6
 8009896:	0a1b      	lsrs	r3, r3, #8
 8009898:	f362 03c7 	bfi	r3, r2, #3, #5
 800989c:	70eb      	strb	r3, [r5, #3]
    lv_style_btn_pr.body.grad_color = lv_color_make(0x10, 0x26, 0x3c);
 800989e:	792b      	ldrb	r3, [r5, #4]
 80098a0:	2207      	movs	r2, #7
 80098a2:	f362 0304 	bfi	r3, r2, #0, #5
 80098a6:	712b      	strb	r3, [r5, #4]
 80098a8:	88ab      	ldrh	r3, [r5, #4]
 80098aa:	2209      	movs	r2, #9
 80098ac:	f362 134a 	bfi	r3, r2, #5, #6
 80098b0:	80ab      	strh	r3, [r5, #4]
 80098b2:	2202      	movs	r2, #2
 80098b4:	0a1b      	lsrs	r3, r3, #8
 80098b6:	f362 03c7 	bfi	r3, r2, #3, #5
 80098ba:	716b      	strb	r3, [r5, #5]
    lv_style_btn_pr.text.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 80098bc:	f895 3020 	ldrb.w	r3, [r5, #32]
 80098c0:	f369 0304 	bfi	r3, r9, #0, #5
 80098c4:	f885 3020 	strb.w	r3, [r5, #32]
 80098c8:	8c2b      	ldrh	r3, [r5, #32]
 80098ca:	222d      	movs	r2, #45	; 0x2d
 80098cc:	f362 134a 	bfi	r3, r2, #5, #6
 80098d0:	842b      	strh	r3, [r5, #32]
 80098d2:	0a19      	lsrs	r1, r3, #8
 80098d4:	2314      	movs	r3, #20
 80098d6:	f363 01c7 	bfi	r1, r3, #3, #5
 80098da:	f885 1021 	strb.w	r1, [r5, #33]	; 0x21
    lv_style_btn_pr.image.color     = lv_color_make(0xa4, 0xb5, 0xc6);
 80098de:	f895 1030 	ldrb.w	r1, [r5, #48]	; 0x30
 80098e2:	f369 0104 	bfi	r1, r9, #0, #5
 80098e6:	f885 1030 	strb.w	r1, [r5, #48]	; 0x30
 80098ea:	8e29      	ldrh	r1, [r5, #48]	; 0x30
 80098ec:	f362 114a 	bfi	r1, r2, #5, #6
 80098f0:	8629      	strh	r1, [r5, #48]	; 0x30
 80098f2:	0a09      	lsrs	r1, r1, #8
 80098f4:	f363 01c7 	bfi	r1, r3, #3, #5
 80098f8:	f885 1031 	strb.w	r1, [r5, #49]	; 0x31
    lv_style_btn_pr.line.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 80098fc:	f895 1034 	ldrb.w	r1, [r5, #52]	; 0x34
 8009900:	f369 0104 	bfi	r1, r9, #0, #5
 8009904:	f885 1034 	strb.w	r1, [r5, #52]	; 0x34
 8009908:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 800990a:	9202      	str	r2, [sp, #8]
 800990c:	f362 114a 	bfi	r1, r2, #5, #6
 8009910:	86a9      	strh	r1, [r5, #52]	; 0x34
 8009912:	0a09      	lsrs	r1, r1, #8
 8009914:	f363 01c7 	bfi	r1, r3, #3, #5
 8009918:	9301      	str	r3, [sp, #4]
 800991a:	f885 1035 	strb.w	r1, [r5, #53]	; 0x35
    lv_style_copy(&lv_style_btn_tgl_rel, &lv_style_btn_rel);
 800991e:	4d82      	ldr	r5, [pc, #520]	; (8009b28 <lv_style_init+0x720>)
 8009920:	4621      	mov	r1, r4
 8009922:	4628      	mov	r0, r5
 8009924:	f7ff fd66 	bl	80093f4 <lv_style_copy>
    lv_style_btn_tgl_rel.body.main_color   = lv_color_make(0x0a, 0x11, 0x22);
 8009928:	78a9      	ldrb	r1, [r5, #2]
 800992a:	f367 0104 	bfi	r1, r7, #0, #5
 800992e:	70a9      	strb	r1, [r5, #2]
 8009930:	8869      	ldrh	r1, [r5, #2]
 8009932:	f367 114a 	bfi	r1, r7, #5, #6
 8009936:	8069      	strh	r1, [r5, #2]
 8009938:	0a09      	lsrs	r1, r1, #8
 800993a:	f368 01c7 	bfi	r1, r8, #3, #5
 800993e:	70e9      	strb	r1, [r5, #3]
    lv_style_btn_tgl_rel.body.grad_color   = lv_color_make(0x37, 0x62, 0x90);
 8009940:	7929      	ldrb	r1, [r5, #4]
 8009942:	2312      	movs	r3, #18
 8009944:	f363 0104 	bfi	r1, r3, #0, #5
 8009948:	7129      	strb	r1, [r5, #4]
 800994a:	88a9      	ldrh	r1, [r5, #4]
 800994c:	f369 114a 	bfi	r1, r9, #5, #6
 8009950:	80a9      	strh	r1, [r5, #4]
 8009952:	2306      	movs	r3, #6
 8009954:	0a09      	lsrs	r1, r1, #8
 8009956:	f363 01c7 	bfi	r1, r3, #3, #5
 800995a:	7169      	strb	r1, [r5, #5]
    lv_style_btn_tgl_rel.body.border.color = lv_color_make(0x01, 0x07, 0x0d);
 800995c:	7aa9      	ldrb	r1, [r5, #10]
 800995e:	f368 0104 	bfi	r1, r8, #0, #5
 8009962:	72a9      	strb	r1, [r5, #10]
 8009964:	8969      	ldrh	r1, [r5, #10]
 8009966:	f368 114a 	bfi	r1, r8, #5, #6
 800996a:	8169      	strh	r1, [r5, #10]
 800996c:	0a09      	lsrs	r1, r1, #8
 800996e:	f366 01c7 	bfi	r1, r6, #3, #5
 8009972:	72e9      	strb	r1, [r5, #11]
    lv_style_btn_tgl_rel.text.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 8009974:	f895 1020 	ldrb.w	r1, [r5, #32]
    lv_style_copy(&lv_style_btn_tgl_pr, &lv_style_btn_tgl_rel);
 8009978:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 8009b34 <lv_style_init+0x72c>
    lv_style_btn_tgl_rel.text.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 800997c:	231e      	movs	r3, #30
 800997e:	f363 0104 	bfi	r1, r3, #0, #5
 8009982:	f885 1020 	strb.w	r1, [r5, #32]
 8009986:	8c29      	ldrh	r1, [r5, #32]
 8009988:	f04f 0e37 	mov.w	lr, #55	; 0x37
 800998c:	f36e 114a 	bfi	r1, lr, #5, #6
 8009990:	8429      	strh	r1, [r5, #32]
 8009992:	2019      	movs	r0, #25
 8009994:	0a09      	lsrs	r1, r1, #8
 8009996:	f360 01c7 	bfi	r1, r0, #3, #5
 800999a:	f885 1021 	strb.w	r1, [r5, #33]	; 0x21
    lv_style_btn_tgl_rel.image.color       = lv_color_make(0xc8, 0xdd, 0xf4);
 800999e:	f895 1030 	ldrb.w	r1, [r5, #48]	; 0x30
 80099a2:	f363 0104 	bfi	r1, r3, #0, #5
 80099a6:	f885 1030 	strb.w	r1, [r5, #48]	; 0x30
 80099aa:	8e29      	ldrh	r1, [r5, #48]	; 0x30
 80099ac:	f36e 114a 	bfi	r1, lr, #5, #6
 80099b0:	8629      	strh	r1, [r5, #48]	; 0x30
 80099b2:	0a09      	lsrs	r1, r1, #8
 80099b4:	f360 01c7 	bfi	r1, r0, #3, #5
 80099b8:	f885 1031 	strb.w	r1, [r5, #49]	; 0x31
    lv_style_btn_tgl_rel.line.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 80099bc:	f895 1034 	ldrb.w	r1, [r5, #52]	; 0x34
 80099c0:	f363 0104 	bfi	r1, r3, #0, #5
 80099c4:	f885 1034 	strb.w	r1, [r5, #52]	; 0x34
 80099c8:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 80099ca:	f36e 114a 	bfi	r1, lr, #5, #6
 80099ce:	86a9      	strh	r1, [r5, #52]	; 0x34
 80099d0:	0a09      	lsrs	r1, r1, #8
 80099d2:	f360 01c7 	bfi	r1, r0, #3, #5
 80099d6:	f885 1035 	strb.w	r1, [r5, #53]	; 0x35
    lv_style_copy(&lv_style_btn_tgl_pr, &lv_style_btn_tgl_rel);
 80099da:	4640      	mov	r0, r8
 80099dc:	4629      	mov	r1, r5
 80099de:	f7ff fd09 	bl	80093f4 <lv_style_copy>
    lv_style_btn_tgl_pr.body.main_color = lv_color_make(0x02, 0x14, 0x27);
 80099e2:	f898 1002 	ldrb.w	r1, [r8, #2]
    lv_style_copy(&lv_style_btn_ina, &lv_style_btn_rel);
 80099e6:	4d51      	ldr	r5, [pc, #324]	; (8009b2c <lv_style_init+0x724>)
    lv_style_btn_tgl_pr.body.main_color = lv_color_make(0x02, 0x14, 0x27);
 80099e8:	f367 0104 	bfi	r1, r7, #0, #5
 80099ec:	f888 1002 	strb.w	r1, [r8, #2]
 80099f0:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 80099f4:	2305      	movs	r3, #5
 80099f6:	f363 114a 	bfi	r1, r3, #5, #6
 80099fa:	f8a8 1002 	strh.w	r1, [r8, #2]
 80099fe:	0a09      	lsrs	r1, r1, #8
 8009a00:	f366 01c7 	bfi	r1, r6, #3, #5
 8009a04:	f888 1003 	strb.w	r1, [r8, #3]
    lv_style_btn_tgl_pr.body.grad_color = lv_color_make(0x2b, 0x4c, 0x70);
 8009a08:	f898 1004 	ldrb.w	r1, [r8, #4]
 8009a0c:	f36a 0104 	bfi	r1, sl, #0, #5
 8009a10:	f888 1004 	strb.w	r1, [r8, #4]
 8009a14:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8009a18:	2013      	movs	r0, #19
 8009a1a:	f360 114a 	bfi	r1, r0, #5, #6
 8009a1e:	f8a8 1004 	strh.w	r1, [r8, #4]
 8009a22:	0a09      	lsrs	r1, r1, #8
 8009a24:	f363 01c7 	bfi	r1, r3, #3, #5
 8009a28:	f888 1005 	strb.w	r1, [r8, #5]
    lv_style_btn_tgl_pr.text.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 8009a2c:	f898 1020 	ldrb.w	r1, [r8, #32]
 8009a30:	9a02      	ldr	r2, [sp, #8]
 8009a32:	f369 0104 	bfi	r1, r9, #0, #5
 8009a36:	f888 1020 	strb.w	r1, [r8, #32]
 8009a3a:	f8b8 1020 	ldrh.w	r1, [r8, #32]
 8009a3e:	f362 114a 	bfi	r1, r2, #5, #6
 8009a42:	f8a8 1020 	strh.w	r1, [r8, #32]
 8009a46:	9b01      	ldr	r3, [sp, #4]
 8009a48:	0a09      	lsrs	r1, r1, #8
 8009a4a:	f363 01c7 	bfi	r1, r3, #3, #5
 8009a4e:	f888 1021 	strb.w	r1, [r8, #33]	; 0x21
    lv_style_btn_tgl_pr.image.color     = lv_color_make(0xa4, 0xb5, 0xc6);
 8009a52:	f898 1030 	ldrb.w	r1, [r8, #48]	; 0x30
 8009a56:	f369 0104 	bfi	r1, r9, #0, #5
 8009a5a:	f888 1030 	strb.w	r1, [r8, #48]	; 0x30
 8009a5e:	f8b8 1030 	ldrh.w	r1, [r8, #48]	; 0x30
 8009a62:	f362 114a 	bfi	r1, r2, #5, #6
 8009a66:	f8a8 1030 	strh.w	r1, [r8, #48]	; 0x30
 8009a6a:	0a09      	lsrs	r1, r1, #8
 8009a6c:	f363 01c7 	bfi	r1, r3, #3, #5
 8009a70:	f888 1031 	strb.w	r1, [r8, #49]	; 0x31
    lv_style_btn_tgl_pr.line.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 8009a74:	f898 1034 	ldrb.w	r1, [r8, #52]	; 0x34
 8009a78:	f369 0104 	bfi	r1, r9, #0, #5
 8009a7c:	f888 1034 	strb.w	r1, [r8, #52]	; 0x34
 8009a80:	f8b8 1034 	ldrh.w	r1, [r8, #52]	; 0x34
 8009a84:	f362 114a 	bfi	r1, r2, #5, #6
 8009a88:	f8a8 1034 	strh.w	r1, [r8, #52]	; 0x34
 8009a8c:	0a09      	lsrs	r1, r1, #8
 8009a8e:	f363 01c7 	bfi	r1, r3, #3, #5
 8009a92:	f888 1035 	strb.w	r1, [r8, #53]	; 0x35
    lv_style_copy(&lv_style_btn_ina, &lv_style_btn_rel);
 8009a96:	4628      	mov	r0, r5
 8009a98:	4621      	mov	r1, r4
 8009a9a:	f7ff fcab 	bl	80093f4 <lv_style_copy>
    lv_style_btn_ina.body.main_color   = lv_color_make(0xd8, 0xd8, 0xd8);
 8009a9e:	78ab      	ldrb	r3, [r5, #2]
 8009aa0:	221b      	movs	r2, #27
 8009aa2:	f362 0304 	bfi	r3, r2, #0, #5
 8009aa6:	70ab      	strb	r3, [r5, #2]
 8009aa8:	886b      	ldrh	r3, [r5, #2]
 8009aaa:	2236      	movs	r2, #54	; 0x36
 8009aac:	f362 134a 	bfi	r3, r2, #5, #6
 8009ab0:	211b      	movs	r1, #27
 8009ab2:	806b      	strh	r3, [r5, #2]
 8009ab4:	0a1b      	lsrs	r3, r3, #8
 8009ab6:	f361 03c7 	bfi	r3, r1, #3, #5
 8009aba:	70eb      	strb	r3, [r5, #3]
    lv_style_btn_ina.body.grad_color   = lv_color_make(0xd8, 0xd8, 0xd8);
 8009abc:	792b      	ldrb	r3, [r5, #4]
 8009abe:	f361 0304 	bfi	r3, r1, #0, #5
 8009ac2:	712b      	strb	r3, [r5, #4]
 8009ac4:	88ab      	ldrh	r3, [r5, #4]
 8009ac6:	f362 134a 	bfi	r3, r2, #5, #6
 8009aca:	80ab      	strh	r3, [r5, #4]
 8009acc:	0a1b      	lsrs	r3, r3, #8
 8009ace:	f361 03c7 	bfi	r3, r1, #3, #5
 8009ad2:	716b      	strb	r3, [r5, #5]
    lv_style_btn_ina.body.border.color = lv_color_make(0x90, 0x90, 0x90);
 8009ad4:	7aab      	ldrb	r3, [r5, #10]
 8009ad6:	2212      	movs	r2, #18
 8009ad8:	f362 0304 	bfi	r3, r2, #0, #5
 8009adc:	72ab      	strb	r3, [r5, #10]
 8009ade:	896b      	ldrh	r3, [r5, #10]
 8009ae0:	2224      	movs	r2, #36	; 0x24
 8009ae2:	f362 134a 	bfi	r3, r2, #5, #6
 8009ae6:	816b      	strh	r3, [r5, #10]
 8009ae8:	2212      	movs	r2, #18
 8009aea:	0a1b      	lsrs	r3, r3, #8
 8009aec:	f362 03c7 	bfi	r3, r2, #3, #5
 8009af0:	72eb      	strb	r3, [r5, #11]
    lv_style_btn_ina.text.color        = lv_color_make(0x70, 0x70, 0x70);
 8009af2:	f895 3020 	ldrb.w	r3, [r5, #32]
 8009af6:	f36a 0304 	bfi	r3, sl, #0, #5
 8009afa:	f885 3020 	strb.w	r3, [r5, #32]
 8009afe:	8c2b      	ldrh	r3, [r5, #32]
 8009b00:	f36b 134a 	bfi	r3, fp, #5, #6
 8009b04:	842b      	strh	r3, [r5, #32]
 8009b06:	0a1b      	lsrs	r3, r3, #8
 8009b08:	f36a 03c7 	bfi	r3, sl, #3, #5
 8009b0c:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
    lv_style_btn_ina.image.color       = lv_color_make(0x70, 0x70, 0x70);
 8009b10:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8009b14:	f36a 0304 	bfi	r3, sl, #0, #5
 8009b18:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8009b1c:	e00c      	b.n	8009b38 <lv_style_init+0x730>
 8009b1e:	bf00      	nop
 8009b20:	2000d648 	.word	0x2000d648
 8009b24:	2000d684 	.word	0x2000d684
 8009b28:	2000d7ec 	.word	0x2000d7ec
 8009b2c:	2000d738 	.word	0x2000d738
 8009b30:	2000d6fc 	.word	0x2000d6fc
 8009b34:	2000d864 	.word	0x2000d864
 8009b38:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 8009b3a:	f36b 134a 	bfi	r3, fp, #5, #6
 8009b3e:	862b      	strh	r3, [r5, #48]	; 0x30
 8009b40:	0a1b      	lsrs	r3, r3, #8
 8009b42:	f36a 03c7 	bfi	r3, sl, #3, #5
 8009b46:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
    lv_style_btn_ina.line.color        = lv_color_make(0x70, 0x70, 0x70);
 8009b4a:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 8009b4e:	f36a 0304 	bfi	r3, sl, #0, #5
 8009b52:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
 8009b56:	8eab      	ldrh	r3, [r5, #52]	; 0x34
 8009b58:	f36b 134a 	bfi	r3, fp, #5, #6
 8009b5c:	86ab      	strh	r3, [r5, #52]	; 0x34
 8009b5e:	0a1b      	lsrs	r3, r3, #8
 8009b60:	f36a 03c7 	bfi	r3, sl, #3, #5
 8009b64:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
}
 8009b68:	b005      	add	sp, #20
 8009b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b6e:	bf00      	nop

08009b70 <lv_draw_get_buf>:
 * Be careful to not use the buffer while other processes are using it.
 * @param size the required size
 */
void * lv_draw_get_buf(uint32_t size)
{
    if(size <= draw_buf_size) return LV_GC_ROOT(_lv_draw_buf);
 8009b70:	4b0c      	ldr	r3, [pc, #48]	; (8009ba4 <lv_draw_get_buf+0x34>)
 8009b72:	681a      	ldr	r2, [r3, #0]
 8009b74:	4282      	cmp	r2, r0
{
 8009b76:	b510      	push	{r4, lr}
 8009b78:	4601      	mov	r1, r0
 8009b7a:	4c0b      	ldr	r4, [pc, #44]	; (8009ba8 <lv_draw_get_buf+0x38>)
    if(size <= draw_buf_size) return LV_GC_ROOT(_lv_draw_buf);
 8009b7c:	d301      	bcc.n	8009b82 <lv_draw_get_buf+0x12>
 8009b7e:	6820      	ldr	r0, [r4, #0]
 8009b80:	bd10      	pop	{r4, pc}

    LV_LOG_TRACE("lv_draw_get_buf: allocate");

    draw_buf_size = size;
 8009b82:	6018      	str	r0, [r3, #0]

    if(LV_GC_ROOT(_lv_draw_buf) == NULL) {
 8009b84:	6823      	ldr	r3, [r4, #0]
 8009b86:	b923      	cbnz	r3, 8009b92 <lv_draw_get_buf+0x22>
        LV_GC_ROOT(_lv_draw_buf) = lv_mem_alloc(size);
 8009b88:	f003 fefe 	bl	800d988 <lv_mem_alloc>
 8009b8c:	6020      	str	r0, [r4, #0]
        lv_mem_assert(LV_GC_ROOT(_lv_draw_buf));
 8009b8e:	b938      	cbnz	r0, 8009ba0 <lv_draw_get_buf+0x30>
 8009b90:	e7fe      	b.n	8009b90 <lv_draw_get_buf+0x20>
        return LV_GC_ROOT(_lv_draw_buf);
    }

    LV_GC_ROOT(_lv_draw_buf) = lv_mem_realloc(LV_GC_ROOT(_lv_draw_buf), size);
 8009b92:	4618      	mov	r0, r3
 8009b94:	f003 ff58 	bl	800da48 <lv_mem_realloc>
    lv_mem_assert(LV_GC_ROOT(_lv_draw_buf));
 8009b98:	b108      	cbz	r0, 8009b9e <lv_draw_get_buf+0x2e>
    LV_GC_ROOT(_lv_draw_buf) = lv_mem_realloc(LV_GC_ROOT(_lv_draw_buf), size);
 8009b9a:	6020      	str	r0, [r4, #0]
 8009b9c:	bd10      	pop	{r4, pc}
 8009b9e:	e7fe      	b.n	8009b9e <lv_draw_get_buf+0x2e>
    return LV_GC_ROOT(_lv_draw_buf);
}
 8009ba0:	bd10      	pop	{r4, pc}
 8009ba2:	bf00      	nop
 8009ba4:	200041fc 	.word	0x200041fc
 8009ba8:	2000d8f4 	.word	0x2000d8f4

08009bac <lv_draw_free_buf>:

/**
 * Free the draw buffer
 */
void lv_draw_free_buf(void)
{
 8009bac:	b510      	push	{r4, lr}
    if(LV_GC_ROOT(_lv_draw_buf)) {
 8009bae:	4c05      	ldr	r4, [pc, #20]	; (8009bc4 <lv_draw_free_buf+0x18>)
 8009bb0:	6820      	ldr	r0, [r4, #0]
 8009bb2:	b128      	cbz	r0, 8009bc0 <lv_draw_free_buf+0x14>
        lv_mem_free(LV_GC_ROOT(_lv_draw_buf));
 8009bb4:	f003 ff1e 	bl	800d9f4 <lv_mem_free>
        LV_GC_ROOT(_lv_draw_buf) = NULL;
        draw_buf_size = 0;
 8009bb8:	4a03      	ldr	r2, [pc, #12]	; (8009bc8 <lv_draw_free_buf+0x1c>)
        LV_GC_ROOT(_lv_draw_buf) = NULL;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	6023      	str	r3, [r4, #0]
        draw_buf_size = 0;
 8009bbe:	6013      	str	r3, [r2, #0]
 8009bc0:	bd10      	pop	{r4, pc}
 8009bc2:	bf00      	nop
 8009bc4:	2000d8f4 	.word	0x2000d8f4
 8009bc8:	200041fc 	.word	0x200041fc

08009bcc <lv_draw_aa_get_opa>:
    static const lv_opa_t seg7[7] = {18, 55, 91, 128, 164, 200, 237};
    static const lv_opa_t seg8[8] = {16, 48, 80, 112, 143, 175, 207, 239};

    static const lv_opa_t * seg_map[] = {seg1, seg2, seg3, seg4, seg5, seg6, seg7, seg8};

    if(seg == 0)
 8009bcc:	b188      	cbz	r0, 8009bf2 <lv_draw_aa_get_opa+0x26>
        return LV_OPA_TRANSP;
    else if(seg < 8)
 8009bce:	2807      	cmp	r0, #7
 8009bd0:	dc08      	bgt.n	8009be4 <lv_draw_aa_get_opa+0x18>
        return (uint32_t)((uint32_t)seg_map[seg - 1][px_id] * base_opa) >> 8;
 8009bd2:	3801      	subs	r0, #1
 8009bd4:	4b07      	ldr	r3, [pc, #28]	; (8009bf4 <lv_draw_aa_get_opa+0x28>)
 8009bd6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8009bda:	5c58      	ldrb	r0, [r3, r1]
 8009bdc:	fb10 f002 	smulbb	r0, r0, r2
 8009be0:	0a00      	lsrs	r0, r0, #8
 8009be2:	4770      	bx	lr
    else {
        return ((px_id * 2 + 1) * base_opa) / (2 * seg);
 8009be4:	0049      	lsls	r1, r1, #1
 8009be6:	fb01 2202 	mla	r2, r1, r2, r2
 8009bea:	0040      	lsls	r0, r0, #1
 8009bec:	fb92 f0f0 	sdiv	r0, r2, r0
 8009bf0:	b2c0      	uxtb	r0, r0
    }
}
 8009bf2:	4770      	bx	lr
 8009bf4:	0801234c 	.word	0x0801234c

08009bf8 <lv_color_mix>:
static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 8009bf8:	f1c2 03ff 	rsb	r3, r2, #255	; 0xff
{
 8009bfc:	b570      	push	{r4, r5, r6, lr}
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 8009bfe:	b294      	uxth	r4, r2
 8009c00:	b29a      	uxth	r2, r3
 8009c02:	f3c1 23c4 	ubfx	r3, r1, #11, #5
 8009c06:	fb13 f302 	smulbb	r3, r3, r2
 8009c0a:	f3c0 25c4 	ubfx	r5, r0, #11, #5
    uint16_t g_2   = (c2.ch.green_h << 3) + c2.ch.green_l;
    uint16_t g_out = (uint16_t)((uint16_t)g_1 * mix + (g_2 * (255 - mix))) >> 8;
    ret.ch.green_h = g_out >> 3;
    ret.ch.green_l = g_out & 0x7;
#else
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 8009c0e:	f3c1 1645 	ubfx	r6, r1, #5, #6
#endif
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 8009c12:	f001 011f 	and.w	r1, r1, #31
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 8009c16:	fb05 3504 	mla	r5, r5, r4, r3
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 8009c1a:	fb16 f602 	smulbb	r6, r6, r2
 8009c1e:	f3c0 1345 	ubfx	r3, r0, #5, #6
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 8009c22:	fb11 f202 	smulbb	r2, r1, r2
 8009c26:	f000 001f 	and.w	r0, r0, #31
 8009c2a:	fb00 2204 	mla	r2, r0, r4, r2
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 8009c2e:	fb03 6304 	mla	r3, r3, r4, r6
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 8009c32:	f3c2 2207 	ubfx	r2, r2, #8, #8
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 8009c36:	f04f 0000 	mov.w	r0, #0
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 8009c3a:	f3c3 2305 	ubfx	r3, r3, #8, #6
    return ret;
 8009c3e:	f362 0004 	bfi	r0, r2, #0, #5
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 8009c42:	f3c5 2504 	ubfx	r5, r5, #8, #5
    return ret;
 8009c46:	f363 104a 	bfi	r0, r3, #5, #6
 8009c4a:	f365 20cf 	bfi	r0, r5, #11, #5
}
 8009c4e:	bd70      	pop	{r4, r5, r6, pc}

08009c50 <sw_color_fill>:
 * @param color fill color
 * @param opa opacity (0, LV_OPA_TRANSP: transparent ... 255, LV_OPA_COVER, fully cover)
 */
static void sw_color_fill(lv_color_t * mem, lv_coord_t mem_width, const lv_area_t * fill_area, lv_color_t color,
                          lv_opa_t opa)
{
 8009c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c54:	b087      	sub	sp, #28
 8009c56:	4699      	mov	r9, r3
 8009c58:	9005      	str	r0, [sp, #20]
 8009c5a:	9104      	str	r1, [sp, #16]
 8009c5c:	4614      	mov	r4, r2
 8009c5e:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
    /*Set all row in vdb to the given color*/
    lv_coord_t row;
    lv_coord_t col;

    lv_disp_t * disp = lv_refr_get_disp_refreshing();
 8009c62:	f7ff fa0b 	bl	800907c <lv_refr_get_disp_refreshing>
    if(disp->driver.set_px_cb) {
 8009c66:	6943      	ldr	r3, [r0, #20]
    lv_disp_t * disp = lv_refr_get_disp_refreshing();
 8009c68:	4683      	mov	fp, r0
    if(disp->driver.set_px_cb) {
 8009c6a:	b313      	cbz	r3, 8009cb2 <sw_color_fill+0x62>
        for(col = fill_area->x1; col <= fill_area->x2; col++) {
 8009c6c:	f9b4 6000 	ldrsh.w	r6, [r4]
 8009c70:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8009c74:	42b3      	cmp	r3, r6
 8009c76:	da02      	bge.n	8009c7e <sw_color_fill+0x2e>
                }
                mem += mem_width;
            }
        }
    }
}
 8009c78:	b007      	add	sp, #28
 8009c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 8009c7e:	f9b4 7002 	ldrsh.w	r7, [r4, #2]
 8009c82:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8009c86:	42bb      	cmp	r3, r7
 8009c88:	da02      	bge.n	8009c90 <sw_color_fill+0x40>
 8009c8a:	3601      	adds	r6, #1
 8009c8c:	b236      	sxth	r6, r6
 8009c8e:	e7ef      	b.n	8009c70 <sw_color_fill+0x20>
                disp->driver.set_px_cb(&disp->driver, (uint8_t *)mem, mem_width, col, row, color, opa);
 8009c90:	9700      	str	r7, [sp, #0]
 8009c92:	f8cd a008 	str.w	sl, [sp, #8]
 8009c96:	f8ad 9004 	strh.w	r9, [sp, #4]
 8009c9a:	4633      	mov	r3, r6
 8009c9c:	9a04      	ldr	r2, [sp, #16]
 8009c9e:	9905      	ldr	r1, [sp, #20]
 8009ca0:	f8db 5014 	ldr.w	r5, [fp, #20]
 8009ca4:	4658      	mov	r0, fp
 8009ca6:	f107 0801 	add.w	r8, r7, #1
 8009caa:	47a8      	blx	r5
 8009cac:	fa0f f788 	sxth.w	r7, r8
 8009cb0:	e7e7      	b.n	8009c82 <sw_color_fill+0x32>
        mem += fill_area->y1 * mem_width; /*Go to the first row*/
 8009cb2:	9a04      	ldr	r2, [sp, #16]
 8009cb4:	f9b4 7002 	ldrsh.w	r7, [r4, #2]
 8009cb8:	fb07 f602 	mul.w	r6, r7, r2
 8009cbc:	9a05      	ldr	r2, [sp, #20]
        if(opa == LV_OPA_COVER) {
 8009cbe:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
        mem += fill_area->y1 * mem_width; /*Go to the first row*/
 8009cc2:	eb02 0646 	add.w	r6, r2, r6, lsl #1
        if(opa == LV_OPA_COVER) {
 8009cc6:	d127      	bne.n	8009d18 <sw_color_fill+0xc8>
            for(col = fill_area->x1; col <= fill_area->x2; col++) {
 8009cc8:	f9b4 1000 	ldrsh.w	r1, [r4]
 8009ccc:	460a      	mov	r2, r1
 8009cce:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8009cd2:	429a      	cmp	r2, r3
 8009cd4:	dd1b      	ble.n	8009d0e <sw_color_fill+0xbe>
            lv_coord_t copy_size   = (fill_area->x2 - fill_area->x1 + 1) * sizeof(lv_color_t);
 8009cd6:	eba3 0901 	sub.w	r9, r3, r1
 8009cda:	f109 0901 	add.w	r9, r9, #1
            mem += mem_width;
 8009cde:	9b04      	ldr	r3, [sp, #16]
            lv_coord_t copy_size   = (fill_area->x2 - fill_area->x1 + 1) * sizeof(lv_color_t);
 8009ce0:	ea4f 0949 	mov.w	r9, r9, lsl #1
            lv_color_t * mem_first = &mem[fill_area->x1];
 8009ce4:	eb06 0841 	add.w	r8, r6, r1, lsl #1
            lv_coord_t copy_size   = (fill_area->x2 - fill_area->x1 + 1) * sizeof(lv_color_t);
 8009ce8:	fa0f f989 	sxth.w	r9, r9
            mem += mem_width;
 8009cec:	005d      	lsls	r5, r3, #1
 8009cee:	3701      	adds	r7, #1
            for(row = fill_area->y1 + 1; row <= fill_area->y2; row++) {
 8009cf0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8009cf4:	b23f      	sxth	r7, r7
 8009cf6:	42bb      	cmp	r3, r7
                mem += mem_width;
 8009cf8:	442e      	add	r6, r5
            for(row = fill_area->y1 + 1; row <= fill_area->y2; row++) {
 8009cfa:	dbbd      	blt.n	8009c78 <sw_color_fill+0x28>
                memcpy(&mem[fill_area->x1], mem_first, copy_size);
 8009cfc:	f9b4 0000 	ldrsh.w	r0, [r4]
 8009d00:	464a      	mov	r2, r9
 8009d02:	4641      	mov	r1, r8
 8009d04:	eb06 0040 	add.w	r0, r6, r0, lsl #1
 8009d08:	f005 fb12 	bl	800f330 <memcpy>
 8009d0c:	e7ef      	b.n	8009cee <sw_color_fill+0x9e>
                mem[col] = color;
 8009d0e:	f826 9012 	strh.w	r9, [r6, r2, lsl #1]
 8009d12:	3201      	adds	r2, #1
 8009d14:	b212      	sxth	r2, r2
 8009d16:	e7da      	b.n	8009cce <sw_color_fill+0x7e>
            lv_color_t bg_tmp  = LV_COLOR_BLACK;
 8009d18:	f04f 0800 	mov.w	r8, #0
 8009d1c:	f363 0804 	bfi	r8, r3, #0, #5
 8009d20:	f363 184a 	bfi	r8, r3, #5, #6
 8009d24:	f363 28cf 	bfi	r8, r3, #11, #5
            lv_color_t opa_tmp = lv_color_mix(color, bg_tmp, opa);
 8009d28:	4652      	mov	r2, sl
 8009d2a:	4641      	mov	r1, r8
 8009d2c:	4648      	mov	r0, r9
 8009d2e:	f7ff ff63 	bl	8009bf8 <lv_color_mix>
                mem += mem_width;
 8009d32:	9b04      	ldr	r3, [sp, #16]
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 8009d34:	f9b4 b002 	ldrsh.w	fp, [r4, #2]
                mem += mem_width;
 8009d38:	005d      	lsls	r5, r3, #1
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 8009d3a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8009d3e:	455b      	cmp	r3, fp
 8009d40:	db9a      	blt.n	8009c78 <sw_color_fill+0x28>
                for(col = fill_area->x1; col <= fill_area->x2; col++) {
 8009d42:	f9b4 7000 	ldrsh.w	r7, [r4]
 8009d46:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8009d4a:	42bb      	cmp	r3, r7
 8009d4c:	da05      	bge.n	8009d5a <sw_color_fill+0x10a>
 8009d4e:	f10b 0b01 	add.w	fp, fp, #1
                mem += mem_width;
 8009d52:	442e      	add	r6, r5
 8009d54:	fa0f fb8b 	sxth.w	fp, fp
 8009d58:	e7ef      	b.n	8009d3a <sw_color_fill+0xea>
                        if(mem[col].full != bg_tmp.full) {
 8009d5a:	f836 1017 	ldrh.w	r1, [r6, r7, lsl #1]
 8009d5e:	fa1f f288 	uxth.w	r2, r8
 8009d62:	4291      	cmp	r1, r2
 8009d64:	eb06 0347 	add.w	r3, r6, r7, lsl #1
 8009d68:	d006      	beq.n	8009d78 <sw_color_fill+0x128>
                            opa_tmp = lv_color_mix(color, bg_tmp, opa);
 8009d6a:	4652      	mov	r2, sl
 8009d6c:	4648      	mov	r0, r9
 8009d6e:	9304      	str	r3, [sp, #16]
                            bg_tmp  = mem[col];
 8009d70:	4688      	mov	r8, r1
                            opa_tmp = lv_color_mix(color, bg_tmp, opa);
 8009d72:	f7ff ff41 	bl	8009bf8 <lv_color_mix>
 8009d76:	9b04      	ldr	r3, [sp, #16]
                        mem[col] = opa_tmp;
 8009d78:	8018      	strh	r0, [r3, #0]
 8009d7a:	3701      	adds	r7, #1
 8009d7c:	b23f      	sxth	r7, r7
 8009d7e:	e7e2      	b.n	8009d46 <sw_color_fill+0xf6>

08009d80 <lv_draw_px>:
{
 8009d80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009d84:	b085      	sub	sp, #20
 8009d86:	4606      	mov	r6, r0
 8009d88:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
    if(opa < LV_OPA_MIN) return;
 8009d8c:	f1b9 0f0f 	cmp.w	r9, #15
{
 8009d90:	460d      	mov	r5, r1
 8009d92:	461f      	mov	r7, r3
    if(opa < LV_OPA_MIN) return;
 8009d94:	d92e      	bls.n	8009df4 <lv_draw_px+0x74>
    if(x < mask_p->x1 || x > mask_p->x2 || y < mask_p->y1 || y > mask_p->y2) {
 8009d96:	f9b2 3000 	ldrsh.w	r3, [r2]
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 8009d9a:	f1b9 0ffc 	cmp.w	r9, #252	; 0xfc
 8009d9e:	bf28      	it	cs
 8009da0:	f04f 09ff 	movcs.w	r9, #255	; 0xff
    if(x < mask_p->x1 || x > mask_p->x2 || y < mask_p->y1 || y > mask_p->y2) {
 8009da4:	4283      	cmp	r3, r0
 8009da6:	dc25      	bgt.n	8009df4 <lv_draw_px+0x74>
 8009da8:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8009dac:	4283      	cmp	r3, r0
 8009dae:	db21      	blt.n	8009df4 <lv_draw_px+0x74>
 8009db0:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8009db4:	428b      	cmp	r3, r1
 8009db6:	dc1d      	bgt.n	8009df4 <lv_draw_px+0x74>
 8009db8:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8009dbc:	428b      	cmp	r3, r1
 8009dbe:	db19      	blt.n	8009df4 <lv_draw_px+0x74>
    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
 8009dc0:	f7ff f95c 	bl	800907c <lv_refr_get_disp_refreshing>
 8009dc4:	4680      	mov	r8, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8009dc6:	f003 f95d 	bl	800d084 <lv_disp_get_buf>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return area_p->x2 - area_p->x1 + 1;
 8009dca:	8a82      	ldrh	r2, [r0, #20]
 8009dcc:	8a04      	ldrh	r4, [r0, #16]
 8009dce:	3201      	adds	r2, #1
 8009dd0:	1b12      	subs	r2, r2, r4
    x -= vdb->area.x1;
 8009dd2:	1b36      	subs	r6, r6, r4
    y -= vdb->area.y1;
 8009dd4:	8a44      	ldrh	r4, [r0, #18]
 8009dd6:	1b2c      	subs	r4, r5, r4
    if(disp->driver.set_px_cb) {
 8009dd8:	f8d8 5014 	ldr.w	r5, [r8, #20]
 8009ddc:	b212      	sxth	r2, r2
    x -= vdb->area.x1;
 8009dde:	b233      	sxth	r3, r6
    y -= vdb->area.y1;
 8009de0:	b224      	sxth	r4, r4
    if(disp->driver.set_px_cb) {
 8009de2:	b155      	cbz	r5, 8009dfa <lv_draw_px+0x7a>
        disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, x, y, color, opa);
 8009de4:	f8cd 9008 	str.w	r9, [sp, #8]
 8009de8:	f8ad 7004 	strh.w	r7, [sp, #4]
 8009dec:	9400      	str	r4, [sp, #0]
 8009dee:	6881      	ldr	r1, [r0, #8]
 8009df0:	4640      	mov	r0, r8
 8009df2:	47a8      	blx	r5
}
 8009df4:	b005      	add	sp, #20
 8009df6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            if(opa == LV_OPA_COVER) {
 8009dfa:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
        lv_color_t * vdb_px_p = vdb->buf_act;
 8009dfe:	6885      	ldr	r5, [r0, #8]
        vdb_px_p += y * vdb_width + x;
 8009e00:	fb02 3404 	mla	r4, r2, r4, r3
            if(opa == LV_OPA_COVER) {
 8009e04:	d102      	bne.n	8009e0c <lv_draw_px+0x8c>
                *vdb_px_p = color;
 8009e06:	f825 7014 	strh.w	r7, [r5, r4, lsl #1]
 8009e0a:	e7f3      	b.n	8009df4 <lv_draw_px+0x74>
                *vdb_px_p = lv_color_mix(color, *vdb_px_p, opa);
 8009e0c:	464a      	mov	r2, r9
 8009e0e:	f835 1014 	ldrh.w	r1, [r5, r4, lsl #1]
 8009e12:	4638      	mov	r0, r7
 8009e14:	f7ff fef0 	bl	8009bf8 <lv_color_mix>
 8009e18:	f825 0014 	strh.w	r0, [r5, r4, lsl #1]
 8009e1c:	e7ea      	b.n	8009df4 <lv_draw_px+0x74>
	...

08009e20 <lv_draw_fill>:
{
 8009e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(opa < LV_OPA_MIN) return;
 8009e24:	2b0f      	cmp	r3, #15
{
 8009e26:	b087      	sub	sp, #28
 8009e28:	4692      	mov	sl, r2
 8009e2a:	4699      	mov	r9, r3
    if(opa < LV_OPA_MIN) return;
 8009e2c:	d950      	bls.n	8009ed0 <lv_draw_fill+0xb0>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 8009e2e:	2bfc      	cmp	r3, #252	; 0xfc
 8009e30:	fa1f fb82 	uxth.w	fp, r2
    union_ok = lv_area_intersect(&res_a, cords_p, mask_p);
 8009e34:	460a      	mov	r2, r1
 8009e36:	4601      	mov	r1, r0
 8009e38:	a802      	add	r0, sp, #8
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 8009e3a:	bf28      	it	cs
 8009e3c:	f04f 09ff 	movcs.w	r9, #255	; 0xff
    union_ok = lv_area_intersect(&res_a, cords_p, mask_p);
 8009e40:	f003 faa7 	bl	800d392 <lv_area_intersect>
    if(union_ok == false) {
 8009e44:	2800      	cmp	r0, #0
 8009e46:	d043      	beq.n	8009ed0 <lv_draw_fill+0xb0>
    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
 8009e48:	f7ff f918 	bl	800907c <lv_refr_get_disp_refreshing>
 8009e4c:	4680      	mov	r8, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8009e4e:	f003 f919 	bl	800d084 <lv_disp_get_buf>
    vdb_rel_a.y1 = res_a.y1 - vdb->area.y1;
 8009e52:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8009e56:	8a41      	ldrh	r1, [r0, #18]
    vdb_rel_a.x1 = res_a.x1 - vdb->area.x1;
 8009e58:	f8b0 c010 	ldrh.w	ip, [r0, #16]
    vdb_rel_a.x2 = res_a.x2 - vdb->area.x1;
 8009e5c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    vdb_rel_a.x1 = res_a.x1 - vdb->area.x1;
 8009e60:	f8bd 4008 	ldrh.w	r4, [sp, #8]
    vdb_rel_a.y1 = res_a.y1 - vdb->area.y1;
 8009e64:	1a5b      	subs	r3, r3, r1
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8009e66:	4607      	mov	r7, r0
    vdb_rel_a.y1 = res_a.y1 - vdb->area.y1;
 8009e68:	fa1f fe83 	uxth.w	lr, r3
    vdb_rel_a.x2 = res_a.x2 - vdb->area.x1;
 8009e6c:	eba2 020c 	sub.w	r2, r2, ip
    vdb_rel_a.y2 = res_a.y2 - vdb->area.y1;
 8009e70:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    lv_color_t * vdb_buf_tmp = vdb->buf_act;
 8009e74:	6880      	ldr	r0, [r0, #8]
    vdb_rel_a.x1 = res_a.x1 - vdb->area.x1;
 8009e76:	eba4 040c 	sub.w	r4, r4, ip
    vdb_rel_a.x2 = res_a.x2 - vdb->area.x1;
 8009e7a:	b292      	uxth	r2, r2
    vdb_rel_a.x1 = res_a.x1 - vdb->area.x1;
 8009e7c:	b2a6      	uxth	r6, r4
    vdb_rel_a.y2 = res_a.y2 - vdb->area.y1;
 8009e7e:	1a5b      	subs	r3, r3, r1
 8009e80:	1c54      	adds	r4, r2, #1
 8009e82:	8ab9      	ldrh	r1, [r7, #20]
    vdb_rel_a.x1 = res_a.x1 - vdb->area.x1;
 8009e84:	f8ad 6010 	strh.w	r6, [sp, #16]
 8009e88:	1ba4      	subs	r4, r4, r6
 8009e8a:	3101      	adds	r1, #1
 8009e8c:	b224      	sxth	r4, r4
    vdb_rel_a.y1 = res_a.y1 - vdb->area.y1;
 8009e8e:	fa0f f58e 	sxth.w	r5, lr
    vdb_rel_a.y2 = res_a.y2 - vdb->area.y1;
 8009e92:	b29b      	uxth	r3, r3
 8009e94:	eba1 010c 	sub.w	r1, r1, ip
    if(w < VFILL_HW_ACC_SIZE_LIMIT) {
 8009e98:	2c31      	cmp	r4, #49	; 0x31
    vdb_rel_a.y1 = res_a.y1 - vdb->area.y1;
 8009e9a:	f8ad 5012 	strh.w	r5, [sp, #18]
    vdb_rel_a.x2 = res_a.x2 - vdb->area.x1;
 8009e9e:	f8ad 2014 	strh.w	r2, [sp, #20]
    vdb_rel_a.y2 = res_a.y2 - vdb->area.y1;
 8009ea2:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009ea6:	b209      	sxth	r1, r1
    if(w < VFILL_HW_ACC_SIZE_LIMIT) {
 8009ea8:	dc02      	bgt.n	8009eb0 <lv_draw_fill+0x90>
            sw_color_fill(vdb->buf_act, vdb_width, &vdb_rel_a, color, opa);
 8009eaa:	f8cd 9000 	str.w	r9, [sp]
 8009eae:	e04a      	b.n	8009f46 <lv_draw_fill+0x126>
    vdb_buf_tmp += vdb_width * vdb_rel_a.y1;
 8009eb0:	006f      	lsls	r7, r5, #1
    else if(opa == LV_OPA_COVER) {
 8009eb2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    vdb_buf_tmp += vdb_width * vdb_rel_a.y1;
 8009eb6:	fb01 0707 	mla	r7, r1, r7, r0
    else if(opa == LV_OPA_COVER) {
 8009eba:	d149      	bne.n	8009f50 <lv_draw_fill+0x130>
        if(disp->driver.gpu_fill_cb) {
 8009ebc:	f8d8 6020 	ldr.w	r6, [r8, #32]
 8009ec0:	b14e      	cbz	r6, 8009ed6 <lv_draw_fill+0xb6>
            disp->driver.gpu_fill_cb(&disp->driver, vdb->buf_act, vdb_width, &vdb_rel_a, color);
 8009ec2:	460a      	mov	r2, r1
 8009ec4:	f8ad a000 	strh.w	sl, [sp]
 8009ec8:	4601      	mov	r1, r0
 8009eca:	ab04      	add	r3, sp, #16
 8009ecc:	4640      	mov	r0, r8
 8009ece:	47b0      	blx	r6
}
 8009ed0:	b007      	add	sp, #28
 8009ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 8009ed6:	3301      	adds	r3, #1
 8009ed8:	eba3 030e 	sub.w	r3, r3, lr
        else if(lv_area_get_height(&vdb_rel_a) > VFILL_HW_ACC_SIZE_LIMIT && disp->driver.gpu_blend_cb) {
 8009edc:	b21b      	sxth	r3, r3
 8009ede:	2b32      	cmp	r3, #50	; 0x32
 8009ee0:	dd2f      	ble.n	8009f42 <lv_draw_fill+0x122>
 8009ee2:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8009ee6:	b363      	cbz	r3, 8009f42 <lv_draw_fill+0x122>
            if(color_array_tmp[0].full != color.full || last_width != w) {
 8009ee8:	4b32      	ldr	r3, [pc, #200]	; (8009fb4 <lv_draw_fill+0x194>)
 8009eea:	881a      	ldrh	r2, [r3, #0]
 8009eec:	455a      	cmp	r2, fp
 8009eee:	d104      	bne.n	8009efa <lv_draw_fill+0xda>
 8009ef0:	4a31      	ldr	r2, [pc, #196]	; (8009fb8 <lv_draw_fill+0x198>)
 8009ef2:	f9b2 2000 	ldrsh.w	r2, [r2]
 8009ef6:	42a2      	cmp	r2, r4
 8009ef8:	d006      	beq.n	8009f08 <lv_draw_fill+0xe8>
                for(i = 0; i < w; i++) {
 8009efa:	b2b2      	uxth	r2, r6
 8009efc:	42a2      	cmp	r2, r4
 8009efe:	f106 0601 	add.w	r6, r6, #1
 8009f02:	db1b      	blt.n	8009f3c <lv_draw_fill+0x11c>
                last_width = w;
 8009f04:	4b2c      	ldr	r3, [pc, #176]	; (8009fb8 <lv_draw_fill+0x198>)
 8009f06:	801c      	strh	r4, [r3, #0]
                disp->driver.gpu_blend_cb(&disp->driver, &vdb_buf_tmp[vdb_rel_a.x1], color_array_tmp, w, opa);
 8009f08:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 8009fb4 <lv_draw_fill+0x194>
                vdb_buf_tmp += vdb_width;
 8009f0c:	ea4f 0941 	mov.w	r9, r1, lsl #1
                disp->driver.gpu_blend_cb(&disp->driver, &vdb_buf_tmp[vdb_rel_a.x1], color_array_tmp, w, opa);
 8009f10:	f04f 0aff 	mov.w	sl, #255	; 0xff
            for(row = vdb_rel_a.y1; row <= vdb_rel_a.y2; row++) {
 8009f14:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8009f18:	42ab      	cmp	r3, r5
 8009f1a:	dbd9      	blt.n	8009ed0 <lv_draw_fill+0xb0>
                disp->driver.gpu_blend_cb(&disp->driver, &vdb_buf_tmp[vdb_rel_a.x1], color_array_tmp, w, opa);
 8009f1c:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 8009f20:	f8cd a000 	str.w	sl, [sp]
 8009f24:	eb07 0141 	add.w	r1, r7, r1, lsl #1
 8009f28:	4623      	mov	r3, r4
 8009f2a:	465a      	mov	r2, fp
 8009f2c:	4640      	mov	r0, r8
 8009f2e:	f8d8 601c 	ldr.w	r6, [r8, #28]
 8009f32:	3501      	adds	r5, #1
 8009f34:	47b0      	blx	r6
                vdb_buf_tmp += vdb_width;
 8009f36:	444f      	add	r7, r9
 8009f38:	b22d      	sxth	r5, r5
 8009f3a:	e7eb      	b.n	8009f14 <lv_draw_fill+0xf4>
                    color_array_tmp[i].full = color.full;
 8009f3c:	f823 b012 	strh.w	fp, [r3, r2, lsl #1]
 8009f40:	e7db      	b.n	8009efa <lv_draw_fill+0xda>
            sw_color_fill(vdb->buf_act, vdb_width, &vdb_rel_a, color, opa);
 8009f42:	23ff      	movs	r3, #255	; 0xff
 8009f44:	9300      	str	r3, [sp, #0]
            sw_color_fill(vdb->buf_act, vdb_width, &vdb_rel_a, color, opa);
 8009f46:	4653      	mov	r3, sl
 8009f48:	aa04      	add	r2, sp, #16
 8009f4a:	f7ff fe81 	bl	8009c50 <sw_color_fill>
 8009f4e:	e7bf      	b.n	8009ed0 <lv_draw_fill+0xb0>
        if(disp->driver.gpu_blend_cb) {
 8009f50:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d0a8      	beq.n	8009eaa <lv_draw_fill+0x8a>
            if(color_array_tmp[0].full != color.full || last_width != w) {
 8009f58:	4b16      	ldr	r3, [pc, #88]	; (8009fb4 <lv_draw_fill+0x194>)
 8009f5a:	881a      	ldrh	r2, [r3, #0]
 8009f5c:	455a      	cmp	r2, fp
 8009f5e:	461a      	mov	r2, r3
 8009f60:	d104      	bne.n	8009f6c <lv_draw_fill+0x14c>
 8009f62:	4b15      	ldr	r3, [pc, #84]	; (8009fb8 <lv_draw_fill+0x198>)
 8009f64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009f68:	42a3      	cmp	r3, r4
 8009f6a:	d007      	beq.n	8009f7c <lv_draw_fill+0x15c>
 8009f6c:	2300      	movs	r3, #0
                for(i = 0; i < w; i++) {
 8009f6e:	b298      	uxth	r0, r3
 8009f70:	42a0      	cmp	r0, r4
 8009f72:	f103 0301 	add.w	r3, r3, #1
 8009f76:	db19      	blt.n	8009fac <lv_draw_fill+0x18c>
                last_width = w;
 8009f78:	4b0f      	ldr	r3, [pc, #60]	; (8009fb8 <lv_draw_fill+0x198>)
 8009f7a:	801c      	strh	r4, [r3, #0]
                disp->driver.gpu_blend_cb(&disp->driver, &vdb_buf_tmp[vdb_rel_a.x1], color_array_tmp, w, opa);
 8009f7c:	f8df b034 	ldr.w	fp, [pc, #52]	; 8009fb4 <lv_draw_fill+0x194>
                vdb_buf_tmp += vdb_width;
 8009f80:	ea4f 0a41 	mov.w	sl, r1, lsl #1
            for(row = vdb_rel_a.y1; row <= vdb_rel_a.y2; row++) {
 8009f84:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8009f88:	42ab      	cmp	r3, r5
 8009f8a:	dba1      	blt.n	8009ed0 <lv_draw_fill+0xb0>
                disp->driver.gpu_blend_cb(&disp->driver, &vdb_buf_tmp[vdb_rel_a.x1], color_array_tmp, w, opa);
 8009f8c:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 8009f90:	f8cd 9000 	str.w	r9, [sp]
 8009f94:	eb07 0141 	add.w	r1, r7, r1, lsl #1
 8009f98:	4623      	mov	r3, r4
 8009f9a:	465a      	mov	r2, fp
 8009f9c:	4640      	mov	r0, r8
 8009f9e:	f8d8 601c 	ldr.w	r6, [r8, #28]
 8009fa2:	3501      	adds	r5, #1
 8009fa4:	47b0      	blx	r6
                vdb_buf_tmp += vdb_width;
 8009fa6:	4457      	add	r7, sl
 8009fa8:	b22d      	sxth	r5, r5
 8009faa:	e7eb      	b.n	8009f84 <lv_draw_fill+0x164>
                    color_array_tmp[i].full = color.full;
 8009fac:	f822 b010 	strh.w	fp, [r2, r0, lsl #1]
 8009fb0:	e7dd      	b.n	8009f6e <lv_draw_fill+0x14e>
 8009fb2:	bf00      	nop
 8009fb4:	20004200 	.word	0x20004200
 8009fb8:	20000148 	.word	0x20000148

08009fbc <lv_draw_letter>:
{
 8009fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fc0:	b09b      	sub	sp, #108	; 0x6c
 8009fc2:	4615      	mov	r5, r2
 8009fc4:	4699      	mov	r9, r3
    const uint8_t bpp1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 8009fc6:	2200      	movs	r2, #0
{
 8009fc8:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 8009fcc:	9305      	str	r3, [sp, #20]
    const uint8_t bpp1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 8009fce:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
 8009fd2:	23ff      	movs	r3, #255	; 0xff
    const uint8_t bpp2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 8009fd4:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
 8009fd8:	2255      	movs	r2, #85	; 0x55
    const uint8_t bpp1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 8009fda:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
    const uint8_t bpp2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 8009fde:	f88d 204d 	strb.w	r2, [sp, #77]	; 0x4d
 8009fe2:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
 8009fe6:	22aa      	movs	r2, #170	; 0xaa
    const uint8_t bpp4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 8009fe8:	4bb5      	ldr	r3, [pc, #724]	; (800a2c0 <lv_draw_letter+0x304>)
    const uint8_t bpp2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 8009fea:	f88d 204e 	strb.w	r2, [sp, #78]	; 0x4e
    const uint8_t bpp4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 8009fee:	aa16      	add	r2, sp, #88	; 0x58
{
 8009ff0:	4604      	mov	r4, r0
 8009ff2:	460f      	mov	r7, r1
    const uint8_t bpp4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 8009ff4:	f103 0c10 	add.w	ip, r3, #16
 8009ff8:	4616      	mov	r6, r2
 8009ffa:	6818      	ldr	r0, [r3, #0]
 8009ffc:	6859      	ldr	r1, [r3, #4]
 8009ffe:	4696      	mov	lr, r2
 800a000:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800a004:	3308      	adds	r3, #8
 800a006:	4563      	cmp	r3, ip
 800a008:	4672      	mov	r2, lr
 800a00a:	d1f6      	bne.n	8009ffa <lv_draw_letter+0x3e>
    if(opa < LV_OPA_MIN) return;
 800a00c:	9b05      	ldr	r3, [sp, #20]
 800a00e:	2b0f      	cmp	r3, #15
 800a010:	f240 80d4 	bls.w	800a1bc <lv_draw_letter+0x200>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800a014:	2bfc      	cmp	r3, #252	; 0xfc
 800a016:	bf28      	it	cs
 800a018:	23ff      	movcs	r3, #255	; 0xff
 800a01a:	9305      	str	r3, [sp, #20]
    if(font_p == NULL) {
 800a01c:	2d00      	cmp	r5, #0
 800a01e:	f000 80cd 	beq.w	800a1bc <lv_draw_letter+0x200>
    bool g_ret = lv_font_get_glyph_dsc(font_p, &g, letter, '\0');
 800a022:	2300      	movs	r3, #0
 800a024:	464a      	mov	r2, r9
 800a026:	a914      	add	r1, sp, #80	; 0x50
 800a028:	4628      	mov	r0, r5
 800a02a:	f002 fe45 	bl	800ccb8 <lv_font_get_glyph_dsc>
    if(g_ret == false) return;
 800a02e:	2800      	cmp	r0, #0
 800a030:	f000 80c4 	beq.w	800a1bc <lv_draw_letter+0x200>
    switch(g.bpp) {
 800a034:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
 800a038:	3b01      	subs	r3, #1
 800a03a:	2b07      	cmp	r3, #7
 800a03c:	f200 80be 	bhi.w	800a1bc <lv_draw_letter+0x200>
 800a040:	e8df f003 	tbb	[pc, r3]
 800a044:	09bcc304 	.word	0x09bcc304
 800a048:	bfbcbcbc 	.word	0xbfbcbcbc
            bitmask_init  = 0x80;
 800a04c:	2380      	movs	r3, #128	; 0x80
 800a04e:	9308      	str	r3, [sp, #32]
            bpp_opa_table = bpp1_opa_table;
 800a050:	ab12      	add	r3, sp, #72	; 0x48
            bpp_opa_table = bpp2_opa_table;
 800a052:	9307      	str	r3, [sp, #28]
 800a054:	e002      	b.n	800a05c <lv_draw_letter+0xa0>
            bitmask_init  = 0xF0;
 800a056:	23f0      	movs	r3, #240	; 0xf0
 800a058:	9308      	str	r3, [sp, #32]
            bpp_opa_table = bpp4_opa_table;
 800a05a:	9607      	str	r6, [sp, #28]
    lv_coord_t pos_x = pos_p->x + g.ofs_x;
 800a05c:	f99d 2054 	ldrsb.w	r2, [sp, #84]	; 0x54
    lv_coord_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
 800a060:	f99d 3055 	ldrsb.w	r3, [sp, #85]	; 0x55
    lv_coord_t pos_x = pos_p->x + g.ofs_x;
 800a064:	f9b4 8000 	ldrsh.w	r8, [r4]
 800a068:	9209      	str	r2, [sp, #36]	; 0x24
    const uint8_t * map_p = lv_font_get_glyph_bitmap(font_p, letter);
 800a06a:	4649      	mov	r1, r9
 800a06c:	4628      	mov	r0, r5
    lv_coord_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
 800a06e:	f9b4 4002 	ldrsh.w	r4, [r4, #2]
 800a072:	f895 b008 	ldrb.w	fp, [r5, #8]
 800a076:	f895 a009 	ldrb.w	sl, [r5, #9]
 800a07a:	f89d 6053 	ldrb.w	r6, [sp, #83]	; 0x53
 800a07e:	9306      	str	r3, [sp, #24]
    const uint8_t * map_p = lv_font_get_glyph_bitmap(font_p, letter);
 800a080:	f002 fe18 	bl	800ccb4 <lv_font_get_glyph_bitmap>
    if(map_p == NULL) return;
 800a084:	4681      	mov	r9, r0
 800a086:	2800      	cmp	r0, #0
 800a088:	f000 8098 	beq.w	800a1bc <lv_draw_letter+0x200>
    lv_coord_t pos_x = pos_p->x + g.ofs_x;
 800a08c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
 800a08e:	f9b7 1000 	ldrsh.w	r1, [r7]
    lv_coord_t pos_x = pos_p->x + g.ofs_x;
 800a092:	4490      	add	r8, r2
 800a094:	fa1f f388 	uxth.w	r3, r8
 800a098:	930a      	str	r3, [sp, #40]	; 0x28
 800a09a:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
 800a09e:	f89d 2052 	ldrb.w	r2, [sp, #82]	; 0x52
 800a0a2:	4442      	add	r2, r8
 800a0a4:	428a      	cmp	r2, r1
 800a0a6:	f2c0 8089 	blt.w	800a1bc <lv_draw_letter+0x200>
 800a0aa:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800a0ae:	4542      	cmp	r2, r8
 800a0b0:	f2c0 8084 	blt.w	800a1bc <lv_draw_letter+0x200>
    lv_coord_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
 800a0b4:	9b06      	ldr	r3, [sp, #24]
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
 800a0b6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
    lv_coord_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
 800a0ba:	441e      	add	r6, r3
 800a0bc:	1ba4      	subs	r4, r4, r6
 800a0be:	44a3      	add	fp, r4
 800a0c0:	ebab 0a0a 	sub.w	sl, fp, sl
 800a0c4:	fa1f f38a 	uxth.w	r3, sl
 800a0c8:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0ca:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
 800a0ce:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
 800a0d2:	445b      	add	r3, fp
 800a0d4:	4293      	cmp	r3, r2
 800a0d6:	db71      	blt.n	800a1bc <lv_draw_letter+0x200>
 800a0d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a0dc:	455b      	cmp	r3, fp
 800a0de:	db6d      	blt.n	800a1bc <lv_draw_letter+0x200>
    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
 800a0e0:	f7fe ffcc 	bl	800907c <lv_refr_get_disp_refreshing>
 800a0e4:	900f      	str	r0, [sp, #60]	; 0x3c
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800a0e6:	f002 ffcd 	bl	800d084 <lv_disp_get_buf>
    return area_p->x2 - area_p->x1 + 1;
 800a0ea:	8a83      	ldrh	r3, [r0, #20]
 800a0ec:	f9b0 2010 	ldrsh.w	r2, [r0, #16]
    uint8_t width_byte_scr = g.box_w >> 3; /*Width in bytes (on the screen finally) (e.g. w = 11 -> 2 bytes wide)*/
 800a0f0:	f89d 6052 	ldrb.w	r6, [sp, #82]	; 0x52
    lv_color_t * vdb_buf_tmp = vdb->buf_act;
 800a0f4:	f8d0 c008 	ldr.w	ip, [r0, #8]
    uint16_t width_bit = g.box_w * g.bpp; /*Letter width in bits*/
 800a0f8:	f89d 4056 	ldrb.w	r4, [sp, #86]	; 0x56
    lv_coord_t row_start = pos_y >= mask_p->y1 ? 0 : mask_p->y1 - pos_y;
 800a0fc:	f9b7 5002 	ldrsh.w	r5, [r7, #2]
 800a100:	3301      	adds	r3, #1
 800a102:	1a9b      	subs	r3, r3, r2
 800a104:	b21b      	sxth	r3, r3
 800a106:	930d      	str	r3, [sp, #52]	; 0x34
    lv_coord_t col_start = pos_x >= mask_p->x1 ? 0 : mask_p->x1 - pos_x;
 800a108:	f9b7 3000 	ldrsh.w	r3, [r7]
 800a10c:	4598      	cmp	r8, r3
 800a10e:	bfbd      	ittte	lt
 800a110:	990a      	ldrlt	r1, [sp, #40]	; 0x28
 800a112:	1a5b      	sublt	r3, r3, r1
 800a114:	b29b      	uxthlt	r3, r3
 800a116:	2300      	movge	r3, #0
 800a118:	b219      	sxth	r1, r3
 800a11a:	9106      	str	r1, [sp, #24]
    lv_coord_t col_end   = pos_x + g.box_w <= mask_p->x2 ? g.box_w : mask_p->x2 - pos_x + 1;
 800a11c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800a120:	4682      	mov	sl, r0
    lv_coord_t col_end   = pos_x + g.box_w <= mask_p->x2 ? g.box_w : mask_p->x2 - pos_x + 1;
 800a122:	eb08 0006 	add.w	r0, r8, r6
 800a126:	4288      	cmp	r0, r1
    uint16_t width_bit = g.box_w * g.bpp; /*Letter width in bits*/
 800a128:	fb06 fe04 	mul.w	lr, r6, r4
    lv_coord_t col_end   = pos_x + g.box_w <= mask_p->x2 ? g.box_w : mask_p->x2 - pos_x + 1;
 800a12c:	bfc4      	itt	gt
 800a12e:	1c4e      	addgt	r6, r1, #1
 800a130:	990a      	ldrgt	r1, [sp, #40]	; 0x28
    lv_coord_t row_end   = pos_y + g.box_h <= mask_p->y2 ? g.box_h : mask_p->y2 - pos_y + 1;
 800a132:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
    lv_coord_t col_end   = pos_x + g.box_w <= mask_p->x2 ? g.box_w : mask_p->x2 - pos_x + 1;
 800a136:	bfc8      	it	gt
 800a138:	1a76      	subgt	r6, r6, r1
    lv_coord_t row_start = pos_y >= mask_p->y1 ? 0 : mask_p->y1 - pos_y;
 800a13a:	45ab      	cmp	fp, r5
 800a13c:	bfbc      	itt	lt
 800a13e:	990b      	ldrlt	r1, [sp, #44]	; 0x2c
 800a140:	1a6d      	sublt	r5, r5, r1
    lv_coord_t row_end   = pos_y + g.box_h <= mask_p->y2 ? g.box_h : mask_p->y2 - pos_y + 1;
 800a142:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800a146:	eb00 070b 	add.w	r7, r0, fp
    lv_coord_t row_start = pos_y >= mask_p->y1 ? 0 : mask_p->y1 - pos_y;
 800a14a:	bfb4      	ite	lt
 800a14c:	b2ad      	uxthlt	r5, r5
 800a14e:	2500      	movge	r5, #0
    lv_coord_t row_end   = pos_y + g.box_h <= mask_p->y2 ? g.box_h : mask_p->y2 - pos_y + 1;
 800a150:	428f      	cmp	r7, r1
 800a152:	bfc3      	ittte	gt
 800a154:	980b      	ldrgt	r0, [sp, #44]	; 0x2c
 800a156:	3101      	addgt	r1, #1
 800a158:	1a09      	subgt	r1, r1, r0
 800a15a:	b201      	sxthle	r1, r0
 800a15c:	bfc8      	it	gt
 800a15e:	b209      	sxthgt	r1, r1
 800a160:	910e      	str	r1, [sp, #56]	; 0x38
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * g.bpp);
 800a162:	f8bd 1018 	ldrh.w	r1, [sp, #24]
        vdb_buf_tmp += vdb_width - (col_end - col_start); /*Next row in VDB*/
 800a166:	980d      	ldr	r0, [sp, #52]	; 0x34
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * g.bpp);
 800a168:	fb14 f401 	smulbb	r4, r4, r1
        vdb_buf_tmp += vdb_width - (col_end - col_start); /*Next row in VDB*/
 800a16c:	9906      	ldr	r1, [sp, #24]
    lv_coord_t col_end   = pos_x + g.box_w <= mask_p->x2 ? g.box_w : mask_p->x2 - pos_x + 1;
 800a16e:	b236      	sxth	r6, r6
        vdb_buf_tmp += vdb_width - (col_end - col_start); /*Next row in VDB*/
 800a170:	1a71      	subs	r1, r6, r1
 800a172:	1af3      	subs	r3, r6, r3
 800a174:	1a41      	subs	r1, r0, r1
 800a176:	b29b      	uxth	r3, r3
 800a178:	9806      	ldr	r0, [sp, #24]
 800a17a:	005b      	lsls	r3, r3, #1
 800a17c:	42b0      	cmp	r0, r6
 800a17e:	bfc8      	it	gt
 800a180:	2300      	movgt	r3, #0
 800a182:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800a186:	9310      	str	r3, [sp, #64]	; 0x40
    vdb_buf_tmp += ((pos_y - vdb->area.y1) * vdb_width) + pos_x - vdb->area.x1;
 800a188:	f9ba 3012 	ldrsh.w	r3, [sl, #18]
 800a18c:	ebab 0b03 	sub.w	fp, fp, r3
 800a190:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a192:	b22d      	sxth	r5, r5
 800a194:	fb03 880b 	mla	r8, r3, fp, r8
 800a198:	eba8 0202 	sub.w	r2, r8, r2
    vdb_buf_tmp += (row_start * vdb_width) + col_start;
 800a19c:	fb03 0805 	mla	r8, r3, r5, r0
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * g.bpp);
 800a1a0:	fb0e 4405 	mla	r4, lr, r5, r4
    vdb_buf_tmp += (row_start * vdb_width) + col_start;
 800a1a4:	4442      	add	r2, r8
    map_p += bit_ofs >> 3;
 800a1a6:	eb09 09d4 	add.w	r9, r9, r4, lsr #3
    vdb_buf_tmp += (row_start * vdb_width) + col_start;
 800a1aa:	eb0c 0b42 	add.w	fp, ip, r2, lsl #1
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
 800a1ae:	f004 0407 	and.w	r4, r4, #7
    for(row = row_start; row < row_end; row++) {
 800a1b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a1b4:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800a1b8:	429d      	cmp	r5, r3
 800a1ba:	db0a      	blt.n	800a1d2 <lv_draw_letter+0x216>
}
 800a1bc:	b01b      	add	sp, #108	; 0x6c
 800a1be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            bitmask_init  = 0xFF;
 800a1c2:	23ff      	movs	r3, #255	; 0xff
 800a1c4:	9308      	str	r3, [sp, #32]
            bpp_opa_table = NULL;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	e743      	b.n	800a052 <lv_draw_letter+0x96>
            bitmask_init  = 0xC0;
 800a1ca:	23c0      	movs	r3, #192	; 0xc0
 800a1cc:	9308      	str	r3, [sp, #32]
            bpp_opa_table = bpp2_opa_table;
 800a1ce:	ab13      	add	r3, sp, #76	; 0x4c
 800a1d0:	e73f      	b.n	800a052 <lv_draw_letter+0x96>
        bitmask = bitmask_init >> col_bit;
 800a1d2:	9b08      	ldr	r3, [sp, #32]
 800a1d4:	fa43 f804 	asr.w	r8, r3, r4
        for(col = col_start; col < col_end; col++) {
 800a1d8:	9b06      	ldr	r3, [sp, #24]
 800a1da:	930c      	str	r3, [sp, #48]	; 0x30
                } else if(vdb_buf_tmp->full != color.full) {
 800a1dc:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 800a1e0:	9311      	str	r3, [sp, #68]	; 0x44
        bitmask = bitmask_init >> col_bit;
 800a1e2:	fa5f f888 	uxtb.w	r8, r8
        for(col = col_start; col < col_end; col++) {
 800a1e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a1e8:	42b3      	cmp	r3, r6
 800a1ea:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
 800a1ee:	db11      	blt.n	800a214 <lv_draw_letter+0x258>
        col_bit += ((g.box_w - col_end) + col_start) * g.bpp;
 800a1f0:	f89d 2052 	ldrb.w	r2, [sp, #82]	; 0x52
 800a1f4:	9906      	ldr	r1, [sp, #24]
 800a1f6:	1b92      	subs	r2, r2, r6
 800a1f8:	440a      	add	r2, r1
 800a1fa:	fb13 f302 	smulbb	r3, r3, r2
 800a1fe:	441c      	add	r4, r3
 800a200:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a202:	b2a4      	uxth	r4, r4
 800a204:	3501      	adds	r5, #1
        map_p += (col_bit >> 3);
 800a206:	eb09 09d4 	add.w	r9, r9, r4, lsr #3
 800a20a:	b22d      	sxth	r5, r5
        col_bit = col_bit & 0x7;
 800a20c:	f004 0407 	and.w	r4, r4, #7
 800a210:	449b      	add	fp, r3
 800a212:	e7ce      	b.n	800a1b2 <lv_draw_letter+0x1f6>
            letter_px = (*map_p & bitmask) >> (8 - col_bit - g.bpp);
 800a214:	f899 2000 	ldrb.w	r2, [r9]
 800a218:	f1c4 0108 	rsb	r1, r4, #8
 800a21c:	ea08 0202 	and.w	r2, r8, r2
 800a220:	1ac9      	subs	r1, r1, r3
 800a222:	410a      	asrs	r2, r1
            if(letter_px != 0) {
 800a224:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 800a228:	d023      	beq.n	800a272 <lv_draw_letter+0x2b6>
                if(opa == LV_OPA_COVER) {
 800a22a:	9905      	ldr	r1, [sp, #20]
 800a22c:	29ff      	cmp	r1, #255	; 0xff
 800a22e:	d13c      	bne.n	800a2aa <lv_draw_letter+0x2ee>
                    px_opa = g.bpp == 8 ? letter_px : bpp_opa_table[letter_px];
 800a230:	2b08      	cmp	r3, #8
 800a232:	d001      	beq.n	800a238 <lv_draw_letter+0x27c>
 800a234:	9b07      	ldr	r3, [sp, #28]
 800a236:	5c9a      	ldrb	r2, [r3, r2]
                if(disp->driver.set_px_cb) {
 800a238:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a23a:	695b      	ldr	r3, [r3, #20]
 800a23c:	461f      	mov	r7, r3
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d040      	beq.n	800a2c4 <lv_draw_letter+0x308>
                                           (col + pos_x) - vdb->area.x1, (row + pos_y) - vdb->area.y1, color, px_opa);
 800a242:	f8ba 3010 	ldrh.w	r3, [sl, #16]
 800a246:	990a      	ldr	r1, [sp, #40]	; 0x28
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width,
 800a248:	9202      	str	r2, [sp, #8]
                                           (col + pos_x) - vdb->area.x1, (row + pos_y) - vdb->area.y1, color, px_opa);
 800a24a:	1acb      	subs	r3, r1, r3
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width,
 800a24c:	f8bd 2090 	ldrh.w	r2, [sp, #144]	; 0x90
                                           (col + pos_x) - vdb->area.x1, (row + pos_y) - vdb->area.y1, color, px_opa);
 800a250:	990c      	ldr	r1, [sp, #48]	; 0x30
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width,
 800a252:	f8ad 2004 	strh.w	r2, [sp, #4]
                                           (col + pos_x) - vdb->area.x1, (row + pos_y) - vdb->area.y1, color, px_opa);
 800a256:	440b      	add	r3, r1
 800a258:	f8ba 2012 	ldrh.w	r2, [sl, #18]
 800a25c:	990b      	ldr	r1, [sp, #44]	; 0x2c
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width,
 800a25e:	980f      	ldr	r0, [sp, #60]	; 0x3c
                                           (col + pos_x) - vdb->area.x1, (row + pos_y) - vdb->area.y1, color, px_opa);
 800a260:	1a8a      	subs	r2, r1, r2
 800a262:	442a      	add	r2, r5
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width,
 800a264:	b212      	sxth	r2, r2
 800a266:	9200      	str	r2, [sp, #0]
 800a268:	b21b      	sxth	r3, r3
 800a26a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a26c:	f8da 1008 	ldr.w	r1, [sl, #8]
 800a270:	47b8      	blx	r7
            vdb_buf_tmp++;
 800a272:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a274:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800a276:	3302      	adds	r3, #2
 800a278:	9309      	str	r3, [sp, #36]	; 0x24
            if(col_bit < 8 - g.bpp) {
 800a27a:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
 800a27e:	f1c3 0208 	rsb	r2, r3, #8
 800a282:	4294      	cmp	r4, r2
 800a284:	f107 0701 	add.w	r7, r7, #1
                col_bit += g.bpp;
 800a288:	bfbc      	itt	lt
 800a28a:	18e4      	addlt	r4, r4, r3
                bitmask = bitmask >> g.bpp;
 800a28c:	fa48 f803 	asrlt.w	r8, r8, r3
 800a290:	b23b      	sxth	r3, r7
                col_bit += g.bpp;
 800a292:	bfb9      	ittee	lt
 800a294:	b2a4      	uxthlt	r4, r4
                bitmask = bitmask >> g.bpp;
 800a296:	fa5f f888 	uxtblt.w	r8, r8
                map_p++;
 800a29a:	f109 0901 	addge.w	r9, r9, #1
                bitmask = bitmask_init;
 800a29e:	f8dd 8020 	ldrge.w	r8, [sp, #32]
 800a2a2:	930c      	str	r3, [sp, #48]	; 0x30
                col_bit = 0;
 800a2a4:	bfa8      	it	ge
 800a2a6:	2400      	movge	r4, #0
 800a2a8:	e79d      	b.n	800a1e6 <lv_draw_letter+0x22a>
                    px_opa = g.bpp == 8 ? (uint16_t)((uint16_t)letter_px * opa) >> 8
 800a2aa:	2b08      	cmp	r3, #8
                                        : (uint16_t)((uint16_t)bpp_opa_table[letter_px] * opa) >> 8;
 800a2ac:	bf1c      	itt	ne
 800a2ae:	9b07      	ldrne	r3, [sp, #28]
 800a2b0:	5c9a      	ldrbne	r2, [r3, r2]
 800a2b2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800a2b6:	fb12 f203 	smulbb	r2, r2, r3
                    px_opa = g.bpp == 8 ? (uint16_t)((uint16_t)letter_px * opa) >> 8
 800a2ba:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800a2be:	e7bb      	b.n	800a238 <lv_draw_letter+0x27c>
 800a2c0:	08011d1e 	.word	0x08011d1e
                } else if(vdb_buf_tmp->full != color.full) {
 800a2c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2c6:	8819      	ldrh	r1, [r3, #0]
 800a2c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a2ca:	4299      	cmp	r1, r3
 800a2cc:	d0d1      	beq.n	800a272 <lv_draw_letter+0x2b6>
                    if(px_opa > LV_OPA_MAX)
 800a2ce:	2afb      	cmp	r2, #251	; 0xfb
 800a2d0:	d904      	bls.n	800a2dc <lv_draw_letter+0x320>
                        *vdb_buf_tmp = color;
 800a2d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2d4:	f8bd 2090 	ldrh.w	r2, [sp, #144]	; 0x90
 800a2d8:	801a      	strh	r2, [r3, #0]
 800a2da:	e7ca      	b.n	800a272 <lv_draw_letter+0x2b6>
                    else if(px_opa > LV_OPA_MIN) {
 800a2dc:	2a10      	cmp	r2, #16
 800a2de:	d9c8      	bls.n	800a272 <lv_draw_letter+0x2b6>
                            *vdb_buf_tmp = lv_color_mix(color, *vdb_buf_tmp, px_opa);
 800a2e0:	f8bd 0090 	ldrh.w	r0, [sp, #144]	; 0x90
 800a2e4:	f7ff fc88 	bl	8009bf8 <lv_color_mix>
 800a2e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2ea:	8018      	strh	r0, [r3, #0]
 800a2ec:	e7c1      	b.n	800a272 <lv_draw_letter+0x2b6>
 800a2ee:	bf00      	nop

0800a2f0 <lv_img_color_format_get_px_size>:
 * Get the pixel size of a color format in bits
 * @param cf a color format (`LV_IMG_CF_...`)
 * @return the pixel size in bits
 */
uint8_t lv_img_color_format_get_px_size(lv_img_cf_t cf)
{
 800a2f0:	3804      	subs	r0, #4
 800a2f2:	b2c0      	uxtb	r0, r0
 800a2f4:	280a      	cmp	r0, #10
 800a2f6:	bf9a      	itte	ls
 800a2f8:	4b01      	ldrls	r3, [pc, #4]	; (800a300 <lv_img_color_format_get_px_size+0x10>)
 800a2fa:	5c18      	ldrbls	r0, [r3, r0]
 800a2fc:	2000      	movhi	r0, #0
        case LV_IMG_CF_ALPHA_8BIT: px_size = 8; break;
        default: px_size = 0; break;
    }

    return px_size;
}
 800a2fe:	4770      	bx	lr
 800a300:	0801236c 	.word	0x0801236c

0800a304 <lv_img_src_get_type>:
 */
lv_img_src_t lv_img_src_get_type(const void * src)
{
    lv_img_src_t img_src_type = LV_IMG_SRC_UNKNOWN;

    if(src == NULL) return img_src_type;
 800a304:	b150      	cbz	r0, 800a31c <lv_img_src_get_type+0x18>
    const uint8_t * u8_p = src;

    /*The first byte shows the type of the image source*/
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 800a306:	7803      	ldrb	r3, [r0, #0]
 800a308:	f1a3 0220 	sub.w	r2, r3, #32
 800a30c:	2a5f      	cmp	r2, #95	; 0x5f
 800a30e:	d907      	bls.n	800a320 <lv_img_src_get_type+0x1c>
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
    } else if(u8_p[0] >= 0x80) {
 800a310:	f013 0f80 	tst.w	r3, #128	; 0x80
        img_src_type = LV_IMG_SRC_SYMBOL; /*Symbols begins after 0x7F*/
    } else {
        img_src_type = LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is design to the first byte < 0x20*/
 800a314:	bf14      	ite	ne
 800a316:	2002      	movne	r0, #2
 800a318:	2000      	moveq	r0, #0
 800a31a:	4770      	bx	lr
    if(src == NULL) return img_src_type;
 800a31c:	2003      	movs	r0, #3
 800a31e:	4770      	bx	lr
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
 800a320:	2001      	movs	r0, #1
    if(LV_IMG_SRC_UNKNOWN == img_src_type) {
        LV_LOG_WARN("lv_img_src_get_type: unknown image type");
    }

    return img_src_type;
}
 800a322:	4770      	bx	lr

0800a324 <hex_char_to_num>:
 */
static uint8_t hex_char_to_num(char hex)
{
    uint8_t result = 0;

    if(hex >= '0' && hex <= '9') {
 800a324:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a328:	b2db      	uxtb	r3, r3
 800a32a:	2b09      	cmp	r3, #9
 800a32c:	d90a      	bls.n	800a344 <hex_char_to_num+0x20>
        result = hex - '0';
    } else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
 800a32e:	2860      	cmp	r0, #96	; 0x60
 800a330:	bf84      	itt	hi
 800a332:	3820      	subhi	r0, #32
 800a334:	b2c0      	uxtbhi	r0, r0
 800a336:	3841      	subs	r0, #65	; 0x41
 800a338:	b2c0      	uxtb	r0, r0
 800a33a:	2805      	cmp	r0, #5
 800a33c:	d804      	bhi.n	800a348 <hex_char_to_num+0x24>
 800a33e:	4b03      	ldr	r3, [pc, #12]	; (800a34c <hex_char_to_num+0x28>)
 800a340:	5c18      	ldrb	r0, [r3, r0]
 800a342:	4770      	bx	lr
 800a344:	4618      	mov	r0, r3
 800a346:	4770      	bx	lr
 800a348:	2000      	movs	r0, #0
            default: result = 0; break;
        }
    }

    return result;
}
 800a34a:	4770      	bx	lr
 800a34c:	08012377 	.word	0x08012377

0800a350 <lv_draw_label>:
{
 800a350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a354:	b0a7      	sub	sp, #156	; 0x9c
 800a356:	4605      	mov	r5, r0
 800a358:	f89d b0c4 	ldrb.w	fp, [sp, #196]	; 0xc4
 800a35c:	9309      	str	r3, [sp, #36]	; 0x24
 800a35e:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
 800a362:	930d      	str	r3, [sp, #52]	; 0x34
    if((flag & LV_TXT_FLAG_EXPAND) == 0) {
 800a364:	f01b 0f02 	tst.w	fp, #2
{
 800a368:	f8bd 30d0 	ldrh.w	r3, [sp, #208]	; 0xd0
 800a36c:	9107      	str	r1, [sp, #28]
 800a36e:	4614      	mov	r4, r2
 800a370:	930e      	str	r3, [sp, #56]	; 0x38
 800a372:	f8dd 80d4 	ldr.w	r8, [sp, #212]	; 0xd4
    const lv_font_t * font = style->text.font;
 800a376:	f8d2 a024 	ldr.w	sl, [r2, #36]	; 0x24
    if((flag & LV_TXT_FLAG_EXPAND) == 0) {
 800a37a:	f040 8094 	bne.w	800a4a6 <lv_draw_label+0x156>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return area_p->x2 - area_p->x1 + 1;
 800a37e:	8883      	ldrh	r3, [r0, #4]
 800a380:	8802      	ldrh	r2, [r0, #0]
 800a382:	3301      	adds	r3, #1
 800a384:	1a9b      	subs	r3, r3, r2
 800a386:	b21b      	sxth	r3, r3
    lv_coord_t line_height = lv_font_get_line_height(font) + style->text.line_space;
 800a388:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
        w = p.x;
 800a38a:	9304      	str	r3, [sp, #16]
    lv_coord_t line_height = lv_font_get_line_height(font) + style->text.line_space;
 800a38c:	f89a 3008 	ldrb.w	r3, [sl, #8]
 800a390:	4413      	add	r3, r2
 800a392:	b29b      	uxth	r3, r3
 800a394:	9305      	str	r3, [sp, #20]
 800a396:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800a39a:	9306      	str	r3, [sp, #24]
    pos.x = coords->x1;
 800a39c:	882b      	ldrh	r3, [r5, #0]
 800a39e:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
    if(offset != NULL) {
 800a3a2:	9b32      	ldr	r3, [sp, #200]	; 0xc8
    pos.y = coords->y1;
 800a3a4:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800a3a8:	f8ad 204e 	strh.w	r2, [sp, #78]	; 0x4e
    if(offset != NULL) {
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	f000 81f1 	beq.w	800a794 <lv_draw_label+0x444>
        x_ofs = offset->x;
 800a3b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a3b6:	930a      	str	r3, [sp, #40]	; 0x28
        y_ofs = offset->y;
 800a3b8:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 800a3ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
        pos.y += y_ofs;
 800a3be:	18d1      	adds	r1, r2, r3
 800a3c0:	f8ad 104e 	strh.w	r1, [sp, #78]	; 0x4e
    if(hint && y_ofs == 0) {
 800a3c4:	f1b8 0f00 	cmp.w	r8, #0
 800a3c8:	f000 81ea 	beq.w	800a7a0 <lv_draw_label+0x450>
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	f040 81e7 	bne.w	800a7a0 <lv_draw_label+0x450>
        if(LV_MATH_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
 800a3d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a3d6:	1a9b      	subs	r3, r3, r2
 800a3d8:	9a06      	ldr	r2, [sp, #24]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	bfb8      	it	lt
 800a3de:	425b      	neglt	r3, r3
 800a3e0:	f5c2 7200 	rsb	r2, r2, #512	; 0x200
 800a3e4:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
            hint->line_start = -1;
 800a3e8:	bfc4      	itt	gt
 800a3ea:	f04f 33ff 	movgt.w	r3, #4294967295	; 0xffffffff
 800a3ee:	f8c8 3000 	strgt.w	r3, [r8]
        last_line_start = hint->line_start;
 800a3f2:	f8d8 7000 	ldr.w	r7, [r8]
    if(hint && last_line_start >= 0) {
 800a3f6:	2f00      	cmp	r7, #0
 800a3f8:	f2c0 81d2 	blt.w	800a7a0 <lv_draw_label+0x450>
        pos.y += hint->y;
 800a3fc:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
 800a400:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a404:	4413      	add	r3, r2
 800a406:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
    uint32_t line_end = line_start + lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 800a40a:	9830      	ldr	r0, [sp, #192]	; 0xc0
 800a40c:	f9b4 2028 	ldrsh.w	r2, [r4, #40]	; 0x28
 800a410:	f8cd b000 	str.w	fp, [sp]
 800a414:	9b04      	ldr	r3, [sp, #16]
 800a416:	4651      	mov	r1, sl
 800a418:	4438      	add	r0, r7
 800a41a:	f003 fda3 	bl	800df64 <lv_txt_get_next_line>
 800a41e:	19c6      	adds	r6, r0, r7
    while(pos.y + line_height < mask->y1) {
 800a420:	9a06      	ldr	r2, [sp, #24]
 800a422:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 800a426:	4413      	add	r3, r2
 800a428:	9a07      	ldr	r2, [sp, #28]
 800a42a:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800a42e:	4293      	cmp	r3, r2
 800a430:	db4e      	blt.n	800a4d0 <lv_draw_label+0x180>
    if(flag & LV_TXT_FLAG_CENTER) {
 800a432:	f01b 0304 	ands.w	r3, fp, #4
 800a436:	930f      	str	r3, [sp, #60]	; 0x3c
 800a438:	d078      	beq.n	800a52c <lv_draw_label+0x1dc>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, style->text.letter_space, flag);
 800a43a:	9830      	ldr	r0, [sp, #192]	; 0xc0
 800a43c:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 800a440:	f8cd b000 	str.w	fp, [sp]
 800a444:	1bf1      	subs	r1, r6, r7
 800a446:	4652      	mov	r2, sl
 800a448:	b289      	uxth	r1, r1
 800a44a:	4438      	add	r0, r7
 800a44c:	f003 fe12 	bl	800e074 <lv_txt_get_width>
 800a450:	88ab      	ldrh	r3, [r5, #4]
 800a452:	882a      	ldrh	r2, [r5, #0]
 800a454:	3301      	adds	r3, #1
 800a456:	1a9b      	subs	r3, r3, r2
        pos.x += (lv_area_get_width(coords) - line_width) / 2;
 800a458:	b21b      	sxth	r3, r3
 800a45a:	1a18      	subs	r0, r3, r0
 800a45c:	2302      	movs	r3, #2
 800a45e:	fb90 f0f3 	sdiv	r0, r0, r3
        pos.x += lv_area_get_width(coords) - line_width;
 800a462:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800a466:	4418      	add	r0, r3
 800a468:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->text.opa : (uint16_t)((uint16_t)style->text.opa * opa_scale) >> 8;
 800a46c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    lv_style_copy(&sel_style, &lv_style_plain_color);
 800a46e:	49bb      	ldr	r1, [pc, #748]	; (800a75c <lv_draw_label+0x40c>)
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->text.opa : (uint16_t)((uint16_t)style->text.opa * opa_scale) >> 8;
 800a470:	2bff      	cmp	r3, #255	; 0xff
 800a472:	bf18      	it	ne
 800a474:	9a09      	ldrne	r2, [sp, #36]	; 0x24
 800a476:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800a47a:	bf1c      	itt	ne
 800a47c:	4353      	mulne	r3, r2
 800a47e:	f3c3 2307 	ubfxne	r3, r3, #8, #8
    lv_style_copy(&sel_style, &lv_style_plain_color);
 800a482:	a817      	add	r0, sp, #92	; 0x5c
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->text.opa : (uint16_t)((uint16_t)style->text.opa * opa_scale) >> 8;
 800a484:	9309      	str	r3, [sp, #36]	; 0x24
    lv_style_copy(&sel_style, &lv_style_plain_color);
 800a486:	f7fe ffb5 	bl	80093f4 <lv_style_copy>
    sel_style.body.main_color = sel_style.body.grad_color = style->text.sel_color;
 800a48a:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800a48c:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 800a490:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
    uint16_t par_start = 0;
 800a494:	2300      	movs	r3, #0
 800a496:	9308      	str	r3, [sp, #32]
    while(txt[line_start] != '\0') {
 800a498:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800a49a:	5ddb      	ldrb	r3, [r3, r7]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d15a      	bne.n	800a556 <lv_draw_label+0x206>
}
 800a4a0:	b027      	add	sp, #156	; 0x9c
 800a4a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_txt_get_size(&p, txt, style->text.font, style->text.letter_space, style->text.line_space, LV_COORD_MAX,
 800a4a6:	f9b2 3028 	ldrsh.w	r3, [r2, #40]	; 0x28
 800a4aa:	9930      	ldr	r1, [sp, #192]	; 0xc0
 800a4ac:	f8cd b008 	str.w	fp, [sp, #8]
 800a4b0:	f647 4218 	movw	r2, #31768	; 0x7c18
 800a4b4:	9201      	str	r2, [sp, #4]
 800a4b6:	f9b4 202a 	ldrsh.w	r2, [r4, #42]	; 0x2a
 800a4ba:	9200      	str	r2, [sp, #0]
 800a4bc:	a817      	add	r0, sp, #92	; 0x5c
 800a4be:	4652      	mov	r2, sl
 800a4c0:	f003 fe20 	bl	800e104 <lv_txt_get_size>
        w = p.x;
 800a4c4:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 800a4c8:	e75e      	b.n	800a388 <lv_draw_label+0x38>
    lv_coord_t x_ofs = 0;
 800a4ca:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 800a4cc:	930a      	str	r3, [sp, #40]	; 0x28
 800a4ce:	e780      	b.n	800a3d2 <lv_draw_label+0x82>
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 800a4d0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800a4d2:	f9b4 2028 	ldrsh.w	r2, [r4, #40]	; 0x28
 800a4d6:	f8cd b000 	str.w	fp, [sp]
 800a4da:	4433      	add	r3, r6
 800a4dc:	9308      	str	r3, [sp, #32]
 800a4de:	4651      	mov	r1, sl
 800a4e0:	9b04      	ldr	r3, [sp, #16]
 800a4e2:	9808      	ldr	r0, [sp, #32]
 800a4e4:	f003 fd3e 	bl	800df64 <lv_txt_get_next_line>
        pos.y += line_height;
 800a4e8:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 800a4ec:	9a05      	ldr	r2, [sp, #20]
 800a4ee:	4413      	add	r3, r2
 800a4f0:	b21b      	sxth	r3, r3
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 800a4f2:	4430      	add	r0, r6
        pos.y += line_height;
 800a4f4:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
 800a4f8:	f1b8 0f00 	cmp.w	r8, #0
 800a4fc:	d00f      	beq.n	800a51e <lv_draw_label+0x1ce>
 800a4fe:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 800a502:	db0c      	blt.n	800a51e <lv_draw_label+0x1ce>
 800a504:	f8d8 2000 	ldr.w	r2, [r8]
 800a508:	2a00      	cmp	r2, #0
 800a50a:	da08      	bge.n	800a51e <lv_draw_label+0x1ce>
            hint->y          = pos.y - coords->y1;
 800a50c:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
            hint->line_start = line_start;
 800a510:	f8c8 6000 	str.w	r6, [r8]
            hint->y          = pos.y - coords->y1;
 800a514:	1a9b      	subs	r3, r3, r2
 800a516:	f8c8 3004 	str.w	r3, [r8, #4]
            hint->coord_y    = coords->y1;
 800a51a:	f8c8 2008 	str.w	r2, [r8, #8]
        if(txt[line_start] == '\0') return;
 800a51e:	9b08      	ldr	r3, [sp, #32]
 800a520:	781b      	ldrb	r3, [r3, #0]
 800a522:	4637      	mov	r7, r6
 800a524:	2b00      	cmp	r3, #0
 800a526:	d0bb      	beq.n	800a4a0 <lv_draw_label+0x150>
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 800a528:	4606      	mov	r6, r0
 800a52a:	e779      	b.n	800a420 <lv_draw_label+0xd0>
    else if(flag & LV_TXT_FLAG_RIGHT) {
 800a52c:	f01b 0f08 	tst.w	fp, #8
 800a530:	d09c      	beq.n	800a46c <lv_draw_label+0x11c>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, style->text.letter_space, flag);
 800a532:	9830      	ldr	r0, [sp, #192]	; 0xc0
 800a534:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 800a538:	f8cd b000 	str.w	fp, [sp]
 800a53c:	1bf1      	subs	r1, r6, r7
 800a53e:	4652      	mov	r2, sl
 800a540:	b289      	uxth	r1, r1
 800a542:	4438      	add	r0, r7
 800a544:	f003 fd96 	bl	800e074 <lv_txt_get_width>
 800a548:	88ab      	ldrh	r3, [r5, #4]
 800a54a:	882a      	ldrh	r2, [r5, #0]
 800a54c:	3301      	adds	r3, #1
 800a54e:	1a9b      	subs	r3, r3, r2
        pos.x += lv_area_get_width(coords) - line_width;
 800a550:	b21b      	sxth	r3, r3
 800a552:	1a18      	subs	r0, r3, r0
 800a554:	e785      	b.n	800a462 <lv_draw_label+0x112>
        if(offset != NULL) {
 800a556:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 800a558:	b12b      	cbz	r3, 800a566 <lv_draw_label+0x216>
            pos.x += x_ofs;
 800a55a:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800a55e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a560:	4413      	add	r3, r2
 800a562:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800a566:	f00b 0301 	and.w	r3, fp, #1
        i         = line_start;
 800a56a:	9714      	str	r7, [sp, #80]	; 0x50
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800a56c:	9311      	str	r3, [sp, #68]	; 0x44
        cmd_state = CMD_STATE_WAIT;
 800a56e:	2700      	movs	r7, #0
        while(i < line_end) {
 800a570:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a572:	429e      	cmp	r6, r3
 800a574:	d83a      	bhi.n	800a5ec <lv_draw_label+0x29c>
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 800a576:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800a578:	f9b4 2028 	ldrsh.w	r2, [r4, #40]	; 0x28
 800a57c:	f8cd b000 	str.w	fp, [sp]
 800a580:	199f      	adds	r7, r3, r6
 800a582:	4651      	mov	r1, sl
 800a584:	9b04      	ldr	r3, [sp, #16]
 800a586:	4638      	mov	r0, r7
 800a588:	f003 fcec 	bl	800df64 <lv_txt_get_next_line>
        pos.x = coords->x1;
 800a58c:	882b      	ldrh	r3, [r5, #0]
 800a58e:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        if(flag & LV_TXT_FLAG_CENTER) {
 800a592:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 800a594:	4601      	mov	r1, r0
 800a596:	eb00 0806 	add.w	r8, r0, r6
        if(flag & LV_TXT_FLAG_CENTER) {
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	f000 80e7 	beq.w	800a76e <lv_draw_label+0x41e>
            line_width =
 800a5a0:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 800a5a4:	f8cd b000 	str.w	fp, [sp]
 800a5a8:	4652      	mov	r2, sl
 800a5aa:	4638      	mov	r0, r7
 800a5ac:	f003 fd62 	bl	800e074 <lv_txt_get_width>
 800a5b0:	88ab      	ldrh	r3, [r5, #4]
 800a5b2:	882a      	ldrh	r2, [r5, #0]
 800a5b4:	3301      	adds	r3, #1
 800a5b6:	1a9b      	subs	r3, r3, r2
            pos.x += (lv_area_get_width(coords) - line_width) / 2;
 800a5b8:	b21b      	sxth	r3, r3
 800a5ba:	1a18      	subs	r0, r3, r0
 800a5bc:	2302      	movs	r3, #2
 800a5be:	fb90 f0f3 	sdiv	r0, r0, r3
            pos.x += lv_area_get_width(coords) - line_width;
 800a5c2:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800a5c6:	4418      	add	r0, r3
 800a5c8:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
        pos.y += line_height;
 800a5cc:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 800a5d0:	9a05      	ldr	r2, [sp, #20]
 800a5d2:	4413      	add	r3, r2
        if(pos.y > mask->y2) return;
 800a5d4:	9a07      	ldr	r2, [sp, #28]
 800a5d6:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
        pos.y += line_height;
 800a5da:	b21b      	sxth	r3, r3
        if(pos.y > mask->y2) return;
 800a5dc:	429a      	cmp	r2, r3
        pos.y += line_height;
 800a5de:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
 800a5e2:	4637      	mov	r7, r6
        if(pos.y > mask->y2) return;
 800a5e4:	f6ff af5c 	blt.w	800a4a0 <lv_draw_label+0x150>
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 800a5e8:	4646      	mov	r6, r8
 800a5ea:	e755      	b.n	800a498 <lv_draw_label+0x148>
            letter      = lv_txt_encoded_next(txt, &i);
 800a5ec:	4b5c      	ldr	r3, [pc, #368]	; (800a760 <lv_draw_label+0x410>)
 800a5ee:	9830      	ldr	r0, [sp, #192]	; 0xc0
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	a914      	add	r1, sp, #80	; 0x50
 800a5f4:	4798      	blx	r3
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 800a5f6:	9a30      	ldr	r2, [sp, #192]	; 0xc0
            letter      = lv_txt_encoded_next(txt, &i);
 800a5f8:	9006      	str	r0, [sp, #24]
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 800a5fa:	4b59      	ldr	r3, [pc, #356]	; (800a760 <lv_draw_label+0x410>)
 800a5fc:	9814      	ldr	r0, [sp, #80]	; 0x50
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	4410      	add	r0, r2
 800a602:	2100      	movs	r1, #0
 800a604:	4798      	blx	r3
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800a606:	9b11      	ldr	r3, [sp, #68]	; 0x44
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 800a608:	4602      	mov	r2, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d055      	beq.n	800a6ba <lv_draw_label+0x36a>
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 800a60e:	9b06      	ldr	r3, [sp, #24]
 800a610:	2b23      	cmp	r3, #35	; 0x23
 800a612:	d10c      	bne.n	800a62e <lv_draw_label+0x2de>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
 800a614:	b927      	cbnz	r7, 800a620 <lv_draw_label+0x2d0>
                        par_start = i;
 800a616:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800a61a:	9308      	str	r3, [sp, #32]
                        cmd_state = CMD_STATE_PAR;
 800a61c:	2701      	movs	r7, #1
                        continue;
 800a61e:	e7a7      	b.n	800a570 <lv_draw_label+0x220>
                    } else if(cmd_state == CMD_STATE_PAR) { /*Other start char in parameter escaped cmd. char */
 800a620:	2f01      	cmp	r7, #1
 800a622:	f000 80bf 	beq.w	800a7a4 <lv_draw_label+0x454>
                    } else if(cmd_state == CMD_STATE_IN) { /*Command end */
 800a626:	2f02      	cmp	r7, #2
 800a628:	d149      	bne.n	800a6be <lv_draw_label+0x36e>
                        cmd_state = CMD_STATE_WAIT;
 800a62a:	2700      	movs	r7, #0
 800a62c:	e7a0      	b.n	800a570 <lv_draw_label+0x220>
                if(cmd_state == CMD_STATE_PAR) {
 800a62e:	2f01      	cmp	r7, #1
 800a630:	d143      	bne.n	800a6ba <lv_draw_label+0x36a>
                    if(letter == ' ') {
 800a632:	9b06      	ldr	r3, [sp, #24]
 800a634:	2b20      	cmp	r3, #32
 800a636:	d19b      	bne.n	800a570 <lv_draw_label+0x220>
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
 800a638:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a63a:	9a08      	ldr	r2, [sp, #32]
 800a63c:	1a9b      	subs	r3, r3, r2
 800a63e:	2b07      	cmp	r3, #7
 800a640:	d139      	bne.n	800a6b6 <lv_draw_label+0x366>
                            memcpy(buf, &txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
 800a642:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800a644:	4413      	add	r3, r2
 800a646:	6818      	ldr	r0, [r3, #0]
 800a648:	9015      	str	r0, [sp, #84]	; 0x54
 800a64a:	889b      	ldrh	r3, [r3, #4]
 800a64c:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
 800a650:	0e01      	lsrs	r1, r0, #24
 800a652:	0c07      	lsrs	r7, r0, #16
 800a654:	ea4f 2810 	mov.w	r8, r0, lsr #8
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
 800a658:	b2c0      	uxtb	r0, r0
 800a65a:	f7ff fe63 	bl	800a324 <hex_char_to_num>
 800a65e:	4602      	mov	r2, r0
 800a660:	fa5f f088 	uxtb.w	r0, r8
 800a664:	f7ff fe5e 	bl	800a324 <hex_char_to_num>
 800a668:	eb00 1202 	add.w	r2, r0, r2, lsl #4
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
 800a66c:	b2f8      	uxtb	r0, r7
 800a66e:	f7ff fe59 	bl	800a324 <hex_char_to_num>
 800a672:	4607      	mov	r7, r0
 800a674:	b2c8      	uxtb	r0, r1
 800a676:	f7ff fe55 	bl	800a324 <hex_char_to_num>
 800a67a:	eb00 1107 	add.w	r1, r0, r7, lsl #4
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
 800a67e:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
 800a682:	f7ff fe4f 	bl	800a324 <hex_char_to_num>
 800a686:	4607      	mov	r7, r0
 800a688:	f89d 0059 	ldrb.w	r0, [sp, #89]	; 0x59
 800a68c:	f7ff fe4a 	bl	800a324 <hex_char_to_num>
 800a690:	eb00 1007 	add.w	r0, r0, r7, lsl #4
#if LV_COLOR_16_SWAP == 0
#define LV_COLOR_MAKE(r8, g8, b8) ((lv_color_t){{b8 >> 3, g8 >> 2, r8 >> 3}})
static inline lv_color_t lv_color_make(uint8_t r8, uint8_t g8, uint8_t b8)
{
    lv_color_t color;
    color.ch.blue  = (uint16_t)(b8 >> 3);
 800a694:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 800a698:	f360 0904 	bfi	r9, r0, #0, #5
    color.ch.green = (uint16_t)(g8 >> 2);
 800a69c:	f3c1 0185 	ubfx	r1, r1, #2, #6
 800a6a0:	f361 194a 	bfi	r9, r1, #5, #6
    color.ch.red   = (uint16_t)(r8 >> 3);
 800a6a4:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 800a6a8:	f362 29cf 	bfi	r9, r2, #11, #5
 800a6ac:	fa1f f389 	uxth.w	r3, r9
                            recolor.full = style->text.color.full;
 800a6b0:	930b      	str	r3, [sp, #44]	; 0x2c
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
 800a6b2:	2702      	movs	r7, #2
 800a6b4:	e75c      	b.n	800a570 <lv_draw_label+0x220>
                            recolor.full = style->text.color.full;
 800a6b6:	8c23      	ldrh	r3, [r4, #32]
 800a6b8:	e7fa      	b.n	800a6b0 <lv_draw_label+0x360>
            if(cmd_state == CMD_STATE_IN) color = recolor;
 800a6ba:	2f02      	cmp	r7, #2
 800a6bc:	d054      	beq.n	800a768 <lv_draw_label+0x418>
            lv_color_t color = style->text.color;
 800a6be:	8c23      	ldrh	r3, [r4, #32]
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 800a6c0:	9906      	ldr	r1, [sp, #24]
            if(cmd_state == CMD_STATE_IN) color = recolor;
 800a6c2:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 800a6c6:	4650      	mov	r0, sl
 800a6c8:	f002 fafc 	bl	800ccc4 <lv_font_get_glyph_width>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 800a6cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 800a6ce:	b203      	sxth	r3, r0
 800a6d0:	9310      	str	r3, [sp, #64]	; 0x40
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 800a6d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a6d6:	429a      	cmp	r2, r3
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 800a6d8:	4680      	mov	r8, r0
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 800a6da:	d026      	beq.n	800a72a <lv_draw_label+0x3da>
 800a6dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a6de:	429a      	cmp	r2, r3
 800a6e0:	d023      	beq.n	800a72a <lv_draw_label+0x3da>
                int char_ind = lv_encoded_get_char_id(txt, i);
 800a6e2:	4b20      	ldr	r3, [pc, #128]	; (800a764 <lv_draw_label+0x414>)
 800a6e4:	9914      	ldr	r1, [sp, #80]	; 0x50
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	9830      	ldr	r0, [sp, #192]	; 0xc0
 800a6ea:	4798      	blx	r3
                if(char_ind > sel_start && char_ind <= sel_end) {
 800a6ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6ee:	4298      	cmp	r0, r3
 800a6f0:	dd1b      	ble.n	800a72a <lv_draw_label+0x3da>
 800a6f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a6f4:	4298      	cmp	r0, r3
 800a6f6:	dc18      	bgt.n	800a72a <lv_draw_label+0x3da>
                    sel_coords.x1 = pos.x;
 800a6f8:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
                    sel_coords.x2 = pos.x + letter_w + style->text.letter_space - 1;
 800a6fc:	8d21      	ldrh	r1, [r4, #40]	; 0x28
                    sel_coords.x1 = pos.x;
 800a6fe:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
                    sel_coords.x2 = pos.x + letter_w + style->text.letter_space - 1;
 800a702:	3b01      	subs	r3, #1
 800a704:	440b      	add	r3, r1
                    sel_coords.y1 = pos.y;
 800a706:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
 800a70a:	f8ad 2056 	strh.w	r2, [sp, #86]	; 0x56
                    sel_coords.x2 = pos.x + letter_w + style->text.letter_space - 1;
 800a70e:	4443      	add	r3, r8
 800a710:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
                    sel_coords.y2 = pos.y + line_height - 1;
 800a714:	9b05      	ldr	r3, [sp, #20]
                    lv_draw_rect(&sel_coords, mask, &sel_style, opa);
 800a716:	9907      	ldr	r1, [sp, #28]
                    sel_coords.y2 = pos.y + line_height - 1;
 800a718:	3a01      	subs	r2, #1
 800a71a:	441a      	add	r2, r3
 800a71c:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
                    lv_draw_rect(&sel_coords, mask, &sel_style, opa);
 800a720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a722:	aa17      	add	r2, sp, #92	; 0x5c
 800a724:	a815      	add	r0, sp, #84	; 0x54
 800a726:	f000 f8a9 	bl	800a87c <lv_draw_rect>
            lv_draw_letter(&pos, mask, font, letter, color, opa);
 800a72a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a72c:	9301      	str	r3, [sp, #4]
 800a72e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 800a732:	f8ad 3000 	strh.w	r3, [sp]
 800a736:	4652      	mov	r2, sl
 800a738:	9b06      	ldr	r3, [sp, #24]
 800a73a:	9907      	ldr	r1, [sp, #28]
 800a73c:	a813      	add	r0, sp, #76	; 0x4c
 800a73e:	f7ff fc3d 	bl	8009fbc <lv_draw_letter>
            if(letter_w > 0) {
 800a742:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a744:	2b00      	cmp	r3, #0
 800a746:	f77f af13 	ble.w	800a570 <lv_draw_label+0x220>
                pos.x += letter_w + style->text.letter_space;
 800a74a:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800a74e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800a750:	4413      	add	r3, r2
 800a752:	4498      	add	r8, r3
 800a754:	f8ad 804c 	strh.w	r8, [sp, #76]	; 0x4c
 800a758:	e70a      	b.n	800a570 <lv_draw_label+0x220>
 800a75a:	bf00      	nop
 800a75c:	2000d8a0 	.word	0x2000d8a0
 800a760:	20000d20 	.word	0x20000d20
 800a764:	20000d18 	.word	0x20000d18
            if(cmd_state == CMD_STATE_IN) color = recolor;
 800a768:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800a76c:	e7a8      	b.n	800a6c0 <lv_draw_label+0x370>
        else if(flag & LV_TXT_FLAG_RIGHT) {
 800a76e:	f01b 0f08 	tst.w	fp, #8
 800a772:	f43f af2b 	beq.w	800a5cc <lv_draw_label+0x27c>
            line_width =
 800a776:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 800a77a:	f8cd b000 	str.w	fp, [sp]
 800a77e:	4652      	mov	r2, sl
 800a780:	4638      	mov	r0, r7
 800a782:	f003 fc77 	bl	800e074 <lv_txt_get_width>
 800a786:	88ab      	ldrh	r3, [r5, #4]
 800a788:	882a      	ldrh	r2, [r5, #0]
 800a78a:	3301      	adds	r3, #1
 800a78c:	1a9b      	subs	r3, r3, r2
            pos.x += lv_area_get_width(coords) - line_width;
 800a78e:	b21b      	sxth	r3, r3
 800a790:	1a18      	subs	r0, r3, r0
 800a792:	e716      	b.n	800a5c2 <lv_draw_label+0x272>
    if(hint && y_ofs == 0) {
 800a794:	f1b8 0f00 	cmp.w	r8, #0
 800a798:	f47f ae97 	bne.w	800a4ca <lv_draw_label+0x17a>
    lv_coord_t x_ofs = 0;
 800a79c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    uint32_t line_start     = 0;
 800a7a0:	2700      	movs	r7, #0
 800a7a2:	e632      	b.n	800a40a <lv_draw_label+0xba>
                        cmd_state = CMD_STATE_WAIT;
 800a7a4:	2700      	movs	r7, #0
 800a7a6:	e78a      	b.n	800a6be <lv_draw_label+0x36e>

0800a7a8 <lv_color_mix>:
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 800a7a8:	f1c2 03ff 	rsb	r3, r2, #255	; 0xff
{
 800a7ac:	b570      	push	{r4, r5, r6, lr}
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 800a7ae:	b294      	uxth	r4, r2
 800a7b0:	b29a      	uxth	r2, r3
 800a7b2:	f3c1 23c4 	ubfx	r3, r1, #11, #5
 800a7b6:	fb13 f302 	smulbb	r3, r3, r2
 800a7ba:	f3c0 25c4 	ubfx	r5, r0, #11, #5
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 800a7be:	f3c1 1645 	ubfx	r6, r1, #5, #6
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 800a7c2:	f001 011f 	and.w	r1, r1, #31
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 800a7c6:	fb05 3504 	mla	r5, r5, r4, r3
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 800a7ca:	fb16 f602 	smulbb	r6, r6, r2
 800a7ce:	f3c0 1345 	ubfx	r3, r0, #5, #6
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 800a7d2:	fb11 f202 	smulbb	r2, r1, r2
 800a7d6:	f000 001f 	and.w	r0, r0, #31
 800a7da:	fb00 2204 	mla	r2, r0, r4, r2
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 800a7de:	fb03 6304 	mla	r3, r3, r4, r6
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 800a7e2:	f3c2 2207 	ubfx	r2, r2, #8, #8
    return ret;
 800a7e6:	f04f 0000 	mov.w	r0, #0
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 800a7ea:	f3c3 2305 	ubfx	r3, r3, #8, #6
    return ret;
 800a7ee:	f362 0004 	bfi	r0, r2, #0, #5
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 800a7f2:	f3c5 2504 	ubfx	r5, r5, #8, #5
    return ret;
 800a7f6:	f363 104a 	bfi	r0, r3, #5, #6
 800a7fa:	f365 20cf 	bfi	r0, r5, #11, #5
}
 800a7fe:	bd70      	pop	{r4, r5, r6, pc}

0800a800 <lv_draw_cont_radius_corr>:
}

#endif

static uint16_t lv_draw_cont_radius_corr(uint16_t r, lv_coord_t w, lv_coord_t h)
{
 800a800:	b570      	push	{r4, r5, r6, lr}
 800a802:	460e      	mov	r6, r1
 800a804:	4604      	mov	r4, r0
 800a806:	4615      	mov	r5, r2
    bool aa = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800a808:	f7fe fc38 	bl	800907c <lv_refr_get_disp_refreshing>
 800a80c:	f002 fc2a 	bl	800d064 <lv_disp_get_antialiasing>

    if(r >= (w >> 1)) {
 800a810:	1071      	asrs	r1, r6, #1
 800a812:	428c      	cmp	r4, r1
 800a814:	db03      	blt.n	800a81e <lv_draw_cont_radius_corr+0x1e>
        r = (w >> 1);
 800a816:	b28c      	uxth	r4, r1
        if(r != 0) r--;
 800a818:	b10c      	cbz	r4, 800a81e <lv_draw_cont_radius_corr+0x1e>
 800a81a:	3c01      	subs	r4, #1
 800a81c:	b2a4      	uxth	r4, r4
    }
    if(r >= (h >> 1)) {
 800a81e:	106a      	asrs	r2, r5, #1
 800a820:	4294      	cmp	r4, r2
 800a822:	db03      	blt.n	800a82c <lv_draw_cont_radius_corr+0x2c>
        r = (h >> 1);
 800a824:	b294      	uxth	r4, r2
        if(r != 0) r--;
 800a826:	b124      	cbz	r4, 800a832 <lv_draw_cont_radius_corr+0x32>
 800a828:	3c01      	subs	r4, #1
 800a82a:	b2a4      	uxth	r4, r4
    }

    if(r > 0) r -= aa;
 800a82c:	b10c      	cbz	r4, 800a832 <lv_draw_cont_radius_corr+0x32>
 800a82e:	1a24      	subs	r4, r4, r0
 800a830:	b2a4      	uxth	r4, r4

    return r;
}
 800a832:	4620      	mov	r0, r4
 800a834:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a838 <antialias_get_opa_circ>:
#if CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD < 1
    if(seg == 1) return 170;
#endif

#if CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD < 2
    if(seg == 2) return (opa_map2[px_id] * opa) >> 8;
 800a838:	2802      	cmp	r0, #2
 800a83a:	d105      	bne.n	800a848 <antialias_get_opa_circ+0x10>
 800a83c:	4b0b      	ldr	r3, [pc, #44]	; (800a86c <antialias_get_opa_circ+0x34>)
#if CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD < 4
    if(seg == 4) return (opa_map4[px_id] * opa) >> 8;
#endif

    uint8_t id = (uint32_t)((uint32_t)px_id * (sizeof(opa_map8) - 1)) / (seg - 1);
    return (uint32_t)((uint32_t)opa_map8[id] * opa) >> 8;
 800a83e:	5c58      	ldrb	r0, [r3, r1]
 800a840:	fb10 f002 	smulbb	r0, r0, r2
 800a844:	0a00      	lsrs	r0, r0, #8
}
 800a846:	4770      	bx	lr
    if(seg == 3) return (opa_map3[px_id] * opa) >> 8;
 800a848:	2803      	cmp	r0, #3
 800a84a:	d101      	bne.n	800a850 <antialias_get_opa_circ+0x18>
 800a84c:	4b08      	ldr	r3, [pc, #32]	; (800a870 <antialias_get_opa_circ+0x38>)
 800a84e:	e7f6      	b.n	800a83e <antialias_get_opa_circ+0x6>
    if(seg == 4) return (opa_map4[px_id] * opa) >> 8;
 800a850:	2804      	cmp	r0, #4
    uint8_t id = (uint32_t)((uint32_t)px_id * (sizeof(opa_map8) - 1)) / (seg - 1);
 800a852:	bf1b      	ittet	ne
 800a854:	ebc1 01c1 	rsbne	r1, r1, r1, lsl #3
 800a858:	f100 33ff 	addne.w	r3, r0, #4294967295	; 0xffffffff
    if(seg == 4) return (opa_map4[px_id] * opa) >> 8;
 800a85c:	4b05      	ldreq	r3, [pc, #20]	; (800a874 <antialias_get_opa_circ+0x3c>)
    uint8_t id = (uint32_t)((uint32_t)px_id * (sizeof(opa_map8) - 1)) / (seg - 1);
 800a85e:	fbb1 f1f3 	udivne	r1, r1, r3
    return (uint32_t)((uint32_t)opa_map8[id] * opa) >> 8;
 800a862:	bf1c      	itt	ne
 800a864:	4b04      	ldrne	r3, [pc, #16]	; (800a878 <antialias_get_opa_circ+0x40>)
 800a866:	b2c9      	uxtbne	r1, r1
 800a868:	e7e9      	b.n	800a83e <antialias_get_opa_circ+0x6>
 800a86a:	bf00      	nop
 800a86c:	0801237d 	.word	0x0801237d
 800a870:	0801237f 	.word	0x0801237f
 800a874:	08012382 	.word	0x08012382
 800a878:	08012386 	.word	0x08012386

0800a87c <lv_draw_rect>:
{
 800a87c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a880:	b0a9      	sub	sp, #164	; 0xa4
 800a882:	4682      	mov	sl, r0
 800a884:	9202      	str	r2, [sp, #8]
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 800a886:	88c2      	ldrh	r2, [r0, #6]
 800a888:	9308      	str	r3, [sp, #32]
 800a88a:	8843      	ldrh	r3, [r0, #2]
 800a88c:	3201      	adds	r2, #1
 800a88e:	1ad2      	subs	r2, r2, r3
 800a890:	b212      	sxth	r2, r2
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 800a892:	2a00      	cmp	r2, #0
{
 800a894:	468b      	mov	fp, r1
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 800a896:	f340 869c 	ble.w	800b5d2 <lv_draw_rect+0xd56>
    return area_p->x2 - area_p->x1 + 1;
 800a89a:	8881      	ldrh	r1, [r0, #4]
 800a89c:	8803      	ldrh	r3, [r0, #0]
 800a89e:	3101      	adds	r1, #1
 800a8a0:	1ac9      	subs	r1, r1, r3
 800a8a2:	b209      	sxth	r1, r1
 800a8a4:	2900      	cmp	r1, #0
 800a8a6:	f340 8694 	ble.w	800b5d2 <lv_draw_rect+0xd56>
    if(style->body.shadow.width != 0) {
 800a8aa:	9b02      	ldr	r3, [sp, #8]
 800a8ac:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	f000 82d3 	beq.w	800ae5c <lv_draw_rect+0x5e0>
    radius            = lv_draw_cont_radius_corr(radius, width, height);
 800a8b6:	9b02      	ldr	r3, [sp, #8]
 800a8b8:	88d8      	ldrh	r0, [r3, #6]
 800a8ba:	f7ff ffa1 	bl	800a800 <lv_draw_cont_radius_corr>
    memcpy(dest, src, sizeof(lv_area_t));
 800a8be:	f8da 1004 	ldr.w	r1, [sl, #4]
 800a8c2:	4604      	mov	r4, r0
 800a8c4:	f8da 0000 	ldr.w	r0, [sl]
 800a8c8:	ab1e      	add	r3, sp, #120	; 0x78
 800a8ca:	c303      	stmia	r3!, {r0, r1}
    area_tmp.x1 += radius;
 800a8cc:	f8bd 3078 	ldrh.w	r3, [sp, #120]	; 0x78
 800a8d0:	4423      	add	r3, r4
 800a8d2:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
    area_tmp.x2 -= radius;
 800a8d6:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 800a8da:	a91e      	add	r1, sp, #120	; 0x78
    area_tmp.x2 -= radius;
 800a8dc:	1b1b      	subs	r3, r3, r4
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 800a8de:	4658      	mov	r0, fp
    area_tmp.x2 -= radius;
 800a8e0:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 800a8e4:	f002 fdbe 	bl	800d464 <lv_area_is_in>
 800a8e8:	2800      	cmp	r0, #0
 800a8ea:	f040 82b7 	bne.w	800ae5c <lv_draw_rect+0x5e0>
 800a8ee:	f8da 0000 	ldr.w	r0, [sl]
 800a8f2:	f8da 1004 	ldr.w	r1, [sl, #4]
 800a8f6:	ab1e      	add	r3, sp, #120	; 0x78
 800a8f8:	c303      	stmia	r3!, {r0, r1}
    area_tmp.y1 += radius;
 800a8fa:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
 800a8fe:	4423      	add	r3, r4
 800a900:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
    area_tmp.y2 -= radius;
 800a904:	f8bd 307e 	ldrh.w	r3, [sp, #126]	; 0x7e
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 800a908:	a91e      	add	r1, sp, #120	; 0x78
    area_tmp.y2 -= radius;
 800a90a:	1b1c      	subs	r4, r3, r4
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 800a90c:	4658      	mov	r0, fp
    area_tmp.y2 -= radius;
 800a90e:	f8ad 407e 	strh.w	r4, [sp, #126]	; 0x7e
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 800a912:	f002 fda7 	bl	800d464 <lv_area_is_in>
 800a916:	4605      	mov	r5, r0
 800a918:	2800      	cmp	r0, #0
 800a91a:	f040 829f 	bne.w	800ae5c <lv_draw_rect+0x5e0>
    if(style->body.shadow.type == LV_SHADOW_FULL) {
 800a91e:	9b02      	ldr	r3, [sp, #8]
 800a920:	7d1b      	ldrb	r3, [r3, #20]
 800a922:	2b01      	cmp	r3, #1
 800a924:	f040 8212 	bne.w	800ad4c <lv_draw_rect+0x4d0>
    bool aa = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800a928:	f7fe fba8 	bl	800907c <lv_refr_get_disp_refreshing>
 800a92c:	f002 fb9a 	bl	800d064 <lv_disp_get_antialiasing>
    lv_coord_t swidth = style->body.shadow.width;
 800a930:	9b02      	ldr	r3, [sp, #8]
    return area_p->y2 - area_p->y1 + 1;
 800a932:	f8ba 2006 	ldrh.w	r2, [sl, #6]
 800a936:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800a93a:	9304      	str	r3, [sp, #16]
 800a93c:	f8ba 3002 	ldrh.w	r3, [sl, #2]
    return area_p->x2 - area_p->x1 + 1;
 800a940:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    return area_p->y2 - area_p->y1 + 1;
 800a944:	3201      	adds	r2, #1
 800a946:	1ad2      	subs	r2, r2, r3
    return area_p->x2 - area_p->x1 + 1;
 800a948:	f8ba 3000 	ldrh.w	r3, [sl]
 800a94c:	3101      	adds	r1, #1
 800a94e:	1ac9      	subs	r1, r1, r3
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800a950:	9b02      	ldr	r3, [sp, #8]
 800a952:	b209      	sxth	r1, r1
    bool aa = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800a954:	4604      	mov	r4, r0
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800a956:	b212      	sxth	r2, r2
 800a958:	88d8      	ldrh	r0, [r3, #6]
 800a95a:	f7ff ff51 	bl	800a800 <lv_draw_cont_radius_corr>
    radius += aa;
 800a95e:	b2a4      	uxth	r4, r4
 800a960:	4420      	add	r0, r4
 800a962:	b283      	uxth	r3, r0
 800a964:	9305      	str	r3, [sp, #20]
    int16_t filter_width = 2 * swidth + 1;
 800a966:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    radius += aa;
 800a96a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
 800a96e:	9a04      	ldr	r2, [sp, #16]
    radius += aa;
 800a970:	9309      	str	r3, [sp, #36]	; 0x24
    int16_t filter_width = 2 * swidth + 1;
 800a972:	ea4f 0846 	mov.w	r8, r6, lsl #1
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
 800a976:	4413      	add	r3, r2
    int16_t filter_width = 2 * swidth + 1;
 800a978:	f108 0801 	add.w	r8, r8, #1
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
 800a97c:	1d18      	adds	r0, r3, #4
    int16_t filter_width = 2 * swidth + 1;
 800a97e:	fa0f f888 	sxth.w	r8, r8
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
 800a982:	f020 0003 	bic.w	r0, r0, #3
    uint32_t line_1d_blur_size = (filter_width + 3) & ~0x3;     /*Round to 4*/
 800a986:	f108 0703 	add.w	r7, r8, #3
    curve_x_size *= sizeof(lv_coord_t);
 800a98a:	ea4f 0940 	mov.w	r9, r0, lsl #1
    uint32_t line_1d_blur_size = (filter_width + 3) & ~0x3;     /*Round to 4*/
 800a98e:	f027 0703 	bic.w	r7, r7, #3
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size + line_2d_blur_size);
 800a992:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800a996:	4438      	add	r0, r7
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
 800a998:	930a      	str	r3, [sp, #40]	; 0x28
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size + line_2d_blur_size);
 800a99a:	f7ff f8e9 	bl	8009b70 <lv_draw_get_buf>
    uint32_t * line_1d_blur = (uint32_t *)&draw_buf[curve_x_size];
 800a99e:	4603      	mov	r3, r0
 800a9a0:	444b      	add	r3, r9
 800a9a2:	930b      	str	r3, [sp, #44]	; 0x2c
    lv_opa_t * line_2d_blur = (lv_opa_t *)&draw_buf[curve_x_size + line_1d_blur_size];
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	443b      	add	r3, r7
    memset(curve_x, 0, curve_x_size);
 800a9a8:	4629      	mov	r1, r5
 800a9aa:	464a      	mov	r2, r9
    lv_circ_init(&circ, &circ_tmp, radius);
 800a9ac:	f10d 0772 	add.w	r7, sp, #114	; 0x72
 800a9b0:	ad1d      	add	r5, sp, #116	; 0x74
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size + line_2d_blur_size);
 800a9b2:	9003      	str	r0, [sp, #12]
    lv_opa_t * line_2d_blur = (lv_opa_t *)&draw_buf[curve_x_size + line_1d_blur_size];
 800a9b4:	930c      	str	r3, [sp, #48]	; 0x30
    memset(curve_x, 0, curve_x_size);
 800a9b6:	f004 fcc6 	bl	800f346 <memset>
    lv_circ_init(&circ, &circ_tmp, radius);
 800a9ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9bc:	4639      	mov	r1, r7
 800a9be:	4628      	mov	r0, r5
 800a9c0:	f002 fd6d 	bl	800d49e <lv_circ_init>
    while(lv_circ_cont(&circ)) {
 800a9c4:	4628      	mov	r0, r5
 800a9c6:	f002 fd71 	bl	800d4ac <lv_circ_cont>
 800a9ca:	2800      	cmp	r0, #0
 800a9cc:	d15a      	bne.n	800aa84 <lv_draw_rect+0x208>
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 800a9ce:	9b08      	ldr	r3, [sp, #32]
 800a9d0:	2bff      	cmp	r3, #255	; 0xff
 800a9d2:	9b02      	ldr	r3, [sp, #8]
 800a9d4:	bf18      	it	ne
 800a9d6:	9a08      	ldrne	r2, [sp, #32]
 800a9d8:	7a1b      	ldrb	r3, [r3, #8]
 800a9da:	bf1c      	itt	ne
 800a9dc:	4353      	mulne	r3, r2
 800a9de:	f3c3 2307 	ubfxne	r3, r3, #8, #8
 800a9e2:	005b      	lsls	r3, r3, #1
 800a9e4:	ea4f 2208 	mov.w	r2, r8, lsl #8
 800a9e8:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 800a9ec:	4359      	muls	r1, r3
                             (filter_width * filter_width);
 800a9ee:	fb08 f508 	mul.w	r5, r8, r8
 800a9f2:	4353      	muls	r3, r2
 800a9f4:	2200      	movs	r2, #0
    for(line = 0; line < filter_width; line++) {
 800a9f6:	b210      	sxth	r0, r2
 800a9f8:	4580      	cmp	r8, r0
 800a9fa:	dc55      	bgt.n	800aaa8 <lv_draw_rect+0x22c>
    ofs_rb.x = coords->x2 - radius - aa;
 800a9fc:	9a05      	ldr	r2, [sp, #20]
 800a9fe:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 800aa02:	1a9b      	subs	r3, r3, r2
 800aa04:	1b1b      	subs	r3, r3, r4
 800aa06:	b29b      	uxth	r3, r3
 800aa08:	930e      	str	r3, [sp, #56]	; 0x38
 800aa0a:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
 800aa0e:	9314      	str	r3, [sp, #80]	; 0x50
    ofs_rb.y = coords->y2 - radius - aa;
 800aa10:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 800aa14:	1a9b      	subs	r3, r3, r2
 800aa16:	1b1b      	subs	r3, r3, r4
 800aa18:	b29b      	uxth	r3, r3
 800aa1a:	930f      	str	r3, [sp, #60]	; 0x3c
 800aa1c:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 800aa20:	9310      	str	r3, [sp, #64]	; 0x40
    ofs_rt.y = coords->y1 + radius + aa;
 800aa22:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 800aa26:	4423      	add	r3, r4
 800aa28:	4413      	add	r3, r2
 800aa2a:	b29b      	uxth	r3, r3
 800aa2c:	9311      	str	r3, [sp, #68]	; 0x44
 800aa2e:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
 800aa32:	9312      	str	r3, [sp, #72]	; 0x48
    ofs_lb.x = coords->x1 + radius + aa;
 800aa34:	f8ba 3000 	ldrh.w	r3, [sl]
 800aa38:	441c      	add	r4, r3
 800aa3a:	4414      	add	r4, r2
 800aa3c:	b2a3      	uxth	r3, r4
 800aa3e:	9313      	str	r3, [sp, #76]	; 0x4c
 800aa40:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 800aa44:	9315      	str	r3, [sp, #84]	; 0x54
            for(line_rel = -swidth; line_rel <= swidth; line_rel++) {
 800aa46:	4276      	negs	r6, r6
    ofs_lb.x = coords->x1 + radius + aa;
 800aa48:	2300      	movs	r3, #0
 800aa4a:	9307      	str	r3, [sp, #28]
            for(line_rel = -swidth; line_rel <= swidth; line_rel++) {
 800aa4c:	b233      	sxth	r3, r6
 800aa4e:	9318      	str	r3, [sp, #96]	; 0x60
 800aa50:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800aa54:	9306      	str	r3, [sp, #24]
    for(line = 0; line <= radius + swidth; line++) { /*Check all rows and make the 1D blur to 2D*/
 800aa56:	9a06      	ldr	r2, [sp, #24]
 800aa58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	f2c0 81fe 	blt.w	800ae5c <lv_draw_rect+0x5e0>
                    col_rel = curve_x[line + line_rel] - curve_x[line] - col;
 800aa60:	9b03      	ldr	r3, [sp, #12]
 800aa62:	eb03 0542 	add.w	r5, r3, r2, lsl #1
                if(col_rel < -swidth) { /*Outside of the blurred area. */
 800aa66:	9b04      	ldr	r3, [sp, #16]
                    col_rel = curve_x[line + line_rel] - curve_x[line] - col;
 800aa68:	2000      	movs	r0, #0
                if(col_rel < -swidth) { /*Outside of the blurred area. */
 800aa6a:	425c      	negs	r4, r3
        for(col = 0; col <= radius + swidth; col++) { /*Check all pixels in a 1D blur line (from the origo to last
 800aa6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa6e:	fa1f f980 	uxth.w	r9, r0
 800aa72:	454a      	cmp	r2, r9
 800aa74:	db3b      	blt.n	800aaee <lv_draw_rect+0x272>
            for(line_rel = -swidth; line_rel <= swidth; line_rel++) {
 800aa76:	9a18      	ldr	r2, [sp, #96]	; 0x60
            uint32_t px_opa_sum = 0;
 800aa78:	2100      	movs	r1, #0
            for(line_rel = -swidth; line_rel <= swidth; line_rel++) {
 800aa7a:	9b04      	ldr	r3, [sp, #16]
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	da1b      	bge.n	800aab8 <lv_draw_rect+0x23c>
                } else if(line + line_rel > radius) { /*Above the radius, here won't be more 1D blur*/
 800aa80:	2200      	movs	r2, #0
 800aa82:	e029      	b.n	800aad8 <lv_draw_rect+0x25c>
        curve_x[LV_CIRC_OCT1_Y(circ)] = LV_CIRC_OCT1_X(circ);
 800aa84:	f9bd 3076 	ldrsh.w	r3, [sp, #118]	; 0x76
 800aa88:	9903      	ldr	r1, [sp, #12]
 800aa8a:	f9bd 2074 	ldrsh.w	r2, [sp, #116]	; 0x74
 800aa8e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        curve_x[LV_CIRC_OCT2_Y(circ)] = LV_CIRC_OCT2_X(circ);
 800aa92:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	; 0x74
 800aa96:	f9bd 2076 	ldrsh.w	r2, [sp, #118]	; 0x76
 800aa9a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        lv_circ_next(&circ, &circ_tmp);
 800aa9e:	4628      	mov	r0, r5
 800aaa0:	4639      	mov	r1, r7
 800aaa2:	f002 fd0c 	bl	800d4be <lv_circ_next>
 800aaa6:	e78d      	b.n	800a9c4 <lv_draw_rect+0x148>
        line_1d_blur[line] = (uint32_t)((uint32_t)(filter_width - line) * (opa * 2) << SHADOW_OPA_EXTRA_PRECISION) /
 800aaa8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800aaaa:	fbb3 f0f5 	udiv	r0, r3, r5
 800aaae:	440b      	add	r3, r1
 800aab0:	f847 0022 	str.w	r0, [r7, r2, lsl #2]
 800aab4:	3201      	adds	r2, #1
 800aab6:	e79e      	b.n	800a9f6 <lv_draw_rect+0x17a>
                if(line + line_rel < 0) { /*Below the radius, here is the blur of the edge */
 800aab8:	9b06      	ldr	r3, [sp, #24]
 800aaba:	18d3      	adds	r3, r2, r3
 800aabc:	f140 80a9 	bpl.w	800ac12 <lv_draw_rect+0x396>
                    col_rel = radius - curve_x[line] - col;
 800aac0:	882b      	ldrh	r3, [r5, #0]
 800aac2:	9e05      	ldr	r6, [sp, #20]
 800aac4:	1af3      	subs	r3, r6, r3
                    col_rel = curve_x[line + line_rel] - curve_x[line] - col;
 800aac6:	eba3 0309 	sub.w	r3, r3, r9
 800aaca:	b21b      	sxth	r3, r3
                if(col_rel < -swidth) { /*Outside of the blurred area. */
 800aacc:	42a3      	cmp	r3, r4
 800aace:	f280 80aa 	bge.w	800ac26 <lv_draw_rect+0x3aa>
                    if(line_rel == -swidth)
 800aad2:	1b16      	subs	r6, r2, r4
 800aad4:	4272      	negs	r2, r6
 800aad6:	4172      	adcs	r2, r6
            line_2d_blur[col] = px_opa_sum >> SHADOW_OPA_EXTRA_PRECISION;
 800aad8:	b283      	uxth	r3, r0
 800aada:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800aadc:	0a09      	lsrs	r1, r1, #8
 800aade:	54f1      	strb	r1, [r6, r3]
 800aae0:	3001      	adds	r0, #1
            if(line_ready) {
 800aae2:	2a00      	cmp	r2, #0
 800aae4:	d0c2      	beq.n	800aa6c <lv_draw_rect+0x1f0>
                col++; /*To make this line to the last one ( drawing will go to '< col')*/
 800aae6:	f109 0301 	add.w	r3, r9, #1
 800aaea:	fa1f f983 	uxth.w	r9, r3
        point_rt.x = curve_x[line] + ofs_rt.x + 1;
 800aaee:	9b03      	ldr	r3, [sp, #12]
 800aaf0:	9a06      	ldr	r2, [sp, #24]
 800aaf2:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 800aaf6:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 800aafa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aafc:	1c5a      	adds	r2, r3, #1
 800aafe:	440a      	add	r2, r1
 800ab00:	b293      	uxth	r3, r2
 800ab02:	9316      	str	r3, [sp, #88]	; 0x58
 800ab04:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ab06:	1b1d      	subs	r5, r3, r4
 800ab08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ab0a:	441c      	add	r4, r3
        point_lt.x = ofs_lt.x - curve_x[line] - 1;
 800ab0c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ab0e:	3b01      	subs	r3, #1
 800ab10:	1a5b      	subs	r3, r3, r1
 800ab12:	b29b      	uxth	r3, r3
 800ab14:	9317      	str	r3, [sp, #92]	; 0x5c
 800ab16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab18:	1c5e      	adds	r6, r3, #1
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	b22d      	sxth	r5, r5
 800ab1e:	b224      	sxth	r4, r4
 800ab20:	930d      	str	r3, [sp, #52]	; 0x34
 800ab22:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 800ab26:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ab28:	eba2 0803 	sub.w	r8, r2, r3
 800ab2c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ab2e:	18d7      	adds	r7, r2, r3
        for(d = 1; d < col; d++) {
 800ab30:	3301      	adds	r3, #1
 800ab32:	b29b      	uxth	r3, r3
 800ab34:	4599      	cmp	r9, r3
 800ab36:	fa0f f888 	sxth.w	r8, r8
 800ab3a:	b23f      	sxth	r7, r7
 800ab3c:	f200 8082 	bhi.w	800ac44 <lv_draw_rect+0x3c8>
        if(line == 0) lv_draw_shadow_full_straight(coords, mask, style, line_2d_blur);
 800ab40:	9b06      	ldr	r3, [sp, #24]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d161      	bne.n	800ac0a <lv_draw_rect+0x38e>
    bool aa           = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800ab46:	f7fe fa99 	bl	800907c <lv_refr_get_disp_refreshing>
 800ab4a:	f002 fa8b 	bl	800d064 <lv_disp_get_antialiasing>
    lv_coord_t swidth = style->body.shadow.width;
 800ab4e:	9b02      	ldr	r3, [sp, #8]
    return area_p->y2 - area_p->y1 + 1;
 800ab50:	f8ba 2006 	ldrh.w	r2, [sl, #6]
 800ab54:	f9b3 8012 	ldrsh.w	r8, [r3, #18]
 800ab58:	f8ba 3002 	ldrh.w	r3, [sl, #2]
    return area_p->x2 - area_p->x1 + 1;
 800ab5c:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    return area_p->y2 - area_p->y1 + 1;
 800ab60:	3201      	adds	r2, #1
 800ab62:	1ad2      	subs	r2, r2, r3
    return area_p->x2 - area_p->x1 + 1;
 800ab64:	f8ba 3000 	ldrh.w	r3, [sl]
 800ab68:	3101      	adds	r1, #1
 800ab6a:	1ac9      	subs	r1, r1, r3
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800ab6c:	9b02      	ldr	r3, [sp, #8]
    bool aa           = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800ab6e:	4604      	mov	r4, r0
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800ab70:	b212      	sxth	r2, r2
 800ab72:	b209      	sxth	r1, r1
 800ab74:	88d8      	ldrh	r0, [r3, #6]
 800ab76:	f7ff fe43 	bl	800a800 <lv_draw_cont_radius_corr>
    right_area.x1 = coords->x2 + 1 - aa;
 800ab7a:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    right_area.y1 = coords->y1 + radius + aa;
 800ab7e:	f8ba 5002 	ldrh.w	r5, [sl, #2]
    radius += aa;
 800ab82:	b2a3      	uxth	r3, r4
    right_area.x1 = coords->x2 + 1 - aa;
 800ab84:	1c4a      	adds	r2, r1, #1
 800ab86:	1ad2      	subs	r2, r2, r3
 800ab88:	b212      	sxth	r2, r2
    radius += aa;
 800ab8a:	4418      	add	r0, r3
    left_area.x1 = coords->x1 - 1 + aa;
 800ab8c:	f8ba 4000 	ldrh.w	r4, [sl]
    right_area.x1 = coords->x2 + 1 - aa;
 800ab90:	f8ad 2080 	strh.w	r2, [sp, #128]	; 0x80
    right_area.x2 = right_area.x1;
 800ab94:	f8ad 2084 	strh.w	r2, [sp, #132]	; 0x84
    right_area.y2 = coords->y2 - radius - aa;
 800ab98:	f8ba 2006 	ldrh.w	r2, [sl, #6]
    radius += aa;
 800ab9c:	b280      	uxth	r0, r0
    right_area.y1 = coords->y1 + radius + aa;
 800ab9e:	eb03 0e05 	add.w	lr, r3, r5
    right_area.y2 = coords->y2 - radius - aa;
 800aba2:	1a16      	subs	r6, r2, r0
    left_area.x1 = coords->x1 - 1 + aa;
 800aba4:	1e67      	subs	r7, r4, #1
    top_area.y1 = coords->y1 - 1 + aa;
 800aba6:	3d01      	subs	r5, #1
    top_area.x1 = coords->x1 + radius + aa;
 800aba8:	441c      	add	r4, r3
    top_area.x2 = coords->x2 - radius - aa;
 800abaa:	1a09      	subs	r1, r1, r0
    bottom_area.y1 = coords->y2 + 1 - aa;
 800abac:	3201      	adds	r2, #1
    right_area.y2 = coords->y2 - radius - aa;
 800abae:	1af6      	subs	r6, r6, r3
    left_area.x1 = coords->x1 - 1 + aa;
 800abb0:	441f      	add	r7, r3
    top_area.y1 = coords->y1 - 1 + aa;
 800abb2:	441d      	add	r5, r3
    top_area.x2 = coords->x2 - radius - aa;
 800abb4:	1ac9      	subs	r1, r1, r3
    right_area.y1 = coords->y1 + radius + aa;
 800abb6:	4486      	add	lr, r0
    top_area.x1 = coords->x1 + radius + aa;
 800abb8:	4404      	add	r4, r0
    bottom_area.y1 = coords->y2 + 1 - aa;
 800abba:	1ad3      	subs	r3, r2, r3
    top_area.x1 = coords->x1 + radius + aa;
 800abbc:	b224      	sxth	r4, r4
    right_area.y1 = coords->y1 + radius + aa;
 800abbe:	fa0f fe8e 	sxth.w	lr, lr
    right_area.y2 = coords->y2 - radius - aa;
 800abc2:	b236      	sxth	r6, r6
    left_area.x1 = coords->x1 - 1 + aa;
 800abc4:	b23f      	sxth	r7, r7
    top_area.y1 = coords->y1 - 1 + aa;
 800abc6:	b22d      	sxth	r5, r5
    top_area.x2 = coords->x2 - radius - aa;
 800abc8:	b209      	sxth	r1, r1
    bottom_area.y1 = coords->y2 + 1 - aa;
 800abca:	b21b      	sxth	r3, r3
    top_area.x1 = coords->x1 + radius + aa;
 800abcc:	f8ad 4090 	strh.w	r4, [sp, #144]	; 0x90
    bottom_area.x1 = coords->x1 + radius + aa;
 800abd0:	f8ad 4098 	strh.w	r4, [sp, #152]	; 0x98
    right_area.y1 = coords->y1 + radius + aa;
 800abd4:	f8ad e082 	strh.w	lr, [sp, #130]	; 0x82
    right_area.y2 = coords->y2 - radius - aa;
 800abd8:	f8ad 6086 	strh.w	r6, [sp, #134]	; 0x86
    left_area.x1 = coords->x1 - 1 + aa;
 800abdc:	f8ad 7088 	strh.w	r7, [sp, #136]	; 0x88
    left_area.y1 = coords->y1 + radius + aa;
 800abe0:	f8ad e08a 	strh.w	lr, [sp, #138]	; 0x8a
    left_area.x2 = left_area.x1;
 800abe4:	f8ad 708c 	strh.w	r7, [sp, #140]	; 0x8c
    left_area.y2 = coords->y2 - radius - aa;
 800abe8:	f8ad 608e 	strh.w	r6, [sp, #142]	; 0x8e
    top_area.y1 = coords->y1 - 1 + aa;
 800abec:	f8ad 5092 	strh.w	r5, [sp, #146]	; 0x92
    top_area.x2 = coords->x2 - radius - aa;
 800abf0:	f8ad 1094 	strh.w	r1, [sp, #148]	; 0x94
    top_area.y2 = top_area.y1;
 800abf4:	f8ad 5096 	strh.w	r5, [sp, #150]	; 0x96
    bottom_area.y1 = coords->y2 + 1 - aa;
 800abf8:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
    bottom_area.x2 = coords->x2 - radius - aa;
 800abfc:	f8ad 109c 	strh.w	r1, [sp, #156]	; 0x9c
    bottom_area.y2 = bottom_area.y1;
 800ac00:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
    for(d = 1 /*+ LV_ANTIALIAS*/; d <= swidth /* - LV_ANTIALIAS*/; d++) {
 800ac04:	2401      	movs	r4, #1
 800ac06:	45a0      	cmp	r8, r4
 800ac08:	da57      	bge.n	800acba <lv_draw_rect+0x43e>
 800ac0a:	9b07      	ldr	r3, [sp, #28]
 800ac0c:	3301      	adds	r3, #1
 800ac0e:	9307      	str	r3, [sp, #28]
 800ac10:	e71e      	b.n	800aa50 <lv_draw_rect+0x1d4>
                } else if(line + line_rel > radius) { /*Above the radius, here won't be more 1D blur*/
 800ac12:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800ac14:	429e      	cmp	r6, r3
 800ac16:	f6ff af33 	blt.w	800aa80 <lv_draw_rect+0x204>
                    col_rel = curve_x[line + line_rel] - curve_x[line] - col;
 800ac1a:	9e03      	ldr	r6, [sp, #12]
 800ac1c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 800ac20:	882e      	ldrh	r6, [r5, #0]
 800ac22:	1b9b      	subs	r3, r3, r6
 800ac24:	e74f      	b.n	800aac6 <lv_draw_rect+0x24a>
                } else if(col_rel > swidth)
 800ac26:	9e04      	ldr	r6, [sp, #16]
 800ac28:	429e      	cmp	r6, r3
                    px_opa_sum += line_1d_blur[swidth - col_rel]; /*On the 1D blur (+ swidth to align to the center)*/
 800ac2a:	bfa9      	itett	ge
 800ac2c:	9e04      	ldrge	r6, [sp, #16]
                    px_opa_sum += line_1d_blur[0]; /*Inside the not blurred area*/
 800ac2e:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
                    px_opa_sum += line_1d_blur[swidth - col_rel]; /*On the 1D blur (+ swidth to align to the center)*/
 800ac30:	1af3      	subge	r3, r6, r3
 800ac32:	9e0b      	ldrge	r6, [sp, #44]	; 0x2c
                    px_opa_sum += line_1d_blur[0]; /*Inside the not blurred area*/
 800ac34:	bfb4      	ite	lt
 800ac36:	681b      	ldrlt	r3, [r3, #0]
                    px_opa_sum += line_1d_blur[swidth - col_rel]; /*On the 1D blur (+ swidth to align to the center)*/
 800ac38:	f856 3023 	ldrge.w	r3, [r6, r3, lsl #2]
 800ac3c:	3201      	adds	r2, #1
 800ac3e:	4419      	add	r1, r3
 800ac40:	b212      	sxth	r2, r2
 800ac42:	e71a      	b.n	800aa7a <lv_draw_rect+0x1fe>
            if(point_lt.x < ofs_lt.x && point_lt.y < ofs_lt.y) {
 800ac44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac46:	4543      	cmp	r3, r8
 800ac48:	dd17      	ble.n	800ac7a <lv_draw_rect+0x3fe>
 800ac4a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ac4c:	42ab      	cmp	r3, r5
 800ac4e:	dd08      	ble.n	800ac62 <lv_draw_rect+0x3e6>
                lv_draw_px(point_lt.x, point_lt.y, mask, style->body.shadow.color, line_2d_blur[d]);
 800ac50:	7833      	ldrb	r3, [r6, #0]
 800ac52:	9300      	str	r3, [sp, #0]
 800ac54:	9b02      	ldr	r3, [sp, #8]
 800ac56:	465a      	mov	r2, fp
 800ac58:	8a1b      	ldrh	r3, [r3, #16]
 800ac5a:	4629      	mov	r1, r5
 800ac5c:	4640      	mov	r0, r8
 800ac5e:	f7ff f88f 	bl	8009d80 <lv_draw_px>
            if(point_lb.x < ofs_lb.x && point_lb.y > ofs_lb.y) {
 800ac62:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ac64:	42a3      	cmp	r3, r4
 800ac66:	da08      	bge.n	800ac7a <lv_draw_rect+0x3fe>
                lv_draw_px(point_lb.x, point_lb.y, mask, style->body.shadow.color, line_2d_blur[d]);
 800ac68:	7833      	ldrb	r3, [r6, #0]
 800ac6a:	9300      	str	r3, [sp, #0]
 800ac6c:	9b02      	ldr	r3, [sp, #8]
 800ac6e:	465a      	mov	r2, fp
 800ac70:	8a1b      	ldrh	r3, [r3, #16]
 800ac72:	4621      	mov	r1, r4
 800ac74:	4640      	mov	r0, r8
 800ac76:	f7ff f883 	bl	8009d80 <lv_draw_px>
            if(point_rt.x > ofs_rt.x && point_rt.y < ofs_rt.y) {
 800ac7a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ac7c:	42bb      	cmp	r3, r7
 800ac7e:	da17      	bge.n	800acb0 <lv_draw_rect+0x434>
 800ac80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ac82:	42ab      	cmp	r3, r5
 800ac84:	dd08      	ble.n	800ac98 <lv_draw_rect+0x41c>
                lv_draw_px(point_rt.x, point_rt.y, mask, style->body.shadow.color, line_2d_blur[d]);
 800ac86:	7833      	ldrb	r3, [r6, #0]
 800ac88:	9300      	str	r3, [sp, #0]
 800ac8a:	9b02      	ldr	r3, [sp, #8]
 800ac8c:	465a      	mov	r2, fp
 800ac8e:	8a1b      	ldrh	r3, [r3, #16]
 800ac90:	4629      	mov	r1, r5
 800ac92:	4638      	mov	r0, r7
 800ac94:	f7ff f874 	bl	8009d80 <lv_draw_px>
            if(point_rb.x > ofs_rb.x && point_rb.y > ofs_rb.y) {
 800ac98:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ac9a:	42a3      	cmp	r3, r4
 800ac9c:	da08      	bge.n	800acb0 <lv_draw_rect+0x434>
                lv_draw_px(point_rb.x, point_rb.y, mask, style->body.shadow.color, line_2d_blur[d]);
 800ac9e:	7833      	ldrb	r3, [r6, #0]
 800aca0:	9300      	str	r3, [sp, #0]
 800aca2:	9b02      	ldr	r3, [sp, #8]
 800aca4:	465a      	mov	r2, fp
 800aca6:	8a1b      	ldrh	r3, [r3, #16]
 800aca8:	4621      	mov	r1, r4
 800acaa:	4638      	mov	r0, r7
 800acac:	f7ff f868 	bl	8009d80 <lv_draw_px>
 800acb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800acb2:	3301      	adds	r3, #1
 800acb4:	930d      	str	r3, [sp, #52]	; 0x34
 800acb6:	3601      	adds	r6, #1
 800acb8:	e733      	b.n	800ab22 <lv_draw_rect+0x2a6>
        opa_act = map[d];
 800acba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        lv_draw_fill(&right_area, mask, style->body.shadow.color, opa_act);
 800acbc:	9a02      	ldr	r2, [sp, #8]
        opa_act = map[d];
 800acbe:	5d1d      	ldrb	r5, [r3, r4]
        lv_draw_fill(&right_area, mask, style->body.shadow.color, opa_act);
 800acc0:	8a12      	ldrh	r2, [r2, #16]
 800acc2:	462b      	mov	r3, r5
 800acc4:	4659      	mov	r1, fp
 800acc6:	a820      	add	r0, sp, #128	; 0x80
 800acc8:	f7ff f8aa 	bl	8009e20 <lv_draw_fill>
        right_area.x1++;
 800accc:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
        lv_draw_fill(&left_area, mask, style->body.shadow.color, opa_act);
 800acd0:	9a02      	ldr	r2, [sp, #8]
        right_area.x1++;
 800acd2:	3301      	adds	r3, #1
 800acd4:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
        right_area.x2++;
 800acd8:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
        lv_draw_fill(&left_area, mask, style->body.shadow.color, opa_act);
 800acdc:	8a12      	ldrh	r2, [r2, #16]
        right_area.x2++;
 800acde:	3301      	adds	r3, #1
 800ace0:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
        lv_draw_fill(&left_area, mask, style->body.shadow.color, opa_act);
 800ace4:	4659      	mov	r1, fp
 800ace6:	462b      	mov	r3, r5
 800ace8:	a822      	add	r0, sp, #136	; 0x88
 800acea:	f7ff f899 	bl	8009e20 <lv_draw_fill>
        left_area.x1--;
 800acee:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
        lv_draw_fill(&top_area, mask, style->body.shadow.color, opa_act);
 800acf2:	9a02      	ldr	r2, [sp, #8]
        left_area.x1--;
 800acf4:	3b01      	subs	r3, #1
 800acf6:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
        left_area.x2--;
 800acfa:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
        lv_draw_fill(&top_area, mask, style->body.shadow.color, opa_act);
 800acfe:	8a12      	ldrh	r2, [r2, #16]
        left_area.x2--;
 800ad00:	3b01      	subs	r3, #1
 800ad02:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
        lv_draw_fill(&top_area, mask, style->body.shadow.color, opa_act);
 800ad06:	4659      	mov	r1, fp
 800ad08:	462b      	mov	r3, r5
 800ad0a:	a824      	add	r0, sp, #144	; 0x90
 800ad0c:	f7ff f888 	bl	8009e20 <lv_draw_fill>
        top_area.y1--;
 800ad10:	f8bd 3092 	ldrh.w	r3, [sp, #146]	; 0x92
        lv_draw_fill(&bottom_area, mask, style->body.shadow.color, opa_act);
 800ad14:	9a02      	ldr	r2, [sp, #8]
        top_area.y1--;
 800ad16:	3b01      	subs	r3, #1
 800ad18:	f8ad 3092 	strh.w	r3, [sp, #146]	; 0x92
        top_area.y2--;
 800ad1c:	f8bd 3096 	ldrh.w	r3, [sp, #150]	; 0x96
        lv_draw_fill(&bottom_area, mask, style->body.shadow.color, opa_act);
 800ad20:	8a12      	ldrh	r2, [r2, #16]
        top_area.y2--;
 800ad22:	3b01      	subs	r3, #1
 800ad24:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
        lv_draw_fill(&bottom_area, mask, style->body.shadow.color, opa_act);
 800ad28:	4659      	mov	r1, fp
 800ad2a:	462b      	mov	r3, r5
 800ad2c:	a826      	add	r0, sp, #152	; 0x98
 800ad2e:	f7ff f877 	bl	8009e20 <lv_draw_fill>
        bottom_area.y1++;
 800ad32:	f8bd 309a 	ldrh.w	r3, [sp, #154]	; 0x9a
 800ad36:	3301      	adds	r3, #1
 800ad38:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
        bottom_area.y2++;
 800ad3c:	f8bd 309e 	ldrh.w	r3, [sp, #158]	; 0x9e
 800ad40:	3401      	adds	r4, #1
 800ad42:	3301      	adds	r3, #1
 800ad44:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
 800ad48:	b224      	sxth	r4, r4
 800ad4a:	e75c      	b.n	800ac06 <lv_draw_rect+0x38a>
    } else if(style->body.shadow.type == LV_SHADOW_BOTTOM) {
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	f040 8085 	bne.w	800ae5c <lv_draw_rect+0x5e0>
    bool aa           = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800ad52:	f7fe f993 	bl	800907c <lv_refr_get_disp_refreshing>
 800ad56:	f002 f985 	bl	800d064 <lv_disp_get_antialiasing>
    lv_coord_t swidth = style->body.shadow.width;
 800ad5a:	9b02      	ldr	r3, [sp, #8]
    return area_p->y2 - area_p->y1 + 1;
 800ad5c:	f8ba 2006 	ldrh.w	r2, [sl, #6]
 800ad60:	f9b3 4012 	ldrsh.w	r4, [r3, #18]
 800ad64:	f8ba 3002 	ldrh.w	r3, [sl, #2]
    return area_p->x2 - area_p->x1 + 1;
 800ad68:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    return area_p->y2 - area_p->y1 + 1;
 800ad6c:	3201      	adds	r2, #1
 800ad6e:	1ad2      	subs	r2, r2, r3
    return area_p->x2 - area_p->x1 + 1;
 800ad70:	f8ba 3000 	ldrh.w	r3, [sl]
 800ad74:	3101      	adds	r1, #1
 800ad76:	1ac9      	subs	r1, r1, r3
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800ad78:	9b02      	ldr	r3, [sp, #8]
 800ad7a:	b212      	sxth	r2, r2
 800ad7c:	b209      	sxth	r1, r1
    bool aa           = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800ad7e:	4680      	mov	r8, r0
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800ad80:	88d8      	ldrh	r0, [r3, #6]
 800ad82:	f7ff fd3d 	bl	800a800 <lv_draw_cont_radius_corr>
    radius += aa * SHADOW_BOTTOM_AA_EXTRA_RADIUS;
 800ad86:	fa1f f888 	uxth.w	r8, r8
 800ad8a:	eb08 0548 	add.w	r5, r8, r8, lsl #1
 800ad8e:	4405      	add	r5, r0
 800ad90:	b2ad      	uxth	r5, r5
 800ad92:	b22b      	sxth	r3, r5
    swidth += aa;
 800ad94:	eb08 0004 	add.w	r0, r8, r4
 800ad98:	b280      	uxth	r0, r0
    uint32_t curve_x_size = ((radius + 1) + 3) & ~0x3; /*Round to 4*/
 800ad9a:	1d1c      	adds	r4, r3, #4
    swidth += aa;
 800ad9c:	b206      	sxth	r6, r0
    uint32_t curve_x_size = ((radius + 1) + 3) & ~0x3; /*Round to 4*/
 800ad9e:	f024 0403 	bic.w	r4, r4, #3
    lv_opa_t line_1d_blur_size = (swidth + 3) & ~0x3;     /*Round to 4*/
 800ada2:	3003      	adds	r0, #3
    curve_x_size *= sizeof(lv_coord_t);
 800ada4:	0064      	lsls	r4, r4, #1
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size);
 800ada6:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 800adaa:	4420      	add	r0, r4
    radius += aa * SHADOW_BOTTOM_AA_EXTRA_RADIUS;
 800adac:	9303      	str	r3, [sp, #12]
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size);
 800adae:	f7fe fedf 	bl	8009b70 <lv_draw_get_buf>
    lv_circ_init(&circ, &circ_tmp, radius);
 800adb2:	f10d 0990 	add.w	r9, sp, #144	; 0x90
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size);
 800adb6:	4607      	mov	r7, r0
    lv_opa_t * line_1d_blur = (lv_opa_t *)&draw_buf[curve_x_size];
 800adb8:	4404      	add	r4, r0
    lv_circ_init(&circ, &circ_tmp, radius);
 800adba:	9a03      	ldr	r2, [sp, #12]
 800adbc:	a922      	add	r1, sp, #136	; 0x88
 800adbe:	4648      	mov	r0, r9
 800adc0:	f002 fb6d 	bl	800d49e <lv_circ_init>
    while(lv_circ_cont(&circ)) {
 800adc4:	4648      	mov	r0, r9
 800adc6:	f002 fb71 	bl	800d4ac <lv_circ_cont>
 800adca:	2800      	cmp	r0, #0
 800adcc:	f040 8404 	bne.w	800b5d8 <lv_draw_rect+0xd5c>
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 800add0:	9b08      	ldr	r3, [sp, #32]
 800add2:	2bff      	cmp	r3, #255	; 0xff
 800add4:	9b02      	ldr	r3, [sp, #8]
 800add6:	bf18      	it	ne
 800add8:	9a08      	ldrne	r2, [sp, #32]
 800adda:	7a1b      	ldrb	r3, [r3, #8]
 800addc:	bf1c      	itt	ne
 800adde:	4353      	mulne	r3, r2
 800ade0:	f3c3 2307 	ubfxne	r3, r3, #8, #8
 800ade4:	fb13 f006 	smulbb	r0, r3, r6
    ofs_lb.x = coords->x1 + radius + aa;
 800ade8:	4621      	mov	r1, r4
    for(col = 0; col < swidth; col++) {
 800adea:	1b0a      	subs	r2, r1, r4
 800adec:	b212      	sxth	r2, r2
 800adee:	4296      	cmp	r6, r2
 800adf0:	f300 8404 	bgt.w	800b5fc <lv_draw_rect+0xd80>
    ofs_l.x = coords->x1 + radius;
 800adf4:	f8ba 3000 	ldrh.w	r3, [sl]
    ofs_r.x = coords->x2 - radius;
 800adf8:	f8ba 0004 	ldrh.w	r0, [sl, #4]
    ofs_l.x = coords->x1 + radius;
 800adfc:	442b      	add	r3, r5
 800adfe:	b29b      	uxth	r3, r3
 800ae00:	9304      	str	r3, [sp, #16]
 800ae02:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 800ae06:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae08:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 800ae0c:	3301      	adds	r3, #1
 800ae0e:	eba3 0808 	sub.w	r8, r3, r8
 800ae12:	fa1f f388 	uxth.w	r3, r8
 800ae16:	9305      	str	r3, [sp, #20]
    ofs_l.y = coords->y2 - radius + 1 - aa;
 800ae18:	1b5b      	subs	r3, r3, r5
 800ae1a:	b29b      	uxth	r3, r3
    ofs_r.x = coords->x2 - radius;
 800ae1c:	1b45      	subs	r5, r0, r5
    ofs_l.y = coords->y2 - radius + 1 - aa;
 800ae1e:	930c      	str	r3, [sp, #48]	; 0x30
    ofs_r.x = coords->x2 - radius;
 800ae20:	b2ab      	uxth	r3, r5
 800ae22:	9306      	str	r3, [sp, #24]
 800ae24:	f04f 0800 	mov.w	r8, #0
    for(col = 0; col <= radius; col++) {
 800ae28:	9a03      	ldr	r2, [sp, #12]
 800ae2a:	fa0f f388 	sxth.w	r3, r8
 800ae2e:	429a      	cmp	r2, r3
 800ae30:	f280 83ec 	bge.w	800b60c <lv_draw_rect+0xd90>
    area_mid.x1 = ofs_l.x + 1;
 800ae34:	9b04      	ldr	r3, [sp, #16]
    area_mid.y1 = ofs_l.y + radius;
 800ae36:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 800ae3a:	f8ad 809a 	strh.w	r8, [sp, #154]	; 0x9a
    area_mid.x1 = ofs_l.x + 1;
 800ae3e:	3301      	adds	r3, #1
 800ae40:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
    area_mid.x2 = ofs_r.x - 1;
 800ae44:	9b06      	ldr	r3, [sp, #24]
    area_mid.y2 = area_mid.y1;
 800ae46:	f8ad 809e 	strh.w	r8, [sp, #158]	; 0x9e
    area_mid.x2 = ofs_r.x - 1;
 800ae4a:	1e5d      	subs	r5, r3, #1
 800ae4c:	f8ad 509c 	strh.w	r5, [sp, #156]	; 0x9c
    area_mid.y2 = area_mid.y1;
 800ae50:	2300      	movs	r3, #0
 800ae52:	1c5d      	adds	r5, r3, #1
    for(d = 0; d < swidth; d++) {
 800ae54:	b29b      	uxth	r3, r3
 800ae56:	42b3      	cmp	r3, r6
 800ae58:	f2c0 8420 	blt.w	800b69c <lv_draw_rect+0xe20>
    if(lv_area_is_on(coords, mask) == false) return;
 800ae5c:	4659      	mov	r1, fp
 800ae5e:	4650      	mov	r0, sl
 800ae60:	f002 fae3 	bl	800d42a <lv_area_is_on>
 800ae64:	2800      	cmp	r0, #0
 800ae66:	f000 83b4 	beq.w	800b5d2 <lv_draw_rect+0xd56>
    if(style->body.opa > LV_OPA_MIN) {
 800ae6a:	9b02      	ldr	r3, [sp, #8]
 800ae6c:	7a1b      	ldrb	r3, [r3, #8]
 800ae6e:	2b10      	cmp	r3, #16
 800ae70:	f240 81e9 	bls.w	800b246 <lv_draw_rect+0x9ca>
    uint16_t radius = style->body.radius;
 800ae74:	9b02      	ldr	r3, [sp, #8]
 800ae76:	88dd      	ldrh	r5, [r3, #6]
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800ae78:	f7fe f900 	bl	800907c <lv_refr_get_disp_refreshing>
 800ae7c:	f002 f8f2 	bl	800d064 <lv_disp_get_antialiasing>
    lv_color_t mcolor = style->body.main_color;
 800ae80:	9b02      	ldr	r3, [sp, #8]
    return area_p->y2 - area_p->y1 + 1;
 800ae82:	f8ba 6006 	ldrh.w	r6, [sl, #6]
 800ae86:	f8b3 8002 	ldrh.w	r8, [r3, #2]
    lv_color_t gcolor = style->body.grad_color;
 800ae8a:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 800ae8e:	f8ba 3002 	ldrh.w	r3, [sl, #2]
    return area_p->x2 - area_p->x1 + 1;
 800ae92:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    return area_p->y2 - area_p->y1 + 1;
 800ae96:	3601      	adds	r6, #1
 800ae98:	1af6      	subs	r6, r6, r3
    return area_p->x2 - area_p->x1 + 1;
 800ae9a:	f8ba 3000 	ldrh.w	r3, [sl]
 800ae9e:	3101      	adds	r1, #1
 800aea0:	1ac9      	subs	r1, r1, r3
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 800aea2:	9b08      	ldr	r3, [sp, #32]
 800aea4:	2bff      	cmp	r3, #255	; 0xff
 800aea6:	9b02      	ldr	r3, [sp, #8]
 800aea8:	7a1f      	ldrb	r7, [r3, #8]
 800aeaa:	bf18      	it	ne
 800aeac:	9b08      	ldrne	r3, [sp, #32]
    return area_p->y2 - area_p->y1 + 1;
 800aeae:	b236      	sxth	r6, r6
 800aeb0:	bf18      	it	ne
 800aeb2:	435f      	mulne	r7, r3
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800aeb4:	4604      	mov	r4, r0
    return area_p->x2 - area_p->x1 + 1;
 800aeb6:	b209      	sxth	r1, r1
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800aeb8:	4632      	mov	r2, r6
 800aeba:	4628      	mov	r0, r5
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 800aebc:	bf18      	it	ne
 800aebe:	f3c7 2707 	ubfxne	r7, r7, #8, #8
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800aec2:	f7ff fc9d 	bl	800a800 <lv_draw_cont_radius_corr>
    if(radius > height / 2) return;
 800aec6:	2302      	movs	r3, #2
 800aec8:	fb96 f3f3 	sdiv	r3, r6, r3
 800aecc:	4298      	cmp	r0, r3
 800aece:	dc29      	bgt.n	800af24 <lv_draw_rect+0x6a8>
    work_area.x1 = coords->x1;
 800aed0:	f8ba 3000 	ldrh.w	r3, [sl]
 800aed4:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
    work_area.x2 = coords->x2;
 800aed8:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 800aedc:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
 800aee0:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 800aee4:	f8ba 5006 	ldrh.w	r5, [sl, #6]
        work_area.y1 = coords->y1 + radius;
 800aee8:	4403      	add	r3, r0
    if(mcolor.full == gcolor.full) {
 800aeea:	45c8      	cmp	r8, r9
        work_area.y1 = coords->y1 + radius;
 800aeec:	b29b      	uxth	r3, r3
    if(mcolor.full == gcolor.full) {
 800aeee:	f040 83ee 	bne.w	800b6ce <lv_draw_rect+0xe52>
        if(style->body.radius != 0) {
 800aef2:	9a02      	ldr	r2, [sp, #8]
        work_area.y1 = coords->y1 + radius;
 800aef4:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
        work_area.y2 = coords->y2 - radius;
 800aef8:	1a2d      	subs	r5, r5, r0
        if(style->body.radius != 0) {
 800aefa:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
        work_area.y2 = coords->y2 - radius;
 800aefe:	b2ad      	uxth	r5, r5
 800af00:	f8ad 509e 	strh.w	r5, [sp, #158]	; 0x9e
        if(style->body.radius != 0) {
 800af04:	b142      	cbz	r2, 800af18 <lv_draw_rect+0x69c>
            if(aa) {
 800af06:	2c00      	cmp	r4, #0
 800af08:	f000 83dc 	beq.w	800b6c4 <lv_draw_rect+0xe48>
                work_area.y1 += 2;
 800af0c:	3302      	adds	r3, #2
 800af0e:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
                work_area.y2 -= 2;
 800af12:	3d02      	subs	r5, #2
                work_area.y2 -= 1;
 800af14:	f8ad 509e 	strh.w	r5, [sp, #158]	; 0x9e
        lv_draw_fill(&work_area, mask, mcolor, opa);
 800af18:	463b      	mov	r3, r7
 800af1a:	4642      	mov	r2, r8
 800af1c:	4659      	mov	r1, fp
 800af1e:	a826      	add	r0, sp, #152	; 0x98
 800af20:	f7fe ff7e 	bl	8009e20 <lv_draw_fill>
        if(style->body.radius != 0) {
 800af24:	9b02      	ldr	r3, [sp, #8]
 800af26:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 800af2a:	2c00      	cmp	r4, #0
 800af2c:	f000 818b 	beq.w	800b246 <lv_draw_rect+0x9ca>
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800af30:	f7fe f8a4 	bl	800907c <lv_refr_get_disp_refreshing>
 800af34:	f002 f896 	bl	800d064 <lv_disp_get_antialiasing>
    lv_color_t mcolor = style->body.main_color;
 800af38:	9b02      	ldr	r3, [sp, #8]
    return area_p->y2 - area_p->y1 + 1;
 800af3a:	f8ba 2002 	ldrh.w	r2, [sl, #2]
 800af3e:	885b      	ldrh	r3, [r3, #2]
 800af40:	9303      	str	r3, [sp, #12]
    lv_color_t gcolor = style->body.grad_color;
 800af42:	9b02      	ldr	r3, [sp, #8]
    return area_p->x2 - area_p->x1 + 1;
 800af44:	f8ba 1004 	ldrh.w	r1, [sl, #4]
 800af48:	f8b3 9004 	ldrh.w	r9, [r3, #4]
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 800af4c:	9b08      	ldr	r3, [sp, #32]
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800af4e:	9014      	str	r0, [sp, #80]	; 0x50
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 800af50:	2bff      	cmp	r3, #255	; 0xff
 800af52:	9b02      	ldr	r3, [sp, #8]
 800af54:	7a1e      	ldrb	r6, [r3, #8]
 800af56:	bf17      	itett	ne
 800af58:	9b08      	ldrne	r3, [sp, #32]
 800af5a:	9604      	streq	r6, [sp, #16]
 800af5c:	435e      	mulne	r6, r3
 800af5e:	f3c6 2307 	ubfxne	r3, r6, #8, #8
 800af62:	bf18      	it	ne
 800af64:	9304      	strne	r3, [sp, #16]
    return area_p->y2 - area_p->y1 + 1;
 800af66:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 800af6a:	3301      	adds	r3, #1
 800af6c:	1a9b      	subs	r3, r3, r2
 800af6e:	b21b      	sxth	r3, r3
 800af70:	9305      	str	r3, [sp, #20]
    return area_p->x2 - area_p->x1 + 1;
 800af72:	f8ba 3000 	ldrh.w	r3, [sl]
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800af76:	9a05      	ldr	r2, [sp, #20]
 800af78:	3101      	adds	r1, #1
 800af7a:	1ac9      	subs	r1, r1, r3
    uint16_t radius = style->body.radius;
 800af7c:	b2a4      	uxth	r4, r4
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800af7e:	b209      	sxth	r1, r1
 800af80:	4620      	mov	r0, r4
 800af82:	f7ff fc3d 	bl	800a800 <lv_draw_cont_radius_corr>
    lt_origo.x = coords->x1 + radius + aa;
 800af86:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 800af8a:	f8ba 7000 	ldrh.w	r7, [sl]
    lt_origo.y = coords->y1 + radius + aa;
 800af8e:	f8ba 4002 	ldrh.w	r4, [sl, #2]
    lb_origo.y = coords->y2 - radius - aa;
 800af92:	f8ba 8006 	ldrh.w	r8, [sl, #6]
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800af96:	9009      	str	r0, [sp, #36]	; 0x24
    lt_origo.x = coords->x1 + radius + aa;
 800af98:	442f      	add	r7, r5
 800af9a:	4407      	add	r7, r0
    lt_origo.y = coords->y1 + radius + aa;
 800af9c:	442c      	add	r4, r5
 800af9e:	4404      	add	r4, r0
    lt_origo.x = coords->x1 + radius + aa;
 800afa0:	b2bb      	uxth	r3, r7
 800afa2:	9306      	str	r3, [sp, #24]
    lt_origo.y = coords->y1 + radius + aa;
 800afa4:	b2a3      	uxth	r3, r4
 800afa6:	930a      	str	r3, [sp, #40]	; 0x28
    lb_origo.y = coords->y2 - radius - aa;
 800afa8:	eba8 0800 	sub.w	r8, r8, r0
    lt_origo.y = coords->y1 + radius + aa;
 800afac:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 800afb0:	9315      	str	r3, [sp, #84]	; 0x54
    lb_origo.y = coords->y2 - radius - aa;
 800afb2:	eba8 0805 	sub.w	r8, r8, r5
 800afb6:	fa1f f388 	uxth.w	r3, r8
 800afba:	930b      	str	r3, [sp, #44]	; 0x2c
 800afbc:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 800afc0:	9316      	str	r3, [sp, #88]	; 0x58
    rt_origo.x = coords->x2 - radius - aa;
 800afc2:	f8ba 3004 	ldrh.w	r3, [sl, #4]
    lv_circ_init(&cir, &cir_tmp, radius);
 800afc6:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
    rt_origo.x = coords->x2 - radius - aa;
 800afca:	1a1b      	subs	r3, r3, r0
    lv_circ_init(&cir, &cir_tmp, radius);
 800afcc:	ac1e      	add	r4, sp, #120	; 0x78
    rt_origo.x = coords->x2 - radius - aa;
 800afce:	1b5d      	subs	r5, r3, r5
 800afd0:	b2ab      	uxth	r3, r5
    lv_circ_init(&cir, &cir_tmp, radius);
 800afd2:	4642      	mov	r2, r8
 800afd4:	a91d      	add	r1, sp, #116	; 0x74
 800afd6:	4620      	mov	r0, r4
    rt_origo.x = coords->x2 - radius - aa;
 800afd8:	9307      	str	r3, [sp, #28]
    lv_circ_init(&cir, &cir_tmp, radius);
 800afda:	f002 fa60 	bl	800d49e <lv_circ_init>
    lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 800afde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afe0:	f8bd 207a 	ldrh.w	r2, [sp, #122]	; 0x7a
 800afe4:	f8bd 1078 	ldrh.w	r1, [sp, #120]	; 0x78
 800afe8:	9806      	ldr	r0, [sp, #24]
 800afea:	441a      	add	r2, r3
                rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
 800afec:	9b07      	ldr	r3, [sp, #28]
    lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 800afee:	b212      	sxth	r2, r2
                rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
 800aff0:	440b      	add	r3, r1
    lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 800aff2:	1a41      	subs	r1, r0, r1
 800aff4:	9200      	str	r2, [sp, #0]
 800aff6:	b21b      	sxth	r3, r3
 800aff8:	b209      	sxth	r1, r1
 800affa:	a824      	add	r0, sp, #144	; 0x90
 800affc:	f002 f9b4 	bl	800d368 <lv_area_set>
    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 800b000:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b002:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
 800b006:	f8bd 107a 	ldrh.w	r1, [sp, #122]	; 0x7a
 800b00a:	9806      	ldr	r0, [sp, #24]
 800b00c:	441a      	add	r2, r3
                rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
 800b00e:	9b07      	ldr	r3, [sp, #28]
    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 800b010:	b212      	sxth	r2, r2
                rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
 800b012:	440b      	add	r3, r1
    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 800b014:	1a41      	subs	r1, r0, r1
 800b016:	9200      	str	r2, [sp, #0]
 800b018:	b21b      	sxth	r3, r3
 800b01a:	b209      	sxth	r1, r1
 800b01c:	a826      	add	r0, sp, #152	; 0x98
 800b01e:	f002 f9a3 	bl	800d368 <lv_area_set>
    lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800b022:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b024:	f8bd 207a 	ldrh.w	r2, [sp, #122]	; 0x7a
 800b028:	f8bd 1078 	ldrh.w	r1, [sp, #120]	; 0x78
 800b02c:	9806      	ldr	r0, [sp, #24]
 800b02e:	1a9a      	subs	r2, r3, r2
                rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
 800b030:	9b07      	ldr	r3, [sp, #28]
    lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800b032:	b212      	sxth	r2, r2
                rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
 800b034:	440b      	add	r3, r1
    lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800b036:	1a41      	subs	r1, r0, r1
 800b038:	9200      	str	r2, [sp, #0]
 800b03a:	b21b      	sxth	r3, r3
 800b03c:	b209      	sxth	r1, r1
 800b03e:	a822      	add	r0, sp, #136	; 0x88
 800b040:	f002 f992 	bl	800d368 <lv_area_set>
    lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800b044:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b046:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
 800b04a:	f8bd 107a 	ldrh.w	r1, [sp, #122]	; 0x7a
 800b04e:	9806      	ldr	r0, [sp, #24]
 800b050:	1a9a      	subs	r2, r3, r2
                rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
 800b052:	9b07      	ldr	r3, [sp, #28]
    lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800b054:	b212      	sxth	r2, r2
                rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
 800b056:	440b      	add	r3, r1
    lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800b058:	1a41      	subs	r1, r0, r1
 800b05a:	b21b      	sxth	r3, r3
 800b05c:	9200      	str	r2, [sp, #0]
 800b05e:	b209      	sxth	r1, r1
 800b060:	a820      	add	r0, sp, #128	; 0x80
 800b062:	f002 f981 	bl	800d368 <lv_area_set>
    lv_coord_t out_y_seg_start = 0;
 800b066:	2300      	movs	r3, #0
 800b068:	930e      	str	r3, [sp, #56]	; 0x38
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800b06a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    while(lv_circ_cont(&cir)) {
 800b06c:	9419      	str	r4, [sp, #100]	; 0x64
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800b06e:	3301      	adds	r3, #1
 800b070:	931b      	str	r3, [sp, #108]	; 0x6c
    while(lv_circ_cont(&cir)) {
 800b072:	9819      	ldr	r0, [sp, #100]	; 0x64
 800b074:	f002 fa1a 	bl	800d4ac <lv_circ_cont>
 800b078:	2800      	cmp	r0, #0
 800b07a:	f040 8357 	bne.w	800b72c <lv_draw_rect+0xeb0>
    if(mcolor.full == gcolor.full)
 800b07e:	9b03      	ldr	r3, [sp, #12]
 800b080:	454b      	cmp	r3, r9
 800b082:	f040 84fc 	bne.w	800ba7e <lv_draw_rect+0x1202>
        act_color = mcolor;
 800b086:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    lv_draw_fill(&edge_top_area, mask, act_color, opa);
 800b08a:	9b04      	ldr	r3, [sp, #16]
 800b08c:	4659      	mov	r1, fp
 800b08e:	a820      	add	r0, sp, #128	; 0x80
 800b090:	f7fe fec6 	bl	8009e20 <lv_draw_fill>
    if(edge_top_area.y1 != mid_top_area.y1) {
 800b094:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
 800b098:	f9bd 2082 	ldrsh.w	r2, [sp, #130]	; 0x82
 800b09c:	429a      	cmp	r2, r3
 800b09e:	d00a      	beq.n	800b0b6 <lv_draw_rect+0x83a>
        if(mcolor.full == gcolor.full)
 800b0a0:	9a03      	ldr	r2, [sp, #12]
 800b0a2:	454a      	cmp	r2, r9
 800b0a4:	f040 84fe 	bne.w	800baa4 <lv_draw_rect+0x1228>
            act_color = mcolor;
 800b0a8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
        lv_draw_fill(&mid_top_area, mask, act_color, opa);
 800b0ac:	9b04      	ldr	r3, [sp, #16]
 800b0ae:	4659      	mov	r1, fp
 800b0b0:	a822      	add	r0, sp, #136	; 0x88
 800b0b2:	f7fe feb5 	bl	8009e20 <lv_draw_fill>
    if(mcolor.full == gcolor.full)
 800b0b6:	9b03      	ldr	r3, [sp, #12]
 800b0b8:	454b      	cmp	r3, r9
 800b0ba:	f040 8504 	bne.w	800bac6 <lv_draw_rect+0x124a>
        act_color = mcolor;
 800b0be:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    lv_draw_fill(&mid_bot_area, mask, act_color, opa);
 800b0c2:	9b04      	ldr	r3, [sp, #16]
 800b0c4:	4659      	mov	r1, fp
 800b0c6:	a824      	add	r0, sp, #144	; 0x90
 800b0c8:	f7fe feaa 	bl	8009e20 <lv_draw_fill>
    if(edge_bot_area.y1 != mid_bot_area.y1) {
 800b0cc:	f9bd 309a 	ldrsh.w	r3, [sp, #154]	; 0x9a
 800b0d0:	f9bd 2092 	ldrsh.w	r2, [sp, #146]	; 0x92
 800b0d4:	429a      	cmp	r2, r3
 800b0d6:	d00a      	beq.n	800b0ee <lv_draw_rect+0x872>
        if(mcolor.full == gcolor.full)
 800b0d8:	9a03      	ldr	r2, [sp, #12]
 800b0da:	454a      	cmp	r2, r9
 800b0dc:	f040 8506 	bne.w	800baec <lv_draw_rect+0x1270>
            act_color = mcolor;
 800b0e0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
        lv_draw_fill(&edge_bot_area, mask, act_color, opa);
 800b0e4:	9b04      	ldr	r3, [sp, #16]
 800b0e6:	4659      	mov	r1, fp
 800b0e8:	a826      	add	r0, sp, #152	; 0x98
 800b0ea:	f7fe fe99 	bl	8009e20 <lv_draw_fill>
    if(aa) {
 800b0ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	f000 80a8 	beq.w	800b246 <lv_draw_rect+0x9ca>
        edge_top_area.x1 = coords->x1 + radius + 2;
 800b0f6:	f8ba 3000 	ldrh.w	r3, [sl]
 800b0fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b0fc:	3302      	adds	r3, #2
 800b0fe:	4413      	add	r3, r2
 800b100:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
        edge_top_area.x2 = coords->x2 - radius - 2;
 800b104:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 800b108:	3b02      	subs	r3, #2
 800b10a:	1a9b      	subs	r3, r3, r2
        lv_draw_fill(&edge_top_area, mask, style->body.main_color, opa);
 800b10c:	9a02      	ldr	r2, [sp, #8]
        edge_top_area.x2 = coords->x2 - radius - 2;
 800b10e:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
        edge_top_area.y1 = coords->y1;
 800b112:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
 800b116:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
        edge_top_area.y2 = coords->y1;
 800b11a:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
        lv_draw_fill(&edge_top_area, mask, style->body.main_color, opa);
 800b11e:	8852      	ldrh	r2, [r2, #2]
 800b120:	9b04      	ldr	r3, [sp, #16]
 800b122:	4659      	mov	r1, fp
 800b124:	a820      	add	r0, sp, #128	; 0x80
 800b126:	f7fe fe7b 	bl	8009e20 <lv_draw_fill>
        lv_draw_fill(&edge_top_area, mask, style->body.grad_color, opa);
 800b12a:	9a02      	ldr	r2, [sp, #8]
        edge_top_area.y1 = coords->y2;
 800b12c:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 800b130:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
        edge_top_area.y2 = coords->y2;
 800b134:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
        lv_draw_fill(&edge_top_area, mask, style->body.grad_color, opa);
 800b138:	8892      	ldrh	r2, [r2, #4]
 800b13a:	9b04      	ldr	r3, [sp, #16]
 800b13c:	4659      	mov	r1, fp
 800b13e:	a820      	add	r0, sp, #128	; 0x80
 800b140:	f7fe fe6e 	bl	8009e20 <lv_draw_fill>
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800b144:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800b148:	930f      	str	r3, [sp, #60]	; 0x3c
 800b14a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b14c:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
        aa_color_hor_bottom = lv_color_mix(gcolor, mcolor, mix);
 800b150:	f8bd 100c 	ldrh.w	r1, [sp, #12]
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800b154:	1a9b      	subs	r3, r3, r2
 800b156:	b21b      	sxth	r3, r3
 800b158:	9313      	str	r3, [sp, #76]	; 0x4c
        mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 800b15a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b15c:	eba3 0408 	sub.w	r4, r3, r8
 800b160:	ebc4 2404 	rsb	r4, r4, r4, lsl #8
 800b164:	9b05      	ldr	r3, [sp, #20]
 800b166:	fbb4 f4f3 	udiv	r4, r4, r3
 800b16a:	b2e4      	uxtb	r4, r4
        aa_color_hor_bottom = lv_color_mix(gcolor, mcolor, mix);
 800b16c:	4622      	mov	r2, r4
 800b16e:	4648      	mov	r0, r9
 800b170:	f7ff fb1a 	bl	800a7a8 <lv_color_mix>
        aa_color_hor_top    = lv_color_mix(mcolor, gcolor, mix);
 800b174:	4622      	mov	r2, r4
        aa_color_hor_bottom = lv_color_mix(gcolor, mcolor, mix);
 800b176:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
        aa_color_hor_top    = lv_color_mix(mcolor, gcolor, mix);
 800b17a:	4649      	mov	r1, r9
 800b17c:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 800b180:	f7ff fb12 	bl	800a7a8 <lv_color_mix>
 800b184:	2300      	movs	r3, #0
 800b186:	9310      	str	r3, [sp, #64]	; 0x40
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800b188:	fa1f f388 	uxth.w	r3, r8
 800b18c:	9312      	str	r3, [sp, #72]	; 0x48
 800b18e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b190:	9a12      	ldr	r2, [sp, #72]	; 0x48
        aa_color_hor_top    = lv_color_mix(mcolor, gcolor, mix);
 800b192:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800b196:	3301      	adds	r3, #1
 800b198:	18d3      	adds	r3, r2, r3
 800b19a:	9316      	str	r3, [sp, #88]	; 0x58
 800b19c:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
        for(i = 0; i < seg_size; i++) {
 800b1a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b1a2:	428b      	cmp	r3, r1
 800b1a4:	f300 84b3 	bgt.w	800bb0e <lv_draw_rect+0x1292>
        if(LV_MATH_ABS(aa_p.x - aa_p.y) == seg_size) {
 800b1a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b1aa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b1ac:	eba8 0303 	sub.w	r3, r8, r3
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	bfb8      	it	lt
 800b1b4:	425b      	neglt	r3, r3
 800b1b6:	4293      	cmp	r3, r2
 800b1b8:	d145      	bne.n	800b246 <lv_draw_rect+0x9ca>
            mix                 = (uint32_t)((uint32_t)(out_x_last)*255) / height;
 800b1ba:	9b05      	ldr	r3, [sp, #20]
            aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 800b1bc:	f8bd 100c 	ldrh.w	r1, [sp, #12]
            mix                 = (uint32_t)((uint32_t)(out_x_last)*255) / height;
 800b1c0:	ebc8 2408 	rsb	r4, r8, r8, lsl #8
 800b1c4:	fbb4 f4f3 	udiv	r4, r4, r3
 800b1c8:	b2e4      	uxtb	r4, r4
            aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 800b1ca:	4622      	mov	r2, r4
 800b1cc:	4648      	mov	r0, r9
 800b1ce:	f7ff faeb 	bl	800a7a8 <lv_color_mix>
            aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 800b1d2:	4622      	mov	r2, r4
            aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 800b1d4:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
            aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 800b1d8:	4649      	mov	r1, r9
 800b1da:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 800b1de:	f7ff fae3 	bl	800a7a8 <lv_color_mix>
            lv_opa_t aa_opa = opa >> 1;
 800b1e2:	9b04      	ldr	r3, [sp, #16]
            aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 800b1e4:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
            lv_opa_t aa_opa = opa >> 1;
 800b1e8:	085e      	lsrs	r6, r3, #1
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p), rb_origo.y + LV_CIRC_OCT2_Y(aa_p), mask, aa_color_hor_bottom,
 800b1ea:	9b07      	ldr	r3, [sp, #28]
 800b1ec:	9600      	str	r6, [sp, #0]
 800b1ee:	fa1f f488 	uxth.w	r4, r8
 800b1f2:	4423      	add	r3, r4
 800b1f4:	b21d      	sxth	r5, r3
 800b1f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1f8:	4423      	add	r3, r4
 800b1fa:	fa0f f883 	sxth.w	r8, r3
 800b1fe:	465a      	mov	r2, fp
 800b200:	b283      	uxth	r3, r0
 800b202:	4641      	mov	r1, r8
 800b204:	4628      	mov	r0, r5
 800b206:	f7fe fdbb 	bl	8009d80 <lv_draw_px>
            lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p), lb_origo.y + LV_CIRC_OCT4_Y(aa_p), mask, aa_color_hor_bottom,
 800b20a:	9b06      	ldr	r3, [sp, #24]
 800b20c:	9600      	str	r6, [sp, #0]
 800b20e:	1b1f      	subs	r7, r3, r4
 800b210:	b23f      	sxth	r7, r7
 800b212:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 800b216:	465a      	mov	r2, fp
 800b218:	4641      	mov	r1, r8
 800b21a:	4638      	mov	r0, r7
 800b21c:	f7fe fdb0 	bl	8009d80 <lv_draw_px>
            lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p), lt_origo.y + LV_CIRC_OCT6_Y(aa_p), mask, aa_color_hor_top,
 800b220:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b222:	9600      	str	r6, [sp, #0]
 800b224:	1b1c      	subs	r4, r3, r4
 800b226:	b224      	sxth	r4, r4
 800b228:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b22c:	465a      	mov	r2, fp
 800b22e:	4621      	mov	r1, r4
 800b230:	4638      	mov	r0, r7
 800b232:	f7fe fda5 	bl	8009d80 <lv_draw_px>
            lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p), rt_origo.y + LV_CIRC_OCT8_Y(aa_p), mask, aa_color_hor_top,
 800b236:	9600      	str	r6, [sp, #0]
 800b238:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b23c:	465a      	mov	r2, fp
 800b23e:	4621      	mov	r1, r4
 800b240:	4628      	mov	r0, r5
 800b242:	f7fe fd9d 	bl	8009d80 <lv_draw_px>
    if(style->body.border.width != 0 && style->body.border.part != LV_BORDER_NONE &&
 800b246:	9b02      	ldr	r3, [sp, #8]
 800b248:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	f000 81c0 	beq.w	800b5d2 <lv_draw_rect+0xd56>
 800b252:	9b02      	ldr	r3, [sp, #8]
 800b254:	7b9b      	ldrb	r3, [r3, #14]
 800b256:	2b00      	cmp	r3, #0
 800b258:	f000 81bb 	beq.w	800b5d2 <lv_draw_rect+0xd56>
 800b25c:	9b02      	ldr	r3, [sp, #8]
 800b25e:	7bdb      	ldrb	r3, [r3, #15]
 800b260:	2b0f      	cmp	r3, #15
 800b262:	f240 81b6 	bls.w	800b5d2 <lv_draw_rect+0xd56>
    uint16_t radius = style->body.radius;
 800b266:	9b02      	ldr	r3, [sp, #8]
 800b268:	f8b3 9006 	ldrh.w	r9, [r3, #6]
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800b26c:	f7fd ff06 	bl	800907c <lv_refr_get_disp_refreshing>
 800b270:	f001 fef8 	bl	800d064 <lv_disp_get_antialiasing>
 800b274:	f8ba 1004 	ldrh.w	r1, [sl, #4]
 800b278:	f8ba 3000 	ldrh.w	r3, [sl]
    return area_p->y2 - area_p->y1 + 1;
 800b27c:	f8ba 2006 	ldrh.w	r2, [sl, #6]
    return area_p->x2 - area_p->x1 + 1;
 800b280:	3101      	adds	r1, #1
 800b282:	1ac9      	subs	r1, r1, r3
    return area_p->y2 - area_p->y1 + 1;
 800b284:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 800b288:	4680      	mov	r8, r0
 800b28a:	3201      	adds	r2, #1
    lv_opa_t opa      = opa_scale == LV_OPA_COVER ? style->body.border.opa
 800b28c:	9808      	ldr	r0, [sp, #32]
 800b28e:	1ad2      	subs	r2, r2, r3
    lv_coord_t bwidth = style->body.border.width;
 800b290:	9b02      	ldr	r3, [sp, #8]
    lv_opa_t opa      = opa_scale == LV_OPA_COVER ? style->body.border.opa
 800b292:	28ff      	cmp	r0, #255	; 0xff
 800b294:	9802      	ldr	r0, [sp, #8]
    lv_coord_t bwidth = style->body.border.width;
 800b296:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800b29a:	7bc4      	ldrb	r4, [r0, #15]
    lv_opa_t opa      = opa_scale == LV_OPA_COVER ? style->body.border.opa
 800b29c:	bf18      	it	ne
 800b29e:	9808      	ldrne	r0, [sp, #32]
    bwidth--;
 800b2a0:	b29b      	uxth	r3, r3
    lv_opa_t opa      = opa_scale == LV_OPA_COVER ? style->body.border.opa
 800b2a2:	bf18      	it	ne
 800b2a4:	4344      	mulne	r4, r0
    bwidth--;
 800b2a6:	f103 36ff 	add.w	r6, r3, #4294967295	; 0xffffffff
    lv_border_part_t part = style->body.border.part;
 800b2aa:	9802      	ldr	r0, [sp, #8]
    bwidth--;
 800b2ac:	9303      	str	r3, [sp, #12]
 800b2ae:	b2b6      	uxth	r6, r6
 800b2b0:	b212      	sxth	r2, r2
    lv_border_part_t part = style->body.border.part;
 800b2b2:	7b85      	ldrb	r5, [r0, #14]
    lv_color_t color      = style->body.border.color;
 800b2b4:	8947      	ldrh	r7, [r0, #10]
    bwidth--;
 800b2b6:	b233      	sxth	r3, r6
    return area_p->x2 - area_p->x1 + 1;
 800b2b8:	b209      	sxth	r1, r1
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800b2ba:	4648      	mov	r0, r9
    lv_opa_t opa      = opa_scale == LV_OPA_COVER ? style->body.border.opa
 800b2bc:	bf18      	it	ne
 800b2be:	f3c4 2407 	ubfxne	r4, r4, #8, #8
    bwidth--;
 800b2c2:	9304      	str	r3, [sp, #16]
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800b2c4:	f7ff fa9c 	bl	800a800 <lv_draw_cont_radius_corr>
    if(radius < bwidth) {
 800b2c8:	9b04      	ldr	r3, [sp, #16]
 800b2ca:	4298      	cmp	r0, r3
        length_corr = bwidth - radius - aa;
 800b2cc:	bfbd      	ittte	lt
 800b2ce:	1a32      	sublt	r2, r6, r0
 800b2d0:	eba2 0208 	sublt.w	r2, r2, r8
 800b2d4:	b212      	sxthlt	r2, r2
    lv_coord_t length_corr = 0;
 800b2d6:	2200      	movge	r2, #0
 800b2d8:	9204      	str	r2, [sp, #16]
    if(style->body.radius == 0) {
 800b2da:	9a02      	ldr	r2, [sp, #8]
 800b2dc:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
        corner_size = radius + aa;
 800b2e0:	bfa8      	it	ge
 800b2e2:	eb00 0308 	addge.w	r3, r0, r8
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800b2e6:	4681      	mov	r9, r0
        corner_size = radius + aa;
 800b2e8:	bfa8      	it	ge
 800b2ea:	b21b      	sxthge	r3, r3
 800b2ec:	f005 0202 	and.w	r2, r5, #2
    if(style->body.radius == 0) {
 800b2f0:	2900      	cmp	r1, #0
 800b2f2:	f040 849b 	bne.w	800bc2c <lv_draw_rect+0x13b0>
        if(part & LV_BORDER_TOP) {
 800b2f6:	f002 08ff 	and.w	r8, r2, #255	; 0xff
 800b2fa:	b1a2      	cbz	r2, 800b326 <lv_draw_rect+0xaaa>
            work_area.x1 = coords->x1;
 800b2fc:	f8ba 3000 	ldrh.w	r3, [sl]
 800b300:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            work_area.x2 = coords->x2;
 800b304:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 800b308:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            work_area.y1 = coords->y1;
 800b30c:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
 800b310:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            work_area.y2 = coords->y1 + bwidth;
 800b314:	4433      	add	r3, r6
 800b316:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&work_area, mask, color, opa);
 800b31a:	463a      	mov	r2, r7
 800b31c:	4623      	mov	r3, r4
 800b31e:	4659      	mov	r1, fp
 800b320:	a826      	add	r0, sp, #152	; 0x98
 800b322:	f7fe fd7d 	bl	8009e20 <lv_draw_fill>
        if(part & LV_BORDER_RIGHT) {
 800b326:	0729      	lsls	r1, r5, #28
 800b328:	d520      	bpl.n	800b36c <lv_draw_rect+0xaf0>
            work_area.x1 = coords->x2 - bwidth;
 800b32a:	f9ba 3004 	ldrsh.w	r3, [sl, #4]
            work_area.x2 = coords->x2;
 800b32e:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            work_area.x1 = coords->x2 - bwidth;
 800b332:	1b9a      	subs	r2, r3, r6
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 800b334:	f1b8 0f00 	cmp.w	r8, #0
            work_area.x1 = coords->x2 - bwidth;
 800b338:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 800b33c:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 800b340:	9a03      	ldr	r2, [sp, #12]
 800b342:	bf08      	it	eq
 800b344:	2200      	moveq	r2, #0
 800b346:	4413      	add	r3, r2
 800b348:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 800b34c:	9a03      	ldr	r2, [sp, #12]
 800b34e:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 800b352:	f015 0f01 	tst.w	r5, #1
 800b356:	bf08      	it	eq
 800b358:	2200      	moveq	r2, #0
 800b35a:	1a9b      	subs	r3, r3, r2
 800b35c:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&work_area, mask, color, opa);
 800b360:	463a      	mov	r2, r7
 800b362:	4623      	mov	r3, r4
 800b364:	4659      	mov	r1, fp
 800b366:	a826      	add	r0, sp, #152	; 0x98
 800b368:	f7fe fd5a 	bl	8009e20 <lv_draw_fill>
        if(part & LV_BORDER_LEFT) {
 800b36c:	f015 0f04 	tst.w	r5, #4
 800b370:	f005 0501 	and.w	r5, r5, #1
 800b374:	d020      	beq.n	800b3b8 <lv_draw_rect+0xb3c>
            work_area.x1 = coords->x1;
 800b376:	f9ba 3000 	ldrsh.w	r3, [sl]
 800b37a:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            work_area.x2 = coords->x1 + bwidth;
 800b37e:	4433      	add	r3, r6
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 800b380:	9a03      	ldr	r2, [sp, #12]
            work_area.x2 = coords->x1 + bwidth;
 800b382:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 800b386:	f1b8 0f00 	cmp.w	r8, #0
 800b38a:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 800b38e:	bf08      	it	eq
 800b390:	2200      	moveq	r2, #0
 800b392:	4413      	add	r3, r2
 800b394:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 800b398:	9a03      	ldr	r2, [sp, #12]
 800b39a:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 800b39e:	2d00      	cmp	r5, #0
 800b3a0:	bf08      	it	eq
 800b3a2:	2200      	moveq	r2, #0
 800b3a4:	1a9b      	subs	r3, r3, r2
 800b3a6:	9203      	str	r2, [sp, #12]
 800b3a8:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&work_area, mask, color, opa);
 800b3ac:	463a      	mov	r2, r7
 800b3ae:	4623      	mov	r3, r4
 800b3b0:	4659      	mov	r1, fp
 800b3b2:	a826      	add	r0, sp, #152	; 0x98
 800b3b4:	f7fe fd34 	bl	8009e20 <lv_draw_fill>
        if(part & LV_BORDER_BOTTOM) {
 800b3b8:	b1a5      	cbz	r5, 800b3e4 <lv_draw_rect+0xb68>
            work_area.x1 = coords->x1;
 800b3ba:	f8ba 3000 	ldrh.w	r3, [sl]
 800b3be:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            work_area.x2 = coords->x2;
 800b3c2:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 800b3c6:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            work_area.y1 = coords->y2 - bwidth;
 800b3ca:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 800b3ce:	1b9e      	subs	r6, r3, r6
 800b3d0:	f8ad 609a 	strh.w	r6, [sp, #154]	; 0x9a
            work_area.y2 = coords->y2;
 800b3d4:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&work_area, mask, color, opa);
 800b3d8:	463a      	mov	r2, r7
 800b3da:	4623      	mov	r3, r4
 800b3dc:	4659      	mov	r1, fp
 800b3de:	a826      	add	r0, sp, #152	; 0x98
 800b3e0:	f7fe fd1e 	bl	8009e20 <lv_draw_fill>
        if(style->body.radius != 0) {
 800b3e4:	9b02      	ldr	r3, [sp, #8]
 800b3e6:	f9b3 5006 	ldrsh.w	r5, [r3, #6]
 800b3ea:	2d00      	cmp	r5, #0
 800b3ec:	f000 80f1 	beq.w	800b5d2 <lv_draw_rect+0xd56>
    bool aa               = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800b3f0:	f7fd fe44 	bl	800907c <lv_refr_get_disp_refreshing>
 800b3f4:	f001 fe36 	bl	800d064 <lv_disp_get_antialiasing>
    lv_coord_t bwidth     = style->body.border.width;
 800b3f8:	9b02      	ldr	r3, [sp, #8]
    bool aa               = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800b3fa:	900e      	str	r0, [sp, #56]	; 0x38
    lv_coord_t bwidth     = style->body.border.width;
 800b3fc:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
    lv_color_t color      = style->body.border.color;
 800b400:	895b      	ldrh	r3, [r3, #10]
 800b402:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
    lv_border_part_t part = style->body.border.part;
 800b406:	9b02      	ldr	r3, [sp, #8]
 800b408:	7b9b      	ldrb	r3, [r3, #14]
 800b40a:	9305      	str	r3, [sp, #20]
    lv_opa_t opa          = opa_scale == LV_OPA_COVER ? style->body.border.opa
 800b40c:	9b08      	ldr	r3, [sp, #32]
 800b40e:	2bff      	cmp	r3, #255	; 0xff
 800b410:	9b02      	ldr	r3, [sp, #8]
 800b412:	bf18      	it	ne
 800b414:	9a08      	ldrne	r2, [sp, #32]
 800b416:	7bdb      	ldrb	r3, [r3, #15]
 800b418:	bf1c      	itt	ne
 800b41a:	4353      	mulne	r3, r2
 800b41c:	f3c3 2307 	ubfxne	r3, r3, #8, #8
 800b420:	9307      	str	r3, [sp, #28]
    if(aa) bwidth--; /*Because of anti-aliasing the border seems one pixel ticker*/
 800b422:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    uint16_t radius       = style->body.radius;
 800b424:	b2ad      	uxth	r5, r5
    bwidth--;
 800b426:	b2a4      	uxth	r4, r4
    if(aa) bwidth--; /*Because of anti-aliasing the border seems one pixel ticker*/
 800b428:	2b00      	cmp	r3, #0
 800b42a:	f040 854f 	bne.w	800becc <lv_draw_rect+0x1650>
    bwidth--;
 800b42e:	3c01      	subs	r4, #1
    return area_p->y2 - area_p->y1 + 1;
 800b430:	f8ba 2006 	ldrh.w	r2, [sl, #6]
 800b434:	f8ba 3002 	ldrh.w	r3, [sl, #2]
    return area_p->x2 - area_p->x1 + 1;
 800b438:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    return area_p->y2 - area_p->y1 + 1;
 800b43c:	3201      	adds	r2, #1
 800b43e:	1ad2      	subs	r2, r2, r3
    return area_p->x2 - area_p->x1 + 1;
 800b440:	f8ba 3000 	ldrh.w	r3, [sl]
 800b444:	3101      	adds	r1, #1
 800b446:	1ac9      	subs	r1, r1, r3
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800b448:	b212      	sxth	r2, r2
 800b44a:	b209      	sxth	r1, r1
 800b44c:	4628      	mov	r0, r5
 800b44e:	f7ff f9d7 	bl	800a800 <lv_draw_cont_radius_corr>
    lt_origo.x = coords->x1 + radius + aa;
 800b452:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800b456:	f8ba 2000 	ldrh.w	r2, [sl]
 800b45a:	441a      	add	r2, r3
 800b45c:	4402      	add	r2, r0
 800b45e:	b292      	uxth	r2, r2
 800b460:	9206      	str	r2, [sp, #24]
    lt_origo.y = coords->y1 + radius + aa;
 800b462:	f8ba 2002 	ldrh.w	r2, [sl, #2]
 800b466:	441a      	add	r2, r3
 800b468:	4402      	add	r2, r0
 800b46a:	b292      	uxth	r2, r2
 800b46c:	9203      	str	r2, [sp, #12]
 800b46e:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 800b472:	9211      	str	r2, [sp, #68]	; 0x44
    lb_origo.y = coords->y2 - radius - aa;
 800b474:	f8ba 2006 	ldrh.w	r2, [sl, #6]
 800b478:	1a12      	subs	r2, r2, r0
 800b47a:	1ad2      	subs	r2, r2, r3
 800b47c:	b292      	uxth	r2, r2
 800b47e:	9204      	str	r2, [sp, #16]
 800b480:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800b484:	9212      	str	r2, [sp, #72]	; 0x48
    rt_origo.x = coords->x2 - radius - aa;
 800b486:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 800b48a:	1a12      	subs	r2, r2, r0
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800b48c:	4605      	mov	r5, r0
    rt_origo.x = coords->x2 - radius - aa;
 800b48e:	1ad3      	subs	r3, r2, r3
    lv_circ_init(&cir_out, &tmp_out, radius);
 800b490:	fa0f f980 	sxth.w	r9, r0
    if(aa) bwidth--; /*Because of anti-aliasing the border seems one pixel ticker*/
 800b494:	b2a4      	uxth	r4, r4
    rt_origo.x = coords->x2 - radius - aa;
 800b496:	b29b      	uxth	r3, r3
    lv_circ_init(&cir_out, &tmp_out, radius);
 800b498:	464a      	mov	r2, r9
 800b49a:	a91e      	add	r1, sp, #120	; 0x78
 800b49c:	a822      	add	r0, sp, #136	; 0x88
    lv_coord_t radius_in = radius - bwidth;
 800b49e:	1b2c      	subs	r4, r5, r4
    rt_origo.x = coords->x2 - radius - aa;
 800b4a0:	9309      	str	r3, [sp, #36]	; 0x24
    lv_circ_init(&cir_out, &tmp_out, radius);
 800b4a2:	f001 fffc 	bl	800d49e <lv_circ_init>
    lv_coord_t radius_in = radius - bwidth;
 800b4a6:	b223      	sxth	r3, r4
    lv_circ_init(&cir_in, &tmp_in, radius_in);
 800b4a8:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 800b4ac:	a920      	add	r1, sp, #128	; 0x80
 800b4ae:	a824      	add	r0, sp, #144	; 0x90
    lv_coord_t radius_in = radius - bwidth;
 800b4b0:	9308      	str	r3, [sp, #32]
    lv_circ_init(&cir_in, &tmp_in, radius_in);
 800b4b2:	f001 fff4 	bl	800d49e <lv_circ_init>
    lv_coord_t in_y_seg_start = 0;
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	930c      	str	r3, [sp, #48]	; 0x30
    lv_coord_t out_y_seg_start = 0;
 800b4ba:	930f      	str	r3, [sp, #60]	; 0x3c
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800b4bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4be:	3b01      	subs	r3, #1
 800b4c0:	9316      	str	r3, [sp, #88]	; 0x58
 800b4c2:	9b05      	ldr	r3, [sp, #20]
 800b4c4:	f003 0309 	and.w	r3, r3, #9
 800b4c8:	9310      	str	r3, [sp, #64]	; 0x40
    while(cir_out.y <= cir_out.x) {
 800b4ca:	f9bd a08a 	ldrsh.w	sl, [sp, #138]	; 0x8a
 800b4ce:	f9bd 2088 	ldrsh.w	r2, [sp, #136]	; 0x88
 800b4d2:	4552      	cmp	r2, sl
 800b4d4:	f280 84fd 	bge.w	800bed2 <lv_draw_rect+0x1656>
    if(aa) {
 800b4d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d079      	beq.n	800b5d2 <lv_draw_rect+0xd56>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800b4de:	9b09      	ldr	r3, [sp, #36]	; 0x24
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800b4e0:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800b4e4:	fa1f f789 	uxth.w	r7, r9
 800b4e8:	3301      	adds	r3, #1
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800b4ea:	ebaa 0a05 	sub.w	sl, sl, r5
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800b4ee:	18fb      	adds	r3, r7, r3
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800b4f0:	fa0f fa8a 	sxth.w	sl, sl
 800b4f4:	2600      	movs	r6, #0
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800b4f6:	930a      	str	r3, [sp, #40]	; 0x28
 800b4f8:	b231      	sxth	r1, r6
        for(i = 0; i < seg_size; i++) {
 800b4fa:	458a      	cmp	sl, r1
 800b4fc:	f300 877e 	bgt.w	800c3fc <lv_draw_rect+0x1b80>
        if(LV_MATH_ABS(aa_p.x - aa_p.y) == seg_size) {
 800b500:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b502:	eba9 0503 	sub.w	r5, r9, r3
 800b506:	2d00      	cmp	r5, #0
 800b508:	bfb8      	it	lt
 800b50a:	426d      	neglt	r5, r5
 800b50c:	4555      	cmp	r5, sl
 800b50e:	d14d      	bne.n	800b5ac <lv_draw_rect+0xd30>
            lv_opa_t aa_opa = opa >> 1;
 800b510:	9b07      	ldr	r3, [sp, #28]
 800b512:	085c      	lsrs	r4, r3, #1
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800b514:	9b05      	ldr	r3, [sp, #20]
 800b516:	f003 0309 	and.w	r3, r3, #9
 800b51a:	2b09      	cmp	r3, #9
 800b51c:	d10d      	bne.n	800b53a <lv_draw_rect+0xcbe>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p), rb_origo.y + LV_CIRC_OCT2_Y(aa_p), mask,
 800b51e:	9b04      	ldr	r3, [sp, #16]
 800b520:	9400      	str	r4, [sp, #0]
 800b522:	fa1f f089 	uxth.w	r0, r9
 800b526:	1819      	adds	r1, r3, r0
 800b528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b52a:	4418      	add	r0, r3
 800b52c:	9b02      	ldr	r3, [sp, #8]
 800b52e:	465a      	mov	r2, fp
 800b530:	895b      	ldrh	r3, [r3, #10]
 800b532:	b209      	sxth	r1, r1
 800b534:	b200      	sxth	r0, r0
 800b536:	f7fe fc23 	bl	8009d80 <lv_draw_px>
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800b53a:	9b05      	ldr	r3, [sp, #20]
 800b53c:	f003 0305 	and.w	r3, r3, #5
 800b540:	2b05      	cmp	r3, #5
 800b542:	d10d      	bne.n	800b560 <lv_draw_rect+0xce4>
                lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p), lb_origo.y + LV_CIRC_OCT4_Y(aa_p), mask,
 800b544:	9b04      	ldr	r3, [sp, #16]
 800b546:	9400      	str	r4, [sp, #0]
 800b548:	fa1f f089 	uxth.w	r0, r9
 800b54c:	1819      	adds	r1, r3, r0
 800b54e:	9b06      	ldr	r3, [sp, #24]
 800b550:	1a18      	subs	r0, r3, r0
 800b552:	9b02      	ldr	r3, [sp, #8]
 800b554:	465a      	mov	r2, fp
 800b556:	895b      	ldrh	r3, [r3, #10]
 800b558:	b209      	sxth	r1, r1
 800b55a:	b200      	sxth	r0, r0
 800b55c:	f7fe fc10 	bl	8009d80 <lv_draw_px>
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800b560:	9b05      	ldr	r3, [sp, #20]
 800b562:	f003 0306 	and.w	r3, r3, #6
 800b566:	2b06      	cmp	r3, #6
 800b568:	d10d      	bne.n	800b586 <lv_draw_rect+0xd0a>
                lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p), lt_origo.y + LV_CIRC_OCT6_Y(aa_p), mask,
 800b56a:	9b03      	ldr	r3, [sp, #12]
 800b56c:	9400      	str	r4, [sp, #0]
 800b56e:	fa1f f089 	uxth.w	r0, r9
 800b572:	1a19      	subs	r1, r3, r0
 800b574:	9b06      	ldr	r3, [sp, #24]
 800b576:	1a18      	subs	r0, r3, r0
 800b578:	9b02      	ldr	r3, [sp, #8]
 800b57a:	465a      	mov	r2, fp
 800b57c:	895b      	ldrh	r3, [r3, #10]
 800b57e:	b209      	sxth	r1, r1
 800b580:	b200      	sxth	r0, r0
 800b582:	f7fe fbfd 	bl	8009d80 <lv_draw_px>
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800b586:	9b05      	ldr	r3, [sp, #20]
 800b588:	f003 030a 	and.w	r3, r3, #10
 800b58c:	2b0a      	cmp	r3, #10
 800b58e:	d10d      	bne.n	800b5ac <lv_draw_rect+0xd30>
                lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p), rt_origo.y + LV_CIRC_OCT8_Y(aa_p), mask,
 800b590:	9b03      	ldr	r3, [sp, #12]
 800b592:	9400      	str	r4, [sp, #0]
 800b594:	fa1f f789 	uxth.w	r7, r9
 800b598:	1bd9      	subs	r1, r3, r7
 800b59a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b59c:	441f      	add	r7, r3
 800b59e:	9b02      	ldr	r3, [sp, #8]
 800b5a0:	465a      	mov	r2, fp
 800b5a2:	895b      	ldrh	r3, [r3, #10]
 800b5a4:	b209      	sxth	r1, r1
 800b5a6:	b238      	sxth	r0, r7
 800b5a8:	f7fe fbea 	bl	8009d80 <lv_draw_px>
        seg_size     = in_y_seg_end - in_y_seg_start;
 800b5ac:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 800b5b0:	f8bd 3092 	ldrh.w	r3, [sp, #146]	; 0x92
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800b5b4:	9a08      	ldr	r2, [sp, #32]
        seg_size     = in_y_seg_end - in_y_seg_start;
 800b5b6:	1b5b      	subs	r3, r3, r5
 800b5b8:	b21b      	sxth	r3, r3
 800b5ba:	930a      	str	r3, [sp, #40]	; 0x28
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800b5bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5be:	3b01      	subs	r3, #1
 800b5c0:	4413      	add	r3, r2
 800b5c2:	b21b      	sxth	r3, r3
        seg_size     = in_y_seg_end - in_y_seg_start;
 800b5c4:	2400      	movs	r4, #0
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800b5c6:	930b      	str	r3, [sp, #44]	; 0x2c
        for(i = 0; i < seg_size; i++) {
 800b5c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5ca:	b221      	sxth	r1, r4
 800b5cc:	428b      	cmp	r3, r1
 800b5ce:	f300 87b0 	bgt.w	800c532 <lv_draw_rect+0x1cb6>
}
 800b5d2:	b029      	add	sp, #164	; 0xa4
 800b5d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        curve_x[LV_CIRC_OCT1_Y(circ)] = LV_CIRC_OCT1_X(circ);
 800b5d8:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 800b5dc:	f9bd 2090 	ldrsh.w	r2, [sp, #144]	; 0x90
 800b5e0:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
        curve_x[LV_CIRC_OCT2_Y(circ)] = LV_CIRC_OCT2_X(circ);
 800b5e4:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 800b5e8:	f9bd 2092 	ldrsh.w	r2, [sp, #146]	; 0x92
 800b5ec:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
        lv_circ_next(&circ, &circ_tmp);
 800b5f0:	a922      	add	r1, sp, #136	; 0x88
 800b5f2:	4648      	mov	r0, r9
 800b5f4:	f001 ff63 	bl	800d4be <lv_circ_next>
 800b5f8:	f7ff bbe4 	b.w	800adc4 <lv_draw_rect+0x548>
        line_1d_blur[col] = (uint32_t)((uint32_t)(swidth - col) * opa / 2) / (swidth);
 800b5fc:	0842      	lsrs	r2, r0, #1
 800b5fe:	1ac0      	subs	r0, r0, r3
 800b600:	fbb2 f2f6 	udiv	r2, r2, r6
 800b604:	f801 2b01 	strb.w	r2, [r1], #1
 800b608:	f7ff bbef 	b.w	800adea <lv_draw_rect+0x56e>
        point_l.y = ofs_l.y + curve_x[col];
 800b60c:	f837 5013 	ldrh.w	r5, [r7, r3, lsl #1]
 800b610:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b612:	9904      	ldr	r1, [sp, #16]
 800b614:	4428      	add	r0, r5
 800b616:	b280      	uxth	r0, r0
 800b618:	900d      	str	r0, [sp, #52]	; 0x34
 800b61a:	9806      	ldr	r0, [sp, #24]
 800b61c:	fa1f f288 	uxth.w	r2, r8
 800b620:	1a89      	subs	r1, r1, r2
 800b622:	4402      	add	r2, r0
 800b624:	b209      	sxth	r1, r1
 800b626:	b212      	sxth	r2, r2
 800b628:	910e      	str	r1, [sp, #56]	; 0x38
 800b62a:	920a      	str	r2, [sp, #40]	; 0x28
 800b62c:	0059      	lsls	r1, r3, #1
        int16_t diff = col == 0 ? 0 : curve_x[col - 1] - curve_x[col];
 800b62e:	b123      	cbz	r3, 800b63a <lv_draw_rect+0xdbe>
 800b630:	187a      	adds	r2, r7, r1
 800b632:	f832 3c02 	ldrh.w	r3, [r2, #-2]
 800b636:	1b5b      	subs	r3, r3, r5
 800b638:	b29b      	uxth	r3, r3
 800b63a:	b21b      	sxth	r3, r3
 800b63c:	9307      	str	r3, [sp, #28]
 800b63e:	f04f 0900 	mov.w	r9, #0
 800b642:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b644:	444b      	add	r3, r9
 800b646:	b21b      	sxth	r3, r3
 800b648:	9309      	str	r3, [sp, #36]	; 0x24
        for(d = 0; d < swidth; d++) {
 800b64a:	fa1f f389 	uxth.w	r3, r9
 800b64e:	42b3      	cmp	r3, r6
 800b650:	db03      	blt.n	800b65a <lv_draw_rect+0xdde>
 800b652:	f108 0801 	add.w	r8, r8, #1
 800b656:	f7ff bbe7 	b.w	800ae28 <lv_draw_rect+0x5ac>
            if(diff == 0) {
 800b65a:	9a07      	ldr	r2, [sp, #28]
                px_opa = line_1d_blur[d];
 800b65c:	5ce5      	ldrb	r5, [r4, r3]
            if(diff == 0) {
 800b65e:	b9b2      	cbnz	r2, 800b68e <lv_draw_rect+0xe12>
            lv_draw_px(point_l.x, point_l.y, mask, style->body.shadow.color, px_opa);
 800b660:	9b02      	ldr	r3, [sp, #8]
 800b662:	9500      	str	r5, [sp, #0]
 800b664:	8a1b      	ldrh	r3, [r3, #16]
 800b666:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b668:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b66a:	465a      	mov	r2, fp
 800b66c:	f7fe fb88 	bl	8009d80 <lv_draw_px>
            if(point_r.x > ofs_l.x) {
 800b670:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b672:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b674:	4293      	cmp	r3, r2
 800b676:	da07      	bge.n	800b688 <lv_draw_rect+0xe0c>
                lv_draw_px(point_r.x, point_r.y, mask, style->body.shadow.color, px_opa);
 800b678:	9b02      	ldr	r3, [sp, #8]
 800b67a:	9500      	str	r5, [sp, #0]
 800b67c:	8a1b      	ldrh	r3, [r3, #16]
 800b67e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b680:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b682:	465a      	mov	r2, fp
 800b684:	f7fe fb7c 	bl	8009d80 <lv_draw_px>
 800b688:	f109 0901 	add.w	r9, r9, #1
 800b68c:	e7d9      	b.n	800b642 <lv_draw_rect+0xdc6>
                px_opa = (uint16_t)((uint16_t)line_1d_blur[d] + line_1d_blur[d - diff]) >> 1;
 800b68e:	9a07      	ldr	r2, [sp, #28]
 800b690:	1a9b      	subs	r3, r3, r2
 800b692:	5ce3      	ldrb	r3, [r4, r3]
 800b694:	441d      	add	r5, r3
 800b696:	f3c5 0547 	ubfx	r5, r5, #1, #8
 800b69a:	e7e1      	b.n	800b660 <lv_draw_rect+0xde4>
        lv_draw_fill(&area_mid, mask, style->body.shadow.color, line_1d_blur[d]);
 800b69c:	9a02      	ldr	r2, [sp, #8]
 800b69e:	5ce3      	ldrb	r3, [r4, r3]
 800b6a0:	8a12      	ldrh	r2, [r2, #16]
 800b6a2:	4659      	mov	r1, fp
 800b6a4:	a826      	add	r0, sp, #152	; 0x98
 800b6a6:	f7fe fbbb 	bl	8009e20 <lv_draw_fill>
        area_mid.y1++;
 800b6aa:	f8bd 309a 	ldrh.w	r3, [sp, #154]	; 0x9a
 800b6ae:	3301      	adds	r3, #1
 800b6b0:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
        area_mid.y2++;
 800b6b4:	f8bd 309e 	ldrh.w	r3, [sp, #158]	; 0x9e
 800b6b8:	3301      	adds	r3, #1
 800b6ba:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
 800b6be:	462b      	mov	r3, r5
 800b6c0:	f7ff bbc7 	b.w	800ae52 <lv_draw_rect+0x5d6>
                work_area.y1 += 1;
 800b6c4:	3301      	adds	r3, #1
 800b6c6:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
                work_area.y2 -= 1;
 800b6ca:	3d01      	subs	r5, #1
 800b6cc:	e422      	b.n	800af14 <lv_draw_rect+0x698>
        if(style->body.radius != 0) {
 800b6ce:	9a02      	ldr	r2, [sp, #8]
 800b6d0:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
        lv_coord_t row_end   = coords->y2 - radius;
 800b6d4:	1a2d      	subs	r5, r5, r0
 800b6d6:	b2ad      	uxth	r5, r5
        if(style->body.radius != 0) {
 800b6d8:	b9fa      	cbnz	r2, 800b71a <lv_draw_rect+0xe9e>
        lv_coord_t row_start = coords->y1 + radius;
 800b6da:	b21c      	sxth	r4, r3
                row_end -= 1;
 800b6dc:	b22d      	sxth	r5, r5
 800b6de:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
        for(row = row_start; row <= row_end; row++) {
 800b6e2:	42ac      	cmp	r4, r5
 800b6e4:	f73f ac1e 	bgt.w	800af24 <lv_draw_rect+0x6a8>
            mix          = (uint32_t)((uint32_t)(coords->y2 - work_area.y1) * 255) / height;
 800b6e8:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
            work_area.y1 = row;
 800b6ec:	f8ad 409a 	strh.w	r4, [sp, #154]	; 0x9a
            mix          = (uint32_t)((uint32_t)(coords->y2 - work_area.y1) * 255) / height;
 800b6f0:	1b12      	subs	r2, r2, r4
            act_color    = lv_color_mix(mcolor, gcolor, mix);
 800b6f2:	4649      	mov	r1, r9
            mix          = (uint32_t)((uint32_t)(coords->y2 - work_area.y1) * 255) / height;
 800b6f4:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
            act_color    = lv_color_mix(mcolor, gcolor, mix);
 800b6f8:	4640      	mov	r0, r8
            mix          = (uint32_t)((uint32_t)(coords->y2 - work_area.y1) * 255) / height;
 800b6fa:	fbb2 f2f6 	udiv	r2, r2, r6
            act_color    = lv_color_mix(mcolor, gcolor, mix);
 800b6fe:	b2d2      	uxtb	r2, r2
            work_area.y2 = row;
 800b700:	f8ad 409e 	strh.w	r4, [sp, #158]	; 0x9e
            act_color    = lv_color_mix(mcolor, gcolor, mix);
 800b704:	f7ff f850 	bl	800a7a8 <lv_color_mix>
 800b708:	3401      	adds	r4, #1
            lv_draw_fill(&work_area, mask, act_color, opa);
 800b70a:	4602      	mov	r2, r0
 800b70c:	463b      	mov	r3, r7
 800b70e:	4659      	mov	r1, fp
 800b710:	a826      	add	r0, sp, #152	; 0x98
 800b712:	f7fe fb85 	bl	8009e20 <lv_draw_fill>
 800b716:	b224      	sxth	r4, r4
 800b718:	e7e3      	b.n	800b6e2 <lv_draw_rect+0xe66>
            if(aa) {
 800b71a:	b11c      	cbz	r4, 800b724 <lv_draw_rect+0xea8>
                row_start += 2;
 800b71c:	1c9c      	adds	r4, r3, #2
 800b71e:	b224      	sxth	r4, r4
                row_end -= 2;
 800b720:	3d02      	subs	r5, #2
 800b722:	e7db      	b.n	800b6dc <lv_draw_rect+0xe60>
                row_start += 1;
 800b724:	1c5c      	adds	r4, r3, #1
 800b726:	b224      	sxth	r4, r4
                row_end -= 1;
 800b728:	3d01      	subs	r5, #1
 800b72a:	e7d7      	b.n	800b6dc <lv_draw_rect+0xe60>
        if(aa) {
 800b72c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d039      	beq.n	800b7a6 <lv_draw_rect+0xf2a>
            if(out_x_last != cir.x) {
 800b732:	f9bd 3078 	ldrsh.w	r3, [sp, #120]	; 0x78
 800b736:	4543      	cmp	r3, r8
 800b738:	d035      	beq.n	800b7a6 <lv_draw_rect+0xf2a>
                out_y_seg_end       = cir.y;
 800b73a:	f9bd 307a 	ldrsh.w	r3, [sp, #122]	; 0x7a
 800b73e:	9317      	str	r3, [sp, #92]	; 0x5c
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800b740:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800b744:	930f      	str	r3, [sp, #60]	; 0x3c
 800b746:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b748:	9b17      	ldr	r3, [sp, #92]	; 0x5c
                aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 800b74a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800b74e:	1a9b      	subs	r3, r3, r2
 800b750:	b21b      	sxth	r3, r3
 800b752:	9311      	str	r3, [sp, #68]	; 0x44
                mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 800b754:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b756:	eba3 0408 	sub.w	r4, r3, r8
 800b75a:	ebc4 2404 	rsb	r4, r4, r4, lsl #8
 800b75e:	9b05      	ldr	r3, [sp, #20]
 800b760:	fbb4 f4f3 	udiv	r4, r4, r3
 800b764:	b2e4      	uxtb	r4, r4
                aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 800b766:	4622      	mov	r2, r4
 800b768:	4648      	mov	r0, r9
 800b76a:	f7ff f81d 	bl	800a7a8 <lv_color_mix>
                aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 800b76e:	4622      	mov	r2, r4
                aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 800b770:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
                aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 800b774:	4649      	mov	r1, r9
 800b776:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 800b77a:	f7ff f815 	bl	800a7a8 <lv_color_mix>
 800b77e:	2300      	movs	r3, #0
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800b780:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
                aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 800b782:	9310      	str	r3, [sp, #64]	; 0x40
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800b784:	fa1f f388 	uxth.w	r3, r8
 800b788:	9313      	str	r3, [sp, #76]	; 0x4c
 800b78a:	4413      	add	r3, r2
                aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 800b78c:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800b790:	931a      	str	r3, [sp, #104]	; 0x68
 800b792:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
                for(i = 0; i < seg_size; i++) {
 800b796:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b798:	428b      	cmp	r3, r1
 800b79a:	f300 8090 	bgt.w	800b8be <lv_draw_rect+0x1042>
                out_y_seg_start = out_y_seg_end;
 800b79e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
                out_x_last      = cir.x;
 800b7a0:	f9bd 8078 	ldrsh.w	r8, [sp, #120]	; 0x78
                out_y_seg_start = out_y_seg_end;
 800b7a4:	930e      	str	r3, [sp, #56]	; 0x38
        if(mid_bot_area.y1 != LV_CIRC_OCT4_Y(cir) + lb_origo.y) mid_bot_refr = 1;
 800b7a6:	f9bd 407a 	ldrsh.w	r4, [sp, #122]	; 0x7a
 800b7aa:	9b16      	ldr	r3, [sp, #88]	; 0x58
        if(edge_bot_area.y1 != LV_CIRC_OCT2_Y(cir) + lb_origo.y) edge_bot_refr = 1;
 800b7ac:	9a16      	ldr	r2, [sp, #88]	; 0x58
        if(edge_top_area.y1 != LV_CIRC_OCT7_Y(cir) + lt_origo.y) edge_top_refr = 1;
 800b7ae:	f9bd 1082 	ldrsh.w	r1, [sp, #130]	; 0x82
        if(mid_bot_area.y1 != LV_CIRC_OCT4_Y(cir) + lb_origo.y) mid_bot_refr = 1;
 800b7b2:	f9bd 7092 	ldrsh.w	r7, [sp, #146]	; 0x92
        if(mid_top_area.y1 != LV_CIRC_OCT8_Y(cir) + lt_origo.y) mid_top_refr = 1;
 800b7b6:	f9bd 608a 	ldrsh.w	r6, [sp, #138]	; 0x8a
        if(mid_bot_area.y1 != LV_CIRC_OCT4_Y(cir) + lb_origo.y) mid_bot_refr = 1;
 800b7ba:	18e5      	adds	r5, r4, r3
        if(edge_bot_area.y1 != LV_CIRC_OCT2_Y(cir) + lb_origo.y) edge_bot_refr = 1;
 800b7bc:	f9bd 309a 	ldrsh.w	r3, [sp, #154]	; 0x9a
 800b7c0:	930c      	str	r3, [sp, #48]	; 0x30
 800b7c2:	f9bd 3078 	ldrsh.w	r3, [sp, #120]	; 0x78
 800b7c6:	441a      	add	r2, r3
 800b7c8:	920d      	str	r2, [sp, #52]	; 0x34
        if(mid_top_area.y1 != LV_CIRC_OCT8_Y(cir) + lt_origo.y) mid_top_refr = 1;
 800b7ca:	9a15      	ldr	r2, [sp, #84]	; 0x54
        if(edge_top_area.y1 != LV_CIRC_OCT7_Y(cir) + lt_origo.y) edge_top_refr = 1;
 800b7cc:	1ad3      	subs	r3, r2, r3
 800b7ce:	4299      	cmp	r1, r3
        if(mid_top_area.y1 != LV_CIRC_OCT8_Y(cir) + lt_origo.y) mid_top_refr = 1;
 800b7d0:	eba2 0404 	sub.w	r4, r2, r4
        if(edge_top_area.y1 != LV_CIRC_OCT7_Y(cir) + lt_origo.y) edge_top_refr = 1;
 800b7d4:	f040 874d 	bne.w	800c672 <lv_draw_rect+0x1df6>
        if(mid_top_refr != 0) {
 800b7d8:	42a6      	cmp	r6, r4
 800b7da:	d00a      	beq.n	800b7f2 <lv_draw_rect+0xf76>
            if(mcolor.full == gcolor.full)
 800b7dc:	9b03      	ldr	r3, [sp, #12]
 800b7de:	454b      	cmp	r3, r9
 800b7e0:	f040 8117 	bne.w	800ba12 <lv_draw_rect+0x1196>
                act_color = mcolor;
 800b7e4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
            lv_draw_fill(&mid_top_area, mask, act_color, opa);
 800b7e8:	9b04      	ldr	r3, [sp, #16]
 800b7ea:	4659      	mov	r1, fp
 800b7ec:	a822      	add	r0, sp, #136	; 0x88
 800b7ee:	f7fe fb17 	bl	8009e20 <lv_draw_fill>
        if(mid_bot_refr != 0) {
 800b7f2:	42af      	cmp	r7, r5
 800b7f4:	d00a      	beq.n	800b80c <lv_draw_rect+0xf90>
            if(mcolor.full == gcolor.full)
 800b7f6:	9b03      	ldr	r3, [sp, #12]
 800b7f8:	454b      	cmp	r3, r9
 800b7fa:	f040 811c 	bne.w	800ba36 <lv_draw_rect+0x11ba>
                act_color = mcolor;
 800b7fe:	f8bd 200c 	ldrh.w	r2, [sp, #12]
            lv_draw_fill(&mid_bot_area, mask, act_color, opa);
 800b802:	9b04      	ldr	r3, [sp, #16]
 800b804:	4659      	mov	r1, fp
 800b806:	a824      	add	r0, sp, #144	; 0x90
 800b808:	f7fe fb0a 	bl	8009e20 <lv_draw_fill>
        if(edge_bot_refr != 0) {
 800b80c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b80e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b810:	4293      	cmp	r3, r2
 800b812:	d00a      	beq.n	800b82a <lv_draw_rect+0xfae>
            if(mcolor.full == gcolor.full)
 800b814:	9b03      	ldr	r3, [sp, #12]
 800b816:	454b      	cmp	r3, r9
 800b818:	f040 811f 	bne.w	800ba5a <lv_draw_rect+0x11de>
                act_color = mcolor;
 800b81c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
            lv_draw_fill(&edge_bot_area, mask, act_color, opa);
 800b820:	9b04      	ldr	r3, [sp, #16]
 800b822:	4659      	mov	r1, fp
 800b824:	a826      	add	r0, sp, #152	; 0x98
 800b826:	f7fe fafb 	bl	8009e20 <lv_draw_fill>
        lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 800b82a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b82c:	f8bd 207a 	ldrh.w	r2, [sp, #122]	; 0x7a
 800b830:	f8bd 1078 	ldrh.w	r1, [sp, #120]	; 0x78
 800b834:	9806      	ldr	r0, [sp, #24]
 800b836:	441a      	add	r2, r3
                    rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
 800b838:	9b07      	ldr	r3, [sp, #28]
        lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 800b83a:	b212      	sxth	r2, r2
                    rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
 800b83c:	440b      	add	r3, r1
        lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 800b83e:	1a41      	subs	r1, r0, r1
 800b840:	9200      	str	r2, [sp, #0]
 800b842:	a824      	add	r0, sp, #144	; 0x90
 800b844:	b21b      	sxth	r3, r3
 800b846:	b209      	sxth	r1, r1
 800b848:	f001 fd8e 	bl	800d368 <lv_area_set>
        lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 800b84c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b84e:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
 800b852:	f8bd 107a 	ldrh.w	r1, [sp, #122]	; 0x7a
 800b856:	9806      	ldr	r0, [sp, #24]
 800b858:	441a      	add	r2, r3
                    rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
 800b85a:	9b07      	ldr	r3, [sp, #28]
        lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 800b85c:	b212      	sxth	r2, r2
                    rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
 800b85e:	440b      	add	r3, r1
        lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 800b860:	1a41      	subs	r1, r0, r1
 800b862:	9200      	str	r2, [sp, #0]
 800b864:	a826      	add	r0, sp, #152	; 0x98
 800b866:	b21b      	sxth	r3, r3
 800b868:	b209      	sxth	r1, r1
 800b86a:	f001 fd7d 	bl	800d368 <lv_area_set>
        lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800b86e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b870:	f8bd 207a 	ldrh.w	r2, [sp, #122]	; 0x7a
 800b874:	f8bd 1078 	ldrh.w	r1, [sp, #120]	; 0x78
 800b878:	9806      	ldr	r0, [sp, #24]
 800b87a:	1a9a      	subs	r2, r3, r2
                    rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
 800b87c:	9b07      	ldr	r3, [sp, #28]
        lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800b87e:	b212      	sxth	r2, r2
                    rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
 800b880:	440b      	add	r3, r1
        lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800b882:	1a41      	subs	r1, r0, r1
 800b884:	9200      	str	r2, [sp, #0]
 800b886:	a822      	add	r0, sp, #136	; 0x88
 800b888:	b21b      	sxth	r3, r3
 800b88a:	b209      	sxth	r1, r1
 800b88c:	f001 fd6c 	bl	800d368 <lv_area_set>
        lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800b890:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b892:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
 800b896:	f8bd 107a 	ldrh.w	r1, [sp, #122]	; 0x7a
 800b89a:	9806      	ldr	r0, [sp, #24]
 800b89c:	1a9a      	subs	r2, r3, r2
                    rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
 800b89e:	9b07      	ldr	r3, [sp, #28]
        lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800b8a0:	b212      	sxth	r2, r2
                    rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
 800b8a2:	440b      	add	r3, r1
        lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800b8a4:	1a41      	subs	r1, r0, r1
 800b8a6:	9200      	str	r2, [sp, #0]
 800b8a8:	a820      	add	r0, sp, #128	; 0x80
 800b8aa:	b21b      	sxth	r3, r3
 800b8ac:	b209      	sxth	r1, r1
 800b8ae:	f001 fd5b 	bl	800d368 <lv_area_set>
        lv_circ_next(&cir, &cir_tmp);
 800b8b2:	a91d      	add	r1, sp, #116	; 0x74
 800b8b4:	9819      	ldr	r0, [sp, #100]	; 0x64
 800b8b6:	f001 fe02 	bl	800d4be <lv_circ_next>
 800b8ba:	f7ff bbda 	b.w	800b072 <lv_draw_rect+0x7f6>
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 800b8be:	9b11      	ldr	r3, [sp, #68]	; 0x44
                        aa_opa = antialias_get_opa_circ(seg_size, i, opa);
 800b8c0:	9a04      	ldr	r2, [sp, #16]
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 800b8c2:	2b01      	cmp	r3, #1
 800b8c4:	f000 808d 	beq.w	800b9e2 <lv_draw_rect+0x1166>
                        aa_opa = antialias_get_opa_circ(seg_size, i, opa);
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f7fe ffb5 	bl	800a838 <antialias_get_opa_circ>
 800b8ce:	4605      	mov	r5, r0
 800b8d0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800b8d4:	9312      	str	r3, [sp, #72]	; 0x48
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800b8d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b8d8:	9b07      	ldr	r3, [sp, #28]
 800b8da:	f9bd 6068 	ldrsh.w	r6, [sp, #104]	; 0x68
 800b8de:	9500      	str	r5, [sp, #0]
 800b8e0:	189c      	adds	r4, r3, r2
 800b8e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b8e4:	441c      	add	r4, r3
 800b8e6:	b224      	sxth	r4, r4
 800b8e8:	4631      	mov	r1, r6
 800b8ea:	4620      	mov	r0, r4
 800b8ec:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 800b8f0:	465a      	mov	r2, fp
 800b8f2:	f7fe fa45 	bl	8009d80 <lv_draw_px>
                    lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 800b8f6:	9b06      	ldr	r3, [sp, #24]
 800b8f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b8fa:	9500      	str	r5, [sp, #0]
 800b8fc:	1a9f      	subs	r7, r3, r2
 800b8fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b900:	1aff      	subs	r7, r7, r3
 800b902:	b23f      	sxth	r7, r7
 800b904:	4631      	mov	r1, r6
 800b906:	4638      	mov	r0, r7
 800b908:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 800b90c:	465a      	mov	r2, fp
 800b90e:	f7fe fa37 	bl	8009d80 <lv_draw_px>
                    lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 800b912:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b914:	9500      	str	r5, [sp, #0]
 800b916:	1e5e      	subs	r6, r3, #1
 800b918:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b91a:	1af6      	subs	r6, r6, r3
 800b91c:	b236      	sxth	r6, r6
 800b91e:	4631      	mov	r1, r6
 800b920:	4638      	mov	r0, r7
 800b922:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b926:	465a      	mov	r2, fp
 800b928:	f7fe fa2a 	bl	8009d80 <lv_draw_px>
                    lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 800b92c:	4631      	mov	r1, r6
 800b92e:	4620      	mov	r0, r4
 800b930:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b934:	9500      	str	r5, [sp, #0]
 800b936:	465a      	mov	r2, fp
 800b938:	f7fe fa22 	bl	8009d80 <lv_draw_px>
                    mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 800b93c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b93e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
                    aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 800b940:	f8bd 000c 	ldrh.w	r0, [sp, #12]
                    mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 800b944:	1a9e      	subs	r6, r3, r2
 800b946:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b948:	441e      	add	r6, r3
 800b94a:	ebc6 2606 	rsb	r6, r6, r6, lsl #8
 800b94e:	9b05      	ldr	r3, [sp, #20]
 800b950:	fbb6 f6f3 	udiv	r6, r6, r3
 800b954:	b2f6      	uxtb	r6, r6
                    aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 800b956:	4632      	mov	r2, r6
 800b958:	4649      	mov	r1, r9
 800b95a:	f7fe ff25 	bl	800a7a8 <lv_color_mix>
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800b95e:	9b07      	ldr	r3, [sp, #28]
 800b960:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b962:	9500      	str	r5, [sp, #0]
 800b964:	1c5f      	adds	r7, r3, #1
 800b966:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b968:	441f      	add	r7, r3
 800b96a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b96c:	4413      	add	r3, r2
 800b96e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b970:	4413      	add	r3, r2
 800b972:	b21b      	sxth	r3, r3
 800b974:	9318      	str	r3, [sp, #96]	; 0x60
 800b976:	b23f      	sxth	r7, r7
                    aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 800b978:	4604      	mov	r4, r0
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800b97a:	4603      	mov	r3, r0
 800b97c:	465a      	mov	r2, fp
 800b97e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b980:	4638      	mov	r0, r7
 800b982:	f7fe f9fd 	bl	8009d80 <lv_draw_px>
                    lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 800b986:	9b06      	ldr	r3, [sp, #24]
 800b988:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b98a:	9500      	str	r5, [sp, #0]
 800b98c:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800b990:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b992:	eba8 0803 	sub.w	r8, r8, r3
 800b996:	fa0f f888 	sxth.w	r8, r8
 800b99a:	4623      	mov	r3, r4
 800b99c:	465a      	mov	r2, fp
 800b99e:	4640      	mov	r0, r8
 800b9a0:	f7fe f9ee 	bl	8009d80 <lv_draw_px>
                    aa_color_ver = lv_color_mix(gcolor, mcolor, mix);
 800b9a4:	4632      	mov	r2, r6
 800b9a6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b9aa:	4648      	mov	r0, r9
 800b9ac:	f7fe fefc 	bl	800a7a8 <lv_color_mix>
                    lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 800b9b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b9b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9b4:	9500      	str	r5, [sp, #0]
 800b9b6:	1a9b      	subs	r3, r3, r2
 800b9b8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b9ba:	1a9b      	subs	r3, r3, r2
 800b9bc:	b21e      	sxth	r6, r3
                    aa_color_ver = lv_color_mix(gcolor, mcolor, mix);
 800b9be:	4604      	mov	r4, r0
                    lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	465a      	mov	r2, fp
 800b9c4:	4631      	mov	r1, r6
 800b9c6:	4640      	mov	r0, r8
 800b9c8:	f7fe f9da 	bl	8009d80 <lv_draw_px>
                    lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 800b9cc:	4623      	mov	r3, r4
 800b9ce:	9500      	str	r5, [sp, #0]
 800b9d0:	465a      	mov	r2, fp
 800b9d2:	4631      	mov	r1, r6
 800b9d4:	4638      	mov	r0, r7
 800b9d6:	f7fe f9d3 	bl	8009d80 <lv_draw_px>
 800b9da:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b9dc:	3301      	adds	r3, #1
 800b9de:	9310      	str	r3, [sp, #64]	; 0x40
 800b9e0:	e6d7      	b.n	800b792 <lv_draw_rect+0xf16>
                        aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800b9e2:	9811      	ldr	r0, [sp, #68]	; 0x44
 800b9e4:	f7fe f8f2 	bl	8009bcc <lv_draw_aa_get_opa>
 800b9e8:	9b04      	ldr	r3, [sp, #16]
 800b9ea:	1a18      	subs	r0, r3, r0
 800b9ec:	b2c5      	uxtb	r5, r0
 800b9ee:	e76f      	b.n	800b8d0 <lv_draw_rect+0x1054>
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
 800b9f0:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
 800b9f4:	9b05      	ldr	r3, [sp, #20]
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800b9f6:	f8bd 000c 	ldrh.w	r0, [sp, #12]
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
 800b9fa:	1a52      	subs	r2, r2, r1
 800b9fc:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800ba00:	4649      	mov	r1, r9
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
 800ba02:	fbb2 f2f3 	udiv	r2, r2, r3
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800ba06:	b2d2      	uxtb	r2, r2
 800ba08:	f7fe fece 	bl	800a7a8 <lv_color_mix>
 800ba0c:	4602      	mov	r2, r0
 800ba0e:	f000 be36 	b.w	800c67e <lv_draw_rect+0x1e02>
                mix       = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
 800ba12:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
 800ba16:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800ba1a:	f8bd 000c 	ldrh.w	r0, [sp, #12]
                mix       = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
 800ba1e:	1ad2      	subs	r2, r2, r3
 800ba20:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 800ba24:	9b05      	ldr	r3, [sp, #20]
 800ba26:	fbb2 f2f3 	udiv	r2, r2, r3
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800ba2a:	4649      	mov	r1, r9
 800ba2c:	b2d2      	uxtb	r2, r2
 800ba2e:	f7fe febb 	bl	800a7a8 <lv_color_mix>
 800ba32:	4602      	mov	r2, r0
 800ba34:	e6d8      	b.n	800b7e8 <lv_draw_rect+0xf6c>
                mix       = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 800ba36:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 800ba3a:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800ba3e:	f8bd 000c 	ldrh.w	r0, [sp, #12]
                mix       = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 800ba42:	1ad2      	subs	r2, r2, r3
 800ba44:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 800ba48:	9b05      	ldr	r3, [sp, #20]
 800ba4a:	fbb2 f2f3 	udiv	r2, r2, r3
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800ba4e:	4649      	mov	r1, r9
 800ba50:	b2d2      	uxtb	r2, r2
 800ba52:	f7fe fea9 	bl	800a7a8 <lv_color_mix>
 800ba56:	4602      	mov	r2, r0
 800ba58:	e6d3      	b.n	800b802 <lv_draw_rect+0xf86>
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
 800ba5a:	f9bd 309a 	ldrsh.w	r3, [sp, #154]	; 0x9a
 800ba5e:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800ba62:	f8bd 000c 	ldrh.w	r0, [sp, #12]
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
 800ba66:	1ad2      	subs	r2, r2, r3
 800ba68:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 800ba6c:	9b05      	ldr	r3, [sp, #20]
 800ba6e:	fbb2 f2f3 	udiv	r2, r2, r3
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800ba72:	4649      	mov	r1, r9
 800ba74:	b2d2      	uxtb	r2, r2
 800ba76:	f7fe fe97 	bl	800a7a8 <lv_color_mix>
 800ba7a:	4602      	mov	r2, r0
 800ba7c:	e6d0      	b.n	800b820 <lv_draw_rect+0xfa4>
        mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
 800ba7e:	f9bd 3082 	ldrsh.w	r3, [sp, #130]	; 0x82
 800ba82:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
        act_color = lv_color_mix(mcolor, gcolor, mix);
 800ba86:	f8bd 000c 	ldrh.w	r0, [sp, #12]
        mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
 800ba8a:	1ad2      	subs	r2, r2, r3
 800ba8c:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 800ba90:	9b05      	ldr	r3, [sp, #20]
 800ba92:	fbb2 f2f3 	udiv	r2, r2, r3
        act_color = lv_color_mix(mcolor, gcolor, mix);
 800ba96:	4649      	mov	r1, r9
 800ba98:	b2d2      	uxtb	r2, r2
 800ba9a:	f7fe fe85 	bl	800a7a8 <lv_color_mix>
 800ba9e:	4602      	mov	r2, r0
 800baa0:	f7ff baf3 	b.w	800b08a <lv_draw_rect+0x80e>
            mix       = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
 800baa4:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
            act_color = lv_color_mix(mcolor, gcolor, mix);
 800baa8:	f8bd 000c 	ldrh.w	r0, [sp, #12]
            mix       = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
 800baac:	1ad2      	subs	r2, r2, r3
 800baae:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 800bab2:	9b05      	ldr	r3, [sp, #20]
 800bab4:	fbb2 f2f3 	udiv	r2, r2, r3
            act_color = lv_color_mix(mcolor, gcolor, mix);
 800bab8:	4649      	mov	r1, r9
 800baba:	b2d2      	uxtb	r2, r2
 800babc:	f7fe fe74 	bl	800a7a8 <lv_color_mix>
 800bac0:	4602      	mov	r2, r0
 800bac2:	f7ff baf3 	b.w	800b0ac <lv_draw_rect+0x830>
        mix       = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 800bac6:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 800baca:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
        act_color = lv_color_mix(mcolor, gcolor, mix);
 800bace:	f8bd 000c 	ldrh.w	r0, [sp, #12]
        mix       = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 800bad2:	1ad2      	subs	r2, r2, r3
 800bad4:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 800bad8:	9b05      	ldr	r3, [sp, #20]
 800bada:	fbb2 f2f3 	udiv	r2, r2, r3
        act_color = lv_color_mix(mcolor, gcolor, mix);
 800bade:	4649      	mov	r1, r9
 800bae0:	b2d2      	uxtb	r2, r2
 800bae2:	f7fe fe61 	bl	800a7a8 <lv_color_mix>
 800bae6:	4602      	mov	r2, r0
 800bae8:	f7ff baeb 	b.w	800b0c2 <lv_draw_rect+0x846>
            mix       = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
 800baec:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
            act_color = lv_color_mix(mcolor, gcolor, mix);
 800baf0:	f8bd 000c 	ldrh.w	r0, [sp, #12]
            mix       = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
 800baf4:	1ad2      	subs	r2, r2, r3
 800baf6:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 800bafa:	9b05      	ldr	r3, [sp, #20]
 800bafc:	fbb2 f2f3 	udiv	r2, r2, r3
            act_color = lv_color_mix(mcolor, gcolor, mix);
 800bb00:	4649      	mov	r1, r9
 800bb02:	b2d2      	uxtb	r2, r2
 800bb04:	f7fe fe50 	bl	800a7a8 <lv_color_mix>
 800bb08:	4602      	mov	r2, r0
 800bb0a:	f7ff baeb 	b.w	800b0e4 <lv_draw_rect+0x868>
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800bb0e:	9a04      	ldr	r2, [sp, #16]
 800bb10:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800bb12:	f7fe f85b 	bl	8009bcc <lv_draw_aa_get_opa>
 800bb16:	9b04      	ldr	r3, [sp, #16]
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800bb18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bb1a:	f9bd 5058 	ldrsh.w	r5, [sp, #88]	; 0x58
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800bb1e:	1a18      	subs	r0, r3, r0
 800bb20:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800bb24:	9311      	str	r3, [sp, #68]	; 0x44
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800bb26:	9b07      	ldr	r3, [sp, #28]
 800bb28:	189c      	adds	r4, r3, r2
 800bb2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bb2c:	441c      	add	r4, r3
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800bb2e:	b2c6      	uxtb	r6, r0
 800bb30:	b224      	sxth	r4, r4
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800bb32:	4629      	mov	r1, r5
 800bb34:	4620      	mov	r0, r4
 800bb36:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800bb3a:	9600      	str	r6, [sp, #0]
 800bb3c:	465a      	mov	r2, fp
 800bb3e:	f7fe f91f 	bl	8009d80 <lv_draw_px>
            lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 800bb42:	9b06      	ldr	r3, [sp, #24]
 800bb44:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bb46:	9600      	str	r6, [sp, #0]
 800bb48:	1a9f      	subs	r7, r3, r2
 800bb4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bb4c:	1aff      	subs	r7, r7, r3
 800bb4e:	b23f      	sxth	r7, r7
 800bb50:	4629      	mov	r1, r5
 800bb52:	4638      	mov	r0, r7
 800bb54:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800bb58:	465a      	mov	r2, fp
 800bb5a:	f7fe f911 	bl	8009d80 <lv_draw_px>
            lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 800bb5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb60:	9600      	str	r6, [sp, #0]
 800bb62:	1e5d      	subs	r5, r3, #1
 800bb64:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bb66:	1aed      	subs	r5, r5, r3
 800bb68:	b22d      	sxth	r5, r5
 800bb6a:	4629      	mov	r1, r5
 800bb6c:	4638      	mov	r0, r7
 800bb6e:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 800bb72:	465a      	mov	r2, fp
 800bb74:	f7fe f904 	bl	8009d80 <lv_draw_px>
            lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 800bb78:	4629      	mov	r1, r5
 800bb7a:	4620      	mov	r0, r4
 800bb7c:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 800bb80:	9600      	str	r6, [sp, #0]
 800bb82:	465a      	mov	r2, fp
 800bb84:	f7fe f8fc 	bl	8009d80 <lv_draw_px>
            mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 800bb88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
            aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 800bb8c:	f8bd 000c 	ldrh.w	r0, [sp, #12]
            mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 800bb90:	1a9d      	subs	r5, r3, r2
 800bb92:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bb94:	441d      	add	r5, r3
 800bb96:	ebc5 2505 	rsb	r5, r5, r5, lsl #8
 800bb9a:	9b05      	ldr	r3, [sp, #20]
 800bb9c:	fbb5 f5f3 	udiv	r5, r5, r3
 800bba0:	b2ed      	uxtb	r5, r5
            aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 800bba2:	462a      	mov	r2, r5
 800bba4:	4649      	mov	r1, r9
 800bba6:	f7fe fdff 	bl	800a7a8 <lv_color_mix>
            lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, aa_color_ver,
 800bbaa:	9b07      	ldr	r3, [sp, #28]
 800bbac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bbae:	9600      	str	r6, [sp, #0]
 800bbb0:	1c5f      	adds	r7, r3, #1
 800bbb2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bbb4:	441f      	add	r7, r3
 800bbb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bbb8:	4413      	add	r3, r2
 800bbba:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bbbc:	4413      	add	r3, r2
 800bbbe:	b21b      	sxth	r3, r3
 800bbc0:	9315      	str	r3, [sp, #84]	; 0x54
 800bbc2:	b23f      	sxth	r7, r7
            aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 800bbc4:	4604      	mov	r4, r0
            lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, aa_color_ver,
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	465a      	mov	r2, fp
 800bbca:	9915      	ldr	r1, [sp, #84]	; 0x54
 800bbcc:	4638      	mov	r0, r7
 800bbce:	f7fe f8d7 	bl	8009d80 <lv_draw_px>
            lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask, aa_color_ver,
 800bbd2:	9b06      	ldr	r3, [sp, #24]
 800bbd4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bbd6:	9915      	ldr	r1, [sp, #84]	; 0x54
 800bbd8:	9600      	str	r6, [sp, #0]
 800bbda:	3b01      	subs	r3, #1
 800bbdc:	1a9b      	subs	r3, r3, r2
 800bbde:	b21b      	sxth	r3, r3
 800bbe0:	9314      	str	r3, [sp, #80]	; 0x50
 800bbe2:	465a      	mov	r2, fp
 800bbe4:	4623      	mov	r3, r4
 800bbe6:	9814      	ldr	r0, [sp, #80]	; 0x50
 800bbe8:	f7fe f8ca 	bl	8009d80 <lv_draw_px>
            aa_color_ver = lv_color_mix(gcolor, mcolor, mix);
 800bbec:	462a      	mov	r2, r5
 800bbee:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bbf2:	4648      	mov	r0, r9
 800bbf4:	f7fe fdd8 	bl	800a7a8 <lv_color_mix>
            lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask, aa_color_ver,
 800bbf8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bbfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbfc:	9600      	str	r6, [sp, #0]
 800bbfe:	1a9b      	subs	r3, r3, r2
 800bc00:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bc02:	1a9b      	subs	r3, r3, r2
 800bc04:	b21d      	sxth	r5, r3
            aa_color_ver = lv_color_mix(gcolor, mcolor, mix);
 800bc06:	4604      	mov	r4, r0
            lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask, aa_color_ver,
 800bc08:	4603      	mov	r3, r0
 800bc0a:	465a      	mov	r2, fp
 800bc0c:	4629      	mov	r1, r5
 800bc0e:	9814      	ldr	r0, [sp, #80]	; 0x50
 800bc10:	f7fe f8b6 	bl	8009d80 <lv_draw_px>
            lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask, aa_color_ver,
 800bc14:	4623      	mov	r3, r4
 800bc16:	9600      	str	r6, [sp, #0]
 800bc18:	465a      	mov	r2, fp
 800bc1a:	4629      	mov	r1, r5
 800bc1c:	4638      	mov	r0, r7
 800bc1e:	f7fe f8af 	bl	8009d80 <lv_draw_px>
 800bc22:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bc24:	3301      	adds	r3, #1
 800bc26:	9310      	str	r3, [sp, #64]	; 0x40
 800bc28:	f7ff bab8 	b.w	800b19c <lv_draw_rect+0x920>
    corner_size++;
 800bc2c:	3301      	adds	r3, #1
 800bc2e:	b29b      	uxth	r3, r3
 800bc30:	9303      	str	r3, [sp, #12]
    if(part & LV_BORDER_TOP)
 800bc32:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 800bc36:	9305      	str	r3, [sp, #20]
 800bc38:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 800bc3c:	2a00      	cmp	r2, #0
 800bc3e:	f000 8143 	beq.w	800bec8 <lv_draw_rect+0x164c>
        work_area.y1 = coords->y1 + corner_size;
 800bc42:	9a03      	ldr	r2, [sp, #12]
 800bc44:	4413      	add	r3, r2
        work_area.y1 = coords->y1 + radius;
 800bc46:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
    if(part & LV_BORDER_BOTTOM)
 800bc4a:	f015 0301 	ands.w	r3, r5, #1
        work_area.y2 = coords->y2 - corner_size;
 800bc4e:	bf18      	it	ne
 800bc50:	9a03      	ldrne	r2, [sp, #12]
    if(part & LV_BORDER_BOTTOM)
 800bc52:	9306      	str	r3, [sp, #24]
 800bc54:	f8ba 3006 	ldrh.w	r3, [sl, #6]
        work_area.y2 = coords->y2 - corner_size;
 800bc58:	bf14      	ite	ne
 800bc5a:	1a9b      	subne	r3, r3, r2
        work_area.y2 = coords->y2 - radius;
 800bc5c:	eba3 0309 	subeq.w	r3, r3, r9
    if(part & LV_BORDER_LEFT) {
 800bc60:	076a      	lsls	r2, r5, #29
        work_area.y2 = coords->y2 - radius;
 800bc62:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
    if(part & LV_BORDER_LEFT) {
 800bc66:	d50c      	bpl.n	800bc82 <lv_draw_rect+0x1406>
        work_area.x1 = coords->x1;
 800bc68:	f9ba 3000 	ldrsh.w	r3, [sl]
 800bc6c:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
        work_area.x2 = work_area.x1 + bwidth;
 800bc70:	4433      	add	r3, r6
 800bc72:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
        lv_draw_fill(&work_area, mask, color, opa);
 800bc76:	463a      	mov	r2, r7
 800bc78:	4623      	mov	r3, r4
 800bc7a:	4659      	mov	r1, fp
 800bc7c:	a826      	add	r0, sp, #152	; 0x98
 800bc7e:	f7fe f8cf 	bl	8009e20 <lv_draw_fill>
    if(part & LV_BORDER_RIGHT) {
 800bc82:	072b      	lsls	r3, r5, #28
 800bc84:	d50c      	bpl.n	800bca0 <lv_draw_rect+0x1424>
        work_area.x2 = coords->x2;
 800bc86:	f9ba 3004 	ldrsh.w	r3, [sl, #4]
 800bc8a:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
        work_area.x1 = work_area.x2 - bwidth;
 800bc8e:	a828      	add	r0, sp, #160	; 0xa0
 800bc90:	1b9b      	subs	r3, r3, r6
 800bc92:	f820 3d08 	strh.w	r3, [r0, #-8]!
        lv_draw_fill(&work_area, mask, color, opa);
 800bc96:	463a      	mov	r2, r7
 800bc98:	4623      	mov	r3, r4
 800bc9a:	4659      	mov	r1, fp
 800bc9c:	f7fe f8c0 	bl	8009e20 <lv_draw_fill>
    work_area.x1 = coords->x1 + corner_size - length_corr;
 800bca0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800bca4:	9a03      	ldr	r2, [sp, #12]
 800bca6:	f8ba 1000 	ldrh.w	r1, [sl]
 800bcaa:	1ad2      	subs	r2, r2, r3
 800bcac:	440a      	add	r2, r1
 800bcae:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
    work_area.x2 = coords->x2 - corner_size + length_corr;
 800bcb2:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 800bcb6:	4413      	add	r3, r2
 800bcb8:	9a03      	ldr	r2, [sp, #12]
 800bcba:	1a9b      	subs	r3, r3, r2
 800bcbc:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
    if(part & LV_BORDER_TOP) {
 800bcc0:	9b05      	ldr	r3, [sp, #20]
 800bcc2:	b163      	cbz	r3, 800bcde <lv_draw_rect+0x1462>
        work_area.y1 = coords->y1;
 800bcc4:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
 800bcc8:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
        work_area.y2 = coords->y1 + bwidth;
 800bccc:	4433      	add	r3, r6
 800bcce:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
        lv_draw_fill(&work_area, mask, color, opa);
 800bcd2:	463a      	mov	r2, r7
 800bcd4:	4623      	mov	r3, r4
 800bcd6:	4659      	mov	r1, fp
 800bcd8:	a826      	add	r0, sp, #152	; 0x98
 800bcda:	f7fe f8a1 	bl	8009e20 <lv_draw_fill>
    if(part & LV_BORDER_BOTTOM) {
 800bcde:	9b06      	ldr	r3, [sp, #24]
 800bce0:	b163      	cbz	r3, 800bcfc <lv_draw_rect+0x1480>
        work_area.y2 = coords->y2;
 800bce2:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 800bce6:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
        work_area.y1 = work_area.y2 - bwidth;
 800bcea:	1b9b      	subs	r3, r3, r6
 800bcec:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
        lv_draw_fill(&work_area, mask, color, opa);
 800bcf0:	463a      	mov	r2, r7
 800bcf2:	4623      	mov	r3, r4
 800bcf4:	4659      	mov	r1, fp
 800bcf6:	a826      	add	r0, sp, #152	; 0x98
 800bcf8:	f7fe f892 	bl	8009e20 <lv_draw_fill>
    if(length_corr != 0) {
 800bcfc:	9b04      	ldr	r3, [sp, #16]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d07b      	beq.n	800bdfa <lv_draw_rect+0x157e>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800bd02:	f005 0306 	and.w	r3, r5, #6
 800bd06:	2b06      	cmp	r3, #6
 800bd08:	d119      	bne.n	800bd3e <lv_draw_rect+0x14c2>
            work_area.x1 = coords->x1;
 800bd0a:	f9ba 2000 	ldrsh.w	r2, [sl]
 800bd0e:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
            work_area.x2 = coords->x1 + radius + aa;
 800bd12:	fa1f f388 	uxth.w	r3, r8
 800bd16:	441a      	add	r2, r3
 800bd18:	444a      	add	r2, r9
 800bd1a:	f8ad 209c 	strh.w	r2, [sp, #156]	; 0x9c
            work_area.y1 = coords->y1 + radius + 1 + aa;
 800bd1e:	f8ba 2002 	ldrh.w	r2, [sl, #2]
 800bd22:	1c51      	adds	r1, r2, #1
 800bd24:	440b      	add	r3, r1
 800bd26:	444b      	add	r3, r9
            work_area.y2 = coords->y1 + bwidth;
 800bd28:	4432      	add	r2, r6
            work_area.y1 = coords->y1 + radius + 1 + aa;
 800bd2a:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            work_area.y2 = coords->y1 + bwidth;
 800bd2e:	f8ad 209e 	strh.w	r2, [sp, #158]	; 0x9e
            lv_draw_fill(&work_area, mask, color, opa);
 800bd32:	4623      	mov	r3, r4
 800bd34:	463a      	mov	r2, r7
 800bd36:	4659      	mov	r1, fp
 800bd38:	a826      	add	r0, sp, #152	; 0x98
 800bd3a:	f7fe f871 	bl	8009e20 <lv_draw_fill>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800bd3e:	f005 030a 	and.w	r3, r5, #10
 800bd42:	2b0a      	cmp	r3, #10
 800bd44:	d11a      	bne.n	800bd7c <lv_draw_rect+0x1500>
            work_area.x1 = coords->x2 - radius - aa;
 800bd46:	f9ba 1004 	ldrsh.w	r1, [sl, #4]
            work_area.x2 = coords->x2;
 800bd4a:	f8ad 109c 	strh.w	r1, [sp, #156]	; 0x9c
            work_area.x1 = coords->x2 - radius - aa;
 800bd4e:	fa1f f388 	uxth.w	r3, r8
 800bd52:	eba1 0209 	sub.w	r2, r1, r9
 800bd56:	1ad2      	subs	r2, r2, r3
 800bd58:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
            work_area.y1 = coords->y1 + radius + 1 + aa;
 800bd5c:	f8ba 2002 	ldrh.w	r2, [sl, #2]
 800bd60:	1c51      	adds	r1, r2, #1
 800bd62:	440b      	add	r3, r1
 800bd64:	444b      	add	r3, r9
            work_area.y2 = coords->y1 + bwidth;
 800bd66:	4432      	add	r2, r6
            work_area.y1 = coords->y1 + radius + 1 + aa;
 800bd68:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            work_area.y2 = coords->y1 + bwidth;
 800bd6c:	f8ad 209e 	strh.w	r2, [sp, #158]	; 0x9e
            lv_draw_fill(&work_area, mask, color, opa);
 800bd70:	4623      	mov	r3, r4
 800bd72:	463a      	mov	r2, r7
 800bd74:	4659      	mov	r1, fp
 800bd76:	a826      	add	r0, sp, #152	; 0x98
 800bd78:	f7fe f852 	bl	8009e20 <lv_draw_fill>
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800bd7c:	f005 0305 	and.w	r3, r5, #5
 800bd80:	2b05      	cmp	r3, #5
 800bd82:	d11a      	bne.n	800bdba <lv_draw_rect+0x153e>
            work_area.x1 = coords->x1;
 800bd84:	f9ba 2000 	ldrsh.w	r2, [sl]
            work_area.y1 = coords->y2 - bwidth;
 800bd88:	f8ba 3006 	ldrh.w	r3, [sl, #6]
            work_area.x1 = coords->x1;
 800bd8c:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
            work_area.x2 = coords->x1 + radius + aa;
 800bd90:	fa1f f188 	uxth.w	r1, r8
 800bd94:	440a      	add	r2, r1
 800bd96:	444a      	add	r2, r9
            work_area.y2 = coords->y2 - radius - 1 - aa;
 800bd98:	43c9      	mvns	r1, r1
            work_area.x2 = coords->x1 + radius + aa;
 800bd9a:	f8ad 209c 	strh.w	r2, [sp, #156]	; 0x9c
            work_area.y1 = coords->y2 - bwidth;
 800bd9e:	1b9a      	subs	r2, r3, r6
            work_area.y2 = coords->y2 - radius - 1 - aa;
 800bda0:	440b      	add	r3, r1
 800bda2:	eba3 0309 	sub.w	r3, r3, r9
            work_area.y1 = coords->y2 - bwidth;
 800bda6:	f8ad 209a 	strh.w	r2, [sp, #154]	; 0x9a
            work_area.y2 = coords->y2 - radius - 1 - aa;
 800bdaa:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&work_area, mask, color, opa);
 800bdae:	463a      	mov	r2, r7
 800bdb0:	4623      	mov	r3, r4
 800bdb2:	4659      	mov	r1, fp
 800bdb4:	a826      	add	r0, sp, #152	; 0x98
 800bdb6:	f7fe f833 	bl	8009e20 <lv_draw_fill>
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800bdba:	f005 0309 	and.w	r3, r5, #9
 800bdbe:	2b09      	cmp	r3, #9
 800bdc0:	d11b      	bne.n	800bdfa <lv_draw_rect+0x157e>
            work_area.x1 = coords->x2 - radius - aa;
 800bdc2:	f9ba 1004 	ldrsh.w	r1, [sl, #4]
            work_area.x2 = coords->x2;
 800bdc6:	f8ad 109c 	strh.w	r1, [sp, #156]	; 0x9c
            work_area.x1 = coords->x2 - radius - aa;
 800bdca:	eba1 0309 	sub.w	r3, r1, r9
 800bdce:	fa1f f288 	uxth.w	r2, r8
 800bdd2:	1a9b      	subs	r3, r3, r2
 800bdd4:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            work_area.y1 = coords->y2 - bwidth;
 800bdd8:	f8ba 3006 	ldrh.w	r3, [sl, #6]
            work_area.y2 = coords->y2 - radius - 1 - aa;
 800bddc:	43d2      	mvns	r2, r2
            work_area.y1 = coords->y2 - bwidth;
 800bdde:	1b9e      	subs	r6, r3, r6
            work_area.y2 = coords->y2 - radius - 1 - aa;
 800bde0:	4413      	add	r3, r2
 800bde2:	eba3 0909 	sub.w	r9, r3, r9
            lv_draw_fill(&work_area, mask, color, opa);
 800bde6:	463a      	mov	r2, r7
 800bde8:	4623      	mov	r3, r4
 800bdea:	4659      	mov	r1, fp
 800bdec:	a826      	add	r0, sp, #152	; 0x98
            work_area.y1 = coords->y2 - bwidth;
 800bdee:	f8ad 609a 	strh.w	r6, [sp, #154]	; 0x9a
            work_area.y2 = coords->y2 - radius - 1 - aa;
 800bdf2:	f8ad 909e 	strh.w	r9, [sp, #158]	; 0x9e
            lv_draw_fill(&work_area, mask, color, opa);
 800bdf6:	f7fe f813 	bl	8009e20 <lv_draw_fill>
    if(style->body.radius == 0) {
 800bdfa:	9b02      	ldr	r3, [sp, #8]
 800bdfc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800be00:	2b00      	cmp	r3, #0
 800be02:	f47f aaef 	bne.w	800b3e4 <lv_draw_rect+0xb68>
        if(part & (LV_BORDER_TOP | LV_BORDER_LEFT)) {
 800be06:	f015 0f06 	tst.w	r5, #6
 800be0a:	d015      	beq.n	800be38 <lv_draw_rect+0x15bc>
            work_area.x1 = coords->x1;
 800be0c:	f9ba 2000 	ldrsh.w	r2, [sl]
 800be10:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
            work_area.x2 = coords->x1 + aa;
 800be14:	fa1f f388 	uxth.w	r3, r8
 800be18:	441a      	add	r2, r3
 800be1a:	f8ad 209c 	strh.w	r2, [sp, #156]	; 0x9c
            work_area.y1 = coords->y1;
 800be1e:	f9ba 2002 	ldrsh.w	r2, [sl, #2]
 800be22:	f8ad 209a 	strh.w	r2, [sp, #154]	; 0x9a
            work_area.y2 = coords->y1 + aa;
 800be26:	4413      	add	r3, r2
 800be28:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&work_area, mask, color, opa);
 800be2c:	463a      	mov	r2, r7
 800be2e:	4623      	mov	r3, r4
 800be30:	4659      	mov	r1, fp
 800be32:	a826      	add	r0, sp, #152	; 0x98
 800be34:	f7fd fff4 	bl	8009e20 <lv_draw_fill>
        if(part & (LV_BORDER_TOP | LV_BORDER_RIGHT)) {
 800be38:	f015 0f0a 	tst.w	r5, #10
 800be3c:	d015      	beq.n	800be6a <lv_draw_rect+0x15ee>
            work_area.x1 = coords->x2 - aa;
 800be3e:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
            work_area.x2 = coords->x2;
 800be42:	f8ad 209c 	strh.w	r2, [sp, #156]	; 0x9c
            work_area.x1 = coords->x2 - aa;
 800be46:	fa1f f388 	uxth.w	r3, r8
 800be4a:	1ad1      	subs	r1, r2, r3
            work_area.y1 = coords->y1;
 800be4c:	f9ba 2002 	ldrsh.w	r2, [sl, #2]
            work_area.x1 = coords->x2 - aa;
 800be50:	f8ad 1098 	strh.w	r1, [sp, #152]	; 0x98
            work_area.y2 = coords->y1 + aa;
 800be54:	4413      	add	r3, r2
            work_area.y1 = coords->y1;
 800be56:	f8ad 209a 	strh.w	r2, [sp, #154]	; 0x9a
            work_area.y2 = coords->y1 + aa;
 800be5a:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&work_area, mask, color, opa);
 800be5e:	463a      	mov	r2, r7
 800be60:	4623      	mov	r3, r4
 800be62:	4659      	mov	r1, fp
 800be64:	a826      	add	r0, sp, #152	; 0x98
 800be66:	f7fd ffdb 	bl	8009e20 <lv_draw_fill>
        if(part & (LV_BORDER_BOTTOM | LV_BORDER_LEFT)) {
 800be6a:	f015 0f05 	tst.w	r5, #5
 800be6e:	d015      	beq.n	800be9c <lv_draw_rect+0x1620>
            work_area.x1 = coords->x1;
 800be70:	f9ba 2000 	ldrsh.w	r2, [sl]
 800be74:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
            work_area.x2 = coords->x1 + aa;
 800be78:	fa1f f388 	uxth.w	r3, r8
 800be7c:	441a      	add	r2, r3
 800be7e:	f8ad 209c 	strh.w	r2, [sp, #156]	; 0x9c
            work_area.y1 = coords->y2 - aa;
 800be82:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
            work_area.y2 = coords->y2;
 800be86:	f8ad 209e 	strh.w	r2, [sp, #158]	; 0x9e
            work_area.y1 = coords->y2 - aa;
 800be8a:	1ad3      	subs	r3, r2, r3
 800be8c:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            lv_draw_fill(&work_area, mask, color, opa);
 800be90:	463a      	mov	r2, r7
 800be92:	4623      	mov	r3, r4
 800be94:	4659      	mov	r1, fp
 800be96:	a826      	add	r0, sp, #152	; 0x98
 800be98:	f7fd ffc2 	bl	8009e20 <lv_draw_fill>
        if(part & (LV_BORDER_BOTTOM | LV_BORDER_RIGHT)) {
 800be9c:	f015 0f09 	tst.w	r5, #9
 800bea0:	f43f aaa0 	beq.w	800b3e4 <lv_draw_rect+0xb68>
            work_area.x1 = coords->x2 - aa;
 800bea4:	f9ba 3004 	ldrsh.w	r3, [sl, #4]
            work_area.x2 = coords->x2;
 800bea8:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            work_area.x1 = coords->x2 - aa;
 800beac:	fa1f f888 	uxth.w	r8, r8
 800beb0:	eba3 0208 	sub.w	r2, r3, r8
            work_area.y1 = coords->y2 - aa;
 800beb4:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
            work_area.x1 = coords->x2 - aa;
 800beb8:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
            work_area.y1 = coords->y2 - aa;
 800bebc:	eba3 0808 	sub.w	r8, r3, r8
 800bec0:	f8ad 809a 	strh.w	r8, [sp, #154]	; 0x9a
 800bec4:	f7ff ba86 	b.w	800b3d4 <lv_draw_rect+0xb58>
        work_area.y1 = coords->y1 + radius;
 800bec8:	4403      	add	r3, r0
 800beca:	e6bc      	b.n	800bc46 <lv_draw_rect+0x13ca>
    if(aa) bwidth--; /*Because of anti-aliasing the border seems one pixel ticker*/
 800becc:	3c02      	subs	r4, #2
 800bece:	f7ff baaf 	b.w	800b430 <lv_draw_rect+0xbb4>
        if(cir_in.y < cir_in.x) {
 800bed2:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 800bed6:	f9bd 1092 	ldrsh.w	r1, [sp, #146]	; 0x92
 800beda:	4299      	cmp	r1, r3
 800bedc:	f280 8140 	bge.w	800c160 <lv_draw_rect+0x18e4>
            act_w1 = cir_out.x - cir_in.x;
 800bee0:	1ad3      	subs	r3, r2, r3
 800bee2:	b21b      	sxth	r3, r3
 800bee4:	930b      	str	r3, [sp, #44]	; 0x2c
            act_w2 = act_w1 - 1;
 800bee6:	930d      	str	r3, [sp, #52]	; 0x34
        if(aa) {
 800bee8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800beea:	b393      	cbz	r3, 800bf52 <lv_draw_rect+0x16d6>
            if(out_x_last != cir_out.x) {
 800beec:	454a      	cmp	r2, r9
 800beee:	d014      	beq.n	800bf1a <lv_draw_rect+0x169e>
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800bef0:	9b09      	ldr	r3, [sp, #36]	; 0x24
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800bef2:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800bef6:	fa1f f789 	uxth.w	r7, r9
 800befa:	3301      	adds	r3, #1
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800befc:	ebaa 0805 	sub.w	r8, sl, r5
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800bf00:	18fb      	adds	r3, r7, r3
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800bf02:	fa0f f888 	sxth.w	r8, r8
 800bf06:	2600      	movs	r6, #0
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800bf08:	930f      	str	r3, [sp, #60]	; 0x3c
 800bf0a:	b231      	sxth	r1, r6
                for(i = 0; i < seg_size; i++) {
 800bf0c:	4588      	cmp	r8, r1
 800bf0e:	f300 812f 	bgt.w	800c170 <lv_draw_rect+0x18f4>
                out_x_last      = cir_out.x;
 800bf12:	f9bd 9088 	ldrsh.w	r9, [sp, #136]	; 0x88
 800bf16:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
            if(in_x_last != cir_in.x) {
 800bf1a:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 800bf1e:	9a08      	ldr	r2, [sp, #32]
 800bf20:	4293      	cmp	r3, r2
 800bf22:	d016      	beq.n	800bf52 <lv_draw_rect+0x16d6>
                in_y_seg_end        = cir_out.y;
 800bf24:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
                lv_coord_t seg_size = in_y_seg_end - in_y_seg_start;
 800bf28:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
                in_y_seg_end        = cir_out.y;
 800bf2c:	9313      	str	r3, [sp, #76]	; 0x4c
                lv_coord_t seg_size = in_y_seg_end - in_y_seg_start;
 800bf2e:	eba3 0a06 	sub.w	sl, r3, r6
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800bf32:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800bf34:	4413      	add	r3, r2
 800bf36:	b21b      	sxth	r3, r3
                lv_coord_t seg_size = in_y_seg_end - in_y_seg_start;
 800bf38:	fa0f fa8a 	sxth.w	sl, sl
 800bf3c:	2400      	movs	r4, #0
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800bf3e:	9315      	str	r3, [sp, #84]	; 0x54
 800bf40:	b221      	sxth	r1, r4
                for(i = 0; i < seg_size; i++) {
 800bf42:	458a      	cmp	sl, r1
 800bf44:	f300 81b4 	bgt.w	800c2b0 <lv_draw_rect+0x1a34>
                in_x_last      = cir_in.x;
 800bf48:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 800bf4c:	9308      	str	r3, [sp, #32]
                in_y_seg_start = in_y_seg_end;
 800bf4e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bf50:	930c      	str	r3, [sp, #48]	; 0x30
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800bf52:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bf54:	2b09      	cmp	r3, #9
 800bf56:	d135      	bne.n	800bfc4 <lv_draw_rect+0x1748>
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT1_X(cir_out) - act_w2;
 800bf58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf5a:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 800bf5e:	4413      	add	r3, r2
 800bf60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bf62:	b29b      	uxth	r3, r3
 800bf64:	1a9a      	subs	r2, r3, r2
 800bf66:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
            circ_area.x2 = rb_origo.x + LV_CIRC_OCT1_X(cir_out);
 800bf6a:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
 800bf6e:	9a04      	ldr	r2, [sp, #16]
 800bf70:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
 800bf74:	4413      	add	r3, r2
 800bf76:	b21b      	sxth	r3, r3
 800bf78:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            circ_area.y2 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
 800bf7c:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&circ_area, mask, color, opa);
 800bf80:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 800bf84:	9b07      	ldr	r3, [sp, #28]
 800bf86:	4659      	mov	r1, fp
 800bf88:	a826      	add	r0, sp, #152	; 0x98
 800bf8a:	f7fd ff49 	bl	8009e20 <lv_draw_fill>
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
 800bf8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf90:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
 800bf94:	4413      	add	r3, r2
 800bf96:	b21b      	sxth	r3, r3
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out) - act_w1;
 800bf98:	9a04      	ldr	r2, [sp, #16]
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
 800bf9a:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            circ_area.x2 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
 800bf9e:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out) - act_w1;
 800bfa2:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 800bfa6:	4413      	add	r3, r2
 800bfa8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bfaa:	b29b      	uxth	r3, r3
 800bfac:	1a9a      	subs	r2, r3, r2
 800bfae:	f8ad 209a 	strh.w	r2, [sp, #154]	; 0x9a
            circ_area.y2 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out);
 800bfb2:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&circ_area, mask, color, opa);
 800bfb6:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 800bfba:	9b07      	ldr	r3, [sp, #28]
 800bfbc:	4659      	mov	r1, fp
 800bfbe:	a826      	add	r0, sp, #152	; 0x98
 800bfc0:	f7fd ff2e 	bl	8009e20 <lv_draw_fill>
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800bfc4:	9b05      	ldr	r3, [sp, #20]
 800bfc6:	f003 0305 	and.w	r3, r3, #5
 800bfca:	2b05      	cmp	r3, #5
 800bfcc:	d135      	bne.n	800c03a <lv_draw_rect+0x17be>
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
 800bfce:	9a06      	ldr	r2, [sp, #24]
 800bfd0:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
 800bfd4:	1ad3      	subs	r3, r2, r3
 800bfd6:	b21b      	sxth	r3, r3
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out) - act_w2;
 800bfd8:	9a04      	ldr	r2, [sp, #16]
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
 800bfda:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            circ_area.x2 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
 800bfde:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out) - act_w2;
 800bfe2:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 800bfe6:	4413      	add	r3, r2
 800bfe8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bfea:	b29b      	uxth	r3, r3
 800bfec:	1a9a      	subs	r2, r3, r2
 800bfee:	f8ad 209a 	strh.w	r2, [sp, #154]	; 0x9a
            circ_area.y2 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out);
 800bff2:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&circ_area, mask, color, opa);
 800bff6:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 800bffa:	9b07      	ldr	r3, [sp, #28]
 800bffc:	4659      	mov	r1, fp
 800bffe:	a826      	add	r0, sp, #152	; 0x98
 800c000:	f7fd ff0e 	bl	8009e20 <lv_draw_fill>
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT4_X(cir_out);
 800c004:	9a06      	ldr	r2, [sp, #24]
 800c006:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 800c00a:	1ad3      	subs	r3, r2, r3
            circ_area.x2 = lb_origo.x + LV_CIRC_OCT4_X(cir_out) + act_w1;
 800c00c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT4_X(cir_out);
 800c00e:	b29b      	uxth	r3, r3
 800c010:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            circ_area.x2 = lb_origo.x + LV_CIRC_OCT4_X(cir_out) + act_w1;
 800c014:	4413      	add	r3, r2
 800c016:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT4_Y(cir_out);
 800c01a:	9a04      	ldr	r2, [sp, #16]
 800c01c:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
 800c020:	4413      	add	r3, r2
 800c022:	b21b      	sxth	r3, r3
 800c024:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            circ_area.y2 = lb_origo.y + LV_CIRC_OCT4_Y(cir_out);
 800c028:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&circ_area, mask, color, opa);
 800c02c:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 800c030:	9b07      	ldr	r3, [sp, #28]
 800c032:	4659      	mov	r1, fp
 800c034:	a826      	add	r0, sp, #152	; 0x98
 800c036:	f7fd fef3 	bl	8009e20 <lv_draw_fill>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800c03a:	9b05      	ldr	r3, [sp, #20]
 800c03c:	f003 0306 	and.w	r3, r3, #6
 800c040:	2b06      	cmp	r3, #6
 800c042:	d13b      	bne.n	800c0bc <lv_draw_rect+0x1840>
            if(lb_origo.y + LV_CIRC_OCT4_Y(cir_out) > lt_origo.y + LV_CIRC_OCT5_Y(cir_out)) {
 800c044:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
 800c048:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c04a:	18d1      	adds	r1, r2, r3
 800c04c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c04e:	1ad2      	subs	r2, r2, r3
 800c050:	4291      	cmp	r1, r2
 800c052:	dd18      	ble.n	800c086 <lv_draw_rect+0x180a>
                circ_area.x1 = lt_origo.x + LV_CIRC_OCT5_X(cir_out);
 800c054:	9906      	ldr	r1, [sp, #24]
 800c056:	f8bd 2088 	ldrh.w	r2, [sp, #136]	; 0x88
 800c05a:	1a8a      	subs	r2, r1, r2
                circ_area.x2 = lt_origo.x + LV_CIRC_OCT5_X(cir_out) + act_w2;
 800c05c:	990d      	ldr	r1, [sp, #52]	; 0x34
                circ_area.x1 = lt_origo.x + LV_CIRC_OCT5_X(cir_out);
 800c05e:	b292      	uxth	r2, r2
 800c060:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
                circ_area.x2 = lt_origo.x + LV_CIRC_OCT5_X(cir_out) + act_w2;
 800c064:	440a      	add	r2, r1
 800c066:	f8ad 209c 	strh.w	r2, [sp, #156]	; 0x9c
                circ_area.y1 = lt_origo.y + LV_CIRC_OCT5_Y(cir_out);
 800c06a:	9a03      	ldr	r2, [sp, #12]
 800c06c:	1ad3      	subs	r3, r2, r3
 800c06e:	b21b      	sxth	r3, r3
 800c070:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
                circ_area.y2 = lt_origo.y + LV_CIRC_OCT5_Y(cir_out);
 800c074:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
                lv_draw_fill(&circ_area, mask, color, opa);
 800c078:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 800c07c:	9b07      	ldr	r3, [sp, #28]
 800c07e:	4659      	mov	r1, fp
 800c080:	a826      	add	r0, sp, #152	; 0x98
 800c082:	f7fd fecd 	bl	8009e20 <lv_draw_fill>
            circ_area.x1 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
 800c086:	9a06      	ldr	r2, [sp, #24]
 800c088:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
 800c08c:	1ad3      	subs	r3, r2, r3
 800c08e:	b21b      	sxth	r3, r3
            circ_area.y1 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out);
 800c090:	9a03      	ldr	r2, [sp, #12]
            circ_area.x1 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
 800c092:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            circ_area.x2 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
 800c096:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            circ_area.y1 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out);
 800c09a:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 800c09e:	1ad3      	subs	r3, r2, r3
            circ_area.y2 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out) + act_w1;
 800c0a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
            circ_area.y1 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out);
 800c0a2:	b29b      	uxth	r3, r3
 800c0a4:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            circ_area.y2 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out) + act_w1;
 800c0a8:	4413      	add	r3, r2
 800c0aa:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&circ_area, mask, color, opa);
 800c0ae:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 800c0b2:	9b07      	ldr	r3, [sp, #28]
 800c0b4:	4659      	mov	r1, fp
 800c0b6:	a826      	add	r0, sp, #152	; 0x98
 800c0b8:	f7fd feb2 	bl	8009e20 <lv_draw_fill>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800c0bc:	9b05      	ldr	r3, [sp, #20]
 800c0be:	f003 030a 	and.w	r3, r3, #10
 800c0c2:	2b0a      	cmp	r3, #10
 800c0c4:	d13b      	bne.n	800c13e <lv_draw_rect+0x18c2>
            circ_area.x1 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
 800c0c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c0c8:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
 800c0cc:	4413      	add	r3, r2
 800c0ce:	b21b      	sxth	r3, r3
            circ_area.y1 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out);
 800c0d0:	9a03      	ldr	r2, [sp, #12]
            circ_area.x1 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
 800c0d2:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            circ_area.x2 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
 800c0d6:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            circ_area.y1 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out);
 800c0da:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 800c0de:	1ad3      	subs	r3, r2, r3
            circ_area.y2 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out) + act_w2;
 800c0e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
            circ_area.y1 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out);
 800c0e2:	b29b      	uxth	r3, r3
 800c0e4:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            circ_area.y2 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out) + act_w2;
 800c0e8:	4413      	add	r3, r2
 800c0ea:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&circ_area, mask, color, opa);
 800c0ee:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 800c0f2:	9b07      	ldr	r3, [sp, #28]
 800c0f4:	4659      	mov	r1, fp
 800c0f6:	a826      	add	r0, sp, #152	; 0x98
 800c0f8:	f7fd fe92 	bl	8009e20 <lv_draw_fill>
            if(rb_origo.y + LV_CIRC_OCT1_Y(cir_out) > rt_origo.y + LV_CIRC_OCT8_Y(cir_out)) {
 800c0fc:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
 800c100:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c102:	18d1      	adds	r1, r2, r3
 800c104:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c106:	1ad2      	subs	r2, r2, r3
 800c108:	4291      	cmp	r1, r2
 800c10a:	dd18      	ble.n	800c13e <lv_draw_rect+0x18c2>
                circ_area.x1 = rt_origo.x + LV_CIRC_OCT8_X(cir_out) - act_w1;
 800c10c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c10e:	f8bd 1088 	ldrh.w	r1, [sp, #136]	; 0x88
 800c112:	4411      	add	r1, r2
 800c114:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c116:	b289      	uxth	r1, r1
 800c118:	1a8a      	subs	r2, r1, r2
 800c11a:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
                circ_area.y1 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
 800c11e:	9a03      	ldr	r2, [sp, #12]
                circ_area.x2 = rt_origo.x + LV_CIRC_OCT8_X(cir_out);
 800c120:	f8ad 109c 	strh.w	r1, [sp, #156]	; 0x9c
                circ_area.y1 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
 800c124:	1ad3      	subs	r3, r2, r3
 800c126:	b21b      	sxth	r3, r3
 800c128:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
                circ_area.y2 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
 800c12c:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
                lv_draw_fill(&circ_area, mask, color, opa);
 800c130:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 800c134:	9b07      	ldr	r3, [sp, #28]
 800c136:	4659      	mov	r1, fp
 800c138:	a826      	add	r0, sp, #152	; 0x98
 800c13a:	f7fd fe71 	bl	8009e20 <lv_draw_fill>
        lv_circ_next(&cir_out, &tmp_out);
 800c13e:	a91e      	add	r1, sp, #120	; 0x78
 800c140:	a822      	add	r0, sp, #136	; 0x88
 800c142:	f001 f9bc 	bl	800d4be <lv_circ_next>
        if(cir_in.y < cir_in.x) {
 800c146:	f9bd 2092 	ldrsh.w	r2, [sp, #146]	; 0x92
 800c14a:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 800c14e:	429a      	cmp	r2, r3
 800c150:	f6bf a9bb 	bge.w	800b4ca <lv_draw_rect+0xc4e>
            lv_circ_next(&cir_in, &tmp_in);
 800c154:	a920      	add	r1, sp, #128	; 0x80
 800c156:	a824      	add	r0, sp, #144	; 0x90
 800c158:	f001 f9b1 	bl	800d4be <lv_circ_next>
 800c15c:	f7ff b9b5 	b.w	800b4ca <lv_draw_rect+0xc4e>
            act_w1 = cir_out.x - cir_out.y;
 800c160:	eba2 030a 	sub.w	r3, r2, sl
 800c164:	b29b      	uxth	r3, r3
 800c166:	b219      	sxth	r1, r3
            act_w2 = act_w1 - 1;
 800c168:	3b01      	subs	r3, #1
            act_w1 = cir_out.x - cir_out.y;
 800c16a:	910b      	str	r1, [sp, #44]	; 0x2c
            act_w2 = act_w1 - 1;
 800c16c:	b21b      	sxth	r3, r3
 800c16e:	e6ba      	b.n	800bee6 <lv_draw_rect+0x166a>
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 800c170:	f1b8 0f01 	cmp.w	r8, #1
                        aa_opa = antialias_get_opa_circ(seg_size, i, opa);
 800c174:	9a07      	ldr	r2, [sp, #28]
 800c176:	4640      	mov	r0, r8
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 800c178:	f000 8094 	beq.w	800c2a4 <lv_draw_rect+0x1a28>
                        aa_opa = antialias_get_opa_circ(seg_size, i, opa);
 800c17c:	f7fe fb5c 	bl	800a838 <antialias_get_opa_circ>
 800c180:	4604      	mov	r4, r0
                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800c182:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c184:	2b09      	cmp	r3, #9
 800c186:	d11b      	bne.n	800c1c0 <lv_draw_rect+0x1944>
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800c188:	9b04      	ldr	r3, [sp, #16]
 800c18a:	9400      	str	r4, [sp, #0]
 800c18c:	fa1f f986 	uxth.w	r9, r6
 800c190:	1959      	adds	r1, r3, r5
 800c192:	9b02      	ldr	r3, [sp, #8]
 800c194:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 800c198:	895b      	ldrh	r3, [r3, #10]
 800c19a:	4449      	add	r1, r9
 800c19c:	465a      	mov	r2, fp
 800c19e:	b209      	sxth	r1, r1
 800c1a0:	f7fd fdee 	bl	8009d80 <lv_draw_px>
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800c1a4:	9b04      	ldr	r3, [sp, #16]
 800c1a6:	9400      	str	r4, [sp, #0]
 800c1a8:	1c59      	adds	r1, r3, #1
 800c1aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1ac:	1958      	adds	r0, r3, r5
 800c1ae:	9b02      	ldr	r3, [sp, #8]
 800c1b0:	4439      	add	r1, r7
 800c1b2:	4448      	add	r0, r9
 800c1b4:	895b      	ldrh	r3, [r3, #10]
 800c1b6:	465a      	mov	r2, fp
 800c1b8:	b209      	sxth	r1, r1
 800c1ba:	b200      	sxth	r0, r0
 800c1bc:	f7fd fde0 	bl	8009d80 <lv_draw_px>
                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800c1c0:	9b05      	ldr	r3, [sp, #20]
 800c1c2:	f003 0305 	and.w	r3, r3, #5
 800c1c6:	2b05      	cmp	r3, #5
 800c1c8:	d120      	bne.n	800c20c <lv_draw_rect+0x1990>
                        lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 800c1ca:	9b04      	ldr	r3, [sp, #16]
 800c1cc:	9400      	str	r4, [sp, #0]
 800c1ce:	f103 0e01 	add.w	lr, r3, #1
 800c1d2:	9b06      	ldr	r3, [sp, #24]
 800c1d4:	fa1f f986 	uxth.w	r9, r6
 800c1d8:	1b58      	subs	r0, r3, r5
 800c1da:	9b02      	ldr	r3, [sp, #8]
 800c1dc:	44be      	add	lr, r7
 800c1de:	eba0 0009 	sub.w	r0, r0, r9
 800c1e2:	895b      	ldrh	r3, [r3, #10]
 800c1e4:	465a      	mov	r2, fp
 800c1e6:	fa0f f18e 	sxth.w	r1, lr
 800c1ea:	b200      	sxth	r0, r0
 800c1ec:	f7fd fdc8 	bl	8009d80 <lv_draw_px>
                        lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 800c1f0:	9b04      	ldr	r3, [sp, #16]
 800c1f2:	9400      	str	r4, [sp, #0]
 800c1f4:	1959      	adds	r1, r3, r5
 800c1f6:	9b06      	ldr	r3, [sp, #24]
 800c1f8:	1e58      	subs	r0, r3, #1
 800c1fa:	9b02      	ldr	r3, [sp, #8]
 800c1fc:	4449      	add	r1, r9
 800c1fe:	1bc0      	subs	r0, r0, r7
 800c200:	895b      	ldrh	r3, [r3, #10]
 800c202:	465a      	mov	r2, fp
 800c204:	b209      	sxth	r1, r1
 800c206:	b200      	sxth	r0, r0
 800c208:	f7fd fdba 	bl	8009d80 <lv_draw_px>
                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800c20c:	9b05      	ldr	r3, [sp, #20]
 800c20e:	f003 0306 	and.w	r3, r3, #6
 800c212:	2b06      	cmp	r3, #6
 800c214:	d11f      	bne.n	800c256 <lv_draw_rect+0x19da>
                        lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 800c216:	9b03      	ldr	r3, [sp, #12]
 800c218:	9400      	str	r4, [sp, #0]
 800c21a:	1b59      	subs	r1, r3, r5
 800c21c:	9b06      	ldr	r3, [sp, #24]
 800c21e:	fa1f f986 	uxth.w	r9, r6
 800c222:	1e58      	subs	r0, r3, #1
 800c224:	9b02      	ldr	r3, [sp, #8]
 800c226:	eba1 0109 	sub.w	r1, r1, r9
 800c22a:	1bc0      	subs	r0, r0, r7
 800c22c:	895b      	ldrh	r3, [r3, #10]
 800c22e:	465a      	mov	r2, fp
 800c230:	b209      	sxth	r1, r1
 800c232:	b200      	sxth	r0, r0
 800c234:	f7fd fda4 	bl	8009d80 <lv_draw_px>
                        lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 800c238:	9b03      	ldr	r3, [sp, #12]
 800c23a:	9400      	str	r4, [sp, #0]
 800c23c:	1e59      	subs	r1, r3, #1
 800c23e:	9b06      	ldr	r3, [sp, #24]
 800c240:	1b58      	subs	r0, r3, r5
 800c242:	9b02      	ldr	r3, [sp, #8]
 800c244:	1bc9      	subs	r1, r1, r7
 800c246:	eba0 0009 	sub.w	r0, r0, r9
 800c24a:	895b      	ldrh	r3, [r3, #10]
 800c24c:	465a      	mov	r2, fp
 800c24e:	b209      	sxth	r1, r1
 800c250:	b200      	sxth	r0, r0
 800c252:	f7fd fd95 	bl	8009d80 <lv_draw_px>
                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800c256:	9b05      	ldr	r3, [sp, #20]
 800c258:	f003 030a 	and.w	r3, r3, #10
 800c25c:	2b0a      	cmp	r3, #10
 800c25e:	d11f      	bne.n	800c2a0 <lv_draw_rect+0x1a24>
                        lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 800c260:	9b03      	ldr	r3, [sp, #12]
 800c262:	9400      	str	r4, [sp, #0]
 800c264:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
 800c268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c26a:	fa1f f986 	uxth.w	r9, r6
 800c26e:	1958      	adds	r0, r3, r5
 800c270:	9b02      	ldr	r3, [sp, #8]
 800c272:	ebae 0e07 	sub.w	lr, lr, r7
 800c276:	4448      	add	r0, r9
 800c278:	895b      	ldrh	r3, [r3, #10]
 800c27a:	465a      	mov	r2, fp
 800c27c:	fa0f f18e 	sxth.w	r1, lr
 800c280:	b200      	sxth	r0, r0
 800c282:	f7fd fd7d 	bl	8009d80 <lv_draw_px>
                        lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 800c286:	9b03      	ldr	r3, [sp, #12]
 800c288:	9400      	str	r4, [sp, #0]
 800c28a:	1b59      	subs	r1, r3, r5
 800c28c:	9b02      	ldr	r3, [sp, #8]
 800c28e:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 800c292:	895b      	ldrh	r3, [r3, #10]
 800c294:	eba1 0109 	sub.w	r1, r1, r9
 800c298:	465a      	mov	r2, fp
 800c29a:	b209      	sxth	r1, r1
 800c29c:	f7fd fd70 	bl	8009d80 <lv_draw_px>
 800c2a0:	3601      	adds	r6, #1
 800c2a2:	e632      	b.n	800bf0a <lv_draw_rect+0x168e>
                        aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800c2a4:	f7fd fc92 	bl	8009bcc <lv_draw_aa_get_opa>
 800c2a8:	9b07      	ldr	r3, [sp, #28]
 800c2aa:	1a18      	subs	r0, r3, r0
 800c2ac:	b2c4      	uxtb	r4, r0
 800c2ae:	e768      	b.n	800c182 <lv_draw_rect+0x1906>
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 800c2b0:	f1ba 0f01 	cmp.w	sl, #1
                        aa_opa = opa - antialias_get_opa_circ(seg_size, i, opa);
 800c2b4:	9a07      	ldr	r2, [sp, #28]
 800c2b6:	4650      	mov	r0, sl
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 800c2b8:	f000 809c 	beq.w	800c3f4 <lv_draw_rect+0x1b78>
                        aa_opa = opa - antialias_get_opa_circ(seg_size, i, opa);
 800c2bc:	f7fe fabc 	bl	800a838 <antialias_get_opa_circ>
 800c2c0:	9b07      	ldr	r3, [sp, #28]
 800c2c2:	1a18      	subs	r0, r3, r0
 800c2c4:	b2c5      	uxtb	r5, r0
                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800c2c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c2c8:	2b09      	cmp	r3, #9
 800c2ca:	d10a      	bne.n	800c2e2 <lv_draw_rect+0x1a66>
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800c2cc:	9b04      	ldr	r3, [sp, #16]
 800c2ce:	9500      	str	r5, [sp, #0]
 800c2d0:	1999      	adds	r1, r3, r6
 800c2d2:	9b02      	ldr	r3, [sp, #8]
 800c2d4:	9815      	ldr	r0, [sp, #84]	; 0x54
 800c2d6:	895b      	ldrh	r3, [r3, #10]
 800c2d8:	4421      	add	r1, r4
 800c2da:	465a      	mov	r2, fp
 800c2dc:	b209      	sxth	r1, r1
 800c2de:	f7fd fd4f 	bl	8009d80 <lv_draw_px>
 800c2e2:	9b05      	ldr	r3, [sp, #20]
 800c2e4:	f003 0305 	and.w	r3, r3, #5
                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800c2e8:	2b05      	cmp	r3, #5
 800c2ea:	9314      	str	r3, [sp, #80]	; 0x50
 800c2ec:	d10e      	bne.n	800c30c <lv_draw_rect+0x1a90>
                        lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) - 1, mask,
 800c2ee:	9b04      	ldr	r3, [sp, #16]
 800c2f0:	9500      	str	r5, [sp, #0]
 800c2f2:	1e59      	subs	r1, r3, #1
 800c2f4:	9b08      	ldr	r3, [sp, #32]
 800c2f6:	4419      	add	r1, r3
 800c2f8:	9b06      	ldr	r3, [sp, #24]
 800c2fa:	1b98      	subs	r0, r3, r6
 800c2fc:	9b02      	ldr	r3, [sp, #8]
 800c2fe:	1b00      	subs	r0, r0, r4
 800c300:	895b      	ldrh	r3, [r3, #10]
 800c302:	465a      	mov	r2, fp
 800c304:	b209      	sxth	r1, r1
 800c306:	b200      	sxth	r0, r0
 800c308:	f7fd fd3a 	bl	8009d80 <lv_draw_px>
 800c30c:	9b05      	ldr	r3, [sp, #20]
 800c30e:	f003 0806 	and.w	r8, r3, #6
                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800c312:	f1b8 0f06 	cmp.w	r8, #6
 800c316:	d10e      	bne.n	800c336 <lv_draw_rect+0x1aba>
                        lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) + 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 800c318:	9b03      	ldr	r3, [sp, #12]
 800c31a:	9500      	str	r5, [sp, #0]
 800c31c:	1b99      	subs	r1, r3, r6
 800c31e:	9b06      	ldr	r3, [sp, #24]
 800c320:	1c58      	adds	r0, r3, #1
 800c322:	9b08      	ldr	r3, [sp, #32]
 800c324:	1ac0      	subs	r0, r0, r3
 800c326:	9b02      	ldr	r3, [sp, #8]
 800c328:	1b09      	subs	r1, r1, r4
 800c32a:	895b      	ldrh	r3, [r3, #10]
 800c32c:	465a      	mov	r2, fp
 800c32e:	b209      	sxth	r1, r1
 800c330:	b200      	sxth	r0, r0
 800c332:	f7fd fd25 	bl	8009d80 <lv_draw_px>
 800c336:	9b05      	ldr	r3, [sp, #20]
 800c338:	f003 070a 	and.w	r7, r3, #10
                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800c33c:	2f0a      	cmp	r7, #10
 800c33e:	d10e      	bne.n	800c35e <lv_draw_rect+0x1ae2>
                        lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) + 1, mask,
 800c340:	9b03      	ldr	r3, [sp, #12]
 800c342:	9500      	str	r5, [sp, #0]
 800c344:	1c59      	adds	r1, r3, #1
 800c346:	9b08      	ldr	r3, [sp, #32]
 800c348:	1ac9      	subs	r1, r1, r3
 800c34a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c34c:	1998      	adds	r0, r3, r6
 800c34e:	9b02      	ldr	r3, [sp, #8]
 800c350:	4420      	add	r0, r4
 800c352:	895b      	ldrh	r3, [r3, #10]
 800c354:	465a      	mov	r2, fp
 800c356:	b209      	sxth	r1, r1
 800c358:	b200      	sxth	r0, r0
 800c35a:	f7fd fd11 	bl	8009d80 <lv_draw_px>
                    if(LV_CIRC_OCT1_X(aa_p) - 1 != LV_CIRC_OCT2_X(aa_p) + i) {
 800c35e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c360:	9a08      	ldr	r2, [sp, #32]
 800c362:	4423      	add	r3, r4
 800c364:	3a01      	subs	r2, #1
 800c366:	4293      	cmp	r3, r2
 800c368:	d042      	beq.n	800c3f0 <lv_draw_rect+0x1b74>
                        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800c36a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c36c:	2b09      	cmp	r3, #9
 800c36e:	d10e      	bne.n	800c38e <lv_draw_rect+0x1b12>
                            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) - 1,
 800c370:	9b04      	ldr	r3, [sp, #16]
 800c372:	9500      	str	r5, [sp, #0]
 800c374:	1e59      	subs	r1, r3, #1
 800c376:	9b08      	ldr	r3, [sp, #32]
 800c378:	4419      	add	r1, r3
 800c37a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c37c:	1998      	adds	r0, r3, r6
 800c37e:	9b02      	ldr	r3, [sp, #8]
 800c380:	4420      	add	r0, r4
 800c382:	895b      	ldrh	r3, [r3, #10]
 800c384:	465a      	mov	r2, fp
 800c386:	b209      	sxth	r1, r1
 800c388:	b200      	sxth	r0, r0
 800c38a:	f7fd fcf9 	bl	8009d80 <lv_draw_px>
                        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800c38e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c390:	2b05      	cmp	r3, #5
 800c392:	d10e      	bne.n	800c3b2 <lv_draw_rect+0x1b36>
                            lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) + 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i,
 800c394:	9b04      	ldr	r3, [sp, #16]
 800c396:	9500      	str	r5, [sp, #0]
 800c398:	1999      	adds	r1, r3, r6
 800c39a:	9b06      	ldr	r3, [sp, #24]
 800c39c:	1c58      	adds	r0, r3, #1
 800c39e:	9b08      	ldr	r3, [sp, #32]
 800c3a0:	1ac0      	subs	r0, r0, r3
 800c3a2:	9b02      	ldr	r3, [sp, #8]
 800c3a4:	4421      	add	r1, r4
 800c3a6:	895b      	ldrh	r3, [r3, #10]
 800c3a8:	465a      	mov	r2, fp
 800c3aa:	b209      	sxth	r1, r1
 800c3ac:	b200      	sxth	r0, r0
 800c3ae:	f7fd fce7 	bl	8009d80 <lv_draw_px>
                        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800c3b2:	f1b8 0f06 	cmp.w	r8, #6
 800c3b6:	d10e      	bne.n	800c3d6 <lv_draw_rect+0x1b5a>
                            lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) + 1,
 800c3b8:	9b03      	ldr	r3, [sp, #12]
 800c3ba:	9500      	str	r5, [sp, #0]
 800c3bc:	1c59      	adds	r1, r3, #1
 800c3be:	9b08      	ldr	r3, [sp, #32]
 800c3c0:	1ac9      	subs	r1, r1, r3
 800c3c2:	9b06      	ldr	r3, [sp, #24]
 800c3c4:	1b98      	subs	r0, r3, r6
 800c3c6:	9b02      	ldr	r3, [sp, #8]
 800c3c8:	1b00      	subs	r0, r0, r4
 800c3ca:	895b      	ldrh	r3, [r3, #10]
 800c3cc:	465a      	mov	r2, fp
 800c3ce:	b209      	sxth	r1, r1
 800c3d0:	b200      	sxth	r0, r0
 800c3d2:	f7fd fcd5 	bl	8009d80 <lv_draw_px>
                        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800c3d6:	2f0a      	cmp	r7, #10
 800c3d8:	d10a      	bne.n	800c3f0 <lv_draw_rect+0x1b74>
                            lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) - 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i,
 800c3da:	9b03      	ldr	r3, [sp, #12]
 800c3dc:	9500      	str	r5, [sp, #0]
 800c3de:	1b99      	subs	r1, r3, r6
 800c3e0:	9b02      	ldr	r3, [sp, #8]
 800c3e2:	9815      	ldr	r0, [sp, #84]	; 0x54
 800c3e4:	895b      	ldrh	r3, [r3, #10]
 800c3e6:	1b09      	subs	r1, r1, r4
 800c3e8:	465a      	mov	r2, fp
 800c3ea:	b209      	sxth	r1, r1
 800c3ec:	f7fd fcc8 	bl	8009d80 <lv_draw_px>
 800c3f0:	3401      	adds	r4, #1
 800c3f2:	e5a5      	b.n	800bf40 <lv_draw_rect+0x16c4>
                        aa_opa = lv_draw_aa_get_opa(seg_size, i, opa);
 800c3f4:	f7fd fbea 	bl	8009bcc <lv_draw_aa_get_opa>
 800c3f8:	4605      	mov	r5, r0
 800c3fa:	e764      	b.n	800c2c6 <lv_draw_rect+0x1a4a>
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800c3fc:	9a07      	ldr	r2, [sp, #28]
 800c3fe:	4650      	mov	r0, sl
 800c400:	f7fd fbe4 	bl	8009bcc <lv_draw_aa_get_opa>
 800c404:	9b07      	ldr	r3, [sp, #28]
 800c406:	1a18      	subs	r0, r3, r0
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800c408:	9b05      	ldr	r3, [sp, #20]
 800c40a:	f003 0309 	and.w	r3, r3, #9
 800c40e:	2b09      	cmp	r3, #9
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800c410:	b2c4      	uxtb	r4, r0
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800c412:	d11b      	bne.n	800c44c <lv_draw_rect+0x1bd0>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800c414:	9b04      	ldr	r3, [sp, #16]
 800c416:	9400      	str	r4, [sp, #0]
 800c418:	fa1f f886 	uxth.w	r8, r6
 800c41c:	1959      	adds	r1, r3, r5
 800c41e:	9b02      	ldr	r3, [sp, #8]
 800c420:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 800c424:	895b      	ldrh	r3, [r3, #10]
 800c426:	4441      	add	r1, r8
 800c428:	465a      	mov	r2, fp
 800c42a:	b209      	sxth	r1, r1
 800c42c:	f7fd fca8 	bl	8009d80 <lv_draw_px>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800c430:	9b04      	ldr	r3, [sp, #16]
 800c432:	9400      	str	r4, [sp, #0]
 800c434:	1c59      	adds	r1, r3, #1
 800c436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c438:	1958      	adds	r0, r3, r5
 800c43a:	9b02      	ldr	r3, [sp, #8]
 800c43c:	4439      	add	r1, r7
 800c43e:	4440      	add	r0, r8
 800c440:	895b      	ldrh	r3, [r3, #10]
 800c442:	465a      	mov	r2, fp
 800c444:	b209      	sxth	r1, r1
 800c446:	b200      	sxth	r0, r0
 800c448:	f7fd fc9a 	bl	8009d80 <lv_draw_px>
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800c44c:	9b05      	ldr	r3, [sp, #20]
 800c44e:	f003 0305 	and.w	r3, r3, #5
 800c452:	2b05      	cmp	r3, #5
 800c454:	d120      	bne.n	800c498 <lv_draw_rect+0x1c1c>
                lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 800c456:	9b04      	ldr	r3, [sp, #16]
 800c458:	9400      	str	r4, [sp, #0]
 800c45a:	f103 0e01 	add.w	lr, r3, #1
 800c45e:	9b06      	ldr	r3, [sp, #24]
 800c460:	fa1f f886 	uxth.w	r8, r6
 800c464:	1b58      	subs	r0, r3, r5
 800c466:	9b02      	ldr	r3, [sp, #8]
 800c468:	44be      	add	lr, r7
 800c46a:	eba0 0008 	sub.w	r0, r0, r8
 800c46e:	895b      	ldrh	r3, [r3, #10]
 800c470:	465a      	mov	r2, fp
 800c472:	fa0f f18e 	sxth.w	r1, lr
 800c476:	b200      	sxth	r0, r0
 800c478:	f7fd fc82 	bl	8009d80 <lv_draw_px>
                lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 800c47c:	9b04      	ldr	r3, [sp, #16]
 800c47e:	9400      	str	r4, [sp, #0]
 800c480:	1959      	adds	r1, r3, r5
 800c482:	9b06      	ldr	r3, [sp, #24]
 800c484:	1e58      	subs	r0, r3, #1
 800c486:	9b02      	ldr	r3, [sp, #8]
 800c488:	4441      	add	r1, r8
 800c48a:	1bc0      	subs	r0, r0, r7
 800c48c:	895b      	ldrh	r3, [r3, #10]
 800c48e:	465a      	mov	r2, fp
 800c490:	b209      	sxth	r1, r1
 800c492:	b200      	sxth	r0, r0
 800c494:	f7fd fc74 	bl	8009d80 <lv_draw_px>
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800c498:	9b05      	ldr	r3, [sp, #20]
 800c49a:	f003 0306 	and.w	r3, r3, #6
 800c49e:	2b06      	cmp	r3, #6
 800c4a0:	d11f      	bne.n	800c4e2 <lv_draw_rect+0x1c66>
                lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 800c4a2:	9b03      	ldr	r3, [sp, #12]
 800c4a4:	9400      	str	r4, [sp, #0]
 800c4a6:	1b59      	subs	r1, r3, r5
 800c4a8:	9b06      	ldr	r3, [sp, #24]
 800c4aa:	fa1f f886 	uxth.w	r8, r6
 800c4ae:	1e58      	subs	r0, r3, #1
 800c4b0:	9b02      	ldr	r3, [sp, #8]
 800c4b2:	eba1 0108 	sub.w	r1, r1, r8
 800c4b6:	1bc0      	subs	r0, r0, r7
 800c4b8:	895b      	ldrh	r3, [r3, #10]
 800c4ba:	465a      	mov	r2, fp
 800c4bc:	b209      	sxth	r1, r1
 800c4be:	b200      	sxth	r0, r0
 800c4c0:	f7fd fc5e 	bl	8009d80 <lv_draw_px>
                lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 800c4c4:	9b03      	ldr	r3, [sp, #12]
 800c4c6:	9400      	str	r4, [sp, #0]
 800c4c8:	1e59      	subs	r1, r3, #1
 800c4ca:	9b06      	ldr	r3, [sp, #24]
 800c4cc:	1b58      	subs	r0, r3, r5
 800c4ce:	9b02      	ldr	r3, [sp, #8]
 800c4d0:	1bc9      	subs	r1, r1, r7
 800c4d2:	eba0 0008 	sub.w	r0, r0, r8
 800c4d6:	895b      	ldrh	r3, [r3, #10]
 800c4d8:	465a      	mov	r2, fp
 800c4da:	b209      	sxth	r1, r1
 800c4dc:	b200      	sxth	r0, r0
 800c4de:	f7fd fc4f 	bl	8009d80 <lv_draw_px>
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800c4e2:	9b05      	ldr	r3, [sp, #20]
 800c4e4:	f003 030a 	and.w	r3, r3, #10
 800c4e8:	2b0a      	cmp	r3, #10
 800c4ea:	d11f      	bne.n	800c52c <lv_draw_rect+0x1cb0>
                lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 800c4ec:	9b03      	ldr	r3, [sp, #12]
 800c4ee:	9400      	str	r4, [sp, #0]
 800c4f0:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
 800c4f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4f6:	fa1f f886 	uxth.w	r8, r6
 800c4fa:	1958      	adds	r0, r3, r5
 800c4fc:	9b02      	ldr	r3, [sp, #8]
 800c4fe:	ebae 0e07 	sub.w	lr, lr, r7
 800c502:	4440      	add	r0, r8
 800c504:	895b      	ldrh	r3, [r3, #10]
 800c506:	465a      	mov	r2, fp
 800c508:	fa0f f18e 	sxth.w	r1, lr
 800c50c:	b200      	sxth	r0, r0
 800c50e:	f7fd fc37 	bl	8009d80 <lv_draw_px>
                lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 800c512:	9b03      	ldr	r3, [sp, #12]
 800c514:	9400      	str	r4, [sp, #0]
 800c516:	1b59      	subs	r1, r3, r5
 800c518:	9b02      	ldr	r3, [sp, #8]
 800c51a:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 800c51e:	895b      	ldrh	r3, [r3, #10]
 800c520:	eba1 0108 	sub.w	r1, r1, r8
 800c524:	465a      	mov	r2, fp
 800c526:	b209      	sxth	r1, r1
 800c528:	f7fd fc2a 	bl	8009d80 <lv_draw_px>
 800c52c:	3601      	adds	r6, #1
 800c52e:	f7fe bfe3 	b.w	800b4f8 <lv_draw_rect+0xc7c>
            lv_opa_t aa_opa = lv_draw_aa_get_opa(seg_size, i, opa);
 800c532:	9a07      	ldr	r2, [sp, #28]
 800c534:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c536:	f7fd fb49 	bl	8009bcc <lv_draw_aa_get_opa>
 800c53a:	9b05      	ldr	r3, [sp, #20]
 800c53c:	f003 0909 	and.w	r9, r3, #9
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800c540:	f1b9 0f09 	cmp.w	r9, #9
            lv_opa_t aa_opa = lv_draw_aa_get_opa(seg_size, i, opa);
 800c544:	4606      	mov	r6, r0
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800c546:	d10a      	bne.n	800c55e <lv_draw_rect+0x1ce2>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800c548:	9b04      	ldr	r3, [sp, #16]
 800c54a:	9000      	str	r0, [sp, #0]
 800c54c:	1959      	adds	r1, r3, r5
 800c54e:	9b02      	ldr	r3, [sp, #8]
 800c550:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c552:	895b      	ldrh	r3, [r3, #10]
 800c554:	4421      	add	r1, r4
 800c556:	465a      	mov	r2, fp
 800c558:	b209      	sxth	r1, r1
 800c55a:	f7fd fc11 	bl	8009d80 <lv_draw_px>
 800c55e:	9b05      	ldr	r3, [sp, #20]
 800c560:	f003 0a05 	and.w	sl, r3, #5
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800c564:	f1ba 0f05 	cmp.w	sl, #5
 800c568:	d10e      	bne.n	800c588 <lv_draw_rect+0x1d0c>
                lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) - 1, mask,
 800c56a:	9b04      	ldr	r3, [sp, #16]
 800c56c:	9600      	str	r6, [sp, #0]
 800c56e:	1e59      	subs	r1, r3, #1
 800c570:	9b08      	ldr	r3, [sp, #32]
 800c572:	4419      	add	r1, r3
 800c574:	9b06      	ldr	r3, [sp, #24]
 800c576:	1b58      	subs	r0, r3, r5
 800c578:	9b02      	ldr	r3, [sp, #8]
 800c57a:	1b00      	subs	r0, r0, r4
 800c57c:	895b      	ldrh	r3, [r3, #10]
 800c57e:	465a      	mov	r2, fp
 800c580:	b209      	sxth	r1, r1
 800c582:	b200      	sxth	r0, r0
 800c584:	f7fd fbfc 	bl	8009d80 <lv_draw_px>
 800c588:	9b05      	ldr	r3, [sp, #20]
 800c58a:	f003 0806 	and.w	r8, r3, #6
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800c58e:	f1b8 0f06 	cmp.w	r8, #6
 800c592:	d10e      	bne.n	800c5b2 <lv_draw_rect+0x1d36>
                lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) + 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 800c594:	9b03      	ldr	r3, [sp, #12]
 800c596:	9600      	str	r6, [sp, #0]
 800c598:	1b59      	subs	r1, r3, r5
 800c59a:	9b06      	ldr	r3, [sp, #24]
 800c59c:	1c58      	adds	r0, r3, #1
 800c59e:	9b08      	ldr	r3, [sp, #32]
 800c5a0:	1ac0      	subs	r0, r0, r3
 800c5a2:	9b02      	ldr	r3, [sp, #8]
 800c5a4:	1b09      	subs	r1, r1, r4
 800c5a6:	895b      	ldrh	r3, [r3, #10]
 800c5a8:	465a      	mov	r2, fp
 800c5aa:	b209      	sxth	r1, r1
 800c5ac:	b200      	sxth	r0, r0
 800c5ae:	f7fd fbe7 	bl	8009d80 <lv_draw_px>
 800c5b2:	9b05      	ldr	r3, [sp, #20]
 800c5b4:	f003 070a 	and.w	r7, r3, #10
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800c5b8:	2f0a      	cmp	r7, #10
 800c5ba:	d10e      	bne.n	800c5da <lv_draw_rect+0x1d5e>
                lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) + 1, mask,
 800c5bc:	9b03      	ldr	r3, [sp, #12]
 800c5be:	9600      	str	r6, [sp, #0]
 800c5c0:	1c59      	adds	r1, r3, #1
 800c5c2:	9b08      	ldr	r3, [sp, #32]
 800c5c4:	1ac9      	subs	r1, r1, r3
 800c5c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5c8:	1958      	adds	r0, r3, r5
 800c5ca:	9b02      	ldr	r3, [sp, #8]
 800c5cc:	4420      	add	r0, r4
 800c5ce:	895b      	ldrh	r3, [r3, #10]
 800c5d0:	465a      	mov	r2, fp
 800c5d2:	b209      	sxth	r1, r1
 800c5d4:	b200      	sxth	r0, r0
 800c5d6:	f7fd fbd3 	bl	8009d80 <lv_draw_px>
            if(LV_CIRC_OCT1_X(aa_p) - 1 != LV_CIRC_OCT2_X(aa_p) + i) {
 800c5da:	9b08      	ldr	r3, [sp, #32]
 800c5dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c5de:	3b01      	subs	r3, #1
 800c5e0:	4422      	add	r2, r4
 800c5e2:	4293      	cmp	r3, r2
 800c5e4:	d042      	beq.n	800c66c <lv_draw_rect+0x1df0>
                if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800c5e6:	f1b9 0f09 	cmp.w	r9, #9
 800c5ea:	d10e      	bne.n	800c60a <lv_draw_rect+0x1d8e>
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) - 1, mask,
 800c5ec:	9b04      	ldr	r3, [sp, #16]
 800c5ee:	9600      	str	r6, [sp, #0]
 800c5f0:	1e59      	subs	r1, r3, #1
 800c5f2:	9b08      	ldr	r3, [sp, #32]
 800c5f4:	4419      	add	r1, r3
 800c5f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5f8:	1958      	adds	r0, r3, r5
 800c5fa:	9b02      	ldr	r3, [sp, #8]
 800c5fc:	4420      	add	r0, r4
 800c5fe:	895b      	ldrh	r3, [r3, #10]
 800c600:	465a      	mov	r2, fp
 800c602:	b209      	sxth	r1, r1
 800c604:	b200      	sxth	r0, r0
 800c606:	f7fd fbbb 	bl	8009d80 <lv_draw_px>
                if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800c60a:	f1ba 0f05 	cmp.w	sl, #5
 800c60e:	d10e      	bne.n	800c62e <lv_draw_rect+0x1db2>
                    lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) + 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 800c610:	9b04      	ldr	r3, [sp, #16]
 800c612:	9600      	str	r6, [sp, #0]
 800c614:	1959      	adds	r1, r3, r5
 800c616:	9b06      	ldr	r3, [sp, #24]
 800c618:	1c58      	adds	r0, r3, #1
 800c61a:	9b08      	ldr	r3, [sp, #32]
 800c61c:	1ac0      	subs	r0, r0, r3
 800c61e:	9b02      	ldr	r3, [sp, #8]
 800c620:	4421      	add	r1, r4
 800c622:	895b      	ldrh	r3, [r3, #10]
 800c624:	465a      	mov	r2, fp
 800c626:	b209      	sxth	r1, r1
 800c628:	b200      	sxth	r0, r0
 800c62a:	f7fd fba9 	bl	8009d80 <lv_draw_px>
                if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800c62e:	f1b8 0f06 	cmp.w	r8, #6
 800c632:	d10e      	bne.n	800c652 <lv_draw_rect+0x1dd6>
                    lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) + 1, mask,
 800c634:	9b03      	ldr	r3, [sp, #12]
 800c636:	9600      	str	r6, [sp, #0]
 800c638:	1c59      	adds	r1, r3, #1
 800c63a:	9b08      	ldr	r3, [sp, #32]
 800c63c:	1ac9      	subs	r1, r1, r3
 800c63e:	9b06      	ldr	r3, [sp, #24]
 800c640:	1b58      	subs	r0, r3, r5
 800c642:	9b02      	ldr	r3, [sp, #8]
 800c644:	1b00      	subs	r0, r0, r4
 800c646:	895b      	ldrh	r3, [r3, #10]
 800c648:	465a      	mov	r2, fp
 800c64a:	b209      	sxth	r1, r1
 800c64c:	b200      	sxth	r0, r0
 800c64e:	f7fd fb97 	bl	8009d80 <lv_draw_px>
                if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800c652:	2f0a      	cmp	r7, #10
 800c654:	d10a      	bne.n	800c66c <lv_draw_rect+0x1df0>
                    lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) - 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 800c656:	9b03      	ldr	r3, [sp, #12]
 800c658:	9600      	str	r6, [sp, #0]
 800c65a:	1b59      	subs	r1, r3, r5
 800c65c:	9b02      	ldr	r3, [sp, #8]
 800c65e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c660:	895b      	ldrh	r3, [r3, #10]
 800c662:	1b09      	subs	r1, r1, r4
 800c664:	465a      	mov	r2, fp
 800c666:	b209      	sxth	r1, r1
 800c668:	f7fd fb8a 	bl	8009d80 <lv_draw_px>
 800c66c:	3401      	adds	r4, #1
 800c66e:	f7fe bfab 	b.w	800b5c8 <lv_draw_rect+0xd4c>
            if(mcolor.full == gcolor.full)
 800c672:	9b03      	ldr	r3, [sp, #12]
 800c674:	454b      	cmp	r3, r9
 800c676:	f47f a9bb 	bne.w	800b9f0 <lv_draw_rect+0x1174>
                act_color = mcolor;
 800c67a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
            lv_draw_fill(&edge_top_area, mask, act_color, opa);
 800c67e:	9b04      	ldr	r3, [sp, #16]
 800c680:	4659      	mov	r1, fp
 800c682:	a820      	add	r0, sp, #128	; 0x80
 800c684:	f7fd fbcc 	bl	8009e20 <lv_draw_fill>
 800c688:	f7ff b8a6 	b.w	800b7d8 <lv_draw_rect+0xf5c>

0800c68c <lv_img_cache_invalidate_src>:
 * Invalidate an image source in the cache.
 * Useful if the image source is updated therefore it needs to be cached again.
 * @param src an image source path to a file or pointer to an `lv_img_dsc_t` variable.
 */
void lv_img_cache_invalidate_src(const void * src)
{
 800c68c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 800c690:	4b0f      	ldr	r3, [pc, #60]	; (800c6d0 <lv_img_cache_invalidate_src+0x44>)

    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
 800c692:	4f10      	ldr	r7, [pc, #64]	; (800c6d4 <lv_img_cache_invalidate_src+0x48>)
    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 800c694:	f8d3 8000 	ldr.w	r8, [r3]
{
 800c698:	4606      	mov	r6, r0
    for(i = 0; i < entry_cnt; i++) {
 800c69a:	2500      	movs	r5, #0
        if(cache[i].dec_dsc.src == src || src == NULL) {
 800c69c:	f04f 0928 	mov.w	r9, #40	; 0x28
    for(i = 0; i < entry_cnt; i++) {
 800c6a0:	883a      	ldrh	r2, [r7, #0]
 800c6a2:	b2ab      	uxth	r3, r5
 800c6a4:	429a      	cmp	r2, r3
 800c6a6:	d801      	bhi.n	800c6ac <lv_img_cache_invalidate_src+0x20>

            memset(&cache[i].dec_dsc, 0, sizeof(lv_img_decoder_dsc_t));
            memset(&cache[i], 0, sizeof(lv_img_cache_entry_t));
        }
    }
}
 800c6a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(cache[i].dec_dsc.src == src || src == NULL) {
 800c6ac:	b2ac      	uxth	r4, r5
 800c6ae:	fb09 8404 	mla	r4, r9, r4, r8
 800c6b2:	6863      	ldr	r3, [r4, #4]
 800c6b4:	42b3      	cmp	r3, r6
 800c6b6:	d000      	beq.n	800c6ba <lv_img_cache_invalidate_src+0x2e>
 800c6b8:	b946      	cbnz	r6, 800c6cc <lv_img_cache_invalidate_src+0x40>
            if(cache[i].dec_dsc.src != NULL) {
 800c6ba:	b113      	cbz	r3, 800c6c2 <lv_img_cache_invalidate_src+0x36>
                lv_img_decoder_close(&cache[i].dec_dsc);
 800c6bc:	4620      	mov	r0, r4
 800c6be:	f000 fac5 	bl	800cc4c <lv_img_decoder_close>
            memset(&cache[i], 0, sizeof(lv_img_cache_entry_t));
 800c6c2:	2228      	movs	r2, #40	; 0x28
 800c6c4:	2100      	movs	r1, #0
 800c6c6:	4620      	mov	r0, r4
 800c6c8:	f002 fe3d 	bl	800f346 <memset>
 800c6cc:	3501      	adds	r5, #1
 800c6ce:	e7e7      	b.n	800c6a0 <lv_img_cache_invalidate_src+0x14>
 800c6d0:	2000d920 	.word	0x2000d920
 800c6d4:	20004340 	.word	0x20004340

0800c6d8 <lv_img_cache_set_size>:
{
 800c6d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
 800c6dc:	4c14      	ldr	r4, [pc, #80]	; (800c730 <lv_img_cache_set_size+0x58>)
 800c6de:	6823      	ldr	r3, [r4, #0]
{
 800c6e0:	4680      	mov	r8, r0
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
 800c6e2:	b12b      	cbz	r3, 800c6f0 <lv_img_cache_set_size+0x18>
        lv_img_cache_invalidate_src(NULL);
 800c6e4:	2000      	movs	r0, #0
 800c6e6:	f7ff ffd1 	bl	800c68c <lv_img_cache_invalidate_src>
        lv_mem_free(LV_GC_ROOT(_lv_img_cache_array));
 800c6ea:	6820      	ldr	r0, [r4, #0]
 800c6ec:	f001 f982 	bl	800d9f4 <lv_mem_free>
    LV_GC_ROOT(_lv_img_cache_array) = lv_mem_alloc(sizeof(lv_img_cache_entry_t) * new_entry_cnt);
 800c6f0:	2628      	movs	r6, #40	; 0x28
 800c6f2:	fb06 f008 	mul.w	r0, r6, r8
 800c6f6:	f001 f947 	bl	800d988 <lv_mem_alloc>
 800c6fa:	6020      	str	r0, [r4, #0]
    lv_mem_assert(LV_GC_ROOT(_lv_img_cache_array));
 800c6fc:	b900      	cbnz	r0, 800c700 <lv_img_cache_set_size+0x28>
 800c6fe:	e7fe      	b.n	800c6fe <lv_img_cache_set_size+0x26>
    entry_cnt = new_entry_cnt;
 800c700:	4b0c      	ldr	r3, [pc, #48]	; (800c734 <lv_img_cache_set_size+0x5c>)
    for(i = 0; i < entry_cnt; i++) {
 800c702:	2500      	movs	r5, #0
    entry_cnt = new_entry_cnt;
 800c704:	f8a3 8000 	strh.w	r8, [r3]
    for(i = 0; i < entry_cnt; i++) {
 800c708:	45a8      	cmp	r8, r5
 800c70a:	d101      	bne.n	800c710 <lv_img_cache_set_size+0x38>
}
 800c70c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        memset(&LV_GC_ROOT(_lv_img_cache_array)[i].dec_dsc, 0, sizeof(lv_img_decoder_dsc_t));
 800c710:	6820      	ldr	r0, [r4, #0]
 800c712:	fb06 f705 	mul.w	r7, r6, r5
 800c716:	2224      	movs	r2, #36	; 0x24
 800c718:	2100      	movs	r1, #0
 800c71a:	4438      	add	r0, r7
 800c71c:	f002 fe13 	bl	800f346 <memset>
        memset(&LV_GC_ROOT(_lv_img_cache_array)[i], 0, sizeof(lv_img_cache_entry_t));
 800c720:	6820      	ldr	r0, [r4, #0]
 800c722:	2228      	movs	r2, #40	; 0x28
 800c724:	2100      	movs	r1, #0
 800c726:	4438      	add	r0, r7
 800c728:	f002 fe0d 	bl	800f346 <memset>
 800c72c:	3501      	adds	r5, #1
 800c72e:	e7eb      	b.n	800c708 <lv_img_cache_set_size+0x30>
 800c730:	2000d920 	.word	0x2000d920
 800c734:	20004340 	.word	0x20004340

0800c738 <lv_img_decoder_built_in_close>:
 * Close the pending decoding. Free resources etc.
 * @param decoder pointer to the decoder the function associated with
 * @param dsc pointer to decoder descriptor
 */
void lv_img_decoder_built_in_close(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
 800c738:	b538      	push	{r3, r4, r5, lr}
    (void)decoder; /*Unused*/

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800c73a:	6a0c      	ldr	r4, [r1, #32]
{
 800c73c:	460d      	mov	r5, r1
    if(user_data) {
 800c73e:	b17c      	cbz	r4, 800c760 <lv_img_decoder_built_in_close+0x28>
#if LV_USE_FILESYSTEM
        if(user_data->f) {
 800c740:	6820      	ldr	r0, [r4, #0]
 800c742:	b120      	cbz	r0, 800c74e <lv_img_decoder_built_in_close+0x16>
            lv_fs_close(user_data->f);
 800c744:	f000 fee8 	bl	800d518 <lv_fs_close>
            lv_mem_free(user_data->f);
 800c748:	6820      	ldr	r0, [r4, #0]
 800c74a:	f001 f953 	bl	800d9f4 <lv_mem_free>
        }
#endif
        if(user_data->palette) lv_mem_free(user_data->palette);
 800c74e:	6860      	ldr	r0, [r4, #4]
 800c750:	b108      	cbz	r0, 800c756 <lv_img_decoder_built_in_close+0x1e>
 800c752:	f001 f94f 	bl	800d9f4 <lv_mem_free>

        lv_mem_free(user_data);
 800c756:	4620      	mov	r0, r4
 800c758:	f001 f94c 	bl	800d9f4 <lv_mem_free>

        dsc->user_data = NULL;
 800c75c:	2300      	movs	r3, #0
 800c75e:	622b      	str	r3, [r5, #32]
 800c760:	bd38      	pop	{r3, r4, r5, pc}
	...

0800c764 <lv_img_decoder_built_in_open>:
{
 800c764:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 800c766:	7b0b      	ldrb	r3, [r1, #12]
 800c768:	2b01      	cmp	r3, #1
{
 800c76a:	4605      	mov	r5, r0
 800c76c:	460c      	mov	r4, r1
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 800c76e:	d124      	bne.n	800c7ba <lv_img_decoder_built_in_open+0x56>
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
 800c770:	6848      	ldr	r0, [r1, #4]
 800c772:	f000 ff63 	bl	800d63c <lv_fs_get_ext>
 800c776:	4941      	ldr	r1, [pc, #260]	; (800c87c <lv_img_decoder_built_in_open+0x118>)
 800c778:	f7f3 fd2a 	bl	80001d0 <strcmp>
 800c77c:	2800      	cmp	r0, #0
 800c77e:	d17b      	bne.n	800c878 <lv_img_decoder_built_in_open+0x114>
        lv_fs_res_t res = lv_fs_open(&f, dsc->src, LV_FS_MODE_RD);
 800c780:	2202      	movs	r2, #2
 800c782:	6861      	ldr	r1, [r4, #4]
 800c784:	4668      	mov	r0, sp
 800c786:	f000 ff1d 	bl	800d5c4 <lv_fs_open>
        if(res != LV_FS_RES_OK) {
 800c78a:	2800      	cmp	r0, #0
 800c78c:	d174      	bne.n	800c878 <lv_img_decoder_built_in_open+0x114>
        if(dsc->user_data == NULL) {
 800c78e:	6a26      	ldr	r6, [r4, #32]
 800c790:	b93e      	cbnz	r6, 800c7a2 <lv_img_decoder_built_in_open+0x3e>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 800c792:	2008      	movs	r0, #8
 800c794:	f001 f8f8 	bl	800d988 <lv_mem_alloc>
 800c798:	6220      	str	r0, [r4, #32]
            if(dsc->user_data == NULL) {
 800c79a:	b900      	cbnz	r0, 800c79e <lv_img_decoder_built_in_open+0x3a>
 800c79c:	e7fe      	b.n	800c79c <lv_img_decoder_built_in_open+0x38>
            memset(dsc->user_data, 0, sizeof(lv_img_decoder_built_in_data_t));
 800c79e:	6006      	str	r6, [r0, #0]
 800c7a0:	6046      	str	r6, [r0, #4]
        user_data->f                               = lv_mem_alloc(sizeof(f));
 800c7a2:	2008      	movs	r0, #8
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800c7a4:	6a26      	ldr	r6, [r4, #32]
        user_data->f                               = lv_mem_alloc(sizeof(f));
 800c7a6:	f001 f8ef 	bl	800d988 <lv_mem_alloc>
 800c7aa:	4602      	mov	r2, r0
 800c7ac:	6030      	str	r0, [r6, #0]
        if(user_data->f == NULL) {
 800c7ae:	b900      	cbnz	r0, 800c7b2 <lv_img_decoder_built_in_open+0x4e>
 800c7b0:	e7fe      	b.n	800c7b0 <lv_img_decoder_built_in_open+0x4c>
        memcpy(user_data->f, &f, sizeof(f));
 800c7b2:	466b      	mov	r3, sp
 800c7b4:	cb03      	ldmia	r3!, {r0, r1}
 800c7b6:	6010      	str	r0, [r2, #0]
 800c7b8:	6051      	str	r1, [r2, #4]
    lv_img_cf_t cf = dsc->header.cf;
 800c7ba:	7c20      	ldrb	r0, [r4, #16]
 800c7bc:	f000 001f 	and.w	r0, r0, #31
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 800c7c0:	1f03      	subs	r3, r0, #4
 800c7c2:	2b02      	cmp	r3, #2
 800c7c4:	d807      	bhi.n	800c7d6 <lv_img_decoder_built_in_open+0x72>
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800c7c6:	7b23      	ldrb	r3, [r4, #12]
 800c7c8:	bb6b      	cbnz	r3, 800c826 <lv_img_decoder_built_in_open+0xc2>
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
 800c7ca:	6863      	ldr	r3, [r4, #4]
 800c7cc:	689b      	ldr	r3, [r3, #8]
            dsc->img_data = NULL;
 800c7ce:	6163      	str	r3, [r4, #20]
            return LV_RES_OK;
 800c7d0:	2001      	movs	r0, #1
}
 800c7d2:	b003      	add	sp, #12
 800c7d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(cf == LV_IMG_CF_INDEXED_1BIT || cf == LV_IMG_CF_INDEXED_2BIT || cf == LV_IMG_CF_INDEXED_4BIT ||
 800c7d6:	1fc3      	subs	r3, r0, #7
 800c7d8:	2b03      	cmp	r3, #3
 800c7da:	d846      	bhi.n	800c86a <lv_img_decoder_built_in_open+0x106>
        uint8_t px_size       = lv_img_color_format_get_px_size(cf);
 800c7dc:	f7fd fd88 	bl	800a2f0 <lv_img_color_format_get_px_size>
        if(dsc->user_data == NULL) {
 800c7e0:	6a25      	ldr	r5, [r4, #32]
        uint8_t px_size       = lv_img_color_format_get_px_size(cf);
 800c7e2:	4607      	mov	r7, r0
        if(dsc->user_data == NULL) {
 800c7e4:	b93d      	cbnz	r5, 800c7f6 <lv_img_decoder_built_in_open+0x92>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 800c7e6:	2008      	movs	r0, #8
 800c7e8:	f001 f8ce 	bl	800d988 <lv_mem_alloc>
 800c7ec:	6220      	str	r0, [r4, #32]
            if(dsc->user_data == NULL) {
 800c7ee:	b900      	cbnz	r0, 800c7f2 <lv_img_decoder_built_in_open+0x8e>
 800c7f0:	e7fe      	b.n	800c7f0 <lv_img_decoder_built_in_open+0x8c>
            memset(dsc->user_data, 0, sizeof(lv_img_decoder_built_in_data_t));
 800c7f2:	6005      	str	r5, [r0, #0]
 800c7f4:	6045      	str	r5, [r0, #4]
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 800c7f6:	2602      	movs	r6, #2
 800c7f8:	40be      	lsls	r6, r7
 800c7fa:	4630      	mov	r0, r6
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800c7fc:	6a25      	ldr	r5, [r4, #32]
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 800c7fe:	f001 f8c3 	bl	800d988 <lv_mem_alloc>
 800c802:	6068      	str	r0, [r5, #4]
        if(user_data->palette == NULL) {
 800c804:	b910      	cbnz	r0, 800c80c <lv_img_decoder_built_in_open+0xa8>
            lv_mem_assert(user_data->f);
 800c806:	682b      	ldr	r3, [r5, #0]
 800c808:	b903      	cbnz	r3, 800c80c <lv_img_decoder_built_in_open+0xa8>
 800c80a:	e7fe      	b.n	800c80a <lv_img_decoder_built_in_open+0xa6>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 800c80c:	7b23      	ldrb	r3, [r4, #12]
 800c80e:	2b01      	cmp	r3, #1
 800c810:	d10b      	bne.n	800c82a <lv_img_decoder_built_in_open+0xc6>
            lv_fs_seek(user_data->f, 4); /*Skip the header*/
 800c812:	2104      	movs	r1, #4
 800c814:	6828      	ldr	r0, [r5, #0]
 800c816:	f000 feb1 	bl	800d57c <lv_fs_seek>
            lv_fs_read(user_data->f, user_data->palette, palette_size * sizeof(lv_color_t), NULL);
 800c81a:	2300      	movs	r3, #0
 800c81c:	4632      	mov	r2, r6
 800c81e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c822:	f000 fe8e 	bl	800d542 <lv_fs_read>
            dsc->img_data = NULL;
 800c826:	2300      	movs	r3, #0
 800c828:	e7d1      	b.n	800c7ce <lv_img_decoder_built_in_open+0x6a>
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
 800c82a:	6863      	ldr	r3, [r4, #4]
 800c82c:	2202      	movs	r2, #2
 800c82e:	40ba      	lsls	r2, r7
 800c830:	6899      	ldr	r1, [r3, #8]
 800c832:	4402      	add	r2, r0
            for(i = 0; i < palette_size; i++) {
 800c834:	4290      	cmp	r0, r2
 800c836:	f101 0104 	add.w	r1, r1, #4
 800c83a:	d0f4      	beq.n	800c826 <lv_img_decoder_built_in_open+0xc2>
    color.ch.blue  = (uint16_t)(b8 >> 3);
 800c83c:	f811 3c04 	ldrb.w	r3, [r1, #-4]
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
 800c840:	7807      	ldrb	r7, [r0, #0]
    color.ch.green = (uint16_t)(g8 >> 2);
 800c842:	f811 6c03 	ldrb.w	r6, [r1, #-3]
    color.ch.red   = (uint16_t)(r8 >> 3);
 800c846:	f811 5c02 	ldrb.w	r5, [r1, #-2]
    color.ch.blue  = (uint16_t)(b8 >> 3);
 800c84a:	08db      	lsrs	r3, r3, #3
 800c84c:	f363 0704 	bfi	r7, r3, #0, #5
 800c850:	7007      	strb	r7, [r0, #0]
 800c852:	8803      	ldrh	r3, [r0, #0]
    color.ch.green = (uint16_t)(g8 >> 2);
 800c854:	08b6      	lsrs	r6, r6, #2
 800c856:	f366 134a 	bfi	r3, r6, #5, #6
 800c85a:	8003      	strh	r3, [r0, #0]
    color.ch.red   = (uint16_t)(r8 >> 3);
 800c85c:	08ed      	lsrs	r5, r5, #3
 800c85e:	0a1b      	lsrs	r3, r3, #8
 800c860:	f365 03c7 	bfi	r3, r5, #3, #5
 800c864:	7043      	strb	r3, [r0, #1]
 800c866:	3002      	adds	r0, #2
 800c868:	e7e4      	b.n	800c834 <lv_img_decoder_built_in_open+0xd0>
    else if(cf == LV_IMG_CF_ALPHA_1BIT || cf == LV_IMG_CF_ALPHA_2BIT || cf == LV_IMG_CF_ALPHA_4BIT ||
 800c86a:	380b      	subs	r0, #11
 800c86c:	2803      	cmp	r0, #3
 800c86e:	d9da      	bls.n	800c826 <lv_img_decoder_built_in_open+0xc2>
        lv_img_decoder_built_in_close(decoder, dsc);
 800c870:	4621      	mov	r1, r4
 800c872:	4628      	mov	r0, r5
 800c874:	f7ff ff60 	bl	800c738 <lv_img_decoder_built_in_close>
        return LV_RES_INV;
 800c878:	2000      	movs	r0, #0
 800c87a:	e7aa      	b.n	800c7d2 <lv_img_decoder_built_in_open+0x6e>
 800c87c:	0801238e 	.word	0x0801238e

0800c880 <lv_img_decoder_built_in_info>:
{
 800c880:	b530      	push	{r4, r5, lr}
    lv_img_src_t src_type = lv_img_src_get_type(src);
 800c882:	4608      	mov	r0, r1
{
 800c884:	b085      	sub	sp, #20
 800c886:	460d      	mov	r5, r1
 800c888:	4614      	mov	r4, r2
    lv_img_src_t src_type = lv_img_src_get_type(src);
 800c88a:	f7fd fd3b 	bl	800a304 <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 800c88e:	b9d0      	cbnz	r0, 800c8c6 <lv_img_decoder_built_in_info+0x46>
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
 800c890:	782b      	ldrb	r3, [r5, #0]
 800c892:	f003 031f 	and.w	r3, r3, #31
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 800c896:	1f1a      	subs	r2, r3, #4
 800c898:	2a0a      	cmp	r2, #10
 800c89a:	d812      	bhi.n	800c8c2 <lv_img_decoder_built_in_info+0x42>
        header->w  = ((lv_img_dsc_t *)src)->header.w;
 800c89c:	682a      	ldr	r2, [r5, #0]
 800c89e:	6821      	ldr	r1, [r4, #0]
 800c8a0:	f3c2 228a 	ubfx	r2, r2, #10, #11
 800c8a4:	f362 2194 	bfi	r1, r2, #10, #11
 800c8a8:	6021      	str	r1, [r4, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 800c8aa:	886a      	ldrh	r2, [r5, #2]
 800c8ac:	8861      	ldrh	r1, [r4, #2]
 800c8ae:	f3c2 124a 	ubfx	r2, r2, #5, #11
 800c8b2:	f362 114f 	bfi	r1, r2, #5, #11
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 800c8b6:	7822      	ldrb	r2, [r4, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 800c8b8:	8061      	strh	r1, [r4, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 800c8ba:	f363 0204 	bfi	r2, r3, #0, #5
 800c8be:	7022      	strb	r2, [r4, #0]
    return LV_RES_OK;
 800c8c0:	2001      	movs	r0, #1
}
 800c8c2:	b005      	add	sp, #20
 800c8c4:	bd30      	pop	{r4, r5, pc}
    else if(src_type == LV_IMG_SRC_FILE) {
 800c8c6:	2801      	cmp	r0, #1
 800c8c8:	d117      	bne.n	800c8fa <lv_img_decoder_built_in_info+0x7a>
        res = lv_fs_open(&file, src, LV_FS_MODE_RD);
 800c8ca:	2202      	movs	r2, #2
 800c8cc:	4629      	mov	r1, r5
 800c8ce:	a802      	add	r0, sp, #8
 800c8d0:	f000 fe78 	bl	800d5c4 <lv_fs_open>
        if(res == LV_FS_RES_OK) {
 800c8d4:	b940      	cbnz	r0, 800c8e8 <lv_img_decoder_built_in_info+0x68>
            res = lv_fs_read(&file, header, sizeof(lv_img_header_t), &rn);
 800c8d6:	ab01      	add	r3, sp, #4
 800c8d8:	2204      	movs	r2, #4
 800c8da:	4621      	mov	r1, r4
 800c8dc:	a802      	add	r0, sp, #8
 800c8de:	f000 fe30 	bl	800d542 <lv_fs_read>
            lv_fs_close(&file);
 800c8e2:	a802      	add	r0, sp, #8
 800c8e4:	f000 fe18 	bl	800d518 <lv_fs_close>
        if(header->cf < CF_BUILT_IN_FIRST || header->cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 800c8e8:	7820      	ldrb	r0, [r4, #0]
 800c8ea:	301c      	adds	r0, #28
 800c8ec:	f000 001f 	and.w	r0, r0, #31
 800c8f0:	280a      	cmp	r0, #10
 800c8f2:	bf8c      	ite	hi
 800c8f4:	2000      	movhi	r0, #0
 800c8f6:	2001      	movls	r0, #1
 800c8f8:	e7e3      	b.n	800c8c2 <lv_img_decoder_built_in_info+0x42>
    else if(src_type == LV_IMG_SRC_SYMBOL) {
 800c8fa:	2802      	cmp	r0, #2
 800c8fc:	d10d      	bne.n	800c91a <lv_img_decoder_built_in_info+0x9a>
        header->w = 1;
 800c8fe:	6823      	ldr	r3, [r4, #0]
 800c900:	2001      	movs	r0, #1
 800c902:	f360 2394 	bfi	r3, r0, #10, #11
        header->h = 1;
 800c906:	0c1a      	lsrs	r2, r3, #16
 800c908:	f360 124f 	bfi	r2, r0, #5, #11
        header->w = 1;
 800c90c:	6023      	str	r3, [r4, #0]
        header->h = 1;
 800c90e:	8062      	strh	r2, [r4, #2]
        header->cf = LV_IMG_CF_ALPHA_1BIT;
 800c910:	220b      	movs	r2, #11
 800c912:	f362 0304 	bfi	r3, r2, #0, #5
 800c916:	7023      	strb	r3, [r4, #0]
 800c918:	e7d3      	b.n	800c8c2 <lv_img_decoder_built_in_info+0x42>
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 800c91a:	2000      	movs	r0, #0
 800c91c:	e7d1      	b.n	800c8c2 <lv_img_decoder_built_in_info+0x42>
	...

0800c920 <lv_img_decoder_built_in_read_line>:
{
 800c920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800c924:	7c08      	ldrb	r0, [r1, #16]
{
 800c926:	469b      	mov	fp, r3
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800c928:	f000 031f 	and.w	r3, r0, #31
{
 800c92c:	b0b1      	sub	sp, #196	; 0xc4
 800c92e:	4614      	mov	r4, r2
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800c930:	1f1a      	subs	r2, r3, #4
 800c932:	2a02      	cmp	r2, #2
{
 800c934:	460d      	mov	r5, r1
 800c936:	f9bd 80e8 	ldrsh.w	r8, [sp, #232]	; 0xe8
 800c93a:	f8dd 90ec 	ldr.w	r9, [sp, #236]	; 0xec
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800c93e:	d82b      	bhi.n	800c998 <lv_img_decoder_built_in_read_line+0x78>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 800c940:	7b0b      	ldrb	r3, [r1, #12]
 800c942:	2b01      	cmp	r3, #1
 800c944:	f040 817e 	bne.w	800cc44 <lv_img_decoder_built_in_read_line+0x324>
                                                        lv_coord_t len, uint8_t * buf)
{
#if LV_USE_FILESYSTEM
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
    lv_fs_res_t res;
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 800c948:	f000 001f 	and.w	r0, r0, #31
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800c94c:	6a0e      	ldr	r6, [r1, #32]
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 800c94e:	f7fd fccf 	bl	800a2f0 <lv_img_color_format_get_px_size>

    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 800c952:	6929      	ldr	r1, [r5, #16]
 800c954:	f3c1 218a 	ubfx	r1, r1, #10, #11
 800c958:	fb1b 4101 	smlabb	r1, fp, r1, r4
 800c95c:	4341      	muls	r1, r0
 800c95e:	10c9      	asrs	r1, r1, #3
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 800c960:	4607      	mov	r7, r0
    pos += 4; /*Skip the header*/
    res = lv_fs_seek(user_data->f, pos);
 800c962:	3104      	adds	r1, #4
 800c964:	6830      	ldr	r0, [r6, #0]
 800c966:	f000 fe09 	bl	800d57c <lv_fs_seek>
    if(res != LV_FS_RES_OK) {
 800c96a:	2800      	cmp	r0, #0
 800c96c:	f040 816a 	bne.w	800cc44 <lv_img_decoder_built_in_read_line+0x324>
        LV_LOG_WARN("Built-in image decoder seek failed");
        return LV_RES_INV;
    }
    uint32_t btr = len * (px_size >> 3);
    uint32_t br  = 0;
 800c970:	ab30      	add	r3, sp, #192	; 0xc0
    uint32_t btr = len * (px_size >> 3);
 800c972:	f3c7 07c7 	ubfx	r7, r7, #3, #8
 800c976:	fb17 f808 	smulbb	r8, r7, r8
    uint32_t br  = 0;
 800c97a:	f843 0da0 	str.w	r0, [r3, #-160]!
    lv_fs_read(user_data->f, buf, btr, &br);
 800c97e:	4642      	mov	r2, r8
 800c980:	4649      	mov	r1, r9
 800c982:	6830      	ldr	r0, [r6, #0]
 800c984:	f000 fddd 	bl	800d542 <lv_fs_read>
        return LV_RES_INV;
 800c988:	9808      	ldr	r0, [sp, #32]
 800c98a:	eba0 0208 	sub.w	r2, r0, r8
 800c98e:	4250      	negs	r0, r2
 800c990:	4150      	adcs	r0, r2
}
 800c992:	b031      	add	sp, #196	; 0xc4
 800c994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 800c998:	f1a3 020b 	sub.w	r2, r3, #11
 800c99c:	2a03      	cmp	r2, #3
 800c99e:	f200 80c0 	bhi.w	800cb22 <lv_img_decoder_built_in_read_line+0x202>
static lv_res_t lv_img_decoder_built_in_line_alpha(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                   lv_coord_t len, uint8_t * buf)
{

#if LV_IMG_CF_ALPHA
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 800c9a2:	2200      	movs	r2, #0
 800c9a4:	23ff      	movs	r3, #255	; 0xff
 800c9a6:	f88d 2008 	strb.w	r2, [sp, #8]
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 800c9aa:	f88d 200c 	strb.w	r2, [sp, #12]
 800c9ae:	2255      	movs	r2, #85	; 0x55
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 800c9b0:	f88d 3009 	strb.w	r3, [sp, #9]
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 800c9b4:	f88d 200d 	strb.w	r2, [sp, #13]
 800c9b8:	f88d 300f 	strb.w	r3, [sp, #15]
 800c9bc:	22aa      	movs	r2, #170	; 0xaa
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 800c9be:	4ba2      	ldr	r3, [pc, #648]	; (800cc48 <lv_img_decoder_built_in_read_line+0x328>)
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 800c9c0:	f88d 200e 	strb.w	r2, [sp, #14]
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 800c9c4:	aa04      	add	r2, sp, #16
 800c9c6:	f103 0e10 	add.w	lr, r3, #16
 800c9ca:	4617      	mov	r7, r2
 800c9cc:	6818      	ldr	r0, [r3, #0]
 800c9ce:	6859      	ldr	r1, [r3, #4]
 800c9d0:	4616      	mov	r6, r2
 800c9d2:	c603      	stmia	r6!, {r0, r1}
 800c9d4:	3308      	adds	r3, #8
 800c9d6:	4573      	cmp	r3, lr
 800c9d8:	4632      	mov	r2, r6
 800c9da:	d1f7      	bne.n	800c9cc <lv_img_decoder_built_in_read_line+0xac>
                                           68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255};

    /*Simply fill the buffer with the color. Later only the alpha value will be modified.*/
    lv_color_t bg_color = dsc->style->image.color;
 800c9dc:	68ab      	ldr	r3, [r5, #8]
 800c9de:	8e19      	ldrh	r1, [r3, #48]	; 0x30
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full;
#elif LV_COLOR_DEPTH == 16
        /*Because of Alpha byte 16 bit color can start on odd address which can cause crash*/
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	0a0e      	lsrs	r6, r1, #8
 800c9e4:	464b      	mov	r3, r9
    for(i = 0; i < len; i++) {
 800c9e6:	b210      	sxth	r0, r2
 800c9e8:	4580      	cmp	r8, r0
 800c9ea:	f103 0303 	add.w	r3, r3, #3
 800c9ee:	dc13      	bgt.n	800ca18 <lv_img_decoder_built_in_read_line+0xf8>
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
    }

    const lv_opa_t * opa_table = NULL;
    uint8_t px_size            = lv_img_color_format_get_px_size(dsc->header.cf);
 800c9f0:	7c28      	ldrb	r0, [r5, #16]
 800c9f2:	f000 001f 	and.w	r0, r0, #31
 800c9f6:	f7fd fc7b 	bl	800a2f0 <lv_img_color_format_get_px_size>
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/

    lv_coord_t w = 0;
    uint32_t ofs = 0;
    int8_t pos   = 0;
    switch(dsc->header.cf) {
 800c9fa:	7c2b      	ldrb	r3, [r5, #16]
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 800c9fc:	2601      	movs	r6, #1
 800c9fe:	4086      	lsls	r6, r0
    switch(dsc->header.cf) {
 800ca00:	f003 031f 	and.w	r3, r3, #31
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 800ca04:	3e01      	subs	r6, #1
    switch(dsc->header.cf) {
 800ca06:	3b0b      	subs	r3, #11
    uint8_t px_size            = lv_img_color_format_get_px_size(dsc->header.cf);
 800ca08:	4682      	mov	sl, r0
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 800ca0a:	b2b6      	uxth	r6, r6
    switch(dsc->header.cf) {
 800ca0c:	2b03      	cmp	r3, #3
 800ca0e:	d856      	bhi.n	800cabe <lv_img_decoder_built_in_read_line+0x19e>
 800ca10:	e8df f003 	tbb	[pc, r3]
 800ca14:	4c3a2708 	.word	0x4c3a2708
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
 800ca18:	f803 1c03 	strb.w	r1, [r3, #-3]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
 800ca1c:	f803 6c02 	strb.w	r6, [r3, #-2]
 800ca20:	3201      	adds	r2, #1
 800ca22:	e7e0      	b.n	800c9e6 <lv_img_decoder_built_in_read_line+0xc6>
        case LV_IMG_CF_ALPHA_1BIT:
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 800ca24:	692b      	ldr	r3, [r5, #16]
 800ca26:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800ca2a:	10da      	asrs	r2, r3, #3
            if(dsc->header.w & 0x7) w++;
 800ca2c:	075b      	lsls	r3, r3, #29
            ofs += w * y + (x >> 3); /*First pixel*/
 800ca2e:	ea4f 01e4 	mov.w	r1, r4, asr #3
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 800ca32:	bf0c      	ite	eq
 800ca34:	b212      	sxtheq	r2, r2
            if(dsc->header.w & 0x7) w++;
 800ca36:	3201      	addne	r2, #1
            pos       = 7 - (x & 0x7);
 800ca38:	43e4      	mvns	r4, r4
            ofs += w * y + (x >> 3); /*First pixel*/
 800ca3a:	fb02 110b 	mla	r1, r2, fp, r1
            pos       = 7 - (x & 0x7);
 800ca3e:	f004 0407 	and.w	r4, r4, #7
            opa_table = alpha1_opa_table;
 800ca42:	af02      	add	r7, sp, #8
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
    uint8_t fs_buf[LV_HOR_RES_MAX];
#endif

    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800ca44:	7b2b      	ldrb	r3, [r5, #12]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d13d      	bne.n	800cac6 <lv_img_decoder_built_in_read_line+0x1a6>
        const lv_img_dsc_t * img_dsc = dsc->src;

        data_tmp = img_dsc->data + ofs;
 800ca4a:	686b      	ldr	r3, [r5, #4]
 800ca4c:	689b      	ldr	r3, [r3, #8]
 800ca4e:	4419      	add	r1, r3
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];

        pos -= px_size;
        if(pos < 0) {
            pos = 8 - px_size;
 800ca50:	f1ca 0008 	rsb	r0, sl, #8
        data_tmp = fs_buf;
 800ca54:	2300      	movs	r3, #0
            pos = 8 - px_size;
 800ca56:	b240      	sxtb	r0, r0
    for(i = 0; i < len; i++) {
 800ca58:	b21a      	sxth	r2, r3
 800ca5a:	4590      	cmp	r8, r2
 800ca5c:	dc44      	bgt.n	800cae8 <lv_img_decoder_built_in_read_line+0x1c8>
        res = lv_img_decoder_built_in_line_indexed(dsc, x, y, len, buf);
 800ca5e:	2001      	movs	r0, #1
 800ca60:	e797      	b.n	800c992 <lv_img_decoder_built_in_read_line+0x72>
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800ca62:	692b      	ldr	r3, [r5, #16]
 800ca64:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800ca68:	109a      	asrs	r2, r3, #2
            if(dsc->header.w & 0x3) w++;
 800ca6a:	079f      	lsls	r7, r3, #30
            ofs += w * y + (x >> 2); /*First pixel*/
 800ca6c:	ea4f 01a4 	mov.w	r1, r4, asr #2
            pos       = 6 - ((x & 0x3) * 2);
 800ca70:	ea6f 0404 	mvn.w	r4, r4
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800ca74:	bf0c      	ite	eq
 800ca76:	b212      	sxtheq	r2, r2
            if(dsc->header.w & 0x3) w++;
 800ca78:	3201      	addne	r2, #1
            pos       = 6 - ((x & 0x3) * 2);
 800ca7a:	f004 0403 	and.w	r4, r4, #3
            ofs += w * y + (x >> 2); /*First pixel*/
 800ca7e:	fb02 110b 	mla	r1, r2, fp, r1
            pos       = 6 - ((x & 0x3) * 2);
 800ca82:	0064      	lsls	r4, r4, #1
            opa_table = alpha2_opa_table;
 800ca84:	af03      	add	r7, sp, #12
 800ca86:	e7dd      	b.n	800ca44 <lv_img_decoder_built_in_read_line+0x124>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800ca88:	692b      	ldr	r3, [r5, #16]
 800ca8a:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800ca8e:	105a      	asrs	r2, r3, #1
            if(dsc->header.w & 0x1) w++;
 800ca90:	07d8      	lsls	r0, r3, #31
            ofs += w * y + (x >> 1); /*First pixel*/
 800ca92:	ea4f 0164 	mov.w	r1, r4, asr #1
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800ca96:	bf54      	ite	pl
 800ca98:	b212      	sxthpl	r2, r2
            if(dsc->header.w & 0x1) w++;
 800ca9a:	3201      	addmi	r2, #1
            pos       = 4 - ((x & 0x1) * 4);
 800ca9c:	f014 0f01 	tst.w	r4, #1
            ofs += w * y + (x >> 1); /*First pixel*/
 800caa0:	fb02 110b 	mla	r1, r2, fp, r1
            pos       = 4 - ((x & 0x1) * 4);
 800caa4:	bf0c      	ite	eq
 800caa6:	2404      	moveq	r4, #4
 800caa8:	2400      	movne	r4, #0
 800caaa:	e7cb      	b.n	800ca44 <lv_img_decoder_built_in_read_line+0x124>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 800caac:	6929      	ldr	r1, [r5, #16]
 800caae:	f3c1 218a 	ubfx	r1, r1, #10, #11
 800cab2:	b20a      	sxth	r2, r1
            ofs += w * y + x;  /*First pixel*/
 800cab4:	fb1b 4101 	smlabb	r1, fp, r1, r4
            pos = 0;
 800cab8:	2400      	movs	r4, #0
    const lv_opa_t * opa_table = NULL;
 800caba:	4627      	mov	r7, r4
 800cabc:	e7c2      	b.n	800ca44 <lv_img_decoder_built_in_read_line+0x124>
    int8_t pos   = 0;
 800cabe:	2400      	movs	r4, #0
    uint32_t ofs = 0;
 800cac0:	4621      	mov	r1, r4
    lv_coord_t w = 0;
 800cac2:	4622      	mov	r2, r4
 800cac4:	e7f9      	b.n	800caba <lv_img_decoder_built_in_read_line+0x19a>
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800cac6:	f8d5 b020 	ldr.w	fp, [r5, #32]
 800caca:	9201      	str	r2, [sp, #4]
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
 800cacc:	3104      	adds	r1, #4
 800cace:	f8db 0000 	ldr.w	r0, [fp]
 800cad2:	f000 fd53 	bl	800d57c <lv_fs_seek>
        lv_fs_read(user_data->f, fs_buf, w, NULL);
 800cad6:	a908      	add	r1, sp, #32
 800cad8:	2300      	movs	r3, #0
 800cada:	9a01      	ldr	r2, [sp, #4]
 800cadc:	f8db 0000 	ldr.w	r0, [fp]
 800cae0:	f000 fd2f 	bl	800d542 <lv_fs_read>
        data_tmp = fs_buf;
 800cae4:	a908      	add	r1, sp, #32
 800cae6:	e7b3      	b.n	800ca50 <lv_img_decoder_built_in_read_line+0x130>
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
 800cae8:	780a      	ldrb	r2, [r1, #0]
 800caea:	fa06 fe04 	lsl.w	lr, r6, r4
 800caee:	ea02 020e 	and.w	r2, r2, lr
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 800caf2:	f895 e010 	ldrb.w	lr, [r5, #16]
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
 800caf6:	4122      	asrs	r2, r4
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 800caf8:	f00e 0e1f 	and.w	lr, lr, #31
 800cafc:	f1be 0f0e 	cmp.w	lr, #14
 800cb00:	b2d2      	uxtb	r2, r2
 800cb02:	eb03 0e43 	add.w	lr, r3, r3, lsl #1
        pos -= px_size;
 800cb06:	eba4 040a 	sub.w	r4, r4, sl
 800cb0a:	b264      	sxtb	r4, r4
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 800cb0c:	44ce      	add	lr, r9
 800cb0e:	bf18      	it	ne
 800cb10:	5cba      	ldrbne	r2, [r7, r2]
 800cb12:	f88e 2002 	strb.w	r2, [lr, #2]
        if(pos < 0) {
 800cb16:	2c00      	cmp	r4, #0
            pos = 8 - px_size;
 800cb18:	bfbc      	itt	lt
 800cb1a:	4604      	movlt	r4, r0
            data_tmp++;
 800cb1c:	3101      	addlt	r1, #1
 800cb1e:	3301      	adds	r3, #1
 800cb20:	e79a      	b.n	800ca58 <lv_img_decoder_built_in_read_line+0x138>
    } else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
 800cb22:	3b07      	subs	r3, #7
 800cb24:	2b03      	cmp	r3, #3
 800cb26:	f200 808d 	bhi.w	800cc44 <lv_img_decoder_built_in_read_line+0x324>
static lv_res_t lv_img_decoder_built_in_line_indexed(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                     lv_coord_t len, uint8_t * buf)
{

#if LV_IMG_CF_INDEXED
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 800cb2a:	f000 001f 	and.w	r0, r0, #31
 800cb2e:	f7fd fbdf 	bl	800a2f0 <lv_img_color_format_get_px_size>
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/

    lv_coord_t w = 0;
    int8_t pos   = 0;
    uint32_t ofs = 0;
    switch(dsc->header.cf) {
 800cb32:	7c2b      	ldrb	r3, [r5, #16]
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 800cb34:	2701      	movs	r7, #1
 800cb36:	4087      	lsls	r7, r0
    switch(dsc->header.cf) {
 800cb38:	f003 031f 	and.w	r3, r3, #31
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 800cb3c:	3f01      	subs	r7, #1
    switch(dsc->header.cf) {
 800cb3e:	3b07      	subs	r3, #7
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 800cb40:	4682      	mov	sl, r0
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 800cb42:	b2bf      	uxth	r7, r7
    switch(dsc->header.cf) {
 800cb44:	2b03      	cmp	r3, #3
 800cb46:	d86b      	bhi.n	800cc20 <lv_img_decoder_built_in_read_line+0x300>
 800cb48:	e8df f003 	tbb	[pc, r3]
 800cb4c:	604c3902 	.word	0x604c3902
        case LV_IMG_CF_INDEXED_1BIT:
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 800cb50:	692b      	ldr	r3, [r5, #16]
 800cb52:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800cb56:	10de      	asrs	r6, r3, #3
            if(dsc->header.w & 0x7) w++;
 800cb58:	0759      	lsls	r1, r3, #29
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 800cb5a:	bf08      	it	eq
 800cb5c:	b236      	sxtheq	r6, r6
            ofs += w * y + (x >> 3); /*First pixel*/
 800cb5e:	ea4f 01e4 	mov.w	r1, r4, asr #3
            if(dsc->header.w & 0x7) w++;
 800cb62:	bf18      	it	ne
 800cb64:	3601      	addne	r6, #1
            ofs += w * y + (x >> 3); /*First pixel*/
 800cb66:	fb06 1b0b 	mla	fp, r6, fp, r1
            ofs += 8;                /*Skip the palette*/
            pos = 7 - (x & 0x7);
 800cb6a:	43e4      	mvns	r4, r4
            ofs += 8;                /*Skip the palette*/
 800cb6c:	f10b 0108 	add.w	r1, fp, #8
            pos = 7 - (x & 0x7);
 800cb70:	f004 0407 	and.w	r4, r4, #7

#if LV_USE_FILESYSTEM
    uint8_t fs_buf[LV_HOR_RES_MAX];
#endif
    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800cb74:	7b2b      	ldrb	r3, [r5, #12]
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800cb76:	f8d5 b020 	ldr.w	fp, [r5, #32]
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d154      	bne.n	800cc28 <lv_img_decoder_built_in_read_line+0x308>
        const lv_img_dsc_t * img_dsc = dsc->src;
        data_tmp                     = img_dsc->data + ofs;
 800cb7e:	686b      	ldr	r3, [r5, #4]
 800cb80:	689b      	ldr	r3, [r3, #8]
 800cb82:	4419      	add	r1, r3
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
        cbuf[i] = user_data->palette[val_act];

        pos -= px_size;
        if(pos < 0) {
            pos = 8 - px_size;
 800cb84:	f1ca 0508 	rsb	r5, sl, #8
        data_tmp = fs_buf;
 800cb88:	2300      	movs	r3, #0
            pos = 8 - px_size;
 800cb8a:	b26d      	sxtb	r5, r5
    for(i = 0; i < len; i++) {
 800cb8c:	b21a      	sxth	r2, r3
 800cb8e:	4590      	cmp	r8, r2
 800cb90:	f77f af65 	ble.w	800ca5e <lv_img_decoder_built_in_read_line+0x13e>
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
 800cb94:	7808      	ldrb	r0, [r1, #0]
 800cb96:	fa07 f204 	lsl.w	r2, r7, r4
 800cb9a:	4010      	ands	r0, r2
 800cb9c:	4120      	asrs	r0, r4
        cbuf[i] = user_data->palette[val_act];
 800cb9e:	f8db 2004 	ldr.w	r2, [fp, #4]
 800cba2:	b2c0      	uxtb	r0, r0
        pos -= px_size;
 800cba4:	eba4 040a 	sub.w	r4, r4, sl
 800cba8:	b264      	sxtb	r4, r4
        if(pos < 0) {
 800cbaa:	2c00      	cmp	r4, #0
        cbuf[i] = user_data->palette[val_act];
 800cbac:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 800cbb0:	f829 2013 	strh.w	r2, [r9, r3, lsl #1]
            pos = 8 - px_size;
 800cbb4:	bfbc      	itt	lt
 800cbb6:	462c      	movlt	r4, r5
            data_tmp++;
 800cbb8:	3101      	addlt	r1, #1
 800cbba:	3301      	adds	r3, #1
 800cbbc:	e7e6      	b.n	800cb8c <lv_img_decoder_built_in_read_line+0x26c>
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800cbbe:	692b      	ldr	r3, [r5, #16]
 800cbc0:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800cbc4:	109e      	asrs	r6, r3, #2
            if(dsc->header.w & 0x3) w++;
 800cbc6:	079a      	lsls	r2, r3, #30
            ofs += w * y + (x >> 2); /*First pixel*/
 800cbc8:	ea4f 01a4 	mov.w	r1, r4, asr #2
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800cbcc:	bf0c      	ite	eq
 800cbce:	b236      	sxtheq	r6, r6
            if(dsc->header.w & 0x3) w++;
 800cbd0:	3601      	addne	r6, #1
            pos = 6 - ((x & 0x3) * 2);
 800cbd2:	43e4      	mvns	r4, r4
            ofs += w * y + (x >> 2); /*First pixel*/
 800cbd4:	fb06 1b0b 	mla	fp, r6, fp, r1
            pos = 6 - ((x & 0x3) * 2);
 800cbd8:	f004 0403 	and.w	r4, r4, #3
            ofs += 16;               /*Skip the palette*/
 800cbdc:	f10b 0110 	add.w	r1, fp, #16
            pos = 6 - ((x & 0x3) * 2);
 800cbe0:	0064      	lsls	r4, r4, #1
 800cbe2:	e7c7      	b.n	800cb74 <lv_img_decoder_built_in_read_line+0x254>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800cbe4:	692b      	ldr	r3, [r5, #16]
 800cbe6:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800cbea:	105e      	asrs	r6, r3, #1
            if(dsc->header.w & 0x1) w++;
 800cbec:	07db      	lsls	r3, r3, #31
            ofs += w * y + (x >> 1); /*First pixel*/
 800cbee:	ea4f 0164 	mov.w	r1, r4, asr #1
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800cbf2:	bf54      	ite	pl
 800cbf4:	b236      	sxthpl	r6, r6
            if(dsc->header.w & 0x1) w++;
 800cbf6:	3601      	addmi	r6, #1
            ofs += w * y + (x >> 1); /*First pixel*/
 800cbf8:	fb06 1b0b 	mla	fp, r6, fp, r1
            pos = 4 - ((x & 0x1) * 4);
 800cbfc:	f014 0f01 	tst.w	r4, #1
            ofs += 64;               /*Skip the palette*/
 800cc00:	f10b 0140 	add.w	r1, fp, #64	; 0x40
            pos = 4 - ((x & 0x1) * 4);
 800cc04:	bf0c      	ite	eq
 800cc06:	2404      	moveq	r4, #4
 800cc08:	2400      	movne	r4, #0
 800cc0a:	e7b3      	b.n	800cb74 <lv_img_decoder_built_in_read_line+0x254>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 800cc0c:	6929      	ldr	r1, [r5, #16]
 800cc0e:	f3c1 218a 	ubfx	r1, r1, #10, #11
            ofs += w * y + x;  /*First pixel*/
 800cc12:	fb1b 4401 	smlabb	r4, fp, r1, r4
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 800cc16:	b20e      	sxth	r6, r1
            ofs += 1024;       /*Skip the palette*/
 800cc18:	f504 6180 	add.w	r1, r4, #1024	; 0x400
            pos = 0;
 800cc1c:	2400      	movs	r4, #0
 800cc1e:	e7a9      	b.n	800cb74 <lv_img_decoder_built_in_read_line+0x254>
    uint32_t ofs = 0;
 800cc20:	2100      	movs	r1, #0
    int8_t pos   = 0;
 800cc22:	460c      	mov	r4, r1
    lv_coord_t w = 0;
 800cc24:	460e      	mov	r6, r1
 800cc26:	e7a5      	b.n	800cb74 <lv_img_decoder_built_in_read_line+0x254>
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
 800cc28:	3104      	adds	r1, #4
 800cc2a:	f8db 0000 	ldr.w	r0, [fp]
 800cc2e:	f000 fca5 	bl	800d57c <lv_fs_seek>
        lv_fs_read(user_data->f, fs_buf, w, NULL);
 800cc32:	a908      	add	r1, sp, #32
 800cc34:	2300      	movs	r3, #0
 800cc36:	4632      	mov	r2, r6
 800cc38:	f8db 0000 	ldr.w	r0, [fp]
 800cc3c:	f000 fc81 	bl	800d542 <lv_fs_read>
        data_tmp = fs_buf;
 800cc40:	a908      	add	r1, sp, #32
 800cc42:	e79f      	b.n	800cb84 <lv_img_decoder_built_in_read_line+0x264>
    lv_res_t res = LV_RES_INV;
 800cc44:	2000      	movs	r0, #0
 800cc46:	e6a4      	b.n	800c992 <lv_img_decoder_built_in_read_line+0x72>
 800cc48:	08011d2e 	.word	0x08011d2e

0800cc4c <lv_img_decoder_close>:
{
 800cc4c:	4601      	mov	r1, r0
    if(dsc->decoder) {
 800cc4e:	6800      	ldr	r0, [r0, #0]
 800cc50:	b110      	cbz	r0, 800cc58 <lv_img_decoder_close+0xc>
        if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
 800cc52:	68c2      	ldr	r2, [r0, #12]
 800cc54:	b102      	cbz	r2, 800cc58 <lv_img_decoder_close+0xc>
 800cc56:	4710      	bx	r2
 800cc58:	4770      	bx	lr
	...

0800cc5c <lv_img_decoder_create>:
{
 800cc5c:	b510      	push	{r4, lr}
    decoder = lv_ll_ins_head(&LV_GC_ROOT(_lv_img_defoder_ll));
 800cc5e:	4806      	ldr	r0, [pc, #24]	; (800cc78 <lv_img_decoder_create+0x1c>)
 800cc60:	f000 fd1b 	bl	800d69a <lv_ll_ins_head>
    lv_mem_assert(decoder);
 800cc64:	4604      	mov	r4, r0
 800cc66:	b900      	cbnz	r0, 800cc6a <lv_img_decoder_create+0xe>
 800cc68:	e7fe      	b.n	800cc68 <lv_img_decoder_create+0xc>
    memset(decoder, 0, sizeof(lv_img_decoder_t));
 800cc6a:	2210      	movs	r2, #16
 800cc6c:	2100      	movs	r1, #0
 800cc6e:	f002 fb6a 	bl	800f346 <memset>
}
 800cc72:	4620      	mov	r0, r4
 800cc74:	bd10      	pop	{r4, pc}
 800cc76:	bf00      	nop
 800cc78:	2000d904 	.word	0x2000d904

0800cc7c <lv_img_decoder_init>:
{
 800cc7c:	b508      	push	{r3, lr}
    lv_ll_init(&LV_GC_ROOT(_lv_img_defoder_ll), sizeof(lv_img_decoder_t));
 800cc7e:	2110      	movs	r1, #16
 800cc80:	4807      	ldr	r0, [pc, #28]	; (800cca0 <lv_img_decoder_init+0x24>)
 800cc82:	f000 fd00 	bl	800d686 <lv_ll_init>
    decoder = lv_img_decoder_create();
 800cc86:	f7ff ffe9 	bl	800cc5c <lv_img_decoder_create>
    if(decoder == NULL) {
 800cc8a:	b900      	cbnz	r0, 800cc8e <lv_img_decoder_init+0x12>
 800cc8c:	e7fe      	b.n	800cc8c <lv_img_decoder_init+0x10>
    decoder->info_cb = info_cb;
 800cc8e:	4b05      	ldr	r3, [pc, #20]	; (800cca4 <lv_img_decoder_init+0x28>)
 800cc90:	6003      	str	r3, [r0, #0]
    decoder->open_cb = open_cb;
 800cc92:	4b05      	ldr	r3, [pc, #20]	; (800cca8 <lv_img_decoder_init+0x2c>)
 800cc94:	6043      	str	r3, [r0, #4]
    decoder->read_line_cb = read_line_cb;
 800cc96:	4b05      	ldr	r3, [pc, #20]	; (800ccac <lv_img_decoder_init+0x30>)
 800cc98:	6083      	str	r3, [r0, #8]
    decoder->close_cb = close_cb;
 800cc9a:	4b05      	ldr	r3, [pc, #20]	; (800ccb0 <lv_img_decoder_init+0x34>)
 800cc9c:	60c3      	str	r3, [r0, #12]
 800cc9e:	bd08      	pop	{r3, pc}
 800cca0:	2000d904 	.word	0x2000d904
 800cca4:	0800c881 	.word	0x0800c881
 800cca8:	0800c765 	.word	0x0800c765
 800ccac:	0800c921 	.word	0x0800c921
 800ccb0:	0800c739 	.word	0x0800c739

0800ccb4 <lv_font_get_glyph_bitmap>:
 * @param letter an UNICODE character code
 * @return  pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter)
{
    return font_p->get_glyph_bitmap(font_p, letter);
 800ccb4:	6843      	ldr	r3, [r0, #4]
 800ccb6:	4718      	bx	r3

0800ccb8 <lv_font_get_glyph_dsc>:
 * @param letter an UNICODE letter code
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter, uint32_t letter_next)
{
 800ccb8:	b410      	push	{r4}
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
 800ccba:	6804      	ldr	r4, [r0, #0]
 800ccbc:	46a4      	mov	ip, r4
}
 800ccbe:	f85d 4b04 	ldr.w	r4, [sp], #4
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
 800ccc2:	4760      	bx	ip

0800ccc4 <lv_font_get_glyph_width>:
 * @param letter an UNICODE letter
 * @param letter_next the next letter after `letter`. Used for kerning
 * @return the width of the glyph
 */
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
{
 800ccc4:	b507      	push	{r0, r1, r2, lr}
    lv_font_glyph_dsc_t g;
    bool ret;
    ret = lv_font_get_glyph_dsc(font, &g, letter, letter_next);
 800ccc6:	4613      	mov	r3, r2
 800ccc8:	460a      	mov	r2, r1
 800ccca:	4669      	mov	r1, sp
 800cccc:	f7ff fff4 	bl	800ccb8 <lv_font_get_glyph_dsc>
    if(ret) return g.adv_w;
 800ccd0:	b108      	cbz	r0, 800ccd6 <lv_font_get_glyph_width+0x12>
 800ccd2:	f8bd 0000 	ldrh.w	r0, [sp]
    else return 0;
}
 800ccd6:	b003      	add	sp, #12
 800ccd8:	f85d fb04 	ldr.w	pc, [sp], #4

0800ccdc <kern_pair_8_compare>:
{
    const uint8_t * ref8_p = ref;
    const uint8_t * element8_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
 800ccdc:	7803      	ldrb	r3, [r0, #0]
 800ccde:	780a      	ldrb	r2, [r1, #0]
 800cce0:	4293      	cmp	r3, r2
 800cce2:	bf11      	iteee	ne
 800cce4:	1a98      	subne	r0, r3, r2
    else return (int32_t) ref8_p[1] - element8_p[1];
 800cce6:	784b      	ldrbeq	r3, [r1, #1]
 800cce8:	7840      	ldrbeq	r0, [r0, #1]
 800ccea:	1ac0      	subeq	r0, r0, r3

}
 800ccec:	4770      	bx	lr

0800ccee <kern_pair_16_compare>:
{
    const uint16_t * ref16_p = ref;
    const uint16_t * element16_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
 800ccee:	8803      	ldrh	r3, [r0, #0]
 800ccf0:	880a      	ldrh	r2, [r1, #0]
 800ccf2:	4293      	cmp	r3, r2
 800ccf4:	bf11      	iteee	ne
 800ccf6:	1a98      	subne	r0, r3, r2
    else return (int32_t) ref16_p[1] - element16_p[1];
 800ccf8:	884b      	ldrheq	r3, [r1, #2]
 800ccfa:	8840      	ldrheq	r0, [r0, #2]
 800ccfc:	1ac0      	subeq	r0, r0, r3
}
 800ccfe:	4770      	bx	lr

0800cd00 <unicode_list_compare>:
 *  @retval > 0   Reference is less than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
    return (*(uint16_t *)ref) - (*(uint16_t *)element);
 800cd00:	8800      	ldrh	r0, [r0, #0]
 800cd02:	880b      	ldrh	r3, [r1, #0]
}
 800cd04:	1ac0      	subs	r0, r0, r3
 800cd06:	4770      	bx	lr

0800cd08 <get_glyph_dsc_id.isra.0.part.1>:
static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
 800cd08:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 800cd0a:	6804      	ldr	r4, [r0, #0]
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
 800cd0c:	6963      	ldr	r3, [r4, #20]
 800cd0e:	428b      	cmp	r3, r1
static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
 800cd10:	b085      	sub	sp, #20
 800cd12:	460d      	mov	r5, r1
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
 800cd14:	d00b      	beq.n	800cd2e <get_glyph_dsc_id.isra.0.part.1+0x26>
 800cd16:	2700      	movs	r7, #0
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 800cd18:	f04f 0e14 	mov.w	lr, #20
    for(i = 0; i < fdsc->cmap_num; i++) {
 800cd1c:	8a63      	ldrh	r3, [r4, #18]
 800cd1e:	b2be      	uxth	r6, r7
 800cd20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cd24:	429e      	cmp	r6, r3
 800cd26:	db05      	blt.n	800cd34 <get_glyph_dsc_id.isra.0.part.1+0x2c>
    fdsc->last_letter = letter;
 800cd28:	6165      	str	r5, [r4, #20]
    fdsc->last_glyph_id = 0;
 800cd2a:	2000      	movs	r0, #0
 800cd2c:	e015      	b.n	800cd5a <get_glyph_dsc_id.isra.0.part.1+0x52>
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
 800cd2e:	69a0      	ldr	r0, [r4, #24]
}
 800cd30:	b005      	add	sp, #20
 800cd32:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 800cd34:	68a3      	ldr	r3, [r4, #8]
 800cd36:	fb0e f606 	mul.w	r6, lr, r6
 800cd3a:	1999      	adds	r1, r3, r6
 800cd3c:	599a      	ldr	r2, [r3, r6]
        if(rcp > fdsc->cmaps[i].range_length) continue;
 800cd3e:	888b      	ldrh	r3, [r1, #4]
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 800cd40:	1aaa      	subs	r2, r5, r2
        if(rcp > fdsc->cmaps[i].range_length) continue;
 800cd42:	429a      	cmp	r2, r3
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 800cd44:	9203      	str	r2, [sp, #12]
 800cd46:	f107 0701 	add.w	r7, r7, #1
        if(rcp > fdsc->cmaps[i].range_length) continue;
 800cd4a:	d8e7      	bhi.n	800cd1c <get_glyph_dsc_id.isra.0.part.1+0x14>
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
 800cd4c:	7c8b      	ldrb	r3, [r1, #18]
 800cd4e:	f013 0303 	ands.w	r3, r3, #3
 800cd52:	d104      	bne.n	800cd5e <get_glyph_dsc_id.isra.0.part.1+0x56>
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
 800cd54:	88c8      	ldrh	r0, [r1, #6]
 800cd56:	4410      	add	r0, r2
        fdsc->last_letter = letter;
 800cd58:	6165      	str	r5, [r4, #20]
    fdsc->last_glyph_id = 0;
 800cd5a:	61a0      	str	r0, [r4, #24]
 800cd5c:	e7e8      	b.n	800cd30 <get_glyph_dsc_id.isra.0.part.1+0x28>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
 800cd5e:	2b01      	cmp	r3, #1
 800cd60:	d104      	bne.n	800cd6c <get_glyph_dsc_id.isra.0.part.1+0x64>
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
 800cd62:	68cb      	ldr	r3, [r1, #12]
 800cd64:	5c98      	ldrb	r0, [r3, r2]
 800cd66:	88cb      	ldrh	r3, [r1, #6]
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 800cd68:	4418      	add	r0, r3
 800cd6a:	e7f5      	b.n	800cd58 <get_glyph_dsc_id.isra.0.part.1+0x50>
 800cd6c:	4811      	ldr	r0, [pc, #68]	; (800cdb4 <get_glyph_dsc_id.isra.0.part.1+0xac>)
 800cd6e:	8a0a      	ldrh	r2, [r1, #16]
            uint8_t * p = lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length, sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);
 800cd70:	9000      	str	r0, [sp, #0]
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
 800cd72:	2b02      	cmp	r3, #2
 800cd74:	d10e      	bne.n	800cd94 <get_glyph_dsc_id.isra.0.part.1+0x8c>
            uint8_t * p = lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length, sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);
 800cd76:	6889      	ldr	r1, [r1, #8]
 800cd78:	a803      	add	r0, sp, #12
 800cd7a:	f001 fa18 	bl	800e1ae <lv_utils_bsearch>
            if(p) {
 800cd7e:	b908      	cbnz	r0, 800cd84 <get_glyph_dsc_id.isra.0.part.1+0x7c>
        uint32_t glyph_id = 0;
 800cd80:	2000      	movs	r0, #0
 800cd82:	e7e9      	b.n	800cd58 <get_glyph_dsc_id.isra.0.part.1+0x50>
                uint32_t ofs = (lv_uintptr_t)p - (lv_uintptr_t) fdsc->cmaps[i].unicode_list;
 800cd84:	68a3      	ldr	r3, [r4, #8]
 800cd86:	441e      	add	r6, r3
 800cd88:	68b3      	ldr	r3, [r6, #8]
 800cd8a:	1ac3      	subs	r3, r0, r3
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
 800cd8c:	88f0      	ldrh	r0, [r6, #6]
 800cd8e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800cd92:	e7e1      	b.n	800cd58 <get_glyph_dsc_id.isra.0.part.1+0x50>
            uint8_t * p = lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length, sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);
 800cd94:	2302      	movs	r3, #2
 800cd96:	6889      	ldr	r1, [r1, #8]
 800cd98:	a803      	add	r0, sp, #12
 800cd9a:	f001 fa08 	bl	800e1ae <lv_utils_bsearch>
            if(p) {
 800cd9e:	2800      	cmp	r0, #0
 800cda0:	d0ee      	beq.n	800cd80 <get_glyph_dsc_id.isra.0.part.1+0x78>
                uint32_t ofs = (lv_uintptr_t)p - (lv_uintptr_t) fdsc->cmaps[i].unicode_list;
 800cda2:	68a3      	ldr	r3, [r4, #8]
 800cda4:	441e      	add	r6, r3
 800cda6:	68b3      	ldr	r3, [r6, #8]
 800cda8:	1ac0      	subs	r0, r0, r3
                ofs = ofs >> 1;     /*The list stores `uint16_t` so the get the index divide by 2*/
 800cdaa:	0840      	lsrs	r0, r0, #1
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 800cdac:	68f3      	ldr	r3, [r6, #12]
 800cdae:	5c18      	ldrb	r0, [r3, r0]
 800cdb0:	88f3      	ldrh	r3, [r6, #6]
 800cdb2:	e7d9      	b.n	800cd68 <get_glyph_dsc_id.isra.0.part.1+0x60>
 800cdb4:	0800cd01 	.word	0x0800cd01

0800cdb8 <lv_font_get_bitmap_fmt_txt>:
{
 800cdb8:	b510      	push	{r4, lr}
    if(letter == '\0') return 0;
 800cdba:	b909      	cbnz	r1, 800cdc0 <lv_font_get_bitmap_fmt_txt+0x8>
    if(!gid) return false;
 800cdbc:	2000      	movs	r0, #0
 800cdbe:	bd10      	pop	{r4, pc}
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 800cdc0:	f850 4f0c 	ldr.w	r4, [r0, #12]!
 800cdc4:	f7ff ffa0 	bl	800cd08 <get_glyph_dsc_id.isra.0.part.1>
    if(!gid) return false;
 800cdc8:	2800      	cmp	r0, #0
 800cdca:	d0f7      	beq.n	800cdbc <lv_font_get_bitmap_fmt_txt+0x4>
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 800cdcc:	6863      	ldr	r3, [r4, #4]
 800cdce:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
    if(gdsc) return &fdsc->glyph_bitmap[gdsc->bitmap_index];
 800cdd2:	2a00      	cmp	r2, #0
 800cdd4:	d0f2      	beq.n	800cdbc <lv_font_get_bitmap_fmt_txt+0x4>
 800cdd6:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 800cdda:	6820      	ldr	r0, [r4, #0]
 800cddc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cde0:	4418      	add	r0, r3
}
 800cde2:	bd10      	pop	{r4, pc}

0800cde4 <lv_font_get_glyph_dsc_fmt_txt>:
{
 800cde4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cde8:	4680      	mov	r8, r0
 800cdea:	b085      	sub	sp, #20
 800cdec:	460c      	mov	r4, r1
 800cdee:	4699      	mov	r9, r3
    if(letter == '\0') return 0;
 800cdf0:	b91a      	cbnz	r2, 800cdfa <lv_font_get_glyph_dsc_fmt_txt+0x16>
    if(!gid) return false;
 800cdf2:	2000      	movs	r0, #0
}
 800cdf4:	b005      	add	sp, #20
 800cdf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 800cdfa:	4607      	mov	r7, r0
 800cdfc:	4611      	mov	r1, r2
 800cdfe:	f857 5f0c 	ldr.w	r5, [r7, #12]!
 800ce02:	4638      	mov	r0, r7
 800ce04:	f7ff ff80 	bl	800cd08 <get_glyph_dsc_id.isra.0.part.1>
    if(!gid) return false;
 800ce08:	4606      	mov	r6, r0
 800ce0a:	2800      	cmp	r0, #0
 800ce0c:	d0f1      	beq.n	800cdf2 <lv_font_get_glyph_dsc_fmt_txt+0xe>
    if(fdsc->kern_dsc) {
 800ce0e:	68eb      	ldr	r3, [r5, #12]
 800ce10:	b9db      	cbnz	r3, 800ce4a <lv_font_get_glyph_dsc_fmt_txt+0x66>
    int8_t kvalue = 0;
 800ce12:	2000      	movs	r0, #0
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 800ce14:	686b      	ldr	r3, [r5, #4]
 800ce16:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    uint32_t adv_w = gdsc->adv_w + ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 800ce1a:	8a2b      	ldrh	r3, [r5, #16]
 800ce1c:	4358      	muls	r0, r3
 800ce1e:	8873      	ldrh	r3, [r6, #2]
 800ce20:	f3c3 130b 	ubfx	r3, r3, #4, #12
 800ce24:	eb03 1020 	add.w	r0, r3, r0, asr #4
    adv_w  = (adv_w + (1 << 3)) >> 4;
 800ce28:	3008      	adds	r0, #8
 800ce2a:	0900      	lsrs	r0, r0, #4
    dsc_out->adv_w = adv_w;
 800ce2c:	8020      	strh	r0, [r4, #0]
    dsc_out->box_h = gdsc->box_h;
 800ce2e:	7973      	ldrb	r3, [r6, #5]
 800ce30:	70e3      	strb	r3, [r4, #3]
    dsc_out->box_w = gdsc->box_w;
 800ce32:	7933      	ldrb	r3, [r6, #4]
 800ce34:	70a3      	strb	r3, [r4, #2]
    dsc_out->ofs_x = gdsc->ofs_x;
 800ce36:	79b3      	ldrb	r3, [r6, #6]
 800ce38:	7123      	strb	r3, [r4, #4]
    dsc_out->ofs_y = gdsc->ofs_y;
 800ce3a:	79f3      	ldrb	r3, [r6, #7]
 800ce3c:	7163      	strb	r3, [r4, #5]
    dsc_out->bpp   = fdsc->bpp;
 800ce3e:	7ceb      	ldrb	r3, [r5, #19]
 800ce40:	f3c3 0382 	ubfx	r3, r3, #2, #3
 800ce44:	71a3      	strb	r3, [r4, #6]
    return true;
 800ce46:	2001      	movs	r0, #1
 800ce48:	e7d4      	b.n	800cdf4 <lv_font_get_glyph_dsc_fmt_txt+0x10>
    if(letter == '\0') return 0;
 800ce4a:	f1b9 0f00 	cmp.w	r9, #0
 800ce4e:	d0e0      	beq.n	800ce12 <lv_font_get_glyph_dsc_fmt_txt+0x2e>
 800ce50:	4649      	mov	r1, r9
 800ce52:	4638      	mov	r0, r7
 800ce54:	f7ff ff58 	bl	800cd08 <get_glyph_dsc_id.isra.0.part.1>
        if(gid_next) {
 800ce58:	2800      	cmp	r0, #0
 800ce5a:	d0da      	beq.n	800ce12 <lv_font_get_glyph_dsc_fmt_txt+0x2e>
 800ce5c:	f8d8 300c 	ldr.w	r3, [r8, #12]
    if(fdsc->kern_classes == 0) {
 800ce60:	7cda      	ldrb	r2, [r3, #19]
 800ce62:	68df      	ldr	r7, [r3, #12]
 800ce64:	f012 0f20 	tst.w	r2, #32
 800ce68:	d133      	bne.n	800ced2 <lv_font_get_glyph_dsc_fmt_txt+0xee>
        if(kdsc->glyph_ids_size == 0) {
 800ce6a:	7afb      	ldrb	r3, [r7, #11]
 800ce6c:	f013 0303 	ands.w	r3, r3, #3
 800ce70:	d117      	bne.n	800cea2 <lv_font_get_glyph_dsc_fmt_txt+0xbe>
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 800ce72:	eb06 2300 	add.w	r3, r6, r0, lsl #8
 800ce76:	a804      	add	r0, sp, #16
            const uint8_t * g_ids = kdsc->glyph_ids;
 800ce78:	f8d7 8000 	ldr.w	r8, [r7]
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 800ce7c:	68ba      	ldr	r2, [r7, #8]
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 800ce7e:	f820 3d04 	strh.w	r3, [r0, #-4]!
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 800ce82:	4b1c      	ldr	r3, [pc, #112]	; (800cef4 <lv_font_get_glyph_dsc_fmt_txt+0x110>)
 800ce84:	9300      	str	r3, [sp, #0]
 800ce86:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800ce8a:	2302      	movs	r3, #2
 800ce8c:	4641      	mov	r1, r8
 800ce8e:	f001 f98e 	bl	800e1ae <lv_utils_bsearch>
            if(kid_p) {
 800ce92:	2800      	cmp	r0, #0
 800ce94:	d0be      	beq.n	800ce14 <lv_font_get_glyph_dsc_fmt_txt+0x30>
                uint32_t ofs = (lv_uintptr_t)kid_p - (lv_uintptr_t)g_ids;
 800ce96:	eba0 0008 	sub.w	r0, r0, r8
                ofs = ofs >> 1;     /*ofs is for pair, divide by 2 to refer as a single value*/
 800ce9a:	0840      	lsrs	r0, r0, #1
                value = kdsc->values[ofs];
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	5618      	ldrsb	r0, [r3, r0]
 800cea0:	e7b8      	b.n	800ce14 <lv_font_get_glyph_dsc_fmt_txt+0x30>
        } else if(kdsc->glyph_ids_size == 1) {
 800cea2:	2b01      	cmp	r3, #1
 800cea4:	d1b5      	bne.n	800ce12 <lv_font_get_glyph_dsc_fmt_txt+0x2e>
            uint32_t g_id_both = (uint32_t)((uint32_t)gid_right << 8) + gid_left; /*Create one number from the ids*/
 800cea6:	eb06 2300 	add.w	r3, r6, r0, lsl #8
 800ceaa:	a804      	add	r0, sp, #16
            const uint16_t * g_ids = kdsc->glyph_ids;
 800ceac:	f8d7 8000 	ldr.w	r8, [r7]
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 800ceb0:	68ba      	ldr	r2, [r7, #8]
            uint32_t g_id_both = (uint32_t)((uint32_t)gid_right << 8) + gid_left; /*Create one number from the ids*/
 800ceb2:	f840 3d04 	str.w	r3, [r0, #-4]!
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 800ceb6:	4b10      	ldr	r3, [pc, #64]	; (800cef8 <lv_font_get_glyph_dsc_fmt_txt+0x114>)
 800ceb8:	9300      	str	r3, [sp, #0]
 800ceba:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800cebe:	2304      	movs	r3, #4
 800cec0:	4641      	mov	r1, r8
 800cec2:	f001 f974 	bl	800e1ae <lv_utils_bsearch>
            if(kid_p) {
 800cec6:	2800      	cmp	r0, #0
 800cec8:	d0a4      	beq.n	800ce14 <lv_font_get_glyph_dsc_fmt_txt+0x30>
                uint32_t ofs = (lv_uintptr_t)kid_p - (lv_uintptr_t)g_ids;
 800ceca:	eba0 0008 	sub.w	r0, r0, r8
                ofs = ofs >> 4;     /*ofs is 4 byte pairs, divide by 4 to refer as a single value*/
 800cece:	0900      	lsrs	r0, r0, #4
 800ced0:	e7e4      	b.n	800ce9c <lv_font_get_glyph_dsc_fmt_txt+0xb8>
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
 800ced2:	687a      	ldr	r2, [r7, #4]
 800ced4:	5d93      	ldrb	r3, [r2, r6]
        if(left_class > 0 && right_class > 0) {
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d09b      	beq.n	800ce12 <lv_font_get_glyph_dsc_fmt_txt+0x2e>
        uint8_t right_class = kdsc->left_class_mapping[gid_right];
 800ceda:	5c11      	ldrb	r1, [r2, r0]
        if(left_class > 0 && right_class > 0) {
 800cedc:	2900      	cmp	r1, #0
 800cede:	d098      	beq.n	800ce12 <lv_font_get_glyph_dsc_fmt_txt+0x2e>
            value = kdsc->class_pair_values[(left_class-1)* kdsc->right_class_cnt + (right_class-1)];
 800cee0:	683a      	ldr	r2, [r7, #0]
 800cee2:	7b78      	ldrb	r0, [r7, #13]
 800cee4:	3b01      	subs	r3, #1
 800cee6:	440a      	add	r2, r1
 800cee8:	fb00 2303 	mla	r3, r0, r3, r2
 800ceec:	f913 0c01 	ldrsb.w	r0, [r3, #-1]
 800cef0:	e790      	b.n	800ce14 <lv_font_get_glyph_dsc_fmt_txt+0x30>
 800cef2:	bf00      	nop
 800cef4:	0800ccdd 	.word	0x0800ccdd
 800cef8:	0800ccef 	.word	0x0800ccef

0800cefc <lv_disp_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_disp_drv_init(lv_disp_drv_t * driver)
{
 800cefc:	b510      	push	{r4, lr}
    memset(driver, 0, sizeof(lv_disp_drv_t));
 800cefe:	2228      	movs	r2, #40	; 0x28
{
 800cf00:	4604      	mov	r4, r0
    memset(driver, 0, sizeof(lv_disp_drv_t));
 800cf02:	2100      	movs	r1, #0
 800cf04:	f002 fa1f 	bl	800f346 <memset>

    driver->flush_cb         = NULL;
    driver->hor_res          = LV_HOR_RES_MAX;
 800cf08:	23a0      	movs	r3, #160	; 0xa0
 800cf0a:	8023      	strh	r3, [r4, #0]
    driver->ver_res          = LV_VER_RES_MAX;
 800cf0c:	2380      	movs	r3, #128	; 0x80
    driver->flush_cb         = NULL;
 800cf0e:	2200      	movs	r2, #0
    driver->ver_res          = LV_VER_RES_MAX;
 800cf10:	8063      	strh	r3, [r4, #2]
    driver->buffer           = NULL;
    driver->rotated          = 0;
    driver->color_chroma_key = LV_COLOR_TRANSP;
 800cf12:	f04f 0300 	mov.w	r3, #0
 800cf16:	f362 0304 	bfi	r3, r2, #0, #5
 800cf1a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 800cf1e:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
#if LV_COLOR_SCREEN_TRANSP
    driver->screen_transp = 1;
#endif

#if LV_USE_GPU
    driver->gpu_blend_cb = NULL;
 800cf20:	61e2      	str	r2, [r4, #28]
    driver->color_chroma_key = LV_COLOR_TRANSP;
 800cf22:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800cf26:	84a3      	strh	r3, [r4, #36]	; 0x24
 800cf28:	0a1b      	lsrs	r3, r3, #8
 800cf2a:	f362 03c7 	bfi	r3, r2, #3, #5
 800cf2e:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
    driver->antialiasing = true;
 800cf32:	2301      	movs	r3, #1
 800cf34:	7223      	strb	r3, [r4, #8]
    driver->gpu_fill_cb  = NULL;
 800cf36:	6222      	str	r2, [r4, #32]

#if LV_USE_USER_DATA
    driver->user_data = NULL;
#endif

    driver->set_px_cb = NULL;
 800cf38:	6162      	str	r2, [r4, #20]
 800cf3a:	bd10      	pop	{r4, pc}

0800cf3c <lv_disp_buf_init>:
 *             It lets LittlevGL to render next frame into the other buffer while previous is being
 * sent. Set to `NULL` if unused.
 * @param size_in_px_cnt size of the `buf1` and `buf2` in pixel count.
 */
void lv_disp_buf_init(lv_disp_buf_t * disp_buf, void * buf1, void * buf2, uint32_t size_in_px_cnt)
{
 800cf3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf3e:	4604      	mov	r4, r0
 800cf40:	460d      	mov	r5, r1
 800cf42:	4617      	mov	r7, r2
 800cf44:	461e      	mov	r6, r3
    memset(disp_buf, 0, sizeof(lv_disp_buf_t));
 800cf46:	221c      	movs	r2, #28
 800cf48:	2100      	movs	r1, #0
 800cf4a:	f002 f9fc 	bl	800f346 <memset>

    disp_buf->buf1    = buf1;
    disp_buf->buf2    = buf2;
 800cf4e:	e884 00a0 	stmia.w	r4, {r5, r7}
    disp_buf->buf_act = disp_buf->buf1;
 800cf52:	60a5      	str	r5, [r4, #8]
    disp_buf->size    = size_in_px_cnt;
 800cf54:	60e6      	str	r6, [r4, #12]
 800cf56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cf58 <lv_disp_drv_register>:
 * Automatically set the first display as active.
 * @param driver pointer to an initialized 'lv_disp_drv_t' variable (can be local variable)
 * @return pointer to the new display or NULL on error
 */
lv_disp_t * lv_disp_drv_register(lv_disp_drv_t * driver)
{
 800cf58:	b570      	push	{r4, r5, r6, lr}
 800cf5a:	4605      	mov	r5, r0
    lv_disp_t * disp = lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
 800cf5c:	482a      	ldr	r0, [pc, #168]	; (800d008 <lv_disp_drv_register+0xb0>)
 800cf5e:	f000 fb9c 	bl	800d69a <lv_ll_ins_head>
    if(!disp) {
 800cf62:	4604      	mov	r4, r0
 800cf64:	b900      	cbnz	r0, 800cf68 <lv_disp_drv_register+0x10>
 800cf66:	e7fe      	b.n	800cf66 <lv_disp_drv_register+0xe>
        lv_mem_assert(disp);
        return NULL;
    }

    memcpy(&disp->driver, driver, sizeof(lv_disp_drv_t));
 800cf68:	4628      	mov	r0, r5
 800cf6a:	4623      	mov	r3, r4
 800cf6c:	f105 0228 	add.w	r2, r5, #40	; 0x28
 800cf70:	f850 1b04 	ldr.w	r1, [r0], #4
 800cf74:	f843 1b04 	str.w	r1, [r3], #4
 800cf78:	4290      	cmp	r0, r2
 800cf7a:	d1f9      	bne.n	800cf70 <lv_disp_drv_register+0x18>
    memset(&disp->inv_area_joined, 0, sizeof(disp->inv_area_joined));
 800cf7c:	2220      	movs	r2, #32
 800cf7e:	2100      	movs	r1, #0
 800cf80:	f504 70a2 	add.w	r0, r4, #324	; 0x144
 800cf84:	f002 f9df 	bl	800f346 <memset>
    memset(&disp->inv_areas, 0, sizeof(disp->inv_areas));
    lv_ll_init(&disp->scr_ll, sizeof(lv_obj_t));

    if(disp_def == NULL) disp_def = disp;
 800cf88:	4d20      	ldr	r5, [pc, #128]	; (800d00c <lv_disp_drv_register+0xb4>)
    memset(&disp->inv_areas, 0, sizeof(disp->inv_areas));
 800cf8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cf8e:	2100      	movs	r1, #0
 800cf90:	f104 0044 	add.w	r0, r4, #68	; 0x44
 800cf94:	f002 f9d7 	bl	800f346 <memset>
    lv_ll_init(&disp->scr_ll, sizeof(lv_obj_t));
 800cf98:	2144      	movs	r1, #68	; 0x44
 800cf9a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800cf9e:	f000 fb72 	bl	800d686 <lv_ll_init>
    if(disp_def == NULL) disp_def = disp;
 800cfa2:	682b      	ldr	r3, [r5, #0]
 800cfa4:	b903      	cbnz	r3, 800cfa8 <lv_disp_drv_register+0x50>
 800cfa6:	602c      	str	r4, [r5, #0]

    lv_disp_t * disp_def_tmp = disp_def;
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
                                        new display*/

    disp->inv_p = 0;
 800cfa8:	f8b4 3164 	ldrh.w	r3, [r4, #356]	; 0x164
    lv_disp_t * disp_def_tmp = disp_def;
 800cfac:	682e      	ldr	r6, [r5, #0]
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
 800cfae:	602c      	str	r4, [r5, #0]
    disp->inv_p = 0;
 800cfb0:	f36f 0309 	bfc	r3, #0, #10

    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
 800cfb4:	2100      	movs	r1, #0
    disp->inv_p = 0;
 800cfb6:	f8a4 3164 	strh.w	r3, [r4, #356]	; 0x164
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
 800cfba:	4608      	mov	r0, r1
 800cfbc:	f7fb fc22 	bl	8008804 <lv_obj_create>
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 800cfc0:	2100      	movs	r1, #0
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
 800cfc2:	63a0      	str	r0, [r4, #56]	; 0x38
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 800cfc4:	4608      	mov	r0, r1
 800cfc6:	f7fb fc1d 	bl	8008804 <lv_obj_create>
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 800cfca:	2100      	movs	r1, #0
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 800cfcc:	63e0      	str	r0, [r4, #60]	; 0x3c
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 800cfce:	4608      	mov	r0, r1
 800cfd0:	f7fb fc18 	bl	8008804 <lv_obj_create>
    lv_obj_set_style(disp->top_layer, &lv_style_transp);
 800cfd4:	490e      	ldr	r1, [pc, #56]	; (800d010 <lv_disp_drv_register+0xb8>)
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 800cfd6:	6420      	str	r0, [r4, #64]	; 0x40
    lv_obj_set_style(disp->top_layer, &lv_style_transp);
 800cfd8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800cfda:	f7fb fdeb 	bl	8008bb4 <lv_obj_set_style>
    lv_obj_set_style(disp->sys_layer, &lv_style_transp);
 800cfde:	490c      	ldr	r1, [pc, #48]	; (800d010 <lv_disp_drv_register+0xb8>)
 800cfe0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800cfe2:	f7fb fde7 	bl	8008bb4 <lv_obj_set_style>

    lv_obj_invalidate(disp->act_scr);
 800cfe6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800cfe8:	f7fb f928 	bl	800823c <lv_obj_invalidate>

    disp_def = disp_def_tmp; /*Revert the default display*/

    /*Create a refresh task*/
    disp->refr_task = lv_task_create(lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, disp);
 800cfec:	4623      	mov	r3, r4
 800cfee:	2203      	movs	r2, #3
 800cff0:	211e      	movs	r1, #30
 800cff2:	4808      	ldr	r0, [pc, #32]	; (800d014 <lv_disp_drv_register+0xbc>)
    disp_def = disp_def_tmp; /*Revert the default display*/
 800cff4:	602e      	str	r6, [r5, #0]
    disp->refr_task = lv_task_create(lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, disp);
 800cff6:	f000 fe8d 	bl	800dd14 <lv_task_create>
 800cffa:	62a0      	str	r0, [r4, #40]	; 0x28
    lv_mem_assert(disp->refr_task);
 800cffc:	b900      	cbnz	r0, 800d000 <lv_disp_drv_register+0xa8>
 800cffe:	e7fe      	b.n	800cffe <lv_disp_drv_register+0xa6>
    if(disp->refr_task == NULL) return NULL;

    lv_task_ready(disp->refr_task); /*Be sure the screen will be refreshed immediately on start up*/
 800d000:	f000 fe9d 	bl	800dd3e <lv_task_ready>

    return disp;
}
 800d004:	4620      	mov	r0, r4
 800d006:	bd70      	pop	{r4, r5, r6, pc}
 800d008:	2000d8f8 	.word	0x2000d8f8
 800d00c:	20004344 	.word	0x20004344
 800d010:	2000d60c 	.word	0x2000d60c
 800d014:	08009089 	.word	0x08009089

0800d018 <lv_disp_get_default>:
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
    return disp_def;
}
 800d018:	4b01      	ldr	r3, [pc, #4]	; (800d020 <lv_disp_get_default+0x8>)
 800d01a:	6818      	ldr	r0, [r3, #0]
 800d01c:	4770      	bx	lr
 800d01e:	bf00      	nop
 800d020:	20004344 	.word	0x20004344

0800d024 <lv_disp_get_hor_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
 800d024:	b910      	cbnz	r0, 800d02c <lv_disp_get_hor_res+0x8>
    return disp_def;
 800d026:	4b06      	ldr	r3, [pc, #24]	; (800d040 <lv_disp_get_hor_res+0x1c>)
 800d028:	6818      	ldr	r0, [r3, #0]

    if(disp == NULL)
 800d02a:	b138      	cbz	r0, 800d03c <lv_disp_get_hor_res+0x18>
        return LV_HOR_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.hor_res : disp->driver.ver_res;
 800d02c:	7a03      	ldrb	r3, [r0, #8]
 800d02e:	079b      	lsls	r3, r3, #30
 800d030:	bf54      	ite	pl
 800d032:	f9b0 0000 	ldrshpl.w	r0, [r0]
 800d036:	f9b0 0002 	ldrshmi.w	r0, [r0, #2]
 800d03a:	4770      	bx	lr
        return LV_HOR_RES_MAX;
 800d03c:	20a0      	movs	r0, #160	; 0xa0
}
 800d03e:	4770      	bx	lr
 800d040:	20004344 	.word	0x20004344

0800d044 <lv_disp_get_ver_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
 800d044:	b910      	cbnz	r0, 800d04c <lv_disp_get_ver_res+0x8>
    return disp_def;
 800d046:	4b06      	ldr	r3, [pc, #24]	; (800d060 <lv_disp_get_ver_res+0x1c>)
 800d048:	6818      	ldr	r0, [r3, #0]

    if(disp == NULL)
 800d04a:	b138      	cbz	r0, 800d05c <lv_disp_get_ver_res+0x18>
        return LV_VER_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.ver_res : disp->driver.hor_res;
 800d04c:	7a03      	ldrb	r3, [r0, #8]
 800d04e:	079b      	lsls	r3, r3, #30
 800d050:	bf54      	ite	pl
 800d052:	f9b0 0002 	ldrshpl.w	r0, [r0, #2]
 800d056:	f9b0 0000 	ldrshmi.w	r0, [r0]
 800d05a:	4770      	bx	lr
        return LV_VER_RES_MAX;
 800d05c:	2080      	movs	r0, #128	; 0x80
}
 800d05e:	4770      	bx	lr
 800d060:	20004344 	.word	0x20004344

0800d064 <lv_disp_get_antialiasing>:
bool lv_disp_get_antialiasing(lv_disp_t * disp)
{
#if LV_ANTIALIAS == 0
    return false;
#else
    if(disp == NULL) disp = lv_disp_get_default();
 800d064:	b910      	cbnz	r0, 800d06c <lv_disp_get_antialiasing+0x8>
    return disp_def;
 800d066:	4b03      	ldr	r3, [pc, #12]	; (800d074 <lv_disp_get_antialiasing+0x10>)
 800d068:	6818      	ldr	r0, [r3, #0]
    if(disp == NULL) return false;
 800d06a:	b110      	cbz	r0, 800d072 <lv_disp_get_antialiasing+0xe>

    return disp->driver.antialiasing ? true : false;
 800d06c:	7a00      	ldrb	r0, [r0, #8]
 800d06e:	f000 0001 	and.w	r0, r0, #1
#endif
}
 800d072:	4770      	bx	lr
 800d074:	20004344 	.word	0x20004344

0800d078 <lv_disp_flush_ready>:
 * Call in the display driver's `flush_cb` function when the flushing is finished
 * @param disp_drv pointer to display driver in `flush_cb` where this function is called
 */
LV_ATTRIBUTE_FLUSH_READY void lv_disp_flush_ready(lv_disp_drv_t * disp_drv)
{
    disp_drv->buffer->flushing = 0;
 800d078:	6842      	ldr	r2, [r0, #4]
 800d07a:	7e13      	ldrb	r3, [r2, #24]
 800d07c:	f36f 0300 	bfc	r3, #0, #1
 800d080:	7613      	strb	r3, [r2, #24]
 800d082:	4770      	bx	lr

0800d084 <lv_disp_get_buf>:
 * @return pointer to the internal buffers
 */
lv_disp_buf_t * lv_disp_get_buf(lv_disp_t * disp)
{
    return disp->driver.buffer;
}
 800d084:	6840      	ldr	r0, [r0, #4]
 800d086:	4770      	bx	lr

0800d088 <lv_disp_is_double_buf>:
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_double_buf(lv_disp_t * disp)
{
    if(disp->driver.buffer->buf1 && disp->driver.buffer->buf2)
 800d088:	6843      	ldr	r3, [r0, #4]
 800d08a:	6818      	ldr	r0, [r3, #0]
 800d08c:	b118      	cbz	r0, 800d096 <lv_disp_is_double_buf+0xe>
 800d08e:	6858      	ldr	r0, [r3, #4]
 800d090:	3000      	adds	r0, #0
 800d092:	bf18      	it	ne
 800d094:	2001      	movne	r0, #1
        return true;
    else
        return false;
}
 800d096:	4770      	bx	lr

0800d098 <lv_disp_is_true_double_buf>:
 * `size` is screen sized)
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_true_double_buf(lv_disp_t * disp)
{
 800d098:	b508      	push	{r3, lr}
 800d09a:	4602      	mov	r2, r0
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;

    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
 800d09c:	f7ff fff4 	bl	800d088 <lv_disp_is_double_buf>
 800d0a0:	b140      	cbz	r0, 800d0b4 <lv_disp_is_true_double_buf+0x1c>
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;
 800d0a2:	8853      	ldrh	r3, [r2, #2]
 800d0a4:	8810      	ldrh	r0, [r2, #0]
 800d0a6:	fb10 f003 	smulbb	r0, r0, r3
    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
 800d0aa:	6853      	ldr	r3, [r2, #4]
 800d0ac:	68db      	ldr	r3, [r3, #12]
 800d0ae:	1ac3      	subs	r3, r0, r3
 800d0b0:	4258      	negs	r0, r3
 800d0b2:	4158      	adcs	r0, r3
        return true;
    } else {
        return false;
    }
}
 800d0b4:	bd08      	pop	{r3, pc}
	...

0800d0b8 <lv_indev_get_next>:
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
    if(indev == NULL)
 800d0b8:	4601      	mov	r1, r0
        return lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 800d0ba:	4803      	ldr	r0, [pc, #12]	; (800d0c8 <lv_indev_get_next+0x10>)
    if(indev == NULL)
 800d0bc:	b909      	cbnz	r1, 800d0c2 <lv_indev_get_next+0xa>
        return lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 800d0be:	f000 bb28 	b.w	800d712 <lv_ll_get_head>
    else
        return lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
 800d0c2:	f000 bb2c 	b.w	800d71e <lv_ll_get_next>
 800d0c6:	bf00      	nop
 800d0c8:	2000d8e8 	.word	0x2000d8e8

0800d0cc <lv_tick_inc>:
 * You have to call this function periodically
 * @param tick_period the call period of this function in milliseconds
 */
LV_ATTRIBUTE_TICK_INC void lv_tick_inc(uint32_t tick_period)
{
    tick_irq_flag = 0;
 800d0cc:	4b03      	ldr	r3, [pc, #12]	; (800d0dc <lv_tick_inc+0x10>)
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	701a      	strb	r2, [r3, #0]
    sys_time += tick_period;
 800d0d2:	4a03      	ldr	r2, [pc, #12]	; (800d0e0 <lv_tick_inc+0x14>)
 800d0d4:	6813      	ldr	r3, [r2, #0]
 800d0d6:	4418      	add	r0, r3
 800d0d8:	6010      	str	r0, [r2, #0]
 800d0da:	4770      	bx	lr
 800d0dc:	2000434c 	.word	0x2000434c
 800d0e0:	20004348 	.word	0x20004348

0800d0e4 <lv_tick_get>:
uint32_t lv_tick_get(void)
{
#if LV_TICK_CUSTOM == 0
    uint32_t result;
    do {
        tick_irq_flag = 1;
 800d0e4:	4b04      	ldr	r3, [pc, #16]	; (800d0f8 <lv_tick_get+0x14>)
 800d0e6:	f04f 0101 	mov.w	r1, #1
 800d0ea:	7019      	strb	r1, [r3, #0]
        result        = sys_time;
    } while(!tick_irq_flag); /*'lv_tick_inc()' clears this flag which can be in an interrupt.
 800d0ec:	781a      	ldrb	r2, [r3, #0]
 800d0ee:	2a00      	cmp	r2, #0
 800d0f0:	d0fb      	beq.n	800d0ea <lv_tick_get+0x6>

    return result;
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
 800d0f2:	4b02      	ldr	r3, [pc, #8]	; (800d0fc <lv_tick_get+0x18>)
 800d0f4:	6818      	ldr	r0, [r3, #0]
 800d0f6:	4770      	bx	lr
 800d0f8:	2000434c 	.word	0x2000434c
 800d0fc:	20004348 	.word	0x20004348

0800d100 <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of systick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
 800d100:	b510      	push	{r4, lr}
 800d102:	4604      	mov	r4, r0
    uint32_t act_time = lv_tick_get();
 800d104:	f7ff ffee 	bl	800d0e4 <lv_tick_get>
        prev_tick = UINT32_MAX - prev_tick + 1;
        prev_tick += act_time;
    }

    return prev_tick;
}
 800d108:	1b00      	subs	r0, r0, r4
 800d10a:	bd10      	pop	{r4, pc}

0800d10c <lv_anim_path_linear>:
 */
lv_anim_value_t lv_anim_path_linear(const lv_anim_t * a)
{
    /*Calculate the current step*/
    uint32_t step;
    if(a->time == a->act_time) {
 800d10c:	f9b0 301a 	ldrsh.w	r3, [r0, #26]
 800d110:	8b02      	ldrh	r2, [r0, #24]
 800d112:	429a      	cmp	r2, r3
        step = LV_ANIM_RESOLUTION; /*Use the last value if the time fully elapsed*/
    } else {
        step = ((int32_t)a->act_time * LV_ANIM_RESOLUTION) / a->time;
 800d114:	bf1c      	itt	ne
 800d116:	029b      	lslne	r3, r3, #10
 800d118:	fb93 f3f2 	sdivne	r3, r3, r2
    }

    /* Get the new value which will be proportional to `step`
     * and the `start` and `end` values*/
    int32_t new_value;
    new_value = (int32_t)step * (a->end - a->start);
 800d11c:	6902      	ldr	r2, [r0, #16]
 800d11e:	6940      	ldr	r0, [r0, #20]
 800d120:	bf08      	it	eq
 800d122:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d126:	1a80      	subs	r0, r0, r2
 800d128:	4343      	muls	r3, r0
    new_value = new_value >> LV_ANIM_RES_SHIFT;
    new_value += a->start;
 800d12a:	eb02 23a3 	add.w	r3, r2, r3, asr #10

    return (lv_anim_value_t)new_value;
}
 800d12e:	b218      	sxth	r0, r3
 800d130:	4770      	bx	lr
	...

0800d134 <anim_task>:
/**
 * Periodically handle the animations.
 * @param param unused
 */
static void anim_task(lv_task_t * param)
{
 800d134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    (void)param;

    lv_anim_t * a;
    LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a)
 800d138:	4846      	ldr	r0, [pc, #280]	; (800d254 <anim_task+0x120>)
 800d13a:	4c46      	ldr	r4, [pc, #280]	; (800d254 <anim_task+0x120>)
{
 800d13c:	b08a      	sub	sp, #40	; 0x28
    LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a)
 800d13e:	f000 fae8 	bl	800d712 <lv_ll_get_head>
 800d142:	b988      	cbnz	r0, 800d168 <anim_task+0x34>
    {
        a->has_run = 0;
    }

    uint32_t elaps = lv_tick_elaps(last_task_run);
 800d144:	4d44      	ldr	r5, [pc, #272]	; (800d258 <anim_task+0x124>)
    while(a != NULL) {
        /*It can be set by `lv_anim_del()` typically in `end_cb`. If set then an animation delete
         * happened in `anim_ready_handler` which could make this linked list reading corrupt
         * because the list is changed meanwhile
         */
        anim_list_changed = false;
 800d146:	4e45      	ldr	r6, [pc, #276]	; (800d25c <anim_task+0x128>)
    uint32_t elaps = lv_tick_elaps(last_task_run);
 800d148:	6828      	ldr	r0, [r5, #0]
        /* If the linked list changed due to anim. delete then it's not safe to continue
         * the reading of the list from here -> start from the head*/
        if(anim_list_changed)
            a = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
        else
            a = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 800d14a:	4f42      	ldr	r7, [pc, #264]	; (800d254 <anim_task+0x120>)
    uint32_t elaps = lv_tick_elaps(last_task_run);
 800d14c:	f7ff ffd8 	bl	800d100 <lv_tick_elaps>
 800d150:	4680      	mov	r8, r0
    a = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 800d152:	4840      	ldr	r0, [pc, #256]	; (800d254 <anim_task+0x120>)
 800d154:	f000 fadd 	bl	800d712 <lv_ll_get_head>
 800d158:	4604      	mov	r4, r0
    while(a != NULL) {
 800d15a:	b984      	cbnz	r4, 800d17e <anim_task+0x4a>
    }

    last_task_run = lv_tick_get();
 800d15c:	f7ff ffc2 	bl	800d0e4 <lv_tick_get>
 800d160:	6028      	str	r0, [r5, #0]
}
 800d162:	b00a      	add	sp, #40	; 0x28
 800d164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        a->has_run = 0;
 800d168:	f890 3020 	ldrb.w	r3, [r0, #32]
 800d16c:	f36f 03c3 	bfc	r3, #3, #1
 800d170:	f880 3020 	strb.w	r3, [r0, #32]
    LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a)
 800d174:	4601      	mov	r1, r0
 800d176:	4620      	mov	r0, r4
 800d178:	f000 fad1 	bl	800d71e <lv_ll_get_next>
 800d17c:	e7e1      	b.n	800d142 <anim_task+0xe>
        anim_list_changed = false;
 800d17e:	2300      	movs	r3, #0
 800d180:	7033      	strb	r3, [r6, #0]
        if(!a->has_run) {
 800d182:	f894 3020 	ldrb.w	r3, [r4, #32]
 800d186:	0718      	lsls	r0, r3, #28
 800d188:	d45f      	bmi.n	800d24a <anim_task+0x116>
            a->has_run = 1; /*The list readying might be reseted so need to know which anim has run already*/
 800d18a:	f043 0308 	orr.w	r3, r3, #8
 800d18e:	f884 3020 	strb.w	r3, [r4, #32]
            a->act_time += elaps;
 800d192:	8b63      	ldrh	r3, [r4, #26]
 800d194:	4443      	add	r3, r8
 800d196:	b21b      	sxth	r3, r3
            if(a->act_time >= 0) {
 800d198:	2b00      	cmp	r3, #0
            a->act_time += elaps;
 800d19a:	8363      	strh	r3, [r4, #26]
            if(a->act_time >= 0) {
 800d19c:	db55      	blt.n	800d24a <anim_task+0x116>
                if(a->act_time > a->time) a->act_time = a->time;
 800d19e:	8b22      	ldrh	r2, [r4, #24]
 800d1a0:	4293      	cmp	r3, r2
 800d1a2:	bfc8      	it	gt
 800d1a4:	8362      	strhgt	r2, [r4, #26]
                new_value = a->path_cb(a);
 800d1a6:	68a3      	ldr	r3, [r4, #8]
 800d1a8:	4620      	mov	r0, r4
 800d1aa:	4798      	blx	r3
                if(a->exec_cb) a->exec_cb(a->var, new_value);
 800d1ac:	6863      	ldr	r3, [r4, #4]
                new_value = a->path_cb(a);
 800d1ae:	4601      	mov	r1, r0
                if(a->exec_cb) a->exec_cb(a->var, new_value);
 800d1b0:	b10b      	cbz	r3, 800d1b6 <anim_task+0x82>
 800d1b2:	6820      	ldr	r0, [r4, #0]
 800d1b4:	4798      	blx	r3
                if(a->act_time >= a->time) {
 800d1b6:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
 800d1ba:	8b23      	ldrh	r3, [r4, #24]
 800d1bc:	429a      	cmp	r2, r3
 800d1be:	db24      	blt.n	800d20a <anim_task+0xd6>
{

    /*Delete the animation if
     * - no repeat and no play back (simple one shot animation)
     * - no repeat, play back is enabled and play back is ready */
    if((a->repeat == 0 && a->playback == 0) || (a->repeat == 0 && a->playback == 1 && a->playback_now == 1)) {
 800d1c0:	f894 3020 	ldrb.w	r3, [r4, #32]
 800d1c4:	0799      	lsls	r1, r3, #30
 800d1c6:	d003      	beq.n	800d1d0 <anim_task+0x9c>
 800d1c8:	f003 0207 	and.w	r2, r3, #7
 800d1cc:	2a05      	cmp	r2, #5
 800d1ce:	d123      	bne.n	800d218 <anim_task+0xe4>

        /*Create copy from the animation and delete the animation from the list.
         * This way the `ready_cb` will see the animations like it's animation is ready deleted*/
        lv_anim_t a_tmp;
        memcpy(&a_tmp, a, sizeof(lv_anim_t));
 800d1d0:	4623      	mov	r3, r4
 800d1d2:	aa01      	add	r2, sp, #4
 800d1d4:	f104 0c20 	add.w	ip, r4, #32
 800d1d8:	6818      	ldr	r0, [r3, #0]
 800d1da:	6859      	ldr	r1, [r3, #4]
 800d1dc:	4696      	mov	lr, r2
 800d1de:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800d1e2:	3308      	adds	r3, #8
 800d1e4:	4563      	cmp	r3, ip
 800d1e6:	4672      	mov	r2, lr
 800d1e8:	d1f6      	bne.n	800d1d8 <anim_task+0xa4>
 800d1ea:	6818      	ldr	r0, [r3, #0]
 800d1ec:	f8ce 0000 	str.w	r0, [lr]
        lv_ll_rem(&LV_GC_ROOT(_lv_anim_ll), a);
 800d1f0:	4621      	mov	r1, r4
 800d1f2:	4638      	mov	r0, r7
 800d1f4:	f000 facc 	bl	800d790 <lv_ll_rem>
        lv_mem_free(a);
 800d1f8:	4620      	mov	r0, r4
 800d1fa:	f000 fbfb 	bl	800d9f4 <lv_mem_free>
        anim_list_changed = true;
 800d1fe:	2301      	movs	r3, #1
 800d200:	7033      	strb	r3, [r6, #0]

        /* Call the callback function at the end*/
        if(a_tmp.ready_cb != NULL) a_tmp.ready_cb(&a_tmp);
 800d202:	9b04      	ldr	r3, [sp, #16]
 800d204:	b10b      	cbz	r3, 800d20a <anim_task+0xd6>
 800d206:	a801      	add	r0, sp, #4
 800d208:	4798      	blx	r3
        if(anim_list_changed)
 800d20a:	7833      	ldrb	r3, [r6, #0]
 800d20c:	b1eb      	cbz	r3, 800d24a <anim_task+0x116>
            a = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 800d20e:	4638      	mov	r0, r7
 800d210:	f000 fa7f 	bl	800d712 <lv_ll_get_head>
            a = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 800d214:	4604      	mov	r4, r0
 800d216:	e7a0      	b.n	800d15a <anim_task+0x26>
    }
    /*If the animation is not deleted then restart it*/
    else {
        a->act_time = -a->repeat_pause; /*Restart the animation*/
 800d218:	8be2      	ldrh	r2, [r4, #30]
 800d21a:	4252      	negs	r2, r2
 800d21c:	8362      	strh	r2, [r4, #26]
        /*Swap the start and end values in play back mode*/
        if(a->playback != 0) {
 800d21e:	07da      	lsls	r2, r3, #31
 800d220:	d5f3      	bpl.n	800d20a <anim_task+0xd6>
            /*If now turning back use the 'playback_pause*/
            if(a->playback_now == 0) a->act_time = -a->playback_pause;
 800d222:	f013 0304 	ands.w	r3, r3, #4
 800d226:	bf02      	ittt	eq
 800d228:	8ba2      	ldrheq	r2, [r4, #28]
 800d22a:	4252      	negeq	r2, r2
 800d22c:	8362      	strheq	r2, [r4, #26]

            /*Toggle the play back state*/
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 800d22e:	fab3 f383 	clz	r3, r3
 800d232:	f894 2020 	ldrb.w	r2, [r4, #32]
 800d236:	095b      	lsrs	r3, r3, #5
 800d238:	f363 0282 	bfi	r2, r3, #2, #1
 800d23c:	f884 2020 	strb.w	r2, [r4, #32]
            /*Swap the start and end values*/
            int32_t tmp;
            tmp      = a->start;
 800d240:	6923      	ldr	r3, [r4, #16]
            a->start = a->end;
 800d242:	6962      	ldr	r2, [r4, #20]
 800d244:	6122      	str	r2, [r4, #16]
            a->end   = tmp;
 800d246:	6163      	str	r3, [r4, #20]
 800d248:	e7df      	b.n	800d20a <anim_task+0xd6>
            a = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 800d24a:	4621      	mov	r1, r4
 800d24c:	4638      	mov	r0, r7
 800d24e:	f000 fa66 	bl	800d71e <lv_ll_get_next>
 800d252:	e7df      	b.n	800d214 <anim_task+0xe0>
 800d254:	2000d924 	.word	0x2000d924
 800d258:	20004350 	.word	0x20004350
 800d25c:	2000434d 	.word	0x2000434d

0800d260 <lv_anim_core_init>:
{
 800d260:	b510      	push	{r4, lr}
    lv_ll_init(&LV_GC_ROOT(_lv_anim_ll), sizeof(lv_anim_t));
 800d262:	2124      	movs	r1, #36	; 0x24
 800d264:	4807      	ldr	r0, [pc, #28]	; (800d284 <lv_anim_core_init+0x24>)
 800d266:	f000 fa0e 	bl	800d686 <lv_ll_init>
    last_task_run = lv_tick_get();
 800d26a:	f7ff ff3b 	bl	800d0e4 <lv_tick_get>
 800d26e:	4b06      	ldr	r3, [pc, #24]	; (800d288 <lv_anim_core_init+0x28>)
    lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, NULL);
 800d270:	2203      	movs	r2, #3
    last_task_run = lv_tick_get();
 800d272:	6018      	str	r0, [r3, #0]
    lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, NULL);
 800d274:	211e      	movs	r1, #30
 800d276:	2300      	movs	r3, #0
 800d278:	4804      	ldr	r0, [pc, #16]	; (800d28c <lv_anim_core_init+0x2c>)
}
 800d27a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, NULL);
 800d27e:	f000 bd49 	b.w	800dd14 <lv_task_create>
 800d282:	bf00      	nop
 800d284:	2000d924 	.word	0x2000d924
 800d288:	20004350 	.word	0x20004350
 800d28c:	0800d135 	.word	0x0800d135

0800d290 <lv_anim_del>:
{
 800d290:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d294:	4680      	mov	r8, r0
    a        = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 800d296:	4813      	ldr	r0, [pc, #76]	; (800d2e4 <lv_anim_del+0x54>)
        a_next = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 800d298:	4f12      	ldr	r7, [pc, #72]	; (800d2e4 <lv_anim_del+0x54>)
            anim_list_changed = true; /*Read by `anim_task`. It need to know if a delete occurred in
 800d29a:	f8df 904c 	ldr.w	r9, [pc, #76]	; 800d2e8 <lv_anim_del+0x58>
{
 800d29e:	460e      	mov	r6, r1
    a        = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 800d2a0:	f000 fa37 	bl	800d712 <lv_ll_get_head>
    bool del = false;
 800d2a4:	2500      	movs	r5, #0
    a        = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 800d2a6:	4604      	mov	r4, r0
            anim_list_changed = true; /*Read by `anim_task`. It need to know if a delete occurred in
 800d2a8:	f04f 0a01 	mov.w	sl, #1
    while(a != NULL) {
 800d2ac:	b914      	cbnz	r4, 800d2b4 <lv_anim_del+0x24>
}
 800d2ae:	4628      	mov	r0, r5
 800d2b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        a_next = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 800d2b4:	4621      	mov	r1, r4
 800d2b6:	4638      	mov	r0, r7
 800d2b8:	f000 fa31 	bl	800d71e <lv_ll_get_next>
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 800d2bc:	6823      	ldr	r3, [r4, #0]
 800d2be:	4543      	cmp	r3, r8
        a_next = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 800d2c0:	4683      	mov	fp, r0
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 800d2c2:	d10d      	bne.n	800d2e0 <lv_anim_del+0x50>
 800d2c4:	6863      	ldr	r3, [r4, #4]
 800d2c6:	42b3      	cmp	r3, r6
 800d2c8:	d000      	beq.n	800d2cc <lv_anim_del+0x3c>
 800d2ca:	b94e      	cbnz	r6, 800d2e0 <lv_anim_del+0x50>
            lv_ll_rem(&LV_GC_ROOT(_lv_anim_ll), a);
 800d2cc:	4621      	mov	r1, r4
 800d2ce:	4638      	mov	r0, r7
 800d2d0:	f000 fa5e 	bl	800d790 <lv_ll_rem>
            lv_mem_free(a);
 800d2d4:	4620      	mov	r0, r4
 800d2d6:	f000 fb8d 	bl	800d9f4 <lv_mem_free>
            del = true;
 800d2da:	2501      	movs	r5, #1
            anim_list_changed = true; /*Read by `anim_task`. It need to know if a delete occurred in
 800d2dc:	f889 a000 	strb.w	sl, [r9]
            del = true;
 800d2e0:	465c      	mov	r4, fp
 800d2e2:	e7e3      	b.n	800d2ac <lv_anim_del+0x1c>
 800d2e4:	2000d924 	.word	0x2000d924
 800d2e8:	2000434d 	.word	0x2000434d

0800d2ec <lv_anim_create>:
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*fp == NULL would delete all animations of var*/
 800d2ec:	6841      	ldr	r1, [r0, #4]
{
 800d2ee:	b510      	push	{r4, lr}
 800d2f0:	4604      	mov	r4, r0
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*fp == NULL would delete all animations of var*/
 800d2f2:	b111      	cbz	r1, 800d2fa <lv_anim_create+0xe>
 800d2f4:	6800      	ldr	r0, [r0, #0]
 800d2f6:	f7ff ffcb 	bl	800d290 <lv_anim_del>
    lv_anim_t * new_anim = lv_ll_ins_head(&LV_GC_ROOT(_lv_anim_ll));
 800d2fa:	480f      	ldr	r0, [pc, #60]	; (800d338 <lv_anim_create+0x4c>)
 800d2fc:	f000 f9cd 	bl	800d69a <lv_ll_ins_head>
    lv_mem_assert(new_anim);
 800d300:	b900      	cbnz	r0, 800d304 <lv_anim_create+0x18>
 800d302:	e7fe      	b.n	800d302 <lv_anim_create+0x16>
    a->playback_now = 0;
 800d304:	f894 3020 	ldrb.w	r3, [r4, #32]
 800d308:	f36f 0382 	bfc	r3, #2, #1
 800d30c:	f884 3020 	strb.w	r3, [r4, #32]
    memcpy(new_anim, a, sizeof(lv_anim_t));
 800d310:	f104 0224 	add.w	r2, r4, #36	; 0x24
 800d314:	4603      	mov	r3, r0
 800d316:	f854 1b04 	ldr.w	r1, [r4], #4
 800d31a:	f843 1b04 	str.w	r1, [r3], #4
 800d31e:	4294      	cmp	r4, r2
 800d320:	d1f9      	bne.n	800d316 <lv_anim_create+0x2a>
    if(new_anim->exec_cb) new_anim->exec_cb(new_anim->var, new_anim->start);
 800d322:	6843      	ldr	r3, [r0, #4]
 800d324:	b11b      	cbz	r3, 800d32e <lv_anim_create+0x42>
 800d326:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
 800d32a:	6800      	ldr	r0, [r0, #0]
 800d32c:	4798      	blx	r3
    anim_list_changed = true;
 800d32e:	4b03      	ldr	r3, [pc, #12]	; (800d33c <lv_anim_create+0x50>)
 800d330:	2201      	movs	r2, #1
 800d332:	701a      	strb	r2, [r3, #0]
 800d334:	bd10      	pop	{r4, pc}
 800d336:	bf00      	nop
 800d338:	2000d924 	.word	0x2000d924
 800d33c:	2000434d 	.word	0x2000434d

0800d340 <lv_anim_speed_to_time>:
    int32_t d     = LV_MATH_ABS((int32_t)start - end);
 800d340:	1a89      	subs	r1, r1, r2
 800d342:	2900      	cmp	r1, #0
 800d344:	bfb8      	it	lt
 800d346:	4249      	neglt	r1, r1
    uint32_t time = (int32_t)((int32_t)(d * 1000) / speed);
 800d348:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d34c:	434a      	muls	r2, r1
 800d34e:	fb92 f0f0 	sdiv	r0, r2, r0
    if(time > UINT16_MAX) time = UINT16_MAX;
 800d352:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800d356:	da04      	bge.n	800d362 <lv_anim_speed_to_time+0x22>
        time++;
 800d358:	2800      	cmp	r0, #0
 800d35a:	bf08      	it	eq
 800d35c:	2001      	moveq	r0, #1
}
 800d35e:	b280      	uxth	r0, r0
 800d360:	4770      	bx	lr
    if(time > UINT16_MAX) time = UINT16_MAX;
 800d362:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800d366:	e7fa      	b.n	800d35e <lv_anim_speed_to_time+0x1e>

0800d368 <lv_area_set>:
 */
void lv_area_set(lv_area_t * area_p, lv_coord_t x1, lv_coord_t y1, lv_coord_t x2, lv_coord_t y2)
{
    area_p->x1 = x1;
    area_p->y1 = y1;
    area_p->x2 = x2;
 800d368:	8083      	strh	r3, [r0, #4]
    area_p->y2 = y2;
 800d36a:	f9bd 3000 	ldrsh.w	r3, [sp]
    area_p->x1 = x1;
 800d36e:	8001      	strh	r1, [r0, #0]
    area_p->y1 = y1;
 800d370:	8042      	strh	r2, [r0, #2]
    area_p->y2 = y2;
 800d372:	80c3      	strh	r3, [r0, #6]
 800d374:	4770      	bx	lr

0800d376 <lv_area_get_size>:
 */
uint32_t lv_area_get_size(const lv_area_t * area_p)
{
    uint32_t size;

    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
 800d376:	f9b0 3000 	ldrsh.w	r3, [r0]
 800d37a:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800d37e:	1ad2      	subs	r2, r2, r3
 800d380:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800d384:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 800d388:	1a18      	subs	r0, r3, r0
 800d38a:	3001      	adds	r0, #1

    return size;
}
 800d38c:	fb02 0000 	mla	r0, r2, r0, r0
 800d390:	4770      	bx	lr

0800d392 <lv_area_intersect>:
 * @return false: the two area has NO common parts, res_p is invalid
 */
bool lv_area_intersect(lv_area_t * res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
    /* Get the smaller area from 'a1_p' and 'a2_p' */
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 800d392:	f9b1 3000 	ldrsh.w	r3, [r1]
{
 800d396:	b570      	push	{r4, r5, r6, lr}
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 800d398:	f9b2 5000 	ldrsh.w	r5, [r2]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 800d39c:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 800d3a0:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 800d3a4:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 800d3a8:	429d      	cmp	r5, r3
 800d3aa:	bfb8      	it	lt
 800d3ac:	461d      	movlt	r5, r3
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 800d3ae:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 800d3b2:	8005      	strh	r5, [r0, #0]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 800d3b4:	42a3      	cmp	r3, r4
 800d3b6:	bfb8      	it	lt
 800d3b8:	4623      	movlt	r3, r4
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 800d3ba:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 800d3be:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 800d3c2:	8043      	strh	r3, [r0, #2]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 800d3c4:	42b4      	cmp	r4, r6
 800d3c6:	bfa8      	it	ge
 800d3c8:	4634      	movge	r4, r6
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 800d3ca:	428a      	cmp	r2, r1
 800d3cc:	bfa8      	it	ge
 800d3ce:	460a      	movge	r2, r1

    /*If x1 or y1 greater then x2 or y2 then the areas union is empty*/
    bool union_ok = true;
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
 800d3d0:	42a5      	cmp	r5, r4
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 800d3d2:	8084      	strh	r4, [r0, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 800d3d4:	80c2      	strh	r2, [r0, #6]
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
 800d3d6:	dc04      	bgt.n	800d3e2 <lv_area_intersect+0x50>
 800d3d8:	4293      	cmp	r3, r2
 800d3da:	bfcc      	ite	gt
 800d3dc:	2000      	movgt	r0, #0
 800d3de:	2001      	movle	r0, #1
 800d3e0:	bd70      	pop	{r4, r5, r6, pc}
        union_ok = false;
 800d3e2:	2000      	movs	r0, #0
    }

    return union_ok;
}
 800d3e4:	bd70      	pop	{r4, r5, r6, pc}

0800d3e6 <lv_area_join>:
 * @param a1_p pointer to the first area
 * @param a2_p pointer to the second area
 */
void lv_area_join(lv_area_t * a_res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
 800d3e6:	f9b2 3000 	ldrsh.w	r3, [r2]
{
 800d3ea:	b510      	push	{r4, lr}
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
 800d3ec:	f9b1 4000 	ldrsh.w	r4, [r1]
 800d3f0:	42a3      	cmp	r3, r4
 800d3f2:	bfa8      	it	ge
 800d3f4:	4623      	movge	r3, r4
 800d3f6:	8003      	strh	r3, [r0, #0]
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
 800d3f8:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 800d3fc:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 800d400:	42a3      	cmp	r3, r4
 800d402:	bfa8      	it	ge
 800d404:	4623      	movge	r3, r4
 800d406:	8043      	strh	r3, [r0, #2]
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
 800d408:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 800d40c:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 800d410:	42a3      	cmp	r3, r4
 800d412:	bfb8      	it	lt
 800d414:	4623      	movlt	r3, r4
 800d416:	8083      	strh	r3, [r0, #4]
    a_res_p->y2 = LV_MATH_MAX(a1_p->y2, a2_p->y2);
 800d418:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 800d41c:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 800d420:	4293      	cmp	r3, r2
 800d422:	bfb8      	it	lt
 800d424:	4613      	movlt	r3, r2
 800d426:	80c3      	strh	r3, [r0, #6]
 800d428:	bd10      	pop	{r4, pc}

0800d42a <lv_area_is_on>:
 * @param a2_p pointer to an other area
 * @return false: a1_p and a2_p has no common parts
 */
bool lv_area_is_on(const lv_area_t * a1_p, const lv_area_t * a2_p)
{
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
 800d42a:	f9b0 2000 	ldrsh.w	r2, [r0]
 800d42e:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800d432:	429a      	cmp	r2, r3
 800d434:	dc14      	bgt.n	800d460 <lv_area_is_on+0x36>
 800d436:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800d43a:	f9b1 3000 	ldrsh.w	r3, [r1]
 800d43e:	429a      	cmp	r2, r3
 800d440:	db0e      	blt.n	800d460 <lv_area_is_on+0x36>
 800d442:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800d446:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800d44a:	429a      	cmp	r2, r3
 800d44c:	dc08      	bgt.n	800d460 <lv_area_is_on+0x36>
 800d44e:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800d452:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800d456:	4298      	cmp	r0, r3
 800d458:	bfb4      	ite	lt
 800d45a:	2000      	movlt	r0, #0
 800d45c:	2001      	movge	r0, #1
 800d45e:	4770      	bx	lr
        return true;
    } else {
        return false;
 800d460:	2000      	movs	r0, #0
    }
}
 800d462:	4770      	bx	lr

0800d464 <lv_area_is_in>:
 */
bool lv_area_is_in(const lv_area_t * ain_p, const lv_area_t * aholder_p)
{
    bool is_in = false;

    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 800d464:	f9b0 2000 	ldrsh.w	r2, [r0]
 800d468:	f9b1 3000 	ldrsh.w	r3, [r1]
 800d46c:	429a      	cmp	r2, r3
 800d46e:	db14      	blt.n	800d49a <lv_area_is_in+0x36>
 800d470:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800d474:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800d478:	429a      	cmp	r2, r3
 800d47a:	db0e      	blt.n	800d49a <lv_area_is_in+0x36>
 800d47c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800d480:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800d484:	429a      	cmp	r2, r3
 800d486:	dc08      	bgt.n	800d49a <lv_area_is_in+0x36>
 800d488:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800d48c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800d490:	4298      	cmp	r0, r3
 800d492:	bfcc      	ite	gt
 800d494:	2000      	movgt	r0, #0
 800d496:	2001      	movle	r0, #1
 800d498:	4770      	bx	lr
    bool is_in = false;
 800d49a:	2000      	movs	r0, #0
       ain_p->y2 <= aholder_p->y2) {
        is_in = true;
    }

    return is_in;
}
 800d49c:	4770      	bx	lr

0800d49e <lv_circ_init>:
 * @param tmp point to a variable. It will store temporary data
 * @param radius radius of the circle
 */
void lv_circ_init(lv_point_t * c, lv_coord_t * tmp, lv_coord_t radius)
{
    c->x = radius;
 800d49e:	8002      	strh	r2, [r0, #0]
    c->y = 0;
 800d4a0:	2300      	movs	r3, #0
    *tmp = 1 - radius;
 800d4a2:	f1c2 0201 	rsb	r2, r2, #1
    c->y = 0;
 800d4a6:	8043      	strh	r3, [r0, #2]
    *tmp = 1 - radius;
 800d4a8:	800a      	strh	r2, [r1, #0]
 800d4aa:	4770      	bx	lr

0800d4ac <lv_circ_cont>:
 * @param c same as in circ_init
 * @return true if the circle is not ready yet
 */
bool lv_circ_cont(lv_point_t * c)
{
    return c->y <= c->x ? true : false;
 800d4ac:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800d4b0:	f9b0 0000 	ldrsh.w	r0, [r0]
}
 800d4b4:	4282      	cmp	r2, r0
 800d4b6:	bfcc      	ite	gt
 800d4b8:	2000      	movgt	r0, #0
 800d4ba:	2001      	movle	r0, #1
 800d4bc:	4770      	bx	lr

0800d4be <lv_circ_next>:
 * @param c same as in circ_init. The next point stored here.
 * @param tmp same as in circ_init.
 */
void lv_circ_next(lv_point_t * c, lv_coord_t * tmp)
{
    c->y++;
 800d4be:	8842      	ldrh	r2, [r0, #2]
 800d4c0:	3201      	adds	r2, #1
{
 800d4c2:	b530      	push	{r4, r5, lr}
    c->y++;
 800d4c4:	b294      	uxth	r4, r2
 800d4c6:	b225      	sxth	r5, r4
 800d4c8:	8045      	strh	r5, [r0, #2]

    if(*tmp <= 0) {
 800d4ca:	f9b1 2000 	ldrsh.w	r2, [r1]
 800d4ce:	2a00      	cmp	r2, #0
 800d4d0:	dc04      	bgt.n	800d4dc <lv_circ_next+0x1e>
        (*tmp) += 2 * c->y + 1; // Change in decision criterion for y -> y+1
 800d4d2:	3201      	adds	r2, #1
 800d4d4:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 800d4d8:	800a      	strh	r2, [r1, #0]
 800d4da:	bd30      	pop	{r4, r5, pc}
    } else {
        c->x--;
 800d4dc:	8803      	ldrh	r3, [r0, #0]
 800d4de:	3b01      	subs	r3, #1
 800d4e0:	b21b      	sxth	r3, r3
 800d4e2:	8003      	strh	r3, [r0, #0]
        (*tmp) += 2 * (c->y - c->x) + 1; // Change for y -> y+1, x -> x-1
 800d4e4:	1aed      	subs	r5, r5, r3
 800d4e6:	880b      	ldrh	r3, [r1, #0]
 800d4e8:	3301      	adds	r3, #1
 800d4ea:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 800d4ee:	800b      	strh	r3, [r1, #0]
 800d4f0:	bd30      	pop	{r4, r5, pc}

0800d4f2 <lv_fs_get_real_path>:
static const char * lv_fs_get_real_path(const char * path)
{
    /* Example path: "S:/folder/file.txt"
     * Leave the letter and the : / \ characters*/

    path++; /*Ignore the driver letter*/
 800d4f2:	1c42      	adds	r2, r0, #1
 800d4f4:	4610      	mov	r0, r2

    while(*path != '\0') {
 800d4f6:	f812 3b01 	ldrb.w	r3, [r2], #1
 800d4fa:	b12b      	cbz	r3, 800d508 <lv_fs_get_real_path+0x16>
        if(*path == ':' || *path == '\\' || *path == '/') {
 800d4fc:	2b3a      	cmp	r3, #58	; 0x3a
 800d4fe:	d0f9      	beq.n	800d4f4 <lv_fs_get_real_path+0x2>
 800d500:	2b5c      	cmp	r3, #92	; 0x5c
 800d502:	d0f7      	beq.n	800d4f4 <lv_fs_get_real_path+0x2>
 800d504:	2b2f      	cmp	r3, #47	; 0x2f
 800d506:	d0f5      	beq.n	800d4f4 <lv_fs_get_real_path+0x2>
            break;
        }
    }

    return path;
}
 800d508:	4770      	bx	lr
	...

0800d50c <lv_fs_init>:
    lv_ll_init(&LV_GC_ROOT(_lv_drv_ll), sizeof(lv_fs_drv_t));
 800d50c:	2144      	movs	r1, #68	; 0x44
 800d50e:	4801      	ldr	r0, [pc, #4]	; (800d514 <lv_fs_init+0x8>)
 800d510:	f000 b8b9 	b.w	800d686 <lv_ll_init>
 800d514:	2000d910 	.word	0x2000d910

0800d518 <lv_fs_close>:
{
 800d518:	b538      	push	{r3, r4, r5, lr}
 800d51a:	4604      	mov	r4, r0
    if(file_p->drv == NULL) {
 800d51c:	6840      	ldr	r0, [r0, #4]
 800d51e:	b160      	cbz	r0, 800d53a <lv_fs_close+0x22>
    if(file_p->drv->close_cb == NULL) {
 800d520:	6903      	ldr	r3, [r0, #16]
 800d522:	b163      	cbz	r3, 800d53e <lv_fs_close+0x26>
    lv_fs_res_t res = file_p->drv->close_cb(file_p->drv, file_p->file_d);
 800d524:	6821      	ldr	r1, [r4, #0]
 800d526:	4798      	blx	r3
 800d528:	4605      	mov	r5, r0
    lv_mem_free(file_p->file_d); /*Clean up*/
 800d52a:	6820      	ldr	r0, [r4, #0]
 800d52c:	f000 fa62 	bl	800d9f4 <lv_mem_free>
    file_p->file_d = NULL;
 800d530:	2300      	movs	r3, #0
 800d532:	6023      	str	r3, [r4, #0]
    file_p->drv    = NULL;
 800d534:	6063      	str	r3, [r4, #4]
}
 800d536:	4628      	mov	r0, r5
 800d538:	bd38      	pop	{r3, r4, r5, pc}
        return LV_FS_RES_INV_PARAM;
 800d53a:	250b      	movs	r5, #11
 800d53c:	e7fb      	b.n	800d536 <lv_fs_close+0x1e>
        return LV_FS_RES_NOT_IMP;
 800d53e:	2509      	movs	r5, #9
 800d540:	e7f9      	b.n	800d536 <lv_fs_close+0x1e>

0800d542 <lv_fs_read>:
{
 800d542:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d544:	4606      	mov	r6, r0
 800d546:	b085      	sub	sp, #20
    if(br != NULL) *br = 0;
 800d548:	461c      	mov	r4, r3
 800d54a:	b10b      	cbz	r3, 800d550 <lv_fs_read+0xe>
 800d54c:	2300      	movs	r3, #0
 800d54e:	6023      	str	r3, [r4, #0]
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 800d550:	6870      	ldr	r0, [r6, #4]
 800d552:	b178      	cbz	r0, 800d574 <lv_fs_read+0x32>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 800d554:	6985      	ldr	r5, [r0, #24]
 800d556:	b17d      	cbz	r5, 800d578 <lv_fs_read+0x36>
    uint32_t br_tmp = 0;
 800d558:	ab04      	add	r3, sp, #16
 800d55a:	2700      	movs	r7, #0
 800d55c:	f843 7d04 	str.w	r7, [r3, #-4]!
    lv_fs_res_t res = file_p->drv->read_cb(file_p->drv, file_p->file_d, buf, btr, &br_tmp);
 800d560:	9300      	str	r3, [sp, #0]
 800d562:	4613      	mov	r3, r2
 800d564:	460a      	mov	r2, r1
 800d566:	6831      	ldr	r1, [r6, #0]
 800d568:	47a8      	blx	r5
    if(br != NULL) *br = br_tmp;
 800d56a:	b10c      	cbz	r4, 800d570 <lv_fs_read+0x2e>
 800d56c:	9b03      	ldr	r3, [sp, #12]
 800d56e:	6023      	str	r3, [r4, #0]
}
 800d570:	b005      	add	sp, #20
 800d572:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 800d574:	200b      	movs	r0, #11
 800d576:	e7fb      	b.n	800d570 <lv_fs_read+0x2e>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 800d578:	2009      	movs	r0, #9
 800d57a:	e7f9      	b.n	800d570 <lv_fs_read+0x2e>

0800d57c <lv_fs_seek>:
    if(file_p->drv == NULL) {
 800d57c:	6843      	ldr	r3, [r0, #4]
{
 800d57e:	b410      	push	{r4}
 800d580:	460a      	mov	r2, r1
    if(file_p->drv == NULL) {
 800d582:	b13b      	cbz	r3, 800d594 <lv_fs_seek+0x18>
    if(file_p->drv->seek_cb == NULL) {
 800d584:	6a1c      	ldr	r4, [r3, #32]
 800d586:	b14c      	cbz	r4, 800d59c <lv_fs_seek+0x20>
    lv_fs_res_t res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos);
 800d588:	6801      	ldr	r1, [r0, #0]
 800d58a:	4618      	mov	r0, r3
 800d58c:	4623      	mov	r3, r4
}
 800d58e:	f85d 4b04 	ldr.w	r4, [sp], #4
    lv_fs_res_t res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos);
 800d592:	4718      	bx	r3
        return LV_FS_RES_INV_PARAM;
 800d594:	200b      	movs	r0, #11
}
 800d596:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d59a:	4770      	bx	lr
        return LV_FS_RES_NOT_IMP;
 800d59c:	2009      	movs	r0, #9
 800d59e:	e7fa      	b.n	800d596 <lv_fs_seek+0x1a>

0800d5a0 <lv_fs_get_drv>:
{
 800d5a0:	b538      	push	{r3, r4, r5, lr}
 800d5a2:	4604      	mov	r4, r0
    LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv)
 800d5a4:	4806      	ldr	r0, [pc, #24]	; (800d5c0 <lv_fs_get_drv+0x20>)
 800d5a6:	4d06      	ldr	r5, [pc, #24]	; (800d5c0 <lv_fs_get_drv+0x20>)
 800d5a8:	f000 f8b3 	bl	800d712 <lv_ll_get_head>
 800d5ac:	b900      	cbnz	r0, 800d5b0 <lv_fs_get_drv+0x10>
}
 800d5ae:	bd38      	pop	{r3, r4, r5, pc}
        if(drv->letter == letter) {
 800d5b0:	7803      	ldrb	r3, [r0, #0]
 800d5b2:	42a3      	cmp	r3, r4
 800d5b4:	d0fb      	beq.n	800d5ae <lv_fs_get_drv+0xe>
    LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv)
 800d5b6:	4601      	mov	r1, r0
 800d5b8:	4628      	mov	r0, r5
 800d5ba:	f000 f8b0 	bl	800d71e <lv_ll_get_next>
 800d5be:	e7f5      	b.n	800d5ac <lv_fs_get_drv+0xc>
 800d5c0:	2000d910 	.word	0x2000d910

0800d5c4 <lv_fs_open>:
    file_p->drv    = NULL;
 800d5c4:	2300      	movs	r3, #0
{
 800d5c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5ca:	4604      	mov	r4, r0
 800d5cc:	4690      	mov	r8, r2
    file_p->drv    = NULL;
 800d5ce:	6043      	str	r3, [r0, #4]
    file_p->file_d = NULL;
 800d5d0:	6003      	str	r3, [r0, #0]
    if(path == NULL) return LV_FS_RES_INV_PARAM;
 800d5d2:	460d      	mov	r5, r1
 800d5d4:	b369      	cbz	r1, 800d632 <lv_fs_open+0x6e>
    file_p->drv = lv_fs_get_drv(letter);
 800d5d6:	7808      	ldrb	r0, [r1, #0]
 800d5d8:	f7ff ffe2 	bl	800d5a0 <lv_fs_get_drv>
 800d5dc:	6060      	str	r0, [r4, #4]
    if(file_p->drv == NULL) {
 800d5de:	b920      	cbnz	r0, 800d5ea <lv_fs_open+0x26>
        file_p->file_d = NULL;
 800d5e0:	6020      	str	r0, [r4, #0]
        return LV_FS_RES_NOT_EX;
 800d5e2:	2503      	movs	r5, #3
}
 800d5e4:	4628      	mov	r0, r5
 800d5e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(file_p->drv->ready_cb != NULL) {
 800d5ea:	6883      	ldr	r3, [r0, #8]
 800d5ec:	b12b      	cbz	r3, 800d5fa <lv_fs_open+0x36>
        if(file_p->drv->ready_cb(file_p->drv) == false) {
 800d5ee:	4798      	blx	r3
 800d5f0:	b918      	cbnz	r0, 800d5fa <lv_fs_open+0x36>
            file_p->drv    = NULL;
 800d5f2:	6060      	str	r0, [r4, #4]
            file_p->file_d = NULL;
 800d5f4:	6020      	str	r0, [r4, #0]
            return LV_FS_RES_HW_ERR;
 800d5f6:	2501      	movs	r5, #1
 800d5f8:	e7f4      	b.n	800d5e4 <lv_fs_open+0x20>
    file_p->file_d = lv_mem_alloc(file_p->drv->file_size);
 800d5fa:	6863      	ldr	r3, [r4, #4]
 800d5fc:	8858      	ldrh	r0, [r3, #2]
 800d5fe:	f000 f9c3 	bl	800d988 <lv_mem_alloc>
 800d602:	4601      	mov	r1, r0
 800d604:	6020      	str	r0, [r4, #0]
    lv_mem_assert(file_p->file_d);
 800d606:	b900      	cbnz	r0, 800d60a <lv_fs_open+0x46>
 800d608:	e7fe      	b.n	800d608 <lv_fs_open+0x44>
    if(file_p->drv->open_cb == NULL) {
 800d60a:	6867      	ldr	r7, [r4, #4]
 800d60c:	68fe      	ldr	r6, [r7, #12]
 800d60e:	b196      	cbz	r6, 800d636 <lv_fs_open+0x72>
    const char * real_path = lv_fs_get_real_path(path);
 800d610:	4628      	mov	r0, r5
 800d612:	f7ff ff6e 	bl	800d4f2 <lv_fs_get_real_path>
    lv_fs_res_t res        = file_p->drv->open_cb(file_p->drv, file_p->file_d, real_path, mode);
 800d616:	4643      	mov	r3, r8
 800d618:	4602      	mov	r2, r0
 800d61a:	4638      	mov	r0, r7
 800d61c:	47b0      	blx	r6
    if(res != LV_FS_RES_OK) {
 800d61e:	4605      	mov	r5, r0
 800d620:	2800      	cmp	r0, #0
 800d622:	d0df      	beq.n	800d5e4 <lv_fs_open+0x20>
        lv_mem_free(file_p->file_d);
 800d624:	6820      	ldr	r0, [r4, #0]
 800d626:	f000 f9e5 	bl	800d9f4 <lv_mem_free>
        file_p->file_d = NULL;
 800d62a:	2300      	movs	r3, #0
 800d62c:	6023      	str	r3, [r4, #0]
        file_p->drv    = NULL;
 800d62e:	6063      	str	r3, [r4, #4]
 800d630:	e7d8      	b.n	800d5e4 <lv_fs_open+0x20>
    if(path == NULL) return LV_FS_RES_INV_PARAM;
 800d632:	250b      	movs	r5, #11
 800d634:	e7d6      	b.n	800d5e4 <lv_fs_open+0x20>
        return LV_FS_RES_NOT_IMP;
 800d636:	2509      	movs	r5, #9
 800d638:	e7d4      	b.n	800d5e4 <lv_fs_open+0x20>
	...

0800d63c <lv_fs_get_ext>:
{
 800d63c:	b510      	push	{r4, lr}
 800d63e:	4604      	mov	r4, r0
    for(i = strlen(fn); i > 0; i--) {
 800d640:	f7f2 fdd0 	bl	80001e4 <strlen>
 800d644:	b280      	uxth	r0, r0
 800d646:	b908      	cbnz	r0, 800d64c <lv_fs_get_ext+0x10>
            return ""; /*No extension if a '\' or '/' found*/
 800d648:	4806      	ldr	r0, [pc, #24]	; (800d664 <lv_fs_get_ext+0x28>)
}
 800d64a:	bd10      	pop	{r4, pc}
        if(fn[i] == '.') {
 800d64c:	5c23      	ldrb	r3, [r4, r0]
 800d64e:	2b2e      	cmp	r3, #46	; 0x2e
 800d650:	d102      	bne.n	800d658 <lv_fs_get_ext+0x1c>
            return &fn[i + 1];
 800d652:	3001      	adds	r0, #1
 800d654:	4420      	add	r0, r4
 800d656:	bd10      	pop	{r4, pc}
        } else if(fn[i] == '/' || fn[i] == '\\') {
 800d658:	2b2f      	cmp	r3, #47	; 0x2f
 800d65a:	d0f5      	beq.n	800d648 <lv_fs_get_ext+0xc>
 800d65c:	2b5c      	cmp	r3, #92	; 0x5c
 800d65e:	d0f3      	beq.n	800d648 <lv_fs_get_ext+0xc>
    for(i = strlen(fn); i > 0; i--) {
 800d660:	3801      	subs	r0, #1
 800d662:	e7ef      	b.n	800d644 <lv_fs_get_ext+0x8>
 800d664:	080120b2 	.word	0x080120b2

0800d668 <node_set_next.isra.0>:
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
{
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 800d668:	b131      	cbz	r1, 800d678 <node_set_next.isra.0+0x10>
 800d66a:	6803      	ldr	r3, [r0, #0]

    uint32_t node_p_size = sizeof(lv_ll_node_t *);
    if(next)
 800d66c:	b112      	cbz	r2, 800d674 <node_set_next.isra.0+0xc>
        memcpy(act + LL_NEXT_P_OFFSET(ll_p), &next, node_p_size);
 800d66e:	4419      	add	r1, r3
 800d670:	604a      	str	r2, [r1, #4]
 800d672:	4770      	bx	lr
    else
        memset(act + LL_NEXT_P_OFFSET(ll_p), 0, node_p_size);
 800d674:	3304      	adds	r3, #4
 800d676:	50ca      	str	r2, [r1, r3]
 800d678:	4770      	bx	lr

0800d67a <node_set_prev.isra.2>:
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 800d67a:	b119      	cbz	r1, 800d684 <node_set_prev.isra.2+0xa>
 800d67c:	6803      	ldr	r3, [r0, #0]
        memcpy(act + LL_PREV_P_OFFSET(ll_p), &prev, node_p_size);
 800d67e:	50ca      	str	r2, [r1, r3]
    if(prev)
 800d680:	b102      	cbz	r2, 800d684 <node_set_prev.isra.2+0xa>
 800d682:	4770      	bx	lr
 800d684:	4770      	bx	lr

0800d686 <lv_ll_init>:
    ll_p->head = NULL;
 800d686:	2300      	movs	r3, #0
 800d688:	6043      	str	r3, [r0, #4]
    ll_p->tail = NULL;
 800d68a:	6083      	str	r3, [r0, #8]
    if(node_size & 0x3) {
 800d68c:	078b      	lsls	r3, r1, #30
        node_size = node_size & (~0x3);
 800d68e:	bf1c      	itt	ne
 800d690:	f021 0103 	bicne.w	r1, r1, #3
        node_size += 4;
 800d694:	3104      	addne	r1, #4
    ll_p->n_size = node_size;
 800d696:	6001      	str	r1, [r0, #0]
 800d698:	4770      	bx	lr

0800d69a <lv_ll_ins_head>:
{
 800d69a:	b538      	push	{r3, r4, r5, lr}
 800d69c:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 800d69e:	6800      	ldr	r0, [r0, #0]
 800d6a0:	3008      	adds	r0, #8
 800d6a2:	f000 f971 	bl	800d988 <lv_mem_alloc>
    if(n_new != NULL) {
 800d6a6:	4605      	mov	r5, r0
 800d6a8:	b198      	cbz	r0, 800d6d2 <lv_ll_ins_head+0x38>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
 800d6aa:	4601      	mov	r1, r0
 800d6ac:	2200      	movs	r2, #0
 800d6ae:	4620      	mov	r0, r4
 800d6b0:	f7ff ffe3 	bl	800d67a <node_set_prev.isra.2>
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
 800d6b4:	4629      	mov	r1, r5
 800d6b6:	6862      	ldr	r2, [r4, #4]
 800d6b8:	4620      	mov	r0, r4
 800d6ba:	f7ff ffd5 	bl	800d668 <node_set_next.isra.0>
        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
 800d6be:	6861      	ldr	r1, [r4, #4]
 800d6c0:	b119      	cbz	r1, 800d6ca <lv_ll_ins_head+0x30>
            node_set_prev(ll_p, ll_p->head, n_new);
 800d6c2:	462a      	mov	r2, r5
 800d6c4:	4620      	mov	r0, r4
 800d6c6:	f7ff ffd8 	bl	800d67a <node_set_prev.isra.2>
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 800d6ca:	68a3      	ldr	r3, [r4, #8]
        ll_p->head = n_new;      /*Set the new head in the dsc.*/
 800d6cc:	6065      	str	r5, [r4, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 800d6ce:	b903      	cbnz	r3, 800d6d2 <lv_ll_ins_head+0x38>
            ll_p->tail = n_new;
 800d6d0:	60a5      	str	r5, [r4, #8]
}
 800d6d2:	4628      	mov	r0, r5
 800d6d4:	bd38      	pop	{r3, r4, r5, pc}

0800d6d6 <lv_ll_ins_tail>:
{
 800d6d6:	b538      	push	{r3, r4, r5, lr}
 800d6d8:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 800d6da:	6800      	ldr	r0, [r0, #0]
 800d6dc:	3008      	adds	r0, #8
 800d6de:	f000 f953 	bl	800d988 <lv_mem_alloc>
    if(n_new == NULL) return NULL;
 800d6e2:	4605      	mov	r5, r0
 800d6e4:	b198      	cbz	r0, 800d70e <lv_ll_ins_tail+0x38>
        node_set_next(ll_p, n_new, NULL);       /*No next after the new tail*/
 800d6e6:	4601      	mov	r1, r0
 800d6e8:	2200      	movs	r2, #0
 800d6ea:	4620      	mov	r0, r4
 800d6ec:	f7ff ffbc 	bl	800d668 <node_set_next.isra.0>
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is tho old tail*/
 800d6f0:	4629      	mov	r1, r5
 800d6f2:	68a2      	ldr	r2, [r4, #8]
 800d6f4:	4620      	mov	r0, r4
 800d6f6:	f7ff ffc0 	bl	800d67a <node_set_prev.isra.2>
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
 800d6fa:	68a1      	ldr	r1, [r4, #8]
 800d6fc:	b119      	cbz	r1, 800d706 <lv_ll_ins_tail+0x30>
            node_set_next(ll_p, ll_p->tail, n_new);
 800d6fe:	462a      	mov	r2, r5
 800d700:	4620      	mov	r0, r4
 800d702:	f7ff ffb1 	bl	800d668 <node_set_next.isra.0>
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 800d706:	6863      	ldr	r3, [r4, #4]
        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
 800d708:	60a5      	str	r5, [r4, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 800d70a:	b903      	cbnz	r3, 800d70e <lv_ll_ins_tail+0x38>
            ll_p->head = n_new;
 800d70c:	6065      	str	r5, [r4, #4]
}
 800d70e:	4628      	mov	r0, r5
 800d710:	bd38      	pop	{r3, r4, r5, pc}

0800d712 <lv_ll_get_head>:
    if(ll_p != NULL) {
 800d712:	b100      	cbz	r0, 800d716 <lv_ll_get_head+0x4>
        head = ll_p->head;
 800d714:	6840      	ldr	r0, [r0, #4]
}
 800d716:	4770      	bx	lr

0800d718 <lv_ll_get_tail>:
    if(ll_p != NULL) {
 800d718:	b100      	cbz	r0, 800d71c <lv_ll_get_tail+0x4>
        tail = ll_p->tail;
 800d71a:	6880      	ldr	r0, [r0, #8]
}
 800d71c:	4770      	bx	lr

0800d71e <lv_ll_get_next>:
    if(ll_p != NULL) {
 800d71e:	b110      	cbz	r0, 800d726 <lv_ll_get_next+0x8>
        memcpy(&next, n_act_d + LL_NEXT_P_OFFSET(ll_p), sizeof(void *));
 800d720:	6803      	ldr	r3, [r0, #0]
 800d722:	4419      	add	r1, r3
 800d724:	6848      	ldr	r0, [r1, #4]
}
 800d726:	4770      	bx	lr

0800d728 <lv_ll_get_prev>:
    if(ll_p != NULL) {
 800d728:	b108      	cbz	r0, 800d72e <lv_ll_get_prev+0x6>
        memcpy(&prev, n_act_d + LL_PREV_P_OFFSET(ll_p), sizeof(void *));
 800d72a:	6803      	ldr	r3, [r0, #0]
 800d72c:	58c8      	ldr	r0, [r1, r3]
}
 800d72e:	4770      	bx	lr

0800d730 <lv_ll_ins_prev>:
{
 800d730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d732:	460c      	mov	r4, r1
    if(NULL == ll_p || NULL == n_act) return NULL;
 800d734:	4605      	mov	r5, r0
 800d736:	b340      	cbz	r0, 800d78a <lv_ll_ins_prev+0x5a>
 800d738:	b341      	cbz	r1, 800d78c <lv_ll_ins_prev+0x5c>
    if(lv_ll_get_head(ll_p) == n_act) {
 800d73a:	6843      	ldr	r3, [r0, #4]
 800d73c:	4299      	cmp	r1, r3
 800d73e:	d103      	bne.n	800d748 <lv_ll_ins_prev+0x18>
}
 800d740:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        n_new = lv_ll_ins_head(ll_p);
 800d744:	f7ff bfa9 	b.w	800d69a <lv_ll_ins_head>
        n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 800d748:	6800      	ldr	r0, [r0, #0]
 800d74a:	3008      	adds	r0, #8
 800d74c:	f000 f91c 	bl	800d988 <lv_mem_alloc>
        if(n_new == NULL) return NULL;
 800d750:	4606      	mov	r6, r0
 800d752:	b1c0      	cbz	r0, 800d786 <lv_ll_ins_prev+0x56>
        n_prev = lv_ll_get_prev(ll_p, n_act);
 800d754:	4621      	mov	r1, r4
 800d756:	4628      	mov	r0, r5
 800d758:	f7ff ffe6 	bl	800d728 <lv_ll_get_prev>
        node_set_next(ll_p, n_prev, n_new);
 800d75c:	4632      	mov	r2, r6
 800d75e:	4601      	mov	r1, r0
        n_prev = lv_ll_get_prev(ll_p, n_act);
 800d760:	4607      	mov	r7, r0
        node_set_next(ll_p, n_prev, n_new);
 800d762:	4628      	mov	r0, r5
 800d764:	f7ff ff80 	bl	800d668 <node_set_next.isra.0>
        node_set_prev(ll_p, n_new, n_prev);
 800d768:	463a      	mov	r2, r7
 800d76a:	4631      	mov	r1, r6
 800d76c:	4628      	mov	r0, r5
 800d76e:	f7ff ff84 	bl	800d67a <node_set_prev.isra.2>
        node_set_prev(ll_p, n_act, n_new);
 800d772:	4632      	mov	r2, r6
 800d774:	4621      	mov	r1, r4
 800d776:	4628      	mov	r0, r5
 800d778:	f7ff ff7f 	bl	800d67a <node_set_prev.isra.2>
        node_set_next(ll_p, n_new, n_act);
 800d77c:	4622      	mov	r2, r4
 800d77e:	4631      	mov	r1, r6
 800d780:	4628      	mov	r0, r5
 800d782:	f7ff ff71 	bl	800d668 <node_set_next.isra.0>
        if(n_new == NULL) return NULL;
 800d786:	4634      	mov	r4, r6
 800d788:	e000      	b.n	800d78c <lv_ll_ins_prev+0x5c>
    if(NULL == ll_p || NULL == n_act) return NULL;
 800d78a:	4604      	mov	r4, r0
}
 800d78c:	4620      	mov	r0, r4
 800d78e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d790 <lv_ll_rem>:
{
 800d790:	b570      	push	{r4, r5, r6, lr}
 800d792:	460a      	mov	r2, r1
    if(ll_p != NULL) {
 800d794:	4604      	mov	r4, r0
 800d796:	b308      	cbz	r0, 800d7dc <lv_ll_rem+0x4c>
    if(lv_ll_get_head(ll_p) == node_p) {
 800d798:	6843      	ldr	r3, [r0, #4]
 800d79a:	4299      	cmp	r1, r3
 800d79c:	d10e      	bne.n	800d7bc <lv_ll_rem+0x2c>
        ll_p->head = lv_ll_get_next(ll_p, node_p);
 800d79e:	4611      	mov	r1, r2
 800d7a0:	4620      	mov	r0, r4
 800d7a2:	f7ff ffbc 	bl	800d71e <lv_ll_get_next>
 800d7a6:	4601      	mov	r1, r0
 800d7a8:	6060      	str	r0, [r4, #4]
        if(ll_p->head == NULL) {
 800d7aa:	b908      	cbnz	r0, 800d7b0 <lv_ll_rem+0x20>
            ll_p->tail = NULL;
 800d7ac:	60a0      	str	r0, [r4, #8]
 800d7ae:	bd70      	pop	{r4, r5, r6, pc}
            node_set_prev(ll_p, ll_p->head, NULL);
 800d7b0:	2200      	movs	r2, #0
        node_set_prev(ll_p, n_next, n_prev);
 800d7b2:	4620      	mov	r0, r4
}
 800d7b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        node_set_prev(ll_p, n_next, n_prev);
 800d7b8:	f7ff bf5f 	b.w	800d67a <node_set_prev.isra.2>
    } else if(lv_ll_get_tail(ll_p) == node_p) {
 800d7bc:	6883      	ldr	r3, [r0, #8]
 800d7be:	4299      	cmp	r1, r3
 800d7c0:	d10e      	bne.n	800d7e0 <lv_ll_rem+0x50>
        ll_p->tail = lv_ll_get_prev(ll_p, node_p);
 800d7c2:	f7ff ffb1 	bl	800d728 <lv_ll_get_prev>
 800d7c6:	4601      	mov	r1, r0
 800d7c8:	60a0      	str	r0, [r4, #8]
        if(ll_p->tail == NULL) {
 800d7ca:	b908      	cbnz	r0, 800d7d0 <lv_ll_rem+0x40>
            ll_p->head = NULL;
 800d7cc:	6060      	str	r0, [r4, #4]
 800d7ce:	bd70      	pop	{r4, r5, r6, pc}
            node_set_next(ll_p, ll_p->tail, NULL);
 800d7d0:	4620      	mov	r0, r4
 800d7d2:	2200      	movs	r2, #0
}
 800d7d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            node_set_next(ll_p, ll_p->tail, NULL);
 800d7d8:	f7ff bf46 	b.w	800d668 <node_set_next.isra.0>
    if(lv_ll_get_head(ll_p) == node_p) {
 800d7dc:	2900      	cmp	r1, #0
 800d7de:	d0de      	beq.n	800d79e <lv_ll_rem+0xe>
        lv_ll_node_t * n_prev = lv_ll_get_prev(ll_p, node_p);
 800d7e0:	4611      	mov	r1, r2
 800d7e2:	4620      	mov	r0, r4
 800d7e4:	f7ff ffa0 	bl	800d728 <lv_ll_get_prev>
 800d7e8:	4606      	mov	r6, r0
        lv_ll_node_t * n_next = lv_ll_get_next(ll_p, node_p);
 800d7ea:	4611      	mov	r1, r2
 800d7ec:	4620      	mov	r0, r4
 800d7ee:	f7ff ff96 	bl	800d71e <lv_ll_get_next>
        node_set_next(ll_p, n_prev, n_next);
 800d7f2:	4631      	mov	r1, r6
 800d7f4:	4602      	mov	r2, r0
        lv_ll_node_t * n_next = lv_ll_get_next(ll_p, node_p);
 800d7f6:	4605      	mov	r5, r0
        node_set_next(ll_p, n_prev, n_next);
 800d7f8:	4620      	mov	r0, r4
 800d7fa:	f7ff ff35 	bl	800d668 <node_set_next.isra.0>
        node_set_prev(ll_p, n_next, n_prev);
 800d7fe:	4632      	mov	r2, r6
 800d800:	4629      	mov	r1, r5
 800d802:	e7d6      	b.n	800d7b2 <lv_ll_rem+0x22>

0800d804 <lv_ll_chg_list>:
{
 800d804:	b570      	push	{r4, r5, r6, lr}
 800d806:	460c      	mov	r4, r1
 800d808:	461e      	mov	r6, r3
    lv_ll_rem(ll_ori_p, node);
 800d80a:	4611      	mov	r1, r2
{
 800d80c:	4615      	mov	r5, r2
    lv_ll_rem(ll_ori_p, node);
 800d80e:	f7ff ffbf 	bl	800d790 <lv_ll_rem>
    if(head) {
 800d812:	b1a6      	cbz	r6, 800d83e <lv_ll_chg_list+0x3a>
        node_set_prev(ll_new_p, node, NULL);
 800d814:	2200      	movs	r2, #0
 800d816:	4629      	mov	r1, r5
 800d818:	4620      	mov	r0, r4
 800d81a:	f7ff ff2e 	bl	800d67a <node_set_prev.isra.2>
        node_set_next(ll_new_p, node, ll_new_p->head);
 800d81e:	4629      	mov	r1, r5
 800d820:	6862      	ldr	r2, [r4, #4]
 800d822:	4620      	mov	r0, r4
 800d824:	f7ff ff20 	bl	800d668 <node_set_next.isra.0>
        if(ll_new_p->head != NULL) { /*If there is old head then before it goes the new*/
 800d828:	6861      	ldr	r1, [r4, #4]
 800d82a:	b119      	cbz	r1, 800d834 <lv_ll_chg_list+0x30>
            node_set_prev(ll_new_p, ll_new_p->head, node);
 800d82c:	462a      	mov	r2, r5
 800d82e:	4620      	mov	r0, r4
 800d830:	f7ff ff23 	bl	800d67a <node_set_prev.isra.2>
        if(ll_new_p->tail == NULL) { /*If there is no tail (first node) set the tail too*/
 800d834:	68a3      	ldr	r3, [r4, #8]
        ll_new_p->head = node;       /*Set the new head in the dsc.*/
 800d836:	6065      	str	r5, [r4, #4]
        if(ll_new_p->tail == NULL) { /*If there is no tail (first node) set the tail too*/
 800d838:	b9ab      	cbnz	r3, 800d866 <lv_ll_chg_list+0x62>
            ll_new_p->tail = node;
 800d83a:	60a5      	str	r5, [r4, #8]
 800d83c:	bd70      	pop	{r4, r5, r6, pc}
        node_set_prev(ll_new_p, node, ll_new_p->tail);
 800d83e:	68a2      	ldr	r2, [r4, #8]
 800d840:	4629      	mov	r1, r5
 800d842:	4620      	mov	r0, r4
 800d844:	f7ff ff19 	bl	800d67a <node_set_prev.isra.2>
        node_set_next(ll_new_p, node, NULL);
 800d848:	4629      	mov	r1, r5
 800d84a:	4632      	mov	r2, r6
 800d84c:	4620      	mov	r0, r4
 800d84e:	f7ff ff0b 	bl	800d668 <node_set_next.isra.0>
        if(ll_new_p->tail != NULL) { /*If there is old tail then after it goes the new*/
 800d852:	68a1      	ldr	r1, [r4, #8]
 800d854:	b119      	cbz	r1, 800d85e <lv_ll_chg_list+0x5a>
            node_set_next(ll_new_p, ll_new_p->tail, node);
 800d856:	462a      	mov	r2, r5
 800d858:	4620      	mov	r0, r4
 800d85a:	f7ff ff05 	bl	800d668 <node_set_next.isra.0>
        if(ll_new_p->head == NULL) { /*If there is no head (first node) set the head too*/
 800d85e:	6863      	ldr	r3, [r4, #4]
        ll_new_p->tail = node;       /*Set the new tail in the dsc.*/
 800d860:	60a5      	str	r5, [r4, #8]
        if(ll_new_p->head == NULL) { /*If there is no head (first node) set the head too*/
 800d862:	b903      	cbnz	r3, 800d866 <lv_ll_chg_list+0x62>
            ll_new_p->head = node;
 800d864:	6065      	str	r5, [r4, #4]
 800d866:	bd70      	pop	{r4, r5, r6, pc}

0800d868 <lv_ll_move_before>:
    if(n_act == n_after) return; /*Can't move before itself*/
 800d868:	4291      	cmp	r1, r2
{
 800d86a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d86c:	4605      	mov	r5, r0
 800d86e:	460c      	mov	r4, r1
 800d870:	4616      	mov	r6, r2
    if(n_act == n_after) return; /*Can't move before itself*/
 800d872:	d042      	beq.n	800d8fa <lv_ll_move_before+0x92>
    if(n_after != NULL)
 800d874:	b132      	cbz	r2, 800d884 <lv_ll_move_before+0x1c>
        n_before = lv_ll_get_prev(ll_p, n_after);
 800d876:	4611      	mov	r1, r2
 800d878:	f7ff ff56 	bl	800d728 <lv_ll_get_prev>
    if(n_act == n_before) return; /*Already before `n_after`*/
 800d87c:	4284      	cmp	r4, r0
        n_before = lv_ll_get_prev(ll_p, n_after);
 800d87e:	4607      	mov	r7, r0
    if(n_act == n_before) return; /*Already before `n_after`*/
 800d880:	d121      	bne.n	800d8c6 <lv_ll_move_before+0x5e>
 800d882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(ll_p != NULL) {
 800d884:	b100      	cbz	r0, 800d888 <lv_ll_move_before+0x20>
        tail = ll_p->tail;
 800d886:	6886      	ldr	r6, [r0, #8]
    if(n_act == n_before) return; /*Already before `n_after`*/
 800d888:	42b4      	cmp	r4, r6
 800d88a:	d100      	bne.n	800d88e <lv_ll_move_before+0x26>
 800d88c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_ll_rem(ll_p, n_act);
 800d88e:	4621      	mov	r1, r4
 800d890:	4628      	mov	r0, r5
 800d892:	f7ff ff7d 	bl	800d790 <lv_ll_rem>
    node_set_next(ll_p, n_before, n_act);
 800d896:	4622      	mov	r2, r4
 800d898:	4631      	mov	r1, r6
 800d89a:	4628      	mov	r0, r5
 800d89c:	f7ff fee4 	bl	800d668 <node_set_next.isra.0>
    node_set_prev(ll_p, n_act, n_before);
 800d8a0:	4632      	mov	r2, r6
 800d8a2:	4621      	mov	r1, r4
 800d8a4:	4628      	mov	r0, r5
 800d8a6:	f7ff fee8 	bl	800d67a <node_set_prev.isra.2>
    node_set_prev(ll_p, n_after, n_act);
 800d8aa:	4622      	mov	r2, r4
 800d8ac:	2100      	movs	r1, #0
 800d8ae:	4628      	mov	r0, r5
 800d8b0:	f7ff fee3 	bl	800d67a <node_set_prev.isra.2>
    node_set_next(ll_p, n_act, n_after);
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	4621      	mov	r1, r4
 800d8b8:	4628      	mov	r0, r5
 800d8ba:	f7ff fed5 	bl	800d668 <node_set_next.isra.0>
    if(n_after == NULL) ll_p->tail = n_act;
 800d8be:	60ac      	str	r4, [r5, #8]
    if(n_before == NULL) ll_p->head = n_act;
 800d8c0:	b9de      	cbnz	r6, 800d8fa <lv_ll_move_before+0x92>
 800d8c2:	606c      	str	r4, [r5, #4]
 800d8c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_ll_rem(ll_p, n_act);
 800d8c6:	4621      	mov	r1, r4
 800d8c8:	4628      	mov	r0, r5
 800d8ca:	f7ff ff61 	bl	800d790 <lv_ll_rem>
    node_set_next(ll_p, n_before, n_act);
 800d8ce:	4622      	mov	r2, r4
 800d8d0:	4639      	mov	r1, r7
 800d8d2:	4628      	mov	r0, r5
 800d8d4:	f7ff fec8 	bl	800d668 <node_set_next.isra.0>
    node_set_prev(ll_p, n_act, n_before);
 800d8d8:	463a      	mov	r2, r7
 800d8da:	4621      	mov	r1, r4
 800d8dc:	4628      	mov	r0, r5
 800d8de:	f7ff fecc 	bl	800d67a <node_set_prev.isra.2>
    node_set_prev(ll_p, n_after, n_act);
 800d8e2:	4631      	mov	r1, r6
 800d8e4:	4622      	mov	r2, r4
 800d8e6:	4628      	mov	r0, r5
 800d8e8:	f7ff fec7 	bl	800d67a <node_set_prev.isra.2>
    node_set_next(ll_p, n_act, n_after);
 800d8ec:	4632      	mov	r2, r6
 800d8ee:	4621      	mov	r1, r4
 800d8f0:	4628      	mov	r0, r5
 800d8f2:	f7ff feb9 	bl	800d668 <node_set_next.isra.0>
 800d8f6:	463e      	mov	r6, r7
 800d8f8:	e7e2      	b.n	800d8c0 <lv_ll_move_before+0x58>
 800d8fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d8fc <ent_get_next>:
 * Give the next entry after 'act_e'
 * @param act_e pointer to an entry
 * @return pointer to an entry after 'act_e'
 */
static lv_mem_ent_t * ent_get_next(lv_mem_ent_t * act_e)
{
 800d8fc:	4a07      	ldr	r2, [pc, #28]	; (800d91c <ent_get_next+0x20>)
    lv_mem_ent_t * next_e = NULL;

    if(act_e == NULL) { /*NULL means: get the first entry*/
 800d8fe:	b908      	cbnz	r0, 800d904 <ent_get_next+0x8>
        next_e = (lv_mem_ent_t *)work_mem;
 800d900:	6810      	ldr	r0, [r2, #0]
 800d902:	4770      	bx	lr
    } else { /*Get the next entry */
        uint8_t * data = &act_e->first_data;
 800d904:	1d03      	adds	r3, r0, #4
        next_e         = (lv_mem_ent_t *)&data[act_e->header.s.d_size];
 800d906:	6800      	ldr	r0, [r0, #0]
 800d908:	eb03 0050 	add.w	r0, r3, r0, lsr #1

        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 800d90c:	6813      	ldr	r3, [r2, #0]
 800d90e:	1d01      	adds	r1, r0, #4
 800d910:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d914:	4299      	cmp	r1, r3
 800d916:	bf28      	it	cs
 800d918:	2000      	movcs	r0, #0
    }

    return next_e;
}
 800d91a:	4770      	bx	lr
 800d91c:	20004354 	.word	0x20004354

0800d920 <ent_trunc>:
        size = size & (~0x7);
        size += 8;
    }
#else
    /*Round the size up to 4*/
    if(size & 0x3) {
 800d920:	078b      	lsls	r3, r1, #30
        size = size & (~0x3);
 800d922:	bf18      	it	ne
 800d924:	f021 0103 	bicne.w	r1, r1, #3
        size += 4;
    }
#endif

    /*Don't let empty space only for a header without data*/
    if(e->header.s.d_size == size + sizeof(lv_mem_header_t)) {
 800d928:	6803      	ldr	r3, [r0, #0]
        size += 4;
 800d92a:	bf18      	it	ne
 800d92c:	3104      	addne	r1, #4
    if(e->header.s.d_size == size + sizeof(lv_mem_header_t)) {
 800d92e:	f3c3 035e 	ubfx	r3, r3, #1, #31
 800d932:	1d0a      	adds	r2, r1, #4
 800d934:	4293      	cmp	r3, r2
{
 800d936:	b510      	push	{r4, lr}
    if(e->header.s.d_size == size + sizeof(lv_mem_header_t)) {
 800d938:	d011      	beq.n	800d95e <ent_trunc+0x3e>
        size = e->header.s.d_size;
    }

    /* Create the new entry after the current if there is space for it */
    if(e->header.s.d_size != size) {
 800d93a:	4299      	cmp	r1, r3
 800d93c:	d00a      	beq.n	800d954 <ent_trunc+0x34>
        uint8_t * e_data             = &e->first_data;
 800d93e:	1d02      	adds	r2, r0, #4
        lv_mem_ent_t * after_new_e   = (lv_mem_ent_t *)&e_data[size];
        after_new_e->header.s.used   = 0;
        after_new_e->header.s.d_size = e->header.s.d_size - size - sizeof(lv_mem_header_t);
 800d940:	3b04      	subs	r3, #4
        after_new_e->header.s.used   = 0;
 800d942:	5c54      	ldrb	r4, [r2, r1]
 800d944:	f36f 0400 	bfc	r4, #0, #1
 800d948:	5454      	strb	r4, [r2, r1]
        after_new_e->header.s.d_size = e->header.s.d_size - size - sizeof(lv_mem_header_t);
 800d94a:	5854      	ldr	r4, [r2, r1]
 800d94c:	1a5b      	subs	r3, r3, r1
 800d94e:	f363 045f 	bfi	r4, r3, #1, #31
 800d952:	5054      	str	r4, [r2, r1]
    }

    /* Set the new size for the original entry */
    e->header.s.d_size = size;
 800d954:	6803      	ldr	r3, [r0, #0]
 800d956:	f361 035f 	bfi	r3, r1, #1, #31
 800d95a:	6003      	str	r3, [r0, #0]
 800d95c:	bd10      	pop	{r4, pc}
 800d95e:	4619      	mov	r1, r3
 800d960:	e7f8      	b.n	800d954 <ent_trunc+0x34>
	...

0800d964 <lv_mem_init>:
    work_mem = (uint8_t *)work_mem_int;
 800d964:	4b06      	ldr	r3, [pc, #24]	; (800d980 <lv_mem_init+0x1c>)
 800d966:	4a07      	ldr	r2, [pc, #28]	; (800d984 <lv_mem_init+0x20>)
 800d968:	6013      	str	r3, [r2, #0]
    full->header.s.used = 0;
 800d96a:	781a      	ldrb	r2, [r3, #0]
 800d96c:	f36f 0200 	bfc	r2, #0, #1
 800d970:	701a      	strb	r2, [r3, #0]
    full->header.s.d_size = LV_MEM_SIZE - sizeof(lv_mem_header_t);
 800d972:	681a      	ldr	r2, [r3, #0]
 800d974:	f647 71fc 	movw	r1, #32764	; 0x7ffc
 800d978:	f361 025f 	bfi	r2, r1, #1, #31
 800d97c:	601a      	str	r2, [r3, #0]
 800d97e:	4770      	bx	lr
 800d980:	20004358 	.word	0x20004358
 800d984:	20004354 	.word	0x20004354

0800d988 <lv_mem_alloc>:
{
 800d988:	b538      	push	{r3, r4, r5, lr}
    if(size == 0) {
 800d98a:	4605      	mov	r5, r0
 800d98c:	b300      	cbz	r0, 800d9d0 <lv_mem_alloc+0x48>
    if(size & 0x3) {
 800d98e:	0782      	lsls	r2, r0, #30
        size = size & (~0x3);
 800d990:	bf1c      	itt	ne
 800d992:	f020 0503 	bicne.w	r5, r0, #3
        size += 4;
 800d996:	3504      	addne	r5, #4
    lv_mem_ent_t * e = NULL;
 800d998:	2400      	movs	r4, #0
        e = ent_get_next(e);
 800d99a:	4620      	mov	r0, r4
 800d99c:	f7ff ffae 	bl	800d8fc <ent_get_next>
        if(e != NULL) {
 800d9a0:	4604      	mov	r4, r0
 800d9a2:	b198      	cbz	r0, 800d9cc <lv_mem_alloc+0x44>
    if(e->header.s.used == 0 && e->header.s.d_size >= size) {
 800d9a4:	7803      	ldrb	r3, [r0, #0]
 800d9a6:	07db      	lsls	r3, r3, #31
 800d9a8:	d4f7      	bmi.n	800d99a <lv_mem_alloc+0x12>
 800d9aa:	6803      	ldr	r3, [r0, #0]
 800d9ac:	ebb5 0f53 	cmp.w	r5, r3, lsr #1
 800d9b0:	d8f3      	bhi.n	800d99a <lv_mem_alloc+0x12>
        ent_trunc(e, size),
 800d9b2:	4629      	mov	r1, r5
 800d9b4:	f7ff ffb4 	bl	800d920 <ent_trunc>
            e->header.s.used = 1;
 800d9b8:	7803      	ldrb	r3, [r0, #0]
 800d9ba:	f043 0301 	orr.w	r3, r3, #1
 800d9be:	f804 3b04 	strb.w	r3, [r4], #4
    if(alloc != NULL) memset(alloc, 0xaa, size);
 800d9c2:	462a      	mov	r2, r5
 800d9c4:	21aa      	movs	r1, #170	; 0xaa
 800d9c6:	4620      	mov	r0, r4
 800d9c8:	f001 fcbd 	bl	800f346 <memset>
}
 800d9cc:	4620      	mov	r0, r4
 800d9ce:	bd38      	pop	{r3, r4, r5, pc}
        return &zero_mem;
 800d9d0:	4c00      	ldr	r4, [pc, #0]	; (800d9d4 <lv_mem_alloc+0x4c>)
 800d9d2:	e7fb      	b.n	800d9cc <lv_mem_alloc+0x44>
 800d9d4:	2000c358 	.word	0x2000c358

0800d9d8 <lv_mem_get_size>:
    if(data == NULL) return 0;
 800d9d8:	b140      	cbz	r0, 800d9ec <lv_mem_get_size+0x14>
    if(data == &zero_mem) return 0;
 800d9da:	4b05      	ldr	r3, [pc, #20]	; (800d9f0 <lv_mem_get_size+0x18>)
 800d9dc:	4298      	cmp	r0, r3
 800d9de:	d004      	beq.n	800d9ea <lv_mem_get_size+0x12>
    return e->header.s.d_size;
 800d9e0:	f850 0c04 	ldr.w	r0, [r0, #-4]
 800d9e4:	f3c0 005e 	ubfx	r0, r0, #1, #31
 800d9e8:	4770      	bx	lr
    if(data == NULL) return 0;
 800d9ea:	2000      	movs	r0, #0
}
 800d9ec:	4770      	bx	lr
 800d9ee:	bf00      	nop
 800d9f0:	2000c358 	.word	0x2000c358

0800d9f4 <lv_mem_free>:
    if(data == &zero_mem) return;
 800d9f4:	4b13      	ldr	r3, [pc, #76]	; (800da44 <lv_mem_free+0x50>)
 800d9f6:	4298      	cmp	r0, r3
{
 800d9f8:	b510      	push	{r4, lr}
 800d9fa:	4604      	mov	r4, r0
    if(data == &zero_mem) return;
 800d9fc:	d011      	beq.n	800da22 <lv_mem_free+0x2e>
    if(data == NULL) return;
 800d9fe:	b180      	cbz	r0, 800da22 <lv_mem_free+0x2e>
    memset((void *)data, 0xbb, lv_mem_get_size(data));
 800da00:	f7ff ffea 	bl	800d9d8 <lv_mem_get_size>
 800da04:	21bb      	movs	r1, #187	; 0xbb
 800da06:	4602      	mov	r2, r0
 800da08:	4620      	mov	r0, r4
 800da0a:	f001 fc9c 	bl	800f346 <memset>
    e->header.s.used = 0;
 800da0e:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 800da12:	4620      	mov	r0, r4
 800da14:	f36f 0300 	bfc	r3, #0, #1
 800da18:	f800 3d04 	strb.w	r3, [r0, #-4]!
        e_next = ent_get_next(e_next);
 800da1c:	f7ff ff6e 	bl	800d8fc <ent_get_next>
    while(e_next != NULL) {
 800da20:	b900      	cbnz	r0, 800da24 <lv_mem_free+0x30>
 800da22:	bd10      	pop	{r4, pc}
        if(e_next->header.s.used == 0) {
 800da24:	7803      	ldrb	r3, [r0, #0]
 800da26:	07db      	lsls	r3, r3, #31
 800da28:	d4fb      	bmi.n	800da22 <lv_mem_free+0x2e>
            e->header.s.d_size += e_next->header.s.d_size + sizeof(e->header);
 800da2a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800da2e:	6801      	ldr	r1, [r0, #0]
 800da30:	f3c3 025e 	ubfx	r2, r3, #1, #31
 800da34:	3204      	adds	r2, #4
 800da36:	eb02 0251 	add.w	r2, r2, r1, lsr #1
 800da3a:	f362 035f 	bfi	r3, r2, #1, #31
 800da3e:	f844 3c04 	str.w	r3, [r4, #-4]
 800da42:	e7eb      	b.n	800da1c <lv_mem_free+0x28>
 800da44:	2000c358 	.word	0x2000c358

0800da48 <lv_mem_realloc>:
{
 800da48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da4a:	460d      	mov	r5, r1
    if(data_p != NULL) {
 800da4c:	4604      	mov	r4, r0
 800da4e:	b128      	cbz	r0, 800da5c <lv_mem_realloc+0x14>
        if(e->header.s.used == 0) {
 800da50:	f810 3c04 	ldrb.w	r3, [r0, #-4]
            data_p = NULL;
 800da54:	f013 0f01 	tst.w	r3, #1
 800da58:	bf08      	it	eq
 800da5a:	2400      	moveq	r4, #0
    uint32_t old_size = lv_mem_get_size(data_p);
 800da5c:	4620      	mov	r0, r4
 800da5e:	f7ff ffbb 	bl	800d9d8 <lv_mem_get_size>
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
 800da62:	42a8      	cmp	r0, r5
    uint32_t old_size = lv_mem_get_size(data_p);
 800da64:	4607      	mov	r7, r0
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
 800da66:	d004      	beq.n	800da72 <lv_mem_realloc+0x2a>
    if(new_size < old_size) {
 800da68:	d905      	bls.n	800da76 <lv_mem_realloc+0x2e>
        ent_trunc(e, new_size);
 800da6a:	4629      	mov	r1, r5
 800da6c:	1f20      	subs	r0, r4, #4
 800da6e:	f7ff ff57 	bl	800d920 <ent_trunc>
 800da72:	4626      	mov	r6, r4
 800da74:	e010      	b.n	800da98 <lv_mem_realloc+0x50>
    new_p = lv_mem_alloc(new_size);
 800da76:	4628      	mov	r0, r5
 800da78:	f7ff ff86 	bl	800d988 <lv_mem_alloc>
    if(new_p != NULL && data_p != NULL) {
 800da7c:	4606      	mov	r6, r0
 800da7e:	b158      	cbz	r0, 800da98 <lv_mem_realloc+0x50>
 800da80:	b154      	cbz	r4, 800da98 <lv_mem_realloc+0x50>
        if(old_size != 0) {
 800da82:	b14f      	cbz	r7, 800da98 <lv_mem_realloc+0x50>
            memcpy(new_p, data_p, LV_MATH_MIN(new_size, old_size));
 800da84:	42af      	cmp	r7, r5
 800da86:	463a      	mov	r2, r7
 800da88:	4621      	mov	r1, r4
 800da8a:	bf28      	it	cs
 800da8c:	462a      	movcs	r2, r5
 800da8e:	f001 fc4f 	bl	800f330 <memcpy>
            lv_mem_free(data_p);
 800da92:	4620      	mov	r0, r4
 800da94:	f7ff ffae 	bl	800d9f4 <lv_mem_free>
}
 800da98:	4630      	mov	r0, r6
 800da9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800da9c <lv_task_core_init>:

/**
 * Init the lv_task module
 */
void lv_task_core_init(void)
{
 800da9c:	b508      	push	{r3, lr}
    lv_ll_init(&LV_GC_ROOT(_lv_task_ll), sizeof(lv_task_t));
 800da9e:	2114      	movs	r1, #20
 800daa0:	4803      	ldr	r0, [pc, #12]	; (800dab0 <lv_task_core_init+0x14>)
 800daa2:	f7ff fdf0 	bl	800d686 <lv_ll_init>
 * Enable or disable the whole lv_task handling
 * @param en: true: lv_task handling is running, false: lv_task handling is suspended
 */
void lv_task_enable(bool en)
{
    lv_task_run = en;
 800daa6:	4b03      	ldr	r3, [pc, #12]	; (800dab4 <lv_task_core_init+0x18>)
 800daa8:	2201      	movs	r2, #1
 800daaa:	701a      	strb	r2, [r3, #0]
 800daac:	bd08      	pop	{r3, pc}
 800daae:	bf00      	nop
 800dab0:	2000d8dc 	.word	0x2000d8dc
 800dab4:	2000c36c 	.word	0x2000c36c

0800dab8 <lv_task_create_basic>:
{
 800dab8:	b538      	push	{r3, r4, r5, lr}
    tmp = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 800daba:	481c      	ldr	r0, [pc, #112]	; (800db2c <lv_task_create_basic+0x74>)
 800dabc:	f7ff fe29 	bl	800d712 <lv_ll_get_head>
    if(NULL == tmp) {
 800dac0:	4601      	mov	r1, r0
 800dac2:	b928      	cbnz	r0, 800dad0 <lv_task_create_basic+0x18>
        new_task = lv_ll_ins_head(&LV_GC_ROOT(_lv_task_ll));
 800dac4:	4819      	ldr	r0, [pc, #100]	; (800db2c <lv_task_create_basic+0x74>)
 800dac6:	f7ff fde8 	bl	800d69a <lv_ll_ins_head>
        lv_mem_assert(new_task);
 800daca:	4604      	mov	r4, r0
 800dacc:	b9b8      	cbnz	r0, 800dafe <lv_task_create_basic+0x46>
 800dace:	e7fe      	b.n	800dace <lv_task_create_basic+0x16>
            tmp = lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
 800dad0:	4c16      	ldr	r4, [pc, #88]	; (800db2c <lv_task_create_basic+0x74>)
            if(tmp->prio <= DEF_PRIO) {
 800dad2:	7c0b      	ldrb	r3, [r1, #16]
 800dad4:	f003 0307 	and.w	r3, r3, #7
 800dad8:	2b03      	cmp	r3, #3
 800dada:	dc05      	bgt.n	800dae8 <lv_task_create_basic+0x30>
                new_task = lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
 800dadc:	4813      	ldr	r0, [pc, #76]	; (800db2c <lv_task_create_basic+0x74>)
 800dade:	f7ff fe27 	bl	800d730 <lv_ll_ins_prev>
                lv_mem_assert(new_task);
 800dae2:	4604      	mov	r4, r0
 800dae4:	b958      	cbnz	r0, 800dafe <lv_task_create_basic+0x46>
 800dae6:	e7fe      	b.n	800dae6 <lv_task_create_basic+0x2e>
            tmp = lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
 800dae8:	4620      	mov	r0, r4
 800daea:	f7ff fe18 	bl	800d71e <lv_ll_get_next>
        } while(tmp != NULL);
 800daee:	4601      	mov	r1, r0
 800daf0:	2800      	cmp	r0, #0
 800daf2:	d1ee      	bne.n	800dad2 <lv_task_create_basic+0x1a>
            new_task = lv_ll_ins_tail(&LV_GC_ROOT(_lv_task_ll));
 800daf4:	480d      	ldr	r0, [pc, #52]	; (800db2c <lv_task_create_basic+0x74>)
 800daf6:	f7ff fdee 	bl	800d6d6 <lv_ll_ins_tail>
            lv_mem_assert(new_task);
 800dafa:	4604      	mov	r4, r0
 800dafc:	b1a0      	cbz	r0, 800db28 <lv_task_create_basic+0x70>
    new_task->period  = DEF_PERIOD;
 800dafe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800db02:	6023      	str	r3, [r4, #0]
    new_task->prio    = DEF_PRIO;
 800db04:	7c23      	ldrb	r3, [r4, #16]
 800db06:	2203      	movs	r2, #3
    new_task->task_cb = NULL;
 800db08:	2500      	movs	r5, #0
    new_task->prio    = DEF_PRIO;
 800db0a:	f362 0302 	bfi	r3, r2, #0, #3
    new_task->once     = 0;
 800db0e:	f365 03c3 	bfi	r3, r5, #3, #1
 800db12:	7423      	strb	r3, [r4, #16]
    new_task->task_cb = NULL;
 800db14:	60a5      	str	r5, [r4, #8]
    new_task->last_run = lv_tick_get();
 800db16:	f7ff fae5 	bl	800d0e4 <lv_tick_get>
    task_created = true;
 800db1a:	4b05      	ldr	r3, [pc, #20]	; (800db30 <lv_task_create_basic+0x78>)
    new_task->last_run = lv_tick_get();
 800db1c:	6060      	str	r0, [r4, #4]
    task_created = true;
 800db1e:	2201      	movs	r2, #1
    new_task->user_data = NULL;
 800db20:	60e5      	str	r5, [r4, #12]
    task_created = true;
 800db22:	701a      	strb	r2, [r3, #0]
}
 800db24:	4620      	mov	r0, r4
 800db26:	bd38      	pop	{r3, r4, r5, pc}
 800db28:	e7fe      	b.n	800db28 <lv_task_create_basic+0x70>
 800db2a:	bf00      	nop
 800db2c:	2000d8dc 	.word	0x2000d8dc
 800db30:	2000c36d 	.word	0x2000c36d

0800db34 <lv_task_del>:
{
 800db34:	b510      	push	{r4, lr}
    lv_ll_rem(&LV_GC_ROOT(_lv_task_ll), task);
 800db36:	4601      	mov	r1, r0
{
 800db38:	4604      	mov	r4, r0
    lv_ll_rem(&LV_GC_ROOT(_lv_task_ll), task);
 800db3a:	4807      	ldr	r0, [pc, #28]	; (800db58 <lv_task_del+0x24>)
 800db3c:	f7ff fe28 	bl	800d790 <lv_ll_rem>
    lv_mem_free(task);
 800db40:	4620      	mov	r0, r4
 800db42:	f7ff ff57 	bl	800d9f4 <lv_mem_free>
    if(LV_GC_ROOT(_lv_task_act) == task) task_deleted = true; /*The active task was deleted*/
 800db46:	4b05      	ldr	r3, [pc, #20]	; (800db5c <lv_task_del+0x28>)
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	429c      	cmp	r4, r3
 800db4c:	bf02      	ittt	eq
 800db4e:	4b04      	ldreq	r3, [pc, #16]	; (800db60 <lv_task_del+0x2c>)
 800db50:	2201      	moveq	r2, #1
 800db52:	701a      	strbeq	r2, [r3, #0]
 800db54:	bd10      	pop	{r4, pc}
 800db56:	bf00      	nop
 800db58:	2000d8dc 	.word	0x2000d8dc
 800db5c:	2000d91c 	.word	0x2000d91c
 800db60:	2000c36e 	.word	0x2000c36e

0800db64 <lv_task_exec>:
 * Execute task if its the priority is appropriate
 * @param task pointer to lv_task
 * @return true: execute, false: not executed
 */
static bool lv_task_exec(lv_task_t * task)
{
 800db64:	b538      	push	{r3, r4, r5, lr}
 800db66:	4604      	mov	r4, r0
    bool exec = false;

    /*Execute if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(task->last_run);
 800db68:	6840      	ldr	r0, [r0, #4]
 800db6a:	f7ff fac9 	bl	800d100 <lv_tick_elaps>
    if(elp >= task->period) {
 800db6e:	6823      	ldr	r3, [r4, #0]
 800db70:	4298      	cmp	r0, r3
 800db72:	d315      	bcc.n	800dba0 <lv_task_exec+0x3c>
        task->last_run = lv_tick_get();
 800db74:	f7ff fab6 	bl	800d0e4 <lv_tick_get>
        task_deleted   = false;
 800db78:	4d0a      	ldr	r5, [pc, #40]	; (800dba4 <lv_task_exec+0x40>)
        task_created   = false;
 800db7a:	490b      	ldr	r1, [pc, #44]	; (800dba8 <lv_task_exec+0x44>)
        task->last_run = lv_tick_get();
 800db7c:	6060      	str	r0, [r4, #4]
        task_deleted   = false;
 800db7e:	2200      	movs	r2, #0
 800db80:	702a      	strb	r2, [r5, #0]
        task_created   = false;
 800db82:	700a      	strb	r2, [r1, #0]
        if(task->task_cb) task->task_cb(task);
 800db84:	68a2      	ldr	r2, [r4, #8]
 800db86:	b10a      	cbz	r2, 800db8c <lv_task_exec+0x28>
 800db88:	4620      	mov	r0, r4
 800db8a:	4790      	blx	r2

        /*Delete if it was a one shot lv_task*/
        if(task_deleted == false) { /*The task might be deleted by itself as well*/
 800db8c:	7828      	ldrb	r0, [r5, #0]
 800db8e:	b930      	cbnz	r0, 800db9e <lv_task_exec+0x3a>
            if(task->once != 0) {
 800db90:	7c23      	ldrb	r3, [r4, #16]
 800db92:	071b      	lsls	r3, r3, #28
 800db94:	d502      	bpl.n	800db9c <lv_task_exec+0x38>
                lv_task_del(task);
 800db96:	4620      	mov	r0, r4
 800db98:	f7ff ffcc 	bl	800db34 <lv_task_del>
            }
        }
        exec = true;
 800db9c:	2001      	movs	r0, #1
    }

    return exec;
}
 800db9e:	bd38      	pop	{r3, r4, r5, pc}
    bool exec = false;
 800dba0:	2000      	movs	r0, #0
 800dba2:	bd38      	pop	{r3, r4, r5, pc}
 800dba4:	2000c36e 	.word	0x2000c36e
 800dba8:	2000c36d 	.word	0x2000c36d

0800dbac <lv_task_handler>:
{
 800dbac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(task_handler_mutex) return;
 800dbb0:	4d3a      	ldr	r5, [pc, #232]	; (800dc9c <lv_task_handler+0xf0>)
 800dbb2:	782c      	ldrb	r4, [r5, #0]
 800dbb4:	b934      	cbnz	r4, 800dbc4 <lv_task_handler+0x18>
    task_handler_mutex = true;
 800dbb6:	2301      	movs	r3, #1
 800dbb8:	702b      	strb	r3, [r5, #0]
    if(lv_task_run == false) {
 800dbba:	4b39      	ldr	r3, [pc, #228]	; (800dca0 <lv_task_handler+0xf4>)
 800dbbc:	781b      	ldrb	r3, [r3, #0]
 800dbbe:	b923      	cbnz	r3, 800dbca <lv_task_handler+0x1e>
        task_handler_mutex = false; /*Release mutex*/
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	702b      	strb	r3, [r5, #0]
}
 800dbc4:	b003      	add	sp, #12
 800dbc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    handler_start = lv_tick_get();
 800dbca:	f7ff fa8b 	bl	800d0e4 <lv_tick_get>
 800dbce:	4b35      	ldr	r3, [pc, #212]	; (800dca4 <lv_task_handler+0xf8>)
        task_deleted             = false;
 800dbd0:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 800dcc0 <lv_task_handler+0x114>
    handler_start = lv_tick_get();
 800dbd4:	6018      	str	r0, [r3, #0]
 800dbd6:	469b      	mov	fp, r3
        task_deleted             = false;
 800dbd8:	46a1      	mov	r9, r4
        task_created             = false;
 800dbda:	4e33      	ldr	r6, [pc, #204]	; (800dca8 <lv_task_handler+0xfc>)
        LV_GC_ROOT(_lv_task_act) = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 800dbdc:	4833      	ldr	r0, [pc, #204]	; (800dcac <lv_task_handler+0x100>)
        task_created             = false;
 800dbde:	f886 9000 	strb.w	r9, [r6]
        task_deleted             = false;
 800dbe2:	f888 9000 	strb.w	r9, [r8]
        LV_GC_ROOT(_lv_task_act) = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 800dbe6:	f7ff fd94 	bl	800d712 <lv_ll_get_head>
 800dbea:	4f31      	ldr	r7, [pc, #196]	; (800dcb0 <lv_task_handler+0x104>)
 800dbec:	9601      	str	r6, [sp, #4]
 800dbee:	6038      	str	r0, [r7, #0]
 800dbf0:	463e      	mov	r6, r7
        while(LV_GC_ROOT(_lv_task_act)) {
 800dbf2:	6831      	ldr	r1, [r6, #0]
 800dbf4:	bb29      	cbnz	r1, 800dc42 <lv_task_handler+0x96>
    busy_time += lv_tick_elaps(handler_start);
 800dbf6:	4c2f      	ldr	r4, [pc, #188]	; (800dcb4 <lv_task_handler+0x108>)
 800dbf8:	f8db 0000 	ldr.w	r0, [fp]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 800dbfc:	4e2e      	ldr	r6, [pc, #184]	; (800dcb8 <lv_task_handler+0x10c>)
    busy_time += lv_tick_elaps(handler_start);
 800dbfe:	f7ff fa7f 	bl	800d100 <lv_tick_elaps>
 800dc02:	6823      	ldr	r3, [r4, #0]
 800dc04:	4418      	add	r0, r3
 800dc06:	6020      	str	r0, [r4, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 800dc08:	6830      	ldr	r0, [r6, #0]
 800dc0a:	f7ff fa79 	bl	800d100 <lv_tick_elaps>
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
 800dc0e:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 800dc12:	d3d5      	bcc.n	800dbc0 <lv_task_handler+0x14>
        idle_last         = (uint32_t)((uint32_t)busy_time * 100) / IDLE_MEAS_PERIOD; /*Calculate the busy percentage*/
 800dc14:	6822      	ldr	r2, [r4, #0]
 800dc16:	2364      	movs	r3, #100	; 0x64
 800dc18:	4353      	muls	r3, r2
 800dc1a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800dc1e:	fbb3 f3f2 	udiv	r3, r3, r2
 800dc22:	b2db      	uxtb	r3, r3
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last;                    /*But we need idle time*/
 800dc24:	2b64      	cmp	r3, #100	; 0x64
 800dc26:	bf98      	it	ls
 800dc28:	f1c3 0364 	rsbls	r3, r3, #100	; 0x64
 800dc2c:	4a23      	ldr	r2, [pc, #140]	; (800dcbc <lv_task_handler+0x110>)
 800dc2e:	bf94      	ite	ls
 800dc30:	b2db      	uxtbls	r3, r3
 800dc32:	2300      	movhi	r3, #0
 800dc34:	7013      	strb	r3, [r2, #0]
        busy_time         = 0;
 800dc36:	2300      	movs	r3, #0
 800dc38:	6023      	str	r3, [r4, #0]
        idle_period_start = lv_tick_get();
 800dc3a:	f7ff fa53 	bl	800d0e4 <lv_tick_get>
 800dc3e:	6030      	str	r0, [r6, #0]
 800dc40:	e7be      	b.n	800dbc0 <lv_task_handler+0x14>
            next = lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), LV_GC_ROOT(_lv_task_act));
 800dc42:	481a      	ldr	r0, [pc, #104]	; (800dcac <lv_task_handler+0x100>)
 800dc44:	f7ff fd6b 	bl	800d71e <lv_ll_get_next>
 800dc48:	4682      	mov	sl, r0
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_OFF) {
 800dc4a:	6830      	ldr	r0, [r6, #0]
 800dc4c:	7c03      	ldrb	r3, [r0, #16]
 800dc4e:	f013 0207 	ands.w	r2, r3, #7
 800dc52:	d0d0      	beq.n	800dbf6 <lv_task_handler+0x4a>
            if(LV_GC_ROOT(_lv_task_act) == task_interrupter) {
 800dc54:	4284      	cmp	r4, r0
 800dc56:	d103      	bne.n	800dc60 <lv_task_handler+0xb4>
                LV_GC_ROOT(_lv_task_act) = next;
 800dc58:	f8c6 a000 	str.w	sl, [r6]
                task_interrupter = NULL; /*From this point only task after the interrupter comes, so
 800dc5c:	2400      	movs	r4, #0
                continue; /*Load the next task*/
 800dc5e:	e7c8      	b.n	800dbf2 <lv_task_handler+0x46>
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_HIGHEST) {
 800dc60:	2a05      	cmp	r2, #5
 800dc62:	d10c      	bne.n	800dc7e <lv_task_handler+0xd2>
                lv_task_exec(LV_GC_ROOT(_lv_task_act));
 800dc64:	f7ff ff7e 	bl	800db64 <lv_task_exec>
            if(task_deleted) break; /*If a task was deleted then this or the next item might be corrupted*/
 800dc68:	f898 3000 	ldrb.w	r3, [r8]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d1c2      	bne.n	800dbf6 <lv_task_handler+0x4a>
            if(task_created) break; /*If a task was created then this or the next item might be corrupted*/
 800dc70:	9b01      	ldr	r3, [sp, #4]
 800dc72:	781b      	ldrb	r3, [r3, #0]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d1be      	bne.n	800dbf6 <lv_task_handler+0x4a>
            LV_GC_ROOT(_lv_task_act) = next; /*Load the next task*/
 800dc78:	f8c6 a000 	str.w	sl, [r6]
 800dc7c:	e7b9      	b.n	800dbf2 <lv_task_handler+0x46>
            else if(task_interrupter) {
 800dc7e:	b134      	cbz	r4, 800dc8e <lv_task_handler+0xe2>
                if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio > task_interrupter->prio) {
 800dc80:	7c22      	ldrb	r2, [r4, #16]
 800dc82:	f003 0307 	and.w	r3, r3, #7
 800dc86:	f002 0207 	and.w	r2, r2, #7
 800dc8a:	4293      	cmp	r3, r2
 800dc8c:	ddec      	ble.n	800dc68 <lv_task_handler+0xbc>
                if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
 800dc8e:	f7ff ff69 	bl	800db64 <lv_task_exec>
 800dc92:	2800      	cmp	r0, #0
 800dc94:	d0e8      	beq.n	800dc68 <lv_task_handler+0xbc>
                    task_interrupter = LV_GC_ROOT(_lv_task_act); /*Check all tasks again from the highest priority */
 800dc96:	683c      	ldr	r4, [r7, #0]
                    break;
 800dc98:	e79f      	b.n	800dbda <lv_task_handler+0x2e>
 800dc9a:	bf00      	nop
 800dc9c:	2000c36f 	.word	0x2000c36f
 800dca0:	2000c36c 	.word	0x2000c36c
 800dca4:	2000c360 	.word	0x2000c360
 800dca8:	2000c36d 	.word	0x2000c36d
 800dcac:	2000d8dc 	.word	0x2000d8dc
 800dcb0:	2000d91c 	.word	0x2000d91c
 800dcb4:	2000c35c 	.word	0x2000c35c
 800dcb8:	2000c368 	.word	0x2000c368
 800dcbc:	2000c364 	.word	0x2000c364
 800dcc0:	2000c36e 	.word	0x2000c36e

0800dcc4 <lv_task_set_prio>:
    if(task->prio == prio) return;
 800dcc4:	7c03      	ldrb	r3, [r0, #16]
 800dcc6:	f003 0307 	and.w	r3, r3, #7
 800dcca:	428b      	cmp	r3, r1
{
 800dccc:	b570      	push	{r4, r5, r6, lr}
 800dcce:	4604      	mov	r4, r0
 800dcd0:	460d      	mov	r5, r1
    if(task->prio == prio) return;
 800dcd2:	d01b      	beq.n	800dd0c <lv_task_set_prio+0x48>
    LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i)
 800dcd4:	480e      	ldr	r0, [pc, #56]	; (800dd10 <lv_task_set_prio+0x4c>)
 800dcd6:	4e0e      	ldr	r6, [pc, #56]	; (800dd10 <lv_task_set_prio+0x4c>)
 800dcd8:	f7ff fd1b 	bl	800d712 <lv_ll_get_head>
 800dcdc:	4602      	mov	r2, r0
 800dcde:	b132      	cbz	r2, 800dcee <lv_task_set_prio+0x2a>
        if(i->prio <= prio) {
 800dce0:	7c13      	ldrb	r3, [r2, #16]
 800dce2:	f003 0307 	and.w	r3, r3, #7
 800dce6:	429d      	cmp	r5, r3
 800dce8:	db0a      	blt.n	800dd00 <lv_task_set_prio+0x3c>
            if(i != task) lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, i);
 800dcea:	42a2      	cmp	r2, r4
 800dcec:	d003      	beq.n	800dcf6 <lv_task_set_prio+0x32>
        lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, NULL);
 800dcee:	4621      	mov	r1, r4
 800dcf0:	4807      	ldr	r0, [pc, #28]	; (800dd10 <lv_task_set_prio+0x4c>)
 800dcf2:	f7ff fdb9 	bl	800d868 <lv_ll_move_before>
    task->prio = prio;
 800dcf6:	7c23      	ldrb	r3, [r4, #16]
 800dcf8:	f365 0302 	bfi	r3, r5, #0, #3
 800dcfc:	7423      	strb	r3, [r4, #16]
 800dcfe:	bd70      	pop	{r4, r5, r6, pc}
    LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i)
 800dd00:	4611      	mov	r1, r2
 800dd02:	4630      	mov	r0, r6
 800dd04:	f7ff fd0b 	bl	800d71e <lv_ll_get_next>
 800dd08:	4602      	mov	r2, r0
 800dd0a:	e7e8      	b.n	800dcde <lv_task_set_prio+0x1a>
 800dd0c:	bd70      	pop	{r4, r5, r6, pc}
 800dd0e:	bf00      	nop
 800dd10:	2000d8dc 	.word	0x2000d8dc

0800dd14 <lv_task_create>:
{
 800dd14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd18:	4680      	mov	r8, r0
 800dd1a:	460f      	mov	r7, r1
 800dd1c:	4616      	mov	r6, r2
 800dd1e:	461d      	mov	r5, r3
    lv_task_t * new_task = lv_task_create_basic();
 800dd20:	f7ff feca 	bl	800dab8 <lv_task_create_basic>
    lv_mem_assert(new_task);
 800dd24:	4604      	mov	r4, r0
 800dd26:	b900      	cbnz	r0, 800dd2a <lv_task_create+0x16>
 800dd28:	e7fe      	b.n	800dd28 <lv_task_create+0x14>
    task->task_cb = task_cb;
 800dd2a:	f8c0 8008 	str.w	r8, [r0, #8]
    task->period = period;
 800dd2e:	6007      	str	r7, [r0, #0]
    lv_task_set_prio(new_task, prio);
 800dd30:	4631      	mov	r1, r6
 800dd32:	f7ff ffc7 	bl	800dcc4 <lv_task_set_prio>
    new_task->user_data = user_data;
 800dd36:	60e5      	str	r5, [r4, #12]
}
 800dd38:	4620      	mov	r0, r4
 800dd3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dd3e <lv_task_ready>:
{
 800dd3e:	b510      	push	{r4, lr}
 800dd40:	4604      	mov	r4, r0
    task->last_run = lv_tick_get() - task->period - 1;
 800dd42:	f7ff f9cf 	bl	800d0e4 <lv_tick_get>
 800dd46:	6823      	ldr	r3, [r4, #0]
 800dd48:	43db      	mvns	r3, r3
 800dd4a:	4403      	add	r3, r0
 800dd4c:	6063      	str	r3, [r4, #4]
 800dd4e:	bd10      	pop	{r4, pc}

0800dd50 <lv_txt_utf8_size>:
 * @param str pointer to a character in a string
 * @return length of the UTF-8 character (1,2,3 or 4). O on invalid code
 */
static uint8_t lv_txt_utf8_size(const char * str)
{
    if((str[0] & 0x80) == 0)
 800dd50:	7803      	ldrb	r3, [r0, #0]
 800dd52:	061a      	lsls	r2, r3, #24
 800dd54:	d50e      	bpl.n	800dd74 <lv_txt_utf8_size+0x24>
        return 1;
    else if((str[0] & 0xE0) == 0xC0)
 800dd56:	f003 02e0 	and.w	r2, r3, #224	; 0xe0
 800dd5a:	2ac0      	cmp	r2, #192	; 0xc0
 800dd5c:	d00c      	beq.n	800dd78 <lv_txt_utf8_size+0x28>
        return 2;
    else if((str[0] & 0xF0) == 0xE0)
 800dd5e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800dd62:	2ae0      	cmp	r2, #224	; 0xe0
 800dd64:	d00a      	beq.n	800dd7c <lv_txt_utf8_size+0x2c>
        return 3;
    else if((str[0] & 0xF8) == 0xF0)
 800dd66:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 800dd6a:	2bf0      	cmp	r3, #240	; 0xf0
        return 4;
 800dd6c:	bf14      	ite	ne
 800dd6e:	2001      	movne	r0, #1
 800dd70:	2004      	moveq	r0, #4
 800dd72:	4770      	bx	lr
    return 1; /*If the char was invalid step tell it's 1 byte long*/
 800dd74:	2001      	movs	r0, #1
 800dd76:	4770      	bx	lr
        return 2;
 800dd78:	2002      	movs	r0, #2
 800dd7a:	4770      	bx	lr
        return 3;
 800dd7c:	2003      	movs	r0, #3
}
 800dd7e:	4770      	bx	lr

0800dd80 <lv_txt_utf8_next>:
 *          After call it will point to the next UTF-8 char in 'txt'.
 *          NULL to use txt[0] as index
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_next(const char * txt, uint32_t * i)
{
 800dd80:	b573      	push	{r0, r1, r4, r5, r6, lr}
     * */

    uint32_t result = 0;

    /*Dummy 'i' pointer is required*/
    uint32_t i_tmp = 0;
 800dd82:	2300      	movs	r3, #0
 800dd84:	9301      	str	r3, [sp, #4]
    if(i == NULL) i = &i_tmp;
 800dd86:	b901      	cbnz	r1, 800dd8a <lv_txt_utf8_next+0xa>
 800dd88:	a901      	add	r1, sp, #4

    /*Normal ASCII*/
    if((txt[*i] & 0x80) == 0) {
 800dd8a:	680a      	ldr	r2, [r1, #0]
 800dd8c:	5c83      	ldrb	r3, [r0, r2]
 800dd8e:	f013 0f80 	tst.w	r3, #128	; 0x80
 800dd92:	f102 0401 	add.w	r4, r2, #1
 800dd96:	d103      	bne.n	800dda0 <lv_txt_utf8_next+0x20>
        result = txt[*i];
 800dd98:	4618      	mov	r0, r3
        (*i)++;
 800dd9a:	600c      	str	r4, [r1, #0]
        } else {
            (*i)++; /*Not UTF-8 char. Go the next.*/
        }
    }
    return result;
}
 800dd9c:	b002      	add	sp, #8
 800dd9e:	bd70      	pop	{r4, r5, r6, pc}
        if((txt[*i] & 0xE0) == 0xC0) {
 800dda0:	f003 05e0 	and.w	r5, r3, #224	; 0xe0
 800dda4:	2dc0      	cmp	r5, #192	; 0xc0
 800dda6:	d110      	bne.n	800ddca <lv_txt_utf8_next+0x4a>
            (*i)++;
 800dda8:	600c      	str	r4, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 800ddaa:	5d00      	ldrb	r0, [r0, r4]
 800ddac:	f000 04c0 	and.w	r4, r0, #192	; 0xc0
 800ddb0:	2c80      	cmp	r4, #128	; 0x80
 800ddb2:	d001      	beq.n	800ddb8 <lv_txt_utf8_next+0x38>
    uint32_t result = 0;
 800ddb4:	2000      	movs	r0, #0
 800ddb6:	e7f1      	b.n	800dd9c <lv_txt_utf8_next+0x1c>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
 800ddb8:	019b      	lsls	r3, r3, #6
 800ddba:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
            result += (txt[*i] & 0x3F);
 800ddbe:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800ddc2:	4418      	add	r0, r3
            (*i)++;
 800ddc4:	3202      	adds	r2, #2
            (*i)++;
 800ddc6:	600a      	str	r2, [r1, #0]
 800ddc8:	e7e8      	b.n	800dd9c <lv_txt_utf8_next+0x1c>
        else if((txt[*i] & 0xF0) == 0xE0) {
 800ddca:	f003 05f0 	and.w	r5, r3, #240	; 0xf0
 800ddce:	2de0      	cmp	r5, #224	; 0xe0
 800ddd0:	d117      	bne.n	800de02 <lv_txt_utf8_next+0x82>
            (*i)++;
 800ddd2:	600c      	str	r4, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 800ddd4:	5d04      	ldrb	r4, [r0, r4]
 800ddd6:	f004 05c0 	and.w	r5, r4, #192	; 0xc0
 800ddda:	2d80      	cmp	r5, #128	; 0x80
 800dddc:	d1ea      	bne.n	800ddb4 <lv_txt_utf8_next+0x34>
            (*i)++;
 800ddde:	1c95      	adds	r5, r2, #2
 800dde0:	600d      	str	r5, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 800dde2:	5d45      	ldrb	r5, [r0, r5]
 800dde4:	f005 00c0 	and.w	r0, r5, #192	; 0xc0
 800dde8:	2880      	cmp	r0, #128	; 0x80
 800ddea:	d1e3      	bne.n	800ddb4 <lv_txt_utf8_next+0x34>
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
 800ddec:	0318      	lsls	r0, r3, #12
 800ddee:	b280      	uxth	r0, r0
            result += (txt[*i] & 0x3F);
 800ddf0:	f005 053f 	and.w	r5, r5, #63	; 0x3f
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 800ddf4:	01a3      	lsls	r3, r4, #6
 800ddf6:	4428      	add	r0, r5
 800ddf8:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
            result += (txt[*i] & 0x3F);
 800ddfc:	4418      	add	r0, r3
            (*i)++;
 800ddfe:	3203      	adds	r2, #3
 800de00:	e7e1      	b.n	800ddc6 <lv_txt_utf8_next+0x46>
        else if((txt[*i] & 0xF8) == 0xF0) {
 800de02:	f003 05f8 	and.w	r5, r3, #248	; 0xf8
 800de06:	2df0      	cmp	r5, #240	; 0xf0
            (*i)++;
 800de08:	600c      	str	r4, [r1, #0]
        else if((txt[*i] & 0xF8) == 0xF0) {
 800de0a:	d1d3      	bne.n	800ddb4 <lv_txt_utf8_next+0x34>
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 800de0c:	5d04      	ldrb	r4, [r0, r4]
 800de0e:	f004 05c0 	and.w	r5, r4, #192	; 0xc0
 800de12:	2d80      	cmp	r5, #128	; 0x80
 800de14:	d1ce      	bne.n	800ddb4 <lv_txt_utf8_next+0x34>
            (*i)++;
 800de16:	1c95      	adds	r5, r2, #2
 800de18:	600d      	str	r5, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 800de1a:	5d45      	ldrb	r5, [r0, r5]
 800de1c:	f005 06c0 	and.w	r6, r5, #192	; 0xc0
 800de20:	2e80      	cmp	r6, #128	; 0x80
 800de22:	d1c7      	bne.n	800ddb4 <lv_txt_utf8_next+0x34>
            (*i)++;
 800de24:	1cd6      	adds	r6, r2, #3
 800de26:	600e      	str	r6, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 800de28:	5d86      	ldrb	r6, [r0, r6]
 800de2a:	f006 00c0 	and.w	r0, r6, #192	; 0xc0
 800de2e:	2880      	cmp	r0, #128	; 0x80
 800de30:	d1c0      	bne.n	800ddb4 <lv_txt_utf8_next+0x34>
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 800de32:	049b      	lsls	r3, r3, #18
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 800de34:	0320      	lsls	r0, r4, #12
 800de36:	f400 307c 	and.w	r0, r0, #258048	; 0x3f000
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 800de3a:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 800de3e:	4303      	orrs	r3, r0
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 800de40:	01a8      	lsls	r0, r5, #6
 800de42:	f400 607c 	and.w	r0, r0, #4032	; 0xfc0
            result += txt[*i] & 0x3F;
 800de46:	f006 063f 	and.w	r6, r6, #63	; 0x3f
 800de4a:	4430      	add	r0, r6
 800de4c:	4418      	add	r0, r3
            (*i)++;
 800de4e:	3204      	adds	r2, #4
 800de50:	e7b9      	b.n	800ddc6 <lv_txt_utf8_next+0x46>
	...

0800de54 <lv_txt_utf8_get_byte_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param utf8_id character index
 * @return byte index of the 'utf8_id'th letter
 */
static uint32_t lv_txt_utf8_get_byte_id(const char * txt, uint32_t utf8_id)
{
 800de54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t i;
    uint32_t byte_cnt = 0;
 800de58:	2400      	movs	r4, #0
    for(i = 0; i < utf8_id; i++) {
        byte_cnt += lv_txt_encoded_size(&txt[byte_cnt]);
 800de5a:	f8df 8020 	ldr.w	r8, [pc, #32]	; 800de7c <lv_txt_utf8_get_byte_id+0x28>
{
 800de5e:	4607      	mov	r7, r0
 800de60:	460e      	mov	r6, r1
    for(i = 0; i < utf8_id; i++) {
 800de62:	4625      	mov	r5, r4
 800de64:	42b5      	cmp	r5, r6
 800de66:	d102      	bne.n	800de6e <lv_txt_utf8_get_byte_id+0x1a>
    }

    return byte_cnt;
}
 800de68:	4620      	mov	r0, r4
 800de6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        byte_cnt += lv_txt_encoded_size(&txt[byte_cnt]);
 800de6e:	1938      	adds	r0, r7, r4
 800de70:	f8d8 3000 	ldr.w	r3, [r8]
 800de74:	4798      	blx	r3
    for(i = 0; i < utf8_id; i++) {
 800de76:	3501      	adds	r5, #1
        byte_cnt += lv_txt_encoded_size(&txt[byte_cnt]);
 800de78:	4404      	add	r4, r0
 800de7a:	e7f3      	b.n	800de64 <lv_txt_utf8_get_byte_id+0x10>
 800de7c:	20000d28 	.word	0x20000d28

0800de80 <lv_txt_utf8_get_char_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
 800de80:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint32_t i        = 0;
 800de84:	ad02      	add	r5, sp, #8
 800de86:	2400      	movs	r4, #0
 800de88:	f845 4d04 	str.w	r4, [r5, #-4]!
    uint32_t char_cnt = 0;

    while(i < byte_id) {
        lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 800de8c:	f8df 8020 	ldr.w	r8, [pc, #32]	; 800deb0 <lv_txt_utf8_get_char_id+0x30>
{
 800de90:	4607      	mov	r7, r0
 800de92:	460e      	mov	r6, r1
    while(i < byte_id) {
 800de94:	9b01      	ldr	r3, [sp, #4]
 800de96:	42b3      	cmp	r3, r6
 800de98:	d303      	bcc.n	800dea2 <lv_txt_utf8_get_char_id+0x22>
        char_cnt++;
    }

    return char_cnt;
}
 800de9a:	4620      	mov	r0, r4
 800de9c:	b002      	add	sp, #8
 800de9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 800dea2:	4629      	mov	r1, r5
 800dea4:	4638      	mov	r0, r7
 800dea6:	f8d8 3000 	ldr.w	r3, [r8]
 800deaa:	4798      	blx	r3
        char_cnt++;
 800deac:	3401      	adds	r4, #1
 800deae:	e7f1      	b.n	800de94 <lv_txt_utf8_get_char_id+0x14>
 800deb0:	20000d20 	.word	0x20000d20

0800deb4 <lv_txt_utf8_get_length>:
 * E.g.: "ÁBC" is 3 characters (but 4 bytes)
 * @param txt a '\0' terminated char string
 * @return number of characters
 */
static uint32_t lv_txt_utf8_get_length(const char * txt)
{
 800deb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint32_t len = 0;
    uint32_t i   = 0;
 800deb6:	ad02      	add	r5, sp, #8
 800deb8:	2400      	movs	r4, #0
 800deba:	f845 4d04 	str.w	r4, [r5, #-4]!

    while(txt[i] != '\0') {
        lv_txt_encoded_next(txt, &i);
 800debe:	4f07      	ldr	r7, [pc, #28]	; (800dedc <lv_txt_utf8_get_length+0x28>)
{
 800dec0:	4606      	mov	r6, r0
    while(txt[i] != '\0') {
 800dec2:	9b01      	ldr	r3, [sp, #4]
 800dec4:	5cf3      	ldrb	r3, [r6, r3]
 800dec6:	b913      	cbnz	r3, 800dece <lv_txt_utf8_get_length+0x1a>
        len++;
    }

    return len;
}
 800dec8:	4620      	mov	r0, r4
 800deca:	b003      	add	sp, #12
 800decc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_txt_encoded_next(txt, &i);
 800dece:	4629      	mov	r1, r5
 800ded0:	4630      	mov	r0, r6
 800ded2:	683b      	ldr	r3, [r7, #0]
 800ded4:	4798      	blx	r3
        len++;
 800ded6:	3401      	adds	r4, #1
 800ded8:	e7f3      	b.n	800dec2 <lv_txt_utf8_get_length+0xe>
 800deda:	bf00      	nop
 800dedc:	20000d20 	.word	0x20000d20

0800dee0 <lv_txt_utf8_prev>:
    (*i)--;
 800dee0:	680b      	ldr	r3, [r1, #0]
{
 800dee2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    (*i)--;
 800dee4:	3b01      	subs	r3, #1
        c_size = lv_txt_encoded_size(&txt[*i]);
 800dee6:	4f0e      	ldr	r7, [pc, #56]	; (800df20 <lv_txt_utf8_prev+0x40>)
    (*i)--;
 800dee8:	600b      	str	r3, [r1, #0]
{
 800deea:	4606      	mov	r6, r0
 800deec:	460d      	mov	r5, r1
    (*i)--;
 800deee:	2404      	movs	r4, #4
        c_size = lv_txt_encoded_size(&txt[*i]);
 800def0:	6828      	ldr	r0, [r5, #0]
 800def2:	683b      	ldr	r3, [r7, #0]
 800def4:	4430      	add	r0, r6
 800def6:	4798      	blx	r3
 800def8:	682b      	ldr	r3, [r5, #0]
        if(c_size == 0) {
 800defa:	b948      	cbnz	r0, 800df10 <lv_txt_utf8_prev+0x30>
            if(*i != 0)
 800defc:	b12b      	cbz	r3, 800df0a <lv_txt_utf8_prev+0x2a>
 800defe:	3c01      	subs	r4, #1
                (*i)--;
 800df00:	3b01      	subs	r3, #1
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
 800df02:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
                (*i)--;
 800df06:	602b      	str	r3, [r5, #0]
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
 800df08:	d1f2      	bne.n	800def0 <lv_txt_utf8_prev+0x10>
 800df0a:	2000      	movs	r0, #0
}
 800df0c:	b003      	add	sp, #12
 800df0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t i_tmp  = *i;
 800df10:	a902      	add	r1, sp, #8
    uint32_t letter = lv_txt_encoded_next(txt, &i_tmp); /*Character found, get it*/
 800df12:	4630      	mov	r0, r6
    uint32_t i_tmp  = *i;
 800df14:	f841 3d04 	str.w	r3, [r1, #-4]!
    uint32_t letter = lv_txt_encoded_next(txt, &i_tmp); /*Character found, get it*/
 800df18:	4b02      	ldr	r3, [pc, #8]	; (800df24 <lv_txt_utf8_prev+0x44>)
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	4798      	blx	r3
 800df1e:	e7f5      	b.n	800df0c <lv_txt_utf8_prev+0x2c>
 800df20:	20000d28 	.word	0x20000d28
 800df24:	20000d20 	.word	0x20000d20

0800df28 <lv_txt_is_cmd>:
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 800df28:	2923      	cmp	r1, #35	; 0x23
{
 800df2a:	4602      	mov	r2, r0
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 800df2c:	d117      	bne.n	800df5e <lv_txt_is_cmd+0x36>
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
 800df2e:	7803      	ldrb	r3, [r0, #0]
 800df30:	b91b      	cbnz	r3, 800df3a <lv_txt_is_cmd+0x12>
            *state = LV_TXT_CMD_STATE_PAR;
 800df32:	2301      	movs	r3, #1
 800df34:	7003      	strb	r3, [r0, #0]
            ret    = true;
 800df36:	2001      	movs	r0, #1
 800df38:	e004      	b.n	800df44 <lv_txt_is_cmd+0x1c>
        else if(*state == LV_TXT_CMD_STATE_PAR) {
 800df3a:	2b01      	cmp	r3, #1
 800df3c:	f04f 0000 	mov.w	r0, #0
 800df40:	d109      	bne.n	800df56 <lv_txt_is_cmd+0x2e>
            *state = LV_TXT_CMD_STATE_WAIT;
 800df42:	7010      	strb	r0, [r2, #0]
    if(*state == LV_TXT_CMD_STATE_PAR) {
 800df44:	7813      	ldrb	r3, [r2, #0]
 800df46:	2b01      	cmp	r3, #1
 800df48:	d104      	bne.n	800df54 <lv_txt_is_cmd+0x2c>
        if(c == ' ') {
 800df4a:	2920      	cmp	r1, #32
            *state = LV_TXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
 800df4c:	bf04      	itt	eq
 800df4e:	2102      	moveq	r1, #2
 800df50:	7011      	strbeq	r1, [r2, #0]
        ret = true;
 800df52:	4618      	mov	r0, r3
}
 800df54:	4770      	bx	lr
        else if(*state == LV_TXT_CMD_STATE_IN) {
 800df56:	2b02      	cmp	r3, #2
 800df58:	d1f4      	bne.n	800df44 <lv_txt_is_cmd+0x1c>
            *state = LV_TXT_CMD_STATE_WAIT;
 800df5a:	7010      	strb	r0, [r2, #0]
 800df5c:	e7eb      	b.n	800df36 <lv_txt_is_cmd+0xe>
    bool ret = false;
 800df5e:	2000      	movs	r0, #0
 800df60:	e7f0      	b.n	800df44 <lv_txt_is_cmd+0x1c>
	...

0800df64 <lv_txt_get_next_line>:
{
 800df64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df68:	b087      	sub	sp, #28
 800df6a:	460c      	mov	r4, r1
 800df6c:	9200      	str	r2, [sp, #0]
 800df6e:	469a      	mov	sl, r3
 800df70:	f89d b040 	ldrb.w	fp, [sp, #64]	; 0x40
    if(txt == NULL) return 0;
 800df74:	4607      	mov	r7, r0
 800df76:	2800      	cmp	r0, #0
 800df78:	d072      	beq.n	800e060 <lv_txt_get_next_line+0xfc>
    if(font == NULL) return 0;
 800df7a:	2900      	cmp	r1, #0
 800df7c:	d071      	beq.n	800e062 <lv_txt_get_next_line+0xfe>
    letter_next = lv_txt_encoded_next(txt, &i_next);
 800df7e:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 800e070 <lv_txt_get_next_line+0x10c>
    uint32_t i                   = 0;
 800df82:	2500      	movs	r5, #0
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 800df84:	f01b 0f02 	tst.w	fp, #2
 800df88:	f647 4218 	movw	r2, #31768	; 0x7c18
 800df8c:	bf18      	it	ne
 800df8e:	4692      	movne	sl, r2
    uint32_t i                   = 0;
 800df90:	9504      	str	r5, [sp, #16]
    uint32_t i_next              = 0;
 800df92:	9505      	str	r5, [sp, #20]
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 800df94:	f88d 500f 	strb.w	r5, [sp, #15]
    letter_next = lv_txt_encoded_next(txt, &i_next);
 800df98:	f8d8 2000 	ldr.w	r2, [r8]
 800df9c:	a905      	add	r1, sp, #20
 800df9e:	4790      	blx	r2
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800dfa0:	f00b 0301 	and.w	r3, fp, #1
    letter_next = lv_txt_encoded_next(txt, &i_next);
 800dfa4:	4606      	mov	r6, r0
    uint32_t last_break          = NO_BREAK_FOUND;
 800dfa6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800dfaa:	9301      	str	r3, [sp, #4]
    while(txt[i] != '\0') {
 800dfac:	9804      	ldr	r0, [sp, #16]
 800dfae:	5c3b      	ldrb	r3, [r7, r0]
 800dfb0:	b90b      	cbnz	r3, 800dfb6 <lv_txt_get_next_line+0x52>
    return i;
 800dfb2:	b280      	uxth	r0, r0
 800dfb4:	e01e      	b.n	800dff4 <lv_txt_get_next_line+0x90>
        i           = i_next;
 800dfb6:	9b05      	ldr	r3, [sp, #20]
 800dfb8:	9304      	str	r3, [sp, #16]
        letter_next = lv_txt_encoded_next(txt, &i_next);
 800dfba:	a905      	add	r1, sp, #20
 800dfbc:	f8d8 3000 	ldr.w	r3, [r8]
 800dfc0:	4638      	mov	r0, r7
 800dfc2:	4798      	blx	r3
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800dfc4:	9b01      	ldr	r3, [sp, #4]
        letter_next = lv_txt_encoded_next(txt, &i_next);
 800dfc6:	4683      	mov	fp, r0
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800dfc8:	b923      	cbnz	r3, 800dfd4 <lv_txt_get_next_line+0x70>
        if(letter == '\n' || letter == '\r') {
 800dfca:	2e0a      	cmp	r6, #10
 800dfcc:	d10b      	bne.n	800dfe6 <lv_txt_get_next_line+0x82>
                return i;
 800dfce:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 800dfd2:	e00f      	b.n	800dff4 <lv_txt_get_next_line+0x90>
            if(lv_txt_is_cmd(&cmd_state, letter) != false) {
 800dfd4:	4631      	mov	r1, r6
 800dfd6:	f10d 000f 	add.w	r0, sp, #15
 800dfda:	f7ff ffa5 	bl	800df28 <lv_txt_is_cmd>
 800dfde:	2800      	cmp	r0, #0
 800dfe0:	d0f3      	beq.n	800dfca <lv_txt_get_next_line+0x66>
        letter_next = lv_txt_encoded_next(txt, &i_next);
 800dfe2:	465e      	mov	r6, fp
 800dfe4:	e7e2      	b.n	800dfac <lv_txt_get_next_line+0x48>
        if(letter == '\n' || letter == '\r') {
 800dfe6:	2e0d      	cmp	r6, #13
 800dfe8:	d107      	bne.n	800dffa <lv_txt_get_next_line+0x96>
            if(letter == '\r' && letter_next == '\n')
 800dfea:	f1bb 0f0a 	cmp.w	fp, #10
 800dfee:	d1ee      	bne.n	800dfce <lv_txt_get_next_line+0x6a>
                return i_next;
 800dff0:	f8bd 0014 	ldrh.w	r0, [sp, #20]
}
 800dff4:	b007      	add	sp, #28
 800dff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 800dffa:	465a      	mov	r2, fp
 800dffc:	4631      	mov	r1, r6
 800dffe:	4620      	mov	r0, r4
 800e000:	f7fe fe60 	bl	800ccc4 <lv_font_get_glyph_width>
            cur_w += letter_w;
 800e004:	4405      	add	r5, r0
 800e006:	b2aa      	uxth	r2, r5
 800e008:	b215      	sxth	r5, r2
            if(cur_w > max_width) {
 800e00a:	45aa      	cmp	sl, r5
 800e00c:	da1a      	bge.n	800e044 <lv_txt_get_next_line+0xe0>
                if(last_break != NO_BREAK_FOUND) {
 800e00e:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 800e012:	d00a      	beq.n	800e02a <lv_txt_get_next_line+0xc6>
                    i = last_break;
 800e014:	f8cd 9010 	str.w	r9, [sp, #16]
                if(i == 0) lv_txt_encoded_next(txt, &i);
 800e018:	9b04      	ldr	r3, [sp, #16]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d1d7      	bne.n	800dfce <lv_txt_get_next_line+0x6a>
 800e01e:	f8d8 3000 	ldr.w	r3, [r8]
 800e022:	a904      	add	r1, sp, #16
 800e024:	4638      	mov	r0, r7
 800e026:	4798      	blx	r3
 800e028:	e7d1      	b.n	800dfce <lv_txt_get_next_line+0x6a>
                    lv_txt_encoded_prev(txt, &i);
 800e02a:	4b0f      	ldr	r3, [pc, #60]	; (800e068 <lv_txt_get_next_line+0x104>)
 800e02c:	a904      	add	r1, sp, #16
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	4638      	mov	r0, r7
 800e032:	4798      	blx	r3
 800e034:	e7f0      	b.n	800e018 <lv_txt_get_next_line+0xb4>
    uint8_t i;
    bool ret = false;

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 800e036:	429e      	cmp	r6, r3
 800e038:	f101 0101 	add.w	r1, r1, #1
 800e03c:	d103      	bne.n	800e046 <lv_txt_get_next_line+0xe2>
                last_break = i; /*Save the first char index after break*/
 800e03e:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800e042:	e007      	b.n	800e054 <lv_txt_get_next_line+0xf0>
 800e044:	2100      	movs	r1, #0
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 800e046:	fa5f fe81 	uxtb.w	lr, r1
 800e04a:	4b08      	ldr	r3, [pc, #32]	; (800e06c <lv_txt_get_next_line+0x108>)
 800e04c:	f813 300e 	ldrb.w	r3, [r3, lr]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d1f0      	bne.n	800e036 <lv_txt_get_next_line+0xd2>
        if(letter_w > 0) {
 800e054:	2800      	cmp	r0, #0
 800e056:	d0c4      	beq.n	800dfe2 <lv_txt_get_next_line+0x7e>
            cur_w += letter_space;
 800e058:	9b00      	ldr	r3, [sp, #0]
 800e05a:	18d5      	adds	r5, r2, r3
 800e05c:	b22d      	sxth	r5, r5
 800e05e:	e7c0      	b.n	800dfe2 <lv_txt_get_next_line+0x7e>
 800e060:	e7c8      	b.n	800dff4 <lv_txt_get_next_line+0x90>
    if(txt == NULL) return 0;
 800e062:	4608      	mov	r0, r1
 800e064:	e7c6      	b.n	800dff4 <lv_txt_get_next_line+0x90>
 800e066:	bf00      	nop
 800e068:	20000d24 	.word	0x20000d24
 800e06c:	0801474e 	.word	0x0801474e
 800e070:	20000d20 	.word	0x20000d20

0800e074 <lv_txt_get_width>:
{
 800e074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e078:	4688      	mov	r8, r1
 800e07a:	b085      	sub	sp, #20
 800e07c:	4691      	mov	r9, r2
 800e07e:	461d      	mov	r5, r3
    if(txt == NULL) return 0;
 800e080:	4606      	mov	r6, r0
 800e082:	b920      	cbnz	r0, 800e08e <lv_txt_get_width+0x1a>
 800e084:	2400      	movs	r4, #0
}
 800e086:	4620      	mov	r0, r4
 800e088:	b005      	add	sp, #20
 800e08a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(font == NULL) return 0;
 800e08e:	2a00      	cmp	r2, #0
 800e090:	d0f8      	beq.n	800e084 <lv_txt_get_width+0x10>
    uint32_t i                   = 0;
 800e092:	2400      	movs	r4, #0
 800e094:	9403      	str	r4, [sp, #12]
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 800e096:	f88d 400b 	strb.w	r4, [sp, #11]
    if(length != 0) {
 800e09a:	2900      	cmp	r1, #0
 800e09c:	d0f2      	beq.n	800e084 <lv_txt_get_width+0x10>
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800e09e:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
            letter      = lv_txt_encoded_next(txt, &i);
 800e0a2:	f8df a05c 	ldr.w	sl, [pc, #92]	; 800e100 <lv_txt_get_width+0x8c>
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800e0a6:	f007 0701 	and.w	r7, r7, #1
        while(i < length) {
 800e0aa:	9b03      	ldr	r3, [sp, #12]
 800e0ac:	4598      	cmp	r8, r3
 800e0ae:	d804      	bhi.n	800e0ba <lv_txt_get_width+0x46>
        if(width > 0) {
 800e0b0:	2c00      	cmp	r4, #0
            width -= letter_space; /*Trim the last letter space. Important if the text is center
 800e0b2:	bfc4      	itt	gt
 800e0b4:	1b64      	subgt	r4, r4, r5
 800e0b6:	b224      	sxthgt	r4, r4
 800e0b8:	e7e5      	b.n	800e086 <lv_txt_get_width+0x12>
            letter      = lv_txt_encoded_next(txt, &i);
 800e0ba:	f8da 3000 	ldr.w	r3, [sl]
 800e0be:	a903      	add	r1, sp, #12
 800e0c0:	4630      	mov	r0, r6
 800e0c2:	4798      	blx	r3
 800e0c4:	4683      	mov	fp, r0
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 800e0c6:	9803      	ldr	r0, [sp, #12]
 800e0c8:	f8da 3000 	ldr.w	r3, [sl]
 800e0cc:	2100      	movs	r1, #0
 800e0ce:	4430      	add	r0, r6
 800e0d0:	4798      	blx	r3
 800e0d2:	4602      	mov	r2, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800e0d4:	b957      	cbnz	r7, 800e0ec <lv_txt_get_width+0x78>
            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
 800e0d6:	4659      	mov	r1, fp
 800e0d8:	4648      	mov	r0, r9
 800e0da:	f7fe fdf3 	bl	800ccc4 <lv_font_get_glyph_width>
            if(char_width > 0) {
 800e0de:	b203      	sxth	r3, r0
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	dde2      	ble.n	800e0aa <lv_txt_get_width+0x36>
                width += letter_space;
 800e0e4:	442c      	add	r4, r5
 800e0e6:	4404      	add	r4, r0
 800e0e8:	b224      	sxth	r4, r4
 800e0ea:	e7de      	b.n	800e0aa <lv_txt_get_width+0x36>
 800e0ec:	9001      	str	r0, [sp, #4]
                if(lv_txt_is_cmd(&cmd_state, letter) != false) {
 800e0ee:	4659      	mov	r1, fp
 800e0f0:	f10d 000b 	add.w	r0, sp, #11
 800e0f4:	f7ff ff18 	bl	800df28 <lv_txt_is_cmd>
 800e0f8:	2800      	cmp	r0, #0
 800e0fa:	d1d6      	bne.n	800e0aa <lv_txt_get_width+0x36>
 800e0fc:	9a01      	ldr	r2, [sp, #4]
 800e0fe:	e7ea      	b.n	800e0d6 <lv_txt_get_width+0x62>
 800e100:	20000d20 	.word	0x20000d20

0800e104 <lv_txt_get_size>:
{
 800e104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e108:	b087      	sub	sp, #28
    size_res->x = 0;
 800e10a:	2500      	movs	r5, #0
{
 800e10c:	9304      	str	r3, [sp, #16]
 800e10e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 800e112:	f9bd b040 	ldrsh.w	fp, [sp, #64]	; 0x40
 800e116:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 800e11a:	9303      	str	r3, [sp, #12]
 800e11c:	4604      	mov	r4, r0
 800e11e:	4616      	mov	r6, r2
    size_res->x = 0;
 800e120:	8005      	strh	r5, [r0, #0]
    size_res->y = 0;
 800e122:	8045      	strh	r5, [r0, #2]
    if(text == NULL) return;
 800e124:	4689      	mov	r9, r1
 800e126:	b1f9      	cbz	r1, 800e168 <lv_txt_get_size+0x64>
    if(font == NULL) return;
 800e128:	b1f2      	cbz	r2, 800e168 <lv_txt_get_size+0x64>
 800e12a:	7a17      	ldrb	r7, [r2, #8]
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 800e12c:	f013 0f02 	tst.w	r3, #2
 800e130:	f647 4318 	movw	r3, #31768	; 0x7c18
 800e134:	bf18      	it	ne
 800e136:	469a      	movne	sl, r3
        size_res->y += line_space;
 800e138:	eb07 030b 	add.w	r3, r7, fp
 800e13c:	9305      	str	r3, [sp, #20]
    while(text[line_start] != '\0') {
 800e13e:	f819 3005 	ldrb.w	r3, [r9, r5]
 800e142:	eb09 0805 	add.w	r8, r9, r5
 800e146:	b993      	cbnz	r3, 800e16e <lv_txt_get_size+0x6a>
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
 800e148:	b155      	cbz	r5, 800e160 <lv_txt_get_size+0x5c>
 800e14a:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800e14e:	2b0a      	cmp	r3, #10
 800e150:	d001      	beq.n	800e156 <lv_txt_get_size+0x52>
 800e152:	2b0d      	cmp	r3, #13
 800e154:	d104      	bne.n	800e160 <lv_txt_get_size+0x5c>
        size_res->y += letter_height + line_space;
 800e156:	8862      	ldrh	r2, [r4, #2]
 800e158:	eb07 030b 	add.w	r3, r7, fp
 800e15c:	4413      	add	r3, r2
 800e15e:	8063      	strh	r3, [r4, #2]
    if(size_res->y == 0)
 800e160:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800e164:	b9fb      	cbnz	r3, 800e1a6 <lv_txt_get_size+0xa2>
        size_res->y = letter_height;
 800e166:	8067      	strh	r7, [r4, #2]
}
 800e168:	b007      	add	sp, #28
 800e16a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        new_line_start += lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
 800e16e:	9b03      	ldr	r3, [sp, #12]
 800e170:	9300      	str	r3, [sp, #0]
 800e172:	9a04      	ldr	r2, [sp, #16]
 800e174:	4653      	mov	r3, sl
 800e176:	4631      	mov	r1, r6
 800e178:	4640      	mov	r0, r8
 800e17a:	f7ff fef3 	bl	800df64 <lv_txt_get_next_line>
        size_res->y += line_space;
 800e17e:	8863      	ldrh	r3, [r4, #2]
 800e180:	9a05      	ldr	r2, [sp, #20]
 800e182:	4413      	add	r3, r2
 800e184:	8063      	strh	r3, [r4, #2]
        act_line_length = lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space, flag);
 800e186:	9b03      	ldr	r3, [sp, #12]
 800e188:	9300      	str	r3, [sp, #0]
        new_line_start += lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
 800e18a:	4601      	mov	r1, r0
        act_line_length = lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space, flag);
 800e18c:	9b04      	ldr	r3, [sp, #16]
        new_line_start += lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
 800e18e:	4405      	add	r5, r0
        act_line_length = lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space, flag);
 800e190:	4632      	mov	r2, r6
 800e192:	4640      	mov	r0, r8
 800e194:	f7ff ff6e 	bl	800e074 <lv_txt_get_width>
        size_res->x = LV_MATH_MAX(act_line_length, size_res->x);
 800e198:	f9b4 3000 	ldrsh.w	r3, [r4]
 800e19c:	4298      	cmp	r0, r3
 800e19e:	bfb8      	it	lt
 800e1a0:	4618      	movlt	r0, r3
 800e1a2:	8020      	strh	r0, [r4, #0]
 800e1a4:	e7cb      	b.n	800e13e <lv_txt_get_size+0x3a>
        size_res->y -= line_space;
 800e1a6:	eba3 030b 	sub.w	r3, r3, fp
 800e1aa:	8063      	strh	r3, [r4, #2]
 800e1ac:	e7dc      	b.n	800e168 <lv_txt_get_size+0x64>

0800e1ae <lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                        int32_t (*cmp)(const void * pRef, const void * pElement))
{
 800e1ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e1b2:	9d08      	ldr	r5, [sp, #32]
 800e1b4:	4681      	mov	r9, r0
 800e1b6:	4688      	mov	r8, r1
 800e1b8:	4614      	mov	r4, r2
 800e1ba:	469a      	mov	sl, r3
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
 800e1bc:	b914      	cbnz	r4, 800e1c4 <lv_utils_bsearch+0x16>
            middle = base;
        } else {
            return (char *)middle;
        }
    }
    return NULL;
 800e1be:	4620      	mov	r0, r4
 800e1c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        middle += (n / 2) * size;
 800e1c4:	0867      	lsrs	r7, r4, #1
 800e1c6:	fb0a 8607 	mla	r6, sl, r7, r8
        if((c = (*cmp)(key, middle)) > 0) {
 800e1ca:	4631      	mov	r1, r6
 800e1cc:	4648      	mov	r0, r9
 800e1ce:	47a8      	blx	r5
 800e1d0:	2800      	cmp	r0, #0
 800e1d2:	dd07      	ble.n	800e1e4 <lv_utils_bsearch+0x36>
 800e1d4:	43e1      	mvns	r1, r4
 800e1d6:	f001 0101 	and.w	r1, r1, #1
            n    = (n / 2) - ((n & 1) == 0);
 800e1da:	1a7f      	subs	r7, r7, r1
            base = (middle += size);
 800e1dc:	eb06 080a 	add.w	r8, r6, sl
 800e1e0:	463c      	mov	r4, r7
 800e1e2:	e7eb      	b.n	800e1bc <lv_utils_bsearch+0xe>
        } else if(c < 0) {
 800e1e4:	d1fc      	bne.n	800e1e0 <lv_utils_bsearch+0x32>
        middle += (n / 2) * size;
 800e1e6:	4630      	mov	r0, r6
}
 800e1e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800e1ec <lv_label_dot_tmp_free>:
 * Free the dot_tmp_ptr field if it was previously allocated.
 * Always clears the field
 * @param label pointer to label object.
 */
static void lv_label_dot_tmp_free(lv_obj_t * label)
{
 800e1ec:	b510      	push	{r4, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800e1ee:	f7fa fdb3 	bl	8008d58 <lv_obj_get_ext_attr>
    if(ext->dot_tmp_alloc && ext->dot.tmp_ptr) {
 800e1f2:	7fc3      	ldrb	r3, [r0, #31]
 800e1f4:	079b      	lsls	r3, r3, #30
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800e1f6:	4604      	mov	r4, r0
    if(ext->dot_tmp_alloc && ext->dot.tmp_ptr) {
 800e1f8:	d503      	bpl.n	800e202 <lv_label_dot_tmp_free+0x16>
 800e1fa:	6840      	ldr	r0, [r0, #4]
 800e1fc:	b108      	cbz	r0, 800e202 <lv_label_dot_tmp_free+0x16>
        lv_mem_free(ext->dot.tmp_ptr);
 800e1fe:	f7ff fbf9 	bl	800d9f4 <lv_mem_free>
    }
    ext->dot_tmp_alloc = false;
 800e202:	7fe3      	ldrb	r3, [r4, #31]
 800e204:	f36f 0341 	bfc	r3, #1, #1
 800e208:	77e3      	strb	r3, [r4, #31]
    ext->dot.tmp_ptr   = NULL;
 800e20a:	2300      	movs	r3, #0
 800e20c:	6063      	str	r3, [r4, #4]
 800e20e:	bd10      	pop	{r4, pc}

0800e210 <lv_label_revert_dots>:
{
 800e210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e214:	4606      	mov	r6, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800e216:	f7fa fd9f 	bl	8008d58 <lv_obj_get_ext_attr>
    if(ext->long_mode != LV_LABEL_LONG_DOT) return;
 800e21a:	7f83      	ldrb	r3, [r0, #30]
 800e21c:	f003 0307 	and.w	r3, r3, #7
 800e220:	2b02      	cmp	r3, #2
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800e222:	4604      	mov	r4, r0
    if(ext->long_mode != LV_LABEL_LONG_DOT) return;
 800e224:	d126      	bne.n	800e274 <lv_label_revert_dots+0x64>
    if(ext->dot_end == LV_LABEL_DOT_END_INV) return;
 800e226:	8901      	ldrh	r1, [r0, #8]
 800e228:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e22c:	4299      	cmp	r1, r3
 800e22e:	d021      	beq.n	800e274 <lv_label_revert_dots+0x64>
    uint32_t byte_i   = lv_txt_encoded_get_byte_id(ext->text, letter_i);
 800e230:	4b12      	ldr	r3, [pc, #72]	; (800e27c <lv_label_revert_dots+0x6c>)
 800e232:	6800      	ldr	r0, [r0, #0]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	3903      	subs	r1, #3
 800e238:	4798      	blx	r3
 800e23a:	4680      	mov	r8, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800e23c:	4630      	mov	r0, r6
 800e23e:	f7fa fd8b 	bl	8008d58 <lv_obj_get_ext_attr>
    if(ext->dot_tmp_alloc) {
 800e242:	7fc3      	ldrb	r3, [r0, #31]
 800e244:	079b      	lsls	r3, r3, #30
        return ext->dot.tmp_ptr;
 800e246:	bf4c      	ite	mi
 800e248:	6840      	ldrmi	r0, [r0, #4]
        return ext->dot.tmp;
 800e24a:	3004      	addpl	r0, #4
    while(ext->text[byte_i + i] != '\0') {
 800e24c:	2500      	movs	r5, #0
 800e24e:	b2eb      	uxtb	r3, r5
 800e250:	eb08 0203 	add.w	r2, r8, r3
 800e254:	6821      	ldr	r1, [r4, #0]
        ext->text[byte_i + i] = dot_tmp[i];
 800e256:	5cc3      	ldrb	r3, [r0, r3]
    while(ext->text[byte_i + i] != '\0') {
 800e258:	f811 e002 	ldrb.w	lr, [r1, r2]
 800e25c:	188f      	adds	r7, r1, r2
 800e25e:	3501      	adds	r5, #1
 800e260:	f1be 0f00 	cmp.w	lr, #0
 800e264:	d108      	bne.n	800e278 <lv_label_revert_dots+0x68>
    ext->text[byte_i + i] = dot_tmp[i];
 800e266:	703b      	strb	r3, [r7, #0]
    lv_label_dot_tmp_free(label);
 800e268:	4630      	mov	r0, r6
 800e26a:	f7ff ffbf 	bl	800e1ec <lv_label_dot_tmp_free>
    ext->dot_end = LV_LABEL_DOT_END_INV;
 800e26e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e272:	8123      	strh	r3, [r4, #8]
 800e274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ext->text[byte_i + i] = dot_tmp[i];
 800e278:	548b      	strb	r3, [r1, r2]
 800e27a:	e7e8      	b.n	800e24e <lv_label_revert_dots+0x3e>
 800e27c:	20000d1c 	.word	0x20000d1c

0800e280 <lv_label_set_offset_y>:
{
 800e280:	b538      	push	{r3, r4, r5, lr}
 800e282:	4604      	mov	r4, r0
 800e284:	460d      	mov	r5, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800e286:	f7fa fd67 	bl	8008d58 <lv_obj_get_ext_attr>
    ext->offset.y        = y;
 800e28a:	8185      	strh	r5, [r0, #12]
    lv_obj_invalidate(label);
 800e28c:	4620      	mov	r0, r4
}
 800e28e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(label);
 800e292:	f7f9 bfd3 	b.w	800823c <lv_obj_invalidate>

0800e296 <lv_label_set_offset_x>:
{
 800e296:	b538      	push	{r3, r4, r5, lr}
 800e298:	4604      	mov	r4, r0
 800e29a:	460d      	mov	r5, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800e29c:	f7fa fd5c 	bl	8008d58 <lv_obj_get_ext_attr>
    ext->offset.x        = x;
 800e2a0:	8145      	strh	r5, [r0, #10]
    lv_obj_invalidate(label);
 800e2a2:	4620      	mov	r0, r4
}
 800e2a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(label);
 800e2a8:	f7f9 bfc8 	b.w	800823c <lv_obj_invalidate>

0800e2ac <lv_label_set_dot_tmp>:
{
 800e2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2ae:	4615      	mov	r5, r2
 800e2b0:	4607      	mov	r7, r0
 800e2b2:	460e      	mov	r6, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800e2b4:	f7fa fd50 	bl	8008d58 <lv_obj_get_ext_attr>
 800e2b8:	4604      	mov	r4, r0
    lv_label_dot_tmp_free(label); /* Deallocate any existing space */
 800e2ba:	4638      	mov	r0, r7
 800e2bc:	f7ff ff96 	bl	800e1ec <lv_label_dot_tmp_free>
    if(len > sizeof(char *)) {
 800e2c0:	2d04      	cmp	r5, #4
 800e2c2:	d911      	bls.n	800e2e8 <lv_label_set_dot_tmp+0x3c>
        ext->dot.tmp_ptr = lv_mem_alloc(len + 1);
 800e2c4:	1c68      	adds	r0, r5, #1
 800e2c6:	f7ff fb5f 	bl	800d988 <lv_mem_alloc>
 800e2ca:	6060      	str	r0, [r4, #4]
        if(ext->dot.tmp_ptr == NULL) {
 800e2cc:	b1b0      	cbz	r0, 800e2fc <lv_label_set_dot_tmp+0x50>
        memcpy(ext->dot.tmp_ptr, data, len);
 800e2ce:	462a      	mov	r2, r5
 800e2d0:	4631      	mov	r1, r6
 800e2d2:	f001 f82d 	bl	800f330 <memcpy>
        ext->dot.tmp_ptr[len] = '\0';
 800e2d6:	6863      	ldr	r3, [r4, #4]
 800e2d8:	2200      	movs	r2, #0
 800e2da:	555a      	strb	r2, [r3, r5]
        ext->dot_tmp_alloc    = true;
 800e2dc:	7fe3      	ldrb	r3, [r4, #31]
 800e2de:	f043 0302 	orr.w	r3, r3, #2
 800e2e2:	77e3      	strb	r3, [r4, #31]
    return true;
 800e2e4:	2001      	movs	r0, #1
 800e2e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ext->dot_tmp_alloc = false;
 800e2e8:	7fe3      	ldrb	r3, [r4, #31]
 800e2ea:	f36f 0341 	bfc	r3, #1, #1
 800e2ee:	77e3      	strb	r3, [r4, #31]
        memcpy(ext->dot.tmp, data, len);
 800e2f0:	462a      	mov	r2, r5
 800e2f2:	4631      	mov	r1, r6
 800e2f4:	1d20      	adds	r0, r4, #4
 800e2f6:	f001 f81b 	bl	800f330 <memcpy>
 800e2fa:	e7f3      	b.n	800e2e4 <lv_label_set_dot_tmp+0x38>
}
 800e2fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e2fe <lv_label_design>:
{
 800e2fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(mode == LV_DESIGN_COVER_CHK)
 800e302:	2a02      	cmp	r2, #2
{
 800e304:	b08d      	sub	sp, #52	; 0x34
 800e306:	4607      	mov	r7, r0
 800e308:	4688      	mov	r8, r1
    if(mode == LV_DESIGN_COVER_CHK)
 800e30a:	f000 8102 	beq.w	800e512 <lv_label_design+0x214>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 800e30e:	2a00      	cmp	r2, #0
 800e310:	f040 80f6 	bne.w	800e500 <lv_label_design+0x202>
        const lv_style_t * style = lv_obj_get_style(label);
 800e314:	f7fa fc6a 	bl	8008bec <lv_obj_get_style>
 800e318:	4604      	mov	r4, r0
        lv_opa_t opa_scale       = lv_obj_get_opa_scale(label);
 800e31a:	4638      	mov	r0, r7
 800e31c:	f7fa fcbd 	bl	8008c9a <lv_obj_get_opa_scale>
        lv_obj_get_coords(label, &coords);
 800e320:	a908      	add	r1, sp, #32
        lv_opa_t opa_scale       = lv_obj_get_opa_scale(label);
 800e322:	4681      	mov	r9, r0
        lv_obj_get_coords(label, &coords);
 800e324:	4638      	mov	r0, r7
 800e326:	f7fa fc4f 	bl	8008bc8 <lv_obj_get_coords>
        lv_group_t * g = lv_obj_get_group(label);
 800e32a:	4638      	mov	r0, r7
 800e32c:	f7fa fd16 	bl	8008d5c <lv_obj_get_group>
        if(lv_group_get_focused(g) == label) {
 800e330:	f7f9 fe90 	bl	8008054 <lv_group_get_focused>
 800e334:	4287      	cmp	r7, r0
 800e336:	d105      	bne.n	800e344 <lv_label_design+0x46>
            lv_draw_rect(&coords, mask, style, opa_scale);
 800e338:	464b      	mov	r3, r9
 800e33a:	4622      	mov	r2, r4
 800e33c:	4641      	mov	r1, r8
 800e33e:	a808      	add	r0, sp, #32
 800e340:	f7fc fa9c 	bl	800a87c <lv_draw_rect>
        lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800e344:	4638      	mov	r0, r7
 800e346:	f7fa fd07 	bl	8008d58 <lv_obj_get_ext_attr>
        if(ext->body_draw) {
 800e34a:	7fc3      	ldrb	r3, [r0, #31]
 800e34c:	07d9      	lsls	r1, r3, #31
        lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800e34e:	4605      	mov	r5, r0
        if(ext->body_draw) {
 800e350:	d524      	bpl.n	800e39c <lv_label_design+0x9e>
            lv_obj_get_coords(label, &bg);
 800e352:	a90a      	add	r1, sp, #40	; 0x28
 800e354:	4638      	mov	r0, r7
 800e356:	f7fa fc37 	bl	8008bc8 <lv_obj_get_coords>
            bg.x1 -= style->body.padding.left;
 800e35a:	8b62      	ldrh	r2, [r4, #26]
 800e35c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 800e360:	1a9b      	subs	r3, r3, r2
 800e362:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
            bg.x2 += style->body.padding.right;
 800e366:	8ba2      	ldrh	r2, [r4, #28]
 800e368:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800e36c:	4413      	add	r3, r2
 800e36e:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            bg.y1 -= style->body.padding.top;
 800e372:	8ae2      	ldrh	r2, [r4, #22]
 800e374:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 800e378:	1a9b      	subs	r3, r3, r2
 800e37a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
            bg.y2 += style->body.padding.bottom;
 800e37e:	8b22      	ldrh	r2, [r4, #24]
 800e380:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
            lv_draw_rect(&bg, mask, style, lv_obj_get_opa_scale(label));
 800e384:	4638      	mov	r0, r7
            bg.y2 += style->body.padding.bottom;
 800e386:	4413      	add	r3, r2
 800e388:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            lv_draw_rect(&bg, mask, style, lv_obj_get_opa_scale(label));
 800e38c:	f7fa fc85 	bl	8008c9a <lv_obj_get_opa_scale>
 800e390:	4622      	mov	r2, r4
 800e392:	4603      	mov	r3, r0
 800e394:	4641      	mov	r1, r8
 800e396:	a80a      	add	r0, sp, #40	; 0x28
 800e398:	f7fc fa70 	bl	800a87c <lv_draw_rect>
        if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
 800e39c:	7fab      	ldrb	r3, [r5, #30]
        if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 800e39e:	061a      	lsls	r2, r3, #24
        lv_txt_flag_t flag = LV_TXT_FLAG_NONE;
 800e3a0:	f3c3 1680 	ubfx	r6, r3, #6, #1
        if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 800e3a4:	f003 0230 	and.w	r2, r3, #48	; 0x30
        if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 800e3a8:	bf48      	it	mi
 800e3aa:	f046 0602 	orrmi.w	r6, r6, #2
        if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 800e3ae:	2a10      	cmp	r2, #16
 800e3b0:	f040 80a8 	bne.w	800e504 <lv_label_design+0x206>
 800e3b4:	f046 0604 	orr.w	r6, r6, #4
        if((ext->long_mode == LV_LABEL_LONG_SROLL || ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) &&
 800e3b8:	f003 0307 	and.w	r3, r3, #7
 800e3bc:	3b03      	subs	r3, #3
 800e3be:	2b01      	cmp	r3, #1
 800e3c0:	d81a      	bhi.n	800e3f8 <lv_label_design+0xfa>
 800e3c2:	2a10      	cmp	r2, #16
 800e3c4:	d001      	beq.n	800e3ca <lv_label_design+0xcc>
           (ext->align == LV_LABEL_ALIGN_CENTER || ext->align == LV_LABEL_ALIGN_RIGHT)) {
 800e3c6:	2a20      	cmp	r2, #32
 800e3c8:	d116      	bne.n	800e3f8 <lv_label_design+0xfa>
            lv_txt_get_size(&size, ext->text, style->text.font, style->text.letter_space, style->text.line_space,
 800e3ca:	f647 4218 	movw	r2, #31768	; 0x7c18
 800e3ce:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 800e3d2:	9602      	str	r6, [sp, #8]
 800e3d4:	9201      	str	r2, [sp, #4]
 800e3d6:	f9b4 202a 	ldrsh.w	r2, [r4, #42]	; 0x2a
 800e3da:	9200      	str	r2, [sp, #0]
 800e3dc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800e3de:	6829      	ldr	r1, [r5, #0]
 800e3e0:	a80a      	add	r0, sp, #40	; 0x28
 800e3e2:	f7ff fe8f 	bl	800e104 <lv_txt_get_size>
            if(size.x > lv_obj_get_width(label)) {
 800e3e6:	4638      	mov	r0, r7
 800e3e8:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 800e3ec:	f7fa fbf2 	bl	8008bd4 <lv_obj_get_width>
 800e3f0:	4582      	cmp	sl, r0
                flag &= ~LV_TXT_FLAG_CENTER;
 800e3f2:	bfc8      	it	gt
 800e3f4:	f006 06f3 	andgt.w	r6, r6, #243	; 0xf3
        if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC || lv_obj_get_height(label) < LV_LABEL_HINT_HEIGHT_LIMIT)
 800e3f8:	7fab      	ldrb	r3, [r5, #30]
 800e3fa:	f003 0307 	and.w	r3, r3, #7
 800e3fe:	2b04      	cmp	r3, #4
 800e400:	f000 8085 	beq.w	800e50e <lv_label_design+0x210>
 800e404:	4638      	mov	r0, r7
 800e406:	f7fa fbeb 	bl	8008be0 <lv_obj_get_height>
 800e40a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800e40e:	db7e      	blt.n	800e50e <lv_label_design+0x210>
        lv_draw_label_hint_t * hint = &ext->hint;
 800e410:	f105 0310 	add.w	r3, r5, #16
        lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ext->offset,
 800e414:	9305      	str	r3, [sp, #20]
 800e416:	f64f 7bff 	movw	fp, #65535	; 0xffff
 800e41a:	f105 030a 	add.w	r3, r5, #10
 800e41e:	f8cd b010 	str.w	fp, [sp, #16]
 800e422:	f8cd b00c 	str.w	fp, [sp, #12]
 800e426:	9302      	str	r3, [sp, #8]
 800e428:	9601      	str	r6, [sp, #4]
 800e42a:	682b      	ldr	r3, [r5, #0]
 800e42c:	9300      	str	r3, [sp, #0]
 800e42e:	4622      	mov	r2, r4
 800e430:	464b      	mov	r3, r9
 800e432:	4641      	mov	r1, r8
 800e434:	a808      	add	r0, sp, #32
 800e436:	f7fb ff8b 	bl	800a350 <lv_draw_label>
        if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) {
 800e43a:	7fab      	ldrb	r3, [r5, #30]
 800e43c:	f003 0307 	and.w	r3, r3, #7
 800e440:	2b04      	cmp	r3, #4
 800e442:	d15d      	bne.n	800e500 <lv_label_design+0x202>
            lv_txt_get_size(&size, ext->text, style->text.font, style->text.letter_space, style->text.line_space,
 800e444:	f647 4218 	movw	r2, #31768	; 0x7c18
 800e448:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 800e44c:	9602      	str	r6, [sp, #8]
 800e44e:	9201      	str	r2, [sp, #4]
 800e450:	f9b4 202a 	ldrsh.w	r2, [r4, #42]	; 0x2a
 800e454:	9200      	str	r2, [sp, #0]
 800e456:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800e458:	6829      	ldr	r1, [r5, #0]
 800e45a:	a807      	add	r0, sp, #28
 800e45c:	f7ff fe52 	bl	800e104 <lv_txt_get_size>
            if(size.x > lv_obj_get_width(label)) {
 800e460:	4638      	mov	r0, r7
 800e462:	f9bd a01c 	ldrsh.w	sl, [sp, #28]
 800e466:	f7fa fbb5 	bl	8008bd4 <lv_obj_get_width>
 800e46a:	4582      	cmp	sl, r0
 800e46c:	dd24      	ble.n	800e4b8 <lv_label_design+0x1ba>
                ofs.x = ext->offset.x + size.x +
 800e46e:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 800e472:	f8b5 a00a 	ldrh.w	sl, [r5, #10]
                        lv_font_get_glyph_width(style->text.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 800e476:	2220      	movs	r2, #32
 800e478:	4611      	mov	r1, r2
                ofs.x = ext->offset.x + size.x +
 800e47a:	4482      	add	sl, r0
                        lv_font_get_glyph_width(style->text.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 800e47c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e47e:	f7fe fc21 	bl	800ccc4 <lv_font_get_glyph_width>
                ofs.y = ext->offset.y;
 800e482:	89ab      	ldrh	r3, [r5, #12]
 800e484:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs,
 800e488:	2300      	movs	r3, #0
 800e48a:	9305      	str	r3, [sp, #20]
 800e48c:	ab0a      	add	r3, sp, #40	; 0x28
 800e48e:	f8cd b010 	str.w	fp, [sp, #16]
 800e492:	f8cd b00c 	str.w	fp, [sp, #12]
 800e496:	9302      	str	r3, [sp, #8]
 800e498:	9601      	str	r6, [sp, #4]
                        lv_font_get_glyph_width(style->text.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 800e49a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs,
 800e49e:	682b      	ldr	r3, [r5, #0]
 800e4a0:	9300      	str	r3, [sp, #0]
                ofs.x = ext->offset.x + size.x +
 800e4a2:	fa1f fa8a 	uxth.w	sl, sl
 800e4a6:	4482      	add	sl, r0
                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs,
 800e4a8:	464b      	mov	r3, r9
 800e4aa:	4622      	mov	r2, r4
 800e4ac:	4641      	mov	r1, r8
 800e4ae:	a808      	add	r0, sp, #32
                ofs.x = ext->offset.x + size.x +
 800e4b0:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs,
 800e4b4:	f7fb ff4c 	bl	800a350 <lv_draw_label>
            if(size.y > lv_obj_get_height(label)) {
 800e4b8:	4638      	mov	r0, r7
 800e4ba:	f9bd a01e 	ldrsh.w	sl, [sp, #30]
 800e4be:	f7fa fb8f 	bl	8008be0 <lv_obj_get_height>
 800e4c2:	4582      	cmp	sl, r0
 800e4c4:	dd1c      	ble.n	800e500 <lv_label_design+0x202>
                ofs.x = ext->offset.x;
 800e4c6:	896b      	ldrh	r3, [r5, #10]
 800e4c8:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
                ofs.y = ext->offset.y + size.y + lv_font_get_line_height(style->text.font);
 800e4cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e4ce:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800e4d2:	7a1b      	ldrb	r3, [r3, #8]
 800e4d4:	4413      	add	r3, r2
 800e4d6:	89aa      	ldrh	r2, [r5, #12]
                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs,
 800e4d8:	9601      	str	r6, [sp, #4]
                ofs.y = ext->offset.y + size.y + lv_font_get_line_height(style->text.font);
 800e4da:	4413      	add	r3, r2
 800e4dc:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs,
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	9305      	str	r3, [sp, #20]
 800e4e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e4e8:	9304      	str	r3, [sp, #16]
 800e4ea:	9303      	str	r3, [sp, #12]
 800e4ec:	ab0a      	add	r3, sp, #40	; 0x28
 800e4ee:	9302      	str	r3, [sp, #8]
 800e4f0:	682b      	ldr	r3, [r5, #0]
 800e4f2:	9300      	str	r3, [sp, #0]
 800e4f4:	4622      	mov	r2, r4
 800e4f6:	464b      	mov	r3, r9
 800e4f8:	4641      	mov	r1, r8
 800e4fa:	a808      	add	r0, sp, #32
 800e4fc:	f7fb ff28 	bl	800a350 <lv_draw_label>
    return true;
 800e500:	2001      	movs	r0, #1
 800e502:	e007      	b.n	800e514 <lv_label_design+0x216>
        if(ext->align == LV_LABEL_ALIGN_RIGHT) flag |= LV_TXT_FLAG_RIGHT;
 800e504:	2a20      	cmp	r2, #32
 800e506:	bf08      	it	eq
 800e508:	f046 0608 	orreq.w	r6, r6, #8
 800e50c:	e754      	b.n	800e3b8 <lv_label_design+0xba>
            hint = NULL;
 800e50e:	2300      	movs	r3, #0
 800e510:	e780      	b.n	800e414 <lv_label_design+0x116>
        return false;
 800e512:	2000      	movs	r0, #0
}
 800e514:	b00d      	add	sp, #52	; 0x34
 800e516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e51a <lv_label_set_align>:
{
 800e51a:	b538      	push	{r3, r4, r5, lr}
 800e51c:	460c      	mov	r4, r1
 800e51e:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800e520:	f7fa fc1a 	bl	8008d58 <lv_obj_get_ext_attr>
    if(ext->align == align) return;
 800e524:	7f83      	ldrb	r3, [r0, #30]
 800e526:	f3c3 1201 	ubfx	r2, r3, #4, #2
 800e52a:	42a2      	cmp	r2, r4
 800e52c:	d007      	beq.n	800e53e <lv_label_set_align+0x24>
    ext->align = align;
 800e52e:	f364 1305 	bfi	r3, r4, #4, #2
 800e532:	7783      	strb	r3, [r0, #30]
    lv_obj_invalidate(label); /*Enough to invalidate because alignment is only drawing related
 800e534:	4628      	mov	r0, r5
}
 800e536:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(label); /*Enough to invalidate because alignment is only drawing related
 800e53a:	f7f9 be7f 	b.w	800823c <lv_obj_invalidate>
 800e53e:	bd38      	pop	{r3, r4, r5, pc}

0800e540 <lv_label_set_body_draw>:
{
 800e540:	b538      	push	{r3, r4, r5, lr}
 800e542:	460d      	mov	r5, r1
 800e544:	4604      	mov	r4, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800e546:	f7fa fc07 	bl	8008d58 <lv_obj_get_ext_attr>
    if(ext->body_draw == en) return;
 800e54a:	7fc3      	ldrb	r3, [r0, #31]
 800e54c:	f003 0201 	and.w	r2, r3, #1
 800e550:	42aa      	cmp	r2, r5
 800e552:	d00a      	beq.n	800e56a <lv_label_set_body_draw+0x2a>
    ext->body_draw = en == false ? 0 : 1;
 800e554:	f365 0300 	bfi	r3, r5, #0, #1
 800e558:	77c3      	strb	r3, [r0, #31]
    lv_obj_refresh_ext_draw_pad(label);
 800e55a:	4620      	mov	r0, r4
 800e55c:	f7fa fafa 	bl	8008b54 <lv_obj_refresh_ext_draw_pad>
    lv_obj_invalidate(label);
 800e560:	4620      	mov	r0, r4
}
 800e562:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(label);
 800e566:	f7f9 be69 	b.w	800823c <lv_obj_invalidate>
 800e56a:	bd38      	pop	{r3, r4, r5, pc}

0800e56c <lv_label_get_text>:
{
 800e56c:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800e56e:	f7fa fbf3 	bl	8008d58 <lv_obj_get_ext_attr>
}
 800e572:	6800      	ldr	r0, [r0, #0]
 800e574:	bd08      	pop	{r3, pc}

0800e576 <lv_label_get_long_mode>:
{
 800e576:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800e578:	f7fa fbee 	bl	8008d58 <lv_obj_get_ext_attr>
    return ext->long_mode;
 800e57c:	7f80      	ldrb	r0, [r0, #30]
}
 800e57e:	f000 0007 	and.w	r0, r0, #7
 800e582:	bd08      	pop	{r3, pc}

0800e584 <lv_label_get_align>:
{
 800e584:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800e586:	f7fa fbe7 	bl	8008d58 <lv_obj_get_ext_attr>
    return ext->align;
 800e58a:	7f80      	ldrb	r0, [r0, #30]
}
 800e58c:	f3c0 1001 	ubfx	r0, r0, #4, #2
 800e590:	bd08      	pop	{r3, pc}

0800e592 <lv_label_get_recolor>:
{
 800e592:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800e594:	f7fa fbe0 	bl	8008d58 <lv_obj_get_ext_attr>
    return ext->recolor == 0 ? false : true;
 800e598:	7f80      	ldrb	r0, [r0, #30]
}
 800e59a:	f3c0 1080 	ubfx	r0, r0, #6, #1
 800e59e:	bd08      	pop	{r3, pc}

0800e5a0 <lv_label_get_body_draw>:
{
 800e5a0:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800e5a2:	f7fa fbd9 	bl	8008d58 <lv_obj_get_ext_attr>
    return ext->body_draw == 0 ? false : true;
 800e5a6:	7fc0      	ldrb	r0, [r0, #31]
}
 800e5a8:	f000 0001 	and.w	r0, r0, #1
 800e5ac:	bd08      	pop	{r3, pc}
	...

0800e5b0 <lv_label_get_letter_on>:
{
 800e5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5b4:	b08b      	sub	sp, #44	; 0x2c
 800e5b6:	4682      	mov	sl, r0
 800e5b8:	9106      	str	r1, [sp, #24]
    const char * txt         = lv_label_get_text(label);
 800e5ba:	f7ff ffd7 	bl	800e56c <lv_label_get_text>
 800e5be:	4607      	mov	r7, r0
    lv_label_ext_t * ext     = lv_obj_get_ext_attr(label);
 800e5c0:	4650      	mov	r0, sl
 800e5c2:	f7fa fbc9 	bl	8008d58 <lv_obj_get_ext_attr>
 800e5c6:	9004      	str	r0, [sp, #16]
    lv_coord_t max_w         = lv_obj_get_width(label);
 800e5c8:	4650      	mov	r0, sl
 800e5ca:	f7fa fb03 	bl	8008bd4 <lv_obj_get_width>
 800e5ce:	4683      	mov	fp, r0
    const lv_style_t * style = lv_obj_get_style(label);
 800e5d0:	4650      	mov	r0, sl
 800e5d2:	f7fa fb0b 	bl	8008bec <lv_obj_get_style>
    const lv_font_t * font   = style->text.font;
 800e5d6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e5d8:	9303      	str	r3, [sp, #12]
 800e5da:	7a1b      	ldrb	r3, [r3, #8]
 800e5dc:	9305      	str	r3, [sp, #20]
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
 800e5de:	9b04      	ldr	r3, [sp, #16]
 800e5e0:	7f9b      	ldrb	r3, [r3, #30]
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 800e5e2:	061a      	lsls	r2, r3, #24
    lv_txt_flag_t flag       = LV_TXT_FLAG_NONE;
 800e5e4:	f3c3 1680 	ubfx	r6, r3, #6, #1
    if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 800e5e8:	f003 0230 	and.w	r2, r3, #48	; 0x30
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 800e5ec:	bf48      	it	mi
 800e5ee:	f046 0602 	orrmi.w	r6, r6, #2
    if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 800e5f2:	2a10      	cmp	r2, #16
 800e5f4:	bf08      	it	eq
 800e5f6:	f046 0604 	orreq.w	r6, r6, #4
        max_w = LV_COORD_MAX;
 800e5fa:	2400      	movs	r4, #0
 800e5fc:	f013 0f07 	tst.w	r3, #7
 800e600:	f647 4318 	movw	r3, #31768	; 0x7c18
    const lv_style_t * style = lv_obj_get_style(label);
 800e604:	4681      	mov	r9, r0
        max_w = LV_COORD_MAX;
 800e606:	bf08      	it	eq
 800e608:	469b      	moveq	fp, r3
 800e60a:	4625      	mov	r5, r4
    while(txt[line_start] != '\0') {
 800e60c:	197b      	adds	r3, r7, r5
 800e60e:	9307      	str	r3, [sp, #28]
 800e610:	5d7b      	ldrb	r3, [r7, r5]
 800e612:	2b00      	cmp	r3, #0
 800e614:	d150      	bne.n	800e6b8 <lv_label_get_letter_on+0x108>
 800e616:	46a8      	mov	r8, r5
    if(ext->align == LV_LABEL_ALIGN_CENTER) {
 800e618:	9b04      	ldr	r3, [sp, #16]
 800e61a:	7f9b      	ldrb	r3, [r3, #30]
 800e61c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e620:	2b10      	cmp	r3, #16
 800e622:	d162      	bne.n	800e6ea <lv_label_get_letter_on+0x13a>
        line_w = lv_txt_get_width(&txt[line_start], new_line_start - line_start, font, style->text.letter_space, flag);
 800e624:	eba8 0105 	sub.w	r1, r8, r5
 800e628:	f9b9 3028 	ldrsh.w	r3, [r9, #40]	; 0x28
 800e62c:	9a03      	ldr	r2, [sp, #12]
 800e62e:	9600      	str	r6, [sp, #0]
 800e630:	b289      	uxth	r1, r1
 800e632:	1978      	adds	r0, r7, r5
 800e634:	f7ff fd1e 	bl	800e074 <lv_txt_get_width>
 800e638:	4604      	mov	r4, r0
        x += lv_obj_get_width(label) / 2 - line_w / 2;
 800e63a:	4650      	mov	r0, sl
 800e63c:	f7fa faca 	bl	8008bd4 <lv_obj_get_width>
 800e640:	2302      	movs	r3, #2
 800e642:	fb90 f0f3 	sdiv	r0, r0, r3
 800e646:	fb94 f4f3 	sdiv	r4, r4, r3
 800e64a:	1b04      	subs	r4, r0, r4
 800e64c:	b224      	sxth	r4, r4
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 800e64e:	2300      	movs	r3, #0
 800e650:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    uint32_t i         = line_start;
 800e654:	9509      	str	r5, [sp, #36]	; 0x24
    if(new_line_start > 0) {
 800e656:	f1b8 0f00 	cmp.w	r8, #0
 800e65a:	d024      	beq.n	800e6a6 <lv_label_get_letter_on+0xf6>
            letter = lv_txt_encoded_next(txt, &i);
 800e65c:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 800e714 <lv_label_get_letter_on+0x164>
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800e660:	f006 0601 	and.w	r6, r6, #1
        while(i <= new_line_start - 1) {
 800e664:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e666:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800e66a:	4293      	cmp	r3, r2
 800e66c:	d31b      	bcc.n	800e6a6 <lv_label_get_letter_on+0xf6>
            letter = lv_txt_encoded_next(txt, &i);
 800e66e:	f8da 3000 	ldr.w	r3, [sl]
 800e672:	a909      	add	r1, sp, #36	; 0x24
 800e674:	4638      	mov	r0, r7
 800e676:	4798      	blx	r3
 800e678:	4683      	mov	fp, r0
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 800e67a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e67c:	f8da 3000 	ldr.w	r3, [sl]
 800e680:	2100      	movs	r1, #0
 800e682:	4438      	add	r0, r7
 800e684:	4798      	blx	r3
 800e686:	4602      	mov	r2, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800e688:	2e00      	cmp	r6, #0
 800e68a:	d130      	bne.n	800e6ee <lv_label_get_letter_on+0x13e>
            x += lv_font_get_glyph_width(font, letter, letter_next);
 800e68c:	4659      	mov	r1, fp
 800e68e:	9803      	ldr	r0, [sp, #12]
 800e690:	f7fe fb18 	bl	800ccc4 <lv_font_get_glyph_width>
            if(pos->x < x) {
 800e694:	9b06      	ldr	r3, [sp, #24]
            x += lv_font_get_glyph_width(font, letter, letter_next);
 800e696:	4404      	add	r4, r0
            if(pos->x < x) {
 800e698:	f9b3 2000 	ldrsh.w	r2, [r3]
            x += lv_font_get_glyph_width(font, letter, letter_next);
 800e69c:	b2a4      	uxth	r4, r4
            if(pos->x < x) {
 800e69e:	b223      	sxth	r3, r4
 800e6a0:	429a      	cmp	r2, r3
 800e6a2:	da2f      	bge.n	800e704 <lv_label_get_letter_on+0x154>
                i = i_current;
 800e6a4:	9509      	str	r5, [sp, #36]	; 0x24
    return lv_encoded_get_char_id(txt, i);
 800e6a6:	4b1a      	ldr	r3, [pc, #104]	; (800e710 <lv_label_get_letter_on+0x160>)
 800e6a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	4638      	mov	r0, r7
 800e6ae:	4798      	blx	r3
}
 800e6b0:	b280      	uxth	r0, r0
 800e6b2:	b00b      	add	sp, #44	; 0x2c
 800e6b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        new_line_start += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, max_w, flag);
 800e6b8:	f9b9 2028 	ldrsh.w	r2, [r9, #40]	; 0x28
 800e6bc:	9903      	ldr	r1, [sp, #12]
 800e6be:	9600      	str	r6, [sp, #0]
 800e6c0:	465b      	mov	r3, fp
 800e6c2:	1978      	adds	r0, r7, r5
 800e6c4:	f7ff fc4e 	bl	800df64 <lv_txt_get_next_line>
        if(pos->y <= y + letter_height) break; /*The line is found (stored in 'line_start')*/
 800e6c8:	9b06      	ldr	r3, [sp, #24]
 800e6ca:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800e6ce:	9b05      	ldr	r3, [sp, #20]
 800e6d0:	18e3      	adds	r3, r4, r3
 800e6d2:	429a      	cmp	r2, r3
        new_line_start += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, max_w, flag);
 800e6d4:	eb00 0805 	add.w	r8, r0, r5
        if(pos->y <= y + letter_height) break; /*The line is found (stored in 'line_start')*/
 800e6d8:	dd9e      	ble.n	800e618 <lv_label_get_letter_on+0x68>
        y += letter_height + style->text.line_space;
 800e6da:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
 800e6de:	9a05      	ldr	r2, [sp, #20]
 800e6e0:	4413      	add	r3, r2
 800e6e2:	441c      	add	r4, r3
 800e6e4:	b224      	sxth	r4, r4
        new_line_start += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, max_w, flag);
 800e6e6:	4645      	mov	r5, r8
 800e6e8:	e790      	b.n	800e60c <lv_label_get_letter_on+0x5c>
    lv_coord_t x = 0;
 800e6ea:	2400      	movs	r4, #0
 800e6ec:	e7af      	b.n	800e64e <lv_label_get_letter_on+0x9e>
                if(lv_txt_is_cmd(&cmd_state, txt[i]) != false) {
 800e6ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6f0:	9004      	str	r0, [sp, #16]
 800e6f2:	5cf9      	ldrb	r1, [r7, r3]
 800e6f4:	f10d 0023 	add.w	r0, sp, #35	; 0x23
 800e6f8:	f7ff fc16 	bl	800df28 <lv_txt_is_cmd>
 800e6fc:	2800      	cmp	r0, #0
 800e6fe:	d1b1      	bne.n	800e664 <lv_label_get_letter_on+0xb4>
 800e700:	9a04      	ldr	r2, [sp, #16]
 800e702:	e7c3      	b.n	800e68c <lv_label_get_letter_on+0xdc>
            x += style->text.letter_space;
 800e704:	f8b9 0028 	ldrh.w	r0, [r9, #40]	; 0x28
            i_current = i;
 800e708:	9d09      	ldr	r5, [sp, #36]	; 0x24
            x += style->text.letter_space;
 800e70a:	4404      	add	r4, r0
 800e70c:	b224      	sxth	r4, r4
 800e70e:	e7a9      	b.n	800e664 <lv_label_get_letter_on+0xb4>
 800e710:	20000d18 	.word	0x20000d18
 800e714:	20000d20 	.word	0x20000d20

0800e718 <lv_label_refr_text>:
{
 800e718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e71c:	b093      	sub	sp, #76	; 0x4c
 800e71e:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800e720:	f7fa fb1a 	bl	8008d58 <lv_obj_get_ext_attr>
    if(ext->text == NULL) return;
 800e724:	6803      	ldr	r3, [r0, #0]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800e726:	4604      	mov	r4, r0
    if(ext->text == NULL) return;
 800e728:	b393      	cbz	r3, 800e790 <lv_label_refr_text+0x78>
    ext->hint.line_start = -1; /*The hint is invalid if the text changes*/
 800e72a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e72e:	6103      	str	r3, [r0, #16]
    lv_coord_t max_w         = lv_obj_get_width(label);
 800e730:	4628      	mov	r0, r5
 800e732:	f7fa fa4f 	bl	8008bd4 <lv_obj_get_width>
 800e736:	4607      	mov	r7, r0
    const lv_style_t * style = lv_obj_get_style(label);
 800e738:	4628      	mov	r0, r5
 800e73a:	f7fa fa57 	bl	8008bec <lv_obj_get_style>
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) {
 800e73e:	7fa3      	ldrb	r3, [r4, #30]
    const lv_font_t * font   = style->text.font;
 800e740:	6a46      	ldr	r6, [r0, #36]	; 0x24
        max_w = LV_COORD_MAX;
 800e742:	f013 0f07 	tst.w	r3, #7
 800e746:	f647 4218 	movw	r2, #31768	; 0x7c18
 800e74a:	bf08      	it	eq
 800e74c:	4617      	moveq	r7, r2
    lv_txt_flag_t flag = LV_TXT_FLAG_NONE;
 800e74e:	f3c3 1280 	ubfx	r2, r3, #6, #1
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 800e752:	061b      	lsls	r3, r3, #24
 800e754:	bf48      	it	mi
 800e756:	f042 0202 	orrmi.w	r2, r2, #2
    lv_txt_get_size(&size, ext->text, font, style->text.letter_space, style->text.line_space, max_w, flag);
 800e75a:	f9b0 3028 	ldrsh.w	r3, [r0, #40]	; 0x28
 800e75e:	9202      	str	r2, [sp, #8]
 800e760:	9701      	str	r7, [sp, #4]
 800e762:	f9b0 202a 	ldrsh.w	r2, [r0, #42]	; 0x2a
 800e766:	9200      	str	r2, [sp, #0]
    const lv_style_t * style = lv_obj_get_style(label);
 800e768:	4680      	mov	r8, r0
    lv_txt_get_size(&size, ext->text, font, style->text.letter_space, style->text.line_space, max_w, flag);
 800e76a:	4632      	mov	r2, r6
 800e76c:	6821      	ldr	r1, [r4, #0]
 800e76e:	a807      	add	r0, sp, #28
 800e770:	f7ff fcc8 	bl	800e104 <lv_txt_get_size>
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) {
 800e774:	7fa3      	ldrb	r3, [r4, #30]
 800e776:	f013 0307 	ands.w	r3, r3, #7
 800e77a:	d10c      	bne.n	800e796 <lv_label_refr_text+0x7e>
        lv_obj_set_size(label, size.x, size.y);
 800e77c:	f9bd 201e 	ldrsh.w	r2, [sp, #30]
 800e780:	f9bd 101c 	ldrsh.w	r1, [sp, #28]
 800e784:	4628      	mov	r0, r5
 800e786:	f7fa f985 	bl	8008a94 <lv_obj_set_size>
    lv_obj_invalidate(label);
 800e78a:	4628      	mov	r0, r5
 800e78c:	f7f9 fd56 	bl	800823c <lv_obj_invalidate>
}
 800e790:	b013      	add	sp, #76	; 0x4c
 800e792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(ext->long_mode == LV_LABEL_LONG_SROLL) {
 800e796:	2b03      	cmp	r3, #3
 800e798:	d166      	bne.n	800e868 <lv_label_refr_text+0x150>
        anim.repeat   = 1;
 800e79a:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
        anim.var      = label;
 800e79e:	9509      	str	r5, [sp, #36]	; 0x24
        anim.playback = 1;
 800e7a0:	f043 0303 	orr.w	r3, r3, #3
 800e7a4:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
            (((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 800e7a8:	2220      	movs	r2, #32
        anim.path_cb  = lv_anim_path_linear;
 800e7aa:	4b9f      	ldr	r3, [pc, #636]	; (800ea28 <lv_label_refr_text+0x310>)
            (((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 800e7ac:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
        anim.path_cb  = lv_anim_path_linear;
 800e7b0:	930b      	str	r3, [sp, #44]	; 0x2c
        anim.start    = 0;
 800e7b2:	2700      	movs	r7, #0
            (((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 800e7b4:	4611      	mov	r1, r2
        anim.start    = 0;
 800e7b6:	970d      	str	r7, [sp, #52]	; 0x34
        anim.ready_cb = NULL;
 800e7b8:	970c      	str	r7, [sp, #48]	; 0x30
            (((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 800e7ba:	f7fe fa83 	bl	800ccc4 <lv_font_get_glyph_width>
 800e7be:	f9b8 3028 	ldrsh.w	r3, [r8, #40]	; 0x28
        if(size.x > lv_obj_get_width(label)) {
 800e7c2:	f9bd 801c 	ldrsh.w	r8, [sp, #28]
            (((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 800e7c6:	4418      	add	r0, r3
 800e7c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e7cc:	4343      	muls	r3, r0
             ext->anim_speed) *
 800e7ce:	8ba0      	ldrh	r0, [r4, #28]
            (((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 800e7d0:	fb93 f3f0 	sdiv	r3, r3, r0
        anim.playback_pause =
 800e7d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e7d8:	b29b      	uxth	r3, r3
 800e7da:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        anim.repeat_pause = anim.playback_pause;
 800e7de:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
        if(size.x > lv_obj_get_width(label)) {
 800e7e2:	4628      	mov	r0, r5
        anim.act_time     = -anim.playback_pause;
 800e7e4:	425b      	negs	r3, r3
 800e7e6:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
        if(size.x > lv_obj_get_width(label)) {
 800e7ea:	f7fa f9f3 	bl	8008bd4 <lv_obj_get_width>
 800e7ee:	4580      	cmp	r8, r0
 800e7f0:	dd34      	ble.n	800e85c <lv_label_refr_text+0x144>
            anim.end     = lv_obj_get_width(label) - size.x;
 800e7f2:	4628      	mov	r0, r5
 800e7f4:	f7fa f9ee 	bl	8008bd4 <lv_obj_get_width>
 800e7f8:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_x;
 800e7fc:	4b8b      	ldr	r3, [pc, #556]	; (800ea2c <lv_label_refr_text+0x314>)
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 800e7fe:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_x;
 800e802:	930a      	str	r3, [sp, #40]	; 0x28
            anim.end     = lv_obj_get_width(label) - size.x;
 800e804:	1a82      	subs	r2, r0, r2
 800e806:	920e      	str	r2, [sp, #56]	; 0x38
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 800e808:	8ba0      	ldrh	r0, [r4, #28]
 800e80a:	b212      	sxth	r2, r2
 800e80c:	f7fe fd98 	bl	800d340 <lv_anim_speed_to_time>
 800e810:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
            lv_anim_create(&anim);
 800e814:	a809      	add	r0, sp, #36	; 0x24
 800e816:	f7fe fd69 	bl	800d2ec <lv_anim_create>
            hor_anim = true;
 800e81a:	2701      	movs	r7, #1
        if(size.y > lv_obj_get_height(label) && hor_anim == false) {
 800e81c:	4628      	mov	r0, r5
 800e81e:	f9bd 801e 	ldrsh.w	r8, [sp, #30]
 800e822:	f7fa f9dd 	bl	8008be0 <lv_obj_get_height>
 800e826:	4580      	cmp	r8, r0
 800e828:	dd78      	ble.n	800e91c <lv_label_refr_text+0x204>
 800e82a:	2f00      	cmp	r7, #0
 800e82c:	d176      	bne.n	800e91c <lv_label_refr_text+0x204>
            anim.end     = lv_obj_get_height(label) - size.y - (lv_font_get_line_height(font));
 800e82e:	4628      	mov	r0, r5
 800e830:	f7fa f9d6 	bl	8008be0 <lv_obj_get_height>
 800e834:	f9bd 201e 	ldrsh.w	r2, [sp, #30]
 800e838:	1a82      	subs	r2, r0, r2
 800e83a:	7a30      	ldrb	r0, [r6, #8]
 800e83c:	1a12      	subs	r2, r2, r0
            anim.end     = -size.y - (lv_font_get_line_height(font));
 800e83e:	920e      	str	r2, [sp, #56]	; 0x38
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_y;
 800e840:	4b7b      	ldr	r3, [pc, #492]	; (800ea30 <lv_label_refr_text+0x318>)
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 800e842:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
 800e846:	8ba0      	ldrh	r0, [r4, #28]
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_y;
 800e848:	930a      	str	r3, [sp, #40]	; 0x28
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 800e84a:	b212      	sxth	r2, r2
 800e84c:	f7fe fd78 	bl	800d340 <lv_anim_speed_to_time>
 800e850:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
            lv_anim_create(&anim);
 800e854:	a809      	add	r0, sp, #36	; 0x24
 800e856:	f7fe fd49 	bl	800d2ec <lv_anim_create>
 800e85a:	e796      	b.n	800e78a <lv_label_refr_text+0x72>
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
 800e85c:	4973      	ldr	r1, [pc, #460]	; (800ea2c <lv_label_refr_text+0x314>)
 800e85e:	4628      	mov	r0, r5
 800e860:	f7fe fd16 	bl	800d290 <lv_anim_del>
            ext->offset.x = 0;
 800e864:	8167      	strh	r7, [r4, #10]
 800e866:	e7d9      	b.n	800e81c <lv_label_refr_text+0x104>
    else if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) {
 800e868:	2b04      	cmp	r3, #4
 800e86a:	d15e      	bne.n	800e92a <lv_label_refr_text+0x212>
        anim.repeat   = 1;
 800e86c:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
        anim.var      = label;
 800e870:	9509      	str	r5, [sp, #36]	; 0x24
        anim.playback = 0;
 800e872:	f043 0302 	orr.w	r3, r3, #2
 800e876:	f36f 0300 	bfc	r3, #0, #1
 800e87a:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
        anim.act_time = -(((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 800e87e:	2220      	movs	r2, #32
        anim.start    = 0;
 800e880:	2700      	movs	r7, #0
        anim.act_time = -(((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 800e882:	4611      	mov	r1, r2
 800e884:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
        anim.start    = 0;
 800e888:	970d      	str	r7, [sp, #52]	; 0x34
        anim.act_time = -(((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 800e88a:	f7fe fa1b 	bl	800ccc4 <lv_font_get_glyph_width>
 800e88e:	f9b8 3028 	ldrsh.w	r3, [r8, #40]	; 0x28
        if(size.x > lv_obj_get_width(label)) {
 800e892:	f9bd 801c 	ldrsh.w	r8, [sp, #28]
        anim.act_time = -(((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 800e896:	4403      	add	r3, r0
 800e898:	4866      	ldr	r0, [pc, #408]	; (800ea34 <lv_label_refr_text+0x31c>)
 800e89a:	4358      	muls	r0, r3
                          ext->anim_speed) *
 800e89c:	8ba3      	ldrh	r3, [r4, #28]
        anim.act_time = -(((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 800e89e:	fb90 f0f3 	sdiv	r0, r0, r3
 800e8a2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800e8a6:	f8ad 003e 	strh.w	r0, [sp, #62]	; 0x3e
        anim.path_cb        = lv_anim_path_linear;
 800e8aa:	4b5f      	ldr	r3, [pc, #380]	; (800ea28 <lv_label_refr_text+0x310>)
        anim.ready_cb       = NULL;
 800e8ac:	970c      	str	r7, [sp, #48]	; 0x30
        if(size.x > lv_obj_get_width(label)) {
 800e8ae:	4628      	mov	r0, r5
        anim.path_cb        = lv_anim_path_linear;
 800e8b0:	930b      	str	r3, [sp, #44]	; 0x2c
        anim.playback_pause = 0;
 800e8b2:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
        anim.repeat_pause   = 0;
 800e8b6:	f8ad 7042 	strh.w	r7, [sp, #66]	; 0x42
        if(size.x > lv_obj_get_width(label)) {
 800e8ba:	f7fa f98b 	bl	8008bd4 <lv_obj_get_width>
 800e8be:	4580      	cmp	r8, r0
 800e8c0:	dd26      	ble.n	800e910 <lv_label_refr_text+0x1f8>
            anim.end     = -size.x - lv_font_get_glyph_width(font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 800e8c2:	2220      	movs	r2, #32
 800e8c4:	4611      	mov	r1, r2
 800e8c6:	4630      	mov	r0, r6
 800e8c8:	f7fe f9fc 	bl	800ccc4 <lv_font_get_glyph_width>
 800e8cc:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_x;
 800e8d0:	4b56      	ldr	r3, [pc, #344]	; (800ea2c <lv_label_refr_text+0x314>)
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 800e8d2:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_x;
 800e8d6:	930a      	str	r3, [sp, #40]	; 0x28
            anim.end     = -size.x - lv_font_get_glyph_width(font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 800e8d8:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
 800e8dc:	1a82      	subs	r2, r0, r2
 800e8de:	920e      	str	r2, [sp, #56]	; 0x38
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 800e8e0:	8ba0      	ldrh	r0, [r4, #28]
 800e8e2:	b212      	sxth	r2, r2
 800e8e4:	f7fe fd2c 	bl	800d340 <lv_anim_speed_to_time>
 800e8e8:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
            lv_anim_create(&anim);
 800e8ec:	a809      	add	r0, sp, #36	; 0x24
 800e8ee:	f7fe fcfd 	bl	800d2ec <lv_anim_create>
            hor_anim = true;
 800e8f2:	2701      	movs	r7, #1
        if(size.y > lv_obj_get_height(label) && hor_anim == false) {
 800e8f4:	4628      	mov	r0, r5
 800e8f6:	f9bd 801e 	ldrsh.w	r8, [sp, #30]
 800e8fa:	f7fa f971 	bl	8008be0 <lv_obj_get_height>
 800e8fe:	4580      	cmp	r8, r0
 800e900:	dd0c      	ble.n	800e91c <lv_label_refr_text+0x204>
 800e902:	b95f      	cbnz	r7, 800e91c <lv_label_refr_text+0x204>
            anim.end     = -size.y - (lv_font_get_line_height(font));
 800e904:	f9bd 201e 	ldrsh.w	r2, [sp, #30]
 800e908:	7a33      	ldrb	r3, [r6, #8]
 800e90a:	4252      	negs	r2, r2
 800e90c:	1ad2      	subs	r2, r2, r3
 800e90e:	e796      	b.n	800e83e <lv_label_refr_text+0x126>
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
 800e910:	4946      	ldr	r1, [pc, #280]	; (800ea2c <lv_label_refr_text+0x314>)
 800e912:	4628      	mov	r0, r5
 800e914:	f7fe fcbc 	bl	800d290 <lv_anim_del>
            ext->offset.x = 0;
 800e918:	8167      	strh	r7, [r4, #10]
 800e91a:	e7eb      	b.n	800e8f4 <lv_label_refr_text+0x1dc>
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
 800e91c:	4944      	ldr	r1, [pc, #272]	; (800ea30 <lv_label_refr_text+0x318>)
 800e91e:	4628      	mov	r0, r5
 800e920:	f7fe fcb6 	bl	800d290 <lv_anim_del>
            ext->offset.y = 0;
 800e924:	2300      	movs	r3, #0
 800e926:	81a3      	strh	r3, [r4, #12]
 800e928:	e72f      	b.n	800e78a <lv_label_refr_text+0x72>
    } else if(ext->long_mode == LV_LABEL_LONG_DOT) {
 800e92a:	2b02      	cmp	r3, #2
 800e92c:	d172      	bne.n	800ea14 <lv_label_refr_text+0x2fc>
        if(size.y <= lv_obj_get_height(label)) { /*No dots are required, the text is short enough*/
 800e92e:	4628      	mov	r0, r5
 800e930:	f9bd 601e 	ldrsh.w	r6, [sp, #30]
 800e934:	f7fa f954 	bl	8008be0 <lv_obj_get_height>
 800e938:	4286      	cmp	r6, r0
 800e93a:	dc03      	bgt.n	800e944 <lv_label_refr_text+0x22c>
            ext->dot_end = LV_LABEL_DOT_END_INV;
 800e93c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e940:	8123      	strh	r3, [r4, #8]
 800e942:	e722      	b.n	800e78a <lv_label_refr_text+0x72>
        } else if(lv_txt_get_encoded_length(ext->text) <= LV_LABEL_DOT_NUM) { /*Don't turn to dots all the characters*/
 800e944:	4b3c      	ldr	r3, [pc, #240]	; (800ea38 <lv_label_refr_text+0x320>)
 800e946:	6820      	ldr	r0, [r4, #0]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	4798      	blx	r3
 800e94c:	2803      	cmp	r0, #3
 800e94e:	d9f5      	bls.n	800e93c <lv_label_refr_text+0x224>
            p.x = lv_obj_get_width(label) -
 800e950:	4628      	mov	r0, r5
 800e952:	f7fa f93f 	bl	8008bd4 <lv_obj_get_width>
                  (lv_font_get_glyph_width(style->text.font, '.', '.') + style->text.letter_space) *
 800e956:	222e      	movs	r2, #46	; 0x2e
 800e958:	4611      	mov	r1, r2
            p.x = lv_obj_get_width(label) -
 800e95a:	4606      	mov	r6, r0
                  (lv_font_get_glyph_width(style->text.font, '.', '.') + style->text.letter_space) *
 800e95c:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
                lv_txt_encoded_next(ext->text, &byte_id);
 800e960:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 800ea44 <lv_label_refr_text+0x32c>
                  (lv_font_get_glyph_width(style->text.font, '.', '.') + style->text.letter_space) *
 800e964:	f7fe f9ae 	bl	800ccc4 <lv_font_get_glyph_width>
 800e968:	f9b8 3028 	ldrsh.w	r3, [r8, #40]	; 0x28
 800e96c:	4418      	add	r0, r3
            p.x = lv_obj_get_width(label) -
 800e96e:	ebc0 3380 	rsb	r3, r0, r0, lsl #14
 800e972:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800e976:	4430      	add	r0, r6
 800e978:	f8ad 0020 	strh.w	r0, [sp, #32]
            p.y = lv_obj_get_height(label);
 800e97c:	4628      	mov	r0, r5
 800e97e:	f7fa f92f 	bl	8008be0 <lv_obj_get_height>
                   (lv_font_get_line_height(style->text.font) + style->text.line_space); /*Round down to the last line*/
 800e982:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 800e986:	f9b8 102a 	ldrsh.w	r1, [r8, #42]	; 0x2a
 800e98a:	7a1b      	ldrb	r3, [r3, #8]
 800e98c:	440b      	add	r3, r1
            p.y -= p.y %
 800e98e:	fb90 f2f3 	sdiv	r2, r0, r3
 800e992:	fb03 0312 	mls	r3, r3, r2, r0
 800e996:	1ac0      	subs	r0, r0, r3
            p.y -= style->text.line_space;                                               /*Trim the last line space*/
 800e998:	1a40      	subs	r0, r0, r1
 800e99a:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
 800e99e:	a908      	add	r1, sp, #32
 800e9a0:	4628      	mov	r0, r5
 800e9a2:	f7ff fe05 	bl	800e5b0 <lv_label_get_letter_on>
            uint32_t byte_id     = lv_txt_encoded_get_byte_id(ext->text, letter_id);
 800e9a6:	4b25      	ldr	r3, [pc, #148]	; (800ea3c <lv_label_refr_text+0x324>)
 800e9a8:	4601      	mov	r1, r0
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
 800e9aa:	4680      	mov	r8, r0
            uint32_t byte_id     = lv_txt_encoded_get_byte_id(ext->text, letter_id);
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	6820      	ldr	r0, [r4, #0]
 800e9b0:	4798      	blx	r3
 800e9b2:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
                len += lv_txt_encoded_size(&ext->text[byte_id]);
 800e9b6:	4a22      	ldr	r2, [pc, #136]	; (800ea40 <lv_label_refr_text+0x328>)
            uint32_t byte_id     = lv_txt_encoded_get_byte_id(ext->text, letter_id);
 800e9b8:	f84b 0d24 	str.w	r0, [fp, #-36]!
 800e9bc:	4681      	mov	r9, r0
 800e9be:	2604      	movs	r6, #4
            uint8_t len          = 0;
 800e9c0:	2700      	movs	r7, #0
                len += lv_txt_encoded_size(&ext->text[byte_id]);
 800e9c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9c4:	6820      	ldr	r0, [r4, #0]
 800e9c6:	9205      	str	r2, [sp, #20]
 800e9c8:	4418      	add	r0, r3
 800e9ca:	6813      	ldr	r3, [r2, #0]
 800e9cc:	4798      	blx	r3
                lv_txt_encoded_next(ext->text, &byte_id);
 800e9ce:	4659      	mov	r1, fp
                len += lv_txt_encoded_size(&ext->text[byte_id]);
 800e9d0:	4407      	add	r7, r0
                lv_txt_encoded_next(ext->text, &byte_id);
 800e9d2:	f8da 3000 	ldr.w	r3, [sl]
 800e9d6:	6820      	ldr	r0, [r4, #0]
 800e9d8:	4798      	blx	r3
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
 800e9da:	3e01      	subs	r6, #1
                len += lv_txt_encoded_size(&ext->text[byte_id]);
 800e9dc:	b2ff      	uxtb	r7, r7
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
 800e9de:	9a05      	ldr	r2, [sp, #20]
 800e9e0:	d1ef      	bne.n	800e9c2 <lv_label_refr_text+0x2aa>
            if(lv_label_set_dot_tmp(label, &ext->text[byte_id_ori], len)) {
 800e9e2:	6821      	ldr	r1, [r4, #0]
 800e9e4:	463a      	mov	r2, r7
 800e9e6:	4449      	add	r1, r9
 800e9e8:	4628      	mov	r0, r5
 800e9ea:	f7ff fc5f 	bl	800e2ac <lv_label_set_dot_tmp>
 800e9ee:	2800      	cmp	r0, #0
 800e9f0:	f43f aecb 	beq.w	800e78a <lv_label_refr_text+0x72>
                    ext->text[byte_id_ori + i] = '.';
 800e9f4:	222e      	movs	r2, #46	; 0x2e
 800e9f6:	6823      	ldr	r3, [r4, #0]
 800e9f8:	444b      	add	r3, r9
 800e9fa:	559a      	strb	r2, [r3, r6]
                for(i = 0; i < LV_LABEL_DOT_NUM; i++) {
 800e9fc:	3601      	adds	r6, #1
 800e9fe:	2e03      	cmp	r6, #3
 800ea00:	d1f9      	bne.n	800e9f6 <lv_label_refr_text+0x2de>
                ext->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
 800ea02:	6823      	ldr	r3, [r4, #0]
 800ea04:	444b      	add	r3, r9
 800ea06:	2200      	movs	r2, #0
                ext->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
 800ea08:	f108 0803 	add.w	r8, r8, #3
                ext->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
 800ea0c:	70da      	strb	r2, [r3, #3]
                ext->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
 800ea0e:	f8a4 8008 	strh.w	r8, [r4, #8]
 800ea12:	e6ba      	b.n	800e78a <lv_label_refr_text+0x72>
    else if(ext->long_mode == LV_LABEL_LONG_BREAK) {
 800ea14:	2b01      	cmp	r3, #1
 800ea16:	f47f aeb8 	bne.w	800e78a <lv_label_refr_text+0x72>
        lv_obj_set_height(label, size.y);
 800ea1a:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 800ea1e:	4628      	mov	r0, r5
 800ea20:	f7fa f882 	bl	8008b28 <lv_obj_set_height>
 800ea24:	e6b1      	b.n	800e78a <lv_label_refr_text+0x72>
 800ea26:	bf00      	nop
 800ea28:	0800d10d 	.word	0x0800d10d
 800ea2c:	0800e297 	.word	0x0800e297
 800ea30:	0800e281 	.word	0x0800e281
 800ea34:	fffffc18 	.word	0xfffffc18
 800ea38:	20000d2c 	.word	0x20000d2c
 800ea3c:	20000d1c 	.word	0x20000d1c
 800ea40:	20000d28 	.word	0x20000d28
 800ea44:	20000d20 	.word	0x20000d20

0800ea48 <lv_label_signal>:
    res = ancestor_signal(label, sign, param);
 800ea48:	4b38      	ldr	r3, [pc, #224]	; (800eb2c <lv_label_signal+0xe4>)
{
 800ea4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    res = ancestor_signal(label, sign, param);
 800ea4e:	681b      	ldr	r3, [r3, #0]
{
 800ea50:	4604      	mov	r4, r0
 800ea52:	460f      	mov	r7, r1
 800ea54:	4616      	mov	r6, r2
    res = ancestor_signal(label, sign, param);
 800ea56:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 800ea58:	2801      	cmp	r0, #1
    res = ancestor_signal(label, sign, param);
 800ea5a:	4605      	mov	r5, r0
    if(res != LV_RES_OK) return res;
 800ea5c:	d110      	bne.n	800ea80 <lv_label_signal+0x38>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800ea5e:	4620      	mov	r0, r4
 800ea60:	f7fa f97a 	bl	8008d58 <lv_obj_get_ext_attr>
 800ea64:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_CLEANUP) {
 800ea66:	b977      	cbnz	r7, 800ea86 <lv_label_signal+0x3e>
        if(ext->static_txt == 0) {
 800ea68:	7f83      	ldrb	r3, [r0, #30]
 800ea6a:	f013 0608 	ands.w	r6, r3, #8
 800ea6e:	d104      	bne.n	800ea7a <lv_label_signal+0x32>
            lv_mem_free(ext->text);
 800ea70:	6800      	ldr	r0, [r0, #0]
 800ea72:	f7fe ffbf 	bl	800d9f4 <lv_mem_free>
            ext->text = NULL;
 800ea76:	f8c8 6000 	str.w	r6, [r8]
        lv_label_dot_tmp_free(label);
 800ea7a:	4620      	mov	r0, r4
 800ea7c:	f7ff fbb6 	bl	800e1ec <lv_label_dot_tmp_free>
}
 800ea80:	4628      	mov	r0, r5
 800ea82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 800ea86:	2f04      	cmp	r7, #4
 800ea88:	d106      	bne.n	800ea98 <lv_label_signal+0x50>
        lv_label_revert_dots(label);
 800ea8a:	4620      	mov	r0, r4
 800ea8c:	f7ff fbc0 	bl	800e210 <lv_label_revert_dots>
        lv_label_refr_text(label);
 800ea90:	4620      	mov	r0, r4
 800ea92:	f7ff fe41 	bl	800e718 <lv_label_refr_text>
 800ea96:	e7f3      	b.n	800ea80 <lv_label_signal+0x38>
    } else if(sign == LV_SIGNAL_CORD_CHG) {
 800ea98:	2f02      	cmp	r7, #2
 800ea9a:	d118      	bne.n	800eace <lv_label_signal+0x86>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return area_p->x2 - area_p->x1 + 1;
 800ea9c:	8aa2      	ldrh	r2, [r4, #20]
 800ea9e:	8a23      	ldrh	r3, [r4, #16]
 800eaa0:	8831      	ldrh	r1, [r6, #0]
 800eaa2:	3201      	adds	r2, #1
 800eaa4:	1ad2      	subs	r2, r2, r3
 800eaa6:	88b3      	ldrh	r3, [r6, #4]
 800eaa8:	3301      	adds	r3, #1
 800eaaa:	1a5b      	subs	r3, r3, r1
        if(lv_area_get_width(&label->coords) != lv_area_get_width(param) ||
 800eaac:	b292      	uxth	r2, r2
 800eaae:	b29b      	uxth	r3, r3
 800eab0:	429a      	cmp	r2, r3
 800eab2:	d1ea      	bne.n	800ea8a <lv_label_signal+0x42>
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 800eab4:	8ae2      	ldrh	r2, [r4, #22]
 800eab6:	8a63      	ldrh	r3, [r4, #18]
 800eab8:	8871      	ldrh	r1, [r6, #2]
 800eaba:	3201      	adds	r2, #1
 800eabc:	1ad2      	subs	r2, r2, r3
 800eabe:	88f3      	ldrh	r3, [r6, #6]
 800eac0:	3301      	adds	r3, #1
 800eac2:	1a5b      	subs	r3, r3, r1
 800eac4:	b292      	uxth	r2, r2
 800eac6:	b29b      	uxth	r3, r3
 800eac8:	429a      	cmp	r2, r3
 800eaca:	d1de      	bne.n	800ea8a <lv_label_signal+0x42>
 800eacc:	e7d8      	b.n	800ea80 <lv_label_signal+0x38>
    } else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 800eace:	2f05      	cmp	r7, #5
 800ead0:	d11d      	bne.n	800eb0e <lv_label_signal+0xc6>
        if(ext->body_draw) {
 800ead2:	7fc3      	ldrb	r3, [r0, #31]
 800ead4:	07db      	lsls	r3, r3, #31
 800ead6:	d5d3      	bpl.n	800ea80 <lv_label_signal+0x38>
 * @return pointer to the label's style
 */
static inline const lv_style_t * lv_label_get_style(const lv_obj_t * label, lv_label_style_t type)
{
    (void)type; /*Unused*/
    return lv_obj_get_style(label);
 800ead8:	4620      	mov	r0, r4
 800eada:	f7fa f887 	bl	8008bec <lv_obj_get_style>
            label->ext_draw_pad = LV_MATH_MAX(label->ext_draw_pad, style->body.padding.right);
 800eade:	f9b0 301a 	ldrsh.w	r3, [r0, #26]
 800eae2:	f9b0 201c 	ldrsh.w	r2, [r0, #28]
 800eae6:	4293      	cmp	r3, r2
 800eae8:	bfb8      	it	lt
 800eaea:	4613      	movlt	r3, r2
 800eaec:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
            label->ext_draw_pad = LV_MATH_MAX(label->ext_draw_pad, style->body.padding.top);
 800eaf0:	4293      	cmp	r3, r2
 800eaf2:	bfb8      	it	lt
 800eaf4:	4613      	movlt	r3, r2
 800eaf6:	f9b0 2016 	ldrsh.w	r2, [r0, #22]
            label->ext_draw_pad = LV_MATH_MAX(label->ext_draw_pad, style->body.padding.bottom);
 800eafa:	4293      	cmp	r3, r2
 800eafc:	bfb8      	it	lt
 800eafe:	4613      	movlt	r3, r2
 800eb00:	f9b0 2018 	ldrsh.w	r2, [r0, #24]
 800eb04:	4293      	cmp	r3, r2
 800eb06:	bfb8      	it	lt
 800eb08:	4613      	movlt	r3, r2
 800eb0a:	86a3      	strh	r3, [r4, #52]	; 0x34
 800eb0c:	e7b8      	b.n	800ea80 <lv_label_signal+0x38>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 800eb0e:	2f06      	cmp	r7, #6
 800eb10:	d1b6      	bne.n	800ea80 <lv_label_signal+0x38>
 800eb12:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 800eb14:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 800eb18:	b2da      	uxtb	r2, r3
 800eb1a:	b119      	cbz	r1, 800eb24 <lv_label_signal+0xdc>
 800eb1c:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 800eb1e:	2b07      	cmp	r3, #7
 800eb20:	d1f8      	bne.n	800eb14 <lv_label_signal+0xcc>
 800eb22:	461a      	mov	r2, r3
        buf->type[i] = "lv_label";
 800eb24:	4b02      	ldr	r3, [pc, #8]	; (800eb30 <lv_label_signal+0xe8>)
 800eb26:	f846 3022 	str.w	r3, [r6, r2, lsl #2]
 800eb2a:	e7a9      	b.n	800ea80 <lv_label_signal+0x38>
 800eb2c:	2000c370 	.word	0x2000c370
 800eb30:	0801475b 	.word	0x0801475b

0800eb34 <lv_label_set_text>:
{
 800eb34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb38:	4680      	mov	r8, r0
 800eb3a:	460d      	mov	r5, r1
    lv_obj_invalidate(label);
 800eb3c:	f7f9 fb7e 	bl	800823c <lv_obj_invalidate>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800eb40:	4640      	mov	r0, r8
 800eb42:	f7fa f909 	bl	8008d58 <lv_obj_get_ext_attr>
 800eb46:	4604      	mov	r4, r0
    if(text == NULL) {
 800eb48:	b925      	cbnz	r5, 800eb54 <lv_label_set_text+0x20>
        lv_label_refr_text(label);
 800eb4a:	4640      	mov	r0, r8
}
 800eb4c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        lv_label_refr_text(label);
 800eb50:	f7ff bde2 	b.w	800e718 <lv_label_refr_text>
    if(ext->text == text) {
 800eb54:	6807      	ldr	r7, [r0, #0]
 800eb56:	42bd      	cmp	r5, r7
        ext->text = lv_mem_realloc(ext->text, strlen(ext->text) + 1);
 800eb58:	4628      	mov	r0, r5
    if(ext->text == text) {
 800eb5a:	d109      	bne.n	800eb70 <lv_label_set_text+0x3c>
        ext->text = lv_mem_realloc(ext->text, strlen(ext->text) + 1);
 800eb5c:	f7f1 fb42 	bl	80001e4 <strlen>
 800eb60:	1c41      	adds	r1, r0, #1
 800eb62:	4628      	mov	r0, r5
 800eb64:	f7fe ff70 	bl	800da48 <lv_mem_realloc>
 800eb68:	6020      	str	r0, [r4, #0]
        lv_mem_assert(ext->text);
 800eb6a:	2800      	cmp	r0, #0
 800eb6c:	d1ed      	bne.n	800eb4a <lv_label_set_text+0x16>
 800eb6e:	e7fe      	b.n	800eb6e <lv_label_set_text+0x3a>
        uint32_t len = strlen(text) + 1;
 800eb70:	f7f1 fb38 	bl	80001e4 <strlen>
 800eb74:	f100 0901 	add.w	r9, r0, #1
        if(ext->text != NULL && ext->static_txt == 0) {
 800eb78:	b13f      	cbz	r7, 800eb8a <lv_label_set_text+0x56>
 800eb7a:	7fa3      	ldrb	r3, [r4, #30]
 800eb7c:	f013 0608 	ands.w	r6, r3, #8
 800eb80:	d103      	bne.n	800eb8a <lv_label_set_text+0x56>
            lv_mem_free(ext->text);
 800eb82:	4638      	mov	r0, r7
 800eb84:	f7fe ff36 	bl	800d9f4 <lv_mem_free>
            ext->text = NULL;
 800eb88:	6026      	str	r6, [r4, #0]
        ext->text = lv_mem_alloc(len);
 800eb8a:	4648      	mov	r0, r9
 800eb8c:	f7fe fefc 	bl	800d988 <lv_mem_alloc>
 800eb90:	6020      	str	r0, [r4, #0]
        lv_mem_assert(ext->text);
 800eb92:	b900      	cbnz	r0, 800eb96 <lv_label_set_text+0x62>
 800eb94:	e7fe      	b.n	800eb94 <lv_label_set_text+0x60>
        strcpy(ext->text, text);
 800eb96:	4629      	mov	r1, r5
 800eb98:	f000 fc1e 	bl	800f3d8 <strcpy>
        ext->static_txt = 0; /*Now the text is dynamically allocated*/
 800eb9c:	7fa3      	ldrb	r3, [r4, #30]
 800eb9e:	f36f 03c3 	bfc	r3, #3, #1
 800eba2:	77a3      	strb	r3, [r4, #30]
 800eba4:	e7d1      	b.n	800eb4a <lv_label_set_text+0x16>

0800eba6 <lv_label_set_static_text>:
{
 800eba6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eba8:	4607      	mov	r7, r0
 800ebaa:	460e      	mov	r6, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800ebac:	f7fa f8d4 	bl	8008d58 <lv_obj_get_ext_attr>
    if(ext->static_txt == 0 && ext->text != NULL) {
 800ebb0:	7f83      	ldrb	r3, [r0, #30]
 800ebb2:	f013 0508 	ands.w	r5, r3, #8
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800ebb6:	4604      	mov	r4, r0
    if(ext->static_txt == 0 && ext->text != NULL) {
 800ebb8:	d104      	bne.n	800ebc4 <lv_label_set_static_text+0x1e>
 800ebba:	6800      	ldr	r0, [r0, #0]
 800ebbc:	b110      	cbz	r0, 800ebc4 <lv_label_set_static_text+0x1e>
        lv_mem_free(ext->text);
 800ebbe:	f7fe ff19 	bl	800d9f4 <lv_mem_free>
        ext->text = NULL;
 800ebc2:	6025      	str	r5, [r4, #0]
    if(text != NULL) {
 800ebc4:	b126      	cbz	r6, 800ebd0 <lv_label_set_static_text+0x2a>
        ext->static_txt = 1;
 800ebc6:	7fa3      	ldrb	r3, [r4, #30]
        ext->text       = (char *)text;
 800ebc8:	6026      	str	r6, [r4, #0]
        ext->static_txt = 1;
 800ebca:	f043 0308 	orr.w	r3, r3, #8
 800ebce:	77a3      	strb	r3, [r4, #30]
    lv_label_refr_text(label);
 800ebd0:	4638      	mov	r0, r7
}
 800ebd2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_label_refr_text(label);
 800ebd6:	f7ff bd9f 	b.w	800e718 <lv_label_refr_text>
	...

0800ebdc <lv_label_set_long_mode>:
{
 800ebdc:	b570      	push	{r4, r5, r6, lr}
 800ebde:	4605      	mov	r5, r0
 800ebe0:	460e      	mov	r6, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800ebe2:	f7fa f8b9 	bl	8008d58 <lv_obj_get_ext_attr>
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_obj_set_x);
 800ebe6:	491a      	ldr	r1, [pc, #104]	; (800ec50 <lv_label_set_long_mode+0x74>)
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800ebe8:	4604      	mov	r4, r0
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_obj_set_x);
 800ebea:	4628      	mov	r0, r5
 800ebec:	f7fe fb50 	bl	800d290 <lv_anim_del>
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_obj_set_y);
 800ebf0:	4918      	ldr	r1, [pc, #96]	; (800ec54 <lv_label_set_long_mode+0x78>)
 800ebf2:	4628      	mov	r0, r5
 800ebf4:	f7fe fb4c 	bl	800d290 <lv_anim_del>
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
 800ebf8:	4917      	ldr	r1, [pc, #92]	; (800ec58 <lv_label_set_long_mode+0x7c>)
 800ebfa:	4628      	mov	r0, r5
 800ebfc:	f7fe fb48 	bl	800d290 <lv_anim_del>
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
 800ec00:	4916      	ldr	r1, [pc, #88]	; (800ec5c <lv_label_set_long_mode+0x80>)
 800ec02:	4628      	mov	r0, r5
 800ec04:	f7fe fb44 	bl	800d290 <lv_anim_del>
    if(long_mode == LV_LABEL_LONG_SROLL || long_mode == LV_LABEL_LONG_SROLL_CIRC || long_mode == LV_LABEL_LONG_CROP)
 800ec08:	1ef3      	subs	r3, r6, #3
 800ec0a:	2b02      	cmp	r3, #2
 800ec0c:	7fa3      	ldrb	r3, [r4, #30]
    ext->offset.x = 0;
 800ec0e:	f04f 0200 	mov.w	r2, #0
        ext->expand = 1;
 800ec12:	bf94      	ite	ls
 800ec14:	f043 0380 	orrls.w	r3, r3, #128	; 0x80
        ext->expand = 0;
 800ec18:	f362 13c7 	bfihi	r3, r2, #7, #1
 800ec1c:	77a3      	strb	r3, [r4, #30]
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
 800ec1e:	7fa3      	ldrb	r3, [r4, #30]
    ext->offset.x = 0;
 800ec20:	8162      	strh	r2, [r4, #10]
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
 800ec22:	f003 0307 	and.w	r3, r3, #7
 800ec26:	2b02      	cmp	r3, #2
    ext->offset.y = 0;
 800ec28:	81a2      	strh	r2, [r4, #12]
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
 800ec2a:	d107      	bne.n	800ec3c <lv_label_set_long_mode+0x60>
 800ec2c:	8922      	ldrh	r2, [r4, #8]
 800ec2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ec32:	429a      	cmp	r2, r3
 800ec34:	d002      	beq.n	800ec3c <lv_label_set_long_mode+0x60>
        lv_label_revert_dots(label);
 800ec36:	4628      	mov	r0, r5
 800ec38:	f7ff faea 	bl	800e210 <lv_label_revert_dots>
    ext->long_mode = long_mode;
 800ec3c:	7fa3      	ldrb	r3, [r4, #30]
 800ec3e:	f366 0302 	bfi	r3, r6, #0, #3
 800ec42:	77a3      	strb	r3, [r4, #30]
    lv_label_refr_text(label);
 800ec44:	4628      	mov	r0, r5
}
 800ec46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_label_refr_text(label);
 800ec4a:	f7ff bd65 	b.w	800e718 <lv_label_refr_text>
 800ec4e:	bf00      	nop
 800ec50:	0800839d 	.word	0x0800839d
 800ec54:	080083b1 	.word	0x080083b1
 800ec58:	0800e297 	.word	0x0800e297
 800ec5c:	0800e281 	.word	0x0800e281

0800ec60 <lv_label_set_recolor>:
{
 800ec60:	b538      	push	{r3, r4, r5, lr}
 800ec62:	460c      	mov	r4, r1
 800ec64:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800ec66:	f7fa f877 	bl	8008d58 <lv_obj_get_ext_attr>
    if(ext->recolor == en) return;
 800ec6a:	7f83      	ldrb	r3, [r0, #30]
 800ec6c:	f3c3 1280 	ubfx	r2, r3, #6, #1
 800ec70:	42a2      	cmp	r2, r4
 800ec72:	d007      	beq.n	800ec84 <lv_label_set_recolor+0x24>
    ext->recolor = en == false ? 0 : 1;
 800ec74:	f364 1386 	bfi	r3, r4, #6, #1
 800ec78:	7783      	strb	r3, [r0, #30]
    lv_label_refr_text(label); /*Refresh the text because the potential colo codes in text needs to
 800ec7a:	4628      	mov	r0, r5
}
 800ec7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_label_refr_text(label); /*Refresh the text because the potential colo codes in text needs to
 800ec80:	f7ff bd4a 	b.w	800e718 <lv_label_refr_text>
 800ec84:	bd38      	pop	{r3, r4, r5, pc}
	...

0800ec88 <lv_label_create>:
{
 800ec88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec8c:	460e      	mov	r6, r1
    lv_obj_t * new_label = lv_obj_create(par, copy);
 800ec8e:	f7f9 fdb9 	bl	8008804 <lv_obj_create>
    lv_mem_assert(new_label);
 800ec92:	4605      	mov	r5, r0
 800ec94:	b900      	cbnz	r0, 800ec98 <lv_label_create+0x10>
 800ec96:	e7fe      	b.n	800ec96 <lv_label_create+0xe>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_label);
 800ec98:	4c57      	ldr	r4, [pc, #348]	; (800edf8 <lv_label_create+0x170>)
 800ec9a:	6823      	ldr	r3, [r4, #0]
 800ec9c:	b913      	cbnz	r3, 800eca4 <lv_label_create+0x1c>
 800ec9e:	f7fa f859 	bl	8008d54 <lv_obj_get_signal_cb>
 800eca2:	6020      	str	r0, [r4, #0]
    lv_obj_allocate_ext_attr(new_label, sizeof(lv_label_ext_t));
 800eca4:	2120      	movs	r1, #32
 800eca6:	4628      	mov	r0, r5
 800eca8:	f7f9 fa9b 	bl	80081e2 <lv_obj_allocate_ext_attr>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(new_label);
 800ecac:	4628      	mov	r0, r5
 800ecae:	f7fa f853 	bl	8008d58 <lv_obj_get_ext_attr>
    lv_mem_assert(ext);
 800ecb2:	4604      	mov	r4, r0
 800ecb4:	b900      	cbnz	r0, 800ecb8 <lv_label_create+0x30>
 800ecb6:	e7fe      	b.n	800ecb6 <lv_label_create+0x2e>
    ext->static_txt = 0;
 800ecb8:	7f81      	ldrb	r1, [r0, #30]
    ext->body_draw  = 0;
 800ecba:	7fc2      	ldrb	r2, [r0, #31]
    ext->text       = NULL;
 800ecbc:	2300      	movs	r3, #0
    ext->long_mode  = LV_LABEL_LONG_EXPAND;
 800ecbe:	f001 0187 	and.w	r1, r1, #135	; 0x87
 800ecc2:	f363 0102 	bfi	r1, r3, #0, #3
    ext->text       = NULL;
 800ecc6:	6003      	str	r3, [r0, #0]
    ext->dot_tmp_alloc = 0;
 800ecc8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    ext->long_mode  = LV_LABEL_LONG_EXPAND;
 800eccc:	77a1      	strb	r1, [r4, #30]
    ext->anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 800ecce:	2119      	movs	r1, #25
    ext->dot_end    = LV_LABEL_DOT_END_INV;
 800ecd0:	f64f 70ff 	movw	r0, #65535	; 0xffff
    ext->anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 800ecd4:	83a1      	strh	r1, [r4, #28]
    ext->dot_tmp_alloc = 0;
 800ecd6:	f363 0241 	bfi	r2, r3, #1, #1
    ext->hint.line_start = -1;
 800ecda:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ext->dot_end    = LV_LABEL_DOT_END_INV;
 800ecde:	8120      	strh	r0, [r4, #8]
    ext->hint.line_start = -1;
 800ece0:	6121      	str	r1, [r4, #16]
    lv_obj_set_design_cb(new_label, lv_label_design);
 800ece2:	4628      	mov	r0, r5
 800ece4:	4945      	ldr	r1, [pc, #276]	; (800edfc <lv_label_create+0x174>)
    ext->offset.x = 0;
 800ece6:	8163      	strh	r3, [r4, #10]
    ext->offset.y = 0;
 800ece8:	81a3      	strh	r3, [r4, #12]
    ext->hint.coord_y    = 0;
 800ecea:	61a3      	str	r3, [r4, #24]
    ext->hint.y          = 0;
 800ecec:	6163      	str	r3, [r4, #20]
    ext->dot.tmp_ptr   = NULL;
 800ecee:	6063      	str	r3, [r4, #4]
    ext->dot_tmp_alloc = 0;
 800ecf0:	77e2      	strb	r2, [r4, #31]
    lv_obj_set_design_cb(new_label, lv_label_design);
 800ecf2:	f7f9 fa74 	bl	80081de <lv_obj_set_design_cb>
    lv_obj_set_signal_cb(new_label, lv_label_signal);
 800ecf6:	4942      	ldr	r1, [pc, #264]	; (800ee00 <lv_label_create+0x178>)
 800ecf8:	4628      	mov	r0, r5
 800ecfa:	f7f9 fa6e 	bl	80081da <lv_obj_set_signal_cb>
    if(copy == NULL) {
 800ecfe:	b996      	cbnz	r6, 800ed26 <lv_label_create+0x9e>
        lv_obj_set_click(new_label, false);
 800ed00:	4631      	mov	r1, r6
 800ed02:	4628      	mov	r0, r5
 800ed04:	f7f9 fa14 	bl	8008130 <lv_obj_set_click>
        lv_label_set_long_mode(new_label, LV_LABEL_LONG_EXPAND);
 800ed08:	4631      	mov	r1, r6
 800ed0a:	4628      	mov	r0, r5
 800ed0c:	f7ff ff66 	bl	800ebdc <lv_label_set_long_mode>
        lv_label_set_text(new_label, "Text");
 800ed10:	493c      	ldr	r1, [pc, #240]	; (800ee04 <lv_label_create+0x17c>)
 800ed12:	4628      	mov	r0, r5
 800ed14:	f7ff ff0e 	bl	800eb34 <lv_label_set_text>
    lv_obj_set_style(label, style);
 800ed18:	4631      	mov	r1, r6
 800ed1a:	4628      	mov	r0, r5
 800ed1c:	f7f9 ff4a 	bl	8008bb4 <lv_obj_set_style>
}
 800ed20:	4628      	mov	r0, r5
 800ed22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lv_label_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 800ed26:	4630      	mov	r0, r6
 800ed28:	f7fa f816 	bl	8008d58 <lv_obj_get_ext_attr>
 800ed2c:	4607      	mov	r7, r0
        lv_label_set_long_mode(new_label, lv_label_get_long_mode(copy));
 800ed2e:	4630      	mov	r0, r6
 800ed30:	f7ff fc21 	bl	800e576 <lv_label_get_long_mode>
 800ed34:	4601      	mov	r1, r0
 800ed36:	4628      	mov	r0, r5
 800ed38:	f7ff ff50 	bl	800ebdc <lv_label_set_long_mode>
        lv_label_set_recolor(new_label, lv_label_get_recolor(copy));
 800ed3c:	4630      	mov	r0, r6
 800ed3e:	f7ff fc28 	bl	800e592 <lv_label_get_recolor>
 800ed42:	4601      	mov	r1, r0
 800ed44:	4628      	mov	r0, r5
 800ed46:	f7ff ff8b 	bl	800ec60 <lv_label_set_recolor>
        lv_label_set_body_draw(new_label, lv_label_get_body_draw(copy));
 800ed4a:	4630      	mov	r0, r6
 800ed4c:	f7ff fc28 	bl	800e5a0 <lv_label_get_body_draw>
 800ed50:	4601      	mov	r1, r0
 800ed52:	4628      	mov	r0, r5
 800ed54:	f7ff fbf4 	bl	800e540 <lv_label_set_body_draw>
        lv_label_set_align(new_label, lv_label_get_align(copy));
 800ed58:	4630      	mov	r0, r6
 800ed5a:	f7ff fc13 	bl	800e584 <lv_label_get_align>
 800ed5e:	4601      	mov	r1, r0
 800ed60:	4628      	mov	r0, r5
 800ed62:	f7ff fbda 	bl	800e51a <lv_label_set_align>
        if(copy_ext->static_txt == 0)
 800ed66:	7fbb      	ldrb	r3, [r7, #30]
 800ed68:	071a      	lsls	r2, r3, #28
            lv_label_set_text(new_label, lv_label_get_text(copy));
 800ed6a:	4630      	mov	r0, r6
        if(copy_ext->static_txt == 0)
 800ed6c:	d416      	bmi.n	800ed9c <lv_label_create+0x114>
            lv_label_set_text(new_label, lv_label_get_text(copy));
 800ed6e:	f7ff fbfd 	bl	800e56c <lv_label_get_text>
 800ed72:	4601      	mov	r1, r0
 800ed74:	4628      	mov	r0, r5
 800ed76:	f7ff fedd 	bl	800eb34 <lv_label_set_text>
        if(copy_ext->long_mode == LV_LABEL_LONG_DOT) {
 800ed7a:	7fbb      	ldrb	r3, [r7, #30]
 800ed7c:	f003 0307 	and.w	r3, r3, #7
 800ed80:	2b02      	cmp	r3, #2
 800ed82:	d11c      	bne.n	800edbe <lv_label_create+0x136>
            ext->text = lv_mem_realloc(ext->text, lv_mem_get_size(copy_ext->text));
 800ed84:	6838      	ldr	r0, [r7, #0]
 800ed86:	6826      	ldr	r6, [r4, #0]
 800ed88:	f7fe fe26 	bl	800d9d8 <lv_mem_get_size>
 800ed8c:	4601      	mov	r1, r0
 800ed8e:	4630      	mov	r0, r6
 800ed90:	f7fe fe5a 	bl	800da48 <lv_mem_realloc>
 800ed94:	4606      	mov	r6, r0
 800ed96:	6020      	str	r0, [r4, #0]
            lv_mem_assert(ext->text);
 800ed98:	b938      	cbnz	r0, 800edaa <lv_label_create+0x122>
 800ed9a:	e7fe      	b.n	800ed9a <lv_label_create+0x112>
            lv_label_set_static_text(new_label, lv_label_get_text(copy));
 800ed9c:	f7ff fbe6 	bl	800e56c <lv_label_get_text>
 800eda0:	4601      	mov	r1, r0
 800eda2:	4628      	mov	r0, r5
 800eda4:	f7ff feff 	bl	800eba6 <lv_label_set_static_text>
 800eda8:	e7e7      	b.n	800ed7a <lv_label_create+0xf2>
            memcpy(ext->text, copy_ext->text, lv_mem_get_size(copy_ext->text));
 800edaa:	f8d7 8000 	ldr.w	r8, [r7]
 800edae:	4640      	mov	r0, r8
 800edb0:	f7fe fe12 	bl	800d9d8 <lv_mem_get_size>
 800edb4:	4641      	mov	r1, r8
 800edb6:	4602      	mov	r2, r0
 800edb8:	4630      	mov	r0, r6
 800edba:	f000 fab9 	bl	800f330 <memcpy>
        if(copy_ext->dot_tmp_alloc && copy_ext->dot.tmp_ptr) {
 800edbe:	7ffb      	ldrb	r3, [r7, #31]
 800edc0:	079b      	lsls	r3, r3, #30
 800edc2:	d515      	bpl.n	800edf0 <lv_label_create+0x168>
 800edc4:	6878      	ldr	r0, [r7, #4]
 800edc6:	b198      	cbz	r0, 800edf0 <lv_label_create+0x168>
            int len = strlen(copy_ext->dot.tmp_ptr);
 800edc8:	f7f1 fa0c 	bl	80001e4 <strlen>
            lv_label_set_dot_tmp(new_label, ext->dot.tmp_ptr, len);
 800edcc:	6861      	ldr	r1, [r4, #4]
 800edce:	b282      	uxth	r2, r0
 800edd0:	4628      	mov	r0, r5
 800edd2:	f7ff fa6b 	bl	800e2ac <lv_label_set_dot_tmp>
        ext->dot_tmp_alloc = copy_ext->dot_tmp_alloc;
 800edd6:	7ffb      	ldrb	r3, [r7, #31]
 800edd8:	7fe2      	ldrb	r2, [r4, #31]
 800edda:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800edde:	f363 0241 	bfi	r2, r3, #1, #1
 800ede2:	77e2      	strb	r2, [r4, #31]
        ext->dot_end       = copy_ext->dot_end;
 800ede4:	893b      	ldrh	r3, [r7, #8]
 800ede6:	8123      	strh	r3, [r4, #8]
        lv_obj_refresh_style(new_label);
 800ede8:	4628      	mov	r0, r5
 800edea:	f7f9 fea5 	bl	8008b38 <lv_obj_refresh_style>
 800edee:	e797      	b.n	800ed20 <lv_label_create+0x98>
            memcpy(ext->dot.tmp, copy_ext->dot.tmp, sizeof(ext->dot.tmp));
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	6063      	str	r3, [r4, #4]
 800edf4:	e7ef      	b.n	800edd6 <lv_label_create+0x14e>
 800edf6:	bf00      	nop
 800edf8:	2000c370 	.word	0x2000c370
 800edfc:	0800e2ff 	.word	0x0800e2ff
 800ee00:	0800ea49 	.word	0x0800ea49
 800ee04:	08014756 	.word	0x08014756

0800ee08 <lv_theme_get_current>:
    if(!inited)
        return NULL;
    else
        return &current_theme;
#endif
}
 800ee08:	4b01      	ldr	r3, [pc, #4]	; (800ee10 <lv_theme_get_current+0x8>)
 800ee0a:	6818      	ldr	r0, [r3, #0]
 800ee0c:	4770      	bx	lr
 800ee0e:	bf00      	nop
 800ee10:	2000c374 	.word	0x2000c374

0800ee14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800ee14:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ee4c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800ee18:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800ee1a:	e003      	b.n	800ee24 <LoopCopyDataInit>

0800ee1c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800ee1c:	4b0c      	ldr	r3, [pc, #48]	; (800ee50 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800ee1e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800ee20:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800ee22:	3104      	adds	r1, #4

0800ee24 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800ee24:	480b      	ldr	r0, [pc, #44]	; (800ee54 <LoopForever+0xa>)
	ldr	r3, =_edata
 800ee26:	4b0c      	ldr	r3, [pc, #48]	; (800ee58 <LoopForever+0xe>)
	adds	r2, r0, r1
 800ee28:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800ee2a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800ee2c:	d3f6      	bcc.n	800ee1c <CopyDataInit>
	ldr	r2, =_sbss
 800ee2e:	4a0b      	ldr	r2, [pc, #44]	; (800ee5c <LoopForever+0x12>)
	b	LoopFillZerobss
 800ee30:	e002      	b.n	800ee38 <LoopFillZerobss>

0800ee32 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800ee32:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800ee34:	f842 3b04 	str.w	r3, [r2], #4

0800ee38 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800ee38:	4b09      	ldr	r3, [pc, #36]	; (800ee60 <LoopForever+0x16>)
	cmp	r2, r3
 800ee3a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800ee3c:	d3f9      	bcc.n	800ee32 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800ee3e:	f7f3 f9b5 	bl	80021ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800ee42:	f000 f843 	bl	800eecc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800ee46:	f7f2 fccb 	bl	80017e0 <main>

0800ee4a <LoopForever>:

LoopForever:
    b LoopForever
 800ee4a:	e7fe      	b.n	800ee4a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800ee4c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800ee50:	080149dc 	.word	0x080149dc
	ldr	r0, =_sdata
 800ee54:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800ee58:	200013a0 	.word	0x200013a0
	ldr	r2, =_sbss
 800ee5c:	200013a0 	.word	0x200013a0
	ldr	r3, = _ebss
 800ee60:	2000d958 	.word	0x2000d958

0800ee64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800ee64:	e7fe      	b.n	800ee64 <ADC1_2_IRQHandler>

0800ee66 <_calloc_r>:
 800ee66:	b510      	push	{r4, lr}
 800ee68:	4351      	muls	r1, r2
 800ee6a:	f000 f853 	bl	800ef14 <_malloc_r>
 800ee6e:	4604      	mov	r4, r0
 800ee70:	b198      	cbz	r0, 800ee9a <_calloc_r+0x34>
 800ee72:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800ee76:	f022 0203 	bic.w	r2, r2, #3
 800ee7a:	3a04      	subs	r2, #4
 800ee7c:	2a24      	cmp	r2, #36	; 0x24
 800ee7e:	d81b      	bhi.n	800eeb8 <_calloc_r+0x52>
 800ee80:	2a13      	cmp	r2, #19
 800ee82:	d917      	bls.n	800eeb4 <_calloc_r+0x4e>
 800ee84:	2100      	movs	r1, #0
 800ee86:	2a1b      	cmp	r2, #27
 800ee88:	6001      	str	r1, [r0, #0]
 800ee8a:	6041      	str	r1, [r0, #4]
 800ee8c:	d807      	bhi.n	800ee9e <_calloc_r+0x38>
 800ee8e:	f100 0308 	add.w	r3, r0, #8
 800ee92:	2200      	movs	r2, #0
 800ee94:	601a      	str	r2, [r3, #0]
 800ee96:	605a      	str	r2, [r3, #4]
 800ee98:	609a      	str	r2, [r3, #8]
 800ee9a:	4620      	mov	r0, r4
 800ee9c:	bd10      	pop	{r4, pc}
 800ee9e:	2a24      	cmp	r2, #36	; 0x24
 800eea0:	6081      	str	r1, [r0, #8]
 800eea2:	60c1      	str	r1, [r0, #12]
 800eea4:	bf11      	iteee	ne
 800eea6:	f100 0310 	addne.w	r3, r0, #16
 800eeaa:	6101      	streq	r1, [r0, #16]
 800eeac:	f100 0318 	addeq.w	r3, r0, #24
 800eeb0:	6141      	streq	r1, [r0, #20]
 800eeb2:	e7ee      	b.n	800ee92 <_calloc_r+0x2c>
 800eeb4:	4603      	mov	r3, r0
 800eeb6:	e7ec      	b.n	800ee92 <_calloc_r+0x2c>
 800eeb8:	2100      	movs	r1, #0
 800eeba:	f000 fa44 	bl	800f346 <memset>
 800eebe:	e7ec      	b.n	800ee9a <_calloc_r+0x34>

0800eec0 <__errno>:
 800eec0:	4b01      	ldr	r3, [pc, #4]	; (800eec8 <__errno+0x8>)
 800eec2:	6818      	ldr	r0, [r3, #0]
 800eec4:	4770      	bx	lr
 800eec6:	bf00      	nop
 800eec8:	20000d30 	.word	0x20000d30

0800eecc <__libc_init_array>:
 800eecc:	b570      	push	{r4, r5, r6, lr}
 800eece:	4e0d      	ldr	r6, [pc, #52]	; (800ef04 <__libc_init_array+0x38>)
 800eed0:	4c0d      	ldr	r4, [pc, #52]	; (800ef08 <__libc_init_array+0x3c>)
 800eed2:	1ba4      	subs	r4, r4, r6
 800eed4:	10a4      	asrs	r4, r4, #2
 800eed6:	2500      	movs	r5, #0
 800eed8:	42a5      	cmp	r5, r4
 800eeda:	d109      	bne.n	800eef0 <__libc_init_array+0x24>
 800eedc:	4e0b      	ldr	r6, [pc, #44]	; (800ef0c <__libc_init_array+0x40>)
 800eede:	4c0c      	ldr	r4, [pc, #48]	; (800ef10 <__libc_init_array+0x44>)
 800eee0:	f002 ff02 	bl	8011ce8 <_init>
 800eee4:	1ba4      	subs	r4, r4, r6
 800eee6:	10a4      	asrs	r4, r4, #2
 800eee8:	2500      	movs	r5, #0
 800eeea:	42a5      	cmp	r5, r4
 800eeec:	d105      	bne.n	800eefa <__libc_init_array+0x2e>
 800eeee:	bd70      	pop	{r4, r5, r6, pc}
 800eef0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800eef4:	4798      	blx	r3
 800eef6:	3501      	adds	r5, #1
 800eef8:	e7ee      	b.n	800eed8 <__libc_init_array+0xc>
 800eefa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800eefe:	4798      	blx	r3
 800ef00:	3501      	adds	r5, #1
 800ef02:	e7f2      	b.n	800eeea <__libc_init_array+0x1e>
 800ef04:	080149d4 	.word	0x080149d4
 800ef08:	080149d4 	.word	0x080149d4
 800ef0c:	080149d4 	.word	0x080149d4
 800ef10:	080149d8 	.word	0x080149d8

0800ef14 <_malloc_r>:
 800ef14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef18:	f101 040b 	add.w	r4, r1, #11
 800ef1c:	2c16      	cmp	r4, #22
 800ef1e:	4681      	mov	r9, r0
 800ef20:	d907      	bls.n	800ef32 <_malloc_r+0x1e>
 800ef22:	f034 0407 	bics.w	r4, r4, #7
 800ef26:	d505      	bpl.n	800ef34 <_malloc_r+0x20>
 800ef28:	230c      	movs	r3, #12
 800ef2a:	f8c9 3000 	str.w	r3, [r9]
 800ef2e:	2600      	movs	r6, #0
 800ef30:	e131      	b.n	800f196 <_malloc_r+0x282>
 800ef32:	2410      	movs	r4, #16
 800ef34:	428c      	cmp	r4, r1
 800ef36:	d3f7      	bcc.n	800ef28 <_malloc_r+0x14>
 800ef38:	4648      	mov	r0, r9
 800ef3a:	f000 fa0d 	bl	800f358 <__malloc_lock>
 800ef3e:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 800ef42:	4d9c      	ldr	r5, [pc, #624]	; (800f1b4 <_malloc_r+0x2a0>)
 800ef44:	d236      	bcs.n	800efb4 <_malloc_r+0xa0>
 800ef46:	f104 0208 	add.w	r2, r4, #8
 800ef4a:	442a      	add	r2, r5
 800ef4c:	f1a2 0108 	sub.w	r1, r2, #8
 800ef50:	6856      	ldr	r6, [r2, #4]
 800ef52:	428e      	cmp	r6, r1
 800ef54:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 800ef58:	d102      	bne.n	800ef60 <_malloc_r+0x4c>
 800ef5a:	68d6      	ldr	r6, [r2, #12]
 800ef5c:	42b2      	cmp	r2, r6
 800ef5e:	d010      	beq.n	800ef82 <_malloc_r+0x6e>
 800ef60:	6873      	ldr	r3, [r6, #4]
 800ef62:	68f2      	ldr	r2, [r6, #12]
 800ef64:	68b1      	ldr	r1, [r6, #8]
 800ef66:	f023 0303 	bic.w	r3, r3, #3
 800ef6a:	60ca      	str	r2, [r1, #12]
 800ef6c:	4433      	add	r3, r6
 800ef6e:	6091      	str	r1, [r2, #8]
 800ef70:	685a      	ldr	r2, [r3, #4]
 800ef72:	f042 0201 	orr.w	r2, r2, #1
 800ef76:	605a      	str	r2, [r3, #4]
 800ef78:	4648      	mov	r0, r9
 800ef7a:	f000 f9f3 	bl	800f364 <__malloc_unlock>
 800ef7e:	3608      	adds	r6, #8
 800ef80:	e109      	b.n	800f196 <_malloc_r+0x282>
 800ef82:	3302      	adds	r3, #2
 800ef84:	4a8c      	ldr	r2, [pc, #560]	; (800f1b8 <_malloc_r+0x2a4>)
 800ef86:	692e      	ldr	r6, [r5, #16]
 800ef88:	4296      	cmp	r6, r2
 800ef8a:	4611      	mov	r1, r2
 800ef8c:	d06d      	beq.n	800f06a <_malloc_r+0x156>
 800ef8e:	6870      	ldr	r0, [r6, #4]
 800ef90:	f020 0003 	bic.w	r0, r0, #3
 800ef94:	1b07      	subs	r7, r0, r4
 800ef96:	2f0f      	cmp	r7, #15
 800ef98:	dd47      	ble.n	800f02a <_malloc_r+0x116>
 800ef9a:	1933      	adds	r3, r6, r4
 800ef9c:	f044 0401 	orr.w	r4, r4, #1
 800efa0:	6074      	str	r4, [r6, #4]
 800efa2:	616b      	str	r3, [r5, #20]
 800efa4:	612b      	str	r3, [r5, #16]
 800efa6:	60da      	str	r2, [r3, #12]
 800efa8:	609a      	str	r2, [r3, #8]
 800efaa:	f047 0201 	orr.w	r2, r7, #1
 800efae:	605a      	str	r2, [r3, #4]
 800efb0:	5037      	str	r7, [r6, r0]
 800efb2:	e7e1      	b.n	800ef78 <_malloc_r+0x64>
 800efb4:	0a63      	lsrs	r3, r4, #9
 800efb6:	d02a      	beq.n	800f00e <_malloc_r+0xfa>
 800efb8:	2b04      	cmp	r3, #4
 800efba:	d812      	bhi.n	800efe2 <_malloc_r+0xce>
 800efbc:	09a3      	lsrs	r3, r4, #6
 800efbe:	3338      	adds	r3, #56	; 0x38
 800efc0:	1c5a      	adds	r2, r3, #1
 800efc2:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800efc6:	f1a2 0008 	sub.w	r0, r2, #8
 800efca:	6856      	ldr	r6, [r2, #4]
 800efcc:	4286      	cmp	r6, r0
 800efce:	d006      	beq.n	800efde <_malloc_r+0xca>
 800efd0:	6872      	ldr	r2, [r6, #4]
 800efd2:	f022 0203 	bic.w	r2, r2, #3
 800efd6:	1b11      	subs	r1, r2, r4
 800efd8:	290f      	cmp	r1, #15
 800efda:	dd1c      	ble.n	800f016 <_malloc_r+0x102>
 800efdc:	3b01      	subs	r3, #1
 800efde:	3301      	adds	r3, #1
 800efe0:	e7d0      	b.n	800ef84 <_malloc_r+0x70>
 800efe2:	2b14      	cmp	r3, #20
 800efe4:	d801      	bhi.n	800efea <_malloc_r+0xd6>
 800efe6:	335b      	adds	r3, #91	; 0x5b
 800efe8:	e7ea      	b.n	800efc0 <_malloc_r+0xac>
 800efea:	2b54      	cmp	r3, #84	; 0x54
 800efec:	d802      	bhi.n	800eff4 <_malloc_r+0xe0>
 800efee:	0b23      	lsrs	r3, r4, #12
 800eff0:	336e      	adds	r3, #110	; 0x6e
 800eff2:	e7e5      	b.n	800efc0 <_malloc_r+0xac>
 800eff4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800eff8:	d802      	bhi.n	800f000 <_malloc_r+0xec>
 800effa:	0be3      	lsrs	r3, r4, #15
 800effc:	3377      	adds	r3, #119	; 0x77
 800effe:	e7df      	b.n	800efc0 <_malloc_r+0xac>
 800f000:	f240 5254 	movw	r2, #1364	; 0x554
 800f004:	4293      	cmp	r3, r2
 800f006:	d804      	bhi.n	800f012 <_malloc_r+0xfe>
 800f008:	0ca3      	lsrs	r3, r4, #18
 800f00a:	337c      	adds	r3, #124	; 0x7c
 800f00c:	e7d8      	b.n	800efc0 <_malloc_r+0xac>
 800f00e:	233f      	movs	r3, #63	; 0x3f
 800f010:	e7d6      	b.n	800efc0 <_malloc_r+0xac>
 800f012:	237e      	movs	r3, #126	; 0x7e
 800f014:	e7d4      	b.n	800efc0 <_malloc_r+0xac>
 800f016:	2900      	cmp	r1, #0
 800f018:	68f1      	ldr	r1, [r6, #12]
 800f01a:	db04      	blt.n	800f026 <_malloc_r+0x112>
 800f01c:	68b3      	ldr	r3, [r6, #8]
 800f01e:	60d9      	str	r1, [r3, #12]
 800f020:	608b      	str	r3, [r1, #8]
 800f022:	18b3      	adds	r3, r6, r2
 800f024:	e7a4      	b.n	800ef70 <_malloc_r+0x5c>
 800f026:	460e      	mov	r6, r1
 800f028:	e7d0      	b.n	800efcc <_malloc_r+0xb8>
 800f02a:	2f00      	cmp	r7, #0
 800f02c:	616a      	str	r2, [r5, #20]
 800f02e:	612a      	str	r2, [r5, #16]
 800f030:	db05      	blt.n	800f03e <_malloc_r+0x12a>
 800f032:	4430      	add	r0, r6
 800f034:	6843      	ldr	r3, [r0, #4]
 800f036:	f043 0301 	orr.w	r3, r3, #1
 800f03a:	6043      	str	r3, [r0, #4]
 800f03c:	e79c      	b.n	800ef78 <_malloc_r+0x64>
 800f03e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800f042:	d244      	bcs.n	800f0ce <_malloc_r+0x1ba>
 800f044:	08c0      	lsrs	r0, r0, #3
 800f046:	1087      	asrs	r7, r0, #2
 800f048:	2201      	movs	r2, #1
 800f04a:	fa02 f707 	lsl.w	r7, r2, r7
 800f04e:	686a      	ldr	r2, [r5, #4]
 800f050:	3001      	adds	r0, #1
 800f052:	433a      	orrs	r2, r7
 800f054:	606a      	str	r2, [r5, #4]
 800f056:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800f05a:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 800f05e:	60b7      	str	r7, [r6, #8]
 800f060:	3a08      	subs	r2, #8
 800f062:	60f2      	str	r2, [r6, #12]
 800f064:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 800f068:	60fe      	str	r6, [r7, #12]
 800f06a:	2001      	movs	r0, #1
 800f06c:	109a      	asrs	r2, r3, #2
 800f06e:	fa00 f202 	lsl.w	r2, r0, r2
 800f072:	6868      	ldr	r0, [r5, #4]
 800f074:	4282      	cmp	r2, r0
 800f076:	f200 80a1 	bhi.w	800f1bc <_malloc_r+0x2a8>
 800f07a:	4202      	tst	r2, r0
 800f07c:	d106      	bne.n	800f08c <_malloc_r+0x178>
 800f07e:	f023 0303 	bic.w	r3, r3, #3
 800f082:	0052      	lsls	r2, r2, #1
 800f084:	4202      	tst	r2, r0
 800f086:	f103 0304 	add.w	r3, r3, #4
 800f08a:	d0fa      	beq.n	800f082 <_malloc_r+0x16e>
 800f08c:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 800f090:	46e0      	mov	r8, ip
 800f092:	469e      	mov	lr, r3
 800f094:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800f098:	4546      	cmp	r6, r8
 800f09a:	d153      	bne.n	800f144 <_malloc_r+0x230>
 800f09c:	f10e 0e01 	add.w	lr, lr, #1
 800f0a0:	f01e 0f03 	tst.w	lr, #3
 800f0a4:	f108 0808 	add.w	r8, r8, #8
 800f0a8:	d1f4      	bne.n	800f094 <_malloc_r+0x180>
 800f0aa:	0798      	lsls	r0, r3, #30
 800f0ac:	d179      	bne.n	800f1a2 <_malloc_r+0x28e>
 800f0ae:	686b      	ldr	r3, [r5, #4]
 800f0b0:	ea23 0302 	bic.w	r3, r3, r2
 800f0b4:	606b      	str	r3, [r5, #4]
 800f0b6:	6868      	ldr	r0, [r5, #4]
 800f0b8:	0052      	lsls	r2, r2, #1
 800f0ba:	4282      	cmp	r2, r0
 800f0bc:	d87e      	bhi.n	800f1bc <_malloc_r+0x2a8>
 800f0be:	2a00      	cmp	r2, #0
 800f0c0:	d07c      	beq.n	800f1bc <_malloc_r+0x2a8>
 800f0c2:	4673      	mov	r3, lr
 800f0c4:	4202      	tst	r2, r0
 800f0c6:	d1e1      	bne.n	800f08c <_malloc_r+0x178>
 800f0c8:	3304      	adds	r3, #4
 800f0ca:	0052      	lsls	r2, r2, #1
 800f0cc:	e7fa      	b.n	800f0c4 <_malloc_r+0x1b0>
 800f0ce:	0a42      	lsrs	r2, r0, #9
 800f0d0:	2a04      	cmp	r2, #4
 800f0d2:	d815      	bhi.n	800f100 <_malloc_r+0x1ec>
 800f0d4:	0982      	lsrs	r2, r0, #6
 800f0d6:	3238      	adds	r2, #56	; 0x38
 800f0d8:	1c57      	adds	r7, r2, #1
 800f0da:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 800f0de:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 800f0e2:	45be      	cmp	lr, r7
 800f0e4:	d126      	bne.n	800f134 <_malloc_r+0x220>
 800f0e6:	2001      	movs	r0, #1
 800f0e8:	1092      	asrs	r2, r2, #2
 800f0ea:	fa00 f202 	lsl.w	r2, r0, r2
 800f0ee:	6868      	ldr	r0, [r5, #4]
 800f0f0:	4310      	orrs	r0, r2
 800f0f2:	6068      	str	r0, [r5, #4]
 800f0f4:	f8c6 e00c 	str.w	lr, [r6, #12]
 800f0f8:	60b7      	str	r7, [r6, #8]
 800f0fa:	f8ce 6008 	str.w	r6, [lr, #8]
 800f0fe:	e7b3      	b.n	800f068 <_malloc_r+0x154>
 800f100:	2a14      	cmp	r2, #20
 800f102:	d801      	bhi.n	800f108 <_malloc_r+0x1f4>
 800f104:	325b      	adds	r2, #91	; 0x5b
 800f106:	e7e7      	b.n	800f0d8 <_malloc_r+0x1c4>
 800f108:	2a54      	cmp	r2, #84	; 0x54
 800f10a:	d802      	bhi.n	800f112 <_malloc_r+0x1fe>
 800f10c:	0b02      	lsrs	r2, r0, #12
 800f10e:	326e      	adds	r2, #110	; 0x6e
 800f110:	e7e2      	b.n	800f0d8 <_malloc_r+0x1c4>
 800f112:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800f116:	d802      	bhi.n	800f11e <_malloc_r+0x20a>
 800f118:	0bc2      	lsrs	r2, r0, #15
 800f11a:	3277      	adds	r2, #119	; 0x77
 800f11c:	e7dc      	b.n	800f0d8 <_malloc_r+0x1c4>
 800f11e:	f240 5754 	movw	r7, #1364	; 0x554
 800f122:	42ba      	cmp	r2, r7
 800f124:	bf9a      	itte	ls
 800f126:	0c82      	lsrls	r2, r0, #18
 800f128:	327c      	addls	r2, #124	; 0x7c
 800f12a:	227e      	movhi	r2, #126	; 0x7e
 800f12c:	e7d4      	b.n	800f0d8 <_malloc_r+0x1c4>
 800f12e:	68bf      	ldr	r7, [r7, #8]
 800f130:	45be      	cmp	lr, r7
 800f132:	d004      	beq.n	800f13e <_malloc_r+0x22a>
 800f134:	687a      	ldr	r2, [r7, #4]
 800f136:	f022 0203 	bic.w	r2, r2, #3
 800f13a:	4290      	cmp	r0, r2
 800f13c:	d3f7      	bcc.n	800f12e <_malloc_r+0x21a>
 800f13e:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 800f142:	e7d7      	b.n	800f0f4 <_malloc_r+0x1e0>
 800f144:	6870      	ldr	r0, [r6, #4]
 800f146:	68f7      	ldr	r7, [r6, #12]
 800f148:	f020 0003 	bic.w	r0, r0, #3
 800f14c:	eba0 0a04 	sub.w	sl, r0, r4
 800f150:	f1ba 0f0f 	cmp.w	sl, #15
 800f154:	dd10      	ble.n	800f178 <_malloc_r+0x264>
 800f156:	68b2      	ldr	r2, [r6, #8]
 800f158:	1933      	adds	r3, r6, r4
 800f15a:	f044 0401 	orr.w	r4, r4, #1
 800f15e:	6074      	str	r4, [r6, #4]
 800f160:	60d7      	str	r7, [r2, #12]
 800f162:	60ba      	str	r2, [r7, #8]
 800f164:	f04a 0201 	orr.w	r2, sl, #1
 800f168:	616b      	str	r3, [r5, #20]
 800f16a:	612b      	str	r3, [r5, #16]
 800f16c:	60d9      	str	r1, [r3, #12]
 800f16e:	6099      	str	r1, [r3, #8]
 800f170:	605a      	str	r2, [r3, #4]
 800f172:	f846 a000 	str.w	sl, [r6, r0]
 800f176:	e6ff      	b.n	800ef78 <_malloc_r+0x64>
 800f178:	f1ba 0f00 	cmp.w	sl, #0
 800f17c:	db0f      	blt.n	800f19e <_malloc_r+0x28a>
 800f17e:	4430      	add	r0, r6
 800f180:	6843      	ldr	r3, [r0, #4]
 800f182:	f043 0301 	orr.w	r3, r3, #1
 800f186:	6043      	str	r3, [r0, #4]
 800f188:	f856 3f08 	ldr.w	r3, [r6, #8]!
 800f18c:	4648      	mov	r0, r9
 800f18e:	60df      	str	r7, [r3, #12]
 800f190:	60bb      	str	r3, [r7, #8]
 800f192:	f000 f8e7 	bl	800f364 <__malloc_unlock>
 800f196:	4630      	mov	r0, r6
 800f198:	b003      	add	sp, #12
 800f19a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f19e:	463e      	mov	r6, r7
 800f1a0:	e77a      	b.n	800f098 <_malloc_r+0x184>
 800f1a2:	f85c 0908 	ldr.w	r0, [ip], #-8
 800f1a6:	4584      	cmp	ip, r0
 800f1a8:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800f1ac:	f43f af7d 	beq.w	800f0aa <_malloc_r+0x196>
 800f1b0:	e781      	b.n	800f0b6 <_malloc_r+0x1a2>
 800f1b2:	bf00      	nop
 800f1b4:	20000e24 	.word	0x20000e24
 800f1b8:	20000e2c 	.word	0x20000e2c
 800f1bc:	f8d5 b008 	ldr.w	fp, [r5, #8]
 800f1c0:	f8db 6004 	ldr.w	r6, [fp, #4]
 800f1c4:	f026 0603 	bic.w	r6, r6, #3
 800f1c8:	42b4      	cmp	r4, r6
 800f1ca:	d803      	bhi.n	800f1d4 <_malloc_r+0x2c0>
 800f1cc:	1b33      	subs	r3, r6, r4
 800f1ce:	2b0f      	cmp	r3, #15
 800f1d0:	f300 8096 	bgt.w	800f300 <_malloc_r+0x3ec>
 800f1d4:	4a4f      	ldr	r2, [pc, #316]	; (800f314 <_malloc_r+0x400>)
 800f1d6:	6817      	ldr	r7, [r2, #0]
 800f1d8:	4a4f      	ldr	r2, [pc, #316]	; (800f318 <_malloc_r+0x404>)
 800f1da:	6811      	ldr	r1, [r2, #0]
 800f1dc:	3710      	adds	r7, #16
 800f1de:	3101      	adds	r1, #1
 800f1e0:	eb0b 0306 	add.w	r3, fp, r6
 800f1e4:	4427      	add	r7, r4
 800f1e6:	d005      	beq.n	800f1f4 <_malloc_r+0x2e0>
 800f1e8:	494c      	ldr	r1, [pc, #304]	; (800f31c <_malloc_r+0x408>)
 800f1ea:	3901      	subs	r1, #1
 800f1ec:	440f      	add	r7, r1
 800f1ee:	3101      	adds	r1, #1
 800f1f0:	4249      	negs	r1, r1
 800f1f2:	400f      	ands	r7, r1
 800f1f4:	4639      	mov	r1, r7
 800f1f6:	4648      	mov	r0, r9
 800f1f8:	9201      	str	r2, [sp, #4]
 800f1fa:	9300      	str	r3, [sp, #0]
 800f1fc:	f000 f8b8 	bl	800f370 <_sbrk_r>
 800f200:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800f204:	4680      	mov	r8, r0
 800f206:	d056      	beq.n	800f2b6 <_malloc_r+0x3a2>
 800f208:	9b00      	ldr	r3, [sp, #0]
 800f20a:	9a01      	ldr	r2, [sp, #4]
 800f20c:	4283      	cmp	r3, r0
 800f20e:	d901      	bls.n	800f214 <_malloc_r+0x300>
 800f210:	45ab      	cmp	fp, r5
 800f212:	d150      	bne.n	800f2b6 <_malloc_r+0x3a2>
 800f214:	4842      	ldr	r0, [pc, #264]	; (800f320 <_malloc_r+0x40c>)
 800f216:	6801      	ldr	r1, [r0, #0]
 800f218:	4543      	cmp	r3, r8
 800f21a:	eb07 0e01 	add.w	lr, r7, r1
 800f21e:	f8c0 e000 	str.w	lr, [r0]
 800f222:	4940      	ldr	r1, [pc, #256]	; (800f324 <_malloc_r+0x410>)
 800f224:	4682      	mov	sl, r0
 800f226:	d113      	bne.n	800f250 <_malloc_r+0x33c>
 800f228:	420b      	tst	r3, r1
 800f22a:	d111      	bne.n	800f250 <_malloc_r+0x33c>
 800f22c:	68ab      	ldr	r3, [r5, #8]
 800f22e:	443e      	add	r6, r7
 800f230:	f046 0601 	orr.w	r6, r6, #1
 800f234:	605e      	str	r6, [r3, #4]
 800f236:	4a3c      	ldr	r2, [pc, #240]	; (800f328 <_malloc_r+0x414>)
 800f238:	f8da 3000 	ldr.w	r3, [sl]
 800f23c:	6811      	ldr	r1, [r2, #0]
 800f23e:	428b      	cmp	r3, r1
 800f240:	bf88      	it	hi
 800f242:	6013      	strhi	r3, [r2, #0]
 800f244:	4a39      	ldr	r2, [pc, #228]	; (800f32c <_malloc_r+0x418>)
 800f246:	6811      	ldr	r1, [r2, #0]
 800f248:	428b      	cmp	r3, r1
 800f24a:	bf88      	it	hi
 800f24c:	6013      	strhi	r3, [r2, #0]
 800f24e:	e032      	b.n	800f2b6 <_malloc_r+0x3a2>
 800f250:	6810      	ldr	r0, [r2, #0]
 800f252:	3001      	adds	r0, #1
 800f254:	bf1b      	ittet	ne
 800f256:	eba8 0303 	subne.w	r3, r8, r3
 800f25a:	4473      	addne	r3, lr
 800f25c:	f8c2 8000 	streq.w	r8, [r2]
 800f260:	f8ca 3000 	strne.w	r3, [sl]
 800f264:	f018 0007 	ands.w	r0, r8, #7
 800f268:	bf1c      	itt	ne
 800f26a:	f1c0 0008 	rsbne	r0, r0, #8
 800f26e:	4480      	addne	r8, r0
 800f270:	4b2a      	ldr	r3, [pc, #168]	; (800f31c <_malloc_r+0x408>)
 800f272:	4447      	add	r7, r8
 800f274:	4418      	add	r0, r3
 800f276:	400f      	ands	r7, r1
 800f278:	1bc7      	subs	r7, r0, r7
 800f27a:	4639      	mov	r1, r7
 800f27c:	4648      	mov	r0, r9
 800f27e:	f000 f877 	bl	800f370 <_sbrk_r>
 800f282:	1c43      	adds	r3, r0, #1
 800f284:	bf08      	it	eq
 800f286:	4640      	moveq	r0, r8
 800f288:	f8da 3000 	ldr.w	r3, [sl]
 800f28c:	f8c5 8008 	str.w	r8, [r5, #8]
 800f290:	bf08      	it	eq
 800f292:	2700      	moveq	r7, #0
 800f294:	eba0 0008 	sub.w	r0, r0, r8
 800f298:	443b      	add	r3, r7
 800f29a:	4407      	add	r7, r0
 800f29c:	f047 0701 	orr.w	r7, r7, #1
 800f2a0:	45ab      	cmp	fp, r5
 800f2a2:	f8ca 3000 	str.w	r3, [sl]
 800f2a6:	f8c8 7004 	str.w	r7, [r8, #4]
 800f2aa:	d0c4      	beq.n	800f236 <_malloc_r+0x322>
 800f2ac:	2e0f      	cmp	r6, #15
 800f2ae:	d810      	bhi.n	800f2d2 <_malloc_r+0x3be>
 800f2b0:	2301      	movs	r3, #1
 800f2b2:	f8c8 3004 	str.w	r3, [r8, #4]
 800f2b6:	68ab      	ldr	r3, [r5, #8]
 800f2b8:	685a      	ldr	r2, [r3, #4]
 800f2ba:	f022 0203 	bic.w	r2, r2, #3
 800f2be:	4294      	cmp	r4, r2
 800f2c0:	eba2 0304 	sub.w	r3, r2, r4
 800f2c4:	d801      	bhi.n	800f2ca <_malloc_r+0x3b6>
 800f2c6:	2b0f      	cmp	r3, #15
 800f2c8:	dc1a      	bgt.n	800f300 <_malloc_r+0x3ec>
 800f2ca:	4648      	mov	r0, r9
 800f2cc:	f000 f84a 	bl	800f364 <__malloc_unlock>
 800f2d0:	e62d      	b.n	800ef2e <_malloc_r+0x1a>
 800f2d2:	f8db 3004 	ldr.w	r3, [fp, #4]
 800f2d6:	3e0c      	subs	r6, #12
 800f2d8:	f026 0607 	bic.w	r6, r6, #7
 800f2dc:	f003 0301 	and.w	r3, r3, #1
 800f2e0:	4333      	orrs	r3, r6
 800f2e2:	f8cb 3004 	str.w	r3, [fp, #4]
 800f2e6:	eb0b 0306 	add.w	r3, fp, r6
 800f2ea:	2205      	movs	r2, #5
 800f2ec:	2e0f      	cmp	r6, #15
 800f2ee:	605a      	str	r2, [r3, #4]
 800f2f0:	609a      	str	r2, [r3, #8]
 800f2f2:	d9a0      	bls.n	800f236 <_malloc_r+0x322>
 800f2f4:	f10b 0108 	add.w	r1, fp, #8
 800f2f8:	4648      	mov	r0, r9
 800f2fa:	f001 ff1d 	bl	8011138 <_free_r>
 800f2fe:	e79a      	b.n	800f236 <_malloc_r+0x322>
 800f300:	68ae      	ldr	r6, [r5, #8]
 800f302:	f044 0201 	orr.w	r2, r4, #1
 800f306:	4434      	add	r4, r6
 800f308:	f043 0301 	orr.w	r3, r3, #1
 800f30c:	6072      	str	r2, [r6, #4]
 800f30e:	60ac      	str	r4, [r5, #8]
 800f310:	6063      	str	r3, [r4, #4]
 800f312:	e631      	b.n	800ef78 <_malloc_r+0x64>
 800f314:	2000c3a8 	.word	0x2000c3a8
 800f318:	2000122c 	.word	0x2000122c
 800f31c:	00001000 	.word	0x00001000
 800f320:	2000c378 	.word	0x2000c378
 800f324:	00000fff 	.word	0x00000fff
 800f328:	2000c3a0 	.word	0x2000c3a0
 800f32c:	2000c3a4 	.word	0x2000c3a4

0800f330 <memcpy>:
 800f330:	b510      	push	{r4, lr}
 800f332:	1e43      	subs	r3, r0, #1
 800f334:	440a      	add	r2, r1
 800f336:	4291      	cmp	r1, r2
 800f338:	d100      	bne.n	800f33c <memcpy+0xc>
 800f33a:	bd10      	pop	{r4, pc}
 800f33c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f340:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f344:	e7f7      	b.n	800f336 <memcpy+0x6>

0800f346 <memset>:
 800f346:	4402      	add	r2, r0
 800f348:	4603      	mov	r3, r0
 800f34a:	4293      	cmp	r3, r2
 800f34c:	d100      	bne.n	800f350 <memset+0xa>
 800f34e:	4770      	bx	lr
 800f350:	f803 1b01 	strb.w	r1, [r3], #1
 800f354:	e7f9      	b.n	800f34a <memset+0x4>
	...

0800f358 <__malloc_lock>:
 800f358:	4801      	ldr	r0, [pc, #4]	; (800f360 <__malloc_lock+0x8>)
 800f35a:	f001 bfb7 	b.w	80112cc <__retarget_lock_acquire_recursive>
 800f35e:	bf00      	nop
 800f360:	2000d94c 	.word	0x2000d94c

0800f364 <__malloc_unlock>:
 800f364:	4801      	ldr	r0, [pc, #4]	; (800f36c <__malloc_unlock+0x8>)
 800f366:	f001 bfb2 	b.w	80112ce <__retarget_lock_release_recursive>
 800f36a:	bf00      	nop
 800f36c:	2000d94c 	.word	0x2000d94c

0800f370 <_sbrk_r>:
 800f370:	b538      	push	{r3, r4, r5, lr}
 800f372:	4c06      	ldr	r4, [pc, #24]	; (800f38c <_sbrk_r+0x1c>)
 800f374:	2300      	movs	r3, #0
 800f376:	4605      	mov	r5, r0
 800f378:	4608      	mov	r0, r1
 800f37a:	6023      	str	r3, [r4, #0]
 800f37c:	f7f2 fefc 	bl	8002178 <_sbrk>
 800f380:	1c43      	adds	r3, r0, #1
 800f382:	d102      	bne.n	800f38a <_sbrk_r+0x1a>
 800f384:	6823      	ldr	r3, [r4, #0]
 800f386:	b103      	cbz	r3, 800f38a <_sbrk_r+0x1a>
 800f388:	602b      	str	r3, [r5, #0]
 800f38a:	bd38      	pop	{r3, r4, r5, pc}
 800f38c:	2000d954 	.word	0x2000d954

0800f390 <sprintf>:
 800f390:	b40e      	push	{r1, r2, r3}
 800f392:	b500      	push	{lr}
 800f394:	b09c      	sub	sp, #112	; 0x70
 800f396:	f44f 7102 	mov.w	r1, #520	; 0x208
 800f39a:	ab1d      	add	r3, sp, #116	; 0x74
 800f39c:	f8ad 1014 	strh.w	r1, [sp, #20]
 800f3a0:	9002      	str	r0, [sp, #8]
 800f3a2:	9006      	str	r0, [sp, #24]
 800f3a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f3a8:	480a      	ldr	r0, [pc, #40]	; (800f3d4 <sprintf+0x44>)
 800f3aa:	9104      	str	r1, [sp, #16]
 800f3ac:	9107      	str	r1, [sp, #28]
 800f3ae:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f3b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800f3b6:	f8ad 1016 	strh.w	r1, [sp, #22]
 800f3ba:	6800      	ldr	r0, [r0, #0]
 800f3bc:	9301      	str	r3, [sp, #4]
 800f3be:	a902      	add	r1, sp, #8
 800f3c0:	f000 f812 	bl	800f3e8 <_svfprintf_r>
 800f3c4:	9b02      	ldr	r3, [sp, #8]
 800f3c6:	2200      	movs	r2, #0
 800f3c8:	701a      	strb	r2, [r3, #0]
 800f3ca:	b01c      	add	sp, #112	; 0x70
 800f3cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800f3d0:	b003      	add	sp, #12
 800f3d2:	4770      	bx	lr
 800f3d4:	20000d30 	.word	0x20000d30

0800f3d8 <strcpy>:
 800f3d8:	4603      	mov	r3, r0
 800f3da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f3de:	f803 2b01 	strb.w	r2, [r3], #1
 800f3e2:	2a00      	cmp	r2, #0
 800f3e4:	d1f9      	bne.n	800f3da <strcpy+0x2>
 800f3e6:	4770      	bx	lr

0800f3e8 <_svfprintf_r>:
 800f3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3ec:	b0bd      	sub	sp, #244	; 0xf4
 800f3ee:	468a      	mov	sl, r1
 800f3f0:	4615      	mov	r5, r2
 800f3f2:	461f      	mov	r7, r3
 800f3f4:	4683      	mov	fp, r0
 800f3f6:	f001 ff5b 	bl	80112b0 <_localeconv_r>
 800f3fa:	6803      	ldr	r3, [r0, #0]
 800f3fc:	930d      	str	r3, [sp, #52]	; 0x34
 800f3fe:	4618      	mov	r0, r3
 800f400:	f7f0 fef0 	bl	80001e4 <strlen>
 800f404:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800f408:	9008      	str	r0, [sp, #32]
 800f40a:	061b      	lsls	r3, r3, #24
 800f40c:	d518      	bpl.n	800f440 <_svfprintf_r+0x58>
 800f40e:	f8da 3010 	ldr.w	r3, [sl, #16]
 800f412:	b9ab      	cbnz	r3, 800f440 <_svfprintf_r+0x58>
 800f414:	2140      	movs	r1, #64	; 0x40
 800f416:	4658      	mov	r0, fp
 800f418:	f7ff fd7c 	bl	800ef14 <_malloc_r>
 800f41c:	f8ca 0000 	str.w	r0, [sl]
 800f420:	f8ca 0010 	str.w	r0, [sl, #16]
 800f424:	b948      	cbnz	r0, 800f43a <_svfprintf_r+0x52>
 800f426:	230c      	movs	r3, #12
 800f428:	f8cb 3000 	str.w	r3, [fp]
 800f42c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f430:	9309      	str	r3, [sp, #36]	; 0x24
 800f432:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f434:	b03d      	add	sp, #244	; 0xf4
 800f436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f43a:	2340      	movs	r3, #64	; 0x40
 800f43c:	f8ca 3014 	str.w	r3, [sl, #20]
 800f440:	ed9f 7b99 	vldr	d7, [pc, #612]	; 800f6a8 <_svfprintf_r+0x2c0>
 800f444:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f448:	2300      	movs	r3, #0
 800f44a:	ac2c      	add	r4, sp, #176	; 0xb0
 800f44c:	941f      	str	r4, [sp, #124]	; 0x7c
 800f44e:	9321      	str	r3, [sp, #132]	; 0x84
 800f450:	9320      	str	r3, [sp, #128]	; 0x80
 800f452:	9505      	str	r5, [sp, #20]
 800f454:	9303      	str	r3, [sp, #12]
 800f456:	9311      	str	r3, [sp, #68]	; 0x44
 800f458:	9310      	str	r3, [sp, #64]	; 0x40
 800f45a:	9309      	str	r3, [sp, #36]	; 0x24
 800f45c:	9d05      	ldr	r5, [sp, #20]
 800f45e:	462b      	mov	r3, r5
 800f460:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f464:	b112      	cbz	r2, 800f46c <_svfprintf_r+0x84>
 800f466:	2a25      	cmp	r2, #37	; 0x25
 800f468:	f040 8083 	bne.w	800f572 <_svfprintf_r+0x18a>
 800f46c:	9b05      	ldr	r3, [sp, #20]
 800f46e:	1aee      	subs	r6, r5, r3
 800f470:	d00d      	beq.n	800f48e <_svfprintf_r+0xa6>
 800f472:	e884 0048 	stmia.w	r4, {r3, r6}
 800f476:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f478:	4433      	add	r3, r6
 800f47a:	9321      	str	r3, [sp, #132]	; 0x84
 800f47c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800f47e:	3301      	adds	r3, #1
 800f480:	2b07      	cmp	r3, #7
 800f482:	9320      	str	r3, [sp, #128]	; 0x80
 800f484:	dc77      	bgt.n	800f576 <_svfprintf_r+0x18e>
 800f486:	3408      	adds	r4, #8
 800f488:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f48a:	4433      	add	r3, r6
 800f48c:	9309      	str	r3, [sp, #36]	; 0x24
 800f48e:	782b      	ldrb	r3, [r5, #0]
 800f490:	2b00      	cmp	r3, #0
 800f492:	f000 8729 	beq.w	80102e8 <_svfprintf_r+0xf00>
 800f496:	2300      	movs	r3, #0
 800f498:	1c69      	adds	r1, r5, #1
 800f49a:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800f49e:	461a      	mov	r2, r3
 800f4a0:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800f4a4:	930a      	str	r3, [sp, #40]	; 0x28
 800f4a6:	461d      	mov	r5, r3
 800f4a8:	200a      	movs	r0, #10
 800f4aa:	1c4e      	adds	r6, r1, #1
 800f4ac:	7809      	ldrb	r1, [r1, #0]
 800f4ae:	9605      	str	r6, [sp, #20]
 800f4b0:	9102      	str	r1, [sp, #8]
 800f4b2:	9902      	ldr	r1, [sp, #8]
 800f4b4:	3920      	subs	r1, #32
 800f4b6:	2958      	cmp	r1, #88	; 0x58
 800f4b8:	f200 8418 	bhi.w	800fcec <_svfprintf_r+0x904>
 800f4bc:	e8df f011 	tbh	[pc, r1, lsl #1]
 800f4c0:	041600a6 	.word	0x041600a6
 800f4c4:	00ab0416 	.word	0x00ab0416
 800f4c8:	04160416 	.word	0x04160416
 800f4cc:	04160416 	.word	0x04160416
 800f4d0:	04160416 	.word	0x04160416
 800f4d4:	006500ae 	.word	0x006500ae
 800f4d8:	00b70416 	.word	0x00b70416
 800f4dc:	041600ba 	.word	0x041600ba
 800f4e0:	00da00d7 	.word	0x00da00d7
 800f4e4:	00da00da 	.word	0x00da00da
 800f4e8:	00da00da 	.word	0x00da00da
 800f4ec:	00da00da 	.word	0x00da00da
 800f4f0:	00da00da 	.word	0x00da00da
 800f4f4:	04160416 	.word	0x04160416
 800f4f8:	04160416 	.word	0x04160416
 800f4fc:	04160416 	.word	0x04160416
 800f500:	04160416 	.word	0x04160416
 800f504:	04160416 	.word	0x04160416
 800f508:	012b0115 	.word	0x012b0115
 800f50c:	012b0416 	.word	0x012b0416
 800f510:	04160416 	.word	0x04160416
 800f514:	04160416 	.word	0x04160416
 800f518:	041600ed 	.word	0x041600ed
 800f51c:	03400416 	.word	0x03400416
 800f520:	04160416 	.word	0x04160416
 800f524:	04160416 	.word	0x04160416
 800f528:	03a80416 	.word	0x03a80416
 800f52c:	04160416 	.word	0x04160416
 800f530:	04160086 	.word	0x04160086
 800f534:	04160416 	.word	0x04160416
 800f538:	04160416 	.word	0x04160416
 800f53c:	04160416 	.word	0x04160416
 800f540:	04160416 	.word	0x04160416
 800f544:	01070416 	.word	0x01070416
 800f548:	012b006b 	.word	0x012b006b
 800f54c:	012b012b 	.word	0x012b012b
 800f550:	006b00f0 	.word	0x006b00f0
 800f554:	04160416 	.word	0x04160416
 800f558:	041600fa 	.word	0x041600fa
 800f55c:	03420322 	.word	0x03420322
 800f560:	01010376 	.word	0x01010376
 800f564:	03870416 	.word	0x03870416
 800f568:	03aa0416 	.word	0x03aa0416
 800f56c:	04160416 	.word	0x04160416
 800f570:	03c2      	.short	0x03c2
 800f572:	461d      	mov	r5, r3
 800f574:	e773      	b.n	800f45e <_svfprintf_r+0x76>
 800f576:	aa1f      	add	r2, sp, #124	; 0x7c
 800f578:	4651      	mov	r1, sl
 800f57a:	4658      	mov	r0, fp
 800f57c:	f002 f980 	bl	8011880 <__ssprint_r>
 800f580:	2800      	cmp	r0, #0
 800f582:	f040 8692 	bne.w	80102aa <_svfprintf_r+0xec2>
 800f586:	ac2c      	add	r4, sp, #176	; 0xb0
 800f588:	e77e      	b.n	800f488 <_svfprintf_r+0xa0>
 800f58a:	2301      	movs	r3, #1
 800f58c:	222b      	movs	r2, #43	; 0x2b
 800f58e:	9905      	ldr	r1, [sp, #20]
 800f590:	e78b      	b.n	800f4aa <_svfprintf_r+0xc2>
 800f592:	460f      	mov	r7, r1
 800f594:	e7fb      	b.n	800f58e <_svfprintf_r+0x1a6>
 800f596:	b10b      	cbz	r3, 800f59c <_svfprintf_r+0x1b4>
 800f598:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800f59c:	06ae      	lsls	r6, r5, #26
 800f59e:	f140 80aa 	bpl.w	800f6f6 <_svfprintf_r+0x30e>
 800f5a2:	3707      	adds	r7, #7
 800f5a4:	f027 0707 	bic.w	r7, r7, #7
 800f5a8:	f107 0308 	add.w	r3, r7, #8
 800f5ac:	e9d7 6700 	ldrd	r6, r7, [r7]
 800f5b0:	9304      	str	r3, [sp, #16]
 800f5b2:	2e00      	cmp	r6, #0
 800f5b4:	f177 0300 	sbcs.w	r3, r7, #0
 800f5b8:	da06      	bge.n	800f5c8 <_svfprintf_r+0x1e0>
 800f5ba:	4276      	negs	r6, r6
 800f5bc:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800f5c0:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800f5c4:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800f5c8:	2301      	movs	r3, #1
 800f5ca:	e2ca      	b.n	800fb62 <_svfprintf_r+0x77a>
 800f5cc:	b10b      	cbz	r3, 800f5d2 <_svfprintf_r+0x1ea>
 800f5ce:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800f5d2:	4b37      	ldr	r3, [pc, #220]	; (800f6b0 <_svfprintf_r+0x2c8>)
 800f5d4:	9311      	str	r3, [sp, #68]	; 0x44
 800f5d6:	06ab      	lsls	r3, r5, #26
 800f5d8:	f140 8339 	bpl.w	800fc4e <_svfprintf_r+0x866>
 800f5dc:	3707      	adds	r7, #7
 800f5de:	f027 0707 	bic.w	r7, r7, #7
 800f5e2:	f107 0308 	add.w	r3, r7, #8
 800f5e6:	e9d7 6700 	ldrd	r6, r7, [r7]
 800f5ea:	9304      	str	r3, [sp, #16]
 800f5ec:	07e8      	lsls	r0, r5, #31
 800f5ee:	d50b      	bpl.n	800f608 <_svfprintf_r+0x220>
 800f5f0:	ea56 0307 	orrs.w	r3, r6, r7
 800f5f4:	d008      	beq.n	800f608 <_svfprintf_r+0x220>
 800f5f6:	2330      	movs	r3, #48	; 0x30
 800f5f8:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800f5fc:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800f600:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 800f604:	f045 0502 	orr.w	r5, r5, #2
 800f608:	2302      	movs	r3, #2
 800f60a:	e2a7      	b.n	800fb5c <_svfprintf_r+0x774>
 800f60c:	2a00      	cmp	r2, #0
 800f60e:	d1be      	bne.n	800f58e <_svfprintf_r+0x1a6>
 800f610:	2301      	movs	r3, #1
 800f612:	2220      	movs	r2, #32
 800f614:	e7bb      	b.n	800f58e <_svfprintf_r+0x1a6>
 800f616:	f045 0501 	orr.w	r5, r5, #1
 800f61a:	e7b8      	b.n	800f58e <_svfprintf_r+0x1a6>
 800f61c:	683e      	ldr	r6, [r7, #0]
 800f61e:	960a      	str	r6, [sp, #40]	; 0x28
 800f620:	2e00      	cmp	r6, #0
 800f622:	f107 0104 	add.w	r1, r7, #4
 800f626:	dab4      	bge.n	800f592 <_svfprintf_r+0x1aa>
 800f628:	4276      	negs	r6, r6
 800f62a:	960a      	str	r6, [sp, #40]	; 0x28
 800f62c:	460f      	mov	r7, r1
 800f62e:	f045 0504 	orr.w	r5, r5, #4
 800f632:	e7ac      	b.n	800f58e <_svfprintf_r+0x1a6>
 800f634:	9905      	ldr	r1, [sp, #20]
 800f636:	1c4e      	adds	r6, r1, #1
 800f638:	7809      	ldrb	r1, [r1, #0]
 800f63a:	9102      	str	r1, [sp, #8]
 800f63c:	292a      	cmp	r1, #42	; 0x2a
 800f63e:	d010      	beq.n	800f662 <_svfprintf_r+0x27a>
 800f640:	f04f 0900 	mov.w	r9, #0
 800f644:	9605      	str	r6, [sp, #20]
 800f646:	9902      	ldr	r1, [sp, #8]
 800f648:	3930      	subs	r1, #48	; 0x30
 800f64a:	2909      	cmp	r1, #9
 800f64c:	f63f af31 	bhi.w	800f4b2 <_svfprintf_r+0xca>
 800f650:	fb00 1909 	mla	r9, r0, r9, r1
 800f654:	9905      	ldr	r1, [sp, #20]
 800f656:	460e      	mov	r6, r1
 800f658:	f816 1b01 	ldrb.w	r1, [r6], #1
 800f65c:	9102      	str	r1, [sp, #8]
 800f65e:	9605      	str	r6, [sp, #20]
 800f660:	e7f1      	b.n	800f646 <_svfprintf_r+0x25e>
 800f662:	6839      	ldr	r1, [r7, #0]
 800f664:	9605      	str	r6, [sp, #20]
 800f666:	ea41 79e1 	orr.w	r9, r1, r1, asr #31
 800f66a:	3704      	adds	r7, #4
 800f66c:	e78f      	b.n	800f58e <_svfprintf_r+0x1a6>
 800f66e:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 800f672:	e78c      	b.n	800f58e <_svfprintf_r+0x1a6>
 800f674:	2100      	movs	r1, #0
 800f676:	910a      	str	r1, [sp, #40]	; 0x28
 800f678:	9902      	ldr	r1, [sp, #8]
 800f67a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800f67c:	3930      	subs	r1, #48	; 0x30
 800f67e:	fb00 1106 	mla	r1, r0, r6, r1
 800f682:	910a      	str	r1, [sp, #40]	; 0x28
 800f684:	9905      	ldr	r1, [sp, #20]
 800f686:	460e      	mov	r6, r1
 800f688:	f816 1b01 	ldrb.w	r1, [r6], #1
 800f68c:	9102      	str	r1, [sp, #8]
 800f68e:	9902      	ldr	r1, [sp, #8]
 800f690:	9605      	str	r6, [sp, #20]
 800f692:	3930      	subs	r1, #48	; 0x30
 800f694:	2909      	cmp	r1, #9
 800f696:	d9ef      	bls.n	800f678 <_svfprintf_r+0x290>
 800f698:	e70b      	b.n	800f4b2 <_svfprintf_r+0xca>
 800f69a:	f045 0508 	orr.w	r5, r5, #8
 800f69e:	e776      	b.n	800f58e <_svfprintf_r+0x1a6>
 800f6a0:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 800f6a4:	e773      	b.n	800f58e <_svfprintf_r+0x1a6>
 800f6a6:	bf00      	nop
	...
 800f6b0:	08014774 	.word	0x08014774
 800f6b4:	9905      	ldr	r1, [sp, #20]
 800f6b6:	7809      	ldrb	r1, [r1, #0]
 800f6b8:	296c      	cmp	r1, #108	; 0x6c
 800f6ba:	d105      	bne.n	800f6c8 <_svfprintf_r+0x2e0>
 800f6bc:	9905      	ldr	r1, [sp, #20]
 800f6be:	3101      	adds	r1, #1
 800f6c0:	9105      	str	r1, [sp, #20]
 800f6c2:	f045 0520 	orr.w	r5, r5, #32
 800f6c6:	e762      	b.n	800f58e <_svfprintf_r+0x1a6>
 800f6c8:	f045 0510 	orr.w	r5, r5, #16
 800f6cc:	e75f      	b.n	800f58e <_svfprintf_r+0x1a6>
 800f6ce:	1d3b      	adds	r3, r7, #4
 800f6d0:	9304      	str	r3, [sp, #16]
 800f6d2:	2600      	movs	r6, #0
 800f6d4:	683b      	ldr	r3, [r7, #0]
 800f6d6:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 800f6da:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 800f6de:	f04f 0901 	mov.w	r9, #1
 800f6e2:	4637      	mov	r7, r6
 800f6e4:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 800f6e8:	e11b      	b.n	800f922 <_svfprintf_r+0x53a>
 800f6ea:	b10b      	cbz	r3, 800f6f0 <_svfprintf_r+0x308>
 800f6ec:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800f6f0:	f045 0510 	orr.w	r5, r5, #16
 800f6f4:	e752      	b.n	800f59c <_svfprintf_r+0x1b4>
 800f6f6:	f015 0f10 	tst.w	r5, #16
 800f6fa:	f107 0304 	add.w	r3, r7, #4
 800f6fe:	d003      	beq.n	800f708 <_svfprintf_r+0x320>
 800f700:	683e      	ldr	r6, [r7, #0]
 800f702:	9304      	str	r3, [sp, #16]
 800f704:	17f7      	asrs	r7, r6, #31
 800f706:	e754      	b.n	800f5b2 <_svfprintf_r+0x1ca>
 800f708:	683e      	ldr	r6, [r7, #0]
 800f70a:	9304      	str	r3, [sp, #16]
 800f70c:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f710:	bf18      	it	ne
 800f712:	b236      	sxthne	r6, r6
 800f714:	e7f6      	b.n	800f704 <_svfprintf_r+0x31c>
 800f716:	b10b      	cbz	r3, 800f71c <_svfprintf_r+0x334>
 800f718:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800f71c:	3707      	adds	r7, #7
 800f71e:	f027 0707 	bic.w	r7, r7, #7
 800f722:	f107 0308 	add.w	r3, r7, #8
 800f726:	9304      	str	r3, [sp, #16]
 800f728:	ed97 7b00 	vldr	d7, [r7]
 800f72c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f730:	9b06      	ldr	r3, [sp, #24]
 800f732:	9312      	str	r3, [sp, #72]	; 0x48
 800f734:	9b07      	ldr	r3, [sp, #28]
 800f736:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f73a:	9313      	str	r3, [sp, #76]	; 0x4c
 800f73c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f740:	4b4a      	ldr	r3, [pc, #296]	; (800f86c <_svfprintf_r+0x484>)
 800f742:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800f746:	f7f1 f9fd 	bl	8000b44 <__aeabi_dcmpun>
 800f74a:	2800      	cmp	r0, #0
 800f74c:	f040 85d5 	bne.w	80102fa <_svfprintf_r+0xf12>
 800f750:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f754:	4b45      	ldr	r3, [pc, #276]	; (800f86c <_svfprintf_r+0x484>)
 800f756:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800f75a:	f7f1 f9d5 	bl	8000b08 <__aeabi_dcmple>
 800f75e:	2800      	cmp	r0, #0
 800f760:	f040 85cb 	bne.w	80102fa <_svfprintf_r+0xf12>
 800f764:	2200      	movs	r2, #0
 800f766:	2300      	movs	r3, #0
 800f768:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f76c:	f7f1 f9c2 	bl	8000af4 <__aeabi_dcmplt>
 800f770:	b110      	cbz	r0, 800f778 <_svfprintf_r+0x390>
 800f772:	232d      	movs	r3, #45	; 0x2d
 800f774:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800f778:	4b3d      	ldr	r3, [pc, #244]	; (800f870 <_svfprintf_r+0x488>)
 800f77a:	4a3e      	ldr	r2, [pc, #248]	; (800f874 <_svfprintf_r+0x48c>)
 800f77c:	9902      	ldr	r1, [sp, #8]
 800f77e:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 800f782:	2947      	cmp	r1, #71	; 0x47
 800f784:	bfcc      	ite	gt
 800f786:	4690      	movgt	r8, r2
 800f788:	4698      	movle	r8, r3
 800f78a:	f04f 0903 	mov.w	r9, #3
 800f78e:	2600      	movs	r6, #0
 800f790:	4637      	mov	r7, r6
 800f792:	e0c6      	b.n	800f922 <_svfprintf_r+0x53a>
 800f794:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 800f798:	d022      	beq.n	800f7e0 <_svfprintf_r+0x3f8>
 800f79a:	9b02      	ldr	r3, [sp, #8]
 800f79c:	f023 0320 	bic.w	r3, r3, #32
 800f7a0:	2b47      	cmp	r3, #71	; 0x47
 800f7a2:	d104      	bne.n	800f7ae <_svfprintf_r+0x3c6>
 800f7a4:	f1b9 0f00 	cmp.w	r9, #0
 800f7a8:	bf08      	it	eq
 800f7aa:	f04f 0901 	moveq.w	r9, #1
 800f7ae:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 800f7b2:	930c      	str	r3, [sp, #48]	; 0x30
 800f7b4:	9b07      	ldr	r3, [sp, #28]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	da15      	bge.n	800f7e6 <_svfprintf_r+0x3fe>
 800f7ba:	9b06      	ldr	r3, [sp, #24]
 800f7bc:	930e      	str	r3, [sp, #56]	; 0x38
 800f7be:	9b07      	ldr	r3, [sp, #28]
 800f7c0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f7c4:	930f      	str	r3, [sp, #60]	; 0x3c
 800f7c6:	232d      	movs	r3, #45	; 0x2d
 800f7c8:	930b      	str	r3, [sp, #44]	; 0x2c
 800f7ca:	9b02      	ldr	r3, [sp, #8]
 800f7cc:	f023 0720 	bic.w	r7, r3, #32
 800f7d0:	2f46      	cmp	r7, #70	; 0x46
 800f7d2:	d00e      	beq.n	800f7f2 <_svfprintf_r+0x40a>
 800f7d4:	2f45      	cmp	r7, #69	; 0x45
 800f7d6:	d146      	bne.n	800f866 <_svfprintf_r+0x47e>
 800f7d8:	f109 0601 	add.w	r6, r9, #1
 800f7dc:	2102      	movs	r1, #2
 800f7de:	e00a      	b.n	800f7f6 <_svfprintf_r+0x40e>
 800f7e0:	f04f 0906 	mov.w	r9, #6
 800f7e4:	e7e3      	b.n	800f7ae <_svfprintf_r+0x3c6>
 800f7e6:	ed9d 7b06 	vldr	d7, [sp, #24]
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800f7f0:	e7ea      	b.n	800f7c8 <_svfprintf_r+0x3e0>
 800f7f2:	464e      	mov	r6, r9
 800f7f4:	2103      	movs	r1, #3
 800f7f6:	ab1d      	add	r3, sp, #116	; 0x74
 800f7f8:	9301      	str	r3, [sp, #4]
 800f7fa:	ab1a      	add	r3, sp, #104	; 0x68
 800f7fc:	9300      	str	r3, [sp, #0]
 800f7fe:	4632      	mov	r2, r6
 800f800:	ab19      	add	r3, sp, #100	; 0x64
 800f802:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 800f806:	4658      	mov	r0, fp
 800f808:	f000 fe72 	bl	80104f0 <_dtoa_r>
 800f80c:	2f47      	cmp	r7, #71	; 0x47
 800f80e:	4680      	mov	r8, r0
 800f810:	d102      	bne.n	800f818 <_svfprintf_r+0x430>
 800f812:	07e8      	lsls	r0, r5, #31
 800f814:	f140 857e 	bpl.w	8010314 <_svfprintf_r+0xf2c>
 800f818:	eb08 0306 	add.w	r3, r8, r6
 800f81c:	2f46      	cmp	r7, #70	; 0x46
 800f81e:	9303      	str	r3, [sp, #12]
 800f820:	d111      	bne.n	800f846 <_svfprintf_r+0x45e>
 800f822:	f898 3000 	ldrb.w	r3, [r8]
 800f826:	2b30      	cmp	r3, #48	; 0x30
 800f828:	d109      	bne.n	800f83e <_svfprintf_r+0x456>
 800f82a:	2200      	movs	r2, #0
 800f82c:	2300      	movs	r3, #0
 800f82e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800f832:	f7f1 f955 	bl	8000ae0 <__aeabi_dcmpeq>
 800f836:	b910      	cbnz	r0, 800f83e <_svfprintf_r+0x456>
 800f838:	f1c6 0601 	rsb	r6, r6, #1
 800f83c:	9619      	str	r6, [sp, #100]	; 0x64
 800f83e:	9a03      	ldr	r2, [sp, #12]
 800f840:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f842:	441a      	add	r2, r3
 800f844:	9203      	str	r2, [sp, #12]
 800f846:	2200      	movs	r2, #0
 800f848:	2300      	movs	r3, #0
 800f84a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800f84e:	f7f1 f947 	bl	8000ae0 <__aeabi_dcmpeq>
 800f852:	b988      	cbnz	r0, 800f878 <_svfprintf_r+0x490>
 800f854:	2230      	movs	r2, #48	; 0x30
 800f856:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f858:	9903      	ldr	r1, [sp, #12]
 800f85a:	4299      	cmp	r1, r3
 800f85c:	d90e      	bls.n	800f87c <_svfprintf_r+0x494>
 800f85e:	1c59      	adds	r1, r3, #1
 800f860:	911d      	str	r1, [sp, #116]	; 0x74
 800f862:	701a      	strb	r2, [r3, #0]
 800f864:	e7f7      	b.n	800f856 <_svfprintf_r+0x46e>
 800f866:	464e      	mov	r6, r9
 800f868:	e7b8      	b.n	800f7dc <_svfprintf_r+0x3f4>
 800f86a:	bf00      	nop
 800f86c:	7fefffff 	.word	0x7fefffff
 800f870:	08014764 	.word	0x08014764
 800f874:	08014768 	.word	0x08014768
 800f878:	9b03      	ldr	r3, [sp, #12]
 800f87a:	931d      	str	r3, [sp, #116]	; 0x74
 800f87c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f87e:	2f47      	cmp	r7, #71	; 0x47
 800f880:	eba3 0308 	sub.w	r3, r3, r8
 800f884:	9303      	str	r3, [sp, #12]
 800f886:	f040 80fa 	bne.w	800fa7e <_svfprintf_r+0x696>
 800f88a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f88c:	1cd9      	adds	r1, r3, #3
 800f88e:	db02      	blt.n	800f896 <_svfprintf_r+0x4ae>
 800f890:	4599      	cmp	r9, r3
 800f892:	f280 8120 	bge.w	800fad6 <_svfprintf_r+0x6ee>
 800f896:	9b02      	ldr	r3, [sp, #8]
 800f898:	3b02      	subs	r3, #2
 800f89a:	9302      	str	r3, [sp, #8]
 800f89c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f89e:	f89d 1008 	ldrb.w	r1, [sp, #8]
 800f8a2:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 800f8a6:	1e53      	subs	r3, r2, #1
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	9319      	str	r3, [sp, #100]	; 0x64
 800f8ac:	bfb6      	itet	lt
 800f8ae:	f1c2 0301 	rsblt	r3, r2, #1
 800f8b2:	222b      	movge	r2, #43	; 0x2b
 800f8b4:	222d      	movlt	r2, #45	; 0x2d
 800f8b6:	2b09      	cmp	r3, #9
 800f8b8:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 800f8bc:	f340 80fb 	ble.w	800fab6 <_svfprintf_r+0x6ce>
 800f8c0:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 800f8c4:	260a      	movs	r6, #10
 800f8c6:	fb93 f0f6 	sdiv	r0, r3, r6
 800f8ca:	fb06 3310 	mls	r3, r6, r0, r3
 800f8ce:	3330      	adds	r3, #48	; 0x30
 800f8d0:	2809      	cmp	r0, #9
 800f8d2:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f8d6:	f102 31ff 	add.w	r1, r2, #4294967295	; 0xffffffff
 800f8da:	4603      	mov	r3, r0
 800f8dc:	f300 80e4 	bgt.w	800faa8 <_svfprintf_r+0x6c0>
 800f8e0:	3330      	adds	r3, #48	; 0x30
 800f8e2:	f801 3c01 	strb.w	r3, [r1, #-1]
 800f8e6:	3a02      	subs	r2, #2
 800f8e8:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 800f8ec:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 800f8f0:	4282      	cmp	r2, r0
 800f8f2:	4619      	mov	r1, r3
 800f8f4:	f0c0 80da 	bcc.w	800faac <_svfprintf_r+0x6c4>
 800f8f8:	9a03      	ldr	r2, [sp, #12]
 800f8fa:	ab1b      	add	r3, sp, #108	; 0x6c
 800f8fc:	1acb      	subs	r3, r1, r3
 800f8fe:	2a01      	cmp	r2, #1
 800f900:	9310      	str	r3, [sp, #64]	; 0x40
 800f902:	eb03 0902 	add.w	r9, r3, r2
 800f906:	dc02      	bgt.n	800f90e <_svfprintf_r+0x526>
 800f908:	f015 0701 	ands.w	r7, r5, #1
 800f90c:	d002      	beq.n	800f914 <_svfprintf_r+0x52c>
 800f90e:	9b08      	ldr	r3, [sp, #32]
 800f910:	2700      	movs	r7, #0
 800f912:	4499      	add	r9, r3
 800f914:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f916:	b113      	cbz	r3, 800f91e <_svfprintf_r+0x536>
 800f918:	232d      	movs	r3, #45	; 0x2d
 800f91a:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800f91e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f920:	2600      	movs	r6, #0
 800f922:	454e      	cmp	r6, r9
 800f924:	4633      	mov	r3, r6
 800f926:	bfb8      	it	lt
 800f928:	464b      	movlt	r3, r9
 800f92a:	930b      	str	r3, [sp, #44]	; 0x2c
 800f92c:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 800f930:	b113      	cbz	r3, 800f938 <_svfprintf_r+0x550>
 800f932:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f934:	3301      	adds	r3, #1
 800f936:	930b      	str	r3, [sp, #44]	; 0x2c
 800f938:	f015 0302 	ands.w	r3, r5, #2
 800f93c:	9314      	str	r3, [sp, #80]	; 0x50
 800f93e:	bf1e      	ittt	ne
 800f940:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 800f942:	3302      	addne	r3, #2
 800f944:	930b      	strne	r3, [sp, #44]	; 0x2c
 800f946:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 800f94a:	9315      	str	r3, [sp, #84]	; 0x54
 800f94c:	d118      	bne.n	800f980 <_svfprintf_r+0x598>
 800f94e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f950:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f952:	1a9b      	subs	r3, r3, r2
 800f954:	2b00      	cmp	r3, #0
 800f956:	930c      	str	r3, [sp, #48]	; 0x30
 800f958:	dd12      	ble.n	800f980 <_svfprintf_r+0x598>
 800f95a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f95c:	2b10      	cmp	r3, #16
 800f95e:	4ba9      	ldr	r3, [pc, #676]	; (800fc04 <_svfprintf_r+0x81c>)
 800f960:	6023      	str	r3, [r4, #0]
 800f962:	f300 81d5 	bgt.w	800fd10 <_svfprintf_r+0x928>
 800f966:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f968:	6063      	str	r3, [r4, #4]
 800f96a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f96c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f96e:	4413      	add	r3, r2
 800f970:	9321      	str	r3, [sp, #132]	; 0x84
 800f972:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800f974:	3301      	adds	r3, #1
 800f976:	2b07      	cmp	r3, #7
 800f978:	9320      	str	r3, [sp, #128]	; 0x80
 800f97a:	f300 81e2 	bgt.w	800fd42 <_svfprintf_r+0x95a>
 800f97e:	3408      	adds	r4, #8
 800f980:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 800f984:	b173      	cbz	r3, 800f9a4 <_svfprintf_r+0x5bc>
 800f986:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 800f98a:	6023      	str	r3, [r4, #0]
 800f98c:	2301      	movs	r3, #1
 800f98e:	6063      	str	r3, [r4, #4]
 800f990:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f992:	3301      	adds	r3, #1
 800f994:	9321      	str	r3, [sp, #132]	; 0x84
 800f996:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800f998:	3301      	adds	r3, #1
 800f99a:	2b07      	cmp	r3, #7
 800f99c:	9320      	str	r3, [sp, #128]	; 0x80
 800f99e:	f300 81da 	bgt.w	800fd56 <_svfprintf_r+0x96e>
 800f9a2:	3408      	adds	r4, #8
 800f9a4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f9a6:	b16b      	cbz	r3, 800f9c4 <_svfprintf_r+0x5dc>
 800f9a8:	ab18      	add	r3, sp, #96	; 0x60
 800f9aa:	6023      	str	r3, [r4, #0]
 800f9ac:	2302      	movs	r3, #2
 800f9ae:	6063      	str	r3, [r4, #4]
 800f9b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f9b2:	3302      	adds	r3, #2
 800f9b4:	9321      	str	r3, [sp, #132]	; 0x84
 800f9b6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800f9b8:	3301      	adds	r3, #1
 800f9ba:	2b07      	cmp	r3, #7
 800f9bc:	9320      	str	r3, [sp, #128]	; 0x80
 800f9be:	f300 81d4 	bgt.w	800fd6a <_svfprintf_r+0x982>
 800f9c2:	3408      	adds	r4, #8
 800f9c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f9c6:	2b80      	cmp	r3, #128	; 0x80
 800f9c8:	d114      	bne.n	800f9f4 <_svfprintf_r+0x60c>
 800f9ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f9cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f9ce:	1a9b      	subs	r3, r3, r2
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	dd0f      	ble.n	800f9f4 <_svfprintf_r+0x60c>
 800f9d4:	4a8c      	ldr	r2, [pc, #560]	; (800fc08 <_svfprintf_r+0x820>)
 800f9d6:	6022      	str	r2, [r4, #0]
 800f9d8:	2b10      	cmp	r3, #16
 800f9da:	f300 81d0 	bgt.w	800fd7e <_svfprintf_r+0x996>
 800f9de:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f9e0:	6063      	str	r3, [r4, #4]
 800f9e2:	4413      	add	r3, r2
 800f9e4:	9321      	str	r3, [sp, #132]	; 0x84
 800f9e6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800f9e8:	3301      	adds	r3, #1
 800f9ea:	2b07      	cmp	r3, #7
 800f9ec:	9320      	str	r3, [sp, #128]	; 0x80
 800f9ee:	f300 81df 	bgt.w	800fdb0 <_svfprintf_r+0x9c8>
 800f9f2:	3408      	adds	r4, #8
 800f9f4:	eba6 0609 	sub.w	r6, r6, r9
 800f9f8:	2e00      	cmp	r6, #0
 800f9fa:	dd0f      	ble.n	800fa1c <_svfprintf_r+0x634>
 800f9fc:	4b82      	ldr	r3, [pc, #520]	; (800fc08 <_svfprintf_r+0x820>)
 800f9fe:	6023      	str	r3, [r4, #0]
 800fa00:	2e10      	cmp	r6, #16
 800fa02:	f300 81df 	bgt.w	800fdc4 <_svfprintf_r+0x9dc>
 800fa06:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800fa08:	9821      	ldr	r0, [sp, #132]	; 0x84
 800fa0a:	6066      	str	r6, [r4, #4]
 800fa0c:	3301      	adds	r3, #1
 800fa0e:	4406      	add	r6, r0
 800fa10:	2b07      	cmp	r3, #7
 800fa12:	9621      	str	r6, [sp, #132]	; 0x84
 800fa14:	9320      	str	r3, [sp, #128]	; 0x80
 800fa16:	f300 81ec 	bgt.w	800fdf2 <_svfprintf_r+0xa0a>
 800fa1a:	3408      	adds	r4, #8
 800fa1c:	05eb      	lsls	r3, r5, #23
 800fa1e:	f100 81f2 	bmi.w	800fe06 <_svfprintf_r+0xa1e>
 800fa22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fa24:	e884 0300 	stmia.w	r4, {r8, r9}
 800fa28:	444b      	add	r3, r9
 800fa2a:	9321      	str	r3, [sp, #132]	; 0x84
 800fa2c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800fa2e:	3301      	adds	r3, #1
 800fa30:	2b07      	cmp	r3, #7
 800fa32:	9320      	str	r3, [sp, #128]	; 0x80
 800fa34:	f340 8419 	ble.w	801026a <_svfprintf_r+0xe82>
 800fa38:	aa1f      	add	r2, sp, #124	; 0x7c
 800fa3a:	4651      	mov	r1, sl
 800fa3c:	4658      	mov	r0, fp
 800fa3e:	f001 ff1f 	bl	8011880 <__ssprint_r>
 800fa42:	2800      	cmp	r0, #0
 800fa44:	f040 8431 	bne.w	80102aa <_svfprintf_r+0xec2>
 800fa48:	ac2c      	add	r4, sp, #176	; 0xb0
 800fa4a:	076b      	lsls	r3, r5, #29
 800fa4c:	f100 8410 	bmi.w	8010270 <_svfprintf_r+0xe88>
 800fa50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fa54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fa56:	428a      	cmp	r2, r1
 800fa58:	bfac      	ite	ge
 800fa5a:	189b      	addge	r3, r3, r2
 800fa5c:	185b      	addlt	r3, r3, r1
 800fa5e:	9309      	str	r3, [sp, #36]	; 0x24
 800fa60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fa62:	b13b      	cbz	r3, 800fa74 <_svfprintf_r+0x68c>
 800fa64:	aa1f      	add	r2, sp, #124	; 0x7c
 800fa66:	4651      	mov	r1, sl
 800fa68:	4658      	mov	r0, fp
 800fa6a:	f001 ff09 	bl	8011880 <__ssprint_r>
 800fa6e:	2800      	cmp	r0, #0
 800fa70:	f040 841b 	bne.w	80102aa <_svfprintf_r+0xec2>
 800fa74:	2300      	movs	r3, #0
 800fa76:	9320      	str	r3, [sp, #128]	; 0x80
 800fa78:	9f04      	ldr	r7, [sp, #16]
 800fa7a:	ac2c      	add	r4, sp, #176	; 0xb0
 800fa7c:	e4ee      	b.n	800f45c <_svfprintf_r+0x74>
 800fa7e:	9b02      	ldr	r3, [sp, #8]
 800fa80:	2b65      	cmp	r3, #101	; 0x65
 800fa82:	f77f af0b 	ble.w	800f89c <_svfprintf_r+0x4b4>
 800fa86:	9b02      	ldr	r3, [sp, #8]
 800fa88:	2b66      	cmp	r3, #102	; 0x66
 800fa8a:	d124      	bne.n	800fad6 <_svfprintf_r+0x6ee>
 800fa8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	dd19      	ble.n	800fac6 <_svfprintf_r+0x6de>
 800fa92:	f1b9 0f00 	cmp.w	r9, #0
 800fa96:	d101      	bne.n	800fa9c <_svfprintf_r+0x6b4>
 800fa98:	07ea      	lsls	r2, r5, #31
 800fa9a:	d502      	bpl.n	800faa2 <_svfprintf_r+0x6ba>
 800fa9c:	9a08      	ldr	r2, [sp, #32]
 800fa9e:	4413      	add	r3, r2
 800faa0:	444b      	add	r3, r9
 800faa2:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800faa4:	4699      	mov	r9, r3
 800faa6:	e735      	b.n	800f914 <_svfprintf_r+0x52c>
 800faa8:	460a      	mov	r2, r1
 800faaa:	e70c      	b.n	800f8c6 <_svfprintf_r+0x4de>
 800faac:	f812 1b01 	ldrb.w	r1, [r2], #1
 800fab0:	f803 1b01 	strb.w	r1, [r3], #1
 800fab4:	e71c      	b.n	800f8f0 <_svfprintf_r+0x508>
 800fab6:	2230      	movs	r2, #48	; 0x30
 800fab8:	4413      	add	r3, r2
 800faba:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 800fabe:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800fac2:	a91c      	add	r1, sp, #112	; 0x70
 800fac4:	e718      	b.n	800f8f8 <_svfprintf_r+0x510>
 800fac6:	f1b9 0f00 	cmp.w	r9, #0
 800faca:	d101      	bne.n	800fad0 <_svfprintf_r+0x6e8>
 800facc:	07eb      	lsls	r3, r5, #31
 800face:	d515      	bpl.n	800fafc <_svfprintf_r+0x714>
 800fad0:	9b08      	ldr	r3, [sp, #32]
 800fad2:	3301      	adds	r3, #1
 800fad4:	e7e4      	b.n	800faa0 <_svfprintf_r+0x6b8>
 800fad6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800fad8:	9b03      	ldr	r3, [sp, #12]
 800fada:	429a      	cmp	r2, r3
 800fadc:	db06      	blt.n	800faec <_svfprintf_r+0x704>
 800fade:	07ef      	lsls	r7, r5, #31
 800fae0:	d50e      	bpl.n	800fb00 <_svfprintf_r+0x718>
 800fae2:	9b08      	ldr	r3, [sp, #32]
 800fae4:	4413      	add	r3, r2
 800fae6:	2267      	movs	r2, #103	; 0x67
 800fae8:	9202      	str	r2, [sp, #8]
 800faea:	e7da      	b.n	800faa2 <_svfprintf_r+0x6ba>
 800faec:	9b03      	ldr	r3, [sp, #12]
 800faee:	9908      	ldr	r1, [sp, #32]
 800faf0:	2a00      	cmp	r2, #0
 800faf2:	440b      	add	r3, r1
 800faf4:	dcf7      	bgt.n	800fae6 <_svfprintf_r+0x6fe>
 800faf6:	f1c2 0201 	rsb	r2, r2, #1
 800fafa:	e7f3      	b.n	800fae4 <_svfprintf_r+0x6fc>
 800fafc:	2301      	movs	r3, #1
 800fafe:	e7d0      	b.n	800faa2 <_svfprintf_r+0x6ba>
 800fb00:	4613      	mov	r3, r2
 800fb02:	e7f0      	b.n	800fae6 <_svfprintf_r+0x6fe>
 800fb04:	b10b      	cbz	r3, 800fb0a <_svfprintf_r+0x722>
 800fb06:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800fb0a:	f015 0f20 	tst.w	r5, #32
 800fb0e:	f107 0304 	add.w	r3, r7, #4
 800fb12:	d008      	beq.n	800fb26 <_svfprintf_r+0x73e>
 800fb14:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fb16:	683a      	ldr	r2, [r7, #0]
 800fb18:	17ce      	asrs	r6, r1, #31
 800fb1a:	4608      	mov	r0, r1
 800fb1c:	4631      	mov	r1, r6
 800fb1e:	e9c2 0100 	strd	r0, r1, [r2]
 800fb22:	461f      	mov	r7, r3
 800fb24:	e49a      	b.n	800f45c <_svfprintf_r+0x74>
 800fb26:	06ee      	lsls	r6, r5, #27
 800fb28:	d503      	bpl.n	800fb32 <_svfprintf_r+0x74a>
 800fb2a:	683a      	ldr	r2, [r7, #0]
 800fb2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fb2e:	6011      	str	r1, [r2, #0]
 800fb30:	e7f7      	b.n	800fb22 <_svfprintf_r+0x73a>
 800fb32:	0668      	lsls	r0, r5, #25
 800fb34:	d5f9      	bpl.n	800fb2a <_svfprintf_r+0x742>
 800fb36:	683a      	ldr	r2, [r7, #0]
 800fb38:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 800fb3c:	8011      	strh	r1, [r2, #0]
 800fb3e:	e7f0      	b.n	800fb22 <_svfprintf_r+0x73a>
 800fb40:	f045 0510 	orr.w	r5, r5, #16
 800fb44:	f015 0320 	ands.w	r3, r5, #32
 800fb48:	d022      	beq.n	800fb90 <_svfprintf_r+0x7a8>
 800fb4a:	3707      	adds	r7, #7
 800fb4c:	f027 0707 	bic.w	r7, r7, #7
 800fb50:	f107 0308 	add.w	r3, r7, #8
 800fb54:	e9d7 6700 	ldrd	r6, r7, [r7]
 800fb58:	9304      	str	r3, [sp, #16]
 800fb5a:	2300      	movs	r3, #0
 800fb5c:	2200      	movs	r2, #0
 800fb5e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800fb62:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 800fb66:	f000 83db 	beq.w	8010320 <_svfprintf_r+0xf38>
 800fb6a:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 800fb6e:	920b      	str	r2, [sp, #44]	; 0x2c
 800fb70:	ea56 0207 	orrs.w	r2, r6, r7
 800fb74:	f040 83d9 	bne.w	801032a <_svfprintf_r+0xf42>
 800fb78:	f1b9 0f00 	cmp.w	r9, #0
 800fb7c:	f000 80aa 	beq.w	800fcd4 <_svfprintf_r+0x8ec>
 800fb80:	2b01      	cmp	r3, #1
 800fb82:	d076      	beq.n	800fc72 <_svfprintf_r+0x88a>
 800fb84:	2b02      	cmp	r3, #2
 800fb86:	f000 8091 	beq.w	800fcac <_svfprintf_r+0x8c4>
 800fb8a:	2600      	movs	r6, #0
 800fb8c:	2700      	movs	r7, #0
 800fb8e:	e3d2      	b.n	8010336 <_svfprintf_r+0xf4e>
 800fb90:	1d3a      	adds	r2, r7, #4
 800fb92:	f015 0110 	ands.w	r1, r5, #16
 800fb96:	9204      	str	r2, [sp, #16]
 800fb98:	d002      	beq.n	800fba0 <_svfprintf_r+0x7b8>
 800fb9a:	683e      	ldr	r6, [r7, #0]
 800fb9c:	2700      	movs	r7, #0
 800fb9e:	e7dd      	b.n	800fb5c <_svfprintf_r+0x774>
 800fba0:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 800fba4:	d0f9      	beq.n	800fb9a <_svfprintf_r+0x7b2>
 800fba6:	883e      	ldrh	r6, [r7, #0]
 800fba8:	2700      	movs	r7, #0
 800fbaa:	e7d6      	b.n	800fb5a <_svfprintf_r+0x772>
 800fbac:	1d3b      	adds	r3, r7, #4
 800fbae:	9304      	str	r3, [sp, #16]
 800fbb0:	2330      	movs	r3, #48	; 0x30
 800fbb2:	2278      	movs	r2, #120	; 0x78
 800fbb4:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800fbb8:	4b14      	ldr	r3, [pc, #80]	; (800fc0c <_svfprintf_r+0x824>)
 800fbba:	683e      	ldr	r6, [r7, #0]
 800fbbc:	9311      	str	r3, [sp, #68]	; 0x44
 800fbbe:	2700      	movs	r7, #0
 800fbc0:	f045 0502 	orr.w	r5, r5, #2
 800fbc4:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 800fbc8:	2302      	movs	r3, #2
 800fbca:	9202      	str	r2, [sp, #8]
 800fbcc:	e7c6      	b.n	800fb5c <_svfprintf_r+0x774>
 800fbce:	1d3b      	adds	r3, r7, #4
 800fbd0:	2600      	movs	r6, #0
 800fbd2:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 800fbd6:	9304      	str	r3, [sp, #16]
 800fbd8:	f8d7 8000 	ldr.w	r8, [r7]
 800fbdc:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 800fbe0:	d00a      	beq.n	800fbf8 <_svfprintf_r+0x810>
 800fbe2:	464a      	mov	r2, r9
 800fbe4:	4631      	mov	r1, r6
 800fbe6:	4640      	mov	r0, r8
 800fbe8:	f7f0 fb0a 	bl	8000200 <memchr>
 800fbec:	2800      	cmp	r0, #0
 800fbee:	f000 808d 	beq.w	800fd0c <_svfprintf_r+0x924>
 800fbf2:	eba0 0908 	sub.w	r9, r0, r8
 800fbf6:	e5cb      	b.n	800f790 <_svfprintf_r+0x3a8>
 800fbf8:	4640      	mov	r0, r8
 800fbfa:	f7f0 faf3 	bl	80001e4 <strlen>
 800fbfe:	4681      	mov	r9, r0
 800fc00:	e5c6      	b.n	800f790 <_svfprintf_r+0x3a8>
 800fc02:	bf00      	nop
 800fc04:	08014798 	.word	0x08014798
 800fc08:	080147a8 	.word	0x080147a8
 800fc0c:	08014785 	.word	0x08014785
 800fc10:	f045 0510 	orr.w	r5, r5, #16
 800fc14:	06a9      	lsls	r1, r5, #26
 800fc16:	d509      	bpl.n	800fc2c <_svfprintf_r+0x844>
 800fc18:	3707      	adds	r7, #7
 800fc1a:	f027 0707 	bic.w	r7, r7, #7
 800fc1e:	f107 0308 	add.w	r3, r7, #8
 800fc22:	e9d7 6700 	ldrd	r6, r7, [r7]
 800fc26:	9304      	str	r3, [sp, #16]
 800fc28:	2301      	movs	r3, #1
 800fc2a:	e797      	b.n	800fb5c <_svfprintf_r+0x774>
 800fc2c:	1d3b      	adds	r3, r7, #4
 800fc2e:	f015 0f10 	tst.w	r5, #16
 800fc32:	9304      	str	r3, [sp, #16]
 800fc34:	d001      	beq.n	800fc3a <_svfprintf_r+0x852>
 800fc36:	683e      	ldr	r6, [r7, #0]
 800fc38:	e002      	b.n	800fc40 <_svfprintf_r+0x858>
 800fc3a:	066a      	lsls	r2, r5, #25
 800fc3c:	d5fb      	bpl.n	800fc36 <_svfprintf_r+0x84e>
 800fc3e:	883e      	ldrh	r6, [r7, #0]
 800fc40:	2700      	movs	r7, #0
 800fc42:	e7f1      	b.n	800fc28 <_svfprintf_r+0x840>
 800fc44:	b10b      	cbz	r3, 800fc4a <_svfprintf_r+0x862>
 800fc46:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800fc4a:	4ba3      	ldr	r3, [pc, #652]	; (800fed8 <_svfprintf_r+0xaf0>)
 800fc4c:	e4c2      	b.n	800f5d4 <_svfprintf_r+0x1ec>
 800fc4e:	1d3b      	adds	r3, r7, #4
 800fc50:	f015 0f10 	tst.w	r5, #16
 800fc54:	9304      	str	r3, [sp, #16]
 800fc56:	d001      	beq.n	800fc5c <_svfprintf_r+0x874>
 800fc58:	683e      	ldr	r6, [r7, #0]
 800fc5a:	e002      	b.n	800fc62 <_svfprintf_r+0x87a>
 800fc5c:	066e      	lsls	r6, r5, #25
 800fc5e:	d5fb      	bpl.n	800fc58 <_svfprintf_r+0x870>
 800fc60:	883e      	ldrh	r6, [r7, #0]
 800fc62:	2700      	movs	r7, #0
 800fc64:	e4c2      	b.n	800f5ec <_svfprintf_r+0x204>
 800fc66:	4643      	mov	r3, r8
 800fc68:	e366      	b.n	8010338 <_svfprintf_r+0xf50>
 800fc6a:	2f00      	cmp	r7, #0
 800fc6c:	bf08      	it	eq
 800fc6e:	2e0a      	cmpeq	r6, #10
 800fc70:	d205      	bcs.n	800fc7e <_svfprintf_r+0x896>
 800fc72:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 800fc76:	3630      	adds	r6, #48	; 0x30
 800fc78:	f808 6d41 	strb.w	r6, [r8, #-65]!
 800fc7c:	e377      	b.n	801036e <_svfprintf_r+0xf86>
 800fc7e:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800fc82:	4630      	mov	r0, r6
 800fc84:	4639      	mov	r1, r7
 800fc86:	220a      	movs	r2, #10
 800fc88:	2300      	movs	r3, #0
 800fc8a:	f7f0 ff99 	bl	8000bc0 <__aeabi_uldivmod>
 800fc8e:	3230      	adds	r2, #48	; 0x30
 800fc90:	f808 2d01 	strb.w	r2, [r8, #-1]!
 800fc94:	2300      	movs	r3, #0
 800fc96:	4630      	mov	r0, r6
 800fc98:	4639      	mov	r1, r7
 800fc9a:	220a      	movs	r2, #10
 800fc9c:	f7f0 ff90 	bl	8000bc0 <__aeabi_uldivmod>
 800fca0:	4606      	mov	r6, r0
 800fca2:	460f      	mov	r7, r1
 800fca4:	ea56 0307 	orrs.w	r3, r6, r7
 800fca8:	d1eb      	bne.n	800fc82 <_svfprintf_r+0x89a>
 800fcaa:	e360      	b.n	801036e <_svfprintf_r+0xf86>
 800fcac:	2600      	movs	r6, #0
 800fcae:	2700      	movs	r7, #0
 800fcb0:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800fcb4:	f006 030f 	and.w	r3, r6, #15
 800fcb8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800fcba:	5cd3      	ldrb	r3, [r2, r3]
 800fcbc:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800fcc0:	0933      	lsrs	r3, r6, #4
 800fcc2:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 800fcc6:	093a      	lsrs	r2, r7, #4
 800fcc8:	461e      	mov	r6, r3
 800fcca:	4617      	mov	r7, r2
 800fccc:	ea56 0307 	orrs.w	r3, r6, r7
 800fcd0:	d1f0      	bne.n	800fcb4 <_svfprintf_r+0x8cc>
 800fcd2:	e34c      	b.n	801036e <_svfprintf_r+0xf86>
 800fcd4:	b93b      	cbnz	r3, 800fce6 <_svfprintf_r+0x8fe>
 800fcd6:	07ea      	lsls	r2, r5, #31
 800fcd8:	d505      	bpl.n	800fce6 <_svfprintf_r+0x8fe>
 800fcda:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 800fcde:	2330      	movs	r3, #48	; 0x30
 800fce0:	f808 3d41 	strb.w	r3, [r8, #-65]!
 800fce4:	e343      	b.n	801036e <_svfprintf_r+0xf86>
 800fce6:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800fcea:	e340      	b.n	801036e <_svfprintf_r+0xf86>
 800fcec:	b10b      	cbz	r3, 800fcf2 <_svfprintf_r+0x90a>
 800fcee:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800fcf2:	9b02      	ldr	r3, [sp, #8]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	f000 82f7 	beq.w	80102e8 <_svfprintf_r+0xf00>
 800fcfa:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800fcfe:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 800fd02:	2600      	movs	r6, #0
 800fd04:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 800fd08:	9704      	str	r7, [sp, #16]
 800fd0a:	e4e8      	b.n	800f6de <_svfprintf_r+0x2f6>
 800fd0c:	4606      	mov	r6, r0
 800fd0e:	e53f      	b.n	800f790 <_svfprintf_r+0x3a8>
 800fd10:	2310      	movs	r3, #16
 800fd12:	6063      	str	r3, [r4, #4]
 800fd14:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fd16:	3310      	adds	r3, #16
 800fd18:	9321      	str	r3, [sp, #132]	; 0x84
 800fd1a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800fd1c:	3301      	adds	r3, #1
 800fd1e:	2b07      	cmp	r3, #7
 800fd20:	9320      	str	r3, [sp, #128]	; 0x80
 800fd22:	dc04      	bgt.n	800fd2e <_svfprintf_r+0x946>
 800fd24:	3408      	adds	r4, #8
 800fd26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fd28:	3b10      	subs	r3, #16
 800fd2a:	930c      	str	r3, [sp, #48]	; 0x30
 800fd2c:	e615      	b.n	800f95a <_svfprintf_r+0x572>
 800fd2e:	aa1f      	add	r2, sp, #124	; 0x7c
 800fd30:	4651      	mov	r1, sl
 800fd32:	4658      	mov	r0, fp
 800fd34:	f001 fda4 	bl	8011880 <__ssprint_r>
 800fd38:	2800      	cmp	r0, #0
 800fd3a:	f040 82b6 	bne.w	80102aa <_svfprintf_r+0xec2>
 800fd3e:	ac2c      	add	r4, sp, #176	; 0xb0
 800fd40:	e7f1      	b.n	800fd26 <_svfprintf_r+0x93e>
 800fd42:	aa1f      	add	r2, sp, #124	; 0x7c
 800fd44:	4651      	mov	r1, sl
 800fd46:	4658      	mov	r0, fp
 800fd48:	f001 fd9a 	bl	8011880 <__ssprint_r>
 800fd4c:	2800      	cmp	r0, #0
 800fd4e:	f040 82ac 	bne.w	80102aa <_svfprintf_r+0xec2>
 800fd52:	ac2c      	add	r4, sp, #176	; 0xb0
 800fd54:	e614      	b.n	800f980 <_svfprintf_r+0x598>
 800fd56:	aa1f      	add	r2, sp, #124	; 0x7c
 800fd58:	4651      	mov	r1, sl
 800fd5a:	4658      	mov	r0, fp
 800fd5c:	f001 fd90 	bl	8011880 <__ssprint_r>
 800fd60:	2800      	cmp	r0, #0
 800fd62:	f040 82a2 	bne.w	80102aa <_svfprintf_r+0xec2>
 800fd66:	ac2c      	add	r4, sp, #176	; 0xb0
 800fd68:	e61c      	b.n	800f9a4 <_svfprintf_r+0x5bc>
 800fd6a:	aa1f      	add	r2, sp, #124	; 0x7c
 800fd6c:	4651      	mov	r1, sl
 800fd6e:	4658      	mov	r0, fp
 800fd70:	f001 fd86 	bl	8011880 <__ssprint_r>
 800fd74:	2800      	cmp	r0, #0
 800fd76:	f040 8298 	bne.w	80102aa <_svfprintf_r+0xec2>
 800fd7a:	ac2c      	add	r4, sp, #176	; 0xb0
 800fd7c:	e622      	b.n	800f9c4 <_svfprintf_r+0x5dc>
 800fd7e:	2210      	movs	r2, #16
 800fd80:	6062      	str	r2, [r4, #4]
 800fd82:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fd84:	3210      	adds	r2, #16
 800fd86:	9221      	str	r2, [sp, #132]	; 0x84
 800fd88:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800fd8a:	3201      	adds	r2, #1
 800fd8c:	2a07      	cmp	r2, #7
 800fd8e:	9220      	str	r2, [sp, #128]	; 0x80
 800fd90:	dc02      	bgt.n	800fd98 <_svfprintf_r+0x9b0>
 800fd92:	3408      	adds	r4, #8
 800fd94:	3b10      	subs	r3, #16
 800fd96:	e61d      	b.n	800f9d4 <_svfprintf_r+0x5ec>
 800fd98:	aa1f      	add	r2, sp, #124	; 0x7c
 800fd9a:	4651      	mov	r1, sl
 800fd9c:	4658      	mov	r0, fp
 800fd9e:	930c      	str	r3, [sp, #48]	; 0x30
 800fda0:	f001 fd6e 	bl	8011880 <__ssprint_r>
 800fda4:	2800      	cmp	r0, #0
 800fda6:	f040 8280 	bne.w	80102aa <_svfprintf_r+0xec2>
 800fdaa:	ac2c      	add	r4, sp, #176	; 0xb0
 800fdac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fdae:	e7f1      	b.n	800fd94 <_svfprintf_r+0x9ac>
 800fdb0:	aa1f      	add	r2, sp, #124	; 0x7c
 800fdb2:	4651      	mov	r1, sl
 800fdb4:	4658      	mov	r0, fp
 800fdb6:	f001 fd63 	bl	8011880 <__ssprint_r>
 800fdba:	2800      	cmp	r0, #0
 800fdbc:	f040 8275 	bne.w	80102aa <_svfprintf_r+0xec2>
 800fdc0:	ac2c      	add	r4, sp, #176	; 0xb0
 800fdc2:	e617      	b.n	800f9f4 <_svfprintf_r+0x60c>
 800fdc4:	2310      	movs	r3, #16
 800fdc6:	6063      	str	r3, [r4, #4]
 800fdc8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fdca:	3310      	adds	r3, #16
 800fdcc:	9321      	str	r3, [sp, #132]	; 0x84
 800fdce:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800fdd0:	3301      	adds	r3, #1
 800fdd2:	2b07      	cmp	r3, #7
 800fdd4:	9320      	str	r3, [sp, #128]	; 0x80
 800fdd6:	dc02      	bgt.n	800fdde <_svfprintf_r+0x9f6>
 800fdd8:	3408      	adds	r4, #8
 800fdda:	3e10      	subs	r6, #16
 800fddc:	e60e      	b.n	800f9fc <_svfprintf_r+0x614>
 800fdde:	aa1f      	add	r2, sp, #124	; 0x7c
 800fde0:	4651      	mov	r1, sl
 800fde2:	4658      	mov	r0, fp
 800fde4:	f001 fd4c 	bl	8011880 <__ssprint_r>
 800fde8:	2800      	cmp	r0, #0
 800fdea:	f040 825e 	bne.w	80102aa <_svfprintf_r+0xec2>
 800fdee:	ac2c      	add	r4, sp, #176	; 0xb0
 800fdf0:	e7f3      	b.n	800fdda <_svfprintf_r+0x9f2>
 800fdf2:	aa1f      	add	r2, sp, #124	; 0x7c
 800fdf4:	4651      	mov	r1, sl
 800fdf6:	4658      	mov	r0, fp
 800fdf8:	f001 fd42 	bl	8011880 <__ssprint_r>
 800fdfc:	2800      	cmp	r0, #0
 800fdfe:	f040 8254 	bne.w	80102aa <_svfprintf_r+0xec2>
 800fe02:	ac2c      	add	r4, sp, #176	; 0xb0
 800fe04:	e60a      	b.n	800fa1c <_svfprintf_r+0x634>
 800fe06:	9b02      	ldr	r3, [sp, #8]
 800fe08:	2b65      	cmp	r3, #101	; 0x65
 800fe0a:	f340 81a9 	ble.w	8010160 <_svfprintf_r+0xd78>
 800fe0e:	2200      	movs	r2, #0
 800fe10:	2300      	movs	r3, #0
 800fe12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fe16:	f7f0 fe63 	bl	8000ae0 <__aeabi_dcmpeq>
 800fe1a:	2800      	cmp	r0, #0
 800fe1c:	d062      	beq.n	800fee4 <_svfprintf_r+0xafc>
 800fe1e:	4b2f      	ldr	r3, [pc, #188]	; (800fedc <_svfprintf_r+0xaf4>)
 800fe20:	6023      	str	r3, [r4, #0]
 800fe22:	2301      	movs	r3, #1
 800fe24:	6063      	str	r3, [r4, #4]
 800fe26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fe28:	3301      	adds	r3, #1
 800fe2a:	9321      	str	r3, [sp, #132]	; 0x84
 800fe2c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800fe2e:	3301      	adds	r3, #1
 800fe30:	2b07      	cmp	r3, #7
 800fe32:	9320      	str	r3, [sp, #128]	; 0x80
 800fe34:	dc25      	bgt.n	800fe82 <_svfprintf_r+0xa9a>
 800fe36:	3408      	adds	r4, #8
 800fe38:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fe3a:	9a03      	ldr	r2, [sp, #12]
 800fe3c:	4293      	cmp	r3, r2
 800fe3e:	db02      	blt.n	800fe46 <_svfprintf_r+0xa5e>
 800fe40:	07ee      	lsls	r6, r5, #31
 800fe42:	f57f ae02 	bpl.w	800fa4a <_svfprintf_r+0x662>
 800fe46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fe48:	6023      	str	r3, [r4, #0]
 800fe4a:	9b08      	ldr	r3, [sp, #32]
 800fe4c:	6063      	str	r3, [r4, #4]
 800fe4e:	9a08      	ldr	r2, [sp, #32]
 800fe50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fe52:	4413      	add	r3, r2
 800fe54:	9321      	str	r3, [sp, #132]	; 0x84
 800fe56:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800fe58:	3301      	adds	r3, #1
 800fe5a:	2b07      	cmp	r3, #7
 800fe5c:	9320      	str	r3, [sp, #128]	; 0x80
 800fe5e:	dc1a      	bgt.n	800fe96 <_svfprintf_r+0xaae>
 800fe60:	3408      	adds	r4, #8
 800fe62:	9b03      	ldr	r3, [sp, #12]
 800fe64:	1e5e      	subs	r6, r3, #1
 800fe66:	2e00      	cmp	r6, #0
 800fe68:	f77f adef 	ble.w	800fa4a <_svfprintf_r+0x662>
 800fe6c:	4f1c      	ldr	r7, [pc, #112]	; (800fee0 <_svfprintf_r+0xaf8>)
 800fe6e:	f04f 0810 	mov.w	r8, #16
 800fe72:	2e10      	cmp	r6, #16
 800fe74:	6027      	str	r7, [r4, #0]
 800fe76:	dc18      	bgt.n	800feaa <_svfprintf_r+0xac2>
 800fe78:	6066      	str	r6, [r4, #4]
 800fe7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fe7c:	441e      	add	r6, r3
 800fe7e:	9621      	str	r6, [sp, #132]	; 0x84
 800fe80:	e5d4      	b.n	800fa2c <_svfprintf_r+0x644>
 800fe82:	aa1f      	add	r2, sp, #124	; 0x7c
 800fe84:	4651      	mov	r1, sl
 800fe86:	4658      	mov	r0, fp
 800fe88:	f001 fcfa 	bl	8011880 <__ssprint_r>
 800fe8c:	2800      	cmp	r0, #0
 800fe8e:	f040 820c 	bne.w	80102aa <_svfprintf_r+0xec2>
 800fe92:	ac2c      	add	r4, sp, #176	; 0xb0
 800fe94:	e7d0      	b.n	800fe38 <_svfprintf_r+0xa50>
 800fe96:	aa1f      	add	r2, sp, #124	; 0x7c
 800fe98:	4651      	mov	r1, sl
 800fe9a:	4658      	mov	r0, fp
 800fe9c:	f001 fcf0 	bl	8011880 <__ssprint_r>
 800fea0:	2800      	cmp	r0, #0
 800fea2:	f040 8202 	bne.w	80102aa <_svfprintf_r+0xec2>
 800fea6:	ac2c      	add	r4, sp, #176	; 0xb0
 800fea8:	e7db      	b.n	800fe62 <_svfprintf_r+0xa7a>
 800feaa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800feac:	f8c4 8004 	str.w	r8, [r4, #4]
 800feb0:	3310      	adds	r3, #16
 800feb2:	9321      	str	r3, [sp, #132]	; 0x84
 800feb4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800feb6:	3301      	adds	r3, #1
 800feb8:	2b07      	cmp	r3, #7
 800feba:	9320      	str	r3, [sp, #128]	; 0x80
 800febc:	dc02      	bgt.n	800fec4 <_svfprintf_r+0xadc>
 800febe:	3408      	adds	r4, #8
 800fec0:	3e10      	subs	r6, #16
 800fec2:	e7d6      	b.n	800fe72 <_svfprintf_r+0xa8a>
 800fec4:	aa1f      	add	r2, sp, #124	; 0x7c
 800fec6:	4651      	mov	r1, sl
 800fec8:	4658      	mov	r0, fp
 800feca:	f001 fcd9 	bl	8011880 <__ssprint_r>
 800fece:	2800      	cmp	r0, #0
 800fed0:	f040 81eb 	bne.w	80102aa <_svfprintf_r+0xec2>
 800fed4:	ac2c      	add	r4, sp, #176	; 0xb0
 800fed6:	e7f3      	b.n	800fec0 <_svfprintf_r+0xad8>
 800fed8:	08014785 	.word	0x08014785
 800fedc:	08014796 	.word	0x08014796
 800fee0:	080147a8 	.word	0x080147a8
 800fee4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	dc7a      	bgt.n	800ffe0 <_svfprintf_r+0xbf8>
 800feea:	4b9b      	ldr	r3, [pc, #620]	; (8010158 <_svfprintf_r+0xd70>)
 800feec:	6023      	str	r3, [r4, #0]
 800feee:	2301      	movs	r3, #1
 800fef0:	6063      	str	r3, [r4, #4]
 800fef2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fef4:	3301      	adds	r3, #1
 800fef6:	9321      	str	r3, [sp, #132]	; 0x84
 800fef8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800fefa:	3301      	adds	r3, #1
 800fefc:	2b07      	cmp	r3, #7
 800fefe:	9320      	str	r3, [sp, #128]	; 0x80
 800ff00:	dc44      	bgt.n	800ff8c <_svfprintf_r+0xba4>
 800ff02:	3408      	adds	r4, #8
 800ff04:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ff06:	b923      	cbnz	r3, 800ff12 <_svfprintf_r+0xb2a>
 800ff08:	9b03      	ldr	r3, [sp, #12]
 800ff0a:	b913      	cbnz	r3, 800ff12 <_svfprintf_r+0xb2a>
 800ff0c:	07e8      	lsls	r0, r5, #31
 800ff0e:	f57f ad9c 	bpl.w	800fa4a <_svfprintf_r+0x662>
 800ff12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ff14:	6023      	str	r3, [r4, #0]
 800ff16:	9b08      	ldr	r3, [sp, #32]
 800ff18:	6063      	str	r3, [r4, #4]
 800ff1a:	9a08      	ldr	r2, [sp, #32]
 800ff1c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ff1e:	4413      	add	r3, r2
 800ff20:	9321      	str	r3, [sp, #132]	; 0x84
 800ff22:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ff24:	3301      	adds	r3, #1
 800ff26:	2b07      	cmp	r3, #7
 800ff28:	9320      	str	r3, [sp, #128]	; 0x80
 800ff2a:	dc39      	bgt.n	800ffa0 <_svfprintf_r+0xbb8>
 800ff2c:	f104 0308 	add.w	r3, r4, #8
 800ff30:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800ff32:	2e00      	cmp	r6, #0
 800ff34:	da19      	bge.n	800ff6a <_svfprintf_r+0xb82>
 800ff36:	4f89      	ldr	r7, [pc, #548]	; (801015c <_svfprintf_r+0xd74>)
 800ff38:	4276      	negs	r6, r6
 800ff3a:	2410      	movs	r4, #16
 800ff3c:	2e10      	cmp	r6, #16
 800ff3e:	601f      	str	r7, [r3, #0]
 800ff40:	dc38      	bgt.n	800ffb4 <_svfprintf_r+0xbcc>
 800ff42:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ff44:	605e      	str	r6, [r3, #4]
 800ff46:	4416      	add	r6, r2
 800ff48:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ff4a:	9621      	str	r6, [sp, #132]	; 0x84
 800ff4c:	3201      	adds	r2, #1
 800ff4e:	2a07      	cmp	r2, #7
 800ff50:	f103 0308 	add.w	r3, r3, #8
 800ff54:	9220      	str	r2, [sp, #128]	; 0x80
 800ff56:	dd08      	ble.n	800ff6a <_svfprintf_r+0xb82>
 800ff58:	aa1f      	add	r2, sp, #124	; 0x7c
 800ff5a:	4651      	mov	r1, sl
 800ff5c:	4658      	mov	r0, fp
 800ff5e:	f001 fc8f 	bl	8011880 <__ssprint_r>
 800ff62:	2800      	cmp	r0, #0
 800ff64:	f040 81a1 	bne.w	80102aa <_svfprintf_r+0xec2>
 800ff68:	ab2c      	add	r3, sp, #176	; 0xb0
 800ff6a:	9a03      	ldr	r2, [sp, #12]
 800ff6c:	605a      	str	r2, [r3, #4]
 800ff6e:	9903      	ldr	r1, [sp, #12]
 800ff70:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ff72:	f8c3 8000 	str.w	r8, [r3]
 800ff76:	440a      	add	r2, r1
 800ff78:	9221      	str	r2, [sp, #132]	; 0x84
 800ff7a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ff7c:	3201      	adds	r2, #1
 800ff7e:	2a07      	cmp	r2, #7
 800ff80:	9220      	str	r2, [sp, #128]	; 0x80
 800ff82:	f73f ad59 	bgt.w	800fa38 <_svfprintf_r+0x650>
 800ff86:	f103 0408 	add.w	r4, r3, #8
 800ff8a:	e55e      	b.n	800fa4a <_svfprintf_r+0x662>
 800ff8c:	aa1f      	add	r2, sp, #124	; 0x7c
 800ff8e:	4651      	mov	r1, sl
 800ff90:	4658      	mov	r0, fp
 800ff92:	f001 fc75 	bl	8011880 <__ssprint_r>
 800ff96:	2800      	cmp	r0, #0
 800ff98:	f040 8187 	bne.w	80102aa <_svfprintf_r+0xec2>
 800ff9c:	ac2c      	add	r4, sp, #176	; 0xb0
 800ff9e:	e7b1      	b.n	800ff04 <_svfprintf_r+0xb1c>
 800ffa0:	aa1f      	add	r2, sp, #124	; 0x7c
 800ffa2:	4651      	mov	r1, sl
 800ffa4:	4658      	mov	r0, fp
 800ffa6:	f001 fc6b 	bl	8011880 <__ssprint_r>
 800ffaa:	2800      	cmp	r0, #0
 800ffac:	f040 817d 	bne.w	80102aa <_svfprintf_r+0xec2>
 800ffb0:	ab2c      	add	r3, sp, #176	; 0xb0
 800ffb2:	e7bd      	b.n	800ff30 <_svfprintf_r+0xb48>
 800ffb4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ffb6:	605c      	str	r4, [r3, #4]
 800ffb8:	3210      	adds	r2, #16
 800ffba:	9221      	str	r2, [sp, #132]	; 0x84
 800ffbc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ffbe:	3201      	adds	r2, #1
 800ffc0:	2a07      	cmp	r2, #7
 800ffc2:	9220      	str	r2, [sp, #128]	; 0x80
 800ffc4:	dc02      	bgt.n	800ffcc <_svfprintf_r+0xbe4>
 800ffc6:	3308      	adds	r3, #8
 800ffc8:	3e10      	subs	r6, #16
 800ffca:	e7b7      	b.n	800ff3c <_svfprintf_r+0xb54>
 800ffcc:	aa1f      	add	r2, sp, #124	; 0x7c
 800ffce:	4651      	mov	r1, sl
 800ffd0:	4658      	mov	r0, fp
 800ffd2:	f001 fc55 	bl	8011880 <__ssprint_r>
 800ffd6:	2800      	cmp	r0, #0
 800ffd8:	f040 8167 	bne.w	80102aa <_svfprintf_r+0xec2>
 800ffdc:	ab2c      	add	r3, sp, #176	; 0xb0
 800ffde:	e7f3      	b.n	800ffc8 <_svfprintf_r+0xbe0>
 800ffe0:	9b03      	ldr	r3, [sp, #12]
 800ffe2:	42bb      	cmp	r3, r7
 800ffe4:	bfa8      	it	ge
 800ffe6:	463b      	movge	r3, r7
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	461e      	mov	r6, r3
 800ffec:	dd0b      	ble.n	8010006 <_svfprintf_r+0xc1e>
 800ffee:	6063      	str	r3, [r4, #4]
 800fff0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fff2:	f8c4 8000 	str.w	r8, [r4]
 800fff6:	4433      	add	r3, r6
 800fff8:	9321      	str	r3, [sp, #132]	; 0x84
 800fffa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800fffc:	3301      	adds	r3, #1
 800fffe:	2b07      	cmp	r3, #7
 8010000:	9320      	str	r3, [sp, #128]	; 0x80
 8010002:	dc5f      	bgt.n	80100c4 <_svfprintf_r+0xcdc>
 8010004:	3408      	adds	r4, #8
 8010006:	2e00      	cmp	r6, #0
 8010008:	bfac      	ite	ge
 801000a:	1bbe      	subge	r6, r7, r6
 801000c:	463e      	movlt	r6, r7
 801000e:	2e00      	cmp	r6, #0
 8010010:	dd0f      	ble.n	8010032 <_svfprintf_r+0xc4a>
 8010012:	f8df 9148 	ldr.w	r9, [pc, #328]	; 801015c <_svfprintf_r+0xd74>
 8010016:	f8c4 9000 	str.w	r9, [r4]
 801001a:	2e10      	cmp	r6, #16
 801001c:	dc5c      	bgt.n	80100d8 <_svfprintf_r+0xcf0>
 801001e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010020:	6066      	str	r6, [r4, #4]
 8010022:	441e      	add	r6, r3
 8010024:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8010026:	9621      	str	r6, [sp, #132]	; 0x84
 8010028:	3301      	adds	r3, #1
 801002a:	2b07      	cmp	r3, #7
 801002c:	9320      	str	r3, [sp, #128]	; 0x80
 801002e:	dc6a      	bgt.n	8010106 <_svfprintf_r+0xd1e>
 8010030:	3408      	adds	r4, #8
 8010032:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010034:	9a03      	ldr	r2, [sp, #12]
 8010036:	4293      	cmp	r3, r2
 8010038:	db01      	blt.n	801003e <_svfprintf_r+0xc56>
 801003a:	07e9      	lsls	r1, r5, #31
 801003c:	d50d      	bpl.n	801005a <_svfprintf_r+0xc72>
 801003e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010040:	6023      	str	r3, [r4, #0]
 8010042:	9b08      	ldr	r3, [sp, #32]
 8010044:	6063      	str	r3, [r4, #4]
 8010046:	9a08      	ldr	r2, [sp, #32]
 8010048:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801004a:	4413      	add	r3, r2
 801004c:	9321      	str	r3, [sp, #132]	; 0x84
 801004e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8010050:	3301      	adds	r3, #1
 8010052:	2b07      	cmp	r3, #7
 8010054:	9320      	str	r3, [sp, #128]	; 0x80
 8010056:	dc60      	bgt.n	801011a <_svfprintf_r+0xd32>
 8010058:	3408      	adds	r4, #8
 801005a:	9b03      	ldr	r3, [sp, #12]
 801005c:	9a03      	ldr	r2, [sp, #12]
 801005e:	1bde      	subs	r6, r3, r7
 8010060:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010062:	1ad3      	subs	r3, r2, r3
 8010064:	429e      	cmp	r6, r3
 8010066:	bfa8      	it	ge
 8010068:	461e      	movge	r6, r3
 801006a:	2e00      	cmp	r6, #0
 801006c:	dd0b      	ble.n	8010086 <_svfprintf_r+0xc9e>
 801006e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010070:	6066      	str	r6, [r4, #4]
 8010072:	4433      	add	r3, r6
 8010074:	9321      	str	r3, [sp, #132]	; 0x84
 8010076:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8010078:	3301      	adds	r3, #1
 801007a:	4447      	add	r7, r8
 801007c:	2b07      	cmp	r3, #7
 801007e:	6027      	str	r7, [r4, #0]
 8010080:	9320      	str	r3, [sp, #128]	; 0x80
 8010082:	dc54      	bgt.n	801012e <_svfprintf_r+0xd46>
 8010084:	3408      	adds	r4, #8
 8010086:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010088:	9a03      	ldr	r2, [sp, #12]
 801008a:	2e00      	cmp	r6, #0
 801008c:	eba2 0303 	sub.w	r3, r2, r3
 8010090:	bfac      	ite	ge
 8010092:	1b9e      	subge	r6, r3, r6
 8010094:	461e      	movlt	r6, r3
 8010096:	2e00      	cmp	r6, #0
 8010098:	f77f acd7 	ble.w	800fa4a <_svfprintf_r+0x662>
 801009c:	4f2f      	ldr	r7, [pc, #188]	; (801015c <_svfprintf_r+0xd74>)
 801009e:	f04f 0810 	mov.w	r8, #16
 80100a2:	2e10      	cmp	r6, #16
 80100a4:	6027      	str	r7, [r4, #0]
 80100a6:	f77f aee7 	ble.w	800fe78 <_svfprintf_r+0xa90>
 80100aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80100ac:	f8c4 8004 	str.w	r8, [r4, #4]
 80100b0:	3310      	adds	r3, #16
 80100b2:	9321      	str	r3, [sp, #132]	; 0x84
 80100b4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80100b6:	3301      	adds	r3, #1
 80100b8:	2b07      	cmp	r3, #7
 80100ba:	9320      	str	r3, [sp, #128]	; 0x80
 80100bc:	dc41      	bgt.n	8010142 <_svfprintf_r+0xd5a>
 80100be:	3408      	adds	r4, #8
 80100c0:	3e10      	subs	r6, #16
 80100c2:	e7ee      	b.n	80100a2 <_svfprintf_r+0xcba>
 80100c4:	aa1f      	add	r2, sp, #124	; 0x7c
 80100c6:	4651      	mov	r1, sl
 80100c8:	4658      	mov	r0, fp
 80100ca:	f001 fbd9 	bl	8011880 <__ssprint_r>
 80100ce:	2800      	cmp	r0, #0
 80100d0:	f040 80eb 	bne.w	80102aa <_svfprintf_r+0xec2>
 80100d4:	ac2c      	add	r4, sp, #176	; 0xb0
 80100d6:	e796      	b.n	8010006 <_svfprintf_r+0xc1e>
 80100d8:	2310      	movs	r3, #16
 80100da:	6063      	str	r3, [r4, #4]
 80100dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80100de:	3310      	adds	r3, #16
 80100e0:	9321      	str	r3, [sp, #132]	; 0x84
 80100e2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80100e4:	3301      	adds	r3, #1
 80100e6:	2b07      	cmp	r3, #7
 80100e8:	9320      	str	r3, [sp, #128]	; 0x80
 80100ea:	dc02      	bgt.n	80100f2 <_svfprintf_r+0xd0a>
 80100ec:	3408      	adds	r4, #8
 80100ee:	3e10      	subs	r6, #16
 80100f0:	e791      	b.n	8010016 <_svfprintf_r+0xc2e>
 80100f2:	aa1f      	add	r2, sp, #124	; 0x7c
 80100f4:	4651      	mov	r1, sl
 80100f6:	4658      	mov	r0, fp
 80100f8:	f001 fbc2 	bl	8011880 <__ssprint_r>
 80100fc:	2800      	cmp	r0, #0
 80100fe:	f040 80d4 	bne.w	80102aa <_svfprintf_r+0xec2>
 8010102:	ac2c      	add	r4, sp, #176	; 0xb0
 8010104:	e7f3      	b.n	80100ee <_svfprintf_r+0xd06>
 8010106:	aa1f      	add	r2, sp, #124	; 0x7c
 8010108:	4651      	mov	r1, sl
 801010a:	4658      	mov	r0, fp
 801010c:	f001 fbb8 	bl	8011880 <__ssprint_r>
 8010110:	2800      	cmp	r0, #0
 8010112:	f040 80ca 	bne.w	80102aa <_svfprintf_r+0xec2>
 8010116:	ac2c      	add	r4, sp, #176	; 0xb0
 8010118:	e78b      	b.n	8010032 <_svfprintf_r+0xc4a>
 801011a:	aa1f      	add	r2, sp, #124	; 0x7c
 801011c:	4651      	mov	r1, sl
 801011e:	4658      	mov	r0, fp
 8010120:	f001 fbae 	bl	8011880 <__ssprint_r>
 8010124:	2800      	cmp	r0, #0
 8010126:	f040 80c0 	bne.w	80102aa <_svfprintf_r+0xec2>
 801012a:	ac2c      	add	r4, sp, #176	; 0xb0
 801012c:	e795      	b.n	801005a <_svfprintf_r+0xc72>
 801012e:	aa1f      	add	r2, sp, #124	; 0x7c
 8010130:	4651      	mov	r1, sl
 8010132:	4658      	mov	r0, fp
 8010134:	f001 fba4 	bl	8011880 <__ssprint_r>
 8010138:	2800      	cmp	r0, #0
 801013a:	f040 80b6 	bne.w	80102aa <_svfprintf_r+0xec2>
 801013e:	ac2c      	add	r4, sp, #176	; 0xb0
 8010140:	e7a1      	b.n	8010086 <_svfprintf_r+0xc9e>
 8010142:	aa1f      	add	r2, sp, #124	; 0x7c
 8010144:	4651      	mov	r1, sl
 8010146:	4658      	mov	r0, fp
 8010148:	f001 fb9a 	bl	8011880 <__ssprint_r>
 801014c:	2800      	cmp	r0, #0
 801014e:	f040 80ac 	bne.w	80102aa <_svfprintf_r+0xec2>
 8010152:	ac2c      	add	r4, sp, #176	; 0xb0
 8010154:	e7b4      	b.n	80100c0 <_svfprintf_r+0xcd8>
 8010156:	bf00      	nop
 8010158:	08014796 	.word	0x08014796
 801015c:	080147a8 	.word	0x080147a8
 8010160:	9b03      	ldr	r3, [sp, #12]
 8010162:	2b01      	cmp	r3, #1
 8010164:	dc01      	bgt.n	801016a <_svfprintf_r+0xd82>
 8010166:	07ea      	lsls	r2, r5, #31
 8010168:	d576      	bpl.n	8010258 <_svfprintf_r+0xe70>
 801016a:	2301      	movs	r3, #1
 801016c:	6063      	str	r3, [r4, #4]
 801016e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010170:	f8c4 8000 	str.w	r8, [r4]
 8010174:	3301      	adds	r3, #1
 8010176:	9321      	str	r3, [sp, #132]	; 0x84
 8010178:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801017a:	3301      	adds	r3, #1
 801017c:	2b07      	cmp	r3, #7
 801017e:	9320      	str	r3, [sp, #128]	; 0x80
 8010180:	dc36      	bgt.n	80101f0 <_svfprintf_r+0xe08>
 8010182:	3408      	adds	r4, #8
 8010184:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010186:	6023      	str	r3, [r4, #0]
 8010188:	9b08      	ldr	r3, [sp, #32]
 801018a:	6063      	str	r3, [r4, #4]
 801018c:	9a08      	ldr	r2, [sp, #32]
 801018e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010190:	4413      	add	r3, r2
 8010192:	9321      	str	r3, [sp, #132]	; 0x84
 8010194:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8010196:	3301      	adds	r3, #1
 8010198:	2b07      	cmp	r3, #7
 801019a:	9320      	str	r3, [sp, #128]	; 0x80
 801019c:	dc31      	bgt.n	8010202 <_svfprintf_r+0xe1a>
 801019e:	3408      	adds	r4, #8
 80101a0:	2300      	movs	r3, #0
 80101a2:	2200      	movs	r2, #0
 80101a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80101a8:	f7f0 fc9a 	bl	8000ae0 <__aeabi_dcmpeq>
 80101ac:	9b03      	ldr	r3, [sp, #12]
 80101ae:	1e5e      	subs	r6, r3, #1
 80101b0:	2800      	cmp	r0, #0
 80101b2:	d12f      	bne.n	8010214 <_svfprintf_r+0xe2c>
 80101b4:	f108 0301 	add.w	r3, r8, #1
 80101b8:	e884 0048 	stmia.w	r4, {r3, r6}
 80101bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80101be:	9a03      	ldr	r2, [sp, #12]
 80101c0:	3b01      	subs	r3, #1
 80101c2:	4413      	add	r3, r2
 80101c4:	9321      	str	r3, [sp, #132]	; 0x84
 80101c6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80101c8:	3301      	adds	r3, #1
 80101ca:	2b07      	cmp	r3, #7
 80101cc:	9320      	str	r3, [sp, #128]	; 0x80
 80101ce:	dd4a      	ble.n	8010266 <_svfprintf_r+0xe7e>
 80101d0:	aa1f      	add	r2, sp, #124	; 0x7c
 80101d2:	4651      	mov	r1, sl
 80101d4:	4658      	mov	r0, fp
 80101d6:	f001 fb53 	bl	8011880 <__ssprint_r>
 80101da:	2800      	cmp	r0, #0
 80101dc:	d165      	bne.n	80102aa <_svfprintf_r+0xec2>
 80101de:	ac2c      	add	r4, sp, #176	; 0xb0
 80101e0:	ab1b      	add	r3, sp, #108	; 0x6c
 80101e2:	6023      	str	r3, [r4, #0]
 80101e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80101e6:	6063      	str	r3, [r4, #4]
 80101e8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80101ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80101ec:	4413      	add	r3, r2
 80101ee:	e41c      	b.n	800fa2a <_svfprintf_r+0x642>
 80101f0:	aa1f      	add	r2, sp, #124	; 0x7c
 80101f2:	4651      	mov	r1, sl
 80101f4:	4658      	mov	r0, fp
 80101f6:	f001 fb43 	bl	8011880 <__ssprint_r>
 80101fa:	2800      	cmp	r0, #0
 80101fc:	d155      	bne.n	80102aa <_svfprintf_r+0xec2>
 80101fe:	ac2c      	add	r4, sp, #176	; 0xb0
 8010200:	e7c0      	b.n	8010184 <_svfprintf_r+0xd9c>
 8010202:	aa1f      	add	r2, sp, #124	; 0x7c
 8010204:	4651      	mov	r1, sl
 8010206:	4658      	mov	r0, fp
 8010208:	f001 fb3a 	bl	8011880 <__ssprint_r>
 801020c:	2800      	cmp	r0, #0
 801020e:	d14c      	bne.n	80102aa <_svfprintf_r+0xec2>
 8010210:	ac2c      	add	r4, sp, #176	; 0xb0
 8010212:	e7c5      	b.n	80101a0 <_svfprintf_r+0xdb8>
 8010214:	2e00      	cmp	r6, #0
 8010216:	dde3      	ble.n	80101e0 <_svfprintf_r+0xdf8>
 8010218:	4f59      	ldr	r7, [pc, #356]	; (8010380 <_svfprintf_r+0xf98>)
 801021a:	f04f 0810 	mov.w	r8, #16
 801021e:	2e10      	cmp	r6, #16
 8010220:	6027      	str	r7, [r4, #0]
 8010222:	dc04      	bgt.n	801022e <_svfprintf_r+0xe46>
 8010224:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010226:	6066      	str	r6, [r4, #4]
 8010228:	441e      	add	r6, r3
 801022a:	9621      	str	r6, [sp, #132]	; 0x84
 801022c:	e7cb      	b.n	80101c6 <_svfprintf_r+0xdde>
 801022e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010230:	f8c4 8004 	str.w	r8, [r4, #4]
 8010234:	3310      	adds	r3, #16
 8010236:	9321      	str	r3, [sp, #132]	; 0x84
 8010238:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801023a:	3301      	adds	r3, #1
 801023c:	2b07      	cmp	r3, #7
 801023e:	9320      	str	r3, [sp, #128]	; 0x80
 8010240:	dc02      	bgt.n	8010248 <_svfprintf_r+0xe60>
 8010242:	3408      	adds	r4, #8
 8010244:	3e10      	subs	r6, #16
 8010246:	e7ea      	b.n	801021e <_svfprintf_r+0xe36>
 8010248:	aa1f      	add	r2, sp, #124	; 0x7c
 801024a:	4651      	mov	r1, sl
 801024c:	4658      	mov	r0, fp
 801024e:	f001 fb17 	bl	8011880 <__ssprint_r>
 8010252:	bb50      	cbnz	r0, 80102aa <_svfprintf_r+0xec2>
 8010254:	ac2c      	add	r4, sp, #176	; 0xb0
 8010256:	e7f5      	b.n	8010244 <_svfprintf_r+0xe5c>
 8010258:	2301      	movs	r3, #1
 801025a:	6063      	str	r3, [r4, #4]
 801025c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801025e:	f8c4 8000 	str.w	r8, [r4]
 8010262:	3301      	adds	r3, #1
 8010264:	e7ae      	b.n	80101c4 <_svfprintf_r+0xddc>
 8010266:	3408      	adds	r4, #8
 8010268:	e7ba      	b.n	80101e0 <_svfprintf_r+0xdf8>
 801026a:	3408      	adds	r4, #8
 801026c:	f7ff bbed 	b.w	800fa4a <_svfprintf_r+0x662>
 8010270:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010272:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010274:	1a9d      	subs	r5, r3, r2
 8010276:	2d00      	cmp	r5, #0
 8010278:	f77f abea 	ble.w	800fa50 <_svfprintf_r+0x668>
 801027c:	2610      	movs	r6, #16
 801027e:	4b41      	ldr	r3, [pc, #260]	; (8010384 <_svfprintf_r+0xf9c>)
 8010280:	6023      	str	r3, [r4, #0]
 8010282:	2d10      	cmp	r5, #16
 8010284:	dc1b      	bgt.n	80102be <_svfprintf_r+0xed6>
 8010286:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010288:	6065      	str	r5, [r4, #4]
 801028a:	441d      	add	r5, r3
 801028c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801028e:	9521      	str	r5, [sp, #132]	; 0x84
 8010290:	3301      	adds	r3, #1
 8010292:	2b07      	cmp	r3, #7
 8010294:	9320      	str	r3, [sp, #128]	; 0x80
 8010296:	f77f abdb 	ble.w	800fa50 <_svfprintf_r+0x668>
 801029a:	aa1f      	add	r2, sp, #124	; 0x7c
 801029c:	4651      	mov	r1, sl
 801029e:	4658      	mov	r0, fp
 80102a0:	f001 faee 	bl	8011880 <__ssprint_r>
 80102a4:	2800      	cmp	r0, #0
 80102a6:	f43f abd3 	beq.w	800fa50 <_svfprintf_r+0x668>
 80102aa:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80102ae:	f013 0f40 	tst.w	r3, #64	; 0x40
 80102b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102b4:	bf18      	it	ne
 80102b6:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 80102ba:	f7ff b8b9 	b.w	800f430 <_svfprintf_r+0x48>
 80102be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80102c0:	6066      	str	r6, [r4, #4]
 80102c2:	3310      	adds	r3, #16
 80102c4:	9321      	str	r3, [sp, #132]	; 0x84
 80102c6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80102c8:	3301      	adds	r3, #1
 80102ca:	2b07      	cmp	r3, #7
 80102cc:	9320      	str	r3, [sp, #128]	; 0x80
 80102ce:	dc02      	bgt.n	80102d6 <_svfprintf_r+0xeee>
 80102d0:	3408      	adds	r4, #8
 80102d2:	3d10      	subs	r5, #16
 80102d4:	e7d3      	b.n	801027e <_svfprintf_r+0xe96>
 80102d6:	aa1f      	add	r2, sp, #124	; 0x7c
 80102d8:	4651      	mov	r1, sl
 80102da:	4658      	mov	r0, fp
 80102dc:	f001 fad0 	bl	8011880 <__ssprint_r>
 80102e0:	2800      	cmp	r0, #0
 80102e2:	d1e2      	bne.n	80102aa <_svfprintf_r+0xec2>
 80102e4:	ac2c      	add	r4, sp, #176	; 0xb0
 80102e6:	e7f4      	b.n	80102d2 <_svfprintf_r+0xeea>
 80102e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d0dd      	beq.n	80102aa <_svfprintf_r+0xec2>
 80102ee:	aa1f      	add	r2, sp, #124	; 0x7c
 80102f0:	4651      	mov	r1, sl
 80102f2:	4658      	mov	r0, fp
 80102f4:	f001 fac4 	bl	8011880 <__ssprint_r>
 80102f8:	e7d7      	b.n	80102aa <_svfprintf_r+0xec2>
 80102fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80102fe:	4610      	mov	r0, r2
 8010300:	4619      	mov	r1, r3
 8010302:	f7f0 fc1f 	bl	8000b44 <__aeabi_dcmpun>
 8010306:	2800      	cmp	r0, #0
 8010308:	f43f aa44 	beq.w	800f794 <_svfprintf_r+0x3ac>
 801030c:	4b1e      	ldr	r3, [pc, #120]	; (8010388 <_svfprintf_r+0xfa0>)
 801030e:	4a1f      	ldr	r2, [pc, #124]	; (801038c <_svfprintf_r+0xfa4>)
 8010310:	f7ff ba34 	b.w	800f77c <_svfprintf_r+0x394>
 8010314:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010316:	eba3 0308 	sub.w	r3, r3, r8
 801031a:	9303      	str	r3, [sp, #12]
 801031c:	f7ff bab5 	b.w	800f88a <_svfprintf_r+0x4a2>
 8010320:	ea56 0207 	orrs.w	r2, r6, r7
 8010324:	950b      	str	r5, [sp, #44]	; 0x2c
 8010326:	f43f ac2b 	beq.w	800fb80 <_svfprintf_r+0x798>
 801032a:	2b01      	cmp	r3, #1
 801032c:	f43f ac9d 	beq.w	800fc6a <_svfprintf_r+0x882>
 8010330:	2b02      	cmp	r3, #2
 8010332:	f43f acbd 	beq.w	800fcb0 <_svfprintf_r+0x8c8>
 8010336:	ab2c      	add	r3, sp, #176	; 0xb0
 8010338:	08f1      	lsrs	r1, r6, #3
 801033a:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 801033e:	08f8      	lsrs	r0, r7, #3
 8010340:	f006 0207 	and.w	r2, r6, #7
 8010344:	4607      	mov	r7, r0
 8010346:	460e      	mov	r6, r1
 8010348:	3230      	adds	r2, #48	; 0x30
 801034a:	ea56 0107 	orrs.w	r1, r6, r7
 801034e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8010352:	f803 2c01 	strb.w	r2, [r3, #-1]
 8010356:	f47f ac86 	bne.w	800fc66 <_svfprintf_r+0x87e>
 801035a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801035c:	07c9      	lsls	r1, r1, #31
 801035e:	d506      	bpl.n	801036e <_svfprintf_r+0xf86>
 8010360:	2a30      	cmp	r2, #48	; 0x30
 8010362:	d004      	beq.n	801036e <_svfprintf_r+0xf86>
 8010364:	2230      	movs	r2, #48	; 0x30
 8010366:	f808 2c01 	strb.w	r2, [r8, #-1]
 801036a:	f1a3 0802 	sub.w	r8, r3, #2
 801036e:	464e      	mov	r6, r9
 8010370:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8010374:	eba9 0908 	sub.w	r9, r9, r8
 8010378:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801037a:	2700      	movs	r7, #0
 801037c:	f7ff bad1 	b.w	800f922 <_svfprintf_r+0x53a>
 8010380:	080147a8 	.word	0x080147a8
 8010384:	08014798 	.word	0x08014798
 8010388:	0801476c 	.word	0x0801476c
 801038c:	08014770 	.word	0x08014770

08010390 <_vsprintf_r>:
 8010390:	b510      	push	{r4, lr}
 8010392:	b09a      	sub	sp, #104	; 0x68
 8010394:	f44f 7402 	mov.w	r4, #520	; 0x208
 8010398:	9100      	str	r1, [sp, #0]
 801039a:	9104      	str	r1, [sp, #16]
 801039c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80103a0:	9102      	str	r1, [sp, #8]
 80103a2:	9105      	str	r1, [sp, #20]
 80103a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80103a8:	f8ad 100e 	strh.w	r1, [sp, #14]
 80103ac:	4669      	mov	r1, sp
 80103ae:	f8ad 400c 	strh.w	r4, [sp, #12]
 80103b2:	f7ff f819 	bl	800f3e8 <_svfprintf_r>
 80103b6:	9b00      	ldr	r3, [sp, #0]
 80103b8:	2200      	movs	r2, #0
 80103ba:	701a      	strb	r2, [r3, #0]
 80103bc:	b01a      	add	sp, #104	; 0x68
 80103be:	bd10      	pop	{r4, pc}

080103c0 <vsprintf>:
 80103c0:	4613      	mov	r3, r2
 80103c2:	460a      	mov	r2, r1
 80103c4:	4601      	mov	r1, r0
 80103c6:	4802      	ldr	r0, [pc, #8]	; (80103d0 <vsprintf+0x10>)
 80103c8:	6800      	ldr	r0, [r0, #0]
 80103ca:	f7ff bfe1 	b.w	8010390 <_vsprintf_r>
 80103ce:	bf00      	nop
 80103d0:	20000d30 	.word	0x20000d30

080103d4 <quorem>:
 80103d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103d8:	6903      	ldr	r3, [r0, #16]
 80103da:	690c      	ldr	r4, [r1, #16]
 80103dc:	429c      	cmp	r4, r3
 80103de:	4680      	mov	r8, r0
 80103e0:	f300 8082 	bgt.w	80104e8 <quorem+0x114>
 80103e4:	3c01      	subs	r4, #1
 80103e6:	f101 0714 	add.w	r7, r1, #20
 80103ea:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80103ee:	f100 0614 	add.w	r6, r0, #20
 80103f2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80103f6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80103fa:	eb06 030e 	add.w	r3, r6, lr
 80103fe:	3501      	adds	r5, #1
 8010400:	eb07 090e 	add.w	r9, r7, lr
 8010404:	9301      	str	r3, [sp, #4]
 8010406:	fbb0 f5f5 	udiv	r5, r0, r5
 801040a:	b395      	cbz	r5, 8010472 <quorem+0x9e>
 801040c:	f04f 0a00 	mov.w	sl, #0
 8010410:	4638      	mov	r0, r7
 8010412:	46b4      	mov	ip, r6
 8010414:	46d3      	mov	fp, sl
 8010416:	f850 2b04 	ldr.w	r2, [r0], #4
 801041a:	b293      	uxth	r3, r2
 801041c:	fb05 a303 	mla	r3, r5, r3, sl
 8010420:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010424:	b29b      	uxth	r3, r3
 8010426:	ebab 0303 	sub.w	r3, fp, r3
 801042a:	0c12      	lsrs	r2, r2, #16
 801042c:	f8bc b000 	ldrh.w	fp, [ip]
 8010430:	fb05 a202 	mla	r2, r5, r2, sl
 8010434:	fa13 f38b 	uxtah	r3, r3, fp
 8010438:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801043c:	fa1f fb82 	uxth.w	fp, r2
 8010440:	f8dc 2000 	ldr.w	r2, [ip]
 8010444:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8010448:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801044c:	b29b      	uxth	r3, r3
 801044e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010452:	4581      	cmp	r9, r0
 8010454:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8010458:	f84c 3b04 	str.w	r3, [ip], #4
 801045c:	d2db      	bcs.n	8010416 <quorem+0x42>
 801045e:	f856 300e 	ldr.w	r3, [r6, lr]
 8010462:	b933      	cbnz	r3, 8010472 <quorem+0x9e>
 8010464:	9b01      	ldr	r3, [sp, #4]
 8010466:	3b04      	subs	r3, #4
 8010468:	429e      	cmp	r6, r3
 801046a:	461a      	mov	r2, r3
 801046c:	d330      	bcc.n	80104d0 <quorem+0xfc>
 801046e:	f8c8 4010 	str.w	r4, [r8, #16]
 8010472:	4640      	mov	r0, r8
 8010474:	f001 f93d 	bl	80116f2 <__mcmp>
 8010478:	2800      	cmp	r0, #0
 801047a:	db25      	blt.n	80104c8 <quorem+0xf4>
 801047c:	3501      	adds	r5, #1
 801047e:	4630      	mov	r0, r6
 8010480:	f04f 0e00 	mov.w	lr, #0
 8010484:	f857 2b04 	ldr.w	r2, [r7], #4
 8010488:	f8d0 c000 	ldr.w	ip, [r0]
 801048c:	b293      	uxth	r3, r2
 801048e:	ebae 0303 	sub.w	r3, lr, r3
 8010492:	0c12      	lsrs	r2, r2, #16
 8010494:	fa13 f38c 	uxtah	r3, r3, ip
 8010498:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801049c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80104a0:	b29b      	uxth	r3, r3
 80104a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80104a6:	45b9      	cmp	r9, r7
 80104a8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80104ac:	f840 3b04 	str.w	r3, [r0], #4
 80104b0:	d2e8      	bcs.n	8010484 <quorem+0xb0>
 80104b2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80104b6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80104ba:	b92a      	cbnz	r2, 80104c8 <quorem+0xf4>
 80104bc:	3b04      	subs	r3, #4
 80104be:	429e      	cmp	r6, r3
 80104c0:	461a      	mov	r2, r3
 80104c2:	d30b      	bcc.n	80104dc <quorem+0x108>
 80104c4:	f8c8 4010 	str.w	r4, [r8, #16]
 80104c8:	4628      	mov	r0, r5
 80104ca:	b003      	add	sp, #12
 80104cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104d0:	6812      	ldr	r2, [r2, #0]
 80104d2:	3b04      	subs	r3, #4
 80104d4:	2a00      	cmp	r2, #0
 80104d6:	d1ca      	bne.n	801046e <quorem+0x9a>
 80104d8:	3c01      	subs	r4, #1
 80104da:	e7c5      	b.n	8010468 <quorem+0x94>
 80104dc:	6812      	ldr	r2, [r2, #0]
 80104de:	3b04      	subs	r3, #4
 80104e0:	2a00      	cmp	r2, #0
 80104e2:	d1ef      	bne.n	80104c4 <quorem+0xf0>
 80104e4:	3c01      	subs	r4, #1
 80104e6:	e7ea      	b.n	80104be <quorem+0xea>
 80104e8:	2000      	movs	r0, #0
 80104ea:	e7ee      	b.n	80104ca <quorem+0xf6>
 80104ec:	0000      	movs	r0, r0
	...

080104f0 <_dtoa_r>:
 80104f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104f4:	ec57 6b10 	vmov	r6, r7, d0
 80104f8:	b097      	sub	sp, #92	; 0x5c
 80104fa:	e9cd 6700 	strd	r6, r7, [sp]
 80104fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010500:	9107      	str	r1, [sp, #28]
 8010502:	4604      	mov	r4, r0
 8010504:	920a      	str	r2, [sp, #40]	; 0x28
 8010506:	930f      	str	r3, [sp, #60]	; 0x3c
 8010508:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801050a:	b93e      	cbnz	r6, 801051c <_dtoa_r+0x2c>
 801050c:	2010      	movs	r0, #16
 801050e:	f000 fedf 	bl	80112d0 <malloc>
 8010512:	6260      	str	r0, [r4, #36]	; 0x24
 8010514:	6046      	str	r6, [r0, #4]
 8010516:	6086      	str	r6, [r0, #8]
 8010518:	6006      	str	r6, [r0, #0]
 801051a:	60c6      	str	r6, [r0, #12]
 801051c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801051e:	6819      	ldr	r1, [r3, #0]
 8010520:	b151      	cbz	r1, 8010538 <_dtoa_r+0x48>
 8010522:	685a      	ldr	r2, [r3, #4]
 8010524:	604a      	str	r2, [r1, #4]
 8010526:	2301      	movs	r3, #1
 8010528:	4093      	lsls	r3, r2
 801052a:	608b      	str	r3, [r1, #8]
 801052c:	4620      	mov	r0, r4
 801052e:	f000 ff0b 	bl	8011348 <_Bfree>
 8010532:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010534:	2200      	movs	r2, #0
 8010536:	601a      	str	r2, [r3, #0]
 8010538:	9b01      	ldr	r3, [sp, #4]
 801053a:	2b00      	cmp	r3, #0
 801053c:	bfbf      	itttt	lt
 801053e:	2301      	movlt	r3, #1
 8010540:	602b      	strlt	r3, [r5, #0]
 8010542:	9b01      	ldrlt	r3, [sp, #4]
 8010544:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010548:	bfb2      	itee	lt
 801054a:	9301      	strlt	r3, [sp, #4]
 801054c:	2300      	movge	r3, #0
 801054e:	602b      	strge	r3, [r5, #0]
 8010550:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010554:	4ba8      	ldr	r3, [pc, #672]	; (80107f8 <_dtoa_r+0x308>)
 8010556:	ea33 0308 	bics.w	r3, r3, r8
 801055a:	d11b      	bne.n	8010594 <_dtoa_r+0xa4>
 801055c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801055e:	f242 730f 	movw	r3, #9999	; 0x270f
 8010562:	6013      	str	r3, [r2, #0]
 8010564:	9b00      	ldr	r3, [sp, #0]
 8010566:	b923      	cbnz	r3, 8010572 <_dtoa_r+0x82>
 8010568:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801056c:	2800      	cmp	r0, #0
 801056e:	f000 8578 	beq.w	8011062 <_dtoa_r+0xb72>
 8010572:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010574:	b953      	cbnz	r3, 801058c <_dtoa_r+0x9c>
 8010576:	4ba1      	ldr	r3, [pc, #644]	; (80107fc <_dtoa_r+0x30c>)
 8010578:	e021      	b.n	80105be <_dtoa_r+0xce>
 801057a:	4ba1      	ldr	r3, [pc, #644]	; (8010800 <_dtoa_r+0x310>)
 801057c:	9302      	str	r3, [sp, #8]
 801057e:	3308      	adds	r3, #8
 8010580:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010582:	6013      	str	r3, [r2, #0]
 8010584:	9802      	ldr	r0, [sp, #8]
 8010586:	b017      	add	sp, #92	; 0x5c
 8010588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801058c:	4b9b      	ldr	r3, [pc, #620]	; (80107fc <_dtoa_r+0x30c>)
 801058e:	9302      	str	r3, [sp, #8]
 8010590:	3303      	adds	r3, #3
 8010592:	e7f5      	b.n	8010580 <_dtoa_r+0x90>
 8010594:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010598:	2200      	movs	r2, #0
 801059a:	2300      	movs	r3, #0
 801059c:	4630      	mov	r0, r6
 801059e:	4639      	mov	r1, r7
 80105a0:	f7f0 fa9e 	bl	8000ae0 <__aeabi_dcmpeq>
 80105a4:	4681      	mov	r9, r0
 80105a6:	b160      	cbz	r0, 80105c2 <_dtoa_r+0xd2>
 80105a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80105aa:	2301      	movs	r3, #1
 80105ac:	6013      	str	r3, [r2, #0]
 80105ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	f000 8553 	beq.w	801105c <_dtoa_r+0xb6c>
 80105b6:	4b93      	ldr	r3, [pc, #588]	; (8010804 <_dtoa_r+0x314>)
 80105b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80105ba:	6013      	str	r3, [r2, #0]
 80105bc:	3b01      	subs	r3, #1
 80105be:	9302      	str	r3, [sp, #8]
 80105c0:	e7e0      	b.n	8010584 <_dtoa_r+0x94>
 80105c2:	aa14      	add	r2, sp, #80	; 0x50
 80105c4:	a915      	add	r1, sp, #84	; 0x54
 80105c6:	ec47 6b10 	vmov	d0, r6, r7
 80105ca:	4620      	mov	r0, r4
 80105cc:	f001 f909 	bl	80117e2 <__d2b>
 80105d0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80105d4:	4682      	mov	sl, r0
 80105d6:	2d00      	cmp	r5, #0
 80105d8:	d07e      	beq.n	80106d8 <_dtoa_r+0x1e8>
 80105da:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80105de:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80105e2:	4630      	mov	r0, r6
 80105e4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80105e8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80105ec:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 80105f0:	2200      	movs	r2, #0
 80105f2:	4b85      	ldr	r3, [pc, #532]	; (8010808 <_dtoa_r+0x318>)
 80105f4:	f7ef fe58 	bl	80002a8 <__aeabi_dsub>
 80105f8:	a379      	add	r3, pc, #484	; (adr r3, 80107e0 <_dtoa_r+0x2f0>)
 80105fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105fe:	f7f0 f807 	bl	8000610 <__aeabi_dmul>
 8010602:	a379      	add	r3, pc, #484	; (adr r3, 80107e8 <_dtoa_r+0x2f8>)
 8010604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010608:	f7ef fe50 	bl	80002ac <__adddf3>
 801060c:	4606      	mov	r6, r0
 801060e:	4628      	mov	r0, r5
 8010610:	460f      	mov	r7, r1
 8010612:	f7ef ff97 	bl	8000544 <__aeabi_i2d>
 8010616:	a376      	add	r3, pc, #472	; (adr r3, 80107f0 <_dtoa_r+0x300>)
 8010618:	e9d3 2300 	ldrd	r2, r3, [r3]
 801061c:	f7ef fff8 	bl	8000610 <__aeabi_dmul>
 8010620:	4602      	mov	r2, r0
 8010622:	460b      	mov	r3, r1
 8010624:	4630      	mov	r0, r6
 8010626:	4639      	mov	r1, r7
 8010628:	f7ef fe40 	bl	80002ac <__adddf3>
 801062c:	4606      	mov	r6, r0
 801062e:	460f      	mov	r7, r1
 8010630:	f7f0 fa9e 	bl	8000b70 <__aeabi_d2iz>
 8010634:	2200      	movs	r2, #0
 8010636:	4683      	mov	fp, r0
 8010638:	2300      	movs	r3, #0
 801063a:	4630      	mov	r0, r6
 801063c:	4639      	mov	r1, r7
 801063e:	f7f0 fa59 	bl	8000af4 <__aeabi_dcmplt>
 8010642:	b158      	cbz	r0, 801065c <_dtoa_r+0x16c>
 8010644:	4658      	mov	r0, fp
 8010646:	f7ef ff7d 	bl	8000544 <__aeabi_i2d>
 801064a:	4602      	mov	r2, r0
 801064c:	460b      	mov	r3, r1
 801064e:	4630      	mov	r0, r6
 8010650:	4639      	mov	r1, r7
 8010652:	f7f0 fa45 	bl	8000ae0 <__aeabi_dcmpeq>
 8010656:	b908      	cbnz	r0, 801065c <_dtoa_r+0x16c>
 8010658:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801065c:	f1bb 0f16 	cmp.w	fp, #22
 8010660:	d859      	bhi.n	8010716 <_dtoa_r+0x226>
 8010662:	496a      	ldr	r1, [pc, #424]	; (801080c <_dtoa_r+0x31c>)
 8010664:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8010668:	e9dd 2300 	ldrd	r2, r3, [sp]
 801066c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010670:	f7f0 fa5e 	bl	8000b30 <__aeabi_dcmpgt>
 8010674:	2800      	cmp	r0, #0
 8010676:	d050      	beq.n	801071a <_dtoa_r+0x22a>
 8010678:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801067c:	2300      	movs	r3, #0
 801067e:	930e      	str	r3, [sp, #56]	; 0x38
 8010680:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010682:	1b5d      	subs	r5, r3, r5
 8010684:	1e6b      	subs	r3, r5, #1
 8010686:	9306      	str	r3, [sp, #24]
 8010688:	bf45      	ittet	mi
 801068a:	f1c5 0301 	rsbmi	r3, r5, #1
 801068e:	9305      	strmi	r3, [sp, #20]
 8010690:	2300      	movpl	r3, #0
 8010692:	2300      	movmi	r3, #0
 8010694:	bf4c      	ite	mi
 8010696:	9306      	strmi	r3, [sp, #24]
 8010698:	9305      	strpl	r3, [sp, #20]
 801069a:	f1bb 0f00 	cmp.w	fp, #0
 801069e:	db3e      	blt.n	801071e <_dtoa_r+0x22e>
 80106a0:	9b06      	ldr	r3, [sp, #24]
 80106a2:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80106a6:	445b      	add	r3, fp
 80106a8:	9306      	str	r3, [sp, #24]
 80106aa:	2300      	movs	r3, #0
 80106ac:	9308      	str	r3, [sp, #32]
 80106ae:	9b07      	ldr	r3, [sp, #28]
 80106b0:	2b09      	cmp	r3, #9
 80106b2:	f200 80af 	bhi.w	8010814 <_dtoa_r+0x324>
 80106b6:	2b05      	cmp	r3, #5
 80106b8:	bfc4      	itt	gt
 80106ba:	3b04      	subgt	r3, #4
 80106bc:	9307      	strgt	r3, [sp, #28]
 80106be:	9b07      	ldr	r3, [sp, #28]
 80106c0:	f1a3 0302 	sub.w	r3, r3, #2
 80106c4:	bfcc      	ite	gt
 80106c6:	2600      	movgt	r6, #0
 80106c8:	2601      	movle	r6, #1
 80106ca:	2b03      	cmp	r3, #3
 80106cc:	f200 80ae 	bhi.w	801082c <_dtoa_r+0x33c>
 80106d0:	e8df f003 	tbb	[pc, r3]
 80106d4:	772f8482 	.word	0x772f8482
 80106d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80106da:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80106dc:	441d      	add	r5, r3
 80106de:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80106e2:	2b20      	cmp	r3, #32
 80106e4:	dd11      	ble.n	801070a <_dtoa_r+0x21a>
 80106e6:	9a00      	ldr	r2, [sp, #0]
 80106e8:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80106ec:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80106f0:	fa22 f000 	lsr.w	r0, r2, r0
 80106f4:	fa08 f303 	lsl.w	r3, r8, r3
 80106f8:	4318      	orrs	r0, r3
 80106fa:	f7ef ff13 	bl	8000524 <__aeabi_ui2d>
 80106fe:	2301      	movs	r3, #1
 8010700:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8010704:	3d01      	subs	r5, #1
 8010706:	9312      	str	r3, [sp, #72]	; 0x48
 8010708:	e772      	b.n	80105f0 <_dtoa_r+0x100>
 801070a:	f1c3 0020 	rsb	r0, r3, #32
 801070e:	9b00      	ldr	r3, [sp, #0]
 8010710:	fa03 f000 	lsl.w	r0, r3, r0
 8010714:	e7f1      	b.n	80106fa <_dtoa_r+0x20a>
 8010716:	2301      	movs	r3, #1
 8010718:	e7b1      	b.n	801067e <_dtoa_r+0x18e>
 801071a:	900e      	str	r0, [sp, #56]	; 0x38
 801071c:	e7b0      	b.n	8010680 <_dtoa_r+0x190>
 801071e:	9b05      	ldr	r3, [sp, #20]
 8010720:	eba3 030b 	sub.w	r3, r3, fp
 8010724:	9305      	str	r3, [sp, #20]
 8010726:	f1cb 0300 	rsb	r3, fp, #0
 801072a:	9308      	str	r3, [sp, #32]
 801072c:	2300      	movs	r3, #0
 801072e:	930b      	str	r3, [sp, #44]	; 0x2c
 8010730:	e7bd      	b.n	80106ae <_dtoa_r+0x1be>
 8010732:	2301      	movs	r3, #1
 8010734:	9309      	str	r3, [sp, #36]	; 0x24
 8010736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010738:	2b00      	cmp	r3, #0
 801073a:	dd7a      	ble.n	8010832 <_dtoa_r+0x342>
 801073c:	9304      	str	r3, [sp, #16]
 801073e:	9303      	str	r3, [sp, #12]
 8010740:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8010742:	2200      	movs	r2, #0
 8010744:	606a      	str	r2, [r5, #4]
 8010746:	2104      	movs	r1, #4
 8010748:	f101 0214 	add.w	r2, r1, #20
 801074c:	429a      	cmp	r2, r3
 801074e:	d975      	bls.n	801083c <_dtoa_r+0x34c>
 8010750:	6869      	ldr	r1, [r5, #4]
 8010752:	4620      	mov	r0, r4
 8010754:	f000 fdc4 	bl	80112e0 <_Balloc>
 8010758:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801075a:	6028      	str	r0, [r5, #0]
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	9302      	str	r3, [sp, #8]
 8010760:	9b03      	ldr	r3, [sp, #12]
 8010762:	2b0e      	cmp	r3, #14
 8010764:	f200 80e5 	bhi.w	8010932 <_dtoa_r+0x442>
 8010768:	2e00      	cmp	r6, #0
 801076a:	f000 80e2 	beq.w	8010932 <_dtoa_r+0x442>
 801076e:	ed9d 7b00 	vldr	d7, [sp]
 8010772:	f1bb 0f00 	cmp.w	fp, #0
 8010776:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801077a:	dd74      	ble.n	8010866 <_dtoa_r+0x376>
 801077c:	4a23      	ldr	r2, [pc, #140]	; (801080c <_dtoa_r+0x31c>)
 801077e:	f00b 030f 	and.w	r3, fp, #15
 8010782:	ea4f 162b 	mov.w	r6, fp, asr #4
 8010786:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801078a:	06f0      	lsls	r0, r6, #27
 801078c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010790:	d559      	bpl.n	8010846 <_dtoa_r+0x356>
 8010792:	4b1f      	ldr	r3, [pc, #124]	; (8010810 <_dtoa_r+0x320>)
 8010794:	ec51 0b17 	vmov	r0, r1, d7
 8010798:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801079c:	f7f0 f862 	bl	8000864 <__aeabi_ddiv>
 80107a0:	e9cd 0100 	strd	r0, r1, [sp]
 80107a4:	f006 060f 	and.w	r6, r6, #15
 80107a8:	2503      	movs	r5, #3
 80107aa:	4f19      	ldr	r7, [pc, #100]	; (8010810 <_dtoa_r+0x320>)
 80107ac:	2e00      	cmp	r6, #0
 80107ae:	d14c      	bne.n	801084a <_dtoa_r+0x35a>
 80107b0:	4642      	mov	r2, r8
 80107b2:	464b      	mov	r3, r9
 80107b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80107b8:	f7f0 f854 	bl	8000864 <__aeabi_ddiv>
 80107bc:	e9cd 0100 	strd	r0, r1, [sp]
 80107c0:	e06a      	b.n	8010898 <_dtoa_r+0x3a8>
 80107c2:	2301      	movs	r3, #1
 80107c4:	9309      	str	r3, [sp, #36]	; 0x24
 80107c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80107c8:	445b      	add	r3, fp
 80107ca:	9304      	str	r3, [sp, #16]
 80107cc:	3301      	adds	r3, #1
 80107ce:	2b01      	cmp	r3, #1
 80107d0:	9303      	str	r3, [sp, #12]
 80107d2:	bfb8      	it	lt
 80107d4:	2301      	movlt	r3, #1
 80107d6:	e7b3      	b.n	8010740 <_dtoa_r+0x250>
 80107d8:	2300      	movs	r3, #0
 80107da:	e7ab      	b.n	8010734 <_dtoa_r+0x244>
 80107dc:	2300      	movs	r3, #0
 80107de:	e7f1      	b.n	80107c4 <_dtoa_r+0x2d4>
 80107e0:	636f4361 	.word	0x636f4361
 80107e4:	3fd287a7 	.word	0x3fd287a7
 80107e8:	8b60c8b3 	.word	0x8b60c8b3
 80107ec:	3fc68a28 	.word	0x3fc68a28
 80107f0:	509f79fb 	.word	0x509f79fb
 80107f4:	3fd34413 	.word	0x3fd34413
 80107f8:	7ff00000 	.word	0x7ff00000
 80107fc:	080147c1 	.word	0x080147c1
 8010800:	080147b8 	.word	0x080147b8
 8010804:	08014797 	.word	0x08014797
 8010808:	3ff80000 	.word	0x3ff80000
 801080c:	080147f0 	.word	0x080147f0
 8010810:	080147c8 	.word	0x080147c8
 8010814:	2601      	movs	r6, #1
 8010816:	2300      	movs	r3, #0
 8010818:	9307      	str	r3, [sp, #28]
 801081a:	9609      	str	r6, [sp, #36]	; 0x24
 801081c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010820:	9304      	str	r3, [sp, #16]
 8010822:	9303      	str	r3, [sp, #12]
 8010824:	2200      	movs	r2, #0
 8010826:	2312      	movs	r3, #18
 8010828:	920a      	str	r2, [sp, #40]	; 0x28
 801082a:	e789      	b.n	8010740 <_dtoa_r+0x250>
 801082c:	2301      	movs	r3, #1
 801082e:	9309      	str	r3, [sp, #36]	; 0x24
 8010830:	e7f4      	b.n	801081c <_dtoa_r+0x32c>
 8010832:	2301      	movs	r3, #1
 8010834:	9304      	str	r3, [sp, #16]
 8010836:	9303      	str	r3, [sp, #12]
 8010838:	461a      	mov	r2, r3
 801083a:	e7f5      	b.n	8010828 <_dtoa_r+0x338>
 801083c:	686a      	ldr	r2, [r5, #4]
 801083e:	3201      	adds	r2, #1
 8010840:	606a      	str	r2, [r5, #4]
 8010842:	0049      	lsls	r1, r1, #1
 8010844:	e780      	b.n	8010748 <_dtoa_r+0x258>
 8010846:	2502      	movs	r5, #2
 8010848:	e7af      	b.n	80107aa <_dtoa_r+0x2ba>
 801084a:	07f1      	lsls	r1, r6, #31
 801084c:	d508      	bpl.n	8010860 <_dtoa_r+0x370>
 801084e:	4640      	mov	r0, r8
 8010850:	4649      	mov	r1, r9
 8010852:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010856:	f7ef fedb 	bl	8000610 <__aeabi_dmul>
 801085a:	3501      	adds	r5, #1
 801085c:	4680      	mov	r8, r0
 801085e:	4689      	mov	r9, r1
 8010860:	1076      	asrs	r6, r6, #1
 8010862:	3708      	adds	r7, #8
 8010864:	e7a2      	b.n	80107ac <_dtoa_r+0x2bc>
 8010866:	f000 809d 	beq.w	80109a4 <_dtoa_r+0x4b4>
 801086a:	f1cb 0600 	rsb	r6, fp, #0
 801086e:	4b9f      	ldr	r3, [pc, #636]	; (8010aec <_dtoa_r+0x5fc>)
 8010870:	4f9f      	ldr	r7, [pc, #636]	; (8010af0 <_dtoa_r+0x600>)
 8010872:	f006 020f 	and.w	r2, r6, #15
 8010876:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801087a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801087e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010882:	f7ef fec5 	bl	8000610 <__aeabi_dmul>
 8010886:	e9cd 0100 	strd	r0, r1, [sp]
 801088a:	1136      	asrs	r6, r6, #4
 801088c:	2300      	movs	r3, #0
 801088e:	2502      	movs	r5, #2
 8010890:	2e00      	cmp	r6, #0
 8010892:	d17c      	bne.n	801098e <_dtoa_r+0x49e>
 8010894:	2b00      	cmp	r3, #0
 8010896:	d191      	bne.n	80107bc <_dtoa_r+0x2cc>
 8010898:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801089a:	2b00      	cmp	r3, #0
 801089c:	f000 8084 	beq.w	80109a8 <_dtoa_r+0x4b8>
 80108a0:	e9dd 8900 	ldrd	r8, r9, [sp]
 80108a4:	2200      	movs	r2, #0
 80108a6:	4b93      	ldr	r3, [pc, #588]	; (8010af4 <_dtoa_r+0x604>)
 80108a8:	4640      	mov	r0, r8
 80108aa:	4649      	mov	r1, r9
 80108ac:	f7f0 f922 	bl	8000af4 <__aeabi_dcmplt>
 80108b0:	2800      	cmp	r0, #0
 80108b2:	d079      	beq.n	80109a8 <_dtoa_r+0x4b8>
 80108b4:	9b03      	ldr	r3, [sp, #12]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d076      	beq.n	80109a8 <_dtoa_r+0x4b8>
 80108ba:	9b04      	ldr	r3, [sp, #16]
 80108bc:	2b00      	cmp	r3, #0
 80108be:	dd34      	ble.n	801092a <_dtoa_r+0x43a>
 80108c0:	2200      	movs	r2, #0
 80108c2:	4b8d      	ldr	r3, [pc, #564]	; (8010af8 <_dtoa_r+0x608>)
 80108c4:	4640      	mov	r0, r8
 80108c6:	4649      	mov	r1, r9
 80108c8:	f7ef fea2 	bl	8000610 <__aeabi_dmul>
 80108cc:	e9cd 0100 	strd	r0, r1, [sp]
 80108d0:	9e04      	ldr	r6, [sp, #16]
 80108d2:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 80108d6:	3501      	adds	r5, #1
 80108d8:	4628      	mov	r0, r5
 80108da:	f7ef fe33 	bl	8000544 <__aeabi_i2d>
 80108de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80108e2:	f7ef fe95 	bl	8000610 <__aeabi_dmul>
 80108e6:	2200      	movs	r2, #0
 80108e8:	4b84      	ldr	r3, [pc, #528]	; (8010afc <_dtoa_r+0x60c>)
 80108ea:	f7ef fcdf 	bl	80002ac <__adddf3>
 80108ee:	4680      	mov	r8, r0
 80108f0:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 80108f4:	2e00      	cmp	r6, #0
 80108f6:	d15a      	bne.n	80109ae <_dtoa_r+0x4be>
 80108f8:	2200      	movs	r2, #0
 80108fa:	4b81      	ldr	r3, [pc, #516]	; (8010b00 <_dtoa_r+0x610>)
 80108fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010900:	f7ef fcd2 	bl	80002a8 <__aeabi_dsub>
 8010904:	4642      	mov	r2, r8
 8010906:	464b      	mov	r3, r9
 8010908:	e9cd 0100 	strd	r0, r1, [sp]
 801090c:	f7f0 f910 	bl	8000b30 <__aeabi_dcmpgt>
 8010910:	2800      	cmp	r0, #0
 8010912:	f040 829b 	bne.w	8010e4c <_dtoa_r+0x95c>
 8010916:	4642      	mov	r2, r8
 8010918:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801091c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010920:	f7f0 f8e8 	bl	8000af4 <__aeabi_dcmplt>
 8010924:	2800      	cmp	r0, #0
 8010926:	f040 828f 	bne.w	8010e48 <_dtoa_r+0x958>
 801092a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801092e:	e9cd 2300 	strd	r2, r3, [sp]
 8010932:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010934:	2b00      	cmp	r3, #0
 8010936:	f2c0 8150 	blt.w	8010bda <_dtoa_r+0x6ea>
 801093a:	f1bb 0f0e 	cmp.w	fp, #14
 801093e:	f300 814c 	bgt.w	8010bda <_dtoa_r+0x6ea>
 8010942:	4b6a      	ldr	r3, [pc, #424]	; (8010aec <_dtoa_r+0x5fc>)
 8010944:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010948:	e9d3 8900 	ldrd	r8, r9, [r3]
 801094c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801094e:	2b00      	cmp	r3, #0
 8010950:	f280 80da 	bge.w	8010b08 <_dtoa_r+0x618>
 8010954:	9b03      	ldr	r3, [sp, #12]
 8010956:	2b00      	cmp	r3, #0
 8010958:	f300 80d6 	bgt.w	8010b08 <_dtoa_r+0x618>
 801095c:	f040 8273 	bne.w	8010e46 <_dtoa_r+0x956>
 8010960:	2200      	movs	r2, #0
 8010962:	4b67      	ldr	r3, [pc, #412]	; (8010b00 <_dtoa_r+0x610>)
 8010964:	4640      	mov	r0, r8
 8010966:	4649      	mov	r1, r9
 8010968:	f7ef fe52 	bl	8000610 <__aeabi_dmul>
 801096c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010970:	f7f0 f8d4 	bl	8000b1c <__aeabi_dcmpge>
 8010974:	9e03      	ldr	r6, [sp, #12]
 8010976:	4637      	mov	r7, r6
 8010978:	2800      	cmp	r0, #0
 801097a:	f040 824a 	bne.w	8010e12 <_dtoa_r+0x922>
 801097e:	9b02      	ldr	r3, [sp, #8]
 8010980:	9a02      	ldr	r2, [sp, #8]
 8010982:	1c5d      	adds	r5, r3, #1
 8010984:	2331      	movs	r3, #49	; 0x31
 8010986:	7013      	strb	r3, [r2, #0]
 8010988:	f10b 0b01 	add.w	fp, fp, #1
 801098c:	e245      	b.n	8010e1a <_dtoa_r+0x92a>
 801098e:	07f2      	lsls	r2, r6, #31
 8010990:	d505      	bpl.n	801099e <_dtoa_r+0x4ae>
 8010992:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010996:	f7ef fe3b 	bl	8000610 <__aeabi_dmul>
 801099a:	3501      	adds	r5, #1
 801099c:	2301      	movs	r3, #1
 801099e:	1076      	asrs	r6, r6, #1
 80109a0:	3708      	adds	r7, #8
 80109a2:	e775      	b.n	8010890 <_dtoa_r+0x3a0>
 80109a4:	2502      	movs	r5, #2
 80109a6:	e777      	b.n	8010898 <_dtoa_r+0x3a8>
 80109a8:	465f      	mov	r7, fp
 80109aa:	9e03      	ldr	r6, [sp, #12]
 80109ac:	e794      	b.n	80108d8 <_dtoa_r+0x3e8>
 80109ae:	9a02      	ldr	r2, [sp, #8]
 80109b0:	4b4e      	ldr	r3, [pc, #312]	; (8010aec <_dtoa_r+0x5fc>)
 80109b2:	4432      	add	r2, r6
 80109b4:	9213      	str	r2, [sp, #76]	; 0x4c
 80109b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80109b8:	1e71      	subs	r1, r6, #1
 80109ba:	2a00      	cmp	r2, #0
 80109bc:	d048      	beq.n	8010a50 <_dtoa_r+0x560>
 80109be:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80109c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109c6:	2000      	movs	r0, #0
 80109c8:	494e      	ldr	r1, [pc, #312]	; (8010b04 <_dtoa_r+0x614>)
 80109ca:	f7ef ff4b 	bl	8000864 <__aeabi_ddiv>
 80109ce:	4642      	mov	r2, r8
 80109d0:	464b      	mov	r3, r9
 80109d2:	f7ef fc69 	bl	80002a8 <__aeabi_dsub>
 80109d6:	9d02      	ldr	r5, [sp, #8]
 80109d8:	4680      	mov	r8, r0
 80109da:	4689      	mov	r9, r1
 80109dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80109e0:	f7f0 f8c6 	bl	8000b70 <__aeabi_d2iz>
 80109e4:	4606      	mov	r6, r0
 80109e6:	f7ef fdad 	bl	8000544 <__aeabi_i2d>
 80109ea:	4602      	mov	r2, r0
 80109ec:	460b      	mov	r3, r1
 80109ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80109f2:	f7ef fc59 	bl	80002a8 <__aeabi_dsub>
 80109f6:	3630      	adds	r6, #48	; 0x30
 80109f8:	f805 6b01 	strb.w	r6, [r5], #1
 80109fc:	4642      	mov	r2, r8
 80109fe:	464b      	mov	r3, r9
 8010a00:	e9cd 0100 	strd	r0, r1, [sp]
 8010a04:	f7f0 f876 	bl	8000af4 <__aeabi_dcmplt>
 8010a08:	2800      	cmp	r0, #0
 8010a0a:	d165      	bne.n	8010ad8 <_dtoa_r+0x5e8>
 8010a0c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010a10:	2000      	movs	r0, #0
 8010a12:	4938      	ldr	r1, [pc, #224]	; (8010af4 <_dtoa_r+0x604>)
 8010a14:	f7ef fc48 	bl	80002a8 <__aeabi_dsub>
 8010a18:	4642      	mov	r2, r8
 8010a1a:	464b      	mov	r3, r9
 8010a1c:	f7f0 f86a 	bl	8000af4 <__aeabi_dcmplt>
 8010a20:	2800      	cmp	r0, #0
 8010a22:	f040 80ba 	bne.w	8010b9a <_dtoa_r+0x6aa>
 8010a26:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010a28:	429d      	cmp	r5, r3
 8010a2a:	f43f af7e 	beq.w	801092a <_dtoa_r+0x43a>
 8010a2e:	2200      	movs	r2, #0
 8010a30:	4b31      	ldr	r3, [pc, #196]	; (8010af8 <_dtoa_r+0x608>)
 8010a32:	4640      	mov	r0, r8
 8010a34:	4649      	mov	r1, r9
 8010a36:	f7ef fdeb 	bl	8000610 <__aeabi_dmul>
 8010a3a:	2200      	movs	r2, #0
 8010a3c:	4680      	mov	r8, r0
 8010a3e:	4689      	mov	r9, r1
 8010a40:	4b2d      	ldr	r3, [pc, #180]	; (8010af8 <_dtoa_r+0x608>)
 8010a42:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010a46:	f7ef fde3 	bl	8000610 <__aeabi_dmul>
 8010a4a:	e9cd 0100 	strd	r0, r1, [sp]
 8010a4e:	e7c5      	b.n	80109dc <_dtoa_r+0x4ec>
 8010a50:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8010a54:	4642      	mov	r2, r8
 8010a56:	464b      	mov	r3, r9
 8010a58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010a5c:	f7ef fdd8 	bl	8000610 <__aeabi_dmul>
 8010a60:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8010a64:	9d02      	ldr	r5, [sp, #8]
 8010a66:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010a6a:	f7f0 f881 	bl	8000b70 <__aeabi_d2iz>
 8010a6e:	4606      	mov	r6, r0
 8010a70:	f7ef fd68 	bl	8000544 <__aeabi_i2d>
 8010a74:	3630      	adds	r6, #48	; 0x30
 8010a76:	4602      	mov	r2, r0
 8010a78:	460b      	mov	r3, r1
 8010a7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010a7e:	f7ef fc13 	bl	80002a8 <__aeabi_dsub>
 8010a82:	f805 6b01 	strb.w	r6, [r5], #1
 8010a86:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010a88:	42ab      	cmp	r3, r5
 8010a8a:	4680      	mov	r8, r0
 8010a8c:	4689      	mov	r9, r1
 8010a8e:	f04f 0200 	mov.w	r2, #0
 8010a92:	d125      	bne.n	8010ae0 <_dtoa_r+0x5f0>
 8010a94:	4b1b      	ldr	r3, [pc, #108]	; (8010b04 <_dtoa_r+0x614>)
 8010a96:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010a9a:	f7ef fc07 	bl	80002ac <__adddf3>
 8010a9e:	4602      	mov	r2, r0
 8010aa0:	460b      	mov	r3, r1
 8010aa2:	4640      	mov	r0, r8
 8010aa4:	4649      	mov	r1, r9
 8010aa6:	f7f0 f843 	bl	8000b30 <__aeabi_dcmpgt>
 8010aaa:	2800      	cmp	r0, #0
 8010aac:	d175      	bne.n	8010b9a <_dtoa_r+0x6aa>
 8010aae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010ab2:	2000      	movs	r0, #0
 8010ab4:	4913      	ldr	r1, [pc, #76]	; (8010b04 <_dtoa_r+0x614>)
 8010ab6:	f7ef fbf7 	bl	80002a8 <__aeabi_dsub>
 8010aba:	4602      	mov	r2, r0
 8010abc:	460b      	mov	r3, r1
 8010abe:	4640      	mov	r0, r8
 8010ac0:	4649      	mov	r1, r9
 8010ac2:	f7f0 f817 	bl	8000af4 <__aeabi_dcmplt>
 8010ac6:	2800      	cmp	r0, #0
 8010ac8:	f43f af2f 	beq.w	801092a <_dtoa_r+0x43a>
 8010acc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010ad0:	2b30      	cmp	r3, #48	; 0x30
 8010ad2:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8010ad6:	d001      	beq.n	8010adc <_dtoa_r+0x5ec>
 8010ad8:	46bb      	mov	fp, r7
 8010ada:	e04d      	b.n	8010b78 <_dtoa_r+0x688>
 8010adc:	4615      	mov	r5, r2
 8010ade:	e7f5      	b.n	8010acc <_dtoa_r+0x5dc>
 8010ae0:	4b05      	ldr	r3, [pc, #20]	; (8010af8 <_dtoa_r+0x608>)
 8010ae2:	f7ef fd95 	bl	8000610 <__aeabi_dmul>
 8010ae6:	e9cd 0100 	strd	r0, r1, [sp]
 8010aea:	e7bc      	b.n	8010a66 <_dtoa_r+0x576>
 8010aec:	080147f0 	.word	0x080147f0
 8010af0:	080147c8 	.word	0x080147c8
 8010af4:	3ff00000 	.word	0x3ff00000
 8010af8:	40240000 	.word	0x40240000
 8010afc:	401c0000 	.word	0x401c0000
 8010b00:	40140000 	.word	0x40140000
 8010b04:	3fe00000 	.word	0x3fe00000
 8010b08:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010b0c:	9d02      	ldr	r5, [sp, #8]
 8010b0e:	4642      	mov	r2, r8
 8010b10:	464b      	mov	r3, r9
 8010b12:	4630      	mov	r0, r6
 8010b14:	4639      	mov	r1, r7
 8010b16:	f7ef fea5 	bl	8000864 <__aeabi_ddiv>
 8010b1a:	f7f0 f829 	bl	8000b70 <__aeabi_d2iz>
 8010b1e:	9000      	str	r0, [sp, #0]
 8010b20:	f7ef fd10 	bl	8000544 <__aeabi_i2d>
 8010b24:	4642      	mov	r2, r8
 8010b26:	464b      	mov	r3, r9
 8010b28:	f7ef fd72 	bl	8000610 <__aeabi_dmul>
 8010b2c:	4602      	mov	r2, r0
 8010b2e:	460b      	mov	r3, r1
 8010b30:	4630      	mov	r0, r6
 8010b32:	4639      	mov	r1, r7
 8010b34:	f7ef fbb8 	bl	80002a8 <__aeabi_dsub>
 8010b38:	9e00      	ldr	r6, [sp, #0]
 8010b3a:	9f03      	ldr	r7, [sp, #12]
 8010b3c:	3630      	adds	r6, #48	; 0x30
 8010b3e:	f805 6b01 	strb.w	r6, [r5], #1
 8010b42:	9e02      	ldr	r6, [sp, #8]
 8010b44:	1bae      	subs	r6, r5, r6
 8010b46:	42b7      	cmp	r7, r6
 8010b48:	4602      	mov	r2, r0
 8010b4a:	460b      	mov	r3, r1
 8010b4c:	d138      	bne.n	8010bc0 <_dtoa_r+0x6d0>
 8010b4e:	f7ef fbad 	bl	80002ac <__adddf3>
 8010b52:	4606      	mov	r6, r0
 8010b54:	460f      	mov	r7, r1
 8010b56:	4602      	mov	r2, r0
 8010b58:	460b      	mov	r3, r1
 8010b5a:	4640      	mov	r0, r8
 8010b5c:	4649      	mov	r1, r9
 8010b5e:	f7ef ffc9 	bl	8000af4 <__aeabi_dcmplt>
 8010b62:	b9c8      	cbnz	r0, 8010b98 <_dtoa_r+0x6a8>
 8010b64:	4632      	mov	r2, r6
 8010b66:	463b      	mov	r3, r7
 8010b68:	4640      	mov	r0, r8
 8010b6a:	4649      	mov	r1, r9
 8010b6c:	f7ef ffb8 	bl	8000ae0 <__aeabi_dcmpeq>
 8010b70:	b110      	cbz	r0, 8010b78 <_dtoa_r+0x688>
 8010b72:	9b00      	ldr	r3, [sp, #0]
 8010b74:	07db      	lsls	r3, r3, #31
 8010b76:	d40f      	bmi.n	8010b98 <_dtoa_r+0x6a8>
 8010b78:	4651      	mov	r1, sl
 8010b7a:	4620      	mov	r0, r4
 8010b7c:	f000 fbe4 	bl	8011348 <_Bfree>
 8010b80:	2300      	movs	r3, #0
 8010b82:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010b84:	702b      	strb	r3, [r5, #0]
 8010b86:	f10b 0301 	add.w	r3, fp, #1
 8010b8a:	6013      	str	r3, [r2, #0]
 8010b8c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	f43f acf8 	beq.w	8010584 <_dtoa_r+0x94>
 8010b94:	601d      	str	r5, [r3, #0]
 8010b96:	e4f5      	b.n	8010584 <_dtoa_r+0x94>
 8010b98:	465f      	mov	r7, fp
 8010b9a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010b9e:	2a39      	cmp	r2, #57	; 0x39
 8010ba0:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8010ba4:	d106      	bne.n	8010bb4 <_dtoa_r+0x6c4>
 8010ba6:	9a02      	ldr	r2, [sp, #8]
 8010ba8:	429a      	cmp	r2, r3
 8010baa:	d107      	bne.n	8010bbc <_dtoa_r+0x6cc>
 8010bac:	2330      	movs	r3, #48	; 0x30
 8010bae:	7013      	strb	r3, [r2, #0]
 8010bb0:	3701      	adds	r7, #1
 8010bb2:	4613      	mov	r3, r2
 8010bb4:	781a      	ldrb	r2, [r3, #0]
 8010bb6:	3201      	adds	r2, #1
 8010bb8:	701a      	strb	r2, [r3, #0]
 8010bba:	e78d      	b.n	8010ad8 <_dtoa_r+0x5e8>
 8010bbc:	461d      	mov	r5, r3
 8010bbe:	e7ec      	b.n	8010b9a <_dtoa_r+0x6aa>
 8010bc0:	2200      	movs	r2, #0
 8010bc2:	4ba4      	ldr	r3, [pc, #656]	; (8010e54 <_dtoa_r+0x964>)
 8010bc4:	f7ef fd24 	bl	8000610 <__aeabi_dmul>
 8010bc8:	2200      	movs	r2, #0
 8010bca:	2300      	movs	r3, #0
 8010bcc:	4606      	mov	r6, r0
 8010bce:	460f      	mov	r7, r1
 8010bd0:	f7ef ff86 	bl	8000ae0 <__aeabi_dcmpeq>
 8010bd4:	2800      	cmp	r0, #0
 8010bd6:	d09a      	beq.n	8010b0e <_dtoa_r+0x61e>
 8010bd8:	e7ce      	b.n	8010b78 <_dtoa_r+0x688>
 8010bda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010bdc:	2a00      	cmp	r2, #0
 8010bde:	f000 80cd 	beq.w	8010d7c <_dtoa_r+0x88c>
 8010be2:	9a07      	ldr	r2, [sp, #28]
 8010be4:	2a01      	cmp	r2, #1
 8010be6:	f300 80af 	bgt.w	8010d48 <_dtoa_r+0x858>
 8010bea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010bec:	2a00      	cmp	r2, #0
 8010bee:	f000 80a7 	beq.w	8010d40 <_dtoa_r+0x850>
 8010bf2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010bf6:	9e08      	ldr	r6, [sp, #32]
 8010bf8:	9d05      	ldr	r5, [sp, #20]
 8010bfa:	9a05      	ldr	r2, [sp, #20]
 8010bfc:	441a      	add	r2, r3
 8010bfe:	9205      	str	r2, [sp, #20]
 8010c00:	9a06      	ldr	r2, [sp, #24]
 8010c02:	2101      	movs	r1, #1
 8010c04:	441a      	add	r2, r3
 8010c06:	4620      	mov	r0, r4
 8010c08:	9206      	str	r2, [sp, #24]
 8010c0a:	f000 fc3d 	bl	8011488 <__i2b>
 8010c0e:	4607      	mov	r7, r0
 8010c10:	2d00      	cmp	r5, #0
 8010c12:	dd0c      	ble.n	8010c2e <_dtoa_r+0x73e>
 8010c14:	9b06      	ldr	r3, [sp, #24]
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	dd09      	ble.n	8010c2e <_dtoa_r+0x73e>
 8010c1a:	42ab      	cmp	r3, r5
 8010c1c:	9a05      	ldr	r2, [sp, #20]
 8010c1e:	bfa8      	it	ge
 8010c20:	462b      	movge	r3, r5
 8010c22:	1ad2      	subs	r2, r2, r3
 8010c24:	9205      	str	r2, [sp, #20]
 8010c26:	9a06      	ldr	r2, [sp, #24]
 8010c28:	1aed      	subs	r5, r5, r3
 8010c2a:	1ad3      	subs	r3, r2, r3
 8010c2c:	9306      	str	r3, [sp, #24]
 8010c2e:	9b08      	ldr	r3, [sp, #32]
 8010c30:	b1f3      	cbz	r3, 8010c70 <_dtoa_r+0x780>
 8010c32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	f000 80a5 	beq.w	8010d84 <_dtoa_r+0x894>
 8010c3a:	2e00      	cmp	r6, #0
 8010c3c:	dd10      	ble.n	8010c60 <_dtoa_r+0x770>
 8010c3e:	4639      	mov	r1, r7
 8010c40:	4632      	mov	r2, r6
 8010c42:	4620      	mov	r0, r4
 8010c44:	f000 fcb6 	bl	80115b4 <__pow5mult>
 8010c48:	4652      	mov	r2, sl
 8010c4a:	4601      	mov	r1, r0
 8010c4c:	4607      	mov	r7, r0
 8010c4e:	4620      	mov	r0, r4
 8010c50:	f000 fc23 	bl	801149a <__multiply>
 8010c54:	4651      	mov	r1, sl
 8010c56:	4680      	mov	r8, r0
 8010c58:	4620      	mov	r0, r4
 8010c5a:	f000 fb75 	bl	8011348 <_Bfree>
 8010c5e:	46c2      	mov	sl, r8
 8010c60:	9b08      	ldr	r3, [sp, #32]
 8010c62:	1b9a      	subs	r2, r3, r6
 8010c64:	d004      	beq.n	8010c70 <_dtoa_r+0x780>
 8010c66:	4651      	mov	r1, sl
 8010c68:	4620      	mov	r0, r4
 8010c6a:	f000 fca3 	bl	80115b4 <__pow5mult>
 8010c6e:	4682      	mov	sl, r0
 8010c70:	2101      	movs	r1, #1
 8010c72:	4620      	mov	r0, r4
 8010c74:	f000 fc08 	bl	8011488 <__i2b>
 8010c78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	4606      	mov	r6, r0
 8010c7e:	f340 8083 	ble.w	8010d88 <_dtoa_r+0x898>
 8010c82:	461a      	mov	r2, r3
 8010c84:	4601      	mov	r1, r0
 8010c86:	4620      	mov	r0, r4
 8010c88:	f000 fc94 	bl	80115b4 <__pow5mult>
 8010c8c:	9b07      	ldr	r3, [sp, #28]
 8010c8e:	2b01      	cmp	r3, #1
 8010c90:	4606      	mov	r6, r0
 8010c92:	dd7c      	ble.n	8010d8e <_dtoa_r+0x89e>
 8010c94:	f04f 0800 	mov.w	r8, #0
 8010c98:	6933      	ldr	r3, [r6, #16]
 8010c9a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010c9e:	6918      	ldr	r0, [r3, #16]
 8010ca0:	f000 fba4 	bl	80113ec <__hi0bits>
 8010ca4:	f1c0 0020 	rsb	r0, r0, #32
 8010ca8:	9b06      	ldr	r3, [sp, #24]
 8010caa:	4418      	add	r0, r3
 8010cac:	f010 001f 	ands.w	r0, r0, #31
 8010cb0:	f000 8096 	beq.w	8010de0 <_dtoa_r+0x8f0>
 8010cb4:	f1c0 0320 	rsb	r3, r0, #32
 8010cb8:	2b04      	cmp	r3, #4
 8010cba:	f340 8087 	ble.w	8010dcc <_dtoa_r+0x8dc>
 8010cbe:	9b05      	ldr	r3, [sp, #20]
 8010cc0:	f1c0 001c 	rsb	r0, r0, #28
 8010cc4:	4403      	add	r3, r0
 8010cc6:	9305      	str	r3, [sp, #20]
 8010cc8:	9b06      	ldr	r3, [sp, #24]
 8010cca:	4405      	add	r5, r0
 8010ccc:	4403      	add	r3, r0
 8010cce:	9306      	str	r3, [sp, #24]
 8010cd0:	9b05      	ldr	r3, [sp, #20]
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	dd05      	ble.n	8010ce2 <_dtoa_r+0x7f2>
 8010cd6:	4651      	mov	r1, sl
 8010cd8:	461a      	mov	r2, r3
 8010cda:	4620      	mov	r0, r4
 8010cdc:	f000 fcb8 	bl	8011650 <__lshift>
 8010ce0:	4682      	mov	sl, r0
 8010ce2:	9b06      	ldr	r3, [sp, #24]
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	dd05      	ble.n	8010cf4 <_dtoa_r+0x804>
 8010ce8:	4631      	mov	r1, r6
 8010cea:	461a      	mov	r2, r3
 8010cec:	4620      	mov	r0, r4
 8010cee:	f000 fcaf 	bl	8011650 <__lshift>
 8010cf2:	4606      	mov	r6, r0
 8010cf4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d074      	beq.n	8010de4 <_dtoa_r+0x8f4>
 8010cfa:	4631      	mov	r1, r6
 8010cfc:	4650      	mov	r0, sl
 8010cfe:	f000 fcf8 	bl	80116f2 <__mcmp>
 8010d02:	2800      	cmp	r0, #0
 8010d04:	da6e      	bge.n	8010de4 <_dtoa_r+0x8f4>
 8010d06:	2300      	movs	r3, #0
 8010d08:	4651      	mov	r1, sl
 8010d0a:	220a      	movs	r2, #10
 8010d0c:	4620      	mov	r0, r4
 8010d0e:	f000 fb32 	bl	8011376 <__multadd>
 8010d12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d14:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8010d18:	4682      	mov	sl, r0
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	f000 81a8 	beq.w	8011070 <_dtoa_r+0xb80>
 8010d20:	2300      	movs	r3, #0
 8010d22:	4639      	mov	r1, r7
 8010d24:	220a      	movs	r2, #10
 8010d26:	4620      	mov	r0, r4
 8010d28:	f000 fb25 	bl	8011376 <__multadd>
 8010d2c:	9b04      	ldr	r3, [sp, #16]
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	4607      	mov	r7, r0
 8010d32:	f300 80c8 	bgt.w	8010ec6 <_dtoa_r+0x9d6>
 8010d36:	9b07      	ldr	r3, [sp, #28]
 8010d38:	2b02      	cmp	r3, #2
 8010d3a:	f340 80c4 	ble.w	8010ec6 <_dtoa_r+0x9d6>
 8010d3e:	e059      	b.n	8010df4 <_dtoa_r+0x904>
 8010d40:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010d42:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010d46:	e756      	b.n	8010bf6 <_dtoa_r+0x706>
 8010d48:	9b03      	ldr	r3, [sp, #12]
 8010d4a:	1e5e      	subs	r6, r3, #1
 8010d4c:	9b08      	ldr	r3, [sp, #32]
 8010d4e:	42b3      	cmp	r3, r6
 8010d50:	bfbf      	itttt	lt
 8010d52:	9b08      	ldrlt	r3, [sp, #32]
 8010d54:	9608      	strlt	r6, [sp, #32]
 8010d56:	1af2      	sublt	r2, r6, r3
 8010d58:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8010d5a:	bfb6      	itet	lt
 8010d5c:	189b      	addlt	r3, r3, r2
 8010d5e:	1b9e      	subge	r6, r3, r6
 8010d60:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8010d62:	9b03      	ldr	r3, [sp, #12]
 8010d64:	bfb8      	it	lt
 8010d66:	2600      	movlt	r6, #0
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	bfb9      	ittee	lt
 8010d6c:	9b05      	ldrlt	r3, [sp, #20]
 8010d6e:	9a03      	ldrlt	r2, [sp, #12]
 8010d70:	9d05      	ldrge	r5, [sp, #20]
 8010d72:	9b03      	ldrge	r3, [sp, #12]
 8010d74:	bfbc      	itt	lt
 8010d76:	1a9d      	sublt	r5, r3, r2
 8010d78:	2300      	movlt	r3, #0
 8010d7a:	e73e      	b.n	8010bfa <_dtoa_r+0x70a>
 8010d7c:	9e08      	ldr	r6, [sp, #32]
 8010d7e:	9d05      	ldr	r5, [sp, #20]
 8010d80:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010d82:	e745      	b.n	8010c10 <_dtoa_r+0x720>
 8010d84:	9a08      	ldr	r2, [sp, #32]
 8010d86:	e76e      	b.n	8010c66 <_dtoa_r+0x776>
 8010d88:	9b07      	ldr	r3, [sp, #28]
 8010d8a:	2b01      	cmp	r3, #1
 8010d8c:	dc19      	bgt.n	8010dc2 <_dtoa_r+0x8d2>
 8010d8e:	9b00      	ldr	r3, [sp, #0]
 8010d90:	b9bb      	cbnz	r3, 8010dc2 <_dtoa_r+0x8d2>
 8010d92:	9b01      	ldr	r3, [sp, #4]
 8010d94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010d98:	b99b      	cbnz	r3, 8010dc2 <_dtoa_r+0x8d2>
 8010d9a:	9b01      	ldr	r3, [sp, #4]
 8010d9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010da0:	0d1b      	lsrs	r3, r3, #20
 8010da2:	051b      	lsls	r3, r3, #20
 8010da4:	b183      	cbz	r3, 8010dc8 <_dtoa_r+0x8d8>
 8010da6:	9b05      	ldr	r3, [sp, #20]
 8010da8:	3301      	adds	r3, #1
 8010daa:	9305      	str	r3, [sp, #20]
 8010dac:	9b06      	ldr	r3, [sp, #24]
 8010dae:	3301      	adds	r3, #1
 8010db0:	9306      	str	r3, [sp, #24]
 8010db2:	f04f 0801 	mov.w	r8, #1
 8010db6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	f47f af6d 	bne.w	8010c98 <_dtoa_r+0x7a8>
 8010dbe:	2001      	movs	r0, #1
 8010dc0:	e772      	b.n	8010ca8 <_dtoa_r+0x7b8>
 8010dc2:	f04f 0800 	mov.w	r8, #0
 8010dc6:	e7f6      	b.n	8010db6 <_dtoa_r+0x8c6>
 8010dc8:	4698      	mov	r8, r3
 8010dca:	e7f4      	b.n	8010db6 <_dtoa_r+0x8c6>
 8010dcc:	d080      	beq.n	8010cd0 <_dtoa_r+0x7e0>
 8010dce:	9a05      	ldr	r2, [sp, #20]
 8010dd0:	331c      	adds	r3, #28
 8010dd2:	441a      	add	r2, r3
 8010dd4:	9205      	str	r2, [sp, #20]
 8010dd6:	9a06      	ldr	r2, [sp, #24]
 8010dd8:	441a      	add	r2, r3
 8010dda:	441d      	add	r5, r3
 8010ddc:	4613      	mov	r3, r2
 8010dde:	e776      	b.n	8010cce <_dtoa_r+0x7de>
 8010de0:	4603      	mov	r3, r0
 8010de2:	e7f4      	b.n	8010dce <_dtoa_r+0x8de>
 8010de4:	9b03      	ldr	r3, [sp, #12]
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	dc36      	bgt.n	8010e58 <_dtoa_r+0x968>
 8010dea:	9b07      	ldr	r3, [sp, #28]
 8010dec:	2b02      	cmp	r3, #2
 8010dee:	dd33      	ble.n	8010e58 <_dtoa_r+0x968>
 8010df0:	9b03      	ldr	r3, [sp, #12]
 8010df2:	9304      	str	r3, [sp, #16]
 8010df4:	9b04      	ldr	r3, [sp, #16]
 8010df6:	b963      	cbnz	r3, 8010e12 <_dtoa_r+0x922>
 8010df8:	4631      	mov	r1, r6
 8010dfa:	2205      	movs	r2, #5
 8010dfc:	4620      	mov	r0, r4
 8010dfe:	f000 faba 	bl	8011376 <__multadd>
 8010e02:	4601      	mov	r1, r0
 8010e04:	4606      	mov	r6, r0
 8010e06:	4650      	mov	r0, sl
 8010e08:	f000 fc73 	bl	80116f2 <__mcmp>
 8010e0c:	2800      	cmp	r0, #0
 8010e0e:	f73f adb6 	bgt.w	801097e <_dtoa_r+0x48e>
 8010e12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e14:	9d02      	ldr	r5, [sp, #8]
 8010e16:	ea6f 0b03 	mvn.w	fp, r3
 8010e1a:	2300      	movs	r3, #0
 8010e1c:	9303      	str	r3, [sp, #12]
 8010e1e:	4631      	mov	r1, r6
 8010e20:	4620      	mov	r0, r4
 8010e22:	f000 fa91 	bl	8011348 <_Bfree>
 8010e26:	2f00      	cmp	r7, #0
 8010e28:	f43f aea6 	beq.w	8010b78 <_dtoa_r+0x688>
 8010e2c:	9b03      	ldr	r3, [sp, #12]
 8010e2e:	b12b      	cbz	r3, 8010e3c <_dtoa_r+0x94c>
 8010e30:	42bb      	cmp	r3, r7
 8010e32:	d003      	beq.n	8010e3c <_dtoa_r+0x94c>
 8010e34:	4619      	mov	r1, r3
 8010e36:	4620      	mov	r0, r4
 8010e38:	f000 fa86 	bl	8011348 <_Bfree>
 8010e3c:	4639      	mov	r1, r7
 8010e3e:	4620      	mov	r0, r4
 8010e40:	f000 fa82 	bl	8011348 <_Bfree>
 8010e44:	e698      	b.n	8010b78 <_dtoa_r+0x688>
 8010e46:	2600      	movs	r6, #0
 8010e48:	4637      	mov	r7, r6
 8010e4a:	e7e2      	b.n	8010e12 <_dtoa_r+0x922>
 8010e4c:	46bb      	mov	fp, r7
 8010e4e:	4637      	mov	r7, r6
 8010e50:	e595      	b.n	801097e <_dtoa_r+0x48e>
 8010e52:	bf00      	nop
 8010e54:	40240000 	.word	0x40240000
 8010e58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e5a:	bb93      	cbnz	r3, 8010ec2 <_dtoa_r+0x9d2>
 8010e5c:	9b03      	ldr	r3, [sp, #12]
 8010e5e:	9304      	str	r3, [sp, #16]
 8010e60:	9d02      	ldr	r5, [sp, #8]
 8010e62:	4631      	mov	r1, r6
 8010e64:	4650      	mov	r0, sl
 8010e66:	f7ff fab5 	bl	80103d4 <quorem>
 8010e6a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010e6e:	f805 9b01 	strb.w	r9, [r5], #1
 8010e72:	9b02      	ldr	r3, [sp, #8]
 8010e74:	9a04      	ldr	r2, [sp, #16]
 8010e76:	1aeb      	subs	r3, r5, r3
 8010e78:	429a      	cmp	r2, r3
 8010e7a:	f300 80dc 	bgt.w	8011036 <_dtoa_r+0xb46>
 8010e7e:	9b02      	ldr	r3, [sp, #8]
 8010e80:	2a01      	cmp	r2, #1
 8010e82:	bfac      	ite	ge
 8010e84:	189b      	addge	r3, r3, r2
 8010e86:	3301      	addlt	r3, #1
 8010e88:	4698      	mov	r8, r3
 8010e8a:	2300      	movs	r3, #0
 8010e8c:	9303      	str	r3, [sp, #12]
 8010e8e:	4651      	mov	r1, sl
 8010e90:	2201      	movs	r2, #1
 8010e92:	4620      	mov	r0, r4
 8010e94:	f000 fbdc 	bl	8011650 <__lshift>
 8010e98:	4631      	mov	r1, r6
 8010e9a:	4682      	mov	sl, r0
 8010e9c:	f000 fc29 	bl	80116f2 <__mcmp>
 8010ea0:	2800      	cmp	r0, #0
 8010ea2:	f300 808d 	bgt.w	8010fc0 <_dtoa_r+0xad0>
 8010ea6:	d103      	bne.n	8010eb0 <_dtoa_r+0x9c0>
 8010ea8:	f019 0f01 	tst.w	r9, #1
 8010eac:	f040 8088 	bne.w	8010fc0 <_dtoa_r+0xad0>
 8010eb0:	4645      	mov	r5, r8
 8010eb2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010eb6:	2b30      	cmp	r3, #48	; 0x30
 8010eb8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8010ebc:	d1af      	bne.n	8010e1e <_dtoa_r+0x92e>
 8010ebe:	4615      	mov	r5, r2
 8010ec0:	e7f7      	b.n	8010eb2 <_dtoa_r+0x9c2>
 8010ec2:	9b03      	ldr	r3, [sp, #12]
 8010ec4:	9304      	str	r3, [sp, #16]
 8010ec6:	2d00      	cmp	r5, #0
 8010ec8:	dd05      	ble.n	8010ed6 <_dtoa_r+0x9e6>
 8010eca:	4639      	mov	r1, r7
 8010ecc:	462a      	mov	r2, r5
 8010ece:	4620      	mov	r0, r4
 8010ed0:	f000 fbbe 	bl	8011650 <__lshift>
 8010ed4:	4607      	mov	r7, r0
 8010ed6:	f1b8 0f00 	cmp.w	r8, #0
 8010eda:	d04c      	beq.n	8010f76 <_dtoa_r+0xa86>
 8010edc:	6879      	ldr	r1, [r7, #4]
 8010ede:	4620      	mov	r0, r4
 8010ee0:	f000 f9fe 	bl	80112e0 <_Balloc>
 8010ee4:	693a      	ldr	r2, [r7, #16]
 8010ee6:	3202      	adds	r2, #2
 8010ee8:	4605      	mov	r5, r0
 8010eea:	0092      	lsls	r2, r2, #2
 8010eec:	f107 010c 	add.w	r1, r7, #12
 8010ef0:	300c      	adds	r0, #12
 8010ef2:	f7fe fa1d 	bl	800f330 <memcpy>
 8010ef6:	2201      	movs	r2, #1
 8010ef8:	4629      	mov	r1, r5
 8010efa:	4620      	mov	r0, r4
 8010efc:	f000 fba8 	bl	8011650 <__lshift>
 8010f00:	9b00      	ldr	r3, [sp, #0]
 8010f02:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8010f06:	9703      	str	r7, [sp, #12]
 8010f08:	f003 0301 	and.w	r3, r3, #1
 8010f0c:	4607      	mov	r7, r0
 8010f0e:	9305      	str	r3, [sp, #20]
 8010f10:	4631      	mov	r1, r6
 8010f12:	4650      	mov	r0, sl
 8010f14:	f7ff fa5e 	bl	80103d4 <quorem>
 8010f18:	9903      	ldr	r1, [sp, #12]
 8010f1a:	4605      	mov	r5, r0
 8010f1c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010f20:	4650      	mov	r0, sl
 8010f22:	f000 fbe6 	bl	80116f2 <__mcmp>
 8010f26:	463a      	mov	r2, r7
 8010f28:	9000      	str	r0, [sp, #0]
 8010f2a:	4631      	mov	r1, r6
 8010f2c:	4620      	mov	r0, r4
 8010f2e:	f000 fbfa 	bl	8011726 <__mdiff>
 8010f32:	68c3      	ldr	r3, [r0, #12]
 8010f34:	4602      	mov	r2, r0
 8010f36:	bb03      	cbnz	r3, 8010f7a <_dtoa_r+0xa8a>
 8010f38:	4601      	mov	r1, r0
 8010f3a:	9006      	str	r0, [sp, #24]
 8010f3c:	4650      	mov	r0, sl
 8010f3e:	f000 fbd8 	bl	80116f2 <__mcmp>
 8010f42:	9a06      	ldr	r2, [sp, #24]
 8010f44:	4603      	mov	r3, r0
 8010f46:	4611      	mov	r1, r2
 8010f48:	4620      	mov	r0, r4
 8010f4a:	9306      	str	r3, [sp, #24]
 8010f4c:	f000 f9fc 	bl	8011348 <_Bfree>
 8010f50:	9b06      	ldr	r3, [sp, #24]
 8010f52:	b9a3      	cbnz	r3, 8010f7e <_dtoa_r+0xa8e>
 8010f54:	9a07      	ldr	r2, [sp, #28]
 8010f56:	b992      	cbnz	r2, 8010f7e <_dtoa_r+0xa8e>
 8010f58:	9a05      	ldr	r2, [sp, #20]
 8010f5a:	b982      	cbnz	r2, 8010f7e <_dtoa_r+0xa8e>
 8010f5c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010f60:	d029      	beq.n	8010fb6 <_dtoa_r+0xac6>
 8010f62:	9b00      	ldr	r3, [sp, #0]
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	dd01      	ble.n	8010f6c <_dtoa_r+0xa7c>
 8010f68:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8010f6c:	f108 0501 	add.w	r5, r8, #1
 8010f70:	f888 9000 	strb.w	r9, [r8]
 8010f74:	e753      	b.n	8010e1e <_dtoa_r+0x92e>
 8010f76:	4638      	mov	r0, r7
 8010f78:	e7c2      	b.n	8010f00 <_dtoa_r+0xa10>
 8010f7a:	2301      	movs	r3, #1
 8010f7c:	e7e3      	b.n	8010f46 <_dtoa_r+0xa56>
 8010f7e:	9a00      	ldr	r2, [sp, #0]
 8010f80:	2a00      	cmp	r2, #0
 8010f82:	db04      	blt.n	8010f8e <_dtoa_r+0xa9e>
 8010f84:	d125      	bne.n	8010fd2 <_dtoa_r+0xae2>
 8010f86:	9a07      	ldr	r2, [sp, #28]
 8010f88:	bb1a      	cbnz	r2, 8010fd2 <_dtoa_r+0xae2>
 8010f8a:	9a05      	ldr	r2, [sp, #20]
 8010f8c:	bb0a      	cbnz	r2, 8010fd2 <_dtoa_r+0xae2>
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	ddec      	ble.n	8010f6c <_dtoa_r+0xa7c>
 8010f92:	4651      	mov	r1, sl
 8010f94:	2201      	movs	r2, #1
 8010f96:	4620      	mov	r0, r4
 8010f98:	f000 fb5a 	bl	8011650 <__lshift>
 8010f9c:	4631      	mov	r1, r6
 8010f9e:	4682      	mov	sl, r0
 8010fa0:	f000 fba7 	bl	80116f2 <__mcmp>
 8010fa4:	2800      	cmp	r0, #0
 8010fa6:	dc03      	bgt.n	8010fb0 <_dtoa_r+0xac0>
 8010fa8:	d1e0      	bne.n	8010f6c <_dtoa_r+0xa7c>
 8010faa:	f019 0f01 	tst.w	r9, #1
 8010fae:	d0dd      	beq.n	8010f6c <_dtoa_r+0xa7c>
 8010fb0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010fb4:	d1d8      	bne.n	8010f68 <_dtoa_r+0xa78>
 8010fb6:	2339      	movs	r3, #57	; 0x39
 8010fb8:	f888 3000 	strb.w	r3, [r8]
 8010fbc:	f108 0801 	add.w	r8, r8, #1
 8010fc0:	4645      	mov	r5, r8
 8010fc2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010fc6:	2b39      	cmp	r3, #57	; 0x39
 8010fc8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8010fcc:	d03b      	beq.n	8011046 <_dtoa_r+0xb56>
 8010fce:	3301      	adds	r3, #1
 8010fd0:	e040      	b.n	8011054 <_dtoa_r+0xb64>
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	f108 0501 	add.w	r5, r8, #1
 8010fd8:	dd05      	ble.n	8010fe6 <_dtoa_r+0xaf6>
 8010fda:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010fde:	d0ea      	beq.n	8010fb6 <_dtoa_r+0xac6>
 8010fe0:	f109 0901 	add.w	r9, r9, #1
 8010fe4:	e7c4      	b.n	8010f70 <_dtoa_r+0xa80>
 8010fe6:	9b02      	ldr	r3, [sp, #8]
 8010fe8:	9a04      	ldr	r2, [sp, #16]
 8010fea:	f805 9c01 	strb.w	r9, [r5, #-1]
 8010fee:	1aeb      	subs	r3, r5, r3
 8010ff0:	4293      	cmp	r3, r2
 8010ff2:	46a8      	mov	r8, r5
 8010ff4:	f43f af4b 	beq.w	8010e8e <_dtoa_r+0x99e>
 8010ff8:	4651      	mov	r1, sl
 8010ffa:	2300      	movs	r3, #0
 8010ffc:	220a      	movs	r2, #10
 8010ffe:	4620      	mov	r0, r4
 8011000:	f000 f9b9 	bl	8011376 <__multadd>
 8011004:	9b03      	ldr	r3, [sp, #12]
 8011006:	9903      	ldr	r1, [sp, #12]
 8011008:	42bb      	cmp	r3, r7
 801100a:	4682      	mov	sl, r0
 801100c:	f04f 0300 	mov.w	r3, #0
 8011010:	f04f 020a 	mov.w	r2, #10
 8011014:	4620      	mov	r0, r4
 8011016:	d104      	bne.n	8011022 <_dtoa_r+0xb32>
 8011018:	f000 f9ad 	bl	8011376 <__multadd>
 801101c:	9003      	str	r0, [sp, #12]
 801101e:	4607      	mov	r7, r0
 8011020:	e776      	b.n	8010f10 <_dtoa_r+0xa20>
 8011022:	f000 f9a8 	bl	8011376 <__multadd>
 8011026:	2300      	movs	r3, #0
 8011028:	9003      	str	r0, [sp, #12]
 801102a:	220a      	movs	r2, #10
 801102c:	4639      	mov	r1, r7
 801102e:	4620      	mov	r0, r4
 8011030:	f000 f9a1 	bl	8011376 <__multadd>
 8011034:	e7f3      	b.n	801101e <_dtoa_r+0xb2e>
 8011036:	4651      	mov	r1, sl
 8011038:	2300      	movs	r3, #0
 801103a:	220a      	movs	r2, #10
 801103c:	4620      	mov	r0, r4
 801103e:	f000 f99a 	bl	8011376 <__multadd>
 8011042:	4682      	mov	sl, r0
 8011044:	e70d      	b.n	8010e62 <_dtoa_r+0x972>
 8011046:	9b02      	ldr	r3, [sp, #8]
 8011048:	4293      	cmp	r3, r2
 801104a:	d105      	bne.n	8011058 <_dtoa_r+0xb68>
 801104c:	9a02      	ldr	r2, [sp, #8]
 801104e:	f10b 0b01 	add.w	fp, fp, #1
 8011052:	2331      	movs	r3, #49	; 0x31
 8011054:	7013      	strb	r3, [r2, #0]
 8011056:	e6e2      	b.n	8010e1e <_dtoa_r+0x92e>
 8011058:	4615      	mov	r5, r2
 801105a:	e7b2      	b.n	8010fc2 <_dtoa_r+0xad2>
 801105c:	4b09      	ldr	r3, [pc, #36]	; (8011084 <_dtoa_r+0xb94>)
 801105e:	f7ff baae 	b.w	80105be <_dtoa_r+0xce>
 8011062:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011064:	2b00      	cmp	r3, #0
 8011066:	f47f aa88 	bne.w	801057a <_dtoa_r+0x8a>
 801106a:	4b07      	ldr	r3, [pc, #28]	; (8011088 <_dtoa_r+0xb98>)
 801106c:	f7ff baa7 	b.w	80105be <_dtoa_r+0xce>
 8011070:	9b04      	ldr	r3, [sp, #16]
 8011072:	2b00      	cmp	r3, #0
 8011074:	f73f aef4 	bgt.w	8010e60 <_dtoa_r+0x970>
 8011078:	9b07      	ldr	r3, [sp, #28]
 801107a:	2b02      	cmp	r3, #2
 801107c:	f77f aef0 	ble.w	8010e60 <_dtoa_r+0x970>
 8011080:	e6b8      	b.n	8010df4 <_dtoa_r+0x904>
 8011082:	bf00      	nop
 8011084:	08014796 	.word	0x08014796
 8011088:	080147b8 	.word	0x080147b8

0801108c <_malloc_trim_r>:
 801108c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011090:	4f25      	ldr	r7, [pc, #148]	; (8011128 <_malloc_trim_r+0x9c>)
 8011092:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8011134 <_malloc_trim_r+0xa8>
 8011096:	4689      	mov	r9, r1
 8011098:	4606      	mov	r6, r0
 801109a:	f7fe f95d 	bl	800f358 <__malloc_lock>
 801109e:	68bb      	ldr	r3, [r7, #8]
 80110a0:	685d      	ldr	r5, [r3, #4]
 80110a2:	f1a8 0411 	sub.w	r4, r8, #17
 80110a6:	f025 0503 	bic.w	r5, r5, #3
 80110aa:	eba4 0409 	sub.w	r4, r4, r9
 80110ae:	442c      	add	r4, r5
 80110b0:	fbb4 f4f8 	udiv	r4, r4, r8
 80110b4:	3c01      	subs	r4, #1
 80110b6:	fb08 f404 	mul.w	r4, r8, r4
 80110ba:	4544      	cmp	r4, r8
 80110bc:	da05      	bge.n	80110ca <_malloc_trim_r+0x3e>
 80110be:	4630      	mov	r0, r6
 80110c0:	f7fe f950 	bl	800f364 <__malloc_unlock>
 80110c4:	2000      	movs	r0, #0
 80110c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80110ca:	2100      	movs	r1, #0
 80110cc:	4630      	mov	r0, r6
 80110ce:	f7fe f94f 	bl	800f370 <_sbrk_r>
 80110d2:	68bb      	ldr	r3, [r7, #8]
 80110d4:	442b      	add	r3, r5
 80110d6:	4298      	cmp	r0, r3
 80110d8:	d1f1      	bne.n	80110be <_malloc_trim_r+0x32>
 80110da:	4261      	negs	r1, r4
 80110dc:	4630      	mov	r0, r6
 80110de:	f7fe f947 	bl	800f370 <_sbrk_r>
 80110e2:	3001      	adds	r0, #1
 80110e4:	d110      	bne.n	8011108 <_malloc_trim_r+0x7c>
 80110e6:	2100      	movs	r1, #0
 80110e8:	4630      	mov	r0, r6
 80110ea:	f7fe f941 	bl	800f370 <_sbrk_r>
 80110ee:	68ba      	ldr	r2, [r7, #8]
 80110f0:	1a83      	subs	r3, r0, r2
 80110f2:	2b0f      	cmp	r3, #15
 80110f4:	dde3      	ble.n	80110be <_malloc_trim_r+0x32>
 80110f6:	490d      	ldr	r1, [pc, #52]	; (801112c <_malloc_trim_r+0xa0>)
 80110f8:	6809      	ldr	r1, [r1, #0]
 80110fa:	1a40      	subs	r0, r0, r1
 80110fc:	490c      	ldr	r1, [pc, #48]	; (8011130 <_malloc_trim_r+0xa4>)
 80110fe:	f043 0301 	orr.w	r3, r3, #1
 8011102:	6008      	str	r0, [r1, #0]
 8011104:	6053      	str	r3, [r2, #4]
 8011106:	e7da      	b.n	80110be <_malloc_trim_r+0x32>
 8011108:	68bb      	ldr	r3, [r7, #8]
 801110a:	4a09      	ldr	r2, [pc, #36]	; (8011130 <_malloc_trim_r+0xa4>)
 801110c:	1b2d      	subs	r5, r5, r4
 801110e:	f045 0501 	orr.w	r5, r5, #1
 8011112:	605d      	str	r5, [r3, #4]
 8011114:	6813      	ldr	r3, [r2, #0]
 8011116:	4630      	mov	r0, r6
 8011118:	1b1c      	subs	r4, r3, r4
 801111a:	6014      	str	r4, [r2, #0]
 801111c:	f7fe f922 	bl	800f364 <__malloc_unlock>
 8011120:	2001      	movs	r0, #1
 8011122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011126:	bf00      	nop
 8011128:	20000e24 	.word	0x20000e24
 801112c:	2000122c 	.word	0x2000122c
 8011130:	2000c378 	.word	0x2000c378
 8011134:	00001000 	.word	0x00001000

08011138 <_free_r>:
 8011138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801113c:	4604      	mov	r4, r0
 801113e:	4688      	mov	r8, r1
 8011140:	2900      	cmp	r1, #0
 8011142:	f000 80ab 	beq.w	801129c <_free_r+0x164>
 8011146:	f7fe f907 	bl	800f358 <__malloc_lock>
 801114a:	f858 2c04 	ldr.w	r2, [r8, #-4]
 801114e:	4d54      	ldr	r5, [pc, #336]	; (80112a0 <_free_r+0x168>)
 8011150:	f022 0001 	bic.w	r0, r2, #1
 8011154:	f1a8 0308 	sub.w	r3, r8, #8
 8011158:	181f      	adds	r7, r3, r0
 801115a:	68a9      	ldr	r1, [r5, #8]
 801115c:	687e      	ldr	r6, [r7, #4]
 801115e:	428f      	cmp	r7, r1
 8011160:	f026 0603 	bic.w	r6, r6, #3
 8011164:	f002 0201 	and.w	r2, r2, #1
 8011168:	d11b      	bne.n	80111a2 <_free_r+0x6a>
 801116a:	4430      	add	r0, r6
 801116c:	b93a      	cbnz	r2, 801117e <_free_r+0x46>
 801116e:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8011172:	1a9b      	subs	r3, r3, r2
 8011174:	4410      	add	r0, r2
 8011176:	6899      	ldr	r1, [r3, #8]
 8011178:	68da      	ldr	r2, [r3, #12]
 801117a:	60ca      	str	r2, [r1, #12]
 801117c:	6091      	str	r1, [r2, #8]
 801117e:	f040 0201 	orr.w	r2, r0, #1
 8011182:	605a      	str	r2, [r3, #4]
 8011184:	60ab      	str	r3, [r5, #8]
 8011186:	4b47      	ldr	r3, [pc, #284]	; (80112a4 <_free_r+0x16c>)
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	4298      	cmp	r0, r3
 801118c:	d304      	bcc.n	8011198 <_free_r+0x60>
 801118e:	4b46      	ldr	r3, [pc, #280]	; (80112a8 <_free_r+0x170>)
 8011190:	4620      	mov	r0, r4
 8011192:	6819      	ldr	r1, [r3, #0]
 8011194:	f7ff ff7a 	bl	801108c <_malloc_trim_r>
 8011198:	4620      	mov	r0, r4
 801119a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801119e:	f7fe b8e1 	b.w	800f364 <__malloc_unlock>
 80111a2:	607e      	str	r6, [r7, #4]
 80111a4:	2a00      	cmp	r2, #0
 80111a6:	d139      	bne.n	801121c <_free_r+0xe4>
 80111a8:	f858 1c08 	ldr.w	r1, [r8, #-8]
 80111ac:	1a5b      	subs	r3, r3, r1
 80111ae:	4408      	add	r0, r1
 80111b0:	6899      	ldr	r1, [r3, #8]
 80111b2:	f105 0e08 	add.w	lr, r5, #8
 80111b6:	4571      	cmp	r1, lr
 80111b8:	d032      	beq.n	8011220 <_free_r+0xe8>
 80111ba:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 80111be:	f8c1 e00c 	str.w	lr, [r1, #12]
 80111c2:	f8ce 1008 	str.w	r1, [lr, #8]
 80111c6:	19b9      	adds	r1, r7, r6
 80111c8:	6849      	ldr	r1, [r1, #4]
 80111ca:	07c9      	lsls	r1, r1, #31
 80111cc:	d40a      	bmi.n	80111e4 <_free_r+0xac>
 80111ce:	4430      	add	r0, r6
 80111d0:	68b9      	ldr	r1, [r7, #8]
 80111d2:	bb3a      	cbnz	r2, 8011224 <_free_r+0xec>
 80111d4:	4e35      	ldr	r6, [pc, #212]	; (80112ac <_free_r+0x174>)
 80111d6:	42b1      	cmp	r1, r6
 80111d8:	d124      	bne.n	8011224 <_free_r+0xec>
 80111da:	616b      	str	r3, [r5, #20]
 80111dc:	612b      	str	r3, [r5, #16]
 80111de:	2201      	movs	r2, #1
 80111e0:	60d9      	str	r1, [r3, #12]
 80111e2:	6099      	str	r1, [r3, #8]
 80111e4:	f040 0101 	orr.w	r1, r0, #1
 80111e8:	6059      	str	r1, [r3, #4]
 80111ea:	5018      	str	r0, [r3, r0]
 80111ec:	2a00      	cmp	r2, #0
 80111ee:	d1d3      	bne.n	8011198 <_free_r+0x60>
 80111f0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80111f4:	d21a      	bcs.n	801122c <_free_r+0xf4>
 80111f6:	08c0      	lsrs	r0, r0, #3
 80111f8:	1081      	asrs	r1, r0, #2
 80111fa:	2201      	movs	r2, #1
 80111fc:	408a      	lsls	r2, r1
 80111fe:	6869      	ldr	r1, [r5, #4]
 8011200:	3001      	adds	r0, #1
 8011202:	430a      	orrs	r2, r1
 8011204:	606a      	str	r2, [r5, #4]
 8011206:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 801120a:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 801120e:	6099      	str	r1, [r3, #8]
 8011210:	3a08      	subs	r2, #8
 8011212:	60da      	str	r2, [r3, #12]
 8011214:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8011218:	60cb      	str	r3, [r1, #12]
 801121a:	e7bd      	b.n	8011198 <_free_r+0x60>
 801121c:	2200      	movs	r2, #0
 801121e:	e7d2      	b.n	80111c6 <_free_r+0x8e>
 8011220:	2201      	movs	r2, #1
 8011222:	e7d0      	b.n	80111c6 <_free_r+0x8e>
 8011224:	68fe      	ldr	r6, [r7, #12]
 8011226:	60ce      	str	r6, [r1, #12]
 8011228:	60b1      	str	r1, [r6, #8]
 801122a:	e7db      	b.n	80111e4 <_free_r+0xac>
 801122c:	0a42      	lsrs	r2, r0, #9
 801122e:	2a04      	cmp	r2, #4
 8011230:	d813      	bhi.n	801125a <_free_r+0x122>
 8011232:	0982      	lsrs	r2, r0, #6
 8011234:	3238      	adds	r2, #56	; 0x38
 8011236:	1c51      	adds	r1, r2, #1
 8011238:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 801123c:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8011240:	428e      	cmp	r6, r1
 8011242:	d124      	bne.n	801128e <_free_r+0x156>
 8011244:	2001      	movs	r0, #1
 8011246:	1092      	asrs	r2, r2, #2
 8011248:	fa00 f202 	lsl.w	r2, r0, r2
 801124c:	6868      	ldr	r0, [r5, #4]
 801124e:	4302      	orrs	r2, r0
 8011250:	606a      	str	r2, [r5, #4]
 8011252:	60de      	str	r6, [r3, #12]
 8011254:	6099      	str	r1, [r3, #8]
 8011256:	60b3      	str	r3, [r6, #8]
 8011258:	e7de      	b.n	8011218 <_free_r+0xe0>
 801125a:	2a14      	cmp	r2, #20
 801125c:	d801      	bhi.n	8011262 <_free_r+0x12a>
 801125e:	325b      	adds	r2, #91	; 0x5b
 8011260:	e7e9      	b.n	8011236 <_free_r+0xfe>
 8011262:	2a54      	cmp	r2, #84	; 0x54
 8011264:	d802      	bhi.n	801126c <_free_r+0x134>
 8011266:	0b02      	lsrs	r2, r0, #12
 8011268:	326e      	adds	r2, #110	; 0x6e
 801126a:	e7e4      	b.n	8011236 <_free_r+0xfe>
 801126c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8011270:	d802      	bhi.n	8011278 <_free_r+0x140>
 8011272:	0bc2      	lsrs	r2, r0, #15
 8011274:	3277      	adds	r2, #119	; 0x77
 8011276:	e7de      	b.n	8011236 <_free_r+0xfe>
 8011278:	f240 5154 	movw	r1, #1364	; 0x554
 801127c:	428a      	cmp	r2, r1
 801127e:	bf9a      	itte	ls
 8011280:	0c82      	lsrls	r2, r0, #18
 8011282:	327c      	addls	r2, #124	; 0x7c
 8011284:	227e      	movhi	r2, #126	; 0x7e
 8011286:	e7d6      	b.n	8011236 <_free_r+0xfe>
 8011288:	6889      	ldr	r1, [r1, #8]
 801128a:	428e      	cmp	r6, r1
 801128c:	d004      	beq.n	8011298 <_free_r+0x160>
 801128e:	684a      	ldr	r2, [r1, #4]
 8011290:	f022 0203 	bic.w	r2, r2, #3
 8011294:	4290      	cmp	r0, r2
 8011296:	d3f7      	bcc.n	8011288 <_free_r+0x150>
 8011298:	68ce      	ldr	r6, [r1, #12]
 801129a:	e7da      	b.n	8011252 <_free_r+0x11a>
 801129c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112a0:	20000e24 	.word	0x20000e24
 80112a4:	20001230 	.word	0x20001230
 80112a8:	2000c3a8 	.word	0x2000c3a8
 80112ac:	20000e2c 	.word	0x20000e2c

080112b0 <_localeconv_r>:
 80112b0:	4b04      	ldr	r3, [pc, #16]	; (80112c4 <_localeconv_r+0x14>)
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	6a18      	ldr	r0, [r3, #32]
 80112b6:	4b04      	ldr	r3, [pc, #16]	; (80112c8 <_localeconv_r+0x18>)
 80112b8:	2800      	cmp	r0, #0
 80112ba:	bf08      	it	eq
 80112bc:	4618      	moveq	r0, r3
 80112be:	30f0      	adds	r0, #240	; 0xf0
 80112c0:	4770      	bx	lr
 80112c2:	bf00      	nop
 80112c4:	20000d30 	.word	0x20000d30
 80112c8:	20001234 	.word	0x20001234

080112cc <__retarget_lock_acquire_recursive>:
 80112cc:	4770      	bx	lr

080112ce <__retarget_lock_release_recursive>:
 80112ce:	4770      	bx	lr

080112d0 <malloc>:
 80112d0:	4b02      	ldr	r3, [pc, #8]	; (80112dc <malloc+0xc>)
 80112d2:	4601      	mov	r1, r0
 80112d4:	6818      	ldr	r0, [r3, #0]
 80112d6:	f7fd be1d 	b.w	800ef14 <_malloc_r>
 80112da:	bf00      	nop
 80112dc:	20000d30 	.word	0x20000d30

080112e0 <_Balloc>:
 80112e0:	b570      	push	{r4, r5, r6, lr}
 80112e2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80112e4:	4604      	mov	r4, r0
 80112e6:	460e      	mov	r6, r1
 80112e8:	b93d      	cbnz	r5, 80112fa <_Balloc+0x1a>
 80112ea:	2010      	movs	r0, #16
 80112ec:	f7ff fff0 	bl	80112d0 <malloc>
 80112f0:	6260      	str	r0, [r4, #36]	; 0x24
 80112f2:	6045      	str	r5, [r0, #4]
 80112f4:	6085      	str	r5, [r0, #8]
 80112f6:	6005      	str	r5, [r0, #0]
 80112f8:	60c5      	str	r5, [r0, #12]
 80112fa:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80112fc:	68eb      	ldr	r3, [r5, #12]
 80112fe:	b183      	cbz	r3, 8011322 <_Balloc+0x42>
 8011300:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011302:	68db      	ldr	r3, [r3, #12]
 8011304:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8011308:	b9b8      	cbnz	r0, 801133a <_Balloc+0x5a>
 801130a:	2101      	movs	r1, #1
 801130c:	fa01 f506 	lsl.w	r5, r1, r6
 8011310:	1d6a      	adds	r2, r5, #5
 8011312:	0092      	lsls	r2, r2, #2
 8011314:	4620      	mov	r0, r4
 8011316:	f7fd fda6 	bl	800ee66 <_calloc_r>
 801131a:	b160      	cbz	r0, 8011336 <_Balloc+0x56>
 801131c:	6046      	str	r6, [r0, #4]
 801131e:	6085      	str	r5, [r0, #8]
 8011320:	e00e      	b.n	8011340 <_Balloc+0x60>
 8011322:	2221      	movs	r2, #33	; 0x21
 8011324:	2104      	movs	r1, #4
 8011326:	4620      	mov	r0, r4
 8011328:	f7fd fd9d 	bl	800ee66 <_calloc_r>
 801132c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801132e:	60e8      	str	r0, [r5, #12]
 8011330:	68db      	ldr	r3, [r3, #12]
 8011332:	2b00      	cmp	r3, #0
 8011334:	d1e4      	bne.n	8011300 <_Balloc+0x20>
 8011336:	2000      	movs	r0, #0
 8011338:	bd70      	pop	{r4, r5, r6, pc}
 801133a:	6802      	ldr	r2, [r0, #0]
 801133c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8011340:	2300      	movs	r3, #0
 8011342:	6103      	str	r3, [r0, #16]
 8011344:	60c3      	str	r3, [r0, #12]
 8011346:	bd70      	pop	{r4, r5, r6, pc}

08011348 <_Bfree>:
 8011348:	b570      	push	{r4, r5, r6, lr}
 801134a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801134c:	4606      	mov	r6, r0
 801134e:	460d      	mov	r5, r1
 8011350:	b93c      	cbnz	r4, 8011362 <_Bfree+0x1a>
 8011352:	2010      	movs	r0, #16
 8011354:	f7ff ffbc 	bl	80112d0 <malloc>
 8011358:	6270      	str	r0, [r6, #36]	; 0x24
 801135a:	6044      	str	r4, [r0, #4]
 801135c:	6084      	str	r4, [r0, #8]
 801135e:	6004      	str	r4, [r0, #0]
 8011360:	60c4      	str	r4, [r0, #12]
 8011362:	b13d      	cbz	r5, 8011374 <_Bfree+0x2c>
 8011364:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8011366:	686a      	ldr	r2, [r5, #4]
 8011368:	68db      	ldr	r3, [r3, #12]
 801136a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801136e:	6029      	str	r1, [r5, #0]
 8011370:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8011374:	bd70      	pop	{r4, r5, r6, pc}

08011376 <__multadd>:
 8011376:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801137a:	690d      	ldr	r5, [r1, #16]
 801137c:	461f      	mov	r7, r3
 801137e:	4606      	mov	r6, r0
 8011380:	460c      	mov	r4, r1
 8011382:	f101 0e14 	add.w	lr, r1, #20
 8011386:	2300      	movs	r3, #0
 8011388:	f8de 0000 	ldr.w	r0, [lr]
 801138c:	b281      	uxth	r1, r0
 801138e:	fb02 7101 	mla	r1, r2, r1, r7
 8011392:	0c0f      	lsrs	r7, r1, #16
 8011394:	0c00      	lsrs	r0, r0, #16
 8011396:	fb02 7000 	mla	r0, r2, r0, r7
 801139a:	b289      	uxth	r1, r1
 801139c:	3301      	adds	r3, #1
 801139e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80113a2:	429d      	cmp	r5, r3
 80113a4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80113a8:	f84e 1b04 	str.w	r1, [lr], #4
 80113ac:	dcec      	bgt.n	8011388 <__multadd+0x12>
 80113ae:	b1d7      	cbz	r7, 80113e6 <__multadd+0x70>
 80113b0:	68a3      	ldr	r3, [r4, #8]
 80113b2:	429d      	cmp	r5, r3
 80113b4:	db12      	blt.n	80113dc <__multadd+0x66>
 80113b6:	6861      	ldr	r1, [r4, #4]
 80113b8:	4630      	mov	r0, r6
 80113ba:	3101      	adds	r1, #1
 80113bc:	f7ff ff90 	bl	80112e0 <_Balloc>
 80113c0:	6922      	ldr	r2, [r4, #16]
 80113c2:	3202      	adds	r2, #2
 80113c4:	f104 010c 	add.w	r1, r4, #12
 80113c8:	4680      	mov	r8, r0
 80113ca:	0092      	lsls	r2, r2, #2
 80113cc:	300c      	adds	r0, #12
 80113ce:	f7fd ffaf 	bl	800f330 <memcpy>
 80113d2:	4621      	mov	r1, r4
 80113d4:	4630      	mov	r0, r6
 80113d6:	f7ff ffb7 	bl	8011348 <_Bfree>
 80113da:	4644      	mov	r4, r8
 80113dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80113e0:	3501      	adds	r5, #1
 80113e2:	615f      	str	r7, [r3, #20]
 80113e4:	6125      	str	r5, [r4, #16]
 80113e6:	4620      	mov	r0, r4
 80113e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080113ec <__hi0bits>:
 80113ec:	0c02      	lsrs	r2, r0, #16
 80113ee:	0412      	lsls	r2, r2, #16
 80113f0:	4603      	mov	r3, r0
 80113f2:	b9b2      	cbnz	r2, 8011422 <__hi0bits+0x36>
 80113f4:	0403      	lsls	r3, r0, #16
 80113f6:	2010      	movs	r0, #16
 80113f8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80113fc:	bf04      	itt	eq
 80113fe:	021b      	lsleq	r3, r3, #8
 8011400:	3008      	addeq	r0, #8
 8011402:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8011406:	bf04      	itt	eq
 8011408:	011b      	lsleq	r3, r3, #4
 801140a:	3004      	addeq	r0, #4
 801140c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8011410:	bf04      	itt	eq
 8011412:	009b      	lsleq	r3, r3, #2
 8011414:	3002      	addeq	r0, #2
 8011416:	2b00      	cmp	r3, #0
 8011418:	db06      	blt.n	8011428 <__hi0bits+0x3c>
 801141a:	005b      	lsls	r3, r3, #1
 801141c:	d503      	bpl.n	8011426 <__hi0bits+0x3a>
 801141e:	3001      	adds	r0, #1
 8011420:	4770      	bx	lr
 8011422:	2000      	movs	r0, #0
 8011424:	e7e8      	b.n	80113f8 <__hi0bits+0xc>
 8011426:	2020      	movs	r0, #32
 8011428:	4770      	bx	lr

0801142a <__lo0bits>:
 801142a:	6803      	ldr	r3, [r0, #0]
 801142c:	f013 0207 	ands.w	r2, r3, #7
 8011430:	4601      	mov	r1, r0
 8011432:	d00b      	beq.n	801144c <__lo0bits+0x22>
 8011434:	07da      	lsls	r2, r3, #31
 8011436:	d423      	bmi.n	8011480 <__lo0bits+0x56>
 8011438:	0798      	lsls	r0, r3, #30
 801143a:	bf49      	itett	mi
 801143c:	085b      	lsrmi	r3, r3, #1
 801143e:	089b      	lsrpl	r3, r3, #2
 8011440:	2001      	movmi	r0, #1
 8011442:	600b      	strmi	r3, [r1, #0]
 8011444:	bf5c      	itt	pl
 8011446:	600b      	strpl	r3, [r1, #0]
 8011448:	2002      	movpl	r0, #2
 801144a:	4770      	bx	lr
 801144c:	b298      	uxth	r0, r3
 801144e:	b9a8      	cbnz	r0, 801147c <__lo0bits+0x52>
 8011450:	0c1b      	lsrs	r3, r3, #16
 8011452:	2010      	movs	r0, #16
 8011454:	f013 0fff 	tst.w	r3, #255	; 0xff
 8011458:	bf04      	itt	eq
 801145a:	0a1b      	lsreq	r3, r3, #8
 801145c:	3008      	addeq	r0, #8
 801145e:	071a      	lsls	r2, r3, #28
 8011460:	bf04      	itt	eq
 8011462:	091b      	lsreq	r3, r3, #4
 8011464:	3004      	addeq	r0, #4
 8011466:	079a      	lsls	r2, r3, #30
 8011468:	bf04      	itt	eq
 801146a:	089b      	lsreq	r3, r3, #2
 801146c:	3002      	addeq	r0, #2
 801146e:	07da      	lsls	r2, r3, #31
 8011470:	d402      	bmi.n	8011478 <__lo0bits+0x4e>
 8011472:	085b      	lsrs	r3, r3, #1
 8011474:	d006      	beq.n	8011484 <__lo0bits+0x5a>
 8011476:	3001      	adds	r0, #1
 8011478:	600b      	str	r3, [r1, #0]
 801147a:	4770      	bx	lr
 801147c:	4610      	mov	r0, r2
 801147e:	e7e9      	b.n	8011454 <__lo0bits+0x2a>
 8011480:	2000      	movs	r0, #0
 8011482:	4770      	bx	lr
 8011484:	2020      	movs	r0, #32
 8011486:	4770      	bx	lr

08011488 <__i2b>:
 8011488:	b510      	push	{r4, lr}
 801148a:	460c      	mov	r4, r1
 801148c:	2101      	movs	r1, #1
 801148e:	f7ff ff27 	bl	80112e0 <_Balloc>
 8011492:	2201      	movs	r2, #1
 8011494:	6144      	str	r4, [r0, #20]
 8011496:	6102      	str	r2, [r0, #16]
 8011498:	bd10      	pop	{r4, pc}

0801149a <__multiply>:
 801149a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801149e:	4614      	mov	r4, r2
 80114a0:	690a      	ldr	r2, [r1, #16]
 80114a2:	6923      	ldr	r3, [r4, #16]
 80114a4:	429a      	cmp	r2, r3
 80114a6:	bfb8      	it	lt
 80114a8:	460b      	movlt	r3, r1
 80114aa:	4689      	mov	r9, r1
 80114ac:	bfbc      	itt	lt
 80114ae:	46a1      	movlt	r9, r4
 80114b0:	461c      	movlt	r4, r3
 80114b2:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80114b6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80114ba:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80114be:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80114c2:	eb07 060a 	add.w	r6, r7, sl
 80114c6:	429e      	cmp	r6, r3
 80114c8:	bfc8      	it	gt
 80114ca:	3101      	addgt	r1, #1
 80114cc:	f7ff ff08 	bl	80112e0 <_Balloc>
 80114d0:	f100 0514 	add.w	r5, r0, #20
 80114d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80114d8:	462b      	mov	r3, r5
 80114da:	2200      	movs	r2, #0
 80114dc:	4543      	cmp	r3, r8
 80114de:	d316      	bcc.n	801150e <__multiply+0x74>
 80114e0:	f104 0214 	add.w	r2, r4, #20
 80114e4:	f109 0114 	add.w	r1, r9, #20
 80114e8:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 80114ec:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80114f0:	9301      	str	r3, [sp, #4]
 80114f2:	9c01      	ldr	r4, [sp, #4]
 80114f4:	4294      	cmp	r4, r2
 80114f6:	4613      	mov	r3, r2
 80114f8:	d80c      	bhi.n	8011514 <__multiply+0x7a>
 80114fa:	2e00      	cmp	r6, #0
 80114fc:	dd03      	ble.n	8011506 <__multiply+0x6c>
 80114fe:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011502:	2b00      	cmp	r3, #0
 8011504:	d054      	beq.n	80115b0 <__multiply+0x116>
 8011506:	6106      	str	r6, [r0, #16]
 8011508:	b003      	add	sp, #12
 801150a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801150e:	f843 2b04 	str.w	r2, [r3], #4
 8011512:	e7e3      	b.n	80114dc <__multiply+0x42>
 8011514:	f8b3 a000 	ldrh.w	sl, [r3]
 8011518:	3204      	adds	r2, #4
 801151a:	f1ba 0f00 	cmp.w	sl, #0
 801151e:	d020      	beq.n	8011562 <__multiply+0xc8>
 8011520:	46ae      	mov	lr, r5
 8011522:	4689      	mov	r9, r1
 8011524:	f04f 0c00 	mov.w	ip, #0
 8011528:	f859 4b04 	ldr.w	r4, [r9], #4
 801152c:	f8be b000 	ldrh.w	fp, [lr]
 8011530:	b2a3      	uxth	r3, r4
 8011532:	fb0a b303 	mla	r3, sl, r3, fp
 8011536:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 801153a:	f8de 4000 	ldr.w	r4, [lr]
 801153e:	4463      	add	r3, ip
 8011540:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8011544:	fb0a c40b 	mla	r4, sl, fp, ip
 8011548:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801154c:	b29b      	uxth	r3, r3
 801154e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8011552:	454f      	cmp	r7, r9
 8011554:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8011558:	f84e 3b04 	str.w	r3, [lr], #4
 801155c:	d8e4      	bhi.n	8011528 <__multiply+0x8e>
 801155e:	f8ce c000 	str.w	ip, [lr]
 8011562:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8011566:	f1b9 0f00 	cmp.w	r9, #0
 801156a:	d01f      	beq.n	80115ac <__multiply+0x112>
 801156c:	682b      	ldr	r3, [r5, #0]
 801156e:	46ae      	mov	lr, r5
 8011570:	468c      	mov	ip, r1
 8011572:	f04f 0a00 	mov.w	sl, #0
 8011576:	f8bc 4000 	ldrh.w	r4, [ip]
 801157a:	f8be b002 	ldrh.w	fp, [lr, #2]
 801157e:	fb09 b404 	mla	r4, r9, r4, fp
 8011582:	44a2      	add	sl, r4
 8011584:	b29b      	uxth	r3, r3
 8011586:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 801158a:	f84e 3b04 	str.w	r3, [lr], #4
 801158e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011592:	f8be 4000 	ldrh.w	r4, [lr]
 8011596:	0c1b      	lsrs	r3, r3, #16
 8011598:	fb09 4303 	mla	r3, r9, r3, r4
 801159c:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 80115a0:	4567      	cmp	r7, ip
 80115a2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80115a6:	d8e6      	bhi.n	8011576 <__multiply+0xdc>
 80115a8:	f8ce 3000 	str.w	r3, [lr]
 80115ac:	3504      	adds	r5, #4
 80115ae:	e7a0      	b.n	80114f2 <__multiply+0x58>
 80115b0:	3e01      	subs	r6, #1
 80115b2:	e7a2      	b.n	80114fa <__multiply+0x60>

080115b4 <__pow5mult>:
 80115b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80115b8:	4615      	mov	r5, r2
 80115ba:	f012 0203 	ands.w	r2, r2, #3
 80115be:	4606      	mov	r6, r0
 80115c0:	460f      	mov	r7, r1
 80115c2:	d007      	beq.n	80115d4 <__pow5mult+0x20>
 80115c4:	3a01      	subs	r2, #1
 80115c6:	4c21      	ldr	r4, [pc, #132]	; (801164c <__pow5mult+0x98>)
 80115c8:	2300      	movs	r3, #0
 80115ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80115ce:	f7ff fed2 	bl	8011376 <__multadd>
 80115d2:	4607      	mov	r7, r0
 80115d4:	10ad      	asrs	r5, r5, #2
 80115d6:	d035      	beq.n	8011644 <__pow5mult+0x90>
 80115d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80115da:	b93c      	cbnz	r4, 80115ec <__pow5mult+0x38>
 80115dc:	2010      	movs	r0, #16
 80115de:	f7ff fe77 	bl	80112d0 <malloc>
 80115e2:	6270      	str	r0, [r6, #36]	; 0x24
 80115e4:	6044      	str	r4, [r0, #4]
 80115e6:	6084      	str	r4, [r0, #8]
 80115e8:	6004      	str	r4, [r0, #0]
 80115ea:	60c4      	str	r4, [r0, #12]
 80115ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80115f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80115f4:	b94c      	cbnz	r4, 801160a <__pow5mult+0x56>
 80115f6:	f240 2171 	movw	r1, #625	; 0x271
 80115fa:	4630      	mov	r0, r6
 80115fc:	f7ff ff44 	bl	8011488 <__i2b>
 8011600:	2300      	movs	r3, #0
 8011602:	f8c8 0008 	str.w	r0, [r8, #8]
 8011606:	4604      	mov	r4, r0
 8011608:	6003      	str	r3, [r0, #0]
 801160a:	f04f 0800 	mov.w	r8, #0
 801160e:	07eb      	lsls	r3, r5, #31
 8011610:	d50a      	bpl.n	8011628 <__pow5mult+0x74>
 8011612:	4639      	mov	r1, r7
 8011614:	4622      	mov	r2, r4
 8011616:	4630      	mov	r0, r6
 8011618:	f7ff ff3f 	bl	801149a <__multiply>
 801161c:	4639      	mov	r1, r7
 801161e:	4681      	mov	r9, r0
 8011620:	4630      	mov	r0, r6
 8011622:	f7ff fe91 	bl	8011348 <_Bfree>
 8011626:	464f      	mov	r7, r9
 8011628:	106d      	asrs	r5, r5, #1
 801162a:	d00b      	beq.n	8011644 <__pow5mult+0x90>
 801162c:	6820      	ldr	r0, [r4, #0]
 801162e:	b938      	cbnz	r0, 8011640 <__pow5mult+0x8c>
 8011630:	4622      	mov	r2, r4
 8011632:	4621      	mov	r1, r4
 8011634:	4630      	mov	r0, r6
 8011636:	f7ff ff30 	bl	801149a <__multiply>
 801163a:	6020      	str	r0, [r4, #0]
 801163c:	f8c0 8000 	str.w	r8, [r0]
 8011640:	4604      	mov	r4, r0
 8011642:	e7e4      	b.n	801160e <__pow5mult+0x5a>
 8011644:	4638      	mov	r0, r7
 8011646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801164a:	bf00      	nop
 801164c:	080148b8 	.word	0x080148b8

08011650 <__lshift>:
 8011650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011654:	460c      	mov	r4, r1
 8011656:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801165a:	6923      	ldr	r3, [r4, #16]
 801165c:	6849      	ldr	r1, [r1, #4]
 801165e:	eb0a 0903 	add.w	r9, sl, r3
 8011662:	68a3      	ldr	r3, [r4, #8]
 8011664:	4607      	mov	r7, r0
 8011666:	4616      	mov	r6, r2
 8011668:	f109 0501 	add.w	r5, r9, #1
 801166c:	42ab      	cmp	r3, r5
 801166e:	db31      	blt.n	80116d4 <__lshift+0x84>
 8011670:	4638      	mov	r0, r7
 8011672:	f7ff fe35 	bl	80112e0 <_Balloc>
 8011676:	2200      	movs	r2, #0
 8011678:	4680      	mov	r8, r0
 801167a:	f100 0314 	add.w	r3, r0, #20
 801167e:	4611      	mov	r1, r2
 8011680:	4552      	cmp	r2, sl
 8011682:	db2a      	blt.n	80116da <__lshift+0x8a>
 8011684:	6920      	ldr	r0, [r4, #16]
 8011686:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801168a:	f104 0114 	add.w	r1, r4, #20
 801168e:	f016 021f 	ands.w	r2, r6, #31
 8011692:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8011696:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 801169a:	d022      	beq.n	80116e2 <__lshift+0x92>
 801169c:	f1c2 0c20 	rsb	ip, r2, #32
 80116a0:	2000      	movs	r0, #0
 80116a2:	680e      	ldr	r6, [r1, #0]
 80116a4:	4096      	lsls	r6, r2
 80116a6:	4330      	orrs	r0, r6
 80116a8:	f843 0b04 	str.w	r0, [r3], #4
 80116ac:	f851 0b04 	ldr.w	r0, [r1], #4
 80116b0:	458e      	cmp	lr, r1
 80116b2:	fa20 f00c 	lsr.w	r0, r0, ip
 80116b6:	d8f4      	bhi.n	80116a2 <__lshift+0x52>
 80116b8:	6018      	str	r0, [r3, #0]
 80116ba:	b108      	cbz	r0, 80116c0 <__lshift+0x70>
 80116bc:	f109 0502 	add.w	r5, r9, #2
 80116c0:	3d01      	subs	r5, #1
 80116c2:	4638      	mov	r0, r7
 80116c4:	f8c8 5010 	str.w	r5, [r8, #16]
 80116c8:	4621      	mov	r1, r4
 80116ca:	f7ff fe3d 	bl	8011348 <_Bfree>
 80116ce:	4640      	mov	r0, r8
 80116d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116d4:	3101      	adds	r1, #1
 80116d6:	005b      	lsls	r3, r3, #1
 80116d8:	e7c8      	b.n	801166c <__lshift+0x1c>
 80116da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80116de:	3201      	adds	r2, #1
 80116e0:	e7ce      	b.n	8011680 <__lshift+0x30>
 80116e2:	3b04      	subs	r3, #4
 80116e4:	f851 2b04 	ldr.w	r2, [r1], #4
 80116e8:	f843 2f04 	str.w	r2, [r3, #4]!
 80116ec:	458e      	cmp	lr, r1
 80116ee:	d8f9      	bhi.n	80116e4 <__lshift+0x94>
 80116f0:	e7e6      	b.n	80116c0 <__lshift+0x70>

080116f2 <__mcmp>:
 80116f2:	6903      	ldr	r3, [r0, #16]
 80116f4:	690a      	ldr	r2, [r1, #16]
 80116f6:	1a9b      	subs	r3, r3, r2
 80116f8:	b530      	push	{r4, r5, lr}
 80116fa:	d10c      	bne.n	8011716 <__mcmp+0x24>
 80116fc:	0092      	lsls	r2, r2, #2
 80116fe:	3014      	adds	r0, #20
 8011700:	3114      	adds	r1, #20
 8011702:	1884      	adds	r4, r0, r2
 8011704:	4411      	add	r1, r2
 8011706:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801170a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801170e:	4295      	cmp	r5, r2
 8011710:	d003      	beq.n	801171a <__mcmp+0x28>
 8011712:	d305      	bcc.n	8011720 <__mcmp+0x2e>
 8011714:	2301      	movs	r3, #1
 8011716:	4618      	mov	r0, r3
 8011718:	bd30      	pop	{r4, r5, pc}
 801171a:	42a0      	cmp	r0, r4
 801171c:	d3f3      	bcc.n	8011706 <__mcmp+0x14>
 801171e:	e7fa      	b.n	8011716 <__mcmp+0x24>
 8011720:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011724:	e7f7      	b.n	8011716 <__mcmp+0x24>

08011726 <__mdiff>:
 8011726:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801172a:	460d      	mov	r5, r1
 801172c:	4607      	mov	r7, r0
 801172e:	4611      	mov	r1, r2
 8011730:	4628      	mov	r0, r5
 8011732:	4614      	mov	r4, r2
 8011734:	f7ff ffdd 	bl	80116f2 <__mcmp>
 8011738:	1e06      	subs	r6, r0, #0
 801173a:	d108      	bne.n	801174e <__mdiff+0x28>
 801173c:	4631      	mov	r1, r6
 801173e:	4638      	mov	r0, r7
 8011740:	f7ff fdce 	bl	80112e0 <_Balloc>
 8011744:	2301      	movs	r3, #1
 8011746:	6103      	str	r3, [r0, #16]
 8011748:	6146      	str	r6, [r0, #20]
 801174a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801174e:	bfa4      	itt	ge
 8011750:	4623      	movge	r3, r4
 8011752:	462c      	movge	r4, r5
 8011754:	4638      	mov	r0, r7
 8011756:	6861      	ldr	r1, [r4, #4]
 8011758:	bfa6      	itte	ge
 801175a:	461d      	movge	r5, r3
 801175c:	2600      	movge	r6, #0
 801175e:	2601      	movlt	r6, #1
 8011760:	f7ff fdbe 	bl	80112e0 <_Balloc>
 8011764:	692b      	ldr	r3, [r5, #16]
 8011766:	60c6      	str	r6, [r0, #12]
 8011768:	6926      	ldr	r6, [r4, #16]
 801176a:	f105 0914 	add.w	r9, r5, #20
 801176e:	f104 0214 	add.w	r2, r4, #20
 8011772:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8011776:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801177a:	f100 0514 	add.w	r5, r0, #20
 801177e:	f04f 0c00 	mov.w	ip, #0
 8011782:	f852 ab04 	ldr.w	sl, [r2], #4
 8011786:	f859 4b04 	ldr.w	r4, [r9], #4
 801178a:	fa1c f18a 	uxtah	r1, ip, sl
 801178e:	b2a3      	uxth	r3, r4
 8011790:	1ac9      	subs	r1, r1, r3
 8011792:	0c23      	lsrs	r3, r4, #16
 8011794:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8011798:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801179c:	b289      	uxth	r1, r1
 801179e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80117a2:	45c8      	cmp	r8, r9
 80117a4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80117a8:	4696      	mov	lr, r2
 80117aa:	f845 3b04 	str.w	r3, [r5], #4
 80117ae:	d8e8      	bhi.n	8011782 <__mdiff+0x5c>
 80117b0:	45be      	cmp	lr, r7
 80117b2:	d305      	bcc.n	80117c0 <__mdiff+0x9a>
 80117b4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80117b8:	b18b      	cbz	r3, 80117de <__mdiff+0xb8>
 80117ba:	6106      	str	r6, [r0, #16]
 80117bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117c0:	f85e 1b04 	ldr.w	r1, [lr], #4
 80117c4:	fa1c f381 	uxtah	r3, ip, r1
 80117c8:	141a      	asrs	r2, r3, #16
 80117ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80117ce:	b29b      	uxth	r3, r3
 80117d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80117d4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80117d8:	f845 3b04 	str.w	r3, [r5], #4
 80117dc:	e7e8      	b.n	80117b0 <__mdiff+0x8a>
 80117de:	3e01      	subs	r6, #1
 80117e0:	e7e8      	b.n	80117b4 <__mdiff+0x8e>

080117e2 <__d2b>:
 80117e2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80117e6:	460e      	mov	r6, r1
 80117e8:	2101      	movs	r1, #1
 80117ea:	ec59 8b10 	vmov	r8, r9, d0
 80117ee:	4615      	mov	r5, r2
 80117f0:	f7ff fd76 	bl	80112e0 <_Balloc>
 80117f4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80117f8:	4607      	mov	r7, r0
 80117fa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80117fe:	bb34      	cbnz	r4, 801184e <__d2b+0x6c>
 8011800:	9301      	str	r3, [sp, #4]
 8011802:	f1b8 0f00 	cmp.w	r8, #0
 8011806:	d027      	beq.n	8011858 <__d2b+0x76>
 8011808:	a802      	add	r0, sp, #8
 801180a:	f840 8d08 	str.w	r8, [r0, #-8]!
 801180e:	f7ff fe0c 	bl	801142a <__lo0bits>
 8011812:	9900      	ldr	r1, [sp, #0]
 8011814:	b1f0      	cbz	r0, 8011854 <__d2b+0x72>
 8011816:	9a01      	ldr	r2, [sp, #4]
 8011818:	f1c0 0320 	rsb	r3, r0, #32
 801181c:	fa02 f303 	lsl.w	r3, r2, r3
 8011820:	430b      	orrs	r3, r1
 8011822:	40c2      	lsrs	r2, r0
 8011824:	617b      	str	r3, [r7, #20]
 8011826:	9201      	str	r2, [sp, #4]
 8011828:	9b01      	ldr	r3, [sp, #4]
 801182a:	61bb      	str	r3, [r7, #24]
 801182c:	2b00      	cmp	r3, #0
 801182e:	bf14      	ite	ne
 8011830:	2102      	movne	r1, #2
 8011832:	2101      	moveq	r1, #1
 8011834:	6139      	str	r1, [r7, #16]
 8011836:	b1c4      	cbz	r4, 801186a <__d2b+0x88>
 8011838:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801183c:	4404      	add	r4, r0
 801183e:	6034      	str	r4, [r6, #0]
 8011840:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011844:	6028      	str	r0, [r5, #0]
 8011846:	4638      	mov	r0, r7
 8011848:	b003      	add	sp, #12
 801184a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801184e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011852:	e7d5      	b.n	8011800 <__d2b+0x1e>
 8011854:	6179      	str	r1, [r7, #20]
 8011856:	e7e7      	b.n	8011828 <__d2b+0x46>
 8011858:	a801      	add	r0, sp, #4
 801185a:	f7ff fde6 	bl	801142a <__lo0bits>
 801185e:	9b01      	ldr	r3, [sp, #4]
 8011860:	617b      	str	r3, [r7, #20]
 8011862:	2101      	movs	r1, #1
 8011864:	6139      	str	r1, [r7, #16]
 8011866:	3020      	adds	r0, #32
 8011868:	e7e5      	b.n	8011836 <__d2b+0x54>
 801186a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801186e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011872:	6030      	str	r0, [r6, #0]
 8011874:	6918      	ldr	r0, [r3, #16]
 8011876:	f7ff fdb9 	bl	80113ec <__hi0bits>
 801187a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801187e:	e7e1      	b.n	8011844 <__d2b+0x62>

08011880 <__ssprint_r>:
 8011880:	6893      	ldr	r3, [r2, #8]
 8011882:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011886:	4681      	mov	r9, r0
 8011888:	460c      	mov	r4, r1
 801188a:	4617      	mov	r7, r2
 801188c:	2b00      	cmp	r3, #0
 801188e:	d060      	beq.n	8011952 <__ssprint_r+0xd2>
 8011890:	f04f 0b00 	mov.w	fp, #0
 8011894:	f8d2 a000 	ldr.w	sl, [r2]
 8011898:	465e      	mov	r6, fp
 801189a:	b356      	cbz	r6, 80118f2 <__ssprint_r+0x72>
 801189c:	68a3      	ldr	r3, [r4, #8]
 801189e:	429e      	cmp	r6, r3
 80118a0:	d344      	bcc.n	801192c <__ssprint_r+0xac>
 80118a2:	89a2      	ldrh	r2, [r4, #12]
 80118a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80118a8:	d03e      	beq.n	8011928 <__ssprint_r+0xa8>
 80118aa:	6825      	ldr	r5, [r4, #0]
 80118ac:	6921      	ldr	r1, [r4, #16]
 80118ae:	eba5 0801 	sub.w	r8, r5, r1
 80118b2:	6965      	ldr	r5, [r4, #20]
 80118b4:	2302      	movs	r3, #2
 80118b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80118ba:	fb95 f5f3 	sdiv	r5, r5, r3
 80118be:	f108 0301 	add.w	r3, r8, #1
 80118c2:	4433      	add	r3, r6
 80118c4:	429d      	cmp	r5, r3
 80118c6:	bf38      	it	cc
 80118c8:	461d      	movcc	r5, r3
 80118ca:	0553      	lsls	r3, r2, #21
 80118cc:	d546      	bpl.n	801195c <__ssprint_r+0xdc>
 80118ce:	4629      	mov	r1, r5
 80118d0:	4648      	mov	r0, r9
 80118d2:	f7fd fb1f 	bl	800ef14 <_malloc_r>
 80118d6:	b998      	cbnz	r0, 8011900 <__ssprint_r+0x80>
 80118d8:	230c      	movs	r3, #12
 80118da:	f8c9 3000 	str.w	r3, [r9]
 80118de:	89a3      	ldrh	r3, [r4, #12]
 80118e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80118e4:	81a3      	strh	r3, [r4, #12]
 80118e6:	2300      	movs	r3, #0
 80118e8:	60bb      	str	r3, [r7, #8]
 80118ea:	607b      	str	r3, [r7, #4]
 80118ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80118f0:	e031      	b.n	8011956 <__ssprint_r+0xd6>
 80118f2:	f8da b000 	ldr.w	fp, [sl]
 80118f6:	f8da 6004 	ldr.w	r6, [sl, #4]
 80118fa:	f10a 0a08 	add.w	sl, sl, #8
 80118fe:	e7cc      	b.n	801189a <__ssprint_r+0x1a>
 8011900:	4642      	mov	r2, r8
 8011902:	6921      	ldr	r1, [r4, #16]
 8011904:	9001      	str	r0, [sp, #4]
 8011906:	f7fd fd13 	bl	800f330 <memcpy>
 801190a:	89a2      	ldrh	r2, [r4, #12]
 801190c:	9b01      	ldr	r3, [sp, #4]
 801190e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8011912:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8011916:	81a2      	strh	r2, [r4, #12]
 8011918:	6123      	str	r3, [r4, #16]
 801191a:	6165      	str	r5, [r4, #20]
 801191c:	4443      	add	r3, r8
 801191e:	eba5 0508 	sub.w	r5, r5, r8
 8011922:	6023      	str	r3, [r4, #0]
 8011924:	60a5      	str	r5, [r4, #8]
 8011926:	4633      	mov	r3, r6
 8011928:	429e      	cmp	r6, r3
 801192a:	d200      	bcs.n	801192e <__ssprint_r+0xae>
 801192c:	4633      	mov	r3, r6
 801192e:	461a      	mov	r2, r3
 8011930:	4659      	mov	r1, fp
 8011932:	6820      	ldr	r0, [r4, #0]
 8011934:	9301      	str	r3, [sp, #4]
 8011936:	f000 f82f 	bl	8011998 <memmove>
 801193a:	68a2      	ldr	r2, [r4, #8]
 801193c:	9b01      	ldr	r3, [sp, #4]
 801193e:	1ad2      	subs	r2, r2, r3
 8011940:	60a2      	str	r2, [r4, #8]
 8011942:	6822      	ldr	r2, [r4, #0]
 8011944:	4413      	add	r3, r2
 8011946:	6023      	str	r3, [r4, #0]
 8011948:	68bb      	ldr	r3, [r7, #8]
 801194a:	1b9e      	subs	r6, r3, r6
 801194c:	60be      	str	r6, [r7, #8]
 801194e:	2e00      	cmp	r6, #0
 8011950:	d1cf      	bne.n	80118f2 <__ssprint_r+0x72>
 8011952:	2000      	movs	r0, #0
 8011954:	6078      	str	r0, [r7, #4]
 8011956:	b003      	add	sp, #12
 8011958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801195c:	462a      	mov	r2, r5
 801195e:	4648      	mov	r0, r9
 8011960:	f000 f834 	bl	80119cc <_realloc_r>
 8011964:	4603      	mov	r3, r0
 8011966:	2800      	cmp	r0, #0
 8011968:	d1d6      	bne.n	8011918 <__ssprint_r+0x98>
 801196a:	6921      	ldr	r1, [r4, #16]
 801196c:	4648      	mov	r0, r9
 801196e:	f7ff fbe3 	bl	8011138 <_free_r>
 8011972:	e7b1      	b.n	80118d8 <__ssprint_r+0x58>

08011974 <__ascii_mbtowc>:
 8011974:	b082      	sub	sp, #8
 8011976:	b901      	cbnz	r1, 801197a <__ascii_mbtowc+0x6>
 8011978:	a901      	add	r1, sp, #4
 801197a:	b142      	cbz	r2, 801198e <__ascii_mbtowc+0x1a>
 801197c:	b14b      	cbz	r3, 8011992 <__ascii_mbtowc+0x1e>
 801197e:	7813      	ldrb	r3, [r2, #0]
 8011980:	600b      	str	r3, [r1, #0]
 8011982:	7812      	ldrb	r2, [r2, #0]
 8011984:	1c10      	adds	r0, r2, #0
 8011986:	bf18      	it	ne
 8011988:	2001      	movne	r0, #1
 801198a:	b002      	add	sp, #8
 801198c:	4770      	bx	lr
 801198e:	4610      	mov	r0, r2
 8011990:	e7fb      	b.n	801198a <__ascii_mbtowc+0x16>
 8011992:	f06f 0001 	mvn.w	r0, #1
 8011996:	e7f8      	b.n	801198a <__ascii_mbtowc+0x16>

08011998 <memmove>:
 8011998:	4288      	cmp	r0, r1
 801199a:	b510      	push	{r4, lr}
 801199c:	eb01 0302 	add.w	r3, r1, r2
 80119a0:	d803      	bhi.n	80119aa <memmove+0x12>
 80119a2:	1e42      	subs	r2, r0, #1
 80119a4:	4299      	cmp	r1, r3
 80119a6:	d10c      	bne.n	80119c2 <memmove+0x2a>
 80119a8:	bd10      	pop	{r4, pc}
 80119aa:	4298      	cmp	r0, r3
 80119ac:	d2f9      	bcs.n	80119a2 <memmove+0xa>
 80119ae:	1881      	adds	r1, r0, r2
 80119b0:	1ad2      	subs	r2, r2, r3
 80119b2:	42d3      	cmn	r3, r2
 80119b4:	d100      	bne.n	80119b8 <memmove+0x20>
 80119b6:	bd10      	pop	{r4, pc}
 80119b8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80119bc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80119c0:	e7f7      	b.n	80119b2 <memmove+0x1a>
 80119c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80119c6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80119ca:	e7eb      	b.n	80119a4 <memmove+0xc>

080119cc <_realloc_r>:
 80119cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119d0:	4682      	mov	sl, r0
 80119d2:	460c      	mov	r4, r1
 80119d4:	b929      	cbnz	r1, 80119e2 <_realloc_r+0x16>
 80119d6:	4611      	mov	r1, r2
 80119d8:	b003      	add	sp, #12
 80119da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119de:	f7fd ba99 	b.w	800ef14 <_malloc_r>
 80119e2:	9201      	str	r2, [sp, #4]
 80119e4:	f7fd fcb8 	bl	800f358 <__malloc_lock>
 80119e8:	9a01      	ldr	r2, [sp, #4]
 80119ea:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80119ee:	f102 080b 	add.w	r8, r2, #11
 80119f2:	f1b8 0f16 	cmp.w	r8, #22
 80119f6:	f1a4 0908 	sub.w	r9, r4, #8
 80119fa:	f025 0603 	bic.w	r6, r5, #3
 80119fe:	d90a      	bls.n	8011a16 <_realloc_r+0x4a>
 8011a00:	f038 0807 	bics.w	r8, r8, #7
 8011a04:	d509      	bpl.n	8011a1a <_realloc_r+0x4e>
 8011a06:	230c      	movs	r3, #12
 8011a08:	f8ca 3000 	str.w	r3, [sl]
 8011a0c:	2700      	movs	r7, #0
 8011a0e:	4638      	mov	r0, r7
 8011a10:	b003      	add	sp, #12
 8011a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a16:	f04f 0810 	mov.w	r8, #16
 8011a1a:	4590      	cmp	r8, r2
 8011a1c:	d3f3      	bcc.n	8011a06 <_realloc_r+0x3a>
 8011a1e:	45b0      	cmp	r8, r6
 8011a20:	f340 8145 	ble.w	8011cae <_realloc_r+0x2e2>
 8011a24:	4ba8      	ldr	r3, [pc, #672]	; (8011cc8 <_realloc_r+0x2fc>)
 8011a26:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8011a2a:	eb09 0106 	add.w	r1, r9, r6
 8011a2e:	4571      	cmp	r1, lr
 8011a30:	469b      	mov	fp, r3
 8011a32:	684b      	ldr	r3, [r1, #4]
 8011a34:	d005      	beq.n	8011a42 <_realloc_r+0x76>
 8011a36:	f023 0001 	bic.w	r0, r3, #1
 8011a3a:	4408      	add	r0, r1
 8011a3c:	6840      	ldr	r0, [r0, #4]
 8011a3e:	07c7      	lsls	r7, r0, #31
 8011a40:	d447      	bmi.n	8011ad2 <_realloc_r+0x106>
 8011a42:	f023 0303 	bic.w	r3, r3, #3
 8011a46:	4571      	cmp	r1, lr
 8011a48:	eb06 0703 	add.w	r7, r6, r3
 8011a4c:	d119      	bne.n	8011a82 <_realloc_r+0xb6>
 8011a4e:	f108 0010 	add.w	r0, r8, #16
 8011a52:	4287      	cmp	r7, r0
 8011a54:	db3f      	blt.n	8011ad6 <_realloc_r+0x10a>
 8011a56:	eb09 0308 	add.w	r3, r9, r8
 8011a5a:	eba7 0708 	sub.w	r7, r7, r8
 8011a5e:	f047 0701 	orr.w	r7, r7, #1
 8011a62:	f8cb 3008 	str.w	r3, [fp, #8]
 8011a66:	605f      	str	r7, [r3, #4]
 8011a68:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8011a6c:	f003 0301 	and.w	r3, r3, #1
 8011a70:	ea43 0308 	orr.w	r3, r3, r8
 8011a74:	f844 3c04 	str.w	r3, [r4, #-4]
 8011a78:	4650      	mov	r0, sl
 8011a7a:	f7fd fc73 	bl	800f364 <__malloc_unlock>
 8011a7e:	4627      	mov	r7, r4
 8011a80:	e7c5      	b.n	8011a0e <_realloc_r+0x42>
 8011a82:	45b8      	cmp	r8, r7
 8011a84:	dc27      	bgt.n	8011ad6 <_realloc_r+0x10a>
 8011a86:	68cb      	ldr	r3, [r1, #12]
 8011a88:	688a      	ldr	r2, [r1, #8]
 8011a8a:	60d3      	str	r3, [r2, #12]
 8011a8c:	609a      	str	r2, [r3, #8]
 8011a8e:	eba7 0008 	sub.w	r0, r7, r8
 8011a92:	280f      	cmp	r0, #15
 8011a94:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8011a98:	eb09 0207 	add.w	r2, r9, r7
 8011a9c:	f240 8109 	bls.w	8011cb2 <_realloc_r+0x2e6>
 8011aa0:	eb09 0108 	add.w	r1, r9, r8
 8011aa4:	f003 0301 	and.w	r3, r3, #1
 8011aa8:	ea43 0308 	orr.w	r3, r3, r8
 8011aac:	f040 0001 	orr.w	r0, r0, #1
 8011ab0:	f8c9 3004 	str.w	r3, [r9, #4]
 8011ab4:	6048      	str	r0, [r1, #4]
 8011ab6:	6853      	ldr	r3, [r2, #4]
 8011ab8:	f043 0301 	orr.w	r3, r3, #1
 8011abc:	6053      	str	r3, [r2, #4]
 8011abe:	3108      	adds	r1, #8
 8011ac0:	4650      	mov	r0, sl
 8011ac2:	f7ff fb39 	bl	8011138 <_free_r>
 8011ac6:	4650      	mov	r0, sl
 8011ac8:	f7fd fc4c 	bl	800f364 <__malloc_unlock>
 8011acc:	f109 0708 	add.w	r7, r9, #8
 8011ad0:	e79d      	b.n	8011a0e <_realloc_r+0x42>
 8011ad2:	2300      	movs	r3, #0
 8011ad4:	4619      	mov	r1, r3
 8011ad6:	07e8      	lsls	r0, r5, #31
 8011ad8:	f100 8084 	bmi.w	8011be4 <_realloc_r+0x218>
 8011adc:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8011ae0:	eba9 0505 	sub.w	r5, r9, r5
 8011ae4:	6868      	ldr	r0, [r5, #4]
 8011ae6:	f020 0003 	bic.w	r0, r0, #3
 8011aea:	4430      	add	r0, r6
 8011aec:	2900      	cmp	r1, #0
 8011aee:	d076      	beq.n	8011bde <_realloc_r+0x212>
 8011af0:	4571      	cmp	r1, lr
 8011af2:	d150      	bne.n	8011b96 <_realloc_r+0x1ca>
 8011af4:	4403      	add	r3, r0
 8011af6:	f108 0110 	add.w	r1, r8, #16
 8011afa:	428b      	cmp	r3, r1
 8011afc:	db6f      	blt.n	8011bde <_realloc_r+0x212>
 8011afe:	462f      	mov	r7, r5
 8011b00:	68ea      	ldr	r2, [r5, #12]
 8011b02:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8011b06:	60ca      	str	r2, [r1, #12]
 8011b08:	6091      	str	r1, [r2, #8]
 8011b0a:	1f32      	subs	r2, r6, #4
 8011b0c:	2a24      	cmp	r2, #36	; 0x24
 8011b0e:	d83b      	bhi.n	8011b88 <_realloc_r+0x1bc>
 8011b10:	2a13      	cmp	r2, #19
 8011b12:	d936      	bls.n	8011b82 <_realloc_r+0x1b6>
 8011b14:	6821      	ldr	r1, [r4, #0]
 8011b16:	60a9      	str	r1, [r5, #8]
 8011b18:	6861      	ldr	r1, [r4, #4]
 8011b1a:	60e9      	str	r1, [r5, #12]
 8011b1c:	2a1b      	cmp	r2, #27
 8011b1e:	d81c      	bhi.n	8011b5a <_realloc_r+0x18e>
 8011b20:	f105 0210 	add.w	r2, r5, #16
 8011b24:	f104 0108 	add.w	r1, r4, #8
 8011b28:	6808      	ldr	r0, [r1, #0]
 8011b2a:	6010      	str	r0, [r2, #0]
 8011b2c:	6848      	ldr	r0, [r1, #4]
 8011b2e:	6050      	str	r0, [r2, #4]
 8011b30:	6889      	ldr	r1, [r1, #8]
 8011b32:	6091      	str	r1, [r2, #8]
 8011b34:	eb05 0208 	add.w	r2, r5, r8
 8011b38:	eba3 0308 	sub.w	r3, r3, r8
 8011b3c:	f043 0301 	orr.w	r3, r3, #1
 8011b40:	f8cb 2008 	str.w	r2, [fp, #8]
 8011b44:	6053      	str	r3, [r2, #4]
 8011b46:	686b      	ldr	r3, [r5, #4]
 8011b48:	f003 0301 	and.w	r3, r3, #1
 8011b4c:	ea43 0308 	orr.w	r3, r3, r8
 8011b50:	606b      	str	r3, [r5, #4]
 8011b52:	4650      	mov	r0, sl
 8011b54:	f7fd fc06 	bl	800f364 <__malloc_unlock>
 8011b58:	e759      	b.n	8011a0e <_realloc_r+0x42>
 8011b5a:	68a1      	ldr	r1, [r4, #8]
 8011b5c:	6129      	str	r1, [r5, #16]
 8011b5e:	68e1      	ldr	r1, [r4, #12]
 8011b60:	6169      	str	r1, [r5, #20]
 8011b62:	2a24      	cmp	r2, #36	; 0x24
 8011b64:	bf01      	itttt	eq
 8011b66:	6922      	ldreq	r2, [r4, #16]
 8011b68:	61aa      	streq	r2, [r5, #24]
 8011b6a:	6960      	ldreq	r0, [r4, #20]
 8011b6c:	61e8      	streq	r0, [r5, #28]
 8011b6e:	bf19      	ittee	ne
 8011b70:	f105 0218 	addne.w	r2, r5, #24
 8011b74:	f104 0110 	addne.w	r1, r4, #16
 8011b78:	f105 0220 	addeq.w	r2, r5, #32
 8011b7c:	f104 0118 	addeq.w	r1, r4, #24
 8011b80:	e7d2      	b.n	8011b28 <_realloc_r+0x15c>
 8011b82:	463a      	mov	r2, r7
 8011b84:	4621      	mov	r1, r4
 8011b86:	e7cf      	b.n	8011b28 <_realloc_r+0x15c>
 8011b88:	4621      	mov	r1, r4
 8011b8a:	4638      	mov	r0, r7
 8011b8c:	9301      	str	r3, [sp, #4]
 8011b8e:	f7ff ff03 	bl	8011998 <memmove>
 8011b92:	9b01      	ldr	r3, [sp, #4]
 8011b94:	e7ce      	b.n	8011b34 <_realloc_r+0x168>
 8011b96:	18c7      	adds	r7, r0, r3
 8011b98:	45b8      	cmp	r8, r7
 8011b9a:	dc20      	bgt.n	8011bde <_realloc_r+0x212>
 8011b9c:	68cb      	ldr	r3, [r1, #12]
 8011b9e:	688a      	ldr	r2, [r1, #8]
 8011ba0:	60d3      	str	r3, [r2, #12]
 8011ba2:	609a      	str	r2, [r3, #8]
 8011ba4:	4628      	mov	r0, r5
 8011ba6:	68eb      	ldr	r3, [r5, #12]
 8011ba8:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8011bac:	60d3      	str	r3, [r2, #12]
 8011bae:	609a      	str	r2, [r3, #8]
 8011bb0:	1f32      	subs	r2, r6, #4
 8011bb2:	2a24      	cmp	r2, #36	; 0x24
 8011bb4:	d842      	bhi.n	8011c3c <_realloc_r+0x270>
 8011bb6:	2a13      	cmp	r2, #19
 8011bb8:	d93e      	bls.n	8011c38 <_realloc_r+0x26c>
 8011bba:	6823      	ldr	r3, [r4, #0]
 8011bbc:	60ab      	str	r3, [r5, #8]
 8011bbe:	6863      	ldr	r3, [r4, #4]
 8011bc0:	60eb      	str	r3, [r5, #12]
 8011bc2:	2a1b      	cmp	r2, #27
 8011bc4:	d824      	bhi.n	8011c10 <_realloc_r+0x244>
 8011bc6:	f105 0010 	add.w	r0, r5, #16
 8011bca:	f104 0308 	add.w	r3, r4, #8
 8011bce:	681a      	ldr	r2, [r3, #0]
 8011bd0:	6002      	str	r2, [r0, #0]
 8011bd2:	685a      	ldr	r2, [r3, #4]
 8011bd4:	6042      	str	r2, [r0, #4]
 8011bd6:	689b      	ldr	r3, [r3, #8]
 8011bd8:	6083      	str	r3, [r0, #8]
 8011bda:	46a9      	mov	r9, r5
 8011bdc:	e757      	b.n	8011a8e <_realloc_r+0xc2>
 8011bde:	4580      	cmp	r8, r0
 8011be0:	4607      	mov	r7, r0
 8011be2:	dddf      	ble.n	8011ba4 <_realloc_r+0x1d8>
 8011be4:	4611      	mov	r1, r2
 8011be6:	4650      	mov	r0, sl
 8011be8:	f7fd f994 	bl	800ef14 <_malloc_r>
 8011bec:	4607      	mov	r7, r0
 8011bee:	2800      	cmp	r0, #0
 8011bf0:	d0af      	beq.n	8011b52 <_realloc_r+0x186>
 8011bf2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8011bf6:	f023 0301 	bic.w	r3, r3, #1
 8011bfa:	f1a0 0208 	sub.w	r2, r0, #8
 8011bfe:	444b      	add	r3, r9
 8011c00:	429a      	cmp	r2, r3
 8011c02:	d11f      	bne.n	8011c44 <_realloc_r+0x278>
 8011c04:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8011c08:	f027 0703 	bic.w	r7, r7, #3
 8011c0c:	4437      	add	r7, r6
 8011c0e:	e73e      	b.n	8011a8e <_realloc_r+0xc2>
 8011c10:	68a3      	ldr	r3, [r4, #8]
 8011c12:	612b      	str	r3, [r5, #16]
 8011c14:	68e3      	ldr	r3, [r4, #12]
 8011c16:	616b      	str	r3, [r5, #20]
 8011c18:	2a24      	cmp	r2, #36	; 0x24
 8011c1a:	bf01      	itttt	eq
 8011c1c:	6923      	ldreq	r3, [r4, #16]
 8011c1e:	61ab      	streq	r3, [r5, #24]
 8011c20:	6962      	ldreq	r2, [r4, #20]
 8011c22:	61ea      	streq	r2, [r5, #28]
 8011c24:	bf19      	ittee	ne
 8011c26:	f105 0018 	addne.w	r0, r5, #24
 8011c2a:	f104 0310 	addne.w	r3, r4, #16
 8011c2e:	f105 0020 	addeq.w	r0, r5, #32
 8011c32:	f104 0318 	addeq.w	r3, r4, #24
 8011c36:	e7ca      	b.n	8011bce <_realloc_r+0x202>
 8011c38:	4623      	mov	r3, r4
 8011c3a:	e7c8      	b.n	8011bce <_realloc_r+0x202>
 8011c3c:	4621      	mov	r1, r4
 8011c3e:	f7ff feab 	bl	8011998 <memmove>
 8011c42:	e7ca      	b.n	8011bda <_realloc_r+0x20e>
 8011c44:	1f32      	subs	r2, r6, #4
 8011c46:	2a24      	cmp	r2, #36	; 0x24
 8011c48:	d82d      	bhi.n	8011ca6 <_realloc_r+0x2da>
 8011c4a:	2a13      	cmp	r2, #19
 8011c4c:	d928      	bls.n	8011ca0 <_realloc_r+0x2d4>
 8011c4e:	6823      	ldr	r3, [r4, #0]
 8011c50:	6003      	str	r3, [r0, #0]
 8011c52:	6863      	ldr	r3, [r4, #4]
 8011c54:	6043      	str	r3, [r0, #4]
 8011c56:	2a1b      	cmp	r2, #27
 8011c58:	d80e      	bhi.n	8011c78 <_realloc_r+0x2ac>
 8011c5a:	f100 0308 	add.w	r3, r0, #8
 8011c5e:	f104 0208 	add.w	r2, r4, #8
 8011c62:	6811      	ldr	r1, [r2, #0]
 8011c64:	6019      	str	r1, [r3, #0]
 8011c66:	6851      	ldr	r1, [r2, #4]
 8011c68:	6059      	str	r1, [r3, #4]
 8011c6a:	6892      	ldr	r2, [r2, #8]
 8011c6c:	609a      	str	r2, [r3, #8]
 8011c6e:	4621      	mov	r1, r4
 8011c70:	4650      	mov	r0, sl
 8011c72:	f7ff fa61 	bl	8011138 <_free_r>
 8011c76:	e76c      	b.n	8011b52 <_realloc_r+0x186>
 8011c78:	68a3      	ldr	r3, [r4, #8]
 8011c7a:	6083      	str	r3, [r0, #8]
 8011c7c:	68e3      	ldr	r3, [r4, #12]
 8011c7e:	60c3      	str	r3, [r0, #12]
 8011c80:	2a24      	cmp	r2, #36	; 0x24
 8011c82:	bf01      	itttt	eq
 8011c84:	6923      	ldreq	r3, [r4, #16]
 8011c86:	6103      	streq	r3, [r0, #16]
 8011c88:	6961      	ldreq	r1, [r4, #20]
 8011c8a:	6141      	streq	r1, [r0, #20]
 8011c8c:	bf19      	ittee	ne
 8011c8e:	f100 0310 	addne.w	r3, r0, #16
 8011c92:	f104 0210 	addne.w	r2, r4, #16
 8011c96:	f100 0318 	addeq.w	r3, r0, #24
 8011c9a:	f104 0218 	addeq.w	r2, r4, #24
 8011c9e:	e7e0      	b.n	8011c62 <_realloc_r+0x296>
 8011ca0:	4603      	mov	r3, r0
 8011ca2:	4622      	mov	r2, r4
 8011ca4:	e7dd      	b.n	8011c62 <_realloc_r+0x296>
 8011ca6:	4621      	mov	r1, r4
 8011ca8:	f7ff fe76 	bl	8011998 <memmove>
 8011cac:	e7df      	b.n	8011c6e <_realloc_r+0x2a2>
 8011cae:	4637      	mov	r7, r6
 8011cb0:	e6ed      	b.n	8011a8e <_realloc_r+0xc2>
 8011cb2:	f003 0301 	and.w	r3, r3, #1
 8011cb6:	431f      	orrs	r7, r3
 8011cb8:	f8c9 7004 	str.w	r7, [r9, #4]
 8011cbc:	6853      	ldr	r3, [r2, #4]
 8011cbe:	f043 0301 	orr.w	r3, r3, #1
 8011cc2:	6053      	str	r3, [r2, #4]
 8011cc4:	e6ff      	b.n	8011ac6 <_realloc_r+0xfa>
 8011cc6:	bf00      	nop
 8011cc8:	20000e24 	.word	0x20000e24

08011ccc <__ascii_wctomb>:
 8011ccc:	b149      	cbz	r1, 8011ce2 <__ascii_wctomb+0x16>
 8011cce:	2aff      	cmp	r2, #255	; 0xff
 8011cd0:	bf85      	ittet	hi
 8011cd2:	238a      	movhi	r3, #138	; 0x8a
 8011cd4:	6003      	strhi	r3, [r0, #0]
 8011cd6:	700a      	strbls	r2, [r1, #0]
 8011cd8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8011cdc:	bf98      	it	ls
 8011cde:	2001      	movls	r0, #1
 8011ce0:	4770      	bx	lr
 8011ce2:	4608      	mov	r0, r1
 8011ce4:	4770      	bx	lr
	...

08011ce8 <_init>:
 8011ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cea:	bf00      	nop
 8011cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011cee:	bc08      	pop	{r3}
 8011cf0:	469e      	mov	lr, r3
 8011cf2:	4770      	bx	lr

08011cf4 <_fini>:
 8011cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cf6:	bf00      	nop
 8011cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011cfa:	bc08      	pop	{r3}
 8011cfc:	469e      	mov	lr, r3
 8011cfe:	4770      	bx	lr
