
STM32L4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c960  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000bc228  0801caf0  0801caf0  0002caf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080d8d18  080d8d18  000e8d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080d8d20  080d8d20  000e8d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080d8d24  080d8d24  000e8d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00002324  20000000  080d8d28  000f0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000a2a8  20002324  080db04c  000f2324  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000c5cc  080db04c  000fc5cc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000f2324  2**0
                  CONTENTS, READONLY
 10 .debug_info   000f06cf  00000000  00000000  000f2354  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0001940f  00000000  00000000  001e2a23  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00035945  00000000  00000000  001fbe32  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00003dd8  00000000  00000000  00231778  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00005d98  00000000  00000000  00235550  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000334c3  00000000  00000000  0023b2e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0001358d  00000000  00000000  0026e7ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00281d38  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000bb38  00000000  00000000  00281db4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20002324 	.word	0x20002324
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801cad8 	.word	0x0801cad8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20002328 	.word	0x20002328
 80001cc:	0801cad8 	.word	0x0801cad8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bb4:	f000 b97a 	b.w	8000eac <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	468c      	mov	ip, r1
 8000bd6:	460d      	mov	r5, r1
 8000bd8:	4604      	mov	r4, r0
 8000bda:	9e08      	ldr	r6, [sp, #32]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d151      	bne.n	8000c84 <__udivmoddi4+0xb4>
 8000be0:	428a      	cmp	r2, r1
 8000be2:	4617      	mov	r7, r2
 8000be4:	d96d      	bls.n	8000cc2 <__udivmoddi4+0xf2>
 8000be6:	fab2 fe82 	clz	lr, r2
 8000bea:	f1be 0f00 	cmp.w	lr, #0
 8000bee:	d00b      	beq.n	8000c08 <__udivmoddi4+0x38>
 8000bf0:	f1ce 0c20 	rsb	ip, lr, #32
 8000bf4:	fa01 f50e 	lsl.w	r5, r1, lr
 8000bf8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000bfc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c00:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c04:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c08:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c0c:	0c25      	lsrs	r5, r4, #16
 8000c0e:	fbbc f8fa 	udiv	r8, ip, sl
 8000c12:	fa1f f987 	uxth.w	r9, r7
 8000c16:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c1a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c1e:	fb08 f309 	mul.w	r3, r8, r9
 8000c22:	42ab      	cmp	r3, r5
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x6c>
 8000c26:	19ed      	adds	r5, r5, r7
 8000c28:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000c2c:	f080 8123 	bcs.w	8000e76 <__udivmoddi4+0x2a6>
 8000c30:	42ab      	cmp	r3, r5
 8000c32:	f240 8120 	bls.w	8000e76 <__udivmoddi4+0x2a6>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	443d      	add	r5, r7
 8000c3c:	1aed      	subs	r5, r5, r3
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c44:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c48:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c4c:	fb00 f909 	mul.w	r9, r0, r9
 8000c50:	45a1      	cmp	r9, r4
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x98>
 8000c54:	19e4      	adds	r4, r4, r7
 8000c56:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c5a:	f080 810a 	bcs.w	8000e72 <__udivmoddi4+0x2a2>
 8000c5e:	45a1      	cmp	r9, r4
 8000c60:	f240 8107 	bls.w	8000e72 <__udivmoddi4+0x2a2>
 8000c64:	3802      	subs	r0, #2
 8000c66:	443c      	add	r4, r7
 8000c68:	eba4 0409 	sub.w	r4, r4, r9
 8000c6c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c70:	2100      	movs	r1, #0
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	d061      	beq.n	8000d3a <__udivmoddi4+0x16a>
 8000c76:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	6034      	str	r4, [r6, #0]
 8000c7e:	6073      	str	r3, [r6, #4]
 8000c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c84:	428b      	cmp	r3, r1
 8000c86:	d907      	bls.n	8000c98 <__udivmoddi4+0xc8>
 8000c88:	2e00      	cmp	r6, #0
 8000c8a:	d054      	beq.n	8000d36 <__udivmoddi4+0x166>
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000c92:	4608      	mov	r0, r1
 8000c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c98:	fab3 f183 	clz	r1, r3
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	f040 808e 	bne.w	8000dbe <__udivmoddi4+0x1ee>
 8000ca2:	42ab      	cmp	r3, r5
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xdc>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80fa 	bhi.w	8000ea0 <__udivmoddi4+0x2d0>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb65 0503 	sbc.w	r5, r5, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	46ac      	mov	ip, r5
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	d03f      	beq.n	8000d3a <__udivmoddi4+0x16a>
 8000cba:	e886 1010 	stmia.w	r6, {r4, ip}
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	b912      	cbnz	r2, 8000cca <__udivmoddi4+0xfa>
 8000cc4:	2701      	movs	r7, #1
 8000cc6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000cca:	fab7 fe87 	clz	lr, r7
 8000cce:	f1be 0f00 	cmp.w	lr, #0
 8000cd2:	d134      	bne.n	8000d3e <__udivmoddi4+0x16e>
 8000cd4:	1beb      	subs	r3, r5, r7
 8000cd6:	0c3a      	lsrs	r2, r7, #16
 8000cd8:	fa1f fc87 	uxth.w	ip, r7
 8000cdc:	2101      	movs	r1, #1
 8000cde:	fbb3 f8f2 	udiv	r8, r3, r2
 8000ce2:	0c25      	lsrs	r5, r4, #16
 8000ce4:	fb02 3318 	mls	r3, r2, r8, r3
 8000ce8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000cec:	fb0c f308 	mul.w	r3, ip, r8
 8000cf0:	42ab      	cmp	r3, r5
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x134>
 8000cf4:	19ed      	adds	r5, r5, r7
 8000cf6:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x132>
 8000cfc:	42ab      	cmp	r3, r5
 8000cfe:	f200 80d1 	bhi.w	8000ea4 <__udivmoddi4+0x2d4>
 8000d02:	4680      	mov	r8, r0
 8000d04:	1aed      	subs	r5, r5, r3
 8000d06:	b2a3      	uxth	r3, r4
 8000d08:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d0c:	fb02 5510 	mls	r5, r2, r0, r5
 8000d10:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d14:	fb0c fc00 	mul.w	ip, ip, r0
 8000d18:	45a4      	cmp	ip, r4
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x15c>
 8000d1c:	19e4      	adds	r4, r4, r7
 8000d1e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x15a>
 8000d24:	45a4      	cmp	ip, r4
 8000d26:	f200 80b8 	bhi.w	8000e9a <__udivmoddi4+0x2ca>
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	eba4 040c 	sub.w	r4, r4, ip
 8000d30:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d34:	e79d      	b.n	8000c72 <__udivmoddi4+0xa2>
 8000d36:	4631      	mov	r1, r6
 8000d38:	4630      	mov	r0, r6
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	f1ce 0420 	rsb	r4, lr, #32
 8000d42:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d46:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d4a:	fa20 f804 	lsr.w	r8, r0, r4
 8000d4e:	0c3a      	lsrs	r2, r7, #16
 8000d50:	fa25 f404 	lsr.w	r4, r5, r4
 8000d54:	ea48 0803 	orr.w	r8, r8, r3
 8000d58:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d5c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d60:	fb02 4411 	mls	r4, r2, r1, r4
 8000d64:	fa1f fc87 	uxth.w	ip, r7
 8000d68:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000d6c:	fb01 f30c 	mul.w	r3, r1, ip
 8000d70:	42ab      	cmp	r3, r5
 8000d72:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d76:	d909      	bls.n	8000d8c <__udivmoddi4+0x1bc>
 8000d78:	19ed      	adds	r5, r5, r7
 8000d7a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 8000d7e:	f080 808a 	bcs.w	8000e96 <__udivmoddi4+0x2c6>
 8000d82:	42ab      	cmp	r3, r5
 8000d84:	f240 8087 	bls.w	8000e96 <__udivmoddi4+0x2c6>
 8000d88:	3902      	subs	r1, #2
 8000d8a:	443d      	add	r5, r7
 8000d8c:	1aeb      	subs	r3, r5, r3
 8000d8e:	fa1f f588 	uxth.w	r5, r8
 8000d92:	fbb3 f0f2 	udiv	r0, r3, r2
 8000d96:	fb02 3310 	mls	r3, r2, r0, r3
 8000d9a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d9e:	fb00 f30c 	mul.w	r3, r0, ip
 8000da2:	42ab      	cmp	r3, r5
 8000da4:	d907      	bls.n	8000db6 <__udivmoddi4+0x1e6>
 8000da6:	19ed      	adds	r5, r5, r7
 8000da8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000dac:	d26f      	bcs.n	8000e8e <__udivmoddi4+0x2be>
 8000dae:	42ab      	cmp	r3, r5
 8000db0:	d96d      	bls.n	8000e8e <__udivmoddi4+0x2be>
 8000db2:	3802      	subs	r0, #2
 8000db4:	443d      	add	r5, r7
 8000db6:	1aeb      	subs	r3, r5, r3
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	e78f      	b.n	8000cde <__udivmoddi4+0x10e>
 8000dbe:	f1c1 0720 	rsb	r7, r1, #32
 8000dc2:	fa22 f807 	lsr.w	r8, r2, r7
 8000dc6:	408b      	lsls	r3, r1
 8000dc8:	fa05 f401 	lsl.w	r4, r5, r1
 8000dcc:	ea48 0303 	orr.w	r3, r8, r3
 8000dd0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000dd4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	ea4e 0e04 	orr.w	lr, lr, r4
 8000dde:	fbb5 f9fc 	udiv	r9, r5, ip
 8000de2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000de6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000dea:	fa1f f883 	uxth.w	r8, r3
 8000dee:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000df2:	fb09 f408 	mul.w	r4, r9, r8
 8000df6:	42ac      	cmp	r4, r5
 8000df8:	fa02 f201 	lsl.w	r2, r2, r1
 8000dfc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x244>
 8000e02:	18ed      	adds	r5, r5, r3
 8000e04:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e08:	d243      	bcs.n	8000e92 <__udivmoddi4+0x2c2>
 8000e0a:	42ac      	cmp	r4, r5
 8000e0c:	d941      	bls.n	8000e92 <__udivmoddi4+0x2c2>
 8000e0e:	f1a9 0902 	sub.w	r9, r9, #2
 8000e12:	441d      	add	r5, r3
 8000e14:	1b2d      	subs	r5, r5, r4
 8000e16:	fa1f fe8e 	uxth.w	lr, lr
 8000e1a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e1e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e22:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e26:	fb00 f808 	mul.w	r8, r0, r8
 8000e2a:	45a0      	cmp	r8, r4
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x26e>
 8000e2e:	18e4      	adds	r4, r4, r3
 8000e30:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000e34:	d229      	bcs.n	8000e8a <__udivmoddi4+0x2ba>
 8000e36:	45a0      	cmp	r8, r4
 8000e38:	d927      	bls.n	8000e8a <__udivmoddi4+0x2ba>
 8000e3a:	3802      	subs	r0, #2
 8000e3c:	441c      	add	r4, r3
 8000e3e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e42:	eba4 0408 	sub.w	r4, r4, r8
 8000e46:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4a:	454c      	cmp	r4, r9
 8000e4c:	46c6      	mov	lr, r8
 8000e4e:	464d      	mov	r5, r9
 8000e50:	d315      	bcc.n	8000e7e <__udivmoddi4+0x2ae>
 8000e52:	d012      	beq.n	8000e7a <__udivmoddi4+0x2aa>
 8000e54:	b156      	cbz	r6, 8000e6c <__udivmoddi4+0x29c>
 8000e56:	ebba 030e 	subs.w	r3, sl, lr
 8000e5a:	eb64 0405 	sbc.w	r4, r4, r5
 8000e5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e62:	40cb      	lsrs	r3, r1
 8000e64:	431f      	orrs	r7, r3
 8000e66:	40cc      	lsrs	r4, r1
 8000e68:	6037      	str	r7, [r6, #0]
 8000e6a:	6074      	str	r4, [r6, #4]
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	4618      	mov	r0, r3
 8000e74:	e6f8      	b.n	8000c68 <__udivmoddi4+0x98>
 8000e76:	4690      	mov	r8, r2
 8000e78:	e6e0      	b.n	8000c3c <__udivmoddi4+0x6c>
 8000e7a:	45c2      	cmp	sl, r8
 8000e7c:	d2ea      	bcs.n	8000e54 <__udivmoddi4+0x284>
 8000e7e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e82:	eb69 0503 	sbc.w	r5, r9, r3
 8000e86:	3801      	subs	r0, #1
 8000e88:	e7e4      	b.n	8000e54 <__udivmoddi4+0x284>
 8000e8a:	4628      	mov	r0, r5
 8000e8c:	e7d7      	b.n	8000e3e <__udivmoddi4+0x26e>
 8000e8e:	4640      	mov	r0, r8
 8000e90:	e791      	b.n	8000db6 <__udivmoddi4+0x1e6>
 8000e92:	4681      	mov	r9, r0
 8000e94:	e7be      	b.n	8000e14 <__udivmoddi4+0x244>
 8000e96:	4601      	mov	r1, r0
 8000e98:	e778      	b.n	8000d8c <__udivmoddi4+0x1bc>
 8000e9a:	3802      	subs	r0, #2
 8000e9c:	443c      	add	r4, r7
 8000e9e:	e745      	b.n	8000d2c <__udivmoddi4+0x15c>
 8000ea0:	4608      	mov	r0, r1
 8000ea2:	e708      	b.n	8000cb6 <__udivmoddi4+0xe6>
 8000ea4:	f1a8 0802 	sub.w	r8, r8, #2
 8000ea8:	443d      	add	r5, r7
 8000eaa:	e72b      	b.n	8000d04 <__udivmoddi4+0x134>

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <ST7735_write>:
uint16_t scr_width;
uint16_t scr_height;
uint8_t buf_tft[4096] = {0};

void ST7735_write(uint8_t data)
{
 8000eb0:	b507      	push	{r0, r1, r2, lr}
 8000eb2:	a902      	add	r1, sp, #8
	HAL_SPI_Transmit(&_SPI_PORT, (uint8_t *)&data, 1, HAL_MAX_DELAY);
 8000eb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
{
 8000eb8:	f801 0d01 	strb.w	r0, [r1, #-1]!
	HAL_SPI_Transmit(&_SPI_PORT, (uint8_t *)&data, 1, HAL_MAX_DELAY);
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	4803      	ldr	r0, [pc, #12]	; (8000ecc <ST7735_write+0x1c>)
 8000ec0:	f003 ff8d 	bl	8004dde <HAL_SPI_Transmit>
}
 8000ec4:	b003      	add	sp, #12
 8000ec6:	f85d fb04 	ldr.w	pc, [sp], #4
 8000eca:	bf00      	nop
 8000ecc:	2000b31c 	.word	0x2000b31c

08000ed0 <ST7735_cmd>:
	tmp[0] = color >> 8;
	tmp[1] = color;
	HAL_SPI_Transmit(&_SPI_PORT, (uint8_t *)&tmp[0], 2, HAL_MAX_DELAY);
}

void ST7735_cmd(uint8_t cmd) {
 8000ed0:	b510      	push	{r4, lr}
	A0_L();
 8000ed2:	2200      	movs	r2, #0
void ST7735_cmd(uint8_t cmd) {
 8000ed4:	4604      	mov	r4, r0
	A0_L();
 8000ed6:	2180      	movs	r1, #128	; 0x80
 8000ed8:	4803      	ldr	r0, [pc, #12]	; (8000ee8 <ST7735_cmd+0x18>)
 8000eda:	f002 f8a1 	bl	8003020 <HAL_GPIO_WritePin>
	ST7735_write(cmd);
 8000ede:	4620      	mov	r0, r4
}
 8000ee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ST7735_write(cmd);
 8000ee4:	f7ff bfe4 	b.w	8000eb0 <ST7735_write>
 8000ee8:	48000400 	.word	0x48000400

08000eec <ST7735_data>:

void ST7735_data(uint8_t data) {
 8000eec:	b510      	push	{r4, lr}
	A0_H();
 8000eee:	2201      	movs	r2, #1
void ST7735_data(uint8_t data) {
 8000ef0:	4604      	mov	r4, r0
	A0_H();
 8000ef2:	2180      	movs	r1, #128	; 0x80
 8000ef4:	4803      	ldr	r0, [pc, #12]	; (8000f04 <ST7735_data+0x18>)
 8000ef6:	f002 f893 	bl	8003020 <HAL_GPIO_WritePin>
	ST7735_write(data);
 8000efa:	4620      	mov	r0, r4
}
 8000efc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ST7735_write(data);
 8000f00:	f7ff bfd6 	b.w	8000eb0 <ST7735_write>
 8000f04:	48000400 	.word	0x48000400

08000f08 <ST7735_Orientation>:
	CS_H();

	ST7735_Orientation(scr_CCW);
}

void ST7735_Orientation(ScrOrientation_TypeDef orientation) {
 8000f08:	b510      	push	{r4, lr}
	CS_L();
 8000f0a:	2200      	movs	r2, #0
void ST7735_Orientation(ScrOrientation_TypeDef orientation) {
 8000f0c:	4604      	mov	r4, r0
	CS_L();
 8000f0e:	2120      	movs	r1, #32
 8000f10:	4815      	ldr	r0, [pc, #84]	; (8000f68 <ST7735_Orientation+0x60>)
 8000f12:	f002 f885 	bl	8003020 <HAL_GPIO_WritePin>
	ST7735_cmd(0x36); // Memory data access control:
 8000f16:	2036      	movs	r0, #54	; 0x36
 8000f18:	f7ff ffda 	bl	8000ed0 <ST7735_cmd>
	switch(orientation) {
 8000f1c:	2c02      	cmp	r4, #2
 8000f1e:	4a13      	ldr	r2, [pc, #76]	; (8000f6c <ST7735_Orientation+0x64>)
 8000f20:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <ST7735_Orientation+0x68>)
 8000f22:	d011      	beq.n	8000f48 <ST7735_Orientation+0x40>
 8000f24:	2c03      	cmp	r4, #3
 8000f26:	f04f 0180 	mov.w	r1, #128	; 0x80
 8000f2a:	d013      	beq.n	8000f54 <ST7735_Orientation+0x4c>
 8000f2c:	2c01      	cmp	r4, #1
 8000f2e:	d116      	bne.n	8000f5e <ST7735_Orientation+0x56>
	case scr_CW:
		scr_width  = TFT_H;
 8000f30:	20a0      	movs	r0, #160	; 0xa0
 8000f32:	8010      	strh	r0, [r2, #0]
		scr_height = TFT_W;
 8000f34:	8019      	strh	r1, [r3, #0]
		ST7735_data(0xc0); // X-Mirror,Y-Mirror: Bottom to top; Right to left; RGB
		break;
	default:
		scr_width  = TFT_W;
		scr_height = TFT_H;
		ST7735_data(0x00); // Normal: Top to Bottom; Left to Right; RGB
 8000f36:	f7ff ffd9 	bl	8000eec <ST7735_data>
		break;
	}
	CS_H();
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	2120      	movs	r1, #32
 8000f3e:	480a      	ldr	r0, [pc, #40]	; (8000f68 <ST7735_Orientation+0x60>)
}
 8000f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	CS_H();
 8000f44:	f002 b86c 	b.w	8003020 <HAL_GPIO_WritePin>
		scr_width  = TFT_H;
 8000f48:	21a0      	movs	r1, #160	; 0xa0
 8000f4a:	8011      	strh	r1, [r2, #0]
		scr_height = TFT_W;
 8000f4c:	2280      	movs	r2, #128	; 0x80
 8000f4e:	801a      	strh	r2, [r3, #0]
		ST7735_data(0x60); // X-Y Exchange,X-Mirror
 8000f50:	2060      	movs	r0, #96	; 0x60
 8000f52:	e7f0      	b.n	8000f36 <ST7735_Orientation+0x2e>
		scr_width  = TFT_W;
 8000f54:	8011      	strh	r1, [r2, #0]
		scr_height = TFT_H;
 8000f56:	22a0      	movs	r2, #160	; 0xa0
 8000f58:	801a      	strh	r2, [r3, #0]
		ST7735_data(0xc0); // X-Mirror,Y-Mirror: Bottom to top; Right to left; RGB
 8000f5a:	20c0      	movs	r0, #192	; 0xc0
 8000f5c:	e7eb      	b.n	8000f36 <ST7735_Orientation+0x2e>
		scr_width  = TFT_W;
 8000f5e:	8011      	strh	r1, [r2, #0]
		scr_height = TFT_H;
 8000f60:	22a0      	movs	r2, #160	; 0xa0
 8000f62:	801a      	strh	r2, [r3, #0]
		ST7735_data(0x00); // Normal: Top to Bottom; Left to Right; RGB
 8000f64:	2000      	movs	r0, #0
 8000f66:	e7e6      	b.n	8000f36 <ST7735_Orientation+0x2e>
 8000f68:	48000400 	.word	0x48000400
 8000f6c:	2000b020 	.word	0x2000b020
 8000f70:	2000b022 	.word	0x2000b022

08000f74 <ST7735_Init>:
void ST7735_Init(void) {
 8000f74:	b510      	push	{r4, lr}
	CS_H();
 8000f76:	4c45      	ldr	r4, [pc, #276]	; (800108c <ST7735_Init+0x118>)
 8000f78:	2201      	movs	r2, #1
 8000f7a:	4620      	mov	r0, r4
 8000f7c:	2120      	movs	r1, #32
 8000f7e:	f002 f84f 	bl	8003020 <HAL_GPIO_WritePin>
	RST_H();
 8000f82:	2201      	movs	r2, #1
 8000f84:	2140      	movs	r1, #64	; 0x40
 8000f86:	4620      	mov	r0, r4
 8000f88:	f002 f84a 	bl	8003020 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000f8c:	2005      	movs	r0, #5
 8000f8e:	f001 fadd 	bl	800254c <HAL_Delay>
	RST_L();
 8000f92:	2200      	movs	r2, #0
 8000f94:	2140      	movs	r1, #64	; 0x40
 8000f96:	4620      	mov	r0, r4
 8000f98:	f002 f842 	bl	8003020 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000f9c:	2005      	movs	r0, #5
 8000f9e:	f001 fad5 	bl	800254c <HAL_Delay>
	RST_H();
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	2140      	movs	r1, #64	; 0x40
 8000fa6:	4620      	mov	r0, r4
 8000fa8:	f002 f83a 	bl	8003020 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000fac:	2005      	movs	r0, #5
 8000fae:	f001 facd 	bl	800254c <HAL_Delay>
	CS_L();
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2120      	movs	r1, #32
 8000fb6:	4620      	mov	r0, r4
 8000fb8:	f002 f832 	bl	8003020 <HAL_GPIO_WritePin>
	ST7735_cmd(0x11); 	// Sleep out & booster on
 8000fbc:	2011      	movs	r0, #17
 8000fbe:	f7ff ff87 	bl	8000ed0 <ST7735_cmd>
	HAL_Delay(25); 		// Datasheet says what display wakes about 120ms (may be much faster actually)
 8000fc2:	2019      	movs	r0, #25
 8000fc4:	f001 fac2 	bl	800254c <HAL_Delay>
	ST7735_cmd(0xb1);   // In normal mode (full colors):
 8000fc8:	20b1      	movs	r0, #177	; 0xb1
 8000fca:	f7ff ff81 	bl	8000ed0 <ST7735_cmd>
	A0_H();
 8000fce:	2201      	movs	r2, #1
 8000fd0:	2180      	movs	r1, #128	; 0x80
 8000fd2:	4620      	mov	r0, r4
 8000fd4:	f002 f824 	bl	8003020 <HAL_GPIO_WritePin>
	ST7735_write(0x05); //   RTNA set 1-line period: RTNA2, RTNA0
 8000fd8:	2005      	movs	r0, #5
 8000fda:	f7ff ff69 	bl	8000eb0 <ST7735_write>
	ST7735_write(0x3c); //   Front porch: FPA5,FPA4,FPA3,FPA2
 8000fde:	203c      	movs	r0, #60	; 0x3c
 8000fe0:	f7ff ff66 	bl	8000eb0 <ST7735_write>
	ST7735_write(0x3c); //   Back porch: BPA5,BPA4,BPA3,BPA2
 8000fe4:	203c      	movs	r0, #60	; 0x3c
 8000fe6:	f7ff ff63 	bl	8000eb0 <ST7735_write>
	ST7735_cmd(0xb2);   // In idle mode (8-colors):
 8000fea:	20b2      	movs	r0, #178	; 0xb2
 8000fec:	f7ff ff70 	bl	8000ed0 <ST7735_cmd>
	A0_H();
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	2180      	movs	r1, #128	; 0x80
 8000ff4:	4620      	mov	r0, r4
 8000ff6:	f002 f813 	bl	8003020 <HAL_GPIO_WritePin>
	ST7735_write(0x05); //   RTNB set 1-line period: RTNAB, RTNB0
 8000ffa:	2005      	movs	r0, #5
 8000ffc:	f7ff ff58 	bl	8000eb0 <ST7735_write>
	ST7735_write(0x3c); //   Front porch: FPB5,FPB4,FPB3,FPB2
 8001000:	203c      	movs	r0, #60	; 0x3c
 8001002:	f7ff ff55 	bl	8000eb0 <ST7735_write>
	ST7735_write(0x3c); //   Back porch: BPB5,BPB4,BPB3,BPB2
 8001006:	203c      	movs	r0, #60	; 0x3c
 8001008:	f7ff ff52 	bl	8000eb0 <ST7735_write>
	ST7735_cmd(0xb3);   // In partial mode + full colors:
 800100c:	20b3      	movs	r0, #179	; 0xb3
 800100e:	f7ff ff5f 	bl	8000ed0 <ST7735_cmd>
	A0_H();
 8001012:	2201      	movs	r2, #1
 8001014:	2180      	movs	r1, #128	; 0x80
 8001016:	4620      	mov	r0, r4
 8001018:	f002 f802 	bl	8003020 <HAL_GPIO_WritePin>
	ST7735_write(0x05); //   RTNC set 1-line period: RTNC2, RTNC0
 800101c:	2005      	movs	r0, #5
 800101e:	f7ff ff47 	bl	8000eb0 <ST7735_write>
	ST7735_write(0x3c); //   Front porch: FPC5,FPC4,FPC3,FPC2
 8001022:	203c      	movs	r0, #60	; 0x3c
 8001024:	f7ff ff44 	bl	8000eb0 <ST7735_write>
	ST7735_write(0x3c); //   Back porch: BPC5,BPC4,BPC3,BPC2
 8001028:	203c      	movs	r0, #60	; 0x3c
 800102a:	f7ff ff41 	bl	8000eb0 <ST7735_write>
	ST7735_write(0x05); //   RTND set 1-line period: RTND2, RTND0
 800102e:	2005      	movs	r0, #5
 8001030:	f7ff ff3e 	bl	8000eb0 <ST7735_write>
	ST7735_write(0x3c); //   Front porch: FPD5,FPD4,FPD3,FPD2
 8001034:	203c      	movs	r0, #60	; 0x3c
 8001036:	f7ff ff3b 	bl	8000eb0 <ST7735_write>
	ST7735_write(0x3c); //   Back porch: BPD5,BPD4,BPD3,BPD2
 800103a:	203c      	movs	r0, #60	; 0x3c
 800103c:	f7ff ff38 	bl	8000eb0 <ST7735_write>
	ST7735_cmd(0xB4);   // Display dot inversion control:
 8001040:	20b4      	movs	r0, #180	; 0xb4
 8001042:	f7ff ff45 	bl	8000ed0 <ST7735_cmd>
	ST7735_data(0x03);  //   NLB,NLC
 8001046:	2003      	movs	r0, #3
 8001048:	f7ff ff50 	bl	8000eec <ST7735_data>
	ST7735_cmd(0x3a);   // Interface pixel format
 800104c:	203a      	movs	r0, #58	; 0x3a
 800104e:	f7ff ff3f 	bl	8000ed0 <ST7735_cmd>
	ST7735_data(0x05);  // 16-bit/pixel RGB 5-6-5 (65k colors)
 8001052:	2005      	movs	r0, #5
 8001054:	f7ff ff4a 	bl	8000eec <ST7735_data>
	ST7735_cmd(0x20);   // Display inversion off
 8001058:	2020      	movs	r0, #32
 800105a:	f7ff ff39 	bl	8000ed0 <ST7735_cmd>
	ST7735_cmd(0x13);   // Partial mode off
 800105e:	2013      	movs	r0, #19
 8001060:	f7ff ff36 	bl	8000ed0 <ST7735_cmd>
	ST7735_cmd(0x26);   // Gamma curve set:
 8001064:	2026      	movs	r0, #38	; 0x26
 8001066:	f7ff ff33 	bl	8000ed0 <ST7735_cmd>
	ST7735_data(0x01);  //   Gamma curve 1 (G2.2) or (G1.0)
 800106a:	2001      	movs	r0, #1
 800106c:	f7ff ff3e 	bl	8000eec <ST7735_data>
	ST7735_cmd(0x29);   // Display on
 8001070:	2029      	movs	r0, #41	; 0x29
 8001072:	f7ff ff2d 	bl	8000ed0 <ST7735_cmd>
	CS_H();
 8001076:	4620      	mov	r0, r4
 8001078:	2201      	movs	r2, #1
 800107a:	2120      	movs	r1, #32
 800107c:	f001 ffd0 	bl	8003020 <HAL_GPIO_WritePin>
	ST7735_Orientation(scr_CCW);
 8001080:	2002      	movs	r0, #2
}
 8001082:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ST7735_Orientation(scr_CCW);
 8001086:	f7ff bf3f 	b.w	8000f08 <ST7735_Orientation>
 800108a:	bf00      	nop
 800108c:	48000400 	.word	0x48000400

08001090 <ST7735_AddrSet>:

void ST7735_AddrSet(uint16_t XS, uint16_t YS, uint16_t XE, uint16_t YE) {
 8001090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ST7735_cmd(0x2a); // Column address set
	A0_H();
 8001094:	4e19      	ldr	r6, [pc, #100]	; (80010fc <ST7735_AddrSet+0x6c>)
void ST7735_AddrSet(uint16_t XS, uint16_t YS, uint16_t XE, uint16_t YE) {
 8001096:	4680      	mov	r8, r0
	ST7735_cmd(0x2a); // Column address set
 8001098:	202a      	movs	r0, #42	; 0x2a
void ST7735_AddrSet(uint16_t XS, uint16_t YS, uint16_t XE, uint16_t YE) {
 800109a:	461c      	mov	r4, r3
 800109c:	460d      	mov	r5, r1
 800109e:	4617      	mov	r7, r2
	ST7735_cmd(0x2a); // Column address set
 80010a0:	f7ff ff16 	bl	8000ed0 <ST7735_cmd>
	A0_H();
 80010a4:	2201      	movs	r2, #1
 80010a6:	2180      	movs	r1, #128	; 0x80
 80010a8:	4630      	mov	r0, r6
 80010aa:	f001 ffb9 	bl	8003020 <HAL_GPIO_WritePin>
	ST7735_write(XS >> 8);
 80010ae:	ea4f 2018 	mov.w	r0, r8, lsr #8
 80010b2:	f7ff fefd 	bl	8000eb0 <ST7735_write>
	ST7735_write(XS);
 80010b6:	fa5f f088 	uxtb.w	r0, r8
 80010ba:	f7ff fef9 	bl	8000eb0 <ST7735_write>
	ST7735_write(XE >> 8);
 80010be:	0a38      	lsrs	r0, r7, #8
 80010c0:	f7ff fef6 	bl	8000eb0 <ST7735_write>
	ST7735_write(XE);
 80010c4:	b2f8      	uxtb	r0, r7
 80010c6:	f7ff fef3 	bl	8000eb0 <ST7735_write>

	ST7735_cmd(0x2b); // Row address set
 80010ca:	202b      	movs	r0, #43	; 0x2b
 80010cc:	f7ff ff00 	bl	8000ed0 <ST7735_cmd>
	A0_H();
 80010d0:	2201      	movs	r2, #1
 80010d2:	2180      	movs	r1, #128	; 0x80
 80010d4:	4630      	mov	r0, r6
 80010d6:	f001 ffa3 	bl	8003020 <HAL_GPIO_WritePin>
	ST7735_write(YS >> 8);
 80010da:	0a28      	lsrs	r0, r5, #8
 80010dc:	f7ff fee8 	bl	8000eb0 <ST7735_write>
	ST7735_write(YS);
 80010e0:	b2e8      	uxtb	r0, r5
 80010e2:	f7ff fee5 	bl	8000eb0 <ST7735_write>
	ST7735_write(YE >> 8);
 80010e6:	0a20      	lsrs	r0, r4, #8
 80010e8:	f7ff fee2 	bl	8000eb0 <ST7735_write>
	ST7735_write(YE);
 80010ec:	b2e0      	uxtb	r0, r4
 80010ee:	f7ff fedf 	bl	8000eb0 <ST7735_write>

	ST7735_cmd(0x2c); // Memory write
 80010f2:	202c      	movs	r0, #44	; 0x2c
}
 80010f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ST7735_cmd(0x2c); // Memory write
 80010f8:	f7ff beea 	b.w	8000ed0 <ST7735_cmd>
 80010fc:	48000400 	.word	0x48000400

08001100 <ST7735_Clear>:

void ST7735_Clear(uint16_t color) {
 8001100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	CH = color >> 8;
	CL = (uint8_t)color;

	CS_L();
	ST7735_AddrSet(0, 0, scr_width - 1, scr_height - 1);
 8001104:	4c17      	ldr	r4, [pc, #92]	; (8001164 <ST7735_Clear+0x64>)
 8001106:	4d18      	ldr	r5, [pc, #96]	; (8001168 <ST7735_Clear+0x68>)
	CS_L();
 8001108:	2200      	movs	r2, #0
 800110a:	2120      	movs	r1, #32
	CH = color >> 8;
 800110c:	ea4f 2810 	mov.w	r8, r0, lsr #8
	CL = (uint8_t)color;
 8001110:	b2c6      	uxtb	r6, r0
	CS_L();
 8001112:	4816      	ldr	r0, [pc, #88]	; (800116c <ST7735_Clear+0x6c>)
 8001114:	f001 ff84 	bl	8003020 <HAL_GPIO_WritePin>
	ST7735_AddrSet(0, 0, scr_width - 1, scr_height - 1);
 8001118:	8823      	ldrh	r3, [r4, #0]
 800111a:	882a      	ldrh	r2, [r5, #0]
 800111c:	2100      	movs	r1, #0
 800111e:	3b01      	subs	r3, #1
 8001120:	3a01      	subs	r2, #1
 8001122:	4608      	mov	r0, r1
 8001124:	b29b      	uxth	r3, r3
 8001126:	b292      	uxth	r2, r2
 8001128:	f7ff ffb2 	bl	8001090 <ST7735_AddrSet>
	A0_H();
 800112c:	2201      	movs	r2, #1
 800112e:	2180      	movs	r1, #128	; 0x80
 8001130:	480e      	ldr	r0, [pc, #56]	; (800116c <ST7735_Clear+0x6c>)
 8001132:	f001 ff75 	bl	8003020 <HAL_GPIO_WritePin>
	for (i = 0; i < scr_width * scr_height; i++) {
 8001136:	2700      	movs	r7, #0
 8001138:	8829      	ldrh	r1, [r5, #0]
 800113a:	8823      	ldrh	r3, [r4, #0]
 800113c:	b2ba      	uxth	r2, r7
 800113e:	434b      	muls	r3, r1
 8001140:	429a      	cmp	r2, r3
 8001142:	f107 0701 	add.w	r7, r7, #1
 8001146:	db06      	blt.n	8001156 <ST7735_Clear+0x56>
		ST7735_write(CH);
		ST7735_write(CL);
	}
	CS_H();
 8001148:	2201      	movs	r2, #1
 800114a:	2120      	movs	r1, #32
 800114c:	4807      	ldr	r0, [pc, #28]	; (800116c <ST7735_Clear+0x6c>)
}
 800114e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	CS_H();
 8001152:	f001 bf65 	b.w	8003020 <HAL_GPIO_WritePin>
		ST7735_write(CH);
 8001156:	4640      	mov	r0, r8
 8001158:	f7ff feaa 	bl	8000eb0 <ST7735_write>
		ST7735_write(CL);
 800115c:	4630      	mov	r0, r6
 800115e:	f7ff fea7 	bl	8000eb0 <ST7735_write>
 8001162:	e7e9      	b.n	8001138 <ST7735_Clear+0x38>
 8001164:	2000b022 	.word	0x2000b022
 8001168:	2000b020 	.word	0x2000b020
 800116c:	48000400 	.word	0x48000400

08001170 <ST7735_Flush_3>:

void ST7735_Flush_3(lv_disp_drv_t * disp_drv, const lv_area_t * area, lv_color_t * color_p)
{
 8001170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t size;
	uint16_t teste = 0;

    size = ( ((area->x2 - area->x1) + 1)  * ((area->y2 - area->y1) + 1) );
 8001172:	f9b1 3000 	ldrsh.w	r3, [r1]
 8001176:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
{
 800117a:	4617      	mov	r7, r2
    size = ( ((area->x2 - area->x1) + 1)  * ((area->y2 - area->y1) + 1) );
 800117c:	1ae4      	subs	r4, r4, r3
 800117e:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8001182:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8001186:	1a9b      	subs	r3, r3, r2
 8001188:	3301      	adds	r3, #1
{
 800118a:	460e      	mov	r6, r1

	CS_L();
 800118c:	2200      	movs	r2, #0
 800118e:	2120      	movs	r1, #32
{
 8001190:	4605      	mov	r5, r0
    size = ( ((area->x2 - area->x1) + 1)  * ((area->y2 - area->y1) + 1) );
 8001192:	3401      	adds	r4, #1
	CS_L();
 8001194:	482c      	ldr	r0, [pc, #176]	; (8001248 <ST7735_Flush_3+0xd8>)
    size = ( ((area->x2 - area->x1) + 1)  * ((area->y2 - area->y1) + 1) );
 8001196:	fb14 f403 	smulbb	r4, r4, r3
	CS_L();
 800119a:	f001 ff41 	bl	8003020 <HAL_GPIO_WritePin>
    ST7735_cmd(0x2a); // Column address set
 800119e:	202a      	movs	r0, #42	; 0x2a
 80011a0:	f7ff fe96 	bl	8000ed0 <ST7735_cmd>
	A0_H();
 80011a4:	2201      	movs	r2, #1
 80011a6:	2180      	movs	r1, #128	; 0x80
 80011a8:	4827      	ldr	r0, [pc, #156]	; (8001248 <ST7735_Flush_3+0xd8>)
 80011aa:	f001 ff39 	bl	8003020 <HAL_GPIO_WritePin>
	ST7735_write(area->x1 >> 8);
 80011ae:	7870      	ldrb	r0, [r6, #1]
 80011b0:	f7ff fe7e 	bl	8000eb0 <ST7735_write>
	ST7735_write(area->x1);
 80011b4:	7830      	ldrb	r0, [r6, #0]
 80011b6:	f7ff fe7b 	bl	8000eb0 <ST7735_write>
	ST7735_write(area->x2 >> 8);
 80011ba:	7970      	ldrb	r0, [r6, #5]
 80011bc:	f7ff fe78 	bl	8000eb0 <ST7735_write>
	ST7735_write(area->x2);
 80011c0:	7930      	ldrb	r0, [r6, #4]
 80011c2:	f7ff fe75 	bl	8000eb0 <ST7735_write>

	ST7735_cmd(0x2b); // Row address set
 80011c6:	202b      	movs	r0, #43	; 0x2b
 80011c8:	f7ff fe82 	bl	8000ed0 <ST7735_cmd>
	A0_H();
 80011cc:	2201      	movs	r2, #1
 80011ce:	2180      	movs	r1, #128	; 0x80
 80011d0:	481d      	ldr	r0, [pc, #116]	; (8001248 <ST7735_Flush_3+0xd8>)
 80011d2:	f001 ff25 	bl	8003020 <HAL_GPIO_WritePin>
	ST7735_write(area->y1 >> 8);
 80011d6:	78f0      	ldrb	r0, [r6, #3]
 80011d8:	f7ff fe6a 	bl	8000eb0 <ST7735_write>
	ST7735_write(area->y1);
 80011dc:	78b0      	ldrb	r0, [r6, #2]
 80011de:	f7ff fe67 	bl	8000eb0 <ST7735_write>
	ST7735_write(area->y2 >> 8);
 80011e2:	79f0      	ldrb	r0, [r6, #7]
 80011e4:	f7ff fe64 	bl	8000eb0 <ST7735_write>
	ST7735_write(area->y2);
 80011e8:	79b0      	ldrb	r0, [r6, #6]
 80011ea:	f7ff fe61 	bl	8000eb0 <ST7735_write>

	ST7735_cmd(0x2c); // Memory write
 80011ee:	202c      	movs	r0, #44	; 0x2c
 80011f0:	f7ff fe6e 	bl	8000ed0 <ST7735_cmd>
	A0_H();
 80011f4:	2201      	movs	r2, #1
 80011f6:	4814      	ldr	r0, [pc, #80]	; (8001248 <ST7735_Flush_3+0xd8>)
 80011f8:	2180      	movs	r1, #128	; 0x80
 80011fa:	f001 ff11 	bl	8003020 <HAL_GPIO_WritePin>
//		HAL_SPI_Transmit(&_SPI_PORT, (uint8_t *)&tmp[0], 2, HAL_MAX_DELAY);
//		color_p++;
//		teste++;
//	}
	for(uint16_t x = 0; x <= size-1; x++) {
		buf_tft[(x*2) + 0] = color_p->full >> 8;
 80011fe:	4813      	ldr	r0, [pc, #76]	; (800124c <ST7735_Flush_3+0xdc>)
    size = ( ((area->x2 - area->x1) + 1)  * ((area->y2 - area->y1) + 1) );
 8001200:	b2a4      	uxth	r4, r4
	for(uint16_t x = 0; x <= size-1; x++) {
 8001202:	2200      	movs	r2, #0
 8001204:	b293      	uxth	r3, r2
 8001206:	429c      	cmp	r4, r3
 8001208:	f102 0201 	add.w	r2, r2, #1
 800120c:	dc12      	bgt.n	8001234 <ST7735_Flush_3+0xc4>
		buf_tft[(x*2) + 1] = color_p->full;
		color_p++;
		teste++;
	}
	HAL_SPI_Transmit(&_SPI_PORT, (uint8_t *)&buf_tft[0], (size-1)*2, HAL_MAX_DELAY);
 800120e:	1e62      	subs	r2, r4, #1
 8001210:	0052      	lsls	r2, r2, #1
 8001212:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001216:	b292      	uxth	r2, r2
 8001218:	490c      	ldr	r1, [pc, #48]	; (800124c <ST7735_Flush_3+0xdc>)
 800121a:	480d      	ldr	r0, [pc, #52]	; (8001250 <ST7735_Flush_3+0xe0>)
 800121c:	f003 fddf 	bl	8004dde <HAL_SPI_Transmit>

	CS_H();
 8001220:	4809      	ldr	r0, [pc, #36]	; (8001248 <ST7735_Flush_3+0xd8>)
 8001222:	2201      	movs	r2, #1
 8001224:	2120      	movs	r1, #32
 8001226:	f001 fefb 	bl	8003020 <HAL_GPIO_WritePin>

//	sprintf(buffer, "ST7735-Flush3 X1: %d X2: %d Y1: %d Y2: %d Size: %d Teste: %d\n", area->x1, area->x2, area->y1, area->y2, size, teste);
//    LV_LOG_ERROR(buffer);
//    logI(buffer);

	lv_disp_flush_ready(disp_drv);                  /* Tell you are ready with the flushing*/
 800122a:	4628      	mov	r0, r5
}
 800122c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lv_disp_flush_ready(disp_drv);                  /* Tell you are ready with the flushing*/
 8001230:	f012 ba68 	b.w	8013704 <lv_disp_flush_ready>
		buf_tft[(x*2) + 0] = color_p->full >> 8;
 8001234:	8839      	ldrh	r1, [r7, #0]
 8001236:	0a09      	lsrs	r1, r1, #8
 8001238:	f800 1013 	strb.w	r1, [r0, r3, lsl #1]
		buf_tft[(x*2) + 1] = color_p->full;
 800123c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001240:	f837 1b02 	ldrh.w	r1, [r7], #2
 8001244:	7059      	strb	r1, [r3, #1]
 8001246:	e7dd      	b.n	8001204 <ST7735_Flush_3+0x94>
 8001248:	48000400 	.word	0x48000400
 800124c:	20002340 	.word	0x20002340
 8001250:	2000b31c 	.word	0x2000b31c

08001254 <ClearLog>:

/** Clear the duration parameter and the click count parameter of the button.
 */
void ClearLog(uint8_t key, uint8_t index)
{
	if(index < 8)
 8001254:	2907      	cmp	r1, #7
 8001256:	d807      	bhi.n	8001268 <ClearLog+0x14>
	{
		bt[key]->click[index] = bt[key]->duration[index] = 0;
 8001258:	4b04      	ldr	r3, [pc, #16]	; (800126c <ClearLog+0x18>)
 800125a:	2260      	movs	r2, #96	; 0x60
 800125c:	fb02 3000 	mla	r0, r2, r0, r3
 8001260:	4401      	add	r1, r0
 8001262:	2300      	movs	r3, #0
 8001264:	728b      	strb	r3, [r1, #10]
 8001266:	708b      	strb	r3, [r1, #2]
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	2000b03c 	.word	0x2000b03c

08001270 <KeyboardInit>:
{
 8001270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001274:	2500      	movs	r5, #0
 8001276:	4c0d      	ldr	r4, [pc, #52]	; (80012ac <KeyboardInit+0x3c>)
 8001278:	4680      	mov	r8, r0
		bt[x]->old_state = bt[x]->new_state = 0;
 800127a:	462e      	mov	r6, r5
 800127c:	fa5f f985 	uxtb.w	r9, r5
 8001280:	7066      	strb	r6, [r4, #1]
 8001282:	7026      	strb	r6, [r4, #0]
		bt[x]->mask = mask;
 8001284:	f884 8012 	strb.w	r8, [r4, #18]
		bt[x]->mode = 0;
 8001288:	74e6      	strb	r6, [r4, #19]
		bt[x]->flag = 0;
 800128a:	6166      	str	r6, [r4, #20]
		for(i = 0; i < 8; i++) {
 800128c:	2700      	movs	r7, #0
			ClearLog(x, i);
 800128e:	b2f9      	uxtb	r1, r7
 8001290:	4648      	mov	r0, r9
		for(i = 0; i < 8; i++) {
 8001292:	3701      	adds	r7, #1
			ClearLog(x, i);
 8001294:	f7ff ffde 	bl	8001254 <ClearLog>
		for(i = 0; i < 8; i++) {
 8001298:	2f08      	cmp	r7, #8
 800129a:	d1f8      	bne.n	800128e <KeyboardInit+0x1e>
 800129c:	3501      	adds	r5, #1
	for(x = 0; x < 6; x++) {
 800129e:	2d06      	cmp	r5, #6
 80012a0:	f104 0460 	add.w	r4, r4, #96	; 0x60
 80012a4:	d1ea      	bne.n	800127c <KeyboardInit+0xc>
}
 80012a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80012aa:	bf00      	nop
 80012ac:	2000b03c 	.word	0x2000b03c

080012b0 <KeyboardSetMode>:
	}
}

void KeyboardSetMode(uint8_t key, uint8_t mode, bool flag)
{
 80012b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i;

	// clear data
	bt[key]->old_state = bt[key]->new_state = 0;
 80012b2:	4e0c      	ldr	r6, [pc, #48]	; (80012e4 <KeyboardSetMode+0x34>)
{
 80012b4:	460f      	mov	r7, r1
	bt[key]->old_state = bt[key]->new_state = 0;
 80012b6:	2160      	movs	r1, #96	; 0x60
 80012b8:	4341      	muls	r1, r0
 80012ba:	2400      	movs	r4, #0
{
 80012bc:	4605      	mov	r5, r0
	bt[key]->old_state = bt[key]->new_state = 0;
 80012be:	1870      	adds	r0, r6, r1
	// this looks weird but correct
	bt[key]->flag = !flag;
 80012c0:	f082 0201 	eor.w	r2, r2, #1
	bt[key]->old_state = bt[key]->new_state = 0;
 80012c4:	5474      	strb	r4, [r6, r1]
 80012c6:	7044      	strb	r4, [r0, #1]
	bt[key]->flag = !flag;
 80012c8:	6142      	str	r2, [r0, #20]

	// clear log
	for(i = 0; i < 8; i++)
	{
		ClearLog(key, i);
 80012ca:	b2e1      	uxtb	r1, r4
 80012cc:	4628      	mov	r0, r5
	for(i = 0; i < 8; i++)
 80012ce:	3401      	adds	r4, #1
		ClearLog(key, i);
 80012d0:	f7ff ffc0 	bl	8001254 <ClearLog>
	for(i = 0; i < 8; i++)
 80012d4:	2c08      	cmp	r4, #8
 80012d6:	d1f8      	bne.n	80012ca <KeyboardSetMode+0x1a>
	}

	// change mode
	bt[key]->mode = mode;
 80012d8:	2360      	movs	r3, #96	; 0x60
 80012da:	fb03 6505 	mla	r5, r3, r5, r6
 80012de:	74ef      	strb	r7, [r5, #19]
 80012e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012e2:	bf00      	nop
 80012e4:	2000b03c 	.word	0x2000b03c

080012e8 <PushButton_Read>:
	bt[key]->old_state = bt[key]->new_state;
}


uint8_t PushButton_Read(uint8_t key)
{
 80012e8:	b508      	push	{r3, lr}
	uint8_t ret = 0x00;

	switch(key) {
 80012ea:	2804      	cmp	r0, #4
 80012ec:	d819      	bhi.n	8001322 <PushButton_Read+0x3a>
 80012ee:	e8df f000 	tbb	[pc, r0]
 80012f2:	0c03      	.short	0x0c03
 80012f4:	120f      	.short	0x120f
 80012f6:	15          	.byte	0x15
 80012f7:	00          	.byte	0x00
		case 0:			// Down
			ret = !(HAL_GPIO_ReadPin(KEY_DN_GPIO_Port, KEY_DN_Pin));
 80012f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
			break;
		case 2:			// Enter
			ret = !(HAL_GPIO_ReadPin(KEY_ENTER_GPIO_Port, KEY_ENTER_Pin));
			break;
		case 3:			// Esc
			ret = !(HAL_GPIO_ReadPin(KEY_ESC_GPIO_Port, KEY_ESC_Pin));
 80012fc:	480a      	ldr	r0, [pc, #40]	; (8001328 <PushButton_Read+0x40>)
			break;
		case 4:			// SW Rotary Encoder
			ret = !(HAL_GPIO_ReadPin(SW_ENC_GPIO_Port, SW_ENC_Pin));
 80012fe:	f001 fe89 	bl	8003014 <HAL_GPIO_ReadPin>
 8001302:	fab0 f080 	clz	r0, r0
 8001306:	0940      	lsrs	r0, r0, #5
			break;
 8001308:	bd08      	pop	{r3, pc}
			ret = !(HAL_GPIO_ReadPin(KEY_UP_GPIO_Port, KEY_UP_Pin));
 800130a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800130e:	e7f5      	b.n	80012fc <PushButton_Read+0x14>
			ret = !(HAL_GPIO_ReadPin(KEY_ENTER_GPIO_Port, KEY_ENTER_Pin));
 8001310:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001314:	e7f2      	b.n	80012fc <PushButton_Read+0x14>
			ret = !(HAL_GPIO_ReadPin(KEY_ESC_GPIO_Port, KEY_ESC_Pin));
 8001316:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800131a:	e7ef      	b.n	80012fc <PushButton_Read+0x14>
			ret = !(HAL_GPIO_ReadPin(SW_ENC_GPIO_Port, SW_ENC_Pin));
 800131c:	2110      	movs	r1, #16
 800131e:	4803      	ldr	r0, [pc, #12]	; (800132c <PushButton_Read+0x44>)
 8001320:	e7ed      	b.n	80012fe <PushButton_Read+0x16>
	uint8_t ret = 0x00;
 8001322:	2000      	movs	r0, #0
		default:
			break;
	}
	return ret;
}
 8001324:	bd08      	pop	{r3, pc}
 8001326:	bf00      	nop
 8001328:	48000400 	.word	0x48000400
 800132c:	48000800 	.word	0x48000800

08001330 <Evt_EnQueue>:
 *
 * \param  event data in an array of uint8_t
 * \return false if the queue is full
 */
bool Evt_EnQueue(uint8_t *event)
{
 8001330:	b530      	push	{r4, r5, lr}
	unsigned i;
	uint8_t next = ADVANCE_QPTR(evt_queue.head);
 8001332:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <Evt_EnQueue+0x34>)
 8001334:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80

	// queue is full
	if(next == evt_queue.tail)
 8001338:	f893 4081 	ldrb.w	r4, [r3, #129]	; 0x81
	uint8_t next = ADVANCE_QPTR(evt_queue.head);
 800133c:	1c51      	adds	r1, r2, #1
 800133e:	f001 0107 	and.w	r1, r1, #7
	if(next == evt_queue.tail)
 8001342:	428c      	cmp	r4, r1
 8001344:	d00b      	beq.n	800135e <Evt_EnQueue+0x2e>
 8001346:	eb03 1402 	add.w	r4, r3, r2, lsl #4
 800134a:	2200      	movs	r2, #0
	}

	// copy event bytes into the buffer
	for(i = 0; i < EVT_QWIDTH; i++)
	{
		evt_queue.buff[evt_queue.head][i] = event[i];
 800134c:	5c85      	ldrb	r5, [r0, r2]
 800134e:	54a5      	strb	r5, [r4, r2]
	for(i = 0; i < EVT_QWIDTH; i++)
 8001350:	3201      	adds	r2, #1
 8001352:	2a10      	cmp	r2, #16
 8001354:	d1fa      	bne.n	800134c <Evt_EnQueue+0x1c>
	}
	// move to the next positition
	evt_queue.head = next;
 8001356:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80

	//logI("I - Evt_EnQueue OK\n\r");
	return true;
 800135a:	2001      	movs	r0, #1
 800135c:	bd30      	pop	{r4, r5, pc}
		return false;
 800135e:	2000      	movs	r0, #0
}
 8001360:	bd30      	pop	{r4, r5, pc}
 8001362:	bf00      	nop
 8001364:	20003340 	.word	0x20003340

08001368 <KeyboardRead>:
{
 8001368:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800136a:	4604      	mov	r4, r0
	bt[key]->new_state = PushButton_Read(key);
 800136c:	4e42      	ldr	r6, [pc, #264]	; (8001478 <KeyboardRead+0x110>)
 800136e:	f7ff ffbb 	bl	80012e8 <PushButton_Read>
 8001372:	2260      	movs	r2, #96	; 0x60
 8001374:	4362      	muls	r2, r4
 8001376:	18b3      	adds	r3, r6, r2
	diff_state = bt[key]->old_state ^ bt[key]->new_state;
 8001378:	5cb2      	ldrb	r2, [r6, r2]
	if(((bt[key]->mode >> i) & 0x01)  == PUSHBTN_MODE_UDOWN) {
 800137a:	7cd9      	ldrb	r1, [r3, #19]
	bt[key]->new_state = PushButton_Read(key);
 800137c:	7058      	strb	r0, [r3, #1]
	if(((bt[key]->mode >> i) & 0x01)  == PUSHBTN_MODE_UDOWN) {
 800137e:	07c9      	lsls	r1, r1, #31
 8001380:	d521      	bpl.n	80013c6 <KeyboardRead+0x5e>
		if(((bt[key]->new_state >> i) & 0x01) == 0x01) {
 8001382:	f010 0101 	ands.w	r1, r0, #1
 8001386:	d011      	beq.n	80013ac <KeyboardRead+0x44>
			event[0] = EVT_PBTN_INPUT;
 8001388:	2310      	movs	r3, #16
 800138a:	f88d 3000 	strb.w	r3, [sp]
			event[1] = (uint8_t)key;
 800138e:	f88d 4001 	strb.w	r4, [sp, #1]
			event[2] = PBTN_DOWN;
 8001392:	2305      	movs	r3, #5
				Evt_EnQueue(event);
 8001394:	4668      	mov	r0, sp
				event[2] = PBTN_ENDN;
 8001396:	f88d 3002 	strb.w	r3, [sp, #2]
				Evt_EnQueue(event);
 800139a:	f7ff ffc9 	bl	8001330 <Evt_EnQueue>
	bt[key]->old_state = bt[key]->new_state;
 800139e:	2360      	movs	r3, #96	; 0x60
 80013a0:	435c      	muls	r4, r3
 80013a2:	1933      	adds	r3, r6, r4
 80013a4:	785b      	ldrb	r3, [r3, #1]
 80013a6:	5533      	strb	r3, [r6, r4]
}
 80013a8:	b004      	add	sp, #16
 80013aa:	bd70      	pop	{r4, r5, r6, pc}
			if(((bt[key]->old_state >> i) & 0x01) == 0x01) {
 80013ac:	07d3      	lsls	r3, r2, #31
 80013ae:	d5f6      	bpl.n	800139e <KeyboardRead+0x36>
				KeyboardSetMode(key, PUSHBTN_MODE_CLICK, true);
 80013b0:	2201      	movs	r2, #1
 80013b2:	4620      	mov	r0, r4
 80013b4:	f7ff ff7c 	bl	80012b0 <KeyboardSetMode>
				event[0] = EVT_PBTN_INPUT;
 80013b8:	2310      	movs	r3, #16
 80013ba:	f88d 3000 	strb.w	r3, [sp]
				event[1] = (uint8_t)key;
 80013be:	f88d 4001 	strb.w	r4, [sp, #1]
				event[2] = PBTN_ENDN;
 80013c2:	2306      	movs	r3, #6
 80013c4:	e7e6      	b.n	8001394 <KeyboardRead+0x2c>
	diff_state = bt[key]->old_state ^ bt[key]->new_state;
 80013c6:	4042      	eors	r2, r0
		if((diff_state >> i) & 0x01) {
 80013c8:	07d5      	lsls	r5, r2, #31
 80013ca:	d520      	bpl.n	800140e <KeyboardRead+0xa6>
			bt[key]->duration[i] = 1;
 80013cc:	2201      	movs	r2, #1
 80013ce:	729a      	strb	r2, [r3, #10]
			if(((bt[key]->new_state >> i) & 0x01) == 0x00) {
 80013d0:	4002      	ands	r2, r0
 80013d2:	d107      	bne.n	80013e4 <KeyboardRead+0x7c>
				if(bt[key]->flag) {
 80013d4:	6959      	ldr	r1, [r3, #20]
 80013d6:	b111      	cbz	r1, 80013de <KeyboardRead+0x76>
					bt[key]->flag = false;
 80013d8:	615a      	str	r2, [r3, #20]
				bt[key]->duration[i]++;
 80013da:	729a      	strb	r2, [r3, #10]
 80013dc:	e002      	b.n	80013e4 <KeyboardRead+0x7c>
					bt[key]->click[i]++;
 80013de:	789a      	ldrb	r2, [r3, #2]
 80013e0:	3201      	adds	r2, #1
 80013e2:	709a      	strb	r2, [r3, #2]
		if(bt[key]->click[i] >= 3) {
 80013e4:	2560      	movs	r5, #96	; 0x60
 80013e6:	fb05 6504 	mla	r5, r5, r4, r6
 80013ea:	78aa      	ldrb	r2, [r5, #2]
 80013ec:	2a02      	cmp	r2, #2
 80013ee:	d915      	bls.n	800141c <KeyboardRead+0xb4>
			event[0] = EVT_PBTN_INPUT;
 80013f0:	2310      	movs	r3, #16
 80013f2:	f88d 3000 	strb.w	r3, [sp]
			Evt_EnQueue(event);
 80013f6:	4668      	mov	r0, sp
			event[2] = PBTN_TCLK;
 80013f8:	2304      	movs	r3, #4
 80013fa:	f88d 3002 	strb.w	r3, [sp, #2]
			event[1] = (uint8_t)key;
 80013fe:	f88d 4001 	strb.w	r4, [sp, #1]
			Evt_EnQueue(event);
 8001402:	f7ff ff95 	bl	8001330 <Evt_EnQueue>
			bt[key]->click[i] = 0;
 8001406:	2300      	movs	r3, #0
 8001408:	70ab      	strb	r3, [r5, #2]
			bt[key]->duration[i] = 0;
 800140a:	72ab      	strb	r3, [r5, #10]
 800140c:	e7c7      	b.n	800139e <KeyboardRead+0x36>
			if((bt[key]->duration[i] > 0) && (bt[key]->duration[i] < PUSHBTN_TO_MAX)) {
 800140e:	7a9a      	ldrb	r2, [r3, #10]
 8001410:	1e51      	subs	r1, r2, #1
 8001412:	b2c9      	uxtb	r1, r1
 8001414:	29fd      	cmp	r1, #253	; 0xfd
 8001416:	d8e5      	bhi.n	80013e4 <KeyboardRead+0x7c>
				bt[key]->duration[i]++;
 8001418:	3201      	adds	r2, #1
 800141a:	e7de      	b.n	80013da <KeyboardRead+0x72>
		else if((bt[key]->duration[i] > PUSHBTN_TO_SHORT) &&	(((bt[key]->new_state >> i) & 0x01) == 0x00)) {
 800141c:	7aab      	ldrb	r3, [r5, #10]
 800141e:	2b03      	cmp	r3, #3
 8001420:	d9bd      	bls.n	800139e <KeyboardRead+0x36>
 8001422:	07c1      	lsls	r1, r0, #31
 8001424:	d414      	bmi.n	8001450 <KeyboardRead+0xe8>
 8001426:	2310      	movs	r3, #16
			if(bt[key]->click[i] == 2) {
 8001428:	2a02      	cmp	r2, #2
				event[0] = EVT_PBTN_INPUT;
 800142a:	f88d 3000 	strb.w	r3, [sp]
				Evt_EnQueue(event);
 800142e:	4668      	mov	r0, sp
				event[2] = PBTN_DCLK;
 8001430:	bf0c      	ite	eq
 8001432:	2303      	moveq	r3, #3
				event[2] = PBTN_SCLK;
 8001434:	2301      	movne	r3, #1
 8001436:	f88d 3002 	strb.w	r3, [sp, #2]
				event[1] = (uint8_t)key;
 800143a:	f88d 4001 	strb.w	r4, [sp, #1]
				Evt_EnQueue(event);
 800143e:	f7ff ff77 	bl	8001330 <Evt_EnQueue>
			bt[key]->click[i] = 0;
 8001442:	2360      	movs	r3, #96	; 0x60
 8001444:	fb03 6304 	mla	r3, r3, r4, r6
 8001448:	2200      	movs	r2, #0
 800144a:	709a      	strb	r2, [r3, #2]
			bt[key]->duration[i] = 0;
 800144c:	729a      	strb	r2, [r3, #10]
 800144e:	e7a6      	b.n	800139e <KeyboardRead+0x36>
		else if((bt[key]->duration[i] > PUSHBTN_TO_LONG) && (((bt[key]->new_state >> i) & 0x01) == 0x01)) {
 8001450:	2b0a      	cmp	r3, #10
 8001452:	d9a4      	bls.n	800139e <KeyboardRead+0x36>
			event[0] = EVT_PBTN_INPUT;
 8001454:	2310      	movs	r3, #16
 8001456:	f88d 3000 	strb.w	r3, [sp]
			Evt_EnQueue(event);
 800145a:	4668      	mov	r0, sp
			event[2] = PBTN_LCLK;
 800145c:	2302      	movs	r3, #2
 800145e:	f88d 3002 	strb.w	r3, [sp, #2]
			event[1] = (uint8_t)key;
 8001462:	f88d 4001 	strb.w	r4, [sp, #1]
			Evt_EnQueue(event);
 8001466:	f7ff ff63 	bl	8001330 <Evt_EnQueue>
			bt[key]->click[i] = 0;
 800146a:	2300      	movs	r3, #0
 800146c:	70ab      	strb	r3, [r5, #2]
			bt[key]->duration[i] = 0;
 800146e:	72ab      	strb	r3, [r5, #10]
			bt[key]->flag = true;
 8001470:	2301      	movs	r3, #1
 8001472:	616b      	str	r3, [r5, #20]
 8001474:	e793      	b.n	800139e <KeyboardRead+0x36>
 8001476:	bf00      	nop
 8001478:	2000b03c 	.word	0x2000b03c

0800147c <Key_Read>:
{
 800147c:	b510      	push	{r4, lr}
 800147e:	2400      	movs	r4, #0
		KeyboardRead(x);
 8001480:	b2e0      	uxtb	r0, r4
 8001482:	3401      	adds	r4, #1
 8001484:	f7ff ff70 	bl	8001368 <KeyboardRead>
	for(x = 0; x < 6; x++) {
 8001488:	2c06      	cmp	r4, #6
 800148a:	d1f9      	bne.n	8001480 <Key_Read+0x4>
}
 800148c:	bd10      	pop	{r4, pc}
	...

08001490 <Evt_DeQueue>:

	// disable all timers
	//UsrTimer_Enable(false);

	// queue is not empty
	if(evt_queue.tail != evt_queue.head)
 8001490:	4b0d      	ldr	r3, [pc, #52]	; (80014c8 <Evt_DeQueue+0x38>)
 8001492:	f893 1081 	ldrb.w	r1, [r3, #129]	; 0x81
 8001496:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800149a:	4291      	cmp	r1, r2
 800149c:	d012      	beq.n	80014c4 <Evt_DeQueue+0x34>
 800149e:	2200      	movs	r2, #0
	{
		// copy event bytes into the buffer
		for(i = 0; i < EVT_QWIDTH; i++)
		{
			event[i] = evt_queue.buff[evt_queue.tail][i];
 80014a0:	f893 1081 	ldrb.w	r1, [r3, #129]	; 0x81
 80014a4:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 80014a8:	5c89      	ldrb	r1, [r1, r2]
 80014aa:	5481      	strb	r1, [r0, r2]
 80014ac:	3201      	adds	r2, #1
		for(i = 0; i < EVT_QWIDTH; i++)
 80014ae:	2a10      	cmp	r2, #16
 80014b0:	d1f6      	bne.n	80014a0 <Evt_DeQueue+0x10>
		}
		// move to the next position
		evt_queue.tail = ADVANCE_QPTR(evt_queue.tail);
 80014b2:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 80014b6:	3201      	adds	r2, #1
 80014b8:	f002 0207 	and.w	r2, r2, #7
 80014bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
		// set flag
		flag = true;
 80014c0:	2001      	movs	r0, #1
 80014c2:	4770      	bx	lr
	bool flag = false;
 80014c4:	2000      	movs	r0, #0
	// enable all timers
	//UsrTimer_Enable(true);

	// return with the flag
	return flag;
}
 80014c6:	4770      	bx	lr
 80014c8:	20003340 	.word	0x20003340

080014cc <Evt_InitQueue>:
 * the data in the queue.
 */
void Evt_InitQueue(void)
{
	// clear queue by resetting the pointers
	evt_queue.head = evt_queue.tail = 0;
 80014cc:	4b03      	ldr	r3, [pc, #12]	; (80014dc <Evt_InitQueue+0x10>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
 80014d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	20003340 	.word	0x20003340

080014e0 <KeyboardEvent>:
}

// Eventos Teclado
void KeyboardEvent(void)
{
 80014e0:	b530      	push	{r4, r5, lr}
	uint8_t event[EVT_QWIDTH];
	const char* teclas[] = {"KEY-DOWN", "KEY-UP", "KEY-ENTER", "KEY-ESC", "KEY-ROTARY", "KEY-USER"};
 80014e2:	4d47      	ldr	r5, [pc, #284]	; (8001600 <KeyboardEvent+0x120>)
 80014e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
 80014e6:	b08b      	sub	sp, #44	; 0x2c
	const char* teclas[] = {"KEY-DOWN", "KEY-UP", "KEY-ENTER", "KEY-ESC", "KEY-ROTARY", "KEY-USER"};
 80014e8:	ac04      	add	r4, sp, #16
 80014ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014ec:	e895 0003 	ldmia.w	r5, {r0, r1}
 80014f0:	e884 0003 	stmia.w	r4, {r0, r1}

	// check event queue
	if(Evt_DeQueue(event)) {
 80014f4:	4668      	mov	r0, sp
 80014f6:	f7ff ffcb 	bl	8001490 <Evt_DeQueue>
 80014fa:	b1b0      	cbz	r0, 800152a <KeyboardEvent+0x4a>
		switch(event[0]) {
 80014fc:	f89d 3000 	ldrb.w	r3, [sp]
 8001500:	2b10      	cmp	r3, #16
 8001502:	d112      	bne.n	800152a <KeyboardEvent+0x4a>
			// pushbutton event ================================================
			// event[1]: button id
			// event[2]: PBTN_SCLK, _DCLK, _TCLK, _LCLK, _DOWN, _ENDN
			case EVT_PBTN_INPUT:
				if(event[2] == PBTN_SCLK) {
 8001504:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d141      	bne.n	8001590 <KeyboardEvent+0xb0>
					if(TelaAtiva == TelaPrincipal) {
 800150c:	4b3d      	ldr	r3, [pc, #244]	; (8001604 <KeyboardEvent+0x124>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	b96b      	cbnz	r3, 800152e <KeyboardEvent+0x4e>
						main_screen_send_apply();
 8001512:	f006 ff53 	bl	80083bc <main_screen_send_apply>

					}
					else if(event[1] == KEY_ENCODER) {

					}
					logI("\r\nButton %s: single click.", teclas[event[1]]);
 8001516:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800151a:	483b      	ldr	r0, [pc, #236]	; (8001608 <KeyboardEvent+0x128>)
 800151c:	aa0a      	add	r2, sp, #40	; 0x28
 800151e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001522:	f853 1c18 	ldr.w	r1, [r3, #-24]
				}
				else if(event[2] == PBTN_DOWN) {
					logI("\r\nButton %s: is being pressed.", teclas[event[1]]);
				}
				else if(event[2] == PBTN_ENDN) {
					logI("\r\nButton %s: has been released.", teclas[event[1]]);
 8001526:	f000 f8a5 	bl	8001674 <logI>
					//logI("\r\n --> Switch to click mode.");
				}
				break;
		}
	}
}
 800152a:	b00b      	add	sp, #44	; 0x2c
 800152c:	bd30      	pop	{r4, r5, pc}
					else if(TelaAtiva == TelaSelecao) {
 800152e:	2b01      	cmp	r3, #1
 8001530:	d1f1      	bne.n	8001516 <KeyboardEvent+0x36>
						if(event[1] == KEY_DN) {
 8001532:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8001536:	b96b      	cbnz	r3, 8001554 <KeyboardEvent+0x74>
							if(MenuSel >= 1) MenuSel--;
 8001538:	4c34      	ldr	r4, [pc, #208]	; (800160c <KeyboardEvent+0x12c>)
 800153a:	6823      	ldr	r3, [r4, #0]
 800153c:	b10b      	cbz	r3, 8001542 <KeyboardEvent+0x62>
 800153e:	3b01      	subs	r3, #1
 8001540:	6023      	str	r3, [r4, #0]
							sel_screen_send_button(MenuSel, LV_BTN_STATE_TGL_PR);
 8001542:	2103      	movs	r1, #3
 8001544:	6820      	ldr	r0, [r4, #0]
 8001546:	f00c f90b 	bl	800d760 <sel_screen_send_button>
							logI("Debug: Tela_Selecao KEY_Down: MenuSel: %ld\n", MenuSel);
 800154a:	6821      	ldr	r1, [r4, #0]
 800154c:	4830      	ldr	r0, [pc, #192]	; (8001610 <KeyboardEvent+0x130>)
							logI("Debug: Tela_Selecao KEY_UP: MenuSel: %ld\n", MenuSel);
 800154e:	f000 f891 	bl	8001674 <logI>
 8001552:	e7e0      	b.n	8001516 <KeyboardEvent+0x36>
						else if(event[1] == KEY_UP) {
 8001554:	2b01      	cmp	r3, #1
 8001556:	d10d      	bne.n	8001574 <KeyboardEvent+0x94>
							MenuSel++;
 8001558:	4c2c      	ldr	r4, [pc, #176]	; (800160c <KeyboardEvent+0x12c>)
 800155a:	6823      	ldr	r3, [r4, #0]
 800155c:	3301      	adds	r3, #1
							if(MenuSel >= 3) MenuSel = 3;
 800155e:	2b02      	cmp	r3, #2
 8001560:	bf88      	it	hi
 8001562:	2303      	movhi	r3, #3
 8001564:	6023      	str	r3, [r4, #0]
							sel_screen_send_button(MenuSel, LV_BTN_STATE_TGL_PR);
 8001566:	2103      	movs	r1, #3
 8001568:	6820      	ldr	r0, [r4, #0]
 800156a:	f00c f8f9 	bl	800d760 <sel_screen_send_button>
							logI("Debug: Tela_Selecao KEY_UP: MenuSel: %ld\n", MenuSel);
 800156e:	6821      	ldr	r1, [r4, #0]
 8001570:	4828      	ldr	r0, [pc, #160]	; (8001614 <KeyboardEvent+0x134>)
 8001572:	e7ec      	b.n	800154e <KeyboardEvent+0x6e>
						else if(event[1] == KEY_ENTER) {
 8001574:	2b02      	cmp	r3, #2
 8001576:	d106      	bne.n	8001586 <KeyboardEvent+0xa6>
							sel_screen_send_apply(MenuSel);
 8001578:	4c24      	ldr	r4, [pc, #144]	; (800160c <KeyboardEvent+0x12c>)
 800157a:	6820      	ldr	r0, [r4, #0]
 800157c:	f00c f92e 	bl	800d7dc <sel_screen_send_apply>
							logI("Debug: Tela_Selecao KEY_ENTER: MenuSel: %ld\n", MenuSel);
 8001580:	6821      	ldr	r1, [r4, #0]
 8001582:	4825      	ldr	r0, [pc, #148]	; (8001618 <KeyboardEvent+0x138>)
 8001584:	e7e3      	b.n	800154e <KeyboardEvent+0x6e>
						else if(event[1] == KEY_ESC) {
 8001586:	2b03      	cmp	r3, #3
 8001588:	d1c5      	bne.n	8001516 <KeyboardEvent+0x36>
							sel_screen_send_esc();
 800158a:	f00c f8e1 	bl	800d750 <sel_screen_send_esc>
 800158e:	e7c2      	b.n	8001516 <KeyboardEvent+0x36>
				else if(event[2] == PBTN_LCLK) {
 8001590:	2b02      	cmp	r3, #2
 8001592:	d108      	bne.n	80015a6 <KeyboardEvent+0xc6>
					logI("\r\nButton %s: long click.", teclas[event[1]]);
 8001594:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8001598:	4820      	ldr	r0, [pc, #128]	; (800161c <KeyboardEvent+0x13c>)
 800159a:	aa0a      	add	r2, sp, #40	; 0x28
 800159c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80015a0:	f853 1c18 	ldr.w	r1, [r3, #-24]
 80015a4:	e7bf      	b.n	8001526 <KeyboardEvent+0x46>
				else if(event[2] == PBTN_DCLK) {
 80015a6:	2b03      	cmp	r3, #3
 80015a8:	d108      	bne.n	80015bc <KeyboardEvent+0xdc>
					logI("\r\nButton %s: double click.", teclas[event[1]]);
 80015aa:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80015ae:	481c      	ldr	r0, [pc, #112]	; (8001620 <KeyboardEvent+0x140>)
 80015b0:	aa0a      	add	r2, sp, #40	; 0x28
 80015b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80015b6:	f853 1c18 	ldr.w	r1, [r3, #-24]
 80015ba:	e7b4      	b.n	8001526 <KeyboardEvent+0x46>
				else if(event[2] == PBTN_TCLK) {
 80015bc:	2b04      	cmp	r3, #4
 80015be:	d108      	bne.n	80015d2 <KeyboardEvent+0xf2>
					logI("\r\nButton %s: triple click.", teclas[event[1]]);
 80015c0:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80015c4:	4817      	ldr	r0, [pc, #92]	; (8001624 <KeyboardEvent+0x144>)
 80015c6:	aa0a      	add	r2, sp, #40	; 0x28
 80015c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80015cc:	f853 1c18 	ldr.w	r1, [r3, #-24]
 80015d0:	e7a9      	b.n	8001526 <KeyboardEvent+0x46>
				else if(event[2] == PBTN_DOWN) {
 80015d2:	2b05      	cmp	r3, #5
 80015d4:	d108      	bne.n	80015e8 <KeyboardEvent+0x108>
					logI("\r\nButton %s: is being pressed.", teclas[event[1]]);
 80015d6:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80015da:	4813      	ldr	r0, [pc, #76]	; (8001628 <KeyboardEvent+0x148>)
 80015dc:	aa0a      	add	r2, sp, #40	; 0x28
 80015de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80015e2:	f853 1c18 	ldr.w	r1, [r3, #-24]
 80015e6:	e79e      	b.n	8001526 <KeyboardEvent+0x46>
				else if(event[2] == PBTN_ENDN) {
 80015e8:	2b06      	cmp	r3, #6
 80015ea:	d19e      	bne.n	800152a <KeyboardEvent+0x4a>
					logI("\r\nButton %s: has been released.", teclas[event[1]]);
 80015ec:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80015f0:	480e      	ldr	r0, [pc, #56]	; (800162c <KeyboardEvent+0x14c>)
 80015f2:	aa0a      	add	r2, sp, #40	; 0x28
 80015f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80015f8:	f853 1c18 	ldr.w	r1, [r3, #-24]
 80015fc:	e793      	b.n	8001526 <KeyboardEvent+0x46>
 80015fe:	bf00      	nop
 8001600:	0801caf0 	.word	0x0801caf0
 8001604:	200033cc 	.word	0x200033cc
 8001608:	0801cbcd 	.word	0x0801cbcd
 800160c:	200033c8 	.word	0x200033c8
 8001610:	0801cb4a 	.word	0x0801cb4a
 8001614:	0801cb76 	.word	0x0801cb76
 8001618:	0801cba0 	.word	0x0801cba0
 800161c:	0801cbe8 	.word	0x0801cbe8
 8001620:	0801cc01 	.word	0x0801cc01
 8001624:	0801cc1c 	.word	0x0801cc1c
 8001628:	0801cc37 	.word	0x0801cc37
 800162c:	0801cc56 	.word	0x0801cc56

08001630 <HAL_printf_valist>:
/** Custom printf function in order to use HAL_UART_Transmit()
 * @param *fmt String to print
 * @param argp Parameters list
 */
void HAL_printf_valist(const char *fmt, va_list argp)
{
 8001630:	b500      	push	{lr}
 8001632:	b0c1      	sub	sp, #260	; 0x104
  char string[PRINT_BUFFER_SIZE];

  if (vsprintf(string, fmt, argp) > 0) {
 8001634:	460a      	mov	r2, r1
 8001636:	4601      	mov	r1, r0
 8001638:	4668      	mov	r0, sp
 800163a:	f019 f8b1 	bl	801a7a0 <vsprintf>
 800163e:	2800      	cmp	r0, #0
 8001640:	dd0f      	ble.n	8001662 <HAL_printf_valist+0x32>
    HAL_UART_Transmit(&huart2, (uint8_t*)string, strlen(string), HAL_MAX_DELAY); // send message via UART
 8001642:	4668      	mov	r0, sp
 8001644:	f7fe fdc4 	bl	80001d0 <strlen>
 8001648:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800164c:	b282      	uxth	r2, r0
 800164e:	4669      	mov	r1, sp
  } else {
	HAL_UART_Transmit(&huart2, (uint8_t*)"E - Print\n", 14, HAL_MAX_DELAY);
 8001650:	4806      	ldr	r0, [pc, #24]	; (800166c <HAL_printf_valist+0x3c>)
 8001652:	f004 fc2e 	bl	8005eb2 <HAL_UART_Transmit>
  }
  HAL_Delay(10);
 8001656:	200a      	movs	r0, #10
 8001658:	f000 ff78 	bl	800254c <HAL_Delay>
}
 800165c:	b041      	add	sp, #260	; 0x104
 800165e:	f85d fb04 	ldr.w	pc, [sp], #4
	HAL_UART_Transmit(&huart2, (uint8_t*)"E - Print\n", 14, HAL_MAX_DELAY);
 8001662:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001666:	220e      	movs	r2, #14
 8001668:	4901      	ldr	r1, [pc, #4]	; (8001670 <HAL_printf_valist+0x40>)
 800166a:	e7f1      	b.n	8001650 <HAL_printf_valist+0x20>
 800166c:	2000b408 	.word	0x2000b408
 8001670:	0801ccac 	.word	0x0801ccac

08001674 <logI>:
/** LOG procedure - Info
 * @param *fmt String to print
 * @param ... Parameters list
 */
void logI(const char* fmt, ...)
{
 8001674:	b40f      	push	{r0, r1, r2, r3}
 8001676:	b507      	push	{r0, r1, r2, lr}
 8001678:	a904      	add	r1, sp, #16
 800167a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list argp;

	va_start(argp, fmt);
 800167e:	9101      	str	r1, [sp, #4]
	HAL_printf_valist(fmt, argp);
 8001680:	f7ff ffd6 	bl	8001630 <HAL_printf_valist>
	logUSB(fmt, argp);
	va_end(argp);
}
 8001684:	b003      	add	sp, #12
 8001686:	f85d eb04 	ldr.w	lr, [sp], #4
 800168a:	b004      	add	sp, #16
 800168c:	4770      	bx	lr
	...

08001690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001694:	b0b8      	sub	sp, #224	; 0xe0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001696:	2514      	movs	r5, #20
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001698:	2244      	movs	r2, #68	; 0x44
 800169a:	2100      	movs	r1, #0
 800169c:	a805      	add	r0, sp, #20
 800169e:	f017 ff44 	bl	801952a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016a2:	462a      	mov	r2, r5
 80016a4:	2100      	movs	r1, #0
 80016a6:	4668      	mov	r0, sp
 80016a8:	f017 ff3f 	bl	801952a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016ac:	2100      	movs	r1, #0
 80016ae:	2288      	movs	r2, #136	; 0x88
 80016b0:	a816      	add	r0, sp, #88	; 0x58
 80016b2:	f017 ff3a 	bl	801952a <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80016b6:	f002 f9dd 	bl	8003a74 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80016ba:	4a25      	ldr	r2, [pc, #148]	; (8001750 <SystemClock_Config+0xc0>)
 80016bc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80016c0:	f023 0318 	bic.w	r3, r3, #24
 80016c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80016c8:	2305      	movs	r3, #5
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016ca:	2402      	movs	r4, #2
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80016cc:	2601      	movs	r6, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016ce:	2703      	movs	r7, #3
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80016d0:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 20;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80016d2:	f04f 0807 	mov.w	r8, #7
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80016d6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016da:	eb0d 0005 	add.w	r0, sp, r5
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80016de:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLN = 20;
 80016e0:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80016e2:	9607      	str	r6, [sp, #28]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016e4:	2500      	movs	r5, #0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016e6:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016e8:	9710      	str	r7, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80016ea:	9611      	str	r6, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80016ec:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016f0:	9414      	str	r4, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016f2:	9415      	str	r4, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016f4:	f002 fb1a 	bl	8003d2c <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80016f8:	2104      	movs	r1, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016fa:	230f      	movs	r3, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80016fc:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016fe:	e88d 0088 	stmia.w	sp, {r3, r7}
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001702:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001704:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001706:	9504      	str	r5, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001708:	f002 fd72 	bl	80041f0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 800170c:	4b11      	ldr	r3, [pc, #68]	; (8001754 <SystemClock_Config+0xc4>)
 800170e:	9316      	str	r3, [sp, #88]	; 0x58
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001710:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001714:	9334      	str	r3, [sp, #208]	; 0xd0
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001716:	f44f 7380 	mov.w	r3, #256	; 0x100
 800171a:	9337      	str	r3, [sp, #220]	; 0xdc
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800171c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001720:	9331      	str	r3, [sp, #196]	; 0xc4
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
  PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 8001722:	230c      	movs	r3, #12
 8001724:	9319      	str	r3, [sp, #100]	; 0x64
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001726:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8001728:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 800172c:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800172e:	9525      	str	r5, [sp, #148]	; 0x94
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001730:	952a      	str	r5, [sp, #168]	; 0xa8
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8001732:	9717      	str	r7, [sp, #92]	; 0x5c
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001734:	9618      	str	r6, [sp, #96]	; 0x60
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001736:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800173a:	941b      	str	r4, [sp, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800173c:	941c      	str	r4, [sp, #112]	; 0x70
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800173e:	f002 ff41 	bl	80045c4 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001742:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001746:	f002 f9a5 	bl	8003a94 <HAL_PWREx_ControlVoltageScaling>
  {
    Error_Handler();
  }
}
 800174a:	b038      	add	sp, #224	; 0xe0
 800174c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001750:	40021000 	.word	0x40021000
 8001754:	00026042 	.word	0x00026042

08001758 <main>:
{
 8001758:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 800175c:	b099      	sub	sp, #100	; 0x64
  HAL_Init();
 800175e:	f000 fecd 	bl	80024fc <HAL_Init>
  SystemClock_Config();
 8001762:	f7ff ff95 	bl	8001690 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001766:	2214      	movs	r2, #20
 8001768:	2100      	movs	r1, #0
 800176a:	a80f      	add	r0, sp, #60	; 0x3c
 800176c:	f017 fedd 	bl	801952a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001770:	4bba      	ldr	r3, [pc, #744]	; (8001a5c <main+0x304>)
  huart2.Instance = USART2;
 8001772:	4fbb      	ldr	r7, [pc, #748]	; (8001a60 <main+0x308>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001774:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  hi2c1.Instance = I2C1;
 8001776:	4ebb      	ldr	r6, [pc, #748]	; (8001a64 <main+0x30c>)
  hrtc.Instance = RTC;
 8001778:	f8df a328 	ldr.w	sl, [pc, #808]	; 8001aa4 <main+0x34c>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800177c:	f042 0204 	orr.w	r2, r2, #4
 8001780:	64da      	str	r2, [r3, #76]	; 0x4c
 8001782:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001784:	f002 0204 	and.w	r2, r2, #4
 8001788:	9203      	str	r2, [sp, #12]
 800178a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800178c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800178e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001792:	64da      	str	r2, [r3, #76]	; 0x4c
 8001794:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001796:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800179a:	9204      	str	r2, [sp, #16]
 800179c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800179e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017a0:	f042 0201 	orr.w	r2, r2, #1
 80017a4:	64da      	str	r2, [r3, #76]	; 0x4c
 80017a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017a8:	f002 0201 	and.w	r2, r2, #1
 80017ac:	9205      	str	r2, [sp, #20]
 80017ae:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017b2:	f042 0202 	orr.w	r2, r2, #2
 80017b6:	64da      	str	r2, [r3, #76]	; 0x4c
 80017b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017ba:	f002 0202 	and.w	r2, r2, #2
 80017be:	9206      	str	r2, [sp, #24]
 80017c0:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017c4:	f042 0208 	orr.w	r2, r2, #8
 80017c8:	64da      	str	r2, [r3, #76]	; 0x4c
 80017ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017cc:	f003 0308 	and.w	r3, r3, #8
 80017d0:	9307      	str	r3, [sp, #28]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80017d2:	2200      	movs	r2, #0
 80017d4:	2120      	movs	r1, #32
 80017d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017da:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80017dc:	f001 fc20 	bl	8003020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_FLASH_GPIO_Port, CS_FLASH_Pin, GPIO_PIN_SET);
 80017e0:	2201      	movs	r2, #1
 80017e2:	2104      	movs	r1, #4
 80017e4:	48a0      	ldr	r0, [pc, #640]	; (8001a68 <main+0x310>)
 80017e6:	f001 fc1b 	bl	8003020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin, GPIO_PIN_SET);
 80017ea:	2201      	movs	r2, #1
 80017ec:	21e0      	movs	r1, #224	; 0xe0
 80017ee:	489f      	ldr	r0, [pc, #636]	; (8001a6c <main+0x314>)
 80017f0:	f001 fc16 	bl	8003020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017f8:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = B1_Pin;
 80017fa:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017fc:	a90f      	add	r1, sp, #60	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017fe:	4b9c      	ldr	r3, [pc, #624]	; (8001a70 <main+0x318>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001800:	489c      	ldr	r0, [pc, #624]	; (8001a74 <main+0x31c>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001802:	9310      	str	r3, [sp, #64]	; 0x40

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2400      	movs	r4, #0
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001806:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001808:	f001 fb28 	bl	8002e5c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 800180c:	2320      	movs	r3, #32
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800180e:	a90f      	add	r1, sp, #60	; 0x3c
 8001810:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000

  /*Configure GPIO pin : SW_ENC_Pin */
  GPIO_InitStruct.Pin = SW_ENC_Pin;
 8001814:	f04f 0910 	mov.w	r9, #16
  GPIO_InitStruct.Pin = LD2_Pin;
 8001818:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181c:	9412      	str	r4, [sp, #72]	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800181e:	9510      	str	r5, [sp, #64]	; 0x40
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001820:	f001 fb1c 	bl	8002e5c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(SW_ENC_GPIO_Port, &GPIO_InitStruct);
 8001824:	a90f      	add	r1, sp, #60	; 0x3c
 8001826:	4893      	ldr	r0, [pc, #588]	; (8001a74 <main+0x31c>)
  GPIO_InitStruct.Pin = SW_ENC_Pin;
 8001828:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800182c:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800182e:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(SW_ENC_GPIO_Port, &GPIO_InitStruct);
 8001830:	f001 fb14 	bl	8002e5c <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC_A_Pin KEY_DN_Pin KEY_UP_Pin KEY_ENTER_Pin 
                           KEY_ESC_Pin ENC_B_Pin */
  GPIO_InitStruct.Pin = ENC_A_Pin|KEY_DN_Pin|KEY_UP_Pin|KEY_ENTER_Pin 
 8001834:	f24f 0314 	movw	r3, #61460	; 0xf014
                          |KEY_ESC_Pin|ENC_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001838:	a90f      	add	r1, sp, #60	; 0x3c
 800183a:	488c      	ldr	r0, [pc, #560]	; (8001a6c <main+0x314>)
  GPIO_InitStruct.Pin = ENC_A_Pin|KEY_DN_Pin|KEY_UP_Pin|KEY_ENTER_Pin 
 800183c:	930f      	str	r3, [sp, #60]	; 0x3c

  /*Configure GPIO pin : CS_FLASH_Pin */
  GPIO_InitStruct.Pin = CS_FLASH_Pin;
 800183e:	f04f 0804 	mov.w	r8, #4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001842:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001844:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001846:	f001 fb09 	bl	8002e5c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(CS_FLASH_GPIO_Port, &GPIO_InitStruct);
 800184a:	a90f      	add	r1, sp, #60	; 0x3c
 800184c:	4886      	ldr	r0, [pc, #536]	; (8001a68 <main+0x310>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001850:	9412      	str	r4, [sp, #72]	; 0x48
  GPIO_InitStruct.Pin = CS_FLASH_Pin;
 8001852:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001856:	9510      	str	r5, [sp, #64]	; 0x40
  HAL_GPIO_Init(CS_FLASH_GPIO_Port, &GPIO_InitStruct);
 8001858:	f001 fb00 	bl	8002e5c <HAL_GPIO_Init>

  /*Configure GPIO pins : TFT_CS_Pin TFT_RST_Pin TFT_DC_Pin */
  GPIO_InitStruct.Pin = TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin;
 800185c:	23e0      	movs	r3, #224	; 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800185e:	a90f      	add	r1, sp, #60	; 0x3c
 8001860:	4882      	ldr	r0, [pc, #520]	; (8001a6c <main+0x314>)
  GPIO_InitStruct.Pin = TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin;
 8001862:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001866:	9412      	str	r4, [sp, #72]	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001868:	9510      	str	r5, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800186a:	f001 faf7 	bl	8002e5c <HAL_GPIO_Init>
  huart2.Init.BaudRate = 115200;
 800186e:	4a82      	ldr	r2, [pc, #520]	; (8001a78 <main+0x320>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001870:	60bc      	str	r4, [r7, #8]
  huart2.Init.BaudRate = 115200;
 8001872:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001876:	f04f 0b0c 	mov.w	fp, #12
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800187a:	4638      	mov	r0, r7
  huart2.Init.BaudRate = 115200;
 800187c:	e887 000c 	stmia.w	r7, {r2, r3}
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001880:	60fc      	str	r4, [r7, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001882:	613c      	str	r4, [r7, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001884:	61bc      	str	r4, [r7, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001886:	61fc      	str	r4, [r7, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001888:	623c      	str	r4, [r7, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800188a:	627c      	str	r4, [r7, #36]	; 0x24
  huart2.Init.Mode = UART_MODE_TX_RX;
 800188c:	f8c7 b014 	str.w	fp, [r7, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001890:	f004 fb96 	bl	8005fc0 <HAL_UART_Init>
  hi2c1.Init.Timing = 0x00702890;
 8001894:	4b79      	ldr	r3, [pc, #484]	; (8001a7c <main+0x324>)
 8001896:	497a      	ldr	r1, [pc, #488]	; (8001a80 <main+0x328>)
  hi2c1.Init.OwnAddress1 = 0;
 8001898:	60b4      	str	r4, [r6, #8]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800189a:	4630      	mov	r0, r6
  hi2c1.Init.Timing = 0x00702890;
 800189c:	e886 000a 	stmia.w	r6, {r1, r3}
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018a0:	6134      	str	r4, [r6, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80018a2:	6174      	str	r4, [r6, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80018a4:	61b4      	str	r4, [r6, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018a6:	61f4      	str	r4, [r6, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018a8:	6234      	str	r4, [r6, #32]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018aa:	60f5      	str	r5, [r6, #12]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018ac:	f001 fbc3 	bl	8003036 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018b0:	4621      	mov	r1, r4
 80018b2:	4630      	mov	r0, r6
 80018b4:	f001 fc10 	bl	80030d8 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 1) != HAL_OK)
 80018b8:	4629      	mov	r1, r5
 80018ba:	4630      	mov	r0, r6
 80018bc:	f001 fc32 	bl	8003124 <HAL_I2CEx_ConfigDigitalFilter>
  hqspi.Instance = QUADSPI;
 80018c0:	4870      	ldr	r0, [pc, #448]	; (8001a84 <main+0x32c>)
 80018c2:	4b71      	ldr	r3, [pc, #452]	; (8001a88 <main+0x330>)
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80018c4:	6184      	str	r4, [r0, #24]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80018c6:	e880 0318 	stmia.w	r0, {r3, r4, r8, r9}
  hqspi.Init.FlashSize = 23;
 80018ca:	2317      	movs	r3, #23
 80018cc:	6103      	str	r3, [r0, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_2_CYCLE;
 80018ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018d2:	6143      	str	r3, [r0, #20]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80018d4:	f002 f942 	bl	8003b5c <HAL_QSPI_Init>
  hspi3.Instance = SPI3;
 80018d8:	486c      	ldr	r0, [pc, #432]	; (8001a8c <main+0x334>)
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80018da:	4b6d      	ldr	r3, [pc, #436]	; (8001a90 <main+0x338>)
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80018dc:	6084      	str	r4, [r0, #8]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80018de:	f44f 7682 	mov.w	r6, #260	; 0x104
 80018e2:	e880 0048 	stmia.w	r0, {r3, r6}
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80018e6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80018ea:	60c3      	str	r3, [r0, #12]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80018ec:	f44f 7300 	mov.w	r3, #512	; 0x200
  hspi3.Init.CRCPolynomial = 7;
 80018f0:	2207      	movs	r2, #7
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80018f2:	6183      	str	r3, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80018f4:	2308      	movs	r3, #8
 80018f6:	61c3      	str	r3, [r0, #28]
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018f8:	6343      	str	r3, [r0, #52]	; 0x34
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018fa:	6104      	str	r4, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018fc:	6144      	str	r4, [r0, #20]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018fe:	6204      	str	r4, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001900:	6244      	str	r4, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001902:	6284      	str	r4, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001904:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001906:	6304      	str	r4, [r0, #48]	; 0x30
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001908:	f003 fa18 	bl	8004d3c <HAL_SPI_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800190c:	464a      	mov	r2, r9
 800190e:	4621      	mov	r1, r4
 8001910:	a80b      	add	r0, sp, #44	; 0x2c
 8001912:	f017 fe0a 	bl	801952a <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001916:	221c      	movs	r2, #28
 8001918:	4621      	mov	r1, r4
 800191a:	a80f      	add	r0, sp, #60	; 0x3c
  htim3.Instance = TIM3;
 800191c:	4e5d      	ldr	r6, [pc, #372]	; (8001a94 <main+0x33c>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800191e:	9408      	str	r4, [sp, #32]
 8001920:	9409      	str	r4, [sp, #36]	; 0x24
 8001922:	940a      	str	r4, [sp, #40]	; 0x28
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001924:	f017 fe01 	bl	801952a <memset>
  htim3.Instance = TIM3;
 8001928:	4b5b      	ldr	r3, [pc, #364]	; (8001a98 <main+0x340>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800192a:	60b4      	str	r4, [r6, #8]
  htim3.Init.Prescaler = 1;
 800192c:	e886 0028 	stmia.w	r6, {r3, r5}
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001930:	4630      	mov	r0, r6
  htim3.Init.Period = 4095;
 8001932:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001936:	60f3      	str	r3, [r6, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001938:	6134      	str	r4, [r6, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800193a:	61b4      	str	r4, [r6, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800193c:	f003 fe90 	bl	8005660 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001940:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001944:	a90b      	add	r1, sp, #44	; 0x2c
 8001946:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001948:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800194a:	f003 ff93 	bl	8005874 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800194e:	4630      	mov	r0, r6
 8001950:	f003 fea0 	bl	8005694 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001954:	a908      	add	r1, sp, #32
 8001956:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001958:	9408      	str	r4, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800195a:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800195c:	f004 f85e 	bl	8005a1c <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001960:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001962:	4622      	mov	r2, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001964:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001966:	a90f      	add	r1, sp, #60	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001968:	2302      	movs	r3, #2
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800196a:	4630      	mov	r0, r6
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800196c:	9311      	str	r3, [sp, #68]	; 0x44
  sConfigOC.Pulse = 0;
 800196e:	9410      	str	r4, [sp, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001970:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001972:	f003 feef 	bl	8005754 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001976:	4642      	mov	r2, r8
 8001978:	a90f      	add	r1, sp, #60	; 0x3c
 800197a:	4630      	mov	r0, r6
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800197c:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800197e:	f003 fee9 	bl	8005754 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim3);
 8001982:	4630      	mov	r0, r6
 8001984:	f000 fb36 	bl	8001ff4 <HAL_TIM_MspPostInit>
  RTC_TimeTypeDef sTime = {0};
 8001988:	4621      	mov	r1, r4
 800198a:	2214      	movs	r2, #20
 800198c:	a80f      	add	r0, sp, #60	; 0x3c
 800198e:	f017 fdcc 	bl	801952a <memset>
  hrtc.Instance = RTC;
 8001992:	4b42      	ldr	r3, [pc, #264]	; (8001a9c <main+0x344>)
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001994:	f8ca 4010 	str.w	r4, [sl, #16]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001998:	e88a 0018 	stmia.w	sl, {r3, r4}
  hrtc.Init.SynchPrediv = 255;
 800199c:	22ff      	movs	r2, #255	; 0xff
  hrtc.Init.AsynchPrediv = 127;
 800199e:	237f      	movs	r3, #127	; 0x7f
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80019a0:	4650      	mov	r0, sl
  hrtc.Init.AsynchPrediv = 127;
 80019a2:	f8ca 3008 	str.w	r3, [sl, #8]
 80019a6:	9301      	str	r3, [sp, #4]
  hrtc.Init.SynchPrediv = 255;
 80019a8:	f8ca 200c 	str.w	r2, [sl, #12]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80019ac:	f8ca 4014 	str.w	r4, [sl, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80019b0:	f8ca 4018 	str.w	r4, [sl, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80019b4:	f8ca 401c 	str.w	r4, [sl, #28]
  RTC_DateTypeDef sDate = {0};
 80019b8:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80019ba:	f003 f847 	bl	8004a4c <HAL_RTC_Init>
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80019be:	462a      	mov	r2, r5
 80019c0:	a90f      	add	r1, sp, #60	; 0x3c
 80019c2:	4650      	mov	r0, sl
  sTime.Hours = 0x0;
 80019c4:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
  sTime.Minutes = 0x0;
 80019c8:	f88d 403d 	strb.w	r4, [sp, #61]	; 0x3d
  sTime.Seconds = 0x0;
 80019cc:	f88d 403e 	strb.w	r4, [sp, #62]	; 0x3e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80019d0:	9412      	str	r4, [sp, #72]	; 0x48
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80019d2:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80019d4:	f003 f88c 	bl	8004af0 <HAL_RTC_SetTime>
  sDate.Year = 0x19;
 80019d8:	2219      	movs	r2, #25
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80019da:	a90b      	add	r1, sp, #44	; 0x2c
  sDate.Year = 0x19;
 80019dc:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80019e0:	4650      	mov	r0, sl
 80019e2:	462a      	mov	r2, r5
  ADC_ChannelConfTypeDef sConfig = {0};
 80019e4:	f04f 0a18 	mov.w	sl, #24
  hadc1.Instance = ADC1;
 80019e8:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 8001aa8 <main+0x350>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80019ec:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 80019f0:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
  sDate.Date = 0x1;
 80019f4:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80019f8:	f003 f8d9 	bl	8004bae <HAL_RTC_SetDate>
  MX_FATFS_Init();
 80019fc:	f004 ff7e 	bl	80068fc <MX_FATFS_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 8001a00:	4652      	mov	r2, sl
 8001a02:	4621      	mov	r1, r4
 8001a04:	a80f      	add	r0, sp, #60	; 0x3c
  ADC_MultiModeTypeDef multimode = {0};
 8001a06:	940b      	str	r4, [sp, #44]	; 0x2c
 8001a08:	940c      	str	r4, [sp, #48]	; 0x30
 8001a0a:	940d      	str	r4, [sp, #52]	; 0x34
  ADC_ChannelConfTypeDef sConfig = {0};
 8001a0c:	f017 fd8d 	bl	801952a <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001a10:	4923      	ldr	r1, [pc, #140]	; (8001aa0 <main+0x348>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a12:	f8c9 4008 	str.w	r4, [r9, #8]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001a16:	f44f 2e80 	mov.w	lr, #262144	; 0x40000
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a1a:	4648      	mov	r0, r9
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001a1c:	e889 4002 	stmia.w	r9, {r1, lr}
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a20:	f8c9 400c 	str.w	r4, [r9, #12]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001a24:	f889 4018 	strb.w	r4, [r9, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a28:	f889 4019 	strb.w	r4, [r9, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a2c:	f889 4020 	strb.w	r4, [r9, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a30:	f8c9 4028 	str.w	r4, [r9, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a34:	f8c9 402c 	str.w	r4, [r9, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a38:	f889 4030 	strb.w	r4, [r9, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001a3c:	f8c9 4034 	str.w	r4, [r9, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001a40:	f889 4038 	strb.w	r4, [r9, #56]	; 0x38
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001a44:	f8c9 5010 	str.w	r5, [r9, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a48:	f8c9 8014 	str.w	r8, [r9, #20]
  hadc1.Init.NbrOfConversion = 4;
 8001a4c:	f8c9 801c 	str.w	r8, [r9, #28]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a50:	f000 fdaa 	bl	80025a8 <HAL_ADC_Init>
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001a54:	a90b      	add	r1, sp, #44	; 0x2c
 8001a56:	4648      	mov	r0, r9
 8001a58:	e028      	b.n	8001aac <main+0x354>
 8001a5a:	bf00      	nop
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	2000b408 	.word	0x2000b408
 8001a64:	2000b290 	.word	0x2000b290
 8001a68:	48000c00 	.word	0x48000c00
 8001a6c:	48000400 	.word	0x48000400
 8001a70:	10210000 	.word	0x10210000
 8001a74:	48000800 	.word	0x48000800
 8001a78:	40004400 	.word	0x40004400
 8001a7c:	00702890 	.word	0x00702890
 8001a80:	40005400 	.word	0x40005400
 8001a84:	2000b488 	.word	0x2000b488
 8001a88:	a0001000 	.word	0xa0001000
 8001a8c:	2000b31c 	.word	0x2000b31c
 8001a90:	40003c00 	.word	0x40003c00
 8001a94:	2000b2dc 	.word	0x2000b2dc
 8001a98:	40000400 	.word	0x40000400
 8001a9c:	40002800 	.word	0x40002800
 8001aa0:	50040000 	.word	0x50040000
 8001aa4:	2000b3e4 	.word	0x2000b3e4
 8001aa8:	2000b380 	.word	0x2000b380
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001aac:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001aae:	f001 f839 	bl	8002b24 <HAL_ADCEx_MultiModeConfigChannel>
  sConfig.Channel = ADC_CHANNEL_1;
 8001ab2:	4953      	ldr	r1, [pc, #332]	; (8001c00 <main+0x4a8>)
 8001ab4:	910f      	str	r1, [sp, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ab6:	2106      	movs	r1, #6
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001ab8:	9b01      	ldr	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001aba:	9110      	str	r1, [sp, #64]	; 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8001abc:	9111      	str	r1, [sp, #68]	; 0x44
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001abe:	4648      	mov	r0, r9
 8001ac0:	a90f      	add	r1, sp, #60	; 0x3c
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001ac2:	9312      	str	r3, [sp, #72]	; 0x48
  sConfig.Offset = 0;
 8001ac4:	9414      	str	r4, [sp, #80]	; 0x50
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001ac6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001aca:	f000 fe4d 	bl	8002768 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_2;
 8001ace:	4b4d      	ldr	r3, [pc, #308]	; (8001c04 <main+0x4ac>)
 8001ad0:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ad2:	a90f      	add	r1, sp, #60	; 0x3c
 8001ad4:	4648      	mov	r0, r9
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001ad6:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ada:	f000 fe45 	bl	8002768 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_3;
 8001ade:	4b4a      	ldr	r3, [pc, #296]	; (8001c08 <main+0x4b0>)
 8001ae0:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ae2:	a90f      	add	r1, sp, #60	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001ae4:	2312      	movs	r3, #18
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ae6:	4648      	mov	r0, r9
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001ae8:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001aea:	f000 fe3d 	bl	8002768 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_4;
 8001aee:	4b47      	ldr	r3, [pc, #284]	; (8001c0c <main+0x4b4>)
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001af0:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001af4:	a90f      	add	r1, sp, #60	; 0x3c
  hdac1.Instance = DAC1;
 8001af6:	f8df a140 	ldr.w	sl, [pc, #320]	; 8001c38 <main+0x4e0>
  sConfig.Channel = ADC_CHANNEL_4;
 8001afa:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001afc:	4648      	mov	r0, r9
 8001afe:	f000 fe33 	bl	8002768 <HAL_ADC_ConfigChannel>
  DAC_ChannelConfTypeDef sConfig = {0};
 8001b02:	4621      	mov	r1, r4
 8001b04:	2224      	movs	r2, #36	; 0x24
 8001b06:	a80f      	add	r0, sp, #60	; 0x3c
 8001b08:	f017 fd0f 	bl	801952a <memset>
  hdac1.Instance = DAC1;
 8001b0c:	4b40      	ldr	r3, [pc, #256]	; (8001c10 <main+0x4b8>)
 8001b0e:	f8ca 3000 	str.w	r3, [sl]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001b12:	4650      	mov	r0, sl
 8001b14:	f001 f8d2 	bl	8002cbc <HAL_DAC_Init>
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001b18:	4622      	mov	r2, r4
 8001b1a:	a90f      	add	r1, sp, #60	; 0x3c
 8001b1c:	4650      	mov	r0, sl
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001b1e:	940f      	str	r4, [sp, #60]	; 0x3c
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001b20:	9410      	str	r4, [sp, #64]	; 0x40
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001b22:	9411      	str	r4, [sp, #68]	; 0x44
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001b24:	9412      	str	r4, [sp, #72]	; 0x48
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001b26:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001b28:	f001 f90e 	bl	8002d48 <HAL_DAC_ConfigChannel>
  MX_USB_DEVICE_Init();
 8001b2c:	f00b fe66 	bl	800d7fc <MX_USB_DEVICE_Init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001b30:	4621      	mov	r1, r4
 8001b32:	4630      	mov	r0, r6
 8001b34:	f003 ff40 	bl	80059b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001b38:	4641      	mov	r1, r8
 8001b3a:	4630      	mov	r0, r6
 8001b3c:	f003 ff3c 	bl	80059b8 <HAL_TIM_PWM_Start>
  __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 3071);			    // PWM_CH1 = 0
 8001b40:	6833      	ldr	r3, [r6, #0]
 8001b42:	f640 32ff 	movw	r2, #3071	; 0xbff
 8001b46:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 4095);		    // PWM_CH2 = 4095 100% brilho
 8001b48:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001b4c:	639a      	str	r2, [r3, #56]	; 0x38
  ST7735_Init();
 8001b4e:	f7ff fa11 	bl	8000f74 <ST7735_Init>
  ST7735_Clear(0x0000);
 8001b52:	4620      	mov	r0, r4
 8001b54:	f7ff fad4 	bl	8001100 <ST7735_Clear>
  tft_backlight(100);
 8001b58:	2064      	movs	r0, #100	; 0x64
 8001b5a:	f000 f8e1 	bl	8001d20 <tft_backlight>
  Evt_InitQueue();
 8001b5e:	f7ff fcb5 	bl	80014cc <Evt_InitQueue>
  KeyboardInit(0x01);
 8001b62:	4628      	mov	r0, r5
 8001b64:	f7ff fb84 	bl	8001270 <KeyboardInit>
  W25qxx_Init();
 8001b68:	f000 fbf0 	bl	800234c <W25qxx_Init>
  temperatura = (float)(2000 *(3.30/4095.0));
 8001b6c:	4b29      	ldr	r3, [pc, #164]	; (8001c14 <main+0x4bc>)
 8001b6e:	4a2a      	ldr	r2, [pc, #168]	; (8001c18 <main+0x4c0>)
  sprintf(buffer, "Temperatura: %0.1f°C\n", temperatura);
 8001b70:	492a      	ldr	r1, [pc, #168]	; (8001c1c <main+0x4c4>)
  temperatura = (float)(2000 *(3.30/4095.0));
 8001b72:	601a      	str	r2, [r3, #0]
  sprintf(buffer, "Temperatura: %0.1f°C\n", temperatura);
 8001b74:	482a      	ldr	r0, [pc, #168]	; (8001c20 <main+0x4c8>)
  lv_disp_buf_init(&disp_buf, buf, buf2, LV_HOR_RES_MAX * 10);    //Initialize the display buffer
 8001b76:	4c2b      	ldr	r4, [pc, #172]	; (8001c24 <main+0x4cc>)
  sprintf(buffer, "Temperatura: %0.1f°C\n", temperatura);
 8001b78:	a31f      	add	r3, pc, #124	; (adr r3, 8001bf8 <main+0x4a0>)
 8001b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b7e:	f017 fd61 	bl	8019644 <sprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY); // send message via UART
 8001b82:	4827      	ldr	r0, [pc, #156]	; (8001c20 <main+0x4c8>)
 8001b84:	f7fe fb24 	bl	80001d0 <strlen>
 8001b88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b8c:	b282      	uxth	r2, r0
 8001b8e:	4924      	ldr	r1, [pc, #144]	; (8001c20 <main+0x4c8>)
 8001b90:	4638      	mov	r0, r7
 8001b92:	f004 f98e 	bl	8005eb2 <HAL_UART_Transmit>
  lv_disp_buf_init(&disp_buf, buf, buf2, LV_HOR_RES_MAX * 10);    //Initialize the display buffer
 8001b96:	4a24      	ldr	r2, [pc, #144]	; (8001c28 <main+0x4d0>)
 8001b98:	4924      	ldr	r1, [pc, #144]	; (8001c2c <main+0x4d4>)
 8001b9a:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8001b9e:	4620      	mov	r0, r4
 8001ba0:	f011 fd11 	bl	80135c6 <lv_disp_buf_init>
  lv_init();
 8001ba4:	f00c faa6 	bl	800e0f4 <lv_init>
  lv_disp_drv_init(&disp_drv);          //Basic initialization
 8001ba8:	a80f      	add	r0, sp, #60	; 0x3c
 8001baa:	f011 fcef 	bl	801358c <lv_disp_drv_init>
  disp_drv.hor_res = 160;               //Set the horizontal resolution
 8001bae:	23a0      	movs	r3, #160	; 0xa0
 8001bb0:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
  disp_drv.ver_res = 128;               //Set the vertical resolution
 8001bb4:	2380      	movs	r3, #128	; 0x80
 8001bb6:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  lv_disp_drv_register(&disp_drv);      //Finally register the driver
 8001bba:	a80f      	add	r0, sp, #60	; 0x3c
  disp_drv.flush_cb = ST7735_Flush_3;	//Set your driver function
 8001bbc:	4b1c      	ldr	r3, [pc, #112]	; (8001c30 <main+0x4d8>)
 8001bbe:	9312      	str	r3, [sp, #72]	; 0x48
  disp_drv.buffer = &disp_buf;          //Assign the buffer to teh display
 8001bc0:	9410      	str	r4, [sp, #64]	; 0x40
  lv_disp_drv_register(&disp_drv);      //Finally register the driver
 8001bc2:	f011 fd0f 	bl	80135e4 <lv_disp_drv_register>
  main_screen();
 8001bc6:	f006 fb95 	bl	80082f4 <main_screen>
	  if(HAL_GetTick() - timer_loop >= 500) {
 8001bca:	4c1a      	ldr	r4, [pc, #104]	; (8001c34 <main+0x4dc>)
 8001bcc:	f000 fcb8 	bl	8002540 <HAL_GetTick>
 8001bd0:	6823      	ldr	r3, [r4, #0]
 8001bd2:	1ac0      	subs	r0, r0, r3
 8001bd4:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8001bd8:	d307      	bcc.n	8001bea <main+0x492>
		  timer_loop = HAL_GetTick();
 8001bda:	f000 fcb1 	bl	8002540 <HAL_GetTick>
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001bde:	2120      	movs	r1, #32
		  timer_loop = HAL_GetTick();
 8001be0:	6020      	str	r0, [r4, #0]
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001be2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001be6:	f001 fa20 	bl	800302a <HAL_GPIO_TogglePin>
	  KeyboardEvent();
 8001bea:	f7ff fc79 	bl	80014e0 <KeyboardEvent>
	  Read_Encoder();
 8001bee:	f000 f84b 	bl	8001c88 <Read_Encoder>
	  lv_task_handler();
 8001bf2:	f012 fa87 	bl	8014104 <lv_task_handler>
	  if(HAL_GetTick() - timer_loop >= 500) {
 8001bf6:	e7e9      	b.n	8001bcc <main+0x474>
 8001bf8:	a0000000 	.word	0xa0000000
 8001bfc:	3ff9c99c 	.word	0x3ff9c99c
 8001c00:	04300002 	.word	0x04300002
 8001c04:	08600004 	.word	0x08600004
 8001c08:	0c900008 	.word	0x0c900008
 8001c0c:	10c00010 	.word	0x10c00010
 8001c10:	40007400 	.word	0x40007400
 8001c14:	20000014 	.word	0x20000014
 8001c18:	3fce4ce5 	.word	0x3fce4ce5
 8001c1c:	0801ccb7 	.word	0x0801ccb7
 8001c20:	20004cd0 	.word	0x20004cd0
 8001c24:	20004d98 	.word	0x20004d98
 8001c28:	20004050 	.word	0x20004050
 8001c2c:	200033d0 	.word	0x200033d0
 8001c30:	08001171 	.word	0x08001171
 8001c34:	20004dd0 	.word	0x20004dd0
 8001c38:	2000b27c 	.word	0x2000b27c

08001c3c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c3c:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001c3e:	4c0f      	ldr	r4, [pc, #60]	; (8001c7c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001c40:	6803      	ldr	r3, [r0, #0]
 8001c42:	42a3      	cmp	r3, r4
{
 8001c44:	4605      	mov	r5, r0
  if (htim->Instance == TIM6) {
 8001c46:	d101      	bne.n	8001c4c <HAL_TIM_PeriodElapsedCallback+0x10>
    HAL_IncTick();
 8001c48:	f000 fc6e 	bl	8002528 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM6) {
 8001c4c:	682b      	ldr	r3, [r5, #0]
 8001c4e:	42a3      	cmp	r3, r4
 8001c50:	d102      	bne.n	8001c58 <HAL_TIM_PeriodElapsedCallback+0x1c>
	  lv_tick_inc(1);
 8001c52:	2001      	movs	r0, #1
 8001c54:	f011 fd80 	bl	8013758 <lv_tick_inc>
  }
  if (htim->Instance == TIM6) {
 8001c58:	682b      	ldr	r3, [r5, #0]
 8001c5a:	42a3      	cmp	r3, r4
 8001c5c:	d10c      	bne.n	8001c78 <HAL_TIM_PeriodElapsedCallback+0x3c>
 	  timer_key++;
 8001c5e:	4a08      	ldr	r2, [pc, #32]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001c60:	6813      	ldr	r3, [r2, #0]
 8001c62:	3301      	adds	r3, #1
 	  if(timer_key >= 40) {
 8001c64:	2b27      	cmp	r3, #39	; 0x27
 8001c66:	d801      	bhi.n	8001c6c <HAL_TIM_PeriodElapsedCallback+0x30>
 	  timer_key++;
 8001c68:	6013      	str	r3, [r2, #0]
 8001c6a:	bd38      	pop	{r3, r4, r5, pc}
 		  timer_key = 0;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	6013      	str	r3, [r2, #0]
 		  Key_Read();
 	  }
   }
  /* USER CODE END Callback 1 */
}
 8001c70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 		  Key_Read();
 8001c74:	f7ff bc02 	b.w	800147c <Key_Read>
 8001c78:	bd38      	pop	{r3, r4, r5, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40001000 	.word	0x40001000
 8001c80:	20004dcc 	.word	0x20004dcc

08001c84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c84:	4770      	bx	lr
	...

08001c88 <Read_Encoder>:

uint8_t aVal = 0, bVal = 0, CLKLast = 0, bCW = 0, CCW = 0, CLKLast1 = 0;
uint32_t encoderPosCount = 0;

uint16_t Read_Encoder(void)
{
 8001c88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* BEGIN � Code for encoder */
	aVal = HAL_GPIO_ReadPin(ENC_B_GPIO_Port, ENC_B_Pin);
 8001c8a:	2110      	movs	r1, #16
 8001c8c:	481c      	ldr	r0, [pc, #112]	; (8001d00 <Read_Encoder+0x78>)
	if (aVal != CLKLast)
 8001c8e:	4e1d      	ldr	r6, [pc, #116]	; (8001d04 <Read_Encoder+0x7c>)
	aVal = HAL_GPIO_ReadPin(ENC_B_GPIO_Port, ENC_B_Pin);
 8001c90:	4d1d      	ldr	r5, [pc, #116]	; (8001d08 <Read_Encoder+0x80>)
 8001c92:	f001 f9bf 	bl	8003014 <HAL_GPIO_ReadPin>
	if (aVal != CLKLast)
 8001c96:	7833      	ldrb	r3, [r6, #0]
	aVal = HAL_GPIO_ReadPin(ENC_B_GPIO_Port, ENC_B_Pin);
 8001c98:	7028      	strb	r0, [r5, #0]
	if (aVal != CLKLast)
 8001c9a:	4283      	cmp	r3, r0
 8001c9c:	d026      	beq.n	8001cec <Read_Encoder+0x64>
	{ // Means the knob is rotating
	  // if the knob is rotating, we need to determine direction
	  // We do that by reading pin B.
//		if(!aVal)
//		{ // aVal is false or 0 then proceed. This prevents double incrementation.
			if (HAL_GPIO_ReadPin(ENC_A_GPIO_Port, ENC_A_Pin) != aVal)
 8001c9e:	2104      	movs	r1, #4
 8001ca0:	4817      	ldr	r0, [pc, #92]	; (8001d00 <Read_Encoder+0x78>)
 8001ca2:	4c1a      	ldr	r4, [pc, #104]	; (8001d0c <Read_Encoder+0x84>)
 8001ca4:	f001 f9b6 	bl	8003014 <HAL_GPIO_ReadPin>
 8001ca8:	782f      	ldrb	r7, [r5, #0]
 8001caa:	4a19      	ldr	r2, [pc, #100]	; (8001d10 <Read_Encoder+0x88>)
			{ // Means pin A Changed first � We�re Rotating Clockwise
				encoderPosCount++;
 8001cac:	6823      	ldr	r3, [r4, #0]
			if (HAL_GPIO_ReadPin(ENC_A_GPIO_Port, ENC_A_Pin) != aVal)
 8001cae:	42b8      	cmp	r0, r7
 8001cb0:	d020      	beq.n	8001cf4 <Read_Encoder+0x6c>
				encoderPosCount++;
 8001cb2:	3301      	adds	r3, #1
				if(encoderPosCount >= 100) encoderPosCount = 100;
 8001cb4:	2b63      	cmp	r3, #99	; 0x63
 8001cb6:	bf88      	it	hi
 8001cb8:	2364      	movhi	r3, #100	; 0x64
 8001cba:	6023      	str	r3, [r4, #0]
				bCW = true;
 8001cbc:	2301      	movs	r3, #1
			}
			else {// Otherwise B changed first and we�re moving CCW
				if(encoderPosCount >= 1) encoderPosCount--;
				bCW = false;
			}
			sprintf(buffer, "Encoder - aVal: %d DT: %d, EncoderPosition: %ld\n", aVal, HAL_GPIO_ReadPin(ENC_A_GPIO_Port, ENC_A_Pin), encoderPosCount);
 8001cbe:	2104      	movs	r1, #4
 8001cc0:	480f      	ldr	r0, [pc, #60]	; (8001d00 <Read_Encoder+0x78>)
				bCW = false;
 8001cc2:	7013      	strb	r3, [r2, #0]
			sprintf(buffer, "Encoder - aVal: %d DT: %d, EncoderPosition: %ld\n", aVal, HAL_GPIO_ReadPin(ENC_A_GPIO_Port, ENC_A_Pin), encoderPosCount);
 8001cc4:	f001 f9a6 	bl	8003014 <HAL_GPIO_ReadPin>
 8001cc8:	6823      	ldr	r3, [r4, #0]
 8001cca:	4912      	ldr	r1, [pc, #72]	; (8001d14 <Read_Encoder+0x8c>)
 8001ccc:	9300      	str	r3, [sp, #0]
 8001cce:	463a      	mov	r2, r7
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	4811      	ldr	r0, [pc, #68]	; (8001d18 <Read_Encoder+0x90>)
 8001cd4:	f017 fcb6 	bl	8019644 <sprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001cd8:	480f      	ldr	r0, [pc, #60]	; (8001d18 <Read_Encoder+0x90>)
 8001cda:	f7fe fa79 	bl	80001d0 <strlen>
 8001cde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ce2:	b282      	uxth	r2, r0
 8001ce4:	490c      	ldr	r1, [pc, #48]	; (8001d18 <Read_Encoder+0x90>)
 8001ce6:	480d      	ldr	r0, [pc, #52]	; (8001d1c <Read_Encoder+0x94>)
 8001ce8:	f004 f8e3 	bl	8005eb2 <HAL_UART_Transmit>
			//tft_backlight(encoderPosCount);
//		}
	}
	CLKLast = aVal;
 8001cec:	7828      	ldrb	r0, [r5, #0]
 8001cee:	7030      	strb	r0, [r6, #0]
	return aVal;
}
 8001cf0:	b003      	add	sp, #12
 8001cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if(encoderPosCount >= 1) encoderPosCount--;
 8001cf4:	b10b      	cbz	r3, 8001cfa <Read_Encoder+0x72>
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	6023      	str	r3, [r4, #0]
				bCW = false;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	e7df      	b.n	8001cbe <Read_Encoder+0x36>
 8001cfe:	bf00      	nop
 8001d00:	48000400 	.word	0x48000400
 8001d04:	20004dd4 	.word	0x20004dd4
 8001d08:	20004dd5 	.word	0x20004dd5
 8001d0c:	20004dd8 	.word	0x20004dd8
 8001d10:	20004dd6 	.word	0x20004dd6
 8001d14:	0801ccce 	.word	0x0801ccce
 8001d18:	20004cd0 	.word	0x20004cd0
 8001d1c:	2000b408 	.word	0x2000b408

08001d20 <tft_backlight>:
	}
}

void tft_backlight(uint16_t value)
{
	if(value >= 0 && value <= 100) {
 8001d20:	2864      	cmp	r0, #100	; 0x64
 8001d22:	d809      	bhi.n	8001d38 <tft_backlight+0x18>
		tft_pwm = value * 32;
 8001d24:	0141      	lsls	r1, r0, #5
 8001d26:	4b05      	ldr	r3, [pc, #20]	; (8001d3c <tft_backlight+0x1c>)
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, tft_pwm);		// PWM_CH2 = TFT
		logI("I - TFT_PWM: %ld\n\r", tft_pwm);
 8001d28:	4805      	ldr	r0, [pc, #20]	; (8001d40 <tft_backlight+0x20>)
		tft_pwm = value * 32;
 8001d2a:	b289      	uxth	r1, r1
 8001d2c:	8019      	strh	r1, [r3, #0]
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, tft_pwm);		// PWM_CH2 = TFT
 8001d2e:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <tft_backlight+0x24>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6399      	str	r1, [r3, #56]	; 0x38
		logI("I - TFT_PWM: %ld\n\r", tft_pwm);
 8001d34:	f7ff bc9e 	b.w	8001674 <logI>
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	20004dca 	.word	0x20004dca
 8001d40:	0801ccff 	.word	0x0801ccff
 8001d44:	2000b2dc 	.word	0x2000b2dc

08001d48 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d48:	4b0a      	ldr	r3, [pc, #40]	; (8001d74 <HAL_MspInit+0x2c>)
 8001d4a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d4c:	f042 0201 	orr.w	r2, r2, #1
 8001d50:	661a      	str	r2, [r3, #96]	; 0x60
 8001d52:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8001d54:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d56:	f002 0201 	and.w	r2, r2, #1
 8001d5a:	9200      	str	r2, [sp, #0]
 8001d5c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d5e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d60:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d64:	659a      	str	r2, [r3, #88]	; 0x58
 8001d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6c:	9301      	str	r3, [sp, #4]
 8001d6e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d70:	b002      	add	sp, #8
 8001d72:	4770      	bx	lr
 8001d74:	40021000 	.word	0x40021000

08001d78 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d78:	b510      	push	{r4, lr}
 8001d7a:	4604      	mov	r4, r0
 8001d7c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7e:	2214      	movs	r2, #20
 8001d80:	2100      	movs	r1, #0
 8001d82:	a803      	add	r0, sp, #12
 8001d84:	f017 fbd1 	bl	801952a <memset>
  if(hadc->Instance==ADC1)
 8001d88:	6822      	ldr	r2, [r4, #0]
 8001d8a:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <HAL_ADC_MspInit+0x58>)
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d11d      	bne.n	8001dcc <HAL_ADC_MspInit+0x54>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001d90:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8001d94:	f5a3 33f8 	sub.w	r3, r3, #126976	; 0x1f000
    PC3     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d98:	a903      	add	r1, sp, #12
    __HAL_RCC_ADC_CLK_ENABLE();
 8001d9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d9c:	480d      	ldr	r0, [pc, #52]	; (8001dd4 <HAL_ADC_MspInit+0x5c>)
    __HAL_RCC_ADC_CLK_ENABLE();
 8001d9e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001da2:	64da      	str	r2, [r3, #76]	; 0x4c
 8001da4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001da6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001daa:	9201      	str	r2, [sp, #4]
 8001dac:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001db0:	f042 0204 	orr.w	r2, r2, #4
 8001db4:	64da      	str	r2, [r3, #76]	; 0x4c
 8001db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db8:	f003 0304 	and.w	r3, r3, #4
 8001dbc:	9302      	str	r3, [sp, #8]
 8001dbe:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001dc0:	230f      	movs	r3, #15
 8001dc2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001dc4:	230b      	movs	r3, #11
 8001dc6:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dc8:	f001 f848 	bl	8002e5c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001dcc:	b008      	add	sp, #32
 8001dce:	bd10      	pop	{r4, pc}
 8001dd0:	50040000 	.word	0x50040000
 8001dd4:	48000800 	.word	0x48000800

08001dd8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001dd8:	b510      	push	{r4, lr}
 8001dda:	4604      	mov	r4, r0
 8001ddc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dde:	2214      	movs	r2, #20
 8001de0:	2100      	movs	r1, #0
 8001de2:	a803      	add	r0, sp, #12
 8001de4:	f017 fba1 	bl	801952a <memset>
  if(hdac->Instance==DAC1)
 8001de8:	6822      	ldr	r2, [r4, #0]
 8001dea:	4b15      	ldr	r3, [pc, #84]	; (8001e40 <HAL_DAC_MspInit+0x68>)
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d124      	bne.n	8001e3a <HAL_DAC_MspInit+0x62>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001df0:	f503 33ce 	add.w	r3, r3, #105472	; 0x19c00
    PA4     ------> DAC1_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df4:	a903      	add	r1, sp, #12
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001df6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001df8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001dfc:	659a      	str	r2, [r3, #88]	; 0x58
 8001dfe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e00:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8001e04:	9201      	str	r2, [sp, #4]
 8001e06:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e0a:	f042 0201 	orr.w	r2, r2, #1
 8001e0e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	9302      	str	r3, [sp, #8]
 8001e18:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001e1a:	2310      	movs	r3, #16
 8001e1c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e22:	2303      	movs	r3, #3
 8001e24:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e26:	f001 f819 	bl	8002e5c <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2036      	movs	r0, #54	; 0x36
 8001e2e:	4611      	mov	r1, r2
 8001e30:	f000 ff02 	bl	8002c38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001e34:	2036      	movs	r0, #54	; 0x36
 8001e36:	f000 ff33 	bl	8002ca0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001e3a:	b008      	add	sp, #32
 8001e3c:	bd10      	pop	{r4, pc}
 8001e3e:	bf00      	nop
 8001e40:	40007400 	.word	0x40007400

08001e44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e44:	b510      	push	{r4, lr}
 8001e46:	4604      	mov	r4, r0
 8001e48:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e4a:	2214      	movs	r2, #20
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	a803      	add	r0, sp, #12
 8001e50:	f017 fb6b 	bl	801952a <memset>
  if(hi2c->Instance==I2C1)
 8001e54:	6822      	ldr	r2, [r4, #0]
 8001e56:	4b13      	ldr	r3, [pc, #76]	; (8001ea4 <HAL_I2C_MspInit+0x60>)
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d121      	bne.n	8001ea0 <HAL_I2C_MspInit+0x5c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e5c:	4c12      	ldr	r4, [pc, #72]	; (8001ea8 <HAL_I2C_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e5e:	4813      	ldr	r0, [pc, #76]	; (8001eac <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e60:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001e62:	f043 0302 	orr.w	r3, r3, #2
 8001e66:	64e3      	str	r3, [r4, #76]	; 0x4c
 8001e68:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	9301      	str	r3, [sp, #4]
 8001e70:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e76:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e78:	2312      	movs	r3, #18
 8001e7a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e80:	2303      	movs	r3, #3
 8001e82:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e84:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e86:	2304      	movs	r3, #4
 8001e88:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e8a:	f000 ffe7 	bl	8002e5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001e90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e94:	65a3      	str	r3, [r4, #88]	; 0x58
 8001e96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001e98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e9c:	9302      	str	r3, [sp, #8]
 8001e9e:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ea0:	b008      	add	sp, #32
 8001ea2:	bd10      	pop	{r4, pc}
 8001ea4:	40005400 	.word	0x40005400
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	48000400 	.word	0x48000400

08001eb0 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001eb0:	b570      	push	{r4, r5, r6, lr}
 8001eb2:	4604      	mov	r4, r0
 8001eb4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb6:	2214      	movs	r2, #20
 8001eb8:	2100      	movs	r1, #0
 8001eba:	a803      	add	r0, sp, #12
 8001ebc:	f017 fb35 	bl	801952a <memset>
  if(hqspi->Instance==QUADSPI)
 8001ec0:	6822      	ldr	r2, [r4, #0]
 8001ec2:	4b1e      	ldr	r3, [pc, #120]	; (8001f3c <HAL_QSPI_MspInit+0x8c>)
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d137      	bne.n	8001f38 <HAL_QSPI_MspInit+0x88>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001ec8:	f103 4320 	add.w	r3, r3, #2684354560	; 0xa0000000
 8001ecc:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
    PB1     ------> QUADSPI_BK1_IO0
    PB10     ------> QUADSPI_CLK
    PB11     ------> QUADSPI_NCS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed0:	2602      	movs	r6, #2
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001ed2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ed4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ed8:	651a      	str	r2, [r3, #80]	; 0x50
 8001eda:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001edc:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001ee0:	9200      	str	r2, [sp, #0]
 8001ee2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ee6:	f042 0201 	orr.w	r2, r2, #1
 8001eea:	64da      	str	r2, [r3, #76]	; 0x4c
 8001eec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001eee:	f002 0201 	and.w	r2, r2, #1
 8001ef2:	9201      	str	r2, [sp, #4]
 8001ef4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ef8:	f042 0202 	orr.w	r2, r2, #2
 8001efc:	64da      	str	r2, [r3, #76]	; 0x4c
 8001efe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f00:	9604      	str	r6, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	9302      	str	r3, [sp, #8]
 8001f08:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f0a:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f0c:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001f0e:	240a      	movs	r4, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f10:	a903      	add	r1, sp, #12
 8001f12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f16:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f18:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001f1a:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f1c:	f000 ff9e 	bl	8002e5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 8001f20:	f640 4303 	movw	r3, #3075	; 0xc03
 8001f24:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f26:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f28:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f2a:	4805      	ldr	r0, [pc, #20]	; (8001f40 <HAL_QSPI_MspInit+0x90>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2c:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f30:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001f32:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f34:	f000 ff92 	bl	8002e5c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001f38:	b008      	add	sp, #32
 8001f3a:	bd70      	pop	{r4, r5, r6, pc}
 8001f3c:	a0001000 	.word	0xa0001000
 8001f40:	48000400 	.word	0x48000400

08001f44 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8001f44:	6802      	ldr	r2, [r0, #0]
 8001f46:	4b05      	ldr	r3, [pc, #20]	; (8001f5c <HAL_RTC_MspInit+0x18>)
 8001f48:	429a      	cmp	r2, r3
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001f4a:	bf01      	itttt	eq
 8001f4c:	4a04      	ldreq	r2, [pc, #16]	; (8001f60 <HAL_RTC_MspInit+0x1c>)
 8001f4e:	f8d2 3090 	ldreq.w	r3, [r2, #144]	; 0x90
 8001f52:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
 8001f56:	f8c2 3090 	streq.w	r3, [r2, #144]	; 0x90
 8001f5a:	4770      	bx	lr
 8001f5c:	40002800 	.word	0x40002800
 8001f60:	40021000 	.word	0x40021000

08001f64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f64:	b510      	push	{r4, lr}
 8001f66:	4604      	mov	r4, r0
 8001f68:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f6a:	2214      	movs	r2, #20
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	a803      	add	r0, sp, #12
 8001f70:	f017 fadb 	bl	801952a <memset>
  if(hspi->Instance==SPI3)
 8001f74:	6822      	ldr	r2, [r4, #0]
 8001f76:	4b13      	ldr	r3, [pc, #76]	; (8001fc4 <HAL_SPI_MspInit+0x60>)
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d120      	bne.n	8001fbe <HAL_SPI_MspInit+0x5a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001f7c:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f80:	a903      	add	r1, sp, #12
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001f82:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f84:	4810      	ldr	r0, [pc, #64]	; (8001fc8 <HAL_SPI_MspInit+0x64>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001f86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f8a:	659a      	str	r2, [r3, #88]	; 0x58
 8001f8c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001f8e:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8001f92:	9201      	str	r2, [sp, #4]
 8001f94:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f98:	f042 0204 	orr.w	r2, r2, #4
 8001f9c:	64da      	str	r2, [r3, #76]	; 0x4c
 8001f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa0:	f003 0304 	and.w	r3, r3, #4
 8001fa4:	9302      	str	r3, [sp, #8]
 8001fa6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001fa8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001fac:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fae:	2302      	movs	r3, #2
 8001fb0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001fb6:	2306      	movs	r3, #6
 8001fb8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fba:	f000 ff4f 	bl	8002e5c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001fbe:	b008      	add	sp, #32
 8001fc0:	bd10      	pop	{r4, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40003c00 	.word	0x40003c00
 8001fc8:	48000800 	.word	0x48000800

08001fcc <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM3)
 8001fcc:	6802      	ldr	r2, [r0, #0]
 8001fce:	4b08      	ldr	r3, [pc, #32]	; (8001ff0 <HAL_TIM_Base_MspInit+0x24>)
 8001fd0:	429a      	cmp	r2, r3
{
 8001fd2:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM3)
 8001fd4:	d10a      	bne.n	8001fec <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fd6:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8001fda:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001fdc:	f042 0202 	orr.w	r2, r2, #2
 8001fe0:	659a      	str	r2, [r3, #88]	; 0x58
 8001fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	9301      	str	r3, [sp, #4]
 8001fea:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001fec:	b002      	add	sp, #8
 8001fee:	4770      	bx	lr
 8001ff0:	40000400 	.word	0x40000400

08001ff4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ff4:	b510      	push	{r4, lr}
 8001ff6:	4604      	mov	r4, r0
 8001ff8:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ffa:	2214      	movs	r2, #20
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	a801      	add	r0, sp, #4
 8002000:	f017 fa93 	bl	801952a <memset>
  if(htim->Instance==TIM3)
 8002004:	6822      	ldr	r2, [r4, #0]
 8002006:	4b0c      	ldr	r3, [pc, #48]	; (8002038 <HAL_TIM_MspPostInit+0x44>)
 8002008:	429a      	cmp	r2, r3
 800200a:	d113      	bne.n	8002034 <HAL_TIM_MspPostInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800200c:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
    GPIO_InitStruct.Pin = PWM_LED_Pin|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002010:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002012:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002014:	4809      	ldr	r0, [pc, #36]	; (800203c <HAL_TIM_MspPostInit+0x48>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002016:	f042 0204 	orr.w	r2, r2, #4
 800201a:	64da      	str	r2, [r3, #76]	; 0x4c
 800201c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800201e:	f003 0304 	and.w	r3, r3, #4
 8002022:	9300      	str	r3, [sp, #0]
 8002024:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = PWM_LED_Pin|GPIO_PIN_7;
 8002026:	23c0      	movs	r3, #192	; 0xc0
 8002028:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202a:	2302      	movs	r3, #2
 800202c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800202e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002030:	f000 ff14 	bl	8002e5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002034:	b006      	add	sp, #24
 8002036:	bd10      	pop	{r4, pc}
 8002038:	40000400 	.word	0x40000400
 800203c:	48000800 	.word	0x48000800

08002040 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002040:	b510      	push	{r4, lr}
 8002042:	4604      	mov	r4, r0
 8002044:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002046:	2214      	movs	r2, #20
 8002048:	2100      	movs	r1, #0
 800204a:	a803      	add	r0, sp, #12
 800204c:	f017 fa6d 	bl	801952a <memset>
  if(huart->Instance==USART2)
 8002050:	6822      	ldr	r2, [r4, #0]
 8002052:	4b13      	ldr	r3, [pc, #76]	; (80020a0 <HAL_UART_MspInit+0x60>)
 8002054:	429a      	cmp	r2, r3
 8002056:	d120      	bne.n	800209a <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002058:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800205c:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 800205e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002060:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002064:	659a      	str	r2, [r3, #88]	; 0x58
 8002066:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002068:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800206c:	9201      	str	r2, [sp, #4]
 800206e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002070:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002072:	f042 0201 	orr.w	r2, r2, #1
 8002076:	64da      	str	r2, [r3, #76]	; 0x4c
 8002078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	9302      	str	r3, [sp, #8]
 8002080:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002082:	230c      	movs	r3, #12
 8002084:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002086:	2302      	movs	r3, #2
 8002088:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800208a:	2303      	movs	r3, #3
 800208c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800208e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002092:	2307      	movs	r3, #7
 8002094:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002096:	f000 fee1 	bl	8002e5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800209a:	b008      	add	sp, #32
 800209c:	bd10      	pop	{r4, pc}
 800209e:	bf00      	nop
 80020a0:	40004400 	.word	0x40004400

080020a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020a4:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80020a6:	4601      	mov	r1, r0
{
 80020a8:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80020aa:	2200      	movs	r2, #0
 80020ac:	2036      	movs	r0, #54	; 0x36
 80020ae:	f000 fdc3 	bl	8002c38 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 80020b2:	2036      	movs	r0, #54	; 0x36
 80020b4:	f000 fdf4 	bl	8002ca0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80020b8:	4b14      	ldr	r3, [pc, #80]	; (800210c <HAL_InitTick+0x68>)
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80020ba:	4c15      	ldr	r4, [pc, #84]	; (8002110 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 80020bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80020be:	f042 0210 	orr.w	r2, r2, #16
 80020c2:	659a      	str	r2, [r3, #88]	; 0x58
 80020c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c6:	f003 0310 	and.w	r3, r3, #16
 80020ca:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020cc:	a901      	add	r1, sp, #4
 80020ce:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 80020d0:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020d2:	f002 f94d 	bl	8004370 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80020d6:	f002 f927 	bl	8004328 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 80020da:	4b0e      	ldr	r3, [pc, #56]	; (8002114 <HAL_InitTick+0x70>)
 80020dc:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80020de:	f240 33e7 	movw	r3, #999	; 0x3e7
 80020e2:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80020e4:	4b0c      	ldr	r3, [pc, #48]	; (8002118 <HAL_InitTick+0x74>)
 80020e6:	fbb0 f0f3 	udiv	r0, r0, r3
 80020ea:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
 80020ec:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 80020ee:	6060      	str	r0, [r4, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80020f0:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 80020f2:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020f4:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80020f6:	f003 fab3 	bl	8005660 <HAL_TIM_Base_Init>
 80020fa:	b920      	cbnz	r0, 8002106 <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80020fc:	4620      	mov	r0, r4
 80020fe:	f003 f97d 	bl	80053fc <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8002102:	b008      	add	sp, #32
 8002104:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 8002106:	2001      	movs	r0, #1
 8002108:	e7fb      	b.n	8002102 <HAL_InitTick+0x5e>
 800210a:	bf00      	nop
 800210c:	40021000 	.word	0x40021000
 8002110:	2000b4cc 	.word	0x2000b4cc
 8002114:	40001000 	.word	0x40001000
 8002118:	000f4240 	.word	0x000f4240

0800211c <NMI_Handler>:
 800211c:	4770      	bx	lr

0800211e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800211e:	e7fe      	b.n	800211e <HardFault_Handler>

08002120 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002120:	e7fe      	b.n	8002120 <MemManage_Handler>

08002122 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002122:	e7fe      	b.n	8002122 <BusFault_Handler>

08002124 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002124:	e7fe      	b.n	8002124 <UsageFault_Handler>

08002126 <SVC_Handler>:
 8002126:	4770      	bx	lr

08002128 <DebugMon_Handler>:
 8002128:	4770      	bx	lr

0800212a <PendSV_Handler>:
 800212a:	4770      	bx	lr

0800212c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800212c:	4770      	bx	lr
	...

08002130 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002130:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002132:	4804      	ldr	r0, [pc, #16]	; (8002144 <TIM6_DAC_IRQHandler+0x14>)
 8002134:	f003 f97d 	bl	8005432 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8002138:	4803      	ldr	r0, [pc, #12]	; (8002148 <TIM6_DAC_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800213a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_DAC_IRQHandler(&hdac1);
 800213e:	f000 bdd1 	b.w	8002ce4 <HAL_DAC_IRQHandler>
 8002142:	bf00      	nop
 8002144:	2000b4cc 	.word	0x2000b4cc
 8002148:	2000b27c 	.word	0x2000b27c

0800214c <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800214c:	4801      	ldr	r0, [pc, #4]	; (8002154 <OTG_FS_IRQHandler+0x8>)
 800214e:	f001 b8b7 	b.w	80032c0 <HAL_PCD_IRQHandler>
 8002152:	bf00      	nop
 8002154:	2000be3c 	.word	0x2000be3c

08002158 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002158:	b570      	push	{r4, r5, r6, lr}
 800215a:	460e      	mov	r6, r1
 800215c:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800215e:	460c      	mov	r4, r1
 8002160:	1ba3      	subs	r3, r4, r6
 8002162:	429d      	cmp	r5, r3
 8002164:	dc01      	bgt.n	800216a <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8002166:	4628      	mov	r0, r5
 8002168:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800216a:	f3af 8000 	nop.w
 800216e:	f804 0b01 	strb.w	r0, [r4], #1
 8002172:	e7f5      	b.n	8002160 <_read+0x8>

08002174 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002174:	b570      	push	{r4, r5, r6, lr}
 8002176:	460e      	mov	r6, r1
 8002178:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800217a:	460c      	mov	r4, r1
 800217c:	1ba3      	subs	r3, r4, r6
 800217e:	429d      	cmp	r5, r3
 8002180:	dc01      	bgt.n	8002186 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8002182:	4628      	mov	r0, r5
 8002184:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8002186:	f814 0b01 	ldrb.w	r0, [r4], #1
 800218a:	f3af 8000 	nop.w
 800218e:	e7f5      	b.n	800217c <_write+0x8>

08002190 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8002190:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002192:	4b0a      	ldr	r3, [pc, #40]	; (80021bc <_sbrk+0x2c>)
 8002194:	6819      	ldr	r1, [r3, #0]
{
 8002196:	4602      	mov	r2, r0
	if (heap_end == 0)
 8002198:	b909      	cbnz	r1, 800219e <_sbrk+0xe>
		heap_end = &end;
 800219a:	4909      	ldr	r1, [pc, #36]	; (80021c0 <_sbrk+0x30>)
 800219c:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800219e:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80021a0:	4669      	mov	r1, sp
 80021a2:	4402      	add	r2, r0
 80021a4:	428a      	cmp	r2, r1
 80021a6:	d906      	bls.n	80021b6 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80021a8:	f016 ff7c 	bl	80190a4 <__errno>
 80021ac:	230c      	movs	r3, #12
 80021ae:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80021b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021b4:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80021b6:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80021b8:	bd08      	pop	{r3, pc}
 80021ba:	bf00      	nop
 80021bc:	20004ddc 	.word	0x20004ddc
 80021c0:	2000c5cc 	.word	0x2000c5cc

080021c4 <_close>:

int _close(int file)
{
	return -1;
}
 80021c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021c8:	4770      	bx	lr

080021ca <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80021ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021ce:	604b      	str	r3, [r1, #4]
	return 0;
}
 80021d0:	2000      	movs	r0, #0
 80021d2:	4770      	bx	lr

080021d4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80021d4:	2001      	movs	r0, #1
 80021d6:	4770      	bx	lr

080021d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80021d8:	2000      	movs	r0, #0
 80021da:	4770      	bx	lr

080021dc <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021dc:	490f      	ldr	r1, [pc, #60]	; (800221c <SystemInit+0x40>)
 80021de:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80021e2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80021ea:	4b0d      	ldr	r3, [pc, #52]	; (8002220 <SystemInit+0x44>)
 80021ec:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80021ee:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 80021f0:	f042 0201 	orr.w	r2, r2, #1
 80021f4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 80021f6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 80021fe:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8002202:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002204:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002208:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002210:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002212:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002214:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002218:	608b      	str	r3, [r1, #8]
 800221a:	4770      	bx	lr
 800221c:	e000ed00 	.word	0xe000ed00
 8002220:	40021000 	.word	0x40021000

08002224 <W25qxx_Spi>:
#define	W25qxx_Delay(delay)		HAL_Delay(delay)
#endif

//###################################################################################################################
uint8_t	W25qxx_Spi(uint8_t	Data)
{
 8002224:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t	ret;
	HAL_SPI_TransmitReceive(&hspi3, &Data, &ret, 1, 10);
 8002226:	230a      	movs	r3, #10
{
 8002228:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_SPI_TransmitReceive(&hspi3, &Data, &ret, 1, 10);
 800222c:	9300      	str	r3, [sp, #0]
 800222e:	f10d 0217 	add.w	r2, sp, #23
 8002232:	2301      	movs	r3, #1
 8002234:	f10d 010f 	add.w	r1, sp, #15
 8002238:	4803      	ldr	r0, [pc, #12]	; (8002248 <W25qxx_Spi+0x24>)
 800223a:	f002 fe8e 	bl	8004f5a <HAL_SPI_TransmitReceive>
	//HAL_SPI_TransmitReceive(&hspi2, &Data, &ret, 1, 10);
	return ret;
}
 800223e:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8002242:	b007      	add	sp, #28
 8002244:	f85d fb04 	ldr.w	pc, [sp], #4
 8002248:	2000b31c 	.word	0x2000b31c

0800224c <W25qxx_ReadID>:

//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 800224c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 800224e:	4d0f      	ldr	r5, [pc, #60]	; (800228c <W25qxx_ReadID+0x40>)
 8002250:	2200      	movs	r2, #0
 8002252:	2104      	movs	r1, #4
 8002254:	4628      	mov	r0, r5
 8002256:	f000 fee3 	bl	8003020 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x9F);
 800225a:	209f      	movs	r0, #159	; 0x9f
 800225c:	f7ff ffe2 	bl	8002224 <W25qxx_Spi>
  Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002260:	20a5      	movs	r0, #165	; 0xa5
 8002262:	f7ff ffdf 	bl	8002224 <W25qxx_Spi>
 8002266:	4607      	mov	r7, r0
  Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002268:	20a5      	movs	r0, #165	; 0xa5
 800226a:	f7ff ffdb 	bl	8002224 <W25qxx_Spi>
 800226e:	4604      	mov	r4, r0
  Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002270:	20a5      	movs	r0, #165	; 0xa5
 8002272:	f7ff ffd7 	bl	8002224 <W25qxx_Spi>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8002276:	2201      	movs	r2, #1
  Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002278:	4606      	mov	r6, r0
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 800227a:	2104      	movs	r1, #4
 800227c:	4628      	mov	r0, r5
 800227e:	f000 fecf 	bl	8003020 <HAL_GPIO_WritePin>
  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8002282:	0220      	lsls	r0, r4, #8
 8002284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
  return Temp;
}
 8002288:	4330      	orrs	r0, r6
 800228a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800228c:	48000c00 	.word	0x48000c00

08002290 <W25qxx_ReadUniqID>:

//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8002290:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8002292:	2200      	movs	r2, #0
 8002294:	2104      	movs	r1, #4
 8002296:	4811      	ldr	r0, [pc, #68]	; (80022dc <W25qxx_ReadUniqID+0x4c>)
  W25qxx_Spi(0x4B);
	for(uint8_t	i=0;i<4;i++)
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
	for(uint8_t	i=0;i<8;i++)
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002298:	4d11      	ldr	r5, [pc, #68]	; (80022e0 <W25qxx_ReadUniqID+0x50>)
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 800229a:	f000 fec1 	bl	8003020 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x4B);
 800229e:	204b      	movs	r0, #75	; 0x4b
 80022a0:	f7ff ffc0 	bl	8002224 <W25qxx_Spi>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80022a4:	20a5      	movs	r0, #165	; 0xa5
 80022a6:	f7ff ffbd 	bl	8002224 <W25qxx_Spi>
 80022aa:	20a5      	movs	r0, #165	; 0xa5
 80022ac:	f7ff ffba 	bl	8002224 <W25qxx_Spi>
 80022b0:	20a5      	movs	r0, #165	; 0xa5
 80022b2:	f7ff ffb7 	bl	8002224 <W25qxx_Spi>
 80022b6:	20a5      	movs	r0, #165	; 0xa5
 80022b8:	f7ff ffb4 	bl	8002224 <W25qxx_Spi>
 80022bc:	2400      	movs	r4, #0
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80022be:	20a5      	movs	r0, #165	; 0xa5
 80022c0:	f7ff ffb0 	bl	8002224 <W25qxx_Spi>
 80022c4:	1963      	adds	r3, r4, r5
 80022c6:	3401      	adds	r4, #1
	for(uint8_t	i=0;i<8;i++)
 80022c8:	2c08      	cmp	r4, #8
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80022ca:	7058      	strb	r0, [r3, #1]
	for(uint8_t	i=0;i<8;i++)
 80022cc:	d1f7      	bne.n	80022be <W25qxx_ReadUniqID+0x2e>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 80022ce:	2201      	movs	r2, #1
 80022d0:	2104      	movs	r1, #4
 80022d2:	4802      	ldr	r0, [pc, #8]	; (80022dc <W25qxx_ReadUniqID+0x4c>)
}
 80022d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 80022d8:	f000 bea2 	b.w	8003020 <HAL_GPIO_WritePin>
 80022dc:	48000c00 	.word	0x48000c00
 80022e0:	2000b50c 	.word	0x2000b50c

080022e4 <W25qxx_ReadStatusRegister>:
  W25qxx_Delay(1);
}

//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t	SelectStatusRegister_1_2_3)
{
 80022e4:	b538      	push	{r3, r4, r5, lr}
	uint8_t	status=0;

	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80022e6:	2200      	movs	r2, #0
{
 80022e8:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80022ea:	2104      	movs	r1, #4
 80022ec:	4815      	ldr	r0, [pc, #84]	; (8002344 <W25qxx_ReadStatusRegister+0x60>)
 80022ee:	4d16      	ldr	r5, [pc, #88]	; (8002348 <W25qxx_ReadStatusRegister+0x64>)
 80022f0:	f000 fe96 	bl	8003020 <HAL_GPIO_WritePin>
	if(SelectStatusRegister_1_2_3==1)
 80022f4:	2c01      	cmp	r4, #1
 80022f6:	d10f      	bne.n	8002318 <W25qxx_ReadStatusRegister+0x34>
	{
		W25qxx_Spi(0x05);
 80022f8:	2005      	movs	r0, #5
 80022fa:	f7ff ff93 	bl	8002224 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80022fe:	20a5      	movs	r0, #165	; 0xa5
 8002300:	f7ff ff90 	bl	8002224 <W25qxx_Spi>
 8002304:	4604      	mov	r4, r0
		w25qxx.StatusRegister1 = status;
 8002306:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
	{
		W25qxx_Spi(0x15);
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);
		w25qxx.StatusRegister3 = status;
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 800230a:	2201      	movs	r2, #1
 800230c:	2104      	movs	r1, #4
 800230e:	480d      	ldr	r0, [pc, #52]	; (8002344 <W25qxx_ReadStatusRegister+0x60>)
 8002310:	f000 fe86 	bl	8003020 <HAL_GPIO_WritePin>

	return status;
}
 8002314:	4620      	mov	r0, r4
 8002316:	bd38      	pop	{r3, r4, r5, pc}
	else if(SelectStatusRegister_1_2_3==2)
 8002318:	2c02      	cmp	r4, #2
 800231a:	d109      	bne.n	8002330 <W25qxx_ReadStatusRegister+0x4c>
		W25qxx_Spi(0x35);
 800231c:	2035      	movs	r0, #53	; 0x35
 800231e:	f7ff ff81 	bl	8002224 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002322:	20a5      	movs	r0, #165	; 0xa5
 8002324:	f7ff ff7e 	bl	8002224 <W25qxx_Spi>
 8002328:	4604      	mov	r4, r0
		w25qxx.StatusRegister2 = status;
 800232a:	f885 0025 	strb.w	r0, [r5, #37]	; 0x25
 800232e:	e7ec      	b.n	800230a <W25qxx_ReadStatusRegister+0x26>
		W25qxx_Spi(0x15);
 8002330:	2015      	movs	r0, #21
 8002332:	f7ff ff77 	bl	8002224 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002336:	20a5      	movs	r0, #165	; 0xa5
 8002338:	f7ff ff74 	bl	8002224 <W25qxx_Spi>
 800233c:	4604      	mov	r4, r0
		w25qxx.StatusRegister3 = status;
 800233e:	f885 0026 	strb.w	r0, [r5, #38]	; 0x26
 8002342:	e7e2      	b.n	800230a <W25qxx_ReadStatusRegister+0x26>
 8002344:	48000c00 	.word	0x48000c00
 8002348:	2000b50c 	.word	0x2000b50c

0800234c <W25qxx_Init>:
 HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
}

//###################################################################################################################
bool	W25qxx_Init(void)
{
 800234c:	b538      	push	{r3, r4, r5, lr}
	w25qxx.Lock=1;
 800234e:	4c55      	ldr	r4, [pc, #340]	; (80024a4 <W25qxx_Init+0x158>)
 8002350:	2301      	movs	r3, #1
 8002352:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	while(HAL_GetTick()<100)
 8002356:	f000 f8f3 	bl	8002540 <HAL_GetTick>
 800235a:	2863      	cmp	r0, #99	; 0x63
 800235c:	d917      	bls.n	800238e <W25qxx_Init+0x42>
		W25qxx_Delay(1);
	uint32_t	id;
	#if (_W25QXX_DEBUG==1)

	logI("w25qxx Init Begin...\r\n");
 800235e:	4852      	ldr	r0, [pc, #328]	; (80024a8 <W25qxx_Init+0x15c>)
 8002360:	f7ff f988 	bl	8001674 <logI>
	#endif
	id=W25qxx_ReadID();
 8002364:	f7ff ff72 	bl	800224c <W25qxx_ReadID>
 8002368:	4605      	mov	r5, r0

	#if (_W25QXX_DEBUG==1)
	logI("w25qxx ID:0x%X\r\n",id);
 800236a:	4601      	mov	r1, r0
 800236c:	484f      	ldr	r0, [pc, #316]	; (80024ac <W25qxx_Init+0x160>)
 800236e:	f7ff f981 	bl	8001674 <logI>
	#endif
	switch(id&0x0000FFFF)
 8002372:	b2a8      	uxth	r0, r5
 8002374:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
 8002378:	3811      	subs	r0, #17
 800237a:	2809      	cmp	r0, #9
 800237c:	f200 808b 	bhi.w	8002496 <W25qxx_Init+0x14a>
 8002380:	e8df f000 	tbb	[pc, r0]
 8002384:	71777d83 	.word	0x71777d83
 8002388:	585f656b 	.word	0x585f656b
 800238c:	0951      	.short	0x0951
		W25qxx_Delay(1);
 800238e:	2001      	movs	r0, #1
 8002390:	f000 f8dc 	bl	800254c <HAL_Delay>
 8002394:	e7df      	b.n	8002356 <W25qxx_Init+0xa>
	{
		case 0x401A:	// 	w25q512
			w25qxx.ID=W25Q512;
 8002396:	230a      	movs	r3, #10
 8002398:	7023      	strb	r3, [r4, #0]
			w25qxx.BlockCount=1024;
			#if (_W25QXX_DEBUG==1)
			logI("w25qxx Chip: w25q512\r\n");
 800239a:	4845      	ldr	r0, [pc, #276]	; (80024b0 <W25qxx_Init+0x164>)
			w25qxx.BlockCount=1024;
 800239c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023a0:	61e3      	str	r3, [r4, #28]
		break;
		case 0x4011:	//	w25q10
			w25qxx.ID=W25Q10;
			w25qxx.BlockCount=2;
			#if (_W25QXX_DEBUG==1)
			logI("w25qxx Chip: w25q10\r\n");
 80023a2:	f7ff f967 	bl	8001674 <logI>
				#endif
			w25qxx.Lock=0;
			return false;

	}
	w25qxx.PageSize=256;
 80023a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023aa:	8163      	strh	r3, [r4, #10]
	w25qxx.SectorSize=0x1000;
 80023ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023b0:	6123      	str	r3, [r4, #16]
	w25qxx.SectorCount=w25qxx.BlockCount*16;
 80023b2:	69e3      	ldr	r3, [r4, #28]
 80023b4:	011a      	lsls	r2, r3, #4
	w25qxx.PageCount=(w25qxx.SectorCount*w25qxx.SectorSize)/w25qxx.PageSize;
 80023b6:	041b      	lsls	r3, r3, #16
	w25qxx.SectorCount=w25qxx.BlockCount*16;
 80023b8:	6162      	str	r2, [r4, #20]
	w25qxx.PageCount=(w25qxx.SectorCount*w25qxx.SectorSize)/w25qxx.PageSize;
 80023ba:	0a1a      	lsrs	r2, r3, #8
 80023bc:	60e2      	str	r2, [r4, #12]
	w25qxx.BlockSize=w25qxx.SectorSize*16;
	w25qxx.CapacityInKiloByte=(w25qxx.SectorCount*w25qxx.SectorSize)/1024;
 80023be:	0a9b      	lsrs	r3, r3, #10
	w25qxx.BlockSize=w25qxx.SectorSize*16;
 80023c0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	w25qxx.CapacityInKiloByte=(w25qxx.SectorCount*w25qxx.SectorSize)/1024;
 80023c4:	6223      	str	r3, [r4, #32]
	w25qxx.BlockSize=w25qxx.SectorSize*16;
 80023c6:	61a2      	str	r2, [r4, #24]
	W25qxx_ReadUniqID();
 80023c8:	f7ff ff62 	bl	8002290 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 80023cc:	2001      	movs	r0, #1
 80023ce:	f7ff ff89 	bl	80022e4 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 80023d2:	2002      	movs	r0, #2
 80023d4:	f7ff ff86 	bl	80022e4 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 80023d8:	2003      	movs	r0, #3
 80023da:	f7ff ff83 	bl	80022e4 <W25qxx_ReadStatusRegister>
	#if (_W25QXX_DEBUG==1)
	logI("w25qxx Page Size: %d Bytes\r\n",w25qxx.PageSize);
 80023de:	8961      	ldrh	r1, [r4, #10]
 80023e0:	4834      	ldr	r0, [pc, #208]	; (80024b4 <W25qxx_Init+0x168>)
 80023e2:	f7ff f947 	bl	8001674 <logI>
	logI("w25qxx Page Count: %d\r\n",w25qxx.PageCount);
 80023e6:	68e1      	ldr	r1, [r4, #12]
 80023e8:	4833      	ldr	r0, [pc, #204]	; (80024b8 <W25qxx_Init+0x16c>)
 80023ea:	f7ff f943 	bl	8001674 <logI>
	logI("w25qxx Sector Size: %d Bytes\r\n",w25qxx.SectorSize);
 80023ee:	6921      	ldr	r1, [r4, #16]
 80023f0:	4832      	ldr	r0, [pc, #200]	; (80024bc <W25qxx_Init+0x170>)
 80023f2:	f7ff f93f 	bl	8001674 <logI>
	logI("w25qxx Sector Count: %d\r\n",w25qxx.SectorCount);
 80023f6:	6961      	ldr	r1, [r4, #20]
 80023f8:	4831      	ldr	r0, [pc, #196]	; (80024c0 <W25qxx_Init+0x174>)
 80023fa:	f7ff f93b 	bl	8001674 <logI>
	logI("w25qxx Block Size: %d Bytes\r\n",w25qxx.BlockSize);
 80023fe:	69a1      	ldr	r1, [r4, #24]
 8002400:	4830      	ldr	r0, [pc, #192]	; (80024c4 <W25qxx_Init+0x178>)
 8002402:	f7ff f937 	bl	8001674 <logI>
	logI("w25qxx Block Count: %d\r\n",w25qxx.BlockCount);
 8002406:	69e1      	ldr	r1, [r4, #28]
 8002408:	482f      	ldr	r0, [pc, #188]	; (80024c8 <W25qxx_Init+0x17c>)
 800240a:	f7ff f933 	bl	8001674 <logI>
	logI("w25qxx Capacity: %d KiloBytes\r\n",w25qxx.CapacityInKiloByte);
 800240e:	6a21      	ldr	r1, [r4, #32]
 8002410:	482e      	ldr	r0, [pc, #184]	; (80024cc <W25qxx_Init+0x180>)
 8002412:	f7ff f92f 	bl	8001674 <logI>
	logI("w25qxx Init Done\r\n");
 8002416:	482e      	ldr	r0, [pc, #184]	; (80024d0 <W25qxx_Init+0x184>)
 8002418:	f7ff f92c 	bl	8001674 <logI>
	#endif
	w25qxx.Lock=0;
 800241c:	2300      	movs	r3, #0
 800241e:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	return true;
 8002422:	2001      	movs	r0, #1
}
 8002424:	bd38      	pop	{r3, r4, r5, pc}
			w25qxx.ID=W25Q256;
 8002426:	2309      	movs	r3, #9
 8002428:	7023      	strb	r3, [r4, #0]
			w25qxx.BlockCount=512;
 800242a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800242e:	61e3      	str	r3, [r4, #28]
			logI("w25qxx Chip: w25q256\r\n");
 8002430:	4828      	ldr	r0, [pc, #160]	; (80024d4 <W25qxx_Init+0x188>)
 8002432:	e7b6      	b.n	80023a2 <W25qxx_Init+0x56>
			w25qxx.ID=W25Q128;
 8002434:	2308      	movs	r3, #8
 8002436:	7023      	strb	r3, [r4, #0]
			w25qxx.BlockCount=256;
 8002438:	f44f 7380 	mov.w	r3, #256	; 0x100
 800243c:	61e3      	str	r3, [r4, #28]
			logI("w25qxx Chip: w25q128\r\n");
 800243e:	4826      	ldr	r0, [pc, #152]	; (80024d8 <W25qxx_Init+0x18c>)
 8002440:	e7af      	b.n	80023a2 <W25qxx_Init+0x56>
			w25qxx.ID=W25Q64;
 8002442:	2307      	movs	r3, #7
 8002444:	7023      	strb	r3, [r4, #0]
			w25qxx.BlockCount=128;
 8002446:	2380      	movs	r3, #128	; 0x80
 8002448:	61e3      	str	r3, [r4, #28]
			logI("w25qxx Chip: w25q64\r\n");
 800244a:	4824      	ldr	r0, [pc, #144]	; (80024dc <W25qxx_Init+0x190>)
 800244c:	e7a9      	b.n	80023a2 <W25qxx_Init+0x56>
			w25qxx.ID=W25Q32;
 800244e:	2306      	movs	r3, #6
 8002450:	7023      	strb	r3, [r4, #0]
			w25qxx.BlockCount=64;
 8002452:	2340      	movs	r3, #64	; 0x40
 8002454:	61e3      	str	r3, [r4, #28]
			logI("w25qxx Chip: w25q32\r\n");
 8002456:	4822      	ldr	r0, [pc, #136]	; (80024e0 <W25qxx_Init+0x194>)
 8002458:	e7a3      	b.n	80023a2 <W25qxx_Init+0x56>
			w25qxx.ID=W25Q16;
 800245a:	2305      	movs	r3, #5
 800245c:	7023      	strb	r3, [r4, #0]
			w25qxx.BlockCount=32;
 800245e:	2320      	movs	r3, #32
 8002460:	61e3      	str	r3, [r4, #28]
			logI("w25qxx Chip: w25q16\r\n");
 8002462:	4820      	ldr	r0, [pc, #128]	; (80024e4 <W25qxx_Init+0x198>)
 8002464:	e79d      	b.n	80023a2 <W25qxx_Init+0x56>
			w25qxx.ID=W25Q80;
 8002466:	2304      	movs	r3, #4
 8002468:	7023      	strb	r3, [r4, #0]
			w25qxx.BlockCount=16;
 800246a:	2310      	movs	r3, #16
 800246c:	61e3      	str	r3, [r4, #28]
			logI("w25qxx Chip: w25q80\r\n");
 800246e:	481e      	ldr	r0, [pc, #120]	; (80024e8 <W25qxx_Init+0x19c>)
 8002470:	e797      	b.n	80023a2 <W25qxx_Init+0x56>
			w25qxx.ID=W25Q40;
 8002472:	2303      	movs	r3, #3
 8002474:	7023      	strb	r3, [r4, #0]
			w25qxx.BlockCount=8;
 8002476:	2308      	movs	r3, #8
 8002478:	61e3      	str	r3, [r4, #28]
			logI("w25qxx Chip: w25q40\r\n");
 800247a:	481c      	ldr	r0, [pc, #112]	; (80024ec <W25qxx_Init+0x1a0>)
 800247c:	e791      	b.n	80023a2 <W25qxx_Init+0x56>
			w25qxx.ID=W25Q20;
 800247e:	2302      	movs	r3, #2
 8002480:	7023      	strb	r3, [r4, #0]
			w25qxx.BlockCount=4;
 8002482:	2304      	movs	r3, #4
 8002484:	61e3      	str	r3, [r4, #28]
			logI("w25qxx Chip: w25q20\r\n");
 8002486:	481a      	ldr	r0, [pc, #104]	; (80024f0 <W25qxx_Init+0x1a4>)
 8002488:	e78b      	b.n	80023a2 <W25qxx_Init+0x56>
			w25qxx.ID=W25Q10;
 800248a:	2301      	movs	r3, #1
 800248c:	7023      	strb	r3, [r4, #0]
			w25qxx.BlockCount=2;
 800248e:	2302      	movs	r3, #2
 8002490:	61e3      	str	r3, [r4, #28]
			logI("w25qxx Chip: w25q10\r\n");
 8002492:	4818      	ldr	r0, [pc, #96]	; (80024f4 <W25qxx_Init+0x1a8>)
 8002494:	e785      	b.n	80023a2 <W25qxx_Init+0x56>
				logI("w25qxx Unknown ID\r\n");
 8002496:	4818      	ldr	r0, [pc, #96]	; (80024f8 <W25qxx_Init+0x1ac>)
 8002498:	f7ff f8ec 	bl	8001674 <logI>
			w25qxx.Lock=0;
 800249c:	2000      	movs	r0, #0
 800249e:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
			return false;
 80024a2:	bd38      	pop	{r3, r4, r5, pc}
 80024a4:	2000b50c 	.word	0x2000b50c
 80024a8:	0801cd5c 	.word	0x0801cd5c
 80024ac:	0801cd73 	.word	0x0801cd73
 80024b0:	0801cd84 	.word	0x0801cd84
 80024b4:	0801ce77 	.word	0x0801ce77
 80024b8:	0801ce94 	.word	0x0801ce94
 80024bc:	0801ceac 	.word	0x0801ceac
 80024c0:	0801cecb 	.word	0x0801cecb
 80024c4:	0801cee5 	.word	0x0801cee5
 80024c8:	0801cf03 	.word	0x0801cf03
 80024cc:	0801cf1c 	.word	0x0801cf1c
 80024d0:	0801cf3c 	.word	0x0801cf3c
 80024d4:	0801cd9b 	.word	0x0801cd9b
 80024d8:	0801cdb2 	.word	0x0801cdb2
 80024dc:	0801cdc9 	.word	0x0801cdc9
 80024e0:	0801cddf 	.word	0x0801cddf
 80024e4:	0801cdf5 	.word	0x0801cdf5
 80024e8:	0801ce0b 	.word	0x0801ce0b
 80024ec:	0801ce21 	.word	0x0801ce21
 80024f0:	0801ce37 	.word	0x0801ce37
 80024f4:	0801ce4d 	.word	0x0801ce4d
 80024f8:	0801ce63 	.word	0x0801ce63

080024fc <HAL_Init>:
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024fc:	4a09      	ldr	r2, [pc, #36]	; (8002524 <HAL_Init+0x28>)
 80024fe:	6813      	ldr	r3, [r2, #0]
 8002500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8002504:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002506:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002508:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800250a:	f000 fb83 	bl	8002c14 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800250e:	2000      	movs	r0, #0
 8002510:	f7ff fdc8 	bl	80020a4 <HAL_InitTick>
 8002514:	4604      	mov	r4, r0
 8002516:	b918      	cbnz	r0, 8002520 <HAL_Init+0x24>
    status = HAL_ERROR;
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002518:	f7ff fc16 	bl	8001d48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 800251c:	4620      	mov	r0, r4
 800251e:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8002520:	2401      	movs	r4, #1
 8002522:	e7fb      	b.n	800251c <HAL_Init+0x20>
 8002524:	40022000 	.word	0x40022000

08002528 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002528:	4a03      	ldr	r2, [pc, #12]	; (8002538 <HAL_IncTick+0x10>)
 800252a:	4904      	ldr	r1, [pc, #16]	; (800253c <HAL_IncTick+0x14>)
 800252c:	6813      	ldr	r3, [r2, #0]
 800252e:	6809      	ldr	r1, [r1, #0]
 8002530:	440b      	add	r3, r1
 8002532:	6013      	str	r3, [r2, #0]
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	2000b534 	.word	0x2000b534
 800253c:	2000001c 	.word	0x2000001c

08002540 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002540:	4b01      	ldr	r3, [pc, #4]	; (8002548 <HAL_GetTick+0x8>)
 8002542:	6818      	ldr	r0, [r3, #0]
}
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	2000b534 	.word	0x2000b534

0800254c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800254c:	b538      	push	{r3, r4, r5, lr}
 800254e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002550:	f7ff fff6 	bl	8002540 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002554:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002556:	bf1c      	itt	ne
 8002558:	4b05      	ldrne	r3, [pc, #20]	; (8002570 <HAL_Delay+0x24>)
 800255a:	681b      	ldrne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 800255c:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800255e:	bf18      	it	ne
 8002560:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002562:	f7ff ffed 	bl	8002540 <HAL_GetTick>
 8002566:	1b40      	subs	r0, r0, r5
 8002568:	4284      	cmp	r4, r0
 800256a:	d8fa      	bhi.n	8002562 <HAL_Delay+0x16>
  {
  }
}
 800256c:	bd38      	pop	{r3, r4, r5, pc}
 800256e:	bf00      	nop
 8002570:	2000001c 	.word	0x2000001c

08002574 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002574:	b530      	push	{r4, r5, lr}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002576:	0dcc      	lsrs	r4, r1, #23
 8002578:	f004 0404 	and.w	r4, r4, #4
 800257c:	3014      	adds	r0, #20

  MODIFY_REG(*preg,
 800257e:	f3c1 5104 	ubfx	r1, r1, #20, #5
 8002582:	5823      	ldr	r3, [r4, r0]
 8002584:	2507      	movs	r5, #7
 8002586:	408d      	lsls	r5, r1
 8002588:	ea23 0305 	bic.w	r3, r3, r5
 800258c:	fa02 f101 	lsl.w	r1, r2, r1
 8002590:	4319      	orrs	r1, r3
 8002592:	5021      	str	r1, [r4, r0]
 8002594:	bd30      	pop	{r4, r5, pc}

08002596 <LL_ADC_IsEnabled>:
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002596:	6880      	ldr	r0, [r0, #8]
}
 8002598:	f000 0001 	and.w	r0, r0, #1
 800259c:	4770      	bx	lr

0800259e <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800259e:	6880      	ldr	r0, [r0, #8]
}
 80025a0:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80025a4:	4770      	bx	lr
	...

080025a8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80025aa:	2300      	movs	r3, #0
 80025ac:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80025ae:	4604      	mov	r4, r0
 80025b0:	2800      	cmp	r0, #0
 80025b2:	f000 8085 	beq.w	80026c0 <HAL_ADC_Init+0x118>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025b6:	6d45      	ldr	r5, [r0, #84]	; 0x54
 80025b8:	b925      	cbnz	r5, 80025c4 <HAL_ADC_Init+0x1c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025ba:	f7ff fbdd 	bl	8001d78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025be:	65a5      	str	r5, [r4, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80025c0:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80025c4:	6820      	ldr	r0, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80025c6:	6883      	ldr	r3, [r0, #8]
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	d47b      	bmi.n	80026c4 <HAL_ADC_Init+0x11c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80025cc:	6883      	ldr	r3, [r0, #8]
 80025ce:	00dd      	lsls	r5, r3, #3
 80025d0:	d57f      	bpl.n	80026d2 <HAL_ADC_Init+0x12a>
 80025d2:	6883      	ldr	r3, [r0, #8]
 80025d4:	00d9      	lsls	r1, r3, #3
 80025d6:	f140 808a 	bpl.w	80026ee <HAL_ADC_Init+0x146>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025da:	2100      	movs	r1, #0

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025dc:	f7ff ffdf 	bl	800259e <LL_ADC_REG_IsConversionOngoing>

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025e0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80025e2:	f013 0f10 	tst.w	r3, #16
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025e6:	6d63      	ldr	r3, [r4, #84]	; 0x54
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025e8:	d167      	bne.n	80026ba <HAL_ADC_Init+0x112>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80025ea:	2800      	cmp	r0, #0
 80025ec:	d165      	bne.n	80026ba <HAL_ADC_Init+0x112>
    ADC_STATE_CLR_SET(hadc->State,
 80025ee:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80025f2:	f043 0302 	orr.w	r3, r3, #2
 80025f6:	6563      	str	r3, [r4, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025f8:	6820      	ldr	r0, [r4, #0]
 80025fa:	f7ff ffcc 	bl	8002596 <LL_ADC_IsEnabled>
 80025fe:	b998      	cbnz	r0, 8002628 <HAL_ADC_Init+0x80>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002600:	4852      	ldr	r0, [pc, #328]	; (800274c <HAL_ADC_Init+0x1a4>)
 8002602:	f7ff ffc8 	bl	8002596 <LL_ADC_IsEnabled>
 8002606:	4603      	mov	r3, r0
 8002608:	4851      	ldr	r0, [pc, #324]	; (8002750 <HAL_ADC_Init+0x1a8>)
 800260a:	f7ff ffc4 	bl	8002596 <LL_ADC_IsEnabled>
 800260e:	4303      	orrs	r3, r0
 8002610:	4850      	ldr	r0, [pc, #320]	; (8002754 <HAL_ADC_Init+0x1ac>)
 8002612:	f7ff ffc0 	bl	8002596 <LL_ADC_IsEnabled>
 8002616:	4303      	orrs	r3, r0
 8002618:	d106      	bne.n	8002628 <HAL_ADC_Init+0x80>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800261a:	4a4f      	ldr	r2, [pc, #316]	; (8002758 <HAL_ADC_Init+0x1b0>)
 800261c:	6860      	ldr	r0, [r4, #4]
 800261e:	6893      	ldr	r3, [r2, #8]
 8002620:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002624:	4303      	orrs	r3, r0
 8002626:	6093      	str	r3, [r2, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 8002628:	68e0      	ldr	r0, [r4, #12]
 800262a:	6b63      	ldr	r3, [r4, #52]	; 0x34
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800262c:	f894 2020 	ldrb.w	r2, [r4, #32]
                hadc->Init.DataAlign                                                   |
 8002630:	4303      	orrs	r3, r0
 8002632:	68a0      	ldr	r0, [r4, #8]
 8002634:	4303      	orrs	r3, r0
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002636:	7e60      	ldrb	r0, [r4, #25]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002638:	2a01      	cmp	r2, #1
                hadc->Init.DataAlign                                                   |
 800263a:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800263e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002642:	bf02      	ittt	eq
 8002644:	6a62      	ldreq	r2, [r4, #36]	; 0x24
 8002646:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
 800264a:	ea43 4342 	orreq.w	r3, r3, r2, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800264e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002650:	b122      	cbz	r2, 800265c <HAL_ADC_Init+0xb4>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8002652:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002654:	f402 7270 	and.w	r2, r2, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002658:	4302      	orrs	r2, r0
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800265a:	4313      	orrs	r3, r2
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800265c:	6820      	ldr	r0, [r4, #0]
 800265e:	4a3f      	ldr	r2, [pc, #252]	; (800275c <HAL_ADC_Init+0x1b4>)
 8002660:	68c5      	ldr	r5, [r0, #12]
 8002662:	402a      	ands	r2, r5
 8002664:	4313      	orrs	r3, r2
 8002666:	60c3      	str	r3, [r0, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002668:	f7ff ff99 	bl	800259e <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800266c:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800266e:	689a      	ldr	r2, [r3, #8]
 8002670:	0712      	lsls	r2, r2, #28
 8002672:	d546      	bpl.n	8002702 <HAL_ADC_Init+0x15a>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002674:	6922      	ldr	r2, [r4, #16]
 8002676:	2a01      	cmp	r2, #1
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002678:	bf05      	ittet	eq
 800267a:	6b18      	ldreq	r0, [r3, #48]	; 0x30
 800267c:	69e2      	ldreq	r2, [r4, #28]
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800267e:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002680:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
 8002684:	bf06      	itte	eq
 8002686:	f020 000f 	biceq.w	r0, r0, #15
 800268a:	4302      	orreq	r2, r0
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800268c:	f022 020f 	bicne.w	r2, r2, #15
 8002690:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002692:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002694:	f023 0303 	bic.w	r3, r3, #3
 8002698:	f043 0301 	orr.w	r3, r3, #1
 800269c:	6563      	str	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 800269e:	4608      	mov	r0, r1
 80026a0:	b003      	add	sp, #12
 80026a2:	bd30      	pop	{r4, r5, pc}
      wait_loop_index--;
 80026a4:	9b01      	ldr	r3, [sp, #4]
 80026a6:	3b01      	subs	r3, #1
 80026a8:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80026aa:	9b01      	ldr	r3, [sp, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1f9      	bne.n	80026a4 <HAL_ADC_Init+0xfc>
 80026b0:	e78f      	b.n	80025d2 <HAL_ADC_Init+0x2a>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80026b2:	691a      	ldr	r2, [r3, #16]
 80026b4:	f022 0201 	bic.w	r2, r2, #1
 80026b8:	e045      	b.n	8002746 <HAL_ADC_Init+0x19e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ba:	f043 0310 	orr.w	r3, r3, #16
 80026be:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 80026c0:	2101      	movs	r1, #1
 80026c2:	e7ec      	b.n	800269e <HAL_ADC_Init+0xf6>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80026c4:	6883      	ldr	r3, [r0, #8]
 80026c6:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80026ca:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026ce:	6083      	str	r3, [r0, #8]
 80026d0:	e77c      	b.n	80025cc <HAL_ADC_Init+0x24>
  MODIFY_REG(ADCx->CR,
 80026d2:	6883      	ldr	r3, [r0, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80026d4:	4a22      	ldr	r2, [pc, #136]	; (8002760 <HAL_ADC_Init+0x1b8>)
 80026d6:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80026da:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026e2:	6083      	str	r3, [r0, #8]
 80026e4:	4b1f      	ldr	r3, [pc, #124]	; (8002764 <HAL_ADC_Init+0x1bc>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80026ec:	e7dc      	b.n	80026a8 <HAL_ADC_Init+0x100>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ee:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80026f0:	f043 0310 	orr.w	r3, r3, #16
 80026f4:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80026f8:	f043 0301 	orr.w	r3, r3, #1
 80026fc:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 80026fe:	2101      	movs	r1, #1
 8002700:	e76c      	b.n	80025dc <HAL_ADC_Init+0x34>
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002702:	2800      	cmp	r0, #0
 8002704:	d1b6      	bne.n	8002674 <HAL_ADC_Init+0xcc>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002706:	68d8      	ldr	r0, [r3, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002708:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800270c:	7e25      	ldrb	r5, [r4, #24]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800270e:	0052      	lsls	r2, r2, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002710:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002714:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002718:	f020 0002 	bic.w	r0, r0, #2
 800271c:	4302      	orrs	r2, r0
 800271e:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8002720:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8002724:	2a01      	cmp	r2, #1
 8002726:	d1c4      	bne.n	80026b2 <HAL_ADC_Init+0x10a>
        MODIFY_REG(hadc->Instance->CFGR2,
 8002728:	6c25      	ldr	r5, [r4, #64]	; 0x40
 800272a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800272c:	6918      	ldr	r0, [r3, #16]
 800272e:	432a      	orrs	r2, r5
 8002730:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8002732:	f042 0201 	orr.w	r2, r2, #1
 8002736:	432a      	orrs	r2, r5
 8002738:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 800273a:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 800273e:	432a      	orrs	r2, r5
 8002740:	f020 0004 	bic.w	r0, r0, #4
 8002744:	4302      	orrs	r2, r0
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002746:	611a      	str	r2, [r3, #16]
 8002748:	e794      	b.n	8002674 <HAL_ADC_Init+0xcc>
 800274a:	bf00      	nop
 800274c:	50040000 	.word	0x50040000
 8002750:	50040100 	.word	0x50040100
 8002754:	50040200 	.word	0x50040200
 8002758:	50040300 	.word	0x50040300
 800275c:	fff0c007 	.word	0xfff0c007
 8002760:	00030d40 	.word	0x00030d40
 8002764:	20000018 	.word	0x20000018

08002768 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002768:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800276a:	2300      	movs	r3, #0
 800276c:	9301      	str	r3, [sp, #4]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800276e:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8002772:	2b01      	cmp	r3, #1
{
 8002774:	4605      	mov	r5, r0
 8002776:	460c      	mov	r4, r1
  __HAL_LOCK(hadc);
 8002778:	f000 8184 	beq.w	8002a84 <HAL_ADC_ConfigChannel+0x31c>
 800277c:	2301      	movs	r3, #1
 800277e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002782:	6800      	ldr	r0, [r0, #0]
 8002784:	f7ff ff0b 	bl	800259e <LL_ADC_REG_IsConversionOngoing>
 8002788:	2800      	cmp	r0, #0
 800278a:	f040 8175 	bne.w	8002a78 <HAL_ADC_ConfigChannel+0x310>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800278e:	684b      	ldr	r3, [r1, #4]
 8002790:	2b05      	cmp	r3, #5
 8002792:	d808      	bhi.n	80027a6 <HAL_ADC_ConfigChannel+0x3e>
    {
      switch (sConfig->Rank)
 8002794:	3b02      	subs	r3, #2
 8002796:	2b03      	cmp	r3, #3
 8002798:	d866      	bhi.n	8002868 <HAL_ADC_ConfigChannel+0x100>
 800279a:	e8df f003 	tbb	[pc, r3]
 800279e:	5e02      	.short	0x5e02
 80027a0:	6260      	.short	0x6260
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 80027a2:	230c      	movs	r3, #12
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 80027a4:	6063      	str	r3, [r4, #4]
      }
    }
    #endif
    
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80027a6:	6862      	ldr	r2, [r4, #4]
 80027a8:	6828      	ldr	r0, [r5, #0]
  MODIFY_REG(*preg,
 80027aa:	6823      	ldr	r3, [r4, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80027ac:	0991      	lsrs	r1, r2, #6
 80027ae:	f001 010c 	and.w	r1, r1, #12
 80027b2:	f100 0730 	add.w	r7, r0, #48	; 0x30
  MODIFY_REG(*preg,
 80027b6:	f002 021f 	and.w	r2, r2, #31
 80027ba:	59ce      	ldr	r6, [r1, r7]
 80027bc:	f04f 0e1f 	mov.w	lr, #31
 80027c0:	f3c3 6384 	ubfx	r3, r3, #26, #5
 80027c4:	4093      	lsls	r3, r2
 80027c6:	fa0e f202 	lsl.w	r2, lr, r2
 80027ca:	ea26 0202 	bic.w	r2, r6, r2
 80027ce:	4313      	orrs	r3, r2
 80027d0:	51cb      	str	r3, [r1, r7]
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027d2:	f7ff fee4 	bl	800259e <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027d6:	682b      	ldr	r3, [r5, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80027d8:	689a      	ldr	r2, [r3, #8]
 80027da:	0711      	lsls	r1, r2, #28
 80027dc:	f140 8154 	bpl.w	8002a88 <HAL_ADC_ConfigChannel+0x320>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027e0:	6828      	ldr	r0, [r5, #0]
 80027e2:	f7ff fed8 	bl	8002596 <LL_ADC_IsEnabled>
 80027e6:	2800      	cmp	r0, #0
 80027e8:	f040 80d3 	bne.w	8002992 <HAL_ADC_ConfigChannel+0x22a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80027ec:	68e6      	ldr	r6, [r4, #12]
 80027ee:	6828      	ldr	r0, [r5, #0]
 80027f0:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(ADCx->DIFSEL,
 80027f2:	4aba      	ldr	r2, [pc, #744]	; (8002adc <HAL_ADC_ConfigChannel+0x374>)
 80027f4:	f8d0 10b0 	ldr.w	r1, [r0, #176]	; 0xb0
 80027f8:	f006 0e18 	and.w	lr, r6, #24
 80027fc:	f3c3 0712 	ubfx	r7, r3, #0, #19
 8002800:	fa22 f20e 	lsr.w	r2, r2, lr
 8002804:	401a      	ands	r2, r3
 8002806:	ea21 0107 	bic.w	r1, r1, r7
 800280a:	430a      	orrs	r2, r1
 800280c:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002810:	4ab3      	ldr	r2, [pc, #716]	; (8002ae0 <HAL_ADC_ConfigChannel+0x378>)
 8002812:	4296      	cmp	r6, r2
 8002814:	f040 80bd 	bne.w	8002992 <HAL_ADC_ConfigChannel+0x22a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002818:	2f00      	cmp	r7, #0
 800281a:	f040 808f 	bne.w	800293c <HAL_ADC_ConfigChannel+0x1d4>
 800281e:	0e9e      	lsrs	r6, r3, #26
 8002820:	3601      	adds	r6, #1
 8002822:	f006 021f 	and.w	r2, r6, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002826:	2a09      	cmp	r2, #9
 8002828:	f04f 0101 	mov.w	r1, #1
 800282c:	ea4f 6686 	mov.w	r6, r6, lsl #26
 8002830:	f240 809e 	bls.w	8002970 <HAL_ADC_ConfigChannel+0x208>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002834:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8002838:	4091      	lsls	r1, r2
 800283a:	ea41 0206 	orr.w	r2, r1, r6
 800283e:	2f00      	cmp	r7, #0
 8002840:	f040 80c7 	bne.w	80029d2 <HAL_ADC_ConfigChannel+0x26a>
 8002844:	0e9b      	lsrs	r3, r3, #26
 8002846:	3301      	adds	r3, #1
 8002848:	f003 031f 	and.w	r3, r3, #31
 800284c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8002850:	391e      	subs	r1, #30
 8002852:	0509      	lsls	r1, r1, #20
 8002854:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8002858:	e097      	b.n	800298a <HAL_ADC_ConfigChannel+0x222>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 800285a:	2312      	movs	r3, #18
 800285c:	e7a2      	b.n	80027a4 <HAL_ADC_ConfigChannel+0x3c>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 800285e:	2318      	movs	r3, #24
 8002860:	e7a0      	b.n	80027a4 <HAL_ADC_ConfigChannel+0x3c>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8002862:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002866:	e79d      	b.n	80027a4 <HAL_ADC_ConfigChannel+0x3c>
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8002868:	2306      	movs	r3, #6
 800286a:	e79b      	b.n	80027a4 <HAL_ADC_ConfigChannel+0x3c>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800286c:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800286e:	6e19      	ldr	r1, [r3, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002870:	f3c2 0612 	ubfx	r6, r2, #0, #19
 8002874:	f3c1 6184 	ubfx	r1, r1, #26, #5
 8002878:	2e00      	cmp	r6, #0
 800287a:	d13e      	bne.n	80028fa <HAL_ADC_ConfigChannel+0x192>
 800287c:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8002880:	428a      	cmp	r2, r1
  MODIFY_REG(*preg,
 8002882:	bf02      	ittt	eq
 8002884:	6e1a      	ldreq	r2, [r3, #96]	; 0x60
 8002886:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 800288a:	661a      	streq	r2, [r3, #96]	; 0x60
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800288c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800288e:	6822      	ldr	r2, [r4, #0]
 8002890:	6e5e      	ldr	r6, [r3, #100]	; 0x64
 8002892:	f3c2 0712 	ubfx	r7, r2, #0, #19
 8002896:	f3c6 6684 	ubfx	r6, r6, #26, #5
 800289a:	f100 010c 	add.w	r1, r0, #12
 800289e:	bb8f      	cbnz	r7, 8002904 <HAL_ADC_ConfigChannel+0x19c>
 80028a0:	f3c2 6784 	ubfx	r7, r2, #26, #5
 80028a4:	42be      	cmp	r6, r7
 80028a6:	f040 8112 	bne.w	8002ace <HAL_ADC_ConfigChannel+0x366>
  MODIFY_REG(*preg,
 80028aa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80028ac:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80028b0:	665a      	str	r2, [r3, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028b2:	6822      	ldr	r2, [r4, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80028b4:	6883      	ldr	r3, [r0, #8]
 80028b6:	6883      	ldr	r3, [r0, #8]
 80028b8:	f3c2 0712 	ubfx	r7, r2, #0, #19
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028bc:	f100 0608 	add.w	r6, r0, #8
 80028c0:	f3c3 6384 	ubfx	r3, r3, #26, #5
 80028c4:	bb57      	cbnz	r7, 800291c <HAL_ADC_ConfigChannel+0x1b4>
 80028c6:	f3c2 6284 	ubfx	r2, r2, #26, #5
 80028ca:	4293      	cmp	r3, r2
 80028cc:	f040 811c 	bne.w	8002b08 <HAL_ADC_ConfigChannel+0x3a0>
  MODIFY_REG(*preg,
 80028d0:	6833      	ldr	r3, [r6, #0]
 80028d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028d6:	6033      	str	r3, [r6, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80028d8:	68c3      	ldr	r3, [r0, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028da:	6823      	ldr	r3, [r4, #0]
 80028dc:	68c2      	ldr	r2, [r0, #12]
 80028de:	f3c3 0012 	ubfx	r0, r3, #0, #19
 80028e2:	f3c2 6284 	ubfx	r2, r2, #26, #5
 80028e6:	bb20      	cbnz	r0, 8002932 <HAL_ADC_ConfigChannel+0x1ca>
 80028e8:	f3c3 6384 	ubfx	r3, r3, #26, #5
 80028ec:	4293      	cmp	r3, r2
  MODIFY_REG(*preg,
 80028ee:	bf02      	ittt	eq
 80028f0:	680b      	ldreq	r3, [r1, #0]
 80028f2:	f023 4300 	biceq.w	r3, r3, #2147483648	; 0x80000000
 80028f6:	600b      	streq	r3, [r1, #0]
 80028f8:	e772      	b.n	80027e0 <HAL_ADC_ConfigChannel+0x78>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fa:	fa92 f2a2 	rbit	r2, r2
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028fe:	fab2 f282 	clz	r2, r2
 8002902:	e7bd      	b.n	8002880 <HAL_ADC_ConfigChannel+0x118>
 8002904:	fa92 f7a2 	rbit	r7, r2
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002908:	fab7 f787 	clz	r7, r7
 800290c:	42be      	cmp	r6, r7
 800290e:	d0cc      	beq.n	80028aa <HAL_ADC_ConfigChannel+0x142>
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002910:	f103 0668 	add.w	r6, r3, #104	; 0x68
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002914:	6e9f      	ldr	r7, [r3, #104]	; 0x68
 8002916:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002918:	f3c3 6384 	ubfx	r3, r3, #26, #5
 800291c:	fa92 f2a2 	rbit	r2, r2
 8002920:	fab2 f282 	clz	r2, r2
 8002924:	429a      	cmp	r2, r3
 8002926:	d0d3      	beq.n	80028d0 <HAL_ADC_ConfigChannel+0x168>
 8002928:	68c3      	ldr	r3, [r0, #12]
 800292a:	68c2      	ldr	r2, [r0, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800292c:	6823      	ldr	r3, [r4, #0]
 800292e:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8002932:	fa93 f3a3 	rbit	r3, r3
 8002936:	fab3 f383 	clz	r3, r3
 800293a:	e7d7      	b.n	80028ec <HAL_ADC_ConfigChannel+0x184>
 800293c:	fa93 f2a3 	rbit	r2, r3
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002940:	fab2 f282 	clz	r2, r2
 8002944:	3201      	adds	r2, #1
 8002946:	f002 021f 	and.w	r2, r2, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800294a:	2a09      	cmp	r2, #9
 800294c:	d830      	bhi.n	80029b0 <HAL_ADC_ConfigChannel+0x248>
 800294e:	fa93 f6a3 	rbit	r6, r3
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002952:	fab6 f686 	clz	r6, r6
 8002956:	3601      	adds	r6, #1
 8002958:	06b6      	lsls	r6, r6, #26
 800295a:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 800295e:	fa93 f1a3 	rbit	r1, r3
 8002962:	fab1 f181 	clz	r1, r1
 8002966:	3101      	adds	r1, #1
 8002968:	f001 021f 	and.w	r2, r1, #31
 800296c:	2101      	movs	r1, #1
 800296e:	e001      	b.n	8002974 <HAL_ADC_ConfigChannel+0x20c>
 8002970:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8002974:	4091      	lsls	r1, r2
 8002976:	ea41 0206 	orr.w	r2, r1, r6
 800297a:	b9a7      	cbnz	r7, 80029a6 <HAL_ADC_ConfigChannel+0x23e>
 800297c:	0e99      	lsrs	r1, r3, #26
 800297e:	3101      	adds	r1, #1
 8002980:	f001 011f 	and.w	r1, r1, #31
 8002984:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8002988:	0509      	lsls	r1, r1, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800298a:	4311      	orrs	r1, r2
 800298c:	68a2      	ldr	r2, [r4, #8]
 800298e:	f7ff fdf1 	bl	8002574 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002992:	6822      	ldr	r2, [r4, #0]
 8002994:	4b53      	ldr	r3, [pc, #332]	; (8002ae4 <HAL_ADC_ConfigChannel+0x37c>)
 8002996:	421a      	tst	r2, r3
 8002998:	d120      	bne.n	80029dc <HAL_ADC_ConfigChannel+0x274>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800299a:	2000      	movs	r0, #0

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800299c:	2300      	movs	r3, #0
 800299e:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 80029a2:	b003      	add	sp, #12
 80029a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029a6:	fa93 f1a3 	rbit	r1, r3
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029aa:	fab1 f181 	clz	r1, r1
 80029ae:	e7e6      	b.n	800297e <HAL_ADC_ConfigChannel+0x216>
 80029b0:	fa93 f2a3 	rbit	r2, r3
 80029b4:	fab2 f282 	clz	r2, r2
 80029b8:	3201      	adds	r2, #1
 80029ba:	0692      	lsls	r2, r2, #26
 80029bc:	f002 46f8 	and.w	r6, r2, #2080374784	; 0x7c000000
 80029c0:	fa93 f1a3 	rbit	r1, r3
 80029c4:	fab1 f181 	clz	r1, r1
 80029c8:	3101      	adds	r1, #1
 80029ca:	f001 021f 	and.w	r2, r1, #31
 80029ce:	2101      	movs	r1, #1
 80029d0:	e732      	b.n	8002838 <HAL_ADC_ConfigChannel+0xd0>
 80029d2:	fa93 f3a3 	rbit	r3, r3
 80029d6:	fab3 f383 	clz	r3, r3
 80029da:	e734      	b.n	8002846 <HAL_ADC_ConfigChannel+0xde>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80029dc:	4942      	ldr	r1, [pc, #264]	; (8002ae8 <HAL_ADC_ConfigChannel+0x380>)
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80029de:	4b43      	ldr	r3, [pc, #268]	; (8002aec <HAL_ADC_ConfigChannel+0x384>)
 80029e0:	6888      	ldr	r0, [r1, #8]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 80029e8:	460c      	mov	r4, r1
 80029ea:	d11e      	bne.n	8002a2a <HAL_ADC_ConfigChannel+0x2c2>
 80029ec:	0202      	lsls	r2, r0, #8
 80029ee:	d4d4      	bmi.n	800299a <HAL_ADC_ConfigChannel+0x232>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029f0:	682b      	ldr	r3, [r5, #0]
 80029f2:	4a3f      	ldr	r2, [pc, #252]	; (8002af0 <HAL_ADC_ConfigChannel+0x388>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d003      	beq.n	8002a00 <HAL_ADC_ConfigChannel+0x298>
 80029f8:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d1cc      	bne.n	800299a <HAL_ADC_ConfigChannel+0x232>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002a00:	68a3      	ldr	r3, [r4, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002a02:	4a3c      	ldr	r2, [pc, #240]	; (8002af4 <HAL_ADC_ConfigChannel+0x38c>)
 8002a04:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8002a08:	4333      	orrs	r3, r6
 8002a0a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a0e:	60a3      	str	r3, [r4, #8]
 8002a10:	4b39      	ldr	r3, [pc, #228]	; (8002af8 <HAL_ADC_ConfigChannel+0x390>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	fbb3 f2f2 	udiv	r2, r3, r2
 8002a18:	230c      	movs	r3, #12
 8002a1a:	4353      	muls	r3, r2
            wait_loop_index--;
 8002a1c:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 8002a1e:	9b01      	ldr	r3, [sp, #4]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d0ba      	beq.n	800299a <HAL_ADC_ConfigChannel+0x232>
            wait_loop_index--;
 8002a24:	9b01      	ldr	r3, [sp, #4]
 8002a26:	3b01      	subs	r3, #1
 8002a28:	e7f8      	b.n	8002a1c <HAL_ADC_ConfigChannel+0x2b4>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a2a:	4b34      	ldr	r3, [pc, #208]	; (8002afc <HAL_ADC_ConfigChannel+0x394>)
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d111      	bne.n	8002a54 <HAL_ADC_ConfigChannel+0x2ec>
 8002a30:	01c3      	lsls	r3, r0, #7
 8002a32:	d4b2      	bmi.n	800299a <HAL_ADC_ConfigChannel+0x232>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a34:	682b      	ldr	r3, [r5, #0]
 8002a36:	4a2e      	ldr	r2, [pc, #184]	; (8002af0 <HAL_ADC_ConfigChannel+0x388>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d003      	beq.n	8002a44 <HAL_ADC_ConfigChannel+0x2dc>
 8002a3c:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d1aa      	bne.n	800299a <HAL_ADC_ConfigChannel+0x232>
 8002a44:	68a3      	ldr	r3, [r4, #8]
 8002a46:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8002a4a:	4333      	orrs	r3, r6
 8002a4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a50:	60a3      	str	r3, [r4, #8]
 8002a52:	e7a2      	b.n	800299a <HAL_ADC_ConfigChannel+0x232>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a54:	4b2a      	ldr	r3, [pc, #168]	; (8002b00 <HAL_ADC_ConfigChannel+0x398>)
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d19f      	bne.n	800299a <HAL_ADC_ConfigChannel+0x232>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a5a:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8002a5e:	d19c      	bne.n	800299a <HAL_ADC_ConfigChannel+0x232>
        if (ADC_VREFINT_INSTANCE(hadc))
 8002a60:	682a      	ldr	r2, [r5, #0]
 8002a62:	4b23      	ldr	r3, [pc, #140]	; (8002af0 <HAL_ADC_ConfigChannel+0x388>)
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d198      	bne.n	800299a <HAL_ADC_ConfigChannel+0x232>
 8002a68:	688b      	ldr	r3, [r1, #8]
 8002a6a:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8002a6e:	4333      	orrs	r3, r6
 8002a70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a74:	608b      	str	r3, [r1, #8]
 8002a76:	e791      	b.n	800299c <HAL_ADC_ConfigChannel+0x234>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a78:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 8002a7a:	f042 0220 	orr.w	r2, r2, #32
 8002a7e:	656a      	str	r2, [r5, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8002a80:	4618      	mov	r0, r3
 8002a82:	e78b      	b.n	800299c <HAL_ADC_ConfigChannel+0x234>
  __HAL_LOCK(hadc);
 8002a84:	2002      	movs	r0, #2
 8002a86:	e78c      	b.n	80029a2 <HAL_ADC_ConfigChannel+0x23a>
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a88:	2800      	cmp	r0, #0
 8002a8a:	f47f aea9 	bne.w	80027e0 <HAL_ADC_ConfigChannel+0x78>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002a8e:	4618      	mov	r0, r3
 8002a90:	68a2      	ldr	r2, [r4, #8]
 8002a92:	6821      	ldr	r1, [r4, #0]
 8002a94:	f7ff fd6e 	bl	8002574 <LL_ADC_SetChannelSamplingTime>
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a98:	6926      	ldr	r6, [r4, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002a9a:	682b      	ldr	r3, [r5, #0]
 8002a9c:	6822      	ldr	r2, [r4, #0]
 8002a9e:	68d9      	ldr	r1, [r3, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002aa0:	2e04      	cmp	r6, #4
 8002aa2:	f103 0060 	add.w	r0, r3, #96	; 0x60
 8002aa6:	f43f aee1 	beq.w	800286c <HAL_ADC_ConfigChannel+0x104>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002aaa:	f3c1 03c1 	ubfx	r3, r1, #3, #2
 8002aae:	0059      	lsls	r1, r3, #1
 8002ab0:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(*preg,
 8002ab2:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 8002ab6:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8002aba:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002abe:	408b      	lsls	r3, r1
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	4a10      	ldr	r2, [pc, #64]	; (8002b04 <HAL_ADC_ConfigChannel+0x39c>)
 8002ac4:	403a      	ands	r2, r7
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
 8002acc:	e688      	b.n	80027e0 <HAL_ADC_ConfigChannel+0x78>
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ace:	f103 0668 	add.w	r6, r3, #104	; 0x68
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002ad2:	6e9f      	ldr	r7, [r3, #104]	; 0x68
 8002ad4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ad6:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8002ada:	e6f4      	b.n	80028c6 <HAL_ADC_ConfigChannel+0x15e>
 8002adc:	0007ffff 	.word	0x0007ffff
 8002ae0:	407f0000 	.word	0x407f0000
 8002ae4:	80080000 	.word	0x80080000
 8002ae8:	50040300 	.word	0x50040300
 8002aec:	c7520000 	.word	0xc7520000
 8002af0:	50040000 	.word	0x50040000
 8002af4:	00030d40 	.word	0x00030d40
 8002af8:	20000018 	.word	0x20000018
 8002afc:	cb840000 	.word	0xcb840000
 8002b00:	80000001 	.word	0x80000001
 8002b04:	03fff000 	.word	0x03fff000
 8002b08:	68c3      	ldr	r3, [r0, #12]
 8002b0a:	68c2      	ldr	r2, [r0, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b0c:	6823      	ldr	r3, [r4, #0]
 8002b0e:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8002b12:	e6e9      	b.n	80028e8 <HAL_ADC_ConfigChannel+0x180>

08002b14 <LL_ADC_IsEnabled>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b14:	6880      	ldr	r0, [r0, #8]
}
 8002b16:	f000 0001 	and.w	r0, r0, #1
 8002b1a:	4770      	bx	lr

08002b1c <LL_ADC_REG_IsConversionOngoing>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b1c:	6880      	ldr	r0, [r0, #8]
}
 8002b1e:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8002b22:	4770      	bx	lr

08002b24 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002b24:	b530      	push	{r4, r5, lr}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b26:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8002b2a:	2b01      	cmp	r3, #1
{
 8002b2c:	b09b      	sub	sp, #108	; 0x6c
 8002b2e:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 8002b30:	d066      	beq.n	8002c00 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
 8002b32:	2301      	movs	r3, #1
 8002b34:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002b38:	4b32      	ldr	r3, [pc, #200]	; (8002c04 <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
 8002b3a:	6800      	ldr	r0, [r0, #0]
 8002b3c:	4298      	cmp	r0, r3
 8002b3e:	bf0c      	ite	eq
 8002b40:	f503 7380 	addeq.w	r3, r3, #256	; 0x100
 8002b44:	2300      	movne	r3, #0
 8002b46:	9301      	str	r3, [sp, #4]

  if (tmphadcSlave.Instance == NULL)
 8002b48:	9801      	ldr	r0, [sp, #4]
 8002b4a:	b940      	cbnz	r0, 8002b5e <HAL_ADCEx_MultiModeConfigChannel+0x3a>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b4c:	6d53      	ldr	r3, [r2, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b4e:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b52:	f043 0320 	orr.w	r3, r3, #32
 8002b56:	6553      	str	r3, [r2, #84]	; 0x54

    return HAL_ERROR;
 8002b58:	2001      	movs	r0, #1
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8002b5a:	b01b      	add	sp, #108	; 0x6c
 8002b5c:	bd30      	pop	{r4, r5, pc}
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002b5e:	f7ff ffdd 	bl	8002b1c <LL_ADC_REG_IsConversionOngoing>
 8002b62:	4603      	mov	r3, r0
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b64:	6810      	ldr	r0, [r2, #0]
 8002b66:	f7ff ffd9 	bl	8002b1c <LL_ADC_REG_IsConversionOngoing>
 8002b6a:	2800      	cmp	r0, #0
 8002b6c:	d142      	bne.n	8002bf4 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d140      	bne.n	8002bf4 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b72:	680b      	ldr	r3, [r1, #0]
 8002b74:	4c24      	ldr	r4, [pc, #144]	; (8002c08 <HAL_ADCEx_MultiModeConfigChannel+0xe4>)
 8002b76:	b333      	cbz	r3, 8002bc6 <HAL_ADCEx_MultiModeConfigChannel+0xa2>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002b78:	68a3      	ldr	r3, [r4, #8]
 8002b7a:	6848      	ldr	r0, [r1, #4]
 8002b7c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002b80:	4303      	orrs	r3, r0
 8002b82:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
 8002b86:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
 8002b8a:	60a3      	str	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b8c:	481d      	ldr	r0, [pc, #116]	; (8002c04 <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
 8002b8e:	f7ff ffc1 	bl	8002b14 <LL_ADC_IsEnabled>
 8002b92:	4603      	mov	r3, r0
 8002b94:	481d      	ldr	r0, [pc, #116]	; (8002c0c <HAL_ADCEx_MultiModeConfigChannel+0xe8>)
 8002b96:	f7ff ffbd 	bl	8002b14 <LL_ADC_IsEnabled>
 8002b9a:	4303      	orrs	r3, r0
 8002b9c:	481c      	ldr	r0, [pc, #112]	; (8002c10 <HAL_ADCEx_MultiModeConfigChannel+0xec>)
 8002b9e:	f7ff ffb9 	bl	8002b14 <LL_ADC_IsEnabled>
 8002ba2:	4318      	orrs	r0, r3
 8002ba4:	d004      	beq.n	8002bb0 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ba6:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8002ba8:	2300      	movs	r3, #0
 8002baa:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
  return tmp_hal_status;
 8002bae:	e7d4      	b.n	8002b5a <HAL_ADCEx_MultiModeConfigChannel+0x36>
        MODIFY_REG(tmpADC_Common->CCR,
 8002bb0:	680b      	ldr	r3, [r1, #0]
 8002bb2:	68a5      	ldr	r5, [r4, #8]
 8002bb4:	6889      	ldr	r1, [r1, #8]
 8002bb6:	430b      	orrs	r3, r1
 8002bb8:	f425 6171 	bic.w	r1, r5, #3856	; 0xf10
 8002bbc:	f021 010f 	bic.w	r1, r1, #15
 8002bc0:	430b      	orrs	r3, r1
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002bc2:	60a3      	str	r3, [r4, #8]
 8002bc4:	e7f0      	b.n	8002ba8 <HAL_ADCEx_MultiModeConfigChannel+0x84>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002bc6:	68a3      	ldr	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bc8:	480e      	ldr	r0, [pc, #56]	; (8002c04 <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002bca:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002bce:	60a3      	str	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bd0:	f7ff ffa0 	bl	8002b14 <LL_ADC_IsEnabled>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	480d      	ldr	r0, [pc, #52]	; (8002c0c <HAL_ADCEx_MultiModeConfigChannel+0xe8>)
 8002bd8:	f7ff ff9c 	bl	8002b14 <LL_ADC_IsEnabled>
 8002bdc:	4303      	orrs	r3, r0
 8002bde:	480c      	ldr	r0, [pc, #48]	; (8002c10 <HAL_ADCEx_MultiModeConfigChannel+0xec>)
 8002be0:	f7ff ff98 	bl	8002b14 <LL_ADC_IsEnabled>
 8002be4:	4318      	orrs	r0, r3
 8002be6:	d1de      	bne.n	8002ba6 <HAL_ADCEx_MultiModeConfigChannel+0x82>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002be8:	68a3      	ldr	r3, [r4, #8]
 8002bea:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002bee:	f023 030f 	bic.w	r3, r3, #15
 8002bf2:	e7e6      	b.n	8002bc2 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bf4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002bf6:	f043 0320 	orr.w	r3, r3, #32
 8002bfa:	6553      	str	r3, [r2, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8002bfc:	2001      	movs	r0, #1
 8002bfe:	e7d3      	b.n	8002ba8 <HAL_ADCEx_MultiModeConfigChannel+0x84>
  __HAL_LOCK(hadc);
 8002c00:	2002      	movs	r0, #2
 8002c02:	e7aa      	b.n	8002b5a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002c04:	50040000 	.word	0x50040000
 8002c08:	50040300 	.word	0x50040300
 8002c0c:	50040100 	.word	0x50040100
 8002c10:	50040200 	.word	0x50040200

08002c14 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c14:	4a07      	ldr	r2, [pc, #28]	; (8002c34 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002c16:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c18:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002c1c:	041b      	lsls	r3, r3, #16
 8002c1e:	0c1b      	lsrs	r3, r3, #16
 8002c20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c24:	0200      	lsls	r0, r0, #8
 8002c26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c2a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8002c2e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8002c30:	60d3      	str	r3, [r2, #12]
 8002c32:	4770      	bx	lr
 8002c34:	e000ed00 	.word	0xe000ed00

08002c38 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c38:	4b17      	ldr	r3, [pc, #92]	; (8002c98 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c3a:	b530      	push	{r4, r5, lr}
 8002c3c:	68dc      	ldr	r4, [r3, #12]
 8002c3e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c42:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c46:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c48:	2b04      	cmp	r3, #4
 8002c4a:	bf28      	it	cs
 8002c4c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c4e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c50:	f04f 0501 	mov.w	r5, #1
 8002c54:	fa05 f303 	lsl.w	r3, r5, r3
 8002c58:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c5c:	bf8c      	ite	hi
 8002c5e:	3c03      	subhi	r4, #3
 8002c60:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c62:	4019      	ands	r1, r3
 8002c64:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c66:	fa05 f404 	lsl.w	r4, r5, r4
 8002c6a:	3c01      	subs	r4, #1
 8002c6c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8002c6e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c70:	ea42 0201 	orr.w	r2, r2, r1
 8002c74:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c78:	bfad      	iteet	ge
 8002c7a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c7e:	f000 000f 	andlt.w	r0, r0, #15
 8002c82:	4b06      	ldrlt	r3, [pc, #24]	; (8002c9c <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c84:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c88:	bfb5      	itete	lt
 8002c8a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c8c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c8e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c90:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8002c94:	bd30      	pop	{r4, r5, pc}
 8002c96:	bf00      	nop
 8002c98:	e000ed00 	.word	0xe000ed00
 8002c9c:	e000ed14 	.word	0xe000ed14

08002ca0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002ca0:	2800      	cmp	r0, #0
 8002ca2:	db08      	blt.n	8002cb6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ca4:	0942      	lsrs	r2, r0, #5
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	f000 001f 	and.w	r0, r0, #31
 8002cac:	fa03 f000 	lsl.w	r0, r3, r0
 8002cb0:	4b01      	ldr	r3, [pc, #4]	; (8002cb8 <HAL_NVIC_EnableIRQ+0x18>)
 8002cb2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8002cb6:	4770      	bx	lr
 8002cb8:	e000e100 	.word	0xe000e100

08002cbc <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002cbc:	b510      	push	{r4, lr}
  /* Check DAC handle */
  if (hdac == NULL)
 8002cbe:	4604      	mov	r4, r0
 8002cc0:	b168      	cbz	r0, 8002cde <HAL_DAC_Init+0x22>
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002cc2:	7903      	ldrb	r3, [r0, #4]
 8002cc4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002cc8:	b913      	cbnz	r3, 8002cd0 <HAL_DAC_Init+0x14>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002cca:	7142      	strb	r2, [r0, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002ccc:	f7ff f884 	bl	8001dd8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	7123      	strb	r3, [r4, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002cd4:	2000      	movs	r0, #0

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002cd6:	2301      	movs	r3, #1
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002cd8:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8002cda:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8002cdc:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 8002cde:	2001      	movs	r0, #1
}
 8002ce0:	bd10      	pop	{r4, pc}

08002ce2 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002ce2:	4770      	bx	lr

08002ce4 <HAL_DAC_IRQHandler>:
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002ce4:	6803      	ldr	r3, [r0, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	0491      	lsls	r1, r2, #18
{
 8002cea:	b510      	push	{r4, lr}
 8002cec:	4604      	mov	r4, r0
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002cee:	d511      	bpl.n	8002d14 <HAL_DAC_IRQHandler+0x30>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002cf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cf2:	0492      	lsls	r2, r2, #18
 8002cf4:	d50e      	bpl.n	8002d14 <HAL_DAC_IRQHandler+0x30>
      hdac->State = HAL_DAC_STATE_ERROR;
 8002cf6:	2204      	movs	r2, #4
 8002cf8:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002cfa:	6902      	ldr	r2, [r0, #16]
 8002cfc:	f042 0201 	orr.w	r2, r2, #1
 8002d00:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002d02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d06:	635a      	str	r2, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d0e:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002d10:	f7ff ffe7 	bl	8002ce2 <HAL_DAC_DMAUnderrunCallbackCh1>
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002d14:	6823      	ldr	r3, [r4, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	0091      	lsls	r1, r2, #2
 8002d1a:	d514      	bpl.n	8002d46 <HAL_DAC_IRQHandler+0x62>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002d1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d1e:	0092      	lsls	r2, r2, #2
 8002d20:	d511      	bpl.n	8002d46 <HAL_DAC_IRQHandler+0x62>
      hdac->State = HAL_DAC_STATE_ERROR;
 8002d22:	2204      	movs	r2, #4
 8002d24:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002d26:	6922      	ldr	r2, [r4, #16]
 8002d28:	f042 0202 	orr.w	r2, r2, #2
 8002d2c:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002d2e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002d32:	635a      	str	r2, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002d3a:	4620      	mov	r0, r4
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002d3c:	601a      	str	r2, [r3, #0]
}
 8002d3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002d42:	f000 b88a 	b.w	8002e5a <HAL_DACEx_DMAUnderrunCallbackCh2>
 8002d46:	bd10      	pop	{r4, pc}

08002d48 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002d4a:	7943      	ldrb	r3, [r0, #5]
 8002d4c:	2b01      	cmp	r3, #1
{
 8002d4e:	4604      	mov	r4, r0
 8002d50:	460d      	mov	r5, r1
 8002d52:	4616      	mov	r6, r2
 8002d54:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hdac);
 8002d58:	d063      	beq.n	8002e22 <HAL_DAC_ConfigChannel+0xda>
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8002d5a:	680b      	ldr	r3, [r1, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d5c:	7120      	strb	r0, [r4, #4]
  __HAL_LOCK(hdac);
 8002d5e:	2201      	movs	r2, #1

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002d60:	2b04      	cmp	r3, #4
  __HAL_LOCK(hdac);
 8002d62:	7162      	strb	r2, [r4, #5]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002d64:	d125      	bne.n	8002db2 <HAL_DAC_ConfigChannel+0x6a>
  /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8002d66:	2e00      	cmp	r6, #0
 8002d68:	d16c      	bne.n	8002e44 <HAL_DAC_ConfigChannel+0xfc>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8002d6a:	f7ff fbe9 	bl	8002540 <HAL_GetTick>
 8002d6e:	4607      	mov	r7, r0

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002d70:	6823      	ldr	r3, [r4, #0]
 8002d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d74:	041b      	lsls	r3, r3, #16
 8002d76:	d455      	bmi.n	8002e24 <HAL_DAC_ConfigChannel+0xdc>
          hdac->State = HAL_DAC_STATE_TIMEOUT;

          return HAL_TIMEOUT;
        }
      }
      HAL_Delay(1);
 8002d78:	2001      	movs	r0, #1
 8002d7a:	f7ff fbe7 	bl	800254c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002d7e:	6823      	ldr	r3, [r4, #0]
 8002d80:	69aa      	ldr	r2, [r5, #24]
 8002d82:	641a      	str	r2, [r3, #64]	; 0x40
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002d84:	6821      	ldr	r1, [r4, #0]
 8002d86:	f006 0010 	and.w	r0, r6, #16
 8002d8a:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8002d8c:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8002d90:	4083      	lsls	r3, r0
 8002d92:	ea22 0203 	bic.w	r2, r2, r3
 8002d96:	69eb      	ldr	r3, [r5, #28]
 8002d98:	4083      	lsls	r3, r0
 8002d9a:	431a      	orrs	r2, r3
 8002d9c:	648a      	str	r2, [r1, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002d9e:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8002da0:	22ff      	movs	r2, #255	; 0xff
 8002da2:	4082      	lsls	r2, r0
 8002da4:	ea23 0302 	bic.w	r3, r3, r2
 8002da8:	6a2a      	ldr	r2, [r5, #32]
 8002daa:	fa02 f000 	lsl.w	r0, r2, r0
 8002dae:	4303      	orrs	r3, r0
 8002db0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002db2:	692b      	ldr	r3, [r5, #16]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	f006 0210 	and.w	r2, r6, #16
 8002dba:	6823      	ldr	r3, [r4, #0]
 8002dbc:	d108      	bne.n	8002dd0 <HAL_DAC_ConfigChannel+0x88>
  /* USER TRIMMING */
  {
  /* Get the DAC CCR value */
  tmpreg1 = hdac->Instance->CCR;
 8002dbe:	6b99      	ldr	r1, [r3, #56]	; 0x38
  /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002dc0:	201f      	movs	r0, #31
 8002dc2:	4090      	lsls	r0, r2
 8002dc4:	ea21 0000 	bic.w	r0, r1, r0
  /* Configure for the selected trimming offset */
  tmpreg2 = sConfig->DAC_TrimmingValue;
  /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002dc8:	6969      	ldr	r1, [r5, #20]
 8002dca:	4091      	lsls	r1, r2
 8002dcc:	4301      	orrs	r1, r0
  /* Write to DAC CCR */
  hdac->Instance->CCR = tmpreg1;
 8002dce:	6399      	str	r1, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002dd0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002dd2:	68ae      	ldr	r6, [r5, #8]
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002dd4:	2007      	movs	r0, #7
 8002dd6:	4090      	lsls	r0, r2
 8002dd8:	ea21 0000 	bic.w	r0, r1, r0
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002ddc:	6829      	ldr	r1, [r5, #0]
 8002dde:	4331      	orrs	r1, r6
 8002de0:	68ee      	ldr	r6, [r5, #12]
 8002de2:	4331      	orrs	r1, r6
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002de4:	4091      	lsls	r1, r2
 8002de6:	4301      	orrs	r1, r0
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002de8:	63d9      	str	r1, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002dea:	6819      	ldr	r1, [r3, #0]
 8002dec:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002df0:	4090      	lsls	r0, r2
 8002df2:	ea21 0100 	bic.w	r1, r1, r0
 8002df6:	6019      	str	r1, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002df8:	6819      	ldr	r1, [r3, #0]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002dfa:	f640 70fc 	movw	r0, #4092	; 0xffc
 8002dfe:	4090      	lsls	r0, r2
 8002e00:	ea21 0000 	bic.w	r0, r1, r0
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002e04:	6869      	ldr	r1, [r5, #4]
 8002e06:	4091      	lsls	r1, r2
 8002e08:	4301      	orrs	r1, r0
  }

#endif /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002e0a:	6019      	str	r1, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002e0c:	6819      	ldr	r1, [r3, #0]
 8002e0e:	20c0      	movs	r0, #192	; 0xc0
 8002e10:	fa00 f202 	lsl.w	r2, r0, r2
 8002e14:	ea21 0202 	bic.w	r2, r1, r2
 8002e18:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002e1a:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_READY;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	7123      	strb	r3, [r4, #4]
  __HAL_UNLOCK(hdac);
 8002e20:	7160      	strb	r0, [r4, #5]

  /* Return function status */
  return HAL_OK;
}
 8002e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002e24:	f7ff fb8c 	bl	8002540 <HAL_GetTick>
 8002e28:	1bc0      	subs	r0, r0, r7
 8002e2a:	2801      	cmp	r0, #1
 8002e2c:	d9a0      	bls.n	8002d70 <HAL_DAC_ConfigChannel+0x28>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002e2e:	6923      	ldr	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002e30:	2003      	movs	r0, #3
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002e32:	f043 0308 	orr.w	r3, r3, #8
 8002e36:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002e38:	7120      	strb	r0, [r4, #4]
          return HAL_TIMEOUT;
 8002e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002e3c:	f7ff fb80 	bl	8002540 <HAL_GetTick>
 8002e40:	2801      	cmp	r0, #1
 8002e42:	d8f4      	bhi.n	8002e2e <HAL_DAC_ConfigChannel+0xe6>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002e44:	6823      	ldr	r3, [r4, #0]
 8002e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	dbf7      	blt.n	8002e3c <HAL_DAC_ConfigChannel+0xf4>
      HAL_Delay(1U);
 8002e4c:	2001      	movs	r0, #1
 8002e4e:	f7ff fb7d 	bl	800254c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002e52:	6823      	ldr	r3, [r4, #0]
 8002e54:	69aa      	ldr	r2, [r5, #24]
 8002e56:	645a      	str	r2, [r3, #68]	; 0x44
 8002e58:	e794      	b.n	8002d84 <HAL_DAC_ConfigChannel+0x3c>

08002e5a <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002e5a:	4770      	bx	lr

08002e5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e60:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e62:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e64:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003010 <HAL_GPIO_Init+0x1b4>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002e68:	4c67      	ldr	r4, [pc, #412]	; (8003008 <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e6a:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00u;
 8002e6c:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e6e:	9a01      	ldr	r2, [sp, #4]
 8002e70:	40da      	lsrs	r2, r3
 8002e72:	d102      	bne.n	8002e7a <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 8002e74:	b005      	add	sp, #20
 8002e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e7a:	2601      	movs	r6, #1
    if (iocurrent != 0x00u)
 8002e7c:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e7e:	409e      	lsls	r6, r3
    if (iocurrent != 0x00u)
 8002e80:	ea12 0e06 	ands.w	lr, r2, r6
 8002e84:	f000 80b1 	beq.w	8002fea <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e88:	684a      	ldr	r2, [r1, #4]
 8002e8a:	f022 0710 	bic.w	r7, r2, #16
 8002e8e:	2f02      	cmp	r7, #2
 8002e90:	d116      	bne.n	8002ec0 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 8002e92:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8002e96:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e9a:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8002e9e:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ea2:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8002ea6:	f04f 0c0f 	mov.w	ip, #15
 8002eaa:	fa0c fc0a 	lsl.w	ip, ip, sl
 8002eae:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002eb2:	690d      	ldr	r5, [r1, #16]
 8002eb4:	fa05 f50a 	lsl.w	r5, r5, sl
 8002eb8:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 8002ebc:	f8c9 5020 	str.w	r5, [r9, #32]
 8002ec0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ec4:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8002ec6:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002eca:	fa05 f50c 	lsl.w	r5, r5, ip
 8002ece:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ed0:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ed4:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ed8:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002edc:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ede:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ee2:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8002ee4:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ee8:	d811      	bhi.n	8002f0e <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8002eea:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002eec:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ef0:	68cf      	ldr	r7, [r1, #12]
 8002ef2:	fa07 f70c 	lsl.w	r7, r7, ip
 8002ef6:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8002efa:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002efc:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002efe:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002f02:	f3c2 1700 	ubfx	r7, r2, #4, #1
 8002f06:	409f      	lsls	r7, r3
 8002f08:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 8002f0c:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002f0e:	f1ba 0f03 	cmp.w	sl, #3
 8002f12:	d107      	bne.n	8002f24 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 8002f14:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002f16:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002f1a:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 8002f1e:	409f      	lsls	r7, r3
 8002f20:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 8002f22:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8002f24:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002f26:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002f28:	688e      	ldr	r6, [r1, #8]
 8002f2a:	fa06 f60c 	lsl.w	r6, r6, ip
 8002f2e:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 8002f30:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f32:	00d5      	lsls	r5, r2, #3
 8002f34:	d559      	bpl.n	8002fea <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f36:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8002f3a:	f045 0501 	orr.w	r5, r5, #1
 8002f3e:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 8002f42:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8002f46:	f023 0603 	bic.w	r6, r3, #3
 8002f4a:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8002f4e:	f005 0501 	and.w	r5, r5, #1
 8002f52:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8002f56:	9503      	str	r5, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f58:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f5c:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8002f5e:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f60:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8002f64:	270f      	movs	r7, #15
 8002f66:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f6a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f6e:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f72:	d03c      	beq.n	8002fee <HAL_GPIO_Init+0x192>
 8002f74:	4d25      	ldr	r5, [pc, #148]	; (800300c <HAL_GPIO_Init+0x1b0>)
 8002f76:	42a8      	cmp	r0, r5
 8002f78:	d03b      	beq.n	8002ff2 <HAL_GPIO_Init+0x196>
 8002f7a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002f7e:	42a8      	cmp	r0, r5
 8002f80:	d039      	beq.n	8002ff6 <HAL_GPIO_Init+0x19a>
 8002f82:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002f86:	42a8      	cmp	r0, r5
 8002f88:	d037      	beq.n	8002ffa <HAL_GPIO_Init+0x19e>
 8002f8a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002f8e:	42a8      	cmp	r0, r5
 8002f90:	d035      	beq.n	8002ffe <HAL_GPIO_Init+0x1a2>
 8002f92:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002f96:	42a8      	cmp	r0, r5
 8002f98:	d033      	beq.n	8003002 <HAL_GPIO_Init+0x1a6>
 8002f9a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002f9e:	42a8      	cmp	r0, r5
 8002fa0:	bf14      	ite	ne
 8002fa2:	2507      	movne	r5, #7
 8002fa4:	2506      	moveq	r5, #6
 8002fa6:	fa05 f50c 	lsl.w	r5, r5, ip
 8002faa:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002fac:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 8002fae:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8002fb0:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fb4:	03d7      	lsls	r7, r2, #15
        temp &= ~(iocurrent);
 8002fb6:	bf54      	ite	pl
 8002fb8:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8002fba:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 8002fbe:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 8002fc0:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fc2:	0397      	lsls	r7, r2, #14
        temp &= ~(iocurrent);
 8002fc4:	bf54      	ite	pl
 8002fc6:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8002fc8:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 8002fcc:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 8002fce:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fd0:	02d7      	lsls	r7, r2, #11
        temp &= ~(iocurrent);
 8002fd2:	bf54      	ite	pl
 8002fd4:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8002fd6:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 8002fda:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8002fdc:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002fde:	0292      	lsls	r2, r2, #10
        temp &= ~(iocurrent);
 8002fe0:	bf54      	ite	pl
 8002fe2:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8002fe4:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 8002fe8:	60e5      	str	r5, [r4, #12]
    position++;
 8002fea:	3301      	adds	r3, #1
 8002fec:	e73f      	b.n	8002e6e <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002fee:	2500      	movs	r5, #0
 8002ff0:	e7d9      	b.n	8002fa6 <HAL_GPIO_Init+0x14a>
 8002ff2:	2501      	movs	r5, #1
 8002ff4:	e7d7      	b.n	8002fa6 <HAL_GPIO_Init+0x14a>
 8002ff6:	2502      	movs	r5, #2
 8002ff8:	e7d5      	b.n	8002fa6 <HAL_GPIO_Init+0x14a>
 8002ffa:	2503      	movs	r5, #3
 8002ffc:	e7d3      	b.n	8002fa6 <HAL_GPIO_Init+0x14a>
 8002ffe:	2504      	movs	r5, #4
 8003000:	e7d1      	b.n	8002fa6 <HAL_GPIO_Init+0x14a>
 8003002:	2505      	movs	r5, #5
 8003004:	e7cf      	b.n	8002fa6 <HAL_GPIO_Init+0x14a>
 8003006:	bf00      	nop
 8003008:	40010400 	.word	0x40010400
 800300c:	48000400 	.word	0x48000400
 8003010:	40021000 	.word	0x40021000

08003014 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003014:	6903      	ldr	r3, [r0, #16]
 8003016:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8003018:	bf14      	ite	ne
 800301a:	2001      	movne	r0, #1
 800301c:	2000      	moveq	r0, #0
 800301e:	4770      	bx	lr

08003020 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003020:	b10a      	cbz	r2, 8003026 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003022:	6181      	str	r1, [r0, #24]
 8003024:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003026:	6281      	str	r1, [r0, #40]	; 0x28
 8003028:	4770      	bx	lr

0800302a <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800302a:	6943      	ldr	r3, [r0, #20]
 800302c:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800302e:	bf14      	ite	ne
 8003030:	6281      	strne	r1, [r0, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003032:	6181      	streq	r1, [r0, #24]
 8003034:	4770      	bx	lr

08003036 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003036:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003038:	4604      	mov	r4, r0
 800303a:	2800      	cmp	r0, #0
 800303c:	d04a      	beq.n	80030d4 <HAL_I2C_Init+0x9e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800303e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003042:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003046:	b91b      	cbnz	r3, 8003050 <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003048:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800304c:	f7fe fefa 	bl	8001e44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003050:	2324      	movs	r3, #36	; 0x24
 8003052:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003056:	6823      	ldr	r3, [r4, #0]
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003058:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	f022 0201 	bic.w	r2, r2, #1
 8003060:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003062:	6862      	ldr	r2, [r4, #4]
 8003064:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003068:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800306a:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800306c:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800306e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003072:	609a      	str	r2, [r3, #8]
 8003074:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003076:	d124      	bne.n	80030c2 <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003078:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800307c:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800307e:	685a      	ldr	r2, [r3, #4]
  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003080:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003082:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003086:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800308a:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800308c:	68da      	ldr	r2, [r3, #12]
 800308e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003092:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003094:	6922      	ldr	r2, [r4, #16]
 8003096:	430a      	orrs	r2, r1
 8003098:	69a1      	ldr	r1, [r4, #24]
 800309a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800309e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80030a0:	6a21      	ldr	r1, [r4, #32]
 80030a2:	69e2      	ldr	r2, [r4, #28]
 80030a4:	430a      	orrs	r2, r1
 80030a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	f042 0201 	orr.w	r2, r2, #1
 80030ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030b0:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80030b2:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030b4:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80030b6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80030ba:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030bc:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
 80030c0:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80030c2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80030c6:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80030c8:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80030ca:	bf04      	itt	eq
 80030cc:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 80030d0:	605a      	streq	r2, [r3, #4]
 80030d2:	e7d4      	b.n	800307e <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 80030d4:	2001      	movs	r0, #1
}
 80030d6:	bd10      	pop	{r4, pc}

080030d8 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030d8:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80030dc:	b2d2      	uxtb	r2, r2
 80030de:	2a20      	cmp	r2, #32
{
 80030e0:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80030e2:	d11d      	bne.n	8003120 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030e4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d019      	beq.n	8003120 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030ec:	2324      	movs	r3, #36	; 0x24
 80030ee:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030f2:	6803      	ldr	r3, [r0, #0]
 80030f4:	681c      	ldr	r4, [r3, #0]
 80030f6:	f024 0401 	bic.w	r4, r4, #1
 80030fa:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80030fc:	681c      	ldr	r4, [r3, #0]
 80030fe:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8003102:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003104:	681c      	ldr	r4, [r3, #0]
 8003106:	4321      	orrs	r1, r4
 8003108:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800310a:	6819      	ldr	r1, [r3, #0]
 800310c:	f041 0101 	orr.w	r1, r1, #1
 8003110:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003112:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003114:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003118:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800311c:	4618      	mov	r0, r3
 800311e:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8003120:	2002      	movs	r0, #2
  }
}
 8003122:	bd10      	pop	{r4, pc}

08003124 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003124:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003126:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 800312a:	b2e4      	uxtb	r4, r4
 800312c:	2c20      	cmp	r4, #32
 800312e:	d11c      	bne.n	800316a <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003130:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003134:	2b01      	cmp	r3, #1
 8003136:	d018      	beq.n	800316a <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003138:	2324      	movs	r3, #36	; 0x24
 800313a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800313e:	6803      	ldr	r3, [r0, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	f022 0201 	bic.w	r2, r2, #1
 8003146:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003148:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800314a:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800314e:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003152:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	f042 0201 	orr.w	r2, r2, #1
 800315a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800315c:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800315e:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003162:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8003166:	4618      	mov	r0, r3
 8003168:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 800316a:	2002      	movs	r0, #2
  }
}
 800316c:	bd10      	pop	{r4, pc}

0800316e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800316e:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003170:	4604      	mov	r4, r0
{
 8003172:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 8003174:	b360      	cbz	r0, 80031d0 <HAL_PCD_Init+0x62>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003176:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
  USBx = hpcd->Instance;
 800317a:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800317c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003180:	b91b      	cbnz	r3, 800318a <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003182:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003186:	f00a fbf3 	bl	800d970 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800318a:	2303      	movs	r3, #3
 800318c:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003190:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003192:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003194:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_PCD_DISABLE(hpcd);
 8003198:	f855 0b10 	ldr.w	r0, [r5], #16
    hpcd->Init.dma_enable = 0U;
 800319c:	bf08      	it	eq
 800319e:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 80031a0:	f003 f806 	bl	80061b0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031a6:	466e      	mov	r6, sp
 80031a8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80031aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031ac:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80031ae:	e895 0003 	ldmia.w	r5, {r0, r1}
 80031b2:	e886 0003 	stmia.w	r6, {r0, r1}
 80031b6:	4625      	mov	r5, r4
 80031b8:	1d27      	adds	r7, r4, #4
 80031ba:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80031be:	f855 0b10 	ldr.w	r0, [r5], #16
 80031c2:	f002 ff43 	bl	800604c <USB_CoreInit>
 80031c6:	4606      	mov	r6, r0
 80031c8:	b120      	cbz	r0, 80031d4 <HAL_PCD_Init+0x66>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031ca:	2302      	movs	r3, #2
 80031cc:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 80031d0:	2501      	movs	r5, #1
 80031d2:	e056      	b.n	8003282 <HAL_PCD_Init+0x114>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80031d4:	4601      	mov	r1, r0
 80031d6:	6820      	ldr	r0, [r4, #0]
 80031d8:	f002 fff0 	bl	80061bc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031dc:	4630      	mov	r0, r6
 80031de:	f8d4 e004 	ldr.w	lr, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80031e2:	261c      	movs	r6, #28
 80031e4:	f04f 0c01 	mov.w	ip, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80031e8:	4601      	mov	r1, r0
 80031ea:	b2c2      	uxtb	r2, r0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031ec:	4596      	cmp	lr, r2
 80031ee:	f100 0001 	add.w	r0, r0, #1
 80031f2:	d81c      	bhi.n	800322e <HAL_PCD_Init+0xc0>
 80031f4:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80031f6:	261c      	movs	r6, #28
 80031f8:	4619      	mov	r1, r3
 80031fa:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031fc:	4586      	cmp	lr, r0
 80031fe:	f103 0301 	add.w	r3, r3, #1
 8003202:	d822      	bhi.n	800324a <HAL_PCD_Init+0xdc>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003204:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003206:	466e      	mov	r6, sp
 8003208:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800320a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800320c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800320e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003212:	e886 0003 	stmia.w	r6, {r0, r1}
 8003216:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800321a:	6820      	ldr	r0, [r4, #0]
 800321c:	f003 f810 	bl	8006240 <USB_DevInit>
 8003220:	2301      	movs	r3, #1
 8003222:	4605      	mov	r5, r0
 8003224:	b300      	cbz	r0, 8003268 <HAL_PCD_Init+0xfa>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003226:	2202      	movs	r2, #2
 8003228:	f884 23bd 	strb.w	r2, [r4, #957]	; 0x3bd
 800322c:	e7d0      	b.n	80031d0 <HAL_PCD_Init+0x62>
    hpcd->IN_ep[i].is_in = 1U;
 800322e:	fb06 4302 	mla	r3, r6, r2, r4
 8003232:	f883 c03d 	strb.w	ip, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8003236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 800323a:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800323e:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 8003242:	6459      	str	r1, [r3, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003244:	6499      	str	r1, [r3, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 8003246:	6519      	str	r1, [r3, #80]	; 0x50
 8003248:	e7cf      	b.n	80031ea <HAL_PCD_Init+0x7c>
    hpcd->OUT_ep[i].is_in = 0U;
 800324a:	fb06 4200 	mla	r2, r6, r0, r4
 800324e:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 8003252:	f882 01fc 	strb.w	r0, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003256:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 800325a:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800325e:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003262:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
 8003266:	e7c8      	b.n	80031fa <HAL_PCD_Init+0x8c>
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 8003268:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800326c:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003270:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003272:	2b01      	cmp	r3, #1
 8003274:	d102      	bne.n	800327c <HAL_PCD_Init+0x10e>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003276:	4620      	mov	r0, r4
 8003278:	f000 fbe8 	bl	8003a4c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800327c:	6820      	ldr	r0, [r4, #0]
 800327e:	f003 fac1 	bl	8006804 <USB_DevDisconnect>

  return HAL_OK;
}
 8003282:	4628      	mov	r0, r5
 8003284:	b00b      	add	sp, #44	; 0x2c
 8003286:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003288 <HAL_PCD_Start>:
{
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8003288:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 800328c:	2b01      	cmp	r3, #1
{
 800328e:	b510      	push	{r4, lr}
 8003290:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003292:	d013      	beq.n	80032bc <HAL_PCD_Start+0x34>
 8003294:	2301      	movs	r3, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003296:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8003298:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 800329c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800329e:	2b01      	cmp	r3, #1
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80032a0:	bf02      	ittt	eq
 80032a2:	6b83      	ldreq	r3, [r0, #56]	; 0x38
 80032a4:	f443 3380 	orreq.w	r3, r3, #65536	; 0x10000
 80032a8:	6383      	streq	r3, [r0, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  (void)USB_DevConnect(hpcd->Instance);
 80032aa:	f003 fa9f 	bl	80067ec <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80032ae:	6820      	ldr	r0, [r4, #0]
 80032b0:	f002 ff78 	bl	80061a4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80032b4:	2000      	movs	r0, #0
 80032b6:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 80032ba:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80032bc:	2002      	movs	r0, #2
}
 80032be:	bd10      	pop	{r4, pc}

080032c0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80032c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032c4:	6806      	ldr	r6, [r0, #0]
{
 80032c6:	b085      	sub	sp, #20
 80032c8:	4604      	mov	r4, r0
  uint32_t i, ep_intr, epint, epnum = 0U;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80032ca:	4630      	mov	r0, r6
 80032cc:	f003 fad5 	bl	800687a <USB_GetMode>
 80032d0:	9000      	str	r0, [sp, #0]
 80032d2:	2800      	cmp	r0, #0
 80032d4:	f040 814a 	bne.w	800356c <HAL_PCD_IRQHandler+0x2ac>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80032d8:	6820      	ldr	r0, [r4, #0]
 80032da:	f003 fa9f 	bl	800681c <USB_ReadInterrupts>
 80032de:	2800      	cmp	r0, #0
 80032e0:	f000 8144 	beq.w	800356c <HAL_PCD_IRQHandler+0x2ac>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80032e4:	6820      	ldr	r0, [r4, #0]
 80032e6:	f003 fa99 	bl	800681c <USB_ReadInterrupts>
 80032ea:	0785      	lsls	r5, r0, #30
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80032ec:	bf48      	it	mi
 80032ee:	6822      	ldrmi	r2, [r4, #0]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80032f0:	6820      	ldr	r0, [r4, #0]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80032f2:	bf42      	ittt	mi
 80032f4:	6953      	ldrmi	r3, [r2, #20]
 80032f6:	f003 0302 	andmi.w	r3, r3, #2
 80032fa:	6153      	strmi	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80032fc:	f003 fa8e 	bl	800681c <USB_ReadInterrupts>
 8003300:	f410 2500 	ands.w	r5, r0, #524288	; 0x80000
 8003304:	d00e      	beq.n	8003324 <HAL_PCD_IRQHandler+0x64>
    {
      epnum = 0U;

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003306:	6820      	ldr	r0, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;


  if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8003308:	f8df a480 	ldr.w	sl, [pc, #1152]	; 800378c <HAL_PCD_IRQHandler+0x4cc>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800330c:	f003 fa8a 	bl	8006824 <USB_ReadDevAllOutEpInterrupt>
 8003310:	f506 6730 	add.w	r7, r6, #2816	; 0xb00
 8003314:	4680      	mov	r8, r0
      epnum = 0U;
 8003316:	2500      	movs	r5, #0
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003318:	f04f 0920 	mov.w	r9, #32
      while (ep_intr != 0U)
 800331c:	f1b8 0f00 	cmp.w	r8, #0
 8003320:	f040 8127 	bne.w	8003572 <HAL_PCD_IRQHandler+0x2b2>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003324:	6820      	ldr	r0, [r4, #0]
 8003326:	f003 fa79 	bl	800681c <USB_ReadInterrupts>
 800332a:	0342      	lsls	r2, r0, #13
 800332c:	d50b      	bpl.n	8003346 <HAL_PCD_IRQHandler+0x86>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800332e:	6820      	ldr	r0, [r4, #0]
 8003330:	f003 fa80 	bl	8006834 <USB_ReadDevAllInEpInterrupt>
 8003334:	4627      	mov	r7, r4
 8003336:	4683      	mov	fp, r0
 8003338:	f506 6a10 	add.w	sl, r6, #2304	; 0x900
      epnum = 0U;
 800333c:	2500      	movs	r5, #0
      while (ep_intr != 0U)
 800333e:	f1bb 0f00 	cmp.w	fp, #0
 8003342:	f040 8168 	bne.w	8003616 <HAL_PCD_IRQHandler+0x356>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003346:	6820      	ldr	r0, [r4, #0]
 8003348:	f003 fa68 	bl	800681c <USB_ReadInterrupts>
 800334c:	2800      	cmp	r0, #0
 800334e:	da15      	bge.n	800337c <HAL_PCD_IRQHandler+0xbc>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003350:	f8d6 3804 	ldr.w	r3, [r6, #2052]	; 0x804
 8003354:	f023 0301 	bic.w	r3, r3, #1
 8003358:	f8c6 3804 	str.w	r3, [r6, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 800335c:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8003360:	2b01      	cmp	r3, #1
 8003362:	f040 81de 	bne.w	8003722 <HAL_PCD_IRQHandler+0x462>
        hpcd->LPM_State = LPM_L0;
 8003366:	2100      	movs	r1, #0
 8003368:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800336c:	4620      	mov	r0, r4
 800336e:	f00a fc83 	bl	800dc78 <HAL_PCDEx_LPM_Callback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003372:	6822      	ldr	r2, [r4, #0]
 8003374:	6953      	ldr	r3, [r2, #20]
 8003376:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800337a:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800337c:	6820      	ldr	r0, [r4, #0]
 800337e:	f003 fa4d 	bl	800681c <USB_ReadInterrupts>
 8003382:	0503      	lsls	r3, r0, #20
 8003384:	d50b      	bpl.n	800339e <HAL_PCD_IRQHandler+0xde>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003386:	f8d6 3808 	ldr.w	r3, [r6, #2056]	; 0x808
 800338a:	07df      	lsls	r7, r3, #31
 800338c:	d502      	bpl.n	8003394 <HAL_PCD_IRQHandler+0xd4>
        HAL_PCD_SuspendCallback(hpcd);
 800338e:	4620      	mov	r0, r4
 8003390:	f00a fb6a 	bl	800da68 <HAL_PCD_SuspendCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003394:	6822      	ldr	r2, [r4, #0]
 8003396:	6953      	ldr	r3, [r2, #20]
 8003398:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800339c:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800339e:	6820      	ldr	r0, [r4, #0]
 80033a0:	f003 fa3c 	bl	800681c <USB_ReadInterrupts>
 80033a4:	0100      	lsls	r0, r0, #4
 80033a6:	d514      	bpl.n	80033d2 <HAL_PCD_IRQHandler+0x112>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80033a8:	6823      	ldr	r3, [r4, #0]
 80033aa:	695a      	ldr	r2, [r3, #20]
 80033ac:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80033b0:	615a      	str	r2, [r3, #20]
      if (hpcd->LPM_State == LPM_L0)
 80033b2:	f894 23f4 	ldrb.w	r2, [r4, #1012]	; 0x3f4
 80033b6:	2a00      	cmp	r2, #0
 80033b8:	f040 81b7 	bne.w	800372a <HAL_PCD_IRQHandler+0x46a>
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80033bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
        hpcd->LPM_State = LPM_L1;
 80033be:	2101      	movs	r1, #1
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80033c0:	f3c3 0383 	ubfx	r3, r3, #2, #4
        hpcd->LPM_State = LPM_L1;
 80033c4:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80033c8:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80033cc:	4620      	mov	r0, r4
 80033ce:	f00a fc53 	bl	800dc78 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80033d2:	6820      	ldr	r0, [r4, #0]
 80033d4:	f003 fa22 	bl	800681c <USB_ReadInterrupts>
 80033d8:	04c1      	lsls	r1, r0, #19
 80033da:	d534      	bpl.n	8003446 <HAL_PCD_IRQHandler+0x186>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80033dc:	f506 6700 	add.w	r7, r6, #2048	; 0x800
 80033e0:	687b      	ldr	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80033e2:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80033e4:	f023 0301 	bic.w	r3, r3, #1
 80033e8:	607b      	str	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80033ea:	2110      	movs	r1, #16
 80033ec:	f002 fefe 	bl	80061ec <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033f0:	6860      	ldr	r0, [r4, #4]
 80033f2:	f506 6310 	add.w	r3, r6, #2304	; 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80033f6:	f64f 317f 	movw	r1, #64383	; 0xfb7f
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033fa:	9a00      	ldr	r2, [sp, #0]
 80033fc:	4282      	cmp	r2, r0
 80033fe:	f040 8198 	bne.w	8003732 <HAL_PCD_IRQHandler+0x472>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003408:	61fb      	str	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800340a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800340c:	2b00      	cmp	r3, #0
 800340e:	f000 81a2 	beq.w	8003756 <HAL_PCD_IRQHandler+0x496>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003412:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003416:	f043 030b 	orr.w	r3, r3, #11
 800341a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800341e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003420:	f043 030b 	orr.w	r3, r3, #11
 8003424:	647b      	str	r3, [r7, #68]	; 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003426:	f8d6 3800 	ldr.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800342a:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800342c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003430:	f8c6 3800 	str.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003434:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8003438:	f003 fa3e 	bl	80068b8 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800343c:	6822      	ldr	r2, [r4, #0]
 800343e:	6953      	ldr	r3, [r2, #20]
 8003440:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003444:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003446:	6820      	ldr	r0, [r4, #0]
 8003448:	f003 f9e8 	bl	800681c <USB_ReadInterrupts>
 800344c:	0482      	lsls	r2, r0, #18
 800344e:	d516      	bpl.n	800347e <HAL_PCD_IRQHandler+0x1be>
      (void)USB_ActivateSetup(hpcd->Instance);
 8003450:	6820      	ldr	r0, [r4, #0]
 8003452:	f003 fa16 	bl	8006882 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003456:	6820      	ldr	r0, [r4, #0]
 8003458:	f002 ff9a 	bl	8006390 <USB_GetDevSpeed>
 800345c:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800345e:	6827      	ldr	r7, [r4, #0]
 8003460:	f000 ff5c 	bl	800431c <HAL_RCC_GetHCLKFreq>
 8003464:	7b22      	ldrb	r2, [r4, #12]
 8003466:	4601      	mov	r1, r0
 8003468:	4638      	mov	r0, r7
 800346a:	f002 fe27 	bl	80060bc <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 800346e:	4620      	mov	r0, r4
 8003470:	f00a fae7 	bl	800da42 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003474:	6822      	ldr	r2, [r4, #0]
 8003476:	6953      	ldr	r3, [r2, #20]
 8003478:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800347c:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800347e:	6820      	ldr	r0, [r4, #0]
 8003480:	f003 f9cc 	bl	800681c <USB_ReadInterrupts>
 8003484:	06c3      	lsls	r3, r0, #27
 8003486:	d52b      	bpl.n	80034e0 <HAL_PCD_IRQHandler+0x220>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003488:	6822      	ldr	r2, [r4, #0]
 800348a:	6993      	ldr	r3, [r2, #24]
 800348c:	f023 0310 	bic.w	r3, r3, #16
 8003490:	6193      	str	r3, [r2, #24]
      temp = USBx->GRXSTSP;
 8003492:	6a37      	ldr	r7, [r6, #32]
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003494:	f3c7 4343 	ubfx	r3, r7, #17, #4
 8003498:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800349a:	f007 090f 	and.w	r9, r7, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800349e:	f040 8165 	bne.w	800376c <HAL_PCD_IRQHandler+0x4ac>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80034a2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80034a6:	421f      	tst	r7, r3
 80034a8:	d015      	beq.n	80034d6 <HAL_PCD_IRQHandler+0x216>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80034aa:	f04f 081c 	mov.w	r8, #28
 80034ae:	fb08 4809 	mla	r8, r8, r9, r4
 80034b2:	f3c7 170a 	ubfx	r7, r7, #4, #11
 80034b6:	463a      	mov	r2, r7
 80034b8:	f8d8 1208 	ldr.w	r1, [r8, #520]	; 0x208
 80034bc:	4630      	mov	r0, r6
 80034be:	f003 f91f 	bl	8006700 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034c2:	f8d8 3208 	ldr.w	r3, [r8, #520]	; 0x208
 80034c6:	443b      	add	r3, r7
 80034c8:	f8c8 3208 	str.w	r3, [r8, #520]	; 0x208
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034cc:	f8d8 3214 	ldr.w	r3, [r8, #532]	; 0x214
 80034d0:	441f      	add	r7, r3
 80034d2:	f8c8 7214 	str.w	r7, [r8, #532]	; 0x214
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80034d6:	6822      	ldr	r2, [r4, #0]
 80034d8:	6993      	ldr	r3, [r2, #24]
 80034da:	f043 0310 	orr.w	r3, r3, #16
 80034de:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80034e0:	6820      	ldr	r0, [r4, #0]
 80034e2:	f003 f99b 	bl	800681c <USB_ReadInterrupts>
 80034e6:	0707      	lsls	r7, r0, #28
 80034e8:	d507      	bpl.n	80034fa <HAL_PCD_IRQHandler+0x23a>
      HAL_PCD_SOFCallback(hpcd);
 80034ea:	4620      	mov	r0, r4
 80034ec:	f00a faa5 	bl	800da3a <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80034f0:	6822      	ldr	r2, [r4, #0]
 80034f2:	6953      	ldr	r3, [r2, #20]
 80034f4:	f003 0308 	and.w	r3, r3, #8
 80034f8:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80034fa:	6820      	ldr	r0, [r4, #0]
 80034fc:	f003 f98e 	bl	800681c <USB_ReadInterrupts>
 8003500:	02c6      	lsls	r6, r0, #11
 8003502:	d508      	bpl.n	8003516 <HAL_PCD_IRQHandler+0x256>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003504:	b2e9      	uxtb	r1, r5
 8003506:	4620      	mov	r0, r4
 8003508:	f00a fae4 	bl	800dad4 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800350c:	6822      	ldr	r2, [r4, #0]
 800350e:	6953      	ldr	r3, [r2, #20]
 8003510:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003514:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003516:	6820      	ldr	r0, [r4, #0]
 8003518:	f003 f980 	bl	800681c <USB_ReadInterrupts>
 800351c:	0280      	lsls	r0, r0, #10
 800351e:	d508      	bpl.n	8003532 <HAL_PCD_IRQHandler+0x272>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003520:	b2e9      	uxtb	r1, r5
 8003522:	4620      	mov	r0, r4
 8003524:	f00a fad2 	bl	800dacc <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003528:	6822      	ldr	r2, [r4, #0]
 800352a:	6953      	ldr	r3, [r2, #20]
 800352c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003530:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003532:	6820      	ldr	r0, [r4, #0]
 8003534:	f003 f972 	bl	800681c <USB_ReadInterrupts>
 8003538:	0041      	lsls	r1, r0, #1
 800353a:	d507      	bpl.n	800354c <HAL_PCD_IRQHandler+0x28c>
      HAL_PCD_ConnectCallback(hpcd);
 800353c:	4620      	mov	r0, r4
 800353e:	f00a facd 	bl	800dadc <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003542:	6822      	ldr	r2, [r4, #0]
 8003544:	6953      	ldr	r3, [r2, #20]
 8003546:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800354a:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800354c:	6820      	ldr	r0, [r4, #0]
 800354e:	f003 f965 	bl	800681c <USB_ReadInterrupts>
 8003552:	0742      	lsls	r2, r0, #29
 8003554:	d50a      	bpl.n	800356c <HAL_PCD_IRQHandler+0x2ac>
      temp = hpcd->Instance->GOTGINT;
 8003556:	6823      	ldr	r3, [r4, #0]
 8003558:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800355a:	076b      	lsls	r3, r5, #29
 800355c:	d502      	bpl.n	8003564 <HAL_PCD_IRQHandler+0x2a4>
        HAL_PCD_DisconnectCallback(hpcd);
 800355e:	4620      	mov	r0, r4
 8003560:	f00a fac0 	bl	800dae4 <HAL_PCD_DisconnectCallback>
      hpcd->Instance->GOTGINT |= temp;
 8003564:	6823      	ldr	r3, [r4, #0]
 8003566:	685a      	ldr	r2, [r3, #4]
 8003568:	4315      	orrs	r5, r2
 800356a:	605d      	str	r5, [r3, #4]
}
 800356c:	b005      	add	sp, #20
 800356e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((ep_intr & 0x1U) != 0U)
 8003572:	f018 0f01 	tst.w	r8, #1
 8003576:	d040      	beq.n	80035fa <HAL_PCD_IRQHandler+0x33a>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003578:	b2ea      	uxtb	r2, r5
 800357a:	4611      	mov	r1, r2
 800357c:	6820      	ldr	r0, [r4, #0]
 800357e:	9201      	str	r2, [sp, #4]
 8003580:	f003 f960 	bl	8006844 <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003584:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003588:	4683      	mov	fp, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800358a:	9a01      	ldr	r2, [sp, #4]
 800358c:	d00f      	beq.n	80035ae <HAL_PCD_IRQHandler+0x2ee>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800358e:	2101      	movs	r1, #1
 8003590:	60b9      	str	r1, [r7, #8]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003592:	6821      	ldr	r1, [r4, #0]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003594:	6c08      	ldr	r0, [r1, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003596:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800359a:	eb01 1145 	add.w	r1, r1, r5, lsl #5
  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800359e:	4550      	cmp	r0, sl
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80035a0:	688b      	ldr	r3, [r1, #8]
  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80035a2:	d133      	bne.n	800360c <HAL_PCD_IRQHandler+0x34c>
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80035a4:	0418      	lsls	r0, r3, #16
 80035a6:	d52d      	bpl.n	8003604 <HAL_PCD_IRQHandler+0x344>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035a8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80035ac:	608a      	str	r2, [r1, #8]
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80035ae:	f01b 0f08 	tst.w	fp, #8
 80035b2:	d012      	beq.n	80035da <HAL_PCD_IRQHandler+0x31a>
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035b4:	6822      	ldr	r2, [r4, #0]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80035b6:	6c11      	ldr	r1, [r2, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80035b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035bc:	eb02 1245 	add.w	r2, r2, r5, lsl #5
  if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80035c0:	4551      	cmp	r1, sl
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80035c2:	6890      	ldr	r0, [r2, #8]
  if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80035c4:	d104      	bne.n	80035d0 <HAL_PCD_IRQHandler+0x310>
 80035c6:	0401      	lsls	r1, r0, #16
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035c8:	bf44      	itt	mi
 80035ca:	f44f 4100 	movmi.w	r1, #32768	; 0x8000
 80035ce:	6091      	strmi	r1, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80035d0:	4620      	mov	r0, r4
 80035d2:	f00a fa1b 	bl	800da0c <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80035d6:	2208      	movs	r2, #8
 80035d8:	60ba      	str	r2, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80035da:	f01b 0f10 	tst.w	fp, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80035de:	bf1c      	itt	ne
 80035e0:	2210      	movne	r2, #16
 80035e2:	60ba      	strne	r2, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80035e4:	f01b 0f20 	tst.w	fp, #32
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80035e8:	bf18      	it	ne
 80035ea:	f8c7 9008 	strne.w	r9, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80035ee:	f41b 5f00 	tst.w	fp, #8192	; 0x2000
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80035f2:	bf1c      	itt	ne
 80035f4:	f44f 5300 	movne.w	r3, #8192	; 0x2000
 80035f8:	60bb      	strne	r3, [r7, #8]
        epnum++;
 80035fa:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 80035fc:	ea4f 0858 	mov.w	r8, r8, lsr #1
 8003600:	3720      	adds	r7, #32
 8003602:	e68b      	b.n	800331c <HAL_PCD_IRQHandler+0x5c>
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003604:	0698      	lsls	r0, r3, #26
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003606:	bf48      	it	mi
 8003608:	f8c1 9008 	strmi.w	r9, [r1, #8]
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800360c:	4611      	mov	r1, r2
 800360e:	4620      	mov	r0, r4
 8003610:	f00a fa02 	bl	800da18 <HAL_PCD_DataOutStageCallback>
 8003614:	e7cb      	b.n	80035ae <HAL_PCD_IRQHandler+0x2ee>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003616:	f01b 0f01 	tst.w	fp, #1
 800361a:	d07b      	beq.n	8003714 <HAL_PCD_IRQHandler+0x454>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800361c:	b2eb      	uxtb	r3, r5
 800361e:	4619      	mov	r1, r3
 8003620:	6820      	ldr	r0, [r4, #0]
 8003622:	9301      	str	r3, [sp, #4]
 8003624:	f003 f917 	bl	8006856 <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003628:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800362c:	4680      	mov	r8, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800362e:	d010      	beq.n	8003652 <HAL_PCD_IRQHandler+0x392>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003630:	f8d6 3834 	ldr.w	r3, [r6, #2100]	; 0x834
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003634:	9901      	ldr	r1, [sp, #4]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003636:	2001      	movs	r0, #1
 8003638:	f005 020f 	and.w	r2, r5, #15
 800363c:	fa00 f202 	lsl.w	r2, r0, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003640:	ea23 0302 	bic.w	r3, r3, r2
 8003644:	f8c6 3834 	str.w	r3, [r6, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003648:	f8ca 0008 	str.w	r0, [sl, #8]
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800364c:	4620      	mov	r0, r4
 800364e:	f00a f9ec 	bl	800da2a <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003652:	f018 0f08 	tst.w	r8, #8
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003656:	bf1c      	itt	ne
 8003658:	2308      	movne	r3, #8
 800365a:	f8ca 3008 	strne.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800365e:	f018 0f10 	tst.w	r8, #16
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003662:	bf1c      	itt	ne
 8003664:	2310      	movne	r3, #16
 8003666:	f8ca 3008 	strne.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800366a:	f018 0f40 	tst.w	r8, #64	; 0x40
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800366e:	bf1c      	itt	ne
 8003670:	2340      	movne	r3, #64	; 0x40
 8003672:	f8ca 3008 	strne.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003676:	f018 0f02 	tst.w	r8, #2
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800367a:	bf1c      	itt	ne
 800367c:	2302      	movne	r3, #2
 800367e:	f8ca 3008 	strne.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003682:	f018 0f80 	tst.w	r8, #128	; 0x80
 8003686:	d045      	beq.n	8003714 <HAL_PCD_IRQHandler+0x454>
  if (ep->xfer_count > ep->xfer_len)
 8003688:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800368a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800368c:	429a      	cmp	r2, r3
 800368e:	d841      	bhi.n	8003714 <HAL_PCD_IRQHandler+0x454>
  len = ep->xfer_len - ep->xfer_count;
 8003690:	eba3 0802 	sub.w	r8, r3, r2
  len32b = (len + 3U) / 4U;
 8003694:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003696:	6821      	ldr	r1, [r4, #0]
 8003698:	9102      	str	r1, [sp, #8]
  len32b = (len + 3U) / 4U;
 800369a:	4598      	cmp	r8, r3
 800369c:	bf28      	it	cs
 800369e:	4698      	movcs	r8, r3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036a0:	f501 6310 	add.w	r3, r1, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 80036a4:	f108 0803 	add.w	r8, r8, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036a8:	eb03 1345 	add.w	r3, r3, r5, lsl #5
  len32b = (len + 3U) / 4U;
 80036ac:	ea4f 0898 	mov.w	r8, r8, lsr #2
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036b0:	9303      	str	r3, [sp, #12]
 80036b2:	9b03      	ldr	r3, [sp, #12]
 80036b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	4543      	cmp	r3, r8
 80036bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036be:	d327      	bcc.n	8003710 <HAL_PCD_IRQHandler+0x450>
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d925      	bls.n	8003710 <HAL_PCD_IRQHandler+0x450>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80036c4:	b963      	cbnz	r3, 80036e0 <HAL_PCD_IRQHandler+0x420>
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80036c6:	9b02      	ldr	r3, [sp, #8]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80036c8:	f005 010f 	and.w	r1, r5, #15
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80036cc:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80036d0:	2001      	movs	r0, #1
 80036d2:	fa00 f101 	lsl.w	r1, r0, r1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80036d6:	ea22 0201 	bic.w	r2, r2, r1
 80036da:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
 80036de:	e019      	b.n	8003714 <HAL_PCD_IRQHandler+0x454>
    len = ep->xfer_len - ep->xfer_count;
 80036e0:	eba3 0902 	sub.w	r9, r3, r2
 80036e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 80036e6:	9a01      	ldr	r2, [sp, #4]
 80036e8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80036ea:	9802      	ldr	r0, [sp, #8]
 80036ec:	4599      	cmp	r9, r3
 80036ee:	bf28      	it	cs
 80036f0:	4699      	movcs	r9, r3
 80036f2:	fa1f f389 	uxth.w	r3, r9
 80036f6:	f002 ff3b 	bl	8006570 <USB_WritePacket>
    ep->xfer_buff  += len;
 80036fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036fc:	444b      	add	r3, r9
 80036fe:	64bb      	str	r3, [r7, #72]	; 0x48
    ep->xfer_count += len;
 8003700:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    len32b = (len + 3U) / 4U;
 8003702:	f109 0803 	add.w	r8, r9, #3
    ep->xfer_count += len;
 8003706:	444b      	add	r3, r9
    len32b = (len + 3U) / 4U;
 8003708:	ea4f 0898 	mov.w	r8, r8, lsr #2
    ep->xfer_count += len;
 800370c:	657b      	str	r3, [r7, #84]	; 0x54
 800370e:	e7d0      	b.n	80036b2 <HAL_PCD_IRQHandler+0x3f2>
  if (ep->xfer_len <= ep->xfer_count)
 8003710:	4293      	cmp	r3, r2
 8003712:	d9d8      	bls.n	80036c6 <HAL_PCD_IRQHandler+0x406>
        epnum++;
 8003714:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 8003716:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
 800371a:	371c      	adds	r7, #28
 800371c:	f10a 0a20 	add.w	sl, sl, #32
 8003720:	e60d      	b.n	800333e <HAL_PCD_IRQHandler+0x7e>
        HAL_PCD_ResumeCallback(hpcd);
 8003722:	4620      	mov	r0, r4
 8003724:	f00a f9b8 	bl	800da98 <HAL_PCD_ResumeCallback>
 8003728:	e623      	b.n	8003372 <HAL_PCD_IRQHandler+0xb2>
        HAL_PCD_SuspendCallback(hpcd);
 800372a:	4620      	mov	r0, r4
 800372c:	f00a f99c 	bl	800da68 <HAL_PCD_SuspendCallback>
 8003730:	e64f      	b.n	80033d2 <HAL_PCD_IRQHandler+0x112>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003732:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800373a:	601a      	str	r2, [r3, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800373c:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003740:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003744:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003748:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800374c:	9a00      	ldr	r2, [sp, #0]
 800374e:	3201      	adds	r2, #1
 8003750:	9200      	str	r2, [sp, #0]
 8003752:	3320      	adds	r3, #32
 8003754:	e651      	b.n	80033fa <HAL_PCD_IRQHandler+0x13a>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800375c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003760:	617b      	str	r3, [r7, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	f043 030b 	orr.w	r3, r3, #11
 8003768:	613b      	str	r3, [r7, #16]
 800376a:	e65c      	b.n	8003426 <HAL_PCD_IRQHandler+0x166>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800376c:	2b06      	cmp	r3, #6
 800376e:	f47f aeb2 	bne.w	80034d6 <HAL_PCD_IRQHandler+0x216>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003772:	2208      	movs	r2, #8
 8003774:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8003778:	4630      	mov	r0, r6
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800377a:	f04f 081c 	mov.w	r8, #28
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800377e:	f002 ffbf 	bl	8006700 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003782:	fb08 4809 	mla	r8, r8, r9, r4
 8003786:	f3c7 170a 	ubfx	r7, r7, #4, #11
 800378a:	e69f      	b.n	80034cc <HAL_PCD_IRQHandler+0x20c>
 800378c:	4f54310a 	.word	0x4f54310a

08003790 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8003790:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8003794:	2a01      	cmp	r2, #1
{
 8003796:	b510      	push	{r4, lr}
 8003798:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800379a:	d00b      	beq.n	80037b4 <HAL_PCD_SetAddress+0x24>
 800379c:	2201      	movs	r2, #1
 800379e:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80037a2:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80037a6:	6800      	ldr	r0, [r0, #0]
 80037a8:	f003 f810 	bl	80067cc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80037ac:	2000      	movs	r0, #0
 80037ae:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 80037b2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80037b4:	2002      	movs	r0, #2
}
 80037b6:	bd10      	pop	{r4, pc}

080037b8 <HAL_PCD_EP_Open>:
{
 80037b8:	b570      	push	{r4, r5, r6, lr}
 80037ba:	4604      	mov	r4, r0
 80037bc:	f001 000f 	and.w	r0, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 80037c0:	f011 0f80 	tst.w	r1, #128	; 0x80
 80037c4:	f04f 061c 	mov.w	r6, #28
 80037c8:	b2c5      	uxtb	r5, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037ca:	fb06 4105 	mla	r1, r6, r5, r4
    ep->is_in = 1U;
 80037ce:	bf15      	itete	ne
 80037d0:	fb06 4505 	mlane	r5, r6, r5, r4
    ep->is_in = 0U;
 80037d4:	fb06 4505 	mlaeq	r5, r6, r5, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037d8:	313c      	addne	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037da:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 1U;
 80037de:	bf15      	itete	ne
 80037e0:	2601      	movne	r6, #1
    ep->is_in = 0U;
 80037e2:	2600      	moveq	r6, #0
    ep->is_in = 1U;
 80037e4:	f885 603d 	strbne.w	r6, [r5, #61]	; 0x3d
    ep->is_in = 0U;
 80037e8:	f885 61fd 	strbeq.w	r6, [r5, #509]	; 0x1fd
  ep->maxpacket = ep_mps;
 80037ec:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 80037ee:	784a      	ldrb	r2, [r1, #1]
  ep->type = ep_type;
 80037f0:	70cb      	strb	r3, [r1, #3]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037f2:	b2c0      	uxtb	r0, r0
 80037f4:	7008      	strb	r0, [r1, #0]
  if (ep->is_in != 0U)
 80037f6:	b102      	cbz	r2, 80037fa <HAL_PCD_EP_Open+0x42>
    ep->tx_fifo_num = ep->num;
 80037f8:	80c8      	strh	r0, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 80037fa:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 80037fc:	bf04      	itt	eq
 80037fe:	2300      	moveq	r3, #0
 8003800:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8003802:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8003806:	2b01      	cmp	r3, #1
 8003808:	d009      	beq.n	800381e <HAL_PCD_EP_Open+0x66>
 800380a:	2301      	movs	r3, #1
 800380c:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003810:	6820      	ldr	r0, [r4, #0]
 8003812:	f002 fdc7 	bl	80063a4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003816:	2000      	movs	r0, #0
 8003818:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return ret;
 800381c:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 800381e:	2002      	movs	r0, #2
}
 8003820:	bd70      	pop	{r4, r5, r6, pc}

08003822 <HAL_PCD_EP_Close>:
{
 8003822:	f001 030f 	and.w	r3, r1, #15
 8003826:	b2da      	uxtb	r2, r3
 8003828:	b510      	push	{r4, lr}
 800382a:	4604      	mov	r4, r0
 800382c:	201c      	movs	r0, #28
  if ((ep_addr & 0x80U) == 0x80U)
 800382e:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003832:	fb00 4102 	mla	r1, r0, r2, r4
 8003836:	bf19      	ittee	ne
 8003838:	313c      	addne	r1, #60	; 0x3c
    ep->is_in = 1U;
 800383a:	fb00 4202 	mlane	r2, r0, r2, r4
    ep->is_in = 0U;
 800383e:	fb00 4202 	mlaeq	r2, r0, r2, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003842:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 1U;
 8003846:	bf15      	itete	ne
 8003848:	2001      	movne	r0, #1
    ep->is_in = 0U;
 800384a:	2000      	moveq	r0, #0
    ep->is_in = 1U;
 800384c:	f882 003d 	strbne.w	r0, [r2, #61]	; 0x3d
    ep->is_in = 0U;
 8003850:	f882 01fd 	strbeq.w	r0, [r2, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003854:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8003856:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800385a:	2b01      	cmp	r3, #1
 800385c:	d009      	beq.n	8003872 <HAL_PCD_EP_Close+0x50>
 800385e:	2301      	movs	r3, #1
 8003860:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003864:	6820      	ldr	r0, [r4, #0]
 8003866:	f002 fddf 	bl	8006428 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800386a:	2000      	movs	r0, #0
 800386c:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8003870:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8003872:	2002      	movs	r0, #2
}
 8003874:	bd10      	pop	{r4, pc}

08003876 <HAL_PCD_EP_Receive>:
{
 8003876:	b538      	push	{r3, r4, r5, lr}
 8003878:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800387c:	241c      	movs	r4, #28
 800387e:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 8003882:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003886:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_len = len;
 800388a:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->xfer_count = 0U;
 800388e:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 8003890:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_count = 0U;
 8003894:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
  ep->is_in = 0U;
 8003898:	f884 31fd 	strb.w	r3, [r4, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 800389c:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80038a0:	6800      	ldr	r0, [r0, #0]
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038a2:	b91d      	cbnz	r5, 80038ac <HAL_PCD_EP_Receive+0x36>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80038a4:	f002 fdf2 	bl	800648c <USB_EP0StartXfer>
}
 80038a8:	2000      	movs	r0, #0
 80038aa:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80038ac:	f002 fe70 	bl	8006590 <USB_EPStartXfer>
 80038b0:	e7fa      	b.n	80038a8 <HAL_PCD_EP_Receive+0x32>

080038b2 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80038b2:	231c      	movs	r3, #28
 80038b4:	f001 010f 	and.w	r1, r1, #15
 80038b8:	fb03 0101 	mla	r1, r3, r1, r0
}
 80038bc:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 80038c0:	4770      	bx	lr

080038c2 <HAL_PCD_EP_Transmit>:
{
 80038c2:	b538      	push	{r3, r4, r5, lr}
 80038c4:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038c8:	241c      	movs	r4, #28
 80038ca:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 80038ce:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038d2:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_len = len;
 80038d4:	6523      	str	r3, [r4, #80]	; 0x50
  ep->xfer_count = 0U;
 80038d6:	2300      	movs	r3, #0
 80038d8:	6563      	str	r3, [r4, #84]	; 0x54
  ep->is_in = 1U;
 80038da:	2301      	movs	r3, #1
  ep->xfer_buff = pBuf;
 80038dc:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->is_in = 1U;
 80038de:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 80038e2:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80038e6:	6800      	ldr	r0, [r0, #0]
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038e8:	b91d      	cbnz	r5, 80038f2 <HAL_PCD_EP_Transmit+0x30>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80038ea:	f002 fdcf 	bl	800648c <USB_EP0StartXfer>
}
 80038ee:	2000      	movs	r0, #0
 80038f0:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80038f2:	f002 fe4d 	bl	8006590 <USB_EPStartXfer>
 80038f6:	e7fa      	b.n	80038ee <HAL_PCD_EP_Transmit+0x2c>

080038f8 <HAL_PCD_EP_SetStall>:
{
 80038f8:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80038fa:	6843      	ldr	r3, [r0, #4]
 80038fc:	f001 050f 	and.w	r5, r1, #15
 8003900:	429d      	cmp	r5, r3
{
 8003902:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003904:	d82d      	bhi.n	8003962 <HAL_PCD_EP_SetStall+0x6a>
  if ((0x80U & ep_addr) == 0x80U)
 8003906:	f011 0f80 	tst.w	r1, #128	; 0x80
 800390a:	f04f 021c 	mov.w	r2, #28
 800390e:	d01e      	beq.n	800394e <HAL_PCD_EP_SetStall+0x56>
    ep->is_in = 1U;
 8003910:	fb02 0105 	mla	r1, r2, r5, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003914:	fb02 0305 	mla	r3, r2, r5, r0
    ep->is_in = 1U;
 8003918:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800391a:	333c      	adds	r3, #60	; 0x3c
    ep->is_in = 1U;
 800391c:	f881 203d 	strb.w	r2, [r1, #61]	; 0x3d
  ep->is_stall = 1U;
 8003920:	2201      	movs	r2, #1
 8003922:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003924:	701d      	strb	r5, [r3, #0]
  __HAL_LOCK(hpcd);
 8003926:	f894 13bc 	ldrb.w	r1, [r4, #956]	; 0x3bc
 800392a:	4291      	cmp	r1, r2
 800392c:	d01b      	beq.n	8003966 <HAL_PCD_EP_SetStall+0x6e>
 800392e:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003932:	4619      	mov	r1, r3
 8003934:	6820      	ldr	r0, [r4, #0]
 8003936:	f002 fef1 	bl	800671c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800393a:	b925      	cbnz	r5, 8003946 <HAL_PCD_EP_SetStall+0x4e>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800393c:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8003940:	6820      	ldr	r0, [r4, #0]
 8003942:	f002 ffb9 	bl	80068b8 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8003946:	2000      	movs	r0, #0
 8003948:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 800394c:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 800394e:	fb02 0301 	mla	r3, r2, r1, r0
    ep->is_in = 0U;
 8003952:	fb02 0101 	mla	r1, r2, r1, r0
 8003956:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8003958:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
    ep->is_in = 0U;
 800395c:	f881 21fd 	strb.w	r2, [r1, #509]	; 0x1fd
 8003960:	e7de      	b.n	8003920 <HAL_PCD_EP_SetStall+0x28>
    return HAL_ERROR;
 8003962:	2001      	movs	r0, #1
 8003964:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8003966:	2002      	movs	r0, #2
}
 8003968:	bd38      	pop	{r3, r4, r5, pc}

0800396a <HAL_PCD_EP_ClrStall>:
{
 800396a:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800396c:	6843      	ldr	r3, [r0, #4]
 800396e:	f001 020f 	and.w	r2, r1, #15
 8003972:	429a      	cmp	r2, r3
{
 8003974:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003976:	d826      	bhi.n	80039c6 <HAL_PCD_EP_ClrStall+0x5c>
 8003978:	231c      	movs	r3, #28
  if ((0x80U & ep_addr) == 0x80U)
 800397a:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800397e:	fb03 0102 	mla	r1, r3, r2, r0
 8003982:	bf19      	ittee	ne
 8003984:	313c      	addne	r1, #60	; 0x3c
    ep->is_in = 1U;
 8003986:	fb03 0302 	mlane	r3, r3, r2, r0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800398a:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 800398e:	fb03 4302 	mlaeq	r3, r3, r2, r4
    ep->is_in = 1U;
 8003992:	bf14      	ite	ne
 8003994:	2001      	movne	r0, #1
    ep->is_in = 0U;
 8003996:	2000      	moveq	r0, #0
  ep->is_stall = 0U;
 8003998:	f04f 0500 	mov.w	r5, #0
    ep->is_in = 1U;
 800399c:	bf14      	ite	ne
 800399e:	f883 003d 	strbne.w	r0, [r3, #61]	; 0x3d
    ep->is_in = 0U;
 80039a2:	f883 01fd 	strbeq.w	r0, [r3, #509]	; 0x1fd
  ep->is_stall = 0U;
 80039a6:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039a8:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80039aa:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d00b      	beq.n	80039ca <HAL_PCD_EP_ClrStall+0x60>
 80039b2:	2301      	movs	r3, #1
 80039b4:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80039b8:	6820      	ldr	r0, [r4, #0]
 80039ba:	f002 fedc 	bl	8006776 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80039be:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
  return HAL_OK;
 80039c2:	4628      	mov	r0, r5
 80039c4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80039c6:	2001      	movs	r0, #1
 80039c8:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80039ca:	2002      	movs	r0, #2
}
 80039cc:	bd38      	pop	{r3, r4, r5, pc}

080039ce <HAL_PCD_EP_Flush>:
  __HAL_LOCK(hpcd);
 80039ce:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 80039d2:	2b01      	cmp	r3, #1
{
 80039d4:	b510      	push	{r4, lr}
 80039d6:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80039d8:	d011      	beq.n	80039fe <HAL_PCD_EP_Flush+0x30>
 80039da:	2301      	movs	r3, #1
 80039dc:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  if ((ep_addr & 0x80U) == 0x80U)
 80039e0:	060b      	lsls	r3, r1, #24
 80039e2:	d508      	bpl.n	80039f6 <HAL_PCD_EP_Flush+0x28>
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80039e4:	f001 010f 	and.w	r1, r1, #15
 80039e8:	6800      	ldr	r0, [r0, #0]
 80039ea:	f002 fbff 	bl	80061ec <USB_FlushTxFifo>
  __HAL_UNLOCK(hpcd);
 80039ee:	2000      	movs	r0, #0
 80039f0:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 80039f4:	bd10      	pop	{r4, pc}
    (void)USB_FlushRxFifo(hpcd->Instance);
 80039f6:	6800      	ldr	r0, [r0, #0]
 80039f8:	f002 fc0a 	bl	8006210 <USB_FlushRxFifo>
 80039fc:	e7f7      	b.n	80039ee <HAL_PCD_EP_Flush+0x20>
  __HAL_LOCK(hpcd);
 80039fe:	2002      	movs	r0, #2
}
 8003a00:	bd10      	pop	{r4, pc}

08003a02 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003a02:	b570      	push	{r4, r5, r6, lr}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003a04:	6804      	ldr	r4, [r0, #0]
 8003a06:	6a63      	ldr	r3, [r4, #36]	; 0x24

  if (fifo == 0U)
 8003a08:	b921      	cbnz	r1, 8003a14 <HAL_PCDEx_SetTxFiFo+0x12>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003a0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003a0e:	62a3      	str	r3, [r4, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8003a10:	2000      	movs	r0, #0
 8003a12:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003a14:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 8003a16:	1e4d      	subs	r5, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003a18:	eb03 4310 	add.w	r3, r3, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8003a1c:	2000      	movs	r0, #0
 8003a1e:	1c46      	adds	r6, r0, #1
 8003a20:	b2c0      	uxtb	r0, r0
 8003a22:	4285      	cmp	r5, r0
 8003a24:	d806      	bhi.n	8003a34 <HAL_PCDEx_SetTxFiFo+0x32>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003a26:	313f      	adds	r1, #63	; 0x3f
 8003a28:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8003a2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003a30:	6063      	str	r3, [r4, #4]
 8003a32:	e7ed      	b.n	8003a10 <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003a34:	3040      	adds	r0, #64	; 0x40
 8003a36:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8003a3a:	6840      	ldr	r0, [r0, #4]
 8003a3c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003a40:	4630      	mov	r0, r6
 8003a42:	e7ec      	b.n	8003a1e <HAL_PCDEx_SetTxFiFo+0x1c>

08003a44 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8003a44:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 8003a46:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8003a48:	6259      	str	r1, [r3, #36]	; 0x24
}
 8003a4a:	4770      	bx	lr

08003a4c <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a4c:	6802      	ldr	r2, [r0, #0]
{
 8003a4e:	4603      	mov	r3, r0

  hpcd->lpm_active = 1U;
 8003a50:	2101      	movs	r1, #1
 8003a52:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003a56:	2000      	movs	r0, #0
 8003a58:	f883 03f4 	strb.w	r0, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003a5c:	6993      	ldr	r3, [r2, #24]
 8003a5e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003a62:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003a64:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003a66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a6a:	f043 0303 	orr.w	r3, r3, #3
 8003a6e:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8003a70:	4770      	bx	lr
	...

08003a74 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a74:	4a02      	ldr	r2, [pc, #8]	; (8003a80 <HAL_PWR_EnableBkUpAccess+0xc>)
 8003a76:	6813      	ldr	r3, [r2, #0]
 8003a78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a7c:	6013      	str	r3, [r2, #0]
 8003a7e:	4770      	bx	lr
 8003a80:	40007000 	.word	0x40007000

08003a84 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003a84:	4b02      	ldr	r3, [pc, #8]	; (8003a90 <HAL_PWREx_GetVoltageRange+0xc>)
 8003a86:	6818      	ldr	r0, [r3, #0]
#endif
}
 8003a88:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	40007000 	.word	0x40007000

08003a94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a94:	4b17      	ldr	r3, [pc, #92]	; (8003af4 <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a96:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a98:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a9c:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003aa0:	d11c      	bne.n	8003adc <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003aa2:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8003aa6:	d015      	beq.n	8003ad4 <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8003aae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ab2:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ab4:	4a10      	ldr	r2, [pc, #64]	; (8003af8 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8003ab6:	6811      	ldr	r1, [r2, #0]
 8003ab8:	2232      	movs	r2, #50	; 0x32
 8003aba:	434a      	muls	r2, r1
 8003abc:	490f      	ldr	r1, [pc, #60]	; (8003afc <HAL_PWREx_ControlVoltageScaling+0x68>)
 8003abe:	fbb2 f2f1 	udiv	r2, r2, r1
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ac6:	6958      	ldr	r0, [r3, #20]
 8003ac8:	0540      	lsls	r0, r0, #21
 8003aca:	d500      	bpl.n	8003ace <HAL_PWREx_ControlVoltageScaling+0x3a>
 8003acc:	b922      	cbnz	r2, 8003ad8 <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ace:	694b      	ldr	r3, [r1, #20]
 8003ad0:	055b      	lsls	r3, r3, #21
 8003ad2:	d40d      	bmi.n	8003af0 <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003ad4:	2000      	movs	r0, #0
 8003ad6:	4770      	bx	lr
        wait_loop_index--;
 8003ad8:	3a01      	subs	r2, #1
 8003ada:	e7f4      	b.n	8003ac6 <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003adc:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003ae0:	bf1f      	itttt	ne
 8003ae2:	681a      	ldrne	r2, [r3, #0]
 8003ae4:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8003ae8:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8003aec:	601a      	strne	r2, [r3, #0]
 8003aee:	e7f1      	b.n	8003ad4 <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 8003af0:	2003      	movs	r0, #3
}
 8003af2:	4770      	bx	lr
 8003af4:	40007000 	.word	0x40007000
 8003af8:	20000018 	.word	0x20000018
 8003afc:	000f4240 	.word	0x000f4240

08003b00 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003b00:	4a02      	ldr	r2, [pc, #8]	; (8003b0c <HAL_PWREx_EnableVddUSB+0xc>)
 8003b02:	6853      	ldr	r3, [r2, #4]
 8003b04:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b08:	6053      	str	r3, [r2, #4]
 8003b0a:	4770      	bx	lr
 8003b0c:	40007000 	.word	0x40007000

08003b10 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b14:	9d06      	ldr	r5, [sp, #24]
 8003b16:	4604      	mov	r4, r0
 8003b18:	460f      	mov	r7, r1
 8003b1a:	4616      	mov	r6, r2
 8003b1c:	4698      	mov	r8, r3
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003b1e:	6821      	ldr	r1, [r4, #0]
 8003b20:	688a      	ldr	r2, [r1, #8]
 8003b22:	423a      	tst	r2, r7
 8003b24:	bf14      	ite	ne
 8003b26:	2201      	movne	r2, #1
 8003b28:	2200      	moveq	r2, #0
 8003b2a:	42b2      	cmp	r2, r6
 8003b2c:	d102      	bne.n	8003b34 <QSPI_WaitFlagStateUntilTimeout+0x24>

        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8003b2e:	2000      	movs	r0, #0
}
 8003b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8003b34:	1c6b      	adds	r3, r5, #1
 8003b36:	d0f3      	beq.n	8003b20 <QSPI_WaitFlagStateUntilTimeout+0x10>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b38:	f7fe fd02 	bl	8002540 <HAL_GetTick>
 8003b3c:	eba0 0008 	sub.w	r0, r0, r8
 8003b40:	4285      	cmp	r5, r0
 8003b42:	d301      	bcc.n	8003b48 <QSPI_WaitFlagStateUntilTimeout+0x38>
 8003b44:	2d00      	cmp	r5, #0
 8003b46:	d1ea      	bne.n	8003b1e <QSPI_WaitFlagStateUntilTimeout+0xe>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003b48:	2304      	movs	r3, #4
 8003b4a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003b4e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003b50:	f043 0301 	orr.w	r3, r3, #1
 8003b54:	63e3      	str	r3, [r4, #60]	; 0x3c
 8003b56:	2001      	movs	r0, #1
 8003b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003b5c <HAL_QSPI_Init>:
{
 8003b5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b5e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003b60:	f7fe fcee 	bl	8002540 <HAL_GetTick>
 8003b64:	4605      	mov	r5, r0
  if(hqspi == NULL)
 8003b66:	2c00      	cmp	r4, #0
 8003b68:	d049      	beq.n	8003bfe <HAL_QSPI_Init+0xa2>
  __HAL_LOCK(hqspi);
 8003b6a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d047      	beq.n	8003c02 <HAL_QSPI_Init+0xa6>
 8003b72:	2301      	movs	r3, #1
 8003b74:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003b78:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8003b7c:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 8003b80:	b93a      	cbnz	r2, 8003b92 <HAL_QSPI_Init+0x36>
    hqspi->Lock = HAL_UNLOCKED;
 8003b82:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    HAL_QSPI_MspInit(hqspi);
 8003b86:	4620      	mov	r0, r4
 8003b88:	f7fe f992 	bl	8001eb0 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8003b8c:	f241 3388 	movw	r3, #5000	; 0x1388
 8003b90:	6423      	str	r3, [r4, #64]	; 0x40
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003b92:	6820      	ldr	r0, [r4, #0]
 8003b94:	68a1      	ldr	r1, [r4, #8]
 8003b96:	6802      	ldr	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003b98:	6c23      	ldr	r3, [r4, #64]	; 0x40
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003b9a:	3901      	subs	r1, #1
 8003b9c:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8003ba0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003ba4:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003ba6:	2120      	movs	r1, #32
 8003ba8:	9300      	str	r3, [sp, #0]
 8003baa:	2200      	movs	r2, #0
 8003bac:	462b      	mov	r3, r5
 8003bae:	4620      	mov	r0, r4
 8003bb0:	f7ff ffae 	bl	8003b10 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8003bb4:	b9f0      	cbnz	r0, 8003bf4 <HAL_QSPI_Init+0x98>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8003bb6:	6822      	ldr	r2, [r4, #0]
 8003bb8:	6865      	ldr	r5, [r4, #4]
 8003bba:	6811      	ldr	r1, [r2, #0]
 8003bbc:	68e3      	ldr	r3, [r4, #12]
 8003bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8003bc2:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8003bc6:	f021 0110 	bic.w	r1, r1, #16
 8003bca:	430b      	orrs	r3, r1
 8003bcc:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003bce:	69a1      	ldr	r1, [r4, #24]
 8003bd0:	6963      	ldr	r3, [r4, #20]
 8003bd2:	6855      	ldr	r5, [r2, #4]
 8003bd4:	430b      	orrs	r3, r1
 8003bd6:	6921      	ldr	r1, [r4, #16]
 8003bd8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8003bdc:	490a      	ldr	r1, [pc, #40]	; (8003c08 <HAL_QSPI_Init+0xac>)
 8003bde:	4029      	ands	r1, r5
 8003be0:	430b      	orrs	r3, r1
 8003be2:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8003be4:	6813      	ldr	r3, [r2, #0]
 8003be6:	f043 0301 	orr.w	r3, r3, #1
 8003bea:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 8003bec:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003bee:	63e0      	str	r0, [r4, #60]	; 0x3c
    hqspi->State = HAL_QSPI_STATE_READY;
 8003bf0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(hqspi);
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 8003bfa:	b003      	add	sp, #12
 8003bfc:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8003bfe:	2001      	movs	r0, #1
 8003c00:	e7fb      	b.n	8003bfa <HAL_QSPI_Init+0x9e>
  __HAL_LOCK(hqspi);
 8003c02:	2002      	movs	r0, #2
 8003c04:	e7f9      	b.n	8003bfa <HAL_QSPI_Init+0x9e>
 8003c06:	bf00      	nop
 8003c08:	ffe0f8fe 	.word	0xffe0f8fe

08003c0c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003c0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c0e:	4d1e      	ldr	r5, [pc, #120]	; (8003c88 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8003c10:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003c12:	00da      	lsls	r2, r3, #3
{
 8003c14:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c16:	d518      	bpl.n	8003c4a <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003c18:	f7ff ff34 	bl	8003a84 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c1c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003c20:	d123      	bne.n	8003c6a <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003c22:	2c80      	cmp	r4, #128	; 0x80
 8003c24:	d929      	bls.n	8003c7a <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003c26:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c28:	bf8c      	ite	hi
 8003c2a:	2002      	movhi	r0, #2
 8003c2c:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c2e:	4a17      	ldr	r2, [pc, #92]	; (8003c8c <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8003c30:	6813      	ldr	r3, [r2, #0]
 8003c32:	f023 0307 	bic.w	r3, r3, #7
 8003c36:	4303      	orrs	r3, r0
 8003c38:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c3a:	6813      	ldr	r3, [r2, #0]
 8003c3c:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8003c40:	1a18      	subs	r0, r3, r0
 8003c42:	bf18      	it	ne
 8003c44:	2001      	movne	r0, #1
 8003c46:	b003      	add	sp, #12
 8003c48:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c4a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c50:	65ab      	str	r3, [r5, #88]	; 0x58
 8003c52:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c58:	9301      	str	r3, [sp, #4]
 8003c5a:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8003c5c:	f7ff ff12 	bl	8003a84 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8003c60:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003c62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c66:	65ab      	str	r3, [r5, #88]	; 0x58
 8003c68:	e7d8      	b.n	8003c1c <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8003c6a:	2c80      	cmp	r4, #128	; 0x80
 8003c6c:	d807      	bhi.n	8003c7e <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8003c6e:	d008      	beq.n	8003c82 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8003c70:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8003c74:	4258      	negs	r0, r3
 8003c76:	4158      	adcs	r0, r3
 8003c78:	e7d9      	b.n	8003c2e <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003c7a:	2000      	movs	r0, #0
 8003c7c:	e7d7      	b.n	8003c2e <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8003c7e:	2003      	movs	r0, #3
 8003c80:	e7d5      	b.n	8003c2e <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c82:	2002      	movs	r0, #2
 8003c84:	e7d3      	b.n	8003c2e <RCC_SetFlashLatencyFromMSIRange+0x22>
 8003c86:	bf00      	nop
 8003c88:	40021000 	.word	0x40021000
 8003c8c:	40022000 	.word	0x40022000

08003c90 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c90:	4b22      	ldr	r3, [pc, #136]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x8c>)
 8003c92:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c94:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c96:	f012 020c 	ands.w	r2, r2, #12
 8003c9a:	d005      	beq.n	8003ca8 <HAL_RCC_GetSysClockFreq+0x18>
 8003c9c:	2a0c      	cmp	r2, #12
 8003c9e:	d115      	bne.n	8003ccc <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ca0:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003ca4:	2901      	cmp	r1, #1
 8003ca6:	d118      	bne.n	8003cda <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ca8:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8003caa:	481d      	ldr	r0, [pc, #116]	; (8003d20 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003cac:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003cae:	bf55      	itete	pl
 8003cb0:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003cb4:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003cb6:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003cba:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8003cbe:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003cc2:	b34a      	cbz	r2, 8003d18 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003cc4:	2a0c      	cmp	r2, #12
 8003cc6:	d009      	beq.n	8003cdc <HAL_RCC_GetSysClockFreq+0x4c>
 8003cc8:	2000      	movs	r0, #0
  return sysclockfreq;
 8003cca:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003ccc:	2a04      	cmp	r2, #4
 8003cce:	d022      	beq.n	8003d16 <HAL_RCC_GetSysClockFreq+0x86>
 8003cd0:	2a08      	cmp	r2, #8
 8003cd2:	4814      	ldr	r0, [pc, #80]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x94>)
 8003cd4:	bf18      	it	ne
 8003cd6:	2000      	movne	r0, #0
 8003cd8:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003cda:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003cdc:	68da      	ldr	r2, [r3, #12]
 8003cde:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8003ce2:	2a02      	cmp	r2, #2
 8003ce4:	d015      	beq.n	8003d12 <HAL_RCC_GetSysClockFreq+0x82>
      pllvco = HSE_VALUE;
 8003ce6:	490f      	ldr	r1, [pc, #60]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x94>)
 8003ce8:	2a03      	cmp	r2, #3
 8003cea:	bf08      	it	eq
 8003cec:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cee:	68da      	ldr	r2, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003cf0:	68d9      	ldr	r1, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003cf8:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cfc:	f3c2 1202 	ubfx	r2, r2, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d00:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003d02:	4348      	muls	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d04:	3201      	adds	r2, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d06:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003d08:	fbb0 f0f2 	udiv	r0, r0, r2
    sysclockfreq = pllvco / pllr;
 8003d0c:	fbb0 f0f3 	udiv	r0, r0, r3
 8003d10:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8003d12:	4805      	ldr	r0, [pc, #20]	; (8003d28 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d14:	e7eb      	b.n	8003cee <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8003d16:	4804      	ldr	r0, [pc, #16]	; (8003d28 <HAL_RCC_GetSysClockFreq+0x98>)
}
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	40021000 	.word	0x40021000
 8003d20:	0801cd2c 	.word	0x0801cd2c
 8003d24:	007a1200 	.word	0x007a1200
 8003d28:	00f42400 	.word	0x00f42400

08003d2c <HAL_RCC_OscConfig>:
{
 8003d2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8003d30:	4605      	mov	r5, r0
 8003d32:	b908      	cbnz	r0, 8003d38 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8003d34:	2001      	movs	r0, #1
 8003d36:	e047      	b.n	8003dc8 <HAL_RCC_OscConfig+0x9c>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d38:	4ca6      	ldr	r4, [pc, #664]	; (8003fd4 <HAL_RCC_OscConfig+0x2a8>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d3a:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d3c:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d3e:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d40:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d42:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d46:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d4a:	d573      	bpl.n	8003e34 <HAL_RCC_OscConfig+0x108>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d4c:	b11e      	cbz	r6, 8003d56 <HAL_RCC_OscConfig+0x2a>
 8003d4e:	2e0c      	cmp	r6, #12
 8003d50:	d152      	bne.n	8003df8 <HAL_RCC_OscConfig+0xcc>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003d52:	2f01      	cmp	r7, #1
 8003d54:	d150      	bne.n	8003df8 <HAL_RCC_OscConfig+0xcc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d56:	6823      	ldr	r3, [r4, #0]
 8003d58:	0798      	lsls	r0, r3, #30
 8003d5a:	d502      	bpl.n	8003d62 <HAL_RCC_OscConfig+0x36>
 8003d5c:	69ab      	ldr	r3, [r5, #24]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d0e8      	beq.n	8003d34 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003d62:	6823      	ldr	r3, [r4, #0]
 8003d64:	6a28      	ldr	r0, [r5, #32]
 8003d66:	0719      	lsls	r1, r3, #28
 8003d68:	bf56      	itet	pl
 8003d6a:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8003d6e:	6823      	ldrmi	r3, [r4, #0]
 8003d70:	091b      	lsrpl	r3, r3, #4
 8003d72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d76:	4283      	cmp	r3, r0
 8003d78:	d229      	bcs.n	8003dce <HAL_RCC_OscConfig+0xa2>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d7a:	f7ff ff47 	bl	8003c0c <RCC_SetFlashLatencyFromMSIRange>
 8003d7e:	2800      	cmp	r0, #0
 8003d80:	d1d8      	bne.n	8003d34 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d82:	6823      	ldr	r3, [r4, #0]
 8003d84:	f043 0308 	orr.w	r3, r3, #8
 8003d88:	6023      	str	r3, [r4, #0]
 8003d8a:	6823      	ldr	r3, [r4, #0]
 8003d8c:	6a2a      	ldr	r2, [r5, #32]
 8003d8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d92:	4313      	orrs	r3, r2
 8003d94:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d96:	6863      	ldr	r3, [r4, #4]
 8003d98:	69ea      	ldr	r2, [r5, #28]
 8003d9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d9e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003da2:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003da4:	f7ff ff74 	bl	8003c90 <HAL_RCC_GetSysClockFreq>
 8003da8:	68a3      	ldr	r3, [r4, #8]
 8003daa:	4a8b      	ldr	r2, [pc, #556]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003dac:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003db0:	5cd3      	ldrb	r3, [r2, r3]
 8003db2:	f003 031f 	and.w	r3, r3, #31
 8003db6:	40d8      	lsrs	r0, r3
 8003db8:	4b88      	ldr	r3, [pc, #544]	; (8003fdc <HAL_RCC_OscConfig+0x2b0>)
 8003dba:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8003dbc:	4b88      	ldr	r3, [pc, #544]	; (8003fe0 <HAL_RCC_OscConfig+0x2b4>)
 8003dbe:	6818      	ldr	r0, [r3, #0]
 8003dc0:	f7fe f970 	bl	80020a4 <HAL_InitTick>
        if(status != HAL_OK)
 8003dc4:	2800      	cmp	r0, #0
 8003dc6:	d035      	beq.n	8003e34 <HAL_RCC_OscConfig+0x108>
}
 8003dc8:	b003      	add	sp, #12
 8003dca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003dce:	6823      	ldr	r3, [r4, #0]
 8003dd0:	f043 0308 	orr.w	r3, r3, #8
 8003dd4:	6023      	str	r3, [r4, #0]
 8003dd6:	6823      	ldr	r3, [r4, #0]
 8003dd8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ddc:	4303      	orrs	r3, r0
 8003dde:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003de0:	6863      	ldr	r3, [r4, #4]
 8003de2:	69ea      	ldr	r2, [r5, #28]
 8003de4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003de8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003dec:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003dee:	f7ff ff0d 	bl	8003c0c <RCC_SetFlashLatencyFromMSIRange>
 8003df2:	2800      	cmp	r0, #0
 8003df4:	d0d6      	beq.n	8003da4 <HAL_RCC_OscConfig+0x78>
 8003df6:	e79d      	b.n	8003d34 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003df8:	69ab      	ldr	r3, [r5, #24]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d036      	beq.n	8003e6c <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_MSI_ENABLE();
 8003dfe:	6823      	ldr	r3, [r4, #0]
 8003e00:	f043 0301 	orr.w	r3, r3, #1
 8003e04:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003e06:	f7fe fb9b 	bl	8002540 <HAL_GetTick>
 8003e0a:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e0c:	6823      	ldr	r3, [r4, #0]
 8003e0e:	079a      	lsls	r2, r3, #30
 8003e10:	d524      	bpl.n	8003e5c <HAL_RCC_OscConfig+0x130>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e12:	6823      	ldr	r3, [r4, #0]
 8003e14:	f043 0308 	orr.w	r3, r3, #8
 8003e18:	6023      	str	r3, [r4, #0]
 8003e1a:	6823      	ldr	r3, [r4, #0]
 8003e1c:	6a2a      	ldr	r2, [r5, #32]
 8003e1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e22:	4313      	orrs	r3, r2
 8003e24:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e26:	6863      	ldr	r3, [r4, #4]
 8003e28:	69ea      	ldr	r2, [r5, #28]
 8003e2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e2e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003e32:	6063      	str	r3, [r4, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e34:	682b      	ldr	r3, [r5, #0]
 8003e36:	07d8      	lsls	r0, r3, #31
 8003e38:	d429      	bmi.n	8003e8e <HAL_RCC_OscConfig+0x162>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e3a:	682b      	ldr	r3, [r5, #0]
 8003e3c:	0799      	lsls	r1, r3, #30
 8003e3e:	d467      	bmi.n	8003f10 <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e40:	682b      	ldr	r3, [r5, #0]
 8003e42:	0718      	lsls	r0, r3, #28
 8003e44:	f100 809c 	bmi.w	8003f80 <HAL_RCC_OscConfig+0x254>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e48:	682b      	ldr	r3, [r5, #0]
 8003e4a:	0759      	lsls	r1, r3, #29
 8003e4c:	f100 80ca 	bmi.w	8003fe4 <HAL_RCC_OscConfig+0x2b8>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e50:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8003e52:	2800      	cmp	r0, #0
 8003e54:	f040 8133 	bne.w	80040be <HAL_RCC_OscConfig+0x392>
  return HAL_OK;
 8003e58:	2000      	movs	r0, #0
 8003e5a:	e7b5      	b.n	8003dc8 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e5c:	f7fe fb70 	bl	8002540 <HAL_GetTick>
 8003e60:	eba0 0008 	sub.w	r0, r0, r8
 8003e64:	2802      	cmp	r0, #2
 8003e66:	d9d1      	bls.n	8003e0c <HAL_RCC_OscConfig+0xe0>
            return HAL_TIMEOUT;
 8003e68:	2003      	movs	r0, #3
 8003e6a:	e7ad      	b.n	8003dc8 <HAL_RCC_OscConfig+0x9c>
        __HAL_RCC_MSI_DISABLE();
 8003e6c:	6823      	ldr	r3, [r4, #0]
 8003e6e:	f023 0301 	bic.w	r3, r3, #1
 8003e72:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003e74:	f7fe fb64 	bl	8002540 <HAL_GetTick>
 8003e78:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e7a:	6823      	ldr	r3, [r4, #0]
 8003e7c:	079b      	lsls	r3, r3, #30
 8003e7e:	d5d9      	bpl.n	8003e34 <HAL_RCC_OscConfig+0x108>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e80:	f7fe fb5e 	bl	8002540 <HAL_GetTick>
 8003e84:	eba0 0008 	sub.w	r0, r0, r8
 8003e88:	2802      	cmp	r0, #2
 8003e8a:	d9f6      	bls.n	8003e7a <HAL_RCC_OscConfig+0x14e>
 8003e8c:	e7ec      	b.n	8003e68 <HAL_RCC_OscConfig+0x13c>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003e8e:	2e08      	cmp	r6, #8
 8003e90:	d003      	beq.n	8003e9a <HAL_RCC_OscConfig+0x16e>
 8003e92:	2e0c      	cmp	r6, #12
 8003e94:	d108      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x17c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003e96:	2f03      	cmp	r7, #3
 8003e98:	d106      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x17c>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e9a:	6823      	ldr	r3, [r4, #0]
 8003e9c:	039a      	lsls	r2, r3, #14
 8003e9e:	d5cc      	bpl.n	8003e3a <HAL_RCC_OscConfig+0x10e>
 8003ea0:	686b      	ldr	r3, [r5, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1c9      	bne.n	8003e3a <HAL_RCC_OscConfig+0x10e>
 8003ea6:	e745      	b.n	8003d34 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ea8:	686b      	ldr	r3, [r5, #4]
 8003eaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eae:	d110      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x1a6>
 8003eb0:	6823      	ldr	r3, [r4, #0]
 8003eb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eb6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003eb8:	f7fe fb42 	bl	8002540 <HAL_GetTick>
 8003ebc:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ebe:	6823      	ldr	r3, [r4, #0]
 8003ec0:	039b      	lsls	r3, r3, #14
 8003ec2:	d4ba      	bmi.n	8003e3a <HAL_RCC_OscConfig+0x10e>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ec4:	f7fe fb3c 	bl	8002540 <HAL_GetTick>
 8003ec8:	eba0 0008 	sub.w	r0, r0, r8
 8003ecc:	2864      	cmp	r0, #100	; 0x64
 8003ece:	d9f6      	bls.n	8003ebe <HAL_RCC_OscConfig+0x192>
 8003ed0:	e7ca      	b.n	8003e68 <HAL_RCC_OscConfig+0x13c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ed2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ed6:	d104      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x1b6>
 8003ed8:	6823      	ldr	r3, [r4, #0]
 8003eda:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ede:	6023      	str	r3, [r4, #0]
 8003ee0:	e7e6      	b.n	8003eb0 <HAL_RCC_OscConfig+0x184>
 8003ee2:	6822      	ldr	r2, [r4, #0]
 8003ee4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003ee8:	6022      	str	r2, [r4, #0]
 8003eea:	6822      	ldr	r2, [r4, #0]
 8003eec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ef0:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1e0      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x18c>
        tickstart = HAL_GetTick();
 8003ef6:	f7fe fb23 	bl	8002540 <HAL_GetTick>
 8003efa:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003efc:	6823      	ldr	r3, [r4, #0]
 8003efe:	0398      	lsls	r0, r3, #14
 8003f00:	d59b      	bpl.n	8003e3a <HAL_RCC_OscConfig+0x10e>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f02:	f7fe fb1d 	bl	8002540 <HAL_GetTick>
 8003f06:	eba0 0008 	sub.w	r0, r0, r8
 8003f0a:	2864      	cmp	r0, #100	; 0x64
 8003f0c:	d9f6      	bls.n	8003efc <HAL_RCC_OscConfig+0x1d0>
 8003f0e:	e7ab      	b.n	8003e68 <HAL_RCC_OscConfig+0x13c>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003f10:	2e04      	cmp	r6, #4
 8003f12:	d003      	beq.n	8003f1c <HAL_RCC_OscConfig+0x1f0>
 8003f14:	2e0c      	cmp	r6, #12
 8003f16:	d110      	bne.n	8003f3a <HAL_RCC_OscConfig+0x20e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003f18:	2f02      	cmp	r7, #2
 8003f1a:	d10e      	bne.n	8003f3a <HAL_RCC_OscConfig+0x20e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f1c:	6823      	ldr	r3, [r4, #0]
 8003f1e:	0559      	lsls	r1, r3, #21
 8003f20:	d503      	bpl.n	8003f2a <HAL_RCC_OscConfig+0x1fe>
 8003f22:	68eb      	ldr	r3, [r5, #12]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f43f af05 	beq.w	8003d34 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f2a:	6863      	ldr	r3, [r4, #4]
 8003f2c:	692a      	ldr	r2, [r5, #16]
 8003f2e:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8003f32:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003f36:	6063      	str	r3, [r4, #4]
 8003f38:	e782      	b.n	8003e40 <HAL_RCC_OscConfig+0x114>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f3a:	68eb      	ldr	r3, [r5, #12]
 8003f3c:	b17b      	cbz	r3, 8003f5e <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_HSI_ENABLE();
 8003f3e:	6823      	ldr	r3, [r4, #0]
 8003f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f44:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003f46:	f7fe fafb 	bl	8002540 <HAL_GetTick>
 8003f4a:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f4c:	6823      	ldr	r3, [r4, #0]
 8003f4e:	055a      	lsls	r2, r3, #21
 8003f50:	d4eb      	bmi.n	8003f2a <HAL_RCC_OscConfig+0x1fe>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f52:	f7fe faf5 	bl	8002540 <HAL_GetTick>
 8003f56:	1bc0      	subs	r0, r0, r7
 8003f58:	2802      	cmp	r0, #2
 8003f5a:	d9f7      	bls.n	8003f4c <HAL_RCC_OscConfig+0x220>
 8003f5c:	e784      	b.n	8003e68 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_DISABLE();
 8003f5e:	6823      	ldr	r3, [r4, #0]
 8003f60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f64:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003f66:	f7fe faeb 	bl	8002540 <HAL_GetTick>
 8003f6a:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f6c:	6823      	ldr	r3, [r4, #0]
 8003f6e:	055b      	lsls	r3, r3, #21
 8003f70:	f57f af66 	bpl.w	8003e40 <HAL_RCC_OscConfig+0x114>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f74:	f7fe fae4 	bl	8002540 <HAL_GetTick>
 8003f78:	1bc0      	subs	r0, r0, r7
 8003f7a:	2802      	cmp	r0, #2
 8003f7c:	d9f6      	bls.n	8003f6c <HAL_RCC_OscConfig+0x240>
 8003f7e:	e773      	b.n	8003e68 <HAL_RCC_OscConfig+0x13c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f80:	696b      	ldr	r3, [r5, #20]
 8003f82:	b19b      	cbz	r3, 8003fac <HAL_RCC_OscConfig+0x280>
      __HAL_RCC_LSI_ENABLE();
 8003f84:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003f88:	f043 0301 	orr.w	r3, r3, #1
 8003f8c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003f90:	f7fe fad6 	bl	8002540 <HAL_GetTick>
 8003f94:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f96:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003f9a:	079a      	lsls	r2, r3, #30
 8003f9c:	f53f af54 	bmi.w	8003e48 <HAL_RCC_OscConfig+0x11c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fa0:	f7fe face 	bl	8002540 <HAL_GetTick>
 8003fa4:	1bc0      	subs	r0, r0, r7
 8003fa6:	2802      	cmp	r0, #2
 8003fa8:	d9f5      	bls.n	8003f96 <HAL_RCC_OscConfig+0x26a>
 8003faa:	e75d      	b.n	8003e68 <HAL_RCC_OscConfig+0x13c>
      __HAL_RCC_LSI_DISABLE();
 8003fac:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003fb0:	f023 0301 	bic.w	r3, r3, #1
 8003fb4:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003fb8:	f7fe fac2 	bl	8002540 <HAL_GetTick>
 8003fbc:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fbe:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003fc2:	079b      	lsls	r3, r3, #30
 8003fc4:	f57f af40 	bpl.w	8003e48 <HAL_RCC_OscConfig+0x11c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fc8:	f7fe faba 	bl	8002540 <HAL_GetTick>
 8003fcc:	1bc0      	subs	r0, r0, r7
 8003fce:	2802      	cmp	r0, #2
 8003fd0:	d9f5      	bls.n	8003fbe <HAL_RCC_OscConfig+0x292>
 8003fd2:	e749      	b.n	8003e68 <HAL_RCC_OscConfig+0x13c>
 8003fd4:	40021000 	.word	0x40021000
 8003fd8:	0801cd12 	.word	0x0801cd12
 8003fdc:	20000018 	.word	0x20000018
 8003fe0:	20000020 	.word	0x20000020
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003fe4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003fe6:	00d8      	lsls	r0, r3, #3
 8003fe8:	d429      	bmi.n	800403e <HAL_RCC_OscConfig+0x312>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ff0:	65a3      	str	r3, [r4, #88]	; 0x58
 8003ff2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ff8:	9301      	str	r3, [sp, #4]
 8003ffa:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003ffc:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004000:	4f79      	ldr	r7, [pc, #484]	; (80041e8 <HAL_RCC_OscConfig+0x4bc>)
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	05d9      	lsls	r1, r3, #23
 8004006:	d51d      	bpl.n	8004044 <HAL_RCC_OscConfig+0x318>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004008:	68ab      	ldr	r3, [r5, #8]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d12b      	bne.n	8004066 <HAL_RCC_OscConfig+0x33a>
 800400e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004012:	f043 0301 	orr.w	r3, r3, #1
 8004016:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 800401a:	f7fe fa91 	bl	8002540 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800401e:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004022:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004024:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004028:	079b      	lsls	r3, r3, #30
 800402a:	d542      	bpl.n	80040b2 <HAL_RCC_OscConfig+0x386>
    if(pwrclkchanged == SET)
 800402c:	f1b8 0f00 	cmp.w	r8, #0
 8004030:	f43f af0e 	beq.w	8003e50 <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004034:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004036:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800403a:	65a3      	str	r3, [r4, #88]	; 0x58
 800403c:	e708      	b.n	8003e50 <HAL_RCC_OscConfig+0x124>
    FlagStatus       pwrclkchanged = RESET;
 800403e:	f04f 0800 	mov.w	r8, #0
 8004042:	e7dd      	b.n	8004000 <HAL_RCC_OscConfig+0x2d4>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800404a:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800404c:	f7fe fa78 	bl	8002540 <HAL_GetTick>
 8004050:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	05da      	lsls	r2, r3, #23
 8004056:	d4d7      	bmi.n	8004008 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004058:	f7fe fa72 	bl	8002540 <HAL_GetTick>
 800405c:	eba0 0009 	sub.w	r0, r0, r9
 8004060:	2802      	cmp	r0, #2
 8004062:	d9f6      	bls.n	8004052 <HAL_RCC_OscConfig+0x326>
 8004064:	e700      	b.n	8003e68 <HAL_RCC_OscConfig+0x13c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004066:	2b05      	cmp	r3, #5
 8004068:	d106      	bne.n	8004078 <HAL_RCC_OscConfig+0x34c>
 800406a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800406e:	f043 0304 	orr.w	r3, r3, #4
 8004072:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8004076:	e7ca      	b.n	800400e <HAL_RCC_OscConfig+0x2e2>
 8004078:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800407c:	f022 0201 	bic.w	r2, r2, #1
 8004080:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8004084:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8004088:	f022 0204 	bic.w	r2, r2, #4
 800408c:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1c2      	bne.n	800401a <HAL_RCC_OscConfig+0x2ee>
      tickstart = HAL_GetTick();
 8004094:	f7fe fa54 	bl	8002540 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004098:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800409c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800409e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80040a2:	0798      	lsls	r0, r3, #30
 80040a4:	d5c2      	bpl.n	800402c <HAL_RCC_OscConfig+0x300>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040a6:	f7fe fa4b 	bl	8002540 <HAL_GetTick>
 80040aa:	1bc0      	subs	r0, r0, r7
 80040ac:	4548      	cmp	r0, r9
 80040ae:	d9f6      	bls.n	800409e <HAL_RCC_OscConfig+0x372>
 80040b0:	e6da      	b.n	8003e68 <HAL_RCC_OscConfig+0x13c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040b2:	f7fe fa45 	bl	8002540 <HAL_GetTick>
 80040b6:	1bc0      	subs	r0, r0, r7
 80040b8:	4548      	cmp	r0, r9
 80040ba:	d9b3      	bls.n	8004024 <HAL_RCC_OscConfig+0x2f8>
 80040bc:	e6d4      	b.n	8003e68 <HAL_RCC_OscConfig+0x13c>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040be:	2e0c      	cmp	r6, #12
 80040c0:	d05c      	beq.n	800417c <HAL_RCC_OscConfig+0x450>
        __HAL_RCC_PLL_DISABLE();
 80040c2:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80040c4:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80040c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040ca:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80040cc:	d13b      	bne.n	8004146 <HAL_RCC_OscConfig+0x41a>
        tickstart = HAL_GetTick();
 80040ce:	f7fe fa37 	bl	8002540 <HAL_GetTick>
 80040d2:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040d4:	6823      	ldr	r3, [r4, #0]
 80040d6:	0199      	lsls	r1, r3, #6
 80040d8:	d42f      	bmi.n	800413a <HAL_RCC_OscConfig+0x40e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040da:	68e2      	ldr	r2, [r4, #12]
 80040dc:	4b43      	ldr	r3, [pc, #268]	; (80041ec <HAL_RCC_OscConfig+0x4c0>)
 80040de:	4013      	ands	r3, r2
 80040e0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80040e2:	4313      	orrs	r3, r2
 80040e4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80040e6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80040ea:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80040ec:	3a01      	subs	r2, #1
 80040ee:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80040f2:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80040f4:	0912      	lsrs	r2, r2, #4
 80040f6:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 80040fa:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80040fc:	0852      	lsrs	r2, r2, #1
 80040fe:	3a01      	subs	r2, #1
 8004100:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8004104:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8004106:	0852      	lsrs	r2, r2, #1
 8004108:	3a01      	subs	r2, #1
 800410a:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800410e:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8004110:	6823      	ldr	r3, [r4, #0]
 8004112:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004116:	6023      	str	r3, [r4, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004118:	68e3      	ldr	r3, [r4, #12]
 800411a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800411e:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8004120:	f7fe fa0e 	bl	8002540 <HAL_GetTick>
 8004124:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004126:	6823      	ldr	r3, [r4, #0]
 8004128:	019a      	lsls	r2, r3, #6
 800412a:	f53f ae95 	bmi.w	8003e58 <HAL_RCC_OscConfig+0x12c>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800412e:	f7fe fa07 	bl	8002540 <HAL_GetTick>
 8004132:	1b40      	subs	r0, r0, r5
 8004134:	2802      	cmp	r0, #2
 8004136:	d9f6      	bls.n	8004126 <HAL_RCC_OscConfig+0x3fa>
 8004138:	e696      	b.n	8003e68 <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800413a:	f7fe fa01 	bl	8002540 <HAL_GetTick>
 800413e:	1b80      	subs	r0, r0, r6
 8004140:	2802      	cmp	r0, #2
 8004142:	d9c7      	bls.n	80040d4 <HAL_RCC_OscConfig+0x3a8>
 8004144:	e690      	b.n	8003e68 <HAL_RCC_OscConfig+0x13c>
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004146:	6823      	ldr	r3, [r4, #0]
 8004148:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800414c:	bf02      	ittt	eq
 800414e:	68e3      	ldreq	r3, [r4, #12]
 8004150:	f023 0303 	biceq.w	r3, r3, #3
 8004154:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004156:	68e3      	ldr	r3, [r4, #12]
 8004158:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800415c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004160:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8004162:	f7fe f9ed 	bl	8002540 <HAL_GetTick>
 8004166:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004168:	6823      	ldr	r3, [r4, #0]
 800416a:	019b      	lsls	r3, r3, #6
 800416c:	f57f ae74 	bpl.w	8003e58 <HAL_RCC_OscConfig+0x12c>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004170:	f7fe f9e6 	bl	8002540 <HAL_GetTick>
 8004174:	1b40      	subs	r0, r0, r5
 8004176:	2802      	cmp	r0, #2
 8004178:	d9f6      	bls.n	8004168 <HAL_RCC_OscConfig+0x43c>
 800417a:	e675      	b.n	8003e68 <HAL_RCC_OscConfig+0x13c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800417c:	2801      	cmp	r0, #1
 800417e:	f43f ae23 	beq.w	8003dc8 <HAL_RCC_OscConfig+0x9c>
        pll_config = RCC->PLLCFGR;
 8004182:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004184:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8004186:	f003 0103 	and.w	r1, r3, #3
 800418a:	4291      	cmp	r1, r2
 800418c:	f47f add2 	bne.w	8003d34 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004190:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8004192:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004196:	3901      	subs	r1, #1
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004198:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 800419c:	f47f adca 	bne.w	8003d34 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041a0:	6b69      	ldr	r1, [r5, #52]	; 0x34
 80041a2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041a6:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80041aa:	f47f adc3 	bne.w	8003d34 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80041ae:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80041b0:	3a07      	subs	r2, #7
 80041b2:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 80041b6:	bf18      	it	ne
 80041b8:	2201      	movne	r2, #1
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041ba:	4291      	cmp	r1, r2
 80041bc:	f47f adba 	bne.w	8003d34 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041c0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80041c2:	0852      	lsrs	r2, r2, #1
 80041c4:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 80041c8:	3a01      	subs	r2, #1
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80041ca:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80041ce:	f47f adb1 	bne.w	8003d34 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80041d2:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80041d4:	0852      	lsrs	r2, r2, #1
 80041d6:	3a01      	subs	r2, #1
 80041d8:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041dc:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
    return HAL_ERROR;
 80041e0:	bf14      	ite	ne
 80041e2:	2001      	movne	r0, #1
 80041e4:	2000      	moveq	r0, #0
 80041e6:	e5ef      	b.n	8003dc8 <HAL_RCC_OscConfig+0x9c>
 80041e8:	40007000 	.word	0x40007000
 80041ec:	f99d808c 	.word	0xf99d808c

080041f0 <HAL_RCC_ClockConfig>:
{
 80041f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041f4:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 80041f6:	4604      	mov	r4, r0
 80041f8:	b910      	cbnz	r0, 8004200 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80041fa:	2001      	movs	r0, #1
 80041fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004200:	4a41      	ldr	r2, [pc, #260]	; (8004308 <HAL_RCC_ClockConfig+0x118>)
 8004202:	6813      	ldr	r3, [r2, #0]
 8004204:	f003 0307 	and.w	r3, r3, #7
 8004208:	428b      	cmp	r3, r1
 800420a:	d32a      	bcc.n	8004262 <HAL_RCC_ClockConfig+0x72>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800420c:	6823      	ldr	r3, [r4, #0]
 800420e:	07d9      	lsls	r1, r3, #31
 8004210:	d432      	bmi.n	8004278 <HAL_RCC_ClockConfig+0x88>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004212:	6821      	ldr	r1, [r4, #0]
 8004214:	078a      	lsls	r2, r1, #30
 8004216:	d45c      	bmi.n	80042d2 <HAL_RCC_ClockConfig+0xe2>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004218:	4a3b      	ldr	r2, [pc, #236]	; (8004308 <HAL_RCC_ClockConfig+0x118>)
 800421a:	6813      	ldr	r3, [r2, #0]
 800421c:	f003 0307 	and.w	r3, r3, #7
 8004220:	429e      	cmp	r6, r3
 8004222:	d35e      	bcc.n	80042e2 <HAL_RCC_ClockConfig+0xf2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004224:	f011 0f04 	tst.w	r1, #4
 8004228:	4d38      	ldr	r5, [pc, #224]	; (800430c <HAL_RCC_ClockConfig+0x11c>)
 800422a:	d165      	bne.n	80042f8 <HAL_RCC_ClockConfig+0x108>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800422c:	070b      	lsls	r3, r1, #28
 800422e:	d506      	bpl.n	800423e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004230:	68ab      	ldr	r3, [r5, #8]
 8004232:	6922      	ldr	r2, [r4, #16]
 8004234:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004238:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800423c:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800423e:	f7ff fd27 	bl	8003c90 <HAL_RCC_GetSysClockFreq>
 8004242:	68ab      	ldr	r3, [r5, #8]
 8004244:	4a32      	ldr	r2, [pc, #200]	; (8004310 <HAL_RCC_ClockConfig+0x120>)
 8004246:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 800424a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800424e:	5cd3      	ldrb	r3, [r2, r3]
 8004250:	f003 031f 	and.w	r3, r3, #31
 8004254:	40d8      	lsrs	r0, r3
 8004256:	4b2f      	ldr	r3, [pc, #188]	; (8004314 <HAL_RCC_ClockConfig+0x124>)
 8004258:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 800425a:	4b2f      	ldr	r3, [pc, #188]	; (8004318 <HAL_RCC_ClockConfig+0x128>)
 800425c:	6818      	ldr	r0, [r3, #0]
 800425e:	f7fd bf21 	b.w	80020a4 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004262:	6813      	ldr	r3, [r2, #0]
 8004264:	f023 0307 	bic.w	r3, r3, #7
 8004268:	430b      	orrs	r3, r1
 800426a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800426c:	6813      	ldr	r3, [r2, #0]
 800426e:	f003 0307 	and.w	r3, r3, #7
 8004272:	4299      	cmp	r1, r3
 8004274:	d1c1      	bne.n	80041fa <HAL_RCC_ClockConfig+0xa>
 8004276:	e7c9      	b.n	800420c <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004278:	6862      	ldr	r2, [r4, #4]
 800427a:	4d24      	ldr	r5, [pc, #144]	; (800430c <HAL_RCC_ClockConfig+0x11c>)
 800427c:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800427e:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004280:	d11b      	bne.n	80042ba <HAL_RCC_ClockConfig+0xca>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004282:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004286:	d0b8      	beq.n	80041fa <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004288:	68ab      	ldr	r3, [r5, #8]
 800428a:	f023 0303 	bic.w	r3, r3, #3
 800428e:	4313      	orrs	r3, r2
 8004290:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8004292:	f7fe f955 	bl	8002540 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004296:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800429a:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800429c:	68ab      	ldr	r3, [r5, #8]
 800429e:	6862      	ldr	r2, [r4, #4]
 80042a0:	f003 030c 	and.w	r3, r3, #12
 80042a4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80042a8:	d0b3      	beq.n	8004212 <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042aa:	f7fe f949 	bl	8002540 <HAL_GetTick>
 80042ae:	1bc0      	subs	r0, r0, r7
 80042b0:	4540      	cmp	r0, r8
 80042b2:	d9f3      	bls.n	800429c <HAL_RCC_ClockConfig+0xac>
        return HAL_TIMEOUT;
 80042b4:	2003      	movs	r0, #3
}
 80042b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042ba:	2a02      	cmp	r2, #2
 80042bc:	d102      	bne.n	80042c4 <HAL_RCC_ClockConfig+0xd4>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042be:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80042c2:	e7e0      	b.n	8004286 <HAL_RCC_ClockConfig+0x96>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80042c4:	b912      	cbnz	r2, 80042cc <HAL_RCC_ClockConfig+0xdc>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042c6:	f013 0f02 	tst.w	r3, #2
 80042ca:	e7dc      	b.n	8004286 <HAL_RCC_ClockConfig+0x96>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042cc:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80042d0:	e7d9      	b.n	8004286 <HAL_RCC_ClockConfig+0x96>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042d2:	4a0e      	ldr	r2, [pc, #56]	; (800430c <HAL_RCC_ClockConfig+0x11c>)
 80042d4:	68a0      	ldr	r0, [r4, #8]
 80042d6:	6893      	ldr	r3, [r2, #8]
 80042d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042dc:	4303      	orrs	r3, r0
 80042de:	6093      	str	r3, [r2, #8]
 80042e0:	e79a      	b.n	8004218 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042e2:	6813      	ldr	r3, [r2, #0]
 80042e4:	f023 0307 	bic.w	r3, r3, #7
 80042e8:	4333      	orrs	r3, r6
 80042ea:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ec:	6813      	ldr	r3, [r2, #0]
 80042ee:	f003 0307 	and.w	r3, r3, #7
 80042f2:	429e      	cmp	r6, r3
 80042f4:	d181      	bne.n	80041fa <HAL_RCC_ClockConfig+0xa>
 80042f6:	e795      	b.n	8004224 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042f8:	68ab      	ldr	r3, [r5, #8]
 80042fa:	68e2      	ldr	r2, [r4, #12]
 80042fc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004300:	4313      	orrs	r3, r2
 8004302:	60ab      	str	r3, [r5, #8]
 8004304:	e792      	b.n	800422c <HAL_RCC_ClockConfig+0x3c>
 8004306:	bf00      	nop
 8004308:	40022000 	.word	0x40022000
 800430c:	40021000 	.word	0x40021000
 8004310:	0801cd12 	.word	0x0801cd12
 8004314:	20000018 	.word	0x20000018
 8004318:	20000020 	.word	0x20000020

0800431c <HAL_RCC_GetHCLKFreq>:
}
 800431c:	4b01      	ldr	r3, [pc, #4]	; (8004324 <HAL_RCC_GetHCLKFreq+0x8>)
 800431e:	6818      	ldr	r0, [r3, #0]
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	20000018 	.word	0x20000018

08004328 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004328:	4b05      	ldr	r3, [pc, #20]	; (8004340 <HAL_RCC_GetPCLK1Freq+0x18>)
 800432a:	4a06      	ldr	r2, [pc, #24]	; (8004344 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004332:	5cd3      	ldrb	r3, [r2, r3]
 8004334:	4a04      	ldr	r2, [pc, #16]	; (8004348 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004336:	6810      	ldr	r0, [r2, #0]
 8004338:	f003 031f 	and.w	r3, r3, #31
}
 800433c:	40d8      	lsrs	r0, r3
 800433e:	4770      	bx	lr
 8004340:	40021000 	.word	0x40021000
 8004344:	0801cd22 	.word	0x0801cd22
 8004348:	20000018 	.word	0x20000018

0800434c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800434c:	4b05      	ldr	r3, [pc, #20]	; (8004364 <HAL_RCC_GetPCLK2Freq+0x18>)
 800434e:	4a06      	ldr	r2, [pc, #24]	; (8004368 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004356:	5cd3      	ldrb	r3, [r2, r3]
 8004358:	4a04      	ldr	r2, [pc, #16]	; (800436c <HAL_RCC_GetPCLK2Freq+0x20>)
 800435a:	6810      	ldr	r0, [r2, #0]
 800435c:	f003 031f 	and.w	r3, r3, #31
}
 8004360:	40d8      	lsrs	r0, r3
 8004362:	4770      	bx	lr
 8004364:	40021000 	.word	0x40021000
 8004368:	0801cd22 	.word	0x0801cd22
 800436c:	20000018 	.word	0x20000018

08004370 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004370:	230f      	movs	r3, #15
 8004372:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004374:	4b0b      	ldr	r3, [pc, #44]	; (80043a4 <HAL_RCC_GetClockConfig+0x34>)
 8004376:	689a      	ldr	r2, [r3, #8]
 8004378:	f002 0203 	and.w	r2, r2, #3
 800437c:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800437e:	689a      	ldr	r2, [r3, #8]
 8004380:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8004384:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004386:	689a      	ldr	r2, [r3, #8]
 8004388:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800438c:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	08db      	lsrs	r3, r3, #3
 8004392:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004396:	6103      	str	r3, [r0, #16]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004398:	4b03      	ldr	r3, [pc, #12]	; (80043a8 <HAL_RCC_GetClockConfig+0x38>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0307 	and.w	r3, r3, #7
 80043a0:	600b      	str	r3, [r1, #0]
 80043a2:	4770      	bx	lr
 80043a4:	40021000 	.word	0x40021000
 80043a8:	40022000 	.word	0x40022000

080043ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80043ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80043ae:	4b45      	ldr	r3, [pc, #276]	; (80044c4 <RCCEx_PLLSAI1_Config+0x118>)
 80043b0:	68da      	ldr	r2, [r3, #12]
 80043b2:	f012 0f03 	tst.w	r2, #3
{
 80043b6:	4605      	mov	r5, r0
 80043b8:	460e      	mov	r6, r1
 80043ba:	461c      	mov	r4, r3
 80043bc:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80043be:	d02a      	beq.n	8004416 <RCCEx_PLLSAI1_Config+0x6a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80043c0:	68da      	ldr	r2, [r3, #12]
 80043c2:	f002 0203 	and.w	r2, r2, #3
 80043c6:	4282      	cmp	r2, r0
 80043c8:	d13c      	bne.n	8004444 <RCCEx_PLLSAI1_Config+0x98>
       ||
 80043ca:	2a00      	cmp	r2, #0
 80043cc:	d03a      	beq.n	8004444 <RCCEx_PLLSAI1_Config+0x98>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80043ce:	68db      	ldr	r3, [r3, #12]
       ||
 80043d0:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80043d2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80043d6:	3301      	adds	r3, #1
       ||
 80043d8:	4293      	cmp	r3, r2
 80043da:	d133      	bne.n	8004444 <RCCEx_PLLSAI1_Config+0x98>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80043dc:	6823      	ldr	r3, [r4, #0]
 80043de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80043e2:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043e4:	f7fe f8ac 	bl	8002540 <HAL_GetTick>
 80043e8:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80043ea:	6823      	ldr	r3, [r4, #0]
 80043ec:	011a      	lsls	r2, r3, #4
 80043ee:	d432      	bmi.n	8004456 <RCCEx_PLLSAI1_Config+0xaa>
 80043f0:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80043f2:	2e00      	cmp	r6, #0
 80043f4:	d036      	beq.n	8004464 <RCCEx_PLLSAI1_Config+0xb8>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80043f6:	2e01      	cmp	r6, #1
 80043f8:	d150      	bne.n	800449c <RCCEx_PLLSAI1_Config+0xf0>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043fa:	6922      	ldr	r2, [r4, #16]
 80043fc:	6928      	ldr	r0, [r5, #16]
 80043fe:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8004402:	0840      	lsrs	r0, r0, #1
 8004404:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8004408:	3801      	subs	r0, #1
 800440a:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 800440e:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 8004412:	6122      	str	r2, [r4, #16]
 8004414:	e032      	b.n	800447c <RCCEx_PLLSAI1_Config+0xd0>
    switch(PllSai1->PLLSAI1Source)
 8004416:	2802      	cmp	r0, #2
 8004418:	d010      	beq.n	800443c <RCCEx_PLLSAI1_Config+0x90>
 800441a:	2803      	cmp	r0, #3
 800441c:	d014      	beq.n	8004448 <RCCEx_PLLSAI1_Config+0x9c>
 800441e:	2801      	cmp	r0, #1
 8004420:	d110      	bne.n	8004444 <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	079f      	lsls	r7, r3, #30
 8004426:	d538      	bpl.n	800449a <RCCEx_PLLSAI1_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004428:	68e3      	ldr	r3, [r4, #12]
 800442a:	686a      	ldr	r2, [r5, #4]
 800442c:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8004430:	3a01      	subs	r2, #1
 8004432:	4318      	orrs	r0, r3
 8004434:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8004438:	60e0      	str	r0, [r4, #12]
 800443a:	e7cf      	b.n	80043dc <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004442:	d1f1      	bne.n	8004428 <RCCEx_PLLSAI1_Config+0x7c>
 8004444:	2001      	movs	r0, #1
 8004446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	0391      	lsls	r1, r2, #14
 800444c:	d4ec      	bmi.n	8004428 <RCCEx_PLLSAI1_Config+0x7c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004454:	e7f5      	b.n	8004442 <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004456:	f7fe f873 	bl	8002540 <HAL_GetTick>
 800445a:	1bc0      	subs	r0, r0, r7
 800445c:	2802      	cmp	r0, #2
 800445e:	d9c4      	bls.n	80043ea <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 8004460:	2003      	movs	r0, #3
 8004462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004464:	6921      	ldr	r1, [r4, #16]
 8004466:	68eb      	ldr	r3, [r5, #12]
 8004468:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 800446c:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8004470:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8004474:	091b      	lsrs	r3, r3, #4
 8004476:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 800447a:	6121      	str	r1, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800447c:	6823      	ldr	r3, [r4, #0]
 800447e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004482:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004484:	f7fe f85c 	bl	8002540 <HAL_GetTick>
 8004488:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800448a:	6823      	ldr	r3, [r4, #0]
 800448c:	011b      	lsls	r3, r3, #4
 800448e:	d513      	bpl.n	80044b8 <RCCEx_PLLSAI1_Config+0x10c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004490:	6923      	ldr	r3, [r4, #16]
 8004492:	69aa      	ldr	r2, [r5, #24]
 8004494:	4313      	orrs	r3, r2
 8004496:	6123      	str	r3, [r4, #16]
 8004498:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 800449a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800449c:	6923      	ldr	r3, [r4, #16]
 800449e:	6968      	ldr	r0, [r5, #20]
 80044a0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80044a4:	0840      	lsrs	r0, r0, #1
 80044a6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80044aa:	3801      	subs	r0, #1
 80044ac:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 80044b0:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 80044b4:	6123      	str	r3, [r4, #16]
 80044b6:	e7e1      	b.n	800447c <RCCEx_PLLSAI1_Config+0xd0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044b8:	f7fe f842 	bl	8002540 <HAL_GetTick>
 80044bc:	1b80      	subs	r0, r0, r6
 80044be:	2802      	cmp	r0, #2
 80044c0:	d9e3      	bls.n	800448a <RCCEx_PLLSAI1_Config+0xde>
 80044c2:	e7cd      	b.n	8004460 <RCCEx_PLLSAI1_Config+0xb4>
 80044c4:	40021000 	.word	0x40021000

080044c8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80044c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80044ca:	4b3d      	ldr	r3, [pc, #244]	; (80045c0 <RCCEx_PLLSAI2_Config+0xf8>)
 80044cc:	68da      	ldr	r2, [r3, #12]
 80044ce:	f012 0f03 	tst.w	r2, #3
{
 80044d2:	4605      	mov	r5, r0
 80044d4:	460e      	mov	r6, r1
 80044d6:	461c      	mov	r4, r3
 80044d8:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80044da:	d028      	beq.n	800452e <RCCEx_PLLSAI2_Config+0x66>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80044dc:	68da      	ldr	r2, [r3, #12]
 80044de:	f002 0203 	and.w	r2, r2, #3
 80044e2:	4282      	cmp	r2, r0
 80044e4:	d13a      	bne.n	800455c <RCCEx_PLLSAI2_Config+0x94>
       ||
 80044e6:	2a00      	cmp	r2, #0
 80044e8:	d038      	beq.n	800455c <RCCEx_PLLSAI2_Config+0x94>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80044ea:	68db      	ldr	r3, [r3, #12]
       ||
 80044ec:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80044ee:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80044f2:	3301      	adds	r3, #1
       ||
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d131      	bne.n	800455c <RCCEx_PLLSAI2_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80044f8:	6823      	ldr	r3, [r4, #0]
 80044fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044fe:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004500:	f7fe f81e 	bl	8002540 <HAL_GetTick>
 8004504:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004506:	6823      	ldr	r3, [r4, #0]
 8004508:	009a      	lsls	r2, r3, #2
 800450a:	d430      	bmi.n	800456e <RCCEx_PLLSAI2_Config+0xa6>
 800450c:	68a8      	ldr	r0, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 800450e:	2e00      	cmp	r6, #0
 8004510:	d034      	beq.n	800457c <RCCEx_PLLSAI2_Config+0xb4>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004512:	6963      	ldr	r3, [r4, #20]
 8004514:	6929      	ldr	r1, [r5, #16]
 8004516:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800451a:	0849      	lsrs	r1, r1, #1
 800451c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004520:	3901      	subs	r1, #1
 8004522:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8004526:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 800452a:	6163      	str	r3, [r4, #20]
 800452c:	e032      	b.n	8004594 <RCCEx_PLLSAI2_Config+0xcc>
    switch(PllSai2->PLLSAI2Source)
 800452e:	2802      	cmp	r0, #2
 8004530:	d010      	beq.n	8004554 <RCCEx_PLLSAI2_Config+0x8c>
 8004532:	2803      	cmp	r0, #3
 8004534:	d014      	beq.n	8004560 <RCCEx_PLLSAI2_Config+0x98>
 8004536:	2801      	cmp	r0, #1
 8004538:	d110      	bne.n	800455c <RCCEx_PLLSAI2_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	079f      	lsls	r7, r3, #30
 800453e:	d538      	bpl.n	80045b2 <RCCEx_PLLSAI2_Config+0xea>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004540:	68e3      	ldr	r3, [r4, #12]
 8004542:	686a      	ldr	r2, [r5, #4]
 8004544:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8004548:	3a01      	subs	r2, #1
 800454a:	4318      	orrs	r0, r3
 800454c:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8004550:	60e0      	str	r0, [r4, #12]
 8004552:	e7d1      	b.n	80044f8 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800455a:	d1f1      	bne.n	8004540 <RCCEx_PLLSAI2_Config+0x78>
 800455c:	2001      	movs	r0, #1
 800455e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	0391      	lsls	r1, r2, #14
 8004564:	d4ec      	bmi.n	8004540 <RCCEx_PLLSAI2_Config+0x78>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800456c:	e7f5      	b.n	800455a <RCCEx_PLLSAI2_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800456e:	f7fd ffe7 	bl	8002540 <HAL_GetTick>
 8004572:	1bc0      	subs	r0, r0, r7
 8004574:	2802      	cmp	r0, #2
 8004576:	d9c6      	bls.n	8004506 <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 8004578:	2003      	movs	r0, #3
 800457a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800457c:	6962      	ldr	r2, [r4, #20]
 800457e:	68eb      	ldr	r3, [r5, #12]
 8004580:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 8004584:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004588:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800458c:	091b      	lsrs	r3, r3, #4
 800458e:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 8004592:	6162      	str	r2, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004594:	6823      	ldr	r3, [r4, #0]
 8004596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800459a:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800459c:	f7fd ffd0 	bl	8002540 <HAL_GetTick>
 80045a0:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80045a2:	6823      	ldr	r3, [r4, #0]
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	d505      	bpl.n	80045b4 <RCCEx_PLLSAI2_Config+0xec>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80045a8:	6963      	ldr	r3, [r4, #20]
 80045aa:	696a      	ldr	r2, [r5, #20]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	6163      	str	r3, [r4, #20]
 80045b0:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 80045b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80045b4:	f7fd ffc4 	bl	8002540 <HAL_GetTick>
 80045b8:	1b80      	subs	r0, r0, r6
 80045ba:	2802      	cmp	r0, #2
 80045bc:	d9f1      	bls.n	80045a2 <RCCEx_PLLSAI2_Config+0xda>
 80045be:	e7db      	b.n	8004578 <RCCEx_PLLSAI2_Config+0xb0>
 80045c0:	40021000 	.word	0x40021000

080045c4 <HAL_RCCEx_PeriphCLKConfig>:
{
 80045c4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80045c8:	6806      	ldr	r6, [r0, #0]
 80045ca:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 80045ce:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80045d0:	d024      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 80045d2:	6e41      	ldr	r1, [r0, #100]	; 0x64
 80045d4:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 80045d8:	d02c      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x70>
 80045da:	d802      	bhi.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80045dc:	b1c1      	cbz	r1, 8004610 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 80045de:	2601      	movs	r6, #1
 80045e0:	e01c      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 80045e2:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80045e6:	d00d      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80045e8:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 80045ec:	d1f7      	bne.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045ee:	4a4d      	ldr	r2, [pc, #308]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045f0:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80045f2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80045f6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80045fa:	430b      	orrs	r3, r1
 80045fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8004600:	2600      	movs	r6, #0
 8004602:	e00b      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004604:	4a47      	ldr	r2, [pc, #284]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004606:	68d3      	ldr	r3, [r2, #12]
 8004608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800460c:	60d3      	str	r3, [r2, #12]
      break;
 800460e:	e7ee      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004610:	3004      	adds	r0, #4
 8004612:	f7ff fecb 	bl	80043ac <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004616:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8004618:	2800      	cmp	r0, #0
 800461a:	d0e8      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800461c:	6823      	ldr	r3, [r4, #0]
 800461e:	04d8      	lsls	r0, r3, #19
 8004620:	d506      	bpl.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 8004622:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8004624:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8004628:	d074      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x150>
 800462a:	d808      	bhi.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800462c:	b1a9      	cbz	r1, 800465a <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 800462e:	2601      	movs	r6, #1
 8004630:	4635      	mov	r5, r6
 8004632:	e021      	b.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004634:	2100      	movs	r1, #0
 8004636:	3020      	adds	r0, #32
 8004638:	f7ff ff46 	bl	80044c8 <RCCEx_PLLSAI2_Config>
 800463c:	e7eb      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 800463e:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8004642:	d004      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8004644:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8004648:	d1f1      	bne.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800464a:	4635      	mov	r5, r6
 800464c:	e009      	b.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800464e:	4a35      	ldr	r2, [pc, #212]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004650:	68d3      	ldr	r3, [r2, #12]
 8004652:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004656:	60d3      	str	r3, [r2, #12]
 8004658:	e7f7      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800465a:	1d20      	adds	r0, r4, #4
 800465c:	f7ff fea6 	bl	80043ac <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004660:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004662:	2d00      	cmp	r5, #0
 8004664:	d15c      	bne.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004666:	4a2f      	ldr	r2, [pc, #188]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004668:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800466a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800466e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8004672:	430b      	orrs	r3, r1
 8004674:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004678:	6823      	ldr	r3, [r4, #0]
 800467a:	0399      	lsls	r1, r3, #14
 800467c:	f140 814f 	bpl.w	800491e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004680:	4f28      	ldr	r7, [pc, #160]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004682:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004684:	00da      	lsls	r2, r3, #3
 8004686:	f140 8176 	bpl.w	8004976 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 800468a:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800468e:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8004728 <HAL_RCCEx_PeriphCLKConfig+0x164>
 8004692:	f8d9 3000 	ldr.w	r3, [r9]
 8004696:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800469a:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 800469e:	f7fd ff4f 	bl	8002540 <HAL_GetTick>
 80046a2:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80046a4:	f8d9 3000 	ldr.w	r3, [r9]
 80046a8:	05db      	lsls	r3, r3, #23
 80046aa:	d53f      	bpl.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x168>
    if(ret == HAL_OK)
 80046ac:	2d00      	cmp	r5, #0
 80046ae:	d144      	bne.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80046b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80046b4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80046b8:	d015      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x122>
 80046ba:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80046be:	4293      	cmp	r3, r2
 80046c0:	d011      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x122>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80046c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 80046c6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80046ca:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80046ce:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046d2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80046d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046da:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80046de:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80046e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80046e6:	07d8      	lsls	r0, r3, #31
 80046e8:	d509      	bpl.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x13a>
        tickstart = HAL_GetTick();
 80046ea:	f7fd ff29 	bl	8002540 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ee:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80046f2:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80046f8:	0799      	lsls	r1, r3, #30
 80046fa:	f140 8109 	bpl.w	8004910 <HAL_RCCEx_PeriphCLKConfig+0x34c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004702:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8004706:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800470a:	4313      	orrs	r3, r2
 800470c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004710:	4635      	mov	r5, r6
 8004712:	e012      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x176>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004714:	2100      	movs	r1, #0
 8004716:	f104 0020 	add.w	r0, r4, #32
 800471a:	f7ff fed5 	bl	80044c8 <RCCEx_PLLSAI2_Config>
 800471e:	e79f      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8004720:	462e      	mov	r6, r5
 8004722:	e7a9      	b.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8004724:	40021000 	.word	0x40021000
 8004728:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800472c:	f7fd ff08 	bl	8002540 <HAL_GetTick>
 8004730:	eba0 000a 	sub.w	r0, r0, sl
 8004734:	2802      	cmp	r0, #2
 8004736:	d9b5      	bls.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = HAL_TIMEOUT;
 8004738:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 800473a:	f1b8 0f00 	cmp.w	r8, #0
 800473e:	d003      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x184>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004740:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004742:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004746:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004748:	6823      	ldr	r3, [r4, #0]
 800474a:	07da      	lsls	r2, r3, #31
 800474c:	d508      	bpl.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800474e:	4990      	ldr	r1, [pc, #576]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004750:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004752:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004756:	f022 0203 	bic.w	r2, r2, #3
 800475a:	4302      	orrs	r2, r0
 800475c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004760:	079f      	lsls	r7, r3, #30
 8004762:	d508      	bpl.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004764:	498a      	ldr	r1, [pc, #552]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004766:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004768:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800476c:	f022 020c 	bic.w	r2, r2, #12
 8004770:	4302      	orrs	r2, r0
 8004772:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004776:	075e      	lsls	r6, r3, #29
 8004778:	d508      	bpl.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800477a:	4985      	ldr	r1, [pc, #532]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800477c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800477e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004782:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8004786:	4302      	orrs	r2, r0
 8004788:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800478c:	0718      	lsls	r0, r3, #28
 800478e:	d508      	bpl.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004790:	497f      	ldr	r1, [pc, #508]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004792:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8004794:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004798:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800479c:	4302      	orrs	r2, r0
 800479e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80047a2:	06d9      	lsls	r1, r3, #27
 80047a4:	d508      	bpl.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80047a6:	497a      	ldr	r1, [pc, #488]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80047a8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80047aa:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80047ae:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80047b2:	4302      	orrs	r2, r0
 80047b4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80047b8:	069a      	lsls	r2, r3, #26
 80047ba:	d508      	bpl.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80047bc:	4974      	ldr	r1, [pc, #464]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80047be:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80047c0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80047c4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80047c8:	4302      	orrs	r2, r0
 80047ca:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80047ce:	059f      	lsls	r7, r3, #22
 80047d0:	d508      	bpl.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047d2:	496f      	ldr	r1, [pc, #444]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80047d4:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80047d6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80047da:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80047de:	4302      	orrs	r2, r0
 80047e0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80047e4:	055e      	lsls	r6, r3, #21
 80047e6:	d508      	bpl.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80047e8:	4969      	ldr	r1, [pc, #420]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80047ea:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80047ec:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80047f0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80047f4:	4302      	orrs	r2, r0
 80047f6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047fa:	0658      	lsls	r0, r3, #25
 80047fc:	d508      	bpl.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047fe:	4964      	ldr	r1, [pc, #400]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004800:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8004802:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004806:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800480a:	4302      	orrs	r2, r0
 800480c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004810:	0619      	lsls	r1, r3, #24
 8004812:	d508      	bpl.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x262>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004814:	495e      	ldr	r1, [pc, #376]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004816:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004818:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800481c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8004820:	4302      	orrs	r2, r0
 8004822:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004826:	05da      	lsls	r2, r3, #23
 8004828:	d508      	bpl.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x278>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800482a:	4959      	ldr	r1, [pc, #356]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800482c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800482e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004832:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8004836:	4302      	orrs	r2, r0
 8004838:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800483c:	049b      	lsls	r3, r3, #18
 800483e:	d50f      	bpl.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004840:	4a53      	ldr	r2, [pc, #332]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004842:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8004844:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004848:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800484c:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800484e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004852:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004856:	d164      	bne.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004858:	68d3      	ldr	r3, [r2, #12]
 800485a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800485e:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004860:	6823      	ldr	r3, [r4, #0]
 8004862:	031f      	lsls	r7, r3, #12
 8004864:	d50f      	bpl.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004866:	4a4a      	ldr	r2, [pc, #296]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004868:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800486a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800486e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004872:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004874:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004878:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800487c:	d15c      	bne.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x374>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800487e:	68d3      	ldr	r3, [r2, #12]
 8004880:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004884:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004886:	6823      	ldr	r3, [r4, #0]
 8004888:	035e      	lsls	r6, r3, #13
 800488a:	d50f      	bpl.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800488c:	4a40      	ldr	r2, [pc, #256]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800488e:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8004890:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004894:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004898:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800489a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800489e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80048a2:	d154      	bne.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x38a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048a4:	68d3      	ldr	r3, [r2, #12]
 80048a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048aa:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80048ac:	6823      	ldr	r3, [r4, #0]
 80048ae:	0458      	lsls	r0, r3, #17
 80048b0:	d512      	bpl.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x314>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048b2:	4937      	ldr	r1, [pc, #220]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80048b4:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80048b6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80048ba:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80048be:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80048c0:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80048c8:	d14c      	bne.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80048ca:	2102      	movs	r1, #2
 80048cc:	1d20      	adds	r0, r4, #4
 80048ce:	f7ff fd6d 	bl	80043ac <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80048d2:	2800      	cmp	r0, #0
 80048d4:	bf18      	it	ne
 80048d6:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80048d8:	6822      	ldr	r2, [r4, #0]
 80048da:	0411      	lsls	r1, r2, #16
 80048dc:	d508      	bpl.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80048de:	492c      	ldr	r1, [pc, #176]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80048e0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80048e2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80048e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80048ea:	4303      	orrs	r3, r0
 80048ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80048f0:	03d3      	lsls	r3, r2, #15
 80048f2:	d509      	bpl.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80048f4:	4a26      	ldr	r2, [pc, #152]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80048f6:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80048fa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80048fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004902:	430b      	orrs	r3, r1
 8004904:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8004908:	4628      	mov	r0, r5
 800490a:	b002      	add	sp, #8
 800490c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004910:	f7fd fe16 	bl	8002540 <HAL_GetTick>
 8004914:	1b40      	subs	r0, r0, r5
 8004916:	4548      	cmp	r0, r9
 8004918:	f67f aeec 	bls.w	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x130>
 800491c:	e70c      	b.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x174>
 800491e:	4635      	mov	r5, r6
 8004920:	e712      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x184>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004922:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8004926:	d19b      	bne.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004928:	2101      	movs	r1, #1
 800492a:	1d20      	adds	r0, r4, #4
 800492c:	f7ff fd3e 	bl	80043ac <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8004930:	2800      	cmp	r0, #0
 8004932:	bf18      	it	ne
 8004934:	4605      	movne	r5, r0
 8004936:	e793      	b.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004938:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800493c:	d1a3      	bne.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800493e:	2101      	movs	r1, #1
 8004940:	1d20      	adds	r0, r4, #4
 8004942:	f7ff fd33 	bl	80043ac <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8004946:	2800      	cmp	r0, #0
 8004948:	bf18      	it	ne
 800494a:	4605      	movne	r5, r0
 800494c:	e79b      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800494e:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8004952:	d1ab      	bne.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004954:	2101      	movs	r1, #1
 8004956:	1d20      	adds	r0, r4, #4
 8004958:	f7ff fd28 	bl	80043ac <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800495c:	2800      	cmp	r0, #0
 800495e:	bf18      	it	ne
 8004960:	4605      	movne	r5, r0
 8004962:	e7a3      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004964:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8004968:	d1b6      	bne.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x314>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800496a:	2102      	movs	r1, #2
 800496c:	f104 0020 	add.w	r0, r4, #32
 8004970:	f7ff fdaa 	bl	80044c8 <RCCEx_PLLSAI2_Config>
 8004974:	e7ad      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004976:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800497c:	65bb      	str	r3, [r7, #88]	; 0x58
 800497e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004984:	9301      	str	r3, [sp, #4]
 8004986:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004988:	f04f 0801 	mov.w	r8, #1
 800498c:	e67f      	b.n	800468e <HAL_RCCEx_PeriphCLKConfig+0xca>
 800498e:	bf00      	nop
 8004990:	40021000 	.word	0x40021000

08004994 <HAL_RTC_WaitForSynchro>:

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004994:	6802      	ldr	r2, [r0, #0]
{
 8004996:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004998:	68d3      	ldr	r3, [r2, #12]
 800499a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800499e:	60d3      	str	r3, [r2, #12]
{
 80049a0:	4604      	mov	r4, r0
#endif

  tickstart = HAL_GetTick();
 80049a2:	f7fd fdcd 	bl	8002540 <HAL_GetTick>
 80049a6:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80049a8:	6823      	ldr	r3, [r4, #0]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	069b      	lsls	r3, r3, #26
 80049ae:	d501      	bpl.n	80049b4 <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 80049b0:	2000      	movs	r0, #0
 80049b2:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80049b4:	f7fd fdc4 	bl	8002540 <HAL_GetTick>
 80049b8:	1b40      	subs	r0, r0, r5
 80049ba:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80049be:	d9f3      	bls.n	80049a8 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 80049c0:	2003      	movs	r0, #3
}
 80049c2:	bd38      	pop	{r3, r4, r5, pc}

080049c4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80049c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80049c6:	6803      	ldr	r3, [r0, #0]
 80049c8:	68dc      	ldr	r4, [r3, #12]
 80049ca:	f014 0440 	ands.w	r4, r4, #64	; 0x40
{
 80049ce:	4605      	mov	r5, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80049d0:	d118      	bne.n	8004a04 <RTC_EnterInitMode+0x40>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80049d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049d6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80049d8:	f7fd fdb2 	bl	8002540 <HAL_GetTick>
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
      {
        status = HAL_TIMEOUT;
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80049dc:	2703      	movs	r7, #3
    tickstart = HAL_GetTick();
 80049de:	4606      	mov	r6, r0
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80049e0:	682b      	ldr	r3, [r5, #0]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	065b      	lsls	r3, r3, #25
 80049e6:	d401      	bmi.n	80049ec <RTC_EnterInitMode+0x28>
 80049e8:	2c03      	cmp	r4, #3
 80049ea:	d101      	bne.n	80049f0 <RTC_EnterInitMode+0x2c>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) */

  return status;
}
 80049ec:	4620      	mov	r0, r4
 80049ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80049f0:	f7fd fda6 	bl	8002540 <HAL_GetTick>
 80049f4:	1b80      	subs	r0, r0, r6
 80049f6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80049fa:	bf84      	itt	hi
 80049fc:	f885 7021 	strbhi.w	r7, [r5, #33]	; 0x21
        status = HAL_TIMEOUT;
 8004a00:	2403      	movhi	r4, #3
 8004a02:	e7ed      	b.n	80049e0 <RTC_EnterInitMode+0x1c>
  HAL_StatusTypeDef status = HAL_OK;
 8004a04:	2400      	movs	r4, #0
 8004a06:	e7f1      	b.n	80049ec <RTC_EnterInitMode+0x28>

08004a08 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004a08:	b538      	push	{r3, r4, r5, lr}
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8004a0a:	4c0f      	ldr	r4, [pc, #60]	; (8004a48 <RTC_ExitInitMode+0x40>)
 8004a0c:	68e3      	ldr	r3, [r4, #12]
 8004a0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a12:	60e3      	str	r3, [r4, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004a14:	68a3      	ldr	r3, [r4, #8]
 8004a16:	069b      	lsls	r3, r3, #26
{
 8004a18:	4605      	mov	r5, r0
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004a1a:	d406      	bmi.n	8004a2a <RTC_ExitInitMode+0x22>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004a1c:	f7ff ffba 	bl	8004994 <HAL_RTC_WaitForSynchro>
 8004a20:	b188      	cbz	r0, 8004a46 <RTC_ExitInitMode+0x3e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004a22:	2003      	movs	r0, #3
 8004a24:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
 8004a28:	bd38      	pop	{r3, r4, r5, pc}
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004a2a:	68a3      	ldr	r3, [r4, #8]
 8004a2c:	f023 0320 	bic.w	r3, r3, #32
 8004a30:	60a3      	str	r3, [r4, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004a32:	f7ff ffaf 	bl	8004994 <HAL_RTC_WaitForSynchro>
 8004a36:	b110      	cbz	r0, 8004a3e <RTC_ExitInitMode+0x36>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004a38:	2003      	movs	r0, #3
 8004a3a:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004a3e:	68a3      	ldr	r3, [r4, #8]
 8004a40:	f043 0320 	orr.w	r3, r3, #32
 8004a44:	60a3      	str	r3, [r4, #8]
  }

  return status;
}
 8004a46:	bd38      	pop	{r3, r4, r5, pc}
 8004a48:	40002800 	.word	0x40002800

08004a4c <HAL_RTC_Init>:
{
 8004a4c:	b538      	push	{r3, r4, r5, lr}
  if (hrtc != NULL)
 8004a4e:	4604      	mov	r4, r0
 8004a50:	2800      	cmp	r0, #0
 8004a52:	d040      	beq.n	8004ad6 <HAL_RTC_Init+0x8a>
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004a54:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8004a58:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004a5c:	b91b      	cbnz	r3, 8004a66 <HAL_RTC_Init+0x1a>
      hrtc->Lock = HAL_UNLOCKED;
 8004a5e:	f880 2020 	strb.w	r2, [r0, #32]
      HAL_RTC_MspInit(hrtc);
 8004a62:	f7fd fa6f 	bl	8001f44 <HAL_RTC_MspInit>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004a66:	2302      	movs	r3, #2
 8004a68:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a6c:	6823      	ldr	r3, [r4, #0]
 8004a6e:	22ca      	movs	r2, #202	; 0xca
 8004a70:	625a      	str	r2, [r3, #36]	; 0x24
 8004a72:	2253      	movs	r2, #83	; 0x53
 8004a74:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 8004a76:	4620      	mov	r0, r4
 8004a78:	f7ff ffa4 	bl	80049c4 <RTC_EnterInitMode>
    if (status == HAL_OK)
 8004a7c:	2800      	cmp	r0, #0
 8004a7e:	d12b      	bne.n	8004ad8 <HAL_RTC_Init+0x8c>
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004a80:	6823      	ldr	r3, [r4, #0]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004a82:	6920      	ldr	r0, [r4, #16]
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004a84:	689a      	ldr	r2, [r3, #8]
 8004a86:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8004a8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a8e:	609a      	str	r2, [r3, #8]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004a90:	6862      	ldr	r2, [r4, #4]
 8004a92:	6899      	ldr	r1, [r3, #8]
 8004a94:	4302      	orrs	r2, r0
 8004a96:	69a0      	ldr	r0, [r4, #24]
 8004a98:	4302      	orrs	r2, r0
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	609a      	str	r2, [r3, #8]
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004a9e:	68e2      	ldr	r2, [r4, #12]
 8004aa0:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004aa2:	691a      	ldr	r2, [r3, #16]
 8004aa4:	68a1      	ldr	r1, [r4, #8]
 8004aa6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004aaa:	611a      	str	r2, [r3, #16]
      status = RTC_ExitInitMode(hrtc);
 8004aac:	4620      	mov	r0, r4
 8004aae:	f7ff ffab 	bl	8004a08 <RTC_ExitInitMode>
      if (status == HAL_OK)
 8004ab2:	b988      	cbnz	r0, 8004ad8 <HAL_RTC_Init+0x8c>
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004ab4:	6823      	ldr	r3, [r4, #0]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004ab6:	6965      	ldr	r5, [r4, #20]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004ab8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004aba:	f022 0203 	bic.w	r2, r2, #3
 8004abe:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004ac0:	69e2      	ldr	r2, [r4, #28]
 8004ac2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004ac4:	432a      	orrs	r2, r5
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	64da      	str	r2, [r3, #76]	; 0x4c
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004aca:	22ff      	movs	r2, #255	; 0xff
 8004acc:	625a      	str	r2, [r3, #36]	; 0x24
          hrtc->State = HAL_RTC_STATE_READY;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 8004ad4:	bd38      	pop	{r3, r4, r5, pc}
  HAL_StatusTypeDef status = HAL_ERROR;
 8004ad6:	2001      	movs	r0, #1
}
 8004ad8:	bd38      	pop	{r3, r4, r5, pc}

08004ada <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8004ada:	2300      	movs	r3, #0
  uint8_t temp = Value;

  while (temp >= 10U)
 8004adc:	2809      	cmp	r0, #9
 8004ade:	d803      	bhi.n	8004ae8 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    temp -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8004ae0:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8004ae4:	b2c0      	uxtb	r0, r0
 8004ae6:	4770      	bx	lr
    temp -= 10U;
 8004ae8:	380a      	subs	r0, #10
    bcdhigh++;
 8004aea:	3301      	adds	r3, #1
    temp -= 10U;
 8004aec:	b2c0      	uxtb	r0, r0
 8004aee:	e7f5      	b.n	8004adc <RTC_ByteToBcd2+0x2>

08004af0 <HAL_RTC_SetTime>:
{
 8004af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8004af2:	f890 3020 	ldrb.w	r3, [r0, #32]
 8004af6:	2b01      	cmp	r3, #1
{
 8004af8:	4605      	mov	r5, r0
 8004afa:	460e      	mov	r6, r1
 8004afc:	4617      	mov	r7, r2
 8004afe:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hrtc);
 8004b02:	d052      	beq.n	8004baa <HAL_RTC_SetTime+0xba>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b04:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  __HAL_LOCK(hrtc);
 8004b08:	2201      	movs	r2, #1
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b0a:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hrtc);
 8004b0c:	f880 2020 	strb.w	r2, [r0, #32]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b10:	22ca      	movs	r2, #202	; 0xca
 8004b12:	625a      	str	r2, [r3, #36]	; 0x24
 8004b14:	2253      	movs	r2, #83	; 0x53
 8004b16:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 8004b18:	f7ff ff54 	bl	80049c4 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8004b1c:	bb68      	cbnz	r0, 8004b7a <HAL_RTC_SetTime+0x8a>
 8004b1e:	682b      	ldr	r3, [r5, #0]
 8004b20:	7830      	ldrb	r0, [r6, #0]
 8004b22:	7874      	ldrb	r4, [r6, #1]
 8004b24:	78b1      	ldrb	r1, [r6, #2]
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004b26:	689b      	ldr	r3, [r3, #8]
    if (Format == RTC_FORMAT_BIN)
 8004b28:	bb97      	cbnz	r7, 8004b90 <HAL_RTC_SetTime+0xa0>
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004b2a:	f013 0340 	ands.w	r3, r3, #64	; 0x40
        sTime->TimeFormat = 0x00U;
 8004b2e:	bf08      	it	eq
 8004b30:	70f3      	strbeq	r3, [r6, #3]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004b32:	f7ff ffd2 	bl	8004ada <RTC_ByteToBcd2>
 8004b36:	4602      	mov	r2, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004b38:	4620      	mov	r0, r4
 8004b3a:	f7ff ffce 	bl	8004ada <RTC_ByteToBcd2>
 8004b3e:	4604      	mov	r4, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004b40:	4608      	mov	r0, r1
 8004b42:	f7ff ffca 	bl	8004ada <RTC_ByteToBcd2>
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004b46:	78f3      	ldrb	r3, [r6, #3]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004b48:	ea40 5083 	orr.w	r0, r0, r3, lsl #22
 8004b4c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8004b50:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004b54:	682b      	ldr	r3, [r5, #0]
 8004b56:	f000 307f 	and.w	r0, r0, #2139062143	; 0x7f7f7f7f
 8004b5a:	f020 40fe 	bic.w	r0, r0, #2130706432	; 0x7f000000
 8004b5e:	6018      	str	r0, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004b60:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004b62:	6930      	ldr	r0, [r6, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004b64:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b68:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004b6a:	68f2      	ldr	r2, [r6, #12]
 8004b6c:	6899      	ldr	r1, [r3, #8]
 8004b6e:	4302      	orrs	r2, r0
 8004b70:	430a      	orrs	r2, r1
 8004b72:	609a      	str	r2, [r3, #8]
    status = RTC_ExitInitMode(hrtc);
 8004b74:	4628      	mov	r0, r5
 8004b76:	f7ff ff47 	bl	8004a08 <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b7a:	682b      	ldr	r3, [r5, #0]
 8004b7c:	22ff      	movs	r2, #255	; 0xff
 8004b7e:	625a      	str	r2, [r3, #36]	; 0x24
  if (status == HAL_OK)
 8004b80:	b910      	cbnz	r0, 8004b88 <HAL_RTC_SetTime+0x98>
    hrtc->State = HAL_RTC_STATE_READY;
 8004b82:	2301      	movs	r3, #1
 8004b84:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
  __HAL_UNLOCK(hrtc);
 8004b88:	2300      	movs	r3, #0
 8004b8a:	f885 3020 	strb.w	r3, [r5, #32]
  return status;
 8004b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004b90:	f013 0340 	ands.w	r3, r3, #64	; 0x40
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004b94:	ea4f 2404 	mov.w	r4, r4, lsl #8
        sTime->TimeFormat = 0x00U;
 8004b98:	bf08      	it	eq
 8004b9a:	70f3      	strbeq	r3, [r6, #3]
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004b9c:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004ba0:	78f4      	ldrb	r4, [r6, #3]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004ba2:	4308      	orrs	r0, r1
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004ba4:	ea40 5084 	orr.w	r0, r0, r4, lsl #22
 8004ba8:	e7d4      	b.n	8004b54 <HAL_RTC_SetTime+0x64>
  __HAL_LOCK(hrtc);
 8004baa:	4618      	mov	r0, r3
}
 8004bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004bae <HAL_RTC_SetDate>:
{
 8004bae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8004bb0:	f890 3020 	ldrb.w	r3, [r0, #32]
 8004bb4:	2b01      	cmp	r3, #1
{
 8004bb6:	4605      	mov	r5, r0
 8004bb8:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 8004bbc:	d043      	beq.n	8004c46 <HAL_RTC_SetDate+0x98>
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	f885 3020 	strb.w	r3, [r5, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004bc4:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
 8004bc8:	784b      	ldrb	r3, [r1, #1]
 8004bca:	78c8      	ldrb	r0, [r1, #3]
 8004bcc:	788e      	ldrb	r6, [r1, #2]
 8004bce:	780c      	ldrb	r4, [r1, #0]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004bd0:	bb92      	cbnz	r2, 8004c38 <HAL_RTC_SetDate+0x8a>
 8004bd2:	06da      	lsls	r2, r3, #27
 8004bd4:	d503      	bpl.n	8004bde <HAL_RTC_SetDate+0x30>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004bd6:	f023 0310 	bic.w	r3, r3, #16
 8004bda:	330a      	adds	r3, #10
 8004bdc:	704b      	strb	r3, [r1, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004bde:	f7ff ff7c 	bl	8004ada <RTC_ByteToBcd2>
 8004be2:	4607      	mov	r7, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004be4:	7848      	ldrb	r0, [r1, #1]
 8004be6:	f7ff ff78 	bl	8004ada <RTC_ByteToBcd2>
 8004bea:	4602      	mov	r2, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8004bec:	4630      	mov	r0, r6
 8004bee:	f7ff ff74 	bl	8004ada <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004bf2:	ea40 3044 	orr.w	r0, r0, r4, lsl #13
 8004bf6:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8004bfa:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004bfe:	682b      	ldr	r3, [r5, #0]
 8004c00:	22ca      	movs	r2, #202	; 0xca
 8004c02:	625a      	str	r2, [r3, #36]	; 0x24
 8004c04:	2253      	movs	r2, #83	; 0x53
 8004c06:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 8004c08:	4628      	mov	r0, r5
 8004c0a:	f7ff fedb 	bl	80049c4 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8004c0e:	b940      	cbnz	r0, 8004c22 <HAL_RTC_SetDate+0x74>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004c10:	682b      	ldr	r3, [r5, #0]
 8004c12:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 8004c16:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 8004c1a:	605c      	str	r4, [r3, #4]
    status = RTC_ExitInitMode(hrtc);
 8004c1c:	4628      	mov	r0, r5
 8004c1e:	f7ff fef3 	bl	8004a08 <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c22:	682b      	ldr	r3, [r5, #0]
 8004c24:	22ff      	movs	r2, #255	; 0xff
 8004c26:	625a      	str	r2, [r3, #36]	; 0x24
  if (status == HAL_OK)
 8004c28:	b910      	cbnz	r0, 8004c30 <HAL_RTC_SetDate+0x82>
    hrtc->State = HAL_RTC_STATE_READY ;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
  __HAL_UNLOCK(hrtc);
 8004c30:	2300      	movs	r3, #0
 8004c32:	f885 3020 	strb.w	r3, [r5, #32]
  return status;
 8004c36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004c38:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004c3a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004c3e:	4330      	orrs	r0, r6
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004c40:	ea40 3444 	orr.w	r4, r0, r4, lsl #13
 8004c44:	e7db      	b.n	8004bfe <HAL_RTC_SetDate+0x50>
}
 8004c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004c48 <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c48:	6803      	ldr	r3, [r0, #0]
 8004c4a:	685a      	ldr	r2, [r3, #4]
 8004c4c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004c50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c52:	6842      	ldr	r2, [r0, #4]
 8004c54:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8004c58:	d10a      	bne.n	8004c70 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
 8004c5a:	6882      	ldr	r2, [r0, #8]
 8004c5c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8004c60:	d002      	beq.n	8004c68 <SPI_WaitFifoStateUntilTimeout.part.1+0x20>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c62:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8004c66:	d103      	bne.n	8004c70 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c70:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8004c72:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8004c76:	d107      	bne.n	8004c88 <SPI_WaitFifoStateUntilTimeout.part.1+0x40>
        {
          SPI_RESET_CRC(hspi);
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c7e:	601a      	str	r2, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c86:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c8e:	2300      	movs	r3, #0
 8004c90:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      }
    }
  }

  return HAL_OK;
}
 8004c94:	2003      	movs	r0, #3
 8004c96:	4770      	bx	lr

08004c98 <SPI_WaitFlagStateUntilTimeout.constprop.10>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8004c98:	b570      	push	{r4, r5, r6, lr}
 8004c9a:	4604      	mov	r4, r0
 8004c9c:	460d      	mov	r5, r1
 8004c9e:	4616      	mov	r6, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ca0:	6823      	ldr	r3, [r4, #0]
 8004ca2:	6898      	ldr	r0, [r3, #8]
 8004ca4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004ca8:	d100      	bne.n	8004cac <SPI_WaitFlagStateUntilTimeout.constprop.10+0x14>
}
 8004caa:	bd70      	pop	{r4, r5, r6, pc}
    if (Timeout != HAL_MAX_DELAY)
 8004cac:	1c6a      	adds	r2, r5, #1
 8004cae:	d0f8      	beq.n	8004ca2 <SPI_WaitFlagStateUntilTimeout.constprop.10+0xa>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004cb0:	f7fd fc46 	bl	8002540 <HAL_GetTick>
 8004cb4:	1b80      	subs	r0, r0, r6
 8004cb6:	4285      	cmp	r5, r0
 8004cb8:	d8f2      	bhi.n	8004ca0 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x8>
 8004cba:	4620      	mov	r0, r4
}
 8004cbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004cc0:	f7ff bfc2 	b.w	8004c48 <SPI_WaitFifoStateUntilTimeout.part.1>

08004cc4 <SPI_WaitFifoStateUntilTimeout.constprop.11>:
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8004cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cc6:	4605      	mov	r5, r0
 8004cc8:	460c      	mov	r4, r1
 8004cca:	4616      	mov	r6, r2
 8004ccc:	461f      	mov	r7, r3
  while ((hspi->Instance->SR & Fifo) != State)
 8004cce:	6829      	ldr	r1, [r5, #0]
 8004cd0:	6888      	ldr	r0, [r1, #8]
 8004cd2:	4020      	ands	r0, r4
 8004cd4:	d100      	bne.n	8004cd8 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x14>
}
 8004cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004cd8:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004cdc:	bf08      	it	eq
 8004cde:	7b0b      	ldrbeq	r3, [r1, #12]
    if (Timeout != HAL_MAX_DELAY)
 8004ce0:	1c73      	adds	r3, r6, #1
 8004ce2:	d0f5      	beq.n	8004cd0 <SPI_WaitFifoStateUntilTimeout.constprop.11+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004ce4:	f7fd fc2c 	bl	8002540 <HAL_GetTick>
 8004ce8:	1bc0      	subs	r0, r0, r7
 8004cea:	4286      	cmp	r6, r0
 8004cec:	d8ef      	bhi.n	8004cce <SPI_WaitFifoStateUntilTimeout.constprop.11+0xa>
 8004cee:	4628      	mov	r0, r5
}
 8004cf0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004cf4:	f7ff bfa8 	b.w	8004c48 <SPI_WaitFifoStateUntilTimeout.part.1>

08004cf8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004cf8:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004cfa:	4613      	mov	r3, r2
{
 8004cfc:	460d      	mov	r5, r1
 8004cfe:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d00:	460a      	mov	r2, r1
 8004d02:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 8004d06:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d08:	f7ff ffdc 	bl	8004cc4 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8004d0c:	b128      	cbz	r0, 8004d1a <SPI_EndRxTxTransaction+0x22>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d0e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004d10:	f043 0320 	orr.w	r3, r3, #32
 8004d14:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8004d16:	2003      	movs	r0, #3
 8004d18:	e00f      	b.n	8004d3a <SPI_EndRxTxTransaction+0x42>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d1a:	4632      	mov	r2, r6
 8004d1c:	4629      	mov	r1, r5
 8004d1e:	4620      	mov	r0, r4
 8004d20:	f7ff ffba 	bl	8004c98 <SPI_WaitFlagStateUntilTimeout.constprop.10>
 8004d24:	2800      	cmp	r0, #0
 8004d26:	d1f2      	bne.n	8004d0e <SPI_EndRxTxTransaction+0x16>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d28:	4633      	mov	r3, r6
 8004d2a:	462a      	mov	r2, r5
 8004d2c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004d30:	4620      	mov	r0, r4
 8004d32:	f7ff ffc7 	bl	8004cc4 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8004d36:	2800      	cmp	r0, #0
 8004d38:	d1e9      	bne.n	8004d0e <SPI_EndRxTxTransaction+0x16>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8004d3a:	bd70      	pop	{r4, r5, r6, pc}

08004d3c <HAL_SPI_Init>:
{
 8004d3c:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 8004d3e:	4604      	mov	r4, r0
 8004d40:	2800      	cmp	r0, #0
 8004d42:	d04a      	beq.n	8004dda <HAL_SPI_Init+0x9e>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d44:	2300      	movs	r3, #0
 8004d46:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d48:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8004d4c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004d50:	b91b      	cbnz	r3, 8004d5a <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8004d52:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8004d56:	f7fd f905 	bl	8001f64 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8004d5a:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8004d5c:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8004d5e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8004d62:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d64:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8004d66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d6a:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8004d6e:	600b      	str	r3, [r1, #0]
 8004d70:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d74:	d92e      	bls.n	8004dd4 <HAL_SPI_Init+0x98>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004d76:	4618      	mov	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004d78:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d7c:	bf18      	it	ne
 8004d7e:	62a3      	strne	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004d80:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004d82:	b92b      	cbnz	r3, 8004d90 <HAL_SPI_Init+0x54>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d84:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004d88:	bf8c      	ite	hi
 8004d8a:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004d8c:	2301      	movls	r3, #1
 8004d8e:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004d90:	68a6      	ldr	r6, [r4, #8]
 8004d92:	6863      	ldr	r3, [r4, #4]
 8004d94:	69a5      	ldr	r5, [r4, #24]
 8004d96:	4333      	orrs	r3, r6
 8004d98:	6926      	ldr	r6, [r4, #16]
 8004d9a:	4333      	orrs	r3, r6
 8004d9c:	6966      	ldr	r6, [r4, #20]
 8004d9e:	4333      	orrs	r3, r6
 8004da0:	69e6      	ldr	r6, [r4, #28]
 8004da2:	4333      	orrs	r3, r6
 8004da4:	6a26      	ldr	r6, [r4, #32]
 8004da6:	4333      	orrs	r3, r6
 8004da8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004daa:	4333      	orrs	r3, r6
 8004dac:	f405 7600 	and.w	r6, r5, #512	; 0x200
 8004db0:	4333      	orrs	r3, r6
 8004db2:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004db4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004db6:	431a      	orrs	r2, r3
 8004db8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004dba:	0c2d      	lsrs	r5, r5, #16
 8004dbc:	431a      	orrs	r2, r3
 8004dbe:	f005 0504 	and.w	r5, r5, #4
 8004dc2:	432a      	orrs	r2, r5
 8004dc4:	4302      	orrs	r2, r0
  hspi->State     = HAL_SPI_STATE_READY;
 8004dc6:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004dc8:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004dca:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004dcc:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004dce:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  return HAL_OK;
 8004dd2:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004dd4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004dd8:	e7d0      	b.n	8004d7c <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 8004dda:	2001      	movs	r0, #1
}
 8004ddc:	bd70      	pop	{r4, r5, r6, pc}

08004dde <HAL_SPI_Transmit>:
{
 8004dde:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004de2:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8004de4:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8004de8:	2b01      	cmp	r3, #1
{
 8004dea:	4604      	mov	r4, r0
 8004dec:	460d      	mov	r5, r1
 8004dee:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8004df0:	f000 80b1 	beq.w	8004f56 <HAL_SPI_Transmit+0x178>
 8004df4:	2301      	movs	r3, #1
 8004df6:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8004dfa:	f7fd fba1 	bl	8002540 <HAL_GetTick>
 8004dfe:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8004e00:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8004e04:	b2c0      	uxtb	r0, r0
 8004e06:	2801      	cmp	r0, #1
 8004e08:	f040 80a3 	bne.w	8004f52 <HAL_SPI_Transmit+0x174>
  if ((pData == NULL) || (Size == 0U))
 8004e0c:	2d00      	cmp	r5, #0
 8004e0e:	d05f      	beq.n	8004ed0 <HAL_SPI_Transmit+0xf2>
 8004e10:	f1b8 0f00 	cmp.w	r8, #0
 8004e14:	d05c      	beq.n	8004ed0 <HAL_SPI_Transmit+0xf2>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004e16:	2303      	movs	r3, #3
 8004e18:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e1c:	2000      	movs	r0, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e1e:	68a3      	ldr	r3, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e20:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004e22:	6420      	str	r0, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 8004e24:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->RxXferSize  = 0U;
 8004e28:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004e2c:	f8a4 0046 	strh.w	r0, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004e30:	6520      	str	r0, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004e32:	64e0      	str	r0, [r4, #76]	; 0x4c
 8004e34:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004e36:	63a5      	str	r5, [r4, #56]	; 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8004e3c:	bf08      	it	eq
 8004e3e:	6803      	ldreq	r3, [r0, #0]
  hspi->TxXferSize  = Size;
 8004e40:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
    SPI_1LINE_TX(hspi);
 8004e44:	bf04      	itt	eq
 8004e46:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8004e4a:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e4c:	6803      	ldr	r3, [r0, #0]
 8004e4e:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8004e50:	bf5e      	ittt	pl
 8004e52:	6803      	ldrpl	r3, [r0, #0]
 8004e54:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8004e58:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e5a:	68e3      	ldr	r3, [r4, #12]
 8004e5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e60:	6863      	ldr	r3, [r4, #4]
 8004e62:	d93e      	bls.n	8004ee2 <HAL_SPI_Transmit+0x104>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e64:	b113      	cbz	r3, 8004e6c <HAL_SPI_Transmit+0x8e>
 8004e66:	f1b8 0f01 	cmp.w	r8, #1
 8004e6a:	d107      	bne.n	8004e7c <HAL_SPI_Transmit+0x9e>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e6c:	f835 3b02 	ldrh.w	r3, [r5], #2
 8004e70:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e72:	63a5      	str	r5, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8004e74:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004e76:	3b01      	subs	r3, #1
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8004e7c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	b9a3      	cbnz	r3, 8004eac <HAL_SPI_Transmit+0xce>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e82:	463a      	mov	r2, r7
 8004e84:	4631      	mov	r1, r6
 8004e86:	4620      	mov	r0, r4
 8004e88:	f7ff ff36 	bl	8004cf8 <SPI_EndRxTxTransaction>
 8004e8c:	2800      	cmp	r0, #0
 8004e8e:	d15d      	bne.n	8004f4c <HAL_SPI_Transmit+0x16e>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e90:	68a3      	ldr	r3, [r4, #8]
 8004e92:	b933      	cbnz	r3, 8004ea2 <HAL_SPI_Transmit+0xc4>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e94:	9301      	str	r3, [sp, #4]
 8004e96:	6823      	ldr	r3, [r4, #0]
 8004e98:	68da      	ldr	r2, [r3, #12]
 8004e9a:	9201      	str	r2, [sp, #4]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	9301      	str	r3, [sp, #4]
 8004ea0:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ea2:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 8004ea4:	3000      	adds	r0, #0
 8004ea6:	bf18      	it	ne
 8004ea8:	2001      	movne	r0, #1
 8004eaa:	e011      	b.n	8004ed0 <HAL_SPI_Transmit+0xf2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004eac:	6822      	ldr	r2, [r4, #0]
 8004eae:	6893      	ldr	r3, [r2, #8]
 8004eb0:	0798      	lsls	r0, r3, #30
 8004eb2:	d505      	bpl.n	8004ec0 <HAL_SPI_Transmit+0xe2>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004eb4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004eb6:	f833 1b02 	ldrh.w	r1, [r3], #2
 8004eba:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ebc:	63a3      	str	r3, [r4, #56]	; 0x38
 8004ebe:	e7d9      	b.n	8004e74 <HAL_SPI_Transmit+0x96>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ec0:	f7fd fb3e 	bl	8002540 <HAL_GetTick>
 8004ec4:	1bc0      	subs	r0, r0, r7
 8004ec6:	42b0      	cmp	r0, r6
 8004ec8:	d3d8      	bcc.n	8004e7c <HAL_SPI_Transmit+0x9e>
 8004eca:	1c71      	adds	r1, r6, #1
 8004ecc:	d0d6      	beq.n	8004e7c <HAL_SPI_Transmit+0x9e>
          errorcode = HAL_TIMEOUT;
 8004ece:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8004edc:	b002      	add	sp, #8
 8004ede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ee2:	b113      	cbz	r3, 8004eea <HAL_SPI_Transmit+0x10c>
 8004ee4:	f1b8 0f01 	cmp.w	r8, #1
 8004ee8:	d113      	bne.n	8004f12 <HAL_SPI_Transmit+0x134>
      if (hspi->TxXferCount > 1U)
 8004eea:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d906      	bls.n	8004f00 <HAL_SPI_Transmit+0x122>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ef2:	f835 3b02 	ldrh.w	r3, [r5], #2
 8004ef6:	60c3      	str	r3, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ef8:	63a5      	str	r5, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004efa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004efc:	3b02      	subs	r3, #2
 8004efe:	e006      	b.n	8004f0e <HAL_SPI_Transmit+0x130>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f00:	782b      	ldrb	r3, [r5, #0]
 8004f02:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr ++;
 8004f04:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004f06:	3301      	adds	r3, #1
 8004f08:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8004f0a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8004f12:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d0b3      	beq.n	8004e82 <HAL_SPI_Transmit+0xa4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f1a:	6823      	ldr	r3, [r4, #0]
 8004f1c:	689a      	ldr	r2, [r3, #8]
 8004f1e:	0792      	lsls	r2, r2, #30
 8004f20:	d50c      	bpl.n	8004f3c <HAL_SPI_Transmit+0x15e>
        if (hspi->TxXferCount > 1U)
 8004f22:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8004f24:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004f26:	b292      	uxth	r2, r2
 8004f28:	2a01      	cmp	r2, #1
 8004f2a:	d904      	bls.n	8004f36 <HAL_SPI_Transmit+0x158>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f2c:	f830 2b02 	ldrh.w	r2, [r0], #2
 8004f30:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f32:	63a0      	str	r0, [r4, #56]	; 0x38
 8004f34:	e7e1      	b.n	8004efa <HAL_SPI_Transmit+0x11c>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f36:	7802      	ldrb	r2, [r0, #0]
 8004f38:	731a      	strb	r2, [r3, #12]
 8004f3a:	e7e3      	b.n	8004f04 <HAL_SPI_Transmit+0x126>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f3c:	f7fd fb00 	bl	8002540 <HAL_GetTick>
 8004f40:	1bc0      	subs	r0, r0, r7
 8004f42:	4286      	cmp	r6, r0
 8004f44:	d8e5      	bhi.n	8004f12 <HAL_SPI_Transmit+0x134>
 8004f46:	1c73      	adds	r3, r6, #1
 8004f48:	d0e3      	beq.n	8004f12 <HAL_SPI_Transmit+0x134>
 8004f4a:	e7c0      	b.n	8004ece <HAL_SPI_Transmit+0xf0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f4c:	2320      	movs	r3, #32
 8004f4e:	6623      	str	r3, [r4, #96]	; 0x60
 8004f50:	e79e      	b.n	8004e90 <HAL_SPI_Transmit+0xb2>
    errorcode = HAL_BUSY;
 8004f52:	2002      	movs	r0, #2
 8004f54:	e7bc      	b.n	8004ed0 <HAL_SPI_Transmit+0xf2>
  __HAL_LOCK(hspi);
 8004f56:	2002      	movs	r0, #2
 8004f58:	e7c0      	b.n	8004edc <HAL_SPI_Transmit+0xfe>

08004f5a <HAL_SPI_TransmitReceive>:
{
 8004f5a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f5e:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8004f60:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 8004f64:	9f08      	ldr	r7, [sp, #32]
  __HAL_LOCK(hspi);
 8004f66:	2b01      	cmp	r3, #1
{
 8004f68:	4604      	mov	r4, r0
 8004f6a:	460d      	mov	r5, r1
 8004f6c:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8004f6e:	f000 8115 	beq.w	800519c <HAL_SPI_TransmitReceive+0x242>
 8004f72:	2301      	movs	r3, #1
 8004f74:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8004f78:	f7fd fae2 	bl	8002540 <HAL_GetTick>
  tmp_state           = hspi->State;
 8004f7c:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tmp_mode            = hspi->Init.Mode;
 8004f80:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8004f82:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004f84:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8004f86:	4680      	mov	r8, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004f88:	d00a      	beq.n	8004fa0 <HAL_SPI_TransmitReceive+0x46>
 8004f8a:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8004f8e:	f040 8103 	bne.w	8005198 <HAL_SPI_TransmitReceive+0x23e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004f92:	68a0      	ldr	r0, [r4, #8]
 8004f94:	2800      	cmp	r0, #0
 8004f96:	f040 80ff 	bne.w	8005198 <HAL_SPI_TransmitReceive+0x23e>
 8004f9a:	2b04      	cmp	r3, #4
 8004f9c:	f040 80fc 	bne.w	8005198 <HAL_SPI_TransmitReceive+0x23e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004fa0:	2d00      	cmp	r5, #0
 8004fa2:	d049      	beq.n	8005038 <HAL_SPI_TransmitReceive+0xde>
 8004fa4:	f1b9 0f00 	cmp.w	r9, #0
 8004fa8:	d046      	beq.n	8005038 <HAL_SPI_TransmitReceive+0xde>
 8004faa:	2e00      	cmp	r6, #0
 8004fac:	d044      	beq.n	8005038 <HAL_SPI_TransmitReceive+0xde>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004fae:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004fb2:	68e2      	ldr	r2, [r4, #12]
 8004fb4:	6820      	ldr	r0, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004fb6:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004fba:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004fbc:	bf1c      	itt	ne
 8004fbe:	2305      	movne	r3, #5
 8004fc0:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	6623      	str	r3, [r4, #96]	; 0x60
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004fc8:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  hspi->RxXferCount = Size;
 8004fcc:	f8a4 6046 	strh.w	r6, [r4, #70]	; 0x46
  hspi->TxXferCount = Size;
 8004fd0:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004fd2:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004fd4:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxXferSize  = Size;
 8004fd6:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004fda:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004fdc:	87a6      	strh	r6, [r4, #60]	; 0x3c
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004fde:	6843      	ldr	r3, [r0, #4]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004fe0:	d801      	bhi.n	8004fe6 <HAL_SPI_TransmitReceive+0x8c>
 8004fe2:	2e01      	cmp	r6, #1
 8004fe4:	d92a      	bls.n	800503c <HAL_SPI_TransmitReceive+0xe2>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004fe6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004fea:	6043      	str	r3, [r0, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fec:	6803      	ldr	r3, [r0, #0]
 8004fee:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8004ff0:	bf5e      	ittt	pl
 8004ff2:	6803      	ldrpl	r3, [r0, #0]
 8004ff4:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8004ff8:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ffa:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 8004ffe:	d956      	bls.n	80050ae <HAL_SPI_TransmitReceive+0x154>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005000:	b109      	cbz	r1, 8005006 <HAL_SPI_TransmitReceive+0xac>
 8005002:	2e01      	cmp	r6, #1
 8005004:	d107      	bne.n	8005016 <HAL_SPI_TransmitReceive+0xbc>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005006:	f835 3b02 	ldrh.w	r3, [r5], #2
 800500a:	60c3      	str	r3, [r0, #12]
      hspi->TxXferCount--;
 800500c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800500e:	63a5      	str	r5, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8005010:	3b01      	subs	r3, #1
 8005012:	b29b      	uxth	r3, r3
 8005014:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8005016:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005018:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800501a:	b29b      	uxth	r3, r3
 800501c:	b98b      	cbnz	r3, 8005042 <HAL_SPI_TransmitReceive+0xe8>
 800501e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005022:	b29b      	uxth	r3, r3
 8005024:	b96b      	cbnz	r3, 8005042 <HAL_SPI_TransmitReceive+0xe8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005026:	4642      	mov	r2, r8
 8005028:	4639      	mov	r1, r7
 800502a:	4620      	mov	r0, r4
 800502c:	f7ff fe64 	bl	8004cf8 <SPI_EndRxTxTransaction>
 8005030:	2800      	cmp	r0, #0
 8005032:	d034      	beq.n	800509e <HAL_SPI_TransmitReceive+0x144>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005034:	2320      	movs	r3, #32
 8005036:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005038:	2001      	movs	r0, #1
 800503a:	e030      	b.n	800509e <HAL_SPI_TransmitReceive+0x144>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800503c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005040:	e7d3      	b.n	8004fea <HAL_SPI_TransmitReceive+0x90>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005042:	6822      	ldr	r2, [r4, #0]
 8005044:	6893      	ldr	r3, [r2, #8]
 8005046:	0799      	lsls	r1, r3, #30
 8005048:	d50d      	bpl.n	8005066 <HAL_SPI_TransmitReceive+0x10c>
 800504a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800504c:	b29b      	uxth	r3, r3
 800504e:	b153      	cbz	r3, 8005066 <HAL_SPI_TransmitReceive+0x10c>
 8005050:	b14d      	cbz	r5, 8005066 <HAL_SPI_TransmitReceive+0x10c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005052:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005054:	f833 1b02 	ldrh.w	r1, [r3], #2
 8005058:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800505a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800505c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800505e:	3b01      	subs	r3, #1
 8005060:	b29b      	uxth	r3, r3
 8005062:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8005064:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005066:	6893      	ldr	r3, [r2, #8]
 8005068:	07db      	lsls	r3, r3, #31
 800506a:	d50f      	bpl.n	800508c <HAL_SPI_TransmitReceive+0x132>
 800506c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005070:	b29b      	uxth	r3, r3
 8005072:	b15b      	cbz	r3, 800508c <HAL_SPI_TransmitReceive+0x132>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005074:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005076:	68d2      	ldr	r2, [r2, #12]
 8005078:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800507c:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800507e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005082:	3b01      	subs	r3, #1
 8005084:	b29b      	uxth	r3, r3
 8005086:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 800508a:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800508c:	f7fd fa58 	bl	8002540 <HAL_GetTick>
 8005090:	eba0 0008 	sub.w	r0, r0, r8
 8005094:	4287      	cmp	r7, r0
 8005096:	d8bf      	bhi.n	8005018 <HAL_SPI_TransmitReceive+0xbe>
 8005098:	1c7e      	adds	r6, r7, #1
 800509a:	d0bd      	beq.n	8005018 <HAL_SPI_TransmitReceive+0xbe>
        errorcode = HAL_TIMEOUT;
 800509c:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800509e:	2301      	movs	r3, #1
 80050a0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80050a4:	2300      	movs	r3, #0
 80050a6:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 80050aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050ae:	b109      	cbz	r1, 80050b4 <HAL_SPI_TransmitReceive+0x15a>
 80050b0:	2e01      	cmp	r6, #1
 80050b2:	d10b      	bne.n	80050cc <HAL_SPI_TransmitReceive+0x172>
      if (hspi->TxXferCount > 1U)
 80050b4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d951      	bls.n	8005160 <HAL_SPI_TransmitReceive+0x206>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050bc:	f835 3b02 	ldrh.w	r3, [r5], #2
 80050c0:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount -= 2U;
 80050c2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050c4:	63a5      	str	r5, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80050c6:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80050cc:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050ce:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	b923      	cbnz	r3, 80050de <HAL_SPI_TransmitReceive+0x184>
 80050d4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80050d8:	b29b      	uxth	r3, r3
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d0a3      	beq.n	8005026 <HAL_SPI_TransmitReceive+0xcc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050de:	6822      	ldr	r2, [r4, #0]
 80050e0:	6893      	ldr	r3, [r2, #8]
 80050e2:	0798      	lsls	r0, r3, #30
 80050e4:	d511      	bpl.n	800510a <HAL_SPI_TransmitReceive+0x1b0>
 80050e6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	b173      	cbz	r3, 800510a <HAL_SPI_TransmitReceive+0x1b0>
 80050ec:	b16d      	cbz	r5, 800510a <HAL_SPI_TransmitReceive+0x1b0>
        if (hspi->TxXferCount > 1U)
 80050ee:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80050f6:	d93b      	bls.n	8005170 <HAL_SPI_TransmitReceive+0x216>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050f8:	f833 1b02 	ldrh.w	r1, [r3], #2
 80050fc:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80050fe:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005100:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005102:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 8005104:	b29b      	uxth	r3, r3
 8005106:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8005108:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800510a:	6822      	ldr	r2, [r4, #0]
 800510c:	6893      	ldr	r3, [r2, #8]
 800510e:	07d9      	lsls	r1, r3, #31
 8005110:	d51d      	bpl.n	800514e <HAL_SPI_TransmitReceive+0x1f4>
 8005112:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005116:	b29b      	uxth	r3, r3
 8005118:	b1cb      	cbz	r3, 800514e <HAL_SPI_TransmitReceive+0x1f4>
        if (hspi->RxXferCount > 1U)
 800511a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800511e:	b29b      	uxth	r3, r3
 8005120:	2b01      	cmp	r3, #1
 8005122:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005124:	d92c      	bls.n	8005180 <HAL_SPI_TransmitReceive+0x226>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005126:	68d1      	ldr	r1, [r2, #12]
 8005128:	f823 1b02 	strh.w	r1, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800512c:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800512e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005132:	3b02      	subs	r3, #2
 8005134:	b29b      	uxth	r3, r3
 8005136:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800513a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800513e:	b29b      	uxth	r3, r3
 8005140:	2b01      	cmp	r3, #1
 8005142:	d803      	bhi.n	800514c <HAL_SPI_TransmitReceive+0x1f2>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005144:	6853      	ldr	r3, [r2, #4]
 8005146:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800514a:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 800514c:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800514e:	f7fd f9f7 	bl	8002540 <HAL_GetTick>
 8005152:	eba0 0008 	sub.w	r0, r0, r8
 8005156:	4287      	cmp	r7, r0
 8005158:	d8b9      	bhi.n	80050ce <HAL_SPI_TransmitReceive+0x174>
 800515a:	1c7b      	adds	r3, r7, #1
 800515c:	d0b7      	beq.n	80050ce <HAL_SPI_TransmitReceive+0x174>
 800515e:	e79d      	b.n	800509c <HAL_SPI_TransmitReceive+0x142>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005160:	782b      	ldrb	r3, [r5, #0]
 8005162:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr++;
 8005164:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005166:	3301      	adds	r3, #1
 8005168:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800516a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800516c:	3b01      	subs	r3, #1
 800516e:	e7ab      	b.n	80050c8 <HAL_SPI_TransmitReceive+0x16e>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8005174:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005176:	3301      	adds	r3, #1
 8005178:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800517a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800517c:	3b01      	subs	r3, #1
 800517e:	e7c1      	b.n	8005104 <HAL_SPI_TransmitReceive+0x1aa>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005180:	7b12      	ldrb	r2, [r2, #12]
 8005182:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005184:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005186:	3301      	adds	r3, #1
 8005188:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 800518a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800518e:	3b01      	subs	r3, #1
 8005190:	b29b      	uxth	r3, r3
 8005192:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8005196:	e7d9      	b.n	800514c <HAL_SPI_TransmitReceive+0x1f2>
    errorcode = HAL_BUSY;
 8005198:	2002      	movs	r0, #2
 800519a:	e780      	b.n	800509e <HAL_SPI_TransmitReceive+0x144>
  __HAL_LOCK(hspi);
 800519c:	2002      	movs	r0, #2
}
 800519e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

080051a4 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051a4:	6a03      	ldr	r3, [r0, #32]
 80051a6:	f023 0301 	bic.w	r3, r3, #1
 80051aa:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ac:	6a03      	ldr	r3, [r0, #32]
{
 80051ae:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051b0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051b2:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051b4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051b6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80051ba:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80051be:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051c0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80051c2:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80051c6:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051c8:	4d1b      	ldr	r5, [pc, #108]	; (8005238 <TIM_OC1_SetConfig+0x94>)
 80051ca:	42a8      	cmp	r0, r5
 80051cc:	d00f      	beq.n	80051ee <TIM_OC1_SetConfig+0x4a>
 80051ce:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80051d2:	42a8      	cmp	r0, r5
 80051d4:	d00b      	beq.n	80051ee <TIM_OC1_SetConfig+0x4a>
 80051d6:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80051da:	42a8      	cmp	r0, r5
 80051dc:	d007      	beq.n	80051ee <TIM_OC1_SetConfig+0x4a>
 80051de:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80051e2:	42a8      	cmp	r0, r5
 80051e4:	d003      	beq.n	80051ee <TIM_OC1_SetConfig+0x4a>
 80051e6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80051ea:	42a8      	cmp	r0, r5
 80051ec:	d11e      	bne.n	800522c <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80051ee:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80051f0:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80051f4:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051f6:	4d10      	ldr	r5, [pc, #64]	; (8005238 <TIM_OC1_SetConfig+0x94>)
 80051f8:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80051fa:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051fe:	d00f      	beq.n	8005220 <TIM_OC1_SetConfig+0x7c>
 8005200:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005204:	42a8      	cmp	r0, r5
 8005206:	d00b      	beq.n	8005220 <TIM_OC1_SetConfig+0x7c>
 8005208:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800520c:	42a8      	cmp	r0, r5
 800520e:	d007      	beq.n	8005220 <TIM_OC1_SetConfig+0x7c>
 8005210:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005214:	42a8      	cmp	r0, r5
 8005216:	d003      	beq.n	8005220 <TIM_OC1_SetConfig+0x7c>
 8005218:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800521c:	42a8      	cmp	r0, r5
 800521e:	d105      	bne.n	800522c <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005220:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005224:	698e      	ldr	r6, [r1, #24]
 8005226:	694c      	ldr	r4, [r1, #20]
 8005228:	4334      	orrs	r4, r6
 800522a:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800522c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800522e:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005230:	684a      	ldr	r2, [r1, #4]
 8005232:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005234:	6203      	str	r3, [r0, #32]
 8005236:	bd70      	pop	{r4, r5, r6, pc}
 8005238:	40012c00 	.word	0x40012c00

0800523c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800523c:	6a03      	ldr	r3, [r0, #32]
 800523e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005242:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005244:	6a03      	ldr	r3, [r0, #32]
{
 8005246:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005248:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800524a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800524c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800524e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005252:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005256:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005258:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800525a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800525e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005262:	4d16      	ldr	r5, [pc, #88]	; (80052bc <TIM_OC3_SetConfig+0x80>)
 8005264:	42a8      	cmp	r0, r5
 8005266:	d003      	beq.n	8005270 <TIM_OC3_SetConfig+0x34>
 8005268:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800526c:	42a8      	cmp	r0, r5
 800526e:	d10d      	bne.n	800528c <TIM_OC3_SetConfig+0x50>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005270:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8005272:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005276:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800527a:	4d10      	ldr	r5, [pc, #64]	; (80052bc <TIM_OC3_SetConfig+0x80>)
 800527c:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 800527e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005282:	d00e      	beq.n	80052a2 <TIM_OC3_SetConfig+0x66>
 8005284:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005288:	42a8      	cmp	r0, r5
 800528a:	d00a      	beq.n	80052a2 <TIM_OC3_SetConfig+0x66>
 800528c:	4d0c      	ldr	r5, [pc, #48]	; (80052c0 <TIM_OC3_SetConfig+0x84>)
 800528e:	42a8      	cmp	r0, r5
 8005290:	d007      	beq.n	80052a2 <TIM_OC3_SetConfig+0x66>
 8005292:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005296:	42a8      	cmp	r0, r5
 8005298:	d003      	beq.n	80052a2 <TIM_OC3_SetConfig+0x66>
 800529a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800529e:	42a8      	cmp	r0, r5
 80052a0:	d106      	bne.n	80052b0 <TIM_OC3_SetConfig+0x74>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052a2:	f424 5540 	bic.w	r5, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052a6:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80052a8:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052aa:	4334      	orrs	r4, r6
 80052ac:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052b0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052b2:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052b4:	684a      	ldr	r2, [r1, #4]
 80052b6:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052b8:	6203      	str	r3, [r0, #32]
 80052ba:	bd70      	pop	{r4, r5, r6, pc}
 80052bc:	40012c00 	.word	0x40012c00
 80052c0:	40014000 	.word	0x40014000

080052c4 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052c4:	6a03      	ldr	r3, [r0, #32]
 80052c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052ca:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052cc:	6a03      	ldr	r3, [r0, #32]
{
 80052ce:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052d0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052d2:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052d4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052d6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80052da:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052de:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052e2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80052e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052e8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052ec:	4d0e      	ldr	r5, [pc, #56]	; (8005328 <TIM_OC4_SetConfig+0x64>)
 80052ee:	42a8      	cmp	r0, r5
 80052f0:	d00f      	beq.n	8005312 <TIM_OC4_SetConfig+0x4e>
 80052f2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80052f6:	42a8      	cmp	r0, r5
 80052f8:	d00b      	beq.n	8005312 <TIM_OC4_SetConfig+0x4e>
 80052fa:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80052fe:	42a8      	cmp	r0, r5
 8005300:	d007      	beq.n	8005312 <TIM_OC4_SetConfig+0x4e>
 8005302:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005306:	42a8      	cmp	r0, r5
 8005308:	d003      	beq.n	8005312 <TIM_OC4_SetConfig+0x4e>
 800530a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800530e:	42a8      	cmp	r0, r5
 8005310:	d104      	bne.n	800531c <TIM_OC4_SetConfig+0x58>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005312:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005314:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005318:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800531c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800531e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005320:	684a      	ldr	r2, [r1, #4]
 8005322:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005324:	6203      	str	r3, [r0, #32]
 8005326:	bd30      	pop	{r4, r5, pc}
 8005328:	40012c00 	.word	0x40012c00

0800532c <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800532c:	6a03      	ldr	r3, [r0, #32]
 800532e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005332:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005334:	6a03      	ldr	r3, [r0, #32]
{
 8005336:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005338:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800533a:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800533c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800533e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005342:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8005346:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005348:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 800534a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800534e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005352:	4d0f      	ldr	r5, [pc, #60]	; (8005390 <TIM_OC5_SetConfig+0x64>)
 8005354:	42a8      	cmp	r0, r5
 8005356:	d00f      	beq.n	8005378 <TIM_OC5_SetConfig+0x4c>
 8005358:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800535c:	42a8      	cmp	r0, r5
 800535e:	d00b      	beq.n	8005378 <TIM_OC5_SetConfig+0x4c>
 8005360:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005364:	42a8      	cmp	r0, r5
 8005366:	d007      	beq.n	8005378 <TIM_OC5_SetConfig+0x4c>
 8005368:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800536c:	42a8      	cmp	r0, r5
 800536e:	d003      	beq.n	8005378 <TIM_OC5_SetConfig+0x4c>
 8005370:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005374:	42a8      	cmp	r0, r5
 8005376:	d104      	bne.n	8005382 <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005378:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 800537a:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800537e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005382:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005384:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005386:	684a      	ldr	r2, [r1, #4]
 8005388:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800538a:	6203      	str	r3, [r0, #32]
 800538c:	bd30      	pop	{r4, r5, pc}
 800538e:	bf00      	nop
 8005390:	40012c00 	.word	0x40012c00

08005394 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005394:	6a03      	ldr	r3, [r0, #32]
 8005396:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800539a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800539c:	6a03      	ldr	r3, [r0, #32]
{
 800539e:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053a0:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80053a2:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053a4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80053a6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80053aa:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053ae:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80053b2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80053b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80053b8:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053bc:	4d0e      	ldr	r5, [pc, #56]	; (80053f8 <TIM_OC6_SetConfig+0x64>)
 80053be:	42a8      	cmp	r0, r5
 80053c0:	d00f      	beq.n	80053e2 <TIM_OC6_SetConfig+0x4e>
 80053c2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80053c6:	42a8      	cmp	r0, r5
 80053c8:	d00b      	beq.n	80053e2 <TIM_OC6_SetConfig+0x4e>
 80053ca:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80053ce:	42a8      	cmp	r0, r5
 80053d0:	d007      	beq.n	80053e2 <TIM_OC6_SetConfig+0x4e>
 80053d2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80053d6:	42a8      	cmp	r0, r5
 80053d8:	d003      	beq.n	80053e2 <TIM_OC6_SetConfig+0x4e>
 80053da:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80053de:	42a8      	cmp	r0, r5
 80053e0:	d104      	bne.n	80053ec <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80053e2:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 80053e4:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80053e8:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053ec:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80053ee:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80053f0:	684a      	ldr	r2, [r1, #4]
 80053f2:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053f4:	6203      	str	r3, [r0, #32]
 80053f6:	bd30      	pop	{r4, r5, pc}
 80053f8:	40012c00 	.word	0x40012c00

080053fc <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053fc:	6803      	ldr	r3, [r0, #0]
 80053fe:	68da      	ldr	r2, [r3, #12]
 8005400:	f042 0201 	orr.w	r2, r2, #1
 8005404:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005406:	6899      	ldr	r1, [r3, #8]
 8005408:	4a06      	ldr	r2, [pc, #24]	; (8005424 <HAL_TIM_Base_Start_IT+0x28>)
 800540a:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800540c:	2a06      	cmp	r2, #6
 800540e:	d006      	beq.n	800541e <HAL_TIM_Base_Start_IT+0x22>
 8005410:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    __HAL_TIM_ENABLE(htim);
 8005414:	bf1e      	ittt	ne
 8005416:	681a      	ldrne	r2, [r3, #0]
 8005418:	f042 0201 	orrne.w	r2, r2, #1
 800541c:	601a      	strne	r2, [r3, #0]
}
 800541e:	2000      	movs	r0, #0
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	00010007 	.word	0x00010007

08005428 <HAL_TIM_PWM_MspInit>:
 8005428:	4770      	bx	lr

0800542a <HAL_TIM_OC_DelayElapsedCallback>:
 800542a:	4770      	bx	lr

0800542c <HAL_TIM_IC_CaptureCallback>:
 800542c:	4770      	bx	lr

0800542e <HAL_TIM_PWM_PulseFinishedCallback>:
 800542e:	4770      	bx	lr

08005430 <HAL_TIM_TriggerCallback>:
 8005430:	4770      	bx	lr

08005432 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005432:	6803      	ldr	r3, [r0, #0]
 8005434:	691a      	ldr	r2, [r3, #16]
 8005436:	0791      	lsls	r1, r2, #30
{
 8005438:	b510      	push	{r4, lr}
 800543a:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800543c:	d50f      	bpl.n	800545e <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800543e:	68da      	ldr	r2, [r3, #12]
 8005440:	0792      	lsls	r2, r2, #30
 8005442:	d50c      	bpl.n	800545e <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005444:	f06f 0202 	mvn.w	r2, #2
 8005448:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800544a:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800544c:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800544e:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005450:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005452:	f000 8085 	beq.w	8005560 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8005456:	f7ff ffe9 	bl	800542c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800545a:	2300      	movs	r3, #0
 800545c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800545e:	6823      	ldr	r3, [r4, #0]
 8005460:	691a      	ldr	r2, [r3, #16]
 8005462:	0752      	lsls	r2, r2, #29
 8005464:	d510      	bpl.n	8005488 <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005466:	68da      	ldr	r2, [r3, #12]
 8005468:	0750      	lsls	r0, r2, #29
 800546a:	d50d      	bpl.n	8005488 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800546c:	f06f 0204 	mvn.w	r2, #4
 8005470:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005472:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005474:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005476:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800547a:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800547c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800547e:	d075      	beq.n	800556c <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8005480:	f7ff ffd4 	bl	800542c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005484:	2300      	movs	r3, #0
 8005486:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005488:	6823      	ldr	r3, [r4, #0]
 800548a:	691a      	ldr	r2, [r3, #16]
 800548c:	0711      	lsls	r1, r2, #28
 800548e:	d50f      	bpl.n	80054b0 <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005490:	68da      	ldr	r2, [r3, #12]
 8005492:	0712      	lsls	r2, r2, #28
 8005494:	d50c      	bpl.n	80054b0 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005496:	f06f 0208 	mvn.w	r2, #8
 800549a:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800549c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800549e:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054a0:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054a2:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80054a4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054a6:	d067      	beq.n	8005578 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80054a8:	f7ff ffc0 	bl	800542c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ac:	2300      	movs	r3, #0
 80054ae:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054b0:	6823      	ldr	r3, [r4, #0]
 80054b2:	691a      	ldr	r2, [r3, #16]
 80054b4:	06d0      	lsls	r0, r2, #27
 80054b6:	d510      	bpl.n	80054da <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054b8:	68da      	ldr	r2, [r3, #12]
 80054ba:	06d1      	lsls	r1, r2, #27
 80054bc:	d50d      	bpl.n	80054da <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054be:	f06f 0210 	mvn.w	r2, #16
 80054c2:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054c4:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054c6:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054c8:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054cc:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80054ce:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054d0:	d058      	beq.n	8005584 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 80054d2:	f7ff ffab 	bl	800542c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054d6:	2300      	movs	r3, #0
 80054d8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054da:	6823      	ldr	r3, [r4, #0]
 80054dc:	691a      	ldr	r2, [r3, #16]
 80054de:	07d2      	lsls	r2, r2, #31
 80054e0:	d508      	bpl.n	80054f4 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054e2:	68da      	ldr	r2, [r3, #12]
 80054e4:	07d0      	lsls	r0, r2, #31
 80054e6:	d505      	bpl.n	80054f4 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054e8:	f06f 0201 	mvn.w	r2, #1
 80054ec:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80054ee:	4620      	mov	r0, r4
 80054f0:	f7fc fba4 	bl	8001c3c <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054f4:	6823      	ldr	r3, [r4, #0]
 80054f6:	691a      	ldr	r2, [r3, #16]
 80054f8:	0611      	lsls	r1, r2, #24
 80054fa:	d508      	bpl.n	800550e <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054fc:	68da      	ldr	r2, [r3, #12]
 80054fe:	0612      	lsls	r2, r2, #24
 8005500:	d505      	bpl.n	800550e <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005502:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005506:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005508:	4620      	mov	r0, r4
 800550a:	f000 fab4 	bl	8005a76 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800550e:	6823      	ldr	r3, [r4, #0]
 8005510:	691a      	ldr	r2, [r3, #16]
 8005512:	05d0      	lsls	r0, r2, #23
 8005514:	d508      	bpl.n	8005528 <HAL_TIM_IRQHandler+0xf6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005516:	68da      	ldr	r2, [r3, #12]
 8005518:	0611      	lsls	r1, r2, #24
 800551a:	d505      	bpl.n	8005528 <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800551c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005520:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8005522:	4620      	mov	r0, r4
 8005524:	f000 faa8 	bl	8005a78 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005528:	6823      	ldr	r3, [r4, #0]
 800552a:	691a      	ldr	r2, [r3, #16]
 800552c:	0652      	lsls	r2, r2, #25
 800552e:	d508      	bpl.n	8005542 <HAL_TIM_IRQHandler+0x110>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005530:	68da      	ldr	r2, [r3, #12]
 8005532:	0650      	lsls	r0, r2, #25
 8005534:	d505      	bpl.n	8005542 <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005536:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800553a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800553c:	4620      	mov	r0, r4
 800553e:	f7ff ff77 	bl	8005430 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005542:	6823      	ldr	r3, [r4, #0]
 8005544:	691a      	ldr	r2, [r3, #16]
 8005546:	0691      	lsls	r1, r2, #26
 8005548:	d522      	bpl.n	8005590 <HAL_TIM_IRQHandler+0x15e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800554a:	68da      	ldr	r2, [r3, #12]
 800554c:	0692      	lsls	r2, r2, #26
 800554e:	d51f      	bpl.n	8005590 <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005550:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8005554:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005556:	611a      	str	r2, [r3, #16]
}
 8005558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800555c:	f000 ba8a 	b.w	8005a74 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005560:	f7ff ff63 	bl	800542a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005564:	4620      	mov	r0, r4
 8005566:	f7ff ff62 	bl	800542e <HAL_TIM_PWM_PulseFinishedCallback>
 800556a:	e776      	b.n	800545a <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800556c:	f7ff ff5d 	bl	800542a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005570:	4620      	mov	r0, r4
 8005572:	f7ff ff5c 	bl	800542e <HAL_TIM_PWM_PulseFinishedCallback>
 8005576:	e785      	b.n	8005484 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005578:	f7ff ff57 	bl	800542a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800557c:	4620      	mov	r0, r4
 800557e:	f7ff ff56 	bl	800542e <HAL_TIM_PWM_PulseFinishedCallback>
 8005582:	e793      	b.n	80054ac <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005584:	f7ff ff51 	bl	800542a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005588:	4620      	mov	r0, r4
 800558a:	f7ff ff50 	bl	800542e <HAL_TIM_PWM_PulseFinishedCallback>
 800558e:	e7a2      	b.n	80054d6 <HAL_TIM_IRQHandler+0xa4>
 8005590:	bd10      	pop	{r4, pc}
	...

08005594 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005594:	4a30      	ldr	r2, [pc, #192]	; (8005658 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8005596:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005598:	4290      	cmp	r0, r2
 800559a:	d012      	beq.n	80055c2 <TIM_Base_SetConfig+0x2e>
 800559c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80055a0:	d00f      	beq.n	80055c2 <TIM_Base_SetConfig+0x2e>
 80055a2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80055a6:	4290      	cmp	r0, r2
 80055a8:	d00b      	beq.n	80055c2 <TIM_Base_SetConfig+0x2e>
 80055aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055ae:	4290      	cmp	r0, r2
 80055b0:	d007      	beq.n	80055c2 <TIM_Base_SetConfig+0x2e>
 80055b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055b6:	4290      	cmp	r0, r2
 80055b8:	d003      	beq.n	80055c2 <TIM_Base_SetConfig+0x2e>
 80055ba:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80055be:	4290      	cmp	r0, r2
 80055c0:	d119      	bne.n	80055f6 <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 80055c2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80055c8:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055ca:	4a23      	ldr	r2, [pc, #140]	; (8005658 <TIM_Base_SetConfig+0xc4>)
 80055cc:	4290      	cmp	r0, r2
 80055ce:	d01d      	beq.n	800560c <TIM_Base_SetConfig+0x78>
 80055d0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80055d4:	d01a      	beq.n	800560c <TIM_Base_SetConfig+0x78>
 80055d6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80055da:	4290      	cmp	r0, r2
 80055dc:	d016      	beq.n	800560c <TIM_Base_SetConfig+0x78>
 80055de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055e2:	4290      	cmp	r0, r2
 80055e4:	d012      	beq.n	800560c <TIM_Base_SetConfig+0x78>
 80055e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055ea:	4290      	cmp	r0, r2
 80055ec:	d00e      	beq.n	800560c <TIM_Base_SetConfig+0x78>
 80055ee:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80055f2:	4290      	cmp	r0, r2
 80055f4:	d00a      	beq.n	800560c <TIM_Base_SetConfig+0x78>
 80055f6:	4a19      	ldr	r2, [pc, #100]	; (800565c <TIM_Base_SetConfig+0xc8>)
 80055f8:	4290      	cmp	r0, r2
 80055fa:	d007      	beq.n	800560c <TIM_Base_SetConfig+0x78>
 80055fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005600:	4290      	cmp	r0, r2
 8005602:	d003      	beq.n	800560c <TIM_Base_SetConfig+0x78>
 8005604:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005608:	4290      	cmp	r0, r2
 800560a:	d103      	bne.n	8005614 <TIM_Base_SetConfig+0x80>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800560c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800560e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005612:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005614:	694a      	ldr	r2, [r1, #20]
 8005616:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800561a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800561c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800561e:	688b      	ldr	r3, [r1, #8]
 8005620:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005622:	680b      	ldr	r3, [r1, #0]
 8005624:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005626:	4b0c      	ldr	r3, [pc, #48]	; (8005658 <TIM_Base_SetConfig+0xc4>)
 8005628:	4298      	cmp	r0, r3
 800562a:	d00f      	beq.n	800564c <TIM_Base_SetConfig+0xb8>
 800562c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005630:	4298      	cmp	r0, r3
 8005632:	d00b      	beq.n	800564c <TIM_Base_SetConfig+0xb8>
 8005634:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8005638:	4298      	cmp	r0, r3
 800563a:	d007      	beq.n	800564c <TIM_Base_SetConfig+0xb8>
 800563c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005640:	4298      	cmp	r0, r3
 8005642:	d003      	beq.n	800564c <TIM_Base_SetConfig+0xb8>
 8005644:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005648:	4298      	cmp	r0, r3
 800564a:	d101      	bne.n	8005650 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 800564c:	690b      	ldr	r3, [r1, #16]
 800564e:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8005650:	2301      	movs	r3, #1
 8005652:	6143      	str	r3, [r0, #20]
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop
 8005658:	40012c00 	.word	0x40012c00
 800565c:	40014000 	.word	0x40014000

08005660 <HAL_TIM_Base_Init>:
{
 8005660:	b510      	push	{r4, lr}
  if (htim == NULL)
 8005662:	4604      	mov	r4, r0
 8005664:	b1a0      	cbz	r0, 8005690 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005666:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800566a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800566e:	b91b      	cbnz	r3, 8005678 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8005670:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005674:	f7fc fcaa 	bl	8001fcc <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8005678:	2302      	movs	r3, #2
 800567a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800567e:	6820      	ldr	r0, [r4, #0]
 8005680:	1d21      	adds	r1, r4, #4
 8005682:	f7ff ff87 	bl	8005594 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8005686:	2301      	movs	r3, #1
 8005688:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800568c:	2000      	movs	r0, #0
 800568e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005690:	2001      	movs	r0, #1
}
 8005692:	bd10      	pop	{r4, pc}

08005694 <HAL_TIM_PWM_Init>:
{
 8005694:	b510      	push	{r4, lr}
  if (htim == NULL)
 8005696:	4604      	mov	r4, r0
 8005698:	b1a0      	cbz	r0, 80056c4 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800569a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800569e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80056a2:	b91b      	cbnz	r3, 80056ac <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80056a4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80056a8:	f7ff febe 	bl	8005428 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80056ac:	2302      	movs	r3, #2
 80056ae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056b2:	6820      	ldr	r0, [r4, #0]
 80056b4:	1d21      	adds	r1, r4, #4
 80056b6:	f7ff ff6d 	bl	8005594 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80056ba:	2301      	movs	r3, #1
 80056bc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80056c0:	2000      	movs	r0, #0
 80056c2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80056c4:	2001      	movs	r0, #1
}
 80056c6:	bd10      	pop	{r4, pc}

080056c8 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056c8:	6a03      	ldr	r3, [r0, #32]
 80056ca:	f023 0310 	bic.w	r3, r3, #16
 80056ce:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80056d0:	6a03      	ldr	r3, [r0, #32]
{
 80056d2:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 80056d4:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80056d6:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056d8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056da:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80056de:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056e2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056e6:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80056e8:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056ec:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80056f0:	4d16      	ldr	r5, [pc, #88]	; (800574c <TIM_OC2_SetConfig+0x84>)
 80056f2:	42a8      	cmp	r0, r5
 80056f4:	d003      	beq.n	80056fe <TIM_OC2_SetConfig+0x36>
 80056f6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80056fa:	42a8      	cmp	r0, r5
 80056fc:	d10d      	bne.n	800571a <TIM_OC2_SetConfig+0x52>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056fe:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8005700:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005704:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005708:	4d10      	ldr	r5, [pc, #64]	; (800574c <TIM_OC2_SetConfig+0x84>)
 800570a:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 800570c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005710:	d00e      	beq.n	8005730 <TIM_OC2_SetConfig+0x68>
 8005712:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005716:	42a8      	cmp	r0, r5
 8005718:	d00a      	beq.n	8005730 <TIM_OC2_SetConfig+0x68>
 800571a:	4d0d      	ldr	r5, [pc, #52]	; (8005750 <TIM_OC2_SetConfig+0x88>)
 800571c:	42a8      	cmp	r0, r5
 800571e:	d007      	beq.n	8005730 <TIM_OC2_SetConfig+0x68>
 8005720:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005724:	42a8      	cmp	r0, r5
 8005726:	d003      	beq.n	8005730 <TIM_OC2_SetConfig+0x68>
 8005728:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800572c:	42a8      	cmp	r0, r5
 800572e:	d106      	bne.n	800573e <TIM_OC2_SetConfig+0x76>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005730:	f424 6540 	bic.w	r5, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005734:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005736:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005738:	4334      	orrs	r4, r6
 800573a:	ea45 0484 	orr.w	r4, r5, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 800573e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005740:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005742:	684a      	ldr	r2, [r1, #4]
 8005744:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8005746:	6203      	str	r3, [r0, #32]
 8005748:	bd70      	pop	{r4, r5, r6, pc}
 800574a:	bf00      	nop
 800574c:	40012c00 	.word	0x40012c00
 8005750:	40014000 	.word	0x40014000

08005754 <HAL_TIM_PWM_ConfigChannel>:
{
 8005754:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8005756:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800575a:	2b01      	cmp	r3, #1
{
 800575c:	4604      	mov	r4, r0
 800575e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8005762:	d010      	beq.n	8005786 <HAL_TIM_PWM_ConfigChannel+0x32>
 8005764:	2301      	movs	r3, #1
  switch (Channel)
 8005766:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8005768:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800576c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 8005770:	d043      	beq.n	80057fa <HAL_TIM_PWM_ConfigChannel+0xa6>
 8005772:	d809      	bhi.n	8005788 <HAL_TIM_PWM_ConfigChannel+0x34>
 8005774:	b1fa      	cbz	r2, 80057b6 <HAL_TIM_PWM_ConfigChannel+0x62>
 8005776:	2a04      	cmp	r2, #4
 8005778:	d02e      	beq.n	80057d8 <HAL_TIM_PWM_ConfigChannel+0x84>
  htim->State = HAL_TIM_STATE_READY;
 800577a:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800577c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800577e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005782:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8005786:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8005788:	2a10      	cmp	r2, #16
 800578a:	d047      	beq.n	800581c <HAL_TIM_PWM_ConfigChannel+0xc8>
 800578c:	2a14      	cmp	r2, #20
 800578e:	d056      	beq.n	800583e <HAL_TIM_PWM_ConfigChannel+0xea>
 8005790:	2a0c      	cmp	r2, #12
 8005792:	d1f2      	bne.n	800577a <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005794:	6820      	ldr	r0, [r4, #0]
 8005796:	f7ff fd95 	bl	80052c4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800579a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800579c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800579e:	69da      	ldr	r2, [r3, #28]
 80057a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80057a6:	69da      	ldr	r2, [r3, #28]
 80057a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057ae:	69da      	ldr	r2, [r3, #28]
 80057b0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80057b4:	e030      	b.n	8005818 <HAL_TIM_PWM_ConfigChannel+0xc4>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057b6:	6820      	ldr	r0, [r4, #0]
 80057b8:	f7ff fcf4 	bl	80051a4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057bc:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80057be:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057c0:	699a      	ldr	r2, [r3, #24]
 80057c2:	f042 0208 	orr.w	r2, r2, #8
 80057c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057c8:	699a      	ldr	r2, [r3, #24]
 80057ca:	f022 0204 	bic.w	r2, r2, #4
 80057ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80057d0:	699a      	ldr	r2, [r3, #24]
 80057d2:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80057d4:	619a      	str	r2, [r3, #24]
      break;
 80057d6:	e7d0      	b.n	800577a <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80057d8:	6820      	ldr	r0, [r4, #0]
 80057da:	f7ff ff75 	bl	80056c8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80057de:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80057e0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80057e2:	699a      	ldr	r2, [r3, #24]
 80057e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057e8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80057ea:	699a      	ldr	r2, [r3, #24]
 80057ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057f0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80057f2:	699a      	ldr	r2, [r3, #24]
 80057f4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80057f8:	e7ec      	b.n	80057d4 <HAL_TIM_PWM_ConfigChannel+0x80>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80057fa:	6820      	ldr	r0, [r4, #0]
 80057fc:	f7ff fd1e 	bl	800523c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005800:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005802:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005804:	69da      	ldr	r2, [r3, #28]
 8005806:	f042 0208 	orr.w	r2, r2, #8
 800580a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800580c:	69da      	ldr	r2, [r3, #28]
 800580e:	f022 0204 	bic.w	r2, r2, #4
 8005812:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005814:	69da      	ldr	r2, [r3, #28]
 8005816:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005818:	61da      	str	r2, [r3, #28]
      break;
 800581a:	e7ae      	b.n	800577a <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800581c:	6820      	ldr	r0, [r4, #0]
 800581e:	f7ff fd85 	bl	800532c <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005822:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005824:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005826:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005828:	f042 0208 	orr.w	r2, r2, #8
 800582c:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800582e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005830:	f022 0204 	bic.w	r2, r2, #4
 8005834:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005836:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005838:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800583a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800583c:	e79d      	b.n	800577a <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800583e:	6820      	ldr	r0, [r4, #0]
 8005840:	f7ff fda8 	bl	8005394 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005844:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005846:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005848:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800584a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800584e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005850:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005852:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005856:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005858:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800585a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800585e:	e7ec      	b.n	800583a <HAL_TIM_PWM_ConfigChannel+0xe6>

08005860 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005860:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005862:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005864:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005866:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800586a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800586e:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005870:	6083      	str	r3, [r0, #8]
 8005872:	bd10      	pop	{r4, pc}

08005874 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8005874:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005878:	2b01      	cmp	r3, #1
{
 800587a:	b570      	push	{r4, r5, r6, lr}
 800587c:	4604      	mov	r4, r0
 800587e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8005882:	d017      	beq.n	80058b4 <HAL_TIM_ConfigClockSource+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 8005884:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8005888:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 800588a:	2301      	movs	r3, #1
 800588c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8005890:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005892:	4b41      	ldr	r3, [pc, #260]	; (8005998 <HAL_TIM_ConfigClockSource+0x124>)
 8005894:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8005896:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8005898:	680b      	ldr	r3, [r1, #0]
 800589a:	2b40      	cmp	r3, #64	; 0x40
 800589c:	d065      	beq.n	800596a <HAL_TIM_ConfigClockSource+0xf6>
 800589e:	d815      	bhi.n	80058cc <HAL_TIM_ConfigClockSource+0x58>
 80058a0:	2b10      	cmp	r3, #16
 80058a2:	d00c      	beq.n	80058be <HAL_TIM_ConfigClockSource+0x4a>
 80058a4:	d807      	bhi.n	80058b6 <HAL_TIM_ConfigClockSource+0x42>
 80058a6:	b153      	cbz	r3, 80058be <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_READY;
 80058a8:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80058aa:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80058ac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80058b0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80058b4:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80058b6:	2b20      	cmp	r3, #32
 80058b8:	d001      	beq.n	80058be <HAL_TIM_ConfigClockSource+0x4a>
 80058ba:	2b30      	cmp	r3, #48	; 0x30
 80058bc:	d1f4      	bne.n	80058a8 <HAL_TIM_ConfigClockSource+0x34>
  tmpsmcr = TIMx->SMCR;
 80058be:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058c0:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 80058c4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058c8:	4313      	orrs	r3, r2
 80058ca:	e01a      	b.n	8005902 <HAL_TIM_ConfigClockSource+0x8e>
  switch (sClockSourceConfig->ClockSource)
 80058cc:	2b60      	cmp	r3, #96	; 0x60
 80058ce:	d034      	beq.n	800593a <HAL_TIM_ConfigClockSource+0xc6>
 80058d0:	d819      	bhi.n	8005906 <HAL_TIM_ConfigClockSource+0x92>
 80058d2:	2b50      	cmp	r3, #80	; 0x50
 80058d4:	d1e8      	bne.n	80058a8 <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058d6:	684a      	ldr	r2, [r1, #4]
 80058d8:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80058da:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058dc:	6a05      	ldr	r5, [r0, #32]
 80058de:	f025 0501 	bic.w	r5, r5, #1
 80058e2:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058e4:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058e6:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058ee:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80058f2:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80058f4:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80058f6:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80058f8:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80058fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058fe:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8005902:	6083      	str	r3, [r0, #8]
 8005904:	e7d0      	b.n	80058a8 <HAL_TIM_ConfigClockSource+0x34>
  switch (sClockSourceConfig->ClockSource)
 8005906:	2b70      	cmp	r3, #112	; 0x70
 8005908:	d00c      	beq.n	8005924 <HAL_TIM_ConfigClockSource+0xb0>
 800590a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800590e:	d1cb      	bne.n	80058a8 <HAL_TIM_ConfigClockSource+0x34>
      TIM_ETR_SetConfig(htim->Instance,
 8005910:	68cb      	ldr	r3, [r1, #12]
 8005912:	684a      	ldr	r2, [r1, #4]
 8005914:	6889      	ldr	r1, [r1, #8]
 8005916:	f7ff ffa3 	bl	8005860 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800591a:	6822      	ldr	r2, [r4, #0]
 800591c:	6893      	ldr	r3, [r2, #8]
 800591e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005922:	e008      	b.n	8005936 <HAL_TIM_ConfigClockSource+0xc2>
      TIM_ETR_SetConfig(htim->Instance,
 8005924:	68cb      	ldr	r3, [r1, #12]
 8005926:	684a      	ldr	r2, [r1, #4]
 8005928:	6889      	ldr	r1, [r1, #8]
 800592a:	f7ff ff99 	bl	8005860 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800592e:	6822      	ldr	r2, [r4, #0]
 8005930:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005932:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005936:	6093      	str	r3, [r2, #8]
      break;
 8005938:	e7b6      	b.n	80058a8 <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800593a:	684d      	ldr	r5, [r1, #4]
 800593c:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800593e:	6a01      	ldr	r1, [r0, #32]
 8005940:	f021 0110 	bic.w	r1, r1, #16
 8005944:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005946:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8005948:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800594a:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800594e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8005952:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005956:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800595a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800595c:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800595e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005960:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005964:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8005968:	e7cb      	b.n	8005902 <HAL_TIM_ConfigClockSource+0x8e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800596a:	684a      	ldr	r2, [r1, #4]
 800596c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800596e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005970:	6a05      	ldr	r5, [r0, #32]
 8005972:	f025 0501 	bic.w	r5, r5, #1
 8005976:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005978:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800597a:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800597e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005982:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8005986:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8005988:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800598a:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800598c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800598e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005992:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8005996:	e7b4      	b.n	8005902 <HAL_TIM_ConfigClockSource+0x8e>
 8005998:	fffe0088 	.word	0xfffe0088

0800599c <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800599c:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800599e:	f001 011f 	and.w	r1, r1, #31
{
 80059a2:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80059a4:	2401      	movs	r4, #1
 80059a6:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80059a8:	ea23 0304 	bic.w	r3, r3, r4
 80059ac:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80059ae:	6a03      	ldr	r3, [r0, #32]
 80059b0:	408a      	lsls	r2, r1
 80059b2:	431a      	orrs	r2, r3
 80059b4:	6202      	str	r2, [r0, #32]
 80059b6:	bd10      	pop	{r4, pc}

080059b8 <HAL_TIM_PWM_Start>:
{
 80059b8:	b510      	push	{r4, lr}
 80059ba:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059bc:	2201      	movs	r2, #1
 80059be:	6800      	ldr	r0, [r0, #0]
 80059c0:	f7ff ffec 	bl	800599c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80059c4:	6823      	ldr	r3, [r4, #0]
 80059c6:	4a13      	ldr	r2, [pc, #76]	; (8005a14 <HAL_TIM_PWM_Start+0x5c>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d01d      	beq.n	8005a08 <HAL_TIM_PWM_Start+0x50>
 80059cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d019      	beq.n	8005a08 <HAL_TIM_PWM_Start+0x50>
 80059d4:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80059d8:	4293      	cmp	r3, r2
 80059da:	d015      	beq.n	8005a08 <HAL_TIM_PWM_Start+0x50>
 80059dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d011      	beq.n	8005a08 <HAL_TIM_PWM_Start+0x50>
 80059e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d00d      	beq.n	8005a08 <HAL_TIM_PWM_Start+0x50>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059ec:	6899      	ldr	r1, [r3, #8]
 80059ee:	4a0a      	ldr	r2, [pc, #40]	; (8005a18 <HAL_TIM_PWM_Start+0x60>)
 80059f0:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059f2:	2a06      	cmp	r2, #6
 80059f4:	d006      	beq.n	8005a04 <HAL_TIM_PWM_Start+0x4c>
 80059f6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80059fa:	d003      	beq.n	8005a04 <HAL_TIM_PWM_Start+0x4c>
    __HAL_TIM_ENABLE(htim);
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	f042 0201 	orr.w	r2, r2, #1
 8005a02:	601a      	str	r2, [r3, #0]
}
 8005a04:	2000      	movs	r0, #0
 8005a06:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 8005a08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a0e:	645a      	str	r2, [r3, #68]	; 0x44
 8005a10:	e7ec      	b.n	80059ec <HAL_TIM_PWM_Start+0x34>
 8005a12:	bf00      	nop
 8005a14:	40012c00 	.word	0x40012c00
 8005a18:	00010007 	.word	0x00010007

08005a1c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a1c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005a20:	2b01      	cmp	r3, #1
{
 8005a22:	b530      	push	{r4, r5, lr}
 8005a24:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8005a28:	d01f      	beq.n	8005a6a <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a2a:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a2c:	4d10      	ldr	r5, [pc, #64]	; (8005a70 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005a2e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a32:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8005a34:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8005a36:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a38:	d003      	beq.n	8005a42 <HAL_TIMEx_MasterConfigSynchronization+0x26>
 8005a3a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005a3e:	42aa      	cmp	r2, r5
 8005a40:	d103      	bne.n	8005a4a <HAL_TIMEx_MasterConfigSynchronization+0x2e>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a42:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a44:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a48:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a4a:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a4c:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a52:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005a54:	f024 0480 	bic.w	r4, r4, #128	; 0x80

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a58:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a5a:	4321      	orrs	r1, r4

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a5c:	2301      	movs	r3, #1
  htim->Instance->SMCR = tmpsmcr;
 8005a5e:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8005a60:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a64:	2300      	movs	r3, #0
 8005a66:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8005a6a:	4618      	mov	r0, r3

  return HAL_OK;
}
 8005a6c:	bd30      	pop	{r4, r5, pc}
 8005a6e:	bf00      	nop
 8005a70:	40012c00 	.word	0x40012c00

08005a74 <HAL_TIMEx_CommutCallback>:
 8005a74:	4770      	bx	lr

08005a76 <HAL_TIMEx_BreakCallback>:
 8005a76:	4770      	bx	lr

08005a78 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a78:	4770      	bx	lr
	...

08005a7c <UART_SetConfig>:
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a7c:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a7e:	69c1      	ldr	r1, [r0, #28]
{
 8005a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a82:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a84:	6883      	ldr	r3, [r0, #8]
 8005a86:	6900      	ldr	r0, [r0, #16]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a88:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a8a:	4303      	orrs	r3, r0
 8005a8c:	6960      	ldr	r0, [r4, #20]
 8005a8e:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a90:	48ba      	ldr	r0, [pc, #744]	; (8005d7c <UART_SetConfig+0x300>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a92:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a94:	4028      	ands	r0, r5
 8005a96:	4303      	orrs	r3, r0
 8005a98:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a9a:	6853      	ldr	r3, [r2, #4]
 8005a9c:	68e0      	ldr	r0, [r4, #12]
 8005a9e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005aa2:	4303      	orrs	r3, r0
 8005aa4:	6053      	str	r3, [r2, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005aa6:	4bb6      	ldr	r3, [pc, #728]	; (8005d80 <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005aa8:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005aaa:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005aac:	bf1c      	itt	ne
 8005aae:	6a23      	ldrne	r3, [r4, #32]
 8005ab0:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ab2:	6893      	ldr	r3, [r2, #8]
 8005ab4:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005ab8:	4303      	orrs	r3, r0
 8005aba:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005abc:	4bb1      	ldr	r3, [pc, #708]	; (8005d84 <UART_SetConfig+0x308>)
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d119      	bne.n	8005af6 <UART_SetConfig+0x7a>
 8005ac2:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8005ac6:	4ab0      	ldr	r2, [pc, #704]	; (8005d88 <UART_SetConfig+0x30c>)
 8005ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005acc:	f003 0303 	and.w	r3, r3, #3
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ad0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005ad4:	5cd3      	ldrb	r3, [r2, r3]
 8005ad6:	f040 8138 	bne.w	8005d4a <UART_SetConfig+0x2ce>
  {
    switch (clocksource)
 8005ada:	2b08      	cmp	r3, #8
 8005adc:	f200 808f 	bhi.w	8005bfe <UART_SetConfig+0x182>
 8005ae0:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005ae4:	00ca011a 	.word	0x00ca011a
 8005ae8:	008d00f9 	.word	0x008d00f9
 8005aec:	008d0114 	.word	0x008d0114
 8005af0:	008d008d 	.word	0x008d008d
 8005af4:	0036      	.short	0x0036
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005af6:	4ba5      	ldr	r3, [pc, #660]	; (8005d8c <UART_SetConfig+0x310>)
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d107      	bne.n	8005b0c <UART_SetConfig+0x90>
 8005afc:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8005b00:	4aa3      	ldr	r2, [pc, #652]	; (8005d90 <UART_SetConfig+0x314>)
 8005b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b06:	f003 030c 	and.w	r3, r3, #12
 8005b0a:	e7e1      	b.n	8005ad0 <UART_SetConfig+0x54>
 8005b0c:	4ba1      	ldr	r3, [pc, #644]	; (8005d94 <UART_SetConfig+0x318>)
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d123      	bne.n	8005b5a <UART_SetConfig+0xde>
 8005b12:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8005b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b1a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005b1e:	2b10      	cmp	r3, #16
 8005b20:	f000 80f1 	beq.w	8005d06 <UART_SetConfig+0x28a>
 8005b24:	d80b      	bhi.n	8005b3e <UART_SetConfig+0xc2>
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	f000 80f3 	beq.w	8005d12 <UART_SetConfig+0x296>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b2c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005b30:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8005b34:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b38:	f000 80f8 	beq.w	8005d2c <UART_SetConfig+0x2b0>
 8005b3c:	e0a8      	b.n	8005c90 <UART_SetConfig+0x214>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b3e:	2b20      	cmp	r3, #32
 8005b40:	f000 80c6 	beq.w	8005cd0 <UART_SetConfig+0x254>
 8005b44:	2b30      	cmp	r3, #48	; 0x30
 8005b46:	d1f1      	bne.n	8005b2c <UART_SetConfig+0xb0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b48:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005b4c:	f040 80b8 	bne.w	8005cc0 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005b50:	6860      	ldr	r0, [r4, #4]
 8005b52:	0843      	lsrs	r3, r0, #1
 8005b54:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8005b58:	e0c3      	b.n	8005ce2 <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b5a:	4b8f      	ldr	r3, [pc, #572]	; (8005d98 <UART_SetConfig+0x31c>)
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d11e      	bne.n	8005b9e <UART_SetConfig+0x122>
 8005b60:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8005b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b68:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005b6c:	2b40      	cmp	r3, #64	; 0x40
 8005b6e:	f000 80bb 	beq.w	8005ce8 <UART_SetConfig+0x26c>
 8005b72:	d80a      	bhi.n	8005b8a <UART_SetConfig+0x10e>
 8005b74:	b97b      	cbnz	r3, 8005b96 <UART_SetConfig+0x11a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b76:	4b82      	ldr	r3, [pc, #520]	; (8005d80 <UART_SetConfig+0x304>)
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	f040 80ca 	bne.w	8005d12 <UART_SetConfig+0x296>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8005b7e:	f7fe fbd3 	bl	8004328 <HAL_RCC_GetPCLK1Freq>
        break;
 8005b82:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 8005b84:	bbb0      	cbnz	r0, 8005bf4 <UART_SetConfig+0x178>
 8005b86:	4602      	mov	r2, r0
 8005b88:	e03a      	b.n	8005c00 <UART_SetConfig+0x184>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b8a:	2b80      	cmp	r3, #128	; 0x80
 8005b8c:	f000 809d 	beq.w	8005cca <UART_SetConfig+0x24e>
 8005b90:	2bc0      	cmp	r3, #192	; 0xc0
 8005b92:	f000 80b0 	beq.w	8005cf6 <UART_SetConfig+0x27a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b96:	4b7a      	ldr	r3, [pc, #488]	; (8005d80 <UART_SetConfig+0x304>)
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d1c7      	bne.n	8005b2c <UART_SetConfig+0xb0>
 8005b9c:	e02f      	b.n	8005bfe <UART_SetConfig+0x182>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b9e:	4b7f      	ldr	r3, [pc, #508]	; (8005d9c <UART_SetConfig+0x320>)
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d111      	bne.n	8005bc8 <UART_SetConfig+0x14c>
 8005ba4:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8005ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bb4:	f000 8098 	beq.w	8005ce8 <UART_SetConfig+0x26c>
 8005bb8:	d9dc      	bls.n	8005b74 <UART_SetConfig+0xf8>
 8005bba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bbe:	f000 8084 	beq.w	8005cca <UART_SetConfig+0x24e>
 8005bc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bc6:	e7e4      	b.n	8005b92 <UART_SetConfig+0x116>
 8005bc8:	4b6d      	ldr	r3, [pc, #436]	; (8005d80 <UART_SetConfig+0x304>)
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d1ae      	bne.n	8005b2c <UART_SetConfig+0xb0>
 8005bce:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8005bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bd6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005bda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bde:	f000 8083 	beq.w	8005ce8 <UART_SetConfig+0x26c>
 8005be2:	d9c7      	bls.n	8005b74 <UART_SetConfig+0xf8>
 8005be4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005be8:	d06f      	beq.n	8005cca <UART_SetConfig+0x24e>
 8005bea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005bee:	e7d0      	b.n	8005b92 <UART_SetConfig+0x116>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8005bf0:	486b      	ldr	r0, [pc, #428]	; (8005da0 <UART_SetConfig+0x324>)
  if (UART_INSTANCE_LOWPOWER(huart))
 8005bf2:	2302      	movs	r3, #2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005bf4:	6862      	ldr	r2, [r4, #4]
 8005bf6:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8005bfa:	4281      	cmp	r1, r0
 8005bfc:	d905      	bls.n	8005c0a <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 8005bfe:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c00:	2300      	movs	r3, #0
 8005c02:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8005c04:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8005c06:	4610      	mov	r0, r2
 8005c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c0a:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8005c0e:	d8f6      	bhi.n	8005bfe <UART_SetConfig+0x182>
        switch (clocksource)
 8005c10:	2b08      	cmp	r3, #8
 8005c12:	d82e      	bhi.n	8005c72 <UART_SetConfig+0x1f6>
 8005c14:	e8df f003 	tbb	[pc, r3]
 8005c18:	2d1c2d05 	.word	0x2d1c2d05
 8005c1c:	2d2d2d24 	.word	0x2d2d2d24
 8005c20:	27          	.byte	0x27
 8005c21:	00          	.byte	0x00
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005c22:	f7fe fb81 	bl	8004328 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005c26:	6862      	ldr	r2, [r4, #4]
 8005c28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005c2c:	0856      	lsrs	r6, r2, #1
 8005c2e:	2700      	movs	r7, #0
 8005c30:	fbe1 6700 	umlal	r6, r7, r1, r0
 8005c34:	2300      	movs	r3, #0
 8005c36:	4630      	mov	r0, r6
 8005c38:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8005c3a:	f7fa ffb1 	bl	8000ba0 <__aeabi_uldivmod>
            break;
 8005c3e:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c40:	4b58      	ldr	r3, [pc, #352]	; (8005da4 <UART_SetConfig+0x328>)
 8005c42:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8005c46:	4299      	cmp	r1, r3
 8005c48:	d8d9      	bhi.n	8005bfe <UART_SetConfig+0x182>
          huart->Instance->BRR = usartdiv;
 8005c4a:	6823      	ldr	r3, [r4, #0]
 8005c4c:	60d8      	str	r0, [r3, #12]
 8005c4e:	e7d7      	b.n	8005c00 <UART_SetConfig+0x184>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8005c50:	4855      	ldr	r0, [pc, #340]	; (8005da8 <UART_SetConfig+0x32c>)
 8005c52:	0855      	lsrs	r5, r2, #1
 8005c54:	2300      	movs	r3, #0
 8005c56:	2100      	movs	r1, #0
 8005c58:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8005c5a:	f141 0100 	adc.w	r1, r1, #0
 8005c5e:	e7ec      	b.n	8005c3a <UART_SetConfig+0x1be>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005c60:	f7fe f816 	bl	8003c90 <HAL_RCC_GetSysClockFreq>
 8005c64:	e7df      	b.n	8005c26 <UART_SetConfig+0x1aa>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8005c66:	0850      	lsrs	r0, r2, #1
 8005c68:	2100      	movs	r1, #0
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8005c70:	e7f3      	b.n	8005c5a <UART_SetConfig+0x1de>
            ret = HAL_ERROR;
 8005c72:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8005c74:	2000      	movs	r0, #0
 8005c76:	e7e3      	b.n	8005c40 <UART_SetConfig+0x1c4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005c78:	f7fe fb68 	bl	800434c <HAL_RCC_GetPCLK2Freq>
 8005c7c:	e04e      	b.n	8005d1c <UART_SetConfig+0x2a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005c7e:	f7fe fb53 	bl	8004328 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005c82:	6862      	ldr	r2, [r4, #4]
 8005c84:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8005c88:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c8c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c8e:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c90:	f1a3 0010 	sub.w	r0, r3, #16
 8005c94:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8005c98:	4288      	cmp	r0, r1
 8005c9a:	d8b0      	bhi.n	8005bfe <UART_SetConfig+0x182>
      huart->Instance->BRR = usartdiv;
 8005c9c:	6821      	ldr	r1, [r4, #0]
 8005c9e:	60cb      	str	r3, [r1, #12]
 8005ca0:	e7ae      	b.n	8005c00 <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005ca2:	f7fe fb53 	bl	800434c <HAL_RCC_GetPCLK2Freq>
 8005ca6:	e7ec      	b.n	8005c82 <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005ca8:	6860      	ldr	r0, [r4, #4]
 8005caa:	0843      	lsrs	r3, r0, #1
 8005cac:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8005cb0:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005cb4:	fbb3 f3f0 	udiv	r3, r3, r0
 8005cb8:	e7e8      	b.n	8005c8c <UART_SetConfig+0x210>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005cba:	f7fd ffe9 	bl	8003c90 <HAL_RCC_GetSysClockFreq>
 8005cbe:	e7e0      	b.n	8005c82 <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005cc0:	6860      	ldr	r0, [r4, #4]
 8005cc2:	0843      	lsrs	r3, r0, #1
 8005cc4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005cc8:	e7f4      	b.n	8005cb4 <UART_SetConfig+0x238>
  if (UART_INSTANCE_LOWPOWER(huart))
 8005cca:	4b2d      	ldr	r3, [pc, #180]	; (8005d80 <UART_SetConfig+0x304>)
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d08f      	beq.n	8005bf0 <UART_SetConfig+0x174>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cd0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005cd4:	d1e8      	bne.n	8005ca8 <UART_SetConfig+0x22c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005cd6:	6860      	ldr	r0, [r4, #4]
 8005cd8:	0843      	lsrs	r3, r0, #1
 8005cda:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8005cde:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005ce2:	fbb3 f3f0 	udiv	r3, r3, r0
 8005ce6:	e01f      	b.n	8005d28 <UART_SetConfig+0x2ac>
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ce8:	4b25      	ldr	r3, [pc, #148]	; (8005d80 <UART_SetConfig+0x304>)
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d10b      	bne.n	8005d06 <UART_SetConfig+0x28a>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8005cee:	f7fd ffcf 	bl	8003c90 <HAL_RCC_GetSysClockFreq>
        break;
 8005cf2:	2304      	movs	r3, #4
 8005cf4:	e746      	b.n	8005b84 <UART_SetConfig+0x108>
  if (UART_INSTANCE_LOWPOWER(huart))
 8005cf6:	4b22      	ldr	r3, [pc, #136]	; (8005d80 <UART_SetConfig+0x304>)
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	f47f af25 	bne.w	8005b48 <UART_SetConfig+0xcc>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8005cfe:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d02:	2308      	movs	r3, #8
 8005d04:	e776      	b.n	8005bf4 <UART_SetConfig+0x178>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d06:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005d0a:	d1d6      	bne.n	8005cba <UART_SetConfig+0x23e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005d0c:	f7fd ffc0 	bl	8003c90 <HAL_RCC_GetSysClockFreq>
 8005d10:	e004      	b.n	8005d1c <UART_SetConfig+0x2a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d12:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005d16:	d1b2      	bne.n	8005c7e <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005d18:	f7fe fb06 	bl	8004328 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005d1c:	6861      	ldr	r1, [r4, #4]
 8005d1e:	084a      	lsrs	r2, r1, #1
 8005d20:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8005d24:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d28:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d2a:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d2c:	f1a3 0010 	sub.w	r0, r3, #16
 8005d30:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8005d34:	4288      	cmp	r0, r1
 8005d36:	f63f af62 	bhi.w	8005bfe <UART_SetConfig+0x182>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d3a:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8005d3e:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d40:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8005d44:	430b      	orrs	r3, r1
 8005d46:	60c3      	str	r3, [r0, #12]
 8005d48:	e75a      	b.n	8005c00 <UART_SetConfig+0x184>
    switch (clocksource)
 8005d4a:	2b08      	cmp	r3, #8
 8005d4c:	f63f af57 	bhi.w	8005bfe <UART_SetConfig+0x182>
 8005d50:	a201      	add	r2, pc, #4	; (adr r2, 8005d58 <UART_SetConfig+0x2dc>)
 8005d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d56:	bf00      	nop
 8005d58:	08005c7f 	.word	0x08005c7f
 8005d5c:	08005ca3 	.word	0x08005ca3
 8005d60:	08005ca9 	.word	0x08005ca9
 8005d64:	08005bff 	.word	0x08005bff
 8005d68:	08005cbb 	.word	0x08005cbb
 8005d6c:	08005bff 	.word	0x08005bff
 8005d70:	08005bff 	.word	0x08005bff
 8005d74:	08005bff 	.word	0x08005bff
 8005d78:	08005cc1 	.word	0x08005cc1
 8005d7c:	efff69f3 	.word	0xefff69f3
 8005d80:	40008000 	.word	0x40008000
 8005d84:	40013800 	.word	0x40013800
 8005d88:	0801cf4f 	.word	0x0801cf4f
 8005d8c:	40004400 	.word	0x40004400
 8005d90:	0801cf53 	.word	0x0801cf53
 8005d94:	40004800 	.word	0x40004800
 8005d98:	40004c00 	.word	0x40004c00
 8005d9c:	40005000 	.word	0x40005000
 8005da0:	00f42400 	.word	0x00f42400
 8005da4:	000ffcff 	.word	0x000ffcff
 8005da8:	f4240000 	.word	0xf4240000

08005dac <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005dac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005dae:	07da      	lsls	r2, r3, #31
{
 8005db0:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005db2:	d506      	bpl.n	8005dc2 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005db4:	6801      	ldr	r1, [r0, #0]
 8005db6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8005db8:	684a      	ldr	r2, [r1, #4]
 8005dba:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005dbe:	4322      	orrs	r2, r4
 8005dc0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005dc2:	079c      	lsls	r4, r3, #30
 8005dc4:	d506      	bpl.n	8005dd4 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005dc6:	6801      	ldr	r1, [r0, #0]
 8005dc8:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8005dca:	684a      	ldr	r2, [r1, #4]
 8005dcc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005dd0:	4322      	orrs	r2, r4
 8005dd2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005dd4:	0759      	lsls	r1, r3, #29
 8005dd6:	d506      	bpl.n	8005de6 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005dd8:	6801      	ldr	r1, [r0, #0]
 8005dda:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8005ddc:	684a      	ldr	r2, [r1, #4]
 8005dde:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005de2:	4322      	orrs	r2, r4
 8005de4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005de6:	071a      	lsls	r2, r3, #28
 8005de8:	d506      	bpl.n	8005df8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005dea:	6801      	ldr	r1, [r0, #0]
 8005dec:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005dee:	684a      	ldr	r2, [r1, #4]
 8005df0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005df4:	4322      	orrs	r2, r4
 8005df6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005df8:	06dc      	lsls	r4, r3, #27
 8005dfa:	d506      	bpl.n	8005e0a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005dfc:	6801      	ldr	r1, [r0, #0]
 8005dfe:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8005e00:	688a      	ldr	r2, [r1, #8]
 8005e02:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005e06:	4322      	orrs	r2, r4
 8005e08:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e0a:	0699      	lsls	r1, r3, #26
 8005e0c:	d506      	bpl.n	8005e1c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e0e:	6801      	ldr	r1, [r0, #0]
 8005e10:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8005e12:	688a      	ldr	r2, [r1, #8]
 8005e14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e18:	4322      	orrs	r2, r4
 8005e1a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e1c:	065a      	lsls	r2, r3, #25
 8005e1e:	d50f      	bpl.n	8005e40 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e20:	6801      	ldr	r1, [r0, #0]
 8005e22:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8005e24:	684a      	ldr	r2, [r1, #4]
 8005e26:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8005e2a:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e2c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e30:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e32:	d105      	bne.n	8005e40 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e34:	684a      	ldr	r2, [r1, #4]
 8005e36:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8005e38:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8005e3c:	4322      	orrs	r2, r4
 8005e3e:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e40:	061b      	lsls	r3, r3, #24
 8005e42:	d506      	bpl.n	8005e52 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e44:	6802      	ldr	r2, [r0, #0]
 8005e46:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005e48:	6853      	ldr	r3, [r2, #4]
 8005e4a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005e4e:	430b      	orrs	r3, r1
 8005e50:	6053      	str	r3, [r2, #4]
 8005e52:	bd10      	pop	{r4, pc}

08005e54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e58:	9d06      	ldr	r5, [sp, #24]
 8005e5a:	4604      	mov	r4, r0
 8005e5c:	460f      	mov	r7, r1
 8005e5e:	4616      	mov	r6, r2
 8005e60:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e62:	6821      	ldr	r1, [r4, #0]
 8005e64:	69ca      	ldr	r2, [r1, #28]
 8005e66:	ea37 0302 	bics.w	r3, r7, r2
 8005e6a:	bf0c      	ite	eq
 8005e6c:	2201      	moveq	r2, #1
 8005e6e:	2200      	movne	r2, #0
 8005e70:	42b2      	cmp	r2, r6
 8005e72:	d002      	beq.n	8005e7a <UART_WaitOnFlagUntilTimeout+0x26>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8005e74:	2000      	movs	r0, #0
}
 8005e76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8005e7a:	1c6b      	adds	r3, r5, #1
 8005e7c:	d0f2      	beq.n	8005e64 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e7e:	f7fc fb5f 	bl	8002540 <HAL_GetTick>
 8005e82:	eba0 0008 	sub.w	r0, r0, r8
 8005e86:	4285      	cmp	r5, r0
 8005e88:	d301      	bcc.n	8005e8e <UART_WaitOnFlagUntilTimeout+0x3a>
 8005e8a:	2d00      	cmp	r5, #0
 8005e8c:	d1e9      	bne.n	8005e62 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e8e:	6823      	ldr	r3, [r4, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005e96:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e98:	689a      	ldr	r2, [r3, #8]
 8005e9a:	f022 0201 	bic.w	r2, r2, #1
 8005e9e:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8005ea0:	2320      	movs	r3, #32
 8005ea2:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005ea4:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 8005eac:	2003      	movs	r0, #3
 8005eae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005eb2 <HAL_UART_Transmit>:
{
 8005eb2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005eb6:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8005eb8:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8005eba:	2b20      	cmp	r3, #32
{
 8005ebc:	4604      	mov	r4, r0
 8005ebe:	460e      	mov	r6, r1
 8005ec0:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8005ec2:	d14b      	bne.n	8005f5c <HAL_UART_Transmit+0xaa>
    if ((pData == NULL) || (Size == 0U))
 8005ec4:	2900      	cmp	r1, #0
 8005ec6:	d047      	beq.n	8005f58 <HAL_UART_Transmit+0xa6>
 8005ec8:	2a00      	cmp	r2, #0
 8005eca:	d045      	beq.n	8005f58 <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 8005ecc:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d043      	beq.n	8005f5c <HAL_UART_Transmit+0xaa>
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eda:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005edc:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ede:	67c5      	str	r5, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ee0:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 8005ee2:	f7fc fb2d 	bl	8002540 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ee6:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 8005ee8:	f8a4 9050 	strh.w	r9, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005eec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8005ef0:	4607      	mov	r7, r0
    huart->TxXferCount = Size;
 8005ef2:	f8a4 9052 	strh.w	r9, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ef6:	d103      	bne.n	8005f00 <HAL_UART_Transmit+0x4e>
 8005ef8:	6923      	ldr	r3, [r4, #16]
 8005efa:	b90b      	cbnz	r3, 8005f00 <HAL_UART_Transmit+0x4e>
 8005efc:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8005efe:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 8005f00:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f04:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8005f08:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f0a:	463b      	mov	r3, r7
    while (huart->TxXferCount > 0U)
 8005f0c:	b94a      	cbnz	r2, 8005f22 <HAL_UART_Transmit+0x70>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f0e:	2140      	movs	r1, #64	; 0x40
 8005f10:	4620      	mov	r0, r4
 8005f12:	f7ff ff9f 	bl	8005e54 <UART_WaitOnFlagUntilTimeout>
 8005f16:	b950      	cbnz	r0, 8005f2e <HAL_UART_Transmit+0x7c>
    huart->gState = HAL_UART_STATE_READY;
 8005f18:	2320      	movs	r3, #32
 8005f1a:	6763      	str	r3, [r4, #116]	; 0x74
    __HAL_UNLOCK(huart);
 8005f1c:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    return HAL_OK;
 8005f20:	e006      	b.n	8005f30 <HAL_UART_Transmit+0x7e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f22:	2200      	movs	r2, #0
 8005f24:	2180      	movs	r1, #128	; 0x80
 8005f26:	4620      	mov	r0, r4
 8005f28:	f7ff ff94 	bl	8005e54 <UART_WaitOnFlagUntilTimeout>
 8005f2c:	b118      	cbz	r0, 8005f36 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 8005f2e:	2003      	movs	r0, #3
}
 8005f30:	b003      	add	sp, #12
 8005f32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f36:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8005f38:	b95e      	cbnz	r6, 8005f52 <HAL_UART_Transmit+0xa0>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f3a:	f835 3b02 	ldrh.w	r3, [r5], #2
 8005f3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f42:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8005f44:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8005f48:	3b01      	subs	r3, #1
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8005f50:	e7d6      	b.n	8005f00 <HAL_UART_Transmit+0x4e>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f52:	f816 3b01 	ldrb.w	r3, [r6], #1
 8005f56:	e7f4      	b.n	8005f42 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8005f58:	2001      	movs	r0, #1
 8005f5a:	e7e9      	b.n	8005f30 <HAL_UART_Transmit+0x7e>
    return HAL_BUSY;
 8005f5c:	2002      	movs	r0, #2
 8005f5e:	e7e7      	b.n	8005f30 <HAL_UART_Transmit+0x7e>

08005f60 <UART_CheckIdleState>:
{
 8005f60:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f62:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f64:	2600      	movs	r6, #0
 8005f66:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8005f68:	f7fc faea 	bl	8002540 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f6c:	6823      	ldr	r3, [r4, #0]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8005f72:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f74:	d415      	bmi.n	8005fa2 <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f76:	6823      	ldr	r3, [r4, #0]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	075b      	lsls	r3, r3, #29
 8005f7c:	d50a      	bpl.n	8005f94 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f7e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f82:	9300      	str	r3, [sp, #0]
 8005f84:	2200      	movs	r2, #0
 8005f86:	462b      	mov	r3, r5
 8005f88:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f8c:	4620      	mov	r0, r4
 8005f8e:	f7ff ff61 	bl	8005e54 <UART_WaitOnFlagUntilTimeout>
 8005f92:	b990      	cbnz	r0, 8005fba <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 8005f94:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8005f96:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8005f98:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 8005f9a:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8005f9e:	67a3      	str	r3, [r4, #120]	; 0x78
  return HAL_OK;
 8005fa0:	e00c      	b.n	8005fbc <UART_CheckIdleState+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fa2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005fa6:	9300      	str	r3, [sp, #0]
 8005fa8:	4632      	mov	r2, r6
 8005faa:	4603      	mov	r3, r0
 8005fac:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005fb0:	4620      	mov	r0, r4
 8005fb2:	f7ff ff4f 	bl	8005e54 <UART_WaitOnFlagUntilTimeout>
 8005fb6:	2800      	cmp	r0, #0
 8005fb8:	d0dd      	beq.n	8005f76 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8005fba:	2003      	movs	r0, #3
}
 8005fbc:	b002      	add	sp, #8
 8005fbe:	bd70      	pop	{r4, r5, r6, pc}

08005fc0 <HAL_UART_Init>:
{
 8005fc0:	b510      	push	{r4, lr}
  if (huart == NULL)
 8005fc2:	4604      	mov	r4, r0
 8005fc4:	b340      	cbz	r0, 8006018 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8005fc6:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8005fc8:	b91b      	cbnz	r3, 8005fd2 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8005fca:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8005fce:	f7fc f837 	bl	8002040 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8005fd2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005fd4:	2324      	movs	r3, #36	; 0x24
 8005fd6:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8005fd8:	6813      	ldr	r3, [r2, #0]
 8005fda:	f023 0301 	bic.w	r3, r3, #1
 8005fde:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005fe0:	4620      	mov	r0, r4
 8005fe2:	f7ff fd4b 	bl	8005a7c <UART_SetConfig>
 8005fe6:	2801      	cmp	r0, #1
 8005fe8:	d016      	beq.n	8006018 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005fea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005fec:	b113      	cbz	r3, 8005ff4 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8005fee:	4620      	mov	r0, r4
 8005ff0:	f7ff fedc 	bl	8005dac <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ff4:	6823      	ldr	r3, [r4, #0]
 8005ff6:	685a      	ldr	r2, [r3, #4]
 8005ff8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ffc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ffe:	689a      	ldr	r2, [r3, #8]
 8006000:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006004:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800600c:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800600e:	601a      	str	r2, [r3, #0]
}
 8006010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8006014:	f7ff bfa4 	b.w	8005f60 <UART_CheckIdleState>
}
 8006018:	2001      	movs	r0, #1
 800601a:	bd10      	pop	{r4, pc}

0800601c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800601c:	4b0a      	ldr	r3, [pc, #40]	; (8006048 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800601e:	3b01      	subs	r3, #1
 8006020:	d101      	bne.n	8006026 <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 8006022:	2003      	movs	r0, #3
 8006024:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006026:	6902      	ldr	r2, [r0, #16]
 8006028:	2a00      	cmp	r2, #0
 800602a:	daf8      	bge.n	800601e <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800602c:	6903      	ldr	r3, [r0, #16]
 800602e:	4a06      	ldr	r2, [pc, #24]	; (8006048 <USB_CoreReset+0x2c>)
 8006030:	f043 0301 	orr.w	r3, r3, #1
 8006034:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8006036:	3a01      	subs	r2, #1
 8006038:	d0f3      	beq.n	8006022 <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800603a:	6903      	ldr	r3, [r0, #16]
 800603c:	f013 0301 	ands.w	r3, r3, #1
 8006040:	d1f9      	bne.n	8006036 <USB_CoreReset+0x1a>

  return HAL_OK;
 8006042:	4618      	mov	r0, r3
}
 8006044:	4770      	bx	lr
 8006046:	bf00      	nop
 8006048:	00030d41 	.word	0x00030d41

0800604c <USB_CoreInit>:
{
 800604c:	b084      	sub	sp, #16
 800604e:	b538      	push	{r3, r4, r5, lr}
 8006050:	ad05      	add	r5, sp, #20
 8006052:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006056:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006058:	2b01      	cmp	r3, #1
{
 800605a:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800605c:	d119      	bne.n	8006092 <USB_CoreInit+0x46>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800605e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006060:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006064:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006066:	68c3      	ldr	r3, [r0, #12]
 8006068:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800606c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006070:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006072:	68c3      	ldr	r3, [r0, #12]
 8006074:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006078:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 800607a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800607c:	2b01      	cmp	r3, #1
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800607e:	bf02      	ittt	eq
 8006080:	68c3      	ldreq	r3, [r0, #12]
 8006082:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 8006086:	60c3      	streq	r3, [r0, #12]
}
 8006088:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800608c:	b004      	add	sp, #16
    ret = USB_CoreReset(USBx);
 800608e:	f7ff bfc5 	b.w	800601c <USB_CoreReset>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006092:	68c3      	ldr	r3, [r0, #12]
 8006094:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006098:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 800609a:	f7ff ffbf 	bl	800601c <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 800609e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060a0:	b93b      	cbnz	r3, 80060b2 <USB_CoreInit+0x66>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80060a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80060a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80060a8:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80060aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060ae:	b004      	add	sp, #16
 80060b0:	4770      	bx	lr
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80060b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80060b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060b8:	e7f6      	b.n	80060a8 <USB_CoreInit+0x5c>
	...

080060bc <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 80060bc:	2a02      	cmp	r2, #2
 80060be:	d158      	bne.n	8006172 <USB_SetTurnaroundTime+0xb6>
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80060c0:	4b2e      	ldr	r3, [pc, #184]	; (800617c <USB_SetTurnaroundTime+0xc0>)
 80060c2:	4a2f      	ldr	r2, [pc, #188]	; (8006180 <USB_SetTurnaroundTime+0xc4>)
 80060c4:	440b      	add	r3, r1
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d947      	bls.n	800615a <USB_SetTurnaroundTime+0x9e>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80060ca:	4b2e      	ldr	r3, [pc, #184]	; (8006184 <USB_SetTurnaroundTime+0xc8>)
 80060cc:	4a2e      	ldr	r2, [pc, #184]	; (8006188 <USB_SetTurnaroundTime+0xcc>)
 80060ce:	440b      	add	r3, r1
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d944      	bls.n	800615e <USB_SetTurnaroundTime+0xa2>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80060d4:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 80060d8:	4a2c      	ldr	r2, [pc, #176]	; (800618c <USB_SetTurnaroundTime+0xd0>)
 80060da:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 80060de:	4293      	cmp	r3, r2
 80060e0:	d93f      	bls.n	8006162 <USB_SetTurnaroundTime+0xa6>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80060e2:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 80060e6:	f502 32c3 	add.w	r2, r2, #99840	; 0x18600
 80060ea:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 80060ee:	32a0      	adds	r2, #160	; 0xa0
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d938      	bls.n	8006166 <USB_SetTurnaroundTime+0xaa>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80060f4:	4b26      	ldr	r3, [pc, #152]	; (8006190 <USB_SetTurnaroundTime+0xd4>)
 80060f6:	4a27      	ldr	r2, [pc, #156]	; (8006194 <USB_SetTurnaroundTime+0xd8>)
 80060f8:	440b      	add	r3, r1
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d935      	bls.n	800616a <USB_SetTurnaroundTime+0xae>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80060fe:	4b26      	ldr	r3, [pc, #152]	; (8006198 <USB_SetTurnaroundTime+0xdc>)
 8006100:	f502 2292 	add.w	r2, r2, #299008	; 0x49000
 8006104:	440b      	add	r3, r1
 8006106:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 800610a:	4293      	cmp	r3, r2
 800610c:	d92f      	bls.n	800616e <USB_SetTurnaroundTime+0xb2>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800610e:	4b23      	ldr	r3, [pc, #140]	; (800619c <USB_SetTurnaroundTime+0xe0>)
 8006110:	f502 22c3 	add.w	r2, r2, #399360	; 0x61800
 8006114:	440b      	add	r3, r1
 8006116:	f502 7220 	add.w	r2, r2, #640	; 0x280
 800611a:	4293      	cmp	r3, r2
 800611c:	d929      	bls.n	8006172 <USB_SetTurnaroundTime+0xb6>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800611e:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 8006122:	f502 12b7 	add.w	r2, r2, #1499136	; 0x16e000
 8006126:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 800612a:	f502 7258 	add.w	r2, r2, #864	; 0x360
 800612e:	4293      	cmp	r3, r2
 8006130:	d921      	bls.n	8006176 <USB_SetTurnaroundTime+0xba>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006132:	4b1b      	ldr	r3, [pc, #108]	; (80061a0 <USB_SetTurnaroundTime+0xe4>)
      UsbTrd = 0x6U;
 8006134:	f502 2212 	add.w	r2, r2, #598016	; 0x92000
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006138:	440b      	add	r3, r1
      UsbTrd = 0x6U;
 800613a:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
 800613e:	4293      	cmp	r3, r2
 8006140:	bf94      	ite	ls
 8006142:	2307      	movls	r3, #7
 8006144:	2306      	movhi	r3, #6
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006146:	68c2      	ldr	r2, [r0, #12]
 8006148:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 800614c:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800614e:	68c2      	ldr	r2, [r0, #12]
 8006150:	ea42 2383 	orr.w	r3, r2, r3, lsl #10
 8006154:	60c3      	str	r3, [r0, #12]
}
 8006156:	2000      	movs	r0, #0
 8006158:	4770      	bx	lr
      UsbTrd = 0xFU;
 800615a:	230f      	movs	r3, #15
 800615c:	e7f3      	b.n	8006146 <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xEU;
 800615e:	230e      	movs	r3, #14
 8006160:	e7f1      	b.n	8006146 <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xDU;
 8006162:	230d      	movs	r3, #13
 8006164:	e7ef      	b.n	8006146 <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xCU;
 8006166:	230c      	movs	r3, #12
 8006168:	e7ed      	b.n	8006146 <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xBU;
 800616a:	230b      	movs	r3, #11
 800616c:	e7eb      	b.n	8006146 <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xAU;
 800616e:	230a      	movs	r3, #10
 8006170:	e7e9      	b.n	8006146 <USB_SetTurnaroundTime+0x8a>
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006172:	2309      	movs	r3, #9
 8006174:	e7e7      	b.n	8006146 <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0x8U;
 8006176:	2308      	movs	r3, #8
 8006178:	e7e5      	b.n	8006146 <USB_SetTurnaroundTime+0x8a>
 800617a:	bf00      	nop
 800617c:	ff275340 	.word	0xff275340
 8006180:	000c34ff 	.word	0x000c34ff
 8006184:	ff1b1e40 	.word	0xff1b1e40
 8006188:	000f423f 	.word	0x000f423f
 800618c:	00124f7f 	.word	0x00124f7f
 8006190:	fee5b660 	.word	0xfee5b660
 8006194:	0016e35f 	.word	0x0016e35f
 8006198:	feced300 	.word	0xfeced300
 800619c:	feb35bc0 	.word	0xfeb35bc0
 80061a0:	fe5954e0 	.word	0xfe5954e0

080061a4 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80061a4:	6883      	ldr	r3, [r0, #8]
 80061a6:	f043 0301 	orr.w	r3, r3, #1
 80061aa:	6083      	str	r3, [r0, #8]
}
 80061ac:	2000      	movs	r0, #0
 80061ae:	4770      	bx	lr

080061b0 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80061b0:	6883      	ldr	r3, [r0, #8]
 80061b2:	f023 0301 	bic.w	r3, r3, #1
 80061b6:	6083      	str	r3, [r0, #8]
}
 80061b8:	2000      	movs	r0, #0
 80061ba:	4770      	bx	lr

080061bc <USB_SetCurrentMode>:
{
 80061bc:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80061be:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80061c0:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80061c2:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80061c6:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80061c8:	d108      	bne.n	80061dc <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80061ca:	68c3      	ldr	r3, [r0, #12]
 80061cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80061d0:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 80061d2:	2032      	movs	r0, #50	; 0x32
 80061d4:	f7fc f9ba 	bl	800254c <HAL_Delay>
  return HAL_OK;
 80061d8:	2000      	movs	r0, #0
 80061da:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 80061dc:	b919      	cbnz	r1, 80061e6 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80061de:	68c3      	ldr	r3, [r0, #12]
 80061e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061e4:	e7f4      	b.n	80061d0 <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 80061e6:	2001      	movs	r0, #1
}
 80061e8:	bd08      	pop	{r3, pc}
	...

080061ec <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80061ec:	0189      	lsls	r1, r1, #6
 80061ee:	f041 0120 	orr.w	r1, r1, #32
 80061f2:	4a06      	ldr	r2, [pc, #24]	; (800620c <USB_FlushTxFifo+0x20>)
 80061f4:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 80061f6:	3a01      	subs	r2, #1
 80061f8:	d005      	beq.n	8006206 <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80061fa:	6903      	ldr	r3, [r0, #16]
 80061fc:	f013 0320 	ands.w	r3, r3, #32
 8006200:	d1f9      	bne.n	80061f6 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8006202:	4618      	mov	r0, r3
 8006204:	4770      	bx	lr
      return HAL_TIMEOUT;
 8006206:	2003      	movs	r0, #3
}
 8006208:	4770      	bx	lr
 800620a:	bf00      	nop
 800620c:	00030d41 	.word	0x00030d41

08006210 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006210:	2310      	movs	r3, #16
 8006212:	4a06      	ldr	r2, [pc, #24]	; (800622c <USB_FlushRxFifo+0x1c>)
 8006214:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 8006216:	3a01      	subs	r2, #1
 8006218:	d005      	beq.n	8006226 <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800621a:	6903      	ldr	r3, [r0, #16]
 800621c:	f013 0310 	ands.w	r3, r3, #16
 8006220:	d1f9      	bne.n	8006216 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8006222:	4618      	mov	r0, r3
 8006224:	4770      	bx	lr
      return HAL_TIMEOUT;
 8006226:	2003      	movs	r0, #3
}
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop
 800622c:	00030d41 	.word	0x00030d41

08006230 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8006230:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8006234:	4319      	orrs	r1, r3
 8006236:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 800623a:	2000      	movs	r0, #0
 800623c:	4770      	bx	lr
	...

08006240 <USB_DevInit>:
{
 8006240:	b084      	sub	sp, #16
 8006242:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006246:	4604      	mov	r4, r0
 8006248:	a809      	add	r0, sp, #36	; 0x24
 800624a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 800624e:	2300      	movs	r3, #0
 8006250:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8006252:	460f      	mov	r7, r1
    USBx->DIEPTXF[i] = 0U;
 8006254:	4619      	mov	r1, r3
 8006256:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800625a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 800625e:	3301      	adds	r3, #1
 8006260:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 8006262:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8006264:	d1f7      	bne.n	8006256 <USB_DevInit+0x16>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006266:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  if (cfg.vbus_sensing_enable == 0U)
 8006268:	2e00      	cmp	r6, #0
 800626a:	d162      	bne.n	8006332 <USB_DevInit+0xf2>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800626c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006270:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006272:	6823      	ldr	r3, [r4, #0]
 8006274:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006278:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800627a:	6823      	ldr	r3, [r4, #0]
 800627c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006280:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 8006282:	2300      	movs	r3, #0
 8006284:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006288:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 800628c:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006290:	2103      	movs	r1, #3
 8006292:	4620      	mov	r0, r4
 8006294:	f7ff ffcc 	bl	8006230 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006298:	2110      	movs	r1, #16
 800629a:	4620      	mov	r0, r4
 800629c:	f7ff ffa6 	bl	80061ec <USB_FlushTxFifo>
 80062a0:	4601      	mov	r1, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80062a2:	4620      	mov	r0, r4
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80062a4:	f504 6500 	add.w	r5, r4, #2048	; 0x800
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80062a8:	f7ff ffb2 	bl	8006210 <USB_FlushRxFifo>
 80062ac:	2800      	cmp	r0, #0
 80062ae:	d144      	bne.n	800633a <USB_DevInit+0xfa>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80062b0:	1c08      	adds	r0, r1, #0
 80062b2:	bf18      	it	ne
 80062b4:	2001      	movne	r0, #1
  USBx_DEVICE->DIEPMSK = 0U;
 80062b6:	2300      	movs	r3, #0
 80062b8:	612b      	str	r3, [r5, #16]
 80062ba:	f504 6210 	add.w	r2, r4, #2304	; 0x900
  USBx_DEVICE->DOEPMSK = 0U;
 80062be:	616b      	str	r3, [r5, #20]
      USBx_INEP(i)->DIEPCTL = 0U;
 80062c0:	4619      	mov	r1, r3
  USBx_DEVICE->DAINTMSK = 0U;
 80062c2:	61eb      	str	r3, [r5, #28]
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80062c4:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80062c8:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80062cc:	f64f 387f 	movw	r8, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062d0:	42bb      	cmp	r3, r7
 80062d2:	d134      	bne.n	800633e <USB_DevInit+0xfe>
 80062d4:	2100      	movs	r1, #0
 80062d6:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80062da:	460f      	mov	r7, r1
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80062dc:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80062e0:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80062e4:	f64f 387f 	movw	r8, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062e8:	428b      	cmp	r3, r1
 80062ea:	d13b      	bne.n	8006364 <USB_DevInit+0x124>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80062ec:	692b      	ldr	r3, [r5, #16]
 80062ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062f2:	612b      	str	r3, [r5, #16]
  USBx->GINTMSK = 0U;
 80062f4:	2300      	movs	r3, #0
 80062f6:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80062f8:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 80062fc:	6163      	str	r3, [r4, #20]
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80062fe:	69a3      	ldr	r3, [r4, #24]
 8006300:	f043 0310 	orr.w	r3, r3, #16
 8006304:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006306:	69a2      	ldr	r2, [r4, #24]
 8006308:	4b20      	ldr	r3, [pc, #128]	; (800638c <USB_DevInit+0x14c>)
 800630a:	4313      	orrs	r3, r2
 800630c:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 800630e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006310:	b11b      	cbz	r3, 800631a <USB_DevInit+0xda>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006312:	69a3      	ldr	r3, [r4, #24]
 8006314:	f043 0308 	orr.w	r3, r3, #8
 8006318:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800631a:	2e01      	cmp	r6, #1
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800631c:	bf01      	itttt	eq
 800631e:	69a3      	ldreq	r3, [r4, #24]
 8006320:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8006324:	f043 0304 	orreq.w	r3, r3, #4
 8006328:	61a3      	streq	r3, [r4, #24]
}
 800632a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800632e:	b004      	add	sp, #16
 8006330:	4770      	bx	lr
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006332:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006336:	63a3      	str	r3, [r4, #56]	; 0x38
 8006338:	e7a3      	b.n	8006282 <USB_DevInit+0x42>
 800633a:	2001      	movs	r0, #1
 800633c:	e7bb      	b.n	80062b6 <USB_DevInit+0x76>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800633e:	f8d2 9000 	ldr.w	r9, [r2]
 8006342:	f1b9 0f00 	cmp.w	r9, #0
 8006346:	da0b      	bge.n	8006360 <USB_DevInit+0x120>
      if (i == 0U)
 8006348:	b93b      	cbnz	r3, 800635a <USB_DevInit+0x11a>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800634a:	f8c2 c000 	str.w	ip, [r2]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800634e:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006350:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006352:	f8c2 8008 	str.w	r8, [r2, #8]
 8006356:	3220      	adds	r2, #32
 8006358:	e7ba      	b.n	80062d0 <USB_DevInit+0x90>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800635a:	f8c2 e000 	str.w	lr, [r2]
 800635e:	e7f6      	b.n	800634e <USB_DevInit+0x10e>
      USBx_INEP(i)->DIEPCTL = 0U;
 8006360:	6011      	str	r1, [r2, #0]
 8006362:	e7f4      	b.n	800634e <USB_DevInit+0x10e>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006364:	f8d2 9000 	ldr.w	r9, [r2]
 8006368:	f1b9 0f00 	cmp.w	r9, #0
 800636c:	da0b      	bge.n	8006386 <USB_DevInit+0x146>
      if (i == 0U)
 800636e:	b939      	cbnz	r1, 8006380 <USB_DevInit+0x140>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006370:	f8c2 c000 	str.w	ip, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006374:	6117      	str	r7, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006376:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006378:	f8c2 8008 	str.w	r8, [r2, #8]
 800637c:	3220      	adds	r2, #32
 800637e:	e7b3      	b.n	80062e8 <USB_DevInit+0xa8>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006380:	f8c2 e000 	str.w	lr, [r2]
 8006384:	e7f6      	b.n	8006374 <USB_DevInit+0x134>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006386:	6017      	str	r7, [r2, #0]
 8006388:	e7f4      	b.n	8006374 <USB_DevInit+0x134>
 800638a:	bf00      	nop
 800638c:	803c3800 	.word	0x803c3800

08006390 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006390:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006394:	f013 0f02 	tst.w	r3, #2
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006398:	f500 6000 	add.w	r0, r0, #2048	; 0x800
}
 800639c:	bf14      	ite	ne
 800639e:	2002      	movne	r0, #2
 80063a0:	200f      	moveq	r0, #15
 80063a2:	4770      	bx	lr

080063a4 <USB_ActivateEndpoint>:
{
 80063a4:	b570      	push	{r4, r5, r6, lr}
  if (ep->is_in == 1U)
 80063a6:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80063a8:	780c      	ldrb	r4, [r1, #0]
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80063aa:	f8d0 681c 	ldr.w	r6, [r0, #2076]	; 0x81c
 80063ae:	f500 6300 	add.w	r3, r0, #2048	; 0x800
  if (ep->is_in == 1U)
 80063b2:	2a01      	cmp	r2, #1
 80063b4:	f004 050f 	and.w	r5, r4, #15
 80063b8:	d11b      	bne.n	80063f2 <USB_ActivateEndpoint+0x4e>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80063ba:	40aa      	lsls	r2, r5
 80063bc:	4332      	orrs	r2, r6
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80063be:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80063c2:	61da      	str	r2, [r3, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80063c4:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80063c8:	041a      	lsls	r2, r3, #16
 80063ca:	d410      	bmi.n	80063ee <USB_ActivateEndpoint+0x4a>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80063cc:	688b      	ldr	r3, [r1, #8]
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80063ce:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80063d0:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 80063d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80063d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063e0:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 80063e4:	ea43 5384 	orr.w	r3, r3, r4, lsl #22
 80063e8:	4313      	orrs	r3, r2
 80063ea:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 80063ee:	2000      	movs	r0, #0
 80063f0:	bd70      	pop	{r4, r5, r6, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80063f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80063f6:	40aa      	lsls	r2, r5
 80063f8:	4332      	orrs	r2, r6
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80063fa:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80063fe:	61da      	str	r2, [r3, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006400:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8006404:	041b      	lsls	r3, r3, #16
 8006406:	d4f2      	bmi.n	80063ee <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006408:	688b      	ldr	r3, [r1, #8]
                                    ((uint32_t)ep->type << 18) |
 800640a:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800640c:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8006410:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006418:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800641c:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8006420:	4313      	orrs	r3, r2
 8006422:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8006426:	e7e2      	b.n	80063ee <USB_ActivateEndpoint+0x4a>

08006428 <USB_DeactivateEndpoint>:
{
 8006428:	b530      	push	{r4, r5, lr}
  if (ep->is_in == 1U)
 800642a:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800642c:	780c      	ldrb	r4, [r1, #0]
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800642e:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 8006432:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  if (ep->is_in == 1U)
 8006436:	2b01      	cmp	r3, #1
 8006438:	f004 050f 	and.w	r5, r4, #15
 800643c:	d110      	bne.n	8006460 <USB_DeactivateEndpoint+0x38>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800643e:	40ab      	lsls	r3, r5
 8006440:	43db      	mvns	r3, r3
 8006442:	4019      	ands	r1, r3
 8006444:	63d1      	str	r1, [r2, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006446:	69d1      	ldr	r1, [r2, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006448:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800644c:	400b      	ands	r3, r1
 800644e:	61d3      	str	r3, [r2, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006450:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8006454:	4b0b      	ldr	r3, [pc, #44]	; (8006484 <USB_DeactivateEndpoint+0x5c>)
 8006456:	4013      	ands	r3, r2
 8006458:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800645c:	2000      	movs	r0, #0
 800645e:	bd30      	pop	{r4, r5, pc}
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006460:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006464:	40ab      	lsls	r3, r5
 8006466:	43db      	mvns	r3, r3
 8006468:	4019      	ands	r1, r3
 800646a:	63d1      	str	r1, [r2, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800646c:	69d1      	ldr	r1, [r2, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800646e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006472:	400b      	ands	r3, r1
 8006474:	61d3      	str	r3, [r2, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006476:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800647a:	4b03      	ldr	r3, [pc, #12]	; (8006488 <USB_DeactivateEndpoint+0x60>)
 800647c:	4013      	ands	r3, r2
 800647e:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8006482:	e7eb      	b.n	800645c <USB_DeactivateEndpoint+0x34>
 8006484:	ec337800 	.word	0xec337800
 8006488:	eff37800 	.word	0xeff37800

0800648c <USB_EP0StartXfer>:
{
 800648c:	b570      	push	{r4, r5, r6, lr}
  if (ep->is_in == 1U)
 800648e:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8006490:	780a      	ldrb	r2, [r1, #0]
 8006492:	694d      	ldr	r5, [r1, #20]
 8006494:	4e35      	ldr	r6, [pc, #212]	; (800656c <USB_EP0StartXfer+0xe0>)
  if (ep->is_in == 1U)
 8006496:	2b01      	cmp	r3, #1
 8006498:	f04f 0320 	mov.w	r3, #32
 800649c:	d145      	bne.n	800652a <USB_EP0StartXfer+0x9e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800649e:	fb13 0302 	smlabb	r3, r3, r2, r0
    if (ep->xfer_len == 0U)
 80064a2:	bb45      	cbnz	r5, 80064f6 <USB_EP0StartXfer+0x6a>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80064a4:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 80064a8:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 80064ac:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 80064b0:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80064b4:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 80064b8:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 80064bc:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80064c0:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 80064c4:	4026      	ands	r6, r4
 80064c6:	f8c3 6910 	str.w	r6, [r3, #2320]	; 0x910
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80064ca:	eb00 1242 	add.w	r2, r0, r2, lsl #5
    if (ep->xfer_len > 0U)
 80064ce:	694b      	ldr	r3, [r1, #20]
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80064d0:	f8d2 4900 	ldr.w	r4, [r2, #2304]	; 0x900
 80064d4:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 80064d8:	f8c2 4900 	str.w	r4, [r2, #2304]	; 0x900
    if (ep->xfer_len > 0U)
 80064dc:	b14b      	cbz	r3, 80064f2 <USB_EP0StartXfer+0x66>
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80064de:	780a      	ldrb	r2, [r1, #0]
 80064e0:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 80064e4:	f002 010f 	and.w	r1, r2, #15
 80064e8:	2201      	movs	r2, #1
 80064ea:	408a      	lsls	r2, r1
 80064ec:	431a      	orrs	r2, r3
 80064ee:	f8c0 2834 	str.w	r2, [r0, #2100]	; 0x834
}
 80064f2:	2000      	movs	r0, #0
 80064f4:	bd70      	pop	{r4, r5, r6, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80064f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064fa:	691c      	ldr	r4, [r3, #16]
 80064fc:	4026      	ands	r6, r4
 80064fe:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006500:	691c      	ldr	r4, [r3, #16]
 8006502:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8006506:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 800650a:	611c      	str	r4, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 800650c:	688c      	ldr	r4, [r1, #8]
 800650e:	42a5      	cmp	r5, r4
        ep->xfer_len = ep->maxpacket;
 8006510:	bf88      	it	hi
 8006512:	614c      	strhi	r4, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006514:	691c      	ldr	r4, [r3, #16]
 8006516:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800651a:	611c      	str	r4, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800651c:	694c      	ldr	r4, [r1, #20]
 800651e:	691d      	ldr	r5, [r3, #16]
 8006520:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8006524:	432c      	orrs	r4, r5
 8006526:	611c      	str	r4, [r3, #16]
 8006528:	e7cf      	b.n	80064ca <USB_EP0StartXfer+0x3e>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800652a:	fb13 0002 	smlabb	r0, r3, r2, r0
 800652e:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8006532:	691a      	ldr	r2, [r3, #16]
 8006534:	4032      	ands	r2, r6
 8006536:	611a      	str	r2, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006538:	691a      	ldr	r2, [r3, #16]
 800653a:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 800653e:	f422 12c0 	bic.w	r2, r2, #1572864	; 0x180000
 8006542:	611a      	str	r2, [r3, #16]
 8006544:	688a      	ldr	r2, [r1, #8]
    if (ep->xfer_len > 0U)
 8006546:	b105      	cbz	r5, 800654a <USB_EP0StartXfer+0xbe>
      ep->xfer_len = ep->maxpacket;
 8006548:	614a      	str	r2, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800654a:	6919      	ldr	r1, [r3, #16]
 800654c:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
 8006550:	6119      	str	r1, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006552:	6919      	ldr	r1, [r3, #16]
 8006554:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8006558:	430a      	orrs	r2, r1
 800655a:	611a      	str	r2, [r3, #16]
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800655c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8006560:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006564:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8006568:	e7c3      	b.n	80064f2 <USB_EP0StartXfer+0x66>
 800656a:	bf00      	nop
 800656c:	fff80000 	.word	0xfff80000

08006570 <USB_WritePacket>:
  count32b = ((uint32_t)len + 3U) / 4U;
 8006570:	3303      	adds	r3, #3
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006572:	eb00 3202 	add.w	r2, r0, r2, lsl #12
 8006576:	f023 0303 	bic.w	r3, r3, #3
 800657a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800657e:	440b      	add	r3, r1
  for (i = 0U; i < count32b; i++)
 8006580:	4299      	cmp	r1, r3
 8006582:	d101      	bne.n	8006588 <USB_WritePacket+0x18>
}
 8006584:	2000      	movs	r0, #0
 8006586:	4770      	bx	lr
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006588:	f851 0b04 	ldr.w	r0, [r1], #4
 800658c:	6010      	str	r0, [r2, #0]
 800658e:	e7f7      	b.n	8006580 <USB_WritePacket+0x10>

08006590 <USB_EPStartXfer>:
{
 8006590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 8006592:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8006594:	780d      	ldrb	r5, [r1, #0]
 8006596:	4e58      	ldr	r6, [pc, #352]	; (80066f8 <USB_EPStartXfer+0x168>)
  if (ep->is_in == 1U)
 8006598:	2b01      	cmp	r3, #1
 800659a:	f04f 0220 	mov.w	r2, #32
 800659e:	694b      	ldr	r3, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80065a0:	fb12 0205 	smlabb	r2, r2, r5, r0
  if (ep->is_in == 1U)
 80065a4:	d16a      	bne.n	800667c <USB_EPStartXfer+0xec>
    if (ep->xfer_len == 0U)
 80065a6:	bb3b      	cbnz	r3, 80065f8 <USB_EPStartXfer+0x68>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80065a8:	f502 6410 	add.w	r4, r2, #2304	; 0x900
 80065ac:	f8d2 2910 	ldr.w	r2, [r2, #2320]	; 0x910
 80065b0:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 80065b4:	f422 12c0 	bic.w	r2, r2, #1572864	; 0x180000
 80065b8:	6122      	str	r2, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80065ba:	6922      	ldr	r2, [r4, #16]
 80065bc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80065c0:	6122      	str	r2, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80065c2:	6922      	ldr	r2, [r4, #16]
 80065c4:	4016      	ands	r6, r2
 80065c6:	6126      	str	r6, [r4, #16]
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80065c8:	eb00 1245 	add.w	r2, r0, r5, lsl #5
 80065cc:	f8d2 4900 	ldr.w	r4, [r2, #2304]	; 0x900
 80065d0:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 80065d4:	f8c2 4900 	str.w	r4, [r2, #2304]	; 0x900
    if (ep->type != EP_TYPE_ISOC)
 80065d8:	78cc      	ldrb	r4, [r1, #3]
 80065da:	2c01      	cmp	r4, #1
 80065dc:	d03b      	beq.n	8006656 <USB_EPStartXfer+0xc6>
      if (ep->xfer_len > 0U)
 80065de:	b14b      	cbz	r3, 80065f4 <USB_EPStartXfer+0x64>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80065e0:	780b      	ldrb	r3, [r1, #0]
 80065e2:	f8d0 4834 	ldr.w	r4, [r0, #2100]	; 0x834
 80065e6:	f003 020f 	and.w	r2, r3, #15
 80065ea:	2301      	movs	r3, #1
 80065ec:	4093      	lsls	r3, r2
 80065ee:	4323      	orrs	r3, r4
 80065f0:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
}
 80065f4:	2000      	movs	r0, #0
 80065f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80065f8:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 80065fc:	4034      	ands	r4, r6
 80065fe:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006602:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006606:	688e      	ldr	r6, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006608:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 800660c:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8006610:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006614:	199c      	adds	r4, r3, r6
 8006616:	3c01      	subs	r4, #1
 8006618:	fbb4 f6f6 	udiv	r6, r4, r6
 800661c:	4c37      	ldr	r4, [pc, #220]	; (80066fc <USB_EPStartXfer+0x16c>)
 800661e:	f8d2 7910 	ldr.w	r7, [r2, #2320]	; 0x910
 8006622:	ea04 44c6 	and.w	r4, r4, r6, lsl #19
 8006626:	433c      	orrs	r4, r7
 8006628:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800662c:	f8d2 6910 	ldr.w	r6, [r2, #2320]	; 0x910
 8006630:	f3c3 0412 	ubfx	r4, r3, #0, #19
 8006634:	4334      	orrs	r4, r6
 8006636:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      if (ep->type == EP_TYPE_ISOC)
 800663a:	78cc      	ldrb	r4, [r1, #3]
 800663c:	2c01      	cmp	r4, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800663e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 8006642:	d1c1      	bne.n	80065c8 <USB_EPStartXfer+0x38>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006644:	6914      	ldr	r4, [r2, #16]
 8006646:	f024 44c0 	bic.w	r4, r4, #1610612736	; 0x60000000
 800664a:	6114      	str	r4, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800664c:	6914      	ldr	r4, [r2, #16]
 800664e:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 8006652:	6114      	str	r4, [r2, #16]
 8006654:	e7b8      	b.n	80065c8 <USB_EPStartXfer+0x38>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006656:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 800665a:	f414 7f80 	tst.w	r4, #256	; 0x100
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800665e:	f8d2 4900 	ldr.w	r4, [r2, #2304]	; 0x900
 8006662:	bf0c      	ite	eq
 8006664:	f044 5400 	orreq.w	r4, r4, #536870912	; 0x20000000
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006668:	f044 5480 	orrne.w	r4, r4, #268435456	; 0x10000000
 800666c:	f8c2 4900 	str.w	r4, [r2, #2304]	; 0x900
      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8006670:	780a      	ldrb	r2, [r1, #0]
 8006672:	68c9      	ldr	r1, [r1, #12]
 8006674:	b29b      	uxth	r3, r3
 8006676:	f7ff ff7b 	bl	8006570 <USB_WritePacket>
 800667a:	e7bb      	b.n	80065f4 <USB_EPStartXfer+0x64>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800667c:	f502 6530 	add.w	r5, r2, #2816	; 0xb00
 8006680:	692c      	ldr	r4, [r5, #16]
 8006682:	4034      	ands	r4, r6
 8006684:	612c      	str	r4, [r5, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006686:	692c      	ldr	r4, [r5, #16]
 8006688:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 800668c:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8006690:	612c      	str	r4, [r5, #16]
 8006692:	688c      	ldr	r4, [r1, #8]
    if (ep->xfer_len == 0U)
 8006694:	b9fb      	cbnz	r3, 80066d6 <USB_EPStartXfer+0x146>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006696:	692b      	ldr	r3, [r5, #16]
 8006698:	f3c4 0412 	ubfx	r4, r4, #0, #19
 800669c:	431c      	orrs	r4, r3
 800669e:	612c      	str	r4, [r5, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80066a0:	692b      	ldr	r3, [r5, #16]
 80066a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80066a6:	612b      	str	r3, [r5, #16]
    if (ep->type == EP_TYPE_ISOC)
 80066a8:	78cb      	ldrb	r3, [r1, #3]
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d10c      	bne.n	80066c8 <USB_EPStartXfer+0x138>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80066ae:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 80066b2:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80066b6:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 80066ba:	bf0c      	ite	eq
 80066bc:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80066c0:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 80066c4:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80066c8:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 80066cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80066d0:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
 80066d4:	e78e      	b.n	80065f4 <USB_EPStartXfer+0x64>
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80066d6:	4e09      	ldr	r6, [pc, #36]	; (80066fc <USB_EPStartXfer+0x16c>)
 80066d8:	692f      	ldr	r7, [r5, #16]
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80066da:	4423      	add	r3, r4
 80066dc:	3b01      	subs	r3, #1
 80066de:	fbb3 f3f4 	udiv	r3, r3, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80066e2:	ea06 46c3 	and.w	r6, r6, r3, lsl #19
 80066e6:	433e      	orrs	r6, r7
 80066e8:	612e      	str	r6, [r5, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	692e      	ldr	r6, [r5, #16]
 80066ee:	4363      	muls	r3, r4
 80066f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066f4:	4333      	orrs	r3, r6
 80066f6:	e7d6      	b.n	80066a6 <USB_EPStartXfer+0x116>
 80066f8:	fff80000 	.word	0xfff80000
 80066fc:	1ff80000 	.word	0x1ff80000

08006700 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006700:	3203      	adds	r2, #3
 8006702:	f022 0203 	bic.w	r2, r2, #3
 8006706:	440a      	add	r2, r1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006708:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for (i = 0U; i < count32b; i++)
 800670c:	4291      	cmp	r1, r2
 800670e:	d101      	bne.n	8006714 <USB_ReadPacket+0x14>
}
 8006710:	4608      	mov	r0, r1
 8006712:	4770      	bx	lr
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006714:	6803      	ldr	r3, [r0, #0]
 8006716:	f841 3b04 	str.w	r3, [r1], #4
 800671a:	e7f7      	b.n	800670c <USB_ReadPacket+0xc>

0800671c <USB_EPSetStall>:
  if (ep->is_in == 1U)
 800671c:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800671e:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8006720:	2b01      	cmp	r3, #1
 8006722:	f04f 0320 	mov.w	r3, #32
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006726:	fb13 0002 	smlabb	r0, r3, r2, r0
  if (ep->is_in == 1U)
 800672a:	d112      	bne.n	8006752 <USB_EPSetStall+0x36>
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800672c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8006730:	2b00      	cmp	r3, #0
 8006732:	db06      	blt.n	8006742 <USB_EPSetStall+0x26>
 8006734:	b12a      	cbz	r2, 8006742 <USB_EPSetStall+0x26>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006736:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800673a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800673e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006742:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8006746:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800674a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800674e:	2000      	movs	r0, #0
 8006750:	4770      	bx	lr
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006752:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8006756:	2b00      	cmp	r3, #0
 8006758:	db06      	blt.n	8006768 <USB_EPSetStall+0x4c>
 800675a:	b12a      	cbz	r2, 8006768 <USB_EPSetStall+0x4c>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800675c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8006760:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006764:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006768:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800676c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006770:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8006774:	e7eb      	b.n	800674e <USB_EPSetStall+0x32>

08006776 <USB_EPClearStall>:
  if (ep->is_in == 1U)
 8006776:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8006778:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 800677a:	2b01      	cmp	r3, #1
 800677c:	f04f 0320 	mov.w	r3, #32
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006780:	fb13 0002 	smlabb	r0, r3, r2, r0
  if (ep->is_in == 1U)
 8006784:	d111      	bne.n	80067aa <USB_EPClearStall+0x34>
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006786:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800678a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800678e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006792:	78cb      	ldrb	r3, [r1, #3]
 8006794:	3b02      	subs	r3, #2
 8006796:	2b01      	cmp	r3, #1
 8006798:	d805      	bhi.n	80067a6 <USB_EPClearStall+0x30>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800679a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800679e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067a2:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 80067a6:	2000      	movs	r0, #0
 80067a8:	4770      	bx	lr
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80067aa:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80067ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80067b2:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80067b6:	78cb      	ldrb	r3, [r1, #3]
 80067b8:	3b02      	subs	r3, #2
 80067ba:	2b01      	cmp	r3, #1
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80067bc:	bf9e      	ittt	ls
 80067be:	f8d0 3b00 	ldrls.w	r3, [r0, #2816]	; 0xb00
 80067c2:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
 80067c6:	f8c0 3b00 	strls.w	r3, [r0, #2816]	; 0xb00
 80067ca:	e7ec      	b.n	80067a6 <USB_EPClearStall+0x30>

080067cc <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80067cc:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80067d0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80067d4:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80067d8:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80067dc:	0109      	lsls	r1, r1, #4
 80067de:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 80067e2:	4319      	orrs	r1, r3
 80067e4:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 80067e8:	2000      	movs	r0, #0
 80067ea:	4770      	bx	lr

080067ec <USB_DevConnect>:
{
 80067ec:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80067ee:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80067f2:	f023 0302 	bic.w	r3, r3, #2
 80067f6:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 80067fa:	2003      	movs	r0, #3
 80067fc:	f7fb fea6 	bl	800254c <HAL_Delay>
}
 8006800:	2000      	movs	r0, #0
 8006802:	bd08      	pop	{r3, pc}

08006804 <USB_DevDisconnect>:
{
 8006804:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006806:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800680a:	f043 0302 	orr.w	r3, r3, #2
 800680e:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8006812:	2003      	movs	r0, #3
 8006814:	f7fb fe9a 	bl	800254c <HAL_Delay>
}
 8006818:	2000      	movs	r0, #0
 800681a:	bd08      	pop	{r3, pc}

0800681c <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 800681c:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800681e:	6980      	ldr	r0, [r0, #24]
}
 8006820:	4010      	ands	r0, r2
 8006822:	4770      	bx	lr

08006824 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8006824:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8006828:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800682c:	69c0      	ldr	r0, [r0, #28]
 800682e:	4018      	ands	r0, r3
}
 8006830:	0c00      	lsrs	r0, r0, #16
 8006832:	4770      	bx	lr

08006834 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8006834:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8006838:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800683c:	69c0      	ldr	r0, [r0, #28]
 800683e:	4018      	ands	r0, r3
}
 8006840:	b280      	uxth	r0, r0
 8006842:	4770      	bx	lr

08006844 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006844:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006848:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800684c:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006850:	6940      	ldr	r0, [r0, #20]
}
 8006852:	4010      	ands	r0, r2
 8006854:	4770      	bx	lr

08006856 <USB_ReadDevInEPInterrupt>:
{
 8006856:	b510      	push	{r4, lr}
  msk = USBx_DEVICE->DIEPMSK;
 8006858:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 800685c:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006860:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006864:	f001 010f 	and.w	r1, r1, #15
 8006868:	40cb      	lsrs	r3, r1
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800686a:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800686e:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006870:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006872:	b2db      	uxtb	r3, r3
 8006874:	4323      	orrs	r3, r4
}
 8006876:	4018      	ands	r0, r3
 8006878:	bd10      	pop	{r4, pc}

0800687a <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800687a:	6940      	ldr	r0, [r0, #20]
}
 800687c:	f000 0001 	and.w	r0, r0, #1
 8006880:	4770      	bx	lr

08006882 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006882:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8006886:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800688a:	f023 0307 	bic.w	r3, r3, #7
 800688e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8006892:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8006896:	689a      	ldr	r2, [r3, #8]
 8006898:	f002 0206 	and.w	r2, r2, #6
 800689c:	2a04      	cmp	r2, #4
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800689e:	bf02      	ittt	eq
 80068a0:	f8d0 2900 	ldreq.w	r2, [r0, #2304]	; 0x900
 80068a4:	f042 0203 	orreq.w	r2, r2, #3
 80068a8:	f8c0 2900 	streq.w	r2, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80068ac:	685a      	ldr	r2, [r3, #4]
 80068ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068b2:	605a      	str	r2, [r3, #4]
}
 80068b4:	2000      	movs	r0, #0
 80068b6:	4770      	bx	lr

080068b8 <USB_EP0_OutStart>:
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80068b8:	6c02      	ldr	r2, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80068ba:	4b0f      	ldr	r3, [pc, #60]	; (80068f8 <USB_EP0_OutStart+0x40>)
 80068bc:	429a      	cmp	r2, r3
 80068be:	d903      	bls.n	80068c8 <USB_EP0_OutStart+0x10>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80068c0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	db14      	blt.n	80068f2 <USB_EP0_OutStart+0x3a>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80068c8:	2300      	movs	r3, #0
 80068ca:	f8c0 3b10 	str.w	r3, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80068ce:	f8d0 3b10 	ldr.w	r3, [r0, #2832]	; 0xb10
 80068d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80068d6:	f8c0 3b10 	str.w	r3, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80068da:	f8d0 3b10 	ldr.w	r3, [r0, #2832]	; 0xb10
 80068de:	f043 0318 	orr.w	r3, r3, #24
 80068e2:	f8c0 3b10 	str.w	r3, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80068e6:	f8d0 3b10 	ldr.w	r3, [r0, #2832]	; 0xb10
 80068ea:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80068ee:	f8c0 3b10 	str.w	r3, [r0, #2832]	; 0xb10
}
 80068f2:	2000      	movs	r0, #0
 80068f4:	4770      	bx	lr
 80068f6:	bf00      	nop
 80068f8:	4f54300a 	.word	0x4f54300a

080068fc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80068fc:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80068fe:	4903      	ldr	r1, [pc, #12]	; (800690c <MX_FATFS_Init+0x10>)
 8006900:	4803      	ldr	r0, [pc, #12]	; (8006910 <MX_FATFS_Init+0x14>)
 8006902:	f001 f83b 	bl	800797c <FATFS_LinkDriver>
 8006906:	4b03      	ldr	r3, [pc, #12]	; (8006914 <MX_FATFS_Init+0x18>)
 8006908:	7018      	strb	r0, [r3, #0]
 800690a:	bd08      	pop	{r3, pc}
 800690c:	2000b538 	.word	0x2000b538
 8006910:	20000028 	.word	0x20000028
 8006914:	2000b53c 	.word	0x2000b53c

08006918 <USER_status>:
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8006918:	4b02      	ldr	r3, [pc, #8]	; (8006924 <USER_status+0xc>)
 800691a:	2201      	movs	r2, #1
 800691c:	701a      	strb	r2, [r3, #0]
    return Stat;
 800691e:	7818      	ldrb	r0, [r3, #0]
  /* USER CODE END STATUS */
}
 8006920:	4770      	bx	lr
 8006922:	bf00      	nop
 8006924:	20000024 	.word	0x20000024

08006928 <USER_write>:
{ 
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
  /* USER CODE END WRITE */
}
 8006928:	2000      	movs	r0, #0
 800692a:	4770      	bx	lr

0800692c <USER_ioctl>:
{
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
    return res;
  /* USER CODE END IOCTL */
}
 800692c:	2001      	movs	r0, #1
 800692e:	4770      	bx	lr

08006930 <USER_read>:
 8006930:	2000      	movs	r0, #0
 8006932:	4770      	bx	lr

08006934 <USER_initialize>:
 8006934:	4b02      	ldr	r3, [pc, #8]	; (8006940 <USER_initialize+0xc>)
 8006936:	2201      	movs	r2, #1
 8006938:	701a      	strb	r2, [r3, #0]
 800693a:	7818      	ldrb	r0, [r3, #0]
 800693c:	4770      	bx	lr
 800693e:	bf00      	nop
 8006940:	20000024 	.word	0x20000024

08006944 <USBD_MSC_GetHSCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_CfgHSDesc);
 8006944:	2320      	movs	r3, #32
 8006946:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_CfgHSDesc;
}
 8006948:	4800      	ldr	r0, [pc, #0]	; (800694c <USBD_MSC_GetHSCfgDesc+0x8>)
 800694a:	4770      	bx	lr
 800694c:	20000094 	.word	0x20000094

08006950 <USBD_MSC_GetFSCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_CfgFSDesc);
 8006950:	2320      	movs	r3, #32
 8006952:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_CfgFSDesc;
}
 8006954:	4800      	ldr	r0, [pc, #0]	; (8006958 <USBD_MSC_GetFSCfgDesc+0x8>)
 8006956:	4770      	bx	lr
 8006958:	20000074 	.word	0x20000074

0800695c <USBD_MSC_GetOtherSpeedCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_OtherSpeedCfgDesc);
 800695c:	2320      	movs	r3, #32
 800695e:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_OtherSpeedCfgDesc;
}
 8006960:	4800      	ldr	r0, [pc, #0]	; (8006964 <USBD_MSC_GetOtherSpeedCfgDesc+0x8>)
 8006962:	4770      	bx	lr
 8006964:	200000c0 	.word	0x200000c0

08006968 <USBD_MSC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_MSC_DeviceQualifierDesc);
 8006968:	230a      	movs	r3, #10
 800696a:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_DeviceQualifierDesc;
}
 800696c:	4800      	ldr	r0, [pc, #0]	; (8006970 <USBD_MSC_GetDeviceQualifierDescriptor+0x8>)
 800696e:	4770      	bx	lr
 8006970:	200000b4 	.word	0x200000b4

08006974 <USBD_MSC_Init>:
{
 8006974:	b538      	push	{r3, r4, r5, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006976:	7c03      	ldrb	r3, [r0, #16]
{
 8006978:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800697a:	b9e3      	cbnz	r3, 80069b6 <USBD_MSC_Init+0x42>
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800697c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006980:	2202      	movs	r2, #2
 8006982:	2101      	movs	r1, #1
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006984:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8006986:	f007 f8ed 	bl	800db64 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800698a:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800698e:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8006992:	2202      	movs	r2, #2
 8006994:	2181      	movs	r1, #129	; 0x81
 8006996:	4620      	mov	r0, r4
 8006998:	f007 f8e4 	bl	800db64 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800699c:	62e5      	str	r5, [r4, #44]	; 0x2c
  pdev->pClassData = USBD_malloc(sizeof (USBD_MSC_BOT_HandleTypeDef));
 800699e:	f44f 701b 	mov.w	r0, #620	; 0x26c
 80069a2:	f007 f99b 	bl	800dcdc <USBD_static_malloc>
 80069a6:	f8c4 0290 	str.w	r0, [r4, #656]	; 0x290
  if(pdev->pClassData == NULL)
 80069aa:	b170      	cbz	r0, 80069ca <USBD_MSC_Init+0x56>
  MSC_BOT_Init(pdev);
 80069ac:	4620      	mov	r0, r4
 80069ae:	f000 f8ea 	bl	8006b86 <MSC_BOT_Init>
  return USBD_OK;
 80069b2:	2000      	movs	r0, #0
 80069b4:	bd38      	pop	{r3, r4, r5, pc}
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80069b6:	2340      	movs	r3, #64	; 0x40
 80069b8:	2202      	movs	r2, #2
 80069ba:	2101      	movs	r1, #1
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 80069bc:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80069be:	f007 f8d1 	bl	800db64 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 80069c2:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80069c6:	2340      	movs	r3, #64	; 0x40
 80069c8:	e7e3      	b.n	8006992 <USBD_MSC_Init+0x1e>
    return USBD_FAIL;
 80069ca:	2002      	movs	r0, #2
}
 80069cc:	bd38      	pop	{r3, r4, r5, pc}

080069ce <USBD_MSC_DeInit>:
{
 80069ce:	b538      	push	{r3, r4, r5, lr}
 80069d0:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 80069d2:	2101      	movs	r1, #1
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 80069d4:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 80069d6:	f007 f8d5 	bl	800db84 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 80069da:	2181      	movs	r1, #129	; 0x81
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 80069dc:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 80069e0:	4620      	mov	r0, r4
 80069e2:	f007 f8cf 	bl	800db84 <USBD_LL_CloseEP>
  MSC_BOT_DeInit(pdev);
 80069e6:	4620      	mov	r0, r4
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 80069e8:	62e5      	str	r5, [r4, #44]	; 0x2c
  MSC_BOT_DeInit(pdev);
 80069ea:	f000 f8f7 	bl	8006bdc <MSC_BOT_DeInit>
  if(pdev->pClassData != NULL)
 80069ee:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
 80069f2:	b118      	cbz	r0, 80069fc <USBD_MSC_DeInit+0x2e>
    USBD_free(pdev->pClassData);
 80069f4:	f007 f976 	bl	800dce4 <USBD_static_free>
    pdev->pClassData  = NULL;
 80069f8:	f8c4 5290 	str.w	r5, [r4, #656]	; 0x290
}
 80069fc:	2000      	movs	r0, #0
 80069fe:	bd38      	pop	{r3, r4, r5, pc}

08006a00 <USBD_MSC_Setup>:
{
 8006a00:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint16_t status_info = 0U;
 8006a04:	2300      	movs	r3, #0
 8006a06:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a0a:	780b      	ldrb	r3, [r1, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 8006a0c:	f8d0 7290 	ldr.w	r7, [r0, #656]	; 0x290
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a10:	f013 0260 	ands.w	r2, r3, #96	; 0x60
{
 8006a14:	4604      	mov	r4, r0
 8006a16:	460e      	mov	r6, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a18:	d02d      	beq.n	8006a76 <USBD_MSC_Setup+0x76>
 8006a1a:	2a20      	cmp	r2, #32
 8006a1c:	d104      	bne.n	8006a28 <USBD_MSC_Setup+0x28>
    switch (req->bRequest)
 8006a1e:	784a      	ldrb	r2, [r1, #1]
 8006a20:	2afe      	cmp	r2, #254	; 0xfe
 8006a22:	d005      	beq.n	8006a30 <USBD_MSC_Setup+0x30>
 8006a24:	2aff      	cmp	r2, #255	; 0xff
 8006a26:	d018      	beq.n	8006a5a <USBD_MSC_Setup+0x5a>
    USBD_CtlError (pdev, req);
 8006a28:	f000 ff2b 	bl	8007882 <USBD_CtlError>
    ret = USBD_FAIL;
 8006a2c:	2002      	movs	r0, #2
    break;
 8006a2e:	e01f      	b.n	8006a70 <USBD_MSC_Setup+0x70>
      if((req->wValue  == 0U) && (req->wLength == 1U) &&
 8006a30:	884d      	ldrh	r5, [r1, #2]
 8006a32:	2d00      	cmp	r5, #0
 8006a34:	d175      	bne.n	8006b22 <USBD_MSC_Setup+0x122>
 8006a36:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 8006a3a:	f1b8 0f01 	cmp.w	r8, #1
 8006a3e:	d170      	bne.n	8006b22 <USBD_MSC_Setup+0x122>
 8006a40:	061a      	lsls	r2, r3, #24
 8006a42:	d56e      	bpl.n	8006b22 <USBD_MSC_Setup+0x122>
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8006a44:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8006a48:	699b      	ldr	r3, [r3, #24]
 8006a4a:	4798      	blx	r3
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hmsc->max_lun, 1U);
 8006a4c:	4642      	mov	r2, r8
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8006a4e:	6038      	str	r0, [r7, #0]
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hmsc->max_lun, 1U);
 8006a50:	4639      	mov	r1, r7
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hmsc->interface, 1U);
 8006a52:	4620      	mov	r0, r4
 8006a54:	f000 ff3c 	bl	80078d0 <USBD_CtlSendData>
 8006a58:	e009      	b.n	8006a6e <USBD_MSC_Setup+0x6e>
      if((req->wValue  == 0U) && (req->wLength == 0U) &&
 8006a5a:	884a      	ldrh	r2, [r1, #2]
 8006a5c:	2a00      	cmp	r2, #0
 8006a5e:	d160      	bne.n	8006b22 <USBD_MSC_Setup+0x122>
 8006a60:	88cd      	ldrh	r5, [r1, #6]
 8006a62:	2d00      	cmp	r5, #0
 8006a64:	d15d      	bne.n	8006b22 <USBD_MSC_Setup+0x122>
 8006a66:	061b      	lsls	r3, r3, #24
 8006a68:	d45b      	bmi.n	8006b22 <USBD_MSC_Setup+0x122>
        MSC_BOT_Reset(pdev);
 8006a6a:	f000 f8ac 	bl	8006bc6 <MSC_BOT_Reset>
  uint8_t ret = USBD_OK;
 8006a6e:	2000      	movs	r0, #0
}
 8006a70:	b002      	add	sp, #8
 8006a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (req->bRequest)
 8006a76:	784b      	ldrb	r3, [r1, #1]
 8006a78:	2b0b      	cmp	r3, #11
 8006a7a:	d852      	bhi.n	8006b22 <USBD_MSC_Setup+0x122>
 8006a7c:	e8df f003 	tbb	[pc, r3]
 8006a80:	51511c06 	.word	0x51511c06
 8006a84:	51515151 	.word	0x51515151
 8006a88:	150e5151 	.word	0x150e5151
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a8c:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8006a90:	2b03      	cmp	r3, #3
 8006a92:	d146      	bne.n	8006b22 <USBD_MSC_Setup+0x122>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8006a94:	2202      	movs	r2, #2
 8006a96:	f10d 0106 	add.w	r1, sp, #6
 8006a9a:	e7da      	b.n	8006a52 <USBD_MSC_Setup+0x52>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a9c:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8006aa0:	2b03      	cmp	r3, #3
 8006aa2:	d13e      	bne.n	8006b22 <USBD_MSC_Setup+0x122>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hmsc->interface, 1U);
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	1d39      	adds	r1, r7, #4
 8006aa8:	e7d3      	b.n	8006a52 <USBD_MSC_Setup+0x52>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006aaa:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8006aae:	2b03      	cmp	r3, #3
 8006ab0:	d137      	bne.n	8006b22 <USBD_MSC_Setup+0x122>
        hmsc->interface = (uint8_t)(req->wValue);
 8006ab2:	788b      	ldrb	r3, [r1, #2]
 8006ab4:	607b      	str	r3, [r7, #4]
 8006ab6:	e7da      	b.n	8006a6e <USBD_MSC_Setup+0x6e>
      USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8006ab8:	7909      	ldrb	r1, [r1, #4]
 8006aba:	f007 f871 	bl	800dba0 <USBD_LL_FlushEP>
      USBD_LL_CloseEP (pdev , (uint8_t)req->wIndex);
 8006abe:	7931      	ldrb	r1, [r6, #4]
 8006ac0:	4620      	mov	r0, r4
 8006ac2:	f007 f85f 	bl	800db84 <USBD_LL_CloseEP>
      if((((uint8_t)req->wIndex) & 0x80U) == 0x80U)
 8006ac6:	88b3      	ldrh	r3, [r6, #4]
 8006ac8:	7c22      	ldrb	r2, [r4, #16]
 8006aca:	2114      	movs	r1, #20
 8006acc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006ad0:	f003 030f 	and.w	r3, r3, #15
        pdev->ep_in[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8006ad4:	fb01 4303 	mla	r3, r1, r3, r4
 8006ad8:	f04f 0100 	mov.w	r1, #0
      if((((uint8_t)req->wIndex) & 0x80U) == 0x80U)
 8006adc:	d011      	beq.n	8006b02 <USBD_MSC_Setup+0x102>
        pdev->ep_in[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8006ade:	6199      	str	r1, [r3, #24]
        if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006ae0:	b96a      	cbnz	r2, 8006afe <USBD_MSC_Setup+0xfe>
          USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8006ae2:	f44f 7300 	mov.w	r3, #512	; 0x200
          USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8006ae6:	2202      	movs	r2, #2
 8006ae8:	2181      	movs	r1, #129	; 0x81
 8006aea:	4620      	mov	r0, r4
 8006aec:	f007 f83a 	bl	800db64 <USBD_LL_OpenEP>
        pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8006af0:	2301      	movs	r3, #1
 8006af2:	62e3      	str	r3, [r4, #44]	; 0x2c
      MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8006af4:	7931      	ldrb	r1, [r6, #4]
 8006af6:	4620      	mov	r0, r4
 8006af8:	f000 f91a 	bl	8006d30 <MSC_BOT_CplClrFeature>
 8006afc:	e7b7      	b.n	8006a6e <USBD_MSC_Setup+0x6e>
          USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8006afe:	2340      	movs	r3, #64	; 0x40
 8006b00:	e7f1      	b.n	8006ae6 <USBD_MSC_Setup+0xe6>
        pdev->ep_out[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8006b02:	f8c3 1144 	str.w	r1, [r3, #324]	; 0x144
        if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006b06:	b952      	cbnz	r2, 8006b1e <USBD_MSC_Setup+0x11e>
          USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8006b08:	f44f 7300 	mov.w	r3, #512	; 0x200
          USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8006b0c:	2202      	movs	r2, #2
 8006b0e:	2101      	movs	r1, #1
 8006b10:	4620      	mov	r0, r4
 8006b12:	f007 f827 	bl	800db64 <USBD_LL_OpenEP>
        pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006b16:	2301      	movs	r3, #1
 8006b18:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
 8006b1c:	e7ea      	b.n	8006af4 <USBD_MSC_Setup+0xf4>
          USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8006b1e:	2340      	movs	r3, #64	; 0x40
 8006b20:	e7f4      	b.n	8006b0c <USBD_MSC_Setup+0x10c>
      USBD_CtlError (pdev, req);
 8006b22:	4631      	mov	r1, r6
 8006b24:	4620      	mov	r0, r4
 8006b26:	e77f      	b.n	8006a28 <USBD_MSC_Setup+0x28>

08006b28 <USBD_MSC_DataIn>:
{
 8006b28:	b508      	push	{r3, lr}
  MSC_BOT_DataIn(pdev , epnum);
 8006b2a:	f000 f879 	bl	8006c20 <MSC_BOT_DataIn>
}
 8006b2e:	2000      	movs	r0, #0
 8006b30:	bd08      	pop	{r3, pc}

08006b32 <USBD_MSC_DataOut>:
{
 8006b32:	b508      	push	{r3, lr}
  MSC_BOT_DataOut(pdev , epnum);
 8006b34:	f000 f890 	bl	8006c58 <MSC_BOT_DataOut>
}
 8006b38:	2000      	movs	r0, #0
 8006b3a:	bd08      	pop	{r3, pc}

08006b3c <USBD_MSC_RegisterStorage>:
* @retval status
*/
uint8_t  USBD_MSC_RegisterStorage  (USBD_HandleTypeDef   *pdev,
                                    USBD_StorageTypeDef *fops)
{
  if(fops != NULL)
 8006b3c:	b109      	cbz	r1, 8006b42 <USBD_MSC_RegisterStorage+0x6>
  {
    pdev->pUserData = fops;
 8006b3e:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  }
  return USBD_OK;
}
 8006b42:	2000      	movs	r0, #0
 8006b44:	4770      	bx	lr

08006b46 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort (USBD_HandleTypeDef  *pdev)
{
 8006b46:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006b48:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290

  if ((hmsc->cbw.bmFlags == 0U) &&
 8006b4c:	f894 3218 	ldrb.w	r3, [r4, #536]	; 0x218
{
 8006b50:	4605      	mov	r5, r0
  if ((hmsc->cbw.bmFlags == 0U) &&
 8006b52:	b93b      	cbnz	r3, 8006b64 <MSC_BOT_Abort+0x1e>
 8006b54:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8006b58:	b123      	cbz	r3, 8006b64 <MSC_BOT_Abort+0x1e>
      (hmsc->cbw.dDataLength != 0U) &&
 8006b5a:	7a63      	ldrb	r3, [r4, #9]
 8006b5c:	b913      	cbnz	r3, 8006b64 <MSC_BOT_Abort+0x1e>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR );
 8006b5e:	2101      	movs	r1, #1
 8006b60:	f007 f82c 	bl	800dbbc <USBD_LL_StallEP>
  }

  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8006b64:	2181      	movs	r1, #129	; 0x81
 8006b66:	4628      	mov	r0, r5
 8006b68:	f007 f828 	bl	800dbbc <USBD_LL_StallEP>

  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8006b6c:	7a63      	ldrb	r3, [r4, #9]
 8006b6e:	2b02      	cmp	r3, #2
 8006b70:	d108      	bne.n	8006b84 <MSC_BOT_Abort+0x3e>
  {
    USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006b72:	f504 7203 	add.w	r2, r4, #524	; 0x20c
 8006b76:	4628      	mov	r0, r5
 8006b78:	231f      	movs	r3, #31
 8006b7a:	2101      	movs	r1, #1
                            USBD_BOT_CBW_LENGTH);
  }
}
 8006b7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006b80:	f007 b868 	b.w	800dc54 <USBD_LL_PrepareReceive>
 8006b84:	bd70      	pop	{r4, r5, r6, pc}

08006b86 <MSC_BOT_Init>:
{
 8006b86:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006b88:	f8d0 5290 	ldr.w	r5, [r0, #656]	; 0x290
{
 8006b8c:	4604      	mov	r4, r0
  hmsc->bot_state = USBD_BOT_IDLE;
 8006b8e:	2000      	movs	r0, #0
 8006b90:	7228      	strb	r0, [r5, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8006b92:	7268      	strb	r0, [r5, #9]
  hmsc->scsi_sense_tail = 0U;
 8006b94:	f885 025d 	strb.w	r0, [r5, #605]	; 0x25d
  hmsc->scsi_sense_head = 0U;
 8006b98:	f885 025c 	strb.w	r0, [r5, #604]	; 0x25c
  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8006b9c:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4798      	blx	r3
  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8006ba4:	2101      	movs	r1, #1
 8006ba6:	4620      	mov	r0, r4
 8006ba8:	f006 fffa 	bl	800dba0 <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8006bac:	2181      	movs	r1, #129	; 0x81
 8006bae:	4620      	mov	r0, r4
 8006bb0:	f006 fff6 	bl	800dba0 <USBD_LL_FlushEP>
  USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006bb4:	f505 7203 	add.w	r2, r5, #524	; 0x20c
 8006bb8:	4620      	mov	r0, r4
 8006bba:	231f      	movs	r3, #31
 8006bbc:	2101      	movs	r1, #1
}
 8006bbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006bc2:	f007 b847 	b.w	800dc54 <USBD_LL_PrepareReceive>

08006bc6 <MSC_BOT_Reset>:
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006bc6:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290
  hmsc->bot_state  = USBD_BOT_IDLE;
 8006bca:	2300      	movs	r3, #0
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8006bcc:	2101      	movs	r1, #1
  hmsc->bot_state  = USBD_BOT_IDLE;
 8006bce:	7213      	strb	r3, [r2, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8006bd0:	7251      	strb	r1, [r2, #9]
  USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006bd2:	231f      	movs	r3, #31
 8006bd4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006bd8:	f007 b83c 	b.w	800dc54 <USBD_LL_PrepareReceive>

08006bdc <MSC_BOT_DeInit>:
  hmsc->bot_state  = USBD_BOT_IDLE;
 8006bdc:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290
 8006be0:	2200      	movs	r2, #0
 8006be2:	721a      	strb	r2, [r3, #8]
 8006be4:	4770      	bx	lr
	...

08006be8 <MSC_BOT_SendCSW>:
{
 8006be8:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006bea:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8006bee:	4b0b      	ldr	r3, [pc, #44]	; (8006c1c <MSC_BOT_SendCSW+0x34>)
 8006bf0:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
  hmsc->bot_state = USBD_BOT_IDLE;
 8006bf4:	2300      	movs	r3, #0
{
 8006bf6:	4605      	mov	r5, r0
  hmsc->csw.bStatus = CSW_Status;
 8006bf8:	f884 1238 	strb.w	r1, [r4, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_IDLE;
 8006bfc:	7223      	strb	r3, [r4, #8]
  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, (uint8_t *)(void *)&hmsc->csw,
 8006bfe:	f504 720b 	add.w	r2, r4, #556	; 0x22c
 8006c02:	230d      	movs	r3, #13
 8006c04:	2181      	movs	r1, #129	; 0x81
 8006c06:	f007 f817 	bl	800dc38 <USBD_LL_Transmit>
  USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006c0a:	f504 7203 	add.w	r2, r4, #524	; 0x20c
 8006c0e:	4628      	mov	r0, r5
 8006c10:	231f      	movs	r3, #31
 8006c12:	2101      	movs	r1, #1
}
 8006c14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006c18:	f007 b81c 	b.w	800dc54 <USBD_LL_PrepareReceive>
 8006c1c:	53425355 	.word	0x53425355

08006c20 <MSC_BOT_DataIn>:
{
 8006c20:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006c22:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290
  switch (hmsc->bot_state)
 8006c26:	7a1a      	ldrb	r2, [r3, #8]
 8006c28:	2a02      	cmp	r2, #2
{
 8006c2a:	4604      	mov	r4, r0
  switch (hmsc->bot_state)
 8006c2c:	d003      	beq.n	8006c36 <MSC_BOT_DataIn+0x16>
 8006c2e:	d312      	bcc.n	8006c56 <MSC_BOT_DataIn+0x36>
 8006c30:	2a04      	cmp	r2, #4
 8006c32:	d90e      	bls.n	8006c52 <MSC_BOT_DataIn+0x32>
 8006c34:	bd10      	pop	{r4, pc}
    if(SCSI_ProcessCmd(pdev,
 8006c36:	f203 221b 	addw	r2, r3, #539	; 0x21b
 8006c3a:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8006c3e:	f000 f8a3 	bl	8006d88 <SCSI_ProcessCmd>
 8006c42:	2800      	cmp	r0, #0
 8006c44:	da07      	bge.n	8006c56 <MSC_BOT_DataIn+0x36>
      MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8006c46:	2101      	movs	r1, #1
 8006c48:	4620      	mov	r0, r4
}
 8006c4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 8006c4e:	f7ff bfcb 	b.w	8006be8 <MSC_BOT_SendCSW>
 8006c52:	2100      	movs	r1, #0
 8006c54:	e7f9      	b.n	8006c4a <MSC_BOT_DataIn+0x2a>
 8006c56:	bd10      	pop	{r4, pc}

08006c58 <MSC_BOT_DataOut>:
{
 8006c58:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006c5a:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
  switch (hmsc->bot_state)
 8006c5e:	7a23      	ldrb	r3, [r4, #8]
{
 8006c60:	4605      	mov	r5, r0
  switch (hmsc->bot_state)
 8006c62:	b113      	cbz	r3, 8006c6a <MSC_BOT_DataOut+0x12>
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d058      	beq.n	8006d1a <MSC_BOT_DataOut+0xc2>
 8006c68:	bd70      	pop	{r4, r5, r6, pc}
  hmsc->csw.dTag = hmsc->cbw.dTag;
 8006c6a:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 8006c6e:	f8c4 3230 	str.w	r3, [r4, #560]	; 0x230
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8006c72:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8006c76:	f8c4 3234 	str.w	r3, [r4, #564]	; 0x234
  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8006c7a:	2101      	movs	r1, #1
 8006c7c:	f006 fff8 	bl	800dc70 <USBD_LL_GetRxDataSize>
 8006c80:	281f      	cmp	r0, #31
 8006c82:	f894 1219 	ldrb.w	r1, [r4, #537]	; 0x219
 8006c86:	d10b      	bne.n	8006ca0 <MSC_BOT_DataOut+0x48>
 8006c88:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 8006c8c:	4b27      	ldr	r3, [pc, #156]	; (8006d2c <MSC_BOT_DataOut+0xd4>)
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d106      	bne.n	8006ca0 <MSC_BOT_DataOut+0x48>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8006c92:	2901      	cmp	r1, #1
 8006c94:	d804      	bhi.n	8006ca0 <MSC_BOT_DataOut+0x48>
        (hmsc->cbw.bLUN > 1U) ||
 8006c96:	f894 321a 	ldrb.w	r3, [r4, #538]	; 0x21a
 8006c9a:	3b01      	subs	r3, #1
 8006c9c:	2b0f      	cmp	r3, #15
 8006c9e:	d90b      	bls.n	8006cb8 <MSC_BOT_DataOut+0x60>
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006ca0:	2320      	movs	r3, #32
 8006ca2:	2205      	movs	r2, #5
 8006ca4:	4628      	mov	r0, r5
 8006ca6:	f000 fa9d 	bl	80071e4 <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8006caa:	2302      	movs	r3, #2
 8006cac:	7263      	strb	r3, [r4, #9]
        MSC_BOT_Abort(pdev);
 8006cae:	4628      	mov	r0, r5
}
 8006cb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        MSC_BOT_Abort(pdev);
 8006cb4:	f7ff bf47 	b.w	8006b46 <MSC_BOT_Abort>
    if(SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006cb8:	f204 221b 	addw	r2, r4, #539	; 0x21b
 8006cbc:	4628      	mov	r0, r5
 8006cbe:	f000 f863 	bl	8006d88 <SCSI_ProcessCmd>
 8006cc2:	2800      	cmp	r0, #0
 8006cc4:	7a23      	ldrb	r3, [r4, #8]
 8006cc6:	da07      	bge.n	8006cd8 <MSC_BOT_DataOut+0x80>
      if(hmsc->bot_state == USBD_BOT_NO_DATA)
 8006cc8:	2b05      	cmp	r3, #5
 8006cca:	d1f0      	bne.n	8006cae <MSC_BOT_DataOut+0x56>
        MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8006ccc:	2101      	movs	r1, #1
        MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 8006cce:	4628      	mov	r0, r5
}
 8006cd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 8006cd4:	f7ff bf88 	b.w	8006be8 <MSC_BOT_SendCSW>
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8006cd8:	3b01      	subs	r3, #1
 8006cda:	2b02      	cmp	r3, #2
 8006cdc:	d925      	bls.n	8006d2a <MSC_BOT_DataOut+0xd2>
      if (hmsc->bot_data_length > 0U)
 8006cde:	8963      	ldrh	r3, [r4, #10]
 8006ce0:	b1cb      	cbz	r3, 8006d16 <MSC_BOT_DataOut+0xbe>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006ce2:	f8d5 1290 	ldr.w	r1, [r5, #656]	; 0x290
  hmsc->csw.dDataResidue -= len;
 8006ce6:	f8d1 0234 	ldr.w	r0, [r1, #564]	; 0x234
  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 8006cea:	f8d1 6214 	ldr.w	r6, [r1, #532]	; 0x214
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8006cee:	f104 020c 	add.w	r2, r4, #12
  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 8006cf2:	461c      	mov	r4, r3
  hmsc->csw.dDataResidue -= len;
 8006cf4:	1b00      	subs	r0, r0, r4
 8006cf6:	f8c1 0234 	str.w	r0, [r1, #564]	; 0x234
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8006cfa:	2000      	movs	r0, #0
 8006cfc:	f881 0238 	strb.w	r0, [r1, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8006d00:	2004      	movs	r0, #4
 8006d02:	7208      	strb	r0, [r1, #8]
  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 8006d04:	429e      	cmp	r6, r3
 8006d06:	bf38      	it	cc
 8006d08:	b2b3      	uxthcc	r3, r6
  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8006d0a:	4628      	mov	r0, r5
 8006d0c:	2181      	movs	r1, #129	; 0x81
}
 8006d0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8006d12:	f006 bf91 	b.w	800dc38 <USBD_LL_Transmit>
        MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 8006d16:	4619      	mov	r1, r3
 8006d18:	e7d9      	b.n	8006cce <MSC_BOT_DataOut+0x76>
    if(SCSI_ProcessCmd(pdev,
 8006d1a:	f204 221b 	addw	r2, r4, #539	; 0x21b
 8006d1e:	f894 1219 	ldrb.w	r1, [r4, #537]	; 0x219
 8006d22:	f000 f831 	bl	8006d88 <SCSI_ProcessCmd>
 8006d26:	2800      	cmp	r0, #0
 8006d28:	dbd0      	blt.n	8006ccc <MSC_BOT_DataOut+0x74>
 8006d2a:	bd70      	pop	{r4, r5, r6, pc}
 8006d2c:	43425355 	.word	0x43425355

08006d30 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature (USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8006d30:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006d32:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290

  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR)/* Bad CBW Signature */
 8006d36:	7a63      	ldrb	r3, [r4, #9]
 8006d38:	2b02      	cmp	r3, #2
 8006d3a:	d105      	bne.n	8006d48 <MSC_BOT_CplClrFeature+0x18>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8006d3c:	2181      	movs	r1, #129	; 0x81
 8006d3e:	f006 ff3d 	bl	800dbbc <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8006d42:	2300      	movs	r3, #0
 8006d44:	7263      	strb	r3, [r4, #9]
 8006d46:	bd10      	pop	{r4, pc}
  }
  else if(((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8006d48:	060a      	lsls	r2, r1, #24
 8006d4a:	d506      	bpl.n	8006d5a <MSC_BOT_CplClrFeature+0x2a>
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d004      	beq.n	8006d5a <MSC_BOT_CplClrFeature+0x2a>
  {
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8006d50:	2101      	movs	r1, #1
  }
  else
  {
    return;
  }
}
 8006d52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8006d56:	f7ff bf47 	b.w	8006be8 <MSC_BOT_SendCSW>
 8006d5a:	bd10      	pop	{r4, pc}

08006d5c <SCSI_SenseCode.constprop.8>:
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006d5c:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 8006d60:	f892 325d 	ldrb.w	r3, [r2, #605]	; 0x25d
 8006d64:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
  hmsc->scsi_sense_tail++;
 8006d68:	3301      	adds	r3, #1
 8006d6a:	b2db      	uxtb	r3, r3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 8006d6c:	f880 123c 	strb.w	r1, [r0, #572]	; 0x23c
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8006d70:	2b04      	cmp	r3, #4
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 8006d72:	f04f 0100 	mov.w	r1, #0
 8006d76:	f880 1240 	strb.w	r1, [r0, #576]	; 0x240
  hmsc->scsi_sense_tail++;
 8006d7a:	bf14      	ite	ne
 8006d7c:	f882 325d 	strbne.w	r3, [r2, #605]	; 0x25d
  {
    hmsc->scsi_sense_tail = 0U;
 8006d80:	f882 125d 	strbeq.w	r1, [r2, #605]	; 0x25d
 8006d84:	4770      	bx	lr
	...

08006d88 <SCSI_ProcessCmd>:
{
 8006d88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  switch (cmd[0])
 8006d8c:	7813      	ldrb	r3, [r2, #0]
 8006d8e:	2b1e      	cmp	r3, #30
{
 8006d90:	4605      	mov	r5, r0
 8006d92:	460c      	mov	r4, r1
 8006d94:	4617      	mov	r7, r2
  switch (cmd[0])
 8006d96:	d016      	beq.n	8006dc6 <SCSI_ProcessCmd+0x3e>
 8006d98:	d81a      	bhi.n	8006dd0 <SCSI_ProcessCmd+0x48>
 8006d9a:	2b12      	cmp	r3, #18
 8006d9c:	f000 80e3 	beq.w	8006f66 <SCSI_ProcessCmd+0x1de>
 8006da0:	d80c      	bhi.n	8006dbc <SCSI_ProcessCmd+0x34>
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	f000 8092 	beq.w	8006ecc <SCSI_ProcessCmd+0x144>
 8006da8:	2b03      	cmp	r3, #3
 8006daa:	f000 80ad 	beq.w	8006f08 <SCSI_ProcessCmd+0x180>
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8006dae:	2105      	movs	r1, #5
 8006db0:	4628      	mov	r0, r5
 8006db2:	f7ff ffd3 	bl	8006d5c <SCSI_SenseCode.constprop.8>
    return -1;
 8006db6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006dba:	e0a1      	b.n	8006f00 <SCSI_ProcessCmd+0x178>
  switch (cmd[0])
 8006dbc:	2b1a      	cmp	r3, #26
 8006dbe:	f000 80fa 	beq.w	8006fb6 <SCSI_ProcessCmd+0x22e>
 8006dc2:	2b1b      	cmp	r3, #27
 8006dc4:	d1f3      	bne.n	8006dae <SCSI_ProcessCmd+0x26>
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
  hmsc->bot_data_length = 0U;
 8006dc6:	f8d5 3290 	ldr.w	r3, [r5, #656]	; 0x290
 8006dca:	2400      	movs	r4, #0
  if(SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
                            hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */
  }
  hmsc->bot_data_length = 0U;
 8006dcc:	815c      	strh	r4, [r3, #10]
 8006dce:	e097      	b.n	8006f00 <SCSI_ProcessCmd+0x178>
  switch (cmd[0])
 8006dd0:	2b28      	cmp	r3, #40	; 0x28
 8006dd2:	f000 813a 	beq.w	800704a <SCSI_ProcessCmd+0x2c2>
 8006dd6:	d827      	bhi.n	8006e28 <SCSI_ProcessCmd+0xa0>
 8006dd8:	2b23      	cmp	r3, #35	; 0x23
 8006dda:	f000 810a 	beq.w	8006ff2 <SCSI_ProcessCmd+0x26a>
 8006dde:	2b25      	cmp	r3, #37	; 0x25
 8006de0:	d1e5      	bne.n	8006dae <SCSI_ProcessCmd+0x26>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006de2:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 8006de6:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8006dea:	f206 225e 	addw	r2, r6, #606	; 0x25e
 8006dee:	4620      	mov	r0, r4
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	f506 7118 	add.w	r1, r6, #608	; 0x260
 8006df6:	4798      	blx	r3
 8006df8:	4604      	mov	r4, r0
 8006dfa:	2800      	cmp	r0, #0
 8006dfc:	f040 810d 	bne.w	800701a <SCSI_ProcessCmd+0x292>
    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8006e00:	f8d6 3260 	ldr.w	r3, [r6, #608]	; 0x260
    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8006e04:	7430      	strb	r0, [r6, #16]
    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8006e06:	3b01      	subs	r3, #1
 8006e08:	0e1a      	lsrs	r2, r3, #24
 8006e0a:	7332      	strb	r2, [r6, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8006e0c:	0c1a      	lsrs	r2, r3, #16
 8006e0e:	7372      	strb	r2, [r6, #13]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8006e10:	73f3      	strb	r3, [r6, #15]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8006e12:	0a1a      	lsrs	r2, r3, #8
    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8006e14:	f8b6 325e 	ldrh.w	r3, [r6, #606]	; 0x25e
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8006e18:	73b2      	strb	r2, [r6, #14]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8006e1a:	74f3      	strb	r3, [r6, #19]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8006e1c:	0a1a      	lsrs	r2, r3, #8
    hmsc->bot_data_length = 8U;
 8006e1e:	2308      	movs	r3, #8
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8006e20:	7470      	strb	r0, [r6, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8006e22:	74b2      	strb	r2, [r6, #18]
    hmsc->bot_data_length = 8U;
 8006e24:	8173      	strh	r3, [r6, #10]
 8006e26:	e06b      	b.n	8006f00 <SCSI_ProcessCmd+0x178>
  switch (cmd[0])
 8006e28:	2b2f      	cmp	r3, #47	; 0x2f
 8006e2a:	f000 81c2 	beq.w	80071b2 <SCSI_ProcessCmd+0x42a>
 8006e2e:	2b5a      	cmp	r3, #90	; 0x5a
 8006e30:	f000 80d0 	beq.w	8006fd4 <SCSI_ProcessCmd+0x24c>
 8006e34:	2b2a      	cmp	r3, #42	; 0x2a
 8006e36:	d1ba      	bne.n	8006dae <SCSI_ProcessCmd+0x26>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 8006e38:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8006e3c:	7a33      	ldrb	r3, [r6, #8]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	f040 8177 	bne.w	8007132 <SCSI_ProcessCmd+0x3aa>
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8006e44:	f996 3218 	ldrsb.w	r3, [r6, #536]	; 0x218
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	db44      	blt.n	8006ed6 <SCSI_ProcessCmd+0x14e>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8006e4c:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8006e50:	4608      	mov	r0, r1
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	4798      	blx	r3
 8006e56:	2800      	cmp	r0, #0
 8006e58:	f040 80df 	bne.w	800701a <SCSI_ProcessCmd+0x292>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8006e5c:	f8d5 3294 	ldr.w	r3, [r5, #660]	; 0x294
 8006e60:	4620      	mov	r0, r4
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	4798      	blx	r3
 8006e66:	4604      	mov	r4, r0
 8006e68:	2800      	cmp	r0, #0
 8006e6a:	f040 80d6 	bne.w	800701a <SCSI_ProcessCmd+0x292>
                          ((uint32_t)params[3] << 16) |
 8006e6e:	78fa      	ldrb	r2, [r7, #3]
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006e70:	78bb      	ldrb	r3, [r7, #2]
                          ((uint32_t)params[3] << 16) |
 8006e72:	0412      	lsls	r2, r2, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006e74:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
                           (uint32_t)params[5];
 8006e78:	797b      	ldrb	r3, [r7, #5]
                          ((uint32_t)params[4] << 8) |
 8006e7a:	431a      	orrs	r2, r3
 8006e7c:	793b      	ldrb	r3, [r7, #4]
 8006e7e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006e82:	f8c6 2264 	str.w	r2, [r6, #612]	; 0x264
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8006e86:	79f9      	ldrb	r1, [r7, #7]
                          (uint32_t)params[8];
 8006e88:	7a3b      	ldrb	r3, [r7, #8]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8006e8a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
static int8_t SCSI_CheckAddressRange (USBD_HandleTypeDef *pdev, uint8_t lun,
                                      uint32_t blk_offset, uint32_t blk_nbr)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8006e8e:	f8d5 1290 	ldr.w	r1, [r5, #656]	; 0x290
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8006e92:	f8c6 3268 	str.w	r3, [r6, #616]	; 0x268
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8006e96:	f8d1 1260 	ldr.w	r1, [r1, #608]	; 0x260
 8006e9a:	441a      	add	r2, r3
 8006e9c:	428a      	cmp	r2, r1
 8006e9e:	d81a      	bhi.n	8006ed6 <SCSI_ProcessCmd+0x14e>
    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8006ea0:	f8b6 225e 	ldrh.w	r2, [r6, #606]	; 0x25e
 8006ea4:	4353      	muls	r3, r2
    if (hmsc->cbw.dDataLength != len)
 8006ea6:	f8d6 2214 	ldr.w	r2, [r6, #532]	; 0x214
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d113      	bne.n	8006ed6 <SCSI_ProcessCmd+0x14e>
    len = MIN(len, MSC_MEDIA_PACKET);
 8006eae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8006eb2:	f04f 0101 	mov.w	r1, #1
    len = MIN(len, MSC_MEDIA_PACKET);
 8006eb6:	bf28      	it	cs
 8006eb8:	f44f 7300 	movcs.w	r3, #512	; 0x200
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8006ebc:	7231      	strb	r1, [r6, #8]
    USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	f106 020c 	add.w	r2, r6, #12
 8006ec4:	4628      	mov	r0, r5
 8006ec6:	f006 fec5 	bl	800dc54 <USBD_LL_PrepareReceive>
 8006eca:	e019      	b.n	8006f00 <SCSI_ProcessCmd+0x178>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006ecc:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
  if (hmsc->cbw.dDataLength != 0U)
 8006ed0:	f8d6 7214 	ldr.w	r7, [r6, #532]	; 0x214
 8006ed4:	b127      	cbz	r7, 8006ee0 <SCSI_ProcessCmd+0x158>
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006ed6:	2105      	movs	r1, #5
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
                              hmsc->bot_data,
                              hmsc->scsi_blk_addr,
                              (len / hmsc->scsi_blk_size)) < 0)
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8006ed8:	4628      	mov	r0, r5
 8006eda:	f7ff ff3f 	bl	8006d5c <SCSI_SenseCode.constprop.8>
 8006ede:	e00c      	b.n	8006efa <SCSI_ProcessCmd+0x172>
  if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8006ee0:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8006ee4:	4608      	mov	r0, r1
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	4798      	blx	r3
 8006eea:	4604      	mov	r4, r0
 8006eec:	b138      	cbz	r0, 8006efe <SCSI_ProcessCmd+0x176>
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006eee:	2102      	movs	r1, #2
 8006ef0:	4628      	mov	r0, r5
 8006ef2:	f7ff ff33 	bl	8006d5c <SCSI_SenseCode.constprop.8>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8006ef6:	2305      	movs	r3, #5
 8006ef8:	7233      	strb	r3, [r6, #8]
  return 0;
 8006efa:	2400      	movs	r4, #0
 8006efc:	e000      	b.n	8006f00 <SCSI_ProcessCmd+0x178>
  hmsc->bot_data_length = 0U;
 8006efe:	8170      	strh	r0, [r6, #10]
}
 8006f00:	4620      	mov	r0, r4
 8006f02:	b003      	add	sp, #12
 8006f04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f08:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290
    hmsc->bot_data[i] = 0U;
 8006f0c:	2000      	movs	r0, #0
 8006f0e:	f103 020c 	add.w	r2, r3, #12
 8006f12:	f103 011e 	add.w	r1, r3, #30
 8006f16:	f802 0b01 	strb.w	r0, [r2], #1
  for(i = 0U ;i < REQUEST_SENSE_DATA_LEN; i++)
 8006f1a:	428a      	cmp	r2, r1
 8006f1c:	d1fb      	bne.n	8006f16 <SCSI_ProcessCmd+0x18e>
  hmsc->bot_data[0]	= 0x70U;
 8006f1e:	2270      	movs	r2, #112	; 0x70
 8006f20:	731a      	strb	r2, [r3, #12]
  hmsc->bot_data[7]	= REQUEST_SENSE_DATA_LEN - 6U;
 8006f22:	220c      	movs	r2, #12
 8006f24:	74da      	strb	r2, [r3, #19]
  if((hmsc->scsi_sense_head != hmsc->scsi_sense_tail)) {
 8006f26:	f893 125d 	ldrb.w	r1, [r3, #605]	; 0x25d
 8006f2a:	f893 225c 	ldrb.w	r2, [r3, #604]	; 0x25c
 8006f2e:	4291      	cmp	r1, r2
 8006f30:	d012      	beq.n	8006f58 <SCSI_ProcessCmd+0x1d0>
 8006f32:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
    hmsc->scsi_sense_head++;
 8006f36:	3201      	adds	r2, #1
    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8006f38:	f891 423c 	ldrb.w	r4, [r1, #572]	; 0x23c
 8006f3c:	739c      	strb	r4, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8006f3e:	f891 4241 	ldrb.w	r4, [r1, #577]	; 0x241
 8006f42:	761c      	strb	r4, [r3, #24]
    hmsc->scsi_sense_head++;
 8006f44:	b2d2      	uxtb	r2, r2
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8006f46:	f891 1240 	ldrb.w	r1, [r1, #576]	; 0x240
 8006f4a:	7659      	strb	r1, [r3, #25]
    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8006f4c:	2a04      	cmp	r2, #4
    hmsc->scsi_sense_head++;
 8006f4e:	bf14      	ite	ne
 8006f50:	f883 225c 	strbne.w	r2, [r3, #604]	; 0x25c
      hmsc->scsi_sense_head = 0U;
 8006f54:	f883 025c 	strbeq.w	r0, [r3, #604]	; 0x25c
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8006f58:	2212      	movs	r2, #18
 8006f5a:	815a      	strh	r2, [r3, #10]
  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8006f5c:	793a      	ldrb	r2, [r7, #4]
 8006f5e:	2a12      	cmp	r2, #18
    hmsc->bot_data_length = params[4];
 8006f60:	bf98      	it	ls
 8006f62:	815a      	strhls	r2, [r3, #10]
 8006f64:	e7c9      	b.n	8006efa <SCSI_ProcessCmd+0x172>
  if (params[1] & 0x01U)/*Evpd is set*/
 8006f66:	787b      	ldrb	r3, [r7, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006f68:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290
  if (params[1] & 0x01U)/*Evpd is set*/
 8006f6c:	07db      	lsls	r3, r3, #31
 8006f6e:	d50c      	bpl.n	8006f8a <SCSI_ProcessCmd+0x202>
    hmsc->bot_data_length = len;
 8006f70:	2307      	movs	r3, #7
 8006f72:	4999      	ldr	r1, [pc, #612]	; (80071d8 <SCSI_ProcessCmd+0x450>)
 8006f74:	8153      	strh	r3, [r2, #10]
 8006f76:	f102 0312 	add.w	r3, r2, #18
 8006f7a:	320b      	adds	r2, #11
      hmsc->bot_data[len] = MSC_Page00_Inquiry_Data[len];
 8006f7c:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
 8006f80:	f803 0901 	strb.w	r0, [r3], #-1
    while (len)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d1f9      	bne.n	8006f7c <SCSI_ProcessCmd+0x1f4>
 8006f88:	e7b7      	b.n	8006efa <SCSI_ProcessCmd+0x172>
    pPage = (uint8_t *)(void *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8006f8a:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8006f8e:	69db      	ldr	r3, [r3, #28]
 8006f90:	eb01 04c1 	add.w	r4, r1, r1, lsl #3
 8006f94:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006f98:	7939      	ldrb	r1, [r7, #4]
    len = (uint16_t)pPage[4] + 5U;
 8006f9a:	7923      	ldrb	r3, [r4, #4]
 8006f9c:	3305      	adds	r3, #5
 8006f9e:	428b      	cmp	r3, r1
 8006fa0:	bf28      	it	cs
 8006fa2:	460b      	movcs	r3, r1
    hmsc->bot_data_length = len;
 8006fa4:	8153      	strh	r3, [r2, #10]
    while (len)
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d0a7      	beq.n	8006efa <SCSI_ProcessCmd+0x172>
      len--;
 8006faa:	3b01      	subs	r3, #1
 8006fac:	b29b      	uxth	r3, r3
      hmsc->bot_data[len] = pPage[len];
 8006fae:	18d1      	adds	r1, r2, r3
 8006fb0:	5ce0      	ldrb	r0, [r4, r3]
 8006fb2:	7308      	strb	r0, [r1, #12]
 8006fb4:	e7f7      	b.n	8006fa6 <SCSI_ProcessCmd+0x21e>
 8006fb6:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290
 8006fba:	4988      	ldr	r1, [pc, #544]	; (80071dc <SCSI_ProcessCmd+0x454>)
  hmsc->bot_data_length = len;
 8006fbc:	2208      	movs	r2, #8
 8006fbe:	815a      	strh	r2, [r3, #10]
 8006fc0:	f103 0213 	add.w	r2, r3, #19
 8006fc4:	330b      	adds	r3, #11
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 8006fc6:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
 8006fca:	f802 0901 	strb.w	r0, [r2], #-1
  while (len)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d1f9      	bne.n	8006fc6 <SCSI_ProcessCmd+0x23e>
 8006fd2:	e792      	b.n	8006efa <SCSI_ProcessCmd+0x172>
 8006fd4:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290
 8006fd8:	4981      	ldr	r1, [pc, #516]	; (80071e0 <SCSI_ProcessCmd+0x458>)
  hmsc->bot_data_length = len;
 8006fda:	2208      	movs	r2, #8
 8006fdc:	815a      	strh	r2, [r3, #10]
 8006fde:	f103 0213 	add.w	r2, r3, #19
 8006fe2:	330b      	adds	r3, #11
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 8006fe4:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
 8006fe8:	f802 0901 	strb.w	r0, [r2], #-1
  while (len)
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d1f9      	bne.n	8006fe4 <SCSI_ProcessCmd+0x25c>
 8006ff0:	e783      	b.n	8006efa <SCSI_ProcessCmd+0x172>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006ff2:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
    hmsc->bot_data[i] = 0U;
 8006ff6:	2100      	movs	r1, #0
 8006ff8:	f106 030c 	add.w	r3, r6, #12
 8006ffc:	f106 0218 	add.w	r2, r6, #24
 8007000:	f803 1b01 	strb.w	r1, [r3], #1
  for(i = 0U; i < 12U ; i++)
 8007004:	4293      	cmp	r3, r2
 8007006:	d1fb      	bne.n	8007000 <SCSI_ProcessCmd+0x278>
  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0U)
 8007008:	f8d5 3294 	ldr.w	r3, [r5, #660]	; 0x294
 800700c:	f10d 0202 	add.w	r2, sp, #2
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	a901      	add	r1, sp, #4
 8007014:	4620      	mov	r0, r4
 8007016:	4798      	blx	r3
 8007018:	b108      	cbz	r0, 800701e <SCSI_ProcessCmd+0x296>
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800701a:	2102      	movs	r1, #2
 800701c:	e75c      	b.n	8006ed8 <SCSI_ProcessCmd+0x150>
    hmsc->bot_data[3] = 0x08U;
 800701e:	2308      	movs	r3, #8
 8007020:	73f3      	strb	r3, [r6, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8007022:	9b01      	ldr	r3, [sp, #4]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8007024:	7570      	strb	r0, [r6, #21]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8007026:	3b01      	subs	r3, #1
 8007028:	0e1a      	lsrs	r2, r3, #24
 800702a:	7432      	strb	r2, [r6, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800702c:	0c1a      	lsrs	r2, r3, #16
 800702e:	7472      	strb	r2, [r6, #17]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8007030:	74f3      	strb	r3, [r6, #19]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8007032:	0a1a      	lsrs	r2, r3, #8
    hmsc->bot_data[8] = 0x02U;
 8007034:	2302      	movs	r3, #2
 8007036:	7533      	strb	r3, [r6, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8007038:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800703c:	74b2      	strb	r2, [r6, #18]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 800703e:	75f3      	strb	r3, [r6, #23]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8007040:	0a1a      	lsrs	r2, r3, #8
    hmsc->bot_data_length = 12U;
 8007042:	230c      	movs	r3, #12
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8007044:	75b2      	strb	r2, [r6, #22]
    hmsc->bot_data_length = 12U;
 8007046:	8173      	strh	r3, [r6, #10]
 8007048:	e757      	b.n	8006efa <SCSI_ProcessCmd+0x172>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 800704a:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
  if(hmsc->bot_state == USBD_BOT_IDLE)  /* Idle */
 800704e:	7a33      	ldrb	r3, [r6, #8]
 8007050:	bb7b      	cbnz	r3, 80070b2 <SCSI_ProcessCmd+0x32a>
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8007052:	f996 3218 	ldrsb.w	r3, [r6, #536]	; 0x218
 8007056:	2b00      	cmp	r3, #0
 8007058:	f6bf af3d 	bge.w	8006ed6 <SCSI_ProcessCmd+0x14e>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800705c:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8007060:	4608      	mov	r0, r1
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	4798      	blx	r3
 8007066:	2800      	cmp	r0, #0
 8007068:	d1d7      	bne.n	800701a <SCSI_ProcessCmd+0x292>
                          ((uint32_t)params[3] << 16) |
 800706a:	78fb      	ldrb	r3, [r7, #3]
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800706c:	78ba      	ldrb	r2, [r7, #2]
                          ((uint32_t)params[3] << 16) |
 800706e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007070:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                           (uint32_t)params[5];
 8007074:	797a      	ldrb	r2, [r7, #5]
                          ((uint32_t)params[4] <<  8) |
 8007076:	4313      	orrs	r3, r2
 8007078:	793a      	ldrb	r2, [r7, #4]
 800707a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800707e:	f8c6 3264 	str.w	r3, [r6, #612]	; 0x264
    hmsc->scsi_blk_len =  ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8007082:	79f9      	ldrb	r1, [r7, #7]
 8007084:	7a3a      	ldrb	r2, [r7, #8]
 8007086:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800708a:	f8d5 1290 	ldr.w	r1, [r5, #656]	; 0x290
    hmsc->scsi_blk_len =  ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800708e:	f8c6 2268 	str.w	r2, [r6, #616]	; 0x268
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8007092:	f8d1 1260 	ldr.w	r1, [r1, #608]	; 0x260
 8007096:	4413      	add	r3, r2
 8007098:	428b      	cmp	r3, r1
 800709a:	f63f af1c 	bhi.w	8006ed6 <SCSI_ProcessCmd+0x14e>
    hmsc->bot_state = USBD_BOT_DATA_IN;
 800709e:	2302      	movs	r3, #2
 80070a0:	7233      	strb	r3, [r6, #8]
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80070a2:	f8b6 325e 	ldrh.w	r3, [r6, #606]	; 0x25e
 80070a6:	435a      	muls	r2, r3
 80070a8:	f8d6 3214 	ldr.w	r3, [r6, #532]	; 0x214
 80070ac:	4293      	cmp	r3, r2
 80070ae:	f47f af12 	bne.w	8006ed6 <SCSI_ProcessCmd+0x14e>
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80070b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070b6:	8173      	strh	r3, [r6, #10]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 80070b8:	f8d5 6290 	ldr.w	r6, [r5, #656]	; 0x290
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 80070bc:	f8d5 2294 	ldr.w	r2, [r5, #660]	; 0x294
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80070c0:	f8b6 325e 	ldrh.w	r3, [r6, #606]	; 0x25e
 80070c4:	f8d6 7268 	ldr.w	r7, [r6, #616]	; 0x268
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 80070c8:	f8d2 9010 	ldr.w	r9, [r2, #16]
 80070cc:	f8d6 2264 	ldr.w	r2, [r6, #612]	; 0x264
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80070d0:	435f      	muls	r7, r3
  len = MIN(len, MSC_MEDIA_PACKET);
 80070d2:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
                              hmsc->bot_data,
 80070d6:	f106 080c 	add.w	r8, r6, #12
  len = MIN(len, MSC_MEDIA_PACKET);
 80070da:	bf28      	it	cs
 80070dc:	f44f 7700 	movcs.w	r7, #512	; 0x200
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 80070e0:	4641      	mov	r1, r8
                              (len / hmsc->scsi_blk_size)) < 0)
 80070e2:	fbb7 f3f3 	udiv	r3, r7, r3
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 80070e6:	4620      	mov	r0, r4
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	47c8      	blx	r9
 80070ec:	2800      	cmp	r0, #0
 80070ee:	da01      	bge.n	80070f4 <SCSI_ProcessCmd+0x36c>
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 80070f0:	2104      	movs	r1, #4
 80070f2:	e6f1      	b.n	8006ed8 <SCSI_ProcessCmd+0x150>
    return -1;
  }

  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 80070f4:	b2bb      	uxth	r3, r7
 80070f6:	4642      	mov	r2, r8
 80070f8:	2181      	movs	r1, #129	; 0x81
 80070fa:	4628      	mov	r0, r5
 80070fc:	f006 fd9c 	bl	800dc38 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8007100:	f8b6 425e 	ldrh.w	r4, [r6, #606]	; 0x25e
 8007104:	f8d6 2264 	ldr.w	r2, [r6, #612]	; 0x264
 8007108:	fbb7 f3f4 	udiv	r3, r7, r4
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800710c:	f8d6 4268 	ldr.w	r4, [r6, #616]	; 0x268
  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8007110:	441a      	add	r2, r3
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8007112:	1ae4      	subs	r4, r4, r3

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8007114:	f8d6 3234 	ldr.w	r3, [r6, #564]	; 0x234
  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8007118:	f8c6 2264 	str.w	r2, [r6, #612]	; 0x264
  hmsc->csw.dDataResidue -= len;
 800711c:	1bdf      	subs	r7, r3, r7
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800711e:	f8c6 4268 	str.w	r4, [r6, #616]	; 0x268
  hmsc->csw.dDataResidue -= len;
 8007122:	f8c6 7234 	str.w	r7, [r6, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 8007126:	2c00      	cmp	r4, #0
 8007128:	f47f aee7 	bne.w	8006efa <SCSI_ProcessCmd+0x172>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800712c:	2303      	movs	r3, #3
 800712e:	7233      	strb	r3, [r6, #8]
 8007130:	e6e6      	b.n	8006f00 <SCSI_ProcessCmd+0x178>
*/

static int8_t SCSI_ProcessWrite (USBD_HandleTypeDef  *pdev, uint8_t lun)
{
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007132:	f8b6 325e 	ldrh.w	r3, [r6, #606]	; 0x25e
 8007136:	f8d6 7268 	ldr.w	r7, [r6, #616]	; 0x268

  len = MIN(len, MSC_MEDIA_PACKET);

  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800713a:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800713e:	435f      	muls	r7, r3
  len = MIN(len, MSC_MEDIA_PACKET);
 8007140:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8007144:	f106 080c 	add.w	r8, r6, #12
  len = MIN(len, MSC_MEDIA_PACKET);
 8007148:	bf28      	it	cs
 800714a:	f44f 7700 	movcs.w	r7, #512	; 0x200
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800714e:	f8d2 9014 	ldr.w	r9, [r2, #20]
                             hmsc->scsi_blk_addr,
                             (len / hmsc->scsi_blk_size)) < 0)
 8007152:	fbb7 f3f3 	udiv	r3, r7, r3
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8007156:	f8d6 2264 	ldr.w	r2, [r6, #612]	; 0x264
 800715a:	b29b      	uxth	r3, r3
 800715c:	4641      	mov	r1, r8
 800715e:	4620      	mov	r0, r4
 8007160:	47c8      	blx	r9
 8007162:	2800      	cmp	r0, #0
 8007164:	dbc4      	blt.n	80070f0 <SCSI_ProcessCmd+0x368>
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);

    return -1;
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8007166:	f8d6 2264 	ldr.w	r2, [r6, #612]	; 0x264
 800716a:	f8b6 125e 	ldrh.w	r1, [r6, #606]	; 0x25e
 800716e:	fbb7 f0f1 	udiv	r0, r7, r1
 8007172:	4402      	add	r2, r0
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8007174:	f8d6 3268 	ldr.w	r3, [r6, #616]	; 0x268
  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8007178:	f8c6 2264 	str.w	r2, [r6, #612]	; 0x264

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800717c:	f8d6 2234 	ldr.w	r2, [r6, #564]	; 0x234
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8007180:	1a1b      	subs	r3, r3, r0
  hmsc->csw.dDataResidue -= len;
 8007182:	1bd7      	subs	r7, r2, r7
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8007184:	f8c6 3268 	str.w	r3, [r6, #616]	; 0x268
  hmsc->csw.dDataResidue -= len;
 8007188:	f8c6 7234 	str.w	r7, [r6, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 800718c:	b923      	cbnz	r3, 8007198 <SCSI_ProcessCmd+0x410>
  {
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 800718e:	2100      	movs	r1, #0
 8007190:	4628      	mov	r0, r5
 8007192:	f7ff fd29 	bl	8006be8 <MSC_BOT_SendCSW>
 8007196:	e6b0      	b.n	8006efa <SCSI_ProcessCmd+0x172>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8007198:	434b      	muls	r3, r1
 800719a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800719e:	bf28      	it	cs
 80071a0:	f44f 7300 	movcs.w	r3, #512	; 0x200
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	4642      	mov	r2, r8
 80071a8:	2101      	movs	r1, #1
 80071aa:	4628      	mov	r0, r5
 80071ac:	f006 fd52 	bl	800dc54 <USBD_LL_PrepareReceive>
 80071b0:	e6a3      	b.n	8006efa <SCSI_ProcessCmd+0x172>
  if ((params[1]& 0x02U) == 0x02U)
 80071b2:	7854      	ldrb	r4, [r2, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 80071b4:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290
  if ((params[1]& 0x02U) == 0x02U)
 80071b8:	f014 0402 	ands.w	r4, r4, #2
 80071bc:	f47f ae8b 	bne.w	8006ed6 <SCSI_ProcessCmd+0x14e>
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 80071c0:	f8d3 1268 	ldr.w	r1, [r3, #616]	; 0x268
 80071c4:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 80071c8:	440a      	add	r2, r1
 80071ca:	f8d3 1260 	ldr.w	r1, [r3, #608]	; 0x260
 80071ce:	428a      	cmp	r2, r1
 80071d0:	f67f adfc 	bls.w	8006dcc <SCSI_ProcessCmd+0x44>
 80071d4:	e67f      	b.n	8006ed6 <SCSI_ProcessCmd+0x14e>
 80071d6:	bf00      	nop
 80071d8:	0801cf77 	.word	0x0801cf77
 80071dc:	0801cf70 	.word	0x0801cf70
 80071e0:	0801cf68 	.word	0x0801cf68

080071e4 <SCSI_SenseCode>:
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 80071e4:	f8d0 1290 	ldr.w	r1, [r0, #656]	; 0x290
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 80071e8:	f891 325d 	ldrb.w	r3, [r1, #605]	; 0x25d
 80071ec:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
  hmsc->scsi_sense_tail++;
 80071f0:	3301      	adds	r3, #1
 80071f2:	b2db      	uxtb	r3, r3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 80071f4:	f880 223c 	strb.w	r2, [r0, #572]	; 0x23c
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 80071f8:	2b04      	cmp	r3, #4
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 80071fa:	f04f 0200 	mov.w	r2, #0
 80071fe:	f880 2240 	strb.w	r2, [r0, #576]	; 0x240
  hmsc->scsi_sense_tail++;
 8007202:	bf14      	ite	ne
 8007204:	f881 325d 	strbne.w	r3, [r1, #605]	; 0x25d
    hmsc->scsi_sense_tail = 0U;
 8007208:	f881 225d 	strbeq.w	r2, [r1, #605]	; 0x25d
 800720c:	4770      	bx	lr

0800720e <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800720e:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8007210:	b180      	cbz	r0, 8007234 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8007212:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8007216:	b113      	cbz	r3, 800721e <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8007218:	2300      	movs	r3, #0
 800721a:	f8c0 328c 	str.w	r3, [r0, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800721e:	b109      	cbz	r1, 8007224 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8007220:	f8c0 1288 	str.w	r1, [r0, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8007224:	2301      	movs	r3, #1
 8007226:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  pdev->id = id;
 800722a:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800722c:	f006 fc5e 	bl	800daec <USBD_LL_Init>

  return USBD_OK;
 8007230:	2000      	movs	r0, #0
 8007232:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8007234:	2002      	movs	r0, #2
}
 8007236:	bd08      	pop	{r3, pc}

08007238 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8007238:	b119      	cbz	r1, 8007242 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800723a:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
    status = USBD_OK;
 800723e:	2000      	movs	r0, #0
 8007240:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007242:	2002      	movs	r0, #2
  }

  return status;
}
 8007244:	4770      	bx	lr

08007246 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8007246:	b508      	push	{r3, lr}

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007248:	f006 fc7e 	bl	800db48 <USBD_LL_Start>

  return USBD_OK;
}
 800724c:	2000      	movs	r0, #0
 800724e:	bd08      	pop	{r3, pc}

08007250 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007250:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;

  if(pdev->pClass != NULL)
 8007252:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8007256:	b90b      	cbnz	r3, 800725c <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8007258:	2002      	movs	r0, #2
 800725a:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4798      	blx	r3
 8007260:	2800      	cmp	r0, #0
 8007262:	d1f9      	bne.n	8007258 <USBD_SetClassConfig+0x8>
      ret = USBD_OK;
    }
  }

  return ret;
}
 8007264:	bd08      	pop	{r3, pc}

08007266 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007266:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007268:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	4798      	blx	r3
  return USBD_OK;
}
 8007270:	2000      	movs	r0, #0
 8007272:	bd08      	pop	{r3, pc}

08007274 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007274:	b538      	push	{r3, r4, r5, lr}
 8007276:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007278:	f500 7520 	add.w	r5, r0, #640	; 0x280
 800727c:	4628      	mov	r0, r5
 800727e:	f000 faec 	bl	800785a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007282:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8007284:	f894 1280 	ldrb.w	r1, [r4, #640]	; 0x280
  pdev->ep0_state = USBD_EP0_SETUP;
 8007288:	f8c4 326c 	str.w	r3, [r4, #620]	; 0x26c
  pdev->ep0_data_len = pdev->request.wLength;
 800728c:	f8b4 3286 	ldrh.w	r3, [r4, #646]	; 0x286
 8007290:	f8c4 3270 	str.w	r3, [r4, #624]	; 0x270
  switch (pdev->request.bmRequest & 0x1FU)
 8007294:	f001 031f 	and.w	r3, r1, #31
 8007298:	2b01      	cmp	r3, #1
 800729a:	d00e      	beq.n	80072ba <USBD_LL_SetupStage+0x46>
 800729c:	d307      	bcc.n	80072ae <USBD_LL_SetupStage+0x3a>
 800729e:	2b02      	cmp	r3, #2
 80072a0:	d010      	beq.n	80072c4 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
    break;

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80072a2:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80072a6:	4620      	mov	r0, r4
 80072a8:	f006 fc88 	bl	800dbbc <USBD_LL_StallEP>
    break;
 80072ac:	e003      	b.n	80072b6 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 80072ae:	4629      	mov	r1, r5
 80072b0:	4620      	mov	r0, r4
 80072b2:	f000 f903 	bl	80074bc <USBD_StdDevReq>
  }

  return USBD_OK;
}
 80072b6:	2000      	movs	r0, #0
 80072b8:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 80072ba:	4629      	mov	r1, r5
 80072bc:	4620      	mov	r0, r4
 80072be:	f000 fa1f 	bl	8007700 <USBD_StdItfReq>
    break;
 80072c2:	e7f8      	b.n	80072b6 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);
 80072c4:	4629      	mov	r1, r5
 80072c6:	4620      	mov	r0, r4
 80072c8:	f000 fa3f 	bl	800774a <USBD_StdEPReq>
    break;
 80072cc:	e7f3      	b.n	80072b6 <USBD_LL_SetupStage+0x42>

080072ce <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80072ce:	b570      	push	{r4, r5, r6, lr}
 80072d0:	4605      	mov	r5, r0
 80072d2:	4616      	mov	r6, r2
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 80072d4:	bb49      	cbnz	r1, 800732a <USBD_LL_DataOutStage+0x5c>
  {
    pep = &pdev->ep_out[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80072d6:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 80072da:	2b03      	cmp	r3, #3
 80072dc:	d11e      	bne.n	800731c <USBD_LL_DataOutStage+0x4e>
    {
      if(pep->rem_length > pep->maxpacket)
 80072de:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 80072e2:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d90b      	bls.n	8007302 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 80072ea:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx (pdev,
 80072ec:	429a      	cmp	r2, r3
        pep->rem_length -=  pep->maxpacket;
 80072ee:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
        USBD_CtlContinueRx (pdev,
 80072f2:	bf8c      	ite	hi
 80072f4:	b29a      	uxthhi	r2, r3
 80072f6:	b292      	uxthls	r2, r2
 80072f8:	4631      	mov	r1, r6
 80072fa:	f000 fafe 	bl	80078fa <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80072fe:	2000      	movs	r0, #0
    pdev->pClass->DataOut(pdev, epnum);
 8007300:	bd70      	pop	{r4, r5, r6, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8007302:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8007306:	691b      	ldr	r3, [r3, #16]
 8007308:	b123      	cbz	r3, 8007314 <USBD_LL_DataOutStage+0x46>
 800730a:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800730e:	2a03      	cmp	r2, #3
 8007310:	d100      	bne.n	8007314 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 8007312:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8007314:	4628      	mov	r0, r5
 8007316:	f000 faf8 	bl	800790a <USBD_CtlSendStatus>
 800731a:	e7f0      	b.n	80072fe <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800731c:	2b05      	cmp	r3, #5
 800731e:	d1ee      	bne.n	80072fe <USBD_LL_DataOutStage+0x30>
        pdev->ep0_state = USBD_EP0_IDLE;
 8007320:	f8c5 126c 	str.w	r1, [r5, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8007324:	f006 fc4a 	bl	800dbbc <USBD_LL_StallEP>
 8007328:	e7e9      	b.n	80072fe <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL) &&
 800732a:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800732e:	699b      	ldr	r3, [r3, #24]
 8007330:	b12b      	cbz	r3, 800733e <USBD_LL_DataOutStage+0x70>
 8007332:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8007336:	2a03      	cmp	r2, #3
 8007338:	d101      	bne.n	800733e <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 800733a:	4798      	blx	r3
 800733c:	e7df      	b.n	80072fe <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 800733e:	2002      	movs	r0, #2
}
 8007340:	bd70      	pop	{r4, r5, r6, pc}

08007342 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8007342:	b570      	push	{r4, r5, r6, lr}
 8007344:	4613      	mov	r3, r2
 8007346:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8007348:	460e      	mov	r6, r1
 800734a:	2900      	cmp	r1, #0
 800734c:	d148      	bne.n	80073e0 <USBD_LL_DataInStage+0x9e>
  {
    pep = &pdev->ep_in[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800734e:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8007352:	2a02      	cmp	r2, #2
 8007354:	d13d      	bne.n	80073d2 <USBD_LL_DataInStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8007356:	6a05      	ldr	r5, [r0, #32]
 8007358:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800735a:	4295      	cmp	r5, r2
 800735c:	d914      	bls.n	8007388 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 800735e:	1aaa      	subs	r2, r5, r2
 8007360:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8007362:	4619      	mov	r1, r3
 8007364:	b292      	uxth	r2, r2
 8007366:	f000 fac0 	bl	80078ea <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800736a:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800736c:	461a      	mov	r2, r3
 800736e:	4619      	mov	r1, r3
 8007370:	4620      	mov	r0, r4
 8007372:	f006 fc6f 	bl	800dc54 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007376:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 800737a:	2b01      	cmp	r3, #1
 800737c:	f04f 0000 	mov.w	r0, #0
 8007380:	d13a      	bne.n	80073f8 <USBD_LL_DataInStage+0xb6>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8007382:	f884 0278 	strb.w	r0, [r4, #632]	; 0x278
 8007386:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0U) &&
 8007388:	69c3      	ldr	r3, [r0, #28]
 800738a:	fbb3 f5f2 	udiv	r5, r3, r2
 800738e:	fb02 3515 	mls	r5, r2, r5, r3
 8007392:	b965      	cbnz	r5, 80073ae <USBD_LL_DataInStage+0x6c>
 8007394:	429a      	cmp	r2, r3
 8007396:	d80a      	bhi.n	80073ae <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 8007398:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 800739c:	4293      	cmp	r3, r2
 800739e:	d206      	bcs.n	80073ae <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80073a0:	462a      	mov	r2, r5
 80073a2:	f000 faa2 	bl	80078ea <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80073a6:	f8c4 5270 	str.w	r5, [r4, #624]	; 0x270
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80073aa:	462b      	mov	r3, r5
 80073ac:	e7de      	b.n	800736c <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80073ae:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 80073b2:	68db      	ldr	r3, [r3, #12]
 80073b4:	b12b      	cbz	r3, 80073c2 <USBD_LL_DataInStage+0x80>
 80073b6:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
 80073ba:	2a03      	cmp	r2, #3
 80073bc:	d101      	bne.n	80073c2 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev);
 80073be:	4620      	mov	r0, r4
 80073c0:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 80073c2:	2180      	movs	r1, #128	; 0x80
 80073c4:	4620      	mov	r0, r4
 80073c6:	f006 fbf9 	bl	800dbbc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80073ca:	4620      	mov	r0, r4
 80073cc:	f000 faa8 	bl	8007920 <USBD_CtlReceiveStatus>
 80073d0:	e7d1      	b.n	8007376 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80073d2:	f032 0304 	bics.w	r3, r2, #4
 80073d6:	d1ce      	bne.n	8007376 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 80073d8:	2180      	movs	r1, #128	; 0x80
 80073da:	f006 fbef 	bl	800dbbc <USBD_LL_StallEP>
 80073de:	e7ca      	b.n	8007376 <USBD_LL_DataInStage+0x34>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 80073e0:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80073e4:	695b      	ldr	r3, [r3, #20]
 80073e6:	b133      	cbz	r3, 80073f6 <USBD_LL_DataInStage+0xb4>
 80073e8:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80073ec:	2a03      	cmp	r2, #3
 80073ee:	d102      	bne.n	80073f6 <USBD_LL_DataInStage+0xb4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum);
 80073f0:	4798      	blx	r3
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80073f2:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 80073f4:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 80073f6:	2002      	movs	r0, #2
}
 80073f8:	bd70      	pop	{r4, r5, r6, pc}

080073fa <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80073fa:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80073fc:	2200      	movs	r2, #0
{
 80073fe:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007400:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007402:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007404:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007406:	2340      	movs	r3, #64	; 0x40
 8007408:	f006 fbac 	bl	800db64 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800740c:	4633      	mov	r3, r6
 800740e:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007410:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007414:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007418:	2200      	movs	r2, #0
 800741a:	4620      	mov	r0, r4
 800741c:	f006 fba2 	bl	800db64 <USBD_LL_OpenEP>
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config= 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8007420:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007424:	61a5      	str	r5, [r4, #24]
  pdev->ep0_state = USBD_EP0_IDLE;
 8007426:	2100      	movs	r1, #0
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007428:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 800742a:	f884 5274 	strb.w	r5, [r4, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800742e:	f8c4 126c 	str.w	r1, [r4, #620]	; 0x26c
  pdev->dev_config= 0U;
 8007432:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8007434:	f8c4 127c 	str.w	r1, [r4, #636]	; 0x27c
  if (pdev->pClassData)
 8007438:	b123      	cbz	r3, 8007444 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800743a:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800743e:	4620      	mov	r0, r4
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	4798      	blx	r3
  }

  return USBD_OK;
}
 8007444:	2000      	movs	r0, #0
 8007446:	bd70      	pop	{r4, r5, r6, pc}

08007448 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8007448:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 800744a:	2000      	movs	r0, #0
 800744c:	4770      	bx	lr

0800744e <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 800744e:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8007452:	f880 3275 	strb.w	r3, [r0, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007456:	2304      	movs	r3, #4
 8007458:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 800745c:	2000      	movs	r0, #0
 800745e:	4770      	bx	lr

08007460 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;
 8007460:	f890 3275 	ldrb.w	r3, [r0, #629]	; 0x275
 8007464:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 8007468:	2000      	movs	r0, #0
 800746a:	4770      	bx	lr

0800746c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800746c:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800746e:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8007472:	2a03      	cmp	r2, #3
 8007474:	d104      	bne.n	8007480 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8007476:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800747a:	69db      	ldr	r3, [r3, #28]
 800747c:	b103      	cbz	r3, 8007480 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 800747e:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8007480:	2000      	movs	r0, #0
 8007482:	bd08      	pop	{r3, pc}

08007484 <USBD_LL_IsoINIncomplete>:
 8007484:	2000      	movs	r0, #0
 8007486:	4770      	bx	lr

08007488 <USBD_LL_IsoOUTIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 8007488:	2000      	movs	r0, #0
 800748a:	4770      	bx	lr

0800748c <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 800748c:	2000      	movs	r0, #0
 800748e:	4770      	bx	lr

08007490 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8007490:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007492:	2201      	movs	r2, #1
 8007494:	f880 2274 	strb.w	r2, [r0, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007498:	f8d0 228c 	ldr.w	r2, [r0, #652]	; 0x28c
 800749c:	7901      	ldrb	r1, [r0, #4]
 800749e:	6852      	ldr	r2, [r2, #4]
 80074a0:	4790      	blx	r2

  return USBD_OK;
}
 80074a2:	2000      	movs	r0, #0
 80074a4:	bd08      	pop	{r3, pc}

080074a6 <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 80074a6:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80U);
 80074a8:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 80074aa:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 80074ac:	f006 fb86 	bl	800dbbc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 80074b0:	4620      	mov	r0, r4
 80074b2:	2100      	movs	r1, #0
}
 80074b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 80074b8:	f006 bb80 	b.w	800dbbc <USBD_LL_StallEP>

080074bc <USBD_StdDevReq>:
{
 80074bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074be:	780b      	ldrb	r3, [r1, #0]
 80074c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80074c4:	2b20      	cmp	r3, #32
{
 80074c6:	4604      	mov	r4, r0
 80074c8:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074ca:	d014      	beq.n	80074f6 <USBD_StdDevReq+0x3a>
 80074cc:	2b40      	cmp	r3, #64	; 0x40
 80074ce:	d012      	beq.n	80074f6 <USBD_StdDevReq+0x3a>
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	f040 8095 	bne.w	8007600 <USBD_StdDevReq+0x144>
    switch (req->bRequest)
 80074d6:	784b      	ldrb	r3, [r1, #1]
 80074d8:	2b09      	cmp	r3, #9
 80074da:	f200 8090 	bhi.w	80075fe <USBD_StdDevReq+0x142>
 80074de:	e8df f013 	tbh	[pc, r3, lsl #1]
 80074e2:	00e7      	.short	0x00e7
 80074e4:	008e0101 	.word	0x008e0101
 80074e8:	008e00fa 	.word	0x008e00fa
 80074ec:	00130082 	.word	0x00130082
 80074f0:	00d2008e 	.word	0x00d2008e
 80074f4:	00a0      	.short	0x00a0
    pdev->pClass->Setup(pdev, req);
 80074f6:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 80074fa:	4629      	mov	r1, r5
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	4620      	mov	r0, r4
 8007500:	4798      	blx	r3
}
 8007502:	2000      	movs	r0, #0
 8007504:	b003      	add	sp, #12
 8007506:	bd30      	pop	{r4, r5, pc}
  switch (req->wValue >> 8)
 8007508:	884b      	ldrh	r3, [r1, #2]
 800750a:	0a1a      	lsrs	r2, r3, #8
 800750c:	3a01      	subs	r2, #1
 800750e:	2a0e      	cmp	r2, #14
 8007510:	d875      	bhi.n	80075fe <USBD_StdDevReq+0x142>
 8007512:	e8df f002 	tbb	[pc, r2]
 8007516:	2824      	.short	0x2824
 8007518:	55747435 	.word	0x55747435
 800751c:	7474745e 	.word	0x7474745e
 8007520:	74747474 	.word	0x74747474
 8007524:	08          	.byte	0x08
 8007525:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007526:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800752a:	69db      	ldr	r3, [r3, #28]
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800752c:	7c20      	ldrb	r0, [r4, #16]
 800752e:	f10d 0106 	add.w	r1, sp, #6
 8007532:	4798      	blx	r3
  if((len != 0U) && (req->wLength != 0U))
 8007534:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8007538:	b152      	cbz	r2, 8007550 <USBD_StdDevReq+0x94>
 800753a:	88eb      	ldrh	r3, [r5, #6]
 800753c:	b143      	cbz	r3, 8007550 <USBD_StdDevReq+0x94>
    len = MIN(len, req->wLength);
 800753e:	429a      	cmp	r2, r3
 8007540:	bf28      	it	cs
 8007542:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, pbuf, len);
 8007544:	4601      	mov	r1, r0
 8007546:	4620      	mov	r0, r4
    len = MIN(len, req->wLength);
 8007548:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, pbuf, len);
 800754c:	f000 f9c0 	bl	80078d0 <USBD_CtlSendData>
  if(req->wLength == 0U)
 8007550:	88eb      	ldrh	r3, [r5, #6]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d1d5      	bne.n	8007502 <USBD_StdDevReq+0x46>
    USBD_CtlSendStatus(pdev);
 8007556:	4620      	mov	r0, r4
 8007558:	f000 f9d7 	bl	800790a <USBD_CtlSendStatus>
 800755c:	e7d1      	b.n	8007502 <USBD_StdDevReq+0x46>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800755e:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	e7e2      	b.n	800752c <USBD_StdDevReq+0x70>
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8007566:	7c02      	ldrb	r2, [r0, #16]
 8007568:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800756c:	b932      	cbnz	r2, 800757c <USBD_StdDevReq+0xc0>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800756e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007570:	f10d 0006 	add.w	r0, sp, #6
 8007574:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007576:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007578:	7043      	strb	r3, [r0, #1]
 800757a:	e7db      	b.n	8007534 <USBD_StdDevReq+0x78>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800757c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800757e:	e7f7      	b.n	8007570 <USBD_StdDevReq+0xb4>
    switch ((uint8_t)(req->wValue))
 8007580:	b2db      	uxtb	r3, r3
 8007582:	2b05      	cmp	r3, #5
 8007584:	d83b      	bhi.n	80075fe <USBD_StdDevReq+0x142>
 8007586:	e8df f003 	tbb	[pc, r3]
 800758a:	0703      	.short	0x0703
 800758c:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007590:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	e7c9      	b.n	800752c <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007598:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	e7c5      	b.n	800752c <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80075a0:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	e7c1      	b.n	800752c <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80075a8:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80075ac:	691b      	ldr	r3, [r3, #16]
 80075ae:	e7bd      	b.n	800752c <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80075b0:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80075b4:	695b      	ldr	r3, [r3, #20]
 80075b6:	e7b9      	b.n	800752c <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80075b8:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80075bc:	699b      	ldr	r3, [r3, #24]
 80075be:	e7b5      	b.n	800752c <USBD_StdDevReq+0x70>
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80075c0:	7c03      	ldrb	r3, [r0, #16]
 80075c2:	b9e3      	cbnz	r3, 80075fe <USBD_StdDevReq+0x142>
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80075c4:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80075c8:	f10d 0006 	add.w	r0, sp, #6
 80075cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075ce:	4798      	blx	r3
 80075d0:	e7b0      	b.n	8007534 <USBD_StdDevReq+0x78>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80075d2:	7c03      	ldrb	r3, [r0, #16]
 80075d4:	b99b      	cbnz	r3, 80075fe <USBD_StdDevReq+0x142>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80075d6:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80075da:	f10d 0006 	add.w	r0, sp, #6
 80075de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e0:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80075e2:	2307      	movs	r3, #7
 80075e4:	e7c8      	b.n	8007578 <USBD_StdDevReq+0xbc>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80075e6:	888b      	ldrh	r3, [r1, #4]
 80075e8:	b94b      	cbnz	r3, 80075fe <USBD_StdDevReq+0x142>
 80075ea:	88cb      	ldrh	r3, [r1, #6]
 80075ec:	b93b      	cbnz	r3, 80075fe <USBD_StdDevReq+0x142>
 80075ee:	884d      	ldrh	r5, [r1, #2]
 80075f0:	2d7f      	cmp	r5, #127	; 0x7f
 80075f2:	d804      	bhi.n	80075fe <USBD_StdDevReq+0x142>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075f4:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80075f8:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80075fa:	b2e9      	uxtb	r1, r5
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075fc:	d103      	bne.n	8007606 <USBD_StdDevReq+0x14a>
      USBD_CtlError(pdev, req);
 80075fe:	4620      	mov	r0, r4
    USBD_CtlError(pdev, req);
 8007600:	f7ff ff51 	bl	80074a6 <USBD_CtlError.constprop.1>
    break;
 8007604:	e77d      	b.n	8007502 <USBD_StdDevReq+0x46>
      pdev->dev_address = dev_addr;
 8007606:	f880 1276 	strb.w	r1, [r0, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800760a:	f006 fb07 	bl	800dc1c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800760e:	4620      	mov	r0, r4
 8007610:	f000 f97b 	bl	800790a <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8007614:	b11d      	cbz	r5, 800761e <USBD_StdDevReq+0x162>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007616:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007618:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 800761c:	e771      	b.n	8007502 <USBD_StdDevReq+0x46>
 800761e:	2301      	movs	r3, #1
 8007620:	e7fa      	b.n	8007618 <USBD_StdDevReq+0x15c>
  cfgidx = (uint8_t)(req->wValue);
 8007622:	7889      	ldrb	r1, [r1, #2]
 8007624:	4d35      	ldr	r5, [pc, #212]	; (80076fc <USBD_StdDevReq+0x240>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007626:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8007628:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800762a:	d8e8      	bhi.n	80075fe <USBD_StdDevReq+0x142>
    switch (pdev->dev_state)
 800762c:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8007630:	2b02      	cmp	r3, #2
 8007632:	d008      	beq.n	8007646 <USBD_StdDevReq+0x18a>
 8007634:	2b03      	cmp	r3, #3
 8007636:	d014      	beq.n	8007662 <USBD_StdDevReq+0x1a6>
      USBD_CtlError(pdev, req);
 8007638:	f7ff ff35 	bl	80074a6 <USBD_CtlError.constprop.1>
      USBD_ClrClassConfig(pdev, cfgidx);
 800763c:	7829      	ldrb	r1, [r5, #0]
 800763e:	4620      	mov	r0, r4
 8007640:	f7ff fe11 	bl	8007266 <USBD_ClrClassConfig>
 8007644:	e75d      	b.n	8007502 <USBD_StdDevReq+0x46>
      if (cfgidx)
 8007646:	2900      	cmp	r1, #0
 8007648:	d085      	beq.n	8007556 <USBD_StdDevReq+0x9a>
        pdev->dev_config = cfgidx;
 800764a:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800764c:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 800764e:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007650:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007654:	4620      	mov	r0, r4
 8007656:	f7ff fdfb 	bl	8007250 <USBD_SetClassConfig>
 800765a:	2802      	cmp	r0, #2
 800765c:	f47f af7b 	bne.w	8007556 <USBD_StdDevReq+0x9a>
 8007660:	e7cd      	b.n	80075fe <USBD_StdDevReq+0x142>
      if (cfgidx == 0U)
 8007662:	b931      	cbnz	r1, 8007672 <USBD_StdDevReq+0x1b6>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007664:	2302      	movs	r3, #2
 8007666:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800766a:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800766c:	f7ff fdfb 	bl	8007266 <USBD_ClrClassConfig>
 8007670:	e771      	b.n	8007556 <USBD_StdDevReq+0x9a>
      else if (cfgidx != pdev->dev_config)
 8007672:	6841      	ldr	r1, [r0, #4]
 8007674:	2901      	cmp	r1, #1
 8007676:	f43f af6e 	beq.w	8007556 <USBD_StdDevReq+0x9a>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800767a:	b2c9      	uxtb	r1, r1
 800767c:	f7ff fdf3 	bl	8007266 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007680:	7829      	ldrb	r1, [r5, #0]
 8007682:	6061      	str	r1, [r4, #4]
 8007684:	e7e6      	b.n	8007654 <USBD_StdDevReq+0x198>
  if (req->wLength != 1U)
 8007686:	88ca      	ldrh	r2, [r1, #6]
 8007688:	2a01      	cmp	r2, #1
 800768a:	d1b8      	bne.n	80075fe <USBD_StdDevReq+0x142>
    switch (pdev->dev_state)
 800768c:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8007690:	2b00      	cmp	r3, #0
 8007692:	d0b4      	beq.n	80075fe <USBD_StdDevReq+0x142>
 8007694:	2b02      	cmp	r3, #2
 8007696:	d903      	bls.n	80076a0 <USBD_StdDevReq+0x1e4>
 8007698:	2b03      	cmp	r3, #3
 800769a:	d1b0      	bne.n	80075fe <USBD_StdDevReq+0x142>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800769c:	1d01      	adds	r1, r0, #4
 800769e:	e003      	b.n	80076a8 <USBD_StdDevReq+0x1ec>
      pdev->dev_default_config = 0U;
 80076a0:	4601      	mov	r1, r0
 80076a2:	2300      	movs	r3, #0
 80076a4:	f841 3f08 	str.w	r3, [r1, #8]!
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80076a8:	4620      	mov	r0, r4
 80076aa:	f000 f911 	bl	80078d0 <USBD_CtlSendData>
 80076ae:	e728      	b.n	8007502 <USBD_StdDevReq+0x46>
  switch (pdev->dev_state)
 80076b0:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80076b4:	3b01      	subs	r3, #1
 80076b6:	2b02      	cmp	r3, #2
 80076b8:	d8a1      	bhi.n	80075fe <USBD_StdDevReq+0x142>
    if(req->wLength != 0x2U)
 80076ba:	88cb      	ldrh	r3, [r1, #6]
 80076bc:	2b02      	cmp	r3, #2
 80076be:	d19e      	bne.n	80075fe <USBD_StdDevReq+0x142>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80076c0:	2301      	movs	r3, #1
 80076c2:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup)
 80076c4:	f8d0 327c 	ldr.w	r3, [r0, #636]	; 0x27c
 80076c8:	b10b      	cbz	r3, 80076ce <USBD_StdDevReq+0x212>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80076ca:	2303      	movs	r3, #3
 80076cc:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80076ce:	2202      	movs	r2, #2
 80076d0:	f104 010c 	add.w	r1, r4, #12
 80076d4:	e7e8      	b.n	80076a8 <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80076d6:	884b      	ldrh	r3, [r1, #2]
 80076d8:	2b01      	cmp	r3, #1
 80076da:	f47f af12 	bne.w	8007502 <USBD_StdDevReq+0x46>
    pdev->dev_remote_wakeup = 1U;
 80076de:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
 80076e2:	e738      	b.n	8007556 <USBD_StdDevReq+0x9a>
  switch (pdev->dev_state)
 80076e4:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80076e8:	3b01      	subs	r3, #1
 80076ea:	2b02      	cmp	r3, #2
 80076ec:	d887      	bhi.n	80075fe <USBD_StdDevReq+0x142>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80076ee:	884b      	ldrh	r3, [r1, #2]
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	f47f af06 	bne.w	8007502 <USBD_StdDevReq+0x46>
      pdev->dev_remote_wakeup = 0U;
 80076f6:	2300      	movs	r3, #0
 80076f8:	e7f1      	b.n	80076de <USBD_StdDevReq+0x222>
 80076fa:	bf00      	nop
 80076fc:	20004de0 	.word	0x20004de0

08007700 <USBD_StdItfReq>:
{
 8007700:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007702:	780b      	ldrb	r3, [r1, #0]
 8007704:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007708:	2b20      	cmp	r3, #32
{
 800770a:	4604      	mov	r4, r0
 800770c:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800770e:	d002      	beq.n	8007716 <USBD_StdItfReq+0x16>
 8007710:	2b40      	cmp	r3, #64	; 0x40
 8007712:	d000      	beq.n	8007716 <USBD_StdItfReq+0x16>
 8007714:	b9b3      	cbnz	r3, 8007744 <USBD_StdItfReq+0x44>
    switch (pdev->dev_state)
 8007716:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 800771a:	3b01      	subs	r3, #1
 800771c:	2b02      	cmp	r3, #2
 800771e:	d810      	bhi.n	8007742 <USBD_StdItfReq+0x42>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007720:	792b      	ldrb	r3, [r5, #4]
 8007722:	2b01      	cmp	r3, #1
 8007724:	d80d      	bhi.n	8007742 <USBD_StdItfReq+0x42>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8007726:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800772a:	4629      	mov	r1, r5
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	4620      	mov	r0, r4
 8007730:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 8007732:	88eb      	ldrh	r3, [r5, #6]
 8007734:	b91b      	cbnz	r3, 800773e <USBD_StdItfReq+0x3e>
 8007736:	b910      	cbnz	r0, 800773e <USBD_StdItfReq+0x3e>
          USBD_CtlSendStatus(pdev);
 8007738:	4620      	mov	r0, r4
 800773a:	f000 f8e6 	bl	800790a <USBD_CtlSendStatus>
}
 800773e:	2000      	movs	r0, #0
 8007740:	bd38      	pop	{r3, r4, r5, pc}
      USBD_CtlError(pdev, req);
 8007742:	4620      	mov	r0, r4
    USBD_CtlError(pdev, req);
 8007744:	f7ff feaf 	bl	80074a6 <USBD_CtlError.constprop.1>
    break;
 8007748:	e7f9      	b.n	800773e <USBD_StdItfReq+0x3e>

0800774a <USBD_StdEPReq>:
{
 800774a:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800774c:	780a      	ldrb	r2, [r1, #0]
 800774e:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8007752:	2a20      	cmp	r2, #32
{
 8007754:	4604      	mov	r4, r0
 8007756:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007758:	d013      	beq.n	8007782 <USBD_StdEPReq+0x38>
 800775a:	2a40      	cmp	r2, #64	; 0x40
 800775c:	d011      	beq.n	8007782 <USBD_StdEPReq+0x38>
 800775e:	b96a      	cbnz	r2, 800777c <USBD_StdEPReq+0x32>
    switch (req->bRequest)
 8007760:	785d      	ldrb	r5, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8007762:	888a      	ldrh	r2, [r1, #4]
    switch (req->bRequest)
 8007764:	2d01      	cmp	r5, #1
  ep_addr  = LOBYTE(req->wIndex);
 8007766:	b2d1      	uxtb	r1, r2
    switch (req->bRequest)
 8007768:	d01f      	beq.n	80077aa <USBD_StdEPReq+0x60>
 800776a:	d335      	bcc.n	80077d8 <USBD_StdEPReq+0x8e>
 800776c:	2d03      	cmp	r5, #3
 800776e:	d105      	bne.n	800777c <USBD_StdEPReq+0x32>
      switch (pdev->dev_state)
 8007770:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8007774:	2a02      	cmp	r2, #2
 8007776:	d026      	beq.n	80077c6 <USBD_StdEPReq+0x7c>
 8007778:	2a03      	cmp	r2, #3
 800777a:	d00a      	beq.n	8007792 <USBD_StdEPReq+0x48>
    USBD_CtlError(pdev, req);
 800777c:	f7ff fe93 	bl	80074a6 <USBD_CtlError.constprop.1>
    break;
 8007780:	e005      	b.n	800778e <USBD_StdEPReq+0x44>
    pdev->pClass->Setup (pdev, req);
 8007782:	f8d4 228c 	ldr.w	r2, [r4, #652]	; 0x28c
 8007786:	4619      	mov	r1, r3
 8007788:	6892      	ldr	r2, [r2, #8]
 800778a:	4620      	mov	r0, r4
 800778c:	4790      	blx	r2
}
 800778e:	2000      	movs	r0, #0
 8007790:	bd38      	pop	{r3, r4, r5, pc}
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007792:	885a      	ldrh	r2, [r3, #2]
 8007794:	b92a      	cbnz	r2, 80077a2 <USBD_StdEPReq+0x58>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007796:	064a      	lsls	r2, r1, #25
 8007798:	d003      	beq.n	80077a2 <USBD_StdEPReq+0x58>
 800779a:	88db      	ldrh	r3, [r3, #6]
 800779c:	b90b      	cbnz	r3, 80077a2 <USBD_StdEPReq+0x58>
            USBD_LL_StallEP(pdev, ep_addr);
 800779e:	f006 fa0d 	bl	800dbbc <USBD_LL_StallEP>
        USBD_CtlSendStatus(pdev);
 80077a2:	4620      	mov	r0, r4
 80077a4:	f000 f8b1 	bl	800790a <USBD_CtlSendStatus>
        break;
 80077a8:	e7f1      	b.n	800778e <USBD_StdEPReq+0x44>
      switch (pdev->dev_state)
 80077aa:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80077ae:	2a02      	cmp	r2, #2
 80077b0:	d009      	beq.n	80077c6 <USBD_StdEPReq+0x7c>
 80077b2:	2a03      	cmp	r2, #3
 80077b4:	d1e2      	bne.n	800777c <USBD_StdEPReq+0x32>
        if (req->wValue == USB_FEATURE_EP_HALT)
 80077b6:	885b      	ldrh	r3, [r3, #2]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d1e8      	bne.n	800778e <USBD_StdEPReq+0x44>
          if ((ep_addr & 0x7FU) != 0x00U)
 80077bc:	064d      	lsls	r5, r1, #25
 80077be:	d0f0      	beq.n	80077a2 <USBD_StdEPReq+0x58>
            USBD_LL_ClearStallEP(pdev, ep_addr);
 80077c0:	f006 fa0a 	bl	800dbd8 <USBD_LL_ClearStallEP>
 80077c4:	e7ed      	b.n	80077a2 <USBD_StdEPReq+0x58>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80077c6:	064b      	lsls	r3, r1, #25
 80077c8:	d017      	beq.n	80077fa <USBD_StdEPReq+0xb0>
          USBD_LL_StallEP(pdev, ep_addr);
 80077ca:	f006 f9f7 	bl	800dbbc <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80077ce:	2180      	movs	r1, #128	; 0x80
 80077d0:	4620      	mov	r0, r4
 80077d2:	f006 f9f3 	bl	800dbbc <USBD_LL_StallEP>
 80077d6:	e7da      	b.n	800778e <USBD_StdEPReq+0x44>
      switch (pdev->dev_state)
 80077d8:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80077dc:	2b02      	cmp	r3, #2
 80077de:	d00e      	beq.n	80077fe <USBD_StdEPReq+0xb4>
 80077e0:	2b03      	cmp	r3, #3
 80077e2:	d1cb      	bne.n	800777c <USBD_StdEPReq+0x32>
        if((ep_addr & 0x80U) == 0x80U)
 80077e4:	f012 0f80 	tst.w	r2, #128	; 0x80
 80077e8:	f04f 0314 	mov.w	r3, #20
 80077ec:	f001 020f 	and.w	r2, r1, #15
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80077f0:	fb03 0202 	mla	r2, r3, r2, r0
        if((ep_addr & 0x80U) == 0x80U)
 80077f4:	d012      	beq.n	800781c <USBD_StdEPReq+0xd2>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80077f6:	6992      	ldr	r2, [r2, #24]
 80077f8:	b9da      	cbnz	r2, 8007832 <USBD_StdEPReq+0xe8>
          USBD_CtlError(pdev, req);
 80077fa:	4620      	mov	r0, r4
 80077fc:	e7be      	b.n	800777c <USBD_StdEPReq+0x32>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80077fe:	0649      	lsls	r1, r1, #25
 8007800:	d1fb      	bne.n	80077fa <USBD_StdEPReq+0xb0>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007802:	0613      	lsls	r3, r2, #24
 8007804:	bf4c      	ite	mi
 8007806:	f100 0114 	addmi.w	r1, r0, #20
 800780a:	f500 71a0 	addpl.w	r1, r0, #320	; 0x140
          pep->status = 0x0000U;
 800780e:	2300      	movs	r3, #0
 8007810:	600b      	str	r3, [r1, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007812:	2202      	movs	r2, #2
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007814:	4620      	mov	r0, r4
 8007816:	f000 f85b 	bl	80078d0 <USBD_CtlSendData>
          break;
 800781a:	e7b8      	b.n	800778e <USBD_StdEPReq+0x44>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800781c:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
 8007820:	2a00      	cmp	r2, #0
 8007822:	d0ea      	beq.n	80077fa <USBD_StdEPReq+0xb0>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007824:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8007828:	fb03 0505 	mla	r5, r3, r5, r0
 800782c:	f505 75a0 	add.w	r5, r5, #320	; 0x140
 8007830:	e004      	b.n	800783c <USBD_StdEPReq+0xf2>
 8007832:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8007836:	fb05 3503 	mla	r5, r5, r3, r3
 800783a:	4405      	add	r5, r0
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800783c:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 8007840:	d103      	bne.n	800784a <USBD_StdEPReq+0x100>
            pep->status = 0x0001U;
 8007842:	602b      	str	r3, [r5, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007844:	2202      	movs	r2, #2
 8007846:	4629      	mov	r1, r5
 8007848:	e7e4      	b.n	8007814 <USBD_StdEPReq+0xca>
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800784a:	4620      	mov	r0, r4
 800784c:	f006 f9d2 	bl	800dbf4 <USBD_LL_IsStallEP>
 8007850:	b108      	cbz	r0, 8007856 <USBD_StdEPReq+0x10c>
            pep->status = 0x0001U;
 8007852:	2301      	movs	r3, #1
 8007854:	e7f5      	b.n	8007842 <USBD_StdEPReq+0xf8>
            pep->status = 0x0000U;
 8007856:	6028      	str	r0, [r5, #0]
 8007858:	e7f4      	b.n	8007844 <USBD_StdEPReq+0xfa>

0800785a <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 800785a:	780b      	ldrb	r3, [r1, #0]
 800785c:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800785e:	784b      	ldrb	r3, [r1, #1]
 8007860:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8007862:	78ca      	ldrb	r2, [r1, #3]
 8007864:	788b      	ldrb	r3, [r1, #2]
 8007866:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800786a:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800786c:	794a      	ldrb	r2, [r1, #5]
 800786e:	790b      	ldrb	r3, [r1, #4]
 8007870:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8007874:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8007876:	79ca      	ldrb	r2, [r1, #7]
 8007878:	798b      	ldrb	r3, [r1, #6]
 800787a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800787e:	80c3      	strh	r3, [r0, #6]
 8007880:	4770      	bx	lr

08007882 <USBD_CtlError>:
{
 8007882:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev , 0x80U);
 8007884:	2180      	movs	r1, #128	; 0x80
{
 8007886:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 8007888:	f006 f998 	bl	800dbbc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800788c:	4620      	mov	r0, r4
 800788e:	2100      	movs	r1, #0
}
 8007890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 8007894:	f006 b992 	b.w	800dbbc <USBD_LL_StallEP>

08007898 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007898:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 800789a:	b188      	cbz	r0, 80078c0 <USBD_GetString+0x28>
 800789c:	4605      	mov	r5, r0
 800789e:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0U;

    while (*buf != '\0')
 80078a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	2c00      	cmp	r4, #0
 80078a8:	d1f9      	bne.n	800789e <USBD_GetString+0x6>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80078aa:	3301      	adds	r3, #1
 80078ac:	005b      	lsls	r3, r3, #1
 80078ae:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80078b0:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80078b2:	2303      	movs	r3, #3
 80078b4:	704b      	strb	r3, [r1, #1]
 80078b6:	3801      	subs	r0, #1
 80078b8:	2302      	movs	r3, #2
    while (*desc != '\0')
 80078ba:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80078be:	b905      	cbnz	r5, 80078c2 <USBD_GetString+0x2a>
 80078c0:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 80078c2:	1c5a      	adds	r2, r3, #1
 80078c4:	b2d2      	uxtb	r2, r2
 80078c6:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0U;
 80078c8:	3302      	adds	r3, #2
 80078ca:	b2db      	uxtb	r3, r3
 80078cc:	548c      	strb	r4, [r1, r2]
 80078ce:	e7f4      	b.n	80078ba <USBD_GetString+0x22>

080078d0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 80078d0:	b510      	push	{r4, lr}
 80078d2:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80078d4:	2202      	movs	r2, #2
 80078d6:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 80078da:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80078dc:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 80078de:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80078e0:	2100      	movs	r1, #0
 80078e2:	f006 f9a9 	bl	800dc38 <USBD_LL_Transmit>

  return USBD_OK;
}
 80078e6:	2000      	movs	r0, #0
 80078e8:	bd10      	pop	{r4, pc}

080078ea <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 80078ea:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80078ec:	4613      	mov	r3, r2
 80078ee:	460a      	mov	r2, r1
 80078f0:	2100      	movs	r1, #0
 80078f2:	f006 f9a1 	bl	800dc38 <USBD_LL_Transmit>

  return USBD_OK;
}
 80078f6:	2000      	movs	r0, #0
 80078f8:	bd08      	pop	{r3, pc}

080078fa <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 80078fa:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80078fc:	4613      	mov	r3, r2
 80078fe:	460a      	mov	r2, r1
 8007900:	2100      	movs	r1, #0
 8007902:	f006 f9a7 	bl	800dc54 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8007906:	2000      	movs	r0, #0
 8007908:	bd08      	pop	{r3, pc}

0800790a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800790a:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800790c:	2304      	movs	r3, #4
 800790e:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007912:	2300      	movs	r3, #0
 8007914:	461a      	mov	r2, r3
 8007916:	4619      	mov	r1, r3
 8007918:	f006 f98e 	bl	800dc38 <USBD_LL_Transmit>

  return USBD_OK;
}
 800791c:	2000      	movs	r0, #0
 800791e:	bd08      	pop	{r3, pc}

08007920 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8007920:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007922:	2305      	movs	r3, #5
 8007924:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007928:	2300      	movs	r3, #0
 800792a:	461a      	mov	r2, r3
 800792c:	4619      	mov	r1, r3
 800792e:	f006 f991 	bl	800dc54 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8007932:	2000      	movs	r0, #0
 8007934:	bd08      	pop	{r3, pc}
	...

08007938 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007938:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800793a:	4b0f      	ldr	r3, [pc, #60]	; (8007978 <FATFS_LinkDriverEx+0x40>)
 800793c:	7a5d      	ldrb	r5, [r3, #9]
 800793e:	f005 04ff 	and.w	r4, r5, #255	; 0xff
 8007942:	b9b5      	cbnz	r5, 8007972 <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007944:	7a5d      	ldrb	r5, [r3, #9]
 8007946:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 8007948:	7a5d      	ldrb	r5, [r3, #9]
 800794a:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800794e:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8007950:	7a58      	ldrb	r0, [r3, #9]
 8007952:	4418      	add	r0, r3
 8007954:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8007956:	7a5a      	ldrb	r2, [r3, #9]
 8007958:	b2d2      	uxtb	r2, r2
 800795a:	1c50      	adds	r0, r2, #1
 800795c:	b2c0      	uxtb	r0, r0
 800795e:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 8007960:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 8007962:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 8007964:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8007966:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 8007968:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 800796a:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 800796c:	70cc      	strb	r4, [r1, #3]
 800796e:	4620      	mov	r0, r4
 8007970:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 8007972:	2001      	movs	r0, #1
    ret = 0;
  }

  return ret;
}
 8007974:	bd30      	pop	{r4, r5, pc}
 8007976:	bf00      	nop
 8007978:	20004de4 	.word	0x20004de4

0800797c <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 800797c:	2200      	movs	r2, #0
 800797e:	f7ff bfdb 	b.w	8007938 <FATFS_LinkDriverEx>
	...

08007984 <main_screen_event>:
	lv_event_send(img_fundo, LV_EVENT_APPLY, NULL);
}

static void main_screen_event(lv_obj_t * obj, lv_event_t event)
{
    switch(event) {
 8007984:	2911      	cmp	r1, #17
{
 8007986:	b508      	push	{r3, lr}
    switch(event) {
 8007988:	d10b      	bne.n	80079a2 <main_screen_event+0x1e>
        case LV_EVENT_APPLY:
            //printf("Released\n");
            lv_task_del(Task_Principal);
 800798a:	4b06      	ldr	r3, [pc, #24]	; (80079a4 <main_screen_event+0x20>)
 800798c:	6818      	ldr	r0, [r3, #0]
 800798e:	f00c fb7d 	bl	801408c <lv_task_del>
    		lv_obj_del(Tela_Principal);
 8007992:	4b05      	ldr	r3, [pc, #20]	; (80079a8 <main_screen_event+0x24>)
 8007994:	6818      	ldr	r0, [r3, #0]
 8007996:	f007 f9b2 	bl	800ecfe <lv_obj_del>
    		screen_sel();
            break;
    }
}
 800799a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    		screen_sel();
 800799e:	f005 be8d 	b.w	800d6bc <screen_sel>
 80079a2:	bd08      	pop	{r3, pc}
 80079a4:	20004df0 	.word	0x20004df0
 80079a8:	20004df4 	.word	0x20004df4

080079ac <print_frequencia>:
{
 80079ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	sprintf(buffer, "%d%d%d.%d%d%d Mhz", q0, q1, q2, q3, q4, q5);
 80079b0:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8007a64 <print_frequencia+0xb8>
	lv_style_copy(&style_txt1, &lv_style_plain);
 80079b4:	4e24      	ldr	r6, [pc, #144]	; (8007a48 <print_frequencia+0x9c>)
	sprintf(buffer, "%d%d%d.%d%d%d Mhz", q0, q1, q2, q3, q4, q5);
 80079b6:	4925      	ldr	r1, [pc, #148]	; (8007a4c <print_frequencia+0xa0>)
{
 80079b8:	b085      	sub	sp, #20
	sprintf(buffer, "%d%d%d.%d%d%d Mhz", q0, q1, q2, q3, q4, q5);
 80079ba:	2400      	movs	r4, #0
 80079bc:	2701      	movs	r7, #1
 80079be:	f04f 0803 	mov.w	r8, #3
 80079c2:	463a      	mov	r2, r7
 80079c4:	4623      	mov	r3, r4
 80079c6:	9403      	str	r4, [sp, #12]
 80079c8:	9402      	str	r4, [sp, #8]
 80079ca:	9701      	str	r7, [sp, #4]
 80079cc:	f8cd 8000 	str.w	r8, [sp]
 80079d0:	4648      	mov	r0, r9
 80079d2:	f011 fe37 	bl	8019644 <sprintf>
	lv_style_copy(&style_txt1, &lv_style_plain);
 80079d6:	4630      	mov	r0, r6
 80079d8:	491d      	ldr	r1, [pc, #116]	; (8007a50 <print_frequencia+0xa4>)
 80079da:	f007 fe7b 	bl	800f6d4 <lv_style_copy>
	style_txt1.text.font = &lv_font_eurostile_24;
 80079de:	4b1d      	ldr	r3, [pc, #116]	; (8007a54 <print_frequencia+0xa8>)
 80079e0:	6273      	str	r3, [r6, #36]	; 0x24
	style_txt1.text.color = LV_COLOR_WHITE;
 80079e2:	4b1d      	ldr	r3, [pc, #116]	; (8007a58 <print_frequencia+0xac>)
	style_txt1.text.letter_space = 0;
 80079e4:	8534      	strh	r4, [r6, #40]	; 0x28
	style_txt1.text.color = LV_COLOR_WHITE;
 80079e6:	881b      	ldrh	r3, [r3, #0]
 80079e8:	8433      	strh	r3, [r6, #32]
	lv_obj_t * txt_freq = lv_label_create(Tela_Principal, NULL);
 80079ea:	4b1c      	ldr	r3, [pc, #112]	; (8007a5c <print_frequencia+0xb0>)
	style_txt1.text.line_space = 0;
 80079ec:	8574      	strh	r4, [r6, #42]	; 0x2a
	lv_obj_t * txt_freq = lv_label_create(Tela_Principal, NULL);
 80079ee:	6818      	ldr	r0, [r3, #0]
 80079f0:	4621      	mov	r1, r4
 80079f2:	f00f fd63 	bl	80174bc <lv_label_create>
	lv_obj_set_event_cb(txt_freq, main_screen_event);   		// Assign an event callback
 80079f6:	491a      	ldr	r1, [pc, #104]	; (8007a60 <print_frequencia+0xb4>)
	lv_obj_t * txt_freq = lv_label_create(Tela_Principal, NULL);
 80079f8:	4605      	mov	r5, r0
	lv_obj_set_event_cb(txt_freq, main_screen_event);   		// Assign an event callback
 80079fa:	f006 fbce 	bl	800e19a <lv_obj_set_event_cb>
	lv_obj_set_style(txt_freq, &style_txt1); 					// Configura o estilo criado
 80079fe:	4631      	mov	r1, r6
 8007a00:	4628      	mov	r0, r5
 8007a02:	f007 fa0b 	bl	800ee1c <lv_obj_set_style>
	lv_label_set_long_mode(txt_freq, LV_LABEL_LONG_EXPAND); 	// Quebra as linhas longas
 8007a06:	4621      	mov	r1, r4
 8007a08:	4628      	mov	r0, r5
 8007a0a:	f00f fd01 	bl	8017410 <lv_label_set_long_mode>
	lv_label_set_recolor(txt_freq, true); 						// Ativa recolorizar por comandos no texto
 8007a0e:	4639      	mov	r1, r7
 8007a10:	4628      	mov	r0, r5
 8007a12:	f00f fd3f 	bl	8017494 <lv_label_set_recolor>
	lv_label_set_align(txt_freq, LV_ALIGN_IN_TOP_MID); 			// Centraliza linhas alinhadas
 8007a16:	4628      	mov	r0, r5
 8007a18:	2102      	movs	r1, #2
 8007a1a:	f00f f998 	bl	8016d4e <lv_label_set_align>
	lv_label_set_text(txt_freq, buffer);
 8007a1e:	4649      	mov	r1, r9
 8007a20:	4628      	mov	r0, r5
 8007a22:	f00f fca1 	bl	8017368 <lv_label_set_text>
	lv_obj_set_width(txt_freq, 300); 							// Configuura o comprimento
 8007a26:	4628      	mov	r0, r5
 8007a28:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8007a2c:	f007 f93e 	bl	800ecac <lv_obj_set_width>
	lv_obj_align(txt_freq, NULL, LV_ALIGN_IN_TOP_MID, 0, 3); 	// Alinha ao centro
 8007a30:	f8cd 8000 	str.w	r8, [sp]
 8007a34:	4623      	mov	r3, r4
 8007a36:	2202      	movs	r2, #2
 8007a38:	4621      	mov	r1, r4
 8007a3a:	4628      	mov	r0, r5
 8007a3c:	f006 fd4c 	bl	800e4d8 <lv_obj_align>
}
 8007a40:	b005      	add	sp, #20
 8007a42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a46:	bf00      	nop
 8007a48:	20005074 	.word	0x20005074
 8007a4c:	0802baae 	.word	0x0802baae
 8007a50:	2000c424 	.word	0x2000c424
 8007a54:	2000132c 	.word	0x2000132c
 8007a58:	0801cb08 	.word	0x0801cb08
 8007a5c:	20004df4 	.word	0x20004df4
 8007a60:	08007985 	.word	0x08007985
 8007a64:	20004cd0 	.word	0x20004cd0

08007a68 <print_pot>:
{
 8007a68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	if(!falha) {
 8007a6c:	4b76      	ldr	r3, [pc, #472]	; (8007c48 <print_pot+0x1e0>)
 8007a6e:	681c      	ldr	r4, [r3, #0]
 8007a70:	2c00      	cmp	r4, #0
 8007a72:	f040 80e5 	bne.w	8007c40 <print_pot+0x1d8>
		lv_style_copy(&style_txt_fwd, &lv_style_plain);
 8007a76:	4d75      	ldr	r5, [pc, #468]	; (8007c4c <print_pot+0x1e4>)
 8007a78:	4975      	ldr	r1, [pc, #468]	; (8007c50 <print_pot+0x1e8>)
 8007a7a:	edcd 0a03 	vstr	s1, [sp, #12]
 8007a7e:	4628      	mov	r0, r5
 8007a80:	ed8d 0a02 	vstr	s0, [sp, #8]
 8007a84:	f007 fe26 	bl	800f6d4 <lv_style_copy>
		style_txt_fwd.text.color = LV_COLOR_CYAN;
 8007a88:	f895 3020 	ldrb.w	r3, [r5, #32]
		txt_fwd = lv_label_create(Tela_Principal, NULL);
 8007a8c:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 8007c7c <print_pot+0x214>
		style_txt_fwd.text.font = &lv_font_eurostile_24;
 8007a90:	f8df 91ec 	ldr.w	r9, [pc, #492]	; 8007c80 <print_pot+0x218>
 8007a94:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
		style_txt_fwd.text.color = LV_COLOR_CYAN;
 8007a98:	f043 031f 	orr.w	r3, r3, #31
 8007a9c:	f885 3020 	strb.w	r3, [r5, #32]
 8007aa0:	8c2b      	ldrh	r3, [r5, #32]
		txt_fwd = lv_label_create(Tela_Principal, NULL);
 8007aa2:	4f6c      	ldr	r7, [pc, #432]	; (8007c54 <print_pot+0x1ec>)
		style_txt_fwd.text.color = LV_COLOR_CYAN;
 8007aa4:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 8007aa8:	842b      	strh	r3, [r5, #32]
 8007aaa:	0a1b      	lsrs	r3, r3, #8
 8007aac:	f364 03c7 	bfi	r3, r4, #3, #5
 8007ab0:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
		style_txt_fwd.text.letter_space = 1;
 8007ab4:	2601      	movs	r6, #1
		txt_fwd = lv_label_create(Tela_Principal, NULL);
 8007ab6:	4621      	mov	r1, r4
 8007ab8:	f8d8 0000 	ldr.w	r0, [r8]
		style_txt_fwd.text.letter_space = 1;
 8007abc:	852e      	strh	r6, [r5, #40]	; 0x28
		style_txt_fwd.text.line_space = 1;
 8007abe:	856e      	strh	r6, [r5, #42]	; 0x2a
		txt_fwd = lv_label_create(Tela_Principal, NULL);
 8007ac0:	f00f fcfc 	bl	80174bc <lv_label_create>
		lv_obj_set_style(txt_fwd, &style_txt_fwd); 							// Configura o estilo criado
 8007ac4:	4629      	mov	r1, r5
		txt_fwd = lv_label_create(Tela_Principal, NULL);
 8007ac6:	6038      	str	r0, [r7, #0]
		lv_obj_set_style(txt_fwd, &style_txt_fwd); 							// Configura o estilo criado
 8007ac8:	f007 f9a8 	bl	800ee1c <lv_obj_set_style>
		lv_label_set_long_mode(txt_fwd, LV_LABEL_LONG_EXPAND); 				// Quebra as linhas longas
 8007acc:	6838      	ldr	r0, [r7, #0]
 8007ace:	4621      	mov	r1, r4
 8007ad0:	f00f fc9e 	bl	8017410 <lv_label_set_long_mode>
		lv_label_set_recolor(txt_fwd, true); 								// Ativa recolorizar por comandos no texto
 8007ad4:	6838      	ldr	r0, [r7, #0]
 8007ad6:	4631      	mov	r1, r6
 8007ad8:	f00f fcdc 	bl	8017494 <lv_label_set_recolor>
		lv_label_set_align(txt_fwd, LV_ALIGN_IN_BOTTOM_LEFT); 				// Centraliza linhas alinhadas
 8007adc:	6838      	ldr	r0, [r7, #0]
 8007ade:	2104      	movs	r1, #4
 8007ae0:	f00f f935 	bl	8016d4e <lv_label_set_align>
		lv_label_set_text(txt_fwd, "FWD:");
 8007ae4:	6838      	ldr	r0, [r7, #0]
 8007ae6:	495c      	ldr	r1, [pc, #368]	; (8007c58 <print_pot+0x1f0>)
 8007ae8:	f00f fc3e 	bl	8017368 <lv_label_set_text>
		lv_obj_align(txt_fwd, NULL, LV_ALIGN_IN_BOTTOM_LEFT, 5, -25); 		// Alinha ao centro
 8007aec:	f06f 0a18 	mvn.w	sl, #24
		lv_obj_set_width(txt_fwd, 200); 									// Configuura o comprimento
 8007af0:	6838      	ldr	r0, [r7, #0]
 8007af2:	21c8      	movs	r1, #200	; 0xc8
 8007af4:	f007 f8da 	bl	800ecac <lv_obj_set_width>
		lv_obj_align(txt_fwd, NULL, LV_ALIGN_IN_BOTTOM_LEFT, 5, -25); 		// Alinha ao centro
 8007af8:	f8cd a000 	str.w	sl, [sp]
 8007afc:	2305      	movs	r3, #5
 8007afe:	2204      	movs	r2, #4
 8007b00:	6838      	ldr	r0, [r7, #0]
		txt_pot = lv_label_create(Tela_Principal, NULL);
 8007b02:	4f56      	ldr	r7, [pc, #344]	; (8007c5c <print_pot+0x1f4>)
		lv_obj_align(txt_fwd, NULL, LV_ALIGN_IN_BOTTOM_LEFT, 5, -25); 		// Alinha ao centro
 8007b04:	4621      	mov	r1, r4
 8007b06:	f006 fce7 	bl	800e4d8 <lv_obj_align>
		txt_pot = lv_label_create(Tela_Principal, NULL);
 8007b0a:	4621      	mov	r1, r4
 8007b0c:	f8d8 0000 	ldr.w	r0, [r8]
 8007b10:	f00f fcd4 	bl	80174bc <lv_label_create>
		lv_obj_set_style(txt_pot, &style_txt_fwd); 							// Configura o estilo criado
 8007b14:	4629      	mov	r1, r5
		txt_pot = lv_label_create(Tela_Principal, NULL);
 8007b16:	6038      	str	r0, [r7, #0]
		lv_obj_set_style(txt_pot, &style_txt_fwd); 							// Configura o estilo criado
 8007b18:	f007 f980 	bl	800ee1c <lv_obj_set_style>
		lv_label_set_long_mode(txt_pot, LV_LABEL_LONG_BREAK); 				// Quebra as linhas longas
 8007b1c:	6838      	ldr	r0, [r7, #0]
		txt_ref = lv_label_create(Tela_Principal, NULL);
 8007b1e:	4d50      	ldr	r5, [pc, #320]	; (8007c60 <print_pot+0x1f8>)
		lv_label_set_long_mode(txt_pot, LV_LABEL_LONG_BREAK); 				// Quebra as linhas longas
 8007b20:	4631      	mov	r1, r6
 8007b22:	f00f fc75 	bl	8017410 <lv_label_set_long_mode>
		lv_label_set_recolor(txt_pot, true); 								// Ativa recolorizar por comandos no texto
 8007b26:	6838      	ldr	r0, [r7, #0]
 8007b28:	4631      	mov	r1, r6
 8007b2a:	f00f fcb3 	bl	8017494 <lv_label_set_recolor>
		lv_label_set_align(txt_pot, LV_ALIGN_IN_BOTTOM_RIGHT); 				// Centraliza linhas alinhadas
 8007b2e:	6838      	ldr	r0, [r7, #0]
 8007b30:	2106      	movs	r1, #6
 8007b32:	f00f f90c 	bl	8016d4e <lv_label_set_align>
		sprintf(buffer, "%0.1fW", fwd);
 8007b36:	ed9d 0a02 	vldr	s0, [sp, #8]
 8007b3a:	ee10 0a10 	vmov	r0, s0
 8007b3e:	f7f8 fd03 	bl	8000548 <__aeabi_f2d>
 8007b42:	4602      	mov	r2, r0
 8007b44:	460b      	mov	r3, r1
 8007b46:	4847      	ldr	r0, [pc, #284]	; (8007c64 <print_pot+0x1fc>)
 8007b48:	4947      	ldr	r1, [pc, #284]	; (8007c68 <print_pot+0x200>)
 8007b4a:	f011 fd7b 	bl	8019644 <sprintf>
		lv_label_set_text(txt_pot, buffer);
 8007b4e:	6838      	ldr	r0, [r7, #0]
 8007b50:	4944      	ldr	r1, [pc, #272]	; (8007c64 <print_pot+0x1fc>)
 8007b52:	f00f fc09 	bl	8017368 <lv_label_set_text>
		lv_obj_set_width(txt_pot, 200); 									// Configuura o comprimento
 8007b56:	6838      	ldr	r0, [r7, #0]
 8007b58:	21c8      	movs	r1, #200	; 0xc8
 8007b5a:	f007 f8a7 	bl	800ecac <lv_obj_set_width>
		lv_obj_align(txt_pot, NULL, LV_ALIGN_IN_BOTTOM_RIGHT, -8, -25); 	// Alinha ao centro
 8007b5e:	f8cd a000 	str.w	sl, [sp]
 8007b62:	6838      	ldr	r0, [r7, #0]
		lv_style_copy(&style_txt_ref, &lv_style_plain);
 8007b64:	4f41      	ldr	r7, [pc, #260]	; (8007c6c <print_pot+0x204>)
		lv_obj_align(txt_pot, NULL, LV_ALIGN_IN_BOTTOM_RIGHT, -8, -25); 	// Alinha ao centro
 8007b66:	2206      	movs	r2, #6
 8007b68:	f06f 0307 	mvn.w	r3, #7
 8007b6c:	4621      	mov	r1, r4
 8007b6e:	f006 fcb3 	bl	800e4d8 <lv_obj_align>
		lv_style_copy(&style_txt_ref, &lv_style_plain);
 8007b72:	4937      	ldr	r1, [pc, #220]	; (8007c50 <print_pot+0x1e8>)
 8007b74:	4638      	mov	r0, r7
 8007b76:	f007 fdad 	bl	800f6d4 <lv_style_copy>
		style_txt_ref.text.color = LV_COLOR_WHITE;
 8007b7a:	4b3d      	ldr	r3, [pc, #244]	; (8007c70 <print_pot+0x208>)
		txt_ref = lv_label_create(Tela_Principal, NULL);
 8007b7c:	f8d8 0000 	ldr.w	r0, [r8]
		style_txt_ref.text.color = LV_COLOR_WHITE;
 8007b80:	881b      	ldrh	r3, [r3, #0]
 8007b82:	843b      	strh	r3, [r7, #32]
		txt_ref = lv_label_create(Tela_Principal, NULL);
 8007b84:	4621      	mov	r1, r4
		style_txt_ref.text.font = &lv_font_eurostile_24;
 8007b86:	f8c7 9024 	str.w	r9, [r7, #36]	; 0x24
		style_txt_ref.text.letter_space = 1;
 8007b8a:	853e      	strh	r6, [r7, #40]	; 0x28
		style_txt_ref.text.line_space = 1;
 8007b8c:	857e      	strh	r6, [r7, #42]	; 0x2a
		txt_ref = lv_label_create(Tela_Principal, NULL);
 8007b8e:	f00f fc95 	bl	80174bc <lv_label_create>
		lv_obj_set_style(txt_ref, &style_txt_ref); 							// Configura o estilo criado
 8007b92:	4639      	mov	r1, r7
		txt_ref = lv_label_create(Tela_Principal, NULL);
 8007b94:	6028      	str	r0, [r5, #0]
		lv_obj_set_style(txt_ref, &style_txt_ref); 							// Configura o estilo criado
 8007b96:	f007 f941 	bl	800ee1c <lv_obj_set_style>
		lv_label_set_long_mode(txt_ref, LV_LABEL_LONG_EXPAND); 				// Quebra as linhas longas
 8007b9a:	6828      	ldr	r0, [r5, #0]
 8007b9c:	4621      	mov	r1, r4
 8007b9e:	f00f fc37 	bl	8017410 <lv_label_set_long_mode>
		lv_label_set_recolor(txt_ref, true); 								// Ativa recolorizar por comandos no texto
 8007ba2:	6828      	ldr	r0, [r5, #0]
 8007ba4:	4631      	mov	r1, r6
 8007ba6:	f00f fc75 	bl	8017494 <lv_label_set_recolor>
		lv_label_set_align(txt_ref, LV_ALIGN_IN_BOTTOM_LEFT); 				// Centraliza linhas alinhadas
 8007baa:	6828      	ldr	r0, [r5, #0]
 8007bac:	2104      	movs	r1, #4
 8007bae:	f00f f8ce 	bl	8016d4e <lv_label_set_align>
		lv_label_set_text(txt_ref, "REF:");
 8007bb2:	6828      	ldr	r0, [r5, #0]
 8007bb4:	492f      	ldr	r1, [pc, #188]	; (8007c74 <print_pot+0x20c>)
 8007bb6:	f00f fbd7 	bl	8017368 <lv_label_set_text>
		lv_obj_align(txt_ref, NULL, LV_ALIGN_IN_BOTTOM_LEFT, 5, -2); 		//Alinha ao centro
 8007bba:	f06f 0901 	mvn.w	r9, #1
		lv_obj_set_width(txt_ref, 300); 									// Configuura o comprimento
 8007bbe:	6828      	ldr	r0, [r5, #0]
 8007bc0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8007bc4:	f007 f872 	bl	800ecac <lv_obj_set_width>
		lv_obj_align(txt_ref, NULL, LV_ALIGN_IN_BOTTOM_LEFT, 5, -2); 		//Alinha ao centro
 8007bc8:	f8cd 9000 	str.w	r9, [sp]
 8007bcc:	2305      	movs	r3, #5
 8007bce:	2204      	movs	r2, #4
 8007bd0:	6828      	ldr	r0, [r5, #0]
		txt_swr = lv_label_create(Tela_Principal, NULL);
 8007bd2:	4d29      	ldr	r5, [pc, #164]	; (8007c78 <print_pot+0x210>)
		lv_obj_align(txt_ref, NULL, LV_ALIGN_IN_BOTTOM_LEFT, 5, -2); 		//Alinha ao centro
 8007bd4:	4621      	mov	r1, r4
 8007bd6:	f006 fc7f 	bl	800e4d8 <lv_obj_align>
		txt_swr = lv_label_create(Tela_Principal, NULL);
 8007bda:	4621      	mov	r1, r4
 8007bdc:	f8d8 0000 	ldr.w	r0, [r8]
 8007be0:	f00f fc6c 	bl	80174bc <lv_label_create>
		lv_obj_set_style(txt_swr, &style_txt_ref); 							// Configura o estilo criado
 8007be4:	4639      	mov	r1, r7
		txt_swr = lv_label_create(Tela_Principal, NULL);
 8007be6:	6028      	str	r0, [r5, #0]
		lv_obj_set_style(txt_swr, &style_txt_ref); 							// Configura o estilo criado
 8007be8:	f007 f918 	bl	800ee1c <lv_obj_set_style>
		lv_label_set_long_mode(txt_swr, LV_LABEL_LONG_BREAK); 				// Quebra as linhas longas
 8007bec:	4631      	mov	r1, r6
 8007bee:	6828      	ldr	r0, [r5, #0]
 8007bf0:	f00f fc0e 	bl	8017410 <lv_label_set_long_mode>
		lv_label_set_recolor(txt_swr, true); 								// Ativa recolorizar por comandos no texto
 8007bf4:	4631      	mov	r1, r6
 8007bf6:	6828      	ldr	r0, [r5, #0]
 8007bf8:	f00f fc4c 	bl	8017494 <lv_label_set_recolor>
		lv_label_set_align(txt_swr, LV_ALIGN_IN_BOTTOM_RIGHT); 				// Centraliza linhas alinhadas
 8007bfc:	2106      	movs	r1, #6
 8007bfe:	6828      	ldr	r0, [r5, #0]
 8007c00:	f00f f8a5 	bl	8016d4e <lv_label_set_align>
		sprintf(buffer, "%0.1fW", swr);
 8007c04:	eddd 0a03 	vldr	s1, [sp, #12]
 8007c08:	ee10 0a90 	vmov	r0, s1
 8007c0c:	f7f8 fc9c 	bl	8000548 <__aeabi_f2d>
 8007c10:	4602      	mov	r2, r0
 8007c12:	460b      	mov	r3, r1
 8007c14:	4813      	ldr	r0, [pc, #76]	; (8007c64 <print_pot+0x1fc>)
 8007c16:	4914      	ldr	r1, [pc, #80]	; (8007c68 <print_pot+0x200>)
 8007c18:	f011 fd14 	bl	8019644 <sprintf>
		lv_label_set_text(txt_swr, buffer);
 8007c1c:	4911      	ldr	r1, [pc, #68]	; (8007c64 <print_pot+0x1fc>)
 8007c1e:	6828      	ldr	r0, [r5, #0]
 8007c20:	f00f fba2 	bl	8017368 <lv_label_set_text>
		lv_obj_set_width(txt_swr, 300); 									// Configuura o comprimento
 8007c24:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8007c28:	6828      	ldr	r0, [r5, #0]
 8007c2a:	f007 f83f 	bl	800ecac <lv_obj_set_width>
		lv_obj_align(txt_swr, NULL, LV_ALIGN_IN_BOTTOM_RIGHT, -8, -2); 		//Alinha ao centro
 8007c2e:	f8cd 9000 	str.w	r9, [sp]
 8007c32:	f06f 0307 	mvn.w	r3, #7
 8007c36:	2206      	movs	r2, #6
 8007c38:	4621      	mov	r1, r4
 8007c3a:	6828      	ldr	r0, [r5, #0]
 8007c3c:	f006 fc4c 	bl	800e4d8 <lv_obj_align>
}
 8007c40:	b004      	add	sp, #16
 8007c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c46:	bf00      	nop
 8007c48:	20004db4 	.word	0x20004db4
 8007c4c:	200050b0 	.word	0x200050b0
 8007c50:	2000c424 	.word	0x2000c424
 8007c54:	20005128 	.word	0x20005128
 8007c58:	0802bac0 	.word	0x0802bac0
 8007c5c:	2000512c 	.word	0x2000512c
 8007c60:	20005130 	.word	0x20005130
 8007c64:	20004cd0 	.word	0x20004cd0
 8007c68:	0802bac5 	.word	0x0802bac5
 8007c6c:	200050ec 	.word	0x200050ec
 8007c70:	0801cb08 	.word	0x0801cb08
 8007c74:	0802bacc 	.word	0x0802bacc
 8007c78:	20005134 	.word	0x20005134
 8007c7c:	20004df4 	.word	0x20004df4
 8007c80:	2000132c 	.word	0x2000132c

08007c84 <print_audio>:
{
 8007c84:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	lv_style_copy(&style_txt, &lv_style_plain);
 8007c88:	4d3c      	ldr	r5, [pc, #240]	; (8007d7c <print_audio+0xf8>)
	img_stereo = lv_img_create(Tela_Principal, NULL); 					// Crate an image object
 8007c8a:	4e3d      	ldr	r6, [pc, #244]	; (8007d80 <print_audio+0xfc>)
 8007c8c:	4f3d      	ldr	r7, [pc, #244]	; (8007d84 <print_audio+0x100>)
{
 8007c8e:	4682      	mov	sl, r0
 8007c90:	4689      	mov	r9, r1
	lv_style_copy(&style_txt, &lv_style_plain);
 8007c92:	4628      	mov	r0, r5
 8007c94:	493c      	ldr	r1, [pc, #240]	; (8007d88 <print_audio+0x104>)
 8007c96:	f007 fd1d 	bl	800f6d4 <lv_style_copy>
	style_txt.text.font = &lv_font_eurostile_10;
 8007c9a:	4b3c      	ldr	r3, [pc, #240]	; (8007d8c <print_audio+0x108>)
 8007c9c:	626b      	str	r3, [r5, #36]	; 0x24
	style_txt.text.color = LV_COLOR_WHITE;
 8007c9e:	4b3c      	ldr	r3, [pc, #240]	; (8007d90 <print_audio+0x10c>)
	img_stereo = lv_img_create(Tela_Principal, NULL); 					// Crate an image object
 8007ca0:	6830      	ldr	r0, [r6, #0]
	style_txt.text.color = LV_COLOR_WHITE;
 8007ca2:	881b      	ldrh	r3, [r3, #0]
 8007ca4:	842b      	strh	r3, [r5, #32]
	style_txt.text.letter_space = 1;
 8007ca6:	f04f 0801 	mov.w	r8, #1
	img_stereo = lv_img_create(Tela_Principal, NULL); 					// Crate an image object
 8007caa:	2100      	movs	r1, #0
	style_txt.text.letter_space = 1;
 8007cac:	f8a5 8028 	strh.w	r8, [r5, #40]	; 0x28
	style_txt.text.line_space = 1;
 8007cb0:	f8a5 802a 	strh.w	r8, [r5, #42]	; 0x2a
	img_stereo = lv_img_create(Tela_Principal, NULL); 					// Crate an image object
 8007cb4:	f00e fd34 	bl	8016720 <lv_img_create>
	lv_obj_t * txt_stereo = lv_label_create(Tela_Principal, NULL);
 8007cb8:	2100      	movs	r1, #0
	img_stereo = lv_img_create(Tela_Principal, NULL); 					// Crate an image object
 8007cba:	6038      	str	r0, [r7, #0]
	lv_obj_t * txt_stereo = lv_label_create(Tela_Principal, NULL);
 8007cbc:	6830      	ldr	r0, [r6, #0]
 8007cbe:	f00f fbfd 	bl	80174bc <lv_label_create>
	lv_obj_set_style(txt_stereo, &style_txt);                    		// Set the created style
 8007cc2:	4629      	mov	r1, r5
	lv_obj_t * txt_stereo = lv_label_create(Tela_Principal, NULL);
 8007cc4:	4604      	mov	r4, r0
	lv_obj_set_style(txt_stereo, &style_txt);                    		// Set the created style
 8007cc6:	f007 f8a9 	bl	800ee1c <lv_obj_set_style>
	lv_label_set_long_mode(txt_stereo, LV_LABEL_LONG_EXPAND);     		// Break the long lines
 8007cca:	2100      	movs	r1, #0
 8007ccc:	4620      	mov	r0, r4
 8007cce:	f00f fb9f 	bl	8017410 <lv_label_set_long_mode>
	lv_label_set_recolor(txt_stereo, true);                      		// Enable re-coloring by commands in the text
 8007cd2:	4641      	mov	r1, r8
 8007cd4:	4620      	mov	r0, r4
 8007cd6:	f00f fbdd 	bl	8017494 <lv_label_set_recolor>
	lv_label_set_align(txt_stereo, LV_ALIGN_IN_TOP_LEFT);       		// Center aligned lines
 8007cda:	4641      	mov	r1, r8
 8007cdc:	4620      	mov	r0, r4
 8007cde:	f00f f836 	bl	8016d4e <lv_label_set_align>
	if(stereo) {
 8007ce2:	f1ba 0f00 	cmp.w	sl, #0
 8007ce6:	d042      	beq.n	8007d6e <print_audio+0xea>
		lv_label_set_text(txt_stereo, "ST");
 8007ce8:	492a      	ldr	r1, [pc, #168]	; (8007d94 <print_audio+0x110>)
 8007cea:	4620      	mov	r0, r4
 8007cec:	f00f fb3c 	bl	8017368 <lv_label_set_text>
		lv_img_set_src(img_stereo, &stereo_vd);
 8007cf0:	4929      	ldr	r1, [pc, #164]	; (8007d98 <print_audio+0x114>)
		lv_img_set_src(img_stereo, &stereo_off);
 8007cf2:	6838      	ldr	r0, [r7, #0]
 8007cf4:	f00e fc84 	bl	8016600 <lv_img_set_src>
		lv_obj_set_pos(img_stereo, 28, 59); 							// Set the positions
 8007cf8:	223b      	movs	r2, #59	; 0x3b
 8007cfa:	6838      	ldr	r0, [r7, #0]
 8007cfc:	211c      	movs	r1, #28
 8007cfe:	f006 fb96 	bl	800e42e <lv_obj_set_pos>
	lv_obj_align(txt_stereo, NULL, LV_ALIGN_IN_TOP_LEFT, 6, 61);      	// Align to center
 8007d02:	253d      	movs	r5, #61	; 0x3d
	lv_obj_set_width(txt_stereo, 300);                           		// Set a width
 8007d04:	4620      	mov	r0, r4
 8007d06:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8007d0a:	f006 ffcf 	bl	800ecac <lv_obj_set_width>
	lv_obj_align(txt_stereo, NULL, LV_ALIGN_IN_TOP_LEFT, 6, 61);      	// Align to center
 8007d0e:	2201      	movs	r2, #1
 8007d10:	2306      	movs	r3, #6
 8007d12:	4620      	mov	r0, r4
 8007d14:	9500      	str	r5, [sp, #0]
 8007d16:	2100      	movs	r1, #0
 8007d18:	f006 fbde 	bl	800e4d8 <lv_obj_align>
	lv_obj_t * txt_audio = lv_label_create(Tela_Principal, NULL);
 8007d1c:	2100      	movs	r1, #0
 8007d1e:	6830      	ldr	r0, [r6, #0]
 8007d20:	f00f fbcc 	bl	80174bc <lv_label_create>
	lv_obj_set_style(txt_audio, &style_txt);                    		// Set the created style
 8007d24:	4915      	ldr	r1, [pc, #84]	; (8007d7c <print_audio+0xf8>)
	lv_obj_t * txt_audio = lv_label_create(Tela_Principal, NULL);
 8007d26:	4604      	mov	r4, r0
	lv_obj_set_style(txt_audio, &style_txt);                    		// Set the created style
 8007d28:	f007 f878 	bl	800ee1c <lv_obj_set_style>
	lv_label_set_long_mode(txt_audio, LV_LABEL_LONG_EXPAND);     		// Break the long lines
 8007d2c:	4620      	mov	r0, r4
 8007d2e:	2100      	movs	r1, #0
 8007d30:	f00f fb6e 	bl	8017410 <lv_label_set_long_mode>
	lv_label_set_recolor(txt_audio, true);                      		// Enable re-coloring by commands in the text
 8007d34:	4620      	mov	r0, r4
 8007d36:	2101      	movs	r1, #1
 8007d38:	f00f fbac 	bl	8017494 <lv_label_set_recolor>
	lv_label_set_align(txt_audio, LV_ALIGN_IN_TOP_LEFT);       			// Center aligned lines
 8007d3c:	4620      	mov	r0, r4
 8007d3e:	2101      	movs	r1, #1
 8007d40:	f00f f805 	bl	8016d4e <lv_label_set_align>
	lv_label_set_text(txt_audio, IndexAudio[audio]);
 8007d44:	4b15      	ldr	r3, [pc, #84]	; (8007d9c <print_audio+0x118>)
 8007d46:	4620      	mov	r0, r4
 8007d48:	f853 1029 	ldr.w	r1, [r3, r9, lsl #2]
 8007d4c:	f00f fb0c 	bl	8017368 <lv_label_set_text>
	lv_obj_set_width(txt_audio, 300);                           		// Set a width
 8007d50:	4620      	mov	r0, r4
 8007d52:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8007d56:	f006 ffa9 	bl	800ecac <lv_obj_set_width>
	lv_obj_align(txt_audio, NULL, LV_ALIGN_IN_TOP_LEFT, 55, 61);      	// Align to center
 8007d5a:	9500      	str	r5, [sp, #0]
 8007d5c:	2337      	movs	r3, #55	; 0x37
 8007d5e:	2201      	movs	r2, #1
 8007d60:	2100      	movs	r1, #0
 8007d62:	4620      	mov	r0, r4
 8007d64:	f006 fbb8 	bl	800e4d8 <lv_obj_align>
}
 8007d68:	b002      	add	sp, #8
 8007d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		lv_label_set_text(txt_stereo, "Mo");
 8007d6e:	490c      	ldr	r1, [pc, #48]	; (8007da0 <print_audio+0x11c>)
 8007d70:	4620      	mov	r0, r4
 8007d72:	f00f faf9 	bl	8017368 <lv_label_set_text>
		lv_img_set_src(img_stereo, &stereo_off);
 8007d76:	490b      	ldr	r1, [pc, #44]	; (8007da4 <print_audio+0x120>)
 8007d78:	e7bb      	b.n	8007cf2 <print_audio+0x6e>
 8007d7a:	bf00      	nop
 8007d7c:	20004fc0 	.word	0x20004fc0
 8007d80:	20004df4 	.word	0x20004df4
 8007d84:	20004e54 	.word	0x20004e54
 8007d88:	2000c424 	.word	0x2000c424
 8007d8c:	200006ec 	.word	0x200006ec
 8007d90:	0801cb08 	.word	0x0801cb08
 8007d94:	0802baa8 	.word	0x0802baa8
 8007d98:	20001b74 	.word	0x20001b74
 8007d9c:	20001960 	.word	0x20001960
 8007da0:	0802baab 	.word	0x0802baab
 8007da4:	20001b68 	.word	0x20001b68

08007da8 <print_temperatura>:
{
 8007da8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	lv_style_copy(&style_txt, &lv_style_plain);
 8007daa:	4d1f      	ldr	r5, [pc, #124]	; (8007e28 <print_temperatura+0x80>)
 8007dac:	491f      	ldr	r1, [pc, #124]	; (8007e2c <print_temperatura+0x84>)
	txt_temp = lv_label_create(Tela_Principal, NULL);
 8007dae:	4c20      	ldr	r4, [pc, #128]	; (8007e30 <print_temperatura+0x88>)
	lv_style_copy(&style_txt, &lv_style_plain);
 8007db0:	4628      	mov	r0, r5
 8007db2:	f007 fc8f 	bl	800f6d4 <lv_style_copy>
	style_txt.text.font = &lv_font_eurostile_10;
 8007db6:	4b1f      	ldr	r3, [pc, #124]	; (8007e34 <print_temperatura+0x8c>)
 8007db8:	626b      	str	r3, [r5, #36]	; 0x24
	style_txt.text.color = LV_COLOR_WHITE;
 8007dba:	4b1f      	ldr	r3, [pc, #124]	; (8007e38 <print_temperatura+0x90>)
 8007dbc:	881b      	ldrh	r3, [r3, #0]
 8007dbe:	842b      	strh	r3, [r5, #32]
	txt_temp = lv_label_create(Tela_Principal, NULL);
 8007dc0:	4b1e      	ldr	r3, [pc, #120]	; (8007e3c <print_temperatura+0x94>)
	style_txt.text.letter_space = 1;
 8007dc2:	2601      	movs	r6, #1
	txt_temp = lv_label_create(Tela_Principal, NULL);
 8007dc4:	6818      	ldr	r0, [r3, #0]
	style_txt.text.letter_space = 1;
 8007dc6:	852e      	strh	r6, [r5, #40]	; 0x28
	txt_temp = lv_label_create(Tela_Principal, NULL);
 8007dc8:	2100      	movs	r1, #0
	style_txt.text.line_space = 1;
 8007dca:	856e      	strh	r6, [r5, #42]	; 0x2a
	txt_temp = lv_label_create(Tela_Principal, NULL);
 8007dcc:	f00f fb76 	bl	80174bc <lv_label_create>
	lv_obj_set_style(txt_temp, &style_txt);                    		// Set the created style
 8007dd0:	4629      	mov	r1, r5
	txt_temp = lv_label_create(Tela_Principal, NULL);
 8007dd2:	6020      	str	r0, [r4, #0]
	lv_obj_set_style(txt_temp, &style_txt);                    		// Set the created style
 8007dd4:	f007 f822 	bl	800ee1c <lv_obj_set_style>
	lv_label_set_long_mode(txt_temp, LV_LABEL_LONG_EXPAND);     	// Break the long lines
 8007dd8:	6820      	ldr	r0, [r4, #0]
	sprintf(buffer, "TP:%0.1f°", temp);
 8007dda:	4d19      	ldr	r5, [pc, #100]	; (8007e40 <print_temperatura+0x98>)
	lv_label_set_long_mode(txt_temp, LV_LABEL_LONG_EXPAND);     	// Break the long lines
 8007ddc:	2100      	movs	r1, #0
 8007dde:	f00f fb17 	bl	8017410 <lv_label_set_long_mode>
	lv_label_set_recolor(txt_temp, true);                      		// Enable re-coloring by commands in the text
 8007de2:	4631      	mov	r1, r6
 8007de4:	6820      	ldr	r0, [r4, #0]
 8007de6:	f00f fb55 	bl	8017494 <lv_label_set_recolor>
	lv_label_set_align(txt_temp, LV_ALIGN_IN_TOP_LEFT);       		// Center aligned lines
 8007dea:	4631      	mov	r1, r6
 8007dec:	6820      	ldr	r0, [r4, #0]
 8007dee:	f00e ffae 	bl	8016d4e <lv_label_set_align>
	sprintf(buffer, "TP:%0.1f°", temp);
 8007df2:	a30b      	add	r3, pc, #44	; (adr r3, 8007e20 <print_temperatura+0x78>)
 8007df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df8:	4912      	ldr	r1, [pc, #72]	; (8007e44 <print_temperatura+0x9c>)
 8007dfa:	4628      	mov	r0, r5
 8007dfc:	f011 fc22 	bl	8019644 <sprintf>
	lv_label_set_text(txt_temp, buffer);
 8007e00:	4629      	mov	r1, r5
 8007e02:	6820      	ldr	r0, [r4, #0]
 8007e04:	f00f fab0 	bl	8017368 <lv_label_set_text>
	lv_obj_align(txt_temp, NULL, LV_ALIGN_IN_TOP_LEFT, 109, 61);    // Align to center
 8007e08:	233d      	movs	r3, #61	; 0x3d
 8007e0a:	9300      	str	r3, [sp, #0]
 8007e0c:	4632      	mov	r2, r6
 8007e0e:	236d      	movs	r3, #109	; 0x6d
 8007e10:	2100      	movs	r1, #0
 8007e12:	6820      	ldr	r0, [r4, #0]
 8007e14:	f006 fb60 	bl	800e4d8 <lv_obj_align>
}
 8007e18:	b002      	add	sp, #8
 8007e1a:	bd70      	pop	{r4, r5, r6, pc}
 8007e1c:	f3af 8000 	nop.w
 8007e20:	60000000 	.word	0x60000000
 8007e24:	4045a666 	.word	0x4045a666
 8007e28:	20004ffc 	.word	0x20004ffc
 8007e2c:	2000c424 	.word	0x2000c424
 8007e30:	20005138 	.word	0x20005138
 8007e34:	200006ec 	.word	0x200006ec
 8007e38:	0801cb08 	.word	0x0801cb08
 8007e3c:	20004df4 	.word	0x20004df4
 8007e40:	20004cd0 	.word	0x20004cd0
 8007e44:	0802bad9 	.word	0x0802bad9

08007e48 <print_alarme>:
{
 8007e48:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	lv_style_copy(&style_cont, &lv_style_plain);
 8007e4c:	4c5a      	ldr	r4, [pc, #360]	; (8007fb8 <print_alarme+0x170>)
 8007e4e:	495b      	ldr	r1, [pc, #364]	; (8007fbc <print_alarme+0x174>)
	cod_falha = lv_label_create(cont, NULL);
 8007e50:	4d5b      	ldr	r5, [pc, #364]	; (8007fc0 <print_alarme+0x178>)
{
 8007e52:	4680      	mov	r8, r0
	lv_style_copy(&style_cont, &lv_style_plain);
 8007e54:	4620      	mov	r0, r4
 8007e56:	f007 fc3d 	bl	800f6d4 <lv_style_copy>
	style_cont.text.font = &lv_font_eurostile_22;
 8007e5a:	4b5a      	ldr	r3, [pc, #360]	; (8007fc4 <print_alarme+0x17c>)
 8007e5c:	6263      	str	r3, [r4, #36]	; 0x24
	style_cont.text.color = LV_COLOR_WHITE;
 8007e5e:	4b5a      	ldr	r3, [pc, #360]	; (8007fc8 <print_alarme+0x180>)
 8007e60:	881b      	ldrh	r3, [r3, #0]
 8007e62:	8423      	strh	r3, [r4, #32]
	style_cont.body.main_color = LV_COLOR_RED;
 8007e64:	78a3      	ldrb	r3, [r4, #2]
 8007e66:	f36f 0304 	bfc	r3, #0, #5
 8007e6a:	70a3      	strb	r3, [r4, #2]
 8007e6c:	8863      	ldrh	r3, [r4, #2]
 8007e6e:	f36f 134a 	bfc	r3, #5, #6
 8007e72:	8063      	strh	r3, [r4, #2]
 8007e74:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8007e78:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 8007e7c:	70e3      	strb	r3, [r4, #3]
	style_cont.body.grad_color = LV_COLOR_RED;
 8007e7e:	7923      	ldrb	r3, [r4, #4]
 8007e80:	f36f 0304 	bfc	r3, #0, #5
 8007e84:	7123      	strb	r3, [r4, #4]
 8007e86:	88a3      	ldrh	r3, [r4, #4]
 8007e88:	f36f 134a 	bfc	r3, #5, #6
 8007e8c:	80a3      	strh	r3, [r4, #4]
 8007e8e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8007e92:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 8007e96:	7163      	strb	r3, [r4, #5]
	style_cont.body.opa = LV_OPA_50;
 8007e98:	237f      	movs	r3, #127	; 0x7f
 8007e9a:	7223      	strb	r3, [r4, #8]
	cont = lv_cont_create(Tela_Principal, NULL);
 8007e9c:	4b4b      	ldr	r3, [pc, #300]	; (8007fcc <print_alarme+0x184>)
	style_cont.text.letter_space = 1;
 8007e9e:	2701      	movs	r7, #1
	cont = lv_cont_create(Tela_Principal, NULL);
 8007ea0:	6818      	ldr	r0, [r3, #0]
	style_cont.text.letter_space = 1;
 8007ea2:	8527      	strh	r7, [r4, #40]	; 0x28
	cont = lv_cont_create(Tela_Principal, NULL);
 8007ea4:	2100      	movs	r1, #0
	style_cont.text.line_space = 1;
 8007ea6:	8567      	strh	r7, [r4, #42]	; 0x2a
	cont = lv_cont_create(Tela_Principal, NULL);
 8007ea8:	f00d f9de 	bl	8015268 <lv_cont_create>
	lv_obj_set_style(cont, &style_cont);
 8007eac:	4621      	mov	r1, r4
	cont = lv_cont_create(Tela_Principal, NULL);
 8007eae:	4606      	mov	r6, r0
	lv_obj_set_style(cont, &style_cont);
 8007eb0:	f006 ffb4 	bl	800ee1c <lv_obj_set_style>
	lv_obj_set_size(cont, 154, 50);
 8007eb4:	2232      	movs	r2, #50	; 0x32
 8007eb6:	219a      	movs	r1, #154	; 0x9a
 8007eb8:	4630      	mov	r0, r6
 8007eba:	f006 fead 	bl	800ec18 <lv_obj_set_size>
	lv_obj_align(cont, NULL, LV_ALIGN_IN_TOP_LEFT, 3, 75);
 8007ebe:	234b      	movs	r3, #75	; 0x4b
 8007ec0:	463a      	mov	r2, r7
 8007ec2:	9300      	str	r3, [sp, #0]
 8007ec4:	2100      	movs	r1, #0
 8007ec6:	2303      	movs	r3, #3
 8007ec8:	4630      	mov	r0, r6
 8007eca:	f006 fb05 	bl	800e4d8 <lv_obj_align>
	lv_cont_set_layout(cont, LV_LAYOUT_OFF);
 8007ece:	2100      	movs	r1, #0
 8007ed0:	4630      	mov	r0, r6
 8007ed2:	f00d fa2b 	bl	801532c <lv_cont_set_layout>
	cod_falha = lv_label_create(cont, NULL);
 8007ed6:	2100      	movs	r1, #0
 8007ed8:	4630      	mov	r0, r6
 8007eda:	f00f faef 	bl	80174bc <lv_label_create>
	lv_label_set_long_mode(cod_falha, LV_LABEL_LONG_EXPAND);     	// Break the long lines
 8007ede:	2100      	movs	r1, #0
	cod_falha = lv_label_create(cont, NULL);
 8007ee0:	6028      	str	r0, [r5, #0]
	lv_label_set_long_mode(cod_falha, LV_LABEL_LONG_EXPAND);     	// Break the long lines
 8007ee2:	f00f fa95 	bl	8017410 <lv_label_set_long_mode>
	lv_label_set_recolor(cod_falha, true); 							// Ativa recolorizar por comandos no texto
 8007ee6:	4639      	mov	r1, r7
 8007ee8:	6828      	ldr	r0, [r5, #0]
	desc_falha = lv_label_create(cont, NULL);
 8007eea:	4c39      	ldr	r4, [pc, #228]	; (8007fd0 <print_alarme+0x188>)
	lv_label_set_recolor(cod_falha, true); 							// Ativa recolorizar por comandos no texto
 8007eec:	f00f fad2 	bl	8017494 <lv_label_set_recolor>
	lv_obj_set_width(cod_falha, 150);
 8007ef0:	2196      	movs	r1, #150	; 0x96
 8007ef2:	6828      	ldr	r0, [r5, #0]
 8007ef4:	f006 feda 	bl	800ecac <lv_obj_set_width>
	lv_obj_align(cod_falha, cont, LV_ALIGN_IN_BOTTOM_MID, -10, -24 );
 8007ef8:	f06f 0317 	mvn.w	r3, #23
 8007efc:	2205      	movs	r2, #5
 8007efe:	9300      	str	r3, [sp, #0]
 8007f00:	4631      	mov	r1, r6
 8007f02:	f06f 0309 	mvn.w	r3, #9
 8007f06:	6828      	ldr	r0, [r5, #0]
 8007f08:	f006 fae6 	bl	800e4d8 <lv_obj_align>
	desc_falha = lv_label_create(cont, NULL);
 8007f0c:	2100      	movs	r1, #0
 8007f0e:	4630      	mov	r0, r6
 8007f10:	f00f fad4 	bl	80174bc <lv_label_create>
	lv_label_set_long_mode(desc_falha, LV_LABEL_LONG_SROLL_CIRC);     	// Break the long lines
 8007f14:	2104      	movs	r1, #4
	desc_falha = lv_label_create(cont, NULL);
 8007f16:	6020      	str	r0, [r4, #0]
	lv_label_set_long_mode(desc_falha, LV_LABEL_LONG_SROLL_CIRC);     	// Break the long lines
 8007f18:	f00f fa7a 	bl	8017410 <lv_label_set_long_mode>
	lv_label_set_recolor(desc_falha, true); 							// Ativa recolorizar por comandos no texto
 8007f1c:	4639      	mov	r1, r7
 8007f1e:	6820      	ldr	r0, [r4, #0]
 8007f20:	f00f fab8 	bl	8017494 <lv_label_set_recolor>
	lv_obj_set_width(desc_falha, 150);
 8007f24:	2196      	movs	r1, #150	; 0x96
 8007f26:	6820      	ldr	r0, [r4, #0]
 8007f28:	f006 fec0 	bl	800ecac <lv_obj_set_width>
	lv_obj_align(desc_falha, cont, LV_ALIGN_IN_BOTTOM_MID, 0, -2);
 8007f2c:	f06f 0301 	mvn.w	r3, #1
 8007f30:	9300      	str	r3, [sp, #0]
 8007f32:	2205      	movs	r2, #5
 8007f34:	2300      	movs	r3, #0
 8007f36:	4631      	mov	r1, r6
 8007f38:	6820      	ldr	r0, [r4, #0]
    switch(falha) {
 8007f3a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
	lv_obj_align(desc_falha, cont, LV_ALIGN_IN_BOTTOM_MID, 0, -2);
 8007f3e:	f006 facb 	bl	800e4d8 <lv_obj_align>
    switch(falha) {
 8007f42:	f1b8 0f06 	cmp.w	r8, #6
 8007f46:	d834      	bhi.n	8007fb2 <print_alarme+0x16a>
 8007f48:	e8df f008 	tbb	[pc, r8]
 8007f4c:	1b150f04 	.word	0x1b150f04
 8007f50:	2721      	.short	0x2721
 8007f52:	2d          	.byte	0x2d
 8007f53:	00          	.byte	0x00
    		lv_label_set_text(cod_falha, "Fail 01");
 8007f54:	491f      	ldr	r1, [pc, #124]	; (8007fd4 <print_alarme+0x18c>)
 8007f56:	6828      	ldr	r0, [r5, #0]
 8007f58:	f00f fa06 	bl	8017368 <lv_label_set_text>
    		lv_label_set_text(desc_falha, "PLL NO LOCK");
 8007f5c:	491e      	ldr	r1, [pc, #120]	; (8007fd8 <print_alarme+0x190>)
    		lv_label_set_text(desc_falha, "No Antenna");
 8007f5e:	6820      	ldr	r0, [r4, #0]
}
 8007f60:	b002      	add	sp, #8
 8007f62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    		lv_label_set_text(desc_falha, "No Antenna");
 8007f66:	f00f b9ff 	b.w	8017368 <lv_label_set_text>
    		lv_label_set_text(cod_falha, "Fail 02");
 8007f6a:	491c      	ldr	r1, [pc, #112]	; (8007fdc <print_alarme+0x194>)
 8007f6c:	6828      	ldr	r0, [r5, #0]
 8007f6e:	f00f f9fb 	bl	8017368 <lv_label_set_text>
    		lv_label_set_text(desc_falha, "Reflected High");
 8007f72:	491b      	ldr	r1, [pc, #108]	; (8007fe0 <print_alarme+0x198>)
 8007f74:	e7f3      	b.n	8007f5e <print_alarme+0x116>
    		lv_label_set_text(cod_falha, "Fail 03");
 8007f76:	491b      	ldr	r1, [pc, #108]	; (8007fe4 <print_alarme+0x19c>)
 8007f78:	6828      	ldr	r0, [r5, #0]
 8007f7a:	f00f f9f5 	bl	8017368 <lv_label_set_text>
    		lv_label_set_text(desc_falha, "Foldback");
 8007f7e:	491a      	ldr	r1, [pc, #104]	; (8007fe8 <print_alarme+0x1a0>)
 8007f80:	e7ed      	b.n	8007f5e <print_alarme+0x116>
    		lv_label_set_text(cod_falha, "Fail 04");
 8007f82:	491a      	ldr	r1, [pc, #104]	; (8007fec <print_alarme+0x1a4>)
 8007f84:	6828      	ldr	r0, [r5, #0]
 8007f86:	f00f f9ef 	bl	8017368 <lv_label_set_text>
    		lv_label_set_text(desc_falha, "Foldback IPA");
 8007f8a:	4919      	ldr	r1, [pc, #100]	; (8007ff0 <print_alarme+0x1a8>)
 8007f8c:	e7e7      	b.n	8007f5e <print_alarme+0x116>
    		lv_label_set_text(cod_falha, "Fail 05");
 8007f8e:	4919      	ldr	r1, [pc, #100]	; (8007ff4 <print_alarme+0x1ac>)
 8007f90:	6828      	ldr	r0, [r5, #0]
 8007f92:	f00f f9e9 	bl	8017368 <lv_label_set_text>
    		lv_label_set_text(desc_falha, "IPA High");
 8007f96:	4918      	ldr	r1, [pc, #96]	; (8007ff8 <print_alarme+0x1b0>)
 8007f98:	e7e1      	b.n	8007f5e <print_alarme+0x116>
    		lv_label_set_text(cod_falha, "Fail 06");
 8007f9a:	4918      	ldr	r1, [pc, #96]	; (8007ffc <print_alarme+0x1b4>)
 8007f9c:	6828      	ldr	r0, [r5, #0]
 8007f9e:	f00f f9e3 	bl	8017368 <lv_label_set_text>
    		lv_label_set_text(desc_falha, "VIN Fail");
 8007fa2:	4917      	ldr	r1, [pc, #92]	; (8008000 <print_alarme+0x1b8>)
 8007fa4:	e7db      	b.n	8007f5e <print_alarme+0x116>
    		lv_label_set_text(cod_falha, "Fail 07");
 8007fa6:	4917      	ldr	r1, [pc, #92]	; (8008004 <print_alarme+0x1bc>)
 8007fa8:	6828      	ldr	r0, [r5, #0]
 8007faa:	f00f f9dd 	bl	8017368 <lv_label_set_text>
    		lv_label_set_text(desc_falha, "No Antenna");
 8007fae:	4916      	ldr	r1, [pc, #88]	; (8008008 <print_alarme+0x1c0>)
 8007fb0:	e7d5      	b.n	8007f5e <print_alarme+0x116>
}
 8007fb2:	b002      	add	sp, #8
 8007fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fb8:	20004e58 	.word	0x20004e58
 8007fbc:	2000c424 	.word	0x2000c424
 8007fc0:	20004e48 	.word	0x20004e48
 8007fc4:	20000d0c 	.word	0x20000d0c
 8007fc8:	0801cb08 	.word	0x0801cb08
 8007fcc:	20004df4 	.word	0x20004df4
 8007fd0:	20004e4c 	.word	0x20004e4c
 8007fd4:	0802ba22 	.word	0x0802ba22
 8007fd8:	0802ba2a 	.word	0x0802ba2a
 8007fdc:	0802ba36 	.word	0x0802ba36
 8007fe0:	0802ba3e 	.word	0x0802ba3e
 8007fe4:	0802ba4d 	.word	0x0802ba4d
 8007fe8:	0802ba55 	.word	0x0802ba55
 8007fec:	0802ba5e 	.word	0x0802ba5e
 8007ff0:	0802ba66 	.word	0x0802ba66
 8007ff4:	0802ba73 	.word	0x0802ba73
 8007ff8:	0802ba7b 	.word	0x0802ba7b
 8007ffc:	0802ba84 	.word	0x0802ba84
 8008000:	0802ba8c 	.word	0x0802ba8c
 8008004:	0802ba95 	.word	0x0802ba95
 8008008:	0802ba9d 	.word	0x0802ba9d

0800800c <print_status>:
{
 800800c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	lv_style_copy(&style_txt, &lv_style_plain);
 800800e:	4c37      	ldr	r4, [pc, #220]	; (80080ec <print_status+0xe0>)
 8008010:	4937      	ldr	r1, [pc, #220]	; (80080f0 <print_status+0xe4>)
{
 8008012:	4605      	mov	r5, r0
	lv_style_copy(&style_txt, &lv_style_plain);
 8008014:	4620      	mov	r0, r4
 8008016:	f007 fb5d 	bl	800f6d4 <lv_style_copy>
	style_txt.text.font = &lv_font_eurostile_10;
 800801a:	4b36      	ldr	r3, [pc, #216]	; (80080f4 <print_status+0xe8>)
 800801c:	6263      	str	r3, [r4, #36]	; 0x24
	style_txt.text.color = LV_COLOR_WHITE;
 800801e:	4b36      	ldr	r3, [pc, #216]	; (80080f8 <print_status+0xec>)
 8008020:	881b      	ldrh	r3, [r3, #0]
 8008022:	8423      	strh	r3, [r4, #32]
	style_txt.body.main_color = LV_COLOR_BLUE;
 8008024:	78a3      	ldrb	r3, [r4, #2]
 8008026:	f043 031f 	orr.w	r3, r3, #31
 800802a:	70a3      	strb	r3, [r4, #2]
 800802c:	8863      	ldrh	r3, [r4, #2]
 800802e:	f36f 134a 	bfc	r3, #5, #6
 8008032:	8063      	strh	r3, [r4, #2]
 8008034:	0a1b      	lsrs	r3, r3, #8
 8008036:	f36f 03c7 	bfc	r3, #3, #5
 800803a:	70e3      	strb	r3, [r4, #3]
	style_txt.body.grad_color = LV_COLOR_BLUE;
 800803c:	7923      	ldrb	r3, [r4, #4]
 800803e:	f043 031f 	orr.w	r3, r3, #31
 8008042:	7123      	strb	r3, [r4, #4]
 8008044:	88a3      	ldrh	r3, [r4, #4]
 8008046:	f36f 134a 	bfc	r3, #5, #6
 800804a:	80a3      	strh	r3, [r4, #4]
 800804c:	0a1b      	lsrs	r3, r3, #8
 800804e:	f36f 03c7 	bfc	r3, #3, #5
 8008052:	7163      	strb	r3, [r4, #5]
	cont = lv_cont_create(Tela_Principal, NULL);
 8008054:	4b29      	ldr	r3, [pc, #164]	; (80080fc <print_status+0xf0>)
	style_txt.text.letter_space = 1;
 8008056:	2701      	movs	r7, #1
	cont = lv_cont_create(Tela_Principal, NULL);
 8008058:	6818      	ldr	r0, [r3, #0]
	style_txt.text.letter_space = 1;
 800805a:	8527      	strh	r7, [r4, #40]	; 0x28
	cont = lv_cont_create(Tela_Principal, NULL);
 800805c:	2100      	movs	r1, #0
	style_txt.text.line_space = 1;
 800805e:	8567      	strh	r7, [r4, #42]	; 0x2a
	cont = lv_cont_create(Tela_Principal, NULL);
 8008060:	f00d f902 	bl	8015268 <lv_cont_create>
	lv_obj_set_style(cont, &style_txt);
 8008064:	4621      	mov	r1, r4
	cont = lv_cont_create(Tela_Principal, NULL);
 8008066:	4606      	mov	r6, r0
	lv_obj_set_style(cont, &style_txt);
 8008068:	f006 fed8 	bl	800ee1c <lv_obj_set_style>
	lv_obj_set_size(cont, 30, 12);
 800806c:	220c      	movs	r2, #12
 800806e:	211e      	movs	r1, #30
 8008070:	4630      	mov	r0, r6
 8008072:	f006 fdd1 	bl	800ec18 <lv_obj_set_size>
	lv_obj_align(cont, NULL, LV_ALIGN_IN_TOP_LEFT, 127, 45);
 8008076:	232d      	movs	r3, #45	; 0x2d
 8008078:	9300      	str	r3, [sp, #0]
 800807a:	463a      	mov	r2, r7
 800807c:	237f      	movs	r3, #127	; 0x7f
 800807e:	2100      	movs	r1, #0
 8008080:	4630      	mov	r0, r6
 8008082:	f006 fa29 	bl	800e4d8 <lv_obj_align>
	lv_cont_set_layout(cont, LV_LAYOUT_COL_M);
 8008086:	2103      	movs	r1, #3
 8008088:	4630      	mov	r0, r6
 800808a:	f00d f94f 	bl	801532c <lv_cont_set_layout>
	label = lv_label_create(cont, NULL);
 800808e:	2100      	movs	r1, #0
 8008090:	4630      	mov	r0, r6
 8008092:	f00f fa13 	bl	80174bc <lv_label_create>
	if(!falha) {
 8008096:	b92d      	cbnz	r5, 80080a4 <print_status+0x98>
		lv_label_set_text(label, "OK");
 8008098:	4919      	ldr	r1, [pc, #100]	; (8008100 <print_status+0xf4>)
}
 800809a:	b003      	add	sp, #12
 800809c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		lv_label_set_text(label, "OK");
 80080a0:	f00f b962 	b.w	8017368 <lv_label_set_text>
		style_txt.body.main_color = LV_COLOR_RED;
 80080a4:	78a3      	ldrb	r3, [r4, #2]
		lv_label_set_text(label, "FAIL");
 80080a6:	4917      	ldr	r1, [pc, #92]	; (8008104 <print_status+0xf8>)
		style_txt.body.main_color = LV_COLOR_RED;
 80080a8:	f36f 0304 	bfc	r3, #0, #5
 80080ac:	70a3      	strb	r3, [r4, #2]
 80080ae:	8863      	ldrh	r3, [r4, #2]
 80080b0:	f36f 134a 	bfc	r3, #5, #6
 80080b4:	8063      	strh	r3, [r4, #2]
 80080b6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80080ba:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 80080be:	70e3      	strb	r3, [r4, #3]
		style_txt.body.grad_color = LV_COLOR_RED;
 80080c0:	7923      	ldrb	r3, [r4, #4]
 80080c2:	f36f 0304 	bfc	r3, #0, #5
 80080c6:	7123      	strb	r3, [r4, #4]
 80080c8:	88a3      	ldrh	r3, [r4, #4]
 80080ca:	f36f 134a 	bfc	r3, #5, #6
 80080ce:	80a3      	strh	r3, [r4, #4]
 80080d0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80080d4:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 80080d8:	7163      	strb	r3, [r4, #5]
		lv_label_set_text(label, "FAIL");
 80080da:	f00f f945 	bl	8017368 <lv_label_set_text>
		print_alarme(falha);
 80080de:	4628      	mov	r0, r5
}
 80080e0:	b003      	add	sp, #12
 80080e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		print_alarme(falha);
 80080e6:	f7ff beaf 	b.w	8007e48 <print_alarme>
 80080ea:	bf00      	nop
 80080ec:	20005038 	.word	0x20005038
 80080f0:	2000c424 	.word	0x2000c424
 80080f4:	200006ec 	.word	0x200006ec
 80080f8:	0801cb08 	.word	0x0801cb08
 80080fc:	20004df4 	.word	0x20004df4
 8008100:	0802bad1 	.word	0x0802bad1
 8008104:	0802bad4 	.word	0x0802bad4

08008108 <create_vumeter>:
{
 8008108:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	lv_style_copy(&style_indic_off, &lv_style_pretty);
 800810a:	4e70      	ldr	r6, [pc, #448]	; (80082cc <create_vumeter+0x1c4>)
 800810c:	4970      	ldr	r1, [pc, #448]	; (80082d0 <create_vumeter+0x1c8>)
	lv_style_copy(&style_indic_vd, &lv_style_pretty);
 800810e:	4d71      	ldr	r5, [pc, #452]	; (80082d4 <create_vumeter+0x1cc>)
		bar[x] = lv_bar_create(Tela_Principal, NULL);
 8008110:	4f71      	ldr	r7, [pc, #452]	; (80082d8 <create_vumeter+0x1d0>)
	lv_style_copy(&style_indic_off, &lv_style_pretty);
 8008112:	4630      	mov	r0, r6
 8008114:	f007 fade 	bl	800f6d4 <lv_style_copy>
	style_indic_off.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 8008118:	4b70      	ldr	r3, [pc, #448]	; (80082dc <create_vumeter+0x1d4>)
	lv_style_copy(&style_indic_vd, &lv_style_pretty);
 800811a:	496d      	ldr	r1, [pc, #436]	; (80082d0 <create_vumeter+0x1c8>)
	style_indic_off.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800811c:	885b      	ldrh	r3, [r3, #2]
 800811e:	80b3      	strh	r3, [r6, #4]
	style_indic_off.body.radius = 0;
 8008120:	2400      	movs	r4, #0
	lv_style_copy(&style_indic_vd, &lv_style_pretty);
 8008122:	4628      	mov	r0, r5
	style_indic_off.body.main_color = LV_COLOR_MAKE(105, 105, 105);
 8008124:	8073      	strh	r3, [r6, #2]
	style_indic_off.body.border.color = LV_COLOR_MAKE(105, 105, 105);
 8008126:	8173      	strh	r3, [r6, #10]
	style_indic_off.body.radius = 0;
 8008128:	80f4      	strh	r4, [r6, #6]
	lv_style_copy(&style_indic_vd, &lv_style_pretty);
 800812a:	f007 fad3 	bl	800f6d4 <lv_style_copy>
	style_indic_vd.body.grad_color = LV_COLOR_LIME;
 800812e:	792b      	ldrb	r3, [r5, #4]
	style_indic_vd.body.radius = 0;
 8008130:	80ec      	strh	r4, [r5, #6]
	style_indic_vd.body.grad_color = LV_COLOR_LIME;
 8008132:	f364 0304 	bfi	r3, r4, #0, #5
 8008136:	712b      	strb	r3, [r5, #4]
 8008138:	88ab      	ldrh	r3, [r5, #4]
	lv_style_copy(&style_indic_cy, &lv_style_pretty);
 800813a:	4965      	ldr	r1, [pc, #404]	; (80082d0 <create_vumeter+0x1c8>)
	style_indic_vd.body.grad_color = LV_COLOR_LIME;
 800813c:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 8008140:	80ab      	strh	r3, [r5, #4]
 8008142:	0a1b      	lsrs	r3, r3, #8
 8008144:	f364 03c7 	bfi	r3, r4, #3, #5
 8008148:	716b      	strb	r3, [r5, #5]
	style_indic_vd.body.main_color = LV_COLOR_LIME;
 800814a:	78ab      	ldrb	r3, [r5, #2]
 800814c:	f364 0304 	bfi	r3, r4, #0, #5
 8008150:	70ab      	strb	r3, [r5, #2]
 8008152:	886b      	ldrh	r3, [r5, #2]
 8008154:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 8008158:	806b      	strh	r3, [r5, #2]
 800815a:	0a1b      	lsrs	r3, r3, #8
 800815c:	f364 03c7 	bfi	r3, r4, #3, #5
 8008160:	70eb      	strb	r3, [r5, #3]
	style_indic_vd.body.border.color = LV_COLOR_LIME;
 8008162:	7aab      	ldrb	r3, [r5, #10]
 8008164:	f364 0304 	bfi	r3, r4, #0, #5
 8008168:	72ab      	strb	r3, [r5, #10]
 800816a:	896b      	ldrh	r3, [r5, #10]
 800816c:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 8008170:	816b      	strh	r3, [r5, #10]
 8008172:	0a1b      	lsrs	r3, r3, #8
 8008174:	f364 03c7 	bfi	r3, r4, #3, #5
 8008178:	72eb      	strb	r3, [r5, #11]
	lv_style_copy(&style_indic_cy, &lv_style_pretty);
 800817a:	4d59      	ldr	r5, [pc, #356]	; (80082e0 <create_vumeter+0x1d8>)
 800817c:	4628      	mov	r0, r5
 800817e:	f007 faa9 	bl	800f6d4 <lv_style_copy>
	style_indic_cy.body.grad_color = LV_COLOR_CYAN;
 8008182:	792b      	ldrb	r3, [r5, #4]
	style_indic_cy.body.radius = 0;
 8008184:	80ec      	strh	r4, [r5, #6]
	style_indic_cy.body.grad_color = LV_COLOR_CYAN;
 8008186:	f043 031f 	orr.w	r3, r3, #31
 800818a:	712b      	strb	r3, [r5, #4]
 800818c:	88ab      	ldrh	r3, [r5, #4]
	lv_style_copy(&style_indic_am, &lv_style_pretty);
 800818e:	4950      	ldr	r1, [pc, #320]	; (80082d0 <create_vumeter+0x1c8>)
	style_indic_cy.body.grad_color = LV_COLOR_CYAN;
 8008190:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 8008194:	80ab      	strh	r3, [r5, #4]
 8008196:	0a1b      	lsrs	r3, r3, #8
 8008198:	f364 03c7 	bfi	r3, r4, #3, #5
 800819c:	716b      	strb	r3, [r5, #5]
	style_indic_cy.body.main_color = LV_COLOR_CYAN;
 800819e:	78ab      	ldrb	r3, [r5, #2]
 80081a0:	f043 031f 	orr.w	r3, r3, #31
 80081a4:	70ab      	strb	r3, [r5, #2]
 80081a6:	886b      	ldrh	r3, [r5, #2]
 80081a8:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 80081ac:	806b      	strh	r3, [r5, #2]
 80081ae:	0a1b      	lsrs	r3, r3, #8
 80081b0:	f364 03c7 	bfi	r3, r4, #3, #5
 80081b4:	70eb      	strb	r3, [r5, #3]
	style_indic_cy.body.border.color = LV_COLOR_CYAN;
 80081b6:	7aab      	ldrb	r3, [r5, #10]
 80081b8:	f043 031f 	orr.w	r3, r3, #31
 80081bc:	72ab      	strb	r3, [r5, #10]
 80081be:	896b      	ldrh	r3, [r5, #10]
 80081c0:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 80081c4:	816b      	strh	r3, [r5, #10]
 80081c6:	0a1b      	lsrs	r3, r3, #8
 80081c8:	f364 03c7 	bfi	r3, r4, #3, #5
 80081cc:	72eb      	strb	r3, [r5, #11]
	lv_style_copy(&style_indic_am, &lv_style_pretty);
 80081ce:	4d45      	ldr	r5, [pc, #276]	; (80082e4 <create_vumeter+0x1dc>)
 80081d0:	4628      	mov	r0, r5
 80081d2:	f007 fa7f 	bl	800f6d4 <lv_style_copy>
	style_indic_am.body.grad_color = LV_COLOR_YELLOW;
 80081d6:	792b      	ldrb	r3, [r5, #4]
	style_indic_am.body.radius = 0;
 80081d8:	80ec      	strh	r4, [r5, #6]
	style_indic_am.body.grad_color = LV_COLOR_YELLOW;
 80081da:	f364 0304 	bfi	r3, r4, #0, #5
 80081de:	712b      	strb	r3, [r5, #4]
 80081e0:	88ab      	ldrh	r3, [r5, #4]
	lv_style_copy(&style_indic_vm, &lv_style_pretty);
 80081e2:	493b      	ldr	r1, [pc, #236]	; (80082d0 <create_vumeter+0x1c8>)
	style_indic_am.body.grad_color = LV_COLOR_YELLOW;
 80081e4:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 80081e8:	80ab      	strh	r3, [r5, #4]
 80081ea:	0a1b      	lsrs	r3, r3, #8
 80081ec:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 80081f0:	716b      	strb	r3, [r5, #5]
	style_indic_am.body.main_color = LV_COLOR_YELLOW;
 80081f2:	78ab      	ldrb	r3, [r5, #2]
 80081f4:	f364 0304 	bfi	r3, r4, #0, #5
 80081f8:	70ab      	strb	r3, [r5, #2]
 80081fa:	886b      	ldrh	r3, [r5, #2]
 80081fc:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 8008200:	806b      	strh	r3, [r5, #2]
 8008202:	0a1b      	lsrs	r3, r3, #8
 8008204:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 8008208:	70eb      	strb	r3, [r5, #3]
	style_indic_am.body.border.color = LV_COLOR_YELLOW;
 800820a:	7aab      	ldrb	r3, [r5, #10]
 800820c:	f364 0304 	bfi	r3, r4, #0, #5
 8008210:	72ab      	strb	r3, [r5, #10]
 8008212:	896b      	ldrh	r3, [r5, #10]
 8008214:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 8008218:	816b      	strh	r3, [r5, #10]
 800821a:	0a1b      	lsrs	r3, r3, #8
 800821c:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 8008220:	72eb      	strb	r3, [r5, #11]
	lv_style_copy(&style_indic_vm, &lv_style_pretty);
 8008222:	4d31      	ldr	r5, [pc, #196]	; (80082e8 <create_vumeter+0x1e0>)
 8008224:	4628      	mov	r0, r5
 8008226:	f007 fa55 	bl	800f6d4 <lv_style_copy>
	style_indic_vm.body.grad_color = LV_COLOR_RED;
 800822a:	792b      	ldrb	r3, [r5, #4]
	style_indic_vm.body.radius = 0;
 800822c:	80ec      	strh	r4, [r5, #6]
	style_indic_vm.body.grad_color = LV_COLOR_RED;
 800822e:	f364 0304 	bfi	r3, r4, #0, #5
 8008232:	712b      	strb	r3, [r5, #4]
 8008234:	88ab      	ldrh	r3, [r5, #4]
 8008236:	f364 134a 	bfi	r3, r4, #5, #6
 800823a:	80ab      	strh	r3, [r5, #4]
 800823c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8008240:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 8008244:	716b      	strb	r3, [r5, #5]
	style_indic_vm.body.main_color = LV_COLOR_RED;
 8008246:	78ab      	ldrb	r3, [r5, #2]
 8008248:	f364 0304 	bfi	r3, r4, #0, #5
 800824c:	70ab      	strb	r3, [r5, #2]
 800824e:	886b      	ldrh	r3, [r5, #2]
 8008250:	f364 134a 	bfi	r3, r4, #5, #6
 8008254:	806b      	strh	r3, [r5, #2]
 8008256:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800825a:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 800825e:	70eb      	strb	r3, [r5, #3]
	style_indic_vm.body.border.color = LV_COLOR_RED;
 8008260:	7aab      	ldrb	r3, [r5, #10]
 8008262:	f364 0304 	bfi	r3, r4, #0, #5
 8008266:	72ab      	strb	r3, [r5, #10]
 8008268:	896b      	ldrh	r3, [r5, #10]
 800826a:	f364 134a 	bfi	r3, r4, #5, #6
 800826e:	816b      	strh	r3, [r5, #10]
 8008270:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8008274:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 8008278:	72eb      	strb	r3, [r5, #11]
 800827a:	4d1c      	ldr	r5, [pc, #112]	; (80082ec <create_vumeter+0x1e4>)
		bar[x] = lv_bar_create(Tela_Principal, NULL);
 800827c:	6838      	ldr	r0, [r7, #0]
 800827e:	2100      	movs	r1, #0
 8008280:	f00c fb0a 	bl	8014898 <lv_bar_create>
		lv_obj_set_size(bar[x], 3, 12);
 8008284:	220c      	movs	r2, #12
		bar[x] = lv_bar_create(Tela_Principal, NULL);
 8008286:	6068      	str	r0, [r5, #4]
		lv_obj_set_size(bar[x], 3, 12);
 8008288:	2103      	movs	r1, #3
 800828a:	f006 fcc5 	bl	800ec18 <lv_obj_set_size>
		lv_bar_set_style(bar[x], LV_BAR_STYLE_BG, &style_indic_off);
 800828e:	6868      	ldr	r0, [r5, #4]
 8008290:	4632      	mov	r2, r6
 8008292:	2100      	movs	r1, #0
 8008294:	f00c faea 	bl	801486c <lv_bar_set_style>
		lv_bar_set_style(bar[x], LV_BAR_STYLE_INDIC, &style_indic_off);
 8008298:	6868      	ldr	r0, [r5, #4]
 800829a:	4632      	mov	r2, r6
 800829c:	2101      	movs	r1, #1
 800829e:	f00c fae5 	bl	801486c <lv_bar_set_style>
		lv_obj_align(bar[x], NULL, LV_ALIGN_IN_TOP_LEFT, vumeter_pos_x[x], 43);
 80082a2:	222b      	movs	r2, #43	; 0x2b
 80082a4:	4b12      	ldr	r3, [pc, #72]	; (80082f0 <create_vumeter+0x1e8>)
 80082a6:	9200      	str	r2, [sp, #0]
 80082a8:	f933 3024 	ldrsh.w	r3, [r3, r4, lsl #2]
 80082ac:	6868      	ldr	r0, [r5, #4]
 80082ae:	2201      	movs	r2, #1
 80082b0:	2100      	movs	r1, #0
 80082b2:	f006 f911 	bl	800e4d8 <lv_obj_align>
 80082b6:	3401      	adds	r4, #1
		lv_bar_set_value(bar[x], 100, 0);
 80082b8:	2200      	movs	r2, #0
 80082ba:	2164      	movs	r1, #100	; 0x64
 80082bc:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80082c0:	f00c fa78 	bl	80147b4 <lv_bar_set_value>
	for(uint8_t x = 0; x < 20; x++) {
 80082c4:	2c14      	cmp	r4, #20
 80082c6:	d1d9      	bne.n	800827c <create_vumeter+0x174>
}
 80082c8:	b003      	add	sp, #12
 80082ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082cc:	20004f0c 	.word	0x20004f0c
 80082d0:	2000c334 	.word	0x2000c334
 80082d4:	20004f48 	.word	0x20004f48
 80082d8:	20004df4 	.word	0x20004df4
 80082dc:	0801cb08 	.word	0x0801cb08
 80082e0:	20004ed0 	.word	0x20004ed0
 80082e4:	20004e94 	.word	0x20004e94
 80082e8:	20004f84 	.word	0x20004f84
 80082ec:	20004df4 	.word	0x20004df4
 80082f0:	0802bb04 	.word	0x0802bb04

080082f4 <main_screen>:
	Tela_Principal = lv_obj_create(NULL, NULL);
 80082f4:	2100      	movs	r1, #0
{
 80082f6:	b538      	push	{r3, r4, r5, lr}
	Tela_Principal = lv_obj_create(NULL, NULL);
 80082f8:	4608      	mov	r0, r1
 80082fa:	f006 fb0f 	bl	800e91c <lv_obj_create>
 80082fe:	4d21      	ldr	r5, [pc, #132]	; (8008384 <main_screen+0x90>)
	img_fundo = lv_img_create(Tela_Principal, NULL);
 8008300:	4c21      	ldr	r4, [pc, #132]	; (8008388 <main_screen+0x94>)
	Tela_Principal = lv_obj_create(NULL, NULL);
 8008302:	6028      	str	r0, [r5, #0]
	img_fundo = lv_img_create(Tela_Principal, NULL);
 8008304:	2100      	movs	r1, #0
 8008306:	f00e fa0b 	bl	8016720 <lv_img_create>
    lv_img_set_src(img_fundo, &tela_0);
 800830a:	4920      	ldr	r1, [pc, #128]	; (800838c <main_screen+0x98>)
	img_fundo = lv_img_create(Tela_Principal, NULL);
 800830c:	6020      	str	r0, [r4, #0]
    lv_img_set_src(img_fundo, &tela_0);
 800830e:	f00e f977 	bl	8016600 <lv_img_set_src>
	lv_obj_set_protect(img_fundo, LV_PROTECT_POS);
 8008312:	2104      	movs	r1, #4
 8008314:	6820      	ldr	r0, [r4, #0]
 8008316:	f005 ff33 	bl	800e180 <lv_obj_set_protect>
	lv_obj_set_event_cb(img_fundo, main_screen_event);
 800831a:	491d      	ldr	r1, [pc, #116]	; (8008390 <main_screen+0x9c>)
 800831c:	6820      	ldr	r0, [r4, #0]
 800831e:	f005 ff3c 	bl	800e19a <lv_obj_set_event_cb>
	lv_obj_set_click(img_fundo, 1);
 8008322:	2101      	movs	r1, #1
 8008324:	6820      	ldr	r0, [r4, #0]
 8008326:	f005 ff0f 	bl	800e148 <lv_obj_set_click>
	print_frequencia(frequencia);
 800832a:	4b1a      	ldr	r3, [pc, #104]	; (8008394 <main_screen+0xa0>)
 800832c:	6818      	ldr	r0, [r3, #0]
 800832e:	f7ff fb3d 	bl	80079ac <print_frequencia>
	print_audio(Cfg_Stereo, Cfg_Audio);
 8008332:	4b19      	ldr	r3, [pc, #100]	; (8008398 <main_screen+0xa4>)
 8008334:	7819      	ldrb	r1, [r3, #0]
 8008336:	4b19      	ldr	r3, [pc, #100]	; (800839c <main_screen+0xa8>)
 8008338:	7818      	ldrb	r0, [r3, #0]
 800833a:	f7ff fca3 	bl	8007c84 <print_audio>
	print_temperatura(temperatura);
 800833e:	4b18      	ldr	r3, [pc, #96]	; (80083a0 <main_screen+0xac>)
 8008340:	ed93 0a00 	vldr	s0, [r3]
 8008344:	f7ff fd30 	bl	8007da8 <print_temperatura>
	print_status(falha);
 8008348:	4b16      	ldr	r3, [pc, #88]	; (80083a4 <main_screen+0xb0>)
 800834a:	6818      	ldr	r0, [r3, #0]
 800834c:	f7ff fe5e 	bl	800800c <print_status>
	print_pot(forward, reflected);
 8008350:	4b15      	ldr	r3, [pc, #84]	; (80083a8 <main_screen+0xb4>)
 8008352:	edd3 0a00 	vldr	s1, [r3]
 8008356:	4b15      	ldr	r3, [pc, #84]	; (80083ac <main_screen+0xb8>)
 8008358:	ed93 0a00 	vldr	s0, [r3]
 800835c:	f7ff fb84 	bl	8007a68 <print_pot>
	create_vumeter();
 8008360:	f7ff fed2 	bl	8008108 <create_vumeter>
    return lv_disp_get_layer_sys(lv_disp_get_default());
}

static inline void lv_scr_load(lv_obj_t * scr)
{
    lv_disp_load_scr(scr);
 8008364:	6828      	ldr	r0, [r5, #0]
 8008366:	f005 fcc5 	bl	800dcf4 <lv_disp_load_scr>
	Task_Principal = lv_task_create(update_main_screen, 500, LV_TASK_PRIO_MID, NULL);
 800836a:	2300      	movs	r3, #0
 800836c:	2203      	movs	r2, #3
 800836e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8008372:	480f      	ldr	r0, [pc, #60]	; (80083b0 <main_screen+0xbc>)
 8008374:	f00b ff7a 	bl	801426c <lv_task_create>
 8008378:	4b0e      	ldr	r3, [pc, #56]	; (80083b4 <main_screen+0xc0>)
 800837a:	6018      	str	r0, [r3, #0]
	TelaAtiva = TelaPrincipal;
 800837c:	4b0e      	ldr	r3, [pc, #56]	; (80083b8 <main_screen+0xc4>)
 800837e:	2200      	movs	r2, #0
 8008380:	601a      	str	r2, [r3, #0]
 8008382:	bd38      	pop	{r3, r4, r5, pc}
 8008384:	20004df4 	.word	0x20004df4
 8008388:	20004e50 	.word	0x20004e50
 800838c:	20001b80 	.word	0x20001b80
 8008390:	08007985 	.word	0x08007985
 8008394:	20000004 	.word	0x20000004
 8008398:	200033c2 	.word	0x200033c2
 800839c:	20000000 	.word	0x20000000
 80083a0:	20000014 	.word	0x20000014
 80083a4:	20004db4 	.word	0x20004db4
 80083a8:	20004dc4 	.word	0x20004dc4
 80083ac:	20004db8 	.word	0x20004db8
 80083b0:	08008405 	.word	0x08008405
 80083b4:	20004df0 	.word	0x20004df0
 80083b8:	200033cc 	.word	0x200033cc

080083bc <main_screen_send_apply>:
	lv_event_send(img_fundo, LV_EVENT_APPLY, NULL);
 80083bc:	4b02      	ldr	r3, [pc, #8]	; (80083c8 <main_screen_send_apply+0xc>)
 80083be:	2200      	movs	r2, #0
 80083c0:	2111      	movs	r1, #17
 80083c2:	6818      	ldr	r0, [r3, #0]
 80083c4:	f005 bf30 	b.w	800e228 <lv_event_send>
 80083c8:	20004e50 	.word	0x20004e50

080083cc <bargraph_off>:

void bargraph_off(uint8_t value)
{
 80083cc:	b570      	push	{r4, r5, r6, lr}
 80083ce:	4c0b      	ldr	r4, [pc, #44]	; (80083fc <bargraph_off+0x30>)
	for(uint8_t x = value; x < 20; x++) {
		lv_bar_set_style(bar[x], LV_BAR_STYLE_BG, &style_indic_off);
 80083d0:	4e0b      	ldr	r6, [pc, #44]	; (8008400 <bargraph_off+0x34>)
 80083d2:	eb04 0480 	add.w	r4, r4, r0, lsl #2
{
 80083d6:	4605      	mov	r5, r0
 80083d8:	3c04      	subs	r4, #4
	for(uint8_t x = value; x < 20; x++) {
 80083da:	2d13      	cmp	r5, #19
 80083dc:	d900      	bls.n	80083e0 <bargraph_off+0x14>
		lv_bar_set_style(bar[x], LV_BAR_STYLE_INDIC, &style_indic_off);
	}
}
 80083de:	bd70      	pop	{r4, r5, r6, pc}
		lv_bar_set_style(bar[x], LV_BAR_STYLE_BG, &style_indic_off);
 80083e0:	4632      	mov	r2, r6
 80083e2:	2100      	movs	r1, #0
 80083e4:	6860      	ldr	r0, [r4, #4]
 80083e6:	f00c fa41 	bl	801486c <lv_bar_set_style>
	for(uint8_t x = value; x < 20; x++) {
 80083ea:	3501      	adds	r5, #1
		lv_bar_set_style(bar[x], LV_BAR_STYLE_INDIC, &style_indic_off);
 80083ec:	4632      	mov	r2, r6
 80083ee:	2101      	movs	r1, #1
 80083f0:	f854 0f04 	ldr.w	r0, [r4, #4]!
 80083f4:	f00c fa3a 	bl	801486c <lv_bar_set_style>
	for(uint8_t x = value; x < 20; x++) {
 80083f8:	b2ed      	uxtb	r5, r5
 80083fa:	e7ee      	b.n	80083da <bargraph_off+0xe>
 80083fc:	20004df8 	.word	0x20004df8
 8008400:	20004f0c 	.word	0x20004f0c

08008404 <update_main_screen>:
			break;
	}
}

static void update_main_screen(lv_task_t * param)
{
 8008404:	b538      	push	{r3, r4, r5, lr}
	if(!falha) {
 8008406:	4c88      	ldr	r4, [pc, #544]	; (8008628 <update_main_screen+0x224>)
 8008408:	6822      	ldr	r2, [r4, #0]
 800840a:	bb3a      	cbnz	r2, 800845c <update_main_screen+0x58>
		// Potencia Direta
		lv_label_set_text(txt_fwd, "FWD:");
 800840c:	4b87      	ldr	r3, [pc, #540]	; (800862c <update_main_screen+0x228>)
 800840e:	4988      	ldr	r1, [pc, #544]	; (8008630 <update_main_screen+0x22c>)
 8008410:	6818      	ldr	r0, [r3, #0]
 8008412:	f00e ffa9 	bl	8017368 <lv_label_set_text>
		sprintf(buffer, "%0.1fW", forward);
 8008416:	4b87      	ldr	r3, [pc, #540]	; (8008634 <update_main_screen+0x230>)
 8008418:	6818      	ldr	r0, [r3, #0]
 800841a:	f7f8 f895 	bl	8000548 <__aeabi_f2d>
 800841e:	4602      	mov	r2, r0
 8008420:	460b      	mov	r3, r1
 8008422:	4885      	ldr	r0, [pc, #532]	; (8008638 <update_main_screen+0x234>)
 8008424:	4985      	ldr	r1, [pc, #532]	; (800863c <update_main_screen+0x238>)
 8008426:	f011 f90d 	bl	8019644 <sprintf>
		lv_label_set_text(txt_pot, buffer);
 800842a:	4b85      	ldr	r3, [pc, #532]	; (8008640 <update_main_screen+0x23c>)
 800842c:	4982      	ldr	r1, [pc, #520]	; (8008638 <update_main_screen+0x234>)
 800842e:	6818      	ldr	r0, [r3, #0]
 8008430:	f00e ff9a 	bl	8017368 <lv_label_set_text>
		// Refletida
		lv_label_set_text(txt_ref, "REF:");
 8008434:	4b83      	ldr	r3, [pc, #524]	; (8008644 <update_main_screen+0x240>)
 8008436:	4984      	ldr	r1, [pc, #528]	; (8008648 <update_main_screen+0x244>)
 8008438:	6818      	ldr	r0, [r3, #0]
 800843a:	f00e ff95 	bl	8017368 <lv_label_set_text>
		sprintf(buffer, "%0.1fW", reflected);
 800843e:	4b83      	ldr	r3, [pc, #524]	; (800864c <update_main_screen+0x248>)
 8008440:	6818      	ldr	r0, [r3, #0]
 8008442:	f7f8 f881 	bl	8000548 <__aeabi_f2d>
 8008446:	460b      	mov	r3, r1
 8008448:	4602      	mov	r2, r0
 800844a:	497c      	ldr	r1, [pc, #496]	; (800863c <update_main_screen+0x238>)
 800844c:	487a      	ldr	r0, [pc, #488]	; (8008638 <update_main_screen+0x234>)
 800844e:	f011 f8f9 	bl	8019644 <sprintf>
		lv_label_set_text(txt_swr, buffer);
 8008452:	4b7f      	ldr	r3, [pc, #508]	; (8008650 <update_main_screen+0x24c>)
 8008454:	4978      	ldr	r1, [pc, #480]	; (8008638 <update_main_screen+0x234>)
 8008456:	6818      	ldr	r0, [r3, #0]
 8008458:	f00e ff86 	bl	8017368 <lv_label_set_text>
	}
	// Temperatura
	sprintf(buffer, "TP:%0.1f°", temperatura);
 800845c:	4b7d      	ldr	r3, [pc, #500]	; (8008654 <update_main_screen+0x250>)
 800845e:	6818      	ldr	r0, [r3, #0]
 8008460:	f7f8 f872 	bl	8000548 <__aeabi_f2d>
 8008464:	460b      	mov	r3, r1
 8008466:	4602      	mov	r2, r0
 8008468:	497b      	ldr	r1, [pc, #492]	; (8008658 <update_main_screen+0x254>)
 800846a:	4873      	ldr	r0, [pc, #460]	; (8008638 <update_main_screen+0x234>)
 800846c:	f011 f8ea 	bl	8019644 <sprintf>
//	lv_label_set_text(txt_temp, buffer);

	// Status
    switch(falha) {
 8008470:	6823      	ldr	r3, [r4, #0]
 8008472:	3b01      	subs	r3, #1
 8008474:	2b06      	cmp	r3, #6
 8008476:	d80f      	bhi.n	8008498 <update_main_screen+0x94>
 8008478:	e8df f003 	tbb	[pc, r3]
 800847c:	37302904 	.word	0x37302904
 8008480:	453e      	.short	0x453e
 8008482:	4c          	.byte	0x4c
 8008483:	00          	.byte	0x00
    	case FAIL_PLLLOCK:
    		lv_label_set_text(cod_falha, "Fail 01");
 8008484:	4b75      	ldr	r3, [pc, #468]	; (800865c <update_main_screen+0x258>)
 8008486:	4976      	ldr	r1, [pc, #472]	; (8008660 <update_main_screen+0x25c>)
 8008488:	6818      	ldr	r0, [r3, #0]
 800848a:	f00e ff6d 	bl	8017368 <lv_label_set_text>
    		lv_label_set_text(desc_falha, "PLL NO LOCK");
 800848e:	4975      	ldr	r1, [pc, #468]	; (8008664 <update_main_screen+0x260>)
    		lv_label_set_text(cod_falha, "Fail 06");
    		lv_label_set_text(desc_falha, "VIN Fail");
    		break;
    	case FAIL_SWR:
    		lv_label_set_text(cod_falha, "Fail 07");
    		lv_label_set_text(desc_falha, "No Antenna");
 8008490:	4b75      	ldr	r3, [pc, #468]	; (8008668 <update_main_screen+0x264>)
 8008492:	6818      	ldr	r0, [r3, #0]
 8008494:	f00e ff68 	bl	8017368 <lv_label_set_text>
    		break;
    }
	// Vu-Meter MPX
    update_vumeter_mpx(mpx);
 8008498:	4d74      	ldr	r5, [pc, #464]	; (800866c <update_main_screen+0x268>)
	switch(value) {
 800849a:	682b      	ldr	r3, [r5, #0]
 800849c:	2b14      	cmp	r3, #20
 800849e:	d843      	bhi.n	8008528 <update_main_screen+0x124>
 80084a0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80084a4:	0051003f 	.word	0x0051003f
 80084a8:	0075005e 	.word	0x0075005e
 80084ac:	01040096 	.word	0x01040096
 80084b0:	01780139 	.word	0x01780139
 80084b4:	021801c1 	.word	0x021801c1
 80084b8:	02dc0275 	.word	0x02dc0275
 80084bc:	03cd0352 	.word	0x03cd0352
 80084c0:	04e80458 	.word	0x04e80458
 80084c4:	062e058a 	.word	0x062e058a
 80084c8:	07a606e4 	.word	0x07a606e4
 80084cc:	0872      	.short	0x0872
    		lv_label_set_text(cod_falha, "Fail 02");
 80084ce:	4b63      	ldr	r3, [pc, #396]	; (800865c <update_main_screen+0x258>)
 80084d0:	4967      	ldr	r1, [pc, #412]	; (8008670 <update_main_screen+0x26c>)
 80084d2:	6818      	ldr	r0, [r3, #0]
 80084d4:	f00e ff48 	bl	8017368 <lv_label_set_text>
    		lv_label_set_text(desc_falha, "Reflected High");
 80084d8:	4966      	ldr	r1, [pc, #408]	; (8008674 <update_main_screen+0x270>)
 80084da:	e7d9      	b.n	8008490 <update_main_screen+0x8c>
    		lv_label_set_text(cod_falha, "Fail 03");
 80084dc:	4b5f      	ldr	r3, [pc, #380]	; (800865c <update_main_screen+0x258>)
 80084de:	4966      	ldr	r1, [pc, #408]	; (8008678 <update_main_screen+0x274>)
 80084e0:	6818      	ldr	r0, [r3, #0]
 80084e2:	f00e ff41 	bl	8017368 <lv_label_set_text>
    		lv_label_set_text(desc_falha, "Foldback");
 80084e6:	4965      	ldr	r1, [pc, #404]	; (800867c <update_main_screen+0x278>)
 80084e8:	e7d2      	b.n	8008490 <update_main_screen+0x8c>
    		lv_label_set_text(cod_falha, "Fail 04");
 80084ea:	4b5c      	ldr	r3, [pc, #368]	; (800865c <update_main_screen+0x258>)
 80084ec:	4964      	ldr	r1, [pc, #400]	; (8008680 <update_main_screen+0x27c>)
 80084ee:	6818      	ldr	r0, [r3, #0]
 80084f0:	f00e ff3a 	bl	8017368 <lv_label_set_text>
    		lv_label_set_text(desc_falha, "Foldback IPA");
 80084f4:	4963      	ldr	r1, [pc, #396]	; (8008684 <update_main_screen+0x280>)
 80084f6:	e7cb      	b.n	8008490 <update_main_screen+0x8c>
    		lv_label_set_text(cod_falha, "Fail 05");
 80084f8:	4b58      	ldr	r3, [pc, #352]	; (800865c <update_main_screen+0x258>)
 80084fa:	4963      	ldr	r1, [pc, #396]	; (8008688 <update_main_screen+0x284>)
 80084fc:	6818      	ldr	r0, [r3, #0]
 80084fe:	f00e ff33 	bl	8017368 <lv_label_set_text>
    		lv_label_set_text(desc_falha, "IPA High");
 8008502:	4962      	ldr	r1, [pc, #392]	; (800868c <update_main_screen+0x288>)
 8008504:	e7c4      	b.n	8008490 <update_main_screen+0x8c>
    		lv_label_set_text(cod_falha, "Fail 06");
 8008506:	4b55      	ldr	r3, [pc, #340]	; (800865c <update_main_screen+0x258>)
 8008508:	4961      	ldr	r1, [pc, #388]	; (8008690 <update_main_screen+0x28c>)
 800850a:	6818      	ldr	r0, [r3, #0]
 800850c:	f00e ff2c 	bl	8017368 <lv_label_set_text>
    		lv_label_set_text(desc_falha, "VIN Fail");
 8008510:	4960      	ldr	r1, [pc, #384]	; (8008694 <update_main_screen+0x290>)
 8008512:	e7bd      	b.n	8008490 <update_main_screen+0x8c>
    		lv_label_set_text(cod_falha, "Fail 07");
 8008514:	4b51      	ldr	r3, [pc, #324]	; (800865c <update_main_screen+0x258>)
 8008516:	4960      	ldr	r1, [pc, #384]	; (8008698 <update_main_screen+0x294>)
 8008518:	6818      	ldr	r0, [r3, #0]
 800851a:	f00e ff25 	bl	8017368 <lv_label_set_text>
    		lv_label_set_text(desc_falha, "No Antenna");
 800851e:	495f      	ldr	r1, [pc, #380]	; (800869c <update_main_screen+0x298>)
 8008520:	e7b6      	b.n	8008490 <update_main_screen+0x8c>
			bargraph_off(0);
 8008522:	2000      	movs	r0, #0
			bargraph_off(18);
 8008524:	f7ff ff52 	bl	80083cc <bargraph_off>
	if(!sent_hor) {
 8008528:	4a5d      	ldr	r2, [pc, #372]	; (80086a0 <update_main_screen+0x29c>)
 800852a:	7813      	ldrb	r3, [r2, #0]
 800852c:	2b00      	cmp	r3, #0
 800852e:	f041 80f6 	bne.w	800971e <update_main_screen+0x131a>
		mpx++;
 8008532:	682b      	ldr	r3, [r5, #0]
 8008534:	1c59      	adds	r1, r3, #1
		if(mpx > 20) {
 8008536:	2914      	cmp	r1, #20
		mpx++;
 8008538:	6029      	str	r1, [r5, #0]
		if(mpx > 20) {
 800853a:	f241 80f5 	bls.w	8009728 <update_main_screen+0x1324>
			sent_hor = 1;
 800853e:	2101      	movs	r1, #1
 8008540:	7011      	strb	r1, [r2, #0]
			mpx--;
 8008542:	602b      	str	r3, [r5, #0]
 8008544:	bd38      	pop	{r3, r4, r5, pc}
			lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008546:	4c57      	ldr	r4, [pc, #348]	; (80086a4 <update_main_screen+0x2a0>)
 8008548:	4a57      	ldr	r2, [pc, #348]	; (80086a8 <update_main_screen+0x2a4>)
 800854a:	6820      	ldr	r0, [r4, #0]
 800854c:	2100      	movs	r1, #0
 800854e:	f00c f98d 	bl	801486c <lv_bar_set_style>
 8008552:	6820      	ldr	r0, [r4, #0]
 8008554:	4a54      	ldr	r2, [pc, #336]	; (80086a8 <update_main_screen+0x2a4>)
 8008556:	2101      	movs	r1, #1
 8008558:	f00c f988 	bl	801486c <lv_bar_set_style>
			bargraph_off(1);
 800855c:	2001      	movs	r0, #1
 800855e:	e7e1      	b.n	8008524 <update_main_screen+0x120>
			lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008560:	4c50      	ldr	r4, [pc, #320]	; (80086a4 <update_main_screen+0x2a0>)
 8008562:	4a51      	ldr	r2, [pc, #324]	; (80086a8 <update_main_screen+0x2a4>)
 8008564:	6820      	ldr	r0, [r4, #0]
 8008566:	2100      	movs	r1, #0
 8008568:	f00c f980 	bl	801486c <lv_bar_set_style>
 800856c:	4a4e      	ldr	r2, [pc, #312]	; (80086a8 <update_main_screen+0x2a4>)
 800856e:	6820      	ldr	r0, [r4, #0]
 8008570:	2101      	movs	r1, #1
 8008572:	f00c f97b 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[1], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[1], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008576:	4a4c      	ldr	r2, [pc, #304]	; (80086a8 <update_main_screen+0x2a4>)
 8008578:	6860      	ldr	r0, [r4, #4]
 800857a:	2100      	movs	r1, #0
 800857c:	f00c f976 	bl	801486c <lv_bar_set_style>
 8008580:	6860      	ldr	r0, [r4, #4]
 8008582:	4a49      	ldr	r2, [pc, #292]	; (80086a8 <update_main_screen+0x2a4>)
 8008584:	2101      	movs	r1, #1
 8008586:	f00c f971 	bl	801486c <lv_bar_set_style>
			bargraph_off(2);
 800858a:	2002      	movs	r0, #2
 800858c:	e7ca      	b.n	8008524 <update_main_screen+0x120>
			lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800858e:	4c45      	ldr	r4, [pc, #276]	; (80086a4 <update_main_screen+0x2a0>)
 8008590:	4a45      	ldr	r2, [pc, #276]	; (80086a8 <update_main_screen+0x2a4>)
 8008592:	6820      	ldr	r0, [r4, #0]
 8008594:	2100      	movs	r1, #0
 8008596:	f00c f969 	bl	801486c <lv_bar_set_style>
 800859a:	4a43      	ldr	r2, [pc, #268]	; (80086a8 <update_main_screen+0x2a4>)
 800859c:	6820      	ldr	r0, [r4, #0]
 800859e:	2101      	movs	r1, #1
 80085a0:	f00c f964 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[1], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[1], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80085a4:	4a40      	ldr	r2, [pc, #256]	; (80086a8 <update_main_screen+0x2a4>)
 80085a6:	6860      	ldr	r0, [r4, #4]
 80085a8:	2100      	movs	r1, #0
 80085aa:	f00c f95f 	bl	801486c <lv_bar_set_style>
 80085ae:	4a3e      	ldr	r2, [pc, #248]	; (80086a8 <update_main_screen+0x2a4>)
 80085b0:	6860      	ldr	r0, [r4, #4]
 80085b2:	2101      	movs	r1, #1
 80085b4:	f00c f95a 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[2], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[2], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80085b8:	4a3b      	ldr	r2, [pc, #236]	; (80086a8 <update_main_screen+0x2a4>)
 80085ba:	68a0      	ldr	r0, [r4, #8]
 80085bc:	2100      	movs	r1, #0
 80085be:	f00c f955 	bl	801486c <lv_bar_set_style>
 80085c2:	68a0      	ldr	r0, [r4, #8]
 80085c4:	4a38      	ldr	r2, [pc, #224]	; (80086a8 <update_main_screen+0x2a4>)
 80085c6:	2101      	movs	r1, #1
 80085c8:	f00c f950 	bl	801486c <lv_bar_set_style>
			bargraph_off(3);
 80085cc:	2003      	movs	r0, #3
 80085ce:	e7a9      	b.n	8008524 <update_main_screen+0x120>
			lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80085d0:	4c34      	ldr	r4, [pc, #208]	; (80086a4 <update_main_screen+0x2a0>)
 80085d2:	4a35      	ldr	r2, [pc, #212]	; (80086a8 <update_main_screen+0x2a4>)
 80085d4:	6820      	ldr	r0, [r4, #0]
 80085d6:	2100      	movs	r1, #0
 80085d8:	f00c f948 	bl	801486c <lv_bar_set_style>
 80085dc:	4a32      	ldr	r2, [pc, #200]	; (80086a8 <update_main_screen+0x2a4>)
 80085de:	6820      	ldr	r0, [r4, #0]
 80085e0:	2101      	movs	r1, #1
 80085e2:	f00c f943 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[1], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[1], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80085e6:	4a30      	ldr	r2, [pc, #192]	; (80086a8 <update_main_screen+0x2a4>)
 80085e8:	6860      	ldr	r0, [r4, #4]
 80085ea:	2100      	movs	r1, #0
 80085ec:	f00c f93e 	bl	801486c <lv_bar_set_style>
 80085f0:	4a2d      	ldr	r2, [pc, #180]	; (80086a8 <update_main_screen+0x2a4>)
 80085f2:	6860      	ldr	r0, [r4, #4]
 80085f4:	2101      	movs	r1, #1
 80085f6:	f00c f939 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[2], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[2], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80085fa:	4a2b      	ldr	r2, [pc, #172]	; (80086a8 <update_main_screen+0x2a4>)
 80085fc:	68a0      	ldr	r0, [r4, #8]
 80085fe:	2100      	movs	r1, #0
 8008600:	f00c f934 	bl	801486c <lv_bar_set_style>
 8008604:	4a28      	ldr	r2, [pc, #160]	; (80086a8 <update_main_screen+0x2a4>)
 8008606:	68a0      	ldr	r0, [r4, #8]
 8008608:	2101      	movs	r1, #1
 800860a:	f00c f92f 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[3], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[3], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800860e:	4a26      	ldr	r2, [pc, #152]	; (80086a8 <update_main_screen+0x2a4>)
 8008610:	68e0      	ldr	r0, [r4, #12]
 8008612:	2100      	movs	r1, #0
 8008614:	f00c f92a 	bl	801486c <lv_bar_set_style>
 8008618:	68e0      	ldr	r0, [r4, #12]
 800861a:	4a23      	ldr	r2, [pc, #140]	; (80086a8 <update_main_screen+0x2a4>)
 800861c:	2101      	movs	r1, #1
 800861e:	f00c f925 	bl	801486c <lv_bar_set_style>
			bargraph_off(4);
 8008622:	2004      	movs	r0, #4
 8008624:	e77e      	b.n	8008524 <update_main_screen+0x120>
 8008626:	bf00      	nop
 8008628:	20004db4 	.word	0x20004db4
 800862c:	20005128 	.word	0x20005128
 8008630:	0802bac0 	.word	0x0802bac0
 8008634:	20004db8 	.word	0x20004db8
 8008638:	20004cd0 	.word	0x20004cd0
 800863c:	0802bac5 	.word	0x0802bac5
 8008640:	2000512c 	.word	0x2000512c
 8008644:	20005130 	.word	0x20005130
 8008648:	0802bacc 	.word	0x0802bacc
 800864c:	20004dc4 	.word	0x20004dc4
 8008650:	20005134 	.word	0x20005134
 8008654:	20000014 	.word	0x20000014
 8008658:	0802bad9 	.word	0x0802bad9
 800865c:	20004e48 	.word	0x20004e48
 8008660:	0802ba22 	.word	0x0802ba22
 8008664:	0802ba2a 	.word	0x0802ba2a
 8008668:	20004e4c 	.word	0x20004e4c
 800866c:	20004dc0 	.word	0x20004dc0
 8008670:	0802ba36 	.word	0x0802ba36
 8008674:	0802ba3e 	.word	0x0802ba3e
 8008678:	0802ba4d 	.word	0x0802ba4d
 800867c:	0802ba55 	.word	0x0802ba55
 8008680:	0802ba5e 	.word	0x0802ba5e
 8008684:	0802ba66 	.word	0x0802ba66
 8008688:	0802ba73 	.word	0x0802ba73
 800868c:	0802ba7b 	.word	0x0802ba7b
 8008690:	0802ba84 	.word	0x0802ba84
 8008694:	0802ba8c 	.word	0x0802ba8c
 8008698:	0802ba95 	.word	0x0802ba95
 800869c:	0802ba9d 	.word	0x0802ba9d
 80086a0:	20004dc8 	.word	0x20004dc8
 80086a4:	20004df8 	.word	0x20004df8
 80086a8:	20004f48 	.word	0x20004f48
			lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80086ac:	4c87      	ldr	r4, [pc, #540]	; (80088cc <update_main_screen+0x4c8>)
 80086ae:	4a88      	ldr	r2, [pc, #544]	; (80088d0 <update_main_screen+0x4cc>)
 80086b0:	6820      	ldr	r0, [r4, #0]
 80086b2:	2100      	movs	r1, #0
 80086b4:	f00c f8da 	bl	801486c <lv_bar_set_style>
 80086b8:	4a85      	ldr	r2, [pc, #532]	; (80088d0 <update_main_screen+0x4cc>)
 80086ba:	6820      	ldr	r0, [r4, #0]
 80086bc:	2101      	movs	r1, #1
 80086be:	f00c f8d5 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[1], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[1], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80086c2:	4a83      	ldr	r2, [pc, #524]	; (80088d0 <update_main_screen+0x4cc>)
 80086c4:	6860      	ldr	r0, [r4, #4]
 80086c6:	2100      	movs	r1, #0
 80086c8:	f00c f8d0 	bl	801486c <lv_bar_set_style>
 80086cc:	4a80      	ldr	r2, [pc, #512]	; (80088d0 <update_main_screen+0x4cc>)
 80086ce:	6860      	ldr	r0, [r4, #4]
 80086d0:	2101      	movs	r1, #1
 80086d2:	f00c f8cb 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[2], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[2], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80086d6:	4a7e      	ldr	r2, [pc, #504]	; (80088d0 <update_main_screen+0x4cc>)
 80086d8:	68a0      	ldr	r0, [r4, #8]
 80086da:	2100      	movs	r1, #0
 80086dc:	f00c f8c6 	bl	801486c <lv_bar_set_style>
 80086e0:	4a7b      	ldr	r2, [pc, #492]	; (80088d0 <update_main_screen+0x4cc>)
 80086e2:	68a0      	ldr	r0, [r4, #8]
 80086e4:	2101      	movs	r1, #1
 80086e6:	f00c f8c1 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[3], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[3], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80086ea:	4a79      	ldr	r2, [pc, #484]	; (80088d0 <update_main_screen+0x4cc>)
 80086ec:	68e0      	ldr	r0, [r4, #12]
 80086ee:	2100      	movs	r1, #0
 80086f0:	f00c f8bc 	bl	801486c <lv_bar_set_style>
 80086f4:	4a76      	ldr	r2, [pc, #472]	; (80088d0 <update_main_screen+0x4cc>)
 80086f6:	68e0      	ldr	r0, [r4, #12]
 80086f8:	2101      	movs	r1, #1
 80086fa:	f00c f8b7 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[4], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[4], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80086fe:	4a74      	ldr	r2, [pc, #464]	; (80088d0 <update_main_screen+0x4cc>)
 8008700:	6920      	ldr	r0, [r4, #16]
 8008702:	2100      	movs	r1, #0
 8008704:	f00c f8b2 	bl	801486c <lv_bar_set_style>
 8008708:	6920      	ldr	r0, [r4, #16]
 800870a:	4a71      	ldr	r2, [pc, #452]	; (80088d0 <update_main_screen+0x4cc>)
 800870c:	2101      	movs	r1, #1
 800870e:	f00c f8ad 	bl	801486c <lv_bar_set_style>
			bargraph_off(5);
 8008712:	2005      	movs	r0, #5
 8008714:	e706      	b.n	8008524 <update_main_screen+0x120>
			lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008716:	4c6d      	ldr	r4, [pc, #436]	; (80088cc <update_main_screen+0x4c8>)
 8008718:	4a6d      	ldr	r2, [pc, #436]	; (80088d0 <update_main_screen+0x4cc>)
 800871a:	6820      	ldr	r0, [r4, #0]
 800871c:	2100      	movs	r1, #0
 800871e:	f00c f8a5 	bl	801486c <lv_bar_set_style>
 8008722:	4a6b      	ldr	r2, [pc, #428]	; (80088d0 <update_main_screen+0x4cc>)
 8008724:	6820      	ldr	r0, [r4, #0]
 8008726:	2101      	movs	r1, #1
 8008728:	f00c f8a0 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[1], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[1], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800872c:	4a68      	ldr	r2, [pc, #416]	; (80088d0 <update_main_screen+0x4cc>)
 800872e:	6860      	ldr	r0, [r4, #4]
 8008730:	2100      	movs	r1, #0
 8008732:	f00c f89b 	bl	801486c <lv_bar_set_style>
 8008736:	4a66      	ldr	r2, [pc, #408]	; (80088d0 <update_main_screen+0x4cc>)
 8008738:	6860      	ldr	r0, [r4, #4]
 800873a:	2101      	movs	r1, #1
 800873c:	f00c f896 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[2], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[2], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008740:	4a63      	ldr	r2, [pc, #396]	; (80088d0 <update_main_screen+0x4cc>)
 8008742:	68a0      	ldr	r0, [r4, #8]
 8008744:	2100      	movs	r1, #0
 8008746:	f00c f891 	bl	801486c <lv_bar_set_style>
 800874a:	4a61      	ldr	r2, [pc, #388]	; (80088d0 <update_main_screen+0x4cc>)
 800874c:	68a0      	ldr	r0, [r4, #8]
 800874e:	2101      	movs	r1, #1
 8008750:	f00c f88c 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[3], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[3], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008754:	4a5e      	ldr	r2, [pc, #376]	; (80088d0 <update_main_screen+0x4cc>)
 8008756:	68e0      	ldr	r0, [r4, #12]
 8008758:	2100      	movs	r1, #0
 800875a:	f00c f887 	bl	801486c <lv_bar_set_style>
 800875e:	4a5c      	ldr	r2, [pc, #368]	; (80088d0 <update_main_screen+0x4cc>)
 8008760:	68e0      	ldr	r0, [r4, #12]
 8008762:	2101      	movs	r1, #1
 8008764:	f00c f882 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[4], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[4], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008768:	4a59      	ldr	r2, [pc, #356]	; (80088d0 <update_main_screen+0x4cc>)
 800876a:	6920      	ldr	r0, [r4, #16]
 800876c:	2100      	movs	r1, #0
 800876e:	f00c f87d 	bl	801486c <lv_bar_set_style>
 8008772:	4a57      	ldr	r2, [pc, #348]	; (80088d0 <update_main_screen+0x4cc>)
 8008774:	6920      	ldr	r0, [r4, #16]
 8008776:	2101      	movs	r1, #1
 8008778:	f00c f878 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[5], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[5], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800877c:	4a54      	ldr	r2, [pc, #336]	; (80088d0 <update_main_screen+0x4cc>)
 800877e:	6960      	ldr	r0, [r4, #20]
 8008780:	2100      	movs	r1, #0
 8008782:	f00c f873 	bl	801486c <lv_bar_set_style>
 8008786:	6960      	ldr	r0, [r4, #20]
 8008788:	4a51      	ldr	r2, [pc, #324]	; (80088d0 <update_main_screen+0x4cc>)
 800878a:	2101      	movs	r1, #1
 800878c:	f00c f86e 	bl	801486c <lv_bar_set_style>
			bargraph_off(6);
 8008790:	2006      	movs	r0, #6
 8008792:	e6c7      	b.n	8008524 <update_main_screen+0x120>
			lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008794:	4c4d      	ldr	r4, [pc, #308]	; (80088cc <update_main_screen+0x4c8>)
 8008796:	4a4e      	ldr	r2, [pc, #312]	; (80088d0 <update_main_screen+0x4cc>)
 8008798:	6820      	ldr	r0, [r4, #0]
 800879a:	2100      	movs	r1, #0
 800879c:	f00c f866 	bl	801486c <lv_bar_set_style>
 80087a0:	4a4b      	ldr	r2, [pc, #300]	; (80088d0 <update_main_screen+0x4cc>)
 80087a2:	6820      	ldr	r0, [r4, #0]
 80087a4:	2101      	movs	r1, #1
 80087a6:	f00c f861 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[1], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[1], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80087aa:	4a49      	ldr	r2, [pc, #292]	; (80088d0 <update_main_screen+0x4cc>)
 80087ac:	6860      	ldr	r0, [r4, #4]
 80087ae:	2100      	movs	r1, #0
 80087b0:	f00c f85c 	bl	801486c <lv_bar_set_style>
 80087b4:	4a46      	ldr	r2, [pc, #280]	; (80088d0 <update_main_screen+0x4cc>)
 80087b6:	6860      	ldr	r0, [r4, #4]
 80087b8:	2101      	movs	r1, #1
 80087ba:	f00c f857 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[2], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[2], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80087be:	4a44      	ldr	r2, [pc, #272]	; (80088d0 <update_main_screen+0x4cc>)
 80087c0:	68a0      	ldr	r0, [r4, #8]
 80087c2:	2100      	movs	r1, #0
 80087c4:	f00c f852 	bl	801486c <lv_bar_set_style>
 80087c8:	4a41      	ldr	r2, [pc, #260]	; (80088d0 <update_main_screen+0x4cc>)
 80087ca:	68a0      	ldr	r0, [r4, #8]
 80087cc:	2101      	movs	r1, #1
 80087ce:	f00c f84d 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[3], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[3], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80087d2:	4a3f      	ldr	r2, [pc, #252]	; (80088d0 <update_main_screen+0x4cc>)
 80087d4:	68e0      	ldr	r0, [r4, #12]
 80087d6:	2100      	movs	r1, #0
 80087d8:	f00c f848 	bl	801486c <lv_bar_set_style>
 80087dc:	4a3c      	ldr	r2, [pc, #240]	; (80088d0 <update_main_screen+0x4cc>)
 80087de:	68e0      	ldr	r0, [r4, #12]
 80087e0:	2101      	movs	r1, #1
 80087e2:	f00c f843 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[4], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[4], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80087e6:	4a3a      	ldr	r2, [pc, #232]	; (80088d0 <update_main_screen+0x4cc>)
 80087e8:	6920      	ldr	r0, [r4, #16]
 80087ea:	2100      	movs	r1, #0
 80087ec:	f00c f83e 	bl	801486c <lv_bar_set_style>
 80087f0:	4a37      	ldr	r2, [pc, #220]	; (80088d0 <update_main_screen+0x4cc>)
 80087f2:	6920      	ldr	r0, [r4, #16]
 80087f4:	2101      	movs	r1, #1
 80087f6:	f00c f839 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[5], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[5], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80087fa:	4a35      	ldr	r2, [pc, #212]	; (80088d0 <update_main_screen+0x4cc>)
 80087fc:	6960      	ldr	r0, [r4, #20]
 80087fe:	2100      	movs	r1, #0
 8008800:	f00c f834 	bl	801486c <lv_bar_set_style>
 8008804:	4a32      	ldr	r2, [pc, #200]	; (80088d0 <update_main_screen+0x4cc>)
 8008806:	6960      	ldr	r0, [r4, #20]
 8008808:	2101      	movs	r1, #1
 800880a:	f00c f82f 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[6], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[6], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800880e:	4a30      	ldr	r2, [pc, #192]	; (80088d0 <update_main_screen+0x4cc>)
 8008810:	69a0      	ldr	r0, [r4, #24]
 8008812:	2100      	movs	r1, #0
 8008814:	f00c f82a 	bl	801486c <lv_bar_set_style>
 8008818:	69a0      	ldr	r0, [r4, #24]
 800881a:	4a2d      	ldr	r2, [pc, #180]	; (80088d0 <update_main_screen+0x4cc>)
 800881c:	2101      	movs	r1, #1
 800881e:	f00c f825 	bl	801486c <lv_bar_set_style>
			bargraph_off(7);
 8008822:	2007      	movs	r0, #7
 8008824:	e67e      	b.n	8008524 <update_main_screen+0x120>
			lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008826:	4c29      	ldr	r4, [pc, #164]	; (80088cc <update_main_screen+0x4c8>)
 8008828:	4a29      	ldr	r2, [pc, #164]	; (80088d0 <update_main_screen+0x4cc>)
 800882a:	6820      	ldr	r0, [r4, #0]
 800882c:	2100      	movs	r1, #0
 800882e:	f00c f81d 	bl	801486c <lv_bar_set_style>
 8008832:	4a27      	ldr	r2, [pc, #156]	; (80088d0 <update_main_screen+0x4cc>)
 8008834:	6820      	ldr	r0, [r4, #0]
 8008836:	2101      	movs	r1, #1
 8008838:	f00c f818 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[1], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[1], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800883c:	4a24      	ldr	r2, [pc, #144]	; (80088d0 <update_main_screen+0x4cc>)
 800883e:	6860      	ldr	r0, [r4, #4]
 8008840:	2100      	movs	r1, #0
 8008842:	f00c f813 	bl	801486c <lv_bar_set_style>
 8008846:	4a22      	ldr	r2, [pc, #136]	; (80088d0 <update_main_screen+0x4cc>)
 8008848:	6860      	ldr	r0, [r4, #4]
 800884a:	2101      	movs	r1, #1
 800884c:	f00c f80e 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[2], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[2], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008850:	4a1f      	ldr	r2, [pc, #124]	; (80088d0 <update_main_screen+0x4cc>)
 8008852:	68a0      	ldr	r0, [r4, #8]
 8008854:	2100      	movs	r1, #0
 8008856:	f00c f809 	bl	801486c <lv_bar_set_style>
 800885a:	4a1d      	ldr	r2, [pc, #116]	; (80088d0 <update_main_screen+0x4cc>)
 800885c:	68a0      	ldr	r0, [r4, #8]
 800885e:	2101      	movs	r1, #1
 8008860:	f00c f804 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[3], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[3], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008864:	4a1a      	ldr	r2, [pc, #104]	; (80088d0 <update_main_screen+0x4cc>)
 8008866:	68e0      	ldr	r0, [r4, #12]
 8008868:	2100      	movs	r1, #0
 800886a:	f00b ffff 	bl	801486c <lv_bar_set_style>
 800886e:	4a18      	ldr	r2, [pc, #96]	; (80088d0 <update_main_screen+0x4cc>)
 8008870:	68e0      	ldr	r0, [r4, #12]
 8008872:	2101      	movs	r1, #1
 8008874:	f00b fffa 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[4], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[4], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008878:	4a15      	ldr	r2, [pc, #84]	; (80088d0 <update_main_screen+0x4cc>)
 800887a:	6920      	ldr	r0, [r4, #16]
 800887c:	2100      	movs	r1, #0
 800887e:	f00b fff5 	bl	801486c <lv_bar_set_style>
 8008882:	4a13      	ldr	r2, [pc, #76]	; (80088d0 <update_main_screen+0x4cc>)
 8008884:	6920      	ldr	r0, [r4, #16]
 8008886:	2101      	movs	r1, #1
 8008888:	f00b fff0 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[5], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[5], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800888c:	4a10      	ldr	r2, [pc, #64]	; (80088d0 <update_main_screen+0x4cc>)
 800888e:	6960      	ldr	r0, [r4, #20]
 8008890:	2100      	movs	r1, #0
 8008892:	f00b ffeb 	bl	801486c <lv_bar_set_style>
 8008896:	4a0e      	ldr	r2, [pc, #56]	; (80088d0 <update_main_screen+0x4cc>)
 8008898:	6960      	ldr	r0, [r4, #20]
 800889a:	2101      	movs	r1, #1
 800889c:	f00b ffe6 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[6], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[6], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80088a0:	4a0b      	ldr	r2, [pc, #44]	; (80088d0 <update_main_screen+0x4cc>)
 80088a2:	69a0      	ldr	r0, [r4, #24]
 80088a4:	2100      	movs	r1, #0
 80088a6:	f00b ffe1 	bl	801486c <lv_bar_set_style>
 80088aa:	4a09      	ldr	r2, [pc, #36]	; (80088d0 <update_main_screen+0x4cc>)
 80088ac:	69a0      	ldr	r0, [r4, #24]
 80088ae:	2101      	movs	r1, #1
 80088b0:	f00b ffdc 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[7], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[7], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80088b4:	4a06      	ldr	r2, [pc, #24]	; (80088d0 <update_main_screen+0x4cc>)
 80088b6:	69e0      	ldr	r0, [r4, #28]
 80088b8:	2100      	movs	r1, #0
 80088ba:	f00b ffd7 	bl	801486c <lv_bar_set_style>
 80088be:	69e0      	ldr	r0, [r4, #28]
 80088c0:	4a03      	ldr	r2, [pc, #12]	; (80088d0 <update_main_screen+0x4cc>)
 80088c2:	2101      	movs	r1, #1
 80088c4:	f00b ffd2 	bl	801486c <lv_bar_set_style>
			bargraph_off(8);
 80088c8:	2008      	movs	r0, #8
 80088ca:	e62b      	b.n	8008524 <update_main_screen+0x120>
 80088cc:	20004df8 	.word	0x20004df8
 80088d0:	20004f48 	.word	0x20004f48
			lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80088d4:	4c9a      	ldr	r4, [pc, #616]	; (8008b40 <update_main_screen+0x73c>)
 80088d6:	4a9b      	ldr	r2, [pc, #620]	; (8008b44 <update_main_screen+0x740>)
 80088d8:	6820      	ldr	r0, [r4, #0]
 80088da:	2100      	movs	r1, #0
 80088dc:	f00b ffc6 	bl	801486c <lv_bar_set_style>
 80088e0:	4a98      	ldr	r2, [pc, #608]	; (8008b44 <update_main_screen+0x740>)
 80088e2:	6820      	ldr	r0, [r4, #0]
 80088e4:	2101      	movs	r1, #1
 80088e6:	f00b ffc1 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[1], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[1], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80088ea:	4a96      	ldr	r2, [pc, #600]	; (8008b44 <update_main_screen+0x740>)
 80088ec:	6860      	ldr	r0, [r4, #4]
 80088ee:	2100      	movs	r1, #0
 80088f0:	f00b ffbc 	bl	801486c <lv_bar_set_style>
 80088f4:	4a93      	ldr	r2, [pc, #588]	; (8008b44 <update_main_screen+0x740>)
 80088f6:	6860      	ldr	r0, [r4, #4]
 80088f8:	2101      	movs	r1, #1
 80088fa:	f00b ffb7 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[2], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[2], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80088fe:	4a91      	ldr	r2, [pc, #580]	; (8008b44 <update_main_screen+0x740>)
 8008900:	68a0      	ldr	r0, [r4, #8]
 8008902:	2100      	movs	r1, #0
 8008904:	f00b ffb2 	bl	801486c <lv_bar_set_style>
 8008908:	4a8e      	ldr	r2, [pc, #568]	; (8008b44 <update_main_screen+0x740>)
 800890a:	68a0      	ldr	r0, [r4, #8]
 800890c:	2101      	movs	r1, #1
 800890e:	f00b ffad 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[3], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[3], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008912:	4a8c      	ldr	r2, [pc, #560]	; (8008b44 <update_main_screen+0x740>)
 8008914:	68e0      	ldr	r0, [r4, #12]
 8008916:	2100      	movs	r1, #0
 8008918:	f00b ffa8 	bl	801486c <lv_bar_set_style>
 800891c:	4a89      	ldr	r2, [pc, #548]	; (8008b44 <update_main_screen+0x740>)
 800891e:	68e0      	ldr	r0, [r4, #12]
 8008920:	2101      	movs	r1, #1
 8008922:	f00b ffa3 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[4], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[4], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008926:	4a87      	ldr	r2, [pc, #540]	; (8008b44 <update_main_screen+0x740>)
 8008928:	6920      	ldr	r0, [r4, #16]
 800892a:	2100      	movs	r1, #0
 800892c:	f00b ff9e 	bl	801486c <lv_bar_set_style>
 8008930:	4a84      	ldr	r2, [pc, #528]	; (8008b44 <update_main_screen+0x740>)
 8008932:	6920      	ldr	r0, [r4, #16]
 8008934:	2101      	movs	r1, #1
 8008936:	f00b ff99 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[5], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[5], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800893a:	4a82      	ldr	r2, [pc, #520]	; (8008b44 <update_main_screen+0x740>)
 800893c:	6960      	ldr	r0, [r4, #20]
 800893e:	2100      	movs	r1, #0
 8008940:	f00b ff94 	bl	801486c <lv_bar_set_style>
 8008944:	4a7f      	ldr	r2, [pc, #508]	; (8008b44 <update_main_screen+0x740>)
 8008946:	6960      	ldr	r0, [r4, #20]
 8008948:	2101      	movs	r1, #1
 800894a:	f00b ff8f 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[6], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[6], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800894e:	4a7d      	ldr	r2, [pc, #500]	; (8008b44 <update_main_screen+0x740>)
 8008950:	69a0      	ldr	r0, [r4, #24]
 8008952:	2100      	movs	r1, #0
 8008954:	f00b ff8a 	bl	801486c <lv_bar_set_style>
 8008958:	4a7a      	ldr	r2, [pc, #488]	; (8008b44 <update_main_screen+0x740>)
 800895a:	69a0      	ldr	r0, [r4, #24]
 800895c:	2101      	movs	r1, #1
 800895e:	f00b ff85 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[7], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[7], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008962:	4a78      	ldr	r2, [pc, #480]	; (8008b44 <update_main_screen+0x740>)
 8008964:	69e0      	ldr	r0, [r4, #28]
 8008966:	2100      	movs	r1, #0
 8008968:	f00b ff80 	bl	801486c <lv_bar_set_style>
 800896c:	4a75      	ldr	r2, [pc, #468]	; (8008b44 <update_main_screen+0x740>)
 800896e:	69e0      	ldr	r0, [r4, #28]
 8008970:	2101      	movs	r1, #1
 8008972:	f00b ff7b 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[8], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[8], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008976:	4a73      	ldr	r2, [pc, #460]	; (8008b44 <update_main_screen+0x740>)
 8008978:	6a20      	ldr	r0, [r4, #32]
 800897a:	2100      	movs	r1, #0
 800897c:	f00b ff76 	bl	801486c <lv_bar_set_style>
 8008980:	6a20      	ldr	r0, [r4, #32]
 8008982:	4a70      	ldr	r2, [pc, #448]	; (8008b44 <update_main_screen+0x740>)
 8008984:	2101      	movs	r1, #1
 8008986:	f00b ff71 	bl	801486c <lv_bar_set_style>
			bargraph_off(9);
 800898a:	2009      	movs	r0, #9
 800898c:	e5ca      	b.n	8008524 <update_main_screen+0x120>
			lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800898e:	4c6c      	ldr	r4, [pc, #432]	; (8008b40 <update_main_screen+0x73c>)
 8008990:	4a6c      	ldr	r2, [pc, #432]	; (8008b44 <update_main_screen+0x740>)
 8008992:	6820      	ldr	r0, [r4, #0]
 8008994:	2100      	movs	r1, #0
 8008996:	f00b ff69 	bl	801486c <lv_bar_set_style>
 800899a:	4a6a      	ldr	r2, [pc, #424]	; (8008b44 <update_main_screen+0x740>)
 800899c:	6820      	ldr	r0, [r4, #0]
 800899e:	2101      	movs	r1, #1
 80089a0:	f00b ff64 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[1], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[1], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80089a4:	4a67      	ldr	r2, [pc, #412]	; (8008b44 <update_main_screen+0x740>)
 80089a6:	6860      	ldr	r0, [r4, #4]
 80089a8:	2100      	movs	r1, #0
 80089aa:	f00b ff5f 	bl	801486c <lv_bar_set_style>
 80089ae:	4a65      	ldr	r2, [pc, #404]	; (8008b44 <update_main_screen+0x740>)
 80089b0:	6860      	ldr	r0, [r4, #4]
 80089b2:	2101      	movs	r1, #1
 80089b4:	f00b ff5a 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[2], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[2], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80089b8:	4a62      	ldr	r2, [pc, #392]	; (8008b44 <update_main_screen+0x740>)
 80089ba:	68a0      	ldr	r0, [r4, #8]
 80089bc:	2100      	movs	r1, #0
 80089be:	f00b ff55 	bl	801486c <lv_bar_set_style>
 80089c2:	4a60      	ldr	r2, [pc, #384]	; (8008b44 <update_main_screen+0x740>)
 80089c4:	68a0      	ldr	r0, [r4, #8]
 80089c6:	2101      	movs	r1, #1
 80089c8:	f00b ff50 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[3], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[3], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80089cc:	4a5d      	ldr	r2, [pc, #372]	; (8008b44 <update_main_screen+0x740>)
 80089ce:	68e0      	ldr	r0, [r4, #12]
 80089d0:	2100      	movs	r1, #0
 80089d2:	f00b ff4b 	bl	801486c <lv_bar_set_style>
 80089d6:	4a5b      	ldr	r2, [pc, #364]	; (8008b44 <update_main_screen+0x740>)
 80089d8:	68e0      	ldr	r0, [r4, #12]
 80089da:	2101      	movs	r1, #1
 80089dc:	f00b ff46 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[4], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[4], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80089e0:	4a58      	ldr	r2, [pc, #352]	; (8008b44 <update_main_screen+0x740>)
 80089e2:	6920      	ldr	r0, [r4, #16]
 80089e4:	2100      	movs	r1, #0
 80089e6:	f00b ff41 	bl	801486c <lv_bar_set_style>
 80089ea:	4a56      	ldr	r2, [pc, #344]	; (8008b44 <update_main_screen+0x740>)
 80089ec:	6920      	ldr	r0, [r4, #16]
 80089ee:	2101      	movs	r1, #1
 80089f0:	f00b ff3c 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[5], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[5], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80089f4:	4a53      	ldr	r2, [pc, #332]	; (8008b44 <update_main_screen+0x740>)
 80089f6:	6960      	ldr	r0, [r4, #20]
 80089f8:	2100      	movs	r1, #0
 80089fa:	f00b ff37 	bl	801486c <lv_bar_set_style>
 80089fe:	4a51      	ldr	r2, [pc, #324]	; (8008b44 <update_main_screen+0x740>)
 8008a00:	6960      	ldr	r0, [r4, #20]
 8008a02:	2101      	movs	r1, #1
 8008a04:	f00b ff32 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[6], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[6], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008a08:	4a4e      	ldr	r2, [pc, #312]	; (8008b44 <update_main_screen+0x740>)
 8008a0a:	69a0      	ldr	r0, [r4, #24]
 8008a0c:	2100      	movs	r1, #0
 8008a0e:	f00b ff2d 	bl	801486c <lv_bar_set_style>
 8008a12:	4a4c      	ldr	r2, [pc, #304]	; (8008b44 <update_main_screen+0x740>)
 8008a14:	69a0      	ldr	r0, [r4, #24]
 8008a16:	2101      	movs	r1, #1
 8008a18:	f00b ff28 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[7], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[7], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008a1c:	4a49      	ldr	r2, [pc, #292]	; (8008b44 <update_main_screen+0x740>)
 8008a1e:	69e0      	ldr	r0, [r4, #28]
 8008a20:	2100      	movs	r1, #0
 8008a22:	f00b ff23 	bl	801486c <lv_bar_set_style>
 8008a26:	4a47      	ldr	r2, [pc, #284]	; (8008b44 <update_main_screen+0x740>)
 8008a28:	69e0      	ldr	r0, [r4, #28]
 8008a2a:	2101      	movs	r1, #1
 8008a2c:	f00b ff1e 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[8], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[8], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008a30:	4a44      	ldr	r2, [pc, #272]	; (8008b44 <update_main_screen+0x740>)
 8008a32:	6a20      	ldr	r0, [r4, #32]
 8008a34:	2100      	movs	r1, #0
 8008a36:	f00b ff19 	bl	801486c <lv_bar_set_style>
 8008a3a:	4a42      	ldr	r2, [pc, #264]	; (8008b44 <update_main_screen+0x740>)
 8008a3c:	6a20      	ldr	r0, [r4, #32]
 8008a3e:	2101      	movs	r1, #1
 8008a40:	f00b ff14 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[9], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[9], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008a44:	4a3f      	ldr	r2, [pc, #252]	; (8008b44 <update_main_screen+0x740>)
 8008a46:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008a48:	2100      	movs	r1, #0
 8008a4a:	f00b ff0f 	bl	801486c <lv_bar_set_style>
 8008a4e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008a50:	4a3c      	ldr	r2, [pc, #240]	; (8008b44 <update_main_screen+0x740>)
 8008a52:	2101      	movs	r1, #1
 8008a54:	f00b ff0a 	bl	801486c <lv_bar_set_style>
			bargraph_off(10);
 8008a58:	200a      	movs	r0, #10
 8008a5a:	e563      	b.n	8008524 <update_main_screen+0x120>
			lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008a5c:	4c38      	ldr	r4, [pc, #224]	; (8008b40 <update_main_screen+0x73c>)
 8008a5e:	4a39      	ldr	r2, [pc, #228]	; (8008b44 <update_main_screen+0x740>)
 8008a60:	6820      	ldr	r0, [r4, #0]
 8008a62:	2100      	movs	r1, #0
 8008a64:	f00b ff02 	bl	801486c <lv_bar_set_style>
 8008a68:	4a36      	ldr	r2, [pc, #216]	; (8008b44 <update_main_screen+0x740>)
 8008a6a:	6820      	ldr	r0, [r4, #0]
 8008a6c:	2101      	movs	r1, #1
 8008a6e:	f00b fefd 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[1], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[1], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008a72:	4a34      	ldr	r2, [pc, #208]	; (8008b44 <update_main_screen+0x740>)
 8008a74:	6860      	ldr	r0, [r4, #4]
 8008a76:	2100      	movs	r1, #0
 8008a78:	f00b fef8 	bl	801486c <lv_bar_set_style>
 8008a7c:	4a31      	ldr	r2, [pc, #196]	; (8008b44 <update_main_screen+0x740>)
 8008a7e:	6860      	ldr	r0, [r4, #4]
 8008a80:	2101      	movs	r1, #1
 8008a82:	f00b fef3 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[2], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[2], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008a86:	4a2f      	ldr	r2, [pc, #188]	; (8008b44 <update_main_screen+0x740>)
 8008a88:	68a0      	ldr	r0, [r4, #8]
 8008a8a:	2100      	movs	r1, #0
 8008a8c:	f00b feee 	bl	801486c <lv_bar_set_style>
 8008a90:	4a2c      	ldr	r2, [pc, #176]	; (8008b44 <update_main_screen+0x740>)
 8008a92:	68a0      	ldr	r0, [r4, #8]
 8008a94:	2101      	movs	r1, #1
 8008a96:	f00b fee9 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[3], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[3], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008a9a:	4a2a      	ldr	r2, [pc, #168]	; (8008b44 <update_main_screen+0x740>)
 8008a9c:	68e0      	ldr	r0, [r4, #12]
 8008a9e:	2100      	movs	r1, #0
 8008aa0:	f00b fee4 	bl	801486c <lv_bar_set_style>
 8008aa4:	4a27      	ldr	r2, [pc, #156]	; (8008b44 <update_main_screen+0x740>)
 8008aa6:	68e0      	ldr	r0, [r4, #12]
 8008aa8:	2101      	movs	r1, #1
 8008aaa:	f00b fedf 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[4], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[4], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008aae:	4a25      	ldr	r2, [pc, #148]	; (8008b44 <update_main_screen+0x740>)
 8008ab0:	6920      	ldr	r0, [r4, #16]
 8008ab2:	2100      	movs	r1, #0
 8008ab4:	f00b feda 	bl	801486c <lv_bar_set_style>
 8008ab8:	4a22      	ldr	r2, [pc, #136]	; (8008b44 <update_main_screen+0x740>)
 8008aba:	6920      	ldr	r0, [r4, #16]
 8008abc:	2101      	movs	r1, #1
 8008abe:	f00b fed5 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[5], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[5], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008ac2:	4a20      	ldr	r2, [pc, #128]	; (8008b44 <update_main_screen+0x740>)
 8008ac4:	6960      	ldr	r0, [r4, #20]
 8008ac6:	2100      	movs	r1, #0
 8008ac8:	f00b fed0 	bl	801486c <lv_bar_set_style>
 8008acc:	4a1d      	ldr	r2, [pc, #116]	; (8008b44 <update_main_screen+0x740>)
 8008ace:	6960      	ldr	r0, [r4, #20]
 8008ad0:	2101      	movs	r1, #1
 8008ad2:	f00b fecb 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[6], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[6], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008ad6:	4a1b      	ldr	r2, [pc, #108]	; (8008b44 <update_main_screen+0x740>)
 8008ad8:	69a0      	ldr	r0, [r4, #24]
 8008ada:	2100      	movs	r1, #0
 8008adc:	f00b fec6 	bl	801486c <lv_bar_set_style>
 8008ae0:	4a18      	ldr	r2, [pc, #96]	; (8008b44 <update_main_screen+0x740>)
 8008ae2:	69a0      	ldr	r0, [r4, #24]
 8008ae4:	2101      	movs	r1, #1
 8008ae6:	f00b fec1 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[7], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[7], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008aea:	4a16      	ldr	r2, [pc, #88]	; (8008b44 <update_main_screen+0x740>)
 8008aec:	69e0      	ldr	r0, [r4, #28]
 8008aee:	2100      	movs	r1, #0
 8008af0:	f00b febc 	bl	801486c <lv_bar_set_style>
 8008af4:	4a13      	ldr	r2, [pc, #76]	; (8008b44 <update_main_screen+0x740>)
 8008af6:	69e0      	ldr	r0, [r4, #28]
 8008af8:	2101      	movs	r1, #1
 8008afa:	f00b feb7 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[8], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[8], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008afe:	4a11      	ldr	r2, [pc, #68]	; (8008b44 <update_main_screen+0x740>)
 8008b00:	6a20      	ldr	r0, [r4, #32]
 8008b02:	2100      	movs	r1, #0
 8008b04:	f00b feb2 	bl	801486c <lv_bar_set_style>
 8008b08:	4a0e      	ldr	r2, [pc, #56]	; (8008b44 <update_main_screen+0x740>)
 8008b0a:	6a20      	ldr	r0, [r4, #32]
 8008b0c:	2101      	movs	r1, #1
 8008b0e:	f00b fead 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[9], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[9], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008b12:	4a0c      	ldr	r2, [pc, #48]	; (8008b44 <update_main_screen+0x740>)
 8008b14:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008b16:	2100      	movs	r1, #0
 8008b18:	f00b fea8 	bl	801486c <lv_bar_set_style>
 8008b1c:	4a09      	ldr	r2, [pc, #36]	; (8008b44 <update_main_screen+0x740>)
 8008b1e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008b20:	2101      	movs	r1, #1
 8008b22:	f00b fea3 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[10], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[10], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008b26:	4a07      	ldr	r2, [pc, #28]	; (8008b44 <update_main_screen+0x740>)
 8008b28:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008b2a:	2100      	movs	r1, #0
 8008b2c:	f00b fe9e 	bl	801486c <lv_bar_set_style>
 8008b30:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008b32:	4a04      	ldr	r2, [pc, #16]	; (8008b44 <update_main_screen+0x740>)
 8008b34:	2101      	movs	r1, #1
 8008b36:	f00b fe99 	bl	801486c <lv_bar_set_style>
			bargraph_off(11);
 8008b3a:	200b      	movs	r0, #11
 8008b3c:	e4f2      	b.n	8008524 <update_main_screen+0x120>
 8008b3e:	bf00      	nop
 8008b40:	20004df8 	.word	0x20004df8
 8008b44:	20004f48 	.word	0x20004f48
			lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008b48:	4c80      	ldr	r4, [pc, #512]	; (8008d4c <update_main_screen+0x948>)
 8008b4a:	4a81      	ldr	r2, [pc, #516]	; (8008d50 <update_main_screen+0x94c>)
 8008b4c:	6820      	ldr	r0, [r4, #0]
 8008b4e:	2100      	movs	r1, #0
 8008b50:	f00b fe8c 	bl	801486c <lv_bar_set_style>
 8008b54:	4a7e      	ldr	r2, [pc, #504]	; (8008d50 <update_main_screen+0x94c>)
 8008b56:	6820      	ldr	r0, [r4, #0]
 8008b58:	2101      	movs	r1, #1
 8008b5a:	f00b fe87 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[1], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[1], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008b5e:	4a7c      	ldr	r2, [pc, #496]	; (8008d50 <update_main_screen+0x94c>)
 8008b60:	6860      	ldr	r0, [r4, #4]
 8008b62:	2100      	movs	r1, #0
 8008b64:	f00b fe82 	bl	801486c <lv_bar_set_style>
 8008b68:	4a79      	ldr	r2, [pc, #484]	; (8008d50 <update_main_screen+0x94c>)
 8008b6a:	6860      	ldr	r0, [r4, #4]
 8008b6c:	2101      	movs	r1, #1
 8008b6e:	f00b fe7d 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[2], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[2], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008b72:	4a77      	ldr	r2, [pc, #476]	; (8008d50 <update_main_screen+0x94c>)
 8008b74:	68a0      	ldr	r0, [r4, #8]
 8008b76:	2100      	movs	r1, #0
 8008b78:	f00b fe78 	bl	801486c <lv_bar_set_style>
 8008b7c:	4a74      	ldr	r2, [pc, #464]	; (8008d50 <update_main_screen+0x94c>)
 8008b7e:	68a0      	ldr	r0, [r4, #8]
 8008b80:	2101      	movs	r1, #1
 8008b82:	f00b fe73 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[3], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[3], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008b86:	4a72      	ldr	r2, [pc, #456]	; (8008d50 <update_main_screen+0x94c>)
 8008b88:	68e0      	ldr	r0, [r4, #12]
 8008b8a:	2100      	movs	r1, #0
 8008b8c:	f00b fe6e 	bl	801486c <lv_bar_set_style>
 8008b90:	4a6f      	ldr	r2, [pc, #444]	; (8008d50 <update_main_screen+0x94c>)
 8008b92:	68e0      	ldr	r0, [r4, #12]
 8008b94:	2101      	movs	r1, #1
 8008b96:	f00b fe69 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[4], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[4], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008b9a:	4a6d      	ldr	r2, [pc, #436]	; (8008d50 <update_main_screen+0x94c>)
 8008b9c:	6920      	ldr	r0, [r4, #16]
 8008b9e:	2100      	movs	r1, #0
 8008ba0:	f00b fe64 	bl	801486c <lv_bar_set_style>
 8008ba4:	4a6a      	ldr	r2, [pc, #424]	; (8008d50 <update_main_screen+0x94c>)
 8008ba6:	6920      	ldr	r0, [r4, #16]
 8008ba8:	2101      	movs	r1, #1
 8008baa:	f00b fe5f 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[5], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[5], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008bae:	4a68      	ldr	r2, [pc, #416]	; (8008d50 <update_main_screen+0x94c>)
 8008bb0:	6960      	ldr	r0, [r4, #20]
 8008bb2:	2100      	movs	r1, #0
 8008bb4:	f00b fe5a 	bl	801486c <lv_bar_set_style>
 8008bb8:	4a65      	ldr	r2, [pc, #404]	; (8008d50 <update_main_screen+0x94c>)
 8008bba:	6960      	ldr	r0, [r4, #20]
 8008bbc:	2101      	movs	r1, #1
 8008bbe:	f00b fe55 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[6], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[6], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008bc2:	4a63      	ldr	r2, [pc, #396]	; (8008d50 <update_main_screen+0x94c>)
 8008bc4:	69a0      	ldr	r0, [r4, #24]
 8008bc6:	2100      	movs	r1, #0
 8008bc8:	f00b fe50 	bl	801486c <lv_bar_set_style>
 8008bcc:	4a60      	ldr	r2, [pc, #384]	; (8008d50 <update_main_screen+0x94c>)
 8008bce:	69a0      	ldr	r0, [r4, #24]
 8008bd0:	2101      	movs	r1, #1
 8008bd2:	f00b fe4b 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[7], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[7], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008bd6:	4a5e      	ldr	r2, [pc, #376]	; (8008d50 <update_main_screen+0x94c>)
 8008bd8:	69e0      	ldr	r0, [r4, #28]
 8008bda:	2100      	movs	r1, #0
 8008bdc:	f00b fe46 	bl	801486c <lv_bar_set_style>
 8008be0:	4a5b      	ldr	r2, [pc, #364]	; (8008d50 <update_main_screen+0x94c>)
 8008be2:	69e0      	ldr	r0, [r4, #28]
 8008be4:	2101      	movs	r1, #1
 8008be6:	f00b fe41 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[8], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[8], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008bea:	4a59      	ldr	r2, [pc, #356]	; (8008d50 <update_main_screen+0x94c>)
 8008bec:	6a20      	ldr	r0, [r4, #32]
 8008bee:	2100      	movs	r1, #0
 8008bf0:	f00b fe3c 	bl	801486c <lv_bar_set_style>
 8008bf4:	4a56      	ldr	r2, [pc, #344]	; (8008d50 <update_main_screen+0x94c>)
 8008bf6:	6a20      	ldr	r0, [r4, #32]
 8008bf8:	2101      	movs	r1, #1
 8008bfa:	f00b fe37 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[9], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[9], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008bfe:	4a54      	ldr	r2, [pc, #336]	; (8008d50 <update_main_screen+0x94c>)
 8008c00:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008c02:	2100      	movs	r1, #0
 8008c04:	f00b fe32 	bl	801486c <lv_bar_set_style>
 8008c08:	4a51      	ldr	r2, [pc, #324]	; (8008d50 <update_main_screen+0x94c>)
 8008c0a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008c0c:	2101      	movs	r1, #1
 8008c0e:	f00b fe2d 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[10], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[10], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008c12:	4a4f      	ldr	r2, [pc, #316]	; (8008d50 <update_main_screen+0x94c>)
 8008c14:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008c16:	2100      	movs	r1, #0
 8008c18:	f00b fe28 	bl	801486c <lv_bar_set_style>
 8008c1c:	4a4c      	ldr	r2, [pc, #304]	; (8008d50 <update_main_screen+0x94c>)
 8008c1e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008c20:	2101      	movs	r1, #1
 8008c22:	f00b fe23 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[11], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[11], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008c26:	4a4a      	ldr	r2, [pc, #296]	; (8008d50 <update_main_screen+0x94c>)
 8008c28:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008c2a:	2100      	movs	r1, #0
 8008c2c:	f00b fe1e 	bl	801486c <lv_bar_set_style>
 8008c30:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008c32:	4a47      	ldr	r2, [pc, #284]	; (8008d50 <update_main_screen+0x94c>)
 8008c34:	2101      	movs	r1, #1
 8008c36:	f00b fe19 	bl	801486c <lv_bar_set_style>
			bargraph_off(12);
 8008c3a:	200c      	movs	r0, #12
 8008c3c:	e472      	b.n	8008524 <update_main_screen+0x120>
			lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008c3e:	4c43      	ldr	r4, [pc, #268]	; (8008d4c <update_main_screen+0x948>)
 8008c40:	4a43      	ldr	r2, [pc, #268]	; (8008d50 <update_main_screen+0x94c>)
 8008c42:	6820      	ldr	r0, [r4, #0]
 8008c44:	2100      	movs	r1, #0
 8008c46:	f00b fe11 	bl	801486c <lv_bar_set_style>
 8008c4a:	4a41      	ldr	r2, [pc, #260]	; (8008d50 <update_main_screen+0x94c>)
 8008c4c:	6820      	ldr	r0, [r4, #0]
 8008c4e:	2101      	movs	r1, #1
 8008c50:	f00b fe0c 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[1], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[1], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008c54:	4a3e      	ldr	r2, [pc, #248]	; (8008d50 <update_main_screen+0x94c>)
 8008c56:	6860      	ldr	r0, [r4, #4]
 8008c58:	2100      	movs	r1, #0
 8008c5a:	f00b fe07 	bl	801486c <lv_bar_set_style>
 8008c5e:	4a3c      	ldr	r2, [pc, #240]	; (8008d50 <update_main_screen+0x94c>)
 8008c60:	6860      	ldr	r0, [r4, #4]
 8008c62:	2101      	movs	r1, #1
 8008c64:	f00b fe02 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[2], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[2], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008c68:	4a39      	ldr	r2, [pc, #228]	; (8008d50 <update_main_screen+0x94c>)
 8008c6a:	68a0      	ldr	r0, [r4, #8]
 8008c6c:	2100      	movs	r1, #0
 8008c6e:	f00b fdfd 	bl	801486c <lv_bar_set_style>
 8008c72:	4a37      	ldr	r2, [pc, #220]	; (8008d50 <update_main_screen+0x94c>)
 8008c74:	68a0      	ldr	r0, [r4, #8]
 8008c76:	2101      	movs	r1, #1
 8008c78:	f00b fdf8 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[3], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[3], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008c7c:	4a34      	ldr	r2, [pc, #208]	; (8008d50 <update_main_screen+0x94c>)
 8008c7e:	68e0      	ldr	r0, [r4, #12]
 8008c80:	2100      	movs	r1, #0
 8008c82:	f00b fdf3 	bl	801486c <lv_bar_set_style>
 8008c86:	4a32      	ldr	r2, [pc, #200]	; (8008d50 <update_main_screen+0x94c>)
 8008c88:	68e0      	ldr	r0, [r4, #12]
 8008c8a:	2101      	movs	r1, #1
 8008c8c:	f00b fdee 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[4], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[4], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008c90:	4a2f      	ldr	r2, [pc, #188]	; (8008d50 <update_main_screen+0x94c>)
 8008c92:	6920      	ldr	r0, [r4, #16]
 8008c94:	2100      	movs	r1, #0
 8008c96:	f00b fde9 	bl	801486c <lv_bar_set_style>
 8008c9a:	4a2d      	ldr	r2, [pc, #180]	; (8008d50 <update_main_screen+0x94c>)
 8008c9c:	6920      	ldr	r0, [r4, #16]
 8008c9e:	2101      	movs	r1, #1
 8008ca0:	f00b fde4 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[5], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[5], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008ca4:	4a2a      	ldr	r2, [pc, #168]	; (8008d50 <update_main_screen+0x94c>)
 8008ca6:	6960      	ldr	r0, [r4, #20]
 8008ca8:	2100      	movs	r1, #0
 8008caa:	f00b fddf 	bl	801486c <lv_bar_set_style>
 8008cae:	4a28      	ldr	r2, [pc, #160]	; (8008d50 <update_main_screen+0x94c>)
 8008cb0:	6960      	ldr	r0, [r4, #20]
 8008cb2:	2101      	movs	r1, #1
 8008cb4:	f00b fdda 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[6], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[6], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008cb8:	4a25      	ldr	r2, [pc, #148]	; (8008d50 <update_main_screen+0x94c>)
 8008cba:	69a0      	ldr	r0, [r4, #24]
 8008cbc:	2100      	movs	r1, #0
 8008cbe:	f00b fdd5 	bl	801486c <lv_bar_set_style>
 8008cc2:	4a23      	ldr	r2, [pc, #140]	; (8008d50 <update_main_screen+0x94c>)
 8008cc4:	69a0      	ldr	r0, [r4, #24]
 8008cc6:	2101      	movs	r1, #1
 8008cc8:	f00b fdd0 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[7], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[7], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008ccc:	4a20      	ldr	r2, [pc, #128]	; (8008d50 <update_main_screen+0x94c>)
 8008cce:	69e0      	ldr	r0, [r4, #28]
 8008cd0:	2100      	movs	r1, #0
 8008cd2:	f00b fdcb 	bl	801486c <lv_bar_set_style>
 8008cd6:	4a1e      	ldr	r2, [pc, #120]	; (8008d50 <update_main_screen+0x94c>)
 8008cd8:	69e0      	ldr	r0, [r4, #28]
 8008cda:	2101      	movs	r1, #1
 8008cdc:	f00b fdc6 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[8], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[8], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008ce0:	4a1b      	ldr	r2, [pc, #108]	; (8008d50 <update_main_screen+0x94c>)
 8008ce2:	6a20      	ldr	r0, [r4, #32]
 8008ce4:	2100      	movs	r1, #0
 8008ce6:	f00b fdc1 	bl	801486c <lv_bar_set_style>
 8008cea:	4a19      	ldr	r2, [pc, #100]	; (8008d50 <update_main_screen+0x94c>)
 8008cec:	6a20      	ldr	r0, [r4, #32]
 8008cee:	2101      	movs	r1, #1
 8008cf0:	f00b fdbc 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[9], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[9], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008cf4:	4a16      	ldr	r2, [pc, #88]	; (8008d50 <update_main_screen+0x94c>)
 8008cf6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008cf8:	2100      	movs	r1, #0
 8008cfa:	f00b fdb7 	bl	801486c <lv_bar_set_style>
 8008cfe:	4a14      	ldr	r2, [pc, #80]	; (8008d50 <update_main_screen+0x94c>)
 8008d00:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008d02:	2101      	movs	r1, #1
 8008d04:	f00b fdb2 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[10], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[10], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008d08:	4a11      	ldr	r2, [pc, #68]	; (8008d50 <update_main_screen+0x94c>)
 8008d0a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008d0c:	2100      	movs	r1, #0
 8008d0e:	f00b fdad 	bl	801486c <lv_bar_set_style>
 8008d12:	4a0f      	ldr	r2, [pc, #60]	; (8008d50 <update_main_screen+0x94c>)
 8008d14:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008d16:	2101      	movs	r1, #1
 8008d18:	f00b fda8 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[11], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[11], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008d1c:	4a0c      	ldr	r2, [pc, #48]	; (8008d50 <update_main_screen+0x94c>)
 8008d1e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008d20:	2100      	movs	r1, #0
 8008d22:	f00b fda3 	bl	801486c <lv_bar_set_style>
 8008d26:	4a0a      	ldr	r2, [pc, #40]	; (8008d50 <update_main_screen+0x94c>)
 8008d28:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008d2a:	2101      	movs	r1, #1
 8008d2c:	f00b fd9e 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[12], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[12], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008d30:	4a07      	ldr	r2, [pc, #28]	; (8008d50 <update_main_screen+0x94c>)
 8008d32:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008d34:	2100      	movs	r1, #0
 8008d36:	f00b fd99 	bl	801486c <lv_bar_set_style>
 8008d3a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008d3c:	4a04      	ldr	r2, [pc, #16]	; (8008d50 <update_main_screen+0x94c>)
 8008d3e:	2101      	movs	r1, #1
 8008d40:	f00b fd94 	bl	801486c <lv_bar_set_style>
			bargraph_off(13);
 8008d44:	200d      	movs	r0, #13
 8008d46:	f7ff bbed 	b.w	8008524 <update_main_screen+0x120>
 8008d4a:	bf00      	nop
 8008d4c:	20004df8 	.word	0x20004df8
 8008d50:	20004f48 	.word	0x20004f48
			lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008d54:	4c94      	ldr	r4, [pc, #592]	; (8008fa8 <update_main_screen+0xba4>)
 8008d56:	4a95      	ldr	r2, [pc, #596]	; (8008fac <update_main_screen+0xba8>)
 8008d58:	6820      	ldr	r0, [r4, #0]
 8008d5a:	2100      	movs	r1, #0
 8008d5c:	f00b fd86 	bl	801486c <lv_bar_set_style>
 8008d60:	4a92      	ldr	r2, [pc, #584]	; (8008fac <update_main_screen+0xba8>)
 8008d62:	6820      	ldr	r0, [r4, #0]
 8008d64:	2101      	movs	r1, #1
 8008d66:	f00b fd81 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[1], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[1], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008d6a:	4a90      	ldr	r2, [pc, #576]	; (8008fac <update_main_screen+0xba8>)
 8008d6c:	6860      	ldr	r0, [r4, #4]
 8008d6e:	2100      	movs	r1, #0
 8008d70:	f00b fd7c 	bl	801486c <lv_bar_set_style>
 8008d74:	4a8d      	ldr	r2, [pc, #564]	; (8008fac <update_main_screen+0xba8>)
 8008d76:	6860      	ldr	r0, [r4, #4]
 8008d78:	2101      	movs	r1, #1
 8008d7a:	f00b fd77 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[2], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[2], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008d7e:	4a8b      	ldr	r2, [pc, #556]	; (8008fac <update_main_screen+0xba8>)
 8008d80:	68a0      	ldr	r0, [r4, #8]
 8008d82:	2100      	movs	r1, #0
 8008d84:	f00b fd72 	bl	801486c <lv_bar_set_style>
 8008d88:	4a88      	ldr	r2, [pc, #544]	; (8008fac <update_main_screen+0xba8>)
 8008d8a:	68a0      	ldr	r0, [r4, #8]
 8008d8c:	2101      	movs	r1, #1
 8008d8e:	f00b fd6d 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[3], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[3], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008d92:	4a86      	ldr	r2, [pc, #536]	; (8008fac <update_main_screen+0xba8>)
 8008d94:	68e0      	ldr	r0, [r4, #12]
 8008d96:	2100      	movs	r1, #0
 8008d98:	f00b fd68 	bl	801486c <lv_bar_set_style>
 8008d9c:	4a83      	ldr	r2, [pc, #524]	; (8008fac <update_main_screen+0xba8>)
 8008d9e:	68e0      	ldr	r0, [r4, #12]
 8008da0:	2101      	movs	r1, #1
 8008da2:	f00b fd63 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[4], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[4], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008da6:	4a81      	ldr	r2, [pc, #516]	; (8008fac <update_main_screen+0xba8>)
 8008da8:	6920      	ldr	r0, [r4, #16]
 8008daa:	2100      	movs	r1, #0
 8008dac:	f00b fd5e 	bl	801486c <lv_bar_set_style>
 8008db0:	4a7e      	ldr	r2, [pc, #504]	; (8008fac <update_main_screen+0xba8>)
 8008db2:	6920      	ldr	r0, [r4, #16]
 8008db4:	2101      	movs	r1, #1
 8008db6:	f00b fd59 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[5], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[5], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008dba:	4a7c      	ldr	r2, [pc, #496]	; (8008fac <update_main_screen+0xba8>)
 8008dbc:	6960      	ldr	r0, [r4, #20]
 8008dbe:	2100      	movs	r1, #0
 8008dc0:	f00b fd54 	bl	801486c <lv_bar_set_style>
 8008dc4:	4a79      	ldr	r2, [pc, #484]	; (8008fac <update_main_screen+0xba8>)
 8008dc6:	6960      	ldr	r0, [r4, #20]
 8008dc8:	2101      	movs	r1, #1
 8008dca:	f00b fd4f 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[6], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[6], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008dce:	4a77      	ldr	r2, [pc, #476]	; (8008fac <update_main_screen+0xba8>)
 8008dd0:	69a0      	ldr	r0, [r4, #24]
 8008dd2:	2100      	movs	r1, #0
 8008dd4:	f00b fd4a 	bl	801486c <lv_bar_set_style>
 8008dd8:	4a74      	ldr	r2, [pc, #464]	; (8008fac <update_main_screen+0xba8>)
 8008dda:	69a0      	ldr	r0, [r4, #24]
 8008ddc:	2101      	movs	r1, #1
 8008dde:	f00b fd45 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[7], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[7], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008de2:	4a72      	ldr	r2, [pc, #456]	; (8008fac <update_main_screen+0xba8>)
 8008de4:	69e0      	ldr	r0, [r4, #28]
 8008de6:	2100      	movs	r1, #0
 8008de8:	f00b fd40 	bl	801486c <lv_bar_set_style>
 8008dec:	4a6f      	ldr	r2, [pc, #444]	; (8008fac <update_main_screen+0xba8>)
 8008dee:	69e0      	ldr	r0, [r4, #28]
 8008df0:	2101      	movs	r1, #1
 8008df2:	f00b fd3b 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[8], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[8], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008df6:	4a6d      	ldr	r2, [pc, #436]	; (8008fac <update_main_screen+0xba8>)
 8008df8:	6a20      	ldr	r0, [r4, #32]
 8008dfa:	2100      	movs	r1, #0
 8008dfc:	f00b fd36 	bl	801486c <lv_bar_set_style>
 8008e00:	4a6a      	ldr	r2, [pc, #424]	; (8008fac <update_main_screen+0xba8>)
 8008e02:	6a20      	ldr	r0, [r4, #32]
 8008e04:	2101      	movs	r1, #1
 8008e06:	f00b fd31 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[9], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[9], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008e0a:	4a68      	ldr	r2, [pc, #416]	; (8008fac <update_main_screen+0xba8>)
 8008e0c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008e0e:	2100      	movs	r1, #0
 8008e10:	f00b fd2c 	bl	801486c <lv_bar_set_style>
 8008e14:	4a65      	ldr	r2, [pc, #404]	; (8008fac <update_main_screen+0xba8>)
 8008e16:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008e18:	2101      	movs	r1, #1
 8008e1a:	f00b fd27 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[10], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[10], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008e1e:	4a63      	ldr	r2, [pc, #396]	; (8008fac <update_main_screen+0xba8>)
 8008e20:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008e22:	2100      	movs	r1, #0
 8008e24:	f00b fd22 	bl	801486c <lv_bar_set_style>
 8008e28:	4a60      	ldr	r2, [pc, #384]	; (8008fac <update_main_screen+0xba8>)
 8008e2a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008e2c:	2101      	movs	r1, #1
 8008e2e:	f00b fd1d 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[11], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[11], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008e32:	4a5e      	ldr	r2, [pc, #376]	; (8008fac <update_main_screen+0xba8>)
 8008e34:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008e36:	2100      	movs	r1, #0
 8008e38:	f00b fd18 	bl	801486c <lv_bar_set_style>
 8008e3c:	4a5b      	ldr	r2, [pc, #364]	; (8008fac <update_main_screen+0xba8>)
 8008e3e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008e40:	2101      	movs	r1, #1
 8008e42:	f00b fd13 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[12], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[12], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008e46:	4a59      	ldr	r2, [pc, #356]	; (8008fac <update_main_screen+0xba8>)
 8008e48:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008e4a:	2100      	movs	r1, #0
 8008e4c:	f00b fd0e 	bl	801486c <lv_bar_set_style>
 8008e50:	4a56      	ldr	r2, [pc, #344]	; (8008fac <update_main_screen+0xba8>)
 8008e52:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008e54:	2101      	movs	r1, #1
 8008e56:	f00b fd09 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[13], LV_BAR_STYLE_BG, &style_indic_cy); lv_bar_set_style(bar[13], LV_BAR_STYLE_INDIC, &style_indic_cy);
 8008e5a:	4a55      	ldr	r2, [pc, #340]	; (8008fb0 <update_main_screen+0xbac>)
 8008e5c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8008e5e:	2100      	movs	r1, #0
 8008e60:	f00b fd04 	bl	801486c <lv_bar_set_style>
 8008e64:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8008e66:	4a52      	ldr	r2, [pc, #328]	; (8008fb0 <update_main_screen+0xbac>)
 8008e68:	2101      	movs	r1, #1
 8008e6a:	f00b fcff 	bl	801486c <lv_bar_set_style>
			bargraph_off(14);
 8008e6e:	200e      	movs	r0, #14
 8008e70:	f7ff bb58 	b.w	8008524 <update_main_screen+0x120>
			lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008e74:	4c4c      	ldr	r4, [pc, #304]	; (8008fa8 <update_main_screen+0xba4>)
 8008e76:	4a4d      	ldr	r2, [pc, #308]	; (8008fac <update_main_screen+0xba8>)
 8008e78:	6820      	ldr	r0, [r4, #0]
 8008e7a:	2100      	movs	r1, #0
 8008e7c:	f00b fcf6 	bl	801486c <lv_bar_set_style>
 8008e80:	4a4a      	ldr	r2, [pc, #296]	; (8008fac <update_main_screen+0xba8>)
 8008e82:	6820      	ldr	r0, [r4, #0]
 8008e84:	2101      	movs	r1, #1
 8008e86:	f00b fcf1 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[1], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[1], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008e8a:	4a48      	ldr	r2, [pc, #288]	; (8008fac <update_main_screen+0xba8>)
 8008e8c:	6860      	ldr	r0, [r4, #4]
 8008e8e:	2100      	movs	r1, #0
 8008e90:	f00b fcec 	bl	801486c <lv_bar_set_style>
 8008e94:	4a45      	ldr	r2, [pc, #276]	; (8008fac <update_main_screen+0xba8>)
 8008e96:	6860      	ldr	r0, [r4, #4]
 8008e98:	2101      	movs	r1, #1
 8008e9a:	f00b fce7 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[2], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[2], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008e9e:	4a43      	ldr	r2, [pc, #268]	; (8008fac <update_main_screen+0xba8>)
 8008ea0:	68a0      	ldr	r0, [r4, #8]
 8008ea2:	2100      	movs	r1, #0
 8008ea4:	f00b fce2 	bl	801486c <lv_bar_set_style>
 8008ea8:	4a40      	ldr	r2, [pc, #256]	; (8008fac <update_main_screen+0xba8>)
 8008eaa:	68a0      	ldr	r0, [r4, #8]
 8008eac:	2101      	movs	r1, #1
 8008eae:	f00b fcdd 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[3], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[3], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008eb2:	4a3e      	ldr	r2, [pc, #248]	; (8008fac <update_main_screen+0xba8>)
 8008eb4:	68e0      	ldr	r0, [r4, #12]
 8008eb6:	2100      	movs	r1, #0
 8008eb8:	f00b fcd8 	bl	801486c <lv_bar_set_style>
 8008ebc:	4a3b      	ldr	r2, [pc, #236]	; (8008fac <update_main_screen+0xba8>)
 8008ebe:	68e0      	ldr	r0, [r4, #12]
 8008ec0:	2101      	movs	r1, #1
 8008ec2:	f00b fcd3 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[4], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[4], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008ec6:	4a39      	ldr	r2, [pc, #228]	; (8008fac <update_main_screen+0xba8>)
 8008ec8:	6920      	ldr	r0, [r4, #16]
 8008eca:	2100      	movs	r1, #0
 8008ecc:	f00b fcce 	bl	801486c <lv_bar_set_style>
 8008ed0:	4a36      	ldr	r2, [pc, #216]	; (8008fac <update_main_screen+0xba8>)
 8008ed2:	6920      	ldr	r0, [r4, #16]
 8008ed4:	2101      	movs	r1, #1
 8008ed6:	f00b fcc9 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[5], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[5], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008eda:	4a34      	ldr	r2, [pc, #208]	; (8008fac <update_main_screen+0xba8>)
 8008edc:	6960      	ldr	r0, [r4, #20]
 8008ede:	2100      	movs	r1, #0
 8008ee0:	f00b fcc4 	bl	801486c <lv_bar_set_style>
 8008ee4:	4a31      	ldr	r2, [pc, #196]	; (8008fac <update_main_screen+0xba8>)
 8008ee6:	6960      	ldr	r0, [r4, #20]
 8008ee8:	2101      	movs	r1, #1
 8008eea:	f00b fcbf 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[6], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[6], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008eee:	4a2f      	ldr	r2, [pc, #188]	; (8008fac <update_main_screen+0xba8>)
 8008ef0:	69a0      	ldr	r0, [r4, #24]
 8008ef2:	2100      	movs	r1, #0
 8008ef4:	f00b fcba 	bl	801486c <lv_bar_set_style>
 8008ef8:	4a2c      	ldr	r2, [pc, #176]	; (8008fac <update_main_screen+0xba8>)
 8008efa:	69a0      	ldr	r0, [r4, #24]
 8008efc:	2101      	movs	r1, #1
 8008efe:	f00b fcb5 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[7], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[7], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008f02:	4a2a      	ldr	r2, [pc, #168]	; (8008fac <update_main_screen+0xba8>)
 8008f04:	69e0      	ldr	r0, [r4, #28]
 8008f06:	2100      	movs	r1, #0
 8008f08:	f00b fcb0 	bl	801486c <lv_bar_set_style>
 8008f0c:	4a27      	ldr	r2, [pc, #156]	; (8008fac <update_main_screen+0xba8>)
 8008f0e:	69e0      	ldr	r0, [r4, #28]
 8008f10:	2101      	movs	r1, #1
 8008f12:	f00b fcab 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[8], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[8], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008f16:	4a25      	ldr	r2, [pc, #148]	; (8008fac <update_main_screen+0xba8>)
 8008f18:	6a20      	ldr	r0, [r4, #32]
 8008f1a:	2100      	movs	r1, #0
 8008f1c:	f00b fca6 	bl	801486c <lv_bar_set_style>
 8008f20:	4a22      	ldr	r2, [pc, #136]	; (8008fac <update_main_screen+0xba8>)
 8008f22:	6a20      	ldr	r0, [r4, #32]
 8008f24:	2101      	movs	r1, #1
 8008f26:	f00b fca1 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[9], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[9], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008f2a:	4a20      	ldr	r2, [pc, #128]	; (8008fac <update_main_screen+0xba8>)
 8008f2c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008f2e:	2100      	movs	r1, #0
 8008f30:	f00b fc9c 	bl	801486c <lv_bar_set_style>
 8008f34:	4a1d      	ldr	r2, [pc, #116]	; (8008fac <update_main_screen+0xba8>)
 8008f36:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008f38:	2101      	movs	r1, #1
 8008f3a:	f00b fc97 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[10], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[10], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008f3e:	4a1b      	ldr	r2, [pc, #108]	; (8008fac <update_main_screen+0xba8>)
 8008f40:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008f42:	2100      	movs	r1, #0
 8008f44:	f00b fc92 	bl	801486c <lv_bar_set_style>
 8008f48:	4a18      	ldr	r2, [pc, #96]	; (8008fac <update_main_screen+0xba8>)
 8008f4a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008f4c:	2101      	movs	r1, #1
 8008f4e:	f00b fc8d 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[11], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[11], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008f52:	4a16      	ldr	r2, [pc, #88]	; (8008fac <update_main_screen+0xba8>)
 8008f54:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008f56:	2100      	movs	r1, #0
 8008f58:	f00b fc88 	bl	801486c <lv_bar_set_style>
 8008f5c:	4a13      	ldr	r2, [pc, #76]	; (8008fac <update_main_screen+0xba8>)
 8008f5e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008f60:	2101      	movs	r1, #1
 8008f62:	f00b fc83 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[12], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[12], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008f66:	4a11      	ldr	r2, [pc, #68]	; (8008fac <update_main_screen+0xba8>)
 8008f68:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008f6a:	2100      	movs	r1, #0
 8008f6c:	f00b fc7e 	bl	801486c <lv_bar_set_style>
 8008f70:	4a0e      	ldr	r2, [pc, #56]	; (8008fac <update_main_screen+0xba8>)
 8008f72:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008f74:	2101      	movs	r1, #1
 8008f76:	f00b fc79 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[13], LV_BAR_STYLE_BG, &style_indic_cy); lv_bar_set_style(bar[13], LV_BAR_STYLE_INDIC, &style_indic_cy);
 8008f7a:	4a0d      	ldr	r2, [pc, #52]	; (8008fb0 <update_main_screen+0xbac>)
 8008f7c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8008f7e:	2100      	movs	r1, #0
 8008f80:	f00b fc74 	bl	801486c <lv_bar_set_style>
 8008f84:	4a0a      	ldr	r2, [pc, #40]	; (8008fb0 <update_main_screen+0xbac>)
 8008f86:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8008f88:	2101      	movs	r1, #1
 8008f8a:	f00b fc6f 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[14], LV_BAR_STYLE_BG, &style_indic_am); lv_bar_set_style(bar[14], LV_BAR_STYLE_INDIC, &style_indic_am);
 8008f8e:	4a09      	ldr	r2, [pc, #36]	; (8008fb4 <update_main_screen+0xbb0>)
 8008f90:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8008f92:	2100      	movs	r1, #0
 8008f94:	f00b fc6a 	bl	801486c <lv_bar_set_style>
 8008f98:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8008f9a:	4a06      	ldr	r2, [pc, #24]	; (8008fb4 <update_main_screen+0xbb0>)
 8008f9c:	2101      	movs	r1, #1
 8008f9e:	f00b fc65 	bl	801486c <lv_bar_set_style>
			bargraph_off(15);
 8008fa2:	200f      	movs	r0, #15
 8008fa4:	f7ff babe 	b.w	8008524 <update_main_screen+0x120>
 8008fa8:	20004df8 	.word	0x20004df8
 8008fac:	20004f48 	.word	0x20004f48
 8008fb0:	20004ed0 	.word	0x20004ed0
 8008fb4:	20004e94 	.word	0x20004e94
			lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008fb8:	4ca8      	ldr	r4, [pc, #672]	; (800925c <update_main_screen+0xe58>)
 8008fba:	4aa9      	ldr	r2, [pc, #676]	; (8009260 <update_main_screen+0xe5c>)
 8008fbc:	6820      	ldr	r0, [r4, #0]
 8008fbe:	2100      	movs	r1, #0
 8008fc0:	f00b fc54 	bl	801486c <lv_bar_set_style>
 8008fc4:	4aa6      	ldr	r2, [pc, #664]	; (8009260 <update_main_screen+0xe5c>)
 8008fc6:	6820      	ldr	r0, [r4, #0]
 8008fc8:	2101      	movs	r1, #1
 8008fca:	f00b fc4f 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[1], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[1], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008fce:	4aa4      	ldr	r2, [pc, #656]	; (8009260 <update_main_screen+0xe5c>)
 8008fd0:	6860      	ldr	r0, [r4, #4]
 8008fd2:	2100      	movs	r1, #0
 8008fd4:	f00b fc4a 	bl	801486c <lv_bar_set_style>
 8008fd8:	4aa1      	ldr	r2, [pc, #644]	; (8009260 <update_main_screen+0xe5c>)
 8008fda:	6860      	ldr	r0, [r4, #4]
 8008fdc:	2101      	movs	r1, #1
 8008fde:	f00b fc45 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[2], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[2], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008fe2:	4a9f      	ldr	r2, [pc, #636]	; (8009260 <update_main_screen+0xe5c>)
 8008fe4:	68a0      	ldr	r0, [r4, #8]
 8008fe6:	2100      	movs	r1, #0
 8008fe8:	f00b fc40 	bl	801486c <lv_bar_set_style>
 8008fec:	4a9c      	ldr	r2, [pc, #624]	; (8009260 <update_main_screen+0xe5c>)
 8008fee:	68a0      	ldr	r0, [r4, #8]
 8008ff0:	2101      	movs	r1, #1
 8008ff2:	f00b fc3b 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[3], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[3], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8008ff6:	4a9a      	ldr	r2, [pc, #616]	; (8009260 <update_main_screen+0xe5c>)
 8008ff8:	68e0      	ldr	r0, [r4, #12]
 8008ffa:	2100      	movs	r1, #0
 8008ffc:	f00b fc36 	bl	801486c <lv_bar_set_style>
 8009000:	4a97      	ldr	r2, [pc, #604]	; (8009260 <update_main_screen+0xe5c>)
 8009002:	68e0      	ldr	r0, [r4, #12]
 8009004:	2101      	movs	r1, #1
 8009006:	f00b fc31 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[4], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[4], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800900a:	4a95      	ldr	r2, [pc, #596]	; (8009260 <update_main_screen+0xe5c>)
 800900c:	6920      	ldr	r0, [r4, #16]
 800900e:	2100      	movs	r1, #0
 8009010:	f00b fc2c 	bl	801486c <lv_bar_set_style>
 8009014:	4a92      	ldr	r2, [pc, #584]	; (8009260 <update_main_screen+0xe5c>)
 8009016:	6920      	ldr	r0, [r4, #16]
 8009018:	2101      	movs	r1, #1
 800901a:	f00b fc27 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[5], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[5], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800901e:	4a90      	ldr	r2, [pc, #576]	; (8009260 <update_main_screen+0xe5c>)
 8009020:	6960      	ldr	r0, [r4, #20]
 8009022:	2100      	movs	r1, #0
 8009024:	f00b fc22 	bl	801486c <lv_bar_set_style>
 8009028:	4a8d      	ldr	r2, [pc, #564]	; (8009260 <update_main_screen+0xe5c>)
 800902a:	6960      	ldr	r0, [r4, #20]
 800902c:	2101      	movs	r1, #1
 800902e:	f00b fc1d 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[6], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[6], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009032:	4a8b      	ldr	r2, [pc, #556]	; (8009260 <update_main_screen+0xe5c>)
 8009034:	69a0      	ldr	r0, [r4, #24]
 8009036:	2100      	movs	r1, #0
 8009038:	f00b fc18 	bl	801486c <lv_bar_set_style>
 800903c:	4a88      	ldr	r2, [pc, #544]	; (8009260 <update_main_screen+0xe5c>)
 800903e:	69a0      	ldr	r0, [r4, #24]
 8009040:	2101      	movs	r1, #1
 8009042:	f00b fc13 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[7], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[7], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009046:	4a86      	ldr	r2, [pc, #536]	; (8009260 <update_main_screen+0xe5c>)
 8009048:	69e0      	ldr	r0, [r4, #28]
 800904a:	2100      	movs	r1, #0
 800904c:	f00b fc0e 	bl	801486c <lv_bar_set_style>
 8009050:	4a83      	ldr	r2, [pc, #524]	; (8009260 <update_main_screen+0xe5c>)
 8009052:	69e0      	ldr	r0, [r4, #28]
 8009054:	2101      	movs	r1, #1
 8009056:	f00b fc09 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[8], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[8], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800905a:	4a81      	ldr	r2, [pc, #516]	; (8009260 <update_main_screen+0xe5c>)
 800905c:	6a20      	ldr	r0, [r4, #32]
 800905e:	2100      	movs	r1, #0
 8009060:	f00b fc04 	bl	801486c <lv_bar_set_style>
 8009064:	4a7e      	ldr	r2, [pc, #504]	; (8009260 <update_main_screen+0xe5c>)
 8009066:	6a20      	ldr	r0, [r4, #32]
 8009068:	2101      	movs	r1, #1
 800906a:	f00b fbff 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[9], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[9], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800906e:	4a7c      	ldr	r2, [pc, #496]	; (8009260 <update_main_screen+0xe5c>)
 8009070:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009072:	2100      	movs	r1, #0
 8009074:	f00b fbfa 	bl	801486c <lv_bar_set_style>
 8009078:	4a79      	ldr	r2, [pc, #484]	; (8009260 <update_main_screen+0xe5c>)
 800907a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800907c:	2101      	movs	r1, #1
 800907e:	f00b fbf5 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[10], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[10], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009082:	4a77      	ldr	r2, [pc, #476]	; (8009260 <update_main_screen+0xe5c>)
 8009084:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8009086:	2100      	movs	r1, #0
 8009088:	f00b fbf0 	bl	801486c <lv_bar_set_style>
 800908c:	4a74      	ldr	r2, [pc, #464]	; (8009260 <update_main_screen+0xe5c>)
 800908e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8009090:	2101      	movs	r1, #1
 8009092:	f00b fbeb 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[11], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[11], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009096:	4a72      	ldr	r2, [pc, #456]	; (8009260 <update_main_screen+0xe5c>)
 8009098:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800909a:	2100      	movs	r1, #0
 800909c:	f00b fbe6 	bl	801486c <lv_bar_set_style>
 80090a0:	4a6f      	ldr	r2, [pc, #444]	; (8009260 <update_main_screen+0xe5c>)
 80090a2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80090a4:	2101      	movs	r1, #1
 80090a6:	f00b fbe1 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[12], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[12], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80090aa:	4a6d      	ldr	r2, [pc, #436]	; (8009260 <update_main_screen+0xe5c>)
 80090ac:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80090ae:	2100      	movs	r1, #0
 80090b0:	f00b fbdc 	bl	801486c <lv_bar_set_style>
 80090b4:	4a6a      	ldr	r2, [pc, #424]	; (8009260 <update_main_screen+0xe5c>)
 80090b6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80090b8:	2101      	movs	r1, #1
 80090ba:	f00b fbd7 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[13], LV_BAR_STYLE_BG, &style_indic_cy); lv_bar_set_style(bar[13], LV_BAR_STYLE_INDIC, &style_indic_cy);
 80090be:	4a69      	ldr	r2, [pc, #420]	; (8009264 <update_main_screen+0xe60>)
 80090c0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80090c2:	2100      	movs	r1, #0
 80090c4:	f00b fbd2 	bl	801486c <lv_bar_set_style>
 80090c8:	4a66      	ldr	r2, [pc, #408]	; (8009264 <update_main_screen+0xe60>)
 80090ca:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80090cc:	2101      	movs	r1, #1
 80090ce:	f00b fbcd 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[14], LV_BAR_STYLE_BG, &style_indic_am); lv_bar_set_style(bar[14], LV_BAR_STYLE_INDIC, &style_indic_am);
 80090d2:	4a65      	ldr	r2, [pc, #404]	; (8009268 <update_main_screen+0xe64>)
 80090d4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80090d6:	2100      	movs	r1, #0
 80090d8:	f00b fbc8 	bl	801486c <lv_bar_set_style>
 80090dc:	4a62      	ldr	r2, [pc, #392]	; (8009268 <update_main_screen+0xe64>)
 80090de:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80090e0:	2101      	movs	r1, #1
 80090e2:	f00b fbc3 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[15], LV_BAR_STYLE_BG, &style_indic_am); lv_bar_set_style(bar[15], LV_BAR_STYLE_INDIC, &style_indic_am);
 80090e6:	4a60      	ldr	r2, [pc, #384]	; (8009268 <update_main_screen+0xe64>)
 80090e8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80090ea:	2100      	movs	r1, #0
 80090ec:	f00b fbbe 	bl	801486c <lv_bar_set_style>
 80090f0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80090f2:	4a5d      	ldr	r2, [pc, #372]	; (8009268 <update_main_screen+0xe64>)
 80090f4:	2101      	movs	r1, #1
 80090f6:	f00b fbb9 	bl	801486c <lv_bar_set_style>
			bargraph_off(16);
 80090fa:	2010      	movs	r0, #16
 80090fc:	f7ff ba12 	b.w	8008524 <update_main_screen+0x120>
			lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009100:	4c56      	ldr	r4, [pc, #344]	; (800925c <update_main_screen+0xe58>)
 8009102:	4a57      	ldr	r2, [pc, #348]	; (8009260 <update_main_screen+0xe5c>)
 8009104:	6820      	ldr	r0, [r4, #0]
 8009106:	2100      	movs	r1, #0
 8009108:	f00b fbb0 	bl	801486c <lv_bar_set_style>
 800910c:	4a54      	ldr	r2, [pc, #336]	; (8009260 <update_main_screen+0xe5c>)
 800910e:	6820      	ldr	r0, [r4, #0]
 8009110:	2101      	movs	r1, #1
 8009112:	f00b fbab 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[1], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[1], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009116:	4a52      	ldr	r2, [pc, #328]	; (8009260 <update_main_screen+0xe5c>)
 8009118:	6860      	ldr	r0, [r4, #4]
 800911a:	2100      	movs	r1, #0
 800911c:	f00b fba6 	bl	801486c <lv_bar_set_style>
 8009120:	4a4f      	ldr	r2, [pc, #316]	; (8009260 <update_main_screen+0xe5c>)
 8009122:	6860      	ldr	r0, [r4, #4]
 8009124:	2101      	movs	r1, #1
 8009126:	f00b fba1 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[2], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[2], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800912a:	4a4d      	ldr	r2, [pc, #308]	; (8009260 <update_main_screen+0xe5c>)
 800912c:	68a0      	ldr	r0, [r4, #8]
 800912e:	2100      	movs	r1, #0
 8009130:	f00b fb9c 	bl	801486c <lv_bar_set_style>
 8009134:	4a4a      	ldr	r2, [pc, #296]	; (8009260 <update_main_screen+0xe5c>)
 8009136:	68a0      	ldr	r0, [r4, #8]
 8009138:	2101      	movs	r1, #1
 800913a:	f00b fb97 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[3], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[3], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800913e:	4a48      	ldr	r2, [pc, #288]	; (8009260 <update_main_screen+0xe5c>)
 8009140:	68e0      	ldr	r0, [r4, #12]
 8009142:	2100      	movs	r1, #0
 8009144:	f00b fb92 	bl	801486c <lv_bar_set_style>
 8009148:	4a45      	ldr	r2, [pc, #276]	; (8009260 <update_main_screen+0xe5c>)
 800914a:	68e0      	ldr	r0, [r4, #12]
 800914c:	2101      	movs	r1, #1
 800914e:	f00b fb8d 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[4], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[4], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009152:	4a43      	ldr	r2, [pc, #268]	; (8009260 <update_main_screen+0xe5c>)
 8009154:	6920      	ldr	r0, [r4, #16]
 8009156:	2100      	movs	r1, #0
 8009158:	f00b fb88 	bl	801486c <lv_bar_set_style>
 800915c:	4a40      	ldr	r2, [pc, #256]	; (8009260 <update_main_screen+0xe5c>)
 800915e:	6920      	ldr	r0, [r4, #16]
 8009160:	2101      	movs	r1, #1
 8009162:	f00b fb83 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[5], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[5], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009166:	4a3e      	ldr	r2, [pc, #248]	; (8009260 <update_main_screen+0xe5c>)
 8009168:	6960      	ldr	r0, [r4, #20]
 800916a:	2100      	movs	r1, #0
 800916c:	f00b fb7e 	bl	801486c <lv_bar_set_style>
 8009170:	4a3b      	ldr	r2, [pc, #236]	; (8009260 <update_main_screen+0xe5c>)
 8009172:	6960      	ldr	r0, [r4, #20]
 8009174:	2101      	movs	r1, #1
 8009176:	f00b fb79 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[6], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[6], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800917a:	4a39      	ldr	r2, [pc, #228]	; (8009260 <update_main_screen+0xe5c>)
 800917c:	69a0      	ldr	r0, [r4, #24]
 800917e:	2100      	movs	r1, #0
 8009180:	f00b fb74 	bl	801486c <lv_bar_set_style>
 8009184:	4a36      	ldr	r2, [pc, #216]	; (8009260 <update_main_screen+0xe5c>)
 8009186:	69a0      	ldr	r0, [r4, #24]
 8009188:	2101      	movs	r1, #1
 800918a:	f00b fb6f 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[7], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[7], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800918e:	4a34      	ldr	r2, [pc, #208]	; (8009260 <update_main_screen+0xe5c>)
 8009190:	69e0      	ldr	r0, [r4, #28]
 8009192:	2100      	movs	r1, #0
 8009194:	f00b fb6a 	bl	801486c <lv_bar_set_style>
 8009198:	4a31      	ldr	r2, [pc, #196]	; (8009260 <update_main_screen+0xe5c>)
 800919a:	69e0      	ldr	r0, [r4, #28]
 800919c:	2101      	movs	r1, #1
 800919e:	f00b fb65 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[8], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[8], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80091a2:	4a2f      	ldr	r2, [pc, #188]	; (8009260 <update_main_screen+0xe5c>)
 80091a4:	6a20      	ldr	r0, [r4, #32]
 80091a6:	2100      	movs	r1, #0
 80091a8:	f00b fb60 	bl	801486c <lv_bar_set_style>
 80091ac:	4a2c      	ldr	r2, [pc, #176]	; (8009260 <update_main_screen+0xe5c>)
 80091ae:	6a20      	ldr	r0, [r4, #32]
 80091b0:	2101      	movs	r1, #1
 80091b2:	f00b fb5b 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[9], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[9], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80091b6:	4a2a      	ldr	r2, [pc, #168]	; (8009260 <update_main_screen+0xe5c>)
 80091b8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80091ba:	2100      	movs	r1, #0
 80091bc:	f00b fb56 	bl	801486c <lv_bar_set_style>
 80091c0:	4a27      	ldr	r2, [pc, #156]	; (8009260 <update_main_screen+0xe5c>)
 80091c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80091c4:	2101      	movs	r1, #1
 80091c6:	f00b fb51 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[10], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[10], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80091ca:	4a25      	ldr	r2, [pc, #148]	; (8009260 <update_main_screen+0xe5c>)
 80091cc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80091ce:	2100      	movs	r1, #0
 80091d0:	f00b fb4c 	bl	801486c <lv_bar_set_style>
 80091d4:	4a22      	ldr	r2, [pc, #136]	; (8009260 <update_main_screen+0xe5c>)
 80091d6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80091d8:	2101      	movs	r1, #1
 80091da:	f00b fb47 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[11], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[11], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80091de:	4a20      	ldr	r2, [pc, #128]	; (8009260 <update_main_screen+0xe5c>)
 80091e0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80091e2:	2100      	movs	r1, #0
 80091e4:	f00b fb42 	bl	801486c <lv_bar_set_style>
 80091e8:	4a1d      	ldr	r2, [pc, #116]	; (8009260 <update_main_screen+0xe5c>)
 80091ea:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80091ec:	2101      	movs	r1, #1
 80091ee:	f00b fb3d 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[12], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[12], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80091f2:	4a1b      	ldr	r2, [pc, #108]	; (8009260 <update_main_screen+0xe5c>)
 80091f4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80091f6:	2100      	movs	r1, #0
 80091f8:	f00b fb38 	bl	801486c <lv_bar_set_style>
 80091fc:	4a18      	ldr	r2, [pc, #96]	; (8009260 <update_main_screen+0xe5c>)
 80091fe:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8009200:	2101      	movs	r1, #1
 8009202:	f00b fb33 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[13], LV_BAR_STYLE_BG, &style_indic_cy); lv_bar_set_style(bar[13], LV_BAR_STYLE_INDIC, &style_indic_cy);
 8009206:	4a17      	ldr	r2, [pc, #92]	; (8009264 <update_main_screen+0xe60>)
 8009208:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800920a:	2100      	movs	r1, #0
 800920c:	f00b fb2e 	bl	801486c <lv_bar_set_style>
 8009210:	4a14      	ldr	r2, [pc, #80]	; (8009264 <update_main_screen+0xe60>)
 8009212:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8009214:	2101      	movs	r1, #1
 8009216:	f00b fb29 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[14], LV_BAR_STYLE_BG, &style_indic_am); lv_bar_set_style(bar[14], LV_BAR_STYLE_INDIC, &style_indic_am);
 800921a:	4a13      	ldr	r2, [pc, #76]	; (8009268 <update_main_screen+0xe64>)
 800921c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800921e:	2100      	movs	r1, #0
 8009220:	f00b fb24 	bl	801486c <lv_bar_set_style>
 8009224:	4a10      	ldr	r2, [pc, #64]	; (8009268 <update_main_screen+0xe64>)
 8009226:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8009228:	2101      	movs	r1, #1
 800922a:	f00b fb1f 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[15], LV_BAR_STYLE_BG, &style_indic_am); lv_bar_set_style(bar[15], LV_BAR_STYLE_INDIC, &style_indic_am);
 800922e:	4a0e      	ldr	r2, [pc, #56]	; (8009268 <update_main_screen+0xe64>)
 8009230:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8009232:	2100      	movs	r1, #0
 8009234:	f00b fb1a 	bl	801486c <lv_bar_set_style>
 8009238:	4a0b      	ldr	r2, [pc, #44]	; (8009268 <update_main_screen+0xe64>)
 800923a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800923c:	2101      	movs	r1, #1
 800923e:	f00b fb15 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[16], LV_BAR_STYLE_BG, &style_indic_am); lv_bar_set_style(bar[16], LV_BAR_STYLE_INDIC, &style_indic_am);
 8009242:	4a09      	ldr	r2, [pc, #36]	; (8009268 <update_main_screen+0xe64>)
 8009244:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8009246:	2100      	movs	r1, #0
 8009248:	f00b fb10 	bl	801486c <lv_bar_set_style>
 800924c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800924e:	4a06      	ldr	r2, [pc, #24]	; (8009268 <update_main_screen+0xe64>)
 8009250:	2101      	movs	r1, #1
 8009252:	f00b fb0b 	bl	801486c <lv_bar_set_style>
			bargraph_off(17);
 8009256:	2011      	movs	r0, #17
 8009258:	f7ff b964 	b.w	8008524 <update_main_screen+0x120>
 800925c:	20004df8 	.word	0x20004df8
 8009260:	20004f48 	.word	0x20004f48
 8009264:	20004ed0 	.word	0x20004ed0
 8009268:	20004e94 	.word	0x20004e94
			lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800926c:	4c5b      	ldr	r4, [pc, #364]	; (80093dc <update_main_screen+0xfd8>)
 800926e:	4a5c      	ldr	r2, [pc, #368]	; (80093e0 <update_main_screen+0xfdc>)
 8009270:	6820      	ldr	r0, [r4, #0]
 8009272:	2100      	movs	r1, #0
 8009274:	f00b fafa 	bl	801486c <lv_bar_set_style>
 8009278:	4a59      	ldr	r2, [pc, #356]	; (80093e0 <update_main_screen+0xfdc>)
 800927a:	6820      	ldr	r0, [r4, #0]
 800927c:	2101      	movs	r1, #1
 800927e:	f00b faf5 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[1], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[1], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009282:	4a57      	ldr	r2, [pc, #348]	; (80093e0 <update_main_screen+0xfdc>)
 8009284:	6860      	ldr	r0, [r4, #4]
 8009286:	2100      	movs	r1, #0
 8009288:	f00b faf0 	bl	801486c <lv_bar_set_style>
 800928c:	4a54      	ldr	r2, [pc, #336]	; (80093e0 <update_main_screen+0xfdc>)
 800928e:	6860      	ldr	r0, [r4, #4]
 8009290:	2101      	movs	r1, #1
 8009292:	f00b faeb 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[2], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[2], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009296:	4a52      	ldr	r2, [pc, #328]	; (80093e0 <update_main_screen+0xfdc>)
 8009298:	68a0      	ldr	r0, [r4, #8]
 800929a:	2100      	movs	r1, #0
 800929c:	f00b fae6 	bl	801486c <lv_bar_set_style>
 80092a0:	4a4f      	ldr	r2, [pc, #316]	; (80093e0 <update_main_screen+0xfdc>)
 80092a2:	68a0      	ldr	r0, [r4, #8]
 80092a4:	2101      	movs	r1, #1
 80092a6:	f00b fae1 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[3], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[3], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80092aa:	4a4d      	ldr	r2, [pc, #308]	; (80093e0 <update_main_screen+0xfdc>)
 80092ac:	68e0      	ldr	r0, [r4, #12]
 80092ae:	2100      	movs	r1, #0
 80092b0:	f00b fadc 	bl	801486c <lv_bar_set_style>
 80092b4:	4a4a      	ldr	r2, [pc, #296]	; (80093e0 <update_main_screen+0xfdc>)
 80092b6:	68e0      	ldr	r0, [r4, #12]
 80092b8:	2101      	movs	r1, #1
 80092ba:	f00b fad7 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[4], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[4], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80092be:	4a48      	ldr	r2, [pc, #288]	; (80093e0 <update_main_screen+0xfdc>)
 80092c0:	6920      	ldr	r0, [r4, #16]
 80092c2:	2100      	movs	r1, #0
 80092c4:	f00b fad2 	bl	801486c <lv_bar_set_style>
 80092c8:	4a45      	ldr	r2, [pc, #276]	; (80093e0 <update_main_screen+0xfdc>)
 80092ca:	6920      	ldr	r0, [r4, #16]
 80092cc:	2101      	movs	r1, #1
 80092ce:	f00b facd 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[5], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[5], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80092d2:	4a43      	ldr	r2, [pc, #268]	; (80093e0 <update_main_screen+0xfdc>)
 80092d4:	6960      	ldr	r0, [r4, #20]
 80092d6:	2100      	movs	r1, #0
 80092d8:	f00b fac8 	bl	801486c <lv_bar_set_style>
 80092dc:	4a40      	ldr	r2, [pc, #256]	; (80093e0 <update_main_screen+0xfdc>)
 80092de:	6960      	ldr	r0, [r4, #20]
 80092e0:	2101      	movs	r1, #1
 80092e2:	f00b fac3 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[6], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[6], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80092e6:	4a3e      	ldr	r2, [pc, #248]	; (80093e0 <update_main_screen+0xfdc>)
 80092e8:	69a0      	ldr	r0, [r4, #24]
 80092ea:	2100      	movs	r1, #0
 80092ec:	f00b fabe 	bl	801486c <lv_bar_set_style>
 80092f0:	4a3b      	ldr	r2, [pc, #236]	; (80093e0 <update_main_screen+0xfdc>)
 80092f2:	69a0      	ldr	r0, [r4, #24]
 80092f4:	2101      	movs	r1, #1
 80092f6:	f00b fab9 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[7], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[7], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80092fa:	4a39      	ldr	r2, [pc, #228]	; (80093e0 <update_main_screen+0xfdc>)
 80092fc:	69e0      	ldr	r0, [r4, #28]
 80092fe:	2100      	movs	r1, #0
 8009300:	f00b fab4 	bl	801486c <lv_bar_set_style>
 8009304:	4a36      	ldr	r2, [pc, #216]	; (80093e0 <update_main_screen+0xfdc>)
 8009306:	69e0      	ldr	r0, [r4, #28]
 8009308:	2101      	movs	r1, #1
 800930a:	f00b faaf 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[8], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[8], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800930e:	4a34      	ldr	r2, [pc, #208]	; (80093e0 <update_main_screen+0xfdc>)
 8009310:	6a20      	ldr	r0, [r4, #32]
 8009312:	2100      	movs	r1, #0
 8009314:	f00b faaa 	bl	801486c <lv_bar_set_style>
 8009318:	4a31      	ldr	r2, [pc, #196]	; (80093e0 <update_main_screen+0xfdc>)
 800931a:	6a20      	ldr	r0, [r4, #32]
 800931c:	2101      	movs	r1, #1
 800931e:	f00b faa5 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[9], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[9], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009322:	4a2f      	ldr	r2, [pc, #188]	; (80093e0 <update_main_screen+0xfdc>)
 8009324:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009326:	2100      	movs	r1, #0
 8009328:	f00b faa0 	bl	801486c <lv_bar_set_style>
 800932c:	4a2c      	ldr	r2, [pc, #176]	; (80093e0 <update_main_screen+0xfdc>)
 800932e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009330:	2101      	movs	r1, #1
 8009332:	f00b fa9b 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[10], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[10], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009336:	4a2a      	ldr	r2, [pc, #168]	; (80093e0 <update_main_screen+0xfdc>)
 8009338:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800933a:	2100      	movs	r1, #0
 800933c:	f00b fa96 	bl	801486c <lv_bar_set_style>
 8009340:	4a27      	ldr	r2, [pc, #156]	; (80093e0 <update_main_screen+0xfdc>)
 8009342:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8009344:	2101      	movs	r1, #1
 8009346:	f00b fa91 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[11], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[11], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800934a:	4a25      	ldr	r2, [pc, #148]	; (80093e0 <update_main_screen+0xfdc>)
 800934c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800934e:	2100      	movs	r1, #0
 8009350:	f00b fa8c 	bl	801486c <lv_bar_set_style>
 8009354:	4a22      	ldr	r2, [pc, #136]	; (80093e0 <update_main_screen+0xfdc>)
 8009356:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009358:	2101      	movs	r1, #1
 800935a:	f00b fa87 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[12], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[12], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800935e:	4a20      	ldr	r2, [pc, #128]	; (80093e0 <update_main_screen+0xfdc>)
 8009360:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8009362:	2100      	movs	r1, #0
 8009364:	f00b fa82 	bl	801486c <lv_bar_set_style>
 8009368:	4a1d      	ldr	r2, [pc, #116]	; (80093e0 <update_main_screen+0xfdc>)
 800936a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800936c:	2101      	movs	r1, #1
 800936e:	f00b fa7d 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[13], LV_BAR_STYLE_BG, &style_indic_cy); lv_bar_set_style(bar[13], LV_BAR_STYLE_INDIC, &style_indic_cy);
 8009372:	4a1c      	ldr	r2, [pc, #112]	; (80093e4 <update_main_screen+0xfe0>)
 8009374:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8009376:	2100      	movs	r1, #0
 8009378:	f00b fa78 	bl	801486c <lv_bar_set_style>
 800937c:	4a19      	ldr	r2, [pc, #100]	; (80093e4 <update_main_screen+0xfe0>)
 800937e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8009380:	2101      	movs	r1, #1
 8009382:	f00b fa73 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[14], LV_BAR_STYLE_BG, &style_indic_am); lv_bar_set_style(bar[14], LV_BAR_STYLE_INDIC, &style_indic_am);
 8009386:	4a18      	ldr	r2, [pc, #96]	; (80093e8 <update_main_screen+0xfe4>)
 8009388:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800938a:	2100      	movs	r1, #0
 800938c:	f00b fa6e 	bl	801486c <lv_bar_set_style>
 8009390:	4a15      	ldr	r2, [pc, #84]	; (80093e8 <update_main_screen+0xfe4>)
 8009392:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8009394:	2101      	movs	r1, #1
 8009396:	f00b fa69 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[15], LV_BAR_STYLE_BG, &style_indic_am); lv_bar_set_style(bar[15], LV_BAR_STYLE_INDIC, &style_indic_am);
 800939a:	4a13      	ldr	r2, [pc, #76]	; (80093e8 <update_main_screen+0xfe4>)
 800939c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800939e:	2100      	movs	r1, #0
 80093a0:	f00b fa64 	bl	801486c <lv_bar_set_style>
 80093a4:	4a10      	ldr	r2, [pc, #64]	; (80093e8 <update_main_screen+0xfe4>)
 80093a6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80093a8:	2101      	movs	r1, #1
 80093aa:	f00b fa5f 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[16], LV_BAR_STYLE_BG, &style_indic_am); lv_bar_set_style(bar[16], LV_BAR_STYLE_INDIC, &style_indic_am);
 80093ae:	4a0e      	ldr	r2, [pc, #56]	; (80093e8 <update_main_screen+0xfe4>)
 80093b0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80093b2:	2100      	movs	r1, #0
 80093b4:	f00b fa5a 	bl	801486c <lv_bar_set_style>
 80093b8:	4a0b      	ldr	r2, [pc, #44]	; (80093e8 <update_main_screen+0xfe4>)
 80093ba:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80093bc:	2101      	movs	r1, #1
 80093be:	f00b fa55 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[17], LV_BAR_STYLE_BG, &style_indic_vm); lv_bar_set_style(bar[17], LV_BAR_STYLE_INDIC, &style_indic_vm);
 80093c2:	4a0a      	ldr	r2, [pc, #40]	; (80093ec <update_main_screen+0xfe8>)
 80093c4:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80093c6:	2100      	movs	r1, #0
 80093c8:	f00b fa50 	bl	801486c <lv_bar_set_style>
 80093cc:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80093ce:	4a07      	ldr	r2, [pc, #28]	; (80093ec <update_main_screen+0xfe8>)
 80093d0:	2101      	movs	r1, #1
 80093d2:	f00b fa4b 	bl	801486c <lv_bar_set_style>
			bargraph_off(18);
 80093d6:	2012      	movs	r0, #18
 80093d8:	f7ff b8a4 	b.w	8008524 <update_main_screen+0x120>
 80093dc:	20004df8 	.word	0x20004df8
 80093e0:	20004f48 	.word	0x20004f48
 80093e4:	20004ed0 	.word	0x20004ed0
 80093e8:	20004e94 	.word	0x20004e94
 80093ec:	20004f84 	.word	0x20004f84
			lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80093f0:	4c60      	ldr	r4, [pc, #384]	; (8009574 <update_main_screen+0x1170>)
 80093f2:	4a61      	ldr	r2, [pc, #388]	; (8009578 <update_main_screen+0x1174>)
 80093f4:	6820      	ldr	r0, [r4, #0]
 80093f6:	2100      	movs	r1, #0
 80093f8:	f00b fa38 	bl	801486c <lv_bar_set_style>
 80093fc:	4a5e      	ldr	r2, [pc, #376]	; (8009578 <update_main_screen+0x1174>)
 80093fe:	6820      	ldr	r0, [r4, #0]
 8009400:	2101      	movs	r1, #1
 8009402:	f00b fa33 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[1], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[1], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009406:	4a5c      	ldr	r2, [pc, #368]	; (8009578 <update_main_screen+0x1174>)
 8009408:	6860      	ldr	r0, [r4, #4]
 800940a:	2100      	movs	r1, #0
 800940c:	f00b fa2e 	bl	801486c <lv_bar_set_style>
 8009410:	4a59      	ldr	r2, [pc, #356]	; (8009578 <update_main_screen+0x1174>)
 8009412:	6860      	ldr	r0, [r4, #4]
 8009414:	2101      	movs	r1, #1
 8009416:	f00b fa29 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[2], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[2], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800941a:	4a57      	ldr	r2, [pc, #348]	; (8009578 <update_main_screen+0x1174>)
 800941c:	68a0      	ldr	r0, [r4, #8]
 800941e:	2100      	movs	r1, #0
 8009420:	f00b fa24 	bl	801486c <lv_bar_set_style>
 8009424:	4a54      	ldr	r2, [pc, #336]	; (8009578 <update_main_screen+0x1174>)
 8009426:	68a0      	ldr	r0, [r4, #8]
 8009428:	2101      	movs	r1, #1
 800942a:	f00b fa1f 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[3], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[3], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800942e:	4a52      	ldr	r2, [pc, #328]	; (8009578 <update_main_screen+0x1174>)
 8009430:	68e0      	ldr	r0, [r4, #12]
 8009432:	2100      	movs	r1, #0
 8009434:	f00b fa1a 	bl	801486c <lv_bar_set_style>
 8009438:	4a4f      	ldr	r2, [pc, #316]	; (8009578 <update_main_screen+0x1174>)
 800943a:	68e0      	ldr	r0, [r4, #12]
 800943c:	2101      	movs	r1, #1
 800943e:	f00b fa15 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[4], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[4], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009442:	4a4d      	ldr	r2, [pc, #308]	; (8009578 <update_main_screen+0x1174>)
 8009444:	6920      	ldr	r0, [r4, #16]
 8009446:	2100      	movs	r1, #0
 8009448:	f00b fa10 	bl	801486c <lv_bar_set_style>
 800944c:	4a4a      	ldr	r2, [pc, #296]	; (8009578 <update_main_screen+0x1174>)
 800944e:	6920      	ldr	r0, [r4, #16]
 8009450:	2101      	movs	r1, #1
 8009452:	f00b fa0b 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[5], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[5], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009456:	4a48      	ldr	r2, [pc, #288]	; (8009578 <update_main_screen+0x1174>)
 8009458:	6960      	ldr	r0, [r4, #20]
 800945a:	2100      	movs	r1, #0
 800945c:	f00b fa06 	bl	801486c <lv_bar_set_style>
 8009460:	4a45      	ldr	r2, [pc, #276]	; (8009578 <update_main_screen+0x1174>)
 8009462:	6960      	ldr	r0, [r4, #20]
 8009464:	2101      	movs	r1, #1
 8009466:	f00b fa01 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[6], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[6], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800946a:	4a43      	ldr	r2, [pc, #268]	; (8009578 <update_main_screen+0x1174>)
 800946c:	69a0      	ldr	r0, [r4, #24]
 800946e:	2100      	movs	r1, #0
 8009470:	f00b f9fc 	bl	801486c <lv_bar_set_style>
 8009474:	4a40      	ldr	r2, [pc, #256]	; (8009578 <update_main_screen+0x1174>)
 8009476:	69a0      	ldr	r0, [r4, #24]
 8009478:	2101      	movs	r1, #1
 800947a:	f00b f9f7 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[7], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[7], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800947e:	4a3e      	ldr	r2, [pc, #248]	; (8009578 <update_main_screen+0x1174>)
 8009480:	69e0      	ldr	r0, [r4, #28]
 8009482:	2100      	movs	r1, #0
 8009484:	f00b f9f2 	bl	801486c <lv_bar_set_style>
 8009488:	4a3b      	ldr	r2, [pc, #236]	; (8009578 <update_main_screen+0x1174>)
 800948a:	69e0      	ldr	r0, [r4, #28]
 800948c:	2101      	movs	r1, #1
 800948e:	f00b f9ed 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[8], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[8], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009492:	4a39      	ldr	r2, [pc, #228]	; (8009578 <update_main_screen+0x1174>)
 8009494:	6a20      	ldr	r0, [r4, #32]
 8009496:	2100      	movs	r1, #0
 8009498:	f00b f9e8 	bl	801486c <lv_bar_set_style>
 800949c:	4a36      	ldr	r2, [pc, #216]	; (8009578 <update_main_screen+0x1174>)
 800949e:	6a20      	ldr	r0, [r4, #32]
 80094a0:	2101      	movs	r1, #1
 80094a2:	f00b f9e3 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[9], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[9], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80094a6:	4a34      	ldr	r2, [pc, #208]	; (8009578 <update_main_screen+0x1174>)
 80094a8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80094aa:	2100      	movs	r1, #0
 80094ac:	f00b f9de 	bl	801486c <lv_bar_set_style>
 80094b0:	4a31      	ldr	r2, [pc, #196]	; (8009578 <update_main_screen+0x1174>)
 80094b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80094b4:	2101      	movs	r1, #1
 80094b6:	f00b f9d9 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[10], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[10], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80094ba:	4a2f      	ldr	r2, [pc, #188]	; (8009578 <update_main_screen+0x1174>)
 80094bc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80094be:	2100      	movs	r1, #0
 80094c0:	f00b f9d4 	bl	801486c <lv_bar_set_style>
 80094c4:	4a2c      	ldr	r2, [pc, #176]	; (8009578 <update_main_screen+0x1174>)
 80094c6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80094c8:	2101      	movs	r1, #1
 80094ca:	f00b f9cf 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[11], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[11], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80094ce:	4a2a      	ldr	r2, [pc, #168]	; (8009578 <update_main_screen+0x1174>)
 80094d0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80094d2:	2100      	movs	r1, #0
 80094d4:	f00b f9ca 	bl	801486c <lv_bar_set_style>
 80094d8:	4a27      	ldr	r2, [pc, #156]	; (8009578 <update_main_screen+0x1174>)
 80094da:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80094dc:	2101      	movs	r1, #1
 80094de:	f00b f9c5 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[12], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[12], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80094e2:	4a25      	ldr	r2, [pc, #148]	; (8009578 <update_main_screen+0x1174>)
 80094e4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80094e6:	2100      	movs	r1, #0
 80094e8:	f00b f9c0 	bl	801486c <lv_bar_set_style>
 80094ec:	4a22      	ldr	r2, [pc, #136]	; (8009578 <update_main_screen+0x1174>)
 80094ee:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80094f0:	2101      	movs	r1, #1
 80094f2:	f00b f9bb 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[13], LV_BAR_STYLE_BG, &style_indic_cy); lv_bar_set_style(bar[13], LV_BAR_STYLE_INDIC, &style_indic_cy);
 80094f6:	4a21      	ldr	r2, [pc, #132]	; (800957c <update_main_screen+0x1178>)
 80094f8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80094fa:	2100      	movs	r1, #0
 80094fc:	f00b f9b6 	bl	801486c <lv_bar_set_style>
 8009500:	4a1e      	ldr	r2, [pc, #120]	; (800957c <update_main_screen+0x1178>)
 8009502:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8009504:	2101      	movs	r1, #1
 8009506:	f00b f9b1 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[14], LV_BAR_STYLE_BG, &style_indic_am); lv_bar_set_style(bar[14], LV_BAR_STYLE_INDIC, &style_indic_am);
 800950a:	4a1d      	ldr	r2, [pc, #116]	; (8009580 <update_main_screen+0x117c>)
 800950c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800950e:	2100      	movs	r1, #0
 8009510:	f00b f9ac 	bl	801486c <lv_bar_set_style>
 8009514:	4a1a      	ldr	r2, [pc, #104]	; (8009580 <update_main_screen+0x117c>)
 8009516:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8009518:	2101      	movs	r1, #1
 800951a:	f00b f9a7 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[15], LV_BAR_STYLE_BG, &style_indic_am); lv_bar_set_style(bar[15], LV_BAR_STYLE_INDIC, &style_indic_am);
 800951e:	4a18      	ldr	r2, [pc, #96]	; (8009580 <update_main_screen+0x117c>)
 8009520:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8009522:	2100      	movs	r1, #0
 8009524:	f00b f9a2 	bl	801486c <lv_bar_set_style>
 8009528:	4a15      	ldr	r2, [pc, #84]	; (8009580 <update_main_screen+0x117c>)
 800952a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800952c:	2101      	movs	r1, #1
 800952e:	f00b f99d 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[16], LV_BAR_STYLE_BG, &style_indic_am); lv_bar_set_style(bar[16], LV_BAR_STYLE_INDIC, &style_indic_am);
 8009532:	4a13      	ldr	r2, [pc, #76]	; (8009580 <update_main_screen+0x117c>)
 8009534:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8009536:	2100      	movs	r1, #0
 8009538:	f00b f998 	bl	801486c <lv_bar_set_style>
 800953c:	4a10      	ldr	r2, [pc, #64]	; (8009580 <update_main_screen+0x117c>)
 800953e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8009540:	2101      	movs	r1, #1
 8009542:	f00b f993 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[17], LV_BAR_STYLE_BG, &style_indic_vm); lv_bar_set_style(bar[17], LV_BAR_STYLE_INDIC, &style_indic_vm);
 8009546:	4a0f      	ldr	r2, [pc, #60]	; (8009584 <update_main_screen+0x1180>)
 8009548:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800954a:	2100      	movs	r1, #0
 800954c:	f00b f98e 	bl	801486c <lv_bar_set_style>
 8009550:	4a0c      	ldr	r2, [pc, #48]	; (8009584 <update_main_screen+0x1180>)
 8009552:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8009554:	2101      	movs	r1, #1
 8009556:	f00b f989 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[18], LV_BAR_STYLE_BG, &style_indic_vm); lv_bar_set_style(bar[18], LV_BAR_STYLE_INDIC, &style_indic_vm);
 800955a:	4a0a      	ldr	r2, [pc, #40]	; (8009584 <update_main_screen+0x1180>)
 800955c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800955e:	2100      	movs	r1, #0
 8009560:	f00b f984 	bl	801486c <lv_bar_set_style>
 8009564:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8009566:	4a07      	ldr	r2, [pc, #28]	; (8009584 <update_main_screen+0x1180>)
 8009568:	2101      	movs	r1, #1
 800956a:	f00b f97f 	bl	801486c <lv_bar_set_style>
			bargraph_off(19);
 800956e:	2013      	movs	r0, #19
 8009570:	f7fe bfd8 	b.w	8008524 <update_main_screen+0x120>
 8009574:	20004df8 	.word	0x20004df8
 8009578:	20004f48 	.word	0x20004f48
 800957c:	20004ed0 	.word	0x20004ed0
 8009580:	20004e94 	.word	0x20004e94
 8009584:	20004f84 	.word	0x20004f84
			lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009588:	4c68      	ldr	r4, [pc, #416]	; (800972c <update_main_screen+0x1328>)
 800958a:	4a69      	ldr	r2, [pc, #420]	; (8009730 <update_main_screen+0x132c>)
 800958c:	6820      	ldr	r0, [r4, #0]
 800958e:	2100      	movs	r1, #0
 8009590:	f00b f96c 	bl	801486c <lv_bar_set_style>
 8009594:	6820      	ldr	r0, [r4, #0]
 8009596:	4a66      	ldr	r2, [pc, #408]	; (8009730 <update_main_screen+0x132c>)
 8009598:	2101      	movs	r1, #1
 800959a:	f00b f967 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[1], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[1], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800959e:	6860      	ldr	r0, [r4, #4]
 80095a0:	4a63      	ldr	r2, [pc, #396]	; (8009730 <update_main_screen+0x132c>)
 80095a2:	2100      	movs	r1, #0
 80095a4:	f00b f962 	bl	801486c <lv_bar_set_style>
 80095a8:	6860      	ldr	r0, [r4, #4]
 80095aa:	4a61      	ldr	r2, [pc, #388]	; (8009730 <update_main_screen+0x132c>)
 80095ac:	2101      	movs	r1, #1
 80095ae:	f00b f95d 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[2], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[2], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80095b2:	68a0      	ldr	r0, [r4, #8]
 80095b4:	4a5e      	ldr	r2, [pc, #376]	; (8009730 <update_main_screen+0x132c>)
 80095b6:	2100      	movs	r1, #0
 80095b8:	f00b f958 	bl	801486c <lv_bar_set_style>
 80095bc:	68a0      	ldr	r0, [r4, #8]
 80095be:	4a5c      	ldr	r2, [pc, #368]	; (8009730 <update_main_screen+0x132c>)
 80095c0:	2101      	movs	r1, #1
 80095c2:	f00b f953 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[3], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[3], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80095c6:	68e0      	ldr	r0, [r4, #12]
 80095c8:	4a59      	ldr	r2, [pc, #356]	; (8009730 <update_main_screen+0x132c>)
 80095ca:	2100      	movs	r1, #0
 80095cc:	f00b f94e 	bl	801486c <lv_bar_set_style>
 80095d0:	68e0      	ldr	r0, [r4, #12]
 80095d2:	4a57      	ldr	r2, [pc, #348]	; (8009730 <update_main_screen+0x132c>)
 80095d4:	2101      	movs	r1, #1
 80095d6:	f00b f949 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[4], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[4], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80095da:	6920      	ldr	r0, [r4, #16]
 80095dc:	4a54      	ldr	r2, [pc, #336]	; (8009730 <update_main_screen+0x132c>)
 80095de:	2100      	movs	r1, #0
 80095e0:	f00b f944 	bl	801486c <lv_bar_set_style>
 80095e4:	6920      	ldr	r0, [r4, #16]
 80095e6:	4a52      	ldr	r2, [pc, #328]	; (8009730 <update_main_screen+0x132c>)
 80095e8:	2101      	movs	r1, #1
 80095ea:	f00b f93f 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[5], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[5], LV_BAR_STYLE_INDIC, &style_indic_vd);
 80095ee:	6960      	ldr	r0, [r4, #20]
 80095f0:	4a4f      	ldr	r2, [pc, #316]	; (8009730 <update_main_screen+0x132c>)
 80095f2:	2100      	movs	r1, #0
 80095f4:	f00b f93a 	bl	801486c <lv_bar_set_style>
 80095f8:	6960      	ldr	r0, [r4, #20]
 80095fa:	4a4d      	ldr	r2, [pc, #308]	; (8009730 <update_main_screen+0x132c>)
 80095fc:	2101      	movs	r1, #1
 80095fe:	f00b f935 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[6], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[6], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009602:	69a0      	ldr	r0, [r4, #24]
 8009604:	4a4a      	ldr	r2, [pc, #296]	; (8009730 <update_main_screen+0x132c>)
 8009606:	2100      	movs	r1, #0
 8009608:	f00b f930 	bl	801486c <lv_bar_set_style>
 800960c:	69a0      	ldr	r0, [r4, #24]
 800960e:	4a48      	ldr	r2, [pc, #288]	; (8009730 <update_main_screen+0x132c>)
 8009610:	2101      	movs	r1, #1
 8009612:	f00b f92b 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[7], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[7], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009616:	69e0      	ldr	r0, [r4, #28]
 8009618:	4a45      	ldr	r2, [pc, #276]	; (8009730 <update_main_screen+0x132c>)
 800961a:	2100      	movs	r1, #0
 800961c:	f00b f926 	bl	801486c <lv_bar_set_style>
 8009620:	69e0      	ldr	r0, [r4, #28]
 8009622:	4a43      	ldr	r2, [pc, #268]	; (8009730 <update_main_screen+0x132c>)
 8009624:	2101      	movs	r1, #1
 8009626:	f00b f921 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[8], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[8], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800962a:	6a20      	ldr	r0, [r4, #32]
 800962c:	4a40      	ldr	r2, [pc, #256]	; (8009730 <update_main_screen+0x132c>)
 800962e:	2100      	movs	r1, #0
 8009630:	f00b f91c 	bl	801486c <lv_bar_set_style>
 8009634:	6a20      	ldr	r0, [r4, #32]
 8009636:	4a3e      	ldr	r2, [pc, #248]	; (8009730 <update_main_screen+0x132c>)
 8009638:	2101      	movs	r1, #1
 800963a:	f00b f917 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[9], LV_BAR_STYLE_BG, &style_indic_vd);	lv_bar_set_style(bar[9], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800963e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009640:	4a3b      	ldr	r2, [pc, #236]	; (8009730 <update_main_screen+0x132c>)
 8009642:	2100      	movs	r1, #0
 8009644:	f00b f912 	bl	801486c <lv_bar_set_style>
 8009648:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800964a:	4a39      	ldr	r2, [pc, #228]	; (8009730 <update_main_screen+0x132c>)
 800964c:	2101      	movs	r1, #1
 800964e:	f00b f90d 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[10], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[10], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009652:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8009654:	4a36      	ldr	r2, [pc, #216]	; (8009730 <update_main_screen+0x132c>)
 8009656:	2100      	movs	r1, #0
 8009658:	f00b f908 	bl	801486c <lv_bar_set_style>
 800965c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800965e:	4a34      	ldr	r2, [pc, #208]	; (8009730 <update_main_screen+0x132c>)
 8009660:	2101      	movs	r1, #1
 8009662:	f00b f903 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[11], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[11], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009666:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009668:	4a31      	ldr	r2, [pc, #196]	; (8009730 <update_main_screen+0x132c>)
 800966a:	2100      	movs	r1, #0
 800966c:	f00b f8fe 	bl	801486c <lv_bar_set_style>
 8009670:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009672:	4a2f      	ldr	r2, [pc, #188]	; (8009730 <update_main_screen+0x132c>)
 8009674:	2101      	movs	r1, #1
 8009676:	f00b f8f9 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[12], LV_BAR_STYLE_BG, &style_indic_vd); lv_bar_set_style(bar[12], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800967a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800967c:	4a2c      	ldr	r2, [pc, #176]	; (8009730 <update_main_screen+0x132c>)
 800967e:	2100      	movs	r1, #0
 8009680:	f00b f8f4 	bl	801486c <lv_bar_set_style>
 8009684:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8009686:	4a2a      	ldr	r2, [pc, #168]	; (8009730 <update_main_screen+0x132c>)
 8009688:	2101      	movs	r1, #1
 800968a:	f00b f8ef 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[13], LV_BAR_STYLE_BG, &style_indic_cy); lv_bar_set_style(bar[13], LV_BAR_STYLE_INDIC, &style_indic_cy);
 800968e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8009690:	4a28      	ldr	r2, [pc, #160]	; (8009734 <update_main_screen+0x1330>)
 8009692:	2100      	movs	r1, #0
 8009694:	f00b f8ea 	bl	801486c <lv_bar_set_style>
 8009698:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800969a:	4a26      	ldr	r2, [pc, #152]	; (8009734 <update_main_screen+0x1330>)
 800969c:	2101      	movs	r1, #1
 800969e:	f00b f8e5 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[14], LV_BAR_STYLE_BG, &style_indic_am); lv_bar_set_style(bar[14], LV_BAR_STYLE_INDIC, &style_indic_am);
 80096a2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80096a4:	4a24      	ldr	r2, [pc, #144]	; (8009738 <update_main_screen+0x1334>)
 80096a6:	2100      	movs	r1, #0
 80096a8:	f00b f8e0 	bl	801486c <lv_bar_set_style>
 80096ac:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80096ae:	4a22      	ldr	r2, [pc, #136]	; (8009738 <update_main_screen+0x1334>)
 80096b0:	2101      	movs	r1, #1
 80096b2:	f00b f8db 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[15], LV_BAR_STYLE_BG, &style_indic_am); lv_bar_set_style(bar[15], LV_BAR_STYLE_INDIC, &style_indic_am);
 80096b6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80096b8:	4a1f      	ldr	r2, [pc, #124]	; (8009738 <update_main_screen+0x1334>)
 80096ba:	2100      	movs	r1, #0
 80096bc:	f00b f8d6 	bl	801486c <lv_bar_set_style>
 80096c0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80096c2:	4a1d      	ldr	r2, [pc, #116]	; (8009738 <update_main_screen+0x1334>)
 80096c4:	2101      	movs	r1, #1
 80096c6:	f00b f8d1 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[16], LV_BAR_STYLE_BG, &style_indic_am); lv_bar_set_style(bar[16], LV_BAR_STYLE_INDIC, &style_indic_am);
 80096ca:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80096cc:	4a1a      	ldr	r2, [pc, #104]	; (8009738 <update_main_screen+0x1334>)
 80096ce:	2100      	movs	r1, #0
 80096d0:	f00b f8cc 	bl	801486c <lv_bar_set_style>
 80096d4:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80096d6:	4a18      	ldr	r2, [pc, #96]	; (8009738 <update_main_screen+0x1334>)
 80096d8:	2101      	movs	r1, #1
 80096da:	f00b f8c7 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[17], LV_BAR_STYLE_BG, &style_indic_vm); lv_bar_set_style(bar[17], LV_BAR_STYLE_INDIC, &style_indic_vm);
 80096de:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80096e0:	4a16      	ldr	r2, [pc, #88]	; (800973c <update_main_screen+0x1338>)
 80096e2:	2100      	movs	r1, #0
 80096e4:	f00b f8c2 	bl	801486c <lv_bar_set_style>
 80096e8:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80096ea:	4a14      	ldr	r2, [pc, #80]	; (800973c <update_main_screen+0x1338>)
 80096ec:	2101      	movs	r1, #1
 80096ee:	f00b f8bd 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[18], LV_BAR_STYLE_BG, &style_indic_vm); lv_bar_set_style(bar[18], LV_BAR_STYLE_INDIC, &style_indic_vm);
 80096f2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80096f4:	4a11      	ldr	r2, [pc, #68]	; (800973c <update_main_screen+0x1338>)
 80096f6:	2100      	movs	r1, #0
 80096f8:	f00b f8b8 	bl	801486c <lv_bar_set_style>
 80096fc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80096fe:	4a0f      	ldr	r2, [pc, #60]	; (800973c <update_main_screen+0x1338>)
 8009700:	2101      	movs	r1, #1
 8009702:	f00b f8b3 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar[19], LV_BAR_STYLE_BG, &style_indic_vm); lv_bar_set_style(bar[19], LV_BAR_STYLE_INDIC, &style_indic_vm);
 8009706:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8009708:	4a0c      	ldr	r2, [pc, #48]	; (800973c <update_main_screen+0x1338>)
 800970a:	2100      	movs	r1, #0
 800970c:	f00b f8ae 	bl	801486c <lv_bar_set_style>
 8009710:	4a0a      	ldr	r2, [pc, #40]	; (800973c <update_main_screen+0x1338>)
 8009712:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8009714:	2101      	movs	r1, #1
 8009716:	f00b f8a9 	bl	801486c <lv_bar_set_style>
 800971a:	f7fe bf05 	b.w	8008528 <update_main_screen+0x124>
		}
	}
	else {
		mpx--;
 800971e:	682b      	ldr	r3, [r5, #0]
 8009720:	3b01      	subs	r3, #1
 8009722:	602b      	str	r3, [r5, #0]
		if(mpx == 0) {
 8009724:	b903      	cbnz	r3, 8009728 <update_main_screen+0x1324>
			sent_hor = 0;
 8009726:	7013      	strb	r3, [r2, #0]
 8009728:	bd38      	pop	{r3, r4, r5, pc}
 800972a:	bf00      	nop
 800972c:	20004df8 	.word	0x20004df8
 8009730:	20004f48 	.word	0x20004f48
 8009734:	20004ed0 	.word	0x20004ed0
 8009738:	20004e94 	.word	0x20004e94
 800973c:	20004f84 	.word	0x20004f84

08009740 <btn_audio>:
	}
}

static void btn_audio(lv_obj_t * btn, lv_event_t event)
{
	if(event == LV_EVENT_RELEASED) {
 8009740:	2907      	cmp	r1, #7
{
 8009742:	b507      	push	{r0, r1, r2, lr}
	if(event == LV_EVENT_RELEASED) {
 8009744:	d113      	bne.n	800976e <btn_audio+0x2e>
		uint32_t id = lv_obj_get_user_data(btn);
 8009746:	f005 fc84 	bl	800f052 <lv_obj_get_user_data>
		//printf("Button Audio %d Released\n" , id);
		switch(id) {
 800974a:	2803      	cmp	r0, #3
 800974c:	d80f      	bhi.n	800976e <btn_audio+0x2e>
 800974e:	e8df f000 	tbb	[pc, r0]
 8009752:	1102      	.short	0x1102
 8009754:	271c      	.short	0x271c
			case 0:
				lv_obj_align(bar[1], NULL, LV_ALIGN_IN_TOP_LEFT, 131, 52);
 8009756:	2334      	movs	r3, #52	; 0x34
 8009758:	4817      	ldr	r0, [pc, #92]	; (80097b8 <btn_audio+0x78>)
 800975a:	9300      	str	r3, [sp, #0]
 800975c:	2201      	movs	r2, #1
 800975e:	2383      	movs	r3, #131	; 0x83
 8009760:	2100      	movs	r1, #0
 8009762:	6840      	ldr	r0, [r0, #4]
 8009764:	f004 feb8 	bl	800e4d8 <lv_obj_align>
				Cfg_Audio = 0;
 8009768:	2200      	movs	r2, #0
				lv_obj_align(bar[1], NULL, LV_ALIGN_IN_TOP_LEFT, 132, 92);
				Cfg_Audio = 2;
				break;
			case 3:
				lv_obj_align(bar[1], NULL, LV_ALIGN_IN_TOP_LEFT, 132, 111);
				Cfg_Audio = 3;
 800976a:	4b14      	ldr	r3, [pc, #80]	; (80097bc <btn_audio+0x7c>)
 800976c:	701a      	strb	r2, [r3, #0]
				break;
		}
		//
		//printf("Cfg_Audio: %d\n", Cfg_Audio);
	}
}
 800976e:	b003      	add	sp, #12
 8009770:	f85d fb04 	ldr.w	pc, [sp], #4
				lv_obj_align(bar[1], NULL, LV_ALIGN_IN_TOP_LEFT, 132, 72);
 8009774:	2348      	movs	r3, #72	; 0x48
 8009776:	4810      	ldr	r0, [pc, #64]	; (80097b8 <btn_audio+0x78>)
 8009778:	9300      	str	r3, [sp, #0]
 800977a:	2201      	movs	r2, #1
 800977c:	2384      	movs	r3, #132	; 0x84
 800977e:	2100      	movs	r1, #0
 8009780:	6840      	ldr	r0, [r0, #4]
 8009782:	f004 fea9 	bl	800e4d8 <lv_obj_align>
				Cfg_Audio = 1;
 8009786:	2201      	movs	r2, #1
 8009788:	e7ef      	b.n	800976a <btn_audio+0x2a>
				lv_obj_align(bar[1], NULL, LV_ALIGN_IN_TOP_LEFT, 132, 92);
 800978a:	235c      	movs	r3, #92	; 0x5c
 800978c:	480a      	ldr	r0, [pc, #40]	; (80097b8 <btn_audio+0x78>)
 800978e:	9300      	str	r3, [sp, #0]
 8009790:	2201      	movs	r2, #1
 8009792:	2384      	movs	r3, #132	; 0x84
 8009794:	2100      	movs	r1, #0
 8009796:	6840      	ldr	r0, [r0, #4]
 8009798:	f004 fe9e 	bl	800e4d8 <lv_obj_align>
				Cfg_Audio = 2;
 800979c:	2202      	movs	r2, #2
 800979e:	e7e4      	b.n	800976a <btn_audio+0x2a>
				lv_obj_align(bar[1], NULL, LV_ALIGN_IN_TOP_LEFT, 132, 111);
 80097a0:	236f      	movs	r3, #111	; 0x6f
 80097a2:	4805      	ldr	r0, [pc, #20]	; (80097b8 <btn_audio+0x78>)
 80097a4:	9300      	str	r3, [sp, #0]
 80097a6:	2201      	movs	r2, #1
 80097a8:	2384      	movs	r3, #132	; 0x84
 80097aa:	2100      	movs	r1, #0
 80097ac:	6840      	ldr	r0, [r0, #4]
 80097ae:	f004 fe93 	bl	800e4d8 <lv_obj_align>
				Cfg_Audio = 3;
 80097b2:	2203      	movs	r2, #3
 80097b4:	e7d9      	b.n	800976a <btn_audio+0x2a>
 80097b6:	bf00      	nop
 80097b8:	20005148 	.word	0x20005148
 80097bc:	200033c2 	.word	0x200033c2

080097c0 <btn_stereo>:
	if(event == LV_EVENT_RELEASED) {
 80097c0:	2907      	cmp	r1, #7
{
 80097c2:	b507      	push	{r0, r1, r2, lr}
	if(event == LV_EVENT_RELEASED) {
 80097c4:	d10e      	bne.n	80097e4 <btn_stereo+0x24>
		uint32_t id = lv_obj_get_user_data(btn);
 80097c6:	f005 fc44 	bl	800f052 <lv_obj_get_user_data>
		if(id == 0) {
 80097ca:	4601      	mov	r1, r0
 80097cc:	b968      	cbnz	r0, 80097ea <btn_stereo+0x2a>
			lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 68);
 80097ce:	2344      	movs	r3, #68	; 0x44
 80097d0:	480c      	ldr	r0, [pc, #48]	; (8009804 <btn_stereo+0x44>)
 80097d2:	9300      	str	r3, [sp, #0]
 80097d4:	2201      	movs	r2, #1
 80097d6:	2336      	movs	r3, #54	; 0x36
 80097d8:	6800      	ldr	r0, [r0, #0]
 80097da:	f004 fe7d 	bl	800e4d8 <lv_obj_align>
			Cfg_Stereo = 1;
 80097de:	2201      	movs	r2, #1
			Cfg_Stereo = 0;
 80097e0:	4b09      	ldr	r3, [pc, #36]	; (8009808 <btn_stereo+0x48>)
 80097e2:	701a      	strb	r2, [r3, #0]
}
 80097e4:	b003      	add	sp, #12
 80097e6:	f85d fb04 	ldr.w	pc, [sp], #4
		else if(id == 1) {
 80097ea:	2801      	cmp	r0, #1
 80097ec:	d1fa      	bne.n	80097e4 <btn_stereo+0x24>
			lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 88);
 80097ee:	4602      	mov	r2, r0
 80097f0:	2358      	movs	r3, #88	; 0x58
 80097f2:	4804      	ldr	r0, [pc, #16]	; (8009804 <btn_stereo+0x44>)
 80097f4:	9300      	str	r3, [sp, #0]
 80097f6:	2100      	movs	r1, #0
 80097f8:	2336      	movs	r3, #54	; 0x36
 80097fa:	6800      	ldr	r0, [r0, #0]
 80097fc:	f004 fe6c 	bl	800e4d8 <lv_obj_align>
			Cfg_Stereo = 0;
 8009800:	2200      	movs	r2, #0
 8009802:	e7ed      	b.n	80097e0 <btn_stereo+0x20>
 8009804:	20005148 	.word	0x20005148
 8009808:	20000000 	.word	0x20000000

0800980c <btn_processador>:
	}
}

static void btn_processador(lv_obj_t * btn, lv_event_t event)
{
	if(event == LV_EVENT_RELEASED) {
 800980c:	2907      	cmp	r1, #7
{
 800980e:	b507      	push	{r0, r1, r2, lr}
	if(event == LV_EVENT_RELEASED) {
 8009810:	d10e      	bne.n	8009830 <btn_processador+0x24>
		uint32_t id = lv_obj_get_user_data(btn);
 8009812:	f005 fc1e 	bl	800f052 <lv_obj_get_user_data>
		//printf("Button Processador %d Released\n" , id);
		if(id == 0) {
 8009816:	4601      	mov	r1, r0
 8009818:	b968      	cbnz	r0, 8009836 <btn_processador+0x2a>
			lv_obj_align(bar[1], NULL, LV_ALIGN_IN_TOP_LEFT, 132, 68);
 800981a:	2344      	movs	r3, #68	; 0x44
 800981c:	480c      	ldr	r0, [pc, #48]	; (8009850 <btn_processador+0x44>)
 800981e:	9300      	str	r3, [sp, #0]
 8009820:	2201      	movs	r2, #1
 8009822:	2384      	movs	r3, #132	; 0x84
 8009824:	6840      	ldr	r0, [r0, #4]
 8009826:	f004 fe57 	bl	800e4d8 <lv_obj_align>
			Cfg_Processador = 1;
 800982a:	2201      	movs	r2, #1
		}
		else if(id == 1) {
			lv_obj_align(bar[1], NULL, LV_ALIGN_IN_TOP_LEFT, 132, 88);
			Cfg_Processador = 0;
 800982c:	4b09      	ldr	r3, [pc, #36]	; (8009854 <btn_processador+0x48>)
 800982e:	701a      	strb	r2, [r3, #0]
		}
		//printf("Cfg_Processador: %d\n", Cfg_Processador);
	}
}
 8009830:	b003      	add	sp, #12
 8009832:	f85d fb04 	ldr.w	pc, [sp], #4
		else if(id == 1) {
 8009836:	2801      	cmp	r0, #1
 8009838:	d1fa      	bne.n	8009830 <btn_processador+0x24>
			lv_obj_align(bar[1], NULL, LV_ALIGN_IN_TOP_LEFT, 132, 88);
 800983a:	4602      	mov	r2, r0
 800983c:	2358      	movs	r3, #88	; 0x58
 800983e:	4804      	ldr	r0, [pc, #16]	; (8009850 <btn_processador+0x44>)
 8009840:	9300      	str	r3, [sp, #0]
 8009842:	2100      	movs	r1, #0
 8009844:	2384      	movs	r3, #132	; 0x84
 8009846:	6840      	ldr	r0, [r0, #4]
 8009848:	f004 fe46 	bl	800e4d8 <lv_obj_align>
			Cfg_Processador = 0;
 800984c:	2200      	movs	r2, #0
 800984e:	e7ed      	b.n	800982c <btn_processador+0x20>
 8009850:	20005148 	.word	0x20005148
 8009854:	200033c5 	.word	0x200033c5

08009858 <btn_emphase>:
	if(event == LV_EVENT_RELEASED) {
 8009858:	2907      	cmp	r1, #7
{
 800985a:	b507      	push	{r0, r1, r2, lr}
	if(event == LV_EVENT_RELEASED) {
 800985c:	d10e      	bne.n	800987c <btn_emphase+0x24>
		uint32_t id = lv_obj_get_user_data(btn);
 800985e:	f005 fbf8 	bl	800f052 <lv_obj_get_user_data>
		if(id == 0) {
 8009862:	4601      	mov	r1, r0
 8009864:	b968      	cbnz	r0, 8009882 <btn_emphase+0x2a>
			lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 68);
 8009866:	2344      	movs	r3, #68	; 0x44
 8009868:	480c      	ldr	r0, [pc, #48]	; (800989c <btn_emphase+0x44>)
 800986a:	9300      	str	r3, [sp, #0]
 800986c:	2201      	movs	r2, #1
 800986e:	2336      	movs	r3, #54	; 0x36
 8009870:	6800      	ldr	r0, [r0, #0]
 8009872:	f004 fe31 	bl	800e4d8 <lv_obj_align>
			Cfg_Emphase = 1;
 8009876:	2201      	movs	r2, #1
			Cfg_Emphase = 0;
 8009878:	4b09      	ldr	r3, [pc, #36]	; (80098a0 <btn_emphase+0x48>)
 800987a:	701a      	strb	r2, [r3, #0]
}
 800987c:	b003      	add	sp, #12
 800987e:	f85d fb04 	ldr.w	pc, [sp], #4
		else if(id == 1) {
 8009882:	2801      	cmp	r0, #1
 8009884:	d1fa      	bne.n	800987c <btn_emphase+0x24>
			lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 88);
 8009886:	4602      	mov	r2, r0
 8009888:	2358      	movs	r3, #88	; 0x58
 800988a:	4804      	ldr	r0, [pc, #16]	; (800989c <btn_emphase+0x44>)
 800988c:	9300      	str	r3, [sp, #0]
 800988e:	2100      	movs	r1, #0
 8009890:	2336      	movs	r3, #54	; 0x36
 8009892:	6800      	ldr	r0, [r0, #0]
 8009894:	f004 fe20 	bl	800e4d8 <lv_obj_align>
			Cfg_Emphase = 0;
 8009898:	2200      	movs	r2, #0
 800989a:	e7ed      	b.n	8009878 <btn_emphase+0x20>
 800989c:	20005148 	.word	0x20005148
 80098a0:	200033c4 	.word	0x200033c4

080098a4 <btn_clipper>:

static void btn_clipper(lv_obj_t * btn, lv_event_t event)
{
	if(event == LV_EVENT_RELEASED) {
 80098a4:	2907      	cmp	r1, #7
{
 80098a6:	b507      	push	{r0, r1, r2, lr}
	if(event == LV_EVENT_RELEASED) {
 80098a8:	d10e      	bne.n	80098c8 <btn_clipper+0x24>
		uint32_t id = lv_obj_get_user_data(btn);
 80098aa:	f005 fbd2 	bl	800f052 <lv_obj_get_user_data>
		//printf("Button Clipper %d Released\n" , id);
		if(id == 0) {
 80098ae:	4601      	mov	r1, r0
 80098b0:	b968      	cbnz	r0, 80098ce <btn_clipper+0x2a>
			lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 68);
 80098b2:	2344      	movs	r3, #68	; 0x44
 80098b4:	480c      	ldr	r0, [pc, #48]	; (80098e8 <btn_clipper+0x44>)
 80098b6:	9300      	str	r3, [sp, #0]
 80098b8:	2201      	movs	r2, #1
 80098ba:	2336      	movs	r3, #54	; 0x36
 80098bc:	6800      	ldr	r0, [r0, #0]
 80098be:	f004 fe0b 	bl	800e4d8 <lv_obj_align>
			Cfg_Clipper = 1;
 80098c2:	2201      	movs	r2, #1
		}
		else if(id == 1) {
			lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 88);
			Cfg_Clipper = 0;
 80098c4:	4b09      	ldr	r3, [pc, #36]	; (80098ec <btn_clipper+0x48>)
 80098c6:	701a      	strb	r2, [r3, #0]
		}
		//printf("Cfg_Clipper: %d\n", Cfg_Clipper);
	}
}
 80098c8:	b003      	add	sp, #12
 80098ca:	f85d fb04 	ldr.w	pc, [sp], #4
		else if(id == 1) {
 80098ce:	2801      	cmp	r0, #1
 80098d0:	d1fa      	bne.n	80098c8 <btn_clipper+0x24>
			lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 88);
 80098d2:	4602      	mov	r2, r0
 80098d4:	2358      	movs	r3, #88	; 0x58
 80098d6:	4804      	ldr	r0, [pc, #16]	; (80098e8 <btn_clipper+0x44>)
 80098d8:	9300      	str	r3, [sp, #0]
 80098da:	2100      	movs	r1, #0
 80098dc:	2336      	movs	r3, #54	; 0x36
 80098de:	6800      	ldr	r0, [r0, #0]
 80098e0:	f004 fdfa 	bl	800e4d8 <lv_obj_align>
			Cfg_Clipper = 0;
 80098e4:	2200      	movs	r2, #0
 80098e6:	e7ed      	b.n	80098c4 <btn_clipper+0x20>
 80098e8:	20005148 	.word	0x20005148
 80098ec:	200033c3 	.word	0x200033c3

080098f0 <btn_event_esc>:
	if(event == LV_EVENT_RELEASED) {
 80098f0:	2907      	cmp	r1, #7
{
 80098f2:	b508      	push	{r3, lr}
	if(event == LV_EVENT_RELEASED) {
 80098f4:	d107      	bne.n	8009906 <btn_event_esc+0x16>
		lv_obj_del(Tela_Audio);
 80098f6:	4b04      	ldr	r3, [pc, #16]	; (8009908 <btn_event_esc+0x18>)
 80098f8:	6818      	ldr	r0, [r3, #0]
 80098fa:	f005 fa00 	bl	800ecfe <lv_obj_del>
}
 80098fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_sel();
 8009902:	f003 bedb 	b.w	800d6bc <screen_sel>
 8009906:	bd08      	pop	{r3, pc}
 8009908:	2000513c 	.word	0x2000513c

0800990c <btn_mp3>:

static void btn_mp3(lv_obj_t * btn, lv_event_t event)
{
	if(event == LV_EVENT_RELEASED) {
 800990c:	2907      	cmp	r1, #7
{
 800990e:	b508      	push	{r3, lr}
	if(event == LV_EVENT_RELEASED) {
 8009910:	d117      	bne.n	8009942 <btn_mp3+0x36>
		uint32_t id = lv_obj_get_user_data(btn);
 8009912:	f005 fb9e 	bl	800f052 <lv_obj_get_user_data>
		switch(id) {
 8009916:	2803      	cmp	r0, #3
 8009918:	d813      	bhi.n	8009942 <btn_mp3+0x36>
 800991a:	e8df f000 	tbb	[pc, r0]
 800991e:	0802      	.short	0x0802
 8009920:	1813      	.short	0x1813
			case 0:
				printf("MP3 Function: PREV\n");
 8009922:	480d      	ldr	r0, [pc, #52]	; (8009958 <btn_mp3+0x4c>)
 8009924:	f00f fe76 	bl	8019614 <puts>
				mp3_status = 3;
 8009928:	2203      	movs	r2, #3
				printf("MP3 Function: NEXT\n");
				mp3_status = 4;
				break;
			case 3:
				printf("MP3 Function: STOP\n");
				mp3_status = 0;
 800992a:	4b0c      	ldr	r3, [pc, #48]	; (800995c <btn_mp3+0x50>)
 800992c:	e008      	b.n	8009940 <btn_mp3+0x34>
				printf("MP3 Function: PLAY-PAUSE\n");
 800992e:	480c      	ldr	r0, [pc, #48]	; (8009960 <btn_mp3+0x54>)
 8009930:	f00f fe70 	bl	8019614 <puts>
				if(mp3_status == 1) mp3_status = 2;
 8009934:	4b09      	ldr	r3, [pc, #36]	; (800995c <btn_mp3+0x50>)
 8009936:	781a      	ldrb	r2, [r3, #0]
 8009938:	2a01      	cmp	r2, #1
 800993a:	bf0c      	ite	eq
 800993c:	2202      	moveq	r2, #2
				else mp3_status = 1;
 800993e:	2201      	movne	r2, #1
				mp3_status = 0;
 8009940:	701a      	strb	r2, [r3, #0]
 8009942:	bd08      	pop	{r3, pc}
				printf("MP3 Function: NEXT\n");
 8009944:	4807      	ldr	r0, [pc, #28]	; (8009964 <btn_mp3+0x58>)
 8009946:	f00f fe65 	bl	8019614 <puts>
				mp3_status = 4;
 800994a:	2204      	movs	r2, #4
 800994c:	e7ed      	b.n	800992a <btn_mp3+0x1e>
				printf("MP3 Function: STOP\n");
 800994e:	4806      	ldr	r0, [pc, #24]	; (8009968 <btn_mp3+0x5c>)
 8009950:	f00f fe60 	bl	8019614 <puts>
				mp3_status = 0;
 8009954:	2200      	movs	r2, #0
 8009956:	e7e8      	b.n	800992a <btn_mp3+0x1e>
 8009958:	0802bb54 	.word	0x0802bb54
 800995c:	20004dbc 	.word	0x20004dbc
 8009960:	0802bb67 	.word	0x0802bb67
 8009964:	0802bb80 	.word	0x0802bb80
 8009968:	0802bb93 	.word	0x0802bb93

0800996c <btn_next>:
{
 800996c:	b538      	push	{r3, r4, r5, lr}
	lv_obj_t * imgbtn1 = lv_imgbtn_create(Tela_Audio, NULL);
 800996e:	4b15      	ldr	r3, [pc, #84]	; (80099c4 <btn_next+0x58>)
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_REL, &Btn_next);
 8009970:	4d15      	ldr	r5, [pc, #84]	; (80099c8 <btn_next+0x5c>)
	lv_obj_t * imgbtn1 = lv_imgbtn_create(Tela_Audio, NULL);
 8009972:	6818      	ldr	r0, [r3, #0]
 8009974:	2100      	movs	r1, #0
 8009976:	f00c fffd 	bl	8016974 <lv_imgbtn_create>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_REL, &Btn_next);
 800997a:	462a      	mov	r2, r5
	lv_obj_t * imgbtn1 = lv_imgbtn_create(Tela_Audio, NULL);
 800997c:	4604      	mov	r4, r0
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_REL, &Btn_next);
 800997e:	2100      	movs	r1, #0
 8009980:	f00d f840 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_TGL_REL, &Btn_next);
 8009984:	462a      	mov	r2, r5
 8009986:	4620      	mov	r0, r4
 8009988:	2102      	movs	r1, #2
 800998a:	f00d f83b 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_TGL_PR, &Btn_next);
 800998e:	462a      	mov	r2, r5
 8009990:	4620      	mov	r0, r4
 8009992:	2103      	movs	r1, #3
 8009994:	f00d f836 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_PR, &Btn_next);
 8009998:	462a      	mov	r2, r5
 800999a:	4620      	mov	r0, r4
 800999c:	2101      	movs	r1, #1
 800999e:	f00d f831 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_INA, &Btn_next);
 80099a2:	462a      	mov	r2, r5
 80099a4:	4620      	mov	r0, r4
 80099a6:	2104      	movs	r1, #4
 80099a8:	f00d f82c 	bl	8016a04 <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn1, btn_event_next);
 80099ac:	4620      	mov	r0, r4
 80099ae:	4907      	ldr	r1, [pc, #28]	; (80099cc <btn_next+0x60>)
 80099b0:	f004 fbf3 	bl	800e19a <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn1, 112, 18);
 80099b4:	4620      	mov	r0, r4
 80099b6:	2212      	movs	r2, #18
 80099b8:	2170      	movs	r1, #112	; 0x70
}
 80099ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lv_obj_set_pos(imgbtn1, 112, 18);
 80099be:	f004 bd36 	b.w	800e42e <lv_obj_set_pos>
 80099c2:	bf00      	nop
 80099c4:	2000513c 	.word	0x2000513c
 80099c8:	20001ad8 	.word	0x20001ad8
 80099cc:	0800a2d5 	.word	0x0800a2d5

080099d0 <screen_audio>:
{
 80099d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	Tela_Audio = lv_obj_create(NULL, NULL);
 80099d2:	2100      	movs	r1, #0
 80099d4:	4608      	mov	r0, r1
 80099d6:	f004 ffa1 	bl	800e91c <lv_obj_create>
 80099da:	4fbe      	ldr	r7, [pc, #760]	; (8009cd4 <screen_audio+0x304>)
	img_fundo = lv_img_create(Tela_Audio, NULL);
 80099dc:	4cbe      	ldr	r4, [pc, #760]	; (8009cd8 <screen_audio+0x308>)
	Tela_Audio = lv_obj_create(NULL, NULL);
 80099de:	6038      	str	r0, [r7, #0]
	img_fundo = lv_img_create(Tela_Audio, NULL);
 80099e0:	2100      	movs	r1, #0
 80099e2:	f00c fe9d 	bl	8016720 <lv_img_create>
    lv_img_set_src(img_fundo, &tela_audio);
 80099e6:	49bd      	ldr	r1, [pc, #756]	; (8009cdc <screen_audio+0x30c>)
	img_fundo = lv_img_create(Tela_Audio, NULL);
 80099e8:	6020      	str	r0, [r4, #0]
    lv_img_set_src(img_fundo, &tela_audio);
 80099ea:	f00c fe09 	bl	8016600 <lv_img_set_src>
    lv_obj_set_protect(img_fundo, LV_PROTECT_POS);
 80099ee:	6820      	ldr	r0, [r4, #0]
	lv_style_copy(&style_indic_vd, &lv_style_pretty);
 80099f0:	4dbb      	ldr	r5, [pc, #748]	; (8009ce0 <screen_audio+0x310>)
	lv_style_copy(&style_indic_am, &lv_style_pretty);
 80099f2:	4ebc      	ldr	r6, [pc, #752]	; (8009ce4 <screen_audio+0x314>)
    lv_obj_set_protect(img_fundo, LV_PROTECT_POS);
 80099f4:	2104      	movs	r1, #4
 80099f6:	f004 fbc3 	bl	800e180 <lv_obj_set_protect>
	lv_obj_set_event_cb(img_fundo, btn_event_esc);
 80099fa:	6820      	ldr	r0, [r4, #0]
 80099fc:	49ba      	ldr	r1, [pc, #744]	; (8009ce8 <screen_audio+0x318>)
 80099fe:	f004 fbcc 	bl	800e19a <lv_obj_set_event_cb>
	lv_obj_set_click(img_fundo, 1);
 8009a02:	6820      	ldr	r0, [r4, #0]
 8009a04:	2101      	movs	r1, #1
 8009a06:	f004 fb9f 	bl	800e148 <lv_obj_set_click>
	btn_next();
 8009a0a:	f7ff ffaf 	bl	800996c <btn_next>
	lv_style_copy(&style_indic_vd, &lv_style_pretty);
 8009a0e:	4628      	mov	r0, r5
 8009a10:	49b6      	ldr	r1, [pc, #728]	; (8009cec <screen_audio+0x31c>)
 8009a12:	f005 fe5f 	bl	800f6d4 <lv_style_copy>
	style_indic_vd.body.grad_color = LV_COLOR_LIME;
 8009a16:	792b      	ldrb	r3, [r5, #4]
	lv_style_copy(&style_indic_am, &lv_style_pretty);
 8009a18:	49b4      	ldr	r1, [pc, #720]	; (8009cec <screen_audio+0x31c>)
	style_indic_vd.body.radius = 0;
 8009a1a:	2400      	movs	r4, #0
	style_indic_vd.body.grad_color = LV_COLOR_LIME;
 8009a1c:	f364 0304 	bfi	r3, r4, #0, #5
 8009a20:	712b      	strb	r3, [r5, #4]
 8009a22:	88ab      	ldrh	r3, [r5, #4]
	style_indic_vd.body.radius = 0;
 8009a24:	80ec      	strh	r4, [r5, #6]
	style_indic_vd.body.grad_color = LV_COLOR_LIME;
 8009a26:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 8009a2a:	80ab      	strh	r3, [r5, #4]
 8009a2c:	0a1b      	lsrs	r3, r3, #8
 8009a2e:	f364 03c7 	bfi	r3, r4, #3, #5
 8009a32:	716b      	strb	r3, [r5, #5]
	style_indic_vd.body.main_color = LV_COLOR_LIME;
 8009a34:	78ab      	ldrb	r3, [r5, #2]
 8009a36:	f364 0304 	bfi	r3, r4, #0, #5
 8009a3a:	70ab      	strb	r3, [r5, #2]
 8009a3c:	886b      	ldrh	r3, [r5, #2]
 8009a3e:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 8009a42:	806b      	strh	r3, [r5, #2]
 8009a44:	0a1b      	lsrs	r3, r3, #8
 8009a46:	f364 03c7 	bfi	r3, r4, #3, #5
 8009a4a:	70eb      	strb	r3, [r5, #3]
	style_indic_vd.body.border.color = LV_COLOR_LIME;
 8009a4c:	7aab      	ldrb	r3, [r5, #10]
 8009a4e:	f364 0304 	bfi	r3, r4, #0, #5
 8009a52:	72ab      	strb	r3, [r5, #10]
 8009a54:	896b      	ldrh	r3, [r5, #10]
 8009a56:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 8009a5a:	816b      	strh	r3, [r5, #10]
 8009a5c:	0a1b      	lsrs	r3, r3, #8
 8009a5e:	f364 03c7 	bfi	r3, r4, #3, #5
 8009a62:	72eb      	strb	r3, [r5, #11]
	lv_style_copy(&style_indic_am, &lv_style_pretty);
 8009a64:	4630      	mov	r0, r6
 8009a66:	f005 fe35 	bl	800f6d4 <lv_style_copy>
	style_indic_am.body.grad_color = LV_COLOR_YELLOW;
 8009a6a:	7933      	ldrb	r3, [r6, #4]
	style_indic_am.body.radius = 0;
 8009a6c:	80f4      	strh	r4, [r6, #6]
	style_indic_am.body.grad_color = LV_COLOR_YELLOW;
 8009a6e:	f364 0304 	bfi	r3, r4, #0, #5
 8009a72:	7133      	strb	r3, [r6, #4]
 8009a74:	88b3      	ldrh	r3, [r6, #4]
	lv_style_copy(&style_indic, &lv_style_pretty);
 8009a76:	499d      	ldr	r1, [pc, #628]	; (8009cec <screen_audio+0x31c>)
	style_indic_am.body.grad_color = LV_COLOR_YELLOW;
 8009a78:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 8009a7c:	80b3      	strh	r3, [r6, #4]
 8009a7e:	0a1b      	lsrs	r3, r3, #8
 8009a80:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 8009a84:	7173      	strb	r3, [r6, #5]
	style_indic_am.body.main_color = LV_COLOR_YELLOW;
 8009a86:	78b3      	ldrb	r3, [r6, #2]
 8009a88:	f364 0304 	bfi	r3, r4, #0, #5
 8009a8c:	70b3      	strb	r3, [r6, #2]
 8009a8e:	8873      	ldrh	r3, [r6, #2]
 8009a90:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 8009a94:	8073      	strh	r3, [r6, #2]
 8009a96:	0a1b      	lsrs	r3, r3, #8
 8009a98:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 8009a9c:	70f3      	strb	r3, [r6, #3]
	style_indic_am.body.border.color = LV_COLOR_YELLOW;
 8009a9e:	7ab3      	ldrb	r3, [r6, #10]
 8009aa0:	f364 0304 	bfi	r3, r4, #0, #5
 8009aa4:	72b3      	strb	r3, [r6, #10]
 8009aa6:	8973      	ldrh	r3, [r6, #10]
 8009aa8:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 8009aac:	8173      	strh	r3, [r6, #10]
 8009aae:	0a1b      	lsrs	r3, r3, #8
 8009ab0:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 8009ab4:	72f3      	strb	r3, [r6, #11]
	lv_style_copy(&style_indic, &lv_style_pretty);
 8009ab6:	4e8e      	ldr	r6, [pc, #568]	; (8009cf0 <screen_audio+0x320>)
 8009ab8:	4630      	mov	r0, r6
 8009aba:	f005 fe0b 	bl	800f6d4 <lv_style_copy>
	style_indic.body.grad_color = LV_COLOR_BLACK;
 8009abe:	7933      	ldrb	r3, [r6, #4]
	style_indic.body.radius = 0;
 8009ac0:	80f4      	strh	r4, [r6, #6]
	style_indic.body.grad_color = LV_COLOR_BLACK;
 8009ac2:	f364 0304 	bfi	r3, r4, #0, #5
 8009ac6:	7133      	strb	r3, [r6, #4]
 8009ac8:	88b3      	ldrh	r3, [r6, #4]
 8009aca:	f364 134a 	bfi	r3, r4, #5, #6
 8009ace:	80b3      	strh	r3, [r6, #4]
 8009ad0:	0a1b      	lsrs	r3, r3, #8
 8009ad2:	f364 03c7 	bfi	r3, r4, #3, #5
 8009ad6:	7173      	strb	r3, [r6, #5]
	style_indic.body.main_color = LV_COLOR_BLACK;
 8009ad8:	78b3      	ldrb	r3, [r6, #2]
 8009ada:	f364 0304 	bfi	r3, r4, #0, #5
 8009ade:	70b3      	strb	r3, [r6, #2]
 8009ae0:	8873      	ldrh	r3, [r6, #2]
 8009ae2:	f364 134a 	bfi	r3, r4, #5, #6
 8009ae6:	8073      	strh	r3, [r6, #2]
 8009ae8:	0a1b      	lsrs	r3, r3, #8
 8009aea:	f364 03c7 	bfi	r3, r4, #3, #5
 8009aee:	70f3      	strb	r3, [r6, #3]
	style_indic.body.border.color = LV_COLOR_BLACK;
 8009af0:	7ab3      	ldrb	r3, [r6, #10]
 8009af2:	f364 0304 	bfi	r3, r4, #0, #5
 8009af6:	72b3      	strb	r3, [r6, #10]
 8009af8:	8973      	ldrh	r3, [r6, #10]
 8009afa:	f364 134a 	bfi	r3, r4, #5, #6
 8009afe:	8173      	strh	r3, [r6, #10]
 8009b00:	0a1b      	lsrs	r3, r3, #8
 8009b02:	f364 03c7 	bfi	r3, r4, #3, #5
 8009b06:	72f3      	strb	r3, [r6, #11]
	imgbtn1[0] = lv_imgbtn_create(Tela_Audio, NULL);
 8009b08:	4621      	mov	r1, r4
 8009b0a:	6838      	ldr	r0, [r7, #0]
 8009b0c:	4e79      	ldr	r6, [pc, #484]	; (8009cf4 <screen_audio+0x324>)
 8009b0e:	f00c ff31 	bl	8016974 <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn1[0], 0);
 8009b12:	4621      	mov	r1, r4
	imgbtn1[0] = lv_imgbtn_create(Tela_Audio, NULL);
 8009b14:	6030      	str	r0, [r6, #0]
	lv_obj_set_user_data(imgbtn1[0], 0);
 8009b16:	f005 fa9e 	bl	800f056 <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_REL, &Btn_stereo);
 8009b1a:	6830      	ldr	r0, [r6, #0]
 8009b1c:	4a76      	ldr	r2, [pc, #472]	; (8009cf8 <screen_audio+0x328>)
 8009b1e:	4621      	mov	r1, r4
 8009b20:	f00c ff70 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_TGL_REL, &Btn_stereo_am);
 8009b24:	6830      	ldr	r0, [r6, #0]
 8009b26:	4a75      	ldr	r2, [pc, #468]	; (8009cfc <screen_audio+0x32c>)
 8009b28:	2102      	movs	r1, #2
 8009b2a:	f00c ff6b 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_TGL_PR, &Btn_stereo_am);
 8009b2e:	6830      	ldr	r0, [r6, #0]
 8009b30:	4a72      	ldr	r2, [pc, #456]	; (8009cfc <screen_audio+0x32c>)
 8009b32:	2103      	movs	r1, #3
 8009b34:	f00c ff66 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_PR, &Btn_stereo_am);
 8009b38:	6830      	ldr	r0, [r6, #0]
 8009b3a:	4a70      	ldr	r2, [pc, #448]	; (8009cfc <screen_audio+0x32c>)
 8009b3c:	2101      	movs	r1, #1
 8009b3e:	f00c ff61 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_INA, &Btn_stereo_am);
 8009b42:	4a6e      	ldr	r2, [pc, #440]	; (8009cfc <screen_audio+0x32c>)
 8009b44:	6830      	ldr	r0, [r6, #0]
 8009b46:	2104      	movs	r1, #4
 8009b48:	f00c ff5c 	bl	8016a04 <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn1[0], btn_stereo);
 8009b4c:	6830      	ldr	r0, [r6, #0]
 8009b4e:	496c      	ldr	r1, [pc, #432]	; (8009d00 <screen_audio+0x330>)
 8009b50:	f004 fb23 	bl	800e19a <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn1[0], 5, 63);
 8009b54:	223f      	movs	r2, #63	; 0x3f
 8009b56:	6830      	ldr	r0, [r6, #0]
 8009b58:	2105      	movs	r1, #5
 8009b5a:	f004 fc68 	bl	800e42e <lv_obj_set_pos>
	imgbtn1[1] = lv_imgbtn_create(Tela_Audio, imgbtn1[0]);
 8009b5e:	6831      	ldr	r1, [r6, #0]
 8009b60:	6838      	ldr	r0, [r7, #0]
 8009b62:	f00c ff07 	bl	8016974 <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn1[1], 1);
 8009b66:	2101      	movs	r1, #1
	imgbtn1[1] = lv_imgbtn_create(Tela_Audio, imgbtn1[0]);
 8009b68:	6070      	str	r0, [r6, #4]
	lv_obj_set_user_data(imgbtn1[1], 1);
 8009b6a:	f005 fa74 	bl	800f056 <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_REL, &Btn_mono);
 8009b6e:	6870      	ldr	r0, [r6, #4]
 8009b70:	4a64      	ldr	r2, [pc, #400]	; (8009d04 <screen_audio+0x334>)
 8009b72:	4621      	mov	r1, r4
 8009b74:	f00c ff46 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_TGL_REL, &Btn_mono_am);
 8009b78:	6870      	ldr	r0, [r6, #4]
 8009b7a:	4a63      	ldr	r2, [pc, #396]	; (8009d08 <screen_audio+0x338>)
 8009b7c:	2102      	movs	r1, #2
 8009b7e:	f00c ff41 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_TGL_PR, &Btn_mono_am);
 8009b82:	6870      	ldr	r0, [r6, #4]
 8009b84:	4a60      	ldr	r2, [pc, #384]	; (8009d08 <screen_audio+0x338>)
 8009b86:	2103      	movs	r1, #3
 8009b88:	f00c ff3c 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_PR, &Btn_mono_am);
 8009b8c:	6870      	ldr	r0, [r6, #4]
 8009b8e:	4a5e      	ldr	r2, [pc, #376]	; (8009d08 <screen_audio+0x338>)
 8009b90:	2101      	movs	r1, #1
 8009b92:	f00c ff37 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_INA, &Btn_mono_am);
 8009b96:	6870      	ldr	r0, [r6, #4]
 8009b98:	4a5b      	ldr	r2, [pc, #364]	; (8009d08 <screen_audio+0x338>)
 8009b9a:	2104      	movs	r1, #4
 8009b9c:	f00c ff32 	bl	8016a04 <lv_imgbtn_set_src>
	lv_obj_set_pos(imgbtn1[1], 5, 83);
 8009ba0:	2253      	movs	r2, #83	; 0x53
 8009ba2:	6870      	ldr	r0, [r6, #4]
	bar[0] = lv_bar_create(Tela_Audio, NULL);
 8009ba4:	4e59      	ldr	r6, [pc, #356]	; (8009d0c <screen_audio+0x33c>)
	lv_obj_set_pos(imgbtn1[1], 5, 83);
 8009ba6:	2105      	movs	r1, #5
 8009ba8:	f004 fc41 	bl	800e42e <lv_obj_set_pos>
	bar[0] = lv_bar_create(Tela_Audio, NULL);
 8009bac:	4621      	mov	r1, r4
 8009bae:	6838      	ldr	r0, [r7, #0]
 8009bb0:	f00a fe72 	bl	8014898 <lv_bar_create>
	lv_obj_set_size(bar[0], 16, 8);
 8009bb4:	2208      	movs	r2, #8
 8009bb6:	2110      	movs	r1, #16
	bar[0] = lv_bar_create(Tela_Audio, NULL);
 8009bb8:	6030      	str	r0, [r6, #0]
	lv_obj_set_size(bar[0], 16, 8);
 8009bba:	f005 f82d 	bl	800ec18 <lv_obj_set_size>
	lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);
 8009bbe:	462a      	mov	r2, r5
 8009bc0:	4621      	mov	r1, r4
 8009bc2:	6830      	ldr	r0, [r6, #0]
 8009bc4:	f00a fe52 	bl	801486c <lv_bar_set_style>
	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009bc8:	462a      	mov	r2, r5
 8009bca:	2101      	movs	r1, #1
 8009bcc:	6830      	ldr	r0, [r6, #0]
	lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 88);
 8009bce:	2558      	movs	r5, #88	; 0x58
	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009bd0:	f00a fe4c 	bl	801486c <lv_bar_set_style>
	lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 88);
 8009bd4:	9500      	str	r5, [sp, #0]
 8009bd6:	2336      	movs	r3, #54	; 0x36
 8009bd8:	2201      	movs	r2, #1
 8009bda:	4621      	mov	r1, r4
 8009bdc:	6830      	ldr	r0, [r6, #0]
 8009bde:	f004 fc7b 	bl	800e4d8 <lv_obj_align>
	lv_bar_set_value(bar[0], 100, 0);
 8009be2:	2164      	movs	r1, #100	; 0x64
 8009be4:	4622      	mov	r2, r4
 8009be6:	6830      	ldr	r0, [r6, #0]
 8009be8:	f00a fde4 	bl	80147b4 <lv_bar_set_value>
	if(Cfg_Stereo) {
 8009bec:	4b48      	ldr	r3, [pc, #288]	; (8009d10 <screen_audio+0x340>)
 8009bee:	7819      	ldrb	r1, [r3, #0]
 8009bf0:	2900      	cmp	r1, #0
 8009bf2:	f000 80fe 	beq.w	8009df2 <screen_audio+0x422>
		lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 68);
 8009bf6:	2344      	movs	r3, #68	; 0x44
 8009bf8:	9300      	str	r3, [sp, #0]
 8009bfa:	2201      	movs	r2, #1
 8009bfc:	2336      	movs	r3, #54	; 0x36
 8009bfe:	4621      	mov	r1, r4
		lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 88);
 8009c00:	6830      	ldr	r0, [r6, #0]
	imgbtn2[0] = lv_imgbtn_create(Tela_Audio, NULL);
 8009c02:	4c44      	ldr	r4, [pc, #272]	; (8009d14 <screen_audio+0x344>)
		lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 88);
 8009c04:	f004 fc68 	bl	800e4d8 <lv_obj_align>
	imgbtn2[0] = lv_imgbtn_create(Tela_Audio, NULL);
 8009c08:	2100      	movs	r1, #0
 8009c0a:	6838      	ldr	r0, [r7, #0]
 8009c0c:	f00c feb2 	bl	8016974 <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn2[0], 0);
 8009c10:	2100      	movs	r1, #0
	imgbtn2[0] = lv_imgbtn_create(Tela_Audio, NULL);
 8009c12:	6020      	str	r0, [r4, #0]
	lv_obj_set_user_data(imgbtn2[0], 0);
 8009c14:	f005 fa1f 	bl	800f056 <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn2[0], LV_BTN_STATE_REL, &Btn_mpxint);
 8009c18:	4a3f      	ldr	r2, [pc, #252]	; (8009d18 <screen_audio+0x348>)
 8009c1a:	6820      	ldr	r0, [r4, #0]
 8009c1c:	2100      	movs	r1, #0
 8009c1e:	f00c fef1 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[0], LV_BTN_STATE_TGL_REL, &Btn_mpxint_am);
 8009c22:	4a3e      	ldr	r2, [pc, #248]	; (8009d1c <screen_audio+0x34c>)
 8009c24:	6820      	ldr	r0, [r4, #0]
 8009c26:	2102      	movs	r1, #2
 8009c28:	f00c feec 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[0], LV_BTN_STATE_TGL_PR, &Btn_mpxint_am);
 8009c2c:	4a3b      	ldr	r2, [pc, #236]	; (8009d1c <screen_audio+0x34c>)
 8009c2e:	6820      	ldr	r0, [r4, #0]
 8009c30:	2103      	movs	r1, #3
 8009c32:	f00c fee7 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[0], LV_BTN_STATE_PR, &Btn_mpxint_am);
 8009c36:	4a39      	ldr	r2, [pc, #228]	; (8009d1c <screen_audio+0x34c>)
 8009c38:	6820      	ldr	r0, [r4, #0]
 8009c3a:	2101      	movs	r1, #1
 8009c3c:	f00c fee2 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[0], LV_BTN_STATE_INA, &Btn_mpxint_am);
 8009c40:	4a36      	ldr	r2, [pc, #216]	; (8009d1c <screen_audio+0x34c>)
 8009c42:	6820      	ldr	r0, [r4, #0]
 8009c44:	2104      	movs	r1, #4
 8009c46:	f00c fedd 	bl	8016a04 <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn2[0], btn_audio);
 8009c4a:	4935      	ldr	r1, [pc, #212]	; (8009d20 <screen_audio+0x350>)
 8009c4c:	6820      	ldr	r0, [r4, #0]
 8009c4e:	f004 faa4 	bl	800e19a <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn2[0], 82, 47);
 8009c52:	222f      	movs	r2, #47	; 0x2f
 8009c54:	2152      	movs	r1, #82	; 0x52
 8009c56:	6820      	ldr	r0, [r4, #0]
 8009c58:	f004 fbe9 	bl	800e42e <lv_obj_set_pos>
	imgbtn2[1] = lv_imgbtn_create(Tela_Audio, imgbtn2[0]);
 8009c5c:	6821      	ldr	r1, [r4, #0]
 8009c5e:	6838      	ldr	r0, [r7, #0]
 8009c60:	f00c fe88 	bl	8016974 <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn2[1], 1);
 8009c64:	2101      	movs	r1, #1
	imgbtn2[1] = lv_imgbtn_create(Tela_Audio, imgbtn2[0]);
 8009c66:	6060      	str	r0, [r4, #4]
	lv_obj_set_user_data(imgbtn2[1], 1);
 8009c68:	f005 f9f5 	bl	800f056 <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn2[1], LV_BTN_STATE_REL, &Btn_mpxext);
 8009c6c:	4a2d      	ldr	r2, [pc, #180]	; (8009d24 <screen_audio+0x354>)
 8009c6e:	6860      	ldr	r0, [r4, #4]
 8009c70:	2100      	movs	r1, #0
 8009c72:	f00c fec7 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[1], LV_BTN_STATE_TGL_REL, &Btn_mpxext_am);
 8009c76:	4a2c      	ldr	r2, [pc, #176]	; (8009d28 <screen_audio+0x358>)
 8009c78:	6860      	ldr	r0, [r4, #4]
 8009c7a:	2102      	movs	r1, #2
 8009c7c:	f00c fec2 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[1], LV_BTN_STATE_TGL_PR, &Btn_mpxext_am);
 8009c80:	4a29      	ldr	r2, [pc, #164]	; (8009d28 <screen_audio+0x358>)
 8009c82:	6860      	ldr	r0, [r4, #4]
 8009c84:	2103      	movs	r1, #3
 8009c86:	f00c febd 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[1], LV_BTN_STATE_PR, &Btn_mpxext_am);
 8009c8a:	4a27      	ldr	r2, [pc, #156]	; (8009d28 <screen_audio+0x358>)
 8009c8c:	6860      	ldr	r0, [r4, #4]
 8009c8e:	2101      	movs	r1, #1
 8009c90:	f00c feb8 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[1], LV_BTN_STATE_INA, &Btn_mpxext_am);
 8009c94:	4a24      	ldr	r2, [pc, #144]	; (8009d28 <screen_audio+0x358>)
 8009c96:	6860      	ldr	r0, [r4, #4]
 8009c98:	2104      	movs	r1, #4
 8009c9a:	f00c feb3 	bl	8016a04 <lv_imgbtn_set_src>
	lv_obj_set_pos(imgbtn2[1], 83, 67);
 8009c9e:	2243      	movs	r2, #67	; 0x43
 8009ca0:	2153      	movs	r1, #83	; 0x53
 8009ca2:	6860      	ldr	r0, [r4, #4]
 8009ca4:	f004 fbc3 	bl	800e42e <lv_obj_set_pos>
	imgbtn2[2] = lv_imgbtn_create(Tela_Audio, imgbtn2[0]);
 8009ca8:	6821      	ldr	r1, [r4, #0]
 8009caa:	6838      	ldr	r0, [r7, #0]
 8009cac:	f00c fe62 	bl	8016974 <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn2[2], 2);
 8009cb0:	2102      	movs	r1, #2
	imgbtn2[2] = lv_imgbtn_create(Tela_Audio, imgbtn2[0]);
 8009cb2:	60a0      	str	r0, [r4, #8]
	lv_obj_set_user_data(imgbtn2[2], 2);
 8009cb4:	f005 f9cf 	bl	800f056 <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn2[2], LV_BTN_STATE_REL, &Btn_mp3);
 8009cb8:	4a1c      	ldr	r2, [pc, #112]	; (8009d2c <screen_audio+0x35c>)
 8009cba:	68a0      	ldr	r0, [r4, #8]
 8009cbc:	2100      	movs	r1, #0
 8009cbe:	f00c fea1 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[2], LV_BTN_STATE_TGL_REL, &Btn_mp3_am);
 8009cc2:	4a1b      	ldr	r2, [pc, #108]	; (8009d30 <screen_audio+0x360>)
 8009cc4:	68a0      	ldr	r0, [r4, #8]
 8009cc6:	2102      	movs	r1, #2
 8009cc8:	f00c fe9c 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[2], LV_BTN_STATE_TGL_PR, &Btn_mp3_am);
 8009ccc:	4a18      	ldr	r2, [pc, #96]	; (8009d30 <screen_audio+0x360>)
 8009cce:	68a0      	ldr	r0, [r4, #8]
 8009cd0:	2103      	movs	r1, #3
 8009cd2:	e02f      	b.n	8009d34 <screen_audio+0x364>
 8009cd4:	2000513c 	.word	0x2000513c
 8009cd8:	20005150 	.word	0x20005150
 8009cdc:	20001b8c 	.word	0x20001b8c
 8009ce0:	200051e4 	.word	0x200051e4
 8009ce4:	200051a8 	.word	0x200051a8
 8009ce8:	080098f1 	.word	0x080098f1
 8009cec:	2000c334 	.word	0x2000c334
 8009cf0:	2000516c 	.word	0x2000516c
 8009cf4:	20005154 	.word	0x20005154
 8009cf8:	20001b50 	.word	0x20001b50
 8009cfc:	20001b5c 	.word	0x20001b5c
 8009d00:	080097c1 	.word	0x080097c1
 8009d04:	20001a18 	.word	0x20001a18
 8009d08:	20001a24 	.word	0x20001a24
 8009d0c:	20005148 	.word	0x20005148
 8009d10:	20000000 	.word	0x20000000
 8009d14:	2000515c 	.word	0x2000515c
 8009d18:	20001ac0 	.word	0x20001ac0
 8009d1c:	20001acc 	.word	0x20001acc
 8009d20:	08009741 	.word	0x08009741
 8009d24:	20001aa8 	.word	0x20001aa8
 8009d28:	20001ab4 	.word	0x20001ab4
 8009d2c:	20001a30 	.word	0x20001a30
 8009d30:	20001a9c 	.word	0x20001a9c
 8009d34:	f00c fe66 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[2], LV_BTN_STATE_PR, &Btn_mp3_am);
 8009d38:	4a3c      	ldr	r2, [pc, #240]	; (8009e2c <screen_audio+0x45c>)
 8009d3a:	68a0      	ldr	r0, [r4, #8]
 8009d3c:	2101      	movs	r1, #1
 8009d3e:	f00c fe61 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[2], LV_BTN_STATE_INA, &Btn_mp3_am);
 8009d42:	4a3a      	ldr	r2, [pc, #232]	; (8009e2c <screen_audio+0x45c>)
 8009d44:	68a0      	ldr	r0, [r4, #8]
 8009d46:	2104      	movs	r1, #4
 8009d48:	f00c fe5c 	bl	8016a04 <lv_imgbtn_set_src>
	lv_obj_set_pos(imgbtn2[2], 83, 87);
 8009d4c:	2257      	movs	r2, #87	; 0x57
 8009d4e:	2153      	movs	r1, #83	; 0x53
 8009d50:	68a0      	ldr	r0, [r4, #8]
 8009d52:	f004 fb6c 	bl	800e42e <lv_obj_set_pos>
	imgbtn2[3] = lv_imgbtn_create(Tela_Audio, imgbtn2[0]);
 8009d56:	6821      	ldr	r1, [r4, #0]
 8009d58:	6838      	ldr	r0, [r7, #0]
 8009d5a:	f00c fe0b 	bl	8016974 <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn2[3], 3);
 8009d5e:	2103      	movs	r1, #3
	imgbtn2[3] = lv_imgbtn_create(Tela_Audio, imgbtn2[0]);
 8009d60:	60e0      	str	r0, [r4, #12]
	lv_obj_set_user_data(imgbtn2[3], 3);
 8009d62:	f005 f978 	bl	800f056 <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn2[3], LV_BTN_STATE_REL, &Btn_mic);
 8009d66:	4a32      	ldr	r2, [pc, #200]	; (8009e30 <screen_audio+0x460>)
 8009d68:	68e0      	ldr	r0, [r4, #12]
 8009d6a:	2100      	movs	r1, #0
 8009d6c:	f00c fe4a 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[3], LV_BTN_STATE_TGL_REL, &Btn_mic_am);
 8009d70:	4a30      	ldr	r2, [pc, #192]	; (8009e34 <screen_audio+0x464>)
 8009d72:	68e0      	ldr	r0, [r4, #12]
 8009d74:	2102      	movs	r1, #2
 8009d76:	f00c fe45 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[3], LV_BTN_STATE_TGL_PR, &Btn_mic_am);
 8009d7a:	4a2e      	ldr	r2, [pc, #184]	; (8009e34 <screen_audio+0x464>)
 8009d7c:	68e0      	ldr	r0, [r4, #12]
 8009d7e:	2103      	movs	r1, #3
 8009d80:	f00c fe40 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[3], LV_BTN_STATE_PR, &Btn_mic_am);
 8009d84:	4a2b      	ldr	r2, [pc, #172]	; (8009e34 <screen_audio+0x464>)
 8009d86:	68e0      	ldr	r0, [r4, #12]
 8009d88:	2101      	movs	r1, #1
 8009d8a:	f00c fe3b 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[3], LV_BTN_STATE_INA, &Btn_mic_am);
 8009d8e:	4a29      	ldr	r2, [pc, #164]	; (8009e34 <screen_audio+0x464>)
 8009d90:	68e0      	ldr	r0, [r4, #12]
 8009d92:	2104      	movs	r1, #4
 8009d94:	f00c fe36 	bl	8016a04 <lv_imgbtn_set_src>
	lv_obj_set_pos(imgbtn2[3], 83, 106);
 8009d98:	226a      	movs	r2, #106	; 0x6a
 8009d9a:	2153      	movs	r1, #83	; 0x53
 8009d9c:	68e0      	ldr	r0, [r4, #12]
 8009d9e:	f004 fb46 	bl	800e42e <lv_obj_set_pos>
	bar[1] = lv_bar_create(Tela_Audio, NULL);
 8009da2:	2100      	movs	r1, #0
 8009da4:	6838      	ldr	r0, [r7, #0]
 8009da6:	f00a fd77 	bl	8014898 <lv_bar_create>
	lv_obj_set_size(bar[1], 16, 8);
 8009daa:	2208      	movs	r2, #8
 8009dac:	2110      	movs	r1, #16
	bar[1] = lv_bar_create(Tela_Audio, NULL);
 8009dae:	6070      	str	r0, [r6, #4]
	lv_obj_set_size(bar[1], 16, 8);
 8009db0:	f004 ff32 	bl	800ec18 <lv_obj_set_size>
	lv_bar_set_style(bar[1], LV_BAR_STYLE_BG, &style_indic_vd);
 8009db4:	4a20      	ldr	r2, [pc, #128]	; (8009e38 <screen_audio+0x468>)
 8009db6:	6870      	ldr	r0, [r6, #4]
 8009db8:	2100      	movs	r1, #0
 8009dba:	f00a fd57 	bl	801486c <lv_bar_set_style>
	lv_bar_set_style(bar[1], LV_BAR_STYLE_INDIC, &style_indic_vd);
 8009dbe:	4a1e      	ldr	r2, [pc, #120]	; (8009e38 <screen_audio+0x468>)
 8009dc0:	6870      	ldr	r0, [r6, #4]
 8009dc2:	2101      	movs	r1, #1
 8009dc4:	f00a fd52 	bl	801486c <lv_bar_set_style>
	lv_obj_align(bar[1], NULL, LV_ALIGN_IN_TOP_LEFT, 132, 51);
 8009dc8:	2333      	movs	r3, #51	; 0x33
 8009dca:	9300      	str	r3, [sp, #0]
 8009dcc:	2201      	movs	r2, #1
 8009dce:	2384      	movs	r3, #132	; 0x84
 8009dd0:	2100      	movs	r1, #0
 8009dd2:	6870      	ldr	r0, [r6, #4]
 8009dd4:	f004 fb80 	bl	800e4d8 <lv_obj_align>
	lv_bar_set_value(bar[1], 100, 0);
 8009dd8:	2200      	movs	r2, #0
 8009dda:	2164      	movs	r1, #100	; 0x64
 8009ddc:	6870      	ldr	r0, [r6, #4]
 8009dde:	f00a fce9 	bl	80147b4 <lv_bar_set_value>
	switch(Cfg_Audio) {
 8009de2:	4b16      	ldr	r3, [pc, #88]	; (8009e3c <screen_audio+0x46c>)
 8009de4:	781b      	ldrb	r3, [r3, #0]
 8009de6:	2b03      	cmp	r3, #3
 8009de8:	d80f      	bhi.n	8009e0a <screen_audio+0x43a>
 8009dea:	e8df f003 	tbb	[pc, r3]
 8009dee:	1606      	.short	0x1606
 8009df0:	1c1a      	.short	0x1c1a
		lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 88);
 8009df2:	9500      	str	r5, [sp, #0]
 8009df4:	2336      	movs	r3, #54	; 0x36
 8009df6:	2201      	movs	r2, #1
 8009df8:	e702      	b.n	8009c00 <screen_audio+0x230>
			lv_obj_align(bar[1], NULL, LV_ALIGN_IN_TOP_LEFT, 131, 52);
 8009dfa:	2334      	movs	r3, #52	; 0x34
 8009dfc:	9300      	str	r3, [sp, #0]
 8009dfe:	2383      	movs	r3, #131	; 0x83
			lv_obj_align(bar[1], NULL, LV_ALIGN_IN_TOP_LEFT, 132, 111);
 8009e00:	2201      	movs	r2, #1
 8009e02:	2100      	movs	r1, #0
 8009e04:	6870      	ldr	r0, [r6, #4]
 8009e06:	f004 fb67 	bl	800e4d8 <lv_obj_align>
 8009e0a:	6838      	ldr	r0, [r7, #0]
 8009e0c:	f003 ff72 	bl	800dcf4 <lv_disp_load_scr>
	TelaAtiva = TelaAudio;
 8009e10:	4b0b      	ldr	r3, [pc, #44]	; (8009e40 <screen_audio+0x470>)
 8009e12:	2203      	movs	r2, #3
 8009e14:	601a      	str	r2, [r3, #0]
}
 8009e16:	b003      	add	sp, #12
 8009e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
			lv_obj_align(bar[1], NULL, LV_ALIGN_IN_TOP_LEFT, 132, 72);
 8009e1a:	2348      	movs	r3, #72	; 0x48
			lv_obj_align(bar[1], NULL, LV_ALIGN_IN_TOP_LEFT, 132, 111);
 8009e1c:	9300      	str	r3, [sp, #0]
 8009e1e:	2384      	movs	r3, #132	; 0x84
 8009e20:	e7ee      	b.n	8009e00 <screen_audio+0x430>
			lv_obj_align(bar[1], NULL, LV_ALIGN_IN_TOP_LEFT, 132, 92);
 8009e22:	235c      	movs	r3, #92	; 0x5c
 8009e24:	e7fa      	b.n	8009e1c <screen_audio+0x44c>
			lv_obj_align(bar[1], NULL, LV_ALIGN_IN_TOP_LEFT, 132, 111);
 8009e26:	236f      	movs	r3, #111	; 0x6f
 8009e28:	e7f8      	b.n	8009e1c <screen_audio+0x44c>
 8009e2a:	bf00      	nop
 8009e2c:	20001a9c 	.word	0x20001a9c
 8009e30:	20001a00 	.word	0x20001a00
 8009e34:	20001a0c 	.word	0x20001a0c
 8009e38:	200051e4 	.word	0x200051e4
 8009e3c:	200033c2 	.word	0x200033c2
 8009e40:	200033cc 	.word	0x200033cc

08009e44 <btn_event_prev1>:
	if(event == LV_EVENT_RELEASED) {
 8009e44:	2907      	cmp	r1, #7
{
 8009e46:	b508      	push	{r3, lr}
	if(event == LV_EVENT_RELEASED) {
 8009e48:	d107      	bne.n	8009e5a <btn_event_prev1+0x16>
		lv_obj_del(Tela_Audio_1);
 8009e4a:	4b04      	ldr	r3, [pc, #16]	; (8009e5c <btn_event_prev1+0x18>)
 8009e4c:	6818      	ldr	r0, [r3, #0]
 8009e4e:	f004 ff56 	bl	800ecfe <lv_obj_del>
}
 8009e52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_audio();
 8009e56:	f7ff bdbb 	b.w	80099d0 <screen_audio>
 8009e5a:	bd08      	pop	{r3, pc}
 8009e5c:	20005140 	.word	0x20005140

08009e60 <btn_next1>:
{
 8009e60:	b538      	push	{r3, r4, r5, lr}
	lv_obj_t * imgbtn1 = lv_imgbtn_create(Tela_Audio, NULL);
 8009e62:	4b15      	ldr	r3, [pc, #84]	; (8009eb8 <btn_next1+0x58>)
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_REL, &Btn_next);
 8009e64:	4d15      	ldr	r5, [pc, #84]	; (8009ebc <btn_next1+0x5c>)
	lv_obj_t * imgbtn1 = lv_imgbtn_create(Tela_Audio, NULL);
 8009e66:	6818      	ldr	r0, [r3, #0]
 8009e68:	2100      	movs	r1, #0
 8009e6a:	f00c fd83 	bl	8016974 <lv_imgbtn_create>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_REL, &Btn_next);
 8009e6e:	462a      	mov	r2, r5
	lv_obj_t * imgbtn1 = lv_imgbtn_create(Tela_Audio, NULL);
 8009e70:	4604      	mov	r4, r0
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_REL, &Btn_next);
 8009e72:	2100      	movs	r1, #0
 8009e74:	f00c fdc6 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_TGL_REL, &Btn_next);
 8009e78:	462a      	mov	r2, r5
 8009e7a:	4620      	mov	r0, r4
 8009e7c:	2102      	movs	r1, #2
 8009e7e:	f00c fdc1 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_TGL_PR, &Btn_next);
 8009e82:	462a      	mov	r2, r5
 8009e84:	4620      	mov	r0, r4
 8009e86:	2103      	movs	r1, #3
 8009e88:	f00c fdbc 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_PR, &Btn_next);
 8009e8c:	462a      	mov	r2, r5
 8009e8e:	4620      	mov	r0, r4
 8009e90:	2101      	movs	r1, #1
 8009e92:	f00c fdb7 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_INA, &Btn_next);
 8009e96:	462a      	mov	r2, r5
 8009e98:	4620      	mov	r0, r4
 8009e9a:	2104      	movs	r1, #4
 8009e9c:	f00c fdb2 	bl	8016a04 <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn1, btn_event_next1);
 8009ea0:	4620      	mov	r0, r4
 8009ea2:	4907      	ldr	r1, [pc, #28]	; (8009ec0 <btn_next1+0x60>)
 8009ea4:	f004 f979 	bl	800e19a <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn1, 112, 18);
 8009ea8:	4620      	mov	r0, r4
 8009eaa:	2212      	movs	r2, #18
 8009eac:	2170      	movs	r1, #112	; 0x70
}
 8009eae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lv_obj_set_pos(imgbtn1, 112, 18);
 8009eb2:	f004 babc 	b.w	800e42e <lv_obj_set_pos>
 8009eb6:	bf00      	nop
 8009eb8:	2000513c 	.word	0x2000513c
 8009ebc:	20001ad8 	.word	0x20001ad8
 8009ec0:	0800a75d 	.word	0x0800a75d

08009ec4 <btn_prev1>:
{
 8009ec4:	b538      	push	{r3, r4, r5, lr}
	lv_obj_t * imgbtn1 = lv_imgbtn_create(Tela_Audio, NULL);
 8009ec6:	4b15      	ldr	r3, [pc, #84]	; (8009f1c <btn_prev1+0x58>)
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_REL, &Btn_prev);
 8009ec8:	4d15      	ldr	r5, [pc, #84]	; (8009f20 <btn_prev1+0x5c>)
	lv_obj_t * imgbtn1 = lv_imgbtn_create(Tela_Audio, NULL);
 8009eca:	6818      	ldr	r0, [r3, #0]
 8009ecc:	2100      	movs	r1, #0
 8009ece:	f00c fd51 	bl	8016974 <lv_imgbtn_create>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_REL, &Btn_prev);
 8009ed2:	462a      	mov	r2, r5
	lv_obj_t * imgbtn1 = lv_imgbtn_create(Tela_Audio, NULL);
 8009ed4:	4604      	mov	r4, r0
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_REL, &Btn_prev);
 8009ed6:	2100      	movs	r1, #0
 8009ed8:	f00c fd94 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_TGL_REL, &Btn_prev);
 8009edc:	462a      	mov	r2, r5
 8009ede:	4620      	mov	r0, r4
 8009ee0:	2102      	movs	r1, #2
 8009ee2:	f00c fd8f 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_TGL_PR, &Btn_prev);
 8009ee6:	462a      	mov	r2, r5
 8009ee8:	4620      	mov	r0, r4
 8009eea:	2103      	movs	r1, #3
 8009eec:	f00c fd8a 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_PR, &Btn_prev);
 8009ef0:	462a      	mov	r2, r5
 8009ef2:	4620      	mov	r0, r4
 8009ef4:	2101      	movs	r1, #1
 8009ef6:	f00c fd85 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_INA, &Btn_prev);
 8009efa:	462a      	mov	r2, r5
 8009efc:	4620      	mov	r0, r4
 8009efe:	2104      	movs	r1, #4
 8009f00:	f00c fd80 	bl	8016a04 <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn1, btn_event_prev1);
 8009f04:	4620      	mov	r0, r4
 8009f06:	4907      	ldr	r1, [pc, #28]	; (8009f24 <btn_prev1+0x60>)
 8009f08:	f004 f947 	bl	800e19a <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn1, 32, 18);
 8009f0c:	4620      	mov	r0, r4
 8009f0e:	2212      	movs	r2, #18
 8009f10:	2120      	movs	r1, #32
}
 8009f12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lv_obj_set_pos(imgbtn1, 32, 18);
 8009f16:	f004 ba8a 	b.w	800e42e <lv_obj_set_pos>
 8009f1a:	bf00      	nop
 8009f1c:	2000513c 	.word	0x2000513c
 8009f20:	20001b44 	.word	0x20001b44
 8009f24:	08009e45 	.word	0x08009e45

08009f28 <screen_audio_1>:
{
 8009f28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	Tela_Audio_1 = lv_obj_create(NULL, NULL);
 8009f2a:	2100      	movs	r1, #0
 8009f2c:	4608      	mov	r0, r1
 8009f2e:	f004 fcf5 	bl	800e91c <lv_obj_create>
	lv_style_copy(&style_indic_vd, &lv_style_pretty);
 8009f32:	4dc0      	ldr	r5, [pc, #768]	; (800a234 <screen_audio_1+0x30c>)
	Tela_Audio_1 = lv_obj_create(NULL, NULL);
 8009f34:	4fc0      	ldr	r7, [pc, #768]	; (800a238 <screen_audio_1+0x310>)
	lv_style_copy(&style_indic_vd, &lv_style_pretty);
 8009f36:	49c1      	ldr	r1, [pc, #772]	; (800a23c <screen_audio_1+0x314>)
	Tela_Audio_1 = lv_obj_create(NULL, NULL);
 8009f38:	6038      	str	r0, [r7, #0]
	lv_style_copy(&style_indic_vd, &lv_style_pretty);
 8009f3a:	4628      	mov	r0, r5
 8009f3c:	f005 fbca 	bl	800f6d4 <lv_style_copy>
	style_indic_vd.body.grad_color = LV_COLOR_LIME;
 8009f40:	792b      	ldrb	r3, [r5, #4]
	lv_style_copy(&style_indic_am, &lv_style_pretty);
 8009f42:	4ebf      	ldr	r6, [pc, #764]	; (800a240 <screen_audio_1+0x318>)
 8009f44:	49bd      	ldr	r1, [pc, #756]	; (800a23c <screen_audio_1+0x314>)
	style_indic_vd.body.radius = 0;
 8009f46:	2400      	movs	r4, #0
	style_indic_vd.body.grad_color = LV_COLOR_LIME;
 8009f48:	f364 0304 	bfi	r3, r4, #0, #5
 8009f4c:	712b      	strb	r3, [r5, #4]
 8009f4e:	88ab      	ldrh	r3, [r5, #4]
	style_indic_vd.body.radius = 0;
 8009f50:	80ec      	strh	r4, [r5, #6]
	style_indic_vd.body.grad_color = LV_COLOR_LIME;
 8009f52:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 8009f56:	80ab      	strh	r3, [r5, #4]
 8009f58:	0a1b      	lsrs	r3, r3, #8
 8009f5a:	f364 03c7 	bfi	r3, r4, #3, #5
 8009f5e:	716b      	strb	r3, [r5, #5]
	style_indic_vd.body.main_color = LV_COLOR_LIME;
 8009f60:	78ab      	ldrb	r3, [r5, #2]
 8009f62:	f364 0304 	bfi	r3, r4, #0, #5
 8009f66:	70ab      	strb	r3, [r5, #2]
 8009f68:	886b      	ldrh	r3, [r5, #2]
 8009f6a:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 8009f6e:	806b      	strh	r3, [r5, #2]
 8009f70:	0a1b      	lsrs	r3, r3, #8
 8009f72:	f364 03c7 	bfi	r3, r4, #3, #5
 8009f76:	70eb      	strb	r3, [r5, #3]
	style_indic_vd.body.border.color = LV_COLOR_LIME;
 8009f78:	7aab      	ldrb	r3, [r5, #10]
 8009f7a:	f364 0304 	bfi	r3, r4, #0, #5
 8009f7e:	72ab      	strb	r3, [r5, #10]
 8009f80:	896b      	ldrh	r3, [r5, #10]
 8009f82:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 8009f86:	816b      	strh	r3, [r5, #10]
 8009f88:	0a1b      	lsrs	r3, r3, #8
 8009f8a:	f364 03c7 	bfi	r3, r4, #3, #5
	lv_style_copy(&style_indic_am, &lv_style_pretty);
 8009f8e:	4630      	mov	r0, r6
	style_indic_vd.body.border.color = LV_COLOR_LIME;
 8009f90:	72eb      	strb	r3, [r5, #11]
	lv_style_copy(&style_indic_am, &lv_style_pretty);
 8009f92:	f005 fb9f 	bl	800f6d4 <lv_style_copy>
	style_indic_am.body.grad_color = LV_COLOR_YELLOW;
 8009f96:	7933      	ldrb	r3, [r6, #4]
	style_indic_am.body.radius = 0;
 8009f98:	80f4      	strh	r4, [r6, #6]
	style_indic_am.body.grad_color = LV_COLOR_YELLOW;
 8009f9a:	f364 0304 	bfi	r3, r4, #0, #5
 8009f9e:	7133      	strb	r3, [r6, #4]
 8009fa0:	88b3      	ldrh	r3, [r6, #4]
	lv_style_copy(&style_indic, &lv_style_pretty);
 8009fa2:	49a6      	ldr	r1, [pc, #664]	; (800a23c <screen_audio_1+0x314>)
	style_indic_am.body.grad_color = LV_COLOR_YELLOW;
 8009fa4:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 8009fa8:	80b3      	strh	r3, [r6, #4]
 8009faa:	0a1b      	lsrs	r3, r3, #8
 8009fac:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 8009fb0:	7173      	strb	r3, [r6, #5]
	style_indic_am.body.main_color = LV_COLOR_YELLOW;
 8009fb2:	78b3      	ldrb	r3, [r6, #2]
 8009fb4:	f364 0304 	bfi	r3, r4, #0, #5
 8009fb8:	70b3      	strb	r3, [r6, #2]
 8009fba:	8873      	ldrh	r3, [r6, #2]
 8009fbc:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 8009fc0:	8073      	strh	r3, [r6, #2]
 8009fc2:	0a1b      	lsrs	r3, r3, #8
 8009fc4:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 8009fc8:	70f3      	strb	r3, [r6, #3]
	style_indic_am.body.border.color = LV_COLOR_YELLOW;
 8009fca:	7ab3      	ldrb	r3, [r6, #10]
 8009fcc:	f364 0304 	bfi	r3, r4, #0, #5
 8009fd0:	72b3      	strb	r3, [r6, #10]
 8009fd2:	8973      	ldrh	r3, [r6, #10]
 8009fd4:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 8009fd8:	8173      	strh	r3, [r6, #10]
 8009fda:	0a1b      	lsrs	r3, r3, #8
 8009fdc:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 8009fe0:	72f3      	strb	r3, [r6, #11]
	lv_style_copy(&style_indic, &lv_style_pretty);
 8009fe2:	4e98      	ldr	r6, [pc, #608]	; (800a244 <screen_audio_1+0x31c>)
 8009fe4:	4630      	mov	r0, r6
 8009fe6:	f005 fb75 	bl	800f6d4 <lv_style_copy>
	style_indic.body.grad_color = LV_COLOR_BLACK;
 8009fea:	7933      	ldrb	r3, [r6, #4]
	style_indic.body.radius = 0;
 8009fec:	80f4      	strh	r4, [r6, #6]
	style_indic.body.grad_color = LV_COLOR_BLACK;
 8009fee:	f364 0304 	bfi	r3, r4, #0, #5
 8009ff2:	7133      	strb	r3, [r6, #4]
 8009ff4:	88b3      	ldrh	r3, [r6, #4]
 8009ff6:	f364 134a 	bfi	r3, r4, #5, #6
 8009ffa:	80b3      	strh	r3, [r6, #4]
 8009ffc:	0a1b      	lsrs	r3, r3, #8
 8009ffe:	f364 03c7 	bfi	r3, r4, #3, #5
 800a002:	7173      	strb	r3, [r6, #5]
	style_indic.body.main_color = LV_COLOR_BLACK;
 800a004:	78b3      	ldrb	r3, [r6, #2]
 800a006:	f364 0304 	bfi	r3, r4, #0, #5
 800a00a:	70b3      	strb	r3, [r6, #2]
 800a00c:	8873      	ldrh	r3, [r6, #2]
 800a00e:	f364 134a 	bfi	r3, r4, #5, #6
 800a012:	8073      	strh	r3, [r6, #2]
 800a014:	0a1b      	lsrs	r3, r3, #8
 800a016:	f364 03c7 	bfi	r3, r4, #3, #5
 800a01a:	70f3      	strb	r3, [r6, #3]
	style_indic.body.border.color = LV_COLOR_BLACK;
 800a01c:	7ab3      	ldrb	r3, [r6, #10]
 800a01e:	f364 0304 	bfi	r3, r4, #0, #5
 800a022:	72b3      	strb	r3, [r6, #10]
 800a024:	8973      	ldrh	r3, [r6, #10]
 800a026:	f364 134a 	bfi	r3, r4, #5, #6
 800a02a:	8173      	strh	r3, [r6, #10]
 800a02c:	0a1b      	lsrs	r3, r3, #8
 800a02e:	f364 03c7 	bfi	r3, r4, #3, #5
 800a032:	72f3      	strb	r3, [r6, #11]
	img_fundo = lv_img_create(Tela_Audio_1, NULL);
 800a034:	4621      	mov	r1, r4
 800a036:	6838      	ldr	r0, [r7, #0]
 800a038:	4e83      	ldr	r6, [pc, #524]	; (800a248 <screen_audio_1+0x320>)
 800a03a:	f00c fb71 	bl	8016720 <lv_img_create>
    lv_img_set_src(img_fundo, &tela_audio_1);
 800a03e:	4983      	ldr	r1, [pc, #524]	; (800a24c <screen_audio_1+0x324>)
	img_fundo = lv_img_create(Tela_Audio_1, NULL);
 800a040:	6030      	str	r0, [r6, #0]
    lv_img_set_src(img_fundo, &tela_audio_1);
 800a042:	f00c fadd 	bl	8016600 <lv_img_set_src>
    lv_obj_set_protect(img_fundo, LV_PROTECT_POS);
 800a046:	6830      	ldr	r0, [r6, #0]
	imgbtn1[0] = lv_imgbtn_create(Tela_Audio_1, NULL);
 800a048:	4e81      	ldr	r6, [pc, #516]	; (800a250 <screen_audio_1+0x328>)
    lv_obj_set_protect(img_fundo, LV_PROTECT_POS);
 800a04a:	2104      	movs	r1, #4
 800a04c:	f004 f898 	bl	800e180 <lv_obj_set_protect>
	btn_next1();
 800a050:	f7ff ff06 	bl	8009e60 <btn_next1>
	btn_prev1();
 800a054:	f7ff ff36 	bl	8009ec4 <btn_prev1>
	imgbtn1[0] = lv_imgbtn_create(Tela_Audio_1, NULL);
 800a058:	4621      	mov	r1, r4
 800a05a:	6838      	ldr	r0, [r7, #0]
 800a05c:	f00c fc8a 	bl	8016974 <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn1[0], 0);
 800a060:	4621      	mov	r1, r4
	imgbtn1[0] = lv_imgbtn_create(Tela_Audio_1, NULL);
 800a062:	6030      	str	r0, [r6, #0]
	lv_obj_set_user_data(imgbtn1[0], 0);
 800a064:	f004 fff7 	bl	800f056 <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_REL, &Btn_75u);
 800a068:	6830      	ldr	r0, [r6, #0]
 800a06a:	4a7a      	ldr	r2, [pc, #488]	; (800a254 <screen_audio_1+0x32c>)
 800a06c:	4621      	mov	r1, r4
 800a06e:	f00c fcc9 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_TGL_REL, &Btn_75u_am);
 800a072:	6830      	ldr	r0, [r6, #0]
 800a074:	4a78      	ldr	r2, [pc, #480]	; (800a258 <screen_audio_1+0x330>)
 800a076:	2102      	movs	r1, #2
 800a078:	f00c fcc4 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_TGL_PR, &Btn_75u_am);
 800a07c:	6830      	ldr	r0, [r6, #0]
 800a07e:	4a76      	ldr	r2, [pc, #472]	; (800a258 <screen_audio_1+0x330>)
 800a080:	2103      	movs	r1, #3
 800a082:	f00c fcbf 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_PR, &Btn_75u_am);
 800a086:	6830      	ldr	r0, [r6, #0]
 800a088:	4a73      	ldr	r2, [pc, #460]	; (800a258 <screen_audio_1+0x330>)
 800a08a:	2101      	movs	r1, #1
 800a08c:	f00c fcba 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_INA, &Btn_75u_am);
 800a090:	4a71      	ldr	r2, [pc, #452]	; (800a258 <screen_audio_1+0x330>)
 800a092:	6830      	ldr	r0, [r6, #0]
 800a094:	2104      	movs	r1, #4
 800a096:	f00c fcb5 	bl	8016a04 <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn1[0], btn_emphase);
 800a09a:	6830      	ldr	r0, [r6, #0]
 800a09c:	496f      	ldr	r1, [pc, #444]	; (800a25c <screen_audio_1+0x334>)
 800a09e:	f004 f87c 	bl	800e19a <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn1[0], 5, 63);
 800a0a2:	223f      	movs	r2, #63	; 0x3f
 800a0a4:	6830      	ldr	r0, [r6, #0]
 800a0a6:	2105      	movs	r1, #5
 800a0a8:	f004 f9c1 	bl	800e42e <lv_obj_set_pos>
	imgbtn1[1] = lv_imgbtn_create(Tela_Audio_1, imgbtn1[0]);
 800a0ac:	6831      	ldr	r1, [r6, #0]
 800a0ae:	6838      	ldr	r0, [r7, #0]
 800a0b0:	f00c fc60 	bl	8016974 <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn1[1], 1);
 800a0b4:	2101      	movs	r1, #1
	imgbtn1[1] = lv_imgbtn_create(Tela_Audio_1, imgbtn1[0]);
 800a0b6:	6070      	str	r0, [r6, #4]
	lv_obj_set_user_data(imgbtn1[1], 1);
 800a0b8:	f004 ffcd 	bl	800f056 <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_REL, &Btn_50u);
 800a0bc:	6870      	ldr	r0, [r6, #4]
 800a0be:	4a68      	ldr	r2, [pc, #416]	; (800a260 <screen_audio_1+0x338>)
 800a0c0:	4621      	mov	r1, r4
 800a0c2:	f00c fc9f 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_TGL_REL, &Btn_50u_am);
 800a0c6:	6870      	ldr	r0, [r6, #4]
 800a0c8:	4a66      	ldr	r2, [pc, #408]	; (800a264 <screen_audio_1+0x33c>)
 800a0ca:	2102      	movs	r1, #2
 800a0cc:	f00c fc9a 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_TGL_PR, &Btn_50u_am);
 800a0d0:	6870      	ldr	r0, [r6, #4]
 800a0d2:	4a64      	ldr	r2, [pc, #400]	; (800a264 <screen_audio_1+0x33c>)
 800a0d4:	2103      	movs	r1, #3
 800a0d6:	f00c fc95 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_PR, &Btn_50u_am);
 800a0da:	6870      	ldr	r0, [r6, #4]
 800a0dc:	4a61      	ldr	r2, [pc, #388]	; (800a264 <screen_audio_1+0x33c>)
 800a0de:	2101      	movs	r1, #1
 800a0e0:	f00c fc90 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_INA, &Btn_50u_am);
 800a0e4:	6870      	ldr	r0, [r6, #4]
 800a0e6:	4a5f      	ldr	r2, [pc, #380]	; (800a264 <screen_audio_1+0x33c>)
 800a0e8:	2104      	movs	r1, #4
 800a0ea:	f00c fc8b 	bl	8016a04 <lv_imgbtn_set_src>
	lv_obj_set_pos(imgbtn1[1], 5, 83);
 800a0ee:	2253      	movs	r2, #83	; 0x53
 800a0f0:	6870      	ldr	r0, [r6, #4]
	bar[0] = lv_bar_create(Tela_Audio, NULL);
 800a0f2:	4e5d      	ldr	r6, [pc, #372]	; (800a268 <screen_audio_1+0x340>)
	lv_obj_set_pos(imgbtn1[1], 5, 83);
 800a0f4:	2105      	movs	r1, #5
 800a0f6:	f004 f99a 	bl	800e42e <lv_obj_set_pos>
	bar[0] = lv_bar_create(Tela_Audio, NULL);
 800a0fa:	4b5c      	ldr	r3, [pc, #368]	; (800a26c <screen_audio_1+0x344>)
 800a0fc:	4621      	mov	r1, r4
 800a0fe:	6818      	ldr	r0, [r3, #0]
 800a100:	f00a fbca 	bl	8014898 <lv_bar_create>
	lv_obj_set_size(bar[0], 16, 8);
 800a104:	2208      	movs	r2, #8
 800a106:	2110      	movs	r1, #16
	bar[0] = lv_bar_create(Tela_Audio, NULL);
 800a108:	6030      	str	r0, [r6, #0]
	lv_obj_set_size(bar[0], 16, 8);
 800a10a:	f004 fd85 	bl	800ec18 <lv_obj_set_size>
	lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);
 800a10e:	462a      	mov	r2, r5
 800a110:	4621      	mov	r1, r4
 800a112:	6830      	ldr	r0, [r6, #0]
 800a114:	f00a fbaa 	bl	801486c <lv_bar_set_style>
	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800a118:	462a      	mov	r2, r5
 800a11a:	2101      	movs	r1, #1
 800a11c:	6830      	ldr	r0, [r6, #0]
 800a11e:	f00a fba5 	bl	801486c <lv_bar_set_style>
	lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 67);
 800a122:	2343      	movs	r3, #67	; 0x43
 800a124:	9300      	str	r3, [sp, #0]
 800a126:	2201      	movs	r2, #1
 800a128:	2336      	movs	r3, #54	; 0x36
 800a12a:	4621      	mov	r1, r4
 800a12c:	6830      	ldr	r0, [r6, #0]
 800a12e:	f004 f9d3 	bl	800e4d8 <lv_obj_align>
	lv_bar_set_value(bar[0], 100, 0);
 800a132:	2164      	movs	r1, #100	; 0x64
 800a134:	4622      	mov	r2, r4
 800a136:	6830      	ldr	r0, [r6, #0]
 800a138:	f00a fb3c 	bl	80147b4 <lv_bar_set_value>
	if(Cfg_Emphase) {
 800a13c:	4b4c      	ldr	r3, [pc, #304]	; (800a270 <screen_audio_1+0x348>)
 800a13e:	7819      	ldrb	r1, [r3, #0]
 800a140:	2900      	cmp	r1, #0
 800a142:	f000 80b9 	beq.w	800a2b8 <screen_audio_1+0x390>
		lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 68);
 800a146:	2344      	movs	r3, #68	; 0x44
 800a148:	9300      	str	r3, [sp, #0]
 800a14a:	2201      	movs	r2, #1
 800a14c:	2336      	movs	r3, #54	; 0x36
 800a14e:	4621      	mov	r1, r4
		lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 88);
 800a150:	6830      	ldr	r0, [r6, #0]
	imgbtn2[0] = lv_imgbtn_create(Tela_Audio_1, NULL);
 800a152:	4c48      	ldr	r4, [pc, #288]	; (800a274 <screen_audio_1+0x34c>)
		lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 88);
 800a154:	f004 f9c0 	bl	800e4d8 <lv_obj_align>
	imgbtn2[0] = lv_imgbtn_create(Tela_Audio_1, NULL);
 800a158:	2100      	movs	r1, #0
 800a15a:	6838      	ldr	r0, [r7, #0]
 800a15c:	f00c fc0a 	bl	8016974 <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn2[0], 0);
 800a160:	2100      	movs	r1, #0
	imgbtn2[0] = lv_imgbtn_create(Tela_Audio_1, NULL);
 800a162:	6020      	str	r0, [r4, #0]
	lv_obj_set_user_data(imgbtn2[0], 0);
 800a164:	f004 ff77 	bl	800f056 <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn2[0], LV_BTN_STATE_REL, &Btn_on);
 800a168:	6820      	ldr	r0, [r4, #0]
 800a16a:	4a43      	ldr	r2, [pc, #268]	; (800a278 <screen_audio_1+0x350>)
 800a16c:	2100      	movs	r1, #0
 800a16e:	f00c fc49 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[0], LV_BTN_STATE_TGL_REL, &Btn_on_am);
 800a172:	6820      	ldr	r0, [r4, #0]
 800a174:	4a41      	ldr	r2, [pc, #260]	; (800a27c <screen_audio_1+0x354>)
 800a176:	2102      	movs	r1, #2
 800a178:	f00c fc44 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[0], LV_BTN_STATE_TGL_PR, &Btn_on_am);
 800a17c:	6820      	ldr	r0, [r4, #0]
 800a17e:	4a3f      	ldr	r2, [pc, #252]	; (800a27c <screen_audio_1+0x354>)
 800a180:	2103      	movs	r1, #3
 800a182:	f00c fc3f 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[0], LV_BTN_STATE_PR, &Btn_on_am);
 800a186:	6820      	ldr	r0, [r4, #0]
 800a188:	4a3c      	ldr	r2, [pc, #240]	; (800a27c <screen_audio_1+0x354>)
 800a18a:	2101      	movs	r1, #1
 800a18c:	f00c fc3a 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[0], LV_BTN_STATE_INA, &Btn_on_am);
 800a190:	4a3a      	ldr	r2, [pc, #232]	; (800a27c <screen_audio_1+0x354>)
 800a192:	6820      	ldr	r0, [r4, #0]
 800a194:	2104      	movs	r1, #4
 800a196:	f00c fc35 	bl	8016a04 <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn2[0], btn_processador);
 800a19a:	6820      	ldr	r0, [r4, #0]
 800a19c:	4938      	ldr	r1, [pc, #224]	; (800a280 <screen_audio_1+0x358>)
 800a19e:	f003 fffc 	bl	800e19a <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn2[0], 83, 63);
 800a1a2:	223f      	movs	r2, #63	; 0x3f
 800a1a4:	6820      	ldr	r0, [r4, #0]
 800a1a6:	2153      	movs	r1, #83	; 0x53
 800a1a8:	f004 f941 	bl	800e42e <lv_obj_set_pos>
	imgbtn2[1] = lv_imgbtn_create(Tela_Audio_1, imgbtn2[0]);
 800a1ac:	6821      	ldr	r1, [r4, #0]
 800a1ae:	6838      	ldr	r0, [r7, #0]
 800a1b0:	f00c fbe0 	bl	8016974 <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn2[1], 1);
 800a1b4:	2101      	movs	r1, #1
	imgbtn2[1] = lv_imgbtn_create(Tela_Audio_1, imgbtn2[0]);
 800a1b6:	6060      	str	r0, [r4, #4]
	lv_obj_set_user_data(imgbtn2[1], 1);
 800a1b8:	f004 ff4d 	bl	800f056 <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn2[1], LV_BTN_STATE_REL, &Btn_off);
 800a1bc:	6860      	ldr	r0, [r4, #4]
 800a1be:	4a31      	ldr	r2, [pc, #196]	; (800a284 <screen_audio_1+0x35c>)
 800a1c0:	2100      	movs	r1, #0
 800a1c2:	f00c fc1f 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[1], LV_BTN_STATE_TGL_REL, &Btn_off_am);
 800a1c6:	6860      	ldr	r0, [r4, #4]
 800a1c8:	4a2f      	ldr	r2, [pc, #188]	; (800a288 <screen_audio_1+0x360>)
 800a1ca:	2102      	movs	r1, #2
 800a1cc:	f00c fc1a 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[1], LV_BTN_STATE_TGL_PR, &Btn_off_am);
 800a1d0:	6860      	ldr	r0, [r4, #4]
 800a1d2:	4a2d      	ldr	r2, [pc, #180]	; (800a288 <screen_audio_1+0x360>)
 800a1d4:	2103      	movs	r1, #3
 800a1d6:	f00c fc15 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[1], LV_BTN_STATE_PR, &Btn_off_am);
 800a1da:	6860      	ldr	r0, [r4, #4]
 800a1dc:	4a2a      	ldr	r2, [pc, #168]	; (800a288 <screen_audio_1+0x360>)
 800a1de:	2101      	movs	r1, #1
 800a1e0:	f00c fc10 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[1], LV_BTN_STATE_INA, &Btn_off_am);
 800a1e4:	6860      	ldr	r0, [r4, #4]
 800a1e6:	4a28      	ldr	r2, [pc, #160]	; (800a288 <screen_audio_1+0x360>)
 800a1e8:	2104      	movs	r1, #4
 800a1ea:	f00c fc0b 	bl	8016a04 <lv_imgbtn_set_src>
	lv_obj_set_pos(imgbtn2[1], 83, 83);
 800a1ee:	2253      	movs	r2, #83	; 0x53
 800a1f0:	4611      	mov	r1, r2
 800a1f2:	6860      	ldr	r0, [r4, #4]
 800a1f4:	f004 f91b 	bl	800e42e <lv_obj_set_pos>
	bar[1] = lv_bar_create(Tela_Audio_1, NULL);
 800a1f8:	2100      	movs	r1, #0
 800a1fa:	6838      	ldr	r0, [r7, #0]
 800a1fc:	f00a fb4c 	bl	8014898 <lv_bar_create>
	lv_obj_set_size(bar[1], 16, 8);
 800a200:	2208      	movs	r2, #8
 800a202:	2110      	movs	r1, #16
	bar[1] = lv_bar_create(Tela_Audio_1, NULL);
 800a204:	6070      	str	r0, [r6, #4]
	lv_obj_set_size(bar[1], 16, 8);
 800a206:	f004 fd07 	bl	800ec18 <lv_obj_set_size>
	lv_bar_set_style(bar[1], LV_BAR_STYLE_BG, &style_indic_vd);
 800a20a:	4a0a      	ldr	r2, [pc, #40]	; (800a234 <screen_audio_1+0x30c>)
 800a20c:	6870      	ldr	r0, [r6, #4]
 800a20e:	2100      	movs	r1, #0
 800a210:	f00a fb2c 	bl	801486c <lv_bar_set_style>
	lv_obj_align(bar[1], NULL, LV_ALIGN_IN_TOP_LEFT, 132, 68);
 800a214:	2444      	movs	r4, #68	; 0x44
	lv_bar_set_style(bar[1], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800a216:	4a07      	ldr	r2, [pc, #28]	; (800a234 <screen_audio_1+0x30c>)
 800a218:	6870      	ldr	r0, [r6, #4]
 800a21a:	2101      	movs	r1, #1
 800a21c:	f00a fb26 	bl	801486c <lv_bar_set_style>
	lv_obj_align(bar[1], NULL, LV_ALIGN_IN_TOP_LEFT, 132, 68);
 800a220:	9400      	str	r4, [sp, #0]
 800a222:	2384      	movs	r3, #132	; 0x84
 800a224:	2201      	movs	r2, #1
 800a226:	2100      	movs	r1, #0
 800a228:	6870      	ldr	r0, [r6, #4]
 800a22a:	f004 f955 	bl	800e4d8 <lv_obj_align>
	lv_bar_set_value(bar[1], 100, 0);
 800a22e:	2164      	movs	r1, #100	; 0x64
 800a230:	e02c      	b.n	800a28c <screen_audio_1+0x364>
 800a232:	bf00      	nop
 800a234:	200051e4 	.word	0x200051e4
 800a238:	20005140 	.word	0x20005140
 800a23c:	2000c334 	.word	0x2000c334
 800a240:	200051a8 	.word	0x200051a8
 800a244:	2000516c 	.word	0x2000516c
 800a248:	20005150 	.word	0x20005150
 800a24c:	20001b98 	.word	0x20001b98
 800a250:	20005154 	.word	0x20005154
 800a254:	20001988 	.word	0x20001988
 800a258:	20001994 	.word	0x20001994
 800a25c:	08009859 	.word	0x08009859
 800a260:	20001970 	.word	0x20001970
 800a264:	2000197c 	.word	0x2000197c
 800a268:	20005148 	.word	0x20005148
 800a26c:	2000513c 	.word	0x2000513c
 800a270:	200033c4 	.word	0x200033c4
 800a274:	2000515c 	.word	0x2000515c
 800a278:	20001afc 	.word	0x20001afc
 800a27c:	20001b08 	.word	0x20001b08
 800a280:	0800980d 	.word	0x0800980d
 800a284:	20001ae4 	.word	0x20001ae4
 800a288:	20001af0 	.word	0x20001af0
 800a28c:	2200      	movs	r2, #0
 800a28e:	6870      	ldr	r0, [r6, #4]
 800a290:	f00a fa90 	bl	80147b4 <lv_bar_set_value>
	if(Cfg_Processador) {
 800a294:	4b0d      	ldr	r3, [pc, #52]	; (800a2cc <screen_audio_1+0x3a4>)
 800a296:	7819      	ldrb	r1, [r3, #0]
 800a298:	b199      	cbz	r1, 800a2c2 <screen_audio_1+0x39a>
		lv_obj_align(bar[1], NULL, LV_ALIGN_IN_TOP_LEFT, 132, 68);
 800a29a:	9400      	str	r4, [sp, #0]
 800a29c:	2384      	movs	r3, #132	; 0x84
 800a29e:	2201      	movs	r2, #1
 800a2a0:	2100      	movs	r1, #0
		lv_obj_align(bar[1], NULL, LV_ALIGN_IN_TOP_LEFT, 132, 88);
 800a2a2:	6870      	ldr	r0, [r6, #4]
 800a2a4:	f004 f918 	bl	800e4d8 <lv_obj_align>
 800a2a8:	6838      	ldr	r0, [r7, #0]
 800a2aa:	f003 fd23 	bl	800dcf4 <lv_disp_load_scr>
	TelaAtiva = TelaAudio_1;
 800a2ae:	4b08      	ldr	r3, [pc, #32]	; (800a2d0 <screen_audio_1+0x3a8>)
 800a2b0:	2204      	movs	r2, #4
 800a2b2:	601a      	str	r2, [r3, #0]
}
 800a2b4:	b003      	add	sp, #12
 800a2b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 88);
 800a2b8:	2358      	movs	r3, #88	; 0x58
 800a2ba:	9300      	str	r3, [sp, #0]
 800a2bc:	2201      	movs	r2, #1
 800a2be:	2336      	movs	r3, #54	; 0x36
 800a2c0:	e746      	b.n	800a150 <screen_audio_1+0x228>
		lv_obj_align(bar[1], NULL, LV_ALIGN_IN_TOP_LEFT, 132, 88);
 800a2c2:	2358      	movs	r3, #88	; 0x58
 800a2c4:	9300      	str	r3, [sp, #0]
 800a2c6:	2201      	movs	r2, #1
 800a2c8:	2384      	movs	r3, #132	; 0x84
 800a2ca:	e7ea      	b.n	800a2a2 <screen_audio_1+0x37a>
 800a2cc:	200033c5 	.word	0x200033c5
 800a2d0:	200033cc 	.word	0x200033cc

0800a2d4 <btn_event_next>:
	if(event == LV_EVENT_RELEASED) {
 800a2d4:	2907      	cmp	r1, #7
{
 800a2d6:	b508      	push	{r3, lr}
	if(event == LV_EVENT_RELEASED) {
 800a2d8:	d107      	bne.n	800a2ea <btn_event_next+0x16>
		lv_obj_del(Tela_Audio);
 800a2da:	4b04      	ldr	r3, [pc, #16]	; (800a2ec <btn_event_next+0x18>)
 800a2dc:	6818      	ldr	r0, [r3, #0]
 800a2de:	f004 fd0e 	bl	800ecfe <lv_obj_del>
}
 800a2e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_audio_1();
 800a2e6:	f7ff be1f 	b.w	8009f28 <screen_audio_1>
 800a2ea:	bd08      	pop	{r3, pc}
 800a2ec:	2000513c 	.word	0x2000513c

0800a2f0 <btn_event_prev2>:
	if(event == LV_EVENT_RELEASED) {
 800a2f0:	2907      	cmp	r1, #7
{
 800a2f2:	b508      	push	{r3, lr}
	if(event == LV_EVENT_RELEASED) {
 800a2f4:	d107      	bne.n	800a306 <btn_event_prev2+0x16>
		lv_obj_del(Tela_Audio_2);
 800a2f6:	4b04      	ldr	r3, [pc, #16]	; (800a308 <btn_event_prev2+0x18>)
 800a2f8:	6818      	ldr	r0, [r3, #0]
 800a2fa:	f004 fd00 	bl	800ecfe <lv_obj_del>
}
 800a2fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_audio_1();
 800a302:	f7ff be11 	b.w	8009f28 <screen_audio_1>
 800a306:	bd08      	pop	{r3, pc}
 800a308:	20005144 	.word	0x20005144

0800a30c <btn_prev2>:
{
 800a30c:	b538      	push	{r3, r4, r5, lr}
	lv_obj_t * imgbtn1 = lv_imgbtn_create(Tela_Audio, NULL);
 800a30e:	4b15      	ldr	r3, [pc, #84]	; (800a364 <btn_prev2+0x58>)
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_REL, &Btn_prev);
 800a310:	4d15      	ldr	r5, [pc, #84]	; (800a368 <btn_prev2+0x5c>)
	lv_obj_t * imgbtn1 = lv_imgbtn_create(Tela_Audio, NULL);
 800a312:	6818      	ldr	r0, [r3, #0]
 800a314:	2100      	movs	r1, #0
 800a316:	f00c fb2d 	bl	8016974 <lv_imgbtn_create>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_REL, &Btn_prev);
 800a31a:	462a      	mov	r2, r5
	lv_obj_t * imgbtn1 = lv_imgbtn_create(Tela_Audio, NULL);
 800a31c:	4604      	mov	r4, r0
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_REL, &Btn_prev);
 800a31e:	2100      	movs	r1, #0
 800a320:	f00c fb70 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_TGL_REL, &Btn_prev);
 800a324:	462a      	mov	r2, r5
 800a326:	4620      	mov	r0, r4
 800a328:	2102      	movs	r1, #2
 800a32a:	f00c fb6b 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_TGL_PR, &Btn_prev);
 800a32e:	462a      	mov	r2, r5
 800a330:	4620      	mov	r0, r4
 800a332:	2103      	movs	r1, #3
 800a334:	f00c fb66 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_PR, &Btn_prev);
 800a338:	462a      	mov	r2, r5
 800a33a:	4620      	mov	r0, r4
 800a33c:	2101      	movs	r1, #1
 800a33e:	f00c fb61 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_INA, &Btn_prev);
 800a342:	462a      	mov	r2, r5
 800a344:	4620      	mov	r0, r4
 800a346:	2104      	movs	r1, #4
 800a348:	f00c fb5c 	bl	8016a04 <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn1, btn_event_prev2);
 800a34c:	4620      	mov	r0, r4
 800a34e:	4907      	ldr	r1, [pc, #28]	; (800a36c <btn_prev2+0x60>)
 800a350:	f003 ff23 	bl	800e19a <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn1, 32, 18);
 800a354:	4620      	mov	r0, r4
 800a356:	2212      	movs	r2, #18
 800a358:	2120      	movs	r1, #32
}
 800a35a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lv_obj_set_pos(imgbtn1, 32, 18);
 800a35e:	f004 b866 	b.w	800e42e <lv_obj_set_pos>
 800a362:	bf00      	nop
 800a364:	2000513c 	.word	0x2000513c
 800a368:	20001b44 	.word	0x20001b44
 800a36c:	0800a2f1 	.word	0x0800a2f1

0800a370 <screen_audio_2>:
{
 800a370:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	Tela_Audio_2 = lv_obj_create(NULL, NULL);
 800a372:	2100      	movs	r1, #0
 800a374:	4608      	mov	r0, r1
 800a376:	f004 fad1 	bl	800e91c <lv_obj_create>
	lv_style_copy(&style_indic_vd, &lv_style_pretty);
 800a37a:	4dbe      	ldr	r5, [pc, #760]	; (800a674 <screen_audio_2+0x304>)
	Tela_Audio_2 = lv_obj_create(NULL, NULL);
 800a37c:	4fbe      	ldr	r7, [pc, #760]	; (800a678 <screen_audio_2+0x308>)
	lv_style_copy(&style_indic_vd, &lv_style_pretty);
 800a37e:	49bf      	ldr	r1, [pc, #764]	; (800a67c <screen_audio_2+0x30c>)
	Tela_Audio_2 = lv_obj_create(NULL, NULL);
 800a380:	6038      	str	r0, [r7, #0]
	lv_style_copy(&style_indic_vd, &lv_style_pretty);
 800a382:	4628      	mov	r0, r5
 800a384:	f005 f9a6 	bl	800f6d4 <lv_style_copy>
	style_indic_vd.body.grad_color = LV_COLOR_LIME;
 800a388:	792b      	ldrb	r3, [r5, #4]
	lv_style_copy(&style_indic_am, &lv_style_pretty);
 800a38a:	4ebd      	ldr	r6, [pc, #756]	; (800a680 <screen_audio_2+0x310>)
 800a38c:	49bb      	ldr	r1, [pc, #748]	; (800a67c <screen_audio_2+0x30c>)
	style_indic_vd.body.radius = 0;
 800a38e:	2400      	movs	r4, #0
	style_indic_vd.body.grad_color = LV_COLOR_LIME;
 800a390:	f364 0304 	bfi	r3, r4, #0, #5
 800a394:	712b      	strb	r3, [r5, #4]
 800a396:	88ab      	ldrh	r3, [r5, #4]
	style_indic_vd.body.radius = 0;
 800a398:	80ec      	strh	r4, [r5, #6]
	style_indic_vd.body.grad_color = LV_COLOR_LIME;
 800a39a:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800a39e:	80ab      	strh	r3, [r5, #4]
 800a3a0:	0a1b      	lsrs	r3, r3, #8
 800a3a2:	f364 03c7 	bfi	r3, r4, #3, #5
 800a3a6:	716b      	strb	r3, [r5, #5]
	style_indic_vd.body.main_color = LV_COLOR_LIME;
 800a3a8:	78ab      	ldrb	r3, [r5, #2]
 800a3aa:	f364 0304 	bfi	r3, r4, #0, #5
 800a3ae:	70ab      	strb	r3, [r5, #2]
 800a3b0:	886b      	ldrh	r3, [r5, #2]
 800a3b2:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800a3b6:	806b      	strh	r3, [r5, #2]
 800a3b8:	0a1b      	lsrs	r3, r3, #8
 800a3ba:	f364 03c7 	bfi	r3, r4, #3, #5
 800a3be:	70eb      	strb	r3, [r5, #3]
	style_indic_vd.body.border.color = LV_COLOR_LIME;
 800a3c0:	7aab      	ldrb	r3, [r5, #10]
 800a3c2:	f364 0304 	bfi	r3, r4, #0, #5
 800a3c6:	72ab      	strb	r3, [r5, #10]
 800a3c8:	896b      	ldrh	r3, [r5, #10]
 800a3ca:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800a3ce:	816b      	strh	r3, [r5, #10]
 800a3d0:	0a1b      	lsrs	r3, r3, #8
 800a3d2:	f364 03c7 	bfi	r3, r4, #3, #5
	lv_style_copy(&style_indic_am, &lv_style_pretty);
 800a3d6:	4630      	mov	r0, r6
	style_indic_vd.body.border.color = LV_COLOR_LIME;
 800a3d8:	72eb      	strb	r3, [r5, #11]
	lv_style_copy(&style_indic_am, &lv_style_pretty);
 800a3da:	f005 f97b 	bl	800f6d4 <lv_style_copy>
	style_indic_am.body.grad_color = LV_COLOR_YELLOW;
 800a3de:	7933      	ldrb	r3, [r6, #4]
	style_indic_am.body.radius = 0;
 800a3e0:	80f4      	strh	r4, [r6, #6]
	style_indic_am.body.grad_color = LV_COLOR_YELLOW;
 800a3e2:	f364 0304 	bfi	r3, r4, #0, #5
 800a3e6:	7133      	strb	r3, [r6, #4]
 800a3e8:	88b3      	ldrh	r3, [r6, #4]
	lv_style_copy(&style_indic, &lv_style_pretty);
 800a3ea:	49a4      	ldr	r1, [pc, #656]	; (800a67c <screen_audio_2+0x30c>)
	style_indic_am.body.grad_color = LV_COLOR_YELLOW;
 800a3ec:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800a3f0:	80b3      	strh	r3, [r6, #4]
 800a3f2:	0a1b      	lsrs	r3, r3, #8
 800a3f4:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 800a3f8:	7173      	strb	r3, [r6, #5]
	style_indic_am.body.main_color = LV_COLOR_YELLOW;
 800a3fa:	78b3      	ldrb	r3, [r6, #2]
 800a3fc:	f364 0304 	bfi	r3, r4, #0, #5
 800a400:	70b3      	strb	r3, [r6, #2]
 800a402:	8873      	ldrh	r3, [r6, #2]
 800a404:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800a408:	8073      	strh	r3, [r6, #2]
 800a40a:	0a1b      	lsrs	r3, r3, #8
 800a40c:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 800a410:	70f3      	strb	r3, [r6, #3]
	style_indic_am.body.border.color = LV_COLOR_YELLOW;
 800a412:	7ab3      	ldrb	r3, [r6, #10]
 800a414:	f364 0304 	bfi	r3, r4, #0, #5
 800a418:	72b3      	strb	r3, [r6, #10]
 800a41a:	8973      	ldrh	r3, [r6, #10]
 800a41c:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800a420:	8173      	strh	r3, [r6, #10]
 800a422:	0a1b      	lsrs	r3, r3, #8
 800a424:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 800a428:	72f3      	strb	r3, [r6, #11]
	lv_style_copy(&style_indic, &lv_style_pretty);
 800a42a:	4e96      	ldr	r6, [pc, #600]	; (800a684 <screen_audio_2+0x314>)
 800a42c:	4630      	mov	r0, r6
 800a42e:	f005 f951 	bl	800f6d4 <lv_style_copy>
	style_indic.body.grad_color = LV_COLOR_BLACK;
 800a432:	7933      	ldrb	r3, [r6, #4]
	style_indic.body.radius = 0;
 800a434:	80f4      	strh	r4, [r6, #6]
	style_indic.body.grad_color = LV_COLOR_BLACK;
 800a436:	f364 0304 	bfi	r3, r4, #0, #5
 800a43a:	7133      	strb	r3, [r6, #4]
 800a43c:	88b3      	ldrh	r3, [r6, #4]
 800a43e:	f364 134a 	bfi	r3, r4, #5, #6
 800a442:	80b3      	strh	r3, [r6, #4]
 800a444:	0a1b      	lsrs	r3, r3, #8
 800a446:	f364 03c7 	bfi	r3, r4, #3, #5
 800a44a:	7173      	strb	r3, [r6, #5]
	style_indic.body.main_color = LV_COLOR_BLACK;
 800a44c:	78b3      	ldrb	r3, [r6, #2]
 800a44e:	f364 0304 	bfi	r3, r4, #0, #5
 800a452:	70b3      	strb	r3, [r6, #2]
 800a454:	8873      	ldrh	r3, [r6, #2]
 800a456:	f364 134a 	bfi	r3, r4, #5, #6
 800a45a:	8073      	strh	r3, [r6, #2]
 800a45c:	0a1b      	lsrs	r3, r3, #8
 800a45e:	f364 03c7 	bfi	r3, r4, #3, #5
 800a462:	70f3      	strb	r3, [r6, #3]
	style_indic.body.border.color = LV_COLOR_BLACK;
 800a464:	7ab3      	ldrb	r3, [r6, #10]
 800a466:	f364 0304 	bfi	r3, r4, #0, #5
 800a46a:	72b3      	strb	r3, [r6, #10]
 800a46c:	8973      	ldrh	r3, [r6, #10]
 800a46e:	f364 134a 	bfi	r3, r4, #5, #6
 800a472:	8173      	strh	r3, [r6, #10]
 800a474:	0a1b      	lsrs	r3, r3, #8
 800a476:	f364 03c7 	bfi	r3, r4, #3, #5
 800a47a:	72f3      	strb	r3, [r6, #11]
	img_fundo = lv_img_create(Tela_Audio_2, NULL);
 800a47c:	4621      	mov	r1, r4
 800a47e:	6838      	ldr	r0, [r7, #0]
 800a480:	4e81      	ldr	r6, [pc, #516]	; (800a688 <screen_audio_2+0x318>)
 800a482:	f00c f94d 	bl	8016720 <lv_img_create>
    lv_img_set_src(img_fundo, &tela_audio_2);
 800a486:	4981      	ldr	r1, [pc, #516]	; (800a68c <screen_audio_2+0x31c>)
	img_fundo = lv_img_create(Tela_Audio_2, NULL);
 800a488:	6030      	str	r0, [r6, #0]
    lv_img_set_src(img_fundo, &tela_audio_2);
 800a48a:	f00c f8b9 	bl	8016600 <lv_img_set_src>
    lv_obj_set_protect(img_fundo, LV_PROTECT_POS);
 800a48e:	6830      	ldr	r0, [r6, #0]
	imgbtn1[0] = lv_imgbtn_create(Tela_Audio_2, NULL);
 800a490:	4e7f      	ldr	r6, [pc, #508]	; (800a690 <screen_audio_2+0x320>)
    lv_obj_set_protect(img_fundo, LV_PROTECT_POS);
 800a492:	2104      	movs	r1, #4
 800a494:	f003 fe74 	bl	800e180 <lv_obj_set_protect>
	btn_prev2();
 800a498:	f7ff ff38 	bl	800a30c <btn_prev2>
	imgbtn1[0] = lv_imgbtn_create(Tela_Audio_2, NULL);
 800a49c:	4621      	mov	r1, r4
 800a49e:	6838      	ldr	r0, [r7, #0]
 800a4a0:	f00c fa68 	bl	8016974 <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn1[0], 0);
 800a4a4:	4621      	mov	r1, r4
	imgbtn1[0] = lv_imgbtn_create(Tela_Audio_2, NULL);
 800a4a6:	6030      	str	r0, [r6, #0]
	lv_obj_set_user_data(imgbtn1[0], 0);
 800a4a8:	f004 fdd5 	bl	800f056 <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_REL, &Btn_on);
 800a4ac:	6830      	ldr	r0, [r6, #0]
 800a4ae:	4a79      	ldr	r2, [pc, #484]	; (800a694 <screen_audio_2+0x324>)
 800a4b0:	4621      	mov	r1, r4
 800a4b2:	f00c faa7 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_TGL_REL, &Btn_on_am);
 800a4b6:	6830      	ldr	r0, [r6, #0]
 800a4b8:	4a77      	ldr	r2, [pc, #476]	; (800a698 <screen_audio_2+0x328>)
 800a4ba:	2102      	movs	r1, #2
 800a4bc:	f00c faa2 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_TGL_PR, &Btn_on_am);
 800a4c0:	6830      	ldr	r0, [r6, #0]
 800a4c2:	4a75      	ldr	r2, [pc, #468]	; (800a698 <screen_audio_2+0x328>)
 800a4c4:	2103      	movs	r1, #3
 800a4c6:	f00c fa9d 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_PR, &Btn_on_am);
 800a4ca:	6830      	ldr	r0, [r6, #0]
 800a4cc:	4a72      	ldr	r2, [pc, #456]	; (800a698 <screen_audio_2+0x328>)
 800a4ce:	2101      	movs	r1, #1
 800a4d0:	f00c fa98 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_INA, &Btn_on_am);
 800a4d4:	4a70      	ldr	r2, [pc, #448]	; (800a698 <screen_audio_2+0x328>)
 800a4d6:	6830      	ldr	r0, [r6, #0]
 800a4d8:	2104      	movs	r1, #4
 800a4da:	f00c fa93 	bl	8016a04 <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn1[0], btn_clipper);
 800a4de:	6830      	ldr	r0, [r6, #0]
 800a4e0:	496e      	ldr	r1, [pc, #440]	; (800a69c <screen_audio_2+0x32c>)
 800a4e2:	f003 fe5a 	bl	800e19a <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn1[0], 5, 63);
 800a4e6:	223f      	movs	r2, #63	; 0x3f
 800a4e8:	6830      	ldr	r0, [r6, #0]
 800a4ea:	2105      	movs	r1, #5
 800a4ec:	f003 ff9f 	bl	800e42e <lv_obj_set_pos>
	imgbtn1[1] = lv_imgbtn_create(Tela_Audio_2, imgbtn1[0]);
 800a4f0:	6831      	ldr	r1, [r6, #0]
 800a4f2:	6838      	ldr	r0, [r7, #0]
 800a4f4:	f00c fa3e 	bl	8016974 <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn1[1], 1);
 800a4f8:	2101      	movs	r1, #1
	imgbtn1[1] = lv_imgbtn_create(Tela_Audio_2, imgbtn1[0]);
 800a4fa:	6070      	str	r0, [r6, #4]
	lv_obj_set_user_data(imgbtn1[1], 1);
 800a4fc:	f004 fdab 	bl	800f056 <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_REL, &Btn_off);
 800a500:	6870      	ldr	r0, [r6, #4]
 800a502:	4a67      	ldr	r2, [pc, #412]	; (800a6a0 <screen_audio_2+0x330>)
 800a504:	4621      	mov	r1, r4
 800a506:	f00c fa7d 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_TGL_REL, &Btn_off_am);
 800a50a:	6870      	ldr	r0, [r6, #4]
 800a50c:	4a65      	ldr	r2, [pc, #404]	; (800a6a4 <screen_audio_2+0x334>)
 800a50e:	2102      	movs	r1, #2
 800a510:	f00c fa78 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_TGL_PR, &Btn_off_am);
 800a514:	6870      	ldr	r0, [r6, #4]
 800a516:	4a63      	ldr	r2, [pc, #396]	; (800a6a4 <screen_audio_2+0x334>)
 800a518:	2103      	movs	r1, #3
 800a51a:	f00c fa73 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_PR, &Btn_off_am);
 800a51e:	6870      	ldr	r0, [r6, #4]
 800a520:	4a60      	ldr	r2, [pc, #384]	; (800a6a4 <screen_audio_2+0x334>)
 800a522:	2101      	movs	r1, #1
 800a524:	f00c fa6e 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_INA, &Btn_off_am);
 800a528:	6870      	ldr	r0, [r6, #4]
 800a52a:	4a5e      	ldr	r2, [pc, #376]	; (800a6a4 <screen_audio_2+0x334>)
 800a52c:	2104      	movs	r1, #4
 800a52e:	f00c fa69 	bl	8016a04 <lv_imgbtn_set_src>
	lv_obj_set_pos(imgbtn1[1], 5, 83);
 800a532:	2253      	movs	r2, #83	; 0x53
 800a534:	6870      	ldr	r0, [r6, #4]
	bar[0] = lv_bar_create(Tela_Audio_2, NULL);
 800a536:	4e5c      	ldr	r6, [pc, #368]	; (800a6a8 <screen_audio_2+0x338>)
	lv_obj_set_pos(imgbtn1[1], 5, 83);
 800a538:	2105      	movs	r1, #5
 800a53a:	f003 ff78 	bl	800e42e <lv_obj_set_pos>
	bar[0] = lv_bar_create(Tela_Audio_2, NULL);
 800a53e:	4621      	mov	r1, r4
 800a540:	6838      	ldr	r0, [r7, #0]
 800a542:	f00a f9a9 	bl	8014898 <lv_bar_create>
	lv_obj_set_size(bar[0], 16, 8);
 800a546:	2208      	movs	r2, #8
 800a548:	2110      	movs	r1, #16
	bar[0] = lv_bar_create(Tela_Audio_2, NULL);
 800a54a:	6030      	str	r0, [r6, #0]
	lv_obj_set_size(bar[0], 16, 8);
 800a54c:	f004 fb64 	bl	800ec18 <lv_obj_set_size>
	lv_bar_set_style(bar[0], LV_BAR_STYLE_BG, &style_indic_vd);
 800a550:	462a      	mov	r2, r5
 800a552:	4621      	mov	r1, r4
 800a554:	6830      	ldr	r0, [r6, #0]
 800a556:	f00a f989 	bl	801486c <lv_bar_set_style>
	lv_bar_set_style(bar[0], LV_BAR_STYLE_INDIC, &style_indic_vd);
 800a55a:	462a      	mov	r2, r5
 800a55c:	2101      	movs	r1, #1
 800a55e:	6830      	ldr	r0, [r6, #0]
 800a560:	f00a f984 	bl	801486c <lv_bar_set_style>
	lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 67);
 800a564:	2343      	movs	r3, #67	; 0x43
 800a566:	9300      	str	r3, [sp, #0]
 800a568:	2201      	movs	r2, #1
 800a56a:	2336      	movs	r3, #54	; 0x36
 800a56c:	4621      	mov	r1, r4
 800a56e:	6830      	ldr	r0, [r6, #0]
 800a570:	f003 ffb2 	bl	800e4d8 <lv_obj_align>
	lv_bar_set_value(bar[0], 100, 0);
 800a574:	2164      	movs	r1, #100	; 0x64
 800a576:	4622      	mov	r2, r4
 800a578:	6830      	ldr	r0, [r6, #0]
 800a57a:	f00a f91b 	bl	80147b4 <lv_bar_set_value>
	if(Cfg_Clipper) {
 800a57e:	4b4b      	ldr	r3, [pc, #300]	; (800a6ac <screen_audio_2+0x33c>)
 800a580:	7819      	ldrb	r1, [r3, #0]
 800a582:	2900      	cmp	r1, #0
 800a584:	f000 80dc 	beq.w	800a740 <screen_audio_2+0x3d0>
		lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 68);
 800a588:	2344      	movs	r3, #68	; 0x44
 800a58a:	9300      	str	r3, [sp, #0]
 800a58c:	2201      	movs	r2, #1
 800a58e:	2336      	movs	r3, #54	; 0x36
 800a590:	4621      	mov	r1, r4
		lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 88);
 800a592:	6830      	ldr	r0, [r6, #0]
	imgbtn2[0] = lv_imgbtn_create(Tela_Audio_2, NULL);
 800a594:	4c46      	ldr	r4, [pc, #280]	; (800a6b0 <screen_audio_2+0x340>)
		lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 88);
 800a596:	f003 ff9f 	bl	800e4d8 <lv_obj_align>
	imgbtn2[0] = lv_imgbtn_create(Tela_Audio_2, NULL);
 800a59a:	2100      	movs	r1, #0
 800a59c:	6838      	ldr	r0, [r7, #0]
 800a59e:	f00c f9e9 	bl	8016974 <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn2[0], 0);
 800a5a2:	2100      	movs	r1, #0
	imgbtn2[0] = lv_imgbtn_create(Tela_Audio_2, NULL);
 800a5a4:	6020      	str	r0, [r4, #0]
	lv_obj_set_user_data(imgbtn2[0], 0);
 800a5a6:	f004 fd56 	bl	800f056 <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn2[0], LV_BTN_STATE_REL, &Btn_mp3Prev);
 800a5aa:	6820      	ldr	r0, [r4, #0]
 800a5ac:	4a41      	ldr	r2, [pc, #260]	; (800a6b4 <screen_audio_2+0x344>)
 800a5ae:	2100      	movs	r1, #0
 800a5b0:	f00c fa28 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[0], LV_BTN_STATE_TGL_REL, &Btn_mp3Prev_am);
 800a5b4:	6820      	ldr	r0, [r4, #0]
 800a5b6:	4a40      	ldr	r2, [pc, #256]	; (800a6b8 <screen_audio_2+0x348>)
 800a5b8:	2102      	movs	r1, #2
 800a5ba:	f00c fa23 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[0], LV_BTN_STATE_TGL_PR, &Btn_mp3Prev_am);
 800a5be:	6820      	ldr	r0, [r4, #0]
 800a5c0:	4a3d      	ldr	r2, [pc, #244]	; (800a6b8 <screen_audio_2+0x348>)
 800a5c2:	2103      	movs	r1, #3
 800a5c4:	f00c fa1e 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[0], LV_BTN_STATE_PR, &Btn_mp3Prev_am);
 800a5c8:	6820      	ldr	r0, [r4, #0]
 800a5ca:	4a3b      	ldr	r2, [pc, #236]	; (800a6b8 <screen_audio_2+0x348>)
 800a5cc:	2101      	movs	r1, #1
 800a5ce:	f00c fa19 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[0], LV_BTN_STATE_INA, &Btn_mp3Prev_am);
 800a5d2:	4a39      	ldr	r2, [pc, #228]	; (800a6b8 <screen_audio_2+0x348>)
 800a5d4:	6820      	ldr	r0, [r4, #0]
 800a5d6:	2104      	movs	r1, #4
 800a5d8:	f00c fa14 	bl	8016a04 <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn2[0], btn_mp3);
 800a5dc:	6820      	ldr	r0, [r4, #0]
 800a5de:	4937      	ldr	r1, [pc, #220]	; (800a6bc <screen_audio_2+0x34c>)
 800a5e0:	f003 fddb 	bl	800e19a <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn2[0], 83, 48);
 800a5e4:	2230      	movs	r2, #48	; 0x30
 800a5e6:	6820      	ldr	r0, [r4, #0]
 800a5e8:	2153      	movs	r1, #83	; 0x53
 800a5ea:	f003 ff20 	bl	800e42e <lv_obj_set_pos>
	imgbtn2[1] = lv_imgbtn_create(Tela_Audio_2, imgbtn2[0]);
 800a5ee:	6821      	ldr	r1, [r4, #0]
 800a5f0:	6838      	ldr	r0, [r7, #0]
 800a5f2:	f00c f9bf 	bl	8016974 <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn2[1], 1);
 800a5f6:	2101      	movs	r1, #1
	imgbtn2[1] = lv_imgbtn_create(Tela_Audio_2, imgbtn2[0]);
 800a5f8:	6060      	str	r0, [r4, #4]
	lv_obj_set_user_data(imgbtn2[1], 1);
 800a5fa:	f004 fd2c 	bl	800f056 <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn2[1], LV_BTN_STATE_REL, &Btn_mp3Play);
 800a5fe:	6860      	ldr	r0, [r4, #4]
 800a600:	4a2f      	ldr	r2, [pc, #188]	; (800a6c0 <screen_audio_2+0x350>)
 800a602:	2100      	movs	r1, #0
 800a604:	f00c f9fe 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[1], LV_BTN_STATE_TGL_REL, &Btn_mp3Play_am);
 800a608:	6860      	ldr	r0, [r4, #4]
 800a60a:	4a2e      	ldr	r2, [pc, #184]	; (800a6c4 <screen_audio_2+0x354>)
 800a60c:	2102      	movs	r1, #2
 800a60e:	f00c f9f9 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[1], LV_BTN_STATE_TGL_PR, &Btn_mp3Play_am);
 800a612:	6860      	ldr	r0, [r4, #4]
 800a614:	4a2b      	ldr	r2, [pc, #172]	; (800a6c4 <screen_audio_2+0x354>)
 800a616:	2103      	movs	r1, #3
 800a618:	f00c f9f4 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[1], LV_BTN_STATE_PR, &Btn_mp3Play_am);
 800a61c:	6860      	ldr	r0, [r4, #4]
 800a61e:	4a29      	ldr	r2, [pc, #164]	; (800a6c4 <screen_audio_2+0x354>)
 800a620:	2101      	movs	r1, #1
 800a622:	f00c f9ef 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[1], LV_BTN_STATE_INA, &Btn_mp3Play_am);
 800a626:	6860      	ldr	r0, [r4, #4]
 800a628:	4a26      	ldr	r2, [pc, #152]	; (800a6c4 <screen_audio_2+0x354>)
 800a62a:	2104      	movs	r1, #4
 800a62c:	f00c f9ea 	bl	8016a04 <lv_imgbtn_set_src>
	lv_obj_set_pos(imgbtn2[1], 83, 67);
 800a630:	2243      	movs	r2, #67	; 0x43
 800a632:	6860      	ldr	r0, [r4, #4]
 800a634:	2153      	movs	r1, #83	; 0x53
 800a636:	f003 fefa 	bl	800e42e <lv_obj_set_pos>
	imgbtn2[2] = lv_imgbtn_create(Tela_Audio_2, imgbtn2[0]);
 800a63a:	6821      	ldr	r1, [r4, #0]
 800a63c:	6838      	ldr	r0, [r7, #0]
 800a63e:	f00c f999 	bl	8016974 <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn2[2], 2);
 800a642:	2102      	movs	r1, #2
	imgbtn2[2] = lv_imgbtn_create(Tela_Audio_2, imgbtn2[0]);
 800a644:	60a0      	str	r0, [r4, #8]
	lv_obj_set_user_data(imgbtn2[2], 2);
 800a646:	f004 fd06 	bl	800f056 <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn2[2], LV_BTN_STATE_REL, &Btn_mp3Next);
 800a64a:	68a0      	ldr	r0, [r4, #8]
 800a64c:	4a1e      	ldr	r2, [pc, #120]	; (800a6c8 <screen_audio_2+0x358>)
 800a64e:	2100      	movs	r1, #0
 800a650:	f00c f9d8 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[2], LV_BTN_STATE_TGL_REL, &Btn_mp3Next_am);
 800a654:	68a0      	ldr	r0, [r4, #8]
 800a656:	4a1d      	ldr	r2, [pc, #116]	; (800a6cc <screen_audio_2+0x35c>)
 800a658:	2102      	movs	r1, #2
 800a65a:	f00c f9d3 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[2], LV_BTN_STATE_TGL_PR, &Btn_mp3Next_am);
 800a65e:	68a0      	ldr	r0, [r4, #8]
 800a660:	4a1a      	ldr	r2, [pc, #104]	; (800a6cc <screen_audio_2+0x35c>)
 800a662:	2103      	movs	r1, #3
 800a664:	f00c f9ce 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[2], LV_BTN_STATE_PR, &Btn_mp3Next_am);
 800a668:	68a0      	ldr	r0, [r4, #8]
 800a66a:	4a18      	ldr	r2, [pc, #96]	; (800a6cc <screen_audio_2+0x35c>)
 800a66c:	2101      	movs	r1, #1
 800a66e:	f00c f9c9 	bl	8016a04 <lv_imgbtn_set_src>
 800a672:	e02d      	b.n	800a6d0 <screen_audio_2+0x360>
 800a674:	200051e4 	.word	0x200051e4
 800a678:	20005144 	.word	0x20005144
 800a67c:	2000c334 	.word	0x2000c334
 800a680:	200051a8 	.word	0x200051a8
 800a684:	2000516c 	.word	0x2000516c
 800a688:	20005150 	.word	0x20005150
 800a68c:	20001ba4 	.word	0x20001ba4
 800a690:	20005154 	.word	0x20005154
 800a694:	20001afc 	.word	0x20001afc
 800a698:	20001b08 	.word	0x20001b08
 800a69c:	080098a5 	.word	0x080098a5
 800a6a0:	20001ae4 	.word	0x20001ae4
 800a6a4:	20001af0 	.word	0x20001af0
 800a6a8:	20005148 	.word	0x20005148
 800a6ac:	200033c3 	.word	0x200033c3
 800a6b0:	2000515c 	.word	0x2000515c
 800a6b4:	20001a6c 	.word	0x20001a6c
 800a6b8:	20001a78 	.word	0x20001a78
 800a6bc:	0800990d 	.word	0x0800990d
 800a6c0:	20001a54 	.word	0x20001a54
 800a6c4:	20001a60 	.word	0x20001a60
 800a6c8:	20001a3c 	.word	0x20001a3c
 800a6cc:	20001a48 	.word	0x20001a48
	lv_imgbtn_set_src(imgbtn2[2], LV_BTN_STATE_INA, &Btn_mp3Next_am);
 800a6d0:	68a0      	ldr	r0, [r4, #8]
 800a6d2:	4a1e      	ldr	r2, [pc, #120]	; (800a74c <screen_audio_2+0x3dc>)
 800a6d4:	2104      	movs	r1, #4
 800a6d6:	f00c f995 	bl	8016a04 <lv_imgbtn_set_src>
	lv_obj_set_pos(imgbtn2[2], 83, 86);
 800a6da:	2256      	movs	r2, #86	; 0x56
 800a6dc:	68a0      	ldr	r0, [r4, #8]
 800a6de:	2153      	movs	r1, #83	; 0x53
 800a6e0:	f003 fea5 	bl	800e42e <lv_obj_set_pos>
	imgbtn2[3] = lv_imgbtn_create(Tela_Audio_2, imgbtn2[0]);
 800a6e4:	6821      	ldr	r1, [r4, #0]
 800a6e6:	6838      	ldr	r0, [r7, #0]
 800a6e8:	f00c f944 	bl	8016974 <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn2[3], 3);
 800a6ec:	2103      	movs	r1, #3
	imgbtn2[3] = lv_imgbtn_create(Tela_Audio_2, imgbtn2[0]);
 800a6ee:	60e0      	str	r0, [r4, #12]
	lv_obj_set_user_data(imgbtn2[3], 3);
 800a6f0:	f004 fcb1 	bl	800f056 <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn2[3], LV_BTN_STATE_REL, &Btn_mp3Stop);
 800a6f4:	68e0      	ldr	r0, [r4, #12]
 800a6f6:	4a16      	ldr	r2, [pc, #88]	; (800a750 <screen_audio_2+0x3e0>)
 800a6f8:	2100      	movs	r1, #0
 800a6fa:	f00c f983 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[3], LV_BTN_STATE_TGL_REL, &Btn_mp3Stop_am);
 800a6fe:	68e0      	ldr	r0, [r4, #12]
 800a700:	4a14      	ldr	r2, [pc, #80]	; (800a754 <screen_audio_2+0x3e4>)
 800a702:	2102      	movs	r1, #2
 800a704:	f00c f97e 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[3], LV_BTN_STATE_TGL_PR, &Btn_mp3Stop_am);
 800a708:	68e0      	ldr	r0, [r4, #12]
 800a70a:	4a12      	ldr	r2, [pc, #72]	; (800a754 <screen_audio_2+0x3e4>)
 800a70c:	2103      	movs	r1, #3
 800a70e:	f00c f979 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[3], LV_BTN_STATE_PR, &Btn_mp3Stop_am);
 800a712:	68e0      	ldr	r0, [r4, #12]
 800a714:	4a0f      	ldr	r2, [pc, #60]	; (800a754 <screen_audio_2+0x3e4>)
 800a716:	2101      	movs	r1, #1
 800a718:	f00c f974 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2[3], LV_BTN_STATE_INA, &Btn_mp3Stop_am);
 800a71c:	68e0      	ldr	r0, [r4, #12]
 800a71e:	4a0d      	ldr	r2, [pc, #52]	; (800a754 <screen_audio_2+0x3e4>)
 800a720:	2104      	movs	r1, #4
 800a722:	f00c f96f 	bl	8016a04 <lv_imgbtn_set_src>
	lv_obj_set_pos(imgbtn2[3], 83, 105);
 800a726:	2269      	movs	r2, #105	; 0x69
 800a728:	2153      	movs	r1, #83	; 0x53
 800a72a:	68e0      	ldr	r0, [r4, #12]
 800a72c:	f003 fe7f 	bl	800e42e <lv_obj_set_pos>
 800a730:	6838      	ldr	r0, [r7, #0]
 800a732:	f003 fadf 	bl	800dcf4 <lv_disp_load_scr>
	TelaAtiva = TelaAudio_2;
 800a736:	4b08      	ldr	r3, [pc, #32]	; (800a758 <screen_audio_2+0x3e8>)
 800a738:	2205      	movs	r2, #5
 800a73a:	601a      	str	r2, [r3, #0]
}
 800a73c:	b003      	add	sp, #12
 800a73e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		lv_obj_align(bar[0], NULL, LV_ALIGN_IN_TOP_LEFT, 54, 88);
 800a740:	2358      	movs	r3, #88	; 0x58
 800a742:	9300      	str	r3, [sp, #0]
 800a744:	2201      	movs	r2, #1
 800a746:	2336      	movs	r3, #54	; 0x36
 800a748:	e723      	b.n	800a592 <screen_audio_2+0x222>
 800a74a:	bf00      	nop
 800a74c:	20001a48 	.word	0x20001a48
 800a750:	20001a84 	.word	0x20001a84
 800a754:	20001a90 	.word	0x20001a90
 800a758:	200033cc 	.word	0x200033cc

0800a75c <btn_event_next1>:
	if(event == LV_EVENT_RELEASED) {
 800a75c:	2907      	cmp	r1, #7
{
 800a75e:	b508      	push	{r3, lr}
	if(event == LV_EVENT_RELEASED) {
 800a760:	d107      	bne.n	800a772 <btn_event_next1+0x16>
		lv_obj_del(Tela_Audio_1);
 800a762:	4b04      	ldr	r3, [pc, #16]	; (800a774 <btn_event_next1+0x18>)
 800a764:	6818      	ldr	r0, [r3, #0]
 800a766:	f004 faca 	bl	800ecfe <lv_obj_del>
}
 800a76a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_audio_2();
 800a76e:	f7ff bdff 	b.w	800a370 <screen_audio_2>
 800a772:	bd08      	pop	{r3, pc}
 800a774:	20005140 	.word	0x20005140

0800a778 <btn_event_esc_freq>:
	lv_bar_set_style(bar[pos], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
}

static void btn_event_esc_freq(lv_obj_t * btn, lv_event_t event)
{
	if(event == LV_EVENT_RELEASED) {
 800a778:	2907      	cmp	r1, #7
{
 800a77a:	b508      	push	{r3, lr}
	if(event == LV_EVENT_RELEASED) {
 800a77c:	d107      	bne.n	800a78e <btn_event_esc_freq+0x16>
		//printf("Button ESC Released\n");
		lv_obj_del(Tela_Freq);
 800a77e:	4b04      	ldr	r3, [pc, #16]	; (800a790 <btn_event_esc_freq+0x18>)
 800a780:	6818      	ldr	r0, [r3, #0]
 800a782:	f004 fabc 	bl	800ecfe <lv_obj_del>
		screen_sel();
	}
}
 800a786:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_sel();
 800a78a:	f002 bf97 	b.w	800d6bc <screen_sel>
 800a78e:	bd08      	pop	{r3, pc}
 800a790:	20005220 	.word	0x20005220

0800a794 <event_handler>:

static void event_handler(lv_obj_t * obj, lv_event_t event)
{
 800a794:	b530      	push	{r4, r5, lr}
    if(event == LV_EVENT_CLICKED) {
 800a796:	2906      	cmp	r1, #6
{
 800a798:	b089      	sub	sp, #36	; 0x24
 800a79a:	4605      	mov	r5, r0
    if(event == LV_EVENT_CLICKED) {
 800a79c:	d140      	bne.n	800a820 <event_handler+0x8c>
        char buf[32];
        char out[6];

        uint32_t id = lv_obj_get_user_data(obj);
 800a79e:	f004 fc58 	bl	800f052 <lv_obj_get_user_data>
 * @param buf pointer to an array to store the string
 * @param buf_size size of `buf` in bytes. 0: to ignore it.
 */
static inline void lv_roller_get_selected_str(const lv_obj_t * roller, char * buf, uint16_t buf_size)
{
    lv_ddlist_get_selected_str(roller, buf, buf_size);
 800a7a2:	2220      	movs	r2, #32
 800a7a4:	4604      	mov	r4, r0
 800a7a6:	4669      	mov	r1, sp
 800a7a8:	4628      	mov	r0, r5
 800a7aa:	f00b fcce 	bl	801614a <lv_ddlist_get_selected_str>

        lv_roller_get_selected_str(obj, buf, sizeof(buf));
        if(id == 4 && (atoi(buf) == 8 || atoi(buf) == 9)) {
 800a7ae:	2c04      	cmp	r4, #4
 800a7b0:	4c1f      	ldr	r4, [pc, #124]	; (800a830 <event_handler+0x9c>)
 800a7b2:	d11c      	bne.n	800a7ee <event_handler+0x5a>
 800a7b4:	4668      	mov	r0, sp
 800a7b6:	f00e fc44 	bl	8019042 <atoi>
 800a7ba:	2808      	cmp	r0, #8
 800a7bc:	d132      	bne.n	800a824 <event_handler+0x90>
        	lv_roller_set_options(rollerfreq[5], "0", LV_ROLLER_MODE_INIFINITE);
 800a7be:	2201      	movs	r2, #1
 800a7c0:	491c      	ldr	r1, [pc, #112]	; (800a834 <event_handler+0xa0>)
 800a7c2:	6960      	ldr	r0, [r4, #20]
 800a7c4:	f00e fbba 	bl	8018f3c <lv_roller_set_options>
        	lv_roller_set_selected(rollerfreq[5], 0, true);
 800a7c8:	2201      	movs	r2, #1
 800a7ca:	2100      	movs	r1, #0
 800a7cc:	6960      	ldr	r0, [r4, #20]
 800a7ce:	f00e fb11 	bl	8018df4 <lv_roller_set_selected>
        }
        if(id == 4 &&  atoi(buf) == 0) {
 800a7d2:	4668      	mov	r0, sp
 800a7d4:	f00e fc35 	bl	8019042 <atoi>
 800a7d8:	b948      	cbnz	r0, 800a7ee <event_handler+0x5a>
        	lv_roller_set_options(rollerfreq[5], "0\n1", LV_ROLLER_MODE_INIFINITE);
 800a7da:	2201      	movs	r2, #1
 800a7dc:	4916      	ldr	r1, [pc, #88]	; (800a838 <event_handler+0xa4>)
 800a7de:	6960      	ldr	r0, [r4, #20]
 800a7e0:	f00e fbac 	bl	8018f3c <lv_roller_set_options>
        	lv_roller_set_selected(rollerfreq[5], 1, true);
 800a7e4:	2201      	movs	r2, #1
 800a7e6:	4611      	mov	r1, r2
 800a7e8:	6960      	ldr	r0, [r4, #20]
 800a7ea:	f00e fb03 	bl	8018df4 <lv_roller_set_selected>
 800a7ee:	2220      	movs	r2, #32
 800a7f0:	4669      	mov	r1, sp
 800a7f2:	6960      	ldr	r0, [r4, #20]
 800a7f4:	f00b fca9 	bl	801614a <lv_ddlist_get_selected_str>
 800a7f8:	2220      	movs	r2, #32
 800a7fa:	4669      	mov	r1, sp
 800a7fc:	6920      	ldr	r0, [r4, #16]
 800a7fe:	f00b fca4 	bl	801614a <lv_ddlist_get_selected_str>
 800a802:	2220      	movs	r2, #32
 800a804:	4669      	mov	r1, sp
 800a806:	68e0      	ldr	r0, [r4, #12]
 800a808:	f00b fc9f 	bl	801614a <lv_ddlist_get_selected_str>
 800a80c:	2220      	movs	r2, #32
 800a80e:	4669      	mov	r1, sp
 800a810:	68a0      	ldr	r0, [r4, #8]
 800a812:	f00b fc9a 	bl	801614a <lv_ddlist_get_selected_str>
 800a816:	2220      	movs	r2, #32
 800a818:	4669      	mov	r1, sp
 800a81a:	6860      	ldr	r0, [r4, #4]
 800a81c:	f00b fc95 	bl	801614a <lv_ddlist_get_selected_str>
        out[4] = buf[0];
        out[5] = 0;

        //printf("Selected Roller: %d Digit: %s  Frequencia: %d\n", id, buf, atoi(out));
    }
}
 800a820:	b009      	add	sp, #36	; 0x24
 800a822:	bd30      	pop	{r4, r5, pc}
        if(id == 4 && (atoi(buf) == 8 || atoi(buf) == 9)) {
 800a824:	4668      	mov	r0, sp
 800a826:	f00e fc0c 	bl	8019042 <atoi>
 800a82a:	2809      	cmp	r0, #9
 800a82c:	d1d1      	bne.n	800a7d2 <event_handler+0x3e>
 800a82e:	e7c6      	b.n	800a7be <event_handler+0x2a>
 800a830:	2000527c 	.word	0x2000527c
 800a834:	0802bba6 	.word	0x0802bba6
 800a838:	0802bba8 	.word	0x0802bba8

0800a83c <create_vumeter_freq>:
{
 800a83c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800a83e:	4e30      	ldr	r6, [pc, #192]	; (800a900 <create_vumeter_freq+0xc4>)
 800a840:	4930      	ldr	r1, [pc, #192]	; (800a904 <create_vumeter_freq+0xc8>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800a842:	4c31      	ldr	r4, [pc, #196]	; (800a908 <create_vumeter_freq+0xcc>)
		bar[x] = lv_bar_create(Tela_Freq, NULL);
 800a844:	4f31      	ldr	r7, [pc, #196]	; (800a90c <create_vumeter_freq+0xd0>)
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800a846:	4630      	mov	r0, r6
 800a848:	f004 ff44 	bl	800f6d4 <lv_style_copy>
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800a84c:	4b30      	ldr	r3, [pc, #192]	; (800a910 <create_vumeter_freq+0xd4>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800a84e:	492d      	ldr	r1, [pc, #180]	; (800a904 <create_vumeter_freq+0xc8>)
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800a850:	881b      	ldrh	r3, [r3, #0]
 800a852:	80b3      	strh	r3, [r6, #4]
	style_indic_bar.body.radius = 0;
 800a854:	2500      	movs	r5, #0
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800a856:	4620      	mov	r0, r4
	style_indic_bar.body.main_color = LV_COLOR_MAKE(105, 105, 105);
 800a858:	8073      	strh	r3, [r6, #2]
	style_indic_bar.body.border.color = LV_COLOR_MAKE(105, 105, 105);
 800a85a:	8173      	strh	r3, [r6, #10]
	style_indic_bar.body.radius = 0;
 800a85c:	80f5      	strh	r5, [r6, #6]
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800a85e:	f004 ff39 	bl	800f6d4 <lv_style_copy>
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800a862:	7923      	ldrb	r3, [r4, #4]
	style_indic_bar_vd.body.radius = 0;
 800a864:	80e5      	strh	r5, [r4, #6]
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800a866:	f365 0304 	bfi	r3, r5, #0, #5
 800a86a:	7123      	strb	r3, [r4, #4]
 800a86c:	88a3      	ldrh	r3, [r4, #4]
 800a86e:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800a872:	80a3      	strh	r3, [r4, #4]
 800a874:	0a1b      	lsrs	r3, r3, #8
 800a876:	f365 03c7 	bfi	r3, r5, #3, #5
 800a87a:	7163      	strb	r3, [r4, #5]
	style_indic_bar_vd.body.main_color = LV_COLOR_MAKE(0, 255, 0);
 800a87c:	78a3      	ldrb	r3, [r4, #2]
 800a87e:	f365 0304 	bfi	r3, r5, #0, #5
 800a882:	70a3      	strb	r3, [r4, #2]
 800a884:	8863      	ldrh	r3, [r4, #2]
 800a886:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800a88a:	8063      	strh	r3, [r4, #2]
 800a88c:	0a1b      	lsrs	r3, r3, #8
 800a88e:	f365 03c7 	bfi	r3, r5, #3, #5
 800a892:	70e3      	strb	r3, [r4, #3]
	style_indic_bar_vd.body.border.color = LV_COLOR_MAKE(0, 255, 0);
 800a894:	7aa3      	ldrb	r3, [r4, #10]
 800a896:	f365 0304 	bfi	r3, r5, #0, #5
 800a89a:	72a3      	strb	r3, [r4, #10]
 800a89c:	8963      	ldrh	r3, [r4, #10]
 800a89e:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800a8a2:	8163      	strh	r3, [r4, #10]
 800a8a4:	0a1b      	lsrs	r3, r3, #8
 800a8a6:	f365 03c7 	bfi	r3, r5, #3, #5
 800a8aa:	72e3      	strb	r3, [r4, #11]
 800a8ac:	4c19      	ldr	r4, [pc, #100]	; (800a914 <create_vumeter_freq+0xd8>)
		bar[x] = lv_bar_create(Tela_Freq, NULL);
 800a8ae:	6838      	ldr	r0, [r7, #0]
 800a8b0:	2100      	movs	r1, #0
 800a8b2:	f009 fff1 	bl	8014898 <lv_bar_create>
		lv_obj_set_size(bar[x], 4, 20);
 800a8b6:	2214      	movs	r2, #20
		bar[x] = lv_bar_create(Tela_Freq, NULL);
 800a8b8:	6060      	str	r0, [r4, #4]
		lv_obj_set_size(bar[x], 4, 20);
 800a8ba:	2104      	movs	r1, #4
 800a8bc:	f004 f9ac 	bl	800ec18 <lv_obj_set_size>
		lv_bar_set_style(bar[x], LV_BAR_STYLE_BG, &style_indic_bar);
 800a8c0:	6860      	ldr	r0, [r4, #4]
 800a8c2:	4632      	mov	r2, r6
 800a8c4:	2100      	movs	r1, #0
 800a8c6:	f009 ffd1 	bl	801486c <lv_bar_set_style>
		lv_bar_set_style(bar[x], LV_BAR_STYLE_INDIC, &style_indic_bar);
 800a8ca:	6860      	ldr	r0, [r4, #4]
 800a8cc:	4632      	mov	r2, r6
 800a8ce:	2101      	movs	r1, #1
 800a8d0:	f009 ffcc 	bl	801486c <lv_bar_set_style>
		lv_obj_align(bar[x], NULL, LV_ALIGN_IN_TOP_LEFT, freq_pos_x[x], 90);
 800a8d4:	225a      	movs	r2, #90	; 0x5a
 800a8d6:	4b10      	ldr	r3, [pc, #64]	; (800a918 <create_vumeter_freq+0xdc>)
 800a8d8:	9200      	str	r2, [sp, #0]
 800a8da:	f933 3025 	ldrsh.w	r3, [r3, r5, lsl #2]
 800a8de:	6860      	ldr	r0, [r4, #4]
 800a8e0:	2201      	movs	r2, #1
 800a8e2:	2100      	movs	r1, #0
 800a8e4:	f003 fdf8 	bl	800e4d8 <lv_obj_align>
 800a8e8:	3501      	adds	r5, #1
		lv_bar_set_value(bar[x], 100, 0);
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	2164      	movs	r1, #100	; 0x64
 800a8ee:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800a8f2:	f009 ff5f 	bl	80147b4 <lv_bar_set_value>
	for(uint8_t x = 0; x < 21; x++) {
 800a8f6:	2d15      	cmp	r5, #21
 800a8f8:	d1d9      	bne.n	800a8ae <create_vumeter_freq+0x72>
}
 800a8fa:	b003      	add	sp, #12
 800a8fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8fe:	bf00      	nop
 800a900:	20005294 	.word	0x20005294
 800a904:	2000c334 	.word	0x2000c334
 800a908:	200052d0 	.word	0x200052d0
 800a90c:	20005220 	.word	0x20005220
 800a910:	0801cb0c 	.word	0x0801cb0c
 800a914:	20005220 	.word	0x20005220
 800a918:	0802bbac 	.word	0x0802bbac

0800a91c <update_vumeter>:
{
 800a91c:	b570      	push	{r4, r5, r6, lr}
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800a91e:	4c1c      	ldr	r4, [pc, #112]	; (800a990 <update_vumeter+0x74>)
	lv_bar_set_style(bar[pos], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800a920:	4e1c      	ldr	r6, [pc, #112]	; (800a994 <update_vumeter+0x78>)
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800a922:	7923      	ldrb	r3, [r4, #4]
 800a924:	f36f 0304 	bfc	r3, #0, #5
 800a928:	7123      	strb	r3, [r4, #4]
 800a92a:	88a3      	ldrh	r3, [r4, #4]
 800a92c:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800a930:	80a3      	strh	r3, [r4, #4]
 800a932:	0a1b      	lsrs	r3, r3, #8
 800a934:	f36f 03c7 	bfc	r3, #3, #5
 800a938:	7163      	strb	r3, [r4, #5]
	style_indic_bar_vd.body.main_color = LV_COLOR_MAKE(0, 255, 0);
 800a93a:	78a3      	ldrb	r3, [r4, #2]
 800a93c:	f36f 0304 	bfc	r3, #0, #5
 800a940:	70a3      	strb	r3, [r4, #2]
 800a942:	8863      	ldrh	r3, [r4, #2]
 800a944:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800a948:	8063      	strh	r3, [r4, #2]
 800a94a:	0a1b      	lsrs	r3, r3, #8
 800a94c:	f36f 03c7 	bfc	r3, #3, #5
 800a950:	70e3      	strb	r3, [r4, #3]
	style_indic_bar_vd.body.border.color = LV_COLOR_MAKE(0, 255, 0);
 800a952:	7aa3      	ldrb	r3, [r4, #10]
 800a954:	f36f 0304 	bfc	r3, #0, #5
 800a958:	72a3      	strb	r3, [r4, #10]
 800a95a:	8963      	ldrh	r3, [r4, #10]
	uint32_t pos = ((freq / 100) - 87) - 1;
 800a95c:	2564      	movs	r5, #100	; 0x64
	style_indic_bar_vd.body.border.color = LV_COLOR_MAKE(0, 255, 0);
 800a95e:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
	uint32_t pos = ((freq / 100) - 87) - 1;
 800a962:	fb90 f5f5 	sdiv	r5, r0, r5
 800a966:	3d58      	subs	r5, #88	; 0x58
	style_indic_bar_vd.body.border.color = LV_COLOR_MAKE(0, 255, 0);
 800a968:	8163      	strh	r3, [r4, #10]
 800a96a:	0a1b      	lsrs	r3, r3, #8
	lv_bar_set_style(bar[pos], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800a96c:	4622      	mov	r2, r4
 800a96e:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]
	style_indic_bar_vd.body.border.color = LV_COLOR_MAKE(0, 255, 0);
 800a972:	f36f 03c7 	bfc	r3, #3, #5
	lv_bar_set_style(bar[pos], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800a976:	2100      	movs	r1, #0
	style_indic_bar_vd.body.border.color = LV_COLOR_MAKE(0, 255, 0);
 800a978:	72e3      	strb	r3, [r4, #11]
	lv_bar_set_style(bar[pos], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800a97a:	f009 ff77 	bl	801486c <lv_bar_set_style>
	lv_bar_set_style(bar[pos], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
 800a97e:	4622      	mov	r2, r4
 800a980:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]
 800a984:	2101      	movs	r1, #1
}
 800a986:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	lv_bar_set_style(bar[pos], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
 800a98a:	f009 bf6f 	b.w	801486c <lv_bar_set_style>
 800a98e:	bf00      	nop
 800a990:	200052d0 	.word	0x200052d0
 800a994:	20005224 	.word	0x20005224

0800a998 <lv_ex_roller>:

void lv_ex_roller(void)
{
 800a998:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	static lv_style_t style_txt;
	lv_style_copy(&style_txt, &lv_style_plain_color);
 800a99c:	4ea7      	ldr	r6, [pc, #668]	; (800ac3c <lv_ex_roller+0x2a4>)
 800a99e:	49a8      	ldr	r1, [pc, #672]	; (800ac40 <lv_ex_roller+0x2a8>)
	style_txt.text.letter_space = 1;
	style_txt.text.line_space = 2;
	style_txt.text.color = LV_COLOR_WHITE;

	// Milhar
	rollerfreq[5] = lv_roller_create(Tela_Freq, NULL);
 800a9a0:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 800ac60 <lv_ex_roller+0x2c8>
 800a9a4:	4ca7      	ldr	r4, [pc, #668]	; (800ac44 <lv_ex_roller+0x2ac>)
    lv_roller_set_selected(rollerfreq[5], 1, true);
    lv_roller_set_fix_width(rollerfreq[5], 19);
    lv_roller_set_style(rollerfreq[5], LV_ROLLER_STYLE_BG, &style_txt);
    lv_roller_set_style(rollerfreq[5], LV_ROLLER_STYLE_SEL, &style_txt);
    lv_obj_align(rollerfreq[5], NULL, LV_ALIGN_IN_TOP_LEFT, 10, 44);
    lv_obj_set_event_cb(rollerfreq[5], event_handler);
 800a9a6:	4fa8      	ldr	r7, [pc, #672]	; (800ac48 <lv_ex_roller+0x2b0>)
    lv_obj_align(rollerfreq[4], NULL, LV_ALIGN_IN_TOP_LEFT, 33, 44);
    lv_obj_set_event_cb(rollerfreq[4], event_handler);
    // Dezena
    rollerfreq[3] = lv_roller_create(Tela_Freq, NULL);
    lv_obj_set_user_data(rollerfreq[3], 3);
    lv_roller_set_options(rollerfreq[3], "0\n1\n2\n3\n4\n5\n6\n7\n8\n9", LV_ROLLER_MODE_INIFINITE);
 800a9a8:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 800ac64 <lv_ex_roller+0x2cc>
	lv_style_copy(&style_txt, &lv_style_plain_color);
 800a9ac:	4630      	mov	r0, r6
 800a9ae:	f004 fe91 	bl	800f6d4 <lv_style_copy>
	style_txt.body.main_color = LV_COLOR_GRAY;
 800a9b2:	4aa6      	ldr	r2, [pc, #664]	; (800ac4c <lv_ex_roller+0x2b4>)
	rollerfreq[5] = lv_roller_create(Tela_Freq, NULL);
 800a9b4:	f8d9 0000 	ldr.w	r0, [r9]
	style_txt.body.main_color = LV_COLOR_GRAY;
 800a9b8:	8893      	ldrh	r3, [r2, #4]
 800a9ba:	8073      	strh	r3, [r6, #2]
	style_txt.body.grad_color = LV_COLOR_BLACK;
 800a9bc:	7933      	ldrb	r3, [r6, #4]
 800a9be:	f36f 0304 	bfc	r3, #0, #5
 800a9c2:	7133      	strb	r3, [r6, #4]
 800a9c4:	88b3      	ldrh	r3, [r6, #4]
 800a9c6:	f36f 134a 	bfc	r3, #5, #6
 800a9ca:	80b3      	strh	r3, [r6, #4]
 800a9cc:	0a1b      	lsrs	r3, r3, #8
 800a9ce:	f36f 03c7 	bfc	r3, #3, #5
 800a9d2:	7173      	strb	r3, [r6, #5]
	style_txt.text.font = &lv_font_eurostile_24;
 800a9d4:	4b9e      	ldr	r3, [pc, #632]	; (800ac50 <lv_ex_roller+0x2b8>)
 800a9d6:	6273      	str	r3, [r6, #36]	; 0x24
	style_txt.text.letter_space = 1;
 800a9d8:	2501      	movs	r5, #1
	style_txt.text.color = LV_COLOR_WHITE;
 800a9da:	8853      	ldrh	r3, [r2, #2]
 800a9dc:	8433      	strh	r3, [r6, #32]
	style_txt.text.line_space = 2;
 800a9de:	f04f 0b02 	mov.w	fp, #2
	rollerfreq[5] = lv_roller_create(Tela_Freq, NULL);
 800a9e2:	2100      	movs	r1, #0
	style_txt.text.letter_space = 1;
 800a9e4:	8535      	strh	r5, [r6, #40]	; 0x28
	style_txt.text.line_space = 2;
 800a9e6:	f8a6 b02a 	strh.w	fp, [r6, #42]	; 0x2a
	rollerfreq[5] = lv_roller_create(Tela_Freq, NULL);
 800a9ea:	f00e f94d 	bl	8018c88 <lv_roller_create>
	lv_obj_set_user_data(rollerfreq[5], 5);
 800a9ee:	2105      	movs	r1, #5
	rollerfreq[5] = lv_roller_create(Tela_Freq, NULL);
 800a9f0:	6160      	str	r0, [r4, #20]
	lv_obj_set_user_data(rollerfreq[5], 5);
 800a9f2:	f004 fb30 	bl	800f056 <lv_obj_set_user_data>
    lv_roller_set_options(rollerfreq[5], "0\n1", LV_ROLLER_MODE_INIFINITE);
 800a9f6:	462a      	mov	r2, r5
 800a9f8:	6960      	ldr	r0, [r4, #20]
 800a9fa:	4996      	ldr	r1, [pc, #600]	; (800ac54 <lv_ex_roller+0x2bc>)
 800a9fc:	f00e fa9e 	bl	8018f3c <lv_roller_set_options>
    lv_roller_set_visible_row_count(rollerfreq[5], 1);
 800aa00:	4629      	mov	r1, r5
 800aa02:	6960      	ldr	r0, [r4, #20]
 800aa04:	f00e f924 	bl	8018c50 <lv_roller_set_visible_row_count>
    lv_roller_set_selected(rollerfreq[5], 1, true);
 800aa08:	462a      	mov	r2, r5
 800aa0a:	4629      	mov	r1, r5
 800aa0c:	6960      	ldr	r0, [r4, #20]
 800aa0e:	f00e f9f1 	bl	8018df4 <lv_roller_set_selected>
    lv_ddlist_set_fix_width(roller, w);
 800aa12:	6960      	ldr	r0, [r4, #20]
 800aa14:	2113      	movs	r1, #19
 800aa16:	f00b fa64 	bl	8015ee2 <lv_ddlist_set_fix_width>
    lv_roller_set_style(rollerfreq[5], LV_ROLLER_STYLE_BG, &style_txt);
 800aa1a:	4632      	mov	r2, r6
 800aa1c:	6960      	ldr	r0, [r4, #20]
 800aa1e:	2100      	movs	r1, #0
 800aa20:	f00e f9be 	bl	8018da0 <lv_roller_set_style>
    lv_obj_align(rollerfreq[5], NULL, LV_ALIGN_IN_TOP_LEFT, 10, 44);
 800aa24:	f04f 082c 	mov.w	r8, #44	; 0x2c
    lv_roller_set_style(rollerfreq[5], LV_ROLLER_STYLE_SEL, &style_txt);
 800aa28:	4632      	mov	r2, r6
 800aa2a:	4629      	mov	r1, r5
 800aa2c:	6960      	ldr	r0, [r4, #20]
 800aa2e:	f00e f9b7 	bl	8018da0 <lv_roller_set_style>
    lv_obj_align(rollerfreq[5], NULL, LV_ALIGN_IN_TOP_LEFT, 10, 44);
 800aa32:	230a      	movs	r3, #10
 800aa34:	462a      	mov	r2, r5
 800aa36:	6960      	ldr	r0, [r4, #20]
 800aa38:	f8cd 8000 	str.w	r8, [sp]
 800aa3c:	2100      	movs	r1, #0
 800aa3e:	f003 fd4b 	bl	800e4d8 <lv_obj_align>
    lv_obj_set_event_cb(rollerfreq[5], event_handler);
 800aa42:	4639      	mov	r1, r7
 800aa44:	6960      	ldr	r0, [r4, #20]
 800aa46:	f003 fba8 	bl	800e19a <lv_obj_set_event_cb>
    rollerfreq[4] = lv_roller_create(Tela_Freq, NULL);
 800aa4a:	2100      	movs	r1, #0
 800aa4c:	f8d9 0000 	ldr.w	r0, [r9]
 800aa50:	f00e f91a 	bl	8018c88 <lv_roller_create>
    lv_obj_set_user_data(rollerfreq[4], 4);
 800aa54:	2104      	movs	r1, #4
    rollerfreq[4] = lv_roller_create(Tela_Freq, NULL);
 800aa56:	6120      	str	r0, [r4, #16]
    lv_obj_set_user_data(rollerfreq[4], 4);
 800aa58:	f004 fafd 	bl	800f056 <lv_obj_set_user_data>
    lv_roller_set_options(rollerfreq[4], "0\n8\n9", LV_ROLLER_MODE_INIFINITE);
 800aa5c:	462a      	mov	r2, r5
 800aa5e:	6920      	ldr	r0, [r4, #16]
 800aa60:	497d      	ldr	r1, [pc, #500]	; (800ac58 <lv_ex_roller+0x2c0>)
 800aa62:	f00e fa6b 	bl	8018f3c <lv_roller_set_options>
    lv_roller_set_visible_row_count(rollerfreq[4], 1);
 800aa66:	4629      	mov	r1, r5
 800aa68:	6920      	ldr	r0, [r4, #16]
 800aa6a:	f00e f8f1 	bl	8018c50 <lv_roller_set_visible_row_count>
    lv_roller_set_selected(rollerfreq[4], 0, true);
 800aa6e:	462a      	mov	r2, r5
 800aa70:	6920      	ldr	r0, [r4, #16]
 800aa72:	2100      	movs	r1, #0
 800aa74:	f00e f9be 	bl	8018df4 <lv_roller_set_selected>
 800aa78:	6920      	ldr	r0, [r4, #16]
 800aa7a:	2113      	movs	r1, #19
 800aa7c:	f00b fa31 	bl	8015ee2 <lv_ddlist_set_fix_width>
    lv_roller_set_style(rollerfreq[4], LV_ROLLER_STYLE_BG, &style_txt);
 800aa80:	4632      	mov	r2, r6
 800aa82:	6920      	ldr	r0, [r4, #16]
 800aa84:	2100      	movs	r1, #0
 800aa86:	f00e f98b 	bl	8018da0 <lv_roller_set_style>
    lv_roller_set_style(rollerfreq[4], LV_ROLLER_STYLE_SEL, &style_txt);
 800aa8a:	4632      	mov	r2, r6
 800aa8c:	4629      	mov	r1, r5
 800aa8e:	6920      	ldr	r0, [r4, #16]
 800aa90:	f00e f986 	bl	8018da0 <lv_roller_set_style>
    lv_obj_align(rollerfreq[4], NULL, LV_ALIGN_IN_TOP_LEFT, 33, 44);
 800aa94:	2321      	movs	r3, #33	; 0x21
 800aa96:	462a      	mov	r2, r5
 800aa98:	6920      	ldr	r0, [r4, #16]
 800aa9a:	f8cd 8000 	str.w	r8, [sp]
 800aa9e:	2100      	movs	r1, #0
 800aaa0:	f003 fd1a 	bl	800e4d8 <lv_obj_align>
    lv_obj_set_event_cb(rollerfreq[4], event_handler);
 800aaa4:	4639      	mov	r1, r7
 800aaa6:	6920      	ldr	r0, [r4, #16]
 800aaa8:	f003 fb77 	bl	800e19a <lv_obj_set_event_cb>
    rollerfreq[3] = lv_roller_create(Tela_Freq, NULL);
 800aaac:	2100      	movs	r1, #0
 800aaae:	f8d9 0000 	ldr.w	r0, [r9]
 800aab2:	f00e f8e9 	bl	8018c88 <lv_roller_create>
    lv_obj_set_user_data(rollerfreq[3], 3);
 800aab6:	2103      	movs	r1, #3
    rollerfreq[3] = lv_roller_create(Tela_Freq, NULL);
 800aab8:	60e0      	str	r0, [r4, #12]
    lv_obj_set_user_data(rollerfreq[3], 3);
 800aaba:	f004 facc 	bl	800f056 <lv_obj_set_user_data>
    lv_roller_set_options(rollerfreq[3], "0\n1\n2\n3\n4\n5\n6\n7\n8\n9", LV_ROLLER_MODE_INIFINITE);
 800aabe:	462a      	mov	r2, r5
 800aac0:	4651      	mov	r1, sl
 800aac2:	68e0      	ldr	r0, [r4, #12]
 800aac4:	f00e fa3a 	bl	8018f3c <lv_roller_set_options>
    lv_roller_set_visible_row_count(rollerfreq[3], 1);
 800aac8:	4629      	mov	r1, r5
 800aaca:	68e0      	ldr	r0, [r4, #12]
 800aacc:	f00e f8c0 	bl	8018c50 <lv_roller_set_visible_row_count>
    lv_roller_set_selected(rollerfreq[3], 3, true);
 800aad0:	462a      	mov	r2, r5
 800aad2:	68e0      	ldr	r0, [r4, #12]
 800aad4:	2103      	movs	r1, #3
 800aad6:	f00e f98d 	bl	8018df4 <lv_roller_set_selected>
 800aada:	68e0      	ldr	r0, [r4, #12]
 800aadc:	2113      	movs	r1, #19
 800aade:	f00b fa00 	bl	8015ee2 <lv_ddlist_set_fix_width>
    lv_roller_set_fix_width(rollerfreq[3], 19);
    lv_roller_set_style(rollerfreq[3], LV_ROLLER_STYLE_BG, &style_txt);
 800aae2:	4632      	mov	r2, r6
 800aae4:	68e0      	ldr	r0, [r4, #12]
 800aae6:	2100      	movs	r1, #0
 800aae8:	f00e f95a 	bl	8018da0 <lv_roller_set_style>
    lv_roller_set_style(rollerfreq[3], LV_ROLLER_STYLE_SEL, &style_txt);
 800aaec:	4632      	mov	r2, r6
 800aaee:	4629      	mov	r1, r5
 800aaf0:	68e0      	ldr	r0, [r4, #12]
 800aaf2:	f00e f955 	bl	8018da0 <lv_roller_set_style>
    lv_obj_align(rollerfreq[3], NULL, LV_ALIGN_IN_TOP_LEFT, 57, 44);
 800aaf6:	2339      	movs	r3, #57	; 0x39
 800aaf8:	462a      	mov	r2, r5
 800aafa:	68e0      	ldr	r0, [r4, #12]
 800aafc:	f8cd 8000 	str.w	r8, [sp]
 800ab00:	2100      	movs	r1, #0
 800ab02:	f003 fce9 	bl	800e4d8 <lv_obj_align>
    lv_obj_set_event_cb(rollerfreq[3], event_handler);
 800ab06:	4639      	mov	r1, r7
 800ab08:	68e0      	ldr	r0, [r4, #12]
 800ab0a:	f003 fb46 	bl	800e19a <lv_obj_set_event_cb>
    // Casa1
    rollerfreq[2] = lv_roller_create(Tela_Freq, NULL);
 800ab0e:	2100      	movs	r1, #0
 800ab10:	f8d9 0000 	ldr.w	r0, [r9]
 800ab14:	f00e f8b8 	bl	8018c88 <lv_roller_create>
    lv_obj_set_user_data(rollerfreq[2], 2);
 800ab18:	4659      	mov	r1, fp
    rollerfreq[2] = lv_roller_create(Tela_Freq, NULL);
 800ab1a:	60a0      	str	r0, [r4, #8]
    lv_obj_set_user_data(rollerfreq[2], 2);
 800ab1c:	f004 fa9b 	bl	800f056 <lv_obj_set_user_data>
    lv_roller_set_options(rollerfreq[2], "0\n1\n2\n3\n4\n5\n6\n7\n8\n9", LV_ROLLER_MODE_INIFINITE);
 800ab20:	462a      	mov	r2, r5
 800ab22:	4651      	mov	r1, sl
 800ab24:	68a0      	ldr	r0, [r4, #8]
 800ab26:	f00e fa09 	bl	8018f3c <lv_roller_set_options>
    lv_roller_set_visible_row_count(rollerfreq[2], 1);
 800ab2a:	4629      	mov	r1, r5
 800ab2c:	68a0      	ldr	r0, [r4, #8]
 800ab2e:	f00e f88f 	bl	8018c50 <lv_roller_set_visible_row_count>
    lv_roller_set_selected(rollerfreq[2], 1, true);
 800ab32:	462a      	mov	r2, r5
 800ab34:	4629      	mov	r1, r5
 800ab36:	68a0      	ldr	r0, [r4, #8]
 800ab38:	f00e f95c 	bl	8018df4 <lv_roller_set_selected>
 800ab3c:	68a0      	ldr	r0, [r4, #8]
 800ab3e:	2113      	movs	r1, #19
 800ab40:	f00b f9cf 	bl	8015ee2 <lv_ddlist_set_fix_width>
    lv_roller_set_fix_width(rollerfreq[2], 19);
    lv_roller_set_style(rollerfreq[2], LV_ROLLER_STYLE_BG, &style_txt);
 800ab44:	4632      	mov	r2, r6
 800ab46:	68a0      	ldr	r0, [r4, #8]
 800ab48:	2100      	movs	r1, #0
 800ab4a:	f00e f929 	bl	8018da0 <lv_roller_set_style>
    lv_roller_set_style(rollerfreq[2], LV_ROLLER_STYLE_SEL, &style_txt);
 800ab4e:	4632      	mov	r2, r6
 800ab50:	4629      	mov	r1, r5
 800ab52:	68a0      	ldr	r0, [r4, #8]
 800ab54:	f00e f924 	bl	8018da0 <lv_roller_set_style>
    lv_obj_align(rollerfreq[2], NULL, LV_ALIGN_IN_TOP_LEFT, 84, 44);
 800ab58:	2354      	movs	r3, #84	; 0x54
 800ab5a:	462a      	mov	r2, r5
 800ab5c:	68a0      	ldr	r0, [r4, #8]
 800ab5e:	f8cd 8000 	str.w	r8, [sp]
 800ab62:	2100      	movs	r1, #0
 800ab64:	f003 fcb8 	bl	800e4d8 <lv_obj_align>
    lv_obj_set_event_cb(rollerfreq[2], event_handler);
 800ab68:	4639      	mov	r1, r7
 800ab6a:	68a0      	ldr	r0, [r4, #8]
 800ab6c:	f003 fb15 	bl	800e19a <lv_obj_set_event_cb>
    // Casa1
    rollerfreq[1] = lv_roller_create(Tela_Freq, NULL);
 800ab70:	2100      	movs	r1, #0
 800ab72:	f8d9 0000 	ldr.w	r0, [r9]
 800ab76:	f00e f887 	bl	8018c88 <lv_roller_create>
    lv_obj_set_user_data(rollerfreq[1], 1);
 800ab7a:	4629      	mov	r1, r5
    rollerfreq[1] = lv_roller_create(Tela_Freq, NULL);
 800ab7c:	6060      	str	r0, [r4, #4]
    lv_obj_set_user_data(rollerfreq[1], 1);
 800ab7e:	f004 fa6a 	bl	800f056 <lv_obj_set_user_data>
    lv_roller_set_options(rollerfreq[1], "0\n1\n2\n3\n4\n5\n6\n7\n8\n9", LV_ROLLER_MODE_INIFINITE);
 800ab82:	462a      	mov	r2, r5
 800ab84:	4651      	mov	r1, sl
 800ab86:	6860      	ldr	r0, [r4, #4]
 800ab88:	f00e f9d8 	bl	8018f3c <lv_roller_set_options>
    lv_roller_set_visible_row_count(rollerfreq[1], 1);
 800ab8c:	4629      	mov	r1, r5
 800ab8e:	6860      	ldr	r0, [r4, #4]
 800ab90:	f00e f85e 	bl	8018c50 <lv_roller_set_visible_row_count>
    lv_roller_set_selected(rollerfreq[1], 0, true);
 800ab94:	462a      	mov	r2, r5
 800ab96:	6860      	ldr	r0, [r4, #4]
 800ab98:	2100      	movs	r1, #0
 800ab9a:	f00e f92b 	bl	8018df4 <lv_roller_set_selected>
 800ab9e:	6860      	ldr	r0, [r4, #4]
 800aba0:	2113      	movs	r1, #19
 800aba2:	f00b f99e 	bl	8015ee2 <lv_ddlist_set_fix_width>
    lv_roller_set_fix_width(rollerfreq[1], 19);
    lv_roller_set_style(rollerfreq[1], LV_ROLLER_STYLE_BG, &style_txt);
 800aba6:	4632      	mov	r2, r6
 800aba8:	6860      	ldr	r0, [r4, #4]
 800abaa:	2100      	movs	r1, #0
 800abac:	f00e f8f8 	bl	8018da0 <lv_roller_set_style>
    lv_roller_set_style(rollerfreq[1], LV_ROLLER_STYLE_SEL, &style_txt);
 800abb0:	4632      	mov	r2, r6
 800abb2:	4629      	mov	r1, r5
 800abb4:	6860      	ldr	r0, [r4, #4]
 800abb6:	f00e f8f3 	bl	8018da0 <lv_roller_set_style>
    lv_obj_align(rollerfreq[1], NULL, LV_ALIGN_IN_TOP_LEFT, 107, 44);
 800abba:	236b      	movs	r3, #107	; 0x6b
 800abbc:	462a      	mov	r2, r5
 800abbe:	6860      	ldr	r0, [r4, #4]
 800abc0:	f8cd 8000 	str.w	r8, [sp]
 800abc4:	2100      	movs	r1, #0
 800abc6:	f003 fc87 	bl	800e4d8 <lv_obj_align>
    lv_obj_set_event_cb(rollerfreq[1], event_handler);
 800abca:	4639      	mov	r1, r7
 800abcc:	6860      	ldr	r0, [r4, #4]
 800abce:	f003 fae4 	bl	800e19a <lv_obj_set_event_cb>

    // teste
    rollerfreq[0] = lv_roller_create(Tela_Freq, NULL);
 800abd2:	2100      	movs	r1, #0
 800abd4:	f8d9 0000 	ldr.w	r0, [r9]
 800abd8:	f00e f856 	bl	8018c88 <lv_roller_create>
    lv_obj_set_user_data(rollerfreq[0], 0);
 800abdc:	2100      	movs	r1, #0
    rollerfreq[0] = lv_roller_create(Tela_Freq, NULL);
 800abde:	6020      	str	r0, [r4, #0]
    lv_obj_set_user_data(rollerfreq[0], 0);
 800abe0:	f004 fa39 	bl	800f056 <lv_obj_set_user_data>
    lv_roller_set_options(rollerfreq[0], "0", LV_ROLLER_MODE_INIFINITE);
 800abe4:	462a      	mov	r2, r5
 800abe6:	6820      	ldr	r0, [r4, #0]
 800abe8:	491c      	ldr	r1, [pc, #112]	; (800ac5c <lv_ex_roller+0x2c4>)
 800abea:	f00e f9a7 	bl	8018f3c <lv_roller_set_options>
    lv_roller_set_visible_row_count(rollerfreq[0], 1);
 800abee:	4629      	mov	r1, r5
 800abf0:	6820      	ldr	r0, [r4, #0]
 800abf2:	f00e f82d 	bl	8018c50 <lv_roller_set_visible_row_count>
    lv_roller_set_selected(rollerfreq[0], 0, true);
 800abf6:	462a      	mov	r2, r5
 800abf8:	6820      	ldr	r0, [r4, #0]
 800abfa:	2100      	movs	r1, #0
 800abfc:	f00e f8fa 	bl	8018df4 <lv_roller_set_selected>
 800ac00:	6820      	ldr	r0, [r4, #0]
 800ac02:	2113      	movs	r1, #19
 800ac04:	f00b f96d 	bl	8015ee2 <lv_ddlist_set_fix_width>
    lv_roller_set_fix_width(rollerfreq[0], 19);
    lv_roller_set_style(rollerfreq[0], LV_ROLLER_STYLE_BG, &style_txt);
 800ac08:	4632      	mov	r2, r6
 800ac0a:	6820      	ldr	r0, [r4, #0]
 800ac0c:	2100      	movs	r1, #0
 800ac0e:	f00e f8c7 	bl	8018da0 <lv_roller_set_style>
    lv_roller_set_style(rollerfreq[0], LV_ROLLER_STYLE_SEL, &style_txt);
 800ac12:	4632      	mov	r2, r6
 800ac14:	4629      	mov	r1, r5
 800ac16:	6820      	ldr	r0, [r4, #0]
 800ac18:	f00e f8c2 	bl	8018da0 <lv_roller_set_style>
    lv_obj_align(rollerfreq[0], NULL, LV_ALIGN_IN_TOP_LEFT, 131, 44);
 800ac1c:	6820      	ldr	r0, [r4, #0]
 800ac1e:	f8cd 8000 	str.w	r8, [sp]
 800ac22:	2383      	movs	r3, #131	; 0x83
 800ac24:	462a      	mov	r2, r5
 800ac26:	2100      	movs	r1, #0
 800ac28:	f003 fc56 	bl	800e4d8 <lv_obj_align>
    lv_obj_set_event_cb(rollerfreq[0], event_handler);
 800ac2c:	6820      	ldr	r0, [r4, #0]
 800ac2e:	4639      	mov	r1, r7
}
 800ac30:	b003      	add	sp, #12
 800ac32:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_set_event_cb(rollerfreq[0], event_handler);
 800ac36:	f003 bab0 	b.w	800e19a <lv_obj_set_event_cb>
 800ac3a:	bf00      	nop
 800ac3c:	2000530c 	.word	0x2000530c
 800ac40:	2000c514 	.word	0x2000c514
 800ac44:	2000527c 	.word	0x2000527c
 800ac48:	0800a795 	.word	0x0800a795
 800ac4c:	0801cb0c 	.word	0x0801cb0c
 800ac50:	2000132c 	.word	0x2000132c
 800ac54:	0802bba8 	.word	0x0802bba8
 800ac58:	0802bc00 	.word	0x0802bc00
 800ac5c:	0802bba6 	.word	0x0802bba6
 800ac60:	20005220 	.word	0x20005220
 800ac64:	0802bc06 	.word	0x0802bc06

0800ac68 <screen_freq>:
	Tela_Freq = lv_obj_create(NULL, NULL);
 800ac68:	2100      	movs	r1, #0
{
 800ac6a:	b538      	push	{r3, r4, r5, lr}
	Tela_Freq = lv_obj_create(NULL, NULL);
 800ac6c:	4608      	mov	r0, r1
 800ac6e:	f003 fe55 	bl	800e91c <lv_obj_create>
 800ac72:	4d12      	ldr	r5, [pc, #72]	; (800acbc <screen_freq+0x54>)
	img_fundo = lv_img_create(Tela_Freq, NULL);
 800ac74:	4c12      	ldr	r4, [pc, #72]	; (800acc0 <screen_freq+0x58>)
	Tela_Freq = lv_obj_create(NULL, NULL);
 800ac76:	6028      	str	r0, [r5, #0]
	img_fundo = lv_img_create(Tela_Freq, NULL);
 800ac78:	2100      	movs	r1, #0
 800ac7a:	f00b fd51 	bl	8016720 <lv_img_create>
	lv_img_set_src(img_fundo, &tela_freq);
 800ac7e:	4911      	ldr	r1, [pc, #68]	; (800acc4 <screen_freq+0x5c>)
	img_fundo = lv_img_create(Tela_Freq, NULL);
 800ac80:	6020      	str	r0, [r4, #0]
	lv_img_set_src(img_fundo, &tela_freq);
 800ac82:	f00b fcbd 	bl	8016600 <lv_img_set_src>
	lv_obj_set_protect(img_fundo, LV_PROTECT_POS);
 800ac86:	2104      	movs	r1, #4
 800ac88:	6820      	ldr	r0, [r4, #0]
 800ac8a:	f003 fa79 	bl	800e180 <lv_obj_set_protect>
	lv_obj_set_event_cb(img_fundo, btn_event_esc_freq);
 800ac8e:	490e      	ldr	r1, [pc, #56]	; (800acc8 <screen_freq+0x60>)
 800ac90:	6820      	ldr	r0, [r4, #0]
 800ac92:	f003 fa82 	bl	800e19a <lv_obj_set_event_cb>
	lv_obj_set_click(img_fundo, 1);
 800ac96:	2101      	movs	r1, #1
 800ac98:	6820      	ldr	r0, [r4, #0]
 800ac9a:	f003 fa55 	bl	800e148 <lv_obj_set_click>
	create_vumeter_freq();
 800ac9e:	f7ff fdcd 	bl	800a83c <create_vumeter_freq>
	update_vumeter(frequencia);
 800aca2:	4b0a      	ldr	r3, [pc, #40]	; (800accc <screen_freq+0x64>)
 800aca4:	6818      	ldr	r0, [r3, #0]
 800aca6:	f7ff fe39 	bl	800a91c <update_vumeter>
	lv_ex_roller();
 800acaa:	f7ff fe75 	bl	800a998 <lv_ex_roller>
 800acae:	6828      	ldr	r0, [r5, #0]
 800acb0:	f003 f820 	bl	800dcf4 <lv_disp_load_scr>
	TelaAtiva = TelaFrequencia;
 800acb4:	4b06      	ldr	r3, [pc, #24]	; (800acd0 <screen_freq+0x68>)
 800acb6:	2202      	movs	r2, #2
 800acb8:	601a      	str	r2, [r3, #0]
 800acba:	bd38      	pop	{r3, r4, r5, pc}
 800acbc:	20005220 	.word	0x20005220
 800acc0:	20005278 	.word	0x20005278
 800acc4:	20001bb0 	.word	0x20001bb0
 800acc8:	0800a779 	.word	0x0800a779
 800accc:	20000004 	.word	0x20000004
 800acd0:	200033cc 	.word	0x200033cc

0800acd4 <btn_event_esc_audio>:
	lv_obj_set_pos(imgbtn2, 2, 18);
}

static void btn_event_esc_audio(lv_obj_t * btn, lv_event_t event)
{
	if(event == LV_EVENT_RELEASED) {
 800acd4:	2907      	cmp	r1, #7
{
 800acd6:	b508      	push	{r3, lr}
	if(event == LV_EVENT_RELEASED) {
 800acd8:	d10a      	bne.n	800acf0 <btn_event_esc_audio+0x1c>
		printf("Button ESC Released\n");
 800acda:	4806      	ldr	r0, [pc, #24]	; (800acf4 <btn_event_esc_audio+0x20>)
 800acdc:	f00e fc9a 	bl	8019614 <puts>
		lv_obj_del(Tela_Reading_MPX);
 800ace0:	4b05      	ldr	r3, [pc, #20]	; (800acf8 <btn_event_esc_audio+0x24>)
 800ace2:	6818      	ldr	r0, [r3, #0]
 800ace4:	f004 f80b 	bl	800ecfe <lv_obj_del>
		screen_readings();
	}
}
 800ace8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_readings();
 800acec:	f001 bccc 	b.w	800c688 <screen_readings>
 800acf0:	bd08      	pop	{r3, pc}
 800acf2:	bf00      	nop
 800acf4:	0802bc1a 	.word	0x0802bc1a
 800acf8:	20005348 	.word	0x20005348

0800acfc <btn_event_next_audio>:
	if(event == LV_EVENT_RELEASED) {
 800acfc:	2907      	cmp	r1, #7
{
 800acfe:	b508      	push	{r3, lr}
	if(event == LV_EVENT_RELEASED) {
 800ad00:	d10a      	bne.n	800ad18 <btn_event_next_audio+0x1c>
		printf("Button Next Released SCREEN_READING_TEMP\n");
 800ad02:	4806      	ldr	r0, [pc, #24]	; (800ad1c <btn_event_next_audio+0x20>)
 800ad04:	f00e fc86 	bl	8019614 <puts>
		lv_obj_del(Tela_Reading_MPX);
 800ad08:	4b05      	ldr	r3, [pc, #20]	; (800ad20 <btn_event_next_audio+0x24>)
 800ad0a:	6818      	ldr	r0, [r3, #0]
 800ad0c:	f003 fff7 	bl	800ecfe <lv_obj_del>
}
 800ad10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_reading_temp();
 800ad14:	f000 beea 	b.w	800baec <screen_reading_temp>
 800ad18:	bd08      	pop	{r3, pc}
 800ad1a:	bf00      	nop
 800ad1c:	0802bc2e 	.word	0x0802bc2e
 800ad20:	20005348 	.word	0x20005348

0800ad24 <create_vumeter_m>:
{
 800ad24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800ad26:	4e30      	ldr	r6, [pc, #192]	; (800ade8 <create_vumeter_m+0xc4>)
 800ad28:	4930      	ldr	r1, [pc, #192]	; (800adec <create_vumeter_m+0xc8>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800ad2a:	4c31      	ldr	r4, [pc, #196]	; (800adf0 <create_vumeter_m+0xcc>)
		bar_m[x] = lv_bar_create(Tela_Reading_MPX, NULL);
 800ad2c:	4f31      	ldr	r7, [pc, #196]	; (800adf4 <create_vumeter_m+0xd0>)
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800ad2e:	4630      	mov	r0, r6
 800ad30:	f004 fcd0 	bl	800f6d4 <lv_style_copy>
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800ad34:	4b30      	ldr	r3, [pc, #192]	; (800adf8 <create_vumeter_m+0xd4>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800ad36:	492d      	ldr	r1, [pc, #180]	; (800adec <create_vumeter_m+0xc8>)
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800ad38:	881b      	ldrh	r3, [r3, #0]
 800ad3a:	80b3      	strh	r3, [r6, #4]
	style_indic_bar.body.radius = 0;
 800ad3c:	2500      	movs	r5, #0
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800ad3e:	4620      	mov	r0, r4
	style_indic_bar.body.main_color = LV_COLOR_MAKE(105, 105, 105);
 800ad40:	8073      	strh	r3, [r6, #2]
	style_indic_bar.body.border.color = LV_COLOR_MAKE(105, 105, 105);
 800ad42:	8173      	strh	r3, [r6, #10]
	style_indic_bar.body.radius = 0;
 800ad44:	80f5      	strh	r5, [r6, #6]
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800ad46:	f004 fcc5 	bl	800f6d4 <lv_style_copy>
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800ad4a:	7923      	ldrb	r3, [r4, #4]
	style_indic_bar_vd.body.radius = 0;
 800ad4c:	80e5      	strh	r5, [r4, #6]
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800ad4e:	f365 0304 	bfi	r3, r5, #0, #5
 800ad52:	7123      	strb	r3, [r4, #4]
 800ad54:	88a3      	ldrh	r3, [r4, #4]
 800ad56:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800ad5a:	80a3      	strh	r3, [r4, #4]
 800ad5c:	0a1b      	lsrs	r3, r3, #8
 800ad5e:	f365 03c7 	bfi	r3, r5, #3, #5
 800ad62:	7163      	strb	r3, [r4, #5]
	style_indic_bar_vd.body.main_color = LV_COLOR_MAKE(0, 255, 0);
 800ad64:	78a3      	ldrb	r3, [r4, #2]
 800ad66:	f365 0304 	bfi	r3, r5, #0, #5
 800ad6a:	70a3      	strb	r3, [r4, #2]
 800ad6c:	8863      	ldrh	r3, [r4, #2]
 800ad6e:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800ad72:	8063      	strh	r3, [r4, #2]
 800ad74:	0a1b      	lsrs	r3, r3, #8
 800ad76:	f365 03c7 	bfi	r3, r5, #3, #5
 800ad7a:	70e3      	strb	r3, [r4, #3]
	style_indic_bar_vd.body.border.color = LV_COLOR_MAKE(0, 255, 0);
 800ad7c:	7aa3      	ldrb	r3, [r4, #10]
 800ad7e:	f365 0304 	bfi	r3, r5, #0, #5
 800ad82:	72a3      	strb	r3, [r4, #10]
 800ad84:	8963      	ldrh	r3, [r4, #10]
 800ad86:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800ad8a:	8163      	strh	r3, [r4, #10]
 800ad8c:	0a1b      	lsrs	r3, r3, #8
 800ad8e:	f365 03c7 	bfi	r3, r5, #3, #5
 800ad92:	72e3      	strb	r3, [r4, #11]
 800ad94:	4c19      	ldr	r4, [pc, #100]	; (800adfc <create_vumeter_m+0xd8>)
		bar_m[x] = lv_bar_create(Tela_Reading_MPX, NULL);
 800ad96:	6838      	ldr	r0, [r7, #0]
 800ad98:	2100      	movs	r1, #0
 800ad9a:	f009 fd7d 	bl	8014898 <lv_bar_create>
		lv_obj_set_size(bar_m[x], 4, 11);
 800ad9e:	220b      	movs	r2, #11
		bar_m[x] = lv_bar_create(Tela_Reading_MPX, NULL);
 800ada0:	6060      	str	r0, [r4, #4]
		lv_obj_set_size(bar_m[x], 4, 11);
 800ada2:	2104      	movs	r1, #4
 800ada4:	f003 ff38 	bl	800ec18 <lv_obj_set_size>
		lv_bar_set_style(bar_m[x], LV_BAR_STYLE_BG, &style_indic_bar);
 800ada8:	6860      	ldr	r0, [r4, #4]
 800adaa:	4632      	mov	r2, r6
 800adac:	2100      	movs	r1, #0
 800adae:	f009 fd5d 	bl	801486c <lv_bar_set_style>
		lv_bar_set_style(bar_m[x], LV_BAR_STYLE_INDIC, &style_indic_bar);
 800adb2:	6860      	ldr	r0, [r4, #4]
 800adb4:	4632      	mov	r2, r6
 800adb6:	2101      	movs	r1, #1
 800adb8:	f009 fd58 	bl	801486c <lv_bar_set_style>
		lv_obj_align(bar_m[x], NULL, LV_ALIGN_IN_TOP_LEFT, m_pos_x[x], 48);
 800adbc:	2230      	movs	r2, #48	; 0x30
 800adbe:	4b10      	ldr	r3, [pc, #64]	; (800ae00 <create_vumeter_m+0xdc>)
 800adc0:	9200      	str	r2, [sp, #0]
 800adc2:	f933 3025 	ldrsh.w	r3, [r3, r5, lsl #2]
 800adc6:	6860      	ldr	r0, [r4, #4]
 800adc8:	2201      	movs	r2, #1
 800adca:	2100      	movs	r1, #0
 800adcc:	f003 fb84 	bl	800e4d8 <lv_obj_align>
 800add0:	3501      	adds	r5, #1
		lv_bar_set_value(bar_m[x], 100, 0);
 800add2:	2200      	movs	r2, #0
 800add4:	2164      	movs	r1, #100	; 0x64
 800add6:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800adda:	f009 fceb 	bl	80147b4 <lv_bar_set_value>
	for(uint8_t x = 0; x < 24; x++) {
 800adde:	2d18      	cmp	r5, #24
 800ade0:	d1d9      	bne.n	800ad96 <create_vumeter_m+0x72>
}
 800ade2:	b003      	add	sp, #12
 800ade4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ade6:	bf00      	nop
 800ade8:	20005470 	.word	0x20005470
 800adec:	2000c334 	.word	0x2000c334
 800adf0:	200054ac 	.word	0x200054ac
 800adf4:	20005348 	.word	0x20005348
 800adf8:	0801cb12 	.word	0x0801cb12
 800adfc:	200053a8 	.word	0x200053a8
 800ae00:	0802bcb8 	.word	0x0802bcb8

0800ae04 <create_vumeter_r>:
{
 800ae04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800ae06:	4e30      	ldr	r6, [pc, #192]	; (800aec8 <create_vumeter_r+0xc4>)
 800ae08:	4930      	ldr	r1, [pc, #192]	; (800aecc <create_vumeter_r+0xc8>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800ae0a:	4c31      	ldr	r4, [pc, #196]	; (800aed0 <create_vumeter_r+0xcc>)
		bar_r[x] = lv_bar_create(Tela_Reading_MPX, NULL);
 800ae0c:	4f31      	ldr	r7, [pc, #196]	; (800aed4 <create_vumeter_r+0xd0>)
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800ae0e:	4630      	mov	r0, r6
 800ae10:	f004 fc60 	bl	800f6d4 <lv_style_copy>
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800ae14:	4b30      	ldr	r3, [pc, #192]	; (800aed8 <create_vumeter_r+0xd4>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800ae16:	492d      	ldr	r1, [pc, #180]	; (800aecc <create_vumeter_r+0xc8>)
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800ae18:	881b      	ldrh	r3, [r3, #0]
 800ae1a:	80b3      	strh	r3, [r6, #4]
	style_indic_bar.body.radius = 0;
 800ae1c:	2500      	movs	r5, #0
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800ae1e:	4620      	mov	r0, r4
	style_indic_bar.body.main_color = LV_COLOR_MAKE(105, 105, 105);
 800ae20:	8073      	strh	r3, [r6, #2]
	style_indic_bar.body.border.color = LV_COLOR_MAKE(105, 105, 105);
 800ae22:	8173      	strh	r3, [r6, #10]
	style_indic_bar.body.radius = 0;
 800ae24:	80f5      	strh	r5, [r6, #6]
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800ae26:	f004 fc55 	bl	800f6d4 <lv_style_copy>
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800ae2a:	7923      	ldrb	r3, [r4, #4]
	style_indic_bar_vd.body.radius = 0;
 800ae2c:	80e5      	strh	r5, [r4, #6]
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800ae2e:	f365 0304 	bfi	r3, r5, #0, #5
 800ae32:	7123      	strb	r3, [r4, #4]
 800ae34:	88a3      	ldrh	r3, [r4, #4]
 800ae36:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800ae3a:	80a3      	strh	r3, [r4, #4]
 800ae3c:	0a1b      	lsrs	r3, r3, #8
 800ae3e:	f365 03c7 	bfi	r3, r5, #3, #5
 800ae42:	7163      	strb	r3, [r4, #5]
	style_indic_bar_vd.body.main_color = LV_COLOR_MAKE(0, 255, 0);
 800ae44:	78a3      	ldrb	r3, [r4, #2]
 800ae46:	f365 0304 	bfi	r3, r5, #0, #5
 800ae4a:	70a3      	strb	r3, [r4, #2]
 800ae4c:	8863      	ldrh	r3, [r4, #2]
 800ae4e:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800ae52:	8063      	strh	r3, [r4, #2]
 800ae54:	0a1b      	lsrs	r3, r3, #8
 800ae56:	f365 03c7 	bfi	r3, r5, #3, #5
 800ae5a:	70e3      	strb	r3, [r4, #3]
	style_indic_bar_vd.body.border.color = LV_COLOR_MAKE(0, 255, 0);
 800ae5c:	7aa3      	ldrb	r3, [r4, #10]
 800ae5e:	f365 0304 	bfi	r3, r5, #0, #5
 800ae62:	72a3      	strb	r3, [r4, #10]
 800ae64:	8963      	ldrh	r3, [r4, #10]
 800ae66:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800ae6a:	8163      	strh	r3, [r4, #10]
 800ae6c:	0a1b      	lsrs	r3, r3, #8
 800ae6e:	f365 03c7 	bfi	r3, r5, #3, #5
 800ae72:	72e3      	strb	r3, [r4, #11]
 800ae74:	4c19      	ldr	r4, [pc, #100]	; (800aedc <create_vumeter_r+0xd8>)
		bar_r[x] = lv_bar_create(Tela_Reading_MPX, NULL);
 800ae76:	6838      	ldr	r0, [r7, #0]
 800ae78:	2100      	movs	r1, #0
 800ae7a:	f009 fd0d 	bl	8014898 <lv_bar_create>
		lv_obj_set_size(bar_r[x], 4, 21);
 800ae7e:	2215      	movs	r2, #21
		bar_r[x] = lv_bar_create(Tela_Reading_MPX, NULL);
 800ae80:	6060      	str	r0, [r4, #4]
		lv_obj_set_size(bar_r[x], 4, 21);
 800ae82:	2104      	movs	r1, #4
 800ae84:	f003 fec8 	bl	800ec18 <lv_obj_set_size>
		lv_bar_set_style(bar_r[x], LV_BAR_STYLE_BG, &style_indic_bar);
 800ae88:	6860      	ldr	r0, [r4, #4]
 800ae8a:	4632      	mov	r2, r6
 800ae8c:	2100      	movs	r1, #0
 800ae8e:	f009 fced 	bl	801486c <lv_bar_set_style>
		lv_bar_set_style(bar_r[x], LV_BAR_STYLE_INDIC, &style_indic_bar);
 800ae92:	6860      	ldr	r0, [r4, #4]
 800ae94:	4632      	mov	r2, r6
 800ae96:	2101      	movs	r1, #1
 800ae98:	f009 fce8 	bl	801486c <lv_bar_set_style>
		lv_obj_align(bar_r[x], NULL, LV_ALIGN_IN_TOP_LEFT, r_pos_x[x], 71);
 800ae9c:	2247      	movs	r2, #71	; 0x47
 800ae9e:	4b10      	ldr	r3, [pc, #64]	; (800aee0 <create_vumeter_r+0xdc>)
 800aea0:	9200      	str	r2, [sp, #0]
 800aea2:	f933 3025 	ldrsh.w	r3, [r3, r5, lsl #2]
 800aea6:	6860      	ldr	r0, [r4, #4]
 800aea8:	2201      	movs	r2, #1
 800aeaa:	2100      	movs	r1, #0
 800aeac:	f003 fb14 	bl	800e4d8 <lv_obj_align>
 800aeb0:	3501      	adds	r5, #1
		lv_bar_set_value(bar_r[x], 100, 0);
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	2164      	movs	r1, #100	; 0x64
 800aeb6:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800aeba:	f009 fc7b 	bl	80147b4 <lv_bar_set_value>
	for(uint8_t x = 0; x < 24; x++) {
 800aebe:	2d18      	cmp	r5, #24
 800aec0:	d1d9      	bne.n	800ae76 <create_vumeter_r+0x72>
}
 800aec2:	b003      	add	sp, #12
 800aec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aec6:	bf00      	nop
 800aec8:	20005470 	.word	0x20005470
 800aecc:	2000c334 	.word	0x2000c334
 800aed0:	200054ac 	.word	0x200054ac
 800aed4:	20005348 	.word	0x20005348
 800aed8:	0801cb12 	.word	0x0801cb12
 800aedc:	20005408 	.word	0x20005408
 800aee0:	0802bd18 	.word	0x0802bd18

0800aee4 <create_vumeter_l>:
{
 800aee4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800aee6:	4e30      	ldr	r6, [pc, #192]	; (800afa8 <create_vumeter_l+0xc4>)
 800aee8:	4930      	ldr	r1, [pc, #192]	; (800afac <create_vumeter_l+0xc8>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800aeea:	4c31      	ldr	r4, [pc, #196]	; (800afb0 <create_vumeter_l+0xcc>)
		bar_l[x] = lv_bar_create(Tela_Reading_MPX, NULL);
 800aeec:	4f31      	ldr	r7, [pc, #196]	; (800afb4 <create_vumeter_l+0xd0>)
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800aeee:	4630      	mov	r0, r6
 800aef0:	f004 fbf0 	bl	800f6d4 <lv_style_copy>
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800aef4:	4b30      	ldr	r3, [pc, #192]	; (800afb8 <create_vumeter_l+0xd4>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800aef6:	492d      	ldr	r1, [pc, #180]	; (800afac <create_vumeter_l+0xc8>)
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800aef8:	881b      	ldrh	r3, [r3, #0]
 800aefa:	80b3      	strh	r3, [r6, #4]
	style_indic_bar.body.radius = 0;
 800aefc:	2500      	movs	r5, #0
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800aefe:	4620      	mov	r0, r4
	style_indic_bar.body.main_color = LV_COLOR_MAKE(105, 105, 105);
 800af00:	8073      	strh	r3, [r6, #2]
	style_indic_bar.body.border.color = LV_COLOR_MAKE(105, 105, 105);
 800af02:	8173      	strh	r3, [r6, #10]
	style_indic_bar.body.radius = 0;
 800af04:	80f5      	strh	r5, [r6, #6]
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800af06:	f004 fbe5 	bl	800f6d4 <lv_style_copy>
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800af0a:	7923      	ldrb	r3, [r4, #4]
	style_indic_bar_vd.body.radius = 0;
 800af0c:	80e5      	strh	r5, [r4, #6]
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800af0e:	f365 0304 	bfi	r3, r5, #0, #5
 800af12:	7123      	strb	r3, [r4, #4]
 800af14:	88a3      	ldrh	r3, [r4, #4]
 800af16:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800af1a:	80a3      	strh	r3, [r4, #4]
 800af1c:	0a1b      	lsrs	r3, r3, #8
 800af1e:	f365 03c7 	bfi	r3, r5, #3, #5
 800af22:	7163      	strb	r3, [r4, #5]
	style_indic_bar_vd.body.main_color = LV_COLOR_MAKE(0, 255, 0);
 800af24:	78a3      	ldrb	r3, [r4, #2]
 800af26:	f365 0304 	bfi	r3, r5, #0, #5
 800af2a:	70a3      	strb	r3, [r4, #2]
 800af2c:	8863      	ldrh	r3, [r4, #2]
 800af2e:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800af32:	8063      	strh	r3, [r4, #2]
 800af34:	0a1b      	lsrs	r3, r3, #8
 800af36:	f365 03c7 	bfi	r3, r5, #3, #5
 800af3a:	70e3      	strb	r3, [r4, #3]
	style_indic_bar_vd.body.border.color = LV_COLOR_MAKE(0, 255, 0);
 800af3c:	7aa3      	ldrb	r3, [r4, #10]
 800af3e:	f365 0304 	bfi	r3, r5, #0, #5
 800af42:	72a3      	strb	r3, [r4, #10]
 800af44:	8963      	ldrh	r3, [r4, #10]
 800af46:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800af4a:	8163      	strh	r3, [r4, #10]
 800af4c:	0a1b      	lsrs	r3, r3, #8
 800af4e:	f365 03c7 	bfi	r3, r5, #3, #5
 800af52:	72e3      	strb	r3, [r4, #11]
 800af54:	4c19      	ldr	r4, [pc, #100]	; (800afbc <create_vumeter_l+0xd8>)
		bar_l[x] = lv_bar_create(Tela_Reading_MPX, NULL);
 800af56:	6838      	ldr	r0, [r7, #0]
 800af58:	2100      	movs	r1, #0
 800af5a:	f009 fc9d 	bl	8014898 <lv_bar_create>
		lv_obj_set_size(bar_l[x], 4, 21);
 800af5e:	2215      	movs	r2, #21
		bar_l[x] = lv_bar_create(Tela_Reading_MPX, NULL);
 800af60:	6060      	str	r0, [r4, #4]
		lv_obj_set_size(bar_l[x], 4, 21);
 800af62:	2104      	movs	r1, #4
 800af64:	f003 fe58 	bl	800ec18 <lv_obj_set_size>
		lv_bar_set_style(bar_l[x], LV_BAR_STYLE_BG, &style_indic_bar);
 800af68:	6860      	ldr	r0, [r4, #4]
 800af6a:	4632      	mov	r2, r6
 800af6c:	2100      	movs	r1, #0
 800af6e:	f009 fc7d 	bl	801486c <lv_bar_set_style>
		lv_bar_set_style(bar_l[x], LV_BAR_STYLE_INDIC, &style_indic_bar);
 800af72:	6860      	ldr	r0, [r4, #4]
 800af74:	4632      	mov	r2, r6
 800af76:	2101      	movs	r1, #1
 800af78:	f009 fc78 	bl	801486c <lv_bar_set_style>
		lv_obj_align(bar_l[x], NULL, LV_ALIGN_IN_TOP_LEFT, l_pos_x[x], 103);
 800af7c:	2267      	movs	r2, #103	; 0x67
 800af7e:	4b10      	ldr	r3, [pc, #64]	; (800afc0 <create_vumeter_l+0xdc>)
 800af80:	9200      	str	r2, [sp, #0]
 800af82:	f933 3025 	ldrsh.w	r3, [r3, r5, lsl #2]
 800af86:	6860      	ldr	r0, [r4, #4]
 800af88:	2201      	movs	r2, #1
 800af8a:	2100      	movs	r1, #0
 800af8c:	f003 faa4 	bl	800e4d8 <lv_obj_align>
 800af90:	3501      	adds	r5, #1
		lv_bar_set_value(bar_l[x], 100, 0);
 800af92:	2200      	movs	r2, #0
 800af94:	2164      	movs	r1, #100	; 0x64
 800af96:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800af9a:	f009 fc0b 	bl	80147b4 <lv_bar_set_value>
	for(uint8_t x = 0; x < 24; x++) {
 800af9e:	2d18      	cmp	r5, #24
 800afa0:	d1d9      	bne.n	800af56 <create_vumeter_l+0x72>
}
 800afa2:	b003      	add	sp, #12
 800afa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afa6:	bf00      	nop
 800afa8:	20005470 	.word	0x20005470
 800afac:	2000c334 	.word	0x2000c334
 800afb0:	200054ac 	.word	0x200054ac
 800afb4:	20005348 	.word	0x20005348
 800afb8:	0801cb12 	.word	0x0801cb12
 800afbc:	20005348 	.word	0x20005348
 800afc0:	0802bc58 	.word	0x0802bc58

0800afc4 <btn_next_audio>:
{
 800afc4:	b538      	push	{r3, r4, r5, lr}
	lv_obj_t * imgbtn1 = lv_imgbtn_create(Tela_Reading_MPX, NULL);
 800afc6:	4b15      	ldr	r3, [pc, #84]	; (800b01c <btn_next_audio+0x58>)
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_REL, &Btn_next);
 800afc8:	4d15      	ldr	r5, [pc, #84]	; (800b020 <btn_next_audio+0x5c>)
	lv_obj_t * imgbtn1 = lv_imgbtn_create(Tela_Reading_MPX, NULL);
 800afca:	6818      	ldr	r0, [r3, #0]
 800afcc:	2100      	movs	r1, #0
 800afce:	f00b fcd1 	bl	8016974 <lv_imgbtn_create>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_REL, &Btn_next);
 800afd2:	462a      	mov	r2, r5
	lv_obj_t * imgbtn1 = lv_imgbtn_create(Tela_Reading_MPX, NULL);
 800afd4:	4604      	mov	r4, r0
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_REL, &Btn_next);
 800afd6:	2100      	movs	r1, #0
 800afd8:	f00b fd14 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_TGL_REL, &Btn_next);
 800afdc:	462a      	mov	r2, r5
 800afde:	4620      	mov	r0, r4
 800afe0:	2102      	movs	r1, #2
 800afe2:	f00b fd0f 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_TGL_PR, &Btn_next);
 800afe6:	462a      	mov	r2, r5
 800afe8:	4620      	mov	r0, r4
 800afea:	2103      	movs	r1, #3
 800afec:	f00b fd0a 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_PR, &Btn_next);
 800aff0:	462a      	mov	r2, r5
 800aff2:	4620      	mov	r0, r4
 800aff4:	2101      	movs	r1, #1
 800aff6:	f00b fd05 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_INA, &Btn_next);
 800affa:	462a      	mov	r2, r5
 800affc:	4620      	mov	r0, r4
 800affe:	2104      	movs	r1, #4
 800b000:	f00b fd00 	bl	8016a04 <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn1, btn_event_next_audio);
 800b004:	4620      	mov	r0, r4
 800b006:	4907      	ldr	r1, [pc, #28]	; (800b024 <btn_next_audio+0x60>)
 800b008:	f003 f8c7 	bl	800e19a <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn1, 112, 18);
 800b00c:	4620      	mov	r0, r4
 800b00e:	2212      	movs	r2, #18
 800b010:	2170      	movs	r1, #112	; 0x70
}
 800b012:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lv_obj_set_pos(imgbtn1, 112, 18);
 800b016:	f003 ba0a 	b.w	800e42e <lv_obj_set_pos>
 800b01a:	bf00      	nop
 800b01c:	20005348 	.word	0x20005348
 800b020:	20001ad8 	.word	0x20001ad8
 800b024:	0800acfd 	.word	0x0800acfd

0800b028 <screen_reading_mpx>:
	Tela_Reading_MPX = lv_obj_create(NULL, NULL);
 800b028:	2100      	movs	r1, #0
{
 800b02a:	b538      	push	{r3, r4, r5, lr}
	Tela_Reading_MPX = lv_obj_create(NULL, NULL);
 800b02c:	4608      	mov	r0, r1
 800b02e:	f003 fc75 	bl	800e91c <lv_obj_create>
 800b032:	4d12      	ldr	r5, [pc, #72]	; (800b07c <screen_reading_mpx+0x54>)
	img_fundo = lv_img_create(Tela_Reading_MPX, NULL);
 800b034:	4c12      	ldr	r4, [pc, #72]	; (800b080 <screen_reading_mpx+0x58>)
	Tela_Reading_MPX = lv_obj_create(NULL, NULL);
 800b036:	6028      	str	r0, [r5, #0]
	img_fundo = lv_img_create(Tela_Reading_MPX, NULL);
 800b038:	2100      	movs	r1, #0
 800b03a:	f00b fb71 	bl	8016720 <lv_img_create>
    lv_img_set_src(img_fundo, &tela_reading_audio);
 800b03e:	4911      	ldr	r1, [pc, #68]	; (800b084 <screen_reading_mpx+0x5c>)
	img_fundo = lv_img_create(Tela_Reading_MPX, NULL);
 800b040:	6020      	str	r0, [r4, #0]
    lv_img_set_src(img_fundo, &tela_reading_audio);
 800b042:	f00b fadd 	bl	8016600 <lv_img_set_src>
    lv_obj_set_protect(img_fundo, LV_PROTECT_POS);
 800b046:	2104      	movs	r1, #4
 800b048:	6820      	ldr	r0, [r4, #0]
 800b04a:	f003 f899 	bl	800e180 <lv_obj_set_protect>
	lv_obj_set_event_cb(img_fundo, btn_event_esc_audio);
 800b04e:	490e      	ldr	r1, [pc, #56]	; (800b088 <screen_reading_mpx+0x60>)
 800b050:	6820      	ldr	r0, [r4, #0]
 800b052:	f003 f8a2 	bl	800e19a <lv_obj_set_event_cb>
	lv_obj_set_click(img_fundo, 1);
 800b056:	2101      	movs	r1, #1
 800b058:	6820      	ldr	r0, [r4, #0]
 800b05a:	f003 f875 	bl	800e148 <lv_obj_set_click>
	create_vumeter_m();
 800b05e:	f7ff fe61 	bl	800ad24 <create_vumeter_m>
	create_vumeter_r();
 800b062:	f7ff fecf 	bl	800ae04 <create_vumeter_r>
	create_vumeter_l();
 800b066:	f7ff ff3d 	bl	800aee4 <create_vumeter_l>
	btn_next_audio();
 800b06a:	f7ff ffab 	bl	800afc4 <btn_next_audio>
 800b06e:	6828      	ldr	r0, [r5, #0]
 800b070:	f002 fe40 	bl	800dcf4 <lv_disp_load_scr>
	TelaAtiva = TelaMpx;
 800b074:	4b05      	ldr	r3, [pc, #20]	; (800b08c <screen_reading_mpx+0x64>)
 800b076:	220a      	movs	r2, #10
 800b078:	601a      	str	r2, [r3, #0]
 800b07a:	bd38      	pop	{r3, r4, r5, pc}
 800b07c:	20005348 	.word	0x20005348
 800b080:	2000546c 	.word	0x2000546c
 800b084:	20001bbc 	.word	0x20001bbc
 800b088:	0800acd5 	.word	0x0800acd5
 800b08c:	200033cc 	.word	0x200033cc

0800b090 <btn_event_next_efic>:
	lv_obj_set_pos(imgbtn1, 112, 18);
}

static void btn_event_next_efic(lv_obj_t * btn, lv_event_t event)
{
	if(event == LV_EVENT_RELEASED) {
 800b090:	2907      	cmp	r1, #7
{
 800b092:	b508      	push	{r3, lr}
	if(event == LV_EVENT_RELEASED) {
 800b094:	d10e      	bne.n	800b0b4 <btn_event_next_efic+0x24>
		printf("Button Next Released SCREEN_READING_STATUS\n");
 800b096:	4808      	ldr	r0, [pc, #32]	; (800b0b8 <btn_event_next_efic+0x28>)
 800b098:	f00e fabc 	bl	8019614 <puts>
		lv_task_del(Task_Reading_EFIC);
 800b09c:	4b07      	ldr	r3, [pc, #28]	; (800b0bc <btn_event_next_efic+0x2c>)
 800b09e:	6818      	ldr	r0, [r3, #0]
 800b0a0:	f008 fff4 	bl	801408c <lv_task_del>
		lv_obj_del(Tela_Reading_EFIC);
 800b0a4:	4b06      	ldr	r3, [pc, #24]	; (800b0c0 <btn_event_next_efic+0x30>)
 800b0a6:	6818      	ldr	r0, [r3, #0]
 800b0a8:	f003 fe29 	bl	800ecfe <lv_obj_del>
		screen_reading_status();
	}
}
 800b0ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_reading_status();
 800b0b0:	f000 bb68 	b.w	800b784 <screen_reading_status>
 800b0b4:	bd08      	pop	{r3, pc}
 800b0b6:	bf00      	nop
 800b0b8:	0802bd78 	.word	0x0802bd78
 800b0bc:	200054e8 	.word	0x200054e8
 800b0c0:	200054ec 	.word	0x200054ec

0800b0c4 <btn_event_prev_efic>:
	lv_obj_set_pos(imgbtn2, 32, 18);
}

static void btn_event_prev_efic(lv_obj_t * btn, lv_event_t event)
{
	if(event == LV_EVENT_RELEASED) {
 800b0c4:	2907      	cmp	r1, #7
{
 800b0c6:	b508      	push	{r3, lr}
	if(event == LV_EVENT_RELEASED) {
 800b0c8:	d10e      	bne.n	800b0e8 <btn_event_prev_efic+0x24>
		printf("Button ESC Released\n");
 800b0ca:	4808      	ldr	r0, [pc, #32]	; (800b0ec <btn_event_prev_efic+0x28>)
 800b0cc:	f00e faa2 	bl	8019614 <puts>
		lv_task_del(Task_Reading_EFIC);
 800b0d0:	4b07      	ldr	r3, [pc, #28]	; (800b0f0 <btn_event_prev_efic+0x2c>)
 800b0d2:	6818      	ldr	r0, [r3, #0]
 800b0d4:	f008 ffda 	bl	801408c <lv_task_del>
		lv_obj_del(Tela_Reading_EFIC);
 800b0d8:	4b06      	ldr	r3, [pc, #24]	; (800b0f4 <btn_event_prev_efic+0x30>)
 800b0da:	6818      	ldr	r0, [r3, #0]
 800b0dc:	f003 fe0f 	bl	800ecfe <lv_obj_del>
		screen_reading_vpa();
	}
}
 800b0e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_reading_vpa();
 800b0e4:	f000 bfd6 	b.w	800c094 <screen_reading_vpa>
 800b0e8:	bd08      	pop	{r3, pc}
 800b0ea:	bf00      	nop
 800b0ec:	0802bc1a 	.word	0x0802bc1a
 800b0f0:	200054e8 	.word	0x200054e8
 800b0f4:	200054ec 	.word	0x200054ec

0800b0f8 <btn_next_efic>:
{
 800b0f8:	b538      	push	{r3, r4, r5, lr}
	lv_obj_t * imgbtn1 = lv_imgbtn_create(Tela_Reading_EFIC, NULL);
 800b0fa:	4b15      	ldr	r3, [pc, #84]	; (800b150 <btn_next_efic+0x58>)
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_REL, &Btn_next);
 800b0fc:	4d15      	ldr	r5, [pc, #84]	; (800b154 <btn_next_efic+0x5c>)
	lv_obj_t * imgbtn1 = lv_imgbtn_create(Tela_Reading_EFIC, NULL);
 800b0fe:	6818      	ldr	r0, [r3, #0]
 800b100:	2100      	movs	r1, #0
 800b102:	f00b fc37 	bl	8016974 <lv_imgbtn_create>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_REL, &Btn_next);
 800b106:	462a      	mov	r2, r5
	lv_obj_t * imgbtn1 = lv_imgbtn_create(Tela_Reading_EFIC, NULL);
 800b108:	4604      	mov	r4, r0
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_REL, &Btn_next);
 800b10a:	2100      	movs	r1, #0
 800b10c:	f00b fc7a 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_TGL_REL, &Btn_next);
 800b110:	462a      	mov	r2, r5
 800b112:	4620      	mov	r0, r4
 800b114:	2102      	movs	r1, #2
 800b116:	f00b fc75 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_TGL_PR, &Btn_next);
 800b11a:	462a      	mov	r2, r5
 800b11c:	4620      	mov	r0, r4
 800b11e:	2103      	movs	r1, #3
 800b120:	f00b fc70 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_PR, &Btn_next);
 800b124:	462a      	mov	r2, r5
 800b126:	4620      	mov	r0, r4
 800b128:	2101      	movs	r1, #1
 800b12a:	f00b fc6b 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_INA, &Btn_next);
 800b12e:	462a      	mov	r2, r5
 800b130:	4620      	mov	r0, r4
 800b132:	2104      	movs	r1, #4
 800b134:	f00b fc66 	bl	8016a04 <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn1, btn_event_next_efic);
 800b138:	4620      	mov	r0, r4
 800b13a:	4907      	ldr	r1, [pc, #28]	; (800b158 <btn_next_efic+0x60>)
 800b13c:	f003 f82d 	bl	800e19a <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn1, 112, 18);
 800b140:	4620      	mov	r0, r4
 800b142:	2212      	movs	r2, #18
 800b144:	2170      	movs	r1, #112	; 0x70
}
 800b146:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lv_obj_set_pos(imgbtn1, 112, 18);
 800b14a:	f003 b970 	b.w	800e42e <lv_obj_set_pos>
 800b14e:	bf00      	nop
 800b150:	200054ec 	.word	0x200054ec
 800b154:	20001ad8 	.word	0x20001ad8
 800b158:	0800b091 	.word	0x0800b091

0800b15c <btn_prev_efic>:
{
 800b15c:	b538      	push	{r3, r4, r5, lr}
	lv_obj_t * imgbtn2 = lv_imgbtn_create(Tela_Reading_EFIC, NULL);
 800b15e:	4b15      	ldr	r3, [pc, #84]	; (800b1b4 <btn_prev_efic+0x58>)
	lv_imgbtn_set_src(imgbtn2, LV_BTN_STATE_REL, &Btn_prev);
 800b160:	4d15      	ldr	r5, [pc, #84]	; (800b1b8 <btn_prev_efic+0x5c>)
	lv_obj_t * imgbtn2 = lv_imgbtn_create(Tela_Reading_EFIC, NULL);
 800b162:	6818      	ldr	r0, [r3, #0]
 800b164:	2100      	movs	r1, #0
 800b166:	f00b fc05 	bl	8016974 <lv_imgbtn_create>
	lv_imgbtn_set_src(imgbtn2, LV_BTN_STATE_REL, &Btn_prev);
 800b16a:	462a      	mov	r2, r5
	lv_obj_t * imgbtn2 = lv_imgbtn_create(Tela_Reading_EFIC, NULL);
 800b16c:	4604      	mov	r4, r0
	lv_imgbtn_set_src(imgbtn2, LV_BTN_STATE_REL, &Btn_prev);
 800b16e:	2100      	movs	r1, #0
 800b170:	f00b fc48 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2, LV_BTN_STATE_TGL_REL, &Btn_prev);
 800b174:	462a      	mov	r2, r5
 800b176:	4620      	mov	r0, r4
 800b178:	2102      	movs	r1, #2
 800b17a:	f00b fc43 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2, LV_BTN_STATE_TGL_PR, &Btn_prev);
 800b17e:	462a      	mov	r2, r5
 800b180:	4620      	mov	r0, r4
 800b182:	2103      	movs	r1, #3
 800b184:	f00b fc3e 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2, LV_BTN_STATE_PR, &Btn_prev);
 800b188:	462a      	mov	r2, r5
 800b18a:	4620      	mov	r0, r4
 800b18c:	2101      	movs	r1, #1
 800b18e:	f00b fc39 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2, LV_BTN_STATE_INA, &Btn_prev);
 800b192:	462a      	mov	r2, r5
 800b194:	4620      	mov	r0, r4
 800b196:	2104      	movs	r1, #4
 800b198:	f00b fc34 	bl	8016a04 <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn2, btn_event_prev_efic);
 800b19c:	4620      	mov	r0, r4
 800b19e:	4907      	ldr	r1, [pc, #28]	; (800b1bc <btn_prev_efic+0x60>)
 800b1a0:	f002 fffb 	bl	800e19a <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn2, 32, 18);
 800b1a4:	4620      	mov	r0, r4
 800b1a6:	2212      	movs	r2, #18
 800b1a8:	2120      	movs	r1, #32
}
 800b1aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lv_obj_set_pos(imgbtn2, 32, 18);
 800b1ae:	f003 b93e 	b.w	800e42e <lv_obj_set_pos>
 800b1b2:	bf00      	nop
 800b1b4:	200054ec 	.word	0x200054ec
 800b1b8:	20001b44 	.word	0x20001b44
 800b1bc:	0800b0c5 	.word	0x0800b0c5

0800b1c0 <create_vumeter_eficiencia>:

void create_vumeter_eficiencia(void)
{
 800b1c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	// Area do Barguraph Frequency
	// Indicador OFF
	lv_style_copy(&style_indic_bar, &lv_style_pretty_color);
 800b1c2:	4e36      	ldr	r6, [pc, #216]	; (800b29c <create_vumeter_eficiencia+0xdc>)
 800b1c4:	4936      	ldr	r1, [pc, #216]	; (800b2a0 <create_vumeter_eficiencia+0xe0>)
	style_indic_bar.body.main_color = LV_COLOR_MAKE(105, 105, 105);
	style_indic_bar.body.border.color = LV_COLOR_MAKE(105, 105, 105);
	style_indic_bar.body.shadow.color = LV_COLOR_MAKE(105, 105, 105);


	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty_color);
 800b1c6:	4c37      	ldr	r4, [pc, #220]	; (800b2a4 <create_vumeter_eficiencia+0xe4>)
	lv_style_copy(&style_indic_bar, &lv_style_pretty_color);
 800b1c8:	4630      	mov	r0, r6
 800b1ca:	f004 fa83 	bl	800f6d4 <lv_style_copy>
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800b1ce:	4b36      	ldr	r3, [pc, #216]	; (800b2a8 <create_vumeter_eficiencia+0xe8>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty_color);
 800b1d0:	4933      	ldr	r1, [pc, #204]	; (800b2a0 <create_vumeter_eficiencia+0xe0>)
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800b1d2:	881b      	ldrh	r3, [r3, #0]
 800b1d4:	80b3      	strh	r3, [r6, #4]
	style_indic_bar.body.radius = 0;
 800b1d6:	2500      	movs	r5, #0
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty_color);
 800b1d8:	4620      	mov	r0, r4
	style_indic_bar.body.main_color = LV_COLOR_MAKE(105, 105, 105);
 800b1da:	8073      	strh	r3, [r6, #2]
	style_indic_bar.body.border.color = LV_COLOR_MAKE(105, 105, 105);
 800b1dc:	8173      	strh	r3, [r6, #10]
	style_indic_bar.body.shadow.color = LV_COLOR_MAKE(105, 105, 105);
 800b1de:	8233      	strh	r3, [r6, #16]
	style_indic_bar.body.radius = 0;
 800b1e0:	80f5      	strh	r5, [r6, #6]
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty_color);
 800b1e2:	f004 fa77 	bl	800f6d4 <lv_style_copy>
	style_indic_bar_vd.body.radius = 0;
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800b1e6:	7923      	ldrb	r3, [r4, #4]
	style_indic_bar_vd.body.radius = 0;
 800b1e8:	80e5      	strh	r5, [r4, #6]
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800b1ea:	f365 0304 	bfi	r3, r5, #0, #5
 800b1ee:	7123      	strb	r3, [r4, #4]
 800b1f0:	88a3      	ldrh	r3, [r4, #4]
 800b1f2:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800b1f6:	80a3      	strh	r3, [r4, #4]
 800b1f8:	0a1b      	lsrs	r3, r3, #8
 800b1fa:	f365 03c7 	bfi	r3, r5, #3, #5
 800b1fe:	7163      	strb	r3, [r4, #5]
	style_indic_bar_vd.body.main_color = LV_COLOR_MAKE(0, 255, 0);
 800b200:	78a3      	ldrb	r3, [r4, #2]
 800b202:	f365 0304 	bfi	r3, r5, #0, #5
 800b206:	70a3      	strb	r3, [r4, #2]
 800b208:	8863      	ldrh	r3, [r4, #2]
 800b20a:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800b20e:	8063      	strh	r3, [r4, #2]
 800b210:	0a1b      	lsrs	r3, r3, #8
 800b212:	f365 03c7 	bfi	r3, r5, #3, #5
 800b216:	70e3      	strb	r3, [r4, #3]
	style_indic_bar_vd.body.border.color = LV_COLOR_MAKE(0, 255, 0);
 800b218:	7aa3      	ldrb	r3, [r4, #10]
 800b21a:	f365 0304 	bfi	r3, r5, #0, #5
 800b21e:	72a3      	strb	r3, [r4, #10]
 800b220:	8963      	ldrh	r3, [r4, #10]
 800b222:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800b226:	8163      	strh	r3, [r4, #10]
 800b228:	0a1b      	lsrs	r3, r3, #8
 800b22a:	f365 03c7 	bfi	r3, r5, #3, #5
 800b22e:	72e3      	strb	r3, [r4, #11]
	style_indic_bar_vd.body.shadow.color = LV_COLOR_MAKE(0, 255, 0);
 800b230:	7c23      	ldrb	r3, [r4, #16]
 800b232:	f365 0304 	bfi	r3, r5, #0, #5
 800b236:	7423      	strb	r3, [r4, #16]
 800b238:	8a23      	ldrh	r3, [r4, #16]
 800b23a:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800b23e:	8223      	strh	r3, [r4, #16]
 800b240:	0a1b      	lsrs	r3, r3, #8
 800b242:	f365 03c7 	bfi	r3, r5, #3, #5
 800b246:	7463      	strb	r3, [r4, #17]
 800b248:	4c18      	ldr	r4, [pc, #96]	; (800b2ac <create_vumeter_eficiencia+0xec>)

	// Create a default bar
	for(uint8_t x = 0; x < 16; x++) {
		bar_e[x] = lv_bar_create(Tela_Reading_EFIC, NULL);
 800b24a:	4b19      	ldr	r3, [pc, #100]	; (800b2b0 <create_vumeter_eficiencia+0xf0>)
 800b24c:	2100      	movs	r1, #0
 800b24e:	6818      	ldr	r0, [r3, #0]
 800b250:	f009 fb22 	bl	8014898 <lv_bar_create>
		lv_obj_set_size(bar_e[x], 5, 19);
 800b254:	2213      	movs	r2, #19
		bar_e[x] = lv_bar_create(Tela_Reading_EFIC, NULL);
 800b256:	6060      	str	r0, [r4, #4]
		lv_obj_set_size(bar_e[x], 5, 19);
 800b258:	2105      	movs	r1, #5
 800b25a:	f003 fcdd 	bl	800ec18 <lv_obj_set_size>
		lv_bar_set_style(bar_e[x], LV_BAR_STYLE_BG, &style_indic_bar);
 800b25e:	6860      	ldr	r0, [r4, #4]
 800b260:	4632      	mov	r2, r6
 800b262:	2100      	movs	r1, #0
 800b264:	f009 fb02 	bl	801486c <lv_bar_set_style>
		lv_bar_set_style(bar_e[x], LV_BAR_STYLE_INDIC, &style_indic_bar);
 800b268:	6860      	ldr	r0, [r4, #4]
 800b26a:	4632      	mov	r2, r6
 800b26c:	2101      	movs	r1, #1
 800b26e:	f009 fafd 	bl	801486c <lv_bar_set_style>
		lv_obj_align(bar_e[x], NULL, LV_ALIGN_IN_TOP_LEFT, e_pos_x[x], 76);
 800b272:	224c      	movs	r2, #76	; 0x4c
 800b274:	4b0f      	ldr	r3, [pc, #60]	; (800b2b4 <create_vumeter_eficiencia+0xf4>)
 800b276:	9200      	str	r2, [sp, #0]
 800b278:	f933 3025 	ldrsh.w	r3, [r3, r5, lsl #2]
 800b27c:	6860      	ldr	r0, [r4, #4]
 800b27e:	2201      	movs	r2, #1
 800b280:	2100      	movs	r1, #0
 800b282:	f003 f929 	bl	800e4d8 <lv_obj_align>
 800b286:	3501      	adds	r5, #1
		lv_bar_set_value(bar_e[x], 100, 1);
 800b288:	2201      	movs	r2, #1
 800b28a:	2164      	movs	r1, #100	; 0x64
 800b28c:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800b290:	f009 fa90 	bl	80147b4 <lv_bar_set_value>
	for(uint8_t x = 0; x < 16; x++) {
 800b294:	2d10      	cmp	r5, #16
 800b296:	d1d8      	bne.n	800b24a <create_vumeter_eficiencia+0x8a>
	}
}
 800b298:	b002      	add	sp, #8
 800b29a:	bd70      	pop	{r4, r5, r6, pc}
 800b29c:	20005534 	.word	0x20005534
 800b2a0:	2000c244 	.word	0x2000c244
 800b2a4:	20005570 	.word	0x20005570
 800b2a8:	0801cb14 	.word	0x0801cb14
 800b2ac:	200054ec 	.word	0x200054ec
 800b2b0:	200054ec 	.word	0x200054ec
 800b2b4:	0802bda4 	.word	0x0802bda4

0800b2b8 <update_vumeter_eficiencia>:

void update_vumeter_eficiencia(void)
{
 800b2b8:	b570      	push	{r4, r5, r6, lr}
	float f_ipa = 1.6f;

	float resul = (((f_fwd / (f_vpa * f_ipa)) * 100) / 5) - 1;

	for(x = 0; x <= resul; x++) {
		lv_bar_set_style(bar_e[x], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800b2ba:	4d0a      	ldr	r5, [pc, #40]	; (800b2e4 <update_vumeter_eficiencia+0x2c>)
 800b2bc:	4e0a      	ldr	r6, [pc, #40]	; (800b2e8 <update_vumeter_eficiencia+0x30>)
	for(x = 0; x <= resul; x++) {
 800b2be:	2400      	movs	r4, #0
 800b2c0:	2c0b      	cmp	r4, #11
 800b2c2:	d100      	bne.n	800b2c6 <update_vumeter_eficiencia+0xe>
		lv_bar_set_style(bar_e[x], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
	}
}
 800b2c4:	bd70      	pop	{r4, r5, r6, pc}
		lv_bar_set_style(bar_e[x], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800b2c6:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800b2ca:	4632      	mov	r2, r6
 800b2cc:	2100      	movs	r1, #0
 800b2ce:	f009 facd 	bl	801486c <lv_bar_set_style>
		lv_bar_set_style(bar_e[x], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
 800b2d2:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800b2d6:	4632      	mov	r2, r6
 800b2d8:	2101      	movs	r1, #1
 800b2da:	f009 fac7 	bl	801486c <lv_bar_set_style>
	for(x = 0; x <= resul; x++) {
 800b2de:	3401      	adds	r4, #1
 800b2e0:	e7ee      	b.n	800b2c0 <update_vumeter_eficiencia+0x8>
 800b2e2:	bf00      	nop
 800b2e4:	200054f0 	.word	0x200054f0
 800b2e8:	20005570 	.word	0x20005570
 800b2ec:	00000000 	.word	0x00000000

0800b2f0 <update_screen_efic>:
	lv_obj_align(txt_efic, NULL, LV_ALIGN_IN_TOP_RIGHT, -70, 45); 	// Alinha ao centro
}


static void update_screen_efic(lv_task_t * param)
{
 800b2f0:	b510      	push	{r4, lr}
	float f_vpa = (3900 * (3.30 / 4095.0)) * 5;
	float f_ipa = (2000 * (3.30 / 4095.0)) * 0.98;

	float resul = (f_fwd / (f_vpa * f_ipa)) * 100;

	sprintf(buffer, "%0.1f", resul);
 800b2f2:	4c0b      	ldr	r4, [pc, #44]	; (800b320 <update_screen_efic+0x30>)
 800b2f4:	490b      	ldr	r1, [pc, #44]	; (800b324 <update_screen_efic+0x34>)
 800b2f6:	a308      	add	r3, pc, #32	; (adr r3, 800b318 <update_screen_efic+0x28>)
 800b2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2fc:	4620      	mov	r0, r4
 800b2fe:	f00e f9a1 	bl	8019644 <sprintf>
	lv_label_set_text(txt_efic, buffer);
 800b302:	4b09      	ldr	r3, [pc, #36]	; (800b328 <update_screen_efic+0x38>)
 800b304:	4621      	mov	r1, r4
 800b306:	6818      	ldr	r0, [r3, #0]
 800b308:	f00c f82e 	bl	8017368 <lv_label_set_text>
	update_vumeter_eficiencia();

}
 800b30c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_vumeter_eficiencia();
 800b310:	f7ff bfd2 	b.w	800b2b8 <update_vumeter_eficiencia>
 800b314:	f3af 8000 	nop.w
 800b318:	80000000 	.word	0x80000000
 800b31c:	404e3789 	.word	0x404e3789
 800b320:	20004cd0 	.word	0x20004cd0
 800b324:	0802bde4 	.word	0x0802bde4
 800b328:	200055e8 	.word	0x200055e8
 800b32c:	00000000 	.word	0x00000000

0800b330 <print_eficiencia>:
{
 800b330:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	sprintf(buffer, "%0.1f", resul);
 800b332:	4f27      	ldr	r7, [pc, #156]	; (800b3d0 <print_eficiencia+0xa0>)
	lv_style_copy(&style_txt1, &lv_style_plain);
 800b334:	4c27      	ldr	r4, [pc, #156]	; (800b3d4 <print_eficiencia+0xa4>)
	sprintf(buffer, "%0.1f", resul);
 800b336:	4928      	ldr	r1, [pc, #160]	; (800b3d8 <print_eficiencia+0xa8>)
	txt_efic = lv_label_create(Tela_Reading_EFIC, NULL);
 800b338:	4d28      	ldr	r5, [pc, #160]	; (800b3dc <print_eficiencia+0xac>)
	sprintf(buffer, "%0.1f", resul);
 800b33a:	a323      	add	r3, pc, #140	; (adr r3, 800b3c8 <print_eficiencia+0x98>)
 800b33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b340:	4638      	mov	r0, r7
 800b342:	f00e f97f 	bl	8019644 <sprintf>
	lv_style_copy(&style_txt1, &lv_style_plain);
 800b346:	4620      	mov	r0, r4
 800b348:	4925      	ldr	r1, [pc, #148]	; (800b3e0 <print_eficiencia+0xb0>)
 800b34a:	f004 f9c3 	bl	800f6d4 <lv_style_copy>
	style_txt1.text.font = &lv_font_eurostile_28;
 800b34e:	4b25      	ldr	r3, [pc, #148]	; (800b3e4 <print_eficiencia+0xb4>)
 800b350:	6263      	str	r3, [r4, #36]	; 0x24
	style_txt1.text.color = LV_COLOR_CYAN;
 800b352:	f894 3020 	ldrb.w	r3, [r4, #32]
 800b356:	f043 031f 	orr.w	r3, r3, #31
 800b35a:	f884 3020 	strb.w	r3, [r4, #32]
 800b35e:	8c23      	ldrh	r3, [r4, #32]
 800b360:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800b364:	8423      	strh	r3, [r4, #32]
 800b366:	0a1b      	lsrs	r3, r3, #8
 800b368:	f36f 03c7 	bfc	r3, #3, #5
 800b36c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	txt_efic = lv_label_create(Tela_Reading_EFIC, NULL);
 800b370:	4b1d      	ldr	r3, [pc, #116]	; (800b3e8 <print_eficiencia+0xb8>)
	style_txt1.text.letter_space = 1;
 800b372:	2601      	movs	r6, #1
	txt_efic = lv_label_create(Tela_Reading_EFIC, NULL);
 800b374:	6818      	ldr	r0, [r3, #0]
	style_txt1.text.letter_space = 1;
 800b376:	8526      	strh	r6, [r4, #40]	; 0x28
	txt_efic = lv_label_create(Tela_Reading_EFIC, NULL);
 800b378:	2100      	movs	r1, #0
	style_txt1.text.line_space = 1;
 800b37a:	8566      	strh	r6, [r4, #42]	; 0x2a
	txt_efic = lv_label_create(Tela_Reading_EFIC, NULL);
 800b37c:	f00c f89e 	bl	80174bc <lv_label_create>
	lv_obj_set_style(txt_efic, &style_txt1); 						// Configura o estilo criado
 800b380:	4621      	mov	r1, r4
	txt_efic = lv_label_create(Tela_Reading_EFIC, NULL);
 800b382:	6028      	str	r0, [r5, #0]
	lv_obj_set_style(txt_efic, &style_txt1); 						// Configura o estilo criado
 800b384:	f003 fd4a 	bl	800ee1c <lv_obj_set_style>
	lv_label_set_long_mode(txt_efic, LV_LABEL_LONG_EXPAND); 		// Quebra as linhas longas
 800b388:	6828      	ldr	r0, [r5, #0]
 800b38a:	2100      	movs	r1, #0
 800b38c:	f00c f840 	bl	8017410 <lv_label_set_long_mode>
	lv_label_set_recolor(txt_efic, true); 							// Ativa recolorizar por comandos no texto
 800b390:	4631      	mov	r1, r6
 800b392:	6828      	ldr	r0, [r5, #0]
 800b394:	f00c f87e 	bl	8017494 <lv_label_set_recolor>
	lv_label_set_align(txt_efic, LV_ALIGN_IN_TOP_RIGHT); 			// Centraliza linhas alinhadas
 800b398:	6828      	ldr	r0, [r5, #0]
 800b39a:	2103      	movs	r1, #3
 800b39c:	f00b fcd7 	bl	8016d4e <lv_label_set_align>
	lv_label_set_text(txt_efic, buffer);
 800b3a0:	4639      	mov	r1, r7
 800b3a2:	6828      	ldr	r0, [r5, #0]
 800b3a4:	f00b ffe0 	bl	8017368 <lv_label_set_text>
	lv_obj_set_width(txt_efic, 300); 								// Configuura o comprimento
 800b3a8:	6828      	ldr	r0, [r5, #0]
 800b3aa:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800b3ae:	f003 fc7d 	bl	800ecac <lv_obj_set_width>
	lv_obj_align(txt_efic, NULL, LV_ALIGN_IN_TOP_RIGHT, -70, 45); 	// Alinha ao centro
 800b3b2:	232d      	movs	r3, #45	; 0x2d
 800b3b4:	9300      	str	r3, [sp, #0]
 800b3b6:	2203      	movs	r2, #3
 800b3b8:	f06f 0345 	mvn.w	r3, #69	; 0x45
 800b3bc:	2100      	movs	r1, #0
 800b3be:	6828      	ldr	r0, [r5, #0]
 800b3c0:	f003 f88a 	bl	800e4d8 <lv_obj_align>
}
 800b3c4:	b003      	add	sp, #12
 800b3c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3c8:	80000000 	.word	0x80000000
 800b3cc:	404e3789 	.word	0x404e3789
 800b3d0:	20004cd0 	.word	0x20004cd0
 800b3d4:	200055ac 	.word	0x200055ac
 800b3d8:	0802bde4 	.word	0x0802bde4
 800b3dc:	200055e8 	.word	0x200055e8
 800b3e0:	2000c424 	.word	0x2000c424
 800b3e4:	2000194c 	.word	0x2000194c
 800b3e8:	200054ec 	.word	0x200054ec

0800b3ec <screen_reading_efic>:
	Tela_Reading_EFIC = lv_obj_create(NULL, NULL);
 800b3ec:	2100      	movs	r1, #0
{
 800b3ee:	b538      	push	{r3, r4, r5, lr}
	Tela_Reading_EFIC = lv_obj_create(NULL, NULL);
 800b3f0:	4608      	mov	r0, r1
 800b3f2:	f003 fa93 	bl	800e91c <lv_obj_create>
 800b3f6:	4c14      	ldr	r4, [pc, #80]	; (800b448 <screen_reading_efic+0x5c>)
	img_fundo = lv_img_create(Tela_Reading_EFIC, NULL);
 800b3f8:	4d14      	ldr	r5, [pc, #80]	; (800b44c <screen_reading_efic+0x60>)
	Tela_Reading_EFIC = lv_obj_create(NULL, NULL);
 800b3fa:	6020      	str	r0, [r4, #0]
	img_fundo = lv_img_create(Tela_Reading_EFIC, NULL);
 800b3fc:	2100      	movs	r1, #0
 800b3fe:	f00b f98f 	bl	8016720 <lv_img_create>
	lv_img_set_src(img_fundo, &tela_reading_efic);
 800b402:	4913      	ldr	r1, [pc, #76]	; (800b450 <screen_reading_efic+0x64>)
	img_fundo = lv_img_create(Tela_Reading_EFIC, NULL);
 800b404:	6028      	str	r0, [r5, #0]
	lv_img_set_src(img_fundo, &tela_reading_efic);
 800b406:	f00b f8fb 	bl	8016600 <lv_img_set_src>
	lv_obj_set_protect(img_fundo, LV_PROTECT_POS);
 800b40a:	2104      	movs	r1, #4
 800b40c:	6828      	ldr	r0, [r5, #0]
 800b40e:	f002 feb7 	bl	800e180 <lv_obj_set_protect>
	btn_next_efic();
 800b412:	f7ff fe71 	bl	800b0f8 <btn_next_efic>
	btn_prev_efic();
 800b416:	f7ff fea1 	bl	800b15c <btn_prev_efic>
	create_vumeter_eficiencia();
 800b41a:	f7ff fed1 	bl	800b1c0 <create_vumeter_eficiencia>
	print_eficiencia();
 800b41e:	f7ff ff87 	bl	800b330 <print_eficiencia>
	update_vumeter_eficiencia();
 800b422:	f7ff ff49 	bl	800b2b8 <update_vumeter_eficiencia>
 800b426:	6820      	ldr	r0, [r4, #0]
 800b428:	f002 fc64 	bl	800dcf4 <lv_disp_load_scr>
    Task_Reading_EFIC = lv_task_create(update_screen_efic, 500, LV_TASK_PRIO_MID, NULL);
 800b42c:	2300      	movs	r3, #0
 800b42e:	2203      	movs	r2, #3
 800b430:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800b434:	4807      	ldr	r0, [pc, #28]	; (800b454 <screen_reading_efic+0x68>)
 800b436:	f008 ff19 	bl	801426c <lv_task_create>
 800b43a:	4b07      	ldr	r3, [pc, #28]	; (800b458 <screen_reading_efic+0x6c>)
 800b43c:	6018      	str	r0, [r3, #0]
    TelaAtiva = TelaReading_Efic;
 800b43e:	4b07      	ldr	r3, [pc, #28]	; (800b45c <screen_reading_efic+0x70>)
 800b440:	220d      	movs	r2, #13
 800b442:	601a      	str	r2, [r3, #0]
 800b444:	bd38      	pop	{r3, r4, r5, pc}
 800b446:	bf00      	nop
 800b448:	200054ec 	.word	0x200054ec
 800b44c:	20005530 	.word	0x20005530
 800b450:	20001bc8 	.word	0x20001bc8
 800b454:	0800b2f1 	.word	0x0800b2f1
 800b458:	200054e8 	.word	0x200054e8
 800b45c:	200033cc 	.word	0x200033cc

0800b460 <update_screen_status>:
	lv_obj_set_width(txt_version, 300); 								// Configuura o comprimento
	lv_obj_align(txt_version, NULL, LV_ALIGN_IN_TOP_RIGHT, -8, 110); 	// Alinha ao centro
}

static void update_screen_status(lv_task_t * param)
{
 800b460:	b508      	push	{r3, lr}
	// PLL LOCK
	if(pll_status)
 800b462:	4b1a      	ldr	r3, [pc, #104]	; (800b4cc <update_screen_status+0x6c>)
 800b464:	781b      	ldrb	r3, [r3, #0]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d02d      	beq.n	800b4c6 <update_screen_status+0x66>
		sprintf(buffer, "OFF");
 800b46a:	4919      	ldr	r1, [pc, #100]	; (800b4d0 <update_screen_status+0x70>)
	else
		sprintf(buffer, "ON");
 800b46c:	4819      	ldr	r0, [pc, #100]	; (800b4d4 <update_screen_status+0x74>)
 800b46e:	f00e f90d 	bl	801968c <strcpy>

	lv_label_set_text(txt_pll, buffer);
 800b472:	4b19      	ldr	r3, [pc, #100]	; (800b4d8 <update_screen_status+0x78>)
 800b474:	4917      	ldr	r1, [pc, #92]	; (800b4d4 <update_screen_status+0x74>)
 800b476:	6818      	ldr	r0, [r3, #0]
 800b478:	f00b ff76 	bl	8017368 <lv_label_set_text>

	// Temperatura
	sprintf(buffer, "%0.1f°C", temperatura);
 800b47c:	4b17      	ldr	r3, [pc, #92]	; (800b4dc <update_screen_status+0x7c>)
 800b47e:	6818      	ldr	r0, [r3, #0]
 800b480:	f7f5 f862 	bl	8000548 <__aeabi_f2d>
 800b484:	4602      	mov	r2, r0
 800b486:	460b      	mov	r3, r1
 800b488:	4812      	ldr	r0, [pc, #72]	; (800b4d4 <update_screen_status+0x74>)
 800b48a:	4915      	ldr	r1, [pc, #84]	; (800b4e0 <update_screen_status+0x80>)
 800b48c:	f00e f8da 	bl	8019644 <sprintf>
	lv_label_set_text(txt_temp, buffer);
 800b490:	4b14      	ldr	r3, [pc, #80]	; (800b4e4 <update_screen_status+0x84>)
 800b492:	4910      	ldr	r1, [pc, #64]	; (800b4d4 <update_screen_status+0x74>)
 800b494:	6818      	ldr	r0, [r3, #0]
 800b496:	f00b ff67 	bl	8017368 <lv_label_set_text>

	// VSWR
	if((float)reflected >= MAX_RFL)
 800b49a:	4b13      	ldr	r3, [pc, #76]	; (800b4e8 <update_screen_status+0x88>)
		sprintf(buffer, "Falha");
	else
		sprintf(buffer, "OK");
 800b49c:	480d      	ldr	r0, [pc, #52]	; (800b4d4 <update_screen_status+0x74>)
	if((float)reflected >= MAX_RFL)
 800b49e:	ed93 7a00 	vldr	s14, [r3]
 800b4a2:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800b4a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b4aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		sprintf(buffer, "Falha");
 800b4ae:	bfac      	ite	ge
 800b4b0:	490e      	ldrge	r1, [pc, #56]	; (800b4ec <update_screen_status+0x8c>)
		sprintf(buffer, "OK");
 800b4b2:	490f      	ldrlt	r1, [pc, #60]	; (800b4f0 <update_screen_status+0x90>)
 800b4b4:	f00e f8ea 	bl	801968c <strcpy>

	lv_label_set_text(txt_vswr, buffer);
 800b4b8:	4b0e      	ldr	r3, [pc, #56]	; (800b4f4 <update_screen_status+0x94>)
 800b4ba:	4906      	ldr	r1, [pc, #24]	; (800b4d4 <update_screen_status+0x74>)
 800b4bc:	6818      	ldr	r0, [r3, #0]
}
 800b4be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lv_label_set_text(txt_vswr, buffer);
 800b4c2:	f00b bf51 	b.w	8017368 <lv_label_set_text>
		sprintf(buffer, "ON");
 800b4c6:	490c      	ldr	r1, [pc, #48]	; (800b4f8 <update_screen_status+0x98>)
 800b4c8:	e7d0      	b.n	800b46c <update_screen_status+0xc>
 800b4ca:	bf00      	nop
 800b4cc:	2000000c 	.word	0x2000000c
 800b4d0:	0802bdf5 	.word	0x0802bdf5
 800b4d4:	20004cd0 	.word	0x20004cd0
 800b4d8:	20005634 	.word	0x20005634
 800b4dc:	20000014 	.word	0x20000014
 800b4e0:	0802bdfc 	.word	0x0802bdfc
 800b4e4:	20005638 	.word	0x20005638
 800b4e8:	20004dc4 	.word	0x20004dc4
 800b4ec:	0802be05 	.word	0x0802be05
 800b4f0:	0802bad1 	.word	0x0802bad1
 800b4f4:	2000563c 	.word	0x2000563c
 800b4f8:	0802bdf9 	.word	0x0802bdf9

0800b4fc <btn_event_prev_status>:
	if(event == LV_EVENT_RELEASED) {
 800b4fc:	2907      	cmp	r1, #7
{
 800b4fe:	b508      	push	{r3, lr}
	if(event == LV_EVENT_RELEASED) {
 800b500:	d10e      	bne.n	800b520 <btn_event_prev_status+0x24>
		printf("Button ESC Released\n");
 800b502:	4808      	ldr	r0, [pc, #32]	; (800b524 <btn_event_prev_status+0x28>)
 800b504:	f00e f886 	bl	8019614 <puts>
		lv_task_del(Task_Status);
 800b508:	4b07      	ldr	r3, [pc, #28]	; (800b528 <btn_event_prev_status+0x2c>)
 800b50a:	6818      	ldr	r0, [r3, #0]
 800b50c:	f008 fdbe 	bl	801408c <lv_task_del>
		lv_obj_del(Tela_Reading_STS);
 800b510:	4b06      	ldr	r3, [pc, #24]	; (800b52c <btn_event_prev_status+0x30>)
 800b512:	6818      	ldr	r0, [r3, #0]
 800b514:	f003 fbf3 	bl	800ecfe <lv_obj_del>
}
 800b518:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_reading_efic();
 800b51c:	f7ff bf66 	b.w	800b3ec <screen_reading_efic>
 800b520:	bd08      	pop	{r3, pc}
 800b522:	bf00      	nop
 800b524:	0802bc1a 	.word	0x0802bc1a
 800b528:	200055ec 	.word	0x200055ec
 800b52c:	200055f0 	.word	0x200055f0

0800b530 <btn_prev_status>:
{
 800b530:	b538      	push	{r3, r4, r5, lr}
	lv_obj_t * imgbtn2 = lv_imgbtn_create(Tela_Reading_STS, NULL);
 800b532:	4b15      	ldr	r3, [pc, #84]	; (800b588 <btn_prev_status+0x58>)
	lv_imgbtn_set_src(imgbtn2, LV_BTN_STATE_REL, &Btn_prev);
 800b534:	4d15      	ldr	r5, [pc, #84]	; (800b58c <btn_prev_status+0x5c>)
	lv_obj_t * imgbtn2 = lv_imgbtn_create(Tela_Reading_STS, NULL);
 800b536:	6818      	ldr	r0, [r3, #0]
 800b538:	2100      	movs	r1, #0
 800b53a:	f00b fa1b 	bl	8016974 <lv_imgbtn_create>
	lv_imgbtn_set_src(imgbtn2, LV_BTN_STATE_REL, &Btn_prev);
 800b53e:	462a      	mov	r2, r5
	lv_obj_t * imgbtn2 = lv_imgbtn_create(Tela_Reading_STS, NULL);
 800b540:	4604      	mov	r4, r0
	lv_imgbtn_set_src(imgbtn2, LV_BTN_STATE_REL, &Btn_prev);
 800b542:	2100      	movs	r1, #0
 800b544:	f00b fa5e 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2, LV_BTN_STATE_TGL_REL, &Btn_prev);
 800b548:	462a      	mov	r2, r5
 800b54a:	4620      	mov	r0, r4
 800b54c:	2102      	movs	r1, #2
 800b54e:	f00b fa59 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2, LV_BTN_STATE_TGL_PR, &Btn_prev);
 800b552:	462a      	mov	r2, r5
 800b554:	4620      	mov	r0, r4
 800b556:	2103      	movs	r1, #3
 800b558:	f00b fa54 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2, LV_BTN_STATE_PR, &Btn_prev);
 800b55c:	462a      	mov	r2, r5
 800b55e:	4620      	mov	r0, r4
 800b560:	2101      	movs	r1, #1
 800b562:	f00b fa4f 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2, LV_BTN_STATE_INA, &Btn_prev);
 800b566:	462a      	mov	r2, r5
 800b568:	4620      	mov	r0, r4
 800b56a:	2104      	movs	r1, #4
 800b56c:	f00b fa4a 	bl	8016a04 <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn2, btn_event_prev_status);
 800b570:	4620      	mov	r0, r4
 800b572:	4907      	ldr	r1, [pc, #28]	; (800b590 <btn_prev_status+0x60>)
 800b574:	f002 fe11 	bl	800e19a <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn2, 32, 18);
 800b578:	4620      	mov	r0, r4
 800b57a:	2212      	movs	r2, #18
 800b57c:	2120      	movs	r1, #32
}
 800b57e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lv_obj_set_pos(imgbtn2, 32, 18);
 800b582:	f002 bf54 	b.w	800e42e <lv_obj_set_pos>
 800b586:	bf00      	nop
 800b588:	200055f0 	.word	0x200055f0
 800b58c:	20001b44 	.word	0x20001b44
 800b590:	0800b4fd 	.word	0x0800b4fd

0800b594 <print_reading_status>:
{
 800b594:	b537      	push	{r0, r1, r2, r4, r5, lr}
	lv_style_copy(&style_txt1, &lv_style_plain);
 800b596:	4c69      	ldr	r4, [pc, #420]	; (800b73c <print_reading_status+0x1a8>)
 800b598:	4969      	ldr	r1, [pc, #420]	; (800b740 <print_reading_status+0x1ac>)
 800b59a:	4620      	mov	r0, r4
 800b59c:	f004 f89a 	bl	800f6d4 <lv_style_copy>
	style_txt1.text.font = &lv_font_eurostile_10;
 800b5a0:	4b68      	ldr	r3, [pc, #416]	; (800b744 <print_reading_status+0x1b0>)
 800b5a2:	6263      	str	r3, [r4, #36]	; 0x24
	style_txt1.text.letter_space = 1;
 800b5a4:	2301      	movs	r3, #1
 800b5a6:	8523      	strh	r3, [r4, #40]	; 0x28
	style_txt1.text.line_space = 1;
 800b5a8:	8563      	strh	r3, [r4, #42]	; 0x2a
	style_txt1.text.color = LV_COLOR_WHITE;
 800b5aa:	4b67      	ldr	r3, [pc, #412]	; (800b748 <print_reading_status+0x1b4>)
 800b5ac:	881b      	ldrh	r3, [r3, #0]
 800b5ae:	8423      	strh	r3, [r4, #32]
	if(pll_status)
 800b5b0:	4b66      	ldr	r3, [pc, #408]	; (800b74c <print_reading_status+0x1b8>)
 800b5b2:	781b      	ldrb	r3, [r3, #0]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	f000 80bf 	beq.w	800b738 <print_reading_status+0x1a4>
		sprintf(buffer, "OFF");
 800b5ba:	4965      	ldr	r1, [pc, #404]	; (800b750 <print_reading_status+0x1bc>)
	txt_pll = lv_label_create(Tela_Reading_STS, NULL);
 800b5bc:	4d65      	ldr	r5, [pc, #404]	; (800b754 <print_reading_status+0x1c0>)
		sprintf(buffer, "ON");
 800b5be:	4866      	ldr	r0, [pc, #408]	; (800b758 <print_reading_status+0x1c4>)
	txt_pll = lv_label_create(Tela_Reading_STS, NULL);
 800b5c0:	4c66      	ldr	r4, [pc, #408]	; (800b75c <print_reading_status+0x1c8>)
		sprintf(buffer, "ON");
 800b5c2:	f00e f863 	bl	801968c <strcpy>
	txt_pll = lv_label_create(Tela_Reading_STS, NULL);
 800b5c6:	2100      	movs	r1, #0
 800b5c8:	6828      	ldr	r0, [r5, #0]
 800b5ca:	f00b ff77 	bl	80174bc <lv_label_create>
	lv_obj_set_style(txt_pll, &style_txt1); 						// Configura o estilo criado
 800b5ce:	495b      	ldr	r1, [pc, #364]	; (800b73c <print_reading_status+0x1a8>)
	txt_pll = lv_label_create(Tela_Reading_STS, NULL);
 800b5d0:	6020      	str	r0, [r4, #0]
	lv_obj_set_style(txt_pll, &style_txt1); 						// Configura o estilo criado
 800b5d2:	f003 fc23 	bl	800ee1c <lv_obj_set_style>
	lv_label_set_long_mode(txt_pll, LV_LABEL_LONG_EXPAND); 			// Quebra as linhas longas
 800b5d6:	6820      	ldr	r0, [r4, #0]
 800b5d8:	2100      	movs	r1, #0
 800b5da:	f00b ff19 	bl	8017410 <lv_label_set_long_mode>
	lv_label_set_recolor(txt_pll, true); 							// Ativa recolorizar por comandos no texto
 800b5de:	6820      	ldr	r0, [r4, #0]
 800b5e0:	2101      	movs	r1, #1
 800b5e2:	f00b ff57 	bl	8017494 <lv_label_set_recolor>
	lv_label_set_align(txt_pll, LV_ALIGN_IN_TOP_RIGHT); 			// Centraliza linhas alinhadas
 800b5e6:	6820      	ldr	r0, [r4, #0]
 800b5e8:	2103      	movs	r1, #3
 800b5ea:	f00b fbb0 	bl	8016d4e <lv_label_set_align>
	lv_label_set_text(txt_pll, buffer);
 800b5ee:	6820      	ldr	r0, [r4, #0]
 800b5f0:	4959      	ldr	r1, [pc, #356]	; (800b758 <print_reading_status+0x1c4>)
 800b5f2:	f00b feb9 	bl	8017368 <lv_label_set_text>
	lv_obj_set_width(txt_pll, 300); 								// Configuura o comprimento
 800b5f6:	6820      	ldr	r0, [r4, #0]
 800b5f8:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800b5fc:	f003 fb56 	bl	800ecac <lv_obj_set_width>
	lv_obj_align(txt_pll, NULL, LV_ALIGN_IN_TOP_RIGHT, -18, 40); 	// Alinha ao centro
 800b600:	2328      	movs	r3, #40	; 0x28
 800b602:	9300      	str	r3, [sp, #0]
 800b604:	2203      	movs	r2, #3
 800b606:	6820      	ldr	r0, [r4, #0]
	txt_temp = lv_label_create(Tela_Reading_STS, NULL);
 800b608:	4c55      	ldr	r4, [pc, #340]	; (800b760 <print_reading_status+0x1cc>)
	lv_obj_align(txt_pll, NULL, LV_ALIGN_IN_TOP_RIGHT, -18, 40); 	// Alinha ao centro
 800b60a:	f06f 0311 	mvn.w	r3, #17
 800b60e:	2100      	movs	r1, #0
 800b610:	f002 ff62 	bl	800e4d8 <lv_obj_align>
	sprintf(buffer, "%0.1f°C", temperatura);
 800b614:	4b53      	ldr	r3, [pc, #332]	; (800b764 <print_reading_status+0x1d0>)
 800b616:	6818      	ldr	r0, [r3, #0]
 800b618:	f7f4 ff96 	bl	8000548 <__aeabi_f2d>
 800b61c:	4602      	mov	r2, r0
 800b61e:	460b      	mov	r3, r1
 800b620:	484d      	ldr	r0, [pc, #308]	; (800b758 <print_reading_status+0x1c4>)
 800b622:	4951      	ldr	r1, [pc, #324]	; (800b768 <print_reading_status+0x1d4>)
 800b624:	f00e f80e 	bl	8019644 <sprintf>
	txt_temp = lv_label_create(Tela_Reading_STS, NULL);
 800b628:	2100      	movs	r1, #0
 800b62a:	6828      	ldr	r0, [r5, #0]
 800b62c:	f00b ff46 	bl	80174bc <lv_label_create>
	lv_obj_set_style(txt_temp, &style_txt1); 						// Configura o estilo criado
 800b630:	4942      	ldr	r1, [pc, #264]	; (800b73c <print_reading_status+0x1a8>)
	txt_temp = lv_label_create(Tela_Reading_STS, NULL);
 800b632:	6020      	str	r0, [r4, #0]
	lv_obj_set_style(txt_temp, &style_txt1); 						// Configura o estilo criado
 800b634:	f003 fbf2 	bl	800ee1c <lv_obj_set_style>
	lv_label_set_long_mode(txt_temp, LV_LABEL_LONG_EXPAND); 		// Quebra as linhas longas
 800b638:	6820      	ldr	r0, [r4, #0]
 800b63a:	2100      	movs	r1, #0
 800b63c:	f00b fee8 	bl	8017410 <lv_label_set_long_mode>
	lv_label_set_recolor(txt_temp, true); 							// Ativa recolorizar por comandos no texto
 800b640:	6820      	ldr	r0, [r4, #0]
 800b642:	2101      	movs	r1, #1
 800b644:	f00b ff26 	bl	8017494 <lv_label_set_recolor>
	lv_label_set_align(txt_temp, LV_ALIGN_IN_TOP_RIGHT); 			// Centraliza linhas alinhadas
 800b648:	6820      	ldr	r0, [r4, #0]
 800b64a:	2103      	movs	r1, #3
 800b64c:	f00b fb7f 	bl	8016d4e <lv_label_set_align>
	lv_label_set_text(txt_temp, buffer);
 800b650:	6820      	ldr	r0, [r4, #0]
 800b652:	4941      	ldr	r1, [pc, #260]	; (800b758 <print_reading_status+0x1c4>)
 800b654:	f00b fe88 	bl	8017368 <lv_label_set_text>
	lv_obj_set_width(txt_temp, 300); 								// Configuura o comprimento
 800b658:	6820      	ldr	r0, [r4, #0]
 800b65a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800b65e:	f003 fb25 	bl	800ecac <lv_obj_set_width>
	lv_obj_align(txt_temp, NULL, LV_ALIGN_IN_TOP_RIGHT, -18, 64); 	// Alinha ao centro
 800b662:	2340      	movs	r3, #64	; 0x40
 800b664:	9300      	str	r3, [sp, #0]
 800b666:	2203      	movs	r2, #3
 800b668:	2100      	movs	r1, #0
 800b66a:	6820      	ldr	r0, [r4, #0]
	txt_vswr = lv_label_create(Tela_Reading_STS, NULL);
 800b66c:	4c3f      	ldr	r4, [pc, #252]	; (800b76c <print_reading_status+0x1d8>)
	lv_obj_align(txt_temp, NULL, LV_ALIGN_IN_TOP_RIGHT, -18, 64); 	// Alinha ao centro
 800b66e:	f06f 0311 	mvn.w	r3, #17
 800b672:	f002 ff31 	bl	800e4d8 <lv_obj_align>
	if((float)reflected >= MAX_RFL)
 800b676:	4b3e      	ldr	r3, [pc, #248]	; (800b770 <print_reading_status+0x1dc>)
		sprintf(buffer, "OK");
 800b678:	4837      	ldr	r0, [pc, #220]	; (800b758 <print_reading_status+0x1c4>)
	if((float)reflected >= MAX_RFL)
 800b67a:	ed93 7a00 	vldr	s14, [r3]
 800b67e:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800b682:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		sprintf(buffer, "Falha");
 800b68a:	bfac      	ite	ge
 800b68c:	4939      	ldrge	r1, [pc, #228]	; (800b774 <print_reading_status+0x1e0>)
		sprintf(buffer, "OK");
 800b68e:	493a      	ldrlt	r1, [pc, #232]	; (800b778 <print_reading_status+0x1e4>)
 800b690:	f00d fffc 	bl	801968c <strcpy>
	txt_vswr = lv_label_create(Tela_Reading_STS, NULL);
 800b694:	2100      	movs	r1, #0
 800b696:	6828      	ldr	r0, [r5, #0]
 800b698:	f00b ff10 	bl	80174bc <lv_label_create>
	lv_obj_set_style(txt_vswr, &style_txt1); 						// Configura o estilo criado
 800b69c:	4927      	ldr	r1, [pc, #156]	; (800b73c <print_reading_status+0x1a8>)
	txt_vswr = lv_label_create(Tela_Reading_STS, NULL);
 800b69e:	6020      	str	r0, [r4, #0]
	lv_obj_set_style(txt_vswr, &style_txt1); 						// Configura o estilo criado
 800b6a0:	f003 fbbc 	bl	800ee1c <lv_obj_set_style>
	lv_label_set_long_mode(txt_vswr, LV_LABEL_LONG_EXPAND); 		// Quebra as linhas longas
 800b6a4:	6820      	ldr	r0, [r4, #0]
 800b6a6:	2100      	movs	r1, #0
 800b6a8:	f00b feb2 	bl	8017410 <lv_label_set_long_mode>
	lv_label_set_recolor(txt_vswr, true); 							// Ativa recolorizar por comandos no texto
 800b6ac:	6820      	ldr	r0, [r4, #0]
 800b6ae:	2101      	movs	r1, #1
 800b6b0:	f00b fef0 	bl	8017494 <lv_label_set_recolor>
	lv_label_set_align(txt_vswr, LV_ALIGN_IN_TOP_RIGHT); 			// Centraliza linhas alinhadas
 800b6b4:	6820      	ldr	r0, [r4, #0]
 800b6b6:	2103      	movs	r1, #3
 800b6b8:	f00b fb49 	bl	8016d4e <lv_label_set_align>
	lv_label_set_text(txt_vswr, buffer);
 800b6bc:	6820      	ldr	r0, [r4, #0]
 800b6be:	4926      	ldr	r1, [pc, #152]	; (800b758 <print_reading_status+0x1c4>)
 800b6c0:	f00b fe52 	bl	8017368 <lv_label_set_text>
	lv_obj_set_width(txt_vswr, 300); 								// Configuura o comprimento
 800b6c4:	6820      	ldr	r0, [r4, #0]
 800b6c6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800b6ca:	f003 faef 	bl	800ecac <lv_obj_set_width>
	lv_obj_align(txt_vswr, NULL, LV_ALIGN_IN_TOP_RIGHT, -18, 87); 	// Alinha ao centro
 800b6ce:	2357      	movs	r3, #87	; 0x57
 800b6d0:	9300      	str	r3, [sp, #0]
 800b6d2:	2203      	movs	r2, #3
 800b6d4:	f06f 0311 	mvn.w	r3, #17
 800b6d8:	6820      	ldr	r0, [r4, #0]
 800b6da:	2100      	movs	r1, #0
 800b6dc:	f002 fefc 	bl	800e4d8 <lv_obj_align>
	sprintf(buffer, "1.0.0/2019");
 800b6e0:	4926      	ldr	r1, [pc, #152]	; (800b77c <print_reading_status+0x1e8>)
 800b6e2:	481d      	ldr	r0, [pc, #116]	; (800b758 <print_reading_status+0x1c4>)
 800b6e4:	f00d ffd2 	bl	801968c <strcpy>
	lv_obj_t * txt_version = lv_label_create(Tela_Reading_STS, NULL);
 800b6e8:	2100      	movs	r1, #0
 800b6ea:	6828      	ldr	r0, [r5, #0]
 800b6ec:	f00b fee6 	bl	80174bc <lv_label_create>
	lv_obj_set_style(txt_version, &style_txt1); 						// Configura o estilo criado
 800b6f0:	4912      	ldr	r1, [pc, #72]	; (800b73c <print_reading_status+0x1a8>)
	lv_obj_t * txt_version = lv_label_create(Tela_Reading_STS, NULL);
 800b6f2:	4604      	mov	r4, r0
	lv_obj_set_style(txt_version, &style_txt1); 						// Configura o estilo criado
 800b6f4:	f003 fb92 	bl	800ee1c <lv_obj_set_style>
	lv_label_set_long_mode(txt_version, LV_LABEL_LONG_EXPAND); 			// Quebra as linhas longas
 800b6f8:	4620      	mov	r0, r4
 800b6fa:	2100      	movs	r1, #0
 800b6fc:	f00b fe88 	bl	8017410 <lv_label_set_long_mode>
	lv_label_set_recolor(txt_version, true); 							// Ativa recolorizar por comandos no texto
 800b700:	4620      	mov	r0, r4
 800b702:	2101      	movs	r1, #1
 800b704:	f00b fec6 	bl	8017494 <lv_label_set_recolor>
	lv_label_set_align(txt_version, LV_ALIGN_IN_TOP_RIGHT); 			// Centraliza linhas alinhadas
 800b708:	4620      	mov	r0, r4
 800b70a:	2103      	movs	r1, #3
 800b70c:	f00b fb1f 	bl	8016d4e <lv_label_set_align>
	lv_label_set_text(txt_version, buffer);
 800b710:	4620      	mov	r0, r4
 800b712:	4911      	ldr	r1, [pc, #68]	; (800b758 <print_reading_status+0x1c4>)
 800b714:	f00b fe28 	bl	8017368 <lv_label_set_text>
	lv_obj_set_width(txt_version, 300); 								// Configuura o comprimento
 800b718:	4620      	mov	r0, r4
 800b71a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800b71e:	f003 fac5 	bl	800ecac <lv_obj_set_width>
	lv_obj_align(txt_version, NULL, LV_ALIGN_IN_TOP_RIGHT, -8, 110); 	// Alinha ao centro
 800b722:	236e      	movs	r3, #110	; 0x6e
 800b724:	9300      	str	r3, [sp, #0]
 800b726:	2203      	movs	r2, #3
 800b728:	f06f 0307 	mvn.w	r3, #7
 800b72c:	2100      	movs	r1, #0
 800b72e:	4620      	mov	r0, r4
 800b730:	f002 fed2 	bl	800e4d8 <lv_obj_align>
}
 800b734:	b003      	add	sp, #12
 800b736:	bd30      	pop	{r4, r5, pc}
		sprintf(buffer, "ON");
 800b738:	4911      	ldr	r1, [pc, #68]	; (800b780 <print_reading_status+0x1ec>)
 800b73a:	e73f      	b.n	800b5bc <print_reading_status+0x28>
 800b73c:	200055f8 	.word	0x200055f8
 800b740:	2000c424 	.word	0x2000c424
 800b744:	200006ec 	.word	0x200006ec
 800b748:	0801cb16 	.word	0x0801cb16
 800b74c:	2000000c 	.word	0x2000000c
 800b750:	0802bdf5 	.word	0x0802bdf5
 800b754:	200055f0 	.word	0x200055f0
 800b758:	20004cd0 	.word	0x20004cd0
 800b75c:	20005634 	.word	0x20005634
 800b760:	20005638 	.word	0x20005638
 800b764:	20000014 	.word	0x20000014
 800b768:	0802bdfc 	.word	0x0802bdfc
 800b76c:	2000563c 	.word	0x2000563c
 800b770:	20004dc4 	.word	0x20004dc4
 800b774:	0802be05 	.word	0x0802be05
 800b778:	0802bad1 	.word	0x0802bad1
 800b77c:	0802bdea 	.word	0x0802bdea
 800b780:	0802bdf9 	.word	0x0802bdf9

0800b784 <screen_reading_status>:
	Tela_Reading_STS = lv_obj_create(NULL, NULL);
 800b784:	2100      	movs	r1, #0
{
 800b786:	b538      	push	{r3, r4, r5, lr}
	Tela_Reading_STS = lv_obj_create(NULL, NULL);
 800b788:	4608      	mov	r0, r1
 800b78a:	f003 f8c7 	bl	800e91c <lv_obj_create>
 800b78e:	4c11      	ldr	r4, [pc, #68]	; (800b7d4 <screen_reading_status+0x50>)
	img_fundo = lv_img_create(Tela_Reading_STS, NULL);
 800b790:	4d11      	ldr	r5, [pc, #68]	; (800b7d8 <screen_reading_status+0x54>)
	Tela_Reading_STS = lv_obj_create(NULL, NULL);
 800b792:	6020      	str	r0, [r4, #0]
	img_fundo = lv_img_create(Tela_Reading_STS, NULL);
 800b794:	2100      	movs	r1, #0
 800b796:	f00a ffc3 	bl	8016720 <lv_img_create>
    lv_img_set_src(img_fundo, &tela_status);
 800b79a:	4910      	ldr	r1, [pc, #64]	; (800b7dc <screen_reading_status+0x58>)
	img_fundo = lv_img_create(Tela_Reading_STS, NULL);
 800b79c:	6028      	str	r0, [r5, #0]
    lv_img_set_src(img_fundo, &tela_status);
 800b79e:	f00a ff2f 	bl	8016600 <lv_img_set_src>
    lv_obj_set_protect(img_fundo, LV_PROTECT_POS);
 800b7a2:	2104      	movs	r1, #4
 800b7a4:	6828      	ldr	r0, [r5, #0]
 800b7a6:	f002 fceb 	bl	800e180 <lv_obj_set_protect>
	btn_prev_status();
 800b7aa:	f7ff fec1 	bl	800b530 <btn_prev_status>
	print_reading_status();
 800b7ae:	f7ff fef1 	bl	800b594 <print_reading_status>
 800b7b2:	6820      	ldr	r0, [r4, #0]
 800b7b4:	f002 fa9e 	bl	800dcf4 <lv_disp_load_scr>
	Task_Status = lv_task_create(update_screen_status, 500, LV_TASK_PRIO_MID, NULL);
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	2203      	movs	r2, #3
 800b7bc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800b7c0:	4807      	ldr	r0, [pc, #28]	; (800b7e0 <screen_reading_status+0x5c>)
 800b7c2:	f008 fd53 	bl	801426c <lv_task_create>
 800b7c6:	4b07      	ldr	r3, [pc, #28]	; (800b7e4 <screen_reading_status+0x60>)
 800b7c8:	6018      	str	r0, [r3, #0]
	TelaAtiva = TelaReading_Status;
 800b7ca:	4b07      	ldr	r3, [pc, #28]	; (800b7e8 <screen_reading_status+0x64>)
 800b7cc:	220e      	movs	r2, #14
 800b7ce:	601a      	str	r2, [r3, #0]
 800b7d0:	bd38      	pop	{r3, r4, r5, pc}
 800b7d2:	bf00      	nop
 800b7d4:	200055f0 	.word	0x200055f0
 800b7d8:	200055f4 	.word	0x200055f4
 800b7dc:	20001c10 	.word	0x20001c10
 800b7e0:	0800b461 	.word	0x0800b461
 800b7e4:	200055ec 	.word	0x200055ec
 800b7e8:	200033cc 	.word	0x200033cc

0800b7ec <btn_event_next_temp>:
	lv_obj_set_pos(imgbtn1, 112, 18);
}

static void btn_event_next_temp(lv_obj_t * btn, lv_event_t event)
{
	if(event == LV_EVENT_RELEASED) {
 800b7ec:	2907      	cmp	r1, #7
{
 800b7ee:	b508      	push	{r3, lr}
	if(event == LV_EVENT_RELEASED) {
 800b7f0:	d10e      	bne.n	800b810 <btn_event_next_temp+0x24>
		printf("Button Next Released SCREEN_READING_VPA\n");
 800b7f2:	4808      	ldr	r0, [pc, #32]	; (800b814 <btn_event_next_temp+0x28>)
 800b7f4:	f00d ff0e 	bl	8019614 <puts>
		lv_task_del(Task_Reading_TEMP);
 800b7f8:	4b07      	ldr	r3, [pc, #28]	; (800b818 <btn_event_next_temp+0x2c>)
 800b7fa:	6818      	ldr	r0, [r3, #0]
 800b7fc:	f008 fc46 	bl	801408c <lv_task_del>
		lv_obj_del(Tela_Reading_TEMP);
 800b800:	4b06      	ldr	r3, [pc, #24]	; (800b81c <btn_event_next_temp+0x30>)
 800b802:	6818      	ldr	r0, [r3, #0]
 800b804:	f003 fa7b 	bl	800ecfe <lv_obj_del>
		screen_reading_vpa();
	}
}
 800b808:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_reading_vpa();
 800b80c:	f000 bc42 	b.w	800c094 <screen_reading_vpa>
 800b810:	bd08      	pop	{r3, pc}
 800b812:	bf00      	nop
 800b814:	0802be0b 	.word	0x0802be0b
 800b818:	20005640 	.word	0x20005640
 800b81c:	20005644 	.word	0x20005644

0800b820 <btn_event_prev_temp>:
	lv_obj_set_pos(imgbtn2, 32, 18);
}

static void btn_event_prev_temp(lv_obj_t * btn, lv_event_t event)
{
	if(event == LV_EVENT_RELEASED) {
 800b820:	2907      	cmp	r1, #7
{
 800b822:	b508      	push	{r3, lr}
	if(event == LV_EVENT_RELEASED) {
 800b824:	d10e      	bne.n	800b844 <btn_event_prev_temp+0x24>
		printf("Button ESC Released\n");
 800b826:	4808      	ldr	r0, [pc, #32]	; (800b848 <btn_event_prev_temp+0x28>)
 800b828:	f00d fef4 	bl	8019614 <puts>
        lv_task_del(Task_Reading_TEMP);
 800b82c:	4b07      	ldr	r3, [pc, #28]	; (800b84c <btn_event_prev_temp+0x2c>)
 800b82e:	6818      	ldr	r0, [r3, #0]
 800b830:	f008 fc2c 	bl	801408c <lv_task_del>
		lv_obj_del(Tela_Reading_TEMP);
 800b834:	4b06      	ldr	r3, [pc, #24]	; (800b850 <btn_event_prev_temp+0x30>)
 800b836:	6818      	ldr	r0, [r3, #0]
 800b838:	f003 fa61 	bl	800ecfe <lv_obj_del>
		screen_reading_mpx();
	}
}
 800b83c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_reading_mpx();
 800b840:	f7ff bbf2 	b.w	800b028 <screen_reading_mpx>
 800b844:	bd08      	pop	{r3, pc}
 800b846:	bf00      	nop
 800b848:	0802bc1a 	.word	0x0802bc1a
 800b84c:	20005640 	.word	0x20005640
 800b850:	20005644 	.word	0x20005644

0800b854 <btn_next_temp>:
{
 800b854:	b538      	push	{r3, r4, r5, lr}
	lv_obj_t * imgbtn1 = lv_imgbtn_create(Tela_Reading_TEMP, NULL);
 800b856:	4b15      	ldr	r3, [pc, #84]	; (800b8ac <btn_next_temp+0x58>)
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_REL, &Btn_next);
 800b858:	4d15      	ldr	r5, [pc, #84]	; (800b8b0 <btn_next_temp+0x5c>)
	lv_obj_t * imgbtn1 = lv_imgbtn_create(Tela_Reading_TEMP, NULL);
 800b85a:	6818      	ldr	r0, [r3, #0]
 800b85c:	2100      	movs	r1, #0
 800b85e:	f00b f889 	bl	8016974 <lv_imgbtn_create>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_REL, &Btn_next);
 800b862:	462a      	mov	r2, r5
	lv_obj_t * imgbtn1 = lv_imgbtn_create(Tela_Reading_TEMP, NULL);
 800b864:	4604      	mov	r4, r0
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_REL, &Btn_next);
 800b866:	2100      	movs	r1, #0
 800b868:	f00b f8cc 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_TGL_REL, &Btn_next);
 800b86c:	462a      	mov	r2, r5
 800b86e:	4620      	mov	r0, r4
 800b870:	2102      	movs	r1, #2
 800b872:	f00b f8c7 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_TGL_PR, &Btn_next);
 800b876:	462a      	mov	r2, r5
 800b878:	4620      	mov	r0, r4
 800b87a:	2103      	movs	r1, #3
 800b87c:	f00b f8c2 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_PR, &Btn_next);
 800b880:	462a      	mov	r2, r5
 800b882:	4620      	mov	r0, r4
 800b884:	2101      	movs	r1, #1
 800b886:	f00b f8bd 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_INA, &Btn_next);
 800b88a:	462a      	mov	r2, r5
 800b88c:	4620      	mov	r0, r4
 800b88e:	2104      	movs	r1, #4
 800b890:	f00b f8b8 	bl	8016a04 <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn1, btn_event_next_temp);
 800b894:	4620      	mov	r0, r4
 800b896:	4907      	ldr	r1, [pc, #28]	; (800b8b4 <btn_next_temp+0x60>)
 800b898:	f002 fc7f 	bl	800e19a <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn1, 112, 18);
 800b89c:	4620      	mov	r0, r4
 800b89e:	2212      	movs	r2, #18
 800b8a0:	2170      	movs	r1, #112	; 0x70
}
 800b8a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lv_obj_set_pos(imgbtn1, 112, 18);
 800b8a6:	f002 bdc2 	b.w	800e42e <lv_obj_set_pos>
 800b8aa:	bf00      	nop
 800b8ac:	20005644 	.word	0x20005644
 800b8b0:	20001ad8 	.word	0x20001ad8
 800b8b4:	0800b7ed 	.word	0x0800b7ed

0800b8b8 <btn_prev_temp>:
{
 800b8b8:	b538      	push	{r3, r4, r5, lr}
	lv_obj_t * imgbtn2 = lv_imgbtn_create(Tela_Reading_TEMP, NULL);
 800b8ba:	4b15      	ldr	r3, [pc, #84]	; (800b910 <btn_prev_temp+0x58>)
	lv_imgbtn_set_src(imgbtn2, LV_BTN_STATE_REL, &Btn_prev);
 800b8bc:	4d15      	ldr	r5, [pc, #84]	; (800b914 <btn_prev_temp+0x5c>)
	lv_obj_t * imgbtn2 = lv_imgbtn_create(Tela_Reading_TEMP, NULL);
 800b8be:	6818      	ldr	r0, [r3, #0]
 800b8c0:	2100      	movs	r1, #0
 800b8c2:	f00b f857 	bl	8016974 <lv_imgbtn_create>
	lv_imgbtn_set_src(imgbtn2, LV_BTN_STATE_REL, &Btn_prev);
 800b8c6:	462a      	mov	r2, r5
	lv_obj_t * imgbtn2 = lv_imgbtn_create(Tela_Reading_TEMP, NULL);
 800b8c8:	4604      	mov	r4, r0
	lv_imgbtn_set_src(imgbtn2, LV_BTN_STATE_REL, &Btn_prev);
 800b8ca:	2100      	movs	r1, #0
 800b8cc:	f00b f89a 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2, LV_BTN_STATE_TGL_REL, &Btn_prev);
 800b8d0:	462a      	mov	r2, r5
 800b8d2:	4620      	mov	r0, r4
 800b8d4:	2102      	movs	r1, #2
 800b8d6:	f00b f895 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2, LV_BTN_STATE_TGL_PR, &Btn_prev);
 800b8da:	462a      	mov	r2, r5
 800b8dc:	4620      	mov	r0, r4
 800b8de:	2103      	movs	r1, #3
 800b8e0:	f00b f890 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2, LV_BTN_STATE_PR, &Btn_prev);
 800b8e4:	462a      	mov	r2, r5
 800b8e6:	4620      	mov	r0, r4
 800b8e8:	2101      	movs	r1, #1
 800b8ea:	f00b f88b 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2, LV_BTN_STATE_INA, &Btn_prev);
 800b8ee:	462a      	mov	r2, r5
 800b8f0:	4620      	mov	r0, r4
 800b8f2:	2104      	movs	r1, #4
 800b8f4:	f00b f886 	bl	8016a04 <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn2, btn_event_prev_temp);
 800b8f8:	4620      	mov	r0, r4
 800b8fa:	4907      	ldr	r1, [pc, #28]	; (800b918 <btn_prev_temp+0x60>)
 800b8fc:	f002 fc4d 	bl	800e19a <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn2, 32, 18);
 800b900:	4620      	mov	r0, r4
 800b902:	2212      	movs	r2, #18
 800b904:	2120      	movs	r1, #32
}
 800b906:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lv_obj_set_pos(imgbtn2, 32, 18);
 800b90a:	f002 bd90 	b.w	800e42e <lv_obj_set_pos>
 800b90e:	bf00      	nop
 800b910:	20005644 	.word	0x20005644
 800b914:	20001b44 	.word	0x20001b44
 800b918:	0800b821 	.word	0x0800b821
 800b91c:	00000000 	.word	0x00000000

0800b920 <print_temp_1>:


void print_temp_1(float temp)
{
 800b920:	b573      	push	{r0, r1, r4, r5, r6, lr}
	temp = 43.3f;

	// Area de Refletida
	static lv_style_t style_txt1;
	lv_style_copy(&style_txt1, &lv_style_plain);
 800b922:	4c27      	ldr	r4, [pc, #156]	; (800b9c0 <print_temp_1+0xa0>)
 800b924:	4927      	ldr	r1, [pc, #156]	; (800b9c4 <print_temp_1+0xa4>)
	style_txt1.text.letter_space = 1;
	style_txt1.text.line_space = 1;
	style_txt1.text.color = LV_COLOR_CYAN;

	// Cria um novo rotulo
	txt_temp = lv_label_create(Tela_Reading_TEMP, NULL);
 800b926:	4d28      	ldr	r5, [pc, #160]	; (800b9c8 <print_temp_1+0xa8>)
	lv_style_copy(&style_txt1, &lv_style_plain);
 800b928:	4620      	mov	r0, r4
 800b92a:	f003 fed3 	bl	800f6d4 <lv_style_copy>
	style_txt1.text.font = &lv_font_eurostile_28;
 800b92e:	4b27      	ldr	r3, [pc, #156]	; (800b9cc <print_temp_1+0xac>)
 800b930:	6263      	str	r3, [r4, #36]	; 0x24
	style_txt1.text.color = LV_COLOR_CYAN;
 800b932:	f894 3020 	ldrb.w	r3, [r4, #32]
 800b936:	f043 031f 	orr.w	r3, r3, #31
 800b93a:	f884 3020 	strb.w	r3, [r4, #32]
 800b93e:	8c23      	ldrh	r3, [r4, #32]
 800b940:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800b944:	8423      	strh	r3, [r4, #32]
 800b946:	0a1b      	lsrs	r3, r3, #8
 800b948:	f36f 03c7 	bfc	r3, #3, #5
 800b94c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	txt_temp = lv_label_create(Tela_Reading_TEMP, NULL);
 800b950:	4b1f      	ldr	r3, [pc, #124]	; (800b9d0 <print_temp_1+0xb0>)
	style_txt1.text.letter_space = 1;
 800b952:	2601      	movs	r6, #1
	txt_temp = lv_label_create(Tela_Reading_TEMP, NULL);
 800b954:	6818      	ldr	r0, [r3, #0]
	style_txt1.text.letter_space = 1;
 800b956:	8526      	strh	r6, [r4, #40]	; 0x28
	txt_temp = lv_label_create(Tela_Reading_TEMP, NULL);
 800b958:	2100      	movs	r1, #0
	style_txt1.text.line_space = 1;
 800b95a:	8566      	strh	r6, [r4, #42]	; 0x2a
	txt_temp = lv_label_create(Tela_Reading_TEMP, NULL);
 800b95c:	f00b fdae 	bl	80174bc <lv_label_create>
	lv_obj_set_style(txt_temp, &style_txt1); 						// Configura o estilo criado
 800b960:	4621      	mov	r1, r4
	txt_temp = lv_label_create(Tela_Reading_TEMP, NULL);
 800b962:	6028      	str	r0, [r5, #0]
	lv_obj_set_style(txt_temp, &style_txt1); 						// Configura o estilo criado
 800b964:	f003 fa5a 	bl	800ee1c <lv_obj_set_style>
	lv_label_set_long_mode(txt_temp, LV_LABEL_LONG_EXPAND); 			// Quebra as linhas longas
 800b968:	6828      	ldr	r0, [r5, #0]
	lv_label_set_recolor(txt_temp, true); 							// Ativa recolorizar por comandos no texto
	lv_label_set_align(txt_temp, LV_ALIGN_IN_TOP_RIGHT); 				// Centraliza linhas alinhadas
	sprintf(buffer, "%0.1f", temp);
 800b96a:	4c1a      	ldr	r4, [pc, #104]	; (800b9d4 <print_temp_1+0xb4>)
	lv_label_set_long_mode(txt_temp, LV_LABEL_LONG_EXPAND); 			// Quebra as linhas longas
 800b96c:	2100      	movs	r1, #0
 800b96e:	f00b fd4f 	bl	8017410 <lv_label_set_long_mode>
	lv_label_set_recolor(txt_temp, true); 							// Ativa recolorizar por comandos no texto
 800b972:	4631      	mov	r1, r6
 800b974:	6828      	ldr	r0, [r5, #0]
 800b976:	f00b fd8d 	bl	8017494 <lv_label_set_recolor>
	lv_label_set_align(txt_temp, LV_ALIGN_IN_TOP_RIGHT); 				// Centraliza linhas alinhadas
 800b97a:	6828      	ldr	r0, [r5, #0]
 800b97c:	2103      	movs	r1, #3
 800b97e:	f00b f9e6 	bl	8016d4e <lv_label_set_align>
	sprintf(buffer, "%0.1f", temp);
 800b982:	a30d      	add	r3, pc, #52	; (adr r3, 800b9b8 <print_temp_1+0x98>)
 800b984:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b988:	4913      	ldr	r1, [pc, #76]	; (800b9d8 <print_temp_1+0xb8>)
 800b98a:	4620      	mov	r0, r4
 800b98c:	f00d fe5a 	bl	8019644 <sprintf>
	lv_label_set_text(txt_temp, buffer);
 800b990:	4621      	mov	r1, r4
 800b992:	6828      	ldr	r0, [r5, #0]
 800b994:	f00b fce8 	bl	8017368 <lv_label_set_text>
	lv_obj_set_width(txt_temp, 300); 								// Configuura o comprimento
 800b998:	6828      	ldr	r0, [r5, #0]
 800b99a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800b99e:	f003 f985 	bl	800ecac <lv_obj_set_width>
	lv_obj_align(txt_temp, NULL, LV_ALIGN_IN_TOP_RIGHT, -70, 45); 	// Alinha ao centro
 800b9a2:	232d      	movs	r3, #45	; 0x2d
 800b9a4:	9300      	str	r3, [sp, #0]
 800b9a6:	2203      	movs	r2, #3
 800b9a8:	f06f 0345 	mvn.w	r3, #69	; 0x45
 800b9ac:	2100      	movs	r1, #0
 800b9ae:	6828      	ldr	r0, [r5, #0]
 800b9b0:	f002 fd92 	bl	800e4d8 <lv_obj_align>
}
 800b9b4:	b002      	add	sp, #8
 800b9b6:	bd70      	pop	{r4, r5, r6, pc}
 800b9b8:	60000000 	.word	0x60000000
 800b9bc:	4045a666 	.word	0x4045a666
 800b9c0:	20005714 	.word	0x20005714
 800b9c4:	2000c424 	.word	0x2000c424
 800b9c8:	20005750 	.word	0x20005750
 800b9cc:	2000194c 	.word	0x2000194c
 800b9d0:	20005644 	.word	0x20005644
 800b9d4:	20004cd0 	.word	0x20004cd0
 800b9d8:	0802bde4 	.word	0x0802bde4

0800b9dc <create_vumeter_temperatura>:

void create_vumeter_temperatura(void)
{
 800b9dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	// Area do Barguraph Frequency
	// Indicador OFF
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800b9de:	4e30      	ldr	r6, [pc, #192]	; (800baa0 <create_vumeter_temperatura+0xc4>)
 800b9e0:	4930      	ldr	r1, [pc, #192]	; (800baa4 <create_vumeter_temperatura+0xc8>)
	style_indic_bar.body.radius = 0;
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
	style_indic_bar.body.main_color = LV_COLOR_MAKE(105, 105, 105);
	style_indic_bar.body.border.color = LV_COLOR_MAKE(105, 105, 105);

	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800b9e2:	4c31      	ldr	r4, [pc, #196]	; (800baa8 <create_vumeter_temperatura+0xcc>)
	style_indic_bar_vd.body.main_color = LV_COLOR_MAKE(0, 255, 0);
	style_indic_bar_vd.body.border.color = LV_COLOR_MAKE(0, 255, 0);

	// Create a default bar
	for(uint8_t x = 0; x < 20; x++) {
		bar_t[x] = lv_bar_create(Tela_Reading_TEMP, NULL);
 800b9e4:	4f31      	ldr	r7, [pc, #196]	; (800baac <create_vumeter_temperatura+0xd0>)
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800b9e6:	4630      	mov	r0, r6
 800b9e8:	f003 fe74 	bl	800f6d4 <lv_style_copy>
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800b9ec:	4b30      	ldr	r3, [pc, #192]	; (800bab0 <create_vumeter_temperatura+0xd4>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800b9ee:	492d      	ldr	r1, [pc, #180]	; (800baa4 <create_vumeter_temperatura+0xc8>)
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800b9f0:	881b      	ldrh	r3, [r3, #0]
 800b9f2:	80b3      	strh	r3, [r6, #4]
	style_indic_bar.body.radius = 0;
 800b9f4:	2500      	movs	r5, #0
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800b9f6:	4620      	mov	r0, r4
	style_indic_bar.body.main_color = LV_COLOR_MAKE(105, 105, 105);
 800b9f8:	8073      	strh	r3, [r6, #2]
	style_indic_bar.body.border.color = LV_COLOR_MAKE(105, 105, 105);
 800b9fa:	8173      	strh	r3, [r6, #10]
	style_indic_bar.body.radius = 0;
 800b9fc:	80f5      	strh	r5, [r6, #6]
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800b9fe:	f003 fe69 	bl	800f6d4 <lv_style_copy>
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800ba02:	7923      	ldrb	r3, [r4, #4]
	style_indic_bar_vd.body.radius = 0;
 800ba04:	80e5      	strh	r5, [r4, #6]
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800ba06:	f365 0304 	bfi	r3, r5, #0, #5
 800ba0a:	7123      	strb	r3, [r4, #4]
 800ba0c:	88a3      	ldrh	r3, [r4, #4]
 800ba0e:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800ba12:	80a3      	strh	r3, [r4, #4]
 800ba14:	0a1b      	lsrs	r3, r3, #8
 800ba16:	f365 03c7 	bfi	r3, r5, #3, #5
 800ba1a:	7163      	strb	r3, [r4, #5]
	style_indic_bar_vd.body.main_color = LV_COLOR_MAKE(0, 255, 0);
 800ba1c:	78a3      	ldrb	r3, [r4, #2]
 800ba1e:	f365 0304 	bfi	r3, r5, #0, #5
 800ba22:	70a3      	strb	r3, [r4, #2]
 800ba24:	8863      	ldrh	r3, [r4, #2]
 800ba26:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800ba2a:	8063      	strh	r3, [r4, #2]
 800ba2c:	0a1b      	lsrs	r3, r3, #8
 800ba2e:	f365 03c7 	bfi	r3, r5, #3, #5
 800ba32:	70e3      	strb	r3, [r4, #3]
	style_indic_bar_vd.body.border.color = LV_COLOR_MAKE(0, 255, 0);
 800ba34:	7aa3      	ldrb	r3, [r4, #10]
 800ba36:	f365 0304 	bfi	r3, r5, #0, #5
 800ba3a:	72a3      	strb	r3, [r4, #10]
 800ba3c:	8963      	ldrh	r3, [r4, #10]
 800ba3e:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800ba42:	8163      	strh	r3, [r4, #10]
 800ba44:	0a1b      	lsrs	r3, r3, #8
 800ba46:	f365 03c7 	bfi	r3, r5, #3, #5
 800ba4a:	72e3      	strb	r3, [r4, #11]
 800ba4c:	4c19      	ldr	r4, [pc, #100]	; (800bab4 <create_vumeter_temperatura+0xd8>)
		bar_t[x] = lv_bar_create(Tela_Reading_TEMP, NULL);
 800ba4e:	6838      	ldr	r0, [r7, #0]
 800ba50:	2100      	movs	r1, #0
 800ba52:	f008 ff21 	bl	8014898 <lv_bar_create>
		lv_obj_set_size(bar_t[x], 4, 19);
 800ba56:	2213      	movs	r2, #19
		bar_t[x] = lv_bar_create(Tela_Reading_TEMP, NULL);
 800ba58:	6060      	str	r0, [r4, #4]
		lv_obj_set_size(bar_t[x], 4, 19);
 800ba5a:	2104      	movs	r1, #4
 800ba5c:	f003 f8dc 	bl	800ec18 <lv_obj_set_size>
		lv_bar_set_style(bar_t[x], LV_BAR_STYLE_BG, &style_indic_bar);
 800ba60:	6860      	ldr	r0, [r4, #4]
 800ba62:	4632      	mov	r2, r6
 800ba64:	2100      	movs	r1, #0
 800ba66:	f008 ff01 	bl	801486c <lv_bar_set_style>
		lv_bar_set_style(bar_t[x], LV_BAR_STYLE_INDIC, &style_indic_bar);
 800ba6a:	6860      	ldr	r0, [r4, #4]
 800ba6c:	4632      	mov	r2, r6
 800ba6e:	2101      	movs	r1, #1
 800ba70:	f008 fefc 	bl	801486c <lv_bar_set_style>
		lv_obj_align(bar_t[x], NULL, LV_ALIGN_IN_TOP_LEFT, t_pos_x[x], 76);
 800ba74:	224c      	movs	r2, #76	; 0x4c
 800ba76:	4b10      	ldr	r3, [pc, #64]	; (800bab8 <create_vumeter_temperatura+0xdc>)
 800ba78:	9200      	str	r2, [sp, #0]
 800ba7a:	f933 3025 	ldrsh.w	r3, [r3, r5, lsl #2]
 800ba7e:	6860      	ldr	r0, [r4, #4]
 800ba80:	2201      	movs	r2, #1
 800ba82:	2100      	movs	r1, #0
 800ba84:	f002 fd28 	bl	800e4d8 <lv_obj_align>
 800ba88:	3501      	adds	r5, #1
		lv_bar_set_value(bar_t[x], 100, 0);
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	2164      	movs	r1, #100	; 0x64
 800ba8e:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800ba92:	f008 fe8f 	bl	80147b4 <lv_bar_set_value>
	for(uint8_t x = 0; x < 20; x++) {
 800ba96:	2d14      	cmp	r5, #20
 800ba98:	d1d9      	bne.n	800ba4e <create_vumeter_temperatura+0x72>
	}
}
 800ba9a:	b003      	add	sp, #12
 800ba9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba9e:	bf00      	nop
 800baa0:	2000569c 	.word	0x2000569c
 800baa4:	2000c334 	.word	0x2000c334
 800baa8:	200056d8 	.word	0x200056d8
 800baac:	20005644 	.word	0x20005644
 800bab0:	0801cb18 	.word	0x0801cb18
 800bab4:	20005644 	.word	0x20005644
 800bab8:	0802be34 	.word	0x0802be34

0800babc <update_vumeter_temperatura>:

void update_vumeter_temperatura(float temp)
{
 800babc:	b570      	push	{r4, r5, r6, lr}
	temp = 43.3f;
	uint32_t x;
	uint32_t resul = (uint32_t)( ((temp - 10.0) / 2.50));

	for(x = 0; x <= resul; x++) {
		lv_bar_set_style(bar_t[x], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800babe:	4d09      	ldr	r5, [pc, #36]	; (800bae4 <update_vumeter_temperatura+0x28>)
 800bac0:	4e09      	ldr	r6, [pc, #36]	; (800bae8 <update_vumeter_temperatura+0x2c>)
	for(x = 0; x <= resul; x++) {
 800bac2:	2400      	movs	r4, #0
		lv_bar_set_style(bar_t[x], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800bac4:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800bac8:	4632      	mov	r2, r6
 800baca:	2100      	movs	r1, #0
 800bacc:	f008 fece 	bl	801486c <lv_bar_set_style>
		lv_bar_set_style(bar_t[x], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
 800bad0:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800bad4:	4632      	mov	r2, r6
 800bad6:	2101      	movs	r1, #1
	for(x = 0; x <= resul; x++) {
 800bad8:	3401      	adds	r4, #1
		lv_bar_set_style(bar_t[x], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
 800bada:	f008 fec7 	bl	801486c <lv_bar_set_style>
	for(x = 0; x <= resul; x++) {
 800bade:	2c0e      	cmp	r4, #14
 800bae0:	d1f0      	bne.n	800bac4 <update_vumeter_temperatura+0x8>
	}
}
 800bae2:	bd70      	pop	{r4, r5, r6, pc}
 800bae4:	20005648 	.word	0x20005648
 800bae8:	200056d8 	.word	0x200056d8

0800baec <screen_reading_temp>:
{
 800baec:	b538      	push	{r3, r4, r5, lr}
	Tela_Reading_TEMP = lv_obj_create(NULL, NULL);
 800baee:	2100      	movs	r1, #0
{
 800baf0:	ed2d 8b02 	vpush	{d8}
    temperatura = temp;
 800baf4:	4b1a      	ldr	r3, [pc, #104]	; (800bb60 <screen_reading_temp+0x74>)
 800baf6:	ed9f 8a1b 	vldr	s16, [pc, #108]	; 800bb64 <screen_reading_temp+0x78>
	Tela_Reading_TEMP = lv_obj_create(NULL, NULL);
 800bafa:	4c1b      	ldr	r4, [pc, #108]	; (800bb68 <screen_reading_temp+0x7c>)
    temperatura = temp;
 800bafc:	ed83 8a00 	vstr	s16, [r3]
	Tela_Reading_TEMP = lv_obj_create(NULL, NULL);
 800bb00:	4608      	mov	r0, r1
 800bb02:	f002 ff0b 	bl	800e91c <lv_obj_create>
	img_fundo = lv_img_create(Tela_Reading_TEMP, NULL);
 800bb06:	2100      	movs	r1, #0
	Tela_Reading_TEMP = lv_obj_create(NULL, NULL);
 800bb08:	6020      	str	r0, [r4, #0]
	img_fundo = lv_img_create(Tela_Reading_TEMP, NULL);
 800bb0a:	f00a fe09 	bl	8016720 <lv_img_create>
 800bb0e:	4d17      	ldr	r5, [pc, #92]	; (800bb6c <screen_reading_temp+0x80>)
    lv_img_set_src(img_fundo, &tela_reading_temp);
 800bb10:	4917      	ldr	r1, [pc, #92]	; (800bb70 <screen_reading_temp+0x84>)
	img_fundo = lv_img_create(Tela_Reading_TEMP, NULL);
 800bb12:	6028      	str	r0, [r5, #0]
    lv_img_set_src(img_fundo, &tela_reading_temp);
 800bb14:	f00a fd74 	bl	8016600 <lv_img_set_src>
    lv_obj_set_protect(img_fundo, LV_PROTECT_POS);
 800bb18:	2104      	movs	r1, #4
 800bb1a:	6828      	ldr	r0, [r5, #0]
 800bb1c:	f002 fb30 	bl	800e180 <lv_obj_set_protect>
	btn_next_temp();
 800bb20:	f7ff fe98 	bl	800b854 <btn_next_temp>
	btn_prev_temp();
 800bb24:	f7ff fec8 	bl	800b8b8 <btn_prev_temp>
	print_temp_1(temp);
 800bb28:	eeb0 0a48 	vmov.f32	s0, s16
 800bb2c:	f7ff fef8 	bl	800b920 <print_temp_1>
	create_vumeter_temperatura();
 800bb30:	f7ff ff54 	bl	800b9dc <create_vumeter_temperatura>
	update_vumeter_temperatura(temp);
 800bb34:	eeb0 0a48 	vmov.f32	s0, s16
 800bb38:	f7ff ffc0 	bl	800babc <update_vumeter_temperatura>
 800bb3c:	6820      	ldr	r0, [r4, #0]
 800bb3e:	f002 f8d9 	bl	800dcf4 <lv_disp_load_scr>
	Task_Reading_TEMP = lv_task_create(update_reading_temp, 500, LV_TASK_PRIO_MID, NULL);
 800bb42:	2300      	movs	r3, #0
 800bb44:	2203      	movs	r2, #3
 800bb46:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800bb4a:	480a      	ldr	r0, [pc, #40]	; (800bb74 <screen_reading_temp+0x88>)
 800bb4c:	f008 fb8e 	bl	801426c <lv_task_create>
}
 800bb50:	ecbd 8b02 	vpop	{d8}
	Task_Reading_TEMP = lv_task_create(update_reading_temp, 500, LV_TASK_PRIO_MID, NULL);
 800bb54:	4b08      	ldr	r3, [pc, #32]	; (800bb78 <screen_reading_temp+0x8c>)
 800bb56:	6018      	str	r0, [r3, #0]
	TelaAtiva = TelaReading_Temp;
 800bb58:	4b08      	ldr	r3, [pc, #32]	; (800bb7c <screen_reading_temp+0x90>)
 800bb5a:	220b      	movs	r2, #11
 800bb5c:	601a      	str	r2, [r3, #0]
}
 800bb5e:	bd38      	pop	{r3, r4, r5, pc}
 800bb60:	20000014 	.word	0x20000014
 800bb64:	422d3333 	.word	0x422d3333
 800bb68:	20005644 	.word	0x20005644
 800bb6c:	20005698 	.word	0x20005698
 800bb70:	20001be0 	.word	0x20001be0
 800bb74:	0800bb81 	.word	0x0800bb81
 800bb78:	20005640 	.word	0x20005640
 800bb7c:	200033cc 	.word	0x200033cc

0800bb80 <update_reading_temp>:

static void update_reading_temp(lv_task_t * param)
{
 800bb80:	b538      	push	{r3, r4, r5, lr}
	sprintf(buffer, "%0.1f", temperatura);
 800bb82:	4c0b      	ldr	r4, [pc, #44]	; (800bbb0 <update_reading_temp+0x30>)
 800bb84:	4d0b      	ldr	r5, [pc, #44]	; (800bbb4 <update_reading_temp+0x34>)
 800bb86:	6820      	ldr	r0, [r4, #0]
 800bb88:	f7f4 fcde 	bl	8000548 <__aeabi_f2d>
 800bb8c:	4602      	mov	r2, r0
 800bb8e:	460b      	mov	r3, r1
 800bb90:	4628      	mov	r0, r5
 800bb92:	4909      	ldr	r1, [pc, #36]	; (800bbb8 <update_reading_temp+0x38>)
 800bb94:	f00d fd56 	bl	8019644 <sprintf>
	lv_label_set_text(txt_temp, buffer);
 800bb98:	4b08      	ldr	r3, [pc, #32]	; (800bbbc <update_reading_temp+0x3c>)
 800bb9a:	4629      	mov	r1, r5
 800bb9c:	6818      	ldr	r0, [r3, #0]
 800bb9e:	f00b fbe3 	bl	8017368 <lv_label_set_text>
	update_vumeter_temperatura(temperatura);
 800bba2:	ed94 0a00 	vldr	s0, [r4]
}
 800bba6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	update_vumeter_temperatura(temperatura);
 800bbaa:	f7ff bf87 	b.w	800babc <update_vumeter_temperatura>
 800bbae:	bf00      	nop
 800bbb0:	20000014 	.word	0x20000014
 800bbb4:	20004cd0 	.word	0x20004cd0
 800bbb8:	0802bde4 	.word	0x0802bde4
 800bbbc:	20005750 	.word	0x20005750

0800bbc0 <btn_event_next_vpa>:
	lv_obj_set_pos(imgbtn1, 112, 18);
}

static void btn_event_next_vpa(lv_obj_t * btn, lv_event_t event)
{
	if(event == LV_EVENT_RELEASED) {
 800bbc0:	2907      	cmp	r1, #7
{
 800bbc2:	b508      	push	{r3, lr}
	if(event == LV_EVENT_RELEASED) {
 800bbc4:	d10e      	bne.n	800bbe4 <btn_event_next_vpa+0x24>
		printf("Button Next Released SCREEN_READING_VPA\n");
 800bbc6:	4808      	ldr	r0, [pc, #32]	; (800bbe8 <btn_event_next_vpa+0x28>)
 800bbc8:	f00d fd24 	bl	8019614 <puts>
		lv_task_del(Task_Reading_VPA);
 800bbcc:	4b07      	ldr	r3, [pc, #28]	; (800bbec <btn_event_next_vpa+0x2c>)
 800bbce:	6818      	ldr	r0, [r3, #0]
 800bbd0:	f008 fa5c 	bl	801408c <lv_task_del>
		lv_obj_del(Tela_Reading_VPA);
 800bbd4:	4b06      	ldr	r3, [pc, #24]	; (800bbf0 <btn_event_next_vpa+0x30>)
 800bbd6:	6818      	ldr	r0, [r3, #0]
 800bbd8:	f003 f891 	bl	800ecfe <lv_obj_del>
		screen_reading_efic();
	}
}
 800bbdc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_reading_efic();
 800bbe0:	f7ff bc04 	b.w	800b3ec <screen_reading_efic>
 800bbe4:	bd08      	pop	{r3, pc}
 800bbe6:	bf00      	nop
 800bbe8:	0802be0b 	.word	0x0802be0b
 800bbec:	20005754 	.word	0x20005754
 800bbf0:	20005758 	.word	0x20005758

0800bbf4 <btn_event_prev_vpa>:
	lv_obj_set_pos(imgbtn2, 32, 18);
}

static void btn_event_prev_vpa(lv_obj_t * btn, lv_event_t event)
{
	if(event == LV_EVENT_RELEASED) {
 800bbf4:	2907      	cmp	r1, #7
{
 800bbf6:	b508      	push	{r3, lr}
	if(event == LV_EVENT_RELEASED) {
 800bbf8:	d10e      	bne.n	800bc18 <btn_event_prev_vpa+0x24>
		printf("Button ESC Released\n");
 800bbfa:	4808      	ldr	r0, [pc, #32]	; (800bc1c <btn_event_prev_vpa+0x28>)
 800bbfc:	f00d fd0a 	bl	8019614 <puts>
		lv_task_del(Task_Reading_VPA);
 800bc00:	4b07      	ldr	r3, [pc, #28]	; (800bc20 <btn_event_prev_vpa+0x2c>)
 800bc02:	6818      	ldr	r0, [r3, #0]
 800bc04:	f008 fa42 	bl	801408c <lv_task_del>
		lv_obj_del(Tela_Reading_VPA);
 800bc08:	4b06      	ldr	r3, [pc, #24]	; (800bc24 <btn_event_prev_vpa+0x30>)
 800bc0a:	6818      	ldr	r0, [r3, #0]
 800bc0c:	f003 f877 	bl	800ecfe <lv_obj_del>
		screen_reading_temp();
	}
}
 800bc10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_reading_temp();
 800bc14:	f7ff bf6a 	b.w	800baec <screen_reading_temp>
 800bc18:	bd08      	pop	{r3, pc}
 800bc1a:	bf00      	nop
 800bc1c:	0802bc1a 	.word	0x0802bc1a
 800bc20:	20005754 	.word	0x20005754
 800bc24:	20005758 	.word	0x20005758

0800bc28 <btn_next_vpa>:
{
 800bc28:	b538      	push	{r3, r4, r5, lr}
	lv_obj_t * imgbtn1 = lv_imgbtn_create(Tela_Reading_VPA, NULL);
 800bc2a:	4b15      	ldr	r3, [pc, #84]	; (800bc80 <btn_next_vpa+0x58>)
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_REL, &Btn_next);
 800bc2c:	4d15      	ldr	r5, [pc, #84]	; (800bc84 <btn_next_vpa+0x5c>)
	lv_obj_t * imgbtn1 = lv_imgbtn_create(Tela_Reading_VPA, NULL);
 800bc2e:	6818      	ldr	r0, [r3, #0]
 800bc30:	2100      	movs	r1, #0
 800bc32:	f00a fe9f 	bl	8016974 <lv_imgbtn_create>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_REL, &Btn_next);
 800bc36:	462a      	mov	r2, r5
	lv_obj_t * imgbtn1 = lv_imgbtn_create(Tela_Reading_VPA, NULL);
 800bc38:	4604      	mov	r4, r0
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_REL, &Btn_next);
 800bc3a:	2100      	movs	r1, #0
 800bc3c:	f00a fee2 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_TGL_REL, &Btn_next);
 800bc40:	462a      	mov	r2, r5
 800bc42:	4620      	mov	r0, r4
 800bc44:	2102      	movs	r1, #2
 800bc46:	f00a fedd 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_TGL_PR, &Btn_next);
 800bc4a:	462a      	mov	r2, r5
 800bc4c:	4620      	mov	r0, r4
 800bc4e:	2103      	movs	r1, #3
 800bc50:	f00a fed8 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_PR, &Btn_next);
 800bc54:	462a      	mov	r2, r5
 800bc56:	4620      	mov	r0, r4
 800bc58:	2101      	movs	r1, #1
 800bc5a:	f00a fed3 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_INA, &Btn_next);
 800bc5e:	462a      	mov	r2, r5
 800bc60:	4620      	mov	r0, r4
 800bc62:	2104      	movs	r1, #4
 800bc64:	f00a fece 	bl	8016a04 <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn1, btn_event_next_vpa);
 800bc68:	4620      	mov	r0, r4
 800bc6a:	4907      	ldr	r1, [pc, #28]	; (800bc88 <btn_next_vpa+0x60>)
 800bc6c:	f002 fa95 	bl	800e19a <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn1, 112, 18);
 800bc70:	4620      	mov	r0, r4
 800bc72:	2212      	movs	r2, #18
 800bc74:	2170      	movs	r1, #112	; 0x70
}
 800bc76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lv_obj_set_pos(imgbtn1, 112, 18);
 800bc7a:	f002 bbd8 	b.w	800e42e <lv_obj_set_pos>
 800bc7e:	bf00      	nop
 800bc80:	20005758 	.word	0x20005758
 800bc84:	20001ad8 	.word	0x20001ad8
 800bc88:	0800bbc1 	.word	0x0800bbc1

0800bc8c <btn_prev_vpa>:
{
 800bc8c:	b538      	push	{r3, r4, r5, lr}
	lv_obj_t * imgbtn2 = lv_imgbtn_create(Tela_Reading_VPA, NULL);
 800bc8e:	4b15      	ldr	r3, [pc, #84]	; (800bce4 <btn_prev_vpa+0x58>)
	lv_imgbtn_set_src(imgbtn2, LV_BTN_STATE_REL, &Btn_prev);
 800bc90:	4d15      	ldr	r5, [pc, #84]	; (800bce8 <btn_prev_vpa+0x5c>)
	lv_obj_t * imgbtn2 = lv_imgbtn_create(Tela_Reading_VPA, NULL);
 800bc92:	6818      	ldr	r0, [r3, #0]
 800bc94:	2100      	movs	r1, #0
 800bc96:	f00a fe6d 	bl	8016974 <lv_imgbtn_create>
	lv_imgbtn_set_src(imgbtn2, LV_BTN_STATE_REL, &Btn_prev);
 800bc9a:	462a      	mov	r2, r5
	lv_obj_t * imgbtn2 = lv_imgbtn_create(Tela_Reading_VPA, NULL);
 800bc9c:	4604      	mov	r4, r0
	lv_imgbtn_set_src(imgbtn2, LV_BTN_STATE_REL, &Btn_prev);
 800bc9e:	2100      	movs	r1, #0
 800bca0:	f00a feb0 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2, LV_BTN_STATE_TGL_REL, &Btn_prev);
 800bca4:	462a      	mov	r2, r5
 800bca6:	4620      	mov	r0, r4
 800bca8:	2102      	movs	r1, #2
 800bcaa:	f00a feab 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2, LV_BTN_STATE_TGL_PR, &Btn_prev);
 800bcae:	462a      	mov	r2, r5
 800bcb0:	4620      	mov	r0, r4
 800bcb2:	2103      	movs	r1, #3
 800bcb4:	f00a fea6 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2, LV_BTN_STATE_PR, &Btn_prev);
 800bcb8:	462a      	mov	r2, r5
 800bcba:	4620      	mov	r0, r4
 800bcbc:	2101      	movs	r1, #1
 800bcbe:	f00a fea1 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2, LV_BTN_STATE_INA, &Btn_prev);
 800bcc2:	462a      	mov	r2, r5
 800bcc4:	4620      	mov	r0, r4
 800bcc6:	2104      	movs	r1, #4
 800bcc8:	f00a fe9c 	bl	8016a04 <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn2, btn_event_prev_vpa);
 800bccc:	4620      	mov	r0, r4
 800bcce:	4907      	ldr	r1, [pc, #28]	; (800bcec <btn_prev_vpa+0x60>)
 800bcd0:	f002 fa63 	bl	800e19a <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn2, 32, 18);
 800bcd4:	4620      	mov	r0, r4
 800bcd6:	2212      	movs	r2, #18
 800bcd8:	2120      	movs	r1, #32
}
 800bcda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lv_obj_set_pos(imgbtn2, 32, 18);
 800bcde:	f002 bba6 	b.w	800e42e <lv_obj_set_pos>
 800bce2:	bf00      	nop
 800bce4:	20005758 	.word	0x20005758
 800bce8:	20001b44 	.word	0x20001b44
 800bcec:	0800bbf5 	.word	0x0800bbf5

0800bcf0 <print_vpa_1>:

void print_vpa_1(uint32_t vpa)
{
 800bcf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	vpa = 3900;
	float resul = (float) ( vpa * (3.30 / 4095.0)) * 5;
	sprintf(buffer, "%0.1f", resul);
 800bcf2:	4f27      	ldr	r7, [pc, #156]	; (800bd90 <print_vpa_1+0xa0>)

	// Area de VPA
	static lv_style_t style_txt1;
	lv_style_copy(&style_txt1, &lv_style_plain);
 800bcf4:	4c27      	ldr	r4, [pc, #156]	; (800bd94 <print_vpa_1+0xa4>)
	sprintf(buffer, "%0.1f", resul);
 800bcf6:	4928      	ldr	r1, [pc, #160]	; (800bd98 <print_vpa_1+0xa8>)
	style_txt1.text.letter_space = 1;
	style_txt1.text.line_space = 1;
	style_txt1.text.color = LV_COLOR_CYAN;

	// Cria um novo rotulo
	txt_vpa = lv_label_create(Tela_Reading_VPA, NULL);
 800bcf8:	4d28      	ldr	r5, [pc, #160]	; (800bd9c <print_vpa_1+0xac>)
	sprintf(buffer, "%0.1f", resul);
 800bcfa:	a323      	add	r3, pc, #140	; (adr r3, 800bd88 <print_vpa_1+0x98>)
 800bcfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd00:	4638      	mov	r0, r7
 800bd02:	f00d fc9f 	bl	8019644 <sprintf>
	lv_style_copy(&style_txt1, &lv_style_plain);
 800bd06:	4620      	mov	r0, r4
 800bd08:	4925      	ldr	r1, [pc, #148]	; (800bda0 <print_vpa_1+0xb0>)
 800bd0a:	f003 fce3 	bl	800f6d4 <lv_style_copy>
	style_txt1.text.font = &lv_font_eurostile_24;
 800bd0e:	4b25      	ldr	r3, [pc, #148]	; (800bda4 <print_vpa_1+0xb4>)
 800bd10:	6263      	str	r3, [r4, #36]	; 0x24
	style_txt1.text.color = LV_COLOR_CYAN;
 800bd12:	f894 3020 	ldrb.w	r3, [r4, #32]
 800bd16:	f043 031f 	orr.w	r3, r3, #31
 800bd1a:	f884 3020 	strb.w	r3, [r4, #32]
 800bd1e:	8c23      	ldrh	r3, [r4, #32]
 800bd20:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800bd24:	8423      	strh	r3, [r4, #32]
 800bd26:	0a1b      	lsrs	r3, r3, #8
 800bd28:	f36f 03c7 	bfc	r3, #3, #5
 800bd2c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	txt_vpa = lv_label_create(Tela_Reading_VPA, NULL);
 800bd30:	4b1d      	ldr	r3, [pc, #116]	; (800bda8 <print_vpa_1+0xb8>)
	style_txt1.text.letter_space = 1;
 800bd32:	2601      	movs	r6, #1
	txt_vpa = lv_label_create(Tela_Reading_VPA, NULL);
 800bd34:	6818      	ldr	r0, [r3, #0]
	style_txt1.text.letter_space = 1;
 800bd36:	8526      	strh	r6, [r4, #40]	; 0x28
	txt_vpa = lv_label_create(Tela_Reading_VPA, NULL);
 800bd38:	2100      	movs	r1, #0
	style_txt1.text.line_space = 1;
 800bd3a:	8566      	strh	r6, [r4, #42]	; 0x2a
	txt_vpa = lv_label_create(Tela_Reading_VPA, NULL);
 800bd3c:	f00b fbbe 	bl	80174bc <lv_label_create>
	lv_obj_set_style(txt_vpa, &style_txt1); 						// Configura o estilo criado
 800bd40:	4621      	mov	r1, r4
	txt_vpa = lv_label_create(Tela_Reading_VPA, NULL);
 800bd42:	6028      	str	r0, [r5, #0]
	lv_obj_set_style(txt_vpa, &style_txt1); 						// Configura o estilo criado
 800bd44:	f003 f86a 	bl	800ee1c <lv_obj_set_style>
	lv_label_set_long_mode(txt_vpa, LV_LABEL_LONG_EXPAND); 			// Quebra as linhas longas
 800bd48:	6828      	ldr	r0, [r5, #0]
 800bd4a:	2100      	movs	r1, #0
 800bd4c:	f00b fb60 	bl	8017410 <lv_label_set_long_mode>
	lv_label_set_recolor(txt_vpa, true); 							// Ativa recolorizar por comandos no texto
 800bd50:	4631      	mov	r1, r6
 800bd52:	6828      	ldr	r0, [r5, #0]
 800bd54:	f00b fb9e 	bl	8017494 <lv_label_set_recolor>
	lv_label_set_align(txt_vpa, LV_ALIGN_IN_TOP_RIGHT); 			// Centraliza linhas alinhadas
 800bd58:	6828      	ldr	r0, [r5, #0]
 800bd5a:	2103      	movs	r1, #3
 800bd5c:	f00a fff7 	bl	8016d4e <lv_label_set_align>
	lv_label_set_text(txt_vpa, buffer);
 800bd60:	4639      	mov	r1, r7
 800bd62:	6828      	ldr	r0, [r5, #0]
 800bd64:	f00b fb00 	bl	8017368 <lv_label_set_text>
	lv_obj_set_width(txt_vpa, 300); 								// Configuura o comprimento
 800bd68:	6828      	ldr	r0, [r5, #0]
 800bd6a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800bd6e:	f002 ff9d 	bl	800ecac <lv_obj_set_width>
	lv_obj_align(txt_vpa, NULL, LV_ALIGN_IN_TOP_RIGHT, -70, 34); 	// Alinha ao centro
 800bd72:	2322      	movs	r3, #34	; 0x22
 800bd74:	9300      	str	r3, [sp, #0]
 800bd76:	2203      	movs	r2, #3
 800bd78:	f06f 0345 	mvn.w	r3, #69	; 0x45
 800bd7c:	2100      	movs	r1, #0
 800bd7e:	6828      	ldr	r0, [r5, #0]
 800bd80:	f002 fbaa 	bl	800e4d8 <lv_obj_align>
}
 800bd84:	b003      	add	sp, #12
 800bd86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd88:	c0000000 	.word	0xc0000000
 800bd8c:	402f6db6 	.word	0x402f6db6
 800bd90:	20004cd0 	.word	0x20004cd0
 800bd94:	20005880 	.word	0x20005880
 800bd98:	0802bde4 	.word	0x0802bde4
 800bd9c:	200058fc 	.word	0x200058fc
 800bda0:	2000c424 	.word	0x2000c424
 800bda4:	2000132c 	.word	0x2000132c
 800bda8:	20005758 	.word	0x20005758
 800bdac:	00000000 	.word	0x00000000

0800bdb0 <print_ipa_1>:

void print_ipa_1(uint32_t ipa)
{
 800bdb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	ipa = 2000;
	float resul = (float) ( ipa * (3.30 / 4095.0)) * 0.98;
	sprintf(buffer, "%0.1f", resul);
 800bdb2:	4f27      	ldr	r7, [pc, #156]	; (800be50 <print_ipa_1+0xa0>)

	// Area de VPA
	static lv_style_t style_txt1;
	lv_style_copy(&style_txt1, &lv_style_plain);
 800bdb4:	4c27      	ldr	r4, [pc, #156]	; (800be54 <print_ipa_1+0xa4>)
	sprintf(buffer, "%0.1f", resul);
 800bdb6:	4928      	ldr	r1, [pc, #160]	; (800be58 <print_ipa_1+0xa8>)
	style_txt1.text.letter_space = 1;
	style_txt1.text.line_space = 1;
	style_txt1.text.color = LV_COLOR_CYAN;

	// Cria um novo rotulo
	txt_ipa = lv_label_create(Tela_Reading_VPA, NULL);
 800bdb8:	4d28      	ldr	r5, [pc, #160]	; (800be5c <print_ipa_1+0xac>)
	sprintf(buffer, "%0.1f", resul);
 800bdba:	a323      	add	r3, pc, #140	; (adr r3, 800be48 <print_ipa_1+0x98>)
 800bdbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc0:	4638      	mov	r0, r7
 800bdc2:	f00d fc3f 	bl	8019644 <sprintf>
	lv_style_copy(&style_txt1, &lv_style_plain);
 800bdc6:	4620      	mov	r0, r4
 800bdc8:	4925      	ldr	r1, [pc, #148]	; (800be60 <print_ipa_1+0xb0>)
 800bdca:	f003 fc83 	bl	800f6d4 <lv_style_copy>
	style_txt1.text.font = &lv_font_eurostile_24;
 800bdce:	4b25      	ldr	r3, [pc, #148]	; (800be64 <print_ipa_1+0xb4>)
 800bdd0:	6263      	str	r3, [r4, #36]	; 0x24
	style_txt1.text.color = LV_COLOR_CYAN;
 800bdd2:	f894 3020 	ldrb.w	r3, [r4, #32]
 800bdd6:	f043 031f 	orr.w	r3, r3, #31
 800bdda:	f884 3020 	strb.w	r3, [r4, #32]
 800bdde:	8c23      	ldrh	r3, [r4, #32]
 800bde0:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800bde4:	8423      	strh	r3, [r4, #32]
 800bde6:	0a1b      	lsrs	r3, r3, #8
 800bde8:	f36f 03c7 	bfc	r3, #3, #5
 800bdec:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	txt_ipa = lv_label_create(Tela_Reading_VPA, NULL);
 800bdf0:	4b1d      	ldr	r3, [pc, #116]	; (800be68 <print_ipa_1+0xb8>)
	style_txt1.text.letter_space = 1;
 800bdf2:	2601      	movs	r6, #1
	txt_ipa = lv_label_create(Tela_Reading_VPA, NULL);
 800bdf4:	6818      	ldr	r0, [r3, #0]
	style_txt1.text.letter_space = 1;
 800bdf6:	8526      	strh	r6, [r4, #40]	; 0x28
	txt_ipa = lv_label_create(Tela_Reading_VPA, NULL);
 800bdf8:	2100      	movs	r1, #0
	style_txt1.text.line_space = 1;
 800bdfa:	8566      	strh	r6, [r4, #42]	; 0x2a
	txt_ipa = lv_label_create(Tela_Reading_VPA, NULL);
 800bdfc:	f00b fb5e 	bl	80174bc <lv_label_create>
	lv_obj_set_style(txt_ipa, &style_txt1); 						// Configura o estilo criado
 800be00:	4621      	mov	r1, r4
	txt_ipa = lv_label_create(Tela_Reading_VPA, NULL);
 800be02:	6028      	str	r0, [r5, #0]
	lv_obj_set_style(txt_ipa, &style_txt1); 						// Configura o estilo criado
 800be04:	f003 f80a 	bl	800ee1c <lv_obj_set_style>
	lv_label_set_long_mode(txt_ipa, LV_LABEL_LONG_EXPAND); 			// Quebra as linhas longas
 800be08:	6828      	ldr	r0, [r5, #0]
 800be0a:	2100      	movs	r1, #0
 800be0c:	f00b fb00 	bl	8017410 <lv_label_set_long_mode>
	lv_label_set_recolor(txt_ipa, true); 							// Ativa recolorizar por comandos no texto
 800be10:	4631      	mov	r1, r6
 800be12:	6828      	ldr	r0, [r5, #0]
 800be14:	f00b fb3e 	bl	8017494 <lv_label_set_recolor>
	lv_label_set_align(txt_ipa, LV_ALIGN_IN_TOP_RIGHT); 			// Centraliza linhas alinhadas
 800be18:	6828      	ldr	r0, [r5, #0]
 800be1a:	2103      	movs	r1, #3
 800be1c:	f00a ff97 	bl	8016d4e <lv_label_set_align>
	lv_label_set_text(txt_ipa, buffer);
 800be20:	4639      	mov	r1, r7
 800be22:	6828      	ldr	r0, [r5, #0]
 800be24:	f00b faa0 	bl	8017368 <lv_label_set_text>
	lv_obj_set_width(txt_ipa, 300); 								// Configuura o comprimento
 800be28:	6828      	ldr	r0, [r5, #0]
 800be2a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800be2e:	f002 ff3d 	bl	800ecac <lv_obj_set_width>
	lv_obj_align(txt_ipa, NULL, LV_ALIGN_IN_TOP_RIGHT, -70, 77); 	// Alinha ao centro
 800be32:	234d      	movs	r3, #77	; 0x4d
 800be34:	9300      	str	r3, [sp, #0]
 800be36:	2203      	movs	r2, #3
 800be38:	f06f 0345 	mvn.w	r3, #69	; 0x45
 800be3c:	2100      	movs	r1, #0
 800be3e:	6828      	ldr	r0, [r5, #0]
 800be40:	f002 fb4a 	bl	800e4d8 <lv_obj_align>
}
 800be44:	b003      	add	sp, #12
 800be46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be48:	60000000 	.word	0x60000000
 800be4c:	3ff94594 	.word	0x3ff94594
 800be50:	20004cd0 	.word	0x20004cd0
 800be54:	200058bc 	.word	0x200058bc
 800be58:	0802bde4 	.word	0x0802bde4
 800be5c:	200058f8 	.word	0x200058f8
 800be60:	2000c424 	.word	0x2000c424
 800be64:	2000132c 	.word	0x2000132c
 800be68:	20005758 	.word	0x20005758

0800be6c <create_vumeter_vpa_1>:

void create_vumeter_vpa_1(void)
{
 800be6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	// Area do Barguraph
	// Indicador OFF
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800be6e:	4e30      	ldr	r6, [pc, #192]	; (800bf30 <create_vumeter_vpa_1+0xc4>)
 800be70:	4930      	ldr	r1, [pc, #192]	; (800bf34 <create_vumeter_vpa_1+0xc8>)
	style_indic_bar.body.radius = 0;
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
	style_indic_bar.body.main_color = LV_COLOR_MAKE(105, 105, 105);
	style_indic_bar.body.border.color = LV_COLOR_MAKE(105, 105, 105);

	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800be72:	4c31      	ldr	r4, [pc, #196]	; (800bf38 <create_vumeter_vpa_1+0xcc>)
	style_indic_bar_vd.body.main_color = LV_COLOR_MAKE(0, 255, 0);
	style_indic_bar_vd.body.border.color = LV_COLOR_MAKE(0, 255, 0);

	// Create a default bar
	for(uint8_t x = 0; x < 21; x++) {
		bar_vpa[x] = lv_bar_create(Tela_Reading_VPA, NULL);
 800be74:	4f31      	ldr	r7, [pc, #196]	; (800bf3c <create_vumeter_vpa_1+0xd0>)
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800be76:	4630      	mov	r0, r6
 800be78:	f003 fc2c 	bl	800f6d4 <lv_style_copy>
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800be7c:	4b30      	ldr	r3, [pc, #192]	; (800bf40 <create_vumeter_vpa_1+0xd4>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800be7e:	492d      	ldr	r1, [pc, #180]	; (800bf34 <create_vumeter_vpa_1+0xc8>)
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800be80:	881b      	ldrh	r3, [r3, #0]
 800be82:	80b3      	strh	r3, [r6, #4]
	style_indic_bar.body.radius = 0;
 800be84:	2500      	movs	r5, #0
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800be86:	4620      	mov	r0, r4
	style_indic_bar.body.main_color = LV_COLOR_MAKE(105, 105, 105);
 800be88:	8073      	strh	r3, [r6, #2]
	style_indic_bar.body.border.color = LV_COLOR_MAKE(105, 105, 105);
 800be8a:	8173      	strh	r3, [r6, #10]
	style_indic_bar.body.radius = 0;
 800be8c:	80f5      	strh	r5, [r6, #6]
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800be8e:	f003 fc21 	bl	800f6d4 <lv_style_copy>
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800be92:	7923      	ldrb	r3, [r4, #4]
	style_indic_bar_vd.body.radius = 0;
 800be94:	80e5      	strh	r5, [r4, #6]
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800be96:	f365 0304 	bfi	r3, r5, #0, #5
 800be9a:	7123      	strb	r3, [r4, #4]
 800be9c:	88a3      	ldrh	r3, [r4, #4]
 800be9e:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800bea2:	80a3      	strh	r3, [r4, #4]
 800bea4:	0a1b      	lsrs	r3, r3, #8
 800bea6:	f365 03c7 	bfi	r3, r5, #3, #5
 800beaa:	7163      	strb	r3, [r4, #5]
	style_indic_bar_vd.body.main_color = LV_COLOR_MAKE(0, 255, 0);
 800beac:	78a3      	ldrb	r3, [r4, #2]
 800beae:	f365 0304 	bfi	r3, r5, #0, #5
 800beb2:	70a3      	strb	r3, [r4, #2]
 800beb4:	8863      	ldrh	r3, [r4, #2]
 800beb6:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800beba:	8063      	strh	r3, [r4, #2]
 800bebc:	0a1b      	lsrs	r3, r3, #8
 800bebe:	f365 03c7 	bfi	r3, r5, #3, #5
 800bec2:	70e3      	strb	r3, [r4, #3]
	style_indic_bar_vd.body.border.color = LV_COLOR_MAKE(0, 255, 0);
 800bec4:	7aa3      	ldrb	r3, [r4, #10]
 800bec6:	f365 0304 	bfi	r3, r5, #0, #5
 800beca:	72a3      	strb	r3, [r4, #10]
 800becc:	8963      	ldrh	r3, [r4, #10]
 800bece:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800bed2:	8163      	strh	r3, [r4, #10]
 800bed4:	0a1b      	lsrs	r3, r3, #8
 800bed6:	f365 03c7 	bfi	r3, r5, #3, #5
 800beda:	72e3      	strb	r3, [r4, #11]
 800bedc:	4c19      	ldr	r4, [pc, #100]	; (800bf44 <create_vumeter_vpa_1+0xd8>)
		bar_vpa[x] = lv_bar_create(Tela_Reading_VPA, NULL);
 800bede:	6838      	ldr	r0, [r7, #0]
 800bee0:	2100      	movs	r1, #0
 800bee2:	f008 fcd9 	bl	8014898 <lv_bar_create>
		lv_obj_set_size(bar_vpa[x], 4, 13);
 800bee6:	220d      	movs	r2, #13
		bar_vpa[x] = lv_bar_create(Tela_Reading_VPA, NULL);
 800bee8:	6060      	str	r0, [r4, #4]
		lv_obj_set_size(bar_vpa[x], 4, 13);
 800beea:	2104      	movs	r1, #4
 800beec:	f002 fe94 	bl	800ec18 <lv_obj_set_size>
		lv_bar_set_style(bar_vpa[x], LV_BAR_STYLE_BG, &style_indic_bar);
 800bef0:	6860      	ldr	r0, [r4, #4]
 800bef2:	4632      	mov	r2, r6
 800bef4:	2100      	movs	r1, #0
 800bef6:	f008 fcb9 	bl	801486c <lv_bar_set_style>
		lv_bar_set_style(bar_vpa[x], LV_BAR_STYLE_INDIC, &style_indic_bar);
 800befa:	6860      	ldr	r0, [r4, #4]
 800befc:	4632      	mov	r2, r6
 800befe:	2101      	movs	r1, #1
 800bf00:	f008 fcb4 	bl	801486c <lv_bar_set_style>
		lv_obj_align(bar_vpa[x], NULL, LV_ALIGN_IN_TOP_LEFT, vpa_pos_x[x], 57);
 800bf04:	2239      	movs	r2, #57	; 0x39
 800bf06:	4b10      	ldr	r3, [pc, #64]	; (800bf48 <create_vumeter_vpa_1+0xdc>)
 800bf08:	9200      	str	r2, [sp, #0]
 800bf0a:	f933 3025 	ldrsh.w	r3, [r3, r5, lsl #2]
 800bf0e:	6860      	ldr	r0, [r4, #4]
 800bf10:	2201      	movs	r2, #1
 800bf12:	2100      	movs	r1, #0
 800bf14:	f002 fae0 	bl	800e4d8 <lv_obj_align>
 800bf18:	3501      	adds	r5, #1
		lv_bar_set_value(bar_vpa[x], 100, 0);
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	2164      	movs	r1, #100	; 0x64
 800bf1e:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800bf22:	f008 fc47 	bl	80147b4 <lv_bar_set_value>
	for(uint8_t x = 0; x < 21; x++) {
 800bf26:	2d15      	cmp	r5, #21
 800bf28:	d1d9      	bne.n	800bede <create_vumeter_vpa_1+0x72>
	}
}
 800bf2a:	b003      	add	sp, #12
 800bf2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf2e:	bf00      	nop
 800bf30:	20005808 	.word	0x20005808
 800bf34:	2000c334 	.word	0x2000c334
 800bf38:	20005844 	.word	0x20005844
 800bf3c:	20005758 	.word	0x20005758
 800bf40:	0801cb1a 	.word	0x0801cb1a
 800bf44:	200057ac 	.word	0x200057ac
 800bf48:	0802bed8 	.word	0x0802bed8

0800bf4c <create_vumeter_ipa_1>:

void create_vumeter_ipa_1(void)
{
 800bf4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	// Area do Barguraph
	// Indicador OFF
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800bf4e:	4e30      	ldr	r6, [pc, #192]	; (800c010 <create_vumeter_ipa_1+0xc4>)
 800bf50:	4930      	ldr	r1, [pc, #192]	; (800c014 <create_vumeter_ipa_1+0xc8>)
	style_indic_bar.body.radius = 0;
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
	style_indic_bar.body.main_color = LV_COLOR_MAKE(105, 105, 105);
	style_indic_bar.body.border.color = LV_COLOR_MAKE(105, 105, 105);

	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800bf52:	4c31      	ldr	r4, [pc, #196]	; (800c018 <create_vumeter_ipa_1+0xcc>)
	style_indic_bar_vd.body.main_color = LV_COLOR_MAKE(0, 255, 0);
	style_indic_bar_vd.body.border.color = LV_COLOR_MAKE(0, 255, 0);

	// Create a default bar
	for(uint8_t x = 0; x < 21; x++) {
		bar_ipa[x] = lv_bar_create(Tela_Reading_VPA, NULL);
 800bf54:	4f31      	ldr	r7, [pc, #196]	; (800c01c <create_vumeter_ipa_1+0xd0>)
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800bf56:	4630      	mov	r0, r6
 800bf58:	f003 fbbc 	bl	800f6d4 <lv_style_copy>
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800bf5c:	4b30      	ldr	r3, [pc, #192]	; (800c020 <create_vumeter_ipa_1+0xd4>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800bf5e:	492d      	ldr	r1, [pc, #180]	; (800c014 <create_vumeter_ipa_1+0xc8>)
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800bf60:	881b      	ldrh	r3, [r3, #0]
 800bf62:	80b3      	strh	r3, [r6, #4]
	style_indic_bar.body.radius = 0;
 800bf64:	2500      	movs	r5, #0
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800bf66:	4620      	mov	r0, r4
	style_indic_bar.body.main_color = LV_COLOR_MAKE(105, 105, 105);
 800bf68:	8073      	strh	r3, [r6, #2]
	style_indic_bar.body.border.color = LV_COLOR_MAKE(105, 105, 105);
 800bf6a:	8173      	strh	r3, [r6, #10]
	style_indic_bar.body.radius = 0;
 800bf6c:	80f5      	strh	r5, [r6, #6]
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800bf6e:	f003 fbb1 	bl	800f6d4 <lv_style_copy>
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800bf72:	7923      	ldrb	r3, [r4, #4]
	style_indic_bar_vd.body.radius = 0;
 800bf74:	80e5      	strh	r5, [r4, #6]
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800bf76:	f365 0304 	bfi	r3, r5, #0, #5
 800bf7a:	7123      	strb	r3, [r4, #4]
 800bf7c:	88a3      	ldrh	r3, [r4, #4]
 800bf7e:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800bf82:	80a3      	strh	r3, [r4, #4]
 800bf84:	0a1b      	lsrs	r3, r3, #8
 800bf86:	f365 03c7 	bfi	r3, r5, #3, #5
 800bf8a:	7163      	strb	r3, [r4, #5]
	style_indic_bar_vd.body.main_color = LV_COLOR_MAKE(0, 255, 0);
 800bf8c:	78a3      	ldrb	r3, [r4, #2]
 800bf8e:	f365 0304 	bfi	r3, r5, #0, #5
 800bf92:	70a3      	strb	r3, [r4, #2]
 800bf94:	8863      	ldrh	r3, [r4, #2]
 800bf96:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800bf9a:	8063      	strh	r3, [r4, #2]
 800bf9c:	0a1b      	lsrs	r3, r3, #8
 800bf9e:	f365 03c7 	bfi	r3, r5, #3, #5
 800bfa2:	70e3      	strb	r3, [r4, #3]
	style_indic_bar_vd.body.border.color = LV_COLOR_MAKE(0, 255, 0);
 800bfa4:	7aa3      	ldrb	r3, [r4, #10]
 800bfa6:	f365 0304 	bfi	r3, r5, #0, #5
 800bfaa:	72a3      	strb	r3, [r4, #10]
 800bfac:	8963      	ldrh	r3, [r4, #10]
 800bfae:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800bfb2:	8163      	strh	r3, [r4, #10]
 800bfb4:	0a1b      	lsrs	r3, r3, #8
 800bfb6:	f365 03c7 	bfi	r3, r5, #3, #5
 800bfba:	72e3      	strb	r3, [r4, #11]
 800bfbc:	4c19      	ldr	r4, [pc, #100]	; (800c024 <create_vumeter_ipa_1+0xd8>)
		bar_ipa[x] = lv_bar_create(Tela_Reading_VPA, NULL);
 800bfbe:	6838      	ldr	r0, [r7, #0]
 800bfc0:	2100      	movs	r1, #0
 800bfc2:	f008 fc69 	bl	8014898 <lv_bar_create>
		lv_obj_set_size(bar_ipa[x], 4, 13);
 800bfc6:	220d      	movs	r2, #13
		bar_ipa[x] = lv_bar_create(Tela_Reading_VPA, NULL);
 800bfc8:	6060      	str	r0, [r4, #4]
		lv_obj_set_size(bar_ipa[x], 4, 13);
 800bfca:	2104      	movs	r1, #4
 800bfcc:	f002 fe24 	bl	800ec18 <lv_obj_set_size>
		lv_bar_set_style(bar_ipa[x], LV_BAR_STYLE_BG, &style_indic_bar);
 800bfd0:	6860      	ldr	r0, [r4, #4]
 800bfd2:	4632      	mov	r2, r6
 800bfd4:	2100      	movs	r1, #0
 800bfd6:	f008 fc49 	bl	801486c <lv_bar_set_style>
		lv_bar_set_style(bar_ipa[x], LV_BAR_STYLE_INDIC, &style_indic_bar);
 800bfda:	6860      	ldr	r0, [r4, #4]
 800bfdc:	4632      	mov	r2, r6
 800bfde:	2101      	movs	r1, #1
 800bfe0:	f008 fc44 	bl	801486c <lv_bar_set_style>
		lv_obj_align(bar_ipa[x], NULL, LV_ALIGN_IN_TOP_LEFT, ipa_pos_x[x], 99);
 800bfe4:	2263      	movs	r2, #99	; 0x63
 800bfe6:	4b10      	ldr	r3, [pc, #64]	; (800c028 <create_vumeter_ipa_1+0xdc>)
 800bfe8:	9200      	str	r2, [sp, #0]
 800bfea:	f933 3025 	ldrsh.w	r3, [r3, r5, lsl #2]
 800bfee:	6860      	ldr	r0, [r4, #4]
 800bff0:	2201      	movs	r2, #1
 800bff2:	2100      	movs	r1, #0
 800bff4:	f002 fa70 	bl	800e4d8 <lv_obj_align>
 800bff8:	3501      	adds	r5, #1
		lv_bar_set_value(bar_ipa[x], 100, 0);
 800bffa:	2200      	movs	r2, #0
 800bffc:	2164      	movs	r1, #100	; 0x64
 800bffe:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800c002:	f008 fbd7 	bl	80147b4 <lv_bar_set_value>
	for(uint8_t x = 0; x < 21; x++) {
 800c006:	2d15      	cmp	r5, #21
 800c008:	d1d9      	bne.n	800bfbe <create_vumeter_ipa_1+0x72>
	}
}
 800c00a:	b003      	add	sp, #12
 800c00c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c00e:	bf00      	nop
 800c010:	20005808 	.word	0x20005808
 800c014:	2000c334 	.word	0x2000c334
 800c018:	20005844 	.word	0x20005844
 800c01c:	20005758 	.word	0x20005758
 800c020:	0801cb1a 	.word	0x0801cb1a
 800c024:	20005758 	.word	0x20005758
 800c028:	0802be84 	.word	0x0802be84

0800c02c <update_vumeter_vpa_1>:

void update_vumeter_vpa_1(uint32_t value)
{
 800c02c:	b570      	push	{r4, r5, r6, lr}
	uint32_t x;
	value = 3900;
	float resul = (float) ( (value * (3.30 / 4095.0)) * 5) / 0.75;

	for(x = 0; x <= resul; x++) {
		lv_bar_set_style(bar_vpa[x], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800c02e:	4d0a      	ldr	r5, [pc, #40]	; (800c058 <update_vumeter_vpa_1+0x2c>)
 800c030:	4e0a      	ldr	r6, [pc, #40]	; (800c05c <update_vumeter_vpa_1+0x30>)
	for(x = 0; x <= resul; x++) {
 800c032:	2400      	movs	r4, #0
 800c034:	2c15      	cmp	r4, #21
 800c036:	d100      	bne.n	800c03a <update_vumeter_vpa_1+0xe>
		lv_bar_set_style(bar_vpa[x], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
	}
}
 800c038:	bd70      	pop	{r4, r5, r6, pc}
		lv_bar_set_style(bar_vpa[x], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800c03a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800c03e:	4632      	mov	r2, r6
 800c040:	2100      	movs	r1, #0
 800c042:	f008 fc13 	bl	801486c <lv_bar_set_style>
		lv_bar_set_style(bar_vpa[x], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
 800c046:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800c04a:	4632      	mov	r2, r6
 800c04c:	2101      	movs	r1, #1
 800c04e:	f008 fc0d 	bl	801486c <lv_bar_set_style>
	for(x = 0; x <= resul; x++) {
 800c052:	3401      	adds	r4, #1
 800c054:	e7ee      	b.n	800c034 <update_vumeter_vpa_1+0x8>
 800c056:	bf00      	nop
 800c058:	200057b0 	.word	0x200057b0
 800c05c:	20005844 	.word	0x20005844

0800c060 <update_vumeter_ipa_1>:

void update_vumeter_ipa_1(uint32_t value)
{
 800c060:	b570      	push	{r4, r5, r6, lr}
	uint32_t x;
	value = 2000;
	float resul = (float) (( value * (3.30 / 4095.0)) * 0.98) / 0.10;

	for(x = 0; x <= resul; x++) {
		lv_bar_set_style(bar_ipa[x], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800c062:	4d0a      	ldr	r5, [pc, #40]	; (800c08c <update_vumeter_ipa_1+0x2c>)
 800c064:	4e0a      	ldr	r6, [pc, #40]	; (800c090 <update_vumeter_ipa_1+0x30>)
	for(x = 0; x <= resul; x++) {
 800c066:	2400      	movs	r4, #0
 800c068:	2c10      	cmp	r4, #16
 800c06a:	d100      	bne.n	800c06e <update_vumeter_ipa_1+0xe>
		lv_bar_set_style(bar_ipa[x], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
	}
}
 800c06c:	bd70      	pop	{r4, r5, r6, pc}
		lv_bar_set_style(bar_ipa[x], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800c06e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800c072:	4632      	mov	r2, r6
 800c074:	2100      	movs	r1, #0
 800c076:	f008 fbf9 	bl	801486c <lv_bar_set_style>
		lv_bar_set_style(bar_ipa[x], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
 800c07a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800c07e:	4632      	mov	r2, r6
 800c080:	2101      	movs	r1, #1
 800c082:	f008 fbf3 	bl	801486c <lv_bar_set_style>
	for(x = 0; x <= resul; x++) {
 800c086:	3401      	adds	r4, #1
 800c088:	e7ee      	b.n	800c068 <update_vumeter_ipa_1+0x8>
 800c08a:	bf00      	nop
 800c08c:	2000575c 	.word	0x2000575c
 800c090:	20005844 	.word	0x20005844

0800c094 <screen_reading_vpa>:
	Tela_Reading_VPA = lv_obj_create(NULL, NULL);
 800c094:	2100      	movs	r1, #0
{
 800c096:	b538      	push	{r3, r4, r5, lr}
	Tela_Reading_VPA = lv_obj_create(NULL, NULL);
 800c098:	4608      	mov	r0, r1
 800c09a:	f002 fc3f 	bl	800e91c <lv_obj_create>
 800c09e:	4c1b      	ldr	r4, [pc, #108]	; (800c10c <screen_reading_vpa+0x78>)
	img_fundo = lv_img_create(Tela_Reading_VPA, NULL);
 800c0a0:	4d1b      	ldr	r5, [pc, #108]	; (800c110 <screen_reading_vpa+0x7c>)
	Tela_Reading_VPA = lv_obj_create(NULL, NULL);
 800c0a2:	6020      	str	r0, [r4, #0]
	img_fundo = lv_img_create(Tela_Reading_VPA, NULL);
 800c0a4:	2100      	movs	r1, #0
 800c0a6:	f00a fb3b 	bl	8016720 <lv_img_create>
	lv_img_set_src(img_fundo, &tela_reading_vpa);
 800c0aa:	491a      	ldr	r1, [pc, #104]	; (800c114 <screen_reading_vpa+0x80>)
	img_fundo = lv_img_create(Tela_Reading_VPA, NULL);
 800c0ac:	6028      	str	r0, [r5, #0]
	lv_img_set_src(img_fundo, &tela_reading_vpa);
 800c0ae:	f00a faa7 	bl	8016600 <lv_img_set_src>
	lv_obj_set_protect(img_fundo, LV_PROTECT_POS);
 800c0b2:	2104      	movs	r1, #4
 800c0b4:	6828      	ldr	r0, [r5, #0]
 800c0b6:	f002 f863 	bl	800e180 <lv_obj_set_protect>
	btn_next_vpa();
 800c0ba:	f7ff fdb5 	bl	800bc28 <btn_next_vpa>
	btn_prev_vpa();
 800c0be:	f7ff fde5 	bl	800bc8c <btn_prev_vpa>
	create_vumeter_vpa_1();
 800c0c2:	f7ff fed3 	bl	800be6c <create_vumeter_vpa_1>
	create_vumeter_ipa_1();
 800c0c6:	f7ff ff41 	bl	800bf4c <create_vumeter_ipa_1>
	print_vpa_1(2000);
 800c0ca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c0ce:	f7ff fe0f 	bl	800bcf0 <print_vpa_1>
	print_ipa_1(2000);
 800c0d2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c0d6:	f7ff fe6b 	bl	800bdb0 <print_ipa_1>
	update_vumeter_vpa_1(2000);
 800c0da:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c0de:	f7ff ffa5 	bl	800c02c <update_vumeter_vpa_1>
	update_vumeter_ipa_1(2000);
 800c0e2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c0e6:	f7ff ffbb 	bl	800c060 <update_vumeter_ipa_1>
 800c0ea:	6820      	ldr	r0, [r4, #0]
 800c0ec:	f001 fe02 	bl	800dcf4 <lv_disp_load_scr>
    Task_Reading_VPA = lv_task_create(update_screen_vpa, 500, LV_TASK_PRIO_MID, NULL);
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	2203      	movs	r2, #3
 800c0f4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800c0f8:	4807      	ldr	r0, [pc, #28]	; (800c118 <screen_reading_vpa+0x84>)
 800c0fa:	f008 f8b7 	bl	801426c <lv_task_create>
 800c0fe:	4b07      	ldr	r3, [pc, #28]	; (800c11c <screen_reading_vpa+0x88>)
 800c100:	6018      	str	r0, [r3, #0]
    TelaAtiva = TelaReading_Vpa;
 800c102:	4b07      	ldr	r3, [pc, #28]	; (800c120 <screen_reading_vpa+0x8c>)
 800c104:	220c      	movs	r2, #12
 800c106:	601a      	str	r2, [r3, #0]
 800c108:	bd38      	pop	{r3, r4, r5, pc}
 800c10a:	bf00      	nop
 800c10c:	20005758 	.word	0x20005758
 800c110:	20005804 	.word	0x20005804
 800c114:	20001bec 	.word	0x20001bec
 800c118:	0800c129 	.word	0x0800c129
 800c11c:	20005754 	.word	0x20005754
 800c120:	200033cc 	.word	0x200033cc
 800c124:	00000000 	.word	0x00000000

0800c128 <update_screen_vpa>:

static void update_screen_vpa(lv_task_t * param)
{
 800c128:	b538      	push	{r3, r4, r5, lr}
	uint32_t vpa = 3900;
	float resul = (float) ( vpa * (3.30 / 4095.0)) * 5;
	sprintf(buffer, "%0.1f", resul);
 800c12a:	4c17      	ldr	r4, [pc, #92]	; (800c188 <update_screen_vpa+0x60>)
 800c12c:	4d17      	ldr	r5, [pc, #92]	; (800c18c <update_screen_vpa+0x64>)
 800c12e:	a312      	add	r3, pc, #72	; (adr r3, 800c178 <update_screen_vpa+0x50>)
 800c130:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c134:	4629      	mov	r1, r5
 800c136:	4620      	mov	r0, r4
 800c138:	f00d fa84 	bl	8019644 <sprintf>
	lv_label_set_text(txt_vpa, buffer);
 800c13c:	4b14      	ldr	r3, [pc, #80]	; (800c190 <update_screen_vpa+0x68>)
 800c13e:	4621      	mov	r1, r4
 800c140:	6818      	ldr	r0, [r3, #0]
 800c142:	f00b f911 	bl	8017368 <lv_label_set_text>
	update_vumeter_vpa_1(vpa);
 800c146:	f640 703c 	movw	r0, #3900	; 0xf3c
 800c14a:	f7ff ff6f 	bl	800c02c <update_vumeter_vpa_1>

	uint32_t ipa = 2000;
	resul = (float) ( ipa * (3.30 / 4095.0)) * 0.98;
	sprintf(buffer, "%0.1f", resul);
 800c14e:	a30c      	add	r3, pc, #48	; (adr r3, 800c180 <update_screen_vpa+0x58>)
 800c150:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c154:	4629      	mov	r1, r5
 800c156:	4620      	mov	r0, r4
 800c158:	f00d fa74 	bl	8019644 <sprintf>
	lv_label_set_text(txt_ipa, buffer);
 800c15c:	4b0d      	ldr	r3, [pc, #52]	; (800c194 <update_screen_vpa+0x6c>)
 800c15e:	4621      	mov	r1, r4
 800c160:	6818      	ldr	r0, [r3, #0]
 800c162:	f00b f901 	bl	8017368 <lv_label_set_text>
	update_vumeter_ipa_1(ipa);
 800c166:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
}
 800c16a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	update_vumeter_ipa_1(ipa);
 800c16e:	f7ff bf77 	b.w	800c060 <update_vumeter_ipa_1>
 800c172:	bf00      	nop
 800c174:	f3af 8000 	nop.w
 800c178:	c0000000 	.word	0xc0000000
 800c17c:	402f6db6 	.word	0x402f6db6
 800c180:	60000000 	.word	0x60000000
 800c184:	3ff94594 	.word	0x3ff94594
 800c188:	20004cd0 	.word	0x20004cd0
 800c18c:	0802bde4 	.word	0x0802bde4
 800c190:	200058fc 	.word	0x200058fc
 800c194:	200058f8 	.word	0x200058f8

0800c198 <btn_event_esc_r>:
	lv_obj_set_click(imgbtn2, 1);
}

static void btn_event_esc_r(lv_obj_t * btn, lv_event_t event)
{
	if(event == LV_EVENT_RELEASED) {
 800c198:	2907      	cmp	r1, #7
{
 800c19a:	b508      	push	{r3, lr}
	if(event == LV_EVENT_RELEASED) {
 800c19c:	d10e      	bne.n	800c1bc <btn_event_esc_r+0x24>
		printf("Button ESC Released\n");
 800c19e:	4808      	ldr	r0, [pc, #32]	; (800c1c0 <btn_event_esc_r+0x28>)
 800c1a0:	f00d fa38 	bl	8019614 <puts>
		lv_task_del(Task_Readings);
 800c1a4:	4b07      	ldr	r3, [pc, #28]	; (800c1c4 <btn_event_esc_r+0x2c>)
 800c1a6:	6818      	ldr	r0, [r3, #0]
 800c1a8:	f007 ff70 	bl	801408c <lv_task_del>
		lv_obj_del(Tela_Readings);
 800c1ac:	4b06      	ldr	r3, [pc, #24]	; (800c1c8 <btn_event_esc_r+0x30>)
 800c1ae:	6818      	ldr	r0, [r3, #0]
 800c1b0:	f002 fda5 	bl	800ecfe <lv_obj_del>
		screen_sel();
	}
}
 800c1b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_sel();
 800c1b8:	f001 ba80 	b.w	800d6bc <screen_sel>
 800c1bc:	bd08      	pop	{r3, pc}
 800c1be:	bf00      	nop
 800c1c0:	0802bc1a 	.word	0x0802bc1a
 800c1c4:	20005900 	.word	0x20005900
 800c1c8:	20005904 	.word	0x20005904

0800c1cc <btn_event_next_r>:
	if(event == LV_EVENT_RELEASED) {
 800c1cc:	2907      	cmp	r1, #7
{
 800c1ce:	b508      	push	{r3, lr}
	if(event == LV_EVENT_RELEASED) {
 800c1d0:	d10e      	bne.n	800c1f0 <btn_event_next_r+0x24>
		printf("Button Next Released SCREEN_READING_MPX\n");
 800c1d2:	4808      	ldr	r0, [pc, #32]	; (800c1f4 <btn_event_next_r+0x28>)
 800c1d4:	f00d fa1e 	bl	8019614 <puts>
        lv_task_del(Task_Readings);
 800c1d8:	4b07      	ldr	r3, [pc, #28]	; (800c1f8 <btn_event_next_r+0x2c>)
 800c1da:	6818      	ldr	r0, [r3, #0]
 800c1dc:	f007 ff56 	bl	801408c <lv_task_del>
		lv_obj_del(Tela_Readings);
 800c1e0:	4b06      	ldr	r3, [pc, #24]	; (800c1fc <btn_event_next_r+0x30>)
 800c1e2:	6818      	ldr	r0, [r3, #0]
 800c1e4:	f002 fd8b 	bl	800ecfe <lv_obj_del>
}
 800c1e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_reading_mpx();
 800c1ec:	f7fe bf1c 	b.w	800b028 <screen_reading_mpx>
 800c1f0:	bd08      	pop	{r3, pc}
 800c1f2:	bf00      	nop
 800c1f4:	0802bf2c 	.word	0x0802bf2c
 800c1f8:	20005900 	.word	0x20005900
 800c1fc:	20005904 	.word	0x20005904

0800c200 <create_vumeter_swr_1>:
{
 800c200:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800c202:	4e30      	ldr	r6, [pc, #192]	; (800c2c4 <create_vumeter_swr_1+0xc4>)
 800c204:	4930      	ldr	r1, [pc, #192]	; (800c2c8 <create_vumeter_swr_1+0xc8>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800c206:	4c31      	ldr	r4, [pc, #196]	; (800c2cc <create_vumeter_swr_1+0xcc>)
		bar_swr[x] = lv_bar_create(Tela_Readings, NULL);
 800c208:	4f31      	ldr	r7, [pc, #196]	; (800c2d0 <create_vumeter_swr_1+0xd0>)
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800c20a:	4630      	mov	r0, r6
 800c20c:	f003 fa62 	bl	800f6d4 <lv_style_copy>
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800c210:	4b30      	ldr	r3, [pc, #192]	; (800c2d4 <create_vumeter_swr_1+0xd4>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800c212:	492d      	ldr	r1, [pc, #180]	; (800c2c8 <create_vumeter_swr_1+0xc8>)
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800c214:	881b      	ldrh	r3, [r3, #0]
 800c216:	80b3      	strh	r3, [r6, #4]
	style_indic_bar.body.radius = 0;
 800c218:	2500      	movs	r5, #0
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800c21a:	4620      	mov	r0, r4
	style_indic_bar.body.main_color = LV_COLOR_MAKE(105, 105, 105);
 800c21c:	8073      	strh	r3, [r6, #2]
	style_indic_bar.body.border.color = LV_COLOR_MAKE(105, 105, 105);
 800c21e:	8173      	strh	r3, [r6, #10]
	style_indic_bar.body.radius = 0;
 800c220:	80f5      	strh	r5, [r6, #6]
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800c222:	f003 fa57 	bl	800f6d4 <lv_style_copy>
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800c226:	7923      	ldrb	r3, [r4, #4]
	style_indic_bar_vd.body.radius = 0;
 800c228:	80e5      	strh	r5, [r4, #6]
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800c22a:	f365 0304 	bfi	r3, r5, #0, #5
 800c22e:	7123      	strb	r3, [r4, #4]
 800c230:	88a3      	ldrh	r3, [r4, #4]
 800c232:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800c236:	80a3      	strh	r3, [r4, #4]
 800c238:	0a1b      	lsrs	r3, r3, #8
 800c23a:	f365 03c7 	bfi	r3, r5, #3, #5
 800c23e:	7163      	strb	r3, [r4, #5]
	style_indic_bar_vd.body.main_color = LV_COLOR_MAKE(0, 255, 0);
 800c240:	78a3      	ldrb	r3, [r4, #2]
 800c242:	f365 0304 	bfi	r3, r5, #0, #5
 800c246:	70a3      	strb	r3, [r4, #2]
 800c248:	8863      	ldrh	r3, [r4, #2]
 800c24a:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800c24e:	8063      	strh	r3, [r4, #2]
 800c250:	0a1b      	lsrs	r3, r3, #8
 800c252:	f365 03c7 	bfi	r3, r5, #3, #5
 800c256:	70e3      	strb	r3, [r4, #3]
	style_indic_bar_vd.body.border.color = LV_COLOR_MAKE(0, 255, 0);
 800c258:	7aa3      	ldrb	r3, [r4, #10]
 800c25a:	f365 0304 	bfi	r3, r5, #0, #5
 800c25e:	72a3      	strb	r3, [r4, #10]
 800c260:	8963      	ldrh	r3, [r4, #10]
 800c262:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800c266:	8163      	strh	r3, [r4, #10]
 800c268:	0a1b      	lsrs	r3, r3, #8
 800c26a:	f365 03c7 	bfi	r3, r5, #3, #5
 800c26e:	72e3      	strb	r3, [r4, #11]
 800c270:	4c19      	ldr	r4, [pc, #100]	; (800c2d8 <create_vumeter_swr_1+0xd8>)
		bar_swr[x] = lv_bar_create(Tela_Readings, NULL);
 800c272:	6838      	ldr	r0, [r7, #0]
 800c274:	2100      	movs	r1, #0
 800c276:	f008 fb0f 	bl	8014898 <lv_bar_create>
		lv_obj_set_size(bar_swr[x], 4, 14);
 800c27a:	220e      	movs	r2, #14
		bar_swr[x] = lv_bar_create(Tela_Readings, NULL);
 800c27c:	6060      	str	r0, [r4, #4]
		lv_obj_set_size(bar_swr[x], 4, 14);
 800c27e:	2104      	movs	r1, #4
 800c280:	f002 fcca 	bl	800ec18 <lv_obj_set_size>
		lv_bar_set_style(bar_swr[x], LV_BAR_STYLE_BG, &style_indic_bar);
 800c284:	6860      	ldr	r0, [r4, #4]
 800c286:	4632      	mov	r2, r6
 800c288:	2100      	movs	r1, #0
 800c28a:	f008 faef 	bl	801486c <lv_bar_set_style>
		lv_bar_set_style(bar_swr[x], LV_BAR_STYLE_INDIC, &style_indic_bar);
 800c28e:	6860      	ldr	r0, [r4, #4]
 800c290:	4632      	mov	r2, r6
 800c292:	2101      	movs	r1, #1
 800c294:	f008 faea 	bl	801486c <lv_bar_set_style>
		lv_obj_align(bar_swr[x], NULL, LV_ALIGN_IN_TOP_LEFT, swr1_pos_x[x], 99);
 800c298:	2263      	movs	r2, #99	; 0x63
 800c29a:	4b10      	ldr	r3, [pc, #64]	; (800c2dc <create_vumeter_swr_1+0xdc>)
 800c29c:	9200      	str	r2, [sp, #0]
 800c29e:	f933 3025 	ldrsh.w	r3, [r3, r5, lsl #2]
 800c2a2:	6860      	ldr	r0, [r4, #4]
 800c2a4:	2201      	movs	r2, #1
 800c2a6:	2100      	movs	r1, #0
 800c2a8:	f002 f916 	bl	800e4d8 <lv_obj_align>
 800c2ac:	3501      	adds	r5, #1
		lv_bar_set_value(bar_swr[x], 100, 0);
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	2164      	movs	r1, #100	; 0x64
 800c2b2:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800c2b6:	f008 fa7d 	bl	80147b4 <lv_bar_set_value>
	for(uint8_t x = 0; x < 21; x++) {
 800c2ba:	2d15      	cmp	r5, #21
 800c2bc:	d1d9      	bne.n	800c272 <create_vumeter_swr_1+0x72>
}
 800c2be:	b003      	add	sp, #12
 800c2c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2c2:	bf00      	nop
 800c2c4:	200059b4 	.word	0x200059b4
 800c2c8:	2000c334 	.word	0x2000c334
 800c2cc:	200059f0 	.word	0x200059f0
 800c2d0:	20005904 	.word	0x20005904
 800c2d4:	0801cb1c 	.word	0x0801cb1c
 800c2d8:	20005958 	.word	0x20005958
 800c2dc:	0802bfa8 	.word	0x0802bfa8

0800c2e0 <create_vumeter_fwd_1>:
{
 800c2e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800c2e2:	4e30      	ldr	r6, [pc, #192]	; (800c3a4 <create_vumeter_fwd_1+0xc4>)
 800c2e4:	4930      	ldr	r1, [pc, #192]	; (800c3a8 <create_vumeter_fwd_1+0xc8>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800c2e6:	4c31      	ldr	r4, [pc, #196]	; (800c3ac <create_vumeter_fwd_1+0xcc>)
		bar_fwd[x] = lv_bar_create(Tela_Readings, NULL);
 800c2e8:	4f31      	ldr	r7, [pc, #196]	; (800c3b0 <create_vumeter_fwd_1+0xd0>)
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800c2ea:	4630      	mov	r0, r6
 800c2ec:	f003 f9f2 	bl	800f6d4 <lv_style_copy>
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800c2f0:	4b30      	ldr	r3, [pc, #192]	; (800c3b4 <create_vumeter_fwd_1+0xd4>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800c2f2:	492d      	ldr	r1, [pc, #180]	; (800c3a8 <create_vumeter_fwd_1+0xc8>)
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800c2f4:	881b      	ldrh	r3, [r3, #0]
 800c2f6:	80b3      	strh	r3, [r6, #4]
	style_indic_bar.body.radius = 0;
 800c2f8:	2500      	movs	r5, #0
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800c2fa:	4620      	mov	r0, r4
	style_indic_bar.body.main_color = LV_COLOR_MAKE(105, 105, 105);
 800c2fc:	8073      	strh	r3, [r6, #2]
	style_indic_bar.body.border.color = LV_COLOR_MAKE(105, 105, 105);
 800c2fe:	8173      	strh	r3, [r6, #10]
	style_indic_bar.body.radius = 0;
 800c300:	80f5      	strh	r5, [r6, #6]
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800c302:	f003 f9e7 	bl	800f6d4 <lv_style_copy>
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800c306:	7923      	ldrb	r3, [r4, #4]
	style_indic_bar_vd.body.radius = 0;
 800c308:	80e5      	strh	r5, [r4, #6]
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800c30a:	f365 0304 	bfi	r3, r5, #0, #5
 800c30e:	7123      	strb	r3, [r4, #4]
 800c310:	88a3      	ldrh	r3, [r4, #4]
 800c312:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800c316:	80a3      	strh	r3, [r4, #4]
 800c318:	0a1b      	lsrs	r3, r3, #8
 800c31a:	f365 03c7 	bfi	r3, r5, #3, #5
 800c31e:	7163      	strb	r3, [r4, #5]
	style_indic_bar_vd.body.main_color = LV_COLOR_MAKE(0, 255, 0);
 800c320:	78a3      	ldrb	r3, [r4, #2]
 800c322:	f365 0304 	bfi	r3, r5, #0, #5
 800c326:	70a3      	strb	r3, [r4, #2]
 800c328:	8863      	ldrh	r3, [r4, #2]
 800c32a:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800c32e:	8063      	strh	r3, [r4, #2]
 800c330:	0a1b      	lsrs	r3, r3, #8
 800c332:	f365 03c7 	bfi	r3, r5, #3, #5
 800c336:	70e3      	strb	r3, [r4, #3]
	style_indic_bar_vd.body.border.color = LV_COLOR_MAKE(0, 255, 0);
 800c338:	7aa3      	ldrb	r3, [r4, #10]
 800c33a:	f365 0304 	bfi	r3, r5, #0, #5
 800c33e:	72a3      	strb	r3, [r4, #10]
 800c340:	8963      	ldrh	r3, [r4, #10]
 800c342:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800c346:	8163      	strh	r3, [r4, #10]
 800c348:	0a1b      	lsrs	r3, r3, #8
 800c34a:	f365 03c7 	bfi	r3, r5, #3, #5
 800c34e:	72e3      	strb	r3, [r4, #11]
 800c350:	4c19      	ldr	r4, [pc, #100]	; (800c3b8 <create_vumeter_fwd_1+0xd8>)
		bar_fwd[x] = lv_bar_create(Tela_Readings, NULL);
 800c352:	6838      	ldr	r0, [r7, #0]
 800c354:	2100      	movs	r1, #0
 800c356:	f008 fa9f 	bl	8014898 <lv_bar_create>
		lv_obj_set_size(bar_fwd[x], 4, 14);
 800c35a:	220e      	movs	r2, #14
		bar_fwd[x] = lv_bar_create(Tela_Readings, NULL);
 800c35c:	6060      	str	r0, [r4, #4]
		lv_obj_set_size(bar_fwd[x], 4, 14);
 800c35e:	2104      	movs	r1, #4
 800c360:	f002 fc5a 	bl	800ec18 <lv_obj_set_size>
		lv_bar_set_style(bar_fwd[x], LV_BAR_STYLE_BG, &style_indic_bar);
 800c364:	6860      	ldr	r0, [r4, #4]
 800c366:	4632      	mov	r2, r6
 800c368:	2100      	movs	r1, #0
 800c36a:	f008 fa7f 	bl	801486c <lv_bar_set_style>
		lv_bar_set_style(bar_fwd[x], LV_BAR_STYLE_INDIC, &style_indic_bar);
 800c36e:	6860      	ldr	r0, [r4, #4]
 800c370:	4632      	mov	r2, r6
 800c372:	2101      	movs	r1, #1
 800c374:	f008 fa7a 	bl	801486c <lv_bar_set_style>
		lv_obj_align(bar_fwd[x], NULL, LV_ALIGN_IN_TOP_LEFT, fwd1_pos_x[x], 56);
 800c378:	2238      	movs	r2, #56	; 0x38
 800c37a:	4b10      	ldr	r3, [pc, #64]	; (800c3bc <create_vumeter_fwd_1+0xdc>)
 800c37c:	9200      	str	r2, [sp, #0]
 800c37e:	f933 3025 	ldrsh.w	r3, [r3, r5, lsl #2]
 800c382:	6860      	ldr	r0, [r4, #4]
 800c384:	2201      	movs	r2, #1
 800c386:	2100      	movs	r1, #0
 800c388:	f002 f8a6 	bl	800e4d8 <lv_obj_align>
 800c38c:	3501      	adds	r5, #1
		lv_bar_set_value(bar_fwd[x], 100, 0);
 800c38e:	2200      	movs	r2, #0
 800c390:	2164      	movs	r1, #100	; 0x64
 800c392:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800c396:	f008 fa0d 	bl	80147b4 <lv_bar_set_value>
	for(uint8_t x = 0; x < 21; x++) {
 800c39a:	2d15      	cmp	r5, #21
 800c39c:	d1d9      	bne.n	800c352 <create_vumeter_fwd_1+0x72>
}
 800c39e:	b003      	add	sp, #12
 800c3a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3a2:	bf00      	nop
 800c3a4:	200059b4 	.word	0x200059b4
 800c3a8:	2000c334 	.word	0x2000c334
 800c3ac:	200059f0 	.word	0x200059f0
 800c3b0:	20005904 	.word	0x20005904
 800c3b4:	0801cb1c 	.word	0x0801cb1c
 800c3b8:	20005904 	.word	0x20005904
 800c3bc:	0802bf54 	.word	0x0802bf54

0800c3c0 <print_fwd_1>:
{
 800c3c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	lv_style_copy(&style_txt1, &lv_style_plain);
 800c3c2:	4c29      	ldr	r4, [pc, #164]	; (800c468 <print_fwd_1+0xa8>)
 800c3c4:	4929      	ldr	r1, [pc, #164]	; (800c46c <print_fwd_1+0xac>)
{
 800c3c6:	ed8d 0a03 	vstr	s0, [sp, #12]
	lv_style_copy(&style_txt1, &lv_style_plain);
 800c3ca:	4620      	mov	r0, r4
 800c3cc:	f003 f982 	bl	800f6d4 <lv_style_copy>
	style_txt1.text.font = &lv_font_eurostile_24;
 800c3d0:	4b27      	ldr	r3, [pc, #156]	; (800c470 <print_fwd_1+0xb0>)
 800c3d2:	6263      	str	r3, [r4, #36]	; 0x24
	style_txt1.text.color = LV_COLOR_CYAN;
 800c3d4:	f894 3020 	ldrb.w	r3, [r4, #32]
	txt_fwd = lv_label_create(Tela_Readings, NULL);
 800c3d8:	4d26      	ldr	r5, [pc, #152]	; (800c474 <print_fwd_1+0xb4>)
	style_txt1.text.color = LV_COLOR_CYAN;
 800c3da:	f043 031f 	orr.w	r3, r3, #31
 800c3de:	f884 3020 	strb.w	r3, [r4, #32]
 800c3e2:	8c23      	ldrh	r3, [r4, #32]
 800c3e4:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800c3e8:	8423      	strh	r3, [r4, #32]
 800c3ea:	0a1b      	lsrs	r3, r3, #8
 800c3ec:	f36f 03c7 	bfc	r3, #3, #5
 800c3f0:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	txt_fwd = lv_label_create(Tela_Readings, NULL);
 800c3f4:	4b20      	ldr	r3, [pc, #128]	; (800c478 <print_fwd_1+0xb8>)
	style_txt1.text.letter_space = 1;
 800c3f6:	2601      	movs	r6, #1
	txt_fwd = lv_label_create(Tela_Readings, NULL);
 800c3f8:	6818      	ldr	r0, [r3, #0]
	style_txt1.text.letter_space = 1;
 800c3fa:	8526      	strh	r6, [r4, #40]	; 0x28
	txt_fwd = lv_label_create(Tela_Readings, NULL);
 800c3fc:	2100      	movs	r1, #0
	style_txt1.text.line_space = 1;
 800c3fe:	8566      	strh	r6, [r4, #42]	; 0x2a
	txt_fwd = lv_label_create(Tela_Readings, NULL);
 800c400:	f00b f85c 	bl	80174bc <lv_label_create>
	lv_obj_set_style(txt_fwd, &style_txt1); 						// Configura o estilo criado
 800c404:	4621      	mov	r1, r4
	txt_fwd = lv_label_create(Tela_Readings, NULL);
 800c406:	6028      	str	r0, [r5, #0]
	lv_obj_set_style(txt_fwd, &style_txt1); 						// Configura o estilo criado
 800c408:	f002 fd08 	bl	800ee1c <lv_obj_set_style>
	lv_label_set_long_mode(txt_fwd, LV_LABEL_LONG_EXPAND); 			// Quebra as linhas longas
 800c40c:	6828      	ldr	r0, [r5, #0]
	sprintf(buffer, "%0.1fW", fwd);
 800c40e:	4c1b      	ldr	r4, [pc, #108]	; (800c47c <print_fwd_1+0xbc>)
	lv_label_set_long_mode(txt_fwd, LV_LABEL_LONG_EXPAND); 			// Quebra as linhas longas
 800c410:	2100      	movs	r1, #0
 800c412:	f00a fffd 	bl	8017410 <lv_label_set_long_mode>
	lv_label_set_recolor(txt_fwd, true); 							// Ativa recolorizar por comandos no texto
 800c416:	4631      	mov	r1, r6
 800c418:	6828      	ldr	r0, [r5, #0]
 800c41a:	f00b f83b 	bl	8017494 <lv_label_set_recolor>
	lv_label_set_align(txt_fwd, LV_ALIGN_IN_TOP_RIGHT); 			// Centraliza linhas alinhadas
 800c41e:	6828      	ldr	r0, [r5, #0]
 800c420:	2103      	movs	r1, #3
 800c422:	f00a fc94 	bl	8016d4e <lv_label_set_align>
	sprintf(buffer, "%0.1fW", fwd);
 800c426:	ed9d 0a03 	vldr	s0, [sp, #12]
 800c42a:	ee10 0a10 	vmov	r0, s0
 800c42e:	f7f4 f88b 	bl	8000548 <__aeabi_f2d>
 800c432:	4602      	mov	r2, r0
 800c434:	460b      	mov	r3, r1
 800c436:	4620      	mov	r0, r4
 800c438:	4911      	ldr	r1, [pc, #68]	; (800c480 <print_fwd_1+0xc0>)
 800c43a:	f00d f903 	bl	8019644 <sprintf>
	lv_label_set_text(txt_fwd, buffer);
 800c43e:	4621      	mov	r1, r4
 800c440:	6828      	ldr	r0, [r5, #0]
 800c442:	f00a ff91 	bl	8017368 <lv_label_set_text>
	lv_obj_set_width(txt_fwd, 300); 								// Configuura o comprimento
 800c446:	6828      	ldr	r0, [r5, #0]
 800c448:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800c44c:	f002 fc2e 	bl	800ecac <lv_obj_set_width>
	lv_obj_align(txt_fwd, NULL, LV_ALIGN_IN_TOP_RIGHT, -41, 33); 	// Alinha ao centro
 800c450:	2321      	movs	r3, #33	; 0x21
 800c452:	9300      	str	r3, [sp, #0]
 800c454:	2203      	movs	r2, #3
 800c456:	f06f 0328 	mvn.w	r3, #40	; 0x28
 800c45a:	2100      	movs	r1, #0
 800c45c:	6828      	ldr	r0, [r5, #0]
 800c45e:	f002 f83b 	bl	800e4d8 <lv_obj_align>
}
 800c462:	b004      	add	sp, #16
 800c464:	bd70      	pop	{r4, r5, r6, pc}
 800c466:	bf00      	nop
 800c468:	20005a2c 	.word	0x20005a2c
 800c46c:	2000c424 	.word	0x2000c424
 800c470:	2000132c 	.word	0x2000132c
 800c474:	20005aa4 	.word	0x20005aa4
 800c478:	20005904 	.word	0x20005904
 800c47c:	20004cd0 	.word	0x20004cd0
 800c480:	0802bac5 	.word	0x0802bac5

0800c484 <print_swr_1>:
{
 800c484:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	lv_style_copy(&style_txt1, &lv_style_plain);
 800c486:	4c29      	ldr	r4, [pc, #164]	; (800c52c <print_swr_1+0xa8>)
 800c488:	4929      	ldr	r1, [pc, #164]	; (800c530 <print_swr_1+0xac>)
{
 800c48a:	ed8d 0a03 	vstr	s0, [sp, #12]
	lv_style_copy(&style_txt1, &lv_style_plain);
 800c48e:	4620      	mov	r0, r4
 800c490:	f003 f920 	bl	800f6d4 <lv_style_copy>
	style_txt1.text.font = &lv_font_eurostile_24;
 800c494:	4b27      	ldr	r3, [pc, #156]	; (800c534 <print_swr_1+0xb0>)
 800c496:	6263      	str	r3, [r4, #36]	; 0x24
	style_txt1.text.color = LV_COLOR_CYAN;
 800c498:	f894 3020 	ldrb.w	r3, [r4, #32]
	txt_swr = lv_label_create(Tela_Readings, NULL);
 800c49c:	4d26      	ldr	r5, [pc, #152]	; (800c538 <print_swr_1+0xb4>)
	style_txt1.text.color = LV_COLOR_CYAN;
 800c49e:	f043 031f 	orr.w	r3, r3, #31
 800c4a2:	f884 3020 	strb.w	r3, [r4, #32]
 800c4a6:	8c23      	ldrh	r3, [r4, #32]
 800c4a8:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800c4ac:	8423      	strh	r3, [r4, #32]
 800c4ae:	0a1b      	lsrs	r3, r3, #8
 800c4b0:	f36f 03c7 	bfc	r3, #3, #5
 800c4b4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	txt_swr = lv_label_create(Tela_Readings, NULL);
 800c4b8:	4b20      	ldr	r3, [pc, #128]	; (800c53c <print_swr_1+0xb8>)
	style_txt1.text.letter_space = 1;
 800c4ba:	2601      	movs	r6, #1
	txt_swr = lv_label_create(Tela_Readings, NULL);
 800c4bc:	6818      	ldr	r0, [r3, #0]
	style_txt1.text.letter_space = 1;
 800c4be:	8526      	strh	r6, [r4, #40]	; 0x28
	txt_swr = lv_label_create(Tela_Readings, NULL);
 800c4c0:	2100      	movs	r1, #0
	style_txt1.text.line_space = 1;
 800c4c2:	8566      	strh	r6, [r4, #42]	; 0x2a
	txt_swr = lv_label_create(Tela_Readings, NULL);
 800c4c4:	f00a fffa 	bl	80174bc <lv_label_create>
	lv_obj_set_style(txt_swr, &style_txt1); 						// Configura o estilo criado
 800c4c8:	4621      	mov	r1, r4
	txt_swr = lv_label_create(Tela_Readings, NULL);
 800c4ca:	6028      	str	r0, [r5, #0]
	lv_obj_set_style(txt_swr, &style_txt1); 						// Configura o estilo criado
 800c4cc:	f002 fca6 	bl	800ee1c <lv_obj_set_style>
	lv_label_set_long_mode(txt_swr, LV_LABEL_LONG_EXPAND); 			// Quebra as linhas longas
 800c4d0:	6828      	ldr	r0, [r5, #0]
	sprintf(buffer, "%0.1fW", swr);
 800c4d2:	4c1b      	ldr	r4, [pc, #108]	; (800c540 <print_swr_1+0xbc>)
	lv_label_set_long_mode(txt_swr, LV_LABEL_LONG_EXPAND); 			// Quebra as linhas longas
 800c4d4:	2100      	movs	r1, #0
 800c4d6:	f00a ff9b 	bl	8017410 <lv_label_set_long_mode>
	lv_label_set_recolor(txt_swr, true); 							// Ativa recolorizar por comandos no texto
 800c4da:	4631      	mov	r1, r6
 800c4dc:	6828      	ldr	r0, [r5, #0]
 800c4de:	f00a ffd9 	bl	8017494 <lv_label_set_recolor>
	lv_label_set_align(txt_swr, LV_ALIGN_IN_TOP_RIGHT); 				// Centraliza linhas alinhadas
 800c4e2:	6828      	ldr	r0, [r5, #0]
 800c4e4:	2103      	movs	r1, #3
 800c4e6:	f00a fc32 	bl	8016d4e <lv_label_set_align>
	sprintf(buffer, "%0.1fW", swr);
 800c4ea:	ed9d 0a03 	vldr	s0, [sp, #12]
 800c4ee:	ee10 0a10 	vmov	r0, s0
 800c4f2:	f7f4 f829 	bl	8000548 <__aeabi_f2d>
 800c4f6:	4602      	mov	r2, r0
 800c4f8:	460b      	mov	r3, r1
 800c4fa:	4620      	mov	r0, r4
 800c4fc:	4911      	ldr	r1, [pc, #68]	; (800c544 <print_swr_1+0xc0>)
 800c4fe:	f00d f8a1 	bl	8019644 <sprintf>
	lv_label_set_text(txt_swr, buffer);
 800c502:	4621      	mov	r1, r4
 800c504:	6828      	ldr	r0, [r5, #0]
 800c506:	f00a ff2f 	bl	8017368 <lv_label_set_text>
	lv_obj_set_width(txt_swr, 300); 								// Configuura o comprimento
 800c50a:	6828      	ldr	r0, [r5, #0]
 800c50c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800c510:	f002 fbcc 	bl	800ecac <lv_obj_set_width>
	lv_obj_align(txt_swr, NULL, LV_ALIGN_IN_TOP_RIGHT, -41, 76); 	// Alinha ao centro
 800c514:	234c      	movs	r3, #76	; 0x4c
 800c516:	9300      	str	r3, [sp, #0]
 800c518:	2203      	movs	r2, #3
 800c51a:	f06f 0328 	mvn.w	r3, #40	; 0x28
 800c51e:	2100      	movs	r1, #0
 800c520:	6828      	ldr	r0, [r5, #0]
 800c522:	f001 ffd9 	bl	800e4d8 <lv_obj_align>
}
 800c526:	b004      	add	sp, #16
 800c528:	bd70      	pop	{r4, r5, r6, pc}
 800c52a:	bf00      	nop
 800c52c:	20005a68 	.word	0x20005a68
 800c530:	2000c424 	.word	0x2000c424
 800c534:	2000132c 	.word	0x2000132c
 800c538:	20005aa8 	.word	0x20005aa8
 800c53c:	20005904 	.word	0x20005904
 800c540:	20004cd0 	.word	0x20004cd0
 800c544:	0802bac5 	.word	0x0802bac5

0800c548 <update_vumeter_swr_1>:
{
 800c548:	b538      	push	{r3, r4, r5, lr}
		lv_bar_set_style(bar_swr[x], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800c54a:	4d0c      	ldr	r5, [pc, #48]	; (800c57c <update_vumeter_swr_1+0x34>)
 800c54c:	4c0c      	ldr	r4, [pc, #48]	; (800c580 <update_vumeter_swr_1+0x38>)
 800c54e:	462a      	mov	r2, r5
 800c550:	6820      	ldr	r0, [r4, #0]
 800c552:	2100      	movs	r1, #0
 800c554:	f008 f98a 	bl	801486c <lv_bar_set_style>
		lv_bar_set_style(bar_swr[x], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
 800c558:	462a      	mov	r2, r5
 800c55a:	6820      	ldr	r0, [r4, #0]
 800c55c:	2101      	movs	r1, #1
 800c55e:	f008 f985 	bl	801486c <lv_bar_set_style>
		lv_bar_set_style(bar_swr[x], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800c562:	462a      	mov	r2, r5
 800c564:	6860      	ldr	r0, [r4, #4]
 800c566:	2100      	movs	r1, #0
 800c568:	f008 f980 	bl	801486c <lv_bar_set_style>
		lv_bar_set_style(bar_swr[x], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
 800c56c:	462a      	mov	r2, r5
 800c56e:	6860      	ldr	r0, [r4, #4]
 800c570:	2101      	movs	r1, #1
}
 800c572:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		lv_bar_set_style(bar_swr[x], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
 800c576:	f008 b979 	b.w	801486c <lv_bar_set_style>
 800c57a:	bf00      	nop
 800c57c:	200059f0 	.word	0x200059f0
 800c580:	2000595c 	.word	0x2000595c

0800c584 <update_vumeter_fwd_1>:
{
 800c584:	b570      	push	{r4, r5, r6, lr}
		lv_bar_set_style(bar_fwd[x], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800c586:	4d09      	ldr	r5, [pc, #36]	; (800c5ac <update_vumeter_fwd_1+0x28>)
 800c588:	4e09      	ldr	r6, [pc, #36]	; (800c5b0 <update_vumeter_fwd_1+0x2c>)
	for(x = 0; x <= resul; x++) {
 800c58a:	2400      	movs	r4, #0
		lv_bar_set_style(bar_fwd[x], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800c58c:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800c590:	4632      	mov	r2, r6
 800c592:	2100      	movs	r1, #0
 800c594:	f008 f96a 	bl	801486c <lv_bar_set_style>
		lv_bar_set_style(bar_fwd[x], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
 800c598:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800c59c:	4632      	mov	r2, r6
 800c59e:	2101      	movs	r1, #1
	for(x = 0; x <= resul; x++) {
 800c5a0:	3401      	adds	r4, #1
		lv_bar_set_style(bar_fwd[x], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
 800c5a2:	f008 f963 	bl	801486c <lv_bar_set_style>
	for(x = 0; x <= resul; x++) {
 800c5a6:	2c14      	cmp	r4, #20
 800c5a8:	d1f0      	bne.n	800c58c <update_vumeter_fwd_1+0x8>
}
 800c5aa:	bd70      	pop	{r4, r5, r6, pc}
 800c5ac:	20005908 	.word	0x20005908
 800c5b0:	200059f0 	.word	0x200059f0

0800c5b4 <update_reading>:
	}
}


static void update_reading(lv_task_t * param)
{
 800c5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// Potencia Direta
	sprintf(buffer, "%0.1fW", forward);
 800c5b6:	4e15      	ldr	r6, [pc, #84]	; (800c60c <update_reading+0x58>)
 800c5b8:	4c15      	ldr	r4, [pc, #84]	; (800c610 <update_reading+0x5c>)
 800c5ba:	6830      	ldr	r0, [r6, #0]
 800c5bc:	4f15      	ldr	r7, [pc, #84]	; (800c614 <update_reading+0x60>)
	lv_label_set_text(txt_fwd, buffer);
	// Refletida
	sprintf(buffer, "%0.1fW", reflected);
 800c5be:	4d16      	ldr	r5, [pc, #88]	; (800c618 <update_reading+0x64>)
	sprintf(buffer, "%0.1fW", forward);
 800c5c0:	f7f3 ffc2 	bl	8000548 <__aeabi_f2d>
 800c5c4:	4602      	mov	r2, r0
 800c5c6:	460b      	mov	r3, r1
 800c5c8:	4620      	mov	r0, r4
 800c5ca:	4639      	mov	r1, r7
 800c5cc:	f00d f83a 	bl	8019644 <sprintf>
	lv_label_set_text(txt_fwd, buffer);
 800c5d0:	4b12      	ldr	r3, [pc, #72]	; (800c61c <update_reading+0x68>)
 800c5d2:	4621      	mov	r1, r4
 800c5d4:	6818      	ldr	r0, [r3, #0]
 800c5d6:	f00a fec7 	bl	8017368 <lv_label_set_text>
	sprintf(buffer, "%0.1fW", reflected);
 800c5da:	6828      	ldr	r0, [r5, #0]
 800c5dc:	f7f3 ffb4 	bl	8000548 <__aeabi_f2d>
 800c5e0:	4602      	mov	r2, r0
 800c5e2:	460b      	mov	r3, r1
 800c5e4:	4620      	mov	r0, r4
 800c5e6:	4639      	mov	r1, r7
 800c5e8:	f00d f82c 	bl	8019644 <sprintf>
	lv_label_set_text(txt_swr, buffer);
 800c5ec:	4b0c      	ldr	r3, [pc, #48]	; (800c620 <update_reading+0x6c>)
 800c5ee:	4621      	mov	r1, r4
 800c5f0:	6818      	ldr	r0, [r3, #0]
 800c5f2:	f00a feb9 	bl	8017368 <lv_label_set_text>
	// Update Vu-Meter FWD
	update_vumeter_fwd_1(forward);
 800c5f6:	ed96 0a00 	vldr	s0, [r6]
 800c5fa:	f7ff ffc3 	bl	800c584 <update_vumeter_fwd_1>
	// Update Vu-Meter REF
	update_vumeter_swr_1(reflected);
 800c5fe:	ed95 0a00 	vldr	s0, [r5]
}
 800c602:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	update_vumeter_swr_1(reflected);
 800c606:	f7ff bf9f 	b.w	800c548 <update_vumeter_swr_1>
 800c60a:	bf00      	nop
 800c60c:	20004db8 	.word	0x20004db8
 800c610:	20004cd0 	.word	0x20004cd0
 800c614:	0802bac5 	.word	0x0802bac5
 800c618:	20004dc4 	.word	0x20004dc4
 800c61c:	20005aa4 	.word	0x20005aa4
 800c620:	20005aa8 	.word	0x20005aa8

0800c624 <btn_next_r>:
{
 800c624:	b538      	push	{r3, r4, r5, lr}
	lv_obj_t * imgbtn1 = lv_imgbtn_create(Tela_Readings, NULL);
 800c626:	4b15      	ldr	r3, [pc, #84]	; (800c67c <btn_next_r+0x58>)
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_REL, &Btn_next);
 800c628:	4d15      	ldr	r5, [pc, #84]	; (800c680 <btn_next_r+0x5c>)
	lv_obj_t * imgbtn1 = lv_imgbtn_create(Tela_Readings, NULL);
 800c62a:	6818      	ldr	r0, [r3, #0]
 800c62c:	2100      	movs	r1, #0
 800c62e:	f00a f9a1 	bl	8016974 <lv_imgbtn_create>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_REL, &Btn_next);
 800c632:	462a      	mov	r2, r5
	lv_obj_t * imgbtn1 = lv_imgbtn_create(Tela_Readings, NULL);
 800c634:	4604      	mov	r4, r0
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_REL, &Btn_next);
 800c636:	2100      	movs	r1, #0
 800c638:	f00a f9e4 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_TGL_REL, &Btn_next);
 800c63c:	462a      	mov	r2, r5
 800c63e:	4620      	mov	r0, r4
 800c640:	2102      	movs	r1, #2
 800c642:	f00a f9df 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_TGL_PR, &Btn_next);
 800c646:	462a      	mov	r2, r5
 800c648:	4620      	mov	r0, r4
 800c64a:	2103      	movs	r1, #3
 800c64c:	f00a f9da 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_PR, &Btn_next);
 800c650:	462a      	mov	r2, r5
 800c652:	4620      	mov	r0, r4
 800c654:	2101      	movs	r1, #1
 800c656:	f00a f9d5 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_INA, &Btn_next);
 800c65a:	462a      	mov	r2, r5
 800c65c:	4620      	mov	r0, r4
 800c65e:	2104      	movs	r1, #4
 800c660:	f00a f9d0 	bl	8016a04 <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn1, btn_event_next_r);
 800c664:	4620      	mov	r0, r4
 800c666:	4907      	ldr	r1, [pc, #28]	; (800c684 <btn_next_r+0x60>)
 800c668:	f001 fd97 	bl	800e19a <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn1, 112, 18);
 800c66c:	4620      	mov	r0, r4
 800c66e:	2212      	movs	r2, #18
 800c670:	2170      	movs	r1, #112	; 0x70
}
 800c672:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lv_obj_set_pos(imgbtn1, 112, 18);
 800c676:	f001 beda 	b.w	800e42e <lv_obj_set_pos>
 800c67a:	bf00      	nop
 800c67c:	20005904 	.word	0x20005904
 800c680:	20001ad8 	.word	0x20001ad8
 800c684:	0800c1cd 	.word	0x0800c1cd

0800c688 <screen_readings>:
	Tela_Readings = lv_obj_create(NULL, NULL);
 800c688:	2100      	movs	r1, #0
{
 800c68a:	b570      	push	{r4, r5, r6, lr}
	Tela_Readings = lv_obj_create(NULL, NULL);
 800c68c:	4608      	mov	r0, r1
 800c68e:	f002 f945 	bl	800e91c <lv_obj_create>
 800c692:	4e21      	ldr	r6, [pc, #132]	; (800c718 <screen_readings+0x90>)
	img_fundo = lv_img_create(Tela_Readings, NULL);
 800c694:	4c21      	ldr	r4, [pc, #132]	; (800c71c <screen_readings+0x94>)
	Tela_Readings = lv_obj_create(NULL, NULL);
 800c696:	6030      	str	r0, [r6, #0]
	img_fundo = lv_img_create(Tela_Readings, NULL);
 800c698:	2100      	movs	r1, #0
 800c69a:	f00a f841 	bl	8016720 <lv_img_create>
	lv_img_set_src(img_fundo, &tela_reading_rf);
 800c69e:	4920      	ldr	r1, [pc, #128]	; (800c720 <screen_readings+0x98>)
	img_fundo = lv_img_create(Tela_Readings, NULL);
 800c6a0:	6020      	str	r0, [r4, #0]
	lv_img_set_src(img_fundo, &tela_reading_rf);
 800c6a2:	f009 ffad 	bl	8016600 <lv_img_set_src>
	lv_obj_set_protect(img_fundo, LV_PROTECT_POS);
 800c6a6:	6820      	ldr	r0, [r4, #0]
	forward = 15.0f;
 800c6a8:	4d1e      	ldr	r5, [pc, #120]	; (800c724 <screen_readings+0x9c>)
	lv_obj_set_protect(img_fundo, LV_PROTECT_POS);
 800c6aa:	2104      	movs	r1, #4
 800c6ac:	f001 fd68 	bl	800e180 <lv_obj_set_protect>
	lv_obj_set_event_cb(img_fundo, btn_event_esc_r);
 800c6b0:	6820      	ldr	r0, [r4, #0]
 800c6b2:	491d      	ldr	r1, [pc, #116]	; (800c728 <screen_readings+0xa0>)
 800c6b4:	f001 fd71 	bl	800e19a <lv_obj_set_event_cb>
	lv_obj_set_click(img_fundo, 1);
 800c6b8:	2101      	movs	r1, #1
 800c6ba:	6820      	ldr	r0, [r4, #0]
	reflected = 1.2f;
 800c6bc:	4c1b      	ldr	r4, [pc, #108]	; (800c72c <screen_readings+0xa4>)
	lv_obj_set_click(img_fundo, 1);
 800c6be:	f001 fd43 	bl	800e148 <lv_obj_set_click>
	forward = 15.0f;
 800c6c2:	4b1b      	ldr	r3, [pc, #108]	; (800c730 <screen_readings+0xa8>)
 800c6c4:	602b      	str	r3, [r5, #0]
	reflected = 1.2f;
 800c6c6:	4b1b      	ldr	r3, [pc, #108]	; (800c734 <screen_readings+0xac>)
 800c6c8:	6023      	str	r3, [r4, #0]
	create_vumeter_swr_1();
 800c6ca:	f7ff fd99 	bl	800c200 <create_vumeter_swr_1>
	create_vumeter_fwd_1();
 800c6ce:	f7ff fe07 	bl	800c2e0 <create_vumeter_fwd_1>
	print_fwd_1(forward);
 800c6d2:	ed95 0a00 	vldr	s0, [r5]
 800c6d6:	f7ff fe73 	bl	800c3c0 <print_fwd_1>
	print_swr_1(reflected);
 800c6da:	ed94 0a00 	vldr	s0, [r4]
 800c6de:	f7ff fed1 	bl	800c484 <print_swr_1>
	update_vumeter_swr_1(forward);
 800c6e2:	ed95 0a00 	vldr	s0, [r5]
 800c6e6:	f7ff ff2f 	bl	800c548 <update_vumeter_swr_1>
	update_vumeter_fwd_1(reflected);
 800c6ea:	ed94 0a00 	vldr	s0, [r4]
 800c6ee:	f7ff ff49 	bl	800c584 <update_vumeter_fwd_1>
	btn_next_r();
 800c6f2:	f7ff ff97 	bl	800c624 <btn_next_r>
 800c6f6:	6830      	ldr	r0, [r6, #0]
 800c6f8:	f001 fafc 	bl	800dcf4 <lv_disp_load_scr>
	Task_Readings = lv_task_create(update_reading, 500, LV_TASK_PRIO_MID, NULL);
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	2203      	movs	r2, #3
 800c700:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800c704:	480c      	ldr	r0, [pc, #48]	; (800c738 <screen_readings+0xb0>)
 800c706:	f007 fdb1 	bl	801426c <lv_task_create>
 800c70a:	4b0c      	ldr	r3, [pc, #48]	; (800c73c <screen_readings+0xb4>)
 800c70c:	6018      	str	r0, [r3, #0]
	TelaAtiva = TelaReadings;
 800c70e:	4b0c      	ldr	r3, [pc, #48]	; (800c740 <screen_readings+0xb8>)
 800c710:	2209      	movs	r2, #9
 800c712:	601a      	str	r2, [r3, #0]
 800c714:	bd70      	pop	{r4, r5, r6, pc}
 800c716:	bf00      	nop
 800c718:	20005904 	.word	0x20005904
 800c71c:	200059b0 	.word	0x200059b0
 800c720:	20001bd4 	.word	0x20001bd4
 800c724:	20004db8 	.word	0x20004db8
 800c728:	0800c199 	.word	0x0800c199
 800c72c:	20004dc4 	.word	0x20004dc4
 800c730:	41700000 	.word	0x41700000
 800c734:	3f99999a 	.word	0x3f99999a
 800c738:	0800c5b5 	.word	0x0800c5b5
 800c73c:	20005900 	.word	0x20005900
 800c740:	200033cc 	.word	0x200033cc

0800c744 <btn_event_esc_rf>:
	lv_obj_set_pos(imgbtn1, 143, 2);
}

static void btn_event_esc_rf(lv_obj_t * btn, lv_event_t event)
{
	if(event == LV_EVENT_RELEASED) {
 800c744:	2907      	cmp	r1, #7
{
 800c746:	b508      	push	{r3, lr}
	if(event == LV_EVENT_RELEASED) {
 800c748:	d10b      	bne.n	800c762 <btn_event_esc_rf+0x1e>
		//printf("TELA RF - Button ESC Released\n");
		lv_task_del(Task_RF);
 800c74a:	4b06      	ldr	r3, [pc, #24]	; (800c764 <btn_event_esc_rf+0x20>)
 800c74c:	6818      	ldr	r0, [r3, #0]
 800c74e:	f007 fc9d 	bl	801408c <lv_task_del>
		lv_obj_del(Tela_RF);
 800c752:	4b05      	ldr	r3, [pc, #20]	; (800c768 <btn_event_esc_rf+0x24>)
 800c754:	6818      	ldr	r0, [r3, #0]
 800c756:	f002 fad2 	bl	800ecfe <lv_obj_del>
		screen_sel();
	}
}
 800c75a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_sel();
 800c75e:	f000 bfad 	b.w	800d6bc <screen_sel>
 800c762:	bd08      	pop	{r3, pc}
 800c764:	20005aac 	.word	0x20005aac
 800c768:	20005ab4 	.word	0x20005ab4

0800c76c <btn_power>:
}


static void btn_power(lv_obj_t * btn, lv_event_t event)
{
	if(event == LV_EVENT_RELEASED) {
 800c76c:	2907      	cmp	r1, #7
{
 800c76e:	b510      	push	{r4, lr}
	if(event == LV_EVENT_RELEASED) {
 800c770:	d10e      	bne.n	800c790 <btn_power+0x24>
		uint32_t id = lv_obj_get_user_data(btn);
 800c772:	f002 fc6e 	bl	800f052 <lv_obj_get_user_data>
		//printf("Button Power %d Released\n" , id);
		if(id == 0) {
 800c776:	b960      	cbnz	r0, 800c792 <btn_power+0x26>
			lv_btn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_REL);
 800c778:	4c0c      	ldr	r4, [pc, #48]	; (800c7ac <btn_power+0x40>)
 800c77a:	2102      	movs	r1, #2
 800c77c:	6820      	ldr	r0, [r4, #0]
 800c77e:	f008 fa6d 	bl	8014c5c <lv_btn_set_state>
			lv_btn_set_state(imgbtn1[1], LV_BTN_STATE_TGL_PR);
 800c782:	2103      	movs	r1, #3
 800c784:	6860      	ldr	r0, [r4, #4]
 800c786:	f008 fa69 	bl	8014c5c <lv_btn_set_state>
			RFEnable = 1;
 800c78a:	2201      	movs	r2, #1
		}
		else if(id == 1) {
			lv_btn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_PR);
			lv_btn_set_state(imgbtn1[1], LV_BTN_STATE_TGL_REL);
			RFEnable = 0;
 800c78c:	4b08      	ldr	r3, [pc, #32]	; (800c7b0 <btn_power+0x44>)
 800c78e:	701a      	strb	r2, [r3, #0]
 800c790:	bd10      	pop	{r4, pc}
		else if(id == 1) {
 800c792:	2801      	cmp	r0, #1
 800c794:	d1fc      	bne.n	800c790 <btn_power+0x24>
			lv_btn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_PR);
 800c796:	4c05      	ldr	r4, [pc, #20]	; (800c7ac <btn_power+0x40>)
 800c798:	2103      	movs	r1, #3
 800c79a:	6820      	ldr	r0, [r4, #0]
 800c79c:	f008 fa5e 	bl	8014c5c <lv_btn_set_state>
			lv_btn_set_state(imgbtn1[1], LV_BTN_STATE_TGL_REL);
 800c7a0:	2102      	movs	r1, #2
 800c7a2:	6860      	ldr	r0, [r4, #4]
 800c7a4:	f008 fa5a 	bl	8014c5c <lv_btn_set_state>
			RFEnable = 0;
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	e7ef      	b.n	800c78c <btn_power+0x20>
 800c7ac:	20005b8c 	.word	0x20005b8c
 800c7b0:	20000001 	.word	0x20000001

0800c7b4 <event_handler_swr>:
    lv_obj_set_event_cb(rollerswr[1], event_handler_swr);
}


static void event_handler_swr(lv_obj_t * obj, lv_event_t event)
{
 800c7b4:	b510      	push	{r4, lr}
    if(event == LV_EVENT_CLICKED) {
 800c7b6:	2906      	cmp	r1, #6
{
 800c7b8:	b08a      	sub	sp, #40	; 0x28
 800c7ba:	4604      	mov	r4, r0
    if(event == LV_EVENT_CLICKED) {
 800c7bc:	d126      	bne.n	800c80c <event_handler_swr+0x58>
        char buf[32];
        char out[6];

        uint32_t id = lv_obj_get_user_data(obj);
 800c7be:	f002 fc48 	bl	800f052 <lv_obj_get_user_data>
    lv_ddlist_get_selected_str(roller, buf, buf_size);
 800c7c2:	4620      	mov	r0, r4

        lv_roller_get_selected_str(obj, buf, sizeof(buf));

        lv_roller_get_selected_str(rollerswr[0], buf, sizeof(buf));
 800c7c4:	4c12      	ldr	r4, [pc, #72]	; (800c810 <event_handler_swr+0x5c>)
 800c7c6:	2220      	movs	r2, #32
 800c7c8:	a902      	add	r1, sp, #8
 800c7ca:	f009 fcbe 	bl	801614a <lv_ddlist_get_selected_str>
 800c7ce:	2220      	movs	r2, #32
 800c7d0:	a902      	add	r1, sp, #8
 800c7d2:	6820      	ldr	r0, [r4, #0]
 800c7d4:	f009 fcb9 	bl	801614a <lv_ddlist_get_selected_str>
        out[0] = buf[0];
 800c7d8:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800c7dc:	6860      	ldr	r0, [r4, #4]
 800c7de:	f88d 3000 	strb.w	r3, [sp]
 800c7e2:	2220      	movs	r2, #32
 800c7e4:	a902      	add	r1, sp, #8
 800c7e6:	f009 fcb0 	bl	801614a <lv_ddlist_get_selected_str>
        lv_roller_get_selected_str(rollerswr[1], buf, sizeof(buf));
        out[1] = buf[0];
 800c7ea:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800c7ee:	f88d 3001 	strb.w	r3, [sp, #1]
        out[5] = 0;

        max_rfl = atoi(out);
 800c7f2:	4668      	mov	r0, sp
        out[5] = 0;
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	f88d 3005 	strb.w	r3, [sp, #5]
        max_rfl = atoi(out);
 800c7fa:	f00c fc22 	bl	8019042 <atoi>
 800c7fe:	ee07 0a90 	vmov	s15, r0
 800c802:	4b04      	ldr	r3, [pc, #16]	; (800c814 <event_handler_swr+0x60>)
 800c804:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c808:	edc3 7a00 	vstr	s15, [r3]
       // printf("Selected Roller: %d Digit: %s  MAX_RFL: %0.1fW\n", id, buf, max_rfl);
    }
}
 800c80c:	b00a      	add	sp, #40	; 0x28
 800c80e:	bd10      	pop	{r4, pc}
 800c810:	20005b94 	.word	0x20005b94
 800c814:	20000008 	.word	0x20000008

0800c818 <event_handler_target>:
    lv_obj_set_event_cb(rollertarget[1], event_handler_target);
}


static void event_handler_target(lv_obj_t * obj, lv_event_t event)
{
 800c818:	b510      	push	{r4, lr}
    if(event == LV_EVENT_CLICKED) {
 800c81a:	2906      	cmp	r1, #6
{
 800c81c:	b08a      	sub	sp, #40	; 0x28
 800c81e:	4604      	mov	r4, r0
    if(event == LV_EVENT_CLICKED) {
 800c820:	d126      	bne.n	800c870 <event_handler_target+0x58>
        char buf[32];
        char out[6];

        uint32_t id = lv_obj_get_user_data(obj);
 800c822:	f002 fc16 	bl	800f052 <lv_obj_get_user_data>
 800c826:	4620      	mov	r0, r4

        lv_roller_get_selected_str(obj, buf, sizeof(buf));


        lv_roller_get_selected_str(rollerswr[0], buf, sizeof(buf));
 800c828:	4c12      	ldr	r4, [pc, #72]	; (800c874 <event_handler_target+0x5c>)
 800c82a:	2220      	movs	r2, #32
 800c82c:	a902      	add	r1, sp, #8
 800c82e:	f009 fc8c 	bl	801614a <lv_ddlist_get_selected_str>
 800c832:	2220      	movs	r2, #32
 800c834:	a902      	add	r1, sp, #8
 800c836:	6820      	ldr	r0, [r4, #0]
 800c838:	f009 fc87 	bl	801614a <lv_ddlist_get_selected_str>
        out[0] = buf[0];
 800c83c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800c840:	6860      	ldr	r0, [r4, #4]
 800c842:	f88d 3000 	strb.w	r3, [sp]
 800c846:	2220      	movs	r2, #32
 800c848:	a902      	add	r1, sp, #8
 800c84a:	f009 fc7e 	bl	801614a <lv_ddlist_get_selected_str>
        lv_roller_get_selected_str(rollerswr[1], buf, sizeof(buf));
        out[1] = buf[0];
 800c84e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800c852:	f88d 3001 	strb.w	r3, [sp, #1]
        out[5] = 0;

        target = (float)atoi(out);
 800c856:	4668      	mov	r0, sp
        out[5] = 0;
 800c858:	2300      	movs	r3, #0
 800c85a:	f88d 3005 	strb.w	r3, [sp, #5]
        target = (float)atoi(out);
 800c85e:	f00c fbf0 	bl	8019042 <atoi>
 800c862:	ee07 0a90 	vmov	s15, r0
 800c866:	4b04      	ldr	r3, [pc, #16]	; (800c878 <event_handler_target+0x60>)
 800c868:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c86c:	edc3 7a00 	vstr	s15, [r3]
        //printf("Selected Roller: %d Digit: %s  TARGET: %0.1fW\n", id, buf, target);
    }
}
 800c870:	b00a      	add	sp, #40	; 0x28
 800c872:	bd10      	pop	{r4, pc}
 800c874:	20005b94 	.word	0x20005b94
 800c878:	20000010 	.word	0x20000010

0800c87c <create_vumeter_swr>:
{
 800c87c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800c87e:	4e30      	ldr	r6, [pc, #192]	; (800c940 <create_vumeter_swr+0xc4>)
 800c880:	4930      	ldr	r1, [pc, #192]	; (800c944 <create_vumeter_swr+0xc8>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800c882:	4c31      	ldr	r4, [pc, #196]	; (800c948 <create_vumeter_swr+0xcc>)
		bar_swr[x] = lv_bar_create(Tela_RF, NULL);
 800c884:	4f31      	ldr	r7, [pc, #196]	; (800c94c <create_vumeter_swr+0xd0>)
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800c886:	4630      	mov	r0, r6
 800c888:	f002 ff24 	bl	800f6d4 <lv_style_copy>
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800c88c:	4b30      	ldr	r3, [pc, #192]	; (800c950 <create_vumeter_swr+0xd4>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800c88e:	492d      	ldr	r1, [pc, #180]	; (800c944 <create_vumeter_swr+0xc8>)
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800c890:	881b      	ldrh	r3, [r3, #0]
 800c892:	80b3      	strh	r3, [r6, #4]
	style_indic_bar.body.radius = 0;
 800c894:	2500      	movs	r5, #0
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800c896:	4620      	mov	r0, r4
	style_indic_bar.body.main_color = LV_COLOR_MAKE(105, 105, 105);
 800c898:	8073      	strh	r3, [r6, #2]
	style_indic_bar.body.border.color = LV_COLOR_MAKE(105, 105, 105);
 800c89a:	8173      	strh	r3, [r6, #10]
	style_indic_bar.body.radius = 0;
 800c89c:	80f5      	strh	r5, [r6, #6]
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800c89e:	f002 ff19 	bl	800f6d4 <lv_style_copy>
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800c8a2:	7923      	ldrb	r3, [r4, #4]
	style_indic_bar_vd.body.radius = 0;
 800c8a4:	80e5      	strh	r5, [r4, #6]
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800c8a6:	f365 0304 	bfi	r3, r5, #0, #5
 800c8aa:	7123      	strb	r3, [r4, #4]
 800c8ac:	88a3      	ldrh	r3, [r4, #4]
 800c8ae:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800c8b2:	80a3      	strh	r3, [r4, #4]
 800c8b4:	0a1b      	lsrs	r3, r3, #8
 800c8b6:	f365 03c7 	bfi	r3, r5, #3, #5
 800c8ba:	7163      	strb	r3, [r4, #5]
	style_indic_bar_vd.body.main_color = LV_COLOR_MAKE(0, 255, 0);
 800c8bc:	78a3      	ldrb	r3, [r4, #2]
 800c8be:	f365 0304 	bfi	r3, r5, #0, #5
 800c8c2:	70a3      	strb	r3, [r4, #2]
 800c8c4:	8863      	ldrh	r3, [r4, #2]
 800c8c6:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800c8ca:	8063      	strh	r3, [r4, #2]
 800c8cc:	0a1b      	lsrs	r3, r3, #8
 800c8ce:	f365 03c7 	bfi	r3, r5, #3, #5
 800c8d2:	70e3      	strb	r3, [r4, #3]
	style_indic_bar_vd.body.border.color = LV_COLOR_MAKE(0, 255, 0);
 800c8d4:	7aa3      	ldrb	r3, [r4, #10]
 800c8d6:	f365 0304 	bfi	r3, r5, #0, #5
 800c8da:	72a3      	strb	r3, [r4, #10]
 800c8dc:	8963      	ldrh	r3, [r4, #10]
 800c8de:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800c8e2:	8163      	strh	r3, [r4, #10]
 800c8e4:	0a1b      	lsrs	r3, r3, #8
 800c8e6:	f365 03c7 	bfi	r3, r5, #3, #5
 800c8ea:	72e3      	strb	r3, [r4, #11]
 800c8ec:	4c19      	ldr	r4, [pc, #100]	; (800c954 <create_vumeter_swr+0xd8>)
		bar_swr[x] = lv_bar_create(Tela_RF, NULL);
 800c8ee:	6838      	ldr	r0, [r7, #0]
 800c8f0:	2100      	movs	r1, #0
 800c8f2:	f007 ffd1 	bl	8014898 <lv_bar_create>
		lv_obj_set_size(bar_swr[x], 4, 18);
 800c8f6:	2212      	movs	r2, #18
		bar_swr[x] = lv_bar_create(Tela_RF, NULL);
 800c8f8:	6060      	str	r0, [r4, #4]
		lv_obj_set_size(bar_swr[x], 4, 18);
 800c8fa:	2104      	movs	r1, #4
 800c8fc:	f002 f98c 	bl	800ec18 <lv_obj_set_size>
		lv_bar_set_style(bar_swr[x], LV_BAR_STYLE_BG, &style_indic_bar);
 800c900:	6860      	ldr	r0, [r4, #4]
 800c902:	4632      	mov	r2, r6
 800c904:	2100      	movs	r1, #0
 800c906:	f007 ffb1 	bl	801486c <lv_bar_set_style>
		lv_bar_set_style(bar_swr[x], LV_BAR_STYLE_INDIC, &style_indic_bar);
 800c90a:	6860      	ldr	r0, [r4, #4]
 800c90c:	4632      	mov	r2, r6
 800c90e:	2101      	movs	r1, #1
 800c910:	f007 ffac 	bl	801486c <lv_bar_set_style>
		lv_obj_align(bar_swr[x], NULL, LV_ALIGN_IN_TOP_LEFT, swr_pos_x[x], 86);
 800c914:	2256      	movs	r2, #86	; 0x56
 800c916:	4b10      	ldr	r3, [pc, #64]	; (800c958 <create_vumeter_swr+0xdc>)
 800c918:	9200      	str	r2, [sp, #0]
 800c91a:	f933 3025 	ldrsh.w	r3, [r3, r5, lsl #2]
 800c91e:	6860      	ldr	r0, [r4, #4]
 800c920:	2201      	movs	r2, #1
 800c922:	2100      	movs	r1, #0
 800c924:	f001 fdd8 	bl	800e4d8 <lv_obj_align>
 800c928:	3501      	adds	r5, #1
		lv_bar_set_value(bar_swr[x], 100, 0);
 800c92a:	2200      	movs	r2, #0
 800c92c:	2164      	movs	r1, #100	; 0x64
 800c92e:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800c932:	f007 ff3f 	bl	80147b4 <lv_bar_set_value>
	for(uint8_t x = 0; x < 20; x++) {
 800c936:	2d14      	cmp	r5, #20
 800c938:	d1d9      	bne.n	800c8ee <create_vumeter_swr+0x72>
}
 800c93a:	b003      	add	sp, #12
 800c93c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c93e:	bf00      	nop
 800c940:	20005ba4 	.word	0x20005ba4
 800c944:	2000c334 	.word	0x2000c334
 800c948:	20005be0 	.word	0x20005be0
 800c94c:	20005ab4 	.word	0x20005ab4
 800c950:	0801cb1e 	.word	0x0801cb1e
 800c954:	20005b34 	.word	0x20005b34
 800c958:	0802c128 	.word	0x0802c128

0800c95c <create_vumeter_pwr>:
{
 800c95c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800c95e:	4e30      	ldr	r6, [pc, #192]	; (800ca20 <create_vumeter_pwr+0xc4>)
 800c960:	4930      	ldr	r1, [pc, #192]	; (800ca24 <create_vumeter_pwr+0xc8>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800c962:	4c31      	ldr	r4, [pc, #196]	; (800ca28 <create_vumeter_pwr+0xcc>)
		bar_pwr[x] = lv_bar_create(Tela_RF_2, NULL);
 800c964:	4f31      	ldr	r7, [pc, #196]	; (800ca2c <create_vumeter_pwr+0xd0>)
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800c966:	4630      	mov	r0, r6
 800c968:	f002 feb4 	bl	800f6d4 <lv_style_copy>
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800c96c:	4b30      	ldr	r3, [pc, #192]	; (800ca30 <create_vumeter_pwr+0xd4>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800c96e:	492d      	ldr	r1, [pc, #180]	; (800ca24 <create_vumeter_pwr+0xc8>)
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800c970:	881b      	ldrh	r3, [r3, #0]
 800c972:	80b3      	strh	r3, [r6, #4]
	style_indic_bar.body.radius = 0;
 800c974:	2500      	movs	r5, #0
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800c976:	4620      	mov	r0, r4
	style_indic_bar.body.main_color = LV_COLOR_MAKE(105, 105, 105);
 800c978:	8073      	strh	r3, [r6, #2]
	style_indic_bar.body.border.color = LV_COLOR_MAKE(105, 105, 105);
 800c97a:	8173      	strh	r3, [r6, #10]
	style_indic_bar.body.radius = 0;
 800c97c:	80f5      	strh	r5, [r6, #6]
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800c97e:	f002 fea9 	bl	800f6d4 <lv_style_copy>
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800c982:	7923      	ldrb	r3, [r4, #4]
	style_indic_bar_vd.body.radius = 0;
 800c984:	80e5      	strh	r5, [r4, #6]
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800c986:	f365 0304 	bfi	r3, r5, #0, #5
 800c98a:	7123      	strb	r3, [r4, #4]
 800c98c:	88a3      	ldrh	r3, [r4, #4]
 800c98e:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800c992:	80a3      	strh	r3, [r4, #4]
 800c994:	0a1b      	lsrs	r3, r3, #8
 800c996:	f365 03c7 	bfi	r3, r5, #3, #5
 800c99a:	7163      	strb	r3, [r4, #5]
	style_indic_bar_vd.body.main_color = LV_COLOR_MAKE(0, 255, 0);
 800c99c:	78a3      	ldrb	r3, [r4, #2]
 800c99e:	f365 0304 	bfi	r3, r5, #0, #5
 800c9a2:	70a3      	strb	r3, [r4, #2]
 800c9a4:	8863      	ldrh	r3, [r4, #2]
 800c9a6:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800c9aa:	8063      	strh	r3, [r4, #2]
 800c9ac:	0a1b      	lsrs	r3, r3, #8
 800c9ae:	f365 03c7 	bfi	r3, r5, #3, #5
 800c9b2:	70e3      	strb	r3, [r4, #3]
	style_indic_bar_vd.body.border.color = LV_COLOR_MAKE(0, 255, 0);
 800c9b4:	7aa3      	ldrb	r3, [r4, #10]
 800c9b6:	f365 0304 	bfi	r3, r5, #0, #5
 800c9ba:	72a3      	strb	r3, [r4, #10]
 800c9bc:	8963      	ldrh	r3, [r4, #10]
 800c9be:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800c9c2:	8163      	strh	r3, [r4, #10]
 800c9c4:	0a1b      	lsrs	r3, r3, #8
 800c9c6:	f365 03c7 	bfi	r3, r5, #3, #5
 800c9ca:	72e3      	strb	r3, [r4, #11]
 800c9cc:	4c19      	ldr	r4, [pc, #100]	; (800ca34 <create_vumeter_pwr+0xd8>)
		bar_pwr[x] = lv_bar_create(Tela_RF_2, NULL);
 800c9ce:	6838      	ldr	r0, [r7, #0]
 800c9d0:	2100      	movs	r1, #0
 800c9d2:	f007 ff61 	bl	8014898 <lv_bar_create>
		lv_obj_set_size(bar_pwr[x], 4, 20);
 800c9d6:	2214      	movs	r2, #20
		bar_pwr[x] = lv_bar_create(Tela_RF_2, NULL);
 800c9d8:	6060      	str	r0, [r4, #4]
		lv_obj_set_size(bar_pwr[x], 4, 20);
 800c9da:	2104      	movs	r1, #4
 800c9dc:	f002 f91c 	bl	800ec18 <lv_obj_set_size>
		lv_bar_set_style(bar_pwr[x], LV_BAR_STYLE_BG, &style_indic_bar);
 800c9e0:	6860      	ldr	r0, [r4, #4]
 800c9e2:	4632      	mov	r2, r6
 800c9e4:	2100      	movs	r1, #0
 800c9e6:	f007 ff41 	bl	801486c <lv_bar_set_style>
		lv_bar_set_style(bar_pwr[x], LV_BAR_STYLE_INDIC, &style_indic_bar);
 800c9ea:	6860      	ldr	r0, [r4, #4]
 800c9ec:	4632      	mov	r2, r6
 800c9ee:	2101      	movs	r1, #1
 800c9f0:	f007 ff3c 	bl	801486c <lv_bar_set_style>
		lv_obj_align(bar_pwr[x], NULL, LV_ALIGN_IN_TOP_LEFT, pwr_pos_x[x], 93);
 800c9f4:	225d      	movs	r2, #93	; 0x5d
 800c9f6:	4b10      	ldr	r3, [pc, #64]	; (800ca38 <create_vumeter_pwr+0xdc>)
 800c9f8:	9200      	str	r2, [sp, #0]
 800c9fa:	f933 3025 	ldrsh.w	r3, [r3, r5, lsl #2]
 800c9fe:	6860      	ldr	r0, [r4, #4]
 800ca00:	2201      	movs	r2, #1
 800ca02:	2100      	movs	r1, #0
 800ca04:	f001 fd68 	bl	800e4d8 <lv_obj_align>
 800ca08:	3501      	adds	r5, #1
		lv_bar_set_value(bar_pwr[x], 100, 0);
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	2164      	movs	r1, #100	; 0x64
 800ca0e:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800ca12:	f007 fecf 	bl	80147b4 <lv_bar_set_value>
	for(uint8_t x = 0; x < 10; x++) {
 800ca16:	2d0a      	cmp	r5, #10
 800ca18:	d1d9      	bne.n	800c9ce <create_vumeter_pwr+0x72>
}
 800ca1a:	b003      	add	sp, #12
 800ca1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca1e:	bf00      	nop
 800ca20:	20005ba4 	.word	0x20005ba4
 800ca24:	2000c334 	.word	0x2000c334
 800ca28:	20005be0 	.word	0x20005be0
 800ca2c:	20005abc 	.word	0x20005abc
 800ca30:	0801cb1e 	.word	0x0801cb1e
 800ca34:	20005b0c 	.word	0x20005b0c
 800ca38:	0802c09c 	.word	0x0802c09c

0800ca3c <update_vumeter_swr>:
{
 800ca3c:	b570      	push	{r4, r5, r6, lr}
 800ca3e:	4c2d      	ldr	r4, [pc, #180]	; (800caf4 <update_vumeter_swr+0xb8>)
		lv_bar_set_style(bar_swr[x], LV_BAR_STYLE_BG, &style_indic_bar);
 800ca40:	4d2d      	ldr	r5, [pc, #180]	; (800caf8 <update_vumeter_swr+0xbc>)
{
 800ca42:	ed2d 8b02 	vpush	{d8}
 800ca46:	f104 0650 	add.w	r6, r4, #80	; 0x50
 800ca4a:	eeb0 8a40 	vmov.f32	s16, s0
		lv_bar_set_style(bar_swr[x], LV_BAR_STYLE_BG, &style_indic_bar);
 800ca4e:	462a      	mov	r2, r5
 800ca50:	2100      	movs	r1, #0
 800ca52:	6860      	ldr	r0, [r4, #4]
 800ca54:	f007 ff0a 	bl	801486c <lv_bar_set_style>
		lv_bar_set_style(bar_swr[x], LV_BAR_STYLE_INDIC, &style_indic_bar);
 800ca58:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800ca5c:	462a      	mov	r2, r5
 800ca5e:	2101      	movs	r1, #1
 800ca60:	f007 ff04 	bl	801486c <lv_bar_set_style>
	for(uint8_t x = 0; x < 20; x++) {
 800ca64:	42b4      	cmp	r4, r6
 800ca66:	d1f2      	bne.n	800ca4e <update_vumeter_swr+0x12>
	if(swr != 0) {
 800ca68:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800ca6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca70:	d02f      	beq.n	800cad2 <update_vumeter_swr+0x96>
		resul = (uint32_t) (((((swr / 10) / target) * 100) / 2.50f) - 1) ;
 800ca72:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800ca76:	eec8 6a27 	vdiv.f32	s13, s16, s15
 800ca7a:	4b20      	ldr	r3, [pc, #128]	; (800cafc <update_vumeter_swr+0xc0>)
			lv_bar_set_style(bar_swr[y], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800ca7c:	4d20      	ldr	r5, [pc, #128]	; (800cb00 <update_vumeter_swr+0xc4>)
 800ca7e:	4e21      	ldr	r6, [pc, #132]	; (800cb04 <update_vumeter_swr+0xc8>)
		for(y = 0; y <= resul; y++) {
 800ca80:	2400      	movs	r4, #0
		resul = (uint32_t) (((((swr / 10) / target) * 100) / 2.50f) - 1) ;
 800ca82:	ed93 7a00 	vldr	s14, [r3]
 800ca86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca8a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800cb08 <update_vumeter_swr+0xcc>
 800ca8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ca92:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 800ca96:	ee87 8a87 	vdiv.f32	s16, s15, s14
 800ca9a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ca9e:	ee38 8a67 	vsub.f32	s16, s16, s15
		if(resul >= 20) resul = 19;
 800caa2:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
		resul = (uint32_t) (((((swr / 10) / target) * 100) / 2.50f) - 1) ;
 800caa6:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 800caaa:	eeb8 8a48 	vcvt.f32.u32	s16, s16
		if(resul >= 20) resul = 19;
 800caae:	eeb4 8a67 	vcmp.f32	s16, s15
 800cab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cab6:	eef3 7a03 	vmov.f32	s15, #51	; 0x41980000  19.0
 800caba:	bfa8      	it	ge
 800cabc:	eeb0 8a67 	vmovge.f32	s16, s15
		for(y = 0; y <= resul; y++) {
 800cac0:	ee07 4a90 	vmov	s15, r4
 800cac4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cac8:	eef4 7ac8 	vcmpe.f32	s15, s16
 800cacc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cad0:	d902      	bls.n	800cad8 <update_vumeter_swr+0x9c>
}
 800cad2:	ecbd 8b02 	vpop	{d8}
 800cad6:	bd70      	pop	{r4, r5, r6, pc}
			lv_bar_set_style(bar_swr[y], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800cad8:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800cadc:	4632      	mov	r2, r6
 800cade:	2100      	movs	r1, #0
 800cae0:	f007 fec4 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar_swr[y], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
 800cae4:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800cae8:	4632      	mov	r2, r6
 800caea:	2101      	movs	r1, #1
 800caec:	f007 febe 	bl	801486c <lv_bar_set_style>
		for(y = 0; y <= resul; y++) {
 800caf0:	3401      	adds	r4, #1
 800caf2:	e7e5      	b.n	800cac0 <update_vumeter_swr+0x84>
 800caf4:	20005b34 	.word	0x20005b34
 800caf8:	20005ba4 	.word	0x20005ba4
 800cafc:	20000010 	.word	0x20000010
 800cb00:	20005b38 	.word	0x20005b38
 800cb04:	20005be0 	.word	0x20005be0
 800cb08:	42c80000 	.word	0x42c80000

0800cb0c <update_rf>:

static void update_rf(lv_task_t * param)
{
	update_vumeter_swr(max_rfl);
 800cb0c:	4b02      	ldr	r3, [pc, #8]	; (800cb18 <update_rf+0xc>)
 800cb0e:	ed93 0a00 	vldr	s0, [r3]
 800cb12:	f7ff bf93 	b.w	800ca3c <update_vumeter_swr>
 800cb16:	bf00      	nop
 800cb18:	20000008 	.word	0x20000008

0800cb1c <update_vumeter_fwd>:
{
 800cb1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb1e:	4c23      	ldr	r4, [pc, #140]	; (800cbac <update_vumeter_fwd+0x90>)
		lv_bar_set_style(bar_fwd[x], LV_BAR_STYLE_BG, &style_indic_bar);
 800cb20:	4d23      	ldr	r5, [pc, #140]	; (800cbb0 <update_vumeter_fwd+0x94>)
{
 800cb22:	ed2d 8b02 	vpush	{d8}
 800cb26:	f104 0650 	add.w	r6, r4, #80	; 0x50
 800cb2a:	eeb0 8a40 	vmov.f32	s16, s0
		lv_bar_set_style(bar_fwd[x], LV_BAR_STYLE_BG, &style_indic_bar);
 800cb2e:	462a      	mov	r2, r5
 800cb30:	2100      	movs	r1, #0
 800cb32:	6860      	ldr	r0, [r4, #4]
 800cb34:	f007 fe9a 	bl	801486c <lv_bar_set_style>
		lv_bar_set_style(bar_fwd[x], LV_BAR_STYLE_INDIC, &style_indic_bar);
 800cb38:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800cb3c:	462a      	mov	r2, r5
 800cb3e:	2101      	movs	r1, #1
 800cb40:	f007 fe94 	bl	801486c <lv_bar_set_style>
	for(uint8_t x = 0; x < 20; x++) {
 800cb44:	42a6      	cmp	r6, r4
 800cb46:	d1f2      	bne.n	800cb2e <update_vumeter_fwd+0x12>
	if(fwd != 0) {
 800cb48:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800cb4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb50:	d028      	beq.n	800cba4 <update_vumeter_fwd+0x88>
		resul = (uint32_t) ((((((float)fwd) / 15.0f) * 100) / 5.0f) - 1) ;
 800cb52:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
 800cb56:	ee88 7a27 	vdiv.f32	s14, s16, s15
			lv_bar_set_style(bar_fwd[y], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800cb5a:	4e16      	ldr	r6, [pc, #88]	; (800cbb4 <update_vumeter_fwd+0x98>)
 800cb5c:	4f16      	ldr	r7, [pc, #88]	; (800cbb8 <update_vumeter_fwd+0x9c>)
		for(y = 0; y <= resul; y++) {
 800cb5e:	2500      	movs	r5, #0
		resul = (uint32_t) ((((((float)fwd) / 15.0f) * 100) / 5.0f) - 1) ;
 800cb60:	eddf 7a16 	vldr	s15, [pc, #88]	; 800cbbc <update_vumeter_fwd+0xa0>
 800cb64:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb68:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800cb6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cb70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cb74:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cb78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb7c:	ee17 4a90 	vmov	r4, s15
 800cb80:	2c13      	cmp	r4, #19
 800cb82:	bf28      	it	cs
 800cb84:	2413      	movcs	r4, #19
			lv_bar_set_style(bar_fwd[y], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800cb86:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]
 800cb8a:	463a      	mov	r2, r7
 800cb8c:	2100      	movs	r1, #0
 800cb8e:	f007 fe6d 	bl	801486c <lv_bar_set_style>
			lv_bar_set_style(bar_fwd[y], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
 800cb92:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]
 800cb96:	463a      	mov	r2, r7
 800cb98:	2101      	movs	r1, #1
		for(y = 0; y <= resul; y++) {
 800cb9a:	3501      	adds	r5, #1
			lv_bar_set_style(bar_fwd[y], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
 800cb9c:	f007 fe66 	bl	801486c <lv_bar_set_style>
		for(y = 0; y <= resul; y++) {
 800cba0:	42ac      	cmp	r4, r5
 800cba2:	d2f0      	bcs.n	800cb86 <update_vumeter_fwd+0x6a>
}
 800cba4:	ecbd 8b02 	vpop	{d8}
 800cba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbaa:	bf00      	nop
 800cbac:	20005abc 	.word	0x20005abc
 800cbb0:	20005ba4 	.word	0x20005ba4
 800cbb4:	20005ac0 	.word	0x20005ac0
 800cbb8:	20005be0 	.word	0x20005be0
 800cbbc:	42c80000 	.word	0x42c80000

0800cbc0 <update_rf_1>:
}

static void update_rf_1(lv_task_t * param)
{
	update_vumeter_fwd(target);
 800cbc0:	4b02      	ldr	r3, [pc, #8]	; (800cbcc <update_rf_1+0xc>)
 800cbc2:	ed93 0a00 	vldr	s0, [r3]
 800cbc6:	f7ff bfa9 	b.w	800cb1c <update_vumeter_fwd>
 800cbca:	bf00      	nop
 800cbcc:	20000010 	.word	0x20000010

0800cbd0 <update_vumeter_pwr>:
{
 800cbd0:	b570      	push	{r4, r5, r6, lr}
		lv_bar_set_style(bar_pwr[x], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800cbd2:	4d09      	ldr	r5, [pc, #36]	; (800cbf8 <update_vumeter_pwr+0x28>)
 800cbd4:	4e09      	ldr	r6, [pc, #36]	; (800cbfc <update_vumeter_pwr+0x2c>)
	for(x = 0; x <= resul; x++) {
 800cbd6:	2400      	movs	r4, #0
		lv_bar_set_style(bar_pwr[x], LV_BAR_STYLE_BG, &style_indic_bar_vd);
 800cbd8:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800cbdc:	4632      	mov	r2, r6
 800cbde:	2100      	movs	r1, #0
 800cbe0:	f007 fe44 	bl	801486c <lv_bar_set_style>
		lv_bar_set_style(bar_pwr[x], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
 800cbe4:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800cbe8:	4632      	mov	r2, r6
 800cbea:	2101      	movs	r1, #1
	for(x = 0; x <= resul; x++) {
 800cbec:	3401      	adds	r4, #1
		lv_bar_set_style(bar_pwr[x], LV_BAR_STYLE_INDIC, &style_indic_bar_vd);
 800cbee:	f007 fe3d 	bl	801486c <lv_bar_set_style>
	for(x = 0; x <= resul; x++) {
 800cbf2:	2c0a      	cmp	r4, #10
 800cbf4:	d1f0      	bne.n	800cbd8 <update_vumeter_pwr+0x8>
}
 800cbf6:	bd70      	pop	{r4, r5, r6, pc}
 800cbf8:	20005b10 	.word	0x20005b10
 800cbfc:	20005be0 	.word	0x20005be0

0800cc00 <print_pwr>:
{
 800cc00:	b573      	push	{r0, r1, r4, r5, r6, lr}
	lv_style_copy(&style_txt_fwd, &lv_style_plain);
 800cc02:	4c24      	ldr	r4, [pc, #144]	; (800cc94 <print_pwr+0x94>)
 800cc04:	4924      	ldr	r1, [pc, #144]	; (800cc98 <print_pwr+0x98>)
 800cc06:	4620      	mov	r0, r4
 800cc08:	f002 fd64 	bl	800f6d4 <lv_style_copy>
	style_txt_fwd.text.font = &lv_font_eurostile_22;
 800cc0c:	4b23      	ldr	r3, [pc, #140]	; (800cc9c <print_pwr+0x9c>)
 800cc0e:	6263      	str	r3, [r4, #36]	; 0x24
	style_txt_fwd.text.color = LV_COLOR_CYAN;
 800cc10:	f894 3020 	ldrb.w	r3, [r4, #32]
 800cc14:	f043 031f 	orr.w	r3, r3, #31
 800cc18:	f884 3020 	strb.w	r3, [r4, #32]
 800cc1c:	8c23      	ldrh	r3, [r4, #32]
 800cc1e:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800cc22:	8423      	strh	r3, [r4, #32]
 800cc24:	0a1b      	lsrs	r3, r3, #8
 800cc26:	f36f 03c7 	bfc	r3, #3, #5
 800cc2a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	lv_obj_t *txt_fwd = lv_label_create(Tela_RF_2, NULL);
 800cc2e:	4b1c      	ldr	r3, [pc, #112]	; (800cca0 <print_pwr+0xa0>)
	style_txt_fwd.text.letter_space = 1;
 800cc30:	2601      	movs	r6, #1
	lv_obj_t *txt_fwd = lv_label_create(Tela_RF_2, NULL);
 800cc32:	6818      	ldr	r0, [r3, #0]
	style_txt_fwd.text.letter_space = 1;
 800cc34:	8526      	strh	r6, [r4, #40]	; 0x28
	lv_obj_t *txt_fwd = lv_label_create(Tela_RF_2, NULL);
 800cc36:	2100      	movs	r1, #0
	style_txt_fwd.text.line_space = 1;
 800cc38:	8566      	strh	r6, [r4, #42]	; 0x2a
	lv_obj_t *txt_fwd = lv_label_create(Tela_RF_2, NULL);
 800cc3a:	f00a fc3f 	bl	80174bc <lv_label_create>
	lv_obj_set_style(txt_fwd, &style_txt_fwd); 							// Configura o estilo criado
 800cc3e:	4621      	mov	r1, r4
	lv_obj_t *txt_fwd = lv_label_create(Tela_RF_2, NULL);
 800cc40:	4605      	mov	r5, r0
	lv_obj_set_style(txt_fwd, &style_txt_fwd); 							// Configura o estilo criado
 800cc42:	f002 f8eb 	bl	800ee1c <lv_obj_set_style>
	lv_label_set_long_mode(txt_fwd, LV_LABEL_LONG_BREAK); 				// Quebra as linhas longas
 800cc46:	4631      	mov	r1, r6
 800cc48:	4628      	mov	r0, r5
 800cc4a:	f00a fbe1 	bl	8017410 <lv_label_set_long_mode>
	sprintf(buffer, "%0.1f", pwr);
 800cc4e:	4c15      	ldr	r4, [pc, #84]	; (800cca4 <print_pwr+0xa4>)
	lv_label_set_recolor(txt_fwd, true); 								// Ativa recolorizar por comandos no texto
 800cc50:	4631      	mov	r1, r6
 800cc52:	4628      	mov	r0, r5
 800cc54:	f00a fc1e 	bl	8017494 <lv_label_set_recolor>
	lv_label_set_align(txt_fwd, LV_ALIGN_IN_BOTTOM_RIGHT); 				// Centraliza linhas alinhadas
 800cc58:	4628      	mov	r0, r5
 800cc5a:	2106      	movs	r1, #6
 800cc5c:	f00a f877 	bl	8016d4e <lv_label_set_align>
	sprintf(buffer, "%0.1f", pwr);
 800cc60:	2200      	movs	r2, #0
 800cc62:	4b11      	ldr	r3, [pc, #68]	; (800cca8 <print_pwr+0xa8>)
 800cc64:	4911      	ldr	r1, [pc, #68]	; (800ccac <print_pwr+0xac>)
 800cc66:	4620      	mov	r0, r4
 800cc68:	f00c fcec 	bl	8019644 <sprintf>
	lv_label_set_text(txt_fwd, buffer);
 800cc6c:	4621      	mov	r1, r4
 800cc6e:	4628      	mov	r0, r5
 800cc70:	f00a fb7a 	bl	8017368 <lv_label_set_text>
	lv_obj_set_width(txt_fwd, 200); 									// Configuura o comprimento
 800cc74:	4628      	mov	r0, r5
 800cc76:	21c8      	movs	r1, #200	; 0xc8
 800cc78:	f002 f818 	bl	800ecac <lv_obj_set_width>
	lv_obj_align(txt_fwd, NULL, LV_ALIGN_IN_BOTTOM_RIGHT, -30, -13); 		// Alinha ao centro
 800cc7c:	f06f 030c 	mvn.w	r3, #12
 800cc80:	9300      	str	r3, [sp, #0]
 800cc82:	2206      	movs	r2, #6
 800cc84:	f06f 031d 	mvn.w	r3, #29
 800cc88:	2100      	movs	r1, #0
 800cc8a:	4628      	mov	r0, r5
 800cc8c:	f001 fc24 	bl	800e4d8 <lv_obj_align>
}
 800cc90:	b002      	add	sp, #8
 800cc92:	bd70      	pop	{r4, r5, r6, pc}
 800cc94:	20005c94 	.word	0x20005c94
 800cc98:	2000c424 	.word	0x2000c424
 800cc9c:	20000d0c 	.word	0x20000d0c
 800cca0:	20005abc 	.word	0x20005abc
 800cca4:	20004cd0 	.word	0x20004cd0
 800cca8:	402e0000 	.word	0x402e0000
 800ccac:	0802bde4 	.word	0x0802bde4

0800ccb0 <create_vumeter_fwd>:
{
 800ccb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800ccb2:	4e30      	ldr	r6, [pc, #192]	; (800cd74 <create_vumeter_fwd+0xc4>)
 800ccb4:	4930      	ldr	r1, [pc, #192]	; (800cd78 <create_vumeter_fwd+0xc8>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800ccb6:	4c31      	ldr	r4, [pc, #196]	; (800cd7c <create_vumeter_fwd+0xcc>)
		bar_fwd[x] = lv_bar_create(Tela_RF, NULL);
 800ccb8:	4f31      	ldr	r7, [pc, #196]	; (800cd80 <create_vumeter_fwd+0xd0>)
	lv_style_copy(&style_indic_bar, &lv_style_pretty);
 800ccba:	4630      	mov	r0, r6
 800ccbc:	f002 fd0a 	bl	800f6d4 <lv_style_copy>
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800ccc0:	4b30      	ldr	r3, [pc, #192]	; (800cd84 <create_vumeter_fwd+0xd4>)
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800ccc2:	492d      	ldr	r1, [pc, #180]	; (800cd78 <create_vumeter_fwd+0xc8>)
	style_indic_bar.body.grad_color = LV_COLOR_MAKE(105, 105, 105);
 800ccc4:	881b      	ldrh	r3, [r3, #0]
 800ccc6:	80b3      	strh	r3, [r6, #4]
	style_indic_bar.body.radius = 0;
 800ccc8:	2500      	movs	r5, #0
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800ccca:	4620      	mov	r0, r4
	style_indic_bar.body.main_color = LV_COLOR_MAKE(105, 105, 105);
 800cccc:	8073      	strh	r3, [r6, #2]
	style_indic_bar.body.border.color = LV_COLOR_MAKE(105, 105, 105);
 800ccce:	8173      	strh	r3, [r6, #10]
	style_indic_bar.body.radius = 0;
 800ccd0:	80f5      	strh	r5, [r6, #6]
	lv_style_copy(&style_indic_bar_vd, &lv_style_pretty);
 800ccd2:	f002 fcff 	bl	800f6d4 <lv_style_copy>
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800ccd6:	7923      	ldrb	r3, [r4, #4]
	style_indic_bar_vd.body.radius = 0;
 800ccd8:	80e5      	strh	r5, [r4, #6]
	style_indic_bar_vd.body.grad_color = LV_COLOR_MAKE(0, 255, 0);
 800ccda:	f365 0304 	bfi	r3, r5, #0, #5
 800ccde:	7123      	strb	r3, [r4, #4]
 800cce0:	88a3      	ldrh	r3, [r4, #4]
 800cce2:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800cce6:	80a3      	strh	r3, [r4, #4]
 800cce8:	0a1b      	lsrs	r3, r3, #8
 800ccea:	f365 03c7 	bfi	r3, r5, #3, #5
 800ccee:	7163      	strb	r3, [r4, #5]
	style_indic_bar_vd.body.main_color = LV_COLOR_MAKE(0, 255, 0);
 800ccf0:	78a3      	ldrb	r3, [r4, #2]
 800ccf2:	f365 0304 	bfi	r3, r5, #0, #5
 800ccf6:	70a3      	strb	r3, [r4, #2]
 800ccf8:	8863      	ldrh	r3, [r4, #2]
 800ccfa:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800ccfe:	8063      	strh	r3, [r4, #2]
 800cd00:	0a1b      	lsrs	r3, r3, #8
 800cd02:	f365 03c7 	bfi	r3, r5, #3, #5
 800cd06:	70e3      	strb	r3, [r4, #3]
	style_indic_bar_vd.body.border.color = LV_COLOR_MAKE(0, 255, 0);
 800cd08:	7aa3      	ldrb	r3, [r4, #10]
 800cd0a:	f365 0304 	bfi	r3, r5, #0, #5
 800cd0e:	72a3      	strb	r3, [r4, #10]
 800cd10:	8963      	ldrh	r3, [r4, #10]
 800cd12:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800cd16:	8163      	strh	r3, [r4, #10]
 800cd18:	0a1b      	lsrs	r3, r3, #8
 800cd1a:	f365 03c7 	bfi	r3, r5, #3, #5
 800cd1e:	72e3      	strb	r3, [r4, #11]
 800cd20:	4c19      	ldr	r4, [pc, #100]	; (800cd88 <create_vumeter_fwd+0xd8>)
		bar_fwd[x] = lv_bar_create(Tela_RF, NULL);
 800cd22:	6838      	ldr	r0, [r7, #0]
 800cd24:	2100      	movs	r1, #0
 800cd26:	f007 fdb7 	bl	8014898 <lv_bar_create>
		lv_obj_set_size(bar_fwd[x], 4, 19);
 800cd2a:	2213      	movs	r2, #19
		bar_fwd[x] = lv_bar_create(Tela_RF, NULL);
 800cd2c:	6060      	str	r0, [r4, #4]
		lv_obj_set_size(bar_fwd[x], 4, 19);
 800cd2e:	2104      	movs	r1, #4
 800cd30:	f001 ff72 	bl	800ec18 <lv_obj_set_size>
		lv_bar_set_style(bar_fwd[x], LV_BAR_STYLE_BG, &style_indic_bar);
 800cd34:	6860      	ldr	r0, [r4, #4]
 800cd36:	4632      	mov	r2, r6
 800cd38:	2100      	movs	r1, #0
 800cd3a:	f007 fd97 	bl	801486c <lv_bar_set_style>
		lv_bar_set_style(bar_fwd[x], LV_BAR_STYLE_INDIC, &style_indic_bar);
 800cd3e:	6860      	ldr	r0, [r4, #4]
 800cd40:	4632      	mov	r2, r6
 800cd42:	2101      	movs	r1, #1
 800cd44:	f007 fd92 	bl	801486c <lv_bar_set_style>
		lv_obj_align(bar_fwd[x], NULL, LV_ALIGN_IN_TOP_LEFT, fwd_pos_x[x], 86);
 800cd48:	2256      	movs	r2, #86	; 0x56
 800cd4a:	4b10      	ldr	r3, [pc, #64]	; (800cd8c <create_vumeter_fwd+0xdc>)
 800cd4c:	9200      	str	r2, [sp, #0]
 800cd4e:	f933 3025 	ldrsh.w	r3, [r3, r5, lsl #2]
 800cd52:	6860      	ldr	r0, [r4, #4]
 800cd54:	2201      	movs	r2, #1
 800cd56:	2100      	movs	r1, #0
 800cd58:	f001 fbbe 	bl	800e4d8 <lv_obj_align>
 800cd5c:	3501      	adds	r5, #1
		lv_bar_set_value(bar_fwd[x], 100, 0);
 800cd5e:	2200      	movs	r2, #0
 800cd60:	2164      	movs	r1, #100	; 0x64
 800cd62:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800cd66:	f007 fd25 	bl	80147b4 <lv_bar_set_value>
	for(uint8_t x = 0; x < 20; x++) {
 800cd6a:	2d14      	cmp	r5, #20
 800cd6c:	d1d9      	bne.n	800cd22 <create_vumeter_fwd+0x72>
}
 800cd6e:	b003      	add	sp, #12
 800cd70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd72:	bf00      	nop
 800cd74:	20005ba4 	.word	0x20005ba4
 800cd78:	2000c334 	.word	0x2000c334
 800cd7c:	20005be0 	.word	0x20005be0
 800cd80:	20005ab4 	.word	0x20005ab4
 800cd84:	0801cb1e 	.word	0x0801cb1e
 800cd88:	20005abc 	.word	0x20005abc
 800cd8c:	0802c04c 	.word	0x0802c04c

0800cd90 <btn_next_rf>:
{
 800cd90:	b538      	push	{r3, r4, r5, lr}
	lv_obj_t * imgbtn1 = lv_imgbtn_create(Tela_RF, NULL);
 800cd92:	4b15      	ldr	r3, [pc, #84]	; (800cde8 <btn_next_rf+0x58>)
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_REL, &Btn_next);
 800cd94:	4d15      	ldr	r5, [pc, #84]	; (800cdec <btn_next_rf+0x5c>)
	lv_obj_t * imgbtn1 = lv_imgbtn_create(Tela_RF, NULL);
 800cd96:	6818      	ldr	r0, [r3, #0]
 800cd98:	2100      	movs	r1, #0
 800cd9a:	f009 fdeb 	bl	8016974 <lv_imgbtn_create>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_REL, &Btn_next);
 800cd9e:	462a      	mov	r2, r5
	lv_obj_t * imgbtn1 = lv_imgbtn_create(Tela_RF, NULL);
 800cda0:	4604      	mov	r4, r0
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_REL, &Btn_next);
 800cda2:	2100      	movs	r1, #0
 800cda4:	f009 fe2e 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_TGL_REL, &Btn_next);
 800cda8:	462a      	mov	r2, r5
 800cdaa:	4620      	mov	r0, r4
 800cdac:	2102      	movs	r1, #2
 800cdae:	f009 fe29 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_TGL_PR, &Btn_next);
 800cdb2:	462a      	mov	r2, r5
 800cdb4:	4620      	mov	r0, r4
 800cdb6:	2103      	movs	r1, #3
 800cdb8:	f009 fe24 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_PR, &Btn_next);
 800cdbc:	462a      	mov	r2, r5
 800cdbe:	4620      	mov	r0, r4
 800cdc0:	2101      	movs	r1, #1
 800cdc2:	f009 fe1f 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_INA, &Btn_next);
 800cdc6:	462a      	mov	r2, r5
 800cdc8:	4620      	mov	r0, r4
 800cdca:	2104      	movs	r1, #4
 800cdcc:	f009 fe1a 	bl	8016a04 <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn1, btn_event_next_rf);
 800cdd0:	4620      	mov	r0, r4
 800cdd2:	4907      	ldr	r1, [pc, #28]	; (800cdf0 <btn_next_rf+0x60>)
 800cdd4:	f001 f9e1 	bl	800e19a <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn1, 112, 18);
 800cdd8:	4620      	mov	r0, r4
 800cdda:	2212      	movs	r2, #18
 800cddc:	2170      	movs	r1, #112	; 0x70
}
 800cdde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lv_obj_set_pos(imgbtn1, 112, 18);
 800cde2:	f001 bb24 	b.w	800e42e <lv_obj_set_pos>
 800cde6:	bf00      	nop
 800cde8:	20005ab4 	.word	0x20005ab4
 800cdec:	20001ad8 	.word	0x20001ad8
 800cdf0:	0800d439 	.word	0x0800d439

0800cdf4 <btn_next_rf1>:
{
 800cdf4:	b538      	push	{r3, r4, r5, lr}
	lv_obj_t * imgbtn1 = lv_imgbtn_create(Tela_RF_1, NULL);
 800cdf6:	4b15      	ldr	r3, [pc, #84]	; (800ce4c <btn_next_rf1+0x58>)
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_REL, &Btn_next);
 800cdf8:	4d15      	ldr	r5, [pc, #84]	; (800ce50 <btn_next_rf1+0x5c>)
	lv_obj_t * imgbtn1 = lv_imgbtn_create(Tela_RF_1, NULL);
 800cdfa:	6818      	ldr	r0, [r3, #0]
 800cdfc:	2100      	movs	r1, #0
 800cdfe:	f009 fdb9 	bl	8016974 <lv_imgbtn_create>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_REL, &Btn_next);
 800ce02:	462a      	mov	r2, r5
	lv_obj_t * imgbtn1 = lv_imgbtn_create(Tela_RF_1, NULL);
 800ce04:	4604      	mov	r4, r0
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_REL, &Btn_next);
 800ce06:	2100      	movs	r1, #0
 800ce08:	f009 fdfc 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_TGL_REL, &Btn_next);
 800ce0c:	462a      	mov	r2, r5
 800ce0e:	4620      	mov	r0, r4
 800ce10:	2102      	movs	r1, #2
 800ce12:	f009 fdf7 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_TGL_PR, &Btn_next);
 800ce16:	462a      	mov	r2, r5
 800ce18:	4620      	mov	r0, r4
 800ce1a:	2103      	movs	r1, #3
 800ce1c:	f009 fdf2 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_PR, &Btn_next);
 800ce20:	462a      	mov	r2, r5
 800ce22:	4620      	mov	r0, r4
 800ce24:	2101      	movs	r1, #1
 800ce26:	f009 fded 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_INA, &Btn_next);
 800ce2a:	462a      	mov	r2, r5
 800ce2c:	4620      	mov	r0, r4
 800ce2e:	2104      	movs	r1, #4
 800ce30:	f009 fde8 	bl	8016a04 <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn1, btn_event_next_rf1);
 800ce34:	4620      	mov	r0, r4
 800ce36:	4907      	ldr	r1, [pc, #28]	; (800ce54 <btn_next_rf1+0x60>)
 800ce38:	f001 f9af 	bl	800e19a <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn1, 112, 18);
 800ce3c:	4620      	mov	r0, r4
 800ce3e:	2212      	movs	r2, #18
 800ce40:	2170      	movs	r1, #112	; 0x70
}
 800ce42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lv_obj_set_pos(imgbtn1, 112, 18);
 800ce46:	f001 baf2 	b.w	800e42e <lv_obj_set_pos>
 800ce4a:	bf00      	nop
 800ce4c:	20005ab8 	.word	0x20005ab8
 800ce50:	20001ad8 	.word	0x20001ad8
 800ce54:	0800d001 	.word	0x0800d001

0800ce58 <btn_prev_rf2>:
{
 800ce58:	b538      	push	{r3, r4, r5, lr}
	lv_obj_t * imgbtn1 = lv_imgbtn_create(Tela_RF_1, NULL);
 800ce5a:	4b15      	ldr	r3, [pc, #84]	; (800ceb0 <btn_prev_rf2+0x58>)
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_REL, &Btn_prev);
 800ce5c:	4d15      	ldr	r5, [pc, #84]	; (800ceb4 <btn_prev_rf2+0x5c>)
	lv_obj_t * imgbtn1 = lv_imgbtn_create(Tela_RF_1, NULL);
 800ce5e:	6818      	ldr	r0, [r3, #0]
 800ce60:	2100      	movs	r1, #0
 800ce62:	f009 fd87 	bl	8016974 <lv_imgbtn_create>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_REL, &Btn_prev);
 800ce66:	462a      	mov	r2, r5
	lv_obj_t * imgbtn1 = lv_imgbtn_create(Tela_RF_1, NULL);
 800ce68:	4604      	mov	r4, r0
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_REL, &Btn_prev);
 800ce6a:	2100      	movs	r1, #0
 800ce6c:	f009 fdca 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_TGL_REL, &Btn_prev);
 800ce70:	462a      	mov	r2, r5
 800ce72:	4620      	mov	r0, r4
 800ce74:	2102      	movs	r1, #2
 800ce76:	f009 fdc5 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_TGL_PR, &Btn_prev);
 800ce7a:	462a      	mov	r2, r5
 800ce7c:	4620      	mov	r0, r4
 800ce7e:	2103      	movs	r1, #3
 800ce80:	f009 fdc0 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_PR, &Btn_prev);
 800ce84:	462a      	mov	r2, r5
 800ce86:	4620      	mov	r0, r4
 800ce88:	2101      	movs	r1, #1
 800ce8a:	f009 fdbb 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_INA, &Btn_prev);
 800ce8e:	462a      	mov	r2, r5
 800ce90:	4620      	mov	r0, r4
 800ce92:	2104      	movs	r1, #4
 800ce94:	f009 fdb6 	bl	8016a04 <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn1, btn_event_prev_rf2);
 800ce98:	4620      	mov	r0, r4
 800ce9a:	4907      	ldr	r1, [pc, #28]	; (800ceb8 <btn_prev_rf2+0x60>)
 800ce9c:	f001 f97d 	bl	800e19a <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn1, 32, 18);
 800cea0:	4620      	mov	r0, r4
 800cea2:	2212      	movs	r2, #18
 800cea4:	2120      	movs	r1, #32
}
 800cea6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lv_obj_set_pos(imgbtn1, 32, 18);
 800ceaa:	f001 bac0 	b.w	800e42e <lv_obj_set_pos>
 800ceae:	bf00      	nop
 800ceb0:	20005ab8 	.word	0x20005ab8
 800ceb4:	20001b44 	.word	0x20001b44
 800ceb8:	0800d46d 	.word	0x0800d46d

0800cebc <screen_RF_2>:
	Tela_RF_2 = lv_obj_create(NULL, NULL);
 800cebc:	2100      	movs	r1, #0
{
 800cebe:	b538      	push	{r3, r4, r5, lr}
	Tela_RF_2 = lv_obj_create(NULL, NULL);
 800cec0:	4608      	mov	r0, r1
 800cec2:	f001 fd2b 	bl	800e91c <lv_obj_create>
 800cec6:	4d42      	ldr	r5, [pc, #264]	; (800cfd0 <screen_RF_2+0x114>)
	img_fundo = lv_img_create(Tela_RF_2, NULL);
 800cec8:	4c42      	ldr	r4, [pc, #264]	; (800cfd4 <screen_RF_2+0x118>)
	Tela_RF_2 = lv_obj_create(NULL, NULL);
 800ceca:	6028      	str	r0, [r5, #0]
	img_fundo = lv_img_create(Tela_RF_2, NULL);
 800cecc:	2100      	movs	r1, #0
 800cece:	f009 fc27 	bl	8016720 <lv_img_create>
    lv_img_set_src(img_fundo, "P:/EX15-XT/img/tela_rf_2.bin");
 800ced2:	4941      	ldr	r1, [pc, #260]	; (800cfd8 <screen_RF_2+0x11c>)
	img_fundo = lv_img_create(Tela_RF_2, NULL);
 800ced4:	6020      	str	r0, [r4, #0]
    lv_img_set_src(img_fundo, "P:/EX15-XT/img/tela_rf_2.bin");
 800ced6:	f009 fb93 	bl	8016600 <lv_img_set_src>
	lv_obj_set_protect(img_fundo, LV_PROTECT_POS);
 800ceda:	6820      	ldr	r0, [r4, #0]
	imgbtn1[0] = lv_imgbtn_create(Tela_RF_2, NULL);
 800cedc:	4c3f      	ldr	r4, [pc, #252]	; (800cfdc <screen_RF_2+0x120>)
	lv_obj_set_protect(img_fundo, LV_PROTECT_POS);
 800cede:	2104      	movs	r1, #4
 800cee0:	f001 f94e 	bl	800e180 <lv_obj_set_protect>
	imgbtn1[0] = lv_imgbtn_create(Tela_RF_2, NULL);
 800cee4:	2100      	movs	r1, #0
 800cee6:	6828      	ldr	r0, [r5, #0]
 800cee8:	f009 fd44 	bl	8016974 <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn1[0], 0);
 800ceec:	2100      	movs	r1, #0
	imgbtn1[0] = lv_imgbtn_create(Tela_RF_2, NULL);
 800ceee:	6020      	str	r0, [r4, #0]
	lv_obj_set_user_data(imgbtn1[0], 0);
 800cef0:	f002 f8b1 	bl	800f056 <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_REL, &Btn_poweron);
 800cef4:	4a3a      	ldr	r2, [pc, #232]	; (800cfe0 <screen_RF_2+0x124>)
 800cef6:	6820      	ldr	r0, [r4, #0]
 800cef8:	2100      	movs	r1, #0
 800cefa:	f009 fd83 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_TGL_REL, &Btn_poweron_vd);
 800cefe:	4a39      	ldr	r2, [pc, #228]	; (800cfe4 <screen_RF_2+0x128>)
 800cf00:	6820      	ldr	r0, [r4, #0]
 800cf02:	2102      	movs	r1, #2
 800cf04:	f009 fd7e 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_TGL_PR, &Btn_poweron);
 800cf08:	4a35      	ldr	r2, [pc, #212]	; (800cfe0 <screen_RF_2+0x124>)
 800cf0a:	6820      	ldr	r0, [r4, #0]
 800cf0c:	2103      	movs	r1, #3
 800cf0e:	f009 fd79 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_PR, &Btn_poweron);
 800cf12:	4a33      	ldr	r2, [pc, #204]	; (800cfe0 <screen_RF_2+0x124>)
 800cf14:	6820      	ldr	r0, [r4, #0]
 800cf16:	2101      	movs	r1, #1
 800cf18:	f009 fd74 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_INA, &Btn_poweron);
 800cf1c:	4a30      	ldr	r2, [pc, #192]	; (800cfe0 <screen_RF_2+0x124>)
 800cf1e:	6820      	ldr	r0, [r4, #0]
 800cf20:	2104      	movs	r1, #4
 800cf22:	f009 fd6f 	bl	8016a04 <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn1[0], btn_power);
 800cf26:	4930      	ldr	r1, [pc, #192]	; (800cfe8 <screen_RF_2+0x12c>)
 800cf28:	6820      	ldr	r0, [r4, #0]
 800cf2a:	f001 f936 	bl	800e19a <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn1[0], 1, 35);
 800cf2e:	2223      	movs	r2, #35	; 0x23
 800cf30:	2101      	movs	r1, #1
 800cf32:	6820      	ldr	r0, [r4, #0]
 800cf34:	f001 fa7b 	bl	800e42e <lv_obj_set_pos>
	imgbtn1[1] = lv_imgbtn_create(Tela_RF_2, imgbtn1[0]);
 800cf38:	6821      	ldr	r1, [r4, #0]
 800cf3a:	6828      	ldr	r0, [r5, #0]
 800cf3c:	f009 fd1a 	bl	8016974 <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn1[1], 1);
 800cf40:	2101      	movs	r1, #1
	imgbtn1[1] = lv_imgbtn_create(Tela_RF_2, imgbtn1[0]);
 800cf42:	6060      	str	r0, [r4, #4]
	lv_obj_set_user_data(imgbtn1[1], 1);
 800cf44:	f002 f887 	bl	800f056 <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_REL, &Btn_poweroff);
 800cf48:	4a28      	ldr	r2, [pc, #160]	; (800cfec <screen_RF_2+0x130>)
 800cf4a:	6860      	ldr	r0, [r4, #4]
 800cf4c:	2100      	movs	r1, #0
 800cf4e:	f009 fd59 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_TGL_REL, &Btn_poweroff_vm);
 800cf52:	4a27      	ldr	r2, [pc, #156]	; (800cff0 <screen_RF_2+0x134>)
 800cf54:	6860      	ldr	r0, [r4, #4]
 800cf56:	2102      	movs	r1, #2
 800cf58:	f009 fd54 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_TGL_PR, &Btn_poweroff);
 800cf5c:	4a23      	ldr	r2, [pc, #140]	; (800cfec <screen_RF_2+0x130>)
 800cf5e:	6860      	ldr	r0, [r4, #4]
 800cf60:	2103      	movs	r1, #3
 800cf62:	f009 fd4f 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_PR, &Btn_poweroff);
 800cf66:	4a21      	ldr	r2, [pc, #132]	; (800cfec <screen_RF_2+0x130>)
 800cf68:	6860      	ldr	r0, [r4, #4]
 800cf6a:	2101      	movs	r1, #1
 800cf6c:	f009 fd4a 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_INA, &Btn_poweroff);
 800cf70:	4a1e      	ldr	r2, [pc, #120]	; (800cfec <screen_RF_2+0x130>)
 800cf72:	6860      	ldr	r0, [r4, #4]
 800cf74:	2104      	movs	r1, #4
 800cf76:	f009 fd45 	bl	8016a04 <lv_imgbtn_set_src>
	lv_obj_set_pos(imgbtn1[1], 1, 63);
 800cf7a:	223f      	movs	r2, #63	; 0x3f
 800cf7c:	2101      	movs	r1, #1
 800cf7e:	6860      	ldr	r0, [r4, #4]
 800cf80:	f001 fa55 	bl	800e42e <lv_obj_set_pos>
	if(RFEnable) {
 800cf84:	4b1b      	ldr	r3, [pc, #108]	; (800cff4 <screen_RF_2+0x138>)
 800cf86:	781b      	ldrb	r3, [r3, #0]
 800cf88:	b1db      	cbz	r3, 800cfc2 <screen_RF_2+0x106>
		lv_btn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_REL);
 800cf8a:	2102      	movs	r1, #2
 800cf8c:	6820      	ldr	r0, [r4, #0]
 800cf8e:	f007 fe65 	bl	8014c5c <lv_btn_set_state>
		lv_btn_set_state(imgbtn1[1], LV_BTN_STATE_TGL_PR);
 800cf92:	2103      	movs	r1, #3
		lv_btn_set_state(imgbtn1[1], LV_BTN_STATE_TGL_REL);
 800cf94:	6860      	ldr	r0, [r4, #4]
	update_vumeter_pwr(forward);
 800cf96:	4c18      	ldr	r4, [pc, #96]	; (800cff8 <screen_RF_2+0x13c>)
		lv_btn_set_state(imgbtn1[1], LV_BTN_STATE_TGL_REL);
 800cf98:	f007 fe60 	bl	8014c5c <lv_btn_set_state>
	btn_prev_rf2();
 800cf9c:	f7ff ff5c 	bl	800ce58 <btn_prev_rf2>
	create_vumeter_pwr();
 800cfa0:	f7ff fcdc 	bl	800c95c <create_vumeter_pwr>
	update_vumeter_pwr(forward);
 800cfa4:	ed94 0a00 	vldr	s0, [r4]
 800cfa8:	f7ff fe12 	bl	800cbd0 <update_vumeter_pwr>
	print_pwr(forward);
 800cfac:	ed94 0a00 	vldr	s0, [r4]
 800cfb0:	f7ff fe26 	bl	800cc00 <print_pwr>
 800cfb4:	6828      	ldr	r0, [r5, #0]
 800cfb6:	f000 fe9d 	bl	800dcf4 <lv_disp_load_scr>
	TelaAtiva = TelaRF_2;
 800cfba:	4b10      	ldr	r3, [pc, #64]	; (800cffc <screen_RF_2+0x140>)
 800cfbc:	2208      	movs	r2, #8
 800cfbe:	601a      	str	r2, [r3, #0]
 800cfc0:	bd38      	pop	{r3, r4, r5, pc}
		lv_btn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_PR);
 800cfc2:	2103      	movs	r1, #3
 800cfc4:	6820      	ldr	r0, [r4, #0]
 800cfc6:	f007 fe49 	bl	8014c5c <lv_btn_set_state>
		lv_btn_set_state(imgbtn1[1], LV_BTN_STATE_TGL_REL);
 800cfca:	2102      	movs	r1, #2
 800cfcc:	e7e2      	b.n	800cf94 <screen_RF_2+0xd8>
 800cfce:	bf00      	nop
 800cfd0:	20005abc 	.word	0x20005abc
 800cfd4:	20005b88 	.word	0x20005b88
 800cfd8:	0802c109 	.word	0x0802c109
 800cfdc:	20005b8c 	.word	0x20005b8c
 800cfe0:	20001b2c 	.word	0x20001b2c
 800cfe4:	20001b38 	.word	0x20001b38
 800cfe8:	0800c76d 	.word	0x0800c76d
 800cfec:	20001b14 	.word	0x20001b14
 800cff0:	20001b20 	.word	0x20001b20
 800cff4:	20000001 	.word	0x20000001
 800cff8:	20004db8 	.word	0x20004db8
 800cffc:	200033cc 	.word	0x200033cc

0800d000 <btn_event_next_rf1>:
	if(event == LV_EVENT_RELEASED) {
 800d000:	2907      	cmp	r1, #7
{
 800d002:	b508      	push	{r3, lr}
	if(event == LV_EVENT_RELEASED) {
 800d004:	d10e      	bne.n	800d024 <btn_event_next_rf1+0x24>
		printf("Button Next  1 Released\n");
 800d006:	4808      	ldr	r0, [pc, #32]	; (800d028 <btn_event_next_rf1+0x28>)
 800d008:	f00c fb04 	bl	8019614 <puts>
		lv_task_del(Task_RF_1);
 800d00c:	4b07      	ldr	r3, [pc, #28]	; (800d02c <btn_event_next_rf1+0x2c>)
 800d00e:	6818      	ldr	r0, [r3, #0]
 800d010:	f007 f83c 	bl	801408c <lv_task_del>
		lv_obj_del(Tela_RF_1);
 800d014:	4b06      	ldr	r3, [pc, #24]	; (800d030 <btn_event_next_rf1+0x30>)
 800d016:	6818      	ldr	r0, [r3, #0]
 800d018:	f001 fe71 	bl	800ecfe <lv_obj_del>
}
 800d01c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_RF_2();
 800d020:	f7ff bf4c 	b.w	800cebc <screen_RF_2>
 800d024:	bd08      	pop	{r3, pc}
 800d026:	bf00      	nop
 800d028:	0802c01b 	.word	0x0802c01b
 800d02c:	20005ab0 	.word	0x20005ab0
 800d030:	20005ab8 	.word	0x20005ab8

0800d034 <prog_swr>:
	if( swr > 0) {
 800d034:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 800d03c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if( swr > 0) {
 800d040:	f340 8092 	ble.w	800d168 <prog_swr+0x134>
		teste = (uint32_t) swr * 10;
 800d044:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 800d048:	220a      	movs	r2, #10
 800d04a:	ee10 3a10 	vmov	r3, s0
		un = teste / 100;
 800d04e:	2664      	movs	r6, #100	; 0x64
		teste = (uint32_t) swr * 10;
 800d050:	4353      	muls	r3, r2
		un = teste / 100;
 800d052:	fbb3 f7f6 	udiv	r7, r3, r6
		ml = (teste % 100) / 10;
 800d056:	fb06 3617 	mls	r6, r6, r7, r3
 800d05a:	fbb6 f6f2 	udiv	r6, r6, r2
	lv_style_copy(&style_txt, &lv_style_plain_color);
 800d05e:	4d44      	ldr	r5, [pc, #272]	; (800d170 <prog_swr+0x13c>)
 800d060:	4944      	ldr	r1, [pc, #272]	; (800d174 <prog_swr+0x140>)
	rollerswr[0] = lv_roller_create(Tela_RF, NULL);
 800d062:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800d18c <prog_swr+0x158>
 800d066:	4c44      	ldr	r4, [pc, #272]	; (800d178 <prog_swr+0x144>)
	lv_style_copy(&style_txt, &lv_style_plain_color);
 800d068:	4628      	mov	r0, r5
 800d06a:	f002 fb33 	bl	800f6d4 <lv_style_copy>
	style_txt.body.main_color = LV_COLOR_GRAY;
 800d06e:	4a43      	ldr	r2, [pc, #268]	; (800d17c <prog_swr+0x148>)
	rollerswr[0] = lv_roller_create(Tela_RF, NULL);
 800d070:	f8d9 0000 	ldr.w	r0, [r9]
	style_txt.body.main_color = LV_COLOR_GRAY;
 800d074:	8893      	ldrh	r3, [r2, #4]
 800d076:	806b      	strh	r3, [r5, #2]
	style_txt.body.grad_color = LV_COLOR_BLACK;
 800d078:	792b      	ldrb	r3, [r5, #4]
 800d07a:	f36f 0304 	bfc	r3, #0, #5
 800d07e:	712b      	strb	r3, [r5, #4]
 800d080:	88ab      	ldrh	r3, [r5, #4]
 800d082:	f36f 134a 	bfc	r3, #5, #6
 800d086:	80ab      	strh	r3, [r5, #4]
 800d088:	0a1b      	lsrs	r3, r3, #8
 800d08a:	f36f 03c7 	bfc	r3, #3, #5
 800d08e:	716b      	strb	r3, [r5, #5]
	style_txt.text.font = &lv_font_eurostile_24;
 800d090:	4b3b      	ldr	r3, [pc, #236]	; (800d180 <prog_swr+0x14c>)
 800d092:	626b      	str	r3, [r5, #36]	; 0x24
	style_txt.text.line_space = 24;
 800d094:	2318      	movs	r3, #24
	style_txt.text.letter_space = 2;
 800d096:	f04f 0802 	mov.w	r8, #2
	style_txt.text.line_space = 24;
 800d09a:	856b      	strh	r3, [r5, #42]	; 0x2a
	rollerswr[0] = lv_roller_create(Tela_RF, NULL);
 800d09c:	2100      	movs	r1, #0
	style_txt.text.color = LV_COLOR_WHITE;
 800d09e:	8853      	ldrh	r3, [r2, #2]
 800d0a0:	842b      	strh	r3, [r5, #32]
	style_txt.text.letter_space = 2;
 800d0a2:	f8a5 8028 	strh.w	r8, [r5, #40]	; 0x28
	rollerswr[0] = lv_roller_create(Tela_RF, NULL);
 800d0a6:	f00b fdef 	bl	8018c88 <lv_roller_create>
	lv_obj_set_user_data(rollerswr[0], 5);
 800d0aa:	2105      	movs	r1, #5
	rollerswr[0] = lv_roller_create(Tela_RF, NULL);
 800d0ac:	6020      	str	r0, [r4, #0]
	lv_obj_set_user_data(rollerswr[0], 5);
 800d0ae:	f001 ffd2 	bl	800f056 <lv_obj_set_user_data>
    lv_roller_set_options(rollerswr[0], "0\n1\n2\n3\n4\n5\n6\n7\n8\n9", LV_ROLLER_MODE_INIFINITE);
 800d0b2:	2201      	movs	r2, #1
 800d0b4:	6820      	ldr	r0, [r4, #0]
 800d0b6:	4933      	ldr	r1, [pc, #204]	; (800d184 <prog_swr+0x150>)
 800d0b8:	f00b ff40 	bl	8018f3c <lv_roller_set_options>
    lv_roller_set_visible_row_count(rollerswr[0], 2);
 800d0bc:	4641      	mov	r1, r8
 800d0be:	6820      	ldr	r0, [r4, #0]
 800d0c0:	f00b fdc6 	bl	8018c50 <lv_roller_set_visible_row_count>
    lv_roller_set_selected(rollerswr[0], un, true);
 800d0c4:	2201      	movs	r2, #1
 800d0c6:	b2b9      	uxth	r1, r7
 800d0c8:	6820      	ldr	r0, [r4, #0]
 800d0ca:	f00b fe93 	bl	8018df4 <lv_roller_set_selected>
    lv_ddlist_set_fix_width(roller, w);
 800d0ce:	6820      	ldr	r0, [r4, #0]
 800d0d0:	2122      	movs	r1, #34	; 0x22
 800d0d2:	f008 ff06 	bl	8015ee2 <lv_ddlist_set_fix_width>
    lv_roller_set_style(rollerswr[0], LV_ROLLER_STYLE_BG, &style_txt);
 800d0d6:	462a      	mov	r2, r5
 800d0d8:	6820      	ldr	r0, [r4, #0]
 800d0da:	2100      	movs	r1, #0
 800d0dc:	f00b fe60 	bl	8018da0 <lv_roller_set_style>
    lv_obj_align(rollerswr[0], NULL, LV_ALIGN_IN_TOP_LEFT, 39, 38);
 800d0e0:	2726      	movs	r7, #38	; 0x26
    lv_roller_set_style(rollerswr[0], LV_ROLLER_STYLE_SEL, &style_txt);
 800d0e2:	462a      	mov	r2, r5
 800d0e4:	6820      	ldr	r0, [r4, #0]
 800d0e6:	2101      	movs	r1, #1
 800d0e8:	f00b fe5a 	bl	8018da0 <lv_roller_set_style>
    lv_obj_align(rollerswr[0], NULL, LV_ALIGN_IN_TOP_LEFT, 39, 38);
 800d0ec:	2327      	movs	r3, #39	; 0x27
 800d0ee:	2201      	movs	r2, #1
 800d0f0:	6820      	ldr	r0, [r4, #0]
 800d0f2:	9700      	str	r7, [sp, #0]
 800d0f4:	2100      	movs	r1, #0
 800d0f6:	f001 f9ef 	bl	800e4d8 <lv_obj_align>
    lv_obj_set_event_cb(rollerswr[0], event_handler_swr);
 800d0fa:	6820      	ldr	r0, [r4, #0]
 800d0fc:	4922      	ldr	r1, [pc, #136]	; (800d188 <prog_swr+0x154>)
 800d0fe:	f001 f84c 	bl	800e19a <lv_obj_set_event_cb>
    rollerswr[1] = lv_roller_create(Tela_RF, NULL);
 800d102:	2100      	movs	r1, #0
 800d104:	f8d9 0000 	ldr.w	r0, [r9]
 800d108:	f00b fdbe 	bl	8018c88 <lv_roller_create>
    lv_obj_set_user_data(rollerswr[1], 4);
 800d10c:	2104      	movs	r1, #4
    rollerswr[1] = lv_roller_create(Tela_RF, NULL);
 800d10e:	6060      	str	r0, [r4, #4]
    lv_obj_set_user_data(rollerswr[1], 4);
 800d110:	f001 ffa1 	bl	800f056 <lv_obj_set_user_data>
    lv_roller_set_options(rollerswr[1], "0\n1\n2\n3\n4\n5\n6\n7\n8\n9", LV_ROLLER_MODE_INIFINITE);
 800d114:	2201      	movs	r2, #1
 800d116:	6860      	ldr	r0, [r4, #4]
 800d118:	491a      	ldr	r1, [pc, #104]	; (800d184 <prog_swr+0x150>)
 800d11a:	f00b ff0f 	bl	8018f3c <lv_roller_set_options>
    lv_roller_set_visible_row_count(rollerswr[1], 2);
 800d11e:	4641      	mov	r1, r8
 800d120:	6860      	ldr	r0, [r4, #4]
 800d122:	f00b fd95 	bl	8018c50 <lv_roller_set_visible_row_count>
    lv_roller_set_selected(rollerswr[1], ml, true);
 800d126:	2201      	movs	r2, #1
 800d128:	b2b1      	uxth	r1, r6
 800d12a:	6860      	ldr	r0, [r4, #4]
 800d12c:	f00b fe62 	bl	8018df4 <lv_roller_set_selected>
 800d130:	6860      	ldr	r0, [r4, #4]
 800d132:	2123      	movs	r1, #35	; 0x23
 800d134:	f008 fed5 	bl	8015ee2 <lv_ddlist_set_fix_width>
    lv_roller_set_style(rollerswr[1], LV_ROLLER_STYLE_BG, &style_txt);
 800d138:	462a      	mov	r2, r5
 800d13a:	6860      	ldr	r0, [r4, #4]
 800d13c:	2100      	movs	r1, #0
 800d13e:	f00b fe2f 	bl	8018da0 <lv_roller_set_style>
    lv_roller_set_style(rollerswr[1], LV_ROLLER_STYLE_SEL, &style_txt);
 800d142:	462a      	mov	r2, r5
 800d144:	6860      	ldr	r0, [r4, #4]
 800d146:	2101      	movs	r1, #1
 800d148:	f00b fe2a 	bl	8018da0 <lv_roller_set_style>
    lv_obj_align(rollerswr[1], NULL, LV_ALIGN_IN_TOP_LEFT, 84, 38);
 800d14c:	6860      	ldr	r0, [r4, #4]
 800d14e:	9700      	str	r7, [sp, #0]
 800d150:	2354      	movs	r3, #84	; 0x54
 800d152:	2201      	movs	r2, #1
 800d154:	2100      	movs	r1, #0
 800d156:	f001 f9bf 	bl	800e4d8 <lv_obj_align>
    lv_obj_set_event_cb(rollerswr[1], event_handler_swr);
 800d15a:	490b      	ldr	r1, [pc, #44]	; (800d188 <prog_swr+0x154>)
 800d15c:	6860      	ldr	r0, [r4, #4]
}
 800d15e:	b003      	add	sp, #12
 800d160:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    lv_obj_set_event_cb(rollerswr[1], event_handler_swr);
 800d164:	f001 b819 	b.w	800e19a <lv_obj_set_event_cb>
		ml = 0;
 800d168:	2600      	movs	r6, #0
		un = 0;
 800d16a:	4637      	mov	r7, r6
 800d16c:	e777      	b.n	800d05e <prog_swr+0x2a>
 800d16e:	bf00      	nop
 800d170:	20005c1c 	.word	0x20005c1c
 800d174:	2000c514 	.word	0x2000c514
 800d178:	20005b94 	.word	0x20005b94
 800d17c:	0801cb1e 	.word	0x0801cb1e
 800d180:	2000132c 	.word	0x2000132c
 800d184:	0802bc06 	.word	0x0802bc06
 800d188:	0800c7b5 	.word	0x0800c7b5
 800d18c:	20005ab4 	.word	0x20005ab4

0800d190 <screen_rf>:
	Tela_RF = lv_obj_create(NULL, NULL);
 800d190:	2100      	movs	r1, #0
{
 800d192:	b538      	push	{r3, r4, r5, lr}
	Tela_RF = lv_obj_create(NULL, NULL);
 800d194:	4608      	mov	r0, r1
 800d196:	f001 fbc1 	bl	800e91c <lv_obj_create>
 800d19a:	4d19      	ldr	r5, [pc, #100]	; (800d200 <screen_rf+0x70>)
	img_fundo = lv_img_create(Tela_RF, NULL);
 800d19c:	4c19      	ldr	r4, [pc, #100]	; (800d204 <screen_rf+0x74>)
	Tela_RF = lv_obj_create(NULL, NULL);
 800d19e:	6028      	str	r0, [r5, #0]
	img_fundo = lv_img_create(Tela_RF, NULL);
 800d1a0:	2100      	movs	r1, #0
 800d1a2:	f009 fabd 	bl	8016720 <lv_img_create>
    lv_img_set_src(img_fundo, &tela_rf);
 800d1a6:	4918      	ldr	r1, [pc, #96]	; (800d208 <screen_rf+0x78>)
	img_fundo = lv_img_create(Tela_RF, NULL);
 800d1a8:	6020      	str	r0, [r4, #0]
    lv_img_set_src(img_fundo, &tela_rf);
 800d1aa:	f009 fa29 	bl	8016600 <lv_img_set_src>
	lv_obj_set_protect(img_fundo, LV_PROTECT_POS);
 800d1ae:	6820      	ldr	r0, [r4, #0]
 800d1b0:	2104      	movs	r1, #4
 800d1b2:	f000 ffe5 	bl	800e180 <lv_obj_set_protect>
	lv_obj_set_event_cb(img_fundo, btn_event_esc_rf);
 800d1b6:	6820      	ldr	r0, [r4, #0]
 800d1b8:	4914      	ldr	r1, [pc, #80]	; (800d20c <screen_rf+0x7c>)
 800d1ba:	f000 ffee 	bl	800e19a <lv_obj_set_event_cb>
	lv_obj_set_click(img_fundo, 1);
 800d1be:	6820      	ldr	r0, [r4, #0]
	prog_swr(max_rfl);
 800d1c0:	4c13      	ldr	r4, [pc, #76]	; (800d210 <screen_rf+0x80>)
	lv_obj_set_click(img_fundo, 1);
 800d1c2:	2101      	movs	r1, #1
 800d1c4:	f000 ffc0 	bl	800e148 <lv_obj_set_click>
	btn_next_rf();
 800d1c8:	f7ff fde2 	bl	800cd90 <btn_next_rf>
	create_vumeter_swr();
 800d1cc:	f7ff fb56 	bl	800c87c <create_vumeter_swr>
	prog_swr(max_rfl);
 800d1d0:	ed94 0a00 	vldr	s0, [r4]
 800d1d4:	f7ff ff2e 	bl	800d034 <prog_swr>
	update_vumeter_swr(max_rfl);
 800d1d8:	ed94 0a00 	vldr	s0, [r4]
 800d1dc:	f7ff fc2e 	bl	800ca3c <update_vumeter_swr>
 800d1e0:	6828      	ldr	r0, [r5, #0]
 800d1e2:	f000 fd87 	bl	800dcf4 <lv_disp_load_scr>
	Task_RF = lv_task_create(update_rf, 500, LV_TASK_PRIO_MID, NULL);
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	2203      	movs	r2, #3
 800d1ea:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800d1ee:	4809      	ldr	r0, [pc, #36]	; (800d214 <screen_rf+0x84>)
 800d1f0:	f007 f83c 	bl	801426c <lv_task_create>
 800d1f4:	4b08      	ldr	r3, [pc, #32]	; (800d218 <screen_rf+0x88>)
 800d1f6:	6018      	str	r0, [r3, #0]
	TelaAtiva = TelaRF;
 800d1f8:	4b08      	ldr	r3, [pc, #32]	; (800d21c <screen_rf+0x8c>)
 800d1fa:	2206      	movs	r2, #6
 800d1fc:	601a      	str	r2, [r3, #0]
 800d1fe:	bd38      	pop	{r3, r4, r5, pc}
 800d200:	20005ab4 	.word	0x20005ab4
 800d204:	20005b88 	.word	0x20005b88
 800d208:	20001bf8 	.word	0x20001bf8
 800d20c:	0800c745 	.word	0x0800c745
 800d210:	20000008 	.word	0x20000008
 800d214:	0800cb0d 	.word	0x0800cb0d
 800d218:	20005aac 	.word	0x20005aac
 800d21c:	200033cc 	.word	0x200033cc

0800d220 <btn_event_esc_rf1>:
	if(event == LV_EVENT_RELEASED) {
 800d220:	2907      	cmp	r1, #7
{
 800d222:	b508      	push	{r3, lr}
	if(event == LV_EVENT_RELEASED) {
 800d224:	d10b      	bne.n	800d23e <btn_event_esc_rf1+0x1e>
		lv_task_del(Task_RF_1);
 800d226:	4b06      	ldr	r3, [pc, #24]	; (800d240 <btn_event_esc_rf1+0x20>)
 800d228:	6818      	ldr	r0, [r3, #0]
 800d22a:	f006 ff2f 	bl	801408c <lv_task_del>
		lv_obj_del(Tela_RF_1);
 800d22e:	4b05      	ldr	r3, [pc, #20]	; (800d244 <btn_event_esc_rf1+0x24>)
 800d230:	6818      	ldr	r0, [r3, #0]
 800d232:	f001 fd64 	bl	800ecfe <lv_obj_del>
}
 800d236:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_rf();
 800d23a:	f7ff bfa9 	b.w	800d190 <screen_rf>
 800d23e:	bd08      	pop	{r3, pc}
 800d240:	20005ab0 	.word	0x20005ab0
 800d244:	20005ab8 	.word	0x20005ab8

0800d248 <prog_target>:
	if( fwd > 0) {
 800d248:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d24c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 800d250:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if( fwd > 0) {
 800d254:	f340 8092 	ble.w	800d37c <prog_target+0x134>
		teste = (uint32_t) fwd * 10;
 800d258:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 800d25c:	220a      	movs	r2, #10
 800d25e:	ee10 3a10 	vmov	r3, s0
		un = teste / 100;
 800d262:	2664      	movs	r6, #100	; 0x64
		teste = (uint32_t) fwd * 10;
 800d264:	4353      	muls	r3, r2
		un = teste / 100;
 800d266:	fbb3 f7f6 	udiv	r7, r3, r6
		ml = (teste % 100) / 10;
 800d26a:	fb06 3617 	mls	r6, r6, r7, r3
 800d26e:	fbb6 f6f2 	udiv	r6, r6, r2
	lv_style_copy(&style_txt, &lv_style_plain_color);
 800d272:	4d44      	ldr	r5, [pc, #272]	; (800d384 <prog_target+0x13c>)
 800d274:	4944      	ldr	r1, [pc, #272]	; (800d388 <prog_target+0x140>)
	rollertarget[0] = lv_roller_create(Tela_RF, NULL);
 800d276:	f8df 912c 	ldr.w	r9, [pc, #300]	; 800d3a4 <prog_target+0x15c>
 800d27a:	4c44      	ldr	r4, [pc, #272]	; (800d38c <prog_target+0x144>)
	lv_style_copy(&style_txt, &lv_style_plain_color);
 800d27c:	4628      	mov	r0, r5
 800d27e:	f002 fa29 	bl	800f6d4 <lv_style_copy>
	style_txt.body.main_color = LV_COLOR_GRAY;
 800d282:	4a43      	ldr	r2, [pc, #268]	; (800d390 <prog_target+0x148>)
	rollertarget[0] = lv_roller_create(Tela_RF, NULL);
 800d284:	f8d9 0000 	ldr.w	r0, [r9]
	style_txt.body.main_color = LV_COLOR_GRAY;
 800d288:	8893      	ldrh	r3, [r2, #4]
 800d28a:	806b      	strh	r3, [r5, #2]
	style_txt.body.grad_color = LV_COLOR_BLACK;
 800d28c:	792b      	ldrb	r3, [r5, #4]
 800d28e:	f36f 0304 	bfc	r3, #0, #5
 800d292:	712b      	strb	r3, [r5, #4]
 800d294:	88ab      	ldrh	r3, [r5, #4]
 800d296:	f36f 134a 	bfc	r3, #5, #6
 800d29a:	80ab      	strh	r3, [r5, #4]
 800d29c:	0a1b      	lsrs	r3, r3, #8
 800d29e:	f36f 03c7 	bfc	r3, #3, #5
 800d2a2:	716b      	strb	r3, [r5, #5]
	style_txt.text.font = &lv_font_eurostile_24;
 800d2a4:	4b3b      	ldr	r3, [pc, #236]	; (800d394 <prog_target+0x14c>)
 800d2a6:	626b      	str	r3, [r5, #36]	; 0x24
	style_txt.text.line_space = 24;
 800d2a8:	2318      	movs	r3, #24
	style_txt.text.letter_space = 2;
 800d2aa:	f04f 0802 	mov.w	r8, #2
	style_txt.text.line_space = 24;
 800d2ae:	856b      	strh	r3, [r5, #42]	; 0x2a
	rollertarget[0] = lv_roller_create(Tela_RF, NULL);
 800d2b0:	2100      	movs	r1, #0
	style_txt.text.color = LV_COLOR_WHITE;
 800d2b2:	8853      	ldrh	r3, [r2, #2]
 800d2b4:	842b      	strh	r3, [r5, #32]
	style_txt.text.letter_space = 2;
 800d2b6:	f8a5 8028 	strh.w	r8, [r5, #40]	; 0x28
	rollertarget[0] = lv_roller_create(Tela_RF, NULL);
 800d2ba:	f00b fce5 	bl	8018c88 <lv_roller_create>
	lv_obj_set_user_data(rollertarget[0], 5);
 800d2be:	2105      	movs	r1, #5
	rollertarget[0] = lv_roller_create(Tela_RF, NULL);
 800d2c0:	6020      	str	r0, [r4, #0]
	lv_obj_set_user_data(rollertarget[0], 5);
 800d2c2:	f001 fec8 	bl	800f056 <lv_obj_set_user_data>
    lv_roller_set_options(rollertarget[0], "0\n1", LV_ROLLER_MODE_INIFINITE);
 800d2c6:	2201      	movs	r2, #1
 800d2c8:	6820      	ldr	r0, [r4, #0]
 800d2ca:	4933      	ldr	r1, [pc, #204]	; (800d398 <prog_target+0x150>)
 800d2cc:	f00b fe36 	bl	8018f3c <lv_roller_set_options>
    lv_roller_set_visible_row_count(rollertarget[0], 2);
 800d2d0:	4641      	mov	r1, r8
 800d2d2:	6820      	ldr	r0, [r4, #0]
 800d2d4:	f00b fcbc 	bl	8018c50 <lv_roller_set_visible_row_count>
    lv_roller_set_selected(rollertarget[0], un, true);
 800d2d8:	2201      	movs	r2, #1
 800d2da:	b2b9      	uxth	r1, r7
 800d2dc:	6820      	ldr	r0, [r4, #0]
 800d2de:	f00b fd89 	bl	8018df4 <lv_roller_set_selected>
 800d2e2:	6820      	ldr	r0, [r4, #0]
 800d2e4:	2122      	movs	r1, #34	; 0x22
 800d2e6:	f008 fdfc 	bl	8015ee2 <lv_ddlist_set_fix_width>
    lv_roller_set_style(rollertarget[0], LV_ROLLER_STYLE_BG, &style_txt);
 800d2ea:	462a      	mov	r2, r5
 800d2ec:	6820      	ldr	r0, [r4, #0]
 800d2ee:	2100      	movs	r1, #0
 800d2f0:	f00b fd56 	bl	8018da0 <lv_roller_set_style>
    lv_obj_align(rollertarget[0], NULL, LV_ALIGN_IN_TOP_LEFT, 39, 38);
 800d2f4:	2726      	movs	r7, #38	; 0x26
    lv_roller_set_style(rollertarget[0], LV_ROLLER_STYLE_SEL, &style_txt);
 800d2f6:	462a      	mov	r2, r5
 800d2f8:	6820      	ldr	r0, [r4, #0]
 800d2fa:	2101      	movs	r1, #1
 800d2fc:	f00b fd50 	bl	8018da0 <lv_roller_set_style>
    lv_obj_align(rollertarget[0], NULL, LV_ALIGN_IN_TOP_LEFT, 39, 38);
 800d300:	2327      	movs	r3, #39	; 0x27
 800d302:	2201      	movs	r2, #1
 800d304:	6820      	ldr	r0, [r4, #0]
 800d306:	9700      	str	r7, [sp, #0]
 800d308:	2100      	movs	r1, #0
 800d30a:	f001 f8e5 	bl	800e4d8 <lv_obj_align>
    lv_obj_set_event_cb(rollertarget[0], event_handler_target);
 800d30e:	6820      	ldr	r0, [r4, #0]
 800d310:	4922      	ldr	r1, [pc, #136]	; (800d39c <prog_target+0x154>)
 800d312:	f000 ff42 	bl	800e19a <lv_obj_set_event_cb>
    rollertarget[1] = lv_roller_create(Tela_RF, NULL);
 800d316:	2100      	movs	r1, #0
 800d318:	f8d9 0000 	ldr.w	r0, [r9]
 800d31c:	f00b fcb4 	bl	8018c88 <lv_roller_create>
    lv_obj_set_user_data(rollertarget[1], 4);
 800d320:	2104      	movs	r1, #4
    rollertarget[1] = lv_roller_create(Tela_RF, NULL);
 800d322:	6060      	str	r0, [r4, #4]
    lv_obj_set_user_data(rollertarget[1], 4);
 800d324:	f001 fe97 	bl	800f056 <lv_obj_set_user_data>
    lv_roller_set_options(rollertarget[1], "0\n1\n2\n3\n4\n5\n6\n7\n8\n9", LV_ROLLER_MODE_INIFINITE);
 800d328:	2201      	movs	r2, #1
 800d32a:	6860      	ldr	r0, [r4, #4]
 800d32c:	491c      	ldr	r1, [pc, #112]	; (800d3a0 <prog_target+0x158>)
 800d32e:	f00b fe05 	bl	8018f3c <lv_roller_set_options>
    lv_roller_set_visible_row_count(rollertarget[1], 2);
 800d332:	4641      	mov	r1, r8
 800d334:	6860      	ldr	r0, [r4, #4]
 800d336:	f00b fc8b 	bl	8018c50 <lv_roller_set_visible_row_count>
    lv_roller_set_selected(rollertarget[1], ml, true);
 800d33a:	2201      	movs	r2, #1
 800d33c:	b2b1      	uxth	r1, r6
 800d33e:	6860      	ldr	r0, [r4, #4]
 800d340:	f00b fd58 	bl	8018df4 <lv_roller_set_selected>
 800d344:	6860      	ldr	r0, [r4, #4]
 800d346:	2123      	movs	r1, #35	; 0x23
 800d348:	f008 fdcb 	bl	8015ee2 <lv_ddlist_set_fix_width>
    lv_roller_set_style(rollertarget[1], LV_ROLLER_STYLE_BG, &style_txt);
 800d34c:	462a      	mov	r2, r5
 800d34e:	6860      	ldr	r0, [r4, #4]
 800d350:	2100      	movs	r1, #0
 800d352:	f00b fd25 	bl	8018da0 <lv_roller_set_style>
    lv_roller_set_style(rollertarget[1], LV_ROLLER_STYLE_SEL, &style_txt);
 800d356:	462a      	mov	r2, r5
 800d358:	6860      	ldr	r0, [r4, #4]
 800d35a:	2101      	movs	r1, #1
 800d35c:	f00b fd20 	bl	8018da0 <lv_roller_set_style>
    lv_obj_align(rollertarget[1], NULL, LV_ALIGN_IN_TOP_LEFT, 84, 38);
 800d360:	6860      	ldr	r0, [r4, #4]
 800d362:	9700      	str	r7, [sp, #0]
 800d364:	2354      	movs	r3, #84	; 0x54
 800d366:	2201      	movs	r2, #1
 800d368:	2100      	movs	r1, #0
 800d36a:	f001 f8b5 	bl	800e4d8 <lv_obj_align>
    lv_obj_set_event_cb(rollertarget[1], event_handler_target);
 800d36e:	490b      	ldr	r1, [pc, #44]	; (800d39c <prog_target+0x154>)
 800d370:	6860      	ldr	r0, [r4, #4]
}
 800d372:	b003      	add	sp, #12
 800d374:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    lv_obj_set_event_cb(rollertarget[1], event_handler_target);
 800d378:	f000 bf0f 	b.w	800e19a <lv_obj_set_event_cb>
		ml = 0;
 800d37c:	2600      	movs	r6, #0
		un = 0;
 800d37e:	4637      	mov	r7, r6
 800d380:	e777      	b.n	800d272 <prog_target+0x2a>
 800d382:	bf00      	nop
 800d384:	20005c58 	.word	0x20005c58
 800d388:	2000c514 	.word	0x2000c514
 800d38c:	20005b9c 	.word	0x20005b9c
 800d390:	0801cb1e 	.word	0x0801cb1e
 800d394:	2000132c 	.word	0x2000132c
 800d398:	0802bba8 	.word	0x0802bba8
 800d39c:	0800c819 	.word	0x0800c819
 800d3a0:	0802bc06 	.word	0x0802bc06
 800d3a4:	20005ab4 	.word	0x20005ab4

0800d3a8 <screen_RF_1>:
	Tela_RF_1 = lv_obj_create(NULL, NULL);
 800d3a8:	2100      	movs	r1, #0
{
 800d3aa:	b538      	push	{r3, r4, r5, lr}
	Tela_RF_1 = lv_obj_create(NULL, NULL);
 800d3ac:	4608      	mov	r0, r1
 800d3ae:	f001 fab5 	bl	800e91c <lv_obj_create>
 800d3b2:	4d19      	ldr	r5, [pc, #100]	; (800d418 <screen_RF_1+0x70>)
	img_fundo = lv_img_create(Tela_RF_1, NULL);
 800d3b4:	4c19      	ldr	r4, [pc, #100]	; (800d41c <screen_RF_1+0x74>)
	Tela_RF_1 = lv_obj_create(NULL, NULL);
 800d3b6:	6028      	str	r0, [r5, #0]
	img_fundo = lv_img_create(Tela_RF_1, NULL);
 800d3b8:	2100      	movs	r1, #0
 800d3ba:	f009 f9b1 	bl	8016720 <lv_img_create>
    lv_img_set_src(img_fundo, "P:/EX15-XT/img/tela_rf_1.bin");
 800d3be:	4918      	ldr	r1, [pc, #96]	; (800d420 <screen_RF_1+0x78>)
	img_fundo = lv_img_create(Tela_RF_1, NULL);
 800d3c0:	6020      	str	r0, [r4, #0]
    lv_img_set_src(img_fundo, "P:/EX15-XT/img/tela_rf_1.bin");
 800d3c2:	f009 f91d 	bl	8016600 <lv_img_set_src>
	lv_obj_set_protect(img_fundo, LV_PROTECT_POS);
 800d3c6:	6820      	ldr	r0, [r4, #0]
 800d3c8:	2104      	movs	r1, #4
 800d3ca:	f000 fed9 	bl	800e180 <lv_obj_set_protect>
	lv_obj_set_event_cb(img_fundo, btn_event_esc_rf1);
 800d3ce:	6820      	ldr	r0, [r4, #0]
 800d3d0:	4914      	ldr	r1, [pc, #80]	; (800d424 <screen_RF_1+0x7c>)
 800d3d2:	f000 fee2 	bl	800e19a <lv_obj_set_event_cb>
	lv_obj_set_click(img_fundo, 1);
 800d3d6:	6820      	ldr	r0, [r4, #0]
	prog_target(target);
 800d3d8:	4c13      	ldr	r4, [pc, #76]	; (800d428 <screen_RF_1+0x80>)
	lv_obj_set_click(img_fundo, 1);
 800d3da:	2101      	movs	r1, #1
 800d3dc:	f000 feb4 	bl	800e148 <lv_obj_set_click>
	btn_next_rf1();
 800d3e0:	f7ff fd08 	bl	800cdf4 <btn_next_rf1>
	create_vumeter_fwd();
 800d3e4:	f7ff fc64 	bl	800ccb0 <create_vumeter_fwd>
	prog_target(target);
 800d3e8:	ed94 0a00 	vldr	s0, [r4]
 800d3ec:	f7ff ff2c 	bl	800d248 <prog_target>
	update_vumeter_fwd(target);
 800d3f0:	ed94 0a00 	vldr	s0, [r4]
 800d3f4:	f7ff fb92 	bl	800cb1c <update_vumeter_fwd>
 800d3f8:	6828      	ldr	r0, [r5, #0]
 800d3fa:	f000 fc7b 	bl	800dcf4 <lv_disp_load_scr>
	Task_RF_1 = lv_task_create(update_rf_1, 500, LV_TASK_PRIO_MID, NULL);
 800d3fe:	2300      	movs	r3, #0
 800d400:	2203      	movs	r2, #3
 800d402:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800d406:	4809      	ldr	r0, [pc, #36]	; (800d42c <screen_RF_1+0x84>)
 800d408:	f006 ff30 	bl	801426c <lv_task_create>
 800d40c:	4b08      	ldr	r3, [pc, #32]	; (800d430 <screen_RF_1+0x88>)
 800d40e:	6018      	str	r0, [r3, #0]
	TelaAtiva = TelaRF_1;
 800d410:	4b08      	ldr	r3, [pc, #32]	; (800d434 <screen_RF_1+0x8c>)
 800d412:	2207      	movs	r2, #7
 800d414:	601a      	str	r2, [r3, #0]
 800d416:	bd38      	pop	{r3, r4, r5, pc}
 800d418:	20005ab8 	.word	0x20005ab8
 800d41c:	20005b88 	.word	0x20005b88
 800d420:	0802c0ec 	.word	0x0802c0ec
 800d424:	0800d221 	.word	0x0800d221
 800d428:	20000010 	.word	0x20000010
 800d42c:	0800cbc1 	.word	0x0800cbc1
 800d430:	20005ab0 	.word	0x20005ab0
 800d434:	200033cc 	.word	0x200033cc

0800d438 <btn_event_next_rf>:
	if(event == LV_EVENT_RELEASED) {
 800d438:	2907      	cmp	r1, #7
{
 800d43a:	b508      	push	{r3, lr}
	if(event == LV_EVENT_RELEASED) {
 800d43c:	d10e      	bne.n	800d45c <btn_event_next_rf+0x24>
		printf("TELA_RF - Button Next Released\n");
 800d43e:	4808      	ldr	r0, [pc, #32]	; (800d460 <btn_event_next_rf+0x28>)
 800d440:	f00c f8e8 	bl	8019614 <puts>
		lv_task_del(Task_RF);
 800d444:	4b07      	ldr	r3, [pc, #28]	; (800d464 <btn_event_next_rf+0x2c>)
 800d446:	6818      	ldr	r0, [r3, #0]
 800d448:	f006 fe20 	bl	801408c <lv_task_del>
		lv_obj_del(Tela_RF);
 800d44c:	4b06      	ldr	r3, [pc, #24]	; (800d468 <btn_event_next_rf+0x30>)
 800d44e:	6818      	ldr	r0, [r3, #0]
 800d450:	f001 fc55 	bl	800ecfe <lv_obj_del>
}
 800d454:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_RF_1();
 800d458:	f7ff bfa6 	b.w	800d3a8 <screen_RF_1>
 800d45c:	bd08      	pop	{r3, pc}
 800d45e:	bf00      	nop
 800d460:	0802bffc 	.word	0x0802bffc
 800d464:	20005aac 	.word	0x20005aac
 800d468:	20005ab4 	.word	0x20005ab4

0800d46c <btn_event_prev_rf2>:
	if(event == LV_EVENT_RELEASED) {
 800d46c:	2907      	cmp	r1, #7
{
 800d46e:	b508      	push	{r3, lr}
	if(event == LV_EVENT_RELEASED) {
 800d470:	d10a      	bne.n	800d488 <btn_event_prev_rf2+0x1c>
		printf("Button Prev 2 Released\n");
 800d472:	4806      	ldr	r0, [pc, #24]	; (800d48c <btn_event_prev_rf2+0x20>)
 800d474:	f00c f8ce 	bl	8019614 <puts>
		lv_obj_del(Tela_RF_2);
 800d478:	4b05      	ldr	r3, [pc, #20]	; (800d490 <btn_event_prev_rf2+0x24>)
 800d47a:	6818      	ldr	r0, [r3, #0]
 800d47c:	f001 fc3f 	bl	800ecfe <lv_obj_del>
}
 800d480:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		screen_RF_1();
 800d484:	f7ff bf90 	b.w	800d3a8 <screen_RF_1>
 800d488:	bd08      	pop	{r3, pc}
 800d48a:	bf00      	nop
 800d48c:	0802c033 	.word	0x0802c033
 800d490:	20005abc 	.word	0x20005abc

0800d494 <btn_event_esc_sel>:
	lv_event_send(img_fundo, LV_EVENT_APPLY, NULL);
}

static void btn_event_esc_sel(lv_obj_t * btn, lv_event_t event)
{
	if(event == LV_EVENT_APPLY) {
 800d494:	2911      	cmp	r1, #17
{
 800d496:	b508      	push	{r3, lr}
	if(event == LV_EVENT_APPLY) {
 800d498:	d109      	bne.n	800d4ae <btn_event_esc_sel+0x1a>
		uint32_t id = lv_obj_get_user_data(btn);
 800d49a:	f001 fdda 	bl	800f052 <lv_obj_get_user_data>
		lv_obj_del(Tela_Sel);
 800d49e:	4b04      	ldr	r3, [pc, #16]	; (800d4b0 <btn_event_esc_sel+0x1c>)
 800d4a0:	6818      	ldr	r0, [r3, #0]
 800d4a2:	f001 fc2c 	bl	800ecfe <lv_obj_del>
		main_screen();
	}
}
 800d4a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		main_screen();
 800d4aa:	f7fa bf23 	b.w	80082f4 <main_screen>
 800d4ae:	bd08      	pop	{r3, pc}
 800d4b0:	20005cd0 	.word	0x20005cd0

0800d4b4 <btn_event_btn1>:
	lv_event_send(imgbtn1[btn], LV_EVENT_APPLY, &btn);
}

static void btn_event_btn1(lv_obj_t * btn, lv_event_t event)
{
	if(event == LV_EVENT_APPLY) {
 800d4b4:	2911      	cmp	r1, #17
{
 800d4b6:	b510      	push	{r4, lr}
	if(event == LV_EVENT_APPLY) {
 800d4b8:	d11c      	bne.n	800d4f4 <btn_event_btn1+0x40>
		uint32_t id = lv_obj_get_user_data(btn);
 800d4ba:	f001 fdca 	bl	800f052 <lv_obj_get_user_data>
		lv_obj_del(Tela_Sel);
 800d4be:	4b0e      	ldr	r3, [pc, #56]	; (800d4f8 <btn_event_btn1+0x44>)
		uint32_t id = lv_obj_get_user_data(btn);
 800d4c0:	4604      	mov	r4, r0
		lv_obj_del(Tela_Sel);
 800d4c2:	6818      	ldr	r0, [r3, #0]
 800d4c4:	f001 fc1b 	bl	800ecfe <lv_obj_del>
		switch(id) {
 800d4c8:	2c03      	cmp	r4, #3
 800d4ca:	d813      	bhi.n	800d4f4 <btn_event_btn1+0x40>
 800d4cc:	e8df f004 	tbb	[pc, r4]
 800d4d0:	0e0a0602 	.word	0x0e0a0602
			case 3:
				screen_readings();
				break;
		}
	}
}
 800d4d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				screen_freq();
 800d4d8:	f7fd bbc6 	b.w	800ac68 <screen_freq>
}
 800d4dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				screen_audio();
 800d4e0:	f7fc ba76 	b.w	80099d0 <screen_audio>
}
 800d4e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				screen_rf();
 800d4e8:	f7ff be52 	b.w	800d190 <screen_rf>
}
 800d4ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				screen_readings();
 800d4f0:	f7ff b8ca 	b.w	800c688 <screen_readings>
 800d4f4:	bd10      	pop	{r4, pc}
 800d4f6:	bf00      	nop
 800d4f8:	20005cd0 	.word	0x20005cd0

0800d4fc <create_buttons>:
{
 800d4fc:	b570      	push	{r4, r5, r6, lr}
	imgbtn1[0] = lv_imgbtn_create(Tela_Sel, NULL);
 800d4fe:	4e64      	ldr	r6, [pc, #400]	; (800d690 <create_buttons+0x194>)
 800d500:	4c64      	ldr	r4, [pc, #400]	; (800d694 <create_buttons+0x198>)
 800d502:	6830      	ldr	r0, [r6, #0]
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_REL, &Btn_Frequency);
 800d504:	4d64      	ldr	r5, [pc, #400]	; (800d698 <create_buttons+0x19c>)
	imgbtn1[0] = lv_imgbtn_create(Tela_Sel, NULL);
 800d506:	2100      	movs	r1, #0
 800d508:	f009 fa34 	bl	8016974 <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn1[0], 0);
 800d50c:	2100      	movs	r1, #0
	imgbtn1[0] = lv_imgbtn_create(Tela_Sel, NULL);
 800d50e:	6020      	str	r0, [r4, #0]
	lv_obj_set_user_data(imgbtn1[0], 0);
 800d510:	f001 fda1 	bl	800f056 <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_REL, &Btn_Frequency);
 800d514:	462a      	mov	r2, r5
 800d516:	6820      	ldr	r0, [r4, #0]
 800d518:	2100      	movs	r1, #0
 800d51a:	f009 fa73 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_TGL_REL, &Btn_Frequency);
 800d51e:	462a      	mov	r2, r5
 800d520:	6820      	ldr	r0, [r4, #0]
 800d522:	2102      	movs	r1, #2
 800d524:	f009 fa6e 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_TGL_PR, &Btn_Frequency_am);
 800d528:	6820      	ldr	r0, [r4, #0]
 800d52a:	4a5c      	ldr	r2, [pc, #368]	; (800d69c <create_buttons+0x1a0>)
 800d52c:	2103      	movs	r1, #3
 800d52e:	f009 fa69 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_PR, &Btn_Frequency);
 800d532:	462a      	mov	r2, r5
 800d534:	6820      	ldr	r0, [r4, #0]
 800d536:	2101      	movs	r1, #1
 800d538:	f009 fa64 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_REL, &Btn_Frequency);
 800d53c:	462a      	mov	r2, r5
 800d53e:	6820      	ldr	r0, [r4, #0]
 800d540:	2100      	movs	r1, #0
 800d542:	f009 fa5f 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_INA, &Btn_Frequency);
 800d546:	462a      	mov	r2, r5
 800d548:	6820      	ldr	r0, [r4, #0]
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_REL, &Btn_Audio);
 800d54a:	4d55      	ldr	r5, [pc, #340]	; (800d6a0 <create_buttons+0x1a4>)
	lv_imgbtn_set_src(imgbtn1[0], LV_BTN_STATE_INA, &Btn_Frequency);
 800d54c:	2104      	movs	r1, #4
 800d54e:	f009 fa59 	bl	8016a04 <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn1[0], btn_event_btn1);
 800d552:	6820      	ldr	r0, [r4, #0]
 800d554:	4953      	ldr	r1, [pc, #332]	; (800d6a4 <create_buttons+0x1a8>)
 800d556:	f000 fe20 	bl	800e19a <lv_obj_set_event_cb>
	lv_group_add_obj(group, imgbtn1[0]);
 800d55a:	6821      	ldr	r1, [r4, #0]
 800d55c:	2000      	movs	r0, #0
 800d55e:	f000 fc99 	bl	800de94 <lv_group_add_obj>
	lv_obj_set_pos(imgbtn1[0], 1, 18);
 800d562:	2212      	movs	r2, #18
 800d564:	6820      	ldr	r0, [r4, #0]
 800d566:	2101      	movs	r1, #1
 800d568:	f000 ff61 	bl	800e42e <lv_obj_set_pos>
	imgbtn1[1] = lv_imgbtn_create(Tela_Sel, imgbtn1[0]);
 800d56c:	6821      	ldr	r1, [r4, #0]
 800d56e:	6830      	ldr	r0, [r6, #0]
 800d570:	f009 fa00 	bl	8016974 <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn1[1], 1);
 800d574:	2101      	movs	r1, #1
	imgbtn1[1] = lv_imgbtn_create(Tela_Sel, imgbtn1[0]);
 800d576:	6060      	str	r0, [r4, #4]
	lv_obj_set_user_data(imgbtn1[1], 1);
 800d578:	f001 fd6d 	bl	800f056 <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_REL, &Btn_Audio);
 800d57c:	462a      	mov	r2, r5
 800d57e:	6860      	ldr	r0, [r4, #4]
 800d580:	2100      	movs	r1, #0
 800d582:	f009 fa3f 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_TGL_REL, &Btn_Audio);
 800d586:	462a      	mov	r2, r5
 800d588:	6860      	ldr	r0, [r4, #4]
 800d58a:	2102      	movs	r1, #2
 800d58c:	f009 fa3a 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_TGL_PR, &Btn_Audio_am);
 800d590:	6860      	ldr	r0, [r4, #4]
 800d592:	4a45      	ldr	r2, [pc, #276]	; (800d6a8 <create_buttons+0x1ac>)
 800d594:	2103      	movs	r1, #3
 800d596:	f009 fa35 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_PR, &Btn_Audio);
 800d59a:	462a      	mov	r2, r5
 800d59c:	6860      	ldr	r0, [r4, #4]
 800d59e:	2101      	movs	r1, #1
 800d5a0:	f009 fa30 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_REL, &Btn_Audio);
 800d5a4:	462a      	mov	r2, r5
 800d5a6:	6860      	ldr	r0, [r4, #4]
 800d5a8:	2100      	movs	r1, #0
 800d5aa:	f009 fa2b 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_INA, &Btn_Audio);
 800d5ae:	462a      	mov	r2, r5
 800d5b0:	6860      	ldr	r0, [r4, #4]
	lv_imgbtn_set_src(imgbtn1[2], LV_BTN_STATE_REL, &Btn_RF);
 800d5b2:	4d3e      	ldr	r5, [pc, #248]	; (800d6ac <create_buttons+0x1b0>)
	lv_imgbtn_set_src(imgbtn1[1], LV_BTN_STATE_INA, &Btn_Audio);
 800d5b4:	2104      	movs	r1, #4
 800d5b6:	f009 fa25 	bl	8016a04 <lv_imgbtn_set_src>
	lv_group_add_obj(group, imgbtn1[1]);
 800d5ba:	6861      	ldr	r1, [r4, #4]
 800d5bc:	2000      	movs	r0, #0
 800d5be:	f000 fc69 	bl	800de94 <lv_group_add_obj>
	lv_obj_set_pos(imgbtn1[1], 1, 45);
 800d5c2:	222d      	movs	r2, #45	; 0x2d
 800d5c4:	6860      	ldr	r0, [r4, #4]
 800d5c6:	2101      	movs	r1, #1
 800d5c8:	f000 ff31 	bl	800e42e <lv_obj_set_pos>
	imgbtn1[2] = lv_imgbtn_create(Tela_Sel, imgbtn1[0]);
 800d5cc:	6821      	ldr	r1, [r4, #0]
 800d5ce:	6830      	ldr	r0, [r6, #0]
 800d5d0:	f009 f9d0 	bl	8016974 <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn1[2], 2);
 800d5d4:	2102      	movs	r1, #2
	imgbtn1[2] = lv_imgbtn_create(Tela_Sel, imgbtn1[0]);
 800d5d6:	60a0      	str	r0, [r4, #8]
	lv_obj_set_user_data(imgbtn1[2], 2);
 800d5d8:	f001 fd3d 	bl	800f056 <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn1[2], LV_BTN_STATE_REL, &Btn_RF);
 800d5dc:	462a      	mov	r2, r5
 800d5de:	68a0      	ldr	r0, [r4, #8]
 800d5e0:	2100      	movs	r1, #0
 800d5e2:	f009 fa0f 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[2], LV_BTN_STATE_TGL_REL, &Btn_RF);
 800d5e6:	462a      	mov	r2, r5
 800d5e8:	68a0      	ldr	r0, [r4, #8]
 800d5ea:	2102      	movs	r1, #2
 800d5ec:	f009 fa0a 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[2], LV_BTN_STATE_TGL_PR, &Btn_RF_am);
 800d5f0:	68a0      	ldr	r0, [r4, #8]
 800d5f2:	4a2f      	ldr	r2, [pc, #188]	; (800d6b0 <create_buttons+0x1b4>)
 800d5f4:	2103      	movs	r1, #3
 800d5f6:	f009 fa05 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[2], LV_BTN_STATE_PR, &Btn_RF);
 800d5fa:	462a      	mov	r2, r5
 800d5fc:	68a0      	ldr	r0, [r4, #8]
 800d5fe:	2101      	movs	r1, #1
 800d600:	f009 fa00 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[2], LV_BTN_STATE_REL, &Btn_RF);
 800d604:	462a      	mov	r2, r5
 800d606:	68a0      	ldr	r0, [r4, #8]
 800d608:	2100      	movs	r1, #0
 800d60a:	f009 f9fb 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[2], LV_BTN_STATE_INA, &Btn_RF);
 800d60e:	462a      	mov	r2, r5
 800d610:	68a0      	ldr	r0, [r4, #8]
	lv_imgbtn_set_src(imgbtn1[3], LV_BTN_STATE_REL, &Btn_Readings);
 800d612:	4d28      	ldr	r5, [pc, #160]	; (800d6b4 <create_buttons+0x1b8>)
	lv_imgbtn_set_src(imgbtn1[2], LV_BTN_STATE_INA, &Btn_RF);
 800d614:	2104      	movs	r1, #4
 800d616:	f009 f9f5 	bl	8016a04 <lv_imgbtn_set_src>
	lv_group_add_obj(group, imgbtn1[2]);
 800d61a:	68a1      	ldr	r1, [r4, #8]
 800d61c:	2000      	movs	r0, #0
 800d61e:	f000 fc39 	bl	800de94 <lv_group_add_obj>
	lv_obj_set_pos(imgbtn1[2], 1, 73);
 800d622:	2249      	movs	r2, #73	; 0x49
 800d624:	68a0      	ldr	r0, [r4, #8]
 800d626:	2101      	movs	r1, #1
 800d628:	f000 ff01 	bl	800e42e <lv_obj_set_pos>
	imgbtn1[3] = lv_imgbtn_create(Tela_Sel, imgbtn1[0]);
 800d62c:	6821      	ldr	r1, [r4, #0]
 800d62e:	6830      	ldr	r0, [r6, #0]
 800d630:	f009 f9a0 	bl	8016974 <lv_imgbtn_create>
	lv_obj_set_user_data(imgbtn1[3], 3);
 800d634:	2103      	movs	r1, #3
	imgbtn1[3] = lv_imgbtn_create(Tela_Sel, imgbtn1[0]);
 800d636:	60e0      	str	r0, [r4, #12]
	lv_obj_set_user_data(imgbtn1[3], 3);
 800d638:	f001 fd0d 	bl	800f056 <lv_obj_set_user_data>
	lv_imgbtn_set_src(imgbtn1[3], LV_BTN_STATE_REL, &Btn_Readings);
 800d63c:	462a      	mov	r2, r5
 800d63e:	68e0      	ldr	r0, [r4, #12]
 800d640:	2100      	movs	r1, #0
 800d642:	f009 f9df 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[3], LV_BTN_STATE_TGL_REL, &Btn_Readings);
 800d646:	462a      	mov	r2, r5
 800d648:	68e0      	ldr	r0, [r4, #12]
 800d64a:	2102      	movs	r1, #2
 800d64c:	f009 f9da 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[3], LV_BTN_STATE_TGL_PR, &Btn_Readings_am);
 800d650:	68e0      	ldr	r0, [r4, #12]
 800d652:	4a19      	ldr	r2, [pc, #100]	; (800d6b8 <create_buttons+0x1bc>)
 800d654:	2103      	movs	r1, #3
 800d656:	f009 f9d5 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[3], LV_BTN_STATE_PR, &Btn_Readings);
 800d65a:	462a      	mov	r2, r5
 800d65c:	68e0      	ldr	r0, [r4, #12]
 800d65e:	2101      	movs	r1, #1
 800d660:	f009 f9d0 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[3], LV_BTN_STATE_REL, &Btn_Readings);
 800d664:	462a      	mov	r2, r5
 800d666:	68e0      	ldr	r0, [r4, #12]
 800d668:	2100      	movs	r1, #0
 800d66a:	f009 f9cb 	bl	8016a04 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1[3], LV_BTN_STATE_INA, &Btn_Readings);
 800d66e:	462a      	mov	r2, r5
 800d670:	68e0      	ldr	r0, [r4, #12]
 800d672:	2104      	movs	r1, #4
 800d674:	f009 f9c6 	bl	8016a04 <lv_imgbtn_set_src>
	lv_group_add_obj(group, imgbtn1[3]);
 800d678:	68e1      	ldr	r1, [r4, #12]
 800d67a:	2000      	movs	r0, #0
 800d67c:	f000 fc0a 	bl	800de94 <lv_group_add_obj>
	lv_obj_set_pos(imgbtn1[3], 1, 100);
 800d680:	68e0      	ldr	r0, [r4, #12]
 800d682:	2264      	movs	r2, #100	; 0x64
 800d684:	2101      	movs	r1, #1
}
 800d686:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	lv_obj_set_pos(imgbtn1[3], 1, 100);
 800d68a:	f000 bed0 	b.w	800e42e <lv_obj_set_pos>
 800d68e:	bf00      	nop
 800d690:	20005cd0 	.word	0x20005cd0
 800d694:	20005cd8 	.word	0x20005cd8
 800d698:	200019b8 	.word	0x200019b8
 800d69c:	200019c4 	.word	0x200019c4
 800d6a0:	200019a0 	.word	0x200019a0
 800d6a4:	0800d4b5 	.word	0x0800d4b5
 800d6a8:	200019ac 	.word	0x200019ac
 800d6ac:	200019d0 	.word	0x200019d0
 800d6b0:	200019dc 	.word	0x200019dc
 800d6b4:	200019e8 	.word	0x200019e8
 800d6b8:	200019f4 	.word	0x200019f4

0800d6bc <screen_sel>:
{
 800d6bc:	b570      	push	{r4, r5, r6, lr}
	MenuSel = 0;
 800d6be:	4b1d      	ldr	r3, [pc, #116]	; (800d734 <screen_sel+0x78>)
	Tela_Sel = lv_obj_create(NULL, NULL);
 800d6c0:	4e1d      	ldr	r6, [pc, #116]	; (800d738 <screen_sel+0x7c>)
	img_fundo = lv_img_create(Tela_Sel, NULL);
 800d6c2:	4c1e      	ldr	r4, [pc, #120]	; (800d73c <screen_sel+0x80>)
	MenuSel = 0;
 800d6c4:	2500      	movs	r5, #0
	Tela_Sel = lv_obj_create(NULL, NULL);
 800d6c6:	4629      	mov	r1, r5
 800d6c8:	4628      	mov	r0, r5
	MenuSel = 0;
 800d6ca:	701d      	strb	r5, [r3, #0]
	Tela_Sel = lv_obj_create(NULL, NULL);
 800d6cc:	f001 f926 	bl	800e91c <lv_obj_create>
	img_fundo = lv_img_create(Tela_Sel, NULL);
 800d6d0:	4629      	mov	r1, r5
	Tela_Sel = lv_obj_create(NULL, NULL);
 800d6d2:	6030      	str	r0, [r6, #0]
	img_fundo = lv_img_create(Tela_Sel, NULL);
 800d6d4:	f009 f824 	bl	8016720 <lv_img_create>
	lv_img_set_src(img_fundo, &tela_sel);
 800d6d8:	4919      	ldr	r1, [pc, #100]	; (800d740 <screen_sel+0x84>)
	img_fundo = lv_img_create(Tela_Sel, NULL);
 800d6da:	6020      	str	r0, [r4, #0]
	lv_img_set_src(img_fundo, &tela_sel);
 800d6dc:	f008 ff90 	bl	8016600 <lv_img_set_src>
	lv_obj_set_protect(img_fundo, LV_PROTECT_POS);
 800d6e0:	6820      	ldr	r0, [r4, #0]
 800d6e2:	2104      	movs	r1, #4
 800d6e4:	f000 fd4c 	bl	800e180 <lv_obj_set_protect>
	lv_obj_set_user_data(img_fundo, 0);
 800d6e8:	6820      	ldr	r0, [r4, #0]
 800d6ea:	4629      	mov	r1, r5
 800d6ec:	f001 fcb3 	bl	800f056 <lv_obj_set_user_data>
	lv_obj_set_event_cb(img_fundo, btn_event_esc_sel);
 800d6f0:	6820      	ldr	r0, [r4, #0]
 800d6f2:	4914      	ldr	r1, [pc, #80]	; (800d744 <screen_sel+0x88>)
 800d6f4:	f000 fd51 	bl	800e19a <lv_obj_set_event_cb>
	lv_obj_set_click(img_fundo, 1);
 800d6f8:	6820      	ldr	r0, [r4, #0]
	lv_btn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_PR);
 800d6fa:	4c13      	ldr	r4, [pc, #76]	; (800d748 <screen_sel+0x8c>)
	lv_obj_set_click(img_fundo, 1);
 800d6fc:	2101      	movs	r1, #1
 800d6fe:	f000 fd23 	bl	800e148 <lv_obj_set_click>
	create_buttons();
 800d702:	f7ff fefb 	bl	800d4fc <create_buttons>
	lv_btn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_PR);
 800d706:	2103      	movs	r1, #3
 800d708:	6820      	ldr	r0, [r4, #0]
 800d70a:	f007 faa7 	bl	8014c5c <lv_btn_set_state>
	lv_btn_set_state(imgbtn1[1], LV_BTN_STATE_TGL_REL);
 800d70e:	2102      	movs	r1, #2
 800d710:	6860      	ldr	r0, [r4, #4]
 800d712:	f007 faa3 	bl	8014c5c <lv_btn_set_state>
	lv_btn_set_state(imgbtn1[2], LV_BTN_STATE_TGL_REL);
 800d716:	2102      	movs	r1, #2
 800d718:	68a0      	ldr	r0, [r4, #8]
 800d71a:	f007 fa9f 	bl	8014c5c <lv_btn_set_state>
	lv_btn_set_state(imgbtn1[3], LV_BTN_STATE_TGL_REL);
 800d71e:	2102      	movs	r1, #2
 800d720:	68e0      	ldr	r0, [r4, #12]
 800d722:	f007 fa9b 	bl	8014c5c <lv_btn_set_state>
 800d726:	6830      	ldr	r0, [r6, #0]
 800d728:	f000 fae4 	bl	800dcf4 <lv_disp_load_scr>
	TelaAtiva = TelaSelecao;
 800d72c:	4b07      	ldr	r3, [pc, #28]	; (800d74c <screen_sel+0x90>)
 800d72e:	2201      	movs	r2, #1
 800d730:	601a      	str	r2, [r3, #0]
 800d732:	bd70      	pop	{r4, r5, r6, pc}
 800d734:	200033c8 	.word	0x200033c8
 800d738:	20005cd0 	.word	0x20005cd0
 800d73c:	20005cd4 	.word	0x20005cd4
 800d740:	20001c04 	.word	0x20001c04
 800d744:	0800d495 	.word	0x0800d495
 800d748:	20005cd8 	.word	0x20005cd8
 800d74c:	200033cc 	.word	0x200033cc

0800d750 <sel_screen_send_esc>:
	lv_event_send(img_fundo, LV_EVENT_APPLY, NULL);
 800d750:	4b02      	ldr	r3, [pc, #8]	; (800d75c <sel_screen_send_esc+0xc>)
 800d752:	2200      	movs	r2, #0
 800d754:	2111      	movs	r1, #17
 800d756:	6818      	ldr	r0, [r3, #0]
 800d758:	f000 bd66 	b.w	800e228 <lv_event_send>
 800d75c:	20005cd4 	.word	0x20005cd4

0800d760 <sel_screen_send_button>:
{
 800d760:	b510      	push	{r4, lr}
	switch(btn) {
 800d762:	2803      	cmp	r0, #3
 800d764:	d837      	bhi.n	800d7d6 <sel_screen_send_button+0x76>
 800d766:	e8df f000 	tbb	[pc, r0]
 800d76a:	1502      	.short	0x1502
 800d76c:	271c      	.short	0x271c
			lv_btn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_PR);
 800d76e:	4c1a      	ldr	r4, [pc, #104]	; (800d7d8 <sel_screen_send_button+0x78>)
 800d770:	2103      	movs	r1, #3
 800d772:	6820      	ldr	r0, [r4, #0]
 800d774:	f007 fa72 	bl	8014c5c <lv_btn_set_state>
			lv_btn_set_state(imgbtn1[1], LV_BTN_STATE_TGL_REL);
 800d778:	2102      	movs	r1, #2
			lv_btn_set_state(imgbtn1[1], LV_BTN_STATE_TGL_PR);
 800d77a:	6860      	ldr	r0, [r4, #4]
 800d77c:	f007 fa6e 	bl	8014c5c <lv_btn_set_state>
			lv_btn_set_state(imgbtn1[2], LV_BTN_STATE_TGL_REL);
 800d780:	2102      	movs	r1, #2
 800d782:	68a0      	ldr	r0, [r4, #8]
 800d784:	f007 fa6a 	bl	8014c5c <lv_btn_set_state>
			lv_btn_set_state(imgbtn1[3], LV_BTN_STATE_TGL_REL);
 800d788:	2102      	movs	r1, #2
			lv_btn_set_state(imgbtn1[3], LV_BTN_STATE_TGL_PR);
 800d78a:	68e0      	ldr	r0, [r4, #12]
}
 800d78c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			lv_btn_set_state(imgbtn1[3], LV_BTN_STATE_TGL_PR);
 800d790:	f007 ba64 	b.w	8014c5c <lv_btn_set_state>
			lv_btn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_REL);
 800d794:	4c10      	ldr	r4, [pc, #64]	; (800d7d8 <sel_screen_send_button+0x78>)
 800d796:	2102      	movs	r1, #2
 800d798:	6820      	ldr	r0, [r4, #0]
 800d79a:	f007 fa5f 	bl	8014c5c <lv_btn_set_state>
			lv_btn_set_state(imgbtn1[1], LV_BTN_STATE_TGL_PR);
 800d79e:	2103      	movs	r1, #3
 800d7a0:	e7eb      	b.n	800d77a <sel_screen_send_button+0x1a>
			lv_btn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_REL);
 800d7a2:	4c0d      	ldr	r4, [pc, #52]	; (800d7d8 <sel_screen_send_button+0x78>)
 800d7a4:	2102      	movs	r1, #2
 800d7a6:	6820      	ldr	r0, [r4, #0]
 800d7a8:	f007 fa58 	bl	8014c5c <lv_btn_set_state>
			lv_btn_set_state(imgbtn1[1], LV_BTN_STATE_TGL_REL);
 800d7ac:	2102      	movs	r1, #2
 800d7ae:	6860      	ldr	r0, [r4, #4]
 800d7b0:	f007 fa54 	bl	8014c5c <lv_btn_set_state>
			lv_btn_set_state(imgbtn1[2], LV_BTN_STATE_TGL_PR);
 800d7b4:	2103      	movs	r1, #3
 800d7b6:	e7e4      	b.n	800d782 <sel_screen_send_button+0x22>
			lv_btn_set_state(imgbtn1[0], LV_BTN_STATE_TGL_REL);
 800d7b8:	4c07      	ldr	r4, [pc, #28]	; (800d7d8 <sel_screen_send_button+0x78>)
 800d7ba:	2102      	movs	r1, #2
 800d7bc:	6820      	ldr	r0, [r4, #0]
 800d7be:	f007 fa4d 	bl	8014c5c <lv_btn_set_state>
			lv_btn_set_state(imgbtn1[1], LV_BTN_STATE_TGL_REL);
 800d7c2:	2102      	movs	r1, #2
 800d7c4:	6860      	ldr	r0, [r4, #4]
 800d7c6:	f007 fa49 	bl	8014c5c <lv_btn_set_state>
			lv_btn_set_state(imgbtn1[2], LV_BTN_STATE_TGL_REL);
 800d7ca:	2102      	movs	r1, #2
 800d7cc:	68a0      	ldr	r0, [r4, #8]
 800d7ce:	f007 fa45 	bl	8014c5c <lv_btn_set_state>
			lv_btn_set_state(imgbtn1[3], LV_BTN_STATE_TGL_PR);
 800d7d2:	2103      	movs	r1, #3
 800d7d4:	e7d9      	b.n	800d78a <sel_screen_send_button+0x2a>
 800d7d6:	bd10      	pop	{r4, pc}
 800d7d8:	20005cd8 	.word	0x20005cd8

0800d7dc <sel_screen_send_apply>:
{
 800d7dc:	b507      	push	{r0, r1, r2, lr}
	lv_event_send(imgbtn1[btn], LV_EVENT_APPLY, &btn);
 800d7de:	4b06      	ldr	r3, [pc, #24]	; (800d7f8 <sel_screen_send_apply+0x1c>)
{
 800d7e0:	aa02      	add	r2, sp, #8
	lv_event_send(imgbtn1[btn], LV_EVENT_APPLY, &btn);
 800d7e2:	2111      	movs	r1, #17
{
 800d7e4:	f842 0d04 	str.w	r0, [r2, #-4]!
	lv_event_send(imgbtn1[btn], LV_EVENT_APPLY, &btn);
 800d7e8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800d7ec:	f000 fd1c 	bl	800e228 <lv_event_send>
}
 800d7f0:	b003      	add	sp, #12
 800d7f2:	f85d fb04 	ldr.w	pc, [sp], #4
 800d7f6:	bf00      	nop
 800d7f8:	20005cd8 	.word	0x20005cd8

0800d7fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d7fc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d7fe:	2200      	movs	r2, #0
 800d800:	490e      	ldr	r1, [pc, #56]	; (800d83c <MX_USB_DEVICE_Init+0x40>)
 800d802:	480f      	ldr	r0, [pc, #60]	; (800d840 <MX_USB_DEVICE_Init+0x44>)
 800d804:	f7f9 fd03 	bl	800720e <USBD_Init>
 800d808:	b108      	cbz	r0, 800d80e <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 800d80a:	f7f4 fa3b 	bl	8001c84 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 800d80e:	490d      	ldr	r1, [pc, #52]	; (800d844 <MX_USB_DEVICE_Init+0x48>)
 800d810:	480b      	ldr	r0, [pc, #44]	; (800d840 <MX_USB_DEVICE_Init+0x44>)
 800d812:	f7f9 fd11 	bl	8007238 <USBD_RegisterClass>
 800d816:	b108      	cbz	r0, 800d81c <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 800d818:	f7f4 fa34 	bl	8001c84 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800d81c:	490a      	ldr	r1, [pc, #40]	; (800d848 <MX_USB_DEVICE_Init+0x4c>)
 800d81e:	4808      	ldr	r0, [pc, #32]	; (800d840 <MX_USB_DEVICE_Init+0x44>)
 800d820:	f7f9 f98c 	bl	8006b3c <USBD_MSC_RegisterStorage>
 800d824:	b108      	cbz	r0, 800d82a <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 800d826:	f7f4 fa2d 	bl	8001c84 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d82a:	4805      	ldr	r0, [pc, #20]	; (800d840 <MX_USB_DEVICE_Init+0x44>)
 800d82c:	f7f9 fd0b 	bl	8007246 <USBD_Start>
 800d830:	b118      	cbz	r0, 800d83a <MX_USB_DEVICE_Init+0x3e>
    Error_Handler();
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d832:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800d836:	f7f4 ba25 	b.w	8001c84 <Error_Handler>
 800d83a:	bd08      	pop	{r3, pc}
 800d83c:	20001c1c 	.word	0x20001c1c
 800d840:	2000b9a0 	.word	0x2000b9a0
 800d844:	2000003c 	.word	0x2000003c
 800d848:	20001c7c 	.word	0x20001c7c

0800d84c <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d84c:	2312      	movs	r3, #18
 800d84e:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 800d850:	4800      	ldr	r0, [pc, #0]	; (800d854 <USBD_FS_DeviceDescriptor+0x8>)
 800d852:	4770      	bx	lr
 800d854:	20001c48 	.word	0x20001c48

0800d858 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d858:	2304      	movs	r3, #4
 800d85a:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 800d85c:	4800      	ldr	r0, [pc, #0]	; (800d860 <USBD_FS_LangIDStrDescriptor+0x8>)
 800d85e:	4770      	bx	lr
 800d860:	20001c5c 	.word	0x20001c5c

0800d864 <USBD_FS_USR_BOSDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800d864:	230c      	movs	r3, #12
 800d866:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
}
 800d868:	4800      	ldr	r0, [pc, #0]	; (800d86c <USBD_FS_USR_BOSDescriptor+0x8>)
 800d86a:	4770      	bx	lr
 800d86c:	20001c3c 	.word	0x20001c3c

0800d870 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 800d870:	2300      	movs	r3, #0
{
 800d872:	b530      	push	{r4, r5, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800d874:	461d      	mov	r5, r3
  for (idx = 0; idx < len; idx++)
 800d876:	b2dc      	uxtb	r4, r3
 800d878:	42a2      	cmp	r2, r4
 800d87a:	d800      	bhi.n	800d87e <IntToUnicode+0xe>
  }
}
 800d87c:	bd30      	pop	{r4, r5, pc}
    if (((value >> 28)) < 0xA)
 800d87e:	0f04      	lsrs	r4, r0, #28
 800d880:	2c09      	cmp	r4, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800d882:	bf94      	ite	ls
 800d884:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d886:	3437      	addhi	r4, #55	; 0x37
 800d888:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 800d88c:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    value = value << 4;
 800d890:	0100      	lsls	r0, r0, #4
    pbuf[2 * idx + 1] = 0;
 800d892:	7065      	strb	r5, [r4, #1]
 800d894:	3301      	adds	r3, #1
 800d896:	e7ee      	b.n	800d876 <IntToUnicode+0x6>

0800d898 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 800d898:	231a      	movs	r3, #26
{
 800d89a:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800d89c:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d89e:	4b09      	ldr	r3, [pc, #36]	; (800d8c4 <USBD_FS_SerialStrDescriptor+0x2c>)
 800d8a0:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d8a2:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 800d8a4:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 800d8a6:	18c0      	adds	r0, r0, r3
 800d8a8:	d00a      	beq.n	800d8c0 <USBD_FS_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d8aa:	4b07      	ldr	r3, [pc, #28]	; (800d8c8 <USBD_FS_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d8ac:	4907      	ldr	r1, [pc, #28]	; (800d8cc <USBD_FS_SerialStrDescriptor+0x34>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d8ae:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d8b0:	2208      	movs	r2, #8
 800d8b2:	f7ff ffdd 	bl	800d870 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d8b6:	2204      	movs	r2, #4
 800d8b8:	4905      	ldr	r1, [pc, #20]	; (800d8d0 <USBD_FS_SerialStrDescriptor+0x38>)
 800d8ba:	4620      	mov	r0, r4
 800d8bc:	f7ff ffd8 	bl	800d870 <IntToUnicode>
}
 800d8c0:	4804      	ldr	r0, [pc, #16]	; (800d8d4 <USBD_FS_SerialStrDescriptor+0x3c>)
 800d8c2:	bd10      	pop	{r4, pc}
 800d8c4:	1fff7590 	.word	0x1fff7590
 800d8c8:	1fff7594 	.word	0x1fff7594
 800d8cc:	20001c62 	.word	0x20001c62
 800d8d0:	20001c72 	.word	0x20001c72
 800d8d4:	20001c60 	.word	0x20001c60

0800d8d8 <USBD_FS_ManufacturerStrDescriptor>:
{
 800d8d8:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d8da:	4c04      	ldr	r4, [pc, #16]	; (800d8ec <USBD_FS_ManufacturerStrDescriptor+0x14>)
 800d8dc:	4804      	ldr	r0, [pc, #16]	; (800d8f0 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800d8de:	460a      	mov	r2, r1
 800d8e0:	4621      	mov	r1, r4
 800d8e2:	f7f9 ffd9 	bl	8007898 <USBD_GetString>
}
 800d8e6:	4620      	mov	r0, r4
 800d8e8:	bd10      	pop	{r4, pc}
 800d8ea:	bf00      	nop
 800d8ec:	2000bc3c 	.word	0x2000bc3c
 800d8f0:	080d8909 	.word	0x080d8909

0800d8f4 <USBD_FS_ProductStrDescriptor>:
{
 800d8f4:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d8f6:	4c04      	ldr	r4, [pc, #16]	; (800d908 <USBD_FS_ProductStrDescriptor+0x14>)
 800d8f8:	4804      	ldr	r0, [pc, #16]	; (800d90c <USBD_FS_ProductStrDescriptor+0x18>)
 800d8fa:	460a      	mov	r2, r1
 800d8fc:	4621      	mov	r1, r4
 800d8fe:	f7f9 ffcb 	bl	8007898 <USBD_GetString>
}
 800d902:	4620      	mov	r0, r4
 800d904:	bd10      	pop	{r4, pc}
 800d906:	bf00      	nop
 800d908:	2000bc3c 	.word	0x2000bc3c
 800d90c:	080d891c 	.word	0x080d891c

0800d910 <USBD_FS_ConfigStrDescriptor>:
{
 800d910:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d912:	4c04      	ldr	r4, [pc, #16]	; (800d924 <USBD_FS_ConfigStrDescriptor+0x14>)
 800d914:	4804      	ldr	r0, [pc, #16]	; (800d928 <USBD_FS_ConfigStrDescriptor+0x18>)
 800d916:	460a      	mov	r2, r1
 800d918:	4621      	mov	r1, r4
 800d91a:	f7f9 ffbd 	bl	8007898 <USBD_GetString>
}
 800d91e:	4620      	mov	r0, r4
 800d920:	bd10      	pop	{r4, pc}
 800d922:	bf00      	nop
 800d924:	2000bc3c 	.word	0x2000bc3c
 800d928:	080d88f0 	.word	0x080d88f0

0800d92c <USBD_FS_InterfaceStrDescriptor>:
{
 800d92c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d92e:	4c04      	ldr	r4, [pc, #16]	; (800d940 <USBD_FS_InterfaceStrDescriptor+0x14>)
 800d930:	4804      	ldr	r0, [pc, #16]	; (800d944 <USBD_FS_InterfaceStrDescriptor+0x18>)
 800d932:	460a      	mov	r2, r1
 800d934:	4621      	mov	r1, r4
 800d936:	f7f9 ffaf 	bl	8007898 <USBD_GetString>
}
 800d93a:	4620      	mov	r0, r4
 800d93c:	bd10      	pop	{r4, pc}
 800d93e:	bf00      	nop
 800d940:	2000bc3c 	.word	0x2000bc3c
 800d944:	080d88fb 	.word	0x080d88fb

0800d948 <STORAGE_GetCapacity_FS>:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 800d948:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d94c:	600b      	str	r3, [r1, #0]
  *block_size = STORAGE_BLK_SIZ;
 800d94e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d952:	8013      	strh	r3, [r2, #0]
  return (USBD_OK);
  /* USER CODE END 3 */
}
 800d954:	2000      	movs	r0, #0
 800d956:	4770      	bx	lr

0800d958 <STORAGE_IsWriteProtected_FS>:
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
  /* USER CODE END 5 */
}
 800d958:	2000      	movs	r0, #0
 800d95a:	4770      	bx	lr

0800d95c <STORAGE_Write_FS>:
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
  /* USER CODE BEGIN 7 */
  return (USBD_OK);
  /* USER CODE END 7 */
}
 800d95c:	2000      	movs	r0, #0
 800d95e:	4770      	bx	lr

0800d960 <STORAGE_GetMaxLun_FS>:
int8_t STORAGE_GetMaxLun_FS(void)
{
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
  /* USER CODE END 8 */
}
 800d960:	2000      	movs	r0, #0
 800d962:	4770      	bx	lr

0800d964 <STORAGE_Read_FS>:
 800d964:	2000      	movs	r0, #0
 800d966:	4770      	bx	lr

0800d968 <STORAGE_Init_FS>:
 800d968:	2000      	movs	r0, #0
 800d96a:	4770      	bx	lr

0800d96c <STORAGE_IsReady_FS>:
 800d96c:	2000      	movs	r0, #0
 800d96e:	4770      	bx	lr

0800d970 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d970:	b510      	push	{r4, lr}
 800d972:	4604      	mov	r4, r0
 800d974:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d976:	2214      	movs	r2, #20
 800d978:	2100      	movs	r1, #0
 800d97a:	a803      	add	r0, sp, #12
 800d97c:	f00b fdd5 	bl	801952a <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800d980:	6823      	ldr	r3, [r4, #0]
 800d982:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d986:	d13a      	bne.n	800d9fe <HAL_PCD_MspInit+0x8e>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d988:	4c1f      	ldr	r4, [pc, #124]	; (800da08 <HAL_PCD_MspInit+0x98>)
 800d98a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800d98c:	f043 0301 	orr.w	r3, r3, #1
 800d990:	64e3      	str	r3, [r4, #76]	; 0x4c
 800d992:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800d994:	f003 0301 	and.w	r3, r3, #1
 800d998:	9300      	str	r3, [sp, #0]
 800d99a:	9b00      	ldr	r3, [sp, #0]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d99c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d9a0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d9a2:	2302      	movs	r3, #2
 800d9a4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d9a6:	2303      	movs	r3, #3
 800d9a8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d9aa:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d9ac:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d9ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d9b2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d9b4:	f7f5 fa52 	bl	8002e5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d9b8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800d9ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d9be:	64e3      	str	r3, [r4, #76]	; 0x4c
 800d9c0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800d9c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d9c6:	9301      	str	r3, [sp, #4]
 800d9c8:	9b01      	ldr	r3, [sp, #4]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d9ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d9cc:	00db      	lsls	r3, r3, #3
 800d9ce:	d418      	bmi.n	800da02 <HAL_PCD_MspInit+0x92>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d9d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d9d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d9d6:	65a3      	str	r3, [r4, #88]	; 0x58
 800d9d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d9da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d9de:	9302      	str	r3, [sp, #8]
 800d9e0:	9b02      	ldr	r3, [sp, #8]
      HAL_PWREx_EnableVddUSB();
 800d9e2:	f7f6 f88d 	bl	8003b00 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800d9e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d9e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d9ec:	65a3      	str	r3, [r4, #88]	; 0x58
    {
      HAL_PWREx_EnableVddUSB();
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	2043      	movs	r0, #67	; 0x43
 800d9f2:	4611      	mov	r1, r2
 800d9f4:	f7f5 f920 	bl	8002c38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d9f8:	2043      	movs	r0, #67	; 0x43
 800d9fa:	f7f5 f951 	bl	8002ca0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d9fe:	b008      	add	sp, #32
 800da00:	bd10      	pop	{r4, pc}
      HAL_PWREx_EnableVddUSB();
 800da02:	f7f6 f87d 	bl	8003b00 <HAL_PWREx_EnableVddUSB>
 800da06:	e7f2      	b.n	800d9ee <HAL_PCD_MspInit+0x7e>
 800da08:	40021000 	.word	0x40021000

0800da0c <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800da0c:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 800da10:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800da14:	f7f9 bc2e 	b.w	8007274 <USBD_LL_SetupStage>

0800da18 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800da18:	231c      	movs	r3, #28
 800da1a:	fb03 0301 	mla	r3, r3, r1, r0
 800da1e:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800da22:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800da26:	f7f9 bc52 	b.w	80072ce <USBD_LL_DataOutStage>

0800da2a <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800da2a:	231c      	movs	r3, #28
 800da2c:	fb03 0301 	mla	r3, r3, r1, r0
 800da30:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800da34:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800da36:	f7f9 bc84 	b.w	8007342 <USBD_LL_DataInStage>

0800da3a <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800da3a:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800da3e:	f7f9 bd15 	b.w	800746c <USBD_LL_SOF>

0800da42 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800da42:	68c3      	ldr	r3, [r0, #12]
 800da44:	2b02      	cmp	r3, #2
{ 
 800da46:	b510      	push	{r4, lr}
 800da48:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800da4a:	d001      	beq.n	800da50 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 800da4c:	f7f4 f91a 	bl	8001c84 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800da50:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 800da54:	2101      	movs	r1, #1
 800da56:	f7f9 fcf7 	bl	8007448 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800da5a:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
}
 800da5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800da62:	f7f9 bcca 	b.w	80073fa <USBD_LL_Reset>
	...

0800da68 <HAL_PCD_SuspendCallback>:
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800da68:	6802      	ldr	r2, [r0, #0]
 800da6a:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
{
 800da6e:	b510      	push	{r4, lr}
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800da70:	f043 0301 	orr.w	r3, r3, #1
{
 800da74:	4604      	mov	r4, r0
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800da76:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800da7a:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800da7e:	f7f9 fce6 	bl	800744e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800da82:	6a23      	ldr	r3, [r4, #32]
 800da84:	b123      	cbz	r3, 800da90 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800da86:	4a03      	ldr	r2, [pc, #12]	; (800da94 <HAL_PCD_SuspendCallback+0x2c>)
 800da88:	6913      	ldr	r3, [r2, #16]
 800da8a:	f043 0306 	orr.w	r3, r3, #6
 800da8e:	6113      	str	r3, [r2, #16]
 800da90:	bd10      	pop	{r4, pc}
 800da92:	bf00      	nop
 800da94:	e000ed00 	.word	0xe000ed00

0800da98 <HAL_PCD_ResumeCallback>:
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800da98:	6802      	ldr	r2, [r0, #0]
 800da9a:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 800da9e:	f023 0301 	bic.w	r3, r3, #1
{
 800daa2:	b510      	push	{r4, lr}
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800daa4:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800daa8:	6a03      	ldr	r3, [r0, #32]
{
 800daaa:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 800daac:	b133      	cbz	r3, 800dabc <HAL_PCD_ResumeCallback+0x24>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800daae:	4a06      	ldr	r2, [pc, #24]	; (800dac8 <HAL_PCD_ResumeCallback+0x30>)
 800dab0:	6913      	ldr	r3, [r2, #16]
 800dab2:	f023 0306 	bic.w	r3, r3, #6
 800dab6:	6113      	str	r3, [r2, #16]
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 800dab8:	f7f3 fdea 	bl	8001690 <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800dabc:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
}
 800dac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800dac4:	f7f9 bccc 	b.w	8007460 <USBD_LL_Resume>
 800dac8:	e000ed00 	.word	0xe000ed00

0800dacc <HAL_PCD_ISOOUTIncompleteCallback>:
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800dacc:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800dad0:	f7f9 bcda 	b.w	8007488 <USBD_LL_IsoOUTIncomplete>

0800dad4 <HAL_PCD_ISOINIncompleteCallback>:
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800dad4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800dad8:	f7f9 bcd4 	b.w	8007484 <USBD_LL_IsoINIncomplete>

0800dadc <HAL_PCD_ConnectCallback>:
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800dadc:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800dae0:	f7f9 bcd4 	b.w	800748c <USBD_LL_DevConnected>

0800dae4 <HAL_PCD_DisconnectCallback>:
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800dae4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800dae8:	f7f9 bcd2 	b.w	8007490 <USBD_LL_DevDisconnected>

0800daec <USBD_LL_Init>:
{
 800daec:	b508      	push	{r3, lr}
  if (pdev->id == DEVICE_FS) {
 800daee:	7802      	ldrb	r2, [r0, #0]
 800daf0:	bb32      	cbnz	r2, 800db40 <USBD_LL_Init+0x54>
  hpcd_USB_OTG_FS.pData = pdev;
 800daf2:	4b14      	ldr	r3, [pc, #80]	; (800db44 <USBD_LL_Init+0x58>)
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800daf4:	2106      	movs	r1, #6
  hpcd_USB_OTG_FS.pData = pdev;
 800daf6:	f8c3 0404 	str.w	r0, [r3, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800dafa:	f8c0 3298 	str.w	r3, [r0, #664]	; 0x298
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800dafe:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800db02:	e883 0003 	stmia.w	r3, {r0, r1}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800db06:	2102      	movs	r1, #2
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800db08:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800db0a:	60d9      	str	r1, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800db0c:	6199      	str	r1, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800db0e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800db10:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800db12:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800db14:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800db16:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800db18:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800db1a:	f7f5 fb28 	bl	800316e <HAL_PCD_Init>
 800db1e:	b108      	cbz	r0, 800db24 <USBD_LL_Init+0x38>
    Error_Handler( );
 800db20:	f7f4 f8b0 	bl	8001c84 <Error_Handler>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800db24:	2180      	movs	r1, #128	; 0x80
 800db26:	4807      	ldr	r0, [pc, #28]	; (800db44 <USBD_LL_Init+0x58>)
 800db28:	f7f5 ff8c 	bl	8003a44 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800db2c:	2240      	movs	r2, #64	; 0x40
 800db2e:	2100      	movs	r1, #0
 800db30:	4804      	ldr	r0, [pc, #16]	; (800db44 <USBD_LL_Init+0x58>)
 800db32:	f7f5 ff66 	bl	8003a02 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800db36:	2280      	movs	r2, #128	; 0x80
 800db38:	2101      	movs	r1, #1
 800db3a:	4802      	ldr	r0, [pc, #8]	; (800db44 <USBD_LL_Init+0x58>)
 800db3c:	f7f5 ff61 	bl	8003a02 <HAL_PCDEx_SetTxFiFo>
}
 800db40:	2000      	movs	r0, #0
 800db42:	bd08      	pop	{r3, pc}
 800db44:	2000be3c 	.word	0x2000be3c

0800db48 <USBD_LL_Start>:
{
 800db48:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800db4a:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800db4e:	f7f5 fb9b 	bl	8003288 <HAL_PCD_Start>
 800db52:	2803      	cmp	r0, #3
 800db54:	bf9a      	itte	ls
 800db56:	4b02      	ldrls	r3, [pc, #8]	; (800db60 <USBD_LL_Start+0x18>)
 800db58:	5c18      	ldrbls	r0, [r3, r0]
 800db5a:	2002      	movhi	r0, #2
}
 800db5c:	bd08      	pop	{r3, pc}
 800db5e:	bf00      	nop
 800db60:	080d8953 	.word	0x080d8953

0800db64 <USBD_LL_OpenEP>:
{
 800db64:	b510      	push	{r4, lr}
 800db66:	461c      	mov	r4, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800db68:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800db6c:	4613      	mov	r3, r2
 800db6e:	4622      	mov	r2, r4
 800db70:	f7f5 fe22 	bl	80037b8 <HAL_PCD_EP_Open>
 800db74:	2803      	cmp	r0, #3
 800db76:	bf9a      	itte	ls
 800db78:	4b01      	ldrls	r3, [pc, #4]	; (800db80 <USBD_LL_OpenEP+0x1c>)
 800db7a:	5c18      	ldrbls	r0, [r3, r0]
 800db7c:	2002      	movhi	r0, #2
}
 800db7e:	bd10      	pop	{r4, pc}
 800db80:	080d8953 	.word	0x080d8953

0800db84 <USBD_LL_CloseEP>:
{
 800db84:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800db86:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800db8a:	f7f5 fe4a 	bl	8003822 <HAL_PCD_EP_Close>
 800db8e:	2803      	cmp	r0, #3
 800db90:	bf9a      	itte	ls
 800db92:	4b02      	ldrls	r3, [pc, #8]	; (800db9c <USBD_LL_CloseEP+0x18>)
 800db94:	5c18      	ldrbls	r0, [r3, r0]
 800db96:	2002      	movhi	r0, #2
}
 800db98:	bd08      	pop	{r3, pc}
 800db9a:	bf00      	nop
 800db9c:	080d8953 	.word	0x080d8953

0800dba0 <USBD_LL_FlushEP>:
{
 800dba0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800dba2:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800dba6:	f7f5 ff12 	bl	80039ce <HAL_PCD_EP_Flush>
 800dbaa:	2803      	cmp	r0, #3
 800dbac:	bf9a      	itte	ls
 800dbae:	4b02      	ldrls	r3, [pc, #8]	; (800dbb8 <USBD_LL_FlushEP+0x18>)
 800dbb0:	5c18      	ldrbls	r0, [r3, r0]
 800dbb2:	2002      	movhi	r0, #2
}
 800dbb4:	bd08      	pop	{r3, pc}
 800dbb6:	bf00      	nop
 800dbb8:	080d8953 	.word	0x080d8953

0800dbbc <USBD_LL_StallEP>:
{
 800dbbc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800dbbe:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800dbc2:	f7f5 fe99 	bl	80038f8 <HAL_PCD_EP_SetStall>
 800dbc6:	2803      	cmp	r0, #3
 800dbc8:	bf9a      	itte	ls
 800dbca:	4b02      	ldrls	r3, [pc, #8]	; (800dbd4 <USBD_LL_StallEP+0x18>)
 800dbcc:	5c18      	ldrbls	r0, [r3, r0]
 800dbce:	2002      	movhi	r0, #2
}
 800dbd0:	bd08      	pop	{r3, pc}
 800dbd2:	bf00      	nop
 800dbd4:	080d8953 	.word	0x080d8953

0800dbd8 <USBD_LL_ClearStallEP>:
{
 800dbd8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800dbda:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800dbde:	f7f5 fec4 	bl	800396a <HAL_PCD_EP_ClrStall>
 800dbe2:	2803      	cmp	r0, #3
 800dbe4:	bf9a      	itte	ls
 800dbe6:	4b02      	ldrls	r3, [pc, #8]	; (800dbf0 <USBD_LL_ClearStallEP+0x18>)
 800dbe8:	5c18      	ldrbls	r0, [r3, r0]
 800dbea:	2002      	movhi	r0, #2
}
 800dbec:	bd08      	pop	{r3, pc}
 800dbee:	bf00      	nop
 800dbf0:	080d8953 	.word	0x080d8953

0800dbf4 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 800dbf4:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800dbf8:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 800dbfc:	f04f 021c 	mov.w	r2, #28
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800dc00:	bf1b      	ittet	ne
 800dc02:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 800dc06:	fb02 3101 	mlane	r1, r2, r1, r3
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800dc0a:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800dc0e:	f891 003e 	ldrbne.w	r0, [r1, #62]	; 0x3e
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800dc12:	bf08      	it	eq
 800dc14:	f891 01fe 	ldrbeq.w	r0, [r1, #510]	; 0x1fe
}
 800dc18:	4770      	bx	lr
	...

0800dc1c <USBD_LL_SetUSBAddress>:
{
 800dc1c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800dc1e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800dc22:	f7f5 fdb5 	bl	8003790 <HAL_PCD_SetAddress>
 800dc26:	2803      	cmp	r0, #3
 800dc28:	bf9a      	itte	ls
 800dc2a:	4b02      	ldrls	r3, [pc, #8]	; (800dc34 <USBD_LL_SetUSBAddress+0x18>)
 800dc2c:	5c18      	ldrbls	r0, [r3, r0]
 800dc2e:	2002      	movhi	r0, #2
}
 800dc30:	bd08      	pop	{r3, pc}
 800dc32:	bf00      	nop
 800dc34:	080d8953 	.word	0x080d8953

0800dc38 <USBD_LL_Transmit>:
{
 800dc38:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800dc3a:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800dc3e:	f7f5 fe40 	bl	80038c2 <HAL_PCD_EP_Transmit>
 800dc42:	2803      	cmp	r0, #3
 800dc44:	bf9a      	itte	ls
 800dc46:	4b02      	ldrls	r3, [pc, #8]	; (800dc50 <USBD_LL_Transmit+0x18>)
 800dc48:	5c18      	ldrbls	r0, [r3, r0]
 800dc4a:	2002      	movhi	r0, #2
}
 800dc4c:	bd08      	pop	{r3, pc}
 800dc4e:	bf00      	nop
 800dc50:	080d8953 	.word	0x080d8953

0800dc54 <USBD_LL_PrepareReceive>:
{
 800dc54:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800dc56:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800dc5a:	f7f5 fe0c 	bl	8003876 <HAL_PCD_EP_Receive>
 800dc5e:	2803      	cmp	r0, #3
 800dc60:	bf9a      	itte	ls
 800dc62:	4b02      	ldrls	r3, [pc, #8]	; (800dc6c <USBD_LL_PrepareReceive+0x18>)
 800dc64:	5c18      	ldrbls	r0, [r3, r0]
 800dc66:	2002      	movhi	r0, #2
}
 800dc68:	bd08      	pop	{r3, pc}
 800dc6a:	bf00      	nop
 800dc6c:	080d8953 	.word	0x080d8953

0800dc70 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800dc70:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800dc74:	f7f5 be1d 	b.w	80038b2 <HAL_PCD_EP_GetRxCount>

0800dc78 <HAL_PCDEx_LPM_Callback>:
{
 800dc78:	b510      	push	{r4, lr}
 800dc7a:	4604      	mov	r4, r0
  switch (msg)
 800dc7c:	b111      	cbz	r1, 800dc84 <HAL_PCDEx_LPM_Callback+0xc>
 800dc7e:	2901      	cmp	r1, #1
 800dc80:	d016      	beq.n	800dcb0 <HAL_PCDEx_LPM_Callback+0x38>
 800dc82:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 800dc84:	6a03      	ldr	r3, [r0, #32]
 800dc86:	b133      	cbz	r3, 800dc96 <HAL_PCDEx_LPM_Callback+0x1e>
  SystemClock_Config();
 800dc88:	f7f3 fd02 	bl	8001690 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dc8c:	4a12      	ldr	r2, [pc, #72]	; (800dcd8 <HAL_PCDEx_LPM_Callback+0x60>)
 800dc8e:	6913      	ldr	r3, [r2, #16]
 800dc90:	f023 0306 	bic.w	r3, r3, #6
 800dc94:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800dc96:	6822      	ldr	r2, [r4, #0]
    USBD_LL_Resume(hpcd->pData);
 800dc98:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800dc9c:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 800dca0:	f023 0301 	bic.w	r3, r3, #1
 800dca4:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
}
 800dca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    USBD_LL_Resume(hpcd->pData);
 800dcac:	f7f9 bbd8 	b.w	8007460 <USBD_LL_Resume>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800dcb0:	6802      	ldr	r2, [r0, #0]
    USBD_LL_Suspend(hpcd->pData);
 800dcb2:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800dcb6:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 800dcba:	f043 0301 	orr.w	r3, r3, #1
 800dcbe:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Suspend(hpcd->pData);
 800dcc2:	f7f9 fbc4 	bl	800744e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800dcc6:	6a23      	ldr	r3, [r4, #32]
 800dcc8:	b123      	cbz	r3, 800dcd4 <HAL_PCDEx_LPM_Callback+0x5c>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dcca:	4a03      	ldr	r2, [pc, #12]	; (800dcd8 <HAL_PCDEx_LPM_Callback+0x60>)
 800dccc:	6913      	ldr	r3, [r2, #16]
 800dcce:	f043 0306 	orr.w	r3, r3, #6
 800dcd2:	6113      	str	r3, [r2, #16]
 800dcd4:	bd10      	pop	{r4, pc}
 800dcd6:	bf00      	nop
 800dcd8:	e000ed00 	.word	0xe000ed00

0800dcdc <USBD_static_malloc>:
}
 800dcdc:	4800      	ldr	r0, [pc, #0]	; (800dce0 <USBD_static_malloc+0x4>)
 800dcde:	4770      	bx	lr
 800dce0:	20005ce8 	.word	0x20005ce8

0800dce4 <USBD_static_free>:
{
 800dce4:	4770      	bx	lr

0800dce6 <lv_disp_get_scr_act>:
 * @param disp pointer to display which active screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
 800dce6:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 800dce8:	b910      	cbnz	r0, 800dcf0 <lv_disp_get_scr_act+0xa>
 800dcea:	f005 fcdb 	bl	80136a4 <lv_disp_get_default>
    if(!disp) {
 800dcee:	b100      	cbz	r0, 800dcf2 <lv_disp_get_scr_act+0xc>
        LV_LOG_WARN("lv_scr_act: no display registered to get its top layer");
        return NULL;
    }

    return disp->act_scr;
 800dcf0:	6b40      	ldr	r0, [r0, #52]	; 0x34
}
 800dcf2:	bd08      	pop	{r3, pc}

0800dcf4 <lv_disp_load_scr>:
/**
 * Make a screen active
 * @param scr pointer to a screen
 */
void lv_disp_load_scr(lv_obj_t * scr)
{
 800dcf4:	b510      	push	{r4, lr}
 800dcf6:	4604      	mov	r4, r0
    lv_disp_t * d = lv_obj_get_disp(scr);
 800dcf8:	f000 fb06 	bl	800e308 <lv_obj_get_disp>

    d->act_scr = scr;
 800dcfc:	6344      	str	r4, [r0, #52]	; 0x34

    lv_obj_invalidate(scr);
 800dcfe:	4620      	mov	r0, r4
}
 800dd00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_invalidate(scr);
 800dd04:	f000 bb26 	b.w	800e354 <lv_obj_invalidate>

0800dd08 <lv_disp_get_layer_top>:
 * Return with the top layer. (Same on every screen and it is above the normal screen layer)
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
 800dd08:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 800dd0a:	b910      	cbnz	r0, 800dd12 <lv_disp_get_layer_top+0xa>
 800dd0c:	f005 fcca 	bl	80136a4 <lv_disp_get_default>
    if(!disp) {
 800dd10:	b100      	cbz	r0, 800dd14 <lv_disp_get_layer_top+0xc>
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
        return NULL;
    }

    return disp->top_layer;
 800dd12:	6b80      	ldr	r0, [r0, #56]	; 0x38
}
 800dd14:	bd08      	pop	{r3, pc}

0800dd16 <lv_disp_get_layer_sys>:
 * layer)
 * @param disp pointer to display which sys. layer  should be get. (NULL to use the default screen)
 * @return pointer to the sys layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
 800dd16:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 800dd18:	b910      	cbnz	r0, 800dd20 <lv_disp_get_layer_sys+0xa>
 800dd1a:	f005 fcc3 	bl	80136a4 <lv_disp_get_default>
    if(!disp) {
 800dd1e:	b100      	cbz	r0, 800dd22 <lv_disp_get_layer_sys+0xc>
        LV_LOG_WARN("lv_layer_sys: no display registered to get its top layer");
        return NULL;
    }

    return disp->sys_layer;
 800dd20:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 800dd22:	bd08      	pop	{r3, pc}

0800dd24 <obj_to_foreground>:

    if(group->focus_cb) group->focus_cb(group);
}

static void obj_to_foreground(lv_obj_t * obj)
{
 800dd24:	b510      	push	{r4, lr}
    /*Search for 'top' attribute*/
    lv_obj_t * i        = obj;
    lv_obj_t * last_top = NULL;
 800dd26:	2400      	movs	r4, #0
    while(i != NULL) {
 800dd28:	b928      	cbnz	r0, 800dd36 <obj_to_foreground+0x12>
        if(i->top != 0) last_top = i;
        i = lv_obj_get_parent(i);
    }

    if(last_top != NULL) {
 800dd2a:	b16c      	cbz	r4, 800dd48 <obj_to_foreground+0x24>
        /*Move the last_top object to the foreground*/
        lv_obj_move_foreground(last_top);
 800dd2c:	4620      	mov	r0, r4
    }
}
 800dd2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        lv_obj_move_foreground(last_top);
 800dd32:	f000 bb5f 	b.w	800e3f4 <lv_obj_move_foreground>
        if(i->top != 0) last_top = i;
 800dd36:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800dd3a:	f013 0f20 	tst.w	r3, #32
 800dd3e:	bf18      	it	ne
 800dd40:	4604      	movne	r4, r0
        i = lv_obj_get_parent(i);
 800dd42:	f001 f847 	bl	800edd4 <lv_obj_get_parent>
 800dd46:	e7ef      	b.n	800dd28 <obj_to_foreground+0x4>
 800dd48:	bd10      	pop	{r4, pc}

0800dd4a <focus_next_core.part.0>:
static void focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
 800dd4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    lv_obj_t ** obj_next     = group->obj_focus;
 800dd4e:	68c5      	ldr	r5, [r0, #12]
static void focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
 800dd50:	4604      	mov	r4, r0
 800dd52:	4689      	mov	r9, r1
 800dd54:	4692      	mov	sl, r2
    bool can_begin           = true;
 800dd56:	2701      	movs	r7, #1
    lv_obj_t ** obj_sentinel = NULL;
 800dd58:	2600      	movs	r6, #0
        if(obj_next == NULL) {
 800dd5a:	2d00      	cmp	r5, #0
 800dd5c:	d14d      	bne.n	800ddfa <focus_next_core.part.0+0xb0>
            if(group->wrap || obj_sentinel == NULL) {
 800dd5e:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800dd62:	06db      	lsls	r3, r3, #27
 800dd64:	d403      	bmi.n	800dd6e <focus_next_core.part.0+0x24>
 800dd66:	2e00      	cmp	r6, #0
 800dd68:	d056      	beq.n	800de18 <focus_next_core.part.0+0xce>
 800dd6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                if(!can_begin) return;
 800dd6e:	2f00      	cmp	r7, #0
 800dd70:	d054      	beq.n	800de1c <focus_next_core.part.0+0xd2>
                obj_next  = begin(&group->obj_ll);
 800dd72:	4620      	mov	r0, r4
 800dd74:	47c8      	blx	r9
 800dd76:	4605      	mov	r5, r0
        if(obj_sentinel == NULL) {
 800dd78:	2e00      	cmp	r6, #0
 800dd7a:	d13a      	bne.n	800ddf2 <focus_next_core.part.0+0xa8>
            if(obj_sentinel == NULL) return; /*Group is empty*/
 800dd7c:	2d00      	cmp	r5, #0
 800dd7e:	d04d      	beq.n	800de1c <focus_next_core.part.0+0xd2>
 800dd80:	462e      	mov	r6, r5
 800dd82:	2700      	movs	r7, #0
        if(!lv_obj_get_hidden(*obj_next)) break;
 800dd84:	6828      	ldr	r0, [r5, #0]
 800dd86:	f001 f8f5 	bl	800ef74 <lv_obj_get_hidden>
 800dd8a:	4680      	mov	r8, r0
 800dd8c:	2800      	cmp	r0, #0
 800dd8e:	d1e4      	bne.n	800dd5a <focus_next_core.part.0+0x10>
    if(obj_next == group->obj_focus) return; /*There's only one visible object and it's already focused*/
 800dd90:	68e3      	ldr	r3, [r4, #12]
 800dd92:	42ab      	cmp	r3, r5
 800dd94:	d042      	beq.n	800de1c <focus_next_core.part.0+0xd2>
    if(group->obj_focus) {
 800dd96:	b183      	cbz	r3, 800ddba <focus_next_core.part.0+0x70>
        (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
 800dd98:	6818      	ldr	r0, [r3, #0]
 800dd9a:	4642      	mov	r2, r8
 800dd9c:	69c3      	ldr	r3, [r0, #28]
 800dd9e:	2110      	movs	r1, #16
 800dda0:	4798      	blx	r3
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, NULL);
 800dda2:	68e3      	ldr	r3, [r4, #12]
 800dda4:	4642      	mov	r2, r8
 800dda6:	210d      	movs	r1, #13
 800dda8:	6818      	ldr	r0, [r3, #0]
 800ddaa:	f000 fa3d 	bl	800e228 <lv_event_send>
        if(res != LV_RES_OK) return;
 800ddae:	2801      	cmp	r0, #1
 800ddb0:	d134      	bne.n	800de1c <focus_next_core.part.0+0xd2>
        lv_obj_invalidate(*group->obj_focus);
 800ddb2:	68e3      	ldr	r3, [r4, #12]
 800ddb4:	6818      	ldr	r0, [r3, #0]
 800ddb6:	f000 facd 	bl	800e354 <lv_obj_invalidate>
    (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_FOCUS, NULL);
 800ddba:	6828      	ldr	r0, [r5, #0]
    group->obj_focus = obj_next;
 800ddbc:	60e5      	str	r5, [r4, #12]
    (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_FOCUS, NULL);
 800ddbe:	69c3      	ldr	r3, [r0, #28]
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	210f      	movs	r1, #15
 800ddc4:	4798      	blx	r3
    lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, NULL);
 800ddc6:	68e3      	ldr	r3, [r4, #12]
 800ddc8:	2200      	movs	r2, #0
 800ddca:	210c      	movs	r1, #12
 800ddcc:	6818      	ldr	r0, [r3, #0]
 800ddce:	f000 fa2b 	bl	800e228 <lv_event_send>
    if(res != LV_RES_OK) return;
 800ddd2:	2801      	cmp	r0, #1
 800ddd4:	d122      	bne.n	800de1c <focus_next_core.part.0+0xd2>
    obj_to_foreground(*group->obj_focus);
 800ddd6:	68e3      	ldr	r3, [r4, #12]
 800ddd8:	6818      	ldr	r0, [r3, #0]
 800ddda:	f7ff ffa3 	bl	800dd24 <obj_to_foreground>
    lv_obj_invalidate(*group->obj_focus);
 800ddde:	68e3      	ldr	r3, [r4, #12]
 800dde0:	6818      	ldr	r0, [r3, #0]
 800dde2:	f000 fab7 	bl	800e354 <lv_obj_invalidate>
    if(group->focus_cb) group->focus_cb(group);
 800dde6:	69a3      	ldr	r3, [r4, #24]
 800dde8:	b1c3      	cbz	r3, 800de1c <focus_next_core.part.0+0xd2>
 800ddea:	4620      	mov	r0, r4
}
 800ddec:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if(group->focus_cb) group->focus_cb(group);
 800ddf0:	4718      	bx	r3
        if(obj_sentinel == NULL) {
 800ddf2:	2700      	movs	r7, #0
        if(obj_next == NULL) continue;
 800ddf4:	2d00      	cmp	r5, #0
 800ddf6:	d1c5      	bne.n	800dd84 <focus_next_core.part.0+0x3a>
 800ddf8:	e7b1      	b.n	800dd5e <focus_next_core.part.0+0x14>
            obj_next = move(&group->obj_ll, obj_next);
 800ddfa:	4629      	mov	r1, r5
 800ddfc:	4620      	mov	r0, r4
 800ddfe:	47d0      	blx	sl
        if(obj_sentinel == NULL) {
 800de00:	2e00      	cmp	r6, #0
 800de02:	bf08      	it	eq
 800de04:	462e      	moveq	r6, r5
            if(obj_next == obj_sentinel) return;
 800de06:	42b0      	cmp	r0, r6
            obj_next = move(&group->obj_ll, obj_next);
 800de08:	4605      	mov	r5, r0
            if(obj_next == obj_sentinel) return;
 800de0a:	d1f3      	bne.n	800ddf4 <focus_next_core.part.0+0xaa>
 800de0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                obj_next  = begin(&group->obj_ll);
 800de10:	4620      	mov	r0, r4
 800de12:	47c8      	blx	r9
 800de14:	4605      	mov	r5, r0
 800de16:	e7b1      	b.n	800dd7c <focus_next_core.part.0+0x32>
                if(!can_begin) return;
 800de18:	2f00      	cmp	r7, #0
 800de1a:	d1f9      	bne.n	800de10 <focus_next_core.part.0+0xc6>
 800de1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800de20 <lv_group_init>:
    lv_ll_init(&LV_GC_ROOT(_lv_group_ll), sizeof(lv_group_t));
 800de20:	2160      	movs	r1, #96	; 0x60
 800de22:	4801      	ldr	r0, [pc, #4]	; (800de28 <lv_group_init+0x8>)
 800de24:	f005 bece 	b.w	8013bc4 <lv_ll_init>
 800de28:	2000c5a4 	.word	0x2000c5a4

0800de2c <lv_group_focus_next>:
    if(group->frozen) return;
 800de2c:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 800de30:	07db      	lsls	r3, r3, #31
 800de32:	d403      	bmi.n	800de3c <lv_group_focus_next+0x10>
 800de34:	4a02      	ldr	r2, [pc, #8]	; (800de40 <lv_group_focus_next+0x14>)
 800de36:	4903      	ldr	r1, [pc, #12]	; (800de44 <lv_group_focus_next+0x18>)
 800de38:	f7ff bf87 	b.w	800dd4a <focus_next_core.part.0>
 800de3c:	4770      	bx	lr
 800de3e:	bf00      	nop
 800de40:	08013c5d 	.word	0x08013c5d
 800de44:	08013c51 	.word	0x08013c51

0800de48 <lv_group_focus_prev>:
 800de48:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 800de4c:	07db      	lsls	r3, r3, #31
 800de4e:	d403      	bmi.n	800de58 <lv_group_focus_prev+0x10>
 800de50:	4a02      	ldr	r2, [pc, #8]	; (800de5c <lv_group_focus_prev+0x14>)
 800de52:	4903      	ldr	r1, [pc, #12]	; (800de60 <lv_group_focus_prev+0x18>)
 800de54:	f7ff bf79 	b.w	800dd4a <focus_next_core.part.0>
 800de58:	4770      	bx	lr
 800de5a:	bf00      	nop
 800de5c:	08013c67 	.word	0x08013c67
 800de60:	08013c57 	.word	0x08013c57

0800de64 <lv_group_refocus>:
{
 800de64:	b538      	push	{r3, r4, r5, lr}
    uint8_t temp_wrap = g->wrap;
 800de66:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 800de6a:	f3c3 1500 	ubfx	r5, r3, #4, #1
    g->wrap           = 1;
 800de6e:	f043 0310 	orr.w	r3, r3, #16
 800de72:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 800de76:	071b      	lsls	r3, r3, #28
{
 800de78:	4604      	mov	r4, r0
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 800de7a:	d408      	bmi.n	800de8e <lv_group_refocus+0x2a>
        lv_group_focus_next(g);
 800de7c:	f7ff ffd6 	bl	800de2c <lv_group_focus_next>
    g->wrap = temp_wrap;
 800de80:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800de84:	f365 1304 	bfi	r3, r5, #4, #1
 800de88:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 800de8c:	bd38      	pop	{r3, r4, r5, pc}
        lv_group_focus_prev(g);
 800de8e:	f7ff ffdb 	bl	800de48 <lv_group_focus_prev>
 800de92:	e7f5      	b.n	800de80 <lv_group_refocus+0x1c>

0800de94 <lv_group_add_obj>:
{
 800de94:	b570      	push	{r4, r5, r6, lr}
 800de96:	460c      	mov	r4, r1
    if(group == NULL) return;
 800de98:	4605      	mov	r5, r0
 800de9a:	b328      	cbz	r0, 800dee8 <lv_group_add_obj+0x54>
    LV_LL_READ(group->obj_ll, obj_i)
 800de9c:	f005 fed8 	bl	8013c50 <lv_ll_get_head>
 800dea0:	b978      	cbnz	r0, 800dec2 <lv_group_add_obj+0x2e>
    if(obj->group_p) {
 800dea2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800dea4:	b133      	cbz	r3, 800deb4 <lv_group_add_obj+0x20>
        if(lv_obj_is_focused(obj)) {
 800dea6:	4620      	mov	r0, r4
 800dea8:	f001 f8d9 	bl	800f05e <lv_obj_is_focused>
 800deac:	b110      	cbz	r0, 800deb4 <lv_group_add_obj+0x20>
            lv_group_refocus(obj->group_p);
 800deae:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800deb0:	f7ff ffd8 	bl	800de64 <lv_group_refocus>
    obj->group_p     = group;
 800deb4:	62e5      	str	r5, [r4, #44]	; 0x2c
    lv_obj_t ** next = lv_ll_ins_tail(&group->obj_ll);
 800deb6:	4628      	mov	r0, r5
 800deb8:	f005 feac 	bl	8013c14 <lv_ll_ins_tail>
    lv_mem_assert(next);
 800debc:	4606      	mov	r6, r0
 800debe:	b940      	cbnz	r0, 800ded2 <lv_group_add_obj+0x3e>
 800dec0:	e7fe      	b.n	800dec0 <lv_group_add_obj+0x2c>
        if((*obj_i) == obj) {
 800dec2:	6803      	ldr	r3, [r0, #0]
 800dec4:	42a3      	cmp	r3, r4
 800dec6:	d00f      	beq.n	800dee8 <lv_group_add_obj+0x54>
    LV_LL_READ(group->obj_ll, obj_i)
 800dec8:	4601      	mov	r1, r0
 800deca:	4628      	mov	r0, r5
 800decc:	f005 fec6 	bl	8013c5c <lv_ll_get_next>
 800ded0:	e7e6      	b.n	800dea0 <lv_group_add_obj+0xc>
    *next = obj;
 800ded2:	6004      	str	r4, [r0, #0]
    if(lv_ll_get_head(&group->obj_ll) == next) {
 800ded4:	4628      	mov	r0, r5
 800ded6:	f005 febb 	bl	8013c50 <lv_ll_get_head>
 800deda:	4286      	cmp	r6, r0
 800dedc:	d104      	bne.n	800dee8 <lv_group_add_obj+0x54>
        lv_group_refocus(group);
 800dede:	4628      	mov	r0, r5
}
 800dee0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        lv_group_refocus(group);
 800dee4:	f7ff bfbe 	b.w	800de64 <lv_group_refocus>
 800dee8:	bd70      	pop	{r4, r5, r6, pc}

0800deea <lv_group_remove_obj>:
{
 800deea:	b570      	push	{r4, r5, r6, lr}
    lv_group_t * g = obj->group_p;
 800deec:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
{
 800deee:	4606      	mov	r6, r0
    if(g == NULL) return;
 800def0:	b304      	cbz	r4, 800df34 <lv_group_remove_obj+0x4a>
    if(g->obj_focus == NULL) return; /*Just to be sure (Not possible if there is at least one object in the group)*/
 800def2:	68e3      	ldr	r3, [r4, #12]
 800def4:	b1f3      	cbz	r3, 800df34 <lv_group_remove_obj+0x4a>
    if(*g->obj_focus == obj) {
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	4298      	cmp	r0, r3
 800defa:	d110      	bne.n	800df1e <lv_group_remove_obj+0x34>
        if(lv_ll_get_head(&g->obj_ll) == g->obj_focus && lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
 800defc:	4620      	mov	r0, r4
 800defe:	f005 fea7 	bl	8013c50 <lv_ll_get_head>
 800df02:	68e3      	ldr	r3, [r4, #12]
 800df04:	4283      	cmp	r3, r0
 800df06:	d116      	bne.n	800df36 <lv_group_remove_obj+0x4c>
 800df08:	4620      	mov	r0, r4
 800df0a:	f005 fea4 	bl	8013c56 <lv_ll_get_tail>
 800df0e:	68e3      	ldr	r3, [r4, #12]
 800df10:	4298      	cmp	r0, r3
 800df12:	d110      	bne.n	800df36 <lv_group_remove_obj+0x4c>
            (*g->obj_focus)->signal_cb(*g->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
 800df14:	6800      	ldr	r0, [r0, #0]
 800df16:	2200      	movs	r2, #0
 800df18:	69c3      	ldr	r3, [r0, #28]
 800df1a:	2110      	movs	r1, #16
 800df1c:	4798      	blx	r3
    if(*g->obj_focus == obj) {
 800df1e:	68e3      	ldr	r3, [r4, #12]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	429e      	cmp	r6, r3
        g->obj_focus = NULL;
 800df24:	bf04      	itt	eq
 800df26:	2300      	moveq	r3, #0
 800df28:	60e3      	streq	r3, [r4, #12]
    LV_LL_READ(g->obj_ll, i)
 800df2a:	4620      	mov	r0, r4
 800df2c:	f005 fe90 	bl	8013c50 <lv_ll_get_head>
 800df30:	4605      	mov	r5, r0
 800df32:	b920      	cbnz	r0, 800df3e <lv_group_remove_obj+0x54>
 800df34:	bd70      	pop	{r4, r5, r6, pc}
            lv_group_refocus(g);
 800df36:	4620      	mov	r0, r4
 800df38:	f7ff ff94 	bl	800de64 <lv_group_refocus>
 800df3c:	e7ef      	b.n	800df1e <lv_group_remove_obj+0x34>
        if(*i == obj) {
 800df3e:	682b      	ldr	r3, [r5, #0]
 800df40:	429e      	cmp	r6, r3
            lv_ll_rem(&g->obj_ll, i);
 800df42:	4629      	mov	r1, r5
 800df44:	4620      	mov	r0, r4
        if(*i == obj) {
 800df46:	d107      	bne.n	800df58 <lv_group_remove_obj+0x6e>
            lv_ll_rem(&g->obj_ll, i);
 800df48:	f005 fec1 	bl	8013cce <lv_ll_rem>
            lv_mem_free(i);
 800df4c:	4628      	mov	r0, r5
 800df4e:	f005 fffd 	bl	8013f4c <lv_mem_free>
            obj->group_p = NULL;
 800df52:	2300      	movs	r3, #0
 800df54:	62f3      	str	r3, [r6, #44]	; 0x2c
            break;
 800df56:	bd70      	pop	{r4, r5, r6, pc}
    LV_LL_READ(g->obj_ll, i)
 800df58:	f005 fe80 	bl	8013c5c <lv_ll_get_next>
 800df5c:	e7e8      	b.n	800df30 <lv_group_remove_obj+0x46>

0800df5e <lv_group_mod_style>:
{
 800df5e:	b538      	push	{r3, r4, r5, lr}
 800df60:	4604      	mov	r4, r0
    lv_style_copy(&group->style_tmp, style);
 800df62:	f100 051c 	add.w	r5, r0, #28
 800df66:	4628      	mov	r0, r5
 800df68:	f001 fbb4 	bl	800f6d4 <lv_style_copy>
    if(group->editing) {
 800df6c:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800df70:	079b      	lsls	r3, r3, #30
        if(group->style_mod_edit_cb) group->style_mod_edit_cb(group, &group->style_tmp);
 800df72:	bf4c      	ite	mi
 800df74:	6963      	ldrmi	r3, [r4, #20]
        if(group->style_mod_cb) group->style_mod_cb(group, &group->style_tmp);
 800df76:	6923      	ldrpl	r3, [r4, #16]
 800df78:	b113      	cbz	r3, 800df80 <lv_group_mod_style+0x22>
 800df7a:	4629      	mov	r1, r5
 800df7c:	4620      	mov	r0, r4
 800df7e:	4798      	blx	r3
}
 800df80:	4628      	mov	r0, r5
 800df82:	bd38      	pop	{r3, r4, r5, pc}

0800df84 <lv_group_get_focused>:
    if(!group) return NULL;
 800df84:	b110      	cbz	r0, 800df8c <lv_group_get_focused+0x8>
    if(group->obj_focus == NULL) return NULL;
 800df86:	68c0      	ldr	r0, [r0, #12]
 800df88:	b100      	cbz	r0, 800df8c <lv_group_get_focused+0x8>
    return *group->obj_focus;
 800df8a:	6800      	ldr	r0, [r0, #0]
}
 800df8c:	4770      	bx	lr

0800df8e <lv_group_set_editing>:
{
 800df8e:	b538      	push	{r3, r4, r5, lr}
    if(en_val == group->editing) return; /*Do not set the same mode again*/
 800df90:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 800df94:	f3c3 0240 	ubfx	r2, r3, #1, #1
 800df98:	428a      	cmp	r2, r1
{
 800df9a:	4604      	mov	r4, r0
    if(en_val == group->editing) return; /*Do not set the same mode again*/
 800df9c:	d018      	beq.n	800dfd0 <lv_group_set_editing+0x42>
    group->editing     = en_val;
 800df9e:	f361 0341 	bfi	r3, r1, #1, #1
 800dfa2:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    lv_obj_t * focused = lv_group_get_focused(group);
 800dfa6:	f7ff ffed 	bl	800df84 <lv_group_get_focused>
    if(focused) {
 800dfaa:	4605      	mov	r5, r0
 800dfac:	b920      	cbnz	r0, 800dfb8 <lv_group_set_editing+0x2a>
    lv_obj_invalidate(focused);
 800dfae:	4628      	mov	r0, r5
}
 800dfb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(focused);
 800dfb4:	f000 b9ce 	b.w	800e354 <lv_obj_invalidate>
        focused->signal_cb(focused, LV_SIGNAL_FOCUS, NULL); /*Focus again to properly leave/open edit/navigate mode*/
 800dfb8:	69c3      	ldr	r3, [r0, #28]
 800dfba:	2200      	movs	r2, #0
 800dfbc:	210f      	movs	r1, #15
 800dfbe:	4798      	blx	r3
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, NULL);
 800dfc0:	68e3      	ldr	r3, [r4, #12]
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	210c      	movs	r1, #12
 800dfc6:	6818      	ldr	r0, [r3, #0]
 800dfc8:	f000 f92e 	bl	800e228 <lv_event_send>
        if(res != LV_RES_OK) return;
 800dfcc:	2801      	cmp	r0, #1
 800dfce:	d0ee      	beq.n	800dfae <lv_group_set_editing+0x20>
 800dfd0:	bd38      	pop	{r3, r4, r5, pc}

0800dfd2 <lv_group_get_editing>:
    if(!group) return false;
 800dfd2:	b118      	cbz	r0, 800dfdc <lv_group_get_editing+0xa>
    return group->editing ? true : false;
 800dfd4:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
 800dfd8:	f3c0 0040 	ubfx	r0, r0, #1, #1
}
 800dfdc:	4770      	bx	lr

0800dfde <lv_indev_reset.part.1>:
}
/**
 * Reset one or all input devices
 * @param indev pointer to an input device to reset or NULL to reset all of them
 */
void lv_indev_reset(lv_indev_t * indev)
 800dfde:	b508      	push	{r3, lr}
{
    if(indev)
        indev->proc.reset_query = 1;
    else {
        lv_indev_t * i = lv_indev_get_next(NULL);
 800dfe0:	2000      	movs	r0, #0
        while(i) {
            i->proc.reset_query = 1;

            i = lv_indev_get_next(i);
 800dfe2:	f005 fbaf 	bl	8013744 <lv_indev_get_next>
        while(i) {
 800dfe6:	b900      	cbnz	r0, 800dfea <lv_indev_reset.part.1+0xc>
        }
    }
}
 800dfe8:	bd08      	pop	{r3, pc}
            i->proc.reset_query = 1;
 800dfea:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800dfee:	f043 0302 	orr.w	r3, r3, #2
 800dff2:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
 800dff6:	e7f4      	b.n	800dfe2 <lv_indev_reset.part.1+0x4>

0800dff8 <lv_indev_init>:
{
 800dff8:	f7ff bff1 	b.w	800dfde <lv_indev_reset.part.1>

0800dffc <lv_indev_get_act>:
}
 800dffc:	4b01      	ldr	r3, [pc, #4]	; (800e004 <lv_indev_get_act+0x8>)
 800dffe:	6818      	ldr	r0, [r3, #0]
 800e000:	4770      	bx	lr
 800e002:	bf00      	nop
 800e004:	20005f58 	.word	0x20005f58

0800e008 <lv_indev_get_type>:
    if(indev == NULL) return LV_INDEV_TYPE_NONE;
 800e008:	b100      	cbz	r0, 800e00c <lv_indev_get_type+0x4>
    return indev->driver.type;
 800e00a:	7800      	ldrb	r0, [r0, #0]
}
 800e00c:	4770      	bx	lr

0800e00e <lv_indev_reset>:
    if(indev)
 800e00e:	b130      	cbz	r0, 800e01e <lv_indev_reset+0x10>
        indev->proc.reset_query = 1;
 800e010:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800e014:	f043 0302 	orr.w	r3, r3, #2
 800e018:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
 800e01c:	4770      	bx	lr
 800e01e:	f7ff bfde 	b.w	800dfde <lv_indev_reset.part.1>

0800e022 <lv_indev_get_point>:
 * @param indev pointer to an input device
 * @param point pointer to a point to store the result
 */
void lv_indev_get_point(const lv_indev_t * indev, lv_point_t * point)
{
    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) {
 800e022:	7803      	ldrb	r3, [r0, #0]
 800e024:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 800e028:	2b01      	cmp	r3, #1
        point->x = -1;
        point->y = -1;
    } else {
        point->x = indev->proc.types.pointer.act_point.x;
 800e02a:	bf05      	ittet	eq
 800e02c:	f9b0 3024 	ldrsheq.w	r3, [r0, #36]	; 0x24
 800e030:	800b      	strheq	r3, [r1, #0]
        point->x = -1;
 800e032:	f64f 73ff 	movwne	r3, #65535	; 0xffff
        point->y = indev->proc.types.pointer.act_point.y;
 800e036:	f9b0 3026 	ldrsheq.w	r3, [r0, #38]	; 0x26
        point->x = -1;
 800e03a:	bf18      	it	ne
 800e03c:	800b      	strhne	r3, [r1, #0]
        point->y = indev->proc.types.pointer.act_point.y;
 800e03e:	804b      	strh	r3, [r1, #2]
 800e040:	4770      	bx	lr

0800e042 <lv_indev_is_dragging>:
 * @param indev pointer to an input device
 * @return true: drag is in progress
 */
bool lv_indev_is_dragging(const lv_indev_t * indev)
{
    if(indev == NULL) return false;
 800e042:	b150      	cbz	r0, 800e05a <lv_indev_is_dragging+0x18>
    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) return false;
 800e044:	7803      	ldrb	r3, [r0, #0]
 800e046:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 800e04a:	2b01      	cmp	r3, #1
 800e04c:	d104      	bne.n	800e058 <lv_indev_is_dragging+0x16>
    return indev->proc.types.pointer.drag_in_prog == 0 ? false : true;
 800e04e:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
 800e052:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800e056:	4770      	bx	lr
    if(indev == NULL) return false;
 800e058:	2000      	movs	r0, #0
}
 800e05a:	4770      	bx	lr

0800e05c <lv_indev_get_vect>:
 * @param indev pointer to an input device
 * @param point pointer to a point to store the types.pointer.vector
 */
void lv_indev_get_vect(const lv_indev_t * indev, lv_point_t * point)
{
    if(indev == NULL) {
 800e05c:	b918      	cbnz	r0, 800e066 <lv_indev_get_vect+0xa>
        point->x = 0;
 800e05e:	2300      	movs	r3, #0
 800e060:	800b      	strh	r3, [r1, #0]
    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) {
        point->x = 0;
        point->y = 0;
    } else {
        point->x = indev->proc.types.pointer.vect.x;
        point->y = indev->proc.types.pointer.vect.y;
 800e062:	804b      	strh	r3, [r1, #2]
 800e064:	4770      	bx	lr
    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) {
 800e066:	7803      	ldrb	r3, [r0, #0]
 800e068:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 800e06c:	2b01      	cmp	r3, #1
 800e06e:	d1f6      	bne.n	800e05e <lv_indev_get_vect+0x2>
        point->x = indev->proc.types.pointer.vect.x;
 800e070:	f9b0 302c 	ldrsh.w	r3, [r0, #44]	; 0x2c
 800e074:	800b      	strh	r3, [r1, #0]
        point->y = indev->proc.types.pointer.vect.y;
 800e076:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	; 0x2e
 800e07a:	e7f2      	b.n	800e062 <lv_indev_get_vect+0x6>

0800e07c <lv_indev_get_obj_act>:
 * @return pointer to currently active object or NULL if no active object
 */
lv_obj_t * lv_indev_get_obj_act(void)
{
    return indev_obj_act;
}
 800e07c:	4b01      	ldr	r3, [pc, #4]	; (800e084 <lv_indev_get_obj_act+0x8>)
 800e07e:	6818      	ldr	r0, [r3, #0]
 800e080:	4770      	bx	lr
 800e082:	bf00      	nop
 800e084:	20005f5c 	.word	0x20005f5c

0800e088 <lv_event_mark_deleted>:
    lv_mem_free(obj); /*Free the object itself*/
}

static void lv_event_mark_deleted(lv_obj_t * obj)
{
    lv_event_temp_data_t * t = event_temp_data_head;
 800e088:	4b05      	ldr	r3, [pc, #20]	; (800e0a0 <lv_event_mark_deleted+0x18>)
 800e08a:	681b      	ldr	r3, [r3, #0]

    while(t) {
        if(t->obj == obj) t->deleted = true;
 800e08c:	2201      	movs	r2, #1
    while(t) {
 800e08e:	b903      	cbnz	r3, 800e092 <lv_event_mark_deleted+0xa>
        t = t->prev;
    }
}
 800e090:	4770      	bx	lr
        if(t->obj == obj) t->deleted = true;
 800e092:	6819      	ldr	r1, [r3, #0]
 800e094:	4281      	cmp	r1, r0
 800e096:	bf08      	it	eq
 800e098:	711a      	strbeq	r2, [r3, #4]
        t = t->prev;
 800e09a:	689b      	ldr	r3, [r3, #8]
 800e09c:	e7f7      	b.n	800e08e <lv_event_mark_deleted+0x6>
 800e09e:	bf00      	nop
 800e0a0:	20005f64 	.word	0x20005f64

0800e0a4 <refresh_children_position>:
{
 800e0a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    LV_LL_READ(obj->child_ll, i)
 800e0a8:	1d05      	adds	r5, r0, #4
 800e0aa:	4628      	mov	r0, r5
{
 800e0ac:	460e      	mov	r6, r1
 800e0ae:	4617      	mov	r7, r2
    LV_LL_READ(obj->child_ll, i)
 800e0b0:	f005 fdce 	bl	8013c50 <lv_ll_get_head>
        i->coords.x1 += x_diff;
 800e0b4:	fa1f f886 	uxth.w	r8, r6
    LV_LL_READ(obj->child_ll, i)
 800e0b8:	4604      	mov	r4, r0
        i->coords.y1 += y_diff;
 800e0ba:	fa1f f987 	uxth.w	r9, r7
    LV_LL_READ(obj->child_ll, i)
 800e0be:	b90c      	cbnz	r4, 800e0c4 <refresh_children_position+0x20>
}
 800e0c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        i->coords.x1 += x_diff;
 800e0c4:	8a23      	ldrh	r3, [r4, #16]
 800e0c6:	4443      	add	r3, r8
 800e0c8:	8223      	strh	r3, [r4, #16]
        i->coords.y1 += y_diff;
 800e0ca:	8a63      	ldrh	r3, [r4, #18]
 800e0cc:	444b      	add	r3, r9
 800e0ce:	8263      	strh	r3, [r4, #18]
        i->coords.x2 += x_diff;
 800e0d0:	8aa3      	ldrh	r3, [r4, #20]
 800e0d2:	4443      	add	r3, r8
 800e0d4:	82a3      	strh	r3, [r4, #20]
        i->coords.y2 += y_diff;
 800e0d6:	8ae3      	ldrh	r3, [r4, #22]
 800e0d8:	444b      	add	r3, r9
 800e0da:	82e3      	strh	r3, [r4, #22]
        refresh_children_position(i, x_diff, y_diff);
 800e0dc:	4620      	mov	r0, r4
 800e0de:	463a      	mov	r2, r7
 800e0e0:	4631      	mov	r1, r6
 800e0e2:	f7ff ffdf 	bl	800e0a4 <refresh_children_position>
    LV_LL_READ(obj->child_ll, i)
 800e0e6:	4621      	mov	r1, r4
 800e0e8:	4628      	mov	r0, r5
 800e0ea:	f005 fdb7 	bl	8013c5c <lv_ll_get_next>
 800e0ee:	4604      	mov	r4, r0
 800e0f0:	e7e5      	b.n	800e0be <refresh_children_position+0x1a>
	...

0800e0f4 <lv_init>:
{
 800e0f4:	b510      	push	{r4, lr}
    if(lv_initialized) {
 800e0f6:	4c11      	ldr	r4, [pc, #68]	; (800e13c <lv_init+0x48>)
 800e0f8:	7823      	ldrb	r3, [r4, #0]
 800e0fa:	b9eb      	cbnz	r3, 800e138 <lv_init+0x44>
    lv_mem_init();
 800e0fc:	f005 fede 	bl	8013ebc <lv_mem_init>
    lv_task_core_init();
 800e100:	f005 ff78 	bl	8013ff4 <lv_task_core_init>
    lv_anim_core_init();
 800e104:	f005 fbee 	bl	80138e4 <lv_anim_core_init>
    lv_group_init();
 800e108:	f7ff fe8a 	bl	800de20 <lv_group_init>
    lv_style_init();
 800e10c:	f001 faec 	bl	800f6e8 <lv_style_init>
    lv_refr_init();
 800e110:	f001 f8d4 	bl	800f2bc <lv_refr_init>
    lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
 800e114:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800e118:	4809      	ldr	r0, [pc, #36]	; (800e140 <lv_init+0x4c>)
 800e11a:	f005 fd53 	bl	8013bc4 <lv_ll_init>
    lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
 800e11e:	2160      	movs	r1, #96	; 0x60
 800e120:	4808      	ldr	r0, [pc, #32]	; (800e144 <lv_init+0x50>)
 800e122:	f005 fd4f 	bl	8013bc4 <lv_ll_init>
    lv_indev_init();
 800e126:	f7ff ff67 	bl	800dff8 <lv_indev_init>
    lv_img_decoder_init();
 800e12a:	f005 f8ef 	bl	801330c <lv_img_decoder_init>
    lv_img_cache_set_size(LV_IMG_CACHE_DEF_SIZE);
 800e12e:	2001      	movs	r0, #1
 800e130:	f004 fe50 	bl	8012dd4 <lv_img_cache_set_size>
    lv_initialized = true;
 800e134:	2301      	movs	r3, #1
 800e136:	7023      	strb	r3, [r4, #0]
 800e138:	bd10      	pop	{r4, pc}
 800e13a:	bf00      	nop
 800e13c:	20005f68 	.word	0x20005f68
 800e140:	2000c56c 	.word	0x2000c56c
 800e144:	2000c55c 	.word	0x2000c55c

0800e148 <lv_obj_set_click>:
    obj->click = (en == true ? 1 : 0);
 800e148:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800e14c:	f361 0300 	bfi	r3, r1, #0, #1
 800e150:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
 800e154:	4770      	bx	lr

0800e156 <lv_obj_set_drag>:
    if(en == true) lv_obj_set_click(obj, true); /*Drag is useless without enabled clicking*/
 800e156:	b129      	cbz	r1, 800e164 <lv_obj_set_drag+0xe>
    obj->click = (en == true ? 1 : 0);
 800e158:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800e15c:	f043 0301 	orr.w	r3, r3, #1
 800e160:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
    obj->drag = (en == true ? 1 : 0);
 800e164:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800e168:	f361 0341 	bfi	r3, r1, #1, #1
 800e16c:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
 800e170:	4770      	bx	lr

0800e172 <lv_obj_set_drag_throw>:
    obj->drag_throw = (en == true ? 1 : 0);
 800e172:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800e176:	f361 0382 	bfi	r3, r1, #2, #1
 800e17a:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
 800e17e:	4770      	bx	lr

0800e180 <lv_obj_set_protect>:
    obj->protect |= prot;
 800e180:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 800e184:	4319      	orrs	r1, r3
 800e186:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 800e18a:	4770      	bx	lr

0800e18c <lv_obj_clear_protect>:
    obj->protect &= prot;
 800e18c:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 800e190:	ea23 0101 	bic.w	r1, r3, r1
 800e194:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 800e198:	4770      	bx	lr

0800e19a <lv_obj_set_event_cb>:
    obj->event_cb = event_cb;
 800e19a:	6181      	str	r1, [r0, #24]
 800e19c:	4770      	bx	lr
	...

0800e1a0 <lv_event_send_func>:
{
 800e1a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    if(event_temp_data_head) {
 800e1a4:	4c1e      	ldr	r4, [pc, #120]	; (800e220 <lv_event_send_func+0x80>)
    event_temp_data.obj     = obj;
 800e1a6:	9101      	str	r1, [sp, #4]
{
 800e1a8:	4698      	mov	r8, r3
    event_temp_data.deleted = false;
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	f88d 3008 	strb.w	r3, [sp, #8]
    event_temp_data.prev    = NULL;
 800e1b0:	9303      	str	r3, [sp, #12]
    if(event_temp_data_head) {
 800e1b2:	6823      	ldr	r3, [r4, #0]
{
 800e1b4:	4681      	mov	r9, r0
 800e1b6:	460d      	mov	r5, r1
 800e1b8:	4617      	mov	r7, r2
    if(event_temp_data_head) {
 800e1ba:	b103      	cbz	r3, 800e1be <lv_event_send_func+0x1e>
        event_temp_data.prev = event_temp_data_head;
 800e1bc:	9303      	str	r3, [sp, #12]
    const void * event_act_data_save = event_act_data;
 800e1be:	4e19      	ldr	r6, [pc, #100]	; (800e224 <lv_event_send_func+0x84>)
    event_temp_data_head = &event_temp_data;
 800e1c0:	ab01      	add	r3, sp, #4
    const void * event_act_data_save = event_act_data;
 800e1c2:	f8d6 a000 	ldr.w	sl, [r6]
    event_temp_data_head = &event_temp_data;
 800e1c6:	6023      	str	r3, [r4, #0]
    event_act_data                   = data;
 800e1c8:	f8c6 8000 	str.w	r8, [r6]
    lv_indev_t * indev_act = lv_indev_get_act();
 800e1cc:	f7ff ff16 	bl	800dffc <lv_indev_get_act>
    if(indev_act) {
 800e1d0:	b118      	cbz	r0, 800e1da <lv_event_send_func+0x3a>
        if(indev_act->driver.feedback_cb) indev_act->driver.feedback_cb(&indev_act->driver, event);
 800e1d2:	6883      	ldr	r3, [r0, #8]
 800e1d4:	b10b      	cbz	r3, 800e1da <lv_event_send_func+0x3a>
 800e1d6:	4639      	mov	r1, r7
 800e1d8:	4798      	blx	r3
    if(event_xcb) event_xcb(obj, event);
 800e1da:	f1b9 0f00 	cmp.w	r9, #0
 800e1de:	d002      	beq.n	800e1e6 <lv_event_send_func+0x46>
 800e1e0:	4639      	mov	r1, r7
 800e1e2:	4628      	mov	r0, r5
 800e1e4:	47c8      	blx	r9
    event_temp_data_head = event_temp_data_head->prev;
 800e1e6:	6823      	ldr	r3, [r4, #0]
    event_act_data = event_act_data_save;
 800e1e8:	f8c6 a000 	str.w	sl, [r6]
    event_temp_data_head = event_temp_data_head->prev;
 800e1ec:	689b      	ldr	r3, [r3, #8]
 800e1ee:	6023      	str	r3, [r4, #0]
    if(event_temp_data.deleted) {
 800e1f0:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800e1f4:	b983      	cbnz	r3, 800e218 <lv_event_send_func+0x78>
    if(obj) {
 800e1f6:	b18d      	cbz	r5, 800e21c <lv_event_send_func+0x7c>
        if(obj->parent_event && obj->par) {
 800e1f8:	f995 3030 	ldrsb.w	r3, [r5, #48]	; 0x30
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	da0d      	bge.n	800e21c <lv_event_send_func+0x7c>
 800e200:	6828      	ldr	r0, [r5, #0]
 800e202:	b158      	cbz	r0, 800e21c <lv_event_send_func+0x7c>
            lv_res_t res = lv_event_send(obj->par, event, data);
 800e204:	4642      	mov	r2, r8
 800e206:	4639      	mov	r1, r7
 800e208:	f000 f80e 	bl	800e228 <lv_event_send>
        return LV_RES_INV;
 800e20c:	1e43      	subs	r3, r0, #1
 800e20e:	4258      	negs	r0, r3
 800e210:	4158      	adcs	r0, r3
}
 800e212:	b004      	add	sp, #16
 800e214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return LV_RES_INV;
 800e218:	2000      	movs	r0, #0
 800e21a:	e7fa      	b.n	800e212 <lv_event_send_func+0x72>
    return LV_RES_OK;
 800e21c:	2001      	movs	r0, #1
 800e21e:	e7f8      	b.n	800e212 <lv_event_send_func+0x72>
 800e220:	20005f64 	.word	0x20005f64
 800e224:	20005f60 	.word	0x20005f60

0800e228 <lv_event_send>:
{
 800e228:	4613      	mov	r3, r2
    if(obj == NULL) return LV_RES_OK;
 800e22a:	b120      	cbz	r0, 800e236 <lv_event_send+0xe>
    res = lv_event_send_func(obj->event_cb, obj, event, data);
 800e22c:	460a      	mov	r2, r1
 800e22e:	4601      	mov	r1, r0
 800e230:	6980      	ldr	r0, [r0, #24]
 800e232:	f7ff bfb5 	b.w	800e1a0 <lv_event_send_func>
}
 800e236:	2001      	movs	r0, #1
 800e238:	4770      	bx	lr

0800e23a <delete_children>:
{
 800e23a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    i = lv_ll_get_head(&(obj->child_ll));
 800e23e:	1d05      	adds	r5, r0, #4
{
 800e240:	4604      	mov	r4, r0
    i = lv_ll_get_head(&(obj->child_ll));
 800e242:	4628      	mov	r0, r5
 800e244:	f005 fd04 	bl	8013c50 <lv_ll_get_head>
    return obj->group_p;
 800e248:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    i = lv_ll_get_head(&(obj->child_ll));
 800e24a:	4606      	mov	r6, r0
    if(group) lv_group_remove_obj(obj);
 800e24c:	b117      	cbz	r7, 800e254 <delete_children+0x1a>
 800e24e:	4620      	mov	r0, r4
 800e250:	f7ff fe4b 	bl	800deea <lv_group_remove_obj>
    while(i != NULL) {
 800e254:	bb1e      	cbnz	r6, 800e29e <delete_children+0x64>
    lv_event_send(obj, LV_EVENT_DELETE, NULL);
 800e256:	4632      	mov	r2, r6
 800e258:	2113      	movs	r1, #19
 800e25a:	4620      	mov	r0, r4
 800e25c:	f7ff ffe4 	bl	800e228 <lv_event_send>
    lv_event_mark_deleted(obj);
 800e260:	4620      	mov	r0, r4
 800e262:	f7ff ff11 	bl	800e088 <lv_event_mark_deleted>
    lv_anim_del(obj, NULL);
 800e266:	4631      	mov	r1, r6
 800e268:	4620      	mov	r0, r4
 800e26a:	f005 fb53 	bl	8013914 <lv_anim_del>
    lv_indev_t * indev = lv_indev_get_next(NULL);
 800e26e:	4630      	mov	r0, r6
        indev = lv_indev_get_next(indev);
 800e270:	f005 fa68 	bl	8013744 <lv_indev_get_next>
 800e274:	4605      	mov	r5, r0
    while(indev) {
 800e276:	b9e0      	cbnz	r0, 800e2b2 <delete_children+0x78>
    lv_ll_rem(&(par->child_ll), obj);
 800e278:	6820      	ldr	r0, [r4, #0]
 800e27a:	4621      	mov	r1, r4
 800e27c:	3004      	adds	r0, #4
 800e27e:	f005 fd26 	bl	8013cce <lv_ll_rem>
    obj->signal_cb(obj, LV_SIGNAL_CLEANUP, NULL);
 800e282:	69e3      	ldr	r3, [r4, #28]
 800e284:	462a      	mov	r2, r5
 800e286:	4629      	mov	r1, r5
 800e288:	4620      	mov	r0, r4
 800e28a:	4798      	blx	r3
    if(obj->ext_attr != NULL) lv_mem_free(obj->ext_attr);
 800e28c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e28e:	b108      	cbz	r0, 800e294 <delete_children+0x5a>
 800e290:	f005 fe5c 	bl	8013f4c <lv_mem_free>
    lv_mem_free(obj); /*Free the object itself*/
 800e294:	4620      	mov	r0, r4
}
 800e296:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_mem_free(obj); /*Free the object itself*/
 800e29a:	f005 be57 	b.w	8013f4c <lv_mem_free>
        i_next = lv_ll_get_next(&(obj->child_ll), i);
 800e29e:	4631      	mov	r1, r6
 800e2a0:	4628      	mov	r0, r5
 800e2a2:	f005 fcdb 	bl	8013c5c <lv_ll_get_next>
 800e2a6:	4680      	mov	r8, r0
        delete_children(i);
 800e2a8:	4630      	mov	r0, r6
 800e2aa:	f7ff ffc6 	bl	800e23a <delete_children>
        i = i_next;
 800e2ae:	4646      	mov	r6, r8
 800e2b0:	e7d0      	b.n	800e254 <delete_children+0x1a>
        if(indev->proc.types.pointer.act_obj == obj || indev->proc.types.pointer.last_obj == obj) {
 800e2b2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800e2b4:	429c      	cmp	r4, r3
 800e2b6:	d002      	beq.n	800e2be <delete_children+0x84>
 800e2b8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800e2ba:	429c      	cmp	r4, r3
 800e2bc:	d102      	bne.n	800e2c4 <delete_children+0x8a>
            lv_indev_reset(indev);
 800e2be:	4628      	mov	r0, r5
 800e2c0:	f7ff fea5 	bl	800e00e <lv_indev_reset>
        if(indev->proc.types.pointer.last_pressed == obj) {
 800e2c4:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800e2c6:	429c      	cmp	r4, r3
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
 800e2c8:	6dab      	ldr	r3, [r5, #88]	; 0x58
            indev->proc.types.pointer.last_pressed = NULL;
 800e2ca:	bf08      	it	eq
 800e2cc:	642e      	streq	r6, [r5, #64]	; 0x40
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
 800e2ce:	42bb      	cmp	r3, r7
 800e2d0:	d106      	bne.n	800e2e0 <delete_children+0xa6>
 800e2d2:	f7ff fed3 	bl	800e07c <lv_indev_get_obj_act>
 800e2d6:	4284      	cmp	r4, r0
 800e2d8:	d102      	bne.n	800e2e0 <delete_children+0xa6>
            lv_indev_reset(indev);
 800e2da:	4628      	mov	r0, r5
 800e2dc:	f7ff fe97 	bl	800e00e <lv_indev_reset>
        indev = lv_indev_get_next(indev);
 800e2e0:	4628      	mov	r0, r5
 800e2e2:	e7c5      	b.n	800e270 <delete_children+0x36>

0800e2e4 <lv_event_get_data>:
}
 800e2e4:	4b01      	ldr	r3, [pc, #4]	; (800e2ec <lv_event_get_data+0x8>)
 800e2e6:	6818      	ldr	r0, [r3, #0]
 800e2e8:	4770      	bx	lr
 800e2ea:	bf00      	nop
 800e2ec:	20005f60 	.word	0x20005f60

0800e2f0 <lv_obj_set_signal_cb>:
    obj->signal_cb = signal_cb;
 800e2f0:	61c1      	str	r1, [r0, #28]
 800e2f2:	4770      	bx	lr

0800e2f4 <lv_obj_set_design_cb>:
    obj->design_cb = design_cb;
 800e2f4:	6201      	str	r1, [r0, #32]
 800e2f6:	4770      	bx	lr

0800e2f8 <lv_obj_allocate_ext_attr>:
{
 800e2f8:	b510      	push	{r4, lr}
 800e2fa:	4604      	mov	r4, r0
    obj->ext_attr = lv_mem_realloc(obj->ext_attr, ext_size);
 800e2fc:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800e2fe:	f005 fe4f 	bl	8013fa0 <lv_mem_realloc>
 800e302:	6260      	str	r0, [r4, #36]	; 0x24
}
 800e304:	bd10      	pop	{r4, pc}
	...

0800e308 <lv_obj_get_disp>:
{
 800e308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(obj->par == NULL)
 800e30a:	6803      	ldr	r3, [r0, #0]
{
 800e30c:	4605      	mov	r5, r0
    if(obj->par == NULL)
 800e30e:	b943      	cbnz	r3, 800e322 <lv_obj_get_disp+0x1a>
    LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d)
 800e310:	480f      	ldr	r0, [pc, #60]	; (800e350 <lv_obj_get_disp+0x48>)
 800e312:	4f0f      	ldr	r7, [pc, #60]	; (800e350 <lv_obj_get_disp+0x48>)
 800e314:	f005 fc9c 	bl	8013c50 <lv_ll_get_head>
 800e318:	4604      	mov	r4, r0
 800e31a:	b934      	cbnz	r4, 800e32a <lv_obj_get_disp+0x22>
}
 800e31c:	4620      	mov	r0, r4
 800e31e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } while(par != NULL);
 800e320:	461d      	mov	r5, r3
    return obj->par;
 800e322:	682b      	ldr	r3, [r5, #0]
    } while(par != NULL);
 800e324:	2b00      	cmp	r3, #0
 800e326:	d1fb      	bne.n	800e320 <lv_obj_get_disp+0x18>
 800e328:	e7f2      	b.n	800e310 <lv_obj_get_disp+0x8>
        LV_LL_READ(d->scr_ll, s)
 800e32a:	f104 0628 	add.w	r6, r4, #40	; 0x28
 800e32e:	4630      	mov	r0, r6
 800e330:	f005 fc8e 	bl	8013c50 <lv_ll_get_head>
 800e334:	b928      	cbnz	r0, 800e342 <lv_obj_get_disp+0x3a>
    LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d)
 800e336:	4621      	mov	r1, r4
 800e338:	4638      	mov	r0, r7
 800e33a:	f005 fc8f 	bl	8013c5c <lv_ll_get_next>
 800e33e:	4604      	mov	r4, r0
 800e340:	e7eb      	b.n	800e31a <lv_obj_get_disp+0x12>
            if(s == scr) return d;
 800e342:	4285      	cmp	r5, r0
 800e344:	d0ea      	beq.n	800e31c <lv_obj_get_disp+0x14>
        LV_LL_READ(d->scr_ll, s)
 800e346:	4601      	mov	r1, r0
 800e348:	4630      	mov	r0, r6
 800e34a:	f005 fc87 	bl	8013c5c <lv_ll_get_next>
 800e34e:	e7f1      	b.n	800e334 <lv_obj_get_disp+0x2c>
 800e350:	2000c56c 	.word	0x2000c56c

0800e354 <lv_obj_invalidate>:
    return obj->hidden == 0 ? false : true;
 800e354:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
    if(lv_obj_get_hidden(obj)) return;
 800e358:	06da      	lsls	r2, r3, #27
{
 800e35a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e35c:	4604      	mov	r4, r0
    if(lv_obj_get_hidden(obj)) return;
 800e35e:	d439      	bmi.n	800e3d4 <lv_obj_invalidate+0x80>
 800e360:	4605      	mov	r5, r0
    return obj->par;
 800e362:	682b      	ldr	r3, [r5, #0]
    } while(par != NULL);
 800e364:	bb53      	cbnz	r3, 800e3bc <lv_obj_invalidate+0x68>
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
 800e366:	4628      	mov	r0, r5
 800e368:	f7ff ffce 	bl	800e308 <lv_obj_get_disp>
 800e36c:	4606      	mov	r6, r0
    if(obj_scr == lv_disp_get_scr_act(disp) || obj_scr == lv_disp_get_layer_top(disp) ||
 800e36e:	f7ff fcba 	bl	800dce6 <lv_disp_get_scr_act>
 800e372:	4285      	cmp	r5, r0
 800e374:	d124      	bne.n	800e3c0 <lv_obj_invalidate+0x6c>
        lv_coord_t ext_size = obj->ext_draw_pad;
 800e376:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
    return obj->par;
 800e37a:	6825      	ldr	r5, [r4, #0]
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    memcpy(dest, src, sizeof(lv_area_t));
 800e37c:	f854 0f10 	ldr.w	r0, [r4, #16]!
 800e380:	6861      	ldr	r1, [r4, #4]
 800e382:	466a      	mov	r2, sp
 800e384:	c203      	stmia	r2!, {r0, r1}
        area_trunc.x1 -= ext_size;
 800e386:	f8bd 2000 	ldrh.w	r2, [sp]
 800e38a:	b29b      	uxth	r3, r3
 800e38c:	1ad2      	subs	r2, r2, r3
 800e38e:	f8ad 2000 	strh.w	r2, [sp]
        area_trunc.y1 -= ext_size;
 800e392:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800e396:	1ad2      	subs	r2, r2, r3
 800e398:	f8ad 2002 	strh.w	r2, [sp, #2]
        area_trunc.x2 += ext_size;
 800e39c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800e3a0:	441a      	add	r2, r3
 800e3a2:	f8ad 2004 	strh.w	r2, [sp, #4]
        area_trunc.y2 += ext_size;
 800e3a6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e3aa:	4413      	add	r3, r2
 800e3ac:	f8ad 3006 	strh.w	r3, [sp, #6]
        while(par != NULL) {
 800e3b0:	b995      	cbnz	r5, 800e3d8 <lv_obj_invalidate+0x84>
        if(union_ok) lv_inv_area(disp, &area_trunc);
 800e3b2:	4669      	mov	r1, sp
 800e3b4:	4630      	mov	r0, r6
 800e3b6:	f000 ff83 	bl	800f2c0 <lv_inv_area>
 800e3ba:	e00b      	b.n	800e3d4 <lv_obj_invalidate+0x80>
    } while(par != NULL);
 800e3bc:	461d      	mov	r5, r3
 800e3be:	e7d0      	b.n	800e362 <lv_obj_invalidate+0xe>
    if(obj_scr == lv_disp_get_scr_act(disp) || obj_scr == lv_disp_get_layer_top(disp) ||
 800e3c0:	4630      	mov	r0, r6
 800e3c2:	f7ff fca1 	bl	800dd08 <lv_disp_get_layer_top>
 800e3c6:	4285      	cmp	r5, r0
 800e3c8:	d0d5      	beq.n	800e376 <lv_obj_invalidate+0x22>
       obj_scr == lv_disp_get_layer_sys(disp)) {
 800e3ca:	4630      	mov	r0, r6
 800e3cc:	f7ff fca3 	bl	800dd16 <lv_disp_get_layer_sys>
    if(obj_scr == lv_disp_get_scr_act(disp) || obj_scr == lv_disp_get_layer_top(disp) ||
 800e3d0:	4285      	cmp	r5, r0
 800e3d2:	d0d0      	beq.n	800e376 <lv_obj_invalidate+0x22>
}
 800e3d4:	b002      	add	sp, #8
 800e3d6:	bd70      	pop	{r4, r5, r6, pc}
            union_ok = lv_area_intersect(&area_trunc, &area_trunc, &par->coords);
 800e3d8:	f105 0210 	add.w	r2, r5, #16
 800e3dc:	4669      	mov	r1, sp
 800e3de:	4668      	mov	r0, sp
 800e3e0:	f005 fb31 	bl	8013a46 <lv_area_intersect>
            if(union_ok == false) break;       /*If no common parts with parent break;*/
 800e3e4:	2800      	cmp	r0, #0
 800e3e6:	d0f5      	beq.n	800e3d4 <lv_obj_invalidate+0x80>
    return obj->hidden == 0 ? false : true;
 800e3e8:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
            if(lv_obj_get_hidden(par)) return; /*If the parent is hidden then the child is hidden and won't be drawn*/
 800e3ec:	06db      	lsls	r3, r3, #27
 800e3ee:	d4f1      	bmi.n	800e3d4 <lv_obj_invalidate+0x80>
    return obj->par;
 800e3f0:	682d      	ldr	r5, [r5, #0]
 800e3f2:	e7dd      	b.n	800e3b0 <lv_obj_invalidate+0x5c>

0800e3f4 <lv_obj_move_foreground>:
{
 800e3f4:	b570      	push	{r4, r5, r6, lr}
    return obj->par;
 800e3f6:	6804      	ldr	r4, [r0, #0]
    if(lv_ll_get_head(&parent->child_ll) == obj) return;
 800e3f8:	1d26      	adds	r6, r4, #4
{
 800e3fa:	4605      	mov	r5, r0
    if(lv_ll_get_head(&parent->child_ll) == obj) return;
 800e3fc:	4630      	mov	r0, r6
 800e3fe:	f005 fc27 	bl	8013c50 <lv_ll_get_head>
 800e402:	4285      	cmp	r5, r0
 800e404:	d012      	beq.n	800e42c <lv_obj_move_foreground+0x38>
    lv_obj_invalidate(parent);
 800e406:	4620      	mov	r0, r4
 800e408:	f7ff ffa4 	bl	800e354 <lv_obj_invalidate>
    lv_ll_chg_list(&parent->child_ll, &parent->child_ll, obj, true);
 800e40c:	462a      	mov	r2, r5
 800e40e:	4631      	mov	r1, r6
 800e410:	4630      	mov	r0, r6
 800e412:	2301      	movs	r3, #1
 800e414:	f005 fc95 	bl	8013d42 <lv_ll_chg_list>
    parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, obj);
 800e418:	69e3      	ldr	r3, [r4, #28]
 800e41a:	462a      	mov	r2, r5
 800e41c:	4620      	mov	r0, r4
 800e41e:	2101      	movs	r1, #1
 800e420:	4798      	blx	r3
    lv_obj_invalidate(parent);
 800e422:	4620      	mov	r0, r4
}
 800e424:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_invalidate(parent);
 800e428:	f7ff bf94 	b.w	800e354 <lv_obj_invalidate>
 800e42c:	bd70      	pop	{r4, r5, r6, pc}

0800e42e <lv_obj_set_pos>:
{
 800e42e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    lv_obj_t * par = obj->par;
 800e432:	6806      	ldr	r6, [r0, #0]
    diff.x = x - obj->coords.x1;
 800e434:	8a03      	ldrh	r3, [r0, #16]
 800e436:	f8b6 8010 	ldrh.w	r8, [r6, #16]
    diff.y = y - obj->coords.y1;
 800e43a:	8a75      	ldrh	r5, [r6, #18]
    diff.x = x - obj->coords.x1;
 800e43c:	eba8 0803 	sub.w	r8, r8, r3
    diff.y = y - obj->coords.y1;
 800e440:	8a43      	ldrh	r3, [r0, #18]
    diff.x = x - obj->coords.x1;
 800e442:	4488      	add	r8, r1
    diff.y = y - obj->coords.y1;
 800e444:	1aed      	subs	r5, r5, r3
    diff.x = x - obj->coords.x1;
 800e446:	fa1f f888 	uxth.w	r8, r8
    diff.y = y - obj->coords.y1;
 800e44a:	4415      	add	r5, r2
 800e44c:	b2ad      	uxth	r5, r5
    diff.x = x - obj->coords.x1;
 800e44e:	fa0f f788 	sxth.w	r7, r8
{
 800e452:	4604      	mov	r4, r0
    diff.y = y - obj->coords.y1;
 800e454:	fa0f f985 	sxth.w	r9, r5
    if(diff.x == 0 && diff.y == 0) return;
 800e458:	b917      	cbnz	r7, 800e460 <lv_obj_set_pos+0x32>
 800e45a:	f1b9 0f00 	cmp.w	r9, #0
 800e45e:	d026      	beq.n	800e4ae <lv_obj_set_pos+0x80>
    lv_obj_invalidate(obj);
 800e460:	4620      	mov	r0, r4
 800e462:	f7ff ff77 	bl	800e354 <lv_obj_invalidate>
 800e466:	4622      	mov	r2, r4
 800e468:	466b      	mov	r3, sp
 800e46a:	f852 0f10 	ldr.w	r0, [r2, #16]!
 800e46e:	6851      	ldr	r1, [r2, #4]
    obj->coords.y2 += diff.y;
 800e470:	8ae2      	ldrh	r2, [r4, #22]
 800e472:	c303      	stmia	r3!, {r0, r1}
    obj->coords.x1 += diff.x;
 800e474:	8a23      	ldrh	r3, [r4, #16]
    obj->coords.x2 += diff.x;
 800e476:	8aa1      	ldrh	r1, [r4, #20]
    obj->coords.x1 += diff.x;
 800e478:	4443      	add	r3, r8
 800e47a:	8223      	strh	r3, [r4, #16]
    obj->coords.y1 += diff.y;
 800e47c:	8a63      	ldrh	r3, [r4, #18]
    obj->coords.x2 += diff.x;
 800e47e:	4441      	add	r1, r8
    obj->coords.y1 += diff.y;
 800e480:	442b      	add	r3, r5
    obj->coords.y2 += diff.y;
 800e482:	4415      	add	r5, r2
    obj->coords.y1 += diff.y;
 800e484:	8263      	strh	r3, [r4, #18]
    obj->coords.x2 += diff.x;
 800e486:	82a1      	strh	r1, [r4, #20]
    refresh_children_position(obj, diff.x, diff.y);
 800e488:	464a      	mov	r2, r9
 800e48a:	4639      	mov	r1, r7
 800e48c:	4620      	mov	r0, r4
    obj->coords.y2 += diff.y;
 800e48e:	82e5      	strh	r5, [r4, #22]
    refresh_children_position(obj, diff.x, diff.y);
 800e490:	f7ff fe08 	bl	800e0a4 <refresh_children_position>
    obj->signal_cb(obj, LV_SIGNAL_CORD_CHG, &ori);
 800e494:	69e3      	ldr	r3, [r4, #28]
 800e496:	466a      	mov	r2, sp
 800e498:	2102      	movs	r1, #2
 800e49a:	4620      	mov	r0, r4
 800e49c:	4798      	blx	r3
    par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
 800e49e:	69f3      	ldr	r3, [r6, #28]
 800e4a0:	4622      	mov	r2, r4
 800e4a2:	2101      	movs	r1, #1
 800e4a4:	4630      	mov	r0, r6
 800e4a6:	4798      	blx	r3
    lv_obj_invalidate(obj);
 800e4a8:	4620      	mov	r0, r4
 800e4aa:	f7ff ff53 	bl	800e354 <lv_obj_invalidate>
}
 800e4ae:	b003      	add	sp, #12
 800e4b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800e4b4 <lv_obj_set_x>:
{
 800e4b4:	b410      	push	{r4}
    rel_y             = obj->coords.y1 - parent->coords.y1;
 800e4b6:	6804      	ldr	r4, [r0, #0]
 800e4b8:	8a42      	ldrh	r2, [r0, #18]
 800e4ba:	8a63      	ldrh	r3, [r4, #18]
}
 800e4bc:	f85d 4b04 	ldr.w	r4, [sp], #4
    rel_y             = obj->coords.y1 - parent->coords.y1;
 800e4c0:	1ad2      	subs	r2, r2, r3
    lv_obj_set_pos(obj, x, lv_obj_get_y(obj));
 800e4c2:	b212      	sxth	r2, r2
 800e4c4:	f7ff bfb3 	b.w	800e42e <lv_obj_set_pos>

0800e4c8 <lv_obj_set_y>:
    rel_x             = obj->coords.x1 - parent->coords.x1;
 800e4c8:	6802      	ldr	r2, [r0, #0]
 800e4ca:	8a03      	ldrh	r3, [r0, #16]
 800e4cc:	8a12      	ldrh	r2, [r2, #16]
 800e4ce:	1a9b      	subs	r3, r3, r2
    lv_obj_set_pos(obj, lv_obj_get_x(obj), y);
 800e4d0:	460a      	mov	r2, r1
 800e4d2:	b219      	sxth	r1, r3
 800e4d4:	f7ff bfab 	b.w	800e42e <lv_obj_set_pos>

0800e4d8 <lv_obj_align>:
{
 800e4d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return obj->par;
 800e4dc:	6804      	ldr	r4, [r0, #0]
{
 800e4de:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
    rel_x             = obj->coords.x1 - parent->coords.x1;
 800e4e2:	f8b4 e010 	ldrh.w	lr, [r4, #16]
    rel_y             = obj->coords.y1 - parent->coords.y1;
 800e4e6:	f8b4 c012 	ldrh.w	ip, [r4, #18]
{
 800e4ea:	4605      	mov	r5, r0
 800e4ec:	4616      	mov	r6, r2
 800e4ee:	4698      	mov	r8, r3
    rel_x             = obj->coords.x1 - parent->coords.x1;
 800e4f0:	8a00      	ldrh	r0, [r0, #16]
    rel_y             = obj->coords.y1 - parent->coords.y1;
 800e4f2:	f8b5 9012 	ldrh.w	r9, [r5, #18]
 800e4f6:	2900      	cmp	r1, #0
 800e4f8:	bf18      	it	ne
 800e4fa:	460c      	movne	r4, r1
    switch(align) {
 800e4fc:	2a14      	cmp	r2, #20
 800e4fe:	d816      	bhi.n	800e52e <lv_obj_align+0x56>
 800e500:	e8df f012 	tbh	[pc, r2, lsl #1]
 800e504:	0128001c 	.word	0x0128001c
 800e508:	00540042 	.word	0x00540042
 800e50c:	0083005a 	.word	0x0083005a
 800e510:	00a4009e 	.word	0x00a4009e
 800e514:	00cd00b5 	.word	0x00cd00b5
 800e518:	00e700d2 	.word	0x00e700d2
 800e51c:	00f200ed 	.word	0x00f200ed
 800e520:	010d0107 	.word	0x010d0107
 800e524:	01150111 	.word	0x01150111
 800e528:	011e0119 	.word	0x011e0119
 800e52c:	0123      	.short	0x0123
    rel_x             = obj->coords.x1 - parent->coords.x1;
 800e52e:	eba0 010e 	sub.w	r1, r0, lr
 800e532:	b209      	sxth	r1, r1
    rel_y             = obj->coords.y1 - parent->coords.y1;
 800e534:	eba9 020c 	sub.w	r2, r9, ip
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 800e538:	b212      	sxth	r2, r2
            break;
 800e53a:	e049      	b.n	800e5d0 <lv_obj_align+0xf8>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return area_p->x2 - area_p->x1 + 1;
 800e53c:	f8b4 a014 	ldrh.w	sl, [r4, #20]
 800e540:	8a21      	ldrh	r1, [r4, #16]
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 800e542:	8ae3      	ldrh	r3, [r4, #22]
 800e544:	8a62      	ldrh	r2, [r4, #18]
    return area_p->x2 - area_p->x1 + 1;
 800e546:	f10a 0a01 	add.w	sl, sl, #1
 800e54a:	ebaa 0a01 	sub.w	sl, sl, r1
    return area_p->y2 - area_p->y1 + 1;
 800e54e:	3301      	adds	r3, #1
    return area_p->x2 - area_p->x1 + 1;
 800e550:	8aa9      	ldrh	r1, [r5, #20]
    return area_p->y2 - area_p->y1 + 1;
 800e552:	1a9b      	subs	r3, r3, r2
 800e554:	8aea      	ldrh	r2, [r5, #22]
    return area_p->x2 - area_p->x1 + 1;
 800e556:	3101      	adds	r1, #1
 800e558:	1a09      	subs	r1, r1, r0
    return area_p->y2 - area_p->y1 + 1;
 800e55a:	3201      	adds	r2, #1
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 800e55c:	f04f 0b02 	mov.w	fp, #2
 800e560:	fa0f fa8a 	sxth.w	sl, sl
 800e564:	b209      	sxth	r1, r1
 800e566:	fb9a fafb 	sdiv	sl, sl, fp
 800e56a:	fb91 f1fb 	sdiv	r1, r1, fp
 800e56e:	eba2 0209 	sub.w	r2, r2, r9
 800e572:	ebaa 0101 	sub.w	r1, sl, r1
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 800e576:	b21b      	sxth	r3, r3
 800e578:	b212      	sxth	r2, r2
 800e57a:	fb93 f3fb 	sdiv	r3, r3, fp
 800e57e:	fb92 f2fb 	sdiv	r2, r2, fp
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 800e582:	b209      	sxth	r1, r1
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 800e584:	1a9a      	subs	r2, r3, r2
 800e586:	e7d7      	b.n	800e538 <lv_obj_align+0x60>
    return area_p->x2 - area_p->x1 + 1;
 800e588:	8aa1      	ldrh	r1, [r4, #20]
 800e58a:	8a23      	ldrh	r3, [r4, #16]
 800e58c:	3101      	adds	r1, #1
 800e58e:	1ac9      	subs	r1, r1, r3
 800e590:	8aab      	ldrh	r3, [r5, #20]
 800e592:	3301      	adds	r3, #1
 800e594:	1a18      	subs	r0, r3, r0
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 800e596:	2202      	movs	r2, #2
 800e598:	b209      	sxth	r1, r1
 800e59a:	b200      	sxth	r0, r0
 800e59c:	fb91 f1f2 	sdiv	r1, r1, r2
 800e5a0:	fb90 f0f2 	sdiv	r0, r0, r2
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 800e5a4:	1a09      	subs	r1, r1, r0
 800e5a6:	b209      	sxth	r1, r1
            new_y = 0;
 800e5a8:	2200      	movs	r2, #0
            break;
 800e5aa:	e011      	b.n	800e5d0 <lv_obj_align+0xf8>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 800e5ac:	8aa9      	ldrh	r1, [r5, #20]
 800e5ae:	1a08      	subs	r0, r1, r0
 800e5b0:	8aa1      	ldrh	r1, [r4, #20]
 800e5b2:	1a09      	subs	r1, r1, r0
 800e5b4:	8a20      	ldrh	r0, [r4, #16]
 800e5b6:	e7f5      	b.n	800e5a4 <lv_obj_align+0xcc>
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 800e5b8:	8aea      	ldrh	r2, [r5, #22]
 800e5ba:	eba2 0909 	sub.w	r9, r2, r9
 800e5be:	8ae2      	ldrh	r2, [r4, #22]
 800e5c0:	eba2 0209 	sub.w	r2, r2, r9
 800e5c4:	f8b4 9012 	ldrh.w	r9, [r4, #18]
 800e5c8:	eba2 0209 	sub.w	r2, r2, r9
    return area_p->y2 - area_p->y1 + 1;
 800e5cc:	b212      	sxth	r2, r2
            new_x = 0;
 800e5ce:	2100      	movs	r1, #0
    new_x -= par_abs_x;
 800e5d0:	8a23      	ldrh	r3, [r4, #16]
 800e5d2:	eba8 0e0e 	sub.w	lr, r8, lr
 800e5d6:	449e      	add	lr, r3
    new_y -= par_abs_y;
 800e5d8:	8a63      	ldrh	r3, [r4, #18]
 800e5da:	eba7 0c0c 	sub.w	ip, r7, ip
 800e5de:	449c      	add	ip, r3
    new_x -= par_abs_x;
 800e5e0:	4471      	add	r1, lr
    new_y -= par_abs_y;
 800e5e2:	4462      	add	r2, ip
    lv_obj_set_pos(obj, new_x, new_y);
 800e5e4:	b212      	sxth	r2, r2
 800e5e6:	b209      	sxth	r1, r1
 800e5e8:	4628      	mov	r0, r5
 800e5ea:	f7ff ff20 	bl	800e42e <lv_obj_set_pos>
    obj->realign.origo_align = 0;
 800e5ee:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
    obj->realign.align       = align;
 800e5f2:	f885 6040 	strb.w	r6, [r5, #64]	; 0x40
    obj->realign.origo_align = 0;
 800e5f6:	f36f 0341 	bfc	r3, #1, #1
    obj->realign.xofs        = x_mod;
 800e5fa:	f8a5 803c 	strh.w	r8, [r5, #60]	; 0x3c
    obj->realign.yofs        = y_mod;
 800e5fe:	87ef      	strh	r7, [r5, #62]	; 0x3e
    obj->realign.base        = base;
 800e600:	63ac      	str	r4, [r5, #56]	; 0x38
    obj->realign.origo_align = 0;
 800e602:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
 800e606:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return area_p->x2 - area_p->x1 + 1;
 800e60a:	8aa1      	ldrh	r1, [r4, #20]
 800e60c:	8a23      	ldrh	r3, [r4, #16]
 800e60e:	3101      	adds	r1, #1
 800e610:	1ac9      	subs	r1, r1, r3
 800e612:	8aab      	ldrh	r3, [r5, #20]
 800e614:	3301      	adds	r3, #1
 800e616:	1a18      	subs	r0, r3, r0
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 800e618:	2202      	movs	r2, #2
 800e61a:	b209      	sxth	r1, r1
 800e61c:	b200      	sxth	r0, r0
 800e61e:	fb91 f1f2 	sdiv	r1, r1, r2
 800e622:	fb90 f0f2 	sdiv	r0, r0, r2
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 800e626:	1a09      	subs	r1, r1, r0
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 800e628:	8aea      	ldrh	r2, [r5, #22]
 800e62a:	eba2 0909 	sub.w	r9, r2, r9
 800e62e:	8ae2      	ldrh	r2, [r4, #22]
 800e630:	eba2 0209 	sub.w	r2, r2, r9
 800e634:	f8b4 9012 	ldrh.w	r9, [r4, #18]
 800e638:	b209      	sxth	r1, r1
 800e63a:	eba2 0209 	sub.w	r2, r2, r9
 800e63e:	e77b      	b.n	800e538 <lv_obj_align+0x60>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 800e640:	8aa9      	ldrh	r1, [r5, #20]
 800e642:	1a08      	subs	r0, r1, r0
 800e644:	8aa1      	ldrh	r1, [r4, #20]
 800e646:	1a09      	subs	r1, r1, r0
 800e648:	8a20      	ldrh	r0, [r4, #16]
 800e64a:	e7ec      	b.n	800e626 <lv_obj_align+0x14e>
    return area_p->y2 - area_p->y1 + 1;
 800e64c:	8ae3      	ldrh	r3, [r4, #22]
 800e64e:	8a62      	ldrh	r2, [r4, #18]
 800e650:	3301      	adds	r3, #1
 800e652:	1a9b      	subs	r3, r3, r2
 800e654:	8aea      	ldrh	r2, [r5, #22]
 800e656:	3201      	adds	r2, #1
 800e658:	eba2 0209 	sub.w	r2, r2, r9
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 800e65c:	2102      	movs	r1, #2
 800e65e:	b21b      	sxth	r3, r3
 800e660:	b212      	sxth	r2, r2
 800e662:	fb93 f3f1 	sdiv	r3, r3, r1
 800e666:	fb92 f2f1 	sdiv	r2, r2, r1
 800e66a:	1a9a      	subs	r2, r3, r2
 800e66c:	e7ae      	b.n	800e5cc <lv_obj_align+0xf4>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 800e66e:	8aa9      	ldrh	r1, [r5, #20]
 800e670:	1a08      	subs	r0, r1, r0
 800e672:	8aa1      	ldrh	r1, [r4, #20]
 800e674:	1a09      	subs	r1, r1, r0
 800e676:	8a20      	ldrh	r0, [r4, #16]
 800e678:	1a09      	subs	r1, r1, r0
 800e67a:	8ae0      	ldrh	r0, [r4, #22]
 800e67c:	8a62      	ldrh	r2, [r4, #18]
 800e67e:	3001      	adds	r0, #1
 800e680:	1a80      	subs	r0, r0, r2
 800e682:	8aea      	ldrh	r2, [r5, #22]
 800e684:	3201      	adds	r2, #1
 800e686:	eba2 0209 	sub.w	r2, r2, r9
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 800e68a:	2302      	movs	r3, #2
 800e68c:	b200      	sxth	r0, r0
 800e68e:	b212      	sxth	r2, r2
 800e690:	fb90 f0f3 	sdiv	r0, r0, r3
 800e694:	fb92 f2f3 	sdiv	r2, r2, r3
    return area_p->x2 - area_p->x1 + 1;
 800e698:	b209      	sxth	r1, r1
 800e69a:	1a82      	subs	r2, r0, r2
 800e69c:	e74c      	b.n	800e538 <lv_obj_align+0x60>
    return area_p->y2 - area_p->y1 + 1;
 800e69e:	8aea      	ldrh	r2, [r5, #22]
 800e6a0:	eba2 0209 	sub.w	r2, r2, r9
            new_y = -lv_obj_get_height(obj);
 800e6a4:	43d2      	mvns	r2, r2
 800e6a6:	e791      	b.n	800e5cc <lv_obj_align+0xf4>
    return area_p->x2 - area_p->x1 + 1;
 800e6a8:	8aa1      	ldrh	r1, [r4, #20]
 800e6aa:	8a23      	ldrh	r3, [r4, #16]
 800e6ac:	3101      	adds	r1, #1
 800e6ae:	1ac9      	subs	r1, r1, r3
 800e6b0:	8aab      	ldrh	r3, [r5, #20]
 800e6b2:	3301      	adds	r3, #1
 800e6b4:	1a18      	subs	r0, r3, r0
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 800e6b6:	2202      	movs	r2, #2
 800e6b8:	b209      	sxth	r1, r1
 800e6ba:	b200      	sxth	r0, r0
 800e6bc:	fb91 f1f2 	sdiv	r1, r1, r2
 800e6c0:	fb90 f0f2 	sdiv	r0, r0, r2
    return area_p->y2 - area_p->y1 + 1;
 800e6c4:	8aea      	ldrh	r2, [r5, #22]
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 800e6c6:	1a09      	subs	r1, r1, r0
 800e6c8:	eba2 0209 	sub.w	r2, r2, r9
 800e6cc:	b209      	sxth	r1, r1
            new_y = -lv_obj_get_height(obj);
 800e6ce:	43d2      	mvns	r2, r2
 800e6d0:	e732      	b.n	800e538 <lv_obj_align+0x60>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 800e6d2:	8aa9      	ldrh	r1, [r5, #20]
 800e6d4:	1a08      	subs	r0, r1, r0
 800e6d6:	8aa1      	ldrh	r1, [r4, #20]
 800e6d8:	1a09      	subs	r1, r1, r0
 800e6da:	8a20      	ldrh	r0, [r4, #16]
 800e6dc:	e7f2      	b.n	800e6c4 <lv_obj_align+0x1ec>
 800e6de:	8ae2      	ldrh	r2, [r4, #22]
 800e6e0:	8a63      	ldrh	r3, [r4, #18]
 800e6e2:	3201      	adds	r2, #1
 800e6e4:	1ad2      	subs	r2, r2, r3
 800e6e6:	e771      	b.n	800e5cc <lv_obj_align+0xf4>
    return area_p->x2 - area_p->x1 + 1;
 800e6e8:	8aa1      	ldrh	r1, [r4, #20]
 800e6ea:	8a23      	ldrh	r3, [r4, #16]
 800e6ec:	3101      	adds	r1, #1
 800e6ee:	1ac9      	subs	r1, r1, r3
 800e6f0:	8aab      	ldrh	r3, [r5, #20]
 800e6f2:	3301      	adds	r3, #1
 800e6f4:	1a18      	subs	r0, r3, r0
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 800e6f6:	2202      	movs	r2, #2
 800e6f8:	b209      	sxth	r1, r1
 800e6fa:	b200      	sxth	r0, r0
 800e6fc:	fb91 f1f2 	sdiv	r1, r1, r2
 800e700:	fb90 f0f2 	sdiv	r0, r0, r2
    return area_p->y2 - area_p->y1 + 1;
 800e704:	8ae2      	ldrh	r2, [r4, #22]
 800e706:	8a63      	ldrh	r3, [r4, #18]
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 800e708:	1a09      	subs	r1, r1, r0
 800e70a:	3201      	adds	r2, #1
 800e70c:	b209      	sxth	r1, r1
 800e70e:	1ad2      	subs	r2, r2, r3
 800e710:	e712      	b.n	800e538 <lv_obj_align+0x60>
 800e712:	8aa9      	ldrh	r1, [r5, #20]
 800e714:	1a08      	subs	r0, r1, r0
 800e716:	8aa1      	ldrh	r1, [r4, #20]
 800e718:	1a09      	subs	r1, r1, r0
 800e71a:	8a20      	ldrh	r0, [r4, #16]
 800e71c:	e7f2      	b.n	800e704 <lv_obj_align+0x22c>
    return area_p->x2 - area_p->x1 + 1;
 800e71e:	8aa9      	ldrh	r1, [r5, #20]
 800e720:	1a09      	subs	r1, r1, r0
            new_x = -lv_obj_get_width(obj);
 800e722:	43c9      	mvns	r1, r1
 800e724:	e73f      	b.n	800e5a6 <lv_obj_align+0xce>
 800e726:	8aa9      	ldrh	r1, [r5, #20]
 800e728:	1a09      	subs	r1, r1, r0
            new_x = -lv_obj_get_width(obj);
 800e72a:	43c9      	mvns	r1, r1
 800e72c:	e7a5      	b.n	800e67a <lv_obj_align+0x1a2>
 800e72e:	8aa9      	ldrh	r1, [r5, #20]
 800e730:	1a09      	subs	r1, r1, r0
            new_x = -lv_obj_get_width(obj);
 800e732:	43c9      	mvns	r1, r1
 800e734:	e778      	b.n	800e628 <lv_obj_align+0x150>
 800e736:	8aa1      	ldrh	r1, [r4, #20]
 800e738:	8a23      	ldrh	r3, [r4, #16]
 800e73a:	3101      	adds	r1, #1
 800e73c:	1ac9      	subs	r1, r1, r3
 800e73e:	e732      	b.n	800e5a6 <lv_obj_align+0xce>
 800e740:	8aa1      	ldrh	r1, [r4, #20]
 800e742:	8a23      	ldrh	r3, [r4, #16]
 800e744:	3101      	adds	r1, #1
 800e746:	1ac9      	subs	r1, r1, r3
 800e748:	e797      	b.n	800e67a <lv_obj_align+0x1a2>
 800e74a:	8aa1      	ldrh	r1, [r4, #20]
 800e74c:	8a23      	ldrh	r3, [r4, #16]
 800e74e:	3101      	adds	r1, #1
 800e750:	1ac9      	subs	r1, r1, r3
 800e752:	e769      	b.n	800e628 <lv_obj_align+0x150>
            new_y = 0;
 800e754:	2200      	movs	r2, #0
            new_x = 0;
 800e756:	4611      	mov	r1, r2
 800e758:	e73a      	b.n	800e5d0 <lv_obj_align+0xf8>

0800e75a <lv_obj_align_origo>:
{
 800e75a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e75e:	4605      	mov	r5, r0
 800e760:	4616      	mov	r6, r2
 800e762:	f8b5 e014 	ldrh.w	lr, [r5, #20]
    return area_p->y2 - area_p->y1 + 1;
 800e766:	8aea      	ldrh	r2, [r5, #22]
    rel_x             = obj->coords.x1 - parent->coords.x1;
 800e768:	f8b0 9010 	ldrh.w	r9, [r0, #16]
    rel_y             = obj->coords.y1 - parent->coords.y1;
 800e76c:	f8b0 c012 	ldrh.w	ip, [r0, #18]
    return obj->par;
 800e770:	6804      	ldr	r4, [r0, #0]
{
 800e772:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
    rel_y             = obj->coords.y1 - parent->coords.y1;
 800e776:	8a60      	ldrh	r0, [r4, #18]
    return area_p->x2 - area_p->x1 + 1;
 800e778:	f10e 0e01 	add.w	lr, lr, #1
    return area_p->y2 - area_p->y1 + 1;
 800e77c:	3201      	adds	r2, #1
    return area_p->x2 - area_p->x1 + 1;
 800e77e:	ebae 0e09 	sub.w	lr, lr, r9
    return area_p->y2 - area_p->y1 + 1;
 800e782:	eba2 020c 	sub.w	r2, r2, ip
    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
 800e786:	f04f 0a02 	mov.w	sl, #2
{
 800e78a:	4698      	mov	r8, r3
    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
 800e78c:	fa0f fe8e 	sxth.w	lr, lr
    rel_x             = obj->coords.x1 - parent->coords.x1;
 800e790:	8a23      	ldrh	r3, [r4, #16]
    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
 800e792:	fb9e fefa 	sdiv	lr, lr, sl
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
 800e796:	b212      	sxth	r2, r2
    if(base == NULL) {
 800e798:	2900      	cmp	r1, #0
 800e79a:	bf18      	it	ne
 800e79c:	460c      	movne	r4, r1
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
 800e79e:	fb92 f2fa 	sdiv	r2, r2, sl
    switch(align) {
 800e7a2:	2e14      	cmp	r6, #20
 800e7a4:	d80c      	bhi.n	800e7c0 <lv_obj_align_origo+0x66>
 800e7a6:	e8df f006 	tbb	[pc, r6]
 800e7aa:	672e      	.short	0x672e
 800e7ac:	597c894b 	.word	0x597c894b
 800e7b0:	67916c9b 	.word	0x67916c9b
 800e7b4:	597c894b 	.word	0x597c894b
 800e7b8:	7c6c679b 	.word	0x7c6c679b
 800e7bc:	9189      	.short	0x9189
 800e7be:	9b          	.byte	0x9b
 800e7bf:	00          	.byte	0x00
    rel_x             = obj->coords.x1 - parent->coords.x1;
 800e7c0:	eba9 0103 	sub.w	r1, r9, r3
 800e7c4:	b209      	sxth	r1, r1
    rel_y             = obj->coords.y1 - parent->coords.y1;
 800e7c6:	ebac 0200 	sub.w	r2, ip, r0
    new_x -= par_abs_x;
 800e7ca:	f8b4 e010 	ldrh.w	lr, [r4, #16]
 800e7ce:	eba8 0303 	sub.w	r3, r8, r3
 800e7d2:	4473      	add	r3, lr
 800e7d4:	4419      	add	r1, r3
    new_y -= par_abs_y;
 800e7d6:	8a63      	ldrh	r3, [r4, #18]
 800e7d8:	1a38      	subs	r0, r7, r0
 800e7da:	4418      	add	r0, r3
            new_y = lv_obj_get_height(base) - obj_h_half;
 800e7dc:	b212      	sxth	r2, r2
    new_y -= par_abs_y;
 800e7de:	4402      	add	r2, r0
    lv_obj_set_pos(obj, new_x, new_y);
 800e7e0:	b212      	sxth	r2, r2
 800e7e2:	b209      	sxth	r1, r1
 800e7e4:	4628      	mov	r0, r5
 800e7e6:	f7ff fe22 	bl	800e42e <lv_obj_set_pos>
    obj->realign.origo_align = 1;
 800e7ea:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
    obj->realign.align       = align;
 800e7ee:	f885 6040 	strb.w	r6, [r5, #64]	; 0x40
    obj->realign.origo_align = 1;
 800e7f2:	f043 0302 	orr.w	r3, r3, #2
    obj->realign.xofs        = x_mod;
 800e7f6:	f8a5 803c 	strh.w	r8, [r5, #60]	; 0x3c
    obj->realign.yofs        = y_mod;
 800e7fa:	87ef      	strh	r7, [r5, #62]	; 0x3e
    obj->realign.base        = base;
 800e7fc:	63ac      	str	r4, [r5, #56]	; 0x38
    obj->realign.origo_align = 1;
 800e7fe:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
 800e802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return area_p->x2 - area_p->x1 + 1;
 800e806:	8aa1      	ldrh	r1, [r4, #20]
 800e808:	f8b4 c010 	ldrh.w	ip, [r4, #16]
    return area_p->y2 - area_p->y1 + 1;
 800e80c:	f8b4 9012 	ldrh.w	r9, [r4, #18]
    return area_p->x2 - area_p->x1 + 1;
 800e810:	3101      	adds	r1, #1
 800e812:	eba1 010c 	sub.w	r1, r1, ip
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 800e816:	b209      	sxth	r1, r1
 800e818:	f04f 0c02 	mov.w	ip, #2
 800e81c:	fb91 f1fc 	sdiv	r1, r1, ip
 800e820:	eba1 010e 	sub.w	r1, r1, lr
    return area_p->y2 - area_p->y1 + 1;
 800e824:	f8b4 e016 	ldrh.w	lr, [r4, #22]
 800e828:	f10e 0e01 	add.w	lr, lr, #1
 800e82c:	ebae 0e09 	sub.w	lr, lr, r9
 800e830:	b209      	sxth	r1, r1
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 800e832:	fa0f fe8e 	sxth.w	lr, lr
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 800e836:	fb9e fefc 	sdiv	lr, lr, ip
 800e83a:	ebae 0202 	sub.w	r2, lr, r2
 800e83e:	e7c4      	b.n	800e7ca <lv_obj_align_origo+0x70>
    return area_p->x2 - area_p->x1 + 1;
 800e840:	8aa1      	ldrh	r1, [r4, #20]
 800e842:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 800e846:	3101      	adds	r1, #1
 800e848:	eba1 010c 	sub.w	r1, r1, ip
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 800e84c:	b209      	sxth	r1, r1
 800e84e:	f04f 0c02 	mov.w	ip, #2
 800e852:	fb91 f1fc 	sdiv	r1, r1, ip
            new_x = lv_obj_get_width(base) - obj_w_half;
 800e856:	eba1 010e 	sub.w	r1, r1, lr
 800e85a:	e00f      	b.n	800e87c <lv_obj_align_origo+0x122>
 800e85c:	8aa1      	ldrh	r1, [r4, #20]
 800e85e:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 800e862:	3101      	adds	r1, #1
 800e864:	eba1 010c 	sub.w	r1, r1, ip
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 800e868:	b209      	sxth	r1, r1
 800e86a:	f04f 0c02 	mov.w	ip, #2
 800e86e:	fb91 f1fc 	sdiv	r1, r1, ip
            new_x = lv_obj_get_width(base) - obj_w_half;
 800e872:	eba1 010e 	sub.w	r1, r1, lr
 800e876:	e016      	b.n	800e8a6 <lv_obj_align_origo+0x14c>
            new_x = -obj_w_half;
 800e878:	f1ce 0100 	rsb	r1, lr, #0
            new_x = lv_obj_get_width(base) - obj_w_half;
 800e87c:	b209      	sxth	r1, r1
            new_y = -obj_h_half;
 800e87e:	4252      	negs	r2, r2
 800e880:	e7a3      	b.n	800e7ca <lv_obj_align_origo+0x70>
            new_x = -obj_w_half;
 800e882:	f1ce 0100 	rsb	r1, lr, #0
    return area_p->y2 - area_p->y1 + 1;
 800e886:	f8b4 e016 	ldrh.w	lr, [r4, #22]
 800e88a:	f8b4 c012 	ldrh.w	ip, [r4, #18]
 800e88e:	f10e 0e01 	add.w	lr, lr, #1
 800e892:	ebae 0e0c 	sub.w	lr, lr, ip
            new_x = lv_obj_get_width(base) - obj_w_half;
 800e896:	b209      	sxth	r1, r1
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 800e898:	fa0f fe8e 	sxth.w	lr, lr
 800e89c:	f04f 0c02 	mov.w	ip, #2
 800e8a0:	e7c9      	b.n	800e836 <lv_obj_align_origo+0xdc>
            new_x = -obj_w_half;
 800e8a2:	f1ce 0100 	rsb	r1, lr, #0
            new_y = lv_obj_get_height(base) - obj_h_half;
 800e8a6:	f8b4 e016 	ldrh.w	lr, [r4, #22]
 800e8aa:	f1c2 0201 	rsb	r2, r2, #1
 800e8ae:	4472      	add	r2, lr
 800e8b0:	f8b4 e012 	ldrh.w	lr, [r4, #18]
            new_x = lv_obj_get_width(base) - obj_w_half;
 800e8b4:	b209      	sxth	r1, r1
            new_y = lv_obj_get_height(base) - obj_h_half;
 800e8b6:	eba2 020e 	sub.w	r2, r2, lr
 800e8ba:	e786      	b.n	800e7ca <lv_obj_align_origo+0x70>
            new_x = lv_obj_get_width(base) - obj_w_half;
 800e8bc:	f1ce 0101 	rsb	r1, lr, #1
 800e8c0:	f8b4 e014 	ldrh.w	lr, [r4, #20]
 800e8c4:	4471      	add	r1, lr
 800e8c6:	f8b4 e010 	ldrh.w	lr, [r4, #16]
 800e8ca:	e7c4      	b.n	800e856 <lv_obj_align_origo+0xfc>
            new_x = lv_obj_get_width(base) - obj_w_half;
 800e8cc:	f1ce 0101 	rsb	r1, lr, #1
 800e8d0:	f8b4 e014 	ldrh.w	lr, [r4, #20]
 800e8d4:	4471      	add	r1, lr
 800e8d6:	f8b4 e010 	ldrh.w	lr, [r4, #16]
 800e8da:	eba1 010e 	sub.w	r1, r1, lr
 800e8de:	e7d2      	b.n	800e886 <lv_obj_align_origo+0x12c>
            new_x = lv_obj_get_width(base) - obj_w_half;
 800e8e0:	f1ce 0101 	rsb	r1, lr, #1
 800e8e4:	f8b4 e014 	ldrh.w	lr, [r4, #20]
 800e8e8:	4471      	add	r1, lr
 800e8ea:	f8b4 e010 	ldrh.w	lr, [r4, #16]
 800e8ee:	e7c0      	b.n	800e872 <lv_obj_align_origo+0x118>

0800e8f0 <lv_obj_realign>:
{
 800e8f0:	b513      	push	{r0, r1, r4, lr}
    if(obj->realign.origo_align)
 800e8f2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800e8f6:	f9b0 403e 	ldrsh.w	r4, [r0, #62]	; 0x3e
 800e8fa:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
        lv_obj_align_origo(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 800e8fe:	9400      	str	r4, [sp, #0]
    if(obj->realign.origo_align)
 800e900:	f013 0f02 	tst.w	r3, #2
        lv_obj_align_origo(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 800e904:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800e906:	f9b0 303c 	ldrsh.w	r3, [r0, #60]	; 0x3c
    if(obj->realign.origo_align)
 800e90a:	d003      	beq.n	800e914 <lv_obj_realign+0x24>
        lv_obj_align_origo(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 800e90c:	f7ff ff25 	bl	800e75a <lv_obj_align_origo>
}
 800e910:	b002      	add	sp, #8
 800e912:	bd10      	pop	{r4, pc}
        lv_obj_align(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 800e914:	f7ff fde0 	bl	800e4d8 <lv_obj_align>
}
 800e918:	e7fa      	b.n	800e910 <lv_obj_realign+0x20>
	...

0800e91c <lv_obj_create>:
{
 800e91c:	b570      	push	{r4, r5, r6, lr}
 800e91e:	460d      	mov	r5, r1
    if(parent == NULL) {
 800e920:	4606      	mov	r6, r0
 800e922:	2800      	cmp	r0, #0
 800e924:	f040 80e9 	bne.w	800eafa <lv_obj_create+0x1de>
        lv_disp_t * disp = lv_disp_get_default();
 800e928:	f004 febc 	bl	80136a4 <lv_disp_get_default>
        if(!disp) {
 800e92c:	2800      	cmp	r0, #0
 800e92e:	f000 8136 	beq.w	800eb9e <lv_obj_create+0x282>
        new_obj = lv_ll_ins_head(&disp->scr_ll);
 800e932:	3028      	adds	r0, #40	; 0x28
 800e934:	f005 f950 	bl	8013bd8 <lv_ll_ins_head>
        lv_mem_assert(new_obj);
 800e938:	4604      	mov	r4, r0
 800e93a:	b900      	cbnz	r0, 800e93e <lv_obj_create+0x22>
 800e93c:	e7fe      	b.n	800e93c <lv_obj_create+0x20>
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 800e93e:	2148      	movs	r1, #72	; 0x48
        new_obj->par = NULL; /*Screens has no a parent*/
 800e940:	f840 6b04 	str.w	r6, [r0], #4
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 800e944:	f005 f93e 	bl	8013bc4 <lv_ll_init>
        new_obj->coords.x1    = 0;
 800e948:	8226      	strh	r6, [r4, #16]
        new_obj->coords.y1    = 0;
 800e94a:	8266      	strh	r6, [r4, #18]
        new_obj->coords.x2    = lv_disp_get_hor_res(NULL) - 1;
 800e94c:	4630      	mov	r0, r6
 800e94e:	f004 feaf 	bl	80136b0 <lv_disp_get_hor_res>
 800e952:	3801      	subs	r0, #1
 800e954:	82a0      	strh	r0, [r4, #20]
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
 800e956:	4630      	mov	r0, r6
 800e958:	f004 feba 	bl	80136d0 <lv_disp_get_ver_res>
        new_obj->realign.auto_realign = 0;
 800e95c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
        new_obj->ext_draw_pad = 0;
 800e960:	86a6      	strh	r6, [r4, #52]	; 0x34
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
 800e962:	3801      	subs	r0, #1
        new_obj->realign.auto_realign = 0;
 800e964:	f366 0300 	bfi	r3, r6, #0, #1
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
 800e968:	82e0      	strh	r0, [r4, #22]
        new_obj->realign.align        = LV_ALIGN_CENTER;
 800e96a:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
        new_obj->realign.xofs         = 0;
 800e96e:	87a6      	strh	r6, [r4, #60]	; 0x3c
        new_obj->realign.yofs         = 0;
 800e970:	87e6      	strh	r6, [r4, #62]	; 0x3e
        new_obj->realign.base         = NULL;
 800e972:	63a6      	str	r6, [r4, #56]	; 0x38
        new_obj->realign.auto_realign = 0;
 800e974:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        lv_theme_t * th = lv_theme_get_current();
 800e978:	f00a fb34 	bl	8018fe4 <lv_theme_get_current>
        if(th) {
 800e97c:	2800      	cmp	r0, #0
 800e97e:	f000 80ba 	beq.w	800eaf6 <lv_obj_create+0x1da>
            new_obj->style_p = th->style.scr;
 800e982:	6803      	ldr	r3, [r0, #0]
        new_obj->click        = 0;
 800e984:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
            new_obj->style_p = &lv_style_scr;
 800e988:	62a3      	str	r3, [r4, #40]	; 0x28
    obj->signal_cb = signal_cb;
 800e98a:	4b86      	ldr	r3, [pc, #536]	; (800eba4 <lv_obj_create+0x288>)
 800e98c:	61e3      	str	r3, [r4, #28]
    obj->design_cb = design_cb;
 800e98e:	4b86      	ldr	r3, [pc, #536]	; (800eba8 <lv_obj_create+0x28c>)
 800e990:	6223      	str	r3, [r4, #32]
        new_obj->parent_event = 0;
 800e992:	f002 0280 	and.w	r2, r2, #128	; 0x80
        new_obj->event_cb = NULL;
 800e996:	2300      	movs	r3, #0
        new_obj->parent_event = 0;
 800e998:	f363 12c7 	bfi	r2, r3, #7, #1
 800e99c:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->reserved     = 0;
 800e9a0:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
        new_obj->event_cb = NULL;
 800e9a4:	61a3      	str	r3, [r4, #24]
        new_obj->opa_scale    = LV_OPA_COVER;
 800e9a6:	21ff      	movs	r1, #255	; 0xff
        new_obj->reserved     = 0;
 800e9a8:	f363 0287 	bfi	r2, r3, #2, #6
        memset(&new_obj->user_data, 0, sizeof(lv_obj_user_data_t));
 800e9ac:	6463      	str	r3, [r4, #68]	; 0x44
        new_obj->group_p = NULL;
 800e9ae:	62e3      	str	r3, [r4, #44]	; 0x2c
        new_obj->protect      = LV_PROTECT_NONE;
 800e9b0:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
        new_obj->opa_scale    = LV_OPA_COVER;
 800e9b4:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
        new_obj->reserved     = 0;
 800e9b8:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
        new_obj->ext_attr = NULL;
 800e9bc:	6263      	str	r3, [r4, #36]	; 0x24
    if(copy != NULL) {
 800e9be:	2d00      	cmp	r5, #0
 800e9c0:	f000 80e9 	beq.w	800eb96 <lv_obj_create+0x27a>
    memcpy(dest, src, sizeof(lv_area_t));
 800e9c4:	462a      	mov	r2, r5
 800e9c6:	f852 3f10 	ldr.w	r3, [r2, #16]!
 800e9ca:	6123      	str	r3, [r4, #16]
 800e9cc:	6853      	ldr	r3, [r2, #4]
 800e9ce:	6163      	str	r3, [r4, #20]
        new_obj->ext_draw_pad = copy->ext_draw_pad;
 800e9d0:	f9b5 3034 	ldrsh.w	r3, [r5, #52]	; 0x34
 800e9d4:	86a3      	strh	r3, [r4, #52]	; 0x34
        memcpy(&new_obj->user_data, &copy->user_data, sizeof(lv_obj_user_data_t));
 800e9d6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800e9d8:	6463      	str	r3, [r4, #68]	; 0x44
        new_obj->realign.align        = copy->realign.align;
 800e9da:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 800e9de:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        new_obj->realign.xofs         = copy->realign.xofs;
 800e9e2:	f9b5 303c 	ldrsh.w	r3, [r5, #60]	; 0x3c
 800e9e6:	87a3      	strh	r3, [r4, #60]	; 0x3c
        new_obj->realign.yofs         = copy->realign.yofs;
 800e9e8:	f9b5 303e 	ldrsh.w	r3, [r5, #62]	; 0x3e
 800e9ec:	87e3      	strh	r3, [r4, #62]	; 0x3e
        new_obj->realign.base         = copy->realign.base;
 800e9ee:	6bab      	ldr	r3, [r5, #56]	; 0x38
        new_obj->realign.auto_realign = copy->realign.auto_realign;
 800e9f0:	f895 2041 	ldrb.w	r2, [r5, #65]	; 0x41
        new_obj->realign.base         = copy->realign.base;
 800e9f4:	63a3      	str	r3, [r4, #56]	; 0x38
        new_obj->realign.auto_realign = copy->realign.auto_realign;
 800e9f6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800e9fa:	f362 0300 	bfi	r3, r2, #0, #1
 800e9fe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        new_obj->event_cb = copy->event_cb;
 800ea02:	69ab      	ldr	r3, [r5, #24]
        new_obj->click        = copy->click;
 800ea04:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
        new_obj->event_cb = copy->event_cb;
 800ea08:	61a3      	str	r3, [r4, #24]
        new_obj->click        = copy->click;
 800ea0a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800ea0e:	f362 0300 	bfi	r3, r2, #0, #1
 800ea12:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        new_obj->drag         = copy->drag;
 800ea16:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800ea1a:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 800ea1e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800ea22:	f363 0241 	bfi	r2, r3, #1, #1
 800ea26:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->drag_dir     = copy->drag_dir;
 800ea2a:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
 800ea2e:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 800ea32:	f362 0301 	bfi	r3, r2, #0, #2
 800ea36:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
        new_obj->drag_throw   = copy->drag_throw;
 800ea3a:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800ea3e:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 800ea42:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800ea46:	f363 0282 	bfi	r2, r3, #2, #1
 800ea4a:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->drag_parent  = copy->drag_parent;
 800ea4e:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800ea52:	b2d2      	uxtb	r2, r2
 800ea54:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800ea58:	f363 02c3 	bfi	r2, r3, #3, #1
 800ea5c:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->hidden       = copy->hidden;
 800ea60:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800ea64:	b2d2      	uxtb	r2, r2
 800ea66:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800ea6a:	f363 1204 	bfi	r2, r3, #4, #1
 800ea6e:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->top          = copy->top;
 800ea72:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800ea76:	b2d2      	uxtb	r2, r2
 800ea78:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ea7c:	f363 1245 	bfi	r2, r3, #5, #1
 800ea80:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->parent_event = copy->parent_event;
 800ea84:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800ea88:	b2d2      	uxtb	r2, r2
 800ea8a:	09db      	lsrs	r3, r3, #7
 800ea8c:	f363 12c7 	bfi	r2, r3, #7, #1
 800ea90:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->opa_scale_en = copy->opa_scale_en;
 800ea94:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800ea98:	b2d2      	uxtb	r2, r2
 800ea9a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800ea9e:	f363 1286 	bfi	r2, r3, #6, #1
 800eaa2:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->protect      = copy->protect;
 800eaa6:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
 800eaaa:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
        new_obj->opa_scale    = copy->opa_scale;
 800eaae:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
 800eab2:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
        if(copy->group_p != NULL) {
 800eab6:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
        new_obj->style_p = copy->style_p;
 800eab8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800eaba:	62a3      	str	r3, [r4, #40]	; 0x28
        if(copy->group_p != NULL) {
 800eabc:	b110      	cbz	r0, 800eac4 <lv_obj_create+0x1a8>
            lv_group_add_obj(copy->group_p, new_obj);
 800eabe:	4621      	mov	r1, r4
 800eac0:	f7ff f9e8 	bl	800de94 <lv_group_add_obj>
    return obj->par;
 800eac4:	682b      	ldr	r3, [r5, #0]
        if(lv_obj_get_parent(copy) != NULL && parent != NULL) {
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d060      	beq.n	800eb8c <lv_obj_create+0x270>
 800eaca:	2e00      	cmp	r6, #0
 800eacc:	d05e      	beq.n	800eb8c <lv_obj_create+0x270>
    rel_y             = obj->coords.y1 - parent->coords.y1;
 800eace:	8a59      	ldrh	r1, [r3, #18]
 800ead0:	8a6a      	ldrh	r2, [r5, #18]
    rel_x             = obj->coords.x1 - parent->coords.x1;
 800ead2:	8a1b      	ldrh	r3, [r3, #16]
    rel_y             = obj->coords.y1 - parent->coords.y1;
 800ead4:	1a52      	subs	r2, r2, r1
    rel_x             = obj->coords.x1 - parent->coords.x1;
 800ead6:	8a29      	ldrh	r1, [r5, #16]
 800ead8:	1ac9      	subs	r1, r1, r3
            lv_obj_set_pos(new_obj, lv_obj_get_x(copy), lv_obj_get_y(copy));
 800eada:	b212      	sxth	r2, r2
 800eadc:	b209      	sxth	r1, r1
 800eade:	4620      	mov	r0, r4
 800eae0:	f7ff fca5 	bl	800e42e <lv_obj_set_pos>
        parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, new_obj);
 800eae4:	69f3      	ldr	r3, [r6, #28]
 800eae6:	4622      	mov	r2, r4
 800eae8:	2101      	movs	r1, #1
 800eaea:	4630      	mov	r0, r6
 800eaec:	4798      	blx	r3
        lv_obj_invalidate(new_obj);
 800eaee:	4620      	mov	r0, r4
 800eaf0:	f7ff fc30 	bl	800e354 <lv_obj_invalidate>
 800eaf4:	e051      	b.n	800eb9a <lv_obj_create+0x27e>
            new_obj->style_p = &lv_style_scr;
 800eaf6:	4b2d      	ldr	r3, [pc, #180]	; (800ebac <lv_obj_create+0x290>)
 800eaf8:	e744      	b.n	800e984 <lv_obj_create+0x68>
        new_obj = lv_ll_ins_head(&parent->child_ll);
 800eafa:	3004      	adds	r0, #4
 800eafc:	f005 f86c 	bl	8013bd8 <lv_ll_ins_head>
        lv_mem_assert(new_obj);
 800eb00:	4604      	mov	r4, r0
 800eb02:	b900      	cbnz	r0, 800eb06 <lv_obj_create+0x1ea>
 800eb04:	e7fe      	b.n	800eb04 <lv_obj_create+0x1e8>
        new_obj->par = parent; /*Set the parent*/
 800eb06:	f840 6b04 	str.w	r6, [r0], #4
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 800eb0a:	2148      	movs	r1, #72	; 0x48
 800eb0c:	f005 f85a 	bl	8013bc4 <lv_ll_init>
        new_obj->coords.x1    = parent->coords.x1;
 800eb10:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
 800eb14:	8223      	strh	r3, [r4, #16]
        new_obj->coords.y1    = parent->coords.y1;
 800eb16:	f9b6 3012 	ldrsh.w	r3, [r6, #18]
 800eb1a:	8263      	strh	r3, [r4, #18]
        new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
 800eb1c:	8a33      	ldrh	r3, [r6, #16]
        new_obj->realign.auto_realign = 0;
 800eb1e:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
        new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
 800eb22:	3319      	adds	r3, #25
 800eb24:	82a3      	strh	r3, [r4, #20]
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
 800eb26:	8a73      	ldrh	r3, [r6, #18]
 800eb28:	3310      	adds	r3, #16
 800eb2a:	82e3      	strh	r3, [r4, #22]
        new_obj->ext_draw_pad = 0;
 800eb2c:	2300      	movs	r3, #0
        new_obj->realign.auto_realign = 0;
 800eb2e:	f363 0200 	bfi	r2, r3, #0, #1
        new_obj->ext_draw_pad = 0;
 800eb32:	86a3      	strh	r3, [r4, #52]	; 0x34
        new_obj->realign.align        = LV_ALIGN_CENTER;
 800eb34:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        new_obj->realign.xofs         = 0;
 800eb38:	87a3      	strh	r3, [r4, #60]	; 0x3c
        new_obj->realign.yofs         = 0;
 800eb3a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        new_obj->realign.base         = NULL;
 800eb3c:	63a3      	str	r3, [r4, #56]	; 0x38
        new_obj->realign.auto_realign = 0;
 800eb3e:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        lv_theme_t * th = lv_theme_get_current();
 800eb42:	f00a fa4f 	bl	8018fe4 <lv_theme_get_current>
        if(th) {
 800eb46:	b1f8      	cbz	r0, 800eb88 <lv_obj_create+0x26c>
            new_obj->style_p = th->style.panel;
 800eb48:	6883      	ldr	r3, [r0, #8]
        new_obj->click        = 1;
 800eb4a:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
        new_obj->drag_dir     = LV_DRAG_DIR_ALL;
 800eb4e:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
            new_obj->style_p = &lv_style_plain_color;
 800eb52:	62a3      	str	r3, [r4, #40]	; 0x28
    obj->signal_cb = signal_cb;
 800eb54:	4b13      	ldr	r3, [pc, #76]	; (800eba4 <lv_obj_create+0x288>)
 800eb56:	61e3      	str	r3, [r4, #28]
        new_obj->drag         = 0;
 800eb58:	f042 0201 	orr.w	r2, r2, #1
    obj->design_cb = design_cb;
 800eb5c:	4b12      	ldr	r3, [pc, #72]	; (800eba8 <lv_obj_create+0x28c>)
 800eb5e:	6223      	str	r3, [r4, #32]
        new_obj->drag_dir     = LV_DRAG_DIR_ALL;
 800eb60:	f041 0103 	orr.w	r1, r1, #3
        new_obj->event_cb = NULL;
 800eb64:	2300      	movs	r3, #0
        new_obj->parent_event = 0;
 800eb66:	f002 0281 	and.w	r2, r2, #129	; 0x81
        new_obj->drag_dir     = LV_DRAG_DIR_ALL;
 800eb6a:	f884 1031 	strb.w	r1, [r4, #49]	; 0x31
        new_obj->parent_event = 0;
 800eb6e:	f363 12c7 	bfi	r2, r3, #7, #1
        new_obj->opa_scale    = LV_OPA_COVER;
 800eb72:	21ff      	movs	r1, #255	; 0xff
        new_obj->event_cb = NULL;
 800eb74:	61a3      	str	r3, [r4, #24]
        memset(&new_obj->user_data, 0, sizeof(lv_obj_user_data_t));
 800eb76:	6463      	str	r3, [r4, #68]	; 0x44
        new_obj->group_p = NULL;
 800eb78:	62e3      	str	r3, [r4, #44]	; 0x2c
        new_obj->protect      = LV_PROTECT_NONE;
 800eb7a:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
        new_obj->opa_scale    = LV_OPA_COVER;
 800eb7e:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
        new_obj->parent_event = 0;
 800eb82:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
 800eb86:	e719      	b.n	800e9bc <lv_obj_create+0xa0>
            new_obj->style_p = &lv_style_plain_color;
 800eb88:	4b09      	ldr	r3, [pc, #36]	; (800ebb0 <lv_obj_create+0x294>)
 800eb8a:	e7de      	b.n	800eb4a <lv_obj_create+0x22e>
            lv_obj_set_pos(new_obj, 0, 0);
 800eb8c:	2200      	movs	r2, #0
 800eb8e:	4611      	mov	r1, r2
 800eb90:	4620      	mov	r0, r4
 800eb92:	f7ff fc4c 	bl	800e42e <lv_obj_set_pos>
    if(parent != NULL) {
 800eb96:	2e00      	cmp	r6, #0
 800eb98:	d1a4      	bne.n	800eae4 <lv_obj_create+0x1c8>
}
 800eb9a:	4620      	mov	r0, r4
 800eb9c:	bd70      	pop	{r4, r5, r6, pc}
            return NULL;
 800eb9e:	4604      	mov	r4, r0
 800eba0:	e7fb      	b.n	800eb9a <lv_obj_create+0x27e>
 800eba2:	bf00      	nop
 800eba4:	0800eed1 	.word	0x0800eed1
 800eba8:	0800ef97 	.word	0x0800ef97
 800ebac:	2000c49c 	.word	0x2000c49c
 800ebb0:	2000c514 	.word	0x2000c514

0800ebb4 <lv_obj_set_parent>:
    if(obj->par == NULL) {
 800ebb4:	6803      	ldr	r3, [r0, #0]
{
 800ebb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebba:	4604      	mov	r4, r0
 800ebbc:	460d      	mov	r5, r1
    if(obj->par == NULL) {
 800ebbe:	b34b      	cbz	r3, 800ec14 <lv_obj_set_parent+0x60>
    if(parent == NULL) {
 800ebc0:	b341      	cbz	r1, 800ec14 <lv_obj_set_parent+0x60>
    lv_obj_invalidate(obj);
 800ebc2:	f7ff fbc7 	bl	800e354 <lv_obj_invalidate>
    return obj->par;
 800ebc6:	6826      	ldr	r6, [r4, #0]
    rel_x             = obj->coords.x1 - parent->coords.x1;
 800ebc8:	8a27      	ldrh	r7, [r4, #16]
 800ebca:	8a33      	ldrh	r3, [r6, #16]
    rel_y             = obj->coords.y1 - parent->coords.y1;
 800ebcc:	f8b4 8012 	ldrh.w	r8, [r4, #18]
    rel_x             = obj->coords.x1 - parent->coords.x1;
 800ebd0:	1aff      	subs	r7, r7, r3
    rel_y             = obj->coords.y1 - parent->coords.y1;
 800ebd2:	8a73      	ldrh	r3, [r6, #18]
 800ebd4:	eba8 0803 	sub.w	r8, r8, r3
    lv_ll_chg_list(&obj->par->child_ll, &parent->child_ll, obj, true);
 800ebd8:	4622      	mov	r2, r4
 800ebda:	2301      	movs	r3, #1
 800ebdc:	1d29      	adds	r1, r5, #4
 800ebde:	1d30      	adds	r0, r6, #4
    rel_x             = obj->coords.x1 - parent->coords.x1;
 800ebe0:	b23f      	sxth	r7, r7
    rel_y             = obj->coords.y1 - parent->coords.y1;
 800ebe2:	fa0f f888 	sxth.w	r8, r8
    lv_ll_chg_list(&obj->par->child_ll, &parent->child_ll, obj, true);
 800ebe6:	f005 f8ac 	bl	8013d42 <lv_ll_chg_list>
    lv_obj_set_pos(obj, old_pos.x, old_pos.y);
 800ebea:	4642      	mov	r2, r8
 800ebec:	4639      	mov	r1, r7
 800ebee:	4620      	mov	r0, r4
    obj->par = parent;
 800ebf0:	6025      	str	r5, [r4, #0]
    lv_obj_set_pos(obj, old_pos.x, old_pos.y);
 800ebf2:	f7ff fc1c 	bl	800e42e <lv_obj_set_pos>
    old_par->signal_cb(old_par, LV_SIGNAL_CHILD_CHG, NULL);
 800ebf6:	69f3      	ldr	r3, [r6, #28]
 800ebf8:	2200      	movs	r2, #0
 800ebfa:	2101      	movs	r1, #1
 800ebfc:	4630      	mov	r0, r6
 800ebfe:	4798      	blx	r3
    parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, obj);
 800ec00:	69eb      	ldr	r3, [r5, #28]
 800ec02:	4622      	mov	r2, r4
 800ec04:	4628      	mov	r0, r5
 800ec06:	2101      	movs	r1, #1
 800ec08:	4798      	blx	r3
    lv_obj_invalidate(obj);
 800ec0a:	4620      	mov	r0, r4
}
 800ec0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_obj_invalidate(obj);
 800ec10:	f7ff bba0 	b.w	800e354 <lv_obj_invalidate>
 800ec14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ec18 <lv_obj_set_size>:
    return area_p->x2 - area_p->x1 + 1;
 800ec18:	8a83      	ldrh	r3, [r0, #20]
{
 800ec1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ec1c:	4616      	mov	r6, r2
 800ec1e:	8a02      	ldrh	r2, [r0, #16]
 800ec20:	3301      	adds	r3, #1
 800ec22:	1a9b      	subs	r3, r3, r2
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
 800ec24:	b21b      	sxth	r3, r3
 800ec26:	4299      	cmp	r1, r3
{
 800ec28:	4604      	mov	r4, r0
 800ec2a:	460d      	mov	r5, r1
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
 800ec2c:	d106      	bne.n	800ec3c <lv_obj_set_size+0x24>
    return area_p->y2 - area_p->y1 + 1;
 800ec2e:	8ac3      	ldrh	r3, [r0, #22]
 800ec30:	8a42      	ldrh	r2, [r0, #18]
 800ec32:	3301      	adds	r3, #1
 800ec34:	1a9b      	subs	r3, r3, r2
 800ec36:	b21b      	sxth	r3, r3
 800ec38:	429e      	cmp	r6, r3
 800ec3a:	d02b      	beq.n	800ec94 <lv_obj_set_size+0x7c>
    lv_obj_invalidate(obj);
 800ec3c:	4620      	mov	r0, r4
 800ec3e:	f7ff fb89 	bl	800e354 <lv_obj_invalidate>
    memcpy(dest, src, sizeof(lv_area_t));
 800ec42:	4622      	mov	r2, r4
 800ec44:	466b      	mov	r3, sp
 800ec46:	f852 0f10 	ldr.w	r0, [r2, #16]!
 800ec4a:	6851      	ldr	r1, [r2, #4]
    obj->coords.y2 = obj->coords.y1 + h - 1;
 800ec4c:	8a62      	ldrh	r2, [r4, #18]
 800ec4e:	c303      	stmia	r3!, {r0, r1}
    obj->coords.x2 = obj->coords.x1 + w - 1;
 800ec50:	8a23      	ldrh	r3, [r4, #16]
 800ec52:	3d01      	subs	r5, #1
    obj->coords.y2 = obj->coords.y1 + h - 1;
 800ec54:	3e01      	subs	r6, #1
    obj->coords.x2 = obj->coords.x1 + w - 1;
 800ec56:	441d      	add	r5, r3
    obj->coords.y2 = obj->coords.y1 + h - 1;
 800ec58:	4416      	add	r6, r2
    obj->coords.x2 = obj->coords.x1 + w - 1;
 800ec5a:	82a5      	strh	r5, [r4, #20]
    obj->coords.y2 = obj->coords.y1 + h - 1;
 800ec5c:	82e6      	strh	r6, [r4, #22]
    obj->signal_cb(obj, LV_SIGNAL_CORD_CHG, &ori);
 800ec5e:	69e3      	ldr	r3, [r4, #28]
 800ec60:	466a      	mov	r2, sp
 800ec62:	2102      	movs	r1, #2
 800ec64:	4620      	mov	r0, r4
 800ec66:	4798      	blx	r3
    return obj->par;
 800ec68:	6820      	ldr	r0, [r4, #0]
    if(par != NULL) par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
 800ec6a:	b118      	cbz	r0, 800ec74 <lv_obj_set_size+0x5c>
 800ec6c:	69c3      	ldr	r3, [r0, #28]
 800ec6e:	4622      	mov	r2, r4
 800ec70:	2101      	movs	r1, #1
 800ec72:	4798      	blx	r3
    LV_LL_READ(obj->child_ll, i)
 800ec74:	1d26      	adds	r6, r4, #4
 800ec76:	4630      	mov	r0, r6
 800ec78:	f004 ffea 	bl	8013c50 <lv_ll_get_head>
 800ec7c:	4605      	mov	r5, r0
 800ec7e:	b958      	cbnz	r0, 800ec98 <lv_obj_set_size+0x80>
    lv_obj_invalidate(obj);
 800ec80:	4620      	mov	r0, r4
 800ec82:	f7ff fb67 	bl	800e354 <lv_obj_invalidate>
    if(obj->realign.auto_realign) lv_obj_realign(obj);
 800ec86:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800ec8a:	07db      	lsls	r3, r3, #31
 800ec8c:	d502      	bpl.n	800ec94 <lv_obj_set_size+0x7c>
 800ec8e:	4620      	mov	r0, r4
 800ec90:	f7ff fe2e 	bl	800e8f0 <lv_obj_realign>
}
 800ec94:	b002      	add	sp, #8
 800ec96:	bd70      	pop	{r4, r5, r6, pc}
        i->signal_cb(i, LV_SIGNAL_PARENT_SIZE_CHG, NULL);
 800ec98:	69eb      	ldr	r3, [r5, #28]
 800ec9a:	2200      	movs	r2, #0
 800ec9c:	2103      	movs	r1, #3
 800ec9e:	4628      	mov	r0, r5
 800eca0:	4798      	blx	r3
    LV_LL_READ(obj->child_ll, i)
 800eca2:	4629      	mov	r1, r5
 800eca4:	4630      	mov	r0, r6
 800eca6:	f004 ffd9 	bl	8013c5c <lv_ll_get_next>
 800ecaa:	e7e7      	b.n	800ec7c <lv_obj_set_size+0x64>

0800ecac <lv_obj_set_width>:
    return area_p->y2 - area_p->y1 + 1;
 800ecac:	8ac2      	ldrh	r2, [r0, #22]
 800ecae:	8a43      	ldrh	r3, [r0, #18]
 800ecb0:	3201      	adds	r2, #1
 800ecb2:	1ad2      	subs	r2, r2, r3
    lv_obj_set_size(obj, w, lv_obj_get_height(obj));
 800ecb4:	b212      	sxth	r2, r2
 800ecb6:	f7ff bfaf 	b.w	800ec18 <lv_obj_set_size>

0800ecba <lv_obj_set_height>:
    return area_p->x2 - area_p->x1 + 1;
 800ecba:	8a83      	ldrh	r3, [r0, #20]
 800ecbc:	8a02      	ldrh	r2, [r0, #16]
 800ecbe:	3301      	adds	r3, #1
 800ecc0:	1a9b      	subs	r3, r3, r2
    lv_obj_set_size(obj, lv_obj_get_width(obj), h);
 800ecc2:	460a      	mov	r2, r1
 800ecc4:	b219      	sxth	r1, r3
 800ecc6:	f7ff bfa7 	b.w	800ec18 <lv_obj_set_size>

0800ecca <lv_obj_refresh_style>:
{
 800ecca:	b510      	push	{r4, lr}
 800eccc:	4604      	mov	r4, r0
    lv_obj_invalidate(obj);
 800ecce:	f7ff fb41 	bl	800e354 <lv_obj_invalidate>
    obj->signal_cb(obj, LV_SIGNAL_STYLE_CHG, NULL);
 800ecd2:	69e3      	ldr	r3, [r4, #28]
 800ecd4:	4620      	mov	r0, r4
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	2104      	movs	r1, #4
 800ecda:	4798      	blx	r3
    lv_obj_invalidate(obj);
 800ecdc:	4620      	mov	r0, r4
}
 800ecde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_invalidate(obj);
 800ece2:	f7ff bb37 	b.w	800e354 <lv_obj_invalidate>

0800ece6 <lv_obj_refresh_ext_draw_pad>:
{
 800ece6:	b510      	push	{r4, lr}
    obj->ext_draw_pad = 0;
 800ece8:	2200      	movs	r2, #0
{
 800ecea:	4604      	mov	r4, r0
    obj->ext_draw_pad = 0;
 800ecec:	8682      	strh	r2, [r0, #52]	; 0x34
    obj->signal_cb(obj, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
 800ecee:	69c3      	ldr	r3, [r0, #28]
 800ecf0:	2105      	movs	r1, #5
 800ecf2:	4798      	blx	r3
    lv_obj_invalidate(obj);
 800ecf4:	4620      	mov	r0, r4
}
 800ecf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_invalidate(obj);
 800ecfa:	f7ff bb2b 	b.w	800e354 <lv_obj_invalidate>

0800ecfe <lv_obj_del>:
{
 800ecfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed02:	4604      	mov	r4, r0
    lv_obj_invalidate(obj);
 800ed04:	f7ff fb26 	bl	800e354 <lv_obj_invalidate>
    return obj->group_p;
 800ed08:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    if(group) lv_group_remove_obj(obj);
 800ed0a:	b117      	cbz	r7, 800ed12 <lv_obj_del+0x14>
 800ed0c:	4620      	mov	r0, r4
 800ed0e:	f7ff f8ec 	bl	800deea <lv_group_remove_obj>
    lv_anim_del(obj, NULL);
 800ed12:	2100      	movs	r1, #0
 800ed14:	4620      	mov	r0, r4
    i = lv_ll_get_head(&(obj->child_ll));
 800ed16:	1d26      	adds	r6, r4, #4
    lv_anim_del(obj, NULL);
 800ed18:	f004 fdfc 	bl	8013914 <lv_anim_del>
    i = lv_ll_get_head(&(obj->child_ll));
 800ed1c:	4630      	mov	r0, r6
 800ed1e:	f004 ff97 	bl	8013c50 <lv_ll_get_head>
 800ed22:	4605      	mov	r5, r0
    while(i != NULL) {
 800ed24:	bb65      	cbnz	r5, 800ed80 <lv_obj_del+0x82>
    lv_event_send(obj, LV_EVENT_DELETE, NULL);
 800ed26:	462a      	mov	r2, r5
 800ed28:	2113      	movs	r1, #19
 800ed2a:	4620      	mov	r0, r4
 800ed2c:	f7ff fa7c 	bl	800e228 <lv_event_send>
    lv_event_mark_deleted(obj);
 800ed30:	4620      	mov	r0, r4
 800ed32:	f7ff f9a9 	bl	800e088 <lv_event_mark_deleted>
    return obj->par;
 800ed36:	6826      	ldr	r6, [r4, #0]
    if(par == NULL) { /*It is a screen*/
 800ed38:	bb66      	cbnz	r6, 800ed94 <lv_obj_del+0x96>
        lv_disp_t * d = lv_obj_get_disp(obj);
 800ed3a:	4620      	mov	r0, r4
 800ed3c:	f7ff fae4 	bl	800e308 <lv_obj_get_disp>
        lv_ll_rem(&d->scr_ll, obj);
 800ed40:	4621      	mov	r1, r4
 800ed42:	3028      	adds	r0, #40	; 0x28
        lv_ll_rem(&(par->child_ll), obj);
 800ed44:	f004 ffc3 	bl	8013cce <lv_ll_rem>
    lv_indev_t * indev = lv_indev_get_next(NULL);
 800ed48:	2000      	movs	r0, #0
 800ed4a:	f004 fcfb 	bl	8013744 <lv_indev_get_next>
            indev->proc.types.pointer.last_pressed = NULL;
 800ed4e:	f04f 0800 	mov.w	r8, #0
    lv_indev_t * indev = lv_indev_get_next(NULL);
 800ed52:	4605      	mov	r5, r0
    while(indev) {
 800ed54:	bb0d      	cbnz	r5, 800ed9a <lv_obj_del+0x9c>
    obj->signal_cb(obj, LV_SIGNAL_CLEANUP, NULL);
 800ed56:	69e3      	ldr	r3, [r4, #28]
 800ed58:	462a      	mov	r2, r5
 800ed5a:	4629      	mov	r1, r5
 800ed5c:	4620      	mov	r0, r4
 800ed5e:	4798      	blx	r3
    if(obj->ext_attr != NULL) lv_mem_free(obj->ext_attr);
 800ed60:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ed62:	b108      	cbz	r0, 800ed68 <lv_obj_del+0x6a>
 800ed64:	f005 f8f2 	bl	8013f4c <lv_mem_free>
    lv_mem_free(obj); /*Free the object itself*/
 800ed68:	4620      	mov	r0, r4
 800ed6a:	f005 f8ef 	bl	8013f4c <lv_mem_free>
    if(par != NULL) {
 800ed6e:	b126      	cbz	r6, 800ed7a <lv_obj_del+0x7c>
        par->signal_cb(par, LV_SIGNAL_CHILD_CHG, NULL);
 800ed70:	69f3      	ldr	r3, [r6, #28]
 800ed72:	2200      	movs	r2, #0
 800ed74:	2101      	movs	r1, #1
 800ed76:	4630      	mov	r0, r6
 800ed78:	4798      	blx	r3
}
 800ed7a:	2000      	movs	r0, #0
 800ed7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        i_next = lv_ll_get_next(&(obj->child_ll), i);
 800ed80:	4629      	mov	r1, r5
 800ed82:	4630      	mov	r0, r6
 800ed84:	f004 ff6a 	bl	8013c5c <lv_ll_get_next>
 800ed88:	4680      	mov	r8, r0
        delete_children(i);
 800ed8a:	4628      	mov	r0, r5
 800ed8c:	f7ff fa55 	bl	800e23a <delete_children>
        i = i_next;
 800ed90:	4645      	mov	r5, r8
 800ed92:	e7c7      	b.n	800ed24 <lv_obj_del+0x26>
        lv_ll_rem(&(par->child_ll), obj);
 800ed94:	4621      	mov	r1, r4
 800ed96:	1d30      	adds	r0, r6, #4
 800ed98:	e7d4      	b.n	800ed44 <lv_obj_del+0x46>
        if(indev->proc.types.pointer.act_obj == obj || indev->proc.types.pointer.last_obj == obj) {
 800ed9a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800ed9c:	429c      	cmp	r4, r3
 800ed9e:	d002      	beq.n	800eda6 <lv_obj_del+0xa8>
 800eda0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800eda2:	429c      	cmp	r4, r3
 800eda4:	d102      	bne.n	800edac <lv_obj_del+0xae>
            lv_indev_reset(indev);
 800eda6:	4628      	mov	r0, r5
 800eda8:	f7ff f931 	bl	800e00e <lv_indev_reset>
        if(indev->proc.types.pointer.last_pressed == obj) {
 800edac:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800edae:	429c      	cmp	r4, r3
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
 800edb0:	6dab      	ldr	r3, [r5, #88]	; 0x58
            indev->proc.types.pointer.last_pressed = NULL;
 800edb2:	bf08      	it	eq
 800edb4:	f8c5 8040 	streq.w	r8, [r5, #64]	; 0x40
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
 800edb8:	429f      	cmp	r7, r3
 800edba:	d106      	bne.n	800edca <lv_obj_del+0xcc>
 800edbc:	f7ff f95e 	bl	800e07c <lv_indev_get_obj_act>
 800edc0:	4284      	cmp	r4, r0
 800edc2:	d102      	bne.n	800edca <lv_obj_del+0xcc>
            lv_indev_reset(indev);
 800edc4:	4628      	mov	r0, r5
 800edc6:	f7ff f922 	bl	800e00e <lv_indev_reset>
        indev = lv_indev_get_next(indev);
 800edca:	4628      	mov	r0, r5
 800edcc:	f004 fcba 	bl	8013744 <lv_indev_get_next>
 800edd0:	4605      	mov	r5, r0
 800edd2:	e7bf      	b.n	800ed54 <lv_obj_del+0x56>

0800edd4 <lv_obj_get_parent>:
}
 800edd4:	6800      	ldr	r0, [r0, #0]
 800edd6:	4770      	bx	lr

0800edd8 <lv_obj_get_child>:
{
 800edd8:	3004      	adds	r0, #4
    if(child == NULL) {
 800edda:	b909      	cbnz	r1, 800ede0 <lv_obj_get_child+0x8>
        result = lv_ll_get_head(&obj->child_ll);
 800eddc:	f004 bf38 	b.w	8013c50 <lv_ll_get_head>
        result = lv_ll_get_next(&obj->child_ll, child);
 800ede0:	f004 bf3c 	b.w	8013c5c <lv_ll_get_next>

0800ede4 <refresh_children_style>:
{
 800ede4:	b538      	push	{r3, r4, r5, lr}
 800ede6:	4605      	mov	r5, r0
        result = lv_ll_get_head(&obj->child_ll);
 800ede8:	3004      	adds	r0, #4
 800edea:	f004 ff31 	bl	8013c50 <lv_ll_get_head>
        child = lv_obj_get_child(obj, child);
 800edee:	4604      	mov	r4, r0
    while(child != NULL) {
 800edf0:	b900      	cbnz	r0, 800edf4 <refresh_children_style+0x10>
}
 800edf2:	bd38      	pop	{r3, r4, r5, pc}
        if(child->style_p == NULL) {
 800edf4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800edf6:	b953      	cbnz	r3, 800ee0e <refresh_children_style+0x2a>
            refresh_children_style(child); /*Check children too*/
 800edf8:	4620      	mov	r0, r4
 800edfa:	f7ff fff3 	bl	800ede4 <refresh_children_style>
            lv_obj_refresh_style(child);   /*Notify the child about the style change*/
 800edfe:	4620      	mov	r0, r4
 800ee00:	f7ff ff63 	bl	800ecca <lv_obj_refresh_style>
        child = lv_obj_get_child(obj, child);
 800ee04:	4621      	mov	r1, r4
 800ee06:	4628      	mov	r0, r5
 800ee08:	f7ff ffe6 	bl	800edd8 <lv_obj_get_child>
 800ee0c:	e7ef      	b.n	800edee <refresh_children_style+0xa>
        } else if(child->style_p->glass) {
 800ee0e:	781b      	ldrb	r3, [r3, #0]
 800ee10:	07db      	lsls	r3, r3, #31
 800ee12:	d5f7      	bpl.n	800ee04 <refresh_children_style+0x20>
            refresh_children_style(child);
 800ee14:	4620      	mov	r0, r4
 800ee16:	f7ff ffe5 	bl	800ede4 <refresh_children_style>
 800ee1a:	e7f3      	b.n	800ee04 <refresh_children_style+0x20>

0800ee1c <lv_obj_set_style>:
{
 800ee1c:	b510      	push	{r4, lr}
 800ee1e:	4604      	mov	r4, r0
    obj->style_p = style;
 800ee20:	6281      	str	r1, [r0, #40]	; 0x28
    refresh_children_style(obj);
 800ee22:	f7ff ffdf 	bl	800ede4 <refresh_children_style>
    lv_obj_refresh_style(obj);
 800ee26:	4620      	mov	r0, r4
}
 800ee28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_refresh_style(obj);
 800ee2c:	f7ff bf4d 	b.w	800ecca <lv_obj_refresh_style>

0800ee30 <lv_obj_get_coords>:
    memcpy(dest, src, sizeof(lv_area_t));
 800ee30:	f850 3f10 	ldr.w	r3, [r0, #16]!
 800ee34:	600b      	str	r3, [r1, #0]
 800ee36:	6843      	ldr	r3, [r0, #4]
 800ee38:	604b      	str	r3, [r1, #4]
 800ee3a:	4770      	bx	lr

0800ee3c <lv_obj_get_x>:
    rel_x             = obj->coords.x1 - parent->coords.x1;
 800ee3c:	6803      	ldr	r3, [r0, #0]
 800ee3e:	8a00      	ldrh	r0, [r0, #16]
 800ee40:	8a1b      	ldrh	r3, [r3, #16]
 800ee42:	1ac0      	subs	r0, r0, r3
}
 800ee44:	b200      	sxth	r0, r0
 800ee46:	4770      	bx	lr

0800ee48 <lv_obj_get_y>:
    rel_y             = obj->coords.y1 - parent->coords.y1;
 800ee48:	6803      	ldr	r3, [r0, #0]
 800ee4a:	8a40      	ldrh	r0, [r0, #18]
 800ee4c:	8a5b      	ldrh	r3, [r3, #18]
 800ee4e:	1ac0      	subs	r0, r0, r3
}
 800ee50:	b200      	sxth	r0, r0
 800ee52:	4770      	bx	lr

0800ee54 <lv_obj_get_width>:
    return area_p->x2 - area_p->x1 + 1;
 800ee54:	8a83      	ldrh	r3, [r0, #20]
 800ee56:	8a00      	ldrh	r0, [r0, #16]
 800ee58:	3301      	adds	r3, #1
 800ee5a:	1a18      	subs	r0, r3, r0
}
 800ee5c:	b200      	sxth	r0, r0
 800ee5e:	4770      	bx	lr

0800ee60 <lv_obj_get_height>:
    return area_p->y2 - area_p->y1 + 1;
 800ee60:	8ac3      	ldrh	r3, [r0, #22]
 800ee62:	8a40      	ldrh	r0, [r0, #18]
 800ee64:	3301      	adds	r3, #1
 800ee66:	1a18      	subs	r0, r3, r0
}
 800ee68:	b200      	sxth	r0, r0
 800ee6a:	4770      	bx	lr

0800ee6c <lv_obj_get_auto_realign>:
    return obj->realign.auto_realign ? true : false;
 800ee6c:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 800ee70:	f000 0001 	and.w	r0, r0, #1
 800ee74:	4770      	bx	lr
	...

0800ee78 <lv_obj_get_style>:
{
 800ee78:	b570      	push	{r4, r5, r6, lr}
    const lv_style_t * style_act = obj->style_p;
 800ee7a:	6a85      	ldr	r5, [r0, #40]	; 0x28
{
 800ee7c:	4606      	mov	r6, r0
    if(style_act == NULL) {
 800ee7e:	b98d      	cbnz	r5, 800eea4 <lv_obj_get_style+0x2c>
        lv_obj_t * par = obj->par;
 800ee80:	6804      	ldr	r4, [r0, #0]
        while(par) {
 800ee82:	b17c      	cbz	r4, 800eea4 <lv_obj_get_style+0x2c>
            if(par->style_p) {
 800ee84:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ee86:	b1fb      	cbz	r3, 800eec8 <lv_obj_get_style+0x50>
                if(par->style_p->glass == 0) {
 800ee88:	781b      	ldrb	r3, [r3, #0]
 800ee8a:	07db      	lsls	r3, r3, #31
 800ee8c:	d41c      	bmi.n	800eec8 <lv_obj_get_style+0x50>
    return obj->group_p;
 800ee8e:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
                    if(lv_group_get_focused(g) == par) {
 800ee90:	4628      	mov	r0, r5
 800ee92:	f7ff f877 	bl	800df84 <lv_group_get_focused>
 800ee96:	4284      	cmp	r4, r0
 800ee98:	d114      	bne.n	800eec4 <lv_obj_get_style+0x4c>
                        style_act = lv_group_mod_style(g, par->style_p);
 800ee9a:	4628      	mov	r0, r5
 800ee9c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800ee9e:	f7ff f85e 	bl	800df5e <lv_group_mod_style>
 800eea2:	4605      	mov	r5, r0
    if(obj->group_p) {
 800eea4:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800eea6:	b140      	cbz	r0, 800eeba <lv_obj_get_style+0x42>
        if(lv_group_get_focused(obj->group_p) == obj) {
 800eea8:	f7ff f86c 	bl	800df84 <lv_group_get_focused>
 800eeac:	4286      	cmp	r6, r0
 800eeae:	d104      	bne.n	800eeba <lv_obj_get_style+0x42>
            style_act = lv_group_mod_style(obj->group_p, style_act);
 800eeb0:	4629      	mov	r1, r5
 800eeb2:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800eeb4:	f7ff f853 	bl	800df5e <lv_group_mod_style>
 800eeb8:	4605      	mov	r5, r0
}
 800eeba:	4804      	ldr	r0, [pc, #16]	; (800eecc <lv_obj_get_style+0x54>)
 800eebc:	2d00      	cmp	r5, #0
 800eebe:	bf18      	it	ne
 800eec0:	4628      	movne	r0, r5
 800eec2:	bd70      	pop	{r4, r5, r6, pc}
                        style_act = par->style_p;
 800eec4:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800eec6:	e7ed      	b.n	800eea4 <lv_obj_get_style+0x2c>
            par = par->par;
 800eec8:	6824      	ldr	r4, [r4, #0]
 800eeca:	e7da      	b.n	800ee82 <lv_obj_get_style+0xa>
 800eecc:	2000c424 	.word	0x2000c424

0800eed0 <lv_obj_signal>:
{
 800eed0:	b570      	push	{r4, r5, r6, lr}
 800eed2:	460c      	mov	r4, r1
 800eed4:	4605      	mov	r5, r0
 800eed6:	4616      	mov	r6, r2
    const lv_style_t * style = lv_obj_get_style(obj);
 800eed8:	f7ff ffce 	bl	800ee78 <lv_obj_get_style>
    if(sign == LV_SIGNAL_CHILD_CHG) {
 800eedc:	2c01      	cmp	r4, #1
 800eede:	d105      	bne.n	800eeec <lv_obj_signal+0x1c>
        if(lv_obj_is_protected(obj, LV_PROTECT_CHILD_CHG) != false) res = LV_RES_INV;
 800eee0:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
 800eee4:	43c0      	mvns	r0, r0
 800eee6:	f000 0001 	and.w	r0, r0, #1
 800eeea:	bd70      	pop	{r4, r5, r6, pc}
    } else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 800eeec:	2c05      	cmp	r4, #5
 800eeee:	d108      	bne.n	800ef02 <lv_obj_signal+0x32>
        if(style->body.shadow.width > obj->ext_draw_pad) obj->ext_draw_pad = style->body.shadow.width;
 800eef0:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
 800eef4:	f9b5 2034 	ldrsh.w	r2, [r5, #52]	; 0x34
 800eef8:	429a      	cmp	r2, r3
 800eefa:	da00      	bge.n	800eefe <lv_obj_signal+0x2e>
 800eefc:	86ab      	strh	r3, [r5, #52]	; 0x34
    lv_res_t res = LV_RES_OK;
 800eefe:	2001      	movs	r0, #1
}
 800ef00:	bd70      	pop	{r4, r5, r6, pc}
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 800ef02:	2c04      	cmp	r4, #4
 800ef04:	d103      	bne.n	800ef0e <lv_obj_signal+0x3e>
        lv_obj_refresh_ext_draw_pad(obj);
 800ef06:	4628      	mov	r0, r5
 800ef08:	f7ff feed 	bl	800ece6 <lv_obj_refresh_ext_draw_pad>
 800ef0c:	e7f7      	b.n	800eefe <lv_obj_signal+0x2e>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 800ef0e:	2c06      	cmp	r4, #6
        buf->type[0]        = "lv_obj";
 800ef10:	bf04      	itt	eq
 800ef12:	4b01      	ldreq	r3, [pc, #4]	; (800ef18 <lv_obj_signal+0x48>)
 800ef14:	6033      	streq	r3, [r6, #0]
 800ef16:	e7f2      	b.n	800eefe <lv_obj_signal+0x2e>
 800ef18:	080d8957 	.word	0x080d8957

0800ef1c <lv_obj_get_inner_coords>:
{
 800ef1c:	b510      	push	{r4, lr}
 800ef1e:	460c      	mov	r4, r1
    const lv_style_t * style = lv_obj_get_style(obj);
 800ef20:	f7ff ffaa 	bl	800ee78 <lv_obj_get_style>
    if(style->body.border.part & LV_BORDER_LEFT) coords_p->x1 += style->body.border.width;
 800ef24:	7b83      	ldrb	r3, [r0, #14]
 800ef26:	075a      	lsls	r2, r3, #29
 800ef28:	bf41      	itttt	mi
 800ef2a:	8822      	ldrhmi	r2, [r4, #0]
 800ef2c:	8981      	ldrhmi	r1, [r0, #12]
 800ef2e:	1852      	addmi	r2, r2, r1
 800ef30:	8022      	strhmi	r2, [r4, #0]
    if(style->body.border.part & LV_BORDER_RIGHT) coords_p->x2 -= style->body.border.width;
 800ef32:	0719      	lsls	r1, r3, #28
 800ef34:	bf41      	itttt	mi
 800ef36:	88a2      	ldrhmi	r2, [r4, #4]
 800ef38:	8981      	ldrhmi	r1, [r0, #12]
 800ef3a:	1a52      	submi	r2, r2, r1
 800ef3c:	80a2      	strhmi	r2, [r4, #4]
    if(style->body.border.part & LV_BORDER_TOP) coords_p->y1 += style->body.border.width;
 800ef3e:	079a      	lsls	r2, r3, #30
 800ef40:	bf41      	itttt	mi
 800ef42:	8862      	ldrhmi	r2, [r4, #2]
 800ef44:	8981      	ldrhmi	r1, [r0, #12]
 800ef46:	1852      	addmi	r2, r2, r1
 800ef48:	8062      	strhmi	r2, [r4, #2]
    if(style->body.border.part & LV_BORDER_BOTTOM) coords_p->y2 -= style->body.border.width;
 800ef4a:	07db      	lsls	r3, r3, #31
 800ef4c:	bf41      	itttt	mi
 800ef4e:	88e3      	ldrhmi	r3, [r4, #6]
 800ef50:	8982      	ldrhmi	r2, [r0, #12]
 800ef52:	1a9b      	submi	r3, r3, r2
 800ef54:	80e3      	strhmi	r3, [r4, #6]
 800ef56:	bd10      	pop	{r4, pc}

0800ef58 <lv_obj_get_width_fit>:
{
 800ef58:	b510      	push	{r4, lr}
 800ef5a:	4604      	mov	r4, r0
    const lv_style_t * style = lv_obj_get_style(obj);
 800ef5c:	f7ff ff8c 	bl	800ee78 <lv_obj_get_style>
    return area_p->x2 - area_p->x1 + 1;
 800ef60:	8aa3      	ldrh	r3, [r4, #20]
 800ef62:	8a22      	ldrh	r2, [r4, #16]
 800ef64:	3301      	adds	r3, #1
 800ef66:	1a9b      	subs	r3, r3, r2
    return lv_obj_get_width(obj) - style->body.padding.left - style->body.padding.right;
 800ef68:	8b42      	ldrh	r2, [r0, #26]
 800ef6a:	8b80      	ldrh	r0, [r0, #28]
 800ef6c:	1a9b      	subs	r3, r3, r2
 800ef6e:	1a18      	subs	r0, r3, r0
}
 800ef70:	b200      	sxth	r0, r0
 800ef72:	bd10      	pop	{r4, pc}

0800ef74 <lv_obj_get_hidden>:
    return obj->hidden == 0 ? false : true;
 800ef74:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
}
 800ef78:	f3c0 1000 	ubfx	r0, r0, #4, #1
 800ef7c:	4770      	bx	lr

0800ef7e <lv_obj_get_opa_scale>:
    while(parent) {
 800ef7e:	b908      	cbnz	r0, 800ef84 <lv_obj_get_opa_scale+0x6>
    return LV_OPA_COVER;
 800ef80:	20ff      	movs	r0, #255	; 0xff
}
 800ef82:	4770      	bx	lr
        if(parent->opa_scale_en) return parent->opa_scale;
 800ef84:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800ef88:	065b      	lsls	r3, r3, #25
 800ef8a:	d502      	bpl.n	800ef92 <lv_obj_get_opa_scale+0x14>
 800ef8c:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
 800ef90:	4770      	bx	lr
    return obj->par;
 800ef92:	6800      	ldr	r0, [r0, #0]
 800ef94:	e7f3      	b.n	800ef7e <lv_obj_get_opa_scale>

0800ef96 <lv_obj_design>:
    if(mode == LV_DESIGN_COVER_CHK) {
 800ef96:	2a02      	cmp	r2, #2
{
 800ef98:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ef9a:	4604      	mov	r4, r0
 800ef9c:	460e      	mov	r6, r1
    if(mode == LV_DESIGN_COVER_CHK) {
 800ef9e:	d13c      	bne.n	800f01a <lv_obj_design+0x84>
        if(lv_area_is_in(mask_p, &obj->coords) == false) return false;
 800efa0:	f100 0510 	add.w	r5, r0, #16
 800efa4:	4629      	mov	r1, r5
 800efa6:	4630      	mov	r0, r6
 800efa8:	f004 fdb6 	bl	8013b18 <lv_area_is_in>
 800efac:	b390      	cbz	r0, 800f014 <lv_obj_design+0x7e>
        const lv_style_t * style = lv_obj_get_style(obj);
 800efae:	4620      	mov	r0, r4
 800efb0:	f7ff ff62 	bl	800ee78 <lv_obj_get_style>
        if(style->body.opa < LV_OPA_MAX) return false;
 800efb4:	7a03      	ldrb	r3, [r0, #8]
 800efb6:	2bfa      	cmp	r3, #250	; 0xfa
 800efb8:	d92c      	bls.n	800f014 <lv_obj_design+0x7e>
        lv_coord_t r = style->body.radius;
 800efba:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
        if(r == LV_RADIUS_CIRCLE) return false;
 800efbe:	f647 4318 	movw	r3, #31768	; 0x7c18
 800efc2:	429c      	cmp	r4, r3
 800efc4:	d026      	beq.n	800f014 <lv_obj_design+0x7e>
    memcpy(dest, src, sizeof(lv_area_t));
 800efc6:	6828      	ldr	r0, [r5, #0]
 800efc8:	6869      	ldr	r1, [r5, #4]
 800efca:	466b      	mov	r3, sp
 800efcc:	c303      	stmia	r3!, {r0, r1}
        area_tmp.x1 += r;
 800efce:	f8bd 3000 	ldrh.w	r3, [sp]
 800efd2:	b2a4      	uxth	r4, r4
 800efd4:	4423      	add	r3, r4
 800efd6:	f8ad 3000 	strh.w	r3, [sp]
        area_tmp.x2 -= r;
 800efda:	f8bd 3004 	ldrh.w	r3, [sp, #4]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 800efde:	4669      	mov	r1, sp
        area_tmp.x2 -= r;
 800efe0:	1b1b      	subs	r3, r3, r4
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 800efe2:	4630      	mov	r0, r6
        area_tmp.x2 -= r;
 800efe4:	f8ad 3004 	strh.w	r3, [sp, #4]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 800efe8:	f004 fd96 	bl	8013b18 <lv_area_is_in>
 800efec:	b190      	cbz	r0, 800f014 <lv_obj_design+0x7e>
 800efee:	6828      	ldr	r0, [r5, #0]
 800eff0:	6869      	ldr	r1, [r5, #4]
 800eff2:	466b      	mov	r3, sp
 800eff4:	c303      	stmia	r3!, {r0, r1}
        area_tmp.y1 += r;
 800eff6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800effa:	4423      	add	r3, r4
 800effc:	f8ad 3002 	strh.w	r3, [sp, #2]
        area_tmp.y2 -= r;
 800f000:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 800f004:	4669      	mov	r1, sp
        area_tmp.y2 -= r;
 800f006:	1b1c      	subs	r4, r3, r4
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 800f008:	4630      	mov	r0, r6
        area_tmp.y2 -= r;
 800f00a:	f8ad 4006 	strh.w	r4, [sp, #6]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 800f00e:	f004 fd83 	bl	8013b18 <lv_area_is_in>
 800f012:	b900      	cbnz	r0, 800f016 <lv_obj_design+0x80>
        if(lv_area_is_in(mask_p, &obj->coords) == false) return false;
 800f014:	2000      	movs	r0, #0
}
 800f016:	b002      	add	sp, #8
 800f018:	bd70      	pop	{r4, r5, r6, pc}
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 800f01a:	b95a      	cbnz	r2, 800f034 <lv_obj_design+0x9e>
        const lv_style_t * style = lv_obj_get_style(obj);
 800f01c:	f7ff ff2c 	bl	800ee78 <lv_obj_get_style>
 800f020:	4602      	mov	r2, r0
        lv_draw_rect(&obj->coords, mask_p, style, lv_obj_get_opa_scale(obj));
 800f022:	4620      	mov	r0, r4
 800f024:	f7ff ffab 	bl	800ef7e <lv_obj_get_opa_scale>
 800f028:	4631      	mov	r1, r6
 800f02a:	4603      	mov	r3, r0
 800f02c:	f104 0010 	add.w	r0, r4, #16
 800f030:	f001 ff32 	bl	8010e98 <lv_draw_rect>
    return true;
 800f034:	2001      	movs	r0, #1
 800f036:	e7ee      	b.n	800f016 <lv_obj_design+0x80>

0800f038 <lv_obj_is_protected>:
    return (obj->protect & prot) == 0 ? false : true;
 800f038:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 800f03c:	4219      	tst	r1, r3
}
 800f03e:	bf14      	ite	ne
 800f040:	2001      	movne	r0, #1
 800f042:	2000      	moveq	r0, #0
 800f044:	4770      	bx	lr

0800f046 <lv_obj_get_signal_cb>:
}
 800f046:	69c0      	ldr	r0, [r0, #28]
 800f048:	4770      	bx	lr

0800f04a <lv_obj_get_design_cb>:
}
 800f04a:	6a00      	ldr	r0, [r0, #32]
 800f04c:	4770      	bx	lr

0800f04e <lv_obj_get_ext_attr>:
}
 800f04e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800f050:	4770      	bx	lr

0800f052 <lv_obj_get_user_data>:
}
 800f052:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800f054:	4770      	bx	lr

0800f056 <lv_obj_set_user_data>:
    memcpy(&obj->user_data, &data, sizeof(lv_obj_user_data_t));
 800f056:	6441      	str	r1, [r0, #68]	; 0x44
 800f058:	4770      	bx	lr

0800f05a <lv_obj_get_group>:
}
 800f05a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800f05c:	4770      	bx	lr

0800f05e <lv_obj_is_focused>:
{
 800f05e:	b510      	push	{r4, lr}
 800f060:	4604      	mov	r4, r0
    if(obj->group_p) {
 800f062:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800f064:	b120      	cbz	r0, 800f070 <lv_obj_is_focused+0x12>
        if(lv_group_get_focused(obj->group_p) == obj) return true;
 800f066:	f7fe ff8d 	bl	800df84 <lv_group_get_focused>
 800f06a:	1a23      	subs	r3, r4, r0
 800f06c:	4258      	negs	r0, r3
 800f06e:	4158      	adcs	r0, r3
}
 800f070:	bd10      	pop	{r4, pc}
	...

0800f074 <lv_refr_vdb_flush>:

/**
 * Flush the content of the VDB
 */
static void lv_refr_vdb_flush(void)
{
 800f074:	b538      	push	{r3, r4, r5, lr}
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 800f076:	4d10      	ldr	r5, [pc, #64]	; (800f0b8 <lv_refr_vdb_flush+0x44>)
 800f078:	6828      	ldr	r0, [r5, #0]
 800f07a:	f004 fb49 	bl	8013710 <lv_disp_get_buf>
 800f07e:	4604      	mov	r4, r0

    /*In double buffered mode wait until the other buffer is flushed before flushing the current
     * one*/
    if(lv_disp_is_double_buf(disp_refr)) {
 800f080:	6828      	ldr	r0, [r5, #0]
 800f082:	f004 fb47 	bl	8013714 <lv_disp_is_double_buf>
 800f086:	b110      	cbz	r0, 800f08e <lv_refr_vdb_flush+0x1a>
        while(vdb->flushing)
 800f088:	69a3      	ldr	r3, [r4, #24]
 800f08a:	07db      	lsls	r3, r3, #31
 800f08c:	d4fc      	bmi.n	800f088 <lv_refr_vdb_flush+0x14>
            ;
    }

    vdb->flushing = 1;
 800f08e:	7e23      	ldrb	r3, [r4, #24]
    return disp_refr;
 800f090:	6828      	ldr	r0, [r5, #0]
    vdb->flushing = 1;
 800f092:	f043 0301 	orr.w	r3, r3, #1
 800f096:	7623      	strb	r3, [r4, #24]

    /*Flush the rendered content to the display*/
    lv_disp_t * disp = lv_refr_get_disp_refreshing();
    if(disp->driver.flush_cb) disp->driver.flush_cb(&disp->driver, &vdb->area, vdb->buf_act);
 800f098:	68c3      	ldr	r3, [r0, #12]
 800f09a:	b11b      	cbz	r3, 800f0a4 <lv_refr_vdb_flush+0x30>
 800f09c:	68a2      	ldr	r2, [r4, #8]
 800f09e:	f104 0110 	add.w	r1, r4, #16
 800f0a2:	4798      	blx	r3

    if(vdb->buf1 && vdb->buf2) {
 800f0a4:	6823      	ldr	r3, [r4, #0]
 800f0a6:	b133      	cbz	r3, 800f0b6 <lv_refr_vdb_flush+0x42>
 800f0a8:	6862      	ldr	r2, [r4, #4]
 800f0aa:	b122      	cbz	r2, 800f0b6 <lv_refr_vdb_flush+0x42>
        if(vdb->buf_act == vdb->buf1)
 800f0ac:	68a1      	ldr	r1, [r4, #8]
            vdb->buf_act = vdb->buf2;
 800f0ae:	428b      	cmp	r3, r1
 800f0b0:	bf08      	it	eq
 800f0b2:	4613      	moveq	r3, r2
 800f0b4:	60a3      	str	r3, [r4, #8]
 800f0b6:	bd38      	pop	{r3, r4, r5, pc}
 800f0b8:	20005f6c 	.word	0x20005f6c

0800f0bc <lv_refr_get_top_obj>:
{
 800f0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0be:	460c      	mov	r4, r1
    if(lv_area_is_in(area_p, &obj->coords) && obj->hidden == 0) {
 800f0c0:	3110      	adds	r1, #16
{
 800f0c2:	4606      	mov	r6, r0
    if(lv_area_is_in(area_p, &obj->coords) && obj->hidden == 0) {
 800f0c4:	f004 fd28 	bl	8013b18 <lv_area_is_in>
 800f0c8:	b908      	cbnz	r0, 800f0ce <lv_refr_get_top_obj+0x12>
    lv_obj_t * found_p = NULL;
 800f0ca:	2000      	movs	r0, #0
 800f0cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(lv_area_is_in(area_p, &obj->coords) && obj->hidden == 0) {
 800f0ce:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800f0d2:	06db      	lsls	r3, r3, #27
 800f0d4:	d4f9      	bmi.n	800f0ca <lv_refr_get_top_obj+0xe>
        LV_LL_READ(obj->child_ll, i)
 800f0d6:	1d27      	adds	r7, r4, #4
 800f0d8:	4638      	mov	r0, r7
 800f0da:	f004 fdb9 	bl	8013c50 <lv_ll_get_head>
 800f0de:	4605      	mov	r5, r0
 800f0e0:	b998      	cbnz	r0, 800f10a <lv_refr_get_top_obj+0x4e>
            const lv_style_t * style = lv_obj_get_style(obj);
 800f0e2:	4620      	mov	r0, r4
 800f0e4:	f7ff fec8 	bl	800ee78 <lv_obj_get_style>
            if(style->body.opa == LV_OPA_COVER && obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK) != false &&
 800f0e8:	7a03      	ldrb	r3, [r0, #8]
 800f0ea:	2bff      	cmp	r3, #255	; 0xff
 800f0ec:	d1ed      	bne.n	800f0ca <lv_refr_get_top_obj+0xe>
 800f0ee:	6a23      	ldr	r3, [r4, #32]
 800f0f0:	2202      	movs	r2, #2
 800f0f2:	4631      	mov	r1, r6
 800f0f4:	4620      	mov	r0, r4
 800f0f6:	4798      	blx	r3
 800f0f8:	2800      	cmp	r0, #0
 800f0fa:	d0e6      	beq.n	800f0ca <lv_refr_get_top_obj+0xe>
               lv_obj_get_opa_scale(obj) == LV_OPA_COVER) {
 800f0fc:	4620      	mov	r0, r4
 800f0fe:	f7ff ff3e 	bl	800ef7e <lv_obj_get_opa_scale>
            if(style->body.opa == LV_OPA_COVER && obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK) != false &&
 800f102:	28ff      	cmp	r0, #255	; 0xff
 800f104:	d1e1      	bne.n	800f0ca <lv_refr_get_top_obj+0xe>
 800f106:	4620      	mov	r0, r4
    return found_p;
 800f108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            found_p = lv_refr_get_top_obj(area_p, i);
 800f10a:	4629      	mov	r1, r5
 800f10c:	4630      	mov	r0, r6
 800f10e:	f7ff ffd5 	bl	800f0bc <lv_refr_get_top_obj>
            if(found_p != NULL) {
 800f112:	b920      	cbnz	r0, 800f11e <lv_refr_get_top_obj+0x62>
        LV_LL_READ(obj->child_ll, i)
 800f114:	4629      	mov	r1, r5
 800f116:	4638      	mov	r0, r7
 800f118:	f004 fda0 	bl	8013c5c <lv_ll_get_next>
 800f11c:	e7df      	b.n	800f0de <lv_refr_get_top_obj+0x22>
}
 800f11e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f120 <lv_refr_obj>:
{
 800f120:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(obj->hidden != 0) return;
 800f122:	f890 6030 	ldrb.w	r6, [r0, #48]	; 0x30
 800f126:	f016 0610 	ands.w	r6, r6, #16
{
 800f12a:	b08b      	sub	sp, #44	; 0x2c
 800f12c:	4604      	mov	r4, r0
 800f12e:	460f      	mov	r7, r1
    if(obj->hidden != 0) return;
 800f130:	d139      	bne.n	800f1a6 <lv_refr_obj+0x86>
    lv_coord_t ext_size = obj->ext_draw_pad;
 800f132:	f9b0 5034 	ldrsh.w	r5, [r0, #52]	; 0x34
    lv_obj_get_coords(obj, &obj_area);
 800f136:	a904      	add	r1, sp, #16
 800f138:	f7ff fe7a 	bl	800ee30 <lv_obj_get_coords>
    obj_area.x1 -= ext_size;
 800f13c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800f140:	b2ab      	uxth	r3, r5
 800f142:	1ad2      	subs	r2, r2, r3
 800f144:	f8ad 2010 	strh.w	r2, [sp, #16]
    obj_area.y1 -= ext_size;
 800f148:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800f14c:	1ad2      	subs	r2, r2, r3
 800f14e:	f8ad 2012 	strh.w	r2, [sp, #18]
    obj_area.x2 += ext_size;
 800f152:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800f156:	441a      	add	r2, r3
 800f158:	f8ad 2014 	strh.w	r2, [sp, #20]
    obj_area.y2 += ext_size;
 800f15c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    union_ok = lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 800f160:	4639      	mov	r1, r7
    obj_area.y2 += ext_size;
 800f162:	4413      	add	r3, r2
    union_ok = lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 800f164:	a802      	add	r0, sp, #8
 800f166:	aa04      	add	r2, sp, #16
    obj_area.y2 += ext_size;
 800f168:	f8ad 3016 	strh.w	r3, [sp, #22]
    union_ok = lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 800f16c:	f004 fc6b 	bl	8013a46 <lv_area_intersect>
    if(union_ok != false) {
 800f170:	b1c8      	cbz	r0, 800f1a6 <lv_refr_obj+0x86>
        obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_MAIN);
 800f172:	4632      	mov	r2, r6
 800f174:	6a23      	ldr	r3, [r4, #32]
 800f176:	a902      	add	r1, sp, #8
 800f178:	4620      	mov	r0, r4
 800f17a:	4798      	blx	r3
        lv_obj_get_coords(obj, &obj_area);
 800f17c:	a904      	add	r1, sp, #16
 800f17e:	4620      	mov	r0, r4
 800f180:	f7ff fe56 	bl	800ee30 <lv_obj_get_coords>
        union_ok = lv_area_intersect(&obj_mask, mask_ori_p, &obj_area);
 800f184:	aa04      	add	r2, sp, #16
 800f186:	4639      	mov	r1, r7
 800f188:	4668      	mov	r0, sp
 800f18a:	f004 fc5c 	bl	8013a46 <lv_area_intersect>
        if(union_ok != false) {
 800f18e:	b128      	cbz	r0, 800f19c <lv_refr_obj+0x7c>
            LV_LL_READ_BACK(obj->child_ll, child_p)
 800f190:	1d26      	adds	r6, r4, #4
 800f192:	4630      	mov	r0, r6
 800f194:	f004 fd5f 	bl	8013c56 <lv_ll_get_tail>
 800f198:	4605      	mov	r5, r0
 800f19a:	b930      	cbnz	r0, 800f1aa <lv_refr_obj+0x8a>
        obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_POST);
 800f19c:	6a23      	ldr	r3, [r4, #32]
 800f19e:	2201      	movs	r2, #1
 800f1a0:	a902      	add	r1, sp, #8
 800f1a2:	4620      	mov	r0, r4
 800f1a4:	4798      	blx	r3
}
 800f1a6:	b00b      	add	sp, #44	; 0x2c
 800f1a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
                lv_obj_get_coords(child_p, &child_area);
 800f1aa:	a908      	add	r1, sp, #32
 800f1ac:	4628      	mov	r0, r5
 800f1ae:	f7ff fe3f 	bl	800ee30 <lv_obj_get_coords>
                child_area.x1 -= ext_size;
 800f1b2:	8eab      	ldrh	r3, [r5, #52]	; 0x34
 800f1b4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800f1b8:	1ad2      	subs	r2, r2, r3
 800f1ba:	f8ad 2020 	strh.w	r2, [sp, #32]
                child_area.y1 -= ext_size;
 800f1be:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 800f1c2:	1ad2      	subs	r2, r2, r3
 800f1c4:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
                child_area.x2 += ext_size;
 800f1c8:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800f1cc:	441a      	add	r2, r3
 800f1ce:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
                child_area.y2 += ext_size;
 800f1d2:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
                union_ok = lv_area_intersect(&mask_child, &obj_mask, &child_area);
 800f1d6:	4669      	mov	r1, sp
                child_area.y2 += ext_size;
 800f1d8:	4413      	add	r3, r2
                union_ok = lv_area_intersect(&mask_child, &obj_mask, &child_area);
 800f1da:	a806      	add	r0, sp, #24
 800f1dc:	aa08      	add	r2, sp, #32
                child_area.y2 += ext_size;
 800f1de:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
                union_ok = lv_area_intersect(&mask_child, &obj_mask, &child_area);
 800f1e2:	f004 fc30 	bl	8013a46 <lv_area_intersect>
                if(union_ok) {
 800f1e6:	b118      	cbz	r0, 800f1f0 <lv_refr_obj+0xd0>
                    lv_refr_obj(child_p, &mask_child);
 800f1e8:	a906      	add	r1, sp, #24
 800f1ea:	4628      	mov	r0, r5
 800f1ec:	f7ff ff98 	bl	800f120 <lv_refr_obj>
            LV_LL_READ_BACK(obj->child_ll, child_p)
 800f1f0:	4629      	mov	r1, r5
 800f1f2:	4630      	mov	r0, r6
 800f1f4:	f004 fd37 	bl	8013c66 <lv_ll_get_prev>
 800f1f8:	e7ce      	b.n	800f198 <lv_refr_obj+0x78>
	...

0800f1fc <lv_refr_obj_and_children>:
{
 800f1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1fe:	460e      	mov	r6, r1
    if(top_p == NULL) top_p = lv_disp_get_scr_act(disp_refr);
 800f200:	4605      	mov	r5, r0
 800f202:	b920      	cbnz	r0, 800f20e <lv_refr_obj_and_children+0x12>
 800f204:	4b12      	ldr	r3, [pc, #72]	; (800f250 <lv_refr_obj_and_children+0x54>)
 800f206:	6818      	ldr	r0, [r3, #0]
 800f208:	f7fe fd6d 	bl	800dce6 <lv_disp_get_scr_act>
 800f20c:	4605      	mov	r5, r0
    lv_refr_obj(top_p, mask_p);
 800f20e:	4628      	mov	r0, r5
 800f210:	4631      	mov	r1, r6
 800f212:	f7ff ff85 	bl	800f120 <lv_refr_obj>
    par = lv_obj_get_parent(top_p);
 800f216:	4628      	mov	r0, r5
 800f218:	f7ff fddc 	bl	800edd4 <lv_obj_get_parent>
        par = lv_obj_get_parent(par);
 800f21c:	4604      	mov	r4, r0
    while(par != NULL) {
 800f21e:	b900      	cbnz	r0, 800f222 <lv_refr_obj_and_children+0x26>
}
 800f220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_obj_t * i = lv_ll_get_prev(&(par->child_ll), border_p);
 800f222:	1d27      	adds	r7, r4, #4
            i = lv_ll_get_prev(&(par->child_ll), i);
 800f224:	4629      	mov	r1, r5
 800f226:	4638      	mov	r0, r7
 800f228:	f004 fd1d 	bl	8013c66 <lv_ll_get_prev>
 800f22c:	4605      	mov	r5, r0
        while(i != NULL) {
 800f22e:	b948      	cbnz	r0, 800f244 <lv_refr_obj_and_children+0x48>
        par->design_cb(par, mask_p, LV_DESIGN_DRAW_POST);
 800f230:	6a23      	ldr	r3, [r4, #32]
 800f232:	2201      	movs	r2, #1
 800f234:	4631      	mov	r1, r6
 800f236:	4620      	mov	r0, r4
 800f238:	4798      	blx	r3
        par = lv_obj_get_parent(par);
 800f23a:	4620      	mov	r0, r4
 800f23c:	f7ff fdca 	bl	800edd4 <lv_obj_get_parent>
 800f240:	4625      	mov	r5, r4
 800f242:	e7eb      	b.n	800f21c <lv_refr_obj_and_children+0x20>
            lv_refr_obj(i, mask_p);
 800f244:	4631      	mov	r1, r6
 800f246:	4628      	mov	r0, r5
 800f248:	f7ff ff6a 	bl	800f120 <lv_refr_obj>
 800f24c:	e7ea      	b.n	800f224 <lv_refr_obj_and_children+0x28>
 800f24e:	bf00      	nop
 800f250:	20005f6c 	.word	0x20005f6c

0800f254 <lv_refr_area_part>:
{
 800f254:	b573      	push	{r0, r1, r4, r5, r6, lr}
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 800f256:	4c18      	ldr	r4, [pc, #96]	; (800f2b8 <lv_refr_area_part+0x64>)
{
 800f258:	4606      	mov	r6, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 800f25a:	6820      	ldr	r0, [r4, #0]
 800f25c:	f004 fa58 	bl	8013710 <lv_disp_get_buf>
 800f260:	4605      	mov	r5, r0
    if(lv_disp_is_double_buf(disp_refr) == false) {
 800f262:	6820      	ldr	r0, [r4, #0]
 800f264:	f004 fa56 	bl	8013714 <lv_disp_is_double_buf>
 800f268:	b910      	cbnz	r0, 800f270 <lv_refr_area_part+0x1c>
        while(vdb->flushing)
 800f26a:	69ab      	ldr	r3, [r5, #24]
 800f26c:	07db      	lsls	r3, r3, #31
 800f26e:	d4fc      	bmi.n	800f26a <lv_refr_area_part+0x16>
    lv_area_intersect(&start_mask, area_p, &vdb->area);
 800f270:	f105 0210 	add.w	r2, r5, #16
 800f274:	4631      	mov	r1, r6
 800f276:	4668      	mov	r0, sp
 800f278:	f004 fbe5 	bl	8013a46 <lv_area_intersect>
    top_p = lv_refr_get_top_obj(&start_mask, lv_disp_get_scr_act(disp_refr));
 800f27c:	6820      	ldr	r0, [r4, #0]
 800f27e:	f7fe fd32 	bl	800dce6 <lv_disp_get_scr_act>
 800f282:	4601      	mov	r1, r0
 800f284:	4668      	mov	r0, sp
 800f286:	f7ff ff19 	bl	800f0bc <lv_refr_get_top_obj>
    lv_refr_obj_and_children(top_p, &start_mask);
 800f28a:	4669      	mov	r1, sp
 800f28c:	f7ff ffb6 	bl	800f1fc <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_disp_get_layer_top(disp_refr), &start_mask);
 800f290:	6820      	ldr	r0, [r4, #0]
 800f292:	f7fe fd39 	bl	800dd08 <lv_disp_get_layer_top>
 800f296:	4669      	mov	r1, sp
 800f298:	f7ff ffb0 	bl	800f1fc <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_disp_get_layer_sys(disp_refr), &start_mask);
 800f29c:	6820      	ldr	r0, [r4, #0]
 800f29e:	f7fe fd3a 	bl	800dd16 <lv_disp_get_layer_sys>
 800f2a2:	4669      	mov	r1, sp
 800f2a4:	f7ff ffaa 	bl	800f1fc <lv_refr_obj_and_children>
    if(lv_disp_is_true_double_buf(disp_refr) == false) {
 800f2a8:	6820      	ldr	r0, [r4, #0]
 800f2aa:	f004 fa3b 	bl	8013724 <lv_disp_is_true_double_buf>
 800f2ae:	b908      	cbnz	r0, 800f2b4 <lv_refr_area_part+0x60>
        lv_refr_vdb_flush();
 800f2b0:	f7ff fee0 	bl	800f074 <lv_refr_vdb_flush>
}
 800f2b4:	b002      	add	sp, #8
 800f2b6:	bd70      	pop	{r4, r5, r6, pc}
 800f2b8:	20005f6c 	.word	0x20005f6c

0800f2bc <lv_refr_init>:
{
 800f2bc:	4770      	bx	lr
	...

0800f2c0 <lv_inv_area>:
{
 800f2c0:	b530      	push	{r4, r5, lr}
 800f2c2:	460d      	mov	r5, r1
 800f2c4:	b085      	sub	sp, #20
    if(!disp) disp = lv_disp_get_default();
 800f2c6:	4604      	mov	r4, r0
 800f2c8:	b920      	cbnz	r0, 800f2d4 <lv_inv_area+0x14>
 800f2ca:	f004 f9eb 	bl	80136a4 <lv_disp_get_default>
    if(!disp) return;
 800f2ce:	4604      	mov	r4, r0
 800f2d0:	2800      	cmp	r0, #0
 800f2d2:	d046      	beq.n	800f362 <lv_inv_area+0xa2>
    if(area_p == NULL) {
 800f2d4:	b935      	cbnz	r5, 800f2e4 <lv_inv_area+0x24>
        disp->inv_p = 0;
 800f2d6:	f8b4 3160 	ldrh.w	r3, [r4, #352]	; 0x160
 800f2da:	f365 0309 	bfi	r3, r5, #0, #10
        disp->inv_p++;
 800f2de:	f8a4 3160 	strh.w	r3, [r4, #352]	; 0x160
 800f2e2:	e03e      	b.n	800f362 <lv_inv_area+0xa2>
    scr_area.x1 = 0;
 800f2e4:	2300      	movs	r3, #0
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 800f2e6:	4620      	mov	r0, r4
    scr_area.x1 = 0;
 800f2e8:	f8ad 3000 	strh.w	r3, [sp]
    scr_area.y1 = 0;
 800f2ec:	f8ad 3002 	strh.w	r3, [sp, #2]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 800f2f0:	f004 f9de 	bl	80136b0 <lv_disp_get_hor_res>
 800f2f4:	3801      	subs	r0, #1
 800f2f6:	f8ad 0004 	strh.w	r0, [sp, #4]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
 800f2fa:	4620      	mov	r0, r4
 800f2fc:	f004 f9e8 	bl	80136d0 <lv_disp_get_ver_res>
 800f300:	3801      	subs	r0, #1
 800f302:	f8ad 0006 	strh.w	r0, [sp, #6]
    suc = lv_area_intersect(&com_area, area_p, &scr_area);
 800f306:	466a      	mov	r2, sp
 800f308:	4629      	mov	r1, r5
 800f30a:	a802      	add	r0, sp, #8
 800f30c:	f004 fb9b 	bl	8013a46 <lv_area_intersect>
    if(suc != false) {
 800f310:	b338      	cbz	r0, 800f362 <lv_inv_area+0xa2>
        if(disp->driver.rounder_cb) disp->driver.rounder_cb(&disp_refr->driver, &com_area);
 800f312:	6923      	ldr	r3, [r4, #16]
 800f314:	b11b      	cbz	r3, 800f31e <lv_inv_area+0x5e>
 800f316:	4a19      	ldr	r2, [pc, #100]	; (800f37c <lv_inv_area+0xbc>)
 800f318:	a902      	add	r1, sp, #8
 800f31a:	6810      	ldr	r0, [r2, #0]
 800f31c:	4798      	blx	r3
{
 800f31e:	2500      	movs	r5, #0
        for(i = 0; i < disp->inv_p; i++) {
 800f320:	f8b4 2160 	ldrh.w	r2, [r4, #352]	; 0x160
 800f324:	b2a9      	uxth	r1, r5
 800f326:	f3c2 0309 	ubfx	r3, r2, #0, #10
 800f32a:	4299      	cmp	r1, r3
 800f32c:	db10      	blt.n	800f350 <lv_inv_area+0x90>
        if(disp->inv_p < LV_INV_BUF_SIZE) {
 800f32e:	2b1f      	cmp	r3, #31
 800f330:	dc19      	bgt.n	800f366 <lv_inv_area+0xa6>
            lv_area_copy(&disp->inv_areas[disp->inv_p], &com_area);
 800f332:	f103 0208 	add.w	r2, r3, #8
 800f336:	ab02      	add	r3, sp, #8
 800f338:	cb03      	ldmia	r3!, {r0, r1}
 800f33a:	eb04 05c2 	add.w	r5, r4, r2, lsl #3
 800f33e:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 800f342:	6069      	str	r1, [r5, #4]
        disp->inv_p++;
 800f344:	f8b4 3160 	ldrh.w	r3, [r4, #352]	; 0x160
 800f348:	1c5a      	adds	r2, r3, #1
 800f34a:	f362 0309 	bfi	r3, r2, #0, #10
 800f34e:	e7c6      	b.n	800f2de <lv_inv_area+0x1e>
            if(lv_area_is_in(&com_area, &disp->inv_areas[i]) != false) return;
 800f350:	3108      	adds	r1, #8
 800f352:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800f356:	a802      	add	r0, sp, #8
 800f358:	f004 fbde 	bl	8013b18 <lv_area_is_in>
 800f35c:	3501      	adds	r5, #1
 800f35e:	2800      	cmp	r0, #0
 800f360:	d0de      	beq.n	800f320 <lv_inv_area+0x60>
}
 800f362:	b005      	add	sp, #20
 800f364:	bd30      	pop	{r4, r5, pc}
            disp->inv_p = 0;
 800f366:	4613      	mov	r3, r2
 800f368:	f36f 0309 	bfc	r3, #0, #10
 800f36c:	f8a4 3160 	strh.w	r3, [r4, #352]	; 0x160
 800f370:	466b      	mov	r3, sp
 800f372:	cb03      	ldmia	r3!, {r0, r1}
 800f374:	6420      	str	r0, [r4, #64]	; 0x40
 800f376:	6461      	str	r1, [r4, #68]	; 0x44
 800f378:	e7e4      	b.n	800f344 <lv_inv_area+0x84>
 800f37a:	bf00      	nop
 800f37c:	20005f6c 	.word	0x20005f6c

0800f380 <lv_refr_get_disp_refreshing>:
}
 800f380:	4b01      	ldr	r3, [pc, #4]	; (800f388 <lv_refr_get_disp_refreshing+0x8>)
 800f382:	6818      	ldr	r0, [r3, #0]
 800f384:	4770      	bx	lr
 800f386:	bf00      	nop
 800f388:	20005f6c 	.word	0x20005f6c

0800f38c <lv_disp_refr_task>:
{
 800f38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f390:	b089      	sub	sp, #36	; 0x24
 800f392:	4605      	mov	r5, r0
    uint32_t start = lv_tick_get();
 800f394:	f004 f9ec 	bl	8013770 <lv_tick_get>
    disp_refr = task->user_data;
 800f398:	4cb6      	ldr	r4, [pc, #728]	; (800f674 <lv_disp_refr_task+0x2e8>)
 800f39a:	68eb      	ldr	r3, [r5, #12]
    uint32_t start = lv_tick_get();
 800f39c:	9002      	str	r0, [sp, #8]
    disp_refr = task->user_data;
 800f39e:	6023      	str	r3, [r4, #0]
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 800f3a0:	2700      	movs	r7, #0
                disp_refr->inv_area_joined[join_from] = 1;
 800f3a2:	f04f 0801 	mov.w	r8, #1
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 800f3a6:	6823      	ldr	r3, [r4, #0]
 800f3a8:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
 800f3ac:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800f3b0:	4297      	cmp	r7, r2
 800f3b2:	d32e      	bcc.n	800f412 <lv_disp_refr_task+0x86>
    px_num = 0;
 800f3b4:	4bb0      	ldr	r3, [pc, #704]	; (800f678 <lv_disp_refr_task+0x2ec>)
 800f3b6:	9300      	str	r3, [sp, #0]
 800f3b8:	2600      	movs	r6, #0
 800f3ba:	601e      	str	r6, [r3, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
 800f3bc:	6825      	ldr	r5, [r4, #0]
 800f3be:	f8b5 3160 	ldrh.w	r3, [r5, #352]	; 0x160
 800f3c2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800f3c6:	4296      	cmp	r6, r2
 800f3c8:	d367      	bcc.n	800f49a <lv_disp_refr_task+0x10e>
    if(disp_refr->inv_p != 0) {
 800f3ca:	b1ea      	cbz	r2, 800f408 <lv_disp_refr_task+0x7c>
        if(lv_disp_is_true_double_buf(disp_refr)) {
 800f3cc:	4628      	mov	r0, r5
 800f3ce:	f004 f9a9 	bl	8013724 <lv_disp_is_true_double_buf>
 800f3d2:	2800      	cmp	r0, #0
 800f3d4:	f040 8126 	bne.w	800f624 <lv_disp_refr_task+0x298>
        memset(disp_refr->inv_areas, 0, sizeof(disp_refr->inv_areas));
 800f3d8:	6824      	ldr	r4, [r4, #0]
 800f3da:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f3de:	2100      	movs	r1, #0
 800f3e0:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800f3e4:	f00a f8a1 	bl	801952a <memset>
        memset(disp_refr->inv_area_joined, 0, sizeof(disp_refr->inv_area_joined));
 800f3e8:	2220      	movs	r2, #32
 800f3ea:	2100      	movs	r1, #0
 800f3ec:	f504 70a0 	add.w	r0, r4, #320	; 0x140
 800f3f0:	f00a f89b 	bl	801952a <memset>
        disp_refr->inv_p = 0;
 800f3f4:	f8b4 3160 	ldrh.w	r3, [r4, #352]	; 0x160
        if(disp_refr->driver.monitor_cb) {
 800f3f8:	69a5      	ldr	r5, [r4, #24]
        disp_refr->inv_p = 0;
 800f3fa:	f36f 0309 	bfc	r3, #0, #10
 800f3fe:	f8a4 3160 	strh.w	r3, [r4, #352]	; 0x160
        if(disp_refr->driver.monitor_cb) {
 800f402:	2d00      	cmp	r5, #0
 800f404:	f040 815d 	bne.w	800f6c2 <lv_disp_refr_task+0x336>
    lv_draw_free_buf();
 800f408:	f000 fd40 	bl	800fe8c <lv_draw_free_buf>
}
 800f40c:	b009      	add	sp, #36	; 0x24
 800f40e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
 800f412:	443b      	add	r3, r7
 800f414:	f893 5140 	ldrb.w	r5, [r3, #320]	; 0x140
 800f418:	b94d      	cbnz	r5, 800f42e <lv_disp_refr_task+0xa2>
 800f41a:	f107 0608 	add.w	r6, r7, #8
 800f41e:	00f6      	lsls	r6, r6, #3
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 800f420:	6820      	ldr	r0, [r4, #0]
 800f422:	f8b0 3160 	ldrh.w	r3, [r0, #352]	; 0x160
 800f426:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f42a:	429d      	cmp	r5, r3
 800f42c:	d301      	bcc.n	800f432 <lv_disp_refr_task+0xa6>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 800f42e:	3701      	adds	r7, #1
 800f430:	e7b9      	b.n	800f3a6 <lv_disp_refr_task+0x1a>
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
 800f432:	1943      	adds	r3, r0, r5
 800f434:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800f438:	bb6b      	cbnz	r3, 800f496 <lv_disp_refr_task+0x10a>
 800f43a:	42af      	cmp	r7, r5
 800f43c:	d02b      	beq.n	800f496 <lv_disp_refr_task+0x10a>
 800f43e:	f105 0908 	add.w	r9, r5, #8
 800f442:	ea4f 09c9 	mov.w	r9, r9, lsl #3
            if(lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
 800f446:	eb00 0109 	add.w	r1, r0, r9
 800f44a:	4430      	add	r0, r6
 800f44c:	f004 fb47 	bl	8013ade <lv_area_is_on>
 800f450:	b308      	cbz	r0, 800f496 <lv_disp_refr_task+0x10a>
            lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
 800f452:	6821      	ldr	r1, [r4, #0]
 800f454:	a806      	add	r0, sp, #24
 800f456:	eb01 0209 	add.w	r2, r1, r9
 800f45a:	4431      	add	r1, r6
 800f45c:	f004 fb1d 	bl	8013a9a <lv_area_join>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 800f460:	a806      	add	r0, sp, #24
 800f462:	f004 fae2 	bl	8013a2a <lv_area_get_size>
 800f466:	4683      	mov	fp, r0
 800f468:	6820      	ldr	r0, [r4, #0]
 800f46a:	4430      	add	r0, r6
 800f46c:	f004 fadd 	bl	8013a2a <lv_area_get_size>
 800f470:	4682      	mov	sl, r0
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
 800f472:	6820      	ldr	r0, [r4, #0]
 800f474:	4448      	add	r0, r9
 800f476:	f004 fad8 	bl	8013a2a <lv_area_get_size>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 800f47a:	4450      	add	r0, sl
 800f47c:	4583      	cmp	fp, r0
 800f47e:	d20a      	bcs.n	800f496 <lv_disp_refr_task+0x10a>
 800f480:	aa06      	add	r2, sp, #24
 800f482:	ca03      	ldmia	r2!, {r0, r1}
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
 800f484:	6823      	ldr	r3, [r4, #0]
 800f486:	5198      	str	r0, [r3, r6]
 800f488:	eb03 0e06 	add.w	lr, r3, r6
                disp_refr->inv_area_joined[join_from] = 1;
 800f48c:	442b      	add	r3, r5
 800f48e:	f8ce 1004 	str.w	r1, [lr, #4]
 800f492:	f883 8140 	strb.w	r8, [r3, #320]	; 0x140
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 800f496:	3501      	adds	r5, #1
 800f498:	e7c2      	b.n	800f420 <lv_disp_refr_task+0x94>
        if(disp_refr->inv_area_joined[i] == 0) {
 800f49a:	19ab      	adds	r3, r5, r6
 800f49c:	f893 7140 	ldrb.w	r7, [r3, #320]	; 0x140
 800f4a0:	2f00      	cmp	r7, #0
 800f4a2:	d17c      	bne.n	800f59e <lv_disp_refr_task+0x212>
 800f4a4:	f106 0b08 	add.w	fp, r6, #8
 800f4a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
    if(lv_disp_is_true_double_buf(disp_refr)) {
 800f4ac:	4628      	mov	r0, r5
 800f4ae:	9301      	str	r3, [sp, #4]
            lv_refr_area(&disp_refr->inv_areas[i]);
 800f4b0:	eb05 0903 	add.w	r9, r5, r3
    if(lv_disp_is_true_double_buf(disp_refr)) {
 800f4b4:	f004 f936 	bl	8013724 <lv_disp_is_true_double_buf>
 800f4b8:	b198      	cbz	r0, 800f4e2 <lv_disp_refr_task+0x156>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 800f4ba:	6820      	ldr	r0, [r4, #0]
 800f4bc:	f004 f928 	bl	8013710 <lv_disp_get_buf>
 800f4c0:	4605      	mov	r5, r0
        vdb->area.x1        = 0;
 800f4c2:	8207      	strh	r7, [r0, #16]
        vdb->area.x2        = lv_disp_get_hor_res(disp_refr) - 1;
 800f4c4:	6820      	ldr	r0, [r4, #0]
 800f4c6:	f004 f8f3 	bl	80136b0 <lv_disp_get_hor_res>
 800f4ca:	3801      	subs	r0, #1
 800f4cc:	82a8      	strh	r0, [r5, #20]
        vdb->area.y1        = 0;
 800f4ce:	826f      	strh	r7, [r5, #18]
        vdb->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
 800f4d0:	6820      	ldr	r0, [r4, #0]
 800f4d2:	f004 f8fd 	bl	80136d0 <lv_disp_get_ver_res>
 800f4d6:	3801      	subs	r0, #1
 800f4d8:	82e8      	strh	r0, [r5, #22]
            lv_refr_area_part(area_p);
 800f4da:	4648      	mov	r0, r9
 800f4dc:	f7ff feba 	bl	800f254 <lv_refr_area_part>
 800f4e0:	e051      	b.n	800f586 <lv_disp_refr_task+0x1fa>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 800f4e2:	6820      	ldr	r0, [r4, #0]
 800f4e4:	f004 f914 	bl	8013710 <lv_disp_get_buf>
    return area_p->x2 - area_p->x1 + 1;
 800f4e8:	f8b9 a004 	ldrh.w	sl, [r9, #4]
 800f4ec:	f835 803b 	ldrh.w	r8, [r5, fp, lsl #3]
 800f4f0:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
    return area_p->y2 - area_p->y1 + 1;
 800f4f4:	f8b9 b002 	ldrh.w	fp, [r9, #2]
 800f4f8:	9303      	str	r3, [sp, #12]
 800f4fa:	4607      	mov	r7, r0
    return area_p->x2 - area_p->x1 + 1;
 800f4fc:	f10a 0a01 	add.w	sl, sl, #1
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? y2 = lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 800f500:	6820      	ldr	r0, [r4, #0]
 800f502:	ebaa 0a08 	sub.w	sl, sl, r8
    return area_p->y2 - area_p->y1 + 1;
 800f506:	f103 0801 	add.w	r8, r3, #1
 800f50a:	f004 f8e1 	bl	80136d0 <lv_disp_get_ver_res>
        lv_coord_t y2 =
 800f50e:	9b03      	ldr	r3, [sp, #12]
 800f510:	eba8 080b 	sub.w	r8, r8, fp
 800f514:	4283      	cmp	r3, r0
    return area_p->x2 - area_p->x1 + 1;
 800f516:	fa0f fa8a 	sxth.w	sl, sl
    return area_p->y2 - area_p->y1 + 1;
 800f51a:	fa0f fb88 	sxth.w	fp, r8
 800f51e:	db40      	blt.n	800f5a2 <lv_disp_refr_task+0x216>
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? y2 = lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 800f520:	6820      	ldr	r0, [r4, #0]
 800f522:	f004 f8d5 	bl	80136d0 <lv_disp_get_ver_res>
 800f526:	3801      	subs	r0, #1
 800f528:	b203      	sxth	r3, r0
        int32_t max_row = (uint32_t)vdb->size / w;
 800f52a:	68fa      	ldr	r2, [r7, #12]
 800f52c:	fbb2 f8fa 	udiv	r8, r2, sl
        if(disp_refr->driver.rounder_cb) {
 800f530:	6822      	ldr	r2, [r4, #0]
 800f532:	6912      	ldr	r2, [r2, #16]
 800f534:	45d8      	cmp	r8, fp
 800f536:	bfa8      	it	ge
 800f538:	46d8      	movge	r8, fp
 800f53a:	2a00      	cmp	r2, #0
 800f53c:	d038      	beq.n	800f5b0 <lv_disp_refr_task+0x224>
            tmp.x1 = 0;
 800f53e:	f04f 0200 	mov.w	r2, #0
            lv_coord_t y_tmp = max_row - 1;
 800f542:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
            tmp.x1 = 0;
 800f546:	f8ad 2018 	strh.w	r2, [sp, #24]
            tmp.x2 = 0;
 800f54a:	f8ad 201c 	strh.w	r2, [sp, #28]
            tmp.y1 = 0;
 800f54e:	f8ad 201a 	strh.w	r2, [sp, #26]
            lv_coord_t y_tmp = max_row - 1;
 800f552:	fa0f fa8a 	sxth.w	sl, sl
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
 800f556:	6820      	ldr	r0, [r4, #0]
                tmp.y2 = y_tmp;
 800f558:	f8ad a01e 	strh.w	sl, [sp, #30]
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
 800f55c:	6902      	ldr	r2, [r0, #16]
 800f55e:	9303      	str	r3, [sp, #12]
 800f560:	a906      	add	r1, sp, #24
 800f562:	4790      	blx	r2
 800f564:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 800f568:	f8bd 201a 	ldrh.w	r2, [sp, #26]
                if(lv_area_get_height(&tmp) <= max_row) break;
 800f56c:	9b03      	ldr	r3, [sp, #12]
 800f56e:	3101      	adds	r1, #1
 800f570:	1a8a      	subs	r2, r1, r2
 800f572:	b212      	sxth	r2, r2
 800f574:	4542      	cmp	r2, r8
 800f576:	dd17      	ble.n	800f5a8 <lv_disp_refr_task+0x21c>
 800f578:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f57c:	fa0f fa8a 	sxth.w	sl, sl
            } while(y_tmp != 0);
 800f580:	f1ba 0f00 	cmp.w	sl, #0
 800f584:	d1e7      	bne.n	800f556 <lv_disp_refr_task+0x1ca>
            if(disp_refr->driver.monitor_cb) px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
 800f586:	6820      	ldr	r0, [r4, #0]
 800f588:	6983      	ldr	r3, [r0, #24]
 800f58a:	b143      	cbz	r3, 800f59e <lv_disp_refr_task+0x212>
 800f58c:	9b01      	ldr	r3, [sp, #4]
 800f58e:	4418      	add	r0, r3
 800f590:	f004 fa4b 	bl	8013a2a <lv_area_get_size>
 800f594:	9b00      	ldr	r3, [sp, #0]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	4418      	add	r0, r3
 800f59a:	9b00      	ldr	r3, [sp, #0]
 800f59c:	6018      	str	r0, [r3, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
 800f59e:	3601      	adds	r6, #1
 800f5a0:	e70c      	b.n	800f3bc <lv_disp_refr_task+0x30>
        lv_coord_t y2 =
 800f5a2:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 800f5a6:	e7c0      	b.n	800f52a <lv_disp_refr_task+0x19e>
            if(y_tmp == 0) {
 800f5a8:	f1ba 0f00 	cmp.w	sl, #0
 800f5ac:	d0eb      	beq.n	800f586 <lv_disp_refr_task+0x1fa>
                max_row = tmp.y2 + 1;
 800f5ae:	4688      	mov	r8, r1
 800f5b0:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
            vdb->area.y2 = row + max_row - 1;
 800f5b4:	fa1f f288 	uxth.w	r2, r8
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 800f5b8:	f9b5 a042 	ldrsh.w	sl, [r5, #66]	; 0x42
        lv_coord_t row_last = 0;
 800f5bc:	f04f 0b00 	mov.w	fp, #0
 800f5c0:	1e51      	subs	r1, r2, #1
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 800f5c2:	eb0a 0008 	add.w	r0, sl, r8
 800f5c6:	3801      	subs	r0, #1
 800f5c8:	4298      	cmp	r0, r3
 800f5ca:	dd0b      	ble.n	800f5e4 <lv_disp_refr_task+0x258>
        if(y2 != row_last) {
 800f5cc:	455b      	cmp	r3, fp
 800f5ce:	d0da      	beq.n	800f586 <lv_disp_refr_task+0x1fa>
            vdb->area.x1 = area_p->x1;
 800f5d0:	f9b5 2040 	ldrsh.w	r2, [r5, #64]	; 0x40
 800f5d4:	823a      	strh	r2, [r7, #16]
            vdb->area.x2 = area_p->x2;
 800f5d6:	f9b5 2044 	ldrsh.w	r2, [r5, #68]	; 0x44
 800f5da:	82ba      	strh	r2, [r7, #20]
            vdb->area.y1 = row;
 800f5dc:	f8a7 a012 	strh.w	sl, [r7, #18]
            vdb->area.y2 = y2;
 800f5e0:	82fb      	strh	r3, [r7, #22]
 800f5e2:	e77a      	b.n	800f4da <lv_disp_refr_task+0x14e>
            vdb->area.x1 = area_p->x1;
 800f5e4:	f9b5 0040 	ldrsh.w	r0, [r5, #64]	; 0x40
 800f5e8:	8238      	strh	r0, [r7, #16]
            vdb->area.x2 = area_p->x2;
 800f5ea:	f9b5 0044 	ldrsh.w	r0, [r5, #68]	; 0x44
            vdb->area.y1 = row;
 800f5ee:	f8a7 a012 	strh.w	sl, [r7, #18]
 800f5f2:	fa1f fa8a 	uxth.w	sl, sl
 800f5f6:	eb0a 0b01 	add.w	fp, sl, r1
 800f5fa:	fa0f fb8b 	sxth.w	fp, fp
            vdb->area.y2 = row + max_row - 1;
 800f5fe:	459b      	cmp	fp, r3
 800f600:	bfa8      	it	ge
 800f602:	469b      	movge	fp, r3
            vdb->area.x2 = area_p->x2;
 800f604:	82b8      	strh	r0, [r7, #20]
            vdb->area.y2 = row + max_row - 1;
 800f606:	f8a7 b016 	strh.w	fp, [r7, #22]
            lv_refr_area_part(area_p);
 800f60a:	4648      	mov	r0, r9
 800f60c:	9205      	str	r2, [sp, #20]
 800f60e:	9104      	str	r1, [sp, #16]
            vdb->area.y2 = row + max_row - 1;
 800f610:	9303      	str	r3, [sp, #12]
            lv_refr_area_part(area_p);
 800f612:	f7ff fe1f 	bl	800f254 <lv_refr_area_part>
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 800f616:	9a05      	ldr	r2, [sp, #20]
 800f618:	9904      	ldr	r1, [sp, #16]
 800f61a:	9b03      	ldr	r3, [sp, #12]
 800f61c:	4492      	add	sl, r2
 800f61e:	fa0f fa8a 	sxth.w	sl, sl
 800f622:	e7ce      	b.n	800f5c2 <lv_disp_refr_task+0x236>
            lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 800f624:	6820      	ldr	r0, [r4, #0]
 800f626:	f004 f873 	bl	8013710 <lv_disp_get_buf>
 800f62a:	4605      	mov	r5, r0
            lv_refr_vdb_flush();
 800f62c:	f7ff fd22 	bl	800f074 <lv_refr_vdb_flush>
            while(vdb->flushing)
 800f630:	69ab      	ldr	r3, [r5, #24]
 800f632:	07db      	lsls	r3, r3, #31
 800f634:	d4fc      	bmi.n	800f630 <lv_disp_refr_task+0x2a4>
            uint8_t * buf_act = (uint8_t *)vdb->buf_act;
 800f636:	68ab      	ldr	r3, [r5, #8]
            uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
 800f638:	f8d5 8000 	ldr.w	r8, [r5]
            lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
 800f63c:	6820      	ldr	r0, [r4, #0]
            uint8_t * buf_act = (uint8_t *)vdb->buf_act;
 800f63e:	9301      	str	r3, [sp, #4]
            uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
 800f640:	4543      	cmp	r3, r8
 800f642:	bf08      	it	eq
 800f644:	f8d5 8004 	ldreq.w	r8, [r5, #4]
            lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
 800f648:	f004 f832 	bl	80136b0 <lv_disp_get_hor_res>
            for(a = 0; a < disp_refr->inv_p; a++) {
 800f64c:	2700      	movs	r7, #0
            lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
 800f64e:	4682      	mov	sl, r0
                        start_offs += hres * sizeof(lv_color_t);
 800f650:	ea4f 0b40 	mov.w	fp, r0, lsl #1
            for(a = 0; a < disp_refr->inv_p; a++) {
 800f654:	6821      	ldr	r1, [r4, #0]
 800f656:	f8b1 3160 	ldrh.w	r3, [r1, #352]	; 0x160
 800f65a:	b2ba      	uxth	r2, r7
 800f65c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f660:	429a      	cmp	r2, r3
 800f662:	f6bf aeb9 	bge.w	800f3d8 <lv_disp_refr_task+0x4c>
                if(disp_refr->inv_area_joined[a] == 0) {
 800f666:	188b      	adds	r3, r1, r2
 800f668:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800f66c:	b133      	cbz	r3, 800f67c <lv_disp_refr_task+0x2f0>
 800f66e:	3701      	adds	r7, #1
 800f670:	e7f0      	b.n	800f654 <lv_disp_refr_task+0x2c8>
 800f672:	bf00      	nop
 800f674:	20005f6c 	.word	0x20005f6c
 800f678:	20005f70 	.word	0x20005f70
 800f67c:	eb01 09c2 	add.w	r9, r1, r2, lsl #3
                        (hres * disp_refr->inv_areas[a].y1 + disp_refr->inv_areas[a].x1) * sizeof(lv_color_t);
 800f680:	f9b9 3040 	ldrsh.w	r3, [r9, #64]	; 0x40
 800f684:	f9b9 6042 	ldrsh.w	r6, [r9, #66]	; 0x42
    return area_p->x2 - area_p->x1 + 1;
 800f688:	f8b9 2044 	ldrh.w	r2, [r9, #68]	; 0x44
 800f68c:	fb0a 3506 	mla	r5, sl, r6, r3
 800f690:	f1c3 0301 	rsb	r3, r3, #1
 800f694:	4413      	add	r3, r2
                    uint32_t line_length = lv_area_get_width(&disp_refr->inv_areas[a]) * sizeof(lv_color_t);
 800f696:	b21b      	sxth	r3, r3
 800f698:	005b      	lsls	r3, r3, #1
 800f69a:	9303      	str	r3, [sp, #12]
 800f69c:	9b01      	ldr	r3, [sp, #4]
                    uint32_t start_offs =
 800f69e:	006d      	lsls	r5, r5, #1
 800f6a0:	442b      	add	r3, r5
 800f6a2:	4445      	add	r5, r8
                    for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
 800f6a4:	f9b9 2046 	ldrsh.w	r2, [r9, #70]	; 0x46
 800f6a8:	42b2      	cmp	r2, r6
 800f6aa:	dbe0      	blt.n	800f66e <lv_disp_refr_task+0x2e2>
                        memcpy(buf_act + start_offs, buf_ina + start_offs, line_length);
 800f6ac:	4629      	mov	r1, r5
 800f6ae:	4618      	mov	r0, r3
 800f6b0:	9a03      	ldr	r2, [sp, #12]
 800f6b2:	f009 ff2f 	bl	8019514 <memcpy>
 800f6b6:	3601      	adds	r6, #1
 800f6b8:	4603      	mov	r3, r0
 800f6ba:	b236      	sxth	r6, r6
 800f6bc:	445b      	add	r3, fp
 800f6be:	445d      	add	r5, fp
 800f6c0:	e7f0      	b.n	800f6a4 <lv_disp_refr_task+0x318>
            disp_refr->driver.monitor_cb(&disp_refr->driver, lv_tick_elaps(start), px_num);
 800f6c2:	9802      	ldr	r0, [sp, #8]
 800f6c4:	f004 f862 	bl	801378c <lv_tick_elaps>
 800f6c8:	9b00      	ldr	r3, [sp, #0]
 800f6ca:	4601      	mov	r1, r0
 800f6cc:	681a      	ldr	r2, [r3, #0]
 800f6ce:	4620      	mov	r0, r4
 800f6d0:	47a8      	blx	r5
 800f6d2:	e699      	b.n	800f408 <lv_disp_refr_task+0x7c>

0800f6d4 <lv_style_copy>:
 * @param dest pointer to the destination style
 * @param src pointer to the source style
 */
void lv_style_copy(lv_style_t * dest, const lv_style_t * src)
{
    memcpy(dest, src, sizeof(lv_style_t));
 800f6d4:	f101 033c 	add.w	r3, r1, #60	; 0x3c
 800f6d8:	f851 2b04 	ldr.w	r2, [r1], #4
 800f6dc:	f840 2b04 	str.w	r2, [r0], #4
 800f6e0:	4299      	cmp	r1, r3
 800f6e2:	d1f9      	bne.n	800f6d8 <lv_style_copy+0x4>
}
 800f6e4:	4770      	bx	lr
	...

0800f6e8 <lv_style_init>:
    lv_style_scr.glass               = 0;
 800f6e8:	49d7      	ldr	r1, [pc, #860]	; (800fa48 <lv_style_init+0x360>)
{
 800f6ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_style_scr.glass               = 0;
 800f6ee:	780b      	ldrb	r3, [r1, #0]
    lv_style_scr.body.main_color     = LV_COLOR_WHITE;
 800f6f0:	f8df 9370 	ldr.w	r9, [pc, #880]	; 800fa64 <lv_style_init+0x37c>
    lv_style_copy(&lv_style_plain, &lv_style_scr);
 800f6f4:	4dd5      	ldr	r5, [pc, #852]	; (800fa4c <lv_style_init+0x364>)
    lv_style_scr.body.main_color     = LV_COLOR_WHITE;
 800f6f6:	f8b9 b000 	ldrh.w	fp, [r9]
 800f6fa:	f8a1 b002 	strh.w	fp, [r1, #2]
    lv_style_scr.glass               = 0;
 800f6fe:	f36f 0300 	bfc	r3, #0, #1
 800f702:	700b      	strb	r3, [r1, #0]
    lv_style_scr.body.border.color = LV_COLOR_BLACK;
 800f704:	7a8b      	ldrb	r3, [r1, #10]
    lv_style_scr.body.grad_color     = LV_COLOR_WHITE;
 800f706:	f8a1 b004 	strh.w	fp, [r1, #4]
    lv_style_scr.body.radius         = 0;
 800f70a:	2600      	movs	r6, #0
    lv_style_scr.body.border.color = LV_COLOR_BLACK;
 800f70c:	f366 0304 	bfi	r3, r6, #0, #5
 800f710:	728b      	strb	r3, [r1, #10]
 800f712:	894b      	ldrh	r3, [r1, #10]
    lv_style_scr.body.radius         = 0;
 800f714:	80ce      	strh	r6, [r1, #6]
    lv_style_scr.body.border.color = LV_COLOR_BLACK;
 800f716:	f366 134a 	bfi	r3, r6, #5, #6
 800f71a:	814b      	strh	r3, [r1, #10]
 800f71c:	0a1b      	lsrs	r3, r3, #8
 800f71e:	f366 03c7 	bfi	r3, r6, #3, #5
 800f722:	72cb      	strb	r3, [r1, #11]
    lv_style_scr.body.border.part  = LV_BORDER_FULL;
 800f724:	230f      	movs	r3, #15
{
 800f726:	b085      	sub	sp, #20
    lv_style_scr.body.border.part  = LV_BORDER_FULL;
 800f728:	738b      	strb	r3, [r1, #14]
    lv_style_scr.body.shadow.color = LV_COLOR_GRAY;
 800f72a:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 800f72e:	f8ad 3004 	strh.w	r3, [sp, #4]
 800f732:	b29b      	uxth	r3, r3
 800f734:	820b      	strh	r3, [r1, #16]
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
 800f736:	f891 3020 	ldrb.w	r3, [r1, #32]
    lv_style_scr.body.padding.left   = 0;
 800f73a:	834e      	strh	r6, [r1, #26]
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
 800f73c:	2206      	movs	r2, #6
 800f73e:	f362 0304 	bfi	r3, r2, #0, #5
 800f742:	f881 3020 	strb.w	r3, [r1, #32]
 800f746:	8c0b      	ldrh	r3, [r1, #32]
    lv_style_scr.body.padding.right  = 0;
 800f748:	838e      	strh	r6, [r1, #28]
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
 800f74a:	220c      	movs	r2, #12
 800f74c:	f362 134a 	bfi	r3, r2, #5, #6
 800f750:	840b      	strh	r3, [r1, #32]
 800f752:	2206      	movs	r2, #6
 800f754:	0a1b      	lsrs	r3, r3, #8
    lv_style_scr.body.padding.inner  = LV_DPI / 20;
 800f756:	f04f 0801 	mov.w	r8, #1
    lv_style_scr.body.opa            = LV_OPA_COVER;
 800f75a:	24ff      	movs	r4, #255	; 0xff
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
 800f75c:	f362 03c7 	bfi	r3, r2, #3, #5
    lv_style_scr.body.opa            = LV_OPA_COVER;
 800f760:	720c      	strb	r4, [r1, #8]
    lv_style_scr.body.padding.top    = 0;
 800f762:	82ce      	strh	r6, [r1, #22]
    lv_style_scr.body.padding.bottom = 0;
 800f764:	830e      	strh	r6, [r1, #24]
    lv_style_scr.body.padding.inner  = LV_DPI / 20;
 800f766:	f8a1 801e 	strh.w	r8, [r1, #30]
    lv_style_scr.body.border.opa   = LV_OPA_COVER;
 800f76a:	73cc      	strb	r4, [r1, #15]
    lv_style_scr.body.border.width = 0;
 800f76c:	818e      	strh	r6, [r1, #12]
    lv_style_scr.body.shadow.type  = LV_SHADOW_FULL;
 800f76e:	f881 8014 	strb.w	r8, [r1, #20]
    lv_style_scr.body.shadow.width = 0;
 800f772:	824e      	strh	r6, [r1, #18]
    lv_style_scr.text.opa          = LV_OPA_COVER;
 800f774:	f881 402c 	strb.w	r4, [r1, #44]	; 0x2c
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
 800f778:	f881 3021 	strb.w	r3, [r1, #33]	; 0x21
    lv_style_scr.text.sel_color    = lv_color_make(0x55, 0x96, 0xd8);
 800f77c:	f891 3022 	ldrb.w	r3, [r1, #34]	; 0x22
    lv_style_scr.image.opa     = LV_OPA_COVER;
 800f780:	f881 4033 	strb.w	r4, [r1, #51]	; 0x33
    lv_style_scr.text.sel_color    = lv_color_make(0x55, 0x96, 0xd8);
 800f784:	221b      	movs	r2, #27
 800f786:	f362 0304 	bfi	r3, r2, #0, #5
 800f78a:	f881 3022 	strb.w	r3, [r1, #34]	; 0x22
 800f78e:	8c4a      	ldrh	r2, [r1, #34]	; 0x22
    lv_style_scr.line.opa     = LV_OPA_COVER;
 800f790:	f881 4038 	strb.w	r4, [r1, #56]	; 0x38
    lv_style_scr.text.sel_color    = lv_color_make(0x55, 0x96, 0xd8);
 800f794:	2325      	movs	r3, #37	; 0x25
 800f796:	f363 124a 	bfi	r2, r3, #5, #6
 800f79a:	9303      	str	r3, [sp, #12]
 800f79c:	0a10      	lsrs	r0, r2, #8
 800f79e:	844a      	strh	r2, [r1, #34]	; 0x22
 800f7a0:	220a      	movs	r2, #10
 800f7a2:	f362 00c7 	bfi	r0, r2, #3, #5
 800f7a6:	9202      	str	r2, [sp, #8]
 800f7a8:	f881 0023 	strb.w	r0, [r1, #35]	; 0x23
    lv_style_scr.text.font         = LV_FONT_DEFAULT;
 800f7ac:	48a8      	ldr	r0, [pc, #672]	; (800fa50 <lv_style_init+0x368>)
 800f7ae:	6248      	str	r0, [r1, #36]	; 0x24
    lv_style_scr.image.color   = lv_color_make(0x20, 0x20, 0x20);
 800f7b0:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
    lv_style_copy(&lv_style_plain_color, &lv_style_plain);
 800f7b4:	4ca7      	ldr	r4, [pc, #668]	; (800fa54 <lv_style_init+0x36c>)
    lv_style_scr.text.letter_space = 0;
 800f7b6:	850e      	strh	r6, [r1, #40]	; 0x28
    lv_style_scr.image.color   = lv_color_make(0x20, 0x20, 0x20);
 800f7b8:	2704      	movs	r7, #4
 800f7ba:	f367 0004 	bfi	r0, r7, #0, #5
 800f7be:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
 800f7c2:	8e08      	ldrh	r0, [r1, #48]	; 0x30
    lv_style_scr.image.intense = LV_OPA_TRANSP;
 800f7c4:	f881 6032 	strb.w	r6, [r1, #50]	; 0x32
    lv_style_scr.image.color   = lv_color_make(0x20, 0x20, 0x20);
 800f7c8:	f04f 0a08 	mov.w	sl, #8
 800f7cc:	f36a 104a 	bfi	r0, sl, #5, #6
 800f7d0:	8608      	strh	r0, [r1, #48]	; 0x30
 800f7d2:	fa20 f00a 	lsr.w	r0, r0, sl
 800f7d6:	f367 00c7 	bfi	r0, r7, #3, #5
 800f7da:	f881 0031 	strb.w	r0, [r1, #49]	; 0x31
    lv_style_scr.line.color   = lv_color_make(0x20, 0x20, 0x20);
 800f7de:	f891 0034 	ldrb.w	r0, [r1, #52]	; 0x34
 800f7e2:	f367 0004 	bfi	r0, r7, #0, #5
 800f7e6:	f881 0034 	strb.w	r0, [r1, #52]	; 0x34
 800f7ea:	8e88      	ldrh	r0, [r1, #52]	; 0x34
 800f7ec:	f36a 104a 	bfi	r0, sl, #5, #6
 800f7f0:	8688      	strh	r0, [r1, #52]	; 0x34
 800f7f2:	fa20 f00a 	lsr.w	r0, r0, sl
 800f7f6:	f367 00c7 	bfi	r0, r7, #3, #5
 800f7fa:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
    lv_style_scr.line.rounded = 0;
 800f7fe:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 800f802:	f366 0000 	bfi	r0, r6, #0, #1
    lv_style_scr.text.line_space   = 2;
 800f806:	f04f 0302 	mov.w	r3, #2
    lv_style_scr.line.rounded = 0;
 800f80a:	f881 0039 	strb.w	r0, [r1, #57]	; 0x39
    lv_style_copy(&lv_style_plain, &lv_style_scr);
 800f80e:	4628      	mov	r0, r5
    lv_style_scr.text.line_space   = 2;
 800f810:	854b      	strh	r3, [r1, #42]	; 0x2a
    lv_style_scr.line.width   = 2;
 800f812:	86cb      	strh	r3, [r1, #54]	; 0x36
    lv_style_copy(&lv_style_plain, &lv_style_scr);
 800f814:	f7ff ff5e 	bl	800f6d4 <lv_style_copy>
    lv_style_copy(&lv_style_plain_color, &lv_style_plain);
 800f818:	4629      	mov	r1, r5
 800f81a:	4620      	mov	r0, r4
    lv_style_plain.body.padding.left   = LV_DPI / 20;
 800f81c:	f8a5 801a 	strh.w	r8, [r5, #26]
    lv_style_plain.body.padding.right  = LV_DPI / 20;
 800f820:	f8a5 801c 	strh.w	r8, [r5, #28]
    lv_style_plain.body.padding.top    = LV_DPI / 20;
 800f824:	f8a5 8016 	strh.w	r8, [r5, #22]
    lv_style_plain.body.padding.bottom = LV_DPI / 20;
 800f828:	f8a5 8018 	strh.w	r8, [r5, #24]
    lv_style_copy(&lv_style_plain_color, &lv_style_plain);
 800f82c:	f7ff ff52 	bl	800f6d4 <lv_style_copy>
    lv_style_plain_color.text.color      = lv_color_make(0xf0, 0xf0, 0xf0);
 800f830:	f894 1020 	ldrb.w	r1, [r4, #32]
 800f834:	231e      	movs	r3, #30
 800f836:	f363 0104 	bfi	r1, r3, #0, #5
 800f83a:	f884 1020 	strb.w	r1, [r4, #32]
 800f83e:	8c21      	ldrh	r1, [r4, #32]
 800f840:	203c      	movs	r0, #60	; 0x3c
 800f842:	f360 114a 	bfi	r1, r0, #5, #6
 800f846:	8421      	strh	r1, [r4, #32]
 800f848:	fa21 f10a 	lsr.w	r1, r1, sl
 800f84c:	f363 01c7 	bfi	r1, r3, #3, #5
 800f850:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    lv_style_plain_color.image.color     = lv_color_make(0xf0, 0xf0, 0xf0);
 800f854:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 800f858:	f363 0104 	bfi	r1, r3, #0, #5
 800f85c:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
 800f860:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 800f862:	f360 114a 	bfi	r1, r0, #5, #6
 800f866:	8621      	strh	r1, [r4, #48]	; 0x30
 800f868:	fa21 f10a 	lsr.w	r1, r1, sl
 800f86c:	f363 01c7 	bfi	r1, r3, #3, #5
 800f870:	f884 1031 	strb.w	r1, [r4, #49]	; 0x31
    lv_style_plain_color.line.color      = lv_color_make(0xf0, 0xf0, 0xf0);
 800f874:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
 800f878:	f363 0104 	bfi	r1, r3, #0, #5
 800f87c:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 800f880:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 800f882:	f360 114a 	bfi	r1, r0, #5, #6
 800f886:	86a1      	strh	r1, [r4, #52]	; 0x34
 800f888:	fa21 f10a 	lsr.w	r1, r1, sl
 800f88c:	f363 01c7 	bfi	r1, r3, #3, #5
 800f890:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    lv_style_plain_color.body.main_color = lv_color_make(0x55, 0x96, 0xd8);
 800f894:	78a1      	ldrb	r1, [r4, #2]
 800f896:	231b      	movs	r3, #27
 800f898:	f363 0104 	bfi	r1, r3, #0, #5
 800f89c:	70a1      	strb	r1, [r4, #2]
 800f89e:	8861      	ldrh	r1, [r4, #2]
 800f8a0:	9b03      	ldr	r3, [sp, #12]
 800f8a2:	f363 114a 	bfi	r1, r3, #5, #6
 800f8a6:	8061      	strh	r1, [r4, #2]
 800f8a8:	9a02      	ldr	r2, [sp, #8]
 800f8aa:	fa21 f10a 	lsr.w	r1, r1, sl
 800f8ae:	f362 01c7 	bfi	r1, r2, #3, #5
 800f8b2:	70e1      	strb	r1, [r4, #3]
    lv_style_plain_color.body.grad_color = lv_style_plain_color.body.main_color;
 800f8b4:	8863      	ldrh	r3, [r4, #2]
 800f8b6:	80a3      	strh	r3, [r4, #4]
    lv_style_copy(&lv_style_pretty, &lv_style_plain);
 800f8b8:	4b67      	ldr	r3, [pc, #412]	; (800fa58 <lv_style_init+0x370>)
 800f8ba:	9302      	str	r3, [sp, #8]
 800f8bc:	4629      	mov	r1, r5
 800f8be:	4618      	mov	r0, r3
 800f8c0:	f7ff ff08 	bl	800f6d4 <lv_style_copy>
    lv_style_pretty.text.color        = lv_color_make(0x20, 0x20, 0x20);
 800f8c4:	9b02      	ldr	r3, [sp, #8]
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
 800f8c6:	4c65      	ldr	r4, [pc, #404]	; (800fa5c <lv_style_init+0x374>)
    lv_style_pretty.text.color        = lv_color_make(0x20, 0x20, 0x20);
 800f8c8:	f893 2020 	ldrb.w	r2, [r3, #32]
    lv_style_pretty.body.main_color   = LV_COLOR_WHITE;
 800f8cc:	f8a3 b002 	strh.w	fp, [r3, #2]
    lv_style_pretty.text.color        = lv_color_make(0x20, 0x20, 0x20);
 800f8d0:	f367 0204 	bfi	r2, r7, #0, #5
 800f8d4:	f883 2020 	strb.w	r2, [r3, #32]
 800f8d8:	8c1a      	ldrh	r2, [r3, #32]
    lv_style_pretty.body.radius       = LV_DPI / 15;
 800f8da:	f8a3 8006 	strh.w	r8, [r3, #6]
    lv_style_pretty.text.color        = lv_color_make(0x20, 0x20, 0x20);
 800f8de:	f36a 124a 	bfi	r2, sl, #5, #6
 800f8e2:	841a      	strh	r2, [r3, #32]
 800f8e4:	fa22 f20a 	lsr.w	r2, r2, sl
 800f8e8:	f367 02c7 	bfi	r2, r7, #3, #5
 800f8ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    lv_style_pretty.image.color       = lv_color_make(0x20, 0x20, 0x20);
 800f8f0:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    lv_style_pretty.body.border.width = LV_DPI / 50 >= 1 ? LV_DPI / 50 : 1;
 800f8f4:	f8a3 800c 	strh.w	r8, [r3, #12]
    lv_style_pretty.image.color       = lv_color_make(0x20, 0x20, 0x20);
 800f8f8:	f367 0204 	bfi	r2, r7, #0, #5
 800f8fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800f900:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 800f902:	f36a 124a 	bfi	r2, sl, #5, #6
 800f906:	861a      	strh	r2, [r3, #48]	; 0x30
 800f908:	fa22 f20a 	lsr.w	r2, r2, sl
 800f90c:	f367 02c7 	bfi	r2, r7, #3, #5
 800f910:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    lv_style_pretty.line.color        = lv_color_make(0x20, 0x20, 0x20);
 800f914:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800f918:	f367 0204 	bfi	r2, r7, #0, #5
 800f91c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800f920:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 800f922:	f36a 124a 	bfi	r2, sl, #5, #6
 800f926:	869a      	strh	r2, [r3, #52]	; 0x34
 800f928:	fa22 f20a 	lsr.w	r2, r2, sl
 800f92c:	f367 02c7 	bfi	r2, r7, #3, #5
 800f930:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    lv_style_pretty.body.grad_color   = LV_COLOR_SILVER;
 800f934:	f8b9 2004 	ldrh.w	r2, [r9, #4]
 800f938:	809a      	strh	r2, [r3, #4]
    lv_style_pretty.body.border.color = lv_color_make(0x40, 0x40, 0x40);
 800f93a:	7a9a      	ldrb	r2, [r3, #10]
 800f93c:	f36a 0204 	bfi	r2, sl, #0, #5
 800f940:	729a      	strb	r2, [r3, #10]
 800f942:	895a      	ldrh	r2, [r3, #10]
 800f944:	2110      	movs	r1, #16
 800f946:	f361 124a 	bfi	r2, r1, #5, #6
 800f94a:	815a      	strh	r2, [r3, #10]
 800f94c:	fa22 f20a 	lsr.w	r2, r2, sl
 800f950:	f36a 02c7 	bfi	r2, sl, #3, #5
 800f954:	72da      	strb	r2, [r3, #11]
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
 800f956:	4619      	mov	r1, r3
    lv_style_pretty.body.border.opa   = LV_OPA_30;
 800f958:	224c      	movs	r2, #76	; 0x4c
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
 800f95a:	4620      	mov	r0, r4
    lv_style_pretty.body.border.opa   = LV_OPA_30;
 800f95c:	73da      	strb	r2, [r3, #15]
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
 800f95e:	f7ff feb9 	bl	800f6d4 <lv_style_copy>
    lv_style_pretty_color.text.color        = lv_color_make(0xe0, 0xe0, 0xe0);
 800f962:	f894 3020 	ldrb.w	r3, [r4, #32]
 800f966:	f04f 0b1c 	mov.w	fp, #28
 800f96a:	f36b 0304 	bfi	r3, fp, #0, #5
 800f96e:	f884 3020 	strb.w	r3, [r4, #32]
 800f972:	8c23      	ldrh	r3, [r4, #32]
 800f974:	2238      	movs	r2, #56	; 0x38
 800f976:	f362 134a 	bfi	r3, r2, #5, #6
 800f97a:	8423      	strh	r3, [r4, #32]
 800f97c:	fa23 f30a 	lsr.w	r3, r3, sl
 800f980:	f36b 03c7 	bfi	r3, fp, #3, #5
 800f984:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    lv_style_pretty_color.image.color       = lv_color_make(0xe0, 0xe0, 0xe0);
 800f988:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800f98c:	f36b 0304 	bfi	r3, fp, #0, #5
 800f990:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 800f994:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800f996:	f362 134a 	bfi	r3, r2, #5, #6
 800f99a:	8623      	strh	r3, [r4, #48]	; 0x30
 800f99c:	fa23 f30a 	lsr.w	r3, r3, sl
 800f9a0:	f36b 03c7 	bfi	r3, fp, #3, #5
 800f9a4:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    lv_style_pretty_color.line.color        = lv_color_make(0xc0, 0xc0, 0xc0);
 800f9a8:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800f9ac:	f04f 0918 	mov.w	r9, #24
 800f9b0:	f369 0304 	bfi	r3, r9, #0, #5
 800f9b4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800f9b8:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800f9ba:	2230      	movs	r2, #48	; 0x30
 800f9bc:	f362 134a 	bfi	r3, r2, #5, #6
 800f9c0:	86a3      	strh	r3, [r4, #52]	; 0x34
 800f9c2:	fa23 f30a 	lsr.w	r3, r3, sl
 800f9c6:	f369 03c7 	bfi	r3, r9, #3, #5
 800f9ca:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    lv_style_pretty_color.body.main_color   = lv_color_make(0x6b, 0x9a, 0xc7);
 800f9ce:	78a3      	ldrb	r3, [r4, #2]
 800f9d0:	f369 0304 	bfi	r3, r9, #0, #5
 800f9d4:	70a3      	strb	r3, [r4, #2]
 800f9d6:	8863      	ldrh	r3, [r4, #2]
 800f9d8:	2226      	movs	r2, #38	; 0x26
 800f9da:	f362 134a 	bfi	r3, r2, #5, #6
 800f9de:	8063      	strh	r3, [r4, #2]
 800f9e0:	220d      	movs	r2, #13
 800f9e2:	fa23 f30a 	lsr.w	r3, r3, sl
 800f9e6:	f362 03c7 	bfi	r3, r2, #3, #5
 800f9ea:	70e3      	strb	r3, [r4, #3]
    lv_style_pretty_color.body.grad_color   = lv_color_make(0x2b, 0x59, 0x8b);
 800f9ec:	7923      	ldrb	r3, [r4, #4]
 800f9ee:	2211      	movs	r2, #17
 800f9f0:	f362 0304 	bfi	r3, r2, #0, #5
 800f9f4:	7123      	strb	r3, [r4, #4]
 800f9f6:	88a3      	ldrh	r3, [r4, #4]
 800f9f8:	2216      	movs	r2, #22
 800f9fa:	f362 134a 	bfi	r3, r2, #5, #6
 800f9fe:	80a3      	strh	r3, [r4, #4]
 800fa00:	2205      	movs	r2, #5
 800fa02:	fa23 f30a 	lsr.w	r3, r3, sl
 800fa06:	f362 03c7 	bfi	r3, r2, #3, #5
 800fa0a:	7163      	strb	r3, [r4, #5]
    lv_style_pretty_color.body.border.color = lv_color_make(0x15, 0x2c, 0x42);
 800fa0c:	7aa3      	ldrb	r3, [r4, #10]
 800fa0e:	f36a 0304 	bfi	r3, sl, #0, #5
 800fa12:	72a3      	strb	r3, [r4, #10]
 800fa14:	8962      	ldrh	r2, [r4, #10]
 800fa16:	230b      	movs	r3, #11
 800fa18:	f363 124a 	bfi	r2, r3, #5, #6
 800fa1c:	9302      	str	r3, [sp, #8]
 800fa1e:	2302      	movs	r3, #2
 800fa20:	8162      	strh	r2, [r4, #10]
 800fa22:	fa22 f20a 	lsr.w	r2, r2, sl
    lv_style_copy(&lv_style_transp, &lv_style_plain);
 800fa26:	f8df a040 	ldr.w	sl, [pc, #64]	; 800fa68 <lv_style_init+0x380>
    lv_style_pretty_color.body.border.color = lv_color_make(0x15, 0x2c, 0x42);
 800fa2a:	f363 02c7 	bfi	r2, r3, #3, #5
 800fa2e:	72e2      	strb	r2, [r4, #11]
    lv_style_copy(&lv_style_transp, &lv_style_plain);
 800fa30:	4629      	mov	r1, r5
 800fa32:	4650      	mov	r0, sl
 800fa34:	f7ff fe4e 	bl	800f6d4 <lv_style_copy>
    lv_style_transp.glass             = 1;
 800fa38:	f89a 2000 	ldrb.w	r2, [sl]
    lv_style_copy(&lv_style_transp_fit, &lv_style_transp);
 800fa3c:	4c08      	ldr	r4, [pc, #32]	; (800fa60 <lv_style_init+0x378>)
    lv_style_transp.body.border.width = 0;
 800fa3e:	f8aa 600c 	strh.w	r6, [sl, #12]
    lv_style_transp.glass             = 1;
 800fa42:	ea42 0208 	orr.w	r2, r2, r8
 800fa46:	e011      	b.n	800fa6c <lv_style_init+0x384>
 800fa48:	2000c49c 	.word	0x2000c49c
 800fa4c:	2000c424 	.word	0x2000c424
 800fa50:	200006ec 	.word	0x200006ec
 800fa54:	2000c514 	.word	0x2000c514
 800fa58:	2000c334 	.word	0x2000c334
 800fa5c:	2000c244 	.word	0x2000c244
 800fa60:	2000c3e8 	.word	0x2000c3e8
 800fa64:	0801cb24 	.word	0x0801cb24
 800fa68:	2000c280 	.word	0x2000c280
 800fa6c:	f88a 2000 	strb.w	r2, [sl]
    lv_style_transp.body.opa          = LV_OPA_TRANSP;
 800fa70:	f88a 6008 	strb.w	r6, [sl, #8]
    lv_style_copy(&lv_style_transp_fit, &lv_style_transp);
 800fa74:	4651      	mov	r1, sl
 800fa76:	4620      	mov	r0, r4
    lv_style_copy(&lv_style_transp_tight, &lv_style_transp_fit);
 800fa78:	f8df a394 	ldr.w	sl, [pc, #916]	; 800fe10 <lv_style_init+0x728>
    lv_style_copy(&lv_style_transp_fit, &lv_style_transp);
 800fa7c:	f7ff fe2a 	bl	800f6d4 <lv_style_copy>
    lv_style_transp_fit.body.padding.left   = 0;
 800fa80:	8366      	strh	r6, [r4, #26]
    lv_style_transp_fit.body.padding.right  = 0;
 800fa82:	83a6      	strh	r6, [r4, #28]
    lv_style_transp_fit.body.padding.top    = 0;
 800fa84:	82e6      	strh	r6, [r4, #22]
    lv_style_transp_fit.body.padding.bottom = 0;
 800fa86:	8326      	strh	r6, [r4, #24]
    lv_style_copy(&lv_style_transp_tight, &lv_style_transp_fit);
 800fa88:	4621      	mov	r1, r4
    lv_style_copy(&lv_style_btn_rel, &lv_style_plain);
 800fa8a:	4cdd      	ldr	r4, [pc, #884]	; (800fe00 <lv_style_init+0x718>)
    lv_style_copy(&lv_style_transp_tight, &lv_style_transp_fit);
 800fa8c:	4650      	mov	r0, sl
 800fa8e:	f7ff fe21 	bl	800f6d4 <lv_style_copy>
    lv_style_copy(&lv_style_btn_rel, &lv_style_plain);
 800fa92:	4629      	mov	r1, r5
 800fa94:	4620      	mov	r0, r4
    lv_style_transp_tight.body.padding.inner = 0;
 800fa96:	f8aa 601e 	strh.w	r6, [sl, #30]
    lv_style_copy(&lv_style_btn_rel, &lv_style_plain);
 800fa9a:	f7ff fe1b 	bl	800f6d4 <lv_style_copy>
    lv_style_btn_rel.body.main_color     = lv_color_make(0x76, 0xa2, 0xd0);
 800fa9e:	78a2      	ldrb	r2, [r4, #2]
    lv_style_btn_rel.body.radius         = LV_DPI / 15;
 800faa0:	f8a4 8006 	strh.w	r8, [r4, #6]
    lv_style_btn_rel.body.main_color     = lv_color_make(0x76, 0xa2, 0xd0);
 800faa4:	211a      	movs	r1, #26
 800faa6:	f361 0204 	bfi	r2, r1, #0, #5
 800faaa:	70a2      	strb	r2, [r4, #2]
 800faac:	8862      	ldrh	r2, [r4, #2]
    lv_style_btn_rel.body.border.width   = LV_DPI / 50 >= 1 ? LV_DPI / 50 : 1;
 800faae:	f8a4 800c 	strh.w	r8, [r4, #12]
    lv_style_btn_rel.body.main_color     = lv_color_make(0x76, 0xa2, 0xd0);
 800fab2:	2128      	movs	r1, #40	; 0x28
 800fab4:	f361 124a 	bfi	r2, r1, #5, #6
 800fab8:	f04f 0a0e 	mov.w	sl, #14
 800fabc:	8062      	strh	r2, [r4, #2]
 800fabe:	0a12      	lsrs	r2, r2, #8
 800fac0:	f36a 02c7 	bfi	r2, sl, #3, #5
 800fac4:	70e2      	strb	r2, [r4, #3]
    lv_style_btn_rel.body.grad_color     = lv_color_make(0x19, 0x3a, 0x5d);
 800fac6:	9b02      	ldr	r3, [sp, #8]
 800fac8:	7922      	ldrb	r2, [r4, #4]
    lv_style_btn_rel.body.padding.top    = LV_DPI / 6;
 800faca:	82e7      	strh	r7, [r4, #22]
    lv_style_btn_rel.body.grad_color     = lv_color_make(0x19, 0x3a, 0x5d);
 800facc:	f363 0204 	bfi	r2, r3, #0, #5
 800fad0:	7122      	strb	r2, [r4, #4]
 800fad2:	88a3      	ldrh	r3, [r4, #4]
    lv_style_btn_rel.body.padding.bottom = LV_DPI / 6;
 800fad4:	8327      	strh	r7, [r4, #24]
    lv_style_btn_rel.body.grad_color     = lv_color_make(0x19, 0x3a, 0x5d);
 800fad6:	f36a 134a 	bfi	r3, sl, #5, #6
 800fada:	80a3      	strh	r3, [r4, #4]
 800fadc:	2203      	movs	r2, #3
 800fade:	0a1b      	lsrs	r3, r3, #8
 800fae0:	f362 03c7 	bfi	r3, r2, #3, #5
 800fae4:	7163      	strb	r3, [r4, #5]
    lv_style_btn_rel.body.padding.left   = LV_DPI / 4;
 800fae6:	f04f 0306 	mov.w	r3, #6
 800faea:	8363      	strh	r3, [r4, #26]
    lv_style_btn_rel.body.padding.right  = LV_DPI / 4;
 800faec:	83a3      	strh	r3, [r4, #28]
    lv_style_btn_rel.body.padding.inner  = LV_DPI / 10;
 800faee:	f04f 0302 	mov.w	r3, #2
 800faf2:	83e3      	strh	r3, [r4, #30]
    lv_style_btn_rel.body.border.color   = lv_color_make(0x0b, 0x19, 0x28);
 800faf4:	7aa3      	ldrb	r3, [r4, #10]
    lv_style_btn_rel.body.shadow.width   = 0;
 800faf6:	8266      	strh	r6, [r4, #18]
    lv_style_btn_rel.body.border.color   = lv_color_make(0x0b, 0x19, 0x28);
 800faf8:	2205      	movs	r2, #5
 800fafa:	f362 0304 	bfi	r3, r2, #0, #5
 800fafe:	72a3      	strb	r3, [r4, #10]
 800fb00:	8963      	ldrh	r3, [r4, #10]
    lv_style_copy(&lv_style_btn_pr, &lv_style_btn_rel);
 800fb02:	4dc0      	ldr	r5, [pc, #768]	; (800fe04 <lv_style_init+0x71c>)
    lv_style_btn_rel.body.border.color   = lv_color_make(0x0b, 0x19, 0x28);
 800fb04:	2206      	movs	r2, #6
 800fb06:	f362 134a 	bfi	r3, r2, #5, #6
 800fb0a:	8163      	strh	r3, [r4, #10]
 800fb0c:	0a1b      	lsrs	r3, r3, #8
 800fb0e:	f368 03c7 	bfi	r3, r8, #3, #5
 800fb12:	72e3      	strb	r3, [r4, #11]
    lv_style_btn_rel.body.border.opa     = LV_OPA_70;
 800fb14:	23b2      	movs	r3, #178	; 0xb2
 800fb16:	73e3      	strb	r3, [r4, #15]
    lv_style_btn_rel.body.shadow.color   = LV_COLOR_GRAY;
 800fb18:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800fb1c:	8223      	strh	r3, [r4, #16]
    lv_style_btn_rel.text.color          = lv_color_make(0xff, 0xff, 0xff);
 800fb1e:	f894 3020 	ldrb.w	r3, [r4, #32]
 800fb22:	f043 031f 	orr.w	r3, r3, #31
 800fb26:	f884 3020 	strb.w	r3, [r4, #32]
 800fb2a:	8c23      	ldrh	r3, [r4, #32]
 800fb2c:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800fb30:	8423      	strh	r3, [r4, #32]
 800fb32:	0a1b      	lsrs	r3, r3, #8
 800fb34:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 800fb38:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    lv_style_btn_rel.image.color         = lv_color_make(0xff, 0xff, 0xff);
 800fb3c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800fb40:	f043 031f 	orr.w	r3, r3, #31
 800fb44:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 800fb48:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800fb4a:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800fb4e:	8623      	strh	r3, [r4, #48]	; 0x30
 800fb50:	0a1b      	lsrs	r3, r3, #8
 800fb52:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
 800fb56:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    lv_style_copy(&lv_style_btn_pr, &lv_style_btn_rel);
 800fb5a:	4621      	mov	r1, r4
 800fb5c:	4628      	mov	r0, r5
 800fb5e:	f7ff fdb9 	bl	800f6d4 <lv_style_copy>
    lv_style_btn_pr.body.main_color = lv_color_make(0x33, 0x62, 0x94);
 800fb62:	78ab      	ldrb	r3, [r5, #2]
 800fb64:	2212      	movs	r2, #18
 800fb66:	f362 0304 	bfi	r3, r2, #0, #5
 800fb6a:	70ab      	strb	r3, [r5, #2]
 800fb6c:	886b      	ldrh	r3, [r5, #2]
 800fb6e:	f369 134a 	bfi	r3, r9, #5, #6
 800fb72:	806b      	strh	r3, [r5, #2]
 800fb74:	2206      	movs	r2, #6
 800fb76:	0a1b      	lsrs	r3, r3, #8
 800fb78:	f362 03c7 	bfi	r3, r2, #3, #5
 800fb7c:	70eb      	strb	r3, [r5, #3]
    lv_style_btn_pr.body.grad_color = lv_color_make(0x10, 0x26, 0x3c);
 800fb7e:	792b      	ldrb	r3, [r5, #4]
 800fb80:	2207      	movs	r2, #7
 800fb82:	f362 0304 	bfi	r3, r2, #0, #5
 800fb86:	712b      	strb	r3, [r5, #4]
 800fb88:	88ab      	ldrh	r3, [r5, #4]
 800fb8a:	2209      	movs	r2, #9
 800fb8c:	f362 134a 	bfi	r3, r2, #5, #6
 800fb90:	80ab      	strh	r3, [r5, #4]
 800fb92:	2202      	movs	r2, #2
 800fb94:	0a1b      	lsrs	r3, r3, #8
 800fb96:	f362 03c7 	bfi	r3, r2, #3, #5
 800fb9a:	716b      	strb	r3, [r5, #5]
    lv_style_btn_pr.text.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 800fb9c:	f895 3020 	ldrb.w	r3, [r5, #32]
 800fba0:	f369 0304 	bfi	r3, r9, #0, #5
 800fba4:	f885 3020 	strb.w	r3, [r5, #32]
 800fba8:	8c2b      	ldrh	r3, [r5, #32]
 800fbaa:	222d      	movs	r2, #45	; 0x2d
 800fbac:	f362 134a 	bfi	r3, r2, #5, #6
 800fbb0:	842b      	strh	r3, [r5, #32]
 800fbb2:	0a19      	lsrs	r1, r3, #8
 800fbb4:	2314      	movs	r3, #20
 800fbb6:	f363 01c7 	bfi	r1, r3, #3, #5
 800fbba:	f885 1021 	strb.w	r1, [r5, #33]	; 0x21
    lv_style_btn_pr.image.color     = lv_color_make(0xa4, 0xb5, 0xc6);
 800fbbe:	f895 1030 	ldrb.w	r1, [r5, #48]	; 0x30
 800fbc2:	f369 0104 	bfi	r1, r9, #0, #5
 800fbc6:	f885 1030 	strb.w	r1, [r5, #48]	; 0x30
 800fbca:	8e29      	ldrh	r1, [r5, #48]	; 0x30
 800fbcc:	f362 114a 	bfi	r1, r2, #5, #6
 800fbd0:	8629      	strh	r1, [r5, #48]	; 0x30
 800fbd2:	0a09      	lsrs	r1, r1, #8
 800fbd4:	f363 01c7 	bfi	r1, r3, #3, #5
 800fbd8:	f885 1031 	strb.w	r1, [r5, #49]	; 0x31
    lv_style_btn_pr.line.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 800fbdc:	f895 1034 	ldrb.w	r1, [r5, #52]	; 0x34
 800fbe0:	f369 0104 	bfi	r1, r9, #0, #5
 800fbe4:	f885 1034 	strb.w	r1, [r5, #52]	; 0x34
 800fbe8:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 800fbea:	9202      	str	r2, [sp, #8]
 800fbec:	f362 114a 	bfi	r1, r2, #5, #6
 800fbf0:	86a9      	strh	r1, [r5, #52]	; 0x34
 800fbf2:	0a09      	lsrs	r1, r1, #8
 800fbf4:	f363 01c7 	bfi	r1, r3, #3, #5
 800fbf8:	9301      	str	r3, [sp, #4]
 800fbfa:	f885 1035 	strb.w	r1, [r5, #53]	; 0x35
    lv_style_copy(&lv_style_btn_tgl_rel, &lv_style_btn_rel);
 800fbfe:	4d82      	ldr	r5, [pc, #520]	; (800fe08 <lv_style_init+0x720>)
 800fc00:	4621      	mov	r1, r4
 800fc02:	4628      	mov	r0, r5
 800fc04:	f7ff fd66 	bl	800f6d4 <lv_style_copy>
    lv_style_btn_tgl_rel.body.main_color   = lv_color_make(0x0a, 0x11, 0x22);
 800fc08:	78a9      	ldrb	r1, [r5, #2]
 800fc0a:	f367 0104 	bfi	r1, r7, #0, #5
 800fc0e:	70a9      	strb	r1, [r5, #2]
 800fc10:	8869      	ldrh	r1, [r5, #2]
 800fc12:	f367 114a 	bfi	r1, r7, #5, #6
 800fc16:	8069      	strh	r1, [r5, #2]
 800fc18:	0a09      	lsrs	r1, r1, #8
 800fc1a:	f368 01c7 	bfi	r1, r8, #3, #5
 800fc1e:	70e9      	strb	r1, [r5, #3]
    lv_style_btn_tgl_rel.body.grad_color   = lv_color_make(0x37, 0x62, 0x90);
 800fc20:	7929      	ldrb	r1, [r5, #4]
 800fc22:	2312      	movs	r3, #18
 800fc24:	f363 0104 	bfi	r1, r3, #0, #5
 800fc28:	7129      	strb	r1, [r5, #4]
 800fc2a:	88a9      	ldrh	r1, [r5, #4]
 800fc2c:	f369 114a 	bfi	r1, r9, #5, #6
 800fc30:	80a9      	strh	r1, [r5, #4]
 800fc32:	2306      	movs	r3, #6
 800fc34:	0a09      	lsrs	r1, r1, #8
 800fc36:	f363 01c7 	bfi	r1, r3, #3, #5
 800fc3a:	7169      	strb	r1, [r5, #5]
    lv_style_btn_tgl_rel.body.border.color = lv_color_make(0x01, 0x07, 0x0d);
 800fc3c:	7aa9      	ldrb	r1, [r5, #10]
 800fc3e:	f368 0104 	bfi	r1, r8, #0, #5
 800fc42:	72a9      	strb	r1, [r5, #10]
 800fc44:	8969      	ldrh	r1, [r5, #10]
 800fc46:	f368 114a 	bfi	r1, r8, #5, #6
 800fc4a:	8169      	strh	r1, [r5, #10]
 800fc4c:	0a09      	lsrs	r1, r1, #8
 800fc4e:	f366 01c7 	bfi	r1, r6, #3, #5
 800fc52:	72e9      	strb	r1, [r5, #11]
    lv_style_btn_tgl_rel.text.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 800fc54:	f895 1020 	ldrb.w	r1, [r5, #32]
    lv_style_copy(&lv_style_btn_tgl_pr, &lv_style_btn_tgl_rel);
 800fc58:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 800fe14 <lv_style_init+0x72c>
    lv_style_btn_tgl_rel.text.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 800fc5c:	231e      	movs	r3, #30
 800fc5e:	f363 0104 	bfi	r1, r3, #0, #5
 800fc62:	f885 1020 	strb.w	r1, [r5, #32]
 800fc66:	8c29      	ldrh	r1, [r5, #32]
 800fc68:	f04f 0e37 	mov.w	lr, #55	; 0x37
 800fc6c:	f36e 114a 	bfi	r1, lr, #5, #6
 800fc70:	8429      	strh	r1, [r5, #32]
 800fc72:	2019      	movs	r0, #25
 800fc74:	0a09      	lsrs	r1, r1, #8
 800fc76:	f360 01c7 	bfi	r1, r0, #3, #5
 800fc7a:	f885 1021 	strb.w	r1, [r5, #33]	; 0x21
    lv_style_btn_tgl_rel.image.color       = lv_color_make(0xc8, 0xdd, 0xf4);
 800fc7e:	f895 1030 	ldrb.w	r1, [r5, #48]	; 0x30
 800fc82:	f363 0104 	bfi	r1, r3, #0, #5
 800fc86:	f885 1030 	strb.w	r1, [r5, #48]	; 0x30
 800fc8a:	8e29      	ldrh	r1, [r5, #48]	; 0x30
 800fc8c:	f36e 114a 	bfi	r1, lr, #5, #6
 800fc90:	8629      	strh	r1, [r5, #48]	; 0x30
 800fc92:	0a09      	lsrs	r1, r1, #8
 800fc94:	f360 01c7 	bfi	r1, r0, #3, #5
 800fc98:	f885 1031 	strb.w	r1, [r5, #49]	; 0x31
    lv_style_btn_tgl_rel.line.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 800fc9c:	f895 1034 	ldrb.w	r1, [r5, #52]	; 0x34
 800fca0:	f363 0104 	bfi	r1, r3, #0, #5
 800fca4:	f885 1034 	strb.w	r1, [r5, #52]	; 0x34
 800fca8:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 800fcaa:	f36e 114a 	bfi	r1, lr, #5, #6
 800fcae:	86a9      	strh	r1, [r5, #52]	; 0x34
 800fcb0:	0a09      	lsrs	r1, r1, #8
 800fcb2:	f360 01c7 	bfi	r1, r0, #3, #5
 800fcb6:	f885 1035 	strb.w	r1, [r5, #53]	; 0x35
    lv_style_copy(&lv_style_btn_tgl_pr, &lv_style_btn_tgl_rel);
 800fcba:	4640      	mov	r0, r8
 800fcbc:	4629      	mov	r1, r5
 800fcbe:	f7ff fd09 	bl	800f6d4 <lv_style_copy>
    lv_style_btn_tgl_pr.body.main_color = lv_color_make(0x02, 0x14, 0x27);
 800fcc2:	f898 1002 	ldrb.w	r1, [r8, #2]
    lv_style_copy(&lv_style_btn_ina, &lv_style_btn_rel);
 800fcc6:	4d51      	ldr	r5, [pc, #324]	; (800fe0c <lv_style_init+0x724>)
    lv_style_btn_tgl_pr.body.main_color = lv_color_make(0x02, 0x14, 0x27);
 800fcc8:	f367 0104 	bfi	r1, r7, #0, #5
 800fccc:	f888 1002 	strb.w	r1, [r8, #2]
 800fcd0:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 800fcd4:	2305      	movs	r3, #5
 800fcd6:	f363 114a 	bfi	r1, r3, #5, #6
 800fcda:	f8a8 1002 	strh.w	r1, [r8, #2]
 800fcde:	0a09      	lsrs	r1, r1, #8
 800fce0:	f366 01c7 	bfi	r1, r6, #3, #5
 800fce4:	f888 1003 	strb.w	r1, [r8, #3]
    lv_style_btn_tgl_pr.body.grad_color = lv_color_make(0x2b, 0x4c, 0x70);
 800fce8:	f898 1004 	ldrb.w	r1, [r8, #4]
 800fcec:	f36a 0104 	bfi	r1, sl, #0, #5
 800fcf0:	f888 1004 	strb.w	r1, [r8, #4]
 800fcf4:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 800fcf8:	2013      	movs	r0, #19
 800fcfa:	f360 114a 	bfi	r1, r0, #5, #6
 800fcfe:	f8a8 1004 	strh.w	r1, [r8, #4]
 800fd02:	0a09      	lsrs	r1, r1, #8
 800fd04:	f363 01c7 	bfi	r1, r3, #3, #5
 800fd08:	f888 1005 	strb.w	r1, [r8, #5]
    lv_style_btn_tgl_pr.text.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 800fd0c:	f898 1020 	ldrb.w	r1, [r8, #32]
 800fd10:	9a02      	ldr	r2, [sp, #8]
 800fd12:	f369 0104 	bfi	r1, r9, #0, #5
 800fd16:	f888 1020 	strb.w	r1, [r8, #32]
 800fd1a:	f8b8 1020 	ldrh.w	r1, [r8, #32]
 800fd1e:	f362 114a 	bfi	r1, r2, #5, #6
 800fd22:	f8a8 1020 	strh.w	r1, [r8, #32]
 800fd26:	9b01      	ldr	r3, [sp, #4]
 800fd28:	0a09      	lsrs	r1, r1, #8
 800fd2a:	f363 01c7 	bfi	r1, r3, #3, #5
 800fd2e:	f888 1021 	strb.w	r1, [r8, #33]	; 0x21
    lv_style_btn_tgl_pr.image.color     = lv_color_make(0xa4, 0xb5, 0xc6);
 800fd32:	f898 1030 	ldrb.w	r1, [r8, #48]	; 0x30
 800fd36:	f369 0104 	bfi	r1, r9, #0, #5
 800fd3a:	f888 1030 	strb.w	r1, [r8, #48]	; 0x30
 800fd3e:	f8b8 1030 	ldrh.w	r1, [r8, #48]	; 0x30
 800fd42:	f362 114a 	bfi	r1, r2, #5, #6
 800fd46:	f8a8 1030 	strh.w	r1, [r8, #48]	; 0x30
 800fd4a:	0a09      	lsrs	r1, r1, #8
 800fd4c:	f363 01c7 	bfi	r1, r3, #3, #5
 800fd50:	f888 1031 	strb.w	r1, [r8, #49]	; 0x31
    lv_style_btn_tgl_pr.line.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 800fd54:	f898 1034 	ldrb.w	r1, [r8, #52]	; 0x34
 800fd58:	f369 0104 	bfi	r1, r9, #0, #5
 800fd5c:	f888 1034 	strb.w	r1, [r8, #52]	; 0x34
 800fd60:	f8b8 1034 	ldrh.w	r1, [r8, #52]	; 0x34
 800fd64:	f362 114a 	bfi	r1, r2, #5, #6
 800fd68:	f8a8 1034 	strh.w	r1, [r8, #52]	; 0x34
 800fd6c:	0a09      	lsrs	r1, r1, #8
 800fd6e:	f363 01c7 	bfi	r1, r3, #3, #5
 800fd72:	f888 1035 	strb.w	r1, [r8, #53]	; 0x35
    lv_style_copy(&lv_style_btn_ina, &lv_style_btn_rel);
 800fd76:	4628      	mov	r0, r5
 800fd78:	4621      	mov	r1, r4
 800fd7a:	f7ff fcab 	bl	800f6d4 <lv_style_copy>
    lv_style_btn_ina.body.main_color   = lv_color_make(0xd8, 0xd8, 0xd8);
 800fd7e:	78ab      	ldrb	r3, [r5, #2]
 800fd80:	221b      	movs	r2, #27
 800fd82:	f362 0304 	bfi	r3, r2, #0, #5
 800fd86:	70ab      	strb	r3, [r5, #2]
 800fd88:	886b      	ldrh	r3, [r5, #2]
 800fd8a:	2236      	movs	r2, #54	; 0x36
 800fd8c:	f362 134a 	bfi	r3, r2, #5, #6
 800fd90:	211b      	movs	r1, #27
 800fd92:	806b      	strh	r3, [r5, #2]
 800fd94:	0a1b      	lsrs	r3, r3, #8
 800fd96:	f361 03c7 	bfi	r3, r1, #3, #5
 800fd9a:	70eb      	strb	r3, [r5, #3]
    lv_style_btn_ina.body.grad_color   = lv_color_make(0xd8, 0xd8, 0xd8);
 800fd9c:	792b      	ldrb	r3, [r5, #4]
 800fd9e:	f361 0304 	bfi	r3, r1, #0, #5
 800fda2:	712b      	strb	r3, [r5, #4]
 800fda4:	88ab      	ldrh	r3, [r5, #4]
 800fda6:	f362 134a 	bfi	r3, r2, #5, #6
 800fdaa:	80ab      	strh	r3, [r5, #4]
 800fdac:	0a1b      	lsrs	r3, r3, #8
 800fdae:	f361 03c7 	bfi	r3, r1, #3, #5
 800fdb2:	716b      	strb	r3, [r5, #5]
    lv_style_btn_ina.body.border.color = lv_color_make(0x90, 0x90, 0x90);
 800fdb4:	7aab      	ldrb	r3, [r5, #10]
 800fdb6:	2212      	movs	r2, #18
 800fdb8:	f362 0304 	bfi	r3, r2, #0, #5
 800fdbc:	72ab      	strb	r3, [r5, #10]
 800fdbe:	896b      	ldrh	r3, [r5, #10]
 800fdc0:	2224      	movs	r2, #36	; 0x24
 800fdc2:	f362 134a 	bfi	r3, r2, #5, #6
 800fdc6:	816b      	strh	r3, [r5, #10]
 800fdc8:	2212      	movs	r2, #18
 800fdca:	0a1b      	lsrs	r3, r3, #8
 800fdcc:	f362 03c7 	bfi	r3, r2, #3, #5
 800fdd0:	72eb      	strb	r3, [r5, #11]
    lv_style_btn_ina.text.color        = lv_color_make(0x70, 0x70, 0x70);
 800fdd2:	f895 3020 	ldrb.w	r3, [r5, #32]
 800fdd6:	f36a 0304 	bfi	r3, sl, #0, #5
 800fdda:	f885 3020 	strb.w	r3, [r5, #32]
 800fdde:	8c2b      	ldrh	r3, [r5, #32]
 800fde0:	f36b 134a 	bfi	r3, fp, #5, #6
 800fde4:	842b      	strh	r3, [r5, #32]
 800fde6:	0a1b      	lsrs	r3, r3, #8
 800fde8:	f36a 03c7 	bfi	r3, sl, #3, #5
 800fdec:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
    lv_style_btn_ina.image.color       = lv_color_make(0x70, 0x70, 0x70);
 800fdf0:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800fdf4:	f36a 0304 	bfi	r3, sl, #0, #5
 800fdf8:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 800fdfc:	e00c      	b.n	800fe18 <lv_style_init+0x730>
 800fdfe:	bf00      	nop
 800fe00:	2000c2bc 	.word	0x2000c2bc
 800fe04:	2000c2f8 	.word	0x2000c2f8
 800fe08:	2000c460 	.word	0x2000c460
 800fe0c:	2000c3ac 	.word	0x2000c3ac
 800fe10:	2000c370 	.word	0x2000c370
 800fe14:	2000c4d8 	.word	0x2000c4d8
 800fe18:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 800fe1a:	f36b 134a 	bfi	r3, fp, #5, #6
 800fe1e:	862b      	strh	r3, [r5, #48]	; 0x30
 800fe20:	0a1b      	lsrs	r3, r3, #8
 800fe22:	f36a 03c7 	bfi	r3, sl, #3, #5
 800fe26:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
    lv_style_btn_ina.line.color        = lv_color_make(0x70, 0x70, 0x70);
 800fe2a:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 800fe2e:	f36a 0304 	bfi	r3, sl, #0, #5
 800fe32:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
 800fe36:	8eab      	ldrh	r3, [r5, #52]	; 0x34
 800fe38:	f36b 134a 	bfi	r3, fp, #5, #6
 800fe3c:	86ab      	strh	r3, [r5, #52]	; 0x34
 800fe3e:	0a1b      	lsrs	r3, r3, #8
 800fe40:	f36a 03c7 	bfi	r3, sl, #3, #5
 800fe44:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
}
 800fe48:	b005      	add	sp, #20
 800fe4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe4e:	bf00      	nop

0800fe50 <lv_draw_get_buf>:
 * Be careful to not use the buffer while other processes are using it.
 * @param size the required size
 */
void * lv_draw_get_buf(uint32_t size)
{
    if(size <= draw_buf_size) return LV_GC_ROOT(_lv_draw_buf);
 800fe50:	4b0c      	ldr	r3, [pc, #48]	; (800fe84 <lv_draw_get_buf+0x34>)
 800fe52:	681a      	ldr	r2, [r3, #0]
 800fe54:	4282      	cmp	r2, r0
{
 800fe56:	b510      	push	{r4, lr}
 800fe58:	4601      	mov	r1, r0
 800fe5a:	4c0b      	ldr	r4, [pc, #44]	; (800fe88 <lv_draw_get_buf+0x38>)
    if(size <= draw_buf_size) return LV_GC_ROOT(_lv_draw_buf);
 800fe5c:	d301      	bcc.n	800fe62 <lv_draw_get_buf+0x12>
 800fe5e:	6820      	ldr	r0, [r4, #0]
 800fe60:	bd10      	pop	{r4, pc}

    LV_LOG_TRACE("lv_draw_get_buf: allocate");

    draw_buf_size = size;
 800fe62:	6018      	str	r0, [r3, #0]

    if(LV_GC_ROOT(_lv_draw_buf) == NULL) {
 800fe64:	6823      	ldr	r3, [r4, #0]
 800fe66:	b923      	cbnz	r3, 800fe72 <lv_draw_get_buf+0x22>
        LV_GC_ROOT(_lv_draw_buf) = lv_mem_alloc(size);
 800fe68:	f004 f83a 	bl	8013ee0 <lv_mem_alloc>
 800fe6c:	6020      	str	r0, [r4, #0]
        lv_mem_assert(LV_GC_ROOT(_lv_draw_buf));
 800fe6e:	b938      	cbnz	r0, 800fe80 <lv_draw_get_buf+0x30>
 800fe70:	e7fe      	b.n	800fe70 <lv_draw_get_buf+0x20>
        return LV_GC_ROOT(_lv_draw_buf);
    }

    LV_GC_ROOT(_lv_draw_buf) = lv_mem_realloc(LV_GC_ROOT(_lv_draw_buf), size);
 800fe72:	4618      	mov	r0, r3
 800fe74:	f004 f894 	bl	8013fa0 <lv_mem_realloc>
    lv_mem_assert(LV_GC_ROOT(_lv_draw_buf));
 800fe78:	b108      	cbz	r0, 800fe7e <lv_draw_get_buf+0x2e>
    LV_GC_ROOT(_lv_draw_buf) = lv_mem_realloc(LV_GC_ROOT(_lv_draw_buf), size);
 800fe7a:	6020      	str	r0, [r4, #0]
 800fe7c:	bd10      	pop	{r4, pc}
 800fe7e:	e7fe      	b.n	800fe7e <lv_draw_get_buf+0x2e>
    return LV_GC_ROOT(_lv_draw_buf);
}
 800fe80:	bd10      	pop	{r4, pc}
 800fe82:	bf00      	nop
 800fe84:	20005f74 	.word	0x20005f74
 800fe88:	2000c568 	.word	0x2000c568

0800fe8c <lv_draw_free_buf>:

/**
 * Free the draw buffer
 */
void lv_draw_free_buf(void)
{
 800fe8c:	b510      	push	{r4, lr}
    if(LV_GC_ROOT(_lv_draw_buf)) {
 800fe8e:	4c05      	ldr	r4, [pc, #20]	; (800fea4 <lv_draw_free_buf+0x18>)
 800fe90:	6820      	ldr	r0, [r4, #0]
 800fe92:	b128      	cbz	r0, 800fea0 <lv_draw_free_buf+0x14>
        lv_mem_free(LV_GC_ROOT(_lv_draw_buf));
 800fe94:	f004 f85a 	bl	8013f4c <lv_mem_free>
        LV_GC_ROOT(_lv_draw_buf) = NULL;
        draw_buf_size = 0;
 800fe98:	4a03      	ldr	r2, [pc, #12]	; (800fea8 <lv_draw_free_buf+0x1c>)
        LV_GC_ROOT(_lv_draw_buf) = NULL;
 800fe9a:	2300      	movs	r3, #0
 800fe9c:	6023      	str	r3, [r4, #0]
        draw_buf_size = 0;
 800fe9e:	6013      	str	r3, [r2, #0]
 800fea0:	bd10      	pop	{r4, pc}
 800fea2:	bf00      	nop
 800fea4:	2000c568 	.word	0x2000c568
 800fea8:	20005f74 	.word	0x20005f74

0800feac <lv_draw_aa_get_opa>:
    static const lv_opa_t seg7[7] = {18, 55, 91, 128, 164, 200, 237};
    static const lv_opa_t seg8[8] = {16, 48, 80, 112, 143, 175, 207, 239};

    static const lv_opa_t * seg_map[] = {seg1, seg2, seg3, seg4, seg5, seg6, seg7, seg8};

    if(seg == 0)
 800feac:	b188      	cbz	r0, 800fed2 <lv_draw_aa_get_opa+0x26>
        return LV_OPA_TRANSP;
    else if(seg < 8)
 800feae:	2807      	cmp	r0, #7
 800feb0:	dc08      	bgt.n	800fec4 <lv_draw_aa_get_opa+0x18>
        return (uint32_t)((uint32_t)seg_map[seg - 1][px_id] * base_opa) >> 8;
 800feb2:	3801      	subs	r0, #1
 800feb4:	4b07      	ldr	r3, [pc, #28]	; (800fed4 <lv_draw_aa_get_opa+0x28>)
 800feb6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800feba:	5c58      	ldrb	r0, [r3, r1]
 800febc:	fb10 f002 	smulbb	r0, r0, r2
 800fec0:	0a00      	lsrs	r0, r0, #8
 800fec2:	4770      	bx	lr
    else {
        return ((px_id * 2 + 1) * base_opa) / (2 * seg);
 800fec4:	0049      	lsls	r1, r1, #1
 800fec6:	fb01 2202 	mla	r2, r1, r2, r2
 800feca:	0040      	lsls	r0, r0, #1
 800fecc:	fb92 f0f0 	sdiv	r0, r2, r0
 800fed0:	b2c0      	uxtb	r0, r0
    }
}
 800fed2:	4770      	bx	lr
 800fed4:	080d8984 	.word	0x080d8984

0800fed8 <lv_color_mix>:
static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 800fed8:	f1c2 03ff 	rsb	r3, r2, #255	; 0xff
{
 800fedc:	b570      	push	{r4, r5, r6, lr}
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 800fede:	b294      	uxth	r4, r2
 800fee0:	b29a      	uxth	r2, r3
 800fee2:	f3c1 23c4 	ubfx	r3, r1, #11, #5
 800fee6:	fb13 f302 	smulbb	r3, r3, r2
 800feea:	f3c0 25c4 	ubfx	r5, r0, #11, #5
    uint16_t g_2   = (c2.ch.green_h << 3) + c2.ch.green_l;
    uint16_t g_out = (uint16_t)((uint16_t)g_1 * mix + (g_2 * (255 - mix))) >> 8;
    ret.ch.green_h = g_out >> 3;
    ret.ch.green_l = g_out & 0x7;
#else
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 800feee:	f3c1 1645 	ubfx	r6, r1, #5, #6
#endif
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 800fef2:	f001 011f 	and.w	r1, r1, #31
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 800fef6:	fb05 3504 	mla	r5, r5, r4, r3
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 800fefa:	fb16 f602 	smulbb	r6, r6, r2
 800fefe:	f3c0 1345 	ubfx	r3, r0, #5, #6
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 800ff02:	fb11 f202 	smulbb	r2, r1, r2
 800ff06:	f000 001f 	and.w	r0, r0, #31
 800ff0a:	fb00 2204 	mla	r2, r0, r4, r2
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 800ff0e:	fb03 6304 	mla	r3, r3, r4, r6
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 800ff12:	f3c2 2207 	ubfx	r2, r2, #8, #8
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 800ff16:	f04f 0000 	mov.w	r0, #0
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 800ff1a:	f3c3 2305 	ubfx	r3, r3, #8, #6
    return ret;
 800ff1e:	f362 0004 	bfi	r0, r2, #0, #5
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 800ff22:	f3c5 2504 	ubfx	r5, r5, #8, #5
    return ret;
 800ff26:	f363 104a 	bfi	r0, r3, #5, #6
 800ff2a:	f365 20cf 	bfi	r0, r5, #11, #5
}
 800ff2e:	bd70      	pop	{r4, r5, r6, pc}

0800ff30 <lv_draw_px>:
 * @param mask_p fill only on this mask (truncated to VDB area)
 * @param color pixel color
 * @param opa opacity of the area (0..255)
 */
void lv_draw_px(lv_coord_t x, lv_coord_t y, const lv_area_t * mask_p, lv_color_t color, lv_opa_t opa)
{
 800ff30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ff34:	b085      	sub	sp, #20
 800ff36:	4606      	mov	r6, r0
 800ff38:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30

    if(opa < LV_OPA_MIN) return;
 800ff3c:	f1b9 0f0f 	cmp.w	r9, #15
{
 800ff40:	460d      	mov	r5, r1
 800ff42:	461f      	mov	r7, r3
    if(opa < LV_OPA_MIN) return;
 800ff44:	d92e      	bls.n	800ffa4 <lv_draw_px+0x74>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;

    /*Pixel out of the mask*/
    if(x < mask_p->x1 || x > mask_p->x2 || y < mask_p->y1 || y > mask_p->y2) {
 800ff46:	f9b2 3000 	ldrsh.w	r3, [r2]
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800ff4a:	f1b9 0ffc 	cmp.w	r9, #252	; 0xfc
 800ff4e:	bf28      	it	cs
 800ff50:	f04f 09ff 	movcs.w	r9, #255	; 0xff
    if(x < mask_p->x1 || x > mask_p->x2 || y < mask_p->y1 || y > mask_p->y2) {
 800ff54:	4283      	cmp	r3, r0
 800ff56:	dc25      	bgt.n	800ffa4 <lv_draw_px+0x74>
 800ff58:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 800ff5c:	4283      	cmp	r3, r0
 800ff5e:	db21      	blt.n	800ffa4 <lv_draw_px+0x74>
 800ff60:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 800ff64:	428b      	cmp	r3, r1
 800ff66:	dc1d      	bgt.n	800ffa4 <lv_draw_px+0x74>
 800ff68:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 800ff6c:	428b      	cmp	r3, r1
 800ff6e:	db19      	blt.n	800ffa4 <lv_draw_px+0x74>
        return;
    }

    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
 800ff70:	f7ff fa06 	bl	800f380 <lv_refr_get_disp_refreshing>
 800ff74:	4680      	mov	r8, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800ff76:	f003 fbcb 	bl	8013710 <lv_disp_get_buf>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return area_p->x2 - area_p->x1 + 1;
 800ff7a:	8a82      	ldrh	r2, [r0, #20]
 800ff7c:	8a04      	ldrh	r4, [r0, #16]
 800ff7e:	3201      	adds	r2, #1
 800ff80:	1b12      	subs	r2, r2, r4
    uint32_t vdb_width  = lv_area_get_width(&vdb->area);

    /*Make the coordinates relative to VDB*/
    x -= vdb->area.x1;
 800ff82:	1b36      	subs	r6, r6, r4
    y -= vdb->area.y1;
 800ff84:	8a44      	ldrh	r4, [r0, #18]
 800ff86:	1b2c      	subs	r4, r5, r4

    if(disp->driver.set_px_cb) {
 800ff88:	f8d8 5014 	ldr.w	r5, [r8, #20]
 800ff8c:	b212      	sxth	r2, r2
    x -= vdb->area.x1;
 800ff8e:	b233      	sxth	r3, r6
    y -= vdb->area.y1;
 800ff90:	b224      	sxth	r4, r4
    if(disp->driver.set_px_cb) {
 800ff92:	b155      	cbz	r5, 800ffaa <lv_draw_px+0x7a>
        disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, x, y, color, opa);
 800ff94:	f8cd 9008 	str.w	r9, [sp, #8]
 800ff98:	f8ad 7004 	strh.w	r7, [sp, #4]
 800ff9c:	9400      	str	r4, [sp, #0]
 800ff9e:	6881      	ldr	r1, [r0, #8]
 800ffa0:	4640      	mov	r0, r8
 800ffa2:	47a8      	blx	r5
#if LV_COLOR_DEPTH == 32 && LV_COLOR_SCREEN_TRANSP
            *vdb_px_p = color_mix_2_alpha(*vdb_px_p, (*vdb_px_p).ch.alpha, color, opa);
#endif
        }
    }
}
 800ffa4:	b005      	add	sp, #20
 800ffa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            if(opa == LV_OPA_COVER) {
 800ffaa:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
        lv_color_t * vdb_px_p = vdb->buf_act;
 800ffae:	6885      	ldr	r5, [r0, #8]
        vdb_px_p += y * vdb_width + x;
 800ffb0:	fb02 3404 	mla	r4, r2, r4, r3
            if(opa == LV_OPA_COVER) {
 800ffb4:	d102      	bne.n	800ffbc <lv_draw_px+0x8c>
                *vdb_px_p = color;
 800ffb6:	f825 7014 	strh.w	r7, [r5, r4, lsl #1]
 800ffba:	e7f3      	b.n	800ffa4 <lv_draw_px+0x74>
                *vdb_px_p = lv_color_mix(color, *vdb_px_p, opa);
 800ffbc:	464a      	mov	r2, r9
 800ffbe:	f835 1014 	ldrh.w	r1, [r5, r4, lsl #1]
 800ffc2:	4638      	mov	r0, r7
 800ffc4:	f7ff ff88 	bl	800fed8 <lv_color_mix>
 800ffc8:	f825 0014 	strh.w	r0, [r5, r4, lsl #1]
 800ffcc:	e7ea      	b.n	800ffa4 <lv_draw_px+0x74>

0800ffce <lv_draw_fill>:
 * @param mask_p fill only o this mask  (truncated to VDB area)
 * @param color fill color
 * @param opa opacity of the area (0..255)
 */
void lv_draw_fill(const lv_area_t * cords_p, const lv_area_t * mask_p, lv_color_t color, lv_opa_t opa)
{
 800ffce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(opa < LV_OPA_MIN) return;
 800ffd2:	2b0f      	cmp	r3, #15
{
 800ffd4:	b08b      	sub	sp, #44	; 0x2c
 800ffd6:	4692      	mov	sl, r2
 800ffd8:	461e      	mov	r6, r3
    if(opa < LV_OPA_MIN) return;
 800ffda:	d94c      	bls.n	8010076 <lv_draw_fill+0xa8>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800ffdc:	2bfc      	cmp	r3, #252	; 0xfc
    bool union_ok;

    /*Get the union of cord and mask*/
    /* The mask is already truncated to the vdb size
     * in 'lv_refr_area_with_vdb' function */
    union_ok = lv_area_intersect(&res_a, cords_p, mask_p);
 800ffde:	460a      	mov	r2, r1
 800ffe0:	4601      	mov	r1, r0
 800ffe2:	a808      	add	r0, sp, #32
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800ffe4:	bf34      	ite	cc
 800ffe6:	461e      	movcc	r6, r3
 800ffe8:	26ff      	movcs	r6, #255	; 0xff
    union_ok = lv_area_intersect(&res_a, cords_p, mask_p);
 800ffea:	f003 fd2c 	bl	8013a46 <lv_area_intersect>

    /*If there are common part of the three area then draw to the vdb*/
    if(union_ok == false) {
 800ffee:	2800      	cmp	r0, #0
 800fff0:	d041      	beq.n	8010076 <lv_draw_fill+0xa8>
        return;
    }

    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
 800fff2:	f7ff f9c5 	bl	800f380 <lv_refr_get_disp_refreshing>
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800fff6:	f003 fb8b 	bl	8013710 <lv_disp_get_buf>

    lv_area_t vdb_rel_a; /*Stores relative coordinates on vdb*/
    vdb_rel_a.x1 = res_a.x1 - vdb->area.x1;
    vdb_rel_a.y1 = res_a.y1 - vdb->area.y1;
    vdb_rel_a.x2 = res_a.x2 - vdb->area.x1;
 800fffa:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
    vdb_rel_a.x1 = res_a.x1 - vdb->area.x1;
 800fffe:	8a03      	ldrh	r3, [r0, #16]
    vdb_rel_a.y1 = res_a.y1 - vdb->area.y1;
 8010000:	8a45      	ldrh	r5, [r0, #18]
 8010002:	f8bd 9022 	ldrh.w	r9, [sp, #34]	; 0x22
    vdb_rel_a.x1 = res_a.x1 - vdb->area.x1;
 8010006:	f8bd 4020 	ldrh.w	r4, [sp, #32]
    vdb_rel_a.x2 = res_a.x2 - vdb->area.x1;
 801000a:	1ac9      	subs	r1, r1, r3
 801000c:	b20a      	sxth	r2, r1
 801000e:	9205      	str	r2, [sp, #20]
    vdb_rel_a.y2 = res_a.y2 - vdb->area.y1;
 8010010:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
    vdb_rel_a.y1 = res_a.y1 - vdb->area.y1;
 8010014:	eba9 0905 	sub.w	r9, r9, r5
    vdb_rel_a.y2 = res_a.y2 - vdb->area.y1;
 8010018:	1b52      	subs	r2, r2, r5
 801001a:	8a85      	ldrh	r5, [r0, #20]
 801001c:	b212      	sxth	r2, r2
 801001e:	9206      	str	r2, [sp, #24]
 8010020:	3501      	adds	r5, #1

    lv_color_t * vdb_buf_tmp = vdb->buf_act;
 8010022:	6882      	ldr	r2, [r0, #8]
 8010024:	9207      	str	r2, [sp, #28]
    vdb_rel_a.x1 = res_a.x1 - vdb->area.x1;
 8010026:	1ae4      	subs	r4, r4, r3
 8010028:	1aed      	subs	r5, r5, r3
{
    /*Set all row in vdb to the given color*/
    lv_coord_t row;
    lv_coord_t col;

    lv_disp_t * disp = lv_refr_get_disp_refreshing();
 801002a:	f7ff f9a9 	bl	800f380 <lv_refr_get_disp_refreshing>
    if(disp->driver.set_px_cb) {
 801002e:	6943      	ldr	r3, [r0, #20]
    vdb_rel_a.y1 = res_a.y1 - vdb->area.y1;
 8010030:	fa1f f989 	uxth.w	r9, r9
    vdb_rel_a.x1 = res_a.x1 - vdb->area.x1;
 8010034:	b224      	sxth	r4, r4
    vdb_rel_a.y1 = res_a.y1 - vdb->area.y1;
 8010036:	fa0f f889 	sxth.w	r8, r9
 801003a:	b22d      	sxth	r5, r5
    lv_disp_t * disp = lv_refr_get_disp_refreshing();
 801003c:	4683      	mov	fp, r0
    if(disp->driver.set_px_cb) {
 801003e:	bb93      	cbnz	r3, 80100a6 <lv_draw_fill+0xd8>
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
                disp->driver.set_px_cb(&disp->driver, (uint8_t *)mem, mem_width, col, row, color, opa);
            }
        }
    } else {
        mem += fill_area->y1 * mem_width; /*Go to the first row*/
 8010040:	9907      	ldr	r1, [sp, #28]
 8010042:	fb08 f205 	mul.w	r2, r8, r5

        /*Run simpler function without opacity*/
        if(opa == LV_OPA_COVER) {
 8010046:	2eff      	cmp	r6, #255	; 0xff
        mem += fill_area->y1 * mem_width; /*Go to the first row*/
 8010048:	eb01 0742 	add.w	r7, r1, r2, lsl #1
        if(opa == LV_OPA_COVER) {
 801004c:	d13e      	bne.n	80100cc <lv_draw_fill+0xfe>
 801004e:	4623      	mov	r3, r4

            /*Fill the first row with 'color'*/
            for(col = fill_area->x1; col <= fill_area->x2; col++) {
 8010050:	9a05      	ldr	r2, [sp, #20]
 8010052:	429a      	cmp	r2, r3
 8010054:	da2c      	bge.n	80100b0 <lv_draw_fill+0xe2>
                mem[col] = color;
            }

            /*Copy the first row to all other rows*/
            lv_color_t * mem_first = &mem[fill_area->x1];
 8010056:	0063      	lsls	r3, r4, #1
            lv_coord_t copy_size   = (fill_area->x2 - fill_area->x1 + 1) * sizeof(lv_color_t);
 8010058:	1b14      	subs	r4, r2, r4
 801005a:	3401      	adds	r4, #1
            mem += mem_width;
 801005c:	006d      	lsls	r5, r5, #1
            lv_color_t * mem_first = &mem[fill_area->x1];
 801005e:	eb07 0803 	add.w	r8, r7, r3
            lv_coord_t copy_size   = (fill_area->x2 - fill_area->x1 + 1) * sizeof(lv_color_t);
 8010062:	0064      	lsls	r4, r4, #1

            for(row = fill_area->y1 + 1; row <= fill_area->y2; row++) {
 8010064:	f109 0601 	add.w	r6, r9, #1
 8010068:	442b      	add	r3, r5
            lv_coord_t copy_size   = (fill_area->x2 - fill_area->x1 + 1) * sizeof(lv_color_t);
 801006a:	b224      	sxth	r4, r4
            for(row = fill_area->y1 + 1; row <= fill_area->y2; row++) {
 801006c:	b236      	sxth	r6, r6
 801006e:	441f      	add	r7, r3
 8010070:	9b06      	ldr	r3, [sp, #24]
 8010072:	42b3      	cmp	r3, r6
 8010074:	da21      	bge.n	80100ba <lv_draw_fill+0xec>
}
 8010076:	b00b      	add	sp, #44	; 0x2c
 8010078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                disp->driver.set_px_cb(&disp->driver, (uint8_t *)mem, mem_width, col, row, color, opa);
 801007c:	f8cd 9000 	str.w	r9, [sp]
 8010080:	9602      	str	r6, [sp, #8]
 8010082:	f8ad a004 	strh.w	sl, [sp, #4]
 8010086:	4623      	mov	r3, r4
 8010088:	462a      	mov	r2, r5
 801008a:	9907      	ldr	r1, [sp, #28]
 801008c:	f8db 7014 	ldr.w	r7, [fp, #20]
 8010090:	4658      	mov	r0, fp
 8010092:	47b8      	blx	r7
 8010094:	f109 0901 	add.w	r9, r9, #1
 8010098:	fa0f f989 	sxth.w	r9, r9
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 801009c:	9b06      	ldr	r3, [sp, #24]
 801009e:	454b      	cmp	r3, r9
 80100a0:	daec      	bge.n	801007c <lv_draw_fill+0xae>
 80100a2:	3401      	adds	r4, #1
 80100a4:	b224      	sxth	r4, r4
        for(col = fill_area->x1; col <= fill_area->x2; col++) {
 80100a6:	9b05      	ldr	r3, [sp, #20]
 80100a8:	42a3      	cmp	r3, r4
 80100aa:	dbe4      	blt.n	8010076 <lv_draw_fill+0xa8>
 80100ac:	46c1      	mov	r9, r8
 80100ae:	e7f5      	b.n	801009c <lv_draw_fill+0xce>
                mem[col] = color;
 80100b0:	f827 a013 	strh.w	sl, [r7, r3, lsl #1]
 80100b4:	3301      	adds	r3, #1
 80100b6:	b21b      	sxth	r3, r3
 80100b8:	e7ca      	b.n	8010050 <lv_draw_fill+0x82>
                memcpy(&mem[fill_area->x1], mem_first, copy_size);
 80100ba:	4638      	mov	r0, r7
 80100bc:	4622      	mov	r2, r4
 80100be:	4641      	mov	r1, r8
 80100c0:	3601      	adds	r6, #1
 80100c2:	f009 fa27 	bl	8019514 <memcpy>
 80100c6:	b236      	sxth	r6, r6
 80100c8:	442f      	add	r7, r5
 80100ca:	e7d1      	b.n	8010070 <lv_draw_fill+0xa2>
            bool scr_transp = false;
#if LV_COLOR_DEPTH == 32 && LV_COLOR_SCREEN_TRANSP
            scr_transp = disp->driver.screen_transp;
#endif

            lv_color_t bg_tmp  = LV_COLOR_BLACK;
 80100cc:	f04f 0900 	mov.w	r9, #0
 80100d0:	f363 0904 	bfi	r9, r3, #0, #5
 80100d4:	f363 194a 	bfi	r9, r3, #5, #6
 80100d8:	f363 29cf 	bfi	r9, r3, #11, #5
            lv_color_t opa_tmp = lv_color_mix(color, bg_tmp, opa);
 80100dc:	4632      	mov	r2, r6
 80100de:	4649      	mov	r1, r9
 80100e0:	4650      	mov	r0, sl
 80100e2:	f7ff fef9 	bl	800fed8 <lv_color_mix>
#if LV_COLOR_DEPTH == 32 && LV_COLOR_SCREEN_TRANSP
                        mem[col] = color_mix_2_alpha(mem[col], mem[col].ch.alpha, color, opa);
#endif
                    }
                }
                mem += mem_width;
 80100e6:	006b      	lsls	r3, r5, #1
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 80100e8:	9a06      	ldr	r2, [sp, #24]
 80100ea:	4542      	cmp	r2, r8
 80100ec:	dbc3      	blt.n	8010076 <lv_draw_fill+0xa8>
 80100ee:	4625      	mov	r5, r4
 80100f0:	e012      	b.n	8010118 <lv_draw_fill+0x14a>
                        if(mem[col].full != bg_tmp.full) {
 80100f2:	f837 1015 	ldrh.w	r1, [r7, r5, lsl #1]
 80100f6:	fa1f f289 	uxth.w	r2, r9
 80100fa:	4291      	cmp	r1, r2
 80100fc:	eb07 0b45 	add.w	fp, r7, r5, lsl #1
 8010100:	d006      	beq.n	8010110 <lv_draw_fill+0x142>
                            opa_tmp = lv_color_mix(color, bg_tmp, opa);
 8010102:	4632      	mov	r2, r6
 8010104:	4650      	mov	r0, sl
 8010106:	9307      	str	r3, [sp, #28]
                            bg_tmp  = mem[col];
 8010108:	4689      	mov	r9, r1
                            opa_tmp = lv_color_mix(color, bg_tmp, opa);
 801010a:	f7ff fee5 	bl	800fed8 <lv_color_mix>
 801010e:	9b07      	ldr	r3, [sp, #28]
                        mem[col] = opa_tmp;
 8010110:	f8ab 0000 	strh.w	r0, [fp]
 8010114:	3501      	adds	r5, #1
 8010116:	b22d      	sxth	r5, r5
                for(col = fill_area->x1; col <= fill_area->x2; col++) {
 8010118:	9a05      	ldr	r2, [sp, #20]
 801011a:	42aa      	cmp	r2, r5
 801011c:	dae9      	bge.n	80100f2 <lv_draw_fill+0x124>
 801011e:	f108 0801 	add.w	r8, r8, #1
                mem += mem_width;
 8010122:	441f      	add	r7, r3
 8010124:	fa0f f888 	sxth.w	r8, r8
 8010128:	e7de      	b.n	80100e8 <lv_draw_fill+0x11a>
	...

0801012c <lv_draw_letter>:
{
 801012c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010130:	b09b      	sub	sp, #108	; 0x6c
 8010132:	4615      	mov	r5, r2
 8010134:	4699      	mov	r9, r3
    const uint8_t bpp1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 8010136:	2200      	movs	r2, #0
{
 8010138:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 801013c:	9305      	str	r3, [sp, #20]
    const uint8_t bpp1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 801013e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
 8010142:	23ff      	movs	r3, #255	; 0xff
    const uint8_t bpp2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 8010144:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
 8010148:	2255      	movs	r2, #85	; 0x55
    const uint8_t bpp1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 801014a:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
    const uint8_t bpp2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 801014e:	f88d 204d 	strb.w	r2, [sp, #77]	; 0x4d
 8010152:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
 8010156:	22aa      	movs	r2, #170	; 0xaa
    const uint8_t bpp4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 8010158:	4bb5      	ldr	r3, [pc, #724]	; (8010430 <lv_draw_letter+0x304>)
    const uint8_t bpp2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 801015a:	f88d 204e 	strb.w	r2, [sp, #78]	; 0x4e
    const uint8_t bpp4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 801015e:	aa16      	add	r2, sp, #88	; 0x58
{
 8010160:	4604      	mov	r4, r0
 8010162:	460f      	mov	r7, r1
    const uint8_t bpp4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 8010164:	f103 0c10 	add.w	ip, r3, #16
 8010168:	4616      	mov	r6, r2
 801016a:	6818      	ldr	r0, [r3, #0]
 801016c:	6859      	ldr	r1, [r3, #4]
 801016e:	4696      	mov	lr, r2
 8010170:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8010174:	3308      	adds	r3, #8
 8010176:	4563      	cmp	r3, ip
 8010178:	4672      	mov	r2, lr
 801017a:	d1f6      	bne.n	801016a <lv_draw_letter+0x3e>
    if(opa < LV_OPA_MIN) return;
 801017c:	9b05      	ldr	r3, [sp, #20]
 801017e:	2b0f      	cmp	r3, #15
 8010180:	f240 80d4 	bls.w	801032c <lv_draw_letter+0x200>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 8010184:	2bfc      	cmp	r3, #252	; 0xfc
 8010186:	bf28      	it	cs
 8010188:	23ff      	movcs	r3, #255	; 0xff
 801018a:	9305      	str	r3, [sp, #20]
    if(font_p == NULL) {
 801018c:	2d00      	cmp	r5, #0
 801018e:	f000 80cd 	beq.w	801032c <lv_draw_letter+0x200>
    bool g_ret = lv_font_get_glyph_dsc(font_p, &g, letter, '\0');
 8010192:	2300      	movs	r3, #0
 8010194:	464a      	mov	r2, r9
 8010196:	a914      	add	r1, sp, #80	; 0x50
 8010198:	4628      	mov	r0, r5
 801019a:	f003 f8d5 	bl	8013348 <lv_font_get_glyph_dsc>
    if(g_ret == false) return;
 801019e:	2800      	cmp	r0, #0
 80101a0:	f000 80c4 	beq.w	801032c <lv_draw_letter+0x200>
    switch(g.bpp) {
 80101a4:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
 80101a8:	3b01      	subs	r3, #1
 80101aa:	2b07      	cmp	r3, #7
 80101ac:	f200 80be 	bhi.w	801032c <lv_draw_letter+0x200>
 80101b0:	e8df f003 	tbb	[pc, r3]
 80101b4:	09bcc304 	.word	0x09bcc304
 80101b8:	bfbcbcbc 	.word	0xbfbcbcbc
            bitmask_init  = 0x80;
 80101bc:	2380      	movs	r3, #128	; 0x80
 80101be:	9308      	str	r3, [sp, #32]
            bpp_opa_table = bpp1_opa_table;
 80101c0:	ab12      	add	r3, sp, #72	; 0x48
            bpp_opa_table = bpp2_opa_table;
 80101c2:	9307      	str	r3, [sp, #28]
 80101c4:	e002      	b.n	80101cc <lv_draw_letter+0xa0>
            bitmask_init  = 0xF0;
 80101c6:	23f0      	movs	r3, #240	; 0xf0
 80101c8:	9308      	str	r3, [sp, #32]
            bpp_opa_table = bpp4_opa_table;
 80101ca:	9607      	str	r6, [sp, #28]
    lv_coord_t pos_x = pos_p->x + g.ofs_x;
 80101cc:	f99d 2054 	ldrsb.w	r2, [sp, #84]	; 0x54
    lv_coord_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
 80101d0:	f99d 3055 	ldrsb.w	r3, [sp, #85]	; 0x55
    lv_coord_t pos_x = pos_p->x + g.ofs_x;
 80101d4:	f9b4 8000 	ldrsh.w	r8, [r4]
 80101d8:	9209      	str	r2, [sp, #36]	; 0x24
    const uint8_t * map_p = lv_font_get_glyph_bitmap(font_p, letter);
 80101da:	4649      	mov	r1, r9
 80101dc:	4628      	mov	r0, r5
    lv_coord_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
 80101de:	f9b4 4002 	ldrsh.w	r4, [r4, #2]
 80101e2:	f895 b008 	ldrb.w	fp, [r5, #8]
 80101e6:	f895 a009 	ldrb.w	sl, [r5, #9]
 80101ea:	f89d 6053 	ldrb.w	r6, [sp, #83]	; 0x53
 80101ee:	9306      	str	r3, [sp, #24]
    const uint8_t * map_p = lv_font_get_glyph_bitmap(font_p, letter);
 80101f0:	f003 f8a8 	bl	8013344 <lv_font_get_glyph_bitmap>
    if(map_p == NULL) return;
 80101f4:	4681      	mov	r9, r0
 80101f6:	2800      	cmp	r0, #0
 80101f8:	f000 8098 	beq.w	801032c <lv_draw_letter+0x200>
    lv_coord_t pos_x = pos_p->x + g.ofs_x;
 80101fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
 80101fe:	f9b7 1000 	ldrsh.w	r1, [r7]
    lv_coord_t pos_x = pos_p->x + g.ofs_x;
 8010202:	4490      	add	r8, r2
 8010204:	fa1f f388 	uxth.w	r3, r8
 8010208:	930a      	str	r3, [sp, #40]	; 0x28
 801020a:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
 801020e:	f89d 2052 	ldrb.w	r2, [sp, #82]	; 0x52
 8010212:	4442      	add	r2, r8
 8010214:	428a      	cmp	r2, r1
 8010216:	f2c0 8089 	blt.w	801032c <lv_draw_letter+0x200>
 801021a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 801021e:	4542      	cmp	r2, r8
 8010220:	f2c0 8084 	blt.w	801032c <lv_draw_letter+0x200>
    lv_coord_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
 8010224:	9b06      	ldr	r3, [sp, #24]
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
 8010226:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
    lv_coord_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
 801022a:	441e      	add	r6, r3
 801022c:	1ba4      	subs	r4, r4, r6
 801022e:	44a3      	add	fp, r4
 8010230:	ebab 0a0a 	sub.w	sl, fp, sl
 8010234:	fa1f f38a 	uxth.w	r3, sl
 8010238:	930b      	str	r3, [sp, #44]	; 0x2c
 801023a:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
 801023e:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
 8010242:	445b      	add	r3, fp
 8010244:	4293      	cmp	r3, r2
 8010246:	db71      	blt.n	801032c <lv_draw_letter+0x200>
 8010248:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801024c:	455b      	cmp	r3, fp
 801024e:	db6d      	blt.n	801032c <lv_draw_letter+0x200>
    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
 8010250:	f7ff f896 	bl	800f380 <lv_refr_get_disp_refreshing>
 8010254:	900f      	str	r0, [sp, #60]	; 0x3c
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8010256:	f003 fa5b 	bl	8013710 <lv_disp_get_buf>
 801025a:	8a83      	ldrh	r3, [r0, #20]
 801025c:	f9b0 2010 	ldrsh.w	r2, [r0, #16]
    uint8_t width_byte_scr = g.box_w >> 3; /*Width in bytes (on the screen finally) (e.g. w = 11 -> 2 bytes wide)*/
 8010260:	f89d 6052 	ldrb.w	r6, [sp, #82]	; 0x52
    lv_color_t * vdb_buf_tmp = vdb->buf_act;
 8010264:	f8d0 c008 	ldr.w	ip, [r0, #8]
    uint16_t width_bit = g.box_w * g.bpp; /*Letter width in bits*/
 8010268:	f89d 4056 	ldrb.w	r4, [sp, #86]	; 0x56
    lv_coord_t row_start = pos_y >= mask_p->y1 ? 0 : mask_p->y1 - pos_y;
 801026c:	f9b7 5002 	ldrsh.w	r5, [r7, #2]
 8010270:	3301      	adds	r3, #1
 8010272:	1a9b      	subs	r3, r3, r2
 8010274:	b21b      	sxth	r3, r3
 8010276:	930d      	str	r3, [sp, #52]	; 0x34
    lv_coord_t col_start = pos_x >= mask_p->x1 ? 0 : mask_p->x1 - pos_x;
 8010278:	f9b7 3000 	ldrsh.w	r3, [r7]
 801027c:	4598      	cmp	r8, r3
 801027e:	bfbd      	ittte	lt
 8010280:	990a      	ldrlt	r1, [sp, #40]	; 0x28
 8010282:	1a5b      	sublt	r3, r3, r1
 8010284:	b29b      	uxthlt	r3, r3
 8010286:	2300      	movge	r3, #0
 8010288:	b219      	sxth	r1, r3
 801028a:	9106      	str	r1, [sp, #24]
    lv_coord_t col_end   = pos_x + g.box_w <= mask_p->x2 ? g.box_w : mask_p->x2 - pos_x + 1;
 801028c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8010290:	4682      	mov	sl, r0
    lv_coord_t col_end   = pos_x + g.box_w <= mask_p->x2 ? g.box_w : mask_p->x2 - pos_x + 1;
 8010292:	eb08 0006 	add.w	r0, r8, r6
 8010296:	4288      	cmp	r0, r1
    uint16_t width_bit = g.box_w * g.bpp; /*Letter width in bits*/
 8010298:	fb06 fe04 	mul.w	lr, r6, r4
    lv_coord_t col_end   = pos_x + g.box_w <= mask_p->x2 ? g.box_w : mask_p->x2 - pos_x + 1;
 801029c:	bfc4      	itt	gt
 801029e:	1c4e      	addgt	r6, r1, #1
 80102a0:	990a      	ldrgt	r1, [sp, #40]	; 0x28
    lv_coord_t row_end   = pos_y + g.box_h <= mask_p->y2 ? g.box_h : mask_p->y2 - pos_y + 1;
 80102a2:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
    lv_coord_t col_end   = pos_x + g.box_w <= mask_p->x2 ? g.box_w : mask_p->x2 - pos_x + 1;
 80102a6:	bfc8      	it	gt
 80102a8:	1a76      	subgt	r6, r6, r1
    lv_coord_t row_start = pos_y >= mask_p->y1 ? 0 : mask_p->y1 - pos_y;
 80102aa:	45ab      	cmp	fp, r5
 80102ac:	bfbc      	itt	lt
 80102ae:	990b      	ldrlt	r1, [sp, #44]	; 0x2c
 80102b0:	1a6d      	sublt	r5, r5, r1
    lv_coord_t row_end   = pos_y + g.box_h <= mask_p->y2 ? g.box_h : mask_p->y2 - pos_y + 1;
 80102b2:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80102b6:	eb00 070b 	add.w	r7, r0, fp
    lv_coord_t row_start = pos_y >= mask_p->y1 ? 0 : mask_p->y1 - pos_y;
 80102ba:	bfb4      	ite	lt
 80102bc:	b2ad      	uxthlt	r5, r5
 80102be:	2500      	movge	r5, #0
    lv_coord_t row_end   = pos_y + g.box_h <= mask_p->y2 ? g.box_h : mask_p->y2 - pos_y + 1;
 80102c0:	428f      	cmp	r7, r1
 80102c2:	bfc3      	ittte	gt
 80102c4:	980b      	ldrgt	r0, [sp, #44]	; 0x2c
 80102c6:	3101      	addgt	r1, #1
 80102c8:	1a09      	subgt	r1, r1, r0
 80102ca:	b201      	sxthle	r1, r0
 80102cc:	bfc8      	it	gt
 80102ce:	b209      	sxthgt	r1, r1
 80102d0:	910e      	str	r1, [sp, #56]	; 0x38
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * g.bpp);
 80102d2:	f8bd 1018 	ldrh.w	r1, [sp, #24]
        vdb_buf_tmp += vdb_width - (col_end - col_start); /*Next row in VDB*/
 80102d6:	980d      	ldr	r0, [sp, #52]	; 0x34
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * g.bpp);
 80102d8:	fb14 f401 	smulbb	r4, r4, r1
        vdb_buf_tmp += vdb_width - (col_end - col_start); /*Next row in VDB*/
 80102dc:	9906      	ldr	r1, [sp, #24]
    lv_coord_t col_end   = pos_x + g.box_w <= mask_p->x2 ? g.box_w : mask_p->x2 - pos_x + 1;
 80102de:	b236      	sxth	r6, r6
        vdb_buf_tmp += vdb_width - (col_end - col_start); /*Next row in VDB*/
 80102e0:	1a71      	subs	r1, r6, r1
 80102e2:	1af3      	subs	r3, r6, r3
 80102e4:	1a41      	subs	r1, r0, r1
 80102e6:	b29b      	uxth	r3, r3
 80102e8:	9806      	ldr	r0, [sp, #24]
 80102ea:	005b      	lsls	r3, r3, #1
 80102ec:	42b0      	cmp	r0, r6
 80102ee:	bfc8      	it	gt
 80102f0:	2300      	movgt	r3, #0
 80102f2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80102f6:	9310      	str	r3, [sp, #64]	; 0x40
    vdb_buf_tmp += ((pos_y - vdb->area.y1) * vdb_width) + pos_x - vdb->area.x1;
 80102f8:	f9ba 3012 	ldrsh.w	r3, [sl, #18]
 80102fc:	ebab 0b03 	sub.w	fp, fp, r3
 8010300:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010302:	b22d      	sxth	r5, r5
 8010304:	fb03 880b 	mla	r8, r3, fp, r8
 8010308:	eba8 0202 	sub.w	r2, r8, r2
    vdb_buf_tmp += (row_start * vdb_width) + col_start;
 801030c:	fb03 0805 	mla	r8, r3, r5, r0
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * g.bpp);
 8010310:	fb0e 4405 	mla	r4, lr, r5, r4
    vdb_buf_tmp += (row_start * vdb_width) + col_start;
 8010314:	4442      	add	r2, r8
    map_p += bit_ofs >> 3;
 8010316:	eb09 09d4 	add.w	r9, r9, r4, lsr #3
    vdb_buf_tmp += (row_start * vdb_width) + col_start;
 801031a:	eb0c 0b42 	add.w	fp, ip, r2, lsl #1
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
 801031e:	f004 0407 	and.w	r4, r4, #7
    for(row = row_start; row < row_end; row++) {
 8010322:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010324:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8010328:	429d      	cmp	r5, r3
 801032a:	db0a      	blt.n	8010342 <lv_draw_letter+0x216>
}
 801032c:	b01b      	add	sp, #108	; 0x6c
 801032e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            bitmask_init  = 0xFF;
 8010332:	23ff      	movs	r3, #255	; 0xff
 8010334:	9308      	str	r3, [sp, #32]
            bpp_opa_table = NULL;
 8010336:	2300      	movs	r3, #0
 8010338:	e743      	b.n	80101c2 <lv_draw_letter+0x96>
            bitmask_init  = 0xC0;
 801033a:	23c0      	movs	r3, #192	; 0xc0
 801033c:	9308      	str	r3, [sp, #32]
            bpp_opa_table = bpp2_opa_table;
 801033e:	ab13      	add	r3, sp, #76	; 0x4c
 8010340:	e73f      	b.n	80101c2 <lv_draw_letter+0x96>
        bitmask = bitmask_init >> col_bit;
 8010342:	9b08      	ldr	r3, [sp, #32]
 8010344:	fa43 f804 	asr.w	r8, r3, r4
        for(col = col_start; col < col_end; col++) {
 8010348:	9b06      	ldr	r3, [sp, #24]
 801034a:	930c      	str	r3, [sp, #48]	; 0x30
                } else if(vdb_buf_tmp->full != color.full) {
 801034c:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 8010350:	9311      	str	r3, [sp, #68]	; 0x44
        bitmask = bitmask_init >> col_bit;
 8010352:	fa5f f888 	uxtb.w	r8, r8
        for(col = col_start; col < col_end; col++) {
 8010356:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010358:	42b3      	cmp	r3, r6
 801035a:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
 801035e:	db11      	blt.n	8010384 <lv_draw_letter+0x258>
        col_bit += ((g.box_w - col_end) + col_start) * g.bpp;
 8010360:	f89d 2052 	ldrb.w	r2, [sp, #82]	; 0x52
 8010364:	9906      	ldr	r1, [sp, #24]
 8010366:	1b92      	subs	r2, r2, r6
 8010368:	440a      	add	r2, r1
 801036a:	fb13 f302 	smulbb	r3, r3, r2
 801036e:	441c      	add	r4, r3
 8010370:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010372:	b2a4      	uxth	r4, r4
 8010374:	3501      	adds	r5, #1
        map_p += (col_bit >> 3);
 8010376:	eb09 09d4 	add.w	r9, r9, r4, lsr #3
 801037a:	b22d      	sxth	r5, r5
        col_bit = col_bit & 0x7;
 801037c:	f004 0407 	and.w	r4, r4, #7
 8010380:	449b      	add	fp, r3
 8010382:	e7ce      	b.n	8010322 <lv_draw_letter+0x1f6>
            letter_px = (*map_p & bitmask) >> (8 - col_bit - g.bpp);
 8010384:	f899 2000 	ldrb.w	r2, [r9]
 8010388:	f1c4 0108 	rsb	r1, r4, #8
 801038c:	ea08 0202 	and.w	r2, r8, r2
 8010390:	1ac9      	subs	r1, r1, r3
 8010392:	410a      	asrs	r2, r1
            if(letter_px != 0) {
 8010394:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 8010398:	d023      	beq.n	80103e2 <lv_draw_letter+0x2b6>
                if(opa == LV_OPA_COVER) {
 801039a:	9905      	ldr	r1, [sp, #20]
 801039c:	29ff      	cmp	r1, #255	; 0xff
 801039e:	d13c      	bne.n	801041a <lv_draw_letter+0x2ee>
                    px_opa = g.bpp == 8 ? letter_px : bpp_opa_table[letter_px];
 80103a0:	2b08      	cmp	r3, #8
 80103a2:	d001      	beq.n	80103a8 <lv_draw_letter+0x27c>
 80103a4:	9b07      	ldr	r3, [sp, #28]
 80103a6:	5c9a      	ldrb	r2, [r3, r2]
                if(disp->driver.set_px_cb) {
 80103a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80103aa:	695b      	ldr	r3, [r3, #20]
 80103ac:	461f      	mov	r7, r3
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d040      	beq.n	8010434 <lv_draw_letter+0x308>
                                           (col + pos_x) - vdb->area.x1, (row + pos_y) - vdb->area.y1, color, px_opa);
 80103b2:	f8ba 3010 	ldrh.w	r3, [sl, #16]
 80103b6:	990a      	ldr	r1, [sp, #40]	; 0x28
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width,
 80103b8:	9202      	str	r2, [sp, #8]
                                           (col + pos_x) - vdb->area.x1, (row + pos_y) - vdb->area.y1, color, px_opa);
 80103ba:	1acb      	subs	r3, r1, r3
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width,
 80103bc:	f8bd 2090 	ldrh.w	r2, [sp, #144]	; 0x90
                                           (col + pos_x) - vdb->area.x1, (row + pos_y) - vdb->area.y1, color, px_opa);
 80103c0:	990c      	ldr	r1, [sp, #48]	; 0x30
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width,
 80103c2:	f8ad 2004 	strh.w	r2, [sp, #4]
                                           (col + pos_x) - vdb->area.x1, (row + pos_y) - vdb->area.y1, color, px_opa);
 80103c6:	440b      	add	r3, r1
 80103c8:	f8ba 2012 	ldrh.w	r2, [sl, #18]
 80103cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width,
 80103ce:	980f      	ldr	r0, [sp, #60]	; 0x3c
                                           (col + pos_x) - vdb->area.x1, (row + pos_y) - vdb->area.y1, color, px_opa);
 80103d0:	1a8a      	subs	r2, r1, r2
 80103d2:	442a      	add	r2, r5
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width,
 80103d4:	b212      	sxth	r2, r2
 80103d6:	9200      	str	r2, [sp, #0]
 80103d8:	b21b      	sxth	r3, r3
 80103da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80103dc:	f8da 1008 	ldr.w	r1, [sl, #8]
 80103e0:	47b8      	blx	r7
            vdb_buf_tmp++;
 80103e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80103e4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80103e6:	3302      	adds	r3, #2
 80103e8:	9309      	str	r3, [sp, #36]	; 0x24
            if(col_bit < 8 - g.bpp) {
 80103ea:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
 80103ee:	f1c3 0208 	rsb	r2, r3, #8
 80103f2:	4294      	cmp	r4, r2
 80103f4:	f107 0701 	add.w	r7, r7, #1
                col_bit += g.bpp;
 80103f8:	bfbc      	itt	lt
 80103fa:	18e4      	addlt	r4, r4, r3
                bitmask = bitmask >> g.bpp;
 80103fc:	fa48 f803 	asrlt.w	r8, r8, r3
 8010400:	b23b      	sxth	r3, r7
                col_bit += g.bpp;
 8010402:	bfb9      	ittee	lt
 8010404:	b2a4      	uxthlt	r4, r4
                bitmask = bitmask >> g.bpp;
 8010406:	fa5f f888 	uxtblt.w	r8, r8
                map_p++;
 801040a:	f109 0901 	addge.w	r9, r9, #1
                bitmask = bitmask_init;
 801040e:	f8dd 8020 	ldrge.w	r8, [sp, #32]
 8010412:	930c      	str	r3, [sp, #48]	; 0x30
                col_bit = 0;
 8010414:	bfa8      	it	ge
 8010416:	2400      	movge	r4, #0
 8010418:	e79d      	b.n	8010356 <lv_draw_letter+0x22a>
                    px_opa = g.bpp == 8 ? (uint16_t)((uint16_t)letter_px * opa) >> 8
 801041a:	2b08      	cmp	r3, #8
                                        : (uint16_t)((uint16_t)bpp_opa_table[letter_px] * opa) >> 8;
 801041c:	bf1c      	itt	ne
 801041e:	9b07      	ldrne	r3, [sp, #28]
 8010420:	5c9a      	ldrbne	r2, [r3, r2]
 8010422:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8010426:	fb12 f203 	smulbb	r2, r2, r3
                    px_opa = g.bpp == 8 ? (uint16_t)((uint16_t)letter_px * opa) >> 8
 801042a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801042e:	e7bb      	b.n	80103a8 <lv_draw_letter+0x27c>
 8010430:	0801cb2a 	.word	0x0801cb2a
                } else if(vdb_buf_tmp->full != color.full) {
 8010434:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010436:	8819      	ldrh	r1, [r3, #0]
 8010438:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801043a:	4299      	cmp	r1, r3
 801043c:	d0d1      	beq.n	80103e2 <lv_draw_letter+0x2b6>
                    if(px_opa > LV_OPA_MAX)
 801043e:	2afb      	cmp	r2, #251	; 0xfb
 8010440:	d904      	bls.n	801044c <lv_draw_letter+0x320>
                        *vdb_buf_tmp = color;
 8010442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010444:	f8bd 2090 	ldrh.w	r2, [sp, #144]	; 0x90
 8010448:	801a      	strh	r2, [r3, #0]
 801044a:	e7ca      	b.n	80103e2 <lv_draw_letter+0x2b6>
                    else if(px_opa > LV_OPA_MIN) {
 801044c:	2a10      	cmp	r2, #16
 801044e:	d9c8      	bls.n	80103e2 <lv_draw_letter+0x2b6>
                            *vdb_buf_tmp = lv_color_mix(color, *vdb_buf_tmp, px_opa);
 8010450:	f8bd 0090 	ldrh.w	r0, [sp, #144]	; 0x90
 8010454:	f7ff fd40 	bl	800fed8 <lv_color_mix>
 8010458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801045a:	8018      	strh	r0, [r3, #0]
 801045c:	e7c1      	b.n	80103e2 <lv_draw_letter+0x2b6>
 801045e:	bf00      	nop

08010460 <lv_draw_map>:
{
 8010460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010464:	b093      	sub	sp, #76	; 0x4c
 8010466:	461d      	mov	r5, r3
 8010468:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
 801046c:	930d      	str	r3, [sp, #52]	; 0x34
 801046e:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
 8010472:	930a      	str	r3, [sp, #40]	; 0x28
    if(opa < LV_OPA_MIN) return;
 8010474:	2d0f      	cmp	r5, #15
{
 8010476:	f89d 307c 	ldrb.w	r3, [sp, #124]	; 0x7c
 801047a:	9308      	str	r3, [sp, #32]
 801047c:	4607      	mov	r7, r0
 801047e:	4614      	mov	r4, r2
    if(opa < LV_OPA_MIN) return;
 8010480:	d979      	bls.n	8010576 <lv_draw_map+0x116>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 8010482:	2dfc      	cmp	r5, #252	; 0xfc
    union_ok = lv_area_intersect(&masked_a, cords_p, mask_p);
 8010484:	460a      	mov	r2, r1
 8010486:	4601      	mov	r1, r0
 8010488:	a810      	add	r0, sp, #64	; 0x40
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 801048a:	bf28      	it	cs
 801048c:	25ff      	movcs	r5, #255	; 0xff
    union_ok = lv_area_intersect(&masked_a, cords_p, mask_p);
 801048e:	f003 fada 	bl	8013a46 <lv_area_intersect>
    if(union_ok == false) return;
 8010492:	2800      	cmp	r0, #0
 8010494:	d06f      	beq.n	8010576 <lv_draw_map+0x116>
    uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
 8010496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010498:	88be      	ldrh	r6, [r7, #4]
 801049a:	f9b7 2000 	ldrsh.w	r2, [r7]
    if(cords_p->y1 < masked_a.y1) {
 801049e:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
    uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	bf0c      	ite	eq
 80104a6:	2302      	moveq	r3, #2
 80104a8:	2303      	movne	r3, #3
 80104aa:	9306      	str	r3, [sp, #24]
    if(cords_p->y1 < masked_a.y1) {
 80104ac:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 80104b0:	3601      	adds	r6, #1
 80104b2:	4299      	cmp	r1, r3
 80104b4:	eba6 0602 	sub.w	r6, r6, r2
        map_p += (uint32_t)map_width * ((masked_a.y1 - cords_p->y1)) * px_size_byte;
 80104b8:	bfb8      	it	lt
 80104ba:	1a5b      	sublt	r3, r3, r1
 80104bc:	b236      	sxth	r6, r6
 80104be:	bfbe      	ittt	lt
 80104c0:	9906      	ldrlt	r1, [sp, #24]
 80104c2:	4373      	mullt	r3, r6
 80104c4:	fb01 4403 	mlalt	r4, r1, r3, r4
    if(cords_p->x1 < masked_a.x1) {
 80104c8:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 80104cc:	4293      	cmp	r3, r2
        map_p += (masked_a.x1 - cords_p->x1) * px_size_byte;
 80104ce:	bfc2      	ittt	gt
 80104d0:	1a9a      	subgt	r2, r3, r2
 80104d2:	9b06      	ldrgt	r3, [sp, #24]
 80104d4:	fb03 4402 	mlagt	r4, r3, r2, r4
    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
 80104d8:	f7fe ff52 	bl	800f380 <lv_refr_get_disp_refreshing>
 80104dc:	4680      	mov	r8, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 80104de:	f003 f917 	bl	8013710 <lv_disp_get_buf>
    masked_a.x2 = masked_a.x2 - vdb->area.x1;
 80104e2:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
    masked_a.x1 = masked_a.x1 - vdb->area.x1;
 80104e6:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
    masked_a.y2 = masked_a.y2 - vdb->area.y1;
 80104ea:	f8bd 7046 	ldrh.w	r7, [sp, #70]	; 0x46
    masked_a.y1 = masked_a.y1 - vdb->area.y1;
 80104ee:	f8bd a042 	ldrh.w	sl, [sp, #66]	; 0x42
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 80104f2:	4681      	mov	r9, r0
    masked_a.x1 = masked_a.x1 - vdb->area.x1;
 80104f4:	8a00      	ldrh	r0, [r0, #16]
    masked_a.y1 = masked_a.y1 - vdb->area.y1;
 80104f6:	f8b9 e012 	ldrh.w	lr, [r9, #18]
    masked_a.x2 = masked_a.x2 - vdb->area.x1;
 80104fa:	1a1b      	subs	r3, r3, r0
    masked_a.x1 = masked_a.x1 - vdb->area.x1;
 80104fc:	1a12      	subs	r2, r2, r0
    masked_a.x2 = masked_a.x2 - vdb->area.x1;
 80104fe:	b29b      	uxth	r3, r3
    masked_a.x1 = masked_a.x1 - vdb->area.x1;
 8010500:	b292      	uxth	r2, r2
    masked_a.y2 = masked_a.y2 - vdb->area.y1;
 8010502:	eba7 070e 	sub.w	r7, r7, lr
    masked_a.x2 = masked_a.x2 - vdb->area.x1;
 8010506:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801050a:	3301      	adds	r3, #1
    masked_a.x1 = masked_a.x1 - vdb->area.x1;
 801050c:	b211      	sxth	r1, r2
    masked_a.y2 = masked_a.y2 - vdb->area.y1;
 801050e:	f8ad 7046 	strh.w	r7, [sp, #70]	; 0x46
 8010512:	1a9a      	subs	r2, r3, r2
 8010514:	f8b9 7014 	ldrh.w	r7, [r9, #20]
    masked_a.x1 = masked_a.x1 - vdb->area.x1;
 8010518:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 801051c:	b213      	sxth	r3, r2
 801051e:	3701      	adds	r7, #1
 8010520:	9309      	str	r3, [sp, #36]	; 0x24
 8010522:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8010526:	1a38      	subs	r0, r7, r0
    masked_a.y1 = masked_a.y1 - vdb->area.y1;
 8010528:	ebaa 0a0e 	sub.w	sl, sl, lr
 801052c:	fa0f fa8a 	sxth.w	sl, sl
 8010530:	b200      	sxth	r0, r0
 8010532:	fb13 f306 	smulbb	r3, r3, r6
    lv_color_t * vdb_buf_tmp = vdb->buf_act;
 8010536:	f8d9 7008 	ldr.w	r7, [r9, #8]
 801053a:	930b      	str	r3, [sp, #44]	; 0x2c
    vdb_buf_tmp += (uint32_t)masked_a.x1;             /*Move to the first col*/
 801053c:	fb00 110a 	mla	r1, r0, sl, r1
    if(chroma_key == false && alpha_byte == false && opa == LV_OPA_COVER && recolor_opa == LV_OPA_TRANSP) {
 8010540:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    masked_a.y1 = masked_a.y1 - vdb->area.y1;
 8010542:	f8ad a042 	strh.w	sl, [sp, #66]	; 0x42
    vdb_buf_tmp += (uint32_t)masked_a.x1;             /*Move to the first col*/
 8010546:	eb07 0141 	add.w	r1, r7, r1, lsl #1
 801054a:	9005      	str	r0, [sp, #20]
 801054c:	9104      	str	r1, [sp, #16]
    if(chroma_key == false && alpha_byte == false && opa == LV_OPA_COVER && recolor_opa == LV_OPA_TRANSP) {
 801054e:	2b00      	cmp	r3, #0
 8010550:	d149      	bne.n	80105e6 <lv_draw_map+0x186>
 8010552:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010554:	2b00      	cmp	r3, #0
 8010556:	d146      	bne.n	80105e6 <lv_draw_map+0x186>
 8010558:	2dff      	cmp	r5, #255	; 0xff
 801055a:	d144      	bne.n	80105e6 <lv_draw_map+0x186>
 801055c:	9b08      	ldr	r3, [sp, #32]
 801055e:	2b00      	cmp	r3, #0
 8010560:	d141      	bne.n	80105e6 <lv_draw_map+0x186>
        if(disp->driver.set_px_cb) {
 8010562:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8010566:	bb43      	cbnz	r3, 80105ba <lv_draw_map+0x15a>
        memcpy(dest, src, length * sizeof(lv_color_t));
 8010568:	9b09      	ldr	r3, [sp, #36]	; 0x24
                vdb_buf_tmp += vdb_width;          /*Next row on the VDB*/
 801056a:	0045      	lsls	r5, r0, #1
        memcpy(dest, src, length * sizeof(lv_color_t));
 801056c:	005e      	lsls	r6, r3, #1
            for(row = masked_a.y1; row <= masked_a.y2; row++) {
 801056e:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 8010572:	4553      	cmp	r3, sl
 8010574:	da28      	bge.n	80105c8 <lv_draw_map+0x168>
}
 8010576:	b013      	add	sp, #76	; 0x4c
 8010578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, col + masked_a.x1, row,
 801057c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
                    lv_color_t px_color = *((lv_color_t *)&map_p[(uint32_t)col * px_size_byte]);
 8010580:	f8bb 2000 	ldrh.w	r2, [fp]
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, col + masked_a.x1, row,
 8010584:	f8ad 2004 	strh.w	r2, [sp, #4]
 8010588:	9502      	str	r5, [sp, #8]
 801058a:	f8cd a000 	str.w	sl, [sp]
 801058e:	443b      	add	r3, r7
 8010590:	b21b      	sxth	r3, r3
 8010592:	f8d8 6014 	ldr.w	r6, [r8, #20]
 8010596:	9a05      	ldr	r2, [sp, #20]
 8010598:	f8d9 1008 	ldr.w	r1, [r9, #8]
 801059c:	4640      	mov	r0, r8
 801059e:	47b0      	blx	r6
 80105a0:	9b06      	ldr	r3, [sp, #24]
 80105a2:	3701      	adds	r7, #1
 80105a4:	449b      	add	fp, r3
                for(col = 0; col < map_useful_w; col++) {
 80105a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80105a8:	b23b      	sxth	r3, r7
 80105aa:	429a      	cmp	r2, r3
 80105ac:	dce6      	bgt.n	801057c <lv_draw_map+0x11c>
                map_p += map_width * px_size_byte; /*Next row on the map*/
 80105ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80105b0:	f10a 0a01 	add.w	sl, sl, #1
 80105b4:	441c      	add	r4, r3
 80105b6:	fa0f fa8a 	sxth.w	sl, sl
            for(row = masked_a.y1; row <= masked_a.y2; row++) {
 80105ba:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 80105be:	4553      	cmp	r3, sl
 80105c0:	dbd9      	blt.n	8010576 <lv_draw_map+0x116>
 80105c2:	46a3      	mov	fp, r4
 80105c4:	2700      	movs	r7, #0
 80105c6:	e7ee      	b.n	80105a6 <lv_draw_map+0x146>
        memcpy(dest, src, length * sizeof(lv_color_t));
 80105c8:	4621      	mov	r1, r4
 80105ca:	4632      	mov	r2, r6
 80105cc:	9804      	ldr	r0, [sp, #16]
 80105ce:	f008 ffa1 	bl	8019514 <memcpy>
                map_p += map_width * px_size_byte; /*Next row on the map*/
 80105d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80105d4:	441c      	add	r4, r3
                vdb_buf_tmp += vdb_width;          /*Next row on the VDB*/
 80105d6:	9b04      	ldr	r3, [sp, #16]
 80105d8:	f10a 0a01 	add.w	sl, sl, #1
 80105dc:	442b      	add	r3, r5
 80105de:	9304      	str	r3, [sp, #16]
 80105e0:	fa0f fa8a 	sxth.w	sl, sl
 80105e4:	e7c3      	b.n	801056e <lv_draw_map+0x10e>
        lv_color_t last_img_px  = LV_COLOR_BLACK;
 80105e6:	f04f 0300 	mov.w	r3, #0
        lv_color_t recolored_px = lv_color_mix(recolor, last_img_px, recolor_opa);
 80105ea:	4619      	mov	r1, r3
 80105ec:	9a08      	ldr	r2, [sp, #32]
 80105ee:	f8bd 0078 	ldrh.w	r0, [sp, #120]	; 0x78
        lv_color_t last_img_px  = LV_COLOR_BLACK;
 80105f2:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
        lv_color_t recolored_px = lv_color_mix(recolor, last_img_px, recolor_opa);
 80105f6:	f7ff fc6f 	bl	800fed8 <lv_color_mix>
        for(row = masked_a.y1; row <= masked_a.y2; row++) {
 80105fa:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 80105fe:	9307      	str	r3, [sp, #28]
            vdb_buf_tmp += vdb_width;          /*Next row on the VDB*/
 8010600:	9b05      	ldr	r3, [sp, #20]
        lv_color_t recolored_px = lv_color_mix(recolor, last_img_px, recolor_opa);
 8010602:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
            vdb_buf_tmp += vdb_width;          /*Next row on the VDB*/
 8010606:	005b      	lsls	r3, r3, #1
 8010608:	930e      	str	r3, [sp, #56]	; 0x38
        for(row = masked_a.y1; row <= masked_a.y2; row++) {
 801060a:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 801060e:	9a07      	ldr	r2, [sp, #28]
 8010610:	4293      	cmp	r3, r2
 8010612:	dbb0      	blt.n	8010576 <lv_draw_map+0x116>
 8010614:	9e04      	ldr	r6, [sp, #16]
 8010616:	46a2      	mov	sl, r4
 8010618:	f04f 0b00 	mov.w	fp, #0
 801061c:	e04f      	b.n	80106be <lv_draw_map+0x25e>
                if(alpha_byte) {
 801061e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010620:	2b00      	cmp	r3, #0
 8010622:	d03e      	beq.n	80106a2 <lv_draw_map+0x242>
                    px_color.full = px_color_p[0] + (px_color_p[1] << 8);
 8010624:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8010628:	f89a 0000 	ldrb.w	r0, [sl]
 801062c:	eb00 2003 	add.w	r0, r0, r3, lsl #8
                    lv_opa_t px_opa = *(px_color_p + LV_IMG_PX_SIZE_ALPHA_BYTE - 1);
 8010630:	f89a 3002 	ldrb.w	r3, [sl, #2]
                    px_color.full = px_color_p[0] + (px_color_p[1] << 8);
 8010634:	b280      	uxth	r0, r0
                    if(px_opa == LV_OPA_TRANSP)
 8010636:	2b00      	cmp	r3, #0
 8010638:	d03c      	beq.n	80106b4 <lv_draw_map+0x254>
                    else if(px_opa != LV_OPA_COVER)
 801063a:	2bff      	cmp	r3, #255	; 0xff
 801063c:	d033      	beq.n	80106a6 <lv_draw_map+0x246>
                        opa_result = (uint32_t)((uint32_t)px_opa * opa_result) >> 8;
 801063e:	fb13 f305 	smulbb	r3, r3, r5
 8010642:	f3c3 2307 	ubfx	r3, r3, #8, #8
                if(chroma_key && px_color.full == disp->driver.color_chroma_key.full) continue;
 8010646:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010648:	b11a      	cbz	r2, 8010652 <lv_draw_map+0x1f2>
 801064a:	f8b8 201c 	ldrh.w	r2, [r8, #28]
 801064e:	4282      	cmp	r2, r0
 8010650:	d030      	beq.n	80106b4 <lv_draw_map+0x254>
                if(recolor_opa != LV_OPA_TRANSP) {
 8010652:	9a08      	ldr	r2, [sp, #32]
 8010654:	2a00      	cmp	r2, #0
 8010656:	d049      	beq.n	80106ec <lv_draw_map+0x28c>
                    if(last_img_px.full != px_color.full) { /*Minor acceleration: calculate only for
 8010658:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801065c:	4282      	cmp	r2, r0
 801065e:	d00b      	beq.n	8010678 <lv_draw_map+0x218>
                        last_img_px  = px_color;
 8010660:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
                        recolored_px = lv_color_mix(recolor, last_img_px, recolor_opa);
 8010664:	4601      	mov	r1, r0
 8010666:	9a08      	ldr	r2, [sp, #32]
 8010668:	f8bd 0078 	ldrh.w	r0, [sp, #120]	; 0x78
 801066c:	930f      	str	r3, [sp, #60]	; 0x3c
 801066e:	f7ff fc33 	bl	800fed8 <lv_color_mix>
 8010672:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010674:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
                    if(disp->driver.set_px_cb) {
 8010678:	f8d8 2014 	ldr.w	r2, [r8, #20]
 801067c:	4617      	mov	r7, r2
 801067e:	b1a2      	cbz	r2, 80106aa <lv_draw_map+0x24a>
                        disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, col + masked_a.x1,
 8010680:	9302      	str	r3, [sp, #8]
 8010682:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8010686:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801068a:	f8ad 3004 	strh.w	r3, [sp, #4]
 801068e:	9b07      	ldr	r3, [sp, #28]
 8010690:	9300      	str	r3, [sp, #0]
 8010692:	445a      	add	r2, fp
 8010694:	b213      	sxth	r3, r2
 8010696:	f8d9 1008 	ldr.w	r1, [r9, #8]
 801069a:	9a05      	ldr	r2, [sp, #20]
                        disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, col + masked_a.x1,
 801069c:	4640      	mov	r0, r8
 801069e:	47b8      	blx	r7
 80106a0:	e008      	b.n	80106b4 <lv_draw_map+0x254>
                    px_color = *((lv_color_t *)px_color_p);
 80106a2:	f8ba 0000 	ldrh.w	r0, [sl]
 80106a6:	462b      	mov	r3, r5
 80106a8:	e7cd      	b.n	8010646 <lv_draw_map+0x1e6>
                        if(opa_result == LV_OPA_COVER)
 80106aa:	2bff      	cmp	r3, #255	; 0xff
 80106ac:	d117      	bne.n	80106de <lv_draw_map+0x27e>
                            vdb_buf_tmp[col].full = recolored_px.full;
 80106ae:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 80106b2:	8033      	strh	r3, [r6, #0]
 80106b4:	9b06      	ldr	r3, [sp, #24]
 80106b6:	f10b 0b01 	add.w	fp, fp, #1
 80106ba:	3602      	adds	r6, #2
 80106bc:	449a      	add	sl, r3
            for(col = 0; col < map_useful_w; col++) {
 80106be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80106c0:	fa0f f38b 	sxth.w	r3, fp
 80106c4:	4293      	cmp	r3, r2
 80106c6:	dbaa      	blt.n	801061e <lv_draw_map+0x1be>
            map_p += map_width * px_size_byte; /*Next row on the map*/
 80106c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            vdb_buf_tmp += vdb_width;          /*Next row on the VDB*/
 80106ca:	9a04      	ldr	r2, [sp, #16]
            map_p += map_width * px_size_byte; /*Next row on the map*/
 80106cc:	441c      	add	r4, r3
            vdb_buf_tmp += vdb_width;          /*Next row on the VDB*/
 80106ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80106d0:	441a      	add	r2, r3
 80106d2:	9b07      	ldr	r3, [sp, #28]
 80106d4:	9204      	str	r2, [sp, #16]
 80106d6:	3301      	adds	r3, #1
 80106d8:	b21b      	sxth	r3, r3
 80106da:	9307      	str	r3, [sp, #28]
 80106dc:	e795      	b.n	801060a <lv_draw_map+0x1aa>
                            vdb_buf_tmp[col] = lv_color_mix(recolored_px, vdb_buf_tmp[col], opa_result);
 80106de:	8831      	ldrh	r1, [r6, #0]
 80106e0:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 80106e4:	461a      	mov	r2, r3
                                vdb_buf_tmp[col] = lv_color_mix(px_color, vdb_buf_tmp[col], opa_result);
 80106e6:	f7ff fbf7 	bl	800fed8 <lv_color_mix>
 80106ea:	e012      	b.n	8010712 <lv_draw_map+0x2b2>
                    if(disp->driver.set_px_cb) {
 80106ec:	f8d8 2014 	ldr.w	r2, [r8, #20]
 80106f0:	4617      	mov	r7, r2
 80106f2:	b162      	cbz	r2, 801070e <lv_draw_map+0x2ae>
                        disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, col + masked_a.x1,
 80106f4:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 80106f8:	f8d9 1008 	ldr.w	r1, [r9, #8]
 80106fc:	9302      	str	r3, [sp, #8]
 80106fe:	445a      	add	r2, fp
 8010700:	9b07      	ldr	r3, [sp, #28]
 8010702:	9300      	str	r3, [sp, #0]
 8010704:	f8ad 0004 	strh.w	r0, [sp, #4]
 8010708:	b213      	sxth	r3, r2
 801070a:	9a05      	ldr	r2, [sp, #20]
 801070c:	e7c6      	b.n	801069c <lv_draw_map+0x23c>
                        if(opa_result == LV_OPA_COVER)
 801070e:	2bff      	cmp	r3, #255	; 0xff
 8010710:	d101      	bne.n	8010716 <lv_draw_map+0x2b6>
                                vdb_buf_tmp[col] = lv_color_mix(px_color, vdb_buf_tmp[col], opa_result);
 8010712:	8030      	strh	r0, [r6, #0]
 8010714:	e7ce      	b.n	80106b4 <lv_draw_map+0x254>
 8010716:	461a      	mov	r2, r3
 8010718:	8831      	ldrh	r1, [r6, #0]
 801071a:	e7e4      	b.n	80106e6 <lv_draw_map+0x286>

0801071c <lv_img_color_format_get_px_size>:
 * Get the pixel size of a color format in bits
 * @param cf a color format (`LV_IMG_CF_...`)
 * @return the pixel size in bits
 */
uint8_t lv_img_color_format_get_px_size(lv_img_cf_t cf)
{
 801071c:	3804      	subs	r0, #4
 801071e:	b2c0      	uxtb	r0, r0
 8010720:	280a      	cmp	r0, #10
 8010722:	bf9a      	itte	ls
 8010724:	4b01      	ldrls	r3, [pc, #4]	; (801072c <lv_img_color_format_get_px_size+0x10>)
 8010726:	5c18      	ldrbls	r0, [r3, r0]
 8010728:	2000      	movhi	r0, #0
        case LV_IMG_CF_ALPHA_8BIT: px_size = 8; break;
        default: px_size = 0; break;
    }

    return px_size;
}
 801072a:	4770      	bx	lr
 801072c:	080d89a4 	.word	0x080d89a4

08010730 <lv_img_color_format_is_chroma_keyed>:
 * Check if a color format is chroma keyed or not
 * @param cf a color format (`LV_IMG_CF_...`)
 * @return true: chroma keyed; false: not chroma keyed
 */
bool lv_img_color_format_is_chroma_keyed(lv_img_cf_t cf)
{
 8010730:	280a      	cmp	r0, #10
 8010732:	d808      	bhi.n	8010746 <lv_img_color_format_is_chroma_keyed+0x16>
 8010734:	2301      	movs	r3, #1
 8010736:	fa03 f000 	lsl.w	r0, r3, r0
 801073a:	f410 6ff9 	tst.w	r0, #1992	; 0x7c8
 801073e:	bf14      	ite	ne
 8010740:	4618      	movne	r0, r3
 8010742:	2000      	moveq	r0, #0
 8010744:	4770      	bx	lr
        case LV_IMG_CF_RAW_CHROMA_KEYED:
        case LV_IMG_CF_INDEXED_1BIT:
        case LV_IMG_CF_INDEXED_2BIT:
        case LV_IMG_CF_INDEXED_4BIT:
        case LV_IMG_CF_INDEXED_8BIT: is_chroma_keyed = true; break;
        default: is_chroma_keyed = false; break;
 8010746:	2000      	movs	r0, #0
    }

    return is_chroma_keyed;
}
 8010748:	4770      	bx	lr

0801074a <lv_img_color_format_has_alpha>:
 * Check if a color format has alpha channel or not
 * @param cf a color format (`LV_IMG_CF_...`)
 * @return true: has alpha channel; false: doesn't have alpha channel
 */
bool lv_img_color_format_has_alpha(lv_img_cf_t cf)
{
 801074a:	3802      	subs	r0, #2
 801074c:	b2c0      	uxtb	r0, r0
 801074e:	280c      	cmp	r0, #12
 8010750:	d809      	bhi.n	8010766 <lv_img_color_format_has_alpha+0x1c>
 8010752:	2301      	movs	r3, #1
 8010754:	fa03 f000 	lsl.w	r0, r3, r0
 8010758:	f641 6309 	movw	r3, #7689	; 0x1e09
 801075c:	4218      	tst	r0, r3
 801075e:	bf14      	ite	ne
 8010760:	2001      	movne	r0, #1
 8010762:	2000      	moveq	r0, #0
 8010764:	4770      	bx	lr
        case LV_IMG_CF_RAW_ALPHA:
        case LV_IMG_CF_ALPHA_1BIT:
        case LV_IMG_CF_ALPHA_2BIT:
        case LV_IMG_CF_ALPHA_4BIT:
        case LV_IMG_CF_ALPHA_8BIT: has_alpha = true; break;
        default: has_alpha = false; break;
 8010766:	2000      	movs	r0, #0
    }

    return has_alpha;
}
 8010768:	4770      	bx	lr
	...

0801076c <lv_draw_img>:
{
 801076c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010770:	b093      	sub	sp, #76	; 0x4c
 8010772:	4604      	mov	r4, r0
 8010774:	460f      	mov	r7, r1
 8010776:	469a      	mov	sl, r3
 8010778:	f89d 9070 	ldrb.w	r9, [sp, #112]	; 0x70
    if(src == NULL) {
 801077c:	4615      	mov	r5, r2
 801077e:	b962      	cbnz	r2, 801079a <lv_draw_img+0x2e>
        lv_draw_rect(coords, mask, &lv_style_plain, LV_OPA_COVER);
 8010780:	23ff      	movs	r3, #255	; 0xff
 8010782:	4a65      	ldr	r2, [pc, #404]	; (8010918 <lv_draw_img+0x1ac>)
 8010784:	f000 fb88 	bl	8010e98 <lv_draw_rect>
        lv_draw_label(coords, mask, &lv_style_plain, LV_OPA_COVER, "No\ndata", LV_TXT_FLAG_NONE, NULL, -1, -1, NULL);
 8010788:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801078c:	9505      	str	r5, [sp, #20]
 801078e:	9304      	str	r3, [sp, #16]
 8010790:	9303      	str	r3, [sp, #12]
 8010792:	9502      	str	r5, [sp, #8]
 8010794:	9501      	str	r5, [sp, #4]
        lv_draw_label(coords, mask, &lv_style_plain, LV_OPA_COVER, "No\ndata", LV_TXT_FLAG_NONE, NULL, -1, -1, NULL);
 8010796:	4b61      	ldr	r3, [pc, #388]	; (801091c <lv_draw_img+0x1b0>)
 8010798:	e036      	b.n	8010808 <lv_draw_img+0x9c>
                                 const lv_style_t * style, lv_opa_t opa_scale)
{

    lv_area_t mask_com; /*Common area of mask and coords*/
    bool union_ok;
    union_ok = lv_area_intersect(&mask_com, mask, coords);
 801079a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 801079e:	4602      	mov	r2, r0
 80107a0:	4640      	mov	r0, r8
 80107a2:	f003 f950 	bl	8013a46 <lv_area_intersect>
    if(union_ok == false) {
 80107a6:	2800      	cmp	r0, #0
 80107a8:	d049      	beq.n	801083e <lv_draw_img+0xd2>
 80107aa:	f89a 6033 	ldrb.w	r6, [sl, #51]	; 0x33
        return LV_RES_OK; /*Out of mask. There is nothing to draw so the image is drawn
                             successfully.*/
    }

    lv_opa_t opa =
 80107ae:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80107b2:	bf18      	it	ne
 80107b4:	fb06 f609 	mulne.w	r6, r6, r9
        opa_scale == LV_OPA_COVER ? style->image.opa : (uint16_t)((uint16_t)style->image.opa * opa_scale) >> 8;

    lv_img_cache_entry_t * cdsc = lv_img_cache_open(src, style);
 80107b8:	4651      	mov	r1, sl
 80107ba:	4628      	mov	r0, r5
    lv_opa_t opa =
 80107bc:	bf18      	it	ne
 80107be:	f3c6 2607 	ubfxne	r6, r6, #8, #8
    lv_img_cache_entry_t * cdsc = lv_img_cache_open(src, style);
 80107c2:	f002 fa71 	bl	8012ca8 <lv_img_cache_open>

    if(cdsc == NULL) return LV_RES_INV;
 80107c6:	4681      	mov	r9, r0
 80107c8:	2800      	cmp	r0, #0
 80107ca:	d07a      	beq.n	80108c2 <lv_draw_img+0x156>

    bool chroma_keyed = lv_img_color_format_is_chroma_keyed(cdsc->dec_dsc.header.cf);
 80107cc:	7c02      	ldrb	r2, [r0, #16]
 80107ce:	f002 021f 	and.w	r2, r2, #31
 80107d2:	4610      	mov	r0, r2
 80107d4:	f7ff ffac 	bl	8010730 <lv_img_color_format_is_chroma_keyed>
 80107d8:	9007      	str	r0, [sp, #28]
    bool alpha_byte   = lv_img_color_format_has_alpha(cdsc->dec_dsc.header.cf);
 80107da:	4610      	mov	r0, r2
 80107dc:	f7ff ffb5 	bl	801074a <lv_img_color_format_has_alpha>

    if(cdsc->dec_dsc.error_msg != NULL) {
 80107e0:	f8d9 301c 	ldr.w	r3, [r9, #28]
    bool alpha_byte   = lv_img_color_format_has_alpha(cdsc->dec_dsc.header.cf);
 80107e4:	9008      	str	r0, [sp, #32]
    if(cdsc->dec_dsc.error_msg != NULL) {
 80107e6:	b1bb      	cbz	r3, 8010818 <lv_draw_img+0xac>
        LV_LOG_WARN("Image draw error");
        lv_draw_rect(coords, mask, &lv_style_plain, LV_OPA_COVER);
 80107e8:	23ff      	movs	r3, #255	; 0xff
 80107ea:	4a4b      	ldr	r2, [pc, #300]	; (8010918 <lv_draw_img+0x1ac>)
 80107ec:	4639      	mov	r1, r7
 80107ee:	4620      	mov	r0, r4
 80107f0:	f000 fb52 	bl	8010e98 <lv_draw_rect>
        lv_draw_label(coords, mask, &lv_style_plain, LV_OPA_COVER, cdsc->dec_dsc.error_msg, LV_TXT_FLAG_NONE, NULL, -1,
 80107f4:	2300      	movs	r3, #0
 80107f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80107fa:	9305      	str	r3, [sp, #20]
 80107fc:	9204      	str	r2, [sp, #16]
 80107fe:	9203      	str	r2, [sp, #12]
 8010800:	9302      	str	r3, [sp, #8]
 8010802:	9301      	str	r3, [sp, #4]
 8010804:	f8d9 301c 	ldr.w	r3, [r9, #28]
        lv_draw_label(coords, mask, &lv_style_plain, LV_OPA_COVER, "No\ndata", LV_TXT_FLAG_NONE, NULL, -1, -1, NULL);
 8010808:	9300      	str	r3, [sp, #0]
 801080a:	4a43      	ldr	r2, [pc, #268]	; (8010918 <lv_draw_img+0x1ac>)
 801080c:	23ff      	movs	r3, #255	; 0xff
 801080e:	4639      	mov	r1, r7
 8010810:	4620      	mov	r0, r4
 8010812:	f000 f8ab 	bl	801096c <lv_draw_label>
        return;
 8010816:	e012      	b.n	801083e <lv_draw_img+0xd2>
                      -1, NULL);
    }
    /* The decoder open could open the image and gave the entire uncompressed image.
     * Just draw it!*/
    else if(cdsc->dec_dsc.img_data) {
 8010818:	f8d9 2014 	ldr.w	r2, [r9, #20]
 801081c:	b192      	cbz	r2, 8010844 <lv_draw_img+0xd8>
        lv_draw_map(coords, mask, cdsc->dec_dsc.img_data, opa, chroma_keyed, alpha_byte, style->image.color,
 801081e:	f89a 3032 	ldrb.w	r3, [sl, #50]	; 0x32
 8010822:	9303      	str	r3, [sp, #12]
 8010824:	f8ba 3030 	ldrh.w	r3, [sl, #48]	; 0x30
 8010828:	f8ad 3008 	strh.w	r3, [sp, #8]
 801082c:	9b08      	ldr	r3, [sp, #32]
 801082e:	9301      	str	r3, [sp, #4]
 8010830:	9b07      	ldr	r3, [sp, #28]
 8010832:	9300      	str	r3, [sp, #0]
 8010834:	4639      	mov	r1, r7
 8010836:	4633      	mov	r3, r6
 8010838:	4620      	mov	r0, r4
 801083a:	f7ff fe11 	bl	8010460 <lv_draw_map>
}
 801083e:	b013      	add	sp, #76	; 0x4c
 8010840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return area_p->x2 - area_p->x1 + 1;
 8010844:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8010848:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801084c:	920d      	str	r2, [sp, #52]	; 0x34
 801084e:	3501      	adds	r5, #1
 8010850:	1aed      	subs	r5, r5, r3
 8010852:	b22d      	sxth	r5, r5
    }
    /* The whole uncompressed image is not available. Try to read it line-by-line*/
    else {
        lv_coord_t width = lv_area_get_width(&mask_com);

        uint8_t  * buf = lv_draw_get_buf(lv_area_get_width(&mask_com) * ((LV_COLOR_DEPTH >> 3) + 1));  /*+1 because of the possible alpha byte*/
 8010854:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 8010858:	f7ff fafa 	bl	800fe50 <lv_draw_get_buf>
 801085c:	9009      	str	r0, [sp, #36]	; 0x24
    memcpy(dest, src, sizeof(lv_area_t));
 801085e:	e898 0003 	ldmia.w	r8, {r0, r1}
 8010862:	ab10      	add	r3, sp, #64	; 0x40
 8010864:	e883 0003 	stmia.w	r3, {r0, r1}

        lv_area_t line;
        lv_area_copy(&line, &mask_com);
        lv_area_set_height(&line, 1);
 8010868:	4618      	mov	r0, r3
 801086a:	2101      	movs	r1, #1
 801086c:	930c      	str	r3, [sp, #48]	; 0x30
 801086e:	f003 f8c9 	bl	8013a04 <lv_area_set_height>
        lv_coord_t x = mask_com.x1 - coords->x1;
 8010872:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8010876:	8820      	ldrh	r0, [r4, #0]
        lv_coord_t y = mask_com.y1 - coords->y1;
 8010878:	f8bd b03a 	ldrh.w	fp, [sp, #58]	; 0x3a
 801087c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
        lv_coord_t x = mask_com.x1 - coords->x1;
 801087e:	1a09      	subs	r1, r1, r0
 8010880:	b20b      	sxth	r3, r1
        lv_coord_t y = mask_com.y1 - coords->y1;
 8010882:	8861      	ldrh	r1, [r4, #2]
        lv_coord_t x = mask_com.x1 - coords->x1;
 8010884:	930a      	str	r3, [sp, #40]	; 0x28
        lv_coord_t y = mask_com.y1 - coords->y1;
 8010886:	ebab 0101 	sub.w	r1, fp, r1
 801088a:	b28b      	uxth	r3, r1
 801088c:	930b      	str	r3, [sp, #44]	; 0x2c
 801088e:	4690      	mov	r8, r2
 8010890:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        lv_coord_t row;
        lv_res_t read_res;
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 8010892:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 8010896:	fa1f f388 	uxth.w	r3, r8
 801089a:	441a      	add	r2, r3
 801089c:	445b      	add	r3, fp
 801089e:	b21b      	sxth	r3, r3
 80108a0:	4299      	cmp	r1, r3
 80108a2:	b212      	sxth	r2, r2
 80108a4:	dbcb      	blt.n	801083e <lv_draw_img+0xd2>
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 80108a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80108a8:	9300      	str	r3, [sp, #0]
 80108aa:	990a      	ldr	r1, [sp, #40]	; 0x28
 80108ac:	462b      	mov	r3, r5
 80108ae:	4648      	mov	r0, r9
 80108b0:	f002 fd04 	bl	80132bc <lv_img_decoder_read_line>
            if(read_res != LV_RES_OK) {
 80108b4:	2801      	cmp	r0, #1
 80108b6:	f108 0801 	add.w	r8, r8, #1
 80108ba:	d011      	beq.n	80108e0 <lv_draw_img+0x174>
                lv_img_decoder_close(&cdsc->dec_dsc);
 80108bc:	4648      	mov	r0, r9
 80108be:	f002 fd0d 	bl	80132dc <lv_img_decoder_close>
        lv_draw_rect(coords, mask, &lv_style_plain, LV_OPA_COVER);
 80108c2:	23ff      	movs	r3, #255	; 0xff
 80108c4:	4a14      	ldr	r2, [pc, #80]	; (8010918 <lv_draw_img+0x1ac>)
 80108c6:	4639      	mov	r1, r7
 80108c8:	4620      	mov	r0, r4
 80108ca:	f000 fae5 	bl	8010e98 <lv_draw_rect>
        lv_draw_label(coords, mask, &lv_style_plain, LV_OPA_COVER, "No\ndata", LV_TXT_FLAG_NONE, NULL, -1, -1, NULL);
 80108ce:	2300      	movs	r3, #0
 80108d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80108d4:	9305      	str	r3, [sp, #20]
 80108d6:	9204      	str	r2, [sp, #16]
 80108d8:	9203      	str	r2, [sp, #12]
 80108da:	9302      	str	r3, [sp, #8]
 80108dc:	9301      	str	r3, [sp, #4]
 80108de:	e75a      	b.n	8010796 <lv_draw_img+0x2a>
                LV_LOG_WARN("Image draw can't read the line");
                return LV_RES_INV;
            }
            lv_draw_map(&line, mask, buf, opa, chroma_keyed, alpha_byte, style->image.color, style->image.intense);
 80108e0:	f89a 3032 	ldrb.w	r3, [sl, #50]	; 0x32
 80108e4:	9303      	str	r3, [sp, #12]
 80108e6:	f8ba 3030 	ldrh.w	r3, [sl, #48]	; 0x30
 80108ea:	f8ad 3008 	strh.w	r3, [sp, #8]
 80108ee:	9b08      	ldr	r3, [sp, #32]
 80108f0:	9301      	str	r3, [sp, #4]
 80108f2:	9b07      	ldr	r3, [sp, #28]
 80108f4:	9300      	str	r3, [sp, #0]
 80108f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80108f8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80108fa:	4633      	mov	r3, r6
 80108fc:	4639      	mov	r1, r7
 80108fe:	f7ff fdaf 	bl	8010460 <lv_draw_map>
            line.y1++;
 8010902:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8010906:	3301      	adds	r3, #1
 8010908:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            line.y2++;
 801090c:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 8010910:	3301      	adds	r3, #1
 8010912:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
 8010916:	e7bb      	b.n	8010890 <lv_draw_img+0x124>
 8010918:	2000c424 	.word	0x2000c424
 801091c:	080d89af 	.word	0x080d89af

08010920 <lv_img_src_get_type>:
    if(src == NULL) return img_src_type;
 8010920:	b150      	cbz	r0, 8010938 <lv_img_src_get_type+0x18>
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 8010922:	7803      	ldrb	r3, [r0, #0]
 8010924:	f1a3 0220 	sub.w	r2, r3, #32
 8010928:	2a5f      	cmp	r2, #95	; 0x5f
 801092a:	d907      	bls.n	801093c <lv_img_src_get_type+0x1c>
    } else if(u8_p[0] >= 0x80) {
 801092c:	f013 0f80 	tst.w	r3, #128	; 0x80
        img_src_type = LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is design to the first byte < 0x20*/
 8010930:	bf14      	ite	ne
 8010932:	2002      	movne	r0, #2
 8010934:	2000      	moveq	r0, #0
 8010936:	4770      	bx	lr
    if(src == NULL) return img_src_type;
 8010938:	2003      	movs	r0, #3
 801093a:	4770      	bx	lr
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
 801093c:	2001      	movs	r0, #1
}
 801093e:	4770      	bx	lr

08010940 <hex_char_to_num>:
 */
static uint8_t hex_char_to_num(char hex)
{
    uint8_t result = 0;

    if(hex >= '0' && hex <= '9') {
 8010940:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010944:	b2db      	uxtb	r3, r3
 8010946:	2b09      	cmp	r3, #9
 8010948:	d90a      	bls.n	8010960 <hex_char_to_num+0x20>
        result = hex - '0';
    } else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
 801094a:	2860      	cmp	r0, #96	; 0x60
 801094c:	bf84      	itt	hi
 801094e:	3820      	subhi	r0, #32
 8010950:	b2c0      	uxtbhi	r0, r0
 8010952:	3841      	subs	r0, #65	; 0x41
 8010954:	b2c0      	uxtb	r0, r0
 8010956:	2805      	cmp	r0, #5
 8010958:	d804      	bhi.n	8010964 <hex_char_to_num+0x24>
 801095a:	4b03      	ldr	r3, [pc, #12]	; (8010968 <hex_char_to_num+0x28>)
 801095c:	5c18      	ldrb	r0, [r3, r0]
 801095e:	4770      	bx	lr
 8010960:	4618      	mov	r0, r3
 8010962:	4770      	bx	lr
 8010964:	2000      	movs	r0, #0
            default: result = 0; break;
        }
    }

    return result;
}
 8010966:	4770      	bx	lr
 8010968:	080d89b7 	.word	0x080d89b7

0801096c <lv_draw_label>:
{
 801096c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010970:	b0a7      	sub	sp, #156	; 0x9c
 8010972:	4605      	mov	r5, r0
 8010974:	f89d b0c4 	ldrb.w	fp, [sp, #196]	; 0xc4
 8010978:	9309      	str	r3, [sp, #36]	; 0x24
 801097a:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
 801097e:	930d      	str	r3, [sp, #52]	; 0x34
    if((flag & LV_TXT_FLAG_EXPAND) == 0) {
 8010980:	f01b 0f02 	tst.w	fp, #2
{
 8010984:	f8bd 30d0 	ldrh.w	r3, [sp, #208]	; 0xd0
 8010988:	9107      	str	r1, [sp, #28]
 801098a:	4614      	mov	r4, r2
 801098c:	930e      	str	r3, [sp, #56]	; 0x38
 801098e:	f8dd 80d4 	ldr.w	r8, [sp, #212]	; 0xd4
    const lv_font_t * font = style->text.font;
 8010992:	f8d2 a024 	ldr.w	sl, [r2, #36]	; 0x24
    if((flag & LV_TXT_FLAG_EXPAND) == 0) {
 8010996:	f040 8094 	bne.w	8010ac2 <lv_draw_label+0x156>
    return area_p->x2 - area_p->x1 + 1;
 801099a:	8883      	ldrh	r3, [r0, #4]
 801099c:	8802      	ldrh	r2, [r0, #0]
 801099e:	3301      	adds	r3, #1
 80109a0:	1a9b      	subs	r3, r3, r2
 80109a2:	b21b      	sxth	r3, r3
    lv_coord_t line_height = lv_font_get_line_height(font) + style->text.line_space;
 80109a4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
        w = p.x;
 80109a6:	9304      	str	r3, [sp, #16]
    lv_coord_t line_height = lv_font_get_line_height(font) + style->text.line_space;
 80109a8:	f89a 3008 	ldrb.w	r3, [sl, #8]
 80109ac:	4413      	add	r3, r2
 80109ae:	b29b      	uxth	r3, r3
 80109b0:	9305      	str	r3, [sp, #20]
 80109b2:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80109b6:	9306      	str	r3, [sp, #24]
    pos.x = coords->x1;
 80109b8:	882b      	ldrh	r3, [r5, #0]
 80109ba:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
    if(offset != NULL) {
 80109be:	9b32      	ldr	r3, [sp, #200]	; 0xc8
    pos.y = coords->y1;
 80109c0:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80109c4:	f8ad 204e 	strh.w	r2, [sp, #78]	; 0x4e
    if(offset != NULL) {
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	f000 81f1 	beq.w	8010db0 <lv_draw_label+0x444>
        x_ofs = offset->x;
 80109ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80109d2:	930a      	str	r3, [sp, #40]	; 0x28
        y_ofs = offset->y;
 80109d4:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80109d6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
        pos.y += y_ofs;
 80109da:	18d1      	adds	r1, r2, r3
 80109dc:	f8ad 104e 	strh.w	r1, [sp, #78]	; 0x4e
    if(hint && y_ofs == 0) {
 80109e0:	f1b8 0f00 	cmp.w	r8, #0
 80109e4:	f000 81ea 	beq.w	8010dbc <lv_draw_label+0x450>
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	f040 81e7 	bne.w	8010dbc <lv_draw_label+0x450>
        if(LV_MATH_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
 80109ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80109f2:	1a9b      	subs	r3, r3, r2
 80109f4:	9a06      	ldr	r2, [sp, #24]
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	bfb8      	it	lt
 80109fa:	425b      	neglt	r3, r3
 80109fc:	f5c2 7200 	rsb	r2, r2, #512	; 0x200
 8010a00:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
            hint->line_start = -1;
 8010a04:	bfc4      	itt	gt
 8010a06:	f04f 33ff 	movgt.w	r3, #4294967295	; 0xffffffff
 8010a0a:	f8c8 3000 	strgt.w	r3, [r8]
        last_line_start = hint->line_start;
 8010a0e:	f8d8 7000 	ldr.w	r7, [r8]
    if(hint && last_line_start >= 0) {
 8010a12:	2f00      	cmp	r7, #0
 8010a14:	f2c0 81d2 	blt.w	8010dbc <lv_draw_label+0x450>
        pos.y += hint->y;
 8010a18:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
 8010a1c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010a20:	4413      	add	r3, r2
 8010a22:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
    uint32_t line_end = line_start + lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 8010a26:	9830      	ldr	r0, [sp, #192]	; 0xc0
 8010a28:	f9b4 2028 	ldrsh.w	r2, [r4, #40]	; 0x28
 8010a2c:	f8cd b000 	str.w	fp, [sp]
 8010a30:	9b04      	ldr	r3, [sp, #16]
 8010a32:	4651      	mov	r1, sl
 8010a34:	4438      	add	r0, r7
 8010a36:	f003 fd41 	bl	80144bc <lv_txt_get_next_line>
 8010a3a:	19c6      	adds	r6, r0, r7
    while(pos.y + line_height < mask->y1) {
 8010a3c:	9a06      	ldr	r2, [sp, #24]
 8010a3e:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 8010a42:	4413      	add	r3, r2
 8010a44:	9a07      	ldr	r2, [sp, #28]
 8010a46:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8010a4a:	4293      	cmp	r3, r2
 8010a4c:	db4e      	blt.n	8010aec <lv_draw_label+0x180>
    if(flag & LV_TXT_FLAG_CENTER) {
 8010a4e:	f01b 0304 	ands.w	r3, fp, #4
 8010a52:	930f      	str	r3, [sp, #60]	; 0x3c
 8010a54:	d078      	beq.n	8010b48 <lv_draw_label+0x1dc>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, style->text.letter_space, flag);
 8010a56:	9830      	ldr	r0, [sp, #192]	; 0xc0
 8010a58:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 8010a5c:	f8cd b000 	str.w	fp, [sp]
 8010a60:	1bf1      	subs	r1, r6, r7
 8010a62:	4652      	mov	r2, sl
 8010a64:	b289      	uxth	r1, r1
 8010a66:	4438      	add	r0, r7
 8010a68:	f003 fdb0 	bl	80145cc <lv_txt_get_width>
 8010a6c:	88ab      	ldrh	r3, [r5, #4]
 8010a6e:	882a      	ldrh	r2, [r5, #0]
 8010a70:	3301      	adds	r3, #1
 8010a72:	1a9b      	subs	r3, r3, r2
        pos.x += (lv_area_get_width(coords) - line_width) / 2;
 8010a74:	b21b      	sxth	r3, r3
 8010a76:	1a18      	subs	r0, r3, r0
 8010a78:	2302      	movs	r3, #2
 8010a7a:	fb90 f0f3 	sdiv	r0, r0, r3
        pos.x += lv_area_get_width(coords) - line_width;
 8010a7e:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8010a82:	4418      	add	r0, r3
 8010a84:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->text.opa : (uint16_t)((uint16_t)style->text.opa * opa_scale) >> 8;
 8010a88:	9b09      	ldr	r3, [sp, #36]	; 0x24
    lv_style_copy(&sel_style, &lv_style_plain_color);
 8010a8a:	49bb      	ldr	r1, [pc, #748]	; (8010d78 <lv_draw_label+0x40c>)
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->text.opa : (uint16_t)((uint16_t)style->text.opa * opa_scale) >> 8;
 8010a8c:	2bff      	cmp	r3, #255	; 0xff
 8010a8e:	bf18      	it	ne
 8010a90:	9a09      	ldrne	r2, [sp, #36]	; 0x24
 8010a92:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8010a96:	bf1c      	itt	ne
 8010a98:	4353      	mulne	r3, r2
 8010a9a:	f3c3 2307 	ubfxne	r3, r3, #8, #8
    lv_style_copy(&sel_style, &lv_style_plain_color);
 8010a9e:	a817      	add	r0, sp, #92	; 0x5c
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->text.opa : (uint16_t)((uint16_t)style->text.opa * opa_scale) >> 8;
 8010aa0:	9309      	str	r3, [sp, #36]	; 0x24
    lv_style_copy(&sel_style, &lv_style_plain_color);
 8010aa2:	f7fe fe17 	bl	800f6d4 <lv_style_copy>
    sel_style.body.main_color = sel_style.body.grad_color = style->text.sel_color;
 8010aa6:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8010aa8:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 8010aac:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
    uint16_t par_start = 0;
 8010ab0:	2300      	movs	r3, #0
 8010ab2:	9308      	str	r3, [sp, #32]
    while(txt[line_start] != '\0') {
 8010ab4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8010ab6:	5ddb      	ldrb	r3, [r3, r7]
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d15a      	bne.n	8010b72 <lv_draw_label+0x206>
}
 8010abc:	b027      	add	sp, #156	; 0x9c
 8010abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_txt_get_size(&p, txt, style->text.font, style->text.letter_space, style->text.line_space, LV_COORD_MAX,
 8010ac2:	f9b2 3028 	ldrsh.w	r3, [r2, #40]	; 0x28
 8010ac6:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8010ac8:	f8cd b008 	str.w	fp, [sp, #8]
 8010acc:	f647 4218 	movw	r2, #31768	; 0x7c18
 8010ad0:	9201      	str	r2, [sp, #4]
 8010ad2:	f9b4 202a 	ldrsh.w	r2, [r4, #42]	; 0x2a
 8010ad6:	9200      	str	r2, [sp, #0]
 8010ad8:	a817      	add	r0, sp, #92	; 0x5c
 8010ada:	4652      	mov	r2, sl
 8010adc:	f003 fdbe 	bl	801465c <lv_txt_get_size>
        w = p.x;
 8010ae0:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 8010ae4:	e75e      	b.n	80109a4 <lv_draw_label+0x38>
    lv_coord_t x_ofs = 0;
 8010ae6:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8010ae8:	930a      	str	r3, [sp, #40]	; 0x28
 8010aea:	e780      	b.n	80109ee <lv_draw_label+0x82>
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 8010aec:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8010aee:	f9b4 2028 	ldrsh.w	r2, [r4, #40]	; 0x28
 8010af2:	f8cd b000 	str.w	fp, [sp]
 8010af6:	4433      	add	r3, r6
 8010af8:	9308      	str	r3, [sp, #32]
 8010afa:	4651      	mov	r1, sl
 8010afc:	9b04      	ldr	r3, [sp, #16]
 8010afe:	9808      	ldr	r0, [sp, #32]
 8010b00:	f003 fcdc 	bl	80144bc <lv_txt_get_next_line>
        pos.y += line_height;
 8010b04:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 8010b08:	9a05      	ldr	r2, [sp, #20]
 8010b0a:	4413      	add	r3, r2
 8010b0c:	b21b      	sxth	r3, r3
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 8010b0e:	4430      	add	r0, r6
        pos.y += line_height;
 8010b10:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
 8010b14:	f1b8 0f00 	cmp.w	r8, #0
 8010b18:	d00f      	beq.n	8010b3a <lv_draw_label+0x1ce>
 8010b1a:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 8010b1e:	db0c      	blt.n	8010b3a <lv_draw_label+0x1ce>
 8010b20:	f8d8 2000 	ldr.w	r2, [r8]
 8010b24:	2a00      	cmp	r2, #0
 8010b26:	da08      	bge.n	8010b3a <lv_draw_label+0x1ce>
            hint->y          = pos.y - coords->y1;
 8010b28:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
            hint->line_start = line_start;
 8010b2c:	f8c8 6000 	str.w	r6, [r8]
            hint->y          = pos.y - coords->y1;
 8010b30:	1a9b      	subs	r3, r3, r2
 8010b32:	f8c8 3004 	str.w	r3, [r8, #4]
            hint->coord_y    = coords->y1;
 8010b36:	f8c8 2008 	str.w	r2, [r8, #8]
        if(txt[line_start] == '\0') return;
 8010b3a:	9b08      	ldr	r3, [sp, #32]
 8010b3c:	781b      	ldrb	r3, [r3, #0]
 8010b3e:	4637      	mov	r7, r6
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d0bb      	beq.n	8010abc <lv_draw_label+0x150>
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 8010b44:	4606      	mov	r6, r0
 8010b46:	e779      	b.n	8010a3c <lv_draw_label+0xd0>
    else if(flag & LV_TXT_FLAG_RIGHT) {
 8010b48:	f01b 0f08 	tst.w	fp, #8
 8010b4c:	d09c      	beq.n	8010a88 <lv_draw_label+0x11c>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, style->text.letter_space, flag);
 8010b4e:	9830      	ldr	r0, [sp, #192]	; 0xc0
 8010b50:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 8010b54:	f8cd b000 	str.w	fp, [sp]
 8010b58:	1bf1      	subs	r1, r6, r7
 8010b5a:	4652      	mov	r2, sl
 8010b5c:	b289      	uxth	r1, r1
 8010b5e:	4438      	add	r0, r7
 8010b60:	f003 fd34 	bl	80145cc <lv_txt_get_width>
 8010b64:	88ab      	ldrh	r3, [r5, #4]
 8010b66:	882a      	ldrh	r2, [r5, #0]
 8010b68:	3301      	adds	r3, #1
 8010b6a:	1a9b      	subs	r3, r3, r2
        pos.x += lv_area_get_width(coords) - line_width;
 8010b6c:	b21b      	sxth	r3, r3
 8010b6e:	1a18      	subs	r0, r3, r0
 8010b70:	e785      	b.n	8010a7e <lv_draw_label+0x112>
        if(offset != NULL) {
 8010b72:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8010b74:	b12b      	cbz	r3, 8010b82 <lv_draw_label+0x216>
            pos.x += x_ofs;
 8010b76:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8010b7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010b7c:	4413      	add	r3, r2
 8010b7e:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8010b82:	f00b 0301 	and.w	r3, fp, #1
        i         = line_start;
 8010b86:	9714      	str	r7, [sp, #80]	; 0x50
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8010b88:	9311      	str	r3, [sp, #68]	; 0x44
        cmd_state = CMD_STATE_WAIT;
 8010b8a:	2700      	movs	r7, #0
        while(i < line_end) {
 8010b8c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010b8e:	429e      	cmp	r6, r3
 8010b90:	d83a      	bhi.n	8010c08 <lv_draw_label+0x29c>
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 8010b92:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8010b94:	f9b4 2028 	ldrsh.w	r2, [r4, #40]	; 0x28
 8010b98:	f8cd b000 	str.w	fp, [sp]
 8010b9c:	199f      	adds	r7, r3, r6
 8010b9e:	4651      	mov	r1, sl
 8010ba0:	9b04      	ldr	r3, [sp, #16]
 8010ba2:	4638      	mov	r0, r7
 8010ba4:	f003 fc8a 	bl	80144bc <lv_txt_get_next_line>
        pos.x = coords->x1;
 8010ba8:	882b      	ldrh	r3, [r5, #0]
 8010baa:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        if(flag & LV_TXT_FLAG_CENTER) {
 8010bae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 8010bb0:	4601      	mov	r1, r0
 8010bb2:	eb00 0806 	add.w	r8, r0, r6
        if(flag & LV_TXT_FLAG_CENTER) {
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	f000 80e7 	beq.w	8010d8a <lv_draw_label+0x41e>
            line_width =
 8010bbc:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 8010bc0:	f8cd b000 	str.w	fp, [sp]
 8010bc4:	4652      	mov	r2, sl
 8010bc6:	4638      	mov	r0, r7
 8010bc8:	f003 fd00 	bl	80145cc <lv_txt_get_width>
 8010bcc:	88ab      	ldrh	r3, [r5, #4]
 8010bce:	882a      	ldrh	r2, [r5, #0]
 8010bd0:	3301      	adds	r3, #1
 8010bd2:	1a9b      	subs	r3, r3, r2
            pos.x += (lv_area_get_width(coords) - line_width) / 2;
 8010bd4:	b21b      	sxth	r3, r3
 8010bd6:	1a18      	subs	r0, r3, r0
 8010bd8:	2302      	movs	r3, #2
 8010bda:	fb90 f0f3 	sdiv	r0, r0, r3
            pos.x += lv_area_get_width(coords) - line_width;
 8010bde:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8010be2:	4418      	add	r0, r3
 8010be4:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
        pos.y += line_height;
 8010be8:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 8010bec:	9a05      	ldr	r2, [sp, #20]
 8010bee:	4413      	add	r3, r2
        if(pos.y > mask->y2) return;
 8010bf0:	9a07      	ldr	r2, [sp, #28]
 8010bf2:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
        pos.y += line_height;
 8010bf6:	b21b      	sxth	r3, r3
        if(pos.y > mask->y2) return;
 8010bf8:	429a      	cmp	r2, r3
        pos.y += line_height;
 8010bfa:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
 8010bfe:	4637      	mov	r7, r6
        if(pos.y > mask->y2) return;
 8010c00:	f6ff af5c 	blt.w	8010abc <lv_draw_label+0x150>
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 8010c04:	4646      	mov	r6, r8
 8010c06:	e755      	b.n	8010ab4 <lv_draw_label+0x148>
            letter      = lv_txt_encoded_next(txt, &i);
 8010c08:	4b5c      	ldr	r3, [pc, #368]	; (8010d7c <lv_draw_label+0x410>)
 8010c0a:	9830      	ldr	r0, [sp, #192]	; 0xc0
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	a914      	add	r1, sp, #80	; 0x50
 8010c10:	4798      	blx	r3
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 8010c12:	9a30      	ldr	r2, [sp, #192]	; 0xc0
            letter      = lv_txt_encoded_next(txt, &i);
 8010c14:	9006      	str	r0, [sp, #24]
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 8010c16:	4b59      	ldr	r3, [pc, #356]	; (8010d7c <lv_draw_label+0x410>)
 8010c18:	9814      	ldr	r0, [sp, #80]	; 0x50
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	4410      	add	r0, r2
 8010c1e:	2100      	movs	r1, #0
 8010c20:	4798      	blx	r3
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8010c22:	9b11      	ldr	r3, [sp, #68]	; 0x44
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 8010c24:	4602      	mov	r2, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d055      	beq.n	8010cd6 <lv_draw_label+0x36a>
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 8010c2a:	9b06      	ldr	r3, [sp, #24]
 8010c2c:	2b23      	cmp	r3, #35	; 0x23
 8010c2e:	d10c      	bne.n	8010c4a <lv_draw_label+0x2de>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
 8010c30:	b927      	cbnz	r7, 8010c3c <lv_draw_label+0x2d0>
                        par_start = i;
 8010c32:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8010c36:	9308      	str	r3, [sp, #32]
                        cmd_state = CMD_STATE_PAR;
 8010c38:	2701      	movs	r7, #1
                        continue;
 8010c3a:	e7a7      	b.n	8010b8c <lv_draw_label+0x220>
                    } else if(cmd_state == CMD_STATE_PAR) { /*Other start char in parameter escaped cmd. char */
 8010c3c:	2f01      	cmp	r7, #1
 8010c3e:	f000 80bf 	beq.w	8010dc0 <lv_draw_label+0x454>
                    } else if(cmd_state == CMD_STATE_IN) { /*Command end */
 8010c42:	2f02      	cmp	r7, #2
 8010c44:	d149      	bne.n	8010cda <lv_draw_label+0x36e>
                        cmd_state = CMD_STATE_WAIT;
 8010c46:	2700      	movs	r7, #0
 8010c48:	e7a0      	b.n	8010b8c <lv_draw_label+0x220>
                if(cmd_state == CMD_STATE_PAR) {
 8010c4a:	2f01      	cmp	r7, #1
 8010c4c:	d143      	bne.n	8010cd6 <lv_draw_label+0x36a>
                    if(letter == ' ') {
 8010c4e:	9b06      	ldr	r3, [sp, #24]
 8010c50:	2b20      	cmp	r3, #32
 8010c52:	d19b      	bne.n	8010b8c <lv_draw_label+0x220>
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
 8010c54:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010c56:	9a08      	ldr	r2, [sp, #32]
 8010c58:	1a9b      	subs	r3, r3, r2
 8010c5a:	2b07      	cmp	r3, #7
 8010c5c:	d139      	bne.n	8010cd2 <lv_draw_label+0x366>
                            memcpy(buf, &txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
 8010c5e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8010c60:	4413      	add	r3, r2
 8010c62:	6818      	ldr	r0, [r3, #0]
 8010c64:	9015      	str	r0, [sp, #84]	; 0x54
 8010c66:	889b      	ldrh	r3, [r3, #4]
 8010c68:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
 8010c6c:	0e01      	lsrs	r1, r0, #24
 8010c6e:	0c07      	lsrs	r7, r0, #16
 8010c70:	ea4f 2810 	mov.w	r8, r0, lsr #8
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
 8010c74:	b2c0      	uxtb	r0, r0
 8010c76:	f7ff fe63 	bl	8010940 <hex_char_to_num>
 8010c7a:	4602      	mov	r2, r0
 8010c7c:	fa5f f088 	uxtb.w	r0, r8
 8010c80:	f7ff fe5e 	bl	8010940 <hex_char_to_num>
 8010c84:	eb00 1202 	add.w	r2, r0, r2, lsl #4
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
 8010c88:	b2f8      	uxtb	r0, r7
 8010c8a:	f7ff fe59 	bl	8010940 <hex_char_to_num>
 8010c8e:	4607      	mov	r7, r0
 8010c90:	b2c8      	uxtb	r0, r1
 8010c92:	f7ff fe55 	bl	8010940 <hex_char_to_num>
 8010c96:	eb00 1107 	add.w	r1, r0, r7, lsl #4
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
 8010c9a:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
 8010c9e:	f7ff fe4f 	bl	8010940 <hex_char_to_num>
 8010ca2:	4607      	mov	r7, r0
 8010ca4:	f89d 0059 	ldrb.w	r0, [sp, #89]	; 0x59
 8010ca8:	f7ff fe4a 	bl	8010940 <hex_char_to_num>
 8010cac:	eb00 1007 	add.w	r0, r0, r7, lsl #4
#if LV_COLOR_16_SWAP == 0
#define LV_COLOR_MAKE(r8, g8, b8) ((lv_color_t){{b8 >> 3, g8 >> 2, r8 >> 3}})
static inline lv_color_t lv_color_make(uint8_t r8, uint8_t g8, uint8_t b8)
{
    lv_color_t color;
    color.ch.blue  = (uint16_t)(b8 >> 3);
 8010cb0:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8010cb4:	f360 0904 	bfi	r9, r0, #0, #5
    color.ch.green = (uint16_t)(g8 >> 2);
 8010cb8:	f3c1 0185 	ubfx	r1, r1, #2, #6
 8010cbc:	f361 194a 	bfi	r9, r1, #5, #6
    color.ch.red   = (uint16_t)(r8 >> 3);
 8010cc0:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8010cc4:	f362 29cf 	bfi	r9, r2, #11, #5
 8010cc8:	fa1f f389 	uxth.w	r3, r9
                            recolor.full = style->text.color.full;
 8010ccc:	930b      	str	r3, [sp, #44]	; 0x2c
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
 8010cce:	2702      	movs	r7, #2
 8010cd0:	e75c      	b.n	8010b8c <lv_draw_label+0x220>
                            recolor.full = style->text.color.full;
 8010cd2:	8c23      	ldrh	r3, [r4, #32]
 8010cd4:	e7fa      	b.n	8010ccc <lv_draw_label+0x360>
            if(cmd_state == CMD_STATE_IN) color = recolor;
 8010cd6:	2f02      	cmp	r7, #2
 8010cd8:	d054      	beq.n	8010d84 <lv_draw_label+0x418>
            lv_color_t color = style->text.color;
 8010cda:	8c23      	ldrh	r3, [r4, #32]
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 8010cdc:	9906      	ldr	r1, [sp, #24]
            if(cmd_state == CMD_STATE_IN) color = recolor;
 8010cde:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 8010ce2:	4650      	mov	r0, sl
 8010ce4:	f002 fb36 	bl	8013354 <lv_font_get_glyph_width>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 8010ce8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 8010cea:	b203      	sxth	r3, r0
 8010cec:	9310      	str	r3, [sp, #64]	; 0x40
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 8010cee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010cf2:	429a      	cmp	r2, r3
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 8010cf4:	4680      	mov	r8, r0
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 8010cf6:	d026      	beq.n	8010d46 <lv_draw_label+0x3da>
 8010cf8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010cfa:	429a      	cmp	r2, r3
 8010cfc:	d023      	beq.n	8010d46 <lv_draw_label+0x3da>
                int char_ind = lv_encoded_get_char_id(txt, i);
 8010cfe:	4b20      	ldr	r3, [pc, #128]	; (8010d80 <lv_draw_label+0x414>)
 8010d00:	9914      	ldr	r1, [sp, #80]	; 0x50
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	9830      	ldr	r0, [sp, #192]	; 0xc0
 8010d06:	4798      	blx	r3
                if(char_ind > sel_start && char_ind <= sel_end) {
 8010d08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010d0a:	4298      	cmp	r0, r3
 8010d0c:	dd1b      	ble.n	8010d46 <lv_draw_label+0x3da>
 8010d0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010d10:	4298      	cmp	r0, r3
 8010d12:	dc18      	bgt.n	8010d46 <lv_draw_label+0x3da>
                    sel_coords.x1 = pos.x;
 8010d14:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
                    sel_coords.x2 = pos.x + letter_w + style->text.letter_space - 1;
 8010d18:	8d21      	ldrh	r1, [r4, #40]	; 0x28
                    sel_coords.x1 = pos.x;
 8010d1a:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
                    sel_coords.x2 = pos.x + letter_w + style->text.letter_space - 1;
 8010d1e:	3b01      	subs	r3, #1
 8010d20:	440b      	add	r3, r1
                    sel_coords.y1 = pos.y;
 8010d22:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
 8010d26:	f8ad 2056 	strh.w	r2, [sp, #86]	; 0x56
                    sel_coords.x2 = pos.x + letter_w + style->text.letter_space - 1;
 8010d2a:	4443      	add	r3, r8
 8010d2c:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
                    sel_coords.y2 = pos.y + line_height - 1;
 8010d30:	9b05      	ldr	r3, [sp, #20]
                    lv_draw_rect(&sel_coords, mask, &sel_style, opa);
 8010d32:	9907      	ldr	r1, [sp, #28]
                    sel_coords.y2 = pos.y + line_height - 1;
 8010d34:	3a01      	subs	r2, #1
 8010d36:	441a      	add	r2, r3
 8010d38:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
                    lv_draw_rect(&sel_coords, mask, &sel_style, opa);
 8010d3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d3e:	aa17      	add	r2, sp, #92	; 0x5c
 8010d40:	a815      	add	r0, sp, #84	; 0x54
 8010d42:	f000 f8a9 	bl	8010e98 <lv_draw_rect>
            lv_draw_letter(&pos, mask, font, letter, color, opa);
 8010d46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d48:	9301      	str	r3, [sp, #4]
 8010d4a:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8010d4e:	f8ad 3000 	strh.w	r3, [sp]
 8010d52:	4652      	mov	r2, sl
 8010d54:	9b06      	ldr	r3, [sp, #24]
 8010d56:	9907      	ldr	r1, [sp, #28]
 8010d58:	a813      	add	r0, sp, #76	; 0x4c
 8010d5a:	f7ff f9e7 	bl	801012c <lv_draw_letter>
            if(letter_w > 0) {
 8010d5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	f77f af13 	ble.w	8010b8c <lv_draw_label+0x220>
                pos.x += letter_w + style->text.letter_space;
 8010d66:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8010d6a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8010d6c:	4413      	add	r3, r2
 8010d6e:	4498      	add	r8, r3
 8010d70:	f8ad 804c 	strh.w	r8, [sp, #76]	; 0x4c
 8010d74:	e70a      	b.n	8010b8c <lv_draw_label+0x220>
 8010d76:	bf00      	nop
 8010d78:	2000c514 	.word	0x2000c514
 8010d7c:	20001ca4 	.word	0x20001ca4
 8010d80:	20001c9c 	.word	0x20001c9c
            if(cmd_state == CMD_STATE_IN) color = recolor;
 8010d84:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8010d88:	e7a8      	b.n	8010cdc <lv_draw_label+0x370>
        else if(flag & LV_TXT_FLAG_RIGHT) {
 8010d8a:	f01b 0f08 	tst.w	fp, #8
 8010d8e:	f43f af2b 	beq.w	8010be8 <lv_draw_label+0x27c>
            line_width =
 8010d92:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 8010d96:	f8cd b000 	str.w	fp, [sp]
 8010d9a:	4652      	mov	r2, sl
 8010d9c:	4638      	mov	r0, r7
 8010d9e:	f003 fc15 	bl	80145cc <lv_txt_get_width>
 8010da2:	88ab      	ldrh	r3, [r5, #4]
 8010da4:	882a      	ldrh	r2, [r5, #0]
 8010da6:	3301      	adds	r3, #1
 8010da8:	1a9b      	subs	r3, r3, r2
            pos.x += lv_area_get_width(coords) - line_width;
 8010daa:	b21b      	sxth	r3, r3
 8010dac:	1a18      	subs	r0, r3, r0
 8010dae:	e716      	b.n	8010bde <lv_draw_label+0x272>
    if(hint && y_ofs == 0) {
 8010db0:	f1b8 0f00 	cmp.w	r8, #0
 8010db4:	f47f ae97 	bne.w	8010ae6 <lv_draw_label+0x17a>
    lv_coord_t x_ofs = 0;
 8010db8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    uint32_t line_start     = 0;
 8010dbc:	2700      	movs	r7, #0
 8010dbe:	e632      	b.n	8010a26 <lv_draw_label+0xba>
                        cmd_state = CMD_STATE_WAIT;
 8010dc0:	2700      	movs	r7, #0
 8010dc2:	e78a      	b.n	8010cda <lv_draw_label+0x36e>

08010dc4 <lv_color_mix>:
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 8010dc4:	f1c2 03ff 	rsb	r3, r2, #255	; 0xff
{
 8010dc8:	b570      	push	{r4, r5, r6, lr}
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 8010dca:	b294      	uxth	r4, r2
 8010dcc:	b29a      	uxth	r2, r3
 8010dce:	f3c1 23c4 	ubfx	r3, r1, #11, #5
 8010dd2:	fb13 f302 	smulbb	r3, r3, r2
 8010dd6:	f3c0 25c4 	ubfx	r5, r0, #11, #5
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 8010dda:	f3c1 1645 	ubfx	r6, r1, #5, #6
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 8010dde:	f001 011f 	and.w	r1, r1, #31
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 8010de2:	fb05 3504 	mla	r5, r5, r4, r3
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 8010de6:	fb16 f602 	smulbb	r6, r6, r2
 8010dea:	f3c0 1345 	ubfx	r3, r0, #5, #6
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 8010dee:	fb11 f202 	smulbb	r2, r1, r2
 8010df2:	f000 001f 	and.w	r0, r0, #31
 8010df6:	fb00 2204 	mla	r2, r0, r4, r2
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 8010dfa:	fb03 6304 	mla	r3, r3, r4, r6
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 8010dfe:	f3c2 2207 	ubfx	r2, r2, #8, #8
    return ret;
 8010e02:	f04f 0000 	mov.w	r0, #0
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 8010e06:	f3c3 2305 	ubfx	r3, r3, #8, #6
    return ret;
 8010e0a:	f362 0004 	bfi	r0, r2, #0, #5
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 8010e0e:	f3c5 2504 	ubfx	r5, r5, #8, #5
    return ret;
 8010e12:	f363 104a 	bfi	r0, r3, #5, #6
 8010e16:	f365 20cf 	bfi	r0, r5, #11, #5
}
 8010e1a:	bd70      	pop	{r4, r5, r6, pc}

08010e1c <lv_draw_cont_radius_corr>:
}

#endif

static uint16_t lv_draw_cont_radius_corr(uint16_t r, lv_coord_t w, lv_coord_t h)
{
 8010e1c:	b570      	push	{r4, r5, r6, lr}
 8010e1e:	460e      	mov	r6, r1
 8010e20:	4604      	mov	r4, r0
 8010e22:	4615      	mov	r5, r2
    bool aa = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8010e24:	f7fe faac 	bl	800f380 <lv_refr_get_disp_refreshing>
 8010e28:	f002 fc62 	bl	80136f0 <lv_disp_get_antialiasing>

    if(r >= (w >> 1)) {
 8010e2c:	1071      	asrs	r1, r6, #1
 8010e2e:	428c      	cmp	r4, r1
 8010e30:	db03      	blt.n	8010e3a <lv_draw_cont_radius_corr+0x1e>
        r = (w >> 1);
 8010e32:	b28c      	uxth	r4, r1
        if(r != 0) r--;
 8010e34:	b10c      	cbz	r4, 8010e3a <lv_draw_cont_radius_corr+0x1e>
 8010e36:	3c01      	subs	r4, #1
 8010e38:	b2a4      	uxth	r4, r4
    }
    if(r >= (h >> 1)) {
 8010e3a:	106a      	asrs	r2, r5, #1
 8010e3c:	4294      	cmp	r4, r2
 8010e3e:	db03      	blt.n	8010e48 <lv_draw_cont_radius_corr+0x2c>
        r = (h >> 1);
 8010e40:	b294      	uxth	r4, r2
        if(r != 0) r--;
 8010e42:	b124      	cbz	r4, 8010e4e <lv_draw_cont_radius_corr+0x32>
 8010e44:	3c01      	subs	r4, #1
 8010e46:	b2a4      	uxth	r4, r4
    }

    if(r > 0) r -= aa;
 8010e48:	b10c      	cbz	r4, 8010e4e <lv_draw_cont_radius_corr+0x32>
 8010e4a:	1a24      	subs	r4, r4, r0
 8010e4c:	b2a4      	uxth	r4, r4

    return r;
}
 8010e4e:	4620      	mov	r0, r4
 8010e50:	bd70      	pop	{r4, r5, r6, pc}
	...

08010e54 <antialias_get_opa_circ>:
#if CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD < 1
    if(seg == 1) return 170;
#endif

#if CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD < 2
    if(seg == 2) return (opa_map2[px_id] * opa) >> 8;
 8010e54:	2802      	cmp	r0, #2
 8010e56:	d105      	bne.n	8010e64 <antialias_get_opa_circ+0x10>
 8010e58:	4b0b      	ldr	r3, [pc, #44]	; (8010e88 <antialias_get_opa_circ+0x34>)
#if CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD < 4
    if(seg == 4) return (opa_map4[px_id] * opa) >> 8;
#endif

    uint8_t id = (uint32_t)((uint32_t)px_id * (sizeof(opa_map8) - 1)) / (seg - 1);
    return (uint32_t)((uint32_t)opa_map8[id] * opa) >> 8;
 8010e5a:	5c58      	ldrb	r0, [r3, r1]
 8010e5c:	fb10 f002 	smulbb	r0, r0, r2
 8010e60:	0a00      	lsrs	r0, r0, #8
}
 8010e62:	4770      	bx	lr
    if(seg == 3) return (opa_map3[px_id] * opa) >> 8;
 8010e64:	2803      	cmp	r0, #3
 8010e66:	d101      	bne.n	8010e6c <antialias_get_opa_circ+0x18>
 8010e68:	4b08      	ldr	r3, [pc, #32]	; (8010e8c <antialias_get_opa_circ+0x38>)
 8010e6a:	e7f6      	b.n	8010e5a <antialias_get_opa_circ+0x6>
    if(seg == 4) return (opa_map4[px_id] * opa) >> 8;
 8010e6c:	2804      	cmp	r0, #4
    uint8_t id = (uint32_t)((uint32_t)px_id * (sizeof(opa_map8) - 1)) / (seg - 1);
 8010e6e:	bf1b      	ittet	ne
 8010e70:	ebc1 01c1 	rsbne	r1, r1, r1, lsl #3
 8010e74:	f100 33ff 	addne.w	r3, r0, #4294967295	; 0xffffffff
    if(seg == 4) return (opa_map4[px_id] * opa) >> 8;
 8010e78:	4b05      	ldreq	r3, [pc, #20]	; (8010e90 <antialias_get_opa_circ+0x3c>)
    uint8_t id = (uint32_t)((uint32_t)px_id * (sizeof(opa_map8) - 1)) / (seg - 1);
 8010e7a:	fbb1 f1f3 	udivne	r1, r1, r3
    return (uint32_t)((uint32_t)opa_map8[id] * opa) >> 8;
 8010e7e:	bf1c      	itt	ne
 8010e80:	4b04      	ldrne	r3, [pc, #16]	; (8010e94 <antialias_get_opa_circ+0x40>)
 8010e82:	b2c9      	uxtbne	r1, r1
 8010e84:	e7e9      	b.n	8010e5a <antialias_get_opa_circ+0x6>
 8010e86:	bf00      	nop
 8010e88:	080d89bd 	.word	0x080d89bd
 8010e8c:	080d89bf 	.word	0x080d89bf
 8010e90:	080d89c2 	.word	0x080d89c2
 8010e94:	080d89c6 	.word	0x080d89c6

08010e98 <lv_draw_rect>:
{
 8010e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e9c:	b0a9      	sub	sp, #164	; 0xa4
 8010e9e:	4682      	mov	sl, r0
 8010ea0:	9202      	str	r2, [sp, #8]
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 8010ea2:	88c2      	ldrh	r2, [r0, #6]
 8010ea4:	9308      	str	r3, [sp, #32]
 8010ea6:	8843      	ldrh	r3, [r0, #2]
 8010ea8:	3201      	adds	r2, #1
 8010eaa:	1ad2      	subs	r2, r2, r3
 8010eac:	b212      	sxth	r2, r2
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 8010eae:	2a00      	cmp	r2, #0
{
 8010eb0:	468b      	mov	fp, r1
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 8010eb2:	f340 869c 	ble.w	8011bee <lv_draw_rect+0xd56>
    return area_p->x2 - area_p->x1 + 1;
 8010eb6:	8881      	ldrh	r1, [r0, #4]
 8010eb8:	8803      	ldrh	r3, [r0, #0]
 8010eba:	3101      	adds	r1, #1
 8010ebc:	1ac9      	subs	r1, r1, r3
 8010ebe:	b209      	sxth	r1, r1
 8010ec0:	2900      	cmp	r1, #0
 8010ec2:	f340 8694 	ble.w	8011bee <lv_draw_rect+0xd56>
    if(style->body.shadow.width != 0) {
 8010ec6:	9b02      	ldr	r3, [sp, #8]
 8010ec8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	f000 82d3 	beq.w	8011478 <lv_draw_rect+0x5e0>
    radius            = lv_draw_cont_radius_corr(radius, width, height);
 8010ed2:	9b02      	ldr	r3, [sp, #8]
 8010ed4:	88d8      	ldrh	r0, [r3, #6]
 8010ed6:	f7ff ffa1 	bl	8010e1c <lv_draw_cont_radius_corr>
    memcpy(dest, src, sizeof(lv_area_t));
 8010eda:	f8da 1004 	ldr.w	r1, [sl, #4]
 8010ede:	4604      	mov	r4, r0
 8010ee0:	f8da 0000 	ldr.w	r0, [sl]
 8010ee4:	ab1e      	add	r3, sp, #120	; 0x78
 8010ee6:	c303      	stmia	r3!, {r0, r1}
    area_tmp.x1 += radius;
 8010ee8:	f8bd 3078 	ldrh.w	r3, [sp, #120]	; 0x78
 8010eec:	4423      	add	r3, r4
 8010eee:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
    area_tmp.x2 -= radius;
 8010ef2:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 8010ef6:	a91e      	add	r1, sp, #120	; 0x78
    area_tmp.x2 -= radius;
 8010ef8:	1b1b      	subs	r3, r3, r4
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 8010efa:	4658      	mov	r0, fp
    area_tmp.x2 -= radius;
 8010efc:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 8010f00:	f002 fe0a 	bl	8013b18 <lv_area_is_in>
 8010f04:	2800      	cmp	r0, #0
 8010f06:	f040 82b7 	bne.w	8011478 <lv_draw_rect+0x5e0>
 8010f0a:	f8da 0000 	ldr.w	r0, [sl]
 8010f0e:	f8da 1004 	ldr.w	r1, [sl, #4]
 8010f12:	ab1e      	add	r3, sp, #120	; 0x78
 8010f14:	c303      	stmia	r3!, {r0, r1}
    area_tmp.y1 += radius;
 8010f16:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
 8010f1a:	4423      	add	r3, r4
 8010f1c:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
    area_tmp.y2 -= radius;
 8010f20:	f8bd 307e 	ldrh.w	r3, [sp, #126]	; 0x7e
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 8010f24:	a91e      	add	r1, sp, #120	; 0x78
    area_tmp.y2 -= radius;
 8010f26:	1b1c      	subs	r4, r3, r4
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 8010f28:	4658      	mov	r0, fp
    area_tmp.y2 -= radius;
 8010f2a:	f8ad 407e 	strh.w	r4, [sp, #126]	; 0x7e
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 8010f2e:	f002 fdf3 	bl	8013b18 <lv_area_is_in>
 8010f32:	4605      	mov	r5, r0
 8010f34:	2800      	cmp	r0, #0
 8010f36:	f040 829f 	bne.w	8011478 <lv_draw_rect+0x5e0>
    if(style->body.shadow.type == LV_SHADOW_FULL) {
 8010f3a:	9b02      	ldr	r3, [sp, #8]
 8010f3c:	7d1b      	ldrb	r3, [r3, #20]
 8010f3e:	2b01      	cmp	r3, #1
 8010f40:	f040 8212 	bne.w	8011368 <lv_draw_rect+0x4d0>
    bool aa = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8010f44:	f7fe fa1c 	bl	800f380 <lv_refr_get_disp_refreshing>
 8010f48:	f002 fbd2 	bl	80136f0 <lv_disp_get_antialiasing>
    lv_coord_t swidth = style->body.shadow.width;
 8010f4c:	9b02      	ldr	r3, [sp, #8]
    return area_p->y2 - area_p->y1 + 1;
 8010f4e:	f8ba 2006 	ldrh.w	r2, [sl, #6]
 8010f52:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8010f56:	9304      	str	r3, [sp, #16]
 8010f58:	f8ba 3002 	ldrh.w	r3, [sl, #2]
    return area_p->x2 - area_p->x1 + 1;
 8010f5c:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    return area_p->y2 - area_p->y1 + 1;
 8010f60:	3201      	adds	r2, #1
 8010f62:	1ad2      	subs	r2, r2, r3
    return area_p->x2 - area_p->x1 + 1;
 8010f64:	f8ba 3000 	ldrh.w	r3, [sl]
 8010f68:	3101      	adds	r1, #1
 8010f6a:	1ac9      	subs	r1, r1, r3
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8010f6c:	9b02      	ldr	r3, [sp, #8]
 8010f6e:	b209      	sxth	r1, r1
    bool aa = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8010f70:	4604      	mov	r4, r0
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8010f72:	b212      	sxth	r2, r2
 8010f74:	88d8      	ldrh	r0, [r3, #6]
 8010f76:	f7ff ff51 	bl	8010e1c <lv_draw_cont_radius_corr>
    radius += aa;
 8010f7a:	b2a4      	uxth	r4, r4
 8010f7c:	4420      	add	r0, r4
 8010f7e:	b283      	uxth	r3, r0
 8010f80:	9305      	str	r3, [sp, #20]
    int16_t filter_width = 2 * swidth + 1;
 8010f82:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    radius += aa;
 8010f86:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
 8010f8a:	9a04      	ldr	r2, [sp, #16]
    radius += aa;
 8010f8c:	9309      	str	r3, [sp, #36]	; 0x24
    int16_t filter_width = 2 * swidth + 1;
 8010f8e:	ea4f 0846 	mov.w	r8, r6, lsl #1
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
 8010f92:	4413      	add	r3, r2
    int16_t filter_width = 2 * swidth + 1;
 8010f94:	f108 0801 	add.w	r8, r8, #1
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
 8010f98:	1d18      	adds	r0, r3, #4
    int16_t filter_width = 2 * swidth + 1;
 8010f9a:	fa0f f888 	sxth.w	r8, r8
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
 8010f9e:	f020 0003 	bic.w	r0, r0, #3
    uint32_t line_1d_blur_size = (filter_width + 3) & ~0x3;     /*Round to 4*/
 8010fa2:	f108 0703 	add.w	r7, r8, #3
    curve_x_size *= sizeof(lv_coord_t);
 8010fa6:	ea4f 0940 	mov.w	r9, r0, lsl #1
    uint32_t line_1d_blur_size = (filter_width + 3) & ~0x3;     /*Round to 4*/
 8010faa:	f027 0703 	bic.w	r7, r7, #3
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size + line_2d_blur_size);
 8010fae:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8010fb2:	4438      	add	r0, r7
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
 8010fb4:	930a      	str	r3, [sp, #40]	; 0x28
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size + line_2d_blur_size);
 8010fb6:	f7fe ff4b 	bl	800fe50 <lv_draw_get_buf>
    uint32_t * line_1d_blur = (uint32_t *)&draw_buf[curve_x_size];
 8010fba:	4603      	mov	r3, r0
 8010fbc:	444b      	add	r3, r9
 8010fbe:	930b      	str	r3, [sp, #44]	; 0x2c
    lv_opa_t * line_2d_blur = (lv_opa_t *)&draw_buf[curve_x_size + line_1d_blur_size];
 8010fc0:	4603      	mov	r3, r0
 8010fc2:	443b      	add	r3, r7
    memset(curve_x, 0, curve_x_size);
 8010fc4:	4629      	mov	r1, r5
 8010fc6:	464a      	mov	r2, r9
    lv_circ_init(&circ, &circ_tmp, radius);
 8010fc8:	f10d 0772 	add.w	r7, sp, #114	; 0x72
 8010fcc:	ad1d      	add	r5, sp, #116	; 0x74
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size + line_2d_blur_size);
 8010fce:	9003      	str	r0, [sp, #12]
    lv_opa_t * line_2d_blur = (lv_opa_t *)&draw_buf[curve_x_size + line_1d_blur_size];
 8010fd0:	930c      	str	r3, [sp, #48]	; 0x30
    memset(curve_x, 0, curve_x_size);
 8010fd2:	f008 faaa 	bl	801952a <memset>
    lv_circ_init(&circ, &circ_tmp, radius);
 8010fd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010fd8:	4639      	mov	r1, r7
 8010fda:	4628      	mov	r0, r5
 8010fdc:	f002 fdb9 	bl	8013b52 <lv_circ_init>
    while(lv_circ_cont(&circ)) {
 8010fe0:	4628      	mov	r0, r5
 8010fe2:	f002 fdbd 	bl	8013b60 <lv_circ_cont>
 8010fe6:	2800      	cmp	r0, #0
 8010fe8:	d15a      	bne.n	80110a0 <lv_draw_rect+0x208>
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 8010fea:	9b08      	ldr	r3, [sp, #32]
 8010fec:	2bff      	cmp	r3, #255	; 0xff
 8010fee:	9b02      	ldr	r3, [sp, #8]
 8010ff0:	bf18      	it	ne
 8010ff2:	9a08      	ldrne	r2, [sp, #32]
 8010ff4:	7a1b      	ldrb	r3, [r3, #8]
 8010ff6:	bf1c      	itt	ne
 8010ff8:	4353      	mulne	r3, r2
 8010ffa:	f3c3 2307 	ubfxne	r3, r3, #8, #8
 8010ffe:	005b      	lsls	r3, r3, #1
 8011000:	ea4f 2208 	mov.w	r2, r8, lsl #8
 8011004:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 8011008:	4359      	muls	r1, r3
                             (filter_width * filter_width);
 801100a:	fb08 f508 	mul.w	r5, r8, r8
 801100e:	4353      	muls	r3, r2
 8011010:	2200      	movs	r2, #0
    for(line = 0; line < filter_width; line++) {
 8011012:	b210      	sxth	r0, r2
 8011014:	4580      	cmp	r8, r0
 8011016:	dc55      	bgt.n	80110c4 <lv_draw_rect+0x22c>
    ofs_rb.x = coords->x2 - radius - aa;
 8011018:	9a05      	ldr	r2, [sp, #20]
 801101a:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 801101e:	1a9b      	subs	r3, r3, r2
 8011020:	1b1b      	subs	r3, r3, r4
 8011022:	b29b      	uxth	r3, r3
 8011024:	930e      	str	r3, [sp, #56]	; 0x38
 8011026:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
 801102a:	9314      	str	r3, [sp, #80]	; 0x50
    ofs_rb.y = coords->y2 - radius - aa;
 801102c:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 8011030:	1a9b      	subs	r3, r3, r2
 8011032:	1b1b      	subs	r3, r3, r4
 8011034:	b29b      	uxth	r3, r3
 8011036:	930f      	str	r3, [sp, #60]	; 0x3c
 8011038:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801103c:	9310      	str	r3, [sp, #64]	; 0x40
    ofs_rt.y = coords->y1 + radius + aa;
 801103e:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 8011042:	4423      	add	r3, r4
 8011044:	4413      	add	r3, r2
 8011046:	b29b      	uxth	r3, r3
 8011048:	9311      	str	r3, [sp, #68]	; 0x44
 801104a:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
 801104e:	9312      	str	r3, [sp, #72]	; 0x48
    ofs_lb.x = coords->x1 + radius + aa;
 8011050:	f8ba 3000 	ldrh.w	r3, [sl]
 8011054:	441c      	add	r4, r3
 8011056:	4414      	add	r4, r2
 8011058:	b2a3      	uxth	r3, r4
 801105a:	9313      	str	r3, [sp, #76]	; 0x4c
 801105c:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 8011060:	9315      	str	r3, [sp, #84]	; 0x54
            for(line_rel = -swidth; line_rel <= swidth; line_rel++) {
 8011062:	4276      	negs	r6, r6
    ofs_lb.x = coords->x1 + radius + aa;
 8011064:	2300      	movs	r3, #0
 8011066:	9307      	str	r3, [sp, #28]
            for(line_rel = -swidth; line_rel <= swidth; line_rel++) {
 8011068:	b233      	sxth	r3, r6
 801106a:	9318      	str	r3, [sp, #96]	; 0x60
 801106c:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8011070:	9306      	str	r3, [sp, #24]
    for(line = 0; line <= radius + swidth; line++) { /*Check all rows and make the 1D blur to 2D*/
 8011072:	9a06      	ldr	r2, [sp, #24]
 8011074:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011076:	4293      	cmp	r3, r2
 8011078:	f2c0 81fe 	blt.w	8011478 <lv_draw_rect+0x5e0>
                    col_rel = curve_x[line + line_rel] - curve_x[line] - col;
 801107c:	9b03      	ldr	r3, [sp, #12]
 801107e:	eb03 0542 	add.w	r5, r3, r2, lsl #1
                if(col_rel < -swidth) { /*Outside of the blurred area. */
 8011082:	9b04      	ldr	r3, [sp, #16]
                    col_rel = curve_x[line + line_rel] - curve_x[line] - col;
 8011084:	2000      	movs	r0, #0
                if(col_rel < -swidth) { /*Outside of the blurred area. */
 8011086:	425c      	negs	r4, r3
        for(col = 0; col <= radius + swidth; col++) { /*Check all pixels in a 1D blur line (from the origo to last
 8011088:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801108a:	fa1f f980 	uxth.w	r9, r0
 801108e:	454a      	cmp	r2, r9
 8011090:	db3b      	blt.n	801110a <lv_draw_rect+0x272>
            for(line_rel = -swidth; line_rel <= swidth; line_rel++) {
 8011092:	9a18      	ldr	r2, [sp, #96]	; 0x60
            uint32_t px_opa_sum = 0;
 8011094:	2100      	movs	r1, #0
            for(line_rel = -swidth; line_rel <= swidth; line_rel++) {
 8011096:	9b04      	ldr	r3, [sp, #16]
 8011098:	4293      	cmp	r3, r2
 801109a:	da1b      	bge.n	80110d4 <lv_draw_rect+0x23c>
                } else if(line + line_rel > radius) { /*Above the radius, here won't be more 1D blur*/
 801109c:	2200      	movs	r2, #0
 801109e:	e029      	b.n	80110f4 <lv_draw_rect+0x25c>
        curve_x[LV_CIRC_OCT1_Y(circ)] = LV_CIRC_OCT1_X(circ);
 80110a0:	f9bd 3076 	ldrsh.w	r3, [sp, #118]	; 0x76
 80110a4:	9903      	ldr	r1, [sp, #12]
 80110a6:	f9bd 2074 	ldrsh.w	r2, [sp, #116]	; 0x74
 80110aa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        curve_x[LV_CIRC_OCT2_Y(circ)] = LV_CIRC_OCT2_X(circ);
 80110ae:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	; 0x74
 80110b2:	f9bd 2076 	ldrsh.w	r2, [sp, #118]	; 0x76
 80110b6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        lv_circ_next(&circ, &circ_tmp);
 80110ba:	4628      	mov	r0, r5
 80110bc:	4639      	mov	r1, r7
 80110be:	f002 fd58 	bl	8013b72 <lv_circ_next>
 80110c2:	e78d      	b.n	8010fe0 <lv_draw_rect+0x148>
        line_1d_blur[line] = (uint32_t)((uint32_t)(filter_width - line) * (opa * 2) << SHADOW_OPA_EXTRA_PRECISION) /
 80110c4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80110c6:	fbb3 f0f5 	udiv	r0, r3, r5
 80110ca:	440b      	add	r3, r1
 80110cc:	f847 0022 	str.w	r0, [r7, r2, lsl #2]
 80110d0:	3201      	adds	r2, #1
 80110d2:	e79e      	b.n	8011012 <lv_draw_rect+0x17a>
                if(line + line_rel < 0) { /*Below the radius, here is the blur of the edge */
 80110d4:	9b06      	ldr	r3, [sp, #24]
 80110d6:	18d3      	adds	r3, r2, r3
 80110d8:	f140 80a9 	bpl.w	801122e <lv_draw_rect+0x396>
                    col_rel = radius - curve_x[line] - col;
 80110dc:	882b      	ldrh	r3, [r5, #0]
 80110de:	9e05      	ldr	r6, [sp, #20]
 80110e0:	1af3      	subs	r3, r6, r3
                    col_rel = curve_x[line + line_rel] - curve_x[line] - col;
 80110e2:	eba3 0309 	sub.w	r3, r3, r9
 80110e6:	b21b      	sxth	r3, r3
                if(col_rel < -swidth) { /*Outside of the blurred area. */
 80110e8:	42a3      	cmp	r3, r4
 80110ea:	f280 80aa 	bge.w	8011242 <lv_draw_rect+0x3aa>
                    if(line_rel == -swidth)
 80110ee:	1b16      	subs	r6, r2, r4
 80110f0:	4272      	negs	r2, r6
 80110f2:	4172      	adcs	r2, r6
            line_2d_blur[col] = px_opa_sum >> SHADOW_OPA_EXTRA_PRECISION;
 80110f4:	b283      	uxth	r3, r0
 80110f6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80110f8:	0a09      	lsrs	r1, r1, #8
 80110fa:	54f1      	strb	r1, [r6, r3]
 80110fc:	3001      	adds	r0, #1
            if(line_ready) {
 80110fe:	2a00      	cmp	r2, #0
 8011100:	d0c2      	beq.n	8011088 <lv_draw_rect+0x1f0>
                col++; /*To make this line to the last one ( drawing will go to '< col')*/
 8011102:	f109 0301 	add.w	r3, r9, #1
 8011106:	fa1f f983 	uxth.w	r9, r3
        point_rt.x = curve_x[line] + ofs_rt.x + 1;
 801110a:	9b03      	ldr	r3, [sp, #12]
 801110c:	9a06      	ldr	r2, [sp, #24]
 801110e:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 8011112:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8011116:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011118:	1c5a      	adds	r2, r3, #1
 801111a:	440a      	add	r2, r1
 801111c:	b293      	uxth	r3, r2
 801111e:	9316      	str	r3, [sp, #88]	; 0x58
 8011120:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011122:	1b1d      	subs	r5, r3, r4
 8011124:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011126:	441c      	add	r4, r3
        point_lt.x = ofs_lt.x - curve_x[line] - 1;
 8011128:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801112a:	3b01      	subs	r3, #1
 801112c:	1a5b      	subs	r3, r3, r1
 801112e:	b29b      	uxth	r3, r3
 8011130:	9317      	str	r3, [sp, #92]	; 0x5c
 8011132:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011134:	1c5e      	adds	r6, r3, #1
 8011136:	2300      	movs	r3, #0
 8011138:	b22d      	sxth	r5, r5
 801113a:	b224      	sxth	r4, r4
 801113c:	930d      	str	r3, [sp, #52]	; 0x34
 801113e:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8011142:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011144:	eba2 0803 	sub.w	r8, r2, r3
 8011148:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801114a:	18d7      	adds	r7, r2, r3
        for(d = 1; d < col; d++) {
 801114c:	3301      	adds	r3, #1
 801114e:	b29b      	uxth	r3, r3
 8011150:	4599      	cmp	r9, r3
 8011152:	fa0f f888 	sxth.w	r8, r8
 8011156:	b23f      	sxth	r7, r7
 8011158:	f200 8082 	bhi.w	8011260 <lv_draw_rect+0x3c8>
        if(line == 0) lv_draw_shadow_full_straight(coords, mask, style, line_2d_blur);
 801115c:	9b06      	ldr	r3, [sp, #24]
 801115e:	2b00      	cmp	r3, #0
 8011160:	d161      	bne.n	8011226 <lv_draw_rect+0x38e>
    bool aa           = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8011162:	f7fe f90d 	bl	800f380 <lv_refr_get_disp_refreshing>
 8011166:	f002 fac3 	bl	80136f0 <lv_disp_get_antialiasing>
    lv_coord_t swidth = style->body.shadow.width;
 801116a:	9b02      	ldr	r3, [sp, #8]
    return area_p->y2 - area_p->y1 + 1;
 801116c:	f8ba 2006 	ldrh.w	r2, [sl, #6]
 8011170:	f9b3 8012 	ldrsh.w	r8, [r3, #18]
 8011174:	f8ba 3002 	ldrh.w	r3, [sl, #2]
    return area_p->x2 - area_p->x1 + 1;
 8011178:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    return area_p->y2 - area_p->y1 + 1;
 801117c:	3201      	adds	r2, #1
 801117e:	1ad2      	subs	r2, r2, r3
    return area_p->x2 - area_p->x1 + 1;
 8011180:	f8ba 3000 	ldrh.w	r3, [sl]
 8011184:	3101      	adds	r1, #1
 8011186:	1ac9      	subs	r1, r1, r3
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8011188:	9b02      	ldr	r3, [sp, #8]
    bool aa           = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 801118a:	4604      	mov	r4, r0
    radius = lv_draw_cont_radius_corr(radius, width, height);
 801118c:	b212      	sxth	r2, r2
 801118e:	b209      	sxth	r1, r1
 8011190:	88d8      	ldrh	r0, [r3, #6]
 8011192:	f7ff fe43 	bl	8010e1c <lv_draw_cont_radius_corr>
    right_area.x1 = coords->x2 + 1 - aa;
 8011196:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    right_area.y1 = coords->y1 + radius + aa;
 801119a:	f8ba 5002 	ldrh.w	r5, [sl, #2]
    radius += aa;
 801119e:	b2a3      	uxth	r3, r4
    right_area.x1 = coords->x2 + 1 - aa;
 80111a0:	1c4a      	adds	r2, r1, #1
 80111a2:	1ad2      	subs	r2, r2, r3
 80111a4:	b212      	sxth	r2, r2
    radius += aa;
 80111a6:	4418      	add	r0, r3
    left_area.x1 = coords->x1 - 1 + aa;
 80111a8:	f8ba 4000 	ldrh.w	r4, [sl]
    right_area.x1 = coords->x2 + 1 - aa;
 80111ac:	f8ad 2080 	strh.w	r2, [sp, #128]	; 0x80
    right_area.x2 = right_area.x1;
 80111b0:	f8ad 2084 	strh.w	r2, [sp, #132]	; 0x84
    right_area.y2 = coords->y2 - radius - aa;
 80111b4:	f8ba 2006 	ldrh.w	r2, [sl, #6]
    radius += aa;
 80111b8:	b280      	uxth	r0, r0
    right_area.y1 = coords->y1 + radius + aa;
 80111ba:	eb03 0e05 	add.w	lr, r3, r5
    right_area.y2 = coords->y2 - radius - aa;
 80111be:	1a16      	subs	r6, r2, r0
    left_area.x1 = coords->x1 - 1 + aa;
 80111c0:	1e67      	subs	r7, r4, #1
    top_area.y1 = coords->y1 - 1 + aa;
 80111c2:	3d01      	subs	r5, #1
    top_area.x1 = coords->x1 + radius + aa;
 80111c4:	441c      	add	r4, r3
    top_area.x2 = coords->x2 - radius - aa;
 80111c6:	1a09      	subs	r1, r1, r0
    bottom_area.y1 = coords->y2 + 1 - aa;
 80111c8:	3201      	adds	r2, #1
    right_area.y2 = coords->y2 - radius - aa;
 80111ca:	1af6      	subs	r6, r6, r3
    left_area.x1 = coords->x1 - 1 + aa;
 80111cc:	441f      	add	r7, r3
    top_area.y1 = coords->y1 - 1 + aa;
 80111ce:	441d      	add	r5, r3
    top_area.x2 = coords->x2 - radius - aa;
 80111d0:	1ac9      	subs	r1, r1, r3
    right_area.y1 = coords->y1 + radius + aa;
 80111d2:	4486      	add	lr, r0
    top_area.x1 = coords->x1 + radius + aa;
 80111d4:	4404      	add	r4, r0
    bottom_area.y1 = coords->y2 + 1 - aa;
 80111d6:	1ad3      	subs	r3, r2, r3
    top_area.x1 = coords->x1 + radius + aa;
 80111d8:	b224      	sxth	r4, r4
    right_area.y1 = coords->y1 + radius + aa;
 80111da:	fa0f fe8e 	sxth.w	lr, lr
    right_area.y2 = coords->y2 - radius - aa;
 80111de:	b236      	sxth	r6, r6
    left_area.x1 = coords->x1 - 1 + aa;
 80111e0:	b23f      	sxth	r7, r7
    top_area.y1 = coords->y1 - 1 + aa;
 80111e2:	b22d      	sxth	r5, r5
    top_area.x2 = coords->x2 - radius - aa;
 80111e4:	b209      	sxth	r1, r1
    bottom_area.y1 = coords->y2 + 1 - aa;
 80111e6:	b21b      	sxth	r3, r3
    top_area.x1 = coords->x1 + radius + aa;
 80111e8:	f8ad 4090 	strh.w	r4, [sp, #144]	; 0x90
    bottom_area.x1 = coords->x1 + radius + aa;
 80111ec:	f8ad 4098 	strh.w	r4, [sp, #152]	; 0x98
    right_area.y1 = coords->y1 + radius + aa;
 80111f0:	f8ad e082 	strh.w	lr, [sp, #130]	; 0x82
    right_area.y2 = coords->y2 - radius - aa;
 80111f4:	f8ad 6086 	strh.w	r6, [sp, #134]	; 0x86
    left_area.x1 = coords->x1 - 1 + aa;
 80111f8:	f8ad 7088 	strh.w	r7, [sp, #136]	; 0x88
    left_area.y1 = coords->y1 + radius + aa;
 80111fc:	f8ad e08a 	strh.w	lr, [sp, #138]	; 0x8a
    left_area.x2 = left_area.x1;
 8011200:	f8ad 708c 	strh.w	r7, [sp, #140]	; 0x8c
    left_area.y2 = coords->y2 - radius - aa;
 8011204:	f8ad 608e 	strh.w	r6, [sp, #142]	; 0x8e
    top_area.y1 = coords->y1 - 1 + aa;
 8011208:	f8ad 5092 	strh.w	r5, [sp, #146]	; 0x92
    top_area.x2 = coords->x2 - radius - aa;
 801120c:	f8ad 1094 	strh.w	r1, [sp, #148]	; 0x94
    top_area.y2 = top_area.y1;
 8011210:	f8ad 5096 	strh.w	r5, [sp, #150]	; 0x96
    bottom_area.y1 = coords->y2 + 1 - aa;
 8011214:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
    bottom_area.x2 = coords->x2 - radius - aa;
 8011218:	f8ad 109c 	strh.w	r1, [sp, #156]	; 0x9c
    bottom_area.y2 = bottom_area.y1;
 801121c:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
    for(d = 1 /*+ LV_ANTIALIAS*/; d <= swidth /* - LV_ANTIALIAS*/; d++) {
 8011220:	2401      	movs	r4, #1
 8011222:	45a0      	cmp	r8, r4
 8011224:	da57      	bge.n	80112d6 <lv_draw_rect+0x43e>
 8011226:	9b07      	ldr	r3, [sp, #28]
 8011228:	3301      	adds	r3, #1
 801122a:	9307      	str	r3, [sp, #28]
 801122c:	e71e      	b.n	801106c <lv_draw_rect+0x1d4>
                } else if(line + line_rel > radius) { /*Above the radius, here won't be more 1D blur*/
 801122e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8011230:	429e      	cmp	r6, r3
 8011232:	f6ff af33 	blt.w	801109c <lv_draw_rect+0x204>
                    col_rel = curve_x[line + line_rel] - curve_x[line] - col;
 8011236:	9e03      	ldr	r6, [sp, #12]
 8011238:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801123c:	882e      	ldrh	r6, [r5, #0]
 801123e:	1b9b      	subs	r3, r3, r6
 8011240:	e74f      	b.n	80110e2 <lv_draw_rect+0x24a>
                } else if(col_rel > swidth)
 8011242:	9e04      	ldr	r6, [sp, #16]
 8011244:	429e      	cmp	r6, r3
                    px_opa_sum += line_1d_blur[swidth - col_rel]; /*On the 1D blur (+ swidth to align to the center)*/
 8011246:	bfa9      	itett	ge
 8011248:	9e04      	ldrge	r6, [sp, #16]
                    px_opa_sum += line_1d_blur[0]; /*Inside the not blurred area*/
 801124a:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
                    px_opa_sum += line_1d_blur[swidth - col_rel]; /*On the 1D blur (+ swidth to align to the center)*/
 801124c:	1af3      	subge	r3, r6, r3
 801124e:	9e0b      	ldrge	r6, [sp, #44]	; 0x2c
                    px_opa_sum += line_1d_blur[0]; /*Inside the not blurred area*/
 8011250:	bfb4      	ite	lt
 8011252:	681b      	ldrlt	r3, [r3, #0]
                    px_opa_sum += line_1d_blur[swidth - col_rel]; /*On the 1D blur (+ swidth to align to the center)*/
 8011254:	f856 3023 	ldrge.w	r3, [r6, r3, lsl #2]
 8011258:	3201      	adds	r2, #1
 801125a:	4419      	add	r1, r3
 801125c:	b212      	sxth	r2, r2
 801125e:	e71a      	b.n	8011096 <lv_draw_rect+0x1fe>
            if(point_lt.x < ofs_lt.x && point_lt.y < ofs_lt.y) {
 8011260:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011262:	4543      	cmp	r3, r8
 8011264:	dd17      	ble.n	8011296 <lv_draw_rect+0x3fe>
 8011266:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011268:	42ab      	cmp	r3, r5
 801126a:	dd08      	ble.n	801127e <lv_draw_rect+0x3e6>
                lv_draw_px(point_lt.x, point_lt.y, mask, style->body.shadow.color, line_2d_blur[d]);
 801126c:	7833      	ldrb	r3, [r6, #0]
 801126e:	9300      	str	r3, [sp, #0]
 8011270:	9b02      	ldr	r3, [sp, #8]
 8011272:	465a      	mov	r2, fp
 8011274:	8a1b      	ldrh	r3, [r3, #16]
 8011276:	4629      	mov	r1, r5
 8011278:	4640      	mov	r0, r8
 801127a:	f7fe fe59 	bl	800ff30 <lv_draw_px>
            if(point_lb.x < ofs_lb.x && point_lb.y > ofs_lb.y) {
 801127e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011280:	42a3      	cmp	r3, r4
 8011282:	da08      	bge.n	8011296 <lv_draw_rect+0x3fe>
                lv_draw_px(point_lb.x, point_lb.y, mask, style->body.shadow.color, line_2d_blur[d]);
 8011284:	7833      	ldrb	r3, [r6, #0]
 8011286:	9300      	str	r3, [sp, #0]
 8011288:	9b02      	ldr	r3, [sp, #8]
 801128a:	465a      	mov	r2, fp
 801128c:	8a1b      	ldrh	r3, [r3, #16]
 801128e:	4621      	mov	r1, r4
 8011290:	4640      	mov	r0, r8
 8011292:	f7fe fe4d 	bl	800ff30 <lv_draw_px>
            if(point_rt.x > ofs_rt.x && point_rt.y < ofs_rt.y) {
 8011296:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011298:	42bb      	cmp	r3, r7
 801129a:	da17      	bge.n	80112cc <lv_draw_rect+0x434>
 801129c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801129e:	42ab      	cmp	r3, r5
 80112a0:	dd08      	ble.n	80112b4 <lv_draw_rect+0x41c>
                lv_draw_px(point_rt.x, point_rt.y, mask, style->body.shadow.color, line_2d_blur[d]);
 80112a2:	7833      	ldrb	r3, [r6, #0]
 80112a4:	9300      	str	r3, [sp, #0]
 80112a6:	9b02      	ldr	r3, [sp, #8]
 80112a8:	465a      	mov	r2, fp
 80112aa:	8a1b      	ldrh	r3, [r3, #16]
 80112ac:	4629      	mov	r1, r5
 80112ae:	4638      	mov	r0, r7
 80112b0:	f7fe fe3e 	bl	800ff30 <lv_draw_px>
            if(point_rb.x > ofs_rb.x && point_rb.y > ofs_rb.y) {
 80112b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80112b6:	42a3      	cmp	r3, r4
 80112b8:	da08      	bge.n	80112cc <lv_draw_rect+0x434>
                lv_draw_px(point_rb.x, point_rb.y, mask, style->body.shadow.color, line_2d_blur[d]);
 80112ba:	7833      	ldrb	r3, [r6, #0]
 80112bc:	9300      	str	r3, [sp, #0]
 80112be:	9b02      	ldr	r3, [sp, #8]
 80112c0:	465a      	mov	r2, fp
 80112c2:	8a1b      	ldrh	r3, [r3, #16]
 80112c4:	4621      	mov	r1, r4
 80112c6:	4638      	mov	r0, r7
 80112c8:	f7fe fe32 	bl	800ff30 <lv_draw_px>
 80112cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80112ce:	3301      	adds	r3, #1
 80112d0:	930d      	str	r3, [sp, #52]	; 0x34
 80112d2:	3601      	adds	r6, #1
 80112d4:	e733      	b.n	801113e <lv_draw_rect+0x2a6>
        opa_act = map[d];
 80112d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        lv_draw_fill(&right_area, mask, style->body.shadow.color, opa_act);
 80112d8:	9a02      	ldr	r2, [sp, #8]
        opa_act = map[d];
 80112da:	5d1d      	ldrb	r5, [r3, r4]
        lv_draw_fill(&right_area, mask, style->body.shadow.color, opa_act);
 80112dc:	8a12      	ldrh	r2, [r2, #16]
 80112de:	462b      	mov	r3, r5
 80112e0:	4659      	mov	r1, fp
 80112e2:	a820      	add	r0, sp, #128	; 0x80
 80112e4:	f7fe fe73 	bl	800ffce <lv_draw_fill>
        right_area.x1++;
 80112e8:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
        lv_draw_fill(&left_area, mask, style->body.shadow.color, opa_act);
 80112ec:	9a02      	ldr	r2, [sp, #8]
        right_area.x1++;
 80112ee:	3301      	adds	r3, #1
 80112f0:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
        right_area.x2++;
 80112f4:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
        lv_draw_fill(&left_area, mask, style->body.shadow.color, opa_act);
 80112f8:	8a12      	ldrh	r2, [r2, #16]
        right_area.x2++;
 80112fa:	3301      	adds	r3, #1
 80112fc:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
        lv_draw_fill(&left_area, mask, style->body.shadow.color, opa_act);
 8011300:	4659      	mov	r1, fp
 8011302:	462b      	mov	r3, r5
 8011304:	a822      	add	r0, sp, #136	; 0x88
 8011306:	f7fe fe62 	bl	800ffce <lv_draw_fill>
        left_area.x1--;
 801130a:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
        lv_draw_fill(&top_area, mask, style->body.shadow.color, opa_act);
 801130e:	9a02      	ldr	r2, [sp, #8]
        left_area.x1--;
 8011310:	3b01      	subs	r3, #1
 8011312:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
        left_area.x2--;
 8011316:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
        lv_draw_fill(&top_area, mask, style->body.shadow.color, opa_act);
 801131a:	8a12      	ldrh	r2, [r2, #16]
        left_area.x2--;
 801131c:	3b01      	subs	r3, #1
 801131e:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
        lv_draw_fill(&top_area, mask, style->body.shadow.color, opa_act);
 8011322:	4659      	mov	r1, fp
 8011324:	462b      	mov	r3, r5
 8011326:	a824      	add	r0, sp, #144	; 0x90
 8011328:	f7fe fe51 	bl	800ffce <lv_draw_fill>
        top_area.y1--;
 801132c:	f8bd 3092 	ldrh.w	r3, [sp, #146]	; 0x92
        lv_draw_fill(&bottom_area, mask, style->body.shadow.color, opa_act);
 8011330:	9a02      	ldr	r2, [sp, #8]
        top_area.y1--;
 8011332:	3b01      	subs	r3, #1
 8011334:	f8ad 3092 	strh.w	r3, [sp, #146]	; 0x92
        top_area.y2--;
 8011338:	f8bd 3096 	ldrh.w	r3, [sp, #150]	; 0x96
        lv_draw_fill(&bottom_area, mask, style->body.shadow.color, opa_act);
 801133c:	8a12      	ldrh	r2, [r2, #16]
        top_area.y2--;
 801133e:	3b01      	subs	r3, #1
 8011340:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
        lv_draw_fill(&bottom_area, mask, style->body.shadow.color, opa_act);
 8011344:	4659      	mov	r1, fp
 8011346:	462b      	mov	r3, r5
 8011348:	a826      	add	r0, sp, #152	; 0x98
 801134a:	f7fe fe40 	bl	800ffce <lv_draw_fill>
        bottom_area.y1++;
 801134e:	f8bd 309a 	ldrh.w	r3, [sp, #154]	; 0x9a
 8011352:	3301      	adds	r3, #1
 8011354:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
        bottom_area.y2++;
 8011358:	f8bd 309e 	ldrh.w	r3, [sp, #158]	; 0x9e
 801135c:	3401      	adds	r4, #1
 801135e:	3301      	adds	r3, #1
 8011360:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
 8011364:	b224      	sxth	r4, r4
 8011366:	e75c      	b.n	8011222 <lv_draw_rect+0x38a>
    } else if(style->body.shadow.type == LV_SHADOW_BOTTOM) {
 8011368:	2b00      	cmp	r3, #0
 801136a:	f040 8085 	bne.w	8011478 <lv_draw_rect+0x5e0>
    bool aa           = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 801136e:	f7fe f807 	bl	800f380 <lv_refr_get_disp_refreshing>
 8011372:	f002 f9bd 	bl	80136f0 <lv_disp_get_antialiasing>
    lv_coord_t swidth = style->body.shadow.width;
 8011376:	9b02      	ldr	r3, [sp, #8]
    return area_p->y2 - area_p->y1 + 1;
 8011378:	f8ba 2006 	ldrh.w	r2, [sl, #6]
 801137c:	f9b3 4012 	ldrsh.w	r4, [r3, #18]
 8011380:	f8ba 3002 	ldrh.w	r3, [sl, #2]
    return area_p->x2 - area_p->x1 + 1;
 8011384:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    return area_p->y2 - area_p->y1 + 1;
 8011388:	3201      	adds	r2, #1
 801138a:	1ad2      	subs	r2, r2, r3
    return area_p->x2 - area_p->x1 + 1;
 801138c:	f8ba 3000 	ldrh.w	r3, [sl]
 8011390:	3101      	adds	r1, #1
 8011392:	1ac9      	subs	r1, r1, r3
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8011394:	9b02      	ldr	r3, [sp, #8]
 8011396:	b212      	sxth	r2, r2
 8011398:	b209      	sxth	r1, r1
    bool aa           = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 801139a:	4680      	mov	r8, r0
    radius = lv_draw_cont_radius_corr(radius, width, height);
 801139c:	88d8      	ldrh	r0, [r3, #6]
 801139e:	f7ff fd3d 	bl	8010e1c <lv_draw_cont_radius_corr>
    radius += aa * SHADOW_BOTTOM_AA_EXTRA_RADIUS;
 80113a2:	fa1f f888 	uxth.w	r8, r8
 80113a6:	eb08 0548 	add.w	r5, r8, r8, lsl #1
 80113aa:	4405      	add	r5, r0
 80113ac:	b2ad      	uxth	r5, r5
 80113ae:	b22b      	sxth	r3, r5
    swidth += aa;
 80113b0:	eb08 0004 	add.w	r0, r8, r4
 80113b4:	b280      	uxth	r0, r0
    uint32_t curve_x_size = ((radius + 1) + 3) & ~0x3; /*Round to 4*/
 80113b6:	1d1c      	adds	r4, r3, #4
    swidth += aa;
 80113b8:	b206      	sxth	r6, r0
    uint32_t curve_x_size = ((radius + 1) + 3) & ~0x3; /*Round to 4*/
 80113ba:	f024 0403 	bic.w	r4, r4, #3
    lv_opa_t line_1d_blur_size = (swidth + 3) & ~0x3;     /*Round to 4*/
 80113be:	3003      	adds	r0, #3
    curve_x_size *= sizeof(lv_coord_t);
 80113c0:	0064      	lsls	r4, r4, #1
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size);
 80113c2:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80113c6:	4420      	add	r0, r4
    radius += aa * SHADOW_BOTTOM_AA_EXTRA_RADIUS;
 80113c8:	9303      	str	r3, [sp, #12]
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size);
 80113ca:	f7fe fd41 	bl	800fe50 <lv_draw_get_buf>
    lv_circ_init(&circ, &circ_tmp, radius);
 80113ce:	f10d 0990 	add.w	r9, sp, #144	; 0x90
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size);
 80113d2:	4607      	mov	r7, r0
    lv_opa_t * line_1d_blur = (lv_opa_t *)&draw_buf[curve_x_size];
 80113d4:	4404      	add	r4, r0
    lv_circ_init(&circ, &circ_tmp, radius);
 80113d6:	9a03      	ldr	r2, [sp, #12]
 80113d8:	a922      	add	r1, sp, #136	; 0x88
 80113da:	4648      	mov	r0, r9
 80113dc:	f002 fbb9 	bl	8013b52 <lv_circ_init>
    while(lv_circ_cont(&circ)) {
 80113e0:	4648      	mov	r0, r9
 80113e2:	f002 fbbd 	bl	8013b60 <lv_circ_cont>
 80113e6:	2800      	cmp	r0, #0
 80113e8:	f040 8404 	bne.w	8011bf4 <lv_draw_rect+0xd5c>
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 80113ec:	9b08      	ldr	r3, [sp, #32]
 80113ee:	2bff      	cmp	r3, #255	; 0xff
 80113f0:	9b02      	ldr	r3, [sp, #8]
 80113f2:	bf18      	it	ne
 80113f4:	9a08      	ldrne	r2, [sp, #32]
 80113f6:	7a1b      	ldrb	r3, [r3, #8]
 80113f8:	bf1c      	itt	ne
 80113fa:	4353      	mulne	r3, r2
 80113fc:	f3c3 2307 	ubfxne	r3, r3, #8, #8
 8011400:	fb13 f006 	smulbb	r0, r3, r6
    ofs_lb.x = coords->x1 + radius + aa;
 8011404:	4621      	mov	r1, r4
    for(col = 0; col < swidth; col++) {
 8011406:	1b0a      	subs	r2, r1, r4
 8011408:	b212      	sxth	r2, r2
 801140a:	4296      	cmp	r6, r2
 801140c:	f300 8404 	bgt.w	8011c18 <lv_draw_rect+0xd80>
    ofs_l.x = coords->x1 + radius;
 8011410:	f8ba 3000 	ldrh.w	r3, [sl]
    ofs_r.x = coords->x2 - radius;
 8011414:	f8ba 0004 	ldrh.w	r0, [sl, #4]
    ofs_l.x = coords->x1 + radius;
 8011418:	442b      	add	r3, r5
 801141a:	b29b      	uxth	r3, r3
 801141c:	9304      	str	r3, [sp, #16]
 801141e:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8011422:	930b      	str	r3, [sp, #44]	; 0x2c
 8011424:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 8011428:	3301      	adds	r3, #1
 801142a:	eba3 0808 	sub.w	r8, r3, r8
 801142e:	fa1f f388 	uxth.w	r3, r8
 8011432:	9305      	str	r3, [sp, #20]
    ofs_l.y = coords->y2 - radius + 1 - aa;
 8011434:	1b5b      	subs	r3, r3, r5
 8011436:	b29b      	uxth	r3, r3
    ofs_r.x = coords->x2 - radius;
 8011438:	1b45      	subs	r5, r0, r5
    ofs_l.y = coords->y2 - radius + 1 - aa;
 801143a:	930c      	str	r3, [sp, #48]	; 0x30
    ofs_r.x = coords->x2 - radius;
 801143c:	b2ab      	uxth	r3, r5
 801143e:	9306      	str	r3, [sp, #24]
 8011440:	f04f 0800 	mov.w	r8, #0
    for(col = 0; col <= radius; col++) {
 8011444:	9a03      	ldr	r2, [sp, #12]
 8011446:	fa0f f388 	sxth.w	r3, r8
 801144a:	429a      	cmp	r2, r3
 801144c:	f280 83ec 	bge.w	8011c28 <lv_draw_rect+0xd90>
    area_mid.x1 = ofs_l.x + 1;
 8011450:	9b04      	ldr	r3, [sp, #16]
    area_mid.y1 = ofs_l.y + radius;
 8011452:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8011456:	f8ad 809a 	strh.w	r8, [sp, #154]	; 0x9a
    area_mid.x1 = ofs_l.x + 1;
 801145a:	3301      	adds	r3, #1
 801145c:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
    area_mid.x2 = ofs_r.x - 1;
 8011460:	9b06      	ldr	r3, [sp, #24]
    area_mid.y2 = area_mid.y1;
 8011462:	f8ad 809e 	strh.w	r8, [sp, #158]	; 0x9e
    area_mid.x2 = ofs_r.x - 1;
 8011466:	1e5d      	subs	r5, r3, #1
 8011468:	f8ad 509c 	strh.w	r5, [sp, #156]	; 0x9c
    area_mid.y2 = area_mid.y1;
 801146c:	2300      	movs	r3, #0
 801146e:	1c5d      	adds	r5, r3, #1
    for(d = 0; d < swidth; d++) {
 8011470:	b29b      	uxth	r3, r3
 8011472:	42b3      	cmp	r3, r6
 8011474:	f2c0 8420 	blt.w	8011cb8 <lv_draw_rect+0xe20>
    if(lv_area_is_on(coords, mask) == false) return;
 8011478:	4659      	mov	r1, fp
 801147a:	4650      	mov	r0, sl
 801147c:	f002 fb2f 	bl	8013ade <lv_area_is_on>
 8011480:	2800      	cmp	r0, #0
 8011482:	f000 83b4 	beq.w	8011bee <lv_draw_rect+0xd56>
    if(style->body.opa > LV_OPA_MIN) {
 8011486:	9b02      	ldr	r3, [sp, #8]
 8011488:	7a1b      	ldrb	r3, [r3, #8]
 801148a:	2b10      	cmp	r3, #16
 801148c:	f240 81e9 	bls.w	8011862 <lv_draw_rect+0x9ca>
    uint16_t radius = style->body.radius;
 8011490:	9b02      	ldr	r3, [sp, #8]
 8011492:	88dd      	ldrh	r5, [r3, #6]
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8011494:	f7fd ff74 	bl	800f380 <lv_refr_get_disp_refreshing>
 8011498:	f002 f92a 	bl	80136f0 <lv_disp_get_antialiasing>
    lv_color_t mcolor = style->body.main_color;
 801149c:	9b02      	ldr	r3, [sp, #8]
    return area_p->y2 - area_p->y1 + 1;
 801149e:	f8ba 6006 	ldrh.w	r6, [sl, #6]
 80114a2:	f8b3 8002 	ldrh.w	r8, [r3, #2]
    lv_color_t gcolor = style->body.grad_color;
 80114a6:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 80114aa:	f8ba 3002 	ldrh.w	r3, [sl, #2]
    return area_p->x2 - area_p->x1 + 1;
 80114ae:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    return area_p->y2 - area_p->y1 + 1;
 80114b2:	3601      	adds	r6, #1
 80114b4:	1af6      	subs	r6, r6, r3
    return area_p->x2 - area_p->x1 + 1;
 80114b6:	f8ba 3000 	ldrh.w	r3, [sl]
 80114ba:	3101      	adds	r1, #1
 80114bc:	1ac9      	subs	r1, r1, r3
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 80114be:	9b08      	ldr	r3, [sp, #32]
 80114c0:	2bff      	cmp	r3, #255	; 0xff
 80114c2:	9b02      	ldr	r3, [sp, #8]
 80114c4:	7a1f      	ldrb	r7, [r3, #8]
 80114c6:	bf18      	it	ne
 80114c8:	9b08      	ldrne	r3, [sp, #32]
    return area_p->y2 - area_p->y1 + 1;
 80114ca:	b236      	sxth	r6, r6
 80114cc:	bf18      	it	ne
 80114ce:	435f      	mulne	r7, r3
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 80114d0:	4604      	mov	r4, r0
    return area_p->x2 - area_p->x1 + 1;
 80114d2:	b209      	sxth	r1, r1
    radius = lv_draw_cont_radius_corr(radius, width, height);
 80114d4:	4632      	mov	r2, r6
 80114d6:	4628      	mov	r0, r5
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 80114d8:	bf18      	it	ne
 80114da:	f3c7 2707 	ubfxne	r7, r7, #8, #8
    radius = lv_draw_cont_radius_corr(radius, width, height);
 80114de:	f7ff fc9d 	bl	8010e1c <lv_draw_cont_radius_corr>
    if(radius > height / 2) return;
 80114e2:	2302      	movs	r3, #2
 80114e4:	fb96 f3f3 	sdiv	r3, r6, r3
 80114e8:	4298      	cmp	r0, r3
 80114ea:	dc29      	bgt.n	8011540 <lv_draw_rect+0x6a8>
    work_area.x1 = coords->x1;
 80114ec:	f8ba 3000 	ldrh.w	r3, [sl]
 80114f0:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
    work_area.x2 = coords->x2;
 80114f4:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 80114f8:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
 80114fc:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 8011500:	f8ba 5006 	ldrh.w	r5, [sl, #6]
        work_area.y1 = coords->y1 + radius;
 8011504:	4403      	add	r3, r0
    if(mcolor.full == gcolor.full) {
 8011506:	45c8      	cmp	r8, r9
        work_area.y1 = coords->y1 + radius;
 8011508:	b29b      	uxth	r3, r3
    if(mcolor.full == gcolor.full) {
 801150a:	f040 83ee 	bne.w	8011cea <lv_draw_rect+0xe52>
        if(style->body.radius != 0) {
 801150e:	9a02      	ldr	r2, [sp, #8]
        work_area.y1 = coords->y1 + radius;
 8011510:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
        work_area.y2 = coords->y2 - radius;
 8011514:	1a2d      	subs	r5, r5, r0
        if(style->body.radius != 0) {
 8011516:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
        work_area.y2 = coords->y2 - radius;
 801151a:	b2ad      	uxth	r5, r5
 801151c:	f8ad 509e 	strh.w	r5, [sp, #158]	; 0x9e
        if(style->body.radius != 0) {
 8011520:	b142      	cbz	r2, 8011534 <lv_draw_rect+0x69c>
            if(aa) {
 8011522:	2c00      	cmp	r4, #0
 8011524:	f000 83dc 	beq.w	8011ce0 <lv_draw_rect+0xe48>
                work_area.y1 += 2;
 8011528:	3302      	adds	r3, #2
 801152a:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
                work_area.y2 -= 2;
 801152e:	3d02      	subs	r5, #2
                work_area.y2 -= 1;
 8011530:	f8ad 509e 	strh.w	r5, [sp, #158]	; 0x9e
        lv_draw_fill(&work_area, mask, mcolor, opa);
 8011534:	463b      	mov	r3, r7
 8011536:	4642      	mov	r2, r8
 8011538:	4659      	mov	r1, fp
 801153a:	a826      	add	r0, sp, #152	; 0x98
 801153c:	f7fe fd47 	bl	800ffce <lv_draw_fill>
        if(style->body.radius != 0) {
 8011540:	9b02      	ldr	r3, [sp, #8]
 8011542:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 8011546:	2c00      	cmp	r4, #0
 8011548:	f000 818b 	beq.w	8011862 <lv_draw_rect+0x9ca>
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 801154c:	f7fd ff18 	bl	800f380 <lv_refr_get_disp_refreshing>
 8011550:	f002 f8ce 	bl	80136f0 <lv_disp_get_antialiasing>
    lv_color_t mcolor = style->body.main_color;
 8011554:	9b02      	ldr	r3, [sp, #8]
    return area_p->y2 - area_p->y1 + 1;
 8011556:	f8ba 2002 	ldrh.w	r2, [sl, #2]
 801155a:	885b      	ldrh	r3, [r3, #2]
 801155c:	9303      	str	r3, [sp, #12]
    lv_color_t gcolor = style->body.grad_color;
 801155e:	9b02      	ldr	r3, [sp, #8]
    return area_p->x2 - area_p->x1 + 1;
 8011560:	f8ba 1004 	ldrh.w	r1, [sl, #4]
 8011564:	f8b3 9004 	ldrh.w	r9, [r3, #4]
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 8011568:	9b08      	ldr	r3, [sp, #32]
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 801156a:	9014      	str	r0, [sp, #80]	; 0x50
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 801156c:	2bff      	cmp	r3, #255	; 0xff
 801156e:	9b02      	ldr	r3, [sp, #8]
 8011570:	7a1e      	ldrb	r6, [r3, #8]
 8011572:	bf17      	itett	ne
 8011574:	9b08      	ldrne	r3, [sp, #32]
 8011576:	9604      	streq	r6, [sp, #16]
 8011578:	435e      	mulne	r6, r3
 801157a:	f3c6 2307 	ubfxne	r3, r6, #8, #8
 801157e:	bf18      	it	ne
 8011580:	9304      	strne	r3, [sp, #16]
    return area_p->y2 - area_p->y1 + 1;
 8011582:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 8011586:	3301      	adds	r3, #1
 8011588:	1a9b      	subs	r3, r3, r2
 801158a:	b21b      	sxth	r3, r3
 801158c:	9305      	str	r3, [sp, #20]
    return area_p->x2 - area_p->x1 + 1;
 801158e:	f8ba 3000 	ldrh.w	r3, [sl]
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8011592:	9a05      	ldr	r2, [sp, #20]
 8011594:	3101      	adds	r1, #1
 8011596:	1ac9      	subs	r1, r1, r3
    uint16_t radius = style->body.radius;
 8011598:	b2a4      	uxth	r4, r4
    radius = lv_draw_cont_radius_corr(radius, width, height);
 801159a:	b209      	sxth	r1, r1
 801159c:	4620      	mov	r0, r4
 801159e:	f7ff fc3d 	bl	8010e1c <lv_draw_cont_radius_corr>
    lt_origo.x = coords->x1 + radius + aa;
 80115a2:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 80115a6:	f8ba 7000 	ldrh.w	r7, [sl]
    lt_origo.y = coords->y1 + radius + aa;
 80115aa:	f8ba 4002 	ldrh.w	r4, [sl, #2]
    lb_origo.y = coords->y2 - radius - aa;
 80115ae:	f8ba 8006 	ldrh.w	r8, [sl, #6]
    radius = lv_draw_cont_radius_corr(radius, width, height);
 80115b2:	9009      	str	r0, [sp, #36]	; 0x24
    lt_origo.x = coords->x1 + radius + aa;
 80115b4:	442f      	add	r7, r5
 80115b6:	4407      	add	r7, r0
    lt_origo.y = coords->y1 + radius + aa;
 80115b8:	442c      	add	r4, r5
 80115ba:	4404      	add	r4, r0
    lt_origo.x = coords->x1 + radius + aa;
 80115bc:	b2bb      	uxth	r3, r7
 80115be:	9306      	str	r3, [sp, #24]
    lt_origo.y = coords->y1 + radius + aa;
 80115c0:	b2a3      	uxth	r3, r4
 80115c2:	930a      	str	r3, [sp, #40]	; 0x28
    lb_origo.y = coords->y2 - radius - aa;
 80115c4:	eba8 0800 	sub.w	r8, r8, r0
    lt_origo.y = coords->y1 + radius + aa;
 80115c8:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 80115cc:	9315      	str	r3, [sp, #84]	; 0x54
    lb_origo.y = coords->y2 - radius - aa;
 80115ce:	eba8 0805 	sub.w	r8, r8, r5
 80115d2:	fa1f f388 	uxth.w	r3, r8
 80115d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80115d8:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 80115dc:	9316      	str	r3, [sp, #88]	; 0x58
    rt_origo.x = coords->x2 - radius - aa;
 80115de:	f8ba 3004 	ldrh.w	r3, [sl, #4]
    lv_circ_init(&cir, &cir_tmp, radius);
 80115e2:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
    rt_origo.x = coords->x2 - radius - aa;
 80115e6:	1a1b      	subs	r3, r3, r0
    lv_circ_init(&cir, &cir_tmp, radius);
 80115e8:	ac1e      	add	r4, sp, #120	; 0x78
    rt_origo.x = coords->x2 - radius - aa;
 80115ea:	1b5d      	subs	r5, r3, r5
 80115ec:	b2ab      	uxth	r3, r5
    lv_circ_init(&cir, &cir_tmp, radius);
 80115ee:	4642      	mov	r2, r8
 80115f0:	a91d      	add	r1, sp, #116	; 0x74
 80115f2:	4620      	mov	r0, r4
    rt_origo.x = coords->x2 - radius - aa;
 80115f4:	9307      	str	r3, [sp, #28]
    lv_circ_init(&cir, &cir_tmp, radius);
 80115f6:	f002 faac 	bl	8013b52 <lv_circ_init>
    lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 80115fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80115fc:	f8bd 207a 	ldrh.w	r2, [sp, #122]	; 0x7a
 8011600:	f8bd 1078 	ldrh.w	r1, [sp, #120]	; 0x78
 8011604:	9806      	ldr	r0, [sp, #24]
 8011606:	441a      	add	r2, r3
                rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
 8011608:	9b07      	ldr	r3, [sp, #28]
    lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 801160a:	b212      	sxth	r2, r2
                rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
 801160c:	440b      	add	r3, r1
    lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 801160e:	1a41      	subs	r1, r0, r1
 8011610:	9200      	str	r2, [sp, #0]
 8011612:	b21b      	sxth	r3, r3
 8011614:	b209      	sxth	r1, r1
 8011616:	a824      	add	r0, sp, #144	; 0x90
 8011618:	f002 f9e8 	bl	80139ec <lv_area_set>
    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 801161c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801161e:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
 8011622:	f8bd 107a 	ldrh.w	r1, [sp, #122]	; 0x7a
 8011626:	9806      	ldr	r0, [sp, #24]
 8011628:	441a      	add	r2, r3
                rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
 801162a:	9b07      	ldr	r3, [sp, #28]
    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 801162c:	b212      	sxth	r2, r2
                rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
 801162e:	440b      	add	r3, r1
    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 8011630:	1a41      	subs	r1, r0, r1
 8011632:	9200      	str	r2, [sp, #0]
 8011634:	b21b      	sxth	r3, r3
 8011636:	b209      	sxth	r1, r1
 8011638:	a826      	add	r0, sp, #152	; 0x98
 801163a:	f002 f9d7 	bl	80139ec <lv_area_set>
    lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 801163e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011640:	f8bd 207a 	ldrh.w	r2, [sp, #122]	; 0x7a
 8011644:	f8bd 1078 	ldrh.w	r1, [sp, #120]	; 0x78
 8011648:	9806      	ldr	r0, [sp, #24]
 801164a:	1a9a      	subs	r2, r3, r2
                rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
 801164c:	9b07      	ldr	r3, [sp, #28]
    lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 801164e:	b212      	sxth	r2, r2
                rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
 8011650:	440b      	add	r3, r1
    lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 8011652:	1a41      	subs	r1, r0, r1
 8011654:	9200      	str	r2, [sp, #0]
 8011656:	b21b      	sxth	r3, r3
 8011658:	b209      	sxth	r1, r1
 801165a:	a822      	add	r0, sp, #136	; 0x88
 801165c:	f002 f9c6 	bl	80139ec <lv_area_set>
    lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 8011660:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011662:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
 8011666:	f8bd 107a 	ldrh.w	r1, [sp, #122]	; 0x7a
 801166a:	9806      	ldr	r0, [sp, #24]
 801166c:	1a9a      	subs	r2, r3, r2
                rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
 801166e:	9b07      	ldr	r3, [sp, #28]
    lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 8011670:	b212      	sxth	r2, r2
                rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
 8011672:	440b      	add	r3, r1
    lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 8011674:	1a41      	subs	r1, r0, r1
 8011676:	b21b      	sxth	r3, r3
 8011678:	9200      	str	r2, [sp, #0]
 801167a:	b209      	sxth	r1, r1
 801167c:	a820      	add	r0, sp, #128	; 0x80
 801167e:	f002 f9b5 	bl	80139ec <lv_area_set>
    lv_coord_t out_y_seg_start = 0;
 8011682:	2300      	movs	r3, #0
 8011684:	930e      	str	r3, [sp, #56]	; 0x38
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 8011686:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    while(lv_circ_cont(&cir)) {
 8011688:	9419      	str	r4, [sp, #100]	; 0x64
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 801168a:	3301      	adds	r3, #1
 801168c:	931b      	str	r3, [sp, #108]	; 0x6c
    while(lv_circ_cont(&cir)) {
 801168e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8011690:	f002 fa66 	bl	8013b60 <lv_circ_cont>
 8011694:	2800      	cmp	r0, #0
 8011696:	f040 8357 	bne.w	8011d48 <lv_draw_rect+0xeb0>
    if(mcolor.full == gcolor.full)
 801169a:	9b03      	ldr	r3, [sp, #12]
 801169c:	454b      	cmp	r3, r9
 801169e:	f040 84fc 	bne.w	801209a <lv_draw_rect+0x1202>
        act_color = mcolor;
 80116a2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    lv_draw_fill(&edge_top_area, mask, act_color, opa);
 80116a6:	9b04      	ldr	r3, [sp, #16]
 80116a8:	4659      	mov	r1, fp
 80116aa:	a820      	add	r0, sp, #128	; 0x80
 80116ac:	f7fe fc8f 	bl	800ffce <lv_draw_fill>
    if(edge_top_area.y1 != mid_top_area.y1) {
 80116b0:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
 80116b4:	f9bd 2082 	ldrsh.w	r2, [sp, #130]	; 0x82
 80116b8:	429a      	cmp	r2, r3
 80116ba:	d00a      	beq.n	80116d2 <lv_draw_rect+0x83a>
        if(mcolor.full == gcolor.full)
 80116bc:	9a03      	ldr	r2, [sp, #12]
 80116be:	454a      	cmp	r2, r9
 80116c0:	f040 84fe 	bne.w	80120c0 <lv_draw_rect+0x1228>
            act_color = mcolor;
 80116c4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
        lv_draw_fill(&mid_top_area, mask, act_color, opa);
 80116c8:	9b04      	ldr	r3, [sp, #16]
 80116ca:	4659      	mov	r1, fp
 80116cc:	a822      	add	r0, sp, #136	; 0x88
 80116ce:	f7fe fc7e 	bl	800ffce <lv_draw_fill>
    if(mcolor.full == gcolor.full)
 80116d2:	9b03      	ldr	r3, [sp, #12]
 80116d4:	454b      	cmp	r3, r9
 80116d6:	f040 8504 	bne.w	80120e2 <lv_draw_rect+0x124a>
        act_color = mcolor;
 80116da:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    lv_draw_fill(&mid_bot_area, mask, act_color, opa);
 80116de:	9b04      	ldr	r3, [sp, #16]
 80116e0:	4659      	mov	r1, fp
 80116e2:	a824      	add	r0, sp, #144	; 0x90
 80116e4:	f7fe fc73 	bl	800ffce <lv_draw_fill>
    if(edge_bot_area.y1 != mid_bot_area.y1) {
 80116e8:	f9bd 309a 	ldrsh.w	r3, [sp, #154]	; 0x9a
 80116ec:	f9bd 2092 	ldrsh.w	r2, [sp, #146]	; 0x92
 80116f0:	429a      	cmp	r2, r3
 80116f2:	d00a      	beq.n	801170a <lv_draw_rect+0x872>
        if(mcolor.full == gcolor.full)
 80116f4:	9a03      	ldr	r2, [sp, #12]
 80116f6:	454a      	cmp	r2, r9
 80116f8:	f040 8506 	bne.w	8012108 <lv_draw_rect+0x1270>
            act_color = mcolor;
 80116fc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
        lv_draw_fill(&edge_bot_area, mask, act_color, opa);
 8011700:	9b04      	ldr	r3, [sp, #16]
 8011702:	4659      	mov	r1, fp
 8011704:	a826      	add	r0, sp, #152	; 0x98
 8011706:	f7fe fc62 	bl	800ffce <lv_draw_fill>
    if(aa) {
 801170a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801170c:	2b00      	cmp	r3, #0
 801170e:	f000 80a8 	beq.w	8011862 <lv_draw_rect+0x9ca>
        edge_top_area.x1 = coords->x1 + radius + 2;
 8011712:	f8ba 3000 	ldrh.w	r3, [sl]
 8011716:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011718:	3302      	adds	r3, #2
 801171a:	4413      	add	r3, r2
 801171c:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
        edge_top_area.x2 = coords->x2 - radius - 2;
 8011720:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 8011724:	3b02      	subs	r3, #2
 8011726:	1a9b      	subs	r3, r3, r2
        lv_draw_fill(&edge_top_area, mask, style->body.main_color, opa);
 8011728:	9a02      	ldr	r2, [sp, #8]
        edge_top_area.x2 = coords->x2 - radius - 2;
 801172a:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
        edge_top_area.y1 = coords->y1;
 801172e:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
 8011732:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
        edge_top_area.y2 = coords->y1;
 8011736:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
        lv_draw_fill(&edge_top_area, mask, style->body.main_color, opa);
 801173a:	8852      	ldrh	r2, [r2, #2]
 801173c:	9b04      	ldr	r3, [sp, #16]
 801173e:	4659      	mov	r1, fp
 8011740:	a820      	add	r0, sp, #128	; 0x80
 8011742:	f7fe fc44 	bl	800ffce <lv_draw_fill>
        lv_draw_fill(&edge_top_area, mask, style->body.grad_color, opa);
 8011746:	9a02      	ldr	r2, [sp, #8]
        edge_top_area.y1 = coords->y2;
 8011748:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 801174c:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
        edge_top_area.y2 = coords->y2;
 8011750:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
        lv_draw_fill(&edge_top_area, mask, style->body.grad_color, opa);
 8011754:	8892      	ldrh	r2, [r2, #4]
 8011756:	9b04      	ldr	r3, [sp, #16]
 8011758:	4659      	mov	r1, fp
 801175a:	a820      	add	r0, sp, #128	; 0x80
 801175c:	f7fe fc37 	bl	800ffce <lv_draw_fill>
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 8011760:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8011764:	930f      	str	r3, [sp, #60]	; 0x3c
 8011766:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011768:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
        aa_color_hor_bottom = lv_color_mix(gcolor, mcolor, mix);
 801176c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 8011770:	1a9b      	subs	r3, r3, r2
 8011772:	b21b      	sxth	r3, r3
 8011774:	9313      	str	r3, [sp, #76]	; 0x4c
        mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 8011776:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011778:	eba3 0408 	sub.w	r4, r3, r8
 801177c:	ebc4 2404 	rsb	r4, r4, r4, lsl #8
 8011780:	9b05      	ldr	r3, [sp, #20]
 8011782:	fbb4 f4f3 	udiv	r4, r4, r3
 8011786:	b2e4      	uxtb	r4, r4
        aa_color_hor_bottom = lv_color_mix(gcolor, mcolor, mix);
 8011788:	4622      	mov	r2, r4
 801178a:	4648      	mov	r0, r9
 801178c:	f7ff fb1a 	bl	8010dc4 <lv_color_mix>
        aa_color_hor_top    = lv_color_mix(mcolor, gcolor, mix);
 8011790:	4622      	mov	r2, r4
        aa_color_hor_bottom = lv_color_mix(gcolor, mcolor, mix);
 8011792:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
        aa_color_hor_top    = lv_color_mix(mcolor, gcolor, mix);
 8011796:	4649      	mov	r1, r9
 8011798:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 801179c:	f7ff fb12 	bl	8010dc4 <lv_color_mix>
 80117a0:	2300      	movs	r3, #0
 80117a2:	9310      	str	r3, [sp, #64]	; 0x40
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 80117a4:	fa1f f388 	uxth.w	r3, r8
 80117a8:	9312      	str	r3, [sp, #72]	; 0x48
 80117aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80117ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
        aa_color_hor_top    = lv_color_mix(mcolor, gcolor, mix);
 80117ae:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 80117b2:	3301      	adds	r3, #1
 80117b4:	18d3      	adds	r3, r2, r3
 80117b6:	9316      	str	r3, [sp, #88]	; 0x58
 80117b8:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
        for(i = 0; i < seg_size; i++) {
 80117bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80117be:	428b      	cmp	r3, r1
 80117c0:	f300 84b3 	bgt.w	801212a <lv_draw_rect+0x1292>
        if(LV_MATH_ABS(aa_p.x - aa_p.y) == seg_size) {
 80117c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80117c6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80117c8:	eba8 0303 	sub.w	r3, r8, r3
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	bfb8      	it	lt
 80117d0:	425b      	neglt	r3, r3
 80117d2:	4293      	cmp	r3, r2
 80117d4:	d145      	bne.n	8011862 <lv_draw_rect+0x9ca>
            mix                 = (uint32_t)((uint32_t)(out_x_last)*255) / height;
 80117d6:	9b05      	ldr	r3, [sp, #20]
            aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 80117d8:	f8bd 100c 	ldrh.w	r1, [sp, #12]
            mix                 = (uint32_t)((uint32_t)(out_x_last)*255) / height;
 80117dc:	ebc8 2408 	rsb	r4, r8, r8, lsl #8
 80117e0:	fbb4 f4f3 	udiv	r4, r4, r3
 80117e4:	b2e4      	uxtb	r4, r4
            aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 80117e6:	4622      	mov	r2, r4
 80117e8:	4648      	mov	r0, r9
 80117ea:	f7ff faeb 	bl	8010dc4 <lv_color_mix>
            aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 80117ee:	4622      	mov	r2, r4
            aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 80117f0:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
            aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 80117f4:	4649      	mov	r1, r9
 80117f6:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 80117fa:	f7ff fae3 	bl	8010dc4 <lv_color_mix>
            lv_opa_t aa_opa = opa >> 1;
 80117fe:	9b04      	ldr	r3, [sp, #16]
            aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 8011800:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
            lv_opa_t aa_opa = opa >> 1;
 8011804:	085e      	lsrs	r6, r3, #1
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p), rb_origo.y + LV_CIRC_OCT2_Y(aa_p), mask, aa_color_hor_bottom,
 8011806:	9b07      	ldr	r3, [sp, #28]
 8011808:	9600      	str	r6, [sp, #0]
 801180a:	fa1f f488 	uxth.w	r4, r8
 801180e:	4423      	add	r3, r4
 8011810:	b21d      	sxth	r5, r3
 8011812:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011814:	4423      	add	r3, r4
 8011816:	fa0f f883 	sxth.w	r8, r3
 801181a:	465a      	mov	r2, fp
 801181c:	b283      	uxth	r3, r0
 801181e:	4641      	mov	r1, r8
 8011820:	4628      	mov	r0, r5
 8011822:	f7fe fb85 	bl	800ff30 <lv_draw_px>
            lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p), lb_origo.y + LV_CIRC_OCT4_Y(aa_p), mask, aa_color_hor_bottom,
 8011826:	9b06      	ldr	r3, [sp, #24]
 8011828:	9600      	str	r6, [sp, #0]
 801182a:	1b1f      	subs	r7, r3, r4
 801182c:	b23f      	sxth	r7, r7
 801182e:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8011832:	465a      	mov	r2, fp
 8011834:	4641      	mov	r1, r8
 8011836:	4638      	mov	r0, r7
 8011838:	f7fe fb7a 	bl	800ff30 <lv_draw_px>
            lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p), lt_origo.y + LV_CIRC_OCT6_Y(aa_p), mask, aa_color_hor_top,
 801183c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801183e:	9600      	str	r6, [sp, #0]
 8011840:	1b1c      	subs	r4, r3, r4
 8011842:	b224      	sxth	r4, r4
 8011844:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8011848:	465a      	mov	r2, fp
 801184a:	4621      	mov	r1, r4
 801184c:	4638      	mov	r0, r7
 801184e:	f7fe fb6f 	bl	800ff30 <lv_draw_px>
            lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p), rt_origo.y + LV_CIRC_OCT8_Y(aa_p), mask, aa_color_hor_top,
 8011852:	9600      	str	r6, [sp, #0]
 8011854:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8011858:	465a      	mov	r2, fp
 801185a:	4621      	mov	r1, r4
 801185c:	4628      	mov	r0, r5
 801185e:	f7fe fb67 	bl	800ff30 <lv_draw_px>
    if(style->body.border.width != 0 && style->body.border.part != LV_BORDER_NONE &&
 8011862:	9b02      	ldr	r3, [sp, #8]
 8011864:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8011868:	2b00      	cmp	r3, #0
 801186a:	f000 81c0 	beq.w	8011bee <lv_draw_rect+0xd56>
 801186e:	9b02      	ldr	r3, [sp, #8]
 8011870:	7b9b      	ldrb	r3, [r3, #14]
 8011872:	2b00      	cmp	r3, #0
 8011874:	f000 81bb 	beq.w	8011bee <lv_draw_rect+0xd56>
 8011878:	9b02      	ldr	r3, [sp, #8]
 801187a:	7bdb      	ldrb	r3, [r3, #15]
 801187c:	2b0f      	cmp	r3, #15
 801187e:	f240 81b6 	bls.w	8011bee <lv_draw_rect+0xd56>
    uint16_t radius = style->body.radius;
 8011882:	9b02      	ldr	r3, [sp, #8]
 8011884:	f8b3 9006 	ldrh.w	r9, [r3, #6]
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8011888:	f7fd fd7a 	bl	800f380 <lv_refr_get_disp_refreshing>
 801188c:	f001 ff30 	bl	80136f0 <lv_disp_get_antialiasing>
 8011890:	f8ba 1004 	ldrh.w	r1, [sl, #4]
 8011894:	f8ba 3000 	ldrh.w	r3, [sl]
    return area_p->y2 - area_p->y1 + 1;
 8011898:	f8ba 2006 	ldrh.w	r2, [sl, #6]
    return area_p->x2 - area_p->x1 + 1;
 801189c:	3101      	adds	r1, #1
 801189e:	1ac9      	subs	r1, r1, r3
    return area_p->y2 - area_p->y1 + 1;
 80118a0:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 80118a4:	4680      	mov	r8, r0
 80118a6:	3201      	adds	r2, #1
    lv_opa_t opa      = opa_scale == LV_OPA_COVER ? style->body.border.opa
 80118a8:	9808      	ldr	r0, [sp, #32]
 80118aa:	1ad2      	subs	r2, r2, r3
    lv_coord_t bwidth = style->body.border.width;
 80118ac:	9b02      	ldr	r3, [sp, #8]
    lv_opa_t opa      = opa_scale == LV_OPA_COVER ? style->body.border.opa
 80118ae:	28ff      	cmp	r0, #255	; 0xff
 80118b0:	9802      	ldr	r0, [sp, #8]
    lv_coord_t bwidth = style->body.border.width;
 80118b2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80118b6:	7bc4      	ldrb	r4, [r0, #15]
    lv_opa_t opa      = opa_scale == LV_OPA_COVER ? style->body.border.opa
 80118b8:	bf18      	it	ne
 80118ba:	9808      	ldrne	r0, [sp, #32]
    bwidth--;
 80118bc:	b29b      	uxth	r3, r3
    lv_opa_t opa      = opa_scale == LV_OPA_COVER ? style->body.border.opa
 80118be:	bf18      	it	ne
 80118c0:	4344      	mulne	r4, r0
    bwidth--;
 80118c2:	f103 36ff 	add.w	r6, r3, #4294967295	; 0xffffffff
    lv_border_part_t part = style->body.border.part;
 80118c6:	9802      	ldr	r0, [sp, #8]
    bwidth--;
 80118c8:	9303      	str	r3, [sp, #12]
 80118ca:	b2b6      	uxth	r6, r6
 80118cc:	b212      	sxth	r2, r2
    lv_border_part_t part = style->body.border.part;
 80118ce:	7b85      	ldrb	r5, [r0, #14]
    lv_color_t color      = style->body.border.color;
 80118d0:	8947      	ldrh	r7, [r0, #10]
    bwidth--;
 80118d2:	b233      	sxth	r3, r6
    return area_p->x2 - area_p->x1 + 1;
 80118d4:	b209      	sxth	r1, r1
    radius = lv_draw_cont_radius_corr(radius, width, height);
 80118d6:	4648      	mov	r0, r9
    lv_opa_t opa      = opa_scale == LV_OPA_COVER ? style->body.border.opa
 80118d8:	bf18      	it	ne
 80118da:	f3c4 2407 	ubfxne	r4, r4, #8, #8
    bwidth--;
 80118de:	9304      	str	r3, [sp, #16]
    radius = lv_draw_cont_radius_corr(radius, width, height);
 80118e0:	f7ff fa9c 	bl	8010e1c <lv_draw_cont_radius_corr>
    if(radius < bwidth) {
 80118e4:	9b04      	ldr	r3, [sp, #16]
 80118e6:	4298      	cmp	r0, r3
        length_corr = bwidth - radius - aa;
 80118e8:	bfbd      	ittte	lt
 80118ea:	1a32      	sublt	r2, r6, r0
 80118ec:	eba2 0208 	sublt.w	r2, r2, r8
 80118f0:	b212      	sxthlt	r2, r2
    lv_coord_t length_corr = 0;
 80118f2:	2200      	movge	r2, #0
 80118f4:	9204      	str	r2, [sp, #16]
    if(style->body.radius == 0) {
 80118f6:	9a02      	ldr	r2, [sp, #8]
 80118f8:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
        corner_size = radius + aa;
 80118fc:	bfa8      	it	ge
 80118fe:	eb00 0308 	addge.w	r3, r0, r8
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8011902:	4681      	mov	r9, r0
        corner_size = radius + aa;
 8011904:	bfa8      	it	ge
 8011906:	b21b      	sxthge	r3, r3
 8011908:	f005 0202 	and.w	r2, r5, #2
    if(style->body.radius == 0) {
 801190c:	2900      	cmp	r1, #0
 801190e:	f040 849b 	bne.w	8012248 <lv_draw_rect+0x13b0>
        if(part & LV_BORDER_TOP) {
 8011912:	f002 08ff 	and.w	r8, r2, #255	; 0xff
 8011916:	b1a2      	cbz	r2, 8011942 <lv_draw_rect+0xaaa>
            work_area.x1 = coords->x1;
 8011918:	f8ba 3000 	ldrh.w	r3, [sl]
 801191c:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            work_area.x2 = coords->x2;
 8011920:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 8011924:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            work_area.y1 = coords->y1;
 8011928:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
 801192c:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            work_area.y2 = coords->y1 + bwidth;
 8011930:	4433      	add	r3, r6
 8011932:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&work_area, mask, color, opa);
 8011936:	463a      	mov	r2, r7
 8011938:	4623      	mov	r3, r4
 801193a:	4659      	mov	r1, fp
 801193c:	a826      	add	r0, sp, #152	; 0x98
 801193e:	f7fe fb46 	bl	800ffce <lv_draw_fill>
        if(part & LV_BORDER_RIGHT) {
 8011942:	0729      	lsls	r1, r5, #28
 8011944:	d520      	bpl.n	8011988 <lv_draw_rect+0xaf0>
            work_area.x1 = coords->x2 - bwidth;
 8011946:	f9ba 3004 	ldrsh.w	r3, [sl, #4]
            work_area.x2 = coords->x2;
 801194a:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            work_area.x1 = coords->x2 - bwidth;
 801194e:	1b9a      	subs	r2, r3, r6
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 8011950:	f1b8 0f00 	cmp.w	r8, #0
            work_area.x1 = coords->x2 - bwidth;
 8011954:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 8011958:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 801195c:	9a03      	ldr	r2, [sp, #12]
 801195e:	bf08      	it	eq
 8011960:	2200      	moveq	r2, #0
 8011962:	4413      	add	r3, r2
 8011964:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 8011968:	9a03      	ldr	r2, [sp, #12]
 801196a:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 801196e:	f015 0f01 	tst.w	r5, #1
 8011972:	bf08      	it	eq
 8011974:	2200      	moveq	r2, #0
 8011976:	1a9b      	subs	r3, r3, r2
 8011978:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&work_area, mask, color, opa);
 801197c:	463a      	mov	r2, r7
 801197e:	4623      	mov	r3, r4
 8011980:	4659      	mov	r1, fp
 8011982:	a826      	add	r0, sp, #152	; 0x98
 8011984:	f7fe fb23 	bl	800ffce <lv_draw_fill>
        if(part & LV_BORDER_LEFT) {
 8011988:	f015 0f04 	tst.w	r5, #4
 801198c:	f005 0501 	and.w	r5, r5, #1
 8011990:	d020      	beq.n	80119d4 <lv_draw_rect+0xb3c>
            work_area.x1 = coords->x1;
 8011992:	f9ba 3000 	ldrsh.w	r3, [sl]
 8011996:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            work_area.x2 = coords->x1 + bwidth;
 801199a:	4433      	add	r3, r6
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 801199c:	9a03      	ldr	r2, [sp, #12]
            work_area.x2 = coords->x1 + bwidth;
 801199e:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 80119a2:	f1b8 0f00 	cmp.w	r8, #0
 80119a6:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 80119aa:	bf08      	it	eq
 80119ac:	2200      	moveq	r2, #0
 80119ae:	4413      	add	r3, r2
 80119b0:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 80119b4:	9a03      	ldr	r2, [sp, #12]
 80119b6:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 80119ba:	2d00      	cmp	r5, #0
 80119bc:	bf08      	it	eq
 80119be:	2200      	moveq	r2, #0
 80119c0:	1a9b      	subs	r3, r3, r2
 80119c2:	9203      	str	r2, [sp, #12]
 80119c4:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&work_area, mask, color, opa);
 80119c8:	463a      	mov	r2, r7
 80119ca:	4623      	mov	r3, r4
 80119cc:	4659      	mov	r1, fp
 80119ce:	a826      	add	r0, sp, #152	; 0x98
 80119d0:	f7fe fafd 	bl	800ffce <lv_draw_fill>
        if(part & LV_BORDER_BOTTOM) {
 80119d4:	b1a5      	cbz	r5, 8011a00 <lv_draw_rect+0xb68>
            work_area.x1 = coords->x1;
 80119d6:	f8ba 3000 	ldrh.w	r3, [sl]
 80119da:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            work_area.x2 = coords->x2;
 80119de:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 80119e2:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            work_area.y1 = coords->y2 - bwidth;
 80119e6:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 80119ea:	1b9e      	subs	r6, r3, r6
 80119ec:	f8ad 609a 	strh.w	r6, [sp, #154]	; 0x9a
            work_area.y2 = coords->y2;
 80119f0:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&work_area, mask, color, opa);
 80119f4:	463a      	mov	r2, r7
 80119f6:	4623      	mov	r3, r4
 80119f8:	4659      	mov	r1, fp
 80119fa:	a826      	add	r0, sp, #152	; 0x98
 80119fc:	f7fe fae7 	bl	800ffce <lv_draw_fill>
        if(style->body.radius != 0) {
 8011a00:	9b02      	ldr	r3, [sp, #8]
 8011a02:	f9b3 5006 	ldrsh.w	r5, [r3, #6]
 8011a06:	2d00      	cmp	r5, #0
 8011a08:	f000 80f1 	beq.w	8011bee <lv_draw_rect+0xd56>
    bool aa               = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8011a0c:	f7fd fcb8 	bl	800f380 <lv_refr_get_disp_refreshing>
 8011a10:	f001 fe6e 	bl	80136f0 <lv_disp_get_antialiasing>
    lv_coord_t bwidth     = style->body.border.width;
 8011a14:	9b02      	ldr	r3, [sp, #8]
    bool aa               = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8011a16:	900e      	str	r0, [sp, #56]	; 0x38
    lv_coord_t bwidth     = style->body.border.width;
 8011a18:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
    lv_color_t color      = style->body.border.color;
 8011a1c:	895b      	ldrh	r3, [r3, #10]
 8011a1e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
    lv_border_part_t part = style->body.border.part;
 8011a22:	9b02      	ldr	r3, [sp, #8]
 8011a24:	7b9b      	ldrb	r3, [r3, #14]
 8011a26:	9305      	str	r3, [sp, #20]
    lv_opa_t opa          = opa_scale == LV_OPA_COVER ? style->body.border.opa
 8011a28:	9b08      	ldr	r3, [sp, #32]
 8011a2a:	2bff      	cmp	r3, #255	; 0xff
 8011a2c:	9b02      	ldr	r3, [sp, #8]
 8011a2e:	bf18      	it	ne
 8011a30:	9a08      	ldrne	r2, [sp, #32]
 8011a32:	7bdb      	ldrb	r3, [r3, #15]
 8011a34:	bf1c      	itt	ne
 8011a36:	4353      	mulne	r3, r2
 8011a38:	f3c3 2307 	ubfxne	r3, r3, #8, #8
 8011a3c:	9307      	str	r3, [sp, #28]
    if(aa) bwidth--; /*Because of anti-aliasing the border seems one pixel ticker*/
 8011a3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    uint16_t radius       = style->body.radius;
 8011a40:	b2ad      	uxth	r5, r5
    bwidth--;
 8011a42:	b2a4      	uxth	r4, r4
    if(aa) bwidth--; /*Because of anti-aliasing the border seems one pixel ticker*/
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	f040 854f 	bne.w	80124e8 <lv_draw_rect+0x1650>
    bwidth--;
 8011a4a:	3c01      	subs	r4, #1
    return area_p->y2 - area_p->y1 + 1;
 8011a4c:	f8ba 2006 	ldrh.w	r2, [sl, #6]
 8011a50:	f8ba 3002 	ldrh.w	r3, [sl, #2]
    return area_p->x2 - area_p->x1 + 1;
 8011a54:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    return area_p->y2 - area_p->y1 + 1;
 8011a58:	3201      	adds	r2, #1
 8011a5a:	1ad2      	subs	r2, r2, r3
    return area_p->x2 - area_p->x1 + 1;
 8011a5c:	f8ba 3000 	ldrh.w	r3, [sl]
 8011a60:	3101      	adds	r1, #1
 8011a62:	1ac9      	subs	r1, r1, r3
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8011a64:	b212      	sxth	r2, r2
 8011a66:	b209      	sxth	r1, r1
 8011a68:	4628      	mov	r0, r5
 8011a6a:	f7ff f9d7 	bl	8010e1c <lv_draw_cont_radius_corr>
    lt_origo.x = coords->x1 + radius + aa;
 8011a6e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8011a72:	f8ba 2000 	ldrh.w	r2, [sl]
 8011a76:	441a      	add	r2, r3
 8011a78:	4402      	add	r2, r0
 8011a7a:	b292      	uxth	r2, r2
 8011a7c:	9206      	str	r2, [sp, #24]
    lt_origo.y = coords->y1 + radius + aa;
 8011a7e:	f8ba 2002 	ldrh.w	r2, [sl, #2]
 8011a82:	441a      	add	r2, r3
 8011a84:	4402      	add	r2, r0
 8011a86:	b292      	uxth	r2, r2
 8011a88:	9203      	str	r2, [sp, #12]
 8011a8a:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8011a8e:	9211      	str	r2, [sp, #68]	; 0x44
    lb_origo.y = coords->y2 - radius - aa;
 8011a90:	f8ba 2006 	ldrh.w	r2, [sl, #6]
 8011a94:	1a12      	subs	r2, r2, r0
 8011a96:	1ad2      	subs	r2, r2, r3
 8011a98:	b292      	uxth	r2, r2
 8011a9a:	9204      	str	r2, [sp, #16]
 8011a9c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8011aa0:	9212      	str	r2, [sp, #72]	; 0x48
    rt_origo.x = coords->x2 - radius - aa;
 8011aa2:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8011aa6:	1a12      	subs	r2, r2, r0
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8011aa8:	4605      	mov	r5, r0
    rt_origo.x = coords->x2 - radius - aa;
 8011aaa:	1ad3      	subs	r3, r2, r3
    lv_circ_init(&cir_out, &tmp_out, radius);
 8011aac:	fa0f f980 	sxth.w	r9, r0
    if(aa) bwidth--; /*Because of anti-aliasing the border seems one pixel ticker*/
 8011ab0:	b2a4      	uxth	r4, r4
    rt_origo.x = coords->x2 - radius - aa;
 8011ab2:	b29b      	uxth	r3, r3
    lv_circ_init(&cir_out, &tmp_out, radius);
 8011ab4:	464a      	mov	r2, r9
 8011ab6:	a91e      	add	r1, sp, #120	; 0x78
 8011ab8:	a822      	add	r0, sp, #136	; 0x88
    lv_coord_t radius_in = radius - bwidth;
 8011aba:	1b2c      	subs	r4, r5, r4
    rt_origo.x = coords->x2 - radius - aa;
 8011abc:	9309      	str	r3, [sp, #36]	; 0x24
    lv_circ_init(&cir_out, &tmp_out, radius);
 8011abe:	f002 f848 	bl	8013b52 <lv_circ_init>
    lv_coord_t radius_in = radius - bwidth;
 8011ac2:	b223      	sxth	r3, r4
    lv_circ_init(&cir_in, &tmp_in, radius_in);
 8011ac4:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8011ac8:	a920      	add	r1, sp, #128	; 0x80
 8011aca:	a824      	add	r0, sp, #144	; 0x90
    lv_coord_t radius_in = radius - bwidth;
 8011acc:	9308      	str	r3, [sp, #32]
    lv_circ_init(&cir_in, &tmp_in, radius_in);
 8011ace:	f002 f840 	bl	8013b52 <lv_circ_init>
    lv_coord_t in_y_seg_start = 0;
 8011ad2:	2300      	movs	r3, #0
 8011ad4:	930c      	str	r3, [sp, #48]	; 0x30
    lv_coord_t out_y_seg_start = 0;
 8011ad6:	930f      	str	r3, [sp, #60]	; 0x3c
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 8011ad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ada:	3b01      	subs	r3, #1
 8011adc:	9316      	str	r3, [sp, #88]	; 0x58
 8011ade:	9b05      	ldr	r3, [sp, #20]
 8011ae0:	f003 0309 	and.w	r3, r3, #9
 8011ae4:	9310      	str	r3, [sp, #64]	; 0x40
    while(cir_out.y <= cir_out.x) {
 8011ae6:	f9bd a08a 	ldrsh.w	sl, [sp, #138]	; 0x8a
 8011aea:	f9bd 2088 	ldrsh.w	r2, [sp, #136]	; 0x88
 8011aee:	4552      	cmp	r2, sl
 8011af0:	f280 84fd 	bge.w	80124ee <lv_draw_rect+0x1656>
    if(aa) {
 8011af4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d079      	beq.n	8011bee <lv_draw_rect+0xd56>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 8011afa:	9b09      	ldr	r3, [sp, #36]	; 0x24
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 8011afc:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 8011b00:	fa1f f789 	uxth.w	r7, r9
 8011b04:	3301      	adds	r3, #1
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 8011b06:	ebaa 0a05 	sub.w	sl, sl, r5
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 8011b0a:	18fb      	adds	r3, r7, r3
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 8011b0c:	fa0f fa8a 	sxth.w	sl, sl
 8011b10:	2600      	movs	r6, #0
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 8011b12:	930a      	str	r3, [sp, #40]	; 0x28
 8011b14:	b231      	sxth	r1, r6
        for(i = 0; i < seg_size; i++) {
 8011b16:	458a      	cmp	sl, r1
 8011b18:	f300 877e 	bgt.w	8012a18 <lv_draw_rect+0x1b80>
        if(LV_MATH_ABS(aa_p.x - aa_p.y) == seg_size) {
 8011b1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011b1e:	eba9 0503 	sub.w	r5, r9, r3
 8011b22:	2d00      	cmp	r5, #0
 8011b24:	bfb8      	it	lt
 8011b26:	426d      	neglt	r5, r5
 8011b28:	4555      	cmp	r5, sl
 8011b2a:	d14d      	bne.n	8011bc8 <lv_draw_rect+0xd30>
            lv_opa_t aa_opa = opa >> 1;
 8011b2c:	9b07      	ldr	r3, [sp, #28]
 8011b2e:	085c      	lsrs	r4, r3, #1
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 8011b30:	9b05      	ldr	r3, [sp, #20]
 8011b32:	f003 0309 	and.w	r3, r3, #9
 8011b36:	2b09      	cmp	r3, #9
 8011b38:	d10d      	bne.n	8011b56 <lv_draw_rect+0xcbe>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p), rb_origo.y + LV_CIRC_OCT2_Y(aa_p), mask,
 8011b3a:	9b04      	ldr	r3, [sp, #16]
 8011b3c:	9400      	str	r4, [sp, #0]
 8011b3e:	fa1f f089 	uxth.w	r0, r9
 8011b42:	1819      	adds	r1, r3, r0
 8011b44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b46:	4418      	add	r0, r3
 8011b48:	9b02      	ldr	r3, [sp, #8]
 8011b4a:	465a      	mov	r2, fp
 8011b4c:	895b      	ldrh	r3, [r3, #10]
 8011b4e:	b209      	sxth	r1, r1
 8011b50:	b200      	sxth	r0, r0
 8011b52:	f7fe f9ed 	bl	800ff30 <lv_draw_px>
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 8011b56:	9b05      	ldr	r3, [sp, #20]
 8011b58:	f003 0305 	and.w	r3, r3, #5
 8011b5c:	2b05      	cmp	r3, #5
 8011b5e:	d10d      	bne.n	8011b7c <lv_draw_rect+0xce4>
                lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p), lb_origo.y + LV_CIRC_OCT4_Y(aa_p), mask,
 8011b60:	9b04      	ldr	r3, [sp, #16]
 8011b62:	9400      	str	r4, [sp, #0]
 8011b64:	fa1f f089 	uxth.w	r0, r9
 8011b68:	1819      	adds	r1, r3, r0
 8011b6a:	9b06      	ldr	r3, [sp, #24]
 8011b6c:	1a18      	subs	r0, r3, r0
 8011b6e:	9b02      	ldr	r3, [sp, #8]
 8011b70:	465a      	mov	r2, fp
 8011b72:	895b      	ldrh	r3, [r3, #10]
 8011b74:	b209      	sxth	r1, r1
 8011b76:	b200      	sxth	r0, r0
 8011b78:	f7fe f9da 	bl	800ff30 <lv_draw_px>
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 8011b7c:	9b05      	ldr	r3, [sp, #20]
 8011b7e:	f003 0306 	and.w	r3, r3, #6
 8011b82:	2b06      	cmp	r3, #6
 8011b84:	d10d      	bne.n	8011ba2 <lv_draw_rect+0xd0a>
                lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p), lt_origo.y + LV_CIRC_OCT6_Y(aa_p), mask,
 8011b86:	9b03      	ldr	r3, [sp, #12]
 8011b88:	9400      	str	r4, [sp, #0]
 8011b8a:	fa1f f089 	uxth.w	r0, r9
 8011b8e:	1a19      	subs	r1, r3, r0
 8011b90:	9b06      	ldr	r3, [sp, #24]
 8011b92:	1a18      	subs	r0, r3, r0
 8011b94:	9b02      	ldr	r3, [sp, #8]
 8011b96:	465a      	mov	r2, fp
 8011b98:	895b      	ldrh	r3, [r3, #10]
 8011b9a:	b209      	sxth	r1, r1
 8011b9c:	b200      	sxth	r0, r0
 8011b9e:	f7fe f9c7 	bl	800ff30 <lv_draw_px>
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 8011ba2:	9b05      	ldr	r3, [sp, #20]
 8011ba4:	f003 030a 	and.w	r3, r3, #10
 8011ba8:	2b0a      	cmp	r3, #10
 8011baa:	d10d      	bne.n	8011bc8 <lv_draw_rect+0xd30>
                lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p), rt_origo.y + LV_CIRC_OCT8_Y(aa_p), mask,
 8011bac:	9b03      	ldr	r3, [sp, #12]
 8011bae:	9400      	str	r4, [sp, #0]
 8011bb0:	fa1f f789 	uxth.w	r7, r9
 8011bb4:	1bd9      	subs	r1, r3, r7
 8011bb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011bb8:	441f      	add	r7, r3
 8011bba:	9b02      	ldr	r3, [sp, #8]
 8011bbc:	465a      	mov	r2, fp
 8011bbe:	895b      	ldrh	r3, [r3, #10]
 8011bc0:	b209      	sxth	r1, r1
 8011bc2:	b238      	sxth	r0, r7
 8011bc4:	f7fe f9b4 	bl	800ff30 <lv_draw_px>
        seg_size     = in_y_seg_end - in_y_seg_start;
 8011bc8:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8011bcc:	f8bd 3092 	ldrh.w	r3, [sp, #146]	; 0x92
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 8011bd0:	9a08      	ldr	r2, [sp, #32]
        seg_size     = in_y_seg_end - in_y_seg_start;
 8011bd2:	1b5b      	subs	r3, r3, r5
 8011bd4:	b21b      	sxth	r3, r3
 8011bd6:	930a      	str	r3, [sp, #40]	; 0x28
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 8011bd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011bda:	3b01      	subs	r3, #1
 8011bdc:	4413      	add	r3, r2
 8011bde:	b21b      	sxth	r3, r3
        seg_size     = in_y_seg_end - in_y_seg_start;
 8011be0:	2400      	movs	r4, #0
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 8011be2:	930b      	str	r3, [sp, #44]	; 0x2c
        for(i = 0; i < seg_size; i++) {
 8011be4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011be6:	b221      	sxth	r1, r4
 8011be8:	428b      	cmp	r3, r1
 8011bea:	f300 87b0 	bgt.w	8012b4e <lv_draw_rect+0x1cb6>
}
 8011bee:	b029      	add	sp, #164	; 0xa4
 8011bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        curve_x[LV_CIRC_OCT1_Y(circ)] = LV_CIRC_OCT1_X(circ);
 8011bf4:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 8011bf8:	f9bd 2090 	ldrsh.w	r2, [sp, #144]	; 0x90
 8011bfc:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
        curve_x[LV_CIRC_OCT2_Y(circ)] = LV_CIRC_OCT2_X(circ);
 8011c00:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 8011c04:	f9bd 2092 	ldrsh.w	r2, [sp, #146]	; 0x92
 8011c08:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
        lv_circ_next(&circ, &circ_tmp);
 8011c0c:	a922      	add	r1, sp, #136	; 0x88
 8011c0e:	4648      	mov	r0, r9
 8011c10:	f001 ffaf 	bl	8013b72 <lv_circ_next>
 8011c14:	f7ff bbe4 	b.w	80113e0 <lv_draw_rect+0x548>
        line_1d_blur[col] = (uint32_t)((uint32_t)(swidth - col) * opa / 2) / (swidth);
 8011c18:	0842      	lsrs	r2, r0, #1
 8011c1a:	1ac0      	subs	r0, r0, r3
 8011c1c:	fbb2 f2f6 	udiv	r2, r2, r6
 8011c20:	f801 2b01 	strb.w	r2, [r1], #1
 8011c24:	f7ff bbef 	b.w	8011406 <lv_draw_rect+0x56e>
        point_l.y = ofs_l.y + curve_x[col];
 8011c28:	f837 5013 	ldrh.w	r5, [r7, r3, lsl #1]
 8011c2c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011c2e:	9904      	ldr	r1, [sp, #16]
 8011c30:	4428      	add	r0, r5
 8011c32:	b280      	uxth	r0, r0
 8011c34:	900d      	str	r0, [sp, #52]	; 0x34
 8011c36:	9806      	ldr	r0, [sp, #24]
 8011c38:	fa1f f288 	uxth.w	r2, r8
 8011c3c:	1a89      	subs	r1, r1, r2
 8011c3e:	4402      	add	r2, r0
 8011c40:	b209      	sxth	r1, r1
 8011c42:	b212      	sxth	r2, r2
 8011c44:	910e      	str	r1, [sp, #56]	; 0x38
 8011c46:	920a      	str	r2, [sp, #40]	; 0x28
 8011c48:	0059      	lsls	r1, r3, #1
        int16_t diff = col == 0 ? 0 : curve_x[col - 1] - curve_x[col];
 8011c4a:	b123      	cbz	r3, 8011c56 <lv_draw_rect+0xdbe>
 8011c4c:	187a      	adds	r2, r7, r1
 8011c4e:	f832 3c02 	ldrh.w	r3, [r2, #-2]
 8011c52:	1b5b      	subs	r3, r3, r5
 8011c54:	b29b      	uxth	r3, r3
 8011c56:	b21b      	sxth	r3, r3
 8011c58:	9307      	str	r3, [sp, #28]
 8011c5a:	f04f 0900 	mov.w	r9, #0
 8011c5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011c60:	444b      	add	r3, r9
 8011c62:	b21b      	sxth	r3, r3
 8011c64:	9309      	str	r3, [sp, #36]	; 0x24
        for(d = 0; d < swidth; d++) {
 8011c66:	fa1f f389 	uxth.w	r3, r9
 8011c6a:	42b3      	cmp	r3, r6
 8011c6c:	db03      	blt.n	8011c76 <lv_draw_rect+0xdde>
 8011c6e:	f108 0801 	add.w	r8, r8, #1
 8011c72:	f7ff bbe7 	b.w	8011444 <lv_draw_rect+0x5ac>
            if(diff == 0) {
 8011c76:	9a07      	ldr	r2, [sp, #28]
                px_opa = line_1d_blur[d];
 8011c78:	5ce5      	ldrb	r5, [r4, r3]
            if(diff == 0) {
 8011c7a:	b9b2      	cbnz	r2, 8011caa <lv_draw_rect+0xe12>
            lv_draw_px(point_l.x, point_l.y, mask, style->body.shadow.color, px_opa);
 8011c7c:	9b02      	ldr	r3, [sp, #8]
 8011c7e:	9500      	str	r5, [sp, #0]
 8011c80:	8a1b      	ldrh	r3, [r3, #16]
 8011c82:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011c84:	980e      	ldr	r0, [sp, #56]	; 0x38
 8011c86:	465a      	mov	r2, fp
 8011c88:	f7fe f952 	bl	800ff30 <lv_draw_px>
            if(point_r.x > ofs_l.x) {
 8011c8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011c8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011c90:	4293      	cmp	r3, r2
 8011c92:	da07      	bge.n	8011ca4 <lv_draw_rect+0xe0c>
                lv_draw_px(point_r.x, point_r.y, mask, style->body.shadow.color, px_opa);
 8011c94:	9b02      	ldr	r3, [sp, #8]
 8011c96:	9500      	str	r5, [sp, #0]
 8011c98:	8a1b      	ldrh	r3, [r3, #16]
 8011c9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011c9c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8011c9e:	465a      	mov	r2, fp
 8011ca0:	f7fe f946 	bl	800ff30 <lv_draw_px>
 8011ca4:	f109 0901 	add.w	r9, r9, #1
 8011ca8:	e7d9      	b.n	8011c5e <lv_draw_rect+0xdc6>
                px_opa = (uint16_t)((uint16_t)line_1d_blur[d] + line_1d_blur[d - diff]) >> 1;
 8011caa:	9a07      	ldr	r2, [sp, #28]
 8011cac:	1a9b      	subs	r3, r3, r2
 8011cae:	5ce3      	ldrb	r3, [r4, r3]
 8011cb0:	441d      	add	r5, r3
 8011cb2:	f3c5 0547 	ubfx	r5, r5, #1, #8
 8011cb6:	e7e1      	b.n	8011c7c <lv_draw_rect+0xde4>
        lv_draw_fill(&area_mid, mask, style->body.shadow.color, line_1d_blur[d]);
 8011cb8:	9a02      	ldr	r2, [sp, #8]
 8011cba:	5ce3      	ldrb	r3, [r4, r3]
 8011cbc:	8a12      	ldrh	r2, [r2, #16]
 8011cbe:	4659      	mov	r1, fp
 8011cc0:	a826      	add	r0, sp, #152	; 0x98
 8011cc2:	f7fe f984 	bl	800ffce <lv_draw_fill>
        area_mid.y1++;
 8011cc6:	f8bd 309a 	ldrh.w	r3, [sp, #154]	; 0x9a
 8011cca:	3301      	adds	r3, #1
 8011ccc:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
        area_mid.y2++;
 8011cd0:	f8bd 309e 	ldrh.w	r3, [sp, #158]	; 0x9e
 8011cd4:	3301      	adds	r3, #1
 8011cd6:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
 8011cda:	462b      	mov	r3, r5
 8011cdc:	f7ff bbc7 	b.w	801146e <lv_draw_rect+0x5d6>
                work_area.y1 += 1;
 8011ce0:	3301      	adds	r3, #1
 8011ce2:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
                work_area.y2 -= 1;
 8011ce6:	3d01      	subs	r5, #1
 8011ce8:	e422      	b.n	8011530 <lv_draw_rect+0x698>
        if(style->body.radius != 0) {
 8011cea:	9a02      	ldr	r2, [sp, #8]
 8011cec:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
        lv_coord_t row_end   = coords->y2 - radius;
 8011cf0:	1a2d      	subs	r5, r5, r0
 8011cf2:	b2ad      	uxth	r5, r5
        if(style->body.radius != 0) {
 8011cf4:	b9fa      	cbnz	r2, 8011d36 <lv_draw_rect+0xe9e>
        lv_coord_t row_start = coords->y1 + radius;
 8011cf6:	b21c      	sxth	r4, r3
                row_end -= 1;
 8011cf8:	b22d      	sxth	r5, r5
 8011cfa:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
        for(row = row_start; row <= row_end; row++) {
 8011cfe:	42ac      	cmp	r4, r5
 8011d00:	f73f ac1e 	bgt.w	8011540 <lv_draw_rect+0x6a8>
            mix          = (uint32_t)((uint32_t)(coords->y2 - work_area.y1) * 255) / height;
 8011d04:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
            work_area.y1 = row;
 8011d08:	f8ad 409a 	strh.w	r4, [sp, #154]	; 0x9a
            mix          = (uint32_t)((uint32_t)(coords->y2 - work_area.y1) * 255) / height;
 8011d0c:	1b12      	subs	r2, r2, r4
            act_color    = lv_color_mix(mcolor, gcolor, mix);
 8011d0e:	4649      	mov	r1, r9
            mix          = (uint32_t)((uint32_t)(coords->y2 - work_area.y1) * 255) / height;
 8011d10:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
            act_color    = lv_color_mix(mcolor, gcolor, mix);
 8011d14:	4640      	mov	r0, r8
            mix          = (uint32_t)((uint32_t)(coords->y2 - work_area.y1) * 255) / height;
 8011d16:	fbb2 f2f6 	udiv	r2, r2, r6
            act_color    = lv_color_mix(mcolor, gcolor, mix);
 8011d1a:	b2d2      	uxtb	r2, r2
            work_area.y2 = row;
 8011d1c:	f8ad 409e 	strh.w	r4, [sp, #158]	; 0x9e
            act_color    = lv_color_mix(mcolor, gcolor, mix);
 8011d20:	f7ff f850 	bl	8010dc4 <lv_color_mix>
 8011d24:	3401      	adds	r4, #1
            lv_draw_fill(&work_area, mask, act_color, opa);
 8011d26:	4602      	mov	r2, r0
 8011d28:	463b      	mov	r3, r7
 8011d2a:	4659      	mov	r1, fp
 8011d2c:	a826      	add	r0, sp, #152	; 0x98
 8011d2e:	f7fe f94e 	bl	800ffce <lv_draw_fill>
 8011d32:	b224      	sxth	r4, r4
 8011d34:	e7e3      	b.n	8011cfe <lv_draw_rect+0xe66>
            if(aa) {
 8011d36:	b11c      	cbz	r4, 8011d40 <lv_draw_rect+0xea8>
                row_start += 2;
 8011d38:	1c9c      	adds	r4, r3, #2
 8011d3a:	b224      	sxth	r4, r4
                row_end -= 2;
 8011d3c:	3d02      	subs	r5, #2
 8011d3e:	e7db      	b.n	8011cf8 <lv_draw_rect+0xe60>
                row_start += 1;
 8011d40:	1c5c      	adds	r4, r3, #1
 8011d42:	b224      	sxth	r4, r4
                row_end -= 1;
 8011d44:	3d01      	subs	r5, #1
 8011d46:	e7d7      	b.n	8011cf8 <lv_draw_rect+0xe60>
        if(aa) {
 8011d48:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d039      	beq.n	8011dc2 <lv_draw_rect+0xf2a>
            if(out_x_last != cir.x) {
 8011d4e:	f9bd 3078 	ldrsh.w	r3, [sp, #120]	; 0x78
 8011d52:	4543      	cmp	r3, r8
 8011d54:	d035      	beq.n	8011dc2 <lv_draw_rect+0xf2a>
                out_y_seg_end       = cir.y;
 8011d56:	f9bd 307a 	ldrsh.w	r3, [sp, #122]	; 0x7a
 8011d5a:	9317      	str	r3, [sp, #92]	; 0x5c
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 8011d5c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8011d60:	930f      	str	r3, [sp, #60]	; 0x3c
 8011d62:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011d64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
                aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 8011d66:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 8011d6a:	1a9b      	subs	r3, r3, r2
 8011d6c:	b21b      	sxth	r3, r3
 8011d6e:	9311      	str	r3, [sp, #68]	; 0x44
                mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 8011d70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d72:	eba3 0408 	sub.w	r4, r3, r8
 8011d76:	ebc4 2404 	rsb	r4, r4, r4, lsl #8
 8011d7a:	9b05      	ldr	r3, [sp, #20]
 8011d7c:	fbb4 f4f3 	udiv	r4, r4, r3
 8011d80:	b2e4      	uxtb	r4, r4
                aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 8011d82:	4622      	mov	r2, r4
 8011d84:	4648      	mov	r0, r9
 8011d86:	f7ff f81d 	bl	8010dc4 <lv_color_mix>
                aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 8011d8a:	4622      	mov	r2, r4
                aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 8011d8c:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
                aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 8011d90:	4649      	mov	r1, r9
 8011d92:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 8011d96:	f7ff f815 	bl	8010dc4 <lv_color_mix>
 8011d9a:	2300      	movs	r3, #0
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 8011d9c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
                aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 8011d9e:	9310      	str	r3, [sp, #64]	; 0x40
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 8011da0:	fa1f f388 	uxth.w	r3, r8
 8011da4:	9313      	str	r3, [sp, #76]	; 0x4c
 8011da6:	4413      	add	r3, r2
                aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 8011da8:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 8011dac:	931a      	str	r3, [sp, #104]	; 0x68
 8011dae:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
                for(i = 0; i < seg_size; i++) {
 8011db2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011db4:	428b      	cmp	r3, r1
 8011db6:	f300 8090 	bgt.w	8011eda <lv_draw_rect+0x1042>
                out_y_seg_start = out_y_seg_end;
 8011dba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
                out_x_last      = cir.x;
 8011dbc:	f9bd 8078 	ldrsh.w	r8, [sp, #120]	; 0x78
                out_y_seg_start = out_y_seg_end;
 8011dc0:	930e      	str	r3, [sp, #56]	; 0x38
        if(mid_bot_area.y1 != LV_CIRC_OCT4_Y(cir) + lb_origo.y) mid_bot_refr = 1;
 8011dc2:	f9bd 407a 	ldrsh.w	r4, [sp, #122]	; 0x7a
 8011dc6:	9b16      	ldr	r3, [sp, #88]	; 0x58
        if(edge_bot_area.y1 != LV_CIRC_OCT2_Y(cir) + lb_origo.y) edge_bot_refr = 1;
 8011dc8:	9a16      	ldr	r2, [sp, #88]	; 0x58
        if(edge_top_area.y1 != LV_CIRC_OCT7_Y(cir) + lt_origo.y) edge_top_refr = 1;
 8011dca:	f9bd 1082 	ldrsh.w	r1, [sp, #130]	; 0x82
        if(mid_bot_area.y1 != LV_CIRC_OCT4_Y(cir) + lb_origo.y) mid_bot_refr = 1;
 8011dce:	f9bd 7092 	ldrsh.w	r7, [sp, #146]	; 0x92
        if(mid_top_area.y1 != LV_CIRC_OCT8_Y(cir) + lt_origo.y) mid_top_refr = 1;
 8011dd2:	f9bd 608a 	ldrsh.w	r6, [sp, #138]	; 0x8a
        if(mid_bot_area.y1 != LV_CIRC_OCT4_Y(cir) + lb_origo.y) mid_bot_refr = 1;
 8011dd6:	18e5      	adds	r5, r4, r3
        if(edge_bot_area.y1 != LV_CIRC_OCT2_Y(cir) + lb_origo.y) edge_bot_refr = 1;
 8011dd8:	f9bd 309a 	ldrsh.w	r3, [sp, #154]	; 0x9a
 8011ddc:	930c      	str	r3, [sp, #48]	; 0x30
 8011dde:	f9bd 3078 	ldrsh.w	r3, [sp, #120]	; 0x78
 8011de2:	441a      	add	r2, r3
 8011de4:	920d      	str	r2, [sp, #52]	; 0x34
        if(mid_top_area.y1 != LV_CIRC_OCT8_Y(cir) + lt_origo.y) mid_top_refr = 1;
 8011de6:	9a15      	ldr	r2, [sp, #84]	; 0x54
        if(edge_top_area.y1 != LV_CIRC_OCT7_Y(cir) + lt_origo.y) edge_top_refr = 1;
 8011de8:	1ad3      	subs	r3, r2, r3
 8011dea:	4299      	cmp	r1, r3
        if(mid_top_area.y1 != LV_CIRC_OCT8_Y(cir) + lt_origo.y) mid_top_refr = 1;
 8011dec:	eba2 0404 	sub.w	r4, r2, r4
        if(edge_top_area.y1 != LV_CIRC_OCT7_Y(cir) + lt_origo.y) edge_top_refr = 1;
 8011df0:	f040 874d 	bne.w	8012c8e <lv_draw_rect+0x1df6>
        if(mid_top_refr != 0) {
 8011df4:	42a6      	cmp	r6, r4
 8011df6:	d00a      	beq.n	8011e0e <lv_draw_rect+0xf76>
            if(mcolor.full == gcolor.full)
 8011df8:	9b03      	ldr	r3, [sp, #12]
 8011dfa:	454b      	cmp	r3, r9
 8011dfc:	f040 8117 	bne.w	801202e <lv_draw_rect+0x1196>
                act_color = mcolor;
 8011e00:	f8bd 200c 	ldrh.w	r2, [sp, #12]
            lv_draw_fill(&mid_top_area, mask, act_color, opa);
 8011e04:	9b04      	ldr	r3, [sp, #16]
 8011e06:	4659      	mov	r1, fp
 8011e08:	a822      	add	r0, sp, #136	; 0x88
 8011e0a:	f7fe f8e0 	bl	800ffce <lv_draw_fill>
        if(mid_bot_refr != 0) {
 8011e0e:	42af      	cmp	r7, r5
 8011e10:	d00a      	beq.n	8011e28 <lv_draw_rect+0xf90>
            if(mcolor.full == gcolor.full)
 8011e12:	9b03      	ldr	r3, [sp, #12]
 8011e14:	454b      	cmp	r3, r9
 8011e16:	f040 811c 	bne.w	8012052 <lv_draw_rect+0x11ba>
                act_color = mcolor;
 8011e1a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
            lv_draw_fill(&mid_bot_area, mask, act_color, opa);
 8011e1e:	9b04      	ldr	r3, [sp, #16]
 8011e20:	4659      	mov	r1, fp
 8011e22:	a824      	add	r0, sp, #144	; 0x90
 8011e24:	f7fe f8d3 	bl	800ffce <lv_draw_fill>
        if(edge_bot_refr != 0) {
 8011e28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011e2a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011e2c:	4293      	cmp	r3, r2
 8011e2e:	d00a      	beq.n	8011e46 <lv_draw_rect+0xfae>
            if(mcolor.full == gcolor.full)
 8011e30:	9b03      	ldr	r3, [sp, #12]
 8011e32:	454b      	cmp	r3, r9
 8011e34:	f040 811f 	bne.w	8012076 <lv_draw_rect+0x11de>
                act_color = mcolor;
 8011e38:	f8bd 200c 	ldrh.w	r2, [sp, #12]
            lv_draw_fill(&edge_bot_area, mask, act_color, opa);
 8011e3c:	9b04      	ldr	r3, [sp, #16]
 8011e3e:	4659      	mov	r1, fp
 8011e40:	a826      	add	r0, sp, #152	; 0x98
 8011e42:	f7fe f8c4 	bl	800ffce <lv_draw_fill>
        lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 8011e46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011e48:	f8bd 207a 	ldrh.w	r2, [sp, #122]	; 0x7a
 8011e4c:	f8bd 1078 	ldrh.w	r1, [sp, #120]	; 0x78
 8011e50:	9806      	ldr	r0, [sp, #24]
 8011e52:	441a      	add	r2, r3
                    rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
 8011e54:	9b07      	ldr	r3, [sp, #28]
        lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 8011e56:	b212      	sxth	r2, r2
                    rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
 8011e58:	440b      	add	r3, r1
        lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 8011e5a:	1a41      	subs	r1, r0, r1
 8011e5c:	9200      	str	r2, [sp, #0]
 8011e5e:	a824      	add	r0, sp, #144	; 0x90
 8011e60:	b21b      	sxth	r3, r3
 8011e62:	b209      	sxth	r1, r1
 8011e64:	f001 fdc2 	bl	80139ec <lv_area_set>
        lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 8011e68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011e6a:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
 8011e6e:	f8bd 107a 	ldrh.w	r1, [sp, #122]	; 0x7a
 8011e72:	9806      	ldr	r0, [sp, #24]
 8011e74:	441a      	add	r2, r3
                    rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
 8011e76:	9b07      	ldr	r3, [sp, #28]
        lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 8011e78:	b212      	sxth	r2, r2
                    rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
 8011e7a:	440b      	add	r3, r1
        lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 8011e7c:	1a41      	subs	r1, r0, r1
 8011e7e:	9200      	str	r2, [sp, #0]
 8011e80:	a826      	add	r0, sp, #152	; 0x98
 8011e82:	b21b      	sxth	r3, r3
 8011e84:	b209      	sxth	r1, r1
 8011e86:	f001 fdb1 	bl	80139ec <lv_area_set>
        lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 8011e8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011e8c:	f8bd 207a 	ldrh.w	r2, [sp, #122]	; 0x7a
 8011e90:	f8bd 1078 	ldrh.w	r1, [sp, #120]	; 0x78
 8011e94:	9806      	ldr	r0, [sp, #24]
 8011e96:	1a9a      	subs	r2, r3, r2
                    rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
 8011e98:	9b07      	ldr	r3, [sp, #28]
        lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 8011e9a:	b212      	sxth	r2, r2
                    rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
 8011e9c:	440b      	add	r3, r1
        lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 8011e9e:	1a41      	subs	r1, r0, r1
 8011ea0:	9200      	str	r2, [sp, #0]
 8011ea2:	a822      	add	r0, sp, #136	; 0x88
 8011ea4:	b21b      	sxth	r3, r3
 8011ea6:	b209      	sxth	r1, r1
 8011ea8:	f001 fda0 	bl	80139ec <lv_area_set>
        lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 8011eac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011eae:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
 8011eb2:	f8bd 107a 	ldrh.w	r1, [sp, #122]	; 0x7a
 8011eb6:	9806      	ldr	r0, [sp, #24]
 8011eb8:	1a9a      	subs	r2, r3, r2
                    rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
 8011eba:	9b07      	ldr	r3, [sp, #28]
        lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 8011ebc:	b212      	sxth	r2, r2
                    rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
 8011ebe:	440b      	add	r3, r1
        lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 8011ec0:	1a41      	subs	r1, r0, r1
 8011ec2:	9200      	str	r2, [sp, #0]
 8011ec4:	a820      	add	r0, sp, #128	; 0x80
 8011ec6:	b21b      	sxth	r3, r3
 8011ec8:	b209      	sxth	r1, r1
 8011eca:	f001 fd8f 	bl	80139ec <lv_area_set>
        lv_circ_next(&cir, &cir_tmp);
 8011ece:	a91d      	add	r1, sp, #116	; 0x74
 8011ed0:	9819      	ldr	r0, [sp, #100]	; 0x64
 8011ed2:	f001 fe4e 	bl	8013b72 <lv_circ_next>
 8011ed6:	f7ff bbda 	b.w	801168e <lv_draw_rect+0x7f6>
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 8011eda:	9b11      	ldr	r3, [sp, #68]	; 0x44
                        aa_opa = antialias_get_opa_circ(seg_size, i, opa);
 8011edc:	9a04      	ldr	r2, [sp, #16]
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 8011ede:	2b01      	cmp	r3, #1
 8011ee0:	f000 808d 	beq.w	8011ffe <lv_draw_rect+0x1166>
                        aa_opa = antialias_get_opa_circ(seg_size, i, opa);
 8011ee4:	4618      	mov	r0, r3
 8011ee6:	f7fe ffb5 	bl	8010e54 <antialias_get_opa_circ>
 8011eea:	4605      	mov	r5, r0
 8011eec:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8011ef0:	9312      	str	r3, [sp, #72]	; 0x48
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 8011ef2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011ef4:	9b07      	ldr	r3, [sp, #28]
 8011ef6:	f9bd 6068 	ldrsh.w	r6, [sp, #104]	; 0x68
 8011efa:	9500      	str	r5, [sp, #0]
 8011efc:	189c      	adds	r4, r3, r2
 8011efe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011f00:	441c      	add	r4, r3
 8011f02:	b224      	sxth	r4, r4
 8011f04:	4631      	mov	r1, r6
 8011f06:	4620      	mov	r0, r4
 8011f08:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8011f0c:	465a      	mov	r2, fp
 8011f0e:	f7fe f80f 	bl	800ff30 <lv_draw_px>
                    lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 8011f12:	9b06      	ldr	r3, [sp, #24]
 8011f14:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011f16:	9500      	str	r5, [sp, #0]
 8011f18:	1a9f      	subs	r7, r3, r2
 8011f1a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011f1c:	1aff      	subs	r7, r7, r3
 8011f1e:	b23f      	sxth	r7, r7
 8011f20:	4631      	mov	r1, r6
 8011f22:	4638      	mov	r0, r7
 8011f24:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8011f28:	465a      	mov	r2, fp
 8011f2a:	f7fe f801 	bl	800ff30 <lv_draw_px>
                    lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 8011f2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011f30:	9500      	str	r5, [sp, #0]
 8011f32:	1e5e      	subs	r6, r3, #1
 8011f34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011f36:	1af6      	subs	r6, r6, r3
 8011f38:	b236      	sxth	r6, r6
 8011f3a:	4631      	mov	r1, r6
 8011f3c:	4638      	mov	r0, r7
 8011f3e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8011f42:	465a      	mov	r2, fp
 8011f44:	f7fd fff4 	bl	800ff30 <lv_draw_px>
                    lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 8011f48:	4631      	mov	r1, r6
 8011f4a:	4620      	mov	r0, r4
 8011f4c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8011f50:	9500      	str	r5, [sp, #0]
 8011f52:	465a      	mov	r2, fp
 8011f54:	f7fd ffec 	bl	800ff30 <lv_draw_px>
                    mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 8011f58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
                    aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 8011f5c:	f8bd 000c 	ldrh.w	r0, [sp, #12]
                    mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 8011f60:	1a9e      	subs	r6, r3, r2
 8011f62:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011f64:	441e      	add	r6, r3
 8011f66:	ebc6 2606 	rsb	r6, r6, r6, lsl #8
 8011f6a:	9b05      	ldr	r3, [sp, #20]
 8011f6c:	fbb6 f6f3 	udiv	r6, r6, r3
 8011f70:	b2f6      	uxtb	r6, r6
                    aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 8011f72:	4632      	mov	r2, r6
 8011f74:	4649      	mov	r1, r9
 8011f76:	f7fe ff25 	bl	8010dc4 <lv_color_mix>
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 8011f7a:	9b07      	ldr	r3, [sp, #28]
 8011f7c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011f7e:	9500      	str	r5, [sp, #0]
 8011f80:	1c5f      	adds	r7, r3, #1
 8011f82:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011f84:	441f      	add	r7, r3
 8011f86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011f88:	4413      	add	r3, r2
 8011f8a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011f8c:	4413      	add	r3, r2
 8011f8e:	b21b      	sxth	r3, r3
 8011f90:	9318      	str	r3, [sp, #96]	; 0x60
 8011f92:	b23f      	sxth	r7, r7
                    aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 8011f94:	4604      	mov	r4, r0
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 8011f96:	4603      	mov	r3, r0
 8011f98:	465a      	mov	r2, fp
 8011f9a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011f9c:	4638      	mov	r0, r7
 8011f9e:	f7fd ffc7 	bl	800ff30 <lv_draw_px>
                    lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 8011fa2:	9b06      	ldr	r3, [sp, #24]
 8011fa4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011fa6:	9500      	str	r5, [sp, #0]
 8011fa8:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8011fac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011fae:	eba8 0803 	sub.w	r8, r8, r3
 8011fb2:	fa0f f888 	sxth.w	r8, r8
 8011fb6:	4623      	mov	r3, r4
 8011fb8:	465a      	mov	r2, fp
 8011fba:	4640      	mov	r0, r8
 8011fbc:	f7fd ffb8 	bl	800ff30 <lv_draw_px>
                    aa_color_ver = lv_color_mix(gcolor, mcolor, mix);
 8011fc0:	4632      	mov	r2, r6
 8011fc2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8011fc6:	4648      	mov	r0, r9
 8011fc8:	f7fe fefc 	bl	8010dc4 <lv_color_mix>
                    lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 8011fcc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011fce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011fd0:	9500      	str	r5, [sp, #0]
 8011fd2:	1a9b      	subs	r3, r3, r2
 8011fd4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011fd6:	1a9b      	subs	r3, r3, r2
 8011fd8:	b21e      	sxth	r6, r3
                    aa_color_ver = lv_color_mix(gcolor, mcolor, mix);
 8011fda:	4604      	mov	r4, r0
                    lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 8011fdc:	4603      	mov	r3, r0
 8011fde:	465a      	mov	r2, fp
 8011fe0:	4631      	mov	r1, r6
 8011fe2:	4640      	mov	r0, r8
 8011fe4:	f7fd ffa4 	bl	800ff30 <lv_draw_px>
                    lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 8011fe8:	4623      	mov	r3, r4
 8011fea:	9500      	str	r5, [sp, #0]
 8011fec:	465a      	mov	r2, fp
 8011fee:	4631      	mov	r1, r6
 8011ff0:	4638      	mov	r0, r7
 8011ff2:	f7fd ff9d 	bl	800ff30 <lv_draw_px>
 8011ff6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011ff8:	3301      	adds	r3, #1
 8011ffa:	9310      	str	r3, [sp, #64]	; 0x40
 8011ffc:	e6d7      	b.n	8011dae <lv_draw_rect+0xf16>
                        aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 8011ffe:	9811      	ldr	r0, [sp, #68]	; 0x44
 8012000:	f7fd ff54 	bl	800feac <lv_draw_aa_get_opa>
 8012004:	9b04      	ldr	r3, [sp, #16]
 8012006:	1a18      	subs	r0, r3, r0
 8012008:	b2c5      	uxtb	r5, r0
 801200a:	e76f      	b.n	8011eec <lv_draw_rect+0x1054>
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
 801200c:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
 8012010:	9b05      	ldr	r3, [sp, #20]
                act_color = lv_color_mix(mcolor, gcolor, mix);
 8012012:	f8bd 000c 	ldrh.w	r0, [sp, #12]
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
 8012016:	1a52      	subs	r2, r2, r1
 8012018:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
                act_color = lv_color_mix(mcolor, gcolor, mix);
 801201c:	4649      	mov	r1, r9
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
 801201e:	fbb2 f2f3 	udiv	r2, r2, r3
                act_color = lv_color_mix(mcolor, gcolor, mix);
 8012022:	b2d2      	uxtb	r2, r2
 8012024:	f7fe fece 	bl	8010dc4 <lv_color_mix>
 8012028:	4602      	mov	r2, r0
 801202a:	f000 be36 	b.w	8012c9a <lv_draw_rect+0x1e02>
                mix       = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
 801202e:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
 8012032:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
                act_color = lv_color_mix(mcolor, gcolor, mix);
 8012036:	f8bd 000c 	ldrh.w	r0, [sp, #12]
                mix       = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
 801203a:	1ad2      	subs	r2, r2, r3
 801203c:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 8012040:	9b05      	ldr	r3, [sp, #20]
 8012042:	fbb2 f2f3 	udiv	r2, r2, r3
                act_color = lv_color_mix(mcolor, gcolor, mix);
 8012046:	4649      	mov	r1, r9
 8012048:	b2d2      	uxtb	r2, r2
 801204a:	f7fe febb 	bl	8010dc4 <lv_color_mix>
 801204e:	4602      	mov	r2, r0
 8012050:	e6d8      	b.n	8011e04 <lv_draw_rect+0xf6c>
                mix       = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 8012052:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 8012056:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
                act_color = lv_color_mix(mcolor, gcolor, mix);
 801205a:	f8bd 000c 	ldrh.w	r0, [sp, #12]
                mix       = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 801205e:	1ad2      	subs	r2, r2, r3
 8012060:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 8012064:	9b05      	ldr	r3, [sp, #20]
 8012066:	fbb2 f2f3 	udiv	r2, r2, r3
                act_color = lv_color_mix(mcolor, gcolor, mix);
 801206a:	4649      	mov	r1, r9
 801206c:	b2d2      	uxtb	r2, r2
 801206e:	f7fe fea9 	bl	8010dc4 <lv_color_mix>
 8012072:	4602      	mov	r2, r0
 8012074:	e6d3      	b.n	8011e1e <lv_draw_rect+0xf86>
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
 8012076:	f9bd 309a 	ldrsh.w	r3, [sp, #154]	; 0x9a
 801207a:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
                act_color = lv_color_mix(mcolor, gcolor, mix);
 801207e:	f8bd 000c 	ldrh.w	r0, [sp, #12]
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
 8012082:	1ad2      	subs	r2, r2, r3
 8012084:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 8012088:	9b05      	ldr	r3, [sp, #20]
 801208a:	fbb2 f2f3 	udiv	r2, r2, r3
                act_color = lv_color_mix(mcolor, gcolor, mix);
 801208e:	4649      	mov	r1, r9
 8012090:	b2d2      	uxtb	r2, r2
 8012092:	f7fe fe97 	bl	8010dc4 <lv_color_mix>
 8012096:	4602      	mov	r2, r0
 8012098:	e6d0      	b.n	8011e3c <lv_draw_rect+0xfa4>
        mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
 801209a:	f9bd 3082 	ldrsh.w	r3, [sp, #130]	; 0x82
 801209e:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
        act_color = lv_color_mix(mcolor, gcolor, mix);
 80120a2:	f8bd 000c 	ldrh.w	r0, [sp, #12]
        mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
 80120a6:	1ad2      	subs	r2, r2, r3
 80120a8:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 80120ac:	9b05      	ldr	r3, [sp, #20]
 80120ae:	fbb2 f2f3 	udiv	r2, r2, r3
        act_color = lv_color_mix(mcolor, gcolor, mix);
 80120b2:	4649      	mov	r1, r9
 80120b4:	b2d2      	uxtb	r2, r2
 80120b6:	f7fe fe85 	bl	8010dc4 <lv_color_mix>
 80120ba:	4602      	mov	r2, r0
 80120bc:	f7ff baf3 	b.w	80116a6 <lv_draw_rect+0x80e>
            mix       = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
 80120c0:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
            act_color = lv_color_mix(mcolor, gcolor, mix);
 80120c4:	f8bd 000c 	ldrh.w	r0, [sp, #12]
            mix       = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
 80120c8:	1ad2      	subs	r2, r2, r3
 80120ca:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 80120ce:	9b05      	ldr	r3, [sp, #20]
 80120d0:	fbb2 f2f3 	udiv	r2, r2, r3
            act_color = lv_color_mix(mcolor, gcolor, mix);
 80120d4:	4649      	mov	r1, r9
 80120d6:	b2d2      	uxtb	r2, r2
 80120d8:	f7fe fe74 	bl	8010dc4 <lv_color_mix>
 80120dc:	4602      	mov	r2, r0
 80120de:	f7ff baf3 	b.w	80116c8 <lv_draw_rect+0x830>
        mix       = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 80120e2:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 80120e6:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
        act_color = lv_color_mix(mcolor, gcolor, mix);
 80120ea:	f8bd 000c 	ldrh.w	r0, [sp, #12]
        mix       = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 80120ee:	1ad2      	subs	r2, r2, r3
 80120f0:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 80120f4:	9b05      	ldr	r3, [sp, #20]
 80120f6:	fbb2 f2f3 	udiv	r2, r2, r3
        act_color = lv_color_mix(mcolor, gcolor, mix);
 80120fa:	4649      	mov	r1, r9
 80120fc:	b2d2      	uxtb	r2, r2
 80120fe:	f7fe fe61 	bl	8010dc4 <lv_color_mix>
 8012102:	4602      	mov	r2, r0
 8012104:	f7ff baeb 	b.w	80116de <lv_draw_rect+0x846>
            mix       = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
 8012108:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
            act_color = lv_color_mix(mcolor, gcolor, mix);
 801210c:	f8bd 000c 	ldrh.w	r0, [sp, #12]
            mix       = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
 8012110:	1ad2      	subs	r2, r2, r3
 8012112:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 8012116:	9b05      	ldr	r3, [sp, #20]
 8012118:	fbb2 f2f3 	udiv	r2, r2, r3
            act_color = lv_color_mix(mcolor, gcolor, mix);
 801211c:	4649      	mov	r1, r9
 801211e:	b2d2      	uxtb	r2, r2
 8012120:	f7fe fe50 	bl	8010dc4 <lv_color_mix>
 8012124:	4602      	mov	r2, r0
 8012126:	f7ff baeb 	b.w	8011700 <lv_draw_rect+0x868>
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 801212a:	9a04      	ldr	r2, [sp, #16]
 801212c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801212e:	f7fd febd 	bl	800feac <lv_draw_aa_get_opa>
 8012132:	9b04      	ldr	r3, [sp, #16]
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 8012134:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012136:	f9bd 5058 	ldrsh.w	r5, [sp, #88]	; 0x58
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 801213a:	1a18      	subs	r0, r3, r0
 801213c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8012140:	9311      	str	r3, [sp, #68]	; 0x44
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 8012142:	9b07      	ldr	r3, [sp, #28]
 8012144:	189c      	adds	r4, r3, r2
 8012146:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012148:	441c      	add	r4, r3
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 801214a:	b2c6      	uxtb	r6, r0
 801214c:	b224      	sxth	r4, r4
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 801214e:	4629      	mov	r1, r5
 8012150:	4620      	mov	r0, r4
 8012152:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8012156:	9600      	str	r6, [sp, #0]
 8012158:	465a      	mov	r2, fp
 801215a:	f7fd fee9 	bl	800ff30 <lv_draw_px>
            lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 801215e:	9b06      	ldr	r3, [sp, #24]
 8012160:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012162:	9600      	str	r6, [sp, #0]
 8012164:	1a9f      	subs	r7, r3, r2
 8012166:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012168:	1aff      	subs	r7, r7, r3
 801216a:	b23f      	sxth	r7, r7
 801216c:	4629      	mov	r1, r5
 801216e:	4638      	mov	r0, r7
 8012170:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8012174:	465a      	mov	r2, fp
 8012176:	f7fd fedb 	bl	800ff30 <lv_draw_px>
            lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 801217a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801217c:	9600      	str	r6, [sp, #0]
 801217e:	1e5d      	subs	r5, r3, #1
 8012180:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012182:	1aed      	subs	r5, r5, r3
 8012184:	b22d      	sxth	r5, r5
 8012186:	4629      	mov	r1, r5
 8012188:	4638      	mov	r0, r7
 801218a:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801218e:	465a      	mov	r2, fp
 8012190:	f7fd fece 	bl	800ff30 <lv_draw_px>
            lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 8012194:	4629      	mov	r1, r5
 8012196:	4620      	mov	r0, r4
 8012198:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801219c:	9600      	str	r6, [sp, #0]
 801219e:	465a      	mov	r2, fp
 80121a0:	f7fd fec6 	bl	800ff30 <lv_draw_px>
            mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 80121a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
            aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 80121a8:	f8bd 000c 	ldrh.w	r0, [sp, #12]
            mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 80121ac:	1a9d      	subs	r5, r3, r2
 80121ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80121b0:	441d      	add	r5, r3
 80121b2:	ebc5 2505 	rsb	r5, r5, r5, lsl #8
 80121b6:	9b05      	ldr	r3, [sp, #20]
 80121b8:	fbb5 f5f3 	udiv	r5, r5, r3
 80121bc:	b2ed      	uxtb	r5, r5
            aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 80121be:	462a      	mov	r2, r5
 80121c0:	4649      	mov	r1, r9
 80121c2:	f7fe fdff 	bl	8010dc4 <lv_color_mix>
            lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, aa_color_ver,
 80121c6:	9b07      	ldr	r3, [sp, #28]
 80121c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80121ca:	9600      	str	r6, [sp, #0]
 80121cc:	1c5f      	adds	r7, r3, #1
 80121ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80121d0:	441f      	add	r7, r3
 80121d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80121d4:	4413      	add	r3, r2
 80121d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80121d8:	4413      	add	r3, r2
 80121da:	b21b      	sxth	r3, r3
 80121dc:	9315      	str	r3, [sp, #84]	; 0x54
 80121de:	b23f      	sxth	r7, r7
            aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 80121e0:	4604      	mov	r4, r0
            lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, aa_color_ver,
 80121e2:	4603      	mov	r3, r0
 80121e4:	465a      	mov	r2, fp
 80121e6:	9915      	ldr	r1, [sp, #84]	; 0x54
 80121e8:	4638      	mov	r0, r7
 80121ea:	f7fd fea1 	bl	800ff30 <lv_draw_px>
            lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask, aa_color_ver,
 80121ee:	9b06      	ldr	r3, [sp, #24]
 80121f0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80121f2:	9915      	ldr	r1, [sp, #84]	; 0x54
 80121f4:	9600      	str	r6, [sp, #0]
 80121f6:	3b01      	subs	r3, #1
 80121f8:	1a9b      	subs	r3, r3, r2
 80121fa:	b21b      	sxth	r3, r3
 80121fc:	9314      	str	r3, [sp, #80]	; 0x50
 80121fe:	465a      	mov	r2, fp
 8012200:	4623      	mov	r3, r4
 8012202:	9814      	ldr	r0, [sp, #80]	; 0x50
 8012204:	f7fd fe94 	bl	800ff30 <lv_draw_px>
            aa_color_ver = lv_color_mix(gcolor, mcolor, mix);
 8012208:	462a      	mov	r2, r5
 801220a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801220e:	4648      	mov	r0, r9
 8012210:	f7fe fdd8 	bl	8010dc4 <lv_color_mix>
            lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask, aa_color_ver,
 8012214:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012216:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012218:	9600      	str	r6, [sp, #0]
 801221a:	1a9b      	subs	r3, r3, r2
 801221c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801221e:	1a9b      	subs	r3, r3, r2
 8012220:	b21d      	sxth	r5, r3
            aa_color_ver = lv_color_mix(gcolor, mcolor, mix);
 8012222:	4604      	mov	r4, r0
            lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask, aa_color_ver,
 8012224:	4603      	mov	r3, r0
 8012226:	465a      	mov	r2, fp
 8012228:	4629      	mov	r1, r5
 801222a:	9814      	ldr	r0, [sp, #80]	; 0x50
 801222c:	f7fd fe80 	bl	800ff30 <lv_draw_px>
            lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask, aa_color_ver,
 8012230:	4623      	mov	r3, r4
 8012232:	9600      	str	r6, [sp, #0]
 8012234:	465a      	mov	r2, fp
 8012236:	4629      	mov	r1, r5
 8012238:	4638      	mov	r0, r7
 801223a:	f7fd fe79 	bl	800ff30 <lv_draw_px>
 801223e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012240:	3301      	adds	r3, #1
 8012242:	9310      	str	r3, [sp, #64]	; 0x40
 8012244:	f7ff bab8 	b.w	80117b8 <lv_draw_rect+0x920>
    corner_size++;
 8012248:	3301      	adds	r3, #1
 801224a:	b29b      	uxth	r3, r3
 801224c:	9303      	str	r3, [sp, #12]
    if(part & LV_BORDER_TOP)
 801224e:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 8012252:	9305      	str	r3, [sp, #20]
 8012254:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 8012258:	2a00      	cmp	r2, #0
 801225a:	f000 8143 	beq.w	80124e4 <lv_draw_rect+0x164c>
        work_area.y1 = coords->y1 + corner_size;
 801225e:	9a03      	ldr	r2, [sp, #12]
 8012260:	4413      	add	r3, r2
        work_area.y1 = coords->y1 + radius;
 8012262:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
    if(part & LV_BORDER_BOTTOM)
 8012266:	f015 0301 	ands.w	r3, r5, #1
        work_area.y2 = coords->y2 - corner_size;
 801226a:	bf18      	it	ne
 801226c:	9a03      	ldrne	r2, [sp, #12]
    if(part & LV_BORDER_BOTTOM)
 801226e:	9306      	str	r3, [sp, #24]
 8012270:	f8ba 3006 	ldrh.w	r3, [sl, #6]
        work_area.y2 = coords->y2 - corner_size;
 8012274:	bf14      	ite	ne
 8012276:	1a9b      	subne	r3, r3, r2
        work_area.y2 = coords->y2 - radius;
 8012278:	eba3 0309 	subeq.w	r3, r3, r9
    if(part & LV_BORDER_LEFT) {
 801227c:	076a      	lsls	r2, r5, #29
        work_area.y2 = coords->y2 - radius;
 801227e:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
    if(part & LV_BORDER_LEFT) {
 8012282:	d50c      	bpl.n	801229e <lv_draw_rect+0x1406>
        work_area.x1 = coords->x1;
 8012284:	f9ba 3000 	ldrsh.w	r3, [sl]
 8012288:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
        work_area.x2 = work_area.x1 + bwidth;
 801228c:	4433      	add	r3, r6
 801228e:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
        lv_draw_fill(&work_area, mask, color, opa);
 8012292:	463a      	mov	r2, r7
 8012294:	4623      	mov	r3, r4
 8012296:	4659      	mov	r1, fp
 8012298:	a826      	add	r0, sp, #152	; 0x98
 801229a:	f7fd fe98 	bl	800ffce <lv_draw_fill>
    if(part & LV_BORDER_RIGHT) {
 801229e:	072b      	lsls	r3, r5, #28
 80122a0:	d50c      	bpl.n	80122bc <lv_draw_rect+0x1424>
        work_area.x2 = coords->x2;
 80122a2:	f9ba 3004 	ldrsh.w	r3, [sl, #4]
 80122a6:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
        work_area.x1 = work_area.x2 - bwidth;
 80122aa:	a828      	add	r0, sp, #160	; 0xa0
 80122ac:	1b9b      	subs	r3, r3, r6
 80122ae:	f820 3d08 	strh.w	r3, [r0, #-8]!
        lv_draw_fill(&work_area, mask, color, opa);
 80122b2:	463a      	mov	r2, r7
 80122b4:	4623      	mov	r3, r4
 80122b6:	4659      	mov	r1, fp
 80122b8:	f7fd fe89 	bl	800ffce <lv_draw_fill>
    work_area.x1 = coords->x1 + corner_size - length_corr;
 80122bc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80122c0:	9a03      	ldr	r2, [sp, #12]
 80122c2:	f8ba 1000 	ldrh.w	r1, [sl]
 80122c6:	1ad2      	subs	r2, r2, r3
 80122c8:	440a      	add	r2, r1
 80122ca:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
    work_area.x2 = coords->x2 - corner_size + length_corr;
 80122ce:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 80122d2:	4413      	add	r3, r2
 80122d4:	9a03      	ldr	r2, [sp, #12]
 80122d6:	1a9b      	subs	r3, r3, r2
 80122d8:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
    if(part & LV_BORDER_TOP) {
 80122dc:	9b05      	ldr	r3, [sp, #20]
 80122de:	b163      	cbz	r3, 80122fa <lv_draw_rect+0x1462>
        work_area.y1 = coords->y1;
 80122e0:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
 80122e4:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
        work_area.y2 = coords->y1 + bwidth;
 80122e8:	4433      	add	r3, r6
 80122ea:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
        lv_draw_fill(&work_area, mask, color, opa);
 80122ee:	463a      	mov	r2, r7
 80122f0:	4623      	mov	r3, r4
 80122f2:	4659      	mov	r1, fp
 80122f4:	a826      	add	r0, sp, #152	; 0x98
 80122f6:	f7fd fe6a 	bl	800ffce <lv_draw_fill>
    if(part & LV_BORDER_BOTTOM) {
 80122fa:	9b06      	ldr	r3, [sp, #24]
 80122fc:	b163      	cbz	r3, 8012318 <lv_draw_rect+0x1480>
        work_area.y2 = coords->y2;
 80122fe:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 8012302:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
        work_area.y1 = work_area.y2 - bwidth;
 8012306:	1b9b      	subs	r3, r3, r6
 8012308:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
        lv_draw_fill(&work_area, mask, color, opa);
 801230c:	463a      	mov	r2, r7
 801230e:	4623      	mov	r3, r4
 8012310:	4659      	mov	r1, fp
 8012312:	a826      	add	r0, sp, #152	; 0x98
 8012314:	f7fd fe5b 	bl	800ffce <lv_draw_fill>
    if(length_corr != 0) {
 8012318:	9b04      	ldr	r3, [sp, #16]
 801231a:	2b00      	cmp	r3, #0
 801231c:	d07b      	beq.n	8012416 <lv_draw_rect+0x157e>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 801231e:	f005 0306 	and.w	r3, r5, #6
 8012322:	2b06      	cmp	r3, #6
 8012324:	d119      	bne.n	801235a <lv_draw_rect+0x14c2>
            work_area.x1 = coords->x1;
 8012326:	f9ba 2000 	ldrsh.w	r2, [sl]
 801232a:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
            work_area.x2 = coords->x1 + radius + aa;
 801232e:	fa1f f388 	uxth.w	r3, r8
 8012332:	441a      	add	r2, r3
 8012334:	444a      	add	r2, r9
 8012336:	f8ad 209c 	strh.w	r2, [sp, #156]	; 0x9c
            work_area.y1 = coords->y1 + radius + 1 + aa;
 801233a:	f8ba 2002 	ldrh.w	r2, [sl, #2]
 801233e:	1c51      	adds	r1, r2, #1
 8012340:	440b      	add	r3, r1
 8012342:	444b      	add	r3, r9
            work_area.y2 = coords->y1 + bwidth;
 8012344:	4432      	add	r2, r6
            work_area.y1 = coords->y1 + radius + 1 + aa;
 8012346:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            work_area.y2 = coords->y1 + bwidth;
 801234a:	f8ad 209e 	strh.w	r2, [sp, #158]	; 0x9e
            lv_draw_fill(&work_area, mask, color, opa);
 801234e:	4623      	mov	r3, r4
 8012350:	463a      	mov	r2, r7
 8012352:	4659      	mov	r1, fp
 8012354:	a826      	add	r0, sp, #152	; 0x98
 8012356:	f7fd fe3a 	bl	800ffce <lv_draw_fill>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 801235a:	f005 030a 	and.w	r3, r5, #10
 801235e:	2b0a      	cmp	r3, #10
 8012360:	d11a      	bne.n	8012398 <lv_draw_rect+0x1500>
            work_area.x1 = coords->x2 - radius - aa;
 8012362:	f9ba 1004 	ldrsh.w	r1, [sl, #4]
            work_area.x2 = coords->x2;
 8012366:	f8ad 109c 	strh.w	r1, [sp, #156]	; 0x9c
            work_area.x1 = coords->x2 - radius - aa;
 801236a:	fa1f f388 	uxth.w	r3, r8
 801236e:	eba1 0209 	sub.w	r2, r1, r9
 8012372:	1ad2      	subs	r2, r2, r3
 8012374:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
            work_area.y1 = coords->y1 + radius + 1 + aa;
 8012378:	f8ba 2002 	ldrh.w	r2, [sl, #2]
 801237c:	1c51      	adds	r1, r2, #1
 801237e:	440b      	add	r3, r1
 8012380:	444b      	add	r3, r9
            work_area.y2 = coords->y1 + bwidth;
 8012382:	4432      	add	r2, r6
            work_area.y1 = coords->y1 + radius + 1 + aa;
 8012384:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            work_area.y2 = coords->y1 + bwidth;
 8012388:	f8ad 209e 	strh.w	r2, [sp, #158]	; 0x9e
            lv_draw_fill(&work_area, mask, color, opa);
 801238c:	4623      	mov	r3, r4
 801238e:	463a      	mov	r2, r7
 8012390:	4659      	mov	r1, fp
 8012392:	a826      	add	r0, sp, #152	; 0x98
 8012394:	f7fd fe1b 	bl	800ffce <lv_draw_fill>
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 8012398:	f005 0305 	and.w	r3, r5, #5
 801239c:	2b05      	cmp	r3, #5
 801239e:	d11a      	bne.n	80123d6 <lv_draw_rect+0x153e>
            work_area.x1 = coords->x1;
 80123a0:	f9ba 2000 	ldrsh.w	r2, [sl]
            work_area.y1 = coords->y2 - bwidth;
 80123a4:	f8ba 3006 	ldrh.w	r3, [sl, #6]
            work_area.x1 = coords->x1;
 80123a8:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
            work_area.x2 = coords->x1 + radius + aa;
 80123ac:	fa1f f188 	uxth.w	r1, r8
 80123b0:	440a      	add	r2, r1
 80123b2:	444a      	add	r2, r9
            work_area.y2 = coords->y2 - radius - 1 - aa;
 80123b4:	43c9      	mvns	r1, r1
            work_area.x2 = coords->x1 + radius + aa;
 80123b6:	f8ad 209c 	strh.w	r2, [sp, #156]	; 0x9c
            work_area.y1 = coords->y2 - bwidth;
 80123ba:	1b9a      	subs	r2, r3, r6
            work_area.y2 = coords->y2 - radius - 1 - aa;
 80123bc:	440b      	add	r3, r1
 80123be:	eba3 0309 	sub.w	r3, r3, r9
            work_area.y1 = coords->y2 - bwidth;
 80123c2:	f8ad 209a 	strh.w	r2, [sp, #154]	; 0x9a
            work_area.y2 = coords->y2 - radius - 1 - aa;
 80123c6:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&work_area, mask, color, opa);
 80123ca:	463a      	mov	r2, r7
 80123cc:	4623      	mov	r3, r4
 80123ce:	4659      	mov	r1, fp
 80123d0:	a826      	add	r0, sp, #152	; 0x98
 80123d2:	f7fd fdfc 	bl	800ffce <lv_draw_fill>
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 80123d6:	f005 0309 	and.w	r3, r5, #9
 80123da:	2b09      	cmp	r3, #9
 80123dc:	d11b      	bne.n	8012416 <lv_draw_rect+0x157e>
            work_area.x1 = coords->x2 - radius - aa;
 80123de:	f9ba 1004 	ldrsh.w	r1, [sl, #4]
            work_area.x2 = coords->x2;
 80123e2:	f8ad 109c 	strh.w	r1, [sp, #156]	; 0x9c
            work_area.x1 = coords->x2 - radius - aa;
 80123e6:	eba1 0309 	sub.w	r3, r1, r9
 80123ea:	fa1f f288 	uxth.w	r2, r8
 80123ee:	1a9b      	subs	r3, r3, r2
 80123f0:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            work_area.y1 = coords->y2 - bwidth;
 80123f4:	f8ba 3006 	ldrh.w	r3, [sl, #6]
            work_area.y2 = coords->y2 - radius - 1 - aa;
 80123f8:	43d2      	mvns	r2, r2
            work_area.y1 = coords->y2 - bwidth;
 80123fa:	1b9e      	subs	r6, r3, r6
            work_area.y2 = coords->y2 - radius - 1 - aa;
 80123fc:	4413      	add	r3, r2
 80123fe:	eba3 0909 	sub.w	r9, r3, r9
            lv_draw_fill(&work_area, mask, color, opa);
 8012402:	463a      	mov	r2, r7
 8012404:	4623      	mov	r3, r4
 8012406:	4659      	mov	r1, fp
 8012408:	a826      	add	r0, sp, #152	; 0x98
            work_area.y1 = coords->y2 - bwidth;
 801240a:	f8ad 609a 	strh.w	r6, [sp, #154]	; 0x9a
            work_area.y2 = coords->y2 - radius - 1 - aa;
 801240e:	f8ad 909e 	strh.w	r9, [sp, #158]	; 0x9e
            lv_draw_fill(&work_area, mask, color, opa);
 8012412:	f7fd fddc 	bl	800ffce <lv_draw_fill>
    if(style->body.radius == 0) {
 8012416:	9b02      	ldr	r3, [sp, #8]
 8012418:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801241c:	2b00      	cmp	r3, #0
 801241e:	f47f aaef 	bne.w	8011a00 <lv_draw_rect+0xb68>
        if(part & (LV_BORDER_TOP | LV_BORDER_LEFT)) {
 8012422:	f015 0f06 	tst.w	r5, #6
 8012426:	d015      	beq.n	8012454 <lv_draw_rect+0x15bc>
            work_area.x1 = coords->x1;
 8012428:	f9ba 2000 	ldrsh.w	r2, [sl]
 801242c:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
            work_area.x2 = coords->x1 + aa;
 8012430:	fa1f f388 	uxth.w	r3, r8
 8012434:	441a      	add	r2, r3
 8012436:	f8ad 209c 	strh.w	r2, [sp, #156]	; 0x9c
            work_area.y1 = coords->y1;
 801243a:	f9ba 2002 	ldrsh.w	r2, [sl, #2]
 801243e:	f8ad 209a 	strh.w	r2, [sp, #154]	; 0x9a
            work_area.y2 = coords->y1 + aa;
 8012442:	4413      	add	r3, r2
 8012444:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&work_area, mask, color, opa);
 8012448:	463a      	mov	r2, r7
 801244a:	4623      	mov	r3, r4
 801244c:	4659      	mov	r1, fp
 801244e:	a826      	add	r0, sp, #152	; 0x98
 8012450:	f7fd fdbd 	bl	800ffce <lv_draw_fill>
        if(part & (LV_BORDER_TOP | LV_BORDER_RIGHT)) {
 8012454:	f015 0f0a 	tst.w	r5, #10
 8012458:	d015      	beq.n	8012486 <lv_draw_rect+0x15ee>
            work_area.x1 = coords->x2 - aa;
 801245a:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
            work_area.x2 = coords->x2;
 801245e:	f8ad 209c 	strh.w	r2, [sp, #156]	; 0x9c
            work_area.x1 = coords->x2 - aa;
 8012462:	fa1f f388 	uxth.w	r3, r8
 8012466:	1ad1      	subs	r1, r2, r3
            work_area.y1 = coords->y1;
 8012468:	f9ba 2002 	ldrsh.w	r2, [sl, #2]
            work_area.x1 = coords->x2 - aa;
 801246c:	f8ad 1098 	strh.w	r1, [sp, #152]	; 0x98
            work_area.y2 = coords->y1 + aa;
 8012470:	4413      	add	r3, r2
            work_area.y1 = coords->y1;
 8012472:	f8ad 209a 	strh.w	r2, [sp, #154]	; 0x9a
            work_area.y2 = coords->y1 + aa;
 8012476:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&work_area, mask, color, opa);
 801247a:	463a      	mov	r2, r7
 801247c:	4623      	mov	r3, r4
 801247e:	4659      	mov	r1, fp
 8012480:	a826      	add	r0, sp, #152	; 0x98
 8012482:	f7fd fda4 	bl	800ffce <lv_draw_fill>
        if(part & (LV_BORDER_BOTTOM | LV_BORDER_LEFT)) {
 8012486:	f015 0f05 	tst.w	r5, #5
 801248a:	d015      	beq.n	80124b8 <lv_draw_rect+0x1620>
            work_area.x1 = coords->x1;
 801248c:	f9ba 2000 	ldrsh.w	r2, [sl]
 8012490:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
            work_area.x2 = coords->x1 + aa;
 8012494:	fa1f f388 	uxth.w	r3, r8
 8012498:	441a      	add	r2, r3
 801249a:	f8ad 209c 	strh.w	r2, [sp, #156]	; 0x9c
            work_area.y1 = coords->y2 - aa;
 801249e:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
            work_area.y2 = coords->y2;
 80124a2:	f8ad 209e 	strh.w	r2, [sp, #158]	; 0x9e
            work_area.y1 = coords->y2 - aa;
 80124a6:	1ad3      	subs	r3, r2, r3
 80124a8:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            lv_draw_fill(&work_area, mask, color, opa);
 80124ac:	463a      	mov	r2, r7
 80124ae:	4623      	mov	r3, r4
 80124b0:	4659      	mov	r1, fp
 80124b2:	a826      	add	r0, sp, #152	; 0x98
 80124b4:	f7fd fd8b 	bl	800ffce <lv_draw_fill>
        if(part & (LV_BORDER_BOTTOM | LV_BORDER_RIGHT)) {
 80124b8:	f015 0f09 	tst.w	r5, #9
 80124bc:	f43f aaa0 	beq.w	8011a00 <lv_draw_rect+0xb68>
            work_area.x1 = coords->x2 - aa;
 80124c0:	f9ba 3004 	ldrsh.w	r3, [sl, #4]
            work_area.x2 = coords->x2;
 80124c4:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            work_area.x1 = coords->x2 - aa;
 80124c8:	fa1f f888 	uxth.w	r8, r8
 80124cc:	eba3 0208 	sub.w	r2, r3, r8
            work_area.y1 = coords->y2 - aa;
 80124d0:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
            work_area.x1 = coords->x2 - aa;
 80124d4:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
            work_area.y1 = coords->y2 - aa;
 80124d8:	eba3 0808 	sub.w	r8, r3, r8
 80124dc:	f8ad 809a 	strh.w	r8, [sp, #154]	; 0x9a
 80124e0:	f7ff ba86 	b.w	80119f0 <lv_draw_rect+0xb58>
        work_area.y1 = coords->y1 + radius;
 80124e4:	4403      	add	r3, r0
 80124e6:	e6bc      	b.n	8012262 <lv_draw_rect+0x13ca>
    if(aa) bwidth--; /*Because of anti-aliasing the border seems one pixel ticker*/
 80124e8:	3c02      	subs	r4, #2
 80124ea:	f7ff baaf 	b.w	8011a4c <lv_draw_rect+0xbb4>
        if(cir_in.y < cir_in.x) {
 80124ee:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 80124f2:	f9bd 1092 	ldrsh.w	r1, [sp, #146]	; 0x92
 80124f6:	4299      	cmp	r1, r3
 80124f8:	f280 8140 	bge.w	801277c <lv_draw_rect+0x18e4>
            act_w1 = cir_out.x - cir_in.x;
 80124fc:	1ad3      	subs	r3, r2, r3
 80124fe:	b21b      	sxth	r3, r3
 8012500:	930b      	str	r3, [sp, #44]	; 0x2c
            act_w2 = act_w1 - 1;
 8012502:	930d      	str	r3, [sp, #52]	; 0x34
        if(aa) {
 8012504:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012506:	b393      	cbz	r3, 801256e <lv_draw_rect+0x16d6>
            if(out_x_last != cir_out.x) {
 8012508:	454a      	cmp	r2, r9
 801250a:	d014      	beq.n	8012536 <lv_draw_rect+0x169e>
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 801250c:	9b09      	ldr	r3, [sp, #36]	; 0x24
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 801250e:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 8012512:	fa1f f789 	uxth.w	r7, r9
 8012516:	3301      	adds	r3, #1
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 8012518:	ebaa 0805 	sub.w	r8, sl, r5
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 801251c:	18fb      	adds	r3, r7, r3
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 801251e:	fa0f f888 	sxth.w	r8, r8
 8012522:	2600      	movs	r6, #0
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 8012524:	930f      	str	r3, [sp, #60]	; 0x3c
 8012526:	b231      	sxth	r1, r6
                for(i = 0; i < seg_size; i++) {
 8012528:	4588      	cmp	r8, r1
 801252a:	f300 812f 	bgt.w	801278c <lv_draw_rect+0x18f4>
                out_x_last      = cir_out.x;
 801252e:	f9bd 9088 	ldrsh.w	r9, [sp, #136]	; 0x88
 8012532:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
            if(in_x_last != cir_in.x) {
 8012536:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 801253a:	9a08      	ldr	r2, [sp, #32]
 801253c:	4293      	cmp	r3, r2
 801253e:	d016      	beq.n	801256e <lv_draw_rect+0x16d6>
                in_y_seg_end        = cir_out.y;
 8012540:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
                lv_coord_t seg_size = in_y_seg_end - in_y_seg_start;
 8012544:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
                in_y_seg_end        = cir_out.y;
 8012548:	9313      	str	r3, [sp, #76]	; 0x4c
                lv_coord_t seg_size = in_y_seg_end - in_y_seg_start;
 801254a:	eba3 0a06 	sub.w	sl, r3, r6
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 801254e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012550:	4413      	add	r3, r2
 8012552:	b21b      	sxth	r3, r3
                lv_coord_t seg_size = in_y_seg_end - in_y_seg_start;
 8012554:	fa0f fa8a 	sxth.w	sl, sl
 8012558:	2400      	movs	r4, #0
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 801255a:	9315      	str	r3, [sp, #84]	; 0x54
 801255c:	b221      	sxth	r1, r4
                for(i = 0; i < seg_size; i++) {
 801255e:	458a      	cmp	sl, r1
 8012560:	f300 81b4 	bgt.w	80128cc <lv_draw_rect+0x1a34>
                in_x_last      = cir_in.x;
 8012564:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 8012568:	9308      	str	r3, [sp, #32]
                in_y_seg_start = in_y_seg_end;
 801256a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801256c:	930c      	str	r3, [sp, #48]	; 0x30
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 801256e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012570:	2b09      	cmp	r3, #9
 8012572:	d135      	bne.n	80125e0 <lv_draw_rect+0x1748>
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT1_X(cir_out) - act_w2;
 8012574:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012576:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 801257a:	4413      	add	r3, r2
 801257c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801257e:	b29b      	uxth	r3, r3
 8012580:	1a9a      	subs	r2, r3, r2
 8012582:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
            circ_area.x2 = rb_origo.x + LV_CIRC_OCT1_X(cir_out);
 8012586:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
 801258a:	9a04      	ldr	r2, [sp, #16]
 801258c:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
 8012590:	4413      	add	r3, r2
 8012592:	b21b      	sxth	r3, r3
 8012594:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            circ_area.y2 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
 8012598:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&circ_area, mask, color, opa);
 801259c:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80125a0:	9b07      	ldr	r3, [sp, #28]
 80125a2:	4659      	mov	r1, fp
 80125a4:	a826      	add	r0, sp, #152	; 0x98
 80125a6:	f7fd fd12 	bl	800ffce <lv_draw_fill>
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
 80125aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80125ac:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
 80125b0:	4413      	add	r3, r2
 80125b2:	b21b      	sxth	r3, r3
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out) - act_w1;
 80125b4:	9a04      	ldr	r2, [sp, #16]
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
 80125b6:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            circ_area.x2 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
 80125ba:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out) - act_w1;
 80125be:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 80125c2:	4413      	add	r3, r2
 80125c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80125c6:	b29b      	uxth	r3, r3
 80125c8:	1a9a      	subs	r2, r3, r2
 80125ca:	f8ad 209a 	strh.w	r2, [sp, #154]	; 0x9a
            circ_area.y2 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out);
 80125ce:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&circ_area, mask, color, opa);
 80125d2:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80125d6:	9b07      	ldr	r3, [sp, #28]
 80125d8:	4659      	mov	r1, fp
 80125da:	a826      	add	r0, sp, #152	; 0x98
 80125dc:	f7fd fcf7 	bl	800ffce <lv_draw_fill>
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 80125e0:	9b05      	ldr	r3, [sp, #20]
 80125e2:	f003 0305 	and.w	r3, r3, #5
 80125e6:	2b05      	cmp	r3, #5
 80125e8:	d135      	bne.n	8012656 <lv_draw_rect+0x17be>
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
 80125ea:	9a06      	ldr	r2, [sp, #24]
 80125ec:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
 80125f0:	1ad3      	subs	r3, r2, r3
 80125f2:	b21b      	sxth	r3, r3
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out) - act_w2;
 80125f4:	9a04      	ldr	r2, [sp, #16]
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
 80125f6:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            circ_area.x2 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
 80125fa:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out) - act_w2;
 80125fe:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 8012602:	4413      	add	r3, r2
 8012604:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012606:	b29b      	uxth	r3, r3
 8012608:	1a9a      	subs	r2, r3, r2
 801260a:	f8ad 209a 	strh.w	r2, [sp, #154]	; 0x9a
            circ_area.y2 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out);
 801260e:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&circ_area, mask, color, opa);
 8012612:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8012616:	9b07      	ldr	r3, [sp, #28]
 8012618:	4659      	mov	r1, fp
 801261a:	a826      	add	r0, sp, #152	; 0x98
 801261c:	f7fd fcd7 	bl	800ffce <lv_draw_fill>
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT4_X(cir_out);
 8012620:	9a06      	ldr	r2, [sp, #24]
 8012622:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 8012626:	1ad3      	subs	r3, r2, r3
            circ_area.x2 = lb_origo.x + LV_CIRC_OCT4_X(cir_out) + act_w1;
 8012628:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT4_X(cir_out);
 801262a:	b29b      	uxth	r3, r3
 801262c:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            circ_area.x2 = lb_origo.x + LV_CIRC_OCT4_X(cir_out) + act_w1;
 8012630:	4413      	add	r3, r2
 8012632:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT4_Y(cir_out);
 8012636:	9a04      	ldr	r2, [sp, #16]
 8012638:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
 801263c:	4413      	add	r3, r2
 801263e:	b21b      	sxth	r3, r3
 8012640:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            circ_area.y2 = lb_origo.y + LV_CIRC_OCT4_Y(cir_out);
 8012644:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&circ_area, mask, color, opa);
 8012648:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801264c:	9b07      	ldr	r3, [sp, #28]
 801264e:	4659      	mov	r1, fp
 8012650:	a826      	add	r0, sp, #152	; 0x98
 8012652:	f7fd fcbc 	bl	800ffce <lv_draw_fill>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 8012656:	9b05      	ldr	r3, [sp, #20]
 8012658:	f003 0306 	and.w	r3, r3, #6
 801265c:	2b06      	cmp	r3, #6
 801265e:	d13b      	bne.n	80126d8 <lv_draw_rect+0x1840>
            if(lb_origo.y + LV_CIRC_OCT4_Y(cir_out) > lt_origo.y + LV_CIRC_OCT5_Y(cir_out)) {
 8012660:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
 8012664:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012666:	18d1      	adds	r1, r2, r3
 8012668:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801266a:	1ad2      	subs	r2, r2, r3
 801266c:	4291      	cmp	r1, r2
 801266e:	dd18      	ble.n	80126a2 <lv_draw_rect+0x180a>
                circ_area.x1 = lt_origo.x + LV_CIRC_OCT5_X(cir_out);
 8012670:	9906      	ldr	r1, [sp, #24]
 8012672:	f8bd 2088 	ldrh.w	r2, [sp, #136]	; 0x88
 8012676:	1a8a      	subs	r2, r1, r2
                circ_area.x2 = lt_origo.x + LV_CIRC_OCT5_X(cir_out) + act_w2;
 8012678:	990d      	ldr	r1, [sp, #52]	; 0x34
                circ_area.x1 = lt_origo.x + LV_CIRC_OCT5_X(cir_out);
 801267a:	b292      	uxth	r2, r2
 801267c:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
                circ_area.x2 = lt_origo.x + LV_CIRC_OCT5_X(cir_out) + act_w2;
 8012680:	440a      	add	r2, r1
 8012682:	f8ad 209c 	strh.w	r2, [sp, #156]	; 0x9c
                circ_area.y1 = lt_origo.y + LV_CIRC_OCT5_Y(cir_out);
 8012686:	9a03      	ldr	r2, [sp, #12]
 8012688:	1ad3      	subs	r3, r2, r3
 801268a:	b21b      	sxth	r3, r3
 801268c:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
                circ_area.y2 = lt_origo.y + LV_CIRC_OCT5_Y(cir_out);
 8012690:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
                lv_draw_fill(&circ_area, mask, color, opa);
 8012694:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8012698:	9b07      	ldr	r3, [sp, #28]
 801269a:	4659      	mov	r1, fp
 801269c:	a826      	add	r0, sp, #152	; 0x98
 801269e:	f7fd fc96 	bl	800ffce <lv_draw_fill>
            circ_area.x1 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
 80126a2:	9a06      	ldr	r2, [sp, #24]
 80126a4:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
 80126a8:	1ad3      	subs	r3, r2, r3
 80126aa:	b21b      	sxth	r3, r3
            circ_area.y1 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out);
 80126ac:	9a03      	ldr	r2, [sp, #12]
            circ_area.x1 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
 80126ae:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            circ_area.x2 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
 80126b2:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            circ_area.y1 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out);
 80126b6:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 80126ba:	1ad3      	subs	r3, r2, r3
            circ_area.y2 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out) + act_w1;
 80126bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
            circ_area.y1 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out);
 80126be:	b29b      	uxth	r3, r3
 80126c0:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            circ_area.y2 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out) + act_w1;
 80126c4:	4413      	add	r3, r2
 80126c6:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&circ_area, mask, color, opa);
 80126ca:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80126ce:	9b07      	ldr	r3, [sp, #28]
 80126d0:	4659      	mov	r1, fp
 80126d2:	a826      	add	r0, sp, #152	; 0x98
 80126d4:	f7fd fc7b 	bl	800ffce <lv_draw_fill>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 80126d8:	9b05      	ldr	r3, [sp, #20]
 80126da:	f003 030a 	and.w	r3, r3, #10
 80126de:	2b0a      	cmp	r3, #10
 80126e0:	d13b      	bne.n	801275a <lv_draw_rect+0x18c2>
            circ_area.x1 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
 80126e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80126e4:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
 80126e8:	4413      	add	r3, r2
 80126ea:	b21b      	sxth	r3, r3
            circ_area.y1 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out);
 80126ec:	9a03      	ldr	r2, [sp, #12]
            circ_area.x1 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
 80126ee:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            circ_area.x2 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
 80126f2:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            circ_area.y1 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out);
 80126f6:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 80126fa:	1ad3      	subs	r3, r2, r3
            circ_area.y2 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out) + act_w2;
 80126fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
            circ_area.y1 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out);
 80126fe:	b29b      	uxth	r3, r3
 8012700:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            circ_area.y2 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out) + act_w2;
 8012704:	4413      	add	r3, r2
 8012706:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&circ_area, mask, color, opa);
 801270a:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801270e:	9b07      	ldr	r3, [sp, #28]
 8012710:	4659      	mov	r1, fp
 8012712:	a826      	add	r0, sp, #152	; 0x98
 8012714:	f7fd fc5b 	bl	800ffce <lv_draw_fill>
            if(rb_origo.y + LV_CIRC_OCT1_Y(cir_out) > rt_origo.y + LV_CIRC_OCT8_Y(cir_out)) {
 8012718:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
 801271c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801271e:	18d1      	adds	r1, r2, r3
 8012720:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012722:	1ad2      	subs	r2, r2, r3
 8012724:	4291      	cmp	r1, r2
 8012726:	dd18      	ble.n	801275a <lv_draw_rect+0x18c2>
                circ_area.x1 = rt_origo.x + LV_CIRC_OCT8_X(cir_out) - act_w1;
 8012728:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801272a:	f8bd 1088 	ldrh.w	r1, [sp, #136]	; 0x88
 801272e:	4411      	add	r1, r2
 8012730:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012732:	b289      	uxth	r1, r1
 8012734:	1a8a      	subs	r2, r1, r2
 8012736:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
                circ_area.y1 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
 801273a:	9a03      	ldr	r2, [sp, #12]
                circ_area.x2 = rt_origo.x + LV_CIRC_OCT8_X(cir_out);
 801273c:	f8ad 109c 	strh.w	r1, [sp, #156]	; 0x9c
                circ_area.y1 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
 8012740:	1ad3      	subs	r3, r2, r3
 8012742:	b21b      	sxth	r3, r3
 8012744:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
                circ_area.y2 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
 8012748:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
                lv_draw_fill(&circ_area, mask, color, opa);
 801274c:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8012750:	9b07      	ldr	r3, [sp, #28]
 8012752:	4659      	mov	r1, fp
 8012754:	a826      	add	r0, sp, #152	; 0x98
 8012756:	f7fd fc3a 	bl	800ffce <lv_draw_fill>
        lv_circ_next(&cir_out, &tmp_out);
 801275a:	a91e      	add	r1, sp, #120	; 0x78
 801275c:	a822      	add	r0, sp, #136	; 0x88
 801275e:	f001 fa08 	bl	8013b72 <lv_circ_next>
        if(cir_in.y < cir_in.x) {
 8012762:	f9bd 2092 	ldrsh.w	r2, [sp, #146]	; 0x92
 8012766:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 801276a:	429a      	cmp	r2, r3
 801276c:	f6bf a9bb 	bge.w	8011ae6 <lv_draw_rect+0xc4e>
            lv_circ_next(&cir_in, &tmp_in);
 8012770:	a920      	add	r1, sp, #128	; 0x80
 8012772:	a824      	add	r0, sp, #144	; 0x90
 8012774:	f001 f9fd 	bl	8013b72 <lv_circ_next>
 8012778:	f7ff b9b5 	b.w	8011ae6 <lv_draw_rect+0xc4e>
            act_w1 = cir_out.x - cir_out.y;
 801277c:	eba2 030a 	sub.w	r3, r2, sl
 8012780:	b29b      	uxth	r3, r3
 8012782:	b219      	sxth	r1, r3
            act_w2 = act_w1 - 1;
 8012784:	3b01      	subs	r3, #1
            act_w1 = cir_out.x - cir_out.y;
 8012786:	910b      	str	r1, [sp, #44]	; 0x2c
            act_w2 = act_w1 - 1;
 8012788:	b21b      	sxth	r3, r3
 801278a:	e6ba      	b.n	8012502 <lv_draw_rect+0x166a>
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 801278c:	f1b8 0f01 	cmp.w	r8, #1
                        aa_opa = antialias_get_opa_circ(seg_size, i, opa);
 8012790:	9a07      	ldr	r2, [sp, #28]
 8012792:	4640      	mov	r0, r8
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 8012794:	f000 8094 	beq.w	80128c0 <lv_draw_rect+0x1a28>
                        aa_opa = antialias_get_opa_circ(seg_size, i, opa);
 8012798:	f7fe fb5c 	bl	8010e54 <antialias_get_opa_circ>
 801279c:	4604      	mov	r4, r0
                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 801279e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80127a0:	2b09      	cmp	r3, #9
 80127a2:	d11b      	bne.n	80127dc <lv_draw_rect+0x1944>
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 80127a4:	9b04      	ldr	r3, [sp, #16]
 80127a6:	9400      	str	r4, [sp, #0]
 80127a8:	fa1f f986 	uxth.w	r9, r6
 80127ac:	1959      	adds	r1, r3, r5
 80127ae:	9b02      	ldr	r3, [sp, #8]
 80127b0:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 80127b4:	895b      	ldrh	r3, [r3, #10]
 80127b6:	4449      	add	r1, r9
 80127b8:	465a      	mov	r2, fp
 80127ba:	b209      	sxth	r1, r1
 80127bc:	f7fd fbb8 	bl	800ff30 <lv_draw_px>
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 80127c0:	9b04      	ldr	r3, [sp, #16]
 80127c2:	9400      	str	r4, [sp, #0]
 80127c4:	1c59      	adds	r1, r3, #1
 80127c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80127c8:	1958      	adds	r0, r3, r5
 80127ca:	9b02      	ldr	r3, [sp, #8]
 80127cc:	4439      	add	r1, r7
 80127ce:	4448      	add	r0, r9
 80127d0:	895b      	ldrh	r3, [r3, #10]
 80127d2:	465a      	mov	r2, fp
 80127d4:	b209      	sxth	r1, r1
 80127d6:	b200      	sxth	r0, r0
 80127d8:	f7fd fbaa 	bl	800ff30 <lv_draw_px>
                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 80127dc:	9b05      	ldr	r3, [sp, #20]
 80127de:	f003 0305 	and.w	r3, r3, #5
 80127e2:	2b05      	cmp	r3, #5
 80127e4:	d120      	bne.n	8012828 <lv_draw_rect+0x1990>
                        lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 80127e6:	9b04      	ldr	r3, [sp, #16]
 80127e8:	9400      	str	r4, [sp, #0]
 80127ea:	f103 0e01 	add.w	lr, r3, #1
 80127ee:	9b06      	ldr	r3, [sp, #24]
 80127f0:	fa1f f986 	uxth.w	r9, r6
 80127f4:	1b58      	subs	r0, r3, r5
 80127f6:	9b02      	ldr	r3, [sp, #8]
 80127f8:	44be      	add	lr, r7
 80127fa:	eba0 0009 	sub.w	r0, r0, r9
 80127fe:	895b      	ldrh	r3, [r3, #10]
 8012800:	465a      	mov	r2, fp
 8012802:	fa0f f18e 	sxth.w	r1, lr
 8012806:	b200      	sxth	r0, r0
 8012808:	f7fd fb92 	bl	800ff30 <lv_draw_px>
                        lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 801280c:	9b04      	ldr	r3, [sp, #16]
 801280e:	9400      	str	r4, [sp, #0]
 8012810:	1959      	adds	r1, r3, r5
 8012812:	9b06      	ldr	r3, [sp, #24]
 8012814:	1e58      	subs	r0, r3, #1
 8012816:	9b02      	ldr	r3, [sp, #8]
 8012818:	4449      	add	r1, r9
 801281a:	1bc0      	subs	r0, r0, r7
 801281c:	895b      	ldrh	r3, [r3, #10]
 801281e:	465a      	mov	r2, fp
 8012820:	b209      	sxth	r1, r1
 8012822:	b200      	sxth	r0, r0
 8012824:	f7fd fb84 	bl	800ff30 <lv_draw_px>
                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 8012828:	9b05      	ldr	r3, [sp, #20]
 801282a:	f003 0306 	and.w	r3, r3, #6
 801282e:	2b06      	cmp	r3, #6
 8012830:	d11f      	bne.n	8012872 <lv_draw_rect+0x19da>
                        lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 8012832:	9b03      	ldr	r3, [sp, #12]
 8012834:	9400      	str	r4, [sp, #0]
 8012836:	1b59      	subs	r1, r3, r5
 8012838:	9b06      	ldr	r3, [sp, #24]
 801283a:	fa1f f986 	uxth.w	r9, r6
 801283e:	1e58      	subs	r0, r3, #1
 8012840:	9b02      	ldr	r3, [sp, #8]
 8012842:	eba1 0109 	sub.w	r1, r1, r9
 8012846:	1bc0      	subs	r0, r0, r7
 8012848:	895b      	ldrh	r3, [r3, #10]
 801284a:	465a      	mov	r2, fp
 801284c:	b209      	sxth	r1, r1
 801284e:	b200      	sxth	r0, r0
 8012850:	f7fd fb6e 	bl	800ff30 <lv_draw_px>
                        lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 8012854:	9b03      	ldr	r3, [sp, #12]
 8012856:	9400      	str	r4, [sp, #0]
 8012858:	1e59      	subs	r1, r3, #1
 801285a:	9b06      	ldr	r3, [sp, #24]
 801285c:	1b58      	subs	r0, r3, r5
 801285e:	9b02      	ldr	r3, [sp, #8]
 8012860:	1bc9      	subs	r1, r1, r7
 8012862:	eba0 0009 	sub.w	r0, r0, r9
 8012866:	895b      	ldrh	r3, [r3, #10]
 8012868:	465a      	mov	r2, fp
 801286a:	b209      	sxth	r1, r1
 801286c:	b200      	sxth	r0, r0
 801286e:	f7fd fb5f 	bl	800ff30 <lv_draw_px>
                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 8012872:	9b05      	ldr	r3, [sp, #20]
 8012874:	f003 030a 	and.w	r3, r3, #10
 8012878:	2b0a      	cmp	r3, #10
 801287a:	d11f      	bne.n	80128bc <lv_draw_rect+0x1a24>
                        lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 801287c:	9b03      	ldr	r3, [sp, #12]
 801287e:	9400      	str	r4, [sp, #0]
 8012880:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
 8012884:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012886:	fa1f f986 	uxth.w	r9, r6
 801288a:	1958      	adds	r0, r3, r5
 801288c:	9b02      	ldr	r3, [sp, #8]
 801288e:	ebae 0e07 	sub.w	lr, lr, r7
 8012892:	4448      	add	r0, r9
 8012894:	895b      	ldrh	r3, [r3, #10]
 8012896:	465a      	mov	r2, fp
 8012898:	fa0f f18e 	sxth.w	r1, lr
 801289c:	b200      	sxth	r0, r0
 801289e:	f7fd fb47 	bl	800ff30 <lv_draw_px>
                        lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 80128a2:	9b03      	ldr	r3, [sp, #12]
 80128a4:	9400      	str	r4, [sp, #0]
 80128a6:	1b59      	subs	r1, r3, r5
 80128a8:	9b02      	ldr	r3, [sp, #8]
 80128aa:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 80128ae:	895b      	ldrh	r3, [r3, #10]
 80128b0:	eba1 0109 	sub.w	r1, r1, r9
 80128b4:	465a      	mov	r2, fp
 80128b6:	b209      	sxth	r1, r1
 80128b8:	f7fd fb3a 	bl	800ff30 <lv_draw_px>
 80128bc:	3601      	adds	r6, #1
 80128be:	e632      	b.n	8012526 <lv_draw_rect+0x168e>
                        aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 80128c0:	f7fd faf4 	bl	800feac <lv_draw_aa_get_opa>
 80128c4:	9b07      	ldr	r3, [sp, #28]
 80128c6:	1a18      	subs	r0, r3, r0
 80128c8:	b2c4      	uxtb	r4, r0
 80128ca:	e768      	b.n	801279e <lv_draw_rect+0x1906>
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 80128cc:	f1ba 0f01 	cmp.w	sl, #1
                        aa_opa = opa - antialias_get_opa_circ(seg_size, i, opa);
 80128d0:	9a07      	ldr	r2, [sp, #28]
 80128d2:	4650      	mov	r0, sl
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 80128d4:	f000 809c 	beq.w	8012a10 <lv_draw_rect+0x1b78>
                        aa_opa = opa - antialias_get_opa_circ(seg_size, i, opa);
 80128d8:	f7fe fabc 	bl	8010e54 <antialias_get_opa_circ>
 80128dc:	9b07      	ldr	r3, [sp, #28]
 80128de:	1a18      	subs	r0, r3, r0
 80128e0:	b2c5      	uxtb	r5, r0
                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 80128e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80128e4:	2b09      	cmp	r3, #9
 80128e6:	d10a      	bne.n	80128fe <lv_draw_rect+0x1a66>
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 80128e8:	9b04      	ldr	r3, [sp, #16]
 80128ea:	9500      	str	r5, [sp, #0]
 80128ec:	1999      	adds	r1, r3, r6
 80128ee:	9b02      	ldr	r3, [sp, #8]
 80128f0:	9815      	ldr	r0, [sp, #84]	; 0x54
 80128f2:	895b      	ldrh	r3, [r3, #10]
 80128f4:	4421      	add	r1, r4
 80128f6:	465a      	mov	r2, fp
 80128f8:	b209      	sxth	r1, r1
 80128fa:	f7fd fb19 	bl	800ff30 <lv_draw_px>
 80128fe:	9b05      	ldr	r3, [sp, #20]
 8012900:	f003 0305 	and.w	r3, r3, #5
                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 8012904:	2b05      	cmp	r3, #5
 8012906:	9314      	str	r3, [sp, #80]	; 0x50
 8012908:	d10e      	bne.n	8012928 <lv_draw_rect+0x1a90>
                        lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) - 1, mask,
 801290a:	9b04      	ldr	r3, [sp, #16]
 801290c:	9500      	str	r5, [sp, #0]
 801290e:	1e59      	subs	r1, r3, #1
 8012910:	9b08      	ldr	r3, [sp, #32]
 8012912:	4419      	add	r1, r3
 8012914:	9b06      	ldr	r3, [sp, #24]
 8012916:	1b98      	subs	r0, r3, r6
 8012918:	9b02      	ldr	r3, [sp, #8]
 801291a:	1b00      	subs	r0, r0, r4
 801291c:	895b      	ldrh	r3, [r3, #10]
 801291e:	465a      	mov	r2, fp
 8012920:	b209      	sxth	r1, r1
 8012922:	b200      	sxth	r0, r0
 8012924:	f7fd fb04 	bl	800ff30 <lv_draw_px>
 8012928:	9b05      	ldr	r3, [sp, #20]
 801292a:	f003 0806 	and.w	r8, r3, #6
                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 801292e:	f1b8 0f06 	cmp.w	r8, #6
 8012932:	d10e      	bne.n	8012952 <lv_draw_rect+0x1aba>
                        lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) + 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 8012934:	9b03      	ldr	r3, [sp, #12]
 8012936:	9500      	str	r5, [sp, #0]
 8012938:	1b99      	subs	r1, r3, r6
 801293a:	9b06      	ldr	r3, [sp, #24]
 801293c:	1c58      	adds	r0, r3, #1
 801293e:	9b08      	ldr	r3, [sp, #32]
 8012940:	1ac0      	subs	r0, r0, r3
 8012942:	9b02      	ldr	r3, [sp, #8]
 8012944:	1b09      	subs	r1, r1, r4
 8012946:	895b      	ldrh	r3, [r3, #10]
 8012948:	465a      	mov	r2, fp
 801294a:	b209      	sxth	r1, r1
 801294c:	b200      	sxth	r0, r0
 801294e:	f7fd faef 	bl	800ff30 <lv_draw_px>
 8012952:	9b05      	ldr	r3, [sp, #20]
 8012954:	f003 070a 	and.w	r7, r3, #10
                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 8012958:	2f0a      	cmp	r7, #10
 801295a:	d10e      	bne.n	801297a <lv_draw_rect+0x1ae2>
                        lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) + 1, mask,
 801295c:	9b03      	ldr	r3, [sp, #12]
 801295e:	9500      	str	r5, [sp, #0]
 8012960:	1c59      	adds	r1, r3, #1
 8012962:	9b08      	ldr	r3, [sp, #32]
 8012964:	1ac9      	subs	r1, r1, r3
 8012966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012968:	1998      	adds	r0, r3, r6
 801296a:	9b02      	ldr	r3, [sp, #8]
 801296c:	4420      	add	r0, r4
 801296e:	895b      	ldrh	r3, [r3, #10]
 8012970:	465a      	mov	r2, fp
 8012972:	b209      	sxth	r1, r1
 8012974:	b200      	sxth	r0, r0
 8012976:	f7fd fadb 	bl	800ff30 <lv_draw_px>
                    if(LV_CIRC_OCT1_X(aa_p) - 1 != LV_CIRC_OCT2_X(aa_p) + i) {
 801297a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801297c:	9a08      	ldr	r2, [sp, #32]
 801297e:	4423      	add	r3, r4
 8012980:	3a01      	subs	r2, #1
 8012982:	4293      	cmp	r3, r2
 8012984:	d042      	beq.n	8012a0c <lv_draw_rect+0x1b74>
                        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 8012986:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012988:	2b09      	cmp	r3, #9
 801298a:	d10e      	bne.n	80129aa <lv_draw_rect+0x1b12>
                            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) - 1,
 801298c:	9b04      	ldr	r3, [sp, #16]
 801298e:	9500      	str	r5, [sp, #0]
 8012990:	1e59      	subs	r1, r3, #1
 8012992:	9b08      	ldr	r3, [sp, #32]
 8012994:	4419      	add	r1, r3
 8012996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012998:	1998      	adds	r0, r3, r6
 801299a:	9b02      	ldr	r3, [sp, #8]
 801299c:	4420      	add	r0, r4
 801299e:	895b      	ldrh	r3, [r3, #10]
 80129a0:	465a      	mov	r2, fp
 80129a2:	b209      	sxth	r1, r1
 80129a4:	b200      	sxth	r0, r0
 80129a6:	f7fd fac3 	bl	800ff30 <lv_draw_px>
                        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 80129aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80129ac:	2b05      	cmp	r3, #5
 80129ae:	d10e      	bne.n	80129ce <lv_draw_rect+0x1b36>
                            lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) + 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i,
 80129b0:	9b04      	ldr	r3, [sp, #16]
 80129b2:	9500      	str	r5, [sp, #0]
 80129b4:	1999      	adds	r1, r3, r6
 80129b6:	9b06      	ldr	r3, [sp, #24]
 80129b8:	1c58      	adds	r0, r3, #1
 80129ba:	9b08      	ldr	r3, [sp, #32]
 80129bc:	1ac0      	subs	r0, r0, r3
 80129be:	9b02      	ldr	r3, [sp, #8]
 80129c0:	4421      	add	r1, r4
 80129c2:	895b      	ldrh	r3, [r3, #10]
 80129c4:	465a      	mov	r2, fp
 80129c6:	b209      	sxth	r1, r1
 80129c8:	b200      	sxth	r0, r0
 80129ca:	f7fd fab1 	bl	800ff30 <lv_draw_px>
                        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 80129ce:	f1b8 0f06 	cmp.w	r8, #6
 80129d2:	d10e      	bne.n	80129f2 <lv_draw_rect+0x1b5a>
                            lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) + 1,
 80129d4:	9b03      	ldr	r3, [sp, #12]
 80129d6:	9500      	str	r5, [sp, #0]
 80129d8:	1c59      	adds	r1, r3, #1
 80129da:	9b08      	ldr	r3, [sp, #32]
 80129dc:	1ac9      	subs	r1, r1, r3
 80129de:	9b06      	ldr	r3, [sp, #24]
 80129e0:	1b98      	subs	r0, r3, r6
 80129e2:	9b02      	ldr	r3, [sp, #8]
 80129e4:	1b00      	subs	r0, r0, r4
 80129e6:	895b      	ldrh	r3, [r3, #10]
 80129e8:	465a      	mov	r2, fp
 80129ea:	b209      	sxth	r1, r1
 80129ec:	b200      	sxth	r0, r0
 80129ee:	f7fd fa9f 	bl	800ff30 <lv_draw_px>
                        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 80129f2:	2f0a      	cmp	r7, #10
 80129f4:	d10a      	bne.n	8012a0c <lv_draw_rect+0x1b74>
                            lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) - 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i,
 80129f6:	9b03      	ldr	r3, [sp, #12]
 80129f8:	9500      	str	r5, [sp, #0]
 80129fa:	1b99      	subs	r1, r3, r6
 80129fc:	9b02      	ldr	r3, [sp, #8]
 80129fe:	9815      	ldr	r0, [sp, #84]	; 0x54
 8012a00:	895b      	ldrh	r3, [r3, #10]
 8012a02:	1b09      	subs	r1, r1, r4
 8012a04:	465a      	mov	r2, fp
 8012a06:	b209      	sxth	r1, r1
 8012a08:	f7fd fa92 	bl	800ff30 <lv_draw_px>
 8012a0c:	3401      	adds	r4, #1
 8012a0e:	e5a5      	b.n	801255c <lv_draw_rect+0x16c4>
                        aa_opa = lv_draw_aa_get_opa(seg_size, i, opa);
 8012a10:	f7fd fa4c 	bl	800feac <lv_draw_aa_get_opa>
 8012a14:	4605      	mov	r5, r0
 8012a16:	e764      	b.n	80128e2 <lv_draw_rect+0x1a4a>
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 8012a18:	9a07      	ldr	r2, [sp, #28]
 8012a1a:	4650      	mov	r0, sl
 8012a1c:	f7fd fa46 	bl	800feac <lv_draw_aa_get_opa>
 8012a20:	9b07      	ldr	r3, [sp, #28]
 8012a22:	1a18      	subs	r0, r3, r0
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 8012a24:	9b05      	ldr	r3, [sp, #20]
 8012a26:	f003 0309 	and.w	r3, r3, #9
 8012a2a:	2b09      	cmp	r3, #9
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 8012a2c:	b2c4      	uxtb	r4, r0
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 8012a2e:	d11b      	bne.n	8012a68 <lv_draw_rect+0x1bd0>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 8012a30:	9b04      	ldr	r3, [sp, #16]
 8012a32:	9400      	str	r4, [sp, #0]
 8012a34:	fa1f f886 	uxth.w	r8, r6
 8012a38:	1959      	adds	r1, r3, r5
 8012a3a:	9b02      	ldr	r3, [sp, #8]
 8012a3c:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8012a40:	895b      	ldrh	r3, [r3, #10]
 8012a42:	4441      	add	r1, r8
 8012a44:	465a      	mov	r2, fp
 8012a46:	b209      	sxth	r1, r1
 8012a48:	f7fd fa72 	bl	800ff30 <lv_draw_px>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 8012a4c:	9b04      	ldr	r3, [sp, #16]
 8012a4e:	9400      	str	r4, [sp, #0]
 8012a50:	1c59      	adds	r1, r3, #1
 8012a52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a54:	1958      	adds	r0, r3, r5
 8012a56:	9b02      	ldr	r3, [sp, #8]
 8012a58:	4439      	add	r1, r7
 8012a5a:	4440      	add	r0, r8
 8012a5c:	895b      	ldrh	r3, [r3, #10]
 8012a5e:	465a      	mov	r2, fp
 8012a60:	b209      	sxth	r1, r1
 8012a62:	b200      	sxth	r0, r0
 8012a64:	f7fd fa64 	bl	800ff30 <lv_draw_px>
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 8012a68:	9b05      	ldr	r3, [sp, #20]
 8012a6a:	f003 0305 	and.w	r3, r3, #5
 8012a6e:	2b05      	cmp	r3, #5
 8012a70:	d120      	bne.n	8012ab4 <lv_draw_rect+0x1c1c>
                lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 8012a72:	9b04      	ldr	r3, [sp, #16]
 8012a74:	9400      	str	r4, [sp, #0]
 8012a76:	f103 0e01 	add.w	lr, r3, #1
 8012a7a:	9b06      	ldr	r3, [sp, #24]
 8012a7c:	fa1f f886 	uxth.w	r8, r6
 8012a80:	1b58      	subs	r0, r3, r5
 8012a82:	9b02      	ldr	r3, [sp, #8]
 8012a84:	44be      	add	lr, r7
 8012a86:	eba0 0008 	sub.w	r0, r0, r8
 8012a8a:	895b      	ldrh	r3, [r3, #10]
 8012a8c:	465a      	mov	r2, fp
 8012a8e:	fa0f f18e 	sxth.w	r1, lr
 8012a92:	b200      	sxth	r0, r0
 8012a94:	f7fd fa4c 	bl	800ff30 <lv_draw_px>
                lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 8012a98:	9b04      	ldr	r3, [sp, #16]
 8012a9a:	9400      	str	r4, [sp, #0]
 8012a9c:	1959      	adds	r1, r3, r5
 8012a9e:	9b06      	ldr	r3, [sp, #24]
 8012aa0:	1e58      	subs	r0, r3, #1
 8012aa2:	9b02      	ldr	r3, [sp, #8]
 8012aa4:	4441      	add	r1, r8
 8012aa6:	1bc0      	subs	r0, r0, r7
 8012aa8:	895b      	ldrh	r3, [r3, #10]
 8012aaa:	465a      	mov	r2, fp
 8012aac:	b209      	sxth	r1, r1
 8012aae:	b200      	sxth	r0, r0
 8012ab0:	f7fd fa3e 	bl	800ff30 <lv_draw_px>
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 8012ab4:	9b05      	ldr	r3, [sp, #20]
 8012ab6:	f003 0306 	and.w	r3, r3, #6
 8012aba:	2b06      	cmp	r3, #6
 8012abc:	d11f      	bne.n	8012afe <lv_draw_rect+0x1c66>
                lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 8012abe:	9b03      	ldr	r3, [sp, #12]
 8012ac0:	9400      	str	r4, [sp, #0]
 8012ac2:	1b59      	subs	r1, r3, r5
 8012ac4:	9b06      	ldr	r3, [sp, #24]
 8012ac6:	fa1f f886 	uxth.w	r8, r6
 8012aca:	1e58      	subs	r0, r3, #1
 8012acc:	9b02      	ldr	r3, [sp, #8]
 8012ace:	eba1 0108 	sub.w	r1, r1, r8
 8012ad2:	1bc0      	subs	r0, r0, r7
 8012ad4:	895b      	ldrh	r3, [r3, #10]
 8012ad6:	465a      	mov	r2, fp
 8012ad8:	b209      	sxth	r1, r1
 8012ada:	b200      	sxth	r0, r0
 8012adc:	f7fd fa28 	bl	800ff30 <lv_draw_px>
                lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 8012ae0:	9b03      	ldr	r3, [sp, #12]
 8012ae2:	9400      	str	r4, [sp, #0]
 8012ae4:	1e59      	subs	r1, r3, #1
 8012ae6:	9b06      	ldr	r3, [sp, #24]
 8012ae8:	1b58      	subs	r0, r3, r5
 8012aea:	9b02      	ldr	r3, [sp, #8]
 8012aec:	1bc9      	subs	r1, r1, r7
 8012aee:	eba0 0008 	sub.w	r0, r0, r8
 8012af2:	895b      	ldrh	r3, [r3, #10]
 8012af4:	465a      	mov	r2, fp
 8012af6:	b209      	sxth	r1, r1
 8012af8:	b200      	sxth	r0, r0
 8012afa:	f7fd fa19 	bl	800ff30 <lv_draw_px>
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 8012afe:	9b05      	ldr	r3, [sp, #20]
 8012b00:	f003 030a 	and.w	r3, r3, #10
 8012b04:	2b0a      	cmp	r3, #10
 8012b06:	d11f      	bne.n	8012b48 <lv_draw_rect+0x1cb0>
                lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 8012b08:	9b03      	ldr	r3, [sp, #12]
 8012b0a:	9400      	str	r4, [sp, #0]
 8012b0c:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
 8012b10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b12:	fa1f f886 	uxth.w	r8, r6
 8012b16:	1958      	adds	r0, r3, r5
 8012b18:	9b02      	ldr	r3, [sp, #8]
 8012b1a:	ebae 0e07 	sub.w	lr, lr, r7
 8012b1e:	4440      	add	r0, r8
 8012b20:	895b      	ldrh	r3, [r3, #10]
 8012b22:	465a      	mov	r2, fp
 8012b24:	fa0f f18e 	sxth.w	r1, lr
 8012b28:	b200      	sxth	r0, r0
 8012b2a:	f7fd fa01 	bl	800ff30 <lv_draw_px>
                lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 8012b2e:	9b03      	ldr	r3, [sp, #12]
 8012b30:	9400      	str	r4, [sp, #0]
 8012b32:	1b59      	subs	r1, r3, r5
 8012b34:	9b02      	ldr	r3, [sp, #8]
 8012b36:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8012b3a:	895b      	ldrh	r3, [r3, #10]
 8012b3c:	eba1 0108 	sub.w	r1, r1, r8
 8012b40:	465a      	mov	r2, fp
 8012b42:	b209      	sxth	r1, r1
 8012b44:	f7fd f9f4 	bl	800ff30 <lv_draw_px>
 8012b48:	3601      	adds	r6, #1
 8012b4a:	f7fe bfe3 	b.w	8011b14 <lv_draw_rect+0xc7c>
            lv_opa_t aa_opa = lv_draw_aa_get_opa(seg_size, i, opa);
 8012b4e:	9a07      	ldr	r2, [sp, #28]
 8012b50:	980a      	ldr	r0, [sp, #40]	; 0x28
 8012b52:	f7fd f9ab 	bl	800feac <lv_draw_aa_get_opa>
 8012b56:	9b05      	ldr	r3, [sp, #20]
 8012b58:	f003 0909 	and.w	r9, r3, #9
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 8012b5c:	f1b9 0f09 	cmp.w	r9, #9
            lv_opa_t aa_opa = lv_draw_aa_get_opa(seg_size, i, opa);
 8012b60:	4606      	mov	r6, r0
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 8012b62:	d10a      	bne.n	8012b7a <lv_draw_rect+0x1ce2>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 8012b64:	9b04      	ldr	r3, [sp, #16]
 8012b66:	9000      	str	r0, [sp, #0]
 8012b68:	1959      	adds	r1, r3, r5
 8012b6a:	9b02      	ldr	r3, [sp, #8]
 8012b6c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8012b6e:	895b      	ldrh	r3, [r3, #10]
 8012b70:	4421      	add	r1, r4
 8012b72:	465a      	mov	r2, fp
 8012b74:	b209      	sxth	r1, r1
 8012b76:	f7fd f9db 	bl	800ff30 <lv_draw_px>
 8012b7a:	9b05      	ldr	r3, [sp, #20]
 8012b7c:	f003 0a05 	and.w	sl, r3, #5
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 8012b80:	f1ba 0f05 	cmp.w	sl, #5
 8012b84:	d10e      	bne.n	8012ba4 <lv_draw_rect+0x1d0c>
                lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) - 1, mask,
 8012b86:	9b04      	ldr	r3, [sp, #16]
 8012b88:	9600      	str	r6, [sp, #0]
 8012b8a:	1e59      	subs	r1, r3, #1
 8012b8c:	9b08      	ldr	r3, [sp, #32]
 8012b8e:	4419      	add	r1, r3
 8012b90:	9b06      	ldr	r3, [sp, #24]
 8012b92:	1b58      	subs	r0, r3, r5
 8012b94:	9b02      	ldr	r3, [sp, #8]
 8012b96:	1b00      	subs	r0, r0, r4
 8012b98:	895b      	ldrh	r3, [r3, #10]
 8012b9a:	465a      	mov	r2, fp
 8012b9c:	b209      	sxth	r1, r1
 8012b9e:	b200      	sxth	r0, r0
 8012ba0:	f7fd f9c6 	bl	800ff30 <lv_draw_px>
 8012ba4:	9b05      	ldr	r3, [sp, #20]
 8012ba6:	f003 0806 	and.w	r8, r3, #6
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 8012baa:	f1b8 0f06 	cmp.w	r8, #6
 8012bae:	d10e      	bne.n	8012bce <lv_draw_rect+0x1d36>
                lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) + 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 8012bb0:	9b03      	ldr	r3, [sp, #12]
 8012bb2:	9600      	str	r6, [sp, #0]
 8012bb4:	1b59      	subs	r1, r3, r5
 8012bb6:	9b06      	ldr	r3, [sp, #24]
 8012bb8:	1c58      	adds	r0, r3, #1
 8012bba:	9b08      	ldr	r3, [sp, #32]
 8012bbc:	1ac0      	subs	r0, r0, r3
 8012bbe:	9b02      	ldr	r3, [sp, #8]
 8012bc0:	1b09      	subs	r1, r1, r4
 8012bc2:	895b      	ldrh	r3, [r3, #10]
 8012bc4:	465a      	mov	r2, fp
 8012bc6:	b209      	sxth	r1, r1
 8012bc8:	b200      	sxth	r0, r0
 8012bca:	f7fd f9b1 	bl	800ff30 <lv_draw_px>
 8012bce:	9b05      	ldr	r3, [sp, #20]
 8012bd0:	f003 070a 	and.w	r7, r3, #10
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 8012bd4:	2f0a      	cmp	r7, #10
 8012bd6:	d10e      	bne.n	8012bf6 <lv_draw_rect+0x1d5e>
                lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) + 1, mask,
 8012bd8:	9b03      	ldr	r3, [sp, #12]
 8012bda:	9600      	str	r6, [sp, #0]
 8012bdc:	1c59      	adds	r1, r3, #1
 8012bde:	9b08      	ldr	r3, [sp, #32]
 8012be0:	1ac9      	subs	r1, r1, r3
 8012be2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012be4:	1958      	adds	r0, r3, r5
 8012be6:	9b02      	ldr	r3, [sp, #8]
 8012be8:	4420      	add	r0, r4
 8012bea:	895b      	ldrh	r3, [r3, #10]
 8012bec:	465a      	mov	r2, fp
 8012bee:	b209      	sxth	r1, r1
 8012bf0:	b200      	sxth	r0, r0
 8012bf2:	f7fd f99d 	bl	800ff30 <lv_draw_px>
            if(LV_CIRC_OCT1_X(aa_p) - 1 != LV_CIRC_OCT2_X(aa_p) + i) {
 8012bf6:	9b08      	ldr	r3, [sp, #32]
 8012bf8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012bfa:	3b01      	subs	r3, #1
 8012bfc:	4422      	add	r2, r4
 8012bfe:	4293      	cmp	r3, r2
 8012c00:	d042      	beq.n	8012c88 <lv_draw_rect+0x1df0>
                if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 8012c02:	f1b9 0f09 	cmp.w	r9, #9
 8012c06:	d10e      	bne.n	8012c26 <lv_draw_rect+0x1d8e>
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) - 1, mask,
 8012c08:	9b04      	ldr	r3, [sp, #16]
 8012c0a:	9600      	str	r6, [sp, #0]
 8012c0c:	1e59      	subs	r1, r3, #1
 8012c0e:	9b08      	ldr	r3, [sp, #32]
 8012c10:	4419      	add	r1, r3
 8012c12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c14:	1958      	adds	r0, r3, r5
 8012c16:	9b02      	ldr	r3, [sp, #8]
 8012c18:	4420      	add	r0, r4
 8012c1a:	895b      	ldrh	r3, [r3, #10]
 8012c1c:	465a      	mov	r2, fp
 8012c1e:	b209      	sxth	r1, r1
 8012c20:	b200      	sxth	r0, r0
 8012c22:	f7fd f985 	bl	800ff30 <lv_draw_px>
                if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 8012c26:	f1ba 0f05 	cmp.w	sl, #5
 8012c2a:	d10e      	bne.n	8012c4a <lv_draw_rect+0x1db2>
                    lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) + 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 8012c2c:	9b04      	ldr	r3, [sp, #16]
 8012c2e:	9600      	str	r6, [sp, #0]
 8012c30:	1959      	adds	r1, r3, r5
 8012c32:	9b06      	ldr	r3, [sp, #24]
 8012c34:	1c58      	adds	r0, r3, #1
 8012c36:	9b08      	ldr	r3, [sp, #32]
 8012c38:	1ac0      	subs	r0, r0, r3
 8012c3a:	9b02      	ldr	r3, [sp, #8]
 8012c3c:	4421      	add	r1, r4
 8012c3e:	895b      	ldrh	r3, [r3, #10]
 8012c40:	465a      	mov	r2, fp
 8012c42:	b209      	sxth	r1, r1
 8012c44:	b200      	sxth	r0, r0
 8012c46:	f7fd f973 	bl	800ff30 <lv_draw_px>
                if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 8012c4a:	f1b8 0f06 	cmp.w	r8, #6
 8012c4e:	d10e      	bne.n	8012c6e <lv_draw_rect+0x1dd6>
                    lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) + 1, mask,
 8012c50:	9b03      	ldr	r3, [sp, #12]
 8012c52:	9600      	str	r6, [sp, #0]
 8012c54:	1c59      	adds	r1, r3, #1
 8012c56:	9b08      	ldr	r3, [sp, #32]
 8012c58:	1ac9      	subs	r1, r1, r3
 8012c5a:	9b06      	ldr	r3, [sp, #24]
 8012c5c:	1b58      	subs	r0, r3, r5
 8012c5e:	9b02      	ldr	r3, [sp, #8]
 8012c60:	1b00      	subs	r0, r0, r4
 8012c62:	895b      	ldrh	r3, [r3, #10]
 8012c64:	465a      	mov	r2, fp
 8012c66:	b209      	sxth	r1, r1
 8012c68:	b200      	sxth	r0, r0
 8012c6a:	f7fd f961 	bl	800ff30 <lv_draw_px>
                if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 8012c6e:	2f0a      	cmp	r7, #10
 8012c70:	d10a      	bne.n	8012c88 <lv_draw_rect+0x1df0>
                    lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) - 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 8012c72:	9b03      	ldr	r3, [sp, #12]
 8012c74:	9600      	str	r6, [sp, #0]
 8012c76:	1b59      	subs	r1, r3, r5
 8012c78:	9b02      	ldr	r3, [sp, #8]
 8012c7a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8012c7c:	895b      	ldrh	r3, [r3, #10]
 8012c7e:	1b09      	subs	r1, r1, r4
 8012c80:	465a      	mov	r2, fp
 8012c82:	b209      	sxth	r1, r1
 8012c84:	f7fd f954 	bl	800ff30 <lv_draw_px>
 8012c88:	3401      	adds	r4, #1
 8012c8a:	f7fe bfab 	b.w	8011be4 <lv_draw_rect+0xd4c>
            if(mcolor.full == gcolor.full)
 8012c8e:	9b03      	ldr	r3, [sp, #12]
 8012c90:	454b      	cmp	r3, r9
 8012c92:	f47f a9bb 	bne.w	801200c <lv_draw_rect+0x1174>
                act_color = mcolor;
 8012c96:	f8bd 200c 	ldrh.w	r2, [sp, #12]
            lv_draw_fill(&edge_top_area, mask, act_color, opa);
 8012c9a:	9b04      	ldr	r3, [sp, #16]
 8012c9c:	4659      	mov	r1, fp
 8012c9e:	a820      	add	r0, sp, #128	; 0x80
 8012ca0:	f7fd f995 	bl	800ffce <lv_draw_fill>
 8012ca4:	f7ff b8a6 	b.w	8011df4 <lv_draw_rect+0xf5c>

08012ca8 <lv_img_cache_open>:
 * @param style style of the image
 * @return pointer to the cache entry or NULL if can open the image
 */
lv_img_cache_entry_t * lv_img_cache_open(const void * src, const lv_style_t * style)
{
    if(entry_cnt == 0) {
 8012ca8:	4b34      	ldr	r3, [pc, #208]	; (8012d7c <lv_img_cache_open+0xd4>)
{
 8012caa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(entry_cnt == 0) {
 8012cae:	881c      	ldrh	r4, [r3, #0]
{
 8012cb0:	4605      	mov	r5, r0
 8012cb2:	460e      	mov	r6, r1
    if(entry_cnt == 0) {
 8012cb4:	b1ec      	cbz	r4, 8012cf2 <lv_img_cache_open+0x4a>
        LV_LOG_WARN("lv_img_cache_open: the cache size is 0");
        return NULL;
    }

    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 8012cb6:	4b32      	ldr	r3, [pc, #200]	; (8012d80 <lv_img_cache_open+0xd8>)

    /*Decrement all lifes. Make the entries older*/
    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
        if(cache[i].life > INT32_MIN + LV_IMG_CACHE_AGING) {
 8012cb8:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 8012d84 <lv_img_cache_open+0xdc>
    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 8012cbc:	681a      	ldr	r2, [r3, #0]
 8012cbe:	2728      	movs	r7, #40	; 0x28
 8012cc0:	4613      	mov	r3, r2
 8012cc2:	fb07 2704 	mla	r7, r7, r4, r2
    for(i = 0; i < entry_cnt; i++) {
 8012cc6:	4611      	mov	r1, r2
 8012cc8:	428f      	cmp	r7, r1
 8012cca:	d115      	bne.n	8012cf8 <lv_img_cache_open+0x50>
 8012ccc:	3c01      	subs	r4, #1
 8012cce:	b2a4      	uxth	r4, r4
 8012cd0:	2128      	movs	r1, #40	; 0x28
 8012cd2:	fb04 1101 	mla	r1, r4, r1, r1
 8012cd6:	4411      	add	r1, r2
    }

    /*Is the image cached?*/
    lv_img_cache_entry_t * cached_src = NULL;
    for(i = 0; i < entry_cnt; i++) {
        if(cache[i].dec_dsc.src == src) {
 8012cd8:	6858      	ldr	r0, [r3, #4]
 8012cda:	42a8      	cmp	r0, r5
 8012cdc:	461c      	mov	r4, r3
 8012cde:	d113      	bne.n	8012d08 <lv_img_cache_open+0x60>
            /* If opened increment its life.
             * Image difficult to open should live longer to keep avoid frequent their recaching.
             * Therefore increase `life` with `time_to_open`*/
            cached_src = &cache[i];
            cached_src->life += cached_src->dec_dsc.time_to_open * LV_IMG_CACHE_LIFE_GAIN;
 8012ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ce2:	69a2      	ldr	r2, [r4, #24]
 8012ce4:	4413      	add	r3, r2
            if(cached_src->life > LV_IMG_CACHE_LIFE_LIMIT) cached_src->life = LV_IMG_CACHE_LIFE_LIMIT;
 8012ce6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012cea:	bfc8      	it	gt
 8012cec:	f44f 737a 	movgt.w	r3, #1000	; 0x3e8
 8012cf0:	6263      	str	r3, [r4, #36]	; 0x24

        if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
    }

    return cached_src;
}
 8012cf2:	4620      	mov	r0, r4
 8012cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(cache[i].life > INT32_MIN + LV_IMG_CACHE_AGING) {
 8012cf8:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8012cfa:	4570      	cmp	r0, lr
            cache[i].life -= LV_IMG_CACHE_AGING;
 8012cfc:	bfa4      	itt	ge
 8012cfe:	f100 30ff 	addge.w	r0, r0, #4294967295	; 0xffffffff
 8012d02:	6248      	strge	r0, [r1, #36]	; 0x24
 8012d04:	3128      	adds	r1, #40	; 0x28
 8012d06:	e7df      	b.n	8012cc8 <lv_img_cache_open+0x20>
 8012d08:	3328      	adds	r3, #40	; 0x28
    for(i = 0; i < entry_cnt; i++) {
 8012d0a:	428b      	cmp	r3, r1
 8012d0c:	d1e4      	bne.n	8012cd8 <lv_img_cache_open+0x30>
 8012d0e:	f102 0128 	add.w	r1, r2, #40	; 0x28
 8012d12:	4614      	mov	r4, r2
        for(i = 1; i < entry_cnt; i++) {
 8012d14:	428b      	cmp	r3, r1
 8012d16:	d11d      	bne.n	8012d54 <lv_img_cache_open+0xac>
        if(cached_src->dec_dsc.src) {
 8012d18:	6863      	ldr	r3, [r4, #4]
 8012d1a:	b113      	cbz	r3, 8012d22 <lv_img_cache_open+0x7a>
            lv_img_decoder_close(&cached_src->dec_dsc);
 8012d1c:	4620      	mov	r0, r4
 8012d1e:	f000 fadd 	bl	80132dc <lv_img_decoder_close>
        t_start                          = lv_tick_get();
 8012d22:	f000 fd25 	bl	8013770 <lv_tick_get>
        cached_src->dec_dsc.time_to_open = 0;
 8012d26:	2700      	movs	r7, #0
        lv_res_t open_res                = lv_img_decoder_open(&cached_src->dec_dsc, src, style);
 8012d28:	4629      	mov	r1, r5
        t_start                          = lv_tick_get();
 8012d2a:	4680      	mov	r8, r0
        cached_src->dec_dsc.time_to_open = 0;
 8012d2c:	61a7      	str	r7, [r4, #24]
        lv_res_t open_res                = lv_img_decoder_open(&cached_src->dec_dsc, src, style);
 8012d2e:	4632      	mov	r2, r6
 8012d30:	4620      	mov	r0, r4
 8012d32:	f000 fa85 	bl	8013240 <lv_img_decoder_open>
        if(open_res == LV_RES_INV) {
 8012d36:	4605      	mov	r5, r0
 8012d38:	b998      	cbnz	r0, 8012d62 <lv_img_cache_open+0xba>
            lv_img_decoder_close(&cached_src->dec_dsc);
 8012d3a:	4620      	mov	r0, r4
 8012d3c:	f000 face 	bl	80132dc <lv_img_decoder_close>
            memset(cached_src, 0, sizeof(lv_img_cache_entry_t));
 8012d40:	4620      	mov	r0, r4
 8012d42:	2228      	movs	r2, #40	; 0x28
 8012d44:	4629      	mov	r1, r5
 8012d46:	f006 fbf0 	bl	801952a <memset>
            cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its use  */
 8012d4a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012d4e:	6263      	str	r3, [r4, #36]	; 0x24
            return NULL;
 8012d50:	462c      	mov	r4, r5
 8012d52:	e7ce      	b.n	8012cf2 <lv_img_cache_open+0x4a>
            if(cache[i].life < cached_src->life) {
 8012d54:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8012d56:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8012d58:	4290      	cmp	r0, r2
 8012d5a:	bfb8      	it	lt
 8012d5c:	460c      	movlt	r4, r1
 8012d5e:	3128      	adds	r1, #40	; 0x28
 8012d60:	e7d8      	b.n	8012d14 <lv_img_cache_open+0x6c>
        if(cached_src->dec_dsc.time_to_open == 0) {
 8012d62:	69a3      	ldr	r3, [r4, #24]
        cached_src->life = 0;
 8012d64:	6267      	str	r7, [r4, #36]	; 0x24
        if(cached_src->dec_dsc.time_to_open == 0) {
 8012d66:	b91b      	cbnz	r3, 8012d70 <lv_img_cache_open+0xc8>
            cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
 8012d68:	4640      	mov	r0, r8
 8012d6a:	f000 fd0f 	bl	801378c <lv_tick_elaps>
 8012d6e:	61a0      	str	r0, [r4, #24]
        if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
 8012d70:	69a3      	ldr	r3, [r4, #24]
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d1bd      	bne.n	8012cf2 <lv_img_cache_open+0x4a>
 8012d76:	2301      	movs	r3, #1
 8012d78:	61a3      	str	r3, [r4, #24]
 8012d7a:	e7ba      	b.n	8012cf2 <lv_img_cache_open+0x4a>
 8012d7c:	20005f78 	.word	0x20005f78
 8012d80:	2000c594 	.word	0x2000c594
 8012d84:	80000002 	.word	0x80000002

08012d88 <lv_img_cache_invalidate_src>:
 * Invalidate an image source in the cache.
 * Useful if the image source is updated therefore it needs to be cached again.
 * @param src an image source path to a file or pointer to an `lv_img_dsc_t` variable.
 */
void lv_img_cache_invalidate_src(const void * src)
{
 8012d88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 8012d8c:	4b0f      	ldr	r3, [pc, #60]	; (8012dcc <lv_img_cache_invalidate_src+0x44>)

    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
 8012d8e:	4f10      	ldr	r7, [pc, #64]	; (8012dd0 <lv_img_cache_invalidate_src+0x48>)
    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 8012d90:	f8d3 8000 	ldr.w	r8, [r3]
{
 8012d94:	4606      	mov	r6, r0
    for(i = 0; i < entry_cnt; i++) {
 8012d96:	2500      	movs	r5, #0
        if(cache[i].dec_dsc.src == src || src == NULL) {
 8012d98:	f04f 0928 	mov.w	r9, #40	; 0x28
    for(i = 0; i < entry_cnt; i++) {
 8012d9c:	883a      	ldrh	r2, [r7, #0]
 8012d9e:	b2ab      	uxth	r3, r5
 8012da0:	429a      	cmp	r2, r3
 8012da2:	d801      	bhi.n	8012da8 <lv_img_cache_invalidate_src+0x20>

            memset(&cache[i].dec_dsc, 0, sizeof(lv_img_decoder_dsc_t));
            memset(&cache[i], 0, sizeof(lv_img_cache_entry_t));
        }
    }
}
 8012da4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(cache[i].dec_dsc.src == src || src == NULL) {
 8012da8:	b2ac      	uxth	r4, r5
 8012daa:	fb09 8404 	mla	r4, r9, r4, r8
 8012dae:	6863      	ldr	r3, [r4, #4]
 8012db0:	42b3      	cmp	r3, r6
 8012db2:	d000      	beq.n	8012db6 <lv_img_cache_invalidate_src+0x2e>
 8012db4:	b946      	cbnz	r6, 8012dc8 <lv_img_cache_invalidate_src+0x40>
            if(cache[i].dec_dsc.src != NULL) {
 8012db6:	b113      	cbz	r3, 8012dbe <lv_img_cache_invalidate_src+0x36>
                lv_img_decoder_close(&cache[i].dec_dsc);
 8012db8:	4620      	mov	r0, r4
 8012dba:	f000 fa8f 	bl	80132dc <lv_img_decoder_close>
            memset(&cache[i], 0, sizeof(lv_img_cache_entry_t));
 8012dbe:	2228      	movs	r2, #40	; 0x28
 8012dc0:	2100      	movs	r1, #0
 8012dc2:	4620      	mov	r0, r4
 8012dc4:	f006 fbb1 	bl	801952a <memset>
 8012dc8:	3501      	adds	r5, #1
 8012dca:	e7e7      	b.n	8012d9c <lv_img_cache_invalidate_src+0x14>
 8012dcc:	2000c594 	.word	0x2000c594
 8012dd0:	20005f78 	.word	0x20005f78

08012dd4 <lv_img_cache_set_size>:
{
 8012dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
 8012dd8:	4c14      	ldr	r4, [pc, #80]	; (8012e2c <lv_img_cache_set_size+0x58>)
 8012dda:	6823      	ldr	r3, [r4, #0]
{
 8012ddc:	4680      	mov	r8, r0
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
 8012dde:	b12b      	cbz	r3, 8012dec <lv_img_cache_set_size+0x18>
        lv_img_cache_invalidate_src(NULL);
 8012de0:	2000      	movs	r0, #0
 8012de2:	f7ff ffd1 	bl	8012d88 <lv_img_cache_invalidate_src>
        lv_mem_free(LV_GC_ROOT(_lv_img_cache_array));
 8012de6:	6820      	ldr	r0, [r4, #0]
 8012de8:	f001 f8b0 	bl	8013f4c <lv_mem_free>
    LV_GC_ROOT(_lv_img_cache_array) = lv_mem_alloc(sizeof(lv_img_cache_entry_t) * new_entry_cnt);
 8012dec:	2628      	movs	r6, #40	; 0x28
 8012dee:	fb06 f008 	mul.w	r0, r6, r8
 8012df2:	f001 f875 	bl	8013ee0 <lv_mem_alloc>
 8012df6:	6020      	str	r0, [r4, #0]
    lv_mem_assert(LV_GC_ROOT(_lv_img_cache_array));
 8012df8:	b900      	cbnz	r0, 8012dfc <lv_img_cache_set_size+0x28>
 8012dfa:	e7fe      	b.n	8012dfa <lv_img_cache_set_size+0x26>
    entry_cnt = new_entry_cnt;
 8012dfc:	4b0c      	ldr	r3, [pc, #48]	; (8012e30 <lv_img_cache_set_size+0x5c>)
    for(i = 0; i < entry_cnt; i++) {
 8012dfe:	2500      	movs	r5, #0
    entry_cnt = new_entry_cnt;
 8012e00:	f8a3 8000 	strh.w	r8, [r3]
    for(i = 0; i < entry_cnt; i++) {
 8012e04:	45a8      	cmp	r8, r5
 8012e06:	d101      	bne.n	8012e0c <lv_img_cache_set_size+0x38>
}
 8012e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        memset(&LV_GC_ROOT(_lv_img_cache_array)[i].dec_dsc, 0, sizeof(lv_img_decoder_dsc_t));
 8012e0c:	6820      	ldr	r0, [r4, #0]
 8012e0e:	fb06 f705 	mul.w	r7, r6, r5
 8012e12:	2224      	movs	r2, #36	; 0x24
 8012e14:	2100      	movs	r1, #0
 8012e16:	4438      	add	r0, r7
 8012e18:	f006 fb87 	bl	801952a <memset>
        memset(&LV_GC_ROOT(_lv_img_cache_array)[i], 0, sizeof(lv_img_cache_entry_t));
 8012e1c:	6820      	ldr	r0, [r4, #0]
 8012e1e:	2228      	movs	r2, #40	; 0x28
 8012e20:	2100      	movs	r1, #0
 8012e22:	4438      	add	r0, r7
 8012e24:	f006 fb81 	bl	801952a <memset>
 8012e28:	3501      	adds	r5, #1
 8012e2a:	e7eb      	b.n	8012e04 <lv_img_cache_set_size+0x30>
 8012e2c:	2000c594 	.word	0x2000c594
 8012e30:	20005f78 	.word	0x20005f78

08012e34 <lv_img_decoder_built_in_close>:
 * Close the pending decoding. Free resources etc.
 * @param decoder pointer to the decoder the function associated with
 * @param dsc pointer to decoder descriptor
 */
void lv_img_decoder_built_in_close(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
 8012e34:	b538      	push	{r3, r4, r5, lr}
    (void)decoder; /*Unused*/

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8012e36:	6a0c      	ldr	r4, [r1, #32]
{
 8012e38:	460d      	mov	r5, r1
    if(user_data) {
 8012e3a:	b144      	cbz	r4, 8012e4e <lv_img_decoder_built_in_close+0x1a>
        if(user_data->f) {
            lv_fs_close(user_data->f);
            lv_mem_free(user_data->f);
        }
#endif
        if(user_data->palette) lv_mem_free(user_data->palette);
 8012e3c:	6820      	ldr	r0, [r4, #0]
 8012e3e:	b108      	cbz	r0, 8012e44 <lv_img_decoder_built_in_close+0x10>
 8012e40:	f001 f884 	bl	8013f4c <lv_mem_free>

        lv_mem_free(user_data);
 8012e44:	4620      	mov	r0, r4
 8012e46:	f001 f881 	bl	8013f4c <lv_mem_free>

        dsc->user_data = NULL;
 8012e4a:	2300      	movs	r3, #0
 8012e4c:	622b      	str	r3, [r5, #32]
 8012e4e:	bd38      	pop	{r3, r4, r5, pc}

08012e50 <lv_img_decoder_built_in_read_line>:
{
 8012e50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8012e54:	7c08      	ldrb	r0, [r1, #16]
{
 8012e56:	461e      	mov	r6, r3
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8012e58:	f000 031f 	and.w	r3, r0, #31
{
 8012e5c:	b087      	sub	sp, #28
 8012e5e:	4614      	mov	r4, r2
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8012e60:	1f1a      	subs	r2, r3, #4
 8012e62:	2a02      	cmp	r2, #2
{
 8012e64:	460d      	mov	r5, r1
 8012e66:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 8012e6a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8012e6c:	d803      	bhi.n	8012e76 <lv_img_decoder_built_in_read_line+0x26>
        lv_fs_read(user_data->f, fs_buf, w, NULL);
        data_tmp = fs_buf;
#else
        LV_LOG_WARN("Image built-in alpha line reader can't read file because LV_USE_FILESYSTEM = 0");
        data_tmp = NULL; /*To avoid warnings*/
        return LV_RES_INV;
 8012e6e:	2000      	movs	r0, #0
}
 8012e70:	b007      	add	sp, #28
 8012e72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    } else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 8012e76:	f1a3 020b 	sub.w	r2, r3, #11
 8012e7a:	2a03      	cmp	r2, #3
 8012e7c:	f200 80b3 	bhi.w	8012fe6 <lv_img_decoder_built_in_read_line+0x196>
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 8012e80:	2200      	movs	r2, #0
 8012e82:	23ff      	movs	r3, #255	; 0xff
 8012e84:	f88d 2000 	strb.w	r2, [sp]
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 8012e88:	f88d 2004 	strb.w	r2, [sp, #4]
 8012e8c:	2255      	movs	r2, #85	; 0x55
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 8012e8e:	f88d 3001 	strb.w	r3, [sp, #1]
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 8012e92:	f88d 2005 	strb.w	r2, [sp, #5]
 8012e96:	f88d 3007 	strb.w	r3, [sp, #7]
 8012e9a:	22aa      	movs	r2, #170	; 0xaa
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 8012e9c:	4b92      	ldr	r3, [pc, #584]	; (80130e8 <lv_img_decoder_built_in_read_line+0x298>)
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 8012e9e:	f88d 2006 	strb.w	r2, [sp, #6]
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 8012ea2:	aa02      	add	r2, sp, #8
 8012ea4:	f103 0c10 	add.w	ip, r3, #16
 8012ea8:	4691      	mov	r9, r2
 8012eaa:	6818      	ldr	r0, [r3, #0]
 8012eac:	6859      	ldr	r1, [r3, #4]
 8012eae:	4696      	mov	lr, r2
 8012eb0:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8012eb4:	3308      	adds	r3, #8
 8012eb6:	4563      	cmp	r3, ip
 8012eb8:	4672      	mov	r2, lr
 8012eba:	d1f6      	bne.n	8012eaa <lv_img_decoder_built_in_read_line+0x5a>
    lv_color_t bg_color = dsc->style->image.color;
 8012ebc:	68ab      	ldr	r3, [r5, #8]
 8012ebe:	8e19      	ldrh	r1, [r3, #48]	; 0x30
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
 8012ec0:	2200      	movs	r2, #0
 8012ec2:	ea4f 2e11 	mov.w	lr, r1, lsr #8
 8012ec6:	463b      	mov	r3, r7
    for(i = 0; i < len; i++) {
 8012ec8:	b210      	sxth	r0, r2
 8012eca:	4580      	cmp	r8, r0
 8012ecc:	f103 0303 	add.w	r3, r3, #3
 8012ed0:	dc0e      	bgt.n	8012ef0 <lv_img_decoder_built_in_read_line+0xa0>
    uint8_t px_size            = lv_img_color_format_get_px_size(dsc->header.cf);
 8012ed2:	7c28      	ldrb	r0, [r5, #16]
 8012ed4:	f000 001f 	and.w	r0, r0, #31
 8012ed8:	f7fd fc20 	bl	801071c <lv_img_color_format_get_px_size>
    switch(dsc->header.cf) {
 8012edc:	7c2b      	ldrb	r3, [r5, #16]
 8012ede:	f003 031f 	and.w	r3, r3, #31
 8012ee2:	3b0b      	subs	r3, #11
 8012ee4:	2b03      	cmp	r3, #3
 8012ee6:	d85d      	bhi.n	8012fa4 <lv_img_decoder_built_in_read_line+0x154>
 8012ee8:	e8df f003 	tbb	[pc, r3]
 8012eec:	54402c08 	.word	0x54402c08
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
 8012ef0:	f803 1c03 	strb.w	r1, [r3, #-3]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
 8012ef4:	f803 ec02 	strb.w	lr, [r3, #-2]
 8012ef8:	3201      	adds	r2, #1
 8012efa:	e7e5      	b.n	8012ec8 <lv_img_decoder_built_in_read_line+0x78>
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 8012efc:	692a      	ldr	r2, [r5, #16]
 8012efe:	f3c2 228a 	ubfx	r2, r2, #10, #11
 8012f02:	10d3      	asrs	r3, r2, #3
            if(dsc->header.w & 0x7) w++;
 8012f04:	0751      	lsls	r1, r2, #29
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 8012f06:	bf08      	it	eq
 8012f08:	b21b      	sxtheq	r3, r3
            ofs += w * y + (x >> 3); /*First pixel*/
 8012f0a:	ea4f 02e4 	mov.w	r2, r4, asr #3
            if(dsc->header.w & 0x7) w++;
 8012f0e:	bf18      	it	ne
 8012f10:	3301      	addne	r3, #1
            pos       = 7 - (x & 0x7);
 8012f12:	43e4      	mvns	r4, r4
            ofs += w * y + (x >> 3); /*First pixel*/
 8012f14:	fb03 2306 	mla	r3, r3, r6, r2
            pos       = 7 - (x & 0x7);
 8012f18:	f004 0407 	and.w	r4, r4, #7
            opa_table = alpha1_opa_table;
 8012f1c:	46ee      	mov	lr, sp
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 8012f1e:	7b29      	ldrb	r1, [r5, #12]
 8012f20:	2900      	cmp	r1, #0
 8012f22:	d1a4      	bne.n	8012e6e <lv_img_decoder_built_in_read_line+0x1e>
        data_tmp = img_dsc->data + ofs;
 8012f24:	686a      	ldr	r2, [r5, #4]
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 8012f26:	2601      	movs	r6, #1
        data_tmp = img_dsc->data + ofs;
 8012f28:	6892      	ldr	r2, [r2, #8]
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 8012f2a:	4086      	lsls	r6, r0
 8012f2c:	3e01      	subs	r6, #1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];

        pos -= px_size;
        if(pos < 0) {
            pos = 8 - px_size;
 8012f2e:	f1c0 0c08 	rsb	ip, r0, #8
        data_tmp = img_dsc->data + ofs;
 8012f32:	4413      	add	r3, r2
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
 8012f34:	b2b6      	uxth	r6, r6
            pos = 8 - px_size;
 8012f36:	fa4f fc8c 	sxtb.w	ip, ip
    for(i = 0; i < len; i++) {
 8012f3a:	b20a      	sxth	r2, r1
 8012f3c:	4590      	cmp	r8, r2
 8012f3e:	dc34      	bgt.n	8012faa <lv_img_decoder_built_in_read_line+0x15a>
            pos = 8 - px_size;
            data_tmp++;
        }
    }

    return LV_RES_OK;
 8012f40:	2001      	movs	r0, #1
 8012f42:	e795      	b.n	8012e70 <lv_img_decoder_built_in_read_line+0x20>
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 8012f44:	692a      	ldr	r2, [r5, #16]
 8012f46:	f3c2 228a 	ubfx	r2, r2, #10, #11
 8012f4a:	1093      	asrs	r3, r2, #2
            if(dsc->header.w & 0x3) w++;
 8012f4c:	0792      	lsls	r2, r2, #30
            ofs += w * y + (x >> 2); /*First pixel*/
 8012f4e:	ea4f 02a4 	mov.w	r2, r4, asr #2
            pos       = 6 - ((x & 0x3) * 2);
 8012f52:	ea6f 0404 	mvn.w	r4, r4
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 8012f56:	bf0c      	ite	eq
 8012f58:	b21b      	sxtheq	r3, r3
            if(dsc->header.w & 0x3) w++;
 8012f5a:	3301      	addne	r3, #1
            pos       = 6 - ((x & 0x3) * 2);
 8012f5c:	f004 0403 	and.w	r4, r4, #3
            ofs += w * y + (x >> 2); /*First pixel*/
 8012f60:	fb03 2306 	mla	r3, r3, r6, r2
            pos       = 6 - ((x & 0x3) * 2);
 8012f64:	0064      	lsls	r4, r4, #1
            opa_table = alpha2_opa_table;
 8012f66:	f10d 0e04 	add.w	lr, sp, #4
 8012f6a:	e7d8      	b.n	8012f1e <lv_img_decoder_built_in_read_line+0xce>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8012f6c:	692a      	ldr	r2, [r5, #16]
 8012f6e:	f3c2 228a 	ubfx	r2, r2, #10, #11
 8012f72:	1053      	asrs	r3, r2, #1
            if(dsc->header.w & 0x1) w++;
 8012f74:	07d1      	lsls	r1, r2, #31
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8012f76:	bf58      	it	pl
 8012f78:	b21b      	sxthpl	r3, r3
            ofs += w * y + (x >> 1); /*First pixel*/
 8012f7a:	ea4f 0264 	mov.w	r2, r4, asr #1
            if(dsc->header.w & 0x1) w++;
 8012f7e:	bf48      	it	mi
 8012f80:	3301      	addmi	r3, #1
            pos       = 4 - ((x & 0x1) * 4);
 8012f82:	f014 0f01 	tst.w	r4, #1
            ofs += w * y + (x >> 1); /*First pixel*/
 8012f86:	fb03 2306 	mla	r3, r3, r6, r2
            pos       = 4 - ((x & 0x1) * 4);
 8012f8a:	bf0c      	ite	eq
 8012f8c:	2404      	moveq	r4, #4
 8012f8e:	2400      	movne	r4, #0
 8012f90:	46ce      	mov	lr, r9
 8012f92:	e7c4      	b.n	8012f1e <lv_img_decoder_built_in_read_line+0xce>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 8012f94:	692b      	ldr	r3, [r5, #16]
 8012f96:	f3c3 238a 	ubfx	r3, r3, #10, #11
            ofs += w * y + x;  /*First pixel*/
 8012f9a:	fb16 4303 	smlabb	r3, r6, r3, r4
            pos = 0;
 8012f9e:	2400      	movs	r4, #0
    const lv_opa_t * opa_table = NULL;
 8012fa0:	46a6      	mov	lr, r4
 8012fa2:	e7bc      	b.n	8012f1e <lv_img_decoder_built_in_read_line+0xce>
    int8_t pos   = 0;
 8012fa4:	2400      	movs	r4, #0
    uint32_t ofs = 0;
 8012fa6:	4623      	mov	r3, r4
 8012fa8:	e7fa      	b.n	8012fa0 <lv_img_decoder_built_in_read_line+0x150>
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
 8012faa:	781a      	ldrb	r2, [r3, #0]
 8012fac:	fa06 f904 	lsl.w	r9, r6, r4
 8012fb0:	ea02 0209 	and.w	r2, r2, r9
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 8012fb4:	f895 9010 	ldrb.w	r9, [r5, #16]
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
 8012fb8:	4122      	asrs	r2, r4
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 8012fba:	f009 091f 	and.w	r9, r9, #31
 8012fbe:	f1b9 0f0e 	cmp.w	r9, #14
 8012fc2:	b2d2      	uxtb	r2, r2
 8012fc4:	eb01 0941 	add.w	r9, r1, r1, lsl #1
        pos -= px_size;
 8012fc8:	eba4 0400 	sub.w	r4, r4, r0
 8012fcc:	b264      	sxtb	r4, r4
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 8012fce:	44b9      	add	r9, r7
 8012fd0:	bf18      	it	ne
 8012fd2:	f81e 2002 	ldrbne.w	r2, [lr, r2]
 8012fd6:	f889 2002 	strb.w	r2, [r9, #2]
        if(pos < 0) {
 8012fda:	2c00      	cmp	r4, #0
            pos = 8 - px_size;
 8012fdc:	bfbc      	itt	lt
 8012fde:	4664      	movlt	r4, ip
            data_tmp++;
 8012fe0:	3301      	addlt	r3, #1
 8012fe2:	3101      	adds	r1, #1
 8012fe4:	e7a9      	b.n	8012f3a <lv_img_decoder_built_in_read_line+0xea>
    } else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
 8012fe6:	3b07      	subs	r3, #7
 8012fe8:	2b03      	cmp	r3, #3
 8012fea:	f63f af40 	bhi.w	8012e6e <lv_img_decoder_built_in_read_line+0x1e>
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 8012fee:	f000 001f 	and.w	r0, r0, #31
 8012ff2:	f7fd fb93 	bl	801071c <lv_img_color_format_get_px_size>
    switch(dsc->header.cf) {
 8012ff6:	7c2b      	ldrb	r3, [r5, #16]
 8012ff8:	f003 031f 	and.w	r3, r3, #31
 8012ffc:	3b07      	subs	r3, #7
 8012ffe:	2b03      	cmp	r3, #3
 8013000:	d86f      	bhi.n	80130e2 <lv_img_decoder_built_in_read_line+0x292>
 8013002:	e8df f003 	tbb	[pc, r3]
 8013006:	3d02      	.short	0x3d02
 8013008:	6550      	.short	0x6550
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 801300a:	692a      	ldr	r2, [r5, #16]
 801300c:	f3c2 228a 	ubfx	r2, r2, #10, #11
 8013010:	10d3      	asrs	r3, r2, #3
            if(dsc->header.w & 0x7) w++;
 8013012:	0752      	lsls	r2, r2, #29
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 8013014:	bf08      	it	eq
 8013016:	b21b      	sxtheq	r3, r3
            ofs += w * y + (x >> 3); /*First pixel*/
 8013018:	ea4f 02e4 	mov.w	r2, r4, asr #3
            if(dsc->header.w & 0x7) w++;
 801301c:	bf18      	it	ne
 801301e:	3301      	addne	r3, #1
            ofs += w * y + (x >> 3); /*First pixel*/
 8013020:	fb03 2306 	mla	r3, r3, r6, r2
            pos = 7 - (x & 0x7);
 8013024:	43e4      	mvns	r4, r4
            ofs += 8;                /*Skip the palette*/
 8013026:	3308      	adds	r3, #8
            pos = 7 - (x & 0x7);
 8013028:	f004 0407 	and.w	r4, r4, #7
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 801302c:	7b2e      	ldrb	r6, [r5, #12]
 801302e:	2e00      	cmp	r6, #0
 8013030:	f47f af1d 	bne.w	8012e6e <lv_img_decoder_built_in_read_line+0x1e>
        data_tmp                     = img_dsc->data + ofs;
 8013034:	6869      	ldr	r1, [r5, #4]
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8013036:	6a2a      	ldr	r2, [r5, #32]
        data_tmp                     = img_dsc->data + ofs;
 8013038:	6889      	ldr	r1, [r1, #8]
 801303a:	440b      	add	r3, r1
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 801303c:	2101      	movs	r1, #1
 801303e:	4081      	lsls	r1, r0
 8013040:	3901      	subs	r1, #1
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
 8013042:	4635      	mov	r5, r6
            pos = 8 - px_size;
 8013044:	f1c0 0608 	rsb	r6, r0, #8
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
 8013048:	fa1f fe81 	uxth.w	lr, r1
            pos = 8 - px_size;
 801304c:	b276      	sxtb	r6, r6
    for(i = 0; i < len; i++) {
 801304e:	b229      	sxth	r1, r5
 8013050:	4588      	cmp	r8, r1
 8013052:	f77f af75 	ble.w	8012f40 <lv_img_decoder_built_in_read_line+0xf0>
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
 8013056:	7819      	ldrb	r1, [r3, #0]
 8013058:	fa0e fc04 	lsl.w	ip, lr, r4
 801305c:	ea01 010c 	and.w	r1, r1, ip
 8013060:	4121      	asrs	r1, r4
        cbuf[i] = user_data->palette[val_act];
 8013062:	f8d2 c000 	ldr.w	ip, [r2]
 8013066:	b2c9      	uxtb	r1, r1
        pos -= px_size;
 8013068:	1a24      	subs	r4, r4, r0
 801306a:	b264      	sxtb	r4, r4
        if(pos < 0) {
 801306c:	2c00      	cmp	r4, #0
        cbuf[i] = user_data->palette[val_act];
 801306e:	f83c 1011 	ldrh.w	r1, [ip, r1, lsl #1]
 8013072:	f827 1015 	strh.w	r1, [r7, r5, lsl #1]
            pos = 8 - px_size;
 8013076:	bfbc      	itt	lt
 8013078:	4634      	movlt	r4, r6
            data_tmp++;
 801307a:	3301      	addlt	r3, #1
 801307c:	3501      	adds	r5, #1
 801307e:	e7e6      	b.n	801304e <lv_img_decoder_built_in_read_line+0x1fe>
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 8013080:	692a      	ldr	r2, [r5, #16]
 8013082:	f3c2 228a 	ubfx	r2, r2, #10, #11
 8013086:	1093      	asrs	r3, r2, #2
            if(dsc->header.w & 0x3) w++;
 8013088:	0791      	lsls	r1, r2, #30
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 801308a:	bf08      	it	eq
 801308c:	b21b      	sxtheq	r3, r3
            ofs += w * y + (x >> 2); /*First pixel*/
 801308e:	ea4f 02a4 	mov.w	r2, r4, asr #2
            if(dsc->header.w & 0x3) w++;
 8013092:	bf18      	it	ne
 8013094:	3301      	addne	r3, #1
            pos = 6 - ((x & 0x3) * 2);
 8013096:	43e4      	mvns	r4, r4
            ofs += w * y + (x >> 2); /*First pixel*/
 8013098:	fb03 2306 	mla	r3, r3, r6, r2
            pos = 6 - ((x & 0x3) * 2);
 801309c:	f004 0403 	and.w	r4, r4, #3
            ofs += 16;               /*Skip the palette*/
 80130a0:	3310      	adds	r3, #16
            pos = 6 - ((x & 0x3) * 2);
 80130a2:	0064      	lsls	r4, r4, #1
 80130a4:	e7c2      	b.n	801302c <lv_img_decoder_built_in_read_line+0x1dc>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 80130a6:	692a      	ldr	r2, [r5, #16]
 80130a8:	f3c2 228a 	ubfx	r2, r2, #10, #11
 80130ac:	1053      	asrs	r3, r2, #1
            if(dsc->header.w & 0x1) w++;
 80130ae:	07d2      	lsls	r2, r2, #31
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 80130b0:	bf58      	it	pl
 80130b2:	b21b      	sxthpl	r3, r3
            ofs += w * y + (x >> 1); /*First pixel*/
 80130b4:	ea4f 0264 	mov.w	r2, r4, asr #1
            if(dsc->header.w & 0x1) w++;
 80130b8:	bf48      	it	mi
 80130ba:	3301      	addmi	r3, #1
            ofs += w * y + (x >> 1); /*First pixel*/
 80130bc:	fb03 2306 	mla	r3, r3, r6, r2
            pos = 4 - ((x & 0x1) * 4);
 80130c0:	f014 0f01 	tst.w	r4, #1
            ofs += 64;               /*Skip the palette*/
 80130c4:	f103 0340 	add.w	r3, r3, #64	; 0x40
            pos = 4 - ((x & 0x1) * 4);
 80130c8:	bf0c      	ite	eq
 80130ca:	2404      	moveq	r4, #4
 80130cc:	2400      	movne	r4, #0
 80130ce:	e7ad      	b.n	801302c <lv_img_decoder_built_in_read_line+0x1dc>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 80130d0:	692b      	ldr	r3, [r5, #16]
 80130d2:	f3c3 238a 	ubfx	r3, r3, #10, #11
            ofs += w * y + x;  /*First pixel*/
 80130d6:	fb16 4303 	smlabb	r3, r6, r3, r4
            ofs += 1024;       /*Skip the palette*/
 80130da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
            pos = 0;
 80130de:	2400      	movs	r4, #0
 80130e0:	e7a4      	b.n	801302c <lv_img_decoder_built_in_read_line+0x1dc>
    uint32_t ofs = 0;
 80130e2:	2300      	movs	r3, #0
    int8_t pos   = 0;
 80130e4:	461c      	mov	r4, r3
 80130e6:	e7a1      	b.n	801302c <lv_img_decoder_built_in_read_line+0x1dc>
 80130e8:	0801cb3a 	.word	0x0801cb3a

080130ec <lv_img_decoder_built_in_open>:
{
 80130ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 80130ee:	7b0a      	ldrb	r2, [r1, #12]
 80130f0:	2a01      	cmp	r2, #1
{
 80130f2:	460c      	mov	r4, r1
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 80130f4:	d101      	bne.n	80130fa <lv_img_decoder_built_in_open+0xe>
        return LV_RES_INV;
 80130f6:	2000      	movs	r0, #0
}
 80130f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_img_cf_t cf = dsc->header.cf;
 80130fa:	7c0b      	ldrb	r3, [r1, #16]
 80130fc:	f003 031f 	and.w	r3, r3, #31
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 8013100:	1f1d      	subs	r5, r3, #4
 8013102:	2d02      	cmp	r5, #2
 8013104:	d805      	bhi.n	8013112 <lv_img_decoder_built_in_open+0x26>
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 8013106:	bb2a      	cbnz	r2, 8013154 <lv_img_decoder_built_in_open+0x68>
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
 8013108:	684b      	ldr	r3, [r1, #4]
 801310a:	689b      	ldr	r3, [r3, #8]
            dsc->img_data = NULL;
 801310c:	6163      	str	r3, [r4, #20]
            return LV_RES_OK;
 801310e:	2001      	movs	r0, #1
 8013110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(cf == LV_IMG_CF_INDEXED_1BIT || cf == LV_IMG_CF_INDEXED_2BIT || cf == LV_IMG_CF_INDEXED_4BIT ||
 8013112:	1fda      	subs	r2, r3, #7
 8013114:	2a03      	cmp	r2, #3
 8013116:	d836      	bhi.n	8013186 <lv_img_decoder_built_in_open+0x9a>
        uint8_t px_size       = lv_img_color_format_get_px_size(cf);
 8013118:	4618      	mov	r0, r3
 801311a:	f7fd faff 	bl	801071c <lv_img_color_format_get_px_size>
        if(dsc->user_data == NULL) {
 801311e:	6a26      	ldr	r6, [r4, #32]
        uint8_t px_size       = lv_img_color_format_get_px_size(cf);
 8013120:	4607      	mov	r7, r0
        if(dsc->user_data == NULL) {
 8013122:	b936      	cbnz	r6, 8013132 <lv_img_decoder_built_in_open+0x46>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 8013124:	2004      	movs	r0, #4
 8013126:	f000 fedb 	bl	8013ee0 <lv_mem_alloc>
 801312a:	6220      	str	r0, [r4, #32]
            if(dsc->user_data == NULL) {
 801312c:	b900      	cbnz	r0, 8013130 <lv_img_decoder_built_in_open+0x44>
 801312e:	e7fe      	b.n	801312e <lv_img_decoder_built_in_open+0x42>
            memset(dsc->user_data, 0, sizeof(lv_img_decoder_built_in_data_t));
 8013130:	6006      	str	r6, [r0, #0]
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 8013132:	2502      	movs	r5, #2
 8013134:	40bd      	lsls	r5, r7
 8013136:	4628      	mov	r0, r5
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8013138:	6a26      	ldr	r6, [r4, #32]
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 801313a:	f000 fed1 	bl	8013ee0 <lv_mem_alloc>
 801313e:	6030      	str	r0, [r6, #0]
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 8013140:	7b23      	ldrb	r3, [r4, #12]
 8013142:	2b01      	cmp	r3, #1
 8013144:	d0d7      	beq.n	80130f6 <lv_img_decoder_built_in_open+0xa>
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
 8013146:	6863      	ldr	r3, [r4, #4]
 8013148:	689a      	ldr	r2, [r3, #8]
 801314a:	4405      	add	r5, r0
            for(i = 0; i < palette_size; i++) {
 801314c:	4285      	cmp	r5, r0
 801314e:	f102 0204 	add.w	r2, r2, #4
 8013152:	d101      	bne.n	8013158 <lv_img_decoder_built_in_open+0x6c>
            dsc->img_data = NULL;
 8013154:	2300      	movs	r3, #0
 8013156:	e7d9      	b.n	801310c <lv_img_decoder_built_in_open+0x20>
    color.ch.blue  = (uint16_t)(b8 >> 3);
 8013158:	f812 3c04 	ldrb.w	r3, [r2, #-4]
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
 801315c:	7807      	ldrb	r7, [r0, #0]
    color.ch.green = (uint16_t)(g8 >> 2);
 801315e:	f812 6c03 	ldrb.w	r6, [r2, #-3]
    color.ch.red   = (uint16_t)(r8 >> 3);
 8013162:	f812 1c02 	ldrb.w	r1, [r2, #-2]
    color.ch.blue  = (uint16_t)(b8 >> 3);
 8013166:	08db      	lsrs	r3, r3, #3
 8013168:	f363 0704 	bfi	r7, r3, #0, #5
 801316c:	7007      	strb	r7, [r0, #0]
 801316e:	8803      	ldrh	r3, [r0, #0]
    color.ch.green = (uint16_t)(g8 >> 2);
 8013170:	08b6      	lsrs	r6, r6, #2
 8013172:	f366 134a 	bfi	r3, r6, #5, #6
 8013176:	8003      	strh	r3, [r0, #0]
    color.ch.red   = (uint16_t)(r8 >> 3);
 8013178:	08c9      	lsrs	r1, r1, #3
 801317a:	0a1b      	lsrs	r3, r3, #8
 801317c:	f361 03c7 	bfi	r3, r1, #3, #5
 8013180:	7043      	strb	r3, [r0, #1]
 8013182:	3002      	adds	r0, #2
 8013184:	e7e2      	b.n	801314c <lv_img_decoder_built_in_open+0x60>
    else if(cf == LV_IMG_CF_ALPHA_1BIT || cf == LV_IMG_CF_ALPHA_2BIT || cf == LV_IMG_CF_ALPHA_4BIT ||
 8013186:	3b0b      	subs	r3, #11
 8013188:	2b03      	cmp	r3, #3
 801318a:	d9e3      	bls.n	8013154 <lv_img_decoder_built_in_open+0x68>
        lv_img_decoder_built_in_close(decoder, dsc);
 801318c:	f7ff fe52 	bl	8012e34 <lv_img_decoder_built_in_close>
 8013190:	e7b1      	b.n	80130f6 <lv_img_decoder_built_in_open+0xa>

08013192 <lv_img_decoder_built_in_info>:
{
 8013192:	b538      	push	{r3, r4, r5, lr}
    lv_img_src_t src_type = lv_img_src_get_type(src);
 8013194:	4608      	mov	r0, r1
{
 8013196:	460d      	mov	r5, r1
 8013198:	4614      	mov	r4, r2
    lv_img_src_t src_type = lv_img_src_get_type(src);
 801319a:	f7fd fbc1 	bl	8010920 <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 801319e:	b9c8      	cbnz	r0, 80131d4 <lv_img_decoder_built_in_info+0x42>
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
 80131a0:	782b      	ldrb	r3, [r5, #0]
 80131a2:	f003 031f 	and.w	r3, r3, #31
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 80131a6:	1f1a      	subs	r2, r3, #4
 80131a8:	2a0a      	cmp	r2, #10
 80131aa:	d824      	bhi.n	80131f6 <lv_img_decoder_built_in_info+0x64>
        header->w  = ((lv_img_dsc_t *)src)->header.w;
 80131ac:	682a      	ldr	r2, [r5, #0]
 80131ae:	6821      	ldr	r1, [r4, #0]
 80131b0:	f3c2 228a 	ubfx	r2, r2, #10, #11
 80131b4:	f362 2194 	bfi	r1, r2, #10, #11
 80131b8:	6021      	str	r1, [r4, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 80131ba:	886a      	ldrh	r2, [r5, #2]
 80131bc:	8861      	ldrh	r1, [r4, #2]
 80131be:	f3c2 124a 	ubfx	r2, r2, #5, #11
 80131c2:	f362 114f 	bfi	r1, r2, #5, #11
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 80131c6:	7822      	ldrb	r2, [r4, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 80131c8:	8061      	strh	r1, [r4, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 80131ca:	f363 0204 	bfi	r2, r3, #0, #5
 80131ce:	7022      	strb	r2, [r4, #0]
    return LV_RES_OK;
 80131d0:	2001      	movs	r0, #1
 80131d2:	bd38      	pop	{r3, r4, r5, pc}
    else if(src_type == LV_IMG_SRC_SYMBOL) {
 80131d4:	2802      	cmp	r0, #2
 80131d6:	d10d      	bne.n	80131f4 <lv_img_decoder_built_in_info+0x62>
        header->w = 1;
 80131d8:	6823      	ldr	r3, [r4, #0]
 80131da:	2001      	movs	r0, #1
 80131dc:	f360 2394 	bfi	r3, r0, #10, #11
        header->h = 1;
 80131e0:	0c1a      	lsrs	r2, r3, #16
 80131e2:	f360 124f 	bfi	r2, r0, #5, #11
        header->w = 1;
 80131e6:	6023      	str	r3, [r4, #0]
        header->h = 1;
 80131e8:	8062      	strh	r2, [r4, #2]
        header->cf = LV_IMG_CF_ALPHA_1BIT;
 80131ea:	220b      	movs	r2, #11
 80131ec:	f362 0304 	bfi	r3, r2, #0, #5
 80131f0:	7023      	strb	r3, [r4, #0]
 80131f2:	bd38      	pop	{r3, r4, r5, pc}
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 80131f4:	2000      	movs	r0, #0
}
 80131f6:	bd38      	pop	{r3, r4, r5, pc}

080131f8 <lv_img_decoder_get_info>:
    header->always_zero = 0;
 80131f8:	780b      	ldrb	r3, [r1, #0]
 80131fa:	f36f 1347 	bfc	r3, #5, #3
{
 80131fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013202:	4607      	mov	r7, r0
    header->always_zero = 0;
 8013204:	700b      	strb	r3, [r1, #0]
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 8013206:	480d      	ldr	r0, [pc, #52]	; (801323c <lv_img_decoder_get_info+0x44>)
 8013208:	f8df 8030 	ldr.w	r8, [pc, #48]	; 801323c <lv_img_decoder_get_info+0x44>
{
 801320c:	460e      	mov	r6, r1
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 801320e:	f000 fd1f 	bl	8013c50 <lv_ll_get_head>
    lv_res_t res = LV_RES_INV;
 8013212:	2400      	movs	r4, #0
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 8013214:	4605      	mov	r5, r0
 8013216:	b915      	cbnz	r5, 801321e <lv_img_decoder_get_info+0x26>
}
 8013218:	4620      	mov	r0, r4
 801321a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(d->info_cb) {
 801321e:	682c      	ldr	r4, [r5, #0]
 8013220:	b134      	cbz	r4, 8013230 <lv_img_decoder_get_info+0x38>
            res = d->info_cb(d, src, header);
 8013222:	4632      	mov	r2, r6
 8013224:	4639      	mov	r1, r7
 8013226:	4628      	mov	r0, r5
 8013228:	47a0      	blx	r4
            if(res == LV_RES_OK) break;
 801322a:	2801      	cmp	r0, #1
            res = d->info_cb(d, src, header);
 801322c:	4604      	mov	r4, r0
            if(res == LV_RES_OK) break;
 801322e:	d0f3      	beq.n	8013218 <lv_img_decoder_get_info+0x20>
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 8013230:	4629      	mov	r1, r5
 8013232:	4640      	mov	r0, r8
 8013234:	f000 fd12 	bl	8013c5c <lv_ll_get_next>
 8013238:	4605      	mov	r5, r0
 801323a:	e7ec      	b.n	8013216 <lv_img_decoder_get_info+0x1e>
 801323c:	2000c578 	.word	0x2000c578

08013240 <lv_img_decoder_open>:
{
 8013240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013244:	4605      	mov	r5, r0
    dsc->style     = style;
 8013246:	6082      	str	r2, [r0, #8]
    dsc->src       = src;
 8013248:	6069      	str	r1, [r5, #4]
    dsc->src_type  = lv_img_src_get_type(src);
 801324a:	4608      	mov	r0, r1
{
 801324c:	460f      	mov	r7, r1
    dsc->src_type  = lv_img_src_get_type(src);
 801324e:	f7fd fb67 	bl	8010920 <lv_img_src_get_type>
    dsc->user_data = NULL;
 8013252:	2400      	movs	r4, #0
    dsc->src_type  = lv_img_src_get_type(src);
 8013254:	7328      	strb	r0, [r5, #12]
    dsc->user_data = NULL;
 8013256:	622c      	str	r4, [r5, #32]
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 8013258:	4817      	ldr	r0, [pc, #92]	; (80132b8 <lv_img_decoder_open+0x78>)
 801325a:	f8df a05c 	ldr.w	sl, [pc, #92]	; 80132b8 <lv_img_decoder_open+0x78>
 801325e:	f000 fcf7 	bl	8013c50 <lv_ll_get_head>
        res = d->info_cb(d, src, &dsc->header);
 8013262:	f105 0910 	add.w	r9, r5, #16
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 8013266:	4606      	mov	r6, r0
        dsc->error_msg = NULL;
 8013268:	46a0      	mov	r8, r4
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 801326a:	b946      	cbnz	r6, 801327e <lv_img_decoder_open+0x3e>
    if(res == LV_RES_INV) {
 801326c:	b924      	cbnz	r4, 8013278 <lv_img_decoder_open+0x38>
        memset(dsc, 0, sizeof(lv_img_decoder_dsc_t));
 801326e:	2224      	movs	r2, #36	; 0x24
 8013270:	4621      	mov	r1, r4
 8013272:	4628      	mov	r0, r5
 8013274:	f006 f959 	bl	801952a <memset>
}
 8013278:	4620      	mov	r0, r4
 801327a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if(d->info_cb == NULL || d->open_cb == NULL) continue;
 801327e:	6833      	ldr	r3, [r6, #0]
 8013280:	b1a3      	cbz	r3, 80132ac <lv_img_decoder_open+0x6c>
 8013282:	6872      	ldr	r2, [r6, #4]
 8013284:	b192      	cbz	r2, 80132ac <lv_img_decoder_open+0x6c>
        res = d->info_cb(d, src, &dsc->header);
 8013286:	464a      	mov	r2, r9
 8013288:	4639      	mov	r1, r7
 801328a:	4630      	mov	r0, r6
 801328c:	4798      	blx	r3
        if(res != LV_RES_OK) continue;
 801328e:	2801      	cmp	r0, #1
        res = d->info_cb(d, src, &dsc->header);
 8013290:	4604      	mov	r4, r0
        if(res != LV_RES_OK) continue;
 8013292:	d10b      	bne.n	80132ac <lv_img_decoder_open+0x6c>
        dsc->error_msg = NULL;
 8013294:	f8c5 801c 	str.w	r8, [r5, #28]
        dsc->img_data  = NULL;
 8013298:	f8c5 8014 	str.w	r8, [r5, #20]
        dsc->decoder   = d;
 801329c:	602e      	str	r6, [r5, #0]
        res = d->open_cb(d, dsc);
 801329e:	6873      	ldr	r3, [r6, #4]
 80132a0:	4629      	mov	r1, r5
 80132a2:	4630      	mov	r0, r6
 80132a4:	4798      	blx	r3
        if(res == LV_RES_OK) break;
 80132a6:	2801      	cmp	r0, #1
        res = d->open_cb(d, dsc);
 80132a8:	4604      	mov	r4, r0
        if(res == LV_RES_OK) break;
 80132aa:	d0e5      	beq.n	8013278 <lv_img_decoder_open+0x38>
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 80132ac:	4631      	mov	r1, r6
 80132ae:	4650      	mov	r0, sl
 80132b0:	f000 fcd4 	bl	8013c5c <lv_ll_get_next>
 80132b4:	4606      	mov	r6, r0
 80132b6:	e7d8      	b.n	801326a <lv_img_decoder_open+0x2a>
 80132b8:	2000c578 	.word	0x2000c578

080132bc <lv_img_decoder_read_line>:
{
 80132bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80132be:	4605      	mov	r5, r0
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
 80132c0:	6800      	ldr	r0, [r0, #0]
 80132c2:	6884      	ldr	r4, [r0, #8]
 80132c4:	b144      	cbz	r4, 80132d8 <lv_img_decoder_read_line+0x1c>
 80132c6:	9e06      	ldr	r6, [sp, #24]
 80132c8:	e88d 0048 	stmia.w	sp, {r3, r6}
 80132cc:	4613      	mov	r3, r2
 80132ce:	460a      	mov	r2, r1
 80132d0:	4629      	mov	r1, r5
 80132d2:	47a0      	blx	r4
}
 80132d4:	b002      	add	sp, #8
 80132d6:	bd70      	pop	{r4, r5, r6, pc}
    lv_res_t res = LV_RES_INV;
 80132d8:	4620      	mov	r0, r4
 80132da:	e7fb      	b.n	80132d4 <lv_img_decoder_read_line+0x18>

080132dc <lv_img_decoder_close>:
{
 80132dc:	4601      	mov	r1, r0
    if(dsc->decoder) {
 80132de:	6800      	ldr	r0, [r0, #0]
 80132e0:	b110      	cbz	r0, 80132e8 <lv_img_decoder_close+0xc>
        if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
 80132e2:	68c2      	ldr	r2, [r0, #12]
 80132e4:	b102      	cbz	r2, 80132e8 <lv_img_decoder_close+0xc>
 80132e6:	4710      	bx	r2
 80132e8:	4770      	bx	lr
	...

080132ec <lv_img_decoder_create>:
{
 80132ec:	b510      	push	{r4, lr}
    decoder = lv_ll_ins_head(&LV_GC_ROOT(_lv_img_defoder_ll));
 80132ee:	4806      	ldr	r0, [pc, #24]	; (8013308 <lv_img_decoder_create+0x1c>)
 80132f0:	f000 fc72 	bl	8013bd8 <lv_ll_ins_head>
    lv_mem_assert(decoder);
 80132f4:	4604      	mov	r4, r0
 80132f6:	b900      	cbnz	r0, 80132fa <lv_img_decoder_create+0xe>
 80132f8:	e7fe      	b.n	80132f8 <lv_img_decoder_create+0xc>
    memset(decoder, 0, sizeof(lv_img_decoder_t));
 80132fa:	2214      	movs	r2, #20
 80132fc:	2100      	movs	r1, #0
 80132fe:	f006 f914 	bl	801952a <memset>
}
 8013302:	4620      	mov	r0, r4
 8013304:	bd10      	pop	{r4, pc}
 8013306:	bf00      	nop
 8013308:	2000c578 	.word	0x2000c578

0801330c <lv_img_decoder_init>:
{
 801330c:	b508      	push	{r3, lr}
    lv_ll_init(&LV_GC_ROOT(_lv_img_defoder_ll), sizeof(lv_img_decoder_t));
 801330e:	2114      	movs	r1, #20
 8013310:	4807      	ldr	r0, [pc, #28]	; (8013330 <lv_img_decoder_init+0x24>)
 8013312:	f000 fc57 	bl	8013bc4 <lv_ll_init>
    decoder = lv_img_decoder_create();
 8013316:	f7ff ffe9 	bl	80132ec <lv_img_decoder_create>
    if(decoder == NULL) {
 801331a:	b900      	cbnz	r0, 801331e <lv_img_decoder_init+0x12>
 801331c:	e7fe      	b.n	801331c <lv_img_decoder_init+0x10>
    decoder->info_cb = info_cb;
 801331e:	4b05      	ldr	r3, [pc, #20]	; (8013334 <lv_img_decoder_init+0x28>)
 8013320:	6003      	str	r3, [r0, #0]
    decoder->open_cb = open_cb;
 8013322:	4b05      	ldr	r3, [pc, #20]	; (8013338 <lv_img_decoder_init+0x2c>)
 8013324:	6043      	str	r3, [r0, #4]
    decoder->read_line_cb = read_line_cb;
 8013326:	4b05      	ldr	r3, [pc, #20]	; (801333c <lv_img_decoder_init+0x30>)
 8013328:	6083      	str	r3, [r0, #8]
    decoder->close_cb = close_cb;
 801332a:	4b05      	ldr	r3, [pc, #20]	; (8013340 <lv_img_decoder_init+0x34>)
 801332c:	60c3      	str	r3, [r0, #12]
 801332e:	bd08      	pop	{r3, pc}
 8013330:	2000c578 	.word	0x2000c578
 8013334:	08013193 	.word	0x08013193
 8013338:	080130ed 	.word	0x080130ed
 801333c:	08012e51 	.word	0x08012e51
 8013340:	08012e35 	.word	0x08012e35

08013344 <lv_font_get_glyph_bitmap>:
 * @param letter an UNICODE character code
 * @return  pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter)
{
    return font_p->get_glyph_bitmap(font_p, letter);
 8013344:	6843      	ldr	r3, [r0, #4]
 8013346:	4718      	bx	r3

08013348 <lv_font_get_glyph_dsc>:
 * @param letter an UNICODE letter code
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter, uint32_t letter_next)
{
 8013348:	b410      	push	{r4}
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
 801334a:	6804      	ldr	r4, [r0, #0]
 801334c:	46a4      	mov	ip, r4
}
 801334e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
 8013352:	4760      	bx	ip

08013354 <lv_font_get_glyph_width>:
 * @param letter an UNICODE letter
 * @param letter_next the next letter after `letter`. Used for kerning
 * @return the width of the glyph
 */
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
{
 8013354:	b507      	push	{r0, r1, r2, lr}
    lv_font_glyph_dsc_t g;
    bool ret;
    ret = lv_font_get_glyph_dsc(font, &g, letter, letter_next);
 8013356:	4613      	mov	r3, r2
 8013358:	460a      	mov	r2, r1
 801335a:	4669      	mov	r1, sp
 801335c:	f7ff fff4 	bl	8013348 <lv_font_get_glyph_dsc>
    if(ret) return g.adv_w;
 8013360:	b108      	cbz	r0, 8013366 <lv_font_get_glyph_width+0x12>
 8013362:	f8bd 0000 	ldrh.w	r0, [sp]
    else return 0;
}
 8013366:	b003      	add	sp, #12
 8013368:	f85d fb04 	ldr.w	pc, [sp], #4

0801336c <kern_pair_8_compare>:
{
    const uint8_t * ref8_p = ref;
    const uint8_t * element8_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
 801336c:	7803      	ldrb	r3, [r0, #0]
 801336e:	780a      	ldrb	r2, [r1, #0]
 8013370:	4293      	cmp	r3, r2
 8013372:	bf11      	iteee	ne
 8013374:	1a98      	subne	r0, r3, r2
    else return (int32_t) ref8_p[1] - element8_p[1];
 8013376:	784b      	ldrbeq	r3, [r1, #1]
 8013378:	7840      	ldrbeq	r0, [r0, #1]
 801337a:	1ac0      	subeq	r0, r0, r3

}
 801337c:	4770      	bx	lr

0801337e <kern_pair_16_compare>:
{
    const uint16_t * ref16_p = ref;
    const uint16_t * element16_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
 801337e:	8803      	ldrh	r3, [r0, #0]
 8013380:	880a      	ldrh	r2, [r1, #0]
 8013382:	4293      	cmp	r3, r2
 8013384:	bf11      	iteee	ne
 8013386:	1a98      	subne	r0, r3, r2
    else return (int32_t) ref16_p[1] - element16_p[1];
 8013388:	884b      	ldrheq	r3, [r1, #2]
 801338a:	8840      	ldrheq	r0, [r0, #2]
 801338c:	1ac0      	subeq	r0, r0, r3
}
 801338e:	4770      	bx	lr

08013390 <unicode_list_compare>:
 *  @retval > 0   Reference is less than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
    return (*(uint16_t *)ref) - (*(uint16_t *)element);
 8013390:	8800      	ldrh	r0, [r0, #0]
 8013392:	880b      	ldrh	r3, [r1, #0]
}
 8013394:	1ac0      	subs	r0, r0, r3
 8013396:	4770      	bx	lr

08013398 <get_glyph_dsc_id.isra.0.part.1>:
static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
 8013398:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 801339a:	6804      	ldr	r4, [r0, #0]
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
 801339c:	6963      	ldr	r3, [r4, #20]
 801339e:	428b      	cmp	r3, r1
static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
 80133a0:	b085      	sub	sp, #20
 80133a2:	460d      	mov	r5, r1
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
 80133a4:	d00b      	beq.n	80133be <get_glyph_dsc_id.isra.0.part.1+0x26>
 80133a6:	2700      	movs	r7, #0
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 80133a8:	f04f 0e14 	mov.w	lr, #20
    for(i = 0; i < fdsc->cmap_num; i++) {
 80133ac:	8a63      	ldrh	r3, [r4, #18]
 80133ae:	b2be      	uxth	r6, r7
 80133b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80133b4:	429e      	cmp	r6, r3
 80133b6:	db05      	blt.n	80133c4 <get_glyph_dsc_id.isra.0.part.1+0x2c>
    fdsc->last_letter = letter;
 80133b8:	6165      	str	r5, [r4, #20]
    fdsc->last_glyph_id = 0;
 80133ba:	2000      	movs	r0, #0
 80133bc:	e015      	b.n	80133ea <get_glyph_dsc_id.isra.0.part.1+0x52>
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
 80133be:	69a0      	ldr	r0, [r4, #24]
}
 80133c0:	b005      	add	sp, #20
 80133c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 80133c4:	68a3      	ldr	r3, [r4, #8]
 80133c6:	fb0e f606 	mul.w	r6, lr, r6
 80133ca:	1999      	adds	r1, r3, r6
 80133cc:	599a      	ldr	r2, [r3, r6]
        if(rcp > fdsc->cmaps[i].range_length) continue;
 80133ce:	888b      	ldrh	r3, [r1, #4]
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 80133d0:	1aaa      	subs	r2, r5, r2
        if(rcp > fdsc->cmaps[i].range_length) continue;
 80133d2:	429a      	cmp	r2, r3
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 80133d4:	9203      	str	r2, [sp, #12]
 80133d6:	f107 0701 	add.w	r7, r7, #1
        if(rcp > fdsc->cmaps[i].range_length) continue;
 80133da:	d8e7      	bhi.n	80133ac <get_glyph_dsc_id.isra.0.part.1+0x14>
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
 80133dc:	7c8b      	ldrb	r3, [r1, #18]
 80133de:	f013 0303 	ands.w	r3, r3, #3
 80133e2:	d104      	bne.n	80133ee <get_glyph_dsc_id.isra.0.part.1+0x56>
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
 80133e4:	88c8      	ldrh	r0, [r1, #6]
 80133e6:	4410      	add	r0, r2
        fdsc->last_letter = letter;
 80133e8:	6165      	str	r5, [r4, #20]
    fdsc->last_glyph_id = 0;
 80133ea:	61a0      	str	r0, [r4, #24]
 80133ec:	e7e8      	b.n	80133c0 <get_glyph_dsc_id.isra.0.part.1+0x28>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
 80133ee:	2b01      	cmp	r3, #1
 80133f0:	d104      	bne.n	80133fc <get_glyph_dsc_id.isra.0.part.1+0x64>
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
 80133f2:	68cb      	ldr	r3, [r1, #12]
 80133f4:	5c98      	ldrb	r0, [r3, r2]
 80133f6:	88cb      	ldrh	r3, [r1, #6]
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 80133f8:	4418      	add	r0, r3
 80133fa:	e7f5      	b.n	80133e8 <get_glyph_dsc_id.isra.0.part.1+0x50>
 80133fc:	4811      	ldr	r0, [pc, #68]	; (8013444 <get_glyph_dsc_id.isra.0.part.1+0xac>)
 80133fe:	8a0a      	ldrh	r2, [r1, #16]
            uint8_t * p = lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length, sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);
 8013400:	9000      	str	r0, [sp, #0]
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
 8013402:	2b02      	cmp	r3, #2
 8013404:	d10e      	bne.n	8013424 <get_glyph_dsc_id.isra.0.part.1+0x8c>
            uint8_t * p = lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length, sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);
 8013406:	6889      	ldr	r1, [r1, #8]
 8013408:	a803      	add	r0, sp, #12
 801340a:	f001 f97c 	bl	8014706 <lv_utils_bsearch>
            if(p) {
 801340e:	b908      	cbnz	r0, 8013414 <get_glyph_dsc_id.isra.0.part.1+0x7c>
        uint32_t glyph_id = 0;
 8013410:	2000      	movs	r0, #0
 8013412:	e7e9      	b.n	80133e8 <get_glyph_dsc_id.isra.0.part.1+0x50>
                uint32_t ofs = (lv_uintptr_t)p - (lv_uintptr_t) fdsc->cmaps[i].unicode_list;
 8013414:	68a3      	ldr	r3, [r4, #8]
 8013416:	441e      	add	r6, r3
 8013418:	68b3      	ldr	r3, [r6, #8]
 801341a:	1ac3      	subs	r3, r0, r3
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
 801341c:	88f0      	ldrh	r0, [r6, #6]
 801341e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8013422:	e7e1      	b.n	80133e8 <get_glyph_dsc_id.isra.0.part.1+0x50>
            uint8_t * p = lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length, sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);
 8013424:	2302      	movs	r3, #2
 8013426:	6889      	ldr	r1, [r1, #8]
 8013428:	a803      	add	r0, sp, #12
 801342a:	f001 f96c 	bl	8014706 <lv_utils_bsearch>
            if(p) {
 801342e:	2800      	cmp	r0, #0
 8013430:	d0ee      	beq.n	8013410 <get_glyph_dsc_id.isra.0.part.1+0x78>
                uint32_t ofs = (lv_uintptr_t)p - (lv_uintptr_t) fdsc->cmaps[i].unicode_list;
 8013432:	68a3      	ldr	r3, [r4, #8]
 8013434:	441e      	add	r6, r3
 8013436:	68b3      	ldr	r3, [r6, #8]
 8013438:	1ac0      	subs	r0, r0, r3
                ofs = ofs >> 1;     /*The list stores `uint16_t` so the get the index divide by 2*/
 801343a:	0840      	lsrs	r0, r0, #1
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 801343c:	68f3      	ldr	r3, [r6, #12]
 801343e:	5c18      	ldrb	r0, [r3, r0]
 8013440:	88f3      	ldrh	r3, [r6, #6]
 8013442:	e7d9      	b.n	80133f8 <get_glyph_dsc_id.isra.0.part.1+0x60>
 8013444:	08013391 	.word	0x08013391

08013448 <lv_font_get_bitmap_fmt_txt>:
{
 8013448:	b510      	push	{r4, lr}
    if(letter == '\0') return 0;
 801344a:	b909      	cbnz	r1, 8013450 <lv_font_get_bitmap_fmt_txt+0x8>
    if(!gid) return false;
 801344c:	2000      	movs	r0, #0
 801344e:	bd10      	pop	{r4, pc}
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 8013450:	f850 4f0c 	ldr.w	r4, [r0, #12]!
 8013454:	f7ff ffa0 	bl	8013398 <get_glyph_dsc_id.isra.0.part.1>
    if(!gid) return false;
 8013458:	2800      	cmp	r0, #0
 801345a:	d0f7      	beq.n	801344c <lv_font_get_bitmap_fmt_txt+0x4>
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 801345c:	6863      	ldr	r3, [r4, #4]
 801345e:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
    if(gdsc) return &fdsc->glyph_bitmap[gdsc->bitmap_index];
 8013462:	2a00      	cmp	r2, #0
 8013464:	d0f2      	beq.n	801344c <lv_font_get_bitmap_fmt_txt+0x4>
 8013466:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 801346a:	6820      	ldr	r0, [r4, #0]
 801346c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013470:	4418      	add	r0, r3
}
 8013472:	bd10      	pop	{r4, pc}

08013474 <lv_font_get_glyph_dsc_fmt_txt>:
{
 8013474:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013478:	4680      	mov	r8, r0
 801347a:	b085      	sub	sp, #20
 801347c:	460c      	mov	r4, r1
 801347e:	4699      	mov	r9, r3
    if(letter == '\0') return 0;
 8013480:	b91a      	cbnz	r2, 801348a <lv_font_get_glyph_dsc_fmt_txt+0x16>
    if(!gid) return false;
 8013482:	2000      	movs	r0, #0
}
 8013484:	b005      	add	sp, #20
 8013486:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 801348a:	4607      	mov	r7, r0
 801348c:	4611      	mov	r1, r2
 801348e:	f857 5f0c 	ldr.w	r5, [r7, #12]!
 8013492:	4638      	mov	r0, r7
 8013494:	f7ff ff80 	bl	8013398 <get_glyph_dsc_id.isra.0.part.1>
    if(!gid) return false;
 8013498:	4606      	mov	r6, r0
 801349a:	2800      	cmp	r0, #0
 801349c:	d0f1      	beq.n	8013482 <lv_font_get_glyph_dsc_fmt_txt+0xe>
    if(fdsc->kern_dsc) {
 801349e:	68eb      	ldr	r3, [r5, #12]
 80134a0:	b9db      	cbnz	r3, 80134da <lv_font_get_glyph_dsc_fmt_txt+0x66>
    int8_t kvalue = 0;
 80134a2:	2000      	movs	r0, #0
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 80134a4:	686b      	ldr	r3, [r5, #4]
 80134a6:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    uint32_t adv_w = gdsc->adv_w + ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 80134aa:	8a2b      	ldrh	r3, [r5, #16]
 80134ac:	4358      	muls	r0, r3
 80134ae:	8873      	ldrh	r3, [r6, #2]
 80134b0:	f3c3 130b 	ubfx	r3, r3, #4, #12
 80134b4:	eb03 1020 	add.w	r0, r3, r0, asr #4
    adv_w  = (adv_w + (1 << 3)) >> 4;
 80134b8:	3008      	adds	r0, #8
 80134ba:	0900      	lsrs	r0, r0, #4
    dsc_out->adv_w = adv_w;
 80134bc:	8020      	strh	r0, [r4, #0]
    dsc_out->box_h = gdsc->box_h;
 80134be:	7973      	ldrb	r3, [r6, #5]
 80134c0:	70e3      	strb	r3, [r4, #3]
    dsc_out->box_w = gdsc->box_w;
 80134c2:	7933      	ldrb	r3, [r6, #4]
 80134c4:	70a3      	strb	r3, [r4, #2]
    dsc_out->ofs_x = gdsc->ofs_x;
 80134c6:	79b3      	ldrb	r3, [r6, #6]
 80134c8:	7123      	strb	r3, [r4, #4]
    dsc_out->ofs_y = gdsc->ofs_y;
 80134ca:	79f3      	ldrb	r3, [r6, #7]
 80134cc:	7163      	strb	r3, [r4, #5]
    dsc_out->bpp   = fdsc->bpp;
 80134ce:	7ceb      	ldrb	r3, [r5, #19]
 80134d0:	f3c3 0382 	ubfx	r3, r3, #2, #3
 80134d4:	71a3      	strb	r3, [r4, #6]
    return true;
 80134d6:	2001      	movs	r0, #1
 80134d8:	e7d4      	b.n	8013484 <lv_font_get_glyph_dsc_fmt_txt+0x10>
    if(letter == '\0') return 0;
 80134da:	f1b9 0f00 	cmp.w	r9, #0
 80134de:	d0e0      	beq.n	80134a2 <lv_font_get_glyph_dsc_fmt_txt+0x2e>
 80134e0:	4649      	mov	r1, r9
 80134e2:	4638      	mov	r0, r7
 80134e4:	f7ff ff58 	bl	8013398 <get_glyph_dsc_id.isra.0.part.1>
        if(gid_next) {
 80134e8:	2800      	cmp	r0, #0
 80134ea:	d0da      	beq.n	80134a2 <lv_font_get_glyph_dsc_fmt_txt+0x2e>
 80134ec:	f8d8 300c 	ldr.w	r3, [r8, #12]
    if(fdsc->kern_classes == 0) {
 80134f0:	7cda      	ldrb	r2, [r3, #19]
 80134f2:	68df      	ldr	r7, [r3, #12]
 80134f4:	f012 0f20 	tst.w	r2, #32
 80134f8:	d133      	bne.n	8013562 <lv_font_get_glyph_dsc_fmt_txt+0xee>
        if(kdsc->glyph_ids_size == 0) {
 80134fa:	7afb      	ldrb	r3, [r7, #11]
 80134fc:	f013 0303 	ands.w	r3, r3, #3
 8013500:	d117      	bne.n	8013532 <lv_font_get_glyph_dsc_fmt_txt+0xbe>
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 8013502:	eb06 2300 	add.w	r3, r6, r0, lsl #8
 8013506:	a804      	add	r0, sp, #16
            const uint8_t * g_ids = kdsc->glyph_ids;
 8013508:	f8d7 8000 	ldr.w	r8, [r7]
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 801350c:	68ba      	ldr	r2, [r7, #8]
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 801350e:	f820 3d04 	strh.w	r3, [r0, #-4]!
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 8013512:	4b1c      	ldr	r3, [pc, #112]	; (8013584 <lv_font_get_glyph_dsc_fmt_txt+0x110>)
 8013514:	9300      	str	r3, [sp, #0]
 8013516:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 801351a:	2302      	movs	r3, #2
 801351c:	4641      	mov	r1, r8
 801351e:	f001 f8f2 	bl	8014706 <lv_utils_bsearch>
            if(kid_p) {
 8013522:	2800      	cmp	r0, #0
 8013524:	d0be      	beq.n	80134a4 <lv_font_get_glyph_dsc_fmt_txt+0x30>
                uint32_t ofs = (lv_uintptr_t)kid_p - (lv_uintptr_t)g_ids;
 8013526:	eba0 0008 	sub.w	r0, r0, r8
                ofs = ofs >> 1;     /*ofs is for pair, divide by 2 to refer as a single value*/
 801352a:	0840      	lsrs	r0, r0, #1
                value = kdsc->values[ofs];
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	5618      	ldrsb	r0, [r3, r0]
 8013530:	e7b8      	b.n	80134a4 <lv_font_get_glyph_dsc_fmt_txt+0x30>
        } else if(kdsc->glyph_ids_size == 1) {
 8013532:	2b01      	cmp	r3, #1
 8013534:	d1b5      	bne.n	80134a2 <lv_font_get_glyph_dsc_fmt_txt+0x2e>
            uint32_t g_id_both = (uint32_t)((uint32_t)gid_right << 8) + gid_left; /*Create one number from the ids*/
 8013536:	eb06 2300 	add.w	r3, r6, r0, lsl #8
 801353a:	a804      	add	r0, sp, #16
            const uint16_t * g_ids = kdsc->glyph_ids;
 801353c:	f8d7 8000 	ldr.w	r8, [r7]
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 8013540:	68ba      	ldr	r2, [r7, #8]
            uint32_t g_id_both = (uint32_t)((uint32_t)gid_right << 8) + gid_left; /*Create one number from the ids*/
 8013542:	f840 3d04 	str.w	r3, [r0, #-4]!
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 8013546:	4b10      	ldr	r3, [pc, #64]	; (8013588 <lv_font_get_glyph_dsc_fmt_txt+0x114>)
 8013548:	9300      	str	r3, [sp, #0]
 801354a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 801354e:	2304      	movs	r3, #4
 8013550:	4641      	mov	r1, r8
 8013552:	f001 f8d8 	bl	8014706 <lv_utils_bsearch>
            if(kid_p) {
 8013556:	2800      	cmp	r0, #0
 8013558:	d0a4      	beq.n	80134a4 <lv_font_get_glyph_dsc_fmt_txt+0x30>
                uint32_t ofs = (lv_uintptr_t)kid_p - (lv_uintptr_t)g_ids;
 801355a:	eba0 0008 	sub.w	r0, r0, r8
                ofs = ofs >> 4;     /*ofs is 4 byte pairs, divide by 4 to refer as a single value*/
 801355e:	0900      	lsrs	r0, r0, #4
 8013560:	e7e4      	b.n	801352c <lv_font_get_glyph_dsc_fmt_txt+0xb8>
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
 8013562:	687a      	ldr	r2, [r7, #4]
 8013564:	5d93      	ldrb	r3, [r2, r6]
        if(left_class > 0 && right_class > 0) {
 8013566:	2b00      	cmp	r3, #0
 8013568:	d09b      	beq.n	80134a2 <lv_font_get_glyph_dsc_fmt_txt+0x2e>
        uint8_t right_class = kdsc->left_class_mapping[gid_right];
 801356a:	5c11      	ldrb	r1, [r2, r0]
        if(left_class > 0 && right_class > 0) {
 801356c:	2900      	cmp	r1, #0
 801356e:	d098      	beq.n	80134a2 <lv_font_get_glyph_dsc_fmt_txt+0x2e>
            value = kdsc->class_pair_values[(left_class-1)* kdsc->right_class_cnt + (right_class-1)];
 8013570:	683a      	ldr	r2, [r7, #0]
 8013572:	7b78      	ldrb	r0, [r7, #13]
 8013574:	3b01      	subs	r3, #1
 8013576:	440a      	add	r2, r1
 8013578:	fb00 2303 	mla	r3, r0, r3, r2
 801357c:	f913 0c01 	ldrsb.w	r0, [r3, #-1]
 8013580:	e790      	b.n	80134a4 <lv_font_get_glyph_dsc_fmt_txt+0x30>
 8013582:	bf00      	nop
 8013584:	0801336d 	.word	0x0801336d
 8013588:	0801337f 	.word	0x0801337f

0801358c <lv_disp_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_disp_drv_init(lv_disp_drv_t * driver)
{
 801358c:	b510      	push	{r4, lr}
    memset(driver, 0, sizeof(lv_disp_drv_t));
 801358e:	2224      	movs	r2, #36	; 0x24
{
 8013590:	4604      	mov	r4, r0
    memset(driver, 0, sizeof(lv_disp_drv_t));
 8013592:	2100      	movs	r1, #0
 8013594:	f005 ffc9 	bl	801952a <memset>

    driver->flush_cb         = NULL;
    driver->hor_res          = LV_HOR_RES_MAX;
 8013598:	23a0      	movs	r3, #160	; 0xa0
 801359a:	8023      	strh	r3, [r4, #0]
    driver->ver_res          = LV_VER_RES_MAX;
 801359c:	2380      	movs	r3, #128	; 0x80
    driver->flush_cb         = NULL;
 801359e:	2200      	movs	r2, #0
    driver->ver_res          = LV_VER_RES_MAX;
 80135a0:	8063      	strh	r3, [r4, #2]
    driver->buffer           = NULL;
    driver->rotated          = 0;
    driver->color_chroma_key = LV_COLOR_TRANSP;
 80135a2:	f04f 0300 	mov.w	r3, #0
 80135a6:	f362 0304 	bfi	r3, r2, #0, #5
 80135aa:	7723      	strb	r3, [r4, #28]
 80135ac:	8ba3      	ldrh	r3, [r4, #28]
    driver->gpu_blend_cb = NULL;
    driver->gpu_fill_cb  = NULL;
#endif

#if LV_USE_USER_DATA
    driver->user_data = NULL;
 80135ae:	6222      	str	r2, [r4, #32]
    driver->color_chroma_key = LV_COLOR_TRANSP;
 80135b0:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 80135b4:	83a3      	strh	r3, [r4, #28]
 80135b6:	0a1b      	lsrs	r3, r3, #8
 80135b8:	f362 03c7 	bfi	r3, r2, #3, #5
 80135bc:	7763      	strb	r3, [r4, #29]
    driver->antialiasing = true;
 80135be:	2301      	movs	r3, #1
 80135c0:	7223      	strb	r3, [r4, #8]
#endif

    driver->set_px_cb = NULL;
 80135c2:	6162      	str	r2, [r4, #20]
 80135c4:	bd10      	pop	{r4, pc}

080135c6 <lv_disp_buf_init>:
 *             It lets LittlevGL to render next frame into the other buffer while previous is being
 * sent. Set to `NULL` if unused.
 * @param size_in_px_cnt size of the `buf1` and `buf2` in pixel count.
 */
void lv_disp_buf_init(lv_disp_buf_t * disp_buf, void * buf1, void * buf2, uint32_t size_in_px_cnt)
{
 80135c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135c8:	4604      	mov	r4, r0
 80135ca:	460d      	mov	r5, r1
 80135cc:	4617      	mov	r7, r2
 80135ce:	461e      	mov	r6, r3
    memset(disp_buf, 0, sizeof(lv_disp_buf_t));
 80135d0:	221c      	movs	r2, #28
 80135d2:	2100      	movs	r1, #0
 80135d4:	f005 ffa9 	bl	801952a <memset>

    disp_buf->buf1    = buf1;
    disp_buf->buf2    = buf2;
 80135d8:	e884 00a0 	stmia.w	r4, {r5, r7}
    disp_buf->buf_act = disp_buf->buf1;
 80135dc:	60a5      	str	r5, [r4, #8]
    disp_buf->size    = size_in_px_cnt;
 80135de:	60e6      	str	r6, [r4, #12]
 80135e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080135e4 <lv_disp_drv_register>:
 * Automatically set the first display as active.
 * @param driver pointer to an initialized 'lv_disp_drv_t' variable (can be local variable)
 * @return pointer to the new display or NULL on error
 */
lv_disp_t * lv_disp_drv_register(lv_disp_drv_t * driver)
{
 80135e4:	b570      	push	{r4, r5, r6, lr}
 80135e6:	4605      	mov	r5, r0
    lv_disp_t * disp = lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
 80135e8:	482a      	ldr	r0, [pc, #168]	; (8013694 <lv_disp_drv_register+0xb0>)
 80135ea:	f000 faf5 	bl	8013bd8 <lv_ll_ins_head>
    if(!disp) {
 80135ee:	4604      	mov	r4, r0
 80135f0:	b900      	cbnz	r0, 80135f4 <lv_disp_drv_register+0x10>
 80135f2:	e7fe      	b.n	80135f2 <lv_disp_drv_register+0xe>
        lv_mem_assert(disp);
        return NULL;
    }

    memcpy(&disp->driver, driver, sizeof(lv_disp_drv_t));
 80135f4:	4628      	mov	r0, r5
 80135f6:	4623      	mov	r3, r4
 80135f8:	f105 0224 	add.w	r2, r5, #36	; 0x24
 80135fc:	f850 1b04 	ldr.w	r1, [r0], #4
 8013600:	f843 1b04 	str.w	r1, [r3], #4
 8013604:	4290      	cmp	r0, r2
 8013606:	d1f9      	bne.n	80135fc <lv_disp_drv_register+0x18>
    memset(&disp->inv_area_joined, 0, sizeof(disp->inv_area_joined));
 8013608:	2220      	movs	r2, #32
 801360a:	2100      	movs	r1, #0
 801360c:	f504 70a0 	add.w	r0, r4, #320	; 0x140
 8013610:	f005 ff8b 	bl	801952a <memset>
    memset(&disp->inv_areas, 0, sizeof(disp->inv_areas));
    lv_ll_init(&disp->scr_ll, sizeof(lv_obj_t));

    if(disp_def == NULL) disp_def = disp;
 8013614:	4d20      	ldr	r5, [pc, #128]	; (8013698 <lv_disp_drv_register+0xb4>)
    memset(&disp->inv_areas, 0, sizeof(disp->inv_areas));
 8013616:	f44f 7280 	mov.w	r2, #256	; 0x100
 801361a:	2100      	movs	r1, #0
 801361c:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8013620:	f005 ff83 	bl	801952a <memset>
    lv_ll_init(&disp->scr_ll, sizeof(lv_obj_t));
 8013624:	2148      	movs	r1, #72	; 0x48
 8013626:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801362a:	f000 facb 	bl	8013bc4 <lv_ll_init>
    if(disp_def == NULL) disp_def = disp;
 801362e:	682b      	ldr	r3, [r5, #0]
 8013630:	b903      	cbnz	r3, 8013634 <lv_disp_drv_register+0x50>
 8013632:	602c      	str	r4, [r5, #0]

    lv_disp_t * disp_def_tmp = disp_def;
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
                                        new display*/

    disp->inv_p = 0;
 8013634:	f8b4 3160 	ldrh.w	r3, [r4, #352]	; 0x160
    lv_disp_t * disp_def_tmp = disp_def;
 8013638:	682e      	ldr	r6, [r5, #0]
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
 801363a:	602c      	str	r4, [r5, #0]
    disp->inv_p = 0;
 801363c:	f36f 0309 	bfc	r3, #0, #10

    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
 8013640:	2100      	movs	r1, #0
    disp->inv_p = 0;
 8013642:	f8a4 3160 	strh.w	r3, [r4, #352]	; 0x160
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
 8013646:	4608      	mov	r0, r1
 8013648:	f7fb f968 	bl	800e91c <lv_obj_create>
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 801364c:	2100      	movs	r1, #0
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
 801364e:	6360      	str	r0, [r4, #52]	; 0x34
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 8013650:	4608      	mov	r0, r1
 8013652:	f7fb f963 	bl	800e91c <lv_obj_create>
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 8013656:	2100      	movs	r1, #0
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 8013658:	63a0      	str	r0, [r4, #56]	; 0x38
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 801365a:	4608      	mov	r0, r1
 801365c:	f7fb f95e 	bl	800e91c <lv_obj_create>
    lv_obj_set_style(disp->top_layer, &lv_style_transp);
 8013660:	490e      	ldr	r1, [pc, #56]	; (801369c <lv_disp_drv_register+0xb8>)
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 8013662:	63e0      	str	r0, [r4, #60]	; 0x3c
    lv_obj_set_style(disp->top_layer, &lv_style_transp);
 8013664:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8013666:	f7fb fbd9 	bl	800ee1c <lv_obj_set_style>
    lv_obj_set_style(disp->sys_layer, &lv_style_transp);
 801366a:	490c      	ldr	r1, [pc, #48]	; (801369c <lv_disp_drv_register+0xb8>)
 801366c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801366e:	f7fb fbd5 	bl	800ee1c <lv_obj_set_style>

    lv_obj_invalidate(disp->act_scr);
 8013672:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8013674:	f7fa fe6e 	bl	800e354 <lv_obj_invalidate>

    disp_def = disp_def_tmp; /*Revert the default display*/

    /*Create a refresh task*/
    disp->refr_task = lv_task_create(lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, disp);
 8013678:	4623      	mov	r3, r4
 801367a:	2203      	movs	r2, #3
 801367c:	211e      	movs	r1, #30
 801367e:	4808      	ldr	r0, [pc, #32]	; (80136a0 <lv_disp_drv_register+0xbc>)
    disp_def = disp_def_tmp; /*Revert the default display*/
 8013680:	602e      	str	r6, [r5, #0]
    disp->refr_task = lv_task_create(lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, disp);
 8013682:	f000 fdf3 	bl	801426c <lv_task_create>
 8013686:	6260      	str	r0, [r4, #36]	; 0x24
    lv_mem_assert(disp->refr_task);
 8013688:	b900      	cbnz	r0, 801368c <lv_disp_drv_register+0xa8>
 801368a:	e7fe      	b.n	801368a <lv_disp_drv_register+0xa6>
    if(disp->refr_task == NULL) return NULL;

    lv_task_ready(disp->refr_task); /*Be sure the screen will be refreshed immediately on start up*/
 801368c:	f000 fe03 	bl	8014296 <lv_task_ready>

    return disp;
}
 8013690:	4620      	mov	r0, r4
 8013692:	bd70      	pop	{r4, r5, r6, pc}
 8013694:	2000c56c 	.word	0x2000c56c
 8013698:	20005f7c 	.word	0x20005f7c
 801369c:	2000c280 	.word	0x2000c280
 80136a0:	0800f38d 	.word	0x0800f38d

080136a4 <lv_disp_get_default>:
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
    return disp_def;
}
 80136a4:	4b01      	ldr	r3, [pc, #4]	; (80136ac <lv_disp_get_default+0x8>)
 80136a6:	6818      	ldr	r0, [r3, #0]
 80136a8:	4770      	bx	lr
 80136aa:	bf00      	nop
 80136ac:	20005f7c 	.word	0x20005f7c

080136b0 <lv_disp_get_hor_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
 80136b0:	b910      	cbnz	r0, 80136b8 <lv_disp_get_hor_res+0x8>
    return disp_def;
 80136b2:	4b06      	ldr	r3, [pc, #24]	; (80136cc <lv_disp_get_hor_res+0x1c>)
 80136b4:	6818      	ldr	r0, [r3, #0]

    if(disp == NULL)
 80136b6:	b138      	cbz	r0, 80136c8 <lv_disp_get_hor_res+0x18>
        return LV_HOR_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.hor_res : disp->driver.ver_res;
 80136b8:	7a03      	ldrb	r3, [r0, #8]
 80136ba:	079b      	lsls	r3, r3, #30
 80136bc:	bf54      	ite	pl
 80136be:	f9b0 0000 	ldrshpl.w	r0, [r0]
 80136c2:	f9b0 0002 	ldrshmi.w	r0, [r0, #2]
 80136c6:	4770      	bx	lr
        return LV_HOR_RES_MAX;
 80136c8:	20a0      	movs	r0, #160	; 0xa0
}
 80136ca:	4770      	bx	lr
 80136cc:	20005f7c 	.word	0x20005f7c

080136d0 <lv_disp_get_ver_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
 80136d0:	b910      	cbnz	r0, 80136d8 <lv_disp_get_ver_res+0x8>
    return disp_def;
 80136d2:	4b06      	ldr	r3, [pc, #24]	; (80136ec <lv_disp_get_ver_res+0x1c>)
 80136d4:	6818      	ldr	r0, [r3, #0]

    if(disp == NULL)
 80136d6:	b138      	cbz	r0, 80136e8 <lv_disp_get_ver_res+0x18>
        return LV_VER_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.ver_res : disp->driver.hor_res;
 80136d8:	7a03      	ldrb	r3, [r0, #8]
 80136da:	079b      	lsls	r3, r3, #30
 80136dc:	bf54      	ite	pl
 80136de:	f9b0 0002 	ldrshpl.w	r0, [r0, #2]
 80136e2:	f9b0 0000 	ldrshmi.w	r0, [r0]
 80136e6:	4770      	bx	lr
        return LV_VER_RES_MAX;
 80136e8:	2080      	movs	r0, #128	; 0x80
}
 80136ea:	4770      	bx	lr
 80136ec:	20005f7c 	.word	0x20005f7c

080136f0 <lv_disp_get_antialiasing>:
bool lv_disp_get_antialiasing(lv_disp_t * disp)
{
#if LV_ANTIALIAS == 0
    return false;
#else
    if(disp == NULL) disp = lv_disp_get_default();
 80136f0:	b910      	cbnz	r0, 80136f8 <lv_disp_get_antialiasing+0x8>
    return disp_def;
 80136f2:	4b03      	ldr	r3, [pc, #12]	; (8013700 <lv_disp_get_antialiasing+0x10>)
 80136f4:	6818      	ldr	r0, [r3, #0]
    if(disp == NULL) return false;
 80136f6:	b110      	cbz	r0, 80136fe <lv_disp_get_antialiasing+0xe>

    return disp->driver.antialiasing ? true : false;
 80136f8:	7a00      	ldrb	r0, [r0, #8]
 80136fa:	f000 0001 	and.w	r0, r0, #1
#endif
}
 80136fe:	4770      	bx	lr
 8013700:	20005f7c 	.word	0x20005f7c

08013704 <lv_disp_flush_ready>:
 * Call in the display driver's `flush_cb` function when the flushing is finished
 * @param disp_drv pointer to display driver in `flush_cb` where this function is called
 */
LV_ATTRIBUTE_FLUSH_READY void lv_disp_flush_ready(lv_disp_drv_t * disp_drv)
{
    disp_drv->buffer->flushing = 0;
 8013704:	6842      	ldr	r2, [r0, #4]
 8013706:	7e13      	ldrb	r3, [r2, #24]
 8013708:	f36f 0300 	bfc	r3, #0, #1
 801370c:	7613      	strb	r3, [r2, #24]
 801370e:	4770      	bx	lr

08013710 <lv_disp_get_buf>:
 * @return pointer to the internal buffers
 */
lv_disp_buf_t * lv_disp_get_buf(lv_disp_t * disp)
{
    return disp->driver.buffer;
}
 8013710:	6840      	ldr	r0, [r0, #4]
 8013712:	4770      	bx	lr

08013714 <lv_disp_is_double_buf>:
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_double_buf(lv_disp_t * disp)
{
    if(disp->driver.buffer->buf1 && disp->driver.buffer->buf2)
 8013714:	6843      	ldr	r3, [r0, #4]
 8013716:	6818      	ldr	r0, [r3, #0]
 8013718:	b118      	cbz	r0, 8013722 <lv_disp_is_double_buf+0xe>
 801371a:	6858      	ldr	r0, [r3, #4]
 801371c:	3000      	adds	r0, #0
 801371e:	bf18      	it	ne
 8013720:	2001      	movne	r0, #1
        return true;
    else
        return false;
}
 8013722:	4770      	bx	lr

08013724 <lv_disp_is_true_double_buf>:
 * `size` is screen sized)
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_true_double_buf(lv_disp_t * disp)
{
 8013724:	b508      	push	{r3, lr}
 8013726:	4602      	mov	r2, r0
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;

    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
 8013728:	f7ff fff4 	bl	8013714 <lv_disp_is_double_buf>
 801372c:	b140      	cbz	r0, 8013740 <lv_disp_is_true_double_buf+0x1c>
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;
 801372e:	8853      	ldrh	r3, [r2, #2]
 8013730:	8810      	ldrh	r0, [r2, #0]
 8013732:	fb10 f003 	smulbb	r0, r0, r3
    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
 8013736:	6853      	ldr	r3, [r2, #4]
 8013738:	68db      	ldr	r3, [r3, #12]
 801373a:	1ac3      	subs	r3, r0, r3
 801373c:	4258      	negs	r0, r3
 801373e:	4158      	adcs	r0, r3
        return true;
    } else {
        return false;
    }
}
 8013740:	bd08      	pop	{r3, pc}
	...

08013744 <lv_indev_get_next>:
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
    if(indev == NULL)
 8013744:	4601      	mov	r1, r0
        return lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 8013746:	4803      	ldr	r0, [pc, #12]	; (8013754 <lv_indev_get_next+0x10>)
    if(indev == NULL)
 8013748:	b909      	cbnz	r1, 801374e <lv_indev_get_next+0xa>
        return lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 801374a:	f000 ba81 	b.w	8013c50 <lv_ll_get_head>
    else
        return lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
 801374e:	f000 ba85 	b.w	8013c5c <lv_ll_get_next>
 8013752:	bf00      	nop
 8013754:	2000c55c 	.word	0x2000c55c

08013758 <lv_tick_inc>:
 * You have to call this function periodically
 * @param tick_period the call period of this function in milliseconds
 */
LV_ATTRIBUTE_TICK_INC void lv_tick_inc(uint32_t tick_period)
{
    tick_irq_flag = 0;
 8013758:	4b03      	ldr	r3, [pc, #12]	; (8013768 <lv_tick_inc+0x10>)
 801375a:	2200      	movs	r2, #0
 801375c:	701a      	strb	r2, [r3, #0]
    sys_time += tick_period;
 801375e:	4a03      	ldr	r2, [pc, #12]	; (801376c <lv_tick_inc+0x14>)
 8013760:	6813      	ldr	r3, [r2, #0]
 8013762:	4418      	add	r0, r3
 8013764:	6010      	str	r0, [r2, #0]
 8013766:	4770      	bx	lr
 8013768:	20005f84 	.word	0x20005f84
 801376c:	20005f80 	.word	0x20005f80

08013770 <lv_tick_get>:
uint32_t lv_tick_get(void)
{
#if LV_TICK_CUSTOM == 0
    uint32_t result;
    do {
        tick_irq_flag = 1;
 8013770:	4b04      	ldr	r3, [pc, #16]	; (8013784 <lv_tick_get+0x14>)
 8013772:	f04f 0101 	mov.w	r1, #1
 8013776:	7019      	strb	r1, [r3, #0]
        result        = sys_time;
    } while(!tick_irq_flag); /*'lv_tick_inc()' clears this flag which can be in an interrupt.
 8013778:	781a      	ldrb	r2, [r3, #0]
 801377a:	2a00      	cmp	r2, #0
 801377c:	d0fb      	beq.n	8013776 <lv_tick_get+0x6>

    return result;
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
 801377e:	4b02      	ldr	r3, [pc, #8]	; (8013788 <lv_tick_get+0x18>)
 8013780:	6818      	ldr	r0, [r3, #0]
 8013782:	4770      	bx	lr
 8013784:	20005f84 	.word	0x20005f84
 8013788:	20005f80 	.word	0x20005f80

0801378c <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of systick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
 801378c:	b510      	push	{r4, lr}
 801378e:	4604      	mov	r4, r0
    uint32_t act_time = lv_tick_get();
 8013790:	f7ff ffee 	bl	8013770 <lv_tick_get>
        prev_tick = UINT32_MAX - prev_tick + 1;
        prev_tick += act_time;
    }

    return prev_tick;
}
 8013794:	1b00      	subs	r0, r0, r4
 8013796:	bd10      	pop	{r4, pc}

08013798 <lv_anim_path_linear>:
 */
lv_anim_value_t lv_anim_path_linear(const lv_anim_t * a)
{
    /*Calculate the current step*/
    uint32_t step;
    if(a->time == a->act_time) {
 8013798:	f9b0 301a 	ldrsh.w	r3, [r0, #26]
 801379c:	8b02      	ldrh	r2, [r0, #24]
 801379e:	429a      	cmp	r2, r3
        step = LV_ANIM_RESOLUTION; /*Use the last value if the time fully elapsed*/
    } else {
        step = ((int32_t)a->act_time * LV_ANIM_RESOLUTION) / a->time;
 80137a0:	bf1c      	itt	ne
 80137a2:	029b      	lslne	r3, r3, #10
 80137a4:	fb93 f3f2 	sdivne	r3, r3, r2
    }

    /* Get the new value which will be proportional to `step`
     * and the `start` and `end` values*/
    int32_t new_value;
    new_value = (int32_t)step * (a->end - a->start);
 80137a8:	6902      	ldr	r2, [r0, #16]
 80137aa:	6940      	ldr	r0, [r0, #20]
 80137ac:	bf08      	it	eq
 80137ae:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80137b2:	1a80      	subs	r0, r0, r2
 80137b4:	4343      	muls	r3, r0
    new_value = new_value >> LV_ANIM_RES_SHIFT;
    new_value += a->start;
 80137b6:	eb02 23a3 	add.w	r3, r2, r3, asr #10

    return (lv_anim_value_t)new_value;
}
 80137ba:	b218      	sxth	r0, r3
 80137bc:	4770      	bx	lr
	...

080137c0 <anim_task>:
/**
 * Periodically handle the animations.
 * @param param unused
 */
static void anim_task(lv_task_t * param)
{
 80137c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    (void)param;

    lv_anim_t * a;
    LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a)
 80137c4:	4844      	ldr	r0, [pc, #272]	; (80138d8 <anim_task+0x118>)
 80137c6:	4c44      	ldr	r4, [pc, #272]	; (80138d8 <anim_task+0x118>)
{
 80137c8:	b08a      	sub	sp, #40	; 0x28
    LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a)
 80137ca:	f000 fa41 	bl	8013c50 <lv_ll_get_head>
 80137ce:	b988      	cbnz	r0, 80137f4 <anim_task+0x34>
    {
        a->has_run = 0;
    }

    uint32_t elaps = lv_tick_elaps(last_task_run);
 80137d0:	4d42      	ldr	r5, [pc, #264]	; (80138dc <anim_task+0x11c>)
    while(a != NULL) {
        /*It can be set by `lv_anim_del()` typically in `end_cb`. If set then an animation delete
         * happened in `anim_ready_handler` which could make this linked list reading corrupt
         * because the list is changed meanwhile
         */
        anim_list_changed = false;
 80137d2:	4e43      	ldr	r6, [pc, #268]	; (80138e0 <anim_task+0x120>)
    uint32_t elaps = lv_tick_elaps(last_task_run);
 80137d4:	6828      	ldr	r0, [r5, #0]
        /* If the linked list changed due to anim. delete then it's not safe to continue
         * the reading of the list from here -> start from the head*/
        if(anim_list_changed)
            a = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
        else
            a = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 80137d6:	4f40      	ldr	r7, [pc, #256]	; (80138d8 <anim_task+0x118>)
    uint32_t elaps = lv_tick_elaps(last_task_run);
 80137d8:	f7ff ffd8 	bl	801378c <lv_tick_elaps>
 80137dc:	4680      	mov	r8, r0
    a = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 80137de:	483e      	ldr	r0, [pc, #248]	; (80138d8 <anim_task+0x118>)
 80137e0:	f000 fa36 	bl	8013c50 <lv_ll_get_head>
 80137e4:	4604      	mov	r4, r0
    while(a != NULL) {
 80137e6:	b984      	cbnz	r4, 801380a <anim_task+0x4a>
    }

    last_task_run = lv_tick_get();
 80137e8:	f7ff ffc2 	bl	8013770 <lv_tick_get>
 80137ec:	6028      	str	r0, [r5, #0]
}
 80137ee:	b00a      	add	sp, #40	; 0x28
 80137f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        a->has_run = 0;
 80137f4:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80137f8:	f36f 03c3 	bfc	r3, #3, #1
 80137fc:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a)
 8013800:	4601      	mov	r1, r0
 8013802:	4620      	mov	r0, r4
 8013804:	f000 fa2a 	bl	8013c5c <lv_ll_get_next>
 8013808:	e7e1      	b.n	80137ce <anim_task+0xe>
        anim_list_changed = false;
 801380a:	2300      	movs	r3, #0
 801380c:	7033      	strb	r3, [r6, #0]
        if(!a->has_run) {
 801380e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8013812:	0718      	lsls	r0, r3, #28
 8013814:	d45b      	bmi.n	80138ce <anim_task+0x10e>
            a->has_run = 1; /*The list readying might be reseted so need to know which anim has run already*/
 8013816:	f043 0308 	orr.w	r3, r3, #8
 801381a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
            a->act_time += elaps;
 801381e:	8b63      	ldrh	r3, [r4, #26]
 8013820:	4443      	add	r3, r8
 8013822:	b21b      	sxth	r3, r3
            if(a->act_time >= 0) {
 8013824:	2b00      	cmp	r3, #0
            a->act_time += elaps;
 8013826:	8363      	strh	r3, [r4, #26]
            if(a->act_time >= 0) {
 8013828:	db51      	blt.n	80138ce <anim_task+0x10e>
                if(a->act_time > a->time) a->act_time = a->time;
 801382a:	8b22      	ldrh	r2, [r4, #24]
 801382c:	4293      	cmp	r3, r2
 801382e:	bfc8      	it	gt
 8013830:	8362      	strhgt	r2, [r4, #26]
                new_value = a->path_cb(a);
 8013832:	68a3      	ldr	r3, [r4, #8]
 8013834:	4620      	mov	r0, r4
 8013836:	4798      	blx	r3
                if(a->exec_cb) a->exec_cb(a->var, new_value);
 8013838:	6863      	ldr	r3, [r4, #4]
                new_value = a->path_cb(a);
 801383a:	4601      	mov	r1, r0
                if(a->exec_cb) a->exec_cb(a->var, new_value);
 801383c:	b10b      	cbz	r3, 8013842 <anim_task+0x82>
 801383e:	6820      	ldr	r0, [r4, #0]
 8013840:	4798      	blx	r3
                if(a->act_time >= a->time) {
 8013842:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
 8013846:	8b23      	ldrh	r3, [r4, #24]
 8013848:	429a      	cmp	r2, r3
 801384a:	db20      	blt.n	801388e <anim_task+0xce>
{

    /*Delete the animation if
     * - no repeat and no play back (simple one shot animation)
     * - no repeat, play back is enabled and play back is ready */
    if((a->repeat == 0 && a->playback == 0) || (a->repeat == 0 && a->playback == 1 && a->playback_now == 1)) {
 801384c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8013850:	0799      	lsls	r1, r3, #30
 8013852:	d003      	beq.n	801385c <anim_task+0x9c>
 8013854:	f003 0207 	and.w	r2, r3, #7
 8013858:	2a05      	cmp	r2, #5
 801385a:	d11f      	bne.n	801389c <anim_task+0xdc>

        /*Create copy from the animation and delete the animation from the list.
         * This way the `ready_cb` will see the animations like it's animation is ready deleted*/
        lv_anim_t a_tmp;
        memcpy(&a_tmp, a, sizeof(lv_anim_t));
 801385c:	4623      	mov	r3, r4
 801385e:	46ee      	mov	lr, sp
 8013860:	f104 0c28 	add.w	ip, r4, #40	; 0x28
 8013864:	6818      	ldr	r0, [r3, #0]
 8013866:	6859      	ldr	r1, [r3, #4]
 8013868:	4672      	mov	r2, lr
 801386a:	c203      	stmia	r2!, {r0, r1}
 801386c:	3308      	adds	r3, #8
 801386e:	4563      	cmp	r3, ip
 8013870:	4696      	mov	lr, r2
 8013872:	d1f7      	bne.n	8013864 <anim_task+0xa4>
        lv_ll_rem(&LV_GC_ROOT(_lv_anim_ll), a);
 8013874:	4621      	mov	r1, r4
 8013876:	4638      	mov	r0, r7
 8013878:	f000 fa29 	bl	8013cce <lv_ll_rem>
        lv_mem_free(a);
 801387c:	4620      	mov	r0, r4
 801387e:	f000 fb65 	bl	8013f4c <lv_mem_free>
        anim_list_changed = true;
 8013882:	2301      	movs	r3, #1
 8013884:	7033      	strb	r3, [r6, #0]

        /* Call the callback function at the end*/
        if(a_tmp.ready_cb != NULL) a_tmp.ready_cb(&a_tmp);
 8013886:	9b03      	ldr	r3, [sp, #12]
 8013888:	b10b      	cbz	r3, 801388e <anim_task+0xce>
 801388a:	4668      	mov	r0, sp
 801388c:	4798      	blx	r3
        if(anim_list_changed)
 801388e:	7833      	ldrb	r3, [r6, #0]
 8013890:	b1eb      	cbz	r3, 80138ce <anim_task+0x10e>
            a = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8013892:	4638      	mov	r0, r7
 8013894:	f000 f9dc 	bl	8013c50 <lv_ll_get_head>
            a = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8013898:	4604      	mov	r4, r0
 801389a:	e7a4      	b.n	80137e6 <anim_task+0x26>
    }
    /*If the animation is not deleted then restart it*/
    else {
        a->act_time = -a->repeat_pause; /*Restart the animation*/
 801389c:	8be2      	ldrh	r2, [r4, #30]
 801389e:	4252      	negs	r2, r2
 80138a0:	8362      	strh	r2, [r4, #26]
        /*Swap the start and end values in play back mode*/
        if(a->playback != 0) {
 80138a2:	07da      	lsls	r2, r3, #31
 80138a4:	d5f3      	bpl.n	801388e <anim_task+0xce>
            /*If now turning back use the 'playback_pause*/
            if(a->playback_now == 0) a->act_time = -a->playback_pause;
 80138a6:	f013 0304 	ands.w	r3, r3, #4
 80138aa:	bf02      	ittt	eq
 80138ac:	8ba2      	ldrheq	r2, [r4, #28]
 80138ae:	4252      	negeq	r2, r2
 80138b0:	8362      	strheq	r2, [r4, #26]

            /*Toggle the play back state*/
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 80138b2:	fab3 f383 	clz	r3, r3
 80138b6:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 80138ba:	095b      	lsrs	r3, r3, #5
 80138bc:	f363 0282 	bfi	r2, r3, #2, #1
 80138c0:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
            /*Swap the start and end values*/
            int32_t tmp;
            tmp      = a->start;
 80138c4:	6923      	ldr	r3, [r4, #16]
            a->start = a->end;
 80138c6:	6962      	ldr	r2, [r4, #20]
 80138c8:	6122      	str	r2, [r4, #16]
            a->end   = tmp;
 80138ca:	6163      	str	r3, [r4, #20]
 80138cc:	e7df      	b.n	801388e <anim_task+0xce>
            a = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 80138ce:	4621      	mov	r1, r4
 80138d0:	4638      	mov	r0, r7
 80138d2:	f000 f9c3 	bl	8013c5c <lv_ll_get_next>
 80138d6:	e7df      	b.n	8013898 <anim_task+0xd8>
 80138d8:	2000c598 	.word	0x2000c598
 80138dc:	20005f88 	.word	0x20005f88
 80138e0:	20005f85 	.word	0x20005f85

080138e4 <lv_anim_core_init>:
{
 80138e4:	b510      	push	{r4, lr}
    lv_ll_init(&LV_GC_ROOT(_lv_anim_ll), sizeof(lv_anim_t));
 80138e6:	2128      	movs	r1, #40	; 0x28
 80138e8:	4807      	ldr	r0, [pc, #28]	; (8013908 <lv_anim_core_init+0x24>)
 80138ea:	f000 f96b 	bl	8013bc4 <lv_ll_init>
    last_task_run = lv_tick_get();
 80138ee:	f7ff ff3f 	bl	8013770 <lv_tick_get>
 80138f2:	4b06      	ldr	r3, [pc, #24]	; (801390c <lv_anim_core_init+0x28>)
    lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, NULL);
 80138f4:	2203      	movs	r2, #3
    last_task_run = lv_tick_get();
 80138f6:	6018      	str	r0, [r3, #0]
    lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, NULL);
 80138f8:	211e      	movs	r1, #30
 80138fa:	2300      	movs	r3, #0
 80138fc:	4804      	ldr	r0, [pc, #16]	; (8013910 <lv_anim_core_init+0x2c>)
}
 80138fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, NULL);
 8013902:	f000 bcb3 	b.w	801426c <lv_task_create>
 8013906:	bf00      	nop
 8013908:	2000c598 	.word	0x2000c598
 801390c:	20005f88 	.word	0x20005f88
 8013910:	080137c1 	.word	0x080137c1

08013914 <lv_anim_del>:
{
 8013914:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013918:	4680      	mov	r8, r0
    a        = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 801391a:	4813      	ldr	r0, [pc, #76]	; (8013968 <lv_anim_del+0x54>)
        a_next = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 801391c:	4f12      	ldr	r7, [pc, #72]	; (8013968 <lv_anim_del+0x54>)
            anim_list_changed = true; /*Read by `anim_task`. It need to know if a delete occurred in
 801391e:	f8df 904c 	ldr.w	r9, [pc, #76]	; 801396c <lv_anim_del+0x58>
{
 8013922:	460e      	mov	r6, r1
    a        = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8013924:	f000 f994 	bl	8013c50 <lv_ll_get_head>
    bool del = false;
 8013928:	2500      	movs	r5, #0
    a        = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 801392a:	4604      	mov	r4, r0
            anim_list_changed = true; /*Read by `anim_task`. It need to know if a delete occurred in
 801392c:	f04f 0a01 	mov.w	sl, #1
    while(a != NULL) {
 8013930:	b914      	cbnz	r4, 8013938 <lv_anim_del+0x24>
}
 8013932:	4628      	mov	r0, r5
 8013934:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        a_next = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8013938:	4621      	mov	r1, r4
 801393a:	4638      	mov	r0, r7
 801393c:	f000 f98e 	bl	8013c5c <lv_ll_get_next>
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 8013940:	6823      	ldr	r3, [r4, #0]
 8013942:	4543      	cmp	r3, r8
        a_next = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8013944:	4683      	mov	fp, r0
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 8013946:	d10d      	bne.n	8013964 <lv_anim_del+0x50>
 8013948:	6863      	ldr	r3, [r4, #4]
 801394a:	42b3      	cmp	r3, r6
 801394c:	d000      	beq.n	8013950 <lv_anim_del+0x3c>
 801394e:	b94e      	cbnz	r6, 8013964 <lv_anim_del+0x50>
            lv_ll_rem(&LV_GC_ROOT(_lv_anim_ll), a);
 8013950:	4621      	mov	r1, r4
 8013952:	4638      	mov	r0, r7
 8013954:	f000 f9bb 	bl	8013cce <lv_ll_rem>
            lv_mem_free(a);
 8013958:	4620      	mov	r0, r4
 801395a:	f000 faf7 	bl	8013f4c <lv_mem_free>
            del = true;
 801395e:	2501      	movs	r5, #1
            anim_list_changed = true; /*Read by `anim_task`. It need to know if a delete occurred in
 8013960:	f889 a000 	strb.w	sl, [r9]
            del = true;
 8013964:	465c      	mov	r4, fp
 8013966:	e7e3      	b.n	8013930 <lv_anim_del+0x1c>
 8013968:	2000c598 	.word	0x2000c598
 801396c:	20005f85 	.word	0x20005f85

08013970 <lv_anim_create>:
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*fp == NULL would delete all animations of var*/
 8013970:	6841      	ldr	r1, [r0, #4]
{
 8013972:	b510      	push	{r4, lr}
 8013974:	4604      	mov	r4, r0
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*fp == NULL would delete all animations of var*/
 8013976:	b111      	cbz	r1, 801397e <lv_anim_create+0xe>
 8013978:	6800      	ldr	r0, [r0, #0]
 801397a:	f7ff ffcb 	bl	8013914 <lv_anim_del>
    lv_anim_t * new_anim = lv_ll_ins_head(&LV_GC_ROOT(_lv_anim_ll));
 801397e:	480f      	ldr	r0, [pc, #60]	; (80139bc <lv_anim_create+0x4c>)
 8013980:	f000 f92a 	bl	8013bd8 <lv_ll_ins_head>
    lv_mem_assert(new_anim);
 8013984:	b900      	cbnz	r0, 8013988 <lv_anim_create+0x18>
 8013986:	e7fe      	b.n	8013986 <lv_anim_create+0x16>
    a->playback_now = 0;
 8013988:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 801398c:	f36f 0382 	bfc	r3, #2, #1
 8013990:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    memcpy(new_anim, a, sizeof(lv_anim_t));
 8013994:	f104 0228 	add.w	r2, r4, #40	; 0x28
 8013998:	4603      	mov	r3, r0
 801399a:	f854 1b04 	ldr.w	r1, [r4], #4
 801399e:	f843 1b04 	str.w	r1, [r3], #4
 80139a2:	4294      	cmp	r4, r2
 80139a4:	d1f9      	bne.n	801399a <lv_anim_create+0x2a>
    if(new_anim->exec_cb) new_anim->exec_cb(new_anim->var, new_anim->start);
 80139a6:	6843      	ldr	r3, [r0, #4]
 80139a8:	b11b      	cbz	r3, 80139b2 <lv_anim_create+0x42>
 80139aa:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
 80139ae:	6800      	ldr	r0, [r0, #0]
 80139b0:	4798      	blx	r3
    anim_list_changed = true;
 80139b2:	4b03      	ldr	r3, [pc, #12]	; (80139c0 <lv_anim_create+0x50>)
 80139b4:	2201      	movs	r2, #1
 80139b6:	701a      	strb	r2, [r3, #0]
 80139b8:	bd10      	pop	{r4, pc}
 80139ba:	bf00      	nop
 80139bc:	2000c598 	.word	0x2000c598
 80139c0:	20005f85 	.word	0x20005f85

080139c4 <lv_anim_speed_to_time>:
    int32_t d     = LV_MATH_ABS((int32_t)start - end);
 80139c4:	1a89      	subs	r1, r1, r2
 80139c6:	2900      	cmp	r1, #0
 80139c8:	bfb8      	it	lt
 80139ca:	4249      	neglt	r1, r1
    uint32_t time = (int32_t)((int32_t)(d * 1000) / speed);
 80139cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80139d0:	434a      	muls	r2, r1
 80139d2:	fb92 f0f0 	sdiv	r0, r2, r0
    if(time > UINT16_MAX) time = UINT16_MAX;
 80139d6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80139da:	da04      	bge.n	80139e6 <lv_anim_speed_to_time+0x22>
        time++;
 80139dc:	2800      	cmp	r0, #0
 80139de:	bf08      	it	eq
 80139e0:	2001      	moveq	r0, #1
}
 80139e2:	b280      	uxth	r0, r0
 80139e4:	4770      	bx	lr
    if(time > UINT16_MAX) time = UINT16_MAX;
 80139e6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80139ea:	e7fa      	b.n	80139e2 <lv_anim_speed_to_time+0x1e>

080139ec <lv_area_set>:
 */
void lv_area_set(lv_area_t * area_p, lv_coord_t x1, lv_coord_t y1, lv_coord_t x2, lv_coord_t y2)
{
    area_p->x1 = x1;
    area_p->y1 = y1;
    area_p->x2 = x2;
 80139ec:	8083      	strh	r3, [r0, #4]
    area_p->y2 = y2;
 80139ee:	f9bd 3000 	ldrsh.w	r3, [sp]
    area_p->x1 = x1;
 80139f2:	8001      	strh	r1, [r0, #0]
    area_p->y1 = y1;
 80139f4:	8042      	strh	r2, [r0, #2]
    area_p->y2 = y2;
 80139f6:	80c3      	strh	r3, [r0, #6]
 80139f8:	4770      	bx	lr

080139fa <lv_area_set_width>:
 * @param area_p pointer to an area
 * @param w the new width of the area (w == 1 makes x1 == x2)
 */
void lv_area_set_width(lv_area_t * area_p, lv_coord_t w)
{
    area_p->x2 = area_p->x1 + w - 1;
 80139fa:	8803      	ldrh	r3, [r0, #0]
 80139fc:	3901      	subs	r1, #1
 80139fe:	4419      	add	r1, r3
 8013a00:	8081      	strh	r1, [r0, #4]
 8013a02:	4770      	bx	lr

08013a04 <lv_area_set_height>:
 * @param area_p pointer to an area
 * @param h the new height of the area (h == 1 makes y1 == y2)
 */
void lv_area_set_height(lv_area_t * area_p, lv_coord_t h)
{
    area_p->y2 = area_p->y1 + h - 1;
 8013a04:	8843      	ldrh	r3, [r0, #2]
 8013a06:	3901      	subs	r1, #1
 8013a08:	4419      	add	r1, r3
 8013a0a:	80c1      	strh	r1, [r0, #6]
 8013a0c:	4770      	bx	lr

08013a0e <lv_area_set_pos>:
 * @param area_p pointer to an area
 * @param x the new x coordinate of the area
 * @param y the new y coordinate of the area
 */
void lv_area_set_pos(lv_area_t * area_p, lv_coord_t x, lv_coord_t y)
{
 8013a0e:	b570      	push	{r4, r5, r6, lr}
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 8013a10:	88c3      	ldrh	r3, [r0, #6]
    return area_p->x2 - area_p->x1 + 1;
 8013a12:	8884      	ldrh	r4, [r0, #4]
 8013a14:	8806      	ldrh	r6, [r0, #0]
    return area_p->y2 - area_p->y1 + 1;
 8013a16:	8845      	ldrh	r5, [r0, #2]
    lv_coord_t w = lv_area_get_width(area_p);
    lv_coord_t h = lv_area_get_height(area_p);
    area_p->x1   = x;
 8013a18:	8001      	strh	r1, [r0, #0]
    area_p->y1   = y;
 8013a1a:	8042      	strh	r2, [r0, #2]
    area_p->x2 = area_p->x1 + w - 1;
 8013a1c:	4421      	add	r1, r4
    area_p->y2 = area_p->y1 + h - 1;
 8013a1e:	441a      	add	r2, r3
    area_p->x2 = area_p->x1 + w - 1;
 8013a20:	1b89      	subs	r1, r1, r6
    area_p->y2 = area_p->y1 + h - 1;
 8013a22:	1b52      	subs	r2, r2, r5
    area_p->x2 = area_p->x1 + w - 1;
 8013a24:	8081      	strh	r1, [r0, #4]
    area_p->y2 = area_p->y1 + h - 1;
 8013a26:	80c2      	strh	r2, [r0, #6]
 8013a28:	bd70      	pop	{r4, r5, r6, pc}

08013a2a <lv_area_get_size>:
 */
uint32_t lv_area_get_size(const lv_area_t * area_p)
{
    uint32_t size;

    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
 8013a2a:	f9b0 3000 	ldrsh.w	r3, [r0]
 8013a2e:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8013a32:	1ad2      	subs	r2, r2, r3
 8013a34:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8013a38:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 8013a3c:	1a18      	subs	r0, r3, r0
 8013a3e:	3001      	adds	r0, #1

    return size;
}
 8013a40:	fb02 0000 	mla	r0, r2, r0, r0
 8013a44:	4770      	bx	lr

08013a46 <lv_area_intersect>:
 * @return false: the two area has NO common parts, res_p is invalid
 */
bool lv_area_intersect(lv_area_t * res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
    /* Get the smaller area from 'a1_p' and 'a2_p' */
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 8013a46:	f9b1 3000 	ldrsh.w	r3, [r1]
{
 8013a4a:	b570      	push	{r4, r5, r6, lr}
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 8013a4c:	f9b2 5000 	ldrsh.w	r5, [r2]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 8013a50:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 8013a54:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 8013a58:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 8013a5c:	429d      	cmp	r5, r3
 8013a5e:	bfb8      	it	lt
 8013a60:	461d      	movlt	r5, r3
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 8013a62:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 8013a66:	8005      	strh	r5, [r0, #0]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 8013a68:	42a3      	cmp	r3, r4
 8013a6a:	bfb8      	it	lt
 8013a6c:	4623      	movlt	r3, r4
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 8013a6e:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 8013a72:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 8013a76:	8043      	strh	r3, [r0, #2]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 8013a78:	42b4      	cmp	r4, r6
 8013a7a:	bfa8      	it	ge
 8013a7c:	4634      	movge	r4, r6
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 8013a7e:	428a      	cmp	r2, r1
 8013a80:	bfa8      	it	ge
 8013a82:	460a      	movge	r2, r1

    /*If x1 or y1 greater then x2 or y2 then the areas union is empty*/
    bool union_ok = true;
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
 8013a84:	42a5      	cmp	r5, r4
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 8013a86:	8084      	strh	r4, [r0, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 8013a88:	80c2      	strh	r2, [r0, #6]
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
 8013a8a:	dc04      	bgt.n	8013a96 <lv_area_intersect+0x50>
 8013a8c:	4293      	cmp	r3, r2
 8013a8e:	bfcc      	ite	gt
 8013a90:	2000      	movgt	r0, #0
 8013a92:	2001      	movle	r0, #1
 8013a94:	bd70      	pop	{r4, r5, r6, pc}
        union_ok = false;
 8013a96:	2000      	movs	r0, #0
    }

    return union_ok;
}
 8013a98:	bd70      	pop	{r4, r5, r6, pc}

08013a9a <lv_area_join>:
 * @param a1_p pointer to the first area
 * @param a2_p pointer to the second area
 */
void lv_area_join(lv_area_t * a_res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
 8013a9a:	f9b2 3000 	ldrsh.w	r3, [r2]
{
 8013a9e:	b510      	push	{r4, lr}
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
 8013aa0:	f9b1 4000 	ldrsh.w	r4, [r1]
 8013aa4:	42a3      	cmp	r3, r4
 8013aa6:	bfa8      	it	ge
 8013aa8:	4623      	movge	r3, r4
 8013aaa:	8003      	strh	r3, [r0, #0]
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
 8013aac:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8013ab0:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8013ab4:	42a3      	cmp	r3, r4
 8013ab6:	bfa8      	it	ge
 8013ab8:	4623      	movge	r3, r4
 8013aba:	8043      	strh	r3, [r0, #2]
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
 8013abc:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 8013ac0:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8013ac4:	42a3      	cmp	r3, r4
 8013ac6:	bfb8      	it	lt
 8013ac8:	4623      	movlt	r3, r4
 8013aca:	8083      	strh	r3, [r0, #4]
    a_res_p->y2 = LV_MATH_MAX(a1_p->y2, a2_p->y2);
 8013acc:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8013ad0:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 8013ad4:	4293      	cmp	r3, r2
 8013ad6:	bfb8      	it	lt
 8013ad8:	4613      	movlt	r3, r2
 8013ada:	80c3      	strh	r3, [r0, #6]
 8013adc:	bd10      	pop	{r4, pc}

08013ade <lv_area_is_on>:
 * @param a2_p pointer to an other area
 * @return false: a1_p and a2_p has no common parts
 */
bool lv_area_is_on(const lv_area_t * a1_p, const lv_area_t * a2_p)
{
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
 8013ade:	f9b0 2000 	ldrsh.w	r2, [r0]
 8013ae2:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8013ae6:	429a      	cmp	r2, r3
 8013ae8:	dc14      	bgt.n	8013b14 <lv_area_is_on+0x36>
 8013aea:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8013aee:	f9b1 3000 	ldrsh.w	r3, [r1]
 8013af2:	429a      	cmp	r2, r3
 8013af4:	db0e      	blt.n	8013b14 <lv_area_is_on+0x36>
 8013af6:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8013afa:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8013afe:	429a      	cmp	r2, r3
 8013b00:	dc08      	bgt.n	8013b14 <lv_area_is_on+0x36>
 8013b02:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8013b06:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8013b0a:	4298      	cmp	r0, r3
 8013b0c:	bfb4      	ite	lt
 8013b0e:	2000      	movlt	r0, #0
 8013b10:	2001      	movge	r0, #1
 8013b12:	4770      	bx	lr
        return true;
    } else {
        return false;
 8013b14:	2000      	movs	r0, #0
    }
}
 8013b16:	4770      	bx	lr

08013b18 <lv_area_is_in>:
 */
bool lv_area_is_in(const lv_area_t * ain_p, const lv_area_t * aholder_p)
{
    bool is_in = false;

    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 8013b18:	f9b0 2000 	ldrsh.w	r2, [r0]
 8013b1c:	f9b1 3000 	ldrsh.w	r3, [r1]
 8013b20:	429a      	cmp	r2, r3
 8013b22:	db14      	blt.n	8013b4e <lv_area_is_in+0x36>
 8013b24:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8013b28:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8013b2c:	429a      	cmp	r2, r3
 8013b2e:	db0e      	blt.n	8013b4e <lv_area_is_in+0x36>
 8013b30:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8013b34:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8013b38:	429a      	cmp	r2, r3
 8013b3a:	dc08      	bgt.n	8013b4e <lv_area_is_in+0x36>
 8013b3c:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8013b40:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8013b44:	4298      	cmp	r0, r3
 8013b46:	bfcc      	ite	gt
 8013b48:	2000      	movgt	r0, #0
 8013b4a:	2001      	movle	r0, #1
 8013b4c:	4770      	bx	lr
    bool is_in = false;
 8013b4e:	2000      	movs	r0, #0
       ain_p->y2 <= aholder_p->y2) {
        is_in = true;
    }

    return is_in;
}
 8013b50:	4770      	bx	lr

08013b52 <lv_circ_init>:
 * @param tmp point to a variable. It will store temporary data
 * @param radius radius of the circle
 */
void lv_circ_init(lv_point_t * c, lv_coord_t * tmp, lv_coord_t radius)
{
    c->x = radius;
 8013b52:	8002      	strh	r2, [r0, #0]
    c->y = 0;
 8013b54:	2300      	movs	r3, #0
    *tmp = 1 - radius;
 8013b56:	f1c2 0201 	rsb	r2, r2, #1
    c->y = 0;
 8013b5a:	8043      	strh	r3, [r0, #2]
    *tmp = 1 - radius;
 8013b5c:	800a      	strh	r2, [r1, #0]
 8013b5e:	4770      	bx	lr

08013b60 <lv_circ_cont>:
 * @param c same as in circ_init
 * @return true if the circle is not ready yet
 */
bool lv_circ_cont(lv_point_t * c)
{
    return c->y <= c->x ? true : false;
 8013b60:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8013b64:	f9b0 0000 	ldrsh.w	r0, [r0]
}
 8013b68:	4282      	cmp	r2, r0
 8013b6a:	bfcc      	ite	gt
 8013b6c:	2000      	movgt	r0, #0
 8013b6e:	2001      	movle	r0, #1
 8013b70:	4770      	bx	lr

08013b72 <lv_circ_next>:
 * @param c same as in circ_init. The next point stored here.
 * @param tmp same as in circ_init.
 */
void lv_circ_next(lv_point_t * c, lv_coord_t * tmp)
{
    c->y++;
 8013b72:	8842      	ldrh	r2, [r0, #2]
 8013b74:	3201      	adds	r2, #1
{
 8013b76:	b530      	push	{r4, r5, lr}
    c->y++;
 8013b78:	b294      	uxth	r4, r2
 8013b7a:	b225      	sxth	r5, r4
 8013b7c:	8045      	strh	r5, [r0, #2]

    if(*tmp <= 0) {
 8013b7e:	f9b1 2000 	ldrsh.w	r2, [r1]
 8013b82:	2a00      	cmp	r2, #0
 8013b84:	dc04      	bgt.n	8013b90 <lv_circ_next+0x1e>
        (*tmp) += 2 * c->y + 1; // Change in decision criterion for y -> y+1
 8013b86:	3201      	adds	r2, #1
 8013b88:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 8013b8c:	800a      	strh	r2, [r1, #0]
 8013b8e:	bd30      	pop	{r4, r5, pc}
    } else {
        c->x--;
 8013b90:	8803      	ldrh	r3, [r0, #0]
 8013b92:	3b01      	subs	r3, #1
 8013b94:	b21b      	sxth	r3, r3
 8013b96:	8003      	strh	r3, [r0, #0]
        (*tmp) += 2 * (c->y - c->x) + 1; // Change for y -> y+1, x -> x-1
 8013b98:	1aed      	subs	r5, r5, r3
 8013b9a:	880b      	ldrh	r3, [r1, #0]
 8013b9c:	3301      	adds	r3, #1
 8013b9e:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8013ba2:	800b      	strh	r3, [r1, #0]
 8013ba4:	bd30      	pop	{r4, r5, pc}

08013ba6 <node_set_next.isra.0>:
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
{
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 8013ba6:	b131      	cbz	r1, 8013bb6 <node_set_next.isra.0+0x10>
 8013ba8:	6803      	ldr	r3, [r0, #0]

    uint32_t node_p_size = sizeof(lv_ll_node_t *);
    if(next)
 8013baa:	b112      	cbz	r2, 8013bb2 <node_set_next.isra.0+0xc>
        memcpy(act + LL_NEXT_P_OFFSET(ll_p), &next, node_p_size);
 8013bac:	4419      	add	r1, r3
 8013bae:	604a      	str	r2, [r1, #4]
 8013bb0:	4770      	bx	lr
    else
        memset(act + LL_NEXT_P_OFFSET(ll_p), 0, node_p_size);
 8013bb2:	3304      	adds	r3, #4
 8013bb4:	50ca      	str	r2, [r1, r3]
 8013bb6:	4770      	bx	lr

08013bb8 <node_set_prev.isra.2>:
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 8013bb8:	b119      	cbz	r1, 8013bc2 <node_set_prev.isra.2+0xa>
 8013bba:	6803      	ldr	r3, [r0, #0]
        memcpy(act + LL_PREV_P_OFFSET(ll_p), &prev, node_p_size);
 8013bbc:	50ca      	str	r2, [r1, r3]
    if(prev)
 8013bbe:	b102      	cbz	r2, 8013bc2 <node_set_prev.isra.2+0xa>
 8013bc0:	4770      	bx	lr
 8013bc2:	4770      	bx	lr

08013bc4 <lv_ll_init>:
    ll_p->head = NULL;
 8013bc4:	2300      	movs	r3, #0
 8013bc6:	6043      	str	r3, [r0, #4]
    ll_p->tail = NULL;
 8013bc8:	6083      	str	r3, [r0, #8]
    if(node_size & 0x3) {
 8013bca:	078b      	lsls	r3, r1, #30
        node_size = node_size & (~0x3);
 8013bcc:	bf1c      	itt	ne
 8013bce:	f021 0103 	bicne.w	r1, r1, #3
        node_size += 4;
 8013bd2:	3104      	addne	r1, #4
    ll_p->n_size = node_size;
 8013bd4:	6001      	str	r1, [r0, #0]
 8013bd6:	4770      	bx	lr

08013bd8 <lv_ll_ins_head>:
{
 8013bd8:	b538      	push	{r3, r4, r5, lr}
 8013bda:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 8013bdc:	6800      	ldr	r0, [r0, #0]
 8013bde:	3008      	adds	r0, #8
 8013be0:	f000 f97e 	bl	8013ee0 <lv_mem_alloc>
    if(n_new != NULL) {
 8013be4:	4605      	mov	r5, r0
 8013be6:	b198      	cbz	r0, 8013c10 <lv_ll_ins_head+0x38>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
 8013be8:	4601      	mov	r1, r0
 8013bea:	2200      	movs	r2, #0
 8013bec:	4620      	mov	r0, r4
 8013bee:	f7ff ffe3 	bl	8013bb8 <node_set_prev.isra.2>
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
 8013bf2:	4629      	mov	r1, r5
 8013bf4:	6862      	ldr	r2, [r4, #4]
 8013bf6:	4620      	mov	r0, r4
 8013bf8:	f7ff ffd5 	bl	8013ba6 <node_set_next.isra.0>
        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
 8013bfc:	6861      	ldr	r1, [r4, #4]
 8013bfe:	b119      	cbz	r1, 8013c08 <lv_ll_ins_head+0x30>
            node_set_prev(ll_p, ll_p->head, n_new);
 8013c00:	462a      	mov	r2, r5
 8013c02:	4620      	mov	r0, r4
 8013c04:	f7ff ffd8 	bl	8013bb8 <node_set_prev.isra.2>
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 8013c08:	68a3      	ldr	r3, [r4, #8]
        ll_p->head = n_new;      /*Set the new head in the dsc.*/
 8013c0a:	6065      	str	r5, [r4, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 8013c0c:	b903      	cbnz	r3, 8013c10 <lv_ll_ins_head+0x38>
            ll_p->tail = n_new;
 8013c0e:	60a5      	str	r5, [r4, #8]
}
 8013c10:	4628      	mov	r0, r5
 8013c12:	bd38      	pop	{r3, r4, r5, pc}

08013c14 <lv_ll_ins_tail>:
{
 8013c14:	b538      	push	{r3, r4, r5, lr}
 8013c16:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 8013c18:	6800      	ldr	r0, [r0, #0]
 8013c1a:	3008      	adds	r0, #8
 8013c1c:	f000 f960 	bl	8013ee0 <lv_mem_alloc>
    if(n_new == NULL) return NULL;
 8013c20:	4605      	mov	r5, r0
 8013c22:	b198      	cbz	r0, 8013c4c <lv_ll_ins_tail+0x38>
        node_set_next(ll_p, n_new, NULL);       /*No next after the new tail*/
 8013c24:	4601      	mov	r1, r0
 8013c26:	2200      	movs	r2, #0
 8013c28:	4620      	mov	r0, r4
 8013c2a:	f7ff ffbc 	bl	8013ba6 <node_set_next.isra.0>
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is tho old tail*/
 8013c2e:	4629      	mov	r1, r5
 8013c30:	68a2      	ldr	r2, [r4, #8]
 8013c32:	4620      	mov	r0, r4
 8013c34:	f7ff ffc0 	bl	8013bb8 <node_set_prev.isra.2>
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
 8013c38:	68a1      	ldr	r1, [r4, #8]
 8013c3a:	b119      	cbz	r1, 8013c44 <lv_ll_ins_tail+0x30>
            node_set_next(ll_p, ll_p->tail, n_new);
 8013c3c:	462a      	mov	r2, r5
 8013c3e:	4620      	mov	r0, r4
 8013c40:	f7ff ffb1 	bl	8013ba6 <node_set_next.isra.0>
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 8013c44:	6863      	ldr	r3, [r4, #4]
        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
 8013c46:	60a5      	str	r5, [r4, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 8013c48:	b903      	cbnz	r3, 8013c4c <lv_ll_ins_tail+0x38>
            ll_p->head = n_new;
 8013c4a:	6065      	str	r5, [r4, #4]
}
 8013c4c:	4628      	mov	r0, r5
 8013c4e:	bd38      	pop	{r3, r4, r5, pc}

08013c50 <lv_ll_get_head>:
    if(ll_p != NULL) {
 8013c50:	b100      	cbz	r0, 8013c54 <lv_ll_get_head+0x4>
        head = ll_p->head;
 8013c52:	6840      	ldr	r0, [r0, #4]
}
 8013c54:	4770      	bx	lr

08013c56 <lv_ll_get_tail>:
    if(ll_p != NULL) {
 8013c56:	b100      	cbz	r0, 8013c5a <lv_ll_get_tail+0x4>
        tail = ll_p->tail;
 8013c58:	6880      	ldr	r0, [r0, #8]
}
 8013c5a:	4770      	bx	lr

08013c5c <lv_ll_get_next>:
    if(ll_p != NULL) {
 8013c5c:	b110      	cbz	r0, 8013c64 <lv_ll_get_next+0x8>
        memcpy(&next, n_act_d + LL_NEXT_P_OFFSET(ll_p), sizeof(void *));
 8013c5e:	6803      	ldr	r3, [r0, #0]
 8013c60:	4419      	add	r1, r3
 8013c62:	6848      	ldr	r0, [r1, #4]
}
 8013c64:	4770      	bx	lr

08013c66 <lv_ll_get_prev>:
    if(ll_p != NULL) {
 8013c66:	b108      	cbz	r0, 8013c6c <lv_ll_get_prev+0x6>
        memcpy(&prev, n_act_d + LL_PREV_P_OFFSET(ll_p), sizeof(void *));
 8013c68:	6803      	ldr	r3, [r0, #0]
 8013c6a:	58c8      	ldr	r0, [r1, r3]
}
 8013c6c:	4770      	bx	lr

08013c6e <lv_ll_ins_prev>:
{
 8013c6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c70:	460c      	mov	r4, r1
    if(NULL == ll_p || NULL == n_act) return NULL;
 8013c72:	4605      	mov	r5, r0
 8013c74:	b340      	cbz	r0, 8013cc8 <lv_ll_ins_prev+0x5a>
 8013c76:	b341      	cbz	r1, 8013cca <lv_ll_ins_prev+0x5c>
    if(lv_ll_get_head(ll_p) == n_act) {
 8013c78:	6843      	ldr	r3, [r0, #4]
 8013c7a:	4299      	cmp	r1, r3
 8013c7c:	d103      	bne.n	8013c86 <lv_ll_ins_prev+0x18>
}
 8013c7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        n_new = lv_ll_ins_head(ll_p);
 8013c82:	f7ff bfa9 	b.w	8013bd8 <lv_ll_ins_head>
        n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 8013c86:	6800      	ldr	r0, [r0, #0]
 8013c88:	3008      	adds	r0, #8
 8013c8a:	f000 f929 	bl	8013ee0 <lv_mem_alloc>
        if(n_new == NULL) return NULL;
 8013c8e:	4606      	mov	r6, r0
 8013c90:	b1c0      	cbz	r0, 8013cc4 <lv_ll_ins_prev+0x56>
        n_prev = lv_ll_get_prev(ll_p, n_act);
 8013c92:	4621      	mov	r1, r4
 8013c94:	4628      	mov	r0, r5
 8013c96:	f7ff ffe6 	bl	8013c66 <lv_ll_get_prev>
        node_set_next(ll_p, n_prev, n_new);
 8013c9a:	4632      	mov	r2, r6
 8013c9c:	4601      	mov	r1, r0
        n_prev = lv_ll_get_prev(ll_p, n_act);
 8013c9e:	4607      	mov	r7, r0
        node_set_next(ll_p, n_prev, n_new);
 8013ca0:	4628      	mov	r0, r5
 8013ca2:	f7ff ff80 	bl	8013ba6 <node_set_next.isra.0>
        node_set_prev(ll_p, n_new, n_prev);
 8013ca6:	463a      	mov	r2, r7
 8013ca8:	4631      	mov	r1, r6
 8013caa:	4628      	mov	r0, r5
 8013cac:	f7ff ff84 	bl	8013bb8 <node_set_prev.isra.2>
        node_set_prev(ll_p, n_act, n_new);
 8013cb0:	4632      	mov	r2, r6
 8013cb2:	4621      	mov	r1, r4
 8013cb4:	4628      	mov	r0, r5
 8013cb6:	f7ff ff7f 	bl	8013bb8 <node_set_prev.isra.2>
        node_set_next(ll_p, n_new, n_act);
 8013cba:	4622      	mov	r2, r4
 8013cbc:	4631      	mov	r1, r6
 8013cbe:	4628      	mov	r0, r5
 8013cc0:	f7ff ff71 	bl	8013ba6 <node_set_next.isra.0>
        if(n_new == NULL) return NULL;
 8013cc4:	4634      	mov	r4, r6
 8013cc6:	e000      	b.n	8013cca <lv_ll_ins_prev+0x5c>
    if(NULL == ll_p || NULL == n_act) return NULL;
 8013cc8:	4604      	mov	r4, r0
}
 8013cca:	4620      	mov	r0, r4
 8013ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013cce <lv_ll_rem>:
{
 8013cce:	b570      	push	{r4, r5, r6, lr}
 8013cd0:	460a      	mov	r2, r1
    if(ll_p != NULL) {
 8013cd2:	4604      	mov	r4, r0
 8013cd4:	b308      	cbz	r0, 8013d1a <lv_ll_rem+0x4c>
    if(lv_ll_get_head(ll_p) == node_p) {
 8013cd6:	6843      	ldr	r3, [r0, #4]
 8013cd8:	4299      	cmp	r1, r3
 8013cda:	d10e      	bne.n	8013cfa <lv_ll_rem+0x2c>
        ll_p->head = lv_ll_get_next(ll_p, node_p);
 8013cdc:	4611      	mov	r1, r2
 8013cde:	4620      	mov	r0, r4
 8013ce0:	f7ff ffbc 	bl	8013c5c <lv_ll_get_next>
 8013ce4:	4601      	mov	r1, r0
 8013ce6:	6060      	str	r0, [r4, #4]
        if(ll_p->head == NULL) {
 8013ce8:	b908      	cbnz	r0, 8013cee <lv_ll_rem+0x20>
            ll_p->tail = NULL;
 8013cea:	60a0      	str	r0, [r4, #8]
 8013cec:	bd70      	pop	{r4, r5, r6, pc}
            node_set_prev(ll_p, ll_p->head, NULL);
 8013cee:	2200      	movs	r2, #0
        node_set_prev(ll_p, n_next, n_prev);
 8013cf0:	4620      	mov	r0, r4
}
 8013cf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        node_set_prev(ll_p, n_next, n_prev);
 8013cf6:	f7ff bf5f 	b.w	8013bb8 <node_set_prev.isra.2>
    } else if(lv_ll_get_tail(ll_p) == node_p) {
 8013cfa:	6883      	ldr	r3, [r0, #8]
 8013cfc:	4299      	cmp	r1, r3
 8013cfe:	d10e      	bne.n	8013d1e <lv_ll_rem+0x50>
        ll_p->tail = lv_ll_get_prev(ll_p, node_p);
 8013d00:	f7ff ffb1 	bl	8013c66 <lv_ll_get_prev>
 8013d04:	4601      	mov	r1, r0
 8013d06:	60a0      	str	r0, [r4, #8]
        if(ll_p->tail == NULL) {
 8013d08:	b908      	cbnz	r0, 8013d0e <lv_ll_rem+0x40>
            ll_p->head = NULL;
 8013d0a:	6060      	str	r0, [r4, #4]
 8013d0c:	bd70      	pop	{r4, r5, r6, pc}
            node_set_next(ll_p, ll_p->tail, NULL);
 8013d0e:	4620      	mov	r0, r4
 8013d10:	2200      	movs	r2, #0
}
 8013d12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            node_set_next(ll_p, ll_p->tail, NULL);
 8013d16:	f7ff bf46 	b.w	8013ba6 <node_set_next.isra.0>
    if(lv_ll_get_head(ll_p) == node_p) {
 8013d1a:	2900      	cmp	r1, #0
 8013d1c:	d0de      	beq.n	8013cdc <lv_ll_rem+0xe>
        lv_ll_node_t * n_prev = lv_ll_get_prev(ll_p, node_p);
 8013d1e:	4611      	mov	r1, r2
 8013d20:	4620      	mov	r0, r4
 8013d22:	f7ff ffa0 	bl	8013c66 <lv_ll_get_prev>
 8013d26:	4606      	mov	r6, r0
        lv_ll_node_t * n_next = lv_ll_get_next(ll_p, node_p);
 8013d28:	4611      	mov	r1, r2
 8013d2a:	4620      	mov	r0, r4
 8013d2c:	f7ff ff96 	bl	8013c5c <lv_ll_get_next>
        node_set_next(ll_p, n_prev, n_next);
 8013d30:	4631      	mov	r1, r6
 8013d32:	4602      	mov	r2, r0
        lv_ll_node_t * n_next = lv_ll_get_next(ll_p, node_p);
 8013d34:	4605      	mov	r5, r0
        node_set_next(ll_p, n_prev, n_next);
 8013d36:	4620      	mov	r0, r4
 8013d38:	f7ff ff35 	bl	8013ba6 <node_set_next.isra.0>
        node_set_prev(ll_p, n_next, n_prev);
 8013d3c:	4632      	mov	r2, r6
 8013d3e:	4629      	mov	r1, r5
 8013d40:	e7d6      	b.n	8013cf0 <lv_ll_rem+0x22>

08013d42 <lv_ll_chg_list>:
{
 8013d42:	b570      	push	{r4, r5, r6, lr}
 8013d44:	460c      	mov	r4, r1
 8013d46:	461e      	mov	r6, r3
    lv_ll_rem(ll_ori_p, node);
 8013d48:	4611      	mov	r1, r2
{
 8013d4a:	4615      	mov	r5, r2
    lv_ll_rem(ll_ori_p, node);
 8013d4c:	f7ff ffbf 	bl	8013cce <lv_ll_rem>
    if(head) {
 8013d50:	b1a6      	cbz	r6, 8013d7c <lv_ll_chg_list+0x3a>
        node_set_prev(ll_new_p, node, NULL);
 8013d52:	2200      	movs	r2, #0
 8013d54:	4629      	mov	r1, r5
 8013d56:	4620      	mov	r0, r4
 8013d58:	f7ff ff2e 	bl	8013bb8 <node_set_prev.isra.2>
        node_set_next(ll_new_p, node, ll_new_p->head);
 8013d5c:	4629      	mov	r1, r5
 8013d5e:	6862      	ldr	r2, [r4, #4]
 8013d60:	4620      	mov	r0, r4
 8013d62:	f7ff ff20 	bl	8013ba6 <node_set_next.isra.0>
        if(ll_new_p->head != NULL) { /*If there is old head then before it goes the new*/
 8013d66:	6861      	ldr	r1, [r4, #4]
 8013d68:	b119      	cbz	r1, 8013d72 <lv_ll_chg_list+0x30>
            node_set_prev(ll_new_p, ll_new_p->head, node);
 8013d6a:	462a      	mov	r2, r5
 8013d6c:	4620      	mov	r0, r4
 8013d6e:	f7ff ff23 	bl	8013bb8 <node_set_prev.isra.2>
        if(ll_new_p->tail == NULL) { /*If there is no tail (first node) set the tail too*/
 8013d72:	68a3      	ldr	r3, [r4, #8]
        ll_new_p->head = node;       /*Set the new head in the dsc.*/
 8013d74:	6065      	str	r5, [r4, #4]
        if(ll_new_p->tail == NULL) { /*If there is no tail (first node) set the tail too*/
 8013d76:	b9ab      	cbnz	r3, 8013da4 <lv_ll_chg_list+0x62>
            ll_new_p->tail = node;
 8013d78:	60a5      	str	r5, [r4, #8]
 8013d7a:	bd70      	pop	{r4, r5, r6, pc}
        node_set_prev(ll_new_p, node, ll_new_p->tail);
 8013d7c:	68a2      	ldr	r2, [r4, #8]
 8013d7e:	4629      	mov	r1, r5
 8013d80:	4620      	mov	r0, r4
 8013d82:	f7ff ff19 	bl	8013bb8 <node_set_prev.isra.2>
        node_set_next(ll_new_p, node, NULL);
 8013d86:	4629      	mov	r1, r5
 8013d88:	4632      	mov	r2, r6
 8013d8a:	4620      	mov	r0, r4
 8013d8c:	f7ff ff0b 	bl	8013ba6 <node_set_next.isra.0>
        if(ll_new_p->tail != NULL) { /*If there is old tail then after it goes the new*/
 8013d90:	68a1      	ldr	r1, [r4, #8]
 8013d92:	b119      	cbz	r1, 8013d9c <lv_ll_chg_list+0x5a>
            node_set_next(ll_new_p, ll_new_p->tail, node);
 8013d94:	462a      	mov	r2, r5
 8013d96:	4620      	mov	r0, r4
 8013d98:	f7ff ff05 	bl	8013ba6 <node_set_next.isra.0>
        if(ll_new_p->head == NULL) { /*If there is no head (first node) set the head too*/
 8013d9c:	6863      	ldr	r3, [r4, #4]
        ll_new_p->tail = node;       /*Set the new tail in the dsc.*/
 8013d9e:	60a5      	str	r5, [r4, #8]
        if(ll_new_p->head == NULL) { /*If there is no head (first node) set the head too*/
 8013da0:	b903      	cbnz	r3, 8013da4 <lv_ll_chg_list+0x62>
            ll_new_p->head = node;
 8013da2:	6065      	str	r5, [r4, #4]
 8013da4:	bd70      	pop	{r4, r5, r6, pc}

08013da6 <lv_ll_move_before>:
    if(n_act == n_after) return; /*Can't move before itself*/
 8013da6:	4291      	cmp	r1, r2
{
 8013da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013daa:	4605      	mov	r5, r0
 8013dac:	460c      	mov	r4, r1
 8013dae:	4616      	mov	r6, r2
    if(n_act == n_after) return; /*Can't move before itself*/
 8013db0:	d042      	beq.n	8013e38 <lv_ll_move_before+0x92>
    if(n_after != NULL)
 8013db2:	b132      	cbz	r2, 8013dc2 <lv_ll_move_before+0x1c>
        n_before = lv_ll_get_prev(ll_p, n_after);
 8013db4:	4611      	mov	r1, r2
 8013db6:	f7ff ff56 	bl	8013c66 <lv_ll_get_prev>
    if(n_act == n_before) return; /*Already before `n_after`*/
 8013dba:	4284      	cmp	r4, r0
        n_before = lv_ll_get_prev(ll_p, n_after);
 8013dbc:	4607      	mov	r7, r0
    if(n_act == n_before) return; /*Already before `n_after`*/
 8013dbe:	d121      	bne.n	8013e04 <lv_ll_move_before+0x5e>
 8013dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(ll_p != NULL) {
 8013dc2:	b100      	cbz	r0, 8013dc6 <lv_ll_move_before+0x20>
        tail = ll_p->tail;
 8013dc4:	6886      	ldr	r6, [r0, #8]
    if(n_act == n_before) return; /*Already before `n_after`*/
 8013dc6:	42b4      	cmp	r4, r6
 8013dc8:	d100      	bne.n	8013dcc <lv_ll_move_before+0x26>
 8013dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_ll_rem(ll_p, n_act);
 8013dcc:	4621      	mov	r1, r4
 8013dce:	4628      	mov	r0, r5
 8013dd0:	f7ff ff7d 	bl	8013cce <lv_ll_rem>
    node_set_next(ll_p, n_before, n_act);
 8013dd4:	4622      	mov	r2, r4
 8013dd6:	4631      	mov	r1, r6
 8013dd8:	4628      	mov	r0, r5
 8013dda:	f7ff fee4 	bl	8013ba6 <node_set_next.isra.0>
    node_set_prev(ll_p, n_act, n_before);
 8013dde:	4632      	mov	r2, r6
 8013de0:	4621      	mov	r1, r4
 8013de2:	4628      	mov	r0, r5
 8013de4:	f7ff fee8 	bl	8013bb8 <node_set_prev.isra.2>
    node_set_prev(ll_p, n_after, n_act);
 8013de8:	4622      	mov	r2, r4
 8013dea:	2100      	movs	r1, #0
 8013dec:	4628      	mov	r0, r5
 8013dee:	f7ff fee3 	bl	8013bb8 <node_set_prev.isra.2>
    node_set_next(ll_p, n_act, n_after);
 8013df2:	2200      	movs	r2, #0
 8013df4:	4621      	mov	r1, r4
 8013df6:	4628      	mov	r0, r5
 8013df8:	f7ff fed5 	bl	8013ba6 <node_set_next.isra.0>
    if(n_after == NULL) ll_p->tail = n_act;
 8013dfc:	60ac      	str	r4, [r5, #8]
    if(n_before == NULL) ll_p->head = n_act;
 8013dfe:	b9de      	cbnz	r6, 8013e38 <lv_ll_move_before+0x92>
 8013e00:	606c      	str	r4, [r5, #4]
 8013e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_ll_rem(ll_p, n_act);
 8013e04:	4621      	mov	r1, r4
 8013e06:	4628      	mov	r0, r5
 8013e08:	f7ff ff61 	bl	8013cce <lv_ll_rem>
    node_set_next(ll_p, n_before, n_act);
 8013e0c:	4622      	mov	r2, r4
 8013e0e:	4639      	mov	r1, r7
 8013e10:	4628      	mov	r0, r5
 8013e12:	f7ff fec8 	bl	8013ba6 <node_set_next.isra.0>
    node_set_prev(ll_p, n_act, n_before);
 8013e16:	463a      	mov	r2, r7
 8013e18:	4621      	mov	r1, r4
 8013e1a:	4628      	mov	r0, r5
 8013e1c:	f7ff fecc 	bl	8013bb8 <node_set_prev.isra.2>
    node_set_prev(ll_p, n_after, n_act);
 8013e20:	4631      	mov	r1, r6
 8013e22:	4622      	mov	r2, r4
 8013e24:	4628      	mov	r0, r5
 8013e26:	f7ff fec7 	bl	8013bb8 <node_set_prev.isra.2>
    node_set_next(ll_p, n_act, n_after);
 8013e2a:	4632      	mov	r2, r6
 8013e2c:	4621      	mov	r1, r4
 8013e2e:	4628      	mov	r0, r5
 8013e30:	f7ff feb9 	bl	8013ba6 <node_set_next.isra.0>
 8013e34:	463e      	mov	r6, r7
 8013e36:	e7e2      	b.n	8013dfe <lv_ll_move_before+0x58>
 8013e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013e3a <lv_ll_is_empty>:
    if(ll_p == NULL) return true;
 8013e3a:	b130      	cbz	r0, 8013e4a <lv_ll_is_empty+0x10>
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
 8013e3c:	6843      	ldr	r3, [r0, #4]
 8013e3e:	b933      	cbnz	r3, 8013e4e <lv_ll_is_empty+0x14>
 8013e40:	6880      	ldr	r0, [r0, #8]
 8013e42:	fab0 f080 	clz	r0, r0
 8013e46:	0940      	lsrs	r0, r0, #5
 8013e48:	4770      	bx	lr
    if(ll_p == NULL) return true;
 8013e4a:	2001      	movs	r0, #1
 8013e4c:	4770      	bx	lr
    return false;
 8013e4e:	2000      	movs	r0, #0
}
 8013e50:	4770      	bx	lr
	...

08013e54 <ent_get_next>:
 * Give the next entry after 'act_e'
 * @param act_e pointer to an entry
 * @return pointer to an entry after 'act_e'
 */
static lv_mem_ent_t * ent_get_next(lv_mem_ent_t * act_e)
{
 8013e54:	4a07      	ldr	r2, [pc, #28]	; (8013e74 <ent_get_next+0x20>)
    lv_mem_ent_t * next_e = NULL;

    if(act_e == NULL) { /*NULL means: get the first entry*/
 8013e56:	b908      	cbnz	r0, 8013e5c <ent_get_next+0x8>
        next_e = (lv_mem_ent_t *)work_mem;
 8013e58:	6810      	ldr	r0, [r2, #0]
 8013e5a:	4770      	bx	lr
    } else { /*Get the next entry */
        uint8_t * data = &act_e->first_data;
 8013e5c:	1d03      	adds	r3, r0, #4
        next_e         = (lv_mem_ent_t *)&data[act_e->header.s.d_size];
 8013e5e:	6800      	ldr	r0, [r0, #0]
 8013e60:	eb03 0050 	add.w	r0, r3, r0, lsr #1

        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 8013e64:	6813      	ldr	r3, [r2, #0]
 8013e66:	1d01      	adds	r1, r0, #4
 8013e68:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8013e6c:	4299      	cmp	r1, r3
 8013e6e:	bf28      	it	cs
 8013e70:	2000      	movcs	r0, #0
    }

    return next_e;
}
 8013e72:	4770      	bx	lr
 8013e74:	20005f8c 	.word	0x20005f8c

08013e78 <ent_trunc>:
        size = size & (~0x7);
        size += 8;
    }
#else
    /*Round the size up to 4*/
    if(size & 0x3) {
 8013e78:	078b      	lsls	r3, r1, #30
        size = size & (~0x3);
 8013e7a:	bf18      	it	ne
 8013e7c:	f021 0103 	bicne.w	r1, r1, #3
        size += 4;
    }
#endif

    /*Don't let empty space only for a header without data*/
    if(e->header.s.d_size == size + sizeof(lv_mem_header_t)) {
 8013e80:	6803      	ldr	r3, [r0, #0]
        size += 4;
 8013e82:	bf18      	it	ne
 8013e84:	3104      	addne	r1, #4
    if(e->header.s.d_size == size + sizeof(lv_mem_header_t)) {
 8013e86:	f3c3 035e 	ubfx	r3, r3, #1, #31
 8013e8a:	1d0a      	adds	r2, r1, #4
 8013e8c:	4293      	cmp	r3, r2
{
 8013e8e:	b510      	push	{r4, lr}
    if(e->header.s.d_size == size + sizeof(lv_mem_header_t)) {
 8013e90:	d011      	beq.n	8013eb6 <ent_trunc+0x3e>
        size = e->header.s.d_size;
    }

    /* Create the new entry after the current if there is space for it */
    if(e->header.s.d_size != size) {
 8013e92:	4299      	cmp	r1, r3
 8013e94:	d00a      	beq.n	8013eac <ent_trunc+0x34>
        uint8_t * e_data             = &e->first_data;
 8013e96:	1d02      	adds	r2, r0, #4
        lv_mem_ent_t * after_new_e   = (lv_mem_ent_t *)&e_data[size];
        after_new_e->header.s.used   = 0;
        after_new_e->header.s.d_size = e->header.s.d_size - size - sizeof(lv_mem_header_t);
 8013e98:	3b04      	subs	r3, #4
        after_new_e->header.s.used   = 0;
 8013e9a:	5c54      	ldrb	r4, [r2, r1]
 8013e9c:	f36f 0400 	bfc	r4, #0, #1
 8013ea0:	5454      	strb	r4, [r2, r1]
        after_new_e->header.s.d_size = e->header.s.d_size - size - sizeof(lv_mem_header_t);
 8013ea2:	5854      	ldr	r4, [r2, r1]
 8013ea4:	1a5b      	subs	r3, r3, r1
 8013ea6:	f363 045f 	bfi	r4, r3, #1, #31
 8013eaa:	5054      	str	r4, [r2, r1]
    }

    /* Set the new size for the original entry */
    e->header.s.d_size = size;
 8013eac:	6803      	ldr	r3, [r0, #0]
 8013eae:	f361 035f 	bfi	r3, r1, #1, #31
 8013eb2:	6003      	str	r3, [r0, #0]
 8013eb4:	bd10      	pop	{r4, pc}
 8013eb6:	4619      	mov	r1, r3
 8013eb8:	e7f8      	b.n	8013eac <ent_trunc+0x34>
	...

08013ebc <lv_mem_init>:
    work_mem = (uint8_t *)work_mem_int;
 8013ebc:	4b06      	ldr	r3, [pc, #24]	; (8013ed8 <lv_mem_init+0x1c>)
 8013ebe:	4a07      	ldr	r2, [pc, #28]	; (8013edc <lv_mem_init+0x20>)
 8013ec0:	6013      	str	r3, [r2, #0]
    full->header.s.used = 0;
 8013ec2:	781a      	ldrb	r2, [r3, #0]
 8013ec4:	f36f 0200 	bfc	r2, #0, #1
 8013ec8:	701a      	strb	r2, [r3, #0]
    full->header.s.d_size = LV_MEM_SIZE - sizeof(lv_mem_header_t);
 8013eca:	681a      	ldr	r2, [r3, #0]
 8013ecc:	f644 71fc 	movw	r1, #20476	; 0x4ffc
 8013ed0:	f361 025f 	bfi	r2, r1, #1, #31
 8013ed4:	601a      	str	r2, [r3, #0]
 8013ed6:	4770      	bx	lr
 8013ed8:	20005f90 	.word	0x20005f90
 8013edc:	20005f8c 	.word	0x20005f8c

08013ee0 <lv_mem_alloc>:
{
 8013ee0:	b538      	push	{r3, r4, r5, lr}
    if(size == 0) {
 8013ee2:	4605      	mov	r5, r0
 8013ee4:	b300      	cbz	r0, 8013f28 <lv_mem_alloc+0x48>
    if(size & 0x3) {
 8013ee6:	0782      	lsls	r2, r0, #30
        size = size & (~0x3);
 8013ee8:	bf1c      	itt	ne
 8013eea:	f020 0503 	bicne.w	r5, r0, #3
        size += 4;
 8013eee:	3504      	addne	r5, #4
    lv_mem_ent_t * e = NULL;
 8013ef0:	2400      	movs	r4, #0
        e = ent_get_next(e);
 8013ef2:	4620      	mov	r0, r4
 8013ef4:	f7ff ffae 	bl	8013e54 <ent_get_next>
        if(e != NULL) {
 8013ef8:	4604      	mov	r4, r0
 8013efa:	b198      	cbz	r0, 8013f24 <lv_mem_alloc+0x44>
    if(e->header.s.used == 0 && e->header.s.d_size >= size) {
 8013efc:	7803      	ldrb	r3, [r0, #0]
 8013efe:	07db      	lsls	r3, r3, #31
 8013f00:	d4f7      	bmi.n	8013ef2 <lv_mem_alloc+0x12>
 8013f02:	6803      	ldr	r3, [r0, #0]
 8013f04:	ebb5 0f53 	cmp.w	r5, r3, lsr #1
 8013f08:	d8f3      	bhi.n	8013ef2 <lv_mem_alloc+0x12>
        ent_trunc(e, size),
 8013f0a:	4629      	mov	r1, r5
 8013f0c:	f7ff ffb4 	bl	8013e78 <ent_trunc>
            e->header.s.used = 1;
 8013f10:	7803      	ldrb	r3, [r0, #0]
 8013f12:	f043 0301 	orr.w	r3, r3, #1
 8013f16:	f804 3b04 	strb.w	r3, [r4], #4
    if(alloc != NULL) memset(alloc, 0xaa, size);
 8013f1a:	462a      	mov	r2, r5
 8013f1c:	21aa      	movs	r1, #170	; 0xaa
 8013f1e:	4620      	mov	r0, r4
 8013f20:	f005 fb03 	bl	801952a <memset>
}
 8013f24:	4620      	mov	r0, r4
 8013f26:	bd38      	pop	{r3, r4, r5, pc}
        return &zero_mem;
 8013f28:	4c00      	ldr	r4, [pc, #0]	; (8013f2c <lv_mem_alloc+0x4c>)
 8013f2a:	e7fb      	b.n	8013f24 <lv_mem_alloc+0x44>
 8013f2c:	2000af90 	.word	0x2000af90

08013f30 <lv_mem_get_size>:
    if(data == NULL) return 0;
 8013f30:	b140      	cbz	r0, 8013f44 <lv_mem_get_size+0x14>
    if(data == &zero_mem) return 0;
 8013f32:	4b05      	ldr	r3, [pc, #20]	; (8013f48 <lv_mem_get_size+0x18>)
 8013f34:	4298      	cmp	r0, r3
 8013f36:	d004      	beq.n	8013f42 <lv_mem_get_size+0x12>
    return e->header.s.d_size;
 8013f38:	f850 0c04 	ldr.w	r0, [r0, #-4]
 8013f3c:	f3c0 005e 	ubfx	r0, r0, #1, #31
 8013f40:	4770      	bx	lr
    if(data == NULL) return 0;
 8013f42:	2000      	movs	r0, #0
}
 8013f44:	4770      	bx	lr
 8013f46:	bf00      	nop
 8013f48:	2000af90 	.word	0x2000af90

08013f4c <lv_mem_free>:
    if(data == &zero_mem) return;
 8013f4c:	4b13      	ldr	r3, [pc, #76]	; (8013f9c <lv_mem_free+0x50>)
 8013f4e:	4298      	cmp	r0, r3
{
 8013f50:	b510      	push	{r4, lr}
 8013f52:	4604      	mov	r4, r0
    if(data == &zero_mem) return;
 8013f54:	d011      	beq.n	8013f7a <lv_mem_free+0x2e>
    if(data == NULL) return;
 8013f56:	b180      	cbz	r0, 8013f7a <lv_mem_free+0x2e>
    memset((void *)data, 0xbb, lv_mem_get_size(data));
 8013f58:	f7ff ffea 	bl	8013f30 <lv_mem_get_size>
 8013f5c:	21bb      	movs	r1, #187	; 0xbb
 8013f5e:	4602      	mov	r2, r0
 8013f60:	4620      	mov	r0, r4
 8013f62:	f005 fae2 	bl	801952a <memset>
    e->header.s.used = 0;
 8013f66:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8013f6a:	4620      	mov	r0, r4
 8013f6c:	f36f 0300 	bfc	r3, #0, #1
 8013f70:	f800 3d04 	strb.w	r3, [r0, #-4]!
        e_next = ent_get_next(e_next);
 8013f74:	f7ff ff6e 	bl	8013e54 <ent_get_next>
    while(e_next != NULL) {
 8013f78:	b900      	cbnz	r0, 8013f7c <lv_mem_free+0x30>
 8013f7a:	bd10      	pop	{r4, pc}
        if(e_next->header.s.used == 0) {
 8013f7c:	7803      	ldrb	r3, [r0, #0]
 8013f7e:	07db      	lsls	r3, r3, #31
 8013f80:	d4fb      	bmi.n	8013f7a <lv_mem_free+0x2e>
            e->header.s.d_size += e_next->header.s.d_size + sizeof(e->header);
 8013f82:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8013f86:	6801      	ldr	r1, [r0, #0]
 8013f88:	f3c3 025e 	ubfx	r2, r3, #1, #31
 8013f8c:	3204      	adds	r2, #4
 8013f8e:	eb02 0251 	add.w	r2, r2, r1, lsr #1
 8013f92:	f362 035f 	bfi	r3, r2, #1, #31
 8013f96:	f844 3c04 	str.w	r3, [r4, #-4]
 8013f9a:	e7eb      	b.n	8013f74 <lv_mem_free+0x28>
 8013f9c:	2000af90 	.word	0x2000af90

08013fa0 <lv_mem_realloc>:
{
 8013fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013fa2:	460d      	mov	r5, r1
    if(data_p != NULL) {
 8013fa4:	4604      	mov	r4, r0
 8013fa6:	b128      	cbz	r0, 8013fb4 <lv_mem_realloc+0x14>
        if(e->header.s.used == 0) {
 8013fa8:	f810 3c04 	ldrb.w	r3, [r0, #-4]
            data_p = NULL;
 8013fac:	f013 0f01 	tst.w	r3, #1
 8013fb0:	bf08      	it	eq
 8013fb2:	2400      	moveq	r4, #0
    uint32_t old_size = lv_mem_get_size(data_p);
 8013fb4:	4620      	mov	r0, r4
 8013fb6:	f7ff ffbb 	bl	8013f30 <lv_mem_get_size>
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
 8013fba:	42a8      	cmp	r0, r5
    uint32_t old_size = lv_mem_get_size(data_p);
 8013fbc:	4607      	mov	r7, r0
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
 8013fbe:	d004      	beq.n	8013fca <lv_mem_realloc+0x2a>
    if(new_size < old_size) {
 8013fc0:	d905      	bls.n	8013fce <lv_mem_realloc+0x2e>
        ent_trunc(e, new_size);
 8013fc2:	4629      	mov	r1, r5
 8013fc4:	1f20      	subs	r0, r4, #4
 8013fc6:	f7ff ff57 	bl	8013e78 <ent_trunc>
 8013fca:	4626      	mov	r6, r4
 8013fcc:	e010      	b.n	8013ff0 <lv_mem_realloc+0x50>
    new_p = lv_mem_alloc(new_size);
 8013fce:	4628      	mov	r0, r5
 8013fd0:	f7ff ff86 	bl	8013ee0 <lv_mem_alloc>
    if(new_p != NULL && data_p != NULL) {
 8013fd4:	4606      	mov	r6, r0
 8013fd6:	b158      	cbz	r0, 8013ff0 <lv_mem_realloc+0x50>
 8013fd8:	b154      	cbz	r4, 8013ff0 <lv_mem_realloc+0x50>
        if(old_size != 0) {
 8013fda:	b14f      	cbz	r7, 8013ff0 <lv_mem_realloc+0x50>
            memcpy(new_p, data_p, LV_MATH_MIN(new_size, old_size));
 8013fdc:	42af      	cmp	r7, r5
 8013fde:	463a      	mov	r2, r7
 8013fe0:	4621      	mov	r1, r4
 8013fe2:	bf28      	it	cs
 8013fe4:	462a      	movcs	r2, r5
 8013fe6:	f005 fa95 	bl	8019514 <memcpy>
            lv_mem_free(data_p);
 8013fea:	4620      	mov	r0, r4
 8013fec:	f7ff ffae 	bl	8013f4c <lv_mem_free>
}
 8013ff0:	4630      	mov	r0, r6
 8013ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013ff4 <lv_task_core_init>:

/**
 * Init the lv_task module
 */
void lv_task_core_init(void)
{
 8013ff4:	b508      	push	{r3, lr}
    lv_ll_init(&LV_GC_ROOT(_lv_task_ll), sizeof(lv_task_t));
 8013ff6:	2114      	movs	r1, #20
 8013ff8:	4803      	ldr	r0, [pc, #12]	; (8014008 <lv_task_core_init+0x14>)
 8013ffa:	f7ff fde3 	bl	8013bc4 <lv_ll_init>
 * Enable or disable the whole lv_task handling
 * @param en: true: lv_task handling is running, false: lv_task handling is suspended
 */
void lv_task_enable(bool en)
{
    lv_task_run = en;
 8013ffe:	4b03      	ldr	r3, [pc, #12]	; (801400c <lv_task_core_init+0x18>)
 8014000:	2201      	movs	r2, #1
 8014002:	701a      	strb	r2, [r3, #0]
 8014004:	bd08      	pop	{r3, pc}
 8014006:	bf00      	nop
 8014008:	2000c550 	.word	0x2000c550
 801400c:	2000afa4 	.word	0x2000afa4

08014010 <lv_task_create_basic>:
{
 8014010:	b538      	push	{r3, r4, r5, lr}
    tmp = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 8014012:	481c      	ldr	r0, [pc, #112]	; (8014084 <lv_task_create_basic+0x74>)
 8014014:	f7ff fe1c 	bl	8013c50 <lv_ll_get_head>
    if(NULL == tmp) {
 8014018:	4601      	mov	r1, r0
 801401a:	b928      	cbnz	r0, 8014028 <lv_task_create_basic+0x18>
        new_task = lv_ll_ins_head(&LV_GC_ROOT(_lv_task_ll));
 801401c:	4819      	ldr	r0, [pc, #100]	; (8014084 <lv_task_create_basic+0x74>)
 801401e:	f7ff fddb 	bl	8013bd8 <lv_ll_ins_head>
        lv_mem_assert(new_task);
 8014022:	4604      	mov	r4, r0
 8014024:	b9b8      	cbnz	r0, 8014056 <lv_task_create_basic+0x46>
 8014026:	e7fe      	b.n	8014026 <lv_task_create_basic+0x16>
            tmp = lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
 8014028:	4c16      	ldr	r4, [pc, #88]	; (8014084 <lv_task_create_basic+0x74>)
            if(tmp->prio <= DEF_PRIO) {
 801402a:	7c0b      	ldrb	r3, [r1, #16]
 801402c:	f003 0307 	and.w	r3, r3, #7
 8014030:	2b03      	cmp	r3, #3
 8014032:	dc05      	bgt.n	8014040 <lv_task_create_basic+0x30>
                new_task = lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
 8014034:	4813      	ldr	r0, [pc, #76]	; (8014084 <lv_task_create_basic+0x74>)
 8014036:	f7ff fe1a 	bl	8013c6e <lv_ll_ins_prev>
                lv_mem_assert(new_task);
 801403a:	4604      	mov	r4, r0
 801403c:	b958      	cbnz	r0, 8014056 <lv_task_create_basic+0x46>
 801403e:	e7fe      	b.n	801403e <lv_task_create_basic+0x2e>
            tmp = lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
 8014040:	4620      	mov	r0, r4
 8014042:	f7ff fe0b 	bl	8013c5c <lv_ll_get_next>
        } while(tmp != NULL);
 8014046:	4601      	mov	r1, r0
 8014048:	2800      	cmp	r0, #0
 801404a:	d1ee      	bne.n	801402a <lv_task_create_basic+0x1a>
            new_task = lv_ll_ins_tail(&LV_GC_ROOT(_lv_task_ll));
 801404c:	480d      	ldr	r0, [pc, #52]	; (8014084 <lv_task_create_basic+0x74>)
 801404e:	f7ff fde1 	bl	8013c14 <lv_ll_ins_tail>
            lv_mem_assert(new_task);
 8014052:	4604      	mov	r4, r0
 8014054:	b1a0      	cbz	r0, 8014080 <lv_task_create_basic+0x70>
    new_task->period  = DEF_PERIOD;
 8014056:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801405a:	6023      	str	r3, [r4, #0]
    new_task->prio    = DEF_PRIO;
 801405c:	7c23      	ldrb	r3, [r4, #16]
 801405e:	2203      	movs	r2, #3
    new_task->task_cb = NULL;
 8014060:	2500      	movs	r5, #0
    new_task->prio    = DEF_PRIO;
 8014062:	f362 0302 	bfi	r3, r2, #0, #3
    new_task->once     = 0;
 8014066:	f365 03c3 	bfi	r3, r5, #3, #1
 801406a:	7423      	strb	r3, [r4, #16]
    new_task->task_cb = NULL;
 801406c:	60a5      	str	r5, [r4, #8]
    new_task->last_run = lv_tick_get();
 801406e:	f7ff fb7f 	bl	8013770 <lv_tick_get>
    task_created = true;
 8014072:	4b05      	ldr	r3, [pc, #20]	; (8014088 <lv_task_create_basic+0x78>)
    new_task->last_run = lv_tick_get();
 8014074:	6060      	str	r0, [r4, #4]
    task_created = true;
 8014076:	2201      	movs	r2, #1
    new_task->user_data = NULL;
 8014078:	60e5      	str	r5, [r4, #12]
    task_created = true;
 801407a:	701a      	strb	r2, [r3, #0]
}
 801407c:	4620      	mov	r0, r4
 801407e:	bd38      	pop	{r3, r4, r5, pc}
 8014080:	e7fe      	b.n	8014080 <lv_task_create_basic+0x70>
 8014082:	bf00      	nop
 8014084:	2000c550 	.word	0x2000c550
 8014088:	2000afa5 	.word	0x2000afa5

0801408c <lv_task_del>:
{
 801408c:	b510      	push	{r4, lr}
    lv_ll_rem(&LV_GC_ROOT(_lv_task_ll), task);
 801408e:	4601      	mov	r1, r0
{
 8014090:	4604      	mov	r4, r0
    lv_ll_rem(&LV_GC_ROOT(_lv_task_ll), task);
 8014092:	4807      	ldr	r0, [pc, #28]	; (80140b0 <lv_task_del+0x24>)
 8014094:	f7ff fe1b 	bl	8013cce <lv_ll_rem>
    lv_mem_free(task);
 8014098:	4620      	mov	r0, r4
 801409a:	f7ff ff57 	bl	8013f4c <lv_mem_free>
    if(LV_GC_ROOT(_lv_task_act) == task) task_deleted = true; /*The active task was deleted*/
 801409e:	4b05      	ldr	r3, [pc, #20]	; (80140b4 <lv_task_del+0x28>)
 80140a0:	681b      	ldr	r3, [r3, #0]
 80140a2:	429c      	cmp	r4, r3
 80140a4:	bf02      	ittt	eq
 80140a6:	4b04      	ldreq	r3, [pc, #16]	; (80140b8 <lv_task_del+0x2c>)
 80140a8:	2201      	moveq	r2, #1
 80140aa:	701a      	strbeq	r2, [r3, #0]
 80140ac:	bd10      	pop	{r4, pc}
 80140ae:	bf00      	nop
 80140b0:	2000c550 	.word	0x2000c550
 80140b4:	2000c590 	.word	0x2000c590
 80140b8:	2000afa6 	.word	0x2000afa6

080140bc <lv_task_exec>:
 * Execute task if its the priority is appropriate
 * @param task pointer to lv_task
 * @return true: execute, false: not executed
 */
static bool lv_task_exec(lv_task_t * task)
{
 80140bc:	b538      	push	{r3, r4, r5, lr}
 80140be:	4604      	mov	r4, r0
    bool exec = false;

    /*Execute if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(task->last_run);
 80140c0:	6840      	ldr	r0, [r0, #4]
 80140c2:	f7ff fb63 	bl	801378c <lv_tick_elaps>
    if(elp >= task->period) {
 80140c6:	6823      	ldr	r3, [r4, #0]
 80140c8:	4298      	cmp	r0, r3
 80140ca:	d315      	bcc.n	80140f8 <lv_task_exec+0x3c>
        task->last_run = lv_tick_get();
 80140cc:	f7ff fb50 	bl	8013770 <lv_tick_get>
        task_deleted   = false;
 80140d0:	4d0a      	ldr	r5, [pc, #40]	; (80140fc <lv_task_exec+0x40>)
        task_created   = false;
 80140d2:	490b      	ldr	r1, [pc, #44]	; (8014100 <lv_task_exec+0x44>)
        task->last_run = lv_tick_get();
 80140d4:	6060      	str	r0, [r4, #4]
        task_deleted   = false;
 80140d6:	2200      	movs	r2, #0
 80140d8:	702a      	strb	r2, [r5, #0]
        task_created   = false;
 80140da:	700a      	strb	r2, [r1, #0]
        if(task->task_cb) task->task_cb(task);
 80140dc:	68a2      	ldr	r2, [r4, #8]
 80140de:	b10a      	cbz	r2, 80140e4 <lv_task_exec+0x28>
 80140e0:	4620      	mov	r0, r4
 80140e2:	4790      	blx	r2

        /*Delete if it was a one shot lv_task*/
        if(task_deleted == false) { /*The task might be deleted by itself as well*/
 80140e4:	7828      	ldrb	r0, [r5, #0]
 80140e6:	b930      	cbnz	r0, 80140f6 <lv_task_exec+0x3a>
            if(task->once != 0) {
 80140e8:	7c23      	ldrb	r3, [r4, #16]
 80140ea:	071b      	lsls	r3, r3, #28
 80140ec:	d502      	bpl.n	80140f4 <lv_task_exec+0x38>
                lv_task_del(task);
 80140ee:	4620      	mov	r0, r4
 80140f0:	f7ff ffcc 	bl	801408c <lv_task_del>
            }
        }
        exec = true;
 80140f4:	2001      	movs	r0, #1
    }

    return exec;
}
 80140f6:	bd38      	pop	{r3, r4, r5, pc}
    bool exec = false;
 80140f8:	2000      	movs	r0, #0
 80140fa:	bd38      	pop	{r3, r4, r5, pc}
 80140fc:	2000afa6 	.word	0x2000afa6
 8014100:	2000afa5 	.word	0x2000afa5

08014104 <lv_task_handler>:
{
 8014104:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(task_handler_mutex) return;
 8014108:	4d3a      	ldr	r5, [pc, #232]	; (80141f4 <lv_task_handler+0xf0>)
 801410a:	782c      	ldrb	r4, [r5, #0]
 801410c:	b934      	cbnz	r4, 801411c <lv_task_handler+0x18>
    task_handler_mutex = true;
 801410e:	2301      	movs	r3, #1
 8014110:	702b      	strb	r3, [r5, #0]
    if(lv_task_run == false) {
 8014112:	4b39      	ldr	r3, [pc, #228]	; (80141f8 <lv_task_handler+0xf4>)
 8014114:	781b      	ldrb	r3, [r3, #0]
 8014116:	b923      	cbnz	r3, 8014122 <lv_task_handler+0x1e>
        task_handler_mutex = false; /*Release mutex*/
 8014118:	2300      	movs	r3, #0
 801411a:	702b      	strb	r3, [r5, #0]
}
 801411c:	b003      	add	sp, #12
 801411e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    handler_start = lv_tick_get();
 8014122:	f7ff fb25 	bl	8013770 <lv_tick_get>
 8014126:	4b35      	ldr	r3, [pc, #212]	; (80141fc <lv_task_handler+0xf8>)
        task_deleted             = false;
 8014128:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 8014218 <lv_task_handler+0x114>
    handler_start = lv_tick_get();
 801412c:	6018      	str	r0, [r3, #0]
 801412e:	469b      	mov	fp, r3
        task_deleted             = false;
 8014130:	46a1      	mov	r9, r4
        task_created             = false;
 8014132:	4e33      	ldr	r6, [pc, #204]	; (8014200 <lv_task_handler+0xfc>)
        LV_GC_ROOT(_lv_task_act) = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 8014134:	4833      	ldr	r0, [pc, #204]	; (8014204 <lv_task_handler+0x100>)
        task_created             = false;
 8014136:	f886 9000 	strb.w	r9, [r6]
        task_deleted             = false;
 801413a:	f888 9000 	strb.w	r9, [r8]
        LV_GC_ROOT(_lv_task_act) = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 801413e:	f7ff fd87 	bl	8013c50 <lv_ll_get_head>
 8014142:	4f31      	ldr	r7, [pc, #196]	; (8014208 <lv_task_handler+0x104>)
 8014144:	9601      	str	r6, [sp, #4]
 8014146:	6038      	str	r0, [r7, #0]
 8014148:	463e      	mov	r6, r7
        while(LV_GC_ROOT(_lv_task_act)) {
 801414a:	6831      	ldr	r1, [r6, #0]
 801414c:	bb29      	cbnz	r1, 801419a <lv_task_handler+0x96>
    busy_time += lv_tick_elaps(handler_start);
 801414e:	4c2f      	ldr	r4, [pc, #188]	; (801420c <lv_task_handler+0x108>)
 8014150:	f8db 0000 	ldr.w	r0, [fp]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 8014154:	4e2e      	ldr	r6, [pc, #184]	; (8014210 <lv_task_handler+0x10c>)
    busy_time += lv_tick_elaps(handler_start);
 8014156:	f7ff fb19 	bl	801378c <lv_tick_elaps>
 801415a:	6823      	ldr	r3, [r4, #0]
 801415c:	4418      	add	r0, r3
 801415e:	6020      	str	r0, [r4, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 8014160:	6830      	ldr	r0, [r6, #0]
 8014162:	f7ff fb13 	bl	801378c <lv_tick_elaps>
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
 8014166:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 801416a:	d3d5      	bcc.n	8014118 <lv_task_handler+0x14>
        idle_last         = (uint32_t)((uint32_t)busy_time * 100) / IDLE_MEAS_PERIOD; /*Calculate the busy percentage*/
 801416c:	6822      	ldr	r2, [r4, #0]
 801416e:	2364      	movs	r3, #100	; 0x64
 8014170:	4353      	muls	r3, r2
 8014172:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8014176:	fbb3 f3f2 	udiv	r3, r3, r2
 801417a:	b2db      	uxtb	r3, r3
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last;                    /*But we need idle time*/
 801417c:	2b64      	cmp	r3, #100	; 0x64
 801417e:	bf98      	it	ls
 8014180:	f1c3 0364 	rsbls	r3, r3, #100	; 0x64
 8014184:	4a23      	ldr	r2, [pc, #140]	; (8014214 <lv_task_handler+0x110>)
 8014186:	bf94      	ite	ls
 8014188:	b2db      	uxtbls	r3, r3
 801418a:	2300      	movhi	r3, #0
 801418c:	7013      	strb	r3, [r2, #0]
        busy_time         = 0;
 801418e:	2300      	movs	r3, #0
 8014190:	6023      	str	r3, [r4, #0]
        idle_period_start = lv_tick_get();
 8014192:	f7ff faed 	bl	8013770 <lv_tick_get>
 8014196:	6030      	str	r0, [r6, #0]
 8014198:	e7be      	b.n	8014118 <lv_task_handler+0x14>
            next = lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), LV_GC_ROOT(_lv_task_act));
 801419a:	481a      	ldr	r0, [pc, #104]	; (8014204 <lv_task_handler+0x100>)
 801419c:	f7ff fd5e 	bl	8013c5c <lv_ll_get_next>
 80141a0:	4682      	mov	sl, r0
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_OFF) {
 80141a2:	6830      	ldr	r0, [r6, #0]
 80141a4:	7c03      	ldrb	r3, [r0, #16]
 80141a6:	f013 0207 	ands.w	r2, r3, #7
 80141aa:	d0d0      	beq.n	801414e <lv_task_handler+0x4a>
            if(LV_GC_ROOT(_lv_task_act) == task_interrupter) {
 80141ac:	4284      	cmp	r4, r0
 80141ae:	d103      	bne.n	80141b8 <lv_task_handler+0xb4>
                LV_GC_ROOT(_lv_task_act) = next;
 80141b0:	f8c6 a000 	str.w	sl, [r6]
                task_interrupter = NULL; /*From this point only task after the interrupter comes, so
 80141b4:	2400      	movs	r4, #0
                continue; /*Load the next task*/
 80141b6:	e7c8      	b.n	801414a <lv_task_handler+0x46>
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_HIGHEST) {
 80141b8:	2a05      	cmp	r2, #5
 80141ba:	d10c      	bne.n	80141d6 <lv_task_handler+0xd2>
                lv_task_exec(LV_GC_ROOT(_lv_task_act));
 80141bc:	f7ff ff7e 	bl	80140bc <lv_task_exec>
            if(task_deleted) break; /*If a task was deleted then this or the next item might be corrupted*/
 80141c0:	f898 3000 	ldrb.w	r3, [r8]
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d1c2      	bne.n	801414e <lv_task_handler+0x4a>
            if(task_created) break; /*If a task was created then this or the next item might be corrupted*/
 80141c8:	9b01      	ldr	r3, [sp, #4]
 80141ca:	781b      	ldrb	r3, [r3, #0]
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d1be      	bne.n	801414e <lv_task_handler+0x4a>
            LV_GC_ROOT(_lv_task_act) = next; /*Load the next task*/
 80141d0:	f8c6 a000 	str.w	sl, [r6]
 80141d4:	e7b9      	b.n	801414a <lv_task_handler+0x46>
            else if(task_interrupter) {
 80141d6:	b134      	cbz	r4, 80141e6 <lv_task_handler+0xe2>
                if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio > task_interrupter->prio) {
 80141d8:	7c22      	ldrb	r2, [r4, #16]
 80141da:	f003 0307 	and.w	r3, r3, #7
 80141de:	f002 0207 	and.w	r2, r2, #7
 80141e2:	4293      	cmp	r3, r2
 80141e4:	ddec      	ble.n	80141c0 <lv_task_handler+0xbc>
                if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
 80141e6:	f7ff ff69 	bl	80140bc <lv_task_exec>
 80141ea:	2800      	cmp	r0, #0
 80141ec:	d0e8      	beq.n	80141c0 <lv_task_handler+0xbc>
                    task_interrupter = LV_GC_ROOT(_lv_task_act); /*Check all tasks again from the highest priority */
 80141ee:	683c      	ldr	r4, [r7, #0]
                    break;
 80141f0:	e79f      	b.n	8014132 <lv_task_handler+0x2e>
 80141f2:	bf00      	nop
 80141f4:	2000afa7 	.word	0x2000afa7
 80141f8:	2000afa4 	.word	0x2000afa4
 80141fc:	2000af98 	.word	0x2000af98
 8014200:	2000afa5 	.word	0x2000afa5
 8014204:	2000c550 	.word	0x2000c550
 8014208:	2000c590 	.word	0x2000c590
 801420c:	2000af94 	.word	0x2000af94
 8014210:	2000afa0 	.word	0x2000afa0
 8014214:	2000af9c 	.word	0x2000af9c
 8014218:	2000afa6 	.word	0x2000afa6

0801421c <lv_task_set_prio>:
    if(task->prio == prio) return;
 801421c:	7c03      	ldrb	r3, [r0, #16]
 801421e:	f003 0307 	and.w	r3, r3, #7
 8014222:	428b      	cmp	r3, r1
{
 8014224:	b570      	push	{r4, r5, r6, lr}
 8014226:	4604      	mov	r4, r0
 8014228:	460d      	mov	r5, r1
    if(task->prio == prio) return;
 801422a:	d01b      	beq.n	8014264 <lv_task_set_prio+0x48>
    LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i)
 801422c:	480e      	ldr	r0, [pc, #56]	; (8014268 <lv_task_set_prio+0x4c>)
 801422e:	4e0e      	ldr	r6, [pc, #56]	; (8014268 <lv_task_set_prio+0x4c>)
 8014230:	f7ff fd0e 	bl	8013c50 <lv_ll_get_head>
 8014234:	4602      	mov	r2, r0
 8014236:	b132      	cbz	r2, 8014246 <lv_task_set_prio+0x2a>
        if(i->prio <= prio) {
 8014238:	7c13      	ldrb	r3, [r2, #16]
 801423a:	f003 0307 	and.w	r3, r3, #7
 801423e:	429d      	cmp	r5, r3
 8014240:	db0a      	blt.n	8014258 <lv_task_set_prio+0x3c>
            if(i != task) lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, i);
 8014242:	42a2      	cmp	r2, r4
 8014244:	d003      	beq.n	801424e <lv_task_set_prio+0x32>
        lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, NULL);
 8014246:	4621      	mov	r1, r4
 8014248:	4807      	ldr	r0, [pc, #28]	; (8014268 <lv_task_set_prio+0x4c>)
 801424a:	f7ff fdac 	bl	8013da6 <lv_ll_move_before>
    task->prio = prio;
 801424e:	7c23      	ldrb	r3, [r4, #16]
 8014250:	f365 0302 	bfi	r3, r5, #0, #3
 8014254:	7423      	strb	r3, [r4, #16]
 8014256:	bd70      	pop	{r4, r5, r6, pc}
    LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i)
 8014258:	4611      	mov	r1, r2
 801425a:	4630      	mov	r0, r6
 801425c:	f7ff fcfe 	bl	8013c5c <lv_ll_get_next>
 8014260:	4602      	mov	r2, r0
 8014262:	e7e8      	b.n	8014236 <lv_task_set_prio+0x1a>
 8014264:	bd70      	pop	{r4, r5, r6, pc}
 8014266:	bf00      	nop
 8014268:	2000c550 	.word	0x2000c550

0801426c <lv_task_create>:
{
 801426c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014270:	4680      	mov	r8, r0
 8014272:	460f      	mov	r7, r1
 8014274:	4616      	mov	r6, r2
 8014276:	461d      	mov	r5, r3
    lv_task_t * new_task = lv_task_create_basic();
 8014278:	f7ff feca 	bl	8014010 <lv_task_create_basic>
    lv_mem_assert(new_task);
 801427c:	4604      	mov	r4, r0
 801427e:	b900      	cbnz	r0, 8014282 <lv_task_create+0x16>
 8014280:	e7fe      	b.n	8014280 <lv_task_create+0x14>
    task->task_cb = task_cb;
 8014282:	f8c0 8008 	str.w	r8, [r0, #8]
    task->period = period;
 8014286:	6007      	str	r7, [r0, #0]
    lv_task_set_prio(new_task, prio);
 8014288:	4631      	mov	r1, r6
 801428a:	f7ff ffc7 	bl	801421c <lv_task_set_prio>
    new_task->user_data = user_data;
 801428e:	60e5      	str	r5, [r4, #12]
}
 8014290:	4620      	mov	r0, r4
 8014292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014296 <lv_task_ready>:
{
 8014296:	b510      	push	{r4, lr}
 8014298:	4604      	mov	r4, r0
    task->last_run = lv_tick_get() - task->period - 1;
 801429a:	f7ff fa69 	bl	8013770 <lv_tick_get>
 801429e:	6823      	ldr	r3, [r4, #0]
 80142a0:	43db      	mvns	r3, r3
 80142a2:	4403      	add	r3, r0
 80142a4:	6063      	str	r3, [r4, #4]
 80142a6:	bd10      	pop	{r4, pc}

080142a8 <lv_txt_utf8_size>:
 * @param str pointer to a character in a string
 * @return length of the UTF-8 character (1,2,3 or 4). O on invalid code
 */
static uint8_t lv_txt_utf8_size(const char * str)
{
    if((str[0] & 0x80) == 0)
 80142a8:	7803      	ldrb	r3, [r0, #0]
 80142aa:	061a      	lsls	r2, r3, #24
 80142ac:	d50e      	bpl.n	80142cc <lv_txt_utf8_size+0x24>
        return 1;
    else if((str[0] & 0xE0) == 0xC0)
 80142ae:	f003 02e0 	and.w	r2, r3, #224	; 0xe0
 80142b2:	2ac0      	cmp	r2, #192	; 0xc0
 80142b4:	d00c      	beq.n	80142d0 <lv_txt_utf8_size+0x28>
        return 2;
    else if((str[0] & 0xF0) == 0xE0)
 80142b6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80142ba:	2ae0      	cmp	r2, #224	; 0xe0
 80142bc:	d00a      	beq.n	80142d4 <lv_txt_utf8_size+0x2c>
        return 3;
    else if((str[0] & 0xF8) == 0xF0)
 80142be:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80142c2:	2bf0      	cmp	r3, #240	; 0xf0
        return 4;
 80142c4:	bf14      	ite	ne
 80142c6:	2001      	movne	r0, #1
 80142c8:	2004      	moveq	r0, #4
 80142ca:	4770      	bx	lr
    return 1; /*If the char was invalid step tell it's 1 byte long*/
 80142cc:	2001      	movs	r0, #1
 80142ce:	4770      	bx	lr
        return 2;
 80142d0:	2002      	movs	r0, #2
 80142d2:	4770      	bx	lr
        return 3;
 80142d4:	2003      	movs	r0, #3
}
 80142d6:	4770      	bx	lr

080142d8 <lv_txt_utf8_next>:
 *          After call it will point to the next UTF-8 char in 'txt'.
 *          NULL to use txt[0] as index
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_next(const char * txt, uint32_t * i)
{
 80142d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
     * */

    uint32_t result = 0;

    /*Dummy 'i' pointer is required*/
    uint32_t i_tmp = 0;
 80142da:	2300      	movs	r3, #0
 80142dc:	9301      	str	r3, [sp, #4]
    if(i == NULL) i = &i_tmp;
 80142de:	b901      	cbnz	r1, 80142e2 <lv_txt_utf8_next+0xa>
 80142e0:	a901      	add	r1, sp, #4

    /*Normal ASCII*/
    if((txt[*i] & 0x80) == 0) {
 80142e2:	680a      	ldr	r2, [r1, #0]
 80142e4:	5c83      	ldrb	r3, [r0, r2]
 80142e6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80142ea:	f102 0401 	add.w	r4, r2, #1
 80142ee:	d103      	bne.n	80142f8 <lv_txt_utf8_next+0x20>
        result = txt[*i];
 80142f0:	4618      	mov	r0, r3
        (*i)++;
 80142f2:	600c      	str	r4, [r1, #0]
        } else {
            (*i)++; /*Not UTF-8 char. Go the next.*/
        }
    }
    return result;
}
 80142f4:	b002      	add	sp, #8
 80142f6:	bd70      	pop	{r4, r5, r6, pc}
        if((txt[*i] & 0xE0) == 0xC0) {
 80142f8:	f003 05e0 	and.w	r5, r3, #224	; 0xe0
 80142fc:	2dc0      	cmp	r5, #192	; 0xc0
 80142fe:	d110      	bne.n	8014322 <lv_txt_utf8_next+0x4a>
            (*i)++;
 8014300:	600c      	str	r4, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 8014302:	5d00      	ldrb	r0, [r0, r4]
 8014304:	f000 04c0 	and.w	r4, r0, #192	; 0xc0
 8014308:	2c80      	cmp	r4, #128	; 0x80
 801430a:	d001      	beq.n	8014310 <lv_txt_utf8_next+0x38>
    uint32_t result = 0;
 801430c:	2000      	movs	r0, #0
 801430e:	e7f1      	b.n	80142f4 <lv_txt_utf8_next+0x1c>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
 8014310:	019b      	lsls	r3, r3, #6
 8014312:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
            result += (txt[*i] & 0x3F);
 8014316:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 801431a:	4418      	add	r0, r3
            (*i)++;
 801431c:	3202      	adds	r2, #2
            (*i)++;
 801431e:	600a      	str	r2, [r1, #0]
 8014320:	e7e8      	b.n	80142f4 <lv_txt_utf8_next+0x1c>
        else if((txt[*i] & 0xF0) == 0xE0) {
 8014322:	f003 05f0 	and.w	r5, r3, #240	; 0xf0
 8014326:	2de0      	cmp	r5, #224	; 0xe0
 8014328:	d117      	bne.n	801435a <lv_txt_utf8_next+0x82>
            (*i)++;
 801432a:	600c      	str	r4, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 801432c:	5d04      	ldrb	r4, [r0, r4]
 801432e:	f004 05c0 	and.w	r5, r4, #192	; 0xc0
 8014332:	2d80      	cmp	r5, #128	; 0x80
 8014334:	d1ea      	bne.n	801430c <lv_txt_utf8_next+0x34>
            (*i)++;
 8014336:	1c95      	adds	r5, r2, #2
 8014338:	600d      	str	r5, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 801433a:	5d45      	ldrb	r5, [r0, r5]
 801433c:	f005 00c0 	and.w	r0, r5, #192	; 0xc0
 8014340:	2880      	cmp	r0, #128	; 0x80
 8014342:	d1e3      	bne.n	801430c <lv_txt_utf8_next+0x34>
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
 8014344:	0318      	lsls	r0, r3, #12
 8014346:	b280      	uxth	r0, r0
            result += (txt[*i] & 0x3F);
 8014348:	f005 053f 	and.w	r5, r5, #63	; 0x3f
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 801434c:	01a3      	lsls	r3, r4, #6
 801434e:	4428      	add	r0, r5
 8014350:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
            result += (txt[*i] & 0x3F);
 8014354:	4418      	add	r0, r3
            (*i)++;
 8014356:	3203      	adds	r2, #3
 8014358:	e7e1      	b.n	801431e <lv_txt_utf8_next+0x46>
        else if((txt[*i] & 0xF8) == 0xF0) {
 801435a:	f003 05f8 	and.w	r5, r3, #248	; 0xf8
 801435e:	2df0      	cmp	r5, #240	; 0xf0
            (*i)++;
 8014360:	600c      	str	r4, [r1, #0]
        else if((txt[*i] & 0xF8) == 0xF0) {
 8014362:	d1d3      	bne.n	801430c <lv_txt_utf8_next+0x34>
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 8014364:	5d04      	ldrb	r4, [r0, r4]
 8014366:	f004 05c0 	and.w	r5, r4, #192	; 0xc0
 801436a:	2d80      	cmp	r5, #128	; 0x80
 801436c:	d1ce      	bne.n	801430c <lv_txt_utf8_next+0x34>
            (*i)++;
 801436e:	1c95      	adds	r5, r2, #2
 8014370:	600d      	str	r5, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 8014372:	5d45      	ldrb	r5, [r0, r5]
 8014374:	f005 06c0 	and.w	r6, r5, #192	; 0xc0
 8014378:	2e80      	cmp	r6, #128	; 0x80
 801437a:	d1c7      	bne.n	801430c <lv_txt_utf8_next+0x34>
            (*i)++;
 801437c:	1cd6      	adds	r6, r2, #3
 801437e:	600e      	str	r6, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 8014380:	5d86      	ldrb	r6, [r0, r6]
 8014382:	f006 00c0 	and.w	r0, r6, #192	; 0xc0
 8014386:	2880      	cmp	r0, #128	; 0x80
 8014388:	d1c0      	bne.n	801430c <lv_txt_utf8_next+0x34>
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 801438a:	049b      	lsls	r3, r3, #18
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 801438c:	0320      	lsls	r0, r4, #12
 801438e:	f400 307c 	and.w	r0, r0, #258048	; 0x3f000
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 8014392:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 8014396:	4303      	orrs	r3, r0
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 8014398:	01a8      	lsls	r0, r5, #6
 801439a:	f400 607c 	and.w	r0, r0, #4032	; 0xfc0
            result += txt[*i] & 0x3F;
 801439e:	f006 063f 	and.w	r6, r6, #63	; 0x3f
 80143a2:	4430      	add	r0, r6
 80143a4:	4418      	add	r0, r3
            (*i)++;
 80143a6:	3204      	adds	r2, #4
 80143a8:	e7b9      	b.n	801431e <lv_txt_utf8_next+0x46>
	...

080143ac <lv_txt_utf8_get_byte_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param utf8_id character index
 * @return byte index of the 'utf8_id'th letter
 */
static uint32_t lv_txt_utf8_get_byte_id(const char * txt, uint32_t utf8_id)
{
 80143ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t i;
    uint32_t byte_cnt = 0;
 80143b0:	2400      	movs	r4, #0
    for(i = 0; i < utf8_id; i++) {
        byte_cnt += lv_txt_encoded_size(&txt[byte_cnt]);
 80143b2:	f8df 8020 	ldr.w	r8, [pc, #32]	; 80143d4 <lv_txt_utf8_get_byte_id+0x28>
{
 80143b6:	4607      	mov	r7, r0
 80143b8:	460e      	mov	r6, r1
    for(i = 0; i < utf8_id; i++) {
 80143ba:	4625      	mov	r5, r4
 80143bc:	42b5      	cmp	r5, r6
 80143be:	d102      	bne.n	80143c6 <lv_txt_utf8_get_byte_id+0x1a>
    }

    return byte_cnt;
}
 80143c0:	4620      	mov	r0, r4
 80143c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        byte_cnt += lv_txt_encoded_size(&txt[byte_cnt]);
 80143c6:	1938      	adds	r0, r7, r4
 80143c8:	f8d8 3000 	ldr.w	r3, [r8]
 80143cc:	4798      	blx	r3
    for(i = 0; i < utf8_id; i++) {
 80143ce:	3501      	adds	r5, #1
        byte_cnt += lv_txt_encoded_size(&txt[byte_cnt]);
 80143d0:	4404      	add	r4, r0
 80143d2:	e7f3      	b.n	80143bc <lv_txt_utf8_get_byte_id+0x10>
 80143d4:	20001cac 	.word	0x20001cac

080143d8 <lv_txt_utf8_get_char_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
 80143d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint32_t i        = 0;
 80143dc:	ad02      	add	r5, sp, #8
 80143de:	2400      	movs	r4, #0
 80143e0:	f845 4d04 	str.w	r4, [r5, #-4]!
    uint32_t char_cnt = 0;

    while(i < byte_id) {
        lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 80143e4:	f8df 8020 	ldr.w	r8, [pc, #32]	; 8014408 <lv_txt_utf8_get_char_id+0x30>
{
 80143e8:	4607      	mov	r7, r0
 80143ea:	460e      	mov	r6, r1
    while(i < byte_id) {
 80143ec:	9b01      	ldr	r3, [sp, #4]
 80143ee:	42b3      	cmp	r3, r6
 80143f0:	d303      	bcc.n	80143fa <lv_txt_utf8_get_char_id+0x22>
        char_cnt++;
    }

    return char_cnt;
}
 80143f2:	4620      	mov	r0, r4
 80143f4:	b002      	add	sp, #8
 80143f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 80143fa:	4629      	mov	r1, r5
 80143fc:	4638      	mov	r0, r7
 80143fe:	f8d8 3000 	ldr.w	r3, [r8]
 8014402:	4798      	blx	r3
        char_cnt++;
 8014404:	3401      	adds	r4, #1
 8014406:	e7f1      	b.n	80143ec <lv_txt_utf8_get_char_id+0x14>
 8014408:	20001ca4 	.word	0x20001ca4

0801440c <lv_txt_utf8_get_length>:
 * E.g.: "ÁBC" is 3 characters (but 4 bytes)
 * @param txt a '\0' terminated char string
 * @return number of characters
 */
static uint32_t lv_txt_utf8_get_length(const char * txt)
{
 801440c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint32_t len = 0;
    uint32_t i   = 0;
 801440e:	ad02      	add	r5, sp, #8
 8014410:	2400      	movs	r4, #0
 8014412:	f845 4d04 	str.w	r4, [r5, #-4]!

    while(txt[i] != '\0') {
        lv_txt_encoded_next(txt, &i);
 8014416:	4f07      	ldr	r7, [pc, #28]	; (8014434 <lv_txt_utf8_get_length+0x28>)
{
 8014418:	4606      	mov	r6, r0
    while(txt[i] != '\0') {
 801441a:	9b01      	ldr	r3, [sp, #4]
 801441c:	5cf3      	ldrb	r3, [r6, r3]
 801441e:	b913      	cbnz	r3, 8014426 <lv_txt_utf8_get_length+0x1a>
        len++;
    }

    return len;
}
 8014420:	4620      	mov	r0, r4
 8014422:	b003      	add	sp, #12
 8014424:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_txt_encoded_next(txt, &i);
 8014426:	4629      	mov	r1, r5
 8014428:	4630      	mov	r0, r6
 801442a:	683b      	ldr	r3, [r7, #0]
 801442c:	4798      	blx	r3
        len++;
 801442e:	3401      	adds	r4, #1
 8014430:	e7f3      	b.n	801441a <lv_txt_utf8_get_length+0xe>
 8014432:	bf00      	nop
 8014434:	20001ca4 	.word	0x20001ca4

08014438 <lv_txt_utf8_prev>:
    (*i)--;
 8014438:	680b      	ldr	r3, [r1, #0]
{
 801443a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    (*i)--;
 801443c:	3b01      	subs	r3, #1
        c_size = lv_txt_encoded_size(&txt[*i]);
 801443e:	4f0e      	ldr	r7, [pc, #56]	; (8014478 <lv_txt_utf8_prev+0x40>)
    (*i)--;
 8014440:	600b      	str	r3, [r1, #0]
{
 8014442:	4606      	mov	r6, r0
 8014444:	460d      	mov	r5, r1
    (*i)--;
 8014446:	2404      	movs	r4, #4
        c_size = lv_txt_encoded_size(&txt[*i]);
 8014448:	6828      	ldr	r0, [r5, #0]
 801444a:	683b      	ldr	r3, [r7, #0]
 801444c:	4430      	add	r0, r6
 801444e:	4798      	blx	r3
 8014450:	682b      	ldr	r3, [r5, #0]
        if(c_size == 0) {
 8014452:	b948      	cbnz	r0, 8014468 <lv_txt_utf8_prev+0x30>
            if(*i != 0)
 8014454:	b12b      	cbz	r3, 8014462 <lv_txt_utf8_prev+0x2a>
 8014456:	3c01      	subs	r4, #1
                (*i)--;
 8014458:	3b01      	subs	r3, #1
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
 801445a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
                (*i)--;
 801445e:	602b      	str	r3, [r5, #0]
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
 8014460:	d1f2      	bne.n	8014448 <lv_txt_utf8_prev+0x10>
 8014462:	2000      	movs	r0, #0
}
 8014464:	b003      	add	sp, #12
 8014466:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t i_tmp  = *i;
 8014468:	a902      	add	r1, sp, #8
    uint32_t letter = lv_txt_encoded_next(txt, &i_tmp); /*Character found, get it*/
 801446a:	4630      	mov	r0, r6
    uint32_t i_tmp  = *i;
 801446c:	f841 3d04 	str.w	r3, [r1, #-4]!
    uint32_t letter = lv_txt_encoded_next(txt, &i_tmp); /*Character found, get it*/
 8014470:	4b02      	ldr	r3, [pc, #8]	; (801447c <lv_txt_utf8_prev+0x44>)
 8014472:	681b      	ldr	r3, [r3, #0]
 8014474:	4798      	blx	r3
 8014476:	e7f5      	b.n	8014464 <lv_txt_utf8_prev+0x2c>
 8014478:	20001cac 	.word	0x20001cac
 801447c:	20001ca4 	.word	0x20001ca4

08014480 <lv_txt_is_cmd>:
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 8014480:	2923      	cmp	r1, #35	; 0x23
{
 8014482:	4602      	mov	r2, r0
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 8014484:	d117      	bne.n	80144b6 <lv_txt_is_cmd+0x36>
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
 8014486:	7803      	ldrb	r3, [r0, #0]
 8014488:	b91b      	cbnz	r3, 8014492 <lv_txt_is_cmd+0x12>
            *state = LV_TXT_CMD_STATE_PAR;
 801448a:	2301      	movs	r3, #1
 801448c:	7003      	strb	r3, [r0, #0]
            ret    = true;
 801448e:	2001      	movs	r0, #1
 8014490:	e004      	b.n	801449c <lv_txt_is_cmd+0x1c>
        else if(*state == LV_TXT_CMD_STATE_PAR) {
 8014492:	2b01      	cmp	r3, #1
 8014494:	f04f 0000 	mov.w	r0, #0
 8014498:	d109      	bne.n	80144ae <lv_txt_is_cmd+0x2e>
            *state = LV_TXT_CMD_STATE_WAIT;
 801449a:	7010      	strb	r0, [r2, #0]
    if(*state == LV_TXT_CMD_STATE_PAR) {
 801449c:	7813      	ldrb	r3, [r2, #0]
 801449e:	2b01      	cmp	r3, #1
 80144a0:	d104      	bne.n	80144ac <lv_txt_is_cmd+0x2c>
        if(c == ' ') {
 80144a2:	2920      	cmp	r1, #32
            *state = LV_TXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
 80144a4:	bf04      	itt	eq
 80144a6:	2102      	moveq	r1, #2
 80144a8:	7011      	strbeq	r1, [r2, #0]
        ret = true;
 80144aa:	4618      	mov	r0, r3
}
 80144ac:	4770      	bx	lr
        else if(*state == LV_TXT_CMD_STATE_IN) {
 80144ae:	2b02      	cmp	r3, #2
 80144b0:	d1f4      	bne.n	801449c <lv_txt_is_cmd+0x1c>
            *state = LV_TXT_CMD_STATE_WAIT;
 80144b2:	7010      	strb	r0, [r2, #0]
 80144b4:	e7eb      	b.n	801448e <lv_txt_is_cmd+0xe>
    bool ret = false;
 80144b6:	2000      	movs	r0, #0
 80144b8:	e7f0      	b.n	801449c <lv_txt_is_cmd+0x1c>
	...

080144bc <lv_txt_get_next_line>:
{
 80144bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144c0:	b087      	sub	sp, #28
 80144c2:	460c      	mov	r4, r1
 80144c4:	9200      	str	r2, [sp, #0]
 80144c6:	469a      	mov	sl, r3
 80144c8:	f89d b040 	ldrb.w	fp, [sp, #64]	; 0x40
    if(txt == NULL) return 0;
 80144cc:	4607      	mov	r7, r0
 80144ce:	2800      	cmp	r0, #0
 80144d0:	d072      	beq.n	80145b8 <lv_txt_get_next_line+0xfc>
    if(font == NULL) return 0;
 80144d2:	2900      	cmp	r1, #0
 80144d4:	d071      	beq.n	80145ba <lv_txt_get_next_line+0xfe>
    letter_next = lv_txt_encoded_next(txt, &i_next);
 80144d6:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 80145c8 <lv_txt_get_next_line+0x10c>
    uint32_t i                   = 0;
 80144da:	2500      	movs	r5, #0
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 80144dc:	f01b 0f02 	tst.w	fp, #2
 80144e0:	f647 4218 	movw	r2, #31768	; 0x7c18
 80144e4:	bf18      	it	ne
 80144e6:	4692      	movne	sl, r2
    uint32_t i                   = 0;
 80144e8:	9504      	str	r5, [sp, #16]
    uint32_t i_next              = 0;
 80144ea:	9505      	str	r5, [sp, #20]
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 80144ec:	f88d 500f 	strb.w	r5, [sp, #15]
    letter_next = lv_txt_encoded_next(txt, &i_next);
 80144f0:	f8d8 2000 	ldr.w	r2, [r8]
 80144f4:	a905      	add	r1, sp, #20
 80144f6:	4790      	blx	r2
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 80144f8:	f00b 0301 	and.w	r3, fp, #1
    letter_next = lv_txt_encoded_next(txt, &i_next);
 80144fc:	4606      	mov	r6, r0
    uint32_t last_break          = NO_BREAK_FOUND;
 80144fe:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8014502:	9301      	str	r3, [sp, #4]
    while(txt[i] != '\0') {
 8014504:	9804      	ldr	r0, [sp, #16]
 8014506:	5c3b      	ldrb	r3, [r7, r0]
 8014508:	b90b      	cbnz	r3, 801450e <lv_txt_get_next_line+0x52>
    return i;
 801450a:	b280      	uxth	r0, r0
 801450c:	e01e      	b.n	801454c <lv_txt_get_next_line+0x90>
        i           = i_next;
 801450e:	9b05      	ldr	r3, [sp, #20]
 8014510:	9304      	str	r3, [sp, #16]
        letter_next = lv_txt_encoded_next(txt, &i_next);
 8014512:	a905      	add	r1, sp, #20
 8014514:	f8d8 3000 	ldr.w	r3, [r8]
 8014518:	4638      	mov	r0, r7
 801451a:	4798      	blx	r3
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 801451c:	9b01      	ldr	r3, [sp, #4]
        letter_next = lv_txt_encoded_next(txt, &i_next);
 801451e:	4683      	mov	fp, r0
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8014520:	b923      	cbnz	r3, 801452c <lv_txt_get_next_line+0x70>
        if(letter == '\n' || letter == '\r') {
 8014522:	2e0a      	cmp	r6, #10
 8014524:	d10b      	bne.n	801453e <lv_txt_get_next_line+0x82>
                return i;
 8014526:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801452a:	e00f      	b.n	801454c <lv_txt_get_next_line+0x90>
            if(lv_txt_is_cmd(&cmd_state, letter) != false) {
 801452c:	4631      	mov	r1, r6
 801452e:	f10d 000f 	add.w	r0, sp, #15
 8014532:	f7ff ffa5 	bl	8014480 <lv_txt_is_cmd>
 8014536:	2800      	cmp	r0, #0
 8014538:	d0f3      	beq.n	8014522 <lv_txt_get_next_line+0x66>
        letter_next = lv_txt_encoded_next(txt, &i_next);
 801453a:	465e      	mov	r6, fp
 801453c:	e7e2      	b.n	8014504 <lv_txt_get_next_line+0x48>
        if(letter == '\n' || letter == '\r') {
 801453e:	2e0d      	cmp	r6, #13
 8014540:	d107      	bne.n	8014552 <lv_txt_get_next_line+0x96>
            if(letter == '\r' && letter_next == '\n')
 8014542:	f1bb 0f0a 	cmp.w	fp, #10
 8014546:	d1ee      	bne.n	8014526 <lv_txt_get_next_line+0x6a>
                return i_next;
 8014548:	f8bd 0014 	ldrh.w	r0, [sp, #20]
}
 801454c:	b007      	add	sp, #28
 801454e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 8014552:	465a      	mov	r2, fp
 8014554:	4631      	mov	r1, r6
 8014556:	4620      	mov	r0, r4
 8014558:	f7fe fefc 	bl	8013354 <lv_font_get_glyph_width>
            cur_w += letter_w;
 801455c:	4405      	add	r5, r0
 801455e:	b2aa      	uxth	r2, r5
 8014560:	b215      	sxth	r5, r2
            if(cur_w > max_width) {
 8014562:	45aa      	cmp	sl, r5
 8014564:	da1a      	bge.n	801459c <lv_txt_get_next_line+0xe0>
                if(last_break != NO_BREAK_FOUND) {
 8014566:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 801456a:	d00a      	beq.n	8014582 <lv_txt_get_next_line+0xc6>
                    i = last_break;
 801456c:	f8cd 9010 	str.w	r9, [sp, #16]
                if(i == 0) lv_txt_encoded_next(txt, &i);
 8014570:	9b04      	ldr	r3, [sp, #16]
 8014572:	2b00      	cmp	r3, #0
 8014574:	d1d7      	bne.n	8014526 <lv_txt_get_next_line+0x6a>
 8014576:	f8d8 3000 	ldr.w	r3, [r8]
 801457a:	a904      	add	r1, sp, #16
 801457c:	4638      	mov	r0, r7
 801457e:	4798      	blx	r3
 8014580:	e7d1      	b.n	8014526 <lv_txt_get_next_line+0x6a>
                    lv_txt_encoded_prev(txt, &i);
 8014582:	4b0f      	ldr	r3, [pc, #60]	; (80145c0 <lv_txt_get_next_line+0x104>)
 8014584:	a904      	add	r1, sp, #16
 8014586:	681b      	ldr	r3, [r3, #0]
 8014588:	4638      	mov	r0, r7
 801458a:	4798      	blx	r3
 801458c:	e7f0      	b.n	8014570 <lv_txt_get_next_line+0xb4>
    uint8_t i;
    bool ret = false;

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 801458e:	429e      	cmp	r6, r3
 8014590:	f101 0101 	add.w	r1, r1, #1
 8014594:	d103      	bne.n	801459e <lv_txt_get_next_line+0xe2>
                last_break = i; /*Save the first char index after break*/
 8014596:	f8dd 9010 	ldr.w	r9, [sp, #16]
 801459a:	e007      	b.n	80145ac <lv_txt_get_next_line+0xf0>
 801459c:	2100      	movs	r1, #0
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 801459e:	fa5f fe81 	uxtb.w	lr, r1
 80145a2:	4b08      	ldr	r3, [pc, #32]	; (80145c4 <lv_txt_get_next_line+0x108>)
 80145a4:	f813 300e 	ldrb.w	r3, [r3, lr]
 80145a8:	2b00      	cmp	r3, #0
 80145aa:	d1f0      	bne.n	801458e <lv_txt_get_next_line+0xd2>
        if(letter_w > 0) {
 80145ac:	2800      	cmp	r0, #0
 80145ae:	d0c4      	beq.n	801453a <lv_txt_get_next_line+0x7e>
            cur_w += letter_space;
 80145b0:	9b00      	ldr	r3, [sp, #0]
 80145b2:	18d5      	adds	r5, r2, r3
 80145b4:	b22d      	sxth	r5, r5
 80145b6:	e7c0      	b.n	801453a <lv_txt_get_next_line+0x7e>
 80145b8:	e7c8      	b.n	801454c <lv_txt_get_next_line+0x90>
    if(txt == NULL) return 0;
 80145ba:	4608      	mov	r0, r1
 80145bc:	e7c6      	b.n	801454c <lv_txt_get_next_line+0x90>
 80145be:	bf00      	nop
 80145c0:	20001ca8 	.word	0x20001ca8
 80145c4:	080d89ce 	.word	0x080d89ce
 80145c8:	20001ca4 	.word	0x20001ca4

080145cc <lv_txt_get_width>:
{
 80145cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145d0:	4688      	mov	r8, r1
 80145d2:	b085      	sub	sp, #20
 80145d4:	4691      	mov	r9, r2
 80145d6:	461d      	mov	r5, r3
    if(txt == NULL) return 0;
 80145d8:	4606      	mov	r6, r0
 80145da:	b920      	cbnz	r0, 80145e6 <lv_txt_get_width+0x1a>
 80145dc:	2400      	movs	r4, #0
}
 80145de:	4620      	mov	r0, r4
 80145e0:	b005      	add	sp, #20
 80145e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(font == NULL) return 0;
 80145e6:	2a00      	cmp	r2, #0
 80145e8:	d0f8      	beq.n	80145dc <lv_txt_get_width+0x10>
    uint32_t i                   = 0;
 80145ea:	2400      	movs	r4, #0
 80145ec:	9403      	str	r4, [sp, #12]
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 80145ee:	f88d 400b 	strb.w	r4, [sp, #11]
    if(length != 0) {
 80145f2:	2900      	cmp	r1, #0
 80145f4:	d0f2      	beq.n	80145dc <lv_txt_get_width+0x10>
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 80145f6:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
            letter      = lv_txt_encoded_next(txt, &i);
 80145fa:	f8df a05c 	ldr.w	sl, [pc, #92]	; 8014658 <lv_txt_get_width+0x8c>
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 80145fe:	f007 0701 	and.w	r7, r7, #1
        while(i < length) {
 8014602:	9b03      	ldr	r3, [sp, #12]
 8014604:	4598      	cmp	r8, r3
 8014606:	d804      	bhi.n	8014612 <lv_txt_get_width+0x46>
        if(width > 0) {
 8014608:	2c00      	cmp	r4, #0
            width -= letter_space; /*Trim the last letter space. Important if the text is center
 801460a:	bfc4      	itt	gt
 801460c:	1b64      	subgt	r4, r4, r5
 801460e:	b224      	sxthgt	r4, r4
 8014610:	e7e5      	b.n	80145de <lv_txt_get_width+0x12>
            letter      = lv_txt_encoded_next(txt, &i);
 8014612:	f8da 3000 	ldr.w	r3, [sl]
 8014616:	a903      	add	r1, sp, #12
 8014618:	4630      	mov	r0, r6
 801461a:	4798      	blx	r3
 801461c:	4683      	mov	fp, r0
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 801461e:	9803      	ldr	r0, [sp, #12]
 8014620:	f8da 3000 	ldr.w	r3, [sl]
 8014624:	2100      	movs	r1, #0
 8014626:	4430      	add	r0, r6
 8014628:	4798      	blx	r3
 801462a:	4602      	mov	r2, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 801462c:	b957      	cbnz	r7, 8014644 <lv_txt_get_width+0x78>
            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
 801462e:	4659      	mov	r1, fp
 8014630:	4648      	mov	r0, r9
 8014632:	f7fe fe8f 	bl	8013354 <lv_font_get_glyph_width>
            if(char_width > 0) {
 8014636:	b203      	sxth	r3, r0
 8014638:	2b00      	cmp	r3, #0
 801463a:	dde2      	ble.n	8014602 <lv_txt_get_width+0x36>
                width += letter_space;
 801463c:	442c      	add	r4, r5
 801463e:	4404      	add	r4, r0
 8014640:	b224      	sxth	r4, r4
 8014642:	e7de      	b.n	8014602 <lv_txt_get_width+0x36>
 8014644:	9001      	str	r0, [sp, #4]
                if(lv_txt_is_cmd(&cmd_state, letter) != false) {
 8014646:	4659      	mov	r1, fp
 8014648:	f10d 000b 	add.w	r0, sp, #11
 801464c:	f7ff ff18 	bl	8014480 <lv_txt_is_cmd>
 8014650:	2800      	cmp	r0, #0
 8014652:	d1d6      	bne.n	8014602 <lv_txt_get_width+0x36>
 8014654:	9a01      	ldr	r2, [sp, #4]
 8014656:	e7ea      	b.n	801462e <lv_txt_get_width+0x62>
 8014658:	20001ca4 	.word	0x20001ca4

0801465c <lv_txt_get_size>:
{
 801465c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014660:	b087      	sub	sp, #28
    size_res->x = 0;
 8014662:	2500      	movs	r5, #0
{
 8014664:	9304      	str	r3, [sp, #16]
 8014666:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801466a:	f9bd b040 	ldrsh.w	fp, [sp, #64]	; 0x40
 801466e:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 8014672:	9303      	str	r3, [sp, #12]
 8014674:	4604      	mov	r4, r0
 8014676:	4616      	mov	r6, r2
    size_res->x = 0;
 8014678:	8005      	strh	r5, [r0, #0]
    size_res->y = 0;
 801467a:	8045      	strh	r5, [r0, #2]
    if(text == NULL) return;
 801467c:	4689      	mov	r9, r1
 801467e:	b1f9      	cbz	r1, 80146c0 <lv_txt_get_size+0x64>
    if(font == NULL) return;
 8014680:	b1f2      	cbz	r2, 80146c0 <lv_txt_get_size+0x64>
 8014682:	7a17      	ldrb	r7, [r2, #8]
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8014684:	f013 0f02 	tst.w	r3, #2
 8014688:	f647 4318 	movw	r3, #31768	; 0x7c18
 801468c:	bf18      	it	ne
 801468e:	469a      	movne	sl, r3
        size_res->y += line_space;
 8014690:	eb07 030b 	add.w	r3, r7, fp
 8014694:	9305      	str	r3, [sp, #20]
    while(text[line_start] != '\0') {
 8014696:	f819 3005 	ldrb.w	r3, [r9, r5]
 801469a:	eb09 0805 	add.w	r8, r9, r5
 801469e:	b993      	cbnz	r3, 80146c6 <lv_txt_get_size+0x6a>
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
 80146a0:	b155      	cbz	r5, 80146b8 <lv_txt_get_size+0x5c>
 80146a2:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80146a6:	2b0a      	cmp	r3, #10
 80146a8:	d001      	beq.n	80146ae <lv_txt_get_size+0x52>
 80146aa:	2b0d      	cmp	r3, #13
 80146ac:	d104      	bne.n	80146b8 <lv_txt_get_size+0x5c>
        size_res->y += letter_height + line_space;
 80146ae:	8862      	ldrh	r2, [r4, #2]
 80146b0:	eb07 030b 	add.w	r3, r7, fp
 80146b4:	4413      	add	r3, r2
 80146b6:	8063      	strh	r3, [r4, #2]
    if(size_res->y == 0)
 80146b8:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 80146bc:	b9fb      	cbnz	r3, 80146fe <lv_txt_get_size+0xa2>
        size_res->y = letter_height;
 80146be:	8067      	strh	r7, [r4, #2]
}
 80146c0:	b007      	add	sp, #28
 80146c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        new_line_start += lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
 80146c6:	9b03      	ldr	r3, [sp, #12]
 80146c8:	9300      	str	r3, [sp, #0]
 80146ca:	9a04      	ldr	r2, [sp, #16]
 80146cc:	4653      	mov	r3, sl
 80146ce:	4631      	mov	r1, r6
 80146d0:	4640      	mov	r0, r8
 80146d2:	f7ff fef3 	bl	80144bc <lv_txt_get_next_line>
        size_res->y += line_space;
 80146d6:	8863      	ldrh	r3, [r4, #2]
 80146d8:	9a05      	ldr	r2, [sp, #20]
 80146da:	4413      	add	r3, r2
 80146dc:	8063      	strh	r3, [r4, #2]
        act_line_length = lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space, flag);
 80146de:	9b03      	ldr	r3, [sp, #12]
 80146e0:	9300      	str	r3, [sp, #0]
        new_line_start += lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
 80146e2:	4601      	mov	r1, r0
        act_line_length = lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space, flag);
 80146e4:	9b04      	ldr	r3, [sp, #16]
        new_line_start += lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
 80146e6:	4405      	add	r5, r0
        act_line_length = lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space, flag);
 80146e8:	4632      	mov	r2, r6
 80146ea:	4640      	mov	r0, r8
 80146ec:	f7ff ff6e 	bl	80145cc <lv_txt_get_width>
        size_res->x = LV_MATH_MAX(act_line_length, size_res->x);
 80146f0:	f9b4 3000 	ldrsh.w	r3, [r4]
 80146f4:	4298      	cmp	r0, r3
 80146f6:	bfb8      	it	lt
 80146f8:	4618      	movlt	r0, r3
 80146fa:	8020      	strh	r0, [r4, #0]
 80146fc:	e7cb      	b.n	8014696 <lv_txt_get_size+0x3a>
        size_res->y -= line_space;
 80146fe:	eba3 030b 	sub.w	r3, r3, fp
 8014702:	8063      	strh	r3, [r4, #2]
 8014704:	e7dc      	b.n	80146c0 <lv_txt_get_size+0x64>

08014706 <lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                        int32_t (*cmp)(const void * pRef, const void * pElement))
{
 8014706:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801470a:	9d08      	ldr	r5, [sp, #32]
 801470c:	4681      	mov	r9, r0
 801470e:	4688      	mov	r8, r1
 8014710:	4614      	mov	r4, r2
 8014712:	469a      	mov	sl, r3
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
 8014714:	b914      	cbnz	r4, 801471c <lv_utils_bsearch+0x16>
            middle = base;
        } else {
            return (char *)middle;
        }
    }
    return NULL;
 8014716:	4620      	mov	r0, r4
 8014718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        middle += (n / 2) * size;
 801471c:	0867      	lsrs	r7, r4, #1
 801471e:	fb0a 8607 	mla	r6, sl, r7, r8
        if((c = (*cmp)(key, middle)) > 0) {
 8014722:	4631      	mov	r1, r6
 8014724:	4648      	mov	r0, r9
 8014726:	47a8      	blx	r5
 8014728:	2800      	cmp	r0, #0
 801472a:	dd07      	ble.n	801473c <lv_utils_bsearch+0x36>
 801472c:	43e1      	mvns	r1, r4
 801472e:	f001 0101 	and.w	r1, r1, #1
            n    = (n / 2) - ((n & 1) == 0);
 8014732:	1a7f      	subs	r7, r7, r1
            base = (middle += size);
 8014734:	eb06 080a 	add.w	r8, r6, sl
 8014738:	463c      	mov	r4, r7
 801473a:	e7eb      	b.n	8014714 <lv_utils_bsearch+0xe>
        } else if(c < 0) {
 801473c:	d1fc      	bne.n	8014738 <lv_utils_bsearch+0x32>
        middle += (n / 2) * size;
 801473e:	4630      	mov	r0, r6
}
 8014740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08014744 <lv_bar_anim>:
    return res;
}

#if LV_USE_ANIMATION
static void lv_bar_anim(void * bar, lv_anim_value_t value)
{
 8014744:	b538      	push	{r3, r4, r5, lr}
 8014746:	4604      	mov	r4, r0
 8014748:	460d      	mov	r5, r1
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 801474a:	f7fa fc80 	bl	800f04e <lv_obj_get_ext_attr>
    ext->anim_state    = value;
 801474e:	8145      	strh	r5, [r0, #10]
    lv_obj_invalidate(bar);
 8014750:	4620      	mov	r0, r4
}
 8014752:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(bar);
 8014756:	f7f9 bdfd 	b.w	800e354 <lv_obj_invalidate>
	...

0801475c <lv_bar_signal>:
{
 801475c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    res = ancestor_signal(bar, sign, param);
 801475e:	4b13      	ldr	r3, [pc, #76]	; (80147ac <lv_bar_signal+0x50>)
 8014760:	681b      	ldr	r3, [r3, #0]
{
 8014762:	4604      	mov	r4, r0
 8014764:	460f      	mov	r7, r1
 8014766:	4616      	mov	r6, r2
    res = ancestor_signal(bar, sign, param);
 8014768:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 801476a:	2801      	cmp	r0, #1
    res = ancestor_signal(bar, sign, param);
 801476c:	4605      	mov	r5, r0
    if(res != LV_RES_OK) return res;
 801476e:	d10c      	bne.n	801478a <lv_bar_signal+0x2e>
    if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 8014770:	2f05      	cmp	r7, #5
 8014772:	d10c      	bne.n	801478e <lv_bar_signal+0x32>
    lv_bar_ext_t * ext       = lv_obj_get_ext_attr(bar);
 8014774:	4620      	mov	r0, r4
 8014776:	f7fa fc6a 	bl	800f04e <lv_obj_get_ext_attr>
        if(style_indic->body.shadow.width > bar->ext_draw_pad) bar->ext_draw_pad = style_indic->body.shadow.width;
 801477a:	6903      	ldr	r3, [r0, #16]
 801477c:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 8014780:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8014784:	429a      	cmp	r2, r3
 8014786:	da00      	bge.n	801478a <lv_bar_signal+0x2e>
 8014788:	86a3      	strh	r3, [r4, #52]	; 0x34
}
 801478a:	4628      	mov	r0, r5
 801478c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 801478e:	2f06      	cmp	r7, #6
 8014790:	d1fb      	bne.n	801478a <lv_bar_signal+0x2e>
 8014792:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 8014794:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8014798:	b2da      	uxtb	r2, r3
 801479a:	b119      	cbz	r1, 80147a4 <lv_bar_signal+0x48>
 801479c:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801479e:	2b07      	cmp	r3, #7
 80147a0:	d1f8      	bne.n	8014794 <lv_bar_signal+0x38>
 80147a2:	461a      	mov	r2, r3
        buf->type[i] = "lv_bar";
 80147a4:	4b02      	ldr	r3, [pc, #8]	; (80147b0 <lv_bar_signal+0x54>)
 80147a6:	f846 3022 	str.w	r3, [r6, r2, lsl #2]
 80147aa:	e7ee      	b.n	801478a <lv_bar_signal+0x2e>
 80147ac:	2000afac 	.word	0x2000afac
 80147b0:	080d89d6 	.word	0x080d89d6

080147b4 <lv_bar_set_value>:
{
 80147b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80147b6:	b08b      	sub	sp, #44	; 0x2c
 80147b8:	460e      	mov	r6, r1
 80147ba:	4605      	mov	r5, r0
 80147bc:	4617      	mov	r7, r2
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 80147be:	f7fa fc46 	bl	800f04e <lv_obj_get_ext_attr>
    if(ext->cur_value == value) return;
 80147c2:	f9b0 3000 	ldrsh.w	r3, [r0]
 80147c6:	42b3      	cmp	r3, r6
 80147c8:	d010      	beq.n	80147ec <lv_bar_set_value+0x38>
    new_value = value > ext->max_value ? ext->max_value : value;
 80147ca:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
    new_value = new_value < ext->min_value ? ext->min_value : new_value;
 80147ce:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
    new_value = value > ext->max_value ? ext->max_value : value;
 80147d2:	42b4      	cmp	r4, r6
 80147d4:	bfa8      	it	ge
 80147d6:	4634      	movge	r4, r6
    new_value = new_value < ext->min_value ? ext->min_value : new_value;
 80147d8:	42a1      	cmp	r1, r4
 80147da:	bfb8      	it	lt
 80147dc:	4621      	movlt	r1, r4
    if(ext->cur_value == new_value) return;
 80147de:	428b      	cmp	r3, r1
 80147e0:	d004      	beq.n	80147ec <lv_bar_set_value+0x38>
    if(anim == LV_ANIM_OFF) {
 80147e2:	b92f      	cbnz	r7, 80147f0 <lv_bar_set_value+0x3c>
        ext->cur_value = new_value;
 80147e4:	8001      	strh	r1, [r0, #0]
        lv_obj_invalidate(bar);
 80147e6:	4628      	mov	r0, r5
 80147e8:	f7f9 fdb4 	bl	800e354 <lv_obj_invalidate>
}
 80147ec:	b00b      	add	sp, #44	; 0x2c
 80147ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(ext->anim_state == LV_BAR_ANIM_STATE_INV) {
 80147f0:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
        a.var            = bar;
 80147f4:	9500      	str	r5, [sp, #0]
        if(ext->anim_state == LV_BAR_ANIM_STATE_INV) {
 80147f6:	3201      	adds	r2, #1
            ext->anim_start = ext->anim_end;
 80147f8:	bf18      	it	ne
 80147fa:	8903      	ldrhne	r3, [r0, #8]
 80147fc:	80c3      	strh	r3, [r0, #6]
        a.end            = LV_BAR_ANIM_STATE_END;
 80147fe:	f44f 7280 	mov.w	r2, #256	; 0x100
            ext->anim_end   = new_value;
 8014802:	8101      	strh	r1, [r0, #8]
        a.end            = LV_BAR_ANIM_STATE_END;
 8014804:	9205      	str	r2, [sp, #20]
        a.exec_cb        = (lv_anim_exec_xcb_t)lv_bar_anim;
 8014806:	4a0e      	ldr	r2, [pc, #56]	; (8014840 <lv_bar_set_value+0x8c>)
 8014808:	9201      	str	r2, [sp, #4]
        a.path_cb        = lv_anim_path_linear;
 801480a:	4a0e      	ldr	r2, [pc, #56]	; (8014844 <lv_bar_set_value+0x90>)
 801480c:	9202      	str	r2, [sp, #8]
        a.ready_cb       = lv_bar_anim_ready;
 801480e:	4a0e      	ldr	r2, [pc, #56]	; (8014848 <lv_bar_set_value+0x94>)
 8014810:	9203      	str	r2, [sp, #12]
        a.time           = ext->anim_time;
 8014812:	8982      	ldrh	r2, [r0, #12]
 8014814:	f8ad 2018 	strh.w	r2, [sp, #24]
        a.playback       = 0;
 8014818:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
        a.start          = LV_BAR_ANIM_STATE_START;
 801481c:	2300      	movs	r3, #0
        a.repeat         = 0;
 801481e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8014822:	f363 0241 	bfi	r2, r3, #1, #1
        lv_anim_create(&a);
 8014826:	4668      	mov	r0, sp
        a.start          = LV_BAR_ANIM_STATE_START;
 8014828:	9304      	str	r3, [sp, #16]
        a.act_time       = 0;
 801482a:	f8ad 301a 	strh.w	r3, [sp, #26]
        a.playback_pause = 0;
 801482e:	f8ad 301c 	strh.w	r3, [sp, #28]
        a.repeat         = 0;
 8014832:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
        a.repeat_pause   = 0;
 8014836:	f8ad 301e 	strh.w	r3, [sp, #30]
        lv_anim_create(&a);
 801483a:	f7ff f899 	bl	8013970 <lv_anim_create>
 801483e:	e7d5      	b.n	80147ec <lv_bar_set_value+0x38>
 8014840:	08014745 	.word	0x08014745
 8014844:	08013799 	.word	0x08013799
 8014848:	0801484d 	.word	0x0801484d

0801484c <lv_bar_anim_ready>:

static void lv_bar_anim_ready(lv_anim_t * a)
{
 801484c:	b510      	push	{r4, lr}
 801484e:	4604      	mov	r4, r0
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(a->var);
 8014850:	6800      	ldr	r0, [r0, #0]
 8014852:	f7fa fbfc 	bl	800f04e <lv_obj_get_ext_attr>
    ext->anim_state    = LV_BAR_ANIM_STATE_INV;
 8014856:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801485a:	8143      	strh	r3, [r0, #10]
    lv_bar_set_value(a->var, ext->anim_end, false);
 801485c:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8014860:	6820      	ldr	r0, [r4, #0]
 8014862:	2200      	movs	r2, #0
}
 8014864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_bar_set_value(a->var, ext->anim_end, false);
 8014868:	f7ff bfa4 	b.w	80147b4 <lv_bar_set_value>

0801486c <lv_bar_set_style>:
{
 801486c:	b570      	push	{r4, r5, r6, lr}
 801486e:	460e      	mov	r6, r1
 8014870:	4604      	mov	r4, r0
 8014872:	4615      	mov	r5, r2
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 8014874:	f7fa fbeb 	bl	800f04e <lv_obj_get_ext_attr>
    switch(type) {
 8014878:	b116      	cbz	r6, 8014880 <lv_bar_set_style+0x14>
 801487a:	2e01      	cmp	r6, #1
 801487c:	d006      	beq.n	801488c <lv_bar_set_style+0x20>
 801487e:	bd70      	pop	{r4, r5, r6, pc}
        case LV_BAR_STYLE_BG: lv_obj_set_style(bar, style); break;
 8014880:	4629      	mov	r1, r5
 8014882:	4620      	mov	r0, r4
}
 8014884:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        case LV_BAR_STYLE_BG: lv_obj_set_style(bar, style); break;
 8014888:	f7fa bac8 	b.w	800ee1c <lv_obj_set_style>
            ext->style_indic = style;
 801488c:	6105      	str	r5, [r0, #16]
            lv_obj_refresh_ext_draw_pad(bar);
 801488e:	4620      	mov	r0, r4
}
 8014890:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            lv_obj_refresh_ext_draw_pad(bar);
 8014894:	f7fa ba27 	b.w	800ece6 <lv_obj_refresh_ext_draw_pad>

08014898 <lv_bar_create>:
{
 8014898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801489a:	460f      	mov	r7, r1
    lv_obj_t * new_bar = lv_obj_create(par, copy);
 801489c:	f7fa f83e 	bl	800e91c <lv_obj_create>
    lv_mem_assert(new_bar);
 80148a0:	4605      	mov	r5, r0
 80148a2:	b900      	cbnz	r0, 80148a6 <lv_bar_create+0xe>
 80148a4:	e7fe      	b.n	80148a4 <lv_bar_create+0xc>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_bar);
 80148a6:	4c38      	ldr	r4, [pc, #224]	; (8014988 <lv_bar_create+0xf0>)
 80148a8:	6823      	ldr	r3, [r4, #0]
 80148aa:	b913      	cbnz	r3, 80148b2 <lv_bar_create+0x1a>
 80148ac:	f7fa fbcb 	bl	800f046 <lv_obj_get_signal_cb>
 80148b0:	6020      	str	r0, [r4, #0]
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_cb(new_bar);
 80148b2:	4c36      	ldr	r4, [pc, #216]	; (801498c <lv_bar_create+0xf4>)
 80148b4:	6823      	ldr	r3, [r4, #0]
 80148b6:	b91b      	cbnz	r3, 80148c0 <lv_bar_create+0x28>
 80148b8:	4628      	mov	r0, r5
 80148ba:	f7fa fbc6 	bl	800f04a <lv_obj_get_design_cb>
 80148be:	6020      	str	r0, [r4, #0]
    lv_bar_ext_t * ext = lv_obj_allocate_ext_attr(new_bar, sizeof(lv_bar_ext_t));
 80148c0:	2114      	movs	r1, #20
 80148c2:	4628      	mov	r0, r5
 80148c4:	f7f9 fd18 	bl	800e2f8 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 80148c8:	4604      	mov	r4, r0
 80148ca:	b900      	cbnz	r0, 80148ce <lv_bar_create+0x36>
 80148cc:	e7fe      	b.n	80148cc <lv_bar_create+0x34>
    ext->max_value = 100;
 80148ce:	2364      	movs	r3, #100	; 0x64
 80148d0:	8083      	strh	r3, [r0, #4]
    ext->anim_time  = 200;
 80148d2:	23c8      	movs	r3, #200	; 0xc8
 80148d4:	8183      	strh	r3, [r0, #12]
    ext->anim_state = LV_BAR_ANIM_STATE_INV;
 80148d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80148da:	8143      	strh	r3, [r0, #10]
    ext->sym         = 0;
 80148dc:	7b83      	ldrb	r3, [r0, #14]
    lv_obj_set_signal_cb(new_bar, lv_bar_signal);
 80148de:	492c      	ldr	r1, [pc, #176]	; (8014990 <lv_bar_create+0xf8>)
    ext->min_value = 0;
 80148e0:	2600      	movs	r6, #0
    ext->sym         = 0;
 80148e2:	f366 0300 	bfi	r3, r6, #0, #1
 80148e6:	7383      	strb	r3, [r0, #14]
    ext->style_indic = &lv_style_pretty_color;
 80148e8:	4b2a      	ldr	r3, [pc, #168]	; (8014994 <lv_bar_create+0xfc>)
    ext->min_value = 0;
 80148ea:	8046      	strh	r6, [r0, #2]
    ext->cur_value = 0;
 80148ec:	8006      	strh	r6, [r0, #0]
    ext->anim_start = 0;
 80148ee:	80c6      	strh	r6, [r0, #6]
    ext->anim_end   = 0;
 80148f0:	8106      	strh	r6, [r0, #8]
    ext->style_indic = &lv_style_pretty_color;
 80148f2:	6103      	str	r3, [r0, #16]
    lv_obj_set_signal_cb(new_bar, lv_bar_signal);
 80148f4:	4628      	mov	r0, r5
 80148f6:	f7f9 fcfb 	bl	800e2f0 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_bar, lv_bar_design);
 80148fa:	4927      	ldr	r1, [pc, #156]	; (8014998 <lv_bar_create+0x100>)
 80148fc:	4628      	mov	r0, r5
 80148fe:	f7f9 fcf9 	bl	800e2f4 <lv_obj_set_design_cb>
    if(copy == NULL) {
 8014902:	bb1f      	cbnz	r7, 801494c <lv_bar_create+0xb4>
        lv_obj_set_click(new_bar, false);
 8014904:	4639      	mov	r1, r7
 8014906:	4628      	mov	r0, r5
 8014908:	f7f9 fc1e 	bl	800e148 <lv_obj_set_click>
        lv_obj_set_size(new_bar, LV_DPI * 2, LV_DPI / 3);
 801490c:	2208      	movs	r2, #8
 801490e:	2132      	movs	r1, #50	; 0x32
 8014910:	4628      	mov	r0, r5
 8014912:	f7fa f981 	bl	800ec18 <lv_obj_set_size>
        lv_bar_set_value(new_bar, ext->cur_value, false);
 8014916:	f9b4 1000 	ldrsh.w	r1, [r4]
 801491a:	463a      	mov	r2, r7
 801491c:	4628      	mov	r0, r5
 801491e:	f7ff ff49 	bl	80147b4 <lv_bar_set_value>
        lv_theme_t * th = lv_theme_get_current();
 8014922:	f004 fb5f 	bl	8018fe4 <lv_theme_get_current>
        if(th) {
 8014926:	4604      	mov	r4, r0
 8014928:	b158      	cbz	r0, 8014942 <lv_bar_create+0xaa>
            lv_bar_set_style(new_bar, LV_BAR_STYLE_BG, th->style.bar.bg);
 801492a:	6d42      	ldr	r2, [r0, #84]	; 0x54
 801492c:	4639      	mov	r1, r7
 801492e:	4628      	mov	r0, r5
 8014930:	f7ff ff9c 	bl	801486c <lv_bar_set_style>
            lv_bar_set_style(new_bar, LV_BAR_STYLE_INDIC, th->style.bar.indic);
 8014934:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8014936:	2101      	movs	r1, #1
 8014938:	4628      	mov	r0, r5
 801493a:	f7ff ff97 	bl	801486c <lv_bar_set_style>
}
 801493e:	4628      	mov	r0, r5
 8014940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            lv_obj_set_style(new_bar, &lv_style_pretty);
 8014942:	4916      	ldr	r1, [pc, #88]	; (801499c <lv_bar_create+0x104>)
 8014944:	4628      	mov	r0, r5
 8014946:	f7fa fa69 	bl	800ee1c <lv_obj_set_style>
 801494a:	e7f8      	b.n	801493e <lv_bar_create+0xa6>
        lv_bar_ext_t * ext_copy = lv_obj_get_ext_attr(copy);
 801494c:	4638      	mov	r0, r7
 801494e:	f7fa fb7e 	bl	800f04e <lv_obj_get_ext_attr>
        ext->min_value          = ext_copy->min_value;
 8014952:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8014956:	8063      	strh	r3, [r4, #2]
        ext->max_value          = ext_copy->max_value;
 8014958:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801495c:	80a3      	strh	r3, [r4, #4]
        ext->cur_value          = ext_copy->cur_value;
 801495e:	f9b0 3000 	ldrsh.w	r3, [r0]
 8014962:	8023      	strh	r3, [r4, #0]
        ext->style_indic        = ext_copy->style_indic;
 8014964:	6903      	ldr	r3, [r0, #16]
 8014966:	6123      	str	r3, [r4, #16]
        ext->sym                = ext_copy->sym;
 8014968:	7b82      	ldrb	r2, [r0, #14]
 801496a:	7ba3      	ldrb	r3, [r4, #14]
 801496c:	f362 0300 	bfi	r3, r2, #0, #1
        lv_obj_refresh_style(new_bar);
 8014970:	4628      	mov	r0, r5
        ext->sym                = ext_copy->sym;
 8014972:	73a3      	strb	r3, [r4, #14]
        lv_obj_refresh_style(new_bar);
 8014974:	f7fa f9a9 	bl	800ecca <lv_obj_refresh_style>
        lv_bar_set_value(new_bar, ext->cur_value, false);
 8014978:	4632      	mov	r2, r6
 801497a:	f9b4 1000 	ldrsh.w	r1, [r4]
 801497e:	4628      	mov	r0, r5
 8014980:	f7ff ff18 	bl	80147b4 <lv_bar_set_value>
 8014984:	e7db      	b.n	801493e <lv_bar_create+0xa6>
 8014986:	bf00      	nop
 8014988:	2000afac 	.word	0x2000afac
 801498c:	2000afa8 	.word	0x2000afa8
 8014990:	0801475d 	.word	0x0801475d
 8014994:	2000c244 	.word	0x2000c244
 8014998:	080149c5 	.word	0x080149c5
 801499c:	2000c334 	.word	0x2000c334

080149a0 <lv_bar_get_style>:
{
 80149a0:	b538      	push	{r3, r4, r5, lr}
 80149a2:	460c      	mov	r4, r1
 80149a4:	4605      	mov	r5, r0
    lv_bar_ext_t * ext       = lv_obj_get_ext_attr(bar);
 80149a6:	f7fa fb52 	bl	800f04e <lv_obj_get_ext_attr>
    switch(type) {
 80149aa:	b11c      	cbz	r4, 80149b4 <lv_bar_get_style+0x14>
 80149ac:	2c01      	cmp	r4, #1
 80149ae:	d006      	beq.n	80149be <lv_bar_get_style+0x1e>
        default: style = NULL; break;
 80149b0:	2000      	movs	r0, #0
}
 80149b2:	bd38      	pop	{r3, r4, r5, pc}
        case LV_BAR_STYLE_BG: style = lv_obj_get_style(bar); break;
 80149b4:	4628      	mov	r0, r5
}
 80149b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        case LV_BAR_STYLE_BG: style = lv_obj_get_style(bar); break;
 80149ba:	f7fa ba5d 	b.w	800ee78 <lv_obj_get_style>
        case LV_BAR_STYLE_INDIC: style = ext->style_indic; break;
 80149be:	6900      	ldr	r0, [r0, #16]
 80149c0:	bd38      	pop	{r3, r4, r5, pc}
	...

080149c4 <lv_bar_design>:
{
 80149c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if(mode == LV_DESIGN_COVER_CHK) {
 80149c8:	2a02      	cmp	r2, #2
{
 80149ca:	b091      	sub	sp, #68	; 0x44
 80149cc:	4605      	mov	r5, r0
 80149ce:	460e      	mov	r6, r1
 80149d0:	4614      	mov	r4, r2
    if(mode == LV_DESIGN_COVER_CHK) {
 80149d2:	d107      	bne.n	80149e4 <lv_bar_design+0x20>
        return ancestor_design_f(bar, mask, mode);
 80149d4:	4b98      	ldr	r3, [pc, #608]	; (8014c38 <lv_bar_design+0x274>)
 80149d6:	681b      	ldr	r3, [r3, #0]
 80149d8:	4798      	blx	r3
 80149da:	4604      	mov	r4, r0
}
 80149dc:	4620      	mov	r0, r4
 80149de:	b011      	add	sp, #68	; 0x44
 80149e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 80149e4:	2a00      	cmp	r2, #0
 80149e6:	f040 8105 	bne.w	8014bf4 <lv_bar_design+0x230>
        lv_opa_t opa_scale = lv_obj_get_opa_scale(bar);
 80149ea:	f7fa fac8 	bl	800ef7e <lv_obj_get_opa_scale>
 80149ee:	4607      	mov	r7, r0
        if(lv_obj_is_focused(bar)) {
 80149f0:	4628      	mov	r0, r5
 80149f2:	f7fa fb34 	bl	800f05e <lv_obj_is_focused>
 80149f6:	4602      	mov	r2, r0
 80149f8:	b318      	cbz	r0, 8014a42 <lv_bar_design+0x7e>
            const lv_style_t * style_bg = lv_bar_get_style(bar, LV_BAR_STYLE_BG);
 80149fa:	4621      	mov	r1, r4
 80149fc:	4628      	mov	r0, r5
 80149fe:	f7ff ffcf 	bl	80149a0 <lv_bar_get_style>
            lv_style_copy(&style_tmp, style_bg);
 8014a02:	4601      	mov	r1, r0
 8014a04:	a801      	add	r0, sp, #4
 8014a06:	f7fa fe65 	bl	800f6d4 <lv_style_copy>
            lv_draw_rect(&bar->coords, mask, &style_tmp, opa_scale);
 8014a0a:	463b      	mov	r3, r7
 8014a0c:	aa01      	add	r2, sp, #4
 8014a0e:	4631      	mov	r1, r6
 8014a10:	f105 0010 	add.w	r0, r5, #16
            style_tmp.body.border.width = 0;
 8014a14:	f8ad 4010 	strh.w	r4, [sp, #16]
            lv_draw_rect(&bar->coords, mask, &style_tmp, opa_scale);
 8014a18:	f7fc fa3e 	bl	8010e98 <lv_draw_rect>
        lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 8014a1c:	4628      	mov	r0, r5
 8014a1e:	f7fa fb16 	bl	800f04e <lv_obj_get_ext_attr>
        if(ext->cur_value != ext->min_value || ext->sym
 8014a22:	f9b0 2000 	ldrsh.w	r2, [r0]
 8014a26:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8014a2a:	429a      	cmp	r2, r3
        lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 8014a2c:	4604      	mov	r4, r0
        if(ext->cur_value != ext->min_value || ext->sym
 8014a2e:	d10e      	bne.n	8014a4e <lv_bar_design+0x8a>
 8014a30:	7b83      	ldrb	r3, [r0, #14]
 8014a32:	07db      	lsls	r3, r3, #31
 8014a34:	d40b      	bmi.n	8014a4e <lv_bar_design+0x8a>
           || ext->anim_start != LV_BAR_ANIM_STATE_INV
 8014a36:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8014a3a:	3301      	adds	r3, #1
 8014a3c:	d107      	bne.n	8014a4e <lv_bar_design+0x8a>
    return true;
 8014a3e:	2401      	movs	r4, #1
 8014a40:	e7cc      	b.n	80149dc <lv_bar_design+0x18>
            ancestor_design_f(bar, mask, mode);
 8014a42:	4b7d      	ldr	r3, [pc, #500]	; (8014c38 <lv_bar_design+0x274>)
 8014a44:	4631      	mov	r1, r6
 8014a46:	681b      	ldr	r3, [r3, #0]
 8014a48:	4628      	mov	r0, r5
 8014a4a:	4798      	blx	r3
 8014a4c:	e7e6      	b.n	8014a1c <lv_bar_design+0x58>
    lv_bar_ext_t * ext       = lv_obj_get_ext_attr(bar);
 8014a4e:	4628      	mov	r0, r5
 8014a50:	f7fa fafd 	bl	800f04e <lv_obj_get_ext_attr>
        case LV_BAR_STYLE_INDIC: style = ext->style_indic; break;
 8014a54:	6902      	ldr	r2, [r0, #16]
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    memcpy(dest, src, sizeof(lv_area_t));
 8014a56:	f855 0f10 	ldr.w	r0, [r5, #16]!
 8014a5a:	6869      	ldr	r1, [r5, #4]
 8014a5c:	ab01      	add	r3, sp, #4
 8014a5e:	c303      	stmia	r3!, {r0, r1}
            indic_area.x1 += style_indic->body.padding.left;
 8014a60:	8b53      	ldrh	r3, [r2, #26]
 8014a62:	f8bd e004 	ldrh.w	lr, [sp, #4]
            indic_area.x2 -= style_indic->body.padding.right;
 8014a66:	8b91      	ldrh	r1, [r2, #28]
            indic_area.y2 -= style_indic->body.padding.bottom;
 8014a68:	f8bd 000a 	ldrh.w	r0, [sp, #10]
            indic_area.y1 += style_indic->body.padding.top;
 8014a6c:	f8b2 c016 	ldrh.w	ip, [r2, #22]
 8014a70:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8014a74:	f894 800e 	ldrb.w	r8, [r4, #14]
 8014a78:	f9b4 900a 	ldrsh.w	r9, [r4, #10]
            indic_area.x1 += style_indic->body.padding.left;
 8014a7c:	449e      	add	lr, r3
            indic_area.x2 -= style_indic->body.padding.right;
 8014a7e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8014a82:	1a5b      	subs	r3, r3, r1
            indic_area.y2 -= style_indic->body.padding.bottom;
 8014a84:	8b11      	ldrh	r1, [r2, #24]
 8014a86:	1a40      	subs	r0, r0, r1
            indic_area.x2 -= style_indic->body.padding.right;
 8014a88:	b29b      	uxth	r3, r3
            indic_area.y1 += style_indic->body.padding.top;
 8014a8a:	4465      	add	r5, ip
            indic_area.y2 -= style_indic->body.padding.bottom;
 8014a8c:	b280      	uxth	r0, r0
            indic_area.y1 += style_indic->body.padding.top;
 8014a8e:	b2ad      	uxth	r5, r5
            indic_area.x1 += style_indic->body.padding.left;
 8014a90:	fa1f fe8e 	uxth.w	lr, lr
            indic_area.x2 -= style_indic->body.padding.right;
 8014a94:	f8ad 3008 	strh.w	r3, [sp, #8]
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 8014a98:	f100 0c01 	add.w	ip, r0, #1
    return area_p->x2 - area_p->x1 + 1;
 8014a9c:	3301      	adds	r3, #1
    return area_p->y2 - area_p->y1 + 1;
 8014a9e:	ebac 0c05 	sub.w	ip, ip, r5
    return area_p->x2 - area_p->x1 + 1;
 8014aa2:	eba3 030e 	sub.w	r3, r3, lr
 8014aa6:	b21b      	sxth	r3, r3
    return area_p->y2 - area_p->y1 + 1;
 8014aa8:	fa0f fc8c 	sxth.w	ip, ip
            if(w >= h) {
 8014aac:	459c      	cmp	ip, r3
            indic_area.y1 += style_indic->body.padding.top;
 8014aae:	f8ad 5006 	strh.w	r5, [sp, #6]
            indic_area.x1 += style_indic->body.padding.left;
 8014ab2:	f8ad e004 	strh.w	lr, [sp, #4]
            indic_area.y2 -= style_indic->body.padding.bottom;
 8014ab6:	f8ad 000a 	strh.w	r0, [sp, #10]
 8014aba:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8014abe:	f9b4 5004 	ldrsh.w	r5, [r4, #4]
            if(w >= h) {
 8014ac2:	dc4b      	bgt.n	8014b5c <lv_bar_design+0x198>
                if(ext->anim_state != LV_BAR_ANIM_STATE_INV) {
 8014ac4:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8014ac8:	d03e      	beq.n	8014b48 <lv_bar_design+0x184>
                        (int32_t)((int32_t)w * (ext->anim_start - ext->min_value)) / (ext->max_value - ext->min_value);
 8014aca:	f9b4 c006 	ldrsh.w	ip, [r4, #6]
                        (int32_t)((int32_t)w * (ext->anim_end - ext->min_value)) / (ext->max_value - ext->min_value);
 8014ace:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
                        (int32_t)((int32_t)w * (ext->anim_start - ext->min_value)) / (ext->max_value - ext->min_value);
 8014ad2:	ebac 0c01 	sub.w	ip, ip, r1
                        (int32_t)((int32_t)w * (ext->anim_end - ext->min_value)) / (ext->max_value - ext->min_value);
 8014ad6:	1a40      	subs	r0, r0, r1
                        (int32_t)((int32_t)w * (ext->anim_start - ext->min_value)) / (ext->max_value - ext->min_value);
 8014ad8:	1a6d      	subs	r5, r5, r1
 8014ada:	fb03 fc0c 	mul.w	ip, r3, ip
                        (int32_t)((int32_t)w * (ext->anim_end - ext->min_value)) / (ext->max_value - ext->min_value);
 8014ade:	4358      	muls	r0, r3
                        (int32_t)((int32_t)w * (ext->anim_start - ext->min_value)) / (ext->max_value - ext->min_value);
 8014ae0:	fb9c fcf5 	sdiv	ip, ip, r5
                        (int32_t)((int32_t)w * (ext->anim_end - ext->min_value)) / (ext->max_value - ext->min_value);
 8014ae4:	fb90 f0f5 	sdiv	r0, r0, r5
                        anim_start_x + (((anim_end_x - anim_start_x) * ext->anim_state) >> LV_BAR_ANIM_STATE_NORM);
 8014ae8:	fa0f f58c 	sxth.w	r5, ip
 8014aec:	b200      	sxth	r0, r0
 8014aee:	1b40      	subs	r0, r0, r5
 8014af0:	fb09 f000 	mul.w	r0, r9, r0
 8014af4:	eb0c 2020 	add.w	r0, ip, r0, asr #8
                    indic_area.x2 =
 8014af8:	f8ad 0008 	strh.w	r0, [sp, #8]
                indic_area.x2 = indic_area.x1 + indic_area.x2 - 1;
 8014afc:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 8014b00:	3801      	subs	r0, #1
 8014b02:	4470      	add	r0, lr
 8014b04:	b200      	sxth	r0, r0
                if(ext->sym && ext->min_value < 0 && ext->max_value > 0) {
 8014b06:	f018 0f01 	tst.w	r8, #1
                indic_area.x2 = indic_area.x1 + indic_area.x2 - 1;
 8014b0a:	f8ad 0008 	strh.w	r0, [sp, #8]
                if(ext->sym && ext->min_value < 0 && ext->max_value > 0) {
 8014b0e:	d015      	beq.n	8014b3c <lv_bar_design+0x178>
 8014b10:	2900      	cmp	r1, #0
 8014b12:	da13      	bge.n	8014b3c <lv_bar_design+0x178>
 8014b14:	f9b4 4004 	ldrsh.w	r4, [r4, #4]
 8014b18:	2c00      	cmp	r4, #0
 8014b1a:	dd0f      	ble.n	8014b3c <lv_bar_design+0x178>
                    zero = indic_area.x1 + (-ext->min_value * w) / (ext->max_value - ext->min_value);
 8014b1c:	424d      	negs	r5, r1
 8014b1e:	436b      	muls	r3, r5
 8014b20:	1a61      	subs	r1, r4, r1
 8014b22:	fb93 f3f1 	sdiv	r3, r3, r1
 8014b26:	449e      	add	lr, r3
 8014b28:	fa0f fe8e 	sxth.w	lr, lr
                    if(indic_area.x2 > zero)
 8014b2c:	4570      	cmp	r0, lr
                        indic_area.x1 = zero;
 8014b2e:	bfce      	itee	gt
 8014b30:	f8ad e004 	strhgt.w	lr, [sp, #4]
                        indic_area.x1 = indic_area.x2;
 8014b34:	f8ad 0004 	strhle.w	r0, [sp, #4]
                        indic_area.x2 = zero;
 8014b38:	f8ad e008 	strhle.w	lr, [sp, #8]
            lv_draw_rect(&indic_area, mask, style_indic, opa_scale);
 8014b3c:	463b      	mov	r3, r7
 8014b3e:	4631      	mov	r1, r6
 8014b40:	a801      	add	r0, sp, #4
 8014b42:	f7fc f9a9 	bl	8010e98 <lv_draw_rect>
 8014b46:	e77a      	b.n	8014a3e <lv_bar_design+0x7a>
                        (int32_t)((int32_t)w * (ext->cur_value - ext->min_value)) / (ext->max_value - ext->min_value);
 8014b48:	f9b4 0000 	ldrsh.w	r0, [r4]
 8014b4c:	1a40      	subs	r0, r0, r1
 8014b4e:	4358      	muls	r0, r3
 8014b50:	1a6d      	subs	r5, r5, r1
 8014b52:	fb90 f5f5 	sdiv	r5, r0, r5
                    indic_area.x2 =
 8014b56:	f8ad 5008 	strh.w	r5, [sp, #8]
 8014b5a:	e7cf      	b.n	8014afc <lv_bar_design+0x138>
                if(ext->anim_state != LV_BAR_ANIM_STATE_INV) {
 8014b5c:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8014b60:	d03d      	beq.n	8014bde <lv_bar_design+0x21a>
                        (int32_t)((int32_t)h * (ext->anim_start - ext->min_value)) / (ext->max_value - ext->min_value);
 8014b62:	eba5 0e01 	sub.w	lr, r5, r1
 8014b66:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
                        (int32_t)((int32_t)h * (ext->anim_end - ext->min_value)) / (ext->max_value - ext->min_value);
 8014b6a:	f9b4 5008 	ldrsh.w	r5, [r4, #8]
                        (int32_t)((int32_t)h * (ext->anim_start - ext->min_value)) / (ext->max_value - ext->min_value);
 8014b6e:	1a5b      	subs	r3, r3, r1
                        (int32_t)((int32_t)h * (ext->anim_end - ext->min_value)) / (ext->max_value - ext->min_value);
 8014b70:	1a6d      	subs	r5, r5, r1
                        (int32_t)((int32_t)h * (ext->anim_start - ext->min_value)) / (ext->max_value - ext->min_value);
 8014b72:	fb0c f303 	mul.w	r3, ip, r3
                        (int32_t)((int32_t)h * (ext->anim_end - ext->min_value)) / (ext->max_value - ext->min_value);
 8014b76:	fb0c f505 	mul.w	r5, ip, r5
                        (int32_t)((int32_t)h * (ext->anim_start - ext->min_value)) / (ext->max_value - ext->min_value);
 8014b7a:	fb93 f3fe 	sdiv	r3, r3, lr
                        (int32_t)((int32_t)h * (ext->anim_end - ext->min_value)) / (ext->max_value - ext->min_value);
 8014b7e:	fb95 f5fe 	sdiv	r5, r5, lr
                        anim_start_y + (((anim_end_y - anim_start_y) * ext->anim_state) >> LV_BAR_ANIM_STATE_NORM);
 8014b82:	fa0f fe83 	sxth.w	lr, r3
 8014b86:	b22d      	sxth	r5, r5
 8014b88:	eba5 050e 	sub.w	r5, r5, lr
 8014b8c:	fb09 f905 	mul.w	r9, r9, r5
 8014b90:	eb03 2929 	add.w	r9, r3, r9, asr #8
                    indic_area.y1 =
 8014b94:	f8ad 9006 	strh.w	r9, [sp, #6]
                indic_area.y1 = indic_area.y2 - indic_area.y1 + 1;
 8014b98:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8014b9c:	f1c3 0301 	rsb	r3, r3, #1
 8014ba0:	4403      	add	r3, r0
 8014ba2:	b21b      	sxth	r3, r3
                if(ext->sym && ext->min_value < 0 && ext->max_value > 0) {
 8014ba4:	f018 0f01 	tst.w	r8, #1
                indic_area.y1 = indic_area.y2 - indic_area.y1 + 1;
 8014ba8:	f8ad 3006 	strh.w	r3, [sp, #6]
                if(ext->sym && ext->min_value < 0 && ext->max_value > 0) {
 8014bac:	d0c6      	beq.n	8014b3c <lv_bar_design+0x178>
 8014bae:	2900      	cmp	r1, #0
 8014bb0:	dac4      	bge.n	8014b3c <lv_bar_design+0x178>
 8014bb2:	f9b4 4004 	ldrsh.w	r4, [r4, #4]
 8014bb6:	2c00      	cmp	r4, #0
 8014bb8:	ddc0      	ble.n	8014b3c <lv_bar_design+0x178>
                    zero = indic_area.y2 - (-ext->min_value * h) / (ext->max_value - ext->min_value);
 8014bba:	424d      	negs	r5, r1
 8014bbc:	fb0c fc05 	mul.w	ip, ip, r5
 8014bc0:	1a61      	subs	r1, r4, r1
 8014bc2:	fb9c fcf1 	sdiv	ip, ip, r1
 8014bc6:	eba0 000c 	sub.w	r0, r0, ip
 8014bca:	b200      	sxth	r0, r0
                    if(indic_area.y1 < zero)
 8014bcc:	4283      	cmp	r3, r0
                        indic_area.y2 = zero;
 8014bce:	bfb2      	itee	lt
 8014bd0:	f8ad 000a 	strhlt.w	r0, [sp, #10]
                        indic_area.y2 = indic_area.y1;
 8014bd4:	f8ad 300a 	strhge.w	r3, [sp, #10]
                        indic_area.y1 = zero;
 8014bd8:	f8ad 0006 	strhge.w	r0, [sp, #6]
 8014bdc:	e7ae      	b.n	8014b3c <lv_bar_design+0x178>
                        (int32_t)((int32_t)h * (ext->cur_value - ext->min_value)) / (ext->max_value - ext->min_value);
 8014bde:	f9b4 3000 	ldrsh.w	r3, [r4]
 8014be2:	1a5b      	subs	r3, r3, r1
 8014be4:	fb0c f303 	mul.w	r3, ip, r3
 8014be8:	1a6d      	subs	r5, r5, r1
 8014bea:	fb93 f5f5 	sdiv	r5, r3, r5
                    indic_area.y1 =
 8014bee:	f8ad 5006 	strh.w	r5, [sp, #6]
 8014bf2:	e7d1      	b.n	8014b98 <lv_bar_design+0x1d4>
    } else if(mode == LV_DESIGN_DRAW_POST) {
 8014bf4:	2a01      	cmp	r2, #1
 8014bf6:	f47f af22 	bne.w	8014a3e <lv_bar_design+0x7a>
        if(lv_obj_is_focused(bar)) {
 8014bfa:	f7fa fa30 	bl	800f05e <lv_obj_is_focused>
 8014bfe:	4604      	mov	r4, r0
 8014c00:	2800      	cmp	r0, #0
 8014c02:	f43f af1c 	beq.w	8014a3e <lv_bar_design+0x7a>
            lv_opa_t opa_scale          = lv_obj_get_opa_scale(bar);
 8014c06:	4628      	mov	r0, r5
 8014c08:	f7fa f9b9 	bl	800ef7e <lv_obj_get_opa_scale>
            const lv_style_t * style_bg = lv_bar_get_style(bar, LV_BAR_STYLE_BG);
 8014c0c:	2100      	movs	r1, #0
            lv_opa_t opa_scale          = lv_obj_get_opa_scale(bar);
 8014c0e:	4607      	mov	r7, r0
            const lv_style_t * style_bg = lv_bar_get_style(bar, LV_BAR_STYLE_BG);
 8014c10:	4628      	mov	r0, r5
 8014c12:	f7ff fec5 	bl	80149a0 <lv_bar_get_style>
            lv_style_copy(&style_tmp, style_bg);
 8014c16:	4601      	mov	r1, r0
 8014c18:	a801      	add	r0, sp, #4
 8014c1a:	f7fa fd5b 	bl	800f6d4 <lv_style_copy>
            style_tmp.body.opa          = LV_OPA_TRANSP;
 8014c1e:	2200      	movs	r2, #0
 8014c20:	f88d 200c 	strb.w	r2, [sp, #12]
            style_tmp.body.shadow.width = 0;
 8014c24:	f8ad 2016 	strh.w	r2, [sp, #22]
            lv_draw_rect(&bar->coords, mask, &style_tmp, opa_scale);
 8014c28:	463b      	mov	r3, r7
 8014c2a:	aa01      	add	r2, sp, #4
 8014c2c:	4631      	mov	r1, r6
 8014c2e:	f105 0010 	add.w	r0, r5, #16
 8014c32:	f7fc f931 	bl	8010e98 <lv_draw_rect>
 8014c36:	e6d1      	b.n	80149dc <lv_bar_design+0x18>
 8014c38:	2000afa8 	.word	0x2000afa8

08014c3c <lv_btn_design>:
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_btn_design(lv_obj_t * btn, const lv_area_t * mask, lv_design_mode_t mode)
{
    if(mode == LV_DESIGN_COVER_CHK) {
 8014c3c:	2a02      	cmp	r2, #2
{
 8014c3e:	b510      	push	{r4, lr}
    if(mode == LV_DESIGN_COVER_CHK) {
 8014c40:	d008      	beq.n	8014c54 <lv_btn_design+0x18>
        return false;
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 8014c42:	b91a      	cbnz	r2, 8014c4c <lv_btn_design+0x10>
        }
#else
        ancestor_design(btn, mask, mode);
#endif
    } else if(mode == LV_DESIGN_DRAW_POST) {
        ancestor_design(btn, mask, mode);
 8014c44:	4b04      	ldr	r3, [pc, #16]	; (8014c58 <lv_btn_design+0x1c>)
 8014c46:	681b      	ldr	r3, [r3, #0]
 8014c48:	4798      	blx	r3
 8014c4a:	e001      	b.n	8014c50 <lv_btn_design+0x14>
    } else if(mode == LV_DESIGN_DRAW_POST) {
 8014c4c:	2a01      	cmp	r2, #1
 8014c4e:	d0f9      	beq.n	8014c44 <lv_btn_design+0x8>
    }

    return true;
 8014c50:	2001      	movs	r0, #1
}
 8014c52:	bd10      	pop	{r4, pc}
        return false;
 8014c54:	2000      	movs	r0, #0
 8014c56:	bd10      	pop	{r4, pc}
 8014c58:	2000afb0 	.word	0x2000afb0

08014c5c <lv_btn_set_state>:
{
 8014c5c:	b538      	push	{r3, r4, r5, lr}
 8014c5e:	460c      	mov	r4, r1
 8014c60:	4605      	mov	r5, r0
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8014c62:	f7fa f9f4 	bl	800f04e <lv_obj_get_ext_attr>
    if(ext->state != state) {
 8014c66:	7e03      	ldrb	r3, [r0, #24]
 8014c68:	f003 0207 	and.w	r2, r3, #7
 8014c6c:	42a2      	cmp	r2, r4
 8014c6e:	d00a      	beq.n	8014c86 <lv_btn_set_state+0x2a>
        ext->state = state;
 8014c70:	f364 0302 	bfi	r3, r4, #0, #3
 8014c74:	7603      	strb	r3, [r0, #24]
        lv_obj_set_style(btn, ext->styles[state]);
 8014c76:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8014c7a:	6841      	ldr	r1, [r0, #4]
 8014c7c:	4628      	mov	r0, r5
}
 8014c7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_obj_set_style(btn, ext->styles[state]);
 8014c82:	f7fa b8cb 	b.w	800ee1c <lv_obj_set_style>
 8014c86:	bd38      	pop	{r3, r4, r5, pc}

08014c88 <lv_btn_set_style>:
{
 8014c88:	b570      	push	{r4, r5, r6, lr}
 8014c8a:	460d      	mov	r5, r1
 8014c8c:	4606      	mov	r6, r0
 8014c8e:	4614      	mov	r4, r2
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8014c90:	f7fa f9dd 	bl	800f04e <lv_obj_get_ext_attr>
    switch(type) {
 8014c94:	2d04      	cmp	r5, #4
 8014c96:	d805      	bhi.n	8014ca4 <lv_btn_set_style+0x1c>
 8014c98:	e8df f005 	tbb	[pc, r5]
 8014c9c:	13110f03 	.word	0x13110f03
 8014ca0:	15          	.byte	0x15
 8014ca1:	00          	.byte	0x00
        case LV_BTN_STYLE_REL: ext->styles[LV_BTN_STATE_REL] = style; break;
 8014ca2:	6044      	str	r4, [r0, #4]
    lv_obj_set_style(btn, ext->styles[ext->state]);
 8014ca4:	7e03      	ldrb	r3, [r0, #24]
 8014ca6:	f003 0307 	and.w	r3, r3, #7
 8014caa:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8014cae:	6841      	ldr	r1, [r0, #4]
 8014cb0:	4630      	mov	r0, r6
}
 8014cb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_set_style(btn, ext->styles[ext->state]);
 8014cb6:	f7fa b8b1 	b.w	800ee1c <lv_obj_set_style>
        case LV_BTN_STYLE_PR: ext->styles[LV_BTN_STATE_PR] = style; break;
 8014cba:	6084      	str	r4, [r0, #8]
 8014cbc:	e7f2      	b.n	8014ca4 <lv_btn_set_style+0x1c>
        case LV_BTN_STYLE_TGL_REL: ext->styles[LV_BTN_STATE_TGL_REL] = style; break;
 8014cbe:	60c4      	str	r4, [r0, #12]
 8014cc0:	e7f0      	b.n	8014ca4 <lv_btn_set_style+0x1c>
        case LV_BTN_STYLE_TGL_PR: ext->styles[LV_BTN_STATE_TGL_PR] = style; break;
 8014cc2:	6104      	str	r4, [r0, #16]
 8014cc4:	e7ee      	b.n	8014ca4 <lv_btn_set_style+0x1c>
        case LV_BTN_STYLE_INA: ext->styles[LV_BTN_STATE_INA] = style; break;
 8014cc6:	6144      	str	r4, [r0, #20]
 8014cc8:	e7ec      	b.n	8014ca4 <lv_btn_set_style+0x1c>
	...

08014ccc <lv_btn_create>:
{
 8014ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014cce:	4607      	mov	r7, r0
 8014cd0:	460e      	mov	r6, r1
    new_btn = lv_cont_create(par, copy);
 8014cd2:	f000 fac9 	bl	8015268 <lv_cont_create>
    lv_mem_assert(new_btn);
 8014cd6:	4605      	mov	r5, r0
 8014cd8:	b900      	cbnz	r0, 8014cdc <lv_btn_create+0x10>
 8014cda:	e7fe      	b.n	8014cda <lv_btn_create+0xe>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_btn);
 8014cdc:	4c3a      	ldr	r4, [pc, #232]	; (8014dc8 <lv_btn_create+0xfc>)
 8014cde:	6823      	ldr	r3, [r4, #0]
 8014ce0:	b913      	cbnz	r3, 8014ce8 <lv_btn_create+0x1c>
 8014ce2:	f7fa f9b0 	bl	800f046 <lv_obj_get_signal_cb>
 8014ce6:	6020      	str	r0, [r4, #0]
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(new_btn);
 8014ce8:	4c38      	ldr	r4, [pc, #224]	; (8014dcc <lv_btn_create+0x100>)
 8014cea:	6823      	ldr	r3, [r4, #0]
 8014cec:	b91b      	cbnz	r3, 8014cf6 <lv_btn_create+0x2a>
 8014cee:	4628      	mov	r0, r5
 8014cf0:	f7fa f9ab 	bl	800f04a <lv_obj_get_design_cb>
 8014cf4:	6020      	str	r0, [r4, #0]
    lv_btn_ext_t * ext = lv_obj_allocate_ext_attr(new_btn, sizeof(lv_btn_ext_t));
 8014cf6:	211c      	movs	r1, #28
 8014cf8:	4628      	mov	r0, r5
 8014cfa:	f7f9 fafd 	bl	800e2f8 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 8014cfe:	4604      	mov	r4, r0
 8014d00:	b900      	cbnz	r0, 8014d04 <lv_btn_create+0x38>
 8014d02:	e7fe      	b.n	8014d02 <lv_btn_create+0x36>
    ext->styles[LV_BTN_STATE_REL]     = &lv_style_btn_rel;
 8014d04:	4a32      	ldr	r2, [pc, #200]	; (8014dd0 <lv_btn_create+0x104>)
    ext->state = LV_BTN_STATE_REL;
 8014d06:	7e03      	ldrb	r3, [r0, #24]
    ext->styles[LV_BTN_STATE_REL]     = &lv_style_btn_rel;
 8014d08:	6042      	str	r2, [r0, #4]
    ext->styles[LV_BTN_STATE_PR]      = &lv_style_btn_pr;
 8014d0a:	4a32      	ldr	r2, [pc, #200]	; (8014dd4 <lv_btn_create+0x108>)
 8014d0c:	6082      	str	r2, [r0, #8]
    ext->styles[LV_BTN_STATE_TGL_REL] = &lv_style_btn_tgl_rel;
 8014d0e:	4a32      	ldr	r2, [pc, #200]	; (8014dd8 <lv_btn_create+0x10c>)
 8014d10:	60c2      	str	r2, [r0, #12]
    ext->toggle = 0;
 8014d12:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    ext->styles[LV_BTN_STATE_TGL_PR]  = &lv_style_btn_tgl_pr;
 8014d16:	4a31      	ldr	r2, [pc, #196]	; (8014ddc <lv_btn_create+0x110>)
 8014d18:	6102      	str	r2, [r0, #16]
    ext->toggle = 0;
 8014d1a:	f36f 03c3 	bfc	r3, #3, #1
    ext->styles[LV_BTN_STATE_INA]     = &lv_style_btn_ina;
 8014d1e:	4a30      	ldr	r2, [pc, #192]	; (8014de0 <lv_btn_create+0x114>)
 8014d20:	6142      	str	r2, [r0, #20]
    ext->toggle = 0;
 8014d22:	7603      	strb	r3, [r0, #24]
    lv_obj_set_signal_cb(new_btn, lv_btn_signal);
 8014d24:	492f      	ldr	r1, [pc, #188]	; (8014de4 <lv_btn_create+0x118>)
 8014d26:	4628      	mov	r0, r5
 8014d28:	f7f9 fae2 	bl	800e2f0 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_btn, lv_btn_design);
 8014d2c:	492e      	ldr	r1, [pc, #184]	; (8014de8 <lv_btn_create+0x11c>)
 8014d2e:	4628      	mov	r0, r5
 8014d30:	f7f9 fae0 	bl	800e2f4 <lv_obj_set_design_cb>
    if(copy == NULL) {
 8014d34:	bb66      	cbnz	r6, 8014d90 <lv_btn_create+0xc4>
        if(par != NULL) {
 8014d36:	b11f      	cbz	r7, 8014d40 <lv_btn_create+0x74>
 * @param btn pointer to a button object
 * @param layout a layout from 'lv_cont_layout_t'
 */
static inline void lv_btn_set_layout(lv_obj_t * btn, lv_layout_t layout)
{
    lv_cont_set_layout(btn, layout);
 8014d38:	2101      	movs	r1, #1
 8014d3a:	4628      	mov	r0, r5
 8014d3c:	f000 faf6 	bl	801532c <lv_cont_set_layout>
        lv_obj_set_click(new_btn, true); /*Be sure the button is clickable*/
 8014d40:	2101      	movs	r1, #1
 8014d42:	4628      	mov	r0, r5
 8014d44:	f7f9 fa00 	bl	800e148 <lv_obj_set_click>
        lv_theme_t * th = lv_theme_get_current();
 8014d48:	f004 f94c 	bl	8018fe4 <lv_theme_get_current>
        if(th) {
 8014d4c:	4606      	mov	r6, r0
 8014d4e:	b1d0      	cbz	r0, 8014d86 <lv_btn_create+0xba>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_REL, th->style.btn.rel);
 8014d50:	6902      	ldr	r2, [r0, #16]
 8014d52:	2100      	movs	r1, #0
 8014d54:	4628      	mov	r0, r5
 8014d56:	f7ff ff97 	bl	8014c88 <lv_btn_set_style>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_PR, th->style.btn.pr);
 8014d5a:	6972      	ldr	r2, [r6, #20]
 8014d5c:	2101      	movs	r1, #1
 8014d5e:	4628      	mov	r0, r5
 8014d60:	f7ff ff92 	bl	8014c88 <lv_btn_set_style>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_TGL_REL, th->style.btn.tgl_rel);
 8014d64:	69b2      	ldr	r2, [r6, #24]
 8014d66:	2102      	movs	r1, #2
 8014d68:	4628      	mov	r0, r5
 8014d6a:	f7ff ff8d 	bl	8014c88 <lv_btn_set_style>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_TGL_PR, th->style.btn.tgl_pr);
 8014d6e:	69f2      	ldr	r2, [r6, #28]
 8014d70:	2103      	movs	r1, #3
 8014d72:	4628      	mov	r0, r5
 8014d74:	f7ff ff88 	bl	8014c88 <lv_btn_set_style>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_INA, th->style.btn.ina);
 8014d78:	6a32      	ldr	r2, [r6, #32]
 8014d7a:	2104      	movs	r1, #4
 8014d7c:	4628      	mov	r0, r5
 8014d7e:	f7ff ff83 	bl	8014c88 <lv_btn_set_style>
}
 8014d82:	4628      	mov	r0, r5
 8014d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            lv_obj_set_style(new_btn, ext->styles[LV_BTN_STATE_REL]);
 8014d86:	6861      	ldr	r1, [r4, #4]
 8014d88:	4628      	mov	r0, r5
 8014d8a:	f7fa f847 	bl	800ee1c <lv_obj_set_style>
 8014d8e:	e7f8      	b.n	8014d82 <lv_btn_create+0xb6>
        lv_btn_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8014d90:	4630      	mov	r0, r6
 8014d92:	f7fa f95c 	bl	800f04e <lv_obj_get_ext_attr>
        ext->state              = copy_ext->state;
 8014d96:	7e23      	ldrb	r3, [r4, #24]
 8014d98:	7e02      	ldrb	r2, [r0, #24]
 8014d9a:	f362 0302 	bfi	r3, r2, #0, #3
 8014d9e:	7623      	strb	r3, [r4, #24]
        ext->toggle             = copy_ext->toggle;
 8014da0:	7e03      	ldrb	r3, [r0, #24]
 8014da2:	7e22      	ldrb	r2, [r4, #24]
 8014da4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8014da8:	f363 02c3 	bfi	r2, r3, #3, #1
 8014dac:	7622      	strb	r2, [r4, #24]
        memcpy(ext->styles, copy_ext->styles, sizeof(ext->styles));
 8014dae:	1d03      	adds	r3, r0, #4
 8014db0:	3404      	adds	r4, #4
 8014db2:	3018      	adds	r0, #24
 8014db4:	f853 2b04 	ldr.w	r2, [r3], #4
 8014db8:	f844 2b04 	str.w	r2, [r4], #4
 8014dbc:	4283      	cmp	r3, r0
 8014dbe:	d1f9      	bne.n	8014db4 <lv_btn_create+0xe8>
        lv_obj_refresh_style(new_btn);
 8014dc0:	4628      	mov	r0, r5
 8014dc2:	f7f9 ff82 	bl	800ecca <lv_obj_refresh_style>
 8014dc6:	e7dc      	b.n	8014d82 <lv_btn_create+0xb6>
 8014dc8:	2000afb4 	.word	0x2000afb4
 8014dcc:	2000afb0 	.word	0x2000afb0
 8014dd0:	2000c2bc 	.word	0x2000c2bc
 8014dd4:	2000c2f8 	.word	0x2000c2f8
 8014dd8:	2000c460 	.word	0x2000c460
 8014ddc:	2000c4d8 	.word	0x2000c4d8
 8014de0:	2000c3ac 	.word	0x2000c3ac
 8014de4:	08014e09 	.word	0x08014e09
 8014de8:	08014c3d 	.word	0x08014c3d

08014dec <lv_btn_get_state>:
{
 8014dec:	b508      	push	{r3, lr}
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8014dee:	f7fa f92e 	bl	800f04e <lv_obj_get_ext_attr>
    return ext->state;
 8014df2:	7e00      	ldrb	r0, [r0, #24]
}
 8014df4:	f000 0007 	and.w	r0, r0, #7
 8014df8:	bd08      	pop	{r3, pc}

08014dfa <lv_btn_get_toggle>:
{
 8014dfa:	b508      	push	{r3, lr}
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8014dfc:	f7fa f927 	bl	800f04e <lv_obj_get_ext_attr>
    return ext->toggle != 0 ? true : false;
 8014e00:	7e00      	ldrb	r0, [r0, #24]
}
 8014e02:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8014e06:	bd08      	pop	{r3, pc}

08014e08 <lv_btn_signal>:
static lv_res_t lv_btn_signal(lv_obj_t * btn, lv_signal_t sign, void * param)
{
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(btn, sign, param);
 8014e08:	4b52      	ldr	r3, [pc, #328]	; (8014f54 <lv_btn_signal+0x14c>)
{
 8014e0a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    res = ancestor_signal(btn, sign, param);
 8014e0e:	681b      	ldr	r3, [r3, #0]
{
 8014e10:	4604      	mov	r4, r0
 8014e12:	460e      	mov	r6, r1
 8014e14:	4617      	mov	r7, r2
    res = ancestor_signal(btn, sign, param);
 8014e16:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8014e18:	2801      	cmp	r0, #1
    res = ancestor_signal(btn, sign, param);
 8014e1a:	4605      	mov	r5, r0
    if(res != LV_RES_OK) return res;
 8014e1c:	d112      	bne.n	8014e44 <lv_btn_signal+0x3c>

    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8014e1e:	4620      	mov	r0, r4
 8014e20:	f7fa f915 	bl	800f04e <lv_obj_get_ext_attr>
 8014e24:	4681      	mov	r9, r0
    bool tgl           = lv_btn_get_toggle(btn);
 8014e26:	4620      	mov	r0, r4
 8014e28:	f7ff ffe7 	bl	8014dfa <lv_btn_get_toggle>

    if(sign == LV_SIGNAL_PRESSED) {
 8014e2c:	2e07      	cmp	r6, #7
    bool tgl           = lv_btn_get_toggle(btn);
 8014e2e:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_PRESSED) {
 8014e30:	d110      	bne.n	8014e54 <lv_btn_signal+0x4c>
        /*Refresh the state*/
        if(ext->state == LV_BTN_STATE_REL) {
 8014e32:	f899 3018 	ldrb.w	r3, [r9, #24]
 8014e36:	f013 0307 	ands.w	r3, r3, #7
 8014e3a:	d107      	bne.n	8014e4c <lv_btn_signal+0x44>
            lv_btn_set_state(btn, LV_BTN_STATE_PR);
 8014e3c:	4629      	mov	r1, r5
        }
#endif
    } else if(sign == LV_SIGNAL_PRESS_LOST) {
        /*Refresh the state*/
        if(ext->state == LV_BTN_STATE_PR)
            lv_btn_set_state(btn, LV_BTN_STATE_REL);
 8014e3e:	4620      	mov	r0, r4
 8014e40:	f7ff ff0c 	bl	8014c5c <lv_btn_set_state>
        }
        buf->type[i] = "lv_btn";
    }

    return res;
}
 8014e44:	4628      	mov	r0, r5
 8014e46:	b003      	add	sp, #12
 8014e48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        } else if(ext->state == LV_BTN_STATE_TGL_REL) {
 8014e4c:	2b02      	cmp	r3, #2
 8014e4e:	d1f9      	bne.n	8014e44 <lv_btn_signal+0x3c>
            lv_btn_set_state(btn, LV_BTN_STATE_TGL_PR);
 8014e50:	2103      	movs	r1, #3
 8014e52:	e7f4      	b.n	8014e3e <lv_btn_signal+0x36>
    } else if(sign == LV_SIGNAL_PRESS_LOST) {
 8014e54:	2e09      	cmp	r6, #9
 8014e56:	d10b      	bne.n	8014e70 <lv_btn_signal+0x68>
        if(ext->state == LV_BTN_STATE_PR)
 8014e58:	f899 3018 	ldrb.w	r3, [r9, #24]
 8014e5c:	f003 0307 	and.w	r3, r3, #7
 8014e60:	2b01      	cmp	r3, #1
 8014e62:	d101      	bne.n	8014e68 <lv_btn_signal+0x60>
            lv_btn_set_state(btn, LV_BTN_STATE_REL);
 8014e64:	2100      	movs	r1, #0
 8014e66:	e7ea      	b.n	8014e3e <lv_btn_signal+0x36>
        else if(ext->state == LV_BTN_STATE_TGL_PR)
 8014e68:	2b03      	cmp	r3, #3
 8014e6a:	d1eb      	bne.n	8014e44 <lv_btn_signal+0x3c>
                lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 8014e6c:	2102      	movs	r1, #2
 8014e6e:	e7e6      	b.n	8014e3e <lv_btn_signal+0x36>
    } else if(sign == LV_SIGNAL_PRESSING) {
 8014e70:	2e08      	cmp	r6, #8
 8014e72:	d105      	bne.n	8014e80 <lv_btn_signal+0x78>
        if(lv_indev_is_dragging(param) != false) {
 8014e74:	4638      	mov	r0, r7
 8014e76:	f7f9 f8e4 	bl	800e042 <lv_indev_is_dragging>
 8014e7a:	2800      	cmp	r0, #0
 8014e7c:	d1ec      	bne.n	8014e58 <lv_btn_signal+0x50>
 8014e7e:	e7e1      	b.n	8014e44 <lv_btn_signal+0x3c>
    } else if(sign == LV_SIGNAL_RELEASED) {
 8014e80:	2e0a      	cmp	r6, #10
 8014e82:	d12c      	bne.n	8014ede <lv_btn_signal+0xd6>
        if(lv_indev_is_dragging(param) == false) {
 8014e84:	4638      	mov	r0, r7
 8014e86:	f7f9 f8dc 	bl	800e042 <lv_indev_is_dragging>
 8014e8a:	f899 3018 	ldrb.w	r3, [r9, #24]
 8014e8e:	4606      	mov	r6, r0
 8014e90:	2800      	cmp	r0, #0
 8014e92:	d1e3      	bne.n	8014e5c <lv_btn_signal+0x54>
            if(ext->state == LV_BTN_STATE_PR && tgl == false) {
 8014e94:	f003 0307 	and.w	r3, r3, #7
 8014e98:	2b01      	cmp	r3, #1
            uint32_t toggled = 0;
 8014e9a:	9001      	str	r0, [sp, #4]
            if(ext->state == LV_BTN_STATE_PR && tgl == false) {
 8014e9c:	d110      	bne.n	8014ec0 <lv_btn_signal+0xb8>
 8014e9e:	f1b8 0f00 	cmp.w	r8, #0
 8014ea2:	d0df      	beq.n	8014e64 <lv_btn_signal+0x5c>
                lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 8014ea4:	2102      	movs	r1, #2
 8014ea6:	4620      	mov	r0, r4
 8014ea8:	f7ff fed8 	bl	8014c5c <lv_btn_set_state>
                toggled = 1;
 8014eac:	9501      	str	r5, [sp, #4]
                res = lv_event_send(btn, LV_EVENT_VALUE_CHANGED, &toggled);
 8014eae:	aa01      	add	r2, sp, #4
 8014eb0:	210e      	movs	r1, #14
 8014eb2:	4620      	mov	r0, r4
 8014eb4:	f7f9 f9b8 	bl	800e228 <lv_event_send>
                if(res != LV_RES_OK) return res;
 8014eb8:	2801      	cmp	r0, #1
 8014eba:	bf18      	it	ne
 8014ebc:	4605      	movne	r5, r0
 8014ebe:	e7c1      	b.n	8014e44 <lv_btn_signal+0x3c>
            } else if(ext->state == LV_BTN_STATE_TGL_PR && tgl == false) {
 8014ec0:	2b03      	cmp	r3, #3
 8014ec2:	d108      	bne.n	8014ed6 <lv_btn_signal+0xce>
 8014ec4:	f1b8 0f00 	cmp.w	r8, #0
 8014ec8:	d0d0      	beq.n	8014e6c <lv_btn_signal+0x64>
                lv_btn_set_state(btn, LV_BTN_STATE_REL);
 8014eca:	4601      	mov	r1, r0
 8014ecc:	4620      	mov	r0, r4
 8014ece:	f7ff fec5 	bl	8014c5c <lv_btn_set_state>
                toggled = 0;
 8014ed2:	9601      	str	r6, [sp, #4]
 8014ed4:	e7eb      	b.n	8014eae <lv_btn_signal+0xa6>
            if(tgl) {
 8014ed6:	f1b8 0f00 	cmp.w	r8, #0
 8014eda:	d0b3      	beq.n	8014e44 <lv_btn_signal+0x3c>
 8014edc:	e7e7      	b.n	8014eae <lv_btn_signal+0xa6>
    } else if(sign == LV_SIGNAL_CONTROL) {
 8014ede:	2e11      	cmp	r6, #17
 8014ee0:	d128      	bne.n	8014f34 <lv_btn_signal+0x12c>
        char c = *((char *)param);
 8014ee2:	783b      	ldrb	r3, [r7, #0]
        if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 8014ee4:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 8014ee8:	2a11      	cmp	r2, #17
 8014eea:	d111      	bne.n	8014f10 <lv_btn_signal+0x108>
            if(lv_btn_get_toggle(btn)) {
 8014eec:	4620      	mov	r0, r4
 8014eee:	f7ff ff84 	bl	8014dfa <lv_btn_get_toggle>
 8014ef2:	2800      	cmp	r0, #0
 8014ef4:	d0a6      	beq.n	8014e44 <lv_btn_signal+0x3c>
                lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 8014ef6:	2102      	movs	r1, #2
 8014ef8:	4620      	mov	r0, r4
 8014efa:	f7ff feaf 	bl	8014c5c <lv_btn_set_state>
                uint32_t state = 1;
 8014efe:	aa02      	add	r2, sp, #8
 8014f00:	f842 5d04 	str.w	r5, [r2, #-4]!
                res            = lv_event_send(btn, LV_EVENT_VALUE_CHANGED, &state);
 8014f04:	210e      	movs	r1, #14
 8014f06:	4620      	mov	r0, r4
 8014f08:	f7f9 f98e 	bl	800e228 <lv_event_send>
 8014f0c:	4605      	mov	r5, r0
 8014f0e:	e799      	b.n	8014e44 <lv_btn_signal+0x3c>
        } else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 8014f10:	2b14      	cmp	r3, #20
 8014f12:	d001      	beq.n	8014f18 <lv_btn_signal+0x110>
 8014f14:	2b12      	cmp	r3, #18
 8014f16:	d195      	bne.n	8014e44 <lv_btn_signal+0x3c>
            if(lv_btn_get_toggle(btn)) {
 8014f18:	4620      	mov	r0, r4
 8014f1a:	f7ff ff6e 	bl	8014dfa <lv_btn_get_toggle>
 8014f1e:	2800      	cmp	r0, #0
 8014f20:	d090      	beq.n	8014e44 <lv_btn_signal+0x3c>
                lv_btn_set_state(btn, LV_BTN_STATE_REL);
 8014f22:	2100      	movs	r1, #0
 8014f24:	4620      	mov	r0, r4
 8014f26:	f7ff fe99 	bl	8014c5c <lv_btn_set_state>
                uint32_t state = 0;
 8014f2a:	aa02      	add	r2, sp, #8
 8014f2c:	2300      	movs	r3, #0
 8014f2e:	f842 3d04 	str.w	r3, [r2, #-4]!
 8014f32:	e7e7      	b.n	8014f04 <lv_btn_signal+0xfc>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8014f34:	2e06      	cmp	r6, #6
 8014f36:	d185      	bne.n	8014e44 <lv_btn_signal+0x3c>
 8014f38:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 8014f3a:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 8014f3e:	b2da      	uxtb	r2, r3
 8014f40:	b119      	cbz	r1, 8014f4a <lv_btn_signal+0x142>
 8014f42:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8014f44:	2b07      	cmp	r3, #7
 8014f46:	d1f8      	bne.n	8014f3a <lv_btn_signal+0x132>
 8014f48:	461a      	mov	r2, r3
        buf->type[i] = "lv_btn";
 8014f4a:	4b03      	ldr	r3, [pc, #12]	; (8014f58 <lv_btn_signal+0x150>)
 8014f4c:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
 8014f50:	e778      	b.n	8014e44 <lv_btn_signal+0x3c>
 8014f52:	bf00      	nop
 8014f54:	2000afb4 	.word	0x2000afb4
 8014f58:	080d89dd 	.word	0x080d89dd

08014f5c <lv_btn_get_style>:
{
 8014f5c:	b570      	push	{r4, r5, r6, lr}
 8014f5e:	4606      	mov	r6, r0
 8014f60:	460d      	mov	r5, r1
    lv_btn_ext_t * ext       = lv_obj_get_ext_attr(btn);
 8014f62:	f7fa f874 	bl	800f04e <lv_obj_get_ext_attr>
 8014f66:	4604      	mov	r4, r0
    lv_btn_state_t state     = lv_btn_get_state(btn);
 8014f68:	4630      	mov	r0, r6
 8014f6a:	f7ff ff3f 	bl	8014dec <lv_btn_get_state>
    if((type == LV_BTN_STYLE_REL && state == LV_BTN_STATE_REL) ||
 8014f6e:	b92d      	cbnz	r5, 8014f7c <lv_btn_get_style+0x20>
 8014f70:	b9e0      	cbnz	r0, 8014fac <lv_btn_get_style+0x50>
        style = lv_obj_get_style(btn);
 8014f72:	4630      	mov	r0, r6
}
 8014f74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        style = lv_obj_get_style(btn);
 8014f78:	f7f9 bf7e 	b.w	800ee78 <lv_obj_get_style>
    if((type == LV_BTN_STYLE_REL && state == LV_BTN_STATE_REL) ||
 8014f7c:	2d01      	cmp	r5, #1
 8014f7e:	d103      	bne.n	8014f88 <lv_btn_get_style+0x2c>
       (type == LV_BTN_STYLE_PR && state == LV_BTN_STATE_PR) ||
 8014f80:	2801      	cmp	r0, #1
 8014f82:	d0f6      	beq.n	8014f72 <lv_btn_get_style+0x16>
            case LV_BTN_STYLE_PR: style = ext->styles[LV_BTN_STATE_PR]; break;
 8014f84:	68a0      	ldr	r0, [r4, #8]
 8014f86:	bd70      	pop	{r4, r5, r6, pc}
       (type == LV_BTN_STYLE_PR && state == LV_BTN_STATE_PR) ||
 8014f88:	2d02      	cmp	r5, #2
 8014f8a:	d103      	bne.n	8014f94 <lv_btn_get_style+0x38>
       (type == LV_BTN_STYLE_TGL_REL && state == LV_BTN_STATE_TGL_REL) ||
 8014f8c:	2802      	cmp	r0, #2
 8014f8e:	d0f0      	beq.n	8014f72 <lv_btn_get_style+0x16>
            case LV_BTN_STYLE_TGL_REL: style = ext->styles[LV_BTN_STATE_TGL_REL]; break;
 8014f90:	68e0      	ldr	r0, [r4, #12]
 8014f92:	bd70      	pop	{r4, r5, r6, pc}
       (type == LV_BTN_STYLE_TGL_REL && state == LV_BTN_STATE_TGL_REL) ||
 8014f94:	2d03      	cmp	r5, #3
 8014f96:	d103      	bne.n	8014fa0 <lv_btn_get_style+0x44>
       (type == LV_BTN_STYLE_TGL_PR && state == LV_BTN_STATE_TGL_PR) ||
 8014f98:	2803      	cmp	r0, #3
 8014f9a:	d0ea      	beq.n	8014f72 <lv_btn_get_style+0x16>
            case LV_BTN_STYLE_TGL_PR: style = ext->styles[LV_BTN_STATE_TGL_PR]; break;
 8014f9c:	6920      	ldr	r0, [r4, #16]
 8014f9e:	bd70      	pop	{r4, r5, r6, pc}
       (type == LV_BTN_STYLE_TGL_PR && state == LV_BTN_STATE_TGL_PR) ||
 8014fa0:	2d04      	cmp	r5, #4
 8014fa2:	d105      	bne.n	8014fb0 <lv_btn_get_style+0x54>
       (type == LV_BTN_STYLE_INA && state == LV_BTN_STATE_INA)) {
 8014fa4:	2804      	cmp	r0, #4
 8014fa6:	d0e4      	beq.n	8014f72 <lv_btn_get_style+0x16>
            case LV_BTN_STYLE_INA: style = ext->styles[LV_BTN_STATE_INA]; break;
 8014fa8:	6960      	ldr	r0, [r4, #20]
 8014faa:	bd70      	pop	{r4, r5, r6, pc}
            case LV_BTN_STYLE_REL: style = ext->styles[LV_BTN_STATE_REL]; break;
 8014fac:	6860      	ldr	r0, [r4, #4]
 8014fae:	bd70      	pop	{r4, r5, r6, pc}
            default: style = NULL; break;
 8014fb0:	2000      	movs	r0, #0
}
 8014fb2:	bd70      	pop	{r4, r5, r6, pc}

08014fb4 <lv_cont_refr_autofit>:
/**
 * Handle auto fit. Set the size of the object to involve all children.
 * @param cont pointer to an object which size will be modified
 */
static void lv_cont_refr_autofit(lv_obj_t * cont)
{
 8014fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fb8:	b08d      	sub	sp, #52	; 0x34
 8014fba:	4604      	mov	r4, r0
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 8014fbc:	f7fa f847 	bl	800f04e <lv_obj_get_ext_attr>

    if(ext->fit_left == LV_FIT_NONE && ext->fit_right == LV_FIT_NONE && ext->fit_top == LV_FIT_NONE &&
 8014fc0:	7803      	ldrb	r3, [r0, #0]
 8014fc2:	f013 0ff0 	tst.w	r3, #240	; 0xf0
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 8014fc6:	4682      	mov	sl, r0
    if(ext->fit_left == LV_FIT_NONE && ext->fit_right == LV_FIT_NONE && ext->fit_top == LV_FIT_NONE &&
 8014fc8:	d103      	bne.n	8014fd2 <lv_cont_refr_autofit+0x1e>
 8014fca:	7843      	ldrb	r3, [r0, #1]
 8014fcc:	071b      	lsls	r3, r3, #28
 8014fce:	f000 80e8 	beq.w	80151a2 <lv_cont_refr_autofit+0x1ee>
        return;
    }

    lv_area_t tight_area;
    lv_area_t ori;
    const lv_style_t * style = lv_obj_get_style(cont);
 8014fd2:	4620      	mov	r0, r4
 8014fd4:	f7f9 ff50 	bl	800ee78 <lv_obj_get_style>
 8014fd8:	4683      	mov	fp, r0
    lv_obj_t * child_i;

    lv_obj_t * par               = lv_obj_get_parent(cont);
 8014fda:	4620      	mov	r0, r4
 8014fdc:	f7f9 fefa 	bl	800edd4 <lv_obj_get_parent>
 8014fe0:	9002      	str	r0, [sp, #8]
    const lv_style_t * par_style = lv_obj_get_style(par);
 8014fe2:	f7f9 ff49 	bl	800ee78 <lv_obj_get_style>
    memcpy(dest, src, sizeof(lv_area_t));
 8014fe6:	9902      	ldr	r1, [sp, #8]
 8014fe8:	4603      	mov	r3, r0
 8014fea:	f851 0f10 	ldr.w	r0, [r1, #16]!
 8014fee:	6849      	ldr	r1, [r1, #4]
 8014ff0:	aa08      	add	r2, sp, #32
 8014ff2:	c203      	stmia	r2!, {r0, r1}
    lv_area_t flood_area;
    lv_area_copy(&flood_area, &par->coords);
    flood_area.x1 += par_style->body.padding.left;
 8014ff4:	8b5a      	ldrh	r2, [r3, #26]
 8014ff6:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    flood_area.x2 -= par_style->body.padding.right;
 8014ffa:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
    flood_area.y1 += par_style->body.padding.top;
 8014ffe:	f8bd 6022 	ldrh.w	r6, [sp, #34]	; 0x22
    flood_area.y2 -= par_style->body.padding.bottom;
 8015002:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
    flood_area.x1 += par_style->body.padding.left;
 8015006:	4490      	add	r8, r2
    flood_area.x2 -= par_style->body.padding.right;
 8015008:	8b9a      	ldrh	r2, [r3, #28]
 801500a:	1abf      	subs	r7, r7, r2
    flood_area.y1 += par_style->body.padding.top;
 801500c:	8ada      	ldrh	r2, [r3, #22]
    flood_area.y2 -= par_style->body.padding.bottom;
 801500e:	8b1b      	ldrh	r3, [r3, #24]
    flood_area.y1 += par_style->body.padding.top;
 8015010:	4416      	add	r6, r2
    flood_area.y2 -= par_style->body.padding.bottom;
 8015012:	1aed      	subs	r5, r5, r3

    /*Search the side coordinates of the children*/
    lv_obj_get_coords(cont, &ori);
 8015014:	a906      	add	r1, sp, #24
 8015016:	4620      	mov	r0, r4
    flood_area.x1 += par_style->body.padding.left;
 8015018:	fa0f f888 	sxth.w	r8, r8
    flood_area.x2 -= par_style->body.padding.right;
 801501c:	b23f      	sxth	r7, r7
    flood_area.y1 += par_style->body.padding.top;
 801501e:	b236      	sxth	r6, r6
    flood_area.y2 -= par_style->body.padding.bottom;
 8015020:	b22d      	sxth	r5, r5
    flood_area.x1 += par_style->body.padding.left;
 8015022:	f8ad 8020 	strh.w	r8, [sp, #32]
    flood_area.x2 -= par_style->body.padding.right;
 8015026:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
    flood_area.y1 += par_style->body.padding.top;
 801502a:	f8ad 6022 	strh.w	r6, [sp, #34]	; 0x22
    flood_area.y2 -= par_style->body.padding.bottom;
 801502e:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
    lv_obj_get_coords(cont, &tight_area);

    bool has_children = lv_ll_is_empty(&cont->child_ll) ? false : true;
 8015032:	f104 0904 	add.w	r9, r4, #4
    lv_obj_get_coords(cont, &ori);
 8015036:	f7f9 fefb 	bl	800ee30 <lv_obj_get_coords>
    lv_obj_get_coords(cont, &tight_area);
 801503a:	a904      	add	r1, sp, #16
 801503c:	4620      	mov	r0, r4
 801503e:	f7f9 fef7 	bl	800ee30 <lv_obj_get_coords>
    bool has_children = lv_ll_is_empty(&cont->child_ll) ? false : true;
 8015042:	4648      	mov	r0, r9
 8015044:	f7fe fef9 	bl	8013e3a <lv_ll_is_empty>
 8015048:	f080 0001 	eor.w	r0, r0, #1

    if(has_children) {
 801504c:	f010 03ff 	ands.w	r3, r0, #255	; 0xff
 8015050:	9301      	str	r3, [sp, #4]
 8015052:	d02e      	beq.n	80150b2 <lv_cont_refr_autofit+0xfe>
        tight_area.x1 = LV_COORD_MAX;
 8015054:	f647 4318 	movw	r3, #31768	; 0x7c18
 8015058:	f8ad 3010 	strh.w	r3, [sp, #16]
        tight_area.y1 = LV_COORD_MAX;
 801505c:	f8ad 3012 	strh.w	r3, [sp, #18]
        tight_area.x2 = LV_COORD_MIN;
        tight_area.y2 = LV_COORD_MIN;

        LV_LL_READ(cont->child_ll, child_i)
 8015060:	4648      	mov	r0, r9
        tight_area.x2 = LV_COORD_MIN;
 8015062:	f248 33e8 	movw	r3, #33768	; 0x83e8
 8015066:	f8ad 3014 	strh.w	r3, [sp, #20]
        tight_area.y2 = LV_COORD_MIN;
 801506a:	f8ad 3016 	strh.w	r3, [sp, #22]
        LV_LL_READ(cont->child_ll, child_i)
 801506e:	f7fe fdef 	bl	8013c50 <lv_ll_get_head>
 8015072:	4601      	mov	r1, r0
 8015074:	2800      	cmp	r0, #0
 8015076:	f040 8097 	bne.w	80151a8 <lv_cont_refr_autofit+0x1f4>
            tight_area.y1 = LV_MATH_MIN(tight_area.y1, child_i->coords.y1);
            tight_area.x2 = LV_MATH_MAX(tight_area.x2, child_i->coords.x2);
            tight_area.y2 = LV_MATH_MAX(tight_area.y2, child_i->coords.y2);
        }

        tight_area.x1 -= style->body.padding.left;
 801507a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801507e:	f8bb 201a 	ldrh.w	r2, [fp, #26]
 8015082:	1a9b      	subs	r3, r3, r2
 8015084:	f8ad 3010 	strh.w	r3, [sp, #16]
        tight_area.x2 += style->body.padding.right;
 8015088:	f8bb 201c 	ldrh.w	r2, [fp, #28]
 801508c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8015090:	4413      	add	r3, r2
 8015092:	f8ad 3014 	strh.w	r3, [sp, #20]
        tight_area.y1 -= style->body.padding.top;
 8015096:	f8bb 2016 	ldrh.w	r2, [fp, #22]
 801509a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801509e:	1a9b      	subs	r3, r3, r2
 80150a0:	f8ad 3012 	strh.w	r3, [sp, #18]
        tight_area.y2 += style->body.padding.bottom;
 80150a4:	f8bb 2018 	ldrh.w	r2, [fp, #24]
 80150a8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80150ac:	4413      	add	r3, r2
 80150ae:	f8ad 3016 	strh.w	r3, [sp, #22]
 80150b2:	ab06      	add	r3, sp, #24
 80150b4:	e893 0003 	ldmia.w	r3, {r0, r1}
    }

    lv_area_t new_area;
    lv_area_copy(&new_area, &ori);

    switch(ext->fit_left) {
 80150b8:	f89a 3000 	ldrb.w	r3, [sl]
 80150bc:	f3c3 1201 	ubfx	r2, r3, #4, #2
 80150c0:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
 80150c4:	2a02      	cmp	r2, #2
 80150c6:	e88b 0003 	stmia.w	fp, {r0, r1}
 80150ca:	f000 80a2 	beq.w	8015212 <lv_cont_refr_autofit+0x25e>
 80150ce:	f200 8099 	bhi.w	8015204 <lv_cont_refr_autofit+0x250>
 80150d2:	2a01      	cmp	r2, #1
 80150d4:	d103      	bne.n	80150de <lv_cont_refr_autofit+0x12a>
        case LV_FIT_TIGHT: new_area.x1 = tight_area.x1; break;
 80150d6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80150da:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
        case LV_FIT_FLOOD: new_area.x1 = flood_area.x1; break;
        case LV_FIT_FILL: new_area.x1 = has_children ? LV_MATH_MIN(tight_area.x1, flood_area.x1) : flood_area.x1; break;
        default: break;
    }

    switch(ext->fit_right) {
 80150de:	099b      	lsrs	r3, r3, #6
 80150e0:	2b02      	cmp	r3, #2
 80150e2:	f000 80a0 	beq.w	8015226 <lv_cont_refr_autofit+0x272>
 80150e6:	f200 8097 	bhi.w	8015218 <lv_cont_refr_autofit+0x264>
 80150ea:	2b01      	cmp	r3, #1
 80150ec:	d103      	bne.n	80150f6 <lv_cont_refr_autofit+0x142>
        case LV_FIT_TIGHT: new_area.x2 = tight_area.x2; break;
 80150ee:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80150f2:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
        case LV_FIT_FLOOD: new_area.x2 = flood_area.x2; break;
        case LV_FIT_FILL: new_area.x2 = has_children ? LV_MATH_MAX(tight_area.x2, flood_area.x2) : flood_area.x2; break;
        default: break;
    }

    switch(ext->fit_top) {
 80150f6:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80150fa:	f003 0203 	and.w	r2, r3, #3
 80150fe:	2a02      	cmp	r2, #2
 8015100:	f000 809b 	beq.w	801523a <lv_cont_refr_autofit+0x286>
 8015104:	f200 8092 	bhi.w	801522c <lv_cont_refr_autofit+0x278>
 8015108:	2a01      	cmp	r2, #1
 801510a:	d103      	bne.n	8015114 <lv_cont_refr_autofit+0x160>
        case LV_FIT_TIGHT: new_area.y1 = tight_area.y1; break;
 801510c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8015110:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
        case LV_FIT_FLOOD: new_area.y1 = flood_area.y1; break;
        case LV_FIT_FILL: new_area.y1 = has_children ? LV_MATH_MIN(tight_area.y1, flood_area.y1) : flood_area.y1; break;
        default: break;
    }

    switch(ext->fit_bottom) {
 8015114:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8015118:	2b02      	cmp	r3, #2
 801511a:	f000 8098 	beq.w	801524e <lv_cont_refr_autofit+0x29a>
 801511e:	f200 808f 	bhi.w	8015240 <lv_cont_refr_autofit+0x28c>
 8015122:	2b01      	cmp	r3, #1
 8015124:	d103      	bne.n	801512e <lv_cont_refr_autofit+0x17a>
        case LV_FIT_TIGHT: new_area.y2 = tight_area.y2; break;
 8015126:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801512a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
        case LV_FIT_FILL: new_area.y2 = has_children ? LV_MATH_MAX(tight_area.y2, flood_area.y2) : flood_area.y2; break;
        default: break;
    }

    /*Do nothing if the coordinates are not changed*/
    if(cont->coords.x1 != new_area.x1 || cont->coords.y1 != new_area.y1 || cont->coords.x2 != new_area.x2 ||
 801512e:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 8015132:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8015136:	429a      	cmp	r2, r3
 8015138:	d111      	bne.n	801515e <lv_cont_refr_autofit+0x1aa>
 801513a:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 801513e:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8015142:	429a      	cmp	r2, r3
 8015144:	d10b      	bne.n	801515e <lv_cont_refr_autofit+0x1aa>
 8015146:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 801514a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 801514e:	429a      	cmp	r2, r3
 8015150:	d105      	bne.n	801515e <lv_cont_refr_autofit+0x1aa>
 8015152:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 8015156:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 801515a:	429a      	cmp	r2, r3
 801515c:	d021      	beq.n	80151a2 <lv_cont_refr_autofit+0x1ee>
       cont->coords.y2 != new_area.y2) {

        lv_obj_invalidate(cont);
 801515e:	4620      	mov	r0, r4
 8015160:	f7f9 f8f8 	bl	800e354 <lv_obj_invalidate>
 8015164:	465b      	mov	r3, fp
 8015166:	cb03      	ldmia	r3!, {r0, r1}
 8015168:	6120      	str	r0, [r4, #16]
 801516a:	6161      	str	r1, [r4, #20]
        lv_area_copy(&cont->coords, &new_area);
        lv_obj_invalidate(cont);
 801516c:	4620      	mov	r0, r4
 801516e:	f7f9 f8f1 	bl	800e354 <lv_obj_invalidate>

        /*Notify the object about its new coordinates*/
        cont->signal_cb(cont, LV_SIGNAL_CORD_CHG, &ori);
 8015172:	69e3      	ldr	r3, [r4, #28]
 8015174:	aa06      	add	r2, sp, #24
 8015176:	2102      	movs	r1, #2
 8015178:	4620      	mov	r0, r4
 801517a:	4798      	blx	r3

        /*Inform the parent about the new coordinates*/
        par->signal_cb(par, LV_SIGNAL_CHILD_CHG, cont);
 801517c:	9b02      	ldr	r3, [sp, #8]
 801517e:	9802      	ldr	r0, [sp, #8]
 8015180:	69db      	ldr	r3, [r3, #28]
 8015182:	4622      	mov	r2, r4
 8015184:	2101      	movs	r1, #1
 8015186:	4798      	blx	r3

        if(lv_obj_get_auto_realign(cont)) {
 8015188:	4620      	mov	r0, r4
 801518a:	f7f9 fe6f 	bl	800ee6c <lv_obj_get_auto_realign>
 801518e:	b110      	cbz	r0, 8015196 <lv_cont_refr_autofit+0x1e2>
            lv_obj_realign(cont);
 8015190:	4620      	mov	r0, r4
 8015192:	f7f9 fbad 	bl	800e8f0 <lv_obj_realign>
        }

        /*Tell the children the parent's size has changed*/
        LV_LL_READ(cont->child_ll, child_i)
 8015196:	4648      	mov	r0, r9
 8015198:	f7fe fd5a 	bl	8013c50 <lv_ll_get_head>
 801519c:	4604      	mov	r4, r0
 801519e:	2800      	cmp	r0, #0
 80151a0:	d158      	bne.n	8015254 <lv_cont_refr_autofit+0x2a0>
        {
            child_i->signal_cb(child_i, LV_SIGNAL_PARENT_SIZE_CHG, NULL);
        }
    }
}
 80151a2:	b00d      	add	sp, #52	; 0x34
 80151a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(lv_obj_get_hidden(child_i) != false) continue;
 80151a8:	4608      	mov	r0, r1
 80151aa:	9103      	str	r1, [sp, #12]
 80151ac:	f7f9 fee2 	bl	800ef74 <lv_obj_get_hidden>
 80151b0:	9903      	ldr	r1, [sp, #12]
 80151b2:	bb18      	cbnz	r0, 80151fc <lv_cont_refr_autofit+0x248>
            tight_area.x1 = LV_MATH_MIN(tight_area.x1, child_i->coords.x1);
 80151b4:	f9b1 3010 	ldrsh.w	r3, [r1, #16]
 80151b8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80151bc:	4293      	cmp	r3, r2
 80151be:	bfa8      	it	ge
 80151c0:	4613      	movge	r3, r2
 80151c2:	f8ad 3010 	strh.w	r3, [sp, #16]
            tight_area.y1 = LV_MATH_MIN(tight_area.y1, child_i->coords.y1);
 80151c6:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 80151ca:	f9b1 3012 	ldrsh.w	r3, [r1, #18]
 80151ce:	4293      	cmp	r3, r2
 80151d0:	bfa8      	it	ge
 80151d2:	4613      	movge	r3, r2
 80151d4:	f8ad 3012 	strh.w	r3, [sp, #18]
            tight_area.x2 = LV_MATH_MAX(tight_area.x2, child_i->coords.x2);
 80151d8:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 80151dc:	f9b1 3014 	ldrsh.w	r3, [r1, #20]
 80151e0:	4293      	cmp	r3, r2
 80151e2:	bfb8      	it	lt
 80151e4:	4613      	movlt	r3, r2
 80151e6:	f8ad 3014 	strh.w	r3, [sp, #20]
            tight_area.y2 = LV_MATH_MAX(tight_area.y2, child_i->coords.y2);
 80151ea:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 80151ee:	f9b1 3016 	ldrsh.w	r3, [r1, #22]
 80151f2:	4293      	cmp	r3, r2
 80151f4:	bfb8      	it	lt
 80151f6:	4613      	movlt	r3, r2
 80151f8:	f8ad 3016 	strh.w	r3, [sp, #22]
        LV_LL_READ(cont->child_ll, child_i)
 80151fc:	4648      	mov	r0, r9
 80151fe:	f7fe fd2d 	bl	8013c5c <lv_ll_get_next>
 8015202:	e736      	b.n	8015072 <lv_cont_refr_autofit+0xbe>
        case LV_FIT_FILL: new_area.x1 = has_children ? LV_MATH_MIN(tight_area.x1, flood_area.x1) : flood_area.x1; break;
 8015204:	9a01      	ldr	r2, [sp, #4]
 8015206:	b122      	cbz	r2, 8015212 <lv_cont_refr_autofit+0x25e>
 8015208:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801520c:	4590      	cmp	r8, r2
 801520e:	bfa8      	it	ge
 8015210:	4690      	movge	r8, r2
 8015212:	f8ad 8028 	strh.w	r8, [sp, #40]	; 0x28
 8015216:	e762      	b.n	80150de <lv_cont_refr_autofit+0x12a>
        case LV_FIT_FILL: new_area.x2 = has_children ? LV_MATH_MAX(tight_area.x2, flood_area.x2) : flood_area.x2; break;
 8015218:	9b01      	ldr	r3, [sp, #4]
 801521a:	b123      	cbz	r3, 8015226 <lv_cont_refr_autofit+0x272>
 801521c:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8015220:	429f      	cmp	r7, r3
 8015222:	bfb8      	it	lt
 8015224:	461f      	movlt	r7, r3
 8015226:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
 801522a:	e764      	b.n	80150f6 <lv_cont_refr_autofit+0x142>
        case LV_FIT_FILL: new_area.y1 = has_children ? LV_MATH_MIN(tight_area.y1, flood_area.y1) : flood_area.y1; break;
 801522c:	9a01      	ldr	r2, [sp, #4]
 801522e:	b122      	cbz	r2, 801523a <lv_cont_refr_autofit+0x286>
 8015230:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 8015234:	4296      	cmp	r6, r2
 8015236:	bfa8      	it	ge
 8015238:	4616      	movge	r6, r2
 801523a:	f8ad 602a 	strh.w	r6, [sp, #42]	; 0x2a
 801523e:	e769      	b.n	8015114 <lv_cont_refr_autofit+0x160>
        case LV_FIT_FILL: new_area.y2 = has_children ? LV_MATH_MAX(tight_area.y2, flood_area.y2) : flood_area.y2; break;
 8015240:	9b01      	ldr	r3, [sp, #4]
 8015242:	b123      	cbz	r3, 801524e <lv_cont_refr_autofit+0x29a>
 8015244:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8015248:	429d      	cmp	r5, r3
 801524a:	bfb8      	it	lt
 801524c:	461d      	movlt	r5, r3
 801524e:	f8ad 502e 	strh.w	r5, [sp, #46]	; 0x2e
 8015252:	e76c      	b.n	801512e <lv_cont_refr_autofit+0x17a>
            child_i->signal_cb(child_i, LV_SIGNAL_PARENT_SIZE_CHG, NULL);
 8015254:	69e3      	ldr	r3, [r4, #28]
 8015256:	2200      	movs	r2, #0
 8015258:	2103      	movs	r1, #3
 801525a:	4620      	mov	r0, r4
 801525c:	4798      	blx	r3
        LV_LL_READ(cont->child_ll, child_i)
 801525e:	4621      	mov	r1, r4
 8015260:	4648      	mov	r0, r9
 8015262:	f7fe fcfb 	bl	8013c5c <lv_ll_get_next>
 8015266:	e799      	b.n	801519c <lv_cont_refr_autofit+0x1e8>

08015268 <lv_cont_create>:
{
 8015268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801526a:	4607      	mov	r7, r0
 801526c:	460e      	mov	r6, r1
    lv_obj_t * new_cont = lv_obj_create(par, copy);
 801526e:	f7f9 fb55 	bl	800e91c <lv_obj_create>
    lv_mem_assert(new_cont);
 8015272:	4605      	mov	r5, r0
 8015274:	b900      	cbnz	r0, 8015278 <lv_cont_create+0x10>
 8015276:	e7fe      	b.n	8015276 <lv_cont_create+0xe>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_cont);
 8015278:	4c29      	ldr	r4, [pc, #164]	; (8015320 <lv_cont_create+0xb8>)
 801527a:	6823      	ldr	r3, [r4, #0]
 801527c:	b913      	cbnz	r3, 8015284 <lv_cont_create+0x1c>
 801527e:	f7f9 fee2 	bl	800f046 <lv_obj_get_signal_cb>
 8015282:	6020      	str	r0, [r4, #0]
    lv_obj_allocate_ext_attr(new_cont, sizeof(lv_cont_ext_t));
 8015284:	2102      	movs	r1, #2
 8015286:	4628      	mov	r0, r5
 8015288:	f7f9 f836 	bl	800e2f8 <lv_obj_allocate_ext_attr>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(new_cont);
 801528c:	4628      	mov	r0, r5
 801528e:	f7f9 fede 	bl	800f04e <lv_obj_get_ext_attr>
    if(ext == NULL) return NULL;
 8015292:	4604      	mov	r4, r0
 8015294:	2800      	cmp	r0, #0
 8015296:	d041      	beq.n	801531c <lv_cont_create+0xb4>
    ext->fit_left   = LV_FIT_NONE;
 8015298:	7803      	ldrb	r3, [r0, #0]
    ext->fit_top    = LV_FIT_NONE;
 801529a:	7842      	ldrb	r2, [r0, #1]
    lv_obj_set_signal_cb(new_cont, lv_cont_signal);
 801529c:	4921      	ldr	r1, [pc, #132]	; (8015324 <lv_cont_create+0xbc>)
    ext->fit_bottom = LV_FIT_NONE;
 801529e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    ext->layout     = LV_LAYOUT_OFF;
 80152a2:	f003 030f 	and.w	r3, r3, #15
    ext->fit_bottom = LV_FIT_NONE;
 80152a6:	f36f 0283 	bfc	r2, #2, #2
    ext->layout     = LV_LAYOUT_OFF;
 80152aa:	f36f 0303 	bfc	r3, #0, #4
    ext->fit_bottom = LV_FIT_NONE;
 80152ae:	7042      	strb	r2, [r0, #1]
    ext->layout     = LV_LAYOUT_OFF;
 80152b0:	7003      	strb	r3, [r0, #0]
    lv_obj_set_signal_cb(new_cont, lv_cont_signal);
 80152b2:	4628      	mov	r0, r5
 80152b4:	f7f9 f81c 	bl	800e2f0 <lv_obj_set_signal_cb>
    if(copy == NULL) {
 80152b8:	b95e      	cbnz	r6, 80152d2 <lv_cont_create+0x6a>
        if(par != NULL) {
 80152ba:	b137      	cbz	r7, 80152ca <lv_cont_create+0x62>
            lv_theme_t * th = lv_theme_get_current();
 80152bc:	f003 fe92 	bl	8018fe4 <lv_theme_get_current>
            if(th) {
 80152c0:	b128      	cbz	r0, 80152ce <lv_cont_create+0x66>
 * @param style pointer to the new style
 */
static inline void lv_cont_set_style(lv_obj_t * cont, lv_cont_style_t type, const lv_style_t * style)
{
    (void)type; /*Unused*/
    lv_obj_set_style(cont, style);
 80152c2:	68c1      	ldr	r1, [r0, #12]
 80152c4:	4628      	mov	r0, r5
 80152c6:	f7f9 fda9 	bl	800ee1c <lv_obj_set_style>
}
 80152ca:	4628      	mov	r0, r5
 80152cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80152ce:	4916      	ldr	r1, [pc, #88]	; (8015328 <lv_cont_create+0xc0>)
 80152d0:	e7f8      	b.n	80152c4 <lv_cont_create+0x5c>
        lv_cont_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 80152d2:	4630      	mov	r0, r6
 80152d4:	f7f9 febb 	bl	800f04e <lv_obj_get_ext_attr>
        ext->fit_left            = copy_ext->fit_left;
 80152d8:	7803      	ldrb	r3, [r0, #0]
 80152da:	7822      	ldrb	r2, [r4, #0]
 80152dc:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80152e0:	f363 1205 	bfi	r2, r3, #4, #2
 80152e4:	7022      	strb	r2, [r4, #0]
        ext->fit_right           = copy_ext->fit_right;
 80152e6:	7803      	ldrb	r3, [r0, #0]
 80152e8:	b2d2      	uxtb	r2, r2
 80152ea:	099b      	lsrs	r3, r3, #6
 80152ec:	f363 1287 	bfi	r2, r3, #6, #2
 80152f0:	7022      	strb	r2, [r4, #0]
        ext->fit_top             = copy_ext->fit_top;
 80152f2:	7842      	ldrb	r2, [r0, #1]
 80152f4:	7863      	ldrb	r3, [r4, #1]
 80152f6:	f362 0301 	bfi	r3, r2, #0, #2
 80152fa:	7063      	strb	r3, [r4, #1]
        ext->fit_bottom          = copy_ext->fit_bottom;
 80152fc:	7843      	ldrb	r3, [r0, #1]
 80152fe:	7862      	ldrb	r2, [r4, #1]
 8015300:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8015304:	f363 0283 	bfi	r2, r3, #2, #2
 8015308:	7062      	strb	r2, [r4, #1]
        ext->layout              = copy_ext->layout;
 801530a:	7802      	ldrb	r2, [r0, #0]
 801530c:	7823      	ldrb	r3, [r4, #0]
 801530e:	f362 0303 	bfi	r3, r2, #0, #4
 8015312:	7023      	strb	r3, [r4, #0]
        lv_obj_refresh_style(new_cont);
 8015314:	4628      	mov	r0, r5
 8015316:	f7f9 fcd8 	bl	800ecca <lv_obj_refresh_style>
 801531a:	e7d6      	b.n	80152ca <lv_cont_create+0x62>
    if(ext == NULL) return NULL;
 801531c:	4605      	mov	r5, r0
 801531e:	e7d4      	b.n	80152ca <lv_cont_create+0x62>
 8015320:	2000afb8 	.word	0x2000afb8
 8015324:	08015919 	.word	0x08015919
 8015328:	2000c334 	.word	0x2000c334

0801532c <lv_cont_set_layout>:
{
 801532c:	b570      	push	{r4, r5, r6, lr}
 801532e:	460d      	mov	r5, r1
 8015330:	4604      	mov	r4, r0
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 8015332:	f7f9 fe8c 	bl	800f04e <lv_obj_get_ext_attr>
    if(ext->layout == layout) return;
 8015336:	7803      	ldrb	r3, [r0, #0]
 8015338:	f003 020f 	and.w	r2, r3, #15
 801533c:	42aa      	cmp	r2, r5
 801533e:	d009      	beq.n	8015354 <lv_cont_set_layout+0x28>
    ext->layout = layout;
 8015340:	f365 0303 	bfi	r3, r5, #0, #4
 8015344:	7003      	strb	r3, [r0, #0]
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
 8015346:	2200      	movs	r2, #0
 8015348:	69e3      	ldr	r3, [r4, #28]
 801534a:	4620      	mov	r0, r4
 801534c:	2101      	movs	r1, #1
}
 801534e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
 8015352:	4718      	bx	r3
 8015354:	bd70      	pop	{r4, r5, r6, pc}

08015356 <lv_cont_set_fit4>:
{
 8015356:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801535a:	4605      	mov	r5, r0
 801535c:	4689      	mov	r9, r1
 801535e:	4690      	mov	r8, r2
 8015360:	461f      	mov	r7, r3
 8015362:	f89d 6020 	ldrb.w	r6, [sp, #32]
    lv_obj_invalidate(cont);
 8015366:	f7f8 fff5 	bl	800e354 <lv_obj_invalidate>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 801536a:	4628      	mov	r0, r5
 801536c:	f7f9 fe6f 	bl	800f04e <lv_obj_get_ext_attr>
    if(ext->fit_left == left && ext->fit_right == right && ext->fit_top == top && ext->fit_bottom == bottom) {
 8015370:	7803      	ldrb	r3, [r0, #0]
 8015372:	f3c3 1201 	ubfx	r2, r3, #4, #2
 8015376:	454a      	cmp	r2, r9
 8015378:	d10b      	bne.n	8015392 <lv_cont_set_fit4+0x3c>
 801537a:	ebb8 1f93 	cmp.w	r8, r3, lsr #6
 801537e:	d108      	bne.n	8015392 <lv_cont_set_fit4+0x3c>
 8015380:	7844      	ldrb	r4, [r0, #1]
 8015382:	f004 0303 	and.w	r3, r4, #3
 8015386:	42bb      	cmp	r3, r7
 8015388:	d103      	bne.n	8015392 <lv_cont_set_fit4+0x3c>
 801538a:	f3c4 0481 	ubfx	r4, r4, #2, #2
 801538e:	42b4      	cmp	r4, r6
 8015390:	d014      	beq.n	80153bc <lv_cont_set_fit4+0x66>
    ext->fit_left   = left;
 8015392:	7804      	ldrb	r4, [r0, #0]
    ext->fit_top    = top;
 8015394:	7842      	ldrb	r2, [r0, #1]
    ext->fit_left   = left;
 8015396:	f369 1405 	bfi	r4, r9, #4, #2
    ext->fit_top    = top;
 801539a:	f367 0201 	bfi	r2, r7, #0, #2
    ext->fit_right  = right;
 801539e:	4621      	mov	r1, r4
    ext->fit_bottom = bottom;
 80153a0:	4613      	mov	r3, r2
    ext->fit_right  = right;
 80153a2:	f368 1187 	bfi	r1, r8, #6, #2
    ext->fit_bottom = bottom;
 80153a6:	f366 0383 	bfi	r3, r6, #2, #2
    ext->fit_right  = right;
 80153aa:	7001      	strb	r1, [r0, #0]
    ext->fit_bottom = bottom;
 80153ac:	7043      	strb	r3, [r0, #1]
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
 80153ae:	2200      	movs	r2, #0
 80153b0:	69eb      	ldr	r3, [r5, #28]
 80153b2:	4628      	mov	r0, r5
 80153b4:	2101      	movs	r1, #1
}
 80153b6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
 80153ba:	4718      	bx	r3
 80153bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080153c0 <lv_cont_get_layout>:
{
 80153c0:	b508      	push	{r3, lr}
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 80153c2:	f7f9 fe44 	bl	800f04e <lv_obj_get_ext_attr>
    return ext->layout;
 80153c6:	7800      	ldrb	r0, [r0, #0]
}
 80153c8:	f000 000f 	and.w	r0, r0, #15
 80153cc:	bd08      	pop	{r3, pc}

080153ce <lv_cont_refr_layout>:
{
 80153ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153d2:	b087      	sub	sp, #28
 80153d4:	4604      	mov	r4, r0
    lv_layout_t type = lv_cont_get_layout(cont);
 80153d6:	f7ff fff3 	bl	80153c0 <lv_cont_get_layout>
    if(lv_obj_get_child(cont, NULL) == NULL) return;
 80153da:	2100      	movs	r1, #0
    lv_layout_t type = lv_cont_get_layout(cont);
 80153dc:	4605      	mov	r5, r0
    if(lv_obj_get_child(cont, NULL) == NULL) return;
 80153de:	4620      	mov	r0, r4
 80153e0:	f7f9 fcfa 	bl	800edd8 <lv_obj_get_child>
 80153e4:	2800      	cmp	r0, #0
 80153e6:	f000 8293 	beq.w	8015910 <lv_cont_refr_layout+0x542>
    if(type == LV_LAYOUT_OFF) return;
 80153ea:	2d00      	cmp	r5, #0
 80153ec:	f000 8290 	beq.w	8015910 <lv_cont_refr_layout+0x542>
    if(type == LV_LAYOUT_CENTER) {
 80153f0:	2d01      	cmp	r5, #1
 80153f2:	d16a      	bne.n	80154ca <lv_cont_refr_layout+0xfc>
    const lv_style_t * style = lv_obj_get_style(cont);
 80153f4:	4620      	mov	r0, r4
 80153f6:	f7f9 fd3f 	bl	800ee78 <lv_obj_get_style>
    LV_LL_READ(cont->child_ll, child)
 80153fa:	1d26      	adds	r6, r4, #4
    const lv_style_t * style = lv_obj_get_style(cont);
 80153fc:	4607      	mov	r7, r0
    LV_LL_READ(cont->child_ll, child)
 80153fe:	4630      	mov	r0, r6
 8015400:	f7fe fc26 	bl	8013c50 <lv_ll_get_head>
    lv_coord_t h_tot         = 0;
 8015404:	2500      	movs	r5, #0
    LV_LL_READ(cont->child_ll, child)
 8015406:	4680      	mov	r8, r0
    uint32_t obj_num         = 0;
 8015408:	46a9      	mov	r9, r5
    LV_LL_READ(cont->child_ll, child)
 801540a:	f1b8 0f00 	cmp.w	r8, #0
 801540e:	d11d      	bne.n	801544c <lv_cont_refr_layout+0x7e>
    if(obj_num == 0) return;
 8015410:	f1b9 0f00 	cmp.w	r9, #0
 8015414:	f000 827c 	beq.w	8015910 <lv_cont_refr_layout+0x542>
    h_tot -= style->body.padding.inner;
 8015418:	8bf8      	ldrh	r0, [r7, #30]
 801541a:	1a2d      	subs	r5, r5, r0
 801541c:	b2ad      	uxth	r5, r5
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 801541e:	4620      	mov	r0, r4
 8015420:	2101      	movs	r1, #1
 8015422:	f7f8 fead 	bl	800e180 <lv_obj_set_protect>
    lv_coord_t last_cord = -(h_tot / 2);
 8015426:	b22d      	sxth	r5, r5
 8015428:	f04f 0902 	mov.w	r9, #2
    LV_LL_READ_BACK(cont->child_ll, child)
 801542c:	4630      	mov	r0, r6
    lv_coord_t last_cord = -(h_tot / 2);
 801542e:	fb95 f5f9 	sdiv	r5, r5, r9
 8015432:	426d      	negs	r5, r5
 8015434:	b22d      	sxth	r5, r5
    LV_LL_READ_BACK(cont->child_ll, child)
 8015436:	f7fe fc0e 	bl	8013c56 <lv_ll_get_tail>
 801543a:	4680      	mov	r8, r0
 801543c:	b9f8      	cbnz	r0, 801547e <lv_cont_refr_layout+0xb0>
    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
 801543e:	2101      	movs	r1, #1
 8015440:	4620      	mov	r0, r4
}
 8015442:	b007      	add	sp, #28
 8015444:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
 8015448:	f7f8 bea0 	b.w	800e18c <lv_obj_clear_protect>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 801544c:	4640      	mov	r0, r8
 801544e:	f7f9 fd91 	bl	800ef74 <lv_obj_get_hidden>
 8015452:	b970      	cbnz	r0, 8015472 <lv_cont_refr_layout+0xa4>
 8015454:	2104      	movs	r1, #4
 8015456:	4640      	mov	r0, r8
 8015458:	f7f9 fdee 	bl	800f038 <lv_obj_is_protected>
 801545c:	b948      	cbnz	r0, 8015472 <lv_cont_refr_layout+0xa4>
        h_tot += lv_obj_get_height(child) + style->body.padding.inner;
 801545e:	4640      	mov	r0, r8
 8015460:	f7f9 fcfe 	bl	800ee60 <lv_obj_get_height>
 8015464:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8015468:	4418      	add	r0, r3
 801546a:	4405      	add	r5, r0
 801546c:	b22d      	sxth	r5, r5
        obj_num++;
 801546e:	f109 0901 	add.w	r9, r9, #1
    LV_LL_READ(cont->child_ll, child)
 8015472:	4641      	mov	r1, r8
 8015474:	4630      	mov	r0, r6
 8015476:	f7fe fbf1 	bl	8013c5c <lv_ll_get_next>
 801547a:	4680      	mov	r8, r0
 801547c:	e7c5      	b.n	801540a <lv_cont_refr_layout+0x3c>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 801547e:	4640      	mov	r0, r8
 8015480:	f7f9 fd78 	bl	800ef74 <lv_obj_get_hidden>
 8015484:	b9e0      	cbnz	r0, 80154c0 <lv_cont_refr_layout+0xf2>
 8015486:	2104      	movs	r1, #4
 8015488:	4640      	mov	r0, r8
 801548a:	f7f9 fdd5 	bl	800f038 <lv_obj_is_protected>
 801548e:	4682      	mov	sl, r0
 8015490:	b9b0      	cbnz	r0, 80154c0 <lv_cont_refr_layout+0xf2>
        lv_obj_align(child, cont, LV_ALIGN_CENTER, 0, last_cord + lv_obj_get_height(child) / 2);
 8015492:	4640      	mov	r0, r8
 8015494:	f7f9 fce4 	bl	800ee60 <lv_obj_get_height>
 8015498:	b2ad      	uxth	r5, r5
 801549a:	fb90 f0f9 	sdiv	r0, r0, r9
 801549e:	4428      	add	r0, r5
 80154a0:	b200      	sxth	r0, r0
 80154a2:	4653      	mov	r3, sl
 80154a4:	9000      	str	r0, [sp, #0]
 80154a6:	4652      	mov	r2, sl
 80154a8:	4621      	mov	r1, r4
 80154aa:	4640      	mov	r0, r8
 80154ac:	f7f9 f814 	bl	800e4d8 <lv_obj_align>
        last_cord += lv_obj_get_height(child) + style->body.padding.inner;
 80154b0:	4640      	mov	r0, r8
 80154b2:	f7f9 fcd5 	bl	800ee60 <lv_obj_get_height>
 80154b6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80154ba:	4418      	add	r0, r3
 80154bc:	4405      	add	r5, r0
 80154be:	b22d      	sxth	r5, r5
    LV_LL_READ_BACK(cont->child_ll, child)
 80154c0:	4641      	mov	r1, r8
 80154c2:	4630      	mov	r0, r6
 80154c4:	f7fe fbcf 	bl	8013c66 <lv_ll_get_prev>
 80154c8:	e7b7      	b.n	801543a <lv_cont_refr_layout+0x6c>
    } else if(type == LV_LAYOUT_COL_L || type == LV_LAYOUT_COL_M || type == LV_LAYOUT_COL_R) {
 80154ca:	1eab      	subs	r3, r5, #2
 80154cc:	b2db      	uxtb	r3, r3
 80154ce:	2b02      	cmp	r3, #2
 80154d0:	d84a      	bhi.n	8015568 <lv_cont_refr_layout+0x19a>
    lv_layout_t type = lv_cont_get_layout(cont);
 80154d2:	4620      	mov	r0, r4
 80154d4:	f7ff ff74 	bl	80153c0 <lv_cont_get_layout>
 80154d8:	4605      	mov	r5, r0
    const lv_style_t * style = lv_obj_get_style(cont);
 80154da:	4620      	mov	r0, r4
 80154dc:	f7f9 fccc 	bl	800ee78 <lv_obj_get_style>
    switch(type) {
 80154e0:	2d03      	cmp	r5, #3
    const lv_style_t * style = lv_obj_get_style(cont);
 80154e2:	4607      	mov	r7, r0
    switch(type) {
 80154e4:	d008      	beq.n	80154f8 <lv_cont_refr_layout+0x12a>
 80154e6:	2d04      	cmp	r5, #4
 80154e8:	d036      	beq.n	8015558 <lv_cont_refr_layout+0x18a>
 80154ea:	2d02      	cmp	r5, #2
 80154ec:	d13a      	bne.n	8015564 <lv_cont_refr_layout+0x196>
            hpad_corr = style->body.padding.left;
 80154ee:	f9b0 501a 	ldrsh.w	r5, [r0, #26]
            align     = LV_ALIGN_IN_TOP_LEFT;
 80154f2:	f04f 0801 	mov.w	r8, #1
 80154f6:	e002      	b.n	80154fe <lv_cont_refr_layout+0x130>
            hpad_corr = 0;
 80154f8:	2500      	movs	r5, #0
            align     = LV_ALIGN_IN_TOP_MID;
 80154fa:	f04f 0802 	mov.w	r8, #2
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 80154fe:	4620      	mov	r0, r4
 8015500:	2101      	movs	r1, #1
    LV_LL_READ_BACK(cont->child_ll, child)
 8015502:	f104 0904 	add.w	r9, r4, #4
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 8015506:	f7f8 fe3b 	bl	800e180 <lv_obj_set_protect>
    LV_LL_READ_BACK(cont->child_ll, child)
 801550a:	4648      	mov	r0, r9
    lv_coord_t last_cord = style->body.padding.top;
 801550c:	f9b7 a016 	ldrsh.w	sl, [r7, #22]
    LV_LL_READ_BACK(cont->child_ll, child)
 8015510:	f7fe fba1 	bl	8013c56 <lv_ll_get_tail>
 8015514:	4606      	mov	r6, r0
 8015516:	2800      	cmp	r0, #0
 8015518:	d091      	beq.n	801543e <lv_cont_refr_layout+0x70>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 801551a:	4630      	mov	r0, r6
 801551c:	f7f9 fd2a 	bl	800ef74 <lv_obj_get_hidden>
 8015520:	b9a8      	cbnz	r0, 801554e <lv_cont_refr_layout+0x180>
 8015522:	2104      	movs	r1, #4
 8015524:	4630      	mov	r0, r6
 8015526:	f7f9 fd87 	bl	800f038 <lv_obj_is_protected>
 801552a:	b980      	cbnz	r0, 801554e <lv_cont_refr_layout+0x180>
        lv_obj_align(child, cont, align, hpad_corr, last_cord);
 801552c:	462b      	mov	r3, r5
 801552e:	f8cd a000 	str.w	sl, [sp]
 8015532:	4642      	mov	r2, r8
 8015534:	4621      	mov	r1, r4
 8015536:	4630      	mov	r0, r6
 8015538:	f7f8 ffce 	bl	800e4d8 <lv_obj_align>
        last_cord += lv_obj_get_height(child) + style->body.padding.inner;
 801553c:	4630      	mov	r0, r6
 801553e:	f7f9 fc8f 	bl	800ee60 <lv_obj_get_height>
 8015542:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8015546:	4418      	add	r0, r3
 8015548:	4450      	add	r0, sl
 801554a:	fa0f fa80 	sxth.w	sl, r0
    LV_LL_READ_BACK(cont->child_ll, child)
 801554e:	4631      	mov	r1, r6
 8015550:	4648      	mov	r0, r9
 8015552:	f7fe fb88 	bl	8013c66 <lv_ll_get_prev>
 8015556:	e7dd      	b.n	8015514 <lv_cont_refr_layout+0x146>
            hpad_corr = -style->body.padding.right;
 8015558:	8b85      	ldrh	r5, [r0, #28]
 801555a:	426d      	negs	r5, r5
 801555c:	b22d      	sxth	r5, r5
            align     = LV_ALIGN_IN_TOP_RIGHT;
 801555e:	f04f 0803 	mov.w	r8, #3
 8015562:	e7cc      	b.n	80154fe <lv_cont_refr_layout+0x130>
            hpad_corr = 0;
 8015564:	2500      	movs	r5, #0
 8015566:	e7c4      	b.n	80154f2 <lv_cont_refr_layout+0x124>
    } else if(type == LV_LAYOUT_ROW_T || type == LV_LAYOUT_ROW_M || type == LV_LAYOUT_ROW_B) {
 8015568:	1f6b      	subs	r3, r5, #5
 801556a:	b2db      	uxtb	r3, r3
 801556c:	2b02      	cmp	r3, #2
 801556e:	d84a      	bhi.n	8015606 <lv_cont_refr_layout+0x238>
    lv_layout_t type = lv_cont_get_layout(cont);
 8015570:	4620      	mov	r0, r4
 8015572:	f7ff ff25 	bl	80153c0 <lv_cont_get_layout>
 8015576:	4605      	mov	r5, r0
    const lv_style_t * style = lv_obj_get_style(cont);
 8015578:	4620      	mov	r0, r4
 801557a:	f7f9 fc7d 	bl	800ee78 <lv_obj_get_style>
    switch(type) {
 801557e:	2d06      	cmp	r5, #6
    const lv_style_t * style = lv_obj_get_style(cont);
 8015580:	4607      	mov	r7, r0
    switch(type) {
 8015582:	d008      	beq.n	8015596 <lv_cont_refr_layout+0x1c8>
 8015584:	2d07      	cmp	r5, #7
 8015586:	d036      	beq.n	80155f6 <lv_cont_refr_layout+0x228>
 8015588:	2d05      	cmp	r5, #5
 801558a:	d13a      	bne.n	8015602 <lv_cont_refr_layout+0x234>
            vpad_corr = style->body.padding.top;
 801558c:	f9b0 5016 	ldrsh.w	r5, [r0, #22]
            align     = LV_ALIGN_IN_TOP_LEFT;
 8015590:	f04f 0801 	mov.w	r8, #1
 8015594:	e002      	b.n	801559c <lv_cont_refr_layout+0x1ce>
            vpad_corr = 0;
 8015596:	2500      	movs	r5, #0
            align     = LV_ALIGN_IN_LEFT_MID;
 8015598:	f04f 0807 	mov.w	r8, #7
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 801559c:	4620      	mov	r0, r4
 801559e:	2101      	movs	r1, #1
    LV_LL_READ_BACK(cont->child_ll, child)
 80155a0:	f104 0904 	add.w	r9, r4, #4
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 80155a4:	f7f8 fdec 	bl	800e180 <lv_obj_set_protect>
    LV_LL_READ_BACK(cont->child_ll, child)
 80155a8:	4648      	mov	r0, r9
    lv_coord_t last_cord = style->body.padding.left;
 80155aa:	f9b7 a01a 	ldrsh.w	sl, [r7, #26]
    LV_LL_READ_BACK(cont->child_ll, child)
 80155ae:	f7fe fb52 	bl	8013c56 <lv_ll_get_tail>
 80155b2:	4606      	mov	r6, r0
 80155b4:	2800      	cmp	r0, #0
 80155b6:	f43f af42 	beq.w	801543e <lv_cont_refr_layout+0x70>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 80155ba:	4630      	mov	r0, r6
 80155bc:	f7f9 fcda 	bl	800ef74 <lv_obj_get_hidden>
 80155c0:	b9a0      	cbnz	r0, 80155ec <lv_cont_refr_layout+0x21e>
 80155c2:	2104      	movs	r1, #4
 80155c4:	4630      	mov	r0, r6
 80155c6:	f7f9 fd37 	bl	800f038 <lv_obj_is_protected>
 80155ca:	b978      	cbnz	r0, 80155ec <lv_cont_refr_layout+0x21e>
        lv_obj_align(child, cont, align, last_cord, vpad_corr);
 80155cc:	4653      	mov	r3, sl
 80155ce:	4642      	mov	r2, r8
 80155d0:	4621      	mov	r1, r4
 80155d2:	4630      	mov	r0, r6
 80155d4:	9500      	str	r5, [sp, #0]
 80155d6:	f7f8 ff7f 	bl	800e4d8 <lv_obj_align>
        last_cord += lv_obj_get_width(child) + style->body.padding.inner;
 80155da:	4630      	mov	r0, r6
 80155dc:	f7f9 fc3a 	bl	800ee54 <lv_obj_get_width>
 80155e0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80155e4:	4403      	add	r3, r0
 80155e6:	4453      	add	r3, sl
 80155e8:	fa0f fa83 	sxth.w	sl, r3
    LV_LL_READ_BACK(cont->child_ll, child)
 80155ec:	4631      	mov	r1, r6
 80155ee:	4648      	mov	r0, r9
 80155f0:	f7fe fb39 	bl	8013c66 <lv_ll_get_prev>
 80155f4:	e7dd      	b.n	80155b2 <lv_cont_refr_layout+0x1e4>
            vpad_corr = -style->body.padding.bottom;
 80155f6:	8b05      	ldrh	r5, [r0, #24]
 80155f8:	426d      	negs	r5, r5
 80155fa:	b22d      	sxth	r5, r5
            align     = LV_ALIGN_IN_BOTTOM_LEFT;
 80155fc:	f04f 0804 	mov.w	r8, #4
 8015600:	e7cc      	b.n	801559c <lv_cont_refr_layout+0x1ce>
            vpad_corr = 0;
 8015602:	2500      	movs	r5, #0
 8015604:	e7c4      	b.n	8015590 <lv_cont_refr_layout+0x1c2>
    } else if(type == LV_LAYOUT_PRETTY) {
 8015606:	2d08      	cmp	r5, #8
 8015608:	f040 80e7 	bne.w	80157da <lv_cont_refr_layout+0x40c>
    const lv_style_t * style = lv_obj_get_style(cont);
 801560c:	4620      	mov	r0, r4
 801560e:	f7f9 fc33 	bl	800ee78 <lv_obj_get_style>
 8015612:	4680      	mov	r8, r0
    lv_coord_t w_obj         = lv_obj_get_width(cont);
 8015614:	4620      	mov	r0, r4
 8015616:	f7f9 fc1d 	bl	800ee54 <lv_obj_get_width>
    child_rs = lv_ll_get_tail(&cont->child_ll); /*Set the row starter child*/
 801561a:	1d23      	adds	r3, r4, #4
    lv_coord_t w_obj         = lv_obj_get_width(cont);
 801561c:	9003      	str	r0, [sp, #12]
    child_rs = lv_ll_get_tail(&cont->child_ll); /*Set the row starter child*/
 801561e:	4618      	mov	r0, r3
    lv_coord_t act_y         = style->body.padding.top;
 8015620:	f9b8 a016 	ldrsh.w	sl, [r8, #22]
    child_rs = lv_ll_get_tail(&cont->child_ll); /*Set the row starter child*/
 8015624:	9302      	str	r3, [sp, #8]
 8015626:	f7fe fb16 	bl	8013c56 <lv_ll_get_tail>
    if(child_rs == NULL) return;                /*Return if no child*/
 801562a:	4605      	mov	r5, r0
 801562c:	2800      	cmp	r0, #0
 801562e:	f000 816f 	beq.w	8015910 <lv_cont_refr_layout+0x542>
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 8015632:	2101      	movs	r1, #1
 8015634:	4620      	mov	r0, r4
 8015636:	f7f8 fda3 	bl	800e180 <lv_obj_set_protect>
            style->body.padding.left + style->body.padding.right; /*The width is at least the left+right hpad*/
 801563a:	f8b8 b01a 	ldrh.w	fp, [r8, #26]
 801563e:	f8b8 001c 	ldrh.w	r0, [r8, #28]
        uint32_t obj_num = 0;
 8015642:	2700      	movs	r7, #0
            style->body.padding.left + style->body.padding.right; /*The width is at least the left+right hpad*/
 8015644:	4483      	add	fp, r0
        lv_coord_t w_row =
 8015646:	fa0f fb8b 	sxth.w	fp, fp
 801564a:	462e      	mov	r6, r5
        lv_coord_t h_row = 0;
 801564c:	46b9      	mov	r9, r7
            if(lv_obj_get_hidden(child_rc) == false && lv_obj_is_protected(child_rc, LV_PROTECT_POS) == false) {
 801564e:	4628      	mov	r0, r5
 8015650:	f7f9 fc90 	bl	800ef74 <lv_obj_get_hidden>
 8015654:	2800      	cmp	r0, #0
 8015656:	d13b      	bne.n	80156d0 <lv_cont_refr_layout+0x302>
 8015658:	2104      	movs	r1, #4
 801565a:	4628      	mov	r0, r5
 801565c:	f7f9 fcec 	bl	800f038 <lv_obj_is_protected>
 8015660:	bbb0      	cbnz	r0, 80156d0 <lv_cont_refr_layout+0x302>
                if(w_row + lv_obj_get_width(child_rc) > w_obj) {
 8015662:	4628      	mov	r0, r5
 8015664:	f7f9 fbf6 	bl	800ee54 <lv_obj_get_width>
 8015668:	9b03      	ldr	r3, [sp, #12]
 801566a:	4458      	add	r0, fp
 801566c:	4298      	cmp	r0, r3
 801566e:	dd15      	ble.n	801569c <lv_cont_refr_layout+0x2ce>
                    if(child_rc != NULL && obj_num != 0) {
 8015670:	2f00      	cmp	r7, #0
 8015672:	f000 812c 	beq.w	80158ce <lv_cont_refr_layout+0x500>
                        child_rc = lv_ll_get_next(&cont->child_ll, child_rc);
 8015676:	4629      	mov	r1, r5
 8015678:	9802      	ldr	r0, [sp, #8]
 801567a:	f7fe faef 	bl	8013c5c <lv_ll_get_next>
 801567e:	4605      	mov	r5, r0
        else if(obj_num == 1) {
 8015680:	2f01      	cmp	r7, #1
 8015682:	d130      	bne.n	80156e6 <lv_cont_refr_layout+0x318>
            lv_obj_align(child_rs, cont, LV_ALIGN_IN_TOP_MID, 0, act_y);
 8015684:	f8cd a000 	str.w	sl, [sp]
 8015688:	2300      	movs	r3, #0
 801568a:	2202      	movs	r2, #2
 801568c:	4621      	mov	r1, r4
 801568e:	4630      	mov	r0, r6
            lv_obj_align(obj2, cont, LV_ALIGN_IN_TOP_RIGHT, -pad, act_y + (h_row - lv_obj_get_height(obj2)) / 2);
 8015690:	f7f8 ff22 	bl	800e4d8 <lv_obj_align>
        if(child_rc == NULL) break;
 8015694:	2d00      	cmp	r5, #0
 8015696:	f040 8126 	bne.w	80158e6 <lv_cont_refr_layout+0x518>
 801569a:	e6d0      	b.n	801543e <lv_cont_refr_layout+0x70>
                w_row += lv_obj_get_width(child_rc) + style->body.padding.inner; /*Add the object width + opad*/
 801569c:	4628      	mov	r0, r5
 801569e:	f7f9 fbd9 	bl	800ee54 <lv_obj_get_width>
 80156a2:	f9b8 301e 	ldrsh.w	r3, [r8, #30]
 80156a6:	4418      	add	r0, r3
 80156a8:	4483      	add	fp, r0
                h_row = LV_MATH_MAX(h_row, lv_obj_get_height(child_rc));         /*Search the highest object*/
 80156aa:	4628      	mov	r0, r5
 80156ac:	f7f9 fbd8 	bl	800ee60 <lv_obj_get_height>
 80156b0:	4548      	cmp	r0, r9
                w_row += lv_obj_get_width(child_rc) + style->body.padding.inner; /*Add the object width + opad*/
 80156b2:	fa0f fb8b 	sxth.w	fp, fp
                h_row = LV_MATH_MAX(h_row, lv_obj_get_height(child_rc));         /*Search the highest object*/
 80156b6:	db03      	blt.n	80156c0 <lv_cont_refr_layout+0x2f2>
 80156b8:	4628      	mov	r0, r5
 80156ba:	f7f9 fbd1 	bl	800ee60 <lv_obj_get_height>
 80156be:	4681      	mov	r9, r0
                if(lv_obj_is_protected(child_rc, LV_PROTECT_FOLLOW))
 80156c0:	2108      	movs	r1, #8
 80156c2:	4628      	mov	r0, r5
                obj_num++;
 80156c4:	3701      	adds	r7, #1
                if(lv_obj_is_protected(child_rc, LV_PROTECT_FOLLOW))
 80156c6:	f7f9 fcb7 	bl	800f038 <lv_obj_is_protected>
 80156ca:	2800      	cmp	r0, #0
 80156cc:	f040 80fc 	bne.w	80158c8 <lv_cont_refr_layout+0x4fa>
            child_rc = lv_ll_get_prev(&cont->child_ll, child_rc); /*Load the next object*/
 80156d0:	4629      	mov	r1, r5
 80156d2:	9802      	ldr	r0, [sp, #8]
 80156d4:	f7fe fac7 	bl	8013c66 <lv_ll_get_prev>
 80156d8:	4605      	mov	r5, r0
            if(obj_num == 0)
 80156da:	2f00      	cmp	r7, #0
 80156dc:	f000 8113 	beq.w	8015906 <lv_cont_refr_layout+0x538>
        } while(child_rc != NULL);
 80156e0:	2800      	cmp	r0, #0
 80156e2:	d1b4      	bne.n	801564e <lv_cont_refr_layout+0x280>
 80156e4:	e7cc      	b.n	8015680 <lv_cont_refr_layout+0x2b2>
        else if(obj_num == 2) {
 80156e6:	2f02      	cmp	r7, #2
 80156e8:	d13a      	bne.n	8015760 <lv_cont_refr_layout+0x392>
            lv_obj_t * obj2 = lv_ll_get_prev(&cont->child_ll, child_rs);
 80156ea:	4631      	mov	r1, r6
 80156ec:	9802      	ldr	r0, [sp, #8]
 80156ee:	f7fe faba 	bl	8013c66 <lv_ll_get_prev>
 80156f2:	4683      	mov	fp, r0
            w_row           = lv_obj_get_width(obj1) + lv_obj_get_width(obj2);
 80156f4:	4630      	mov	r0, r6
 80156f6:	f7f9 fbad 	bl	800ee54 <lv_obj_get_width>
 80156fa:	9004      	str	r0, [sp, #16]
 80156fc:	4658      	mov	r0, fp
 80156fe:	f7f9 fba9 	bl	800ee54 <lv_obj_get_width>
 8015702:	9b04      	ldr	r3, [sp, #16]
            lv_coord_t pad  = (w_obj - w_row) / 3;
 8015704:	9a03      	ldr	r2, [sp, #12]
            w_row           = lv_obj_get_width(obj1) + lv_obj_get_width(obj2);
 8015706:	4403      	add	r3, r0
            lv_coord_t pad  = (w_obj - w_row) / 3;
 8015708:	b21b      	sxth	r3, r3
            lv_obj_align(obj1, cont, LV_ALIGN_IN_TOP_LEFT, pad, act_y + (h_row - lv_obj_get_height(obj1)) / 2);
 801570a:	4630      	mov	r0, r6
            lv_coord_t pad  = (w_obj - w_row) / 3;
 801570c:	1ad3      	subs	r3, r2, r3
 801570e:	2203      	movs	r2, #3
 8015710:	fb93 f3f2 	sdiv	r3, r3, r2
 8015714:	9304      	str	r3, [sp, #16]
            lv_obj_align(obj1, cont, LV_ALIGN_IN_TOP_LEFT, pad, act_y + (h_row - lv_obj_get_height(obj1)) / 2);
 8015716:	f7f9 fba3 	bl	800ee60 <lv_obj_get_height>
 801571a:	fa1f f38a 	uxth.w	r3, sl
 801571e:	eba9 0000 	sub.w	r0, r9, r0
 8015722:	fb90 f0f7 	sdiv	r0, r0, r7
 8015726:	4418      	add	r0, r3
 8015728:	b200      	sxth	r0, r0
 801572a:	2201      	movs	r2, #1
 801572c:	4621      	mov	r1, r4
 801572e:	9305      	str	r3, [sp, #20]
 8015730:	9000      	str	r0, [sp, #0]
 8015732:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8015736:	4630      	mov	r0, r6
 8015738:	f7f8 fece 	bl	800e4d8 <lv_obj_align>
            lv_obj_align(obj2, cont, LV_ALIGN_IN_TOP_RIGHT, -pad, act_y + (h_row - lv_obj_get_height(obj2)) / 2);
 801573c:	4658      	mov	r0, fp
 801573e:	f7f9 fb8f 	bl	800ee60 <lv_obj_get_height>
 8015742:	9a05      	ldr	r2, [sp, #20]
 8015744:	9b04      	ldr	r3, [sp, #16]
 8015746:	eba9 0000 	sub.w	r0, r9, r0
 801574a:	fb90 f7f7 	sdiv	r7, r0, r7
 801574e:	4417      	add	r7, r2
 8015750:	425b      	negs	r3, r3
 8015752:	b23f      	sxth	r7, r7
 8015754:	9700      	str	r7, [sp, #0]
 8015756:	b21b      	sxth	r3, r3
 8015758:	2203      	movs	r2, #3
 801575a:	4621      	mov	r1, r4
 801575c:	4658      	mov	r0, fp
 801575e:	e797      	b.n	8015690 <lv_cont_refr_layout+0x2c2>
            w_row -= style->body.padding.inner * obj_num;
 8015760:	f9b8 001e 	ldrsh.w	r0, [r8, #30]
            lv_coord_t new_opad = (w_obj - w_row) / (obj_num - 1);
 8015764:	9b03      	ldr	r3, [sp, #12]
            w_row -= style->body.padding.inner * obj_num;
 8015766:	fb10 f007 	smulbb	r0, r0, r7
 801576a:	ebab 0b00 	sub.w	fp, fp, r0
            lv_coord_t new_opad = (w_obj - w_row) / (obj_num - 1);
 801576e:	fa0f fb8b 	sxth.w	fp, fp
 8015772:	eba3 0b0b 	sub.w	fp, r3, fp
 8015776:	3f01      	subs	r7, #1
 8015778:	fbbb f7f7 	udiv	r7, fp, r7
            lv_coord_t act_x    = style->body.padding.left; /*x init*/
 801577c:	f9b8 b01a 	ldrsh.w	fp, [r8, #26]
            lv_coord_t new_opad = (w_obj - w_row) / (obj_num - 1);
 8015780:	b23f      	sxth	r7, r7
                if(lv_obj_get_hidden(child_tmp) == false && lv_obj_is_protected(child_tmp, LV_PROTECT_POS) == false) {
 8015782:	4630      	mov	r0, r6
 8015784:	f7f9 fbf6 	bl	800ef74 <lv_obj_get_hidden>
 8015788:	b9e0      	cbnz	r0, 80157c4 <lv_cont_refr_layout+0x3f6>
 801578a:	2104      	movs	r1, #4
 801578c:	4630      	mov	r0, r6
 801578e:	f7f9 fc53 	bl	800f038 <lv_obj_is_protected>
 8015792:	b9b8      	cbnz	r0, 80157c4 <lv_cont_refr_layout+0x3f6>
                                 act_y + (h_row - lv_obj_get_height(child_tmp)) / 2);
 8015794:	4630      	mov	r0, r6
 8015796:	f7f9 fb63 	bl	800ee60 <lv_obj_get_height>
 801579a:	2302      	movs	r3, #2
 801579c:	eba9 0000 	sub.w	r0, r9, r0
 80157a0:	fb90 f0f3 	sdiv	r0, r0, r3
 80157a4:	4450      	add	r0, sl
                    lv_obj_align(child_tmp, cont, LV_ALIGN_IN_TOP_LEFT, act_x,
 80157a6:	b200      	sxth	r0, r0
 80157a8:	465b      	mov	r3, fp
 80157aa:	9000      	str	r0, [sp, #0]
 80157ac:	2201      	movs	r2, #1
 80157ae:	4621      	mov	r1, r4
 80157b0:	4630      	mov	r0, r6
 80157b2:	f7f8 fe91 	bl	800e4d8 <lv_obj_align>
                    act_x += lv_obj_get_width(child_tmp) + new_opad;
 80157b6:	4630      	mov	r0, r6
 80157b8:	f7f9 fb4c 	bl	800ee54 <lv_obj_get_width>
 80157bc:	4438      	add	r0, r7
 80157be:	4483      	add	fp, r0
 80157c0:	fa0f fb8b 	sxth.w	fp, fp
                if(child_tmp == child_rc) break;
 80157c4:	42ae      	cmp	r6, r5
 80157c6:	f000 808f 	beq.w	80158e8 <lv_cont_refr_layout+0x51a>
                child_tmp = lv_ll_get_prev(&cont->child_ll, child_tmp);
 80157ca:	4631      	mov	r1, r6
 80157cc:	9802      	ldr	r0, [sp, #8]
 80157ce:	f7fe fa4a 	bl	8013c66 <lv_ll_get_prev>
            while(child_tmp != NULL) {
 80157d2:	4606      	mov	r6, r0
 80157d4:	2800      	cmp	r0, #0
 80157d6:	d1d4      	bne.n	8015782 <lv_cont_refr_layout+0x3b4>
 80157d8:	e75c      	b.n	8015694 <lv_cont_refr_layout+0x2c6>
    } else if(type == LV_LAYOUT_GRID) {
 80157da:	2d09      	cmp	r5, #9
 80157dc:	f040 8098 	bne.w	8015910 <lv_cont_refr_layout+0x542>
    const lv_style_t * style = lv_obj_get_style(cont);
 80157e0:	4620      	mov	r0, r4
 80157e2:	f7f9 fb49 	bl	800ee78 <lv_obj_get_style>
 80157e6:	4681      	mov	r9, r0
    lv_coord_t w_tot         = lv_obj_get_width(cont);
 80157e8:	4620      	mov	r0, r4
 80157ea:	f7f9 fb33 	bl	800ee54 <lv_obj_get_width>
    lv_coord_t w_obj         = lv_obj_get_width(lv_obj_get_child(cont, NULL));
 80157ee:	2100      	movs	r1, #0
    lv_coord_t w_tot         = lv_obj_get_width(cont);
 80157f0:	4607      	mov	r7, r0
    lv_coord_t w_obj         = lv_obj_get_width(lv_obj_get_child(cont, NULL));
 80157f2:	4620      	mov	r0, r4
 80157f4:	f7f9 faf0 	bl	800edd8 <lv_obj_get_child>
 80157f8:	f7f9 fb2c 	bl	800ee54 <lv_obj_get_width>
 80157fc:	4605      	mov	r5, r0
    lv_coord_t w_fit         =  lv_obj_get_width_fit(cont);
 80157fe:	4620      	mov	r0, r4
 8015800:	f7f9 fbaa 	bl	800ef58 <lv_obj_get_width_fit>
    lv_coord_t h_obj         = lv_obj_get_height(lv_obj_get_child(cont, NULL));
 8015804:	2100      	movs	r1, #0
    lv_coord_t w_fit         =  lv_obj_get_width_fit(cont);
 8015806:	4606      	mov	r6, r0
    lv_coord_t h_obj         = lv_obj_get_height(lv_obj_get_child(cont, NULL));
 8015808:	4620      	mov	r0, r4
 801580a:	f7f9 fae5 	bl	800edd8 <lv_obj_get_child>
 801580e:	f7f9 fb27 	bl	800ee60 <lv_obj_get_height>
    uint16_t obj_row         = (w_fit) / (w_obj + style->body.padding.inner); /*Obj. num. in a row*/
 8015812:	f9b9 201e 	ldrsh.w	r2, [r9, #30]
 8015816:	1953      	adds	r3, r2, r5
 8015818:	fb96 f3f3 	sdiv	r3, r6, r3
 801581c:	fa1f fa83 	uxth.w	sl, r3
    if(obj_row > 1) {
 8015820:	f1ba 0f01 	cmp.w	sl, #1
 8015824:	d944      	bls.n	80158b0 <lv_cont_refr_layout+0x4e2>
        x_ofs = w_obj + (w_fit - (obj_row * w_obj)) / (obj_row - 1);
 8015826:	fb0a 6615 	mls	r6, sl, r5, r6
 801582a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 801582e:	fb96 f3f3 	sdiv	r3, r6, r3
 8015832:	441d      	add	r5, r3
    lv_coord_t y_ofs = h_obj + style->body.padding.inner;
 8015834:	4410      	add	r0, r2
 8015836:	b283      	uxth	r3, r0
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 8015838:	2101      	movs	r1, #1
 801583a:	4620      	mov	r0, r4
    lv_coord_t y_ofs = h_obj + style->body.padding.inner;
 801583c:	9302      	str	r3, [sp, #8]
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 801583e:	f7f8 fc9f 	bl	800e180 <lv_obj_set_protect>
    LV_LL_READ_BACK(cont->child_ll, child)
 8015842:	1d23      	adds	r3, r4, #4
 8015844:	4618      	mov	r0, r3
    lv_coord_t act_x = style->body.padding.left;
 8015846:	f9b9 601a 	ldrsh.w	r6, [r9, #26]
    lv_coord_t act_y = style->body.padding.top;
 801584a:	f9b9 7016 	ldrsh.w	r7, [r9, #22]
    LV_LL_READ_BACK(cont->child_ll, child)
 801584e:	9303      	str	r3, [sp, #12]
 8015850:	f7fe fa01 	bl	8013c56 <lv_ll_get_tail>
        x_ofs = w_tot / 2 - w_obj / 2;
 8015854:	b22d      	sxth	r5, r5
    LV_LL_READ_BACK(cont->child_ll, child)
 8015856:	4683      	mov	fp, r0
    uint16_t obj_cnt = 0;
 8015858:	f04f 0800 	mov.w	r8, #0
    LV_LL_READ_BACK(cont->child_ll, child)
 801585c:	f1bb 0f00 	cmp.w	fp, #0
 8015860:	f43f aded 	beq.w	801543e <lv_cont_refr_layout+0x70>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 8015864:	4658      	mov	r0, fp
 8015866:	f7f9 fb85 	bl	800ef74 <lv_obj_get_hidden>
 801586a:	b9d8      	cbnz	r0, 80158a4 <lv_cont_refr_layout+0x4d6>
 801586c:	2104      	movs	r1, #4
 801586e:	4658      	mov	r0, fp
 8015870:	f7f9 fbe2 	bl	800f038 <lv_obj_is_protected>
 8015874:	b9b0      	cbnz	r0, 80158a4 <lv_cont_refr_layout+0x4d6>
        if(obj_row > 1) {
 8015876:	f1ba 0f01 	cmp.w	sl, #1
            lv_obj_set_pos(child, act_x, act_y);
 801587a:	463a      	mov	r2, r7
        if(obj_row > 1) {
 801587c:	d91f      	bls.n	80158be <lv_cont_refr_layout+0x4f0>
            lv_obj_set_pos(child, act_x, act_y);
 801587e:	4631      	mov	r1, r6
 8015880:	4658      	mov	r0, fp
 8015882:	f7f8 fdd4 	bl	800e42e <lv_obj_set_pos>
            act_x += x_ofs;
 8015886:	442e      	add	r6, r5
 8015888:	b236      	sxth	r6, r6
        obj_cnt++;
 801588a:	f108 0801 	add.w	r8, r8, #1
 801588e:	fa1f f888 	uxth.w	r8, r8
        if(obj_cnt >= obj_row) {
 8015892:	45c2      	cmp	sl, r8
 8015894:	d806      	bhi.n	80158a4 <lv_cont_refr_layout+0x4d6>
            act_y += y_ofs;
 8015896:	9b02      	ldr	r3, [sp, #8]
            act_x   = style->body.padding.left;
 8015898:	f9b9 601a 	ldrsh.w	r6, [r9, #26]
            act_y += y_ofs;
 801589c:	441f      	add	r7, r3
 801589e:	b23f      	sxth	r7, r7
            obj_cnt = 0;
 80158a0:	f04f 0800 	mov.w	r8, #0
    LV_LL_READ_BACK(cont->child_ll, child)
 80158a4:	4659      	mov	r1, fp
 80158a6:	9803      	ldr	r0, [sp, #12]
 80158a8:	f7fe f9dd 	bl	8013c66 <lv_ll_get_prev>
 80158ac:	4683      	mov	fp, r0
 80158ae:	e7d5      	b.n	801585c <lv_cont_refr_layout+0x48e>
        x_ofs = w_tot / 2 - w_obj / 2;
 80158b0:	2302      	movs	r3, #2
 80158b2:	fb97 f7f3 	sdiv	r7, r7, r3
 80158b6:	fb95 f5f3 	sdiv	r5, r5, r3
 80158ba:	1b7d      	subs	r5, r7, r5
 80158bc:	e7ba      	b.n	8015834 <lv_cont_refr_layout+0x466>
            lv_obj_set_pos(child, x_ofs, act_y);
 80158be:	4629      	mov	r1, r5
 80158c0:	4658      	mov	r0, fp
 80158c2:	f7f8 fdb4 	bl	800e42e <lv_obj_set_pos>
 80158c6:	e7e0      	b.n	801588a <lv_cont_refr_layout+0x4bc>
        if(obj_num == 0) {
 80158c8:	2f00      	cmp	r7, #0
 80158ca:	f47f aed9 	bne.w	8015680 <lv_cont_refr_layout+0x2b2>
                lv_obj_align(child_rc, cont, LV_ALIGN_IN_TOP_MID, 0, act_y);
 80158ce:	2300      	movs	r3, #0
 80158d0:	2202      	movs	r2, #2
 80158d2:	4621      	mov	r1, r4
 80158d4:	4628      	mov	r0, r5
 80158d6:	f8cd a000 	str.w	sl, [sp]
 80158da:	f7f8 fdfd 	bl	800e4d8 <lv_obj_align>
                h_row = lv_obj_get_height(child_rc); /*Not set previously because of the early break*/
 80158de:	4628      	mov	r0, r5
 80158e0:	f7f9 fabe 	bl	800ee60 <lv_obj_get_height>
 80158e4:	4681      	mov	r9, r0
        if(child_rc == NULL) break;
 80158e6:	462e      	mov	r6, r5
        act_y += style->body.padding.inner + h_row;           /*y increment*/
 80158e8:	f8b8 301e 	ldrh.w	r3, [r8, #30]
        child_rs = lv_ll_get_prev(&cont->child_ll, child_rc); /*Go to the next object*/
 80158ec:	9802      	ldr	r0, [sp, #8]
 80158ee:	4631      	mov	r1, r6
        act_y += style->body.padding.inner + h_row;           /*y increment*/
 80158f0:	449a      	add	sl, r3
        child_rs = lv_ll_get_prev(&cont->child_ll, child_rc); /*Go to the next object*/
 80158f2:	f7fe f9b8 	bl	8013c66 <lv_ll_get_prev>
        act_y += style->body.padding.inner + h_row;           /*y increment*/
 80158f6:	44d1      	add	r9, sl
 80158f8:	fa0f fa89 	sxth.w	sl, r9
    while(child_rs != NULL) {
 80158fc:	4605      	mov	r5, r0
 80158fe:	2800      	cmp	r0, #0
 8015900:	f47f ae9b 	bne.w	801563a <lv_cont_refr_layout+0x26c>
 8015904:	e59b      	b.n	801543e <lv_cont_refr_layout+0x70>
        } while(child_rc != NULL);
 8015906:	2800      	cmp	r0, #0
 8015908:	f43f ad99 	beq.w	801543e <lv_cont_refr_layout+0x70>
 801590c:	462e      	mov	r6, r5
 801590e:	e69e      	b.n	801564e <lv_cont_refr_layout+0x280>
}
 8015910:	b007      	add	sp, #28
 8015912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08015918 <lv_cont_signal>:
{
 8015918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    res = ancestor_signal(cont, sign, param);
 801591a:	4b1e      	ldr	r3, [pc, #120]	; (8015994 <lv_cont_signal+0x7c>)
 801591c:	681b      	ldr	r3, [r3, #0]
{
 801591e:	4604      	mov	r4, r0
 8015920:	460f      	mov	r7, r1
 8015922:	4616      	mov	r6, r2
    res = ancestor_signal(cont, sign, param);
 8015924:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8015926:	2801      	cmp	r0, #1
    res = ancestor_signal(cont, sign, param);
 8015928:	4605      	mov	r5, r0
    if(res != LV_RES_OK) return res;
 801592a:	d120      	bne.n	801596e <lv_cont_signal+0x56>
    if(sign == LV_SIGNAL_STYLE_CHG) { /*Recalculate the padding if the style changed*/
 801592c:	2f04      	cmp	r7, #4
 801592e:	d106      	bne.n	801593e <lv_cont_signal+0x26>
        lv_cont_refr_layout(cont);
 8015930:	4620      	mov	r0, r4
 8015932:	f7ff fd4c 	bl	80153ce <lv_cont_refr_layout>
        lv_cont_refr_autofit(cont);
 8015936:	4620      	mov	r0, r4
 8015938:	f7ff fb3c 	bl	8014fb4 <lv_cont_refr_autofit>
 801593c:	e017      	b.n	801596e <lv_cont_signal+0x56>
    } else if(sign == LV_SIGNAL_CHILD_CHG) {
 801593e:	2f01      	cmp	r7, #1
 8015940:	d0f6      	beq.n	8015930 <lv_cont_signal+0x18>
    } else if(sign == LV_SIGNAL_CORD_CHG) {
 8015942:	2f02      	cmp	r7, #2
 8015944:	d115      	bne.n	8015972 <lv_cont_signal+0x5a>
        if(lv_obj_get_width(cont) != lv_area_get_width(param) || lv_obj_get_height(cont) != lv_area_get_height(param)) {
 8015946:	4620      	mov	r0, r4
 8015948:	f7f9 fa84 	bl	800ee54 <lv_obj_get_width>
    return area_p->x2 - area_p->x1 + 1;
 801594c:	88b3      	ldrh	r3, [r6, #4]
 801594e:	8832      	ldrh	r2, [r6, #0]
 8015950:	3301      	adds	r3, #1
 8015952:	1a9b      	subs	r3, r3, r2
 8015954:	b21b      	sxth	r3, r3
 8015956:	4298      	cmp	r0, r3
 8015958:	d1ea      	bne.n	8015930 <lv_cont_signal+0x18>
 801595a:	4620      	mov	r0, r4
 801595c:	f7f9 fa80 	bl	800ee60 <lv_obj_get_height>
    return area_p->y2 - area_p->y1 + 1;
 8015960:	88f3      	ldrh	r3, [r6, #6]
 8015962:	8872      	ldrh	r2, [r6, #2]
 8015964:	3301      	adds	r3, #1
 8015966:	1a9b      	subs	r3, r3, r2
 8015968:	b21b      	sxth	r3, r3
 801596a:	4298      	cmp	r0, r3
 801596c:	d1e0      	bne.n	8015930 <lv_cont_signal+0x18>
}
 801596e:	4628      	mov	r0, r5
 8015970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if(sign == LV_SIGNAL_PARENT_SIZE_CHG) {
 8015972:	2f03      	cmp	r7, #3
 8015974:	d0df      	beq.n	8015936 <lv_cont_signal+0x1e>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8015976:	2f06      	cmp	r7, #6
 8015978:	d1f9      	bne.n	801596e <lv_cont_signal+0x56>
 801597a:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 801597c:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8015980:	b2da      	uxtb	r2, r3
 8015982:	b119      	cbz	r1, 801598c <lv_cont_signal+0x74>
 8015984:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8015986:	2b07      	cmp	r3, #7
 8015988:	d1f8      	bne.n	801597c <lv_cont_signal+0x64>
 801598a:	461a      	mov	r2, r3
        buf->type[i] = "lv_cont";
 801598c:	4b02      	ldr	r3, [pc, #8]	; (8015998 <lv_cont_signal+0x80>)
 801598e:	f846 3022 	str.w	r3, [r6, r2, lsl #2]
 8015992:	e7ec      	b.n	801596e <lv_cont_signal+0x56>
 8015994:	2000afb8 	.word	0x2000afb8
 8015998:	080d89e4 	.word	0x080d89e4

0801599c <lv_cont_get_fit_left>:
{
 801599c:	b508      	push	{r3, lr}
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 801599e:	f7f9 fb56 	bl	800f04e <lv_obj_get_ext_attr>
    return ext->fit_left;
 80159a2:	7800      	ldrb	r0, [r0, #0]
}
 80159a4:	f3c0 1001 	ubfx	r0, r0, #4, #2
 80159a8:	bd08      	pop	{r3, pc}

080159aa <lv_cont_get_fit_top>:
{
 80159aa:	b508      	push	{r3, lr}
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 80159ac:	f7f9 fb4f 	bl	800f04e <lv_obj_get_ext_attr>
    return ext->fit_top;
 80159b0:	7840      	ldrb	r0, [r0, #1]
}
 80159b2:	f000 0003 	and.w	r0, r0, #3
 80159b6:	bd08      	pop	{r3, pc}

080159b8 <lv_cont_get_fit_bottom>:
{
 80159b8:	b508      	push	{r3, lr}
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 80159ba:	f7f9 fb48 	bl	800f04e <lv_obj_get_ext_attr>
    return ext->fit_bottom;
 80159be:	7840      	ldrb	r0, [r0, #1]
}
 80159c0:	f3c0 0081 	ubfx	r0, r0, #2, #2
 80159c4:	bd08      	pop	{r3, pc}

080159c6 <lv_ddlist_pos_current_option>:
/**
 * Set the position of list when it is closed to show the selected item
 * @param ddlist pointer to a drop down list
 */
static void lv_ddlist_pos_current_option(lv_obj_t * ddlist)
{
 80159c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159ca:	4604      	mov	r4, r0
    lv_ddlist_ext_t * ext          = lv_obj_get_ext_attr(ddlist);
 80159cc:	f7f9 fb3f 	bl	800f04e <lv_obj_get_ext_attr>
 80159d0:	4606      	mov	r6, r0
    const lv_style_t * style       = lv_obj_get_style(ddlist);
 80159d2:	4620      	mov	r0, r4
 80159d4:	f7f9 fa50 	bl	800ee78 <lv_obj_get_style>
 80159d8:	6a43      	ldr	r3, [r0, #36]	; 0x24
    const lv_font_t * font         = style->text.font;
    lv_coord_t font_h              = lv_font_get_line_height(font);
    const lv_style_t * label_style = lv_obj_get_style(ext->label);
 80159da:	6b30      	ldr	r0, [r6, #48]	; 0x30
 80159dc:	7a1f      	ldrb	r7, [r3, #8]
 80159de:	f7f9 fa4b 	bl	800ee78 <lv_obj_get_style>
 80159e2:	4680      	mov	r8, r0
    lv_obj_t * scrl                = lv_page_get_scrl(ddlist);
 80159e4:	4620      	mov	r0, r4
 80159e6:	f002 f8b6 	bl	8017b56 <lv_page_get_scrl>
 80159ea:	4605      	mov	r5, r0

    lv_coord_t h = lv_obj_get_height(ddlist);
 80159ec:	4620      	mov	r0, r4
 80159ee:	f7f9 fa37 	bl	800ee60 <lv_obj_get_height>
    lv_coord_t line_y1 =
        ext->sel_opt_id * (font_h + label_style->text.line_space) + ext->label->coords.y1 - scrl->coords.y1;
 80159f2:	6b33      	ldr	r3, [r6, #48]	; 0x30

    lv_obj_set_y(scrl, -line_y1 + (h - font_h) / 2);
 80159f4:	1bc1      	subs	r1, r0, r7
 80159f6:	2002      	movs	r0, #2
 80159f8:	fb91 f1f0 	sdiv	r1, r1, r0
 80159fc:	8a58      	ldrh	r0, [r3, #18]
 80159fe:	8a6b      	ldrh	r3, [r5, #18]
 8015a00:	1ac0      	subs	r0, r0, r3
 8015a02:	1a09      	subs	r1, r1, r0
        ext->sel_opt_id * (font_h + label_style->text.line_space) + ext->label->coords.y1 - scrl->coords.y1;
 8015a04:	f9b8 002a 	ldrsh.w	r0, [r8, #42]	; 0x2a
 8015a08:	19c3      	adds	r3, r0, r7
 8015a0a:	8f70      	ldrh	r0, [r6, #58]	; 0x3a
 8015a0c:	fb10 f003 	smulbb	r0, r0, r3
    lv_obj_set_y(scrl, -line_y1 + (h - font_h) / 2);
 8015a10:	1a09      	subs	r1, r1, r0
 8015a12:	b209      	sxth	r1, r1
 8015a14:	4628      	mov	r0, r5
 8015a16:	f7f8 fd57 	bl	800e4c8 <lv_obj_set_y>
    lv_obj_invalidate(ddlist);
 8015a1a:	4620      	mov	r0, r4
}
 8015a1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_obj_invalidate(ddlist);
 8015a20:	f7f8 bc98 	b.w	800e354 <lv_obj_invalidate>

08015a24 <lv_ddlist_adjust_height>:
{
 8015a24:	b510      	push	{r4, lr}
 8015a26:	4604      	mov	r4, r0
    lv_obj_set_height(ddlist, height);
 8015a28:	f7f9 f947 	bl	800ecba <lv_obj_set_height>
    lv_ddlist_pos_current_option(ddlist);
 8015a2c:	4620      	mov	r0, r4
}
 8015a2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_ddlist_pos_current_option(ddlist);
 8015a32:	f7ff bfc8 	b.w	80159c6 <lv_ddlist_pos_current_option>

08015a36 <lv_ddlist_anim_finish>:
{
 8015a36:	b538      	push	{r3, r4, r5, lr}
 8015a38:	4604      	mov	r4, r0
    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
 8015a3a:	f7f9 fb08 	bl	800f04e <lv_obj_get_ext_attr>
 8015a3e:	4605      	mov	r5, r0
    lv_ddlist_pos_current_option(ddlist);
 8015a40:	4620      	mov	r0, r4
 8015a42:	f7ff ffc0 	bl	80159c6 <lv_ddlist_pos_current_option>
    ext->force_sel = 0; /*Turn off drawing of selection*/
 8015a46:	f895 303e 	ldrb.w	r3, [r5, #62]	; 0x3e
 8015a4a:	f36f 0341 	bfc	r3, #1, #1
 8015a4e:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    if(ext->opened) lv_page_set_sb_mode(ddlist, LV_SB_MODE_UNHIDE);
 8015a52:	07db      	lsls	r3, r3, #31
 8015a54:	d505      	bpl.n	8015a62 <lv_ddlist_anim_finish+0x2c>
 8015a56:	4620      	mov	r0, r4
 8015a58:	2105      	movs	r1, #5
}
 8015a5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if(ext->opened) lv_page_set_sb_mode(ddlist, LV_SB_MODE_UNHIDE);
 8015a5e:	f002 b817 	b.w	8017a90 <lv_page_set_sb_mode>
 8015a62:	bd38      	pop	{r3, r4, r5, pc}

08015a64 <lv_ddlist_anim_ready_cb>:
    lv_ddlist_anim_finish(ddlist);
 8015a64:	6800      	ldr	r0, [r0, #0]
 8015a66:	f7ff bfe6 	b.w	8015a36 <lv_ddlist_anim_finish>
	...

08015a6c <lv_ddlist_refr_size>:
{
 8015a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a70:	b08a      	sub	sp, #40	; 0x28
 8015a72:	4605      	mov	r5, r0
 8015a74:	460f      	mov	r7, r1
    lv_ddlist_ext_t * ext    = lv_obj_get_ext_attr(ddlist);
 8015a76:	f7f9 faea 	bl	800f04e <lv_obj_get_ext_attr>
 8015a7a:	4606      	mov	r6, r0
    const lv_style_t * style = lv_obj_get_style(ddlist);
 8015a7c:	4628      	mov	r0, r5
 8015a7e:	f7f9 f9fb 	bl	800ee78 <lv_obj_get_style>
    if(ext->opened) {
 8015a82:	f896 303e 	ldrb.w	r3, [r6, #62]	; 0x3e
 8015a86:	07da      	lsls	r2, r3, #31
    const lv_style_t * style = lv_obj_get_style(ddlist);
 8015a88:	4680      	mov	r8, r0
    if(ext->opened) {
 8015a8a:	d528      	bpl.n	8015ade <lv_ddlist_refr_size+0x72>
        if(ext->fix_height == 0) {
 8015a8c:	f9b6 4040 	ldrsh.w	r4, [r6, #64]	; 0x40
 8015a90:	b95c      	cbnz	r4, 8015aaa <lv_ddlist_refr_size+0x3e>
                lv_obj_get_height(lv_page_get_scrl(ddlist)) + style->body.padding.top + style->body.padding.bottom;
 8015a92:	4628      	mov	r0, r5
 8015a94:	f002 f85f 	bl	8017b56 <lv_page_get_scrl>
 8015a98:	f7f9 f9e2 	bl	800ee60 <lv_obj_get_height>
 8015a9c:	f8b8 4016 	ldrh.w	r4, [r8, #22]
 8015aa0:	f8b8 3018 	ldrh.w	r3, [r8, #24]
 8015aa4:	441c      	add	r4, r3
 8015aa6:	4404      	add	r4, r0
            new_height =
 8015aa8:	b224      	sxth	r4, r4
    if(anim == LV_ANIM_OFF) {
 8015aaa:	bb37      	cbnz	r7, 8015afa <lv_ddlist_refr_size+0x8e>
        lv_obj_set_height(ddlist, new_height);
 8015aac:	4621      	mov	r1, r4
 8015aae:	4628      	mov	r0, r5
 8015ab0:	f7f9 f903 	bl	800ecba <lv_obj_set_height>
        lv_ddlist_pos_current_option(ddlist);
 8015ab4:	4628      	mov	r0, r5
 8015ab6:	f7ff ff86 	bl	80159c6 <lv_ddlist_pos_current_option>
        if(ext->opened) lv_page_set_sb_mode(ddlist, LV_SB_MODE_UNHIDE);
 8015aba:	f896 303e 	ldrb.w	r3, [r6, #62]	; 0x3e
 8015abe:	07db      	lsls	r3, r3, #31
 8015ac0:	d503      	bpl.n	8015aca <lv_ddlist_refr_size+0x5e>
 8015ac2:	2105      	movs	r1, #5
 8015ac4:	4628      	mov	r0, r5
 8015ac6:	f001 ffe3 	bl	8017a90 <lv_page_set_sb_mode>
        lv_anim_del(ddlist, (lv_anim_exec_xcb_t)lv_ddlist_adjust_height); /*If an animation is in progress then
 8015aca:	4923      	ldr	r1, [pc, #140]	; (8015b58 <lv_ddlist_refr_size+0xec>)
 8015acc:	4628      	mov	r0, r5
 8015ace:	f7fd ff21 	bl	8013914 <lv_anim_del>
        lv_ddlist_anim_finish(ddlist);
 8015ad2:	4628      	mov	r0, r5
 8015ad4:	f7ff ffaf 	bl	8015a36 <lv_ddlist_anim_finish>
}
 8015ad8:	b00a      	add	sp, #40	; 0x28
 8015ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        const lv_font_t * font         = style->text.font;
 8015ade:	6a44      	ldr	r4, [r0, #36]	; 0x24
        const lv_style_t * label_style = lv_obj_get_style(ext->label);
 8015ae0:	6b30      	ldr	r0, [r6, #48]	; 0x30
 8015ae2:	f7f9 f9c9 	bl	800ee78 <lv_obj_get_style>
        new_height                     = font_h + 2 * label_style->text.line_space;
 8015ae6:	7a24      	ldrb	r4, [r4, #8]
 8015ae8:	8d40      	ldrh	r0, [r0, #42]	; 0x2a
        lv_page_set_sb_mode(ddlist, LV_SB_MODE_HIDE);
 8015aea:	2104      	movs	r1, #4
        new_height                     = font_h + 2 * label_style->text.line_space;
 8015aec:	eb04 0440 	add.w	r4, r4, r0, lsl #1
        lv_page_set_sb_mode(ddlist, LV_SB_MODE_HIDE);
 8015af0:	4628      	mov	r0, r5
        new_height                     = font_h + 2 * label_style->text.line_space;
 8015af2:	b224      	sxth	r4, r4
        lv_page_set_sb_mode(ddlist, LV_SB_MODE_HIDE);
 8015af4:	f001 ffcc 	bl	8017a90 <lv_page_set_sb_mode>
 8015af8:	e7d7      	b.n	8015aaa <lv_ddlist_refr_size+0x3e>
        if(lv_obj_get_height(ddlist) != new_height) {
 8015afa:	4628      	mov	r0, r5
 8015afc:	f7f9 f9b0 	bl	800ee60 <lv_obj_get_height>
 8015b00:	4284      	cmp	r4, r0
 8015b02:	d0e9      	beq.n	8015ad8 <lv_ddlist_refr_size+0x6c>
            a.start          = lv_obj_get_height(ddlist);
 8015b04:	4628      	mov	r0, r5
            a.var            = ddlist;
 8015b06:	9500      	str	r5, [sp, #0]
            a.start          = lv_obj_get_height(ddlist);
 8015b08:	f7f9 f9aa 	bl	800ee60 <lv_obj_get_height>
            a.exec_cb        = (lv_anim_exec_xcb_t)lv_ddlist_adjust_height;
 8015b0c:	4b12      	ldr	r3, [pc, #72]	; (8015b58 <lv_ddlist_refr_size+0xec>)
 8015b0e:	9301      	str	r3, [sp, #4]
            a.path_cb        = lv_anim_path_linear;
 8015b10:	4b12      	ldr	r3, [pc, #72]	; (8015b5c <lv_ddlist_refr_size+0xf0>)
            a.start          = lv_obj_get_height(ddlist);
 8015b12:	9004      	str	r0, [sp, #16]
            a.end            = new_height;
 8015b14:	9405      	str	r4, [sp, #20]
            a.path_cb        = lv_anim_path_linear;
 8015b16:	9302      	str	r3, [sp, #8]
            a.act_time       = 0;
 8015b18:	2400      	movs	r4, #0
            a.ready_cb       = lv_ddlist_anim_ready_cb;
 8015b1a:	4b11      	ldr	r3, [pc, #68]	; (8015b60 <lv_ddlist_refr_size+0xf4>)
 8015b1c:	9303      	str	r3, [sp, #12]
 * @param ddlist pointer to a drop down list
 * @return open/close animation time [ms]
 */
static inline uint16_t lv_ddlist_get_anim_time(const lv_obj_t * ddlist)
{
    return lv_page_get_anim_time(ddlist);
 8015b1e:	4628      	mov	r0, r5
            a.act_time       = 0;
 8015b20:	f8ad 401a 	strh.w	r4, [sp, #26]
 8015b24:	f002 f81c 	bl	8017b60 <lv_page_get_anim_time>
            a.playback       = 0;
 8015b28:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
            a.time           = lv_ddlist_get_anim_time(ddlist);
 8015b2c:	f8ad 0018 	strh.w	r0, [sp, #24]
            a.repeat         = 0;
 8015b30:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8015b34:	f364 0341 	bfi	r3, r4, #1, #1
 8015b38:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
            ext->force_sel = 1; /*Keep the list item selected*/
 8015b3c:	f896 303e 	ldrb.w	r3, [r6, #62]	; 0x3e
            a.playback_pause = 0;
 8015b40:	f8ad 401c 	strh.w	r4, [sp, #28]
            ext->force_sel = 1; /*Keep the list item selected*/
 8015b44:	f043 0302 	orr.w	r3, r3, #2
 8015b48:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
            lv_anim_create(&a);
 8015b4c:	4668      	mov	r0, sp
            a.repeat_pause   = 0;
 8015b4e:	f8ad 401e 	strh.w	r4, [sp, #30]
            lv_anim_create(&a);
 8015b52:	f7fd ff0d 	bl	8013970 <lv_anim_create>
}
 8015b56:	e7bf      	b.n	8015ad8 <lv_ddlist_refr_size+0x6c>
 8015b58:	08015a25 	.word	0x08015a25
 8015b5c:	08013799 	.word	0x08013799
 8015b60:	08015a65 	.word	0x08015a65

08015b64 <release_handler>:
{
 8015b64:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8015b68:	4605      	mov	r5, r0
    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
 8015b6a:	f7f9 fa70 	bl	800f04e <lv_obj_get_ext_attr>
    if(ext->opened == 0) { /*Open the list*/
 8015b6e:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8015b72:	07da      	lsls	r2, r3, #31
    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
 8015b74:	4604      	mov	r4, r0
    if(ext->opened == 0) { /*Open the list*/
 8015b76:	d412      	bmi.n	8015b9e <release_handler+0x3a>
        ext->opened = 1;
 8015b78:	f043 0301 	orr.w	r3, r3, #1
 8015b7c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        lv_obj_set_drag(lv_page_get_scrl(ddlist), true);
 8015b80:	4628      	mov	r0, r5
 8015b82:	f001 ffe8 	bl	8017b56 <lv_page_get_scrl>
 8015b86:	2101      	movs	r1, #1
 8015b88:	f7f8 fae5 	bl	800e156 <lv_obj_set_drag>
        lv_ddlist_refr_size(ddlist, true);
 8015b8c:	2101      	movs	r1, #1
 8015b8e:	4628      	mov	r0, r5
 8015b90:	f7ff ff6c 	bl	8015a6c <lv_ddlist_refr_size>
    return LV_RES_OK;
 8015b94:	2601      	movs	r6, #1
}
 8015b96:	4630      	mov	r0, r6
 8015b98:	b002      	add	sp, #8
 8015b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        lv_indev_t * indev = lv_indev_get_act();
 8015b9e:	f7f8 fa2d 	bl	800dffc <lv_indev_get_act>
 8015ba2:	4606      	mov	r6, r0
        if(lv_indev_get_type(indev) == LV_INDEV_TYPE_ENCODER) {
 8015ba4:	f7f8 fa30 	bl	800e008 <lv_indev_get_type>
 8015ba8:	2804      	cmp	r0, #4
 8015baa:	d10c      	bne.n	8015bc6 <release_handler+0x62>
            ext->sel_opt_id_ori = ext->sel_opt_id;
 8015bac:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8015bae:	87a3      	strh	r3, [r4, #60]	; 0x3c
            lv_group_t * g      = lv_obj_get_group(ddlist);
 8015bb0:	4628      	mov	r0, r5
 8015bb2:	f7f9 fa52 	bl	800f05a <lv_obj_get_group>
 8015bb6:	4607      	mov	r7, r0
            if(lv_group_get_editing(g)) {
 8015bb8:	f7f8 fa0b 	bl	800dfd2 <lv_group_get_editing>
 8015bbc:	b118      	cbz	r0, 8015bc6 <release_handler+0x62>
                lv_group_set_editing(g, false);
 8015bbe:	2100      	movs	r1, #0
 8015bc0:	4638      	mov	r0, r7
 8015bc2:	f7f8 f9e4 	bl	800df8e <lv_group_set_editing>
        if(lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON) {
 8015bc6:	4630      	mov	r0, r6
 8015bc8:	f7f8 fa1e 	bl	800e008 <lv_indev_get_type>
 8015bcc:	2801      	cmp	r0, #1
 8015bce:	d122      	bne.n	8015c16 <release_handler+0xb2>
            lv_indev_get_point(indev, &p);
 8015bd0:	4630      	mov	r0, r6
 8015bd2:	4669      	mov	r1, sp
 8015bd4:	f7f8 fa25 	bl	800e022 <lv_indev_get_point>
            p.y -= ext->label->coords.y1;
 8015bd8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8015bda:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015bde:	8a42      	ldrh	r2, [r0, #18]
                letter = lv_txt_encoded_next(txt, &i);
 8015be0:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8015c80 <release_handler+0x11c>
            p.y -= ext->label->coords.y1;
 8015be4:	1a9b      	subs	r3, r3, r2
 8015be6:	f8ad 3002 	strh.w	r3, [sp, #2]
            p.x -= ext->label->coords.x1;
 8015bea:	8a02      	ldrh	r2, [r0, #16]
 8015bec:	f8bd 3000 	ldrh.w	r3, [sp]
            letter_i = lv_label_get_letter_on(ext->label, &p);
 8015bf0:	4669      	mov	r1, sp
            p.x -= ext->label->coords.x1;
 8015bf2:	1a9b      	subs	r3, r3, r2
 8015bf4:	f8ad 3000 	strh.w	r3, [sp]
            letter_i = lv_label_get_letter_on(ext->label, &p);
 8015bf8:	f001 f8f4 	bl	8016de4 <lv_label_get_letter_on>
 8015bfc:	4680      	mov	r8, r0
            const char * txt  = lv_label_get_text(ext->label);
 8015bfe:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8015c00:	f001 f8ce 	bl	8016da0 <lv_label_get_text>
            uint32_t i        = 0;
 8015c04:	2600      	movs	r6, #0
            const char * txt  = lv_label_get_text(ext->label);
 8015c06:	4681      	mov	r9, r0
            uint32_t i        = 0;
 8015c08:	9601      	str	r6, [sp, #4]
            uint16_t new_opt  = 0;
 8015c0a:	4637      	mov	r7, r6
            for(line_cnt = 0; line_cnt < letter_i; line_cnt++) {
 8015c0c:	4546      	cmp	r6, r8
 8015c0e:	d325      	bcc.n	8015c5c <release_handler+0xf8>
            ext->sel_opt_id     = new_opt;
 8015c10:	8767      	strh	r7, [r4, #58]	; 0x3a
            ext->sel_opt_id_ori = ext->sel_opt_id;
 8015c12:	87a7      	strh	r7, [r4, #60]	; 0x3c
 8015c14:	e004      	b.n	8015c20 <release_handler+0xbc>
        if(lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON) {
 8015c16:	4630      	mov	r0, r6
 8015c18:	f7f8 f9f6 	bl	800e008 <lv_indev_get_type>
 8015c1c:	2803      	cmp	r0, #3
 8015c1e:	d0d7      	beq.n	8015bd0 <release_handler+0x6c>
        uint32_t id  = ext->sel_opt_id; /*Just to use uint32_t in event data*/
 8015c20:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8015c22:	9301      	str	r3, [sp, #4]
        lv_res_t res = lv_event_send(ddlist, LV_EVENT_VALUE_CHANGED, &id);
 8015c24:	aa01      	add	r2, sp, #4
 8015c26:	210e      	movs	r1, #14
 8015c28:	4628      	mov	r0, r5
 8015c2a:	f7f8 fafd 	bl	800e228 <lv_event_send>
        if(res != LV_RES_OK) return res;
 8015c2e:	2801      	cmp	r0, #1
        lv_res_t res = lv_event_send(ddlist, LV_EVENT_VALUE_CHANGED, &id);
 8015c30:	4606      	mov	r6, r0
        if(res != LV_RES_OK) return res;
 8015c32:	d1b0      	bne.n	8015b96 <release_handler+0x32>
        if(ext->stay_open == 0) {
 8015c34:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8015c38:	f013 0708 	ands.w	r7, r3, #8
 8015c3c:	d11c      	bne.n	8015c78 <release_handler+0x114>
            ext->opened = 0;
 8015c3e:	f367 0300 	bfi	r3, r7, #0, #1
 8015c42:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
            lv_obj_set_drag(lv_page_get_scrl(ddlist), false);
 8015c46:	4628      	mov	r0, r5
 8015c48:	f001 ff85 	bl	8017b56 <lv_page_get_scrl>
 8015c4c:	4639      	mov	r1, r7
 8015c4e:	f7f8 fa82 	bl	800e156 <lv_obj_set_drag>
            lv_ddlist_refr_size(ddlist, true);
 8015c52:	4631      	mov	r1, r6
 8015c54:	4628      	mov	r0, r5
 8015c56:	f7ff ff09 	bl	8015a6c <lv_ddlist_refr_size>
 8015c5a:	e79c      	b.n	8015b96 <release_handler+0x32>
                letter = lv_txt_encoded_next(txt, &i);
 8015c5c:	a901      	add	r1, sp, #4
 8015c5e:	4648      	mov	r0, r9
 8015c60:	f8da 3000 	ldr.w	r3, [sl]
 8015c64:	4798      	blx	r3
                if(letter == '\n' && i != letter_i) new_opt++;
 8015c66:	280a      	cmp	r0, #10
 8015c68:	d104      	bne.n	8015c74 <release_handler+0x110>
 8015c6a:	9b01      	ldr	r3, [sp, #4]
 8015c6c:	4598      	cmp	r8, r3
 8015c6e:	bf1c      	itt	ne
 8015c70:	3701      	addne	r7, #1
 8015c72:	b2bf      	uxthne	r7, r7
            for(line_cnt = 0; line_cnt < letter_i; line_cnt++) {
 8015c74:	3601      	adds	r6, #1
 8015c76:	e7c9      	b.n	8015c0c <release_handler+0xa8>
            lv_obj_invalidate(ddlist);
 8015c78:	4628      	mov	r0, r5
 8015c7a:	f7f8 fb6b 	bl	800e354 <lv_obj_invalidate>
 8015c7e:	e78a      	b.n	8015b96 <release_handler+0x32>
 8015c80:	20001ca4 	.word	0x20001ca4

08015c84 <lv_ddlist_signal>:
    res = ancestor_signal(ddlist, sign, param);
 8015c84:	4b4c      	ldr	r3, [pc, #304]	; (8015db8 <lv_ddlist_signal+0x134>)
{
 8015c86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    res = ancestor_signal(ddlist, sign, param);
 8015c8a:	681b      	ldr	r3, [r3, #0]
{
 8015c8c:	4605      	mov	r5, r0
 8015c8e:	460e      	mov	r6, r1
 8015c90:	4690      	mov	r8, r2
    res = ancestor_signal(ddlist, sign, param);
 8015c92:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8015c94:	2801      	cmp	r0, #1
    res = ancestor_signal(ddlist, sign, param);
 8015c96:	4607      	mov	r7, r0
    if(res != LV_RES_OK) return res;
 8015c98:	d10c      	bne.n	8015cb4 <lv_ddlist_signal+0x30>
    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
 8015c9a:	4628      	mov	r0, r5
 8015c9c:	f7f9 f9d7 	bl	800f04e <lv_obj_get_ext_attr>
    if(sign == LV_SIGNAL_STYLE_CHG) {
 8015ca0:	2e04      	cmp	r6, #4
    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
 8015ca2:	4604      	mov	r4, r0
    if(sign == LV_SIGNAL_STYLE_CHG) {
 8015ca4:	d104      	bne.n	8015cb0 <lv_ddlist_signal+0x2c>
        lv_ddlist_refr_size(ddlist, 0);
 8015ca6:	2100      	movs	r1, #0
                lv_ddlist_refr_size(ddlist, true);
 8015ca8:	4628      	mov	r0, r5
 8015caa:	f7ff fedf 	bl	8015a6c <lv_ddlist_refr_size>
 8015cae:	e001      	b.n	8015cb4 <lv_ddlist_signal+0x30>
    } else if(sign == LV_SIGNAL_CLEANUP) {
 8015cb0:	b91e      	cbnz	r6, 8015cba <lv_ddlist_signal+0x36>
        ext->label = NULL;
 8015cb2:	6306      	str	r6, [r0, #48]	; 0x30
}
 8015cb4:	4638      	mov	r0, r7
 8015cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if(sign == LV_SIGNAL_FOCUS) {
 8015cba:	2e0f      	cmp	r6, #15
 8015cbc:	d120      	bne.n	8015d00 <lv_ddlist_signal+0x7c>
        lv_group_t * g             = lv_obj_get_group(ddlist);
 8015cbe:	4628      	mov	r0, r5
 8015cc0:	f7f9 f9cb 	bl	800f05a <lv_obj_get_group>
        bool editing               = lv_group_get_editing(g);
 8015cc4:	f7f8 f985 	bl	800dfd2 <lv_group_get_editing>
 8015cc8:	4606      	mov	r6, r0
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 8015cca:	f7f8 f997 	bl	800dffc <lv_indev_get_act>
 8015cce:	f7f8 f99b 	bl	800e008 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 8015cd2:	2804      	cmp	r0, #4
 8015cd4:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8015cd8:	d10f      	bne.n	8015cfa <lv_ddlist_signal+0x76>
            if(editing) {
 8015cda:	b13e      	cbz	r6, 8015cec <lv_ddlist_signal+0x68>
                ext->opened         = true;
 8015cdc:	f043 0301 	orr.w	r3, r3, #1
 8015ce0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
                ext->sel_opt_id_ori = ext->sel_opt_id; /*Save the current value. Used to revert this
 8015ce4:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8015ce6:	87a3      	strh	r3, [r4, #60]	; 0x3c
                lv_ddlist_refr_size(ddlist, true);
 8015ce8:	2101      	movs	r1, #1
 8015cea:	e7dd      	b.n	8015ca8 <lv_ddlist_signal+0x24>
                ext->opened     = false;
 8015cec:	f366 0300 	bfi	r3, r6, #0, #1
                ext->opened     = 0;
 8015cf0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
                ext->sel_opt_id = ext->sel_opt_id_ori;
 8015cf4:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8015cf6:	8763      	strh	r3, [r4, #58]	; 0x3a
 8015cf8:	e7f6      	b.n	8015ce8 <lv_ddlist_signal+0x64>
            if(!ext->opened) {
 8015cfa:	07de      	lsls	r6, r3, #31
 8015cfc:	d4da      	bmi.n	8015cb4 <lv_ddlist_signal+0x30>
 8015cfe:	e7ed      	b.n	8015cdc <lv_ddlist_signal+0x58>
    } else if(sign == LV_SIGNAL_RELEASED) {
 8015d00:	2e0a      	cmp	r6, #10
 8015d02:	d103      	bne.n	8015d0c <lv_ddlist_signal+0x88>
        release_handler(ddlist);
 8015d04:	4628      	mov	r0, r5
 8015d06:	f7ff ff2d 	bl	8015b64 <release_handler>
 8015d0a:	e7d3      	b.n	8015cb4 <lv_ddlist_signal+0x30>
    } else if(sign == LV_SIGNAL_DEFOCUS) {
 8015d0c:	2e10      	cmp	r6, #16
 8015d0e:	d106      	bne.n	8015d1e <lv_ddlist_signal+0x9a>
            if(ext->opened) {
 8015d10:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8015d14:	07da      	lsls	r2, r3, #31
 8015d16:	d5cd      	bpl.n	8015cb4 <lv_ddlist_signal+0x30>
                ext->opened     = 0;
 8015d18:	f36f 0300 	bfc	r3, #0, #1
 8015d1c:	e7e8      	b.n	8015cf0 <lv_ddlist_signal+0x6c>
    } else if(sign == LV_SIGNAL_CONTROL) {
 8015d1e:	2e11      	cmp	r6, #17
 8015d20:	d136      	bne.n	8015d90 <lv_ddlist_signal+0x10c>
        char c = *((char *)param);
 8015d22:	f898 3000 	ldrb.w	r3, [r8]
        if(c == LV_KEY_RIGHT || c == LV_KEY_DOWN) {
 8015d26:	f1a3 0212 	sub.w	r2, r3, #18
 8015d2a:	2a01      	cmp	r2, #1
 8015d2c:	d818      	bhi.n	8015d60 <lv_ddlist_signal+0xdc>
            if(!ext->opened) {
 8015d2e:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8015d32:	07d8      	lsls	r0, r3, #31
 8015d34:	d407      	bmi.n	8015d46 <lv_ddlist_signal+0xc2>
                ext->opened = 1;
 8015d36:	f043 0301 	orr.w	r3, r3, #1
 8015d3a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
                lv_ddlist_refr_size(ddlist, true);
 8015d3e:	4639      	mov	r1, r7
 8015d40:	4628      	mov	r0, r5
 8015d42:	f7ff fe93 	bl	8015a6c <lv_ddlist_refr_size>
            if(ext->sel_opt_id + 1 < ext->option_cnt) {
 8015d46:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8015d48:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8015d4a:	3301      	adds	r3, #1
 8015d4c:	4293      	cmp	r3, r2
 8015d4e:	dab1      	bge.n	8015cb4 <lv_ddlist_signal+0x30>
                lv_ddlist_pos_current_option(ddlist);
 8015d50:	4628      	mov	r0, r5
                ext->sel_opt_id--;
 8015d52:	8763      	strh	r3, [r4, #58]	; 0x3a
                lv_ddlist_pos_current_option(ddlist);
 8015d54:	f7ff fe37 	bl	80159c6 <lv_ddlist_pos_current_option>
                lv_obj_invalidate(ddlist);
 8015d58:	4628      	mov	r0, r5
 8015d5a:	f7f8 fafb 	bl	800e354 <lv_obj_invalidate>
 8015d5e:	e7a9      	b.n	8015cb4 <lv_ddlist_signal+0x30>
        } else if(c == LV_KEY_LEFT || c == LV_KEY_UP) {
 8015d60:	2b14      	cmp	r3, #20
 8015d62:	d001      	beq.n	8015d68 <lv_ddlist_signal+0xe4>
 8015d64:	2b11      	cmp	r3, #17
 8015d66:	d110      	bne.n	8015d8a <lv_ddlist_signal+0x106>
            if(!ext->opened) {
 8015d68:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8015d6c:	07d9      	lsls	r1, r3, #31
 8015d6e:	d407      	bmi.n	8015d80 <lv_ddlist_signal+0xfc>
                ext->opened = 1;
 8015d70:	f043 0301 	orr.w	r3, r3, #1
 8015d74:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
                lv_ddlist_refr_size(ddlist, true);
 8015d78:	2101      	movs	r1, #1
 8015d7a:	4628      	mov	r0, r5
 8015d7c:	f7ff fe76 	bl	8015a6c <lv_ddlist_refr_size>
            if(ext->sel_opt_id > 0) {
 8015d80:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8015d82:	2b00      	cmp	r3, #0
 8015d84:	d096      	beq.n	8015cb4 <lv_ddlist_signal+0x30>
                ext->sel_opt_id--;
 8015d86:	3b01      	subs	r3, #1
 8015d88:	e7e2      	b.n	8015d50 <lv_ddlist_signal+0xcc>
        } else if(c == LV_KEY_ESC) {
 8015d8a:	2b1b      	cmp	r3, #27
 8015d8c:	d192      	bne.n	8015cb4 <lv_ddlist_signal+0x30>
 8015d8e:	e7bf      	b.n	8015d10 <lv_ddlist_signal+0x8c>
    } else if(sign == LV_SIGNAL_GET_EDITABLE) {
 8015d90:	2e12      	cmp	r6, #18
 8015d92:	d102      	bne.n	8015d9a <lv_ddlist_signal+0x116>
        *editable       = true;
 8015d94:	f888 7000 	strb.w	r7, [r8]
 8015d98:	e78c      	b.n	8015cb4 <lv_ddlist_signal+0x30>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8015d9a:	2e06      	cmp	r6, #6
 8015d9c:	d18a      	bne.n	8015cb4 <lv_ddlist_signal+0x30>
 8015d9e:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 8015da0:	f858 1023 	ldr.w	r1, [r8, r3, lsl #2]
 8015da4:	b2da      	uxtb	r2, r3
 8015da6:	b119      	cbz	r1, 8015db0 <lv_ddlist_signal+0x12c>
 8015da8:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8015daa:	2b07      	cmp	r3, #7
 8015dac:	d1f8      	bne.n	8015da0 <lv_ddlist_signal+0x11c>
 8015dae:	461a      	mov	r2, r3
        buf->type[i] = "lv_ddlist";
 8015db0:	4b02      	ldr	r3, [pc, #8]	; (8015dbc <lv_ddlist_signal+0x138>)
 8015db2:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
 8015db6:	e77d      	b.n	8015cb4 <lv_ddlist_signal+0x30>
 8015db8:	2000afc4 	.word	0x2000afc4
 8015dbc:	080d8a0b 	.word	0x080d8a0b

08015dc0 <lv_page_set_scrl_fit2>:
 * @param page pointer to a page object
 * @param hot horizontal fit policy from `lv_fit_t`
 * @param ver vertical fit policy from `lv_fit_t`
 */
static inline void lv_page_set_scrl_fit2(lv_obj_t * page, lv_fit_t hor, lv_fit_t ver)
{
 8015dc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015dc2:	4614      	mov	r4, r2
 8015dc4:	460d      	mov	r5, r1
    lv_cont_set_fit2(lv_page_get_scrl(page), hor, ver);
 8015dc6:	f001 fec6 	bl	8017b56 <lv_page_get_scrl>
 * @param hor horizontal fit policy from `lv_fit_t`
 * @param ver vertical fit policy from `lv_fit_t`
 */
static inline void lv_cont_set_fit2(lv_obj_t * cont, lv_fit_t hor, lv_fit_t ver)
{
    lv_cont_set_fit4(cont, hor, hor, ver, ver);
 8015dca:	9400      	str	r4, [sp, #0]
 8015dcc:	4623      	mov	r3, r4
 8015dce:	462a      	mov	r2, r5
 8015dd0:	4629      	mov	r1, r5
 8015dd2:	f7ff fac0 	bl	8015356 <lv_cont_set_fit4>
}
 8015dd6:	b003      	add	sp, #12
 8015dd8:	bd30      	pop	{r4, r5, pc}

08015dda <lv_ddlist_refr_width>:
/**
 * Be sure the width of the scrollable exactly fits the ddlist
 * @param ddlist pointer to a ddlist
 */
static void lv_ddlist_refr_width(lv_obj_t * ddlist)
{
 8015dda:	b510      	push	{r4, lr}
 8015ddc:	4604      	mov	r4, r0
 * @param page pointer to a page object
 * @return an element of `lv_fit_t`
 */
static inline lv_fit_t lv_page_get_scrl_fit_bottom(const lv_obj_t * page)
{
    return lv_cont_get_fit_bottom(lv_page_get_scrl(page));
 8015dde:	f001 feba 	bl	8017b56 <lv_page_get_scrl>
 8015de2:	f7ff fde9 	bl	80159b8 <lv_cont_get_fit_bottom>
    /*Set the TIGHT fit horizontally the set the width to the content*/
    lv_page_set_scrl_fit2(ddlist, LV_FIT_TIGHT, lv_page_get_scrl_fit_bottom(ddlist));
 8015de6:	2101      	movs	r1, #1
 8015de8:	4602      	mov	r2, r0
 8015dea:	4620      	mov	r0, r4
 8015dec:	f7ff ffe8 	bl	8015dc0 <lv_page_set_scrl_fit2>
 8015df0:	4620      	mov	r0, r4
 8015df2:	f001 feb0 	bl	8017b56 <lv_page_get_scrl>
 8015df6:	f7ff fddf 	bl	80159b8 <lv_cont_get_fit_bottom>

    /*Revert FILL fit to fill the parent with the options area. It allows to RIGHT/CENTER align the text*/
    lv_page_set_scrl_fit2(ddlist, LV_FIT_FILL, lv_page_get_scrl_fit_bottom(ddlist));
 8015dfa:	2103      	movs	r1, #3
 8015dfc:	4602      	mov	r2, r0
 8015dfe:	4620      	mov	r0, r4
}
 8015e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_page_set_scrl_fit2(ddlist, LV_FIT_FILL, lv_page_get_scrl_fit_bottom(ddlist));
 8015e04:	f7ff bfdc 	b.w	8015dc0 <lv_page_set_scrl_fit2>

08015e08 <lv_ddlist_set_options>:
{
 8015e08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015e0a:	4606      	mov	r6, r0
 8015e0c:	460f      	mov	r7, r1
    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
 8015e0e:	f7f9 f91e 	bl	800f04e <lv_obj_get_ext_attr>
    ext->option_cnt = 0;
 8015e12:	2300      	movs	r3, #0
    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
 8015e14:	4604      	mov	r4, r0
    ext->option_cnt = 0;
 8015e16:	8703      	strh	r3, [r0, #56]	; 0x38
    for(i = 0; options[i] != '\0'; i++) {
 8015e18:	b29a      	uxth	r2, r3
 8015e1a:	5cbd      	ldrb	r5, [r7, r2]
 8015e1c:	b9d5      	cbnz	r5, 8015e54 <lv_ddlist_set_options+0x4c>
    ext->option_cnt++; /*Last option has no `\n`*/
 8015e1e:	8f23      	ldrh	r3, [r4, #56]	; 0x38
    lv_label_set_text(ext->label, options);
 8015e20:	6b20      	ldr	r0, [r4, #48]	; 0x30
    ext->sel_opt_id     = 0;
 8015e22:	8765      	strh	r5, [r4, #58]	; 0x3a
    ext->option_cnt++; /*Last option has no `\n`*/
 8015e24:	3301      	adds	r3, #1
 8015e26:	8723      	strh	r3, [r4, #56]	; 0x38
    lv_label_set_text(ext->label, options);
 8015e28:	4639      	mov	r1, r7
    ext->sel_opt_id_ori = 0;
 8015e2a:	87a5      	strh	r5, [r4, #60]	; 0x3c
    lv_label_set_text(ext->label, options);
 8015e2c:	f001 fa9c 	bl	8017368 <lv_label_set_text>
    lv_ddlist_refr_width(ddlist);
 8015e30:	4630      	mov	r0, r6
 8015e32:	f7ff ffd2 	bl	8015dda <lv_ddlist_refr_width>
    switch(lv_label_get_align(ext->label)) {
 8015e36:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8015e38:	f000 ffbe 	bl	8016db8 <lv_label_get_align>
 8015e3c:	2801      	cmp	r0, #1
 8015e3e:	d018      	beq.n	8015e72 <lv_ddlist_set_options+0x6a>
 8015e40:	d30f      	bcc.n	8015e62 <lv_ddlist_set_options+0x5a>
 8015e42:	2802      	cmp	r0, #2
 8015e44:	d019      	beq.n	8015e7a <lv_ddlist_set_options+0x72>
    lv_ddlist_refr_size(ddlist, false);
 8015e46:	2100      	movs	r1, #0
 8015e48:	4630      	mov	r0, r6
}
 8015e4a:	b003      	add	sp, #12
 8015e4c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    lv_ddlist_refr_size(ddlist, false);
 8015e50:	f7ff be0c 	b.w	8015a6c <lv_ddlist_refr_size>
        if(options[i] == '\n') ext->option_cnt++;
 8015e54:	2d0a      	cmp	r5, #10
 8015e56:	bf02      	ittt	eq
 8015e58:	8f22      	ldrheq	r2, [r4, #56]	; 0x38
 8015e5a:	3201      	addeq	r2, #1
 8015e5c:	8722      	strheq	r2, [r4, #56]	; 0x38
 8015e5e:	3301      	adds	r3, #1
 8015e60:	e7da      	b.n	8015e18 <lv_ddlist_set_options+0x10>
        case LV_LABEL_ALIGN_LEFT: lv_obj_align(ext->label, NULL, LV_ALIGN_IN_LEFT_MID, 0, 0); break;
 8015e62:	9500      	str	r5, [sp, #0]
 8015e64:	462b      	mov	r3, r5
 8015e66:	2207      	movs	r2, #7
        case LV_LABEL_ALIGN_RIGHT: lv_obj_align(ext->label, NULL, LV_ALIGN_IN_RIGHT_MID, 0, 0); break;
 8015e68:	4619      	mov	r1, r3
 8015e6a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8015e6c:	f7f8 fb34 	bl	800e4d8 <lv_obj_align>
 8015e70:	e7e9      	b.n	8015e46 <lv_ddlist_set_options+0x3e>
        case LV_LABEL_ALIGN_CENTER: lv_obj_align(ext->label, NULL, LV_ALIGN_CENTER, 0, 0); break;
 8015e72:	9500      	str	r5, [sp, #0]
 8015e74:	462b      	mov	r3, r5
 8015e76:	462a      	mov	r2, r5
 8015e78:	e7f6      	b.n	8015e68 <lv_ddlist_set_options+0x60>
        case LV_LABEL_ALIGN_RIGHT: lv_obj_align(ext->label, NULL, LV_ALIGN_IN_RIGHT_MID, 0, 0); break;
 8015e7a:	9500      	str	r5, [sp, #0]
 8015e7c:	462b      	mov	r3, r5
 8015e7e:	2208      	movs	r2, #8
 8015e80:	e7f2      	b.n	8015e68 <lv_ddlist_set_options+0x60>

08015e82 <lv_ddlist_set_selected>:
{
 8015e82:	b538      	push	{r3, r4, r5, lr}
 8015e84:	460c      	mov	r4, r1
 8015e86:	4605      	mov	r5, r0
    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
 8015e88:	f7f9 f8e1 	bl	800f04e <lv_obj_get_ext_attr>
    if(ext->sel_opt_id == sel_opt) return;
 8015e8c:	8f43      	ldrh	r3, [r0, #58]	; 0x3a
 8015e8e:	42a3      	cmp	r3, r4
 8015e90:	d014      	beq.n	8015ebc <lv_ddlist_set_selected+0x3a>
    ext->sel_opt_id     = sel_opt < ext->option_cnt ? sel_opt : ext->option_cnt - 1;
 8015e92:	8f01      	ldrh	r1, [r0, #56]	; 0x38
    if(ext->opened == 0) {
 8015e94:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
    ext->sel_opt_id     = sel_opt < ext->option_cnt ? sel_opt : ext->option_cnt - 1;
 8015e98:	428c      	cmp	r4, r1
 8015e9a:	bf24      	itt	cs
 8015e9c:	f101 31ff 	addcs.w	r1, r1, #4294967295	; 0xffffffff
 8015ea0:	b28c      	uxthcs	r4, r1
    if(ext->opened == 0) {
 8015ea2:	07db      	lsls	r3, r3, #31
    ext->sel_opt_id     = sel_opt < ext->option_cnt ? sel_opt : ext->option_cnt - 1;
 8015ea4:	8744      	strh	r4, [r0, #58]	; 0x3a
    ext->sel_opt_id_ori = ext->sel_opt_id;
 8015ea6:	8784      	strh	r4, [r0, #60]	; 0x3c
        lv_ddlist_pos_current_option(ddlist);
 8015ea8:	4628      	mov	r0, r5
    if(ext->opened == 0) {
 8015eaa:	d403      	bmi.n	8015eb4 <lv_ddlist_set_selected+0x32>
}
 8015eac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_ddlist_pos_current_option(ddlist);
 8015eb0:	f7ff bd89 	b.w	80159c6 <lv_ddlist_pos_current_option>
}
 8015eb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_obj_invalidate(ddlist);
 8015eb8:	f7f8 ba4c 	b.w	800e354 <lv_obj_invalidate>
 8015ebc:	bd38      	pop	{r3, r4, r5, pc}

08015ebe <lv_ddlist_set_fix_height>:
{
 8015ebe:	b538      	push	{r3, r4, r5, lr}
 8015ec0:	460c      	mov	r4, r1
 8015ec2:	4605      	mov	r5, r0
    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
 8015ec4:	f7f9 f8c3 	bl	800f04e <lv_obj_get_ext_attr>
    if(ext->fix_height == h) return;
 8015ec8:	f9b0 3040 	ldrsh.w	r3, [r0, #64]	; 0x40
 8015ecc:	42a3      	cmp	r3, r4
 8015ece:	d007      	beq.n	8015ee0 <lv_ddlist_set_fix_height+0x22>
    ext->fix_height = h;
 8015ed0:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
    lv_ddlist_refr_size(ddlist, false);
 8015ed4:	2100      	movs	r1, #0
 8015ed6:	4628      	mov	r0, r5
}
 8015ed8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_ddlist_refr_size(ddlist, false);
 8015edc:	f7ff bdc6 	b.w	8015a6c <lv_ddlist_refr_size>
 8015ee0:	bd38      	pop	{r3, r4, r5, pc}

08015ee2 <lv_ddlist_set_fix_width>:
{
 8015ee2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015ee4:	4604      	mov	r4, r0
    if(w == 0) {
 8015ee6:	460d      	mov	r5, r1
 8015ee8:	b979      	cbnz	r1, 8015f0a <lv_ddlist_set_fix_width+0x28>
        lv_cont_set_fit2(ddlist, LV_FIT_TIGHT, lv_cont_get_fit_bottom(ddlist));
 8015eea:	f7ff fd65 	bl	80159b8 <lv_cont_get_fit_bottom>
 8015eee:	2201      	movs	r2, #1
 8015ef0:	4603      	mov	r3, r0
 8015ef2:	9000      	str	r0, [sp, #0]
 8015ef4:	4611      	mov	r1, r2
 8015ef6:	4620      	mov	r0, r4
 8015ef8:	f7ff fa2d 	bl	8015356 <lv_cont_set_fit4>
    lv_ddlist_refr_size(ddlist, false);
 8015efc:	2100      	movs	r1, #0
 8015efe:	4620      	mov	r0, r4
}
 8015f00:	b003      	add	sp, #12
 8015f02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    lv_ddlist_refr_size(ddlist, false);
 8015f06:	f7ff bdb1 	b.w	8015a6c <lv_ddlist_refr_size>
        lv_cont_set_fit2(ddlist, LV_FIT_NONE, lv_cont_get_fit_bottom(ddlist));
 8015f0a:	f7ff fd55 	bl	80159b8 <lv_cont_get_fit_bottom>
 8015f0e:	2200      	movs	r2, #0
 8015f10:	4603      	mov	r3, r0
 8015f12:	9000      	str	r0, [sp, #0]
 8015f14:	4611      	mov	r1, r2
 8015f16:	4620      	mov	r0, r4
 8015f18:	f7ff fa1d 	bl	8015356 <lv_cont_set_fit4>
        lv_obj_set_width(ddlist, w);
 8015f1c:	4629      	mov	r1, r5
 8015f1e:	4620      	mov	r0, r4
 8015f20:	f7f8 fec4 	bl	800ecac <lv_obj_set_width>
 8015f24:	e7ea      	b.n	8015efc <lv_ddlist_set_fix_width+0x1a>

08015f26 <lv_ddlist_set_stay_open>:
{
 8015f26:	b510      	push	{r4, lr}
 8015f28:	460c      	mov	r4, r1
    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
 8015f2a:	f7f9 f890 	bl	800f04e <lv_obj_get_ext_attr>
    ext->stay_open = en ? 1 : 0;
 8015f2e:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8015f32:	f364 03c3 	bfi	r3, r4, #3, #1
 8015f36:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8015f3a:	bd10      	pop	{r4, pc}

08015f3c <lv_ddlist_set_style>:
{
 8015f3c:	b570      	push	{r4, r5, r6, lr}
 8015f3e:	460e      	mov	r6, r1
 8015f40:	4604      	mov	r4, r0
 8015f42:	4615      	mov	r5, r2
    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
 8015f44:	f7f9 f883 	bl	800f04e <lv_obj_get_ext_attr>
    switch(type) {
 8015f48:	2e01      	cmp	r6, #1
 8015f4a:	d014      	beq.n	8015f76 <lv_ddlist_set_style+0x3a>
 8015f4c:	d302      	bcc.n	8015f54 <lv_ddlist_set_style+0x18>
 8015f4e:	2e02      	cmp	r6, #2
 8015f50:	d00a      	beq.n	8015f68 <lv_ddlist_set_style+0x2c>
 8015f52:	bd70      	pop	{r4, r5, r6, pc}
            lv_page_set_style(ddlist, LV_PAGE_STYLE_BG, style);
 8015f54:	4620      	mov	r0, r4
 8015f56:	462a      	mov	r2, r5
 8015f58:	2100      	movs	r1, #0
 8015f5a:	f001 fdcc 	bl	8017af6 <lv_page_set_style>
            lv_ddlist_refr_width(ddlist);
 8015f5e:	4620      	mov	r0, r4
}
 8015f60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            lv_ddlist_refr_width(ddlist);
 8015f64:	f7ff bf39 	b.w	8015dda <lv_ddlist_refr_width>
        case LV_DDLIST_STYLE_SB: lv_page_set_style(ddlist, LV_PAGE_STYLE_SB, style); break;
 8015f68:	462a      	mov	r2, r5
 8015f6a:	4631      	mov	r1, r6
 8015f6c:	4620      	mov	r0, r4
}
 8015f6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        case LV_DDLIST_STYLE_SB: lv_page_set_style(ddlist, LV_PAGE_STYLE_SB, style); break;
 8015f72:	f001 bdc0 	b.w	8017af6 <lv_page_set_style>
            ext->sel_style  = style;
 8015f76:	6345      	str	r5, [r0, #52]	; 0x34
            lv_obj_t * scrl = lv_page_get_scrl(ddlist);
 8015f78:	4620      	mov	r0, r4
 8015f7a:	f001 fdec 	bl	8017b56 <lv_page_get_scrl>
}
 8015f7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            lv_obj_refresh_ext_draw_pad(scrl); /*Because of the wider selected rectangle*/
 8015f82:	f7f8 beb0 	b.w	800ece6 <lv_obj_refresh_ext_draw_pad>
	...

08015f88 <lv_ddlist_create>:
{
 8015f88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015f8a:	460e      	mov	r6, r1
    lv_obj_t * new_ddlist = lv_page_create(par, copy);
 8015f8c:	f001 fe06 	bl	8017b9c <lv_page_create>
    lv_mem_assert(new_ddlist);
 8015f90:	4604      	mov	r4, r0
 8015f92:	b900      	cbnz	r0, 8015f96 <lv_ddlist_create+0xe>
 8015f94:	e7fe      	b.n	8015f94 <lv_ddlist_create+0xc>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_ddlist);
 8015f96:	4d5f      	ldr	r5, [pc, #380]	; (8016114 <lv_ddlist_create+0x18c>)
 8015f98:	682b      	ldr	r3, [r5, #0]
 8015f9a:	b913      	cbnz	r3, 8015fa2 <lv_ddlist_create+0x1a>
 8015f9c:	f7f9 f853 	bl	800f046 <lv_obj_get_signal_cb>
 8015fa0:	6028      	str	r0, [r5, #0]
    if(ancestor_scrl_signal == NULL) ancestor_scrl_signal = lv_obj_get_signal_cb(lv_page_get_scrl(new_ddlist));
 8015fa2:	4d5d      	ldr	r5, [pc, #372]	; (8016118 <lv_ddlist_create+0x190>)
 8015fa4:	682b      	ldr	r3, [r5, #0]
 8015fa6:	b92b      	cbnz	r3, 8015fb4 <lv_ddlist_create+0x2c>
 8015fa8:	4620      	mov	r0, r4
 8015faa:	f001 fdd4 	bl	8017b56 <lv_page_get_scrl>
 8015fae:	f7f9 f84a 	bl	800f046 <lv_obj_get_signal_cb>
 8015fb2:	6028      	str	r0, [r5, #0]
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(new_ddlist);
 8015fb4:	4d59      	ldr	r5, [pc, #356]	; (801611c <lv_ddlist_create+0x194>)
 8015fb6:	682b      	ldr	r3, [r5, #0]
 8015fb8:	b91b      	cbnz	r3, 8015fc2 <lv_ddlist_create+0x3a>
 8015fba:	4620      	mov	r0, r4
 8015fbc:	f7f9 f845 	bl	800f04a <lv_obj_get_design_cb>
 8015fc0:	6028      	str	r0, [r5, #0]
    lv_ddlist_ext_t * ext = lv_obj_allocate_ext_attr(new_ddlist, sizeof(lv_ddlist_ext_t));
 8015fc2:	2144      	movs	r1, #68	; 0x44
 8015fc4:	4620      	mov	r0, r4
 8015fc6:	f7f8 f997 	bl	800e2f8 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 8015fca:	4605      	mov	r5, r0
 8015fcc:	b900      	cbnz	r0, 8015fd0 <lv_ddlist_create+0x48>
 8015fce:	e7fe      	b.n	8015fce <lv_ddlist_create+0x46>
    ext->opened         = 0;
 8015fd0:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
    ext->sel_style      = &lv_style_plain_color;
 8015fd4:	4f52      	ldr	r7, [pc, #328]	; (8016120 <lv_ddlist_create+0x198>)
    lv_obj_set_signal_cb(new_ddlist, lv_ddlist_signal);
 8015fd6:	4953      	ldr	r1, [pc, #332]	; (8016124 <lv_ddlist_create+0x19c>)
    ext->sel_style      = &lv_style_plain_color;
 8015fd8:	6347      	str	r7, [r0, #52]	; 0x34
    ext->label          = NULL;
 8015fda:	2300      	movs	r3, #0
    ext->stay_open      = 0;
 8015fdc:	f002 02fa 	and.w	r2, r2, #250	; 0xfa
 8015fe0:	f363 02c3 	bfi	r2, r3, #3, #1
    ext->label          = NULL;
 8015fe4:	6303      	str	r3, [r0, #48]	; 0x30
    ext->fix_height     = 0;
 8015fe6:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    ext->sel_opt_id     = 0;
 8015fea:	8743      	strh	r3, [r0, #58]	; 0x3a
    ext->sel_opt_id_ori = 0;
 8015fec:	8783      	strh	r3, [r0, #60]	; 0x3c
    ext->option_cnt     = 0;
 8015fee:	8703      	strh	r3, [r0, #56]	; 0x38
    ext->stay_open      = 0;
 8015ff0:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    lv_obj_set_signal_cb(new_ddlist, lv_ddlist_signal);
 8015ff4:	4620      	mov	r0, r4
 8015ff6:	f7f8 f97b 	bl	800e2f0 <lv_obj_set_signal_cb>
    lv_obj_set_signal_cb(lv_page_get_scrl(new_ddlist), lv_ddlist_scrl_signal);
 8015ffa:	4620      	mov	r0, r4
 8015ffc:	f001 fdab 	bl	8017b56 <lv_page_get_scrl>
 8016000:	4949      	ldr	r1, [pc, #292]	; (8016128 <lv_ddlist_create+0x1a0>)
 8016002:	f7f8 f975 	bl	800e2f0 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_ddlist, lv_ddlist_design);
 8016006:	4949      	ldr	r1, [pc, #292]	; (801612c <lv_ddlist_create+0x1a4>)
 8016008:	4620      	mov	r0, r4
 801600a:	f7f8 f973 	bl	800e2f4 <lv_obj_set_design_cb>
    if(copy == NULL) {
 801600e:	2e00      	cmp	r6, #0
 8016010:	d14c      	bne.n	80160ac <lv_ddlist_create+0x124>
        lv_page_set_anim_time(new_ddlist, LV_DDLIST_DEF_ANIM_TIME);
 8016012:	21c8      	movs	r1, #200	; 0xc8
 8016014:	4620      	mov	r0, r4
 8016016:	f001 fd68 	bl	8017aea <lv_page_set_anim_time>
        lv_obj_t * scrl = lv_page_get_scrl(new_ddlist);
 801601a:	4620      	mov	r0, r4
 801601c:	f001 fd9b 	bl	8017b56 <lv_page_get_scrl>
        lv_obj_set_drag(scrl, false);
 8016020:	4631      	mov	r1, r6
 8016022:	f7f8 f898 	bl	800e156 <lv_obj_set_drag>
        lv_page_set_scrl_fit2(new_ddlist, LV_FIT_FILL, LV_FIT_TIGHT);
 8016026:	2201      	movs	r2, #1
 8016028:	2103      	movs	r1, #3
 801602a:	4620      	mov	r0, r4
 801602c:	f7ff fec8 	bl	8015dc0 <lv_page_set_scrl_fit2>
        ext->label = lv_label_create(new_ddlist, NULL);
 8016030:	4631      	mov	r1, r6
 8016032:	4620      	mov	r0, r4
 8016034:	f001 fa42 	bl	80174bc <lv_label_create>
 8016038:	2201      	movs	r2, #1
 801603a:	4633      	mov	r3, r6
 801603c:	6328      	str	r0, [r5, #48]	; 0x30
 801603e:	4611      	mov	r1, r2
 8016040:	4620      	mov	r0, r4
 8016042:	9600      	str	r6, [sp, #0]
 8016044:	f7ff f987 	bl	8015356 <lv_cont_set_fit4>
        lv_page_set_sb_mode(new_ddlist, LV_SB_MODE_HIDE);
 8016048:	2104      	movs	r1, #4
 801604a:	4620      	mov	r0, r4
 801604c:	f001 fd20 	bl	8017a90 <lv_page_set_sb_mode>
        lv_page_set_style(new_ddlist, LV_PAGE_STYLE_SCRL, &lv_style_transp_tight);
 8016050:	4a37      	ldr	r2, [pc, #220]	; (8016130 <lv_ddlist_create+0x1a8>)
 8016052:	2101      	movs	r1, #1
 8016054:	4620      	mov	r0, r4
 8016056:	f001 fd4e 	bl	8017af6 <lv_page_set_style>
        lv_ddlist_set_options(new_ddlist, "Option 1\nOption 2\nOption 3");
 801605a:	4936      	ldr	r1, [pc, #216]	; (8016134 <lv_ddlist_create+0x1ac>)
 801605c:	4620      	mov	r0, r4
 801605e:	f7ff fed3 	bl	8015e08 <lv_ddlist_set_options>
        lv_theme_t * th = lv_theme_get_current();
 8016062:	f002 ffbf 	bl	8018fe4 <lv_theme_get_current>
        if(th) {
 8016066:	4605      	mov	r5, r0
 8016068:	b1a0      	cbz	r0, 8016094 <lv_ddlist_create+0x10c>
            lv_ddlist_set_style(new_ddlist, LV_DDLIST_STYLE_BG, th->style.ddlist.bg);
 801606a:	f8d0 214c 	ldr.w	r2, [r0, #332]	; 0x14c
 801606e:	4631      	mov	r1, r6
 8016070:	4620      	mov	r0, r4
 8016072:	f7ff ff63 	bl	8015f3c <lv_ddlist_set_style>
            lv_ddlist_set_style(new_ddlist, LV_DDLIST_STYLE_SEL, th->style.ddlist.sel);
 8016076:	f8d5 2150 	ldr.w	r2, [r5, #336]	; 0x150
 801607a:	2101      	movs	r1, #1
 801607c:	4620      	mov	r0, r4
 801607e:	f7ff ff5d 	bl	8015f3c <lv_ddlist_set_style>
            lv_ddlist_set_style(new_ddlist, LV_DDLIST_STYLE_SB, th->style.ddlist.sb);
 8016082:	f8d5 2154 	ldr.w	r2, [r5, #340]	; 0x154
            lv_ddlist_set_style(new_ddlist, LV_DDLIST_STYLE_SB, &lv_style_pretty_color);
 8016086:	2102      	movs	r1, #2
 8016088:	4620      	mov	r0, r4
 801608a:	f7ff ff57 	bl	8015f3c <lv_ddlist_set_style>
}
 801608e:	4620      	mov	r0, r4
 8016090:	b003      	add	sp, #12
 8016092:	bdf0      	pop	{r4, r5, r6, r7, pc}
            lv_ddlist_set_style(new_ddlist, LV_DDLIST_STYLE_BG, &lv_style_pretty);
 8016094:	4a28      	ldr	r2, [pc, #160]	; (8016138 <lv_ddlist_create+0x1b0>)
 8016096:	4631      	mov	r1, r6
 8016098:	4620      	mov	r0, r4
 801609a:	f7ff ff4f 	bl	8015f3c <lv_ddlist_set_style>
            lv_ddlist_set_style(new_ddlist, LV_DDLIST_STYLE_SEL, &lv_style_plain_color);
 801609e:	463a      	mov	r2, r7
 80160a0:	2101      	movs	r1, #1
 80160a2:	4620      	mov	r0, r4
 80160a4:	f7ff ff4a 	bl	8015f3c <lv_ddlist_set_style>
            lv_ddlist_set_style(new_ddlist, LV_DDLIST_STYLE_SB, &lv_style_pretty_color);
 80160a8:	4a24      	ldr	r2, [pc, #144]	; (801613c <lv_ddlist_create+0x1b4>)
 80160aa:	e7ec      	b.n	8016086 <lv_ddlist_create+0xfe>
        lv_ddlist_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 80160ac:	4630      	mov	r0, r6
 80160ae:	f7f8 ffce 	bl	800f04e <lv_obj_get_ext_attr>
 80160b2:	4606      	mov	r6, r0
        ext->label                 = lv_label_create(new_ddlist, copy_ext->label);
 80160b4:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80160b6:	4620      	mov	r0, r4
 80160b8:	f001 fa00 	bl	80174bc <lv_label_create>
 80160bc:	6328      	str	r0, [r5, #48]	; 0x30
 80160be:	4607      	mov	r7, r0
        lv_label_set_text(ext->label, lv_label_get_text(copy_ext->label));
 80160c0:	6b30      	ldr	r0, [r6, #48]	; 0x30
 80160c2:	f000 fe6d 	bl	8016da0 <lv_label_get_text>
 80160c6:	4601      	mov	r1, r0
 80160c8:	4638      	mov	r0, r7
 80160ca:	f001 f94d 	bl	8017368 <lv_label_set_text>
        ext->sel_opt_id     = copy_ext->sel_opt_id;
 80160ce:	8f73      	ldrh	r3, [r6, #58]	; 0x3a
 80160d0:	876b      	strh	r3, [r5, #58]	; 0x3a
        ext->sel_opt_id_ori = copy_ext->sel_opt_id;
 80160d2:	8f73      	ldrh	r3, [r6, #58]	; 0x3a
 80160d4:	87ab      	strh	r3, [r5, #60]	; 0x3c
        ext->fix_height     = copy_ext->fix_height;
 80160d6:	f9b6 3040 	ldrsh.w	r3, [r6, #64]	; 0x40
 80160da:	f8a5 3040 	strh.w	r3, [r5, #64]	; 0x40
        ext->option_cnt     = copy_ext->option_cnt;
 80160de:	8f33      	ldrh	r3, [r6, #56]	; 0x38
 80160e0:	872b      	strh	r3, [r5, #56]	; 0x38
        ext->sel_style      = copy_ext->sel_style;
 80160e2:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80160e4:	636b      	str	r3, [r5, #52]	; 0x34
        ext->draw_arrow     = copy_ext->draw_arrow;
 80160e6:	f896 303e 	ldrb.w	r3, [r6, #62]	; 0x3e
 80160ea:	f895 203e 	ldrb.w	r2, [r5, #62]	; 0x3e
 80160ee:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80160f2:	f363 0282 	bfi	r2, r3, #2, #1
 80160f6:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        ext->stay_open      = copy_ext->stay_open;
 80160fa:	f896 303e 	ldrb.w	r3, [r6, #62]	; 0x3e
 80160fe:	b2d2      	uxtb	r2, r2
 8016100:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8016104:	f363 02c3 	bfi	r2, r3, #3, #1
 8016108:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        lv_obj_refresh_style(new_ddlist);
 801610c:	4620      	mov	r0, r4
 801610e:	f7f8 fddc 	bl	800ecca <lv_obj_refresh_style>
 8016112:	e7bc      	b.n	801608e <lv_ddlist_create+0x106>
 8016114:	2000afc4 	.word	0x2000afc4
 8016118:	2000afc0 	.word	0x2000afc0
 801611c:	2000afbc 	.word	0x2000afbc
 8016120:	2000c514 	.word	0x2000c514
 8016124:	08015c85 	.word	0x08015c85
 8016128:	0801640d 	.word	0x0801640d
 801612c:	080161e5 	.word	0x080161e5
 8016130:	2000c370 	.word	0x2000c370
 8016134:	080d89ec 	.word	0x080d89ec
 8016138:	2000c334 	.word	0x2000c334
 801613c:	2000c244 	.word	0x2000c244

08016140 <lv_ddlist_get_selected>:
{
 8016140:	b508      	push	{r3, lr}
    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
 8016142:	f7f8 ff84 	bl	800f04e <lv_obj_get_ext_attr>
}
 8016146:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 8016148:	bd08      	pop	{r3, pc}

0801614a <lv_ddlist_get_selected_str>:
{
 801614a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801614e:	4690      	mov	r8, r2
 8016150:	460f      	mov	r7, r1
    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
 8016152:	f7f8 ff7c 	bl	800f04e <lv_obj_get_ext_attr>
 8016156:	4606      	mov	r6, r0
    const char * opt_txt = lv_label_get_text(ext->label);
 8016158:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801615a:	f000 fe21 	bl	8016da0 <lv_label_get_text>
 801615e:	4604      	mov	r4, r0
    uint16_t txt_len     = strlen(opt_txt);
 8016160:	f7ea f836 	bl	80001d0 <strlen>
    for(i = 0; i < txt_len && line != ext->sel_opt_id; i++) {
 8016164:	4622      	mov	r2, r4
    uint16_t txt_len     = strlen(opt_txt);
 8016166:	b280      	uxth	r0, r0
    uint16_t line        = 0;
 8016168:	2300      	movs	r3, #0
 801616a:	1b15      	subs	r5, r2, r4
 801616c:	b2ad      	uxth	r5, r5
    for(i = 0; i < txt_len && line != ext->sel_opt_id; i++) {
 801616e:	42a8      	cmp	r0, r5
 8016170:	d810      	bhi.n	8016194 <lv_ddlist_get_selected_str+0x4a>
 8016172:	2300      	movs	r3, #0
    for(c = 0; opt_txt[i] != '\n' && i < txt_len; c++, i++) {
 8016174:	1966      	adds	r6, r4, r5
        if(buf_size && c >= buf_size - 1) {
 8016176:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
    for(c = 0; opt_txt[i] != '\n' && i < txt_len; c++, i++) {
 801617a:	5cf2      	ldrb	r2, [r6, r3]
 801617c:	2a0a      	cmp	r2, #10
 801617e:	b29c      	uxth	r4, r3
 8016180:	d003      	beq.n	801618a <lv_ddlist_get_selected_str+0x40>
 8016182:	442c      	add	r4, r5
 8016184:	b2a4      	uxth	r4, r4
 8016186:	42a0      	cmp	r0, r4
 8016188:	d80e      	bhi.n	80161a8 <lv_ddlist_get_selected_str+0x5e>
    buf[c] = '\0';
 801618a:	b29b      	uxth	r3, r3
 801618c:	2200      	movs	r2, #0
 801618e:	54fa      	strb	r2, [r7, r3]
 8016190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for(i = 0; i < txt_len && line != ext->sel_opt_id; i++) {
 8016194:	8f71      	ldrh	r1, [r6, #58]	; 0x3a
 8016196:	4299      	cmp	r1, r3
 8016198:	d0eb      	beq.n	8016172 <lv_ddlist_get_selected_str+0x28>
        if(opt_txt[i] == '\n') line++;
 801619a:	f812 1b01 	ldrb.w	r1, [r2], #1
 801619e:	290a      	cmp	r1, #10
 80161a0:	bf04      	itt	eq
 80161a2:	3301      	addeq	r3, #1
 80161a4:	b29b      	uxtheq	r3, r3
 80161a6:	e7e0      	b.n	801616a <lv_ddlist_get_selected_str+0x20>
        if(buf_size && c >= buf_size - 1) {
 80161a8:	f1b8 0f00 	cmp.w	r8, #0
 80161ac:	d001      	beq.n	80161b2 <lv_ddlist_get_selected_str+0x68>
 80161ae:	4299      	cmp	r1, r3
 80161b0:	ddeb      	ble.n	801618a <lv_ddlist_get_selected_str+0x40>
        buf[c] = opt_txt[i];
 80161b2:	54fa      	strb	r2, [r7, r3]
 80161b4:	3301      	adds	r3, #1
 80161b6:	e7e0      	b.n	801617a <lv_ddlist_get_selected_str+0x30>

080161b8 <lv_ddlist_get_style>:
{
 80161b8:	b538      	push	{r3, r4, r5, lr}
 80161ba:	460c      	mov	r4, r1
 80161bc:	4605      	mov	r5, r0
    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
 80161be:	f7f8 ff46 	bl	800f04e <lv_obj_get_ext_attr>
    switch(type) {
 80161c2:	2c01      	cmp	r4, #1
 80161c4:	d00c      	beq.n	80161e0 <lv_ddlist_get_style+0x28>
 80161c6:	d303      	bcc.n	80161d0 <lv_ddlist_get_style+0x18>
 80161c8:	2c02      	cmp	r4, #2
 80161ca:	d007      	beq.n	80161dc <lv_ddlist_get_style+0x24>
        default: return NULL;
 80161cc:	2000      	movs	r0, #0
}
 80161ce:	bd38      	pop	{r3, r4, r5, pc}
        case LV_DDLIST_STYLE_BG: return lv_page_get_style(ddlist, LV_PAGE_STYLE_BG);
 80161d0:	2100      	movs	r1, #0
        case LV_DDLIST_STYLE_SB: return lv_page_get_style(ddlist, LV_PAGE_STYLE_SB);
 80161d2:	4628      	mov	r0, r5
}
 80161d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        case LV_DDLIST_STYLE_SB: return lv_page_get_style(ddlist, LV_PAGE_STYLE_SB);
 80161d8:	f001 bcc7 	b.w	8017b6a <lv_page_get_style>
 80161dc:	4621      	mov	r1, r4
 80161de:	e7f8      	b.n	80161d2 <lv_ddlist_get_style+0x1a>
        case LV_DDLIST_STYLE_SEL: return ext->sel_style;
 80161e0:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80161e2:	bd38      	pop	{r3, r4, r5, pc}

080161e4 <lv_ddlist_design>:
{
 80161e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(mode == LV_DESIGN_COVER_CHK) {
 80161e8:	2a02      	cmp	r2, #2
{
 80161ea:	b09d      	sub	sp, #116	; 0x74
 80161ec:	4604      	mov	r4, r0
 80161ee:	460e      	mov	r6, r1
 80161f0:	4690      	mov	r8, r2
    if(mode == LV_DESIGN_COVER_CHK) {
 80161f2:	d105      	bne.n	8016200 <lv_ddlist_design+0x1c>
        return ancestor_design(ddlist, mask, mode);
 80161f4:	4b83      	ldr	r3, [pc, #524]	; (8016404 <lv_ddlist_design+0x220>)
 80161f6:	681b      	ldr	r3, [r3, #0]
 80161f8:	4798      	blx	r3
}
 80161fa:	b01d      	add	sp, #116	; 0x74
 80161fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 8016200:	2a00      	cmp	r2, #0
 8016202:	d139      	bne.n	8016278 <lv_ddlist_design+0x94>
        ancestor_design(ddlist, mask, mode);
 8016204:	4b7f      	ldr	r3, [pc, #508]	; (8016404 <lv_ddlist_design+0x220>)
 8016206:	681b      	ldr	r3, [r3, #0]
 8016208:	4798      	blx	r3
        lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
 801620a:	4620      	mov	r0, r4
 801620c:	f7f8 ff1f 	bl	800f04e <lv_obj_get_ext_attr>
 8016210:	4605      	mov	r5, r0
        lv_opa_t opa_scale    = lv_obj_get_opa_scale(ddlist);
 8016212:	4620      	mov	r0, r4
 8016214:	f7f8 feb3 	bl	800ef7e <lv_obj_get_opa_scale>
        if(ext->opened != 0 || ext->force_sel) {
 8016218:	f895 303e 	ldrb.w	r3, [r5, #62]	; 0x3e
 801621c:	079a      	lsls	r2, r3, #30
        lv_opa_t opa_scale    = lv_obj_get_opa_scale(ddlist);
 801621e:	4607      	mov	r7, r0
        if(ext->opened != 0 || ext->force_sel) {
 8016220:	d101      	bne.n	8016226 <lv_ddlist_design+0x42>
    return true;
 8016222:	2001      	movs	r0, #1
 8016224:	e7e9      	b.n	80161fa <lv_ddlist_design+0x16>
            const lv_style_t * style = lv_ddlist_get_style(ddlist, LV_DDLIST_STYLE_BG);
 8016226:	4641      	mov	r1, r8
 8016228:	4620      	mov	r0, r4
 801622a:	f7ff ffc5 	bl	80161b8 <lv_ddlist_get_style>
            rect_area.y1 += ext->sel_opt_id * (font_h + style->text.line_space);
 801622e:	f9b0 102a 	ldrsh.w	r1, [r0, #42]	; 0x2a
 8016232:	6a43      	ldr	r3, [r0, #36]	; 0x24
            rect_area.y1 = ext->label->coords.y1;
 8016234:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8016236:	f893 e008 	ldrb.w	lr, [r3, #8]
            rect_area.y1 -= style->text.line_space / 2;
 801623a:	8a42      	ldrh	r2, [r0, #18]
 801623c:	2302      	movs	r3, #2
 801623e:	fb91 f3f3 	sdiv	r3, r1, r3
 8016242:	1ad3      	subs	r3, r2, r3
            rect_area.y1 += ext->sel_opt_id * (font_h + style->text.line_space);
 8016244:	8f6a      	ldrh	r2, [r5, #58]	; 0x3a
 8016246:	eb0e 0001 	add.w	r0, lr, r1
            rect_area.y1 -= style->text.line_space / 2;
 801624a:	fb12 3200 	smlabb	r2, r2, r0, r3
            rect_area.y2 = rect_area.y1 + font_h + style->text.line_space - 1;
 801624e:	3901      	subs	r1, #1
 8016250:	4471      	add	r1, lr
            rect_area.x1 = ddlist->coords.x1;
 8016252:	8a23      	ldrh	r3, [r4, #16]
 8016254:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
            rect_area.y1 -= style->text.line_space / 2;
 8016258:	b292      	uxth	r2, r2
            rect_area.x2 = ddlist->coords.x2;
 801625a:	8aa3      	ldrh	r3, [r4, #20]
            rect_area.y1 -= style->text.line_space / 2;
 801625c:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
            rect_area.y2 = rect_area.y1 + font_h + style->text.line_space - 1;
 8016260:	440a      	add	r2, r1
 8016262:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
            rect_area.x2 = ddlist->coords.x2;
 8016266:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
            lv_draw_rect(&rect_area, mask, ext->sel_style, opa_scale);
 801626a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 801626c:	463b      	mov	r3, r7
 801626e:	4631      	mov	r1, r6
 8016270:	a80d      	add	r0, sp, #52	; 0x34
 8016272:	f7fa fe11 	bl	8010e98 <lv_draw_rect>
 8016276:	e7d4      	b.n	8016222 <lv_ddlist_design+0x3e>
    else if(mode == LV_DESIGN_DRAW_POST) {
 8016278:	2a01      	cmp	r2, #1
 801627a:	d1d2      	bne.n	8016222 <lv_ddlist_design+0x3e>
        lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
 801627c:	f7f8 fee7 	bl	800f04e <lv_obj_get_ext_attr>
 8016280:	4680      	mov	r8, r0
        lv_opa_t opa_scale    = lv_obj_get_opa_scale(ddlist);
 8016282:	4620      	mov	r0, r4
 8016284:	f7f8 fe7b 	bl	800ef7e <lv_obj_get_opa_scale>
        if(ext->opened || ext->force_sel) {
 8016288:	f898 303e 	ldrb.w	r3, [r8, #62]	; 0x3e
 801628c:	f013 0503 	ands.w	r5, r3, #3
        lv_opa_t opa_scale    = lv_obj_get_opa_scale(ddlist);
 8016290:	4607      	mov	r7, r0
        if(ext->opened || ext->force_sel) {
 8016292:	d065      	beq.n	8016360 <lv_ddlist_design+0x17c>
            const lv_style_t * style = lv_ddlist_get_style(ddlist, LV_DDLIST_STYLE_BG);
 8016294:	2100      	movs	r1, #0
 8016296:	4620      	mov	r0, r4
 8016298:	f7ff ff8e 	bl	80161b8 <lv_ddlist_get_style>
 801629c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801629e:	4605      	mov	r5, r0
 80162a0:	7a18      	ldrb	r0, [r3, #8]
            area_sel.y1 -= style->text.line_space / 2;
 80162a2:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
            area_sel.y1 += ext->sel_opt_id * (font_h + style->text.line_space);
 80162a6:	f9b5 202a 	ldrsh.w	r2, [r5, #42]	; 0x2a
            area_sel.y1 -= style->text.line_space / 2;
 80162aa:	8a5b      	ldrh	r3, [r3, #18]
 80162ac:	2102      	movs	r1, #2
 80162ae:	fb92 f1f1 	sdiv	r1, r2, r1
 80162b2:	1a59      	subs	r1, r3, r1
            area_sel.y1 += ext->sel_opt_id * (font_h + style->text.line_space);
 80162b4:	f8b8 303a 	ldrh.w	r3, [r8, #58]	; 0x3a
 80162b8:	eb00 0e02 	add.w	lr, r0, r2
            area_sel.y1 -= style->text.line_space / 2;
 80162bc:	fb13 130e 	smlabb	r3, r3, lr, r1
            area_sel.y2 = area_sel.y1 + font_h + style->text.line_space - 1;
 80162c0:	3a01      	subs	r2, #1
 80162c2:	4402      	add	r2, r0
            area_sel.y1 -= style->text.line_space / 2;
 80162c4:	b29b      	uxth	r3, r3
 80162c6:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
            area_sel.y2 = area_sel.y1 + font_h + style->text.line_space - 1;
 80162ca:	4413      	add	r3, r2
 80162cc:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
            area_sel.x1 = ddlist->coords.x1;
 80162d0:	8a23      	ldrh	r3, [r4, #16]
 80162d2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
            area_ok = lv_area_intersect(&mask_sel, mask, &area_sel);
 80162d6:	aa09      	add	r2, sp, #36	; 0x24
            area_sel.x2 = ddlist->coords.x2;
 80162d8:	8aa3      	ldrh	r3, [r4, #20]
 80162da:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
            area_ok = lv_area_intersect(&mask_sel, mask, &area_sel);
 80162de:	4631      	mov	r1, r6
 80162e0:	a80b      	add	r0, sp, #44	; 0x2c
 80162e2:	f7fd fbb0 	bl	8013a46 <lv_area_intersect>
            if(area_ok) {
 80162e6:	b390      	cbz	r0, 801634e <lv_ddlist_design+0x16a>
    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
 80162e8:	4620      	mov	r0, r4
 80162ea:	f7f8 feb0 	bl	800f04e <lv_obj_get_ext_attr>
        case LV_DDLIST_STYLE_SEL: return ext->sel_style;
 80162ee:	f8d0 9034 	ldr.w	r9, [r0, #52]	; 0x34
                lv_style_copy(&new_style, style);
 80162f2:	4629      	mov	r1, r5
 80162f4:	a80d      	add	r0, sp, #52	; 0x34
 80162f6:	f7f9 f9ed 	bl	800f6d4 <lv_style_copy>
                new_style.text.color = sel_style->text.color;
 80162fa:	f8b9 3020 	ldrh.w	r3, [r9, #32]
 80162fe:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
                new_style.text.opa   = sel_style->text.opa;
 8016302:	f899 302c 	ldrb.w	r3, [r9, #44]	; 0x2c
 8016306:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
 801630a:	4620      	mov	r0, r4
 801630c:	f7f8 fe9f 	bl	800f04e <lv_obj_get_ext_attr>
    if(!ext->label) return LV_TXT_FLAG_CENTER;
 8016310:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8016312:	b318      	cbz	r0, 801635c <lv_ddlist_design+0x178>
    lv_label_align_t align = lv_label_get_align(ext->label);
 8016314:	f000 fd50 	bl	8016db8 <lv_label_get_align>
    switch(align) {
 8016318:	2801      	cmp	r0, #1
 801631a:	d01f      	beq.n	801635c <lv_ddlist_design+0x178>
        case LV_LABEL_ALIGN_LEFT: return LV_TXT_FLAG_NONE;
 801631c:	2802      	cmp	r0, #2
 801631e:	bf0c      	ite	eq
 8016320:	2508      	moveq	r5, #8
 8016322:	2500      	movne	r5, #0
                lv_draw_label(&ext->label->coords, &mask_sel, &new_style, opa_scale, lv_label_get_text(ext->label),
 8016324:	f8d8 8030 	ldr.w	r8, [r8, #48]	; 0x30
 8016328:	4640      	mov	r0, r8
 801632a:	f000 fd39 	bl	8016da0 <lv_label_get_text>
 801632e:	2300      	movs	r3, #0
 8016330:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016334:	9305      	str	r3, [sp, #20]
 8016336:	9204      	str	r2, [sp, #16]
 8016338:	9203      	str	r2, [sp, #12]
 801633a:	9302      	str	r3, [sp, #8]
 801633c:	e88d 0021 	stmia.w	sp, {r0, r5}
 8016340:	463b      	mov	r3, r7
 8016342:	aa0d      	add	r2, sp, #52	; 0x34
 8016344:	a90b      	add	r1, sp, #44	; 0x2c
 8016346:	f108 0010 	add.w	r0, r8, #16
                    lv_draw_label(&area_arrow, &mask_arrow, &new_style, opa_scale, LV_SYMBOL_DOWN, LV_TXT_FLAG_NONE,
 801634a:	f7fa fb0f 	bl	801096c <lv_draw_label>
        ancestor_design(ddlist, mask, mode);
 801634e:	4b2d      	ldr	r3, [pc, #180]	; (8016404 <lv_ddlist_design+0x220>)
 8016350:	2201      	movs	r2, #1
 8016352:	681b      	ldr	r3, [r3, #0]
 8016354:	4631      	mov	r1, r6
 8016356:	4620      	mov	r0, r4
 8016358:	4798      	blx	r3
 801635a:	e762      	b.n	8016222 <lv_ddlist_design+0x3e>
    if(!ext->label) return LV_TXT_FLAG_CENTER;
 801635c:	2504      	movs	r5, #4
 801635e:	e7e1      	b.n	8016324 <lv_ddlist_design+0x140>
            if(ext->draw_arrow) {
 8016360:	075b      	lsls	r3, r3, #29
 8016362:	d5f4      	bpl.n	801634e <lv_ddlist_design+0x16a>
                const lv_style_t * style     = lv_ddlist_get_style(ddlist, LV_DDLIST_STYLE_BG);
 8016364:	4629      	mov	r1, r5
 8016366:	4620      	mov	r0, r4
 8016368:	f7ff ff26 	bl	80161b8 <lv_ddlist_get_style>
                const lv_style_t * sel_style = lv_ddlist_get_style(ddlist, LV_DDLIST_STYLE_BG);
 801636c:	4629      	mov	r1, r5
                const lv_style_t * style     = lv_ddlist_get_style(ddlist, LV_DDLIST_STYLE_BG);
 801636e:	4682      	mov	sl, r0
                const lv_font_t * font       = style->text.font;
 8016370:	f8d0 8024 	ldr.w	r8, [r0, #36]	; 0x24
                const lv_style_t * sel_style = lv_ddlist_get_style(ddlist, LV_DDLIST_STYLE_BG);
 8016374:	4620      	mov	r0, r4
 8016376:	f7ff ff1f 	bl	80161b8 <lv_ddlist_get_style>
                lv_style_copy(&new_style, style);
 801637a:	4651      	mov	r1, sl
                const lv_style_t * sel_style = lv_ddlist_get_style(ddlist, LV_DDLIST_STYLE_BG);
 801637c:	9007      	str	r0, [sp, #28]
                lv_style_copy(&new_style, style);
 801637e:	a80d      	add	r0, sp, #52	; 0x34
 8016380:	f898 9008 	ldrb.w	r9, [r8, #8]
                                lv_txt_get_width(LV_SYMBOL_DOWN, strlen(LV_SYMBOL_DOWN), sel_style->text.font, 0, 0);
 8016384:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8016408 <lv_ddlist_design+0x224>
                lv_style_copy(&new_style, style);
 8016388:	f7f9 f9a4 	bl	800f6d4 <lv_style_copy>
                new_style.text.color = sel_style->text.color;
 801638c:	9a07      	ldr	r2, [sp, #28]
                area_arrow.x2 = ddlist->coords.x2 - style->body.padding.right;
 801638e:	f8b4 b014 	ldrh.w	fp, [r4, #20]
                new_style.text.color = sel_style->text.color;
 8016392:	8c13      	ldrh	r3, [r2, #32]
 8016394:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
                new_style.text.opa   = sel_style->text.opa;
 8016398:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 801639c:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
                area_arrow.x2 = ddlist->coords.x2 - style->body.padding.right;
 80163a0:	f8ba 001c 	ldrh.w	r0, [sl, #28]
                                lv_txt_get_width(LV_SYMBOL_DOWN, strlen(LV_SYMBOL_DOWN), sel_style->text.font, 0, 0);
 80163a4:	9500      	str	r5, [sp, #0]
                area_arrow.x2 = ddlist->coords.x2 - style->body.padding.right;
 80163a6:	ebab 0b00 	sub.w	fp, fp, r0
 80163aa:	fa1f fb8b 	uxth.w	fp, fp
                                lv_txt_get_width(LV_SYMBOL_DOWN, strlen(LV_SYMBOL_DOWN), sel_style->text.font, 0, 0);
 80163ae:	462b      	mov	r3, r5
 80163b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
                area_arrow.x2 = ddlist->coords.x2 - style->body.padding.right;
 80163b2:	f8ad b028 	strh.w	fp, [sp, #40]	; 0x28
                                lv_txt_get_width(LV_SYMBOL_DOWN, strlen(LV_SYMBOL_DOWN), sel_style->text.font, 0, 0);
 80163b6:	2103      	movs	r1, #3
 80163b8:	4640      	mov	r0, r8
 80163ba:	f7fe f907 	bl	80145cc <lv_txt_get_width>
                area_arrow.y1 = ddlist->coords.y1 + style->text.line_space;
 80163be:	f8ba 202a 	ldrh.w	r2, [sl, #42]	; 0x2a
 80163c2:	8a63      	ldrh	r3, [r4, #18]
 80163c4:	4413      	add	r3, r2
                area_arrow.x1 = area_arrow.x2 -
 80163c6:	ebab 0000 	sub.w	r0, fp, r0
                area_arrow.y1 = ddlist->coords.y1 + style->text.line_space;
 80163ca:	b29b      	uxth	r3, r3
                area_arrow.x1 = area_arrow.x2 -
 80163cc:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
                area_arrow.y1 = ddlist->coords.y1 + style->text.line_space;
 80163d0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
                area_ok = lv_area_intersect(&mask_arrow, mask, &area_arrow);
 80163d4:	aa09      	add	r2, sp, #36	; 0x24
                area_arrow.y2 = area_arrow.y1 + font_h;
 80163d6:	444b      	add	r3, r9
                area_ok = lv_area_intersect(&mask_arrow, mask, &area_arrow);
 80163d8:	4631      	mov	r1, r6
 80163da:	a80b      	add	r0, sp, #44	; 0x2c
                area_arrow.y2 = area_arrow.y1 + font_h;
 80163dc:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
                area_ok = lv_area_intersect(&mask_arrow, mask, &area_arrow);
 80163e0:	f7fd fb31 	bl	8013a46 <lv_area_intersect>
                if(area_ok) {
 80163e4:	2800      	cmp	r0, #0
 80163e6:	d0b2      	beq.n	801634e <lv_ddlist_design+0x16a>
                    lv_draw_label(&area_arrow, &mask_arrow, &new_style, opa_scale, LV_SYMBOL_DOWN, LV_TXT_FLAG_NONE,
 80163e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80163ec:	9304      	str	r3, [sp, #16]
 80163ee:	9303      	str	r3, [sp, #12]
 80163f0:	9505      	str	r5, [sp, #20]
 80163f2:	9502      	str	r5, [sp, #8]
 80163f4:	9501      	str	r5, [sp, #4]
 80163f6:	f8cd 8000 	str.w	r8, [sp]
 80163fa:	463b      	mov	r3, r7
 80163fc:	aa0d      	add	r2, sp, #52	; 0x34
 80163fe:	a90b      	add	r1, sp, #44	; 0x2c
 8016400:	a809      	add	r0, sp, #36	; 0x24
 8016402:	e7a2      	b.n	801634a <lv_ddlist_design+0x166>
 8016404:	2000afbc 	.word	0x2000afbc
 8016408:	080d8a07 	.word	0x080d8a07

0801640c <lv_ddlist_scrl_signal>:
{
 801640c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    res = ancestor_scrl_signal(scrl, sign, param);
 801640e:	4b18      	ldr	r3, [pc, #96]	; (8016470 <lv_ddlist_scrl_signal+0x64>)
 8016410:	681b      	ldr	r3, [r3, #0]
{
 8016412:	4605      	mov	r5, r0
 8016414:	460c      	mov	r4, r1
    res = ancestor_scrl_signal(scrl, sign, param);
 8016416:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8016418:	2801      	cmp	r0, #1
    res = ancestor_scrl_signal(scrl, sign, param);
 801641a:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return res;
 801641c:	d114      	bne.n	8016448 <lv_ddlist_scrl_signal+0x3c>
    lv_obj_t * ddlist = lv_obj_get_parent(scrl);
 801641e:	4628      	mov	r0, r5
 8016420:	f7f8 fcd8 	bl	800edd4 <lv_obj_get_parent>
    if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 8016424:	2c05      	cmp	r4, #5
    lv_obj_t * ddlist = lv_obj_get_parent(scrl);
 8016426:	4607      	mov	r7, r0
    if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 8016428:	d110      	bne.n	801644c <lv_ddlist_scrl_signal+0x40>
        const lv_style_t * style = lv_ddlist_get_style(ddlist, LV_DDLIST_STYLE_BG);
 801642a:	2100      	movs	r1, #0
 801642c:	f7ff fec4 	bl	80161b8 <lv_ddlist_get_style>
        lv_coord_t hpad          = LV_MATH_MAX(style->body.padding.left, style->body.padding.right);
 8016430:	f9b0 301c 	ldrsh.w	r3, [r0, #28]
 8016434:	f9b0 201a 	ldrsh.w	r2, [r0, #26]
 8016438:	4293      	cmp	r3, r2
 801643a:	bfb8      	it	lt
 801643c:	4613      	movlt	r3, r2
        if(scrl->ext_draw_pad < hpad) scrl->ext_draw_pad = hpad;
 801643e:	f9b5 2034 	ldrsh.w	r2, [r5, #52]	; 0x34
 8016442:	429a      	cmp	r2, r3
 8016444:	da00      	bge.n	8016448 <lv_ddlist_scrl_signal+0x3c>
 8016446:	86ab      	strh	r3, [r5, #52]	; 0x34
}
 8016448:	4630      	mov	r0, r6
 801644a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if(sign == LV_SIGNAL_RELEASED) {
 801644c:	2c0a      	cmp	r4, #10
 801644e:	d109      	bne.n	8016464 <lv_ddlist_scrl_signal+0x58>
        if(lv_indev_is_dragging(lv_indev_get_act()) == false) {
 8016450:	f7f7 fdd4 	bl	800dffc <lv_indev_get_act>
 8016454:	f7f7 fdf5 	bl	800e042 <lv_indev_is_dragging>
 8016458:	2800      	cmp	r0, #0
 801645a:	d1f5      	bne.n	8016448 <lv_ddlist_scrl_signal+0x3c>
            release_handler(ddlist);
 801645c:	4638      	mov	r0, r7
 801645e:	f7ff fb81 	bl	8015b64 <release_handler>
 8016462:	e7f1      	b.n	8016448 <lv_ddlist_scrl_signal+0x3c>
    } else if(sign == LV_SIGNAL_CLEANUP) {
 8016464:	2c00      	cmp	r4, #0
 8016466:	d1ef      	bne.n	8016448 <lv_ddlist_scrl_signal+0x3c>
        lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
 8016468:	f7f8 fdf1 	bl	800f04e <lv_obj_get_ext_attr>
        ext->label            = NULL; /*The label is already deleted*/
 801646c:	6304      	str	r4, [r0, #48]	; 0x30
 801646e:	e7eb      	b.n	8016448 <lv_ddlist_scrl_signal+0x3c>
 8016470:	2000afc0 	.word	0x2000afc0

08016474 <lv_ddlist_open>:
{
 8016474:	b538      	push	{r3, r4, r5, lr}
 8016476:	460d      	mov	r5, r1
 8016478:	4604      	mov	r4, r0
    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
 801647a:	f7f8 fde8 	bl	800f04e <lv_obj_get_ext_attr>
    ext->opened           = 1;
 801647e:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8016482:	f043 0301 	orr.w	r3, r3, #1
 8016486:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    lv_obj_set_drag(lv_page_get_scrl(ddlist), true);
 801648a:	4620      	mov	r0, r4
 801648c:	f001 fb63 	bl	8017b56 <lv_page_get_scrl>
 8016490:	2101      	movs	r1, #1
 8016492:	f7f7 fe60 	bl	800e156 <lv_obj_set_drag>
    lv_ddlist_refr_size(ddlist, anim);
 8016496:	4629      	mov	r1, r5
 8016498:	4620      	mov	r0, r4
}
 801649a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_ddlist_refr_size(ddlist, anim);
 801649e:	f7ff bae5 	b.w	8015a6c <lv_ddlist_refr_size>

080164a2 <lv_img_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_img_design(lv_obj_t * img, const lv_area_t * mask, lv_design_mode_t mode)
{
 80164a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80164a6:	b099      	sub	sp, #100	; 0x64
 80164a8:	4690      	mov	r8, r2
 80164aa:	4681      	mov	r9, r0
 80164ac:	460d      	mov	r5, r1
    const lv_style_t * style = lv_obj_get_style(img);
 80164ae:	f7f8 fce3 	bl	800ee78 <lv_obj_get_style>
 80164b2:	4606      	mov	r6, r0
    lv_img_ext_t * ext       = lv_obj_get_ext_attr(img);
 80164b4:	4648      	mov	r0, r9
 80164b6:	f7f8 fdca 	bl	800f04e <lv_obj_get_ext_attr>

    if(mode == LV_DESIGN_COVER_CHK) {
 80164ba:	f1b8 0f02 	cmp.w	r8, #2
    lv_img_ext_t * ext       = lv_obj_get_ext_attr(img);
 80164be:	4604      	mov	r4, r0
    if(mode == LV_DESIGN_COVER_CHK) {
 80164c0:	d115      	bne.n	80164ee <lv_img_design+0x4c>
        bool cover = false;
        if(ext->src_type == LV_IMG_SRC_UNKNOWN || ext->src_type == LV_IMG_SRC_SYMBOL) return false;
 80164c2:	7b03      	ldrb	r3, [r0, #12]
 80164c4:	f003 0203 	and.w	r2, r3, #3
 80164c8:	3a02      	subs	r2, #2
 80164ca:	2a01      	cmp	r2, #1
 80164cc:	f240 808f 	bls.w	80165ee <lv_img_design+0x14c>

        if(ext->cf == LV_IMG_CF_TRUE_COLOR || ext->cf == LV_IMG_CF_RAW) cover = lv_area_is_in(mask, &img->coords);
 80164d0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80164d4:	2b20      	cmp	r3, #32
 80164d6:	d002      	beq.n	80164de <lv_img_design+0x3c>
 80164d8:	2b08      	cmp	r3, #8
 80164da:	f040 8088 	bne.w	80165ee <lv_img_design+0x14c>
 80164de:	f109 0110 	add.w	r1, r9, #16
 80164e2:	4628      	mov	r0, r5
 80164e4:	f7fd fb18 	bl	8013b18 <lv_area_is_in>
            lv_draw_img(&img->coords, mask, NULL, style, opa_scale);
        }
    }

    return true;
}
 80164e8:	b019      	add	sp, #100	; 0x64
 80164ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 80164ee:	f1b8 0f00 	cmp.w	r8, #0
 80164f2:	d105      	bne.n	8016500 <lv_img_design+0x5e>
        if(ext->h == 0 || ext->w == 0) return true;
 80164f4:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80164f8:	b113      	cbz	r3, 8016500 <lv_img_design+0x5e>
 80164fa:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80164fe:	b90b      	cbnz	r3, 8016504 <lv_img_design+0x62>
    return true;
 8016500:	2001      	movs	r0, #1
 8016502:	e7f1      	b.n	80164e8 <lv_img_design+0x46>
        lv_opa_t opa_scale = lv_obj_get_opa_scale(img);
 8016504:	4648      	mov	r0, r9
 8016506:	f7f8 fd3a 	bl	800ef7e <lv_obj_get_opa_scale>
        lv_obj_get_coords(img, &coords);
 801650a:	a907      	add	r1, sp, #28
        lv_opa_t opa_scale = lv_obj_get_opa_scale(img);
 801650c:	4607      	mov	r7, r0
        lv_obj_get_coords(img, &coords);
 801650e:	4648      	mov	r0, r9
 8016510:	f7f8 fc8e 	bl	800ee30 <lv_obj_get_coords>
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_VARIABLE) {
 8016514:	7b23      	ldrb	r3, [r4, #12]
 8016516:	f003 0303 	and.w	r3, r3, #3
 801651a:	2b01      	cmp	r3, #1
 801651c:	d842      	bhi.n	80165a4 <lv_img_design+0x102>
            coords.x1 -= ext->offset.x;
 801651e:	88a2      	ldrh	r2, [r4, #4]
 8016520:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8016524:	1a9b      	subs	r3, r3, r2
 8016526:	f8ad 301c 	strh.w	r3, [sp, #28]
            coords.y1 -= ext->offset.y;
 801652a:	88e2      	ldrh	r2, [r4, #6]
 801652c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8016530:	1a9b      	subs	r3, r3, r2
 8016532:	b29b      	uxth	r3, r3
 8016534:	b21a      	sxth	r2, r3
 8016536:	f8ad 201e 	strh.w	r2, [sp, #30]
            cords_tmp.y1 = coords.y1;
 801653a:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
            cords_tmp.y2 = coords.y1 + ext->h - 1;
 801653e:	8962      	ldrh	r2, [r4, #10]
 8016540:	3a01      	subs	r2, #1
            for(; cords_tmp.y1 < coords.y2; cords_tmp.y1 += ext->h, cords_tmp.y2 += ext->h) {
 8016542:	4413      	add	r3, r2
 8016544:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8016548:	f9bd 2026 	ldrsh.w	r2, [sp, #38]	; 0x26
 801654c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8016550:	429a      	cmp	r2, r3
 8016552:	dad5      	bge.n	8016500 <lv_img_design+0x5e>
                cords_tmp.x1 = coords.x1;
 8016554:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
                cords_tmp.x2 = coords.x1 + ext->w - 1;
 8016558:	8922      	ldrh	r2, [r4, #8]
                cords_tmp.x1 = coords.x1;
 801655a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
                cords_tmp.x2 = coords.x1 + ext->w - 1;
 801655e:	3b01      	subs	r3, #1
                for(; cords_tmp.x1 < coords.x2; cords_tmp.x1 += ext->w, cords_tmp.x2 += ext->w) {
 8016560:	4413      	add	r3, r2
 8016562:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 8016566:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
 801656a:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801656e:	429a      	cmp	r2, r3
 8016570:	db08      	blt.n	8016584 <lv_img_design+0xe2>
            for(; cords_tmp.y1 < coords.y2; cords_tmp.y1 += ext->h, cords_tmp.y2 += ext->h) {
 8016572:	8963      	ldrh	r3, [r4, #10]
 8016574:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 8016578:	441a      	add	r2, r3
 801657a:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 801657e:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8016582:	e7de      	b.n	8016542 <lv_img_design+0xa0>
                    lv_draw_img(&cords_tmp, mask, ext->src, style, opa_scale);
 8016584:	9700      	str	r7, [sp, #0]
 8016586:	4633      	mov	r3, r6
 8016588:	6822      	ldr	r2, [r4, #0]
 801658a:	4629      	mov	r1, r5
 801658c:	a809      	add	r0, sp, #36	; 0x24
 801658e:	f7fa f8ed 	bl	801076c <lv_draw_img>
                for(; cords_tmp.x1 < coords.x2; cords_tmp.x1 += ext->w, cords_tmp.x2 += ext->w) {
 8016592:	8923      	ldrh	r3, [r4, #8]
 8016594:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8016598:	441a      	add	r2, r3
 801659a:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 801659e:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80165a2:	e7dd      	b.n	8016560 <lv_img_design+0xbe>
        } else if(ext->src_type == LV_IMG_SRC_SYMBOL) {
 80165a4:	2b02      	cmp	r3, #2
 80165a6:	d119      	bne.n	80165dc <lv_img_design+0x13a>
            lv_style_copy(&style_mod, style);
 80165a8:	4631      	mov	r1, r6
 80165aa:	a809      	add	r0, sp, #36	; 0x24
 80165ac:	f7f9 f892 	bl	800f6d4 <lv_style_copy>
            style_mod.text.color = style->image.color;
 80165b0:	8e33      	ldrh	r3, [r6, #48]	; 0x30
 80165b2:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
            lv_draw_label(&coords, mask, &style_mod, opa_scale, ext->src, LV_TXT_FLAG_NONE, NULL, -1, -1, NULL);
 80165b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80165ba:	f8cd 8014 	str.w	r8, [sp, #20]
 80165be:	9304      	str	r3, [sp, #16]
 80165c0:	9303      	str	r3, [sp, #12]
 80165c2:	f8cd 8008 	str.w	r8, [sp, #8]
 80165c6:	f8cd 8004 	str.w	r8, [sp, #4]
 80165ca:	6823      	ldr	r3, [r4, #0]
 80165cc:	9300      	str	r3, [sp, #0]
 80165ce:	aa09      	add	r2, sp, #36	; 0x24
 80165d0:	463b      	mov	r3, r7
 80165d2:	4629      	mov	r1, r5
 80165d4:	a807      	add	r0, sp, #28
 80165d6:	f7fa f9c9 	bl	801096c <lv_draw_label>
 80165da:	e791      	b.n	8016500 <lv_img_design+0x5e>
            lv_draw_img(&img->coords, mask, NULL, style, opa_scale);
 80165dc:	9700      	str	r7, [sp, #0]
 80165de:	4633      	mov	r3, r6
 80165e0:	4642      	mov	r2, r8
 80165e2:	4629      	mov	r1, r5
 80165e4:	f109 0010 	add.w	r0, r9, #16
 80165e8:	f7fa f8c0 	bl	801076c <lv_draw_img>
 80165ec:	e788      	b.n	8016500 <lv_img_design+0x5e>
        if(ext->src_type == LV_IMG_SRC_UNKNOWN || ext->src_type == LV_IMG_SRC_SYMBOL) return false;
 80165ee:	2000      	movs	r0, #0
 80165f0:	e77a      	b.n	80164e8 <lv_img_design+0x46>

080165f2 <lv_img_get_auto_size>:
{
 80165f2:	b508      	push	{r3, lr}
    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
 80165f4:	f7f8 fd2b 	bl	800f04e <lv_obj_get_ext_attr>
    return ext->auto_size == 0 ? false : true;
 80165f8:	7b00      	ldrb	r0, [r0, #12]
}
 80165fa:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80165fe:	bd08      	pop	{r3, pc}

08016600 <lv_img_set_src>:
{
 8016600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016604:	4606      	mov	r6, r0
 8016606:	b086      	sub	sp, #24
    lv_img_src_t src_type = lv_img_src_get_type(src_img);
 8016608:	4608      	mov	r0, r1
{
 801660a:	460d      	mov	r5, r1
    lv_img_src_t src_type = lv_img_src_get_type(src_img);
 801660c:	f7fa f988 	bl	8010920 <lv_img_src_get_type>
 8016610:	4607      	mov	r7, r0
    lv_img_ext_t * ext    = lv_obj_get_ext_attr(img);
 8016612:	4630      	mov	r0, r6
 8016614:	f7f8 fd1b 	bl	800f04e <lv_obj_get_ext_attr>
    if(src_type == LV_IMG_SRC_UNKNOWN) {
 8016618:	2f03      	cmp	r7, #3
    lv_img_ext_t * ext    = lv_obj_get_ext_attr(img);
 801661a:	4604      	mov	r4, r0
    if(src_type == LV_IMG_SRC_UNKNOWN) {
 801661c:	d111      	bne.n	8016642 <lv_img_set_src+0x42>
        if(ext->src_type == LV_IMG_SRC_SYMBOL || ext->src_type == LV_IMG_SRC_FILE) {
 801661e:	7b03      	ldrb	r3, [r0, #12]
 8016620:	f003 0303 	and.w	r3, r3, #3
 8016624:	3b01      	subs	r3, #1
 8016626:	2b01      	cmp	r3, #1
 8016628:	d802      	bhi.n	8016630 <lv_img_set_src+0x30>
            lv_mem_free(ext->src);
 801662a:	6800      	ldr	r0, [r0, #0]
 801662c:	f7fd fc8e 	bl	8013f4c <lv_mem_free>
        ext->src      = NULL;
 8016630:	2300      	movs	r3, #0
 8016632:	6023      	str	r3, [r4, #0]
        ext->src_type = LV_IMG_SRC_UNKNOWN;
 8016634:	7b23      	ldrb	r3, [r4, #12]
 8016636:	f043 0303 	orr.w	r3, r3, #3
 801663a:	7323      	strb	r3, [r4, #12]
}
 801663c:	b006      	add	sp, #24
 801663e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_img_decoder_get_info(src_img, &header);
 8016642:	a904      	add	r1, sp, #16
 8016644:	4628      	mov	r0, r5
 8016646:	f7fc fdd7 	bl	80131f8 <lv_img_decoder_get_info>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 801664a:	bb4f      	cbnz	r7, 80166a0 <lv_img_set_src+0xa0>
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
 801664c:	7b23      	ldrb	r3, [r4, #12]
 801664e:	f003 0303 	and.w	r3, r3, #3
 8016652:	3b01      	subs	r3, #1
 8016654:	2b01      	cmp	r3, #1
 8016656:	d802      	bhi.n	801665e <lv_img_set_src+0x5e>
            lv_mem_free(ext->src);
 8016658:	6820      	ldr	r0, [r4, #0]
 801665a:	f7fd fc77 	bl	8013f4c <lv_mem_free>
        ext->src = src_img;
 801665e:	6025      	str	r5, [r4, #0]
    ext->w        = header.w;
 8016660:	9a04      	ldr	r2, [sp, #16]
    ext->src_type = src_type;
 8016662:	7b23      	ldrb	r3, [r4, #12]
    ext->w        = header.w;
 8016664:	f3c2 228a 	ubfx	r2, r2, #10, #11
 8016668:	8122      	strh	r2, [r4, #8]
    ext->h        = header.h;
 801666a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801666e:	f3c2 124a 	ubfx	r2, r2, #5, #11
 8016672:	8162      	strh	r2, [r4, #10]
    ext->cf       = header.cf;
 8016674:	f89d 2010 	ldrb.w	r2, [sp, #16]
    ext->src_type = src_type;
 8016678:	f367 0301 	bfi	r3, r7, #0, #2
    ext->cf       = header.cf;
 801667c:	f362 03c7 	bfi	r3, r2, #3, #5
 8016680:	7323      	strb	r3, [r4, #12]
    if(lv_img_get_auto_size(img) != false) {
 8016682:	4630      	mov	r0, r6
 8016684:	f7ff ffb5 	bl	80165f2 <lv_img_get_auto_size>
 8016688:	b130      	cbz	r0, 8016698 <lv_img_set_src+0x98>
        lv_obj_set_size(img, ext->w, ext->h);
 801668a:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 801668e:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8016692:	4630      	mov	r0, r6
 8016694:	f7f8 fac0 	bl	800ec18 <lv_obj_set_size>
    lv_obj_invalidate(img);
 8016698:	4630      	mov	r0, r6
 801669a:	f7f7 fe5b 	bl	800e354 <lv_obj_invalidate>
 801669e:	e7cd      	b.n	801663c <lv_img_set_src+0x3c>
    } else if(src_type == LV_IMG_SRC_FILE || src_type == LV_IMG_SRC_SYMBOL) {
 80166a0:	1e7b      	subs	r3, r7, #1
 80166a2:	b2db      	uxtb	r3, r3
 80166a4:	2b01      	cmp	r3, #1
 80166a6:	d8db      	bhi.n	8016660 <lv_img_set_src+0x60>
        if(ext->src != src_img) {
 80166a8:	6820      	ldr	r0, [r4, #0]
 80166aa:	4285      	cmp	r5, r0
 80166ac:	d015      	beq.n	80166da <lv_img_set_src+0xda>
            if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
 80166ae:	7b23      	ldrb	r3, [r4, #12]
 80166b0:	f003 0303 	and.w	r3, r3, #3
 80166b4:	3b01      	subs	r3, #1
 80166b6:	2b01      	cmp	r3, #1
 80166b8:	d801      	bhi.n	80166be <lv_img_set_src+0xbe>
                lv_mem_free(ext->src);
 80166ba:	f7fd fc47 	bl	8013f4c <lv_mem_free>
            char * new_str = lv_mem_alloc(strlen(src_img) + 1);
 80166be:	4628      	mov	r0, r5
 80166c0:	f7e9 fd86 	bl	80001d0 <strlen>
 80166c4:	3001      	adds	r0, #1
 80166c6:	f7fd fc0b 	bl	8013ee0 <lv_mem_alloc>
            lv_mem_assert(new_str);
 80166ca:	4680      	mov	r8, r0
 80166cc:	b900      	cbnz	r0, 80166d0 <lv_img_set_src+0xd0>
 80166ce:	e7fe      	b.n	80166ce <lv_img_set_src+0xce>
            strcpy(new_str, src_img);
 80166d0:	4629      	mov	r1, r5
 80166d2:	f002 ffdb 	bl	801968c <strcpy>
            ext->src = new_str;
 80166d6:	f8c4 8000 	str.w	r8, [r4]
    if(src_type == LV_IMG_SRC_SYMBOL) {
 80166da:	2f02      	cmp	r7, #2
 80166dc:	d1c0      	bne.n	8016660 <lv_img_set_src+0x60>
 * @return pointer to the image's style
 */
static inline const lv_style_t * lv_img_get_style(const lv_obj_t * img, lv_img_style_t type)
{
    (void)type; /*Unused*/
    return lv_obj_get_style(img);
 80166de:	4630      	mov	r0, r6
 80166e0:	f7f8 fbca 	bl	800ee78 <lv_obj_get_style>
        lv_txt_get_size(&size, src_img, style->text.font, style->text.letter_space, style->text.line_space,
 80166e4:	2200      	movs	r2, #0
 80166e6:	f9b0 3028 	ldrsh.w	r3, [r0, #40]	; 0x28
 80166ea:	9202      	str	r2, [sp, #8]
 80166ec:	f647 4218 	movw	r2, #31768	; 0x7c18
 80166f0:	9201      	str	r2, [sp, #4]
 80166f2:	f9b0 202a 	ldrsh.w	r2, [r0, #42]	; 0x2a
 80166f6:	9200      	str	r2, [sp, #0]
 80166f8:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80166fa:	4629      	mov	r1, r5
 80166fc:	a805      	add	r0, sp, #20
 80166fe:	f7fd ffad 	bl	801465c <lv_txt_get_size>
        header.w = size.x;
 8016702:	9b04      	ldr	r3, [sp, #16]
 8016704:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8016708:	f362 2394 	bfi	r3, r2, #10, #11
        header.h = size.y;
 801670c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
        header.w = size.x;
 8016710:	9304      	str	r3, [sp, #16]
        header.h = size.y;
 8016712:	0c1b      	lsrs	r3, r3, #16
 8016714:	f362 134f 	bfi	r3, r2, #5, #11
 8016718:	f8ad 3012 	strh.w	r3, [sp, #18]
 801671c:	e7a0      	b.n	8016660 <lv_img_set_src+0x60>
	...

08016720 <lv_img_create>:
{
 8016720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016724:	4680      	mov	r8, r0
 8016726:	460e      	mov	r6, r1
    new_img = lv_obj_create(par, copy);
 8016728:	f7f8 f8f8 	bl	800e91c <lv_obj_create>
    lv_mem_assert(new_img);
 801672c:	4605      	mov	r5, r0
 801672e:	b900      	cbnz	r0, 8016732 <lv_img_create+0x12>
 8016730:	e7fe      	b.n	8016730 <lv_img_create+0x10>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_img);
 8016732:	4c2a      	ldr	r4, [pc, #168]	; (80167dc <lv_img_create+0xbc>)
 8016734:	6823      	ldr	r3, [r4, #0]
 8016736:	b913      	cbnz	r3, 801673e <lv_img_create+0x1e>
 8016738:	f7f8 fc85 	bl	800f046 <lv_obj_get_signal_cb>
 801673c:	6020      	str	r0, [r4, #0]
    lv_img_ext_t * ext = lv_obj_allocate_ext_attr(new_img, sizeof(lv_img_ext_t));
 801673e:	2110      	movs	r1, #16
 8016740:	4628      	mov	r0, r5
 8016742:	f7f7 fdd9 	bl	800e2f8 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 8016746:	4604      	mov	r4, r0
 8016748:	b900      	cbnz	r0, 801674c <lv_img_create+0x2c>
 801674a:	e7fe      	b.n	801674a <lv_img_create+0x2a>
    ext->src_type  = LV_IMG_SRC_UNKNOWN;
 801674c:	7b03      	ldrb	r3, [r0, #12]
    ext->src       = NULL;
 801674e:	2700      	movs	r7, #0
    ext->cf        = LV_IMG_CF_UNKNOWN;
 8016750:	f043 0303 	orr.w	r3, r3, #3
 8016754:	f367 03c7 	bfi	r3, r7, #3, #5
 8016758:	7303      	strb	r3, [r0, #12]
    ext->src       = NULL;
 801675a:	6007      	str	r7, [r0, #0]
    ext->w         = lv_obj_get_width(new_img);
 801675c:	4628      	mov	r0, r5
 801675e:	f7f8 fb79 	bl	800ee54 <lv_obj_get_width>
 8016762:	8120      	strh	r0, [r4, #8]
    ext->h         = lv_obj_get_height(new_img);
 8016764:	4628      	mov	r0, r5
 8016766:	f7f8 fb7b 	bl	800ee60 <lv_obj_get_height>
    ext->auto_size = 1;
 801676a:	7b23      	ldrb	r3, [r4, #12]
    ext->h         = lv_obj_get_height(new_img);
 801676c:	8160      	strh	r0, [r4, #10]
    ext->auto_size = 1;
 801676e:	f043 0304 	orr.w	r3, r3, #4
    lv_obj_set_signal_cb(new_img, lv_img_signal);
 8016772:	491b      	ldr	r1, [pc, #108]	; (80167e0 <lv_img_create+0xc0>)
    ext->auto_size = 1;
 8016774:	7323      	strb	r3, [r4, #12]
    lv_obj_set_signal_cb(new_img, lv_img_signal);
 8016776:	4628      	mov	r0, r5
    ext->offset.x  = 0;
 8016778:	80a7      	strh	r7, [r4, #4]
    ext->offset.y  = 0;
 801677a:	80e7      	strh	r7, [r4, #6]
    lv_obj_set_signal_cb(new_img, lv_img_signal);
 801677c:	f7f7 fdb8 	bl	800e2f0 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_img, lv_img_design);
 8016780:	4918      	ldr	r1, [pc, #96]	; (80167e4 <lv_img_create+0xc4>)
 8016782:	4628      	mov	r0, r5
 8016784:	f7f7 fdb6 	bl	800e2f4 <lv_obj_set_design_cb>
    if(copy == NULL) {
 8016788:	b9b6      	cbnz	r6, 80167b8 <lv_img_create+0x98>
        lv_obj_set_click(new_img, false);
 801678a:	4631      	mov	r1, r6
 801678c:	4628      	mov	r0, r5
 801678e:	f7f7 fcdb 	bl	800e148 <lv_obj_set_click>
 8016792:	7b23      	ldrb	r3, [r4, #12]
        if(par != NULL) {
 8016794:	f1b8 0f00 	cmp.w	r8, #0
 8016798:	d009      	beq.n	80167ae <lv_img_create+0x8e>
            ext->auto_size = 1;
 801679a:	f043 0304 	orr.w	r3, r3, #4
 801679e:	7323      	strb	r3, [r4, #12]
            lv_obj_set_style(new_img, NULL); /*Inherit the style  by default*/
 80167a0:	4631      	mov	r1, r6
            lv_obj_set_style(new_img, &lv_style_plain); /*Set a style for screens*/
 80167a2:	4628      	mov	r0, r5
 80167a4:	f7f8 fb3a 	bl	800ee1c <lv_obj_set_style>
}
 80167a8:	4628      	mov	r0, r5
 80167aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            ext->auto_size = 0;
 80167ae:	f368 0382 	bfi	r3, r8, #2, #1
 80167b2:	7323      	strb	r3, [r4, #12]
            lv_obj_set_style(new_img, &lv_style_plain); /*Set a style for screens*/
 80167b4:	490c      	ldr	r1, [pc, #48]	; (80167e8 <lv_img_create+0xc8>)
 80167b6:	e7f4      	b.n	80167a2 <lv_img_create+0x82>
        lv_img_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 80167b8:	4630      	mov	r0, r6
 80167ba:	f7f8 fc48 	bl	800f04e <lv_obj_get_ext_attr>
        ext->auto_size          = copy_ext->auto_size;
 80167be:	7b03      	ldrb	r3, [r0, #12]
 80167c0:	7b22      	ldrb	r2, [r4, #12]
 80167c2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80167c6:	f363 0282 	bfi	r2, r3, #2, #1
 80167ca:	7322      	strb	r2, [r4, #12]
        lv_img_set_src(new_img, copy_ext->src);
 80167cc:	6801      	ldr	r1, [r0, #0]
 80167ce:	4628      	mov	r0, r5
 80167d0:	f7ff ff16 	bl	8016600 <lv_img_set_src>
        lv_obj_refresh_style(new_img);
 80167d4:	4628      	mov	r0, r5
 80167d6:	f7f8 fa78 	bl	800ecca <lv_obj_refresh_style>
 80167da:	e7e5      	b.n	80167a8 <lv_img_create+0x88>
 80167dc:	2000afc8 	.word	0x2000afc8
 80167e0:	080167ed 	.word	0x080167ed
 80167e4:	080164a3 	.word	0x080164a3
 80167e8:	2000c424 	.word	0x2000c424

080167ec <lv_img_signal>:
static lv_res_t lv_img_signal(lv_obj_t * img, lv_signal_t sign, void * param)
{
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(img, sign, param);
 80167ec:	4b1d      	ldr	r3, [pc, #116]	; (8016864 <lv_img_signal+0x78>)
{
 80167ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    res = ancestor_signal(img, sign, param);
 80167f2:	681b      	ldr	r3, [r3, #0]
{
 80167f4:	4680      	mov	r8, r0
 80167f6:	460d      	mov	r5, r1
 80167f8:	4617      	mov	r7, r2
    res = ancestor_signal(img, sign, param);
 80167fa:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 80167fc:	2801      	cmp	r0, #1
    res = ancestor_signal(img, sign, param);
 80167fe:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return res;
 8016800:	d112      	bne.n	8016828 <lv_img_signal+0x3c>

    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
 8016802:	4640      	mov	r0, r8
 8016804:	f7f8 fc23 	bl	800f04e <lv_obj_get_ext_attr>
 8016808:	4604      	mov	r4, r0
    if(sign == LV_SIGNAL_CLEANUP) {
 801680a:	b985      	cbnz	r5, 801682e <lv_img_signal+0x42>
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
 801680c:	7b03      	ldrb	r3, [r0, #12]
 801680e:	f003 0303 	and.w	r3, r3, #3
 8016812:	3b01      	subs	r3, #1
 8016814:	2b01      	cmp	r3, #1
 8016816:	d807      	bhi.n	8016828 <lv_img_signal+0x3c>
            lv_mem_free(ext->src);
 8016818:	6800      	ldr	r0, [r0, #0]
 801681a:	f7fd fb97 	bl	8013f4c <lv_mem_free>
            ext->src      = NULL;
            ext->src_type = LV_IMG_SRC_UNKNOWN;
 801681e:	7b23      	ldrb	r3, [r4, #12]
            ext->src      = NULL;
 8016820:	6025      	str	r5, [r4, #0]
            ext->src_type = LV_IMG_SRC_UNKNOWN;
 8016822:	f043 0303 	orr.w	r3, r3, #3
 8016826:	7323      	strb	r3, [r4, #12]
        }
        buf->type[i] = "lv_img";
    }

    return res;
}
 8016828:	4630      	mov	r0, r6
 801682a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 801682e:	2d04      	cmp	r5, #4
 8016830:	d109      	bne.n	8016846 <lv_img_signal+0x5a>
        if(ext->src_type == LV_IMG_SRC_SYMBOL) {
 8016832:	7b03      	ldrb	r3, [r0, #12]
 8016834:	f003 0303 	and.w	r3, r3, #3
 8016838:	2b02      	cmp	r3, #2
 801683a:	d1f5      	bne.n	8016828 <lv_img_signal+0x3c>
            lv_img_set_src(img, ext->src);
 801683c:	6801      	ldr	r1, [r0, #0]
 801683e:	4640      	mov	r0, r8
 8016840:	f7ff fede 	bl	8016600 <lv_img_set_src>
 8016844:	e7f0      	b.n	8016828 <lv_img_signal+0x3c>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8016846:	2d06      	cmp	r5, #6
 8016848:	d1ee      	bne.n	8016828 <lv_img_signal+0x3c>
 801684a:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 801684c:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 8016850:	b2da      	uxtb	r2, r3
 8016852:	b119      	cbz	r1, 801685c <lv_img_signal+0x70>
 8016854:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8016856:	2b07      	cmp	r3, #7
 8016858:	d1f8      	bne.n	801684c <lv_img_signal+0x60>
 801685a:	461a      	mov	r2, r3
        buf->type[i] = "lv_img";
 801685c:	4b02      	ldr	r3, [pc, #8]	; (8016868 <lv_img_signal+0x7c>)
 801685e:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
 8016862:	e7e1      	b.n	8016828 <lv_img_signal+0x3c>
 8016864:	2000afc8 	.word	0x2000afc8
 8016868:	080d8a15 	.word	0x080d8a15

0801686c <refr_img>:

    return res;
}

static void refr_img(lv_obj_t * imgbtn)
{
 801686c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801686e:	4604      	mov	r4, r0
    lv_imgbtn_ext_t * ext = lv_obj_get_ext_attr(imgbtn);
 8016870:	f7f8 fbed 	bl	800f04e <lv_obj_get_ext_attr>
 8016874:	4605      	mov	r5, r0
 * @param imgbtn pointer to a image button object
 * @return the state of the button (from lv_btn_state_t enum)
 */
static inline lv_btn_state_t lv_imgbtn_get_state(const lv_obj_t * imgbtn)
{
    return lv_btn_get_state(imgbtn);
 8016876:	4620      	mov	r0, r4
 8016878:	f7fe fab8 	bl	8014dec <lv_btn_get_state>
    lv_btn_state_t state  = lv_imgbtn_get_state(imgbtn);
    lv_img_header_t header;

#if LV_IMGBTN_TILED == 0
    const void * src = ext->img_src[state];
 801687c:	eb05 0080 	add.w	r0, r5, r0, lsl #2
#else
    const void * src = ext->img_src_mid[state];
#endif

    lv_res_t info_res;
    info_res = lv_img_decoder_get_info(src, &header);
 8016880:	a901      	add	r1, sp, #4
 8016882:	69c0      	ldr	r0, [r0, #28]
 8016884:	f7fc fcb8 	bl	80131f8 <lv_img_decoder_get_info>
    if(info_res == LV_RES_OK) {
 8016888:	2801      	cmp	r0, #1
 801688a:	d114      	bne.n	80168b6 <refr_img+0x4a>
        ext->act_cf = header.cf;
 801688c:	f89d 3004 	ldrb.w	r3, [sp, #4]
#if LV_IMGBTN_TILED == 0
        lv_obj_set_size(imgbtn, header.w, header.h);
 8016890:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8016894:	9901      	ldr	r1, [sp, #4]
        ext->act_cf = header.cf;
 8016896:	f3c3 0304 	ubfx	r3, r3, #0, #5
 801689a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
        lv_obj_set_size(imgbtn, header.w, header.h);
 801689e:	f3c2 124a 	ubfx	r2, r2, #5, #11
 80168a2:	f3c1 218a 	ubfx	r1, r1, #10, #11
 80168a6:	4620      	mov	r0, r4
 80168a8:	f7f8 f9b6 	bl	800ec18 <lv_obj_set_size>
#endif
    } else {
        ext->act_cf = LV_IMG_CF_UNKNOWN;
    }

    lv_obj_invalidate(imgbtn);
 80168ac:	4620      	mov	r0, r4
 80168ae:	f7f7 fd51 	bl	800e354 <lv_obj_invalidate>
}
 80168b2:	b003      	add	sp, #12
 80168b4:	bd30      	pop	{r4, r5, pc}
        ext->act_cf = LV_IMG_CF_UNKNOWN;
 80168b6:	2300      	movs	r3, #0
 80168b8:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 80168bc:	e7f6      	b.n	80168ac <refr_img+0x40>
	...

080168c0 <lv_imgbtn_signal>:
{
 80168c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    res = ancestor_signal(imgbtn, sign, param);
 80168c2:	4b0f      	ldr	r3, [pc, #60]	; (8016900 <lv_imgbtn_signal+0x40>)
 80168c4:	681b      	ldr	r3, [r3, #0]
{
 80168c6:	4607      	mov	r7, r0
 80168c8:	460e      	mov	r6, r1
 80168ca:	4615      	mov	r5, r2
    res = ancestor_signal(imgbtn, sign, param);
 80168cc:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 80168ce:	2801      	cmp	r0, #1
    res = ancestor_signal(imgbtn, sign, param);
 80168d0:	4604      	mov	r4, r0
    if(res != LV_RES_OK) return res;
 80168d2:	d104      	bne.n	80168de <lv_imgbtn_signal+0x1e>
    if(sign == LV_SIGNAL_STYLE_CHG) {
 80168d4:	2e04      	cmp	r6, #4
 80168d6:	d104      	bne.n	80168e2 <lv_imgbtn_signal+0x22>
        refr_img(imgbtn);
 80168d8:	4638      	mov	r0, r7
 80168da:	f7ff ffc7 	bl	801686c <refr_img>
}
 80168de:	4620      	mov	r0, r4
 80168e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 80168e2:	2e06      	cmp	r6, #6
 80168e4:	d1fb      	bne.n	80168de <lv_imgbtn_signal+0x1e>
 80168e6:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 80168e8:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80168ec:	b2da      	uxtb	r2, r3
 80168ee:	b119      	cbz	r1, 80168f8 <lv_imgbtn_signal+0x38>
 80168f0:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 80168f2:	2b07      	cmp	r3, #7
 80168f4:	d1f8      	bne.n	80168e8 <lv_imgbtn_signal+0x28>
 80168f6:	461a      	mov	r2, r3
        buf->type[i] = "lv_imgbtn";
 80168f8:	4b02      	ldr	r3, [pc, #8]	; (8016904 <lv_imgbtn_signal+0x44>)
 80168fa:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
 80168fe:	e7ee      	b.n	80168de <lv_imgbtn_signal+0x1e>
 8016900:	2000afd0 	.word	0x2000afd0
 8016904:	080d8a1c 	.word	0x080d8a1c

08016908 <lv_imgbtn_design>:
    if(mode == LV_DESIGN_COVER_CHK) {
 8016908:	2a02      	cmp	r2, #2
{
 801690a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801690e:	4604      	mov	r4, r0
 8016910:	460e      	mov	r6, r1
    if(mode == LV_DESIGN_COVER_CHK) {
 8016912:	d10f      	bne.n	8016934 <lv_imgbtn_design+0x2c>
        lv_imgbtn_ext_t * ext = lv_obj_get_ext_attr(imgbtn);
 8016914:	f7f8 fb9b 	bl	800f04e <lv_obj_get_ext_attr>
        if(ext->act_cf == LV_IMG_CF_TRUE_COLOR || ext->act_cf == LV_IMG_CF_RAW) {
 8016918:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 801691c:	2b04      	cmp	r3, #4
 801691e:	d001      	beq.n	8016924 <lv_imgbtn_design+0x1c>
 8016920:	2b01      	cmp	r3, #1
 8016922:	d123      	bne.n	801696c <lv_imgbtn_design+0x64>
            cover = lv_area_is_in(mask, &imgbtn->coords);
 8016924:	f104 0110 	add.w	r1, r4, #16
 8016928:	4630      	mov	r0, r6
}
 801692a:	b002      	add	sp, #8
 801692c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            cover = lv_area_is_in(mask, &imgbtn->coords);
 8016930:	f7fd b8f2 	b.w	8013b18 <lv_area_is_in>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 8016934:	b9c2      	cbnz	r2, 8016968 <lv_imgbtn_design+0x60>
        lv_imgbtn_ext_t * ext    = lv_obj_get_ext_attr(imgbtn);
 8016936:	f7f8 fb8a 	bl	800f04e <lv_obj_get_ext_attr>
 801693a:	4605      	mov	r5, r0
 801693c:	4620      	mov	r0, r4
 801693e:	f7fe fa55 	bl	8014dec <lv_btn_get_state>
    return lv_btn_get_style(imgbtn, type);
 8016942:	4601      	mov	r1, r0
 8016944:	4607      	mov	r7, r0
 8016946:	4620      	mov	r0, r4
 8016948:	f7fe fb08 	bl	8014f5c <lv_btn_get_style>
 801694c:	4680      	mov	r8, r0
        lv_opa_t opa_scale       = lv_obj_get_opa_scale(imgbtn);
 801694e:	4620      	mov	r0, r4
 8016950:	f7f8 fb15 	bl	800ef7e <lv_obj_get_opa_scale>
        const void * src = ext->img_src[state];
 8016954:	eb05 0587 	add.w	r5, r5, r7, lsl #2
        lv_draw_img(&imgbtn->coords, mask, src, style, opa_scale);
 8016958:	9000      	str	r0, [sp, #0]
 801695a:	4643      	mov	r3, r8
 801695c:	69ea      	ldr	r2, [r5, #28]
 801695e:	4631      	mov	r1, r6
 8016960:	f104 0010 	add.w	r0, r4, #16
 8016964:	f7f9 ff02 	bl	801076c <lv_draw_img>
    return true;
 8016968:	2001      	movs	r0, #1
 801696a:	e000      	b.n	801696e <lv_imgbtn_design+0x66>
        bool cover            = false;
 801696c:	2000      	movs	r0, #0
}
 801696e:	b002      	add	sp, #8
 8016970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016974 <lv_imgbtn_create>:
{
 8016974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016976:	460f      	mov	r7, r1
    lv_obj_t * new_imgbtn = lv_btn_create(par, copy);
 8016978:	f7fe f9a8 	bl	8014ccc <lv_btn_create>
    lv_mem_assert(new_imgbtn);
 801697c:	4604      	mov	r4, r0
 801697e:	b900      	cbnz	r0, 8016982 <lv_imgbtn_create+0xe>
 8016980:	e7fe      	b.n	8016980 <lv_imgbtn_create+0xc>
    lv_imgbtn_ext_t * ext = lv_obj_allocate_ext_attr(new_imgbtn, sizeof(lv_imgbtn_ext_t));
 8016982:	2134      	movs	r1, #52	; 0x34
 8016984:	f7f7 fcb8 	bl	800e2f8 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 8016988:	4606      	mov	r6, r0
 801698a:	b900      	cbnz	r0, 801698e <lv_imgbtn_create+0x1a>
 801698c:	e7fe      	b.n	801698c <lv_imgbtn_create+0x18>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_imgbtn);
 801698e:	4d19      	ldr	r5, [pc, #100]	; (80169f4 <lv_imgbtn_create+0x80>)
 8016990:	682b      	ldr	r3, [r5, #0]
 8016992:	b91b      	cbnz	r3, 801699c <lv_imgbtn_create+0x28>
 8016994:	4620      	mov	r0, r4
 8016996:	f7f8 fb56 	bl	800f046 <lv_obj_get_signal_cb>
 801699a:	6028      	str	r0, [r5, #0]
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(new_imgbtn);
 801699c:	4d16      	ldr	r5, [pc, #88]	; (80169f8 <lv_imgbtn_create+0x84>)
 801699e:	682b      	ldr	r3, [r5, #0]
 80169a0:	b91b      	cbnz	r3, 80169aa <lv_imgbtn_create+0x36>
 80169a2:	4620      	mov	r0, r4
 80169a4:	f7f8 fb51 	bl	800f04a <lv_obj_get_design_cb>
 80169a8:	6028      	str	r0, [r5, #0]
    memset(ext->img_src, 0, sizeof(ext->img_src));
 80169aa:	f106 051c 	add.w	r5, r6, #28
 80169ae:	2214      	movs	r2, #20
 80169b0:	2100      	movs	r1, #0
 80169b2:	4628      	mov	r0, r5
 80169b4:	f002 fdb9 	bl	801952a <memset>
    ext->act_cf = LV_IMG_CF_UNKNOWN;
 80169b8:	2300      	movs	r3, #0
    lv_obj_set_signal_cb(new_imgbtn, lv_imgbtn_signal);
 80169ba:	4910      	ldr	r1, [pc, #64]	; (80169fc <lv_imgbtn_create+0x88>)
    ext->act_cf = LV_IMG_CF_UNKNOWN;
 80169bc:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    lv_obj_set_signal_cb(new_imgbtn, lv_imgbtn_signal);
 80169c0:	4620      	mov	r0, r4
 80169c2:	f7f7 fc95 	bl	800e2f0 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_imgbtn, lv_imgbtn_design);
 80169c6:	490e      	ldr	r1, [pc, #56]	; (8016a00 <lv_imgbtn_create+0x8c>)
 80169c8:	4620      	mov	r0, r4
 80169ca:	f7f7 fc93 	bl	800e2f4 <lv_obj_set_design_cb>
    if(copy == NULL) {
 80169ce:	b177      	cbz	r7, 80169ee <lv_imgbtn_create+0x7a>
        lv_imgbtn_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 80169d0:	4638      	mov	r0, r7
 80169d2:	f7f8 fb3c 	bl	800f04e <lv_obj_get_ext_attr>
        memcpy(ext->img_src, copy_ext->img_src, sizeof(ext->img_src));
 80169d6:	f100 031c 	add.w	r3, r0, #28
 80169da:	3030      	adds	r0, #48	; 0x30
 80169dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80169e0:	f845 2b04 	str.w	r2, [r5], #4
 80169e4:	4283      	cmp	r3, r0
 80169e6:	d1f9      	bne.n	80169dc <lv_imgbtn_create+0x68>
        lv_obj_refresh_style(new_imgbtn);
 80169e8:	4620      	mov	r0, r4
 80169ea:	f7f8 f96e 	bl	800ecca <lv_obj_refresh_style>
}
 80169ee:	4620      	mov	r0, r4
 80169f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80169f2:	bf00      	nop
 80169f4:	2000afd0 	.word	0x2000afd0
 80169f8:	2000afcc 	.word	0x2000afcc
 80169fc:	080168c1 	.word	0x080168c1
 8016a00:	08016909 	.word	0x08016909

08016a04 <lv_imgbtn_set_src>:
{
 8016a04:	b570      	push	{r4, r5, r6, lr}
 8016a06:	4605      	mov	r5, r0
 8016a08:	460c      	mov	r4, r1
 8016a0a:	4616      	mov	r6, r2
    lv_imgbtn_ext_t * ext = lv_obj_get_ext_attr(imgbtn);
 8016a0c:	f7f8 fb1f 	bl	800f04e <lv_obj_get_ext_attr>
    ext->img_src[state] = src;
 8016a10:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8016a14:	61c6      	str	r6, [r0, #28]
    refr_img(imgbtn);
 8016a16:	4628      	mov	r0, r5
}
 8016a18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    refr_img(imgbtn);
 8016a1c:	f7ff bf26 	b.w	801686c <refr_img>

08016a20 <lv_label_dot_tmp_free>:
 * Free the dot_tmp_ptr field if it was previously allocated.
 * Always clears the field
 * @param label pointer to label object.
 */
static void lv_label_dot_tmp_free(lv_obj_t * label)
{
 8016a20:	b510      	push	{r4, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8016a22:	f7f8 fb14 	bl	800f04e <lv_obj_get_ext_attr>
    if(ext->dot_tmp_alloc && ext->dot.tmp_ptr) {
 8016a26:	7fc3      	ldrb	r3, [r0, #31]
 8016a28:	079b      	lsls	r3, r3, #30
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8016a2a:	4604      	mov	r4, r0
    if(ext->dot_tmp_alloc && ext->dot.tmp_ptr) {
 8016a2c:	d503      	bpl.n	8016a36 <lv_label_dot_tmp_free+0x16>
 8016a2e:	6840      	ldr	r0, [r0, #4]
 8016a30:	b108      	cbz	r0, 8016a36 <lv_label_dot_tmp_free+0x16>
        lv_mem_free(ext->dot.tmp_ptr);
 8016a32:	f7fd fa8b 	bl	8013f4c <lv_mem_free>
    }
    ext->dot_tmp_alloc = false;
 8016a36:	7fe3      	ldrb	r3, [r4, #31]
 8016a38:	f36f 0341 	bfc	r3, #1, #1
 8016a3c:	77e3      	strb	r3, [r4, #31]
    ext->dot.tmp_ptr   = NULL;
 8016a3e:	2300      	movs	r3, #0
 8016a40:	6063      	str	r3, [r4, #4]
 8016a42:	bd10      	pop	{r4, pc}

08016a44 <lv_label_revert_dots>:
{
 8016a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a48:	4606      	mov	r6, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8016a4a:	f7f8 fb00 	bl	800f04e <lv_obj_get_ext_attr>
    if(ext->long_mode != LV_LABEL_LONG_DOT) return;
 8016a4e:	7f83      	ldrb	r3, [r0, #30]
 8016a50:	f003 0307 	and.w	r3, r3, #7
 8016a54:	2b02      	cmp	r3, #2
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8016a56:	4604      	mov	r4, r0
    if(ext->long_mode != LV_LABEL_LONG_DOT) return;
 8016a58:	d126      	bne.n	8016aa8 <lv_label_revert_dots+0x64>
    if(ext->dot_end == LV_LABEL_DOT_END_INV) return;
 8016a5a:	8901      	ldrh	r1, [r0, #8]
 8016a5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016a60:	4299      	cmp	r1, r3
 8016a62:	d021      	beq.n	8016aa8 <lv_label_revert_dots+0x64>
    uint32_t byte_i   = lv_txt_encoded_get_byte_id(ext->text, letter_i);
 8016a64:	4b12      	ldr	r3, [pc, #72]	; (8016ab0 <lv_label_revert_dots+0x6c>)
 8016a66:	6800      	ldr	r0, [r0, #0]
 8016a68:	681b      	ldr	r3, [r3, #0]
 8016a6a:	3903      	subs	r1, #3
 8016a6c:	4798      	blx	r3
 8016a6e:	4680      	mov	r8, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8016a70:	4630      	mov	r0, r6
 8016a72:	f7f8 faec 	bl	800f04e <lv_obj_get_ext_attr>
    if(ext->dot_tmp_alloc) {
 8016a76:	7fc3      	ldrb	r3, [r0, #31]
 8016a78:	079b      	lsls	r3, r3, #30
        return ext->dot.tmp_ptr;
 8016a7a:	bf4c      	ite	mi
 8016a7c:	6840      	ldrmi	r0, [r0, #4]
        return ext->dot.tmp;
 8016a7e:	3004      	addpl	r0, #4
    while(ext->text[byte_i + i] != '\0') {
 8016a80:	2500      	movs	r5, #0
 8016a82:	b2eb      	uxtb	r3, r5
 8016a84:	eb08 0203 	add.w	r2, r8, r3
 8016a88:	6821      	ldr	r1, [r4, #0]
        ext->text[byte_i + i] = dot_tmp[i];
 8016a8a:	5cc3      	ldrb	r3, [r0, r3]
    while(ext->text[byte_i + i] != '\0') {
 8016a8c:	f811 e002 	ldrb.w	lr, [r1, r2]
 8016a90:	188f      	adds	r7, r1, r2
 8016a92:	3501      	adds	r5, #1
 8016a94:	f1be 0f00 	cmp.w	lr, #0
 8016a98:	d108      	bne.n	8016aac <lv_label_revert_dots+0x68>
    ext->text[byte_i + i] = dot_tmp[i];
 8016a9a:	703b      	strb	r3, [r7, #0]
    lv_label_dot_tmp_free(label);
 8016a9c:	4630      	mov	r0, r6
 8016a9e:	f7ff ffbf 	bl	8016a20 <lv_label_dot_tmp_free>
    ext->dot_end = LV_LABEL_DOT_END_INV;
 8016aa2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016aa6:	8123      	strh	r3, [r4, #8]
 8016aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ext->text[byte_i + i] = dot_tmp[i];
 8016aac:	548b      	strb	r3, [r1, r2]
 8016aae:	e7e8      	b.n	8016a82 <lv_label_revert_dots+0x3e>
 8016ab0:	20001ca0 	.word	0x20001ca0

08016ab4 <lv_label_set_offset_y>:
{
 8016ab4:	b538      	push	{r3, r4, r5, lr}
 8016ab6:	4604      	mov	r4, r0
 8016ab8:	460d      	mov	r5, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8016aba:	f7f8 fac8 	bl	800f04e <lv_obj_get_ext_attr>
    ext->offset.y        = y;
 8016abe:	8185      	strh	r5, [r0, #12]
    lv_obj_invalidate(label);
 8016ac0:	4620      	mov	r0, r4
}
 8016ac2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(label);
 8016ac6:	f7f7 bc45 	b.w	800e354 <lv_obj_invalidate>

08016aca <lv_label_set_offset_x>:
{
 8016aca:	b538      	push	{r3, r4, r5, lr}
 8016acc:	4604      	mov	r4, r0
 8016ace:	460d      	mov	r5, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8016ad0:	f7f8 fabd 	bl	800f04e <lv_obj_get_ext_attr>
    ext->offset.x        = x;
 8016ad4:	8145      	strh	r5, [r0, #10]
    lv_obj_invalidate(label);
 8016ad6:	4620      	mov	r0, r4
}
 8016ad8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(label);
 8016adc:	f7f7 bc3a 	b.w	800e354 <lv_obj_invalidate>

08016ae0 <lv_label_set_dot_tmp>:
{
 8016ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ae2:	4615      	mov	r5, r2
 8016ae4:	4607      	mov	r7, r0
 8016ae6:	460e      	mov	r6, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8016ae8:	f7f8 fab1 	bl	800f04e <lv_obj_get_ext_attr>
 8016aec:	4604      	mov	r4, r0
    lv_label_dot_tmp_free(label); /* Deallocate any existing space */
 8016aee:	4638      	mov	r0, r7
 8016af0:	f7ff ff96 	bl	8016a20 <lv_label_dot_tmp_free>
    if(len > sizeof(char *)) {
 8016af4:	2d04      	cmp	r5, #4
 8016af6:	d911      	bls.n	8016b1c <lv_label_set_dot_tmp+0x3c>
        ext->dot.tmp_ptr = lv_mem_alloc(len + 1);
 8016af8:	1c68      	adds	r0, r5, #1
 8016afa:	f7fd f9f1 	bl	8013ee0 <lv_mem_alloc>
 8016afe:	6060      	str	r0, [r4, #4]
        if(ext->dot.tmp_ptr == NULL) {
 8016b00:	b1b0      	cbz	r0, 8016b30 <lv_label_set_dot_tmp+0x50>
        memcpy(ext->dot.tmp_ptr, data, len);
 8016b02:	462a      	mov	r2, r5
 8016b04:	4631      	mov	r1, r6
 8016b06:	f002 fd05 	bl	8019514 <memcpy>
        ext->dot.tmp_ptr[len] = '\0';
 8016b0a:	6863      	ldr	r3, [r4, #4]
 8016b0c:	2200      	movs	r2, #0
 8016b0e:	555a      	strb	r2, [r3, r5]
        ext->dot_tmp_alloc    = true;
 8016b10:	7fe3      	ldrb	r3, [r4, #31]
 8016b12:	f043 0302 	orr.w	r3, r3, #2
 8016b16:	77e3      	strb	r3, [r4, #31]
    return true;
 8016b18:	2001      	movs	r0, #1
 8016b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ext->dot_tmp_alloc = false;
 8016b1c:	7fe3      	ldrb	r3, [r4, #31]
 8016b1e:	f36f 0341 	bfc	r3, #1, #1
 8016b22:	77e3      	strb	r3, [r4, #31]
        memcpy(ext->dot.tmp, data, len);
 8016b24:	462a      	mov	r2, r5
 8016b26:	4631      	mov	r1, r6
 8016b28:	1d20      	adds	r0, r4, #4
 8016b2a:	f002 fcf3 	bl	8019514 <memcpy>
 8016b2e:	e7f3      	b.n	8016b18 <lv_label_set_dot_tmp+0x38>
}
 8016b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016b32 <lv_label_design>:
{
 8016b32:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(mode == LV_DESIGN_COVER_CHK)
 8016b36:	2a02      	cmp	r2, #2
{
 8016b38:	b08d      	sub	sp, #52	; 0x34
 8016b3a:	4607      	mov	r7, r0
 8016b3c:	4688      	mov	r8, r1
    if(mode == LV_DESIGN_COVER_CHK)
 8016b3e:	f000 8102 	beq.w	8016d46 <lv_label_design+0x214>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 8016b42:	2a00      	cmp	r2, #0
 8016b44:	f040 80f6 	bne.w	8016d34 <lv_label_design+0x202>
        const lv_style_t * style = lv_obj_get_style(label);
 8016b48:	f7f8 f996 	bl	800ee78 <lv_obj_get_style>
 8016b4c:	4604      	mov	r4, r0
        lv_opa_t opa_scale       = lv_obj_get_opa_scale(label);
 8016b4e:	4638      	mov	r0, r7
 8016b50:	f7f8 fa15 	bl	800ef7e <lv_obj_get_opa_scale>
        lv_obj_get_coords(label, &coords);
 8016b54:	a908      	add	r1, sp, #32
        lv_opa_t opa_scale       = lv_obj_get_opa_scale(label);
 8016b56:	4681      	mov	r9, r0
        lv_obj_get_coords(label, &coords);
 8016b58:	4638      	mov	r0, r7
 8016b5a:	f7f8 f969 	bl	800ee30 <lv_obj_get_coords>
        lv_group_t * g = lv_obj_get_group(label);
 8016b5e:	4638      	mov	r0, r7
 8016b60:	f7f8 fa7b 	bl	800f05a <lv_obj_get_group>
        if(lv_group_get_focused(g) == label) {
 8016b64:	f7f7 fa0e 	bl	800df84 <lv_group_get_focused>
 8016b68:	4287      	cmp	r7, r0
 8016b6a:	d105      	bne.n	8016b78 <lv_label_design+0x46>
            lv_draw_rect(&coords, mask, style, opa_scale);
 8016b6c:	464b      	mov	r3, r9
 8016b6e:	4622      	mov	r2, r4
 8016b70:	4641      	mov	r1, r8
 8016b72:	a808      	add	r0, sp, #32
 8016b74:	f7fa f990 	bl	8010e98 <lv_draw_rect>
        lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8016b78:	4638      	mov	r0, r7
 8016b7a:	f7f8 fa68 	bl	800f04e <lv_obj_get_ext_attr>
        if(ext->body_draw) {
 8016b7e:	7fc3      	ldrb	r3, [r0, #31]
 8016b80:	07d9      	lsls	r1, r3, #31
        lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8016b82:	4605      	mov	r5, r0
        if(ext->body_draw) {
 8016b84:	d524      	bpl.n	8016bd0 <lv_label_design+0x9e>
            lv_obj_get_coords(label, &bg);
 8016b86:	a90a      	add	r1, sp, #40	; 0x28
 8016b88:	4638      	mov	r0, r7
 8016b8a:	f7f8 f951 	bl	800ee30 <lv_obj_get_coords>
            bg.x1 -= style->body.padding.left;
 8016b8e:	8b62      	ldrh	r2, [r4, #26]
 8016b90:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8016b94:	1a9b      	subs	r3, r3, r2
 8016b96:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
            bg.x2 += style->body.padding.right;
 8016b9a:	8ba2      	ldrh	r2, [r4, #28]
 8016b9c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8016ba0:	4413      	add	r3, r2
 8016ba2:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            bg.y1 -= style->body.padding.top;
 8016ba6:	8ae2      	ldrh	r2, [r4, #22]
 8016ba8:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8016bac:	1a9b      	subs	r3, r3, r2
 8016bae:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
            bg.y2 += style->body.padding.bottom;
 8016bb2:	8b22      	ldrh	r2, [r4, #24]
 8016bb4:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
            lv_draw_rect(&bg, mask, style, lv_obj_get_opa_scale(label));
 8016bb8:	4638      	mov	r0, r7
            bg.y2 += style->body.padding.bottom;
 8016bba:	4413      	add	r3, r2
 8016bbc:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            lv_draw_rect(&bg, mask, style, lv_obj_get_opa_scale(label));
 8016bc0:	f7f8 f9dd 	bl	800ef7e <lv_obj_get_opa_scale>
 8016bc4:	4622      	mov	r2, r4
 8016bc6:	4603      	mov	r3, r0
 8016bc8:	4641      	mov	r1, r8
 8016bca:	a80a      	add	r0, sp, #40	; 0x28
 8016bcc:	f7fa f964 	bl	8010e98 <lv_draw_rect>
        if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
 8016bd0:	7fab      	ldrb	r3, [r5, #30]
        if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 8016bd2:	061a      	lsls	r2, r3, #24
        lv_txt_flag_t flag = LV_TXT_FLAG_NONE;
 8016bd4:	f3c3 1680 	ubfx	r6, r3, #6, #1
        if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 8016bd8:	f003 0230 	and.w	r2, r3, #48	; 0x30
        if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 8016bdc:	bf48      	it	mi
 8016bde:	f046 0602 	orrmi.w	r6, r6, #2
        if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 8016be2:	2a10      	cmp	r2, #16
 8016be4:	f040 80a8 	bne.w	8016d38 <lv_label_design+0x206>
 8016be8:	f046 0604 	orr.w	r6, r6, #4
        if((ext->long_mode == LV_LABEL_LONG_SROLL || ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) &&
 8016bec:	f003 0307 	and.w	r3, r3, #7
 8016bf0:	3b03      	subs	r3, #3
 8016bf2:	2b01      	cmp	r3, #1
 8016bf4:	d81a      	bhi.n	8016c2c <lv_label_design+0xfa>
 8016bf6:	2a10      	cmp	r2, #16
 8016bf8:	d001      	beq.n	8016bfe <lv_label_design+0xcc>
           (ext->align == LV_LABEL_ALIGN_CENTER || ext->align == LV_LABEL_ALIGN_RIGHT)) {
 8016bfa:	2a20      	cmp	r2, #32
 8016bfc:	d116      	bne.n	8016c2c <lv_label_design+0xfa>
            lv_txt_get_size(&size, ext->text, style->text.font, style->text.letter_space, style->text.line_space,
 8016bfe:	f647 4218 	movw	r2, #31768	; 0x7c18
 8016c02:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 8016c06:	9602      	str	r6, [sp, #8]
 8016c08:	9201      	str	r2, [sp, #4]
 8016c0a:	f9b4 202a 	ldrsh.w	r2, [r4, #42]	; 0x2a
 8016c0e:	9200      	str	r2, [sp, #0]
 8016c10:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8016c12:	6829      	ldr	r1, [r5, #0]
 8016c14:	a80a      	add	r0, sp, #40	; 0x28
 8016c16:	f7fd fd21 	bl	801465c <lv_txt_get_size>
            if(size.x > lv_obj_get_width(label)) {
 8016c1a:	4638      	mov	r0, r7
 8016c1c:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 8016c20:	f7f8 f918 	bl	800ee54 <lv_obj_get_width>
 8016c24:	4582      	cmp	sl, r0
                flag &= ~LV_TXT_FLAG_CENTER;
 8016c26:	bfc8      	it	gt
 8016c28:	f006 06f3 	andgt.w	r6, r6, #243	; 0xf3
        if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC || lv_obj_get_height(label) < LV_LABEL_HINT_HEIGHT_LIMIT)
 8016c2c:	7fab      	ldrb	r3, [r5, #30]
 8016c2e:	f003 0307 	and.w	r3, r3, #7
 8016c32:	2b04      	cmp	r3, #4
 8016c34:	f000 8085 	beq.w	8016d42 <lv_label_design+0x210>
 8016c38:	4638      	mov	r0, r7
 8016c3a:	f7f8 f911 	bl	800ee60 <lv_obj_get_height>
 8016c3e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8016c42:	db7e      	blt.n	8016d42 <lv_label_design+0x210>
        lv_draw_label_hint_t * hint = &ext->hint;
 8016c44:	f105 0310 	add.w	r3, r5, #16
        lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ext->offset,
 8016c48:	9305      	str	r3, [sp, #20]
 8016c4a:	f64f 7bff 	movw	fp, #65535	; 0xffff
 8016c4e:	f105 030a 	add.w	r3, r5, #10
 8016c52:	f8cd b010 	str.w	fp, [sp, #16]
 8016c56:	f8cd b00c 	str.w	fp, [sp, #12]
 8016c5a:	9302      	str	r3, [sp, #8]
 8016c5c:	9601      	str	r6, [sp, #4]
 8016c5e:	682b      	ldr	r3, [r5, #0]
 8016c60:	9300      	str	r3, [sp, #0]
 8016c62:	4622      	mov	r2, r4
 8016c64:	464b      	mov	r3, r9
 8016c66:	4641      	mov	r1, r8
 8016c68:	a808      	add	r0, sp, #32
 8016c6a:	f7f9 fe7f 	bl	801096c <lv_draw_label>
        if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) {
 8016c6e:	7fab      	ldrb	r3, [r5, #30]
 8016c70:	f003 0307 	and.w	r3, r3, #7
 8016c74:	2b04      	cmp	r3, #4
 8016c76:	d15d      	bne.n	8016d34 <lv_label_design+0x202>
            lv_txt_get_size(&size, ext->text, style->text.font, style->text.letter_space, style->text.line_space,
 8016c78:	f647 4218 	movw	r2, #31768	; 0x7c18
 8016c7c:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 8016c80:	9602      	str	r6, [sp, #8]
 8016c82:	9201      	str	r2, [sp, #4]
 8016c84:	f9b4 202a 	ldrsh.w	r2, [r4, #42]	; 0x2a
 8016c88:	9200      	str	r2, [sp, #0]
 8016c8a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8016c8c:	6829      	ldr	r1, [r5, #0]
 8016c8e:	a807      	add	r0, sp, #28
 8016c90:	f7fd fce4 	bl	801465c <lv_txt_get_size>
            if(size.x > lv_obj_get_width(label)) {
 8016c94:	4638      	mov	r0, r7
 8016c96:	f9bd a01c 	ldrsh.w	sl, [sp, #28]
 8016c9a:	f7f8 f8db 	bl	800ee54 <lv_obj_get_width>
 8016c9e:	4582      	cmp	sl, r0
 8016ca0:	dd24      	ble.n	8016cec <lv_label_design+0x1ba>
                ofs.x = ext->offset.x + size.x +
 8016ca2:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 8016ca6:	f8b5 a00a 	ldrh.w	sl, [r5, #10]
                        lv_font_get_glyph_width(style->text.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 8016caa:	2220      	movs	r2, #32
 8016cac:	4611      	mov	r1, r2
                ofs.x = ext->offset.x + size.x +
 8016cae:	4482      	add	sl, r0
                        lv_font_get_glyph_width(style->text.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 8016cb0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8016cb2:	f7fc fb4f 	bl	8013354 <lv_font_get_glyph_width>
                ofs.y = ext->offset.y;
 8016cb6:	89ab      	ldrh	r3, [r5, #12]
 8016cb8:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs,
 8016cbc:	2300      	movs	r3, #0
 8016cbe:	9305      	str	r3, [sp, #20]
 8016cc0:	ab0a      	add	r3, sp, #40	; 0x28
 8016cc2:	f8cd b010 	str.w	fp, [sp, #16]
 8016cc6:	f8cd b00c 	str.w	fp, [sp, #12]
 8016cca:	9302      	str	r3, [sp, #8]
 8016ccc:	9601      	str	r6, [sp, #4]
                        lv_font_get_glyph_width(style->text.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 8016cce:	eb00 0040 	add.w	r0, r0, r0, lsl #1
                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs,
 8016cd2:	682b      	ldr	r3, [r5, #0]
 8016cd4:	9300      	str	r3, [sp, #0]
                ofs.x = ext->offset.x + size.x +
 8016cd6:	fa1f fa8a 	uxth.w	sl, sl
 8016cda:	4482      	add	sl, r0
                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs,
 8016cdc:	464b      	mov	r3, r9
 8016cde:	4622      	mov	r2, r4
 8016ce0:	4641      	mov	r1, r8
 8016ce2:	a808      	add	r0, sp, #32
                ofs.x = ext->offset.x + size.x +
 8016ce4:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs,
 8016ce8:	f7f9 fe40 	bl	801096c <lv_draw_label>
            if(size.y > lv_obj_get_height(label)) {
 8016cec:	4638      	mov	r0, r7
 8016cee:	f9bd a01e 	ldrsh.w	sl, [sp, #30]
 8016cf2:	f7f8 f8b5 	bl	800ee60 <lv_obj_get_height>
 8016cf6:	4582      	cmp	sl, r0
 8016cf8:	dd1c      	ble.n	8016d34 <lv_label_design+0x202>
                ofs.x = ext->offset.x;
 8016cfa:	896b      	ldrh	r3, [r5, #10]
 8016cfc:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
                ofs.y = ext->offset.y + size.y + lv_font_get_line_height(style->text.font);
 8016d00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016d02:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8016d06:	7a1b      	ldrb	r3, [r3, #8]
 8016d08:	4413      	add	r3, r2
 8016d0a:	89aa      	ldrh	r2, [r5, #12]
                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs,
 8016d0c:	9601      	str	r6, [sp, #4]
                ofs.y = ext->offset.y + size.y + lv_font_get_line_height(style->text.font);
 8016d0e:	4413      	add	r3, r2
 8016d10:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs,
 8016d14:	2300      	movs	r3, #0
 8016d16:	9305      	str	r3, [sp, #20]
 8016d18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016d1c:	9304      	str	r3, [sp, #16]
 8016d1e:	9303      	str	r3, [sp, #12]
 8016d20:	ab0a      	add	r3, sp, #40	; 0x28
 8016d22:	9302      	str	r3, [sp, #8]
 8016d24:	682b      	ldr	r3, [r5, #0]
 8016d26:	9300      	str	r3, [sp, #0]
 8016d28:	4622      	mov	r2, r4
 8016d2a:	464b      	mov	r3, r9
 8016d2c:	4641      	mov	r1, r8
 8016d2e:	a808      	add	r0, sp, #32
 8016d30:	f7f9 fe1c 	bl	801096c <lv_draw_label>
    return true;
 8016d34:	2001      	movs	r0, #1
 8016d36:	e007      	b.n	8016d48 <lv_label_design+0x216>
        if(ext->align == LV_LABEL_ALIGN_RIGHT) flag |= LV_TXT_FLAG_RIGHT;
 8016d38:	2a20      	cmp	r2, #32
 8016d3a:	bf08      	it	eq
 8016d3c:	f046 0608 	orreq.w	r6, r6, #8
 8016d40:	e754      	b.n	8016bec <lv_label_design+0xba>
            hint = NULL;
 8016d42:	2300      	movs	r3, #0
 8016d44:	e780      	b.n	8016c48 <lv_label_design+0x116>
        return false;
 8016d46:	2000      	movs	r0, #0
}
 8016d48:	b00d      	add	sp, #52	; 0x34
 8016d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016d4e <lv_label_set_align>:
{
 8016d4e:	b538      	push	{r3, r4, r5, lr}
 8016d50:	460c      	mov	r4, r1
 8016d52:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8016d54:	f7f8 f97b 	bl	800f04e <lv_obj_get_ext_attr>
    if(ext->align == align) return;
 8016d58:	7f83      	ldrb	r3, [r0, #30]
 8016d5a:	f3c3 1201 	ubfx	r2, r3, #4, #2
 8016d5e:	42a2      	cmp	r2, r4
 8016d60:	d007      	beq.n	8016d72 <lv_label_set_align+0x24>
    ext->align = align;
 8016d62:	f364 1305 	bfi	r3, r4, #4, #2
 8016d66:	7783      	strb	r3, [r0, #30]
    lv_obj_invalidate(label); /*Enough to invalidate because alignment is only drawing related
 8016d68:	4628      	mov	r0, r5
}
 8016d6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(label); /*Enough to invalidate because alignment is only drawing related
 8016d6e:	f7f7 baf1 	b.w	800e354 <lv_obj_invalidate>
 8016d72:	bd38      	pop	{r3, r4, r5, pc}

08016d74 <lv_label_set_body_draw>:
{
 8016d74:	b538      	push	{r3, r4, r5, lr}
 8016d76:	460d      	mov	r5, r1
 8016d78:	4604      	mov	r4, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8016d7a:	f7f8 f968 	bl	800f04e <lv_obj_get_ext_attr>
    if(ext->body_draw == en) return;
 8016d7e:	7fc3      	ldrb	r3, [r0, #31]
 8016d80:	f003 0201 	and.w	r2, r3, #1
 8016d84:	42aa      	cmp	r2, r5
 8016d86:	d00a      	beq.n	8016d9e <lv_label_set_body_draw+0x2a>
    ext->body_draw = en == false ? 0 : 1;
 8016d88:	f365 0300 	bfi	r3, r5, #0, #1
 8016d8c:	77c3      	strb	r3, [r0, #31]
    lv_obj_refresh_ext_draw_pad(label);
 8016d8e:	4620      	mov	r0, r4
 8016d90:	f7f7 ffa9 	bl	800ece6 <lv_obj_refresh_ext_draw_pad>
    lv_obj_invalidate(label);
 8016d94:	4620      	mov	r0, r4
}
 8016d96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(label);
 8016d9a:	f7f7 badb 	b.w	800e354 <lv_obj_invalidate>
 8016d9e:	bd38      	pop	{r3, r4, r5, pc}

08016da0 <lv_label_get_text>:
{
 8016da0:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8016da2:	f7f8 f954 	bl	800f04e <lv_obj_get_ext_attr>
}
 8016da6:	6800      	ldr	r0, [r0, #0]
 8016da8:	bd08      	pop	{r3, pc}

08016daa <lv_label_get_long_mode>:
{
 8016daa:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8016dac:	f7f8 f94f 	bl	800f04e <lv_obj_get_ext_attr>
    return ext->long_mode;
 8016db0:	7f80      	ldrb	r0, [r0, #30]
}
 8016db2:	f000 0007 	and.w	r0, r0, #7
 8016db6:	bd08      	pop	{r3, pc}

08016db8 <lv_label_get_align>:
{
 8016db8:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8016dba:	f7f8 f948 	bl	800f04e <lv_obj_get_ext_attr>
    return ext->align;
 8016dbe:	7f80      	ldrb	r0, [r0, #30]
}
 8016dc0:	f3c0 1001 	ubfx	r0, r0, #4, #2
 8016dc4:	bd08      	pop	{r3, pc}

08016dc6 <lv_label_get_recolor>:
{
 8016dc6:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8016dc8:	f7f8 f941 	bl	800f04e <lv_obj_get_ext_attr>
    return ext->recolor == 0 ? false : true;
 8016dcc:	7f80      	ldrb	r0, [r0, #30]
}
 8016dce:	f3c0 1080 	ubfx	r0, r0, #6, #1
 8016dd2:	bd08      	pop	{r3, pc}

08016dd4 <lv_label_get_body_draw>:
{
 8016dd4:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8016dd6:	f7f8 f93a 	bl	800f04e <lv_obj_get_ext_attr>
    return ext->body_draw == 0 ? false : true;
 8016dda:	7fc0      	ldrb	r0, [r0, #31]
}
 8016ddc:	f000 0001 	and.w	r0, r0, #1
 8016de0:	bd08      	pop	{r3, pc}
	...

08016de4 <lv_label_get_letter_on>:
{
 8016de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016de8:	b08b      	sub	sp, #44	; 0x2c
 8016dea:	4682      	mov	sl, r0
 8016dec:	9106      	str	r1, [sp, #24]
    const char * txt         = lv_label_get_text(label);
 8016dee:	f7ff ffd7 	bl	8016da0 <lv_label_get_text>
 8016df2:	4607      	mov	r7, r0
    lv_label_ext_t * ext     = lv_obj_get_ext_attr(label);
 8016df4:	4650      	mov	r0, sl
 8016df6:	f7f8 f92a 	bl	800f04e <lv_obj_get_ext_attr>
 8016dfa:	9004      	str	r0, [sp, #16]
    lv_coord_t max_w         = lv_obj_get_width(label);
 8016dfc:	4650      	mov	r0, sl
 8016dfe:	f7f8 f829 	bl	800ee54 <lv_obj_get_width>
 8016e02:	4683      	mov	fp, r0
    const lv_style_t * style = lv_obj_get_style(label);
 8016e04:	4650      	mov	r0, sl
 8016e06:	f7f8 f837 	bl	800ee78 <lv_obj_get_style>
    const lv_font_t * font   = style->text.font;
 8016e0a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8016e0c:	9303      	str	r3, [sp, #12]
 8016e0e:	7a1b      	ldrb	r3, [r3, #8]
 8016e10:	9305      	str	r3, [sp, #20]
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
 8016e12:	9b04      	ldr	r3, [sp, #16]
 8016e14:	7f9b      	ldrb	r3, [r3, #30]
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 8016e16:	061a      	lsls	r2, r3, #24
    lv_txt_flag_t flag       = LV_TXT_FLAG_NONE;
 8016e18:	f3c3 1680 	ubfx	r6, r3, #6, #1
    if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 8016e1c:	f003 0230 	and.w	r2, r3, #48	; 0x30
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 8016e20:	bf48      	it	mi
 8016e22:	f046 0602 	orrmi.w	r6, r6, #2
    if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 8016e26:	2a10      	cmp	r2, #16
 8016e28:	bf08      	it	eq
 8016e2a:	f046 0604 	orreq.w	r6, r6, #4
        max_w = LV_COORD_MAX;
 8016e2e:	2400      	movs	r4, #0
 8016e30:	f013 0f07 	tst.w	r3, #7
 8016e34:	f647 4318 	movw	r3, #31768	; 0x7c18
    const lv_style_t * style = lv_obj_get_style(label);
 8016e38:	4681      	mov	r9, r0
        max_w = LV_COORD_MAX;
 8016e3a:	bf08      	it	eq
 8016e3c:	469b      	moveq	fp, r3
 8016e3e:	4625      	mov	r5, r4
    while(txt[line_start] != '\0') {
 8016e40:	197b      	adds	r3, r7, r5
 8016e42:	9307      	str	r3, [sp, #28]
 8016e44:	5d7b      	ldrb	r3, [r7, r5]
 8016e46:	2b00      	cmp	r3, #0
 8016e48:	d150      	bne.n	8016eec <lv_label_get_letter_on+0x108>
 8016e4a:	46a8      	mov	r8, r5
    if(ext->align == LV_LABEL_ALIGN_CENTER) {
 8016e4c:	9b04      	ldr	r3, [sp, #16]
 8016e4e:	7f9b      	ldrb	r3, [r3, #30]
 8016e50:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8016e54:	2b10      	cmp	r3, #16
 8016e56:	d162      	bne.n	8016f1e <lv_label_get_letter_on+0x13a>
        line_w = lv_txt_get_width(&txt[line_start], new_line_start - line_start, font, style->text.letter_space, flag);
 8016e58:	eba8 0105 	sub.w	r1, r8, r5
 8016e5c:	f9b9 3028 	ldrsh.w	r3, [r9, #40]	; 0x28
 8016e60:	9a03      	ldr	r2, [sp, #12]
 8016e62:	9600      	str	r6, [sp, #0]
 8016e64:	b289      	uxth	r1, r1
 8016e66:	1978      	adds	r0, r7, r5
 8016e68:	f7fd fbb0 	bl	80145cc <lv_txt_get_width>
 8016e6c:	4604      	mov	r4, r0
        x += lv_obj_get_width(label) / 2 - line_w / 2;
 8016e6e:	4650      	mov	r0, sl
 8016e70:	f7f7 fff0 	bl	800ee54 <lv_obj_get_width>
 8016e74:	2302      	movs	r3, #2
 8016e76:	fb90 f0f3 	sdiv	r0, r0, r3
 8016e7a:	fb94 f4f3 	sdiv	r4, r4, r3
 8016e7e:	1b04      	subs	r4, r0, r4
 8016e80:	b224      	sxth	r4, r4
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 8016e82:	2300      	movs	r3, #0
 8016e84:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    uint32_t i         = line_start;
 8016e88:	9509      	str	r5, [sp, #36]	; 0x24
    if(new_line_start > 0) {
 8016e8a:	f1b8 0f00 	cmp.w	r8, #0
 8016e8e:	d024      	beq.n	8016eda <lv_label_get_letter_on+0xf6>
            letter = lv_txt_encoded_next(txt, &i);
 8016e90:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 8016f48 <lv_label_get_letter_on+0x164>
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8016e94:	f006 0601 	and.w	r6, r6, #1
        while(i <= new_line_start - 1) {
 8016e98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016e9a:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8016e9e:	4293      	cmp	r3, r2
 8016ea0:	d31b      	bcc.n	8016eda <lv_label_get_letter_on+0xf6>
            letter = lv_txt_encoded_next(txt, &i);
 8016ea2:	f8da 3000 	ldr.w	r3, [sl]
 8016ea6:	a909      	add	r1, sp, #36	; 0x24
 8016ea8:	4638      	mov	r0, r7
 8016eaa:	4798      	blx	r3
 8016eac:	4683      	mov	fp, r0
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 8016eae:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016eb0:	f8da 3000 	ldr.w	r3, [sl]
 8016eb4:	2100      	movs	r1, #0
 8016eb6:	4438      	add	r0, r7
 8016eb8:	4798      	blx	r3
 8016eba:	4602      	mov	r2, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8016ebc:	2e00      	cmp	r6, #0
 8016ebe:	d130      	bne.n	8016f22 <lv_label_get_letter_on+0x13e>
            x += lv_font_get_glyph_width(font, letter, letter_next);
 8016ec0:	4659      	mov	r1, fp
 8016ec2:	9803      	ldr	r0, [sp, #12]
 8016ec4:	f7fc fa46 	bl	8013354 <lv_font_get_glyph_width>
            if(pos->x < x) {
 8016ec8:	9b06      	ldr	r3, [sp, #24]
            x += lv_font_get_glyph_width(font, letter, letter_next);
 8016eca:	4404      	add	r4, r0
            if(pos->x < x) {
 8016ecc:	f9b3 2000 	ldrsh.w	r2, [r3]
            x += lv_font_get_glyph_width(font, letter, letter_next);
 8016ed0:	b2a4      	uxth	r4, r4
            if(pos->x < x) {
 8016ed2:	b223      	sxth	r3, r4
 8016ed4:	429a      	cmp	r2, r3
 8016ed6:	da2f      	bge.n	8016f38 <lv_label_get_letter_on+0x154>
                i = i_current;
 8016ed8:	9509      	str	r5, [sp, #36]	; 0x24
    return lv_encoded_get_char_id(txt, i);
 8016eda:	4b1a      	ldr	r3, [pc, #104]	; (8016f44 <lv_label_get_letter_on+0x160>)
 8016edc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016ede:	681b      	ldr	r3, [r3, #0]
 8016ee0:	4638      	mov	r0, r7
 8016ee2:	4798      	blx	r3
}
 8016ee4:	b280      	uxth	r0, r0
 8016ee6:	b00b      	add	sp, #44	; 0x2c
 8016ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        new_line_start += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, max_w, flag);
 8016eec:	f9b9 2028 	ldrsh.w	r2, [r9, #40]	; 0x28
 8016ef0:	9903      	ldr	r1, [sp, #12]
 8016ef2:	9600      	str	r6, [sp, #0]
 8016ef4:	465b      	mov	r3, fp
 8016ef6:	1978      	adds	r0, r7, r5
 8016ef8:	f7fd fae0 	bl	80144bc <lv_txt_get_next_line>
        if(pos->y <= y + letter_height) break; /*The line is found (stored in 'line_start')*/
 8016efc:	9b06      	ldr	r3, [sp, #24]
 8016efe:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8016f02:	9b05      	ldr	r3, [sp, #20]
 8016f04:	18e3      	adds	r3, r4, r3
 8016f06:	429a      	cmp	r2, r3
        new_line_start += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, max_w, flag);
 8016f08:	eb00 0805 	add.w	r8, r0, r5
        if(pos->y <= y + letter_height) break; /*The line is found (stored in 'line_start')*/
 8016f0c:	dd9e      	ble.n	8016e4c <lv_label_get_letter_on+0x68>
        y += letter_height + style->text.line_space;
 8016f0e:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
 8016f12:	9a05      	ldr	r2, [sp, #20]
 8016f14:	4413      	add	r3, r2
 8016f16:	441c      	add	r4, r3
 8016f18:	b224      	sxth	r4, r4
        new_line_start += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, max_w, flag);
 8016f1a:	4645      	mov	r5, r8
 8016f1c:	e790      	b.n	8016e40 <lv_label_get_letter_on+0x5c>
    lv_coord_t x = 0;
 8016f1e:	2400      	movs	r4, #0
 8016f20:	e7af      	b.n	8016e82 <lv_label_get_letter_on+0x9e>
                if(lv_txt_is_cmd(&cmd_state, txt[i]) != false) {
 8016f22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016f24:	9004      	str	r0, [sp, #16]
 8016f26:	5cf9      	ldrb	r1, [r7, r3]
 8016f28:	f10d 0023 	add.w	r0, sp, #35	; 0x23
 8016f2c:	f7fd faa8 	bl	8014480 <lv_txt_is_cmd>
 8016f30:	2800      	cmp	r0, #0
 8016f32:	d1b1      	bne.n	8016e98 <lv_label_get_letter_on+0xb4>
 8016f34:	9a04      	ldr	r2, [sp, #16]
 8016f36:	e7c3      	b.n	8016ec0 <lv_label_get_letter_on+0xdc>
            x += style->text.letter_space;
 8016f38:	f8b9 0028 	ldrh.w	r0, [r9, #40]	; 0x28
            i_current = i;
 8016f3c:	9d09      	ldr	r5, [sp, #36]	; 0x24
            x += style->text.letter_space;
 8016f3e:	4404      	add	r4, r0
 8016f40:	b224      	sxth	r4, r4
 8016f42:	e7a9      	b.n	8016e98 <lv_label_get_letter_on+0xb4>
 8016f44:	20001c9c 	.word	0x20001c9c
 8016f48:	20001ca4 	.word	0x20001ca4

08016f4c <lv_label_refr_text>:
{
 8016f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f50:	b093      	sub	sp, #76	; 0x4c
 8016f52:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8016f54:	f7f8 f87b 	bl	800f04e <lv_obj_get_ext_attr>
    if(ext->text == NULL) return;
 8016f58:	6803      	ldr	r3, [r0, #0]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8016f5a:	4604      	mov	r4, r0
    if(ext->text == NULL) return;
 8016f5c:	b393      	cbz	r3, 8016fc4 <lv_label_refr_text+0x78>
    ext->hint.line_start = -1; /*The hint is invalid if the text changes*/
 8016f5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016f62:	6103      	str	r3, [r0, #16]
    lv_coord_t max_w         = lv_obj_get_width(label);
 8016f64:	4628      	mov	r0, r5
 8016f66:	f7f7 ff75 	bl	800ee54 <lv_obj_get_width>
 8016f6a:	4607      	mov	r7, r0
    const lv_style_t * style = lv_obj_get_style(label);
 8016f6c:	4628      	mov	r0, r5
 8016f6e:	f7f7 ff83 	bl	800ee78 <lv_obj_get_style>
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) {
 8016f72:	7fa3      	ldrb	r3, [r4, #30]
    const lv_font_t * font   = style->text.font;
 8016f74:	6a46      	ldr	r6, [r0, #36]	; 0x24
        max_w = LV_COORD_MAX;
 8016f76:	f013 0f07 	tst.w	r3, #7
 8016f7a:	f647 4218 	movw	r2, #31768	; 0x7c18
 8016f7e:	bf08      	it	eq
 8016f80:	4617      	moveq	r7, r2
    lv_txt_flag_t flag = LV_TXT_FLAG_NONE;
 8016f82:	f3c3 1280 	ubfx	r2, r3, #6, #1
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 8016f86:	061b      	lsls	r3, r3, #24
 8016f88:	bf48      	it	mi
 8016f8a:	f042 0202 	orrmi.w	r2, r2, #2
    lv_txt_get_size(&size, ext->text, font, style->text.letter_space, style->text.line_space, max_w, flag);
 8016f8e:	f9b0 3028 	ldrsh.w	r3, [r0, #40]	; 0x28
 8016f92:	9202      	str	r2, [sp, #8]
 8016f94:	9701      	str	r7, [sp, #4]
 8016f96:	f9b0 202a 	ldrsh.w	r2, [r0, #42]	; 0x2a
 8016f9a:	9200      	str	r2, [sp, #0]
    const lv_style_t * style = lv_obj_get_style(label);
 8016f9c:	4680      	mov	r8, r0
    lv_txt_get_size(&size, ext->text, font, style->text.letter_space, style->text.line_space, max_w, flag);
 8016f9e:	4632      	mov	r2, r6
 8016fa0:	6821      	ldr	r1, [r4, #0]
 8016fa2:	a806      	add	r0, sp, #24
 8016fa4:	f7fd fb5a 	bl	801465c <lv_txt_get_size>
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) {
 8016fa8:	7fa3      	ldrb	r3, [r4, #30]
 8016faa:	f013 0307 	ands.w	r3, r3, #7
 8016fae:	d10c      	bne.n	8016fca <lv_label_refr_text+0x7e>
        lv_obj_set_size(label, size.x, size.y);
 8016fb0:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
 8016fb4:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 8016fb8:	4628      	mov	r0, r5
 8016fba:	f7f7 fe2d 	bl	800ec18 <lv_obj_set_size>
    lv_obj_invalidate(label);
 8016fbe:	4628      	mov	r0, r5
 8016fc0:	f7f7 f9c8 	bl	800e354 <lv_obj_invalidate>
}
 8016fc4:	b013      	add	sp, #76	; 0x4c
 8016fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(ext->long_mode == LV_LABEL_LONG_SROLL) {
 8016fca:	2b03      	cmp	r3, #3
 8016fcc:	d166      	bne.n	801709c <lv_label_refr_text+0x150>
        anim.repeat   = 1;
 8016fce:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
        anim.var      = label;
 8016fd2:	9508      	str	r5, [sp, #32]
        anim.playback = 1;
 8016fd4:	f043 0303 	orr.w	r3, r3, #3
 8016fd8:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
            (((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 8016fdc:	2220      	movs	r2, #32
        anim.path_cb  = lv_anim_path_linear;
 8016fde:	4b9f      	ldr	r3, [pc, #636]	; (801725c <lv_label_refr_text+0x310>)
            (((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 8016fe0:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
        anim.path_cb  = lv_anim_path_linear;
 8016fe4:	930a      	str	r3, [sp, #40]	; 0x28
        anim.start    = 0;
 8016fe6:	2700      	movs	r7, #0
            (((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 8016fe8:	4611      	mov	r1, r2
        anim.start    = 0;
 8016fea:	970c      	str	r7, [sp, #48]	; 0x30
        anim.ready_cb = NULL;
 8016fec:	970b      	str	r7, [sp, #44]	; 0x2c
            (((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 8016fee:	f7fc f9b1 	bl	8013354 <lv_font_get_glyph_width>
 8016ff2:	f9b8 3028 	ldrsh.w	r3, [r8, #40]	; 0x28
        if(size.x > lv_obj_get_width(label)) {
 8016ff6:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
            (((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 8016ffa:	4418      	add	r0, r3
 8016ffc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017000:	4343      	muls	r3, r0
             ext->anim_speed) *
 8017002:	8ba0      	ldrh	r0, [r4, #28]
            (((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 8017004:	fb93 f3f0 	sdiv	r3, r3, r0
        anim.playback_pause =
 8017008:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801700c:	b29b      	uxth	r3, r3
 801700e:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
        anim.repeat_pause = anim.playback_pause;
 8017012:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
        if(size.x > lv_obj_get_width(label)) {
 8017016:	4628      	mov	r0, r5
        anim.act_time     = -anim.playback_pause;
 8017018:	425b      	negs	r3, r3
 801701a:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
        if(size.x > lv_obj_get_width(label)) {
 801701e:	f7f7 ff19 	bl	800ee54 <lv_obj_get_width>
 8017022:	4580      	cmp	r8, r0
 8017024:	dd34      	ble.n	8017090 <lv_label_refr_text+0x144>
            anim.end     = lv_obj_get_width(label) - size.x;
 8017026:	4628      	mov	r0, r5
 8017028:	f7f7 ff14 	bl	800ee54 <lv_obj_get_width>
 801702c:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_x;
 8017030:	4b8b      	ldr	r3, [pc, #556]	; (8017260 <lv_label_refr_text+0x314>)
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 8017032:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_x;
 8017036:	9309      	str	r3, [sp, #36]	; 0x24
            anim.end     = lv_obj_get_width(label) - size.x;
 8017038:	1a82      	subs	r2, r0, r2
 801703a:	920d      	str	r2, [sp, #52]	; 0x34
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 801703c:	8ba0      	ldrh	r0, [r4, #28]
 801703e:	b212      	sxth	r2, r2
 8017040:	f7fc fcc0 	bl	80139c4 <lv_anim_speed_to_time>
 8017044:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
            lv_anim_create(&anim);
 8017048:	a808      	add	r0, sp, #32
 801704a:	f7fc fc91 	bl	8013970 <lv_anim_create>
            hor_anim = true;
 801704e:	2701      	movs	r7, #1
        if(size.y > lv_obj_get_height(label) && hor_anim == false) {
 8017050:	4628      	mov	r0, r5
 8017052:	f9bd 801a 	ldrsh.w	r8, [sp, #26]
 8017056:	f7f7 ff03 	bl	800ee60 <lv_obj_get_height>
 801705a:	4580      	cmp	r8, r0
 801705c:	dd78      	ble.n	8017150 <lv_label_refr_text+0x204>
 801705e:	2f00      	cmp	r7, #0
 8017060:	d176      	bne.n	8017150 <lv_label_refr_text+0x204>
            anim.end     = lv_obj_get_height(label) - size.y - (lv_font_get_line_height(font));
 8017062:	4628      	mov	r0, r5
 8017064:	f7f7 fefc 	bl	800ee60 <lv_obj_get_height>
 8017068:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
 801706c:	1a82      	subs	r2, r0, r2
 801706e:	7a30      	ldrb	r0, [r6, #8]
 8017070:	1a12      	subs	r2, r2, r0
            anim.end     = -size.y - (lv_font_get_line_height(font));
 8017072:	920d      	str	r2, [sp, #52]	; 0x34
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_y;
 8017074:	4b7b      	ldr	r3, [pc, #492]	; (8017264 <lv_label_refr_text+0x318>)
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 8017076:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801707a:	8ba0      	ldrh	r0, [r4, #28]
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_y;
 801707c:	9309      	str	r3, [sp, #36]	; 0x24
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 801707e:	b212      	sxth	r2, r2
 8017080:	f7fc fca0 	bl	80139c4 <lv_anim_speed_to_time>
 8017084:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
            lv_anim_create(&anim);
 8017088:	a808      	add	r0, sp, #32
 801708a:	f7fc fc71 	bl	8013970 <lv_anim_create>
 801708e:	e796      	b.n	8016fbe <lv_label_refr_text+0x72>
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
 8017090:	4973      	ldr	r1, [pc, #460]	; (8017260 <lv_label_refr_text+0x314>)
 8017092:	4628      	mov	r0, r5
 8017094:	f7fc fc3e 	bl	8013914 <lv_anim_del>
            ext->offset.x = 0;
 8017098:	8167      	strh	r7, [r4, #10]
 801709a:	e7d9      	b.n	8017050 <lv_label_refr_text+0x104>
    else if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) {
 801709c:	2b04      	cmp	r3, #4
 801709e:	d15e      	bne.n	801715e <lv_label_refr_text+0x212>
        anim.repeat   = 1;
 80170a0:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
        anim.var      = label;
 80170a4:	9508      	str	r5, [sp, #32]
        anim.playback = 0;
 80170a6:	f043 0302 	orr.w	r3, r3, #2
 80170aa:	f36f 0300 	bfc	r3, #0, #1
 80170ae:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
        anim.act_time = -(((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 80170b2:	2220      	movs	r2, #32
        anim.start    = 0;
 80170b4:	2700      	movs	r7, #0
        anim.act_time = -(((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 80170b6:	4611      	mov	r1, r2
 80170b8:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
        anim.start    = 0;
 80170bc:	970c      	str	r7, [sp, #48]	; 0x30
        anim.act_time = -(((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 80170be:	f7fc f949 	bl	8013354 <lv_font_get_glyph_width>
 80170c2:	f9b8 3028 	ldrsh.w	r3, [r8, #40]	; 0x28
        if(size.x > lv_obj_get_width(label)) {
 80170c6:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
        anim.act_time = -(((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 80170ca:	4403      	add	r3, r0
 80170cc:	4866      	ldr	r0, [pc, #408]	; (8017268 <lv_label_refr_text+0x31c>)
 80170ce:	4358      	muls	r0, r3
                          ext->anim_speed) *
 80170d0:	8ba3      	ldrh	r3, [r4, #28]
        anim.act_time = -(((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 80170d2:	fb90 f0f3 	sdiv	r0, r0, r3
 80170d6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80170da:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
        anim.path_cb        = lv_anim_path_linear;
 80170de:	4b5f      	ldr	r3, [pc, #380]	; (801725c <lv_label_refr_text+0x310>)
        anim.ready_cb       = NULL;
 80170e0:	970b      	str	r7, [sp, #44]	; 0x2c
        if(size.x > lv_obj_get_width(label)) {
 80170e2:	4628      	mov	r0, r5
        anim.path_cb        = lv_anim_path_linear;
 80170e4:	930a      	str	r3, [sp, #40]	; 0x28
        anim.playback_pause = 0;
 80170e6:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
        anim.repeat_pause   = 0;
 80170ea:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
        if(size.x > lv_obj_get_width(label)) {
 80170ee:	f7f7 feb1 	bl	800ee54 <lv_obj_get_width>
 80170f2:	4580      	cmp	r8, r0
 80170f4:	dd26      	ble.n	8017144 <lv_label_refr_text+0x1f8>
            anim.end     = -size.x - lv_font_get_glyph_width(font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 80170f6:	2220      	movs	r2, #32
 80170f8:	4611      	mov	r1, r2
 80170fa:	4630      	mov	r0, r6
 80170fc:	f7fc f92a 	bl	8013354 <lv_font_get_glyph_width>
 8017100:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_x;
 8017104:	4b56      	ldr	r3, [pc, #344]	; (8017260 <lv_label_refr_text+0x314>)
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 8017106:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_x;
 801710a:	9309      	str	r3, [sp, #36]	; 0x24
            anim.end     = -size.x - lv_font_get_glyph_width(font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 801710c:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
 8017110:	1a82      	subs	r2, r0, r2
 8017112:	920d      	str	r2, [sp, #52]	; 0x34
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 8017114:	8ba0      	ldrh	r0, [r4, #28]
 8017116:	b212      	sxth	r2, r2
 8017118:	f7fc fc54 	bl	80139c4 <lv_anim_speed_to_time>
 801711c:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
            lv_anim_create(&anim);
 8017120:	a808      	add	r0, sp, #32
 8017122:	f7fc fc25 	bl	8013970 <lv_anim_create>
            hor_anim = true;
 8017126:	2701      	movs	r7, #1
        if(size.y > lv_obj_get_height(label) && hor_anim == false) {
 8017128:	4628      	mov	r0, r5
 801712a:	f9bd 801a 	ldrsh.w	r8, [sp, #26]
 801712e:	f7f7 fe97 	bl	800ee60 <lv_obj_get_height>
 8017132:	4580      	cmp	r8, r0
 8017134:	dd0c      	ble.n	8017150 <lv_label_refr_text+0x204>
 8017136:	b95f      	cbnz	r7, 8017150 <lv_label_refr_text+0x204>
            anim.end     = -size.y - (lv_font_get_line_height(font));
 8017138:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
 801713c:	7a33      	ldrb	r3, [r6, #8]
 801713e:	4252      	negs	r2, r2
 8017140:	1ad2      	subs	r2, r2, r3
 8017142:	e796      	b.n	8017072 <lv_label_refr_text+0x126>
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
 8017144:	4946      	ldr	r1, [pc, #280]	; (8017260 <lv_label_refr_text+0x314>)
 8017146:	4628      	mov	r0, r5
 8017148:	f7fc fbe4 	bl	8013914 <lv_anim_del>
            ext->offset.x = 0;
 801714c:	8167      	strh	r7, [r4, #10]
 801714e:	e7eb      	b.n	8017128 <lv_label_refr_text+0x1dc>
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
 8017150:	4944      	ldr	r1, [pc, #272]	; (8017264 <lv_label_refr_text+0x318>)
 8017152:	4628      	mov	r0, r5
 8017154:	f7fc fbde 	bl	8013914 <lv_anim_del>
            ext->offset.y = 0;
 8017158:	2300      	movs	r3, #0
 801715a:	81a3      	strh	r3, [r4, #12]
 801715c:	e72f      	b.n	8016fbe <lv_label_refr_text+0x72>
    } else if(ext->long_mode == LV_LABEL_LONG_DOT) {
 801715e:	2b02      	cmp	r3, #2
 8017160:	d172      	bne.n	8017248 <lv_label_refr_text+0x2fc>
        if(size.y <= lv_obj_get_height(label)) { /*No dots are required, the text is short enough*/
 8017162:	4628      	mov	r0, r5
 8017164:	f9bd 601a 	ldrsh.w	r6, [sp, #26]
 8017168:	f7f7 fe7a 	bl	800ee60 <lv_obj_get_height>
 801716c:	4286      	cmp	r6, r0
 801716e:	dc03      	bgt.n	8017178 <lv_label_refr_text+0x22c>
            ext->dot_end = LV_LABEL_DOT_END_INV;
 8017170:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017174:	8123      	strh	r3, [r4, #8]
 8017176:	e722      	b.n	8016fbe <lv_label_refr_text+0x72>
        } else if(lv_txt_get_encoded_length(ext->text) <= LV_LABEL_DOT_NUM) { /*Don't turn to dots all the characters*/
 8017178:	4b3c      	ldr	r3, [pc, #240]	; (801726c <lv_label_refr_text+0x320>)
 801717a:	6820      	ldr	r0, [r4, #0]
 801717c:	681b      	ldr	r3, [r3, #0]
 801717e:	4798      	blx	r3
 8017180:	2803      	cmp	r0, #3
 8017182:	d9f5      	bls.n	8017170 <lv_label_refr_text+0x224>
            p.x = lv_obj_get_width(label) -
 8017184:	4628      	mov	r0, r5
 8017186:	f7f7 fe65 	bl	800ee54 <lv_obj_get_width>
                  (lv_font_get_glyph_width(style->text.font, '.', '.') + style->text.letter_space) *
 801718a:	222e      	movs	r2, #46	; 0x2e
 801718c:	4611      	mov	r1, r2
            p.x = lv_obj_get_width(label) -
 801718e:	4606      	mov	r6, r0
                  (lv_font_get_glyph_width(style->text.font, '.', '.') + style->text.letter_space) *
 8017190:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
                lv_txt_encoded_next(ext->text, &byte_id);
 8017194:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 8017278 <lv_label_refr_text+0x32c>
                  (lv_font_get_glyph_width(style->text.font, '.', '.') + style->text.letter_space) *
 8017198:	f7fc f8dc 	bl	8013354 <lv_font_get_glyph_width>
 801719c:	f9b8 3028 	ldrsh.w	r3, [r8, #40]	; 0x28
 80171a0:	4418      	add	r0, r3
            p.x = lv_obj_get_width(label) -
 80171a2:	ebc0 3380 	rsb	r3, r0, r0, lsl #14
 80171a6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80171aa:	4430      	add	r0, r6
 80171ac:	f8ad 001c 	strh.w	r0, [sp, #28]
            p.y = lv_obj_get_height(label);
 80171b0:	4628      	mov	r0, r5
 80171b2:	f7f7 fe55 	bl	800ee60 <lv_obj_get_height>
                   (lv_font_get_line_height(style->text.font) + style->text.line_space); /*Round down to the last line*/
 80171b6:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 80171ba:	f9b8 102a 	ldrsh.w	r1, [r8, #42]	; 0x2a
 80171be:	7a1b      	ldrb	r3, [r3, #8]
 80171c0:	440b      	add	r3, r1
            p.y -= p.y %
 80171c2:	fb90 f2f3 	sdiv	r2, r0, r3
 80171c6:	fb03 0312 	mls	r3, r3, r2, r0
 80171ca:	1ac0      	subs	r0, r0, r3
            p.y -= style->text.line_space;                                               /*Trim the last line space*/
 80171cc:	1a40      	subs	r0, r0, r1
 80171ce:	f8ad 001e 	strh.w	r0, [sp, #30]
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
 80171d2:	a907      	add	r1, sp, #28
 80171d4:	4628      	mov	r0, r5
 80171d6:	f7ff fe05 	bl	8016de4 <lv_label_get_letter_on>
            uint32_t byte_id     = lv_txt_encoded_get_byte_id(ext->text, letter_id);
 80171da:	4b25      	ldr	r3, [pc, #148]	; (8017270 <lv_label_refr_text+0x324>)
 80171dc:	4601      	mov	r1, r0
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
 80171de:	4680      	mov	r8, r0
            uint32_t byte_id     = lv_txt_encoded_get_byte_id(ext->text, letter_id);
 80171e0:	681b      	ldr	r3, [r3, #0]
 80171e2:	6820      	ldr	r0, [r4, #0]
 80171e4:	4798      	blx	r3
 80171e6:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
                len += lv_txt_encoded_size(&ext->text[byte_id]);
 80171ea:	4a22      	ldr	r2, [pc, #136]	; (8017274 <lv_label_refr_text+0x328>)
            uint32_t byte_id     = lv_txt_encoded_get_byte_id(ext->text, letter_id);
 80171ec:	f84b 0d28 	str.w	r0, [fp, #-40]!
 80171f0:	4681      	mov	r9, r0
 80171f2:	2604      	movs	r6, #4
            uint8_t len          = 0;
 80171f4:	2700      	movs	r7, #0
                len += lv_txt_encoded_size(&ext->text[byte_id]);
 80171f6:	9b08      	ldr	r3, [sp, #32]
 80171f8:	6820      	ldr	r0, [r4, #0]
 80171fa:	9205      	str	r2, [sp, #20]
 80171fc:	4418      	add	r0, r3
 80171fe:	6813      	ldr	r3, [r2, #0]
 8017200:	4798      	blx	r3
                lv_txt_encoded_next(ext->text, &byte_id);
 8017202:	4659      	mov	r1, fp
                len += lv_txt_encoded_size(&ext->text[byte_id]);
 8017204:	4407      	add	r7, r0
                lv_txt_encoded_next(ext->text, &byte_id);
 8017206:	f8da 3000 	ldr.w	r3, [sl]
 801720a:	6820      	ldr	r0, [r4, #0]
 801720c:	4798      	blx	r3
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
 801720e:	3e01      	subs	r6, #1
                len += lv_txt_encoded_size(&ext->text[byte_id]);
 8017210:	b2ff      	uxtb	r7, r7
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
 8017212:	9a05      	ldr	r2, [sp, #20]
 8017214:	d1ef      	bne.n	80171f6 <lv_label_refr_text+0x2aa>
            if(lv_label_set_dot_tmp(label, &ext->text[byte_id_ori], len)) {
 8017216:	6821      	ldr	r1, [r4, #0]
 8017218:	463a      	mov	r2, r7
 801721a:	4449      	add	r1, r9
 801721c:	4628      	mov	r0, r5
 801721e:	f7ff fc5f 	bl	8016ae0 <lv_label_set_dot_tmp>
 8017222:	2800      	cmp	r0, #0
 8017224:	f43f aecb 	beq.w	8016fbe <lv_label_refr_text+0x72>
                    ext->text[byte_id_ori + i] = '.';
 8017228:	222e      	movs	r2, #46	; 0x2e
 801722a:	6823      	ldr	r3, [r4, #0]
 801722c:	444b      	add	r3, r9
 801722e:	559a      	strb	r2, [r3, r6]
                for(i = 0; i < LV_LABEL_DOT_NUM; i++) {
 8017230:	3601      	adds	r6, #1
 8017232:	2e03      	cmp	r6, #3
 8017234:	d1f9      	bne.n	801722a <lv_label_refr_text+0x2de>
                ext->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
 8017236:	6823      	ldr	r3, [r4, #0]
 8017238:	444b      	add	r3, r9
 801723a:	2200      	movs	r2, #0
                ext->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
 801723c:	f108 0803 	add.w	r8, r8, #3
                ext->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
 8017240:	70da      	strb	r2, [r3, #3]
                ext->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
 8017242:	f8a4 8008 	strh.w	r8, [r4, #8]
 8017246:	e6ba      	b.n	8016fbe <lv_label_refr_text+0x72>
    else if(ext->long_mode == LV_LABEL_LONG_BREAK) {
 8017248:	2b01      	cmp	r3, #1
 801724a:	f47f aeb8 	bne.w	8016fbe <lv_label_refr_text+0x72>
        lv_obj_set_height(label, size.y);
 801724e:	f9bd 101a 	ldrsh.w	r1, [sp, #26]
 8017252:	4628      	mov	r0, r5
 8017254:	f7f7 fd31 	bl	800ecba <lv_obj_set_height>
 8017258:	e6b1      	b.n	8016fbe <lv_label_refr_text+0x72>
 801725a:	bf00      	nop
 801725c:	08013799 	.word	0x08013799
 8017260:	08016acb 	.word	0x08016acb
 8017264:	08016ab5 	.word	0x08016ab5
 8017268:	fffffc18 	.word	0xfffffc18
 801726c:	20001cb0 	.word	0x20001cb0
 8017270:	20001ca0 	.word	0x20001ca0
 8017274:	20001cac 	.word	0x20001cac
 8017278:	20001ca4 	.word	0x20001ca4

0801727c <lv_label_signal>:
    res = ancestor_signal(label, sign, param);
 801727c:	4b38      	ldr	r3, [pc, #224]	; (8017360 <lv_label_signal+0xe4>)
{
 801727e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    res = ancestor_signal(label, sign, param);
 8017282:	681b      	ldr	r3, [r3, #0]
{
 8017284:	4604      	mov	r4, r0
 8017286:	460f      	mov	r7, r1
 8017288:	4616      	mov	r6, r2
    res = ancestor_signal(label, sign, param);
 801728a:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 801728c:	2801      	cmp	r0, #1
    res = ancestor_signal(label, sign, param);
 801728e:	4605      	mov	r5, r0
    if(res != LV_RES_OK) return res;
 8017290:	d110      	bne.n	80172b4 <lv_label_signal+0x38>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8017292:	4620      	mov	r0, r4
 8017294:	f7f7 fedb 	bl	800f04e <lv_obj_get_ext_attr>
 8017298:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_CLEANUP) {
 801729a:	b977      	cbnz	r7, 80172ba <lv_label_signal+0x3e>
        if(ext->static_txt == 0) {
 801729c:	7f83      	ldrb	r3, [r0, #30]
 801729e:	f013 0608 	ands.w	r6, r3, #8
 80172a2:	d104      	bne.n	80172ae <lv_label_signal+0x32>
            lv_mem_free(ext->text);
 80172a4:	6800      	ldr	r0, [r0, #0]
 80172a6:	f7fc fe51 	bl	8013f4c <lv_mem_free>
            ext->text = NULL;
 80172aa:	f8c8 6000 	str.w	r6, [r8]
        lv_label_dot_tmp_free(label);
 80172ae:	4620      	mov	r0, r4
 80172b0:	f7ff fbb6 	bl	8016a20 <lv_label_dot_tmp_free>
}
 80172b4:	4628      	mov	r0, r5
 80172b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 80172ba:	2f04      	cmp	r7, #4
 80172bc:	d106      	bne.n	80172cc <lv_label_signal+0x50>
        lv_label_revert_dots(label);
 80172be:	4620      	mov	r0, r4
 80172c0:	f7ff fbc0 	bl	8016a44 <lv_label_revert_dots>
        lv_label_refr_text(label);
 80172c4:	4620      	mov	r0, r4
 80172c6:	f7ff fe41 	bl	8016f4c <lv_label_refr_text>
 80172ca:	e7f3      	b.n	80172b4 <lv_label_signal+0x38>
    } else if(sign == LV_SIGNAL_CORD_CHG) {
 80172cc:	2f02      	cmp	r7, #2
 80172ce:	d118      	bne.n	8017302 <lv_label_signal+0x86>
    return area_p->x2 - area_p->x1 + 1;
 80172d0:	8aa2      	ldrh	r2, [r4, #20]
 80172d2:	8a23      	ldrh	r3, [r4, #16]
 80172d4:	8831      	ldrh	r1, [r6, #0]
 80172d6:	3201      	adds	r2, #1
 80172d8:	1ad2      	subs	r2, r2, r3
 80172da:	88b3      	ldrh	r3, [r6, #4]
 80172dc:	3301      	adds	r3, #1
 80172de:	1a5b      	subs	r3, r3, r1
        if(lv_area_get_width(&label->coords) != lv_area_get_width(param) ||
 80172e0:	b292      	uxth	r2, r2
 80172e2:	b29b      	uxth	r3, r3
 80172e4:	429a      	cmp	r2, r3
 80172e6:	d1ea      	bne.n	80172be <lv_label_signal+0x42>
    return area_p->y2 - area_p->y1 + 1;
 80172e8:	8ae2      	ldrh	r2, [r4, #22]
 80172ea:	8a63      	ldrh	r3, [r4, #18]
 80172ec:	8871      	ldrh	r1, [r6, #2]
 80172ee:	3201      	adds	r2, #1
 80172f0:	1ad2      	subs	r2, r2, r3
 80172f2:	88f3      	ldrh	r3, [r6, #6]
 80172f4:	3301      	adds	r3, #1
 80172f6:	1a5b      	subs	r3, r3, r1
 80172f8:	b292      	uxth	r2, r2
 80172fa:	b29b      	uxth	r3, r3
 80172fc:	429a      	cmp	r2, r3
 80172fe:	d1de      	bne.n	80172be <lv_label_signal+0x42>
 8017300:	e7d8      	b.n	80172b4 <lv_label_signal+0x38>
    } else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 8017302:	2f05      	cmp	r7, #5
 8017304:	d11d      	bne.n	8017342 <lv_label_signal+0xc6>
        if(ext->body_draw) {
 8017306:	7fc3      	ldrb	r3, [r0, #31]
 8017308:	07db      	lsls	r3, r3, #31
 801730a:	d5d3      	bpl.n	80172b4 <lv_label_signal+0x38>
 * @return pointer to the label's style
 */
static inline const lv_style_t * lv_label_get_style(const lv_obj_t * label, lv_label_style_t type)
{
    (void)type; /*Unused*/
    return lv_obj_get_style(label);
 801730c:	4620      	mov	r0, r4
 801730e:	f7f7 fdb3 	bl	800ee78 <lv_obj_get_style>
            label->ext_draw_pad = LV_MATH_MAX(label->ext_draw_pad, style->body.padding.right);
 8017312:	f9b0 301a 	ldrsh.w	r3, [r0, #26]
 8017316:	f9b0 201c 	ldrsh.w	r2, [r0, #28]
 801731a:	4293      	cmp	r3, r2
 801731c:	bfb8      	it	lt
 801731e:	4613      	movlt	r3, r2
 8017320:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
            label->ext_draw_pad = LV_MATH_MAX(label->ext_draw_pad, style->body.padding.top);
 8017324:	4293      	cmp	r3, r2
 8017326:	bfb8      	it	lt
 8017328:	4613      	movlt	r3, r2
 801732a:	f9b0 2016 	ldrsh.w	r2, [r0, #22]
            label->ext_draw_pad = LV_MATH_MAX(label->ext_draw_pad, style->body.padding.bottom);
 801732e:	4293      	cmp	r3, r2
 8017330:	bfb8      	it	lt
 8017332:	4613      	movlt	r3, r2
 8017334:	f9b0 2018 	ldrsh.w	r2, [r0, #24]
 8017338:	4293      	cmp	r3, r2
 801733a:	bfb8      	it	lt
 801733c:	4613      	movlt	r3, r2
 801733e:	86a3      	strh	r3, [r4, #52]	; 0x34
 8017340:	e7b8      	b.n	80172b4 <lv_label_signal+0x38>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8017342:	2f06      	cmp	r7, #6
 8017344:	d1b6      	bne.n	80172b4 <lv_label_signal+0x38>
 8017346:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 8017348:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 801734c:	b2da      	uxtb	r2, r3
 801734e:	b119      	cbz	r1, 8017358 <lv_label_signal+0xdc>
 8017350:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8017352:	2b07      	cmp	r3, #7
 8017354:	d1f8      	bne.n	8017348 <lv_label_signal+0xcc>
 8017356:	461a      	mov	r2, r3
        buf->type[i] = "lv_label";
 8017358:	4b02      	ldr	r3, [pc, #8]	; (8017364 <lv_label_signal+0xe8>)
 801735a:	f846 3022 	str.w	r3, [r6, r2, lsl #2]
 801735e:	e7a9      	b.n	80172b4 <lv_label_signal+0x38>
 8017360:	2000afd4 	.word	0x2000afd4
 8017364:	080d8a2b 	.word	0x080d8a2b

08017368 <lv_label_set_text>:
{
 8017368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801736c:	4680      	mov	r8, r0
 801736e:	460d      	mov	r5, r1
    lv_obj_invalidate(label);
 8017370:	f7f6 fff0 	bl	800e354 <lv_obj_invalidate>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8017374:	4640      	mov	r0, r8
 8017376:	f7f7 fe6a 	bl	800f04e <lv_obj_get_ext_attr>
 801737a:	4604      	mov	r4, r0
    if(text == NULL) {
 801737c:	b925      	cbnz	r5, 8017388 <lv_label_set_text+0x20>
        lv_label_refr_text(label);
 801737e:	4640      	mov	r0, r8
}
 8017380:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        lv_label_refr_text(label);
 8017384:	f7ff bde2 	b.w	8016f4c <lv_label_refr_text>
    if(ext->text == text) {
 8017388:	6807      	ldr	r7, [r0, #0]
 801738a:	42bd      	cmp	r5, r7
        ext->text = lv_mem_realloc(ext->text, strlen(ext->text) + 1);
 801738c:	4628      	mov	r0, r5
    if(ext->text == text) {
 801738e:	d109      	bne.n	80173a4 <lv_label_set_text+0x3c>
        ext->text = lv_mem_realloc(ext->text, strlen(ext->text) + 1);
 8017390:	f7e8 ff1e 	bl	80001d0 <strlen>
 8017394:	1c41      	adds	r1, r0, #1
 8017396:	4628      	mov	r0, r5
 8017398:	f7fc fe02 	bl	8013fa0 <lv_mem_realloc>
 801739c:	6020      	str	r0, [r4, #0]
        lv_mem_assert(ext->text);
 801739e:	2800      	cmp	r0, #0
 80173a0:	d1ed      	bne.n	801737e <lv_label_set_text+0x16>
 80173a2:	e7fe      	b.n	80173a2 <lv_label_set_text+0x3a>
        uint32_t len = strlen(text) + 1;
 80173a4:	f7e8 ff14 	bl	80001d0 <strlen>
 80173a8:	f100 0901 	add.w	r9, r0, #1
        if(ext->text != NULL && ext->static_txt == 0) {
 80173ac:	b13f      	cbz	r7, 80173be <lv_label_set_text+0x56>
 80173ae:	7fa3      	ldrb	r3, [r4, #30]
 80173b0:	f013 0608 	ands.w	r6, r3, #8
 80173b4:	d103      	bne.n	80173be <lv_label_set_text+0x56>
            lv_mem_free(ext->text);
 80173b6:	4638      	mov	r0, r7
 80173b8:	f7fc fdc8 	bl	8013f4c <lv_mem_free>
            ext->text = NULL;
 80173bc:	6026      	str	r6, [r4, #0]
        ext->text = lv_mem_alloc(len);
 80173be:	4648      	mov	r0, r9
 80173c0:	f7fc fd8e 	bl	8013ee0 <lv_mem_alloc>
 80173c4:	6020      	str	r0, [r4, #0]
        lv_mem_assert(ext->text);
 80173c6:	b900      	cbnz	r0, 80173ca <lv_label_set_text+0x62>
 80173c8:	e7fe      	b.n	80173c8 <lv_label_set_text+0x60>
        strcpy(ext->text, text);
 80173ca:	4629      	mov	r1, r5
 80173cc:	f002 f95e 	bl	801968c <strcpy>
        ext->static_txt = 0; /*Now the text is dynamically allocated*/
 80173d0:	7fa3      	ldrb	r3, [r4, #30]
 80173d2:	f36f 03c3 	bfc	r3, #3, #1
 80173d6:	77a3      	strb	r3, [r4, #30]
 80173d8:	e7d1      	b.n	801737e <lv_label_set_text+0x16>

080173da <lv_label_set_static_text>:
{
 80173da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80173dc:	4607      	mov	r7, r0
 80173de:	460e      	mov	r6, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 80173e0:	f7f7 fe35 	bl	800f04e <lv_obj_get_ext_attr>
    if(ext->static_txt == 0 && ext->text != NULL) {
 80173e4:	7f83      	ldrb	r3, [r0, #30]
 80173e6:	f013 0508 	ands.w	r5, r3, #8
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 80173ea:	4604      	mov	r4, r0
    if(ext->static_txt == 0 && ext->text != NULL) {
 80173ec:	d104      	bne.n	80173f8 <lv_label_set_static_text+0x1e>
 80173ee:	6800      	ldr	r0, [r0, #0]
 80173f0:	b110      	cbz	r0, 80173f8 <lv_label_set_static_text+0x1e>
        lv_mem_free(ext->text);
 80173f2:	f7fc fdab 	bl	8013f4c <lv_mem_free>
        ext->text = NULL;
 80173f6:	6025      	str	r5, [r4, #0]
    if(text != NULL) {
 80173f8:	b126      	cbz	r6, 8017404 <lv_label_set_static_text+0x2a>
        ext->static_txt = 1;
 80173fa:	7fa3      	ldrb	r3, [r4, #30]
        ext->text       = (char *)text;
 80173fc:	6026      	str	r6, [r4, #0]
        ext->static_txt = 1;
 80173fe:	f043 0308 	orr.w	r3, r3, #8
 8017402:	77a3      	strb	r3, [r4, #30]
    lv_label_refr_text(label);
 8017404:	4638      	mov	r0, r7
}
 8017406:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_label_refr_text(label);
 801740a:	f7ff bd9f 	b.w	8016f4c <lv_label_refr_text>
	...

08017410 <lv_label_set_long_mode>:
{
 8017410:	b570      	push	{r4, r5, r6, lr}
 8017412:	4605      	mov	r5, r0
 8017414:	460e      	mov	r6, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8017416:	f7f7 fe1a 	bl	800f04e <lv_obj_get_ext_attr>
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_obj_set_x);
 801741a:	491a      	ldr	r1, [pc, #104]	; (8017484 <lv_label_set_long_mode+0x74>)
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801741c:	4604      	mov	r4, r0
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_obj_set_x);
 801741e:	4628      	mov	r0, r5
 8017420:	f7fc fa78 	bl	8013914 <lv_anim_del>
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_obj_set_y);
 8017424:	4918      	ldr	r1, [pc, #96]	; (8017488 <lv_label_set_long_mode+0x78>)
 8017426:	4628      	mov	r0, r5
 8017428:	f7fc fa74 	bl	8013914 <lv_anim_del>
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
 801742c:	4917      	ldr	r1, [pc, #92]	; (801748c <lv_label_set_long_mode+0x7c>)
 801742e:	4628      	mov	r0, r5
 8017430:	f7fc fa70 	bl	8013914 <lv_anim_del>
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
 8017434:	4916      	ldr	r1, [pc, #88]	; (8017490 <lv_label_set_long_mode+0x80>)
 8017436:	4628      	mov	r0, r5
 8017438:	f7fc fa6c 	bl	8013914 <lv_anim_del>
    if(long_mode == LV_LABEL_LONG_SROLL || long_mode == LV_LABEL_LONG_SROLL_CIRC || long_mode == LV_LABEL_LONG_CROP)
 801743c:	1ef3      	subs	r3, r6, #3
 801743e:	2b02      	cmp	r3, #2
 8017440:	7fa3      	ldrb	r3, [r4, #30]
    ext->offset.x = 0;
 8017442:	f04f 0200 	mov.w	r2, #0
        ext->expand = 1;
 8017446:	bf94      	ite	ls
 8017448:	f043 0380 	orrls.w	r3, r3, #128	; 0x80
        ext->expand = 0;
 801744c:	f362 13c7 	bfihi	r3, r2, #7, #1
 8017450:	77a3      	strb	r3, [r4, #30]
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
 8017452:	7fa3      	ldrb	r3, [r4, #30]
    ext->offset.x = 0;
 8017454:	8162      	strh	r2, [r4, #10]
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
 8017456:	f003 0307 	and.w	r3, r3, #7
 801745a:	2b02      	cmp	r3, #2
    ext->offset.y = 0;
 801745c:	81a2      	strh	r2, [r4, #12]
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
 801745e:	d107      	bne.n	8017470 <lv_label_set_long_mode+0x60>
 8017460:	8922      	ldrh	r2, [r4, #8]
 8017462:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017466:	429a      	cmp	r2, r3
 8017468:	d002      	beq.n	8017470 <lv_label_set_long_mode+0x60>
        lv_label_revert_dots(label);
 801746a:	4628      	mov	r0, r5
 801746c:	f7ff faea 	bl	8016a44 <lv_label_revert_dots>
    ext->long_mode = long_mode;
 8017470:	7fa3      	ldrb	r3, [r4, #30]
 8017472:	f366 0302 	bfi	r3, r6, #0, #3
 8017476:	77a3      	strb	r3, [r4, #30]
    lv_label_refr_text(label);
 8017478:	4628      	mov	r0, r5
}
 801747a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_label_refr_text(label);
 801747e:	f7ff bd65 	b.w	8016f4c <lv_label_refr_text>
 8017482:	bf00      	nop
 8017484:	0800e4b5 	.word	0x0800e4b5
 8017488:	0800e4c9 	.word	0x0800e4c9
 801748c:	08016acb 	.word	0x08016acb
 8017490:	08016ab5 	.word	0x08016ab5

08017494 <lv_label_set_recolor>:
{
 8017494:	b538      	push	{r3, r4, r5, lr}
 8017496:	460c      	mov	r4, r1
 8017498:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801749a:	f7f7 fdd8 	bl	800f04e <lv_obj_get_ext_attr>
    if(ext->recolor == en) return;
 801749e:	7f83      	ldrb	r3, [r0, #30]
 80174a0:	f3c3 1280 	ubfx	r2, r3, #6, #1
 80174a4:	42a2      	cmp	r2, r4
 80174a6:	d007      	beq.n	80174b8 <lv_label_set_recolor+0x24>
    ext->recolor = en == false ? 0 : 1;
 80174a8:	f364 1386 	bfi	r3, r4, #6, #1
 80174ac:	7783      	strb	r3, [r0, #30]
    lv_label_refr_text(label); /*Refresh the text because the potential colo codes in text needs to
 80174ae:	4628      	mov	r0, r5
}
 80174b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_label_refr_text(label); /*Refresh the text because the potential colo codes in text needs to
 80174b4:	f7ff bd4a 	b.w	8016f4c <lv_label_refr_text>
 80174b8:	bd38      	pop	{r3, r4, r5, pc}
	...

080174bc <lv_label_create>:
{
 80174bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80174c0:	460e      	mov	r6, r1
    lv_obj_t * new_label = lv_obj_create(par, copy);
 80174c2:	f7f7 fa2b 	bl	800e91c <lv_obj_create>
    lv_mem_assert(new_label);
 80174c6:	4605      	mov	r5, r0
 80174c8:	b900      	cbnz	r0, 80174cc <lv_label_create+0x10>
 80174ca:	e7fe      	b.n	80174ca <lv_label_create+0xe>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_label);
 80174cc:	4c57      	ldr	r4, [pc, #348]	; (801762c <lv_label_create+0x170>)
 80174ce:	6823      	ldr	r3, [r4, #0]
 80174d0:	b913      	cbnz	r3, 80174d8 <lv_label_create+0x1c>
 80174d2:	f7f7 fdb8 	bl	800f046 <lv_obj_get_signal_cb>
 80174d6:	6020      	str	r0, [r4, #0]
    lv_obj_allocate_ext_attr(new_label, sizeof(lv_label_ext_t));
 80174d8:	2120      	movs	r1, #32
 80174da:	4628      	mov	r0, r5
 80174dc:	f7f6 ff0c 	bl	800e2f8 <lv_obj_allocate_ext_attr>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(new_label);
 80174e0:	4628      	mov	r0, r5
 80174e2:	f7f7 fdb4 	bl	800f04e <lv_obj_get_ext_attr>
    lv_mem_assert(ext);
 80174e6:	4604      	mov	r4, r0
 80174e8:	b900      	cbnz	r0, 80174ec <lv_label_create+0x30>
 80174ea:	e7fe      	b.n	80174ea <lv_label_create+0x2e>
    ext->static_txt = 0;
 80174ec:	7f81      	ldrb	r1, [r0, #30]
    ext->body_draw  = 0;
 80174ee:	7fc2      	ldrb	r2, [r0, #31]
    ext->text       = NULL;
 80174f0:	2300      	movs	r3, #0
    ext->long_mode  = LV_LABEL_LONG_EXPAND;
 80174f2:	f001 0187 	and.w	r1, r1, #135	; 0x87
 80174f6:	f363 0102 	bfi	r1, r3, #0, #3
    ext->text       = NULL;
 80174fa:	6003      	str	r3, [r0, #0]
    ext->dot_tmp_alloc = 0;
 80174fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    ext->long_mode  = LV_LABEL_LONG_EXPAND;
 8017500:	77a1      	strb	r1, [r4, #30]
    ext->anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 8017502:	2119      	movs	r1, #25
    ext->dot_end    = LV_LABEL_DOT_END_INV;
 8017504:	f64f 70ff 	movw	r0, #65535	; 0xffff
    ext->anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 8017508:	83a1      	strh	r1, [r4, #28]
    ext->dot_tmp_alloc = 0;
 801750a:	f363 0241 	bfi	r2, r3, #1, #1
    ext->hint.line_start = -1;
 801750e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ext->dot_end    = LV_LABEL_DOT_END_INV;
 8017512:	8120      	strh	r0, [r4, #8]
    ext->hint.line_start = -1;
 8017514:	6121      	str	r1, [r4, #16]
    lv_obj_set_design_cb(new_label, lv_label_design);
 8017516:	4628      	mov	r0, r5
 8017518:	4945      	ldr	r1, [pc, #276]	; (8017630 <lv_label_create+0x174>)
    ext->offset.x = 0;
 801751a:	8163      	strh	r3, [r4, #10]
    ext->offset.y = 0;
 801751c:	81a3      	strh	r3, [r4, #12]
    ext->hint.coord_y    = 0;
 801751e:	61a3      	str	r3, [r4, #24]
    ext->hint.y          = 0;
 8017520:	6163      	str	r3, [r4, #20]
    ext->dot.tmp_ptr   = NULL;
 8017522:	6063      	str	r3, [r4, #4]
    ext->dot_tmp_alloc = 0;
 8017524:	77e2      	strb	r2, [r4, #31]
    lv_obj_set_design_cb(new_label, lv_label_design);
 8017526:	f7f6 fee5 	bl	800e2f4 <lv_obj_set_design_cb>
    lv_obj_set_signal_cb(new_label, lv_label_signal);
 801752a:	4942      	ldr	r1, [pc, #264]	; (8017634 <lv_label_create+0x178>)
 801752c:	4628      	mov	r0, r5
 801752e:	f7f6 fedf 	bl	800e2f0 <lv_obj_set_signal_cb>
    if(copy == NULL) {
 8017532:	b996      	cbnz	r6, 801755a <lv_label_create+0x9e>
        lv_obj_set_click(new_label, false);
 8017534:	4631      	mov	r1, r6
 8017536:	4628      	mov	r0, r5
 8017538:	f7f6 fe06 	bl	800e148 <lv_obj_set_click>
        lv_label_set_long_mode(new_label, LV_LABEL_LONG_EXPAND);
 801753c:	4631      	mov	r1, r6
 801753e:	4628      	mov	r0, r5
 8017540:	f7ff ff66 	bl	8017410 <lv_label_set_long_mode>
        lv_label_set_text(new_label, "Text");
 8017544:	493c      	ldr	r1, [pc, #240]	; (8017638 <lv_label_create+0x17c>)
 8017546:	4628      	mov	r0, r5
 8017548:	f7ff ff0e 	bl	8017368 <lv_label_set_text>
    lv_obj_set_style(label, style);
 801754c:	4631      	mov	r1, r6
 801754e:	4628      	mov	r0, r5
 8017550:	f7f7 fc64 	bl	800ee1c <lv_obj_set_style>
}
 8017554:	4628      	mov	r0, r5
 8017556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lv_label_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 801755a:	4630      	mov	r0, r6
 801755c:	f7f7 fd77 	bl	800f04e <lv_obj_get_ext_attr>
 8017560:	4607      	mov	r7, r0
        lv_label_set_long_mode(new_label, lv_label_get_long_mode(copy));
 8017562:	4630      	mov	r0, r6
 8017564:	f7ff fc21 	bl	8016daa <lv_label_get_long_mode>
 8017568:	4601      	mov	r1, r0
 801756a:	4628      	mov	r0, r5
 801756c:	f7ff ff50 	bl	8017410 <lv_label_set_long_mode>
        lv_label_set_recolor(new_label, lv_label_get_recolor(copy));
 8017570:	4630      	mov	r0, r6
 8017572:	f7ff fc28 	bl	8016dc6 <lv_label_get_recolor>
 8017576:	4601      	mov	r1, r0
 8017578:	4628      	mov	r0, r5
 801757a:	f7ff ff8b 	bl	8017494 <lv_label_set_recolor>
        lv_label_set_body_draw(new_label, lv_label_get_body_draw(copy));
 801757e:	4630      	mov	r0, r6
 8017580:	f7ff fc28 	bl	8016dd4 <lv_label_get_body_draw>
 8017584:	4601      	mov	r1, r0
 8017586:	4628      	mov	r0, r5
 8017588:	f7ff fbf4 	bl	8016d74 <lv_label_set_body_draw>
        lv_label_set_align(new_label, lv_label_get_align(copy));
 801758c:	4630      	mov	r0, r6
 801758e:	f7ff fc13 	bl	8016db8 <lv_label_get_align>
 8017592:	4601      	mov	r1, r0
 8017594:	4628      	mov	r0, r5
 8017596:	f7ff fbda 	bl	8016d4e <lv_label_set_align>
        if(copy_ext->static_txt == 0)
 801759a:	7fbb      	ldrb	r3, [r7, #30]
 801759c:	071a      	lsls	r2, r3, #28
            lv_label_set_text(new_label, lv_label_get_text(copy));
 801759e:	4630      	mov	r0, r6
        if(copy_ext->static_txt == 0)
 80175a0:	d416      	bmi.n	80175d0 <lv_label_create+0x114>
            lv_label_set_text(new_label, lv_label_get_text(copy));
 80175a2:	f7ff fbfd 	bl	8016da0 <lv_label_get_text>
 80175a6:	4601      	mov	r1, r0
 80175a8:	4628      	mov	r0, r5
 80175aa:	f7ff fedd 	bl	8017368 <lv_label_set_text>
        if(copy_ext->long_mode == LV_LABEL_LONG_DOT) {
 80175ae:	7fbb      	ldrb	r3, [r7, #30]
 80175b0:	f003 0307 	and.w	r3, r3, #7
 80175b4:	2b02      	cmp	r3, #2
 80175b6:	d11c      	bne.n	80175f2 <lv_label_create+0x136>
            ext->text = lv_mem_realloc(ext->text, lv_mem_get_size(copy_ext->text));
 80175b8:	6838      	ldr	r0, [r7, #0]
 80175ba:	6826      	ldr	r6, [r4, #0]
 80175bc:	f7fc fcb8 	bl	8013f30 <lv_mem_get_size>
 80175c0:	4601      	mov	r1, r0
 80175c2:	4630      	mov	r0, r6
 80175c4:	f7fc fcec 	bl	8013fa0 <lv_mem_realloc>
 80175c8:	4606      	mov	r6, r0
 80175ca:	6020      	str	r0, [r4, #0]
            lv_mem_assert(ext->text);
 80175cc:	b938      	cbnz	r0, 80175de <lv_label_create+0x122>
 80175ce:	e7fe      	b.n	80175ce <lv_label_create+0x112>
            lv_label_set_static_text(new_label, lv_label_get_text(copy));
 80175d0:	f7ff fbe6 	bl	8016da0 <lv_label_get_text>
 80175d4:	4601      	mov	r1, r0
 80175d6:	4628      	mov	r0, r5
 80175d8:	f7ff feff 	bl	80173da <lv_label_set_static_text>
 80175dc:	e7e7      	b.n	80175ae <lv_label_create+0xf2>
            memcpy(ext->text, copy_ext->text, lv_mem_get_size(copy_ext->text));
 80175de:	f8d7 8000 	ldr.w	r8, [r7]
 80175e2:	4640      	mov	r0, r8
 80175e4:	f7fc fca4 	bl	8013f30 <lv_mem_get_size>
 80175e8:	4641      	mov	r1, r8
 80175ea:	4602      	mov	r2, r0
 80175ec:	4630      	mov	r0, r6
 80175ee:	f001 ff91 	bl	8019514 <memcpy>
        if(copy_ext->dot_tmp_alloc && copy_ext->dot.tmp_ptr) {
 80175f2:	7ffb      	ldrb	r3, [r7, #31]
 80175f4:	079b      	lsls	r3, r3, #30
 80175f6:	d515      	bpl.n	8017624 <lv_label_create+0x168>
 80175f8:	6878      	ldr	r0, [r7, #4]
 80175fa:	b198      	cbz	r0, 8017624 <lv_label_create+0x168>
            int len = strlen(copy_ext->dot.tmp_ptr);
 80175fc:	f7e8 fde8 	bl	80001d0 <strlen>
            lv_label_set_dot_tmp(new_label, ext->dot.tmp_ptr, len);
 8017600:	6861      	ldr	r1, [r4, #4]
 8017602:	b282      	uxth	r2, r0
 8017604:	4628      	mov	r0, r5
 8017606:	f7ff fa6b 	bl	8016ae0 <lv_label_set_dot_tmp>
        ext->dot_tmp_alloc = copy_ext->dot_tmp_alloc;
 801760a:	7ffb      	ldrb	r3, [r7, #31]
 801760c:	7fe2      	ldrb	r2, [r4, #31]
 801760e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8017612:	f363 0241 	bfi	r2, r3, #1, #1
 8017616:	77e2      	strb	r2, [r4, #31]
        ext->dot_end       = copy_ext->dot_end;
 8017618:	893b      	ldrh	r3, [r7, #8]
 801761a:	8123      	strh	r3, [r4, #8]
        lv_obj_refresh_style(new_label);
 801761c:	4628      	mov	r0, r5
 801761e:	f7f7 fb54 	bl	800ecca <lv_obj_refresh_style>
 8017622:	e797      	b.n	8017554 <lv_label_create+0x98>
            memcpy(ext->dot.tmp, copy_ext->dot.tmp, sizeof(ext->dot.tmp));
 8017624:	687b      	ldr	r3, [r7, #4]
 8017626:	6063      	str	r3, [r4, #4]
 8017628:	e7ef      	b.n	801760a <lv_label_create+0x14e>
 801762a:	bf00      	nop
 801762c:	2000afd4 	.word	0x2000afd4
 8017630:	08016b33 	.word	0x08016b33
 8017634:	0801727d 	.word	0x0801727d
 8017638:	080d8a26 	.word	0x080d8a26

0801763c <lv_area_copy>:
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    memcpy(dest, src, sizeof(lv_area_t));
 801763c:	4603      	mov	r3, r0
 801763e:	6808      	ldr	r0, [r1, #0]
 8017640:	6849      	ldr	r1, [r1, #4]
 8017642:	c303      	stmia	r3!, {r0, r1}
 8017644:	4770      	bx	lr

08017646 <scrl_def_event_cb>:
 * @param scrl pointer to the page's scrollable object
 * @param event type of the event
 * @param data data of the event
 */
static void scrl_def_event_cb(lv_obj_t * scrl, lv_event_t event)
{
 8017646:	b538      	push	{r3, r4, r5, lr}
 8017648:	460c      	mov	r4, r1
    lv_obj_t * page = lv_obj_get_parent(scrl);
 801764a:	f7f7 fbc3 	bl	800edd4 <lv_obj_get_parent>

    /*clang-format off*/
    if(event == LV_EVENT_PRESSED || event == LV_EVENT_PRESSING || event == LV_EVENT_PRESS_LOST ||
 801764e:	2c0a      	cmp	r4, #10
    lv_obj_t * page = lv_obj_get_parent(scrl);
 8017650:	4605      	mov	r5, r0
    if(event == LV_EVENT_PRESSED || event == LV_EVENT_PRESSING || event == LV_EVENT_PRESS_LOST ||
 8017652:	d808      	bhi.n	8017666 <scrl_def_event_cb+0x20>
       event == LV_EVENT_RELEASED || event == LV_EVENT_SHORT_CLICKED || event == LV_EVENT_CLICKED ||
       event == LV_EVENT_LONG_PRESSED || event == LV_EVENT_LONG_PRESSED_REPEAT ||
       event == LV_EVENT_DRAG_BEGIN || event == LV_EVENT_DRAG_END || event == LV_EVENT_DRAG_THROW_BEGIN) {
        lv_event_send(page, event, lv_event_get_data());
 8017654:	f7f6 fe46 	bl	800e2e4 <lv_event_get_data>
 8017658:	4621      	mov	r1, r4
 801765a:	4602      	mov	r2, r0
 801765c:	4628      	mov	r0, r5
    }
    /*clang-format on*/
}
 801765e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_event_send(page, event, lv_event_get_data());
 8017662:	f7f6 bde1 	b.w	800e228 <lv_event_send>
 8017666:	bd38      	pop	{r3, r4, r5, pc}

08017668 <lv_page_sb_refresh>:
/**
 * Refresh the position and size of the scroll bars.
 * @param page pointer to a page object
 */
static void lv_page_sb_refresh(lv_obj_t * page)
{
 8017668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801766c:	b08b      	sub	sp, #44	; 0x2c
 801766e:	4607      	mov	r7, r0
    lv_page_ext_t * ext      = lv_obj_get_ext_attr(page);
 8017670:	f7f7 fced 	bl	800f04e <lv_obj_get_ext_attr>
 8017674:	4604      	mov	r4, r0
    const lv_style_t * style = lv_obj_get_style(page);
 8017676:	4638      	mov	r0, r7
 8017678:	f7f7 fbfe 	bl	800ee78 <lv_obj_get_style>
    lv_obj_t * scrl          = ext->scrl;
 801767c:	6863      	ldr	r3, [r4, #4]
 801767e:	9300      	str	r3, [sp, #0]
    const lv_style_t * style = lv_obj_get_style(page);
 8017680:	4680      	mov	r8, r0
    lv_coord_t size_tmp;
    lv_coord_t scrl_w = lv_obj_get_width(scrl);
 8017682:	4618      	mov	r0, r3
 8017684:	f7f7 fbe6 	bl	800ee54 <lv_obj_get_width>
 8017688:	9001      	str	r0, [sp, #4]
    lv_coord_t scrl_h = lv_obj_get_height(scrl);
 801768a:	9800      	ldr	r0, [sp, #0]
 801768c:	f7f7 fbe8 	bl	800ee60 <lv_obj_get_height>
 8017690:	9002      	str	r0, [sp, #8]
    lv_coord_t obj_w  = lv_obj_get_width(page);
 8017692:	4638      	mov	r0, r7
 8017694:	f7f7 fbde 	bl	800ee54 <lv_obj_get_width>
 8017698:	4605      	mov	r5, r0
    lv_coord_t obj_h  = lv_obj_get_height(page);
 801769a:	4638      	mov	r0, r7
 801769c:	f7f7 fbe0 	bl	800ee60 <lv_obj_get_height>
     * - horizontal and vertical scrollbars can overlap on the corners
     * - if the page has radius the scrollbar can be out of the radius  */
    lv_coord_t sb_hor_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.right);
    lv_coord_t sb_ver_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.bottom);

    if(ext->sb.mode == LV_SB_MODE_OFF) return;
 80176a0:	7f23      	ldrb	r3, [r4, #28]
 80176a2:	f013 021c 	ands.w	r2, r3, #28
    lv_coord_t obj_h  = lv_obj_get_height(page);
 80176a6:	4681      	mov	r9, r0
    if(ext->sb.mode == LV_SB_MODE_OFF) return;
 80176a8:	d066      	beq.n	8017778 <lv_page_sb_refresh+0x110>
    lv_coord_t sb_hor_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.right);
 80176aa:	68a1      	ldr	r1, [r4, #8]
 80176ac:	f9b8 601c 	ldrsh.w	r6, [r8, #28]
 80176b0:	f9b1 101e 	ldrsh.w	r1, [r1, #30]
 80176b4:	9104      	str	r1, [sp, #16]

    if(ext->sb.mode == LV_SB_MODE_ON) {
 80176b6:	2a04      	cmp	r2, #4
        ext->sb.hor_draw = 1;
        ext->sb.ver_draw = 1;
 80176b8:	bf08      	it	eq
 80176ba:	f043 0303 	orreq.w	r3, r3, #3
    lv_coord_t sb_ver_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.bottom);
 80176be:	f9b8 1018 	ldrsh.w	r1, [r8, #24]
        ext->sb.ver_draw = 1;
 80176c2:	bf08      	it	eq
 80176c4:	7723      	strbeq	r3, [r4, #28]
    }

    /*Invalidate the current (old) scrollbar areas*/
    lv_disp_t * disp = lv_obj_get_disp(page);
 80176c6:	4638      	mov	r0, r7
    lv_coord_t sb_ver_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.bottom);
 80176c8:	9105      	str	r1, [sp, #20]
    lv_disp_t * disp = lv_obj_get_disp(page);
 80176ca:	f7f6 fe1d 	bl	800e308 <lv_obj_get_disp>
    lv_area_t sb_area_tmp;
    if(ext->sb.hor_draw != 0) {
 80176ce:	7f23      	ldrb	r3, [r4, #28]
    lv_disp_t * disp = lv_obj_get_disp(page);
 80176d0:	4683      	mov	fp, r0
    if(ext->sb.hor_draw != 0) {
 80176d2:	07d8      	lsls	r0, r3, #31
 80176d4:	d51e      	bpl.n	8017714 <lv_page_sb_refresh+0xac>
        lv_area_copy(&sb_area_tmp, &ext->sb.hor_area);
 80176d6:	f104 010c 	add.w	r1, r4, #12
 80176da:	a808      	add	r0, sp, #32
 80176dc:	f7ff ffae 	bl	801763c <lv_area_copy>
        sb_area_tmp.x1 += page->coords.x1;
 80176e0:	8a3a      	ldrh	r2, [r7, #16]
 80176e2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
        sb_area_tmp.y1 += page->coords.y1;
 80176e6:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
        sb_area_tmp.x1 += page->coords.x1;
 80176ea:	4413      	add	r3, r2
 80176ec:	f8ad 3020 	strh.w	r3, [sp, #32]
        sb_area_tmp.y1 += page->coords.y1;
 80176f0:	8a7b      	ldrh	r3, [r7, #18]
 80176f2:	4419      	add	r1, r3
 80176f4:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
        sb_area_tmp.x2 += page->coords.x1;
 80176f8:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 80176fc:	440a      	add	r2, r1
 80176fe:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
        sb_area_tmp.y2 += page->coords.y1;
 8017702:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
        lv_inv_area(disp, &sb_area_tmp);
 8017706:	a908      	add	r1, sp, #32
        sb_area_tmp.y2 += page->coords.y1;
 8017708:	4413      	add	r3, r2
        lv_inv_area(disp, &sb_area_tmp);
 801770a:	4658      	mov	r0, fp
        sb_area_tmp.y2 += page->coords.y1;
 801770c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        lv_inv_area(disp, &sb_area_tmp);
 8017710:	f7f7 fdd6 	bl	800f2c0 <lv_inv_area>
    }
    if(ext->sb.ver_draw != 0) {
 8017714:	7f23      	ldrb	r3, [r4, #28]
 8017716:	0799      	lsls	r1, r3, #30
 8017718:	d51e      	bpl.n	8017758 <lv_page_sb_refresh+0xf0>
        lv_area_copy(&sb_area_tmp, &ext->sb.ver_area);
 801771a:	f104 0114 	add.w	r1, r4, #20
 801771e:	a808      	add	r0, sp, #32
 8017720:	f7ff ff8c 	bl	801763c <lv_area_copy>
        sb_area_tmp.x1 += page->coords.x1;
 8017724:	8a3a      	ldrh	r2, [r7, #16]
 8017726:	f8bd 3020 	ldrh.w	r3, [sp, #32]
        sb_area_tmp.y1 += page->coords.y1;
 801772a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
        sb_area_tmp.x1 += page->coords.x1;
 801772e:	4413      	add	r3, r2
 8017730:	f8ad 3020 	strh.w	r3, [sp, #32]
        sb_area_tmp.y1 += page->coords.y1;
 8017734:	8a7b      	ldrh	r3, [r7, #18]
 8017736:	4419      	add	r1, r3
 8017738:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
        sb_area_tmp.x2 += page->coords.x1;
 801773c:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8017740:	440a      	add	r2, r1
 8017742:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
        sb_area_tmp.y2 += page->coords.y1;
 8017746:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
        lv_inv_area(disp, &sb_area_tmp);
 801774a:	a908      	add	r1, sp, #32
        sb_area_tmp.y2 += page->coords.y1;
 801774c:	4413      	add	r3, r2
        lv_inv_area(disp, &sb_area_tmp);
 801774e:	4658      	mov	r0, fp
        sb_area_tmp.y2 += page->coords.y1;
 8017750:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        lv_inv_area(disp, &sb_area_tmp);
 8017754:	f7f7 fdb4 	bl	800f2c0 <lv_inv_area>
    }

    if(ext->sb.mode == LV_SB_MODE_DRAG && lv_indev_is_dragging(lv_indev_get_act()) == false) {
 8017758:	7f23      	ldrb	r3, [r4, #28]
 801775a:	f003 031c 	and.w	r3, r3, #28
 801775e:	2b08      	cmp	r3, #8
 8017760:	d10d      	bne.n	801777e <lv_page_sb_refresh+0x116>
 8017762:	f7f6 fc4b 	bl	800dffc <lv_indev_get_act>
 8017766:	f7f6 fc6c 	bl	800e042 <lv_indev_is_dragging>
 801776a:	b940      	cbnz	r0, 801777e <lv_page_sb_refresh+0x116>
        ext->sb.hor_draw = 0;
 801776c:	7f23      	ldrb	r3, [r4, #28]
 801776e:	f360 0300 	bfi	r3, r0, #0, #1
        ext->sb.ver_draw = 0;
 8017772:	f360 0341 	bfi	r3, r0, #1, #1
 8017776:	7723      	strb	r3, [r4, #28]
        sb_area_tmp.y1 += page->coords.y1;
        sb_area_tmp.x2 += page->coords.x1;
        sb_area_tmp.y2 += page->coords.y1;
        lv_inv_area(disp, &sb_area_tmp);
    }
}
 8017778:	b00b      	add	sp, #44	; 0x2c
 801777a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_coord_t sb_hor_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.right);
 801777e:	9a04      	ldr	r2, [sp, #16]
    if(scrl_w <= obj_w - style->body.padding.left - style->body.padding.right) {
 8017780:	f9b8 101c 	ldrsh.w	r1, [r8, #28]
 8017784:	9801      	ldr	r0, [sp, #4]
    lv_coord_t sb_hor_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.right);
 8017786:	4296      	cmp	r6, r2
 8017788:	4633      	mov	r3, r6
 801778a:	bfb8      	it	lt
 801778c:	4613      	movlt	r3, r2
    if(scrl_w <= obj_w - style->body.padding.left - style->body.padding.right) {
 801778e:	f9b8 201a 	ldrsh.w	r2, [r8, #26]
    lv_coord_t sb_hor_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.right);
 8017792:	9303      	str	r3, [sp, #12]
    if(scrl_w <= obj_w - style->body.padding.left - style->body.padding.right) {
 8017794:	1aab      	subs	r3, r5, r2
 8017796:	1a5b      	subs	r3, r3, r1
 8017798:	4298      	cmp	r0, r3
 801779a:	9b03      	ldr	r3, [sp, #12]
 801779c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80177a0:	f300 808e 	bgt.w	80178c0 <lv_page_sb_refresh+0x258>
        lv_area_set_width(&ext->sb.hor_area, obj_w - 2 * sb_hor_pad);
 80177a4:	1ae9      	subs	r1, r5, r3
 80177a6:	f104 060c 	add.w	r6, r4, #12
 80177aa:	b209      	sxth	r1, r1
 80177ac:	4630      	mov	r0, r6
 80177ae:	f7fc f924 	bl	80139fa <lv_area_set_width>
                        obj_h - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.bottom);
 80177b2:	68a3      	ldr	r3, [r4, #8]
        lv_area_set_pos(&ext->sb.hor_area, sb_hor_pad,
 80177b4:	9903      	ldr	r1, [sp, #12]
                        obj_h - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.bottom);
 80177b6:	8bda      	ldrh	r2, [r3, #30]
 80177b8:	8b1b      	ldrh	r3, [r3, #24]
 80177ba:	eba9 0202 	sub.w	r2, r9, r2
 80177be:	1ad2      	subs	r2, r2, r3
        lv_area_set_pos(&ext->sb.hor_area, sb_hor_pad,
 80177c0:	b212      	sxth	r2, r2
 80177c2:	4630      	mov	r0, r6
 80177c4:	f7fc f923 	bl	8013a0e <lv_area_set_pos>
        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG) ext->sb.hor_draw = 0;
 80177c8:	7f23      	ldrb	r3, [r4, #28]
 80177ca:	f003 0218 	and.w	r2, r3, #24
 80177ce:	2a08      	cmp	r2, #8
 80177d0:	d102      	bne.n	80177d8 <lv_page_sb_refresh+0x170>
 80177d2:	f36f 0300 	bfc	r3, #0, #1
        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG) ext->sb.hor_draw = 1;
 80177d6:	7723      	strb	r3, [r4, #28]
    lv_coord_t sb_ver_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.bottom);
 80177d8:	9b04      	ldr	r3, [sp, #16]
 80177da:	9905      	ldr	r1, [sp, #20]
    if(scrl_h <= obj_h - style->body.padding.top - style->body.padding.bottom) {
 80177dc:	9e02      	ldr	r6, [sp, #8]
    lv_coord_t sb_ver_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.bottom);
 80177de:	428b      	cmp	r3, r1
 80177e0:	bfb8      	it	lt
 80177e2:	460b      	movlt	r3, r1
 80177e4:	461a      	mov	r2, r3
    if(scrl_h <= obj_h - style->body.padding.top - style->body.padding.bottom) {
 80177e6:	f9b8 3016 	ldrsh.w	r3, [r8, #22]
 80177ea:	f9b8 1018 	ldrsh.w	r1, [r8, #24]
 80177ee:	eba9 0003 	sub.w	r0, r9, r3
 80177f2:	1a40      	subs	r0, r0, r1
 80177f4:	4286      	cmp	r6, r0
 80177f6:	ea4f 0a42 	mov.w	sl, r2, lsl #1
 80177fa:	f300 809f 	bgt.w	801793c <lv_page_sb_refresh+0x2d4>
        lv_area_set_height(&ext->sb.ver_area, obj_h - 2 * sb_ver_pad);
 80177fe:	f104 0614 	add.w	r6, r4, #20
 8017802:	eba9 010a 	sub.w	r1, r9, sl
 8017806:	b209      	sxth	r1, r1
 8017808:	4630      	mov	r0, r6
 801780a:	9200      	str	r2, [sp, #0]
 801780c:	f7fc f8fa 	bl	8013a04 <lv_area_set_height>
                        obj_w - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.right, sb_ver_pad);
 8017810:	68a3      	ldr	r3, [r4, #8]
        lv_area_set_pos(&ext->sb.ver_area,
 8017812:	9a00      	ldr	r2, [sp, #0]
                        obj_w - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.right, sb_ver_pad);
 8017814:	8bd9      	ldrh	r1, [r3, #30]
 8017816:	1a6d      	subs	r5, r5, r1
 8017818:	8b99      	ldrh	r1, [r3, #28]
 801781a:	1a69      	subs	r1, r5, r1
        lv_area_set_pos(&ext->sb.ver_area,
 801781c:	b209      	sxth	r1, r1
 801781e:	4630      	mov	r0, r6
 8017820:	f7fc f8f5 	bl	8013a0e <lv_area_set_pos>
        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG) ext->sb.ver_draw = 0;
 8017824:	7f23      	ldrb	r3, [r4, #28]
 8017826:	f003 0218 	and.w	r2, r3, #24
 801782a:	2a08      	cmp	r2, #8
 801782c:	d102      	bne.n	8017834 <lv_page_sb_refresh+0x1cc>
 801782e:	f36f 0341 	bfc	r3, #1, #1
        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG) ext->sb.ver_draw = 1;
 8017832:	7723      	strb	r3, [r4, #28]
    if(ext->sb.hor_draw != 0) {
 8017834:	7f23      	ldrb	r3, [r4, #28]
 8017836:	07da      	lsls	r2, r3, #31
 8017838:	d51e      	bpl.n	8017878 <lv_page_sb_refresh+0x210>
        lv_area_copy(&sb_area_tmp, &ext->sb.hor_area);
 801783a:	f104 010c 	add.w	r1, r4, #12
 801783e:	a808      	add	r0, sp, #32
 8017840:	f7ff fefc 	bl	801763c <lv_area_copy>
        sb_area_tmp.x1 += page->coords.x1;
 8017844:	8a3a      	ldrh	r2, [r7, #16]
 8017846:	f8bd 3020 	ldrh.w	r3, [sp, #32]
        sb_area_tmp.y1 += page->coords.y1;
 801784a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
        sb_area_tmp.x1 += page->coords.x1;
 801784e:	4413      	add	r3, r2
 8017850:	f8ad 3020 	strh.w	r3, [sp, #32]
        sb_area_tmp.y1 += page->coords.y1;
 8017854:	8a7b      	ldrh	r3, [r7, #18]
 8017856:	4419      	add	r1, r3
 8017858:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
        sb_area_tmp.x2 += page->coords.x1;
 801785c:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8017860:	440a      	add	r2, r1
 8017862:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
        sb_area_tmp.y2 += page->coords.y1;
 8017866:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
        lv_inv_area(disp, &sb_area_tmp);
 801786a:	a908      	add	r1, sp, #32
        sb_area_tmp.y2 += page->coords.y1;
 801786c:	4413      	add	r3, r2
        lv_inv_area(disp, &sb_area_tmp);
 801786e:	4658      	mov	r0, fp
        sb_area_tmp.y2 += page->coords.y1;
 8017870:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        lv_inv_area(disp, &sb_area_tmp);
 8017874:	f7f7 fd24 	bl	800f2c0 <lv_inv_area>
    if(ext->sb.ver_draw != 0) {
 8017878:	7f23      	ldrb	r3, [r4, #28]
 801787a:	079b      	lsls	r3, r3, #30
 801787c:	f57f af7c 	bpl.w	8017778 <lv_page_sb_refresh+0x110>
        lv_area_copy(&sb_area_tmp, &ext->sb.ver_area);
 8017880:	f104 0114 	add.w	r1, r4, #20
 8017884:	a808      	add	r0, sp, #32
 8017886:	f7ff fed9 	bl	801763c <lv_area_copy>
        sb_area_tmp.x1 += page->coords.x1;
 801788a:	8a3a      	ldrh	r2, [r7, #16]
 801788c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
        sb_area_tmp.y1 += page->coords.y1;
 8017890:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
        sb_area_tmp.x1 += page->coords.x1;
 8017894:	4413      	add	r3, r2
 8017896:	f8ad 3020 	strh.w	r3, [sp, #32]
        sb_area_tmp.y1 += page->coords.y1;
 801789a:	8a7b      	ldrh	r3, [r7, #18]
 801789c:	4419      	add	r1, r3
 801789e:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
        sb_area_tmp.x2 += page->coords.x1;
 80178a2:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 80178a6:	440a      	add	r2, r1
 80178a8:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
        sb_area_tmp.y2 += page->coords.y1;
 80178ac:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
        lv_inv_area(disp, &sb_area_tmp);
 80178b0:	a908      	add	r1, sp, #32
        sb_area_tmp.y2 += page->coords.y1;
 80178b2:	4413      	add	r3, r2
        lv_inv_area(disp, &sb_area_tmp);
 80178b4:	4658      	mov	r0, fp
        sb_area_tmp.y2 += page->coords.y1;
 80178b6:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        lv_inv_area(disp, &sb_area_tmp);
 80178ba:	f7f7 fd01 	bl	800f2c0 <lv_inv_area>
 80178be:	e75b      	b.n	8017778 <lv_page_sb_refresh+0x110>
            (obj_w * (obj_w - (2 * sb_hor_pad))) / (scrl_w + style->body.padding.left + style->body.padding.right);
 80178c0:	1aee      	subs	r6, r5, r3
 80178c2:	9307      	str	r3, [sp, #28]
 80178c4:	9b01      	ldr	r3, [sp, #4]
 80178c6:	441a      	add	r2, r3
 80178c8:	440a      	add	r2, r1
 80178ca:	436e      	muls	r6, r5
 80178cc:	fb96 f6f2 	sdiv	r6, r6, r2
        size_tmp =
 80178d0:	b236      	sxth	r6, r6
 80178d2:	2e03      	cmp	r6, #3
 80178d4:	bfb8      	it	lt
 80178d6:	2603      	movlt	r6, #3
        lv_area_set_width(&ext->sb.hor_area, size_tmp);
 80178d8:	f104 0a0c 	add.w	sl, r4, #12
 80178dc:	4631      	mov	r1, r6
 80178de:	4650      	mov	r0, sl
 80178e0:	f7fc f88b 	bl	80139fa <lv_area_set_width>
                            (-(lv_obj_get_x(scrl) - style->body.padding.left) * (obj_w - size_tmp - 2 * sb_hor_pad)) /
 80178e4:	f9b8 301a 	ldrsh.w	r3, [r8, #26]
 80178e8:	9800      	ldr	r0, [sp, #0]
 80178ea:	9306      	str	r3, [sp, #24]
 80178ec:	f7f7 faa6 	bl	800ee3c <lv_obj_get_x>
                        obj_h - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.bottom);
 80178f0:	68a1      	ldr	r1, [r4, #8]
                            (-(lv_obj_get_x(scrl) - style->body.padding.left) * (obj_w - size_tmp - 2 * sb_hor_pad)) /
 80178f2:	9b07      	ldr	r3, [sp, #28]
                        obj_h - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.bottom);
 80178f4:	8bca      	ldrh	r2, [r1, #30]
 80178f6:	8b09      	ldrh	r1, [r1, #24]
 80178f8:	eba9 0202 	sub.w	r2, r9, r2
 80178fc:	1a52      	subs	r2, r2, r1
                            (-(lv_obj_get_x(scrl) - style->body.padding.left) * (obj_w - size_tmp - 2 * sb_hor_pad)) /
 80178fe:	9906      	ldr	r1, [sp, #24]
 8017900:	1bae      	subs	r6, r5, r6
 8017902:	1af3      	subs	r3, r6, r3
 8017904:	1a08      	subs	r0, r1, r0
 8017906:	4358      	muls	r0, r3
                                (scrl_w + style->body.padding.left + style->body.padding.right - obj_w),
 8017908:	9901      	ldr	r1, [sp, #4]
 801790a:	f9b8 301a 	ldrsh.w	r3, [r8, #26]
 801790e:	440b      	add	r3, r1
 8017910:	f9b8 101c 	ldrsh.w	r1, [r8, #28]
 8017914:	440b      	add	r3, r1
 8017916:	1b5b      	subs	r3, r3, r5
                            (-(lv_obj_get_x(scrl) - style->body.padding.left) * (obj_w - size_tmp - 2 * sb_hor_pad)) /
 8017918:	fb90 f0f3 	sdiv	r0, r0, r3
                        sb_hor_pad +
 801791c:	9b03      	ldr	r3, [sp, #12]
 801791e:	4403      	add	r3, r0
        lv_area_set_pos(&ext->sb.hor_area,
 8017920:	b212      	sxth	r2, r2
 8017922:	b219      	sxth	r1, r3
 8017924:	4650      	mov	r0, sl
 8017926:	f7fc f872 	bl	8013a0e <lv_area_set_pos>
        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG) ext->sb.hor_draw = 1;
 801792a:	7f23      	ldrb	r3, [r4, #28]
 801792c:	f003 0218 	and.w	r2, r3, #24
 8017930:	2a08      	cmp	r2, #8
 8017932:	f47f af51 	bne.w	80177d8 <lv_page_sb_refresh+0x170>
 8017936:	f043 0301 	orr.w	r3, r3, #1
 801793a:	e74c      	b.n	80177d6 <lv_page_sb_refresh+0x16e>
 801793c:	9204      	str	r2, [sp, #16]
            (obj_h * (obj_h - (2 * sb_ver_pad))) / (scrl_h + style->body.padding.top + style->body.padding.bottom);
 801793e:	9a02      	ldr	r2, [sp, #8]
 8017940:	eba9 060a 	sub.w	r6, r9, sl
 8017944:	4413      	add	r3, r2
 8017946:	440b      	add	r3, r1
 8017948:	fb09 f606 	mul.w	r6, r9, r6
 801794c:	fb96 f6f3 	sdiv	r6, r6, r3
        size_tmp =
 8017950:	b236      	sxth	r6, r6
 8017952:	2e03      	cmp	r6, #3
 8017954:	bfb8      	it	lt
 8017956:	2603      	movlt	r6, #3
        lv_area_set_height(&ext->sb.ver_area, size_tmp);
 8017958:	f104 0314 	add.w	r3, r4, #20
 801795c:	4631      	mov	r1, r6
 801795e:	4618      	mov	r0, r3
 8017960:	9303      	str	r3, [sp, #12]
 8017962:	f7fc f84f 	bl	8013a04 <lv_area_set_height>
                        obj_w - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.right,
 8017966:	68a0      	ldr	r0, [r4, #8]
 8017968:	8bc1      	ldrh	r1, [r0, #30]
                        sb_ver_pad + (-(lv_obj_get_y(scrl) - ext->sb.style->body.padding.bottom) *
 801796a:	f9b0 3018 	ldrsh.w	r3, [r0, #24]
 801796e:	9301      	str	r3, [sp, #4]
                        obj_w - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.right,
 8017970:	1a6d      	subs	r5, r5, r1
 8017972:	8b81      	ldrh	r1, [r0, #28]
                        sb_ver_pad + (-(lv_obj_get_y(scrl) - ext->sb.style->body.padding.bottom) *
 8017974:	9800      	ldr	r0, [sp, #0]
                        obj_w - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.right,
 8017976:	1a6d      	subs	r5, r5, r1
                        sb_ver_pad + (-(lv_obj_get_y(scrl) - ext->sb.style->body.padding.bottom) *
 8017978:	f7f7 fa66 	bl	800ee48 <lv_obj_get_y>
 801797c:	9b01      	ldr	r3, [sp, #4]
                                         (scrl_h + style->body.padding.top + style->body.padding.bottom - obj_h));
 801797e:	f9b8 1016 	ldrsh.w	r1, [r8, #22]
                        sb_ver_pad + (-(lv_obj_get_y(scrl) - ext->sb.style->body.padding.bottom) *
 8017982:	9a04      	ldr	r2, [sp, #16]
                                      (obj_h - size_tmp - 2 * sb_ver_pad)) /
 8017984:	eba9 0606 	sub.w	r6, r9, r6
                        sb_ver_pad + (-(lv_obj_get_y(scrl) - ext->sb.style->body.padding.bottom) *
 8017988:	1a18      	subs	r0, r3, r0
                                      (obj_h - size_tmp - 2 * sb_ver_pad)) /
 801798a:	eba6 0a0a 	sub.w	sl, r6, sl
                                         (scrl_h + style->body.padding.top + style->body.padding.bottom - obj_h));
 801798e:	9b02      	ldr	r3, [sp, #8]
                        sb_ver_pad + (-(lv_obj_get_y(scrl) - ext->sb.style->body.padding.bottom) *
 8017990:	fb00 fa0a 	mul.w	sl, r0, sl
                                         (scrl_h + style->body.padding.top + style->body.padding.bottom - obj_h));
 8017994:	f9b8 0018 	ldrsh.w	r0, [r8, #24]
 8017998:	4419      	add	r1, r3
 801799a:	4401      	add	r1, r0
        lv_area_set_pos(&ext->sb.ver_area,
 801799c:	9b03      	ldr	r3, [sp, #12]
                                         (scrl_h + style->body.padding.top + style->body.padding.bottom - obj_h));
 801799e:	eba1 0909 	sub.w	r9, r1, r9
        lv_area_set_pos(&ext->sb.ver_area,
 80179a2:	b22d      	sxth	r5, r5
                                      (obj_h - size_tmp - 2 * sb_ver_pad)) /
 80179a4:	fb9a f9f9 	sdiv	r9, sl, r9
                        sb_ver_pad + (-(lv_obj_get_y(scrl) - ext->sb.style->body.padding.bottom) *
 80179a8:	444a      	add	r2, r9
        lv_area_set_pos(&ext->sb.ver_area,
 80179aa:	b212      	sxth	r2, r2
 80179ac:	4618      	mov	r0, r3
 80179ae:	4629      	mov	r1, r5
 80179b0:	f7fc f82d 	bl	8013a0e <lv_area_set_pos>
        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG) ext->sb.ver_draw = 1;
 80179b4:	7f23      	ldrb	r3, [r4, #28]
 80179b6:	f003 0218 	and.w	r2, r3, #24
 80179ba:	2a08      	cmp	r2, #8
 80179bc:	f47f af3a 	bne.w	8017834 <lv_page_sb_refresh+0x1cc>
 80179c0:	f043 0302 	orr.w	r3, r3, #2
 80179c4:	e735      	b.n	8017832 <lv_page_sb_refresh+0x1ca>

080179c6 <edge_flash_anim_end>:
    ext->edge_flash.state = v;
    lv_obj_invalidate(page);
}

static void edge_flash_anim_end(lv_anim_t * a)
{
 80179c6:	b510      	push	{r4, lr}
 80179c8:	4604      	mov	r4, r0
    lv_page_ext_t * ext       = lv_obj_get_ext_attr(a->var);
 80179ca:	6800      	ldr	r0, [r0, #0]
 80179cc:	f7f7 fb3f 	bl	800f04e <lv_obj_get_ext_attr>
    ext->edge_flash.top_ip    = 0;
 80179d0:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    ext->edge_flash.bottom_ip = 0;
    ext->edge_flash.left_ip   = 0;
    ext->edge_flash.right_ip  = 0;
 80179d4:	f003 03e9 	and.w	r3, r3, #233	; 0xe9
 80179d8:	f36f 03c3 	bfc	r3, #3, #1
 80179dc:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
    lv_obj_invalidate(a->var);
 80179e0:	6820      	ldr	r0, [r4, #0]
}
 80179e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_invalidate(a->var);
 80179e6:	f7f6 bcb5 	b.w	800e354 <lv_obj_invalidate>

080179ea <edge_flash_anim>:
{
 80179ea:	b538      	push	{r3, r4, r5, lr}
 80179ec:	4604      	mov	r4, r0
 80179ee:	460d      	mov	r5, r1
    lv_page_ext_t * ext   = lv_obj_get_ext_attr(page);
 80179f0:	f7f7 fb2d 	bl	800f04e <lv_obj_get_ext_attr>
    ext->edge_flash.state = v;
 80179f4:	8405      	strh	r5, [r0, #32]
    lv_obj_invalidate(page);
 80179f6:	4620      	mov	r0, r4
}
 80179f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(page);
 80179fc:	f7f6 bcaa 	b.w	800e354 <lv_obj_invalidate>

08017a00 <lv_scrl_design>:
    if(mode == LV_DESIGN_COVER_CHK) {
 8017a00:	2a02      	cmp	r2, #2
{
 8017a02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017a06:	4604      	mov	r4, r0
 8017a08:	4689      	mov	r9, r1
    if(mode == LV_DESIGN_COVER_CHK) {
 8017a0a:	d104      	bne.n	8017a16 <lv_scrl_design+0x16>
        return ancestor_design(scrl, mask, mode);
 8017a0c:	4b1f      	ldr	r3, [pc, #124]	; (8017a8c <lv_scrl_design+0x8c>)
}
 8017a0e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        return ancestor_design(scrl, mask, mode);
 8017a12:	681b      	ldr	r3, [r3, #0]
 8017a14:	4718      	bx	r3
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 8017a16:	bb9a      	cbnz	r2, 8017a80 <lv_scrl_design+0x80>
        const lv_style_t * style_scrl_ori = lv_obj_get_style(scrl);
 8017a18:	f7f7 fa2e 	bl	800ee78 <lv_obj_get_style>
 8017a1c:	4605      	mov	r5, r0
        lv_obj_t * page                   = lv_obj_get_parent(scrl);
 8017a1e:	4620      	mov	r0, r4
 8017a20:	f7f7 f9d8 	bl	800edd4 <lv_obj_get_parent>
 8017a24:	4607      	mov	r7, r0
        const lv_style_t * style_page     = lv_obj_get_style(page);
 8017a26:	f7f7 fa27 	bl	800ee78 <lv_obj_get_style>
 8017a2a:	4680      	mov	r8, r0
        lv_group_t * g                    = lv_obj_get_group(page);
 8017a2c:	4638      	mov	r0, r7
 8017a2e:	f7f7 fb14 	bl	800f05a <lv_obj_get_group>
        if((style_page->body.opa == LV_OPA_TRANSP) &&
 8017a32:	f898 3008 	ldrb.w	r3, [r8, #8]
        lv_group_t * g                    = lv_obj_get_group(page);
 8017a36:	4606      	mov	r6, r0
        if((style_page->body.opa == LV_OPA_TRANSP) &&
 8017a38:	b9c3      	cbnz	r3, 8017a6c <lv_scrl_design+0x6c>
 8017a3a:	f9b8 300c 	ldrsh.w	r3, [r8, #12]
 8017a3e:	b9ab      	cbnz	r3, 8017a6c <lv_scrl_design+0x6c>
            if(lv_group_get_focused(g) == page) {
 8017a40:	f7f6 faa0 	bl	800df84 <lv_group_get_focused>
 8017a44:	4287      	cmp	r7, r0
 8017a46:	d111      	bne.n	8017a6c <lv_scrl_design+0x6c>
                style_mod = lv_group_mod_style(g, style_scrl_ori);
 8017a48:	4629      	mov	r1, r5
 8017a4a:	4630      	mov	r0, r6
 8017a4c:	f7f6 fa87 	bl	800df5e <lv_group_mod_style>
                if((style_mod->body.opa == LV_OPA_TRANSP) && style_mod->body.border.width == 0) {
 8017a50:	7a03      	ldrb	r3, [r0, #8]
 8017a52:	b953      	cbnz	r3, 8017a6a <lv_scrl_design+0x6a>
 8017a54:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 8017a58:	b93b      	cbnz	r3, 8017a6a <lv_scrl_design+0x6a>
                    style_mod->body.opa          = LV_OPA_50;
 8017a5a:	237f      	movs	r3, #127	; 0x7f
 8017a5c:	7203      	strb	r3, [r0, #8]
                    style_mod->body.border.width = 1;
 8017a5e:	2301      	movs	r3, #1
 8017a60:	8183      	strh	r3, [r0, #12]
                    style_mod                    = lv_group_mod_style(g, style_mod);
 8017a62:	4601      	mov	r1, r0
 8017a64:	4630      	mov	r0, r6
 8017a66:	f7f6 fa7a 	bl	800df5e <lv_group_mod_style>
                scrl->style_p = style_mod; /*Temporally change the style to the activated */
 8017a6a:	62a0      	str	r0, [r4, #40]	; 0x28
        ancestor_design(scrl, mask, mode);
 8017a6c:	4b07      	ldr	r3, [pc, #28]	; (8017a8c <lv_scrl_design+0x8c>)
 8017a6e:	2200      	movs	r2, #0
 8017a70:	681b      	ldr	r3, [r3, #0]
 8017a72:	4649      	mov	r1, r9
 8017a74:	4620      	mov	r0, r4
 8017a76:	4798      	blx	r3
        scrl->style_p = style_scrl_ori; /*Revert the style*/
 8017a78:	62a5      	str	r5, [r4, #40]	; 0x28
}
 8017a7a:	2001      	movs	r0, #1
 8017a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    } else if(mode == LV_DESIGN_DRAW_POST) {
 8017a80:	2a01      	cmp	r2, #1
 8017a82:	d1fa      	bne.n	8017a7a <lv_scrl_design+0x7a>
        ancestor_design(scrl, mask, mode);
 8017a84:	4b01      	ldr	r3, [pc, #4]	; (8017a8c <lv_scrl_design+0x8c>)
 8017a86:	681b      	ldr	r3, [r3, #0]
 8017a88:	4798      	blx	r3
 8017a8a:	e7f6      	b.n	8017a7a <lv_scrl_design+0x7a>
 8017a8c:	2000afd8 	.word	0x2000afd8

08017a90 <lv_page_set_sb_mode>:
{
 8017a90:	b538      	push	{r3, r4, r5, lr}
 8017a92:	460d      	mov	r5, r1
 8017a94:	4604      	mov	r4, r0
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 8017a96:	f7f7 fada 	bl	800f04e <lv_obj_get_ext_attr>
    if(ext->sb.mode == sb_mode) return;
 8017a9a:	7f03      	ldrb	r3, [r0, #28]
 8017a9c:	f3c3 0282 	ubfx	r2, r3, #2, #3
 8017aa0:	42aa      	cmp	r2, r5
 8017aa2:	d021      	beq.n	8017ae8 <lv_page_set_sb_mode+0x58>
    if(sb_mode == LV_SB_MODE_HIDE)
 8017aa4:	2d04      	cmp	r5, #4
 8017aa6:	d112      	bne.n	8017ace <lv_page_set_sb_mode+0x3e>
        ext->sb.mode |= LV_SB_MODE_HIDE; /*Set the hidden flag*/
 8017aa8:	f042 0204 	orr.w	r2, r2, #4
        ext->sb.mode &= (~LV_SB_MODE_HIDE); /*Clear the hidden flag*/
 8017aac:	f362 0384 	bfi	r3, r2, #2, #3
        ext->sb.mode = sb_mode;
 8017ab0:	7703      	strb	r3, [r0, #28]
    ext->sb.hor_draw = 0;
 8017ab2:	7f03      	ldrb	r3, [r0, #28]
    ext->sb.ver_draw = 0;
 8017ab4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8017ab8:	f36f 0341 	bfc	r3, #1, #1
 8017abc:	7703      	strb	r3, [r0, #28]
    lv_page_sb_refresh(page);
 8017abe:	4620      	mov	r0, r4
 8017ac0:	f7ff fdd2 	bl	8017668 <lv_page_sb_refresh>
    lv_obj_invalidate(page);
 8017ac4:	4620      	mov	r0, r4
}
 8017ac6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(page);
 8017aca:	f7f6 bc43 	b.w	800e354 <lv_obj_invalidate>
    else if(sb_mode == LV_SB_MODE_UNHIDE)
 8017ace:	2d05      	cmp	r5, #5
 8017ad0:	d102      	bne.n	8017ad8 <lv_page_set_sb_mode+0x48>
        ext->sb.mode &= (~LV_SB_MODE_HIDE); /*Clear the hidden flag*/
 8017ad2:	f002 0203 	and.w	r2, r2, #3
 8017ad6:	e7e9      	b.n	8017aac <lv_page_set_sb_mode+0x1c>
        if(ext->sb.mode & LV_SB_MODE_HIDE) sb_mode |= LV_SB_MODE_HIDE;
 8017ad8:	0753      	lsls	r3, r2, #29
        ext->sb.mode = sb_mode;
 8017ada:	7f03      	ldrb	r3, [r0, #28]
        if(ext->sb.mode & LV_SB_MODE_HIDE) sb_mode |= LV_SB_MODE_HIDE;
 8017adc:	bf48      	it	mi
 8017ade:	f045 0504 	orrmi.w	r5, r5, #4
        ext->sb.mode = sb_mode;
 8017ae2:	f365 0384 	bfi	r3, r5, #2, #3
 8017ae6:	e7e3      	b.n	8017ab0 <lv_page_set_sb_mode+0x20>
 8017ae8:	bd38      	pop	{r3, r4, r5, pc}

08017aea <lv_page_set_anim_time>:
{
 8017aea:	b510      	push	{r4, lr}
 8017aec:	460c      	mov	r4, r1
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 8017aee:	f7f7 faae 	bl	800f04e <lv_obj_get_ext_attr>
    ext->anim_time      = anim_time;
 8017af2:	8584      	strh	r4, [r0, #44]	; 0x2c
 8017af4:	bd10      	pop	{r4, pc}

08017af6 <lv_page_set_style>:
{
 8017af6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017af8:	4606      	mov	r6, r0
 8017afa:	460f      	mov	r7, r1
 8017afc:	4615      	mov	r5, r2
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 8017afe:	f7f7 faa6 	bl	800f04e <lv_obj_get_ext_attr>
 8017b02:	4604      	mov	r4, r0
    switch(type) {
 8017b04:	2f03      	cmp	r7, #3
 8017b06:	d825      	bhi.n	8017b54 <lv_page_set_style+0x5e>
 8017b08:	e8df f007 	tbb	[pc, r7]
 8017b0c:	230b0802 	.word	0x230b0802
        case LV_PAGE_STYLE_BG: lv_obj_set_style(page, style); break;
 8017b10:	4629      	mov	r1, r5
 8017b12:	4630      	mov	r0, r6
}
 8017b14:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        case LV_PAGE_STYLE_SCRL: lv_obj_set_style(ext->scrl, style); break;
 8017b18:	f7f7 b980 	b.w	800ee1c <lv_obj_set_style>
 8017b1c:	4629      	mov	r1, r5
 8017b1e:	6840      	ldr	r0, [r0, #4]
 8017b20:	e7f8      	b.n	8017b14 <lv_page_set_style+0x1e>
            ext->sb.style = style;
 8017b22:	6085      	str	r5, [r0, #8]
            lv_area_set_height(&ext->sb.hor_area, ext->sb.style->body.padding.inner);
 8017b24:	f9b5 101e 	ldrsh.w	r1, [r5, #30]
 8017b28:	300c      	adds	r0, #12
 8017b2a:	f7fb ff6b 	bl	8013a04 <lv_area_set_height>
            lv_area_set_width(&ext->sb.ver_area, ext->sb.style->body.padding.inner);
 8017b2e:	68a3      	ldr	r3, [r4, #8]
 8017b30:	f104 0014 	add.w	r0, r4, #20
 8017b34:	f9b3 101e 	ldrsh.w	r1, [r3, #30]
 8017b38:	f7fb ff5f 	bl	80139fa <lv_area_set_width>
            lv_page_sb_refresh(page);
 8017b3c:	4630      	mov	r0, r6
 8017b3e:	f7ff fd93 	bl	8017668 <lv_page_sb_refresh>
            lv_obj_refresh_ext_draw_pad(page);
 8017b42:	4630      	mov	r0, r6
 8017b44:	f7f7 f8cf 	bl	800ece6 <lv_obj_refresh_ext_draw_pad>
            lv_obj_invalidate(page);
 8017b48:	4630      	mov	r0, r6
}
 8017b4a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            lv_obj_invalidate(page);
 8017b4e:	f7f6 bc01 	b.w	800e354 <lv_obj_invalidate>
        case LV_PAGE_STYLE_EDGE_FLASH: ext->edge_flash.style = style; break;
 8017b52:	6245      	str	r5, [r0, #36]	; 0x24
 8017b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017b56 <lv_page_get_scrl>:
{
 8017b56:	b508      	push	{r3, lr}
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 8017b58:	f7f7 fa79 	bl	800f04e <lv_obj_get_ext_attr>
}
 8017b5c:	6840      	ldr	r0, [r0, #4]
 8017b5e:	bd08      	pop	{r3, pc}

08017b60 <lv_page_get_anim_time>:
{
 8017b60:	b508      	push	{r3, lr}
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 8017b62:	f7f7 fa74 	bl	800f04e <lv_obj_get_ext_attr>
}
 8017b66:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
 8017b68:	bd08      	pop	{r3, pc}

08017b6a <lv_page_get_style>:
{
 8017b6a:	b538      	push	{r3, r4, r5, lr}
 8017b6c:	460c      	mov	r4, r1
 8017b6e:	4605      	mov	r5, r0
    lv_page_ext_t * ext      = lv_obj_get_ext_attr(page);
 8017b70:	f7f7 fa6d 	bl	800f04e <lv_obj_get_ext_attr>
    switch(type) {
 8017b74:	2c03      	cmp	r4, #3
 8017b76:	d80e      	bhi.n	8017b96 <lv_page_get_style+0x2c>
 8017b78:	e8df f004 	tbb	[pc, r4]
 8017b7c:	0b090702 	.word	0x0b090702
        case LV_PAGE_STYLE_BG: style = lv_obj_get_style(page); break;
 8017b80:	4628      	mov	r0, r5
}
 8017b82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        case LV_PAGE_STYLE_SCRL: style = lv_obj_get_style(ext->scrl); break;
 8017b86:	f7f7 b977 	b.w	800ee78 <lv_obj_get_style>
 8017b8a:	6840      	ldr	r0, [r0, #4]
 8017b8c:	e7f9      	b.n	8017b82 <lv_page_get_style+0x18>
        case LV_PAGE_STYLE_SB: style = ext->sb.style; break;
 8017b8e:	6880      	ldr	r0, [r0, #8]
 8017b90:	bd38      	pop	{r3, r4, r5, pc}
        case LV_PAGE_STYLE_EDGE_FLASH: style = ext->edge_flash.style; break;
 8017b92:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8017b94:	bd38      	pop	{r3, r4, r5, pc}
        default: style = NULL; break;
 8017b96:	2000      	movs	r0, #0
}
 8017b98:	bd38      	pop	{r3, r4, r5, pc}
	...

08017b9c <lv_page_create>:
{
 8017b9c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8017ba0:	4681      	mov	r9, r0
 8017ba2:	460e      	mov	r6, r1
    lv_obj_t * new_page = lv_cont_create(par, copy);
 8017ba4:	f7fd fb60 	bl	8015268 <lv_cont_create>
    lv_mem_assert(new_page);
 8017ba8:	4604      	mov	r4, r0
 8017baa:	b900      	cbnz	r0, 8017bae <lv_page_create+0x12>
 8017bac:	e7fe      	b.n	8017bac <lv_page_create+0x10>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_page);
 8017bae:	4d6c      	ldr	r5, [pc, #432]	; (8017d60 <lv_page_create+0x1c4>)
 8017bb0:	682b      	ldr	r3, [r5, #0]
 8017bb2:	b913      	cbnz	r3, 8017bba <lv_page_create+0x1e>
 8017bb4:	f7f7 fa47 	bl	800f046 <lv_obj_get_signal_cb>
 8017bb8:	6028      	str	r0, [r5, #0]
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(new_page);
 8017bba:	4d6a      	ldr	r5, [pc, #424]	; (8017d64 <lv_page_create+0x1c8>)
 8017bbc:	682b      	ldr	r3, [r5, #0]
 8017bbe:	b91b      	cbnz	r3, 8017bc8 <lv_page_create+0x2c>
 8017bc0:	4620      	mov	r0, r4
 8017bc2:	f7f7 fa42 	bl	800f04a <lv_obj_get_design_cb>
 8017bc6:	6028      	str	r0, [r5, #0]
    lv_page_ext_t * ext = lv_obj_allocate_ext_attr(new_page, sizeof(lv_page_ext_t));
 8017bc8:	2130      	movs	r1, #48	; 0x30
 8017bca:	4620      	mov	r0, r4
 8017bcc:	f7f6 fb94 	bl	800e2f8 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 8017bd0:	4605      	mov	r5, r0
 8017bd2:	b900      	cbnz	r0, 8017bd6 <lv_page_create+0x3a>
 8017bd4:	e7fe      	b.n	8017bd4 <lv_page_create+0x38>
    ext->edge_flash.enabled   = 0;
 8017bd6:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
    ext->sb.hor_draw = 0;
 8017bda:	7f03      	ldrb	r3, [r0, #28]
    ext->sb.style    = &lv_style_pretty;
 8017bdc:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8017d88 <lv_page_create+0x1ec>
 8017be0:	f8c0 8008 	str.w	r8, [r0, #8]
    ext->scrl        = NULL;
 8017be4:	2700      	movs	r7, #0
    ext->edge_flash.right_ip  = 0;
 8017be6:	f002 02e8 	and.w	r2, r2, #232	; 0xe8
 8017bea:	f367 02c3 	bfi	r2, r7, #3, #1
    ext->sb.mode     = LV_SB_MODE_AUTO;
 8017bee:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8017bf2:	f04f 0a03 	mov.w	sl, #3
    ext->edge_flash.right_ip  = 0;
 8017bf6:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
    ext->scroll_prop    = 0;
 8017bfa:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
    ext->scrl        = NULL;
 8017bfe:	6047      	str	r7, [r0, #4]
    ext->sb.mode     = LV_SB_MODE_AUTO;
 8017c00:	f36a 0384 	bfi	r3, sl, #2, #3
 8017c04:	7703      	strb	r3, [r0, #28]
    ext->scroll_prop_ip = 0;
 8017c06:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    ext->edge_flash.style     = &lv_style_plain_color;
 8017c0a:	4b57      	ldr	r3, [pc, #348]	; (8017d68 <lv_page_create+0x1cc>)
 8017c0c:	6243      	str	r3, [r0, #36]	; 0x24
    ext->scroll_prop_ip = 0;
 8017c0e:	f367 0241 	bfi	r2, r7, #1, #1
    ext->anim_time            = LV_PAGE_DEF_ANIM_TIME;
 8017c12:	f44f 73c8 	mov.w	r3, #400	; 0x190
    ext->edge_flash.state     = 0;
 8017c16:	8407      	strh	r7, [r0, #32]
    ext->anim_time            = LV_PAGE_DEF_ANIM_TIME;
 8017c18:	8583      	strh	r3, [r0, #44]	; 0x2c
    ext->scroll_prop_ip = 0;
 8017c1a:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
    if(copy == NULL) {
 8017c1e:	2e00      	cmp	r6, #0
 8017c20:	d164      	bne.n	8017cec <lv_page_create+0x150>
        ext->scrl = lv_cont_create(new_page, NULL);
 8017c22:	4631      	mov	r1, r6
 8017c24:	4620      	mov	r0, r4
 8017c26:	f7fd fb1f 	bl	8015268 <lv_cont_create>
        lv_obj_set_signal_cb(ext->scrl, lv_page_scrollable_signal);
 8017c2a:	4950      	ldr	r1, [pc, #320]	; (8017d6c <lv_page_create+0x1d0>)
        ext->scrl = lv_cont_create(new_page, NULL);
 8017c2c:	6068      	str	r0, [r5, #4]
        lv_obj_set_signal_cb(ext->scrl, lv_page_scrollable_signal);
 8017c2e:	f7f6 fb5f 	bl	800e2f0 <lv_obj_set_signal_cb>
        lv_obj_set_design_cb(ext->scrl, lv_scrl_design);
 8017c32:	6868      	ldr	r0, [r5, #4]
 8017c34:	494e      	ldr	r1, [pc, #312]	; (8017d70 <lv_page_create+0x1d4>)
 8017c36:	f7f6 fb5d 	bl	800e2f4 <lv_obj_set_design_cb>
        lv_obj_set_drag(ext->scrl, true);
 8017c3a:	6868      	ldr	r0, [r5, #4]
 8017c3c:	2101      	movs	r1, #1
 8017c3e:	f7f6 fa8a 	bl	800e156 <lv_obj_set_drag>
        lv_obj_set_drag_throw(ext->scrl, true);
 8017c42:	6868      	ldr	r0, [r5, #4]
 8017c44:	2101      	movs	r1, #1
 8017c46:	f7f6 fa94 	bl	800e172 <lv_obj_set_drag_throw>
        lv_obj_set_protect(ext->scrl, LV_PROTECT_PARENT | LV_PROTECT_PRESS_LOST);
 8017c4a:	6868      	ldr	r0, [r5, #4]
 8017c4c:	2112      	movs	r1, #18
 8017c4e:	f7f6 fa97 	bl	800e180 <lv_obj_set_protect>
        lv_cont_set_fit4(ext->scrl, LV_FIT_FILL, LV_FIT_FILL, LV_FIT_FILL, LV_FIT_FILL);
 8017c52:	f8cd a000 	str.w	sl, [sp]
 8017c56:	4653      	mov	r3, sl
 8017c58:	4652      	mov	r2, sl
 8017c5a:	6868      	ldr	r0, [r5, #4]
 8017c5c:	4651      	mov	r1, sl
 8017c5e:	f7fd fb7a 	bl	8015356 <lv_cont_set_fit4>
        lv_obj_set_event_cb(ext->scrl, scrl_def_event_cb); /*Propagate some event to the background
 8017c62:	6868      	ldr	r0, [r5, #4]
 8017c64:	4943      	ldr	r1, [pc, #268]	; (8017d74 <lv_page_create+0x1d8>)
 8017c66:	f7f6 fa98 	bl	800e19a <lv_obj_set_event_cb>
        lv_obj_set_signal_cb(new_page, lv_page_signal);
 8017c6a:	4943      	ldr	r1, [pc, #268]	; (8017d78 <lv_page_create+0x1dc>)
 8017c6c:	4620      	mov	r0, r4
 8017c6e:	f7f6 fb3f 	bl	800e2f0 <lv_obj_set_signal_cb>
        lv_obj_set_design_cb(new_page, lv_page_design);
 8017c72:	4942      	ldr	r1, [pc, #264]	; (8017d7c <lv_page_create+0x1e0>)
 8017c74:	4620      	mov	r0, r4
 8017c76:	f7f6 fb3d 	bl	800e2f4 <lv_obj_set_design_cb>
        lv_page_set_sb_mode(new_page, ext->sb.mode);
 8017c7a:	7f29      	ldrb	r1, [r5, #28]
 8017c7c:	4620      	mov	r0, r4
 8017c7e:	f3c1 0182 	ubfx	r1, r1, #2, #3
 8017c82:	f7ff ff05 	bl	8017a90 <lv_page_set_sb_mode>
        lv_theme_t * th = lv_theme_get_current();
 8017c86:	f001 f9ad 	bl	8018fe4 <lv_theme_get_current>
        if(th) {
 8017c8a:	4605      	mov	r5, r0
 8017c8c:	b310      	cbz	r0, 8017cd4 <lv_page_create+0x138>
            if(par == NULL) { /*Different styles if it is screen*/
 8017c8e:	f1b9 0f00 	cmp.w	r9, #0
 8017c92:	d116      	bne.n	8017cc2 <lv_page_create+0x126>
                lv_page_set_style(new_page, LV_PAGE_STYLE_BG, th->style.bg);
 8017c94:	6842      	ldr	r2, [r0, #4]
 8017c96:	4649      	mov	r1, r9
 8017c98:	4620      	mov	r0, r4
 8017c9a:	f7ff ff2c 	bl	8017af6 <lv_page_set_style>
                lv_page_set_style(new_page, LV_PAGE_STYLE_SCRL, &lv_style_transp);
 8017c9e:	4a38      	ldr	r2, [pc, #224]	; (8017d80 <lv_page_create+0x1e4>)
                lv_page_set_style(new_page, LV_PAGE_STYLE_SCRL, th->style.page.scrl);
 8017ca0:	2101      	movs	r1, #1
 8017ca2:	4620      	mov	r0, r4
 8017ca4:	f7ff ff27 	bl	8017af6 <lv_page_set_style>
            lv_page_set_style(new_page, LV_PAGE_STYLE_SB, th->style.page.sb);
 8017ca8:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
            lv_page_set_style(new_page, LV_PAGE_STYLE_SB, &lv_style_pretty_color);
 8017cac:	2102      	movs	r1, #2
 8017cae:	4620      	mov	r0, r4
 8017cb0:	f7ff ff21 	bl	8017af6 <lv_page_set_style>
    lv_page_sb_refresh(new_page);
 8017cb4:	4620      	mov	r0, r4
 8017cb6:	f7ff fcd7 	bl	8017668 <lv_page_sb_refresh>
}
 8017cba:	4620      	mov	r0, r4
 8017cbc:	b002      	add	sp, #8
 8017cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                lv_page_set_style(new_page, LV_PAGE_STYLE_BG, th->style.page.bg);
 8017cc2:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
 8017cc6:	4631      	mov	r1, r6
 8017cc8:	4620      	mov	r0, r4
 8017cca:	f7ff ff14 	bl	8017af6 <lv_page_set_style>
                lv_page_set_style(new_page, LV_PAGE_STYLE_SCRL, th->style.page.scrl);
 8017cce:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
 8017cd2:	e7e5      	b.n	8017ca0 <lv_page_create+0x104>
            lv_page_set_style(new_page, LV_PAGE_STYLE_BG, &lv_style_pretty_color);
 8017cd4:	4a2b      	ldr	r2, [pc, #172]	; (8017d84 <lv_page_create+0x1e8>)
 8017cd6:	4631      	mov	r1, r6
 8017cd8:	4620      	mov	r0, r4
 8017cda:	f7ff ff0c 	bl	8017af6 <lv_page_set_style>
            lv_page_set_style(new_page, LV_PAGE_STYLE_SCRL, &lv_style_pretty);
 8017cde:	4642      	mov	r2, r8
 8017ce0:	2101      	movs	r1, #1
 8017ce2:	4620      	mov	r0, r4
 8017ce4:	f7ff ff07 	bl	8017af6 <lv_page_set_style>
            lv_page_set_style(new_page, LV_PAGE_STYLE_SB, &lv_style_pretty_color);
 8017ce8:	4a26      	ldr	r2, [pc, #152]	; (8017d84 <lv_page_create+0x1e8>)
 8017cea:	e7df      	b.n	8017cac <lv_page_create+0x110>
        lv_page_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8017cec:	4630      	mov	r0, r6
 8017cee:	f7f7 f9ae 	bl	800f04e <lv_obj_get_ext_attr>
 8017cf2:	4680      	mov	r8, r0
        ext->scrl                = lv_cont_create(new_page, copy_ext->scrl);
 8017cf4:	6841      	ldr	r1, [r0, #4]
 8017cf6:	4620      	mov	r0, r4
 8017cf8:	f7fd fab6 	bl	8015268 <lv_cont_create>
        lv_obj_set_signal_cb(ext->scrl, lv_page_scrollable_signal);
 8017cfc:	491b      	ldr	r1, [pc, #108]	; (8017d6c <lv_page_create+0x1d0>)
        ext->scrl                = lv_cont_create(new_page, copy_ext->scrl);
 8017cfe:	6068      	str	r0, [r5, #4]
        lv_obj_set_signal_cb(ext->scrl, lv_page_scrollable_signal);
 8017d00:	f7f6 faf6 	bl	800e2f0 <lv_obj_set_signal_cb>
        lv_page_set_sb_mode(new_page, copy_ext->sb.mode);
 8017d04:	f898 101c 	ldrb.w	r1, [r8, #28]
 8017d08:	4620      	mov	r0, r4
 8017d0a:	f3c1 0182 	ubfx	r1, r1, #2, #3
 8017d0e:	f7ff febf 	bl	8017a90 <lv_page_set_sb_mode>
        lv_page_set_style(new_page, LV_PAGE_STYLE_BG, lv_page_get_style(copy, LV_PAGE_STYLE_BG));
 8017d12:	4639      	mov	r1, r7
 8017d14:	4630      	mov	r0, r6
 8017d16:	f7ff ff28 	bl	8017b6a <lv_page_get_style>
 8017d1a:	4639      	mov	r1, r7
 8017d1c:	4602      	mov	r2, r0
 8017d1e:	4620      	mov	r0, r4
 8017d20:	f7ff fee9 	bl	8017af6 <lv_page_set_style>
        lv_page_set_style(new_page, LV_PAGE_STYLE_SCRL, lv_page_get_style(copy, LV_PAGE_STYLE_SCRL));
 8017d24:	2101      	movs	r1, #1
 8017d26:	4630      	mov	r0, r6
 8017d28:	f7ff ff1f 	bl	8017b6a <lv_page_get_style>
 8017d2c:	2101      	movs	r1, #1
 8017d2e:	4602      	mov	r2, r0
 8017d30:	4620      	mov	r0, r4
 8017d32:	f7ff fee0 	bl	8017af6 <lv_page_set_style>
    lv_page_ext_t * ext      = lv_obj_get_ext_attr(page);
 8017d36:	4630      	mov	r0, r6
 8017d38:	f7f7 f989 	bl	800f04e <lv_obj_get_ext_attr>
        lv_page_set_style(new_page, LV_PAGE_STYLE_SB, lv_page_get_style(copy, LV_PAGE_STYLE_SB));
 8017d3c:	2102      	movs	r1, #2
 8017d3e:	6882      	ldr	r2, [r0, #8]
 8017d40:	4620      	mov	r0, r4
 8017d42:	f7ff fed8 	bl	8017af6 <lv_page_set_style>
        lv_obj_set_signal_cb(new_page, lv_page_signal);
 8017d46:	4620      	mov	r0, r4
 8017d48:	490b      	ldr	r1, [pc, #44]	; (8017d78 <lv_page_create+0x1dc>)
 8017d4a:	f7f6 fad1 	bl	800e2f0 <lv_obj_set_signal_cb>
        lv_obj_set_design_cb(new_page, lv_page_design);
 8017d4e:	4620      	mov	r0, r4
 8017d50:	490a      	ldr	r1, [pc, #40]	; (8017d7c <lv_page_create+0x1e0>)
 8017d52:	f7f6 facf 	bl	800e2f4 <lv_obj_set_design_cb>
        lv_obj_refresh_style(new_page);
 8017d56:	4620      	mov	r0, r4
 8017d58:	f7f6 ffb7 	bl	800ecca <lv_obj_refresh_style>
 8017d5c:	e7aa      	b.n	8017cb4 <lv_page_create+0x118>
 8017d5e:	bf00      	nop
 8017d60:	2000afdc 	.word	0x2000afdc
 8017d64:	2000afd8 	.word	0x2000afd8
 8017d68:	2000c514 	.word	0x2000c514
 8017d6c:	080182f5 	.word	0x080182f5
 8017d70:	08017a01 	.word	0x08017a01
 8017d74:	08017647 	.word	0x08017647
 8017d78:	08018051 	.word	0x08018051
 8017d7c:	08017d8d 	.word	0x08017d8d
 8017d80:	2000c280 	.word	0x2000c280
 8017d84:	2000c244 	.word	0x2000c244
 8017d88:	2000c334 	.word	0x2000c334

08017d8c <lv_page_design>:
{
 8017d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(mode == LV_DESIGN_COVER_CHK) {
 8017d8e:	2a02      	cmp	r2, #2
{
 8017d90:	b0a3      	sub	sp, #140	; 0x8c
 8017d92:	4604      	mov	r4, r0
 8017d94:	460f      	mov	r7, r1
 8017d96:	4615      	mov	r5, r2
    if(mode == LV_DESIGN_COVER_CHK) {
 8017d98:	d104      	bne.n	8017da4 <lv_page_design+0x18>
        return ancestor_design(page, mask, mode);
 8017d9a:	4b80      	ldr	r3, [pc, #512]	; (8017f9c <lv_page_design+0x210>)
 8017d9c:	681b      	ldr	r3, [r3, #0]
 8017d9e:	4798      	blx	r3
}
 8017da0:	b023      	add	sp, #140	; 0x8c
 8017da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    const lv_style_t * style = lv_page_get_style(page, LV_PAGE_STYLE_BG);
 8017da4:	2100      	movs	r1, #0
 8017da6:	f7ff fee0 	bl	8017b6a <lv_page_get_style>
    lv_style_copy(&style_tmp, style);
 8017daa:	4601      	mov	r1, r0
 8017dac:	a804      	add	r0, sp, #16
 8017dae:	f7f7 fc91 	bl	800f6d4 <lv_style_copy>
    if(mode == LV_DESIGN_DRAW_MAIN) {
 8017db2:	b96d      	cbnz	r5, 8017dd0 <lv_page_design+0x44>
        lv_draw_rect(&page->coords, mask, &style_tmp, lv_obj_get_opa_scale(page));
 8017db4:	4620      	mov	r0, r4
        style_tmp.body.border.width = 0;
 8017db6:	f8ad 501c 	strh.w	r5, [sp, #28]
        lv_draw_rect(&page->coords, mask, &style_tmp, lv_obj_get_opa_scale(page));
 8017dba:	f7f7 f8e0 	bl	800ef7e <lv_obj_get_opa_scale>
 8017dbe:	aa04      	add	r2, sp, #16
 8017dc0:	4603      	mov	r3, r0
 8017dc2:	4639      	mov	r1, r7
 8017dc4:	f104 0010 	add.w	r0, r4, #16
                lv_draw_rect(&flash_area, mask, &flash_style, lv_obj_get_opa_scale(page));
 8017dc8:	f7f9 f866 	bl	8010e98 <lv_draw_rect>
    return true;
 8017dcc:	2001      	movs	r0, #1
 8017dce:	e7e7      	b.n	8017da0 <lv_page_design+0x14>
    } else if(mode == LV_DESIGN_DRAW_POST) {
 8017dd0:	2d01      	cmp	r5, #1
 8017dd2:	d1fb      	bne.n	8017dcc <lv_page_design+0x40>
        style_tmp.body.shadow.width = 0;
 8017dd4:	2300      	movs	r3, #0
        lv_draw_rect(&page->coords, mask, &style_tmp, lv_obj_get_opa_scale(page));
 8017dd6:	4620      	mov	r0, r4
        style_tmp.body.shadow.width = 0;
 8017dd8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
        style_tmp.body.opa          = LV_OPA_TRANSP;
 8017ddc:	f88d 3018 	strb.w	r3, [sp, #24]
        lv_draw_rect(&page->coords, mask, &style_tmp, lv_obj_get_opa_scale(page));
 8017de0:	f7f7 f8cd 	bl	800ef7e <lv_obj_get_opa_scale>
 8017de4:	aa04      	add	r2, sp, #16
 8017de6:	4603      	mov	r3, r0
 8017de8:	4639      	mov	r1, r7
 8017dea:	f104 0010 	add.w	r0, r4, #16
 8017dee:	f7f9 f853 	bl	8010e98 <lv_draw_rect>
        lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 8017df2:	4620      	mov	r0, r4
 8017df4:	f7f7 f92b 	bl	800f04e <lv_obj_get_ext_attr>
        if(ext->sb.hor_draw && (ext->sb.mode & LV_SB_MODE_HIDE) == 0) {
 8017df8:	7f03      	ldrb	r3, [r0, #28]
 8017dfa:	07da      	lsls	r2, r3, #31
        lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 8017dfc:	4606      	mov	r6, r0
        if(ext->sb.hor_draw && (ext->sb.mode & LV_SB_MODE_HIDE) == 0) {
 8017dfe:	d528      	bpl.n	8017e52 <lv_page_design+0xc6>
 8017e00:	f3c3 0382 	ubfx	r3, r3, #2, #3
 8017e04:	075b      	lsls	r3, r3, #29
 8017e06:	d424      	bmi.n	8017e52 <lv_page_design+0xc6>
            lv_area_copy(&sb_area, &ext->sb.hor_area);
 8017e08:	f100 010c 	add.w	r1, r0, #12
 8017e0c:	4668      	mov	r0, sp
 8017e0e:	f7ff fc15 	bl	801763c <lv_area_copy>
            sb_area.x1 += page->coords.x1;
 8017e12:	8a22      	ldrh	r2, [r4, #16]
 8017e14:	f8bd 3000 	ldrh.w	r3, [sp]
            sb_area.y1 += page->coords.y1;
 8017e18:	f8bd 1002 	ldrh.w	r1, [sp, #2]
            lv_draw_rect(&sb_area, mask, ext->sb.style, lv_obj_get_opa_scale(page));
 8017e1c:	68b5      	ldr	r5, [r6, #8]
            sb_area.x1 += page->coords.x1;
 8017e1e:	4413      	add	r3, r2
 8017e20:	f8ad 3000 	strh.w	r3, [sp]
            sb_area.y1 += page->coords.y1;
 8017e24:	8a63      	ldrh	r3, [r4, #18]
 8017e26:	4419      	add	r1, r3
 8017e28:	f8ad 1002 	strh.w	r1, [sp, #2]
            sb_area.x2 += page->coords.x1;
 8017e2c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8017e30:	440a      	add	r2, r1
 8017e32:	f8ad 2004 	strh.w	r2, [sp, #4]
            sb_area.y2 += page->coords.y1;
 8017e36:	f8bd 2006 	ldrh.w	r2, [sp, #6]
            lv_draw_rect(&sb_area, mask, ext->sb.style, lv_obj_get_opa_scale(page));
 8017e3a:	4620      	mov	r0, r4
            sb_area.y2 += page->coords.y1;
 8017e3c:	4413      	add	r3, r2
 8017e3e:	f8ad 3006 	strh.w	r3, [sp, #6]
            lv_draw_rect(&sb_area, mask, ext->sb.style, lv_obj_get_opa_scale(page));
 8017e42:	f7f7 f89c 	bl	800ef7e <lv_obj_get_opa_scale>
 8017e46:	462a      	mov	r2, r5
 8017e48:	4603      	mov	r3, r0
 8017e4a:	4639      	mov	r1, r7
 8017e4c:	4668      	mov	r0, sp
 8017e4e:	f7f9 f823 	bl	8010e98 <lv_draw_rect>
        if(ext->sb.ver_draw && (ext->sb.mode & LV_SB_MODE_HIDE) == 0) {
 8017e52:	7f33      	ldrb	r3, [r6, #28]
 8017e54:	079d      	lsls	r5, r3, #30
 8017e56:	d528      	bpl.n	8017eaa <lv_page_design+0x11e>
 8017e58:	f3c3 0382 	ubfx	r3, r3, #2, #3
 8017e5c:	0758      	lsls	r0, r3, #29
 8017e5e:	d424      	bmi.n	8017eaa <lv_page_design+0x11e>
            lv_area_copy(&sb_area, &ext->sb.ver_area);
 8017e60:	f106 0114 	add.w	r1, r6, #20
 8017e64:	4668      	mov	r0, sp
 8017e66:	f7ff fbe9 	bl	801763c <lv_area_copy>
            sb_area.x1 += page->coords.x1;
 8017e6a:	8a22      	ldrh	r2, [r4, #16]
 8017e6c:	f8bd 3000 	ldrh.w	r3, [sp]
            sb_area.y1 += page->coords.y1;
 8017e70:	f8bd 1002 	ldrh.w	r1, [sp, #2]
            lv_draw_rect(&sb_area, mask, ext->sb.style, lv_obj_get_opa_scale(page));
 8017e74:	68b5      	ldr	r5, [r6, #8]
            sb_area.x1 += page->coords.x1;
 8017e76:	4413      	add	r3, r2
 8017e78:	f8ad 3000 	strh.w	r3, [sp]
            sb_area.y1 += page->coords.y1;
 8017e7c:	8a63      	ldrh	r3, [r4, #18]
 8017e7e:	4419      	add	r1, r3
 8017e80:	f8ad 1002 	strh.w	r1, [sp, #2]
            sb_area.x2 += page->coords.x1;
 8017e84:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8017e88:	440a      	add	r2, r1
 8017e8a:	f8ad 2004 	strh.w	r2, [sp, #4]
            sb_area.y2 += page->coords.y1;
 8017e8e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
            lv_draw_rect(&sb_area, mask, ext->sb.style, lv_obj_get_opa_scale(page));
 8017e92:	4620      	mov	r0, r4
            sb_area.y2 += page->coords.y1;
 8017e94:	4413      	add	r3, r2
 8017e96:	f8ad 3006 	strh.w	r3, [sp, #6]
            lv_draw_rect(&sb_area, mask, ext->sb.style, lv_obj_get_opa_scale(page));
 8017e9a:	f7f7 f870 	bl	800ef7e <lv_obj_get_opa_scale>
 8017e9e:	462a      	mov	r2, r5
 8017ea0:	4603      	mov	r3, r0
 8017ea2:	4639      	mov	r1, r7
 8017ea4:	4668      	mov	r0, sp
 8017ea6:	f7f8 fff7 	bl	8010e98 <lv_draw_rect>
            lv_coord_t page_w = lv_obj_get_width(page);
 8017eaa:	4620      	mov	r0, r4
 8017eac:	f7f6 ffd2 	bl	800ee54 <lv_obj_get_width>
 8017eb0:	4605      	mov	r5, r0
            lv_coord_t page_h = lv_obj_get_height(page);
 8017eb2:	4620      	mov	r0, r4
 8017eb4:	f7f6 ffd4 	bl	800ee60 <lv_obj_get_height>
            if(ext->edge_flash.top_ip) {
 8017eb8:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 8017ebc:	0799      	lsls	r1, r3, #30
 8017ebe:	d533      	bpl.n	8017f28 <lv_page_design+0x19c>
                flash_area.x1 = page->coords.x1 - page_w;
 8017ec0:	8a22      	ldrh	r2, [r4, #16]
 8017ec2:	8c31      	ldrh	r1, [r6, #32]
 8017ec4:	b2a8      	uxth	r0, r5
 8017ec6:	1a12      	subs	r2, r2, r0
 8017ec8:	f8ad 2008 	strh.w	r2, [sp, #8]
                flash_area.x2 = page->coords.x2 + page_w;
 8017ecc:	8aa2      	ldrh	r2, [r4, #20]
 8017ece:	4402      	add	r2, r0
 8017ed0:	f8ad 200c 	strh.w	r2, [sp, #12]
 8017ed4:	8a62      	ldrh	r2, [r4, #18]
 8017ed6:	440a      	add	r2, r1
                flash_area.y1 = page->coords.y1 - 3 * page_w + ext->edge_flash.state;
 8017ed8:	ebc0 3180 	rsb	r1, r0, r0, lsl #14
 8017edc:	b292      	uxth	r2, r2
 8017ede:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8017ee2:	4410      	add	r0, r2
 8017ee4:	f8ad 000a 	strh.w	r0, [sp, #10]
                flash_area.y2 = page->coords.y1 + ext->edge_flash.state;
 8017ee8:	f8ad 200e 	strh.w	r2, [sp, #14]
            if(ext->edge_flash.left_ip || ext->edge_flash.right_ip || ext->edge_flash.top_ip ||
 8017eec:	f013 0f1e 	tst.w	r3, #30
 8017ef0:	f43f af6c 	beq.w	8017dcc <lv_page_design+0x40>
                lv_style_copy(&flash_style, ext->edge_flash.style);
 8017ef4:	6a71      	ldr	r1, [r6, #36]	; 0x24
 8017ef6:	a813      	add	r0, sp, #76	; 0x4c
 8017ef8:	f7f7 fbec 	bl	800f6d4 <lv_style_copy>
                flash_style.body.radius = LV_RADIUS_CIRCLE;
 8017efc:	f647 4318 	movw	r3, #31768	; 0x7c18
                uint32_t opa            = (flash_style.body.opa * ext->edge_flash.state) / LV_PAGE_END_FLASH_SIZE;
 8017f00:	8c32      	ldrh	r2, [r6, #32]
                flash_style.body.radius = LV_RADIUS_CIRCLE;
 8017f02:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
                uint32_t opa            = (flash_style.body.opa * ext->edge_flash.state) / LV_PAGE_END_FLASH_SIZE;
 8017f06:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
                lv_draw_rect(&flash_area, mask, &flash_style, lv_obj_get_opa_scale(page));
 8017f0a:	4620      	mov	r0, r4
                uint32_t opa            = (flash_style.body.opa * ext->edge_flash.state) / LV_PAGE_END_FLASH_SIZE;
 8017f0c:	fb13 f302 	smulbb	r3, r3, r2
 8017f10:	2206      	movs	r2, #6
 8017f12:	fb93 f3f2 	sdiv	r3, r3, r2
                flash_style.body.opa    = opa;
 8017f16:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
                lv_draw_rect(&flash_area, mask, &flash_style, lv_obj_get_opa_scale(page));
 8017f1a:	f7f7 f830 	bl	800ef7e <lv_obj_get_opa_scale>
 8017f1e:	aa13      	add	r2, sp, #76	; 0x4c
 8017f20:	4603      	mov	r3, r0
 8017f22:	4639      	mov	r1, r7
 8017f24:	a802      	add	r0, sp, #8
 8017f26:	e74f      	b.n	8017dc8 <lv_page_design+0x3c>
            } else if(ext->edge_flash.bottom_ip) {
 8017f28:	075a      	lsls	r2, r3, #29
 8017f2a:	d514      	bpl.n	8017f56 <lv_page_design+0x1ca>
                flash_area.x1 = page->coords.x1 - page_w;
 8017f2c:	8a22      	ldrh	r2, [r4, #16]
                flash_area.y1 = page->coords.y2 - ext->edge_flash.state;
 8017f2e:	8c31      	ldrh	r1, [r6, #32]
                flash_area.x1 = page->coords.x1 - page_w;
 8017f30:	b2a8      	uxth	r0, r5
 8017f32:	1a12      	subs	r2, r2, r0
 8017f34:	f8ad 2008 	strh.w	r2, [sp, #8]
                flash_area.x2 = page->coords.x2 + page_w;
 8017f38:	8aa2      	ldrh	r2, [r4, #20]
 8017f3a:	4402      	add	r2, r0
 8017f3c:	f8ad 200c 	strh.w	r2, [sp, #12]
                flash_area.y1 = page->coords.y2 - ext->edge_flash.state;
 8017f40:	8ae2      	ldrh	r2, [r4, #22]
 8017f42:	1a52      	subs	r2, r2, r1
 8017f44:	b292      	uxth	r2, r2
 8017f46:	f8ad 200a 	strh.w	r2, [sp, #10]
                flash_area.y2 = page->coords.y2 + 3 * page_w - ext->edge_flash.state;
 8017f4a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
                flash_area.y2 = page->coords.y2 + page_h;
 8017f4e:	4410      	add	r0, r2
 8017f50:	f8ad 000e 	strh.w	r0, [sp, #14]
 8017f54:	e7ca      	b.n	8017eec <lv_page_design+0x160>
            } else if(ext->edge_flash.right_ip) {
 8017f56:	0719      	lsls	r1, r3, #28
 8017f58:	d511      	bpl.n	8017f7e <lv_page_design+0x1f2>
                flash_area.x1 = page->coords.x2 - ext->edge_flash.state;
 8017f5a:	8c31      	ldrh	r1, [r6, #32]
 8017f5c:	8aa2      	ldrh	r2, [r4, #20]
                flash_area.x2 = page->coords.x2 + 3 * page_h - ext->edge_flash.state;
 8017f5e:	b280      	uxth	r0, r0
                flash_area.x1 = page->coords.x2 - ext->edge_flash.state;
 8017f60:	1a52      	subs	r2, r2, r1
 8017f62:	b292      	uxth	r2, r2
                flash_area.x2 = page->coords.x2 + 3 * page_h - ext->edge_flash.state;
 8017f64:	eb00 0140 	add.w	r1, r0, r0, lsl #1
                flash_area.x1 = page->coords.x2 - ext->edge_flash.state;
 8017f68:	f8ad 2008 	strh.w	r2, [sp, #8]
                flash_area.x2 = page->coords.x2 + 3 * page_h - ext->edge_flash.state;
 8017f6c:	440a      	add	r2, r1
                flash_area.x2 = page->coords.x1 + ext->edge_flash.state;
 8017f6e:	f8ad 200c 	strh.w	r2, [sp, #12]
                flash_area.y1 = page->coords.y1 - page_h;
 8017f72:	8a62      	ldrh	r2, [r4, #18]
 8017f74:	1a12      	subs	r2, r2, r0
 8017f76:	f8ad 200a 	strh.w	r2, [sp, #10]
                flash_area.y2 = page->coords.y2 + page_h;
 8017f7a:	8ae2      	ldrh	r2, [r4, #22]
 8017f7c:	e7e7      	b.n	8017f4e <lv_page_design+0x1c2>
            } else if(ext->edge_flash.left_ip) {
 8017f7e:	06da      	lsls	r2, r3, #27
 8017f80:	d5b4      	bpl.n	8017eec <lv_page_design+0x160>
 8017f82:	8c31      	ldrh	r1, [r6, #32]
 8017f84:	8a22      	ldrh	r2, [r4, #16]
                flash_area.x1 = page->coords.x1 - 3 * page_h + ext->edge_flash.state;
 8017f86:	b280      	uxth	r0, r0
 8017f88:	440a      	add	r2, r1
 8017f8a:	ebc0 3180 	rsb	r1, r0, r0, lsl #14
 8017f8e:	b292      	uxth	r2, r2
 8017f90:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8017f94:	4411      	add	r1, r2
 8017f96:	f8ad 1008 	strh.w	r1, [sp, #8]
 8017f9a:	e7e8      	b.n	8017f6e <lv_page_design+0x1e2>
 8017f9c:	2000afd8 	.word	0x2000afd8

08017fa0 <lv_page_scroll_hor>:
{
 8017fa0:	b510      	push	{r4, lr}
 8017fa2:	b08a      	sub	sp, #40	; 0x28
 8017fa4:	460c      	mov	r4, r1
    lv_obj_t * scrl = lv_page_get_scrl(page);
 8017fa6:	f7ff fdd6 	bl	8017b56 <lv_page_get_scrl>
    a.var            = scrl;
 8017faa:	9000      	str	r0, [sp, #0]
    a.start          = lv_obj_get_x(scrl);
 8017fac:	f7f6 ff46 	bl	800ee3c <lv_obj_get_x>
    a.time           = LV_PAGE_SCROLL_ANIM_TIME;
 8017fb0:	22c8      	movs	r2, #200	; 0xc8
 8017fb2:	f8ad 2018 	strh.w	r2, [sp, #24]
    a.exec_cb        = (lv_anim_exec_xcb_t)lv_obj_set_x;
 8017fb6:	4b0e      	ldr	r3, [pc, #56]	; (8017ff0 <lv_page_scroll_hor+0x50>)
    a.playback       = 0;
 8017fb8:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
    a.exec_cb        = (lv_anim_exec_xcb_t)lv_obj_set_x;
 8017fbc:	9301      	str	r3, [sp, #4]
    a.path_cb        = lv_anim_path_linear;
 8017fbe:	4b0d      	ldr	r3, [pc, #52]	; (8017ff4 <lv_page_scroll_hor+0x54>)
 8017fc0:	9302      	str	r3, [sp, #8]
    a.repeat         = 0;
 8017fc2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    a.ready_cb       = NULL;
 8017fc6:	2300      	movs	r3, #0
    a.start          = lv_obj_get_x(scrl);
 8017fc8:	9004      	str	r0, [sp, #16]
    a.end            = a.start + dist;
 8017fca:	4404      	add	r4, r0
    a.repeat         = 0;
 8017fcc:	f363 0241 	bfi	r2, r3, #1, #1
    lv_anim_create(&a);
 8017fd0:	4668      	mov	r0, sp
    a.end            = a.start + dist;
 8017fd2:	9405      	str	r4, [sp, #20]
    a.ready_cb       = NULL;
 8017fd4:	9303      	str	r3, [sp, #12]
    a.act_time       = 0;
 8017fd6:	f8ad 301a 	strh.w	r3, [sp, #26]
    a.playback_pause = 0;
 8017fda:	f8ad 301c 	strh.w	r3, [sp, #28]
    a.repeat         = 0;
 8017fde:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
    a.repeat_pause   = 0;
 8017fe2:	f8ad 301e 	strh.w	r3, [sp, #30]
    lv_anim_create(&a);
 8017fe6:	f7fb fcc3 	bl	8013970 <lv_anim_create>
}
 8017fea:	b00a      	add	sp, #40	; 0x28
 8017fec:	bd10      	pop	{r4, pc}
 8017fee:	bf00      	nop
 8017ff0:	0800e4b5 	.word	0x0800e4b5
 8017ff4:	08013799 	.word	0x08013799

08017ff8 <lv_page_scroll_ver>:
{
 8017ff8:	b510      	push	{r4, lr}
 8017ffa:	b08a      	sub	sp, #40	; 0x28
 8017ffc:	460c      	mov	r4, r1
    lv_obj_t * scrl = lv_page_get_scrl(page);
 8017ffe:	f7ff fdaa 	bl	8017b56 <lv_page_get_scrl>
    a.var            = scrl;
 8018002:	9000      	str	r0, [sp, #0]
    a.start          = lv_obj_get_y(scrl);
 8018004:	f7f6 ff20 	bl	800ee48 <lv_obj_get_y>
    a.time           = LV_PAGE_SCROLL_ANIM_TIME;
 8018008:	22c8      	movs	r2, #200	; 0xc8
 801800a:	f8ad 2018 	strh.w	r2, [sp, #24]
    a.exec_cb        = (lv_anim_exec_xcb_t)lv_obj_set_y;
 801800e:	4b0e      	ldr	r3, [pc, #56]	; (8018048 <lv_page_scroll_ver+0x50>)
    a.playback       = 0;
 8018010:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
    a.exec_cb        = (lv_anim_exec_xcb_t)lv_obj_set_y;
 8018014:	9301      	str	r3, [sp, #4]
    a.path_cb        = lv_anim_path_linear;
 8018016:	4b0d      	ldr	r3, [pc, #52]	; (801804c <lv_page_scroll_ver+0x54>)
 8018018:	9302      	str	r3, [sp, #8]
    a.repeat         = 0;
 801801a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    a.ready_cb       = NULL;
 801801e:	2300      	movs	r3, #0
    a.start          = lv_obj_get_y(scrl);
 8018020:	9004      	str	r0, [sp, #16]
    a.end            = a.start + dist;
 8018022:	4404      	add	r4, r0
    a.repeat         = 0;
 8018024:	f363 0241 	bfi	r2, r3, #1, #1
    lv_anim_create(&a);
 8018028:	4668      	mov	r0, sp
    a.end            = a.start + dist;
 801802a:	9405      	str	r4, [sp, #20]
    a.ready_cb       = NULL;
 801802c:	9303      	str	r3, [sp, #12]
    a.act_time       = 0;
 801802e:	f8ad 301a 	strh.w	r3, [sp, #26]
    a.playback_pause = 0;
 8018032:	f8ad 301c 	strh.w	r3, [sp, #28]
    a.repeat         = 0;
 8018036:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
    a.repeat_pause   = 0;
 801803a:	f8ad 301e 	strh.w	r3, [sp, #30]
    lv_anim_create(&a);
 801803e:	f7fb fc97 	bl	8013970 <lv_anim_create>
}
 8018042:	b00a      	add	sp, #40	; 0x28
 8018044:	bd10      	pop	{r4, pc}
 8018046:	bf00      	nop
 8018048:	0800e4c9 	.word	0x0800e4c9
 801804c:	08013799 	.word	0x08013799

08018050 <lv_page_signal>:
{
 8018050:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    res = ancestor_signal(page, sign, param);
 8018054:	4b8c      	ldr	r3, [pc, #560]	; (8018288 <lv_page_signal+0x238>)
 8018056:	681b      	ldr	r3, [r3, #0]
{
 8018058:	4604      	mov	r4, r0
 801805a:	460e      	mov	r6, r1
 801805c:	4615      	mov	r5, r2
    res = ancestor_signal(page, sign, param);
 801805e:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8018060:	2801      	cmp	r0, #1
    res = ancestor_signal(page, sign, param);
 8018062:	4607      	mov	r7, r0
    if(res != LV_RES_OK) return res;
 8018064:	d11e      	bne.n	80180a4 <lv_page_signal+0x54>
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 8018066:	4620      	mov	r0, r4
 8018068:	f7f6 fff1 	bl	800f04e <lv_obj_get_ext_attr>
    if(sign == LV_SIGNAL_CHILD_CHG) { /*Automatically move children to the scrollable object*/
 801806c:	2e01      	cmp	r6, #1
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801806e:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_CHILD_CHG) { /*Automatically move children to the scrollable object*/
 8018070:	d151      	bne.n	8018116 <lv_page_signal+0xc6>
        const lv_style_t * style = lv_page_get_style(page, LV_PAGE_STYLE_SCRL);
 8018072:	4639      	mov	r1, r7
 8018074:	4620      	mov	r0, r4
 8018076:	f7ff fd78 	bl	8017b6a <lv_page_get_style>
 801807a:	4681      	mov	r9, r0
    return lv_cont_get_fit_left(lv_page_get_scrl(page));
 801807c:	4620      	mov	r0, r4
 801807e:	f7ff fd6a 	bl	8017b56 <lv_page_get_scrl>
 8018082:	f7fd fc8b 	bl	801599c <lv_cont_get_fit_left>
 8018086:	4682      	mov	sl, r0
    return lv_cont_get_fit_top(lv_page_get_scrl(page));
 8018088:	4620      	mov	r0, r4
 801808a:	f7ff fd64 	bl	8017b56 <lv_page_get_scrl>
 801808e:	f7fd fc8c 	bl	80159aa <lv_cont_get_fit_top>
        child                    = lv_obj_get_child(page, NULL);
 8018092:	2100      	movs	r1, #0
 8018094:	4606      	mov	r6, r0
 8018096:	4620      	mov	r0, r4
 8018098:	f7f6 fe9e 	bl	800edd8 <lv_obj_get_child>
                if((tmp->coords.y1 == page->coords.y1) && (fit_top == LV_FIT_TIGHT || fit_top == LV_FIT_FILL)) {
 801809c:	f006 06fd 	and.w	r6, r6, #253	; 0xfd
        child                    = lv_obj_get_child(page, NULL);
 80180a0:	4605      	mov	r5, r0
        while(child != NULL) {
 80180a2:	b915      	cbnz	r5, 80180aa <lv_page_signal+0x5a>
}
 80180a4:	4638      	mov	r0, r7
 80180a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(lv_obj_is_protected(child, LV_PROTECT_PARENT) == false) {
 80180aa:	2102      	movs	r1, #2
 80180ac:	4628      	mov	r0, r5
 80180ae:	f7f6 ffc3 	bl	800f038 <lv_obj_is_protected>
                child          = lv_obj_get_child(page, child); /*Get the next child before move this*/
 80180b2:	4629      	mov	r1, r5
            if(lv_obj_is_protected(child, LV_PROTECT_PARENT) == false) {
 80180b4:	bb50      	cbnz	r0, 801810c <lv_page_signal+0xbc>
                child          = lv_obj_get_child(page, child); /*Get the next child before move this*/
 80180b6:	4620      	mov	r0, r4
 80180b8:	f7f6 fe8e 	bl	800edd8 <lv_obj_get_child>
                if((tmp->coords.x1 == page->coords.x1) && (fit_left == LV_FIT_TIGHT || fit_left == LV_FIT_FILL)) {
 80180bc:	f9b5 3010 	ldrsh.w	r3, [r5, #16]
 80180c0:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 80180c4:	429a      	cmp	r2, r3
                child          = lv_obj_get_child(page, child); /*Get the next child before move this*/
 80180c6:	4683      	mov	fp, r0
                if((tmp->coords.x1 == page->coords.x1) && (fit_left == LV_FIT_TIGHT || fit_left == LV_FIT_FILL)) {
 80180c8:	d10a      	bne.n	80180e0 <lv_page_signal+0x90>
 80180ca:	f00a 03fd 	and.w	r3, sl, #253	; 0xfd
 80180ce:	2b01      	cmp	r3, #1
 80180d0:	d106      	bne.n	80180e0 <lv_page_signal+0x90>
                    tmp->coords.x1 += style->body.padding.left;
 80180d2:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 80180d6:	441a      	add	r2, r3
 80180d8:	822a      	strh	r2, [r5, #16]
                    tmp->coords.x2 += style->body.padding.left;
 80180da:	8aaa      	ldrh	r2, [r5, #20]
 80180dc:	4413      	add	r3, r2
 80180de:	82ab      	strh	r3, [r5, #20]
                if((tmp->coords.y1 == page->coords.y1) && (fit_top == LV_FIT_TIGHT || fit_top == LV_FIT_FILL)) {
 80180e0:	f9b5 3012 	ldrsh.w	r3, [r5, #18]
 80180e4:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 80180e8:	429a      	cmp	r2, r3
 80180ea:	d108      	bne.n	80180fe <lv_page_signal+0xae>
 80180ec:	2e01      	cmp	r6, #1
 80180ee:	d106      	bne.n	80180fe <lv_page_signal+0xae>
                    tmp->coords.y1 += style->body.padding.top;
 80180f0:	f8b9 3016 	ldrh.w	r3, [r9, #22]
 80180f4:	441a      	add	r2, r3
 80180f6:	826a      	strh	r2, [r5, #18]
                    tmp->coords.y2 += style->body.padding.top;
 80180f8:	8aea      	ldrh	r2, [r5, #22]
 80180fa:	4413      	add	r3, r2
 80180fc:	82eb      	strh	r3, [r5, #22]
                lv_obj_set_parent(tmp, ext->scrl);
 80180fe:	4628      	mov	r0, r5
 8018100:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018104:	f7f6 fd56 	bl	800ebb4 <lv_obj_set_parent>
                child          = lv_obj_get_child(page, child); /*Get the next child before move this*/
 8018108:	465d      	mov	r5, fp
 801810a:	e7ca      	b.n	80180a2 <lv_page_signal+0x52>
                child = lv_obj_get_child(page, child);
 801810c:	4620      	mov	r0, r4
 801810e:	f7f6 fe63 	bl	800edd8 <lv_obj_get_child>
 8018112:	4605      	mov	r5, r0
 8018114:	e7c5      	b.n	80180a2 <lv_page_signal+0x52>
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 8018116:	2e04      	cmp	r6, #4
 8018118:	d110      	bne.n	801813c <lv_page_signal+0xec>
        ext->scrl->signal_cb(ext->scrl, LV_SIGNAL_CORD_CHG, &ext->scrl->coords);
 801811a:	6840      	ldr	r0, [r0, #4]
 801811c:	2102      	movs	r1, #2
 801811e:	69c3      	ldr	r3, [r0, #28]
 8018120:	f100 0210 	add.w	r2, r0, #16
 8018124:	4798      	blx	r3
        if(ext->sb.hor_draw || ext->sb.ver_draw) lv_page_sb_refresh(page);
 8018126:	f898 301c 	ldrb.w	r3, [r8, #28]
 801812a:	079a      	lsls	r2, r3, #30
 801812c:	d002      	beq.n	8018134 <lv_page_signal+0xe4>
 801812e:	4620      	mov	r0, r4
 8018130:	f7ff fa9a 	bl	8017668 <lv_page_sb_refresh>
        lv_obj_refresh_ext_draw_pad(page);
 8018134:	4620      	mov	r0, r4
 8018136:	f7f6 fdd6 	bl	800ece6 <lv_obj_refresh_ext_draw_pad>
 801813a:	e7b3      	b.n	80180a4 <lv_page_signal+0x54>
    } else if(sign == LV_SIGNAL_CORD_CHG) {
 801813c:	2e02      	cmp	r6, #2
 801813e:	d126      	bne.n	801818e <lv_page_signal+0x13e>
        if(ext->scrl != NULL && (lv_obj_get_width(page) != lv_area_get_width(param) ||
 8018140:	6843      	ldr	r3, [r0, #4]
 8018142:	2b00      	cmp	r3, #0
 8018144:	d0ae      	beq.n	80180a4 <lv_page_signal+0x54>
 8018146:	4620      	mov	r0, r4
 8018148:	f7f6 fe84 	bl	800ee54 <lv_obj_get_width>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return area_p->x2 - area_p->x1 + 1;
 801814c:	88ab      	ldrh	r3, [r5, #4]
 801814e:	882a      	ldrh	r2, [r5, #0]
 8018150:	3301      	adds	r3, #1
 8018152:	1a9b      	subs	r3, r3, r2
 8018154:	b21b      	sxth	r3, r3
 8018156:	4298      	cmp	r0, r3
 8018158:	d00e      	beq.n	8018178 <lv_page_signal+0x128>
            ext->scrl->signal_cb(ext->scrl, LV_SIGNAL_CORD_CHG, &ext->scrl->coords);
 801815a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801815e:	2102      	movs	r1, #2
 8018160:	69c3      	ldr	r3, [r0, #28]
 8018162:	f100 0210 	add.w	r2, r0, #16
 8018166:	4798      	blx	r3
            if(ext->sb.hor_draw || ext->sb.ver_draw) lv_page_sb_refresh(page);
 8018168:	f898 301c 	ldrb.w	r3, [r8, #28]
 801816c:	079b      	lsls	r3, r3, #30
 801816e:	d099      	beq.n	80180a4 <lv_page_signal+0x54>
 8018170:	4620      	mov	r0, r4
 8018172:	f7ff fa79 	bl	8017668 <lv_page_sb_refresh>
 8018176:	e795      	b.n	80180a4 <lv_page_signal+0x54>
                                 lv_obj_get_height(page) != lv_area_get_height(param))) {
 8018178:	4620      	mov	r0, r4
 801817a:	f7f6 fe71 	bl	800ee60 <lv_obj_get_height>
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 801817e:	88eb      	ldrh	r3, [r5, #6]
 8018180:	886a      	ldrh	r2, [r5, #2]
 8018182:	3301      	adds	r3, #1
 8018184:	1a9b      	subs	r3, r3, r2
        if(ext->scrl != NULL && (lv_obj_get_width(page) != lv_area_get_width(param) ||
 8018186:	b21b      	sxth	r3, r3
 8018188:	4298      	cmp	r0, r3
 801818a:	d1e6      	bne.n	801815a <lv_page_signal+0x10a>
 801818c:	e78a      	b.n	80180a4 <lv_page_signal+0x54>
    } else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 801818e:	2e05      	cmp	r6, #5
 8018190:	d112      	bne.n	80181b8 <lv_page_signal+0x168>
        if(page->ext_draw_pad < (-ext->sb.style->body.padding.right))
 8018192:	6882      	ldr	r2, [r0, #8]
 8018194:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
 8018198:	f9b2 301c 	ldrsh.w	r3, [r2, #28]
 801819c:	425b      	negs	r3, r3
 801819e:	4299      	cmp	r1, r3
            page->ext_draw_pad = -ext->sb.style->body.padding.right;
 80181a0:	bfb8      	it	lt
 80181a2:	86a3      	strhlt	r3, [r4, #52]	; 0x34
        if(page->ext_draw_pad < (-ext->sb.style->body.padding.bottom))
 80181a4:	f9b2 3018 	ldrsh.w	r3, [r2, #24]
 80181a8:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 80181ac:	425b      	negs	r3, r3
 80181ae:	429a      	cmp	r2, r3
 80181b0:	f6bf af78 	bge.w	80180a4 <lv_page_signal+0x54>
            page->ext_draw_pad = -ext->sb.style->body.padding.bottom;
 80181b4:	86a3      	strh	r3, [r4, #52]	; 0x34
 80181b6:	e775      	b.n	80180a4 <lv_page_signal+0x54>
    } else if(sign == LV_SIGNAL_CONTROL) {
 80181b8:	2e11      	cmp	r6, #17
 80181ba:	d151      	bne.n	8018260 <lv_page_signal+0x210>
        uint32_t c = *((uint32_t *)param);
 80181bc:	682b      	ldr	r3, [r5, #0]
        if(c == LV_KEY_DOWN) {
 80181be:	2b12      	cmp	r3, #18
 80181c0:	d107      	bne.n	80181d2 <lv_page_signal+0x182>
            lv_page_scroll_ver(page, -lv_obj_get_height(page) / 4);
 80181c2:	4620      	mov	r0, r4
 80181c4:	f7f6 fe4c 	bl	800ee60 <lv_obj_get_height>
 80181c8:	2104      	movs	r1, #4
 80181ca:	fb90 f1f1 	sdiv	r1, r0, r1
                lv_page_scroll_ver(page, -lv_obj_get_height(page) / 4);
 80181ce:	4249      	negs	r1, r1
 80181d0:	e007      	b.n	80181e2 <lv_page_signal+0x192>
        } else if(c == LV_KEY_UP) {
 80181d2:	2b11      	cmp	r3, #17
 80181d4:	d10a      	bne.n	80181ec <lv_page_signal+0x19c>
            lv_page_scroll_ver(page, lv_obj_get_height(page) / 4);
 80181d6:	4620      	mov	r0, r4
 80181d8:	f7f6 fe42 	bl	800ee60 <lv_obj_get_height>
 80181dc:	2104      	movs	r1, #4
 80181de:	fb90 f1f1 	sdiv	r1, r0, r1
                lv_page_scroll_ver(page, lv_obj_get_height(page) / 4);
 80181e2:	b209      	sxth	r1, r1
 80181e4:	4620      	mov	r0, r4
 80181e6:	f7ff ff07 	bl	8017ff8 <lv_page_scroll_ver>
 80181ea:	e75b      	b.n	80180a4 <lv_page_signal+0x54>
        } else if(c == LV_KEY_RIGHT) {
 80181ec:	2b13      	cmp	r3, #19
 80181ee:	d11c      	bne.n	801822a <lv_page_signal+0x1da>
    return lv_obj_get_width(lv_page_get_scrl(page));
 80181f0:	4620      	mov	r0, r4
 80181f2:	f7ff fcb0 	bl	8017b56 <lv_page_get_scrl>
 80181f6:	f7f6 fe2d 	bl	800ee54 <lv_obj_get_width>
 80181fa:	4605      	mov	r5, r0
            if(lv_page_get_scrl_width(page) <= lv_obj_get_width(page))
 80181fc:	4620      	mov	r0, r4
 80181fe:	f7f6 fe29 	bl	800ee54 <lv_obj_get_width>
 8018202:	42a8      	cmp	r0, r5
 8018204:	f04f 0504 	mov.w	r5, #4
                lv_page_scroll_ver(page, -lv_obj_get_height(page) / 4);
 8018208:	4620      	mov	r0, r4
            if(lv_page_get_scrl_width(page) <= lv_obj_get_width(page))
 801820a:	db04      	blt.n	8018216 <lv_page_signal+0x1c6>
                lv_page_scroll_ver(page, -lv_obj_get_height(page) / 4);
 801820c:	f7f6 fe28 	bl	800ee60 <lv_obj_get_height>
 8018210:	fb90 f1f5 	sdiv	r1, r0, r5
 8018214:	e7db      	b.n	80181ce <lv_page_signal+0x17e>
                lv_page_scroll_hor(page, -lv_obj_get_width(page) / 4);
 8018216:	f7f6 fe1d 	bl	800ee54 <lv_obj_get_width>
 801821a:	fb90 f1f5 	sdiv	r1, r0, r5
 801821e:	4249      	negs	r1, r1
                lv_page_scroll_hor(page, lv_obj_get_width(page) / 4);
 8018220:	b209      	sxth	r1, r1
 8018222:	4620      	mov	r0, r4
 8018224:	f7ff febc 	bl	8017fa0 <lv_page_scroll_hor>
 8018228:	e73c      	b.n	80180a4 <lv_page_signal+0x54>
        } else if(c == LV_KEY_LEFT) {
 801822a:	2b14      	cmp	r3, #20
 801822c:	f47f af3a 	bne.w	80180a4 <lv_page_signal+0x54>
 8018230:	4620      	mov	r0, r4
 8018232:	f7ff fc90 	bl	8017b56 <lv_page_get_scrl>
 8018236:	f7f6 fe0d 	bl	800ee54 <lv_obj_get_width>
 801823a:	4605      	mov	r5, r0
            if(lv_page_get_scrl_width(page) <= lv_obj_get_width(page))
 801823c:	4620      	mov	r0, r4
 801823e:	f7f6 fe09 	bl	800ee54 <lv_obj_get_width>
 8018242:	42a8      	cmp	r0, r5
 8018244:	f04f 0504 	mov.w	r5, #4
                lv_page_scroll_ver(page, lv_obj_get_height(page) / 4);
 8018248:	4620      	mov	r0, r4
            if(lv_page_get_scrl_width(page) <= lv_obj_get_width(page))
 801824a:	db04      	blt.n	8018256 <lv_page_signal+0x206>
                lv_page_scroll_ver(page, lv_obj_get_height(page) / 4);
 801824c:	f7f6 fe08 	bl	800ee60 <lv_obj_get_height>
 8018250:	fb90 f1f5 	sdiv	r1, r0, r5
 8018254:	e7c5      	b.n	80181e2 <lv_page_signal+0x192>
                lv_page_scroll_hor(page, lv_obj_get_width(page) / 4);
 8018256:	f7f6 fdfd 	bl	800ee54 <lv_obj_get_width>
 801825a:	fb90 f1f5 	sdiv	r1, r0, r5
 801825e:	e7df      	b.n	8018220 <lv_page_signal+0x1d0>
    } else if(sign == LV_SIGNAL_GET_EDITABLE) {
 8018260:	2e12      	cmp	r6, #18
 8018262:	d101      	bne.n	8018268 <lv_page_signal+0x218>
        *editable       = true;
 8018264:	702f      	strb	r7, [r5, #0]
 8018266:	e71d      	b.n	80180a4 <lv_page_signal+0x54>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8018268:	2e06      	cmp	r6, #6
 801826a:	f47f af1b 	bne.w	80180a4 <lv_page_signal+0x54>
 801826e:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 8018270:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8018274:	b2da      	uxtb	r2, r3
 8018276:	b119      	cbz	r1, 8018280 <lv_page_signal+0x230>
 8018278:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801827a:	2b07      	cmp	r3, #7
 801827c:	d1f8      	bne.n	8018270 <lv_page_signal+0x220>
 801827e:	461a      	mov	r2, r3
        buf->type[i] = "lv_page";
 8018280:	4b02      	ldr	r3, [pc, #8]	; (801828c <lv_page_signal+0x23c>)
 8018282:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
 8018286:	e70d      	b.n	80180a4 <lv_page_signal+0x54>
 8018288:	2000afdc 	.word	0x2000afdc
 801828c:	080d8a34 	.word	0x080d8a34

08018290 <lv_page_start_edge_flash>:
{
 8018290:	b510      	push	{r4, lr}
 8018292:	b08a      	sub	sp, #40	; 0x28
 8018294:	4604      	mov	r4, r0
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 8018296:	f7f6 feda 	bl	800f04e <lv_obj_get_ext_attr>
    if(ext->edge_flash.enabled) {
 801829a:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 801829e:	07db      	lsls	r3, r3, #31
 80182a0:	d51f      	bpl.n	80182e2 <lv_page_start_edge_flash+0x52>
        a.end            = LV_PAGE_END_FLASH_SIZE;
 80182a2:	2206      	movs	r2, #6
 80182a4:	9205      	str	r2, [sp, #20]
        a.exec_cb        = (lv_anim_exec_xcb_t)edge_flash_anim;
 80182a6:	4a10      	ldr	r2, [pc, #64]	; (80182e8 <lv_page_start_edge_flash+0x58>)
 80182a8:	9201      	str	r2, [sp, #4]
        a.path_cb        = lv_anim_path_linear;
 80182aa:	4a10      	ldr	r2, [pc, #64]	; (80182ec <lv_page_start_edge_flash+0x5c>)
 80182ac:	9202      	str	r2, [sp, #8]
        a.ready_cb       = edge_flash_anim_end;
 80182ae:	4a10      	ldr	r2, [pc, #64]	; (80182f0 <lv_page_start_edge_flash+0x60>)
 80182b0:	9203      	str	r2, [sp, #12]
        a.playback       = 1;
 80182b2:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
        a.var            = page;
 80182b6:	9400      	str	r4, [sp, #0]
        a.start          = 0;
 80182b8:	2300      	movs	r3, #0
        a.repeat         = 0;
 80182ba:	f042 0201 	orr.w	r2, r2, #1
        a.time           = LV_PAGE_END_ANIM_TIME;
 80182be:	f44f 7196 	mov.w	r1, #300	; 0x12c
        a.repeat         = 0;
 80182c2:	f363 0241 	bfi	r2, r3, #1, #1
        lv_anim_create(&a);
 80182c6:	4668      	mov	r0, sp
        a.start          = 0;
 80182c8:	9304      	str	r3, [sp, #16]
        a.act_time       = 0;
 80182ca:	f8ad 301a 	strh.w	r3, [sp, #26]
        a.time           = LV_PAGE_END_ANIM_TIME;
 80182ce:	f8ad 1018 	strh.w	r1, [sp, #24]
        a.playback_pause = LV_PAGE_END_ANIM_WAIT_TIME;
 80182d2:	f8ad 101c 	strh.w	r1, [sp, #28]
        a.repeat         = 0;
 80182d6:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
        a.repeat_pause   = 0;
 80182da:	f8ad 301e 	strh.w	r3, [sp, #30]
        lv_anim_create(&a);
 80182de:	f7fb fb47 	bl	8013970 <lv_anim_create>
}
 80182e2:	b00a      	add	sp, #40	; 0x28
 80182e4:	bd10      	pop	{r4, pc}
 80182e6:	bf00      	nop
 80182e8:	080179eb 	.word	0x080179eb
 80182ec:	08013799 	.word	0x08013799
 80182f0:	080179c7 	.word	0x080179c7

080182f4 <lv_page_scrollable_signal>:
{
 80182f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    res = ancestor_signal(scrl, sign, param);
 80182f8:	4bc1      	ldr	r3, [pc, #772]	; (8018600 <lv_page_scrollable_signal+0x30c>)
{
 80182fa:	b08f      	sub	sp, #60	; 0x3c
    res = ancestor_signal(scrl, sign, param);
 80182fc:	681b      	ldr	r3, [r3, #0]
{
 80182fe:	9200      	str	r2, [sp, #0]
 8018300:	4680      	mov	r8, r0
 8018302:	460d      	mov	r5, r1
    res = ancestor_signal(scrl, sign, param);
 8018304:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8018306:	2801      	cmp	r0, #1
    res = ancestor_signal(scrl, sign, param);
 8018308:	9005      	str	r0, [sp, #20]
    if(res != LV_RES_OK) return res;
 801830a:	f040 8160 	bne.w	80185ce <lv_page_scrollable_signal+0x2da>
    lv_obj_t * page               = lv_obj_get_parent(scrl);
 801830e:	4640      	mov	r0, r8
 8018310:	f7f6 fd60 	bl	800edd4 <lv_obj_get_parent>
 8018314:	4607      	mov	r7, r0
    const lv_style_t * page_style = lv_obj_get_style(page);
 8018316:	f7f6 fdaf 	bl	800ee78 <lv_obj_get_style>
 801831a:	4606      	mov	r6, r0
    lv_page_ext_t * page_ext      = lv_obj_get_ext_attr(page);
 801831c:	4638      	mov	r0, r7
 801831e:	f7f6 fe96 	bl	800f04e <lv_obj_get_ext_attr>
    if(sign == LV_SIGNAL_CORD_CHG) {
 8018322:	2d02      	cmp	r5, #2
    lv_page_ext_t * page_ext      = lv_obj_get_ext_attr(page);
 8018324:	4604      	mov	r4, r0
    if(sign == LV_SIGNAL_CORD_CHG) {
 8018326:	f040 816d 	bne.w	8018604 <lv_page_scrollable_signal+0x310>
        lv_coord_t new_x = lv_obj_get_x(scrl);
 801832a:	4640      	mov	r0, r8
 801832c:	f7f6 fd86 	bl	800ee3c <lv_obj_get_x>
 8018330:	4682      	mov	sl, r0
        lv_coord_t new_y = lv_obj_get_y(scrl);
 8018332:	4640      	mov	r0, r8
 8018334:	f7f6 fd88 	bl	800ee48 <lv_obj_get_y>
        lv_obj_get_coords(scrl, &scrl_coords);
 8018338:	a90c      	add	r1, sp, #48	; 0x30
        lv_coord_t new_y = lv_obj_get_y(scrl);
 801833a:	9006      	str	r0, [sp, #24]
        lv_obj_get_coords(scrl, &scrl_coords);
 801833c:	4640      	mov	r0, r8
 801833e:	f7f6 fd77 	bl	800ee30 <lv_obj_get_coords>
        lv_obj_get_coords(page, &page_coords);
 8018342:	a90a      	add	r1, sp, #40	; 0x28
 8018344:	4638      	mov	r0, r7
 8018346:	f7f6 fd73 	bl	800ee30 <lv_obj_get_coords>
        lv_coord_t diff_x      = scrl->coords.x1 - ori_coords->x1;
 801834a:	9b00      	ldr	r3, [sp, #0]
 801834c:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 8018350:	8818      	ldrh	r0, [r3, #0]
        lv_coord_t vpad        = page_style->body.padding.top + page_style->body.padding.bottom;
 8018352:	f8b6 b018 	ldrh.w	fp, [r6, #24]
 8018356:	f8b6 9016 	ldrh.w	r9, [r6, #22]
        lv_coord_t hpad        = page_style->body.padding.left + page_style->body.padding.right;
 801835a:	8b75      	ldrh	r5, [r6, #26]
        lv_coord_t diff_x      = scrl->coords.x1 - ori_coords->x1;
 801835c:	1a09      	subs	r1, r1, r0
 801835e:	b28b      	uxth	r3, r1
 8018360:	9301      	str	r3, [sp, #4]
        lv_coord_t diff_y      = scrl->coords.y1 - ori_coords->y1;
 8018362:	9b00      	ldr	r3, [sp, #0]
 8018364:	f8b8 1012 	ldrh.w	r1, [r8, #18]
 8018368:	8858      	ldrh	r0, [r3, #2]
 801836a:	1a09      	subs	r1, r1, r0
 801836c:	b28b      	uxth	r3, r1
 801836e:	9302      	str	r3, [sp, #8]
        lv_coord_t hpad        = page_style->body.padding.left + page_style->body.padding.right;
 8018370:	8bb3      	ldrh	r3, [r6, #28]
        lv_coord_t vpad        = page_style->body.padding.top + page_style->body.padding.bottom;
 8018372:	44d9      	add	r9, fp
        lv_coord_t hpad        = page_style->body.padding.left + page_style->body.padding.right;
 8018374:	441d      	add	r5, r3
        lv_obj_t * page_parent = lv_obj_get_parent(page);
 8018376:	4638      	mov	r0, r7
        lv_coord_t vpad        = page_style->body.padding.top + page_style->body.padding.bottom;
 8018378:	fa0f f389 	sxth.w	r3, r9
 801837c:	9307      	str	r3, [sp, #28]
        lv_obj_t * page_parent = lv_obj_get_parent(page);
 801837e:	f7f6 fd29 	bl	800edd4 <lv_obj_get_parent>
 8018382:	4683      	mov	fp, r0
        lv_indev_t * indev = lv_indev_get_act();
 8018384:	f7f5 fe3a 	bl	800dffc <lv_indev_get_act>
        lv_indev_get_vect(indev, &drag_vect);
 8018388:	a909      	add	r1, sp, #36	; 0x24
        lv_indev_t * indev = lv_indev_get_act();
 801838a:	4681      	mov	r9, r0
        lv_indev_get_vect(indev, &drag_vect);
 801838c:	f7f5 fe66 	bl	800e05c <lv_indev_get_vect>
        if(page_ext->scroll_prop && page_ext->scroll_prop_ip == 0 && lv_indev_is_dragging(indev) == false) {
 8018390:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8018394:	f003 0303 	and.w	r3, r3, #3
 8018398:	2b01      	cmp	r3, #1
        lv_coord_t hpad        = page_style->body.padding.left + page_style->body.padding.right;
 801839a:	b22d      	sxth	r5, r5
        if(page_ext->scroll_prop && page_ext->scroll_prop_ip == 0 && lv_indev_is_dragging(indev) == false) {
 801839c:	d127      	bne.n	80183ee <lv_page_scrollable_signal+0xfa>
 801839e:	4648      	mov	r0, r9
 80183a0:	f7f5 fe4f 	bl	800e042 <lv_indev_is_dragging>
 80183a4:	bb18      	cbnz	r0, 80183ee <lv_page_scrollable_signal+0xfa>
            if(((drag_vect.y > 0 && scrl_coords.y1 == page_coords.y1 + page_style->body.padding.top) ||
 80183a6:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 80183aa:	2b00      	cmp	r3, #0
 80183ac:	dd67      	ble.n	801847e <lv_page_scrollable_signal+0x18a>
 80183ae:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 80183b2:	f9b6 1016 	ldrsh.w	r1, [r6, #22]
 80183b6:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 80183ba:	440b      	add	r3, r1
                (drag_vect.y < 0 && scrl_coords.y2 == page_coords.y2 - page_style->body.padding.bottom)) &&
 80183bc:	429a      	cmp	r2, r3
 80183be:	d116      	bne.n	80183ee <lv_page_scrollable_signal+0xfa>
               ((drag_vect.x > 0 && scrl_coords.x1 == page_coords.x1 + page_style->body.padding.left) ||
 80183c0:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
                (drag_vect.y < 0 && scrl_coords.y2 == page_coords.y2 - page_style->body.padding.bottom)) &&
 80183c4:	2b00      	cmp	r3, #0
 80183c6:	dd63      	ble.n	8018490 <lv_page_scrollable_signal+0x19c>
               ((drag_vect.x > 0 && scrl_coords.x1 == page_coords.x1 + page_style->body.padding.left) ||
 80183c8:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 80183cc:	f9b6 101a 	ldrsh.w	r1, [r6, #26]
 80183d0:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 80183d4:	440b      	add	r3, r1
                (drag_vect.x < 0 && scrl_coords.x2 == page_coords.x2 - page_style->body.padding.right))) {
 80183d6:	429a      	cmp	r2, r3
 80183d8:	d109      	bne.n	80183ee <lv_page_scrollable_signal+0xfa>
                if(lv_obj_get_parent(page_parent) != NULL) { /*Do not propagate the scroll to a screen*/
 80183da:	4658      	mov	r0, fp
 80183dc:	f7f6 fcfa 	bl	800edd4 <lv_obj_get_parent>
 80183e0:	b128      	cbz	r0, 80183ee <lv_page_scrollable_signal+0xfa>
                    page_ext->scroll_prop_ip = 1;
 80183e2:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 80183e6:	f043 0302 	orr.w	r3, r3, #2
 80183ea:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 80183ee:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 80183f2:	f9bd 002c 	ldrsh.w	r0, [sp, #44]	; 0x2c
 80183f6:	f9bd c034 	ldrsh.w	ip, [sp, #52]	; 0x34
 80183fa:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
    return area_p->x2 - area_p->x1 + 1;
 80183fe:	fa1f f982 	uxth.w	r9, r2
 8018402:	1c43      	adds	r3, r0, #1
 8018404:	f10c 0101 	add.w	r1, ip, #1
 8018408:	eba3 0309 	sub.w	r3, r3, r9
 801840c:	b29b      	uxth	r3, r3
 801840e:	eba1 010e 	sub.w	r1, r1, lr
 8018412:	9303      	str	r3, [sp, #12]
 8018414:	b289      	uxth	r1, r1
        if(lv_area_get_width(&scrl_coords) + hpad <= lv_area_get_width(&page_coords)) {
 8018416:	fa05 f381 	sxtah	r3, r5, r1
 801841a:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 801841e:	42ab      	cmp	r3, r5
 8018420:	dc3f      	bgt.n	80184a2 <lv_page_scrollable_signal+0x1ae>
            if(scrl_coords.x1 != page_coords.x1 + page_style->body.padding.left) {
 8018422:	f9b6 301a 	ldrsh.w	r3, [r6, #26]
 8018426:	441a      	add	r2, r3
                new_x  = page_style->body.padding.left;
 8018428:	4596      	cmp	lr, r2
 801842a:	bf16      	itet	ne
 801842c:	469a      	movne	sl, r3
 801842e:	2500      	moveq	r5, #0
 8018430:	2501      	movne	r5, #1
 8018432:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8018436:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 801843a:	f9bd e02e 	ldrsh.w	lr, [sp, #46]	; 0x2e
 801843e:	9303      	str	r3, [sp, #12]
    return area_p->y2 - area_p->y1 + 1;
 8018440:	1c58      	adds	r0, r3, #1
 8018442:	b28a      	uxth	r2, r1
 8018444:	f10e 0301 	add.w	r3, lr, #1
 8018448:	f9bd c032 	ldrsh.w	ip, [sp, #50]	; 0x32
 801844c:	1a9b      	subs	r3, r3, r2
 801844e:	b29b      	uxth	r3, r3
 8018450:	9304      	str	r3, [sp, #16]
 8018452:	eba0 000c 	sub.w	r0, r0, ip
        if(lv_area_get_height(&scrl_coords) + vpad <= lv_area_get_height(&page_coords)) {
 8018456:	9b07      	ldr	r3, [sp, #28]
 8018458:	b280      	uxth	r0, r0
 801845a:	fa03 f980 	sxtah	r9, r3, r0
 801845e:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8018462:	4599      	cmp	r9, r3
 8018464:	dc65      	bgt.n	8018532 <lv_page_scrollable_signal+0x23e>
            if(scrl_coords.y1 != page_coords.y1 + page_style->body.padding.top) {
 8018466:	f9b6 6016 	ldrsh.w	r6, [r6, #22]
 801846a:	4431      	add	r1, r6
 801846c:	458c      	cmp	ip, r1
 801846e:	d16e      	bne.n	801854e <lv_page_scrollable_signal+0x25a>
        if(refr_x || refr_y) {
 8018470:	2d00      	cmp	r5, #0
 8018472:	f000 80a9 	beq.w	80185c8 <lv_page_scrollable_signal+0x2d4>
 8018476:	9e06      	ldr	r6, [sp, #24]
 8018478:	f04f 0900 	mov.w	r9, #0
 801847c:	e085      	b.n	801858a <lv_page_scrollable_signal+0x296>
            if(((drag_vect.y > 0 && scrl_coords.y1 == page_coords.y1 + page_style->body.padding.top) ||
 801847e:	d0b6      	beq.n	80183ee <lv_page_scrollable_signal+0xfa>
                (drag_vect.y < 0 && scrl_coords.y2 == page_coords.y2 - page_style->body.padding.bottom)) &&
 8018480:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8018484:	f9b6 1018 	ldrsh.w	r1, [r6, #24]
 8018488:	f9bd 2036 	ldrsh.w	r2, [sp, #54]	; 0x36
 801848c:	1a5b      	subs	r3, r3, r1
 801848e:	e795      	b.n	80183bc <lv_page_scrollable_signal+0xc8>
               ((drag_vect.x > 0 && scrl_coords.x1 == page_coords.x1 + page_style->body.padding.left) ||
 8018490:	d0ad      	beq.n	80183ee <lv_page_scrollable_signal+0xfa>
                (drag_vect.x < 0 && scrl_coords.x2 == page_coords.x2 - page_style->body.padding.right))) {
 8018492:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8018496:	f9b6 101c 	ldrsh.w	r1, [r6, #28]
 801849a:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801849e:	1a5b      	subs	r3, r3, r1
 80184a0:	e799      	b.n	80183d6 <lv_page_scrollable_signal+0xe2>
            if(page_ext->scroll_prop_ip) {
 80184a2:	f894 502e 	ldrb.w	r5, [r4, #46]	; 0x2e
 80184a6:	f015 0502 	ands.w	r5, r5, #2
 80184aa:	d00c      	beq.n	80184c6 <lv_page_scrollable_signal+0x1d2>
                if(drag_vect.x == diff_x) { /*`scrl` is bouncing: drag pos. it somewhere and here it
 80184ac:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 80184b0:	9a01      	ldr	r2, [sp, #4]
 80184b2:	429a      	cmp	r2, r3
 80184b4:	d139      	bne.n	801852a <lv_page_scrollable_signal+0x236>
                    new_x  = ori_coords->x1 - page_coords.x1;
 80184b6:	9b00      	ldr	r3, [sp, #0]
 80184b8:	881b      	ldrh	r3, [r3, #0]
 80184ba:	eba3 0909 	sub.w	r9, r3, r9
 80184be:	fa0f fa89 	sxth.w	sl, r9
                refr_x = true;
 80184c2:	2501      	movs	r5, #1
 80184c4:	e7b5      	b.n	8018432 <lv_page_scrollable_signal+0x13e>
            else if(scrl_coords.x2 < page_coords.x2 - page_style->body.padding.right) {
 80184c6:	f9b6 901c 	ldrsh.w	r9, [r6, #28]
 80184ca:	eba0 0009 	sub.w	r0, r0, r9
 80184ce:	4584      	cmp	ip, r0
 80184d0:	da15      	bge.n	80184fe <lv_page_scrollable_signal+0x20a>
                new_x = lv_area_get_width(&page_coords) - lv_area_get_width(&scrl_coords) -
 80184d2:	9b03      	ldr	r3, [sp, #12]
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 80184d4:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
                new_x = lv_area_get_width(&page_coords) - lv_area_get_width(&scrl_coords) -
 80184d8:	1a5b      	subs	r3, r3, r1
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 80184da:	f005 051f 	and.w	r5, r5, #31
                new_x = lv_area_get_width(&page_coords) - lv_area_get_width(&scrl_coords) -
 80184de:	eba3 0909 	sub.w	r9, r3, r9
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 80184e2:	2d01      	cmp	r5, #1
                new_x = lv_area_get_width(&page_coords) - lv_area_get_width(&scrl_coords) -
 80184e4:	fa0f fa89 	sxth.w	sl, r9
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 80184e8:	d1eb      	bne.n	80184c2 <lv_page_scrollable_signal+0x1ce>
                    lv_page_start_edge_flash(page);
 80184ea:	4638      	mov	r0, r7
 80184ec:	f7ff fed0 	bl	8018290 <lv_page_start_edge_flash>
                    page_ext->edge_flash.right_ip = 1;
 80184f0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80184f4:	f043 0308 	orr.w	r3, r3, #8
 80184f8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 80184fc:	e799      	b.n	8018432 <lv_page_scrollable_signal+0x13e>
            } else if(scrl_coords.x1 > page_coords.x1 + page_style->body.padding.left) {
 80184fe:	f9b6 901a 	ldrsh.w	r9, [r6, #26]
 8018502:	444a      	add	r2, r9
 8018504:	4596      	cmp	lr, r2
 8018506:	dd94      	ble.n	8018432 <lv_page_scrollable_signal+0x13e>
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 8018508:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 801850c:	f005 051f 	and.w	r5, r5, #31
 8018510:	2d01      	cmp	r5, #1
 8018512:	d10c      	bne.n	801852e <lv_page_scrollable_signal+0x23a>
                    lv_page_start_edge_flash(page);
 8018514:	4638      	mov	r0, r7
 8018516:	f7ff febb 	bl	8018290 <lv_page_start_edge_flash>
                    page_ext->edge_flash.left_ip = 1;
 801851a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801851e:	f043 0310 	orr.w	r3, r3, #16
 8018522:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
                new_x  = page_style->body.padding.left; /*Left align*/
 8018526:	46ca      	mov	sl, r9
 8018528:	e783      	b.n	8018432 <lv_page_scrollable_signal+0x13e>
        bool refr_x      = false;
 801852a:	2500      	movs	r5, #0
 801852c:	e781      	b.n	8018432 <lv_page_scrollable_signal+0x13e>
                new_x  = page_style->body.padding.left; /*Left align*/
 801852e:	46ca      	mov	sl, r9
 8018530:	e7c7      	b.n	80184c2 <lv_page_scrollable_signal+0x1ce>
            if(page_ext->scroll_prop_ip) {
 8018532:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 8018536:	f019 0f02 	tst.w	r9, #2
 801853a:	d00b      	beq.n	8018554 <lv_page_scrollable_signal+0x260>
                if(drag_vect.y == diff_y) { /*`scrl` is bouncing: drag pos. it somewhere and here it
 801853c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8018540:	9902      	ldr	r1, [sp, #8]
 8018542:	4299      	cmp	r1, r3
 8018544:	d194      	bne.n	8018470 <lv_page_scrollable_signal+0x17c>
                    new_y  = ori_coords->y1 - page_coords.y1;
 8018546:	9b00      	ldr	r3, [sp, #0]
 8018548:	885e      	ldrh	r6, [r3, #2]
 801854a:	1ab2      	subs	r2, r6, r2
 801854c:	b216      	sxth	r6, r2
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 801854e:	f04f 0901 	mov.w	r9, #1
 8018552:	e01a      	b.n	801858a <lv_page_scrollable_signal+0x296>
            else if(scrl_coords.y2 < page_coords.y2 - page_style->body.padding.bottom) {
 8018554:	f9b6 2018 	ldrsh.w	r2, [r6, #24]
 8018558:	9b03      	ldr	r3, [sp, #12]
 801855a:	ebae 0e02 	sub.w	lr, lr, r2
 801855e:	4573      	cmp	r3, lr
 8018560:	da39      	bge.n	80185d6 <lv_page_scrollable_signal+0x2e2>
                new_y = lv_area_get_height(&page_coords) - lv_area_get_height(&scrl_coords) -
 8018562:	9b04      	ldr	r3, [sp, #16]
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 8018564:	f894 9028 	ldrb.w	r9, [r4, #40]	; 0x28
                new_y = lv_area_get_height(&page_coords) - lv_area_get_height(&scrl_coords) -
 8018568:	1a1b      	subs	r3, r3, r0
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 801856a:	f009 091f 	and.w	r9, r9, #31
                new_y = lv_area_get_height(&page_coords) - lv_area_get_height(&scrl_coords) -
 801856e:	1a9a      	subs	r2, r3, r2
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 8018570:	f1b9 0f01 	cmp.w	r9, #1
                new_y = lv_area_get_height(&page_coords) - lv_area_get_height(&scrl_coords) -
 8018574:	b216      	sxth	r6, r2
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 8018576:	d1ea      	bne.n	801854e <lv_page_scrollable_signal+0x25a>
                    lv_page_start_edge_flash(page);
 8018578:	4638      	mov	r0, r7
 801857a:	f7ff fe89 	bl	8018290 <lv_page_start_edge_flash>
                    page_ext->edge_flash.bottom_ip = 1;
 801857e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8018582:	f043 0304 	orr.w	r3, r3, #4
                    page_ext->edge_flash.top_ip = 1;
 8018586:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
            lv_obj_set_pos(scrl, new_x, new_y);
 801858a:	4651      	mov	r1, sl
 801858c:	4632      	mov	r2, r6
 801858e:	4640      	mov	r0, r8
 8018590:	f7f5 ff4d 	bl	800e42e <lv_obj_set_pos>
            if(page_ext->scroll_prop_ip) {
 8018594:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8018598:	0799      	lsls	r1, r3, #30
 801859a:	d515      	bpl.n	80185c8 <lv_page_scrollable_signal+0x2d4>
                if(refr_y) lv_obj_set_y(page_parent, lv_obj_get_y(page_parent) + diff_y);
 801859c:	f1b9 0f00 	cmp.w	r9, #0
 80185a0:	d008      	beq.n	80185b4 <lv_page_scrollable_signal+0x2c0>
 80185a2:	4658      	mov	r0, fp
 80185a4:	f7f6 fc50 	bl	800ee48 <lv_obj_get_y>
 80185a8:	9b02      	ldr	r3, [sp, #8]
 80185aa:	4403      	add	r3, r0
 80185ac:	b219      	sxth	r1, r3
 80185ae:	4658      	mov	r0, fp
 80185b0:	f7f5 ff8a 	bl	800e4c8 <lv_obj_set_y>
                if(refr_x) lv_obj_set_x(page_parent, lv_obj_get_x(page_parent) + diff_x);
 80185b4:	b145      	cbz	r5, 80185c8 <lv_page_scrollable_signal+0x2d4>
 80185b6:	4658      	mov	r0, fp
 80185b8:	f7f6 fc40 	bl	800ee3c <lv_obj_get_x>
 80185bc:	9b01      	ldr	r3, [sp, #4]
 80185be:	4403      	add	r3, r0
 80185c0:	b219      	sxth	r1, r3
 80185c2:	4658      	mov	r0, fp
 80185c4:	f7f5 ff76 	bl	800e4b4 <lv_obj_set_x>
        lv_page_sb_refresh(page);
 80185c8:	4638      	mov	r0, r7
 80185ca:	f7ff f84d 	bl	8017668 <lv_page_sb_refresh>
}
 80185ce:	9805      	ldr	r0, [sp, #20]
 80185d0:	b00f      	add	sp, #60	; 0x3c
 80185d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            } else if(scrl_coords.y1 > page_coords.y1 + page_style->body.padding.top) {
 80185d6:	f9b6 6016 	ldrsh.w	r6, [r6, #22]
 80185da:	4431      	add	r1, r6
 80185dc:	458c      	cmp	ip, r1
 80185de:	f77f af47 	ble.w	8018470 <lv_page_scrollable_signal+0x17c>
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 80185e2:	f894 9028 	ldrb.w	r9, [r4, #40]	; 0x28
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 80185e6:	f009 091f 	and.w	r9, r9, #31
 80185ea:	f1b9 0f01 	cmp.w	r9, #1
 80185ee:	d1ae      	bne.n	801854e <lv_page_scrollable_signal+0x25a>
                    lv_page_start_edge_flash(page);
 80185f0:	4638      	mov	r0, r7
 80185f2:	f7ff fe4d 	bl	8018290 <lv_page_start_edge_flash>
                    page_ext->edge_flash.top_ip = 1;
 80185f6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80185fa:	f043 0302 	orr.w	r3, r3, #2
 80185fe:	e7c2      	b.n	8018586 <lv_page_scrollable_signal+0x292>
 8018600:	2000afdc 	.word	0x2000afdc
    } else if(sign == LV_SIGNAL_DRAG_END) {
 8018604:	2d0e      	cmp	r5, #14
 8018606:	d1e2      	bne.n	80185ce <lv_page_scrollable_signal+0x2da>
        page_ext->scroll_prop_ip = 0;
 8018608:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
 801860c:	f36f 0341 	bfc	r3, #1, #1
 8018610:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
        if(page_ext->sb.mode == LV_SB_MODE_DRAG) {
 8018614:	7f03      	ldrb	r3, [r0, #28]
 8018616:	f003 031c 	and.w	r3, r3, #28
 801861a:	2b08      	cmp	r3, #8
 801861c:	d1d7      	bne.n	80185ce <lv_page_scrollable_signal+0x2da>
            lv_disp_t * disp = lv_obj_get_disp(page);
 801861e:	4638      	mov	r0, r7
 8018620:	f7f5 fe72 	bl	800e308 <lv_obj_get_disp>
            if(page_ext->sb.hor_draw) {
 8018624:	7f23      	ldrb	r3, [r4, #28]
 8018626:	07da      	lsls	r2, r3, #31
            lv_disp_t * disp = lv_obj_get_disp(page);
 8018628:	4605      	mov	r5, r0
            if(page_ext->sb.hor_draw) {
 801862a:	d522      	bpl.n	8018672 <lv_page_scrollable_signal+0x37e>
                lv_area_copy(&sb_area_tmp, &page_ext->sb.hor_area);
 801862c:	f104 010c 	add.w	r1, r4, #12
 8018630:	a80c      	add	r0, sp, #48	; 0x30
 8018632:	f7ff f803 	bl	801763c <lv_area_copy>
                sb_area_tmp.x1 += page->coords.x1;
 8018636:	8a3a      	ldrh	r2, [r7, #16]
 8018638:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
                sb_area_tmp.y1 += page->coords.y1;
 801863c:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
                sb_area_tmp.x1 += page->coords.x1;
 8018640:	4413      	add	r3, r2
 8018642:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
                sb_area_tmp.y1 += page->coords.y1;
 8018646:	8a7b      	ldrh	r3, [r7, #18]
 8018648:	4419      	add	r1, r3
 801864a:	f8ad 1032 	strh.w	r1, [sp, #50]	; 0x32
                sb_area_tmp.x2 += page->coords.x1;
 801864e:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8018652:	440a      	add	r2, r1
 8018654:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
                sb_area_tmp.y2 += page->coords.y1;
 8018658:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
                lv_inv_area(disp, &sb_area_tmp);
 801865c:	a90c      	add	r1, sp, #48	; 0x30
                sb_area_tmp.y2 += page->coords.y1;
 801865e:	4413      	add	r3, r2
                lv_inv_area(disp, &sb_area_tmp);
 8018660:	4628      	mov	r0, r5
                sb_area_tmp.y2 += page->coords.y1;
 8018662:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
                lv_inv_area(disp, &sb_area_tmp);
 8018666:	f7f6 fe2b 	bl	800f2c0 <lv_inv_area>
                page_ext->sb.hor_draw = 0;
 801866a:	7f23      	ldrb	r3, [r4, #28]
 801866c:	f36f 0300 	bfc	r3, #0, #1
 8018670:	7723      	strb	r3, [r4, #28]
            if(page_ext->sb.ver_draw) {
 8018672:	7f23      	ldrb	r3, [r4, #28]
 8018674:	079b      	lsls	r3, r3, #30
 8018676:	d5aa      	bpl.n	80185ce <lv_page_scrollable_signal+0x2da>
                lv_area_copy(&sb_area_tmp, &page_ext->sb.ver_area);
 8018678:	f104 0114 	add.w	r1, r4, #20
 801867c:	a80c      	add	r0, sp, #48	; 0x30
 801867e:	f7fe ffdd 	bl	801763c <lv_area_copy>
                sb_area_tmp.x1 += page->coords.x1;
 8018682:	8a3a      	ldrh	r2, [r7, #16]
 8018684:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
                sb_area_tmp.y1 += page->coords.y1;
 8018688:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
                sb_area_tmp.x1 += page->coords.x1;
 801868c:	4413      	add	r3, r2
 801868e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
                sb_area_tmp.y1 += page->coords.y1;
 8018692:	8a7b      	ldrh	r3, [r7, #18]
 8018694:	4419      	add	r1, r3
 8018696:	f8ad 1032 	strh.w	r1, [sp, #50]	; 0x32
                sb_area_tmp.x2 += page->coords.x1;
 801869a:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801869e:	440a      	add	r2, r1
 80186a0:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
                sb_area_tmp.y2 += page->coords.y1;
 80186a4:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
                lv_inv_area(disp, &sb_area_tmp);
 80186a8:	a90c      	add	r1, sp, #48	; 0x30
                sb_area_tmp.y2 += page->coords.y1;
 80186aa:	4413      	add	r3, r2
                lv_inv_area(disp, &sb_area_tmp);
 80186ac:	4628      	mov	r0, r5
                sb_area_tmp.y2 += page->coords.y1;
 80186ae:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
                lv_inv_area(disp, &sb_area_tmp);
 80186b2:	f7f6 fe05 	bl	800f2c0 <lv_inv_area>
                page_ext->sb.ver_draw = 0;
 80186b6:	7f23      	ldrb	r3, [r4, #28]
 80186b8:	f36f 0341 	bfc	r3, #1, #1
 80186bc:	7723      	strb	r3, [r4, #28]
 80186be:	e786      	b.n	80185ce <lv_page_scrollable_signal+0x2da>

080186c0 <inf_normalize>:
/**
 * Set the middle page for the roller if inifinte is enabled
 * @param scrl pointer to the roller's scrollable (lv_obj_t *)
 */
static void inf_normalize(void * scrl)
{
 80186c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80186c4:	4604      	mov	r4, r0
    lv_obj_t * roller_scrl = (lv_obj_t *)scrl;
    lv_obj_t * roller      = lv_obj_get_parent(roller_scrl);
 80186c6:	f7f6 fb85 	bl	800edd4 <lv_obj_get_parent>
 80186ca:	4606      	mov	r6, r0
    lv_roller_ext_t * ext  = lv_obj_get_ext_attr(roller);
 80186cc:	f7f6 fcbf 	bl	800f04e <lv_obj_get_ext_attr>

    if(ext->mode == LV_ROLLER_MODE_INIFINITE) {
 80186d0:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80186d4:	07db      	lsls	r3, r3, #31
    lv_roller_ext_t * ext  = lv_obj_get_ext_attr(roller);
 80186d6:	4605      	mov	r5, r0
    if(ext->mode == LV_ROLLER_MODE_INIFINITE) {
 80186d8:	d52b      	bpl.n	8018732 <inf_normalize+0x72>
        uint16_t real_id_cnt = ext->ddlist.option_cnt / LV_ROLLER_INF_PAGES;

        ext->ddlist.sel_opt_id = ext->ddlist.sel_opt_id % real_id_cnt;
 80186da:	8f41      	ldrh	r1, [r0, #58]	; 0x3a
        uint16_t real_id_cnt = ext->ddlist.option_cnt / LV_ROLLER_INF_PAGES;
 80186dc:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 80186de:	2207      	movs	r2, #7
 80186e0:	fbb3 f3f2 	udiv	r3, r3, r2
        ext->ddlist.sel_opt_id = ext->ddlist.sel_opt_id % real_id_cnt;
 80186e4:	fbb1 f2f3 	udiv	r2, r1, r3
 80186e8:	fb03 1212 	mls	r2, r3, r2, r1

        ext->ddlist.sel_opt_id += (LV_ROLLER_INF_PAGES / 2) * real_id_cnt; /*Select the middle page*/
 80186ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80186f0:	4413      	add	r3, r2
 80186f2:	8743      	strh	r3, [r0, #58]	; 0x3a

        /*Move to the new id*/
        const lv_style_t * style_label = lv_obj_get_style(ext->ddlist.label);
 80186f4:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80186f6:	f7f6 fbbf 	bl	800ee78 <lv_obj_get_style>
 80186fa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80186fc:	4680      	mov	r8, r0
        const lv_font_t * font         = style_label->text.font;
        lv_coord_t font_h              = lv_font_get_line_height(font);
        lv_coord_t h                   = lv_obj_get_height(roller);
 80186fe:	4630      	mov	r0, r6
 8018700:	7a1f      	ldrb	r7, [r3, #8]
 8018702:	f7f6 fbad 	bl	800ee60 <lv_obj_get_height>

        lv_coord_t line_y1 = ext->ddlist.sel_opt_id * (font_h + style_label->text.line_space) +
                             ext->ddlist.label->coords.y1 - roller_scrl->coords.y1;
 8018706:	6b2b      	ldr	r3, [r5, #48]	; 0x30
        lv_coord_t new_y = -line_y1 + (h - font_h) / 2;
 8018708:	1bc1      	subs	r1, r0, r7
 801870a:	2002      	movs	r0, #2
 801870c:	fb91 f1f0 	sdiv	r1, r1, r0
 8018710:	8a58      	ldrh	r0, [r3, #18]
 8018712:	8a63      	ldrh	r3, [r4, #18]
 8018714:	1ac0      	subs	r0, r0, r3
 8018716:	1a09      	subs	r1, r1, r0
        lv_coord_t line_y1 = ext->ddlist.sel_opt_id * (font_h + style_label->text.line_space) +
 8018718:	f9b8 002a 	ldrsh.w	r0, [r8, #42]	; 0x2a
 801871c:	19c3      	adds	r3, r0, r7
 801871e:	8f68      	ldrh	r0, [r5, #58]	; 0x3a
 8018720:	fb10 f003 	smulbb	r0, r0, r3
        lv_coord_t new_y = -line_y1 + (h - font_h) / 2;
 8018724:	1a09      	subs	r1, r1, r0
        lv_obj_set_y(roller_scrl, new_y);
 8018726:	b209      	sxth	r1, r1
 8018728:	4620      	mov	r0, r4
    }
}
 801872a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        lv_obj_set_y(roller_scrl, new_y);
 801872e:	f7f5 becb 	b.w	800e4c8 <lv_obj_set_y>
 8018732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018736 <scroll_anim_ready_cb>:

#if LV_USE_ANIMATION
static void scroll_anim_ready_cb(lv_anim_t * a)
{
    inf_normalize(a->var);
 8018736:	6800      	ldr	r0, [r0, #0]
 8018738:	f7ff bfc2 	b.w	80186c0 <inf_normalize>

0801873c <refr_position>:
{
 801873c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018740:	b08a      	sub	sp, #40	; 0x28
 8018742:	4607      	mov	r7, r0
 8018744:	460e      	mov	r6, r1
    lv_obj_t * roller_scrl         = lv_page_get_scrl(roller);
 8018746:	f7ff fa06 	bl	8017b56 <lv_page_get_scrl>
 801874a:	4605      	mov	r5, r0
    lv_roller_ext_t * ext          = lv_obj_get_ext_attr(roller);
 801874c:	4638      	mov	r0, r7
 801874e:	f7f6 fc7e 	bl	800f04e <lv_obj_get_ext_attr>
 8018752:	4681      	mov	r9, r0
    const lv_style_t * style_label = lv_obj_get_style(ext->ddlist.label);
 8018754:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8018756:	f7f6 fb8f 	bl	800ee78 <lv_obj_get_style>
 801875a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801875c:	4682      	mov	sl, r0
    lv_coord_t h                   = lv_obj_get_height(roller);
 801875e:	4638      	mov	r0, r7
 8018760:	f893 8008 	ldrb.w	r8, [r3, #8]
 8018764:	f7f6 fb7c 	bl	800ee60 <lv_obj_get_height>
 8018768:	4604      	mov	r4, r0
 801876a:	4638      	mov	r0, r7
 801876c:	f7ff f9f8 	bl	8017b60 <lv_page_get_anim_time>
 8018770:	4607      	mov	r7, r0
    if(anim_en == LV_ANIM_OFF || anim_time == 0) {
 8018772:	b106      	cbz	r6, 8018776 <refr_position+0x3a>
 8018774:	b910      	cbnz	r0, 801877c <refr_position+0x40>
        inf_normalize(roller_scrl);
 8018776:	4628      	mov	r0, r5
 8018778:	f7ff ffa2 	bl	80186c0 <inf_normalize>
        id * (font_h + style_label->text.line_space) + ext->ddlist.label->coords.y1 - roller_scrl->coords.y1;
 801877c:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
    lv_coord_t new_y = -line_y1 + (h - font_h) / 2;
 8018780:	2102      	movs	r1, #2
 8018782:	eba4 0408 	sub.w	r4, r4, r8
 8018786:	fb94 f4f1 	sdiv	r4, r4, r1
 801878a:	8a59      	ldrh	r1, [r3, #18]
 801878c:	8a6b      	ldrh	r3, [r5, #18]
 801878e:	1ac9      	subs	r1, r1, r3
 8018790:	1a64      	subs	r4, r4, r1
        id * (font_h + style_label->text.line_space) + ext->ddlist.label->coords.y1 - roller_scrl->coords.y1;
 8018792:	f9ba 102a 	ldrsh.w	r1, [sl, #42]	; 0x2a
 8018796:	eb01 0308 	add.w	r3, r1, r8
 801879a:	f8b9 103a 	ldrh.w	r1, [r9, #58]	; 0x3a
 801879e:	fb11 f103 	smulbb	r1, r1, r3
    lv_coord_t new_y = -line_y1 + (h - font_h) / 2;
 80187a2:	1a64      	subs	r4, r4, r1
 80187a4:	b224      	sxth	r4, r4
    if(anim_en == LV_ANIM_OFF || anim_time == 0) {
 80187a6:	b106      	cbz	r6, 80187aa <refr_position+0x6e>
 80187a8:	b937      	cbnz	r7, 80187b8 <refr_position+0x7c>
        lv_obj_set_y(roller_scrl, new_y);
 80187aa:	4621      	mov	r1, r4
 80187ac:	4628      	mov	r0, r5
 80187ae:	f7f5 fe8b 	bl	800e4c8 <lv_obj_set_y>
}
 80187b2:	b00a      	add	sp, #40	; 0x28
 80187b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        a.start          = lv_obj_get_y(roller_scrl);
 80187b8:	4628      	mov	r0, r5
        a.var            = roller_scrl;
 80187ba:	9500      	str	r5, [sp, #0]
        a.start          = lv_obj_get_y(roller_scrl);
 80187bc:	f7f6 fb44 	bl	800ee48 <lv_obj_get_y>
        a.exec_cb        = (lv_anim_exec_xcb_t)lv_obj_set_y;
 80187c0:	4b0e      	ldr	r3, [pc, #56]	; (80187fc <refr_position+0xc0>)
        a.playback       = 0;
 80187c2:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
        a.exec_cb        = (lv_anim_exec_xcb_t)lv_obj_set_y;
 80187c6:	9301      	str	r3, [sp, #4]
        a.path_cb        = lv_anim_path_linear;
 80187c8:	4b0d      	ldr	r3, [pc, #52]	; (8018800 <refr_position+0xc4>)
 80187ca:	9302      	str	r3, [sp, #8]
        a.ready_cb       = scroll_anim_ready_cb;
 80187cc:	4b0d      	ldr	r3, [pc, #52]	; (8018804 <refr_position+0xc8>)
 80187ce:	9303      	str	r3, [sp, #12]
        a.repeat         = 0;
 80187d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
        a.act_time       = 0;
 80187d4:	2300      	movs	r3, #0
        a.start          = lv_obj_get_y(roller_scrl);
 80187d6:	9004      	str	r0, [sp, #16]
        a.repeat         = 0;
 80187d8:	f363 0241 	bfi	r2, r3, #1, #1
        lv_anim_create(&a);
 80187dc:	4668      	mov	r0, sp
        a.end            = new_y;
 80187de:	9405      	str	r4, [sp, #20]
        a.act_time       = 0;
 80187e0:	f8ad 301a 	strh.w	r3, [sp, #26]
        a.time           = anim_time;
 80187e4:	f8ad 7018 	strh.w	r7, [sp, #24]
        a.playback_pause = 0;
 80187e8:	f8ad 301c 	strh.w	r3, [sp, #28]
        a.repeat         = 0;
 80187ec:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
        a.repeat_pause   = 0;
 80187f0:	f8ad 301e 	strh.w	r3, [sp, #30]
        lv_anim_create(&a);
 80187f4:	f7fb f8bc 	bl	8013970 <lv_anim_create>
}
 80187f8:	e7db      	b.n	80187b2 <refr_position+0x76>
 80187fa:	bf00      	nop
 80187fc:	0800e4c9 	.word	0x0800e4c9
 8018800:	08013799 	.word	0x08013799
 8018804:	08018737 	.word	0x08018737

08018808 <lv_roller_scrl_signal>:
    res = ancestor_scrl_signal(roller_scrl, sign, param);
 8018808:	4b3d      	ldr	r3, [pc, #244]	; (8018900 <lv_roller_scrl_signal+0xf8>)
{
 801880a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    res = ancestor_scrl_signal(roller_scrl, sign, param);
 801880e:	681b      	ldr	r3, [r3, #0]
{
 8018810:	4680      	mov	r8, r0
 8018812:	460f      	mov	r7, r1
    res = ancestor_scrl_signal(roller_scrl, sign, param);
 8018814:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8018816:	2801      	cmp	r0, #1
    res = ancestor_scrl_signal(roller_scrl, sign, param);
 8018818:	4605      	mov	r5, r0
    if(res != LV_RES_OK) return res;
 801881a:	d14c      	bne.n	80188b6 <lv_roller_scrl_signal+0xae>
    lv_indev_t * indev    = lv_indev_get_act();
 801881c:	f7f5 fbee 	bl	800dffc <lv_indev_get_act>
    int32_t id            = -1;
 8018820:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    lv_indev_t * indev    = lv_indev_get_act();
 8018824:	4681      	mov	r9, r0
    lv_obj_t * roller     = lv_obj_get_parent(roller_scrl);
 8018826:	4640      	mov	r0, r8
    int32_t id            = -1;
 8018828:	9301      	str	r3, [sp, #4]
    lv_obj_t * roller     = lv_obj_get_parent(roller_scrl);
 801882a:	f7f6 fad3 	bl	800edd4 <lv_obj_get_parent>
 801882e:	4604      	mov	r4, r0
    lv_roller_ext_t * ext = lv_obj_get_ext_attr(roller);
 8018830:	f7f6 fc0d 	bl	800f04e <lv_obj_get_ext_attr>
 8018834:	4606      	mov	r6, r0
    if(ext->ddlist.label == NULL)
 8018836:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8018838:	2800      	cmp	r0, #0
 801883a:	d05e      	beq.n	80188fa <lv_roller_scrl_signal+0xf2>
    const lv_style_t * style_label = lv_obj_get_style(ext->ddlist.label);
 801883c:	f7f6 fb1c 	bl	800ee78 <lv_obj_get_style>
    if(sign == LV_SIGNAL_DRAG_END) {
 8018840:	2f0e      	cmp	r7, #14
 8018842:	d13c      	bne.n	80188be <lv_roller_scrl_signal+0xb6>
        lv_coord_t label_y1   = ext->ddlist.label->coords.y1 - roller->coords.y1;
 8018844:	6b32      	ldr	r2, [r6, #48]	; 0x30
 8018846:	f9b4 c012 	ldrsh.w	ip, [r4, #18]
 801884a:	8a51      	ldrh	r1, [r2, #18]
        lv_coord_t label_unit = font_h + style_label->text.line_space;
 801884c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 801884e:	f9b0 e02a 	ldrsh.w	lr, [r0, #42]	; 0x2a
        lv_coord_t mid        = (roller->coords.y2 - roller->coords.y1) / 2;
 8018852:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
        lv_coord_t label_unit = font_h + style_label->text.line_space;
 8018856:	7a12      	ldrb	r2, [r2, #8]
        lv_coord_t label_y1   = ext->ddlist.label->coords.y1 - roller->coords.y1;
 8018858:	eba1 010c 	sub.w	r1, r1, ip
        id = (mid - label_y1 + style_label->text.line_space / 2) / label_unit;
 801885c:	b209      	sxth	r1, r1
        lv_coord_t mid        = (roller->coords.y2 - roller->coords.y1) / 2;
 801885e:	eba3 030c 	sub.w	r3, r3, ip
 8018862:	2702      	movs	r7, #2
        lv_coord_t label_unit = font_h + style_label->text.line_space;
 8018864:	4472      	add	r2, lr
        lv_coord_t mid        = (roller->coords.y2 - roller->coords.y1) / 2;
 8018866:	fb93 f3f7 	sdiv	r3, r3, r7
        id = (mid - label_y1 + style_label->text.line_space / 2) / label_unit;
 801886a:	1a5b      	subs	r3, r3, r1
 801886c:	fb9e f7f7 	sdiv	r7, lr, r7
 8018870:	b212      	sxth	r2, r2
 8018872:	443b      	add	r3, r7
 8018874:	fb93 f3f2 	sdiv	r3, r3, r2
        if(id < 0) id = 0;
 8018878:	2b00      	cmp	r3, #0
 801887a:	bfb8      	it	lt
 801887c:	2300      	movlt	r3, #0
 801887e:	9301      	str	r3, [sp, #4]
        if(id >= ext->ddlist.option_cnt) id = ext->ddlist.option_cnt - 1;
 8018880:	9a01      	ldr	r2, [sp, #4]
 8018882:	8f33      	ldrh	r3, [r6, #56]	; 0x38
 8018884:	4293      	cmp	r3, r2
 8018886:	bfd8      	it	le
 8018888:	f103 33ff 	addle.w	r3, r3, #4294967295	; 0xffffffff
        ext->ddlist.sel_opt_id     = id;
 801888c:	aa02      	add	r2, sp, #8
        if(id >= ext->ddlist.option_cnt) id = ext->ddlist.option_cnt - 1;
 801888e:	bfd8      	it	le
 8018890:	9301      	strle	r3, [sp, #4]
        ext->ddlist.sel_opt_id     = id;
 8018892:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8018896:	b29b      	uxth	r3, r3
 8018898:	8773      	strh	r3, [r6, #58]	; 0x3a
        ext->ddlist.sel_opt_id_ori = id;
 801889a:	87b3      	strh	r3, [r6, #60]	; 0x3c
        res                        = lv_event_send(roller, LV_EVENT_VALUE_CHANGED, &id);
 801889c:	210e      	movs	r1, #14
 801889e:	4620      	mov	r0, r4
 80188a0:	f7f5 fcc2 	bl	800e228 <lv_event_send>
        if(res != LV_RES_OK) return res;
 80188a4:	2801      	cmp	r0, #1
 80188a6:	d128      	bne.n	80188fa <lv_roller_scrl_signal+0xf2>
    if(id != -1) {
 80188a8:	9b01      	ldr	r3, [sp, #4]
 80188aa:	3301      	adds	r3, #1
 80188ac:	d003      	beq.n	80188b6 <lv_roller_scrl_signal+0xae>
        refr_position(roller, true);
 80188ae:	2101      	movs	r1, #1
 80188b0:	4620      	mov	r0, r4
 80188b2:	f7ff ff43 	bl	801873c <refr_position>
}
 80188b6:	4628      	mov	r0, r5
 80188b8:	b003      	add	sp, #12
 80188ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if(sign == LV_SIGNAL_RELEASED) {
 80188be:	2f0a      	cmp	r7, #10
 80188c0:	d114      	bne.n	80188ec <lv_roller_scrl_signal+0xe4>
        if(!lv_indev_is_dragging(indev)) {
 80188c2:	4648      	mov	r0, r9
 80188c4:	f7f5 fbbd 	bl	800e042 <lv_indev_is_dragging>
 80188c8:	4607      	mov	r7, r0
 80188ca:	2800      	cmp	r0, #0
 80188cc:	d1ec      	bne.n	80188a8 <lv_roller_scrl_signal+0xa0>
            id = ext->ddlist.sel_opt_id;
 80188ce:	8f73      	ldrh	r3, [r6, #58]	; 0x3a
 80188d0:	9301      	str	r3, [sp, #4]
            lv_group_t * g = lv_obj_get_group(roller);
 80188d2:	4620      	mov	r0, r4
 80188d4:	f7f6 fbc1 	bl	800f05a <lv_obj_get_group>
 80188d8:	4606      	mov	r6, r0
            bool editing   = lv_group_get_editing(g);
 80188da:	f7f5 fb7a 	bl	800dfd2 <lv_group_get_editing>
            if(editing) lv_group_set_editing(g, false);
 80188de:	2800      	cmp	r0, #0
 80188e0:	d0e2      	beq.n	80188a8 <lv_roller_scrl_signal+0xa0>
 80188e2:	4639      	mov	r1, r7
 80188e4:	4630      	mov	r0, r6
 80188e6:	f7f5 fb52 	bl	800df8e <lv_group_set_editing>
 80188ea:	e7dd      	b.n	80188a8 <lv_roller_scrl_signal+0xa0>
    } else if(sign == LV_SIGNAL_PRESSED) {
 80188ec:	2f07      	cmp	r7, #7
 80188ee:	d1db      	bne.n	80188a8 <lv_roller_scrl_signal+0xa0>
        lv_anim_del(roller_scrl, (lv_anim_exec_xcb_t)lv_obj_set_y);
 80188f0:	4904      	ldr	r1, [pc, #16]	; (8018904 <lv_roller_scrl_signal+0xfc>)
 80188f2:	4640      	mov	r0, r8
 80188f4:	f7fb f80e 	bl	8013914 <lv_anim_del>
 80188f8:	e7d6      	b.n	80188a8 <lv_roller_scrl_signal+0xa0>
 80188fa:	4605      	mov	r5, r0
 80188fc:	e7db      	b.n	80188b6 <lv_roller_scrl_signal+0xae>
 80188fe:	bf00      	nop
 8018900:	2000afe0 	.word	0x2000afe0
 8018904:	0800e4c9 	.word	0x0800e4c9

08018908 <refr_height>:
{
 8018908:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801890c:	4604      	mov	r4, r0
    lv_roller_ext_t * ext = lv_obj_get_ext_attr(roller);
 801890e:	f7f6 fb9e 	bl	800f04e <lv_obj_get_ext_attr>
 8018912:	4605      	mov	r5, r0
    if(ext->ddlist.label) {
 8018914:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8018916:	bb20      	cbnz	r0, 8018962 <refr_height+0x5a>
    lv_align_t obj_align  = LV_ALIGN_IN_LEFT_MID;
 8018918:	2607      	movs	r6, #7
    lv_obj_set_height(lv_page_get_scrl(roller), lv_obj_get_height(ext->ddlist.label) + lv_obj_get_height(roller));
 801891a:	4620      	mov	r0, r4
 801891c:	f7ff f91b 	bl	8017b56 <lv_page_get_scrl>
 8018920:	4680      	mov	r8, r0
 8018922:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8018924:	f7f6 fa9c 	bl	800ee60 <lv_obj_get_height>
 8018928:	4607      	mov	r7, r0
 801892a:	4620      	mov	r0, r4
 801892c:	f7f6 fa98 	bl	800ee60 <lv_obj_get_height>
 8018930:	1839      	adds	r1, r7, r0
 8018932:	b209      	sxth	r1, r1
 8018934:	4640      	mov	r0, r8
 8018936:	f7f6 f9c0 	bl	800ecba <lv_obj_set_height>
    lv_obj_align(ext->ddlist.label, NULL, obj_align, 0, 0);
 801893a:	2300      	movs	r3, #0
 801893c:	9300      	str	r3, [sp, #0]
 801893e:	4619      	mov	r1, r3
 8018940:	4632      	mov	r2, r6
 8018942:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8018944:	f7f5 fdc8 	bl	800e4d8 <lv_obj_align>
    lv_anim_del(lv_page_get_scrl(roller), (lv_anim_exec_xcb_t)lv_obj_set_y);
 8018948:	4620      	mov	r0, r4
 801894a:	f7ff f904 	bl	8017b56 <lv_page_get_scrl>
 801894e:	490a      	ldr	r1, [pc, #40]	; (8018978 <refr_height+0x70>)
 8018950:	f7fa ffe0 	bl	8013914 <lv_anim_del>
    lv_ddlist_set_selected(roller, ext->ddlist.sel_opt_id);
 8018954:	8f69      	ldrh	r1, [r5, #58]	; 0x3a
 8018956:	4620      	mov	r0, r4
}
 8018958:	b002      	add	sp, #8
 801895a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_ddlist_set_selected(roller, ext->ddlist.sel_opt_id);
 801895e:	f7fd ba90 	b.w	8015e82 <lv_ddlist_set_selected>
        lv_label_align_t label_align = lv_label_get_align(ext->ddlist.label);
 8018962:	f7fe fa29 	bl	8016db8 <lv_label_get_align>
        if(LV_LABEL_ALIGN_CENTER == label_align)
 8018966:	2801      	cmp	r0, #1
 8018968:	d003      	beq.n	8018972 <refr_height+0x6a>
        else if(LV_LABEL_ALIGN_RIGHT == label_align)
 801896a:	2802      	cmp	r0, #2
 801896c:	d1d4      	bne.n	8018918 <refr_height+0x10>
            obj_align = LV_ALIGN_IN_RIGHT_MID;
 801896e:	2608      	movs	r6, #8
 8018970:	e7d3      	b.n	801891a <refr_height+0x12>
            obj_align = LV_ALIGN_CENTER;
 8018972:	2600      	movs	r6, #0
 8018974:	e7d1      	b.n	801891a <refr_height+0x12>
 8018976:	bf00      	nop
 8018978:	0800e4c9 	.word	0x0800e4c9

0801897c <lv_roller_design>:
{
 801897c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if(mode == LV_DESIGN_COVER_CHK) {
 8018980:	2a02      	cmp	r2, #2
{
 8018982:	b09a      	sub	sp, #104	; 0x68
 8018984:	4604      	mov	r4, r0
 8018986:	460e      	mov	r6, r1
    if(mode == LV_DESIGN_COVER_CHK) {
 8018988:	f000 815e 	beq.w	8018c48 <lv_roller_design+0x2cc>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 801898c:	2a00      	cmp	r2, #0
 801898e:	f040 80e6 	bne.w	8018b5e <lv_roller_design+0x1e2>
        case LV_ROLLER_STYLE_BG: return lv_obj_get_style(roller);
 8018992:	f7f6 fa71 	bl	800ee78 <lv_obj_get_style>
 8018996:	4607      	mov	r7, r0
    lv_coord_t h = lv_obj_get_height(roller);
 8018998:	4620      	mov	r0, r4
 801899a:	f7f6 fa61 	bl	800ee60 <lv_obj_get_height>
    memcpy(dest, src, sizeof(lv_area_t));
 801899e:	4622      	mov	r2, r4
 80189a0:	4680      	mov	r8, r0
 80189a2:	f852 0f10 	ldr.w	r0, [r2, #16]!
 80189a6:	6851      	ldr	r1, [r2, #4]
    half_roller.x1 -= roller->ext_draw_pad; /*Add ext size too (e.g. because of shadow draw) */
 80189a8:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 80189aa:	ab09      	add	r3, sp, #36	; 0x24
 80189ac:	c303      	stmia	r3!, {r0, r1}
 80189ae:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 80189b2:	1a9b      	subs	r3, r3, r2
 80189b4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    half_roller.x2 += roller->ext_draw_pad;
 80189b8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 80189bc:	4413      	add	r3, r2
 80189be:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
    half_roller.y1 -= roller->ext_draw_pad;
 80189c2:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80189c6:	1a9b      	subs	r3, r3, r2
 80189c8:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    half_roller.y2 = roller->coords.y1 + h / 2;
 80189cc:	8a63      	ldrh	r3, [r4, #18]
 80189ce:	2502      	movs	r5, #2
 80189d0:	fb98 f5f5 	sdiv	r5, r8, r5
 80189d4:	b2ad      	uxth	r5, r5
 80189d6:	442b      	add	r3, r5
    union_ok = lv_area_intersect(&half_mask, &half_roller, mask);
 80189d8:	4632      	mov	r2, r6
 80189da:	a909      	add	r1, sp, #36	; 0x24
 80189dc:	a807      	add	r0, sp, #28
    half_roller.y2 = roller->coords.y1 + h / 2;
 80189de:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
    union_ok = lv_area_intersect(&half_mask, &half_roller, mask);
 80189e2:	f7fb f830 	bl	8013a46 <lv_area_intersect>
    half_roller.x1 += roller->ext_draw_pad; /*Revert ext. size adding*/
 80189e6:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80189e8:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80189ec:	441a      	add	r2, r3
 80189ee:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
    half_roller.x2 -= roller->ext_draw_pad;
 80189f2:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80189f6:	1ad2      	subs	r2, r2, r3
 80189f8:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
    half_roller.y1 += roller->ext_draw_pad;
 80189fc:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 8018a00:	4413      	add	r3, r2
 8018a02:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    half_roller.y2 += style->body.radius;
 8018a06:	88fa      	ldrh	r2, [r7, #6]
 8018a08:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8018a0c:	4413      	add	r3, r2
 8018a0e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
    if(union_ok) {
 8018a12:	b140      	cbz	r0, 8018a26 <lv_roller_design+0xaa>
        lv_draw_rect(&half_roller, &half_mask, style, lv_obj_get_opa_scale(roller));
 8018a14:	4620      	mov	r0, r4
 8018a16:	f7f6 fab2 	bl	800ef7e <lv_obj_get_opa_scale>
 8018a1a:	463a      	mov	r2, r7
 8018a1c:	4603      	mov	r3, r0
 8018a1e:	a907      	add	r1, sp, #28
 8018a20:	a809      	add	r0, sp, #36	; 0x24
 8018a22:	f7f8 fa39 	bl	8010e98 <lv_draw_rect>
    half_roller.x1 -= roller->ext_draw_pad; /*Add ext size too (e.g. because of shadow draw) */
 8018a26:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8018a28:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8018a2c:	1ad2      	subs	r2, r2, r3
 8018a2e:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
    half_roller.x2 += roller->ext_draw_pad;
 8018a32:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8018a36:	441a      	add	r2, r3
 8018a38:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
    half_roller.y2 = roller->coords.y2 + roller->ext_draw_pad;
 8018a3c:	8ae2      	ldrh	r2, [r4, #22]
 8018a3e:	4413      	add	r3, r2
 8018a40:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
    half_roller.y1 = roller->coords.y1 + h / 2;
 8018a44:	8a63      	ldrh	r3, [r4, #18]
 8018a46:	441d      	add	r5, r3
 8018a48:	b2ad      	uxth	r5, r5
    if((h & 0x1) == 0) half_roller.y1++; /*With even height the pixels in the middle would be drawn twice*/
 8018a4a:	f018 0f01 	tst.w	r8, #1
 8018a4e:	bf08      	it	eq
 8018a50:	3501      	addeq	r5, #1
    union_ok = lv_area_intersect(&half_mask, &half_roller, mask);
 8018a52:	4632      	mov	r2, r6
 8018a54:	a909      	add	r1, sp, #36	; 0x24
 8018a56:	a807      	add	r0, sp, #28
    if((h & 0x1) == 0) half_roller.y1++; /*With even height the pixels in the middle would be drawn twice*/
 8018a58:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
    union_ok = lv_area_intersect(&half_mask, &half_roller, mask);
 8018a5c:	f7fa fff3 	bl	8013a46 <lv_area_intersect>
    half_roller.x1 += roller->ext_draw_pad; /*Revert ext. size adding*/
 8018a60:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8018a62:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8018a66:	4413      	add	r3, r2
 8018a68:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    half_roller.x2 -= roller->ext_draw_pad;
 8018a6c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8018a70:	1a9b      	subs	r3, r3, r2
 8018a72:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
    half_roller.y2 -= roller->ext_draw_pad;
 8018a76:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8018a7a:	1a9b      	subs	r3, r3, r2
 8018a7c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
    half_roller.y1 -= style->body.radius;
 8018a80:	88fa      	ldrh	r2, [r7, #6]
 8018a82:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8018a86:	1a9b      	subs	r3, r3, r2
 8018a88:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    if(union_ok) {
 8018a8c:	b1e0      	cbz	r0, 8018ac8 <lv_roller_design+0x14c>
        memcpy(&style_tmp, style, sizeof(lv_style_t));
 8018a8e:	463b      	mov	r3, r7
 8018a90:	aa0b      	add	r2, sp, #44	; 0x2c
 8018a92:	f107 0e38 	add.w	lr, r7, #56	; 0x38
 8018a96:	6818      	ldr	r0, [r3, #0]
 8018a98:	6859      	ldr	r1, [r3, #4]
 8018a9a:	4615      	mov	r5, r2
 8018a9c:	c503      	stmia	r5!, {r0, r1}
 8018a9e:	3308      	adds	r3, #8
 8018aa0:	4573      	cmp	r3, lr
 8018aa2:	462a      	mov	r2, r5
 8018aa4:	d1f7      	bne.n	8018a96 <lv_roller_design+0x11a>
 8018aa6:	6818      	ldr	r0, [r3, #0]
 8018aa8:	6028      	str	r0, [r5, #0]
        style_tmp.body.main_color = style->body.grad_color;
 8018aaa:	88bb      	ldrh	r3, [r7, #4]
 8018aac:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
        style_tmp.body.grad_color = style->body.main_color;
 8018ab0:	887b      	ldrh	r3, [r7, #2]
 8018ab2:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
        lv_draw_rect(&half_roller, &half_mask, &style_tmp, lv_obj_get_opa_scale(roller));
 8018ab6:	4620      	mov	r0, r4
 8018ab8:	f7f6 fa61 	bl	800ef7e <lv_obj_get_opa_scale>
 8018abc:	aa0b      	add	r2, sp, #44	; 0x2c
 8018abe:	4603      	mov	r3, r0
 8018ac0:	a907      	add	r1, sp, #28
 8018ac2:	a809      	add	r0, sp, #36	; 0x24
 8018ac4:	f7f8 f9e8 	bl	8010e98 <lv_draw_rect>
        case LV_ROLLER_STYLE_BG: return lv_obj_get_style(roller);
 8018ac8:	4620      	mov	r0, r4
 8018aca:	f7f6 f9d5 	bl	800ee78 <lv_obj_get_style>
 8018ace:	4682      	mov	sl, r0
        lv_opa_t opa_scale       = lv_obj_get_opa_scale(roller);
 8018ad0:	4620      	mov	r0, r4
 8018ad2:	f7f6 fa54 	bl	800ef7e <lv_obj_get_opa_scale>
 8018ad6:	4680      	mov	r8, r0
        lv_roller_ext_t * ext    = lv_obj_get_ext_attr(roller);
 8018ad8:	4620      	mov	r0, r4
        const lv_font_t * font   = style->text.font;
 8018ada:	f8da 5024 	ldr.w	r5, [sl, #36]	; 0x24
        lv_roller_ext_t * ext    = lv_obj_get_ext_attr(roller);
 8018ade:	f7f6 fab6 	bl	800f04e <lv_obj_get_ext_attr>
 8018ae2:	4607      	mov	r7, r0
        rect_area.y1 = roller->coords.y1 + lv_obj_get_height(roller) / 2 - font_h / 2 - style->text.line_space / 2;
 8018ae4:	4620      	mov	r0, r4
 8018ae6:	f895 9008 	ldrb.w	r9, [r5, #8]
 8018aea:	8a65      	ldrh	r5, [r4, #18]
 8018aec:	f7f6 f9b8 	bl	800ee60 <lv_obj_get_height>
 8018af0:	2102      	movs	r1, #2
 8018af2:	fb90 f3f1 	sdiv	r3, r0, r1
 8018af6:	442b      	add	r3, r5
 8018af8:	f9ba 202a 	ldrsh.w	r2, [sl, #42]	; 0x2a
 8018afc:	fb92 f1f1 	sdiv	r1, r2, r1
 8018b00:	1a5b      	subs	r3, r3, r1
 8018b02:	eba3 0359 	sub.w	r3, r3, r9, lsr #1
        if((font_h & 0x1) && (style->text.line_space & 0x1)) rect_area.y1--; /*Compensate the two rounding error*/
 8018b06:	f019 0f01 	tst.w	r9, #1
        rect_area.y1 = roller->coords.y1 + lv_obj_get_height(roller) / 2 - font_h / 2 - style->text.line_space / 2;
 8018b0a:	b29b      	uxth	r3, r3
        if((font_h & 0x1) && (style->text.line_space & 0x1)) rect_area.y1--; /*Compensate the two rounding error*/
 8018b0c:	fa1f f189 	uxth.w	r1, r9
 8018b10:	d120      	bne.n	8018b54 <lv_roller_design+0x1d8>
 8018b12:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        rect_area.y2 = rect_area.y1 + font_h + style->text.line_space - 1;
 8018b16:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8018b1a:	3b01      	subs	r3, #1
 8018b1c:	4413      	add	r3, r2
 8018b1e:	440b      	add	r3, r1
        lv_obj_get_coords(roller, &roller_coords);
 8018b20:	4620      	mov	r0, r4
 8018b22:	a90b      	add	r1, sp, #44	; 0x2c
        rect_area.y2 = rect_area.y1 + font_h + style->text.line_space - 1;
 8018b24:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
        lv_obj_get_coords(roller, &roller_coords);
 8018b28:	f7f6 f982 	bl	800ee30 <lv_obj_get_coords>
        lv_obj_get_inner_coords(roller, &roller_coords);
 8018b2c:	a90b      	add	r1, sp, #44	; 0x2c
 8018b2e:	4620      	mov	r0, r4
 8018b30:	f7f6 f9f4 	bl	800ef1c <lv_obj_get_inner_coords>
        rect_area.x1 = roller_coords.x1;
 8018b34:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8018b38:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        rect_area.x2 = roller_coords.x2;
 8018b3c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8018b40:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
        lv_draw_rect(&rect_area, mask, ext->ddlist.sel_style, opa_scale);
 8018b44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018b46:	4643      	mov	r3, r8
 8018b48:	4631      	mov	r1, r6
 8018b4a:	a809      	add	r0, sp, #36	; 0x24
 8018b4c:	f7f8 f9a4 	bl	8010e98 <lv_draw_rect>
    return true;
 8018b50:	2001      	movs	r0, #1
 8018b52:	e07a      	b.n	8018c4a <lv_roller_design+0x2ce>
        if((font_h & 0x1) && (style->text.line_space & 0x1)) rect_area.y1--; /*Compensate the two rounding error*/
 8018b54:	07d0      	lsls	r0, r2, #31
 8018b56:	bf48      	it	mi
 8018b58:	f103 33ff 	addmi.w	r3, r3, #4294967295	; 0xffffffff
 8018b5c:	e7d9      	b.n	8018b12 <lv_roller_design+0x196>
    else if(mode == LV_DESIGN_DRAW_POST) {
 8018b5e:	2a01      	cmp	r2, #1
 8018b60:	d1f6      	bne.n	8018b50 <lv_roller_design+0x1d4>
        case LV_ROLLER_STYLE_BG: return lv_obj_get_style(roller);
 8018b62:	f7f6 f989 	bl	800ee78 <lv_obj_get_style>
 8018b66:	4607      	mov	r7, r0
        lv_roller_ext_t * ext    = lv_obj_get_ext_attr(roller);
 8018b68:	4620      	mov	r0, r4
 8018b6a:	f7f6 fa70 	bl	800f04e <lv_obj_get_ext_attr>
 8018b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b70:	4680      	mov	r8, r0
        lv_opa_t opa_scale       = lv_obj_get_opa_scale(roller);
 8018b72:	4620      	mov	r0, r4
 8018b74:	f893 a008 	ldrb.w	sl, [r3, #8]
 8018b78:	f7f6 fa01 	bl	800ef7e <lv_obj_get_opa_scale>
 8018b7c:	4681      	mov	r9, r0
        rect_area.y1 = roller->coords.y1 + lv_obj_get_height(roller) / 2 - font_h / 2 - style->text.line_space / 2;
 8018b7e:	4620      	mov	r0, r4
 8018b80:	8a65      	ldrh	r5, [r4, #18]
 8018b82:	f7f6 f96d 	bl	800ee60 <lv_obj_get_height>
 8018b86:	2102      	movs	r1, #2
 8018b88:	fb90 f3f1 	sdiv	r3, r0, r1
 8018b8c:	442b      	add	r3, r5
 8018b8e:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8018b92:	fb92 f1f1 	sdiv	r1, r2, r1
 8018b96:	1a5b      	subs	r3, r3, r1
 8018b98:	eba3 035a 	sub.w	r3, r3, sl, lsr #1
 8018b9c:	b29b      	uxth	r3, r3
        if((font_h & 0x1) && (style->text.line_space & 0x1)) rect_area.y1--; /*Compensate the two rounding error*/
 8018b9e:	f01a 0f01 	tst.w	sl, #1
        rect_area.y1 = roller->coords.y1 + lv_obj_get_height(roller) / 2 - font_h / 2 - style->text.line_space / 2;
 8018ba2:	b218      	sxth	r0, r3
        if((font_h & 0x1) && (style->text.line_space & 0x1)) rect_area.y1--; /*Compensate the two rounding error*/
 8018ba4:	fa1f f18a 	uxth.w	r1, sl
 8018ba8:	d145      	bne.n	8018c36 <lv_roller_design+0x2ba>
        rect_area.y1 = roller->coords.y1 + lv_obj_get_height(roller) / 2 - font_h / 2 - style->text.line_space / 2;
 8018baa:	f8ad 001e 	strh.w	r0, [sp, #30]
        rect_area.y2 = rect_area.y1 + font_h + style->text.line_space - 1;
 8018bae:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8018bb2:	3b01      	subs	r3, #1
 8018bb4:	4413      	add	r3, r2
 8018bb6:	440b      	add	r3, r1
 8018bb8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
        rect_area.x1 = roller->coords.x1;
 8018bbc:	8a23      	ldrh	r3, [r4, #16]
 8018bbe:	f8ad 301c 	strh.w	r3, [sp, #28]
        area_ok = lv_area_intersect(&mask_sel, mask, &rect_area);
 8018bc2:	aa07      	add	r2, sp, #28
        rect_area.x2 = roller->coords.x2;
 8018bc4:	8aa3      	ldrh	r3, [r4, #20]
 8018bc6:	f8ad 3020 	strh.w	r3, [sp, #32]
        area_ok = lv_area_intersect(&mask_sel, mask, &rect_area);
 8018bca:	4631      	mov	r1, r6
 8018bcc:	a809      	add	r0, sp, #36	; 0x24
 8018bce:	f7fa ff3a 	bl	8013a46 <lv_area_intersect>
        if(area_ok) {
 8018bd2:	2800      	cmp	r0, #0
 8018bd4:	d0bc      	beq.n	8018b50 <lv_roller_design+0x1d4>
        case LV_ROLLER_STYLE_SEL: return lv_ddlist_get_style(roller, LV_DDLIST_STYLE_SEL);
 8018bd6:	2101      	movs	r1, #1
 8018bd8:	4620      	mov	r0, r4
 8018bda:	f7fd faed 	bl	80161b8 <lv_ddlist_get_style>
 8018bde:	4604      	mov	r4, r0
                lv_label_align_t label_align = lv_label_get_align(ext->ddlist.label);
 8018be0:	f8d8 0030 	ldr.w	r0, [r8, #48]	; 0x30
 8018be4:	f7fe f8e8 	bl	8016db8 <lv_label_get_align>
                if(LV_LABEL_ALIGN_CENTER == label_align) {
 8018be8:	2801      	cmp	r0, #1
 8018bea:	d02b      	beq.n	8018c44 <lv_roller_design+0x2c8>
                    txt_align |= LV_TXT_FLAG_RIGHT;
 8018bec:	2802      	cmp	r0, #2
 8018bee:	bf14      	ite	ne
 8018bf0:	2500      	movne	r5, #0
 8018bf2:	2508      	moveq	r5, #8
            lv_style_copy(&new_style, style);
 8018bf4:	4639      	mov	r1, r7
 8018bf6:	a80b      	add	r0, sp, #44	; 0x2c
 8018bf8:	f7f6 fd6c 	bl	800f6d4 <lv_style_copy>
            new_style.text.color = sel_style->text.color;
 8018bfc:	8c23      	ldrh	r3, [r4, #32]
 8018bfe:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
            new_style.text.opa   = sel_style->text.opa;
 8018c02:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8018c06:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
            lv_draw_label(&ext->ddlist.label->coords, &mask_sel, &new_style, opa_scale,
 8018c0a:	f8d8 4030 	ldr.w	r4, [r8, #48]	; 0x30
                          lv_label_get_text(ext->ddlist.label), txt_align, NULL, -1, -1, NULL);
 8018c0e:	4620      	mov	r0, r4
 8018c10:	f7fe f8c6 	bl	8016da0 <lv_label_get_text>
            lv_draw_label(&ext->ddlist.label->coords, &mask_sel, &new_style, opa_scale,
 8018c14:	2300      	movs	r3, #0
 8018c16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018c1a:	9305      	str	r3, [sp, #20]
 8018c1c:	9204      	str	r2, [sp, #16]
 8018c1e:	9203      	str	r2, [sp, #12]
 8018c20:	9302      	str	r3, [sp, #8]
 8018c22:	e88d 0021 	stmia.w	sp, {r0, r5}
 8018c26:	464b      	mov	r3, r9
 8018c28:	aa0b      	add	r2, sp, #44	; 0x2c
 8018c2a:	a909      	add	r1, sp, #36	; 0x24
 8018c2c:	f104 0010 	add.w	r0, r4, #16
 8018c30:	f7f7 fe9c 	bl	801096c <lv_draw_label>
 8018c34:	e78c      	b.n	8018b50 <lv_roller_design+0x1d4>
        if((font_h & 0x1) && (style->text.line_space & 0x1)) rect_area.y1--; /*Compensate the two rounding error*/
 8018c36:	f012 0f01 	tst.w	r2, #1
 8018c3a:	d0b6      	beq.n	8018baa <lv_roller_design+0x22e>
 8018c3c:	3b01      	subs	r3, #1
 8018c3e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8018c42:	e7b4      	b.n	8018bae <lv_roller_design+0x232>
                    txt_align |= LV_TXT_FLAG_CENTER;
 8018c44:	2504      	movs	r5, #4
 8018c46:	e7d5      	b.n	8018bf4 <lv_roller_design+0x278>
        return false;
 8018c48:	2000      	movs	r0, #0
}
 8018c4a:	b01a      	add	sp, #104	; 0x68
 8018c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08018c50 <lv_roller_set_visible_row_count>:
{
 8018c50:	b538      	push	{r3, r4, r5, lr}
 8018c52:	460c      	mov	r4, r1
 8018c54:	4605      	mov	r5, r0
    lv_roller_ext_t * ext          = lv_obj_get_ext_attr(roller);
 8018c56:	f7f6 f9fa 	bl	800f04e <lv_obj_get_ext_attr>
    const lv_style_t * style_label = lv_obj_get_style(ext->ddlist.label);
 8018c5a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8018c5c:	f7f6 f90c 	bl	800ee78 <lv_obj_get_style>
    uint8_t n_line_space           = (row_cnt > 1) ? row_cnt - 1 : 1;
 8018c60:	2c01      	cmp	r4, #1
    lv_ddlist_set_fix_height(roller, lv_font_get_line_height(style_label->text.font) * row_cnt +
 8018c62:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8018c64:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 8018c66:	7a12      	ldrb	r2, [r2, #8]
    uint8_t n_line_space           = (row_cnt > 1) ? row_cnt - 1 : 1;
 8018c68:	bf86      	itte	hi
 8018c6a:	f104 33ff 	addhi.w	r3, r4, #4294967295	; 0xffffffff
 8018c6e:	b2db      	uxtbhi	r3, r3
 8018c70:	2301      	movls	r3, #1
    lv_ddlist_set_fix_height(roller, lv_font_get_line_height(style_label->text.font) * row_cnt +
 8018c72:	fb11 f103 	smulbb	r1, r1, r3
 8018c76:	fb02 1104 	mla	r1, r2, r4, r1
 8018c7a:	4628      	mov	r0, r5
 8018c7c:	b209      	sxth	r1, r1
}
 8018c7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_ddlist_set_fix_height(roller, lv_font_get_line_height(style_label->text.font) * row_cnt +
 8018c82:	f7fd b91c 	b.w	8015ebe <lv_ddlist_set_fix_height>
	...

08018c88 <lv_roller_create>:
{
 8018c88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018c8a:	460e      	mov	r6, r1
    lv_obj_t * new_roller = lv_ddlist_create(par, copy);
 8018c8c:	f7fd f97c 	bl	8015f88 <lv_ddlist_create>
    lv_mem_assert(new_roller);
 8018c90:	4604      	mov	r4, r0
 8018c92:	b900      	cbnz	r0, 8018c96 <lv_roller_create+0xe>
 8018c94:	e7fe      	b.n	8018c94 <lv_roller_create+0xc>
    if(ancestor_scrl_signal == NULL) ancestor_scrl_signal = lv_obj_get_signal_cb(lv_page_get_scrl(new_roller));
 8018c96:	4d3d      	ldr	r5, [pc, #244]	; (8018d8c <lv_roller_create+0x104>)
 8018c98:	682b      	ldr	r3, [r5, #0]
 8018c9a:	b923      	cbnz	r3, 8018ca6 <lv_roller_create+0x1e>
 8018c9c:	f7fe ff5b 	bl	8017b56 <lv_page_get_scrl>
 8018ca0:	f7f6 f9d1 	bl	800f046 <lv_obj_get_signal_cb>
 8018ca4:	6028      	str	r0, [r5, #0]
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_roller);
 8018ca6:	4d3a      	ldr	r5, [pc, #232]	; (8018d90 <lv_roller_create+0x108>)
 8018ca8:	682b      	ldr	r3, [r5, #0]
 8018caa:	b91b      	cbnz	r3, 8018cb4 <lv_roller_create+0x2c>
 8018cac:	4620      	mov	r0, r4
 8018cae:	f7f6 f9ca 	bl	800f046 <lv_obj_get_signal_cb>
 8018cb2:	6028      	str	r0, [r5, #0]
    lv_roller_ext_t * ext = lv_obj_allocate_ext_attr(new_roller, sizeof(lv_roller_ext_t));
 8018cb4:	2148      	movs	r1, #72	; 0x48
 8018cb6:	4620      	mov	r0, r4
 8018cb8:	f7f5 fb1e 	bl	800e2f8 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 8018cbc:	4605      	mov	r5, r0
 8018cbe:	b900      	cbnz	r0, 8018cc2 <lv_roller_create+0x3a>
 8018cc0:	e7fe      	b.n	8018cc0 <lv_roller_create+0x38>
    ext->ddlist.draw_arrow = 0; /*Do not draw arrow by default*/
 8018cc2:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
    lv_obj_set_signal_cb(new_roller, lv_roller_signal);
 8018cc6:	4933      	ldr	r1, [pc, #204]	; (8018d94 <lv_roller_create+0x10c>)
    ext->ddlist.draw_arrow = 0; /*Do not draw arrow by default*/
 8018cc8:	f36f 0382 	bfc	r3, #2, #1
 8018ccc:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    lv_obj_set_signal_cb(new_roller, lv_roller_signal);
 8018cd0:	4620      	mov	r0, r4
 8018cd2:	f7f5 fb0d 	bl	800e2f0 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_roller, lv_roller_design);
 8018cd6:	4930      	ldr	r1, [pc, #192]	; (8018d98 <lv_roller_create+0x110>)
 8018cd8:	4620      	mov	r0, r4
 8018cda:	f7f5 fb0b 	bl	800e2f4 <lv_obj_set_design_cb>
    if(copy == NULL) {
 8018cde:	bbce      	cbnz	r6, 8018d54 <lv_roller_create+0xcc>
        lv_obj_t * scrl = lv_page_get_scrl(new_roller);
 8018ce0:	4620      	mov	r0, r4
 8018ce2:	f7fe ff38 	bl	8017b56 <lv_page_get_scrl>
        lv_obj_set_drag(scrl, true);                                  /*In ddlist it might be disabled*/
 8018ce6:	2101      	movs	r1, #1
        lv_obj_t * scrl = lv_page_get_scrl(new_roller);
 8018ce8:	4607      	mov	r7, r0
        lv_obj_set_drag(scrl, true);                                  /*In ddlist it might be disabled*/
 8018cea:	f7f5 fa34 	bl	800e156 <lv_obj_set_drag>
    lv_cont_set_fit2(lv_page_get_scrl(page), hor, ver);
 8018cee:	4620      	mov	r0, r4
 8018cf0:	f7fe ff31 	bl	8017b56 <lv_page_get_scrl>
 8018cf4:	2201      	movs	r2, #1
 8018cf6:	4611      	mov	r1, r2
 8018cf8:	4633      	mov	r3, r6
 8018cfa:	9600      	str	r6, [sp, #0]
 8018cfc:	f7fc fb2b 	bl	8015356 <lv_cont_set_fit4>
        lv_ddlist_open(new_roller, false);
 8018d00:	4631      	mov	r1, r6
 8018d02:	4620      	mov	r0, r4
 8018d04:	f7fd fbb6 	bl	8016474 <lv_ddlist_open>
    lv_page_set_anim_time(ddlist, anim_time);
 8018d08:	21c8      	movs	r1, #200	; 0xc8
 8018d0a:	4620      	mov	r0, r4
 8018d0c:	f7fe feed 	bl	8017aea <lv_page_set_anim_time>
        lv_ddlist_set_stay_open(new_roller, true);
 8018d10:	2101      	movs	r1, #1
 8018d12:	4620      	mov	r0, r4
 8018d14:	f7fd f907 	bl	8015f26 <lv_ddlist_set_stay_open>
        lv_roller_set_visible_row_count(new_roller, 3);
 8018d18:	2103      	movs	r1, #3
 8018d1a:	4620      	mov	r0, r4
 8018d1c:	f7ff ff98 	bl	8018c50 <lv_roller_set_visible_row_count>
        lv_label_set_align(ext->ddlist.label, LV_LABEL_ALIGN_CENTER);
 8018d20:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8018d22:	2101      	movs	r1, #1
 8018d24:	f7fe f813 	bl	8016d4e <lv_label_set_align>
        lv_obj_set_signal_cb(scrl, lv_roller_scrl_signal);
 8018d28:	491c      	ldr	r1, [pc, #112]	; (8018d9c <lv_roller_create+0x114>)
 8018d2a:	4638      	mov	r0, r7
 8018d2c:	f7f5 fae0 	bl	800e2f0 <lv_obj_set_signal_cb>
        lv_theme_t * th = lv_theme_get_current();
 8018d30:	f000 f958 	bl	8018fe4 <lv_theme_get_current>
        if(th) {
 8018d34:	4605      	mov	r5, r0
 8018d36:	b320      	cbz	r0, 8018d82 <lv_roller_create+0xfa>
        case LV_ROLLER_STYLE_BG: lv_obj_set_style(roller, style); break;
 8018d38:	f8d0 1158 	ldr.w	r1, [r0, #344]	; 0x158
 8018d3c:	4620      	mov	r0, r4
 8018d3e:	f7f6 f86d 	bl	800ee1c <lv_obj_set_style>
        case LV_ROLLER_STYLE_SEL: lv_ddlist_set_style(roller, LV_DDLIST_STYLE_SEL, style); break;
 8018d42:	f8d5 215c 	ldr.w	r2, [r5, #348]	; 0x15c
 8018d46:	2101      	movs	r1, #1
 8018d48:	4620      	mov	r0, r4
 8018d4a:	f7fd f8f7 	bl	8015f3c <lv_ddlist_set_style>
}
 8018d4e:	4620      	mov	r0, r4
 8018d50:	b003      	add	sp, #12
 8018d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_roller_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8018d54:	4630      	mov	r0, r6
 8018d56:	f7f6 f97a 	bl	800f04e <lv_obj_get_ext_attr>
        ext->mode                  = copy_ext->mode;
 8018d5a:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 8018d5e:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
 8018d62:	f362 0300 	bfi	r3, r2, #0, #1
 8018d66:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
        lv_obj_t * scrl = lv_page_get_scrl(new_roller);
 8018d6a:	4620      	mov	r0, r4
 8018d6c:	f7fe fef3 	bl	8017b56 <lv_page_get_scrl>
        lv_ddlist_open(new_roller, false);
 8018d70:	2100      	movs	r1, #0
        lv_obj_t * scrl = lv_page_get_scrl(new_roller);
 8018d72:	4605      	mov	r5, r0
        lv_ddlist_open(new_roller, false);
 8018d74:	4620      	mov	r0, r4
 8018d76:	f7fd fb7d 	bl	8016474 <lv_ddlist_open>
        lv_obj_set_signal_cb(scrl, lv_roller_scrl_signal);
 8018d7a:	4908      	ldr	r1, [pc, #32]	; (8018d9c <lv_roller_create+0x114>)
 8018d7c:	4628      	mov	r0, r5
 8018d7e:	f7f5 fab7 	bl	800e2f0 <lv_obj_set_signal_cb>
        lv_obj_refresh_style(new_roller); /*Refresh the style with new signal function*/
 8018d82:	4620      	mov	r0, r4
 8018d84:	f7f5 ffa1 	bl	800ecca <lv_obj_refresh_style>
 8018d88:	e7e1      	b.n	8018d4e <lv_roller_create+0xc6>
 8018d8a:	bf00      	nop
 8018d8c:	2000afe0 	.word	0x2000afe0
 8018d90:	2000afe4 	.word	0x2000afe4
 8018d94:	08018e1d 	.word	0x08018e1d
 8018d98:	0801897d 	.word	0x0801897d
 8018d9c:	08018809 	.word	0x08018809

08018da0 <lv_roller_set_style>:
{
 8018da0:	b410      	push	{r4}
    switch(type) {
 8018da2:	b121      	cbz	r1, 8018dae <lv_roller_set_style+0xe>
 8018da4:	2901      	cmp	r1, #1
 8018da6:	d007      	beq.n	8018db8 <lv_roller_set_style+0x18>
}
 8018da8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018dac:	4770      	bx	lr
        case LV_ROLLER_STYLE_BG: lv_obj_set_style(roller, style); break;
 8018dae:	4611      	mov	r1, r2
}
 8018db0:	f85d 4b04 	ldr.w	r4, [sp], #4
        case LV_ROLLER_STYLE_BG: lv_obj_set_style(roller, style); break;
 8018db4:	f7f6 b832 	b.w	800ee1c <lv_obj_set_style>
}
 8018db8:	f85d 4b04 	ldr.w	r4, [sp], #4
        case LV_ROLLER_STYLE_SEL: lv_ddlist_set_style(roller, LV_DDLIST_STYLE_SEL, style); break;
 8018dbc:	f7fd b8be 	b.w	8015f3c <lv_ddlist_set_style>

08018dc0 <lv_roller_get_selected>:
{
 8018dc0:	b538      	push	{r3, r4, r5, lr}
 8018dc2:	4605      	mov	r5, r0
    lv_roller_ext_t * ext = lv_obj_get_ext_attr(roller);
 8018dc4:	f7f6 f943 	bl	800f04e <lv_obj_get_ext_attr>
    if(ext->mode == LV_ROLLER_MODE_INIFINITE) {
 8018dc8:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8018dcc:	07db      	lsls	r3, r3, #31
 8018dce:	d404      	bmi.n	8018dda <lv_roller_get_selected+0x1a>
        return lv_ddlist_get_selected(roller);
 8018dd0:	4628      	mov	r0, r5
}
 8018dd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return lv_ddlist_get_selected(roller);
 8018dd6:	f7fd b9b3 	b.w	8016140 <lv_ddlist_get_selected>
        uint16_t real_id_cnt = ext->ddlist.option_cnt / LV_ROLLER_INF_PAGES;
 8018dda:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 8018ddc:	2007      	movs	r0, #7
 8018dde:	fbb4 f4f0 	udiv	r4, r4, r0
        return lv_ddlist_get_selected(roller) % real_id_cnt;
 8018de2:	4628      	mov	r0, r5
 8018de4:	f7fd f9ac 	bl	8016140 <lv_ddlist_get_selected>
 8018de8:	fbb0 f3f4 	udiv	r3, r0, r4
 8018dec:	fb03 0014 	mls	r0, r3, r4, r0
 8018df0:	b280      	uxth	r0, r0
}
 8018df2:	bd38      	pop	{r3, r4, r5, pc}

08018df4 <lv_roller_set_selected>:
{
 8018df4:	b570      	push	{r4, r5, r6, lr}
 8018df6:	460d      	mov	r5, r1
 8018df8:	4604      	mov	r4, r0
 8018dfa:	4616      	mov	r6, r2
    if(lv_roller_get_selected(roller) == sel_opt) return;
 8018dfc:	f7ff ffe0 	bl	8018dc0 <lv_roller_get_selected>
 8018e00:	42a8      	cmp	r0, r5
 8018e02:	d009      	beq.n	8018e18 <lv_roller_set_selected+0x24>
    lv_ddlist_set_selected(roller, sel_opt);
 8018e04:	4629      	mov	r1, r5
 8018e06:	4620      	mov	r0, r4
 8018e08:	f7fd f83b 	bl	8015e82 <lv_ddlist_set_selected>
    refr_position(roller, anim);
 8018e0c:	4631      	mov	r1, r6
 8018e0e:	4620      	mov	r0, r4
}
 8018e10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    refr_position(roller, anim);
 8018e14:	f7ff bc92 	b.w	801873c <refr_position>
 8018e18:	bd70      	pop	{r4, r5, r6, pc}
	...

08018e1c <lv_roller_signal>:
{
 8018e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(sign != LV_SIGNAL_CONTROL && sign != LV_SIGNAL_FOCUS && sign != LV_SIGNAL_DEFOCUS) {
 8018e1e:	f1a1 030f 	sub.w	r3, r1, #15
 8018e22:	2b02      	cmp	r3, #2
{
 8018e24:	4605      	mov	r5, r0
 8018e26:	460f      	mov	r7, r1
 8018e28:	4616      	mov	r6, r2
    if(sign != LV_SIGNAL_CONTROL && sign != LV_SIGNAL_FOCUS && sign != LV_SIGNAL_DEFOCUS) {
 8018e2a:	d80d      	bhi.n	8018e48 <lv_roller_signal+0x2c>
    lv_roller_ext_t * ext = lv_obj_get_ext_attr(roller);
 8018e2c:	4628      	mov	r0, r5
 8018e2e:	f7f6 f90e 	bl	800f04e <lv_obj_get_ext_attr>
    if(sign == LV_SIGNAL_STYLE_CHG) {
 8018e32:	2f04      	cmp	r7, #4
    lv_roller_ext_t * ext = lv_obj_get_ext_attr(roller);
 8018e34:	4604      	mov	r4, r0
    if(sign == LV_SIGNAL_STYLE_CHG) {
 8018e36:	d10d      	bne.n	8018e54 <lv_roller_signal+0x38>
        refr_height(roller);
 8018e38:	4628      	mov	r0, r5
 8018e3a:	f7ff fd65 	bl	8018908 <refr_height>
            refr_position(roller, false);
 8018e3e:	2100      	movs	r1, #0
            refr_position(roller, true);
 8018e40:	4628      	mov	r0, r5
 8018e42:	f7ff fc7b 	bl	801873c <refr_position>
 8018e46:	e029      	b.n	8018e9c <lv_roller_signal+0x80>
        res = ancestor_signal(roller, sign, param);
 8018e48:	4b39      	ldr	r3, [pc, #228]	; (8018f30 <lv_roller_signal+0x114>)
 8018e4a:	681b      	ldr	r3, [r3, #0]
 8018e4c:	4798      	blx	r3
        if(res != LV_RES_OK) return res;
 8018e4e:	2801      	cmp	r0, #1
 8018e50:	d0ec      	beq.n	8018e2c <lv_roller_signal+0x10>
}
 8018e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if(sign == LV_SIGNAL_CORD_CHG) {
 8018e54:	2f02      	cmp	r7, #2
 8018e56:	d123      	bne.n	8018ea0 <lv_roller_signal+0x84>
        if(lv_obj_get_width(roller) != lv_area_get_width(param) ||
 8018e58:	4628      	mov	r0, r5
 8018e5a:	f7f5 fffb 	bl	800ee54 <lv_obj_get_width>
    return area_p->x2 - area_p->x1 + 1;
 8018e5e:	88b3      	ldrh	r3, [r6, #4]
 8018e60:	8832      	ldrh	r2, [r6, #0]
 8018e62:	3301      	adds	r3, #1
 8018e64:	1a9b      	subs	r3, r3, r2
 8018e66:	b21b      	sxth	r3, r3
 8018e68:	4298      	cmp	r0, r3
 8018e6a:	d00d      	beq.n	8018e88 <lv_roller_signal+0x6c>
            refr_height(roller);
 8018e6c:	4628      	mov	r0, r5
 8018e6e:	f7ff fd4b 	bl	8018908 <refr_height>
            lv_anim_del(lv_page_get_scrl(roller), (lv_anim_exec_xcb_t)lv_obj_set_y);
 8018e72:	4628      	mov	r0, r5
 8018e74:	f7fe fe6f 	bl	8017b56 <lv_page_get_scrl>
 8018e78:	492e      	ldr	r1, [pc, #184]	; (8018f34 <lv_roller_signal+0x118>)
 8018e7a:	f7fa fd4b 	bl	8013914 <lv_anim_del>
            lv_ddlist_set_selected(roller, ext->ddlist.sel_opt_id);
 8018e7e:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
 8018e80:	4628      	mov	r0, r5
 8018e82:	f7fc fffe 	bl	8015e82 <lv_ddlist_set_selected>
 8018e86:	e7da      	b.n	8018e3e <lv_roller_signal+0x22>
           lv_obj_get_height(roller) != lv_area_get_height(param)) {
 8018e88:	4628      	mov	r0, r5
 8018e8a:	f7f5 ffe9 	bl	800ee60 <lv_obj_get_height>
    return area_p->y2 - area_p->y1 + 1;
 8018e8e:	88f3      	ldrh	r3, [r6, #6]
 8018e90:	8872      	ldrh	r2, [r6, #2]
 8018e92:	3301      	adds	r3, #1
 8018e94:	1a9b      	subs	r3, r3, r2
        if(lv_obj_get_width(roller) != lv_area_get_width(param) ||
 8018e96:	b21b      	sxth	r3, r3
 8018e98:	4298      	cmp	r0, r3
 8018e9a:	d1e7      	bne.n	8018e6c <lv_roller_signal+0x50>
    return res;
 8018e9c:	2001      	movs	r0, #1
 8018e9e:	e7d8      	b.n	8018e52 <lv_roller_signal+0x36>
    } else if(sign == LV_SIGNAL_FOCUS) {
 8018ea0:	2f0f      	cmp	r7, #15
 8018ea2:	d116      	bne.n	8018ed2 <lv_roller_signal+0xb6>
        lv_group_t * g             = lv_obj_get_group(roller);
 8018ea4:	4628      	mov	r0, r5
 8018ea6:	f7f6 f8d8 	bl	800f05a <lv_obj_get_group>
        bool editing               = lv_group_get_editing(g);
 8018eaa:	f7f5 f892 	bl	800dfd2 <lv_group_get_editing>
 8018eae:	4606      	mov	r6, r0
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 8018eb0:	f7f5 f8a4 	bl	800dffc <lv_indev_get_act>
 8018eb4:	f7f5 f8a8 	bl	800e008 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 8018eb8:	2804      	cmp	r0, #4
 8018eba:	d107      	bne.n	8018ecc <lv_roller_signal+0xb0>
            if(!editing) {
 8018ebc:	b936      	cbnz	r6, 8018ecc <lv_roller_signal+0xb0>
        if(ext->ddlist.sel_opt_id != ext->ddlist.sel_opt_id_ori) {
 8018ebe:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8018ec0:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 8018ec2:	429a      	cmp	r2, r3
 8018ec4:	d0ea      	beq.n	8018e9c <lv_roller_signal+0x80>
            ext->ddlist.sel_opt_id = ext->ddlist.sel_opt_id_ori;
 8018ec6:	8763      	strh	r3, [r4, #58]	; 0x3a
            refr_position(roller, true);
 8018ec8:	2101      	movs	r1, #1
 8018eca:	e7b9      	b.n	8018e40 <lv_roller_signal+0x24>
            ext->ddlist.sel_opt_id_ori = ext->ddlist.sel_opt_id; /*Save the current value. Used to revert this state if
 8018ecc:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8018ece:	87a3      	strh	r3, [r4, #60]	; 0x3c
 8018ed0:	e7e4      	b.n	8018e9c <lv_roller_signal+0x80>
    } else if(sign == LV_SIGNAL_DEFOCUS) {
 8018ed2:	2f10      	cmp	r7, #16
 8018ed4:	d0f3      	beq.n	8018ebe <lv_roller_signal+0xa2>
    } else if(sign == LV_SIGNAL_CONTROL) {
 8018ed6:	2f11      	cmp	r7, #17
 8018ed8:	d11b      	bne.n	8018f12 <lv_roller_signal+0xf6>
        char c = *((char *)param);
 8018eda:	7833      	ldrb	r3, [r6, #0]
        if(c == LV_KEY_RIGHT || c == LV_KEY_DOWN) {
 8018edc:	f1a3 0212 	sub.w	r2, r3, #18
 8018ee0:	2a01      	cmp	r2, #1
 8018ee2:	d80c      	bhi.n	8018efe <lv_roller_signal+0xe2>
            if(ext->ddlist.sel_opt_id + 1 < ext->ddlist.option_cnt) {
 8018ee4:	8f41      	ldrh	r1, [r0, #58]	; 0x3a
 8018ee6:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8018ee8:	3101      	adds	r1, #1
 8018eea:	4299      	cmp	r1, r3
 8018eec:	dad6      	bge.n	8018e9c <lv_roller_signal+0x80>
                uint16_t ori_id = ext->ddlist.sel_opt_id_ori; /*lv_roller_set_selceted will overwrite this*/
 8018eee:	8f86      	ldrh	r6, [r0, #60]	; 0x3c
                lv_roller_set_selected(roller, ext->ddlist.sel_opt_id - 1, true);
 8018ef0:	2201      	movs	r2, #1
 8018ef2:	b289      	uxth	r1, r1
 8018ef4:	4628      	mov	r0, r5
 8018ef6:	f7ff ff7d 	bl	8018df4 <lv_roller_set_selected>
                ext->ddlist.sel_opt_id_ori = ori_id;
 8018efa:	87a6      	strh	r6, [r4, #60]	; 0x3c
 8018efc:	e7ce      	b.n	8018e9c <lv_roller_signal+0x80>
        } else if(c == LV_KEY_LEFT || c == LV_KEY_UP) {
 8018efe:	2b14      	cmp	r3, #20
 8018f00:	d001      	beq.n	8018f06 <lv_roller_signal+0xea>
 8018f02:	2b11      	cmp	r3, #17
 8018f04:	d1ca      	bne.n	8018e9c <lv_roller_signal+0x80>
            if(ext->ddlist.sel_opt_id > 0) {
 8018f06:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
 8018f08:	2900      	cmp	r1, #0
 8018f0a:	d0c7      	beq.n	8018e9c <lv_roller_signal+0x80>
                uint16_t ori_id = ext->ddlist.sel_opt_id_ori; /*lv_roller_set_selceted will overwrite this*/
 8018f0c:	8fa6      	ldrh	r6, [r4, #60]	; 0x3c
                lv_roller_set_selected(roller, ext->ddlist.sel_opt_id - 1, true);
 8018f0e:	3901      	subs	r1, #1
 8018f10:	e7ee      	b.n	8018ef0 <lv_roller_signal+0xd4>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8018f12:	2f06      	cmp	r7, #6
 8018f14:	d1c2      	bne.n	8018e9c <lv_roller_signal+0x80>
 8018f16:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 8018f18:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8018f1c:	b2da      	uxtb	r2, r3
 8018f1e:	b119      	cbz	r1, 8018f28 <lv_roller_signal+0x10c>
 8018f20:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8018f22:	2b07      	cmp	r3, #7
 8018f24:	d1f8      	bne.n	8018f18 <lv_roller_signal+0xfc>
 8018f26:	461a      	mov	r2, r3
        buf->type[i] = "lv_roller";
 8018f28:	4b03      	ldr	r3, [pc, #12]	; (8018f38 <lv_roller_signal+0x11c>)
 8018f2a:	f846 3022 	str.w	r3, [r6, r2, lsl #2]
 8018f2e:	e7b5      	b.n	8018e9c <lv_roller_signal+0x80>
 8018f30:	2000afe4 	.word	0x2000afe4
 8018f34:	0800e4c9 	.word	0x0800e4c9
 8018f38:	080d8a3c 	.word	0x080d8a3c

08018f3c <lv_roller_set_options>:
{
 8018f3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f40:	4605      	mov	r5, r0
 8018f42:	4688      	mov	r8, r1
 8018f44:	4614      	mov	r4, r2
    lv_roller_ext_t * ext = lv_obj_get_ext_attr(roller);
 8018f46:	f7f6 f882 	bl	800f04e <lv_obj_get_ext_attr>
 8018f4a:	4607      	mov	r7, r0
 8018f4c:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
    if(mode == LV_ROLLER_MODE_NORMAL) {
 8018f50:	b96c      	cbnz	r4, 8018f6e <lv_roller_set_options+0x32>
        ext->mode = LV_ROLLER_MODE_NORMAL;
 8018f52:	f364 0300 	bfi	r3, r4, #0, #1
 8018f56:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
        lv_ddlist_set_options(roller, options);
 8018f5a:	4641      	mov	r1, r8
 8018f5c:	4628      	mov	r0, r5
 8018f5e:	f7fc ff53 	bl	8015e08 <lv_ddlist_set_options>
        refr_height(roller);
 8018f62:	4628      	mov	r0, r5
}
 8018f64:	b003      	add	sp, #12
 8018f66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        refr_height(roller);
 8018f6a:	f7ff bccd 	b.w	8018908 <refr_height>
        ext->mode = LV_ROLLER_MODE_INIFINITE;
 8018f6e:	f043 0301 	orr.w	r3, r3, #1
 8018f72:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
        uint32_t opt_len = strlen(options) + 1; /*+1 to add '\n' after option lists*/
 8018f76:	4640      	mov	r0, r8
 8018f78:	f7e7 f92a 	bl	80001d0 <strlen>
 8018f7c:	1c46      	adds	r6, r0, #1
        char * opt_extra = lv_mem_alloc(opt_len * LV_ROLLER_INF_PAGES);
 8018f7e:	ebc6 0ac6 	rsb	sl, r6, r6, lsl #3
 8018f82:	4650      	mov	r0, sl
 8018f84:	f7fa ffac 	bl	8013ee0 <lv_mem_alloc>
 8018f88:	2407      	movs	r4, #7
 8018f8a:	4681      	mov	r9, r0
 8018f8c:	eb00 0b06 	add.w	fp, r0, r6
            opt_extra[opt_len * (i + 1) - 1] = '\n';
 8018f90:	230a      	movs	r3, #10
            strcpy(&opt_extra[opt_len * i], options);
 8018f92:	ebab 0006 	sub.w	r0, fp, r6
 8018f96:	4641      	mov	r1, r8
 8018f98:	3c01      	subs	r4, #1
 8018f9a:	9301      	str	r3, [sp, #4]
 8018f9c:	f000 fb76 	bl	801968c <strcpy>
            opt_extra[opt_len * (i + 1) - 1] = '\n';
 8018fa0:	9b01      	ldr	r3, [sp, #4]
 8018fa2:	f80b 3c01 	strb.w	r3, [fp, #-1]
        for(i = 0; i < LV_ROLLER_INF_PAGES; i++) {
 8018fa6:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8018faa:	44b3      	add	fp, r6
 8018fac:	d1f1      	bne.n	8018f92 <lv_roller_set_options+0x56>
        opt_extra[opt_len * LV_ROLLER_INF_PAGES - 1] = '\0';
 8018fae:	44ca      	add	sl, r9
        lv_ddlist_set_options(roller, opt_extra);
 8018fb0:	4649      	mov	r1, r9
 8018fb2:	4628      	mov	r0, r5
        opt_extra[opt_len * LV_ROLLER_INF_PAGES - 1] = '\0';
 8018fb4:	f80a 4c01 	strb.w	r4, [sl, #-1]
        lv_ddlist_set_options(roller, opt_extra);
 8018fb8:	f7fc ff26 	bl	8015e08 <lv_ddlist_set_options>
        lv_mem_free(opt_extra);
 8018fbc:	4648      	mov	r0, r9
 8018fbe:	f7fa ffc5 	bl	8013f4c <lv_mem_free>
        refr_height(roller);
 8018fc2:	4628      	mov	r0, r5
 8018fc4:	f7ff fca0 	bl	8018908 <refr_height>
        uint16_t real_id_cnt = ext->ddlist.option_cnt / LV_ROLLER_INF_PAGES;
 8018fc8:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8018fca:	2307      	movs	r3, #7
 8018fcc:	fbb1 f1f3 	udiv	r1, r1, r3
        lv_roller_set_selected(roller, ((LV_ROLLER_INF_PAGES / 2) + 1) * real_id_cnt, false); /*Select the middle page*/
 8018fd0:	0089      	lsls	r1, r1, #2
 8018fd2:	b289      	uxth	r1, r1
 8018fd4:	4622      	mov	r2, r4
 8018fd6:	4628      	mov	r0, r5
}
 8018fd8:	b003      	add	sp, #12
 8018fda:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        lv_roller_set_selected(roller, ((LV_ROLLER_INF_PAGES / 2) + 1) * real_id_cnt, false); /*Select the middle page*/
 8018fde:	f7ff bf09 	b.w	8018df4 <lv_roller_set_selected>
	...

08018fe4 <lv_theme_get_current>:
    if(!inited)
        return NULL;
    else
        return &current_theme;
#endif
}
 8018fe4:	4b01      	ldr	r3, [pc, #4]	; (8018fec <lv_theme_get_current+0x8>)
 8018fe6:	6818      	ldr	r0, [r3, #0]
 8018fe8:	4770      	bx	lr
 8018fea:	bf00      	nop
 8018fec:	2000afe8 	.word	0x2000afe8

08018ff0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8018ff0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8019028 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8018ff4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8018ff6:	e003      	b.n	8019000 <LoopCopyDataInit>

08018ff8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8018ff8:	4b0c      	ldr	r3, [pc, #48]	; (801902c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8018ffa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8018ffc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8018ffe:	3104      	adds	r1, #4

08019000 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8019000:	480b      	ldr	r0, [pc, #44]	; (8019030 <LoopForever+0xa>)
	ldr	r3, =_edata
 8019002:	4b0c      	ldr	r3, [pc, #48]	; (8019034 <LoopForever+0xe>)
	adds	r2, r0, r1
 8019004:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8019006:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8019008:	d3f6      	bcc.n	8018ff8 <CopyDataInit>
	ldr	r2, =_sbss
 801900a:	4a0b      	ldr	r2, [pc, #44]	; (8019038 <LoopForever+0x12>)
	b	LoopFillZerobss
 801900c:	e002      	b.n	8019014 <LoopFillZerobss>

0801900e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 801900e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8019010:	f842 3b04 	str.w	r3, [r2], #4

08019014 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8019014:	4b09      	ldr	r3, [pc, #36]	; (801903c <LoopForever+0x16>)
	cmp	r2, r3
 8019016:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8019018:	d3f9      	bcc.n	801900e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 801901a:	f7e9 f8df 	bl	80021dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801901e:	f000 f847 	bl	80190b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8019022:	f7e8 fb99 	bl	8001758 <main>

08019026 <LoopForever>:

LoopForever:
    b LoopForever
 8019026:	e7fe      	b.n	8019026 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8019028:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 801902c:	080d8d28 	.word	0x080d8d28
	ldr	r0, =_sdata
 8019030:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8019034:	20002324 	.word	0x20002324
	ldr	r2, =_sbss
 8019038:	20002324 	.word	0x20002324
	ldr	r3, = _ebss
 801903c:	2000c5cc 	.word	0x2000c5cc

08019040 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8019040:	e7fe      	b.n	8019040 <ADC1_2_IRQHandler>

08019042 <atoi>:
 8019042:	220a      	movs	r2, #10
 8019044:	2100      	movs	r1, #0
 8019046:	f000 bba9 	b.w	801979c <strtol>

0801904a <_calloc_r>:
 801904a:	b510      	push	{r4, lr}
 801904c:	4351      	muls	r1, r2
 801904e:	f000 f853 	bl	80190f8 <_malloc_r>
 8019052:	4604      	mov	r4, r0
 8019054:	b198      	cbz	r0, 801907e <_calloc_r+0x34>
 8019056:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801905a:	f022 0203 	bic.w	r2, r2, #3
 801905e:	3a04      	subs	r2, #4
 8019060:	2a24      	cmp	r2, #36	; 0x24
 8019062:	d81b      	bhi.n	801909c <_calloc_r+0x52>
 8019064:	2a13      	cmp	r2, #19
 8019066:	d917      	bls.n	8019098 <_calloc_r+0x4e>
 8019068:	2100      	movs	r1, #0
 801906a:	2a1b      	cmp	r2, #27
 801906c:	6001      	str	r1, [r0, #0]
 801906e:	6041      	str	r1, [r0, #4]
 8019070:	d807      	bhi.n	8019082 <_calloc_r+0x38>
 8019072:	f100 0308 	add.w	r3, r0, #8
 8019076:	2200      	movs	r2, #0
 8019078:	601a      	str	r2, [r3, #0]
 801907a:	605a      	str	r2, [r3, #4]
 801907c:	609a      	str	r2, [r3, #8]
 801907e:	4620      	mov	r0, r4
 8019080:	bd10      	pop	{r4, pc}
 8019082:	2a24      	cmp	r2, #36	; 0x24
 8019084:	6081      	str	r1, [r0, #8]
 8019086:	60c1      	str	r1, [r0, #12]
 8019088:	bf11      	iteee	ne
 801908a:	f100 0310 	addne.w	r3, r0, #16
 801908e:	6101      	streq	r1, [r0, #16]
 8019090:	f100 0318 	addeq.w	r3, r0, #24
 8019094:	6141      	streq	r1, [r0, #20]
 8019096:	e7ee      	b.n	8019076 <_calloc_r+0x2c>
 8019098:	4603      	mov	r3, r0
 801909a:	e7ec      	b.n	8019076 <_calloc_r+0x2c>
 801909c:	2100      	movs	r1, #0
 801909e:	f000 fa44 	bl	801952a <memset>
 80190a2:	e7ec      	b.n	801907e <_calloc_r+0x34>

080190a4 <__errno>:
 80190a4:	4b01      	ldr	r3, [pc, #4]	; (80190ac <__errno+0x8>)
 80190a6:	6818      	ldr	r0, [r3, #0]
 80190a8:	4770      	bx	lr
 80190aa:	bf00      	nop
 80190ac:	20001cb4 	.word	0x20001cb4

080190b0 <__libc_init_array>:
 80190b0:	b570      	push	{r4, r5, r6, lr}
 80190b2:	4e0d      	ldr	r6, [pc, #52]	; (80190e8 <__libc_init_array+0x38>)
 80190b4:	4c0d      	ldr	r4, [pc, #52]	; (80190ec <__libc_init_array+0x3c>)
 80190b6:	1ba4      	subs	r4, r4, r6
 80190b8:	10a4      	asrs	r4, r4, #2
 80190ba:	2500      	movs	r5, #0
 80190bc:	42a5      	cmp	r5, r4
 80190be:	d109      	bne.n	80190d4 <__libc_init_array+0x24>
 80190c0:	4e0b      	ldr	r6, [pc, #44]	; (80190f0 <__libc_init_array+0x40>)
 80190c2:	4c0c      	ldr	r4, [pc, #48]	; (80190f4 <__libc_init_array+0x44>)
 80190c4:	f003 fd08 	bl	801cad8 <_init>
 80190c8:	1ba4      	subs	r4, r4, r6
 80190ca:	10a4      	asrs	r4, r4, #2
 80190cc:	2500      	movs	r5, #0
 80190ce:	42a5      	cmp	r5, r4
 80190d0:	d105      	bne.n	80190de <__libc_init_array+0x2e>
 80190d2:	bd70      	pop	{r4, r5, r6, pc}
 80190d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80190d8:	4798      	blx	r3
 80190da:	3501      	adds	r5, #1
 80190dc:	e7ee      	b.n	80190bc <__libc_init_array+0xc>
 80190de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80190e2:	4798      	blx	r3
 80190e4:	3501      	adds	r5, #1
 80190e6:	e7f2      	b.n	80190ce <__libc_init_array+0x1e>
 80190e8:	080d8d20 	.word	0x080d8d20
 80190ec:	080d8d20 	.word	0x080d8d20
 80190f0:	080d8d20 	.word	0x080d8d20
 80190f4:	080d8d24 	.word	0x080d8d24

080190f8 <_malloc_r>:
 80190f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190fc:	f101 040b 	add.w	r4, r1, #11
 8019100:	2c16      	cmp	r4, #22
 8019102:	4681      	mov	r9, r0
 8019104:	d907      	bls.n	8019116 <_malloc_r+0x1e>
 8019106:	f034 0407 	bics.w	r4, r4, #7
 801910a:	d505      	bpl.n	8019118 <_malloc_r+0x20>
 801910c:	230c      	movs	r3, #12
 801910e:	f8c9 3000 	str.w	r3, [r9]
 8019112:	2600      	movs	r6, #0
 8019114:	e131      	b.n	801937a <_malloc_r+0x282>
 8019116:	2410      	movs	r4, #16
 8019118:	428c      	cmp	r4, r1
 801911a:	d3f7      	bcc.n	801910c <_malloc_r+0x14>
 801911c:	4648      	mov	r0, r9
 801911e:	f000 fa0d 	bl	801953c <__malloc_lock>
 8019122:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8019126:	4d9c      	ldr	r5, [pc, #624]	; (8019398 <_malloc_r+0x2a0>)
 8019128:	d236      	bcs.n	8019198 <_malloc_r+0xa0>
 801912a:	f104 0208 	add.w	r2, r4, #8
 801912e:	442a      	add	r2, r5
 8019130:	f1a2 0108 	sub.w	r1, r2, #8
 8019134:	6856      	ldr	r6, [r2, #4]
 8019136:	428e      	cmp	r6, r1
 8019138:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 801913c:	d102      	bne.n	8019144 <_malloc_r+0x4c>
 801913e:	68d6      	ldr	r6, [r2, #12]
 8019140:	42b2      	cmp	r2, r6
 8019142:	d010      	beq.n	8019166 <_malloc_r+0x6e>
 8019144:	6873      	ldr	r3, [r6, #4]
 8019146:	68f2      	ldr	r2, [r6, #12]
 8019148:	68b1      	ldr	r1, [r6, #8]
 801914a:	f023 0303 	bic.w	r3, r3, #3
 801914e:	60ca      	str	r2, [r1, #12]
 8019150:	4433      	add	r3, r6
 8019152:	6091      	str	r1, [r2, #8]
 8019154:	685a      	ldr	r2, [r3, #4]
 8019156:	f042 0201 	orr.w	r2, r2, #1
 801915a:	605a      	str	r2, [r3, #4]
 801915c:	4648      	mov	r0, r9
 801915e:	f000 f9f3 	bl	8019548 <__malloc_unlock>
 8019162:	3608      	adds	r6, #8
 8019164:	e109      	b.n	801937a <_malloc_r+0x282>
 8019166:	3302      	adds	r3, #2
 8019168:	4a8c      	ldr	r2, [pc, #560]	; (801939c <_malloc_r+0x2a4>)
 801916a:	692e      	ldr	r6, [r5, #16]
 801916c:	4296      	cmp	r6, r2
 801916e:	4611      	mov	r1, r2
 8019170:	d06d      	beq.n	801924e <_malloc_r+0x156>
 8019172:	6870      	ldr	r0, [r6, #4]
 8019174:	f020 0003 	bic.w	r0, r0, #3
 8019178:	1b07      	subs	r7, r0, r4
 801917a:	2f0f      	cmp	r7, #15
 801917c:	dd47      	ble.n	801920e <_malloc_r+0x116>
 801917e:	1933      	adds	r3, r6, r4
 8019180:	f044 0401 	orr.w	r4, r4, #1
 8019184:	6074      	str	r4, [r6, #4]
 8019186:	616b      	str	r3, [r5, #20]
 8019188:	612b      	str	r3, [r5, #16]
 801918a:	60da      	str	r2, [r3, #12]
 801918c:	609a      	str	r2, [r3, #8]
 801918e:	f047 0201 	orr.w	r2, r7, #1
 8019192:	605a      	str	r2, [r3, #4]
 8019194:	5037      	str	r7, [r6, r0]
 8019196:	e7e1      	b.n	801915c <_malloc_r+0x64>
 8019198:	0a63      	lsrs	r3, r4, #9
 801919a:	d02a      	beq.n	80191f2 <_malloc_r+0xfa>
 801919c:	2b04      	cmp	r3, #4
 801919e:	d812      	bhi.n	80191c6 <_malloc_r+0xce>
 80191a0:	09a3      	lsrs	r3, r4, #6
 80191a2:	3338      	adds	r3, #56	; 0x38
 80191a4:	1c5a      	adds	r2, r3, #1
 80191a6:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80191aa:	f1a2 0008 	sub.w	r0, r2, #8
 80191ae:	6856      	ldr	r6, [r2, #4]
 80191b0:	4286      	cmp	r6, r0
 80191b2:	d006      	beq.n	80191c2 <_malloc_r+0xca>
 80191b4:	6872      	ldr	r2, [r6, #4]
 80191b6:	f022 0203 	bic.w	r2, r2, #3
 80191ba:	1b11      	subs	r1, r2, r4
 80191bc:	290f      	cmp	r1, #15
 80191be:	dd1c      	ble.n	80191fa <_malloc_r+0x102>
 80191c0:	3b01      	subs	r3, #1
 80191c2:	3301      	adds	r3, #1
 80191c4:	e7d0      	b.n	8019168 <_malloc_r+0x70>
 80191c6:	2b14      	cmp	r3, #20
 80191c8:	d801      	bhi.n	80191ce <_malloc_r+0xd6>
 80191ca:	335b      	adds	r3, #91	; 0x5b
 80191cc:	e7ea      	b.n	80191a4 <_malloc_r+0xac>
 80191ce:	2b54      	cmp	r3, #84	; 0x54
 80191d0:	d802      	bhi.n	80191d8 <_malloc_r+0xe0>
 80191d2:	0b23      	lsrs	r3, r4, #12
 80191d4:	336e      	adds	r3, #110	; 0x6e
 80191d6:	e7e5      	b.n	80191a4 <_malloc_r+0xac>
 80191d8:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80191dc:	d802      	bhi.n	80191e4 <_malloc_r+0xec>
 80191de:	0be3      	lsrs	r3, r4, #15
 80191e0:	3377      	adds	r3, #119	; 0x77
 80191e2:	e7df      	b.n	80191a4 <_malloc_r+0xac>
 80191e4:	f240 5254 	movw	r2, #1364	; 0x554
 80191e8:	4293      	cmp	r3, r2
 80191ea:	d804      	bhi.n	80191f6 <_malloc_r+0xfe>
 80191ec:	0ca3      	lsrs	r3, r4, #18
 80191ee:	337c      	adds	r3, #124	; 0x7c
 80191f0:	e7d8      	b.n	80191a4 <_malloc_r+0xac>
 80191f2:	233f      	movs	r3, #63	; 0x3f
 80191f4:	e7d6      	b.n	80191a4 <_malloc_r+0xac>
 80191f6:	237e      	movs	r3, #126	; 0x7e
 80191f8:	e7d4      	b.n	80191a4 <_malloc_r+0xac>
 80191fa:	2900      	cmp	r1, #0
 80191fc:	68f1      	ldr	r1, [r6, #12]
 80191fe:	db04      	blt.n	801920a <_malloc_r+0x112>
 8019200:	68b3      	ldr	r3, [r6, #8]
 8019202:	60d9      	str	r1, [r3, #12]
 8019204:	608b      	str	r3, [r1, #8]
 8019206:	18b3      	adds	r3, r6, r2
 8019208:	e7a4      	b.n	8019154 <_malloc_r+0x5c>
 801920a:	460e      	mov	r6, r1
 801920c:	e7d0      	b.n	80191b0 <_malloc_r+0xb8>
 801920e:	2f00      	cmp	r7, #0
 8019210:	616a      	str	r2, [r5, #20]
 8019212:	612a      	str	r2, [r5, #16]
 8019214:	db05      	blt.n	8019222 <_malloc_r+0x12a>
 8019216:	4430      	add	r0, r6
 8019218:	6843      	ldr	r3, [r0, #4]
 801921a:	f043 0301 	orr.w	r3, r3, #1
 801921e:	6043      	str	r3, [r0, #4]
 8019220:	e79c      	b.n	801915c <_malloc_r+0x64>
 8019222:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8019226:	d244      	bcs.n	80192b2 <_malloc_r+0x1ba>
 8019228:	08c0      	lsrs	r0, r0, #3
 801922a:	1087      	asrs	r7, r0, #2
 801922c:	2201      	movs	r2, #1
 801922e:	fa02 f707 	lsl.w	r7, r2, r7
 8019232:	686a      	ldr	r2, [r5, #4]
 8019234:	3001      	adds	r0, #1
 8019236:	433a      	orrs	r2, r7
 8019238:	606a      	str	r2, [r5, #4]
 801923a:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 801923e:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 8019242:	60b7      	str	r7, [r6, #8]
 8019244:	3a08      	subs	r2, #8
 8019246:	60f2      	str	r2, [r6, #12]
 8019248:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 801924c:	60fe      	str	r6, [r7, #12]
 801924e:	2001      	movs	r0, #1
 8019250:	109a      	asrs	r2, r3, #2
 8019252:	fa00 f202 	lsl.w	r2, r0, r2
 8019256:	6868      	ldr	r0, [r5, #4]
 8019258:	4282      	cmp	r2, r0
 801925a:	f200 80a1 	bhi.w	80193a0 <_malloc_r+0x2a8>
 801925e:	4202      	tst	r2, r0
 8019260:	d106      	bne.n	8019270 <_malloc_r+0x178>
 8019262:	f023 0303 	bic.w	r3, r3, #3
 8019266:	0052      	lsls	r2, r2, #1
 8019268:	4202      	tst	r2, r0
 801926a:	f103 0304 	add.w	r3, r3, #4
 801926e:	d0fa      	beq.n	8019266 <_malloc_r+0x16e>
 8019270:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8019274:	46e0      	mov	r8, ip
 8019276:	469e      	mov	lr, r3
 8019278:	f8d8 600c 	ldr.w	r6, [r8, #12]
 801927c:	4546      	cmp	r6, r8
 801927e:	d153      	bne.n	8019328 <_malloc_r+0x230>
 8019280:	f10e 0e01 	add.w	lr, lr, #1
 8019284:	f01e 0f03 	tst.w	lr, #3
 8019288:	f108 0808 	add.w	r8, r8, #8
 801928c:	d1f4      	bne.n	8019278 <_malloc_r+0x180>
 801928e:	0798      	lsls	r0, r3, #30
 8019290:	d179      	bne.n	8019386 <_malloc_r+0x28e>
 8019292:	686b      	ldr	r3, [r5, #4]
 8019294:	ea23 0302 	bic.w	r3, r3, r2
 8019298:	606b      	str	r3, [r5, #4]
 801929a:	6868      	ldr	r0, [r5, #4]
 801929c:	0052      	lsls	r2, r2, #1
 801929e:	4282      	cmp	r2, r0
 80192a0:	d87e      	bhi.n	80193a0 <_malloc_r+0x2a8>
 80192a2:	2a00      	cmp	r2, #0
 80192a4:	d07c      	beq.n	80193a0 <_malloc_r+0x2a8>
 80192a6:	4673      	mov	r3, lr
 80192a8:	4202      	tst	r2, r0
 80192aa:	d1e1      	bne.n	8019270 <_malloc_r+0x178>
 80192ac:	3304      	adds	r3, #4
 80192ae:	0052      	lsls	r2, r2, #1
 80192b0:	e7fa      	b.n	80192a8 <_malloc_r+0x1b0>
 80192b2:	0a42      	lsrs	r2, r0, #9
 80192b4:	2a04      	cmp	r2, #4
 80192b6:	d815      	bhi.n	80192e4 <_malloc_r+0x1ec>
 80192b8:	0982      	lsrs	r2, r0, #6
 80192ba:	3238      	adds	r2, #56	; 0x38
 80192bc:	1c57      	adds	r7, r2, #1
 80192be:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 80192c2:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 80192c6:	45be      	cmp	lr, r7
 80192c8:	d126      	bne.n	8019318 <_malloc_r+0x220>
 80192ca:	2001      	movs	r0, #1
 80192cc:	1092      	asrs	r2, r2, #2
 80192ce:	fa00 f202 	lsl.w	r2, r0, r2
 80192d2:	6868      	ldr	r0, [r5, #4]
 80192d4:	4310      	orrs	r0, r2
 80192d6:	6068      	str	r0, [r5, #4]
 80192d8:	f8c6 e00c 	str.w	lr, [r6, #12]
 80192dc:	60b7      	str	r7, [r6, #8]
 80192de:	f8ce 6008 	str.w	r6, [lr, #8]
 80192e2:	e7b3      	b.n	801924c <_malloc_r+0x154>
 80192e4:	2a14      	cmp	r2, #20
 80192e6:	d801      	bhi.n	80192ec <_malloc_r+0x1f4>
 80192e8:	325b      	adds	r2, #91	; 0x5b
 80192ea:	e7e7      	b.n	80192bc <_malloc_r+0x1c4>
 80192ec:	2a54      	cmp	r2, #84	; 0x54
 80192ee:	d802      	bhi.n	80192f6 <_malloc_r+0x1fe>
 80192f0:	0b02      	lsrs	r2, r0, #12
 80192f2:	326e      	adds	r2, #110	; 0x6e
 80192f4:	e7e2      	b.n	80192bc <_malloc_r+0x1c4>
 80192f6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80192fa:	d802      	bhi.n	8019302 <_malloc_r+0x20a>
 80192fc:	0bc2      	lsrs	r2, r0, #15
 80192fe:	3277      	adds	r2, #119	; 0x77
 8019300:	e7dc      	b.n	80192bc <_malloc_r+0x1c4>
 8019302:	f240 5754 	movw	r7, #1364	; 0x554
 8019306:	42ba      	cmp	r2, r7
 8019308:	bf9a      	itte	ls
 801930a:	0c82      	lsrls	r2, r0, #18
 801930c:	327c      	addls	r2, #124	; 0x7c
 801930e:	227e      	movhi	r2, #126	; 0x7e
 8019310:	e7d4      	b.n	80192bc <_malloc_r+0x1c4>
 8019312:	68bf      	ldr	r7, [r7, #8]
 8019314:	45be      	cmp	lr, r7
 8019316:	d004      	beq.n	8019322 <_malloc_r+0x22a>
 8019318:	687a      	ldr	r2, [r7, #4]
 801931a:	f022 0203 	bic.w	r2, r2, #3
 801931e:	4290      	cmp	r0, r2
 8019320:	d3f7      	bcc.n	8019312 <_malloc_r+0x21a>
 8019322:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8019326:	e7d7      	b.n	80192d8 <_malloc_r+0x1e0>
 8019328:	6870      	ldr	r0, [r6, #4]
 801932a:	68f7      	ldr	r7, [r6, #12]
 801932c:	f020 0003 	bic.w	r0, r0, #3
 8019330:	eba0 0a04 	sub.w	sl, r0, r4
 8019334:	f1ba 0f0f 	cmp.w	sl, #15
 8019338:	dd10      	ble.n	801935c <_malloc_r+0x264>
 801933a:	68b2      	ldr	r2, [r6, #8]
 801933c:	1933      	adds	r3, r6, r4
 801933e:	f044 0401 	orr.w	r4, r4, #1
 8019342:	6074      	str	r4, [r6, #4]
 8019344:	60d7      	str	r7, [r2, #12]
 8019346:	60ba      	str	r2, [r7, #8]
 8019348:	f04a 0201 	orr.w	r2, sl, #1
 801934c:	616b      	str	r3, [r5, #20]
 801934e:	612b      	str	r3, [r5, #16]
 8019350:	60d9      	str	r1, [r3, #12]
 8019352:	6099      	str	r1, [r3, #8]
 8019354:	605a      	str	r2, [r3, #4]
 8019356:	f846 a000 	str.w	sl, [r6, r0]
 801935a:	e6ff      	b.n	801915c <_malloc_r+0x64>
 801935c:	f1ba 0f00 	cmp.w	sl, #0
 8019360:	db0f      	blt.n	8019382 <_malloc_r+0x28a>
 8019362:	4430      	add	r0, r6
 8019364:	6843      	ldr	r3, [r0, #4]
 8019366:	f043 0301 	orr.w	r3, r3, #1
 801936a:	6043      	str	r3, [r0, #4]
 801936c:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8019370:	4648      	mov	r0, r9
 8019372:	60df      	str	r7, [r3, #12]
 8019374:	60bb      	str	r3, [r7, #8]
 8019376:	f000 f8e7 	bl	8019548 <__malloc_unlock>
 801937a:	4630      	mov	r0, r6
 801937c:	b003      	add	sp, #12
 801937e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019382:	463e      	mov	r6, r7
 8019384:	e77a      	b.n	801927c <_malloc_r+0x184>
 8019386:	f85c 0908 	ldr.w	r0, [ip], #-8
 801938a:	4584      	cmp	ip, r0
 801938c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8019390:	f43f af7d 	beq.w	801928e <_malloc_r+0x196>
 8019394:	e781      	b.n	801929a <_malloc_r+0x1a2>
 8019396:	bf00      	nop
 8019398:	20001da8 	.word	0x20001da8
 801939c:	20001db0 	.word	0x20001db0
 80193a0:	f8d5 b008 	ldr.w	fp, [r5, #8]
 80193a4:	f8db 6004 	ldr.w	r6, [fp, #4]
 80193a8:	f026 0603 	bic.w	r6, r6, #3
 80193ac:	42b4      	cmp	r4, r6
 80193ae:	d803      	bhi.n	80193b8 <_malloc_r+0x2c0>
 80193b0:	1b33      	subs	r3, r6, r4
 80193b2:	2b0f      	cmp	r3, #15
 80193b4:	f300 8096 	bgt.w	80194e4 <_malloc_r+0x3ec>
 80193b8:	4a4f      	ldr	r2, [pc, #316]	; (80194f8 <_malloc_r+0x400>)
 80193ba:	6817      	ldr	r7, [r2, #0]
 80193bc:	4a4f      	ldr	r2, [pc, #316]	; (80194fc <_malloc_r+0x404>)
 80193be:	6811      	ldr	r1, [r2, #0]
 80193c0:	3710      	adds	r7, #16
 80193c2:	3101      	adds	r1, #1
 80193c4:	eb0b 0306 	add.w	r3, fp, r6
 80193c8:	4427      	add	r7, r4
 80193ca:	d005      	beq.n	80193d8 <_malloc_r+0x2e0>
 80193cc:	494c      	ldr	r1, [pc, #304]	; (8019500 <_malloc_r+0x408>)
 80193ce:	3901      	subs	r1, #1
 80193d0:	440f      	add	r7, r1
 80193d2:	3101      	adds	r1, #1
 80193d4:	4249      	negs	r1, r1
 80193d6:	400f      	ands	r7, r1
 80193d8:	4639      	mov	r1, r7
 80193da:	4648      	mov	r0, r9
 80193dc:	9201      	str	r2, [sp, #4]
 80193de:	9300      	str	r3, [sp, #0]
 80193e0:	f000 f920 	bl	8019624 <_sbrk_r>
 80193e4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80193e8:	4680      	mov	r8, r0
 80193ea:	d056      	beq.n	801949a <_malloc_r+0x3a2>
 80193ec:	9b00      	ldr	r3, [sp, #0]
 80193ee:	9a01      	ldr	r2, [sp, #4]
 80193f0:	4283      	cmp	r3, r0
 80193f2:	d901      	bls.n	80193f8 <_malloc_r+0x300>
 80193f4:	45ab      	cmp	fp, r5
 80193f6:	d150      	bne.n	801949a <_malloc_r+0x3a2>
 80193f8:	4842      	ldr	r0, [pc, #264]	; (8019504 <_malloc_r+0x40c>)
 80193fa:	6801      	ldr	r1, [r0, #0]
 80193fc:	4543      	cmp	r3, r8
 80193fe:	eb07 0e01 	add.w	lr, r7, r1
 8019402:	f8c0 e000 	str.w	lr, [r0]
 8019406:	4940      	ldr	r1, [pc, #256]	; (8019508 <_malloc_r+0x410>)
 8019408:	4682      	mov	sl, r0
 801940a:	d113      	bne.n	8019434 <_malloc_r+0x33c>
 801940c:	420b      	tst	r3, r1
 801940e:	d111      	bne.n	8019434 <_malloc_r+0x33c>
 8019410:	68ab      	ldr	r3, [r5, #8]
 8019412:	443e      	add	r6, r7
 8019414:	f046 0601 	orr.w	r6, r6, #1
 8019418:	605e      	str	r6, [r3, #4]
 801941a:	4a3c      	ldr	r2, [pc, #240]	; (801950c <_malloc_r+0x414>)
 801941c:	f8da 3000 	ldr.w	r3, [sl]
 8019420:	6811      	ldr	r1, [r2, #0]
 8019422:	428b      	cmp	r3, r1
 8019424:	bf88      	it	hi
 8019426:	6013      	strhi	r3, [r2, #0]
 8019428:	4a39      	ldr	r2, [pc, #228]	; (8019510 <_malloc_r+0x418>)
 801942a:	6811      	ldr	r1, [r2, #0]
 801942c:	428b      	cmp	r3, r1
 801942e:	bf88      	it	hi
 8019430:	6013      	strhi	r3, [r2, #0]
 8019432:	e032      	b.n	801949a <_malloc_r+0x3a2>
 8019434:	6810      	ldr	r0, [r2, #0]
 8019436:	3001      	adds	r0, #1
 8019438:	bf1b      	ittet	ne
 801943a:	eba8 0303 	subne.w	r3, r8, r3
 801943e:	4473      	addne	r3, lr
 8019440:	f8c2 8000 	streq.w	r8, [r2]
 8019444:	f8ca 3000 	strne.w	r3, [sl]
 8019448:	f018 0007 	ands.w	r0, r8, #7
 801944c:	bf1c      	itt	ne
 801944e:	f1c0 0008 	rsbne	r0, r0, #8
 8019452:	4480      	addne	r8, r0
 8019454:	4b2a      	ldr	r3, [pc, #168]	; (8019500 <_malloc_r+0x408>)
 8019456:	4447      	add	r7, r8
 8019458:	4418      	add	r0, r3
 801945a:	400f      	ands	r7, r1
 801945c:	1bc7      	subs	r7, r0, r7
 801945e:	4639      	mov	r1, r7
 8019460:	4648      	mov	r0, r9
 8019462:	f000 f8df 	bl	8019624 <_sbrk_r>
 8019466:	1c43      	adds	r3, r0, #1
 8019468:	bf08      	it	eq
 801946a:	4640      	moveq	r0, r8
 801946c:	f8da 3000 	ldr.w	r3, [sl]
 8019470:	f8c5 8008 	str.w	r8, [r5, #8]
 8019474:	bf08      	it	eq
 8019476:	2700      	moveq	r7, #0
 8019478:	eba0 0008 	sub.w	r0, r0, r8
 801947c:	443b      	add	r3, r7
 801947e:	4407      	add	r7, r0
 8019480:	f047 0701 	orr.w	r7, r7, #1
 8019484:	45ab      	cmp	fp, r5
 8019486:	f8ca 3000 	str.w	r3, [sl]
 801948a:	f8c8 7004 	str.w	r7, [r8, #4]
 801948e:	d0c4      	beq.n	801941a <_malloc_r+0x322>
 8019490:	2e0f      	cmp	r6, #15
 8019492:	d810      	bhi.n	80194b6 <_malloc_r+0x3be>
 8019494:	2301      	movs	r3, #1
 8019496:	f8c8 3004 	str.w	r3, [r8, #4]
 801949a:	68ab      	ldr	r3, [r5, #8]
 801949c:	685a      	ldr	r2, [r3, #4]
 801949e:	f022 0203 	bic.w	r2, r2, #3
 80194a2:	4294      	cmp	r4, r2
 80194a4:	eba2 0304 	sub.w	r3, r2, r4
 80194a8:	d801      	bhi.n	80194ae <_malloc_r+0x3b6>
 80194aa:	2b0f      	cmp	r3, #15
 80194ac:	dc1a      	bgt.n	80194e4 <_malloc_r+0x3ec>
 80194ae:	4648      	mov	r0, r9
 80194b0:	f000 f84a 	bl	8019548 <__malloc_unlock>
 80194b4:	e62d      	b.n	8019112 <_malloc_r+0x1a>
 80194b6:	f8db 3004 	ldr.w	r3, [fp, #4]
 80194ba:	3e0c      	subs	r6, #12
 80194bc:	f026 0607 	bic.w	r6, r6, #7
 80194c0:	f003 0301 	and.w	r3, r3, #1
 80194c4:	4333      	orrs	r3, r6
 80194c6:	f8cb 3004 	str.w	r3, [fp, #4]
 80194ca:	eb0b 0306 	add.w	r3, fp, r6
 80194ce:	2205      	movs	r2, #5
 80194d0:	2e0f      	cmp	r6, #15
 80194d2:	605a      	str	r2, [r3, #4]
 80194d4:	609a      	str	r2, [r3, #8]
 80194d6:	d9a0      	bls.n	801941a <_malloc_r+0x322>
 80194d8:	f10b 0108 	add.w	r1, fp, #8
 80194dc:	4648      	mov	r0, r9
 80194de:	f002 f8f3 	bl	801b6c8 <_free_r>
 80194e2:	e79a      	b.n	801941a <_malloc_r+0x322>
 80194e4:	68ae      	ldr	r6, [r5, #8]
 80194e6:	f044 0201 	orr.w	r2, r4, #1
 80194ea:	4434      	add	r4, r6
 80194ec:	f043 0301 	orr.w	r3, r3, #1
 80194f0:	6072      	str	r2, [r6, #4]
 80194f2:	60ac      	str	r4, [r5, #8]
 80194f4:	6063      	str	r3, [r4, #4]
 80194f6:	e631      	b.n	801915c <_malloc_r+0x64>
 80194f8:	2000b01c 	.word	0x2000b01c
 80194fc:	200021b0 	.word	0x200021b0
 8019500:	00001000 	.word	0x00001000
 8019504:	2000afec 	.word	0x2000afec
 8019508:	00000fff 	.word	0x00000fff
 801950c:	2000b014 	.word	0x2000b014
 8019510:	2000b018 	.word	0x2000b018

08019514 <memcpy>:
 8019514:	b510      	push	{r4, lr}
 8019516:	1e43      	subs	r3, r0, #1
 8019518:	440a      	add	r2, r1
 801951a:	4291      	cmp	r1, r2
 801951c:	d100      	bne.n	8019520 <memcpy+0xc>
 801951e:	bd10      	pop	{r4, pc}
 8019520:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019524:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019528:	e7f7      	b.n	801951a <memcpy+0x6>

0801952a <memset>:
 801952a:	4402      	add	r2, r0
 801952c:	4603      	mov	r3, r0
 801952e:	4293      	cmp	r3, r2
 8019530:	d100      	bne.n	8019534 <memset+0xa>
 8019532:	4770      	bx	lr
 8019534:	f803 1b01 	strb.w	r1, [r3], #1
 8019538:	e7f9      	b.n	801952e <memset+0x4>
	...

0801953c <__malloc_lock>:
 801953c:	4801      	ldr	r0, [pc, #4]	; (8019544 <__malloc_lock+0x8>)
 801953e:	f002 baff 	b.w	801bb40 <__retarget_lock_acquire_recursive>
 8019542:	bf00      	nop
 8019544:	2000c5c0 	.word	0x2000c5c0

08019548 <__malloc_unlock>:
 8019548:	4801      	ldr	r0, [pc, #4]	; (8019550 <__malloc_unlock+0x8>)
 801954a:	f002 bafa 	b.w	801bb42 <__retarget_lock_release_recursive>
 801954e:	bf00      	nop
 8019550:	2000c5c0 	.word	0x2000c5c0

08019554 <_puts_r>:
 8019554:	b530      	push	{r4, r5, lr}
 8019556:	4605      	mov	r5, r0
 8019558:	b089      	sub	sp, #36	; 0x24
 801955a:	4608      	mov	r0, r1
 801955c:	460c      	mov	r4, r1
 801955e:	f7e6 fe37 	bl	80001d0 <strlen>
 8019562:	4b28      	ldr	r3, [pc, #160]	; (8019604 <_puts_r+0xb0>)
 8019564:	9306      	str	r3, [sp, #24]
 8019566:	2301      	movs	r3, #1
 8019568:	9005      	str	r0, [sp, #20]
 801956a:	9307      	str	r3, [sp, #28]
 801956c:	4418      	add	r0, r3
 801956e:	ab04      	add	r3, sp, #16
 8019570:	9301      	str	r3, [sp, #4]
 8019572:	2302      	movs	r3, #2
 8019574:	9404      	str	r4, [sp, #16]
 8019576:	9003      	str	r0, [sp, #12]
 8019578:	9302      	str	r3, [sp, #8]
 801957a:	b125      	cbz	r5, 8019586 <_puts_r+0x32>
 801957c:	69ab      	ldr	r3, [r5, #24]
 801957e:	b913      	cbnz	r3, 8019586 <_puts_r+0x32>
 8019580:	4628      	mov	r0, r5
 8019582:	f001 ffcb 	bl	801b51c <__sinit>
 8019586:	69ab      	ldr	r3, [r5, #24]
 8019588:	68ac      	ldr	r4, [r5, #8]
 801958a:	b913      	cbnz	r3, 8019592 <_puts_r+0x3e>
 801958c:	4628      	mov	r0, r5
 801958e:	f001 ffc5 	bl	801b51c <__sinit>
 8019592:	4b1d      	ldr	r3, [pc, #116]	; (8019608 <_puts_r+0xb4>)
 8019594:	429c      	cmp	r4, r3
 8019596:	d12a      	bne.n	80195ee <_puts_r+0x9a>
 8019598:	686c      	ldr	r4, [r5, #4]
 801959a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801959c:	07db      	lsls	r3, r3, #31
 801959e:	d405      	bmi.n	80195ac <_puts_r+0x58>
 80195a0:	89a3      	ldrh	r3, [r4, #12]
 80195a2:	0598      	lsls	r0, r3, #22
 80195a4:	d402      	bmi.n	80195ac <_puts_r+0x58>
 80195a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80195a8:	f002 faca 	bl	801bb40 <__retarget_lock_acquire_recursive>
 80195ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80195b0:	0499      	lsls	r1, r3, #18
 80195b2:	d406      	bmi.n	80195c2 <_puts_r+0x6e>
 80195b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80195b8:	81a3      	strh	r3, [r4, #12]
 80195ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80195bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80195c0:	6663      	str	r3, [r4, #100]	; 0x64
 80195c2:	4628      	mov	r0, r5
 80195c4:	aa01      	add	r2, sp, #4
 80195c6:	4621      	mov	r1, r4
 80195c8:	f002 f93a 	bl	801b840 <__sfvwrite_r>
 80195cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80195ce:	2800      	cmp	r0, #0
 80195d0:	bf14      	ite	ne
 80195d2:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 80195d6:	250a      	moveq	r5, #10
 80195d8:	07da      	lsls	r2, r3, #31
 80195da:	d405      	bmi.n	80195e8 <_puts_r+0x94>
 80195dc:	89a3      	ldrh	r3, [r4, #12]
 80195de:	059b      	lsls	r3, r3, #22
 80195e0:	d402      	bmi.n	80195e8 <_puts_r+0x94>
 80195e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80195e4:	f002 faad 	bl	801bb42 <__retarget_lock_release_recursive>
 80195e8:	4628      	mov	r0, r5
 80195ea:	b009      	add	sp, #36	; 0x24
 80195ec:	bd30      	pop	{r4, r5, pc}
 80195ee:	4b07      	ldr	r3, [pc, #28]	; (801960c <_puts_r+0xb8>)
 80195f0:	429c      	cmp	r4, r3
 80195f2:	d101      	bne.n	80195f8 <_puts_r+0xa4>
 80195f4:	68ac      	ldr	r4, [r5, #8]
 80195f6:	e7d0      	b.n	801959a <_puts_r+0x46>
 80195f8:	4b05      	ldr	r3, [pc, #20]	; (8019610 <_puts_r+0xbc>)
 80195fa:	429c      	cmp	r4, r3
 80195fc:	bf08      	it	eq
 80195fe:	68ec      	ldreq	r4, [r5, #12]
 8019600:	e7cb      	b.n	801959a <_puts_r+0x46>
 8019602:	bf00      	nop
 8019604:	0801cd71 	.word	0x0801cd71
 8019608:	080d8acc 	.word	0x080d8acc
 801960c:	080d8aec 	.word	0x080d8aec
 8019610:	080d8aac 	.word	0x080d8aac

08019614 <puts>:
 8019614:	4b02      	ldr	r3, [pc, #8]	; (8019620 <puts+0xc>)
 8019616:	4601      	mov	r1, r0
 8019618:	6818      	ldr	r0, [r3, #0]
 801961a:	f7ff bf9b 	b.w	8019554 <_puts_r>
 801961e:	bf00      	nop
 8019620:	20001cb4 	.word	0x20001cb4

08019624 <_sbrk_r>:
 8019624:	b538      	push	{r3, r4, r5, lr}
 8019626:	4c06      	ldr	r4, [pc, #24]	; (8019640 <_sbrk_r+0x1c>)
 8019628:	2300      	movs	r3, #0
 801962a:	4605      	mov	r5, r0
 801962c:	4608      	mov	r0, r1
 801962e:	6023      	str	r3, [r4, #0]
 8019630:	f7e8 fdae 	bl	8002190 <_sbrk>
 8019634:	1c43      	adds	r3, r0, #1
 8019636:	d102      	bne.n	801963e <_sbrk_r+0x1a>
 8019638:	6823      	ldr	r3, [r4, #0]
 801963a:	b103      	cbz	r3, 801963e <_sbrk_r+0x1a>
 801963c:	602b      	str	r3, [r5, #0]
 801963e:	bd38      	pop	{r3, r4, r5, pc}
 8019640:	2000c5c8 	.word	0x2000c5c8

08019644 <sprintf>:
 8019644:	b40e      	push	{r1, r2, r3}
 8019646:	b500      	push	{lr}
 8019648:	b09c      	sub	sp, #112	; 0x70
 801964a:	f44f 7102 	mov.w	r1, #520	; 0x208
 801964e:	ab1d      	add	r3, sp, #116	; 0x74
 8019650:	f8ad 1014 	strh.w	r1, [sp, #20]
 8019654:	9002      	str	r0, [sp, #8]
 8019656:	9006      	str	r0, [sp, #24]
 8019658:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801965c:	480a      	ldr	r0, [pc, #40]	; (8019688 <sprintf+0x44>)
 801965e:	9104      	str	r1, [sp, #16]
 8019660:	9107      	str	r1, [sp, #28]
 8019662:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8019666:	f853 2b04 	ldr.w	r2, [r3], #4
 801966a:	f8ad 1016 	strh.w	r1, [sp, #22]
 801966e:	6800      	ldr	r0, [r0, #0]
 8019670:	9301      	str	r3, [sp, #4]
 8019672:	a902      	add	r1, sp, #8
 8019674:	f000 f8a8 	bl	80197c8 <_svfprintf_r>
 8019678:	9b02      	ldr	r3, [sp, #8]
 801967a:	2200      	movs	r2, #0
 801967c:	701a      	strb	r2, [r3, #0]
 801967e:	b01c      	add	sp, #112	; 0x70
 8019680:	f85d eb04 	ldr.w	lr, [sp], #4
 8019684:	b003      	add	sp, #12
 8019686:	4770      	bx	lr
 8019688:	20001cb4 	.word	0x20001cb4

0801968c <strcpy>:
 801968c:	4603      	mov	r3, r0
 801968e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019692:	f803 2b01 	strb.w	r2, [r3], #1
 8019696:	2a00      	cmp	r2, #0
 8019698:	d1f9      	bne.n	801968e <strcpy+0x2>
 801969a:	4770      	bx	lr

0801969c <_strtol_l.isra.0>:
 801969c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196a0:	4680      	mov	r8, r0
 80196a2:	4689      	mov	r9, r1
 80196a4:	4692      	mov	sl, r2
 80196a6:	461f      	mov	r7, r3
 80196a8:	468b      	mov	fp, r1
 80196aa:	465d      	mov	r5, fp
 80196ac:	980a      	ldr	r0, [sp, #40]	; 0x28
 80196ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 80196b2:	f002 fa31 	bl	801bb18 <__locale_ctype_ptr_l>
 80196b6:	4420      	add	r0, r4
 80196b8:	7846      	ldrb	r6, [r0, #1]
 80196ba:	f016 0608 	ands.w	r6, r6, #8
 80196be:	d10b      	bne.n	80196d8 <_strtol_l.isra.0+0x3c>
 80196c0:	2c2d      	cmp	r4, #45	; 0x2d
 80196c2:	d10b      	bne.n	80196dc <_strtol_l.isra.0+0x40>
 80196c4:	782c      	ldrb	r4, [r5, #0]
 80196c6:	2601      	movs	r6, #1
 80196c8:	f10b 0502 	add.w	r5, fp, #2
 80196cc:	b167      	cbz	r7, 80196e8 <_strtol_l.isra.0+0x4c>
 80196ce:	2f10      	cmp	r7, #16
 80196d0:	d114      	bne.n	80196fc <_strtol_l.isra.0+0x60>
 80196d2:	2c30      	cmp	r4, #48	; 0x30
 80196d4:	d00a      	beq.n	80196ec <_strtol_l.isra.0+0x50>
 80196d6:	e011      	b.n	80196fc <_strtol_l.isra.0+0x60>
 80196d8:	46ab      	mov	fp, r5
 80196da:	e7e6      	b.n	80196aa <_strtol_l.isra.0+0xe>
 80196dc:	2c2b      	cmp	r4, #43	; 0x2b
 80196de:	bf04      	itt	eq
 80196e0:	782c      	ldrbeq	r4, [r5, #0]
 80196e2:	f10b 0502 	addeq.w	r5, fp, #2
 80196e6:	e7f1      	b.n	80196cc <_strtol_l.isra.0+0x30>
 80196e8:	2c30      	cmp	r4, #48	; 0x30
 80196ea:	d127      	bne.n	801973c <_strtol_l.isra.0+0xa0>
 80196ec:	782b      	ldrb	r3, [r5, #0]
 80196ee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80196f2:	2b58      	cmp	r3, #88	; 0x58
 80196f4:	d14b      	bne.n	801978e <_strtol_l.isra.0+0xf2>
 80196f6:	786c      	ldrb	r4, [r5, #1]
 80196f8:	2710      	movs	r7, #16
 80196fa:	3502      	adds	r5, #2
 80196fc:	2e00      	cmp	r6, #0
 80196fe:	bf0c      	ite	eq
 8019700:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8019704:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8019708:	2200      	movs	r2, #0
 801970a:	fbb1 fef7 	udiv	lr, r1, r7
 801970e:	4610      	mov	r0, r2
 8019710:	fb07 1c1e 	mls	ip, r7, lr, r1
 8019714:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8019718:	2b09      	cmp	r3, #9
 801971a:	d811      	bhi.n	8019740 <_strtol_l.isra.0+0xa4>
 801971c:	461c      	mov	r4, r3
 801971e:	42a7      	cmp	r7, r4
 8019720:	dd1d      	ble.n	801975e <_strtol_l.isra.0+0xc2>
 8019722:	1c53      	adds	r3, r2, #1
 8019724:	d007      	beq.n	8019736 <_strtol_l.isra.0+0x9a>
 8019726:	4586      	cmp	lr, r0
 8019728:	d316      	bcc.n	8019758 <_strtol_l.isra.0+0xbc>
 801972a:	d101      	bne.n	8019730 <_strtol_l.isra.0+0x94>
 801972c:	45a4      	cmp	ip, r4
 801972e:	db13      	blt.n	8019758 <_strtol_l.isra.0+0xbc>
 8019730:	fb00 4007 	mla	r0, r0, r7, r4
 8019734:	2201      	movs	r2, #1
 8019736:	f815 4b01 	ldrb.w	r4, [r5], #1
 801973a:	e7eb      	b.n	8019714 <_strtol_l.isra.0+0x78>
 801973c:	270a      	movs	r7, #10
 801973e:	e7dd      	b.n	80196fc <_strtol_l.isra.0+0x60>
 8019740:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8019744:	2b19      	cmp	r3, #25
 8019746:	d801      	bhi.n	801974c <_strtol_l.isra.0+0xb0>
 8019748:	3c37      	subs	r4, #55	; 0x37
 801974a:	e7e8      	b.n	801971e <_strtol_l.isra.0+0x82>
 801974c:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8019750:	2b19      	cmp	r3, #25
 8019752:	d804      	bhi.n	801975e <_strtol_l.isra.0+0xc2>
 8019754:	3c57      	subs	r4, #87	; 0x57
 8019756:	e7e2      	b.n	801971e <_strtol_l.isra.0+0x82>
 8019758:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801975c:	e7eb      	b.n	8019736 <_strtol_l.isra.0+0x9a>
 801975e:	1c53      	adds	r3, r2, #1
 8019760:	d108      	bne.n	8019774 <_strtol_l.isra.0+0xd8>
 8019762:	2322      	movs	r3, #34	; 0x22
 8019764:	f8c8 3000 	str.w	r3, [r8]
 8019768:	4608      	mov	r0, r1
 801976a:	f1ba 0f00 	cmp.w	sl, #0
 801976e:	d107      	bne.n	8019780 <_strtol_l.isra.0+0xe4>
 8019770:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019774:	b106      	cbz	r6, 8019778 <_strtol_l.isra.0+0xdc>
 8019776:	4240      	negs	r0, r0
 8019778:	f1ba 0f00 	cmp.w	sl, #0
 801977c:	d00c      	beq.n	8019798 <_strtol_l.isra.0+0xfc>
 801977e:	b122      	cbz	r2, 801978a <_strtol_l.isra.0+0xee>
 8019780:	3d01      	subs	r5, #1
 8019782:	f8ca 5000 	str.w	r5, [sl]
 8019786:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801978a:	464d      	mov	r5, r9
 801978c:	e7f9      	b.n	8019782 <_strtol_l.isra.0+0xe6>
 801978e:	2430      	movs	r4, #48	; 0x30
 8019790:	2f00      	cmp	r7, #0
 8019792:	d1b3      	bne.n	80196fc <_strtol_l.isra.0+0x60>
 8019794:	2708      	movs	r7, #8
 8019796:	e7b1      	b.n	80196fc <_strtol_l.isra.0+0x60>
 8019798:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801979c <strtol>:
 801979c:	4b08      	ldr	r3, [pc, #32]	; (80197c0 <strtol+0x24>)
 801979e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80197a0:	681c      	ldr	r4, [r3, #0]
 80197a2:	4d08      	ldr	r5, [pc, #32]	; (80197c4 <strtol+0x28>)
 80197a4:	6a23      	ldr	r3, [r4, #32]
 80197a6:	2b00      	cmp	r3, #0
 80197a8:	bf08      	it	eq
 80197aa:	462b      	moveq	r3, r5
 80197ac:	9300      	str	r3, [sp, #0]
 80197ae:	4613      	mov	r3, r2
 80197b0:	460a      	mov	r2, r1
 80197b2:	4601      	mov	r1, r0
 80197b4:	4620      	mov	r0, r4
 80197b6:	f7ff ff71 	bl	801969c <_strtol_l.isra.0>
 80197ba:	b003      	add	sp, #12
 80197bc:	bd30      	pop	{r4, r5, pc}
 80197be:	bf00      	nop
 80197c0:	20001cb4 	.word	0x20001cb4
 80197c4:	200021b8 	.word	0x200021b8

080197c8 <_svfprintf_r>:
 80197c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197cc:	b0bd      	sub	sp, #244	; 0xf4
 80197ce:	468a      	mov	sl, r1
 80197d0:	4615      	mov	r5, r2
 80197d2:	461f      	mov	r7, r3
 80197d4:	4683      	mov	fp, r0
 80197d6:	f002 f9a3 	bl	801bb20 <_localeconv_r>
 80197da:	6803      	ldr	r3, [r0, #0]
 80197dc:	930d      	str	r3, [sp, #52]	; 0x34
 80197de:	4618      	mov	r0, r3
 80197e0:	f7e6 fcf6 	bl	80001d0 <strlen>
 80197e4:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80197e8:	9008      	str	r0, [sp, #32]
 80197ea:	061b      	lsls	r3, r3, #24
 80197ec:	d518      	bpl.n	8019820 <_svfprintf_r+0x58>
 80197ee:	f8da 3010 	ldr.w	r3, [sl, #16]
 80197f2:	b9ab      	cbnz	r3, 8019820 <_svfprintf_r+0x58>
 80197f4:	2140      	movs	r1, #64	; 0x40
 80197f6:	4658      	mov	r0, fp
 80197f8:	f7ff fc7e 	bl	80190f8 <_malloc_r>
 80197fc:	f8ca 0000 	str.w	r0, [sl]
 8019800:	f8ca 0010 	str.w	r0, [sl, #16]
 8019804:	b948      	cbnz	r0, 801981a <_svfprintf_r+0x52>
 8019806:	230c      	movs	r3, #12
 8019808:	f8cb 3000 	str.w	r3, [fp]
 801980c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019810:	9309      	str	r3, [sp, #36]	; 0x24
 8019812:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019814:	b03d      	add	sp, #244	; 0xf4
 8019816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801981a:	2340      	movs	r3, #64	; 0x40
 801981c:	f8ca 3014 	str.w	r3, [sl, #20]
 8019820:	ed9f 7b99 	vldr	d7, [pc, #612]	; 8019a88 <_svfprintf_r+0x2c0>
 8019824:	ed8d 7b06 	vstr	d7, [sp, #24]
 8019828:	2300      	movs	r3, #0
 801982a:	ac2c      	add	r4, sp, #176	; 0xb0
 801982c:	941f      	str	r4, [sp, #124]	; 0x7c
 801982e:	9321      	str	r3, [sp, #132]	; 0x84
 8019830:	9320      	str	r3, [sp, #128]	; 0x80
 8019832:	9505      	str	r5, [sp, #20]
 8019834:	9303      	str	r3, [sp, #12]
 8019836:	9311      	str	r3, [sp, #68]	; 0x44
 8019838:	9310      	str	r3, [sp, #64]	; 0x40
 801983a:	9309      	str	r3, [sp, #36]	; 0x24
 801983c:	9d05      	ldr	r5, [sp, #20]
 801983e:	462b      	mov	r3, r5
 8019840:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019844:	b112      	cbz	r2, 801984c <_svfprintf_r+0x84>
 8019846:	2a25      	cmp	r2, #37	; 0x25
 8019848:	f040 8083 	bne.w	8019952 <_svfprintf_r+0x18a>
 801984c:	9b05      	ldr	r3, [sp, #20]
 801984e:	1aee      	subs	r6, r5, r3
 8019850:	d00d      	beq.n	801986e <_svfprintf_r+0xa6>
 8019852:	e884 0048 	stmia.w	r4, {r3, r6}
 8019856:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019858:	4433      	add	r3, r6
 801985a:	9321      	str	r3, [sp, #132]	; 0x84
 801985c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801985e:	3301      	adds	r3, #1
 8019860:	2b07      	cmp	r3, #7
 8019862:	9320      	str	r3, [sp, #128]	; 0x80
 8019864:	dc77      	bgt.n	8019956 <_svfprintf_r+0x18e>
 8019866:	3408      	adds	r4, #8
 8019868:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801986a:	4433      	add	r3, r6
 801986c:	9309      	str	r3, [sp, #36]	; 0x24
 801986e:	782b      	ldrb	r3, [r5, #0]
 8019870:	2b00      	cmp	r3, #0
 8019872:	f000 8729 	beq.w	801a6c8 <_svfprintf_r+0xf00>
 8019876:	2300      	movs	r3, #0
 8019878:	1c69      	adds	r1, r5, #1
 801987a:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 801987e:	461a      	mov	r2, r3
 8019880:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8019884:	930a      	str	r3, [sp, #40]	; 0x28
 8019886:	461d      	mov	r5, r3
 8019888:	200a      	movs	r0, #10
 801988a:	1c4e      	adds	r6, r1, #1
 801988c:	7809      	ldrb	r1, [r1, #0]
 801988e:	9605      	str	r6, [sp, #20]
 8019890:	9102      	str	r1, [sp, #8]
 8019892:	9902      	ldr	r1, [sp, #8]
 8019894:	3920      	subs	r1, #32
 8019896:	2958      	cmp	r1, #88	; 0x58
 8019898:	f200 8418 	bhi.w	801a0cc <_svfprintf_r+0x904>
 801989c:	e8df f011 	tbh	[pc, r1, lsl #1]
 80198a0:	041600a6 	.word	0x041600a6
 80198a4:	00ab0416 	.word	0x00ab0416
 80198a8:	04160416 	.word	0x04160416
 80198ac:	04160416 	.word	0x04160416
 80198b0:	04160416 	.word	0x04160416
 80198b4:	006500ae 	.word	0x006500ae
 80198b8:	00b70416 	.word	0x00b70416
 80198bc:	041600ba 	.word	0x041600ba
 80198c0:	00da00d7 	.word	0x00da00d7
 80198c4:	00da00da 	.word	0x00da00da
 80198c8:	00da00da 	.word	0x00da00da
 80198cc:	00da00da 	.word	0x00da00da
 80198d0:	00da00da 	.word	0x00da00da
 80198d4:	04160416 	.word	0x04160416
 80198d8:	04160416 	.word	0x04160416
 80198dc:	04160416 	.word	0x04160416
 80198e0:	04160416 	.word	0x04160416
 80198e4:	04160416 	.word	0x04160416
 80198e8:	012b0115 	.word	0x012b0115
 80198ec:	012b0416 	.word	0x012b0416
 80198f0:	04160416 	.word	0x04160416
 80198f4:	04160416 	.word	0x04160416
 80198f8:	041600ed 	.word	0x041600ed
 80198fc:	03400416 	.word	0x03400416
 8019900:	04160416 	.word	0x04160416
 8019904:	04160416 	.word	0x04160416
 8019908:	03a80416 	.word	0x03a80416
 801990c:	04160416 	.word	0x04160416
 8019910:	04160086 	.word	0x04160086
 8019914:	04160416 	.word	0x04160416
 8019918:	04160416 	.word	0x04160416
 801991c:	04160416 	.word	0x04160416
 8019920:	04160416 	.word	0x04160416
 8019924:	01070416 	.word	0x01070416
 8019928:	012b006b 	.word	0x012b006b
 801992c:	012b012b 	.word	0x012b012b
 8019930:	006b00f0 	.word	0x006b00f0
 8019934:	04160416 	.word	0x04160416
 8019938:	041600fa 	.word	0x041600fa
 801993c:	03420322 	.word	0x03420322
 8019940:	01010376 	.word	0x01010376
 8019944:	03870416 	.word	0x03870416
 8019948:	03aa0416 	.word	0x03aa0416
 801994c:	04160416 	.word	0x04160416
 8019950:	03c2      	.short	0x03c2
 8019952:	461d      	mov	r5, r3
 8019954:	e773      	b.n	801983e <_svfprintf_r+0x76>
 8019956:	aa1f      	add	r2, sp, #124	; 0x7c
 8019958:	4651      	mov	r1, sl
 801995a:	4658      	mov	r0, fp
 801995c:	f002 fdb9 	bl	801c4d2 <__ssprint_r>
 8019960:	2800      	cmp	r0, #0
 8019962:	f040 8692 	bne.w	801a68a <_svfprintf_r+0xec2>
 8019966:	ac2c      	add	r4, sp, #176	; 0xb0
 8019968:	e77e      	b.n	8019868 <_svfprintf_r+0xa0>
 801996a:	2301      	movs	r3, #1
 801996c:	222b      	movs	r2, #43	; 0x2b
 801996e:	9905      	ldr	r1, [sp, #20]
 8019970:	e78b      	b.n	801988a <_svfprintf_r+0xc2>
 8019972:	460f      	mov	r7, r1
 8019974:	e7fb      	b.n	801996e <_svfprintf_r+0x1a6>
 8019976:	b10b      	cbz	r3, 801997c <_svfprintf_r+0x1b4>
 8019978:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 801997c:	06ae      	lsls	r6, r5, #26
 801997e:	f140 80aa 	bpl.w	8019ad6 <_svfprintf_r+0x30e>
 8019982:	3707      	adds	r7, #7
 8019984:	f027 0707 	bic.w	r7, r7, #7
 8019988:	f107 0308 	add.w	r3, r7, #8
 801998c:	e9d7 6700 	ldrd	r6, r7, [r7]
 8019990:	9304      	str	r3, [sp, #16]
 8019992:	2e00      	cmp	r6, #0
 8019994:	f177 0300 	sbcs.w	r3, r7, #0
 8019998:	da06      	bge.n	80199a8 <_svfprintf_r+0x1e0>
 801999a:	4276      	negs	r6, r6
 801999c:	f04f 032d 	mov.w	r3, #45	; 0x2d
 80199a0:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 80199a4:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80199a8:	2301      	movs	r3, #1
 80199aa:	e2ca      	b.n	8019f42 <_svfprintf_r+0x77a>
 80199ac:	b10b      	cbz	r3, 80199b2 <_svfprintf_r+0x1ea>
 80199ae:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80199b2:	4b37      	ldr	r3, [pc, #220]	; (8019a90 <_svfprintf_r+0x2c8>)
 80199b4:	9311      	str	r3, [sp, #68]	; 0x44
 80199b6:	06ab      	lsls	r3, r5, #26
 80199b8:	f140 8339 	bpl.w	801a02e <_svfprintf_r+0x866>
 80199bc:	3707      	adds	r7, #7
 80199be:	f027 0707 	bic.w	r7, r7, #7
 80199c2:	f107 0308 	add.w	r3, r7, #8
 80199c6:	e9d7 6700 	ldrd	r6, r7, [r7]
 80199ca:	9304      	str	r3, [sp, #16]
 80199cc:	07e8      	lsls	r0, r5, #31
 80199ce:	d50b      	bpl.n	80199e8 <_svfprintf_r+0x220>
 80199d0:	ea56 0307 	orrs.w	r3, r6, r7
 80199d4:	d008      	beq.n	80199e8 <_svfprintf_r+0x220>
 80199d6:	2330      	movs	r3, #48	; 0x30
 80199d8:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 80199dc:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80199e0:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 80199e4:	f045 0502 	orr.w	r5, r5, #2
 80199e8:	2302      	movs	r3, #2
 80199ea:	e2a7      	b.n	8019f3c <_svfprintf_r+0x774>
 80199ec:	2a00      	cmp	r2, #0
 80199ee:	d1be      	bne.n	801996e <_svfprintf_r+0x1a6>
 80199f0:	2301      	movs	r3, #1
 80199f2:	2220      	movs	r2, #32
 80199f4:	e7bb      	b.n	801996e <_svfprintf_r+0x1a6>
 80199f6:	f045 0501 	orr.w	r5, r5, #1
 80199fa:	e7b8      	b.n	801996e <_svfprintf_r+0x1a6>
 80199fc:	683e      	ldr	r6, [r7, #0]
 80199fe:	960a      	str	r6, [sp, #40]	; 0x28
 8019a00:	2e00      	cmp	r6, #0
 8019a02:	f107 0104 	add.w	r1, r7, #4
 8019a06:	dab4      	bge.n	8019972 <_svfprintf_r+0x1aa>
 8019a08:	4276      	negs	r6, r6
 8019a0a:	960a      	str	r6, [sp, #40]	; 0x28
 8019a0c:	460f      	mov	r7, r1
 8019a0e:	f045 0504 	orr.w	r5, r5, #4
 8019a12:	e7ac      	b.n	801996e <_svfprintf_r+0x1a6>
 8019a14:	9905      	ldr	r1, [sp, #20]
 8019a16:	1c4e      	adds	r6, r1, #1
 8019a18:	7809      	ldrb	r1, [r1, #0]
 8019a1a:	9102      	str	r1, [sp, #8]
 8019a1c:	292a      	cmp	r1, #42	; 0x2a
 8019a1e:	d010      	beq.n	8019a42 <_svfprintf_r+0x27a>
 8019a20:	f04f 0900 	mov.w	r9, #0
 8019a24:	9605      	str	r6, [sp, #20]
 8019a26:	9902      	ldr	r1, [sp, #8]
 8019a28:	3930      	subs	r1, #48	; 0x30
 8019a2a:	2909      	cmp	r1, #9
 8019a2c:	f63f af31 	bhi.w	8019892 <_svfprintf_r+0xca>
 8019a30:	fb00 1909 	mla	r9, r0, r9, r1
 8019a34:	9905      	ldr	r1, [sp, #20]
 8019a36:	460e      	mov	r6, r1
 8019a38:	f816 1b01 	ldrb.w	r1, [r6], #1
 8019a3c:	9102      	str	r1, [sp, #8]
 8019a3e:	9605      	str	r6, [sp, #20]
 8019a40:	e7f1      	b.n	8019a26 <_svfprintf_r+0x25e>
 8019a42:	6839      	ldr	r1, [r7, #0]
 8019a44:	9605      	str	r6, [sp, #20]
 8019a46:	ea41 79e1 	orr.w	r9, r1, r1, asr #31
 8019a4a:	3704      	adds	r7, #4
 8019a4c:	e78f      	b.n	801996e <_svfprintf_r+0x1a6>
 8019a4e:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8019a52:	e78c      	b.n	801996e <_svfprintf_r+0x1a6>
 8019a54:	2100      	movs	r1, #0
 8019a56:	910a      	str	r1, [sp, #40]	; 0x28
 8019a58:	9902      	ldr	r1, [sp, #8]
 8019a5a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8019a5c:	3930      	subs	r1, #48	; 0x30
 8019a5e:	fb00 1106 	mla	r1, r0, r6, r1
 8019a62:	910a      	str	r1, [sp, #40]	; 0x28
 8019a64:	9905      	ldr	r1, [sp, #20]
 8019a66:	460e      	mov	r6, r1
 8019a68:	f816 1b01 	ldrb.w	r1, [r6], #1
 8019a6c:	9102      	str	r1, [sp, #8]
 8019a6e:	9902      	ldr	r1, [sp, #8]
 8019a70:	9605      	str	r6, [sp, #20]
 8019a72:	3930      	subs	r1, #48	; 0x30
 8019a74:	2909      	cmp	r1, #9
 8019a76:	d9ef      	bls.n	8019a58 <_svfprintf_r+0x290>
 8019a78:	e70b      	b.n	8019892 <_svfprintf_r+0xca>
 8019a7a:	f045 0508 	orr.w	r5, r5, #8
 8019a7e:	e776      	b.n	801996e <_svfprintf_r+0x1a6>
 8019a80:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8019a84:	e773      	b.n	801996e <_svfprintf_r+0x1a6>
 8019a86:	bf00      	nop
	...
 8019a90:	080d8a5c 	.word	0x080d8a5c
 8019a94:	9905      	ldr	r1, [sp, #20]
 8019a96:	7809      	ldrb	r1, [r1, #0]
 8019a98:	296c      	cmp	r1, #108	; 0x6c
 8019a9a:	d105      	bne.n	8019aa8 <_svfprintf_r+0x2e0>
 8019a9c:	9905      	ldr	r1, [sp, #20]
 8019a9e:	3101      	adds	r1, #1
 8019aa0:	9105      	str	r1, [sp, #20]
 8019aa2:	f045 0520 	orr.w	r5, r5, #32
 8019aa6:	e762      	b.n	801996e <_svfprintf_r+0x1a6>
 8019aa8:	f045 0510 	orr.w	r5, r5, #16
 8019aac:	e75f      	b.n	801996e <_svfprintf_r+0x1a6>
 8019aae:	1d3b      	adds	r3, r7, #4
 8019ab0:	9304      	str	r3, [sp, #16]
 8019ab2:	2600      	movs	r6, #0
 8019ab4:	683b      	ldr	r3, [r7, #0]
 8019ab6:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8019aba:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8019abe:	f04f 0901 	mov.w	r9, #1
 8019ac2:	4637      	mov	r7, r6
 8019ac4:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8019ac8:	e11b      	b.n	8019d02 <_svfprintf_r+0x53a>
 8019aca:	b10b      	cbz	r3, 8019ad0 <_svfprintf_r+0x308>
 8019acc:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8019ad0:	f045 0510 	orr.w	r5, r5, #16
 8019ad4:	e752      	b.n	801997c <_svfprintf_r+0x1b4>
 8019ad6:	f015 0f10 	tst.w	r5, #16
 8019ada:	f107 0304 	add.w	r3, r7, #4
 8019ade:	d003      	beq.n	8019ae8 <_svfprintf_r+0x320>
 8019ae0:	683e      	ldr	r6, [r7, #0]
 8019ae2:	9304      	str	r3, [sp, #16]
 8019ae4:	17f7      	asrs	r7, r6, #31
 8019ae6:	e754      	b.n	8019992 <_svfprintf_r+0x1ca>
 8019ae8:	683e      	ldr	r6, [r7, #0]
 8019aea:	9304      	str	r3, [sp, #16]
 8019aec:	f015 0f40 	tst.w	r5, #64	; 0x40
 8019af0:	bf18      	it	ne
 8019af2:	b236      	sxthne	r6, r6
 8019af4:	e7f6      	b.n	8019ae4 <_svfprintf_r+0x31c>
 8019af6:	b10b      	cbz	r3, 8019afc <_svfprintf_r+0x334>
 8019af8:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8019afc:	3707      	adds	r7, #7
 8019afe:	f027 0707 	bic.w	r7, r7, #7
 8019b02:	f107 0308 	add.w	r3, r7, #8
 8019b06:	9304      	str	r3, [sp, #16]
 8019b08:	ed97 7b00 	vldr	d7, [r7]
 8019b0c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8019b10:	9b06      	ldr	r3, [sp, #24]
 8019b12:	9312      	str	r3, [sp, #72]	; 0x48
 8019b14:	9b07      	ldr	r3, [sp, #28]
 8019b16:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019b1a:	9313      	str	r3, [sp, #76]	; 0x4c
 8019b1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019b20:	4b4a      	ldr	r3, [pc, #296]	; (8019c4c <_svfprintf_r+0x484>)
 8019b22:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8019b26:	f7e6 fffd 	bl	8000b24 <__aeabi_dcmpun>
 8019b2a:	2800      	cmp	r0, #0
 8019b2c:	f040 85d5 	bne.w	801a6da <_svfprintf_r+0xf12>
 8019b30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019b34:	4b45      	ldr	r3, [pc, #276]	; (8019c4c <_svfprintf_r+0x484>)
 8019b36:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8019b3a:	f7e6 ffd5 	bl	8000ae8 <__aeabi_dcmple>
 8019b3e:	2800      	cmp	r0, #0
 8019b40:	f040 85cb 	bne.w	801a6da <_svfprintf_r+0xf12>
 8019b44:	2200      	movs	r2, #0
 8019b46:	2300      	movs	r3, #0
 8019b48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019b4c:	f7e6 ffc2 	bl	8000ad4 <__aeabi_dcmplt>
 8019b50:	b110      	cbz	r0, 8019b58 <_svfprintf_r+0x390>
 8019b52:	232d      	movs	r3, #45	; 0x2d
 8019b54:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8019b58:	4b3d      	ldr	r3, [pc, #244]	; (8019c50 <_svfprintf_r+0x488>)
 8019b5a:	4a3e      	ldr	r2, [pc, #248]	; (8019c54 <_svfprintf_r+0x48c>)
 8019b5c:	9902      	ldr	r1, [sp, #8]
 8019b5e:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8019b62:	2947      	cmp	r1, #71	; 0x47
 8019b64:	bfcc      	ite	gt
 8019b66:	4690      	movgt	r8, r2
 8019b68:	4698      	movle	r8, r3
 8019b6a:	f04f 0903 	mov.w	r9, #3
 8019b6e:	2600      	movs	r6, #0
 8019b70:	4637      	mov	r7, r6
 8019b72:	e0c6      	b.n	8019d02 <_svfprintf_r+0x53a>
 8019b74:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8019b78:	d022      	beq.n	8019bc0 <_svfprintf_r+0x3f8>
 8019b7a:	9b02      	ldr	r3, [sp, #8]
 8019b7c:	f023 0320 	bic.w	r3, r3, #32
 8019b80:	2b47      	cmp	r3, #71	; 0x47
 8019b82:	d104      	bne.n	8019b8e <_svfprintf_r+0x3c6>
 8019b84:	f1b9 0f00 	cmp.w	r9, #0
 8019b88:	bf08      	it	eq
 8019b8a:	f04f 0901 	moveq.w	r9, #1
 8019b8e:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8019b92:	930c      	str	r3, [sp, #48]	; 0x30
 8019b94:	9b07      	ldr	r3, [sp, #28]
 8019b96:	2b00      	cmp	r3, #0
 8019b98:	da15      	bge.n	8019bc6 <_svfprintf_r+0x3fe>
 8019b9a:	9b06      	ldr	r3, [sp, #24]
 8019b9c:	930e      	str	r3, [sp, #56]	; 0x38
 8019b9e:	9b07      	ldr	r3, [sp, #28]
 8019ba0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8019ba4:	930f      	str	r3, [sp, #60]	; 0x3c
 8019ba6:	232d      	movs	r3, #45	; 0x2d
 8019ba8:	930b      	str	r3, [sp, #44]	; 0x2c
 8019baa:	9b02      	ldr	r3, [sp, #8]
 8019bac:	f023 0720 	bic.w	r7, r3, #32
 8019bb0:	2f46      	cmp	r7, #70	; 0x46
 8019bb2:	d00e      	beq.n	8019bd2 <_svfprintf_r+0x40a>
 8019bb4:	2f45      	cmp	r7, #69	; 0x45
 8019bb6:	d146      	bne.n	8019c46 <_svfprintf_r+0x47e>
 8019bb8:	f109 0601 	add.w	r6, r9, #1
 8019bbc:	2102      	movs	r1, #2
 8019bbe:	e00a      	b.n	8019bd6 <_svfprintf_r+0x40e>
 8019bc0:	f04f 0906 	mov.w	r9, #6
 8019bc4:	e7e3      	b.n	8019b8e <_svfprintf_r+0x3c6>
 8019bc6:	ed9d 7b06 	vldr	d7, [sp, #24]
 8019bca:	2300      	movs	r3, #0
 8019bcc:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8019bd0:	e7ea      	b.n	8019ba8 <_svfprintf_r+0x3e0>
 8019bd2:	464e      	mov	r6, r9
 8019bd4:	2103      	movs	r1, #3
 8019bd6:	ab1d      	add	r3, sp, #116	; 0x74
 8019bd8:	9301      	str	r3, [sp, #4]
 8019bda:	ab1a      	add	r3, sp, #104	; 0x68
 8019bdc:	9300      	str	r3, [sp, #0]
 8019bde:	4632      	mov	r2, r6
 8019be0:	ab19      	add	r3, sp, #100	; 0x64
 8019be2:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8019be6:	4658      	mov	r0, fp
 8019be8:	f000 fe72 	bl	801a8d0 <_dtoa_r>
 8019bec:	2f47      	cmp	r7, #71	; 0x47
 8019bee:	4680      	mov	r8, r0
 8019bf0:	d102      	bne.n	8019bf8 <_svfprintf_r+0x430>
 8019bf2:	07e8      	lsls	r0, r5, #31
 8019bf4:	f140 857e 	bpl.w	801a6f4 <_svfprintf_r+0xf2c>
 8019bf8:	eb08 0306 	add.w	r3, r8, r6
 8019bfc:	2f46      	cmp	r7, #70	; 0x46
 8019bfe:	9303      	str	r3, [sp, #12]
 8019c00:	d111      	bne.n	8019c26 <_svfprintf_r+0x45e>
 8019c02:	f898 3000 	ldrb.w	r3, [r8]
 8019c06:	2b30      	cmp	r3, #48	; 0x30
 8019c08:	d109      	bne.n	8019c1e <_svfprintf_r+0x456>
 8019c0a:	2200      	movs	r2, #0
 8019c0c:	2300      	movs	r3, #0
 8019c0e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8019c12:	f7e6 ff55 	bl	8000ac0 <__aeabi_dcmpeq>
 8019c16:	b910      	cbnz	r0, 8019c1e <_svfprintf_r+0x456>
 8019c18:	f1c6 0601 	rsb	r6, r6, #1
 8019c1c:	9619      	str	r6, [sp, #100]	; 0x64
 8019c1e:	9a03      	ldr	r2, [sp, #12]
 8019c20:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019c22:	441a      	add	r2, r3
 8019c24:	9203      	str	r2, [sp, #12]
 8019c26:	2200      	movs	r2, #0
 8019c28:	2300      	movs	r3, #0
 8019c2a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8019c2e:	f7e6 ff47 	bl	8000ac0 <__aeabi_dcmpeq>
 8019c32:	b988      	cbnz	r0, 8019c58 <_svfprintf_r+0x490>
 8019c34:	2230      	movs	r2, #48	; 0x30
 8019c36:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019c38:	9903      	ldr	r1, [sp, #12]
 8019c3a:	4299      	cmp	r1, r3
 8019c3c:	d90e      	bls.n	8019c5c <_svfprintf_r+0x494>
 8019c3e:	1c59      	adds	r1, r3, #1
 8019c40:	911d      	str	r1, [sp, #116]	; 0x74
 8019c42:	701a      	strb	r2, [r3, #0]
 8019c44:	e7f7      	b.n	8019c36 <_svfprintf_r+0x46e>
 8019c46:	464e      	mov	r6, r9
 8019c48:	e7b8      	b.n	8019bbc <_svfprintf_r+0x3f4>
 8019c4a:	bf00      	nop
 8019c4c:	7fefffff 	.word	0x7fefffff
 8019c50:	080d8a4c 	.word	0x080d8a4c
 8019c54:	080d8a50 	.word	0x080d8a50
 8019c58:	9b03      	ldr	r3, [sp, #12]
 8019c5a:	931d      	str	r3, [sp, #116]	; 0x74
 8019c5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019c5e:	2f47      	cmp	r7, #71	; 0x47
 8019c60:	eba3 0308 	sub.w	r3, r3, r8
 8019c64:	9303      	str	r3, [sp, #12]
 8019c66:	f040 80fa 	bne.w	8019e5e <_svfprintf_r+0x696>
 8019c6a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019c6c:	1cd9      	adds	r1, r3, #3
 8019c6e:	db02      	blt.n	8019c76 <_svfprintf_r+0x4ae>
 8019c70:	4599      	cmp	r9, r3
 8019c72:	f280 8120 	bge.w	8019eb6 <_svfprintf_r+0x6ee>
 8019c76:	9b02      	ldr	r3, [sp, #8]
 8019c78:	3b02      	subs	r3, #2
 8019c7a:	9302      	str	r3, [sp, #8]
 8019c7c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8019c7e:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8019c82:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 8019c86:	1e53      	subs	r3, r2, #1
 8019c88:	2b00      	cmp	r3, #0
 8019c8a:	9319      	str	r3, [sp, #100]	; 0x64
 8019c8c:	bfb6      	itet	lt
 8019c8e:	f1c2 0301 	rsblt	r3, r2, #1
 8019c92:	222b      	movge	r2, #43	; 0x2b
 8019c94:	222d      	movlt	r2, #45	; 0x2d
 8019c96:	2b09      	cmp	r3, #9
 8019c98:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8019c9c:	f340 80fb 	ble.w	8019e96 <_svfprintf_r+0x6ce>
 8019ca0:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8019ca4:	260a      	movs	r6, #10
 8019ca6:	fb93 f0f6 	sdiv	r0, r3, r6
 8019caa:	fb06 3310 	mls	r3, r6, r0, r3
 8019cae:	3330      	adds	r3, #48	; 0x30
 8019cb0:	2809      	cmp	r0, #9
 8019cb2:	f802 3c01 	strb.w	r3, [r2, #-1]
 8019cb6:	f102 31ff 	add.w	r1, r2, #4294967295	; 0xffffffff
 8019cba:	4603      	mov	r3, r0
 8019cbc:	f300 80e4 	bgt.w	8019e88 <_svfprintf_r+0x6c0>
 8019cc0:	3330      	adds	r3, #48	; 0x30
 8019cc2:	f801 3c01 	strb.w	r3, [r1, #-1]
 8019cc6:	3a02      	subs	r2, #2
 8019cc8:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 8019ccc:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 8019cd0:	4282      	cmp	r2, r0
 8019cd2:	4619      	mov	r1, r3
 8019cd4:	f0c0 80da 	bcc.w	8019e8c <_svfprintf_r+0x6c4>
 8019cd8:	9a03      	ldr	r2, [sp, #12]
 8019cda:	ab1b      	add	r3, sp, #108	; 0x6c
 8019cdc:	1acb      	subs	r3, r1, r3
 8019cde:	2a01      	cmp	r2, #1
 8019ce0:	9310      	str	r3, [sp, #64]	; 0x40
 8019ce2:	eb03 0902 	add.w	r9, r3, r2
 8019ce6:	dc02      	bgt.n	8019cee <_svfprintf_r+0x526>
 8019ce8:	f015 0701 	ands.w	r7, r5, #1
 8019cec:	d002      	beq.n	8019cf4 <_svfprintf_r+0x52c>
 8019cee:	9b08      	ldr	r3, [sp, #32]
 8019cf0:	2700      	movs	r7, #0
 8019cf2:	4499      	add	r9, r3
 8019cf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019cf6:	b113      	cbz	r3, 8019cfe <_svfprintf_r+0x536>
 8019cf8:	232d      	movs	r3, #45	; 0x2d
 8019cfa:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8019cfe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019d00:	2600      	movs	r6, #0
 8019d02:	454e      	cmp	r6, r9
 8019d04:	4633      	mov	r3, r6
 8019d06:	bfb8      	it	lt
 8019d08:	464b      	movlt	r3, r9
 8019d0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8019d0c:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8019d10:	b113      	cbz	r3, 8019d18 <_svfprintf_r+0x550>
 8019d12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019d14:	3301      	adds	r3, #1
 8019d16:	930b      	str	r3, [sp, #44]	; 0x2c
 8019d18:	f015 0302 	ands.w	r3, r5, #2
 8019d1c:	9314      	str	r3, [sp, #80]	; 0x50
 8019d1e:	bf1e      	ittt	ne
 8019d20:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 8019d22:	3302      	addne	r3, #2
 8019d24:	930b      	strne	r3, [sp, #44]	; 0x2c
 8019d26:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8019d2a:	9315      	str	r3, [sp, #84]	; 0x54
 8019d2c:	d118      	bne.n	8019d60 <_svfprintf_r+0x598>
 8019d2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019d30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019d32:	1a9b      	subs	r3, r3, r2
 8019d34:	2b00      	cmp	r3, #0
 8019d36:	930c      	str	r3, [sp, #48]	; 0x30
 8019d38:	dd12      	ble.n	8019d60 <_svfprintf_r+0x598>
 8019d3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019d3c:	2b10      	cmp	r3, #16
 8019d3e:	4ba9      	ldr	r3, [pc, #676]	; (8019fe4 <_svfprintf_r+0x81c>)
 8019d40:	6023      	str	r3, [r4, #0]
 8019d42:	f300 81d5 	bgt.w	801a0f0 <_svfprintf_r+0x928>
 8019d46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019d48:	6063      	str	r3, [r4, #4]
 8019d4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019d4c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019d4e:	4413      	add	r3, r2
 8019d50:	9321      	str	r3, [sp, #132]	; 0x84
 8019d52:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019d54:	3301      	adds	r3, #1
 8019d56:	2b07      	cmp	r3, #7
 8019d58:	9320      	str	r3, [sp, #128]	; 0x80
 8019d5a:	f300 81e2 	bgt.w	801a122 <_svfprintf_r+0x95a>
 8019d5e:	3408      	adds	r4, #8
 8019d60:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8019d64:	b173      	cbz	r3, 8019d84 <_svfprintf_r+0x5bc>
 8019d66:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 8019d6a:	6023      	str	r3, [r4, #0]
 8019d6c:	2301      	movs	r3, #1
 8019d6e:	6063      	str	r3, [r4, #4]
 8019d70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019d72:	3301      	adds	r3, #1
 8019d74:	9321      	str	r3, [sp, #132]	; 0x84
 8019d76:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019d78:	3301      	adds	r3, #1
 8019d7a:	2b07      	cmp	r3, #7
 8019d7c:	9320      	str	r3, [sp, #128]	; 0x80
 8019d7e:	f300 81da 	bgt.w	801a136 <_svfprintf_r+0x96e>
 8019d82:	3408      	adds	r4, #8
 8019d84:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019d86:	b16b      	cbz	r3, 8019da4 <_svfprintf_r+0x5dc>
 8019d88:	ab18      	add	r3, sp, #96	; 0x60
 8019d8a:	6023      	str	r3, [r4, #0]
 8019d8c:	2302      	movs	r3, #2
 8019d8e:	6063      	str	r3, [r4, #4]
 8019d90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019d92:	3302      	adds	r3, #2
 8019d94:	9321      	str	r3, [sp, #132]	; 0x84
 8019d96:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019d98:	3301      	adds	r3, #1
 8019d9a:	2b07      	cmp	r3, #7
 8019d9c:	9320      	str	r3, [sp, #128]	; 0x80
 8019d9e:	f300 81d4 	bgt.w	801a14a <_svfprintf_r+0x982>
 8019da2:	3408      	adds	r4, #8
 8019da4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019da6:	2b80      	cmp	r3, #128	; 0x80
 8019da8:	d114      	bne.n	8019dd4 <_svfprintf_r+0x60c>
 8019daa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019dac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019dae:	1a9b      	subs	r3, r3, r2
 8019db0:	2b00      	cmp	r3, #0
 8019db2:	dd0f      	ble.n	8019dd4 <_svfprintf_r+0x60c>
 8019db4:	4a8c      	ldr	r2, [pc, #560]	; (8019fe8 <_svfprintf_r+0x820>)
 8019db6:	6022      	str	r2, [r4, #0]
 8019db8:	2b10      	cmp	r3, #16
 8019dba:	f300 81d0 	bgt.w	801a15e <_svfprintf_r+0x996>
 8019dbe:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8019dc0:	6063      	str	r3, [r4, #4]
 8019dc2:	4413      	add	r3, r2
 8019dc4:	9321      	str	r3, [sp, #132]	; 0x84
 8019dc6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019dc8:	3301      	adds	r3, #1
 8019dca:	2b07      	cmp	r3, #7
 8019dcc:	9320      	str	r3, [sp, #128]	; 0x80
 8019dce:	f300 81df 	bgt.w	801a190 <_svfprintf_r+0x9c8>
 8019dd2:	3408      	adds	r4, #8
 8019dd4:	eba6 0609 	sub.w	r6, r6, r9
 8019dd8:	2e00      	cmp	r6, #0
 8019dda:	dd0f      	ble.n	8019dfc <_svfprintf_r+0x634>
 8019ddc:	4b82      	ldr	r3, [pc, #520]	; (8019fe8 <_svfprintf_r+0x820>)
 8019dde:	6023      	str	r3, [r4, #0]
 8019de0:	2e10      	cmp	r6, #16
 8019de2:	f300 81df 	bgt.w	801a1a4 <_svfprintf_r+0x9dc>
 8019de6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019de8:	9821      	ldr	r0, [sp, #132]	; 0x84
 8019dea:	6066      	str	r6, [r4, #4]
 8019dec:	3301      	adds	r3, #1
 8019dee:	4406      	add	r6, r0
 8019df0:	2b07      	cmp	r3, #7
 8019df2:	9621      	str	r6, [sp, #132]	; 0x84
 8019df4:	9320      	str	r3, [sp, #128]	; 0x80
 8019df6:	f300 81ec 	bgt.w	801a1d2 <_svfprintf_r+0xa0a>
 8019dfa:	3408      	adds	r4, #8
 8019dfc:	05eb      	lsls	r3, r5, #23
 8019dfe:	f100 81f2 	bmi.w	801a1e6 <_svfprintf_r+0xa1e>
 8019e02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019e04:	e884 0300 	stmia.w	r4, {r8, r9}
 8019e08:	444b      	add	r3, r9
 8019e0a:	9321      	str	r3, [sp, #132]	; 0x84
 8019e0c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019e0e:	3301      	adds	r3, #1
 8019e10:	2b07      	cmp	r3, #7
 8019e12:	9320      	str	r3, [sp, #128]	; 0x80
 8019e14:	f340 8419 	ble.w	801a64a <_svfprintf_r+0xe82>
 8019e18:	aa1f      	add	r2, sp, #124	; 0x7c
 8019e1a:	4651      	mov	r1, sl
 8019e1c:	4658      	mov	r0, fp
 8019e1e:	f002 fb58 	bl	801c4d2 <__ssprint_r>
 8019e22:	2800      	cmp	r0, #0
 8019e24:	f040 8431 	bne.w	801a68a <_svfprintf_r+0xec2>
 8019e28:	ac2c      	add	r4, sp, #176	; 0xb0
 8019e2a:	076b      	lsls	r3, r5, #29
 8019e2c:	f100 8410 	bmi.w	801a650 <_svfprintf_r+0xe88>
 8019e30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019e32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019e34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8019e36:	428a      	cmp	r2, r1
 8019e38:	bfac      	ite	ge
 8019e3a:	189b      	addge	r3, r3, r2
 8019e3c:	185b      	addlt	r3, r3, r1
 8019e3e:	9309      	str	r3, [sp, #36]	; 0x24
 8019e40:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019e42:	b13b      	cbz	r3, 8019e54 <_svfprintf_r+0x68c>
 8019e44:	aa1f      	add	r2, sp, #124	; 0x7c
 8019e46:	4651      	mov	r1, sl
 8019e48:	4658      	mov	r0, fp
 8019e4a:	f002 fb42 	bl	801c4d2 <__ssprint_r>
 8019e4e:	2800      	cmp	r0, #0
 8019e50:	f040 841b 	bne.w	801a68a <_svfprintf_r+0xec2>
 8019e54:	2300      	movs	r3, #0
 8019e56:	9320      	str	r3, [sp, #128]	; 0x80
 8019e58:	9f04      	ldr	r7, [sp, #16]
 8019e5a:	ac2c      	add	r4, sp, #176	; 0xb0
 8019e5c:	e4ee      	b.n	801983c <_svfprintf_r+0x74>
 8019e5e:	9b02      	ldr	r3, [sp, #8]
 8019e60:	2b65      	cmp	r3, #101	; 0x65
 8019e62:	f77f af0b 	ble.w	8019c7c <_svfprintf_r+0x4b4>
 8019e66:	9b02      	ldr	r3, [sp, #8]
 8019e68:	2b66      	cmp	r3, #102	; 0x66
 8019e6a:	d124      	bne.n	8019eb6 <_svfprintf_r+0x6ee>
 8019e6c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019e6e:	2b00      	cmp	r3, #0
 8019e70:	dd19      	ble.n	8019ea6 <_svfprintf_r+0x6de>
 8019e72:	f1b9 0f00 	cmp.w	r9, #0
 8019e76:	d101      	bne.n	8019e7c <_svfprintf_r+0x6b4>
 8019e78:	07ea      	lsls	r2, r5, #31
 8019e7a:	d502      	bpl.n	8019e82 <_svfprintf_r+0x6ba>
 8019e7c:	9a08      	ldr	r2, [sp, #32]
 8019e7e:	4413      	add	r3, r2
 8019e80:	444b      	add	r3, r9
 8019e82:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8019e84:	4699      	mov	r9, r3
 8019e86:	e735      	b.n	8019cf4 <_svfprintf_r+0x52c>
 8019e88:	460a      	mov	r2, r1
 8019e8a:	e70c      	b.n	8019ca6 <_svfprintf_r+0x4de>
 8019e8c:	f812 1b01 	ldrb.w	r1, [r2], #1
 8019e90:	f803 1b01 	strb.w	r1, [r3], #1
 8019e94:	e71c      	b.n	8019cd0 <_svfprintf_r+0x508>
 8019e96:	2230      	movs	r2, #48	; 0x30
 8019e98:	4413      	add	r3, r2
 8019e9a:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 8019e9e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8019ea2:	a91c      	add	r1, sp, #112	; 0x70
 8019ea4:	e718      	b.n	8019cd8 <_svfprintf_r+0x510>
 8019ea6:	f1b9 0f00 	cmp.w	r9, #0
 8019eaa:	d101      	bne.n	8019eb0 <_svfprintf_r+0x6e8>
 8019eac:	07eb      	lsls	r3, r5, #31
 8019eae:	d515      	bpl.n	8019edc <_svfprintf_r+0x714>
 8019eb0:	9b08      	ldr	r3, [sp, #32]
 8019eb2:	3301      	adds	r3, #1
 8019eb4:	e7e4      	b.n	8019e80 <_svfprintf_r+0x6b8>
 8019eb6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8019eb8:	9b03      	ldr	r3, [sp, #12]
 8019eba:	429a      	cmp	r2, r3
 8019ebc:	db06      	blt.n	8019ecc <_svfprintf_r+0x704>
 8019ebe:	07ef      	lsls	r7, r5, #31
 8019ec0:	d50e      	bpl.n	8019ee0 <_svfprintf_r+0x718>
 8019ec2:	9b08      	ldr	r3, [sp, #32]
 8019ec4:	4413      	add	r3, r2
 8019ec6:	2267      	movs	r2, #103	; 0x67
 8019ec8:	9202      	str	r2, [sp, #8]
 8019eca:	e7da      	b.n	8019e82 <_svfprintf_r+0x6ba>
 8019ecc:	9b03      	ldr	r3, [sp, #12]
 8019ece:	9908      	ldr	r1, [sp, #32]
 8019ed0:	2a00      	cmp	r2, #0
 8019ed2:	440b      	add	r3, r1
 8019ed4:	dcf7      	bgt.n	8019ec6 <_svfprintf_r+0x6fe>
 8019ed6:	f1c2 0201 	rsb	r2, r2, #1
 8019eda:	e7f3      	b.n	8019ec4 <_svfprintf_r+0x6fc>
 8019edc:	2301      	movs	r3, #1
 8019ede:	e7d0      	b.n	8019e82 <_svfprintf_r+0x6ba>
 8019ee0:	4613      	mov	r3, r2
 8019ee2:	e7f0      	b.n	8019ec6 <_svfprintf_r+0x6fe>
 8019ee4:	b10b      	cbz	r3, 8019eea <_svfprintf_r+0x722>
 8019ee6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8019eea:	f015 0f20 	tst.w	r5, #32
 8019eee:	f107 0304 	add.w	r3, r7, #4
 8019ef2:	d008      	beq.n	8019f06 <_svfprintf_r+0x73e>
 8019ef4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019ef6:	683a      	ldr	r2, [r7, #0]
 8019ef8:	17ce      	asrs	r6, r1, #31
 8019efa:	4608      	mov	r0, r1
 8019efc:	4631      	mov	r1, r6
 8019efe:	e9c2 0100 	strd	r0, r1, [r2]
 8019f02:	461f      	mov	r7, r3
 8019f04:	e49a      	b.n	801983c <_svfprintf_r+0x74>
 8019f06:	06ee      	lsls	r6, r5, #27
 8019f08:	d503      	bpl.n	8019f12 <_svfprintf_r+0x74a>
 8019f0a:	683a      	ldr	r2, [r7, #0]
 8019f0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019f0e:	6011      	str	r1, [r2, #0]
 8019f10:	e7f7      	b.n	8019f02 <_svfprintf_r+0x73a>
 8019f12:	0668      	lsls	r0, r5, #25
 8019f14:	d5f9      	bpl.n	8019f0a <_svfprintf_r+0x742>
 8019f16:	683a      	ldr	r2, [r7, #0]
 8019f18:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8019f1c:	8011      	strh	r1, [r2, #0]
 8019f1e:	e7f0      	b.n	8019f02 <_svfprintf_r+0x73a>
 8019f20:	f045 0510 	orr.w	r5, r5, #16
 8019f24:	f015 0320 	ands.w	r3, r5, #32
 8019f28:	d022      	beq.n	8019f70 <_svfprintf_r+0x7a8>
 8019f2a:	3707      	adds	r7, #7
 8019f2c:	f027 0707 	bic.w	r7, r7, #7
 8019f30:	f107 0308 	add.w	r3, r7, #8
 8019f34:	e9d7 6700 	ldrd	r6, r7, [r7]
 8019f38:	9304      	str	r3, [sp, #16]
 8019f3a:	2300      	movs	r3, #0
 8019f3c:	2200      	movs	r2, #0
 8019f3e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8019f42:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8019f46:	f000 83db 	beq.w	801a700 <_svfprintf_r+0xf38>
 8019f4a:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 8019f4e:	920b      	str	r2, [sp, #44]	; 0x2c
 8019f50:	ea56 0207 	orrs.w	r2, r6, r7
 8019f54:	f040 83d9 	bne.w	801a70a <_svfprintf_r+0xf42>
 8019f58:	f1b9 0f00 	cmp.w	r9, #0
 8019f5c:	f000 80aa 	beq.w	801a0b4 <_svfprintf_r+0x8ec>
 8019f60:	2b01      	cmp	r3, #1
 8019f62:	d076      	beq.n	801a052 <_svfprintf_r+0x88a>
 8019f64:	2b02      	cmp	r3, #2
 8019f66:	f000 8091 	beq.w	801a08c <_svfprintf_r+0x8c4>
 8019f6a:	2600      	movs	r6, #0
 8019f6c:	2700      	movs	r7, #0
 8019f6e:	e3d2      	b.n	801a716 <_svfprintf_r+0xf4e>
 8019f70:	1d3a      	adds	r2, r7, #4
 8019f72:	f015 0110 	ands.w	r1, r5, #16
 8019f76:	9204      	str	r2, [sp, #16]
 8019f78:	d002      	beq.n	8019f80 <_svfprintf_r+0x7b8>
 8019f7a:	683e      	ldr	r6, [r7, #0]
 8019f7c:	2700      	movs	r7, #0
 8019f7e:	e7dd      	b.n	8019f3c <_svfprintf_r+0x774>
 8019f80:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8019f84:	d0f9      	beq.n	8019f7a <_svfprintf_r+0x7b2>
 8019f86:	883e      	ldrh	r6, [r7, #0]
 8019f88:	2700      	movs	r7, #0
 8019f8a:	e7d6      	b.n	8019f3a <_svfprintf_r+0x772>
 8019f8c:	1d3b      	adds	r3, r7, #4
 8019f8e:	9304      	str	r3, [sp, #16]
 8019f90:	2330      	movs	r3, #48	; 0x30
 8019f92:	2278      	movs	r2, #120	; 0x78
 8019f94:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8019f98:	4b14      	ldr	r3, [pc, #80]	; (8019fec <_svfprintf_r+0x824>)
 8019f9a:	683e      	ldr	r6, [r7, #0]
 8019f9c:	9311      	str	r3, [sp, #68]	; 0x44
 8019f9e:	2700      	movs	r7, #0
 8019fa0:	f045 0502 	orr.w	r5, r5, #2
 8019fa4:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8019fa8:	2302      	movs	r3, #2
 8019faa:	9202      	str	r2, [sp, #8]
 8019fac:	e7c6      	b.n	8019f3c <_svfprintf_r+0x774>
 8019fae:	1d3b      	adds	r3, r7, #4
 8019fb0:	2600      	movs	r6, #0
 8019fb2:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8019fb6:	9304      	str	r3, [sp, #16]
 8019fb8:	f8d7 8000 	ldr.w	r8, [r7]
 8019fbc:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8019fc0:	d00a      	beq.n	8019fd8 <_svfprintf_r+0x810>
 8019fc2:	464a      	mov	r2, r9
 8019fc4:	4631      	mov	r1, r6
 8019fc6:	4640      	mov	r0, r8
 8019fc8:	f7e6 f90a 	bl	80001e0 <memchr>
 8019fcc:	2800      	cmp	r0, #0
 8019fce:	f000 808d 	beq.w	801a0ec <_svfprintf_r+0x924>
 8019fd2:	eba0 0908 	sub.w	r9, r0, r8
 8019fd6:	e5cb      	b.n	8019b70 <_svfprintf_r+0x3a8>
 8019fd8:	4640      	mov	r0, r8
 8019fda:	f7e6 f8f9 	bl	80001d0 <strlen>
 8019fde:	4681      	mov	r9, r0
 8019fe0:	e5c6      	b.n	8019b70 <_svfprintf_r+0x3a8>
 8019fe2:	bf00      	nop
 8019fe4:	080d8a7e 	.word	0x080d8a7e
 8019fe8:	080d8a8e 	.word	0x080d8a8e
 8019fec:	080d8a6d 	.word	0x080d8a6d
 8019ff0:	f045 0510 	orr.w	r5, r5, #16
 8019ff4:	06a9      	lsls	r1, r5, #26
 8019ff6:	d509      	bpl.n	801a00c <_svfprintf_r+0x844>
 8019ff8:	3707      	adds	r7, #7
 8019ffa:	f027 0707 	bic.w	r7, r7, #7
 8019ffe:	f107 0308 	add.w	r3, r7, #8
 801a002:	e9d7 6700 	ldrd	r6, r7, [r7]
 801a006:	9304      	str	r3, [sp, #16]
 801a008:	2301      	movs	r3, #1
 801a00a:	e797      	b.n	8019f3c <_svfprintf_r+0x774>
 801a00c:	1d3b      	adds	r3, r7, #4
 801a00e:	f015 0f10 	tst.w	r5, #16
 801a012:	9304      	str	r3, [sp, #16]
 801a014:	d001      	beq.n	801a01a <_svfprintf_r+0x852>
 801a016:	683e      	ldr	r6, [r7, #0]
 801a018:	e002      	b.n	801a020 <_svfprintf_r+0x858>
 801a01a:	066a      	lsls	r2, r5, #25
 801a01c:	d5fb      	bpl.n	801a016 <_svfprintf_r+0x84e>
 801a01e:	883e      	ldrh	r6, [r7, #0]
 801a020:	2700      	movs	r7, #0
 801a022:	e7f1      	b.n	801a008 <_svfprintf_r+0x840>
 801a024:	b10b      	cbz	r3, 801a02a <_svfprintf_r+0x862>
 801a026:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 801a02a:	4ba3      	ldr	r3, [pc, #652]	; (801a2b8 <_svfprintf_r+0xaf0>)
 801a02c:	e4c2      	b.n	80199b4 <_svfprintf_r+0x1ec>
 801a02e:	1d3b      	adds	r3, r7, #4
 801a030:	f015 0f10 	tst.w	r5, #16
 801a034:	9304      	str	r3, [sp, #16]
 801a036:	d001      	beq.n	801a03c <_svfprintf_r+0x874>
 801a038:	683e      	ldr	r6, [r7, #0]
 801a03a:	e002      	b.n	801a042 <_svfprintf_r+0x87a>
 801a03c:	066e      	lsls	r6, r5, #25
 801a03e:	d5fb      	bpl.n	801a038 <_svfprintf_r+0x870>
 801a040:	883e      	ldrh	r6, [r7, #0]
 801a042:	2700      	movs	r7, #0
 801a044:	e4c2      	b.n	80199cc <_svfprintf_r+0x204>
 801a046:	4643      	mov	r3, r8
 801a048:	e366      	b.n	801a718 <_svfprintf_r+0xf50>
 801a04a:	2f00      	cmp	r7, #0
 801a04c:	bf08      	it	eq
 801a04e:	2e0a      	cmpeq	r6, #10
 801a050:	d205      	bcs.n	801a05e <_svfprintf_r+0x896>
 801a052:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 801a056:	3630      	adds	r6, #48	; 0x30
 801a058:	f808 6d41 	strb.w	r6, [r8, #-65]!
 801a05c:	e377      	b.n	801a74e <_svfprintf_r+0xf86>
 801a05e:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 801a062:	4630      	mov	r0, r6
 801a064:	4639      	mov	r1, r7
 801a066:	220a      	movs	r2, #10
 801a068:	2300      	movs	r3, #0
 801a06a:	f7e6 fd99 	bl	8000ba0 <__aeabi_uldivmod>
 801a06e:	3230      	adds	r2, #48	; 0x30
 801a070:	f808 2d01 	strb.w	r2, [r8, #-1]!
 801a074:	2300      	movs	r3, #0
 801a076:	4630      	mov	r0, r6
 801a078:	4639      	mov	r1, r7
 801a07a:	220a      	movs	r2, #10
 801a07c:	f7e6 fd90 	bl	8000ba0 <__aeabi_uldivmod>
 801a080:	4606      	mov	r6, r0
 801a082:	460f      	mov	r7, r1
 801a084:	ea56 0307 	orrs.w	r3, r6, r7
 801a088:	d1eb      	bne.n	801a062 <_svfprintf_r+0x89a>
 801a08a:	e360      	b.n	801a74e <_svfprintf_r+0xf86>
 801a08c:	2600      	movs	r6, #0
 801a08e:	2700      	movs	r7, #0
 801a090:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 801a094:	f006 030f 	and.w	r3, r6, #15
 801a098:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a09a:	5cd3      	ldrb	r3, [r2, r3]
 801a09c:	f808 3d01 	strb.w	r3, [r8, #-1]!
 801a0a0:	0933      	lsrs	r3, r6, #4
 801a0a2:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 801a0a6:	093a      	lsrs	r2, r7, #4
 801a0a8:	461e      	mov	r6, r3
 801a0aa:	4617      	mov	r7, r2
 801a0ac:	ea56 0307 	orrs.w	r3, r6, r7
 801a0b0:	d1f0      	bne.n	801a094 <_svfprintf_r+0x8cc>
 801a0b2:	e34c      	b.n	801a74e <_svfprintf_r+0xf86>
 801a0b4:	b93b      	cbnz	r3, 801a0c6 <_svfprintf_r+0x8fe>
 801a0b6:	07ea      	lsls	r2, r5, #31
 801a0b8:	d505      	bpl.n	801a0c6 <_svfprintf_r+0x8fe>
 801a0ba:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 801a0be:	2330      	movs	r3, #48	; 0x30
 801a0c0:	f808 3d41 	strb.w	r3, [r8, #-65]!
 801a0c4:	e343      	b.n	801a74e <_svfprintf_r+0xf86>
 801a0c6:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 801a0ca:	e340      	b.n	801a74e <_svfprintf_r+0xf86>
 801a0cc:	b10b      	cbz	r3, 801a0d2 <_svfprintf_r+0x90a>
 801a0ce:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 801a0d2:	9b02      	ldr	r3, [sp, #8]
 801a0d4:	2b00      	cmp	r3, #0
 801a0d6:	f000 82f7 	beq.w	801a6c8 <_svfprintf_r+0xf00>
 801a0da:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801a0de:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 801a0e2:	2600      	movs	r6, #0
 801a0e4:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 801a0e8:	9704      	str	r7, [sp, #16]
 801a0ea:	e4e8      	b.n	8019abe <_svfprintf_r+0x2f6>
 801a0ec:	4606      	mov	r6, r0
 801a0ee:	e53f      	b.n	8019b70 <_svfprintf_r+0x3a8>
 801a0f0:	2310      	movs	r3, #16
 801a0f2:	6063      	str	r3, [r4, #4]
 801a0f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a0f6:	3310      	adds	r3, #16
 801a0f8:	9321      	str	r3, [sp, #132]	; 0x84
 801a0fa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801a0fc:	3301      	adds	r3, #1
 801a0fe:	2b07      	cmp	r3, #7
 801a100:	9320      	str	r3, [sp, #128]	; 0x80
 801a102:	dc04      	bgt.n	801a10e <_svfprintf_r+0x946>
 801a104:	3408      	adds	r4, #8
 801a106:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a108:	3b10      	subs	r3, #16
 801a10a:	930c      	str	r3, [sp, #48]	; 0x30
 801a10c:	e615      	b.n	8019d3a <_svfprintf_r+0x572>
 801a10e:	aa1f      	add	r2, sp, #124	; 0x7c
 801a110:	4651      	mov	r1, sl
 801a112:	4658      	mov	r0, fp
 801a114:	f002 f9dd 	bl	801c4d2 <__ssprint_r>
 801a118:	2800      	cmp	r0, #0
 801a11a:	f040 82b6 	bne.w	801a68a <_svfprintf_r+0xec2>
 801a11e:	ac2c      	add	r4, sp, #176	; 0xb0
 801a120:	e7f1      	b.n	801a106 <_svfprintf_r+0x93e>
 801a122:	aa1f      	add	r2, sp, #124	; 0x7c
 801a124:	4651      	mov	r1, sl
 801a126:	4658      	mov	r0, fp
 801a128:	f002 f9d3 	bl	801c4d2 <__ssprint_r>
 801a12c:	2800      	cmp	r0, #0
 801a12e:	f040 82ac 	bne.w	801a68a <_svfprintf_r+0xec2>
 801a132:	ac2c      	add	r4, sp, #176	; 0xb0
 801a134:	e614      	b.n	8019d60 <_svfprintf_r+0x598>
 801a136:	aa1f      	add	r2, sp, #124	; 0x7c
 801a138:	4651      	mov	r1, sl
 801a13a:	4658      	mov	r0, fp
 801a13c:	f002 f9c9 	bl	801c4d2 <__ssprint_r>
 801a140:	2800      	cmp	r0, #0
 801a142:	f040 82a2 	bne.w	801a68a <_svfprintf_r+0xec2>
 801a146:	ac2c      	add	r4, sp, #176	; 0xb0
 801a148:	e61c      	b.n	8019d84 <_svfprintf_r+0x5bc>
 801a14a:	aa1f      	add	r2, sp, #124	; 0x7c
 801a14c:	4651      	mov	r1, sl
 801a14e:	4658      	mov	r0, fp
 801a150:	f002 f9bf 	bl	801c4d2 <__ssprint_r>
 801a154:	2800      	cmp	r0, #0
 801a156:	f040 8298 	bne.w	801a68a <_svfprintf_r+0xec2>
 801a15a:	ac2c      	add	r4, sp, #176	; 0xb0
 801a15c:	e622      	b.n	8019da4 <_svfprintf_r+0x5dc>
 801a15e:	2210      	movs	r2, #16
 801a160:	6062      	str	r2, [r4, #4]
 801a162:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a164:	3210      	adds	r2, #16
 801a166:	9221      	str	r2, [sp, #132]	; 0x84
 801a168:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801a16a:	3201      	adds	r2, #1
 801a16c:	2a07      	cmp	r2, #7
 801a16e:	9220      	str	r2, [sp, #128]	; 0x80
 801a170:	dc02      	bgt.n	801a178 <_svfprintf_r+0x9b0>
 801a172:	3408      	adds	r4, #8
 801a174:	3b10      	subs	r3, #16
 801a176:	e61d      	b.n	8019db4 <_svfprintf_r+0x5ec>
 801a178:	aa1f      	add	r2, sp, #124	; 0x7c
 801a17a:	4651      	mov	r1, sl
 801a17c:	4658      	mov	r0, fp
 801a17e:	930c      	str	r3, [sp, #48]	; 0x30
 801a180:	f002 f9a7 	bl	801c4d2 <__ssprint_r>
 801a184:	2800      	cmp	r0, #0
 801a186:	f040 8280 	bne.w	801a68a <_svfprintf_r+0xec2>
 801a18a:	ac2c      	add	r4, sp, #176	; 0xb0
 801a18c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a18e:	e7f1      	b.n	801a174 <_svfprintf_r+0x9ac>
 801a190:	aa1f      	add	r2, sp, #124	; 0x7c
 801a192:	4651      	mov	r1, sl
 801a194:	4658      	mov	r0, fp
 801a196:	f002 f99c 	bl	801c4d2 <__ssprint_r>
 801a19a:	2800      	cmp	r0, #0
 801a19c:	f040 8275 	bne.w	801a68a <_svfprintf_r+0xec2>
 801a1a0:	ac2c      	add	r4, sp, #176	; 0xb0
 801a1a2:	e617      	b.n	8019dd4 <_svfprintf_r+0x60c>
 801a1a4:	2310      	movs	r3, #16
 801a1a6:	6063      	str	r3, [r4, #4]
 801a1a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a1aa:	3310      	adds	r3, #16
 801a1ac:	9321      	str	r3, [sp, #132]	; 0x84
 801a1ae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801a1b0:	3301      	adds	r3, #1
 801a1b2:	2b07      	cmp	r3, #7
 801a1b4:	9320      	str	r3, [sp, #128]	; 0x80
 801a1b6:	dc02      	bgt.n	801a1be <_svfprintf_r+0x9f6>
 801a1b8:	3408      	adds	r4, #8
 801a1ba:	3e10      	subs	r6, #16
 801a1bc:	e60e      	b.n	8019ddc <_svfprintf_r+0x614>
 801a1be:	aa1f      	add	r2, sp, #124	; 0x7c
 801a1c0:	4651      	mov	r1, sl
 801a1c2:	4658      	mov	r0, fp
 801a1c4:	f002 f985 	bl	801c4d2 <__ssprint_r>
 801a1c8:	2800      	cmp	r0, #0
 801a1ca:	f040 825e 	bne.w	801a68a <_svfprintf_r+0xec2>
 801a1ce:	ac2c      	add	r4, sp, #176	; 0xb0
 801a1d0:	e7f3      	b.n	801a1ba <_svfprintf_r+0x9f2>
 801a1d2:	aa1f      	add	r2, sp, #124	; 0x7c
 801a1d4:	4651      	mov	r1, sl
 801a1d6:	4658      	mov	r0, fp
 801a1d8:	f002 f97b 	bl	801c4d2 <__ssprint_r>
 801a1dc:	2800      	cmp	r0, #0
 801a1de:	f040 8254 	bne.w	801a68a <_svfprintf_r+0xec2>
 801a1e2:	ac2c      	add	r4, sp, #176	; 0xb0
 801a1e4:	e60a      	b.n	8019dfc <_svfprintf_r+0x634>
 801a1e6:	9b02      	ldr	r3, [sp, #8]
 801a1e8:	2b65      	cmp	r3, #101	; 0x65
 801a1ea:	f340 81a9 	ble.w	801a540 <_svfprintf_r+0xd78>
 801a1ee:	2200      	movs	r2, #0
 801a1f0:	2300      	movs	r3, #0
 801a1f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a1f6:	f7e6 fc63 	bl	8000ac0 <__aeabi_dcmpeq>
 801a1fa:	2800      	cmp	r0, #0
 801a1fc:	d062      	beq.n	801a2c4 <_svfprintf_r+0xafc>
 801a1fe:	4b2f      	ldr	r3, [pc, #188]	; (801a2bc <_svfprintf_r+0xaf4>)
 801a200:	6023      	str	r3, [r4, #0]
 801a202:	2301      	movs	r3, #1
 801a204:	6063      	str	r3, [r4, #4]
 801a206:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a208:	3301      	adds	r3, #1
 801a20a:	9321      	str	r3, [sp, #132]	; 0x84
 801a20c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801a20e:	3301      	adds	r3, #1
 801a210:	2b07      	cmp	r3, #7
 801a212:	9320      	str	r3, [sp, #128]	; 0x80
 801a214:	dc25      	bgt.n	801a262 <_svfprintf_r+0xa9a>
 801a216:	3408      	adds	r4, #8
 801a218:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a21a:	9a03      	ldr	r2, [sp, #12]
 801a21c:	4293      	cmp	r3, r2
 801a21e:	db02      	blt.n	801a226 <_svfprintf_r+0xa5e>
 801a220:	07ee      	lsls	r6, r5, #31
 801a222:	f57f ae02 	bpl.w	8019e2a <_svfprintf_r+0x662>
 801a226:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a228:	6023      	str	r3, [r4, #0]
 801a22a:	9b08      	ldr	r3, [sp, #32]
 801a22c:	6063      	str	r3, [r4, #4]
 801a22e:	9a08      	ldr	r2, [sp, #32]
 801a230:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a232:	4413      	add	r3, r2
 801a234:	9321      	str	r3, [sp, #132]	; 0x84
 801a236:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801a238:	3301      	adds	r3, #1
 801a23a:	2b07      	cmp	r3, #7
 801a23c:	9320      	str	r3, [sp, #128]	; 0x80
 801a23e:	dc1a      	bgt.n	801a276 <_svfprintf_r+0xaae>
 801a240:	3408      	adds	r4, #8
 801a242:	9b03      	ldr	r3, [sp, #12]
 801a244:	1e5e      	subs	r6, r3, #1
 801a246:	2e00      	cmp	r6, #0
 801a248:	f77f adef 	ble.w	8019e2a <_svfprintf_r+0x662>
 801a24c:	4f1c      	ldr	r7, [pc, #112]	; (801a2c0 <_svfprintf_r+0xaf8>)
 801a24e:	f04f 0810 	mov.w	r8, #16
 801a252:	2e10      	cmp	r6, #16
 801a254:	6027      	str	r7, [r4, #0]
 801a256:	dc18      	bgt.n	801a28a <_svfprintf_r+0xac2>
 801a258:	6066      	str	r6, [r4, #4]
 801a25a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a25c:	441e      	add	r6, r3
 801a25e:	9621      	str	r6, [sp, #132]	; 0x84
 801a260:	e5d4      	b.n	8019e0c <_svfprintf_r+0x644>
 801a262:	aa1f      	add	r2, sp, #124	; 0x7c
 801a264:	4651      	mov	r1, sl
 801a266:	4658      	mov	r0, fp
 801a268:	f002 f933 	bl	801c4d2 <__ssprint_r>
 801a26c:	2800      	cmp	r0, #0
 801a26e:	f040 820c 	bne.w	801a68a <_svfprintf_r+0xec2>
 801a272:	ac2c      	add	r4, sp, #176	; 0xb0
 801a274:	e7d0      	b.n	801a218 <_svfprintf_r+0xa50>
 801a276:	aa1f      	add	r2, sp, #124	; 0x7c
 801a278:	4651      	mov	r1, sl
 801a27a:	4658      	mov	r0, fp
 801a27c:	f002 f929 	bl	801c4d2 <__ssprint_r>
 801a280:	2800      	cmp	r0, #0
 801a282:	f040 8202 	bne.w	801a68a <_svfprintf_r+0xec2>
 801a286:	ac2c      	add	r4, sp, #176	; 0xb0
 801a288:	e7db      	b.n	801a242 <_svfprintf_r+0xa7a>
 801a28a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a28c:	f8c4 8004 	str.w	r8, [r4, #4]
 801a290:	3310      	adds	r3, #16
 801a292:	9321      	str	r3, [sp, #132]	; 0x84
 801a294:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801a296:	3301      	adds	r3, #1
 801a298:	2b07      	cmp	r3, #7
 801a29a:	9320      	str	r3, [sp, #128]	; 0x80
 801a29c:	dc02      	bgt.n	801a2a4 <_svfprintf_r+0xadc>
 801a29e:	3408      	adds	r4, #8
 801a2a0:	3e10      	subs	r6, #16
 801a2a2:	e7d6      	b.n	801a252 <_svfprintf_r+0xa8a>
 801a2a4:	aa1f      	add	r2, sp, #124	; 0x7c
 801a2a6:	4651      	mov	r1, sl
 801a2a8:	4658      	mov	r0, fp
 801a2aa:	f002 f912 	bl	801c4d2 <__ssprint_r>
 801a2ae:	2800      	cmp	r0, #0
 801a2b0:	f040 81eb 	bne.w	801a68a <_svfprintf_r+0xec2>
 801a2b4:	ac2c      	add	r4, sp, #176	; 0xb0
 801a2b6:	e7f3      	b.n	801a2a0 <_svfprintf_r+0xad8>
 801a2b8:	080d8a6d 	.word	0x080d8a6d
 801a2bc:	0802bba6 	.word	0x0802bba6
 801a2c0:	080d8a8e 	.word	0x080d8a8e
 801a2c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a2c6:	2b00      	cmp	r3, #0
 801a2c8:	dc7a      	bgt.n	801a3c0 <_svfprintf_r+0xbf8>
 801a2ca:	4b9b      	ldr	r3, [pc, #620]	; (801a538 <_svfprintf_r+0xd70>)
 801a2cc:	6023      	str	r3, [r4, #0]
 801a2ce:	2301      	movs	r3, #1
 801a2d0:	6063      	str	r3, [r4, #4]
 801a2d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a2d4:	3301      	adds	r3, #1
 801a2d6:	9321      	str	r3, [sp, #132]	; 0x84
 801a2d8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801a2da:	3301      	adds	r3, #1
 801a2dc:	2b07      	cmp	r3, #7
 801a2de:	9320      	str	r3, [sp, #128]	; 0x80
 801a2e0:	dc44      	bgt.n	801a36c <_svfprintf_r+0xba4>
 801a2e2:	3408      	adds	r4, #8
 801a2e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a2e6:	b923      	cbnz	r3, 801a2f2 <_svfprintf_r+0xb2a>
 801a2e8:	9b03      	ldr	r3, [sp, #12]
 801a2ea:	b913      	cbnz	r3, 801a2f2 <_svfprintf_r+0xb2a>
 801a2ec:	07e8      	lsls	r0, r5, #31
 801a2ee:	f57f ad9c 	bpl.w	8019e2a <_svfprintf_r+0x662>
 801a2f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a2f4:	6023      	str	r3, [r4, #0]
 801a2f6:	9b08      	ldr	r3, [sp, #32]
 801a2f8:	6063      	str	r3, [r4, #4]
 801a2fa:	9a08      	ldr	r2, [sp, #32]
 801a2fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a2fe:	4413      	add	r3, r2
 801a300:	9321      	str	r3, [sp, #132]	; 0x84
 801a302:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801a304:	3301      	adds	r3, #1
 801a306:	2b07      	cmp	r3, #7
 801a308:	9320      	str	r3, [sp, #128]	; 0x80
 801a30a:	dc39      	bgt.n	801a380 <_svfprintf_r+0xbb8>
 801a30c:	f104 0308 	add.w	r3, r4, #8
 801a310:	9e19      	ldr	r6, [sp, #100]	; 0x64
 801a312:	2e00      	cmp	r6, #0
 801a314:	da19      	bge.n	801a34a <_svfprintf_r+0xb82>
 801a316:	4f89      	ldr	r7, [pc, #548]	; (801a53c <_svfprintf_r+0xd74>)
 801a318:	4276      	negs	r6, r6
 801a31a:	2410      	movs	r4, #16
 801a31c:	2e10      	cmp	r6, #16
 801a31e:	601f      	str	r7, [r3, #0]
 801a320:	dc38      	bgt.n	801a394 <_svfprintf_r+0xbcc>
 801a322:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a324:	605e      	str	r6, [r3, #4]
 801a326:	4416      	add	r6, r2
 801a328:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801a32a:	9621      	str	r6, [sp, #132]	; 0x84
 801a32c:	3201      	adds	r2, #1
 801a32e:	2a07      	cmp	r2, #7
 801a330:	f103 0308 	add.w	r3, r3, #8
 801a334:	9220      	str	r2, [sp, #128]	; 0x80
 801a336:	dd08      	ble.n	801a34a <_svfprintf_r+0xb82>
 801a338:	aa1f      	add	r2, sp, #124	; 0x7c
 801a33a:	4651      	mov	r1, sl
 801a33c:	4658      	mov	r0, fp
 801a33e:	f002 f8c8 	bl	801c4d2 <__ssprint_r>
 801a342:	2800      	cmp	r0, #0
 801a344:	f040 81a1 	bne.w	801a68a <_svfprintf_r+0xec2>
 801a348:	ab2c      	add	r3, sp, #176	; 0xb0
 801a34a:	9a03      	ldr	r2, [sp, #12]
 801a34c:	605a      	str	r2, [r3, #4]
 801a34e:	9903      	ldr	r1, [sp, #12]
 801a350:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a352:	f8c3 8000 	str.w	r8, [r3]
 801a356:	440a      	add	r2, r1
 801a358:	9221      	str	r2, [sp, #132]	; 0x84
 801a35a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801a35c:	3201      	adds	r2, #1
 801a35e:	2a07      	cmp	r2, #7
 801a360:	9220      	str	r2, [sp, #128]	; 0x80
 801a362:	f73f ad59 	bgt.w	8019e18 <_svfprintf_r+0x650>
 801a366:	f103 0408 	add.w	r4, r3, #8
 801a36a:	e55e      	b.n	8019e2a <_svfprintf_r+0x662>
 801a36c:	aa1f      	add	r2, sp, #124	; 0x7c
 801a36e:	4651      	mov	r1, sl
 801a370:	4658      	mov	r0, fp
 801a372:	f002 f8ae 	bl	801c4d2 <__ssprint_r>
 801a376:	2800      	cmp	r0, #0
 801a378:	f040 8187 	bne.w	801a68a <_svfprintf_r+0xec2>
 801a37c:	ac2c      	add	r4, sp, #176	; 0xb0
 801a37e:	e7b1      	b.n	801a2e4 <_svfprintf_r+0xb1c>
 801a380:	aa1f      	add	r2, sp, #124	; 0x7c
 801a382:	4651      	mov	r1, sl
 801a384:	4658      	mov	r0, fp
 801a386:	f002 f8a4 	bl	801c4d2 <__ssprint_r>
 801a38a:	2800      	cmp	r0, #0
 801a38c:	f040 817d 	bne.w	801a68a <_svfprintf_r+0xec2>
 801a390:	ab2c      	add	r3, sp, #176	; 0xb0
 801a392:	e7bd      	b.n	801a310 <_svfprintf_r+0xb48>
 801a394:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a396:	605c      	str	r4, [r3, #4]
 801a398:	3210      	adds	r2, #16
 801a39a:	9221      	str	r2, [sp, #132]	; 0x84
 801a39c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801a39e:	3201      	adds	r2, #1
 801a3a0:	2a07      	cmp	r2, #7
 801a3a2:	9220      	str	r2, [sp, #128]	; 0x80
 801a3a4:	dc02      	bgt.n	801a3ac <_svfprintf_r+0xbe4>
 801a3a6:	3308      	adds	r3, #8
 801a3a8:	3e10      	subs	r6, #16
 801a3aa:	e7b7      	b.n	801a31c <_svfprintf_r+0xb54>
 801a3ac:	aa1f      	add	r2, sp, #124	; 0x7c
 801a3ae:	4651      	mov	r1, sl
 801a3b0:	4658      	mov	r0, fp
 801a3b2:	f002 f88e 	bl	801c4d2 <__ssprint_r>
 801a3b6:	2800      	cmp	r0, #0
 801a3b8:	f040 8167 	bne.w	801a68a <_svfprintf_r+0xec2>
 801a3bc:	ab2c      	add	r3, sp, #176	; 0xb0
 801a3be:	e7f3      	b.n	801a3a8 <_svfprintf_r+0xbe0>
 801a3c0:	9b03      	ldr	r3, [sp, #12]
 801a3c2:	42bb      	cmp	r3, r7
 801a3c4:	bfa8      	it	ge
 801a3c6:	463b      	movge	r3, r7
 801a3c8:	2b00      	cmp	r3, #0
 801a3ca:	461e      	mov	r6, r3
 801a3cc:	dd0b      	ble.n	801a3e6 <_svfprintf_r+0xc1e>
 801a3ce:	6063      	str	r3, [r4, #4]
 801a3d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a3d2:	f8c4 8000 	str.w	r8, [r4]
 801a3d6:	4433      	add	r3, r6
 801a3d8:	9321      	str	r3, [sp, #132]	; 0x84
 801a3da:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801a3dc:	3301      	adds	r3, #1
 801a3de:	2b07      	cmp	r3, #7
 801a3e0:	9320      	str	r3, [sp, #128]	; 0x80
 801a3e2:	dc5f      	bgt.n	801a4a4 <_svfprintf_r+0xcdc>
 801a3e4:	3408      	adds	r4, #8
 801a3e6:	2e00      	cmp	r6, #0
 801a3e8:	bfac      	ite	ge
 801a3ea:	1bbe      	subge	r6, r7, r6
 801a3ec:	463e      	movlt	r6, r7
 801a3ee:	2e00      	cmp	r6, #0
 801a3f0:	dd0f      	ble.n	801a412 <_svfprintf_r+0xc4a>
 801a3f2:	f8df 9148 	ldr.w	r9, [pc, #328]	; 801a53c <_svfprintf_r+0xd74>
 801a3f6:	f8c4 9000 	str.w	r9, [r4]
 801a3fa:	2e10      	cmp	r6, #16
 801a3fc:	dc5c      	bgt.n	801a4b8 <_svfprintf_r+0xcf0>
 801a3fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a400:	6066      	str	r6, [r4, #4]
 801a402:	441e      	add	r6, r3
 801a404:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801a406:	9621      	str	r6, [sp, #132]	; 0x84
 801a408:	3301      	adds	r3, #1
 801a40a:	2b07      	cmp	r3, #7
 801a40c:	9320      	str	r3, [sp, #128]	; 0x80
 801a40e:	dc6a      	bgt.n	801a4e6 <_svfprintf_r+0xd1e>
 801a410:	3408      	adds	r4, #8
 801a412:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a414:	9a03      	ldr	r2, [sp, #12]
 801a416:	4293      	cmp	r3, r2
 801a418:	db01      	blt.n	801a41e <_svfprintf_r+0xc56>
 801a41a:	07e9      	lsls	r1, r5, #31
 801a41c:	d50d      	bpl.n	801a43a <_svfprintf_r+0xc72>
 801a41e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a420:	6023      	str	r3, [r4, #0]
 801a422:	9b08      	ldr	r3, [sp, #32]
 801a424:	6063      	str	r3, [r4, #4]
 801a426:	9a08      	ldr	r2, [sp, #32]
 801a428:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a42a:	4413      	add	r3, r2
 801a42c:	9321      	str	r3, [sp, #132]	; 0x84
 801a42e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801a430:	3301      	adds	r3, #1
 801a432:	2b07      	cmp	r3, #7
 801a434:	9320      	str	r3, [sp, #128]	; 0x80
 801a436:	dc60      	bgt.n	801a4fa <_svfprintf_r+0xd32>
 801a438:	3408      	adds	r4, #8
 801a43a:	9b03      	ldr	r3, [sp, #12]
 801a43c:	9a03      	ldr	r2, [sp, #12]
 801a43e:	1bde      	subs	r6, r3, r7
 801a440:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a442:	1ad3      	subs	r3, r2, r3
 801a444:	429e      	cmp	r6, r3
 801a446:	bfa8      	it	ge
 801a448:	461e      	movge	r6, r3
 801a44a:	2e00      	cmp	r6, #0
 801a44c:	dd0b      	ble.n	801a466 <_svfprintf_r+0xc9e>
 801a44e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a450:	6066      	str	r6, [r4, #4]
 801a452:	4433      	add	r3, r6
 801a454:	9321      	str	r3, [sp, #132]	; 0x84
 801a456:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801a458:	3301      	adds	r3, #1
 801a45a:	4447      	add	r7, r8
 801a45c:	2b07      	cmp	r3, #7
 801a45e:	6027      	str	r7, [r4, #0]
 801a460:	9320      	str	r3, [sp, #128]	; 0x80
 801a462:	dc54      	bgt.n	801a50e <_svfprintf_r+0xd46>
 801a464:	3408      	adds	r4, #8
 801a466:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a468:	9a03      	ldr	r2, [sp, #12]
 801a46a:	2e00      	cmp	r6, #0
 801a46c:	eba2 0303 	sub.w	r3, r2, r3
 801a470:	bfac      	ite	ge
 801a472:	1b9e      	subge	r6, r3, r6
 801a474:	461e      	movlt	r6, r3
 801a476:	2e00      	cmp	r6, #0
 801a478:	f77f acd7 	ble.w	8019e2a <_svfprintf_r+0x662>
 801a47c:	4f2f      	ldr	r7, [pc, #188]	; (801a53c <_svfprintf_r+0xd74>)
 801a47e:	f04f 0810 	mov.w	r8, #16
 801a482:	2e10      	cmp	r6, #16
 801a484:	6027      	str	r7, [r4, #0]
 801a486:	f77f aee7 	ble.w	801a258 <_svfprintf_r+0xa90>
 801a48a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a48c:	f8c4 8004 	str.w	r8, [r4, #4]
 801a490:	3310      	adds	r3, #16
 801a492:	9321      	str	r3, [sp, #132]	; 0x84
 801a494:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801a496:	3301      	adds	r3, #1
 801a498:	2b07      	cmp	r3, #7
 801a49a:	9320      	str	r3, [sp, #128]	; 0x80
 801a49c:	dc41      	bgt.n	801a522 <_svfprintf_r+0xd5a>
 801a49e:	3408      	adds	r4, #8
 801a4a0:	3e10      	subs	r6, #16
 801a4a2:	e7ee      	b.n	801a482 <_svfprintf_r+0xcba>
 801a4a4:	aa1f      	add	r2, sp, #124	; 0x7c
 801a4a6:	4651      	mov	r1, sl
 801a4a8:	4658      	mov	r0, fp
 801a4aa:	f002 f812 	bl	801c4d2 <__ssprint_r>
 801a4ae:	2800      	cmp	r0, #0
 801a4b0:	f040 80eb 	bne.w	801a68a <_svfprintf_r+0xec2>
 801a4b4:	ac2c      	add	r4, sp, #176	; 0xb0
 801a4b6:	e796      	b.n	801a3e6 <_svfprintf_r+0xc1e>
 801a4b8:	2310      	movs	r3, #16
 801a4ba:	6063      	str	r3, [r4, #4]
 801a4bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a4be:	3310      	adds	r3, #16
 801a4c0:	9321      	str	r3, [sp, #132]	; 0x84
 801a4c2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801a4c4:	3301      	adds	r3, #1
 801a4c6:	2b07      	cmp	r3, #7
 801a4c8:	9320      	str	r3, [sp, #128]	; 0x80
 801a4ca:	dc02      	bgt.n	801a4d2 <_svfprintf_r+0xd0a>
 801a4cc:	3408      	adds	r4, #8
 801a4ce:	3e10      	subs	r6, #16
 801a4d0:	e791      	b.n	801a3f6 <_svfprintf_r+0xc2e>
 801a4d2:	aa1f      	add	r2, sp, #124	; 0x7c
 801a4d4:	4651      	mov	r1, sl
 801a4d6:	4658      	mov	r0, fp
 801a4d8:	f001 fffb 	bl	801c4d2 <__ssprint_r>
 801a4dc:	2800      	cmp	r0, #0
 801a4de:	f040 80d4 	bne.w	801a68a <_svfprintf_r+0xec2>
 801a4e2:	ac2c      	add	r4, sp, #176	; 0xb0
 801a4e4:	e7f3      	b.n	801a4ce <_svfprintf_r+0xd06>
 801a4e6:	aa1f      	add	r2, sp, #124	; 0x7c
 801a4e8:	4651      	mov	r1, sl
 801a4ea:	4658      	mov	r0, fp
 801a4ec:	f001 fff1 	bl	801c4d2 <__ssprint_r>
 801a4f0:	2800      	cmp	r0, #0
 801a4f2:	f040 80ca 	bne.w	801a68a <_svfprintf_r+0xec2>
 801a4f6:	ac2c      	add	r4, sp, #176	; 0xb0
 801a4f8:	e78b      	b.n	801a412 <_svfprintf_r+0xc4a>
 801a4fa:	aa1f      	add	r2, sp, #124	; 0x7c
 801a4fc:	4651      	mov	r1, sl
 801a4fe:	4658      	mov	r0, fp
 801a500:	f001 ffe7 	bl	801c4d2 <__ssprint_r>
 801a504:	2800      	cmp	r0, #0
 801a506:	f040 80c0 	bne.w	801a68a <_svfprintf_r+0xec2>
 801a50a:	ac2c      	add	r4, sp, #176	; 0xb0
 801a50c:	e795      	b.n	801a43a <_svfprintf_r+0xc72>
 801a50e:	aa1f      	add	r2, sp, #124	; 0x7c
 801a510:	4651      	mov	r1, sl
 801a512:	4658      	mov	r0, fp
 801a514:	f001 ffdd 	bl	801c4d2 <__ssprint_r>
 801a518:	2800      	cmp	r0, #0
 801a51a:	f040 80b6 	bne.w	801a68a <_svfprintf_r+0xec2>
 801a51e:	ac2c      	add	r4, sp, #176	; 0xb0
 801a520:	e7a1      	b.n	801a466 <_svfprintf_r+0xc9e>
 801a522:	aa1f      	add	r2, sp, #124	; 0x7c
 801a524:	4651      	mov	r1, sl
 801a526:	4658      	mov	r0, fp
 801a528:	f001 ffd3 	bl	801c4d2 <__ssprint_r>
 801a52c:	2800      	cmp	r0, #0
 801a52e:	f040 80ac 	bne.w	801a68a <_svfprintf_r+0xec2>
 801a532:	ac2c      	add	r4, sp, #176	; 0xb0
 801a534:	e7b4      	b.n	801a4a0 <_svfprintf_r+0xcd8>
 801a536:	bf00      	nop
 801a538:	0802bba6 	.word	0x0802bba6
 801a53c:	080d8a8e 	.word	0x080d8a8e
 801a540:	9b03      	ldr	r3, [sp, #12]
 801a542:	2b01      	cmp	r3, #1
 801a544:	dc01      	bgt.n	801a54a <_svfprintf_r+0xd82>
 801a546:	07ea      	lsls	r2, r5, #31
 801a548:	d576      	bpl.n	801a638 <_svfprintf_r+0xe70>
 801a54a:	2301      	movs	r3, #1
 801a54c:	6063      	str	r3, [r4, #4]
 801a54e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a550:	f8c4 8000 	str.w	r8, [r4]
 801a554:	3301      	adds	r3, #1
 801a556:	9321      	str	r3, [sp, #132]	; 0x84
 801a558:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801a55a:	3301      	adds	r3, #1
 801a55c:	2b07      	cmp	r3, #7
 801a55e:	9320      	str	r3, [sp, #128]	; 0x80
 801a560:	dc36      	bgt.n	801a5d0 <_svfprintf_r+0xe08>
 801a562:	3408      	adds	r4, #8
 801a564:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a566:	6023      	str	r3, [r4, #0]
 801a568:	9b08      	ldr	r3, [sp, #32]
 801a56a:	6063      	str	r3, [r4, #4]
 801a56c:	9a08      	ldr	r2, [sp, #32]
 801a56e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a570:	4413      	add	r3, r2
 801a572:	9321      	str	r3, [sp, #132]	; 0x84
 801a574:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801a576:	3301      	adds	r3, #1
 801a578:	2b07      	cmp	r3, #7
 801a57a:	9320      	str	r3, [sp, #128]	; 0x80
 801a57c:	dc31      	bgt.n	801a5e2 <_svfprintf_r+0xe1a>
 801a57e:	3408      	adds	r4, #8
 801a580:	2300      	movs	r3, #0
 801a582:	2200      	movs	r2, #0
 801a584:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a588:	f7e6 fa9a 	bl	8000ac0 <__aeabi_dcmpeq>
 801a58c:	9b03      	ldr	r3, [sp, #12]
 801a58e:	1e5e      	subs	r6, r3, #1
 801a590:	2800      	cmp	r0, #0
 801a592:	d12f      	bne.n	801a5f4 <_svfprintf_r+0xe2c>
 801a594:	f108 0301 	add.w	r3, r8, #1
 801a598:	e884 0048 	stmia.w	r4, {r3, r6}
 801a59c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a59e:	9a03      	ldr	r2, [sp, #12]
 801a5a0:	3b01      	subs	r3, #1
 801a5a2:	4413      	add	r3, r2
 801a5a4:	9321      	str	r3, [sp, #132]	; 0x84
 801a5a6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801a5a8:	3301      	adds	r3, #1
 801a5aa:	2b07      	cmp	r3, #7
 801a5ac:	9320      	str	r3, [sp, #128]	; 0x80
 801a5ae:	dd4a      	ble.n	801a646 <_svfprintf_r+0xe7e>
 801a5b0:	aa1f      	add	r2, sp, #124	; 0x7c
 801a5b2:	4651      	mov	r1, sl
 801a5b4:	4658      	mov	r0, fp
 801a5b6:	f001 ff8c 	bl	801c4d2 <__ssprint_r>
 801a5ba:	2800      	cmp	r0, #0
 801a5bc:	d165      	bne.n	801a68a <_svfprintf_r+0xec2>
 801a5be:	ac2c      	add	r4, sp, #176	; 0xb0
 801a5c0:	ab1b      	add	r3, sp, #108	; 0x6c
 801a5c2:	6023      	str	r3, [r4, #0]
 801a5c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a5c6:	6063      	str	r3, [r4, #4]
 801a5c8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a5ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a5cc:	4413      	add	r3, r2
 801a5ce:	e41c      	b.n	8019e0a <_svfprintf_r+0x642>
 801a5d0:	aa1f      	add	r2, sp, #124	; 0x7c
 801a5d2:	4651      	mov	r1, sl
 801a5d4:	4658      	mov	r0, fp
 801a5d6:	f001 ff7c 	bl	801c4d2 <__ssprint_r>
 801a5da:	2800      	cmp	r0, #0
 801a5dc:	d155      	bne.n	801a68a <_svfprintf_r+0xec2>
 801a5de:	ac2c      	add	r4, sp, #176	; 0xb0
 801a5e0:	e7c0      	b.n	801a564 <_svfprintf_r+0xd9c>
 801a5e2:	aa1f      	add	r2, sp, #124	; 0x7c
 801a5e4:	4651      	mov	r1, sl
 801a5e6:	4658      	mov	r0, fp
 801a5e8:	f001 ff73 	bl	801c4d2 <__ssprint_r>
 801a5ec:	2800      	cmp	r0, #0
 801a5ee:	d14c      	bne.n	801a68a <_svfprintf_r+0xec2>
 801a5f0:	ac2c      	add	r4, sp, #176	; 0xb0
 801a5f2:	e7c5      	b.n	801a580 <_svfprintf_r+0xdb8>
 801a5f4:	2e00      	cmp	r6, #0
 801a5f6:	dde3      	ble.n	801a5c0 <_svfprintf_r+0xdf8>
 801a5f8:	4f59      	ldr	r7, [pc, #356]	; (801a760 <_svfprintf_r+0xf98>)
 801a5fa:	f04f 0810 	mov.w	r8, #16
 801a5fe:	2e10      	cmp	r6, #16
 801a600:	6027      	str	r7, [r4, #0]
 801a602:	dc04      	bgt.n	801a60e <_svfprintf_r+0xe46>
 801a604:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a606:	6066      	str	r6, [r4, #4]
 801a608:	441e      	add	r6, r3
 801a60a:	9621      	str	r6, [sp, #132]	; 0x84
 801a60c:	e7cb      	b.n	801a5a6 <_svfprintf_r+0xdde>
 801a60e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a610:	f8c4 8004 	str.w	r8, [r4, #4]
 801a614:	3310      	adds	r3, #16
 801a616:	9321      	str	r3, [sp, #132]	; 0x84
 801a618:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801a61a:	3301      	adds	r3, #1
 801a61c:	2b07      	cmp	r3, #7
 801a61e:	9320      	str	r3, [sp, #128]	; 0x80
 801a620:	dc02      	bgt.n	801a628 <_svfprintf_r+0xe60>
 801a622:	3408      	adds	r4, #8
 801a624:	3e10      	subs	r6, #16
 801a626:	e7ea      	b.n	801a5fe <_svfprintf_r+0xe36>
 801a628:	aa1f      	add	r2, sp, #124	; 0x7c
 801a62a:	4651      	mov	r1, sl
 801a62c:	4658      	mov	r0, fp
 801a62e:	f001 ff50 	bl	801c4d2 <__ssprint_r>
 801a632:	bb50      	cbnz	r0, 801a68a <_svfprintf_r+0xec2>
 801a634:	ac2c      	add	r4, sp, #176	; 0xb0
 801a636:	e7f5      	b.n	801a624 <_svfprintf_r+0xe5c>
 801a638:	2301      	movs	r3, #1
 801a63a:	6063      	str	r3, [r4, #4]
 801a63c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a63e:	f8c4 8000 	str.w	r8, [r4]
 801a642:	3301      	adds	r3, #1
 801a644:	e7ae      	b.n	801a5a4 <_svfprintf_r+0xddc>
 801a646:	3408      	adds	r4, #8
 801a648:	e7ba      	b.n	801a5c0 <_svfprintf_r+0xdf8>
 801a64a:	3408      	adds	r4, #8
 801a64c:	f7ff bbed 	b.w	8019e2a <_svfprintf_r+0x662>
 801a650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a652:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a654:	1a9d      	subs	r5, r3, r2
 801a656:	2d00      	cmp	r5, #0
 801a658:	f77f abea 	ble.w	8019e30 <_svfprintf_r+0x668>
 801a65c:	2610      	movs	r6, #16
 801a65e:	4b41      	ldr	r3, [pc, #260]	; (801a764 <_svfprintf_r+0xf9c>)
 801a660:	6023      	str	r3, [r4, #0]
 801a662:	2d10      	cmp	r5, #16
 801a664:	dc1b      	bgt.n	801a69e <_svfprintf_r+0xed6>
 801a666:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a668:	6065      	str	r5, [r4, #4]
 801a66a:	441d      	add	r5, r3
 801a66c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801a66e:	9521      	str	r5, [sp, #132]	; 0x84
 801a670:	3301      	adds	r3, #1
 801a672:	2b07      	cmp	r3, #7
 801a674:	9320      	str	r3, [sp, #128]	; 0x80
 801a676:	f77f abdb 	ble.w	8019e30 <_svfprintf_r+0x668>
 801a67a:	aa1f      	add	r2, sp, #124	; 0x7c
 801a67c:	4651      	mov	r1, sl
 801a67e:	4658      	mov	r0, fp
 801a680:	f001 ff27 	bl	801c4d2 <__ssprint_r>
 801a684:	2800      	cmp	r0, #0
 801a686:	f43f abd3 	beq.w	8019e30 <_svfprintf_r+0x668>
 801a68a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801a68e:	f013 0f40 	tst.w	r3, #64	; 0x40
 801a692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a694:	bf18      	it	ne
 801a696:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 801a69a:	f7ff b8b9 	b.w	8019810 <_svfprintf_r+0x48>
 801a69e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a6a0:	6066      	str	r6, [r4, #4]
 801a6a2:	3310      	adds	r3, #16
 801a6a4:	9321      	str	r3, [sp, #132]	; 0x84
 801a6a6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801a6a8:	3301      	adds	r3, #1
 801a6aa:	2b07      	cmp	r3, #7
 801a6ac:	9320      	str	r3, [sp, #128]	; 0x80
 801a6ae:	dc02      	bgt.n	801a6b6 <_svfprintf_r+0xeee>
 801a6b0:	3408      	adds	r4, #8
 801a6b2:	3d10      	subs	r5, #16
 801a6b4:	e7d3      	b.n	801a65e <_svfprintf_r+0xe96>
 801a6b6:	aa1f      	add	r2, sp, #124	; 0x7c
 801a6b8:	4651      	mov	r1, sl
 801a6ba:	4658      	mov	r0, fp
 801a6bc:	f001 ff09 	bl	801c4d2 <__ssprint_r>
 801a6c0:	2800      	cmp	r0, #0
 801a6c2:	d1e2      	bne.n	801a68a <_svfprintf_r+0xec2>
 801a6c4:	ac2c      	add	r4, sp, #176	; 0xb0
 801a6c6:	e7f4      	b.n	801a6b2 <_svfprintf_r+0xeea>
 801a6c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a6ca:	2b00      	cmp	r3, #0
 801a6cc:	d0dd      	beq.n	801a68a <_svfprintf_r+0xec2>
 801a6ce:	aa1f      	add	r2, sp, #124	; 0x7c
 801a6d0:	4651      	mov	r1, sl
 801a6d2:	4658      	mov	r0, fp
 801a6d4:	f001 fefd 	bl	801c4d2 <__ssprint_r>
 801a6d8:	e7d7      	b.n	801a68a <_svfprintf_r+0xec2>
 801a6da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a6de:	4610      	mov	r0, r2
 801a6e0:	4619      	mov	r1, r3
 801a6e2:	f7e6 fa1f 	bl	8000b24 <__aeabi_dcmpun>
 801a6e6:	2800      	cmp	r0, #0
 801a6e8:	f43f aa44 	beq.w	8019b74 <_svfprintf_r+0x3ac>
 801a6ec:	4b1e      	ldr	r3, [pc, #120]	; (801a768 <_svfprintf_r+0xfa0>)
 801a6ee:	4a1f      	ldr	r2, [pc, #124]	; (801a76c <_svfprintf_r+0xfa4>)
 801a6f0:	f7ff ba34 	b.w	8019b5c <_svfprintf_r+0x394>
 801a6f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a6f6:	eba3 0308 	sub.w	r3, r3, r8
 801a6fa:	9303      	str	r3, [sp, #12]
 801a6fc:	f7ff bab5 	b.w	8019c6a <_svfprintf_r+0x4a2>
 801a700:	ea56 0207 	orrs.w	r2, r6, r7
 801a704:	950b      	str	r5, [sp, #44]	; 0x2c
 801a706:	f43f ac2b 	beq.w	8019f60 <_svfprintf_r+0x798>
 801a70a:	2b01      	cmp	r3, #1
 801a70c:	f43f ac9d 	beq.w	801a04a <_svfprintf_r+0x882>
 801a710:	2b02      	cmp	r3, #2
 801a712:	f43f acbd 	beq.w	801a090 <_svfprintf_r+0x8c8>
 801a716:	ab2c      	add	r3, sp, #176	; 0xb0
 801a718:	08f1      	lsrs	r1, r6, #3
 801a71a:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 801a71e:	08f8      	lsrs	r0, r7, #3
 801a720:	f006 0207 	and.w	r2, r6, #7
 801a724:	4607      	mov	r7, r0
 801a726:	460e      	mov	r6, r1
 801a728:	3230      	adds	r2, #48	; 0x30
 801a72a:	ea56 0107 	orrs.w	r1, r6, r7
 801a72e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 801a732:	f803 2c01 	strb.w	r2, [r3, #-1]
 801a736:	f47f ac86 	bne.w	801a046 <_svfprintf_r+0x87e>
 801a73a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801a73c:	07c9      	lsls	r1, r1, #31
 801a73e:	d506      	bpl.n	801a74e <_svfprintf_r+0xf86>
 801a740:	2a30      	cmp	r2, #48	; 0x30
 801a742:	d004      	beq.n	801a74e <_svfprintf_r+0xf86>
 801a744:	2230      	movs	r2, #48	; 0x30
 801a746:	f808 2c01 	strb.w	r2, [r8, #-1]
 801a74a:	f1a3 0802 	sub.w	r8, r3, #2
 801a74e:	464e      	mov	r6, r9
 801a750:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 801a754:	eba9 0908 	sub.w	r9, r9, r8
 801a758:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801a75a:	2700      	movs	r7, #0
 801a75c:	f7ff bad1 	b.w	8019d02 <_svfprintf_r+0x53a>
 801a760:	080d8a8e 	.word	0x080d8a8e
 801a764:	080d8a7e 	.word	0x080d8a7e
 801a768:	080d8a54 	.word	0x080d8a54
 801a76c:	080d8a58 	.word	0x080d8a58

0801a770 <_vsprintf_r>:
 801a770:	b510      	push	{r4, lr}
 801a772:	b09a      	sub	sp, #104	; 0x68
 801a774:	f44f 7402 	mov.w	r4, #520	; 0x208
 801a778:	9100      	str	r1, [sp, #0]
 801a77a:	9104      	str	r1, [sp, #16]
 801a77c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801a780:	9102      	str	r1, [sp, #8]
 801a782:	9105      	str	r1, [sp, #20]
 801a784:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801a788:	f8ad 100e 	strh.w	r1, [sp, #14]
 801a78c:	4669      	mov	r1, sp
 801a78e:	f8ad 400c 	strh.w	r4, [sp, #12]
 801a792:	f7ff f819 	bl	80197c8 <_svfprintf_r>
 801a796:	9b00      	ldr	r3, [sp, #0]
 801a798:	2200      	movs	r2, #0
 801a79a:	701a      	strb	r2, [r3, #0]
 801a79c:	b01a      	add	sp, #104	; 0x68
 801a79e:	bd10      	pop	{r4, pc}

0801a7a0 <vsprintf>:
 801a7a0:	4613      	mov	r3, r2
 801a7a2:	460a      	mov	r2, r1
 801a7a4:	4601      	mov	r1, r0
 801a7a6:	4802      	ldr	r0, [pc, #8]	; (801a7b0 <vsprintf+0x10>)
 801a7a8:	6800      	ldr	r0, [r0, #0]
 801a7aa:	f7ff bfe1 	b.w	801a770 <_vsprintf_r>
 801a7ae:	bf00      	nop
 801a7b0:	20001cb4 	.word	0x20001cb4

0801a7b4 <quorem>:
 801a7b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a7b8:	6903      	ldr	r3, [r0, #16]
 801a7ba:	690c      	ldr	r4, [r1, #16]
 801a7bc:	429c      	cmp	r4, r3
 801a7be:	4680      	mov	r8, r0
 801a7c0:	f300 8082 	bgt.w	801a8c8 <quorem+0x114>
 801a7c4:	3c01      	subs	r4, #1
 801a7c6:	f101 0714 	add.w	r7, r1, #20
 801a7ca:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 801a7ce:	f100 0614 	add.w	r6, r0, #20
 801a7d2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801a7d6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801a7da:	eb06 030e 	add.w	r3, r6, lr
 801a7de:	3501      	adds	r5, #1
 801a7e0:	eb07 090e 	add.w	r9, r7, lr
 801a7e4:	9301      	str	r3, [sp, #4]
 801a7e6:	fbb0 f5f5 	udiv	r5, r0, r5
 801a7ea:	b395      	cbz	r5, 801a852 <quorem+0x9e>
 801a7ec:	f04f 0a00 	mov.w	sl, #0
 801a7f0:	4638      	mov	r0, r7
 801a7f2:	46b4      	mov	ip, r6
 801a7f4:	46d3      	mov	fp, sl
 801a7f6:	f850 2b04 	ldr.w	r2, [r0], #4
 801a7fa:	b293      	uxth	r3, r2
 801a7fc:	fb05 a303 	mla	r3, r5, r3, sl
 801a800:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801a804:	b29b      	uxth	r3, r3
 801a806:	ebab 0303 	sub.w	r3, fp, r3
 801a80a:	0c12      	lsrs	r2, r2, #16
 801a80c:	f8bc b000 	ldrh.w	fp, [ip]
 801a810:	fb05 a202 	mla	r2, r5, r2, sl
 801a814:	fa13 f38b 	uxtah	r3, r3, fp
 801a818:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801a81c:	fa1f fb82 	uxth.w	fp, r2
 801a820:	f8dc 2000 	ldr.w	r2, [ip]
 801a824:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 801a828:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801a82c:	b29b      	uxth	r3, r3
 801a82e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a832:	4581      	cmp	r9, r0
 801a834:	ea4f 4b22 	mov.w	fp, r2, asr #16
 801a838:	f84c 3b04 	str.w	r3, [ip], #4
 801a83c:	d2db      	bcs.n	801a7f6 <quorem+0x42>
 801a83e:	f856 300e 	ldr.w	r3, [r6, lr]
 801a842:	b933      	cbnz	r3, 801a852 <quorem+0x9e>
 801a844:	9b01      	ldr	r3, [sp, #4]
 801a846:	3b04      	subs	r3, #4
 801a848:	429e      	cmp	r6, r3
 801a84a:	461a      	mov	r2, r3
 801a84c:	d330      	bcc.n	801a8b0 <quorem+0xfc>
 801a84e:	f8c8 4010 	str.w	r4, [r8, #16]
 801a852:	4640      	mov	r0, r8
 801a854:	f001 fbb3 	bl	801bfbe <__mcmp>
 801a858:	2800      	cmp	r0, #0
 801a85a:	db25      	blt.n	801a8a8 <quorem+0xf4>
 801a85c:	3501      	adds	r5, #1
 801a85e:	4630      	mov	r0, r6
 801a860:	f04f 0e00 	mov.w	lr, #0
 801a864:	f857 2b04 	ldr.w	r2, [r7], #4
 801a868:	f8d0 c000 	ldr.w	ip, [r0]
 801a86c:	b293      	uxth	r3, r2
 801a86e:	ebae 0303 	sub.w	r3, lr, r3
 801a872:	0c12      	lsrs	r2, r2, #16
 801a874:	fa13 f38c 	uxtah	r3, r3, ip
 801a878:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801a87c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801a880:	b29b      	uxth	r3, r3
 801a882:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a886:	45b9      	cmp	r9, r7
 801a888:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801a88c:	f840 3b04 	str.w	r3, [r0], #4
 801a890:	d2e8      	bcs.n	801a864 <quorem+0xb0>
 801a892:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801a896:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801a89a:	b92a      	cbnz	r2, 801a8a8 <quorem+0xf4>
 801a89c:	3b04      	subs	r3, #4
 801a89e:	429e      	cmp	r6, r3
 801a8a0:	461a      	mov	r2, r3
 801a8a2:	d30b      	bcc.n	801a8bc <quorem+0x108>
 801a8a4:	f8c8 4010 	str.w	r4, [r8, #16]
 801a8a8:	4628      	mov	r0, r5
 801a8aa:	b003      	add	sp, #12
 801a8ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a8b0:	6812      	ldr	r2, [r2, #0]
 801a8b2:	3b04      	subs	r3, #4
 801a8b4:	2a00      	cmp	r2, #0
 801a8b6:	d1ca      	bne.n	801a84e <quorem+0x9a>
 801a8b8:	3c01      	subs	r4, #1
 801a8ba:	e7c5      	b.n	801a848 <quorem+0x94>
 801a8bc:	6812      	ldr	r2, [r2, #0]
 801a8be:	3b04      	subs	r3, #4
 801a8c0:	2a00      	cmp	r2, #0
 801a8c2:	d1ef      	bne.n	801a8a4 <quorem+0xf0>
 801a8c4:	3c01      	subs	r4, #1
 801a8c6:	e7ea      	b.n	801a89e <quorem+0xea>
 801a8c8:	2000      	movs	r0, #0
 801a8ca:	e7ee      	b.n	801a8aa <quorem+0xf6>
 801a8cc:	0000      	movs	r0, r0
	...

0801a8d0 <_dtoa_r>:
 801a8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a8d4:	ec57 6b10 	vmov	r6, r7, d0
 801a8d8:	b097      	sub	sp, #92	; 0x5c
 801a8da:	e9cd 6700 	strd	r6, r7, [sp]
 801a8de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801a8e0:	9107      	str	r1, [sp, #28]
 801a8e2:	4604      	mov	r4, r0
 801a8e4:	920a      	str	r2, [sp, #40]	; 0x28
 801a8e6:	930f      	str	r3, [sp, #60]	; 0x3c
 801a8e8:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801a8ea:	b93e      	cbnz	r6, 801a8fc <_dtoa_r+0x2c>
 801a8ec:	2010      	movs	r0, #16
 801a8ee:	f001 f929 	bl	801bb44 <malloc>
 801a8f2:	6260      	str	r0, [r4, #36]	; 0x24
 801a8f4:	6046      	str	r6, [r0, #4]
 801a8f6:	6086      	str	r6, [r0, #8]
 801a8f8:	6006      	str	r6, [r0, #0]
 801a8fa:	60c6      	str	r6, [r0, #12]
 801a8fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a8fe:	6819      	ldr	r1, [r3, #0]
 801a900:	b151      	cbz	r1, 801a918 <_dtoa_r+0x48>
 801a902:	685a      	ldr	r2, [r3, #4]
 801a904:	604a      	str	r2, [r1, #4]
 801a906:	2301      	movs	r3, #1
 801a908:	4093      	lsls	r3, r2
 801a90a:	608b      	str	r3, [r1, #8]
 801a90c:	4620      	mov	r0, r4
 801a90e:	f001 f981 	bl	801bc14 <_Bfree>
 801a912:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a914:	2200      	movs	r2, #0
 801a916:	601a      	str	r2, [r3, #0]
 801a918:	9b01      	ldr	r3, [sp, #4]
 801a91a:	2b00      	cmp	r3, #0
 801a91c:	bfbf      	itttt	lt
 801a91e:	2301      	movlt	r3, #1
 801a920:	602b      	strlt	r3, [r5, #0]
 801a922:	9b01      	ldrlt	r3, [sp, #4]
 801a924:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801a928:	bfb2      	itee	lt
 801a92a:	9301      	strlt	r3, [sp, #4]
 801a92c:	2300      	movge	r3, #0
 801a92e:	602b      	strge	r3, [r5, #0]
 801a930:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a934:	4ba8      	ldr	r3, [pc, #672]	; (801abd8 <_dtoa_r+0x308>)
 801a936:	ea33 0308 	bics.w	r3, r3, r8
 801a93a:	d11b      	bne.n	801a974 <_dtoa_r+0xa4>
 801a93c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a93e:	f242 730f 	movw	r3, #9999	; 0x270f
 801a942:	6013      	str	r3, [r2, #0]
 801a944:	9b00      	ldr	r3, [sp, #0]
 801a946:	b923      	cbnz	r3, 801a952 <_dtoa_r+0x82>
 801a948:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801a94c:	2800      	cmp	r0, #0
 801a94e:	f000 8578 	beq.w	801b442 <_dtoa_r+0xb72>
 801a952:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a954:	b953      	cbnz	r3, 801a96c <_dtoa_r+0x9c>
 801a956:	4ba1      	ldr	r3, [pc, #644]	; (801abdc <_dtoa_r+0x30c>)
 801a958:	e021      	b.n	801a99e <_dtoa_r+0xce>
 801a95a:	4ba1      	ldr	r3, [pc, #644]	; (801abe0 <_dtoa_r+0x310>)
 801a95c:	9302      	str	r3, [sp, #8]
 801a95e:	3308      	adds	r3, #8
 801a960:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a962:	6013      	str	r3, [r2, #0]
 801a964:	9802      	ldr	r0, [sp, #8]
 801a966:	b017      	add	sp, #92	; 0x5c
 801a968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a96c:	4b9b      	ldr	r3, [pc, #620]	; (801abdc <_dtoa_r+0x30c>)
 801a96e:	9302      	str	r3, [sp, #8]
 801a970:	3303      	adds	r3, #3
 801a972:	e7f5      	b.n	801a960 <_dtoa_r+0x90>
 801a974:	e9dd 6700 	ldrd	r6, r7, [sp]
 801a978:	2200      	movs	r2, #0
 801a97a:	2300      	movs	r3, #0
 801a97c:	4630      	mov	r0, r6
 801a97e:	4639      	mov	r1, r7
 801a980:	f7e6 f89e 	bl	8000ac0 <__aeabi_dcmpeq>
 801a984:	4681      	mov	r9, r0
 801a986:	b160      	cbz	r0, 801a9a2 <_dtoa_r+0xd2>
 801a988:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a98a:	2301      	movs	r3, #1
 801a98c:	6013      	str	r3, [r2, #0]
 801a98e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a990:	2b00      	cmp	r3, #0
 801a992:	f000 8553 	beq.w	801b43c <_dtoa_r+0xb6c>
 801a996:	4b93      	ldr	r3, [pc, #588]	; (801abe4 <_dtoa_r+0x314>)
 801a998:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a99a:	6013      	str	r3, [r2, #0]
 801a99c:	3b01      	subs	r3, #1
 801a99e:	9302      	str	r3, [sp, #8]
 801a9a0:	e7e0      	b.n	801a964 <_dtoa_r+0x94>
 801a9a2:	aa14      	add	r2, sp, #80	; 0x50
 801a9a4:	a915      	add	r1, sp, #84	; 0x54
 801a9a6:	ec47 6b10 	vmov	d0, r6, r7
 801a9aa:	4620      	mov	r0, r4
 801a9ac:	f001 fb7f 	bl	801c0ae <__d2b>
 801a9b0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801a9b4:	4682      	mov	sl, r0
 801a9b6:	2d00      	cmp	r5, #0
 801a9b8:	d07e      	beq.n	801aab8 <_dtoa_r+0x1e8>
 801a9ba:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801a9be:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 801a9c2:	4630      	mov	r0, r6
 801a9c4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801a9c8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801a9cc:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 801a9d0:	2200      	movs	r2, #0
 801a9d2:	4b85      	ldr	r3, [pc, #532]	; (801abe8 <_dtoa_r+0x318>)
 801a9d4:	f7e5 fc58 	bl	8000288 <__aeabi_dsub>
 801a9d8:	a379      	add	r3, pc, #484	; (adr r3, 801abc0 <_dtoa_r+0x2f0>)
 801a9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9de:	f7e5 fe07 	bl	80005f0 <__aeabi_dmul>
 801a9e2:	a379      	add	r3, pc, #484	; (adr r3, 801abc8 <_dtoa_r+0x2f8>)
 801a9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9e8:	f7e5 fc50 	bl	800028c <__adddf3>
 801a9ec:	4606      	mov	r6, r0
 801a9ee:	4628      	mov	r0, r5
 801a9f0:	460f      	mov	r7, r1
 801a9f2:	f7e5 fd97 	bl	8000524 <__aeabi_i2d>
 801a9f6:	a376      	add	r3, pc, #472	; (adr r3, 801abd0 <_dtoa_r+0x300>)
 801a9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9fc:	f7e5 fdf8 	bl	80005f0 <__aeabi_dmul>
 801aa00:	4602      	mov	r2, r0
 801aa02:	460b      	mov	r3, r1
 801aa04:	4630      	mov	r0, r6
 801aa06:	4639      	mov	r1, r7
 801aa08:	f7e5 fc40 	bl	800028c <__adddf3>
 801aa0c:	4606      	mov	r6, r0
 801aa0e:	460f      	mov	r7, r1
 801aa10:	f7e6 f89e 	bl	8000b50 <__aeabi_d2iz>
 801aa14:	2200      	movs	r2, #0
 801aa16:	4683      	mov	fp, r0
 801aa18:	2300      	movs	r3, #0
 801aa1a:	4630      	mov	r0, r6
 801aa1c:	4639      	mov	r1, r7
 801aa1e:	f7e6 f859 	bl	8000ad4 <__aeabi_dcmplt>
 801aa22:	b158      	cbz	r0, 801aa3c <_dtoa_r+0x16c>
 801aa24:	4658      	mov	r0, fp
 801aa26:	f7e5 fd7d 	bl	8000524 <__aeabi_i2d>
 801aa2a:	4602      	mov	r2, r0
 801aa2c:	460b      	mov	r3, r1
 801aa2e:	4630      	mov	r0, r6
 801aa30:	4639      	mov	r1, r7
 801aa32:	f7e6 f845 	bl	8000ac0 <__aeabi_dcmpeq>
 801aa36:	b908      	cbnz	r0, 801aa3c <_dtoa_r+0x16c>
 801aa38:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801aa3c:	f1bb 0f16 	cmp.w	fp, #22
 801aa40:	d859      	bhi.n	801aaf6 <_dtoa_r+0x226>
 801aa42:	496a      	ldr	r1, [pc, #424]	; (801abec <_dtoa_r+0x31c>)
 801aa44:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 801aa48:	e9dd 2300 	ldrd	r2, r3, [sp]
 801aa4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801aa50:	f7e6 f85e 	bl	8000b10 <__aeabi_dcmpgt>
 801aa54:	2800      	cmp	r0, #0
 801aa56:	d050      	beq.n	801aafa <_dtoa_r+0x22a>
 801aa58:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801aa5c:	2300      	movs	r3, #0
 801aa5e:	930e      	str	r3, [sp, #56]	; 0x38
 801aa60:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801aa62:	1b5d      	subs	r5, r3, r5
 801aa64:	1e6b      	subs	r3, r5, #1
 801aa66:	9306      	str	r3, [sp, #24]
 801aa68:	bf45      	ittet	mi
 801aa6a:	f1c5 0301 	rsbmi	r3, r5, #1
 801aa6e:	9305      	strmi	r3, [sp, #20]
 801aa70:	2300      	movpl	r3, #0
 801aa72:	2300      	movmi	r3, #0
 801aa74:	bf4c      	ite	mi
 801aa76:	9306      	strmi	r3, [sp, #24]
 801aa78:	9305      	strpl	r3, [sp, #20]
 801aa7a:	f1bb 0f00 	cmp.w	fp, #0
 801aa7e:	db3e      	blt.n	801aafe <_dtoa_r+0x22e>
 801aa80:	9b06      	ldr	r3, [sp, #24]
 801aa82:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801aa86:	445b      	add	r3, fp
 801aa88:	9306      	str	r3, [sp, #24]
 801aa8a:	2300      	movs	r3, #0
 801aa8c:	9308      	str	r3, [sp, #32]
 801aa8e:	9b07      	ldr	r3, [sp, #28]
 801aa90:	2b09      	cmp	r3, #9
 801aa92:	f200 80af 	bhi.w	801abf4 <_dtoa_r+0x324>
 801aa96:	2b05      	cmp	r3, #5
 801aa98:	bfc4      	itt	gt
 801aa9a:	3b04      	subgt	r3, #4
 801aa9c:	9307      	strgt	r3, [sp, #28]
 801aa9e:	9b07      	ldr	r3, [sp, #28]
 801aaa0:	f1a3 0302 	sub.w	r3, r3, #2
 801aaa4:	bfcc      	ite	gt
 801aaa6:	2600      	movgt	r6, #0
 801aaa8:	2601      	movle	r6, #1
 801aaaa:	2b03      	cmp	r3, #3
 801aaac:	f200 80ae 	bhi.w	801ac0c <_dtoa_r+0x33c>
 801aab0:	e8df f003 	tbb	[pc, r3]
 801aab4:	772f8482 	.word	0x772f8482
 801aab8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801aaba:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801aabc:	441d      	add	r5, r3
 801aabe:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801aac2:	2b20      	cmp	r3, #32
 801aac4:	dd11      	ble.n	801aaea <_dtoa_r+0x21a>
 801aac6:	9a00      	ldr	r2, [sp, #0]
 801aac8:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801aacc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 801aad0:	fa22 f000 	lsr.w	r0, r2, r0
 801aad4:	fa08 f303 	lsl.w	r3, r8, r3
 801aad8:	4318      	orrs	r0, r3
 801aada:	f7e5 fd13 	bl	8000504 <__aeabi_ui2d>
 801aade:	2301      	movs	r3, #1
 801aae0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 801aae4:	3d01      	subs	r5, #1
 801aae6:	9312      	str	r3, [sp, #72]	; 0x48
 801aae8:	e772      	b.n	801a9d0 <_dtoa_r+0x100>
 801aaea:	f1c3 0020 	rsb	r0, r3, #32
 801aaee:	9b00      	ldr	r3, [sp, #0]
 801aaf0:	fa03 f000 	lsl.w	r0, r3, r0
 801aaf4:	e7f1      	b.n	801aada <_dtoa_r+0x20a>
 801aaf6:	2301      	movs	r3, #1
 801aaf8:	e7b1      	b.n	801aa5e <_dtoa_r+0x18e>
 801aafa:	900e      	str	r0, [sp, #56]	; 0x38
 801aafc:	e7b0      	b.n	801aa60 <_dtoa_r+0x190>
 801aafe:	9b05      	ldr	r3, [sp, #20]
 801ab00:	eba3 030b 	sub.w	r3, r3, fp
 801ab04:	9305      	str	r3, [sp, #20]
 801ab06:	f1cb 0300 	rsb	r3, fp, #0
 801ab0a:	9308      	str	r3, [sp, #32]
 801ab0c:	2300      	movs	r3, #0
 801ab0e:	930b      	str	r3, [sp, #44]	; 0x2c
 801ab10:	e7bd      	b.n	801aa8e <_dtoa_r+0x1be>
 801ab12:	2301      	movs	r3, #1
 801ab14:	9309      	str	r3, [sp, #36]	; 0x24
 801ab16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ab18:	2b00      	cmp	r3, #0
 801ab1a:	dd7a      	ble.n	801ac12 <_dtoa_r+0x342>
 801ab1c:	9304      	str	r3, [sp, #16]
 801ab1e:	9303      	str	r3, [sp, #12]
 801ab20:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801ab22:	2200      	movs	r2, #0
 801ab24:	606a      	str	r2, [r5, #4]
 801ab26:	2104      	movs	r1, #4
 801ab28:	f101 0214 	add.w	r2, r1, #20
 801ab2c:	429a      	cmp	r2, r3
 801ab2e:	d975      	bls.n	801ac1c <_dtoa_r+0x34c>
 801ab30:	6869      	ldr	r1, [r5, #4]
 801ab32:	4620      	mov	r0, r4
 801ab34:	f001 f83a 	bl	801bbac <_Balloc>
 801ab38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ab3a:	6028      	str	r0, [r5, #0]
 801ab3c:	681b      	ldr	r3, [r3, #0]
 801ab3e:	9302      	str	r3, [sp, #8]
 801ab40:	9b03      	ldr	r3, [sp, #12]
 801ab42:	2b0e      	cmp	r3, #14
 801ab44:	f200 80e5 	bhi.w	801ad12 <_dtoa_r+0x442>
 801ab48:	2e00      	cmp	r6, #0
 801ab4a:	f000 80e2 	beq.w	801ad12 <_dtoa_r+0x442>
 801ab4e:	ed9d 7b00 	vldr	d7, [sp]
 801ab52:	f1bb 0f00 	cmp.w	fp, #0
 801ab56:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801ab5a:	dd74      	ble.n	801ac46 <_dtoa_r+0x376>
 801ab5c:	4a23      	ldr	r2, [pc, #140]	; (801abec <_dtoa_r+0x31c>)
 801ab5e:	f00b 030f 	and.w	r3, fp, #15
 801ab62:	ea4f 162b 	mov.w	r6, fp, asr #4
 801ab66:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801ab6a:	06f0      	lsls	r0, r6, #27
 801ab6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 801ab70:	d559      	bpl.n	801ac26 <_dtoa_r+0x356>
 801ab72:	4b1f      	ldr	r3, [pc, #124]	; (801abf0 <_dtoa_r+0x320>)
 801ab74:	ec51 0b17 	vmov	r0, r1, d7
 801ab78:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801ab7c:	f7e5 fe62 	bl	8000844 <__aeabi_ddiv>
 801ab80:	e9cd 0100 	strd	r0, r1, [sp]
 801ab84:	f006 060f 	and.w	r6, r6, #15
 801ab88:	2503      	movs	r5, #3
 801ab8a:	4f19      	ldr	r7, [pc, #100]	; (801abf0 <_dtoa_r+0x320>)
 801ab8c:	2e00      	cmp	r6, #0
 801ab8e:	d14c      	bne.n	801ac2a <_dtoa_r+0x35a>
 801ab90:	4642      	mov	r2, r8
 801ab92:	464b      	mov	r3, r9
 801ab94:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ab98:	f7e5 fe54 	bl	8000844 <__aeabi_ddiv>
 801ab9c:	e9cd 0100 	strd	r0, r1, [sp]
 801aba0:	e06a      	b.n	801ac78 <_dtoa_r+0x3a8>
 801aba2:	2301      	movs	r3, #1
 801aba4:	9309      	str	r3, [sp, #36]	; 0x24
 801aba6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801aba8:	445b      	add	r3, fp
 801abaa:	9304      	str	r3, [sp, #16]
 801abac:	3301      	adds	r3, #1
 801abae:	2b01      	cmp	r3, #1
 801abb0:	9303      	str	r3, [sp, #12]
 801abb2:	bfb8      	it	lt
 801abb4:	2301      	movlt	r3, #1
 801abb6:	e7b3      	b.n	801ab20 <_dtoa_r+0x250>
 801abb8:	2300      	movs	r3, #0
 801abba:	e7ab      	b.n	801ab14 <_dtoa_r+0x244>
 801abbc:	2300      	movs	r3, #0
 801abbe:	e7f1      	b.n	801aba4 <_dtoa_r+0x2d4>
 801abc0:	636f4361 	.word	0x636f4361
 801abc4:	3fd287a7 	.word	0x3fd287a7
 801abc8:	8b60c8b3 	.word	0x8b60c8b3
 801abcc:	3fc68a28 	.word	0x3fc68a28
 801abd0:	509f79fb 	.word	0x509f79fb
 801abd4:	3fd34413 	.word	0x3fd34413
 801abd8:	7ff00000 	.word	0x7ff00000
 801abdc:	080d8aa7 	.word	0x080d8aa7
 801abe0:	080d8a9e 	.word	0x080d8a9e
 801abe4:	0802bba7 	.word	0x0802bba7
 801abe8:	3ff80000 	.word	0x3ff80000
 801abec:	080d8b40 	.word	0x080d8b40
 801abf0:	080d8b18 	.word	0x080d8b18
 801abf4:	2601      	movs	r6, #1
 801abf6:	2300      	movs	r3, #0
 801abf8:	9307      	str	r3, [sp, #28]
 801abfa:	9609      	str	r6, [sp, #36]	; 0x24
 801abfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ac00:	9304      	str	r3, [sp, #16]
 801ac02:	9303      	str	r3, [sp, #12]
 801ac04:	2200      	movs	r2, #0
 801ac06:	2312      	movs	r3, #18
 801ac08:	920a      	str	r2, [sp, #40]	; 0x28
 801ac0a:	e789      	b.n	801ab20 <_dtoa_r+0x250>
 801ac0c:	2301      	movs	r3, #1
 801ac0e:	9309      	str	r3, [sp, #36]	; 0x24
 801ac10:	e7f4      	b.n	801abfc <_dtoa_r+0x32c>
 801ac12:	2301      	movs	r3, #1
 801ac14:	9304      	str	r3, [sp, #16]
 801ac16:	9303      	str	r3, [sp, #12]
 801ac18:	461a      	mov	r2, r3
 801ac1a:	e7f5      	b.n	801ac08 <_dtoa_r+0x338>
 801ac1c:	686a      	ldr	r2, [r5, #4]
 801ac1e:	3201      	adds	r2, #1
 801ac20:	606a      	str	r2, [r5, #4]
 801ac22:	0049      	lsls	r1, r1, #1
 801ac24:	e780      	b.n	801ab28 <_dtoa_r+0x258>
 801ac26:	2502      	movs	r5, #2
 801ac28:	e7af      	b.n	801ab8a <_dtoa_r+0x2ba>
 801ac2a:	07f1      	lsls	r1, r6, #31
 801ac2c:	d508      	bpl.n	801ac40 <_dtoa_r+0x370>
 801ac2e:	4640      	mov	r0, r8
 801ac30:	4649      	mov	r1, r9
 801ac32:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ac36:	f7e5 fcdb 	bl	80005f0 <__aeabi_dmul>
 801ac3a:	3501      	adds	r5, #1
 801ac3c:	4680      	mov	r8, r0
 801ac3e:	4689      	mov	r9, r1
 801ac40:	1076      	asrs	r6, r6, #1
 801ac42:	3708      	adds	r7, #8
 801ac44:	e7a2      	b.n	801ab8c <_dtoa_r+0x2bc>
 801ac46:	f000 809d 	beq.w	801ad84 <_dtoa_r+0x4b4>
 801ac4a:	f1cb 0600 	rsb	r6, fp, #0
 801ac4e:	4b9f      	ldr	r3, [pc, #636]	; (801aecc <_dtoa_r+0x5fc>)
 801ac50:	4f9f      	ldr	r7, [pc, #636]	; (801aed0 <_dtoa_r+0x600>)
 801ac52:	f006 020f 	and.w	r2, r6, #15
 801ac56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ac5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801ac62:	f7e5 fcc5 	bl	80005f0 <__aeabi_dmul>
 801ac66:	e9cd 0100 	strd	r0, r1, [sp]
 801ac6a:	1136      	asrs	r6, r6, #4
 801ac6c:	2300      	movs	r3, #0
 801ac6e:	2502      	movs	r5, #2
 801ac70:	2e00      	cmp	r6, #0
 801ac72:	d17c      	bne.n	801ad6e <_dtoa_r+0x49e>
 801ac74:	2b00      	cmp	r3, #0
 801ac76:	d191      	bne.n	801ab9c <_dtoa_r+0x2cc>
 801ac78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ac7a:	2b00      	cmp	r3, #0
 801ac7c:	f000 8084 	beq.w	801ad88 <_dtoa_r+0x4b8>
 801ac80:	e9dd 8900 	ldrd	r8, r9, [sp]
 801ac84:	2200      	movs	r2, #0
 801ac86:	4b93      	ldr	r3, [pc, #588]	; (801aed4 <_dtoa_r+0x604>)
 801ac88:	4640      	mov	r0, r8
 801ac8a:	4649      	mov	r1, r9
 801ac8c:	f7e5 ff22 	bl	8000ad4 <__aeabi_dcmplt>
 801ac90:	2800      	cmp	r0, #0
 801ac92:	d079      	beq.n	801ad88 <_dtoa_r+0x4b8>
 801ac94:	9b03      	ldr	r3, [sp, #12]
 801ac96:	2b00      	cmp	r3, #0
 801ac98:	d076      	beq.n	801ad88 <_dtoa_r+0x4b8>
 801ac9a:	9b04      	ldr	r3, [sp, #16]
 801ac9c:	2b00      	cmp	r3, #0
 801ac9e:	dd34      	ble.n	801ad0a <_dtoa_r+0x43a>
 801aca0:	2200      	movs	r2, #0
 801aca2:	4b8d      	ldr	r3, [pc, #564]	; (801aed8 <_dtoa_r+0x608>)
 801aca4:	4640      	mov	r0, r8
 801aca6:	4649      	mov	r1, r9
 801aca8:	f7e5 fca2 	bl	80005f0 <__aeabi_dmul>
 801acac:	e9cd 0100 	strd	r0, r1, [sp]
 801acb0:	9e04      	ldr	r6, [sp, #16]
 801acb2:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 801acb6:	3501      	adds	r5, #1
 801acb8:	4628      	mov	r0, r5
 801acba:	f7e5 fc33 	bl	8000524 <__aeabi_i2d>
 801acbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 801acc2:	f7e5 fc95 	bl	80005f0 <__aeabi_dmul>
 801acc6:	2200      	movs	r2, #0
 801acc8:	4b84      	ldr	r3, [pc, #528]	; (801aedc <_dtoa_r+0x60c>)
 801acca:	f7e5 fadf 	bl	800028c <__adddf3>
 801acce:	4680      	mov	r8, r0
 801acd0:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 801acd4:	2e00      	cmp	r6, #0
 801acd6:	d15a      	bne.n	801ad8e <_dtoa_r+0x4be>
 801acd8:	2200      	movs	r2, #0
 801acda:	4b81      	ldr	r3, [pc, #516]	; (801aee0 <_dtoa_r+0x610>)
 801acdc:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ace0:	f7e5 fad2 	bl	8000288 <__aeabi_dsub>
 801ace4:	4642      	mov	r2, r8
 801ace6:	464b      	mov	r3, r9
 801ace8:	e9cd 0100 	strd	r0, r1, [sp]
 801acec:	f7e5 ff10 	bl	8000b10 <__aeabi_dcmpgt>
 801acf0:	2800      	cmp	r0, #0
 801acf2:	f040 829b 	bne.w	801b22c <_dtoa_r+0x95c>
 801acf6:	4642      	mov	r2, r8
 801acf8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801acfc:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ad00:	f7e5 fee8 	bl	8000ad4 <__aeabi_dcmplt>
 801ad04:	2800      	cmp	r0, #0
 801ad06:	f040 828f 	bne.w	801b228 <_dtoa_r+0x958>
 801ad0a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801ad0e:	e9cd 2300 	strd	r2, r3, [sp]
 801ad12:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ad14:	2b00      	cmp	r3, #0
 801ad16:	f2c0 8150 	blt.w	801afba <_dtoa_r+0x6ea>
 801ad1a:	f1bb 0f0e 	cmp.w	fp, #14
 801ad1e:	f300 814c 	bgt.w	801afba <_dtoa_r+0x6ea>
 801ad22:	4b6a      	ldr	r3, [pc, #424]	; (801aecc <_dtoa_r+0x5fc>)
 801ad24:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801ad28:	e9d3 8900 	ldrd	r8, r9, [r3]
 801ad2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ad2e:	2b00      	cmp	r3, #0
 801ad30:	f280 80da 	bge.w	801aee8 <_dtoa_r+0x618>
 801ad34:	9b03      	ldr	r3, [sp, #12]
 801ad36:	2b00      	cmp	r3, #0
 801ad38:	f300 80d6 	bgt.w	801aee8 <_dtoa_r+0x618>
 801ad3c:	f040 8273 	bne.w	801b226 <_dtoa_r+0x956>
 801ad40:	2200      	movs	r2, #0
 801ad42:	4b67      	ldr	r3, [pc, #412]	; (801aee0 <_dtoa_r+0x610>)
 801ad44:	4640      	mov	r0, r8
 801ad46:	4649      	mov	r1, r9
 801ad48:	f7e5 fc52 	bl	80005f0 <__aeabi_dmul>
 801ad4c:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ad50:	f7e5 fed4 	bl	8000afc <__aeabi_dcmpge>
 801ad54:	9e03      	ldr	r6, [sp, #12]
 801ad56:	4637      	mov	r7, r6
 801ad58:	2800      	cmp	r0, #0
 801ad5a:	f040 824a 	bne.w	801b1f2 <_dtoa_r+0x922>
 801ad5e:	9b02      	ldr	r3, [sp, #8]
 801ad60:	9a02      	ldr	r2, [sp, #8]
 801ad62:	1c5d      	adds	r5, r3, #1
 801ad64:	2331      	movs	r3, #49	; 0x31
 801ad66:	7013      	strb	r3, [r2, #0]
 801ad68:	f10b 0b01 	add.w	fp, fp, #1
 801ad6c:	e245      	b.n	801b1fa <_dtoa_r+0x92a>
 801ad6e:	07f2      	lsls	r2, r6, #31
 801ad70:	d505      	bpl.n	801ad7e <_dtoa_r+0x4ae>
 801ad72:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ad76:	f7e5 fc3b 	bl	80005f0 <__aeabi_dmul>
 801ad7a:	3501      	adds	r5, #1
 801ad7c:	2301      	movs	r3, #1
 801ad7e:	1076      	asrs	r6, r6, #1
 801ad80:	3708      	adds	r7, #8
 801ad82:	e775      	b.n	801ac70 <_dtoa_r+0x3a0>
 801ad84:	2502      	movs	r5, #2
 801ad86:	e777      	b.n	801ac78 <_dtoa_r+0x3a8>
 801ad88:	465f      	mov	r7, fp
 801ad8a:	9e03      	ldr	r6, [sp, #12]
 801ad8c:	e794      	b.n	801acb8 <_dtoa_r+0x3e8>
 801ad8e:	9a02      	ldr	r2, [sp, #8]
 801ad90:	4b4e      	ldr	r3, [pc, #312]	; (801aecc <_dtoa_r+0x5fc>)
 801ad92:	4432      	add	r2, r6
 801ad94:	9213      	str	r2, [sp, #76]	; 0x4c
 801ad96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ad98:	1e71      	subs	r1, r6, #1
 801ad9a:	2a00      	cmp	r2, #0
 801ad9c:	d048      	beq.n	801ae30 <_dtoa_r+0x560>
 801ad9e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 801ada2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ada6:	2000      	movs	r0, #0
 801ada8:	494e      	ldr	r1, [pc, #312]	; (801aee4 <_dtoa_r+0x614>)
 801adaa:	f7e5 fd4b 	bl	8000844 <__aeabi_ddiv>
 801adae:	4642      	mov	r2, r8
 801adb0:	464b      	mov	r3, r9
 801adb2:	f7e5 fa69 	bl	8000288 <__aeabi_dsub>
 801adb6:	9d02      	ldr	r5, [sp, #8]
 801adb8:	4680      	mov	r8, r0
 801adba:	4689      	mov	r9, r1
 801adbc:	e9dd 0100 	ldrd	r0, r1, [sp]
 801adc0:	f7e5 fec6 	bl	8000b50 <__aeabi_d2iz>
 801adc4:	4606      	mov	r6, r0
 801adc6:	f7e5 fbad 	bl	8000524 <__aeabi_i2d>
 801adca:	4602      	mov	r2, r0
 801adcc:	460b      	mov	r3, r1
 801adce:	e9dd 0100 	ldrd	r0, r1, [sp]
 801add2:	f7e5 fa59 	bl	8000288 <__aeabi_dsub>
 801add6:	3630      	adds	r6, #48	; 0x30
 801add8:	f805 6b01 	strb.w	r6, [r5], #1
 801addc:	4642      	mov	r2, r8
 801adde:	464b      	mov	r3, r9
 801ade0:	e9cd 0100 	strd	r0, r1, [sp]
 801ade4:	f7e5 fe76 	bl	8000ad4 <__aeabi_dcmplt>
 801ade8:	2800      	cmp	r0, #0
 801adea:	d165      	bne.n	801aeb8 <_dtoa_r+0x5e8>
 801adec:	e9dd 2300 	ldrd	r2, r3, [sp]
 801adf0:	2000      	movs	r0, #0
 801adf2:	4938      	ldr	r1, [pc, #224]	; (801aed4 <_dtoa_r+0x604>)
 801adf4:	f7e5 fa48 	bl	8000288 <__aeabi_dsub>
 801adf8:	4642      	mov	r2, r8
 801adfa:	464b      	mov	r3, r9
 801adfc:	f7e5 fe6a 	bl	8000ad4 <__aeabi_dcmplt>
 801ae00:	2800      	cmp	r0, #0
 801ae02:	f040 80ba 	bne.w	801af7a <_dtoa_r+0x6aa>
 801ae06:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ae08:	429d      	cmp	r5, r3
 801ae0a:	f43f af7e 	beq.w	801ad0a <_dtoa_r+0x43a>
 801ae0e:	2200      	movs	r2, #0
 801ae10:	4b31      	ldr	r3, [pc, #196]	; (801aed8 <_dtoa_r+0x608>)
 801ae12:	4640      	mov	r0, r8
 801ae14:	4649      	mov	r1, r9
 801ae16:	f7e5 fbeb 	bl	80005f0 <__aeabi_dmul>
 801ae1a:	2200      	movs	r2, #0
 801ae1c:	4680      	mov	r8, r0
 801ae1e:	4689      	mov	r9, r1
 801ae20:	4b2d      	ldr	r3, [pc, #180]	; (801aed8 <_dtoa_r+0x608>)
 801ae22:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ae26:	f7e5 fbe3 	bl	80005f0 <__aeabi_dmul>
 801ae2a:	e9cd 0100 	strd	r0, r1, [sp]
 801ae2e:	e7c5      	b.n	801adbc <_dtoa_r+0x4ec>
 801ae30:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801ae34:	4642      	mov	r2, r8
 801ae36:	464b      	mov	r3, r9
 801ae38:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ae3c:	f7e5 fbd8 	bl	80005f0 <__aeabi_dmul>
 801ae40:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801ae44:	9d02      	ldr	r5, [sp, #8]
 801ae46:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ae4a:	f7e5 fe81 	bl	8000b50 <__aeabi_d2iz>
 801ae4e:	4606      	mov	r6, r0
 801ae50:	f7e5 fb68 	bl	8000524 <__aeabi_i2d>
 801ae54:	3630      	adds	r6, #48	; 0x30
 801ae56:	4602      	mov	r2, r0
 801ae58:	460b      	mov	r3, r1
 801ae5a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ae5e:	f7e5 fa13 	bl	8000288 <__aeabi_dsub>
 801ae62:	f805 6b01 	strb.w	r6, [r5], #1
 801ae66:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ae68:	42ab      	cmp	r3, r5
 801ae6a:	4680      	mov	r8, r0
 801ae6c:	4689      	mov	r9, r1
 801ae6e:	f04f 0200 	mov.w	r2, #0
 801ae72:	d125      	bne.n	801aec0 <_dtoa_r+0x5f0>
 801ae74:	4b1b      	ldr	r3, [pc, #108]	; (801aee4 <_dtoa_r+0x614>)
 801ae76:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801ae7a:	f7e5 fa07 	bl	800028c <__adddf3>
 801ae7e:	4602      	mov	r2, r0
 801ae80:	460b      	mov	r3, r1
 801ae82:	4640      	mov	r0, r8
 801ae84:	4649      	mov	r1, r9
 801ae86:	f7e5 fe43 	bl	8000b10 <__aeabi_dcmpgt>
 801ae8a:	2800      	cmp	r0, #0
 801ae8c:	d175      	bne.n	801af7a <_dtoa_r+0x6aa>
 801ae8e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801ae92:	2000      	movs	r0, #0
 801ae94:	4913      	ldr	r1, [pc, #76]	; (801aee4 <_dtoa_r+0x614>)
 801ae96:	f7e5 f9f7 	bl	8000288 <__aeabi_dsub>
 801ae9a:	4602      	mov	r2, r0
 801ae9c:	460b      	mov	r3, r1
 801ae9e:	4640      	mov	r0, r8
 801aea0:	4649      	mov	r1, r9
 801aea2:	f7e5 fe17 	bl	8000ad4 <__aeabi_dcmplt>
 801aea6:	2800      	cmp	r0, #0
 801aea8:	f43f af2f 	beq.w	801ad0a <_dtoa_r+0x43a>
 801aeac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801aeb0:	2b30      	cmp	r3, #48	; 0x30
 801aeb2:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 801aeb6:	d001      	beq.n	801aebc <_dtoa_r+0x5ec>
 801aeb8:	46bb      	mov	fp, r7
 801aeba:	e04d      	b.n	801af58 <_dtoa_r+0x688>
 801aebc:	4615      	mov	r5, r2
 801aebe:	e7f5      	b.n	801aeac <_dtoa_r+0x5dc>
 801aec0:	4b05      	ldr	r3, [pc, #20]	; (801aed8 <_dtoa_r+0x608>)
 801aec2:	f7e5 fb95 	bl	80005f0 <__aeabi_dmul>
 801aec6:	e9cd 0100 	strd	r0, r1, [sp]
 801aeca:	e7bc      	b.n	801ae46 <_dtoa_r+0x576>
 801aecc:	080d8b40 	.word	0x080d8b40
 801aed0:	080d8b18 	.word	0x080d8b18
 801aed4:	3ff00000 	.word	0x3ff00000
 801aed8:	40240000 	.word	0x40240000
 801aedc:	401c0000 	.word	0x401c0000
 801aee0:	40140000 	.word	0x40140000
 801aee4:	3fe00000 	.word	0x3fe00000
 801aee8:	e9dd 6700 	ldrd	r6, r7, [sp]
 801aeec:	9d02      	ldr	r5, [sp, #8]
 801aeee:	4642      	mov	r2, r8
 801aef0:	464b      	mov	r3, r9
 801aef2:	4630      	mov	r0, r6
 801aef4:	4639      	mov	r1, r7
 801aef6:	f7e5 fca5 	bl	8000844 <__aeabi_ddiv>
 801aefa:	f7e5 fe29 	bl	8000b50 <__aeabi_d2iz>
 801aefe:	9000      	str	r0, [sp, #0]
 801af00:	f7e5 fb10 	bl	8000524 <__aeabi_i2d>
 801af04:	4642      	mov	r2, r8
 801af06:	464b      	mov	r3, r9
 801af08:	f7e5 fb72 	bl	80005f0 <__aeabi_dmul>
 801af0c:	4602      	mov	r2, r0
 801af0e:	460b      	mov	r3, r1
 801af10:	4630      	mov	r0, r6
 801af12:	4639      	mov	r1, r7
 801af14:	f7e5 f9b8 	bl	8000288 <__aeabi_dsub>
 801af18:	9e00      	ldr	r6, [sp, #0]
 801af1a:	9f03      	ldr	r7, [sp, #12]
 801af1c:	3630      	adds	r6, #48	; 0x30
 801af1e:	f805 6b01 	strb.w	r6, [r5], #1
 801af22:	9e02      	ldr	r6, [sp, #8]
 801af24:	1bae      	subs	r6, r5, r6
 801af26:	42b7      	cmp	r7, r6
 801af28:	4602      	mov	r2, r0
 801af2a:	460b      	mov	r3, r1
 801af2c:	d138      	bne.n	801afa0 <_dtoa_r+0x6d0>
 801af2e:	f7e5 f9ad 	bl	800028c <__adddf3>
 801af32:	4606      	mov	r6, r0
 801af34:	460f      	mov	r7, r1
 801af36:	4602      	mov	r2, r0
 801af38:	460b      	mov	r3, r1
 801af3a:	4640      	mov	r0, r8
 801af3c:	4649      	mov	r1, r9
 801af3e:	f7e5 fdc9 	bl	8000ad4 <__aeabi_dcmplt>
 801af42:	b9c8      	cbnz	r0, 801af78 <_dtoa_r+0x6a8>
 801af44:	4632      	mov	r2, r6
 801af46:	463b      	mov	r3, r7
 801af48:	4640      	mov	r0, r8
 801af4a:	4649      	mov	r1, r9
 801af4c:	f7e5 fdb8 	bl	8000ac0 <__aeabi_dcmpeq>
 801af50:	b110      	cbz	r0, 801af58 <_dtoa_r+0x688>
 801af52:	9b00      	ldr	r3, [sp, #0]
 801af54:	07db      	lsls	r3, r3, #31
 801af56:	d40f      	bmi.n	801af78 <_dtoa_r+0x6a8>
 801af58:	4651      	mov	r1, sl
 801af5a:	4620      	mov	r0, r4
 801af5c:	f000 fe5a 	bl	801bc14 <_Bfree>
 801af60:	2300      	movs	r3, #0
 801af62:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801af64:	702b      	strb	r3, [r5, #0]
 801af66:	f10b 0301 	add.w	r3, fp, #1
 801af6a:	6013      	str	r3, [r2, #0]
 801af6c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801af6e:	2b00      	cmp	r3, #0
 801af70:	f43f acf8 	beq.w	801a964 <_dtoa_r+0x94>
 801af74:	601d      	str	r5, [r3, #0]
 801af76:	e4f5      	b.n	801a964 <_dtoa_r+0x94>
 801af78:	465f      	mov	r7, fp
 801af7a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801af7e:	2a39      	cmp	r2, #57	; 0x39
 801af80:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 801af84:	d106      	bne.n	801af94 <_dtoa_r+0x6c4>
 801af86:	9a02      	ldr	r2, [sp, #8]
 801af88:	429a      	cmp	r2, r3
 801af8a:	d107      	bne.n	801af9c <_dtoa_r+0x6cc>
 801af8c:	2330      	movs	r3, #48	; 0x30
 801af8e:	7013      	strb	r3, [r2, #0]
 801af90:	3701      	adds	r7, #1
 801af92:	4613      	mov	r3, r2
 801af94:	781a      	ldrb	r2, [r3, #0]
 801af96:	3201      	adds	r2, #1
 801af98:	701a      	strb	r2, [r3, #0]
 801af9a:	e78d      	b.n	801aeb8 <_dtoa_r+0x5e8>
 801af9c:	461d      	mov	r5, r3
 801af9e:	e7ec      	b.n	801af7a <_dtoa_r+0x6aa>
 801afa0:	2200      	movs	r2, #0
 801afa2:	4ba4      	ldr	r3, [pc, #656]	; (801b234 <_dtoa_r+0x964>)
 801afa4:	f7e5 fb24 	bl	80005f0 <__aeabi_dmul>
 801afa8:	2200      	movs	r2, #0
 801afaa:	2300      	movs	r3, #0
 801afac:	4606      	mov	r6, r0
 801afae:	460f      	mov	r7, r1
 801afb0:	f7e5 fd86 	bl	8000ac0 <__aeabi_dcmpeq>
 801afb4:	2800      	cmp	r0, #0
 801afb6:	d09a      	beq.n	801aeee <_dtoa_r+0x61e>
 801afb8:	e7ce      	b.n	801af58 <_dtoa_r+0x688>
 801afba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801afbc:	2a00      	cmp	r2, #0
 801afbe:	f000 80cd 	beq.w	801b15c <_dtoa_r+0x88c>
 801afc2:	9a07      	ldr	r2, [sp, #28]
 801afc4:	2a01      	cmp	r2, #1
 801afc6:	f300 80af 	bgt.w	801b128 <_dtoa_r+0x858>
 801afca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801afcc:	2a00      	cmp	r2, #0
 801afce:	f000 80a7 	beq.w	801b120 <_dtoa_r+0x850>
 801afd2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801afd6:	9e08      	ldr	r6, [sp, #32]
 801afd8:	9d05      	ldr	r5, [sp, #20]
 801afda:	9a05      	ldr	r2, [sp, #20]
 801afdc:	441a      	add	r2, r3
 801afde:	9205      	str	r2, [sp, #20]
 801afe0:	9a06      	ldr	r2, [sp, #24]
 801afe2:	2101      	movs	r1, #1
 801afe4:	441a      	add	r2, r3
 801afe6:	4620      	mov	r0, r4
 801afe8:	9206      	str	r2, [sp, #24]
 801afea:	f000 feb3 	bl	801bd54 <__i2b>
 801afee:	4607      	mov	r7, r0
 801aff0:	2d00      	cmp	r5, #0
 801aff2:	dd0c      	ble.n	801b00e <_dtoa_r+0x73e>
 801aff4:	9b06      	ldr	r3, [sp, #24]
 801aff6:	2b00      	cmp	r3, #0
 801aff8:	dd09      	ble.n	801b00e <_dtoa_r+0x73e>
 801affa:	42ab      	cmp	r3, r5
 801affc:	9a05      	ldr	r2, [sp, #20]
 801affe:	bfa8      	it	ge
 801b000:	462b      	movge	r3, r5
 801b002:	1ad2      	subs	r2, r2, r3
 801b004:	9205      	str	r2, [sp, #20]
 801b006:	9a06      	ldr	r2, [sp, #24]
 801b008:	1aed      	subs	r5, r5, r3
 801b00a:	1ad3      	subs	r3, r2, r3
 801b00c:	9306      	str	r3, [sp, #24]
 801b00e:	9b08      	ldr	r3, [sp, #32]
 801b010:	b1f3      	cbz	r3, 801b050 <_dtoa_r+0x780>
 801b012:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b014:	2b00      	cmp	r3, #0
 801b016:	f000 80a5 	beq.w	801b164 <_dtoa_r+0x894>
 801b01a:	2e00      	cmp	r6, #0
 801b01c:	dd10      	ble.n	801b040 <_dtoa_r+0x770>
 801b01e:	4639      	mov	r1, r7
 801b020:	4632      	mov	r2, r6
 801b022:	4620      	mov	r0, r4
 801b024:	f000 ff2c 	bl	801be80 <__pow5mult>
 801b028:	4652      	mov	r2, sl
 801b02a:	4601      	mov	r1, r0
 801b02c:	4607      	mov	r7, r0
 801b02e:	4620      	mov	r0, r4
 801b030:	f000 fe99 	bl	801bd66 <__multiply>
 801b034:	4651      	mov	r1, sl
 801b036:	4680      	mov	r8, r0
 801b038:	4620      	mov	r0, r4
 801b03a:	f000 fdeb 	bl	801bc14 <_Bfree>
 801b03e:	46c2      	mov	sl, r8
 801b040:	9b08      	ldr	r3, [sp, #32]
 801b042:	1b9a      	subs	r2, r3, r6
 801b044:	d004      	beq.n	801b050 <_dtoa_r+0x780>
 801b046:	4651      	mov	r1, sl
 801b048:	4620      	mov	r0, r4
 801b04a:	f000 ff19 	bl	801be80 <__pow5mult>
 801b04e:	4682      	mov	sl, r0
 801b050:	2101      	movs	r1, #1
 801b052:	4620      	mov	r0, r4
 801b054:	f000 fe7e 	bl	801bd54 <__i2b>
 801b058:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b05a:	2b00      	cmp	r3, #0
 801b05c:	4606      	mov	r6, r0
 801b05e:	f340 8083 	ble.w	801b168 <_dtoa_r+0x898>
 801b062:	461a      	mov	r2, r3
 801b064:	4601      	mov	r1, r0
 801b066:	4620      	mov	r0, r4
 801b068:	f000 ff0a 	bl	801be80 <__pow5mult>
 801b06c:	9b07      	ldr	r3, [sp, #28]
 801b06e:	2b01      	cmp	r3, #1
 801b070:	4606      	mov	r6, r0
 801b072:	dd7c      	ble.n	801b16e <_dtoa_r+0x89e>
 801b074:	f04f 0800 	mov.w	r8, #0
 801b078:	6933      	ldr	r3, [r6, #16]
 801b07a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801b07e:	6918      	ldr	r0, [r3, #16]
 801b080:	f000 fe1a 	bl	801bcb8 <__hi0bits>
 801b084:	f1c0 0020 	rsb	r0, r0, #32
 801b088:	9b06      	ldr	r3, [sp, #24]
 801b08a:	4418      	add	r0, r3
 801b08c:	f010 001f 	ands.w	r0, r0, #31
 801b090:	f000 8096 	beq.w	801b1c0 <_dtoa_r+0x8f0>
 801b094:	f1c0 0320 	rsb	r3, r0, #32
 801b098:	2b04      	cmp	r3, #4
 801b09a:	f340 8087 	ble.w	801b1ac <_dtoa_r+0x8dc>
 801b09e:	9b05      	ldr	r3, [sp, #20]
 801b0a0:	f1c0 001c 	rsb	r0, r0, #28
 801b0a4:	4403      	add	r3, r0
 801b0a6:	9305      	str	r3, [sp, #20]
 801b0a8:	9b06      	ldr	r3, [sp, #24]
 801b0aa:	4405      	add	r5, r0
 801b0ac:	4403      	add	r3, r0
 801b0ae:	9306      	str	r3, [sp, #24]
 801b0b0:	9b05      	ldr	r3, [sp, #20]
 801b0b2:	2b00      	cmp	r3, #0
 801b0b4:	dd05      	ble.n	801b0c2 <_dtoa_r+0x7f2>
 801b0b6:	4651      	mov	r1, sl
 801b0b8:	461a      	mov	r2, r3
 801b0ba:	4620      	mov	r0, r4
 801b0bc:	f000 ff2e 	bl	801bf1c <__lshift>
 801b0c0:	4682      	mov	sl, r0
 801b0c2:	9b06      	ldr	r3, [sp, #24]
 801b0c4:	2b00      	cmp	r3, #0
 801b0c6:	dd05      	ble.n	801b0d4 <_dtoa_r+0x804>
 801b0c8:	4631      	mov	r1, r6
 801b0ca:	461a      	mov	r2, r3
 801b0cc:	4620      	mov	r0, r4
 801b0ce:	f000 ff25 	bl	801bf1c <__lshift>
 801b0d2:	4606      	mov	r6, r0
 801b0d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b0d6:	2b00      	cmp	r3, #0
 801b0d8:	d074      	beq.n	801b1c4 <_dtoa_r+0x8f4>
 801b0da:	4631      	mov	r1, r6
 801b0dc:	4650      	mov	r0, sl
 801b0de:	f000 ff6e 	bl	801bfbe <__mcmp>
 801b0e2:	2800      	cmp	r0, #0
 801b0e4:	da6e      	bge.n	801b1c4 <_dtoa_r+0x8f4>
 801b0e6:	2300      	movs	r3, #0
 801b0e8:	4651      	mov	r1, sl
 801b0ea:	220a      	movs	r2, #10
 801b0ec:	4620      	mov	r0, r4
 801b0ee:	f000 fda8 	bl	801bc42 <__multadd>
 801b0f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b0f4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801b0f8:	4682      	mov	sl, r0
 801b0fa:	2b00      	cmp	r3, #0
 801b0fc:	f000 81a8 	beq.w	801b450 <_dtoa_r+0xb80>
 801b100:	2300      	movs	r3, #0
 801b102:	4639      	mov	r1, r7
 801b104:	220a      	movs	r2, #10
 801b106:	4620      	mov	r0, r4
 801b108:	f000 fd9b 	bl	801bc42 <__multadd>
 801b10c:	9b04      	ldr	r3, [sp, #16]
 801b10e:	2b00      	cmp	r3, #0
 801b110:	4607      	mov	r7, r0
 801b112:	f300 80c8 	bgt.w	801b2a6 <_dtoa_r+0x9d6>
 801b116:	9b07      	ldr	r3, [sp, #28]
 801b118:	2b02      	cmp	r3, #2
 801b11a:	f340 80c4 	ble.w	801b2a6 <_dtoa_r+0x9d6>
 801b11e:	e059      	b.n	801b1d4 <_dtoa_r+0x904>
 801b120:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801b122:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801b126:	e756      	b.n	801afd6 <_dtoa_r+0x706>
 801b128:	9b03      	ldr	r3, [sp, #12]
 801b12a:	1e5e      	subs	r6, r3, #1
 801b12c:	9b08      	ldr	r3, [sp, #32]
 801b12e:	42b3      	cmp	r3, r6
 801b130:	bfbf      	itttt	lt
 801b132:	9b08      	ldrlt	r3, [sp, #32]
 801b134:	9608      	strlt	r6, [sp, #32]
 801b136:	1af2      	sublt	r2, r6, r3
 801b138:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 801b13a:	bfb6      	itet	lt
 801b13c:	189b      	addlt	r3, r3, r2
 801b13e:	1b9e      	subge	r6, r3, r6
 801b140:	930b      	strlt	r3, [sp, #44]	; 0x2c
 801b142:	9b03      	ldr	r3, [sp, #12]
 801b144:	bfb8      	it	lt
 801b146:	2600      	movlt	r6, #0
 801b148:	2b00      	cmp	r3, #0
 801b14a:	bfb9      	ittee	lt
 801b14c:	9b05      	ldrlt	r3, [sp, #20]
 801b14e:	9a03      	ldrlt	r2, [sp, #12]
 801b150:	9d05      	ldrge	r5, [sp, #20]
 801b152:	9b03      	ldrge	r3, [sp, #12]
 801b154:	bfbc      	itt	lt
 801b156:	1a9d      	sublt	r5, r3, r2
 801b158:	2300      	movlt	r3, #0
 801b15a:	e73e      	b.n	801afda <_dtoa_r+0x70a>
 801b15c:	9e08      	ldr	r6, [sp, #32]
 801b15e:	9d05      	ldr	r5, [sp, #20]
 801b160:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801b162:	e745      	b.n	801aff0 <_dtoa_r+0x720>
 801b164:	9a08      	ldr	r2, [sp, #32]
 801b166:	e76e      	b.n	801b046 <_dtoa_r+0x776>
 801b168:	9b07      	ldr	r3, [sp, #28]
 801b16a:	2b01      	cmp	r3, #1
 801b16c:	dc19      	bgt.n	801b1a2 <_dtoa_r+0x8d2>
 801b16e:	9b00      	ldr	r3, [sp, #0]
 801b170:	b9bb      	cbnz	r3, 801b1a2 <_dtoa_r+0x8d2>
 801b172:	9b01      	ldr	r3, [sp, #4]
 801b174:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b178:	b99b      	cbnz	r3, 801b1a2 <_dtoa_r+0x8d2>
 801b17a:	9b01      	ldr	r3, [sp, #4]
 801b17c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801b180:	0d1b      	lsrs	r3, r3, #20
 801b182:	051b      	lsls	r3, r3, #20
 801b184:	b183      	cbz	r3, 801b1a8 <_dtoa_r+0x8d8>
 801b186:	9b05      	ldr	r3, [sp, #20]
 801b188:	3301      	adds	r3, #1
 801b18a:	9305      	str	r3, [sp, #20]
 801b18c:	9b06      	ldr	r3, [sp, #24]
 801b18e:	3301      	adds	r3, #1
 801b190:	9306      	str	r3, [sp, #24]
 801b192:	f04f 0801 	mov.w	r8, #1
 801b196:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b198:	2b00      	cmp	r3, #0
 801b19a:	f47f af6d 	bne.w	801b078 <_dtoa_r+0x7a8>
 801b19e:	2001      	movs	r0, #1
 801b1a0:	e772      	b.n	801b088 <_dtoa_r+0x7b8>
 801b1a2:	f04f 0800 	mov.w	r8, #0
 801b1a6:	e7f6      	b.n	801b196 <_dtoa_r+0x8c6>
 801b1a8:	4698      	mov	r8, r3
 801b1aa:	e7f4      	b.n	801b196 <_dtoa_r+0x8c6>
 801b1ac:	d080      	beq.n	801b0b0 <_dtoa_r+0x7e0>
 801b1ae:	9a05      	ldr	r2, [sp, #20]
 801b1b0:	331c      	adds	r3, #28
 801b1b2:	441a      	add	r2, r3
 801b1b4:	9205      	str	r2, [sp, #20]
 801b1b6:	9a06      	ldr	r2, [sp, #24]
 801b1b8:	441a      	add	r2, r3
 801b1ba:	441d      	add	r5, r3
 801b1bc:	4613      	mov	r3, r2
 801b1be:	e776      	b.n	801b0ae <_dtoa_r+0x7de>
 801b1c0:	4603      	mov	r3, r0
 801b1c2:	e7f4      	b.n	801b1ae <_dtoa_r+0x8de>
 801b1c4:	9b03      	ldr	r3, [sp, #12]
 801b1c6:	2b00      	cmp	r3, #0
 801b1c8:	dc36      	bgt.n	801b238 <_dtoa_r+0x968>
 801b1ca:	9b07      	ldr	r3, [sp, #28]
 801b1cc:	2b02      	cmp	r3, #2
 801b1ce:	dd33      	ble.n	801b238 <_dtoa_r+0x968>
 801b1d0:	9b03      	ldr	r3, [sp, #12]
 801b1d2:	9304      	str	r3, [sp, #16]
 801b1d4:	9b04      	ldr	r3, [sp, #16]
 801b1d6:	b963      	cbnz	r3, 801b1f2 <_dtoa_r+0x922>
 801b1d8:	4631      	mov	r1, r6
 801b1da:	2205      	movs	r2, #5
 801b1dc:	4620      	mov	r0, r4
 801b1de:	f000 fd30 	bl	801bc42 <__multadd>
 801b1e2:	4601      	mov	r1, r0
 801b1e4:	4606      	mov	r6, r0
 801b1e6:	4650      	mov	r0, sl
 801b1e8:	f000 fee9 	bl	801bfbe <__mcmp>
 801b1ec:	2800      	cmp	r0, #0
 801b1ee:	f73f adb6 	bgt.w	801ad5e <_dtoa_r+0x48e>
 801b1f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b1f4:	9d02      	ldr	r5, [sp, #8]
 801b1f6:	ea6f 0b03 	mvn.w	fp, r3
 801b1fa:	2300      	movs	r3, #0
 801b1fc:	9303      	str	r3, [sp, #12]
 801b1fe:	4631      	mov	r1, r6
 801b200:	4620      	mov	r0, r4
 801b202:	f000 fd07 	bl	801bc14 <_Bfree>
 801b206:	2f00      	cmp	r7, #0
 801b208:	f43f aea6 	beq.w	801af58 <_dtoa_r+0x688>
 801b20c:	9b03      	ldr	r3, [sp, #12]
 801b20e:	b12b      	cbz	r3, 801b21c <_dtoa_r+0x94c>
 801b210:	42bb      	cmp	r3, r7
 801b212:	d003      	beq.n	801b21c <_dtoa_r+0x94c>
 801b214:	4619      	mov	r1, r3
 801b216:	4620      	mov	r0, r4
 801b218:	f000 fcfc 	bl	801bc14 <_Bfree>
 801b21c:	4639      	mov	r1, r7
 801b21e:	4620      	mov	r0, r4
 801b220:	f000 fcf8 	bl	801bc14 <_Bfree>
 801b224:	e698      	b.n	801af58 <_dtoa_r+0x688>
 801b226:	2600      	movs	r6, #0
 801b228:	4637      	mov	r7, r6
 801b22a:	e7e2      	b.n	801b1f2 <_dtoa_r+0x922>
 801b22c:	46bb      	mov	fp, r7
 801b22e:	4637      	mov	r7, r6
 801b230:	e595      	b.n	801ad5e <_dtoa_r+0x48e>
 801b232:	bf00      	nop
 801b234:	40240000 	.word	0x40240000
 801b238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b23a:	bb93      	cbnz	r3, 801b2a2 <_dtoa_r+0x9d2>
 801b23c:	9b03      	ldr	r3, [sp, #12]
 801b23e:	9304      	str	r3, [sp, #16]
 801b240:	9d02      	ldr	r5, [sp, #8]
 801b242:	4631      	mov	r1, r6
 801b244:	4650      	mov	r0, sl
 801b246:	f7ff fab5 	bl	801a7b4 <quorem>
 801b24a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801b24e:	f805 9b01 	strb.w	r9, [r5], #1
 801b252:	9b02      	ldr	r3, [sp, #8]
 801b254:	9a04      	ldr	r2, [sp, #16]
 801b256:	1aeb      	subs	r3, r5, r3
 801b258:	429a      	cmp	r2, r3
 801b25a:	f300 80dc 	bgt.w	801b416 <_dtoa_r+0xb46>
 801b25e:	9b02      	ldr	r3, [sp, #8]
 801b260:	2a01      	cmp	r2, #1
 801b262:	bfac      	ite	ge
 801b264:	189b      	addge	r3, r3, r2
 801b266:	3301      	addlt	r3, #1
 801b268:	4698      	mov	r8, r3
 801b26a:	2300      	movs	r3, #0
 801b26c:	9303      	str	r3, [sp, #12]
 801b26e:	4651      	mov	r1, sl
 801b270:	2201      	movs	r2, #1
 801b272:	4620      	mov	r0, r4
 801b274:	f000 fe52 	bl	801bf1c <__lshift>
 801b278:	4631      	mov	r1, r6
 801b27a:	4682      	mov	sl, r0
 801b27c:	f000 fe9f 	bl	801bfbe <__mcmp>
 801b280:	2800      	cmp	r0, #0
 801b282:	f300 808d 	bgt.w	801b3a0 <_dtoa_r+0xad0>
 801b286:	d103      	bne.n	801b290 <_dtoa_r+0x9c0>
 801b288:	f019 0f01 	tst.w	r9, #1
 801b28c:	f040 8088 	bne.w	801b3a0 <_dtoa_r+0xad0>
 801b290:	4645      	mov	r5, r8
 801b292:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801b296:	2b30      	cmp	r3, #48	; 0x30
 801b298:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 801b29c:	d1af      	bne.n	801b1fe <_dtoa_r+0x92e>
 801b29e:	4615      	mov	r5, r2
 801b2a0:	e7f7      	b.n	801b292 <_dtoa_r+0x9c2>
 801b2a2:	9b03      	ldr	r3, [sp, #12]
 801b2a4:	9304      	str	r3, [sp, #16]
 801b2a6:	2d00      	cmp	r5, #0
 801b2a8:	dd05      	ble.n	801b2b6 <_dtoa_r+0x9e6>
 801b2aa:	4639      	mov	r1, r7
 801b2ac:	462a      	mov	r2, r5
 801b2ae:	4620      	mov	r0, r4
 801b2b0:	f000 fe34 	bl	801bf1c <__lshift>
 801b2b4:	4607      	mov	r7, r0
 801b2b6:	f1b8 0f00 	cmp.w	r8, #0
 801b2ba:	d04c      	beq.n	801b356 <_dtoa_r+0xa86>
 801b2bc:	6879      	ldr	r1, [r7, #4]
 801b2be:	4620      	mov	r0, r4
 801b2c0:	f000 fc74 	bl	801bbac <_Balloc>
 801b2c4:	693a      	ldr	r2, [r7, #16]
 801b2c6:	3202      	adds	r2, #2
 801b2c8:	4605      	mov	r5, r0
 801b2ca:	0092      	lsls	r2, r2, #2
 801b2cc:	f107 010c 	add.w	r1, r7, #12
 801b2d0:	300c      	adds	r0, #12
 801b2d2:	f7fe f91f 	bl	8019514 <memcpy>
 801b2d6:	2201      	movs	r2, #1
 801b2d8:	4629      	mov	r1, r5
 801b2da:	4620      	mov	r0, r4
 801b2dc:	f000 fe1e 	bl	801bf1c <__lshift>
 801b2e0:	9b00      	ldr	r3, [sp, #0]
 801b2e2:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801b2e6:	9703      	str	r7, [sp, #12]
 801b2e8:	f003 0301 	and.w	r3, r3, #1
 801b2ec:	4607      	mov	r7, r0
 801b2ee:	9305      	str	r3, [sp, #20]
 801b2f0:	4631      	mov	r1, r6
 801b2f2:	4650      	mov	r0, sl
 801b2f4:	f7ff fa5e 	bl	801a7b4 <quorem>
 801b2f8:	9903      	ldr	r1, [sp, #12]
 801b2fa:	4605      	mov	r5, r0
 801b2fc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801b300:	4650      	mov	r0, sl
 801b302:	f000 fe5c 	bl	801bfbe <__mcmp>
 801b306:	463a      	mov	r2, r7
 801b308:	9000      	str	r0, [sp, #0]
 801b30a:	4631      	mov	r1, r6
 801b30c:	4620      	mov	r0, r4
 801b30e:	f000 fe70 	bl	801bff2 <__mdiff>
 801b312:	68c3      	ldr	r3, [r0, #12]
 801b314:	4602      	mov	r2, r0
 801b316:	bb03      	cbnz	r3, 801b35a <_dtoa_r+0xa8a>
 801b318:	4601      	mov	r1, r0
 801b31a:	9006      	str	r0, [sp, #24]
 801b31c:	4650      	mov	r0, sl
 801b31e:	f000 fe4e 	bl	801bfbe <__mcmp>
 801b322:	9a06      	ldr	r2, [sp, #24]
 801b324:	4603      	mov	r3, r0
 801b326:	4611      	mov	r1, r2
 801b328:	4620      	mov	r0, r4
 801b32a:	9306      	str	r3, [sp, #24]
 801b32c:	f000 fc72 	bl	801bc14 <_Bfree>
 801b330:	9b06      	ldr	r3, [sp, #24]
 801b332:	b9a3      	cbnz	r3, 801b35e <_dtoa_r+0xa8e>
 801b334:	9a07      	ldr	r2, [sp, #28]
 801b336:	b992      	cbnz	r2, 801b35e <_dtoa_r+0xa8e>
 801b338:	9a05      	ldr	r2, [sp, #20]
 801b33a:	b982      	cbnz	r2, 801b35e <_dtoa_r+0xa8e>
 801b33c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801b340:	d029      	beq.n	801b396 <_dtoa_r+0xac6>
 801b342:	9b00      	ldr	r3, [sp, #0]
 801b344:	2b00      	cmp	r3, #0
 801b346:	dd01      	ble.n	801b34c <_dtoa_r+0xa7c>
 801b348:	f105 0931 	add.w	r9, r5, #49	; 0x31
 801b34c:	f108 0501 	add.w	r5, r8, #1
 801b350:	f888 9000 	strb.w	r9, [r8]
 801b354:	e753      	b.n	801b1fe <_dtoa_r+0x92e>
 801b356:	4638      	mov	r0, r7
 801b358:	e7c2      	b.n	801b2e0 <_dtoa_r+0xa10>
 801b35a:	2301      	movs	r3, #1
 801b35c:	e7e3      	b.n	801b326 <_dtoa_r+0xa56>
 801b35e:	9a00      	ldr	r2, [sp, #0]
 801b360:	2a00      	cmp	r2, #0
 801b362:	db04      	blt.n	801b36e <_dtoa_r+0xa9e>
 801b364:	d125      	bne.n	801b3b2 <_dtoa_r+0xae2>
 801b366:	9a07      	ldr	r2, [sp, #28]
 801b368:	bb1a      	cbnz	r2, 801b3b2 <_dtoa_r+0xae2>
 801b36a:	9a05      	ldr	r2, [sp, #20]
 801b36c:	bb0a      	cbnz	r2, 801b3b2 <_dtoa_r+0xae2>
 801b36e:	2b00      	cmp	r3, #0
 801b370:	ddec      	ble.n	801b34c <_dtoa_r+0xa7c>
 801b372:	4651      	mov	r1, sl
 801b374:	2201      	movs	r2, #1
 801b376:	4620      	mov	r0, r4
 801b378:	f000 fdd0 	bl	801bf1c <__lshift>
 801b37c:	4631      	mov	r1, r6
 801b37e:	4682      	mov	sl, r0
 801b380:	f000 fe1d 	bl	801bfbe <__mcmp>
 801b384:	2800      	cmp	r0, #0
 801b386:	dc03      	bgt.n	801b390 <_dtoa_r+0xac0>
 801b388:	d1e0      	bne.n	801b34c <_dtoa_r+0xa7c>
 801b38a:	f019 0f01 	tst.w	r9, #1
 801b38e:	d0dd      	beq.n	801b34c <_dtoa_r+0xa7c>
 801b390:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801b394:	d1d8      	bne.n	801b348 <_dtoa_r+0xa78>
 801b396:	2339      	movs	r3, #57	; 0x39
 801b398:	f888 3000 	strb.w	r3, [r8]
 801b39c:	f108 0801 	add.w	r8, r8, #1
 801b3a0:	4645      	mov	r5, r8
 801b3a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801b3a6:	2b39      	cmp	r3, #57	; 0x39
 801b3a8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 801b3ac:	d03b      	beq.n	801b426 <_dtoa_r+0xb56>
 801b3ae:	3301      	adds	r3, #1
 801b3b0:	e040      	b.n	801b434 <_dtoa_r+0xb64>
 801b3b2:	2b00      	cmp	r3, #0
 801b3b4:	f108 0501 	add.w	r5, r8, #1
 801b3b8:	dd05      	ble.n	801b3c6 <_dtoa_r+0xaf6>
 801b3ba:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801b3be:	d0ea      	beq.n	801b396 <_dtoa_r+0xac6>
 801b3c0:	f109 0901 	add.w	r9, r9, #1
 801b3c4:	e7c4      	b.n	801b350 <_dtoa_r+0xa80>
 801b3c6:	9b02      	ldr	r3, [sp, #8]
 801b3c8:	9a04      	ldr	r2, [sp, #16]
 801b3ca:	f805 9c01 	strb.w	r9, [r5, #-1]
 801b3ce:	1aeb      	subs	r3, r5, r3
 801b3d0:	4293      	cmp	r3, r2
 801b3d2:	46a8      	mov	r8, r5
 801b3d4:	f43f af4b 	beq.w	801b26e <_dtoa_r+0x99e>
 801b3d8:	4651      	mov	r1, sl
 801b3da:	2300      	movs	r3, #0
 801b3dc:	220a      	movs	r2, #10
 801b3de:	4620      	mov	r0, r4
 801b3e0:	f000 fc2f 	bl	801bc42 <__multadd>
 801b3e4:	9b03      	ldr	r3, [sp, #12]
 801b3e6:	9903      	ldr	r1, [sp, #12]
 801b3e8:	42bb      	cmp	r3, r7
 801b3ea:	4682      	mov	sl, r0
 801b3ec:	f04f 0300 	mov.w	r3, #0
 801b3f0:	f04f 020a 	mov.w	r2, #10
 801b3f4:	4620      	mov	r0, r4
 801b3f6:	d104      	bne.n	801b402 <_dtoa_r+0xb32>
 801b3f8:	f000 fc23 	bl	801bc42 <__multadd>
 801b3fc:	9003      	str	r0, [sp, #12]
 801b3fe:	4607      	mov	r7, r0
 801b400:	e776      	b.n	801b2f0 <_dtoa_r+0xa20>
 801b402:	f000 fc1e 	bl	801bc42 <__multadd>
 801b406:	2300      	movs	r3, #0
 801b408:	9003      	str	r0, [sp, #12]
 801b40a:	220a      	movs	r2, #10
 801b40c:	4639      	mov	r1, r7
 801b40e:	4620      	mov	r0, r4
 801b410:	f000 fc17 	bl	801bc42 <__multadd>
 801b414:	e7f3      	b.n	801b3fe <_dtoa_r+0xb2e>
 801b416:	4651      	mov	r1, sl
 801b418:	2300      	movs	r3, #0
 801b41a:	220a      	movs	r2, #10
 801b41c:	4620      	mov	r0, r4
 801b41e:	f000 fc10 	bl	801bc42 <__multadd>
 801b422:	4682      	mov	sl, r0
 801b424:	e70d      	b.n	801b242 <_dtoa_r+0x972>
 801b426:	9b02      	ldr	r3, [sp, #8]
 801b428:	4293      	cmp	r3, r2
 801b42a:	d105      	bne.n	801b438 <_dtoa_r+0xb68>
 801b42c:	9a02      	ldr	r2, [sp, #8]
 801b42e:	f10b 0b01 	add.w	fp, fp, #1
 801b432:	2331      	movs	r3, #49	; 0x31
 801b434:	7013      	strb	r3, [r2, #0]
 801b436:	e6e2      	b.n	801b1fe <_dtoa_r+0x92e>
 801b438:	4615      	mov	r5, r2
 801b43a:	e7b2      	b.n	801b3a2 <_dtoa_r+0xad2>
 801b43c:	4b09      	ldr	r3, [pc, #36]	; (801b464 <_dtoa_r+0xb94>)
 801b43e:	f7ff baae 	b.w	801a99e <_dtoa_r+0xce>
 801b442:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b444:	2b00      	cmp	r3, #0
 801b446:	f47f aa88 	bne.w	801a95a <_dtoa_r+0x8a>
 801b44a:	4b07      	ldr	r3, [pc, #28]	; (801b468 <_dtoa_r+0xb98>)
 801b44c:	f7ff baa7 	b.w	801a99e <_dtoa_r+0xce>
 801b450:	9b04      	ldr	r3, [sp, #16]
 801b452:	2b00      	cmp	r3, #0
 801b454:	f73f aef4 	bgt.w	801b240 <_dtoa_r+0x970>
 801b458:	9b07      	ldr	r3, [sp, #28]
 801b45a:	2b02      	cmp	r3, #2
 801b45c:	f77f aef0 	ble.w	801b240 <_dtoa_r+0x970>
 801b460:	e6b8      	b.n	801b1d4 <_dtoa_r+0x904>
 801b462:	bf00      	nop
 801b464:	0802bba6 	.word	0x0802bba6
 801b468:	080d8a9e 	.word	0x080d8a9e

0801b46c <_cleanup_r>:
 801b46c:	4901      	ldr	r1, [pc, #4]	; (801b474 <_cleanup_r+0x8>)
 801b46e:	f000 bb35 	b.w	801badc <_fwalk_reent>
 801b472:	bf00      	nop
 801b474:	0801c701 	.word	0x0801c701

0801b478 <std.isra.0>:
 801b478:	2300      	movs	r3, #0
 801b47a:	b510      	push	{r4, lr}
 801b47c:	4604      	mov	r4, r0
 801b47e:	6003      	str	r3, [r0, #0]
 801b480:	6043      	str	r3, [r0, #4]
 801b482:	6083      	str	r3, [r0, #8]
 801b484:	8181      	strh	r1, [r0, #12]
 801b486:	6643      	str	r3, [r0, #100]	; 0x64
 801b488:	81c2      	strh	r2, [r0, #14]
 801b48a:	6103      	str	r3, [r0, #16]
 801b48c:	6143      	str	r3, [r0, #20]
 801b48e:	6183      	str	r3, [r0, #24]
 801b490:	4619      	mov	r1, r3
 801b492:	2208      	movs	r2, #8
 801b494:	305c      	adds	r0, #92	; 0x5c
 801b496:	f7fe f848 	bl	801952a <memset>
 801b49a:	4b05      	ldr	r3, [pc, #20]	; (801b4b0 <std.isra.0+0x38>)
 801b49c:	6263      	str	r3, [r4, #36]	; 0x24
 801b49e:	4b05      	ldr	r3, [pc, #20]	; (801b4b4 <std.isra.0+0x3c>)
 801b4a0:	62a3      	str	r3, [r4, #40]	; 0x28
 801b4a2:	4b05      	ldr	r3, [pc, #20]	; (801b4b8 <std.isra.0+0x40>)
 801b4a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 801b4a6:	4b05      	ldr	r3, [pc, #20]	; (801b4bc <std.isra.0+0x44>)
 801b4a8:	6224      	str	r4, [r4, #32]
 801b4aa:	6323      	str	r3, [r4, #48]	; 0x30
 801b4ac:	bd10      	pop	{r4, pc}
 801b4ae:	bf00      	nop
 801b4b0:	0801c44d 	.word	0x0801c44d
 801b4b4:	0801c46f 	.word	0x0801c46f
 801b4b8:	0801c4a7 	.word	0x0801c4a7
 801b4bc:	0801c4cb 	.word	0x0801c4cb

0801b4c0 <__sfmoreglue>:
 801b4c0:	b570      	push	{r4, r5, r6, lr}
 801b4c2:	1e4a      	subs	r2, r1, #1
 801b4c4:	2568      	movs	r5, #104	; 0x68
 801b4c6:	4355      	muls	r5, r2
 801b4c8:	460e      	mov	r6, r1
 801b4ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801b4ce:	f7fd fe13 	bl	80190f8 <_malloc_r>
 801b4d2:	4604      	mov	r4, r0
 801b4d4:	b140      	cbz	r0, 801b4e8 <__sfmoreglue+0x28>
 801b4d6:	2100      	movs	r1, #0
 801b4d8:	e880 0042 	stmia.w	r0, {r1, r6}
 801b4dc:	300c      	adds	r0, #12
 801b4de:	60a0      	str	r0, [r4, #8]
 801b4e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801b4e4:	f7fe f821 	bl	801952a <memset>
 801b4e8:	4620      	mov	r0, r4
 801b4ea:	bd70      	pop	{r4, r5, r6, pc}

0801b4ec <__sfp_lock_acquire>:
 801b4ec:	4801      	ldr	r0, [pc, #4]	; (801b4f4 <__sfp_lock_acquire+0x8>)
 801b4ee:	f000 bb27 	b.w	801bb40 <__retarget_lock_acquire_recursive>
 801b4f2:	bf00      	nop
 801b4f4:	2000c5c4 	.word	0x2000c5c4

0801b4f8 <__sfp_lock_release>:
 801b4f8:	4801      	ldr	r0, [pc, #4]	; (801b500 <__sfp_lock_release+0x8>)
 801b4fa:	f000 bb22 	b.w	801bb42 <__retarget_lock_release_recursive>
 801b4fe:	bf00      	nop
 801b500:	2000c5c4 	.word	0x2000c5c4

0801b504 <__sinit_lock_acquire>:
 801b504:	4801      	ldr	r0, [pc, #4]	; (801b50c <__sinit_lock_acquire+0x8>)
 801b506:	f000 bb1b 	b.w	801bb40 <__retarget_lock_acquire_recursive>
 801b50a:	bf00      	nop
 801b50c:	2000c5bf 	.word	0x2000c5bf

0801b510 <__sinit_lock_release>:
 801b510:	4801      	ldr	r0, [pc, #4]	; (801b518 <__sinit_lock_release+0x8>)
 801b512:	f000 bb16 	b.w	801bb42 <__retarget_lock_release_recursive>
 801b516:	bf00      	nop
 801b518:	2000c5bf 	.word	0x2000c5bf

0801b51c <__sinit>:
 801b51c:	b510      	push	{r4, lr}
 801b51e:	4604      	mov	r4, r0
 801b520:	f7ff fff0 	bl	801b504 <__sinit_lock_acquire>
 801b524:	69a3      	ldr	r3, [r4, #24]
 801b526:	b11b      	cbz	r3, 801b530 <__sinit+0x14>
 801b528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b52c:	f7ff bff0 	b.w	801b510 <__sinit_lock_release>
 801b530:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 801b534:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
 801b538:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 801b53c:	4b12      	ldr	r3, [pc, #72]	; (801b588 <__sinit+0x6c>)
 801b53e:	4a13      	ldr	r2, [pc, #76]	; (801b58c <__sinit+0x70>)
 801b540:	681b      	ldr	r3, [r3, #0]
 801b542:	62a2      	str	r2, [r4, #40]	; 0x28
 801b544:	429c      	cmp	r4, r3
 801b546:	bf04      	itt	eq
 801b548:	2301      	moveq	r3, #1
 801b54a:	61a3      	streq	r3, [r4, #24]
 801b54c:	4620      	mov	r0, r4
 801b54e:	f000 f81f 	bl	801b590 <__sfp>
 801b552:	6060      	str	r0, [r4, #4]
 801b554:	4620      	mov	r0, r4
 801b556:	f000 f81b 	bl	801b590 <__sfp>
 801b55a:	60a0      	str	r0, [r4, #8]
 801b55c:	4620      	mov	r0, r4
 801b55e:	f000 f817 	bl	801b590 <__sfp>
 801b562:	2200      	movs	r2, #0
 801b564:	60e0      	str	r0, [r4, #12]
 801b566:	2104      	movs	r1, #4
 801b568:	6860      	ldr	r0, [r4, #4]
 801b56a:	f7ff ff85 	bl	801b478 <std.isra.0>
 801b56e:	2201      	movs	r2, #1
 801b570:	2109      	movs	r1, #9
 801b572:	68a0      	ldr	r0, [r4, #8]
 801b574:	f7ff ff80 	bl	801b478 <std.isra.0>
 801b578:	2202      	movs	r2, #2
 801b57a:	2112      	movs	r1, #18
 801b57c:	68e0      	ldr	r0, [r4, #12]
 801b57e:	f7ff ff7b 	bl	801b478 <std.isra.0>
 801b582:	2301      	movs	r3, #1
 801b584:	61a3      	str	r3, [r4, #24]
 801b586:	e7cf      	b.n	801b528 <__sinit+0xc>
 801b588:	080d8a48 	.word	0x080d8a48
 801b58c:	0801b46d 	.word	0x0801b46d

0801b590 <__sfp>:
 801b590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b592:	4607      	mov	r7, r0
 801b594:	f7ff ffaa 	bl	801b4ec <__sfp_lock_acquire>
 801b598:	4b1f      	ldr	r3, [pc, #124]	; (801b618 <__sfp+0x88>)
 801b59a:	681e      	ldr	r6, [r3, #0]
 801b59c:	69b3      	ldr	r3, [r6, #24]
 801b59e:	b913      	cbnz	r3, 801b5a6 <__sfp+0x16>
 801b5a0:	4630      	mov	r0, r6
 801b5a2:	f7ff ffbb 	bl	801b51c <__sinit>
 801b5a6:	36d8      	adds	r6, #216	; 0xd8
 801b5a8:	68b4      	ldr	r4, [r6, #8]
 801b5aa:	6873      	ldr	r3, [r6, #4]
 801b5ac:	3b01      	subs	r3, #1
 801b5ae:	d503      	bpl.n	801b5b8 <__sfp+0x28>
 801b5b0:	6833      	ldr	r3, [r6, #0]
 801b5b2:	b133      	cbz	r3, 801b5c2 <__sfp+0x32>
 801b5b4:	6836      	ldr	r6, [r6, #0]
 801b5b6:	e7f7      	b.n	801b5a8 <__sfp+0x18>
 801b5b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801b5bc:	b17d      	cbz	r5, 801b5de <__sfp+0x4e>
 801b5be:	3468      	adds	r4, #104	; 0x68
 801b5c0:	e7f4      	b.n	801b5ac <__sfp+0x1c>
 801b5c2:	2104      	movs	r1, #4
 801b5c4:	4638      	mov	r0, r7
 801b5c6:	f7ff ff7b 	bl	801b4c0 <__sfmoreglue>
 801b5ca:	4604      	mov	r4, r0
 801b5cc:	6030      	str	r0, [r6, #0]
 801b5ce:	2800      	cmp	r0, #0
 801b5d0:	d1f0      	bne.n	801b5b4 <__sfp+0x24>
 801b5d2:	f7ff ff91 	bl	801b4f8 <__sfp_lock_release>
 801b5d6:	230c      	movs	r3, #12
 801b5d8:	603b      	str	r3, [r7, #0]
 801b5da:	4620      	mov	r0, r4
 801b5dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b5de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b5e2:	81e3      	strh	r3, [r4, #14]
 801b5e4:	2301      	movs	r3, #1
 801b5e6:	81a3      	strh	r3, [r4, #12]
 801b5e8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801b5ec:	6665      	str	r5, [r4, #100]	; 0x64
 801b5ee:	f000 faa5 	bl	801bb3c <__retarget_lock_init_recursive>
 801b5f2:	f7ff ff81 	bl	801b4f8 <__sfp_lock_release>
 801b5f6:	6025      	str	r5, [r4, #0]
 801b5f8:	60a5      	str	r5, [r4, #8]
 801b5fa:	6065      	str	r5, [r4, #4]
 801b5fc:	6125      	str	r5, [r4, #16]
 801b5fe:	6165      	str	r5, [r4, #20]
 801b600:	61a5      	str	r5, [r4, #24]
 801b602:	2208      	movs	r2, #8
 801b604:	4629      	mov	r1, r5
 801b606:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801b60a:	f7fd ff8e 	bl	801952a <memset>
 801b60e:	6365      	str	r5, [r4, #52]	; 0x34
 801b610:	63a5      	str	r5, [r4, #56]	; 0x38
 801b612:	64a5      	str	r5, [r4, #72]	; 0x48
 801b614:	64e5      	str	r5, [r4, #76]	; 0x4c
 801b616:	e7e0      	b.n	801b5da <__sfp+0x4a>
 801b618:	080d8a48 	.word	0x080d8a48

0801b61c <_malloc_trim_r>:
 801b61c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b620:	4f25      	ldr	r7, [pc, #148]	; (801b6b8 <_malloc_trim_r+0x9c>)
 801b622:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 801b6c4 <_malloc_trim_r+0xa8>
 801b626:	4689      	mov	r9, r1
 801b628:	4606      	mov	r6, r0
 801b62a:	f7fd ff87 	bl	801953c <__malloc_lock>
 801b62e:	68bb      	ldr	r3, [r7, #8]
 801b630:	685d      	ldr	r5, [r3, #4]
 801b632:	f1a8 0411 	sub.w	r4, r8, #17
 801b636:	f025 0503 	bic.w	r5, r5, #3
 801b63a:	eba4 0409 	sub.w	r4, r4, r9
 801b63e:	442c      	add	r4, r5
 801b640:	fbb4 f4f8 	udiv	r4, r4, r8
 801b644:	3c01      	subs	r4, #1
 801b646:	fb08 f404 	mul.w	r4, r8, r4
 801b64a:	4544      	cmp	r4, r8
 801b64c:	da05      	bge.n	801b65a <_malloc_trim_r+0x3e>
 801b64e:	4630      	mov	r0, r6
 801b650:	f7fd ff7a 	bl	8019548 <__malloc_unlock>
 801b654:	2000      	movs	r0, #0
 801b656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b65a:	2100      	movs	r1, #0
 801b65c:	4630      	mov	r0, r6
 801b65e:	f7fd ffe1 	bl	8019624 <_sbrk_r>
 801b662:	68bb      	ldr	r3, [r7, #8]
 801b664:	442b      	add	r3, r5
 801b666:	4298      	cmp	r0, r3
 801b668:	d1f1      	bne.n	801b64e <_malloc_trim_r+0x32>
 801b66a:	4261      	negs	r1, r4
 801b66c:	4630      	mov	r0, r6
 801b66e:	f7fd ffd9 	bl	8019624 <_sbrk_r>
 801b672:	3001      	adds	r0, #1
 801b674:	d110      	bne.n	801b698 <_malloc_trim_r+0x7c>
 801b676:	2100      	movs	r1, #0
 801b678:	4630      	mov	r0, r6
 801b67a:	f7fd ffd3 	bl	8019624 <_sbrk_r>
 801b67e:	68ba      	ldr	r2, [r7, #8]
 801b680:	1a83      	subs	r3, r0, r2
 801b682:	2b0f      	cmp	r3, #15
 801b684:	dde3      	ble.n	801b64e <_malloc_trim_r+0x32>
 801b686:	490d      	ldr	r1, [pc, #52]	; (801b6bc <_malloc_trim_r+0xa0>)
 801b688:	6809      	ldr	r1, [r1, #0]
 801b68a:	1a40      	subs	r0, r0, r1
 801b68c:	490c      	ldr	r1, [pc, #48]	; (801b6c0 <_malloc_trim_r+0xa4>)
 801b68e:	f043 0301 	orr.w	r3, r3, #1
 801b692:	6008      	str	r0, [r1, #0]
 801b694:	6053      	str	r3, [r2, #4]
 801b696:	e7da      	b.n	801b64e <_malloc_trim_r+0x32>
 801b698:	68bb      	ldr	r3, [r7, #8]
 801b69a:	4a09      	ldr	r2, [pc, #36]	; (801b6c0 <_malloc_trim_r+0xa4>)
 801b69c:	1b2d      	subs	r5, r5, r4
 801b69e:	f045 0501 	orr.w	r5, r5, #1
 801b6a2:	605d      	str	r5, [r3, #4]
 801b6a4:	6813      	ldr	r3, [r2, #0]
 801b6a6:	4630      	mov	r0, r6
 801b6a8:	1b1c      	subs	r4, r3, r4
 801b6aa:	6014      	str	r4, [r2, #0]
 801b6ac:	f7fd ff4c 	bl	8019548 <__malloc_unlock>
 801b6b0:	2001      	movs	r0, #1
 801b6b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b6b6:	bf00      	nop
 801b6b8:	20001da8 	.word	0x20001da8
 801b6bc:	200021b0 	.word	0x200021b0
 801b6c0:	2000afec 	.word	0x2000afec
 801b6c4:	00001000 	.word	0x00001000

0801b6c8 <_free_r>:
 801b6c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b6cc:	4604      	mov	r4, r0
 801b6ce:	4688      	mov	r8, r1
 801b6d0:	2900      	cmp	r1, #0
 801b6d2:	f000 80ab 	beq.w	801b82c <_free_r+0x164>
 801b6d6:	f7fd ff31 	bl	801953c <__malloc_lock>
 801b6da:	f858 2c04 	ldr.w	r2, [r8, #-4]
 801b6de:	4d54      	ldr	r5, [pc, #336]	; (801b830 <_free_r+0x168>)
 801b6e0:	f022 0001 	bic.w	r0, r2, #1
 801b6e4:	f1a8 0308 	sub.w	r3, r8, #8
 801b6e8:	181f      	adds	r7, r3, r0
 801b6ea:	68a9      	ldr	r1, [r5, #8]
 801b6ec:	687e      	ldr	r6, [r7, #4]
 801b6ee:	428f      	cmp	r7, r1
 801b6f0:	f026 0603 	bic.w	r6, r6, #3
 801b6f4:	f002 0201 	and.w	r2, r2, #1
 801b6f8:	d11b      	bne.n	801b732 <_free_r+0x6a>
 801b6fa:	4430      	add	r0, r6
 801b6fc:	b93a      	cbnz	r2, 801b70e <_free_r+0x46>
 801b6fe:	f858 2c08 	ldr.w	r2, [r8, #-8]
 801b702:	1a9b      	subs	r3, r3, r2
 801b704:	4410      	add	r0, r2
 801b706:	6899      	ldr	r1, [r3, #8]
 801b708:	68da      	ldr	r2, [r3, #12]
 801b70a:	60ca      	str	r2, [r1, #12]
 801b70c:	6091      	str	r1, [r2, #8]
 801b70e:	f040 0201 	orr.w	r2, r0, #1
 801b712:	605a      	str	r2, [r3, #4]
 801b714:	60ab      	str	r3, [r5, #8]
 801b716:	4b47      	ldr	r3, [pc, #284]	; (801b834 <_free_r+0x16c>)
 801b718:	681b      	ldr	r3, [r3, #0]
 801b71a:	4298      	cmp	r0, r3
 801b71c:	d304      	bcc.n	801b728 <_free_r+0x60>
 801b71e:	4b46      	ldr	r3, [pc, #280]	; (801b838 <_free_r+0x170>)
 801b720:	4620      	mov	r0, r4
 801b722:	6819      	ldr	r1, [r3, #0]
 801b724:	f7ff ff7a 	bl	801b61c <_malloc_trim_r>
 801b728:	4620      	mov	r0, r4
 801b72a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b72e:	f7fd bf0b 	b.w	8019548 <__malloc_unlock>
 801b732:	607e      	str	r6, [r7, #4]
 801b734:	2a00      	cmp	r2, #0
 801b736:	d139      	bne.n	801b7ac <_free_r+0xe4>
 801b738:	f858 1c08 	ldr.w	r1, [r8, #-8]
 801b73c:	1a5b      	subs	r3, r3, r1
 801b73e:	4408      	add	r0, r1
 801b740:	6899      	ldr	r1, [r3, #8]
 801b742:	f105 0e08 	add.w	lr, r5, #8
 801b746:	4571      	cmp	r1, lr
 801b748:	d032      	beq.n	801b7b0 <_free_r+0xe8>
 801b74a:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 801b74e:	f8c1 e00c 	str.w	lr, [r1, #12]
 801b752:	f8ce 1008 	str.w	r1, [lr, #8]
 801b756:	19b9      	adds	r1, r7, r6
 801b758:	6849      	ldr	r1, [r1, #4]
 801b75a:	07c9      	lsls	r1, r1, #31
 801b75c:	d40a      	bmi.n	801b774 <_free_r+0xac>
 801b75e:	4430      	add	r0, r6
 801b760:	68b9      	ldr	r1, [r7, #8]
 801b762:	bb3a      	cbnz	r2, 801b7b4 <_free_r+0xec>
 801b764:	4e35      	ldr	r6, [pc, #212]	; (801b83c <_free_r+0x174>)
 801b766:	42b1      	cmp	r1, r6
 801b768:	d124      	bne.n	801b7b4 <_free_r+0xec>
 801b76a:	616b      	str	r3, [r5, #20]
 801b76c:	612b      	str	r3, [r5, #16]
 801b76e:	2201      	movs	r2, #1
 801b770:	60d9      	str	r1, [r3, #12]
 801b772:	6099      	str	r1, [r3, #8]
 801b774:	f040 0101 	orr.w	r1, r0, #1
 801b778:	6059      	str	r1, [r3, #4]
 801b77a:	5018      	str	r0, [r3, r0]
 801b77c:	2a00      	cmp	r2, #0
 801b77e:	d1d3      	bne.n	801b728 <_free_r+0x60>
 801b780:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 801b784:	d21a      	bcs.n	801b7bc <_free_r+0xf4>
 801b786:	08c0      	lsrs	r0, r0, #3
 801b788:	1081      	asrs	r1, r0, #2
 801b78a:	2201      	movs	r2, #1
 801b78c:	408a      	lsls	r2, r1
 801b78e:	6869      	ldr	r1, [r5, #4]
 801b790:	3001      	adds	r0, #1
 801b792:	430a      	orrs	r2, r1
 801b794:	606a      	str	r2, [r5, #4]
 801b796:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 801b79a:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 801b79e:	6099      	str	r1, [r3, #8]
 801b7a0:	3a08      	subs	r2, #8
 801b7a2:	60da      	str	r2, [r3, #12]
 801b7a4:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 801b7a8:	60cb      	str	r3, [r1, #12]
 801b7aa:	e7bd      	b.n	801b728 <_free_r+0x60>
 801b7ac:	2200      	movs	r2, #0
 801b7ae:	e7d2      	b.n	801b756 <_free_r+0x8e>
 801b7b0:	2201      	movs	r2, #1
 801b7b2:	e7d0      	b.n	801b756 <_free_r+0x8e>
 801b7b4:	68fe      	ldr	r6, [r7, #12]
 801b7b6:	60ce      	str	r6, [r1, #12]
 801b7b8:	60b1      	str	r1, [r6, #8]
 801b7ba:	e7db      	b.n	801b774 <_free_r+0xac>
 801b7bc:	0a42      	lsrs	r2, r0, #9
 801b7be:	2a04      	cmp	r2, #4
 801b7c0:	d813      	bhi.n	801b7ea <_free_r+0x122>
 801b7c2:	0982      	lsrs	r2, r0, #6
 801b7c4:	3238      	adds	r2, #56	; 0x38
 801b7c6:	1c51      	adds	r1, r2, #1
 801b7c8:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 801b7cc:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 801b7d0:	428e      	cmp	r6, r1
 801b7d2:	d124      	bne.n	801b81e <_free_r+0x156>
 801b7d4:	2001      	movs	r0, #1
 801b7d6:	1092      	asrs	r2, r2, #2
 801b7d8:	fa00 f202 	lsl.w	r2, r0, r2
 801b7dc:	6868      	ldr	r0, [r5, #4]
 801b7de:	4302      	orrs	r2, r0
 801b7e0:	606a      	str	r2, [r5, #4]
 801b7e2:	60de      	str	r6, [r3, #12]
 801b7e4:	6099      	str	r1, [r3, #8]
 801b7e6:	60b3      	str	r3, [r6, #8]
 801b7e8:	e7de      	b.n	801b7a8 <_free_r+0xe0>
 801b7ea:	2a14      	cmp	r2, #20
 801b7ec:	d801      	bhi.n	801b7f2 <_free_r+0x12a>
 801b7ee:	325b      	adds	r2, #91	; 0x5b
 801b7f0:	e7e9      	b.n	801b7c6 <_free_r+0xfe>
 801b7f2:	2a54      	cmp	r2, #84	; 0x54
 801b7f4:	d802      	bhi.n	801b7fc <_free_r+0x134>
 801b7f6:	0b02      	lsrs	r2, r0, #12
 801b7f8:	326e      	adds	r2, #110	; 0x6e
 801b7fa:	e7e4      	b.n	801b7c6 <_free_r+0xfe>
 801b7fc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 801b800:	d802      	bhi.n	801b808 <_free_r+0x140>
 801b802:	0bc2      	lsrs	r2, r0, #15
 801b804:	3277      	adds	r2, #119	; 0x77
 801b806:	e7de      	b.n	801b7c6 <_free_r+0xfe>
 801b808:	f240 5154 	movw	r1, #1364	; 0x554
 801b80c:	428a      	cmp	r2, r1
 801b80e:	bf9a      	itte	ls
 801b810:	0c82      	lsrls	r2, r0, #18
 801b812:	327c      	addls	r2, #124	; 0x7c
 801b814:	227e      	movhi	r2, #126	; 0x7e
 801b816:	e7d6      	b.n	801b7c6 <_free_r+0xfe>
 801b818:	6889      	ldr	r1, [r1, #8]
 801b81a:	428e      	cmp	r6, r1
 801b81c:	d004      	beq.n	801b828 <_free_r+0x160>
 801b81e:	684a      	ldr	r2, [r1, #4]
 801b820:	f022 0203 	bic.w	r2, r2, #3
 801b824:	4290      	cmp	r0, r2
 801b826:	d3f7      	bcc.n	801b818 <_free_r+0x150>
 801b828:	68ce      	ldr	r6, [r1, #12]
 801b82a:	e7da      	b.n	801b7e2 <_free_r+0x11a>
 801b82c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b830:	20001da8 	.word	0x20001da8
 801b834:	200021b4 	.word	0x200021b4
 801b838:	2000b01c 	.word	0x2000b01c
 801b83c:	20001db0 	.word	0x20001db0

0801b840 <__sfvwrite_r>:
 801b840:	6893      	ldr	r3, [r2, #8]
 801b842:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b846:	4607      	mov	r7, r0
 801b848:	460c      	mov	r4, r1
 801b84a:	4690      	mov	r8, r2
 801b84c:	b91b      	cbnz	r3, 801b856 <__sfvwrite_r+0x16>
 801b84e:	2000      	movs	r0, #0
 801b850:	b003      	add	sp, #12
 801b852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b856:	898b      	ldrh	r3, [r1, #12]
 801b858:	0718      	lsls	r0, r3, #28
 801b85a:	d526      	bpl.n	801b8aa <__sfvwrite_r+0x6a>
 801b85c:	690b      	ldr	r3, [r1, #16]
 801b85e:	b323      	cbz	r3, 801b8aa <__sfvwrite_r+0x6a>
 801b860:	89a3      	ldrh	r3, [r4, #12]
 801b862:	f8d8 6000 	ldr.w	r6, [r8]
 801b866:	f013 0902 	ands.w	r9, r3, #2
 801b86a:	d02d      	beq.n	801b8c8 <__sfvwrite_r+0x88>
 801b86c:	f04f 0a00 	mov.w	sl, #0
 801b870:	f8df b264 	ldr.w	fp, [pc, #612]	; 801bad8 <__sfvwrite_r+0x298>
 801b874:	46d1      	mov	r9, sl
 801b876:	f1b9 0f00 	cmp.w	r9, #0
 801b87a:	d01f      	beq.n	801b8bc <__sfvwrite_r+0x7c>
 801b87c:	45d9      	cmp	r9, fp
 801b87e:	464b      	mov	r3, r9
 801b880:	4652      	mov	r2, sl
 801b882:	bf28      	it	cs
 801b884:	465b      	movcs	r3, fp
 801b886:	6a21      	ldr	r1, [r4, #32]
 801b888:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 801b88a:	4638      	mov	r0, r7
 801b88c:	47a8      	blx	r5
 801b88e:	2800      	cmp	r0, #0
 801b890:	f340 8089 	ble.w	801b9a6 <__sfvwrite_r+0x166>
 801b894:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801b898:	4482      	add	sl, r0
 801b89a:	eba9 0900 	sub.w	r9, r9, r0
 801b89e:	1a18      	subs	r0, r3, r0
 801b8a0:	f8c8 0008 	str.w	r0, [r8, #8]
 801b8a4:	2800      	cmp	r0, #0
 801b8a6:	d1e6      	bne.n	801b876 <__sfvwrite_r+0x36>
 801b8a8:	e7d1      	b.n	801b84e <__sfvwrite_r+0xe>
 801b8aa:	4621      	mov	r1, r4
 801b8ac:	4638      	mov	r0, r7
 801b8ae:	f000 fea9 	bl	801c604 <__swsetup_r>
 801b8b2:	2800      	cmp	r0, #0
 801b8b4:	d0d4      	beq.n	801b860 <__sfvwrite_r+0x20>
 801b8b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b8ba:	e7c9      	b.n	801b850 <__sfvwrite_r+0x10>
 801b8bc:	f8d6 a000 	ldr.w	sl, [r6]
 801b8c0:	f8d6 9004 	ldr.w	r9, [r6, #4]
 801b8c4:	3608      	adds	r6, #8
 801b8c6:	e7d6      	b.n	801b876 <__sfvwrite_r+0x36>
 801b8c8:	f013 0301 	ands.w	r3, r3, #1
 801b8cc:	d043      	beq.n	801b956 <__sfvwrite_r+0x116>
 801b8ce:	4648      	mov	r0, r9
 801b8d0:	46ca      	mov	sl, r9
 801b8d2:	46cb      	mov	fp, r9
 801b8d4:	f1bb 0f00 	cmp.w	fp, #0
 801b8d8:	f000 80d9 	beq.w	801ba8e <__sfvwrite_r+0x24e>
 801b8dc:	b950      	cbnz	r0, 801b8f4 <__sfvwrite_r+0xb4>
 801b8de:	465a      	mov	r2, fp
 801b8e0:	210a      	movs	r1, #10
 801b8e2:	4650      	mov	r0, sl
 801b8e4:	f7e4 fc7c 	bl	80001e0 <memchr>
 801b8e8:	2800      	cmp	r0, #0
 801b8ea:	f000 80d5 	beq.w	801ba98 <__sfvwrite_r+0x258>
 801b8ee:	3001      	adds	r0, #1
 801b8f0:	eba0 090a 	sub.w	r9, r0, sl
 801b8f4:	6820      	ldr	r0, [r4, #0]
 801b8f6:	6921      	ldr	r1, [r4, #16]
 801b8f8:	6962      	ldr	r2, [r4, #20]
 801b8fa:	45d9      	cmp	r9, fp
 801b8fc:	464b      	mov	r3, r9
 801b8fe:	bf28      	it	cs
 801b900:	465b      	movcs	r3, fp
 801b902:	4288      	cmp	r0, r1
 801b904:	f240 80cb 	bls.w	801ba9e <__sfvwrite_r+0x25e>
 801b908:	68a5      	ldr	r5, [r4, #8]
 801b90a:	4415      	add	r5, r2
 801b90c:	42ab      	cmp	r3, r5
 801b90e:	f340 80c6 	ble.w	801ba9e <__sfvwrite_r+0x25e>
 801b912:	4651      	mov	r1, sl
 801b914:	462a      	mov	r2, r5
 801b916:	f000 f92f 	bl	801bb78 <memmove>
 801b91a:	6823      	ldr	r3, [r4, #0]
 801b91c:	442b      	add	r3, r5
 801b91e:	6023      	str	r3, [r4, #0]
 801b920:	4621      	mov	r1, r4
 801b922:	4638      	mov	r0, r7
 801b924:	f000 ffea 	bl	801c8fc <_fflush_r>
 801b928:	2800      	cmp	r0, #0
 801b92a:	d13c      	bne.n	801b9a6 <__sfvwrite_r+0x166>
 801b92c:	ebb9 0905 	subs.w	r9, r9, r5
 801b930:	f040 80cf 	bne.w	801bad2 <__sfvwrite_r+0x292>
 801b934:	4621      	mov	r1, r4
 801b936:	4638      	mov	r0, r7
 801b938:	f000 ffe0 	bl	801c8fc <_fflush_r>
 801b93c:	2800      	cmp	r0, #0
 801b93e:	d132      	bne.n	801b9a6 <__sfvwrite_r+0x166>
 801b940:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801b944:	44aa      	add	sl, r5
 801b946:	ebab 0b05 	sub.w	fp, fp, r5
 801b94a:	1b5d      	subs	r5, r3, r5
 801b94c:	f8c8 5008 	str.w	r5, [r8, #8]
 801b950:	2d00      	cmp	r5, #0
 801b952:	d1bf      	bne.n	801b8d4 <__sfvwrite_r+0x94>
 801b954:	e77b      	b.n	801b84e <__sfvwrite_r+0xe>
 801b956:	4699      	mov	r9, r3
 801b958:	469a      	mov	sl, r3
 801b95a:	f1ba 0f00 	cmp.w	sl, #0
 801b95e:	d027      	beq.n	801b9b0 <__sfvwrite_r+0x170>
 801b960:	89a2      	ldrh	r2, [r4, #12]
 801b962:	68a5      	ldr	r5, [r4, #8]
 801b964:	0591      	lsls	r1, r2, #22
 801b966:	d565      	bpl.n	801ba34 <__sfvwrite_r+0x1f4>
 801b968:	45aa      	cmp	sl, r5
 801b96a:	d33b      	bcc.n	801b9e4 <__sfvwrite_r+0x1a4>
 801b96c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801b970:	d036      	beq.n	801b9e0 <__sfvwrite_r+0x1a0>
 801b972:	6921      	ldr	r1, [r4, #16]
 801b974:	6823      	ldr	r3, [r4, #0]
 801b976:	1a5b      	subs	r3, r3, r1
 801b978:	9301      	str	r3, [sp, #4]
 801b97a:	6963      	ldr	r3, [r4, #20]
 801b97c:	2002      	movs	r0, #2
 801b97e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b982:	fb93 fbf0 	sdiv	fp, r3, r0
 801b986:	9b01      	ldr	r3, [sp, #4]
 801b988:	1c58      	adds	r0, r3, #1
 801b98a:	4450      	add	r0, sl
 801b98c:	4583      	cmp	fp, r0
 801b98e:	bf38      	it	cc
 801b990:	4683      	movcc	fp, r0
 801b992:	0553      	lsls	r3, r2, #21
 801b994:	d53e      	bpl.n	801ba14 <__sfvwrite_r+0x1d4>
 801b996:	4659      	mov	r1, fp
 801b998:	4638      	mov	r0, r7
 801b99a:	f7fd fbad 	bl	80190f8 <_malloc_r>
 801b99e:	4605      	mov	r5, r0
 801b9a0:	b950      	cbnz	r0, 801b9b8 <__sfvwrite_r+0x178>
 801b9a2:	230c      	movs	r3, #12
 801b9a4:	603b      	str	r3, [r7, #0]
 801b9a6:	89a3      	ldrh	r3, [r4, #12]
 801b9a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b9ac:	81a3      	strh	r3, [r4, #12]
 801b9ae:	e782      	b.n	801b8b6 <__sfvwrite_r+0x76>
 801b9b0:	e896 0600 	ldmia.w	r6, {r9, sl}
 801b9b4:	3608      	adds	r6, #8
 801b9b6:	e7d0      	b.n	801b95a <__sfvwrite_r+0x11a>
 801b9b8:	9a01      	ldr	r2, [sp, #4]
 801b9ba:	6921      	ldr	r1, [r4, #16]
 801b9bc:	f7fd fdaa 	bl	8019514 <memcpy>
 801b9c0:	89a2      	ldrh	r2, [r4, #12]
 801b9c2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 801b9c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801b9ca:	81a2      	strh	r2, [r4, #12]
 801b9cc:	9b01      	ldr	r3, [sp, #4]
 801b9ce:	6125      	str	r5, [r4, #16]
 801b9d0:	441d      	add	r5, r3
 801b9d2:	ebab 0303 	sub.w	r3, fp, r3
 801b9d6:	6025      	str	r5, [r4, #0]
 801b9d8:	f8c4 b014 	str.w	fp, [r4, #20]
 801b9dc:	4655      	mov	r5, sl
 801b9de:	60a3      	str	r3, [r4, #8]
 801b9e0:	45aa      	cmp	sl, r5
 801b9e2:	d200      	bcs.n	801b9e6 <__sfvwrite_r+0x1a6>
 801b9e4:	4655      	mov	r5, sl
 801b9e6:	462a      	mov	r2, r5
 801b9e8:	4649      	mov	r1, r9
 801b9ea:	6820      	ldr	r0, [r4, #0]
 801b9ec:	f000 f8c4 	bl	801bb78 <memmove>
 801b9f0:	68a3      	ldr	r3, [r4, #8]
 801b9f2:	1b5b      	subs	r3, r3, r5
 801b9f4:	60a3      	str	r3, [r4, #8]
 801b9f6:	6823      	ldr	r3, [r4, #0]
 801b9f8:	441d      	add	r5, r3
 801b9fa:	6025      	str	r5, [r4, #0]
 801b9fc:	4655      	mov	r5, sl
 801b9fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801ba02:	44a9      	add	r9, r5
 801ba04:	ebaa 0a05 	sub.w	sl, sl, r5
 801ba08:	1b5d      	subs	r5, r3, r5
 801ba0a:	f8c8 5008 	str.w	r5, [r8, #8]
 801ba0e:	2d00      	cmp	r5, #0
 801ba10:	d1a3      	bne.n	801b95a <__sfvwrite_r+0x11a>
 801ba12:	e71c      	b.n	801b84e <__sfvwrite_r+0xe>
 801ba14:	465a      	mov	r2, fp
 801ba16:	4638      	mov	r0, r7
 801ba18:	f000 fb98 	bl	801c14c <_realloc_r>
 801ba1c:	4605      	mov	r5, r0
 801ba1e:	2800      	cmp	r0, #0
 801ba20:	d1d4      	bne.n	801b9cc <__sfvwrite_r+0x18c>
 801ba22:	6921      	ldr	r1, [r4, #16]
 801ba24:	4638      	mov	r0, r7
 801ba26:	f7ff fe4f 	bl	801b6c8 <_free_r>
 801ba2a:	89a3      	ldrh	r3, [r4, #12]
 801ba2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801ba30:	81a3      	strh	r3, [r4, #12]
 801ba32:	e7b6      	b.n	801b9a2 <__sfvwrite_r+0x162>
 801ba34:	6820      	ldr	r0, [r4, #0]
 801ba36:	6923      	ldr	r3, [r4, #16]
 801ba38:	4298      	cmp	r0, r3
 801ba3a:	d802      	bhi.n	801ba42 <__sfvwrite_r+0x202>
 801ba3c:	6962      	ldr	r2, [r4, #20]
 801ba3e:	4592      	cmp	sl, r2
 801ba40:	d215      	bcs.n	801ba6e <__sfvwrite_r+0x22e>
 801ba42:	4555      	cmp	r5, sl
 801ba44:	bf28      	it	cs
 801ba46:	4655      	movcs	r5, sl
 801ba48:	462a      	mov	r2, r5
 801ba4a:	4649      	mov	r1, r9
 801ba4c:	f000 f894 	bl	801bb78 <memmove>
 801ba50:	68a3      	ldr	r3, [r4, #8]
 801ba52:	6822      	ldr	r2, [r4, #0]
 801ba54:	1b5b      	subs	r3, r3, r5
 801ba56:	442a      	add	r2, r5
 801ba58:	60a3      	str	r3, [r4, #8]
 801ba5a:	6022      	str	r2, [r4, #0]
 801ba5c:	2b00      	cmp	r3, #0
 801ba5e:	d1ce      	bne.n	801b9fe <__sfvwrite_r+0x1be>
 801ba60:	4621      	mov	r1, r4
 801ba62:	4638      	mov	r0, r7
 801ba64:	f000 ff4a 	bl	801c8fc <_fflush_r>
 801ba68:	2800      	cmp	r0, #0
 801ba6a:	d0c8      	beq.n	801b9fe <__sfvwrite_r+0x1be>
 801ba6c:	e79b      	b.n	801b9a6 <__sfvwrite_r+0x166>
 801ba6e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801ba72:	4553      	cmp	r3, sl
 801ba74:	bf28      	it	cs
 801ba76:	4653      	movcs	r3, sl
 801ba78:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 801ba7a:	fb93 f3f2 	sdiv	r3, r3, r2
 801ba7e:	6a21      	ldr	r1, [r4, #32]
 801ba80:	4353      	muls	r3, r2
 801ba82:	4638      	mov	r0, r7
 801ba84:	464a      	mov	r2, r9
 801ba86:	47a8      	blx	r5
 801ba88:	1e05      	subs	r5, r0, #0
 801ba8a:	dcb8      	bgt.n	801b9fe <__sfvwrite_r+0x1be>
 801ba8c:	e78b      	b.n	801b9a6 <__sfvwrite_r+0x166>
 801ba8e:	e896 0c00 	ldmia.w	r6, {sl, fp}
 801ba92:	2000      	movs	r0, #0
 801ba94:	3608      	adds	r6, #8
 801ba96:	e71d      	b.n	801b8d4 <__sfvwrite_r+0x94>
 801ba98:	f10b 0901 	add.w	r9, fp, #1
 801ba9c:	e72a      	b.n	801b8f4 <__sfvwrite_r+0xb4>
 801ba9e:	4293      	cmp	r3, r2
 801baa0:	db09      	blt.n	801bab6 <__sfvwrite_r+0x276>
 801baa2:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 801baa4:	6a21      	ldr	r1, [r4, #32]
 801baa6:	4613      	mov	r3, r2
 801baa8:	4638      	mov	r0, r7
 801baaa:	4652      	mov	r2, sl
 801baac:	47a8      	blx	r5
 801baae:	1e05      	subs	r5, r0, #0
 801bab0:	f73f af3c 	bgt.w	801b92c <__sfvwrite_r+0xec>
 801bab4:	e777      	b.n	801b9a6 <__sfvwrite_r+0x166>
 801bab6:	461a      	mov	r2, r3
 801bab8:	4651      	mov	r1, sl
 801baba:	9301      	str	r3, [sp, #4]
 801babc:	f000 f85c 	bl	801bb78 <memmove>
 801bac0:	9b01      	ldr	r3, [sp, #4]
 801bac2:	68a2      	ldr	r2, [r4, #8]
 801bac4:	1ad2      	subs	r2, r2, r3
 801bac6:	60a2      	str	r2, [r4, #8]
 801bac8:	6822      	ldr	r2, [r4, #0]
 801baca:	441a      	add	r2, r3
 801bacc:	6022      	str	r2, [r4, #0]
 801bace:	461d      	mov	r5, r3
 801bad0:	e72c      	b.n	801b92c <__sfvwrite_r+0xec>
 801bad2:	2001      	movs	r0, #1
 801bad4:	e734      	b.n	801b940 <__sfvwrite_r+0x100>
 801bad6:	bf00      	nop
 801bad8:	7ffffc00 	.word	0x7ffffc00

0801badc <_fwalk_reent>:
 801badc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bae0:	4680      	mov	r8, r0
 801bae2:	4689      	mov	r9, r1
 801bae4:	f100 04d8 	add.w	r4, r0, #216	; 0xd8
 801bae8:	2600      	movs	r6, #0
 801baea:	b914      	cbnz	r4, 801baf2 <_fwalk_reent+0x16>
 801baec:	4630      	mov	r0, r6
 801baee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801baf2:	68a5      	ldr	r5, [r4, #8]
 801baf4:	6867      	ldr	r7, [r4, #4]
 801baf6:	3f01      	subs	r7, #1
 801baf8:	d501      	bpl.n	801bafe <_fwalk_reent+0x22>
 801bafa:	6824      	ldr	r4, [r4, #0]
 801bafc:	e7f5      	b.n	801baea <_fwalk_reent+0xe>
 801bafe:	89ab      	ldrh	r3, [r5, #12]
 801bb00:	2b01      	cmp	r3, #1
 801bb02:	d907      	bls.n	801bb14 <_fwalk_reent+0x38>
 801bb04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801bb08:	3301      	adds	r3, #1
 801bb0a:	d003      	beq.n	801bb14 <_fwalk_reent+0x38>
 801bb0c:	4629      	mov	r1, r5
 801bb0e:	4640      	mov	r0, r8
 801bb10:	47c8      	blx	r9
 801bb12:	4306      	orrs	r6, r0
 801bb14:	3568      	adds	r5, #104	; 0x68
 801bb16:	e7ee      	b.n	801baf6 <_fwalk_reent+0x1a>

0801bb18 <__locale_ctype_ptr_l>:
 801bb18:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 801bb1c:	4770      	bx	lr
	...

0801bb20 <_localeconv_r>:
 801bb20:	4b04      	ldr	r3, [pc, #16]	; (801bb34 <_localeconv_r+0x14>)
 801bb22:	681b      	ldr	r3, [r3, #0]
 801bb24:	6a18      	ldr	r0, [r3, #32]
 801bb26:	4b04      	ldr	r3, [pc, #16]	; (801bb38 <_localeconv_r+0x18>)
 801bb28:	2800      	cmp	r0, #0
 801bb2a:	bf08      	it	eq
 801bb2c:	4618      	moveq	r0, r3
 801bb2e:	30f0      	adds	r0, #240	; 0xf0
 801bb30:	4770      	bx	lr
 801bb32:	bf00      	nop
 801bb34:	20001cb4 	.word	0x20001cb4
 801bb38:	200021b8 	.word	0x200021b8

0801bb3c <__retarget_lock_init_recursive>:
 801bb3c:	4770      	bx	lr

0801bb3e <__retarget_lock_close_recursive>:
 801bb3e:	4770      	bx	lr

0801bb40 <__retarget_lock_acquire_recursive>:
 801bb40:	4770      	bx	lr

0801bb42 <__retarget_lock_release_recursive>:
 801bb42:	4770      	bx	lr

0801bb44 <malloc>:
 801bb44:	4b02      	ldr	r3, [pc, #8]	; (801bb50 <malloc+0xc>)
 801bb46:	4601      	mov	r1, r0
 801bb48:	6818      	ldr	r0, [r3, #0]
 801bb4a:	f7fd bad5 	b.w	80190f8 <_malloc_r>
 801bb4e:	bf00      	nop
 801bb50:	20001cb4 	.word	0x20001cb4

0801bb54 <__ascii_mbtowc>:
 801bb54:	b082      	sub	sp, #8
 801bb56:	b901      	cbnz	r1, 801bb5a <__ascii_mbtowc+0x6>
 801bb58:	a901      	add	r1, sp, #4
 801bb5a:	b142      	cbz	r2, 801bb6e <__ascii_mbtowc+0x1a>
 801bb5c:	b14b      	cbz	r3, 801bb72 <__ascii_mbtowc+0x1e>
 801bb5e:	7813      	ldrb	r3, [r2, #0]
 801bb60:	600b      	str	r3, [r1, #0]
 801bb62:	7812      	ldrb	r2, [r2, #0]
 801bb64:	1c10      	adds	r0, r2, #0
 801bb66:	bf18      	it	ne
 801bb68:	2001      	movne	r0, #1
 801bb6a:	b002      	add	sp, #8
 801bb6c:	4770      	bx	lr
 801bb6e:	4610      	mov	r0, r2
 801bb70:	e7fb      	b.n	801bb6a <__ascii_mbtowc+0x16>
 801bb72:	f06f 0001 	mvn.w	r0, #1
 801bb76:	e7f8      	b.n	801bb6a <__ascii_mbtowc+0x16>

0801bb78 <memmove>:
 801bb78:	4288      	cmp	r0, r1
 801bb7a:	b510      	push	{r4, lr}
 801bb7c:	eb01 0302 	add.w	r3, r1, r2
 801bb80:	d803      	bhi.n	801bb8a <memmove+0x12>
 801bb82:	1e42      	subs	r2, r0, #1
 801bb84:	4299      	cmp	r1, r3
 801bb86:	d10c      	bne.n	801bba2 <memmove+0x2a>
 801bb88:	bd10      	pop	{r4, pc}
 801bb8a:	4298      	cmp	r0, r3
 801bb8c:	d2f9      	bcs.n	801bb82 <memmove+0xa>
 801bb8e:	1881      	adds	r1, r0, r2
 801bb90:	1ad2      	subs	r2, r2, r3
 801bb92:	42d3      	cmn	r3, r2
 801bb94:	d100      	bne.n	801bb98 <memmove+0x20>
 801bb96:	bd10      	pop	{r4, pc}
 801bb98:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801bb9c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801bba0:	e7f7      	b.n	801bb92 <memmove+0x1a>
 801bba2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801bba6:	f802 4f01 	strb.w	r4, [r2, #1]!
 801bbaa:	e7eb      	b.n	801bb84 <memmove+0xc>

0801bbac <_Balloc>:
 801bbac:	b570      	push	{r4, r5, r6, lr}
 801bbae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801bbb0:	4604      	mov	r4, r0
 801bbb2:	460e      	mov	r6, r1
 801bbb4:	b93d      	cbnz	r5, 801bbc6 <_Balloc+0x1a>
 801bbb6:	2010      	movs	r0, #16
 801bbb8:	f7ff ffc4 	bl	801bb44 <malloc>
 801bbbc:	6260      	str	r0, [r4, #36]	; 0x24
 801bbbe:	6045      	str	r5, [r0, #4]
 801bbc0:	6085      	str	r5, [r0, #8]
 801bbc2:	6005      	str	r5, [r0, #0]
 801bbc4:	60c5      	str	r5, [r0, #12]
 801bbc6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801bbc8:	68eb      	ldr	r3, [r5, #12]
 801bbca:	b183      	cbz	r3, 801bbee <_Balloc+0x42>
 801bbcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801bbce:	68db      	ldr	r3, [r3, #12]
 801bbd0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801bbd4:	b9b8      	cbnz	r0, 801bc06 <_Balloc+0x5a>
 801bbd6:	2101      	movs	r1, #1
 801bbd8:	fa01 f506 	lsl.w	r5, r1, r6
 801bbdc:	1d6a      	adds	r2, r5, #5
 801bbde:	0092      	lsls	r2, r2, #2
 801bbe0:	4620      	mov	r0, r4
 801bbe2:	f7fd fa32 	bl	801904a <_calloc_r>
 801bbe6:	b160      	cbz	r0, 801bc02 <_Balloc+0x56>
 801bbe8:	6046      	str	r6, [r0, #4]
 801bbea:	6085      	str	r5, [r0, #8]
 801bbec:	e00e      	b.n	801bc0c <_Balloc+0x60>
 801bbee:	2221      	movs	r2, #33	; 0x21
 801bbf0:	2104      	movs	r1, #4
 801bbf2:	4620      	mov	r0, r4
 801bbf4:	f7fd fa29 	bl	801904a <_calloc_r>
 801bbf8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801bbfa:	60e8      	str	r0, [r5, #12]
 801bbfc:	68db      	ldr	r3, [r3, #12]
 801bbfe:	2b00      	cmp	r3, #0
 801bc00:	d1e4      	bne.n	801bbcc <_Balloc+0x20>
 801bc02:	2000      	movs	r0, #0
 801bc04:	bd70      	pop	{r4, r5, r6, pc}
 801bc06:	6802      	ldr	r2, [r0, #0]
 801bc08:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801bc0c:	2300      	movs	r3, #0
 801bc0e:	6103      	str	r3, [r0, #16]
 801bc10:	60c3      	str	r3, [r0, #12]
 801bc12:	bd70      	pop	{r4, r5, r6, pc}

0801bc14 <_Bfree>:
 801bc14:	b570      	push	{r4, r5, r6, lr}
 801bc16:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801bc18:	4606      	mov	r6, r0
 801bc1a:	460d      	mov	r5, r1
 801bc1c:	b93c      	cbnz	r4, 801bc2e <_Bfree+0x1a>
 801bc1e:	2010      	movs	r0, #16
 801bc20:	f7ff ff90 	bl	801bb44 <malloc>
 801bc24:	6270      	str	r0, [r6, #36]	; 0x24
 801bc26:	6044      	str	r4, [r0, #4]
 801bc28:	6084      	str	r4, [r0, #8]
 801bc2a:	6004      	str	r4, [r0, #0]
 801bc2c:	60c4      	str	r4, [r0, #12]
 801bc2e:	b13d      	cbz	r5, 801bc40 <_Bfree+0x2c>
 801bc30:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801bc32:	686a      	ldr	r2, [r5, #4]
 801bc34:	68db      	ldr	r3, [r3, #12]
 801bc36:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801bc3a:	6029      	str	r1, [r5, #0]
 801bc3c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801bc40:	bd70      	pop	{r4, r5, r6, pc}

0801bc42 <__multadd>:
 801bc42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bc46:	690d      	ldr	r5, [r1, #16]
 801bc48:	461f      	mov	r7, r3
 801bc4a:	4606      	mov	r6, r0
 801bc4c:	460c      	mov	r4, r1
 801bc4e:	f101 0e14 	add.w	lr, r1, #20
 801bc52:	2300      	movs	r3, #0
 801bc54:	f8de 0000 	ldr.w	r0, [lr]
 801bc58:	b281      	uxth	r1, r0
 801bc5a:	fb02 7101 	mla	r1, r2, r1, r7
 801bc5e:	0c0f      	lsrs	r7, r1, #16
 801bc60:	0c00      	lsrs	r0, r0, #16
 801bc62:	fb02 7000 	mla	r0, r2, r0, r7
 801bc66:	b289      	uxth	r1, r1
 801bc68:	3301      	adds	r3, #1
 801bc6a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801bc6e:	429d      	cmp	r5, r3
 801bc70:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801bc74:	f84e 1b04 	str.w	r1, [lr], #4
 801bc78:	dcec      	bgt.n	801bc54 <__multadd+0x12>
 801bc7a:	b1d7      	cbz	r7, 801bcb2 <__multadd+0x70>
 801bc7c:	68a3      	ldr	r3, [r4, #8]
 801bc7e:	429d      	cmp	r5, r3
 801bc80:	db12      	blt.n	801bca8 <__multadd+0x66>
 801bc82:	6861      	ldr	r1, [r4, #4]
 801bc84:	4630      	mov	r0, r6
 801bc86:	3101      	adds	r1, #1
 801bc88:	f7ff ff90 	bl	801bbac <_Balloc>
 801bc8c:	6922      	ldr	r2, [r4, #16]
 801bc8e:	3202      	adds	r2, #2
 801bc90:	f104 010c 	add.w	r1, r4, #12
 801bc94:	4680      	mov	r8, r0
 801bc96:	0092      	lsls	r2, r2, #2
 801bc98:	300c      	adds	r0, #12
 801bc9a:	f7fd fc3b 	bl	8019514 <memcpy>
 801bc9e:	4621      	mov	r1, r4
 801bca0:	4630      	mov	r0, r6
 801bca2:	f7ff ffb7 	bl	801bc14 <_Bfree>
 801bca6:	4644      	mov	r4, r8
 801bca8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801bcac:	3501      	adds	r5, #1
 801bcae:	615f      	str	r7, [r3, #20]
 801bcb0:	6125      	str	r5, [r4, #16]
 801bcb2:	4620      	mov	r0, r4
 801bcb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801bcb8 <__hi0bits>:
 801bcb8:	0c02      	lsrs	r2, r0, #16
 801bcba:	0412      	lsls	r2, r2, #16
 801bcbc:	4603      	mov	r3, r0
 801bcbe:	b9b2      	cbnz	r2, 801bcee <__hi0bits+0x36>
 801bcc0:	0403      	lsls	r3, r0, #16
 801bcc2:	2010      	movs	r0, #16
 801bcc4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801bcc8:	bf04      	itt	eq
 801bcca:	021b      	lsleq	r3, r3, #8
 801bccc:	3008      	addeq	r0, #8
 801bcce:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801bcd2:	bf04      	itt	eq
 801bcd4:	011b      	lsleq	r3, r3, #4
 801bcd6:	3004      	addeq	r0, #4
 801bcd8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801bcdc:	bf04      	itt	eq
 801bcde:	009b      	lsleq	r3, r3, #2
 801bce0:	3002      	addeq	r0, #2
 801bce2:	2b00      	cmp	r3, #0
 801bce4:	db06      	blt.n	801bcf4 <__hi0bits+0x3c>
 801bce6:	005b      	lsls	r3, r3, #1
 801bce8:	d503      	bpl.n	801bcf2 <__hi0bits+0x3a>
 801bcea:	3001      	adds	r0, #1
 801bcec:	4770      	bx	lr
 801bcee:	2000      	movs	r0, #0
 801bcf0:	e7e8      	b.n	801bcc4 <__hi0bits+0xc>
 801bcf2:	2020      	movs	r0, #32
 801bcf4:	4770      	bx	lr

0801bcf6 <__lo0bits>:
 801bcf6:	6803      	ldr	r3, [r0, #0]
 801bcf8:	f013 0207 	ands.w	r2, r3, #7
 801bcfc:	4601      	mov	r1, r0
 801bcfe:	d00b      	beq.n	801bd18 <__lo0bits+0x22>
 801bd00:	07da      	lsls	r2, r3, #31
 801bd02:	d423      	bmi.n	801bd4c <__lo0bits+0x56>
 801bd04:	0798      	lsls	r0, r3, #30
 801bd06:	bf49      	itett	mi
 801bd08:	085b      	lsrmi	r3, r3, #1
 801bd0a:	089b      	lsrpl	r3, r3, #2
 801bd0c:	2001      	movmi	r0, #1
 801bd0e:	600b      	strmi	r3, [r1, #0]
 801bd10:	bf5c      	itt	pl
 801bd12:	600b      	strpl	r3, [r1, #0]
 801bd14:	2002      	movpl	r0, #2
 801bd16:	4770      	bx	lr
 801bd18:	b298      	uxth	r0, r3
 801bd1a:	b9a8      	cbnz	r0, 801bd48 <__lo0bits+0x52>
 801bd1c:	0c1b      	lsrs	r3, r3, #16
 801bd1e:	2010      	movs	r0, #16
 801bd20:	f013 0fff 	tst.w	r3, #255	; 0xff
 801bd24:	bf04      	itt	eq
 801bd26:	0a1b      	lsreq	r3, r3, #8
 801bd28:	3008      	addeq	r0, #8
 801bd2a:	071a      	lsls	r2, r3, #28
 801bd2c:	bf04      	itt	eq
 801bd2e:	091b      	lsreq	r3, r3, #4
 801bd30:	3004      	addeq	r0, #4
 801bd32:	079a      	lsls	r2, r3, #30
 801bd34:	bf04      	itt	eq
 801bd36:	089b      	lsreq	r3, r3, #2
 801bd38:	3002      	addeq	r0, #2
 801bd3a:	07da      	lsls	r2, r3, #31
 801bd3c:	d402      	bmi.n	801bd44 <__lo0bits+0x4e>
 801bd3e:	085b      	lsrs	r3, r3, #1
 801bd40:	d006      	beq.n	801bd50 <__lo0bits+0x5a>
 801bd42:	3001      	adds	r0, #1
 801bd44:	600b      	str	r3, [r1, #0]
 801bd46:	4770      	bx	lr
 801bd48:	4610      	mov	r0, r2
 801bd4a:	e7e9      	b.n	801bd20 <__lo0bits+0x2a>
 801bd4c:	2000      	movs	r0, #0
 801bd4e:	4770      	bx	lr
 801bd50:	2020      	movs	r0, #32
 801bd52:	4770      	bx	lr

0801bd54 <__i2b>:
 801bd54:	b510      	push	{r4, lr}
 801bd56:	460c      	mov	r4, r1
 801bd58:	2101      	movs	r1, #1
 801bd5a:	f7ff ff27 	bl	801bbac <_Balloc>
 801bd5e:	2201      	movs	r2, #1
 801bd60:	6144      	str	r4, [r0, #20]
 801bd62:	6102      	str	r2, [r0, #16]
 801bd64:	bd10      	pop	{r4, pc}

0801bd66 <__multiply>:
 801bd66:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd6a:	4614      	mov	r4, r2
 801bd6c:	690a      	ldr	r2, [r1, #16]
 801bd6e:	6923      	ldr	r3, [r4, #16]
 801bd70:	429a      	cmp	r2, r3
 801bd72:	bfb8      	it	lt
 801bd74:	460b      	movlt	r3, r1
 801bd76:	4689      	mov	r9, r1
 801bd78:	bfbc      	itt	lt
 801bd7a:	46a1      	movlt	r9, r4
 801bd7c:	461c      	movlt	r4, r3
 801bd7e:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801bd82:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801bd86:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801bd8a:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801bd8e:	eb07 060a 	add.w	r6, r7, sl
 801bd92:	429e      	cmp	r6, r3
 801bd94:	bfc8      	it	gt
 801bd96:	3101      	addgt	r1, #1
 801bd98:	f7ff ff08 	bl	801bbac <_Balloc>
 801bd9c:	f100 0514 	add.w	r5, r0, #20
 801bda0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801bda4:	462b      	mov	r3, r5
 801bda6:	2200      	movs	r2, #0
 801bda8:	4543      	cmp	r3, r8
 801bdaa:	d316      	bcc.n	801bdda <__multiply+0x74>
 801bdac:	f104 0214 	add.w	r2, r4, #20
 801bdb0:	f109 0114 	add.w	r1, r9, #20
 801bdb4:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 801bdb8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801bdbc:	9301      	str	r3, [sp, #4]
 801bdbe:	9c01      	ldr	r4, [sp, #4]
 801bdc0:	4294      	cmp	r4, r2
 801bdc2:	4613      	mov	r3, r2
 801bdc4:	d80c      	bhi.n	801bde0 <__multiply+0x7a>
 801bdc6:	2e00      	cmp	r6, #0
 801bdc8:	dd03      	ble.n	801bdd2 <__multiply+0x6c>
 801bdca:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801bdce:	2b00      	cmp	r3, #0
 801bdd0:	d054      	beq.n	801be7c <__multiply+0x116>
 801bdd2:	6106      	str	r6, [r0, #16]
 801bdd4:	b003      	add	sp, #12
 801bdd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bdda:	f843 2b04 	str.w	r2, [r3], #4
 801bdde:	e7e3      	b.n	801bda8 <__multiply+0x42>
 801bde0:	f8b3 a000 	ldrh.w	sl, [r3]
 801bde4:	3204      	adds	r2, #4
 801bde6:	f1ba 0f00 	cmp.w	sl, #0
 801bdea:	d020      	beq.n	801be2e <__multiply+0xc8>
 801bdec:	46ae      	mov	lr, r5
 801bdee:	4689      	mov	r9, r1
 801bdf0:	f04f 0c00 	mov.w	ip, #0
 801bdf4:	f859 4b04 	ldr.w	r4, [r9], #4
 801bdf8:	f8be b000 	ldrh.w	fp, [lr]
 801bdfc:	b2a3      	uxth	r3, r4
 801bdfe:	fb0a b303 	mla	r3, sl, r3, fp
 801be02:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 801be06:	f8de 4000 	ldr.w	r4, [lr]
 801be0a:	4463      	add	r3, ip
 801be0c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 801be10:	fb0a c40b 	mla	r4, sl, fp, ip
 801be14:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801be18:	b29b      	uxth	r3, r3
 801be1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801be1e:	454f      	cmp	r7, r9
 801be20:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 801be24:	f84e 3b04 	str.w	r3, [lr], #4
 801be28:	d8e4      	bhi.n	801bdf4 <__multiply+0x8e>
 801be2a:	f8ce c000 	str.w	ip, [lr]
 801be2e:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 801be32:	f1b9 0f00 	cmp.w	r9, #0
 801be36:	d01f      	beq.n	801be78 <__multiply+0x112>
 801be38:	682b      	ldr	r3, [r5, #0]
 801be3a:	46ae      	mov	lr, r5
 801be3c:	468c      	mov	ip, r1
 801be3e:	f04f 0a00 	mov.w	sl, #0
 801be42:	f8bc 4000 	ldrh.w	r4, [ip]
 801be46:	f8be b002 	ldrh.w	fp, [lr, #2]
 801be4a:	fb09 b404 	mla	r4, r9, r4, fp
 801be4e:	44a2      	add	sl, r4
 801be50:	b29b      	uxth	r3, r3
 801be52:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 801be56:	f84e 3b04 	str.w	r3, [lr], #4
 801be5a:	f85c 3b04 	ldr.w	r3, [ip], #4
 801be5e:	f8be 4000 	ldrh.w	r4, [lr]
 801be62:	0c1b      	lsrs	r3, r3, #16
 801be64:	fb09 4303 	mla	r3, r9, r3, r4
 801be68:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 801be6c:	4567      	cmp	r7, ip
 801be6e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801be72:	d8e6      	bhi.n	801be42 <__multiply+0xdc>
 801be74:	f8ce 3000 	str.w	r3, [lr]
 801be78:	3504      	adds	r5, #4
 801be7a:	e7a0      	b.n	801bdbe <__multiply+0x58>
 801be7c:	3e01      	subs	r6, #1
 801be7e:	e7a2      	b.n	801bdc6 <__multiply+0x60>

0801be80 <__pow5mult>:
 801be80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801be84:	4615      	mov	r5, r2
 801be86:	f012 0203 	ands.w	r2, r2, #3
 801be8a:	4606      	mov	r6, r0
 801be8c:	460f      	mov	r7, r1
 801be8e:	d007      	beq.n	801bea0 <__pow5mult+0x20>
 801be90:	3a01      	subs	r2, #1
 801be92:	4c21      	ldr	r4, [pc, #132]	; (801bf18 <__pow5mult+0x98>)
 801be94:	2300      	movs	r3, #0
 801be96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801be9a:	f7ff fed2 	bl	801bc42 <__multadd>
 801be9e:	4607      	mov	r7, r0
 801bea0:	10ad      	asrs	r5, r5, #2
 801bea2:	d035      	beq.n	801bf10 <__pow5mult+0x90>
 801bea4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801bea6:	b93c      	cbnz	r4, 801beb8 <__pow5mult+0x38>
 801bea8:	2010      	movs	r0, #16
 801beaa:	f7ff fe4b 	bl	801bb44 <malloc>
 801beae:	6270      	str	r0, [r6, #36]	; 0x24
 801beb0:	6044      	str	r4, [r0, #4]
 801beb2:	6084      	str	r4, [r0, #8]
 801beb4:	6004      	str	r4, [r0, #0]
 801beb6:	60c4      	str	r4, [r0, #12]
 801beb8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801bebc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801bec0:	b94c      	cbnz	r4, 801bed6 <__pow5mult+0x56>
 801bec2:	f240 2171 	movw	r1, #625	; 0x271
 801bec6:	4630      	mov	r0, r6
 801bec8:	f7ff ff44 	bl	801bd54 <__i2b>
 801becc:	2300      	movs	r3, #0
 801bece:	f8c8 0008 	str.w	r0, [r8, #8]
 801bed2:	4604      	mov	r4, r0
 801bed4:	6003      	str	r3, [r0, #0]
 801bed6:	f04f 0800 	mov.w	r8, #0
 801beda:	07eb      	lsls	r3, r5, #31
 801bedc:	d50a      	bpl.n	801bef4 <__pow5mult+0x74>
 801bede:	4639      	mov	r1, r7
 801bee0:	4622      	mov	r2, r4
 801bee2:	4630      	mov	r0, r6
 801bee4:	f7ff ff3f 	bl	801bd66 <__multiply>
 801bee8:	4639      	mov	r1, r7
 801beea:	4681      	mov	r9, r0
 801beec:	4630      	mov	r0, r6
 801beee:	f7ff fe91 	bl	801bc14 <_Bfree>
 801bef2:	464f      	mov	r7, r9
 801bef4:	106d      	asrs	r5, r5, #1
 801bef6:	d00b      	beq.n	801bf10 <__pow5mult+0x90>
 801bef8:	6820      	ldr	r0, [r4, #0]
 801befa:	b938      	cbnz	r0, 801bf0c <__pow5mult+0x8c>
 801befc:	4622      	mov	r2, r4
 801befe:	4621      	mov	r1, r4
 801bf00:	4630      	mov	r0, r6
 801bf02:	f7ff ff30 	bl	801bd66 <__multiply>
 801bf06:	6020      	str	r0, [r4, #0]
 801bf08:	f8c0 8000 	str.w	r8, [r0]
 801bf0c:	4604      	mov	r4, r0
 801bf0e:	e7e4      	b.n	801beda <__pow5mult+0x5a>
 801bf10:	4638      	mov	r0, r7
 801bf12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bf16:	bf00      	nop
 801bf18:	080d8c08 	.word	0x080d8c08

0801bf1c <__lshift>:
 801bf1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bf20:	460c      	mov	r4, r1
 801bf22:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801bf26:	6923      	ldr	r3, [r4, #16]
 801bf28:	6849      	ldr	r1, [r1, #4]
 801bf2a:	eb0a 0903 	add.w	r9, sl, r3
 801bf2e:	68a3      	ldr	r3, [r4, #8]
 801bf30:	4607      	mov	r7, r0
 801bf32:	4616      	mov	r6, r2
 801bf34:	f109 0501 	add.w	r5, r9, #1
 801bf38:	42ab      	cmp	r3, r5
 801bf3a:	db31      	blt.n	801bfa0 <__lshift+0x84>
 801bf3c:	4638      	mov	r0, r7
 801bf3e:	f7ff fe35 	bl	801bbac <_Balloc>
 801bf42:	2200      	movs	r2, #0
 801bf44:	4680      	mov	r8, r0
 801bf46:	f100 0314 	add.w	r3, r0, #20
 801bf4a:	4611      	mov	r1, r2
 801bf4c:	4552      	cmp	r2, sl
 801bf4e:	db2a      	blt.n	801bfa6 <__lshift+0x8a>
 801bf50:	6920      	ldr	r0, [r4, #16]
 801bf52:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801bf56:	f104 0114 	add.w	r1, r4, #20
 801bf5a:	f016 021f 	ands.w	r2, r6, #31
 801bf5e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 801bf62:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 801bf66:	d022      	beq.n	801bfae <__lshift+0x92>
 801bf68:	f1c2 0c20 	rsb	ip, r2, #32
 801bf6c:	2000      	movs	r0, #0
 801bf6e:	680e      	ldr	r6, [r1, #0]
 801bf70:	4096      	lsls	r6, r2
 801bf72:	4330      	orrs	r0, r6
 801bf74:	f843 0b04 	str.w	r0, [r3], #4
 801bf78:	f851 0b04 	ldr.w	r0, [r1], #4
 801bf7c:	458e      	cmp	lr, r1
 801bf7e:	fa20 f00c 	lsr.w	r0, r0, ip
 801bf82:	d8f4      	bhi.n	801bf6e <__lshift+0x52>
 801bf84:	6018      	str	r0, [r3, #0]
 801bf86:	b108      	cbz	r0, 801bf8c <__lshift+0x70>
 801bf88:	f109 0502 	add.w	r5, r9, #2
 801bf8c:	3d01      	subs	r5, #1
 801bf8e:	4638      	mov	r0, r7
 801bf90:	f8c8 5010 	str.w	r5, [r8, #16]
 801bf94:	4621      	mov	r1, r4
 801bf96:	f7ff fe3d 	bl	801bc14 <_Bfree>
 801bf9a:	4640      	mov	r0, r8
 801bf9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bfa0:	3101      	adds	r1, #1
 801bfa2:	005b      	lsls	r3, r3, #1
 801bfa4:	e7c8      	b.n	801bf38 <__lshift+0x1c>
 801bfa6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801bfaa:	3201      	adds	r2, #1
 801bfac:	e7ce      	b.n	801bf4c <__lshift+0x30>
 801bfae:	3b04      	subs	r3, #4
 801bfb0:	f851 2b04 	ldr.w	r2, [r1], #4
 801bfb4:	f843 2f04 	str.w	r2, [r3, #4]!
 801bfb8:	458e      	cmp	lr, r1
 801bfba:	d8f9      	bhi.n	801bfb0 <__lshift+0x94>
 801bfbc:	e7e6      	b.n	801bf8c <__lshift+0x70>

0801bfbe <__mcmp>:
 801bfbe:	6903      	ldr	r3, [r0, #16]
 801bfc0:	690a      	ldr	r2, [r1, #16]
 801bfc2:	1a9b      	subs	r3, r3, r2
 801bfc4:	b530      	push	{r4, r5, lr}
 801bfc6:	d10c      	bne.n	801bfe2 <__mcmp+0x24>
 801bfc8:	0092      	lsls	r2, r2, #2
 801bfca:	3014      	adds	r0, #20
 801bfcc:	3114      	adds	r1, #20
 801bfce:	1884      	adds	r4, r0, r2
 801bfd0:	4411      	add	r1, r2
 801bfd2:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801bfd6:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801bfda:	4295      	cmp	r5, r2
 801bfdc:	d003      	beq.n	801bfe6 <__mcmp+0x28>
 801bfde:	d305      	bcc.n	801bfec <__mcmp+0x2e>
 801bfe0:	2301      	movs	r3, #1
 801bfe2:	4618      	mov	r0, r3
 801bfe4:	bd30      	pop	{r4, r5, pc}
 801bfe6:	42a0      	cmp	r0, r4
 801bfe8:	d3f3      	bcc.n	801bfd2 <__mcmp+0x14>
 801bfea:	e7fa      	b.n	801bfe2 <__mcmp+0x24>
 801bfec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bff0:	e7f7      	b.n	801bfe2 <__mcmp+0x24>

0801bff2 <__mdiff>:
 801bff2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bff6:	460d      	mov	r5, r1
 801bff8:	4607      	mov	r7, r0
 801bffa:	4611      	mov	r1, r2
 801bffc:	4628      	mov	r0, r5
 801bffe:	4614      	mov	r4, r2
 801c000:	f7ff ffdd 	bl	801bfbe <__mcmp>
 801c004:	1e06      	subs	r6, r0, #0
 801c006:	d108      	bne.n	801c01a <__mdiff+0x28>
 801c008:	4631      	mov	r1, r6
 801c00a:	4638      	mov	r0, r7
 801c00c:	f7ff fdce 	bl	801bbac <_Balloc>
 801c010:	2301      	movs	r3, #1
 801c012:	6103      	str	r3, [r0, #16]
 801c014:	6146      	str	r6, [r0, #20]
 801c016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c01a:	bfa4      	itt	ge
 801c01c:	4623      	movge	r3, r4
 801c01e:	462c      	movge	r4, r5
 801c020:	4638      	mov	r0, r7
 801c022:	6861      	ldr	r1, [r4, #4]
 801c024:	bfa6      	itte	ge
 801c026:	461d      	movge	r5, r3
 801c028:	2600      	movge	r6, #0
 801c02a:	2601      	movlt	r6, #1
 801c02c:	f7ff fdbe 	bl	801bbac <_Balloc>
 801c030:	692b      	ldr	r3, [r5, #16]
 801c032:	60c6      	str	r6, [r0, #12]
 801c034:	6926      	ldr	r6, [r4, #16]
 801c036:	f105 0914 	add.w	r9, r5, #20
 801c03a:	f104 0214 	add.w	r2, r4, #20
 801c03e:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801c042:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801c046:	f100 0514 	add.w	r5, r0, #20
 801c04a:	f04f 0c00 	mov.w	ip, #0
 801c04e:	f852 ab04 	ldr.w	sl, [r2], #4
 801c052:	f859 4b04 	ldr.w	r4, [r9], #4
 801c056:	fa1c f18a 	uxtah	r1, ip, sl
 801c05a:	b2a3      	uxth	r3, r4
 801c05c:	1ac9      	subs	r1, r1, r3
 801c05e:	0c23      	lsrs	r3, r4, #16
 801c060:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801c064:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801c068:	b289      	uxth	r1, r1
 801c06a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 801c06e:	45c8      	cmp	r8, r9
 801c070:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801c074:	4696      	mov	lr, r2
 801c076:	f845 3b04 	str.w	r3, [r5], #4
 801c07a:	d8e8      	bhi.n	801c04e <__mdiff+0x5c>
 801c07c:	45be      	cmp	lr, r7
 801c07e:	d305      	bcc.n	801c08c <__mdiff+0x9a>
 801c080:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801c084:	b18b      	cbz	r3, 801c0aa <__mdiff+0xb8>
 801c086:	6106      	str	r6, [r0, #16]
 801c088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c08c:	f85e 1b04 	ldr.w	r1, [lr], #4
 801c090:	fa1c f381 	uxtah	r3, ip, r1
 801c094:	141a      	asrs	r2, r3, #16
 801c096:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801c09a:	b29b      	uxth	r3, r3
 801c09c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c0a0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801c0a4:	f845 3b04 	str.w	r3, [r5], #4
 801c0a8:	e7e8      	b.n	801c07c <__mdiff+0x8a>
 801c0aa:	3e01      	subs	r6, #1
 801c0ac:	e7e8      	b.n	801c080 <__mdiff+0x8e>

0801c0ae <__d2b>:
 801c0ae:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801c0b2:	460e      	mov	r6, r1
 801c0b4:	2101      	movs	r1, #1
 801c0b6:	ec59 8b10 	vmov	r8, r9, d0
 801c0ba:	4615      	mov	r5, r2
 801c0bc:	f7ff fd76 	bl	801bbac <_Balloc>
 801c0c0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801c0c4:	4607      	mov	r7, r0
 801c0c6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c0ca:	bb34      	cbnz	r4, 801c11a <__d2b+0x6c>
 801c0cc:	9301      	str	r3, [sp, #4]
 801c0ce:	f1b8 0f00 	cmp.w	r8, #0
 801c0d2:	d027      	beq.n	801c124 <__d2b+0x76>
 801c0d4:	a802      	add	r0, sp, #8
 801c0d6:	f840 8d08 	str.w	r8, [r0, #-8]!
 801c0da:	f7ff fe0c 	bl	801bcf6 <__lo0bits>
 801c0de:	9900      	ldr	r1, [sp, #0]
 801c0e0:	b1f0      	cbz	r0, 801c120 <__d2b+0x72>
 801c0e2:	9a01      	ldr	r2, [sp, #4]
 801c0e4:	f1c0 0320 	rsb	r3, r0, #32
 801c0e8:	fa02 f303 	lsl.w	r3, r2, r3
 801c0ec:	430b      	orrs	r3, r1
 801c0ee:	40c2      	lsrs	r2, r0
 801c0f0:	617b      	str	r3, [r7, #20]
 801c0f2:	9201      	str	r2, [sp, #4]
 801c0f4:	9b01      	ldr	r3, [sp, #4]
 801c0f6:	61bb      	str	r3, [r7, #24]
 801c0f8:	2b00      	cmp	r3, #0
 801c0fa:	bf14      	ite	ne
 801c0fc:	2102      	movne	r1, #2
 801c0fe:	2101      	moveq	r1, #1
 801c100:	6139      	str	r1, [r7, #16]
 801c102:	b1c4      	cbz	r4, 801c136 <__d2b+0x88>
 801c104:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801c108:	4404      	add	r4, r0
 801c10a:	6034      	str	r4, [r6, #0]
 801c10c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801c110:	6028      	str	r0, [r5, #0]
 801c112:	4638      	mov	r0, r7
 801c114:	b003      	add	sp, #12
 801c116:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c11a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801c11e:	e7d5      	b.n	801c0cc <__d2b+0x1e>
 801c120:	6179      	str	r1, [r7, #20]
 801c122:	e7e7      	b.n	801c0f4 <__d2b+0x46>
 801c124:	a801      	add	r0, sp, #4
 801c126:	f7ff fde6 	bl	801bcf6 <__lo0bits>
 801c12a:	9b01      	ldr	r3, [sp, #4]
 801c12c:	617b      	str	r3, [r7, #20]
 801c12e:	2101      	movs	r1, #1
 801c130:	6139      	str	r1, [r7, #16]
 801c132:	3020      	adds	r0, #32
 801c134:	e7e5      	b.n	801c102 <__d2b+0x54>
 801c136:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801c13a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801c13e:	6030      	str	r0, [r6, #0]
 801c140:	6918      	ldr	r0, [r3, #16]
 801c142:	f7ff fdb9 	bl	801bcb8 <__hi0bits>
 801c146:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801c14a:	e7e1      	b.n	801c110 <__d2b+0x62>

0801c14c <_realloc_r>:
 801c14c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c150:	4682      	mov	sl, r0
 801c152:	460c      	mov	r4, r1
 801c154:	b929      	cbnz	r1, 801c162 <_realloc_r+0x16>
 801c156:	4611      	mov	r1, r2
 801c158:	b003      	add	sp, #12
 801c15a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c15e:	f7fc bfcb 	b.w	80190f8 <_malloc_r>
 801c162:	9201      	str	r2, [sp, #4]
 801c164:	f7fd f9ea 	bl	801953c <__malloc_lock>
 801c168:	9a01      	ldr	r2, [sp, #4]
 801c16a:	f854 5c04 	ldr.w	r5, [r4, #-4]
 801c16e:	f102 080b 	add.w	r8, r2, #11
 801c172:	f1b8 0f16 	cmp.w	r8, #22
 801c176:	f1a4 0908 	sub.w	r9, r4, #8
 801c17a:	f025 0603 	bic.w	r6, r5, #3
 801c17e:	d90a      	bls.n	801c196 <_realloc_r+0x4a>
 801c180:	f038 0807 	bics.w	r8, r8, #7
 801c184:	d509      	bpl.n	801c19a <_realloc_r+0x4e>
 801c186:	230c      	movs	r3, #12
 801c188:	f8ca 3000 	str.w	r3, [sl]
 801c18c:	2700      	movs	r7, #0
 801c18e:	4638      	mov	r0, r7
 801c190:	b003      	add	sp, #12
 801c192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c196:	f04f 0810 	mov.w	r8, #16
 801c19a:	4590      	cmp	r8, r2
 801c19c:	d3f3      	bcc.n	801c186 <_realloc_r+0x3a>
 801c19e:	45b0      	cmp	r8, r6
 801c1a0:	f340 8145 	ble.w	801c42e <_realloc_r+0x2e2>
 801c1a4:	4ba8      	ldr	r3, [pc, #672]	; (801c448 <_realloc_r+0x2fc>)
 801c1a6:	f8d3 e008 	ldr.w	lr, [r3, #8]
 801c1aa:	eb09 0106 	add.w	r1, r9, r6
 801c1ae:	4571      	cmp	r1, lr
 801c1b0:	469b      	mov	fp, r3
 801c1b2:	684b      	ldr	r3, [r1, #4]
 801c1b4:	d005      	beq.n	801c1c2 <_realloc_r+0x76>
 801c1b6:	f023 0001 	bic.w	r0, r3, #1
 801c1ba:	4408      	add	r0, r1
 801c1bc:	6840      	ldr	r0, [r0, #4]
 801c1be:	07c7      	lsls	r7, r0, #31
 801c1c0:	d447      	bmi.n	801c252 <_realloc_r+0x106>
 801c1c2:	f023 0303 	bic.w	r3, r3, #3
 801c1c6:	4571      	cmp	r1, lr
 801c1c8:	eb06 0703 	add.w	r7, r6, r3
 801c1cc:	d119      	bne.n	801c202 <_realloc_r+0xb6>
 801c1ce:	f108 0010 	add.w	r0, r8, #16
 801c1d2:	4287      	cmp	r7, r0
 801c1d4:	db3f      	blt.n	801c256 <_realloc_r+0x10a>
 801c1d6:	eb09 0308 	add.w	r3, r9, r8
 801c1da:	eba7 0708 	sub.w	r7, r7, r8
 801c1de:	f047 0701 	orr.w	r7, r7, #1
 801c1e2:	f8cb 3008 	str.w	r3, [fp, #8]
 801c1e6:	605f      	str	r7, [r3, #4]
 801c1e8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801c1ec:	f003 0301 	and.w	r3, r3, #1
 801c1f0:	ea43 0308 	orr.w	r3, r3, r8
 801c1f4:	f844 3c04 	str.w	r3, [r4, #-4]
 801c1f8:	4650      	mov	r0, sl
 801c1fa:	f7fd f9a5 	bl	8019548 <__malloc_unlock>
 801c1fe:	4627      	mov	r7, r4
 801c200:	e7c5      	b.n	801c18e <_realloc_r+0x42>
 801c202:	45b8      	cmp	r8, r7
 801c204:	dc27      	bgt.n	801c256 <_realloc_r+0x10a>
 801c206:	68cb      	ldr	r3, [r1, #12]
 801c208:	688a      	ldr	r2, [r1, #8]
 801c20a:	60d3      	str	r3, [r2, #12]
 801c20c:	609a      	str	r2, [r3, #8]
 801c20e:	eba7 0008 	sub.w	r0, r7, r8
 801c212:	280f      	cmp	r0, #15
 801c214:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801c218:	eb09 0207 	add.w	r2, r9, r7
 801c21c:	f240 8109 	bls.w	801c432 <_realloc_r+0x2e6>
 801c220:	eb09 0108 	add.w	r1, r9, r8
 801c224:	f003 0301 	and.w	r3, r3, #1
 801c228:	ea43 0308 	orr.w	r3, r3, r8
 801c22c:	f040 0001 	orr.w	r0, r0, #1
 801c230:	f8c9 3004 	str.w	r3, [r9, #4]
 801c234:	6048      	str	r0, [r1, #4]
 801c236:	6853      	ldr	r3, [r2, #4]
 801c238:	f043 0301 	orr.w	r3, r3, #1
 801c23c:	6053      	str	r3, [r2, #4]
 801c23e:	3108      	adds	r1, #8
 801c240:	4650      	mov	r0, sl
 801c242:	f7ff fa41 	bl	801b6c8 <_free_r>
 801c246:	4650      	mov	r0, sl
 801c248:	f7fd f97e 	bl	8019548 <__malloc_unlock>
 801c24c:	f109 0708 	add.w	r7, r9, #8
 801c250:	e79d      	b.n	801c18e <_realloc_r+0x42>
 801c252:	2300      	movs	r3, #0
 801c254:	4619      	mov	r1, r3
 801c256:	07e8      	lsls	r0, r5, #31
 801c258:	f100 8084 	bmi.w	801c364 <_realloc_r+0x218>
 801c25c:	f854 5c08 	ldr.w	r5, [r4, #-8]
 801c260:	eba9 0505 	sub.w	r5, r9, r5
 801c264:	6868      	ldr	r0, [r5, #4]
 801c266:	f020 0003 	bic.w	r0, r0, #3
 801c26a:	4430      	add	r0, r6
 801c26c:	2900      	cmp	r1, #0
 801c26e:	d076      	beq.n	801c35e <_realloc_r+0x212>
 801c270:	4571      	cmp	r1, lr
 801c272:	d150      	bne.n	801c316 <_realloc_r+0x1ca>
 801c274:	4403      	add	r3, r0
 801c276:	f108 0110 	add.w	r1, r8, #16
 801c27a:	428b      	cmp	r3, r1
 801c27c:	db6f      	blt.n	801c35e <_realloc_r+0x212>
 801c27e:	462f      	mov	r7, r5
 801c280:	68ea      	ldr	r2, [r5, #12]
 801c282:	f857 1f08 	ldr.w	r1, [r7, #8]!
 801c286:	60ca      	str	r2, [r1, #12]
 801c288:	6091      	str	r1, [r2, #8]
 801c28a:	1f32      	subs	r2, r6, #4
 801c28c:	2a24      	cmp	r2, #36	; 0x24
 801c28e:	d83b      	bhi.n	801c308 <_realloc_r+0x1bc>
 801c290:	2a13      	cmp	r2, #19
 801c292:	d936      	bls.n	801c302 <_realloc_r+0x1b6>
 801c294:	6821      	ldr	r1, [r4, #0]
 801c296:	60a9      	str	r1, [r5, #8]
 801c298:	6861      	ldr	r1, [r4, #4]
 801c29a:	60e9      	str	r1, [r5, #12]
 801c29c:	2a1b      	cmp	r2, #27
 801c29e:	d81c      	bhi.n	801c2da <_realloc_r+0x18e>
 801c2a0:	f105 0210 	add.w	r2, r5, #16
 801c2a4:	f104 0108 	add.w	r1, r4, #8
 801c2a8:	6808      	ldr	r0, [r1, #0]
 801c2aa:	6010      	str	r0, [r2, #0]
 801c2ac:	6848      	ldr	r0, [r1, #4]
 801c2ae:	6050      	str	r0, [r2, #4]
 801c2b0:	6889      	ldr	r1, [r1, #8]
 801c2b2:	6091      	str	r1, [r2, #8]
 801c2b4:	eb05 0208 	add.w	r2, r5, r8
 801c2b8:	eba3 0308 	sub.w	r3, r3, r8
 801c2bc:	f043 0301 	orr.w	r3, r3, #1
 801c2c0:	f8cb 2008 	str.w	r2, [fp, #8]
 801c2c4:	6053      	str	r3, [r2, #4]
 801c2c6:	686b      	ldr	r3, [r5, #4]
 801c2c8:	f003 0301 	and.w	r3, r3, #1
 801c2cc:	ea43 0308 	orr.w	r3, r3, r8
 801c2d0:	606b      	str	r3, [r5, #4]
 801c2d2:	4650      	mov	r0, sl
 801c2d4:	f7fd f938 	bl	8019548 <__malloc_unlock>
 801c2d8:	e759      	b.n	801c18e <_realloc_r+0x42>
 801c2da:	68a1      	ldr	r1, [r4, #8]
 801c2dc:	6129      	str	r1, [r5, #16]
 801c2de:	68e1      	ldr	r1, [r4, #12]
 801c2e0:	6169      	str	r1, [r5, #20]
 801c2e2:	2a24      	cmp	r2, #36	; 0x24
 801c2e4:	bf01      	itttt	eq
 801c2e6:	6922      	ldreq	r2, [r4, #16]
 801c2e8:	61aa      	streq	r2, [r5, #24]
 801c2ea:	6960      	ldreq	r0, [r4, #20]
 801c2ec:	61e8      	streq	r0, [r5, #28]
 801c2ee:	bf19      	ittee	ne
 801c2f0:	f105 0218 	addne.w	r2, r5, #24
 801c2f4:	f104 0110 	addne.w	r1, r4, #16
 801c2f8:	f105 0220 	addeq.w	r2, r5, #32
 801c2fc:	f104 0118 	addeq.w	r1, r4, #24
 801c300:	e7d2      	b.n	801c2a8 <_realloc_r+0x15c>
 801c302:	463a      	mov	r2, r7
 801c304:	4621      	mov	r1, r4
 801c306:	e7cf      	b.n	801c2a8 <_realloc_r+0x15c>
 801c308:	4621      	mov	r1, r4
 801c30a:	4638      	mov	r0, r7
 801c30c:	9301      	str	r3, [sp, #4]
 801c30e:	f7ff fc33 	bl	801bb78 <memmove>
 801c312:	9b01      	ldr	r3, [sp, #4]
 801c314:	e7ce      	b.n	801c2b4 <_realloc_r+0x168>
 801c316:	18c7      	adds	r7, r0, r3
 801c318:	45b8      	cmp	r8, r7
 801c31a:	dc20      	bgt.n	801c35e <_realloc_r+0x212>
 801c31c:	68cb      	ldr	r3, [r1, #12]
 801c31e:	688a      	ldr	r2, [r1, #8]
 801c320:	60d3      	str	r3, [r2, #12]
 801c322:	609a      	str	r2, [r3, #8]
 801c324:	4628      	mov	r0, r5
 801c326:	68eb      	ldr	r3, [r5, #12]
 801c328:	f850 2f08 	ldr.w	r2, [r0, #8]!
 801c32c:	60d3      	str	r3, [r2, #12]
 801c32e:	609a      	str	r2, [r3, #8]
 801c330:	1f32      	subs	r2, r6, #4
 801c332:	2a24      	cmp	r2, #36	; 0x24
 801c334:	d842      	bhi.n	801c3bc <_realloc_r+0x270>
 801c336:	2a13      	cmp	r2, #19
 801c338:	d93e      	bls.n	801c3b8 <_realloc_r+0x26c>
 801c33a:	6823      	ldr	r3, [r4, #0]
 801c33c:	60ab      	str	r3, [r5, #8]
 801c33e:	6863      	ldr	r3, [r4, #4]
 801c340:	60eb      	str	r3, [r5, #12]
 801c342:	2a1b      	cmp	r2, #27
 801c344:	d824      	bhi.n	801c390 <_realloc_r+0x244>
 801c346:	f105 0010 	add.w	r0, r5, #16
 801c34a:	f104 0308 	add.w	r3, r4, #8
 801c34e:	681a      	ldr	r2, [r3, #0]
 801c350:	6002      	str	r2, [r0, #0]
 801c352:	685a      	ldr	r2, [r3, #4]
 801c354:	6042      	str	r2, [r0, #4]
 801c356:	689b      	ldr	r3, [r3, #8]
 801c358:	6083      	str	r3, [r0, #8]
 801c35a:	46a9      	mov	r9, r5
 801c35c:	e757      	b.n	801c20e <_realloc_r+0xc2>
 801c35e:	4580      	cmp	r8, r0
 801c360:	4607      	mov	r7, r0
 801c362:	dddf      	ble.n	801c324 <_realloc_r+0x1d8>
 801c364:	4611      	mov	r1, r2
 801c366:	4650      	mov	r0, sl
 801c368:	f7fc fec6 	bl	80190f8 <_malloc_r>
 801c36c:	4607      	mov	r7, r0
 801c36e:	2800      	cmp	r0, #0
 801c370:	d0af      	beq.n	801c2d2 <_realloc_r+0x186>
 801c372:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801c376:	f023 0301 	bic.w	r3, r3, #1
 801c37a:	f1a0 0208 	sub.w	r2, r0, #8
 801c37e:	444b      	add	r3, r9
 801c380:	429a      	cmp	r2, r3
 801c382:	d11f      	bne.n	801c3c4 <_realloc_r+0x278>
 801c384:	f850 7c04 	ldr.w	r7, [r0, #-4]
 801c388:	f027 0703 	bic.w	r7, r7, #3
 801c38c:	4437      	add	r7, r6
 801c38e:	e73e      	b.n	801c20e <_realloc_r+0xc2>
 801c390:	68a3      	ldr	r3, [r4, #8]
 801c392:	612b      	str	r3, [r5, #16]
 801c394:	68e3      	ldr	r3, [r4, #12]
 801c396:	616b      	str	r3, [r5, #20]
 801c398:	2a24      	cmp	r2, #36	; 0x24
 801c39a:	bf01      	itttt	eq
 801c39c:	6923      	ldreq	r3, [r4, #16]
 801c39e:	61ab      	streq	r3, [r5, #24]
 801c3a0:	6962      	ldreq	r2, [r4, #20]
 801c3a2:	61ea      	streq	r2, [r5, #28]
 801c3a4:	bf19      	ittee	ne
 801c3a6:	f105 0018 	addne.w	r0, r5, #24
 801c3aa:	f104 0310 	addne.w	r3, r4, #16
 801c3ae:	f105 0020 	addeq.w	r0, r5, #32
 801c3b2:	f104 0318 	addeq.w	r3, r4, #24
 801c3b6:	e7ca      	b.n	801c34e <_realloc_r+0x202>
 801c3b8:	4623      	mov	r3, r4
 801c3ba:	e7c8      	b.n	801c34e <_realloc_r+0x202>
 801c3bc:	4621      	mov	r1, r4
 801c3be:	f7ff fbdb 	bl	801bb78 <memmove>
 801c3c2:	e7ca      	b.n	801c35a <_realloc_r+0x20e>
 801c3c4:	1f32      	subs	r2, r6, #4
 801c3c6:	2a24      	cmp	r2, #36	; 0x24
 801c3c8:	d82d      	bhi.n	801c426 <_realloc_r+0x2da>
 801c3ca:	2a13      	cmp	r2, #19
 801c3cc:	d928      	bls.n	801c420 <_realloc_r+0x2d4>
 801c3ce:	6823      	ldr	r3, [r4, #0]
 801c3d0:	6003      	str	r3, [r0, #0]
 801c3d2:	6863      	ldr	r3, [r4, #4]
 801c3d4:	6043      	str	r3, [r0, #4]
 801c3d6:	2a1b      	cmp	r2, #27
 801c3d8:	d80e      	bhi.n	801c3f8 <_realloc_r+0x2ac>
 801c3da:	f100 0308 	add.w	r3, r0, #8
 801c3de:	f104 0208 	add.w	r2, r4, #8
 801c3e2:	6811      	ldr	r1, [r2, #0]
 801c3e4:	6019      	str	r1, [r3, #0]
 801c3e6:	6851      	ldr	r1, [r2, #4]
 801c3e8:	6059      	str	r1, [r3, #4]
 801c3ea:	6892      	ldr	r2, [r2, #8]
 801c3ec:	609a      	str	r2, [r3, #8]
 801c3ee:	4621      	mov	r1, r4
 801c3f0:	4650      	mov	r0, sl
 801c3f2:	f7ff f969 	bl	801b6c8 <_free_r>
 801c3f6:	e76c      	b.n	801c2d2 <_realloc_r+0x186>
 801c3f8:	68a3      	ldr	r3, [r4, #8]
 801c3fa:	6083      	str	r3, [r0, #8]
 801c3fc:	68e3      	ldr	r3, [r4, #12]
 801c3fe:	60c3      	str	r3, [r0, #12]
 801c400:	2a24      	cmp	r2, #36	; 0x24
 801c402:	bf01      	itttt	eq
 801c404:	6923      	ldreq	r3, [r4, #16]
 801c406:	6103      	streq	r3, [r0, #16]
 801c408:	6961      	ldreq	r1, [r4, #20]
 801c40a:	6141      	streq	r1, [r0, #20]
 801c40c:	bf19      	ittee	ne
 801c40e:	f100 0310 	addne.w	r3, r0, #16
 801c412:	f104 0210 	addne.w	r2, r4, #16
 801c416:	f100 0318 	addeq.w	r3, r0, #24
 801c41a:	f104 0218 	addeq.w	r2, r4, #24
 801c41e:	e7e0      	b.n	801c3e2 <_realloc_r+0x296>
 801c420:	4603      	mov	r3, r0
 801c422:	4622      	mov	r2, r4
 801c424:	e7dd      	b.n	801c3e2 <_realloc_r+0x296>
 801c426:	4621      	mov	r1, r4
 801c428:	f7ff fba6 	bl	801bb78 <memmove>
 801c42c:	e7df      	b.n	801c3ee <_realloc_r+0x2a2>
 801c42e:	4637      	mov	r7, r6
 801c430:	e6ed      	b.n	801c20e <_realloc_r+0xc2>
 801c432:	f003 0301 	and.w	r3, r3, #1
 801c436:	431f      	orrs	r7, r3
 801c438:	f8c9 7004 	str.w	r7, [r9, #4]
 801c43c:	6853      	ldr	r3, [r2, #4]
 801c43e:	f043 0301 	orr.w	r3, r3, #1
 801c442:	6053      	str	r3, [r2, #4]
 801c444:	e6ff      	b.n	801c246 <_realloc_r+0xfa>
 801c446:	bf00      	nop
 801c448:	20001da8 	.word	0x20001da8

0801c44c <__sread>:
 801c44c:	b510      	push	{r4, lr}
 801c44e:	460c      	mov	r4, r1
 801c450:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c454:	f000 fb0c 	bl	801ca70 <_read_r>
 801c458:	2800      	cmp	r0, #0
 801c45a:	bfab      	itete	ge
 801c45c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801c45e:	89a3      	ldrhlt	r3, [r4, #12]
 801c460:	181b      	addge	r3, r3, r0
 801c462:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801c466:	bfac      	ite	ge
 801c468:	6563      	strge	r3, [r4, #84]	; 0x54
 801c46a:	81a3      	strhlt	r3, [r4, #12]
 801c46c:	bd10      	pop	{r4, pc}

0801c46e <__swrite>:
 801c46e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c472:	461f      	mov	r7, r3
 801c474:	898b      	ldrh	r3, [r1, #12]
 801c476:	05db      	lsls	r3, r3, #23
 801c478:	4605      	mov	r5, r0
 801c47a:	460c      	mov	r4, r1
 801c47c:	4616      	mov	r6, r2
 801c47e:	d505      	bpl.n	801c48c <__swrite+0x1e>
 801c480:	2302      	movs	r3, #2
 801c482:	2200      	movs	r2, #0
 801c484:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c488:	f000 fa74 	bl	801c974 <_lseek_r>
 801c48c:	89a3      	ldrh	r3, [r4, #12]
 801c48e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c492:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801c496:	81a3      	strh	r3, [r4, #12]
 801c498:	4632      	mov	r2, r6
 801c49a:	463b      	mov	r3, r7
 801c49c:	4628      	mov	r0, r5
 801c49e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c4a2:	f000 b89d 	b.w	801c5e0 <_write_r>

0801c4a6 <__sseek>:
 801c4a6:	b510      	push	{r4, lr}
 801c4a8:	460c      	mov	r4, r1
 801c4aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c4ae:	f000 fa61 	bl	801c974 <_lseek_r>
 801c4b2:	1c43      	adds	r3, r0, #1
 801c4b4:	89a3      	ldrh	r3, [r4, #12]
 801c4b6:	bf15      	itete	ne
 801c4b8:	6560      	strne	r0, [r4, #84]	; 0x54
 801c4ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801c4be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801c4c2:	81a3      	strheq	r3, [r4, #12]
 801c4c4:	bf18      	it	ne
 801c4c6:	81a3      	strhne	r3, [r4, #12]
 801c4c8:	bd10      	pop	{r4, pc}

0801c4ca <__sclose>:
 801c4ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c4ce:	f000 b907 	b.w	801c6e0 <_close_r>

0801c4d2 <__ssprint_r>:
 801c4d2:	6893      	ldr	r3, [r2, #8]
 801c4d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c4d8:	4681      	mov	r9, r0
 801c4da:	460c      	mov	r4, r1
 801c4dc:	4617      	mov	r7, r2
 801c4de:	2b00      	cmp	r3, #0
 801c4e0:	d060      	beq.n	801c5a4 <__ssprint_r+0xd2>
 801c4e2:	f04f 0b00 	mov.w	fp, #0
 801c4e6:	f8d2 a000 	ldr.w	sl, [r2]
 801c4ea:	465e      	mov	r6, fp
 801c4ec:	b356      	cbz	r6, 801c544 <__ssprint_r+0x72>
 801c4ee:	68a3      	ldr	r3, [r4, #8]
 801c4f0:	429e      	cmp	r6, r3
 801c4f2:	d344      	bcc.n	801c57e <__ssprint_r+0xac>
 801c4f4:	89a2      	ldrh	r2, [r4, #12]
 801c4f6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801c4fa:	d03e      	beq.n	801c57a <__ssprint_r+0xa8>
 801c4fc:	6825      	ldr	r5, [r4, #0]
 801c4fe:	6921      	ldr	r1, [r4, #16]
 801c500:	eba5 0801 	sub.w	r8, r5, r1
 801c504:	6965      	ldr	r5, [r4, #20]
 801c506:	2302      	movs	r3, #2
 801c508:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c50c:	fb95 f5f3 	sdiv	r5, r5, r3
 801c510:	f108 0301 	add.w	r3, r8, #1
 801c514:	4433      	add	r3, r6
 801c516:	429d      	cmp	r5, r3
 801c518:	bf38      	it	cc
 801c51a:	461d      	movcc	r5, r3
 801c51c:	0553      	lsls	r3, r2, #21
 801c51e:	d546      	bpl.n	801c5ae <__ssprint_r+0xdc>
 801c520:	4629      	mov	r1, r5
 801c522:	4648      	mov	r0, r9
 801c524:	f7fc fde8 	bl	80190f8 <_malloc_r>
 801c528:	b998      	cbnz	r0, 801c552 <__ssprint_r+0x80>
 801c52a:	230c      	movs	r3, #12
 801c52c:	f8c9 3000 	str.w	r3, [r9]
 801c530:	89a3      	ldrh	r3, [r4, #12]
 801c532:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c536:	81a3      	strh	r3, [r4, #12]
 801c538:	2300      	movs	r3, #0
 801c53a:	60bb      	str	r3, [r7, #8]
 801c53c:	607b      	str	r3, [r7, #4]
 801c53e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c542:	e031      	b.n	801c5a8 <__ssprint_r+0xd6>
 801c544:	f8da b000 	ldr.w	fp, [sl]
 801c548:	f8da 6004 	ldr.w	r6, [sl, #4]
 801c54c:	f10a 0a08 	add.w	sl, sl, #8
 801c550:	e7cc      	b.n	801c4ec <__ssprint_r+0x1a>
 801c552:	4642      	mov	r2, r8
 801c554:	6921      	ldr	r1, [r4, #16]
 801c556:	9001      	str	r0, [sp, #4]
 801c558:	f7fc ffdc 	bl	8019514 <memcpy>
 801c55c:	89a2      	ldrh	r2, [r4, #12]
 801c55e:	9b01      	ldr	r3, [sp, #4]
 801c560:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 801c564:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801c568:	81a2      	strh	r2, [r4, #12]
 801c56a:	6123      	str	r3, [r4, #16]
 801c56c:	6165      	str	r5, [r4, #20]
 801c56e:	4443      	add	r3, r8
 801c570:	eba5 0508 	sub.w	r5, r5, r8
 801c574:	6023      	str	r3, [r4, #0]
 801c576:	60a5      	str	r5, [r4, #8]
 801c578:	4633      	mov	r3, r6
 801c57a:	429e      	cmp	r6, r3
 801c57c:	d200      	bcs.n	801c580 <__ssprint_r+0xae>
 801c57e:	4633      	mov	r3, r6
 801c580:	461a      	mov	r2, r3
 801c582:	4659      	mov	r1, fp
 801c584:	6820      	ldr	r0, [r4, #0]
 801c586:	9301      	str	r3, [sp, #4]
 801c588:	f7ff faf6 	bl	801bb78 <memmove>
 801c58c:	68a2      	ldr	r2, [r4, #8]
 801c58e:	9b01      	ldr	r3, [sp, #4]
 801c590:	1ad2      	subs	r2, r2, r3
 801c592:	60a2      	str	r2, [r4, #8]
 801c594:	6822      	ldr	r2, [r4, #0]
 801c596:	4413      	add	r3, r2
 801c598:	6023      	str	r3, [r4, #0]
 801c59a:	68bb      	ldr	r3, [r7, #8]
 801c59c:	1b9e      	subs	r6, r3, r6
 801c59e:	60be      	str	r6, [r7, #8]
 801c5a0:	2e00      	cmp	r6, #0
 801c5a2:	d1cf      	bne.n	801c544 <__ssprint_r+0x72>
 801c5a4:	2000      	movs	r0, #0
 801c5a6:	6078      	str	r0, [r7, #4]
 801c5a8:	b003      	add	sp, #12
 801c5aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c5ae:	462a      	mov	r2, r5
 801c5b0:	4648      	mov	r0, r9
 801c5b2:	f7ff fdcb 	bl	801c14c <_realloc_r>
 801c5b6:	4603      	mov	r3, r0
 801c5b8:	2800      	cmp	r0, #0
 801c5ba:	d1d6      	bne.n	801c56a <__ssprint_r+0x98>
 801c5bc:	6921      	ldr	r1, [r4, #16]
 801c5be:	4648      	mov	r0, r9
 801c5c0:	f7ff f882 	bl	801b6c8 <_free_r>
 801c5c4:	e7b1      	b.n	801c52a <__ssprint_r+0x58>

0801c5c6 <__ascii_wctomb>:
 801c5c6:	b149      	cbz	r1, 801c5dc <__ascii_wctomb+0x16>
 801c5c8:	2aff      	cmp	r2, #255	; 0xff
 801c5ca:	bf85      	ittet	hi
 801c5cc:	238a      	movhi	r3, #138	; 0x8a
 801c5ce:	6003      	strhi	r3, [r0, #0]
 801c5d0:	700a      	strbls	r2, [r1, #0]
 801c5d2:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801c5d6:	bf98      	it	ls
 801c5d8:	2001      	movls	r0, #1
 801c5da:	4770      	bx	lr
 801c5dc:	4608      	mov	r0, r1
 801c5de:	4770      	bx	lr

0801c5e0 <_write_r>:
 801c5e0:	b538      	push	{r3, r4, r5, lr}
 801c5e2:	4c07      	ldr	r4, [pc, #28]	; (801c600 <_write_r+0x20>)
 801c5e4:	4605      	mov	r5, r0
 801c5e6:	4608      	mov	r0, r1
 801c5e8:	4611      	mov	r1, r2
 801c5ea:	2200      	movs	r2, #0
 801c5ec:	6022      	str	r2, [r4, #0]
 801c5ee:	461a      	mov	r2, r3
 801c5f0:	f7e5 fdc0 	bl	8002174 <_write>
 801c5f4:	1c43      	adds	r3, r0, #1
 801c5f6:	d102      	bne.n	801c5fe <_write_r+0x1e>
 801c5f8:	6823      	ldr	r3, [r4, #0]
 801c5fa:	b103      	cbz	r3, 801c5fe <_write_r+0x1e>
 801c5fc:	602b      	str	r3, [r5, #0]
 801c5fe:	bd38      	pop	{r3, r4, r5, pc}
 801c600:	2000c5c8 	.word	0x2000c5c8

0801c604 <__swsetup_r>:
 801c604:	4b32      	ldr	r3, [pc, #200]	; (801c6d0 <__swsetup_r+0xcc>)
 801c606:	b570      	push	{r4, r5, r6, lr}
 801c608:	681d      	ldr	r5, [r3, #0]
 801c60a:	4606      	mov	r6, r0
 801c60c:	460c      	mov	r4, r1
 801c60e:	b125      	cbz	r5, 801c61a <__swsetup_r+0x16>
 801c610:	69ab      	ldr	r3, [r5, #24]
 801c612:	b913      	cbnz	r3, 801c61a <__swsetup_r+0x16>
 801c614:	4628      	mov	r0, r5
 801c616:	f7fe ff81 	bl	801b51c <__sinit>
 801c61a:	4b2e      	ldr	r3, [pc, #184]	; (801c6d4 <__swsetup_r+0xd0>)
 801c61c:	429c      	cmp	r4, r3
 801c61e:	d10f      	bne.n	801c640 <__swsetup_r+0x3c>
 801c620:	686c      	ldr	r4, [r5, #4]
 801c622:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c626:	b29a      	uxth	r2, r3
 801c628:	0715      	lsls	r5, r2, #28
 801c62a:	d42c      	bmi.n	801c686 <__swsetup_r+0x82>
 801c62c:	06d0      	lsls	r0, r2, #27
 801c62e:	d411      	bmi.n	801c654 <__swsetup_r+0x50>
 801c630:	2209      	movs	r2, #9
 801c632:	6032      	str	r2, [r6, #0]
 801c634:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c638:	81a3      	strh	r3, [r4, #12]
 801c63a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c63e:	bd70      	pop	{r4, r5, r6, pc}
 801c640:	4b25      	ldr	r3, [pc, #148]	; (801c6d8 <__swsetup_r+0xd4>)
 801c642:	429c      	cmp	r4, r3
 801c644:	d101      	bne.n	801c64a <__swsetup_r+0x46>
 801c646:	68ac      	ldr	r4, [r5, #8]
 801c648:	e7eb      	b.n	801c622 <__swsetup_r+0x1e>
 801c64a:	4b24      	ldr	r3, [pc, #144]	; (801c6dc <__swsetup_r+0xd8>)
 801c64c:	429c      	cmp	r4, r3
 801c64e:	bf08      	it	eq
 801c650:	68ec      	ldreq	r4, [r5, #12]
 801c652:	e7e6      	b.n	801c622 <__swsetup_r+0x1e>
 801c654:	0751      	lsls	r1, r2, #29
 801c656:	d512      	bpl.n	801c67e <__swsetup_r+0x7a>
 801c658:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c65a:	b141      	cbz	r1, 801c66e <__swsetup_r+0x6a>
 801c65c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c660:	4299      	cmp	r1, r3
 801c662:	d002      	beq.n	801c66a <__swsetup_r+0x66>
 801c664:	4630      	mov	r0, r6
 801c666:	f7ff f82f 	bl	801b6c8 <_free_r>
 801c66a:	2300      	movs	r3, #0
 801c66c:	6363      	str	r3, [r4, #52]	; 0x34
 801c66e:	89a3      	ldrh	r3, [r4, #12]
 801c670:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801c674:	81a3      	strh	r3, [r4, #12]
 801c676:	2300      	movs	r3, #0
 801c678:	6063      	str	r3, [r4, #4]
 801c67a:	6923      	ldr	r3, [r4, #16]
 801c67c:	6023      	str	r3, [r4, #0]
 801c67e:	89a3      	ldrh	r3, [r4, #12]
 801c680:	f043 0308 	orr.w	r3, r3, #8
 801c684:	81a3      	strh	r3, [r4, #12]
 801c686:	6923      	ldr	r3, [r4, #16]
 801c688:	b94b      	cbnz	r3, 801c69e <__swsetup_r+0x9a>
 801c68a:	89a3      	ldrh	r3, [r4, #12]
 801c68c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801c690:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c694:	d003      	beq.n	801c69e <__swsetup_r+0x9a>
 801c696:	4621      	mov	r1, r4
 801c698:	4630      	mov	r0, r6
 801c69a:	f000 f9a9 	bl	801c9f0 <__smakebuf_r>
 801c69e:	89a2      	ldrh	r2, [r4, #12]
 801c6a0:	f012 0301 	ands.w	r3, r2, #1
 801c6a4:	d00c      	beq.n	801c6c0 <__swsetup_r+0xbc>
 801c6a6:	2300      	movs	r3, #0
 801c6a8:	60a3      	str	r3, [r4, #8]
 801c6aa:	6963      	ldr	r3, [r4, #20]
 801c6ac:	425b      	negs	r3, r3
 801c6ae:	61a3      	str	r3, [r4, #24]
 801c6b0:	6923      	ldr	r3, [r4, #16]
 801c6b2:	b953      	cbnz	r3, 801c6ca <__swsetup_r+0xc6>
 801c6b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c6b8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801c6bc:	d1ba      	bne.n	801c634 <__swsetup_r+0x30>
 801c6be:	bd70      	pop	{r4, r5, r6, pc}
 801c6c0:	0792      	lsls	r2, r2, #30
 801c6c2:	bf58      	it	pl
 801c6c4:	6963      	ldrpl	r3, [r4, #20]
 801c6c6:	60a3      	str	r3, [r4, #8]
 801c6c8:	e7f2      	b.n	801c6b0 <__swsetup_r+0xac>
 801c6ca:	2000      	movs	r0, #0
 801c6cc:	e7f7      	b.n	801c6be <__swsetup_r+0xba>
 801c6ce:	bf00      	nop
 801c6d0:	20001cb4 	.word	0x20001cb4
 801c6d4:	080d8acc 	.word	0x080d8acc
 801c6d8:	080d8aec 	.word	0x080d8aec
 801c6dc:	080d8aac 	.word	0x080d8aac

0801c6e0 <_close_r>:
 801c6e0:	b538      	push	{r3, r4, r5, lr}
 801c6e2:	4c06      	ldr	r4, [pc, #24]	; (801c6fc <_close_r+0x1c>)
 801c6e4:	2300      	movs	r3, #0
 801c6e6:	4605      	mov	r5, r0
 801c6e8:	4608      	mov	r0, r1
 801c6ea:	6023      	str	r3, [r4, #0]
 801c6ec:	f7e5 fd6a 	bl	80021c4 <_close>
 801c6f0:	1c43      	adds	r3, r0, #1
 801c6f2:	d102      	bne.n	801c6fa <_close_r+0x1a>
 801c6f4:	6823      	ldr	r3, [r4, #0]
 801c6f6:	b103      	cbz	r3, 801c6fa <_close_r+0x1a>
 801c6f8:	602b      	str	r3, [r5, #0]
 801c6fa:	bd38      	pop	{r3, r4, r5, pc}
 801c6fc:	2000c5c8 	.word	0x2000c5c8

0801c700 <_fclose_r>:
 801c700:	b570      	push	{r4, r5, r6, lr}
 801c702:	4605      	mov	r5, r0
 801c704:	460c      	mov	r4, r1
 801c706:	b911      	cbnz	r1, 801c70e <_fclose_r+0xe>
 801c708:	2600      	movs	r6, #0
 801c70a:	4630      	mov	r0, r6
 801c70c:	bd70      	pop	{r4, r5, r6, pc}
 801c70e:	b118      	cbz	r0, 801c718 <_fclose_r+0x18>
 801c710:	6983      	ldr	r3, [r0, #24]
 801c712:	b90b      	cbnz	r3, 801c718 <_fclose_r+0x18>
 801c714:	f7fe ff02 	bl	801b51c <__sinit>
 801c718:	4b2c      	ldr	r3, [pc, #176]	; (801c7cc <_fclose_r+0xcc>)
 801c71a:	429c      	cmp	r4, r3
 801c71c:	d114      	bne.n	801c748 <_fclose_r+0x48>
 801c71e:	686c      	ldr	r4, [r5, #4]
 801c720:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c722:	07d8      	lsls	r0, r3, #31
 801c724:	d405      	bmi.n	801c732 <_fclose_r+0x32>
 801c726:	89a3      	ldrh	r3, [r4, #12]
 801c728:	0599      	lsls	r1, r3, #22
 801c72a:	d402      	bmi.n	801c732 <_fclose_r+0x32>
 801c72c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c72e:	f7ff fa07 	bl	801bb40 <__retarget_lock_acquire_recursive>
 801c732:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c736:	b98b      	cbnz	r3, 801c75c <_fclose_r+0x5c>
 801c738:	6e66      	ldr	r6, [r4, #100]	; 0x64
 801c73a:	f016 0601 	ands.w	r6, r6, #1
 801c73e:	d1e3      	bne.n	801c708 <_fclose_r+0x8>
 801c740:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c742:	f7ff f9fe 	bl	801bb42 <__retarget_lock_release_recursive>
 801c746:	e7e0      	b.n	801c70a <_fclose_r+0xa>
 801c748:	4b21      	ldr	r3, [pc, #132]	; (801c7d0 <_fclose_r+0xd0>)
 801c74a:	429c      	cmp	r4, r3
 801c74c:	d101      	bne.n	801c752 <_fclose_r+0x52>
 801c74e:	68ac      	ldr	r4, [r5, #8]
 801c750:	e7e6      	b.n	801c720 <_fclose_r+0x20>
 801c752:	4b20      	ldr	r3, [pc, #128]	; (801c7d4 <_fclose_r+0xd4>)
 801c754:	429c      	cmp	r4, r3
 801c756:	bf08      	it	eq
 801c758:	68ec      	ldreq	r4, [r5, #12]
 801c75a:	e7e1      	b.n	801c720 <_fclose_r+0x20>
 801c75c:	4621      	mov	r1, r4
 801c75e:	4628      	mov	r0, r5
 801c760:	f000 f83a 	bl	801c7d8 <__sflush_r>
 801c764:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c766:	4606      	mov	r6, r0
 801c768:	b133      	cbz	r3, 801c778 <_fclose_r+0x78>
 801c76a:	6a21      	ldr	r1, [r4, #32]
 801c76c:	4628      	mov	r0, r5
 801c76e:	4798      	blx	r3
 801c770:	2800      	cmp	r0, #0
 801c772:	bfb8      	it	lt
 801c774:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
 801c778:	89a3      	ldrh	r3, [r4, #12]
 801c77a:	061a      	lsls	r2, r3, #24
 801c77c:	d503      	bpl.n	801c786 <_fclose_r+0x86>
 801c77e:	6921      	ldr	r1, [r4, #16]
 801c780:	4628      	mov	r0, r5
 801c782:	f7fe ffa1 	bl	801b6c8 <_free_r>
 801c786:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c788:	b141      	cbz	r1, 801c79c <_fclose_r+0x9c>
 801c78a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c78e:	4299      	cmp	r1, r3
 801c790:	d002      	beq.n	801c798 <_fclose_r+0x98>
 801c792:	4628      	mov	r0, r5
 801c794:	f7fe ff98 	bl	801b6c8 <_free_r>
 801c798:	2300      	movs	r3, #0
 801c79a:	6363      	str	r3, [r4, #52]	; 0x34
 801c79c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801c79e:	b121      	cbz	r1, 801c7aa <_fclose_r+0xaa>
 801c7a0:	4628      	mov	r0, r5
 801c7a2:	f7fe ff91 	bl	801b6c8 <_free_r>
 801c7a6:	2300      	movs	r3, #0
 801c7a8:	64a3      	str	r3, [r4, #72]	; 0x48
 801c7aa:	f7fe fe9f 	bl	801b4ec <__sfp_lock_acquire>
 801c7ae:	2300      	movs	r3, #0
 801c7b0:	81a3      	strh	r3, [r4, #12]
 801c7b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c7b4:	07db      	lsls	r3, r3, #31
 801c7b6:	d402      	bmi.n	801c7be <_fclose_r+0xbe>
 801c7b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c7ba:	f7ff f9c2 	bl	801bb42 <__retarget_lock_release_recursive>
 801c7be:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c7c0:	f7ff f9bd 	bl	801bb3e <__retarget_lock_close_recursive>
 801c7c4:	f7fe fe98 	bl	801b4f8 <__sfp_lock_release>
 801c7c8:	e79f      	b.n	801c70a <_fclose_r+0xa>
 801c7ca:	bf00      	nop
 801c7cc:	080d8acc 	.word	0x080d8acc
 801c7d0:	080d8aec 	.word	0x080d8aec
 801c7d4:	080d8aac 	.word	0x080d8aac

0801c7d8 <__sflush_r>:
 801c7d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801c7dc:	b293      	uxth	r3, r2
 801c7de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c7e2:	4605      	mov	r5, r0
 801c7e4:	0718      	lsls	r0, r3, #28
 801c7e6:	460c      	mov	r4, r1
 801c7e8:	d461      	bmi.n	801c8ae <__sflush_r+0xd6>
 801c7ea:	684b      	ldr	r3, [r1, #4]
 801c7ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801c7f0:	2b00      	cmp	r3, #0
 801c7f2:	818a      	strh	r2, [r1, #12]
 801c7f4:	dc05      	bgt.n	801c802 <__sflush_r+0x2a>
 801c7f6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801c7f8:	2b00      	cmp	r3, #0
 801c7fa:	dc02      	bgt.n	801c802 <__sflush_r+0x2a>
 801c7fc:	2000      	movs	r0, #0
 801c7fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c802:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c804:	2e00      	cmp	r6, #0
 801c806:	d0f9      	beq.n	801c7fc <__sflush_r+0x24>
 801c808:	2300      	movs	r3, #0
 801c80a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801c80e:	682f      	ldr	r7, [r5, #0]
 801c810:	602b      	str	r3, [r5, #0]
 801c812:	d037      	beq.n	801c884 <__sflush_r+0xac>
 801c814:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801c816:	89a3      	ldrh	r3, [r4, #12]
 801c818:	075a      	lsls	r2, r3, #29
 801c81a:	d505      	bpl.n	801c828 <__sflush_r+0x50>
 801c81c:	6863      	ldr	r3, [r4, #4]
 801c81e:	1ac0      	subs	r0, r0, r3
 801c820:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c822:	b10b      	cbz	r3, 801c828 <__sflush_r+0x50>
 801c824:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801c826:	1ac0      	subs	r0, r0, r3
 801c828:	2300      	movs	r3, #0
 801c82a:	4602      	mov	r2, r0
 801c82c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c82e:	6a21      	ldr	r1, [r4, #32]
 801c830:	4628      	mov	r0, r5
 801c832:	47b0      	blx	r6
 801c834:	1c43      	adds	r3, r0, #1
 801c836:	89a3      	ldrh	r3, [r4, #12]
 801c838:	d106      	bne.n	801c848 <__sflush_r+0x70>
 801c83a:	6829      	ldr	r1, [r5, #0]
 801c83c:	291d      	cmp	r1, #29
 801c83e:	d84f      	bhi.n	801c8e0 <__sflush_r+0x108>
 801c840:	4a2d      	ldr	r2, [pc, #180]	; (801c8f8 <__sflush_r+0x120>)
 801c842:	40ca      	lsrs	r2, r1
 801c844:	07d6      	lsls	r6, r2, #31
 801c846:	d54b      	bpl.n	801c8e0 <__sflush_r+0x108>
 801c848:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801c84c:	b21b      	sxth	r3, r3
 801c84e:	2200      	movs	r2, #0
 801c850:	6062      	str	r2, [r4, #4]
 801c852:	04d9      	lsls	r1, r3, #19
 801c854:	6922      	ldr	r2, [r4, #16]
 801c856:	81a3      	strh	r3, [r4, #12]
 801c858:	6022      	str	r2, [r4, #0]
 801c85a:	d504      	bpl.n	801c866 <__sflush_r+0x8e>
 801c85c:	1c42      	adds	r2, r0, #1
 801c85e:	d101      	bne.n	801c864 <__sflush_r+0x8c>
 801c860:	682b      	ldr	r3, [r5, #0]
 801c862:	b903      	cbnz	r3, 801c866 <__sflush_r+0x8e>
 801c864:	6560      	str	r0, [r4, #84]	; 0x54
 801c866:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c868:	602f      	str	r7, [r5, #0]
 801c86a:	2900      	cmp	r1, #0
 801c86c:	d0c6      	beq.n	801c7fc <__sflush_r+0x24>
 801c86e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c872:	4299      	cmp	r1, r3
 801c874:	d002      	beq.n	801c87c <__sflush_r+0xa4>
 801c876:	4628      	mov	r0, r5
 801c878:	f7fe ff26 	bl	801b6c8 <_free_r>
 801c87c:	2000      	movs	r0, #0
 801c87e:	6360      	str	r0, [r4, #52]	; 0x34
 801c880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c884:	6a21      	ldr	r1, [r4, #32]
 801c886:	2301      	movs	r3, #1
 801c888:	4628      	mov	r0, r5
 801c88a:	47b0      	blx	r6
 801c88c:	1c41      	adds	r1, r0, #1
 801c88e:	d1c2      	bne.n	801c816 <__sflush_r+0x3e>
 801c890:	682b      	ldr	r3, [r5, #0]
 801c892:	2b00      	cmp	r3, #0
 801c894:	d0bf      	beq.n	801c816 <__sflush_r+0x3e>
 801c896:	2b1d      	cmp	r3, #29
 801c898:	d001      	beq.n	801c89e <__sflush_r+0xc6>
 801c89a:	2b16      	cmp	r3, #22
 801c89c:	d101      	bne.n	801c8a2 <__sflush_r+0xca>
 801c89e:	602f      	str	r7, [r5, #0]
 801c8a0:	e7ac      	b.n	801c7fc <__sflush_r+0x24>
 801c8a2:	89a3      	ldrh	r3, [r4, #12]
 801c8a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c8a8:	81a3      	strh	r3, [r4, #12]
 801c8aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c8ae:	690f      	ldr	r7, [r1, #16]
 801c8b0:	2f00      	cmp	r7, #0
 801c8b2:	d0a3      	beq.n	801c7fc <__sflush_r+0x24>
 801c8b4:	079b      	lsls	r3, r3, #30
 801c8b6:	680e      	ldr	r6, [r1, #0]
 801c8b8:	bf08      	it	eq
 801c8ba:	694b      	ldreq	r3, [r1, #20]
 801c8bc:	600f      	str	r7, [r1, #0]
 801c8be:	bf18      	it	ne
 801c8c0:	2300      	movne	r3, #0
 801c8c2:	eba6 0807 	sub.w	r8, r6, r7
 801c8c6:	608b      	str	r3, [r1, #8]
 801c8c8:	f1b8 0f00 	cmp.w	r8, #0
 801c8cc:	dd96      	ble.n	801c7fc <__sflush_r+0x24>
 801c8ce:	4643      	mov	r3, r8
 801c8d0:	463a      	mov	r2, r7
 801c8d2:	6a21      	ldr	r1, [r4, #32]
 801c8d4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801c8d6:	4628      	mov	r0, r5
 801c8d8:	47b0      	blx	r6
 801c8da:	2800      	cmp	r0, #0
 801c8dc:	dc07      	bgt.n	801c8ee <__sflush_r+0x116>
 801c8de:	89a3      	ldrh	r3, [r4, #12]
 801c8e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c8e4:	81a3      	strh	r3, [r4, #12]
 801c8e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c8ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c8ee:	4407      	add	r7, r0
 801c8f0:	eba8 0800 	sub.w	r8, r8, r0
 801c8f4:	e7e8      	b.n	801c8c8 <__sflush_r+0xf0>
 801c8f6:	bf00      	nop
 801c8f8:	20400001 	.word	0x20400001

0801c8fc <_fflush_r>:
 801c8fc:	b538      	push	{r3, r4, r5, lr}
 801c8fe:	690b      	ldr	r3, [r1, #16]
 801c900:	4605      	mov	r5, r0
 801c902:	460c      	mov	r4, r1
 801c904:	b913      	cbnz	r3, 801c90c <_fflush_r+0x10>
 801c906:	2500      	movs	r5, #0
 801c908:	4628      	mov	r0, r5
 801c90a:	bd38      	pop	{r3, r4, r5, pc}
 801c90c:	b118      	cbz	r0, 801c916 <_fflush_r+0x1a>
 801c90e:	6983      	ldr	r3, [r0, #24]
 801c910:	b90b      	cbnz	r3, 801c916 <_fflush_r+0x1a>
 801c912:	f7fe fe03 	bl	801b51c <__sinit>
 801c916:	4b14      	ldr	r3, [pc, #80]	; (801c968 <_fflush_r+0x6c>)
 801c918:	429c      	cmp	r4, r3
 801c91a:	d11b      	bne.n	801c954 <_fflush_r+0x58>
 801c91c:	686c      	ldr	r4, [r5, #4]
 801c91e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c922:	2b00      	cmp	r3, #0
 801c924:	d0ef      	beq.n	801c906 <_fflush_r+0xa>
 801c926:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801c928:	07d0      	lsls	r0, r2, #31
 801c92a:	d404      	bmi.n	801c936 <_fflush_r+0x3a>
 801c92c:	0599      	lsls	r1, r3, #22
 801c92e:	d402      	bmi.n	801c936 <_fflush_r+0x3a>
 801c930:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c932:	f7ff f905 	bl	801bb40 <__retarget_lock_acquire_recursive>
 801c936:	4628      	mov	r0, r5
 801c938:	4621      	mov	r1, r4
 801c93a:	f7ff ff4d 	bl	801c7d8 <__sflush_r>
 801c93e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c940:	07da      	lsls	r2, r3, #31
 801c942:	4605      	mov	r5, r0
 801c944:	d4e0      	bmi.n	801c908 <_fflush_r+0xc>
 801c946:	89a3      	ldrh	r3, [r4, #12]
 801c948:	059b      	lsls	r3, r3, #22
 801c94a:	d4dd      	bmi.n	801c908 <_fflush_r+0xc>
 801c94c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c94e:	f7ff f8f8 	bl	801bb42 <__retarget_lock_release_recursive>
 801c952:	e7d9      	b.n	801c908 <_fflush_r+0xc>
 801c954:	4b05      	ldr	r3, [pc, #20]	; (801c96c <_fflush_r+0x70>)
 801c956:	429c      	cmp	r4, r3
 801c958:	d101      	bne.n	801c95e <_fflush_r+0x62>
 801c95a:	68ac      	ldr	r4, [r5, #8]
 801c95c:	e7df      	b.n	801c91e <_fflush_r+0x22>
 801c95e:	4b04      	ldr	r3, [pc, #16]	; (801c970 <_fflush_r+0x74>)
 801c960:	429c      	cmp	r4, r3
 801c962:	bf08      	it	eq
 801c964:	68ec      	ldreq	r4, [r5, #12]
 801c966:	e7da      	b.n	801c91e <_fflush_r+0x22>
 801c968:	080d8acc 	.word	0x080d8acc
 801c96c:	080d8aec 	.word	0x080d8aec
 801c970:	080d8aac 	.word	0x080d8aac

0801c974 <_lseek_r>:
 801c974:	b538      	push	{r3, r4, r5, lr}
 801c976:	4c07      	ldr	r4, [pc, #28]	; (801c994 <_lseek_r+0x20>)
 801c978:	4605      	mov	r5, r0
 801c97a:	4608      	mov	r0, r1
 801c97c:	4611      	mov	r1, r2
 801c97e:	2200      	movs	r2, #0
 801c980:	6022      	str	r2, [r4, #0]
 801c982:	461a      	mov	r2, r3
 801c984:	f7e5 fc28 	bl	80021d8 <_lseek>
 801c988:	1c43      	adds	r3, r0, #1
 801c98a:	d102      	bne.n	801c992 <_lseek_r+0x1e>
 801c98c:	6823      	ldr	r3, [r4, #0]
 801c98e:	b103      	cbz	r3, 801c992 <_lseek_r+0x1e>
 801c990:	602b      	str	r3, [r5, #0]
 801c992:	bd38      	pop	{r3, r4, r5, pc}
 801c994:	2000c5c8 	.word	0x2000c5c8

0801c998 <__swhatbuf_r>:
 801c998:	b570      	push	{r4, r5, r6, lr}
 801c99a:	460e      	mov	r6, r1
 801c99c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c9a0:	2900      	cmp	r1, #0
 801c9a2:	b090      	sub	sp, #64	; 0x40
 801c9a4:	4614      	mov	r4, r2
 801c9a6:	461d      	mov	r5, r3
 801c9a8:	da09      	bge.n	801c9be <__swhatbuf_r+0x26>
 801c9aa:	89b3      	ldrh	r3, [r6, #12]
 801c9ac:	2200      	movs	r2, #0
 801c9ae:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801c9b2:	602a      	str	r2, [r5, #0]
 801c9b4:	d116      	bne.n	801c9e4 <__swhatbuf_r+0x4c>
 801c9b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c9ba:	6023      	str	r3, [r4, #0]
 801c9bc:	e015      	b.n	801c9ea <__swhatbuf_r+0x52>
 801c9be:	aa01      	add	r2, sp, #4
 801c9c0:	f000 f868 	bl	801ca94 <_fstat_r>
 801c9c4:	2800      	cmp	r0, #0
 801c9c6:	dbf0      	blt.n	801c9aa <__swhatbuf_r+0x12>
 801c9c8:	9a02      	ldr	r2, [sp, #8]
 801c9ca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801c9ce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801c9d2:	425a      	negs	r2, r3
 801c9d4:	415a      	adcs	r2, r3
 801c9d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c9da:	602a      	str	r2, [r5, #0]
 801c9dc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801c9e0:	6023      	str	r3, [r4, #0]
 801c9e2:	e002      	b.n	801c9ea <__swhatbuf_r+0x52>
 801c9e4:	2340      	movs	r3, #64	; 0x40
 801c9e6:	6023      	str	r3, [r4, #0]
 801c9e8:	4610      	mov	r0, r2
 801c9ea:	b010      	add	sp, #64	; 0x40
 801c9ec:	bd70      	pop	{r4, r5, r6, pc}
	...

0801c9f0 <__smakebuf_r>:
 801c9f0:	898b      	ldrh	r3, [r1, #12]
 801c9f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c9f4:	079d      	lsls	r5, r3, #30
 801c9f6:	4606      	mov	r6, r0
 801c9f8:	460c      	mov	r4, r1
 801c9fa:	d507      	bpl.n	801ca0c <__smakebuf_r+0x1c>
 801c9fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801ca00:	6023      	str	r3, [r4, #0]
 801ca02:	6123      	str	r3, [r4, #16]
 801ca04:	2301      	movs	r3, #1
 801ca06:	6163      	str	r3, [r4, #20]
 801ca08:	b002      	add	sp, #8
 801ca0a:	bd70      	pop	{r4, r5, r6, pc}
 801ca0c:	ab01      	add	r3, sp, #4
 801ca0e:	466a      	mov	r2, sp
 801ca10:	f7ff ffc2 	bl	801c998 <__swhatbuf_r>
 801ca14:	9900      	ldr	r1, [sp, #0]
 801ca16:	4605      	mov	r5, r0
 801ca18:	4630      	mov	r0, r6
 801ca1a:	f7fc fb6d 	bl	80190f8 <_malloc_r>
 801ca1e:	b948      	cbnz	r0, 801ca34 <__smakebuf_r+0x44>
 801ca20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ca24:	059a      	lsls	r2, r3, #22
 801ca26:	d4ef      	bmi.n	801ca08 <__smakebuf_r+0x18>
 801ca28:	f023 0303 	bic.w	r3, r3, #3
 801ca2c:	f043 0302 	orr.w	r3, r3, #2
 801ca30:	81a3      	strh	r3, [r4, #12]
 801ca32:	e7e3      	b.n	801c9fc <__smakebuf_r+0xc>
 801ca34:	4b0d      	ldr	r3, [pc, #52]	; (801ca6c <__smakebuf_r+0x7c>)
 801ca36:	62b3      	str	r3, [r6, #40]	; 0x28
 801ca38:	89a3      	ldrh	r3, [r4, #12]
 801ca3a:	6020      	str	r0, [r4, #0]
 801ca3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ca40:	81a3      	strh	r3, [r4, #12]
 801ca42:	9b00      	ldr	r3, [sp, #0]
 801ca44:	6163      	str	r3, [r4, #20]
 801ca46:	9b01      	ldr	r3, [sp, #4]
 801ca48:	6120      	str	r0, [r4, #16]
 801ca4a:	b15b      	cbz	r3, 801ca64 <__smakebuf_r+0x74>
 801ca4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ca50:	4630      	mov	r0, r6
 801ca52:	f000 f831 	bl	801cab8 <_isatty_r>
 801ca56:	b128      	cbz	r0, 801ca64 <__smakebuf_r+0x74>
 801ca58:	89a3      	ldrh	r3, [r4, #12]
 801ca5a:	f023 0303 	bic.w	r3, r3, #3
 801ca5e:	f043 0301 	orr.w	r3, r3, #1
 801ca62:	81a3      	strh	r3, [r4, #12]
 801ca64:	89a3      	ldrh	r3, [r4, #12]
 801ca66:	431d      	orrs	r5, r3
 801ca68:	81a5      	strh	r5, [r4, #12]
 801ca6a:	e7cd      	b.n	801ca08 <__smakebuf_r+0x18>
 801ca6c:	0801b46d 	.word	0x0801b46d

0801ca70 <_read_r>:
 801ca70:	b538      	push	{r3, r4, r5, lr}
 801ca72:	4c07      	ldr	r4, [pc, #28]	; (801ca90 <_read_r+0x20>)
 801ca74:	4605      	mov	r5, r0
 801ca76:	4608      	mov	r0, r1
 801ca78:	4611      	mov	r1, r2
 801ca7a:	2200      	movs	r2, #0
 801ca7c:	6022      	str	r2, [r4, #0]
 801ca7e:	461a      	mov	r2, r3
 801ca80:	f7e5 fb6a 	bl	8002158 <_read>
 801ca84:	1c43      	adds	r3, r0, #1
 801ca86:	d102      	bne.n	801ca8e <_read_r+0x1e>
 801ca88:	6823      	ldr	r3, [r4, #0]
 801ca8a:	b103      	cbz	r3, 801ca8e <_read_r+0x1e>
 801ca8c:	602b      	str	r3, [r5, #0]
 801ca8e:	bd38      	pop	{r3, r4, r5, pc}
 801ca90:	2000c5c8 	.word	0x2000c5c8

0801ca94 <_fstat_r>:
 801ca94:	b538      	push	{r3, r4, r5, lr}
 801ca96:	4c07      	ldr	r4, [pc, #28]	; (801cab4 <_fstat_r+0x20>)
 801ca98:	2300      	movs	r3, #0
 801ca9a:	4605      	mov	r5, r0
 801ca9c:	4608      	mov	r0, r1
 801ca9e:	4611      	mov	r1, r2
 801caa0:	6023      	str	r3, [r4, #0]
 801caa2:	f7e5 fb92 	bl	80021ca <_fstat>
 801caa6:	1c43      	adds	r3, r0, #1
 801caa8:	d102      	bne.n	801cab0 <_fstat_r+0x1c>
 801caaa:	6823      	ldr	r3, [r4, #0]
 801caac:	b103      	cbz	r3, 801cab0 <_fstat_r+0x1c>
 801caae:	602b      	str	r3, [r5, #0]
 801cab0:	bd38      	pop	{r3, r4, r5, pc}
 801cab2:	bf00      	nop
 801cab4:	2000c5c8 	.word	0x2000c5c8

0801cab8 <_isatty_r>:
 801cab8:	b538      	push	{r3, r4, r5, lr}
 801caba:	4c06      	ldr	r4, [pc, #24]	; (801cad4 <_isatty_r+0x1c>)
 801cabc:	2300      	movs	r3, #0
 801cabe:	4605      	mov	r5, r0
 801cac0:	4608      	mov	r0, r1
 801cac2:	6023      	str	r3, [r4, #0]
 801cac4:	f7e5 fb86 	bl	80021d4 <_isatty>
 801cac8:	1c43      	adds	r3, r0, #1
 801caca:	d102      	bne.n	801cad2 <_isatty_r+0x1a>
 801cacc:	6823      	ldr	r3, [r4, #0]
 801cace:	b103      	cbz	r3, 801cad2 <_isatty_r+0x1a>
 801cad0:	602b      	str	r3, [r5, #0]
 801cad2:	bd38      	pop	{r3, r4, r5, pc}
 801cad4:	2000c5c8 	.word	0x2000c5c8

0801cad8 <_init>:
 801cad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cada:	bf00      	nop
 801cadc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cade:	bc08      	pop	{r3}
 801cae0:	469e      	mov	lr, r3
 801cae2:	4770      	bx	lr

0801cae4 <_fini>:
 801cae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cae6:	bf00      	nop
 801cae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801caea:	bc08      	pop	{r3}
 801caec:	469e      	mov	lr, r3
 801caee:	4770      	bx	lr
